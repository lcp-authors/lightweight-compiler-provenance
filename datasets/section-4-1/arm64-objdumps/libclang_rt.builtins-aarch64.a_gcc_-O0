In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libclang_rt.builtins-aarch64.a_gcc_-O0:

comparetf2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <toRep>:
   0:	sub	sp, sp, #0x20
   4:	str	q0, [sp]
   8:	ldr	q0, [sp]
   c:	str	q0, [sp, #16]
  10:	ldp	x0, x1, [sp, #16]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__cmptf2>:
  1c:	stp	x29, x30, [sp, #-144]!
  20:	mov	x29, sp
  24:	stp	x20, x21, [sp, #16]
  28:	stp	x22, x23, [sp, #32]
  2c:	str	q0, [sp, #64]
  30:	str	q1, [sp, #48]
  34:	ldr	q0, [sp, #64]
  38:	bl	0 <toRep>
  3c:	stp	x0, x1, [sp, #128]
  40:	ldr	q0, [sp, #48]
  44:	bl	0 <toRep>
  48:	stp	x0, x1, [sp, #112]
  4c:	ldp	x0, x1, [sp, #128]
  50:	mov	x2, #0xffffffffffffffff    	// #-1
  54:	and	x2, x0, x2
  58:	str	x2, [sp, #96]
  5c:	and	x0, x1, #0x7fffffffffffffff
  60:	str	x0, [sp, #104]
  64:	ldp	x0, x1, [sp, #112]
  68:	mov	x2, #0xffffffffffffffff    	// #-1
  6c:	and	x2, x0, x2
  70:	str	x2, [sp, #80]
  74:	and	x0, x1, #0x7fffffffffffffff
  78:	str	x0, [sp, #88]
  7c:	ldr	x1, [sp, #104]
  80:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
  84:	cmp	x1, x0
  88:	b.hi	d4 <__cmptf2+0xb8>  // b.pmore
  8c:	ldr	x1, [sp, #104]
  90:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
  94:	cmp	x1, x0
  98:	b.ne	a8 <__cmptf2+0x8c>  // b.any
  9c:	ldr	x0, [sp, #96]
  a0:	cmp	x0, #0x0
  a4:	b.ne	d4 <__cmptf2+0xb8>  // b.any
  a8:	ldr	x1, [sp, #88]
  ac:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
  b0:	cmp	x1, x0
  b4:	b.hi	d4 <__cmptf2+0xb8>  // b.pmore
  b8:	ldr	x1, [sp, #88]
  bc:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
  c0:	cmp	x1, x0
  c4:	b.ne	dc <__cmptf2+0xc0>  // b.any
  c8:	ldr	x0, [sp, #80]
  cc:	cmp	x0, #0x0
  d0:	b.eq	dc <__cmptf2+0xc0>  // b.none
  d4:	mov	w0, #0x1                   	// #1
  d8:	b	1f8 <__cmptf2+0x1dc>
  dc:	ldr	x1, [sp, #96]
  e0:	ldr	x0, [sp, #80]
  e4:	orr	x20, x1, x0
  e8:	ldr	x1, [sp, #104]
  ec:	ldr	x0, [sp, #88]
  f0:	orr	x21, x1, x0
  f4:	mov	x0, x20
  f8:	orr	x0, x0, x21
  fc:	cmp	x0, #0x0
 100:	b.ne	10c <__cmptf2+0xf0>  // b.any
 104:	mov	w0, #0x0                   	// #0
 108:	b	1f8 <__cmptf2+0x1dc>
 10c:	ldr	x1, [sp, #128]
 110:	ldr	x0, [sp, #112]
 114:	and	x22, x1, x0
 118:	ldr	x1, [sp, #136]
 11c:	ldr	x0, [sp, #120]
 120:	and	x23, x1, x0
 124:	cmp	x23, #0x0
 128:	b.lt	194 <__cmptf2+0x178>  // b.tstop
 12c:	ldr	x1, [sp, #120]
 130:	ldr	x0, [sp, #136]
 134:	cmp	x1, x0
 138:	b.gt	15c <__cmptf2+0x140>
 13c:	ldr	x1, [sp, #120]
 140:	ldr	x0, [sp, #136]
 144:	cmp	x1, x0
 148:	b.ne	164 <__cmptf2+0x148>  // b.any
 14c:	ldr	x1, [sp, #112]
 150:	ldr	x0, [sp, #128]
 154:	cmp	x1, x0
 158:	b.ls	164 <__cmptf2+0x148>  // b.plast
 15c:	mov	w0, #0xffffffff            	// #-1
 160:	b	1f8 <__cmptf2+0x1dc>
 164:	ldr	x1, [sp, #128]
 168:	ldr	x0, [sp, #112]
 16c:	cmp	x1, x0
 170:	b.ne	18c <__cmptf2+0x170>  // b.any
 174:	ldr	x1, [sp, #136]
 178:	ldr	x0, [sp, #120]
 17c:	cmp	x1, x0
 180:	b.ne	18c <__cmptf2+0x170>  // b.any
 184:	mov	w0, #0x0                   	// #0
 188:	b	1f8 <__cmptf2+0x1dc>
 18c:	mov	w0, #0x1                   	// #1
 190:	b	1f8 <__cmptf2+0x1dc>
 194:	ldr	x1, [sp, #136]
 198:	ldr	x0, [sp, #120]
 19c:	cmp	x1, x0
 1a0:	b.gt	1c4 <__cmptf2+0x1a8>
 1a4:	ldr	x1, [sp, #136]
 1a8:	ldr	x0, [sp, #120]
 1ac:	cmp	x1, x0
 1b0:	b.ne	1cc <__cmptf2+0x1b0>  // b.any
 1b4:	ldr	x1, [sp, #128]
 1b8:	ldr	x0, [sp, #112]
 1bc:	cmp	x1, x0
 1c0:	b.ls	1cc <__cmptf2+0x1b0>  // b.plast
 1c4:	mov	w0, #0xffffffff            	// #-1
 1c8:	b	1f8 <__cmptf2+0x1dc>
 1cc:	ldr	x1, [sp, #128]
 1d0:	ldr	x0, [sp, #112]
 1d4:	cmp	x1, x0
 1d8:	b.ne	1f4 <__cmptf2+0x1d8>  // b.any
 1dc:	ldr	x1, [sp, #136]
 1e0:	ldr	x0, [sp, #120]
 1e4:	cmp	x1, x0
 1e8:	b.ne	1f4 <__cmptf2+0x1d8>  // b.any
 1ec:	mov	w0, #0x0                   	// #0
 1f0:	b	1f8 <__cmptf2+0x1dc>
 1f4:	mov	w0, #0x1                   	// #1
 1f8:	ldp	x20, x21, [sp, #16]
 1fc:	ldp	x22, x23, [sp, #32]
 200:	ldp	x29, x30, [sp], #144
 204:	ret

0000000000000208 <__getf2>:
 208:	stp	x29, x30, [sp, #-144]!
 20c:	mov	x29, sp
 210:	stp	x20, x21, [sp, #16]
 214:	stp	x22, x23, [sp, #32]
 218:	str	q0, [sp, #64]
 21c:	str	q1, [sp, #48]
 220:	ldr	q0, [sp, #64]
 224:	bl	0 <toRep>
 228:	stp	x0, x1, [sp, #128]
 22c:	ldr	q0, [sp, #48]
 230:	bl	0 <toRep>
 234:	stp	x0, x1, [sp, #112]
 238:	ldp	x0, x1, [sp, #128]
 23c:	mov	x2, #0xffffffffffffffff    	// #-1
 240:	and	x2, x0, x2
 244:	str	x2, [sp, #96]
 248:	and	x0, x1, #0x7fffffffffffffff
 24c:	str	x0, [sp, #104]
 250:	ldp	x0, x1, [sp, #112]
 254:	mov	x2, #0xffffffffffffffff    	// #-1
 258:	and	x2, x0, x2
 25c:	str	x2, [sp, #80]
 260:	and	x0, x1, #0x7fffffffffffffff
 264:	str	x0, [sp, #88]
 268:	ldr	x1, [sp, #104]
 26c:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
 270:	cmp	x1, x0
 274:	b.hi	2c0 <__getf2+0xb8>  // b.pmore
 278:	ldr	x1, [sp, #104]
 27c:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
 280:	cmp	x1, x0
 284:	b.ne	294 <__getf2+0x8c>  // b.any
 288:	ldr	x0, [sp, #96]
 28c:	cmp	x0, #0x0
 290:	b.ne	2c0 <__getf2+0xb8>  // b.any
 294:	ldr	x1, [sp, #88]
 298:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
 29c:	cmp	x1, x0
 2a0:	b.hi	2c0 <__getf2+0xb8>  // b.pmore
 2a4:	ldr	x1, [sp, #88]
 2a8:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
 2ac:	cmp	x1, x0
 2b0:	b.ne	2c8 <__getf2+0xc0>  // b.any
 2b4:	ldr	x0, [sp, #80]
 2b8:	cmp	x0, #0x0
 2bc:	b.eq	2c8 <__getf2+0xc0>  // b.none
 2c0:	mov	w0, #0xffffffff            	// #-1
 2c4:	b	3e4 <__getf2+0x1dc>
 2c8:	ldr	x1, [sp, #96]
 2cc:	ldr	x0, [sp, #80]
 2d0:	orr	x20, x1, x0
 2d4:	ldr	x1, [sp, #104]
 2d8:	ldr	x0, [sp, #88]
 2dc:	orr	x21, x1, x0
 2e0:	mov	x0, x20
 2e4:	orr	x0, x0, x21
 2e8:	cmp	x0, #0x0
 2ec:	b.ne	2f8 <__getf2+0xf0>  // b.any
 2f0:	mov	w0, #0x0                   	// #0
 2f4:	b	3e4 <__getf2+0x1dc>
 2f8:	ldr	x1, [sp, #128]
 2fc:	ldr	x0, [sp, #112]
 300:	and	x22, x1, x0
 304:	ldr	x1, [sp, #136]
 308:	ldr	x0, [sp, #120]
 30c:	and	x23, x1, x0
 310:	cmp	x23, #0x0
 314:	b.lt	380 <__getf2+0x178>  // b.tstop
 318:	ldr	x1, [sp, #120]
 31c:	ldr	x0, [sp, #136]
 320:	cmp	x1, x0
 324:	b.gt	348 <__getf2+0x140>
 328:	ldr	x1, [sp, #120]
 32c:	ldr	x0, [sp, #136]
 330:	cmp	x1, x0
 334:	b.ne	350 <__getf2+0x148>  // b.any
 338:	ldr	x1, [sp, #112]
 33c:	ldr	x0, [sp, #128]
 340:	cmp	x1, x0
 344:	b.ls	350 <__getf2+0x148>  // b.plast
 348:	mov	w0, #0xffffffff            	// #-1
 34c:	b	3e4 <__getf2+0x1dc>
 350:	ldr	x1, [sp, #128]
 354:	ldr	x0, [sp, #112]
 358:	cmp	x1, x0
 35c:	b.ne	378 <__getf2+0x170>  // b.any
 360:	ldr	x1, [sp, #136]
 364:	ldr	x0, [sp, #120]
 368:	cmp	x1, x0
 36c:	b.ne	378 <__getf2+0x170>  // b.any
 370:	mov	w0, #0x0                   	// #0
 374:	b	3e4 <__getf2+0x1dc>
 378:	mov	w0, #0x1                   	// #1
 37c:	b	3e4 <__getf2+0x1dc>
 380:	ldr	x1, [sp, #136]
 384:	ldr	x0, [sp, #120]
 388:	cmp	x1, x0
 38c:	b.gt	3b0 <__getf2+0x1a8>
 390:	ldr	x1, [sp, #136]
 394:	ldr	x0, [sp, #120]
 398:	cmp	x1, x0
 39c:	b.ne	3b8 <__getf2+0x1b0>  // b.any
 3a0:	ldr	x1, [sp, #128]
 3a4:	ldr	x0, [sp, #112]
 3a8:	cmp	x1, x0
 3ac:	b.ls	3b8 <__getf2+0x1b0>  // b.plast
 3b0:	mov	w0, #0xffffffff            	// #-1
 3b4:	b	3e4 <__getf2+0x1dc>
 3b8:	ldr	x1, [sp, #128]
 3bc:	ldr	x0, [sp, #112]
 3c0:	cmp	x1, x0
 3c4:	b.ne	3e0 <__getf2+0x1d8>  // b.any
 3c8:	ldr	x1, [sp, #136]
 3cc:	ldr	x0, [sp, #120]
 3d0:	cmp	x1, x0
 3d4:	b.ne	3e0 <__getf2+0x1d8>  // b.any
 3d8:	mov	w0, #0x0                   	// #0
 3dc:	b	3e4 <__getf2+0x1dc>
 3e0:	mov	w0, #0x1                   	// #1
 3e4:	ldp	x20, x21, [sp, #16]
 3e8:	ldp	x22, x23, [sp, #32]
 3ec:	ldp	x29, x30, [sp], #144
 3f0:	ret

00000000000003f4 <__unordtf2>:
 3f4:	stp	x29, x30, [sp, #-80]!
 3f8:	mov	x29, sp
 3fc:	str	q0, [sp, #32]
 400:	str	q1, [sp, #16]
 404:	ldr	q0, [sp, #32]
 408:	bl	0 <toRep>
 40c:	mov	x2, #0xffffffffffffffff    	// #-1
 410:	and	x2, x0, x2
 414:	str	x2, [sp, #64]
 418:	and	x0, x1, #0x7fffffffffffffff
 41c:	str	x0, [sp, #72]
 420:	ldr	q0, [sp, #16]
 424:	bl	0 <toRep>
 428:	mov	x2, #0xffffffffffffffff    	// #-1
 42c:	and	x2, x0, x2
 430:	str	x2, [sp, #48]
 434:	and	x0, x1, #0x7fffffffffffffff
 438:	str	x0, [sp, #56]
 43c:	ldr	x1, [sp, #72]
 440:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
 444:	cmp	x1, x0
 448:	b.hi	494 <__unordtf2+0xa0>  // b.pmore
 44c:	ldr	x1, [sp, #72]
 450:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
 454:	cmp	x1, x0
 458:	b.ne	468 <__unordtf2+0x74>  // b.any
 45c:	ldr	x0, [sp, #64]
 460:	cmp	x0, #0x0
 464:	b.ne	494 <__unordtf2+0xa0>  // b.any
 468:	ldr	x1, [sp, #56]
 46c:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
 470:	cmp	x1, x0
 474:	b.hi	494 <__unordtf2+0xa0>  // b.pmore
 478:	ldr	x1, [sp, #56]
 47c:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
 480:	cmp	x1, x0
 484:	b.ne	49c <__unordtf2+0xa8>  // b.any
 488:	ldr	x0, [sp, #48]
 48c:	cmp	x0, #0x0
 490:	b.eq	49c <__unordtf2+0xa8>  // b.none
 494:	mov	w0, #0x1                   	// #1
 498:	b	4a0 <__unordtf2+0xac>
 49c:	mov	w0, #0x0                   	// #0
 4a0:	ldp	x29, x30, [sp], #80
 4a4:	ret

extenddftf2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <src_rep_t_clz>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	clz	x0, x0
  10:	add	sp, sp, #0x10
  14:	ret

0000000000000018 <srcToRep>:
  18:	sub	sp, sp, #0x20
  1c:	str	d0, [sp, #8]
  20:	ldr	d0, [sp, #8]
  24:	str	d0, [sp, #24]
  28:	ldr	x0, [sp, #24]
  2c:	add	sp, sp, #0x20
  30:	ret

0000000000000034 <dstFromRep>:
  34:	sub	sp, sp, #0x20
  38:	stp	x0, x1, [sp]
  3c:	ldp	x0, x1, [sp]
  40:	stp	x0, x1, [sp, #16]
  44:	ldr	q0, [sp, #16]
  48:	add	sp, sp, #0x20
  4c:	ret

0000000000000050 <__extendXfYf2__>:
  50:	stp	x29, x30, [sp, #-432]!
  54:	mov	x29, sp
  58:	stp	x19, x20, [sp, #16]
  5c:	stp	x21, x22, [sp, #32]
  60:	stp	x23, x24, [sp, #48]
  64:	stp	x25, x26, [sp, #64]
  68:	str	x27, [sp, #80]
  6c:	str	d0, [sp, #264]
  70:	mov	w0, #0x40                  	// #64
  74:	str	w0, [sp, #412]
  78:	mov	w0, #0x34                  	// #52
  7c:	ldr	w1, [sp, #412]
  80:	sub	w0, w1, w0
  84:	sub	w0, w0, #0x1
  88:	str	w0, [sp, #408]
  8c:	ldr	w0, [sp, #408]
  90:	mov	w1, #0x1                   	// #1
  94:	lsl	w0, w1, w0
  98:	sub	w0, w0, #0x1
  9c:	str	w0, [sp, #404]
  a0:	ldr	w0, [sp, #404]
  a4:	asr	w0, w0, #1
  a8:	str	w0, [sp, #400]
  ac:	mov	w0, #0x34                  	// #52
  b0:	mov	x1, #0x1                   	// #1
  b4:	lsl	x0, x1, x0
  b8:	str	x0, [sp, #392]
  bc:	ldrsw	x1, [sp, #404]
  c0:	mov	w0, #0x34                  	// #52
  c4:	lsl	x0, x1, x0
  c8:	str	x0, [sp, #384]
  cc:	mov	w1, #0x34                  	// #52
  d0:	ldr	w0, [sp, #408]
  d4:	add	w0, w1, w0
  d8:	mov	x1, #0x1                   	// #1
  dc:	lsl	x0, x1, x0
  e0:	str	x0, [sp, #376]
  e4:	ldr	x0, [sp, #376]
  e8:	sub	x0, x0, #0x1
  ec:	str	x0, [sp, #368]
  f0:	mov	w0, #0x34                  	// #52
  f4:	sub	w0, w0, #0x1
  f8:	mov	x1, #0x1                   	// #1
  fc:	lsl	x0, x1, x0
 100:	str	x0, [sp, #360]
 104:	ldr	x0, [sp, #360]
 108:	sub	x0, x0, #0x1
 10c:	str	x0, [sp, #352]
 110:	mov	w0, #0x80                  	// #128
 114:	str	w0, [sp, #348]
 118:	mov	w0, #0x70                  	// #112
 11c:	ldr	w1, [sp, #348]
 120:	sub	w0, w1, w0
 124:	sub	w0, w0, #0x1
 128:	str	w0, [sp, #344]
 12c:	ldr	w0, [sp, #344]
 130:	mov	w1, #0x1                   	// #1
 134:	lsl	w0, w1, w0
 138:	sub	w0, w0, #0x1
 13c:	str	w0, [sp, #340]
 140:	ldr	w0, [sp, #340]
 144:	asr	w0, w0, #1
 148:	str	w0, [sp, #336]
 14c:	mov	w2, #0x70                  	// #112
 150:	sub	w3, w2, #0x40
 154:	mov	x0, #0x1                   	// #1
 158:	lsl	x4, x0, x3
 15c:	mov	x5, #0x0                   	// #0
 160:	mov	x0, #0x1                   	// #1
 164:	lsr	x1, x0, #1
 168:	mov	w0, #0x3f                  	// #63
 16c:	sub	w0, w0, w2
 170:	lsr	x1, x1, x0
 174:	mov	x0, #0x0                   	// #0
 178:	lsl	x0, x0, x2
 17c:	orr	x0, x0, x1
 180:	str	x0, [sp, #328]
 184:	mov	x0, #0x1                   	// #1
 188:	lsl	x0, x0, x2
 18c:	str	x0, [sp, #320]
 190:	ldr	x0, [sp, #328]
 194:	cmp	w3, #0x0
 198:	csel	x0, x0, x4, lt  // lt = tstop
 19c:	str	x0, [sp, #328]
 1a0:	ldr	x0, [sp, #320]
 1a4:	cmp	w3, #0x0
 1a8:	csel	x0, x0, x5, lt  // lt = tstop
 1ac:	str	x0, [sp, #320]
 1b0:	ldr	d0, [sp, #264]
 1b4:	bl	18 <srcToRep>
 1b8:	str	x0, [sp, #312]
 1bc:	ldr	x1, [sp, #312]
 1c0:	ldr	x0, [sp, #368]
 1c4:	and	x0, x1, x0
 1c8:	str	x0, [sp, #304]
 1cc:	ldr	x1, [sp, #312]
 1d0:	ldr	x0, [sp, #376]
 1d4:	and	x0, x1, x0
 1d8:	str	x0, [sp, #296]
 1dc:	ldr	x1, [sp, #304]
 1e0:	ldr	x0, [sp, #392]
 1e4:	sub	x1, x1, x0
 1e8:	ldr	x2, [sp, #384]
 1ec:	ldr	x0, [sp, #392]
 1f0:	sub	x0, x2, x0
 1f4:	cmp	x1, x0
 1f8:	b.cs	330 <__extendXfYf2__+0x2e0>  // b.hs, b.nlast
 1fc:	ldr	x0, [sp, #304]
 200:	str	x0, [sp, #112]
 204:	str	xzr, [sp, #120]
 208:	mov	w1, #0x70                  	// #112
 20c:	mov	w0, #0x34                  	// #52
 210:	sub	w0, w1, w0
 214:	sub	w1, w0, #0x40
 218:	ldp	x6, x7, [sp, #112]
 21c:	mov	x2, x6
 220:	lsl	x2, x2, x1
 224:	mov	x5, #0x0                   	// #0
 228:	mov	x3, x6
 22c:	lsr	x4, x3, #1
 230:	mov	w3, #0x3f                  	// #63
 234:	sub	w3, w3, w0
 238:	lsr	x3, x4, x3
 23c:	mov	x4, x7
 240:	lsl	x4, x4, x0
 244:	orr	x3, x4, x3
 248:	str	x3, [sp, #424]
 24c:	mov	x3, x6
 250:	lsl	x0, x3, x0
 254:	str	x0, [sp, #416]
 258:	ldr	x0, [sp, #424]
 25c:	cmp	w1, #0x0
 260:	csel	x0, x0, x2, lt  // lt = tstop
 264:	str	x0, [sp, #424]
 268:	ldr	x0, [sp, #416]
 26c:	cmp	w1, #0x0
 270:	csel	x0, x0, x5, lt  // lt = tstop
 274:	str	x0, [sp, #416]
 278:	ldr	w1, [sp, #336]
 27c:	ldr	w0, [sp, #400]
 280:	sub	w0, w1, w0
 284:	sxtw	x0, w0
 288:	str	x0, [sp, #128]
 28c:	asr	x0, x0, #63
 290:	str	x0, [sp, #136]
 294:	mov	w0, #0x70                  	// #112
 298:	sub	w1, w0, #0x40
 29c:	ldp	x6, x7, [sp, #128]
 2a0:	mov	x2, x6
 2a4:	lsl	x2, x2, x1
 2a8:	mov	x5, #0x0                   	// #0
 2ac:	mov	x3, x6
 2b0:	lsr	x4, x3, #1
 2b4:	mov	w3, #0x3f                  	// #63
 2b8:	sub	w3, w3, w0
 2bc:	lsr	x3, x4, x3
 2c0:	mov	x4, x7
 2c4:	lsl	x4, x4, x0
 2c8:	str	x4, [sp, #104]
 2cc:	ldr	x4, [sp, #104]
 2d0:	orr	x3, x3, x4
 2d4:	str	x3, [sp, #104]
 2d8:	mov	x3, x6
 2dc:	lsl	x0, x3, x0
 2e0:	str	x0, [sp, #96]
 2e4:	cmp	w1, #0x0
 2e8:	ldr	x0, [sp, #104]
 2ec:	csel	x0, x2, x0, ge  // ge = tcont
 2f0:	str	x0, [sp, #104]
 2f4:	cmp	w1, #0x0
 2f8:	ldr	x0, [sp, #96]
 2fc:	csel	x0, x5, x0, ge  // ge = tcont
 300:	str	x0, [sp, #96]
 304:	ldp	x0, x1, [sp, #416]
 308:	ldp	x4, x5, [sp, #96]
 30c:	mov	x2, x4
 310:	adds	x2, x0, x2
 314:	mov	x3, x5
 318:	adc	x0, x1, x3
 31c:	str	x2, [sp, #240]
 320:	str	x0, [sp, #248]
 324:	ldp	x0, x1, [sp, #240]
 328:	stp	x0, x1, [sp, #416]
 32c:	b	634 <__extendXfYf2__+0x5e4>
 330:	ldr	x1, [sp, #304]
 334:	ldr	x0, [sp, #384]
 338:	cmp	x1, x0
 33c:	b.cc	4c8 <__extendXfYf2__+0x478>  // b.lo, b.ul, b.last
 340:	ldr	w0, [sp, #340]
 344:	sxtw	x0, w0
 348:	str	x0, [sp, #144]
 34c:	asr	x0, x0, #63
 350:	str	x0, [sp, #152]
 354:	mov	w0, #0x70                  	// #112
 358:	sub	w1, w0, #0x40
 35c:	ldp	x6, x7, [sp, #144]
 360:	mov	x2, x6
 364:	lsl	x2, x2, x1
 368:	mov	x5, #0x0                   	// #0
 36c:	mov	x3, x6
 370:	lsr	x4, x3, #1
 374:	mov	w3, #0x3f                  	// #63
 378:	sub	w3, w3, w0
 37c:	lsr	x3, x4, x3
 380:	mov	x4, x7
 384:	lsl	x4, x4, x0
 388:	orr	x3, x4, x3
 38c:	str	x3, [sp, #424]
 390:	mov	x3, x6
 394:	lsl	x0, x3, x0
 398:	str	x0, [sp, #416]
 39c:	ldr	x0, [sp, #424]
 3a0:	cmp	w1, #0x0
 3a4:	csel	x0, x0, x2, lt  // lt = tstop
 3a8:	str	x0, [sp, #424]
 3ac:	ldr	x0, [sp, #416]
 3b0:	cmp	w1, #0x0
 3b4:	csel	x0, x0, x5, lt  // lt = tstop
 3b8:	str	x0, [sp, #416]
 3bc:	ldr	x1, [sp, #304]
 3c0:	ldr	x0, [sp, #360]
 3c4:	and	x0, x1, x0
 3c8:	str	x0, [sp, #160]
 3cc:	str	xzr, [sp, #168]
 3d0:	mov	w1, #0x70                  	// #112
 3d4:	mov	w0, #0x34                  	// #52
 3d8:	sub	w0, w1, w0
 3dc:	sub	w1, w0, #0x40
 3e0:	ldp	x6, x7, [sp, #160]
 3e4:	mov	x2, x6
 3e8:	lsl	x2, x2, x1
 3ec:	mov	x5, #0x0                   	// #0
 3f0:	mov	x3, x6
 3f4:	lsr	x4, x3, #1
 3f8:	mov	w3, #0x3f                  	// #63
 3fc:	sub	w3, w3, w0
 400:	lsr	x3, x4, x3
 404:	mov	x4, x7
 408:	lsl	x27, x4, x0
 40c:	orr	x27, x3, x27
 410:	mov	x3, x6
 414:	lsl	x26, x3, x0
 418:	cmp	w1, #0x0
 41c:	csel	x27, x2, x27, ge  // ge = tcont
 420:	cmp	w1, #0x0
 424:	csel	x26, x5, x26, ge  // ge = tcont
 428:	ldr	x0, [sp, #416]
 42c:	orr	x0, x0, x26
 430:	str	x0, [sp, #416]
 434:	ldr	x0, [sp, #424]
 438:	orr	x0, x0, x27
 43c:	str	x0, [sp, #424]
 440:	ldr	x1, [sp, #304]
 444:	ldr	x0, [sp, #352]
 448:	and	x0, x1, x0
 44c:	str	x0, [sp, #176]
 450:	str	xzr, [sp, #184]
 454:	mov	w1, #0x70                  	// #112
 458:	mov	w0, #0x34                  	// #52
 45c:	sub	w0, w1, w0
 460:	sub	w1, w0, #0x40
 464:	ldp	x6, x7, [sp, #176]
 468:	mov	x2, x6
 46c:	lsl	x2, x2, x1
 470:	mov	x5, #0x0                   	// #0
 474:	mov	x3, x6
 478:	lsr	x4, x3, #1
 47c:	mov	w3, #0x3f                  	// #63
 480:	sub	w3, w3, w0
 484:	lsr	x3, x4, x3
 488:	mov	x4, x7
 48c:	lsl	x25, x4, x0
 490:	orr	x25, x3, x25
 494:	mov	x3, x6
 498:	lsl	x24, x3, x0
 49c:	cmp	w1, #0x0
 4a0:	csel	x25, x2, x25, ge  // ge = tcont
 4a4:	cmp	w1, #0x0
 4a8:	csel	x24, x5, x24, ge  // ge = tcont
 4ac:	ldr	x0, [sp, #416]
 4b0:	orr	x0, x0, x24
 4b4:	str	x0, [sp, #416]
 4b8:	ldr	x0, [sp, #424]
 4bc:	orr	x0, x0, x25
 4c0:	str	x0, [sp, #424]
 4c4:	b	634 <__extendXfYf2__+0x5e4>
 4c8:	ldr	x0, [sp, #304]
 4cc:	cmp	x0, #0x0
 4d0:	b.eq	630 <__extendXfYf2__+0x5e0>  // b.none
 4d4:	ldr	x0, [sp, #304]
 4d8:	bl	0 <src_rep_t_clz>
 4dc:	mov	w19, w0
 4e0:	ldr	x0, [sp, #392]
 4e4:	bl	0 <src_rep_t_clz>
 4e8:	sub	w0, w19, w0
 4ec:	str	w0, [sp, #292]
 4f0:	ldr	x0, [sp, #304]
 4f4:	str	x0, [sp, #192]
 4f8:	str	xzr, [sp, #200]
 4fc:	mov	w1, #0x70                  	// #112
 500:	mov	w0, #0x34                  	// #52
 504:	sub	w1, w1, w0
 508:	ldr	w0, [sp, #292]
 50c:	add	w0, w1, w0
 510:	sub	w1, w0, #0x40
 514:	ldp	x6, x7, [sp, #192]
 518:	mov	x2, x6
 51c:	lsl	x2, x2, x1
 520:	mov	x5, #0x0                   	// #0
 524:	mov	x3, x6
 528:	lsr	x4, x3, #1
 52c:	mov	w3, #0x3f                  	// #63
 530:	sub	w3, w3, w0
 534:	lsr	x3, x4, x3
 538:	mov	x4, x7
 53c:	lsl	x4, x4, x0
 540:	orr	x3, x4, x3
 544:	str	x3, [sp, #424]
 548:	mov	x3, x6
 54c:	lsl	x0, x3, x0
 550:	str	x0, [sp, #416]
 554:	ldr	x0, [sp, #424]
 558:	cmp	w1, #0x0
 55c:	csel	x0, x0, x2, lt  // lt = tstop
 560:	str	x0, [sp, #424]
 564:	ldr	x0, [sp, #416]
 568:	cmp	w1, #0x0
 56c:	csel	x0, x0, x5, lt  // lt = tstop
 570:	str	x0, [sp, #416]
 574:	ldr	x1, [sp, #416]
 578:	ldr	x0, [sp, #320]
 57c:	eor	x0, x1, x0
 580:	str	x0, [sp, #416]
 584:	ldr	x1, [sp, #424]
 588:	ldr	x0, [sp, #328]
 58c:	eor	x0, x1, x0
 590:	str	x0, [sp, #424]
 594:	ldr	w1, [sp, #336]
 598:	ldr	w0, [sp, #400]
 59c:	sub	w1, w1, w0
 5a0:	ldr	w0, [sp, #292]
 5a4:	sub	w0, w1, w0
 5a8:	add	w0, w0, #0x1
 5ac:	str	w0, [sp, #288]
 5b0:	ldr	w0, [sp, #288]
 5b4:	sxtw	x0, w0
 5b8:	str	x0, [sp, #208]
 5bc:	asr	x0, x0, #63
 5c0:	str	x0, [sp, #216]
 5c4:	mov	w0, #0x70                  	// #112
 5c8:	sub	w1, w0, #0x40
 5cc:	ldp	x6, x7, [sp, #208]
 5d0:	mov	x2, x6
 5d4:	lsl	x2, x2, x1
 5d8:	mov	x5, #0x0                   	// #0
 5dc:	mov	x3, x6
 5e0:	lsr	x4, x3, #1
 5e4:	mov	w3, #0x3f                  	// #63
 5e8:	sub	w3, w3, w0
 5ec:	lsr	x3, x4, x3
 5f0:	mov	x4, x7
 5f4:	lsl	x23, x4, x0
 5f8:	orr	x23, x3, x23
 5fc:	mov	x3, x6
 600:	lsl	x22, x3, x0
 604:	cmp	w1, #0x0
 608:	csel	x23, x2, x23, ge  // ge = tcont
 60c:	cmp	w1, #0x0
 610:	csel	x22, x5, x22, ge  // ge = tcont
 614:	ldr	x0, [sp, #416]
 618:	orr	x0, x0, x22
 61c:	str	x0, [sp, #416]
 620:	ldr	x0, [sp, #424]
 624:	orr	x0, x0, x23
 628:	str	x0, [sp, #424]
 62c:	b	634 <__extendXfYf2__+0x5e4>
 630:	stp	xzr, xzr, [sp, #416]
 634:	ldr	x0, [sp, #296]
 638:	str	x0, [sp, #224]
 63c:	str	xzr, [sp, #232]
 640:	ldr	w1, [sp, #348]
 644:	ldr	w0, [sp, #412]
 648:	sub	w0, w1, w0
 64c:	sub	w1, w0, #0x40
 650:	ldp	x6, x7, [sp, #224]
 654:	mov	x2, x6
 658:	lsl	x2, x2, x1
 65c:	mov	x5, #0x0                   	// #0
 660:	mov	x3, x6
 664:	lsr	x4, x3, #1
 668:	mov	w3, #0x3f                  	// #63
 66c:	sub	w3, w3, w0
 670:	lsr	x3, x4, x3
 674:	mov	x4, x7
 678:	lsl	x21, x4, x0
 67c:	orr	x21, x3, x21
 680:	mov	x3, x6
 684:	lsl	x20, x3, x0
 688:	cmp	w1, #0x0
 68c:	csel	x21, x2, x21, ge  // ge = tcont
 690:	cmp	w1, #0x0
 694:	csel	x20, x5, x20, ge  // ge = tcont
 698:	ldr	x0, [sp, #416]
 69c:	orr	x0, x0, x20
 6a0:	str	x0, [sp, #272]
 6a4:	ldr	x0, [sp, #424]
 6a8:	orr	x0, x0, x21
 6ac:	str	x0, [sp, #280]
 6b0:	ldp	x0, x1, [sp, #272]
 6b4:	bl	34 <dstFromRep>
 6b8:	ldp	x19, x20, [sp, #16]
 6bc:	ldp	x21, x22, [sp, #32]
 6c0:	ldp	x23, x24, [sp, #48]
 6c4:	ldp	x25, x26, [sp, #64]
 6c8:	ldr	x27, [sp, #80]
 6cc:	ldp	x29, x30, [sp], #432
 6d0:	ret

00000000000006d4 <__extenddftf2>:
 6d4:	stp	x29, x30, [sp, #-32]!
 6d8:	mov	x29, sp
 6dc:	str	d0, [sp, #24]
 6e0:	ldr	d0, [sp, #24]
 6e4:	bl	50 <__extendXfYf2__>
 6e8:	ldp	x29, x30, [sp], #32
 6ec:	ret

extendsftf2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srcToRep>:
   0:	sub	sp, sp, #0x20
   4:	str	s0, [sp, #12]
   8:	ldr	s0, [sp, #12]
   c:	str	s0, [sp, #24]
  10:	ldr	w0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <dstFromRep>:
  1c:	sub	sp, sp, #0x20
  20:	stp	x0, x1, [sp]
  24:	ldp	x0, x1, [sp]
  28:	stp	x0, x1, [sp, #16]
  2c:	ldr	q0, [sp, #16]
  30:	add	sp, sp, #0x20
  34:	ret

0000000000000038 <__extendXfYf2__>:
  38:	stp	x29, x30, [sp, #-400]!
  3c:	mov	x29, sp
  40:	stp	x20, x21, [sp, #16]
  44:	stp	x22, x23, [sp, #32]
  48:	stp	x24, x25, [sp, #48]
  4c:	stp	x26, x27, [sp, #64]
  50:	str	s0, [sp, #252]
  54:	mov	w0, #0x20                  	// #32
  58:	str	w0, [sp, #380]
  5c:	mov	w0, #0x17                  	// #23
  60:	ldr	w1, [sp, #380]
  64:	sub	w0, w1, w0
  68:	sub	w0, w0, #0x1
  6c:	str	w0, [sp, #376]
  70:	ldr	w0, [sp, #376]
  74:	mov	w1, #0x1                   	// #1
  78:	lsl	w0, w1, w0
  7c:	sub	w0, w0, #0x1
  80:	str	w0, [sp, #372]
  84:	ldr	w0, [sp, #372]
  88:	asr	w0, w0, #1
  8c:	str	w0, [sp, #368]
  90:	mov	w0, #0x17                  	// #23
  94:	mov	w1, #0x1                   	// #1
  98:	lsl	w0, w1, w0
  9c:	str	w0, [sp, #364]
  a0:	ldr	w1, [sp, #372]
  a4:	mov	w0, #0x17                  	// #23
  a8:	lsl	w0, w1, w0
  ac:	str	w0, [sp, #360]
  b0:	mov	w1, #0x17                  	// #23
  b4:	ldr	w0, [sp, #376]
  b8:	add	w0, w1, w0
  bc:	mov	w1, #0x1                   	// #1
  c0:	lsl	w0, w1, w0
  c4:	str	w0, [sp, #356]
  c8:	ldr	w0, [sp, #356]
  cc:	sub	w0, w0, #0x1
  d0:	str	w0, [sp, #352]
  d4:	mov	w0, #0x17                  	// #23
  d8:	sub	w0, w0, #0x1
  dc:	mov	w1, #0x1                   	// #1
  e0:	lsl	w0, w1, w0
  e4:	str	w0, [sp, #348]
  e8:	ldr	w0, [sp, #348]
  ec:	sub	w0, w0, #0x1
  f0:	str	w0, [sp, #344]
  f4:	mov	w0, #0x80                  	// #128
  f8:	str	w0, [sp, #340]
  fc:	mov	w0, #0x70                  	// #112
 100:	ldr	w1, [sp, #340]
 104:	sub	w0, w1, w0
 108:	sub	w0, w0, #0x1
 10c:	str	w0, [sp, #336]
 110:	ldr	w0, [sp, #336]
 114:	mov	w1, #0x1                   	// #1
 118:	lsl	w0, w1, w0
 11c:	sub	w0, w0, #0x1
 120:	str	w0, [sp, #332]
 124:	ldr	w0, [sp, #332]
 128:	asr	w0, w0, #1
 12c:	str	w0, [sp, #328]
 130:	mov	w2, #0x70                  	// #112
 134:	sub	w3, w2, #0x40
 138:	mov	x0, #0x1                   	// #1
 13c:	lsl	x4, x0, x3
 140:	mov	x5, #0x0                   	// #0
 144:	mov	x0, #0x1                   	// #1
 148:	lsr	x1, x0, #1
 14c:	mov	w0, #0x3f                  	// #63
 150:	sub	w0, w0, w2
 154:	lsr	x1, x1, x0
 158:	mov	x0, #0x0                   	// #0
 15c:	lsl	x0, x0, x2
 160:	orr	x0, x0, x1
 164:	str	x0, [sp, #312]
 168:	mov	x0, #0x1                   	// #1
 16c:	lsl	x0, x0, x2
 170:	str	x0, [sp, #304]
 174:	ldr	x0, [sp, #312]
 178:	cmp	w3, #0x0
 17c:	csel	x0, x0, x4, lt  // lt = tstop
 180:	str	x0, [sp, #312]
 184:	ldr	x0, [sp, #304]
 188:	cmp	w3, #0x0
 18c:	csel	x0, x0, x5, lt  // lt = tstop
 190:	str	x0, [sp, #304]
 194:	ldr	s0, [sp, #252]
 198:	bl	0 <srcToRep>
 19c:	str	w0, [sp, #300]
 1a0:	ldr	w1, [sp, #300]
 1a4:	ldr	w0, [sp, #352]
 1a8:	and	w0, w1, w0
 1ac:	str	w0, [sp, #296]
 1b0:	ldr	w1, [sp, #300]
 1b4:	ldr	w0, [sp, #356]
 1b8:	and	w0, w1, w0
 1bc:	str	w0, [sp, #292]
 1c0:	ldr	w1, [sp, #296]
 1c4:	ldr	w0, [sp, #364]
 1c8:	sub	w1, w1, w0
 1cc:	ldr	w2, [sp, #360]
 1d0:	ldr	w0, [sp, #364]
 1d4:	sub	w0, w2, w0
 1d8:	cmp	w1, w0
 1dc:	b.cs	318 <__extendXfYf2__+0x2e0>  // b.hs, b.nlast
 1e0:	ldr	w0, [sp, #296]
 1e4:	mov	w0, w0
 1e8:	str	x0, [sp, #96]
 1ec:	str	xzr, [sp, #104]
 1f0:	mov	w1, #0x70                  	// #112
 1f4:	mov	w0, #0x17                  	// #23
 1f8:	sub	w0, w1, w0
 1fc:	sub	w1, w0, #0x40
 200:	ldp	x6, x7, [sp, #96]
 204:	mov	x2, x6
 208:	lsl	x2, x2, x1
 20c:	mov	x5, #0x0                   	// #0
 210:	mov	x3, x6
 214:	lsr	x4, x3, #1
 218:	mov	w3, #0x3f                  	// #63
 21c:	sub	w3, w3, w0
 220:	lsr	x3, x4, x3
 224:	mov	x4, x7
 228:	lsl	x4, x4, x0
 22c:	orr	x3, x4, x3
 230:	str	x3, [sp, #392]
 234:	mov	x3, x6
 238:	lsl	x0, x3, x0
 23c:	str	x0, [sp, #384]
 240:	ldr	x0, [sp, #392]
 244:	cmp	w1, #0x0
 248:	csel	x0, x0, x2, lt  // lt = tstop
 24c:	str	x0, [sp, #392]
 250:	ldr	x0, [sp, #384]
 254:	cmp	w1, #0x0
 258:	csel	x0, x0, x5, lt  // lt = tstop
 25c:	str	x0, [sp, #384]
 260:	ldr	w1, [sp, #328]
 264:	ldr	w0, [sp, #368]
 268:	sub	w0, w1, w0
 26c:	sxtw	x0, w0
 270:	str	x0, [sp, #112]
 274:	asr	x0, x0, #63
 278:	str	x0, [sp, #120]
 27c:	mov	w0, #0x70                  	// #112
 280:	sub	w1, w0, #0x40
 284:	ldp	x6, x7, [sp, #112]
 288:	mov	x2, x6
 28c:	lsl	x2, x2, x1
 290:	mov	x5, #0x0                   	// #0
 294:	mov	x3, x6
 298:	lsr	x4, x3, #1
 29c:	mov	w3, #0x3f                  	// #63
 2a0:	sub	w3, w3, w0
 2a4:	lsr	x3, x4, x3
 2a8:	mov	x4, x7
 2ac:	lsl	x4, x4, x0
 2b0:	str	x4, [sp, #88]
 2b4:	ldr	x4, [sp, #88]
 2b8:	orr	x3, x3, x4
 2bc:	str	x3, [sp, #88]
 2c0:	mov	x3, x6
 2c4:	lsl	x0, x3, x0
 2c8:	str	x0, [sp, #80]
 2cc:	cmp	w1, #0x0
 2d0:	ldr	x0, [sp, #88]
 2d4:	csel	x0, x2, x0, ge  // ge = tcont
 2d8:	str	x0, [sp, #88]
 2dc:	cmp	w1, #0x0
 2e0:	ldr	x0, [sp, #80]
 2e4:	csel	x0, x5, x0, ge  // ge = tcont
 2e8:	str	x0, [sp, #80]
 2ec:	ldp	x0, x1, [sp, #384]
 2f0:	ldp	x4, x5, [sp, #80]
 2f4:	mov	x2, x4
 2f8:	adds	x2, x0, x2
 2fc:	mov	x3, x5
 300:	adc	x0, x1, x3
 304:	str	x2, [sp, #224]
 308:	str	x0, [sp, #232]
 30c:	ldp	x0, x1, [sp, #224]
 310:	stp	x0, x1, [sp, #384]
 314:	b	624 <__extendXfYf2__+0x5ec>
 318:	ldr	w1, [sp, #296]
 31c:	ldr	w0, [sp, #360]
 320:	cmp	w1, w0
 324:	b.cc	4b8 <__extendXfYf2__+0x480>  // b.lo, b.ul, b.last
 328:	ldr	w0, [sp, #332]
 32c:	sxtw	x0, w0
 330:	str	x0, [sp, #128]
 334:	asr	x0, x0, #63
 338:	str	x0, [sp, #136]
 33c:	mov	w0, #0x70                  	// #112
 340:	sub	w1, w0, #0x40
 344:	ldp	x6, x7, [sp, #128]
 348:	mov	x2, x6
 34c:	lsl	x2, x2, x1
 350:	mov	x5, #0x0                   	// #0
 354:	mov	x3, x6
 358:	lsr	x4, x3, #1
 35c:	mov	w3, #0x3f                  	// #63
 360:	sub	w3, w3, w0
 364:	lsr	x3, x4, x3
 368:	mov	x4, x7
 36c:	lsl	x4, x4, x0
 370:	orr	x3, x4, x3
 374:	str	x3, [sp, #392]
 378:	mov	x3, x6
 37c:	lsl	x0, x3, x0
 380:	str	x0, [sp, #384]
 384:	ldr	x0, [sp, #392]
 388:	cmp	w1, #0x0
 38c:	csel	x0, x0, x2, lt  // lt = tstop
 390:	str	x0, [sp, #392]
 394:	ldr	x0, [sp, #384]
 398:	cmp	w1, #0x0
 39c:	csel	x0, x0, x5, lt  // lt = tstop
 3a0:	str	x0, [sp, #384]
 3a4:	ldr	w1, [sp, #296]
 3a8:	ldr	w0, [sp, #348]
 3ac:	and	w0, w1, w0
 3b0:	mov	w0, w0
 3b4:	str	x0, [sp, #144]
 3b8:	str	xzr, [sp, #152]
 3bc:	mov	w1, #0x70                  	// #112
 3c0:	mov	w0, #0x17                  	// #23
 3c4:	sub	w0, w1, w0
 3c8:	sub	w1, w0, #0x40
 3cc:	ldp	x6, x7, [sp, #144]
 3d0:	mov	x2, x6
 3d4:	lsl	x2, x2, x1
 3d8:	mov	x5, #0x0                   	// #0
 3dc:	mov	x3, x6
 3e0:	lsr	x4, x3, #1
 3e4:	mov	w3, #0x3f                  	// #63
 3e8:	sub	w3, w3, w0
 3ec:	lsr	x3, x4, x3
 3f0:	mov	x4, x7
 3f4:	lsl	x27, x4, x0
 3f8:	orr	x27, x3, x27
 3fc:	mov	x3, x6
 400:	lsl	x26, x3, x0
 404:	cmp	w1, #0x0
 408:	csel	x27, x2, x27, ge  // ge = tcont
 40c:	cmp	w1, #0x0
 410:	csel	x26, x5, x26, ge  // ge = tcont
 414:	ldr	x0, [sp, #384]
 418:	orr	x0, x0, x26
 41c:	str	x0, [sp, #384]
 420:	ldr	x0, [sp, #392]
 424:	orr	x0, x0, x27
 428:	str	x0, [sp, #392]
 42c:	ldr	w1, [sp, #296]
 430:	ldr	w0, [sp, #344]
 434:	and	w0, w1, w0
 438:	mov	w0, w0
 43c:	str	x0, [sp, #160]
 440:	str	xzr, [sp, #168]
 444:	mov	w1, #0x70                  	// #112
 448:	mov	w0, #0x17                  	// #23
 44c:	sub	w0, w1, w0
 450:	sub	w1, w0, #0x40
 454:	ldp	x6, x7, [sp, #160]
 458:	mov	x2, x6
 45c:	lsl	x2, x2, x1
 460:	mov	x5, #0x0                   	// #0
 464:	mov	x3, x6
 468:	lsr	x4, x3, #1
 46c:	mov	w3, #0x3f                  	// #63
 470:	sub	w3, w3, w0
 474:	lsr	x3, x4, x3
 478:	mov	x4, x7
 47c:	lsl	x25, x4, x0
 480:	orr	x25, x3, x25
 484:	mov	x3, x6
 488:	lsl	x24, x3, x0
 48c:	cmp	w1, #0x0
 490:	csel	x25, x2, x25, ge  // ge = tcont
 494:	cmp	w1, #0x0
 498:	csel	x24, x5, x24, ge  // ge = tcont
 49c:	ldr	x0, [sp, #384]
 4a0:	orr	x0, x0, x24
 4a4:	str	x0, [sp, #384]
 4a8:	ldr	x0, [sp, #392]
 4ac:	orr	x0, x0, x25
 4b0:	str	x0, [sp, #392]
 4b4:	b	624 <__extendXfYf2__+0x5ec>
 4b8:	ldr	w0, [sp, #296]
 4bc:	cmp	w0, #0x0
 4c0:	b.eq	620 <__extendXfYf2__+0x5e8>  // b.none
 4c4:	ldr	w0, [sp, #296]
 4c8:	clz	w1, w0
 4cc:	ldr	w0, [sp, #364]
 4d0:	clz	w0, w0
 4d4:	sub	w0, w1, w0
 4d8:	str	w0, [sp, #288]
 4dc:	ldr	w0, [sp, #296]
 4e0:	mov	w0, w0
 4e4:	str	x0, [sp, #176]
 4e8:	str	xzr, [sp, #184]
 4ec:	mov	w1, #0x70                  	// #112
 4f0:	mov	w0, #0x17                  	// #23
 4f4:	sub	w1, w1, w0
 4f8:	ldr	w0, [sp, #288]
 4fc:	add	w0, w1, w0
 500:	sub	w1, w0, #0x40
 504:	ldp	x6, x7, [sp, #176]
 508:	mov	x2, x6
 50c:	lsl	x2, x2, x1
 510:	mov	x5, #0x0                   	// #0
 514:	mov	x3, x6
 518:	lsr	x4, x3, #1
 51c:	mov	w3, #0x3f                  	// #63
 520:	sub	w3, w3, w0
 524:	lsr	x3, x4, x3
 528:	mov	x4, x7
 52c:	lsl	x4, x4, x0
 530:	orr	x3, x4, x3
 534:	str	x3, [sp, #392]
 538:	mov	x3, x6
 53c:	lsl	x0, x3, x0
 540:	str	x0, [sp, #384]
 544:	ldr	x0, [sp, #392]
 548:	cmp	w1, #0x0
 54c:	csel	x0, x0, x2, lt  // lt = tstop
 550:	str	x0, [sp, #392]
 554:	ldr	x0, [sp, #384]
 558:	cmp	w1, #0x0
 55c:	csel	x0, x0, x5, lt  // lt = tstop
 560:	str	x0, [sp, #384]
 564:	ldr	x1, [sp, #384]
 568:	ldr	x0, [sp, #304]
 56c:	eor	x0, x1, x0
 570:	str	x0, [sp, #384]
 574:	ldr	x1, [sp, #392]
 578:	ldr	x0, [sp, #312]
 57c:	eor	x0, x1, x0
 580:	str	x0, [sp, #392]
 584:	ldr	w1, [sp, #328]
 588:	ldr	w0, [sp, #368]
 58c:	sub	w1, w1, w0
 590:	ldr	w0, [sp, #288]
 594:	sub	w0, w1, w0
 598:	add	w0, w0, #0x1
 59c:	str	w0, [sp, #284]
 5a0:	ldr	w0, [sp, #284]
 5a4:	sxtw	x0, w0
 5a8:	str	x0, [sp, #192]
 5ac:	asr	x0, x0, #63
 5b0:	str	x0, [sp, #200]
 5b4:	mov	w0, #0x70                  	// #112
 5b8:	sub	w1, w0, #0x40
 5bc:	ldp	x6, x7, [sp, #192]
 5c0:	mov	x2, x6
 5c4:	lsl	x2, x2, x1
 5c8:	mov	x5, #0x0                   	// #0
 5cc:	mov	x3, x6
 5d0:	lsr	x4, x3, #1
 5d4:	mov	w3, #0x3f                  	// #63
 5d8:	sub	w3, w3, w0
 5dc:	lsr	x3, x4, x3
 5e0:	mov	x4, x7
 5e4:	lsl	x23, x4, x0
 5e8:	orr	x23, x3, x23
 5ec:	mov	x3, x6
 5f0:	lsl	x22, x3, x0
 5f4:	cmp	w1, #0x0
 5f8:	csel	x23, x2, x23, ge  // ge = tcont
 5fc:	cmp	w1, #0x0
 600:	csel	x22, x5, x22, ge  // ge = tcont
 604:	ldr	x0, [sp, #384]
 608:	orr	x0, x0, x22
 60c:	str	x0, [sp, #384]
 610:	ldr	x0, [sp, #392]
 614:	orr	x0, x0, x23
 618:	str	x0, [sp, #392]
 61c:	b	624 <__extendXfYf2__+0x5ec>
 620:	stp	xzr, xzr, [sp, #384]
 624:	ldr	w0, [sp, #292]
 628:	mov	w0, w0
 62c:	str	x0, [sp, #208]
 630:	str	xzr, [sp, #216]
 634:	ldr	w1, [sp, #340]
 638:	ldr	w0, [sp, #380]
 63c:	sub	w0, w1, w0
 640:	sub	w1, w0, #0x40
 644:	ldp	x6, x7, [sp, #208]
 648:	mov	x2, x6
 64c:	lsl	x2, x2, x1
 650:	mov	x5, #0x0                   	// #0
 654:	mov	x3, x6
 658:	lsr	x4, x3, #1
 65c:	mov	w3, #0x3f                  	// #63
 660:	sub	w3, w3, w0
 664:	lsr	x3, x4, x3
 668:	mov	x4, x7
 66c:	lsl	x21, x4, x0
 670:	orr	x21, x3, x21
 674:	mov	x3, x6
 678:	lsl	x20, x3, x0
 67c:	cmp	w1, #0x0
 680:	csel	x21, x2, x21, ge  // ge = tcont
 684:	cmp	w1, #0x0
 688:	csel	x20, x5, x20, ge  // ge = tcont
 68c:	ldr	x0, [sp, #384]
 690:	orr	x0, x0, x20
 694:	str	x0, [sp, #256]
 698:	ldr	x0, [sp, #392]
 69c:	orr	x0, x0, x21
 6a0:	str	x0, [sp, #264]
 6a4:	ldp	x0, x1, [sp, #256]
 6a8:	bl	1c <dstFromRep>
 6ac:	ldp	x20, x21, [sp, #16]
 6b0:	ldp	x22, x23, [sp, #32]
 6b4:	ldp	x24, x25, [sp, #48]
 6b8:	ldp	x26, x27, [sp, #64]
 6bc:	ldp	x29, x30, [sp], #400
 6c0:	ret

00000000000006c4 <__extendsftf2>:
 6c4:	stp	x29, x30, [sp, #-32]!
 6c8:	mov	x29, sp
 6cc:	str	s0, [sp, #28]
 6d0:	ldr	s0, [sp, #28]
 6d4:	bl	38 <__extendXfYf2__>
 6d8:	ldp	x29, x30, [sp], #32
 6dc:	ret

fixtfdi.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <toRep>:
   0:	sub	sp, sp, #0x20
   4:	str	q0, [sp]
   8:	ldr	q0, [sp]
   c:	str	q0, [sp, #16]
  10:	ldp	x0, x1, [sp, #16]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__fixint>:
  1c:	stp	x29, x30, [sp, #-176]!
  20:	mov	x29, sp
  24:	stp	x20, x21, [sp, #16]
  28:	stp	x22, x23, [sp, #32]
  2c:	stp	x24, x25, [sp, #48]
  30:	stp	x26, x27, [sp, #64]
  34:	str	q0, [sp, #80]
  38:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
  3c:	str	x0, [sp, #168]
  40:	ldr	x0, [sp, #168]
  44:	mvn	x0, x0
  48:	str	x0, [sp, #160]
  4c:	ldr	q0, [sp, #80]
  50:	bl	0 <toRep>
  54:	stp	x0, x1, [sp, #144]
  58:	ldr	x1, [sp, #144]
  5c:	mov	x0, #0xffffffffffffffff    	// #-1
  60:	and	x0, x1, x0
  64:	str	x0, [sp, #128]
  68:	ldr	x0, [sp, #152]
  6c:	and	x0, x0, #0x7fffffffffffffff
  70:	str	x0, [sp, #136]
  74:	ldp	x0, x1, [sp, #144]
  78:	cmp	x1, #0x0
  7c:	b.ge	88 <__fixint+0x6c>  // b.tcont
  80:	mov	x0, #0xffffffffffffffff    	// #-1
  84:	b	8c <__fixint+0x70>
  88:	mov	x0, #0x1                   	// #1
  8c:	str	x0, [sp, #120]
  90:	ldr	x0, [sp, #136]
  94:	lsr	x24, x0, #48
  98:	mov	x25, #0x0                   	// #0
  9c:	mov	w1, w24
  a0:	mov	w0, #0xffffc001            	// #-16383
  a4:	add	w0, w1, w0
  a8:	str	w0, [sp, #116]
  ac:	ldr	x1, [sp, #128]
  b0:	mov	x0, #0xffffffffffffffff    	// #-1
  b4:	and	x22, x1, x0
  b8:	ldr	x0, [sp, #136]
  bc:	and	x23, x0, #0xffffffffffff
  c0:	mov	x0, #0x0                   	// #0
  c4:	orr	x0, x22, x0
  c8:	str	x0, [sp, #96]
  cc:	orr	x0, x23, #0x1000000000000
  d0:	str	x0, [sp, #104]
  d4:	ldr	w0, [sp, #116]
  d8:	cmp	w0, #0x0
  dc:	b.ge	e8 <__fixint+0xcc>  // b.tcont
  e0:	mov	x0, #0x0                   	// #0
  e4:	b	1a8 <__fixint+0x18c>
  e8:	ldr	w0, [sp, #116]
  ec:	cmp	w0, #0x3f
  f0:	b.ls	110 <__fixint+0xf4>  // b.plast
  f4:	ldr	x0, [sp, #120]
  f8:	cmp	x0, #0x1
  fc:	b.ne	108 <__fixint+0xec>  // b.any
 100:	ldr	x0, [sp, #168]
 104:	b	1a8 <__fixint+0x18c>
 108:	ldr	x0, [sp, #160]
 10c:	b	1a8 <__fixint+0x18c>
 110:	ldr	w0, [sp, #116]
 114:	cmp	w0, #0x6f
 118:	b.gt	190 <__fixint+0x174>
 11c:	ldr	x0, [sp, #120]
 120:	mov	x26, x0
 124:	asr	x0, x0, #63
 128:	mov	x27, x0
 12c:	mov	x5, x26
 130:	mov	w1, #0x70                  	// #112
 134:	ldr	w0, [sp, #116]
 138:	sub	w0, w1, w0
 13c:	sub	w1, w0, #0x40
 140:	ldr	x2, [sp, #104]
 144:	lsr	x2, x2, x1
 148:	mov	x6, #0x0                   	// #0
 14c:	ldr	x3, [sp, #104]
 150:	lsl	x4, x3, #1
 154:	mov	w3, #0x3f                  	// #63
 158:	sub	w3, w3, w0
 15c:	lsl	x3, x4, x3
 160:	ldr	x4, [sp, #96]
 164:	lsr	x20, x4, x0
 168:	orr	x20, x3, x20
 16c:	ldr	x3, [sp, #104]
 170:	lsr	x21, x3, x0
 174:	cmp	w1, #0x0
 178:	csel	x20, x2, x20, ge  // ge = tcont
 17c:	cmp	w1, #0x0
 180:	csel	x21, x6, x21, ge  // ge = tcont
 184:	mov	x0, x20
 188:	mul	x0, x5, x0
 18c:	b	1a8 <__fixint+0x18c>
 190:	ldr	x1, [sp, #96]
 194:	ldr	w0, [sp, #116]
 198:	sub	w0, w0, #0x70
 19c:	lsl	x1, x1, x0
 1a0:	ldr	x0, [sp, #120]
 1a4:	mul	x0, x1, x0
 1a8:	ldp	x20, x21, [sp, #16]
 1ac:	ldp	x22, x23, [sp, #32]
 1b0:	ldp	x24, x25, [sp, #48]
 1b4:	ldp	x26, x27, [sp, #64]
 1b8:	ldp	x29, x30, [sp], #176
 1bc:	ret

00000000000001c0 <__fixtfdi>:
 1c0:	stp	x29, x30, [sp, #-32]!
 1c4:	mov	x29, sp
 1c8:	str	q0, [sp, #16]
 1cc:	ldr	q0, [sp, #16]
 1d0:	bl	1c <__fixint>
 1d4:	ldp	x29, x30, [sp], #32
 1d8:	ret

fixtfsi.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <toRep>:
   0:	sub	sp, sp, #0x20
   4:	str	q0, [sp]
   8:	ldr	q0, [sp]
   c:	str	q0, [sp, #16]
  10:	ldp	x0, x1, [sp, #16]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__fixint>:
  1c:	stp	x29, x30, [sp, #-176]!
  20:	mov	x29, sp
  24:	stp	x20, x21, [sp, #16]
  28:	stp	x22, x23, [sp, #32]
  2c:	stp	x24, x25, [sp, #48]
  30:	stp	x26, x27, [sp, #64]
  34:	str	q0, [sp, #80]
  38:	mov	w0, #0x7fffffff            	// #2147483647
  3c:	str	w0, [sp, #172]
  40:	ldr	w0, [sp, #172]
  44:	mvn	w0, w0
  48:	str	w0, [sp, #168]
  4c:	ldr	q0, [sp, #80]
  50:	bl	0 <toRep>
  54:	stp	x0, x1, [sp, #144]
  58:	ldr	x1, [sp, #144]
  5c:	mov	x0, #0xffffffffffffffff    	// #-1
  60:	and	x0, x1, x0
  64:	str	x0, [sp, #128]
  68:	ldr	x0, [sp, #152]
  6c:	and	x0, x0, #0x7fffffffffffffff
  70:	str	x0, [sp, #136]
  74:	ldp	x0, x1, [sp, #144]
  78:	cmp	x1, #0x0
  7c:	b.ge	88 <__fixint+0x6c>  // b.tcont
  80:	mov	w0, #0xffffffff            	// #-1
  84:	b	8c <__fixint+0x70>
  88:	mov	w0, #0x1                   	// #1
  8c:	str	w0, [sp, #124]
  90:	ldr	x0, [sp, #136]
  94:	lsr	x24, x0, #48
  98:	mov	x25, #0x0                   	// #0
  9c:	mov	w1, w24
  a0:	mov	w0, #0xffffc001            	// #-16383
  a4:	add	w0, w1, w0
  a8:	str	w0, [sp, #120]
  ac:	ldr	x1, [sp, #128]
  b0:	mov	x0, #0xffffffffffffffff    	// #-1
  b4:	and	x22, x1, x0
  b8:	ldr	x0, [sp, #136]
  bc:	and	x23, x0, #0xffffffffffff
  c0:	mov	x0, #0x0                   	// #0
  c4:	orr	x0, x22, x0
  c8:	str	x0, [sp, #96]
  cc:	orr	x0, x23, #0x1000000000000
  d0:	str	x0, [sp, #104]
  d4:	ldr	w0, [sp, #120]
  d8:	cmp	w0, #0x0
  dc:	b.ge	e8 <__fixint+0xcc>  // b.tcont
  e0:	mov	w0, #0x0                   	// #0
  e4:	b	1b0 <__fixint+0x194>
  e8:	ldr	w0, [sp, #120]
  ec:	cmp	w0, #0x1f
  f0:	b.ls	110 <__fixint+0xf4>  // b.plast
  f4:	ldr	w0, [sp, #124]
  f8:	cmp	w0, #0x1
  fc:	b.ne	108 <__fixint+0xec>  // b.any
 100:	ldr	w0, [sp, #172]
 104:	b	1b0 <__fixint+0x194>
 108:	ldr	w0, [sp, #168]
 10c:	b	1b0 <__fixint+0x194>
 110:	ldr	w0, [sp, #120]
 114:	cmp	w0, #0x6f
 118:	b.gt	194 <__fixint+0x178>
 11c:	ldr	w0, [sp, #124]
 120:	sxtw	x0, w0
 124:	mov	x26, x0
 128:	asr	x0, x0, #63
 12c:	mov	x27, x0
 130:	mov	w5, w26
 134:	mov	w1, #0x70                  	// #112
 138:	ldr	w0, [sp, #120]
 13c:	sub	w0, w1, w0
 140:	sub	w1, w0, #0x40
 144:	ldr	x2, [sp, #104]
 148:	lsr	x2, x2, x1
 14c:	mov	x6, #0x0                   	// #0
 150:	ldr	x3, [sp, #104]
 154:	lsl	x4, x3, #1
 158:	mov	w3, #0x3f                  	// #63
 15c:	sub	w3, w3, w0
 160:	lsl	x3, x4, x3
 164:	ldr	x4, [sp, #96]
 168:	lsr	x20, x4, x0
 16c:	orr	x20, x3, x20
 170:	ldr	x3, [sp, #104]
 174:	lsr	x21, x3, x0
 178:	cmp	w1, #0x0
 17c:	csel	x20, x2, x20, ge  // ge = tcont
 180:	cmp	w1, #0x0
 184:	csel	x21, x6, x21, ge  // ge = tcont
 188:	mov	w0, w20
 18c:	mul	w0, w5, w0
 190:	b	1b0 <__fixint+0x194>
 194:	ldr	x0, [sp, #96]
 198:	mov	w1, w0
 19c:	ldr	w0, [sp, #120]
 1a0:	sub	w0, w0, #0x70
 1a4:	lsl	w1, w1, w0
 1a8:	ldr	w0, [sp, #124]
 1ac:	mul	w0, w1, w0
 1b0:	ldp	x20, x21, [sp, #16]
 1b4:	ldp	x22, x23, [sp, #32]
 1b8:	ldp	x24, x25, [sp, #48]
 1bc:	ldp	x26, x27, [sp, #64]
 1c0:	ldp	x29, x30, [sp], #176
 1c4:	ret

00000000000001c8 <__fixtfsi>:
 1c8:	stp	x29, x30, [sp, #-32]!
 1cc:	mov	x29, sp
 1d0:	str	q0, [sp, #16]
 1d4:	ldr	q0, [sp, #16]
 1d8:	bl	1c <__fixint>
 1dc:	ldp	x29, x30, [sp], #32
 1e0:	ret

fixtfti.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <toRep>:
   0:	sub	sp, sp, #0x20
   4:	str	q0, [sp]
   8:	ldr	q0, [sp]
   c:	str	q0, [sp, #16]
  10:	ldp	x0, x1, [sp, #16]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__fixint>:
  1c:	stp	x29, x30, [sp, #-240]!
  20:	mov	x29, sp
  24:	stp	x20, x21, [sp, #16]
  28:	stp	x22, x23, [sp, #32]
  2c:	stp	x24, x25, [sp, #48]
  30:	stp	x26, x27, [sp, #64]
  34:	str	q0, [sp, #112]
  38:	adrp	x0, 0 <toRep>
  3c:	add	x0, x0, #0x0
  40:	ldp	x0, x1, [x0]
  44:	stp	x0, x1, [sp, #224]
  48:	ldr	x0, [sp, #224]
  4c:	mvn	x0, x0
  50:	str	x0, [sp, #208]
  54:	ldr	x0, [sp, #232]
  58:	mvn	x0, x0
  5c:	str	x0, [sp, #216]
  60:	ldr	q0, [sp, #112]
  64:	bl	0 <toRep>
  68:	stp	x0, x1, [sp, #192]
  6c:	ldr	x1, [sp, #192]
  70:	mov	x0, #0xffffffffffffffff    	// #-1
  74:	and	x0, x1, x0
  78:	str	x0, [sp, #176]
  7c:	ldr	x0, [sp, #200]
  80:	and	x0, x0, #0x7fffffffffffffff
  84:	str	x0, [sp, #184]
  88:	ldp	x0, x1, [sp, #192]
  8c:	cmp	x1, #0x0
  90:	b.ge	a0 <__fixint+0x84>  // b.tcont
  94:	mov	x0, #0xffffffffffffffff    	// #-1
  98:	mov	x1, #0xffffffffffffffff    	// #-1
  9c:	b	a8 <__fixint+0x8c>
  a0:	mov	x0, #0x1                   	// #1
  a4:	mov	x1, #0x0                   	// #0
  a8:	stp	x0, x1, [sp, #160]
  ac:	ldr	x0, [sp, #184]
  b0:	lsr	x0, x0, #48
  b4:	str	x0, [sp, #80]
  b8:	str	xzr, [sp, #88]
  bc:	ldr	w1, [sp, #80]
  c0:	mov	w0, #0xffffc001            	// #-16383
  c4:	add	w0, w1, w0
  c8:	str	w0, [sp, #156]
  cc:	ldr	x1, [sp, #176]
  d0:	mov	x0, #0xffffffffffffffff    	// #-1
  d4:	and	x24, x1, x0
  d8:	ldr	x0, [sp, #184]
  dc:	and	x25, x0, #0xffffffffffff
  e0:	mov	x0, #0x0                   	// #0
  e4:	orr	x0, x24, x0
  e8:	str	x0, [sp, #128]
  ec:	orr	x0, x25, #0x1000000000000
  f0:	str	x0, [sp, #136]
  f4:	ldr	w0, [sp, #156]
  f8:	cmp	w0, #0x0
  fc:	b.ge	10c <__fixint+0xf0>  // b.tcont
 100:	mov	x26, #0x0                   	// #0
 104:	mov	x27, #0x0                   	// #0
 108:	b	224 <__fixint+0x208>
 10c:	ldr	w0, [sp, #156]
 110:	cmp	w0, #0x7f
 114:	b.ls	140 <__fixint+0x124>  // b.plast
 118:	ldr	x0, [sp, #160]
 11c:	cmp	x0, #0x1
 120:	b.ne	138 <__fixint+0x11c>  // b.any
 124:	ldr	x0, [sp, #168]
 128:	cmp	x0, #0x0
 12c:	b.ne	138 <__fixint+0x11c>  // b.any
 130:	ldp	x26, x27, [sp, #224]
 134:	b	224 <__fixint+0x208>
 138:	ldp	x26, x27, [sp, #208]
 13c:	b	224 <__fixint+0x208>
 140:	ldr	w0, [sp, #156]
 144:	cmp	w0, #0x6f
 148:	b.gt	1c4 <__fixint+0x1a8>
 14c:	mov	w1, #0x70                  	// #112
 150:	ldr	w0, [sp, #156]
 154:	sub	w0, w1, w0
 158:	sub	w1, w0, #0x40
 15c:	ldr	x2, [sp, #136]
 160:	lsr	x2, x2, x1
 164:	mov	x5, #0x0                   	// #0
 168:	ldr	x3, [sp, #136]
 16c:	lsl	x4, x3, #1
 170:	mov	w3, #0x3f                  	// #63
 174:	sub	w3, w3, w0
 178:	lsl	x3, x4, x3
 17c:	ldr	x4, [sp, #128]
 180:	lsr	x22, x4, x0
 184:	orr	x22, x3, x22
 188:	ldr	x3, [sp, #136]
 18c:	lsr	x23, x3, x0
 190:	cmp	w1, #0x0
 194:	csel	x22, x2, x22, ge  // ge = tcont
 198:	cmp	w1, #0x0
 19c:	csel	x23, x5, x23, ge  // ge = tcont
 1a0:	ldp	x0, x1, [sp, #160]
 1a4:	mul	x3, x22, x0
 1a8:	umulh	x2, x22, x0
 1ac:	madd	x2, x23, x0, x2
 1b0:	madd	x2, x22, x1, x2
 1b4:	str	x3, [sp, #96]
 1b8:	str	x2, [sp, #104]
 1bc:	ldp	x26, x27, [sp, #96]
 1c0:	b	224 <__fixint+0x208>
 1c4:	ldp	x0, x1, [sp, #128]
 1c8:	ldr	w2, [sp, #156]
 1cc:	sub	w2, w2, #0x70
 1d0:	sub	w3, w2, #0x40
 1d4:	lsl	x4, x0, x3
 1d8:	mov	x7, #0x0                   	// #0
 1dc:	lsr	x6, x0, #1
 1e0:	mov	w5, #0x3f                  	// #63
 1e4:	sub	w5, w5, w2
 1e8:	lsr	x5, x6, x5
 1ec:	lsl	x21, x1, x2
 1f0:	orr	x21, x5, x21
 1f4:	lsl	x20, x0, x2
 1f8:	cmp	w3, #0x0
 1fc:	csel	x21, x4, x21, ge  // ge = tcont
 200:	cmp	w3, #0x0
 204:	csel	x20, x7, x20, ge  // ge = tcont
 208:	ldp	x0, x1, [sp, #160]
 20c:	mul	x3, x20, x0
 210:	umulh	x2, x20, x0
 214:	madd	x2, x21, x0, x2
 218:	madd	x2, x20, x1, x2
 21c:	mov	x26, x3
 220:	mov	x27, x2
 224:	mov	x0, x26
 228:	mov	x1, x27
 22c:	ldp	x20, x21, [sp, #16]
 230:	ldp	x22, x23, [sp, #32]
 234:	ldp	x24, x25, [sp, #48]
 238:	ldp	x26, x27, [sp, #64]
 23c:	ldp	x29, x30, [sp], #240
 240:	ret

0000000000000244 <__fixtfti>:
 244:	stp	x29, x30, [sp, #-32]!
 248:	mov	x29, sp
 24c:	str	q0, [sp, #16]
 250:	ldr	q0, [sp, #16]
 254:	bl	1c <__fixint>
 258:	ldp	x29, x30, [sp], #32
 25c:	ret

fixunstfdi.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <toRep>:
   0:	sub	sp, sp, #0x20
   4:	str	q0, [sp]
   8:	ldr	q0, [sp]
   c:	str	q0, [sp, #16]
  10:	ldp	x0, x1, [sp, #16]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__fixuint>:
  1c:	stp	x29, x30, [sp, #-144]!
  20:	mov	x29, sp
  24:	stp	x20, x21, [sp, #16]
  28:	stp	x22, x23, [sp, #32]
  2c:	stp	x24, x25, [sp, #48]
  30:	str	q0, [sp, #64]
  34:	ldr	q0, [sp, #64]
  38:	bl	0 <toRep>
  3c:	stp	x0, x1, [sp, #128]
  40:	ldr	x1, [sp, #128]
  44:	mov	x0, #0xffffffffffffffff    	// #-1
  48:	and	x0, x1, x0
  4c:	str	x0, [sp, #112]
  50:	ldr	x0, [sp, #136]
  54:	and	x0, x0, #0x7fffffffffffffff
  58:	str	x0, [sp, #120]
  5c:	ldp	x0, x1, [sp, #128]
  60:	cmp	x1, #0x0
  64:	b.ge	70 <__fixuint+0x54>  // b.tcont
  68:	mov	w0, #0xffffffff            	// #-1
  6c:	b	74 <__fixuint+0x58>
  70:	mov	w0, #0x1                   	// #1
  74:	str	w0, [sp, #108]
  78:	ldr	x0, [sp, #120]
  7c:	lsr	x24, x0, #48
  80:	mov	x25, #0x0                   	// #0
  84:	mov	w1, w24
  88:	mov	w0, #0xffffc001            	// #-16383
  8c:	add	w0, w1, w0
  90:	str	w0, [sp, #104]
  94:	ldr	x1, [sp, #112]
  98:	mov	x0, #0xffffffffffffffff    	// #-1
  9c:	and	x22, x1, x0
  a0:	ldr	x0, [sp, #120]
  a4:	and	x23, x0, #0xffffffffffff
  a8:	mov	x0, #0x0                   	// #0
  ac:	orr	x0, x22, x0
  b0:	str	x0, [sp, #80]
  b4:	orr	x0, x23, #0x1000000000000
  b8:	str	x0, [sp, #88]
  bc:	ldr	w0, [sp, #108]
  c0:	cmn	w0, #0x1
  c4:	b.eq	d4 <__fixuint+0xb8>  // b.none
  c8:	ldr	w0, [sp, #104]
  cc:	cmp	w0, #0x0
  d0:	b.ge	dc <__fixuint+0xc0>  // b.tcont
  d4:	mov	x0, #0x0                   	// #0
  d8:	b	168 <__fixuint+0x14c>
  dc:	ldr	w0, [sp, #104]
  e0:	cmp	w0, #0x3f
  e4:	b.ls	f0 <__fixuint+0xd4>  // b.plast
  e8:	mov	x0, #0xffffffffffffffff    	// #-1
  ec:	b	168 <__fixuint+0x14c>
  f0:	ldr	w0, [sp, #104]
  f4:	cmp	w0, #0x6f
  f8:	b.gt	158 <__fixuint+0x13c>
  fc:	mov	w1, #0x70                  	// #112
 100:	ldr	w0, [sp, #104]
 104:	sub	w0, w1, w0
 108:	sub	w1, w0, #0x40
 10c:	ldr	x2, [sp, #88]
 110:	lsr	x2, x2, x1
 114:	mov	x5, #0x0                   	// #0
 118:	ldr	x3, [sp, #88]
 11c:	lsl	x4, x3, #1
 120:	mov	w3, #0x3f                  	// #63
 124:	sub	w3, w3, w0
 128:	lsl	x3, x4, x3
 12c:	ldr	x4, [sp, #80]
 130:	lsr	x20, x4, x0
 134:	orr	x20, x3, x20
 138:	ldr	x3, [sp, #88]
 13c:	lsr	x21, x3, x0
 140:	cmp	w1, #0x0
 144:	csel	x20, x2, x20, ge  // ge = tcont
 148:	cmp	w1, #0x0
 14c:	csel	x21, x5, x21, ge  // ge = tcont
 150:	mov	x0, x20
 154:	b	168 <__fixuint+0x14c>
 158:	ldr	x1, [sp, #80]
 15c:	ldr	w0, [sp, #104]
 160:	sub	w0, w0, #0x70
 164:	lsl	x0, x1, x0
 168:	ldp	x20, x21, [sp, #16]
 16c:	ldp	x22, x23, [sp, #32]
 170:	ldp	x24, x25, [sp, #48]
 174:	ldp	x29, x30, [sp], #144
 178:	ret

000000000000017c <__fixunstfdi>:
 17c:	stp	x29, x30, [sp, #-32]!
 180:	mov	x29, sp
 184:	str	q0, [sp, #16]
 188:	ldr	q0, [sp, #16]
 18c:	bl	1c <__fixuint>
 190:	ldp	x29, x30, [sp], #32
 194:	ret

fixunstfsi.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <toRep>:
   0:	sub	sp, sp, #0x20
   4:	str	q0, [sp]
   8:	ldr	q0, [sp]
   c:	str	q0, [sp, #16]
  10:	ldp	x0, x1, [sp, #16]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__fixuint>:
  1c:	stp	x29, x30, [sp, #-144]!
  20:	mov	x29, sp
  24:	stp	x20, x21, [sp, #16]
  28:	stp	x22, x23, [sp, #32]
  2c:	stp	x24, x25, [sp, #48]
  30:	str	q0, [sp, #64]
  34:	ldr	q0, [sp, #64]
  38:	bl	0 <toRep>
  3c:	stp	x0, x1, [sp, #128]
  40:	ldr	x1, [sp, #128]
  44:	mov	x0, #0xffffffffffffffff    	// #-1
  48:	and	x0, x1, x0
  4c:	str	x0, [sp, #112]
  50:	ldr	x0, [sp, #136]
  54:	and	x0, x0, #0x7fffffffffffffff
  58:	str	x0, [sp, #120]
  5c:	ldp	x0, x1, [sp, #128]
  60:	cmp	x1, #0x0
  64:	b.ge	70 <__fixuint+0x54>  // b.tcont
  68:	mov	w0, #0xffffffff            	// #-1
  6c:	b	74 <__fixuint+0x58>
  70:	mov	w0, #0x1                   	// #1
  74:	str	w0, [sp, #108]
  78:	ldr	x0, [sp, #120]
  7c:	lsr	x24, x0, #48
  80:	mov	x25, #0x0                   	// #0
  84:	mov	w1, w24
  88:	mov	w0, #0xffffc001            	// #-16383
  8c:	add	w0, w1, w0
  90:	str	w0, [sp, #104]
  94:	ldr	x1, [sp, #112]
  98:	mov	x0, #0xffffffffffffffff    	// #-1
  9c:	and	x22, x1, x0
  a0:	ldr	x0, [sp, #120]
  a4:	and	x23, x0, #0xffffffffffff
  a8:	mov	x0, #0x0                   	// #0
  ac:	orr	x0, x22, x0
  b0:	str	x0, [sp, #80]
  b4:	orr	x0, x23, #0x1000000000000
  b8:	str	x0, [sp, #88]
  bc:	ldr	w0, [sp, #108]
  c0:	cmn	w0, #0x1
  c4:	b.eq	d4 <__fixuint+0xb8>  // b.none
  c8:	ldr	w0, [sp, #104]
  cc:	cmp	w0, #0x0
  d0:	b.ge	dc <__fixuint+0xc0>  // b.tcont
  d4:	mov	w0, #0x0                   	// #0
  d8:	b	16c <__fixuint+0x150>
  dc:	ldr	w0, [sp, #104]
  e0:	cmp	w0, #0x1f
  e4:	b.ls	f0 <__fixuint+0xd4>  // b.plast
  e8:	mov	w0, #0xffffffff            	// #-1
  ec:	b	16c <__fixuint+0x150>
  f0:	ldr	w0, [sp, #104]
  f4:	cmp	w0, #0x6f
  f8:	b.gt	158 <__fixuint+0x13c>
  fc:	mov	w1, #0x70                  	// #112
 100:	ldr	w0, [sp, #104]
 104:	sub	w0, w1, w0
 108:	sub	w1, w0, #0x40
 10c:	ldr	x2, [sp, #88]
 110:	lsr	x2, x2, x1
 114:	mov	x5, #0x0                   	// #0
 118:	ldr	x3, [sp, #88]
 11c:	lsl	x4, x3, #1
 120:	mov	w3, #0x3f                  	// #63
 124:	sub	w3, w3, w0
 128:	lsl	x3, x4, x3
 12c:	ldr	x4, [sp, #80]
 130:	lsr	x20, x4, x0
 134:	orr	x20, x3, x20
 138:	ldr	x3, [sp, #88]
 13c:	lsr	x21, x3, x0
 140:	cmp	w1, #0x0
 144:	csel	x20, x2, x20, ge  // ge = tcont
 148:	cmp	w1, #0x0
 14c:	csel	x21, x5, x21, ge  // ge = tcont
 150:	mov	w0, w20
 154:	b	16c <__fixuint+0x150>
 158:	ldr	x0, [sp, #80]
 15c:	mov	w1, w0
 160:	ldr	w0, [sp, #104]
 164:	sub	w0, w0, #0x70
 168:	lsl	w0, w1, w0
 16c:	ldp	x20, x21, [sp, #16]
 170:	ldp	x22, x23, [sp, #32]
 174:	ldp	x24, x25, [sp, #48]
 178:	ldp	x29, x30, [sp], #144
 17c:	ret

0000000000000180 <__fixunstfsi>:
 180:	stp	x29, x30, [sp, #-32]!
 184:	mov	x29, sp
 188:	str	q0, [sp, #16]
 18c:	ldr	q0, [sp, #16]
 190:	bl	1c <__fixuint>
 194:	ldp	x29, x30, [sp], #32
 198:	ret

fixunstfti.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <toRep>:
   0:	sub	sp, sp, #0x20
   4:	str	q0, [sp]
   8:	ldr	q0, [sp]
   c:	str	q0, [sp, #16]
  10:	ldp	x0, x1, [sp, #16]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__fixuint>:
  1c:	stp	x29, x30, [sp, #-144]!
  20:	mov	x29, sp
  24:	stp	x20, x21, [sp, #16]
  28:	stp	x22, x23, [sp, #32]
  2c:	stp	x24, x25, [sp, #48]
  30:	str	q0, [sp, #64]
  34:	ldr	q0, [sp, #64]
  38:	bl	0 <toRep>
  3c:	stp	x0, x1, [sp, #128]
  40:	ldr	x1, [sp, #128]
  44:	mov	x0, #0xffffffffffffffff    	// #-1
  48:	and	x0, x1, x0
  4c:	str	x0, [sp, #112]
  50:	ldr	x0, [sp, #136]
  54:	and	x0, x0, #0x7fffffffffffffff
  58:	str	x0, [sp, #120]
  5c:	ldp	x0, x1, [sp, #128]
  60:	cmp	x1, #0x0
  64:	b.ge	70 <__fixuint+0x54>  // b.tcont
  68:	mov	w0, #0xffffffff            	// #-1
  6c:	b	74 <__fixuint+0x58>
  70:	mov	w0, #0x1                   	// #1
  74:	str	w0, [sp, #108]
  78:	ldr	x0, [sp, #120]
  7c:	lsr	x24, x0, #48
  80:	mov	x25, #0x0                   	// #0
  84:	mov	w1, w24
  88:	mov	w0, #0xffffc001            	// #-16383
  8c:	add	w0, w1, w0
  90:	str	w0, [sp, #104]
  94:	ldr	x1, [sp, #112]
  98:	mov	x0, #0xffffffffffffffff    	// #-1
  9c:	and	x22, x1, x0
  a0:	ldr	x0, [sp, #120]
  a4:	and	x23, x0, #0xffffffffffff
  a8:	mov	x0, #0x0                   	// #0
  ac:	orr	x0, x22, x0
  b0:	str	x0, [sp, #80]
  b4:	orr	x0, x23, #0x1000000000000
  b8:	str	x0, [sp, #88]
  bc:	ldr	w0, [sp, #108]
  c0:	cmn	w0, #0x1
  c4:	b.eq	d4 <__fixuint+0xb8>  // b.none
  c8:	ldr	w0, [sp, #104]
  cc:	cmp	w0, #0x0
  d0:	b.ge	e0 <__fixuint+0xc4>  // b.tcont
  d4:	mov	x20, #0x0                   	// #0
  d8:	mov	x21, #0x0                   	// #0
  dc:	b	1ac <__fixuint+0x190>
  e0:	ldr	w0, [sp, #104]
  e4:	cmp	w0, #0x7f
  e8:	b.ls	f8 <__fixuint+0xdc>  // b.plast
  ec:	mov	x20, #0xffffffffffffffff    	// #-1
  f0:	mov	x21, #0xffffffffffffffff    	// #-1
  f4:	b	1ac <__fixuint+0x190>
  f8:	ldr	w0, [sp, #104]
  fc:	cmp	w0, #0x6f
 100:	b.gt	15c <__fixuint+0x140>
 104:	mov	w1, #0x70                  	// #112
 108:	ldr	w0, [sp, #104]
 10c:	sub	w0, w1, w0
 110:	sub	w1, w0, #0x40
 114:	ldr	x2, [sp, #88]
 118:	lsr	x2, x2, x1
 11c:	mov	x5, #0x0                   	// #0
 120:	ldr	x3, [sp, #88]
 124:	lsl	x4, x3, #1
 128:	mov	w3, #0x3f                  	// #63
 12c:	sub	w3, w3, w0
 130:	lsl	x3, x4, x3
 134:	ldr	x4, [sp, #80]
 138:	lsr	x20, x4, x0
 13c:	orr	x20, x3, x20
 140:	ldr	x3, [sp, #88]
 144:	lsr	x21, x3, x0
 148:	cmp	w1, #0x0
 14c:	csel	x20, x2, x20, ge  // ge = tcont
 150:	cmp	w1, #0x0
 154:	csel	x21, x5, x21, ge  // ge = tcont
 158:	b	1ac <__fixuint+0x190>
 15c:	ldr	w0, [sp, #104]
 160:	sub	w0, w0, #0x70
 164:	sub	w1, w0, #0x40
 168:	ldr	x2, [sp, #80]
 16c:	lsl	x2, x2, x1
 170:	mov	x5, #0x0                   	// #0
 174:	ldr	x3, [sp, #80]
 178:	lsr	x4, x3, #1
 17c:	mov	w3, #0x3f                  	// #63
 180:	sub	w3, w3, w0
 184:	lsr	x3, x4, x3
 188:	ldr	x4, [sp, #88]
 18c:	lsl	x21, x4, x0
 190:	orr	x21, x3, x21
 194:	ldr	x3, [sp, #80]
 198:	lsl	x20, x3, x0
 19c:	cmp	w1, #0x0
 1a0:	csel	x21, x2, x21, ge  // ge = tcont
 1a4:	cmp	w1, #0x0
 1a8:	csel	x20, x5, x20, ge  // ge = tcont
 1ac:	mov	x0, x20
 1b0:	mov	x1, x21
 1b4:	ldp	x20, x21, [sp, #16]
 1b8:	ldp	x22, x23, [sp, #32]
 1bc:	ldp	x24, x25, [sp, #48]
 1c0:	ldp	x29, x30, [sp], #144
 1c4:	ret

00000000000001c8 <__fixunstfti>:
 1c8:	stp	x29, x30, [sp, #-32]!
 1cc:	mov	x29, sp
 1d0:	str	q0, [sp, #16]
 1d4:	ldr	q0, [sp, #16]
 1d8:	bl	1c <__fixuint>
 1dc:	ldp	x29, x30, [sp], #32
 1e0:	ret

floatditf.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fromRep>:
   0:	sub	sp, sp, #0x20
   4:	stp	x0, x1, [sp]
   8:	ldp	x0, x1, [sp]
   c:	stp	x0, x1, [sp, #16]
  10:	ldr	q0, [sp, #16]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__floatditf>:
  1c:	stp	x29, x30, [sp, #-96]!
  20:	mov	x29, sp
  24:	str	x0, [sp, #24]
  28:	mov	w0, #0x40                  	// #64
  2c:	str	w0, [sp, #68]
  30:	ldr	x0, [sp, #24]
  34:	cmp	x0, #0x0
  38:	b.ne	4c <__floatditf+0x30>  // b.any
  3c:	mov	x0, #0x0                   	// #0
  40:	mov	x1, #0x0                   	// #0
  44:	bl	0 <fromRep>
  48:	b	178 <__floatditf+0x15c>
  4c:	stp	xzr, xzr, [sp, #80]
  50:	ldr	x0, [sp, #24]
  54:	str	x0, [sp, #72]
  58:	ldr	x0, [sp, #24]
  5c:	cmp	x0, #0x0
  60:	b.ge	80 <__floatditf+0x64>  // b.tcont
  64:	adrp	x0, 0 <fromRep>
  68:	add	x0, x0, #0x0
  6c:	ldp	x0, x1, [x0]
  70:	stp	x0, x1, [sp, #80]
  74:	ldr	x0, [sp, #24]
  78:	neg	x0, x0
  7c:	str	x0, [sp, #72]
  80:	ldr	w0, [sp, #68]
  84:	sub	w0, w0, #0x1
  88:	ldr	x1, [sp, #72]
  8c:	clz	x1, x1
  90:	sub	w0, w0, w1
  94:	str	w0, [sp, #64]
  98:	mov	w1, #0x70                  	// #112
  9c:	ldr	w0, [sp, #64]
  a0:	sub	w0, w1, w0
  a4:	str	w0, [sp, #60]
  a8:	ldr	x0, [sp, #72]
  ac:	mov	x4, x0
  b0:	mov	x5, #0x0                   	// #0
  b4:	ldr	w0, [sp, #60]
  b8:	sub	w0, w0, #0x40
  bc:	lsl	x1, x4, x0
  c0:	mov	x17, #0x0                   	// #0
  c4:	lsr	x15, x4, #1
  c8:	mov	w16, #0x3f                  	// #63
  cc:	ldr	w14, [sp, #60]
  d0:	sub	w14, w16, w14
  d4:	lsr	x14, x15, x14
  d8:	ldr	w15, [sp, #60]
  dc:	lsl	x3, x5, x15
  e0:	orr	x3, x14, x3
  e4:	ldr	w14, [sp, #60]
  e8:	lsl	x2, x4, x14
  ec:	cmp	w0, #0x0
  f0:	csel	x3, x1, x3, ge  // ge = tcont
  f4:	cmp	w0, #0x0
  f8:	csel	x2, x17, x2, ge  // ge = tcont
  fc:	mov	x0, #0x0                   	// #0
 100:	eor	x0, x2, x0
 104:	str	x0, [sp, #32]
 108:	eor	x0, x3, #0x1000000000000
 10c:	str	x0, [sp, #40]
 110:	ldr	w1, [sp, #64]
 114:	mov	w0, #0x3fff                	// #16383
 118:	add	w0, w1, w0
 11c:	sxtw	x0, w0
 120:	mov	x12, x0
 124:	asr	x0, x0, #63
 128:	mov	x13, x0
 12c:	lsl	x7, x12, #48
 130:	mov	x6, #0x0                   	// #0
 134:	ldp	x0, x1, [sp, #32]
 138:	mov	x2, x6
 13c:	adds	x2, x0, x2
 140:	mov	x3, x7
 144:	adc	x0, x1, x3
 148:	mov	x10, x2
 14c:	mov	x11, x0
 150:	stp	x10, x11, [sp, #32]
 154:	ldr	x1, [sp, #32]
 158:	ldr	x0, [sp, #80]
 15c:	orr	x8, x1, x0
 160:	ldr	x1, [sp, #40]
 164:	ldr	x0, [sp, #88]
 168:	orr	x9, x1, x0
 16c:	mov	x0, x8
 170:	mov	x1, x9
 174:	bl	0 <fromRep>
 178:	ldp	x29, x30, [sp], #96
 17c:	ret

floatsitf.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fromRep>:
   0:	sub	sp, sp, #0x20
   4:	stp	x0, x1, [sp]
   8:	ldp	x0, x1, [sp]
   c:	stp	x0, x1, [sp, #16]
  10:	ldr	q0, [sp, #16]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__floatsitf>:
  1c:	stp	x29, x30, [sp, #-80]!
  20:	mov	x29, sp
  24:	str	w0, [sp, #28]
  28:	mov	w0, #0x20                  	// #32
  2c:	str	w0, [sp, #56]
  30:	ldr	w0, [sp, #28]
  34:	cmp	w0, #0x0
  38:	b.ne	4c <__floatsitf+0x30>  // b.any
  3c:	mov	x0, #0x0                   	// #0
  40:	mov	x1, #0x0                   	// #0
  44:	bl	0 <fromRep>
  48:	b	17c <__floatsitf+0x160>
  4c:	stp	xzr, xzr, [sp, #64]
  50:	ldr	w0, [sp, #28]
  54:	str	w0, [sp, #60]
  58:	ldr	w0, [sp, #28]
  5c:	cmp	w0, #0x0
  60:	b.ge	80 <__floatsitf+0x64>  // b.tcont
  64:	adrp	x0, 0 <fromRep>
  68:	add	x0, x0, #0x0
  6c:	ldp	x0, x1, [x0]
  70:	stp	x0, x1, [sp, #64]
  74:	ldr	w0, [sp, #28]
  78:	neg	w0, w0
  7c:	str	w0, [sp, #60]
  80:	ldr	w0, [sp, #56]
  84:	sub	w1, w0, #0x1
  88:	ldr	w0, [sp, #60]
  8c:	clz	w0, w0
  90:	sub	w0, w1, w0
  94:	str	w0, [sp, #52]
  98:	mov	w1, #0x70                  	// #112
  9c:	ldr	w0, [sp, #52]
  a0:	sub	w0, w1, w0
  a4:	str	w0, [sp, #48]
  a8:	ldr	w0, [sp, #60]
  ac:	mov	w0, w0
  b0:	mov	x4, x0
  b4:	mov	x5, #0x0                   	// #0
  b8:	ldr	w0, [sp, #48]
  bc:	sub	w0, w0, #0x40
  c0:	lsl	x1, x4, x0
  c4:	mov	x17, #0x0                   	// #0
  c8:	lsr	x15, x4, #1
  cc:	mov	w16, #0x3f                  	// #63
  d0:	ldr	w14, [sp, #48]
  d4:	sub	w14, w16, w14
  d8:	lsr	x14, x15, x14
  dc:	ldr	w15, [sp, #48]
  e0:	lsl	x3, x5, x15
  e4:	orr	x3, x14, x3
  e8:	ldr	w14, [sp, #48]
  ec:	lsl	x2, x4, x14
  f0:	cmp	w0, #0x0
  f4:	csel	x3, x1, x3, ge  // ge = tcont
  f8:	cmp	w0, #0x0
  fc:	csel	x2, x17, x2, ge  // ge = tcont
 100:	mov	x0, #0x0                   	// #0
 104:	eor	x0, x2, x0
 108:	str	x0, [sp, #32]
 10c:	eor	x0, x3, #0x1000000000000
 110:	str	x0, [sp, #40]
 114:	ldr	w1, [sp, #52]
 118:	mov	w0, #0x3fff                	// #16383
 11c:	add	w0, w1, w0
 120:	sxtw	x0, w0
 124:	mov	x12, x0
 128:	asr	x0, x0, #63
 12c:	mov	x13, x0
 130:	lsl	x7, x12, #48
 134:	mov	x6, #0x0                   	// #0
 138:	ldp	x0, x1, [sp, #32]
 13c:	mov	x2, x6
 140:	adds	x2, x0, x2
 144:	mov	x3, x7
 148:	adc	x0, x1, x3
 14c:	mov	x10, x2
 150:	mov	x11, x0
 154:	stp	x10, x11, [sp, #32]
 158:	ldr	x1, [sp, #32]
 15c:	ldr	x0, [sp, #64]
 160:	orr	x8, x1, x0
 164:	ldr	x1, [sp, #40]
 168:	ldr	x0, [sp, #72]
 16c:	orr	x9, x1, x0
 170:	mov	x0, x8
 174:	mov	x1, x9
 178:	bl	0 <fromRep>
 17c:	ldp	x29, x30, [sp], #80
 180:	ret

floattitf.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__floattitf>:
   0:	stp	x29, x30, [sp, #-256]!
   4:	mov	x29, sp
   8:	stp	x20, x21, [sp, #16]
   c:	stp	x22, x23, [sp, #32]
  10:	stp	x24, x25, [sp, #48]
  14:	stp	x26, x27, [sp, #64]
  18:	stp	x0, x1, [sp, #176]
  1c:	ldr	x0, [sp, #176]
  20:	ldr	x1, [sp, #184]
  24:	orr	x0, x0, x1
  28:	cmp	x0, #0x0
  2c:	b.ne	38 <__floattitf+0x38>  // b.any
  30:	movi	v0.2d, #0x0
  34:	b	3fc <__floattitf+0x3fc>
  38:	mov	w0, #0x80                  	// #128
  3c:	str	w0, [sp, #248]
  40:	ldr	w0, [sp, #248]
  44:	sub	w0, w0, #0x1
  48:	sub	w1, w0, #0x40
  4c:	ldr	x6, [sp, #184]
  50:	asr	x7, x6, x1
  54:	ldr	x6, [sp, #184]
  58:	asr	x6, x6, #63
  5c:	ldr	x8, [sp, #184]
  60:	lsl	x9, x8, #1
  64:	mov	w8, #0x3f                  	// #63
  68:	sub	w8, w8, w0
  6c:	lsl	x8, x9, x8
  70:	ldr	x9, [sp, #176]
  74:	lsr	x9, x9, x0
  78:	orr	x8, x9, x8
  7c:	str	x8, [sp, #224]
  80:	ldr	x8, [sp, #184]
  84:	asr	x0, x8, x0
  88:	str	x0, [sp, #232]
  8c:	ldr	x0, [sp, #224]
  90:	cmp	w1, #0x0
  94:	csel	x0, x0, x7, lt  // lt = tstop
  98:	str	x0, [sp, #224]
  9c:	ldr	x0, [sp, #232]
  a0:	cmp	w1, #0x0
  a4:	csel	x0, x0, x6, lt  // lt = tstop
  a8:	str	x0, [sp, #232]
  ac:	ldr	x1, [sp, #176]
  b0:	ldr	x0, [sp, #224]
  b4:	eor	x2, x1, x0
  b8:	ldr	x1, [sp, #184]
  bc:	ldr	x0, [sp, #232]
  c0:	eor	x3, x1, x0
  c4:	ldp	x0, x1, [sp, #224]
  c8:	subs	x6, x2, x0
  cc:	sbc	x0, x3, x1
  d0:	mov	x4, x6
  d4:	mov	x5, x0
  d8:	stp	x4, x5, [sp, #176]
  dc:	ldp	x0, x1, [sp, #176]
  e0:	bl	0 <__clzti2>
  e4:	mov	w1, w0
  e8:	ldr	w0, [sp, #248]
  ec:	sub	w0, w0, w1
  f0:	str	w0, [sp, #220]
  f4:	ldr	w0, [sp, #220]
  f8:	sub	w0, w0, #0x1
  fc:	str	w0, [sp, #252]
 100:	ldr	w0, [sp, #220]
 104:	cmp	w0, #0x71
 108:	b.le	340 <__floattitf+0x340>
 10c:	ldr	w0, [sp, #220]
 110:	cmp	w0, #0x72
 114:	b.eq	128 <__floattitf+0x128>  // b.none
 118:	ldr	w0, [sp, #220]
 11c:	cmp	w0, #0x73
 120:	b.eq	23c <__floattitf+0x23c>  // b.none
 124:	b	150 <__floattitf+0x150>
 128:	ldr	x0, [sp, #176]
 12c:	lsr	x0, x0, #63
 130:	ldr	x1, [sp, #184]
 134:	lsl	x1, x1, #1
 138:	orr	x0, x1, x0
 13c:	str	x0, [sp, #184]
 140:	ldr	x0, [sp, #176]
 144:	lsl	x0, x0, #1
 148:	str	x0, [sp, #176]
 14c:	b	240 <__floattitf+0x240>
 150:	ldp	x0, x1, [sp, #176]
 154:	ldr	w2, [sp, #220]
 158:	sub	w2, w2, #0x73
 15c:	sub	w3, w2, #0x40
 160:	lsr	x4, x1, x3
 164:	mov	x7, #0x0                   	// #0
 168:	lsl	x6, x1, #1
 16c:	mov	w5, #0x3f                  	// #63
 170:	sub	w5, w5, w2
 174:	lsl	x5, x6, x5
 178:	lsr	x20, x0, x2
 17c:	orr	x20, x5, x20
 180:	lsr	x21, x1, x2
 184:	cmp	w3, #0x0
 188:	csel	x20, x4, x20, ge  // ge = tcont
 18c:	cmp	w3, #0x0
 190:	csel	x21, x7, x21, ge  // ge = tcont
 194:	ldr	w0, [sp, #220]
 198:	ldr	w1, [sp, #248]
 19c:	sub	w0, w1, w0
 1a0:	add	w0, w0, #0x73
 1a4:	sub	w1, w0, #0x40
 1a8:	mov	x2, #0xffffffffffffffff    	// #-1
 1ac:	lsr	x2, x2, x1
 1b0:	mov	x5, #0x0                   	// #0
 1b4:	mov	x3, #0xffffffffffffffff    	// #-1
 1b8:	lsl	x4, x3, #1
 1bc:	mov	w3, #0x3f                  	// #63
 1c0:	sub	w3, w3, w0
 1c4:	lsl	x3, x4, x3
 1c8:	mov	x4, #0xffffffffffffffff    	// #-1
 1cc:	lsr	x22, x4, x0
 1d0:	orr	x22, x3, x22
 1d4:	mov	x3, #0xffffffffffffffff    	// #-1
 1d8:	lsr	x23, x3, x0
 1dc:	cmp	w1, #0x0
 1e0:	csel	x22, x2, x22, ge  // ge = tcont
 1e4:	cmp	w1, #0x0
 1e8:	csel	x23, x5, x23, ge  // ge = tcont
 1ec:	ldp	x0, x1, [sp, #176]
 1f0:	and	x26, x22, x0
 1f4:	and	x27, x23, x1
 1f8:	orr	x0, x26, x27
 1fc:	cmp	x0, #0x0
 200:	cset	w0, ne  // ne = any
 204:	and	w0, w0, #0xff
 208:	and	x0, x0, #0xff
 20c:	str	x0, [sp, #80]
 210:	str	xzr, [sp, #88]
 214:	ldp	x0, x1, [sp, #80]
 218:	mov	x2, x0
 21c:	orr	x2, x20, x2
 220:	str	x2, [sp, #96]
 224:	mov	x0, x1
 228:	orr	x0, x21, x0
 22c:	str	x0, [sp, #104]
 230:	ldp	x0, x1, [sp, #96]
 234:	stp	x0, x1, [sp, #176]
 238:	b	240 <__floattitf+0x240>
 23c:	nop
 240:	ldr	x0, [sp, #176]
 244:	and	x24, x0, #0x4
 248:	ldr	x0, [sp, #184]
 24c:	mov	x1, #0x0                   	// #0
 250:	and	x25, x0, x1
 254:	orr	x0, x24, x25
 258:	cmp	x0, #0x0
 25c:	cset	w0, ne  // ne = any
 260:	and	w0, w0, #0xff
 264:	and	x0, x0, #0xff
 268:	str	x0, [sp, #112]
 26c:	str	xzr, [sp, #120]
 270:	ldr	x0, [sp, #176]
 274:	ldp	x2, x3, [sp, #112]
 278:	mov	x1, x2
 27c:	orr	x0, x0, x1
 280:	str	x0, [sp, #176]
 284:	ldr	x0, [sp, #184]
 288:	mov	x1, x3
 28c:	orr	x0, x0, x1
 290:	str	x0, [sp, #184]
 294:	ldp	x0, x1, [sp, #176]
 298:	mov	x2, #0x1                   	// #1
 29c:	adds	x2, x0, x2
 2a0:	mov	x3, #0x0                   	// #0
 2a4:	adc	x0, x1, x3
 2a8:	str	x2, [sp, #160]
 2ac:	str	x0, [sp, #168]
 2b0:	ldp	x0, x1, [sp, #160]
 2b4:	stp	x0, x1, [sp, #176]
 2b8:	ldr	x0, [sp, #184]
 2bc:	lsl	x0, x0, #62
 2c0:	ldr	x1, [sp, #176]
 2c4:	lsr	x1, x1, #2
 2c8:	orr	x0, x1, x0
 2cc:	str	x0, [sp, #176]
 2d0:	ldr	x0, [sp, #184]
 2d4:	asr	x0, x0, #2
 2d8:	str	x0, [sp, #184]
 2dc:	ldp	x0, x1, [sp, #176]
 2e0:	mov	x2, #0x0                   	// #0
 2e4:	and	x2, x0, x2
 2e8:	str	x2, [sp, #128]
 2ec:	and	x0, x1, #0x2000000000000
 2f0:	str	x0, [sp, #136]
 2f4:	ldp	x2, x3, [sp, #128]
 2f8:	mov	x0, x2
 2fc:	mov	x1, x3
 300:	orr	x0, x0, x1
 304:	cmp	x0, #0x0
 308:	b.eq	3ac <__floattitf+0x3ac>  // b.none
 30c:	ldr	x0, [sp, #184]
 310:	lsl	x0, x0, #63
 314:	ldr	x1, [sp, #176]
 318:	lsr	x1, x1, #1
 31c:	orr	x0, x1, x0
 320:	str	x0, [sp, #176]
 324:	ldr	x0, [sp, #184]
 328:	asr	x0, x0, #1
 32c:	str	x0, [sp, #184]
 330:	ldr	w0, [sp, #252]
 334:	add	w0, w0, #0x1
 338:	str	w0, [sp, #252]
 33c:	b	3ac <__floattitf+0x3ac>
 340:	mov	w1, #0x71                  	// #113
 344:	ldr	w0, [sp, #220]
 348:	sub	w0, w1, w0
 34c:	sub	w1, w0, #0x40
 350:	ldr	x2, [sp, #176]
 354:	lsl	x2, x2, x1
 358:	mov	x5, #0x0                   	// #0
 35c:	ldr	x3, [sp, #176]
 360:	lsr	x4, x3, #1
 364:	mov	w3, #0x3f                  	// #63
 368:	sub	w3, w3, w0
 36c:	lsr	x3, x4, x3
 370:	ldr	x4, [sp, #184]
 374:	lsl	x4, x4, x0
 378:	orr	x3, x4, x3
 37c:	str	x3, [sp, #184]
 380:	ldr	x3, [sp, #176]
 384:	lsl	x0, x3, x0
 388:	str	x0, [sp, #176]
 38c:	ldr	x0, [sp, #184]
 390:	cmp	w1, #0x0
 394:	csel	x0, x0, x2, lt  // lt = tstop
 398:	str	x0, [sp, #184]
 39c:	ldr	x0, [sp, #176]
 3a0:	cmp	w1, #0x0
 3a4:	csel	x0, x0, x5, lt  // lt = tstop
 3a8:	str	x0, [sp, #176]
 3ac:	ldr	x0, [sp, #224]
 3b0:	and	x0, x0, #0x8000000000000000
 3b4:	ldr	w2, [sp, #252]
 3b8:	mov	w1, #0x3fff                	// #16383
 3bc:	add	w1, w2, w1
 3c0:	sxtw	x1, w1
 3c4:	lsl	x1, x1, #48
 3c8:	orr	x1, x0, x1
 3cc:	ldr	x0, [sp, #184]
 3d0:	str	x0, [sp, #144]
 3d4:	ldr	x0, [sp, #184]
 3d8:	asr	x0, x0, #63
 3dc:	str	x0, [sp, #152]
 3e0:	ldr	x0, [sp, #144]
 3e4:	and	x0, x0, #0xffffffffffff
 3e8:	orr	x0, x1, x0
 3ec:	str	x0, [sp, #200]
 3f0:	ldr	x0, [sp, #176]
 3f4:	str	x0, [sp, #192]
 3f8:	ldr	q0, [sp, #192]
 3fc:	ldp	x20, x21, [sp, #16]
 400:	ldp	x22, x23, [sp, #32]
 404:	ldp	x24, x25, [sp, #48]
 408:	ldp	x26, x27, [sp, #64]
 40c:	ldp	x29, x30, [sp], #256
 410:	ret

floatunditf.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fromRep>:
   0:	sub	sp, sp, #0x20
   4:	stp	x0, x1, [sp]
   8:	ldp	x0, x1, [sp]
   c:	stp	x0, x1, [sp, #16]
  10:	ldr	q0, [sp, #16]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__floatunditf>:
  1c:	stp	x29, x30, [sp, #-64]!
  20:	mov	x29, sp
  24:	str	x0, [sp, #24]
  28:	mov	w0, #0x40                  	// #64
  2c:	str	w0, [sp, #60]
  30:	ldr	x0, [sp, #24]
  34:	cmp	x0, #0x0
  38:	b.ne	4c <__floatunditf+0x30>  // b.any
  3c:	mov	x0, #0x0                   	// #0
  40:	mov	x1, #0x0                   	// #0
  44:	bl	0 <fromRep>
  48:	b	128 <__floatunditf+0x10c>
  4c:	ldr	w0, [sp, #60]
  50:	sub	w0, w0, #0x1
  54:	ldr	x1, [sp, #24]
  58:	clz	x1, x1
  5c:	sub	w0, w0, w1
  60:	str	w0, [sp, #56]
  64:	mov	w1, #0x70                  	// #112
  68:	ldr	w0, [sp, #56]
  6c:	sub	w0, w1, w0
  70:	str	w0, [sp, #52]
  74:	ldr	x0, [sp, #24]
  78:	mov	x4, x0
  7c:	mov	x5, #0x0                   	// #0
  80:	ldr	w0, [sp, #52]
  84:	sub	w0, w0, #0x40
  88:	lsl	x1, x4, x0
  8c:	mov	x15, #0x0                   	// #0
  90:	lsr	x13, x4, #1
  94:	mov	w14, #0x3f                  	// #63
  98:	ldr	w12, [sp, #52]
  9c:	sub	w12, w14, w12
  a0:	lsr	x12, x13, x12
  a4:	ldr	w13, [sp, #52]
  a8:	lsl	x3, x5, x13
  ac:	orr	x3, x12, x3
  b0:	ldr	w12, [sp, #52]
  b4:	lsl	x2, x4, x12
  b8:	cmp	w0, #0x0
  bc:	csel	x3, x1, x3, ge  // ge = tcont
  c0:	cmp	w0, #0x0
  c4:	csel	x2, x15, x2, ge  // ge = tcont
  c8:	mov	x0, #0x0                   	// #0
  cc:	eor	x0, x2, x0
  d0:	str	x0, [sp, #32]
  d4:	eor	x0, x3, #0x1000000000000
  d8:	str	x0, [sp, #40]
  dc:	ldr	w1, [sp, #56]
  e0:	mov	w0, #0x3fff                	// #16383
  e4:	add	w0, w1, w0
  e8:	sxtw	x0, w0
  ec:	mov	x10, x0
  f0:	asr	x0, x0, #63
  f4:	mov	x11, x0
  f8:	lsl	x7, x10, #48
  fc:	mov	x6, #0x0                   	// #0
 100:	ldp	x0, x1, [sp, #32]
 104:	mov	x2, x6
 108:	adds	x2, x0, x2
 10c:	mov	x3, x7
 110:	adc	x0, x1, x3
 114:	mov	x8, x2
 118:	mov	x9, x0
 11c:	stp	x8, x9, [sp, #32]
 120:	ldp	x0, x1, [sp, #32]
 124:	bl	0 <fromRep>
 128:	ldp	x29, x30, [sp], #64
 12c:	ret

floatunsitf.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fromRep>:
   0:	sub	sp, sp, #0x20
   4:	stp	x0, x1, [sp]
   8:	ldp	x0, x1, [sp]
   c:	stp	x0, x1, [sp, #16]
  10:	ldr	q0, [sp, #16]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__floatunsitf>:
  1c:	stp	x29, x30, [sp, #-64]!
  20:	mov	x29, sp
  24:	str	w0, [sp, #28]
  28:	mov	w0, #0x20                  	// #32
  2c:	str	w0, [sp, #60]
  30:	ldr	w0, [sp, #28]
  34:	cmp	w0, #0x0
  38:	b.ne	4c <__floatunsitf+0x30>  // b.any
  3c:	mov	x0, #0x0                   	// #0
  40:	mov	x1, #0x0                   	// #0
  44:	bl	0 <fromRep>
  48:	b	12c <__floatunsitf+0x110>
  4c:	ldr	w0, [sp, #60]
  50:	sub	w1, w0, #0x1
  54:	ldr	w0, [sp, #28]
  58:	clz	w0, w0
  5c:	sub	w0, w1, w0
  60:	str	w0, [sp, #56]
  64:	mov	w1, #0x70                  	// #112
  68:	ldr	w0, [sp, #56]
  6c:	sub	w0, w1, w0
  70:	str	w0, [sp, #52]
  74:	ldr	w0, [sp, #28]
  78:	mov	w0, w0
  7c:	mov	x4, x0
  80:	mov	x5, #0x0                   	// #0
  84:	ldr	w0, [sp, #52]
  88:	sub	w0, w0, #0x40
  8c:	lsl	x1, x4, x0
  90:	mov	x15, #0x0                   	// #0
  94:	lsr	x13, x4, #1
  98:	mov	w14, #0x3f                  	// #63
  9c:	ldr	w12, [sp, #52]
  a0:	sub	w12, w14, w12
  a4:	lsr	x12, x13, x12
  a8:	ldr	w13, [sp, #52]
  ac:	lsl	x3, x5, x13
  b0:	orr	x3, x12, x3
  b4:	ldr	w12, [sp, #52]
  b8:	lsl	x2, x4, x12
  bc:	cmp	w0, #0x0
  c0:	csel	x3, x1, x3, ge  // ge = tcont
  c4:	cmp	w0, #0x0
  c8:	csel	x2, x15, x2, ge  // ge = tcont
  cc:	mov	x0, #0x0                   	// #0
  d0:	eor	x0, x2, x0
  d4:	str	x0, [sp, #32]
  d8:	eor	x0, x3, #0x1000000000000
  dc:	str	x0, [sp, #40]
  e0:	ldr	w1, [sp, #56]
  e4:	mov	w0, #0x3fff                	// #16383
  e8:	add	w0, w1, w0
  ec:	sxtw	x0, w0
  f0:	mov	x10, x0
  f4:	asr	x0, x0, #63
  f8:	mov	x11, x0
  fc:	lsl	x7, x10, #48
 100:	mov	x6, #0x0                   	// #0
 104:	ldp	x0, x1, [sp, #32]
 108:	mov	x2, x6
 10c:	adds	x2, x0, x2
 110:	mov	x3, x7
 114:	adc	x0, x1, x3
 118:	mov	x8, x2
 11c:	mov	x9, x0
 120:	stp	x8, x9, [sp, #32]
 124:	ldp	x0, x1, [sp, #32]
 128:	bl	0 <fromRep>
 12c:	ldp	x29, x30, [sp], #64
 130:	ret

floatuntitf.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__floatuntitf>:
   0:	stp	x29, x30, [sp, #-208]!
   4:	mov	x29, sp
   8:	stp	x20, x21, [sp, #16]
   c:	stp	x22, x23, [sp, #32]
  10:	stp	x24, x25, [sp, #48]
  14:	stp	x26, x27, [sp, #64]
  18:	stp	x0, x1, [sp, #160]
  1c:	ldr	x0, [sp, #160]
  20:	ldr	x1, [sp, #168]
  24:	orr	x0, x0, x1
  28:	cmp	x0, #0x0
  2c:	b.ne	38 <__floatuntitf+0x38>  // b.any
  30:	movi	v0.2d, #0x0
  34:	b	358 <__floatuntitf+0x358>
  38:	mov	w0, #0x80                  	// #128
  3c:	str	w0, [sp, #200]
  40:	ldp	x0, x1, [sp, #160]
  44:	bl	0 <__clzti2>
  48:	mov	w1, w0
  4c:	ldr	w0, [sp, #200]
  50:	sub	w0, w0, w1
  54:	str	w0, [sp, #196]
  58:	ldr	w0, [sp, #196]
  5c:	sub	w0, w0, #0x1
  60:	str	w0, [sp, #204]
  64:	ldr	w0, [sp, #196]
  68:	cmp	w0, #0x71
  6c:	b.le	2b0 <__floatuntitf+0x2b0>
  70:	ldr	w0, [sp, #196]
  74:	cmp	w0, #0x72
  78:	b.eq	8c <__floatuntitf+0x8c>  // b.none
  7c:	ldr	w0, [sp, #196]
  80:	cmp	w0, #0x73
  84:	b.eq	1a8 <__floatuntitf+0x1a8>  // b.none
  88:	b	b4 <__floatuntitf+0xb4>
  8c:	ldr	x0, [sp, #160]
  90:	lsr	x0, x0, #63
  94:	ldr	x1, [sp, #168]
  98:	lsl	x1, x1, #1
  9c:	orr	x0, x1, x0
  a0:	str	x0, [sp, #168]
  a4:	ldr	x0, [sp, #160]
  a8:	lsl	x0, x0, #1
  ac:	str	x0, [sp, #160]
  b0:	b	1ac <__floatuntitf+0x1ac>
  b4:	ldr	w0, [sp, #196]
  b8:	sub	w0, w0, #0x73
  bc:	sub	w1, w0, #0x40
  c0:	ldr	x2, [sp, #168]
  c4:	lsr	x2, x2, x1
  c8:	mov	x5, #0x0                   	// #0
  cc:	ldr	x3, [sp, #168]
  d0:	lsl	x4, x3, #1
  d4:	mov	w3, #0x3f                  	// #63
  d8:	sub	w3, w3, w0
  dc:	lsl	x3, x4, x3
  e0:	ldr	x4, [sp, #160]
  e4:	lsr	x20, x4, x0
  e8:	orr	x20, x3, x20
  ec:	ldr	x3, [sp, #168]
  f0:	lsr	x21, x3, x0
  f4:	cmp	w1, #0x0
  f8:	csel	x20, x2, x20, ge  // ge = tcont
  fc:	cmp	w1, #0x0
 100:	csel	x21, x5, x21, ge  // ge = tcont
 104:	ldr	w0, [sp, #196]
 108:	ldr	w1, [sp, #200]
 10c:	sub	w0, w1, w0
 110:	add	w0, w0, #0x73
 114:	sub	w1, w0, #0x40
 118:	mov	x2, #0xffffffffffffffff    	// #-1
 11c:	lsr	x2, x2, x1
 120:	mov	x5, #0x0                   	// #0
 124:	mov	x3, #0xffffffffffffffff    	// #-1
 128:	lsl	x4, x3, #1
 12c:	mov	w3, #0x3f                  	// #63
 130:	sub	w3, w3, w0
 134:	lsl	x3, x4, x3
 138:	mov	x4, #0xffffffffffffffff    	// #-1
 13c:	lsr	x22, x4, x0
 140:	orr	x22, x3, x22
 144:	mov	x3, #0xffffffffffffffff    	// #-1
 148:	lsr	x23, x3, x0
 14c:	cmp	w1, #0x0
 150:	csel	x22, x2, x22, ge  // ge = tcont
 154:	cmp	w1, #0x0
 158:	csel	x23, x5, x23, ge  // ge = tcont
 15c:	ldr	x0, [sp, #160]
 160:	and	x26, x0, x22
 164:	ldr	x0, [sp, #168]
 168:	and	x27, x0, x23
 16c:	orr	x0, x26, x27
 170:	cmp	x0, #0x0
 174:	cset	w0, ne  // ne = any
 178:	and	w0, w0, #0xff
 17c:	and	x0, x0, #0xff
 180:	str	x0, [sp, #80]
 184:	str	xzr, [sp, #88]
 188:	ldp	x2, x3, [sp, #80]
 18c:	mov	x0, x2
 190:	orr	x0, x20, x0
 194:	str	x0, [sp, #160]
 198:	mov	x0, x3
 19c:	orr	x0, x21, x0
 1a0:	str	x0, [sp, #168]
 1a4:	b	1ac <__floatuntitf+0x1ac>
 1a8:	nop
 1ac:	ldr	x0, [sp, #160]
 1b0:	and	x24, x0, #0x4
 1b4:	ldr	x0, [sp, #168]
 1b8:	mov	x1, #0x0                   	// #0
 1bc:	and	x25, x0, x1
 1c0:	orr	x0, x24, x25
 1c4:	cmp	x0, #0x0
 1c8:	cset	w0, ne  // ne = any
 1cc:	and	w0, w0, #0xff
 1d0:	and	x0, x0, #0xff
 1d4:	str	x0, [sp, #96]
 1d8:	str	xzr, [sp, #104]
 1dc:	ldr	x0, [sp, #160]
 1e0:	ldp	x2, x3, [sp, #96]
 1e4:	mov	x1, x2
 1e8:	orr	x0, x0, x1
 1ec:	str	x0, [sp, #160]
 1f0:	ldr	x0, [sp, #168]
 1f4:	mov	x1, x3
 1f8:	orr	x0, x0, x1
 1fc:	str	x0, [sp, #168]
 200:	ldp	x0, x1, [sp, #160]
 204:	mov	x2, #0x1                   	// #1
 208:	adds	x2, x0, x2
 20c:	mov	x3, #0x0                   	// #0
 210:	adc	x0, x1, x3
 214:	str	x2, [sp, #144]
 218:	str	x0, [sp, #152]
 21c:	ldp	x0, x1, [sp, #144]
 220:	stp	x0, x1, [sp, #160]
 224:	ldr	x0, [sp, #168]
 228:	lsl	x0, x0, #62
 22c:	ldr	x1, [sp, #160]
 230:	lsr	x1, x1, #2
 234:	orr	x0, x1, x0
 238:	str	x0, [sp, #160]
 23c:	ldr	x0, [sp, #168]
 240:	lsr	x0, x0, #2
 244:	str	x0, [sp, #168]
 248:	ldr	x0, [sp, #160]
 24c:	mov	x1, #0x0                   	// #0
 250:	and	x0, x0, x1
 254:	str	x0, [sp, #112]
 258:	ldr	x0, [sp, #168]
 25c:	and	x0, x0, #0x2000000000000
 260:	str	x0, [sp, #120]
 264:	ldp	x2, x3, [sp, #112]
 268:	mov	x0, x2
 26c:	mov	x1, x3
 270:	orr	x0, x0, x1
 274:	cmp	x0, #0x0
 278:	b.eq	31c <__floatuntitf+0x31c>  // b.none
 27c:	ldr	x0, [sp, #168]
 280:	lsl	x0, x0, #63
 284:	ldr	x1, [sp, #160]
 288:	lsr	x1, x1, #1
 28c:	orr	x0, x1, x0
 290:	str	x0, [sp, #160]
 294:	ldr	x0, [sp, #168]
 298:	lsr	x0, x0, #1
 29c:	str	x0, [sp, #168]
 2a0:	ldr	w0, [sp, #204]
 2a4:	add	w0, w0, #0x1
 2a8:	str	w0, [sp, #204]
 2ac:	b	31c <__floatuntitf+0x31c>
 2b0:	mov	w1, #0x71                  	// #113
 2b4:	ldr	w0, [sp, #196]
 2b8:	sub	w0, w1, w0
 2bc:	sub	w1, w0, #0x40
 2c0:	ldr	x2, [sp, #160]
 2c4:	lsl	x2, x2, x1
 2c8:	mov	x5, #0x0                   	// #0
 2cc:	ldr	x3, [sp, #160]
 2d0:	lsr	x4, x3, #1
 2d4:	mov	w3, #0x3f                  	// #63
 2d8:	sub	w3, w3, w0
 2dc:	lsr	x3, x4, x3
 2e0:	ldr	x4, [sp, #168]
 2e4:	lsl	x4, x4, x0
 2e8:	orr	x3, x4, x3
 2ec:	str	x3, [sp, #168]
 2f0:	ldr	x3, [sp, #160]
 2f4:	lsl	x0, x3, x0
 2f8:	str	x0, [sp, #160]
 2fc:	ldr	x0, [sp, #168]
 300:	cmp	w1, #0x0
 304:	csel	x0, x0, x2, lt  // lt = tstop
 308:	str	x0, [sp, #168]
 30c:	ldr	x0, [sp, #160]
 310:	cmp	w1, #0x0
 314:	csel	x0, x0, x5, lt  // lt = tstop
 318:	str	x0, [sp, #160]
 31c:	ldr	w1, [sp, #204]
 320:	mov	w0, #0x3fff                	// #16383
 324:	add	w0, w1, w0
 328:	sxtw	x0, w0
 32c:	lsl	x1, x0, #48
 330:	ldr	x0, [sp, #168]
 334:	str	x0, [sp, #128]
 338:	str	xzr, [sp, #136]
 33c:	ldr	x0, [sp, #128]
 340:	and	x0, x0, #0xffffffffffff
 344:	orr	x0, x1, x0
 348:	str	x0, [sp, #184]
 34c:	ldr	x0, [sp, #160]
 350:	str	x0, [sp, #176]
 354:	ldr	q0, [sp, #176]
 358:	ldp	x20, x21, [sp, #16]
 35c:	ldp	x22, x23, [sp, #32]
 360:	ldp	x24, x25, [sp, #48]
 364:	ldp	x26, x27, [sp, #64]
 368:	ldp	x29, x30, [sp], #208
 36c:	ret

multc3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__multc3>:
   0:	stp	x29, x30, [sp, #-432]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	q0, [sp, #272]
  10:	str	q1, [sp, #256]
  14:	str	q2, [sp, #240]
  18:	str	q3, [sp, #224]
  1c:	ldr	q1, [sp, #240]
  20:	ldr	q0, [sp, #272]
  24:	bl	0 <__multf3>
  28:	str	q0, [sp, #368]
  2c:	ldr	q1, [sp, #224]
  30:	ldr	q0, [sp, #256]
  34:	bl	0 <__multf3>
  38:	str	q0, [sp, #352]
  3c:	ldr	q1, [sp, #224]
  40:	ldr	q0, [sp, #272]
  44:	bl	0 <__multf3>
  48:	str	q0, [sp, #336]
  4c:	ldr	q1, [sp, #240]
  50:	ldr	q0, [sp, #256]
  54:	bl	0 <__multf3>
  58:	str	q0, [sp, #320]
  5c:	ldr	q1, [sp, #352]
  60:	ldr	q0, [sp, #368]
  64:	bl	0 <__subtf3>
  68:	str	q0, [sp, #416]
  6c:	ldr	q0, [sp, #400]
  70:	ldr	q2, [sp, #416]
  74:	str	q2, [sp, #288]
  78:	str	q0, [sp, #304]
  7c:	ldr	q1, [sp, #320]
  80:	ldr	q0, [sp, #336]
  84:	bl	0 <__addtf3>
  88:	str	q0, [sp, #400]
  8c:	ldr	q0, [sp, #400]
  90:	ldr	q2, [sp, #416]
  94:	str	q2, [sp, #288]
  98:	str	q0, [sp, #304]
  9c:	ldr	q0, [sp, #416]
  a0:	mov	v1.16b, v0.16b
  a4:	bl	0 <__unordtf2>
  a8:	cmp	w0, #0x0
  ac:	b.eq	8b0 <__multc3+0x8b0>  // b.none
  b0:	ldr	q0, [sp, #400]
  b4:	mov	v1.16b, v0.16b
  b8:	bl	0 <__unordtf2>
  bc:	cmp	w0, #0x0
  c0:	b.eq	8b0 <__multc3+0x8b0>  // b.none
  c4:	str	wzr, [sp, #396]
  c8:	ldr	x0, [sp, #272]
  cc:	str	x0, [sp, #32]
  d0:	ldr	x0, [sp, #280]
  d4:	and	x0, x0, #0x7fffffffffffffff
  d8:	str	x0, [sp, #40]
  dc:	mov	w19, #0x1                   	// #1
  e0:	adrp	x0, 0 <__multc3>
  e4:	add	x0, x0, #0x0
  e8:	ldr	q1, [x0]
  ec:	ldr	q0, [sp, #32]
  f0:	bl	0 <__unordtf2>
  f4:	cmp	w0, #0x0
  f8:	b.ne	11c <__multc3+0x11c>  // b.any
  fc:	adrp	x0, 0 <__multc3>
 100:	add	x0, x0, #0x0
 104:	ldr	q1, [x0]
 108:	ldr	q0, [sp, #32]
 10c:	bl	0 <__letf2>
 110:	cmp	w0, #0x0
 114:	b.le	11c <__multc3+0x11c>
 118:	mov	w19, #0x0                   	// #0
 11c:	and	w0, w19, #0xff
 120:	eor	w0, w0, #0x1
 124:	and	w0, w0, #0xff
 128:	cmp	w0, #0x0
 12c:	b.ne	198 <__multc3+0x198>  // b.any
 130:	ldr	x0, [sp, #256]
 134:	str	x0, [sp, #48]
 138:	ldr	x0, [sp, #264]
 13c:	and	x0, x0, #0x7fffffffffffffff
 140:	str	x0, [sp, #56]
 144:	mov	w19, #0x1                   	// #1
 148:	adrp	x0, 0 <__multc3>
 14c:	add	x0, x0, #0x0
 150:	ldr	q1, [x0]
 154:	ldr	q0, [sp, #48]
 158:	bl	0 <__unordtf2>
 15c:	cmp	w0, #0x0
 160:	b.ne	184 <__multc3+0x184>  // b.any
 164:	adrp	x0, 0 <__multc3>
 168:	add	x0, x0, #0x0
 16c:	ldr	q1, [x0]
 170:	ldr	q0, [sp, #48]
 174:	bl	0 <__letf2>
 178:	cmp	w0, #0x0
 17c:	b.le	184 <__multc3+0x184>
 180:	mov	w19, #0x0                   	// #0
 184:	and	w0, w19, #0xff
 188:	eor	w0, w0, #0x1
 18c:	and	w0, w0, #0xff
 190:	cmp	w0, #0x0
 194:	b.eq	320 <__multc3+0x320>  // b.none
 198:	ldr	x0, [sp, #272]
 19c:	str	x0, [sp, #64]
 1a0:	ldr	x0, [sp, #280]
 1a4:	and	x0, x0, #0x7fffffffffffffff
 1a8:	str	x0, [sp, #72]
 1ac:	mov	w19, #0x1                   	// #1
 1b0:	adrp	x0, 0 <__multc3>
 1b4:	add	x0, x0, #0x0
 1b8:	ldr	q1, [x0]
 1bc:	ldr	q0, [sp, #64]
 1c0:	bl	0 <__unordtf2>
 1c4:	cmp	w0, #0x0
 1c8:	b.ne	1ec <__multc3+0x1ec>  // b.any
 1cc:	adrp	x0, 0 <__multc3>
 1d0:	add	x0, x0, #0x0
 1d4:	ldr	q1, [x0]
 1d8:	ldr	q0, [sp, #64]
 1dc:	bl	0 <__letf2>
 1e0:	cmp	w0, #0x0
 1e4:	b.le	1ec <__multc3+0x1ec>
 1e8:	mov	w19, #0x0                   	// #0
 1ec:	and	w0, w19, #0xff
 1f0:	eor	w0, w0, #0x1
 1f4:	and	w0, w0, #0xff
 1f8:	bl	0 <__floatsitf>
 1fc:	str	q0, [sp, #32]
 200:	ldr	x0, [sp, #32]
 204:	str	x0, [sp, #272]
 208:	ldr	x0, [sp, #40]
 20c:	and	x1, x0, #0x7fffffffffffffff
 210:	ldr	x0, [sp, #280]
 214:	and	x0, x0, #0x8000000000000000
 218:	orr	x0, x1, x0
 21c:	str	x0, [sp, #280]
 220:	ldr	x0, [sp, #256]
 224:	str	x0, [sp, #80]
 228:	ldr	x0, [sp, #264]
 22c:	and	x0, x0, #0x7fffffffffffffff
 230:	str	x0, [sp, #88]
 234:	mov	w19, #0x1                   	// #1
 238:	adrp	x0, 0 <__multc3>
 23c:	add	x0, x0, #0x0
 240:	ldr	q1, [x0]
 244:	ldr	q0, [sp, #80]
 248:	bl	0 <__unordtf2>
 24c:	cmp	w0, #0x0
 250:	b.ne	274 <__multc3+0x274>  // b.any
 254:	adrp	x0, 0 <__multc3>
 258:	add	x0, x0, #0x0
 25c:	ldr	q1, [x0]
 260:	ldr	q0, [sp, #80]
 264:	bl	0 <__letf2>
 268:	cmp	w0, #0x0
 26c:	b.le	274 <__multc3+0x274>
 270:	mov	w19, #0x0                   	// #0
 274:	and	w0, w19, #0xff
 278:	eor	w0, w0, #0x1
 27c:	and	w0, w0, #0xff
 280:	bl	0 <__floatsitf>
 284:	str	q0, [sp, #32]
 288:	ldr	x0, [sp, #32]
 28c:	str	x0, [sp, #256]
 290:	ldr	x0, [sp, #40]
 294:	and	x1, x0, #0x7fffffffffffffff
 298:	ldr	x0, [sp, #264]
 29c:	and	x0, x0, #0x8000000000000000
 2a0:	orr	x0, x1, x0
 2a4:	str	x0, [sp, #264]
 2a8:	ldr	q1, [sp, #240]
 2ac:	ldr	q0, [sp, #240]
 2b0:	bl	0 <__unordtf2>
 2b4:	cmp	w0, #0x0
 2b8:	b.eq	2e0 <__multc3+0x2e0>  // b.none
 2bc:	ldr	x0, [sp, #248]
 2c0:	and	x0, x0, #0x8000000000000000
 2c4:	stp	xzr, xzr, [sp, #240]
 2c8:	cmp	x0, #0x0
 2cc:	b.eq	2e0 <__multc3+0x2e0>  // b.none
 2d0:	adrp	x0, 0 <__multc3>
 2d4:	add	x0, x0, #0x0
 2d8:	ldr	q0, [x0]
 2dc:	str	q0, [sp, #240]
 2e0:	ldr	q1, [sp, #224]
 2e4:	ldr	q0, [sp, #224]
 2e8:	bl	0 <__unordtf2>
 2ec:	cmp	w0, #0x0
 2f0:	b.eq	318 <__multc3+0x318>  // b.none
 2f4:	ldr	x0, [sp, #232]
 2f8:	and	x0, x0, #0x8000000000000000
 2fc:	stp	xzr, xzr, [sp, #224]
 300:	cmp	x0, #0x0
 304:	b.eq	318 <__multc3+0x318>  // b.none
 308:	adrp	x0, 0 <__multc3>
 30c:	add	x0, x0, #0x0
 310:	ldr	q0, [x0]
 314:	str	q0, [sp, #224]
 318:	mov	w0, #0x1                   	// #1
 31c:	str	w0, [sp, #396]
 320:	ldr	x0, [sp, #240]
 324:	str	x0, [sp, #96]
 328:	ldr	x0, [sp, #248]
 32c:	and	x0, x0, #0x7fffffffffffffff
 330:	str	x0, [sp, #104]
 334:	mov	w19, #0x1                   	// #1
 338:	adrp	x0, 0 <__multc3>
 33c:	add	x0, x0, #0x0
 340:	ldr	q1, [x0]
 344:	ldr	q0, [sp, #96]
 348:	bl	0 <__unordtf2>
 34c:	cmp	w0, #0x0
 350:	b.ne	374 <__multc3+0x374>  // b.any
 354:	adrp	x0, 0 <__multc3>
 358:	add	x0, x0, #0x0
 35c:	ldr	q1, [x0]
 360:	ldr	q0, [sp, #96]
 364:	bl	0 <__letf2>
 368:	cmp	w0, #0x0
 36c:	b.le	374 <__multc3+0x374>
 370:	mov	w19, #0x0                   	// #0
 374:	and	w0, w19, #0xff
 378:	eor	w0, w0, #0x1
 37c:	and	w0, w0, #0xff
 380:	cmp	w0, #0x0
 384:	b.ne	3f0 <__multc3+0x3f0>  // b.any
 388:	ldr	x0, [sp, #224]
 38c:	str	x0, [sp, #112]
 390:	ldr	x0, [sp, #232]
 394:	and	x0, x0, #0x7fffffffffffffff
 398:	str	x0, [sp, #120]
 39c:	mov	w19, #0x1                   	// #1
 3a0:	adrp	x0, 0 <__multc3>
 3a4:	add	x0, x0, #0x0
 3a8:	ldr	q1, [x0]
 3ac:	ldr	q0, [sp, #112]
 3b0:	bl	0 <__unordtf2>
 3b4:	cmp	w0, #0x0
 3b8:	b.ne	3dc <__multc3+0x3dc>  // b.any
 3bc:	adrp	x0, 0 <__multc3>
 3c0:	add	x0, x0, #0x0
 3c4:	ldr	q1, [x0]
 3c8:	ldr	q0, [sp, #112]
 3cc:	bl	0 <__letf2>
 3d0:	cmp	w0, #0x0
 3d4:	b.le	3dc <__multc3+0x3dc>
 3d8:	mov	w19, #0x0                   	// #0
 3dc:	and	w0, w19, #0xff
 3e0:	eor	w0, w0, #0x1
 3e4:	and	w0, w0, #0xff
 3e8:	cmp	w0, #0x0
 3ec:	b.eq	578 <__multc3+0x578>  // b.none
 3f0:	ldr	x0, [sp, #240]
 3f4:	str	x0, [sp, #128]
 3f8:	ldr	x0, [sp, #248]
 3fc:	and	x0, x0, #0x7fffffffffffffff
 400:	str	x0, [sp, #136]
 404:	mov	w19, #0x1                   	// #1
 408:	adrp	x0, 0 <__multc3>
 40c:	add	x0, x0, #0x0
 410:	ldr	q1, [x0]
 414:	ldr	q0, [sp, #128]
 418:	bl	0 <__unordtf2>
 41c:	cmp	w0, #0x0
 420:	b.ne	444 <__multc3+0x444>  // b.any
 424:	adrp	x0, 0 <__multc3>
 428:	add	x0, x0, #0x0
 42c:	ldr	q1, [x0]
 430:	ldr	q0, [sp, #128]
 434:	bl	0 <__letf2>
 438:	cmp	w0, #0x0
 43c:	b.le	444 <__multc3+0x444>
 440:	mov	w19, #0x0                   	// #0
 444:	and	w0, w19, #0xff
 448:	eor	w0, w0, #0x1
 44c:	and	w0, w0, #0xff
 450:	bl	0 <__floatsitf>
 454:	str	q0, [sp, #32]
 458:	ldr	x0, [sp, #32]
 45c:	str	x0, [sp, #240]
 460:	ldr	x0, [sp, #40]
 464:	and	x1, x0, #0x7fffffffffffffff
 468:	ldr	x0, [sp, #248]
 46c:	and	x0, x0, #0x8000000000000000
 470:	orr	x0, x1, x0
 474:	str	x0, [sp, #248]
 478:	ldr	x0, [sp, #224]
 47c:	str	x0, [sp, #144]
 480:	ldr	x0, [sp, #232]
 484:	and	x0, x0, #0x7fffffffffffffff
 488:	str	x0, [sp, #152]
 48c:	mov	w19, #0x1                   	// #1
 490:	adrp	x0, 0 <__multc3>
 494:	add	x0, x0, #0x0
 498:	ldr	q1, [x0]
 49c:	ldr	q0, [sp, #144]
 4a0:	bl	0 <__unordtf2>
 4a4:	cmp	w0, #0x0
 4a8:	b.ne	4cc <__multc3+0x4cc>  // b.any
 4ac:	adrp	x0, 0 <__multc3>
 4b0:	add	x0, x0, #0x0
 4b4:	ldr	q1, [x0]
 4b8:	ldr	q0, [sp, #144]
 4bc:	bl	0 <__letf2>
 4c0:	cmp	w0, #0x0
 4c4:	b.le	4cc <__multc3+0x4cc>
 4c8:	mov	w19, #0x0                   	// #0
 4cc:	and	w0, w19, #0xff
 4d0:	eor	w0, w0, #0x1
 4d4:	and	w0, w0, #0xff
 4d8:	bl	0 <__floatsitf>
 4dc:	str	q0, [sp, #32]
 4e0:	ldr	x0, [sp, #32]
 4e4:	str	x0, [sp, #224]
 4e8:	ldr	x0, [sp, #40]
 4ec:	and	x1, x0, #0x7fffffffffffffff
 4f0:	ldr	x0, [sp, #232]
 4f4:	and	x0, x0, #0x8000000000000000
 4f8:	orr	x0, x1, x0
 4fc:	str	x0, [sp, #232]
 500:	ldr	q1, [sp, #272]
 504:	ldr	q0, [sp, #272]
 508:	bl	0 <__unordtf2>
 50c:	cmp	w0, #0x0
 510:	b.eq	538 <__multc3+0x538>  // b.none
 514:	ldr	x0, [sp, #280]
 518:	and	x0, x0, #0x8000000000000000
 51c:	stp	xzr, xzr, [sp, #272]
 520:	cmp	x0, #0x0
 524:	b.eq	538 <__multc3+0x538>  // b.none
 528:	adrp	x0, 0 <__multc3>
 52c:	add	x0, x0, #0x0
 530:	ldr	q0, [x0]
 534:	str	q0, [sp, #272]
 538:	ldr	q1, [sp, #256]
 53c:	ldr	q0, [sp, #256]
 540:	bl	0 <__unordtf2>
 544:	cmp	w0, #0x0
 548:	b.eq	570 <__multc3+0x570>  // b.none
 54c:	ldr	x0, [sp, #264]
 550:	and	x0, x0, #0x8000000000000000
 554:	stp	xzr, xzr, [sp, #256]
 558:	cmp	x0, #0x0
 55c:	b.eq	570 <__multc3+0x570>  // b.none
 560:	adrp	x0, 0 <__multc3>
 564:	add	x0, x0, #0x0
 568:	ldr	q0, [x0]
 56c:	str	q0, [sp, #256]
 570:	mov	w0, #0x1                   	// #1
 574:	str	w0, [sp, #396]
 578:	ldr	w0, [sp, #396]
 57c:	cmp	w0, #0x0
 580:	b.ne	80c <__multc3+0x80c>  // b.any
 584:	ldr	x0, [sp, #368]
 588:	str	x0, [sp, #160]
 58c:	ldr	x0, [sp, #376]
 590:	and	x0, x0, #0x7fffffffffffffff
 594:	str	x0, [sp, #168]
 598:	mov	w19, #0x1                   	// #1
 59c:	adrp	x0, 0 <__multc3>
 5a0:	add	x0, x0, #0x0
 5a4:	ldr	q1, [x0]
 5a8:	ldr	q0, [sp, #160]
 5ac:	bl	0 <__unordtf2>
 5b0:	cmp	w0, #0x0
 5b4:	b.ne	5d8 <__multc3+0x5d8>  // b.any
 5b8:	adrp	x0, 0 <__multc3>
 5bc:	add	x0, x0, #0x0
 5c0:	ldr	q1, [x0]
 5c4:	ldr	q0, [sp, #160]
 5c8:	bl	0 <__letf2>
 5cc:	cmp	w0, #0x0
 5d0:	b.le	5d8 <__multc3+0x5d8>
 5d4:	mov	w19, #0x0                   	// #0
 5d8:	and	w0, w19, #0xff
 5dc:	eor	w0, w0, #0x1
 5e0:	and	w0, w0, #0xff
 5e4:	cmp	w0, #0x0
 5e8:	b.ne	724 <__multc3+0x724>  // b.any
 5ec:	ldr	x0, [sp, #352]
 5f0:	str	x0, [sp, #176]
 5f4:	ldr	x0, [sp, #360]
 5f8:	and	x0, x0, #0x7fffffffffffffff
 5fc:	str	x0, [sp, #184]
 600:	mov	w19, #0x1                   	// #1
 604:	adrp	x0, 0 <__multc3>
 608:	add	x0, x0, #0x0
 60c:	ldr	q1, [x0]
 610:	ldr	q0, [sp, #176]
 614:	bl	0 <__unordtf2>
 618:	cmp	w0, #0x0
 61c:	b.ne	640 <__multc3+0x640>  // b.any
 620:	adrp	x0, 0 <__multc3>
 624:	add	x0, x0, #0x0
 628:	ldr	q1, [x0]
 62c:	ldr	q0, [sp, #176]
 630:	bl	0 <__letf2>
 634:	cmp	w0, #0x0
 638:	b.le	640 <__multc3+0x640>
 63c:	mov	w19, #0x0                   	// #0
 640:	and	w0, w19, #0xff
 644:	eor	w0, w0, #0x1
 648:	and	w0, w0, #0xff
 64c:	cmp	w0, #0x0
 650:	b.ne	724 <__multc3+0x724>  // b.any
 654:	ldr	x0, [sp, #336]
 658:	str	x0, [sp, #192]
 65c:	ldr	x0, [sp, #344]
 660:	and	x0, x0, #0x7fffffffffffffff
 664:	str	x0, [sp, #200]
 668:	mov	w19, #0x1                   	// #1
 66c:	adrp	x0, 0 <__multc3>
 670:	add	x0, x0, #0x0
 674:	ldr	q1, [x0]
 678:	ldr	q0, [sp, #192]
 67c:	bl	0 <__unordtf2>
 680:	cmp	w0, #0x0
 684:	b.ne	6a8 <__multc3+0x6a8>  // b.any
 688:	adrp	x0, 0 <__multc3>
 68c:	add	x0, x0, #0x0
 690:	ldr	q1, [x0]
 694:	ldr	q0, [sp, #192]
 698:	bl	0 <__letf2>
 69c:	cmp	w0, #0x0
 6a0:	b.le	6a8 <__multc3+0x6a8>
 6a4:	mov	w19, #0x0                   	// #0
 6a8:	and	w0, w19, #0xff
 6ac:	eor	w0, w0, #0x1
 6b0:	and	w0, w0, #0xff
 6b4:	cmp	w0, #0x0
 6b8:	b.ne	724 <__multc3+0x724>  // b.any
 6bc:	ldr	x0, [sp, #320]
 6c0:	str	x0, [sp, #208]
 6c4:	ldr	x0, [sp, #328]
 6c8:	and	x0, x0, #0x7fffffffffffffff
 6cc:	str	x0, [sp, #216]
 6d0:	mov	w19, #0x1                   	// #1
 6d4:	adrp	x0, 0 <__multc3>
 6d8:	add	x0, x0, #0x0
 6dc:	ldr	q1, [x0]
 6e0:	ldr	q0, [sp, #208]
 6e4:	bl	0 <__unordtf2>
 6e8:	cmp	w0, #0x0
 6ec:	b.ne	710 <__multc3+0x710>  // b.any
 6f0:	adrp	x0, 0 <__multc3>
 6f4:	add	x0, x0, #0x0
 6f8:	ldr	q1, [x0]
 6fc:	ldr	q0, [sp, #208]
 700:	bl	0 <__letf2>
 704:	cmp	w0, #0x0
 708:	b.le	710 <__multc3+0x710>
 70c:	mov	w19, #0x0                   	// #0
 710:	and	w0, w19, #0xff
 714:	eor	w0, w0, #0x1
 718:	and	w0, w0, #0xff
 71c:	cmp	w0, #0x0
 720:	b.eq	80c <__multc3+0x80c>  // b.none
 724:	ldr	q1, [sp, #272]
 728:	ldr	q0, [sp, #272]
 72c:	bl	0 <__unordtf2>
 730:	cmp	w0, #0x0
 734:	b.eq	75c <__multc3+0x75c>  // b.none
 738:	ldr	x0, [sp, #280]
 73c:	and	x0, x0, #0x8000000000000000
 740:	stp	xzr, xzr, [sp, #272]
 744:	cmp	x0, #0x0
 748:	b.eq	75c <__multc3+0x75c>  // b.none
 74c:	adrp	x0, 0 <__multc3>
 750:	add	x0, x0, #0x0
 754:	ldr	q0, [x0]
 758:	str	q0, [sp, #272]
 75c:	ldr	q1, [sp, #256]
 760:	ldr	q0, [sp, #256]
 764:	bl	0 <__unordtf2>
 768:	cmp	w0, #0x0
 76c:	b.eq	794 <__multc3+0x794>  // b.none
 770:	ldr	x0, [sp, #264]
 774:	and	x0, x0, #0x8000000000000000
 778:	stp	xzr, xzr, [sp, #256]
 77c:	cmp	x0, #0x0
 780:	b.eq	794 <__multc3+0x794>  // b.none
 784:	adrp	x0, 0 <__multc3>
 788:	add	x0, x0, #0x0
 78c:	ldr	q0, [x0]
 790:	str	q0, [sp, #256]
 794:	ldr	q1, [sp, #240]
 798:	ldr	q0, [sp, #240]
 79c:	bl	0 <__unordtf2>
 7a0:	cmp	w0, #0x0
 7a4:	b.eq	7cc <__multc3+0x7cc>  // b.none
 7a8:	ldr	x0, [sp, #248]
 7ac:	and	x0, x0, #0x8000000000000000
 7b0:	stp	xzr, xzr, [sp, #240]
 7b4:	cmp	x0, #0x0
 7b8:	b.eq	7cc <__multc3+0x7cc>  // b.none
 7bc:	adrp	x0, 0 <__multc3>
 7c0:	add	x0, x0, #0x0
 7c4:	ldr	q0, [x0]
 7c8:	str	q0, [sp, #240]
 7cc:	ldr	q1, [sp, #224]
 7d0:	ldr	q0, [sp, #224]
 7d4:	bl	0 <__unordtf2>
 7d8:	cmp	w0, #0x0
 7dc:	b.eq	804 <__multc3+0x804>  // b.none
 7e0:	ldr	x0, [sp, #232]
 7e4:	and	x0, x0, #0x8000000000000000
 7e8:	stp	xzr, xzr, [sp, #224]
 7ec:	cmp	x0, #0x0
 7f0:	b.eq	804 <__multc3+0x804>  // b.none
 7f4:	adrp	x0, 0 <__multc3>
 7f8:	add	x0, x0, #0x0
 7fc:	ldr	q0, [x0]
 800:	str	q0, [sp, #224]
 804:	mov	w0, #0x1                   	// #1
 808:	str	w0, [sp, #396]
 80c:	ldr	w0, [sp, #396]
 810:	cmp	w0, #0x0
 814:	b.eq	8b0 <__multc3+0x8b0>  // b.none
 818:	ldr	q1, [sp, #240]
 81c:	ldr	q0, [sp, #272]
 820:	bl	0 <__multf3>
 824:	str	q0, [sp, #32]
 828:	ldr	q1, [sp, #224]
 82c:	ldr	q0, [sp, #256]
 830:	bl	0 <__multf3>
 834:	mov	v1.16b, v0.16b
 838:	ldr	q0, [sp, #32]
 83c:	bl	0 <__subtf3>
 840:	adrp	x0, 0 <__multc3>
 844:	add	x0, x0, #0x0
 848:	ldr	q1, [x0]
 84c:	bl	0 <__multf3>
 850:	str	q0, [sp, #416]
 854:	ldr	q0, [sp, #400]
 858:	ldr	q2, [sp, #416]
 85c:	str	q2, [sp, #288]
 860:	str	q0, [sp, #304]
 864:	ldr	q1, [sp, #224]
 868:	ldr	q0, [sp, #272]
 86c:	bl	0 <__multf3>
 870:	str	q0, [sp, #32]
 874:	ldr	q1, [sp, #240]
 878:	ldr	q0, [sp, #256]
 87c:	bl	0 <__multf3>
 880:	mov	v1.16b, v0.16b
 884:	ldr	q0, [sp, #32]
 888:	bl	0 <__addtf3>
 88c:	adrp	x0, 0 <__multc3>
 890:	add	x0, x0, #0x0
 894:	ldr	q1, [x0]
 898:	bl	0 <__multf3>
 89c:	str	q0, [sp, #400]
 8a0:	ldr	q0, [sp, #400]
 8a4:	ldr	q2, [sp, #416]
 8a8:	str	q2, [sp, #288]
 8ac:	str	q0, [sp, #304]
 8b0:	ldr	q2, [sp, #416]
 8b4:	ldr	q0, [sp, #400]
 8b8:	mov	v4.16b, v2.16b
 8bc:	mov	v2.16b, v0.16b
 8c0:	mov	v0.16b, v4.16b
 8c4:	mov	v1.16b, v2.16b
 8c8:	ldr	x19, [sp, #16]
 8cc:	ldp	x29, x30, [sp], #432
 8d0:	ret

trunctfdf2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srcToRep>:
   0:	sub	sp, sp, #0x20
   4:	str	q0, [sp]
   8:	ldr	q0, [sp]
   c:	str	q0, [sp, #16]
  10:	ldp	x0, x1, [sp, #16]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <dstFromRep>:
  1c:	sub	sp, sp, #0x20
  20:	str	x0, [sp, #8]
  24:	ldr	x0, [sp, #8]
  28:	str	x0, [sp, #24]
  2c:	ldr	d0, [sp, #24]
  30:	add	sp, sp, #0x20
  34:	ret

0000000000000038 <__truncXfYf2__>:
  38:	sub	sp, sp, #0x2a0
  3c:	stp	x29, x30, [sp]
  40:	mov	x29, sp
  44:	stp	x19, x20, [sp, #16]
  48:	stp	x21, x22, [sp, #32]
  4c:	stp	x23, x24, [sp, #48]
  50:	stp	x25, x26, [sp, #64]
  54:	str	x27, [sp, #80]
  58:	str	q0, [sp, #240]
  5c:	mov	w0, #0x80                  	// #128
  60:	str	w0, [sp, #660]
  64:	mov	w1, #0x70                  	// #112
  68:	ldr	w0, [sp, #660]
  6c:	sub	w0, w0, w1
  70:	sub	w0, w0, #0x1
  74:	str	w0, [sp, #656]
  78:	ldr	w1, [sp, #656]
  7c:	mov	w0, #0x1                   	// #1
  80:	lsl	w0, w0, w1
  84:	sub	w0, w0, #0x1
  88:	str	w0, [sp, #652]
  8c:	ldr	w0, [sp, #652]
  90:	asr	w0, w0, #1
  94:	str	w0, [sp, #648]
  98:	mov	w2, #0x70                  	// #112
  9c:	sub	w3, w2, #0x40
  a0:	mov	x0, #0x1                   	// #1
  a4:	lsl	x8, x0, x3
  a8:	mov	x9, #0x0                   	// #0
  ac:	mov	x0, #0x1                   	// #1
  b0:	lsr	x1, x0, #1
  b4:	mov	w0, #0x3f                  	// #63
  b8:	sub	w0, w0, w2
  bc:	lsr	x1, x1, x0
  c0:	mov	x0, #0x0                   	// #0
  c4:	lsl	x0, x0, x2
  c8:	orr	x0, x0, x1
  cc:	str	x0, [sp, #632]
  d0:	mov	x0, #0x1                   	// #1
  d4:	lsl	x0, x0, x2
  d8:	str	x0, [sp, #624]
  dc:	ldr	x0, [sp, #632]
  e0:	cmp	w3, #0x0
  e4:	csel	x0, x0, x8, lt  // lt = tstop
  e8:	str	x0, [sp, #632]
  ec:	ldr	x0, [sp, #624]
  f0:	cmp	w3, #0x0
  f4:	csel	x0, x0, x9, lt  // lt = tstop
  f8:	str	x0, [sp, #624]
  fc:	add	x0, sp, #0x200
 100:	ldp	x0, x1, [x0, #112]
 104:	mov	x2, #0xffffffffffffffff    	// #-1
 108:	adds	x3, x0, x2
 10c:	mov	x2, #0xffffffffffffffff    	// #-1
 110:	adc	x0, x1, x2
 114:	mov	x14, x3
 118:	mov	x15, x0
 11c:	add	x0, sp, #0x200
 120:	stp	x14, x15, [x0, #96]
 124:	ldr	w0, [sp, #652]
 128:	sxtw	x0, w0
 12c:	mov	x6, x0
 130:	asr	x0, x0, #63
 134:	mov	x7, x0
 138:	mov	w2, #0x70                  	// #112
 13c:	sub	w3, w2, #0x40
 140:	lsl	x8, x6, x3
 144:	mov	x9, #0x0                   	// #0
 148:	lsr	x1, x6, #1
 14c:	mov	w0, #0x3f                  	// #63
 150:	sub	w0, w0, w2
 154:	lsr	x1, x1, x0
 158:	lsl	x0, x7, x2
 15c:	orr	x0, x0, x1
 160:	str	x0, [sp, #600]
 164:	lsl	x0, x6, x2
 168:	str	x0, [sp, #592]
 16c:	ldr	x0, [sp, #600]
 170:	cmp	w3, #0x0
 174:	csel	x0, x0, x8, lt  // lt = tstop
 178:	str	x0, [sp, #600]
 17c:	ldr	x0, [sp, #592]
 180:	cmp	w3, #0x0
 184:	csel	x0, x0, x9, lt  // lt = tstop
 188:	str	x0, [sp, #592]
 18c:	mov	w1, #0x70                  	// #112
 190:	ldr	w0, [sp, #656]
 194:	add	w2, w1, w0
 198:	sub	w3, w2, #0x40
 19c:	mov	x0, #0x1                   	// #1
 1a0:	lsl	x6, x0, x3
 1a4:	mov	x7, #0x0                   	// #0
 1a8:	mov	x0, #0x1                   	// #1
 1ac:	lsr	x1, x0, #1
 1b0:	mov	w0, #0x3f                  	// #63
 1b4:	sub	w0, w0, w2
 1b8:	lsr	x1, x1, x0
 1bc:	mov	x0, #0x0                   	// #0
 1c0:	lsl	x0, x0, x2
 1c4:	orr	x0, x0, x1
 1c8:	str	x0, [sp, #584]
 1cc:	mov	x0, #0x1                   	// #1
 1d0:	lsl	x0, x0, x2
 1d4:	str	x0, [sp, #576]
 1d8:	ldr	x0, [sp, #584]
 1dc:	cmp	w3, #0x0
 1e0:	csel	x0, x0, x6, lt  // lt = tstop
 1e4:	str	x0, [sp, #584]
 1e8:	ldr	x0, [sp, #576]
 1ec:	cmp	w3, #0x0
 1f0:	csel	x0, x0, x7, lt  // lt = tstop
 1f4:	str	x0, [sp, #576]
 1f8:	add	x0, sp, #0x200
 1fc:	ldp	x0, x1, [x0, #64]
 200:	mov	x2, #0xffffffffffffffff    	// #-1
 204:	adds	x3, x0, x2
 208:	mov	x2, #0xffffffffffffffff    	// #-1
 20c:	adc	x0, x1, x2
 210:	mov	x16, x3
 214:	mov	x17, x0
 218:	add	x0, sp, #0x200
 21c:	stp	x16, x17, [x0, #48]
 220:	mov	w1, #0x70                  	// #112
 224:	mov	w0, #0x34                  	// #52
 228:	sub	w2, w1, w0
 22c:	sub	w3, w2, #0x40
 230:	mov	x0, #0x1                   	// #1
 234:	lsl	x6, x0, x3
 238:	mov	x7, #0x0                   	// #0
 23c:	mov	x0, #0x1                   	// #1
 240:	lsr	x1, x0, #1
 244:	mov	w0, #0x3f                  	// #63
 248:	sub	w0, w0, w2
 24c:	lsr	x1, x1, x0
 250:	mov	x0, #0x0                   	// #0
 254:	lsl	x5, x0, x2
 258:	orr	x5, x1, x5
 25c:	mov	x0, #0x1                   	// #1
 260:	lsl	x4, x0, x2
 264:	cmp	w3, #0x0
 268:	csel	x5, x6, x5, ge  // ge = tcont
 26c:	cmp	w3, #0x0
 270:	csel	x4, x7, x4, ge  // ge = tcont
 274:	mov	x0, #0xffffffffffffffff    	// #-1
 278:	adds	x1, x4, x0
 27c:	mov	x0, #0xffffffffffffffff    	// #-1
 280:	adc	x0, x5, x0
 284:	mov	x18, x1
 288:	mov	x19, x0
 28c:	add	x0, sp, #0x200
 290:	stp	x18, x19, [x0, #32]
 294:	mov	w1, #0x70                  	// #112
 298:	mov	w0, #0x34                  	// #52
 29c:	sub	w0, w1, w0
 2a0:	sub	w2, w0, #0x1
 2a4:	sub	w3, w2, #0x40
 2a8:	mov	x0, #0x1                   	// #1
 2ac:	lsl	x4, x0, x3
 2b0:	mov	x5, #0x0                   	// #0
 2b4:	mov	x0, #0x1                   	// #1
 2b8:	lsr	x1, x0, #1
 2bc:	mov	w0, #0x3f                  	// #63
 2c0:	sub	w0, w0, w2
 2c4:	lsr	x1, x1, x0
 2c8:	mov	x0, #0x0                   	// #0
 2cc:	lsl	x0, x0, x2
 2d0:	orr	x0, x0, x1
 2d4:	str	x0, [sp, #536]
 2d8:	mov	x0, #0x1                   	// #1
 2dc:	lsl	x0, x0, x2
 2e0:	str	x0, [sp, #528]
 2e4:	ldr	x0, [sp, #536]
 2e8:	cmp	w3, #0x0
 2ec:	csel	x0, x0, x4, lt  // lt = tstop
 2f0:	str	x0, [sp, #536]
 2f4:	ldr	x0, [sp, #528]
 2f8:	cmp	w3, #0x0
 2fc:	csel	x0, x0, x5, lt  // lt = tstop
 300:	str	x0, [sp, #528]
 304:	mov	w0, #0x70                  	// #112
 308:	sub	w2, w0, #0x1
 30c:	sub	w3, w2, #0x40
 310:	mov	x0, #0x1                   	// #1
 314:	lsl	x4, x0, x3
 318:	mov	x5, #0x0                   	// #0
 31c:	mov	x0, #0x1                   	// #1
 320:	lsr	x1, x0, #1
 324:	mov	w0, #0x3f                  	// #63
 328:	sub	w0, w0, w2
 32c:	lsr	x1, x1, x0
 330:	mov	x0, #0x0                   	// #0
 334:	lsl	x0, x0, x2
 338:	orr	x0, x0, x1
 33c:	str	x0, [sp, #520]
 340:	mov	x0, #0x1                   	// #1
 344:	lsl	x0, x0, x2
 348:	str	x0, [sp, #512]
 34c:	ldr	x0, [sp, #520]
 350:	cmp	w3, #0x0
 354:	csel	x0, x0, x4, lt  // lt = tstop
 358:	str	x0, [sp, #520]
 35c:	ldr	x0, [sp, #512]
 360:	cmp	w3, #0x0
 364:	csel	x0, x0, x5, lt  // lt = tstop
 368:	str	x0, [sp, #512]
 36c:	add	x0, sp, #0x200
 370:	ldp	x0, x1, [x0]
 374:	mov	x2, #0xffffffffffffffff    	// #-1
 378:	adds	x3, x0, x2
 37c:	mov	x2, #0xffffffffffffffff    	// #-1
 380:	adc	x0, x1, x2
 384:	str	x3, [sp, #224]
 388:	str	x0, [sp, #232]
 38c:	ldp	x0, x1, [sp, #224]
 390:	stp	x0, x1, [sp, #496]
 394:	mov	w0, #0x40                  	// #64
 398:	str	w0, [sp, #492]
 39c:	mov	w0, #0x34                  	// #52
 3a0:	ldr	w1, [sp, #492]
 3a4:	sub	w0, w1, w0
 3a8:	sub	w0, w0, #0x1
 3ac:	str	w0, [sp, #488]
 3b0:	ldr	w0, [sp, #488]
 3b4:	mov	w1, #0x1                   	// #1
 3b8:	lsl	w0, w1, w0
 3bc:	sub	w0, w0, #0x1
 3c0:	str	w0, [sp, #484]
 3c4:	ldr	w0, [sp, #484]
 3c8:	asr	w0, w0, #1
 3cc:	str	w0, [sp, #480]
 3d0:	ldr	w0, [sp, #648]
 3d4:	add	w1, w0, #0x1
 3d8:	ldr	w0, [sp, #480]
 3dc:	sub	w0, w1, w0
 3e0:	str	w0, [sp, #476]
 3e4:	ldr	w1, [sp, #648]
 3e8:	ldr	w0, [sp, #484]
 3ec:	add	w1, w1, w0
 3f0:	ldr	w0, [sp, #480]
 3f4:	sub	w0, w1, w0
 3f8:	str	w0, [sp, #472]
 3fc:	ldr	w0, [sp, #476]
 400:	sxtw	x0, w0
 404:	mov	x10, x0
 408:	asr	x0, x0, #63
 40c:	mov	x11, x0
 410:	mov	w2, #0x70                  	// #112
 414:	sub	w3, w2, #0x40
 418:	lsl	x4, x10, x3
 41c:	mov	x5, #0x0                   	// #0
 420:	lsr	x1, x10, #1
 424:	mov	w0, #0x3f                  	// #63
 428:	sub	w0, w0, w2
 42c:	lsr	x1, x1, x0
 430:	lsl	x0, x11, x2
 434:	orr	x0, x0, x1
 438:	str	x0, [sp, #456]
 43c:	lsl	x0, x10, x2
 440:	str	x0, [sp, #448]
 444:	ldr	x0, [sp, #456]
 448:	cmp	w3, #0x0
 44c:	csel	x0, x0, x4, lt  // lt = tstop
 450:	str	x0, [sp, #456]
 454:	ldr	x0, [sp, #448]
 458:	cmp	w3, #0x0
 45c:	csel	x0, x0, x5, lt  // lt = tstop
 460:	str	x0, [sp, #448]
 464:	ldr	w0, [sp, #472]
 468:	sxtw	x0, w0
 46c:	mov	x12, x0
 470:	asr	x0, x0, #63
 474:	mov	x13, x0
 478:	mov	w1, #0x70                  	// #112
 47c:	sub	w2, w1, #0x40
 480:	lsl	x4, x12, x2
 484:	mov	x5, #0x0                   	// #0
 488:	lsr	x3, x12, #1
 48c:	mov	w0, #0x3f                  	// #63
 490:	sub	w0, w0, w1
 494:	lsr	x3, x3, x0
 498:	lsl	x0, x13, x1
 49c:	orr	x0, x0, x3
 4a0:	str	x0, [sp, #440]
 4a4:	lsl	x0, x12, x1
 4a8:	str	x0, [sp, #432]
 4ac:	ldr	x0, [sp, #440]
 4b0:	cmp	w2, #0x0
 4b4:	csel	x0, x0, x4, lt  // lt = tstop
 4b8:	str	x0, [sp, #440]
 4bc:	ldr	x0, [sp, #432]
 4c0:	cmp	w2, #0x0
 4c4:	csel	x0, x0, x5, lt  // lt = tstop
 4c8:	str	x0, [sp, #432]
 4cc:	mov	w0, #0x34                  	// #52
 4d0:	sub	w0, w0, #0x1
 4d4:	mov	x1, #0x1                   	// #1
 4d8:	lsl	x0, x1, x0
 4dc:	str	x0, [sp, #424]
 4e0:	ldr	x0, [sp, #424]
 4e4:	sub	x0, x0, #0x1
 4e8:	str	x0, [sp, #416]
 4ec:	ldr	q0, [sp, #240]
 4f0:	bl	0 <srcToRep>
 4f4:	stp	x0, x1, [sp, #400]
 4f8:	ldr	x1, [sp, #400]
 4fc:	ldr	x0, [sp, #560]
 500:	and	x0, x1, x0
 504:	str	x0, [sp, #384]
 508:	ldr	x1, [sp, #408]
 50c:	ldr	x0, [sp, #568]
 510:	and	x0, x1, x0
 514:	str	x0, [sp, #392]
 518:	ldr	x1, [sp, #400]
 51c:	ldr	x0, [sp, #576]
 520:	and	x0, x1, x0
 524:	str	x0, [sp, #368]
 528:	ldr	x1, [sp, #408]
 52c:	ldr	x0, [sp, #584]
 530:	and	x0, x1, x0
 534:	str	x0, [sp, #376]
 538:	ldp	x2, x3, [sp, #384]
 53c:	ldp	x0, x1, [sp, #448]
 540:	subs	x4, x2, x0
 544:	sbc	x0, x3, x1
 548:	str	x4, [sp, #144]
 54c:	str	x0, [sp, #152]
 550:	ldp	x2, x3, [sp, #384]
 554:	ldp	x0, x1, [sp, #432]
 558:	subs	x4, x2, x0
 55c:	sbc	x0, x3, x1
 560:	str	x4, [sp, #160]
 564:	str	x0, [sp, #168]
 568:	ldp	x2, x3, [sp, #160]
 56c:	mov	x4, x3
 570:	ldp	x0, x1, [sp, #144]
 574:	mov	x5, x1
 578:	cmp	x4, x5
 57c:	b.hi	598 <__truncXfYf2__+0x560>  // b.pmore
 580:	mov	x4, x3
 584:	mov	x5, x1
 588:	cmp	x4, x5
 58c:	b.ne	6cc <__truncXfYf2__+0x694>  // b.any
 590:	cmp	x2, x0
 594:	b.ls	6cc <__truncXfYf2__+0x694>  // b.plast
 598:	mov	w1, #0x70                  	// #112
 59c:	mov	w0, #0x34                  	// #52
 5a0:	sub	w0, w1, w0
 5a4:	sub	w1, w0, #0x40
 5a8:	ldr	x2, [sp, #392]
 5ac:	lsr	x2, x2, x1
 5b0:	mov	x5, #0x0                   	// #0
 5b4:	ldr	x3, [sp, #392]
 5b8:	lsl	x4, x3, #1
 5bc:	mov	w3, #0x3f                  	// #63
 5c0:	sub	w3, w3, w0
 5c4:	lsl	x3, x4, x3
 5c8:	ldr	x4, [sp, #384]
 5cc:	lsr	x4, x4, x0
 5d0:	str	x4, [sp, #96]
 5d4:	ldr	x4, [sp, #96]
 5d8:	orr	x3, x3, x4
 5dc:	str	x3, [sp, #96]
 5e0:	ldr	x3, [sp, #392]
 5e4:	lsr	x0, x3, x0
 5e8:	str	x0, [sp, #104]
 5ec:	cmp	w1, #0x0
 5f0:	ldr	x0, [sp, #96]
 5f4:	csel	x0, x2, x0, ge  // ge = tcont
 5f8:	str	x0, [sp, #96]
 5fc:	cmp	w1, #0x0
 600:	ldr	x0, [sp, #104]
 604:	csel	x0, x5, x0, ge  // ge = tcont
 608:	str	x0, [sp, #104]
 60c:	ldr	x0, [sp, #96]
 610:	str	x0, [sp, #664]
 614:	ldr	w1, [sp, #648]
 618:	ldr	w0, [sp, #480]
 61c:	sub	w0, w1, w0
 620:	sxtw	x1, w0
 624:	mov	w0, #0x34                  	// #52
 628:	lsl	x0, x1, x0
 62c:	ldr	x1, [sp, #664]
 630:	sub	x0, x1, x0
 634:	str	x0, [sp, #664]
 638:	ldr	x1, [sp, #384]
 63c:	ldr	x0, [sp, #544]
 640:	and	x0, x1, x0
 644:	str	x0, [sp, #272]
 648:	ldr	x1, [sp, #392]
 64c:	ldr	x0, [sp, #552]
 650:	and	x0, x1, x0
 654:	str	x0, [sp, #280]
 658:	ldr	x1, [sp, #280]
 65c:	ldr	x0, [sp, #536]
 660:	cmp	x1, x0
 664:	b.hi	688 <__truncXfYf2__+0x650>  // b.pmore
 668:	ldr	x1, [sp, #280]
 66c:	ldr	x0, [sp, #536]
 670:	cmp	x1, x0
 674:	b.ne	698 <__truncXfYf2__+0x660>  // b.any
 678:	ldr	x1, [sp, #272]
 67c:	ldr	x0, [sp, #528]
 680:	cmp	x1, x0
 684:	b.ls	698 <__truncXfYf2__+0x660>  // b.plast
 688:	ldr	x0, [sp, #664]
 68c:	add	x0, x0, #0x1
 690:	str	x0, [sp, #664]
 694:	b	ad4 <__truncXfYf2__+0xa9c>
 698:	ldr	x1, [sp, #272]
 69c:	ldr	x0, [sp, #528]
 6a0:	cmp	x1, x0
 6a4:	b.ne	ad4 <__truncXfYf2__+0xa9c>  // b.any
 6a8:	ldr	x1, [sp, #280]
 6ac:	ldr	x0, [sp, #536]
 6b0:	cmp	x1, x0
 6b4:	b.ne	ad4 <__truncXfYf2__+0xa9c>  // b.any
 6b8:	ldr	x0, [sp, #664]
 6bc:	add	x0, x0, #0x1
 6c0:	and	x0, x0, #0xfffffffffffffffe
 6c4:	str	x0, [sp, #664]
 6c8:	b	ad4 <__truncXfYf2__+0xa9c>
 6cc:	ldr	x1, [sp, #392]
 6d0:	ldr	x0, [sp, #600]
 6d4:	cmp	x1, x0
 6d8:	b.hi	6fc <__truncXfYf2__+0x6c4>  // b.pmore
 6dc:	ldr	x1, [sp, #392]
 6e0:	ldr	x0, [sp, #600]
 6e4:	cmp	x1, x0
 6e8:	b.ne	7d0 <__truncXfYf2__+0x798>  // b.any
 6ec:	ldr	x1, [sp, #384]
 6f0:	ldr	x0, [sp, #592]
 6f4:	cmp	x1, x0
 6f8:	b.ls	7d0 <__truncXfYf2__+0x798>  // b.plast
 6fc:	ldrsw	x1, [sp, #484]
 700:	mov	w0, #0x34                  	// #52
 704:	lsl	x0, x1, x0
 708:	str	x0, [sp, #664]
 70c:	ldr	x1, [sp, #664]
 710:	ldr	x0, [sp, #424]
 714:	orr	x0, x1, x0
 718:	str	x0, [sp, #664]
 71c:	ldr	x1, [sp, #384]
 720:	ldr	x0, [sp, #496]
 724:	and	x0, x1, x0
 728:	str	x0, [sp, #176]
 72c:	ldr	x1, [sp, #392]
 730:	ldr	x0, [sp, #504]
 734:	and	x0, x1, x0
 738:	str	x0, [sp, #184]
 73c:	mov	w1, #0x70                  	// #112
 740:	mov	w0, #0x34                  	// #52
 744:	sub	w0, w1, w0
 748:	sub	w1, w0, #0x40
 74c:	ldp	x6, x7, [sp, #176]
 750:	mov	x2, x7
 754:	lsr	x2, x2, x1
 758:	mov	x5, #0x0                   	// #0
 75c:	mov	x3, x7
 760:	lsl	x4, x3, #1
 764:	mov	w3, #0x3f                  	// #63
 768:	sub	w3, w3, w0
 76c:	lsl	x3, x4, x3
 770:	mov	x4, x6
 774:	lsr	x4, x4, x0
 778:	str	x4, [sp, #112]
 77c:	ldr	x4, [sp, #112]
 780:	orr	x3, x3, x4
 784:	str	x3, [sp, #112]
 788:	mov	x3, x7
 78c:	lsr	x0, x3, x0
 790:	str	x0, [sp, #120]
 794:	cmp	w1, #0x0
 798:	ldr	x0, [sp, #112]
 79c:	csel	x0, x2, x0, ge  // ge = tcont
 7a0:	str	x0, [sp, #112]
 7a4:	cmp	w1, #0x0
 7a8:	ldr	x0, [sp, #120]
 7ac:	csel	x0, x5, x0, ge  // ge = tcont
 7b0:	str	x0, [sp, #120]
 7b4:	ldr	x1, [sp, #112]
 7b8:	ldr	x0, [sp, #416]
 7bc:	and	x0, x1, x0
 7c0:	ldr	x1, [sp, #664]
 7c4:	orr	x0, x1, x0
 7c8:	str	x0, [sp, #664]
 7cc:	b	ad4 <__truncXfYf2__+0xa9c>
 7d0:	ldr	x1, [sp, #440]
 7d4:	ldr	x0, [sp, #392]
 7d8:	cmp	x1, x0
 7dc:	b.hi	814 <__truncXfYf2__+0x7dc>  // b.pmore
 7e0:	ldr	x1, [sp, #440]
 7e4:	ldr	x0, [sp, #392]
 7e8:	cmp	x1, x0
 7ec:	b.ne	800 <__truncXfYf2__+0x7c8>  // b.any
 7f0:	ldr	x1, [sp, #432]
 7f4:	ldr	x0, [sp, #384]
 7f8:	cmp	x1, x0
 7fc:	b.hi	814 <__truncXfYf2__+0x7dc>  // b.pmore
 800:	ldrsw	x1, [sp, #484]
 804:	mov	w0, #0x34                  	// #52
 808:	lsl	x0, x1, x0
 80c:	str	x0, [sp, #664]
 810:	b	ad4 <__truncXfYf2__+0xa9c>
 814:	mov	w0, #0x70                  	// #112
 818:	sub	w1, w0, #0x40
 81c:	ldr	x2, [sp, #392]
 820:	lsr	x2, x2, x1
 824:	mov	x5, #0x0                   	// #0
 828:	ldr	x3, [sp, #392]
 82c:	lsl	x4, x3, #1
 830:	mov	w3, #0x3f                  	// #63
 834:	sub	w3, w3, w0
 838:	lsl	x3, x4, x3
 83c:	ldr	x4, [sp, #384]
 840:	lsr	x4, x4, x0
 844:	str	x4, [sp, #128]
 848:	ldr	x4, [sp, #128]
 84c:	orr	x3, x3, x4
 850:	str	x3, [sp, #128]
 854:	ldr	x3, [sp, #392]
 858:	lsr	x0, x3, x0
 85c:	str	x0, [sp, #136]
 860:	cmp	w1, #0x0
 864:	ldr	x0, [sp, #128]
 868:	csel	x0, x2, x0, ge  // ge = tcont
 86c:	str	x0, [sp, #128]
 870:	cmp	w1, #0x0
 874:	ldr	x0, [sp, #136]
 878:	csel	x0, x5, x0, ge  // ge = tcont
 87c:	str	x0, [sp, #136]
 880:	ldr	w0, [sp, #128]
 884:	str	w0, [sp, #364]
 888:	ldr	w1, [sp, #648]
 88c:	ldr	w0, [sp, #480]
 890:	sub	w1, w1, w0
 894:	ldr	w0, [sp, #364]
 898:	sub	w0, w1, w0
 89c:	add	w0, w0, #0x1
 8a0:	str	w0, [sp, #360]
 8a4:	ldr	x1, [sp, #400]
 8a8:	ldr	x0, [sp, #608]
 8ac:	and	x0, x1, x0
 8b0:	str	x0, [sp, #192]
 8b4:	ldr	x1, [sp, #408]
 8b8:	ldr	x0, [sp, #616]
 8bc:	and	x0, x1, x0
 8c0:	str	x0, [sp, #200]
 8c4:	ldr	x0, [sp, #624]
 8c8:	ldp	x2, x3, [sp, #192]
 8cc:	mov	x1, x2
 8d0:	orr	x0, x0, x1
 8d4:	str	x0, [sp, #336]
 8d8:	ldr	x0, [sp, #632]
 8dc:	mov	x1, x3
 8e0:	orr	x0, x0, x1
 8e4:	str	x0, [sp, #344]
 8e8:	mov	w0, #0x70                  	// #112
 8ec:	ldr	w1, [sp, #360]
 8f0:	cmp	w1, w0
 8f4:	b.le	900 <__truncXfYf2__+0x8c8>
 8f8:	str	xzr, [sp, #664]
 8fc:	b	ad4 <__truncXfYf2__+0xa9c>
 900:	ldr	w1, [sp, #660]
 904:	ldr	w0, [sp, #360]
 908:	sub	w0, w1, w0
 90c:	sub	w1, w0, #0x40
 910:	ldr	x2, [sp, #336]
 914:	lsl	x2, x2, x1
 918:	mov	x5, #0x0                   	// #0
 91c:	ldr	x3, [sp, #336]
 920:	lsr	x4, x3, #1
 924:	mov	w3, #0x3f                  	// #63
 928:	sub	w3, w3, w0
 92c:	lsr	x3, x4, x3
 930:	ldr	x4, [sp, #344]
 934:	lsl	x23, x4, x0
 938:	orr	x23, x3, x23
 93c:	ldr	x3, [sp, #336]
 940:	lsl	x22, x3, x0
 944:	cmp	w1, #0x0
 948:	csel	x23, x2, x23, ge  // ge = tcont
 94c:	cmp	w1, #0x0
 950:	csel	x22, x5, x22, ge  // ge = tcont
 954:	orr	x0, x22, x23
 958:	cmp	x0, #0x0
 95c:	cset	w0, ne  // ne = any
 960:	strb	w0, [sp, #335]
 964:	ldr	w0, [sp, #360]
 968:	sub	w0, w0, #0x40
 96c:	ldr	x1, [sp, #344]
 970:	lsr	x1, x1, x0
 974:	mov	x5, #0x0                   	// #0
 978:	ldr	x2, [sp, #344]
 97c:	lsl	x3, x2, #1
 980:	mov	w4, #0x3f                  	// #63
 984:	ldr	w2, [sp, #360]
 988:	sub	w2, w4, w2
 98c:	lsl	x2, x3, x2
 990:	ldr	w3, [sp, #360]
 994:	ldr	x4, [sp, #336]
 998:	lsr	x20, x4, x3
 99c:	orr	x20, x2, x20
 9a0:	ldr	w2, [sp, #360]
 9a4:	ldr	x3, [sp, #344]
 9a8:	lsr	x21, x3, x2
 9ac:	cmp	w0, #0x0
 9b0:	csel	x20, x1, x20, ge  // ge = tcont
 9b4:	cmp	w0, #0x0
 9b8:	csel	x21, x5, x21, ge  // ge = tcont
 9bc:	ldrb	w0, [sp, #335]
 9c0:	and	x0, x0, #0xff
 9c4:	str	x0, [sp, #208]
 9c8:	str	xzr, [sp, #216]
 9cc:	ldp	x2, x3, [sp, #208]
 9d0:	mov	x0, x2
 9d4:	orr	x0, x20, x0
 9d8:	str	x0, [sp, #304]
 9dc:	mov	x0, x3
 9e0:	orr	x0, x21, x0
 9e4:	str	x0, [sp, #312]
 9e8:	mov	w1, #0x70                  	// #112
 9ec:	mov	w0, #0x34                  	// #52
 9f0:	sub	w0, w1, w0
 9f4:	sub	w1, w0, #0x40
 9f8:	ldr	x2, [sp, #312]
 9fc:	lsr	x2, x2, x1
 a00:	mov	x5, #0x0                   	// #0
 a04:	ldr	x3, [sp, #312]
 a08:	lsl	x4, x3, #1
 a0c:	mov	w3, #0x3f                  	// #63
 a10:	sub	w3, w3, w0
 a14:	lsl	x3, x4, x3
 a18:	ldr	x4, [sp, #304]
 a1c:	lsr	x26, x4, x0
 a20:	orr	x26, x3, x26
 a24:	ldr	x3, [sp, #312]
 a28:	lsr	x27, x3, x0
 a2c:	cmp	w1, #0x0
 a30:	csel	x26, x2, x26, ge  // ge = tcont
 a34:	cmp	w1, #0x0
 a38:	csel	x27, x5, x27, ge  // ge = tcont
 a3c:	mov	x0, x26
 a40:	str	x0, [sp, #664]
 a44:	ldr	x1, [sp, #304]
 a48:	ldr	x0, [sp, #544]
 a4c:	and	x0, x1, x0
 a50:	str	x0, [sp, #288]
 a54:	ldr	x1, [sp, #312]
 a58:	ldr	x0, [sp, #552]
 a5c:	and	x0, x1, x0
 a60:	str	x0, [sp, #296]
 a64:	ldr	x1, [sp, #296]
 a68:	ldr	x0, [sp, #536]
 a6c:	cmp	x1, x0
 a70:	b.hi	a94 <__truncXfYf2__+0xa5c>  // b.pmore
 a74:	ldr	x1, [sp, #296]
 a78:	ldr	x0, [sp, #536]
 a7c:	cmp	x1, x0
 a80:	b.ne	aa4 <__truncXfYf2__+0xa6c>  // b.any
 a84:	ldr	x1, [sp, #288]
 a88:	ldr	x0, [sp, #528]
 a8c:	cmp	x1, x0
 a90:	b.ls	aa4 <__truncXfYf2__+0xa6c>  // b.plast
 a94:	ldr	x0, [sp, #664]
 a98:	add	x0, x0, #0x1
 a9c:	str	x0, [sp, #664]
 aa0:	b	ad4 <__truncXfYf2__+0xa9c>
 aa4:	ldr	x1, [sp, #288]
 aa8:	ldr	x0, [sp, #528]
 aac:	cmp	x1, x0
 ab0:	b.ne	ad4 <__truncXfYf2__+0xa9c>  // b.any
 ab4:	ldr	x1, [sp, #296]
 ab8:	ldr	x0, [sp, #536]
 abc:	cmp	x1, x0
 ac0:	b.ne	ad4 <__truncXfYf2__+0xa9c>  // b.any
 ac4:	ldr	x0, [sp, #664]
 ac8:	add	x0, x0, #0x1
 acc:	and	x0, x0, #0xfffffffffffffffe
 ad0:	str	x0, [sp, #664]
 ad4:	ldr	w1, [sp, #660]
 ad8:	ldr	w0, [sp, #492]
 adc:	sub	w0, w1, w0
 ae0:	sub	w1, w0, #0x40
 ae4:	ldr	x2, [sp, #376]
 ae8:	lsr	x2, x2, x1
 aec:	mov	x5, #0x0                   	// #0
 af0:	ldr	x3, [sp, #376]
 af4:	lsl	x4, x3, #1
 af8:	mov	w3, #0x3f                  	// #63
 afc:	sub	w3, w3, w0
 b00:	lsl	x3, x4, x3
 b04:	ldr	x4, [sp, #368]
 b08:	lsr	x24, x4, x0
 b0c:	orr	x24, x3, x24
 b10:	ldr	x3, [sp, #376]
 b14:	lsr	x25, x3, x0
 b18:	cmp	w1, #0x0
 b1c:	csel	x24, x2, x24, ge  // ge = tcont
 b20:	cmp	w1, #0x0
 b24:	csel	x25, x5, x25, ge  // ge = tcont
 b28:	mov	x1, x24
 b2c:	ldr	x0, [sp, #664]
 b30:	orr	x0, x0, x1
 b34:	str	x0, [sp, #264]
 b38:	ldr	x0, [sp, #264]
 b3c:	bl	1c <dstFromRep>
 b40:	ldp	x19, x20, [sp, #16]
 b44:	ldp	x21, x22, [sp, #32]
 b48:	ldp	x23, x24, [sp, #48]
 b4c:	ldp	x25, x26, [sp, #64]
 b50:	ldr	x27, [sp, #80]
 b54:	ldp	x29, x30, [sp]
 b58:	add	sp, sp, #0x2a0
 b5c:	ret

0000000000000b60 <__trunctfdf2>:
 b60:	stp	x29, x30, [sp, #-32]!
 b64:	mov	x29, sp
 b68:	str	q0, [sp, #16]
 b6c:	ldr	q0, [sp, #16]
 b70:	bl	38 <__truncXfYf2__>
 b74:	ldp	x29, x30, [sp], #32
 b78:	ret

trunctfsf2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srcToRep>:
   0:	sub	sp, sp, #0x20
   4:	str	q0, [sp]
   8:	ldr	q0, [sp]
   c:	str	q0, [sp, #16]
  10:	ldp	x0, x1, [sp, #16]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <dstFromRep>:
  1c:	sub	sp, sp, #0x20
  20:	str	w0, [sp, #12]
  24:	ldr	w0, [sp, #12]
  28:	str	w0, [sp, #24]
  2c:	ldr	s0, [sp, #24]
  30:	add	sp, sp, #0x20
  34:	ret

0000000000000038 <__truncXfYf2__>:
  38:	sub	sp, sp, #0x2a0
  3c:	stp	x29, x30, [sp]
  40:	mov	x29, sp
  44:	stp	x19, x20, [sp, #16]
  48:	stp	x21, x22, [sp, #32]
  4c:	stp	x23, x24, [sp, #48]
  50:	stp	x25, x26, [sp, #64]
  54:	str	x27, [sp, #80]
  58:	str	q0, [sp, #240]
  5c:	mov	w0, #0x80                  	// #128
  60:	str	w0, [sp, #664]
  64:	mov	w1, #0x70                  	// #112
  68:	ldr	w0, [sp, #664]
  6c:	sub	w0, w0, w1
  70:	sub	w0, w0, #0x1
  74:	str	w0, [sp, #660]
  78:	ldr	w1, [sp, #660]
  7c:	mov	w0, #0x1                   	// #1
  80:	lsl	w0, w0, w1
  84:	sub	w0, w0, #0x1
  88:	str	w0, [sp, #656]
  8c:	ldr	w0, [sp, #656]
  90:	asr	w0, w0, #1
  94:	str	w0, [sp, #652]
  98:	mov	w2, #0x70                  	// #112
  9c:	sub	w3, w2, #0x40
  a0:	mov	x0, #0x1                   	// #1
  a4:	lsl	x8, x0, x3
  a8:	mov	x9, #0x0                   	// #0
  ac:	mov	x0, #0x1                   	// #1
  b0:	lsr	x1, x0, #1
  b4:	mov	w0, #0x3f                  	// #63
  b8:	sub	w0, w0, w2
  bc:	lsr	x1, x1, x0
  c0:	mov	x0, #0x0                   	// #0
  c4:	lsl	x0, x0, x2
  c8:	orr	x0, x0, x1
  cc:	str	x0, [sp, #632]
  d0:	mov	x0, #0x1                   	// #1
  d4:	lsl	x0, x0, x2
  d8:	str	x0, [sp, #624]
  dc:	ldr	x0, [sp, #632]
  e0:	cmp	w3, #0x0
  e4:	csel	x0, x0, x8, lt  // lt = tstop
  e8:	str	x0, [sp, #632]
  ec:	ldr	x0, [sp, #624]
  f0:	cmp	w3, #0x0
  f4:	csel	x0, x0, x9, lt  // lt = tstop
  f8:	str	x0, [sp, #624]
  fc:	add	x0, sp, #0x200
 100:	ldp	x0, x1, [x0, #112]
 104:	mov	x2, #0xffffffffffffffff    	// #-1
 108:	adds	x3, x0, x2
 10c:	mov	x2, #0xffffffffffffffff    	// #-1
 110:	adc	x0, x1, x2
 114:	mov	x14, x3
 118:	mov	x15, x0
 11c:	add	x0, sp, #0x200
 120:	stp	x14, x15, [x0, #96]
 124:	ldr	w0, [sp, #656]
 128:	sxtw	x0, w0
 12c:	mov	x6, x0
 130:	asr	x0, x0, #63
 134:	mov	x7, x0
 138:	mov	w2, #0x70                  	// #112
 13c:	sub	w3, w2, #0x40
 140:	lsl	x8, x6, x3
 144:	mov	x9, #0x0                   	// #0
 148:	lsr	x1, x6, #1
 14c:	mov	w0, #0x3f                  	// #63
 150:	sub	w0, w0, w2
 154:	lsr	x1, x1, x0
 158:	lsl	x0, x7, x2
 15c:	orr	x0, x0, x1
 160:	str	x0, [sp, #600]
 164:	lsl	x0, x6, x2
 168:	str	x0, [sp, #592]
 16c:	ldr	x0, [sp, #600]
 170:	cmp	w3, #0x0
 174:	csel	x0, x0, x8, lt  // lt = tstop
 178:	str	x0, [sp, #600]
 17c:	ldr	x0, [sp, #592]
 180:	cmp	w3, #0x0
 184:	csel	x0, x0, x9, lt  // lt = tstop
 188:	str	x0, [sp, #592]
 18c:	mov	w1, #0x70                  	// #112
 190:	ldr	w0, [sp, #660]
 194:	add	w2, w1, w0
 198:	sub	w3, w2, #0x40
 19c:	mov	x0, #0x1                   	// #1
 1a0:	lsl	x6, x0, x3
 1a4:	mov	x7, #0x0                   	// #0
 1a8:	mov	x0, #0x1                   	// #1
 1ac:	lsr	x1, x0, #1
 1b0:	mov	w0, #0x3f                  	// #63
 1b4:	sub	w0, w0, w2
 1b8:	lsr	x1, x1, x0
 1bc:	mov	x0, #0x0                   	// #0
 1c0:	lsl	x0, x0, x2
 1c4:	orr	x0, x0, x1
 1c8:	str	x0, [sp, #584]
 1cc:	mov	x0, #0x1                   	// #1
 1d0:	lsl	x0, x0, x2
 1d4:	str	x0, [sp, #576]
 1d8:	ldr	x0, [sp, #584]
 1dc:	cmp	w3, #0x0
 1e0:	csel	x0, x0, x6, lt  // lt = tstop
 1e4:	str	x0, [sp, #584]
 1e8:	ldr	x0, [sp, #576]
 1ec:	cmp	w3, #0x0
 1f0:	csel	x0, x0, x7, lt  // lt = tstop
 1f4:	str	x0, [sp, #576]
 1f8:	add	x0, sp, #0x200
 1fc:	ldp	x0, x1, [x0, #64]
 200:	mov	x2, #0xffffffffffffffff    	// #-1
 204:	adds	x3, x0, x2
 208:	mov	x2, #0xffffffffffffffff    	// #-1
 20c:	adc	x0, x1, x2
 210:	mov	x16, x3
 214:	mov	x17, x0
 218:	add	x0, sp, #0x200
 21c:	stp	x16, x17, [x0, #48]
 220:	mov	w1, #0x70                  	// #112
 224:	mov	w0, #0x17                  	// #23
 228:	sub	w2, w1, w0
 22c:	sub	w3, w2, #0x40
 230:	mov	x0, #0x1                   	// #1
 234:	lsl	x6, x0, x3
 238:	mov	x7, #0x0                   	// #0
 23c:	mov	x0, #0x1                   	// #1
 240:	lsr	x1, x0, #1
 244:	mov	w0, #0x3f                  	// #63
 248:	sub	w0, w0, w2
 24c:	lsr	x1, x1, x0
 250:	mov	x0, #0x0                   	// #0
 254:	lsl	x5, x0, x2
 258:	orr	x5, x1, x5
 25c:	mov	x0, #0x1                   	// #1
 260:	lsl	x4, x0, x2
 264:	cmp	w3, #0x0
 268:	csel	x5, x6, x5, ge  // ge = tcont
 26c:	cmp	w3, #0x0
 270:	csel	x4, x7, x4, ge  // ge = tcont
 274:	mov	x0, #0xffffffffffffffff    	// #-1
 278:	adds	x1, x4, x0
 27c:	mov	x0, #0xffffffffffffffff    	// #-1
 280:	adc	x0, x5, x0
 284:	mov	x18, x1
 288:	mov	x19, x0
 28c:	add	x0, sp, #0x200
 290:	stp	x18, x19, [x0, #32]
 294:	mov	w1, #0x70                  	// #112
 298:	mov	w0, #0x17                  	// #23
 29c:	sub	w0, w1, w0
 2a0:	sub	w2, w0, #0x1
 2a4:	sub	w3, w2, #0x40
 2a8:	mov	x0, #0x1                   	// #1
 2ac:	lsl	x4, x0, x3
 2b0:	mov	x5, #0x0                   	// #0
 2b4:	mov	x0, #0x1                   	// #1
 2b8:	lsr	x1, x0, #1
 2bc:	mov	w0, #0x3f                  	// #63
 2c0:	sub	w0, w0, w2
 2c4:	lsr	x1, x1, x0
 2c8:	mov	x0, #0x0                   	// #0
 2cc:	lsl	x0, x0, x2
 2d0:	orr	x0, x0, x1
 2d4:	str	x0, [sp, #536]
 2d8:	mov	x0, #0x1                   	// #1
 2dc:	lsl	x0, x0, x2
 2e0:	str	x0, [sp, #528]
 2e4:	ldr	x0, [sp, #536]
 2e8:	cmp	w3, #0x0
 2ec:	csel	x0, x0, x4, lt  // lt = tstop
 2f0:	str	x0, [sp, #536]
 2f4:	ldr	x0, [sp, #528]
 2f8:	cmp	w3, #0x0
 2fc:	csel	x0, x0, x5, lt  // lt = tstop
 300:	str	x0, [sp, #528]
 304:	mov	w0, #0x70                  	// #112
 308:	sub	w2, w0, #0x1
 30c:	sub	w3, w2, #0x40
 310:	mov	x0, #0x1                   	// #1
 314:	lsl	x4, x0, x3
 318:	mov	x5, #0x0                   	// #0
 31c:	mov	x0, #0x1                   	// #1
 320:	lsr	x1, x0, #1
 324:	mov	w0, #0x3f                  	// #63
 328:	sub	w0, w0, w2
 32c:	lsr	x1, x1, x0
 330:	mov	x0, #0x0                   	// #0
 334:	lsl	x0, x0, x2
 338:	orr	x0, x0, x1
 33c:	str	x0, [sp, #520]
 340:	mov	x0, #0x1                   	// #1
 344:	lsl	x0, x0, x2
 348:	str	x0, [sp, #512]
 34c:	ldr	x0, [sp, #520]
 350:	cmp	w3, #0x0
 354:	csel	x0, x0, x4, lt  // lt = tstop
 358:	str	x0, [sp, #520]
 35c:	ldr	x0, [sp, #512]
 360:	cmp	w3, #0x0
 364:	csel	x0, x0, x5, lt  // lt = tstop
 368:	str	x0, [sp, #512]
 36c:	add	x0, sp, #0x200
 370:	ldp	x0, x1, [x0]
 374:	mov	x2, #0xffffffffffffffff    	// #-1
 378:	adds	x3, x0, x2
 37c:	mov	x2, #0xffffffffffffffff    	// #-1
 380:	adc	x0, x1, x2
 384:	str	x3, [sp, #224]
 388:	str	x0, [sp, #232]
 38c:	ldp	x0, x1, [sp, #224]
 390:	stp	x0, x1, [sp, #496]
 394:	mov	w0, #0x20                  	// #32
 398:	str	w0, [sp, #492]
 39c:	mov	w0, #0x17                  	// #23
 3a0:	ldr	w1, [sp, #492]
 3a4:	sub	w0, w1, w0
 3a8:	sub	w0, w0, #0x1
 3ac:	str	w0, [sp, #488]
 3b0:	ldr	w0, [sp, #488]
 3b4:	mov	w1, #0x1                   	// #1
 3b8:	lsl	w0, w1, w0
 3bc:	sub	w0, w0, #0x1
 3c0:	str	w0, [sp, #484]
 3c4:	ldr	w0, [sp, #484]
 3c8:	asr	w0, w0, #1
 3cc:	str	w0, [sp, #480]
 3d0:	ldr	w0, [sp, #652]
 3d4:	add	w1, w0, #0x1
 3d8:	ldr	w0, [sp, #480]
 3dc:	sub	w0, w1, w0
 3e0:	str	w0, [sp, #476]
 3e4:	ldr	w1, [sp, #652]
 3e8:	ldr	w0, [sp, #484]
 3ec:	add	w1, w1, w0
 3f0:	ldr	w0, [sp, #480]
 3f4:	sub	w0, w1, w0
 3f8:	str	w0, [sp, #472]
 3fc:	ldr	w0, [sp, #476]
 400:	sxtw	x0, w0
 404:	mov	x10, x0
 408:	asr	x0, x0, #63
 40c:	mov	x11, x0
 410:	mov	w2, #0x70                  	// #112
 414:	sub	w3, w2, #0x40
 418:	lsl	x4, x10, x3
 41c:	mov	x5, #0x0                   	// #0
 420:	lsr	x1, x10, #1
 424:	mov	w0, #0x3f                  	// #63
 428:	sub	w0, w0, w2
 42c:	lsr	x1, x1, x0
 430:	lsl	x0, x11, x2
 434:	orr	x0, x0, x1
 438:	str	x0, [sp, #456]
 43c:	lsl	x0, x10, x2
 440:	str	x0, [sp, #448]
 444:	ldr	x0, [sp, #456]
 448:	cmp	w3, #0x0
 44c:	csel	x0, x0, x4, lt  // lt = tstop
 450:	str	x0, [sp, #456]
 454:	ldr	x0, [sp, #448]
 458:	cmp	w3, #0x0
 45c:	csel	x0, x0, x5, lt  // lt = tstop
 460:	str	x0, [sp, #448]
 464:	ldr	w0, [sp, #472]
 468:	sxtw	x0, w0
 46c:	mov	x12, x0
 470:	asr	x0, x0, #63
 474:	mov	x13, x0
 478:	mov	w1, #0x70                  	// #112
 47c:	sub	w2, w1, #0x40
 480:	lsl	x4, x12, x2
 484:	mov	x5, #0x0                   	// #0
 488:	lsr	x3, x12, #1
 48c:	mov	w0, #0x3f                  	// #63
 490:	sub	w0, w0, w1
 494:	lsr	x3, x3, x0
 498:	lsl	x0, x13, x1
 49c:	orr	x0, x0, x3
 4a0:	str	x0, [sp, #440]
 4a4:	lsl	x0, x12, x1
 4a8:	str	x0, [sp, #432]
 4ac:	ldr	x0, [sp, #440]
 4b0:	cmp	w2, #0x0
 4b4:	csel	x0, x0, x4, lt  // lt = tstop
 4b8:	str	x0, [sp, #440]
 4bc:	ldr	x0, [sp, #432]
 4c0:	cmp	w2, #0x0
 4c4:	csel	x0, x0, x5, lt  // lt = tstop
 4c8:	str	x0, [sp, #432]
 4cc:	mov	w0, #0x17                  	// #23
 4d0:	sub	w0, w0, #0x1
 4d4:	mov	w1, #0x1                   	// #1
 4d8:	lsl	w0, w1, w0
 4dc:	str	w0, [sp, #428]
 4e0:	ldr	w0, [sp, #428]
 4e4:	sub	w0, w0, #0x1
 4e8:	str	w0, [sp, #424]
 4ec:	ldr	q0, [sp, #240]
 4f0:	bl	0 <srcToRep>
 4f4:	stp	x0, x1, [sp, #400]
 4f8:	ldr	x1, [sp, #400]
 4fc:	ldr	x0, [sp, #560]
 500:	and	x0, x1, x0
 504:	str	x0, [sp, #384]
 508:	ldr	x1, [sp, #408]
 50c:	ldr	x0, [sp, #568]
 510:	and	x0, x1, x0
 514:	str	x0, [sp, #392]
 518:	ldr	x1, [sp, #400]
 51c:	ldr	x0, [sp, #576]
 520:	and	x0, x1, x0
 524:	str	x0, [sp, #368]
 528:	ldr	x1, [sp, #408]
 52c:	ldr	x0, [sp, #584]
 530:	and	x0, x1, x0
 534:	str	x0, [sp, #376]
 538:	ldp	x2, x3, [sp, #384]
 53c:	ldp	x0, x1, [sp, #448]
 540:	subs	x4, x2, x0
 544:	sbc	x0, x3, x1
 548:	str	x4, [sp, #144]
 54c:	str	x0, [sp, #152]
 550:	ldp	x2, x3, [sp, #384]
 554:	ldp	x0, x1, [sp, #432]
 558:	subs	x4, x2, x0
 55c:	sbc	x0, x3, x1
 560:	str	x4, [sp, #160]
 564:	str	x0, [sp, #168]
 568:	ldp	x2, x3, [sp, #160]
 56c:	mov	x4, x3
 570:	ldp	x0, x1, [sp, #144]
 574:	mov	x5, x1
 578:	cmp	x4, x5
 57c:	b.hi	598 <__truncXfYf2__+0x560>  // b.pmore
 580:	mov	x4, x3
 584:	mov	x5, x1
 588:	cmp	x4, x5
 58c:	b.ne	6cc <__truncXfYf2__+0x694>  // b.any
 590:	cmp	x2, x0
 594:	b.ls	6cc <__truncXfYf2__+0x694>  // b.plast
 598:	mov	w1, #0x70                  	// #112
 59c:	mov	w0, #0x17                  	// #23
 5a0:	sub	w0, w1, w0
 5a4:	sub	w1, w0, #0x40
 5a8:	ldr	x2, [sp, #392]
 5ac:	lsr	x2, x2, x1
 5b0:	mov	x5, #0x0                   	// #0
 5b4:	ldr	x3, [sp, #392]
 5b8:	lsl	x4, x3, #1
 5bc:	mov	w3, #0x3f                  	// #63
 5c0:	sub	w3, w3, w0
 5c4:	lsl	x3, x4, x3
 5c8:	ldr	x4, [sp, #384]
 5cc:	lsr	x4, x4, x0
 5d0:	str	x4, [sp, #96]
 5d4:	ldr	x4, [sp, #96]
 5d8:	orr	x3, x3, x4
 5dc:	str	x3, [sp, #96]
 5e0:	ldr	x3, [sp, #392]
 5e4:	lsr	x0, x3, x0
 5e8:	str	x0, [sp, #104]
 5ec:	cmp	w1, #0x0
 5f0:	ldr	x0, [sp, #96]
 5f4:	csel	x0, x2, x0, ge  // ge = tcont
 5f8:	str	x0, [sp, #96]
 5fc:	cmp	w1, #0x0
 600:	ldr	x0, [sp, #104]
 604:	csel	x0, x5, x0, ge  // ge = tcont
 608:	str	x0, [sp, #104]
 60c:	ldr	w0, [sp, #96]
 610:	str	w0, [sp, #668]
 614:	ldr	w1, [sp, #652]
 618:	ldr	w0, [sp, #480]
 61c:	sub	w0, w1, w0
 620:	mov	w1, w0
 624:	mov	w0, #0x17                  	// #23
 628:	lsl	w0, w1, w0
 62c:	ldr	w1, [sp, #668]
 630:	sub	w0, w1, w0
 634:	str	w0, [sp, #668]
 638:	ldr	x1, [sp, #384]
 63c:	ldr	x0, [sp, #544]
 640:	and	x0, x1, x0
 644:	str	x0, [sp, #272]
 648:	ldr	x1, [sp, #392]
 64c:	ldr	x0, [sp, #552]
 650:	and	x0, x1, x0
 654:	str	x0, [sp, #280]
 658:	ldr	x1, [sp, #280]
 65c:	ldr	x0, [sp, #536]
 660:	cmp	x1, x0
 664:	b.hi	688 <__truncXfYf2__+0x650>  // b.pmore
 668:	ldr	x1, [sp, #280]
 66c:	ldr	x0, [sp, #536]
 670:	cmp	x1, x0
 674:	b.ne	698 <__truncXfYf2__+0x660>  // b.any
 678:	ldr	x1, [sp, #272]
 67c:	ldr	x0, [sp, #528]
 680:	cmp	x1, x0
 684:	b.ls	698 <__truncXfYf2__+0x660>  // b.plast
 688:	ldr	w0, [sp, #668]
 68c:	add	w0, w0, #0x1
 690:	str	w0, [sp, #668]
 694:	b	ad4 <__truncXfYf2__+0xa9c>
 698:	ldr	x1, [sp, #272]
 69c:	ldr	x0, [sp, #528]
 6a0:	cmp	x1, x0
 6a4:	b.ne	ad4 <__truncXfYf2__+0xa9c>  // b.any
 6a8:	ldr	x1, [sp, #280]
 6ac:	ldr	x0, [sp, #536]
 6b0:	cmp	x1, x0
 6b4:	b.ne	ad4 <__truncXfYf2__+0xa9c>  // b.any
 6b8:	ldr	w0, [sp, #668]
 6bc:	add	w0, w0, #0x1
 6c0:	and	w0, w0, #0xfffffffe
 6c4:	str	w0, [sp, #668]
 6c8:	b	ad4 <__truncXfYf2__+0xa9c>
 6cc:	ldr	x1, [sp, #392]
 6d0:	ldr	x0, [sp, #600]
 6d4:	cmp	x1, x0
 6d8:	b.hi	6fc <__truncXfYf2__+0x6c4>  // b.pmore
 6dc:	ldr	x1, [sp, #392]
 6e0:	ldr	x0, [sp, #600]
 6e4:	cmp	x1, x0
 6e8:	b.ne	7d0 <__truncXfYf2__+0x798>  // b.any
 6ec:	ldr	x1, [sp, #384]
 6f0:	ldr	x0, [sp, #592]
 6f4:	cmp	x1, x0
 6f8:	b.ls	7d0 <__truncXfYf2__+0x798>  // b.plast
 6fc:	ldr	w1, [sp, #484]
 700:	mov	w0, #0x17                  	// #23
 704:	lsl	w0, w1, w0
 708:	str	w0, [sp, #668]
 70c:	ldr	w1, [sp, #668]
 710:	ldr	w0, [sp, #428]
 714:	orr	w0, w1, w0
 718:	str	w0, [sp, #668]
 71c:	ldr	x1, [sp, #384]
 720:	ldr	x0, [sp, #496]
 724:	and	x0, x1, x0
 728:	str	x0, [sp, #176]
 72c:	ldr	x1, [sp, #392]
 730:	ldr	x0, [sp, #504]
 734:	and	x0, x1, x0
 738:	str	x0, [sp, #184]
 73c:	mov	w1, #0x70                  	// #112
 740:	mov	w0, #0x17                  	// #23
 744:	sub	w0, w1, w0
 748:	sub	w1, w0, #0x40
 74c:	ldp	x6, x7, [sp, #176]
 750:	mov	x2, x7
 754:	lsr	x2, x2, x1
 758:	mov	x5, #0x0                   	// #0
 75c:	mov	x3, x7
 760:	lsl	x4, x3, #1
 764:	mov	w3, #0x3f                  	// #63
 768:	sub	w3, w3, w0
 76c:	lsl	x3, x4, x3
 770:	mov	x4, x6
 774:	lsr	x4, x4, x0
 778:	str	x4, [sp, #112]
 77c:	ldr	x4, [sp, #112]
 780:	orr	x3, x3, x4
 784:	str	x3, [sp, #112]
 788:	mov	x3, x7
 78c:	lsr	x0, x3, x0
 790:	str	x0, [sp, #120]
 794:	cmp	w1, #0x0
 798:	ldr	x0, [sp, #112]
 79c:	csel	x0, x2, x0, ge  // ge = tcont
 7a0:	str	x0, [sp, #112]
 7a4:	cmp	w1, #0x0
 7a8:	ldr	x0, [sp, #120]
 7ac:	csel	x0, x5, x0, ge  // ge = tcont
 7b0:	str	x0, [sp, #120]
 7b4:	ldr	w1, [sp, #112]
 7b8:	ldr	w0, [sp, #424]
 7bc:	and	w0, w1, w0
 7c0:	ldr	w1, [sp, #668]
 7c4:	orr	w0, w1, w0
 7c8:	str	w0, [sp, #668]
 7cc:	b	ad4 <__truncXfYf2__+0xa9c>
 7d0:	ldr	x1, [sp, #440]
 7d4:	ldr	x0, [sp, #392]
 7d8:	cmp	x1, x0
 7dc:	b.hi	814 <__truncXfYf2__+0x7dc>  // b.pmore
 7e0:	ldr	x1, [sp, #440]
 7e4:	ldr	x0, [sp, #392]
 7e8:	cmp	x1, x0
 7ec:	b.ne	800 <__truncXfYf2__+0x7c8>  // b.any
 7f0:	ldr	x1, [sp, #432]
 7f4:	ldr	x0, [sp, #384]
 7f8:	cmp	x1, x0
 7fc:	b.hi	814 <__truncXfYf2__+0x7dc>  // b.pmore
 800:	ldr	w1, [sp, #484]
 804:	mov	w0, #0x17                  	// #23
 808:	lsl	w0, w1, w0
 80c:	str	w0, [sp, #668]
 810:	b	ad4 <__truncXfYf2__+0xa9c>
 814:	mov	w0, #0x70                  	// #112
 818:	sub	w1, w0, #0x40
 81c:	ldr	x2, [sp, #392]
 820:	lsr	x2, x2, x1
 824:	mov	x5, #0x0                   	// #0
 828:	ldr	x3, [sp, #392]
 82c:	lsl	x4, x3, #1
 830:	mov	w3, #0x3f                  	// #63
 834:	sub	w3, w3, w0
 838:	lsl	x3, x4, x3
 83c:	ldr	x4, [sp, #384]
 840:	lsr	x4, x4, x0
 844:	str	x4, [sp, #128]
 848:	ldr	x4, [sp, #128]
 84c:	orr	x3, x3, x4
 850:	str	x3, [sp, #128]
 854:	ldr	x3, [sp, #392]
 858:	lsr	x0, x3, x0
 85c:	str	x0, [sp, #136]
 860:	cmp	w1, #0x0
 864:	ldr	x0, [sp, #128]
 868:	csel	x0, x2, x0, ge  // ge = tcont
 86c:	str	x0, [sp, #128]
 870:	cmp	w1, #0x0
 874:	ldr	x0, [sp, #136]
 878:	csel	x0, x5, x0, ge  // ge = tcont
 87c:	str	x0, [sp, #136]
 880:	ldr	w0, [sp, #128]
 884:	str	w0, [sp, #364]
 888:	ldr	w1, [sp, #652]
 88c:	ldr	w0, [sp, #480]
 890:	sub	w1, w1, w0
 894:	ldr	w0, [sp, #364]
 898:	sub	w0, w1, w0
 89c:	add	w0, w0, #0x1
 8a0:	str	w0, [sp, #360]
 8a4:	ldr	x1, [sp, #400]
 8a8:	ldr	x0, [sp, #608]
 8ac:	and	x0, x1, x0
 8b0:	str	x0, [sp, #192]
 8b4:	ldr	x1, [sp, #408]
 8b8:	ldr	x0, [sp, #616]
 8bc:	and	x0, x1, x0
 8c0:	str	x0, [sp, #200]
 8c4:	ldr	x0, [sp, #624]
 8c8:	ldp	x2, x3, [sp, #192]
 8cc:	mov	x1, x2
 8d0:	orr	x0, x0, x1
 8d4:	str	x0, [sp, #336]
 8d8:	ldr	x0, [sp, #632]
 8dc:	mov	x1, x3
 8e0:	orr	x0, x0, x1
 8e4:	str	x0, [sp, #344]
 8e8:	mov	w0, #0x70                  	// #112
 8ec:	ldr	w1, [sp, #360]
 8f0:	cmp	w1, w0
 8f4:	b.le	900 <__truncXfYf2__+0x8c8>
 8f8:	str	wzr, [sp, #668]
 8fc:	b	ad4 <__truncXfYf2__+0xa9c>
 900:	ldr	w1, [sp, #664]
 904:	ldr	w0, [sp, #360]
 908:	sub	w0, w1, w0
 90c:	sub	w1, w0, #0x40
 910:	ldr	x2, [sp, #336]
 914:	lsl	x2, x2, x1
 918:	mov	x5, #0x0                   	// #0
 91c:	ldr	x3, [sp, #336]
 920:	lsr	x4, x3, #1
 924:	mov	w3, #0x3f                  	// #63
 928:	sub	w3, w3, w0
 92c:	lsr	x3, x4, x3
 930:	ldr	x4, [sp, #344]
 934:	lsl	x23, x4, x0
 938:	orr	x23, x3, x23
 93c:	ldr	x3, [sp, #336]
 940:	lsl	x22, x3, x0
 944:	cmp	w1, #0x0
 948:	csel	x23, x2, x23, ge  // ge = tcont
 94c:	cmp	w1, #0x0
 950:	csel	x22, x5, x22, ge  // ge = tcont
 954:	orr	x0, x22, x23
 958:	cmp	x0, #0x0
 95c:	cset	w0, ne  // ne = any
 960:	strb	w0, [sp, #335]
 964:	ldr	w0, [sp, #360]
 968:	sub	w0, w0, #0x40
 96c:	ldr	x1, [sp, #344]
 970:	lsr	x1, x1, x0
 974:	mov	x5, #0x0                   	// #0
 978:	ldr	x2, [sp, #344]
 97c:	lsl	x3, x2, #1
 980:	mov	w4, #0x3f                  	// #63
 984:	ldr	w2, [sp, #360]
 988:	sub	w2, w4, w2
 98c:	lsl	x2, x3, x2
 990:	ldr	w3, [sp, #360]
 994:	ldr	x4, [sp, #336]
 998:	lsr	x20, x4, x3
 99c:	orr	x20, x2, x20
 9a0:	ldr	w2, [sp, #360]
 9a4:	ldr	x3, [sp, #344]
 9a8:	lsr	x21, x3, x2
 9ac:	cmp	w0, #0x0
 9b0:	csel	x20, x1, x20, ge  // ge = tcont
 9b4:	cmp	w0, #0x0
 9b8:	csel	x21, x5, x21, ge  // ge = tcont
 9bc:	ldrb	w0, [sp, #335]
 9c0:	and	x0, x0, #0xff
 9c4:	str	x0, [sp, #208]
 9c8:	str	xzr, [sp, #216]
 9cc:	ldp	x2, x3, [sp, #208]
 9d0:	mov	x0, x2
 9d4:	orr	x0, x20, x0
 9d8:	str	x0, [sp, #304]
 9dc:	mov	x0, x3
 9e0:	orr	x0, x21, x0
 9e4:	str	x0, [sp, #312]
 9e8:	mov	w1, #0x70                  	// #112
 9ec:	mov	w0, #0x17                  	// #23
 9f0:	sub	w0, w1, w0
 9f4:	sub	w1, w0, #0x40
 9f8:	ldr	x2, [sp, #312]
 9fc:	lsr	x2, x2, x1
 a00:	mov	x5, #0x0                   	// #0
 a04:	ldr	x3, [sp, #312]
 a08:	lsl	x4, x3, #1
 a0c:	mov	w3, #0x3f                  	// #63
 a10:	sub	w3, w3, w0
 a14:	lsl	x3, x4, x3
 a18:	ldr	x4, [sp, #304]
 a1c:	lsr	x26, x4, x0
 a20:	orr	x26, x3, x26
 a24:	ldr	x3, [sp, #312]
 a28:	lsr	x27, x3, x0
 a2c:	cmp	w1, #0x0
 a30:	csel	x26, x2, x26, ge  // ge = tcont
 a34:	cmp	w1, #0x0
 a38:	csel	x27, x5, x27, ge  // ge = tcont
 a3c:	mov	w0, w26
 a40:	str	w0, [sp, #668]
 a44:	ldr	x1, [sp, #304]
 a48:	ldr	x0, [sp, #544]
 a4c:	and	x0, x1, x0
 a50:	str	x0, [sp, #288]
 a54:	ldr	x1, [sp, #312]
 a58:	ldr	x0, [sp, #552]
 a5c:	and	x0, x1, x0
 a60:	str	x0, [sp, #296]
 a64:	ldr	x1, [sp, #296]
 a68:	ldr	x0, [sp, #536]
 a6c:	cmp	x1, x0
 a70:	b.hi	a94 <__truncXfYf2__+0xa5c>  // b.pmore
 a74:	ldr	x1, [sp, #296]
 a78:	ldr	x0, [sp, #536]
 a7c:	cmp	x1, x0
 a80:	b.ne	aa4 <__truncXfYf2__+0xa6c>  // b.any
 a84:	ldr	x1, [sp, #288]
 a88:	ldr	x0, [sp, #528]
 a8c:	cmp	x1, x0
 a90:	b.ls	aa4 <__truncXfYf2__+0xa6c>  // b.plast
 a94:	ldr	w0, [sp, #668]
 a98:	add	w0, w0, #0x1
 a9c:	str	w0, [sp, #668]
 aa0:	b	ad4 <__truncXfYf2__+0xa9c>
 aa4:	ldr	x1, [sp, #288]
 aa8:	ldr	x0, [sp, #528]
 aac:	cmp	x1, x0
 ab0:	b.ne	ad4 <__truncXfYf2__+0xa9c>  // b.any
 ab4:	ldr	x1, [sp, #296]
 ab8:	ldr	x0, [sp, #536]
 abc:	cmp	x1, x0
 ac0:	b.ne	ad4 <__truncXfYf2__+0xa9c>  // b.any
 ac4:	ldr	w0, [sp, #668]
 ac8:	add	w0, w0, #0x1
 acc:	and	w0, w0, #0xfffffffe
 ad0:	str	w0, [sp, #668]
 ad4:	ldr	w1, [sp, #664]
 ad8:	ldr	w0, [sp, #492]
 adc:	sub	w0, w1, w0
 ae0:	sub	w1, w0, #0x40
 ae4:	ldr	x2, [sp, #376]
 ae8:	lsr	x2, x2, x1
 aec:	mov	x5, #0x0                   	// #0
 af0:	ldr	x3, [sp, #376]
 af4:	lsl	x4, x3, #1
 af8:	mov	w3, #0x3f                  	// #63
 afc:	sub	w3, w3, w0
 b00:	lsl	x3, x4, x3
 b04:	ldr	x4, [sp, #368]
 b08:	lsr	x24, x4, x0
 b0c:	orr	x24, x3, x24
 b10:	ldr	x3, [sp, #376]
 b14:	lsr	x25, x3, x0
 b18:	cmp	w1, #0x0
 b1c:	csel	x24, x2, x24, ge  // ge = tcont
 b20:	cmp	w1, #0x0
 b24:	csel	x25, x5, x25, ge  // ge = tcont
 b28:	mov	w1, w24
 b2c:	ldr	w0, [sp, #668]
 b30:	orr	w0, w0, w1
 b34:	str	w0, [sp, #268]
 b38:	ldr	w0, [sp, #268]
 b3c:	bl	1c <dstFromRep>
 b40:	ldp	x19, x20, [sp, #16]
 b44:	ldp	x21, x22, [sp, #32]
 b48:	ldp	x23, x24, [sp, #48]
 b4c:	ldp	x25, x26, [sp, #64]
 b50:	ldr	x27, [sp, #80]
 b54:	ldp	x29, x30, [sp]
 b58:	add	sp, sp, #0x2a0
 b5c:	ret

0000000000000b60 <__trunctfsf2>:
 b60:	stp	x29, x30, [sp, #-32]!
 b64:	mov	x29, sp
 b68:	str	q0, [sp, #16]
 b6c:	ldr	q0, [sp, #16]
 b70:	bl	38 <__truncXfYf2__>
 b74:	ldp	x29, x30, [sp], #32
 b78:	ret

absvdi2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__absvdi2>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	mov	w0, #0x40                  	// #64
  10:	str	w0, [sp, #44]
  14:	ldr	w0, [sp, #44]
  18:	sub	w0, w0, #0x1
  1c:	mov	x1, #0x1                   	// #1
  20:	lsl	x0, x1, x0
  24:	ldr	x1, [sp, #24]
  28:	cmp	x1, x0
  2c:	b.ne	48 <__absvdi2+0x48>  // b.any
  30:	adrp	x0, 0 <__absvdi2>
  34:	add	x2, x0, #0x0
  38:	mov	w1, #0x16                  	// #22
  3c:	adrp	x0, 0 <__absvdi2>
  40:	add	x0, x0, #0x0
  44:	bl	0 <__compilerrt_abort_impl>
  48:	ldr	w0, [sp, #44]
  4c:	sub	w0, w0, #0x1
  50:	ldr	x1, [sp, #24]
  54:	asr	x0, x1, x0
  58:	str	x0, [sp, #32]
  5c:	ldr	x1, [sp, #24]
  60:	ldr	x0, [sp, #32]
  64:	eor	x1, x1, x0
  68:	ldr	x0, [sp, #32]
  6c:	sub	x0, x1, x0
  70:	ldp	x29, x30, [sp], #48
  74:	ret

absvsi2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__absvsi2>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	w0, [sp, #28]
   c:	mov	w0, #0x20                  	// #32
  10:	str	w0, [sp, #44]
  14:	ldr	w0, [sp, #44]
  18:	sub	w0, w0, #0x1
  1c:	mov	w1, #0x1                   	// #1
  20:	lsl	w0, w1, w0
  24:	ldr	w1, [sp, #28]
  28:	cmp	w1, w0
  2c:	b.ne	48 <__absvsi2+0x48>  // b.any
  30:	adrp	x0, 0 <__absvsi2>
  34:	add	x2, x0, #0x0
  38:	mov	w1, #0x16                  	// #22
  3c:	adrp	x0, 0 <__absvsi2>
  40:	add	x0, x0, #0x0
  44:	bl	0 <__compilerrt_abort_impl>
  48:	ldr	w0, [sp, #44]
  4c:	sub	w0, w0, #0x1
  50:	ldr	w1, [sp, #28]
  54:	asr	w0, w1, w0
  58:	str	w0, [sp, #40]
  5c:	ldr	w1, [sp, #28]
  60:	ldr	w0, [sp, #40]
  64:	eor	w1, w1, w0
  68:	ldr	w0, [sp, #40]
  6c:	sub	w0, w1, w0
  70:	ldp	x29, x30, [sp], #48
  74:	ret

absvti2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__absvti2>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x0, x1, [sp, #16]
   c:	mov	w0, #0x80                  	// #128
  10:	str	w0, [sp, #60]
  14:	ldr	w0, [sp, #60]
  18:	sub	w0, w0, #0x1
  1c:	sub	w1, w0, #0x40
  20:	mov	x6, #0x1                   	// #1
  24:	lsl	x6, x6, x1
  28:	mov	x9, #0x0                   	// #0
  2c:	mov	x7, #0x1                   	// #1
  30:	lsr	x8, x7, #1
  34:	mov	w7, #0x3f                  	// #63
  38:	sub	w7, w7, w0
  3c:	lsr	x7, x8, x7
  40:	mov	x8, #0x0                   	// #0
  44:	lsl	x3, x8, x0
  48:	orr	x3, x7, x3
  4c:	mov	x7, #0x1                   	// #1
  50:	lsl	x2, x7, x0
  54:	cmp	w1, #0x0
  58:	csel	x3, x6, x3, ge  // ge = tcont
  5c:	cmp	w1, #0x0
  60:	csel	x2, x9, x2, ge  // ge = tcont
  64:	ldr	x0, [sp, #16]
  68:	cmp	x0, x2
  6c:	b.ne	94 <__absvti2+0x94>  // b.any
  70:	ldr	x0, [sp, #24]
  74:	cmp	x0, x3
  78:	b.ne	94 <__absvti2+0x94>  // b.any
  7c:	adrp	x0, 0 <__absvti2>
  80:	add	x2, x0, #0x0
  84:	mov	w1, #0x18                  	// #24
  88:	adrp	x0, 0 <__absvti2>
  8c:	add	x0, x0, #0x0
  90:	bl	0 <__compilerrt_abort_impl>
  94:	ldr	w0, [sp, #60]
  98:	sub	w0, w0, #0x1
  9c:	sub	w1, w0, #0x40
  a0:	ldr	x2, [sp, #24]
  a4:	asr	x3, x2, x1
  a8:	ldr	x2, [sp, #24]
  ac:	asr	x2, x2, #63
  b0:	ldr	x6, [sp, #24]
  b4:	lsl	x7, x6, #1
  b8:	mov	w6, #0x3f                  	// #63
  bc:	sub	w6, w6, w0
  c0:	lsl	x6, x7, x6
  c4:	ldr	x7, [sp, #16]
  c8:	lsr	x7, x7, x0
  cc:	orr	x6, x7, x6
  d0:	str	x6, [sp, #32]
  d4:	ldr	x6, [sp, #24]
  d8:	asr	x0, x6, x0
  dc:	str	x0, [sp, #40]
  e0:	ldr	x0, [sp, #32]
  e4:	cmp	w1, #0x0
  e8:	csel	x0, x0, x3, lt  // lt = tstop
  ec:	str	x0, [sp, #32]
  f0:	ldr	x0, [sp, #40]
  f4:	cmp	w1, #0x0
  f8:	csel	x0, x0, x2, lt  // lt = tstop
  fc:	str	x0, [sp, #40]
 100:	ldr	x1, [sp, #16]
 104:	ldr	x0, [sp, #32]
 108:	eor	x4, x1, x0
 10c:	ldr	x1, [sp, #24]
 110:	ldr	x0, [sp, #40]
 114:	eor	x5, x1, x0
 118:	ldp	x0, x1, [sp, #32]
 11c:	subs	x2, x4, x0
 120:	sbc	x0, x5, x1
 124:	mov	x10, x2
 128:	mov	x11, x0
 12c:	mov	x0, x10
 130:	mov	x1, x11
 134:	ldp	x29, x30, [sp], #64
 138:	ret

adddf3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <rep_clz>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	clz	x0, x0
  10:	add	sp, sp, #0x10
  14:	ret

0000000000000018 <toRep>:
  18:	sub	sp, sp, #0x20
  1c:	str	d0, [sp, #8]
  20:	ldr	d0, [sp, #8]
  24:	str	d0, [sp, #24]
  28:	ldr	x0, [sp, #24]
  2c:	add	sp, sp, #0x20
  30:	ret

0000000000000034 <fromRep>:
  34:	sub	sp, sp, #0x20
  38:	str	x0, [sp, #8]
  3c:	ldr	x0, [sp, #8]
  40:	str	x0, [sp, #24]
  44:	ldr	d0, [sp, #24]
  48:	add	sp, sp, #0x20
  4c:	ret

0000000000000050 <normalize>:
  50:	stp	x29, x30, [sp, #-64]!
  54:	mov	x29, sp
  58:	str	x19, [sp, #16]
  5c:	str	x0, [sp, #40]
  60:	ldr	x0, [sp, #40]
  64:	ldr	x0, [x0]
  68:	bl	0 <rep_clz>
  6c:	mov	w19, w0
  70:	mov	x0, #0x10000000000000      	// #4503599627370496
  74:	bl	0 <rep_clz>
  78:	sub	w0, w19, w0
  7c:	str	w0, [sp, #60]
  80:	ldr	x0, [sp, #40]
  84:	ldr	x1, [x0]
  88:	ldr	w0, [sp, #60]
  8c:	lsl	x1, x1, x0
  90:	ldr	x0, [sp, #40]
  94:	str	x1, [x0]
  98:	mov	w1, #0x1                   	// #1
  9c:	ldr	w0, [sp, #60]
  a0:	sub	w0, w1, w0
  a4:	ldr	x19, [sp, #16]
  a8:	ldp	x29, x30, [sp], #64
  ac:	ret

00000000000000b0 <__addXf3__>:
  b0:	stp	x29, x30, [sp, #-160]!
  b4:	mov	x29, sp
  b8:	str	x19, [sp, #16]
  bc:	str	d0, [sp, #40]
  c0:	str	d1, [sp, #32]
  c4:	ldr	d0, [sp, #40]
  c8:	bl	18 <toRep>
  cc:	str	x0, [sp, #152]
  d0:	ldr	d0, [sp, #32]
  d4:	bl	18 <toRep>
  d8:	str	x0, [sp, #144]
  dc:	ldr	x0, [sp, #152]
  e0:	and	x0, x0, #0x7fffffffffffffff
  e4:	str	x0, [sp, #120]
  e8:	ldr	x0, [sp, #144]
  ec:	and	x0, x0, #0x7fffffffffffffff
  f0:	str	x0, [sp, #112]
  f4:	ldr	x0, [sp, #120]
  f8:	sub	x1, x0, #0x1
  fc:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 100:	cmp	x1, x0
 104:	b.cs	11c <__addXf3__+0x6c>  // b.hs, b.nlast
 108:	ldr	x0, [sp, #112]
 10c:	sub	x1, x0, #0x1
 110:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 114:	cmp	x1, x0
 118:	b.cc	218 <__addXf3__+0x168>  // b.lo, b.ul, b.last
 11c:	ldr	x1, [sp, #120]
 120:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 124:	cmp	x1, x0
 128:	b.ls	140 <__addXf3__+0x90>  // b.plast
 12c:	ldr	d0, [sp, #40]
 130:	bl	18 <toRep>
 134:	orr	x0, x0, #0x8000000000000
 138:	bl	34 <fromRep>
 13c:	b	5dc <__addXf3__+0x52c>
 140:	ldr	x1, [sp, #112]
 144:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 148:	cmp	x1, x0
 14c:	b.ls	164 <__addXf3__+0xb4>  // b.plast
 150:	ldr	d0, [sp, #32]
 154:	bl	18 <toRep>
 158:	orr	x0, x0, #0x8000000000000
 15c:	bl	34 <fromRep>
 160:	b	5dc <__addXf3__+0x52c>
 164:	ldr	x1, [sp, #120]
 168:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 16c:	cmp	x1, x0
 170:	b.ne	1ac <__addXf3__+0xfc>  // b.any
 174:	ldr	d0, [sp, #40]
 178:	bl	18 <toRep>
 17c:	mov	x19, x0
 180:	ldr	d0, [sp, #32]
 184:	bl	18 <toRep>
 188:	eor	x1, x19, x0
 18c:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 190:	cmp	x1, x0
 194:	b.ne	1a4 <__addXf3__+0xf4>  // b.any
 198:	mov	x0, #0x7ff8000000000000    	// #9221120237041090560
 19c:	bl	34 <fromRep>
 1a0:	b	5dc <__addXf3__+0x52c>
 1a4:	ldr	d0, [sp, #40]
 1a8:	b	5dc <__addXf3__+0x52c>
 1ac:	ldr	x1, [sp, #112]
 1b0:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 1b4:	cmp	x1, x0
 1b8:	b.ne	1c4 <__addXf3__+0x114>  // b.any
 1bc:	ldr	d0, [sp, #32]
 1c0:	b	5dc <__addXf3__+0x52c>
 1c4:	ldr	x0, [sp, #120]
 1c8:	cmp	x0, #0x0
 1cc:	b.ne	204 <__addXf3__+0x154>  // b.any
 1d0:	ldr	x0, [sp, #112]
 1d4:	cmp	x0, #0x0
 1d8:	b.ne	1fc <__addXf3__+0x14c>  // b.any
 1dc:	ldr	d0, [sp, #40]
 1e0:	bl	18 <toRep>
 1e4:	mov	x19, x0
 1e8:	ldr	d0, [sp, #32]
 1ec:	bl	18 <toRep>
 1f0:	and	x0, x19, x0
 1f4:	bl	34 <fromRep>
 1f8:	b	5dc <__addXf3__+0x52c>
 1fc:	ldr	d0, [sp, #32]
 200:	b	5dc <__addXf3__+0x52c>
 204:	ldr	x0, [sp, #112]
 208:	cmp	x0, #0x0
 20c:	b.ne	218 <__addXf3__+0x168>  // b.any
 210:	ldr	d0, [sp, #40]
 214:	b	5dc <__addXf3__+0x52c>
 218:	ldr	x1, [sp, #112]
 21c:	ldr	x0, [sp, #120]
 220:	cmp	x1, x0
 224:	b.ls	240 <__addXf3__+0x190>  // b.plast
 228:	ldr	x0, [sp, #152]
 22c:	str	x0, [sp, #104]
 230:	ldr	x0, [sp, #144]
 234:	str	x0, [sp, #152]
 238:	ldr	x0, [sp, #104]
 23c:	str	x0, [sp, #144]
 240:	ldr	x0, [sp, #152]
 244:	lsr	x0, x0, #52
 248:	and	w0, w0, #0x7ff
 24c:	str	w0, [sp, #140]
 250:	ldr	x0, [sp, #144]
 254:	lsr	x0, x0, #52
 258:	and	w0, w0, #0x7ff
 25c:	str	w0, [sp, #136]
 260:	ldr	x0, [sp, #152]
 264:	and	x0, x0, #0xfffffffffffff
 268:	str	x0, [sp, #56]
 26c:	ldr	x0, [sp, #144]
 270:	and	x0, x0, #0xfffffffffffff
 274:	str	x0, [sp, #48]
 278:	ldr	w0, [sp, #140]
 27c:	cmp	w0, #0x0
 280:	b.ne	290 <__addXf3__+0x1e0>  // b.any
 284:	add	x0, sp, #0x38
 288:	bl	50 <normalize>
 28c:	str	w0, [sp, #140]
 290:	ldr	w0, [sp, #136]
 294:	cmp	w0, #0x0
 298:	b.ne	2a8 <__addXf3__+0x1f8>  // b.any
 29c:	add	x0, sp, #0x30
 2a0:	bl	50 <normalize>
 2a4:	str	w0, [sp, #136]
 2a8:	ldr	x0, [sp, #152]
 2ac:	and	x0, x0, #0x8000000000000000
 2b0:	str	x0, [sp, #96]
 2b4:	ldr	x1, [sp, #152]
 2b8:	ldr	x0, [sp, #144]
 2bc:	eor	x0, x1, x0
 2c0:	and	x0, x0, #0x8000000000000000
 2c4:	cmp	x0, #0x0
 2c8:	cset	w0, ne  // ne = any
 2cc:	strb	w0, [sp, #95]
 2d0:	ldr	x0, [sp, #56]
 2d4:	lsl	x0, x0, #3
 2d8:	orr	x0, x0, #0x80000000000000
 2dc:	str	x0, [sp, #56]
 2e0:	ldr	x0, [sp, #48]
 2e4:	lsl	x0, x0, #3
 2e8:	orr	x0, x0, #0x80000000000000
 2ec:	str	x0, [sp, #48]
 2f0:	ldr	w1, [sp, #140]
 2f4:	ldr	w0, [sp, #136]
 2f8:	sub	w0, w1, w0
 2fc:	str	w0, [sp, #88]
 300:	ldr	w0, [sp, #88]
 304:	cmp	w0, #0x0
 308:	b.eq	35c <__addXf3__+0x2ac>  // b.none
 30c:	ldr	w0, [sp, #88]
 310:	cmp	w0, #0x3f
 314:	b.hi	354 <__addXf3__+0x2a4>  // b.pmore
 318:	ldr	x1, [sp, #48]
 31c:	mov	w2, #0x40                  	// #64
 320:	ldr	w0, [sp, #88]
 324:	sub	w0, w2, w0
 328:	lsl	x0, x1, x0
 32c:	cmp	x0, #0x0
 330:	cset	w0, ne  // ne = any
 334:	strb	w0, [sp, #87]
 338:	ldr	x1, [sp, #48]
 33c:	ldr	w0, [sp, #88]
 340:	lsr	x1, x1, x0
 344:	ldrb	w0, [sp, #87]
 348:	orr	x0, x1, x0
 34c:	str	x0, [sp, #48]
 350:	b	35c <__addXf3__+0x2ac>
 354:	mov	x0, #0x1                   	// #1
 358:	str	x0, [sp, #48]
 35c:	ldrb	w0, [sp, #95]
 360:	cmp	w0, #0x0
 364:	b.eq	3e0 <__addXf3__+0x330>  // b.none
 368:	ldr	x1, [sp, #56]
 36c:	ldr	x0, [sp, #48]
 370:	sub	x0, x1, x0
 374:	str	x0, [sp, #56]
 378:	ldr	x0, [sp, #56]
 37c:	cmp	x0, #0x0
 380:	b.ne	390 <__addXf3__+0x2e0>  // b.any
 384:	mov	x0, #0x0                   	// #0
 388:	bl	34 <fromRep>
 38c:	b	5dc <__addXf3__+0x52c>
 390:	ldr	x1, [sp, #56]
 394:	mov	x0, #0x7fffffffffffff      	// #36028797018963967
 398:	cmp	x1, x0
 39c:	b.hi	434 <__addXf3__+0x384>  // b.pmore
 3a0:	ldr	x0, [sp, #56]
 3a4:	bl	0 <rep_clz>
 3a8:	mov	w19, w0
 3ac:	mov	x0, #0x80000000000000      	// #36028797018963968
 3b0:	bl	0 <rep_clz>
 3b4:	sub	w0, w19, w0
 3b8:	str	w0, [sp, #80]
 3bc:	ldr	x1, [sp, #56]
 3c0:	ldr	w0, [sp, #80]
 3c4:	lsl	x0, x1, x0
 3c8:	str	x0, [sp, #56]
 3cc:	ldr	w1, [sp, #140]
 3d0:	ldr	w0, [sp, #80]
 3d4:	sub	w0, w1, w0
 3d8:	str	w0, [sp, #140]
 3dc:	b	434 <__addXf3__+0x384>
 3e0:	ldr	x1, [sp, #56]
 3e4:	ldr	x0, [sp, #48]
 3e8:	add	x0, x1, x0
 3ec:	str	x0, [sp, #56]
 3f0:	ldr	x0, [sp, #56]
 3f4:	and	x0, x0, #0x100000000000000
 3f8:	cmp	x0, #0x0
 3fc:	b.eq	434 <__addXf3__+0x384>  // b.none
 400:	ldr	x0, [sp, #56]
 404:	and	x0, x0, #0x1
 408:	cmp	x0, #0x0
 40c:	cset	w0, ne  // ne = any
 410:	strb	w0, [sp, #86]
 414:	ldr	x0, [sp, #56]
 418:	lsr	x1, x0, #1
 41c:	ldrb	w0, [sp, #86]
 420:	orr	x0, x1, x0
 424:	str	x0, [sp, #56]
 428:	ldr	w0, [sp, #140]
 42c:	add	w0, w0, #0x1
 430:	str	w0, [sp, #140]
 434:	ldr	w0, [sp, #140]
 438:	cmp	w0, #0x7fe
 43c:	b.le	450 <__addXf3__+0x3a0>
 440:	ldr	x0, [sp, #96]
 444:	orr	x0, x0, #0x7ff0000000000000
 448:	bl	34 <fromRep>
 44c:	b	5dc <__addXf3__+0x52c>
 450:	ldr	w0, [sp, #140]
 454:	cmp	w0, #0x0
 458:	b.gt	4a8 <__addXf3__+0x3f8>
 45c:	mov	w1, #0x1                   	// #1
 460:	ldr	w0, [sp, #140]
 464:	sub	w0, w1, w0
 468:	str	w0, [sp, #76]
 46c:	ldr	x1, [sp, #56]
 470:	ldr	w0, [sp, #76]
 474:	mov	w2, #0x40                  	// #64
 478:	sub	w0, w2, w0
 47c:	lsl	x0, x1, x0
 480:	cmp	x0, #0x0
 484:	cset	w0, ne  // ne = any
 488:	strb	w0, [sp, #75]
 48c:	ldr	x1, [sp, #56]
 490:	ldr	w0, [sp, #76]
 494:	lsr	x1, x1, x0
 498:	ldrb	w0, [sp, #75]
 49c:	orr	x0, x1, x0
 4a0:	str	x0, [sp, #56]
 4a4:	str	wzr, [sp, #140]
 4a8:	ldr	x0, [sp, #56]
 4ac:	and	w0, w0, #0x7
 4b0:	str	w0, [sp, #68]
 4b4:	ldr	x0, [sp, #56]
 4b8:	lsr	x0, x0, #3
 4bc:	and	x0, x0, #0xfffffffffffff
 4c0:	str	x0, [sp, #128]
 4c4:	ldrsw	x0, [sp, #140]
 4c8:	lsl	x0, x0, #52
 4cc:	ldr	x1, [sp, #128]
 4d0:	orr	x0, x1, x0
 4d4:	str	x0, [sp, #128]
 4d8:	ldr	x1, [sp, #128]
 4dc:	ldr	x0, [sp, #96]
 4e0:	orr	x0, x1, x0
 4e4:	str	x0, [sp, #128]
 4e8:	bl	0 <__fe_getround>
 4ec:	cmp	w0, #0x3
 4f0:	b.eq	5a8 <__addXf3__+0x4f8>  // b.none
 4f4:	cmp	w0, #0x3
 4f8:	b.hi	5c4 <__addXf3__+0x514>  // b.pmore
 4fc:	cmp	w0, #0x2
 500:	b.eq	580 <__addXf3__+0x4d0>  // b.none
 504:	cmp	w0, #0x2
 508:	b.hi	5c4 <__addXf3__+0x514>  // b.pmore
 50c:	cmp	w0, #0x0
 510:	b.eq	520 <__addXf3__+0x470>  // b.none
 514:	cmp	w0, #0x1
 518:	b.eq	558 <__addXf3__+0x4a8>  // b.none
 51c:	b	5c4 <__addXf3__+0x514>
 520:	ldr	w0, [sp, #68]
 524:	cmp	w0, #0x4
 528:	b.le	538 <__addXf3__+0x488>
 52c:	ldr	x0, [sp, #128]
 530:	add	x0, x0, #0x1
 534:	str	x0, [sp, #128]
 538:	ldr	w0, [sp, #68]
 53c:	cmp	w0, #0x4
 540:	b.ne	5b0 <__addXf3__+0x500>  // b.any
 544:	ldr	x0, [sp, #128]
 548:	add	x0, x0, #0x1
 54c:	and	x0, x0, #0xfffffffffffffffe
 550:	str	x0, [sp, #128]
 554:	b	5b0 <__addXf3__+0x500>
 558:	ldr	x0, [sp, #96]
 55c:	cmp	x0, #0x0
 560:	b.eq	5b8 <__addXf3__+0x508>  // b.none
 564:	ldr	w0, [sp, #68]
 568:	cmp	w0, #0x0
 56c:	b.eq	5b8 <__addXf3__+0x508>  // b.none
 570:	ldr	x0, [sp, #128]
 574:	add	x0, x0, #0x1
 578:	str	x0, [sp, #128]
 57c:	b	5b8 <__addXf3__+0x508>
 580:	ldr	x0, [sp, #96]
 584:	cmp	x0, #0x0
 588:	b.ne	5c0 <__addXf3__+0x510>  // b.any
 58c:	ldr	w0, [sp, #68]
 590:	cmp	w0, #0x0
 594:	b.eq	5c0 <__addXf3__+0x510>  // b.none
 598:	ldr	x0, [sp, #128]
 59c:	add	x0, x0, #0x1
 5a0:	str	x0, [sp, #128]
 5a4:	b	5c0 <__addXf3__+0x510>
 5a8:	nop
 5ac:	b	5c4 <__addXf3__+0x514>
 5b0:	nop
 5b4:	b	5c4 <__addXf3__+0x514>
 5b8:	nop
 5bc:	b	5c4 <__addXf3__+0x514>
 5c0:	nop
 5c4:	ldr	w0, [sp, #68]
 5c8:	cmp	w0, #0x0
 5cc:	b.eq	5d4 <__addXf3__+0x524>  // b.none
 5d0:	bl	0 <__fe_raise_inexact>
 5d4:	ldr	x0, [sp, #128]
 5d8:	bl	34 <fromRep>
 5dc:	ldr	x19, [sp, #16]
 5e0:	ldp	x29, x30, [sp], #160
 5e4:	ret

00000000000005e8 <__adddf3>:
 5e8:	stp	x29, x30, [sp, #-32]!
 5ec:	mov	x29, sp
 5f0:	str	d0, [sp, #24]
 5f4:	str	d1, [sp, #16]
 5f8:	ldr	d1, [sp, #16]
 5fc:	ldr	d0, [sp, #24]
 600:	bl	b0 <__addXf3__>
 604:	ldp	x29, x30, [sp], #32
 608:	ret

addsf3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <rep_clz>:
   0:	sub	sp, sp, #0x10
   4:	str	w0, [sp, #12]
   8:	ldr	w0, [sp, #12]
   c:	clz	w0, w0
  10:	add	sp, sp, #0x10
  14:	ret

0000000000000018 <toRep>:
  18:	sub	sp, sp, #0x20
  1c:	str	s0, [sp, #12]
  20:	ldr	s0, [sp, #12]
  24:	str	s0, [sp, #24]
  28:	ldr	w0, [sp, #24]
  2c:	add	sp, sp, #0x20
  30:	ret

0000000000000034 <fromRep>:
  34:	sub	sp, sp, #0x20
  38:	str	w0, [sp, #12]
  3c:	ldr	w0, [sp, #12]
  40:	str	w0, [sp, #24]
  44:	ldr	s0, [sp, #24]
  48:	add	sp, sp, #0x20
  4c:	ret

0000000000000050 <normalize>:
  50:	stp	x29, x30, [sp, #-64]!
  54:	mov	x29, sp
  58:	str	x19, [sp, #16]
  5c:	str	x0, [sp, #40]
  60:	ldr	x0, [sp, #40]
  64:	ldr	w0, [x0]
  68:	bl	0 <rep_clz>
  6c:	mov	w19, w0
  70:	mov	w0, #0x800000              	// #8388608
  74:	bl	0 <rep_clz>
  78:	sub	w0, w19, w0
  7c:	str	w0, [sp, #60]
  80:	ldr	x0, [sp, #40]
  84:	ldr	w1, [x0]
  88:	ldr	w0, [sp, #60]
  8c:	lsl	w1, w1, w0
  90:	ldr	x0, [sp, #40]
  94:	str	w1, [x0]
  98:	mov	w1, #0x1                   	// #1
  9c:	ldr	w0, [sp, #60]
  a0:	sub	w0, w1, w0
  a4:	ldr	x19, [sp, #16]
  a8:	ldp	x29, x30, [sp], #64
  ac:	ret

00000000000000b0 <__addXf3__>:
  b0:	stp	x29, x30, [sp, #-128]!
  b4:	mov	x29, sp
  b8:	str	x19, [sp, #16]
  bc:	str	s0, [sp, #44]
  c0:	str	s1, [sp, #40]
  c4:	ldr	s0, [sp, #44]
  c8:	bl	18 <toRep>
  cc:	str	w0, [sp, #124]
  d0:	ldr	s0, [sp, #40]
  d4:	bl	18 <toRep>
  d8:	str	w0, [sp, #120]
  dc:	ldr	w0, [sp, #124]
  e0:	and	w0, w0, #0x7fffffff
  e4:	str	w0, [sp, #104]
  e8:	ldr	w0, [sp, #120]
  ec:	and	w0, w0, #0x7fffffff
  f0:	str	w0, [sp, #100]
  f4:	ldr	w0, [sp, #104]
  f8:	sub	w1, w0, #0x1
  fc:	mov	w0, #0x7f7fffff            	// #2139095039
 100:	cmp	w1, w0
 104:	b.cs	11c <__addXf3__+0x6c>  // b.hs, b.nlast
 108:	ldr	w0, [sp, #100]
 10c:	sub	w1, w0, #0x1
 110:	mov	w0, #0x7f7fffff            	// #2139095039
 114:	cmp	w1, w0
 118:	b.cc	218 <__addXf3__+0x168>  // b.lo, b.ul, b.last
 11c:	ldr	w1, [sp, #104]
 120:	mov	w0, #0x7f800000            	// #2139095040
 124:	cmp	w1, w0
 128:	b.ls	140 <__addXf3__+0x90>  // b.plast
 12c:	ldr	s0, [sp, #44]
 130:	bl	18 <toRep>
 134:	orr	w0, w0, #0x400000
 138:	bl	34 <fromRep>
 13c:	b	5dc <__addXf3__+0x52c>
 140:	ldr	w1, [sp, #100]
 144:	mov	w0, #0x7f800000            	// #2139095040
 148:	cmp	w1, w0
 14c:	b.ls	164 <__addXf3__+0xb4>  // b.plast
 150:	ldr	s0, [sp, #40]
 154:	bl	18 <toRep>
 158:	orr	w0, w0, #0x400000
 15c:	bl	34 <fromRep>
 160:	b	5dc <__addXf3__+0x52c>
 164:	ldr	w1, [sp, #104]
 168:	mov	w0, #0x7f800000            	// #2139095040
 16c:	cmp	w1, w0
 170:	b.ne	1ac <__addXf3__+0xfc>  // b.any
 174:	ldr	s0, [sp, #44]
 178:	bl	18 <toRep>
 17c:	mov	w19, w0
 180:	ldr	s0, [sp, #40]
 184:	bl	18 <toRep>
 188:	eor	w1, w19, w0
 18c:	mov	w0, #0x80000000            	// #-2147483648
 190:	cmp	w1, w0
 194:	b.ne	1a4 <__addXf3__+0xf4>  // b.any
 198:	mov	w0, #0x7fc00000            	// #2143289344
 19c:	bl	34 <fromRep>
 1a0:	b	5dc <__addXf3__+0x52c>
 1a4:	ldr	s0, [sp, #44]
 1a8:	b	5dc <__addXf3__+0x52c>
 1ac:	ldr	w1, [sp, #100]
 1b0:	mov	w0, #0x7f800000            	// #2139095040
 1b4:	cmp	w1, w0
 1b8:	b.ne	1c4 <__addXf3__+0x114>  // b.any
 1bc:	ldr	s0, [sp, #40]
 1c0:	b	5dc <__addXf3__+0x52c>
 1c4:	ldr	w0, [sp, #104]
 1c8:	cmp	w0, #0x0
 1cc:	b.ne	204 <__addXf3__+0x154>  // b.any
 1d0:	ldr	w0, [sp, #100]
 1d4:	cmp	w0, #0x0
 1d8:	b.ne	1fc <__addXf3__+0x14c>  // b.any
 1dc:	ldr	s0, [sp, #44]
 1e0:	bl	18 <toRep>
 1e4:	mov	w19, w0
 1e8:	ldr	s0, [sp, #40]
 1ec:	bl	18 <toRep>
 1f0:	and	w0, w19, w0
 1f4:	bl	34 <fromRep>
 1f8:	b	5dc <__addXf3__+0x52c>
 1fc:	ldr	s0, [sp, #40]
 200:	b	5dc <__addXf3__+0x52c>
 204:	ldr	w0, [sp, #100]
 208:	cmp	w0, #0x0
 20c:	b.ne	218 <__addXf3__+0x168>  // b.any
 210:	ldr	s0, [sp, #44]
 214:	b	5dc <__addXf3__+0x52c>
 218:	ldr	w1, [sp, #100]
 21c:	ldr	w0, [sp, #104]
 220:	cmp	w1, w0
 224:	b.ls	240 <__addXf3__+0x190>  // b.plast
 228:	ldr	w0, [sp, #124]
 22c:	str	w0, [sp, #96]
 230:	ldr	w0, [sp, #120]
 234:	str	w0, [sp, #124]
 238:	ldr	w0, [sp, #96]
 23c:	str	w0, [sp, #120]
 240:	ldr	w0, [sp, #124]
 244:	lsr	w0, w0, #23
 248:	and	w0, w0, #0xff
 24c:	str	w0, [sp, #116]
 250:	ldr	w0, [sp, #120]
 254:	lsr	w0, w0, #23
 258:	and	w0, w0, #0xff
 25c:	str	w0, [sp, #112]
 260:	ldr	w0, [sp, #124]
 264:	and	w0, w0, #0x7fffff
 268:	str	w0, [sp, #60]
 26c:	ldr	w0, [sp, #120]
 270:	and	w0, w0, #0x7fffff
 274:	str	w0, [sp, #56]
 278:	ldr	w0, [sp, #116]
 27c:	cmp	w0, #0x0
 280:	b.ne	290 <__addXf3__+0x1e0>  // b.any
 284:	add	x0, sp, #0x3c
 288:	bl	50 <normalize>
 28c:	str	w0, [sp, #116]
 290:	ldr	w0, [sp, #112]
 294:	cmp	w0, #0x0
 298:	b.ne	2a8 <__addXf3__+0x1f8>  // b.any
 29c:	add	x0, sp, #0x38
 2a0:	bl	50 <normalize>
 2a4:	str	w0, [sp, #112]
 2a8:	ldr	w0, [sp, #124]
 2ac:	and	w0, w0, #0x80000000
 2b0:	str	w0, [sp, #92]
 2b4:	ldr	w1, [sp, #124]
 2b8:	ldr	w0, [sp, #120]
 2bc:	eor	w0, w1, w0
 2c0:	and	w0, w0, #0x80000000
 2c4:	cmp	w0, #0x0
 2c8:	cset	w0, ne  // ne = any
 2cc:	strb	w0, [sp, #91]
 2d0:	ldr	w0, [sp, #60]
 2d4:	lsl	w0, w0, #3
 2d8:	orr	w0, w0, #0x4000000
 2dc:	str	w0, [sp, #60]
 2e0:	ldr	w0, [sp, #56]
 2e4:	lsl	w0, w0, #3
 2e8:	orr	w0, w0, #0x4000000
 2ec:	str	w0, [sp, #56]
 2f0:	ldr	w1, [sp, #116]
 2f4:	ldr	w0, [sp, #112]
 2f8:	sub	w0, w1, w0
 2fc:	str	w0, [sp, #84]
 300:	ldr	w0, [sp, #84]
 304:	cmp	w0, #0x0
 308:	b.eq	35c <__addXf3__+0x2ac>  // b.none
 30c:	ldr	w0, [sp, #84]
 310:	cmp	w0, #0x1f
 314:	b.hi	354 <__addXf3__+0x2a4>  // b.pmore
 318:	ldr	w1, [sp, #56]
 31c:	mov	w2, #0x20                  	// #32
 320:	ldr	w0, [sp, #84]
 324:	sub	w0, w2, w0
 328:	lsl	w0, w1, w0
 32c:	cmp	w0, #0x0
 330:	cset	w0, ne  // ne = any
 334:	strb	w0, [sp, #83]
 338:	ldr	w1, [sp, #56]
 33c:	ldr	w0, [sp, #84]
 340:	lsr	w1, w1, w0
 344:	ldrb	w0, [sp, #83]
 348:	orr	w0, w1, w0
 34c:	str	w0, [sp, #56]
 350:	b	35c <__addXf3__+0x2ac>
 354:	mov	w0, #0x1                   	// #1
 358:	str	w0, [sp, #56]
 35c:	ldrb	w0, [sp, #91]
 360:	cmp	w0, #0x0
 364:	b.eq	3e0 <__addXf3__+0x330>  // b.none
 368:	ldr	w1, [sp, #60]
 36c:	ldr	w0, [sp, #56]
 370:	sub	w0, w1, w0
 374:	str	w0, [sp, #60]
 378:	ldr	w0, [sp, #60]
 37c:	cmp	w0, #0x0
 380:	b.ne	390 <__addXf3__+0x2e0>  // b.any
 384:	mov	w0, #0x0                   	// #0
 388:	bl	34 <fromRep>
 38c:	b	5dc <__addXf3__+0x52c>
 390:	ldr	w1, [sp, #60]
 394:	mov	w0, #0x3ffffff             	// #67108863
 398:	cmp	w1, w0
 39c:	b.hi	434 <__addXf3__+0x384>  // b.pmore
 3a0:	ldr	w0, [sp, #60]
 3a4:	bl	0 <rep_clz>
 3a8:	mov	w19, w0
 3ac:	mov	w0, #0x4000000             	// #67108864
 3b0:	bl	0 <rep_clz>
 3b4:	sub	w0, w19, w0
 3b8:	str	w0, [sp, #76]
 3bc:	ldr	w1, [sp, #60]
 3c0:	ldr	w0, [sp, #76]
 3c4:	lsl	w0, w1, w0
 3c8:	str	w0, [sp, #60]
 3cc:	ldr	w1, [sp, #116]
 3d0:	ldr	w0, [sp, #76]
 3d4:	sub	w0, w1, w0
 3d8:	str	w0, [sp, #116]
 3dc:	b	434 <__addXf3__+0x384>
 3e0:	ldr	w1, [sp, #60]
 3e4:	ldr	w0, [sp, #56]
 3e8:	add	w0, w1, w0
 3ec:	str	w0, [sp, #60]
 3f0:	ldr	w0, [sp, #60]
 3f4:	and	w0, w0, #0x8000000
 3f8:	cmp	w0, #0x0
 3fc:	b.eq	434 <__addXf3__+0x384>  // b.none
 400:	ldr	w0, [sp, #60]
 404:	and	w0, w0, #0x1
 408:	cmp	w0, #0x0
 40c:	cset	w0, ne  // ne = any
 410:	strb	w0, [sp, #82]
 414:	ldr	w0, [sp, #60]
 418:	lsr	w1, w0, #1
 41c:	ldrb	w0, [sp, #82]
 420:	orr	w0, w1, w0
 424:	str	w0, [sp, #60]
 428:	ldr	w0, [sp, #116]
 42c:	add	w0, w0, #0x1
 430:	str	w0, [sp, #116]
 434:	ldr	w0, [sp, #116]
 438:	cmp	w0, #0xfe
 43c:	b.le	450 <__addXf3__+0x3a0>
 440:	ldr	w0, [sp, #92]
 444:	orr	w0, w0, #0x7f800000
 448:	bl	34 <fromRep>
 44c:	b	5dc <__addXf3__+0x52c>
 450:	ldr	w0, [sp, #116]
 454:	cmp	w0, #0x0
 458:	b.gt	4a8 <__addXf3__+0x3f8>
 45c:	mov	w1, #0x1                   	// #1
 460:	ldr	w0, [sp, #116]
 464:	sub	w0, w1, w0
 468:	str	w0, [sp, #72]
 46c:	ldr	w1, [sp, #60]
 470:	ldr	w0, [sp, #72]
 474:	mov	w2, #0x20                  	// #32
 478:	sub	w0, w2, w0
 47c:	lsl	w0, w1, w0
 480:	cmp	w0, #0x0
 484:	cset	w0, ne  // ne = any
 488:	strb	w0, [sp, #71]
 48c:	ldr	w1, [sp, #60]
 490:	ldr	w0, [sp, #72]
 494:	lsr	w1, w1, w0
 498:	ldrb	w0, [sp, #71]
 49c:	orr	w0, w1, w0
 4a0:	str	w0, [sp, #60]
 4a4:	str	wzr, [sp, #116]
 4a8:	ldr	w0, [sp, #60]
 4ac:	and	w0, w0, #0x7
 4b0:	str	w0, [sp, #64]
 4b4:	ldr	w0, [sp, #60]
 4b8:	lsr	w0, w0, #3
 4bc:	and	w0, w0, #0x7fffff
 4c0:	str	w0, [sp, #108]
 4c4:	ldr	w0, [sp, #116]
 4c8:	lsl	w0, w0, #23
 4cc:	ldr	w1, [sp, #108]
 4d0:	orr	w0, w1, w0
 4d4:	str	w0, [sp, #108]
 4d8:	ldr	w1, [sp, #108]
 4dc:	ldr	w0, [sp, #92]
 4e0:	orr	w0, w1, w0
 4e4:	str	w0, [sp, #108]
 4e8:	bl	0 <__fe_getround>
 4ec:	cmp	w0, #0x3
 4f0:	b.eq	5a8 <__addXf3__+0x4f8>  // b.none
 4f4:	cmp	w0, #0x3
 4f8:	b.hi	5c4 <__addXf3__+0x514>  // b.pmore
 4fc:	cmp	w0, #0x2
 500:	b.eq	580 <__addXf3__+0x4d0>  // b.none
 504:	cmp	w0, #0x2
 508:	b.hi	5c4 <__addXf3__+0x514>  // b.pmore
 50c:	cmp	w0, #0x0
 510:	b.eq	520 <__addXf3__+0x470>  // b.none
 514:	cmp	w0, #0x1
 518:	b.eq	558 <__addXf3__+0x4a8>  // b.none
 51c:	b	5c4 <__addXf3__+0x514>
 520:	ldr	w0, [sp, #64]
 524:	cmp	w0, #0x4
 528:	b.le	538 <__addXf3__+0x488>
 52c:	ldr	w0, [sp, #108]
 530:	add	w0, w0, #0x1
 534:	str	w0, [sp, #108]
 538:	ldr	w0, [sp, #64]
 53c:	cmp	w0, #0x4
 540:	b.ne	5b0 <__addXf3__+0x500>  // b.any
 544:	ldr	w0, [sp, #108]
 548:	add	w0, w0, #0x1
 54c:	and	w0, w0, #0xfffffffe
 550:	str	w0, [sp, #108]
 554:	b	5b0 <__addXf3__+0x500>
 558:	ldr	w0, [sp, #92]
 55c:	cmp	w0, #0x0
 560:	b.eq	5b8 <__addXf3__+0x508>  // b.none
 564:	ldr	w0, [sp, #64]
 568:	cmp	w0, #0x0
 56c:	b.eq	5b8 <__addXf3__+0x508>  // b.none
 570:	ldr	w0, [sp, #108]
 574:	add	w0, w0, #0x1
 578:	str	w0, [sp, #108]
 57c:	b	5b8 <__addXf3__+0x508>
 580:	ldr	w0, [sp, #92]
 584:	cmp	w0, #0x0
 588:	b.ne	5c0 <__addXf3__+0x510>  // b.any
 58c:	ldr	w0, [sp, #64]
 590:	cmp	w0, #0x0
 594:	b.eq	5c0 <__addXf3__+0x510>  // b.none
 598:	ldr	w0, [sp, #108]
 59c:	add	w0, w0, #0x1
 5a0:	str	w0, [sp, #108]
 5a4:	b	5c0 <__addXf3__+0x510>
 5a8:	nop
 5ac:	b	5c4 <__addXf3__+0x514>
 5b0:	nop
 5b4:	b	5c4 <__addXf3__+0x514>
 5b8:	nop
 5bc:	b	5c4 <__addXf3__+0x514>
 5c0:	nop
 5c4:	ldr	w0, [sp, #64]
 5c8:	cmp	w0, #0x0
 5cc:	b.eq	5d4 <__addXf3__+0x524>  // b.none
 5d0:	bl	0 <__fe_raise_inexact>
 5d4:	ldr	w0, [sp, #108]
 5d8:	bl	34 <fromRep>
 5dc:	ldr	x19, [sp, #16]
 5e0:	ldp	x29, x30, [sp], #128
 5e4:	ret

00000000000005e8 <__addsf3>:
 5e8:	stp	x29, x30, [sp, #-32]!
 5ec:	mov	x29, sp
 5f0:	str	s0, [sp, #28]
 5f4:	str	s1, [sp, #24]
 5f8:	ldr	s1, [sp, #24]
 5fc:	ldr	s0, [sp, #28]
 600:	bl	b0 <__addXf3__>
 604:	ldp	x29, x30, [sp], #32
 608:	ret

addtf3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <rep_clz>:
   0:	sub	sp, sp, #0x30
   4:	stp	x0, x1, [sp]
   8:	ldp	x0, x1, [sp]
   c:	stp	x0, x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	cmp	x0, #0x0
  18:	b.eq	2c <rep_clz+0x2c>  // b.none
  1c:	ldr	x0, [sp, #24]
  20:	str	x0, [sp, #40]
  24:	str	xzr, [sp, #32]
  28:	b	3c <rep_clz+0x3c>
  2c:	ldr	x0, [sp, #16]
  30:	str	x0, [sp, #40]
  34:	mov	x0, #0x40                  	// #64
  38:	str	x0, [sp, #32]
  3c:	ldr	x0, [sp, #40]
  40:	clz	x0, x0
  44:	mov	w1, w0
  48:	ldr	x0, [sp, #32]
  4c:	add	w0, w1, w0
  50:	add	sp, sp, #0x30
  54:	ret

0000000000000058 <toRep>:
  58:	sub	sp, sp, #0x20
  5c:	str	q0, [sp]
  60:	ldr	q0, [sp]
  64:	str	q0, [sp, #16]
  68:	ldp	x0, x1, [sp, #16]
  6c:	add	sp, sp, #0x20
  70:	ret

0000000000000074 <fromRep>:
  74:	sub	sp, sp, #0x20
  78:	stp	x0, x1, [sp]
  7c:	ldp	x0, x1, [sp]
  80:	stp	x0, x1, [sp, #16]
  84:	ldr	q0, [sp, #16]
  88:	add	sp, sp, #0x20
  8c:	ret

0000000000000090 <normalize>:
  90:	stp	x29, x30, [sp, #-80]!
  94:	mov	x29, sp
  98:	stp	x19, x20, [sp, #16]
  9c:	str	x21, [sp, #32]
  a0:	str	x0, [sp, #56]
  a4:	ldr	x0, [sp, #56]
  a8:	ldp	x0, x1, [x0]
  ac:	bl	0 <rep_clz>
  b0:	mov	w19, w0
  b4:	adrp	x0, 0 <rep_clz>
  b8:	add	x0, x0, #0x0
  bc:	ldp	x0, x1, [x0]
  c0:	bl	0 <rep_clz>
  c4:	sub	w0, w19, w0
  c8:	str	w0, [sp, #76]
  cc:	ldr	x0, [sp, #56]
  d0:	ldp	x0, x1, [x0]
  d4:	ldr	w2, [sp, #76]
  d8:	sub	w2, w2, #0x40
  dc:	lsl	x3, x0, x2
  e0:	mov	x7, #0x0                   	// #0
  e4:	lsr	x5, x0, #1
  e8:	mov	w6, #0x3f                  	// #63
  ec:	ldr	w4, [sp, #76]
  f0:	sub	w4, w6, w4
  f4:	lsr	x4, x5, x4
  f8:	ldr	w5, [sp, #76]
  fc:	lsl	x21, x1, x5
 100:	orr	x21, x4, x21
 104:	ldr	w4, [sp, #76]
 108:	lsl	x20, x0, x4
 10c:	cmp	w2, #0x0
 110:	csel	x21, x3, x21, ge  // ge = tcont
 114:	cmp	w2, #0x0
 118:	csel	x20, x7, x20, ge  // ge = tcont
 11c:	ldr	x0, [sp, #56]
 120:	stp	x20, x21, [x0]
 124:	mov	w1, #0x1                   	// #1
 128:	ldr	w0, [sp, #76]
 12c:	sub	w0, w1, w0
 130:	ldp	x19, x20, [sp, #16]
 134:	ldr	x21, [sp, #32]
 138:	ldp	x29, x30, [sp], #80
 13c:	ret

0000000000000140 <__addXf3__>:
 140:	sub	sp, sp, #0x380
 144:	stp	x29, x30, [sp]
 148:	mov	x29, sp
 14c:	stp	x19, x20, [sp, #16]
 150:	stp	x21, x22, [sp, #32]
 154:	stp	x23, x24, [sp, #48]
 158:	stp	x25, x26, [sp, #64]
 15c:	str	x27, [sp, #80]
 160:	add	x0, sp, #0x200
 164:	str	q0, [x0, #176]
 168:	add	x0, sp, #0x200
 16c:	str	q1, [x0, #160]
 170:	add	x0, sp, #0x200
 174:	ldr	q0, [x0, #176]
 178:	bl	58 <toRep>
 17c:	add	x2, sp, #0x400
 180:	stp	x0, x1, [x2, #-144]
 184:	add	x0, sp, #0x200
 188:	ldr	q0, [x0, #160]
 18c:	bl	58 <toRep>
 190:	add	x2, sp, #0x400
 194:	stp	x0, x1, [x2, #-160]
 198:	ldr	x1, [sp, #880]
 19c:	mov	x0, #0xffffffffffffffff    	// #-1
 1a0:	and	x0, x1, x0
 1a4:	str	x0, [sp, #816]
 1a8:	ldr	x0, [sp, #888]
 1ac:	and	x0, x0, #0x7fffffffffffffff
 1b0:	str	x0, [sp, #824]
 1b4:	ldr	x1, [sp, #864]
 1b8:	mov	x0, #0xffffffffffffffff    	// #-1
 1bc:	and	x0, x1, x0
 1c0:	str	x0, [sp, #800]
 1c4:	ldr	x0, [sp, #872]
 1c8:	and	x0, x0, #0x7fffffffffffffff
 1cc:	str	x0, [sp, #808]
 1d0:	add	x0, sp, #0x400
 1d4:	ldp	x0, x1, [x0, #-208]
 1d8:	mov	x2, #0xffffffffffffffff    	// #-1
 1dc:	adds	x3, x0, x2
 1e0:	mov	x2, #0xffffffffffffffff    	// #-1
 1e4:	adc	x0, x1, x2
 1e8:	mov	x20, x3
 1ec:	mov	x21, x0
 1f0:	mov	x0, #0x7ffeffffffffffff    	// #9223090561878065151
 1f4:	cmp	x21, x0
 1f8:	b.hi	250 <__addXf3__+0x110>  // b.pmore
 1fc:	mov	x0, #0x7ffeffffffffffff    	// #9223090561878065151
 200:	cmp	x21, x0
 204:	b.ne	210 <__addXf3__+0xd0>  // b.any
 208:	cmn	x20, #0x2
 20c:	b.hi	250 <__addXf3__+0x110>  // b.pmore
 210:	add	x0, sp, #0x400
 214:	ldp	x0, x1, [x0, #-224]
 218:	mov	x2, #0xffffffffffffffff    	// #-1
 21c:	adds	x3, x0, x2
 220:	mov	x2, #0xffffffffffffffff    	// #-1
 224:	adc	x0, x1, x2
 228:	mov	x22, x3
 22c:	mov	x23, x0
 230:	mov	x0, #0x7ffeffffffffffff    	// #9223090561878065151
 234:	cmp	x23, x0
 238:	b.hi	250 <__addXf3__+0x110>  // b.pmore
 23c:	mov	x0, #0x7ffeffffffffffff    	// #9223090561878065151
 240:	cmp	x23, x0
 244:	b.ne	444 <__addXf3__+0x304>  // b.any
 248:	cmn	x22, #0x2
 24c:	b.ls	444 <__addXf3__+0x304>  // b.plast
 250:	ldr	x1, [sp, #824]
 254:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
 258:	cmp	x1, x0
 25c:	b.hi	27c <__addXf3__+0x13c>  // b.pmore
 260:	ldr	x1, [sp, #824]
 264:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
 268:	cmp	x1, x0
 26c:	b.ne	2a8 <__addXf3__+0x168>  // b.any
 270:	ldr	x0, [sp, #816]
 274:	cmp	x0, #0x0
 278:	b.eq	2a8 <__addXf3__+0x168>  // b.none
 27c:	add	x0, sp, #0x200
 280:	ldr	q0, [x0, #176]
 284:	bl	58 <toRep>
 288:	mov	x2, #0x0                   	// #0
 28c:	orr	x2, x0, x2
 290:	str	x2, [sp, #208]
 294:	orr	x0, x1, #0x800000000000
 298:	str	x0, [sp, #216]
 29c:	ldp	x0, x1, [sp, #208]
 2a0:	bl	74 <fromRep>
 2a4:	b	df8 <__addXf3__+0xcb8>
 2a8:	ldr	x1, [sp, #808]
 2ac:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
 2b0:	cmp	x1, x0
 2b4:	b.hi	2d4 <__addXf3__+0x194>  // b.pmore
 2b8:	ldr	x1, [sp, #808]
 2bc:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
 2c0:	cmp	x1, x0
 2c4:	b.ne	300 <__addXf3__+0x1c0>  // b.any
 2c8:	ldr	x0, [sp, #800]
 2cc:	cmp	x0, #0x0
 2d0:	b.eq	300 <__addXf3__+0x1c0>  // b.none
 2d4:	add	x0, sp, #0x200
 2d8:	ldr	q0, [x0, #160]
 2dc:	bl	58 <toRep>
 2e0:	mov	x2, #0x0                   	// #0
 2e4:	orr	x2, x0, x2
 2e8:	str	x2, [sp, #224]
 2ec:	orr	x0, x1, #0x800000000000
 2f0:	str	x0, [sp, #232]
 2f4:	ldp	x0, x1, [sp, #224]
 2f8:	bl	74 <fromRep>
 2fc:	b	df8 <__addXf3__+0xcb8>
 300:	ldr	x0, [sp, #816]
 304:	cmp	x0, #0x0
 308:	b.ne	38c <__addXf3__+0x24c>  // b.any
 30c:	ldr	x1, [sp, #824]
 310:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
 314:	cmp	x1, x0
 318:	b.ne	38c <__addXf3__+0x24c>  // b.any
 31c:	add	x0, sp, #0x200
 320:	ldr	q0, [x0, #176]
 324:	bl	58 <toRep>
 328:	mov	x20, x0
 32c:	mov	x21, x1
 330:	add	x0, sp, #0x200
 334:	ldr	q0, [x0, #160]
 338:	bl	58 <toRep>
 33c:	eor	x2, x20, x0
 340:	str	x2, [sp, #240]
 344:	eor	x0, x21, x1
 348:	str	x0, [sp, #248]
 34c:	ldp	x2, x3, [sp, #240]
 350:	mov	x0, x2
 354:	cmp	x0, #0x0
 358:	b.ne	380 <__addXf3__+0x240>  // b.any
 35c:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 360:	mov	x1, x3
 364:	cmp	x1, x0
 368:	b.ne	380 <__addXf3__+0x240>  // b.any
 36c:	adrp	x0, 0 <rep_clz>
 370:	add	x0, x0, #0x0
 374:	ldp	x0, x1, [x0]
 378:	bl	74 <fromRep>
 37c:	b	df8 <__addXf3__+0xcb8>
 380:	add	x0, sp, #0x200
 384:	ldr	q0, [x0, #176]
 388:	b	df8 <__addXf3__+0xcb8>
 38c:	ldr	x0, [sp, #800]
 390:	cmp	x0, #0x0
 394:	b.ne	3b4 <__addXf3__+0x274>  // b.any
 398:	ldr	x1, [sp, #808]
 39c:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
 3a0:	cmp	x1, x0
 3a4:	b.ne	3b4 <__addXf3__+0x274>  // b.any
 3a8:	add	x0, sp, #0x200
 3ac:	ldr	q0, [x0, #160]
 3b0:	b	df8 <__addXf3__+0xcb8>
 3b4:	ldr	x1, [sp, #816]
 3b8:	ldr	x0, [sp, #824]
 3bc:	orr	x1, x1, x0
 3c0:	cmp	x1, #0x0
 3c4:	b.ne	424 <__addXf3__+0x2e4>  // b.any
 3c8:	ldr	x0, [sp, #800]
 3cc:	ldr	x1, [sp, #808]
 3d0:	orr	x0, x0, x1
 3d4:	cmp	x0, #0x0
 3d8:	b.ne	418 <__addXf3__+0x2d8>  // b.any
 3dc:	add	x0, sp, #0x200
 3e0:	ldr	q0, [x0, #176]
 3e4:	bl	58 <toRep>
 3e8:	mov	x20, x0
 3ec:	mov	x21, x1
 3f0:	add	x0, sp, #0x200
 3f4:	ldr	q0, [x0, #160]
 3f8:	bl	58 <toRep>
 3fc:	and	x2, x20, x0
 400:	str	x2, [sp, #256]
 404:	and	x0, x21, x1
 408:	str	x0, [sp, #264]
 40c:	ldp	x0, x1, [sp, #256]
 410:	bl	74 <fromRep>
 414:	b	df8 <__addXf3__+0xcb8>
 418:	add	x0, sp, #0x200
 41c:	ldr	q0, [x0, #160]
 420:	b	df8 <__addXf3__+0xcb8>
 424:	ldr	x1, [sp, #800]
 428:	ldr	x0, [sp, #808]
 42c:	orr	x1, x1, x0
 430:	cmp	x1, #0x0
 434:	b.ne	444 <__addXf3__+0x304>  // b.any
 438:	add	x0, sp, #0x200
 43c:	ldr	q0, [x0, #176]
 440:	b	df8 <__addXf3__+0xcb8>
 444:	ldr	x1, [sp, #808]
 448:	ldr	x0, [sp, #824]
 44c:	cmp	x1, x0
 450:	b.hi	474 <__addXf3__+0x334>  // b.pmore
 454:	ldr	x1, [sp, #808]
 458:	ldr	x0, [sp, #824]
 45c:	cmp	x1, x0
 460:	b.ne	4a4 <__addXf3__+0x364>  // b.any
 464:	ldr	x1, [sp, #800]
 468:	ldr	x0, [sp, #816]
 46c:	cmp	x1, x0
 470:	b.ls	4a4 <__addXf3__+0x364>  // b.plast
 474:	add	x0, sp, #0x400
 478:	ldp	x0, x1, [x0, #-144]
 47c:	add	x2, sp, #0x400
 480:	stp	x0, x1, [x2, #-240]
 484:	add	x0, sp, #0x400
 488:	ldp	x0, x1, [x0, #-160]
 48c:	add	x2, sp, #0x400
 490:	stp	x0, x1, [x2, #-144]
 494:	add	x0, sp, #0x400
 498:	ldp	x0, x1, [x0, #-240]
 49c:	add	x2, sp, #0x400
 4a0:	stp	x0, x1, [x2, #-160]
 4a4:	ldr	x0, [sp, #888]
 4a8:	lsr	x0, x0, #48
 4ac:	str	x0, [sp, #272]
 4b0:	str	xzr, [sp, #280]
 4b4:	ldr	w0, [sp, #272]
 4b8:	and	w0, w0, #0x7fff
 4bc:	str	w0, [sp, #860]
 4c0:	ldr	x0, [sp, #872]
 4c4:	lsr	x0, x0, #48
 4c8:	str	x0, [sp, #288]
 4cc:	str	xzr, [sp, #296]
 4d0:	ldr	w0, [sp, #288]
 4d4:	and	w0, w0, #0x7fff
 4d8:	str	w0, [sp, #856]
 4dc:	ldr	x1, [sp, #880]
 4e0:	mov	x0, #0xffffffffffffffff    	// #-1
 4e4:	and	x0, x1, x0
 4e8:	str	x0, [sp, #304]
 4ec:	ldr	x0, [sp, #888]
 4f0:	and	x0, x0, #0xffffffffffff
 4f4:	str	x0, [sp, #312]
 4f8:	ldp	x0, x1, [sp, #304]
 4fc:	add	x2, sp, #0x200
 500:	stp	x0, x1, [x2, #208]
 504:	ldr	x1, [sp, #864]
 508:	mov	x0, #0xffffffffffffffff    	// #-1
 50c:	and	x0, x1, x0
 510:	str	x0, [sp, #320]
 514:	ldr	x0, [sp, #872]
 518:	and	x0, x0, #0xffffffffffff
 51c:	str	x0, [sp, #328]
 520:	ldp	x0, x1, [sp, #320]
 524:	add	x2, sp, #0x200
 528:	stp	x0, x1, [x2, #192]
 52c:	ldr	w0, [sp, #860]
 530:	cmp	w0, #0x0
 534:	b.ne	544 <__addXf3__+0x404>  // b.any
 538:	add	x0, sp, #0x2d0
 53c:	bl	90 <normalize>
 540:	str	w0, [sp, #860]
 544:	ldr	w0, [sp, #856]
 548:	cmp	w0, #0x0
 54c:	b.ne	55c <__addXf3__+0x41c>  // b.any
 550:	add	x0, sp, #0x2c0
 554:	bl	90 <normalize>
 558:	str	w0, [sp, #856]
 55c:	ldr	x1, [sp, #880]
 560:	mov	x0, #0x0                   	// #0
 564:	and	x0, x1, x0
 568:	str	x0, [sp, #768]
 56c:	ldr	x0, [sp, #888]
 570:	and	x0, x0, #0x8000000000000000
 574:	str	x0, [sp, #776]
 578:	ldr	x1, [sp, #880]
 57c:	ldr	x0, [sp, #864]
 580:	eor	x0, x1, x0
 584:	str	x0, [sp, #336]
 588:	ldr	x1, [sp, #888]
 58c:	ldr	x0, [sp, #872]
 590:	eor	x0, x1, x0
 594:	str	x0, [sp, #344]
 598:	mov	x0, #0x0                   	// #0
 59c:	ldp	x2, x3, [sp, #336]
 5a0:	mov	x1, x2
 5a4:	and	x0, x1, x0
 5a8:	str	x0, [sp, #352]
 5ac:	mov	x0, x3
 5b0:	and	x0, x0, #0x8000000000000000
 5b4:	str	x0, [sp, #360]
 5b8:	ldp	x0, x1, [sp, #352]
 5bc:	mov	x2, x0
 5c0:	mov	x0, x1
 5c4:	orr	x0, x2, x0
 5c8:	cmp	x0, #0x0
 5cc:	cset	w0, ne  // ne = any
 5d0:	strb	w0, [sp, #767]
 5d4:	add	x0, sp, #0x200
 5d8:	ldp	x0, x1, [x0, #208]
 5dc:	lsr	x2, x0, #61
 5e0:	lsl	x3, x1, #3
 5e4:	str	x3, [sp, #152]
 5e8:	ldr	x3, [sp, #152]
 5ec:	orr	x2, x2, x3
 5f0:	str	x2, [sp, #152]
 5f4:	lsl	x0, x0, #3
 5f8:	str	x0, [sp, #144]
 5fc:	mov	x0, #0x0                   	// #0
 600:	ldp	x2, x3, [sp, #144]
 604:	mov	x1, x2
 608:	orr	x0, x1, x0
 60c:	str	x0, [sp, #368]
 610:	mov	x0, x3
 614:	orr	x0, x0, #0x8000000000000
 618:	str	x0, [sp, #376]
 61c:	ldp	x0, x1, [sp, #368]
 620:	add	x2, sp, #0x200
 624:	stp	x0, x1, [x2, #208]
 628:	add	x0, sp, #0x200
 62c:	ldp	x0, x1, [x0, #192]
 630:	lsr	x2, x0, #61
 634:	lsl	x3, x1, #3
 638:	str	x3, [sp, #168]
 63c:	ldr	x3, [sp, #168]
 640:	orr	x2, x2, x3
 644:	str	x2, [sp, #168]
 648:	lsl	x0, x0, #3
 64c:	str	x0, [sp, #160]
 650:	mov	x0, #0x0                   	// #0
 654:	ldp	x2, x3, [sp, #160]
 658:	mov	x1, x2
 65c:	orr	x0, x1, x0
 660:	str	x0, [sp, #384]
 664:	mov	x0, x3
 668:	orr	x0, x0, #0x8000000000000
 66c:	str	x0, [sp, #392]
 670:	ldp	x0, x1, [sp, #384]
 674:	add	x2, sp, #0x200
 678:	stp	x0, x1, [x2, #192]
 67c:	ldr	w1, [sp, #860]
 680:	ldr	w0, [sp, #856]
 684:	sub	w0, w1, w0
 688:	str	w0, [sp, #760]
 68c:	ldr	w0, [sp, #760]
 690:	cmp	w0, #0x0
 694:	b.eq	79c <__addXf3__+0x65c>  // b.none
 698:	ldr	w0, [sp, #760]
 69c:	cmp	w0, #0x7f
 6a0:	b.hi	78c <__addXf3__+0x64c>  // b.pmore
 6a4:	add	x0, sp, #0x200
 6a8:	ldp	x2, x3, [x0, #192]
 6ac:	mov	w1, #0x80                  	// #128
 6b0:	ldr	w0, [sp, #760]
 6b4:	sub	w1, w1, w0
 6b8:	sub	w5, w1, #0x40
 6bc:	lsl	x6, x2, x5
 6c0:	mov	x7, #0x0                   	// #0
 6c4:	lsr	x4, x2, #1
 6c8:	mov	w0, #0x3f                  	// #63
 6cc:	sub	w0, w0, w1
 6d0:	lsr	x0, x4, x0
 6d4:	lsl	x25, x3, x1
 6d8:	orr	x25, x0, x25
 6dc:	lsl	x24, x2, x1
 6e0:	cmp	w5, #0x0
 6e4:	csel	x25, x6, x25, ge  // ge = tcont
 6e8:	cmp	w5, #0x0
 6ec:	csel	x24, x7, x24, ge  // ge = tcont
 6f0:	orr	x0, x24, x25
 6f4:	cmp	x0, #0x0
 6f8:	cset	w0, ne  // ne = any
 6fc:	strb	w0, [sp, #759]
 700:	add	x0, sp, #0x200
 704:	ldp	x2, x3, [x0, #192]
 708:	ldr	w0, [sp, #760]
 70c:	sub	w5, w0, #0x40
 710:	lsr	x6, x3, x5
 714:	mov	x7, #0x0                   	// #0
 718:	lsl	x4, x3, #1
 71c:	mov	w1, #0x3f                  	// #63
 720:	ldr	w0, [sp, #760]
 724:	sub	w0, w1, w0
 728:	lsl	x1, x4, x0
 72c:	ldr	w0, [sp, #760]
 730:	lsr	x26, x2, x0
 734:	orr	x26, x1, x26
 738:	ldr	w0, [sp, #760]
 73c:	lsr	x27, x3, x0
 740:	cmp	w5, #0x0
 744:	csel	x26, x6, x26, ge  // ge = tcont
 748:	cmp	w5, #0x0
 74c:	csel	x27, x7, x27, ge  // ge = tcont
 750:	ldrb	w0, [sp, #759]
 754:	and	x0, x0, #0xff
 758:	str	x0, [sp, #400]
 75c:	str	xzr, [sp, #408]
 760:	ldp	x0, x1, [sp, #400]
 764:	mov	x2, x0
 768:	orr	x2, x26, x2
 76c:	str	x2, [sp, #416]
 770:	mov	x0, x1
 774:	orr	x0, x27, x0
 778:	str	x0, [sp, #424]
 77c:	ldp	x0, x1, [sp, #416]
 780:	add	x2, sp, #0x200
 784:	stp	x0, x1, [x2, #192]
 788:	b	79c <__addXf3__+0x65c>
 78c:	mov	x0, #0x1                   	// #1
 790:	mov	x1, #0x0                   	// #0
 794:	add	x2, sp, #0x200
 798:	stp	x0, x1, [x2, #192]
 79c:	ldrb	w0, [sp, #767]
 7a0:	cmp	w0, #0x0
 7a4:	b.eq	8d0 <__addXf3__+0x790>  // b.none
 7a8:	add	x0, sp, #0x200
 7ac:	ldp	x2, x3, [x0, #208]
 7b0:	add	x0, sp, #0x200
 7b4:	ldp	x0, x1, [x0, #192]
 7b8:	subs	x4, x2, x0
 7bc:	sbc	x0, x3, x1
 7c0:	str	x4, [sp, #432]
 7c4:	str	x0, [sp, #440]
 7c8:	ldp	x0, x1, [sp, #432]
 7cc:	add	x2, sp, #0x200
 7d0:	stp	x0, x1, [x2, #208]
 7d4:	add	x0, sp, #0x200
 7d8:	ldp	x2, x3, [x0, #208]
 7dc:	mov	x0, x2
 7e0:	orr	x0, x0, x3
 7e4:	cmp	x0, #0x0
 7e8:	b.ne	7fc <__addXf3__+0x6bc>  // b.any
 7ec:	mov	x0, #0x0                   	// #0
 7f0:	mov	x1, #0x0                   	// #0
 7f4:	bl	74 <fromRep>
 7f8:	b	df8 <__addXf3__+0xcb8>
 7fc:	add	x0, sp, #0x200
 800:	ldp	x0, x1, [x0, #208]
 804:	mov	x2, #0x7ffffffffffff       	// #2251799813685247
 808:	cmp	x1, x2
 80c:	b.hi	9ec <__addXf3__+0x8ac>  // b.pmore
 810:	mov	x2, #0x7ffffffffffff       	// #2251799813685247
 814:	cmp	x1, x2
 818:	add	x0, sp, #0x200
 81c:	ldp	x0, x1, [x0, #208]
 820:	bl	0 <rep_clz>
 824:	mov	w19, w0
 828:	adrp	x0, 0 <rep_clz>
 82c:	add	x0, x0, #0x0
 830:	ldp	x0, x1, [x0]
 834:	bl	0 <rep_clz>
 838:	sub	w0, w19, w0
 83c:	str	w0, [sp, #752]
 840:	add	x0, sp, #0x200
 844:	ldp	x2, x3, [x0, #208]
 848:	ldr	w0, [sp, #752]
 84c:	sub	w4, w0, #0x40
 850:	lsl	x6, x2, x4
 854:	mov	x7, #0x0                   	// #0
 858:	lsr	x5, x2, #1
 85c:	mov	w1, #0x3f                  	// #63
 860:	ldr	w0, [sp, #752]
 864:	sub	w0, w1, w0
 868:	lsr	x1, x5, x0
 86c:	ldr	w0, [sp, #752]
 870:	lsl	x0, x3, x0
 874:	str	x0, [sp, #104]
 878:	ldr	x0, [sp, #104]
 87c:	orr	x0, x1, x0
 880:	str	x0, [sp, #104]
 884:	ldr	w0, [sp, #752]
 888:	lsl	x0, x2, x0
 88c:	str	x0, [sp, #96]
 890:	cmp	w4, #0x0
 894:	ldr	x0, [sp, #104]
 898:	csel	x0, x6, x0, ge  // ge = tcont
 89c:	str	x0, [sp, #104]
 8a0:	cmp	w4, #0x0
 8a4:	ldr	x0, [sp, #96]
 8a8:	csel	x0, x7, x0, ge  // ge = tcont
 8ac:	str	x0, [sp, #96]
 8b0:	ldp	x0, x1, [sp, #96]
 8b4:	add	x2, sp, #0x200
 8b8:	stp	x0, x1, [x2, #208]
 8bc:	ldr	w1, [sp, #860]
 8c0:	ldr	w0, [sp, #752]
 8c4:	sub	w0, w1, w0
 8c8:	str	w0, [sp, #860]
 8cc:	b	9ec <__addXf3__+0x8ac>
 8d0:	add	x0, sp, #0x200
 8d4:	ldp	x0, x1, [x0, #208]
 8d8:	add	x2, sp, #0x200
 8dc:	ldp	x2, x3, [x2, #192]
 8e0:	mov	x4, x2
 8e4:	adds	x4, x0, x4
 8e8:	mov	x2, x3
 8ec:	adc	x0, x1, x2
 8f0:	str	x4, [sp, #448]
 8f4:	str	x0, [sp, #456]
 8f8:	ldp	x0, x1, [sp, #448]
 8fc:	add	x2, sp, #0x200
 900:	stp	x0, x1, [x2, #208]
 904:	add	x0, sp, #0x200
 908:	ldp	x0, x1, [x0, #208]
 90c:	mov	x2, #0x0                   	// #0
 910:	and	x2, x0, x2
 914:	str	x2, [sp, #464]
 918:	and	x0, x1, #0x10000000000000
 91c:	str	x0, [sp, #472]
 920:	ldp	x2, x3, [sp, #464]
 924:	mov	x0, x2
 928:	mov	x1, x3
 92c:	orr	x0, x0, x1
 930:	cmp	x0, #0x0
 934:	b.eq	9ec <__addXf3__+0x8ac>  // b.none
 938:	add	x0, sp, #0x200
 93c:	ldp	x0, x1, [x0, #208]
 940:	and	x2, x0, #0x1
 944:	str	x2, [sp, #480]
 948:	mov	x2, #0x0                   	// #0
 94c:	and	x0, x1, x2
 950:	str	x0, [sp, #488]
 954:	ldp	x0, x1, [sp, #480]
 958:	mov	x2, x0
 95c:	mov	x0, x1
 960:	orr	x0, x2, x0
 964:	cmp	x0, #0x0
 968:	cset	w0, ne  // ne = any
 96c:	strb	w0, [sp, #758]
 970:	add	x0, sp, #0x200
 974:	ldp	x0, x1, [x0, #208]
 978:	lsl	x2, x1, #63
 97c:	lsr	x3, x0, #1
 980:	str	x3, [sp, #176]
 984:	ldr	x3, [sp, #176]
 988:	orr	x2, x2, x3
 98c:	str	x2, [sp, #176]
 990:	lsr	x0, x1, #1
 994:	str	x0, [sp, #184]
 998:	ldrb	w0, [sp, #758]
 99c:	and	x0, x0, #0xff
 9a0:	str	x0, [sp, #496]
 9a4:	str	xzr, [sp, #504]
 9a8:	ldp	x2, x3, [sp, #176]
 9ac:	mov	x4, x2
 9b0:	ldp	x0, x1, [sp, #496]
 9b4:	mov	x5, x0
 9b8:	orr	x4, x4, x5
 9bc:	str	x4, [sp, #512]
 9c0:	mov	x2, x3
 9c4:	mov	x0, x1
 9c8:	orr	x0, x2, x0
 9cc:	str	x0, [sp, #520]
 9d0:	add	x0, sp, #0x200
 9d4:	ldp	x0, x1, [x0]
 9d8:	add	x2, sp, #0x200
 9dc:	stp	x0, x1, [x2, #208]
 9e0:	ldr	w0, [sp, #860]
 9e4:	add	w0, w0, #0x1
 9e8:	str	w0, [sp, #860]
 9ec:	ldr	w1, [sp, #860]
 9f0:	mov	w0, #0x7ffe                	// #32766
 9f4:	cmp	w1, w0
 9f8:	b.le	a28 <__addXf3__+0x8e8>
 9fc:	ldr	x0, [sp, #768]
 a00:	mov	x1, #0x0                   	// #0
 a04:	orr	x0, x0, x1
 a08:	str	x0, [sp, #528]
 a0c:	ldr	x0, [sp, #776]
 a10:	orr	x0, x0, #0x7fff000000000000
 a14:	str	x0, [sp, #536]
 a18:	add	x0, sp, #0x200
 a1c:	ldp	x0, x1, [x0, #16]
 a20:	bl	74 <fromRep>
 a24:	b	df8 <__addXf3__+0xcb8>
 a28:	ldr	w0, [sp, #860]
 a2c:	cmp	w0, #0x0
 a30:	b.gt	b8c <__addXf3__+0xa4c>
 a34:	mov	w1, #0x1                   	// #1
 a38:	ldr	w0, [sp, #860]
 a3c:	sub	w0, w1, w0
 a40:	str	w0, [sp, #748]
 a44:	add	x0, sp, #0x200
 a48:	ldp	x0, x1, [x0, #208]
 a4c:	ldr	w2, [sp, #748]
 a50:	mov	w3, #0x80                  	// #128
 a54:	sub	w2, w3, w2
 a58:	sub	w3, w2, #0x40
 a5c:	lsl	x4, x0, x3
 a60:	mov	x7, #0x0                   	// #0
 a64:	lsr	x6, x0, #1
 a68:	mov	w5, #0x3f                  	// #63
 a6c:	sub	w5, w5, w2
 a70:	lsr	x5, x6, x5
 a74:	lsl	x6, x1, x2
 a78:	str	x6, [sp, #120]
 a7c:	ldr	x6, [sp, #120]
 a80:	orr	x5, x5, x6
 a84:	str	x5, [sp, #120]
 a88:	lsl	x0, x0, x2
 a8c:	str	x0, [sp, #112]
 a90:	cmp	w3, #0x0
 a94:	ldr	x0, [sp, #120]
 a98:	csel	x0, x4, x0, ge  // ge = tcont
 a9c:	str	x0, [sp, #120]
 aa0:	cmp	w3, #0x0
 aa4:	ldr	x0, [sp, #112]
 aa8:	csel	x0, x7, x0, ge  // ge = tcont
 aac:	str	x0, [sp, #112]
 ab0:	ldp	x0, x1, [sp, #112]
 ab4:	mov	x2, x0
 ab8:	mov	x0, x1
 abc:	orr	x0, x2, x0
 ac0:	cmp	x0, #0x0
 ac4:	cset	w0, ne  // ne = any
 ac8:	strb	w0, [sp, #747]
 acc:	add	x0, sp, #0x200
 ad0:	ldp	x0, x1, [x0, #208]
 ad4:	ldr	w2, [sp, #748]
 ad8:	sub	w2, w2, #0x40
 adc:	lsr	x3, x1, x2
 ae0:	mov	x7, #0x0                   	// #0
 ae4:	lsl	x5, x1, #1
 ae8:	mov	w6, #0x3f                  	// #63
 aec:	ldr	w4, [sp, #748]
 af0:	sub	w4, w6, w4
 af4:	lsl	x4, x5, x4
 af8:	ldr	w5, [sp, #748]
 afc:	lsr	x5, x0, x5
 b00:	str	x5, [sp, #128]
 b04:	ldr	x5, [sp, #128]
 b08:	orr	x4, x4, x5
 b0c:	str	x4, [sp, #128]
 b10:	ldr	w4, [sp, #748]
 b14:	lsr	x0, x1, x4
 b18:	str	x0, [sp, #136]
 b1c:	cmp	w2, #0x0
 b20:	ldr	x0, [sp, #128]
 b24:	csel	x0, x3, x0, ge  // ge = tcont
 b28:	str	x0, [sp, #128]
 b2c:	cmp	w2, #0x0
 b30:	ldr	x0, [sp, #136]
 b34:	csel	x0, x7, x0, ge  // ge = tcont
 b38:	str	x0, [sp, #136]
 b3c:	ldrb	w0, [sp, #747]
 b40:	and	x0, x0, #0xff
 b44:	str	x0, [sp, #544]
 b48:	str	xzr, [sp, #552]
 b4c:	ldp	x2, x3, [sp, #128]
 b50:	mov	x4, x2
 b54:	add	x0, sp, #0x200
 b58:	ldp	x0, x1, [x0, #32]
 b5c:	mov	x5, x0
 b60:	orr	x4, x4, x5
 b64:	str	x4, [sp, #560]
 b68:	mov	x2, x3
 b6c:	mov	x0, x1
 b70:	orr	x0, x2, x0
 b74:	str	x0, [sp, #568]
 b78:	add	x0, sp, #0x200
 b7c:	ldp	x0, x1, [x0, #48]
 b80:	add	x2, sp, #0x200
 b84:	stp	x0, x1, [x2, #208]
 b88:	str	wzr, [sp, #860]
 b8c:	add	x0, sp, #0x200
 b90:	ldp	x0, x1, [x0, #208]
 b94:	and	w0, w0, #0x7
 b98:	str	w0, [sp, #740]
 b9c:	add	x0, sp, #0x200
 ba0:	ldp	x0, x1, [x0, #208]
 ba4:	lsl	x2, x1, #61
 ba8:	lsr	x3, x0, #3
 bac:	str	x3, [sp, #192]
 bb0:	ldr	x3, [sp, #192]
 bb4:	orr	x2, x2, x3
 bb8:	str	x2, [sp, #192]
 bbc:	lsr	x0, x1, #3
 bc0:	str	x0, [sp, #200]
 bc4:	mov	x0, #0xffffffffffffffff    	// #-1
 bc8:	ldp	x2, x3, [sp, #192]
 bcc:	mov	x1, x2
 bd0:	and	x0, x1, x0
 bd4:	str	x0, [sp, #832]
 bd8:	mov	x0, x3
 bdc:	and	x0, x0, #0xffffffffffff
 be0:	str	x0, [sp, #840]
 be4:	ldr	w0, [sp, #860]
 be8:	sxtw	x0, w0
 bec:	str	x0, [sp, #576]
 bf0:	asr	x0, x0, #63
 bf4:	str	x0, [sp, #584]
 bf8:	ldr	x0, [sp, #576]
 bfc:	lsl	x0, x0, #48
 c00:	str	x0, [sp, #600]
 c04:	str	xzr, [sp, #592]
 c08:	ldr	x0, [sp, #832]
 c0c:	add	x1, sp, #0x200
 c10:	ldp	x2, x3, [x1, #80]
 c14:	mov	x1, x2
 c18:	orr	x0, x0, x1
 c1c:	str	x0, [sp, #832]
 c20:	ldr	x0, [sp, #840]
 c24:	mov	x1, x3
 c28:	orr	x0, x0, x1
 c2c:	str	x0, [sp, #840]
 c30:	ldr	x1, [sp, #832]
 c34:	ldr	x0, [sp, #768]
 c38:	orr	x0, x1, x0
 c3c:	str	x0, [sp, #832]
 c40:	ldr	x1, [sp, #840]
 c44:	ldr	x0, [sp, #776]
 c48:	orr	x0, x1, x0
 c4c:	str	x0, [sp, #840]
 c50:	bl	0 <__fe_getround>
 c54:	cmp	w0, #0x3
 c58:	b.eq	dc0 <__addXf3__+0xc80>  // b.none
 c5c:	cmp	w0, #0x3
 c60:	b.hi	ddc <__addXf3__+0xc9c>  // b.pmore
 c64:	cmp	w0, #0x2
 c68:	b.eq	d6c <__addXf3__+0xc2c>  // b.none
 c6c:	cmp	w0, #0x2
 c70:	b.hi	ddc <__addXf3__+0xc9c>  // b.pmore
 c74:	cmp	w0, #0x0
 c78:	b.eq	c88 <__addXf3__+0xb48>  // b.none
 c7c:	cmp	w0, #0x1
 c80:	b.eq	d18 <__addXf3__+0xbd8>  // b.none
 c84:	b	ddc <__addXf3__+0xc9c>
 c88:	ldr	w0, [sp, #740]
 c8c:	cmp	w0, #0x4
 c90:	b.le	cc4 <__addXf3__+0xb84>
 c94:	add	x0, sp, #0x400
 c98:	ldp	x0, x1, [x0, #-192]
 c9c:	mov	x2, #0x1                   	// #1
 ca0:	adds	x2, x0, x2
 ca4:	mov	x3, #0x0                   	// #0
 ca8:	adc	x0, x1, x3
 cac:	str	x2, [sp, #624]
 cb0:	str	x0, [sp, #632]
 cb4:	add	x0, sp, #0x200
 cb8:	ldp	x0, x1, [x0, #112]
 cbc:	add	x2, sp, #0x400
 cc0:	stp	x0, x1, [x2, #-192]
 cc4:	ldr	w0, [sp, #740]
 cc8:	cmp	w0, #0x4
 ccc:	b.ne	dc8 <__addXf3__+0xc88>  // b.any
 cd0:	add	x0, sp, #0x400
 cd4:	ldp	x0, x1, [x0, #-192]
 cd8:	mov	x2, #0x1                   	// #1
 cdc:	adds	x2, x0, x2
 ce0:	mov	x3, #0x0                   	// #0
 ce4:	adc	x0, x1, x3
 ce8:	str	x2, [sp, #608]
 cec:	str	x0, [sp, #616]
 cf0:	add	x0, sp, #0x200
 cf4:	ldp	x2, x3, [x0, #96]
 cf8:	mov	x0, x2
 cfc:	and	x0, x0, #0xfffffffffffffffe
 d00:	str	x0, [sp, #832]
 d04:	mov	x0, #0xffffffffffffffff    	// #-1
 d08:	mov	x1, x3
 d0c:	and	x0, x1, x0
 d10:	str	x0, [sp, #840]
 d14:	b	dc8 <__addXf3__+0xc88>
 d18:	ldr	x0, [sp, #768]
 d1c:	ldr	x1, [sp, #776]
 d20:	orr	x0, x0, x1
 d24:	cmp	x0, #0x0
 d28:	b.eq	dd0 <__addXf3__+0xc90>  // b.none
 d2c:	ldr	w0, [sp, #740]
 d30:	cmp	w0, #0x0
 d34:	b.eq	dd0 <__addXf3__+0xc90>  // b.none
 d38:	add	x0, sp, #0x400
 d3c:	ldp	x0, x1, [x0, #-192]
 d40:	mov	x2, #0x1                   	// #1
 d44:	adds	x2, x0, x2
 d48:	mov	x3, #0x0                   	// #0
 d4c:	adc	x0, x1, x3
 d50:	str	x2, [sp, #640]
 d54:	str	x0, [sp, #648]
 d58:	add	x0, sp, #0x200
 d5c:	ldp	x0, x1, [x0, #128]
 d60:	add	x2, sp, #0x400
 d64:	stp	x0, x1, [x2, #-192]
 d68:	b	dd0 <__addXf3__+0xc90>
 d6c:	ldr	x0, [sp, #768]
 d70:	ldr	x1, [sp, #776]
 d74:	orr	x0, x0, x1
 d78:	cmp	x0, #0x0
 d7c:	b.ne	dd8 <__addXf3__+0xc98>  // b.any
 d80:	ldr	w0, [sp, #740]
 d84:	cmp	w0, #0x0
 d88:	b.eq	dd8 <__addXf3__+0xc98>  // b.none
 d8c:	add	x0, sp, #0x400
 d90:	ldp	x0, x1, [x0, #-192]
 d94:	mov	x2, #0x1                   	// #1
 d98:	adds	x2, x0, x2
 d9c:	mov	x3, #0x0                   	// #0
 da0:	adc	x0, x1, x3
 da4:	str	x2, [sp, #656]
 da8:	str	x0, [sp, #664]
 dac:	add	x0, sp, #0x200
 db0:	ldp	x0, x1, [x0, #144]
 db4:	add	x2, sp, #0x400
 db8:	stp	x0, x1, [x2, #-192]
 dbc:	b	dd8 <__addXf3__+0xc98>
 dc0:	nop
 dc4:	b	ddc <__addXf3__+0xc9c>
 dc8:	nop
 dcc:	b	ddc <__addXf3__+0xc9c>
 dd0:	nop
 dd4:	b	ddc <__addXf3__+0xc9c>
 dd8:	nop
 ddc:	ldr	w0, [sp, #740]
 de0:	cmp	w0, #0x0
 de4:	b.eq	dec <__addXf3__+0xcac>  // b.none
 de8:	bl	0 <__fe_raise_inexact>
 dec:	add	x0, sp, #0x400
 df0:	ldp	x0, x1, [x0, #-192]
 df4:	bl	74 <fromRep>
 df8:	ldp	x19, x20, [sp, #16]
 dfc:	ldp	x21, x22, [sp, #32]
 e00:	ldp	x23, x24, [sp, #48]
 e04:	ldp	x25, x26, [sp, #64]
 e08:	ldr	x27, [sp, #80]
 e0c:	ldp	x29, x30, [sp]
 e10:	add	sp, sp, #0x380
 e14:	ret

0000000000000e18 <__addtf3>:
 e18:	stp	x29, x30, [sp, #-48]!
 e1c:	mov	x29, sp
 e20:	str	q0, [sp, #32]
 e24:	str	q1, [sp, #16]
 e28:	ldr	q1, [sp, #16]
 e2c:	ldr	q0, [sp, #32]
 e30:	bl	140 <__addXf3__>
 e34:	ldp	x29, x30, [sp], #48
 e38:	ret

addvdi3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__addvdi3>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x1, [sp, #24]
  14:	ldr	x0, [sp, #16]
  18:	add	x0, x1, x0
  1c:	str	x0, [sp, #40]
  20:	ldr	x0, [sp, #16]
  24:	cmp	x0, #0x0
  28:	b.lt	54 <__addvdi3+0x54>  // b.tstop
  2c:	ldr	x1, [sp, #40]
  30:	ldr	x0, [sp, #24]
  34:	cmp	x1, x0
  38:	b.ge	7c <__addvdi3+0x7c>  // b.tcont
  3c:	adrp	x0, 0 <__addvdi3>
  40:	add	x2, x0, #0x0
  44:	mov	w1, #0x17                  	// #23
  48:	adrp	x0, 0 <__addvdi3>
  4c:	add	x0, x0, #0x0
  50:	bl	0 <__compilerrt_abort_impl>
  54:	ldr	x1, [sp, #40]
  58:	ldr	x0, [sp, #24]
  5c:	cmp	x1, x0
  60:	b.lt	7c <__addvdi3+0x7c>  // b.tstop
  64:	adrp	x0, 0 <__addvdi3>
  68:	add	x2, x0, #0x0
  6c:	mov	w1, #0x1a                  	// #26
  70:	adrp	x0, 0 <__addvdi3>
  74:	add	x0, x0, #0x0
  78:	bl	0 <__compilerrt_abort_impl>
  7c:	ldr	x0, [sp, #40]
  80:	ldp	x29, x30, [sp], #48
  84:	ret

addvsi3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__addvsi3>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	w0, [sp, #28]
   c:	str	w1, [sp, #24]
  10:	ldr	w1, [sp, #28]
  14:	ldr	w0, [sp, #24]
  18:	add	w0, w1, w0
  1c:	str	w0, [sp, #44]
  20:	ldr	w0, [sp, #24]
  24:	cmp	w0, #0x0
  28:	b.lt	54 <__addvsi3+0x54>  // b.tstop
  2c:	ldr	w1, [sp, #44]
  30:	ldr	w0, [sp, #28]
  34:	cmp	w1, w0
  38:	b.ge	7c <__addvsi3+0x7c>  // b.tcont
  3c:	adrp	x0, 0 <__addvsi3>
  40:	add	x2, x0, #0x0
  44:	mov	w1, #0x17                  	// #23
  48:	adrp	x0, 0 <__addvsi3>
  4c:	add	x0, x0, #0x0
  50:	bl	0 <__compilerrt_abort_impl>
  54:	ldr	w1, [sp, #44]
  58:	ldr	w0, [sp, #28]
  5c:	cmp	w1, w0
  60:	b.lt	7c <__addvsi3+0x7c>  // b.tstop
  64:	adrp	x0, 0 <__addvsi3>
  68:	add	x2, x0, #0x0
  6c:	mov	w1, #0x1a                  	// #26
  70:	adrp	x0, 0 <__addvsi3>
  74:	add	x0, x0, #0x0
  78:	bl	0 <__compilerrt_abort_impl>
  7c:	ldr	w0, [sp, #44]
  80:	ldp	x29, x30, [sp], #48
  84:	ret

addvti3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__addvti3>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x0, x1, [sp, #32]
   c:	stp	x2, x3, [sp, #16]
  10:	ldp	x0, x1, [sp, #32]
  14:	ldp	x2, x3, [sp, #16]
  18:	mov	x6, x2
  1c:	adds	x6, x0, x6
  20:	mov	x2, x3
  24:	adc	x0, x1, x2
  28:	mov	x4, x6
  2c:	mov	x5, x0
  30:	stp	x4, x5, [sp, #48]
  34:	ldr	x0, [sp, #24]
  38:	cmp	x0, #0x0
  3c:	b.lt	88 <__addvti3+0x88>  // b.tstop
  40:	ldr	x1, [sp, #40]
  44:	ldr	x0, [sp, #56]
  48:	cmp	x1, x0
  4c:	b.gt	70 <__addvti3+0x70>
  50:	ldr	x1, [sp, #40]
  54:	ldr	x0, [sp, #56]
  58:	cmp	x1, x0
  5c:	b.ne	d0 <__addvti3+0xd0>  // b.any
  60:	ldr	x1, [sp, #32]
  64:	ldr	x0, [sp, #48]
  68:	cmp	x1, x0
  6c:	b.ls	d0 <__addvti3+0xd0>  // b.plast
  70:	adrp	x0, 0 <__addvti3>
  74:	add	x2, x0, #0x0
  78:	mov	w1, #0x19                  	// #25
  7c:	adrp	x0, 0 <__addvti3>
  80:	add	x0, x0, #0x0
  84:	bl	0 <__compilerrt_abort_impl>
  88:	ldr	x1, [sp, #40]
  8c:	ldr	x0, [sp, #56]
  90:	cmp	x1, x0
  94:	b.gt	d0 <__addvti3+0xd0>
  98:	ldr	x1, [sp, #40]
  9c:	ldr	x0, [sp, #56]
  a0:	cmp	x1, x0
  a4:	b.ne	b8 <__addvti3+0xb8>  // b.any
  a8:	ldr	x1, [sp, #32]
  ac:	ldr	x0, [sp, #48]
  b0:	cmp	x1, x0
  b4:	b.hi	d0 <__addvti3+0xd0>  // b.pmore
  b8:	adrp	x0, 0 <__addvti3>
  bc:	add	x2, x0, #0x0
  c0:	mov	w1, #0x1c                  	// #28
  c4:	adrp	x0, 0 <__addvti3>
  c8:	add	x0, x0, #0x0
  cc:	bl	0 <__compilerrt_abort_impl>
  d0:	ldp	x0, x1, [sp, #48]
  d4:	ldp	x29, x30, [sp], #64
  d8:	ret

apple_versioning.c.o:     file format elf64-littleaarch64


ashldi3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__ashldi3>:
   0:	sub	sp, sp, #0x30
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	mov	w0, #0x20                  	// #32
  10:	str	w0, [sp, #44]
  14:	ldr	x0, [sp, #8]
  18:	str	x0, [sp, #32]
  1c:	ldr	w1, [sp, #4]
  20:	ldr	w0, [sp, #44]
  24:	and	w0, w1, w0
  28:	cmp	w0, #0x0
  2c:	b.eq	50 <__ashldi3+0x50>  // b.none
  30:	str	wzr, [sp, #24]
  34:	ldr	w1, [sp, #32]
  38:	ldr	w2, [sp, #4]
  3c:	ldr	w0, [sp, #44]
  40:	sub	w0, w2, w0
  44:	lsl	w0, w1, w0
  48:	str	w0, [sp, #28]
  4c:	b	a0 <__ashldi3+0xa0>
  50:	ldr	w0, [sp, #4]
  54:	cmp	w0, #0x0
  58:	b.ne	64 <__ashldi3+0x64>  // b.any
  5c:	ldr	x0, [sp, #8]
  60:	b	a4 <__ashldi3+0xa4>
  64:	ldr	w1, [sp, #32]
  68:	ldr	w0, [sp, #4]
  6c:	lsl	w0, w1, w0
  70:	str	w0, [sp, #24]
  74:	ldr	w1, [sp, #36]
  78:	ldr	w0, [sp, #4]
  7c:	lsl	w0, w1, w0
  80:	mov	w3, w0
  84:	ldr	w1, [sp, #32]
  88:	ldr	w2, [sp, #44]
  8c:	ldr	w0, [sp, #4]
  90:	sub	w0, w2, w0
  94:	lsr	w0, w1, w0
  98:	orr	w0, w3, w0
  9c:	str	w0, [sp, #28]
  a0:	ldr	x0, [sp, #24]
  a4:	add	sp, sp, #0x30
  a8:	ret

ashlti3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__ashlti3>:
   0:	sub	sp, sp, #0x50
   4:	stp	x0, x1, [sp, #16]
   8:	str	w2, [sp, #12]
   c:	mov	w0, #0x40                  	// #64
  10:	str	w0, [sp, #76]
  14:	ldp	x0, x1, [sp, #16]
  18:	stp	x0, x1, [sp, #48]
  1c:	ldr	w1, [sp, #12]
  20:	ldr	w0, [sp, #76]
  24:	and	w0, w1, w0
  28:	cmp	w0, #0x0
  2c:	b.eq	50 <__ashlti3+0x50>  // b.none
  30:	str	xzr, [sp, #32]
  34:	ldr	x1, [sp, #48]
  38:	ldr	w2, [sp, #12]
  3c:	ldr	w0, [sp, #76]
  40:	sub	w0, w2, w0
  44:	lsl	x0, x1, x0
  48:	str	x0, [sp, #40]
  4c:	b	a0 <__ashlti3+0xa0>
  50:	ldr	w0, [sp, #12]
  54:	cmp	w0, #0x0
  58:	b.ne	64 <__ashlti3+0x64>  // b.any
  5c:	ldp	x0, x1, [sp, #16]
  60:	b	a4 <__ashlti3+0xa4>
  64:	ldr	x1, [sp, #48]
  68:	ldr	w0, [sp, #12]
  6c:	lsl	x0, x1, x0
  70:	str	x0, [sp, #32]
  74:	ldr	x1, [sp, #56]
  78:	ldr	w0, [sp, #12]
  7c:	lsl	x0, x1, x0
  80:	mov	x3, x0
  84:	ldr	x1, [sp, #48]
  88:	ldr	w2, [sp, #76]
  8c:	ldr	w0, [sp, #12]
  90:	sub	w0, w2, w0
  94:	lsr	x0, x1, x0
  98:	orr	x0, x3, x0
  9c:	str	x0, [sp, #40]
  a0:	ldp	x0, x1, [sp, #32]
  a4:	add	sp, sp, #0x50
  a8:	ret

ashrdi3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__ashrdi3>:
   0:	sub	sp, sp, #0x30
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	mov	w0, #0x20                  	// #32
  10:	str	w0, [sp, #44]
  14:	ldr	x0, [sp, #8]
  18:	str	x0, [sp, #32]
  1c:	ldr	w1, [sp, #4]
  20:	ldr	w0, [sp, #44]
  24:	and	w0, w1, w0
  28:	cmp	w0, #0x0
  2c:	b.eq	60 <__ashrdi3+0x60>  // b.none
  30:	ldr	w1, [sp, #36]
  34:	ldr	w0, [sp, #44]
  38:	sub	w0, w0, #0x1
  3c:	asr	w0, w1, w0
  40:	str	w0, [sp, #28]
  44:	ldr	w1, [sp, #36]
  48:	ldr	w2, [sp, #4]
  4c:	ldr	w0, [sp, #44]
  50:	sub	w0, w2, w0
  54:	asr	w0, w1, w0
  58:	str	w0, [sp, #24]
  5c:	b	b0 <__ashrdi3+0xb0>
  60:	ldr	w0, [sp, #4]
  64:	cmp	w0, #0x0
  68:	b.ne	74 <__ashrdi3+0x74>  // b.any
  6c:	ldr	x0, [sp, #8]
  70:	b	b4 <__ashrdi3+0xb4>
  74:	ldr	w1, [sp, #36]
  78:	ldr	w0, [sp, #4]
  7c:	asr	w0, w1, w0
  80:	str	w0, [sp, #28]
  84:	ldr	w1, [sp, #36]
  88:	ldr	w2, [sp, #44]
  8c:	ldr	w0, [sp, #4]
  90:	sub	w0, w2, w0
  94:	lsl	w0, w1, w0
  98:	mov	w2, w0
  9c:	ldr	w1, [sp, #32]
  a0:	ldr	w0, [sp, #4]
  a4:	lsr	w0, w1, w0
  a8:	orr	w0, w2, w0
  ac:	str	w0, [sp, #24]
  b0:	ldr	x0, [sp, #24]
  b4:	add	sp, sp, #0x30
  b8:	ret

ashrti3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__ashrti3>:
   0:	sub	sp, sp, #0x50
   4:	stp	x0, x1, [sp, #16]
   8:	str	w2, [sp, #12]
   c:	mov	w0, #0x40                  	// #64
  10:	str	w0, [sp, #76]
  14:	ldp	x0, x1, [sp, #16]
  18:	stp	x0, x1, [sp, #48]
  1c:	ldr	w1, [sp, #12]
  20:	ldr	w0, [sp, #76]
  24:	and	w0, w1, w0
  28:	cmp	w0, #0x0
  2c:	b.eq	60 <__ashrti3+0x60>  // b.none
  30:	ldr	x1, [sp, #56]
  34:	ldr	w0, [sp, #76]
  38:	sub	w0, w0, #0x1
  3c:	asr	x0, x1, x0
  40:	str	x0, [sp, #40]
  44:	ldr	x1, [sp, #56]
  48:	ldr	w2, [sp, #12]
  4c:	ldr	w0, [sp, #76]
  50:	sub	w0, w2, w0
  54:	asr	x0, x1, x0
  58:	str	x0, [sp, #32]
  5c:	b	b0 <__ashrti3+0xb0>
  60:	ldr	w0, [sp, #12]
  64:	cmp	w0, #0x0
  68:	b.ne	74 <__ashrti3+0x74>  // b.any
  6c:	ldp	x0, x1, [sp, #16]
  70:	b	b4 <__ashrti3+0xb4>
  74:	ldr	x1, [sp, #56]
  78:	ldr	w0, [sp, #12]
  7c:	asr	x0, x1, x0
  80:	str	x0, [sp, #40]
  84:	ldr	x1, [sp, #56]
  88:	ldr	w2, [sp, #76]
  8c:	ldr	w0, [sp, #12]
  90:	sub	w0, w2, w0
  94:	lsl	x0, x1, x0
  98:	mov	x2, x0
  9c:	ldr	x1, [sp, #48]
  a0:	ldr	w0, [sp, #12]
  a4:	lsr	x0, x1, x0
  a8:	orr	x0, x2, x0
  ac:	str	x0, [sp, #32]
  b0:	ldp	x0, x1, [sp, #32]
  b4:	add	sp, sp, #0x50
  b8:	ret

bswapdi2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__bswapdi2>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	lsr	x1, x0, #56
  10:	ldr	x0, [sp, #8]
  14:	lsr	x0, x0, #40
  18:	and	x0, x0, #0xff00
  1c:	orr	x1, x1, x0
  20:	ldr	x0, [sp, #8]
  24:	lsr	x0, x0, #24
  28:	and	x0, x0, #0xff0000
  2c:	orr	x1, x1, x0
  30:	ldr	x0, [sp, #8]
  34:	lsr	x0, x0, #8
  38:	and	x0, x0, #0xff000000
  3c:	orr	x1, x1, x0
  40:	ldr	x0, [sp, #8]
  44:	lsl	x0, x0, #8
  48:	and	x0, x0, #0xff00000000
  4c:	orr	x1, x1, x0
  50:	ldr	x0, [sp, #8]
  54:	lsl	x0, x0, #24
  58:	and	x0, x0, #0xff0000000000
  5c:	orr	x1, x1, x0
  60:	ldr	x0, [sp, #8]
  64:	lsl	x0, x0, #40
  68:	and	x0, x0, #0xff000000000000
  6c:	orr	x1, x1, x0
  70:	ldr	x0, [sp, #8]
  74:	lsl	x0, x0, #56
  78:	orr	x0, x1, x0
  7c:	add	sp, sp, #0x10
  80:	ret

bswapsi2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__bswapsi2>:
   0:	sub	sp, sp, #0x10
   4:	str	w0, [sp, #12]
   8:	ldr	w0, [sp, #12]
   c:	lsr	w1, w0, #24
  10:	ldr	w0, [sp, #12]
  14:	lsr	w0, w0, #8
  18:	and	w0, w0, #0xff00
  1c:	orr	w1, w1, w0
  20:	ldr	w0, [sp, #12]
  24:	lsl	w0, w0, #8
  28:	and	w0, w0, #0xff0000
  2c:	orr	w1, w1, w0
  30:	ldr	w0, [sp, #12]
  34:	lsl	w0, w0, #24
  38:	orr	w0, w1, w0
  3c:	add	sp, sp, #0x10
  40:	ret

clzdi2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__clzdi2>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	str	x0, [sp, #16]
  10:	ldr	w0, [sp, #20]
  14:	cmp	w0, #0x0
  18:	cset	w0, eq  // eq = none
  1c:	and	w0, w0, #0xff
  20:	neg	w0, w0
  24:	str	w0, [sp, #28]
  28:	ldr	w1, [sp, #20]
  2c:	ldr	w0, [sp, #28]
  30:	mvn	w0, w0
  34:	and	w0, w1, w0
  38:	mov	w2, w0
  3c:	ldr	w1, [sp, #16]
  40:	ldr	w0, [sp, #28]
  44:	and	w0, w1, w0
  48:	orr	w0, w2, w0
  4c:	clz	w1, w0
  50:	ldr	w0, [sp, #28]
  54:	and	w0, w0, #0x20
  58:	add	w0, w1, w0
  5c:	add	sp, sp, #0x20
  60:	ret

clzsi2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__clzsi2>:
   0:	sub	sp, sp, #0x20
   4:	str	w0, [sp, #12]
   8:	ldr	w0, [sp, #12]
   c:	str	w0, [sp, #28]
  10:	ldr	w0, [sp, #28]
  14:	and	w0, w0, #0xffff0000
  18:	cmp	w0, #0x0
  1c:	b.ne	28 <__clzsi2+0x28>  // b.any
  20:	mov	w0, #0x10                  	// #16
  24:	b	2c <__clzsi2+0x2c>
  28:	mov	w0, #0x0                   	// #0
  2c:	str	w0, [sp, #24]
  30:	mov	w1, #0x10                  	// #16
  34:	ldr	w0, [sp, #24]
  38:	sub	w0, w1, w0
  3c:	ldr	w1, [sp, #28]
  40:	lsr	w0, w1, w0
  44:	str	w0, [sp, #28]
  48:	ldr	w0, [sp, #24]
  4c:	str	w0, [sp, #20]
  50:	ldr	w0, [sp, #28]
  54:	and	w0, w0, #0xff00
  58:	cmp	w0, #0x0
  5c:	b.ne	68 <__clzsi2+0x68>  // b.any
  60:	mov	w0, #0x8                   	// #8
  64:	b	6c <__clzsi2+0x6c>
  68:	mov	w0, #0x0                   	// #0
  6c:	str	w0, [sp, #24]
  70:	mov	w1, #0x8                   	// #8
  74:	ldr	w0, [sp, #24]
  78:	sub	w0, w1, w0
  7c:	ldr	w1, [sp, #28]
  80:	lsr	w0, w1, w0
  84:	str	w0, [sp, #28]
  88:	ldr	w0, [sp, #24]
  8c:	ldr	w1, [sp, #20]
  90:	add	w0, w1, w0
  94:	str	w0, [sp, #20]
  98:	ldr	w0, [sp, #28]
  9c:	and	w0, w0, #0xf0
  a0:	cmp	w0, #0x0
  a4:	b.ne	b0 <__clzsi2+0xb0>  // b.any
  a8:	mov	w0, #0x4                   	// #4
  ac:	b	b4 <__clzsi2+0xb4>
  b0:	mov	w0, #0x0                   	// #0
  b4:	str	w0, [sp, #24]
  b8:	mov	w1, #0x4                   	// #4
  bc:	ldr	w0, [sp, #24]
  c0:	sub	w0, w1, w0
  c4:	ldr	w1, [sp, #28]
  c8:	lsr	w0, w1, w0
  cc:	str	w0, [sp, #28]
  d0:	ldr	w0, [sp, #24]
  d4:	ldr	w1, [sp, #20]
  d8:	add	w0, w1, w0
  dc:	str	w0, [sp, #20]
  e0:	ldr	w0, [sp, #28]
  e4:	and	w0, w0, #0xc
  e8:	cmp	w0, #0x0
  ec:	b.ne	f8 <__clzsi2+0xf8>  // b.any
  f0:	mov	w0, #0x2                   	// #2
  f4:	b	fc <__clzsi2+0xfc>
  f8:	mov	w0, #0x0                   	// #0
  fc:	str	w0, [sp, #24]
 100:	mov	w1, #0x2                   	// #2
 104:	ldr	w0, [sp, #24]
 108:	sub	w0, w1, w0
 10c:	ldr	w1, [sp, #28]
 110:	lsr	w0, w1, w0
 114:	str	w0, [sp, #28]
 118:	ldr	w0, [sp, #24]
 11c:	ldr	w1, [sp, #20]
 120:	add	w0, w1, w0
 124:	str	w0, [sp, #20]
 128:	mov	w1, #0x2                   	// #2
 12c:	ldr	w0, [sp, #28]
 130:	sub	w0, w1, w0
 134:	ldr	w1, [sp, #28]
 138:	and	w1, w1, #0x2
 13c:	cmp	w1, #0x0
 140:	cset	w1, eq  // eq = none
 144:	and	w1, w1, #0xff
 148:	neg	w1, w1
 14c:	and	w1, w0, w1
 150:	ldr	w0, [sp, #20]
 154:	add	w0, w1, w0
 158:	add	sp, sp, #0x20
 15c:	ret

clzti2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__clzti2>:
   0:	sub	sp, sp, #0x30
   4:	stp	x0, x1, [sp]
   8:	ldp	x0, x1, [sp]
   c:	stp	x0, x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	cmp	x0, #0x0
  18:	cset	w0, eq  // eq = none
  1c:	and	w0, w0, #0xff
  20:	neg	w0, w0
  24:	sxtw	x0, w0
  28:	str	x0, [sp, #40]
  2c:	ldr	x1, [sp, #24]
  30:	ldr	x0, [sp, #40]
  34:	mvn	x0, x0
  38:	and	x0, x1, x0
  3c:	mov	x2, x0
  40:	ldr	x1, [sp, #16]
  44:	ldr	x0, [sp, #40]
  48:	and	x0, x1, x0
  4c:	orr	x0, x2, x0
  50:	clz	x0, x0
  54:	mov	w1, w0
  58:	ldr	x0, [sp, #40]
  5c:	and	w0, w0, #0x40
  60:	add	w0, w1, w0
  64:	add	sp, sp, #0x30
  68:	ret

cmpdi2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__cmpdi2>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	ldr	x0, [sp, #8]
  10:	str	x0, [sp, #24]
  14:	ldr	x0, [sp]
  18:	str	x0, [sp, #16]
  1c:	ldr	w1, [sp, #28]
  20:	ldr	w0, [sp, #20]
  24:	cmp	w1, w0
  28:	b.ge	34 <__cmpdi2+0x34>  // b.tcont
  2c:	mov	w0, #0x0                   	// #0
  30:	b	80 <__cmpdi2+0x80>
  34:	ldr	w1, [sp, #28]
  38:	ldr	w0, [sp, #20]
  3c:	cmp	w1, w0
  40:	b.le	4c <__cmpdi2+0x4c>
  44:	mov	w0, #0x2                   	// #2
  48:	b	80 <__cmpdi2+0x80>
  4c:	ldr	w1, [sp, #24]
  50:	ldr	w0, [sp, #16]
  54:	cmp	w1, w0
  58:	b.cs	64 <__cmpdi2+0x64>  // b.hs, b.nlast
  5c:	mov	w0, #0x0                   	// #0
  60:	b	80 <__cmpdi2+0x80>
  64:	ldr	w1, [sp, #24]
  68:	ldr	w0, [sp, #16]
  6c:	cmp	w1, w0
  70:	b.ls	7c <__cmpdi2+0x7c>  // b.plast
  74:	mov	w0, #0x2                   	// #2
  78:	b	80 <__cmpdi2+0x80>
  7c:	mov	w0, #0x1                   	// #1
  80:	add	sp, sp, #0x20
  84:	ret

cmpti2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__cmpti2>:
   0:	sub	sp, sp, #0x40
   4:	stp	x0, x1, [sp, #16]
   8:	stp	x2, x3, [sp]
   c:	ldp	x0, x1, [sp, #16]
  10:	stp	x0, x1, [sp, #48]
  14:	ldp	x0, x1, [sp]
  18:	stp	x0, x1, [sp, #32]
  1c:	ldr	x1, [sp, #56]
  20:	ldr	x0, [sp, #40]
  24:	cmp	x1, x0
  28:	b.ge	34 <__cmpti2+0x34>  // b.tcont
  2c:	mov	w0, #0x0                   	// #0
  30:	b	80 <__cmpti2+0x80>
  34:	ldr	x1, [sp, #56]
  38:	ldr	x0, [sp, #40]
  3c:	cmp	x1, x0
  40:	b.le	4c <__cmpti2+0x4c>
  44:	mov	w0, #0x2                   	// #2
  48:	b	80 <__cmpti2+0x80>
  4c:	ldr	x1, [sp, #48]
  50:	ldr	x0, [sp, #32]
  54:	cmp	x1, x0
  58:	b.cs	64 <__cmpti2+0x64>  // b.hs, b.nlast
  5c:	mov	w0, #0x0                   	// #0
  60:	b	80 <__cmpti2+0x80>
  64:	ldr	x1, [sp, #48]
  68:	ldr	x0, [sp, #32]
  6c:	cmp	x1, x0
  70:	b.ls	7c <__cmpti2+0x7c>  // b.plast
  74:	mov	w0, #0x2                   	// #2
  78:	b	80 <__cmpti2+0x80>
  7c:	mov	w0, #0x1                   	// #1
  80:	add	sp, sp, #0x40
  84:	ret

comparedf2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <toRep>:
   0:	sub	sp, sp, #0x20
   4:	str	d0, [sp, #8]
   8:	ldr	d0, [sp, #8]
   c:	str	d0, [sp, #24]
  10:	ldr	x0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__cmpdf2>:
  1c:	stp	x29, x30, [sp, #-64]!
  20:	mov	x29, sp
  24:	str	d0, [sp, #24]
  28:	str	d1, [sp, #16]
  2c:	ldr	d0, [sp, #24]
  30:	bl	0 <toRep>
  34:	str	x0, [sp, #56]
  38:	ldr	d0, [sp, #16]
  3c:	bl	0 <toRep>
  40:	str	x0, [sp, #48]
  44:	ldr	x0, [sp, #56]
  48:	and	x0, x0, #0x7fffffffffffffff
  4c:	str	x0, [sp, #40]
  50:	ldr	x0, [sp, #48]
  54:	and	x0, x0, #0x7fffffffffffffff
  58:	str	x0, [sp, #32]
  5c:	ldr	x1, [sp, #40]
  60:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
  64:	cmp	x1, x0
  68:	b.hi	7c <__cmpdf2+0x60>  // b.pmore
  6c:	ldr	x1, [sp, #32]
  70:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
  74:	cmp	x1, x0
  78:	b.ls	84 <__cmpdf2+0x68>  // b.plast
  7c:	mov	w0, #0x1                   	// #1
  80:	b	120 <__cmpdf2+0x104>
  84:	ldr	x1, [sp, #40]
  88:	ldr	x0, [sp, #32]
  8c:	orr	x0, x1, x0
  90:	cmp	x0, #0x0
  94:	b.ne	a0 <__cmpdf2+0x84>  // b.any
  98:	mov	w0, #0x0                   	// #0
  9c:	b	120 <__cmpdf2+0x104>
  a0:	ldr	x1, [sp, #56]
  a4:	ldr	x0, [sp, #48]
  a8:	and	x0, x1, x0
  ac:	cmp	x0, #0x0
  b0:	b.lt	ec <__cmpdf2+0xd0>  // b.tstop
  b4:	ldr	x1, [sp, #56]
  b8:	ldr	x0, [sp, #48]
  bc:	cmp	x1, x0
  c0:	b.ge	cc <__cmpdf2+0xb0>  // b.tcont
  c4:	mov	w0, #0xffffffff            	// #-1
  c8:	b	120 <__cmpdf2+0x104>
  cc:	ldr	x1, [sp, #56]
  d0:	ldr	x0, [sp, #48]
  d4:	cmp	x1, x0
  d8:	b.ne	e4 <__cmpdf2+0xc8>  // b.any
  dc:	mov	w0, #0x0                   	// #0
  e0:	b	120 <__cmpdf2+0x104>
  e4:	mov	w0, #0x1                   	// #1
  e8:	b	120 <__cmpdf2+0x104>
  ec:	ldr	x1, [sp, #56]
  f0:	ldr	x0, [sp, #48]
  f4:	cmp	x1, x0
  f8:	b.le	104 <__cmpdf2+0xe8>
  fc:	mov	w0, #0xffffffff            	// #-1
 100:	b	120 <__cmpdf2+0x104>
 104:	ldr	x1, [sp, #56]
 108:	ldr	x0, [sp, #48]
 10c:	cmp	x1, x0
 110:	b.ne	11c <__cmpdf2+0x100>  // b.any
 114:	mov	w0, #0x0                   	// #0
 118:	b	120 <__cmpdf2+0x104>
 11c:	mov	w0, #0x1                   	// #1
 120:	ldp	x29, x30, [sp], #64
 124:	ret

0000000000000128 <__gedf2>:
 128:	stp	x29, x30, [sp, #-64]!
 12c:	mov	x29, sp
 130:	str	d0, [sp, #24]
 134:	str	d1, [sp, #16]
 138:	ldr	d0, [sp, #24]
 13c:	bl	0 <toRep>
 140:	str	x0, [sp, #56]
 144:	ldr	d0, [sp, #16]
 148:	bl	0 <toRep>
 14c:	str	x0, [sp, #48]
 150:	ldr	x0, [sp, #56]
 154:	and	x0, x0, #0x7fffffffffffffff
 158:	str	x0, [sp, #40]
 15c:	ldr	x0, [sp, #48]
 160:	and	x0, x0, #0x7fffffffffffffff
 164:	str	x0, [sp, #32]
 168:	ldr	x1, [sp, #40]
 16c:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 170:	cmp	x1, x0
 174:	b.hi	188 <__gedf2+0x60>  // b.pmore
 178:	ldr	x1, [sp, #32]
 17c:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 180:	cmp	x1, x0
 184:	b.ls	190 <__gedf2+0x68>  // b.plast
 188:	mov	w0, #0xffffffff            	// #-1
 18c:	b	22c <__gedf2+0x104>
 190:	ldr	x1, [sp, #40]
 194:	ldr	x0, [sp, #32]
 198:	orr	x0, x1, x0
 19c:	cmp	x0, #0x0
 1a0:	b.ne	1ac <__gedf2+0x84>  // b.any
 1a4:	mov	w0, #0x0                   	// #0
 1a8:	b	22c <__gedf2+0x104>
 1ac:	ldr	x1, [sp, #56]
 1b0:	ldr	x0, [sp, #48]
 1b4:	and	x0, x1, x0
 1b8:	cmp	x0, #0x0
 1bc:	b.lt	1f8 <__gedf2+0xd0>  // b.tstop
 1c0:	ldr	x1, [sp, #56]
 1c4:	ldr	x0, [sp, #48]
 1c8:	cmp	x1, x0
 1cc:	b.ge	1d8 <__gedf2+0xb0>  // b.tcont
 1d0:	mov	w0, #0xffffffff            	// #-1
 1d4:	b	22c <__gedf2+0x104>
 1d8:	ldr	x1, [sp, #56]
 1dc:	ldr	x0, [sp, #48]
 1e0:	cmp	x1, x0
 1e4:	b.ne	1f0 <__gedf2+0xc8>  // b.any
 1e8:	mov	w0, #0x0                   	// #0
 1ec:	b	22c <__gedf2+0x104>
 1f0:	mov	w0, #0x1                   	// #1
 1f4:	b	22c <__gedf2+0x104>
 1f8:	ldr	x1, [sp, #56]
 1fc:	ldr	x0, [sp, #48]
 200:	cmp	x1, x0
 204:	b.le	210 <__gedf2+0xe8>
 208:	mov	w0, #0xffffffff            	// #-1
 20c:	b	22c <__gedf2+0x104>
 210:	ldr	x1, [sp, #56]
 214:	ldr	x0, [sp, #48]
 218:	cmp	x1, x0
 21c:	b.ne	228 <__gedf2+0x100>  // b.any
 220:	mov	w0, #0x0                   	// #0
 224:	b	22c <__gedf2+0x104>
 228:	mov	w0, #0x1                   	// #1
 22c:	ldp	x29, x30, [sp], #64
 230:	ret

0000000000000234 <__unorddf2>:
 234:	stp	x29, x30, [sp, #-48]!
 238:	mov	x29, sp
 23c:	str	d0, [sp, #24]
 240:	str	d1, [sp, #16]
 244:	ldr	d0, [sp, #24]
 248:	bl	0 <toRep>
 24c:	and	x0, x0, #0x7fffffffffffffff
 250:	str	x0, [sp, #40]
 254:	ldr	d0, [sp, #16]
 258:	bl	0 <toRep>
 25c:	and	x0, x0, #0x7fffffffffffffff
 260:	str	x0, [sp, #32]
 264:	ldr	x1, [sp, #40]
 268:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 26c:	cmp	x1, x0
 270:	b.hi	284 <__unorddf2+0x50>  // b.pmore
 274:	ldr	x1, [sp, #32]
 278:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 27c:	cmp	x1, x0
 280:	b.ls	28c <__unorddf2+0x58>  // b.plast
 284:	mov	w0, #0x1                   	// #1
 288:	b	290 <__unorddf2+0x5c>
 28c:	mov	w0, #0x0                   	// #0
 290:	ldp	x29, x30, [sp], #48
 294:	ret

comparesf2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <toRep>:
   0:	sub	sp, sp, #0x20
   4:	str	s0, [sp, #12]
   8:	ldr	s0, [sp, #12]
   c:	str	s0, [sp, #24]
  10:	ldr	w0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__cmpsf2>:
  1c:	stp	x29, x30, [sp, #-48]!
  20:	mov	x29, sp
  24:	str	s0, [sp, #28]
  28:	str	s1, [sp, #24]
  2c:	ldr	s0, [sp, #28]
  30:	bl	0 <toRep>
  34:	str	w0, [sp, #44]
  38:	ldr	s0, [sp, #24]
  3c:	bl	0 <toRep>
  40:	str	w0, [sp, #40]
  44:	ldr	w0, [sp, #44]
  48:	and	w0, w0, #0x7fffffff
  4c:	str	w0, [sp, #36]
  50:	ldr	w0, [sp, #40]
  54:	and	w0, w0, #0x7fffffff
  58:	str	w0, [sp, #32]
  5c:	ldr	w1, [sp, #36]
  60:	mov	w0, #0x7f800000            	// #2139095040
  64:	cmp	w1, w0
  68:	b.hi	7c <__cmpsf2+0x60>  // b.pmore
  6c:	ldr	w1, [sp, #32]
  70:	mov	w0, #0x7f800000            	// #2139095040
  74:	cmp	w1, w0
  78:	b.ls	84 <__cmpsf2+0x68>  // b.plast
  7c:	mov	w0, #0x1                   	// #1
  80:	b	120 <__cmpsf2+0x104>
  84:	ldr	w1, [sp, #36]
  88:	ldr	w0, [sp, #32]
  8c:	orr	w0, w1, w0
  90:	cmp	w0, #0x0
  94:	b.ne	a0 <__cmpsf2+0x84>  // b.any
  98:	mov	w0, #0x0                   	// #0
  9c:	b	120 <__cmpsf2+0x104>
  a0:	ldr	w1, [sp, #44]
  a4:	ldr	w0, [sp, #40]
  a8:	and	w0, w1, w0
  ac:	cmp	w0, #0x0
  b0:	b.lt	ec <__cmpsf2+0xd0>  // b.tstop
  b4:	ldr	w1, [sp, #44]
  b8:	ldr	w0, [sp, #40]
  bc:	cmp	w1, w0
  c0:	b.ge	cc <__cmpsf2+0xb0>  // b.tcont
  c4:	mov	w0, #0xffffffff            	// #-1
  c8:	b	120 <__cmpsf2+0x104>
  cc:	ldr	w1, [sp, #44]
  d0:	ldr	w0, [sp, #40]
  d4:	cmp	w1, w0
  d8:	b.ne	e4 <__cmpsf2+0xc8>  // b.any
  dc:	mov	w0, #0x0                   	// #0
  e0:	b	120 <__cmpsf2+0x104>
  e4:	mov	w0, #0x1                   	// #1
  e8:	b	120 <__cmpsf2+0x104>
  ec:	ldr	w1, [sp, #44]
  f0:	ldr	w0, [sp, #40]
  f4:	cmp	w1, w0
  f8:	b.le	104 <__cmpsf2+0xe8>
  fc:	mov	w0, #0xffffffff            	// #-1
 100:	b	120 <__cmpsf2+0x104>
 104:	ldr	w1, [sp, #44]
 108:	ldr	w0, [sp, #40]
 10c:	cmp	w1, w0
 110:	b.ne	11c <__cmpsf2+0x100>  // b.any
 114:	mov	w0, #0x0                   	// #0
 118:	b	120 <__cmpsf2+0x104>
 11c:	mov	w0, #0x1                   	// #1
 120:	ldp	x29, x30, [sp], #48
 124:	ret

0000000000000128 <__gesf2>:
 128:	stp	x29, x30, [sp, #-48]!
 12c:	mov	x29, sp
 130:	str	s0, [sp, #28]
 134:	str	s1, [sp, #24]
 138:	ldr	s0, [sp, #28]
 13c:	bl	0 <toRep>
 140:	str	w0, [sp, #44]
 144:	ldr	s0, [sp, #24]
 148:	bl	0 <toRep>
 14c:	str	w0, [sp, #40]
 150:	ldr	w0, [sp, #44]
 154:	and	w0, w0, #0x7fffffff
 158:	str	w0, [sp, #36]
 15c:	ldr	w0, [sp, #40]
 160:	and	w0, w0, #0x7fffffff
 164:	str	w0, [sp, #32]
 168:	ldr	w1, [sp, #36]
 16c:	mov	w0, #0x7f800000            	// #2139095040
 170:	cmp	w1, w0
 174:	b.hi	188 <__gesf2+0x60>  // b.pmore
 178:	ldr	w1, [sp, #32]
 17c:	mov	w0, #0x7f800000            	// #2139095040
 180:	cmp	w1, w0
 184:	b.ls	190 <__gesf2+0x68>  // b.plast
 188:	mov	w0, #0xffffffff            	// #-1
 18c:	b	22c <__gesf2+0x104>
 190:	ldr	w1, [sp, #36]
 194:	ldr	w0, [sp, #32]
 198:	orr	w0, w1, w0
 19c:	cmp	w0, #0x0
 1a0:	b.ne	1ac <__gesf2+0x84>  // b.any
 1a4:	mov	w0, #0x0                   	// #0
 1a8:	b	22c <__gesf2+0x104>
 1ac:	ldr	w1, [sp, #44]
 1b0:	ldr	w0, [sp, #40]
 1b4:	and	w0, w1, w0
 1b8:	cmp	w0, #0x0
 1bc:	b.lt	1f8 <__gesf2+0xd0>  // b.tstop
 1c0:	ldr	w1, [sp, #44]
 1c4:	ldr	w0, [sp, #40]
 1c8:	cmp	w1, w0
 1cc:	b.ge	1d8 <__gesf2+0xb0>  // b.tcont
 1d0:	mov	w0, #0xffffffff            	// #-1
 1d4:	b	22c <__gesf2+0x104>
 1d8:	ldr	w1, [sp, #44]
 1dc:	ldr	w0, [sp, #40]
 1e0:	cmp	w1, w0
 1e4:	b.ne	1f0 <__gesf2+0xc8>  // b.any
 1e8:	mov	w0, #0x0                   	// #0
 1ec:	b	22c <__gesf2+0x104>
 1f0:	mov	w0, #0x1                   	// #1
 1f4:	b	22c <__gesf2+0x104>
 1f8:	ldr	w1, [sp, #44]
 1fc:	ldr	w0, [sp, #40]
 200:	cmp	w1, w0
 204:	b.le	210 <__gesf2+0xe8>
 208:	mov	w0, #0xffffffff            	// #-1
 20c:	b	22c <__gesf2+0x104>
 210:	ldr	w1, [sp, #44]
 214:	ldr	w0, [sp, #40]
 218:	cmp	w1, w0
 21c:	b.ne	228 <__gesf2+0x100>  // b.any
 220:	mov	w0, #0x0                   	// #0
 224:	b	22c <__gesf2+0x104>
 228:	mov	w0, #0x1                   	// #1
 22c:	ldp	x29, x30, [sp], #48
 230:	ret

0000000000000234 <__unordsf2>:
 234:	stp	x29, x30, [sp, #-48]!
 238:	mov	x29, sp
 23c:	str	s0, [sp, #28]
 240:	str	s1, [sp, #24]
 244:	ldr	s0, [sp, #28]
 248:	bl	0 <toRep>
 24c:	and	w0, w0, #0x7fffffff
 250:	str	w0, [sp, #44]
 254:	ldr	s0, [sp, #24]
 258:	bl	0 <toRep>
 25c:	and	w0, w0, #0x7fffffff
 260:	str	w0, [sp, #40]
 264:	ldr	w1, [sp, #44]
 268:	mov	w0, #0x7f800000            	// #2139095040
 26c:	cmp	w1, w0
 270:	b.hi	284 <__unordsf2+0x50>  // b.pmore
 274:	ldr	w1, [sp, #40]
 278:	mov	w0, #0x7f800000            	// #2139095040
 27c:	cmp	w1, w0
 280:	b.ls	28c <__unordsf2+0x58>  // b.plast
 284:	mov	w0, #0x1                   	// #1
 288:	b	290 <__unordsf2+0x5c>
 28c:	mov	w0, #0x0                   	// #0
 290:	ldp	x29, x30, [sp], #48
 294:	ret

ctzdi2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__ctzdi2>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	str	x0, [sp, #16]
  10:	ldr	w0, [sp, #16]
  14:	cmp	w0, #0x0
  18:	cset	w0, eq  // eq = none
  1c:	and	w0, w0, #0xff
  20:	neg	w0, w0
  24:	str	w0, [sp, #28]
  28:	ldr	w1, [sp, #20]
  2c:	ldr	w0, [sp, #28]
  30:	and	w0, w1, w0
  34:	mov	w2, w0
  38:	ldr	w0, [sp, #16]
  3c:	ldr	w1, [sp, #28]
  40:	mvn	w1, w1
  44:	and	w0, w0, w1
  48:	orr	w0, w2, w0
  4c:	rbit	w1, w0
  50:	clz	w1, w1
  54:	ldr	w0, [sp, #28]
  58:	and	w0, w0, #0x20
  5c:	add	w0, w1, w0
  60:	add	sp, sp, #0x20
  64:	ret

ctzsi2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__ctzsi2>:
   0:	sub	sp, sp, #0x20
   4:	str	w0, [sp, #12]
   8:	ldr	w0, [sp, #12]
   c:	str	w0, [sp, #28]
  10:	ldr	w0, [sp, #28]
  14:	and	w0, w0, #0xffff
  18:	cmp	w0, #0x0
  1c:	b.ne	28 <__ctzsi2+0x28>  // b.any
  20:	mov	w0, #0x10                  	// #16
  24:	b	2c <__ctzsi2+0x2c>
  28:	mov	w0, #0x0                   	// #0
  2c:	str	w0, [sp, #24]
  30:	ldr	w0, [sp, #24]
  34:	ldr	w1, [sp, #28]
  38:	lsr	w0, w1, w0
  3c:	str	w0, [sp, #28]
  40:	ldr	w0, [sp, #24]
  44:	str	w0, [sp, #20]
  48:	ldr	w0, [sp, #28]
  4c:	and	w0, w0, #0xff
  50:	cmp	w0, #0x0
  54:	b.ne	60 <__ctzsi2+0x60>  // b.any
  58:	mov	w0, #0x8                   	// #8
  5c:	b	64 <__ctzsi2+0x64>
  60:	mov	w0, #0x0                   	// #0
  64:	str	w0, [sp, #24]
  68:	ldr	w0, [sp, #24]
  6c:	ldr	w1, [sp, #28]
  70:	lsr	w0, w1, w0
  74:	str	w0, [sp, #28]
  78:	ldr	w0, [sp, #24]
  7c:	ldr	w1, [sp, #20]
  80:	add	w0, w1, w0
  84:	str	w0, [sp, #20]
  88:	ldr	w0, [sp, #28]
  8c:	and	w0, w0, #0xf
  90:	cmp	w0, #0x0
  94:	b.ne	a0 <__ctzsi2+0xa0>  // b.any
  98:	mov	w0, #0x4                   	// #4
  9c:	b	a4 <__ctzsi2+0xa4>
  a0:	mov	w0, #0x0                   	// #0
  a4:	str	w0, [sp, #24]
  a8:	ldr	w0, [sp, #24]
  ac:	ldr	w1, [sp, #28]
  b0:	lsr	w0, w1, w0
  b4:	str	w0, [sp, #28]
  b8:	ldr	w0, [sp, #24]
  bc:	ldr	w1, [sp, #20]
  c0:	add	w0, w1, w0
  c4:	str	w0, [sp, #20]
  c8:	ldr	w0, [sp, #28]
  cc:	and	w0, w0, #0x3
  d0:	cmp	w0, #0x0
  d4:	b.ne	e0 <__ctzsi2+0xe0>  // b.any
  d8:	mov	w0, #0x2                   	// #2
  dc:	b	e4 <__ctzsi2+0xe4>
  e0:	mov	w0, #0x0                   	// #0
  e4:	str	w0, [sp, #24]
  e8:	ldr	w0, [sp, #24]
  ec:	ldr	w1, [sp, #28]
  f0:	lsr	w0, w1, w0
  f4:	str	w0, [sp, #28]
  f8:	ldr	w0, [sp, #28]
  fc:	and	w0, w0, #0x3
 100:	str	w0, [sp, #28]
 104:	ldr	w0, [sp, #24]
 108:	ldr	w1, [sp, #20]
 10c:	add	w0, w1, w0
 110:	str	w0, [sp, #20]
 114:	ldr	w0, [sp, #28]
 118:	lsr	w0, w0, #1
 11c:	mov	w1, #0x2                   	// #2
 120:	sub	w0, w1, w0
 124:	ldr	w1, [sp, #28]
 128:	and	w1, w1, #0x1
 12c:	cmp	w1, #0x0
 130:	cset	w1, eq  // eq = none
 134:	and	w1, w1, #0xff
 138:	neg	w1, w1
 13c:	and	w1, w0, w1
 140:	ldr	w0, [sp, #20]
 144:	add	w0, w1, w0
 148:	add	sp, sp, #0x20
 14c:	ret

ctzti2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__ctzti2>:
   0:	sub	sp, sp, #0x30
   4:	stp	x0, x1, [sp]
   8:	ldp	x0, x1, [sp]
   c:	stp	x0, x1, [sp, #16]
  10:	ldr	x0, [sp, #16]
  14:	cmp	x0, #0x0
  18:	cset	w0, eq  // eq = none
  1c:	and	w0, w0, #0xff
  20:	neg	w0, w0
  24:	sxtw	x0, w0
  28:	str	x0, [sp, #40]
  2c:	ldr	x1, [sp, #24]
  30:	ldr	x0, [sp, #40]
  34:	and	x0, x1, x0
  38:	mov	x2, x0
  3c:	ldr	x0, [sp, #16]
  40:	ldr	x1, [sp, #40]
  44:	mvn	x1, x1
  48:	and	x0, x0, x1
  4c:	orr	x0, x2, x0
  50:	rbit	x0, x0
  54:	clz	x0, x0
  58:	mov	w1, w0
  5c:	ldr	x0, [sp, #40]
  60:	and	w0, w0, #0x40
  64:	add	w0, w1, w0
  68:	add	sp, sp, #0x30
  6c:	ret

divdc3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <rep_clz>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	clz	x0, x0
  10:	add	sp, sp, #0x10
  14:	ret

0000000000000018 <toRep>:
  18:	sub	sp, sp, #0x20
  1c:	str	d0, [sp, #8]
  20:	ldr	d0, [sp, #8]
  24:	str	d0, [sp, #24]
  28:	ldr	x0, [sp, #24]
  2c:	add	sp, sp, #0x20
  30:	ret

0000000000000034 <fromRep>:
  34:	sub	sp, sp, #0x20
  38:	str	x0, [sp, #8]
  3c:	ldr	x0, [sp, #8]
  40:	str	x0, [sp, #24]
  44:	ldr	d0, [sp, #24]
  48:	add	sp, sp, #0x20
  4c:	ret

0000000000000050 <normalize>:
  50:	stp	x29, x30, [sp, #-64]!
  54:	mov	x29, sp
  58:	str	x19, [sp, #16]
  5c:	str	x0, [sp, #40]
  60:	ldr	x0, [sp, #40]
  64:	ldr	x0, [x0]
  68:	bl	0 <rep_clz>
  6c:	mov	w19, w0
  70:	mov	x0, #0x10000000000000      	// #4503599627370496
  74:	bl	0 <rep_clz>
  78:	sub	w0, w19, w0
  7c:	str	w0, [sp, #60]
  80:	ldr	x0, [sp, #40]
  84:	ldr	x1, [x0]
  88:	ldr	w0, [sp, #60]
  8c:	lsl	x1, x1, x0
  90:	ldr	x0, [sp, #40]
  94:	str	x1, [x0]
  98:	mov	w1, #0x1                   	// #1
  9c:	ldr	w0, [sp, #60]
  a0:	sub	w0, w1, w0
  a4:	ldr	x19, [sp, #16]
  a8:	ldp	x29, x30, [sp], #64
  ac:	ret

00000000000000b0 <__compiler_rt_logbX>:
  b0:	stp	x29, x30, [sp, #-48]!
  b4:	mov	x29, sp
  b8:	str	d0, [sp, #24]
  bc:	ldr	d0, [sp, #24]
  c0:	bl	18 <toRep>
  c4:	str	x0, [sp, #32]
  c8:	ldr	x0, [sp, #32]
  cc:	lsr	x0, x0, #52
  d0:	and	w0, w0, #0x7ff
  d4:	str	w0, [sp, #44]
  d8:	ldr	w0, [sp, #44]
  dc:	cmp	w0, #0x7ff
  e0:	b.ne	114 <__compiler_rt_logbX+0x64>  // b.any
  e4:	ldr	x0, [sp, #32]
  e8:	cmp	x0, #0x0
  ec:	b.ge	100 <__compiler_rt_logbX+0x50>  // b.tcont
  f0:	ldr	d1, [sp, #24]
  f4:	ldr	d0, [sp, #24]
  f8:	fcmp	d1, d0
  fc:	b.eq	108 <__compiler_rt_logbX+0x58>  // b.none
 100:	ldr	d0, [sp, #24]
 104:	b	190 <__compiler_rt_logbX+0xe0>
 108:	ldr	d0, [sp, #24]
 10c:	fneg	d0, d0
 110:	b	190 <__compiler_rt_logbX+0xe0>
 114:	ldr	d0, [sp, #24]
 118:	fcmp	d0, #0.0
 11c:	b.ne	12c <__compiler_rt_logbX+0x7c>  // b.any
 120:	mov	x0, #0xfff0000000000000    	// #-4503599627370496
 124:	bl	34 <fromRep>
 128:	b	190 <__compiler_rt_logbX+0xe0>
 12c:	ldr	w0, [sp, #44]
 130:	cmp	w0, #0x0
 134:	b.eq	148 <__compiler_rt_logbX+0x98>  // b.none
 138:	ldr	w0, [sp, #44]
 13c:	sub	w0, w0, #0x3ff
 140:	scvtf	d0, w0
 144:	b	190 <__compiler_rt_logbX+0xe0>
 148:	ldr	x0, [sp, #32]
 14c:	and	x0, x0, #0x7fffffffffffffff
 150:	str	x0, [sp, #32]
 154:	add	x0, sp, #0x20
 158:	bl	50 <normalize>
 15c:	mov	w1, w0
 160:	mov	w0, #0x1                   	// #1
 164:	sub	w0, w0, w1
 168:	str	w0, [sp, #40]
 16c:	ldr	x0, [sp, #32]
 170:	lsr	x0, x0, #52
 174:	and	w0, w0, #0x7ff
 178:	str	w0, [sp, #44]
 17c:	ldr	w0, [sp, #44]
 180:	sub	w1, w0, #0x3ff
 184:	ldr	w0, [sp, #40]
 188:	sub	w0, w1, w0
 18c:	scvtf	d0, w0
 190:	ldp	x29, x30, [sp], #48
 194:	ret

0000000000000198 <__compiler_rt_logb>:
 198:	stp	x29, x30, [sp, #-32]!
 19c:	mov	x29, sp
 1a0:	str	d0, [sp, #24]
 1a4:	ldr	d0, [sp, #24]
 1a8:	bl	b0 <__compiler_rt_logbX>
 1ac:	ldp	x29, x30, [sp], #32
 1b0:	ret

00000000000001b4 <__divdc3>:
 1b4:	stp	x29, x30, [sp, #-144]!
 1b8:	mov	x29, sp
 1bc:	str	d0, [sp, #40]
 1c0:	str	d1, [sp, #32]
 1c4:	str	d2, [sp, #24]
 1c8:	str	d3, [sp, #16]
 1cc:	str	wzr, [sp, #124]
 1d0:	ldr	d0, [sp, #24]
 1d4:	fabs	d0, d0
 1d8:	ldr	d1, [sp, #16]
 1dc:	fabs	d1, d1
 1e0:	fmaxnm	d0, d0, d1
 1e4:	bl	198 <__compiler_rt_logb>
 1e8:	str	d0, [sp, #112]
 1ec:	ldr	d0, [sp, #112]
 1f0:	str	d0, [sp, #104]
 1f4:	ldr	d0, [sp, #104]
 1f8:	fabs	d0, d0
 1fc:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 200:	fmov	d1, x0
 204:	fcmp	d0, d1
 208:	b.gt	224 <__divdc3+0x70>
 20c:	ldr	d1, [sp, #104]
 210:	ldr	d0, [sp, #104]
 214:	fcmp	d1, d0
 218:	b.vs	224 <__divdc3+0x70>
 21c:	mov	w0, #0x1                   	// #1
 220:	b	228 <__divdc3+0x74>
 224:	mov	w0, #0x0                   	// #0
 228:	cmp	w0, #0x0
 22c:	b.eq	264 <__divdc3+0xb0>  // b.none
 230:	ldr	d0, [sp, #112]
 234:	fcvtzs	w0, d0
 238:	str	w0, [sp, #124]
 23c:	ldr	w0, [sp, #124]
 240:	neg	w0, w0
 244:	ldr	d0, [sp, #24]
 248:	bl	0 <scalbn>
 24c:	str	d0, [sp, #24]
 250:	ldr	w0, [sp, #124]
 254:	neg	w0, w0
 258:	ldr	d0, [sp, #16]
 25c:	bl	0 <scalbn>
 260:	str	d0, [sp, #16]
 264:	ldr	d0, [sp, #24]
 268:	fmul	d1, d0, d0
 26c:	ldr	d0, [sp, #16]
 270:	fmul	d0, d0, d0
 274:	fadd	d0, d1, d0
 278:	str	d0, [sp, #96]
 27c:	ldr	d1, [sp, #40]
 280:	ldr	d0, [sp, #24]
 284:	fmul	d1, d1, d0
 288:	ldr	d2, [sp, #32]
 28c:	ldr	d0, [sp, #16]
 290:	fmul	d0, d2, d0
 294:	fadd	d1, d1, d0
 298:	ldr	d0, [sp, #96]
 29c:	fdiv	d0, d1, d0
 2a0:	ldr	w0, [sp, #124]
 2a4:	neg	w0, w0
 2a8:	bl	0 <scalbn>
 2ac:	str	d0, [sp, #136]
 2b0:	ldr	d0, [sp, #128]
 2b4:	ldr	d1, [sp, #136]
 2b8:	str	d1, [sp, #80]
 2bc:	str	d0, [sp, #88]
 2c0:	ldr	d1, [sp, #32]
 2c4:	ldr	d0, [sp, #24]
 2c8:	fmul	d1, d1, d0
 2cc:	ldr	d2, [sp, #40]
 2d0:	ldr	d0, [sp, #16]
 2d4:	fmul	d0, d2, d0
 2d8:	fsub	d1, d1, d0
 2dc:	ldr	d0, [sp, #96]
 2e0:	fdiv	d0, d1, d0
 2e4:	ldr	w0, [sp, #124]
 2e8:	neg	w0, w0
 2ec:	bl	0 <scalbn>
 2f0:	str	d0, [sp, #128]
 2f4:	ldr	d0, [sp, #128]
 2f8:	ldr	d1, [sp, #136]
 2fc:	str	d1, [sp, #80]
 300:	str	d0, [sp, #88]
 304:	ldr	d0, [sp, #136]
 308:	fcmp	d0, d0
 30c:	b.vc	720 <__divdc3+0x56c>
 310:	ldr	d0, [sp, #128]
 314:	fcmp	d0, d0
 318:	b.vc	720 <__divdc3+0x56c>
 31c:	ldr	d0, [sp, #96]
 320:	fcmp	d0, #0.0
 324:	b.ne	3b4 <__divdc3+0x200>  // b.any
 328:	ldr	d1, [sp, #40]
 32c:	ldr	d0, [sp, #40]
 330:	fcmp	d1, d0
 334:	b.vc	348 <__divdc3+0x194>
 338:	ldr	d1, [sp, #32]
 33c:	ldr	d0, [sp, #32]
 340:	fcmp	d1, d0
 344:	b.vs	3b4 <__divdc3+0x200>
 348:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 34c:	fmov	d1, x0
 350:	ldr	d0, [sp, #24]
 354:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 358:	fmov	d2, x0
 35c:	bif	v0.8b, v1.8b, v2.8b
 360:	ldr	d1, [sp, #40]
 364:	fmul	d0, d1, d0
 368:	str	d0, [sp, #136]
 36c:	ldr	d0, [sp, #128]
 370:	ldr	d1, [sp, #136]
 374:	str	d1, [sp, #80]
 378:	str	d0, [sp, #88]
 37c:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 380:	fmov	d1, x0
 384:	ldr	d0, [sp, #24]
 388:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 38c:	fmov	d2, x0
 390:	bif	v0.8b, v1.8b, v2.8b
 394:	ldr	d1, [sp, #32]
 398:	fmul	d0, d1, d0
 39c:	str	d0, [sp, #128]
 3a0:	ldr	d0, [sp, #128]
 3a4:	ldr	d1, [sp, #136]
 3a8:	str	d1, [sp, #80]
 3ac:	str	d0, [sp, #88]
 3b0:	b	720 <__divdc3+0x56c>
 3b4:	ldr	d0, [sp, #40]
 3b8:	fabs	d0, d0
 3bc:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 3c0:	fmov	d1, x0
 3c4:	fcmp	d0, d1
 3c8:	cset	w0, le
 3cc:	and	w0, w0, #0xff
 3d0:	eor	w0, w0, #0x1
 3d4:	and	w0, w0, #0xff
 3d8:	cmp	w0, #0x0
 3dc:	b.ne	40c <__divdc3+0x258>  // b.any
 3e0:	ldr	d0, [sp, #32]
 3e4:	fabs	d0, d0
 3e8:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 3ec:	fmov	d1, x0
 3f0:	fcmp	d0, d1
 3f4:	cset	w0, le
 3f8:	and	w0, w0, #0xff
 3fc:	eor	w0, w0, #0x1
 400:	and	w0, w0, #0xff
 404:	cmp	w0, #0x0
 408:	b.eq	580 <__divdc3+0x3cc>  // b.none
 40c:	ldr	d0, [sp, #24]
 410:	str	d0, [sp, #72]
 414:	ldr	d0, [sp, #72]
 418:	fabs	d0, d0
 41c:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 420:	fmov	d1, x0
 424:	fcmp	d0, d1
 428:	b.gt	444 <__divdc3+0x290>
 42c:	ldr	d1, [sp, #72]
 430:	ldr	d0, [sp, #72]
 434:	fcmp	d1, d0
 438:	b.vs	444 <__divdc3+0x290>
 43c:	mov	w0, #0x1                   	// #1
 440:	b	448 <__divdc3+0x294>
 444:	mov	w0, #0x0                   	// #0
 448:	cmp	w0, #0x0
 44c:	b.eq	580 <__divdc3+0x3cc>  // b.none
 450:	ldr	d0, [sp, #16]
 454:	str	d0, [sp, #64]
 458:	ldr	d0, [sp, #64]
 45c:	fabs	d0, d0
 460:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 464:	fmov	d1, x0
 468:	fcmp	d0, d1
 46c:	b.gt	488 <__divdc3+0x2d4>
 470:	ldr	d1, [sp, #64]
 474:	ldr	d0, [sp, #64]
 478:	fcmp	d1, d0
 47c:	b.vs	488 <__divdc3+0x2d4>
 480:	mov	w0, #0x1                   	// #1
 484:	b	48c <__divdc3+0x2d8>
 488:	mov	w0, #0x0                   	// #0
 48c:	cmp	w0, #0x0
 490:	b.eq	580 <__divdc3+0x3cc>  // b.none
 494:	ldr	d0, [sp, #40]
 498:	fabs	d0, d0
 49c:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 4a0:	fmov	d1, x0
 4a4:	fcmp	d0, d1
 4a8:	b.gt	4b4 <__divdc3+0x300>
 4ac:	movi	d0, #0x0
 4b0:	b	4b8 <__divdc3+0x304>
 4b4:	fmov	d0, #1.000000000000000000e+00
 4b8:	ldr	d1, [sp, #40]
 4bc:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 4c0:	fmov	d2, x0
 4c4:	bit	v0.8b, v1.8b, v2.8b
 4c8:	str	d0, [sp, #40]
 4cc:	ldr	d0, [sp, #32]
 4d0:	fabs	d0, d0
 4d4:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 4d8:	fmov	d1, x0
 4dc:	fcmp	d0, d1
 4e0:	b.gt	4ec <__divdc3+0x338>
 4e4:	movi	d0, #0x0
 4e8:	b	4f0 <__divdc3+0x33c>
 4ec:	fmov	d0, #1.000000000000000000e+00
 4f0:	ldr	d1, [sp, #32]
 4f4:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 4f8:	fmov	d2, x0
 4fc:	bit	v0.8b, v1.8b, v2.8b
 500:	str	d0, [sp, #32]
 504:	ldr	d1, [sp, #40]
 508:	ldr	d0, [sp, #24]
 50c:	fmul	d1, d1, d0
 510:	ldr	d2, [sp, #32]
 514:	ldr	d0, [sp, #16]
 518:	fmul	d0, d2, d0
 51c:	fadd	d0, d1, d0
 520:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 524:	fmov	d1, x0
 528:	fmul	d0, d0, d1
 52c:	str	d0, [sp, #136]
 530:	ldr	d0, [sp, #128]
 534:	ldr	d1, [sp, #136]
 538:	str	d1, [sp, #80]
 53c:	str	d0, [sp, #88]
 540:	ldr	d1, [sp, #32]
 544:	ldr	d0, [sp, #24]
 548:	fmul	d1, d1, d0
 54c:	ldr	d2, [sp, #40]
 550:	ldr	d0, [sp, #16]
 554:	fmul	d0, d2, d0
 558:	fsub	d0, d1, d0
 55c:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 560:	fmov	d1, x0
 564:	fmul	d0, d0, d1
 568:	str	d0, [sp, #128]
 56c:	ldr	d0, [sp, #128]
 570:	ldr	d1, [sp, #136]
 574:	str	d1, [sp, #80]
 578:	str	d0, [sp, #88]
 57c:	b	720 <__divdc3+0x56c>
 580:	ldr	d0, [sp, #112]
 584:	fabs	d0, d0
 588:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 58c:	fmov	d1, x0
 590:	fcmp	d0, d1
 594:	cset	w0, le
 598:	and	w0, w0, #0xff
 59c:	eor	w0, w0, #0x1
 5a0:	and	w0, w0, #0xff
 5a4:	cmp	w0, #0x0
 5a8:	b.eq	720 <__divdc3+0x56c>  // b.none
 5ac:	ldr	d0, [sp, #112]
 5b0:	fcmpe	d0, #0.0
 5b4:	b.le	720 <__divdc3+0x56c>
 5b8:	ldr	d0, [sp, #40]
 5bc:	str	d0, [sp, #56]
 5c0:	ldr	d0, [sp, #56]
 5c4:	fabs	d0, d0
 5c8:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 5cc:	fmov	d1, x0
 5d0:	fcmp	d0, d1
 5d4:	b.gt	5f0 <__divdc3+0x43c>
 5d8:	ldr	d1, [sp, #56]
 5dc:	ldr	d0, [sp, #56]
 5e0:	fcmp	d1, d0
 5e4:	b.vs	5f0 <__divdc3+0x43c>
 5e8:	mov	w0, #0x1                   	// #1
 5ec:	b	5f4 <__divdc3+0x440>
 5f0:	mov	w0, #0x0                   	// #0
 5f4:	cmp	w0, #0x0
 5f8:	b.eq	720 <__divdc3+0x56c>  // b.none
 5fc:	ldr	d0, [sp, #32]
 600:	str	d0, [sp, #48]
 604:	ldr	d0, [sp, #48]
 608:	fabs	d0, d0
 60c:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 610:	fmov	d1, x0
 614:	fcmp	d0, d1
 618:	b.gt	634 <__divdc3+0x480>
 61c:	ldr	d1, [sp, #48]
 620:	ldr	d0, [sp, #48]
 624:	fcmp	d1, d0
 628:	b.vs	634 <__divdc3+0x480>
 62c:	mov	w0, #0x1                   	// #1
 630:	b	638 <__divdc3+0x484>
 634:	mov	w0, #0x0                   	// #0
 638:	cmp	w0, #0x0
 63c:	b.eq	720 <__divdc3+0x56c>  // b.none
 640:	ldr	d0, [sp, #24]
 644:	fabs	d0, d0
 648:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 64c:	fmov	d1, x0
 650:	fcmp	d0, d1
 654:	b.gt	660 <__divdc3+0x4ac>
 658:	movi	d0, #0x0
 65c:	b	664 <__divdc3+0x4b0>
 660:	fmov	d0, #1.000000000000000000e+00
 664:	ldr	d1, [sp, #24]
 668:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 66c:	fmov	d2, x0
 670:	bit	v0.8b, v1.8b, v2.8b
 674:	str	d0, [sp, #24]
 678:	ldr	d0, [sp, #16]
 67c:	fabs	d0, d0
 680:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 684:	fmov	d1, x0
 688:	fcmp	d0, d1
 68c:	b.gt	698 <__divdc3+0x4e4>
 690:	movi	d0, #0x0
 694:	b	69c <__divdc3+0x4e8>
 698:	fmov	d0, #1.000000000000000000e+00
 69c:	ldr	d1, [sp, #16]
 6a0:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 6a4:	fmov	d2, x0
 6a8:	bit	v0.8b, v1.8b, v2.8b
 6ac:	str	d0, [sp, #16]
 6b0:	ldr	d1, [sp, #40]
 6b4:	ldr	d0, [sp, #24]
 6b8:	fmul	d1, d1, d0
 6bc:	ldr	d2, [sp, #32]
 6c0:	ldr	d0, [sp, #16]
 6c4:	fmul	d0, d2, d0
 6c8:	fadd	d0, d1, d0
 6cc:	movi	d1, #0x0
 6d0:	fmul	d0, d0, d1
 6d4:	str	d0, [sp, #136]
 6d8:	ldr	d0, [sp, #128]
 6dc:	ldr	d1, [sp, #136]
 6e0:	str	d1, [sp, #80]
 6e4:	str	d0, [sp, #88]
 6e8:	ldr	d1, [sp, #32]
 6ec:	ldr	d0, [sp, #24]
 6f0:	fmul	d1, d1, d0
 6f4:	ldr	d2, [sp, #40]
 6f8:	ldr	d0, [sp, #16]
 6fc:	fmul	d0, d2, d0
 700:	fsub	d0, d1, d0
 704:	movi	d1, #0x0
 708:	fmul	d0, d0, d1
 70c:	str	d0, [sp, #128]
 710:	ldr	d0, [sp, #128]
 714:	ldr	d1, [sp, #136]
 718:	str	d1, [sp, #80]
 71c:	str	d0, [sp, #88]
 720:	ldr	d1, [sp, #136]
 724:	ldr	d0, [sp, #128]
 728:	fmov	d2, d1
 72c:	fmov	d1, d0
 730:	fmov	d0, d2
 734:	ldp	x29, x30, [sp], #144
 738:	ret

divdf3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <rep_clz>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	clz	x0, x0
  10:	add	sp, sp, #0x10
  14:	ret

0000000000000018 <wideMultiply>:
  18:	sub	sp, sp, #0x50
  1c:	str	x0, [sp, #24]
  20:	str	x1, [sp, #16]
  24:	str	x2, [sp, #8]
  28:	str	x3, [sp]
  2c:	ldr	x0, [sp, #24]
  30:	and	x1, x0, #0xffffffff
  34:	ldr	x0, [sp, #16]
  38:	and	x0, x0, #0xffffffff
  3c:	mul	x0, x1, x0
  40:	str	x0, [sp, #72]
  44:	ldr	x0, [sp, #24]
  48:	and	x1, x0, #0xffffffff
  4c:	ldr	x0, [sp, #16]
  50:	lsr	x0, x0, #32
  54:	mul	x0, x1, x0
  58:	str	x0, [sp, #64]
  5c:	ldr	x0, [sp, #24]
  60:	lsr	x1, x0, #32
  64:	ldr	x0, [sp, #16]
  68:	and	x0, x0, #0xffffffff
  6c:	mul	x0, x1, x0
  70:	str	x0, [sp, #56]
  74:	ldr	x0, [sp, #24]
  78:	lsr	x1, x0, #32
  7c:	ldr	x0, [sp, #16]
  80:	lsr	x0, x0, #32
  84:	mul	x0, x1, x0
  88:	str	x0, [sp, #48]
  8c:	ldr	x0, [sp, #72]
  90:	and	x0, x0, #0xffffffff
  94:	str	x0, [sp, #40]
  98:	ldr	x0, [sp, #72]
  9c:	lsr	x1, x0, #32
  a0:	ldr	x0, [sp, #64]
  a4:	and	x0, x0, #0xffffffff
  a8:	add	x1, x1, x0
  ac:	ldr	x0, [sp, #56]
  b0:	and	x0, x0, #0xffffffff
  b4:	add	x0, x1, x0
  b8:	str	x0, [sp, #32]
  bc:	ldr	x0, [sp, #32]
  c0:	lsl	x1, x0, #32
  c4:	ldr	x0, [sp, #40]
  c8:	add	x1, x1, x0
  cc:	ldr	x0, [sp]
  d0:	str	x1, [x0]
  d4:	ldr	x0, [sp, #64]
  d8:	lsr	x1, x0, #32
  dc:	ldr	x0, [sp, #56]
  e0:	lsr	x0, x0, #32
  e4:	add	x1, x1, x0
  e8:	ldr	x0, [sp, #32]
  ec:	lsr	x0, x0, #32
  f0:	add	x1, x1, x0
  f4:	ldr	x0, [sp, #48]
  f8:	add	x1, x1, x0
  fc:	ldr	x0, [sp, #8]
 100:	str	x1, [x0]
 104:	nop
 108:	add	sp, sp, #0x50
 10c:	ret

0000000000000110 <toRep>:
 110:	sub	sp, sp, #0x20
 114:	str	d0, [sp, #8]
 118:	ldr	d0, [sp, #8]
 11c:	str	d0, [sp, #24]
 120:	ldr	x0, [sp, #24]
 124:	add	sp, sp, #0x20
 128:	ret

000000000000012c <fromRep>:
 12c:	sub	sp, sp, #0x20
 130:	str	x0, [sp, #8]
 134:	ldr	x0, [sp, #8]
 138:	str	x0, [sp, #24]
 13c:	ldr	d0, [sp, #24]
 140:	add	sp, sp, #0x20
 144:	ret

0000000000000148 <normalize>:
 148:	stp	x29, x30, [sp, #-64]!
 14c:	mov	x29, sp
 150:	str	x19, [sp, #16]
 154:	str	x0, [sp, #40]
 158:	ldr	x0, [sp, #40]
 15c:	ldr	x0, [x0]
 160:	bl	0 <rep_clz>
 164:	mov	w19, w0
 168:	mov	x0, #0x10000000000000      	// #4503599627370496
 16c:	bl	0 <rep_clz>
 170:	sub	w0, w19, w0
 174:	str	w0, [sp, #60]
 178:	ldr	x0, [sp, #40]
 17c:	ldr	x1, [x0]
 180:	ldr	w0, [sp, #60]
 184:	lsl	x1, x1, x0
 188:	ldr	x0, [sp, #40]
 18c:	str	x1, [x0]
 190:	mov	w1, #0x1                   	// #1
 194:	ldr	w0, [sp, #60]
 198:	sub	w0, w1, w0
 19c:	ldr	x19, [sp, #16]
 1a0:	ldp	x29, x30, [sp], #64
 1a4:	ret

00000000000001a8 <__divdf3>:
 1a8:	stp	x29, x30, [sp, #-208]!
 1ac:	mov	x29, sp
 1b0:	str	x19, [sp, #16]
 1b4:	str	d0, [sp, #40]
 1b8:	str	d1, [sp, #32]
 1bc:	ldr	d0, [sp, #40]
 1c0:	bl	110 <toRep>
 1c4:	lsr	x0, x0, #52
 1c8:	and	w0, w0, #0x7ff
 1cc:	str	w0, [sp, #188]
 1d0:	ldr	d0, [sp, #32]
 1d4:	bl	110 <toRep>
 1d8:	lsr	x0, x0, #52
 1dc:	and	w0, w0, #0x7ff
 1e0:	str	w0, [sp, #184]
 1e4:	ldr	d0, [sp, #40]
 1e8:	bl	110 <toRep>
 1ec:	mov	x19, x0
 1f0:	ldr	d0, [sp, #32]
 1f4:	bl	110 <toRep>
 1f8:	eor	x0, x19, x0
 1fc:	and	x0, x0, #0x8000000000000000
 200:	str	x0, [sp, #176]
 204:	ldr	d0, [sp, #40]
 208:	bl	110 <toRep>
 20c:	and	x0, x0, #0xfffffffffffff
 210:	str	x0, [sp, #72]
 214:	ldr	d0, [sp, #32]
 218:	bl	110 <toRep>
 21c:	and	x0, x0, #0xfffffffffffff
 220:	str	x0, [sp, #64]
 224:	str	wzr, [sp, #204]
 228:	ldr	w0, [sp, #188]
 22c:	sub	w0, w0, #0x1
 230:	cmp	w0, #0x7fd
 234:	b.hi	248 <__divdf3+0xa0>  // b.pmore
 238:	ldr	w0, [sp, #184]
 23c:	sub	w0, w0, #0x1
 240:	cmp	w0, #0x7fd
 244:	b.ls	3a8 <__divdf3+0x200>  // b.plast
 248:	ldr	d0, [sp, #40]
 24c:	bl	110 <toRep>
 250:	and	x0, x0, #0x7fffffffffffffff
 254:	str	x0, [sp, #168]
 258:	ldr	d0, [sp, #32]
 25c:	bl	110 <toRep>
 260:	and	x0, x0, #0x7fffffffffffffff
 264:	str	x0, [sp, #160]
 268:	ldr	x1, [sp, #168]
 26c:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 270:	cmp	x1, x0
 274:	b.ls	28c <__divdf3+0xe4>  // b.plast
 278:	ldr	d0, [sp, #40]
 27c:	bl	110 <toRep>
 280:	orr	x0, x0, #0x8000000000000
 284:	bl	12c <fromRep>
 288:	b	688 <__divdf3+0x4e0>
 28c:	ldr	x1, [sp, #160]
 290:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 294:	cmp	x1, x0
 298:	b.ls	2b0 <__divdf3+0x108>  // b.plast
 29c:	ldr	d0, [sp, #32]
 2a0:	bl	110 <toRep>
 2a4:	orr	x0, x0, #0x8000000000000
 2a8:	bl	12c <fromRep>
 2ac:	b	688 <__divdf3+0x4e0>
 2b0:	ldr	x1, [sp, #168]
 2b4:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 2b8:	cmp	x1, x0
 2bc:	b.ne	2f0 <__divdf3+0x148>  // b.any
 2c0:	ldr	x1, [sp, #160]
 2c4:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 2c8:	cmp	x1, x0
 2cc:	b.ne	2dc <__divdf3+0x134>  // b.any
 2d0:	mov	x0, #0x7ff8000000000000    	// #9221120237041090560
 2d4:	bl	12c <fromRep>
 2d8:	b	688 <__divdf3+0x4e0>
 2dc:	ldr	x1, [sp, #168]
 2e0:	ldr	x0, [sp, #176]
 2e4:	orr	x0, x1, x0
 2e8:	bl	12c <fromRep>
 2ec:	b	688 <__divdf3+0x4e0>
 2f0:	ldr	x1, [sp, #160]
 2f4:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 2f8:	cmp	x1, x0
 2fc:	b.ne	30c <__divdf3+0x164>  // b.any
 300:	ldr	x0, [sp, #176]
 304:	bl	12c <fromRep>
 308:	b	688 <__divdf3+0x4e0>
 30c:	ldr	x0, [sp, #168]
 310:	cmp	x0, #0x0
 314:	b.ne	33c <__divdf3+0x194>  // b.any
 318:	ldr	x0, [sp, #160]
 31c:	cmp	x0, #0x0
 320:	b.ne	330 <__divdf3+0x188>  // b.any
 324:	mov	x0, #0x7ff8000000000000    	// #9221120237041090560
 328:	bl	12c <fromRep>
 32c:	b	688 <__divdf3+0x4e0>
 330:	ldr	x0, [sp, #176]
 334:	bl	12c <fromRep>
 338:	b	688 <__divdf3+0x4e0>
 33c:	ldr	x0, [sp, #160]
 340:	cmp	x0, #0x0
 344:	b.ne	358 <__divdf3+0x1b0>  // b.any
 348:	ldr	x0, [sp, #176]
 34c:	orr	x0, x0, #0x7ff0000000000000
 350:	bl	12c <fromRep>
 354:	b	688 <__divdf3+0x4e0>
 358:	ldr	x1, [sp, #168]
 35c:	mov	x0, #0xfffffffffffff       	// #4503599627370495
 360:	cmp	x1, x0
 364:	b.hi	380 <__divdf3+0x1d8>  // b.pmore
 368:	add	x0, sp, #0x48
 36c:	bl	148 <normalize>
 370:	mov	w1, w0
 374:	ldr	w0, [sp, #204]
 378:	add	w0, w0, w1
 37c:	str	w0, [sp, #204]
 380:	ldr	x1, [sp, #160]
 384:	mov	x0, #0xfffffffffffff       	// #4503599627370495
 388:	cmp	x1, x0
 38c:	b.hi	3a8 <__divdf3+0x200>  // b.pmore
 390:	add	x0, sp, #0x40
 394:	bl	148 <normalize>
 398:	mov	w1, w0
 39c:	ldr	w0, [sp, #204]
 3a0:	sub	w0, w0, w1
 3a4:	str	w0, [sp, #204]
 3a8:	ldr	x0, [sp, #72]
 3ac:	orr	x0, x0, #0x10000000000000
 3b0:	str	x0, [sp, #72]
 3b4:	ldr	x0, [sp, #64]
 3b8:	orr	x0, x0, #0x10000000000000
 3bc:	str	x0, [sp, #64]
 3c0:	ldr	w1, [sp, #188]
 3c4:	ldr	w0, [sp, #184]
 3c8:	sub	w1, w1, w0
 3cc:	ldr	w0, [sp, #204]
 3d0:	add	w0, w1, w0
 3d4:	str	w0, [sp, #200]
 3d8:	ldr	x0, [sp, #64]
 3dc:	lsr	x0, x0, #21
 3e0:	str	w0, [sp, #156]
 3e4:	mov	w1, #0xf333                	// #62259
 3e8:	movk	w1, #0x7504, lsl #16
 3ec:	ldr	w0, [sp, #156]
 3f0:	sub	w0, w1, w0
 3f4:	str	w0, [sp, #152]
 3f8:	ldr	w1, [sp, #152]
 3fc:	ldr	w0, [sp, #156]
 400:	mul	x0, x1, x0
 404:	lsr	x0, x0, #32
 408:	neg	w0, w0
 40c:	str	w0, [sp, #148]
 410:	ldr	w1, [sp, #152]
 414:	ldr	w0, [sp, #148]
 418:	mul	x0, x1, x0
 41c:	lsr	x0, x0, #31
 420:	str	w0, [sp, #152]
 424:	ldr	w1, [sp, #152]
 428:	ldr	w0, [sp, #156]
 42c:	mul	x0, x1, x0
 430:	lsr	x0, x0, #32
 434:	neg	w0, w0
 438:	str	w0, [sp, #148]
 43c:	ldr	w1, [sp, #152]
 440:	ldr	w0, [sp, #148]
 444:	mul	x0, x1, x0
 448:	lsr	x0, x0, #31
 44c:	str	w0, [sp, #152]
 450:	ldr	w1, [sp, #152]
 454:	ldr	w0, [sp, #156]
 458:	mul	x0, x1, x0
 45c:	lsr	x0, x0, #32
 460:	neg	w0, w0
 464:	str	w0, [sp, #148]
 468:	ldr	w1, [sp, #152]
 46c:	ldr	w0, [sp, #148]
 470:	mul	x0, x1, x0
 474:	lsr	x0, x0, #31
 478:	str	w0, [sp, #152]
 47c:	ldr	w0, [sp, #152]
 480:	sub	w0, w0, #0x1
 484:	str	w0, [sp, #152]
 488:	ldr	x0, [sp, #64]
 48c:	lsl	w0, w0, #11
 490:	str	w0, [sp, #144]
 494:	ldr	w1, [sp, #152]
 498:	ldr	w0, [sp, #156]
 49c:	mul	x1, x1, x0
 4a0:	ldr	w2, [sp, #152]
 4a4:	ldr	w0, [sp, #144]
 4a8:	mul	x0, x2, x0
 4ac:	lsr	x0, x0, #32
 4b0:	add	x0, x1, x0
 4b4:	neg	x0, x0
 4b8:	str	x0, [sp, #136]
 4bc:	ldr	x0, [sp, #136]
 4c0:	lsr	x0, x0, #32
 4c4:	str	w0, [sp, #132]
 4c8:	ldr	x0, [sp, #136]
 4cc:	str	w0, [sp, #128]
 4d0:	ldr	w1, [sp, #152]
 4d4:	ldr	w0, [sp, #132]
 4d8:	mul	x1, x1, x0
 4dc:	ldr	w2, [sp, #152]
 4e0:	ldr	w0, [sp, #128]
 4e4:	mul	x0, x2, x0
 4e8:	lsr	x0, x0, #32
 4ec:	add	x0, x1, x0
 4f0:	str	x0, [sp, #120]
 4f4:	ldr	x0, [sp, #120]
 4f8:	sub	x0, x0, #0x2
 4fc:	str	x0, [sp, #120]
 500:	ldr	x0, [sp, #72]
 504:	lsl	x0, x0, #2
 508:	add	x2, sp, #0x30
 50c:	add	x1, sp, #0x38
 510:	mov	x3, x2
 514:	mov	x2, x1
 518:	ldr	x1, [sp, #120]
 51c:	bl	18 <wideMultiply>
 520:	ldr	x1, [sp, #56]
 524:	mov	x0, #0x1fffffffffffff      	// #9007199254740991
 528:	cmp	x1, x0
 52c:	b.hi	55c <__divdf3+0x3b4>  // b.pmore
 530:	ldr	x0, [sp, #72]
 534:	lsl	x1, x0, #53
 538:	ldr	x2, [sp, #56]
 53c:	ldr	x0, [sp, #64]
 540:	mul	x0, x2, x0
 544:	sub	x0, x1, x0
 548:	str	x0, [sp, #192]
 54c:	ldr	w0, [sp, #200]
 550:	sub	w0, w0, #0x1
 554:	str	w0, [sp, #200]
 558:	b	584 <__divdf3+0x3dc>
 55c:	ldr	x0, [sp, #56]
 560:	lsr	x0, x0, #1
 564:	str	x0, [sp, #56]
 568:	ldr	x0, [sp, #72]
 56c:	lsl	x1, x0, #52
 570:	ldr	x2, [sp, #56]
 574:	ldr	x0, [sp, #64]
 578:	mul	x0, x2, x0
 57c:	sub	x0, x1, x0
 580:	str	x0, [sp, #192]
 584:	ldr	w0, [sp, #200]
 588:	add	w0, w0, #0x3ff
 58c:	str	w0, [sp, #116]
 590:	ldr	w0, [sp, #116]
 594:	cmp	w0, #0x7fe
 598:	b.le	5ac <__divdf3+0x404>
 59c:	ldr	x0, [sp, #176]
 5a0:	orr	x0, x0, #0x7ff0000000000000
 5a4:	bl	12c <fromRep>
 5a8:	b	688 <__divdf3+0x4e0>
 5ac:	ldr	w0, [sp, #116]
 5b0:	cmp	w0, #0x0
 5b4:	b.gt	628 <__divdf3+0x480>
 5b8:	ldr	w0, [sp, #116]
 5bc:	cmp	w0, #0x0
 5c0:	b.ne	61c <__divdf3+0x474>  // b.any
 5c4:	ldr	x0, [sp, #192]
 5c8:	lsl	x1, x0, #1
 5cc:	ldr	x0, [sp, #64]
 5d0:	cmp	x1, x0
 5d4:	cset	w0, hi  // hi = pmore
 5d8:	strb	w0, [sp, #95]
 5dc:	ldr	x0, [sp, #56]
 5e0:	and	x0, x0, #0xfffffffffffff
 5e4:	str	x0, [sp, #80]
 5e8:	ldrb	w0, [sp, #95]
 5ec:	ldr	x1, [sp, #80]
 5f0:	add	x0, x1, x0
 5f4:	str	x0, [sp, #80]
 5f8:	ldr	x0, [sp, #80]
 5fc:	and	x0, x0, #0xfff0000000000000
 600:	cmp	x0, #0x0
 604:	b.eq	61c <__divdf3+0x474>  // b.none
 608:	ldr	x1, [sp, #80]
 60c:	ldr	x0, [sp, #176]
 610:	orr	x0, x1, x0
 614:	bl	12c <fromRep>
 618:	b	688 <__divdf3+0x4e0>
 61c:	ldr	x0, [sp, #176]
 620:	bl	12c <fromRep>
 624:	b	688 <__divdf3+0x4e0>
 628:	ldr	x0, [sp, #192]
 62c:	lsl	x1, x0, #1
 630:	ldr	x0, [sp, #64]
 634:	cmp	x1, x0
 638:	cset	w0, hi  // hi = pmore
 63c:	strb	w0, [sp, #115]
 640:	ldr	x0, [sp, #56]
 644:	and	x0, x0, #0xfffffffffffff
 648:	str	x0, [sp, #104]
 64c:	ldrsw	x0, [sp, #116]
 650:	lsl	x0, x0, #52
 654:	ldr	x1, [sp, #104]
 658:	orr	x0, x1, x0
 65c:	str	x0, [sp, #104]
 660:	ldrb	w0, [sp, #115]
 664:	ldr	x1, [sp, #104]
 668:	add	x0, x1, x0
 66c:	str	x0, [sp, #104]
 670:	ldr	x1, [sp, #104]
 674:	ldr	x0, [sp, #176]
 678:	orr	x0, x1, x0
 67c:	bl	12c <fromRep>
 680:	str	d0, [sp, #96]
 684:	ldr	d0, [sp, #96]
 688:	ldr	x19, [sp, #16]
 68c:	ldp	x29, x30, [sp], #208
 690:	ret

divdi3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__divdi3>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	mov	w0, #0x3f                  	// #63
  14:	str	w0, [sp, #60]
  18:	ldr	w0, [sp, #60]
  1c:	ldr	x1, [sp, #24]
  20:	asr	x0, x1, x0
  24:	str	x0, [sp, #48]
  28:	ldr	w0, [sp, #60]
  2c:	ldr	x1, [sp, #16]
  30:	asr	x0, x1, x0
  34:	str	x0, [sp, #40]
  38:	ldr	x1, [sp, #24]
  3c:	ldr	x0, [sp, #48]
  40:	eor	x1, x1, x0
  44:	ldr	x0, [sp, #48]
  48:	sub	x0, x1, x0
  4c:	str	x0, [sp, #24]
  50:	ldr	x1, [sp, #16]
  54:	ldr	x0, [sp, #40]
  58:	eor	x1, x1, x0
  5c:	ldr	x0, [sp, #40]
  60:	sub	x0, x1, x0
  64:	str	x0, [sp, #16]
  68:	ldr	x1, [sp, #48]
  6c:	ldr	x0, [sp, #40]
  70:	eor	x0, x1, x0
  74:	str	x0, [sp, #48]
  78:	ldr	x0, [sp, #24]
  7c:	ldr	x1, [sp, #16]
  80:	mov	x2, #0x0                   	// #0
  84:	bl	0 <__udivmoddi4>
  88:	mov	x1, x0
  8c:	ldr	x0, [sp, #48]
  90:	eor	x1, x1, x0
  94:	ldr	x0, [sp, #48]
  98:	sub	x0, x1, x0
  9c:	ldp	x29, x30, [sp], #64
  a0:	ret

divmoddi4.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__divmoddi4>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	ldr	x1, [sp, #32]
  18:	ldr	x0, [sp, #40]
  1c:	bl	0 <__divdi3>
  20:	str	x0, [sp, #56]
  24:	ldr	x1, [sp, #56]
  28:	ldr	x0, [sp, #32]
  2c:	mul	x0, x1, x0
  30:	ldr	x1, [sp, #40]
  34:	sub	x1, x1, x0
  38:	ldr	x0, [sp, #24]
  3c:	str	x1, [x0]
  40:	ldr	x0, [sp, #56]
  44:	ldp	x29, x30, [sp], #64
  48:	ret

divmodsi4.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__divmodsi4>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	w0, [sp, #28]
   c:	str	w1, [sp, #24]
  10:	str	x2, [sp, #16]
  14:	ldr	w1, [sp, #24]
  18:	ldr	w0, [sp, #28]
  1c:	bl	0 <__divsi3>
  20:	str	w0, [sp, #44]
  24:	ldr	w1, [sp, #44]
  28:	ldr	w0, [sp, #24]
  2c:	mul	w0, w1, w0
  30:	ldr	w1, [sp, #28]
  34:	sub	w1, w1, w0
  38:	ldr	x0, [sp, #16]
  3c:	str	w1, [x0]
  40:	ldr	w0, [sp, #44]
  44:	ldp	x29, x30, [sp], #48
  48:	ret

divsc3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <rep_clz>:
   0:	sub	sp, sp, #0x10
   4:	str	w0, [sp, #12]
   8:	ldr	w0, [sp, #12]
   c:	clz	w0, w0
  10:	add	sp, sp, #0x10
  14:	ret

0000000000000018 <toRep>:
  18:	sub	sp, sp, #0x20
  1c:	str	s0, [sp, #12]
  20:	ldr	s0, [sp, #12]
  24:	str	s0, [sp, #24]
  28:	ldr	w0, [sp, #24]
  2c:	add	sp, sp, #0x20
  30:	ret

0000000000000034 <fromRep>:
  34:	sub	sp, sp, #0x20
  38:	str	w0, [sp, #12]
  3c:	ldr	w0, [sp, #12]
  40:	str	w0, [sp, #24]
  44:	ldr	s0, [sp, #24]
  48:	add	sp, sp, #0x20
  4c:	ret

0000000000000050 <normalize>:
  50:	stp	x29, x30, [sp, #-64]!
  54:	mov	x29, sp
  58:	str	x19, [sp, #16]
  5c:	str	x0, [sp, #40]
  60:	ldr	x0, [sp, #40]
  64:	ldr	w0, [x0]
  68:	bl	0 <rep_clz>
  6c:	mov	w19, w0
  70:	mov	w0, #0x800000              	// #8388608
  74:	bl	0 <rep_clz>
  78:	sub	w0, w19, w0
  7c:	str	w0, [sp, #60]
  80:	ldr	x0, [sp, #40]
  84:	ldr	w1, [x0]
  88:	ldr	w0, [sp, #60]
  8c:	lsl	w1, w1, w0
  90:	ldr	x0, [sp, #40]
  94:	str	w1, [x0]
  98:	mov	w1, #0x1                   	// #1
  9c:	ldr	w0, [sp, #60]
  a0:	sub	w0, w1, w0
  a4:	ldr	x19, [sp, #16]
  a8:	ldp	x29, x30, [sp], #64
  ac:	ret

00000000000000b0 <__compiler_rt_logbX>:
  b0:	stp	x29, x30, [sp, #-48]!
  b4:	mov	x29, sp
  b8:	str	s0, [sp, #28]
  bc:	ldr	s0, [sp, #28]
  c0:	bl	18 <toRep>
  c4:	str	w0, [sp, #36]
  c8:	ldr	w0, [sp, #36]
  cc:	lsr	w0, w0, #23
  d0:	and	w0, w0, #0xff
  d4:	str	w0, [sp, #44]
  d8:	ldr	w0, [sp, #44]
  dc:	cmp	w0, #0xff
  e0:	b.ne	114 <__compiler_rt_logbX+0x64>  // b.any
  e4:	ldr	w0, [sp, #36]
  e8:	cmp	w0, #0x0
  ec:	b.ge	100 <__compiler_rt_logbX+0x50>  // b.tcont
  f0:	ldr	s1, [sp, #28]
  f4:	ldr	s0, [sp, #28]
  f8:	fcmp	s1, s0
  fc:	b.eq	108 <__compiler_rt_logbX+0x58>  // b.none
 100:	ldr	s0, [sp, #28]
 104:	b	190 <__compiler_rt_logbX+0xe0>
 108:	ldr	s0, [sp, #28]
 10c:	fneg	s0, s0
 110:	b	190 <__compiler_rt_logbX+0xe0>
 114:	ldr	s0, [sp, #28]
 118:	fcmp	s0, #0.0
 11c:	b.ne	12c <__compiler_rt_logbX+0x7c>  // b.any
 120:	mov	w0, #0xff800000            	// #-8388608
 124:	bl	34 <fromRep>
 128:	b	190 <__compiler_rt_logbX+0xe0>
 12c:	ldr	w0, [sp, #44]
 130:	cmp	w0, #0x0
 134:	b.eq	148 <__compiler_rt_logbX+0x98>  // b.none
 138:	ldr	w0, [sp, #44]
 13c:	sub	w0, w0, #0x7f
 140:	scvtf	s0, w0
 144:	b	190 <__compiler_rt_logbX+0xe0>
 148:	ldr	w0, [sp, #36]
 14c:	and	w0, w0, #0x7fffffff
 150:	str	w0, [sp, #36]
 154:	add	x0, sp, #0x24
 158:	bl	50 <normalize>
 15c:	mov	w1, w0
 160:	mov	w0, #0x1                   	// #1
 164:	sub	w0, w0, w1
 168:	str	w0, [sp, #40]
 16c:	ldr	w0, [sp, #36]
 170:	lsr	w0, w0, #23
 174:	and	w0, w0, #0xff
 178:	str	w0, [sp, #44]
 17c:	ldr	w0, [sp, #44]
 180:	sub	w1, w0, #0x7f
 184:	ldr	w0, [sp, #40]
 188:	sub	w0, w1, w0
 18c:	scvtf	s0, w0
 190:	ldp	x29, x30, [sp], #48
 194:	ret

0000000000000198 <__compiler_rt_logbf>:
 198:	stp	x29, x30, [sp, #-32]!
 19c:	mov	x29, sp
 1a0:	str	s0, [sp, #28]
 1a4:	ldr	s0, [sp, #28]
 1a8:	bl	b0 <__compiler_rt_logbX>
 1ac:	ldp	x29, x30, [sp], #32
 1b0:	ret

00000000000001b4 <__divsc3>:
 1b4:	stp	x29, x30, [sp, #-80]!
 1b8:	mov	x29, sp
 1bc:	str	s0, [sp, #28]
 1c0:	str	s1, [sp, #24]
 1c4:	str	s2, [sp, #20]
 1c8:	str	s3, [sp, #16]
 1cc:	str	wzr, [sp, #68]
 1d0:	ldr	s0, [sp, #20]
 1d4:	fabs	s0, s0
 1d8:	ldr	s1, [sp, #16]
 1dc:	fabs	s1, s1
 1e0:	fmaxnm	s0, s0, s1
 1e4:	bl	198 <__compiler_rt_logbf>
 1e8:	str	s0, [sp, #64]
 1ec:	ldr	s0, [sp, #64]
 1f0:	str	s0, [sp, #60]
 1f4:	ldr	s0, [sp, #60]
 1f8:	fabs	s0, s0
 1fc:	mov	w0, #0x7f7fffff            	// #2139095039
 200:	fmov	s1, w0
 204:	fcmp	s0, s1
 208:	b.gt	224 <__divsc3+0x70>
 20c:	ldr	s1, [sp, #60]
 210:	ldr	s0, [sp, #60]
 214:	fcmp	s1, s0
 218:	b.vs	224 <__divsc3+0x70>
 21c:	mov	w0, #0x1                   	// #1
 220:	b	228 <__divsc3+0x74>
 224:	mov	w0, #0x0                   	// #0
 228:	cmp	w0, #0x0
 22c:	b.eq	264 <__divsc3+0xb0>  // b.none
 230:	ldr	s0, [sp, #64]
 234:	fcvtzs	s0, s0
 238:	str	s0, [sp, #68]
 23c:	ldr	w0, [sp, #68]
 240:	neg	w0, w0
 244:	ldr	s0, [sp, #20]
 248:	bl	0 <scalbnf>
 24c:	str	s0, [sp, #20]
 250:	ldr	w0, [sp, #68]
 254:	neg	w0, w0
 258:	ldr	s0, [sp, #16]
 25c:	bl	0 <scalbnf>
 260:	str	s0, [sp, #16]
 264:	ldr	s0, [sp, #20]
 268:	fmul	s1, s0, s0
 26c:	ldr	s0, [sp, #16]
 270:	fmul	s0, s0, s0
 274:	fadd	s0, s1, s0
 278:	str	s0, [sp, #56]
 27c:	ldr	s1, [sp, #28]
 280:	ldr	s0, [sp, #20]
 284:	fmul	s1, s1, s0
 288:	ldr	s2, [sp, #24]
 28c:	ldr	s0, [sp, #16]
 290:	fmul	s0, s2, s0
 294:	fadd	s1, s1, s0
 298:	ldr	s0, [sp, #56]
 29c:	fdiv	s0, s1, s0
 2a0:	ldr	w0, [sp, #68]
 2a4:	neg	w0, w0
 2a8:	bl	0 <scalbnf>
 2ac:	str	s0, [sp, #76]
 2b0:	ldr	s0, [sp, #72]
 2b4:	ldr	s1, [sp, #76]
 2b8:	str	s1, [sp, #48]
 2bc:	str	s0, [sp, #52]
 2c0:	ldr	s1, [sp, #24]
 2c4:	ldr	s0, [sp, #20]
 2c8:	fmul	s1, s1, s0
 2cc:	ldr	s2, [sp, #28]
 2d0:	ldr	s0, [sp, #16]
 2d4:	fmul	s0, s2, s0
 2d8:	fsub	s1, s1, s0
 2dc:	ldr	s0, [sp, #56]
 2e0:	fdiv	s0, s1, s0
 2e4:	ldr	w0, [sp, #68]
 2e8:	neg	w0, w0
 2ec:	bl	0 <scalbnf>
 2f0:	str	s0, [sp, #72]
 2f4:	ldr	s0, [sp, #72]
 2f8:	ldr	s1, [sp, #76]
 2fc:	str	s1, [sp, #48]
 300:	str	s0, [sp, #52]
 304:	ldr	s0, [sp, #76]
 308:	fcmp	s0, s0
 30c:	b.vc	728 <__divsc3+0x574>
 310:	ldr	s0, [sp, #72]
 314:	fcmp	s0, s0
 318:	b.vc	728 <__divsc3+0x574>
 31c:	ldr	s0, [sp, #56]
 320:	fcmp	s0, #0.0
 324:	b.ne	3ac <__divsc3+0x1f8>  // b.any
 328:	ldr	s1, [sp, #28]
 32c:	ldr	s0, [sp, #28]
 330:	fcmp	s1, s0
 334:	b.vc	348 <__divsc3+0x194>
 338:	ldr	s1, [sp, #24]
 33c:	ldr	s0, [sp, #24]
 340:	fcmp	s1, s0
 344:	b.vs	3ac <__divsc3+0x1f8>
 348:	mov	w0, #0x7f800000            	// #2139095040
 34c:	fmov	s2, w0
 350:	ldr	s0, [sp, #20]
 354:	movi	v1.2s, #0x80, lsl #24
 358:	bif	v0.8b, v2.8b, v1.8b
 35c:	ldr	s1, [sp, #28]
 360:	fmul	s0, s1, s0
 364:	str	s0, [sp, #76]
 368:	ldr	s0, [sp, #72]
 36c:	ldr	s1, [sp, #76]
 370:	str	s1, [sp, #48]
 374:	str	s0, [sp, #52]
 378:	mov	w0, #0x7f800000            	// #2139095040
 37c:	fmov	s2, w0
 380:	ldr	s0, [sp, #20]
 384:	movi	v1.2s, #0x80, lsl #24
 388:	bif	v0.8b, v2.8b, v1.8b
 38c:	ldr	s1, [sp, #24]
 390:	fmul	s0, s1, s0
 394:	str	s0, [sp, #72]
 398:	ldr	s0, [sp, #72]
 39c:	ldr	s1, [sp, #76]
 3a0:	str	s1, [sp, #48]
 3a4:	str	s0, [sp, #52]
 3a8:	b	728 <__divsc3+0x574>
 3ac:	ldr	s0, [sp, #28]
 3b0:	fabs	s0, s0
 3b4:	mov	w0, #0x7f7fffff            	// #2139095039
 3b8:	fmov	s1, w0
 3bc:	fcmp	s0, s1
 3c0:	cset	w0, le
 3c4:	and	w0, w0, #0xff
 3c8:	eor	w0, w0, #0x1
 3cc:	and	w0, w0, #0xff
 3d0:	cmp	w0, #0x0
 3d4:	b.ne	404 <__divsc3+0x250>  // b.any
 3d8:	ldr	s0, [sp, #24]
 3dc:	fabs	s0, s0
 3e0:	mov	w0, #0x7f7fffff            	// #2139095039
 3e4:	fmov	s1, w0
 3e8:	fcmp	s0, s1
 3ec:	cset	w0, le
 3f0:	and	w0, w0, #0xff
 3f4:	eor	w0, w0, #0x1
 3f8:	and	w0, w0, #0xff
 3fc:	cmp	w0, #0x0
 400:	b.eq	580 <__divsc3+0x3cc>  // b.none
 404:	ldr	s0, [sp, #20]
 408:	str	s0, [sp, #44]
 40c:	ldr	s0, [sp, #44]
 410:	fabs	s0, s0
 414:	mov	w0, #0x7f7fffff            	// #2139095039
 418:	fmov	s1, w0
 41c:	fcmp	s0, s1
 420:	b.gt	43c <__divsc3+0x288>
 424:	ldr	s1, [sp, #44]
 428:	ldr	s0, [sp, #44]
 42c:	fcmp	s1, s0
 430:	b.vs	43c <__divsc3+0x288>
 434:	mov	w0, #0x1                   	// #1
 438:	b	440 <__divsc3+0x28c>
 43c:	mov	w0, #0x0                   	// #0
 440:	cmp	w0, #0x0
 444:	b.eq	580 <__divsc3+0x3cc>  // b.none
 448:	ldr	s0, [sp, #16]
 44c:	str	s0, [sp, #40]
 450:	ldr	s0, [sp, #40]
 454:	fabs	s0, s0
 458:	mov	w0, #0x7f7fffff            	// #2139095039
 45c:	fmov	s1, w0
 460:	fcmp	s0, s1
 464:	b.gt	480 <__divsc3+0x2cc>
 468:	ldr	s1, [sp, #40]
 46c:	ldr	s0, [sp, #40]
 470:	fcmp	s1, s0
 474:	b.vs	480 <__divsc3+0x2cc>
 478:	mov	w0, #0x1                   	// #1
 47c:	b	484 <__divsc3+0x2d0>
 480:	mov	w0, #0x0                   	// #0
 484:	cmp	w0, #0x0
 488:	b.eq	580 <__divsc3+0x3cc>  // b.none
 48c:	ldr	s0, [sp, #28]
 490:	fabs	s0, s0
 494:	mov	w0, #0x7f7fffff            	// #2139095039
 498:	fmov	s1, w0
 49c:	fcmp	s0, s1
 4a0:	cset	w0, le
 4a4:	and	w0, w0, #0xff
 4a8:	eor	w0, w0, #0x1
 4ac:	and	w0, w0, #0xff
 4b0:	fmov	s0, w0
 4b4:	scvtf	s0, s0
 4b8:	ldr	s1, [sp, #28]
 4bc:	movi	v2.2s, #0x80, lsl #24
 4c0:	bit	v0.8b, v1.8b, v2.8b
 4c4:	str	s0, [sp, #28]
 4c8:	ldr	s0, [sp, #24]
 4cc:	fabs	s0, s0
 4d0:	mov	w0, #0x7f7fffff            	// #2139095039
 4d4:	fmov	s1, w0
 4d8:	fcmp	s0, s1
 4dc:	cset	w0, le
 4e0:	and	w0, w0, #0xff
 4e4:	eor	w0, w0, #0x1
 4e8:	and	w0, w0, #0xff
 4ec:	fmov	s0, w0
 4f0:	scvtf	s0, s0
 4f4:	ldr	s1, [sp, #24]
 4f8:	movi	v2.2s, #0x80, lsl #24
 4fc:	bit	v0.8b, v1.8b, v2.8b
 500:	str	s0, [sp, #24]
 504:	ldr	s1, [sp, #28]
 508:	ldr	s0, [sp, #20]
 50c:	fmul	s1, s1, s0
 510:	ldr	s2, [sp, #24]
 514:	ldr	s0, [sp, #16]
 518:	fmul	s0, s2, s0
 51c:	fadd	s0, s1, s0
 520:	mov	w0, #0x7f800000            	// #2139095040
 524:	fmov	s1, w0
 528:	fmul	s0, s0, s1
 52c:	str	s0, [sp, #76]
 530:	ldr	s0, [sp, #72]
 534:	ldr	s1, [sp, #76]
 538:	str	s1, [sp, #48]
 53c:	str	s0, [sp, #52]
 540:	ldr	s1, [sp, #24]
 544:	ldr	s0, [sp, #20]
 548:	fmul	s1, s1, s0
 54c:	ldr	s2, [sp, #28]
 550:	ldr	s0, [sp, #16]
 554:	fmul	s0, s2, s0
 558:	fsub	s0, s1, s0
 55c:	mov	w0, #0x7f800000            	// #2139095040
 560:	fmov	s1, w0
 564:	fmul	s0, s0, s1
 568:	str	s0, [sp, #72]
 56c:	ldr	s0, [sp, #72]
 570:	ldr	s1, [sp, #76]
 574:	str	s1, [sp, #48]
 578:	str	s0, [sp, #52]
 57c:	b	728 <__divsc3+0x574>
 580:	ldr	s0, [sp, #64]
 584:	fabs	s0, s0
 588:	mov	w0, #0x7f7fffff            	// #2139095039
 58c:	fmov	s1, w0
 590:	fcmp	s0, s1
 594:	cset	w0, le
 598:	and	w0, w0, #0xff
 59c:	eor	w0, w0, #0x1
 5a0:	and	w0, w0, #0xff
 5a4:	cmp	w0, #0x0
 5a8:	b.eq	728 <__divsc3+0x574>  // b.none
 5ac:	ldr	s0, [sp, #64]
 5b0:	fcmpe	s0, #0.0
 5b4:	b.le	728 <__divsc3+0x574>
 5b8:	ldr	s0, [sp, #28]
 5bc:	str	s0, [sp, #36]
 5c0:	ldr	s0, [sp, #36]
 5c4:	fabs	s0, s0
 5c8:	mov	w0, #0x7f7fffff            	// #2139095039
 5cc:	fmov	s1, w0
 5d0:	fcmp	s0, s1
 5d4:	b.gt	5f0 <__divsc3+0x43c>
 5d8:	ldr	s1, [sp, #36]
 5dc:	ldr	s0, [sp, #36]
 5e0:	fcmp	s1, s0
 5e4:	b.vs	5f0 <__divsc3+0x43c>
 5e8:	mov	w0, #0x1                   	// #1
 5ec:	b	5f4 <__divsc3+0x440>
 5f0:	mov	w0, #0x0                   	// #0
 5f4:	cmp	w0, #0x0
 5f8:	b.eq	728 <__divsc3+0x574>  // b.none
 5fc:	ldr	s0, [sp, #24]
 600:	str	s0, [sp, #32]
 604:	ldr	s0, [sp, #32]
 608:	fabs	s0, s0
 60c:	mov	w0, #0x7f7fffff            	// #2139095039
 610:	fmov	s1, w0
 614:	fcmp	s0, s1
 618:	b.gt	634 <__divsc3+0x480>
 61c:	ldr	s1, [sp, #32]
 620:	ldr	s0, [sp, #32]
 624:	fcmp	s1, s0
 628:	b.vs	634 <__divsc3+0x480>
 62c:	mov	w0, #0x1                   	// #1
 630:	b	638 <__divsc3+0x484>
 634:	mov	w0, #0x0                   	// #0
 638:	cmp	w0, #0x0
 63c:	b.eq	728 <__divsc3+0x574>  // b.none
 640:	ldr	s0, [sp, #20]
 644:	fabs	s0, s0
 648:	mov	w0, #0x7f7fffff            	// #2139095039
 64c:	fmov	s1, w0
 650:	fcmp	s0, s1
 654:	cset	w0, le
 658:	and	w0, w0, #0xff
 65c:	eor	w0, w0, #0x1
 660:	and	w0, w0, #0xff
 664:	fmov	s0, w0
 668:	scvtf	s0, s0
 66c:	ldr	s1, [sp, #20]
 670:	movi	v2.2s, #0x80, lsl #24
 674:	bit	v0.8b, v1.8b, v2.8b
 678:	str	s0, [sp, #20]
 67c:	ldr	s0, [sp, #16]
 680:	fabs	s0, s0
 684:	mov	w0, #0x7f7fffff            	// #2139095039
 688:	fmov	s1, w0
 68c:	fcmp	s0, s1
 690:	cset	w0, le
 694:	and	w0, w0, #0xff
 698:	eor	w0, w0, #0x1
 69c:	and	w0, w0, #0xff
 6a0:	fmov	s0, w0
 6a4:	scvtf	s0, s0
 6a8:	ldr	s1, [sp, #16]
 6ac:	movi	v2.2s, #0x80, lsl #24
 6b0:	bit	v0.8b, v1.8b, v2.8b
 6b4:	str	s0, [sp, #16]
 6b8:	ldr	s1, [sp, #28]
 6bc:	ldr	s0, [sp, #20]
 6c0:	fmul	s1, s1, s0
 6c4:	ldr	s2, [sp, #24]
 6c8:	ldr	s0, [sp, #16]
 6cc:	fmul	s0, s2, s0
 6d0:	fadd	s0, s1, s0
 6d4:	movi	v1.2s, #0x0
 6d8:	fmul	s0, s0, s1
 6dc:	str	s0, [sp, #76]
 6e0:	ldr	s0, [sp, #72]
 6e4:	ldr	s1, [sp, #76]
 6e8:	str	s1, [sp, #48]
 6ec:	str	s0, [sp, #52]
 6f0:	ldr	s1, [sp, #24]
 6f4:	ldr	s0, [sp, #20]
 6f8:	fmul	s1, s1, s0
 6fc:	ldr	s2, [sp, #28]
 700:	ldr	s0, [sp, #16]
 704:	fmul	s0, s2, s0
 708:	fsub	s0, s1, s0
 70c:	movi	v1.2s, #0x0
 710:	fmul	s0, s0, s1
 714:	str	s0, [sp, #72]
 718:	ldr	s0, [sp, #72]
 71c:	ldr	s1, [sp, #76]
 720:	str	s1, [sp, #48]
 724:	str	s0, [sp, #52]
 728:	ldr	s1, [sp, #76]
 72c:	ldr	s0, [sp, #72]
 730:	fmov	s2, s1
 734:	fmov	s1, s0
 738:	fmov	s0, s2
 73c:	ldp	x29, x30, [sp], #80
 740:	ret

divsf3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <rep_clz>:
   0:	sub	sp, sp, #0x10
   4:	str	w0, [sp, #12]
   8:	ldr	w0, [sp, #12]
   c:	clz	w0, w0
  10:	add	sp, sp, #0x10
  14:	ret

0000000000000018 <toRep>:
  18:	sub	sp, sp, #0x20
  1c:	str	s0, [sp, #12]
  20:	ldr	s0, [sp, #12]
  24:	str	s0, [sp, #24]
  28:	ldr	w0, [sp, #24]
  2c:	add	sp, sp, #0x20
  30:	ret

0000000000000034 <fromRep>:
  34:	sub	sp, sp, #0x20
  38:	str	w0, [sp, #12]
  3c:	ldr	w0, [sp, #12]
  40:	str	w0, [sp, #24]
  44:	ldr	s0, [sp, #24]
  48:	add	sp, sp, #0x20
  4c:	ret

0000000000000050 <normalize>:
  50:	stp	x29, x30, [sp, #-64]!
  54:	mov	x29, sp
  58:	str	x19, [sp, #16]
  5c:	str	x0, [sp, #40]
  60:	ldr	x0, [sp, #40]
  64:	ldr	w0, [x0]
  68:	bl	0 <rep_clz>
  6c:	mov	w19, w0
  70:	mov	w0, #0x800000              	// #8388608
  74:	bl	0 <rep_clz>
  78:	sub	w0, w19, w0
  7c:	str	w0, [sp, #60]
  80:	ldr	x0, [sp, #40]
  84:	ldr	w1, [x0]
  88:	ldr	w0, [sp, #60]
  8c:	lsl	w1, w1, w0
  90:	ldr	x0, [sp, #40]
  94:	str	w1, [x0]
  98:	mov	w1, #0x1                   	// #1
  9c:	ldr	w0, [sp, #60]
  a0:	sub	w0, w1, w0
  a4:	ldr	x19, [sp, #16]
  a8:	ldp	x29, x30, [sp], #64
  ac:	ret

00000000000000b0 <__divsf3>:
  b0:	stp	x29, x30, [sp, #-128]!
  b4:	mov	x29, sp
  b8:	str	x19, [sp, #16]
  bc:	str	s0, [sp, #44]
  c0:	str	s1, [sp, #40]
  c4:	ldr	s0, [sp, #44]
  c8:	bl	18 <toRep>
  cc:	lsr	w0, w0, #23
  d0:	and	w0, w0, #0xff
  d4:	str	w0, [sp, #108]
  d8:	ldr	s0, [sp, #40]
  dc:	bl	18 <toRep>
  e0:	lsr	w0, w0, #23
  e4:	and	w0, w0, #0xff
  e8:	str	w0, [sp, #104]
  ec:	ldr	s0, [sp, #44]
  f0:	bl	18 <toRep>
  f4:	mov	w19, w0
  f8:	ldr	s0, [sp, #40]
  fc:	bl	18 <toRep>
 100:	eor	w0, w19, w0
 104:	and	w0, w0, #0x80000000
 108:	str	w0, [sp, #100]
 10c:	ldr	s0, [sp, #44]
 110:	bl	18 <toRep>
 114:	and	w0, w0, #0x7fffff
 118:	str	w0, [sp, #56]
 11c:	ldr	s0, [sp, #40]
 120:	bl	18 <toRep>
 124:	and	w0, w0, #0x7fffff
 128:	str	w0, [sp, #52]
 12c:	str	wzr, [sp, #124]
 130:	ldr	w0, [sp, #108]
 134:	sub	w0, w0, #0x1
 138:	cmp	w0, #0xfd
 13c:	b.hi	150 <__divsf3+0xa0>  // b.pmore
 140:	ldr	w0, [sp, #104]
 144:	sub	w0, w0, #0x1
 148:	cmp	w0, #0xfd
 14c:	b.ls	2b0 <__divsf3+0x200>  // b.plast
 150:	ldr	s0, [sp, #44]
 154:	bl	18 <toRep>
 158:	and	w0, w0, #0x7fffffff
 15c:	str	w0, [sp, #96]
 160:	ldr	s0, [sp, #40]
 164:	bl	18 <toRep>
 168:	and	w0, w0, #0x7fffffff
 16c:	str	w0, [sp, #92]
 170:	ldr	w1, [sp, #96]
 174:	mov	w0, #0x7f800000            	// #2139095040
 178:	cmp	w1, w0
 17c:	b.ls	194 <__divsf3+0xe4>  // b.plast
 180:	ldr	s0, [sp, #44]
 184:	bl	18 <toRep>
 188:	orr	w0, w0, #0x400000
 18c:	bl	34 <fromRep>
 190:	b	50c <__divsf3+0x45c>
 194:	ldr	w1, [sp, #92]
 198:	mov	w0, #0x7f800000            	// #2139095040
 19c:	cmp	w1, w0
 1a0:	b.ls	1b8 <__divsf3+0x108>  // b.plast
 1a4:	ldr	s0, [sp, #40]
 1a8:	bl	18 <toRep>
 1ac:	orr	w0, w0, #0x400000
 1b0:	bl	34 <fromRep>
 1b4:	b	50c <__divsf3+0x45c>
 1b8:	ldr	w1, [sp, #96]
 1bc:	mov	w0, #0x7f800000            	// #2139095040
 1c0:	cmp	w1, w0
 1c4:	b.ne	1f8 <__divsf3+0x148>  // b.any
 1c8:	ldr	w1, [sp, #92]
 1cc:	mov	w0, #0x7f800000            	// #2139095040
 1d0:	cmp	w1, w0
 1d4:	b.ne	1e4 <__divsf3+0x134>  // b.any
 1d8:	mov	w0, #0x7fc00000            	// #2143289344
 1dc:	bl	34 <fromRep>
 1e0:	b	50c <__divsf3+0x45c>
 1e4:	ldr	w1, [sp, #96]
 1e8:	ldr	w0, [sp, #100]
 1ec:	orr	w0, w1, w0
 1f0:	bl	34 <fromRep>
 1f4:	b	50c <__divsf3+0x45c>
 1f8:	ldr	w1, [sp, #92]
 1fc:	mov	w0, #0x7f800000            	// #2139095040
 200:	cmp	w1, w0
 204:	b.ne	214 <__divsf3+0x164>  // b.any
 208:	ldr	w0, [sp, #100]
 20c:	bl	34 <fromRep>
 210:	b	50c <__divsf3+0x45c>
 214:	ldr	w0, [sp, #96]
 218:	cmp	w0, #0x0
 21c:	b.ne	244 <__divsf3+0x194>  // b.any
 220:	ldr	w0, [sp, #92]
 224:	cmp	w0, #0x0
 228:	b.ne	238 <__divsf3+0x188>  // b.any
 22c:	mov	w0, #0x7fc00000            	// #2143289344
 230:	bl	34 <fromRep>
 234:	b	50c <__divsf3+0x45c>
 238:	ldr	w0, [sp, #100]
 23c:	bl	34 <fromRep>
 240:	b	50c <__divsf3+0x45c>
 244:	ldr	w0, [sp, #92]
 248:	cmp	w0, #0x0
 24c:	b.ne	260 <__divsf3+0x1b0>  // b.any
 250:	ldr	w0, [sp, #100]
 254:	orr	w0, w0, #0x7f800000
 258:	bl	34 <fromRep>
 25c:	b	50c <__divsf3+0x45c>
 260:	ldr	w1, [sp, #96]
 264:	mov	w0, #0x7fffff              	// #8388607
 268:	cmp	w1, w0
 26c:	b.hi	288 <__divsf3+0x1d8>  // b.pmore
 270:	add	x0, sp, #0x38
 274:	bl	50 <normalize>
 278:	mov	w1, w0
 27c:	ldr	w0, [sp, #124]
 280:	add	w0, w0, w1
 284:	str	w0, [sp, #124]
 288:	ldr	w1, [sp, #92]
 28c:	mov	w0, #0x7fffff              	// #8388607
 290:	cmp	w1, w0
 294:	b.hi	2b0 <__divsf3+0x200>  // b.pmore
 298:	add	x0, sp, #0x34
 29c:	bl	50 <normalize>
 2a0:	mov	w1, w0
 2a4:	ldr	w0, [sp, #124]
 2a8:	sub	w0, w0, w1
 2ac:	str	w0, [sp, #124]
 2b0:	ldr	w0, [sp, #56]
 2b4:	orr	w0, w0, #0x800000
 2b8:	str	w0, [sp, #56]
 2bc:	ldr	w0, [sp, #52]
 2c0:	orr	w0, w0, #0x800000
 2c4:	str	w0, [sp, #52]
 2c8:	ldr	w1, [sp, #108]
 2cc:	ldr	w0, [sp, #104]
 2d0:	sub	w1, w1, w0
 2d4:	ldr	w0, [sp, #124]
 2d8:	add	w0, w1, w0
 2dc:	str	w0, [sp, #120]
 2e0:	ldr	w0, [sp, #52]
 2e4:	lsl	w0, w0, #8
 2e8:	str	w0, [sp, #88]
 2ec:	mov	w1, #0xf333                	// #62259
 2f0:	movk	w1, #0x7504, lsl #16
 2f4:	ldr	w0, [sp, #88]
 2f8:	sub	w0, w1, w0
 2fc:	str	w0, [sp, #84]
 300:	ldr	w1, [sp, #84]
 304:	ldr	w0, [sp, #88]
 308:	mul	x0, x1, x0
 30c:	lsr	x0, x0, #32
 310:	neg	w0, w0
 314:	str	w0, [sp, #80]
 318:	ldr	w1, [sp, #84]
 31c:	ldr	w0, [sp, #80]
 320:	mul	x0, x1, x0
 324:	lsr	x0, x0, #31
 328:	str	w0, [sp, #84]
 32c:	ldr	w1, [sp, #84]
 330:	ldr	w0, [sp, #88]
 334:	mul	x0, x1, x0
 338:	lsr	x0, x0, #32
 33c:	neg	w0, w0
 340:	str	w0, [sp, #80]
 344:	ldr	w1, [sp, #84]
 348:	ldr	w0, [sp, #80]
 34c:	mul	x0, x1, x0
 350:	lsr	x0, x0, #31
 354:	str	w0, [sp, #84]
 358:	ldr	w1, [sp, #84]
 35c:	ldr	w0, [sp, #88]
 360:	mul	x0, x1, x0
 364:	lsr	x0, x0, #32
 368:	neg	w0, w0
 36c:	str	w0, [sp, #80]
 370:	ldr	w1, [sp, #84]
 374:	ldr	w0, [sp, #80]
 378:	mul	x0, x1, x0
 37c:	lsr	x0, x0, #31
 380:	str	w0, [sp, #84]
 384:	ldr	w0, [sp, #84]
 388:	sub	w0, w0, #0x2
 38c:	str	w0, [sp, #84]
 390:	ldr	w1, [sp, #84]
 394:	ldr	w0, [sp, #56]
 398:	lsl	w0, w0, #1
 39c:	mov	w0, w0
 3a0:	mul	x0, x1, x0
 3a4:	lsr	x0, x0, #32
 3a8:	str	w0, [sp, #116]
 3ac:	ldr	w1, [sp, #116]
 3b0:	mov	w0, #0xffffff              	// #16777215
 3b4:	cmp	w1, w0
 3b8:	b.hi	3e8 <__divsf3+0x338>  // b.pmore
 3bc:	ldr	w0, [sp, #56]
 3c0:	lsl	w1, w0, #24
 3c4:	ldr	w2, [sp, #52]
 3c8:	ldr	w0, [sp, #116]
 3cc:	mul	w0, w2, w0
 3d0:	sub	w0, w1, w0
 3d4:	str	w0, [sp, #112]
 3d8:	ldr	w0, [sp, #120]
 3dc:	sub	w0, w0, #0x1
 3e0:	str	w0, [sp, #120]
 3e4:	b	410 <__divsf3+0x360>
 3e8:	ldr	w0, [sp, #116]
 3ec:	lsr	w0, w0, #1
 3f0:	str	w0, [sp, #116]
 3f4:	ldr	w0, [sp, #56]
 3f8:	lsl	w1, w0, #23
 3fc:	ldr	w2, [sp, #52]
 400:	ldr	w0, [sp, #116]
 404:	mul	w0, w2, w0
 408:	sub	w0, w1, w0
 40c:	str	w0, [sp, #112]
 410:	ldr	w0, [sp, #120]
 414:	add	w0, w0, #0x7f
 418:	str	w0, [sp, #76]
 41c:	ldr	w0, [sp, #76]
 420:	cmp	w0, #0xfe
 424:	b.le	438 <__divsf3+0x388>
 428:	ldr	w0, [sp, #100]
 42c:	orr	w0, w0, #0x7f800000
 430:	bl	34 <fromRep>
 434:	b	50c <__divsf3+0x45c>
 438:	ldr	w0, [sp, #76]
 43c:	cmp	w0, #0x0
 440:	b.gt	4b4 <__divsf3+0x404>
 444:	ldr	w0, [sp, #76]
 448:	cmp	w0, #0x0
 44c:	b.ne	4a8 <__divsf3+0x3f8>  // b.any
 450:	ldr	w0, [sp, #112]
 454:	lsl	w1, w0, #1
 458:	ldr	w0, [sp, #52]
 45c:	cmp	w1, w0
 460:	cset	w0, hi  // hi = pmore
 464:	strb	w0, [sp, #67]
 468:	ldr	w0, [sp, #116]
 46c:	and	w0, w0, #0x7fffff
 470:	str	w0, [sp, #60]
 474:	ldrb	w0, [sp, #67]
 478:	ldr	w1, [sp, #60]
 47c:	add	w0, w1, w0
 480:	str	w0, [sp, #60]
 484:	ldr	w0, [sp, #60]
 488:	and	w0, w0, #0xff800000
 48c:	cmp	w0, #0x0
 490:	b.eq	4a8 <__divsf3+0x3f8>  // b.none
 494:	ldr	w1, [sp, #60]
 498:	ldr	w0, [sp, #100]
 49c:	orr	w0, w1, w0
 4a0:	bl	34 <fromRep>
 4a4:	b	50c <__divsf3+0x45c>
 4a8:	ldr	w0, [sp, #100]
 4ac:	bl	34 <fromRep>
 4b0:	b	50c <__divsf3+0x45c>
 4b4:	ldr	w0, [sp, #112]
 4b8:	lsl	w1, w0, #1
 4bc:	ldr	w0, [sp, #52]
 4c0:	cmp	w1, w0
 4c4:	cset	w0, hi  // hi = pmore
 4c8:	strb	w0, [sp, #75]
 4cc:	ldr	w0, [sp, #116]
 4d0:	and	w0, w0, #0x7fffff
 4d4:	str	w0, [sp, #68]
 4d8:	ldr	w0, [sp, #76]
 4dc:	lsl	w0, w0, #23
 4e0:	ldr	w1, [sp, #68]
 4e4:	orr	w0, w1, w0
 4e8:	str	w0, [sp, #68]
 4ec:	ldrb	w0, [sp, #75]
 4f0:	ldr	w1, [sp, #68]
 4f4:	add	w0, w1, w0
 4f8:	str	w0, [sp, #68]
 4fc:	ldr	w1, [sp, #68]
 500:	ldr	w0, [sp, #100]
 504:	orr	w0, w1, w0
 508:	bl	34 <fromRep>
 50c:	ldr	x19, [sp, #16]
 510:	ldp	x29, x30, [sp], #128
 514:	ret

divsi3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__divsi3>:
   0:	sub	sp, sp, #0x20
   4:	str	w0, [sp, #12]
   8:	str	w1, [sp, #8]
   c:	mov	w0, #0x1f                  	// #31
  10:	str	w0, [sp, #28]
  14:	ldr	w0, [sp, #28]
  18:	ldr	w1, [sp, #12]
  1c:	asr	w0, w1, w0
  20:	str	w0, [sp, #24]
  24:	ldr	w0, [sp, #28]
  28:	ldr	w1, [sp, #8]
  2c:	asr	w0, w1, w0
  30:	str	w0, [sp, #20]
  34:	ldr	w1, [sp, #12]
  38:	ldr	w0, [sp, #24]
  3c:	eor	w1, w1, w0
  40:	ldr	w0, [sp, #24]
  44:	sub	w0, w1, w0
  48:	str	w0, [sp, #12]
  4c:	ldr	w1, [sp, #8]
  50:	ldr	w0, [sp, #20]
  54:	eor	w1, w1, w0
  58:	ldr	w0, [sp, #20]
  5c:	sub	w0, w1, w0
  60:	str	w0, [sp, #8]
  64:	ldr	w1, [sp, #24]
  68:	ldr	w0, [sp, #20]
  6c:	eor	w0, w1, w0
  70:	str	w0, [sp, #24]
  74:	ldr	w1, [sp, #12]
  78:	ldr	w0, [sp, #8]
  7c:	udiv	w1, w1, w0
  80:	ldr	w0, [sp, #24]
  84:	eor	w1, w1, w0
  88:	ldr	w0, [sp, #24]
  8c:	sub	w0, w1, w0
  90:	add	sp, sp, #0x20
  94:	ret

divtc3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <rep_clz>:
   0:	sub	sp, sp, #0x30
   4:	stp	x0, x1, [sp]
   8:	ldp	x0, x1, [sp]
   c:	stp	x0, x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	cmp	x0, #0x0
  18:	b.eq	2c <rep_clz+0x2c>  // b.none
  1c:	ldr	x0, [sp, #24]
  20:	str	x0, [sp, #40]
  24:	str	xzr, [sp, #32]
  28:	b	3c <rep_clz+0x3c>
  2c:	ldr	x0, [sp, #16]
  30:	str	x0, [sp, #40]
  34:	mov	x0, #0x40                  	// #64
  38:	str	x0, [sp, #32]
  3c:	ldr	x0, [sp, #40]
  40:	clz	x0, x0
  44:	mov	w1, w0
  48:	ldr	x0, [sp, #32]
  4c:	add	w0, w1, w0
  50:	add	sp, sp, #0x30
  54:	ret

0000000000000058 <toRep>:
  58:	sub	sp, sp, #0x20
  5c:	str	q0, [sp]
  60:	ldr	q0, [sp]
  64:	str	q0, [sp, #16]
  68:	ldp	x0, x1, [sp, #16]
  6c:	add	sp, sp, #0x20
  70:	ret

0000000000000074 <fromRep>:
  74:	sub	sp, sp, #0x20
  78:	stp	x0, x1, [sp]
  7c:	ldp	x0, x1, [sp]
  80:	stp	x0, x1, [sp, #16]
  84:	ldr	q0, [sp, #16]
  88:	add	sp, sp, #0x20
  8c:	ret

0000000000000090 <normalize>:
  90:	stp	x29, x30, [sp, #-80]!
  94:	mov	x29, sp
  98:	stp	x19, x20, [sp, #16]
  9c:	str	x21, [sp, #32]
  a0:	str	x0, [sp, #56]
  a4:	ldr	x0, [sp, #56]
  a8:	ldp	x0, x1, [x0]
  ac:	bl	0 <rep_clz>
  b0:	mov	w19, w0
  b4:	adrp	x0, 0 <rep_clz>
  b8:	add	x0, x0, #0x0
  bc:	ldp	x0, x1, [x0]
  c0:	bl	0 <rep_clz>
  c4:	sub	w0, w19, w0
  c8:	str	w0, [sp, #76]
  cc:	ldr	x0, [sp, #56]
  d0:	ldp	x0, x1, [x0]
  d4:	ldr	w2, [sp, #76]
  d8:	sub	w2, w2, #0x40
  dc:	lsl	x3, x0, x2
  e0:	mov	x7, #0x0                   	// #0
  e4:	lsr	x5, x0, #1
  e8:	mov	w6, #0x3f                  	// #63
  ec:	ldr	w4, [sp, #76]
  f0:	sub	w4, w6, w4
  f4:	lsr	x4, x5, x4
  f8:	ldr	w5, [sp, #76]
  fc:	lsl	x21, x1, x5
 100:	orr	x21, x4, x21
 104:	ldr	w4, [sp, #76]
 108:	lsl	x20, x0, x4
 10c:	cmp	w2, #0x0
 110:	csel	x21, x3, x21, ge  // ge = tcont
 114:	cmp	w2, #0x0
 118:	csel	x20, x7, x20, ge  // ge = tcont
 11c:	ldr	x0, [sp, #56]
 120:	stp	x20, x21, [x0]
 124:	mov	w1, #0x1                   	// #1
 128:	ldr	w0, [sp, #76]
 12c:	sub	w0, w1, w0
 130:	ldp	x19, x20, [sp, #16]
 134:	ldr	x21, [sp, #32]
 138:	ldp	x29, x30, [sp], #80
 13c:	ret

0000000000000140 <__compiler_rt_logbX>:
 140:	stp	x29, x30, [sp, #-128]!
 144:	mov	x29, sp
 148:	stp	x20, x21, [sp, #16]
 14c:	stp	x22, x23, [sp, #32]
 150:	stp	x24, x25, [sp, #48]
 154:	str	q0, [sp, #80]
 158:	ldr	q0, [sp, #80]
 15c:	bl	58 <toRep>
 160:	stp	x0, x1, [sp, #96]
 164:	ldp	x0, x1, [sp, #96]
 168:	lsr	x24, x1, #48
 16c:	mov	x25, #0x0                   	// #0
 170:	mov	w0, w24
 174:	and	w0, w0, #0x7fff
 178:	str	w0, [sp, #124]
 17c:	ldr	w1, [sp, #124]
 180:	mov	w0, #0x7fff                	// #32767
 184:	cmp	w1, w0
 188:	b.ne	1d0 <__compiler_rt_logbX+0x90>  // b.any
 18c:	ldp	x0, x1, [sp, #96]
 190:	cmp	x1, #0x0
 194:	b.ge	1ac <__compiler_rt_logbX+0x6c>  // b.tcont
 198:	ldr	q1, [sp, #80]
 19c:	ldr	q0, [sp, #80]
 1a0:	bl	0 <__netf2>
 1a4:	cmp	w0, #0x0
 1a8:	b.eq	1b8 <__compiler_rt_logbX+0x78>  // b.none
 1ac:	ldr	q0, [sp, #80]
 1b0:	str	q0, [sp, #64]
 1b4:	b	280 <__compiler_rt_logbX+0x140>
 1b8:	ldr	x0, [sp, #80]
 1bc:	str	x0, [sp, #64]
 1c0:	ldr	x0, [sp, #88]
 1c4:	eor	x0, x0, #0x8000000000000000
 1c8:	str	x0, [sp, #72]
 1cc:	b	280 <__compiler_rt_logbX+0x140>
 1d0:	movi	v1.2d, #0x0
 1d4:	ldr	q0, [sp, #80]
 1d8:	bl	0 <__eqtf2>
 1dc:	cmp	w0, #0x0
 1e0:	b.ne	1fc <__compiler_rt_logbX+0xbc>  // b.any
 1e4:	adrp	x0, 0 <rep_clz>
 1e8:	add	x0, x0, #0x0
 1ec:	ldp	x0, x1, [x0]
 1f0:	bl	74 <fromRep>
 1f4:	str	q0, [sp, #64]
 1f8:	b	280 <__compiler_rt_logbX+0x140>
 1fc:	ldr	w0, [sp, #124]
 200:	cmp	w0, #0x0
 204:	b.eq	220 <__compiler_rt_logbX+0xe0>  // b.none
 208:	ldr	w1, [sp, #124]
 20c:	mov	w0, #0xffffc001            	// #-16383
 210:	add	w0, w1, w0
 214:	bl	0 <__floatsitf>
 218:	str	q0, [sp, #64]
 21c:	b	280 <__compiler_rt_logbX+0x140>
 220:	ldp	x0, x1, [sp, #96]
 224:	mov	x2, #0xffffffffffffffff    	// #-1
 228:	and	x20, x0, x2
 22c:	and	x21, x1, #0x7fffffffffffffff
 230:	stp	x20, x21, [sp, #96]
 234:	add	x0, sp, #0x60
 238:	bl	90 <normalize>
 23c:	mov	w1, w0
 240:	mov	w0, #0x1                   	// #1
 244:	sub	w0, w0, w1
 248:	str	w0, [sp, #120]
 24c:	ldp	x0, x1, [sp, #96]
 250:	lsr	x22, x1, #48
 254:	mov	x23, #0x0                   	// #0
 258:	mov	w0, w22
 25c:	and	w0, w0, #0x7fff
 260:	str	w0, [sp, #124]
 264:	ldr	w1, [sp, #124]
 268:	mov	w0, #0xffffc001            	// #-16383
 26c:	add	w1, w1, w0
 270:	ldr	w0, [sp, #120]
 274:	sub	w0, w1, w0
 278:	bl	0 <__floatsitf>
 27c:	str	q0, [sp, #64]
 280:	ldr	q0, [sp, #64]
 284:	ldp	x20, x21, [sp, #16]
 288:	ldp	x22, x23, [sp, #32]
 28c:	ldp	x24, x25, [sp, #48]
 290:	ldp	x29, x30, [sp], #128
 294:	ret

0000000000000298 <__compiler_rt_logbl>:
 298:	stp	x29, x30, [sp, #-32]!
 29c:	mov	x29, sp
 2a0:	str	q0, [sp, #16]
 2a4:	ldr	q0, [sp, #16]
 2a8:	bl	140 <__compiler_rt_logbX>
 2ac:	ldp	x29, x30, [sp], #32
 2b0:	ret

00000000000002b4 <__divtc3>:
 2b4:	stp	x29, x30, [sp, #-480]!
 2b8:	mov	x29, sp
 2bc:	str	x19, [sp, #16]
 2c0:	str	q0, [sp, #272]
 2c4:	str	q1, [sp, #256]
 2c8:	str	q2, [sp, #240]
 2cc:	str	q3, [sp, #224]
 2d0:	str	wzr, [sp, #444]
 2d4:	ldr	x2, [sp, #240]
 2d8:	ldr	x0, [sp, #248]
 2dc:	and	x3, x0, #0x7fffffffffffffff
 2e0:	ldr	x4, [sp, #224]
 2e4:	ldr	x0, [sp, #232]
 2e8:	and	x5, x0, #0x7fffffffffffffff
 2ec:	fmov	d1, x4
 2f0:	fmov	v1.d[1], x5
 2f4:	fmov	d0, x2
 2f8:	fmov	v0.d[1], x3
 2fc:	bl	0 <fmaxl>
 300:	bl	298 <__compiler_rt_logbl>
 304:	str	q0, [sp, #416]
 308:	ldr	q0, [sp, #416]
 30c:	str	q0, [sp, #400]
 310:	ldr	x0, [sp, #400]
 314:	str	x0, [sp, #32]
 318:	ldr	x0, [sp, #408]
 31c:	and	x0, x0, #0x7fffffffffffffff
 320:	str	x0, [sp, #40]
 324:	adrp	x0, 0 <rep_clz>
 328:	add	x0, x0, #0x0
 32c:	ldr	q1, [x0]
 330:	ldr	q0, [sp, #32]
 334:	bl	0 <__unordtf2>
 338:	cmp	w0, #0x0
 33c:	b.ne	35c <__divtc3+0xa8>  // b.any
 340:	adrp	x0, 0 <rep_clz>
 344:	add	x0, x0, #0x0
 348:	ldr	q1, [x0]
 34c:	ldr	q0, [sp, #32]
 350:	bl	0 <__letf2>
 354:	cmp	w0, #0x0
 358:	b.gt	378 <__divtc3+0xc4>
 35c:	ldr	q1, [sp, #400]
 360:	ldr	q0, [sp, #400]
 364:	bl	0 <__unordtf2>
 368:	cmp	w0, #0x0
 36c:	b.ne	378 <__divtc3+0xc4>  // b.any
 370:	mov	w0, #0x1                   	// #1
 374:	b	37c <__divtc3+0xc8>
 378:	mov	w0, #0x0                   	// #0
 37c:	cmp	w0, #0x0
 380:	b.eq	3b8 <__divtc3+0x104>  // b.none
 384:	ldr	q0, [sp, #416]
 388:	bl	0 <__fixtfsi>
 38c:	str	w0, [sp, #444]
 390:	ldr	w0, [sp, #444]
 394:	neg	w0, w0
 398:	ldr	q0, [sp, #240]
 39c:	bl	0 <scalbnl>
 3a0:	str	q0, [sp, #240]
 3a4:	ldr	w0, [sp, #444]
 3a8:	neg	w0, w0
 3ac:	ldr	q0, [sp, #224]
 3b0:	bl	0 <scalbnl>
 3b4:	str	q0, [sp, #224]
 3b8:	ldr	q1, [sp, #240]
 3bc:	ldr	q0, [sp, #240]
 3c0:	bl	0 <__multf3>
 3c4:	str	q0, [sp, #32]
 3c8:	ldr	q1, [sp, #224]
 3cc:	ldr	q0, [sp, #224]
 3d0:	bl	0 <__multf3>
 3d4:	mov	v1.16b, v0.16b
 3d8:	ldr	q0, [sp, #32]
 3dc:	bl	0 <__addtf3>
 3e0:	str	q0, [sp, #384]
 3e4:	ldr	q1, [sp, #240]
 3e8:	ldr	q0, [sp, #272]
 3ec:	bl	0 <__multf3>
 3f0:	str	q0, [sp, #32]
 3f4:	ldr	q1, [sp, #224]
 3f8:	ldr	q0, [sp, #256]
 3fc:	bl	0 <__multf3>
 400:	mov	v1.16b, v0.16b
 404:	ldr	q0, [sp, #32]
 408:	bl	0 <__addtf3>
 40c:	ldr	q1, [sp, #384]
 410:	bl	0 <__divtf3>
 414:	ldr	w0, [sp, #444]
 418:	neg	w0, w0
 41c:	bl	0 <scalbnl>
 420:	str	q0, [sp, #464]
 424:	ldr	q0, [sp, #448]
 428:	ldr	q2, [sp, #464]
 42c:	str	q2, [sp, #352]
 430:	str	q0, [sp, #368]
 434:	ldr	q1, [sp, #240]
 438:	ldr	q0, [sp, #256]
 43c:	bl	0 <__multf3>
 440:	str	q0, [sp, #32]
 444:	ldr	q1, [sp, #224]
 448:	ldr	q0, [sp, #272]
 44c:	bl	0 <__multf3>
 450:	mov	v1.16b, v0.16b
 454:	ldr	q0, [sp, #32]
 458:	bl	0 <__subtf3>
 45c:	ldr	q1, [sp, #384]
 460:	bl	0 <__divtf3>
 464:	ldr	w0, [sp, #444]
 468:	neg	w0, w0
 46c:	bl	0 <scalbnl>
 470:	str	q0, [sp, #448]
 474:	ldr	q0, [sp, #448]
 478:	ldr	q2, [sp, #464]
 47c:	str	q2, [sp, #352]
 480:	str	q0, [sp, #368]
 484:	ldr	q0, [sp, #464]
 488:	mov	v1.16b, v0.16b
 48c:	bl	0 <__unordtf2>
 490:	cmp	w0, #0x0
 494:	b.eq	c0c <__divtc3+0x958>  // b.none
 498:	ldr	q0, [sp, #448]
 49c:	mov	v1.16b, v0.16b
 4a0:	bl	0 <__unordtf2>
 4a4:	cmp	w0, #0x0
 4a8:	b.eq	c0c <__divtc3+0x958>  // b.none
 4ac:	movi	v1.2d, #0x0
 4b0:	ldr	q0, [sp, #384]
 4b4:	bl	0 <__eqtf2>
 4b8:	cmp	w0, #0x0
 4bc:	b.ne	57c <__divtc3+0x2c8>  // b.any
 4c0:	ldr	q1, [sp, #272]
 4c4:	ldr	q0, [sp, #272]
 4c8:	bl	0 <__unordtf2>
 4cc:	cmp	w0, #0x0
 4d0:	b.eq	4e8 <__divtc3+0x234>  // b.none
 4d4:	ldr	q1, [sp, #256]
 4d8:	ldr	q0, [sp, #256]
 4dc:	bl	0 <__unordtf2>
 4e0:	cmp	w0, #0x0
 4e4:	b.ne	57c <__divtc3+0x2c8>  // b.any
 4e8:	ldr	x0, [sp, #248]
 4ec:	and	x0, x0, #0x8000000000000000
 4f0:	adrp	x1, 0 <rep_clz>
 4f4:	add	x1, x1, #0x0
 4f8:	ldr	q0, [x1]
 4fc:	cmp	x0, #0x0
 500:	b.eq	510 <__divtc3+0x25c>  // b.none
 504:	adrp	x0, 0 <rep_clz>
 508:	add	x0, x0, #0x0
 50c:	ldr	q0, [x0]
 510:	mov	v1.16b, v0.16b
 514:	ldr	q0, [sp, #272]
 518:	bl	0 <__multf3>
 51c:	str	q0, [sp, #464]
 520:	ldr	q0, [sp, #448]
 524:	ldr	q2, [sp, #464]
 528:	str	q2, [sp, #352]
 52c:	str	q0, [sp, #368]
 530:	ldr	x0, [sp, #248]
 534:	and	x0, x0, #0x8000000000000000
 538:	adrp	x1, 0 <rep_clz>
 53c:	add	x1, x1, #0x0
 540:	ldr	q0, [x1]
 544:	cmp	x0, #0x0
 548:	b.eq	558 <__divtc3+0x2a4>  // b.none
 54c:	adrp	x0, 0 <rep_clz>
 550:	add	x0, x0, #0x0
 554:	ldr	q0, [x0]
 558:	mov	v1.16b, v0.16b
 55c:	ldr	q0, [sp, #256]
 560:	bl	0 <__multf3>
 564:	str	q0, [sp, #448]
 568:	ldr	q0, [sp, #448]
 56c:	ldr	q2, [sp, #464]
 570:	str	q2, [sp, #352]
 574:	str	q0, [sp, #368]
 578:	b	c0c <__divtc3+0x958>
 57c:	ldr	x0, [sp, #272]
 580:	str	x0, [sp, #48]
 584:	ldr	x0, [sp, #280]
 588:	and	x0, x0, #0x7fffffffffffffff
 58c:	str	x0, [sp, #56]
 590:	mov	w19, #0x1                   	// #1
 594:	adrp	x0, 0 <rep_clz>
 598:	add	x0, x0, #0x0
 59c:	ldr	q1, [x0]
 5a0:	ldr	q0, [sp, #48]
 5a4:	bl	0 <__unordtf2>
 5a8:	cmp	w0, #0x0
 5ac:	b.ne	5d0 <__divtc3+0x31c>  // b.any
 5b0:	adrp	x0, 0 <rep_clz>
 5b4:	add	x0, x0, #0x0
 5b8:	ldr	q1, [x0]
 5bc:	ldr	q0, [sp, #48]
 5c0:	bl	0 <__letf2>
 5c4:	cmp	w0, #0x0
 5c8:	b.le	5d0 <__divtc3+0x31c>
 5cc:	mov	w19, #0x0                   	// #0
 5d0:	and	w0, w19, #0xff
 5d4:	eor	w0, w0, #0x1
 5d8:	and	w0, w0, #0xff
 5dc:	cmp	w0, #0x0
 5e0:	b.ne	64c <__divtc3+0x398>  // b.any
 5e4:	ldr	x0, [sp, #256]
 5e8:	str	x0, [sp, #64]
 5ec:	ldr	x0, [sp, #264]
 5f0:	and	x0, x0, #0x7fffffffffffffff
 5f4:	str	x0, [sp, #72]
 5f8:	mov	w19, #0x1                   	// #1
 5fc:	adrp	x0, 0 <rep_clz>
 600:	add	x0, x0, #0x0
 604:	ldr	q1, [x0]
 608:	ldr	q0, [sp, #64]
 60c:	bl	0 <__unordtf2>
 610:	cmp	w0, #0x0
 614:	b.ne	638 <__divtc3+0x384>  // b.any
 618:	adrp	x0, 0 <rep_clz>
 61c:	add	x0, x0, #0x0
 620:	ldr	q1, [x0]
 624:	ldr	q0, [sp, #64]
 628:	bl	0 <__letf2>
 62c:	cmp	w0, #0x0
 630:	b.le	638 <__divtc3+0x384>
 634:	mov	w19, #0x0                   	// #0
 638:	and	w0, w19, #0xff
 63c:	eor	w0, w0, #0x1
 640:	and	w0, w0, #0xff
 644:	cmp	w0, #0x0
 648:	b.eq	8f8 <__divtc3+0x644>  // b.none
 64c:	ldr	q0, [sp, #240]
 650:	str	q0, [sp, #336]
 654:	ldr	x0, [sp, #336]
 658:	str	x0, [sp, #80]
 65c:	ldr	x0, [sp, #344]
 660:	and	x0, x0, #0x7fffffffffffffff
 664:	str	x0, [sp, #88]
 668:	adrp	x0, 0 <rep_clz>
 66c:	add	x0, x0, #0x0
 670:	ldr	q1, [x0]
 674:	ldr	q0, [sp, #80]
 678:	bl	0 <__unordtf2>
 67c:	cmp	w0, #0x0
 680:	b.ne	6a0 <__divtc3+0x3ec>  // b.any
 684:	adrp	x0, 0 <rep_clz>
 688:	add	x0, x0, #0x0
 68c:	ldr	q1, [x0]
 690:	ldr	q0, [sp, #80]
 694:	bl	0 <__letf2>
 698:	cmp	w0, #0x0
 69c:	b.gt	6bc <__divtc3+0x408>
 6a0:	ldr	q1, [sp, #336]
 6a4:	ldr	q0, [sp, #336]
 6a8:	bl	0 <__unordtf2>
 6ac:	cmp	w0, #0x0
 6b0:	b.ne	6bc <__divtc3+0x408>  // b.any
 6b4:	mov	w0, #0x1                   	// #1
 6b8:	b	6c0 <__divtc3+0x40c>
 6bc:	mov	w0, #0x0                   	// #0
 6c0:	cmp	w0, #0x0
 6c4:	b.eq	8f8 <__divtc3+0x644>  // b.none
 6c8:	ldr	q0, [sp, #224]
 6cc:	str	q0, [sp, #320]
 6d0:	ldr	x0, [sp, #320]
 6d4:	str	x0, [sp, #96]
 6d8:	ldr	x0, [sp, #328]
 6dc:	and	x0, x0, #0x7fffffffffffffff
 6e0:	str	x0, [sp, #104]
 6e4:	adrp	x0, 0 <rep_clz>
 6e8:	add	x0, x0, #0x0
 6ec:	ldr	q1, [x0]
 6f0:	ldr	q0, [sp, #96]
 6f4:	bl	0 <__unordtf2>
 6f8:	cmp	w0, #0x0
 6fc:	b.ne	71c <__divtc3+0x468>  // b.any
 700:	adrp	x0, 0 <rep_clz>
 704:	add	x0, x0, #0x0
 708:	ldr	q1, [x0]
 70c:	ldr	q0, [sp, #96]
 710:	bl	0 <__letf2>
 714:	cmp	w0, #0x0
 718:	b.gt	738 <__divtc3+0x484>
 71c:	ldr	q1, [sp, #320]
 720:	ldr	q0, [sp, #320]
 724:	bl	0 <__unordtf2>
 728:	cmp	w0, #0x0
 72c:	b.ne	738 <__divtc3+0x484>  // b.any
 730:	mov	w0, #0x1                   	// #1
 734:	b	73c <__divtc3+0x488>
 738:	mov	w0, #0x0                   	// #0
 73c:	cmp	w0, #0x0
 740:	b.eq	8f8 <__divtc3+0x644>  // b.none
 744:	ldr	x0, [sp, #272]
 748:	str	x0, [sp, #112]
 74c:	ldr	x0, [sp, #280]
 750:	and	x0, x0, #0x7fffffffffffffff
 754:	str	x0, [sp, #120]
 758:	adrp	x0, 0 <rep_clz>
 75c:	add	x0, x0, #0x0
 760:	ldr	q1, [x0]
 764:	ldr	q0, [sp, #112]
 768:	bl	0 <__unordtf2>
 76c:	cmp	w0, #0x0
 770:	b.ne	790 <__divtc3+0x4dc>  // b.any
 774:	adrp	x0, 0 <rep_clz>
 778:	add	x0, x0, #0x0
 77c:	ldr	q1, [x0]
 780:	ldr	q0, [sp, #112]
 784:	bl	0 <__letf2>
 788:	cmp	w0, #0x0
 78c:	b.gt	7a0 <__divtc3+0x4ec>
 790:	movi	v0.2d, #0x0
 794:	fmov	x0, d0
 798:	fmov	x1, v0.d[1]
 79c:	b	7b4 <__divtc3+0x500>
 7a0:	adrp	x0, 0 <rep_clz>
 7a4:	add	x0, x0, #0x0
 7a8:	ldr	q0, [x0]
 7ac:	fmov	x0, d0
 7b0:	fmov	x1, v0.d[1]
 7b4:	mov	x2, x0
 7b8:	str	x2, [sp, #272]
 7bc:	and	x1, x1, #0x7fffffffffffffff
 7c0:	ldr	x0, [sp, #280]
 7c4:	and	x0, x0, #0x8000000000000000
 7c8:	orr	x0, x1, x0
 7cc:	str	x0, [sp, #280]
 7d0:	ldr	x0, [sp, #256]
 7d4:	str	x0, [sp, #128]
 7d8:	ldr	x0, [sp, #264]
 7dc:	and	x0, x0, #0x7fffffffffffffff
 7e0:	str	x0, [sp, #136]
 7e4:	adrp	x0, 0 <rep_clz>
 7e8:	add	x0, x0, #0x0
 7ec:	ldr	q1, [x0]
 7f0:	ldr	q0, [sp, #128]
 7f4:	bl	0 <__unordtf2>
 7f8:	cmp	w0, #0x0
 7fc:	b.ne	81c <__divtc3+0x568>  // b.any
 800:	adrp	x0, 0 <rep_clz>
 804:	add	x0, x0, #0x0
 808:	ldr	q1, [x0]
 80c:	ldr	q0, [sp, #128]
 810:	bl	0 <__letf2>
 814:	cmp	w0, #0x0
 818:	b.gt	82c <__divtc3+0x578>
 81c:	movi	v0.2d, #0x0
 820:	fmov	x0, d0
 824:	fmov	x1, v0.d[1]
 828:	b	840 <__divtc3+0x58c>
 82c:	adrp	x0, 0 <rep_clz>
 830:	add	x0, x0, #0x0
 834:	ldr	q0, [x0]
 838:	fmov	x0, d0
 83c:	fmov	x1, v0.d[1]
 840:	mov	x2, x0
 844:	str	x2, [sp, #256]
 848:	and	x1, x1, #0x7fffffffffffffff
 84c:	ldr	x0, [sp, #264]
 850:	and	x0, x0, #0x8000000000000000
 854:	orr	x0, x1, x0
 858:	str	x0, [sp, #264]
 85c:	ldr	q1, [sp, #240]
 860:	ldr	q0, [sp, #272]
 864:	bl	0 <__multf3>
 868:	str	q0, [sp, #32]
 86c:	ldr	q1, [sp, #224]
 870:	ldr	q0, [sp, #256]
 874:	bl	0 <__multf3>
 878:	mov	v1.16b, v0.16b
 87c:	ldr	q0, [sp, #32]
 880:	bl	0 <__addtf3>
 884:	adrp	x0, 0 <rep_clz>
 888:	add	x0, x0, #0x0
 88c:	ldr	q1, [x0]
 890:	bl	0 <__multf3>
 894:	str	q0, [sp, #464]
 898:	ldr	q0, [sp, #448]
 89c:	ldr	q2, [sp, #464]
 8a0:	str	q2, [sp, #352]
 8a4:	str	q0, [sp, #368]
 8a8:	ldr	q1, [sp, #240]
 8ac:	ldr	q0, [sp, #256]
 8b0:	bl	0 <__multf3>
 8b4:	str	q0, [sp, #32]
 8b8:	ldr	q1, [sp, #224]
 8bc:	ldr	q0, [sp, #272]
 8c0:	bl	0 <__multf3>
 8c4:	mov	v1.16b, v0.16b
 8c8:	ldr	q0, [sp, #32]
 8cc:	bl	0 <__subtf3>
 8d0:	adrp	x0, 0 <rep_clz>
 8d4:	add	x0, x0, #0x0
 8d8:	ldr	q1, [x0]
 8dc:	bl	0 <__multf3>
 8e0:	str	q0, [sp, #448]
 8e4:	ldr	q0, [sp, #448]
 8e8:	ldr	q2, [sp, #464]
 8ec:	str	q2, [sp, #352]
 8f0:	str	q0, [sp, #368]
 8f4:	b	c0c <__divtc3+0x958>
 8f8:	ldr	x0, [sp, #416]
 8fc:	str	x0, [sp, #144]
 900:	ldr	x0, [sp, #424]
 904:	and	x0, x0, #0x7fffffffffffffff
 908:	str	x0, [sp, #152]
 90c:	mov	w19, #0x1                   	// #1
 910:	adrp	x0, 0 <rep_clz>
 914:	add	x0, x0, #0x0
 918:	ldr	q1, [x0]
 91c:	ldr	q0, [sp, #144]
 920:	bl	0 <__unordtf2>
 924:	cmp	w0, #0x0
 928:	b.ne	94c <__divtc3+0x698>  // b.any
 92c:	adrp	x0, 0 <rep_clz>
 930:	add	x0, x0, #0x0
 934:	ldr	q1, [x0]
 938:	ldr	q0, [sp, #144]
 93c:	bl	0 <__letf2>
 940:	cmp	w0, #0x0
 944:	b.le	94c <__divtc3+0x698>
 948:	mov	w19, #0x0                   	// #0
 94c:	and	w0, w19, #0xff
 950:	eor	w0, w0, #0x1
 954:	and	w0, w0, #0xff
 958:	cmp	w0, #0x0
 95c:	b.eq	c0c <__divtc3+0x958>  // b.none
 960:	movi	v1.2d, #0x0
 964:	ldr	q0, [sp, #416]
 968:	bl	0 <__gttf2>
 96c:	cmp	w0, #0x0
 970:	b.le	c0c <__divtc3+0x958>
 974:	ldr	q0, [sp, #272]
 978:	str	q0, [sp, #304]
 97c:	ldr	x0, [sp, #304]
 980:	str	x0, [sp, #160]
 984:	ldr	x0, [sp, #312]
 988:	and	x0, x0, #0x7fffffffffffffff
 98c:	str	x0, [sp, #168]
 990:	adrp	x0, 0 <rep_clz>
 994:	add	x0, x0, #0x0
 998:	ldr	q1, [x0]
 99c:	ldr	q0, [sp, #160]
 9a0:	bl	0 <__unordtf2>
 9a4:	cmp	w0, #0x0
 9a8:	b.ne	9c8 <__divtc3+0x714>  // b.any
 9ac:	adrp	x0, 0 <rep_clz>
 9b0:	add	x0, x0, #0x0
 9b4:	ldr	q1, [x0]
 9b8:	ldr	q0, [sp, #160]
 9bc:	bl	0 <__letf2>
 9c0:	cmp	w0, #0x0
 9c4:	b.gt	9e4 <__divtc3+0x730>
 9c8:	ldr	q1, [sp, #304]
 9cc:	ldr	q0, [sp, #304]
 9d0:	bl	0 <__unordtf2>
 9d4:	cmp	w0, #0x0
 9d8:	b.ne	9e4 <__divtc3+0x730>  // b.any
 9dc:	mov	w0, #0x1                   	// #1
 9e0:	b	9e8 <__divtc3+0x734>
 9e4:	mov	w0, #0x0                   	// #0
 9e8:	cmp	w0, #0x0
 9ec:	b.eq	c0c <__divtc3+0x958>  // b.none
 9f0:	ldr	q0, [sp, #256]
 9f4:	str	q0, [sp, #288]
 9f8:	ldr	x0, [sp, #288]
 9fc:	str	x0, [sp, #176]
 a00:	ldr	x0, [sp, #296]
 a04:	and	x0, x0, #0x7fffffffffffffff
 a08:	str	x0, [sp, #184]
 a0c:	adrp	x0, 0 <rep_clz>
 a10:	add	x0, x0, #0x0
 a14:	ldr	q1, [x0]
 a18:	ldr	q0, [sp, #176]
 a1c:	bl	0 <__unordtf2>
 a20:	cmp	w0, #0x0
 a24:	b.ne	a44 <__divtc3+0x790>  // b.any
 a28:	adrp	x0, 0 <rep_clz>
 a2c:	add	x0, x0, #0x0
 a30:	ldr	q1, [x0]
 a34:	ldr	q0, [sp, #176]
 a38:	bl	0 <__letf2>
 a3c:	cmp	w0, #0x0
 a40:	b.gt	a60 <__divtc3+0x7ac>
 a44:	ldr	q1, [sp, #288]
 a48:	ldr	q0, [sp, #288]
 a4c:	bl	0 <__unordtf2>
 a50:	cmp	w0, #0x0
 a54:	b.ne	a60 <__divtc3+0x7ac>  // b.any
 a58:	mov	w0, #0x1                   	// #1
 a5c:	b	a64 <__divtc3+0x7b0>
 a60:	mov	w0, #0x0                   	// #0
 a64:	cmp	w0, #0x0
 a68:	b.eq	c0c <__divtc3+0x958>  // b.none
 a6c:	ldr	x0, [sp, #240]
 a70:	str	x0, [sp, #192]
 a74:	ldr	x0, [sp, #248]
 a78:	and	x0, x0, #0x7fffffffffffffff
 a7c:	str	x0, [sp, #200]
 a80:	adrp	x0, 0 <rep_clz>
 a84:	add	x0, x0, #0x0
 a88:	ldr	q1, [x0]
 a8c:	ldr	q0, [sp, #192]
 a90:	bl	0 <__unordtf2>
 a94:	cmp	w0, #0x0
 a98:	b.ne	ab8 <__divtc3+0x804>  // b.any
 a9c:	adrp	x0, 0 <rep_clz>
 aa0:	add	x0, x0, #0x0
 aa4:	ldr	q1, [x0]
 aa8:	ldr	q0, [sp, #192]
 aac:	bl	0 <__letf2>
 ab0:	cmp	w0, #0x0
 ab4:	b.gt	ac8 <__divtc3+0x814>
 ab8:	movi	v0.2d, #0x0
 abc:	fmov	x0, d0
 ac0:	fmov	x1, v0.d[1]
 ac4:	b	adc <__divtc3+0x828>
 ac8:	adrp	x0, 0 <rep_clz>
 acc:	add	x0, x0, #0x0
 ad0:	ldr	q0, [x0]
 ad4:	fmov	x0, d0
 ad8:	fmov	x1, v0.d[1]
 adc:	mov	x2, x0
 ae0:	str	x2, [sp, #240]
 ae4:	and	x1, x1, #0x7fffffffffffffff
 ae8:	ldr	x0, [sp, #248]
 aec:	and	x0, x0, #0x8000000000000000
 af0:	orr	x0, x1, x0
 af4:	str	x0, [sp, #248]
 af8:	ldr	x0, [sp, #224]
 afc:	str	x0, [sp, #208]
 b00:	ldr	x0, [sp, #232]
 b04:	and	x0, x0, #0x7fffffffffffffff
 b08:	str	x0, [sp, #216]
 b0c:	adrp	x0, 0 <rep_clz>
 b10:	add	x0, x0, #0x0
 b14:	ldr	q1, [x0]
 b18:	ldr	q0, [sp, #208]
 b1c:	bl	0 <__unordtf2>
 b20:	cmp	w0, #0x0
 b24:	b.ne	b44 <__divtc3+0x890>  // b.any
 b28:	adrp	x0, 0 <rep_clz>
 b2c:	add	x0, x0, #0x0
 b30:	ldr	q1, [x0]
 b34:	ldr	q0, [sp, #208]
 b38:	bl	0 <__letf2>
 b3c:	cmp	w0, #0x0
 b40:	b.gt	b54 <__divtc3+0x8a0>
 b44:	movi	v0.2d, #0x0
 b48:	fmov	x0, d0
 b4c:	fmov	x1, v0.d[1]
 b50:	b	b68 <__divtc3+0x8b4>
 b54:	adrp	x0, 0 <rep_clz>
 b58:	add	x0, x0, #0x0
 b5c:	ldr	q0, [x0]
 b60:	fmov	x0, d0
 b64:	fmov	x1, v0.d[1]
 b68:	mov	x2, x0
 b6c:	str	x2, [sp, #224]
 b70:	and	x1, x1, #0x7fffffffffffffff
 b74:	ldr	x0, [sp, #232]
 b78:	and	x0, x0, #0x8000000000000000
 b7c:	orr	x0, x1, x0
 b80:	str	x0, [sp, #232]
 b84:	ldr	q1, [sp, #240]
 b88:	ldr	q0, [sp, #272]
 b8c:	bl	0 <__multf3>
 b90:	str	q0, [sp, #32]
 b94:	ldr	q1, [sp, #224]
 b98:	ldr	q0, [sp, #256]
 b9c:	bl	0 <__multf3>
 ba0:	mov	v1.16b, v0.16b
 ba4:	ldr	q0, [sp, #32]
 ba8:	bl	0 <__addtf3>
 bac:	movi	v1.2d, #0x0
 bb0:	bl	0 <__multf3>
 bb4:	str	q0, [sp, #464]
 bb8:	ldr	q0, [sp, #448]
 bbc:	ldr	q2, [sp, #464]
 bc0:	str	q2, [sp, #352]
 bc4:	str	q0, [sp, #368]
 bc8:	ldr	q1, [sp, #240]
 bcc:	ldr	q0, [sp, #256]
 bd0:	bl	0 <__multf3>
 bd4:	str	q0, [sp, #32]
 bd8:	ldr	q1, [sp, #224]
 bdc:	ldr	q0, [sp, #272]
 be0:	bl	0 <__multf3>
 be4:	mov	v1.16b, v0.16b
 be8:	ldr	q0, [sp, #32]
 bec:	bl	0 <__subtf3>
 bf0:	movi	v1.2d, #0x0
 bf4:	bl	0 <__multf3>
 bf8:	str	q0, [sp, #448]
 bfc:	ldr	q0, [sp, #448]
 c00:	ldr	q2, [sp, #464]
 c04:	str	q2, [sp, #352]
 c08:	str	q0, [sp, #368]
 c0c:	ldr	q2, [sp, #464]
 c10:	ldr	q0, [sp, #448]
 c14:	mov	v4.16b, v2.16b
 c18:	mov	v2.16b, v0.16b
 c1c:	mov	v0.16b, v4.16b
 c20:	mov	v1.16b, v2.16b
 c24:	ldr	x19, [sp, #16]
 c28:	ldp	x29, x30, [sp], #480
 c2c:	ret

divti3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__divti3>:
   0:	stp	x29, x30, [sp, #-128]!
   4:	mov	x29, sp
   8:	stp	x20, x21, [sp, #16]
   c:	stp	x22, x23, [sp, #32]
  10:	stp	x0, x1, [sp, #64]
  14:	stp	x2, x3, [sp, #48]
  18:	mov	w0, #0x7f                  	// #127
  1c:	str	w0, [sp, #124]
  20:	ldr	w0, [sp, #124]
  24:	sub	w0, w0, #0x40
  28:	ldr	x1, [sp, #72]
  2c:	asr	x2, x1, x0
  30:	ldr	x1, [sp, #72]
  34:	asr	x1, x1, #63
  38:	ldr	x3, [sp, #72]
  3c:	lsl	x12, x3, #1
  40:	mov	w13, #0x3f                  	// #63
  44:	ldr	w3, [sp, #124]
  48:	sub	w3, w13, w3
  4c:	lsl	x3, x12, x3
  50:	ldr	w12, [sp, #124]
  54:	ldr	x13, [sp, #64]
  58:	lsr	x12, x13, x12
  5c:	orr	x3, x12, x3
  60:	str	x3, [sp, #96]
  64:	ldr	w3, [sp, #124]
  68:	ldr	x12, [sp, #72]
  6c:	asr	x3, x12, x3
  70:	str	x3, [sp, #104]
  74:	ldr	x3, [sp, #96]
  78:	cmp	w0, #0x0
  7c:	csel	x2, x3, x2, lt  // lt = tstop
  80:	str	x2, [sp, #96]
  84:	ldr	x2, [sp, #104]
  88:	cmp	w0, #0x0
  8c:	csel	x0, x2, x1, lt  // lt = tstop
  90:	str	x0, [sp, #104]
  94:	ldr	w0, [sp, #124]
  98:	sub	w0, w0, #0x40
  9c:	ldr	x1, [sp, #56]
  a0:	asr	x2, x1, x0
  a4:	ldr	x1, [sp, #56]
  a8:	asr	x1, x1, #63
  ac:	ldr	x3, [sp, #56]
  b0:	lsl	x12, x3, #1
  b4:	mov	w13, #0x3f                  	// #63
  b8:	ldr	w3, [sp, #124]
  bc:	sub	w3, w13, w3
  c0:	lsl	x3, x12, x3
  c4:	ldr	w12, [sp, #124]
  c8:	ldr	x13, [sp, #48]
  cc:	lsr	x12, x13, x12
  d0:	orr	x3, x12, x3
  d4:	str	x3, [sp, #80]
  d8:	ldr	w3, [sp, #124]
  dc:	ldr	x12, [sp, #56]
  e0:	asr	x3, x12, x3
  e4:	str	x3, [sp, #88]
  e8:	ldr	x3, [sp, #80]
  ec:	cmp	w0, #0x0
  f0:	csel	x2, x3, x2, lt  // lt = tstop
  f4:	str	x2, [sp, #80]
  f8:	ldr	x2, [sp, #88]
  fc:	cmp	w0, #0x0
 100:	csel	x0, x2, x1, lt  // lt = tstop
 104:	str	x0, [sp, #88]
 108:	ldr	x1, [sp, #64]
 10c:	ldr	x0, [sp, #96]
 110:	eor	x6, x1, x0
 114:	ldr	x1, [sp, #72]
 118:	ldr	x0, [sp, #104]
 11c:	eor	x7, x1, x0
 120:	ldp	x0, x1, [sp, #96]
 124:	subs	x2, x6, x0
 128:	sbc	x0, x7, x1
 12c:	mov	x10, x2
 130:	mov	x11, x0
 134:	stp	x10, x11, [sp, #64]
 138:	ldr	x1, [sp, #48]
 13c:	ldr	x0, [sp, #80]
 140:	eor	x4, x1, x0
 144:	ldr	x1, [sp, #56]
 148:	ldr	x0, [sp, #88]
 14c:	eor	x5, x1, x0
 150:	ldp	x0, x1, [sp, #80]
 154:	subs	x2, x4, x0
 158:	sbc	x0, x5, x1
 15c:	mov	x8, x2
 160:	mov	x9, x0
 164:	stp	x8, x9, [sp, #48]
 168:	ldr	x1, [sp, #96]
 16c:	ldr	x0, [sp, #80]
 170:	eor	x0, x1, x0
 174:	str	x0, [sp, #96]
 178:	ldr	x1, [sp, #104]
 17c:	ldr	x0, [sp, #88]
 180:	eor	x0, x1, x0
 184:	str	x0, [sp, #104]
 188:	ldp	x0, x1, [sp, #64]
 18c:	ldp	x2, x3, [sp, #48]
 190:	mov	x4, #0x0                   	// #0
 194:	bl	0 <__udivmodti4>
 198:	mov	x2, x0
 19c:	mov	x3, x1
 1a0:	ldp	x0, x1, [sp, #96]
 1a4:	eor	x20, x2, x0
 1a8:	eor	x21, x3, x1
 1ac:	ldp	x0, x1, [sp, #96]
 1b0:	subs	x2, x20, x0
 1b4:	sbc	x0, x21, x1
 1b8:	mov	x22, x2
 1bc:	mov	x23, x0
 1c0:	mov	x0, x22
 1c4:	mov	x1, x23
 1c8:	ldp	x20, x21, [sp, #16]
 1cc:	ldp	x22, x23, [sp, #32]
 1d0:	ldp	x29, x30, [sp], #128
 1d4:	ret

divtf3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <rep_clz>:
       0:	sub	sp, sp, #0x30
       4:	stp	x0, x1, [sp]
       8:	ldp	x0, x1, [sp]
       c:	stp	x0, x1, [sp, #16]
      10:	ldr	x0, [sp, #24]
      14:	cmp	x0, #0x0
      18:	b.eq	2c <rep_clz+0x2c>  // b.none
      1c:	ldr	x0, [sp, #24]
      20:	str	x0, [sp, #40]
      24:	str	xzr, [sp, #32]
      28:	b	3c <rep_clz+0x3c>
      2c:	ldr	x0, [sp, #16]
      30:	str	x0, [sp, #40]
      34:	mov	x0, #0x40                  	// #64
      38:	str	x0, [sp, #32]
      3c:	ldr	x0, [sp, #40]
      40:	clz	x0, x0
      44:	mov	w1, w0
      48:	ldr	x0, [sp, #32]
      4c:	add	w0, w1, w0
      50:	add	sp, sp, #0x30
      54:	ret

0000000000000058 <wideMultiply>:
      58:	sub	sp, sp, #0x590
      5c:	stp	x29, x30, [sp]
      60:	mov	x29, sp
      64:	stp	x19, x20, [sp, #16]
      68:	stp	x21, x22, [sp, #32]
      6c:	stp	x23, x24, [sp, #48]
      70:	stp	x25, x26, [sp, #64]
      74:	str	x27, [sp, #80]
      78:	add	x30, sp, #0x410
      7c:	stp	x0, x1, [x30, #96]
      80:	add	x0, sp, #0x410
      84:	stp	x2, x3, [x0, #80]
      88:	str	x4, [sp, #1112]
      8c:	str	x5, [sp, #1104]
      90:	ldr	x0, [sp, #1144]
      94:	lsr	x6, x0, #32
      98:	mov	x7, #0x0                   	// #0
      9c:	mov	x0, x6
      a0:	and	x1, x0, #0xffffffff
      a4:	ldr	x0, [sp, #1128]
      a8:	lsr	x10, x0, #32
      ac:	mov	x11, #0x0                   	// #0
      b0:	mov	x0, x10
      b4:	and	x0, x0, #0xffffffff
      b8:	mul	x0, x1, x0
      bc:	str	x0, [sp, #1416]
      c0:	ldr	x0, [sp, #1144]
      c4:	lsr	x12, x0, #32
      c8:	mov	x13, #0x0                   	// #0
      cc:	mov	x0, x12
      d0:	and	x1, x0, #0xffffffff
      d4:	ldr	x0, [sp, #1128]
      d8:	str	x0, [sp, #192]
      dc:	str	xzr, [sp, #200]
      e0:	ldr	x0, [sp, #192]
      e4:	and	x0, x0, #0xffffffff
      e8:	mul	x0, x1, x0
      ec:	str	x0, [sp, #1408]
      f0:	ldr	x0, [sp, #1144]
      f4:	lsr	x20, x0, #32
      f8:	mov	x21, #0x0                   	// #0
      fc:	mov	x0, x20
     100:	and	x2, x0, #0xffffffff
     104:	ldr	x0, [sp, #1128]
     108:	lsl	x1, x0, #32
     10c:	ldr	x0, [sp, #1120]
     110:	lsr	x8, x0, #32
     114:	orr	x8, x1, x8
     118:	ldr	x0, [sp, #1128]
     11c:	lsr	x9, x0, #32
     120:	mov	x0, x8
     124:	and	x0, x0, #0xffffffff
     128:	mul	x0, x2, x0
     12c:	str	x0, [sp, #1400]
     130:	ldr	x0, [sp, #1144]
     134:	lsr	x0, x0, #32
     138:	str	x0, [sp, #208]
     13c:	str	xzr, [sp, #216]
     140:	ldr	x0, [sp, #208]
     144:	and	x1, x0, #0xffffffff
     148:	ldr	x0, [sp, #1120]
     14c:	and	x0, x0, #0xffffffff
     150:	mul	x0, x1, x0
     154:	str	x0, [sp, #1392]
     158:	ldr	x0, [sp, #1144]
     15c:	str	x0, [sp, #224]
     160:	str	xzr, [sp, #232]
     164:	ldr	x0, [sp, #224]
     168:	and	x1, x0, #0xffffffff
     16c:	ldr	x0, [sp, #1128]
     170:	lsr	x0, x0, #32
     174:	str	x0, [sp, #240]
     178:	str	xzr, [sp, #248]
     17c:	ldr	x0, [sp, #240]
     180:	and	x0, x0, #0xffffffff
     184:	mul	x0, x1, x0
     188:	str	x0, [sp, #1384]
     18c:	ldr	x0, [sp, #1144]
     190:	str	x0, [sp, #256]
     194:	str	xzr, [sp, #264]
     198:	ldr	x0, [sp, #256]
     19c:	and	x1, x0, #0xffffffff
     1a0:	ldr	x0, [sp, #1128]
     1a4:	str	x0, [sp, #272]
     1a8:	str	xzr, [sp, #280]
     1ac:	ldr	x0, [sp, #272]
     1b0:	and	x0, x0, #0xffffffff
     1b4:	mul	x0, x1, x0
     1b8:	str	x0, [sp, #1376]
     1bc:	ldr	x0, [sp, #1144]
     1c0:	str	x0, [sp, #288]
     1c4:	str	xzr, [sp, #296]
     1c8:	ldr	x0, [sp, #288]
     1cc:	and	x2, x0, #0xffffffff
     1d0:	ldr	x0, [sp, #1128]
     1d4:	lsl	x1, x0, #32
     1d8:	ldr	x0, [sp, #1120]
     1dc:	lsr	x14, x0, #32
     1e0:	orr	x14, x1, x14
     1e4:	ldr	x0, [sp, #1128]
     1e8:	lsr	x15, x0, #32
     1ec:	mov	x0, x14
     1f0:	and	x0, x0, #0xffffffff
     1f4:	mul	x0, x2, x0
     1f8:	str	x0, [sp, #1368]
     1fc:	ldr	x0, [sp, #1144]
     200:	str	x0, [sp, #304]
     204:	str	xzr, [sp, #312]
     208:	ldr	x0, [sp, #304]
     20c:	and	x1, x0, #0xffffffff
     210:	ldr	x0, [sp, #1120]
     214:	and	x0, x0, #0xffffffff
     218:	mul	x0, x1, x0
     21c:	str	x0, [sp, #1360]
     220:	ldr	x0, [sp, #1144]
     224:	lsl	x1, x0, #32
     228:	ldr	x0, [sp, #1136]
     22c:	lsr	x16, x0, #32
     230:	orr	x16, x1, x16
     234:	ldr	x0, [sp, #1144]
     238:	lsr	x17, x0, #32
     23c:	mov	x0, x16
     240:	and	x1, x0, #0xffffffff
     244:	ldr	x0, [sp, #1128]
     248:	lsr	x0, x0, #32
     24c:	str	x0, [sp, #320]
     250:	str	xzr, [sp, #328]
     254:	ldr	x0, [sp, #320]
     258:	and	x0, x0, #0xffffffff
     25c:	mul	x0, x1, x0
     260:	str	x0, [sp, #1352]
     264:	ldr	x0, [sp, #1144]
     268:	lsl	x1, x0, #32
     26c:	ldr	x0, [sp, #1136]
     270:	lsr	x18, x0, #32
     274:	orr	x18, x1, x18
     278:	ldr	x0, [sp, #1144]
     27c:	lsr	x19, x0, #32
     280:	mov	x0, x18
     284:	and	x1, x0, #0xffffffff
     288:	ldr	x0, [sp, #1128]
     28c:	str	x0, [sp, #336]
     290:	str	xzr, [sp, #344]
     294:	ldr	x0, [sp, #336]
     298:	and	x0, x0, #0xffffffff
     29c:	mul	x0, x1, x0
     2a0:	str	x0, [sp, #1344]
     2a4:	ldr	x0, [sp, #1144]
     2a8:	lsl	x1, x0, #32
     2ac:	ldr	x0, [sp, #1136]
     2b0:	lsr	x22, x0, #32
     2b4:	orr	x22, x1, x22
     2b8:	ldr	x0, [sp, #1144]
     2bc:	lsr	x23, x0, #32
     2c0:	mov	x0, x22
     2c4:	and	x2, x0, #0xffffffff
     2c8:	ldr	x0, [sp, #1128]
     2cc:	lsl	x1, x0, #32
     2d0:	ldr	x0, [sp, #1120]
     2d4:	lsr	x24, x0, #32
     2d8:	orr	x24, x1, x24
     2dc:	ldr	x0, [sp, #1128]
     2e0:	lsr	x25, x0, #32
     2e4:	mov	x0, x24
     2e8:	and	x0, x0, #0xffffffff
     2ec:	mul	x0, x2, x0
     2f0:	str	x0, [sp, #1336]
     2f4:	ldr	x0, [sp, #1144]
     2f8:	lsl	x1, x0, #32
     2fc:	ldr	x0, [sp, #1136]
     300:	lsr	x26, x0, #32
     304:	orr	x26, x1, x26
     308:	ldr	x0, [sp, #1144]
     30c:	lsr	x27, x0, #32
     310:	mov	x0, x26
     314:	and	x1, x0, #0xffffffff
     318:	ldr	x0, [sp, #1120]
     31c:	and	x0, x0, #0xffffffff
     320:	mul	x0, x1, x0
     324:	str	x0, [sp, #1328]
     328:	ldr	x0, [sp, #1136]
     32c:	and	x1, x0, #0xffffffff
     330:	ldr	x0, [sp, #1128]
     334:	lsr	x0, x0, #32
     338:	str	x0, [sp, #352]
     33c:	str	xzr, [sp, #360]
     340:	ldr	x0, [sp, #352]
     344:	and	x0, x0, #0xffffffff
     348:	mul	x0, x1, x0
     34c:	str	x0, [sp, #1320]
     350:	ldr	x0, [sp, #1136]
     354:	and	x1, x0, #0xffffffff
     358:	ldr	x0, [sp, #1128]
     35c:	str	x0, [sp, #368]
     360:	str	xzr, [sp, #376]
     364:	ldr	x0, [sp, #368]
     368:	and	x0, x0, #0xffffffff
     36c:	mul	x0, x1, x0
     370:	str	x0, [sp, #1312]
     374:	ldr	x0, [sp, #1136]
     378:	and	x2, x0, #0xffffffff
     37c:	ldr	x0, [sp, #1128]
     380:	lsl	x1, x0, #32
     384:	ldr	x0, [sp, #1120]
     388:	lsr	x0, x0, #32
     38c:	str	x0, [sp, #96]
     390:	ldr	x0, [sp, #96]
     394:	orr	x0, x1, x0
     398:	str	x0, [sp, #96]
     39c:	ldr	x0, [sp, #1128]
     3a0:	lsr	x0, x0, #32
     3a4:	str	x0, [sp, #104]
     3a8:	ldr	x0, [sp, #96]
     3ac:	and	x0, x0, #0xffffffff
     3b0:	mul	x0, x2, x0
     3b4:	str	x0, [sp, #1304]
     3b8:	ldr	x0, [sp, #1136]
     3bc:	and	x1, x0, #0xffffffff
     3c0:	ldr	x0, [sp, #1120]
     3c4:	and	x0, x0, #0xffffffff
     3c8:	mul	x0, x1, x0
     3cc:	str	x0, [sp, #1296]
     3d0:	ldr	x0, [sp, #1296]
     3d4:	str	x0, [sp, #1280]
     3d8:	str	xzr, [sp, #1288]
     3dc:	ldr	x0, [sp, #1328]
     3e0:	str	x0, [sp, #384]
     3e4:	str	xzr, [sp, #392]
     3e8:	ldr	x0, [sp, #1304]
     3ec:	str	x0, [sp, #400]
     3f0:	str	xzr, [sp, #408]
     3f4:	ldp	x4, x5, [sp, #400]
     3f8:	mov	x0, x4
     3fc:	ldp	x2, x3, [sp, #384]
     400:	mov	x1, x2
     404:	adds	x1, x1, x0
     408:	mov	x0, x5
     40c:	mov	x2, x3
     410:	adc	x0, x2, x0
     414:	str	x1, [sp, #992]
     418:	str	x0, [sp, #1000]
     41c:	add	x0, sp, #0x410
     420:	ldp	x0, x1, [x0, #-48]
     424:	add	x2, sp, #0x410
     428:	stp	x0, x1, [x2, #224]
     42c:	ldr	x0, [sp, #1360]
     430:	str	x0, [sp, #416]
     434:	str	xzr, [sp, #424]
     438:	ldr	x0, [sp, #1336]
     43c:	str	x0, [sp, #432]
     440:	str	xzr, [sp, #440]
     444:	ldp	x4, x5, [sp, #432]
     448:	mov	x0, x4
     44c:	ldp	x2, x3, [sp, #416]
     450:	mov	x1, x2
     454:	adds	x1, x1, x0
     458:	mov	x0, x5
     45c:	mov	x2, x3
     460:	adc	x0, x2, x0
     464:	str	x1, [sp, #448]
     468:	str	x0, [sp, #456]
     46c:	ldr	x0, [sp, #1312]
     470:	str	x0, [sp, #464]
     474:	str	xzr, [sp, #472]
     478:	ldp	x4, x5, [sp, #464]
     47c:	mov	x0, x4
     480:	ldp	x2, x3, [sp, #448]
     484:	mov	x1, x2
     488:	adds	x1, x1, x0
     48c:	mov	x0, x5
     490:	mov	x2, x3
     494:	adc	x0, x2, x0
     498:	str	x1, [sp, #1008]
     49c:	str	x0, [sp, #1016]
     4a0:	add	x0, sp, #0x410
     4a4:	ldp	x0, x1, [x0, #-32]
     4a8:	add	x2, sp, #0x410
     4ac:	stp	x0, x1, [x2, #208]
     4b0:	ldr	x0, [sp, #1392]
     4b4:	str	x0, [sp, #480]
     4b8:	str	xzr, [sp, #488]
     4bc:	ldr	x0, [sp, #1368]
     4c0:	str	x0, [sp, #496]
     4c4:	str	xzr, [sp, #504]
     4c8:	ldp	x4, x5, [sp, #496]
     4cc:	mov	x0, x4
     4d0:	ldp	x2, x3, [sp, #480]
     4d4:	mov	x1, x2
     4d8:	adds	x1, x1, x0
     4dc:	mov	x0, x5
     4e0:	mov	x2, x3
     4e4:	adc	x0, x2, x0
     4e8:	str	x1, [sp, #512]
     4ec:	str	x0, [sp, #520]
     4f0:	ldr	x0, [sp, #1344]
     4f4:	str	x0, [sp, #528]
     4f8:	str	xzr, [sp, #536]
     4fc:	add	x0, sp, #0x210
     500:	ldp	x4, x5, [x0]
     504:	mov	x0, x4
     508:	add	x1, sp, #0x200
     50c:	ldp	x2, x3, [x1]
     510:	mov	x1, x2
     514:	adds	x1, x1, x0
     518:	mov	x0, x5
     51c:	mov	x2, x3
     520:	adc	x0, x2, x0
     524:	str	x1, [sp, #544]
     528:	str	x0, [sp, #552]
     52c:	ldr	x0, [sp, #1320]
     530:	str	x0, [sp, #560]
     534:	str	xzr, [sp, #568]
     538:	add	x0, sp, #0x210
     53c:	ldp	x4, x5, [x0, #32]
     540:	mov	x0, x4
     544:	add	x1, sp, #0x210
     548:	ldp	x2, x3, [x1, #16]
     54c:	mov	x1, x2
     550:	adds	x1, x1, x0
     554:	mov	x0, x5
     558:	mov	x2, x3
     55c:	adc	x0, x2, x0
     560:	str	x1, [sp, #1024]
     564:	str	x0, [sp, #1032]
     568:	add	x0, sp, #0x410
     56c:	ldp	x0, x1, [x0, #-16]
     570:	add	x2, sp, #0x410
     574:	stp	x0, x1, [x2, #192]
     578:	ldr	x0, [sp, #1400]
     57c:	str	x0, [sp, #576]
     580:	str	xzr, [sp, #584]
     584:	ldr	x0, [sp, #1376]
     588:	str	x0, [sp, #592]
     58c:	str	xzr, [sp, #600]
     590:	add	x0, sp, #0x210
     594:	ldp	x4, x5, [x0, #64]
     598:	mov	x0, x4
     59c:	add	x1, sp, #0x210
     5a0:	ldp	x2, x3, [x1, #48]
     5a4:	mov	x1, x2
     5a8:	adds	x1, x1, x0
     5ac:	mov	x0, x5
     5b0:	mov	x2, x3
     5b4:	adc	x0, x2, x0
     5b8:	str	x1, [sp, #608]
     5bc:	str	x0, [sp, #616]
     5c0:	ldr	x0, [sp, #1352]
     5c4:	str	x0, [sp, #624]
     5c8:	str	xzr, [sp, #632]
     5cc:	add	x0, sp, #0x210
     5d0:	ldp	x4, x5, [x0, #96]
     5d4:	mov	x0, x4
     5d8:	add	x1, sp, #0x210
     5dc:	ldp	x2, x3, [x1, #80]
     5e0:	mov	x1, x2
     5e4:	adds	x1, x1, x0
     5e8:	mov	x0, x5
     5ec:	mov	x2, x3
     5f0:	adc	x0, x2, x0
     5f4:	str	x1, [sp, #1040]
     5f8:	str	x0, [sp, #1048]
     5fc:	add	x0, sp, #0x410
     600:	ldp	x0, x1, [x0]
     604:	add	x2, sp, #0x410
     608:	stp	x0, x1, [x2, #176]
     60c:	ldr	x0, [sp, #1408]
     610:	str	x0, [sp, #640]
     614:	str	xzr, [sp, #648]
     618:	ldr	x0, [sp, #1384]
     61c:	str	x0, [sp, #656]
     620:	str	xzr, [sp, #664]
     624:	add	x0, sp, #0x210
     628:	ldp	x4, x5, [x0, #128]
     62c:	mov	x0, x4
     630:	add	x1, sp, #0x210
     634:	ldp	x2, x3, [x1, #112]
     638:	mov	x1, x2
     63c:	adds	x1, x1, x0
     640:	mov	x0, x5
     644:	mov	x2, x3
     648:	adc	x0, x2, x0
     64c:	str	x1, [sp, #1056]
     650:	str	x0, [sp, #1064]
     654:	add	x0, sp, #0x410
     658:	ldp	x0, x1, [x0, #16]
     65c:	add	x2, sp, #0x410
     660:	stp	x0, x1, [x2, #160]
     664:	ldr	x0, [sp, #1416]
     668:	str	x0, [sp, #1184]
     66c:	str	xzr, [sp, #1192]
     670:	ldr	x1, [sp, #1280]
     674:	mov	x0, #0xffffffffffffffff    	// #-1
     678:	and	x0, x1, x0
     67c:	str	x0, [sp, #672]
     680:	ldr	x1, [sp, #1288]
     684:	mov	x0, #0x0                   	// #0
     688:	and	x0, x1, x0
     68c:	str	x0, [sp, #680]
     690:	ldr	x0, [sp, #1264]
     694:	lsr	x1, x0, #32
     698:	ldr	x0, [sp, #1272]
     69c:	lsl	x0, x0, #32
     6a0:	str	x0, [sp, #120]
     6a4:	ldr	x0, [sp, #120]
     6a8:	orr	x0, x1, x0
     6ac:	str	x0, [sp, #120]
     6b0:	ldr	x0, [sp, #1264]
     6b4:	lsl	x0, x0, #32
     6b8:	str	x0, [sp, #112]
     6bc:	ldp	x2, x3, [sp, #112]
     6c0:	mov	x0, x2
     6c4:	and	x0, x0, #0xffffffff00000000
     6c8:	str	x0, [sp, #688]
     6cc:	mov	x0, #0x0                   	// #0
     6d0:	mov	x1, x3
     6d4:	and	x0, x1, x0
     6d8:	str	x0, [sp, #696]
     6dc:	add	x0, sp, #0x210
     6e0:	ldp	x4, x5, [x0, #160]
     6e4:	mov	x0, x4
     6e8:	add	x1, sp, #0x210
     6ec:	ldp	x2, x3, [x1, #144]
     6f0:	mov	x1, x2
     6f4:	adds	x1, x1, x0
     6f8:	mov	x0, x5
     6fc:	mov	x2, x3
     700:	adc	x0, x2, x0
     704:	str	x1, [sp, #1072]
     708:	str	x0, [sp, #1080]
     70c:	add	x0, sp, #0x410
     710:	ldp	x0, x1, [x0, #32]
     714:	add	x2, sp, #0x410
     718:	stp	x0, x1, [x2, #128]
     71c:	ldr	x0, [sp, #1288]
     720:	str	x0, [sp, #704]
     724:	str	xzr, [sp, #712]
     728:	ldr	x0, [sp, #1272]
     72c:	lsl	x1, x0, #32
     730:	ldr	x0, [sp, #1264]
     734:	lsr	x0, x0, #32
     738:	str	x0, [sp, #128]
     73c:	ldr	x0, [sp, #128]
     740:	orr	x0, x1, x0
     744:	str	x0, [sp, #128]
     748:	ldr	x0, [sp, #1272]
     74c:	lsr	x0, x0, #32
     750:	str	x0, [sp, #136]
     754:	mov	x0, #0xffffffffffffffff    	// #-1
     758:	ldp	x2, x3, [sp, #128]
     75c:	mov	x1, x2
     760:	and	x0, x1, x0
     764:	str	x0, [sp, #720]
     768:	mov	x0, #0x0                   	// #0
     76c:	mov	x1, x3
     770:	and	x0, x1, x0
     774:	str	x0, [sp, #728]
     778:	add	x0, sp, #0x210
     77c:	ldp	x4, x5, [x0, #192]
     780:	mov	x0, x4
     784:	add	x1, sp, #0x210
     788:	ldp	x2, x3, [x1, #176]
     78c:	mov	x1, x2
     790:	adds	x1, x1, x0
     794:	mov	x0, x5
     798:	mov	x2, x3
     79c:	adc	x0, x2, x0
     7a0:	str	x1, [sp, #736]
     7a4:	str	x0, [sp, #744]
     7a8:	ldr	x1, [sp, #1248]
     7ac:	mov	x0, #0xffffffffffffffff    	// #-1
     7b0:	and	x0, x1, x0
     7b4:	str	x0, [sp, #752]
     7b8:	ldr	x1, [sp, #1256]
     7bc:	mov	x0, #0x0                   	// #0
     7c0:	and	x0, x1, x0
     7c4:	str	x0, [sp, #760]
     7c8:	add	x0, sp, #0x210
     7cc:	ldp	x4, x5, [x0, #224]
     7d0:	mov	x0, x4
     7d4:	add	x1, sp, #0x210
     7d8:	ldp	x2, x3, [x1, #208]
     7dc:	mov	x1, x2
     7e0:	adds	x1, x1, x0
     7e4:	mov	x0, x5
     7e8:	mov	x2, x3
     7ec:	adc	x0, x2, x0
     7f0:	str	x1, [sp, #768]
     7f4:	str	x0, [sp, #776]
     7f8:	ldr	x0, [sp, #1232]
     7fc:	lsr	x1, x0, #32
     800:	ldr	x0, [sp, #1240]
     804:	lsl	x0, x0, #32
     808:	str	x0, [sp, #152]
     80c:	ldr	x0, [sp, #152]
     810:	orr	x0, x1, x0
     814:	str	x0, [sp, #152]
     818:	ldr	x0, [sp, #1232]
     81c:	lsl	x0, x0, #32
     820:	str	x0, [sp, #144]
     824:	ldp	x2, x3, [sp, #144]
     828:	mov	x0, x2
     82c:	and	x0, x0, #0xffffffff00000000
     830:	str	x0, [sp, #784]
     834:	mov	x0, #0x0                   	// #0
     838:	mov	x1, x3
     83c:	and	x0, x1, x0
     840:	str	x0, [sp, #792]
     844:	add	x0, sp, #0x410
     848:	ldp	x4, x5, [x0, #-256]
     84c:	mov	x0, x4
     850:	add	x1, sp, #0x210
     854:	ldp	x2, x3, [x1, #240]
     858:	mov	x1, x2
     85c:	adds	x1, x1, x0
     860:	mov	x0, x5
     864:	mov	x2, x3
     868:	adc	x0, x2, x0
     86c:	str	x1, [sp, #1088]
     870:	str	x0, [sp, #1096]
     874:	add	x0, sp, #0x410
     878:	ldp	x0, x1, [x0, #48]
     87c:	add	x2, sp, #0x410
     880:	stp	x0, x1, [x2, #112]
     884:	ldr	x0, [sp, #1152]
     888:	str	x0, [sp, #808]
     88c:	str	xzr, [sp, #800]
     890:	add	x0, sp, #0x410
     894:	ldp	x0, x1, [x0, #128]
     898:	mov	x2, x0
     89c:	add	x3, sp, #0x410
     8a0:	ldp	x4, x5, [x3, #-240]
     8a4:	mov	x3, x4
     8a8:	adds	x2, x3, x2
     8ac:	mov	x0, x1
     8b0:	mov	x1, x5
     8b4:	adc	x0, x1, x0
     8b8:	str	x2, [sp, #816]
     8bc:	str	x0, [sp, #824]
     8c0:	ldr	x0, [sp, #1104]
     8c4:	add	x1, sp, #0x410
     8c8:	ldp	x2, x3, [x1, #-224]
     8cc:	stp	x2, x3, [x0]
     8d0:	ldr	x0, [sp, #1160]
     8d4:	str	x0, [sp, #832]
     8d8:	str	xzr, [sp, #840]
     8dc:	ldr	x0, [sp, #1272]
     8e0:	lsr	x0, x0, #32
     8e4:	str	x0, [sp, #848]
     8e8:	str	xzr, [sp, #856]
     8ec:	add	x0, sp, #0x410
     8f0:	ldp	x4, x5, [x0, #-192]
     8f4:	mov	x0, x4
     8f8:	add	x1, sp, #0x410
     8fc:	ldp	x2, x3, [x1, #-208]
     900:	mov	x1, x2
     904:	adds	x1, x1, x0
     908:	mov	x0, x5
     90c:	mov	x2, x3
     910:	adc	x0, x2, x0
     914:	str	x1, [sp, #864]
     918:	str	x0, [sp, #872]
     91c:	ldr	x0, [sp, #1256]
     920:	str	x0, [sp, #880]
     924:	str	xzr, [sp, #888]
     928:	add	x0, sp, #0x410
     92c:	ldp	x4, x5, [x0, #-160]
     930:	mov	x0, x4
     934:	add	x1, sp, #0x410
     938:	ldp	x2, x3, [x1, #-176]
     93c:	mov	x1, x2
     940:	adds	x1, x1, x0
     944:	mov	x0, x5
     948:	mov	x2, x3
     94c:	adc	x0, x2, x0
     950:	str	x1, [sp, #896]
     954:	str	x0, [sp, #904]
     958:	ldr	x0, [sp, #1240]
     95c:	lsl	x0, x0, #32
     960:	ldr	x1, [sp, #1232]
     964:	lsr	x1, x1, #32
     968:	str	x1, [sp, #160]
     96c:	ldr	x1, [sp, #160]
     970:	orr	x0, x0, x1
     974:	str	x0, [sp, #160]
     978:	ldr	x0, [sp, #1240]
     97c:	lsr	x0, x0, #32
     980:	str	x0, [sp, #168]
     984:	ldp	x4, x5, [sp, #160]
     988:	mov	x0, x4
     98c:	add	x1, sp, #0x410
     990:	ldp	x2, x3, [x1, #-144]
     994:	mov	x1, x2
     998:	adds	x1, x1, x0
     99c:	mov	x0, x5
     9a0:	mov	x2, x3
     9a4:	adc	x0, x2, x0
     9a8:	str	x1, [sp, #912]
     9ac:	str	x0, [sp, #920]
     9b0:	add	x0, sp, #0x410
     9b4:	ldp	x0, x1, [x0, #176]
     9b8:	mov	x2, x0
     9bc:	add	x3, sp, #0x410
     9c0:	ldp	x4, x5, [x3, #-128]
     9c4:	mov	x3, x4
     9c8:	adds	x2, x3, x2
     9cc:	mov	x0, x1
     9d0:	mov	x1, x5
     9d4:	adc	x0, x1, x0
     9d8:	str	x2, [sp, #928]
     9dc:	str	x0, [sp, #936]
     9e0:	ldr	x0, [sp, #1200]
     9e4:	lsr	x0, x0, #32
     9e8:	ldr	x1, [sp, #1208]
     9ec:	lsl	x1, x1, #32
     9f0:	str	x1, [sp, #184]
     9f4:	ldr	x1, [sp, #184]
     9f8:	orr	x0, x0, x1
     9fc:	str	x0, [sp, #184]
     a00:	ldr	x0, [sp, #1200]
     a04:	lsl	x0, x0, #32
     a08:	str	x0, [sp, #176]
     a0c:	ldp	x4, x5, [sp, #176]
     a10:	mov	x0, x4
     a14:	add	x1, sp, #0x410
     a18:	ldp	x2, x3, [x1, #-112]
     a1c:	mov	x1, x2
     a20:	adds	x1, x1, x0
     a24:	mov	x0, x5
     a28:	mov	x2, x3
     a2c:	adc	x0, x2, x0
     a30:	str	x1, [sp, #944]
     a34:	str	x0, [sp, #952]
     a38:	ldr	x0, [sp, #1184]
     a3c:	str	x0, [sp, #968]
     a40:	str	xzr, [sp, #960]
     a44:	add	x0, sp, #0x410
     a48:	ldp	x4, x5, [x0, #-80]
     a4c:	mov	x0, x4
     a50:	add	x1, sp, #0x410
     a54:	ldp	x2, x3, [x1, #-96]
     a58:	mov	x1, x2
     a5c:	adds	x1, x1, x0
     a60:	mov	x0, x5
     a64:	mov	x2, x3
     a68:	adc	x0, x2, x0
     a6c:	str	x1, [sp, #976]
     a70:	str	x0, [sp, #984]
     a74:	ldr	x0, [sp, #1112]
     a78:	add	x1, sp, #0x410
     a7c:	ldp	x2, x3, [x1, #-64]
     a80:	stp	x2, x3, [x0]
     a84:	nop
     a88:	ldp	x19, x20, [sp, #16]
     a8c:	ldp	x21, x22, [sp, #32]
     a90:	ldp	x23, x24, [sp, #48]
     a94:	ldp	x25, x26, [sp, #64]
     a98:	ldr	x27, [sp, #80]
     a9c:	ldp	x29, x30, [sp]
     aa0:	add	sp, sp, #0x590
     aa4:	ret

0000000000000aa8 <toRep>:
     aa8:	sub	sp, sp, #0x20
     aac:	str	q0, [sp]
     ab0:	ldr	q0, [sp]
     ab4:	str	q0, [sp, #16]
     ab8:	ldp	x0, x1, [sp, #16]
     abc:	add	sp, sp, #0x20
     ac0:	ret

0000000000000ac4 <fromRep>:
     ac4:	sub	sp, sp, #0x20
     ac8:	stp	x0, x1, [sp]
     acc:	ldp	x0, x1, [sp]
     ad0:	stp	x0, x1, [sp, #16]
     ad4:	ldr	q0, [sp, #16]
     ad8:	add	sp, sp, #0x20
     adc:	ret

0000000000000ae0 <normalize>:
     ae0:	stp	x29, x30, [sp, #-80]!
     ae4:	mov	x29, sp
     ae8:	stp	x19, x20, [sp, #16]
     aec:	str	x21, [sp, #32]
     af0:	str	x0, [sp, #56]
     af4:	ldr	x0, [sp, #56]
     af8:	ldp	x0, x1, [x0]
     afc:	bl	0 <rep_clz>
     b00:	mov	w19, w0
     b04:	adrp	x0, 0 <rep_clz>
     b08:	add	x0, x0, #0x0
     b0c:	ldp	x0, x1, [x0]
     b10:	bl	0 <rep_clz>
     b14:	sub	w0, w19, w0
     b18:	str	w0, [sp, #76]
     b1c:	ldr	x0, [sp, #56]
     b20:	ldp	x0, x1, [x0]
     b24:	ldr	w2, [sp, #76]
     b28:	sub	w2, w2, #0x40
     b2c:	lsl	x3, x0, x2
     b30:	mov	x7, #0x0                   	// #0
     b34:	lsr	x5, x0, #1
     b38:	mov	w6, #0x3f                  	// #63
     b3c:	ldr	w4, [sp, #76]
     b40:	sub	w4, w6, w4
     b44:	lsr	x4, x5, x4
     b48:	ldr	w5, [sp, #76]
     b4c:	lsl	x21, x1, x5
     b50:	orr	x21, x4, x21
     b54:	ldr	w4, [sp, #76]
     b58:	lsl	x20, x0, x4
     b5c:	cmp	w2, #0x0
     b60:	csel	x21, x3, x21, ge  // ge = tcont
     b64:	cmp	w2, #0x0
     b68:	csel	x20, x7, x20, ge  // ge = tcont
     b6c:	ldr	x0, [sp, #56]
     b70:	stp	x20, x21, [x0]
     b74:	mov	w1, #0x1                   	// #1
     b78:	ldr	w0, [sp, #76]
     b7c:	sub	w0, w1, w0
     b80:	ldp	x19, x20, [sp, #16]
     b84:	ldr	x21, [sp, #32]
     b88:	ldp	x29, x30, [sp], #80
     b8c:	ret

0000000000000b90 <__divtf3>:
     b90:	sub	sp, sp, #0x720
     b94:	stp	x29, x30, [sp]
     b98:	mov	x29, sp
     b9c:	stp	x20, x21, [sp, #16]
     ba0:	stp	x22, x23, [sp, #32]
     ba4:	stp	x24, x25, [sp, #48]
     ba8:	stp	x26, x27, [sp, #64]
     bac:	add	x0, sp, #0x600
     bb0:	stur	q0, [x0, #-144]
     bb4:	add	x0, sp, #0x600
     bb8:	stur	q1, [x0, #-160]
     bbc:	add	x0, sp, #0x600
     bc0:	ldur	q0, [x0, #-144]
     bc4:	bl	aa8 <toRep>
     bc8:	lsr	x20, x1, #48
     bcc:	mov	x21, #0x0                   	// #0
     bd0:	mov	w0, w20
     bd4:	and	w0, w0, #0x7fff
     bd8:	str	w0, [sp, #1788]
     bdc:	add	x0, sp, #0x600
     be0:	ldur	q0, [x0, #-160]
     be4:	bl	aa8 <toRep>
     be8:	lsr	x24, x1, #48
     bec:	mov	x25, #0x0                   	// #0
     bf0:	mov	w0, w24
     bf4:	and	w0, w0, #0x7fff
     bf8:	str	w0, [sp, #1784]
     bfc:	add	x0, sp, #0x600
     c00:	ldur	q0, [x0, #-144]
     c04:	bl	aa8 <toRep>
     c08:	mov	x20, x0
     c0c:	mov	x21, x1
     c10:	add	x0, sp, #0x600
     c14:	ldur	q0, [x0, #-160]
     c18:	bl	aa8 <toRep>
     c1c:	eor	x22, x20, x0
     c20:	eor	x23, x21, x1
     c24:	mov	x0, #0x0                   	// #0
     c28:	and	x0, x22, x0
     c2c:	str	x0, [sp, #1760]
     c30:	and	x0, x23, #0x8000000000000000
     c34:	str	x0, [sp, #1768]
     c38:	add	x0, sp, #0x600
     c3c:	ldur	q0, [x0, #-144]
     c40:	bl	aa8 <toRep>
     c44:	mov	x2, #0xffffffffffffffff    	// #-1
     c48:	and	x26, x0, x2
     c4c:	and	x27, x1, #0xffffffffffff
     c50:	add	x0, sp, #0x600
     c54:	stp	x26, x27, [x0, #16]
     c58:	add	x0, sp, #0x600
     c5c:	ldur	q0, [x0, #-160]
     c60:	bl	aa8 <toRep>
     c64:	mov	x2, #0xffffffffffffffff    	// #-1
     c68:	and	x2, x0, x2
     c6c:	str	x2, [sp, #240]
     c70:	and	x0, x1, #0xffffffffffff
     c74:	str	x0, [sp, #248]
     c78:	ldp	x0, x1, [sp, #240]
     c7c:	add	x2, sp, #0x600
     c80:	stp	x0, x1, [x2]
     c84:	str	wzr, [sp, #1820]
     c88:	ldr	w0, [sp, #1788]
     c8c:	sub	w1, w0, #0x1
     c90:	mov	w0, #0x7ffd                	// #32765
     c94:	cmp	w1, w0
     c98:	b.hi	cb0 <__divtf3+0x120>  // b.pmore
     c9c:	ldr	w0, [sp, #1784]
     ca0:	sub	w1, w0, #0x1
     ca4:	mov	w0, #0x7ffd                	// #32765
     ca8:	cmp	w1, w0
     cac:	b.ls	f44 <__divtf3+0x3b4>  // b.plast
     cb0:	add	x0, sp, #0x600
     cb4:	ldur	q0, [x0, #-144]
     cb8:	bl	aa8 <toRep>
     cbc:	mov	x2, x0
     cc0:	mov	x3, x1
     cc4:	mov	x0, #0xffffffffffffffff    	// #-1
     cc8:	and	x0, x2, x0
     ccc:	str	x0, [sp, #1744]
     cd0:	and	x0, x3, #0x7fffffffffffffff
     cd4:	str	x0, [sp, #1752]
     cd8:	add	x0, sp, #0x600
     cdc:	ldur	q0, [x0, #-160]
     ce0:	bl	aa8 <toRep>
     ce4:	mov	x2, x0
     ce8:	mov	x3, x1
     cec:	mov	x0, #0xffffffffffffffff    	// #-1
     cf0:	and	x0, x2, x0
     cf4:	str	x0, [sp, #1728]
     cf8:	and	x0, x3, #0x7fffffffffffffff
     cfc:	str	x0, [sp, #1736]
     d00:	ldr	x1, [sp, #1752]
     d04:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
     d08:	cmp	x1, x0
     d0c:	b.hi	d2c <__divtf3+0x19c>  // b.pmore
     d10:	ldr	x1, [sp, #1752]
     d14:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
     d18:	cmp	x1, x0
     d1c:	b.ne	d58 <__divtf3+0x1c8>  // b.any
     d20:	ldr	x0, [sp, #1744]
     d24:	cmp	x0, #0x0
     d28:	b.eq	d58 <__divtf3+0x1c8>  // b.none
     d2c:	add	x0, sp, #0x600
     d30:	ldur	q0, [x0, #-144]
     d34:	bl	aa8 <toRep>
     d38:	mov	x2, #0x0                   	// #0
     d3c:	orr	x2, x0, x2
     d40:	str	x2, [sp, #256]
     d44:	orr	x0, x1, #0x800000000000
     d48:	str	x0, [sp, #264]
     d4c:	ldp	x0, x1, [sp, #256]
     d50:	bl	ac4 <fromRep>
     d54:	b	1bc4 <__divtf3+0x1034>
     d58:	ldr	x1, [sp, #1736]
     d5c:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
     d60:	cmp	x1, x0
     d64:	b.hi	d84 <__divtf3+0x1f4>  // b.pmore
     d68:	ldr	x1, [sp, #1736]
     d6c:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
     d70:	cmp	x1, x0
     d74:	b.ne	db0 <__divtf3+0x220>  // b.any
     d78:	ldr	x0, [sp, #1728]
     d7c:	cmp	x0, #0x0
     d80:	b.eq	db0 <__divtf3+0x220>  // b.none
     d84:	add	x0, sp, #0x600
     d88:	ldur	q0, [x0, #-160]
     d8c:	bl	aa8 <toRep>
     d90:	mov	x2, #0x0                   	// #0
     d94:	orr	x2, x0, x2
     d98:	str	x2, [sp, #272]
     d9c:	orr	x0, x1, #0x800000000000
     da0:	str	x0, [sp, #280]
     da4:	ldp	x0, x1, [sp, #272]
     da8:	bl	ac4 <fromRep>
     dac:	b	1bc4 <__divtf3+0x1034>
     db0:	ldr	x0, [sp, #1744]
     db4:	cmp	x0, #0x0
     db8:	b.ne	e28 <__divtf3+0x298>  // b.any
     dbc:	ldr	x1, [sp, #1752]
     dc0:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
     dc4:	cmp	x1, x0
     dc8:	b.ne	e28 <__divtf3+0x298>  // b.any
     dcc:	ldr	x0, [sp, #1728]
     dd0:	cmp	x0, #0x0
     dd4:	b.ne	dfc <__divtf3+0x26c>  // b.any
     dd8:	ldr	x1, [sp, #1736]
     ddc:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
     de0:	cmp	x1, x0
     de4:	b.ne	dfc <__divtf3+0x26c>  // b.any
     de8:	adrp	x0, 0 <rep_clz>
     dec:	add	x0, x0, #0x0
     df0:	ldp	x0, x1, [x0]
     df4:	bl	ac4 <fromRep>
     df8:	b	1bc4 <__divtf3+0x1034>
     dfc:	ldr	x1, [sp, #1744]
     e00:	ldr	x0, [sp, #1760]
     e04:	orr	x0, x1, x0
     e08:	str	x0, [sp, #288]
     e0c:	ldr	x1, [sp, #1752]
     e10:	ldr	x0, [sp, #1768]
     e14:	orr	x0, x1, x0
     e18:	str	x0, [sp, #296]
     e1c:	ldp	x0, x1, [sp, #288]
     e20:	bl	ac4 <fromRep>
     e24:	b	1bc4 <__divtf3+0x1034>
     e28:	ldr	x0, [sp, #1728]
     e2c:	cmp	x0, #0x0
     e30:	b.ne	e54 <__divtf3+0x2c4>  // b.any
     e34:	ldr	x1, [sp, #1736]
     e38:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
     e3c:	cmp	x1, x0
     e40:	b.ne	e54 <__divtf3+0x2c4>  // b.any
     e44:	add	x0, sp, #0x600
     e48:	ldp	x0, x1, [x0, #224]
     e4c:	bl	ac4 <fromRep>
     e50:	b	1bc4 <__divtf3+0x1034>
     e54:	ldr	x1, [sp, #1744]
     e58:	ldr	x0, [sp, #1752]
     e5c:	orr	x1, x1, x0
     e60:	cmp	x1, #0x0
     e64:	b.ne	ea0 <__divtf3+0x310>  // b.any
     e68:	ldr	x0, [sp, #1728]
     e6c:	ldr	x1, [sp, #1736]
     e70:	orr	x0, x0, x1
     e74:	cmp	x0, #0x0
     e78:	b.ne	e90 <__divtf3+0x300>  // b.any
     e7c:	adrp	x0, 0 <rep_clz>
     e80:	add	x0, x0, #0x0
     e84:	ldp	x0, x1, [x0]
     e88:	bl	ac4 <fromRep>
     e8c:	b	1bc4 <__divtf3+0x1034>
     e90:	add	x0, sp, #0x600
     e94:	ldp	x0, x1, [x0, #224]
     e98:	bl	ac4 <fromRep>
     e9c:	b	1bc4 <__divtf3+0x1034>
     ea0:	ldr	x1, [sp, #1728]
     ea4:	ldr	x0, [sp, #1736]
     ea8:	orr	x1, x1, x0
     eac:	cmp	x1, #0x0
     eb0:	b.ne	edc <__divtf3+0x34c>  // b.any
     eb4:	ldr	x0, [sp, #1760]
     eb8:	mov	x1, #0x0                   	// #0
     ebc:	orr	x0, x0, x1
     ec0:	str	x0, [sp, #304]
     ec4:	ldr	x0, [sp, #1768]
     ec8:	orr	x0, x0, #0x7fff000000000000
     ecc:	str	x0, [sp, #312]
     ed0:	ldp	x0, x1, [sp, #304]
     ed4:	bl	ac4 <fromRep>
     ed8:	b	1bc4 <__divtf3+0x1034>
     edc:	ldr	x1, [sp, #1752]
     ee0:	mov	x0, #0xffffffffffff        	// #281474976710655
     ee4:	cmp	x1, x0
     ee8:	b.hi	f10 <__divtf3+0x380>  // b.pmore
     eec:	ldr	x1, [sp, #1752]
     ef0:	mov	x0, #0xffffffffffff        	// #281474976710655
     ef4:	cmp	x1, x0
     ef8:	add	x0, sp, #0x610
     efc:	bl	ae0 <normalize>
     f00:	mov	w1, w0
     f04:	ldr	w0, [sp, #1820]
     f08:	add	w0, w0, w1
     f0c:	str	w0, [sp, #1820]
     f10:	ldr	x1, [sp, #1736]
     f14:	mov	x0, #0xffffffffffff        	// #281474976710655
     f18:	cmp	x1, x0
     f1c:	b.hi	f44 <__divtf3+0x3b4>  // b.pmore
     f20:	ldr	x1, [sp, #1736]
     f24:	mov	x0, #0xffffffffffff        	// #281474976710655
     f28:	cmp	x1, x0
     f2c:	add	x0, sp, #0x600
     f30:	bl	ae0 <normalize>
     f34:	mov	w1, w0
     f38:	ldr	w0, [sp, #1820]
     f3c:	sub	w0, w0, w1
     f40:	str	w0, [sp, #1820]
     f44:	add	x0, sp, #0x600
     f48:	ldp	x0, x1, [x0, #16]
     f4c:	mov	x2, #0x0                   	// #0
     f50:	orr	x2, x0, x2
     f54:	str	x2, [sp, #320]
     f58:	orr	x0, x1, #0x1000000000000
     f5c:	str	x0, [sp, #328]
     f60:	ldp	x0, x1, [sp, #320]
     f64:	add	x2, sp, #0x600
     f68:	stp	x0, x1, [x2, #16]
     f6c:	add	x0, sp, #0x600
     f70:	ldp	x0, x1, [x0]
     f74:	mov	x2, #0x0                   	// #0
     f78:	orr	x2, x0, x2
     f7c:	str	x2, [sp, #336]
     f80:	orr	x0, x1, #0x1000000000000
     f84:	str	x0, [sp, #344]
     f88:	ldp	x0, x1, [sp, #336]
     f8c:	add	x2, sp, #0x600
     f90:	stp	x0, x1, [x2]
     f94:	ldr	w1, [sp, #1788]
     f98:	ldr	w0, [sp, #1784]
     f9c:	sub	w1, w1, w0
     fa0:	ldr	w0, [sp, #1820]
     fa4:	add	w0, w1, w0
     fa8:	str	w0, [sp, #1816]
     fac:	add	x0, sp, #0x600
     fb0:	ldp	x0, x1, [x0]
     fb4:	lsl	x2, x1, #15
     fb8:	lsr	x3, x0, #49
     fbc:	str	x3, [sp, #80]
     fc0:	ldr	x3, [sp, #80]
     fc4:	orr	x2, x2, x3
     fc8:	str	x2, [sp, #80]
     fcc:	lsr	x0, x1, #49
     fd0:	str	x0, [sp, #88]
     fd4:	ldr	x0, [sp, #80]
     fd8:	str	x0, [sp, #1720]
     fdc:	mov	x1, #0x6484                	// #25732
     fe0:	movk	x1, #0xf9de, lsl #16
     fe4:	movk	x1, #0xf333, lsl #32
     fe8:	movk	x1, #0x7504, lsl #48
     fec:	ldr	x0, [sp, #1720]
     ff0:	sub	x0, x1, x0
     ff4:	str	x0, [sp, #1712]
     ff8:	ldr	x0, [sp, #1712]
     ffc:	str	x0, [sp, #352]
    1000:	str	xzr, [sp, #360]
    1004:	ldr	x0, [sp, #1720]
    1008:	str	x0, [sp, #368]
    100c:	str	xzr, [sp, #376]
    1010:	ldp	x4, x5, [sp, #352]
    1014:	mov	x0, x4
    1018:	ldp	x2, x3, [sp, #368]
    101c:	mov	x1, x2
    1020:	mul	x1, x0, x1
    1024:	mov	x0, x4
    1028:	mov	x6, x2
    102c:	umulh	x0, x0, x6
    1030:	mov	x6, x5
    1034:	mov	x7, x2
    1038:	madd	x0, x6, x7, x0
    103c:	mov	x2, x3
    1040:	madd	x0, x4, x2, x0
    1044:	str	x1, [sp, #384]
    1048:	str	x0, [sp, #392]
    104c:	ldr	x0, [sp, #392]
    1050:	str	x0, [sp, #400]
    1054:	str	xzr, [sp, #408]
    1058:	ldr	x0, [sp, #400]
    105c:	neg	x0, x0
    1060:	str	x0, [sp, #1704]
    1064:	ldr	x0, [sp, #1712]
    1068:	str	x0, [sp, #416]
    106c:	str	xzr, [sp, #424]
    1070:	ldr	x0, [sp, #1704]
    1074:	str	x0, [sp, #432]
    1078:	str	xzr, [sp, #440]
    107c:	ldp	x4, x5, [sp, #416]
    1080:	mov	x0, x4
    1084:	ldp	x2, x3, [sp, #432]
    1088:	mov	x1, x2
    108c:	mul	x1, x0, x1
    1090:	mov	x0, x4
    1094:	mov	x6, x2
    1098:	umulh	x0, x0, x6
    109c:	mov	x6, x5
    10a0:	mov	x7, x2
    10a4:	madd	x0, x6, x7, x0
    10a8:	mov	x2, x3
    10ac:	madd	x0, x4, x2, x0
    10b0:	str	x1, [sp, #448]
    10b4:	str	x0, [sp, #456]
    10b8:	ldp	x2, x3, [sp, #448]
    10bc:	mov	x0, x3
    10c0:	lsl	x0, x0, #1
    10c4:	mov	x1, x2
    10c8:	lsr	x1, x1, #63
    10cc:	str	x1, [sp, #96]
    10d0:	ldr	x1, [sp, #96]
    10d4:	orr	x0, x0, x1
    10d8:	str	x0, [sp, #96]
    10dc:	mov	x0, x3
    10e0:	lsr	x0, x0, #63
    10e4:	str	x0, [sp, #104]
    10e8:	ldr	x0, [sp, #96]
    10ec:	str	x0, [sp, #1712]
    10f0:	ldr	x0, [sp, #1712]
    10f4:	str	x0, [sp, #464]
    10f8:	str	xzr, [sp, #472]
    10fc:	ldr	x0, [sp, #1720]
    1100:	str	x0, [sp, #480]
    1104:	str	xzr, [sp, #488]
    1108:	ldp	x4, x5, [sp, #464]
    110c:	mov	x0, x4
    1110:	ldp	x2, x3, [sp, #480]
    1114:	mov	x1, x2
    1118:	mul	x1, x0, x1
    111c:	mov	x0, x4
    1120:	mov	x6, x2
    1124:	umulh	x0, x0, x6
    1128:	mov	x6, x5
    112c:	mov	x7, x2
    1130:	madd	x0, x6, x7, x0
    1134:	mov	x2, x3
    1138:	madd	x0, x4, x2, x0
    113c:	str	x1, [sp, #496]
    1140:	str	x0, [sp, #504]
    1144:	ldr	x0, [sp, #504]
    1148:	str	x0, [sp, #512]
    114c:	str	xzr, [sp, #520]
    1150:	ldr	x0, [sp, #512]
    1154:	neg	x0, x0
    1158:	str	x0, [sp, #1704]
    115c:	ldr	x0, [sp, #1712]
    1160:	str	x0, [sp, #528]
    1164:	str	xzr, [sp, #536]
    1168:	ldr	x0, [sp, #1704]
    116c:	str	x0, [sp, #544]
    1170:	str	xzr, [sp, #552]
    1174:	add	x0, sp, #0x200
    1178:	ldp	x4, x5, [x0, #16]
    117c:	mov	x0, x4
    1180:	add	x1, sp, #0x200
    1184:	ldp	x2, x3, [x1, #32]
    1188:	mov	x1, x2
    118c:	mul	x1, x0, x1
    1190:	mov	x0, x4
    1194:	mov	x6, x2
    1198:	umulh	x0, x0, x6
    119c:	mov	x6, x5
    11a0:	mov	x7, x2
    11a4:	madd	x0, x6, x7, x0
    11a8:	mov	x2, x3
    11ac:	madd	x0, x4, x2, x0
    11b0:	str	x1, [sp, #560]
    11b4:	str	x0, [sp, #568]
    11b8:	add	x0, sp, #0x200
    11bc:	ldp	x2, x3, [x0, #48]
    11c0:	mov	x0, x3
    11c4:	lsl	x0, x0, #1
    11c8:	mov	x1, x2
    11cc:	lsr	x1, x1, #63
    11d0:	str	x1, [sp, #112]
    11d4:	ldr	x1, [sp, #112]
    11d8:	orr	x0, x0, x1
    11dc:	str	x0, [sp, #112]
    11e0:	mov	x0, x3
    11e4:	lsr	x0, x0, #63
    11e8:	str	x0, [sp, #120]
    11ec:	ldr	x0, [sp, #112]
    11f0:	str	x0, [sp, #1712]
    11f4:	ldr	x0, [sp, #1712]
    11f8:	str	x0, [sp, #576]
    11fc:	str	xzr, [sp, #584]
    1200:	ldr	x0, [sp, #1720]
    1204:	str	x0, [sp, #592]
    1208:	str	xzr, [sp, #600]
    120c:	add	x0, sp, #0x200
    1210:	ldp	x4, x5, [x0, #64]
    1214:	mov	x0, x4
    1218:	add	x1, sp, #0x200
    121c:	ldp	x2, x3, [x1, #80]
    1220:	mov	x1, x2
    1224:	mul	x1, x0, x1
    1228:	mov	x0, x4
    122c:	mov	x6, x2
    1230:	umulh	x0, x0, x6
    1234:	mov	x6, x5
    1238:	mov	x7, x2
    123c:	madd	x0, x6, x7, x0
    1240:	mov	x2, x3
    1244:	madd	x0, x4, x2, x0
    1248:	str	x1, [sp, #608]
    124c:	str	x0, [sp, #616]
    1250:	ldr	x0, [sp, #616]
    1254:	str	x0, [sp, #624]
    1258:	str	xzr, [sp, #632]
    125c:	ldr	x0, [sp, #624]
    1260:	neg	x0, x0
    1264:	str	x0, [sp, #1704]
    1268:	ldr	x0, [sp, #1712]
    126c:	str	x0, [sp, #640]
    1270:	str	xzr, [sp, #648]
    1274:	ldr	x0, [sp, #1704]
    1278:	str	x0, [sp, #656]
    127c:	str	xzr, [sp, #664]
    1280:	add	x0, sp, #0x200
    1284:	ldp	x4, x5, [x0, #128]
    1288:	mov	x0, x4
    128c:	add	x1, sp, #0x200
    1290:	ldp	x2, x3, [x1, #144]
    1294:	mov	x1, x2
    1298:	mul	x1, x0, x1
    129c:	mov	x0, x4
    12a0:	mov	x6, x2
    12a4:	umulh	x0, x0, x6
    12a8:	mov	x6, x5
    12ac:	mov	x7, x2
    12b0:	madd	x0, x6, x7, x0
    12b4:	mov	x2, x3
    12b8:	madd	x0, x4, x2, x0
    12bc:	str	x1, [sp, #672]
    12c0:	str	x0, [sp, #680]
    12c4:	add	x0, sp, #0x200
    12c8:	ldp	x2, x3, [x0, #160]
    12cc:	mov	x0, x3
    12d0:	lsl	x0, x0, #1
    12d4:	mov	x1, x2
    12d8:	lsr	x1, x1, #63
    12dc:	str	x1, [sp, #128]
    12e0:	ldr	x1, [sp, #128]
    12e4:	orr	x0, x0, x1
    12e8:	str	x0, [sp, #128]
    12ec:	mov	x0, x3
    12f0:	lsr	x0, x0, #63
    12f4:	str	x0, [sp, #136]
    12f8:	ldr	x0, [sp, #128]
    12fc:	str	x0, [sp, #1712]
    1300:	ldr	x0, [sp, #1712]
    1304:	str	x0, [sp, #688]
    1308:	str	xzr, [sp, #696]
    130c:	ldr	x0, [sp, #1720]
    1310:	str	x0, [sp, #704]
    1314:	str	xzr, [sp, #712]
    1318:	add	x0, sp, #0x200
    131c:	ldp	x4, x5, [x0, #176]
    1320:	mov	x0, x4
    1324:	add	x1, sp, #0x200
    1328:	ldp	x2, x3, [x1, #192]
    132c:	mov	x1, x2
    1330:	mul	x1, x0, x1
    1334:	mov	x0, x4
    1338:	mov	x6, x2
    133c:	umulh	x0, x0, x6
    1340:	mov	x6, x5
    1344:	mov	x7, x2
    1348:	madd	x0, x6, x7, x0
    134c:	mov	x2, x3
    1350:	madd	x0, x4, x2, x0
    1354:	str	x1, [sp, #720]
    1358:	str	x0, [sp, #728]
    135c:	ldr	x0, [sp, #728]
    1360:	str	x0, [sp, #736]
    1364:	str	xzr, [sp, #744]
    1368:	ldr	x0, [sp, #736]
    136c:	neg	x0, x0
    1370:	str	x0, [sp, #1704]
    1374:	ldr	x0, [sp, #1712]
    1378:	str	x0, [sp, #752]
    137c:	str	xzr, [sp, #760]
    1380:	ldr	x0, [sp, #1704]
    1384:	str	x0, [sp, #768]
    1388:	str	xzr, [sp, #776]
    138c:	add	x0, sp, #0x200
    1390:	ldp	x4, x5, [x0, #240]
    1394:	mov	x0, x4
    1398:	add	x1, sp, #0x400
    139c:	ldp	x2, x3, [x1, #-256]
    13a0:	mov	x1, x2
    13a4:	mul	x1, x0, x1
    13a8:	mov	x0, x4
    13ac:	mov	x6, x2
    13b0:	umulh	x0, x0, x6
    13b4:	mov	x6, x5
    13b8:	mov	x7, x2
    13bc:	madd	x0, x6, x7, x0
    13c0:	mov	x2, x3
    13c4:	madd	x0, x4, x2, x0
    13c8:	str	x1, [sp, #784]
    13cc:	str	x0, [sp, #792]
    13d0:	add	x0, sp, #0x400
    13d4:	ldp	x2, x3, [x0, #-240]
    13d8:	mov	x0, x3
    13dc:	lsl	x0, x0, #1
    13e0:	mov	x1, x2
    13e4:	lsr	x1, x1, #63
    13e8:	str	x1, [sp, #144]
    13ec:	ldr	x1, [sp, #144]
    13f0:	orr	x0, x0, x1
    13f4:	str	x0, [sp, #144]
    13f8:	mov	x0, x3
    13fc:	lsr	x0, x0, #63
    1400:	str	x0, [sp, #152]
    1404:	ldr	x0, [sp, #144]
    1408:	str	x0, [sp, #1712]
    140c:	ldr	x0, [sp, #1712]
    1410:	str	x0, [sp, #800]
    1414:	str	xzr, [sp, #808]
    1418:	ldr	x0, [sp, #1720]
    141c:	str	x0, [sp, #816]
    1420:	str	xzr, [sp, #824]
    1424:	add	x0, sp, #0x400
    1428:	ldp	x4, x5, [x0, #-224]
    142c:	mov	x0, x4
    1430:	add	x1, sp, #0x400
    1434:	ldp	x2, x3, [x1, #-208]
    1438:	mov	x1, x2
    143c:	mul	x1, x0, x1
    1440:	mov	x0, x4
    1444:	mov	x6, x2
    1448:	umulh	x0, x0, x6
    144c:	mov	x6, x5
    1450:	mov	x7, x2
    1454:	madd	x0, x6, x7, x0
    1458:	mov	x2, x3
    145c:	madd	x0, x4, x2, x0
    1460:	str	x1, [sp, #832]
    1464:	str	x0, [sp, #840]
    1468:	ldr	x0, [sp, #840]
    146c:	str	x0, [sp, #848]
    1470:	str	xzr, [sp, #856]
    1474:	ldr	x0, [sp, #848]
    1478:	neg	x0, x0
    147c:	str	x0, [sp, #1704]
    1480:	ldr	x0, [sp, #1712]
    1484:	str	x0, [sp, #864]
    1488:	str	xzr, [sp, #872]
    148c:	ldr	x0, [sp, #1704]
    1490:	str	x0, [sp, #880]
    1494:	str	xzr, [sp, #888]
    1498:	add	x0, sp, #0x400
    149c:	ldp	x4, x5, [x0, #-160]
    14a0:	mov	x0, x4
    14a4:	add	x1, sp, #0x400
    14a8:	ldp	x2, x3, [x1, #-144]
    14ac:	mov	x1, x2
    14b0:	mul	x1, x0, x1
    14b4:	mov	x0, x4
    14b8:	mov	x6, x2
    14bc:	umulh	x0, x0, x6
    14c0:	mov	x6, x5
    14c4:	mov	x7, x2
    14c8:	madd	x0, x6, x7, x0
    14cc:	mov	x2, x3
    14d0:	madd	x0, x4, x2, x0
    14d4:	str	x1, [sp, #896]
    14d8:	str	x0, [sp, #904]
    14dc:	add	x0, sp, #0x400
    14e0:	ldp	x2, x3, [x0, #-128]
    14e4:	mov	x0, x3
    14e8:	lsl	x0, x0, #1
    14ec:	mov	x1, x2
    14f0:	lsr	x1, x1, #63
    14f4:	str	x1, [sp, #160]
    14f8:	ldr	x1, [sp, #160]
    14fc:	orr	x0, x0, x1
    1500:	str	x0, [sp, #160]
    1504:	mov	x0, x3
    1508:	lsr	x0, x0, #63
    150c:	str	x0, [sp, #168]
    1510:	ldr	x0, [sp, #160]
    1514:	str	x0, [sp, #1712]
    1518:	ldr	x0, [sp, #1712]
    151c:	sub	x0, x0, #0x1
    1520:	str	x0, [sp, #1712]
    1524:	add	x0, sp, #0x600
    1528:	ldp	x0, x1, [x0]
    152c:	lsl	x0, x0, #15
    1530:	str	x0, [sp, #1696]
    1534:	ldr	x0, [sp, #1712]
    1538:	str	x0, [sp, #912]
    153c:	str	xzr, [sp, #920]
    1540:	ldr	x0, [sp, #1720]
    1544:	str	x0, [sp, #928]
    1548:	str	xzr, [sp, #936]
    154c:	add	x1, sp, #0x5f0
    1550:	add	x0, sp, #0x5b0
    1554:	mov	x5, x1
    1558:	mov	x4, x0
    155c:	add	x0, sp, #0x400
    1560:	ldp	x2, x3, [x0, #-96]
    1564:	add	x0, sp, #0x400
    1568:	ldp	x0, x1, [x0, #-112]
    156c:	bl	58 <wideMultiply>
    1570:	ldr	x0, [sp, #1712]
    1574:	str	x0, [sp, #944]
    1578:	str	xzr, [sp, #952]
    157c:	ldr	x0, [sp, #1696]
    1580:	str	x0, [sp, #960]
    1584:	str	xzr, [sp, #968]
    1588:	add	x1, sp, #0x5e0
    158c:	add	x0, sp, #0x5b0
    1590:	mov	x5, x1
    1594:	mov	x4, x0
    1598:	add	x0, sp, #0x400
    159c:	ldp	x2, x3, [x0, #-64]
    15a0:	add	x0, sp, #0x400
    15a4:	ldp	x0, x1, [x0, #-80]
    15a8:	bl	58 <wideMultiply>
    15ac:	add	x0, sp, #0x600
    15b0:	ldp	x0, x1, [x0, #-32]
    15b4:	str	x1, [sp, #976]
    15b8:	str	xzr, [sp, #984]
    15bc:	add	x0, sp, #0x600
    15c0:	ldp	x0, x1, [x0, #-16]
    15c4:	mov	x2, x0
    15c8:	add	x3, sp, #0x400
    15cc:	ldp	x4, x5, [x3, #-48]
    15d0:	mov	x3, x4
    15d4:	adds	x2, x3, x2
    15d8:	mov	x0, x1
    15dc:	mov	x1, x5
    15e0:	adc	x0, x1, x0
    15e4:	str	x2, [sp, #992]
    15e8:	str	x0, [sp, #1000]
    15ec:	add	x0, sp, #0x400
    15f0:	ldp	x2, x3, [x0, #-32]
    15f4:	mov	x0, x2
    15f8:	negs	x1, x0
    15fc:	mov	x0, x3
    1600:	ngc	x0, x0
    1604:	str	x1, [sp, #1264]
    1608:	str	x0, [sp, #1272]
    160c:	add	x0, sp, #0x400
    1610:	ldp	x0, x1, [x0, #240]
    1614:	add	x2, sp, #0x600
    1618:	stp	x0, x1, [x2, #144]
    161c:	ldr	x0, [sp, #1688]
    1620:	str	x0, [sp, #1008]
    1624:	str	xzr, [sp, #1016]
    1628:	ldr	x0, [sp, #1008]
    162c:	str	x0, [sp, #1672]
    1630:	ldr	x0, [sp, #1680]
    1634:	str	x0, [sp, #1664]
    1638:	ldr	x0, [sp, #1712]
    163c:	str	x0, [sp, #1024]
    1640:	str	xzr, [sp, #1032]
    1644:	ldr	x0, [sp, #1672]
    1648:	str	x0, [sp, #1040]
    164c:	str	xzr, [sp, #1048]
    1650:	add	x1, sp, #0x5d0
    1654:	add	x0, sp, #0x5b0
    1658:	mov	x5, x1
    165c:	mov	x4, x0
    1660:	add	x0, sp, #0x400
    1664:	ldp	x2, x3, [x0, #16]
    1668:	add	x0, sp, #0x400
    166c:	ldp	x0, x1, [x0]
    1670:	bl	58 <wideMultiply>
    1674:	ldr	x0, [sp, #1712]
    1678:	str	x0, [sp, #1056]
    167c:	str	xzr, [sp, #1064]
    1680:	ldr	x0, [sp, #1664]
    1684:	str	x0, [sp, #1072]
    1688:	str	xzr, [sp, #1080]
    168c:	add	x1, sp, #0x5c0
    1690:	add	x0, sp, #0x5b0
    1694:	mov	x5, x1
    1698:	mov	x4, x0
    169c:	add	x0, sp, #0x400
    16a0:	ldp	x2, x3, [x0, #48]
    16a4:	add	x0, sp, #0x400
    16a8:	ldp	x0, x1, [x0, #32]
    16ac:	bl	58 <wideMultiply>
    16b0:	add	x0, sp, #0x600
    16b4:	ldp	x0, x1, [x0, #-64]
    16b8:	str	x1, [sp, #1088]
    16bc:	str	xzr, [sp, #1096]
    16c0:	add	x0, sp, #0x600
    16c4:	ldp	x0, x1, [x0, #-48]
    16c8:	mov	x2, x0
    16cc:	add	x3, sp, #0x400
    16d0:	ldp	x4, x5, [x3, #64]
    16d4:	mov	x3, x4
    16d8:	adds	x2, x3, x2
    16dc:	mov	x0, x1
    16e0:	mov	x1, x5
    16e4:	adc	x0, x1, x0
    16e8:	str	x2, [sp, #1280]
    16ec:	str	x0, [sp, #1288]
    16f0:	add	x0, sp, #0x600
    16f4:	ldp	x0, x1, [x0, #-256]
    16f8:	add	x2, sp, #0x600
    16fc:	stp	x0, x1, [x2, #112]
    1700:	add	x0, sp, #0x600
    1704:	ldp	x0, x1, [x0, #112]
    1708:	mov	x2, #0xfffffffffffffffe    	// #-2
    170c:	adds	x3, x0, x2
    1710:	mov	x2, #0xffffffffffffffff    	// #-1
    1714:	adc	x0, x1, x2
    1718:	str	x3, [sp, #1296]
    171c:	str	x0, [sp, #1304]
    1720:	add	x0, sp, #0x600
    1724:	ldp	x0, x1, [x0, #-240]
    1728:	add	x2, sp, #0x600
    172c:	stp	x0, x1, [x2, #112]
    1730:	add	x0, sp, #0x600
    1734:	ldp	x0, x1, [x0, #16]
    1738:	lsr	x2, x0, #62
    173c:	lsl	x3, x1, #2
    1740:	str	x3, [sp, #184]
    1744:	ldr	x3, [sp, #184]
    1748:	orr	x2, x2, x3
    174c:	str	x2, [sp, #184]
    1750:	lsl	x0, x0, #2
    1754:	str	x0, [sp, #176]
    1758:	add	x1, sp, #0x590
    175c:	add	x0, sp, #0x5a0
    1760:	mov	x5, x1
    1764:	mov	x4, x0
    1768:	add	x0, sp, #0x600
    176c:	ldp	x2, x3, [x0, #112]
    1770:	ldp	x0, x1, [sp, #176]
    1774:	bl	58 <wideMultiply>
    1778:	add	x0, sp, #0x600
    177c:	ldp	x2, x3, [x0, #-96]
    1780:	mov	x0, #0x1ffffffffffff       	// #562949953421311
    1784:	cmp	x3, x0
    1788:	b.hi	181c <__divtf3+0xc8c>  // b.pmore
    178c:	mov	x0, #0x1ffffffffffff       	// #562949953421311
    1790:	cmp	x3, x0
    1794:	add	x0, sp, #0x600
    1798:	ldp	x6, x7, [x0, #-96]
    179c:	add	x0, sp, #0x600
    17a0:	ldp	x2, x3, [x0]
    17a4:	add	x1, sp, #0x580
    17a8:	add	x0, sp, #0x5b0
    17ac:	mov	x5, x1
    17b0:	mov	x4, x0
    17b4:	mov	x0, x6
    17b8:	mov	x1, x7
    17bc:	bl	58 <wideMultiply>
    17c0:	add	x0, sp, #0x600
    17c4:	ldp	x0, x1, [x0, #16]
    17c8:	lsl	x0, x0, #49
    17cc:	str	x0, [sp, #1112]
    17d0:	str	xzr, [sp, #1104]
    17d4:	add	x0, sp, #0x600
    17d8:	ldp	x0, x1, [x0, #-128]
    17dc:	add	x2, sp, #0x400
    17e0:	ldp	x4, x5, [x2, #80]
    17e4:	mov	x2, x4
    17e8:	subs	x2, x2, x0
    17ec:	mov	x3, x5
    17f0:	sbc	x0, x3, x1
    17f4:	str	x2, [sp, #1312]
    17f8:	str	x0, [sp, #1320]
    17fc:	add	x0, sp, #0x600
    1800:	ldp	x0, x1, [x0, #-224]
    1804:	add	x2, sp, #0x800
    1808:	stp	x0, x1, [x2, #-256]
    180c:	ldr	w0, [sp, #1816]
    1810:	sub	w0, w0, #0x1
    1814:	str	w0, [sp, #1816]
    1818:	b	18c8 <__divtf3+0xd38>
    181c:	add	x0, sp, #0x600
    1820:	ldp	x0, x1, [x0, #-96]
    1824:	lsl	x2, x1, #63
    1828:	lsr	x3, x0, #1
    182c:	str	x3, [sp, #192]
    1830:	ldr	x3, [sp, #192]
    1834:	orr	x2, x2, x3
    1838:	str	x2, [sp, #192]
    183c:	lsr	x0, x1, #1
    1840:	str	x0, [sp, #200]
    1844:	ldp	x0, x1, [sp, #192]
    1848:	add	x2, sp, #0x600
    184c:	stp	x0, x1, [x2, #-96]
    1850:	add	x0, sp, #0x600
    1854:	ldp	x6, x7, [x0, #-96]
    1858:	add	x0, sp, #0x600
    185c:	ldp	x2, x3, [x0]
    1860:	add	x1, sp, #0x580
    1864:	add	x0, sp, #0x5b0
    1868:	mov	x5, x1
    186c:	mov	x4, x0
    1870:	mov	x0, x6
    1874:	mov	x1, x7
    1878:	bl	58 <wideMultiply>
    187c:	add	x0, sp, #0x600
    1880:	ldp	x0, x1, [x0, #16]
    1884:	lsl	x0, x0, #48
    1888:	str	x0, [sp, #1128]
    188c:	str	xzr, [sp, #1120]
    1890:	add	x0, sp, #0x600
    1894:	ldp	x0, x1, [x0, #-128]
    1898:	add	x2, sp, #0x400
    189c:	ldp	x4, x5, [x2, #96]
    18a0:	mov	x2, x4
    18a4:	subs	x2, x2, x0
    18a8:	mov	x3, x5
    18ac:	sbc	x0, x3, x1
    18b0:	str	x2, [sp, #1328]
    18b4:	str	x0, [sp, #1336]
    18b8:	add	x0, sp, #0x600
    18bc:	ldp	x0, x1, [x0, #-208]
    18c0:	add	x2, sp, #0x800
    18c4:	stp	x0, x1, [x2, #-256]
    18c8:	ldr	w1, [sp, #1816]
    18cc:	mov	w0, #0x3fff                	// #16383
    18d0:	add	w0, w1, w0
    18d4:	str	w0, [sp, #1644]
    18d8:	ldr	w1, [sp, #1644]
    18dc:	mov	w0, #0x7ffe                	// #32766
    18e0:	cmp	w1, w0
    18e4:	b.le	1914 <__divtf3+0xd84>
    18e8:	ldr	x0, [sp, #1760]
    18ec:	mov	x1, #0x0                   	// #0
    18f0:	orr	x0, x0, x1
    18f4:	str	x0, [sp, #1136]
    18f8:	ldr	x0, [sp, #1768]
    18fc:	orr	x0, x0, #0x7fff000000000000
    1900:	str	x0, [sp, #1144]
    1904:	add	x0, sp, #0x400
    1908:	ldp	x0, x1, [x0, #112]
    190c:	bl	ac4 <fromRep>
    1910:	b	1bc4 <__divtf3+0x1034>
    1914:	ldr	w0, [sp, #1644]
    1918:	cmp	w0, #0x0
    191c:	b.gt	1a70 <__divtf3+0xee0>
    1920:	ldr	w0, [sp, #1644]
    1924:	cmp	w0, #0x0
    1928:	b.ne	1a60 <__divtf3+0xed0>  // b.any
    192c:	ldr	x0, [sp, #1792]
    1930:	lsr	x0, x0, #63
    1934:	ldr	x1, [sp, #1800]
    1938:	lsl	x1, x1, #1
    193c:	str	x1, [sp, #216]
    1940:	ldr	x1, [sp, #216]
    1944:	orr	x0, x0, x1
    1948:	str	x0, [sp, #216]
    194c:	ldr	x0, [sp, #1792]
    1950:	lsl	x0, x0, #1
    1954:	str	x0, [sp, #208]
    1958:	add	x0, sp, #0x600
    195c:	ldp	x0, x1, [x0]
    1960:	mov	w2, #0x1                   	// #1
    1964:	ldp	x4, x5, [sp, #208]
    1968:	mov	x3, x5
    196c:	cmp	x3, x1
    1970:	b.hi	1990 <__divtf3+0xe00>  // b.pmore
    1974:	mov	x3, x5
    1978:	cmp	x3, x1
    197c:	b.ne	198c <__divtf3+0xdfc>  // b.any
    1980:	mov	x3, x4
    1984:	cmp	x3, x0
    1988:	b.hi	1990 <__divtf3+0xe00>  // b.pmore
    198c:	mov	w2, #0x0                   	// #0
    1990:	strb	w2, [sp, #1599]
    1994:	add	x0, sp, #0x600
    1998:	ldp	x0, x1, [x0, #-96]
    199c:	mov	x2, #0xffffffffffffffff    	// #-1
    19a0:	and	x2, x0, x2
    19a4:	str	x2, [sp, #1568]
    19a8:	and	x0, x1, #0xffffffffffff
    19ac:	str	x0, [sp, #1576]
    19b0:	ldrb	w0, [sp, #1599]
    19b4:	and	x0, x0, #0xff
    19b8:	str	x0, [sp, #1152]
    19bc:	str	xzr, [sp, #1160]
    19c0:	add	x0, sp, #0x600
    19c4:	ldp	x0, x1, [x0, #32]
    19c8:	add	x2, sp, #0x400
    19cc:	ldp	x4, x5, [x2, #128]
    19d0:	mov	x2, x4
    19d4:	adds	x2, x0, x2
    19d8:	mov	x3, x5
    19dc:	adc	x0, x1, x3
    19e0:	str	x2, [sp, #1344]
    19e4:	str	x0, [sp, #1352]
    19e8:	add	x0, sp, #0x600
    19ec:	ldp	x0, x1, [x0, #-192]
    19f0:	add	x2, sp, #0x600
    19f4:	stp	x0, x1, [x2, #32]
    19f8:	ldr	x0, [sp, #1568]
    19fc:	mov	x1, #0x0                   	// #0
    1a00:	and	x0, x0, x1
    1a04:	str	x0, [sp, #1168]
    1a08:	ldr	x0, [sp, #1576]
    1a0c:	and	x0, x0, #0xffff000000000000
    1a10:	str	x0, [sp, #1176]
    1a14:	add	x0, sp, #0x400
    1a18:	ldp	x2, x3, [x0, #144]
    1a1c:	mov	x0, x2
    1a20:	mov	x1, x3
    1a24:	orr	x0, x0, x1
    1a28:	cmp	x0, #0x0
    1a2c:	b.eq	1a60 <__divtf3+0xed0>  // b.none
    1a30:	ldr	x1, [sp, #1568]
    1a34:	ldr	x0, [sp, #1760]
    1a38:	orr	x0, x1, x0
    1a3c:	str	x0, [sp, #1184]
    1a40:	ldr	x1, [sp, #1576]
    1a44:	ldr	x0, [sp, #1768]
    1a48:	orr	x0, x1, x0
    1a4c:	str	x0, [sp, #1192]
    1a50:	add	x0, sp, #0x400
    1a54:	ldp	x0, x1, [x0, #160]
    1a58:	bl	ac4 <fromRep>
    1a5c:	b	1bc4 <__divtf3+0x1034>
    1a60:	add	x0, sp, #0x600
    1a64:	ldp	x0, x1, [x0, #224]
    1a68:	bl	ac4 <fromRep>
    1a6c:	b	1bc4 <__divtf3+0x1034>
    1a70:	ldr	x0, [sp, #1792]
    1a74:	lsr	x0, x0, #63
    1a78:	ldr	x1, [sp, #1800]
    1a7c:	lsl	x1, x1, #1
    1a80:	str	x1, [sp, #232]
    1a84:	ldr	x1, [sp, #232]
    1a88:	orr	x0, x0, x1
    1a8c:	str	x0, [sp, #232]
    1a90:	ldr	x0, [sp, #1792]
    1a94:	lsl	x0, x0, #1
    1a98:	str	x0, [sp, #224]
    1a9c:	add	x0, sp, #0x600
    1aa0:	ldp	x0, x1, [x0]
    1aa4:	mov	w2, #0x1                   	// #1
    1aa8:	ldp	x4, x5, [sp, #224]
    1aac:	mov	x3, x5
    1ab0:	cmp	x1, x3
    1ab4:	b.hi	1ad0 <__divtf3+0xf40>  // b.pmore
    1ab8:	mov	x3, x5
    1abc:	cmp	x1, x3
    1ac0:	b.ne	1ad4 <__divtf3+0xf44>  // b.any
    1ac4:	mov	x3, x4
    1ac8:	cmp	x0, x3
    1acc:	b.ls	1ad4 <__divtf3+0xf44>  // b.plast
    1ad0:	mov	w2, #0x0                   	// #0
    1ad4:	strb	w2, [sp, #1643]
    1ad8:	add	x0, sp, #0x600
    1adc:	ldp	x0, x1, [x0, #-96]
    1ae0:	mov	x2, #0xffffffffffffffff    	// #-1
    1ae4:	and	x2, x0, x2
    1ae8:	str	x2, [sp, #1616]
    1aec:	and	x0, x1, #0xffffffffffff
    1af0:	str	x0, [sp, #1624]
    1af4:	ldr	w0, [sp, #1644]
    1af8:	sxtw	x0, w0
    1afc:	str	x0, [sp, #1200]
    1b00:	asr	x0, x0, #63
    1b04:	str	x0, [sp, #1208]
    1b08:	ldr	x0, [sp, #1200]
    1b0c:	lsl	x0, x0, #48
    1b10:	str	x0, [sp, #1224]
    1b14:	str	xzr, [sp, #1216]
    1b18:	ldr	x0, [sp, #1616]
    1b1c:	add	x1, sp, #0x400
    1b20:	ldp	x2, x3, [x1, #192]
    1b24:	mov	x1, x2
    1b28:	orr	x0, x0, x1
    1b2c:	str	x0, [sp, #1616]
    1b30:	ldr	x0, [sp, #1624]
    1b34:	mov	x1, x3
    1b38:	orr	x0, x0, x1
    1b3c:	str	x0, [sp, #1624]
    1b40:	ldrb	w0, [sp, #1643]
    1b44:	and	x0, x0, #0xff
    1b48:	str	x0, [sp, #1232]
    1b4c:	str	xzr, [sp, #1240]
    1b50:	add	x0, sp, #0x600
    1b54:	ldp	x0, x1, [x0, #80]
    1b58:	add	x2, sp, #0x400
    1b5c:	ldp	x4, x5, [x2, #208]
    1b60:	mov	x2, x4
    1b64:	adds	x2, x0, x2
    1b68:	mov	x3, x5
    1b6c:	adc	x0, x1, x3
    1b70:	str	x2, [sp, #1360]
    1b74:	str	x0, [sp, #1368]
    1b78:	add	x0, sp, #0x600
    1b7c:	ldp	x0, x1, [x0, #-176]
    1b80:	add	x2, sp, #0x600
    1b84:	stp	x0, x1, [x2, #80]
    1b88:	ldr	x1, [sp, #1616]
    1b8c:	ldr	x0, [sp, #1760]
    1b90:	orr	x0, x1, x0
    1b94:	str	x0, [sp, #1248]
    1b98:	ldr	x1, [sp, #1624]
    1b9c:	ldr	x0, [sp, #1768]
    1ba0:	orr	x0, x1, x0
    1ba4:	str	x0, [sp, #1256]
    1ba8:	add	x0, sp, #0x400
    1bac:	ldp	x0, x1, [x0, #224]
    1bb0:	bl	ac4 <fromRep>
    1bb4:	add	x0, sp, #0x600
    1bb8:	str	q0, [x0, #64]
    1bbc:	add	x0, sp, #0x600
    1bc0:	ldr	q0, [x0, #64]
    1bc4:	ldp	x20, x21, [sp, #16]
    1bc8:	ldp	x22, x23, [sp, #32]
    1bcc:	ldp	x24, x25, [sp, #48]
    1bd0:	ldp	x26, x27, [sp, #64]
    1bd4:	ldp	x29, x30, [sp]
    1bd8:	add	sp, sp, #0x720
    1bdc:	ret

extendsfdf2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srcToRep>:
   0:	sub	sp, sp, #0x20
   4:	str	s0, [sp, #12]
   8:	ldr	s0, [sp, #12]
   c:	str	s0, [sp, #24]
  10:	ldr	w0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <dstFromRep>:
  1c:	sub	sp, sp, #0x20
  20:	str	x0, [sp, #8]
  24:	ldr	x0, [sp, #8]
  28:	str	x0, [sp, #24]
  2c:	ldr	d0, [sp, #24]
  30:	add	sp, sp, #0x20
  34:	ret

0000000000000038 <__extendXfYf2__>:
  38:	stp	x29, x30, [sp, #-144]!
  3c:	mov	x29, sp
  40:	str	s0, [sp, #28]
  44:	mov	w0, #0x20                  	// #32
  48:	str	w0, [sp, #132]
  4c:	mov	w0, #0x17                  	// #23
  50:	ldr	w1, [sp, #132]
  54:	sub	w0, w1, w0
  58:	sub	w0, w0, #0x1
  5c:	str	w0, [sp, #128]
  60:	ldr	w0, [sp, #128]
  64:	mov	w1, #0x1                   	// #1
  68:	lsl	w0, w1, w0
  6c:	sub	w0, w0, #0x1
  70:	str	w0, [sp, #124]
  74:	ldr	w0, [sp, #124]
  78:	asr	w0, w0, #1
  7c:	str	w0, [sp, #120]
  80:	mov	w0, #0x17                  	// #23
  84:	mov	w1, #0x1                   	// #1
  88:	lsl	w0, w1, w0
  8c:	str	w0, [sp, #116]
  90:	ldr	w1, [sp, #124]
  94:	mov	w0, #0x17                  	// #23
  98:	lsl	w0, w1, w0
  9c:	str	w0, [sp, #112]
  a0:	mov	w1, #0x17                  	// #23
  a4:	ldr	w0, [sp, #128]
  a8:	add	w0, w1, w0
  ac:	mov	w1, #0x1                   	// #1
  b0:	lsl	w0, w1, w0
  b4:	str	w0, [sp, #108]
  b8:	ldr	w0, [sp, #108]
  bc:	sub	w0, w0, #0x1
  c0:	str	w0, [sp, #104]
  c4:	mov	w0, #0x17                  	// #23
  c8:	sub	w0, w0, #0x1
  cc:	mov	w1, #0x1                   	// #1
  d0:	lsl	w0, w1, w0
  d4:	str	w0, [sp, #100]
  d8:	ldr	w0, [sp, #100]
  dc:	sub	w0, w0, #0x1
  e0:	str	w0, [sp, #96]
  e4:	mov	w0, #0x40                  	// #64
  e8:	str	w0, [sp, #92]
  ec:	mov	w0, #0x34                  	// #52
  f0:	ldr	w1, [sp, #92]
  f4:	sub	w0, w1, w0
  f8:	sub	w0, w0, #0x1
  fc:	str	w0, [sp, #88]
 100:	ldr	w0, [sp, #88]
 104:	mov	w1, #0x1                   	// #1
 108:	lsl	w0, w1, w0
 10c:	sub	w0, w0, #0x1
 110:	str	w0, [sp, #84]
 114:	ldr	w0, [sp, #84]
 118:	asr	w0, w0, #1
 11c:	str	w0, [sp, #80]
 120:	mov	w0, #0x34                  	// #52
 124:	mov	x1, #0x1                   	// #1
 128:	lsl	x0, x1, x0
 12c:	str	x0, [sp, #72]
 130:	ldr	s0, [sp, #28]
 134:	bl	0 <srcToRep>
 138:	str	w0, [sp, #68]
 13c:	ldr	w1, [sp, #68]
 140:	ldr	w0, [sp, #104]
 144:	and	w0, w1, w0
 148:	str	w0, [sp, #64]
 14c:	ldr	w1, [sp, #68]
 150:	ldr	w0, [sp, #108]
 154:	and	w0, w1, w0
 158:	str	w0, [sp, #60]
 15c:	ldr	w1, [sp, #64]
 160:	ldr	w0, [sp, #116]
 164:	sub	w1, w1, w0
 168:	ldr	w2, [sp, #112]
 16c:	ldr	w0, [sp, #116]
 170:	sub	w0, w2, w0
 174:	cmp	w1, w0
 178:	b.cs	1bc <__extendXfYf2__+0x184>  // b.hs, b.nlast
 17c:	ldr	w1, [sp, #64]
 180:	mov	w2, #0x34                  	// #52
 184:	mov	w0, #0x17                  	// #23
 188:	sub	w0, w2, w0
 18c:	lsl	x0, x1, x0
 190:	str	x0, [sp, #136]
 194:	ldr	w1, [sp, #80]
 198:	ldr	w0, [sp, #120]
 19c:	sub	w0, w1, w0
 1a0:	sxtw	x1, w0
 1a4:	mov	w0, #0x34                  	// #52
 1a8:	lsl	x0, x1, x0
 1ac:	ldr	x1, [sp, #136]
 1b0:	add	x0, x1, x0
 1b4:	str	x0, [sp, #136]
 1b8:	b	2c8 <__extendXfYf2__+0x290>
 1bc:	ldr	w1, [sp, #64]
 1c0:	ldr	w0, [sp, #112]
 1c4:	cmp	w1, w0
 1c8:	b.cc	238 <__extendXfYf2__+0x200>  // b.lo, b.ul, b.last
 1cc:	ldrsw	x1, [sp, #84]
 1d0:	mov	w0, #0x34                  	// #52
 1d4:	lsl	x0, x1, x0
 1d8:	str	x0, [sp, #136]
 1dc:	ldr	w1, [sp, #64]
 1e0:	ldr	w0, [sp, #100]
 1e4:	and	w0, w1, w0
 1e8:	mov	w1, w0
 1ec:	mov	w2, #0x34                  	// #52
 1f0:	mov	w0, #0x17                  	// #23
 1f4:	sub	w0, w2, w0
 1f8:	lsl	x0, x1, x0
 1fc:	ldr	x1, [sp, #136]
 200:	orr	x0, x1, x0
 204:	str	x0, [sp, #136]
 208:	ldr	w1, [sp, #64]
 20c:	ldr	w0, [sp, #96]
 210:	and	w0, w1, w0
 214:	mov	w1, w0
 218:	mov	w2, #0x34                  	// #52
 21c:	mov	w0, #0x17                  	// #23
 220:	sub	w0, w2, w0
 224:	lsl	x0, x1, x0
 228:	ldr	x1, [sp, #136]
 22c:	orr	x0, x1, x0
 230:	str	x0, [sp, #136]
 234:	b	2c8 <__extendXfYf2__+0x290>
 238:	ldr	w0, [sp, #64]
 23c:	cmp	w0, #0x0
 240:	b.eq	2c4 <__extendXfYf2__+0x28c>  // b.none
 244:	ldr	w0, [sp, #64]
 248:	clz	w1, w0
 24c:	ldr	w0, [sp, #116]
 250:	clz	w0, w0
 254:	sub	w0, w1, w0
 258:	str	w0, [sp, #56]
 25c:	ldr	w1, [sp, #64]
 260:	mov	w2, #0x34                  	// #52
 264:	mov	w0, #0x17                  	// #23
 268:	sub	w2, w2, w0
 26c:	ldr	w0, [sp, #56]
 270:	add	w0, w2, w0
 274:	lsl	x0, x1, x0
 278:	str	x0, [sp, #136]
 27c:	ldr	x1, [sp, #136]
 280:	ldr	x0, [sp, #72]
 284:	eor	x0, x1, x0
 288:	str	x0, [sp, #136]
 28c:	ldr	w1, [sp, #80]
 290:	ldr	w0, [sp, #120]
 294:	sub	w1, w1, w0
 298:	ldr	w0, [sp, #56]
 29c:	sub	w0, w1, w0
 2a0:	add	w0, w0, #0x1
 2a4:	str	w0, [sp, #52]
 2a8:	ldrsw	x1, [sp, #52]
 2ac:	mov	w0, #0x34                  	// #52
 2b0:	lsl	x0, x1, x0
 2b4:	ldr	x1, [sp, #136]
 2b8:	orr	x0, x1, x0
 2bc:	str	x0, [sp, #136]
 2c0:	b	2c8 <__extendXfYf2__+0x290>
 2c4:	str	xzr, [sp, #136]
 2c8:	ldr	w1, [sp, #60]
 2cc:	ldr	w2, [sp, #92]
 2d0:	ldr	w0, [sp, #132]
 2d4:	sub	w0, w2, w0
 2d8:	lsl	x0, x1, x0
 2dc:	ldr	x1, [sp, #136]
 2e0:	orr	x0, x1, x0
 2e4:	str	x0, [sp, #40]
 2e8:	ldr	x0, [sp, #40]
 2ec:	bl	1c <dstFromRep>
 2f0:	ldp	x29, x30, [sp], #144
 2f4:	ret

00000000000002f8 <__extendsfdf2>:
 2f8:	stp	x29, x30, [sp, #-32]!
 2fc:	mov	x29, sp
 300:	str	s0, [sp, #28]
 304:	ldr	s0, [sp, #28]
 308:	bl	38 <__extendXfYf2__>
 30c:	ldp	x29, x30, [sp], #32
 310:	ret

extendhfsf2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srcToRep>:
   0:	sub	sp, sp, #0x20
   4:	strh	w0, [sp, #14]
   8:	ldrh	w0, [sp, #14]
   c:	strh	w0, [sp, #24]
  10:	ldrh	w0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <dstFromRep>:
  1c:	sub	sp, sp, #0x20
  20:	str	w0, [sp, #12]
  24:	ldr	w0, [sp, #12]
  28:	str	w0, [sp, #24]
  2c:	ldr	s0, [sp, #24]
  30:	add	sp, sp, #0x20
  34:	ret

0000000000000038 <__extendXfYf2__>:
  38:	stp	x29, x30, [sp, #-112]!
  3c:	mov	x29, sp
  40:	strh	w0, [sp, #30]
  44:	mov	w0, #0x10                  	// #16
  48:	str	w0, [sp, #104]
  4c:	mov	w0, #0xa                   	// #10
  50:	ldr	w1, [sp, #104]
  54:	sub	w0, w1, w0
  58:	sub	w0, w0, #0x1
  5c:	str	w0, [sp, #100]
  60:	ldr	w0, [sp, #100]
  64:	mov	w1, #0x1                   	// #1
  68:	lsl	w0, w1, w0
  6c:	sub	w0, w0, #0x1
  70:	str	w0, [sp, #96]
  74:	ldr	w0, [sp, #96]
  78:	asr	w0, w0, #1
  7c:	str	w0, [sp, #92]
  80:	mov	w0, #0xa                   	// #10
  84:	mov	w1, #0x1                   	// #1
  88:	lsl	w0, w1, w0
  8c:	strh	w0, [sp, #90]
  90:	ldr	w0, [sp, #96]
  94:	and	w0, w0, #0xffff
  98:	mov	w1, w0
  9c:	mov	w0, #0xa                   	// #10
  a0:	lsl	w0, w1, w0
  a4:	strh	w0, [sp, #88]
  a8:	mov	w1, #0xa                   	// #10
  ac:	ldr	w0, [sp, #100]
  b0:	add	w0, w1, w0
  b4:	mov	w1, #0x1                   	// #1
  b8:	lsl	w0, w1, w0
  bc:	strh	w0, [sp, #86]
  c0:	ldrh	w0, [sp, #86]
  c4:	sub	w0, w0, #0x1
  c8:	strh	w0, [sp, #84]
  cc:	mov	w0, #0xa                   	// #10
  d0:	sub	w0, w0, #0x1
  d4:	mov	w1, #0x1                   	// #1
  d8:	lsl	w0, w1, w0
  dc:	strh	w0, [sp, #82]
  e0:	ldrh	w0, [sp, #82]
  e4:	sub	w0, w0, #0x1
  e8:	strh	w0, [sp, #80]
  ec:	mov	w0, #0x20                  	// #32
  f0:	str	w0, [sp, #76]
  f4:	mov	w0, #0x17                  	// #23
  f8:	ldr	w1, [sp, #76]
  fc:	sub	w0, w1, w0
 100:	sub	w0, w0, #0x1
 104:	str	w0, [sp, #72]
 108:	ldr	w0, [sp, #72]
 10c:	mov	w1, #0x1                   	// #1
 110:	lsl	w0, w1, w0
 114:	sub	w0, w0, #0x1
 118:	str	w0, [sp, #68]
 11c:	ldr	w0, [sp, #68]
 120:	asr	w0, w0, #1
 124:	str	w0, [sp, #64]
 128:	mov	w0, #0x17                  	// #23
 12c:	mov	w1, #0x1                   	// #1
 130:	lsl	w0, w1, w0
 134:	str	w0, [sp, #60]
 138:	ldrh	w0, [sp, #30]
 13c:	bl	0 <srcToRep>
 140:	strh	w0, [sp, #58]
 144:	ldrh	w1, [sp, #58]
 148:	ldrh	w0, [sp, #84]
 14c:	and	w0, w1, w0
 150:	strh	w0, [sp, #56]
 154:	ldrh	w1, [sp, #58]
 158:	ldrh	w0, [sp, #86]
 15c:	and	w0, w1, w0
 160:	strh	w0, [sp, #54]
 164:	ldrh	w1, [sp, #56]
 168:	ldrh	w0, [sp, #90]
 16c:	sub	w0, w1, w0
 170:	and	w0, w0, #0xffff
 174:	mov	w2, w0
 178:	ldrh	w1, [sp, #88]
 17c:	ldrh	w0, [sp, #90]
 180:	sub	w0, w1, w0
 184:	cmp	w2, w0
 188:	b.ge	1cc <__extendXfYf2__+0x194>  // b.tcont
 18c:	ldrh	w1, [sp, #56]
 190:	mov	w2, #0x17                  	// #23
 194:	mov	w0, #0xa                   	// #10
 198:	sub	w0, w2, w0
 19c:	lsl	w0, w1, w0
 1a0:	str	w0, [sp, #108]
 1a4:	ldr	w1, [sp, #64]
 1a8:	ldr	w0, [sp, #92]
 1ac:	sub	w0, w1, w0
 1b0:	mov	w1, w0
 1b4:	mov	w0, #0x17                  	// #23
 1b8:	lsl	w0, w1, w0
 1bc:	ldr	w1, [sp, #108]
 1c0:	add	w0, w1, w0
 1c4:	str	w0, [sp, #108]
 1c8:	b	2e0 <__extendXfYf2__+0x2a8>
 1cc:	ldrh	w1, [sp, #56]
 1d0:	ldrh	w0, [sp, #88]
 1d4:	cmp	w1, w0
 1d8:	b.cc	250 <__extendXfYf2__+0x218>  // b.lo, b.ul, b.last
 1dc:	ldr	w1, [sp, #68]
 1e0:	mov	w0, #0x17                  	// #23
 1e4:	lsl	w0, w1, w0
 1e8:	str	w0, [sp, #108]
 1ec:	ldrh	w1, [sp, #56]
 1f0:	ldrh	w0, [sp, #82]
 1f4:	and	w0, w1, w0
 1f8:	and	w0, w0, #0xffff
 1fc:	mov	w2, w0
 200:	mov	w1, #0x17                  	// #23
 204:	mov	w0, #0xa                   	// #10
 208:	sub	w0, w1, w0
 20c:	lsl	w0, w2, w0
 210:	ldr	w1, [sp, #108]
 214:	orr	w0, w1, w0
 218:	str	w0, [sp, #108]
 21c:	ldrh	w1, [sp, #56]
 220:	ldrh	w0, [sp, #80]
 224:	and	w0, w1, w0
 228:	and	w0, w0, #0xffff
 22c:	mov	w2, w0
 230:	mov	w1, #0x17                  	// #23
 234:	mov	w0, #0xa                   	// #10
 238:	sub	w0, w1, w0
 23c:	lsl	w0, w2, w0
 240:	ldr	w1, [sp, #108]
 244:	orr	w0, w1, w0
 248:	str	w0, [sp, #108]
 24c:	b	2e0 <__extendXfYf2__+0x2a8>
 250:	ldrh	w0, [sp, #56]
 254:	cmp	w0, #0x0
 258:	b.eq	2dc <__extendXfYf2__+0x2a4>  // b.none
 25c:	ldrh	w0, [sp, #56]
 260:	clz	w1, w0
 264:	ldrh	w0, [sp, #90]
 268:	clz	w0, w0
 26c:	sub	w0, w1, w0
 270:	str	w0, [sp, #48]
 274:	ldrh	w1, [sp, #56]
 278:	mov	w2, #0x17                  	// #23
 27c:	mov	w0, #0xa                   	// #10
 280:	sub	w2, w2, w0
 284:	ldr	w0, [sp, #48]
 288:	add	w0, w2, w0
 28c:	lsl	w0, w1, w0
 290:	str	w0, [sp, #108]
 294:	ldr	w1, [sp, #108]
 298:	ldr	w0, [sp, #60]
 29c:	eor	w0, w1, w0
 2a0:	str	w0, [sp, #108]
 2a4:	ldr	w1, [sp, #64]
 2a8:	ldr	w0, [sp, #92]
 2ac:	sub	w1, w1, w0
 2b0:	ldr	w0, [sp, #48]
 2b4:	sub	w0, w1, w0
 2b8:	add	w0, w0, #0x1
 2bc:	str	w0, [sp, #44]
 2c0:	ldr	w1, [sp, #44]
 2c4:	mov	w0, #0x17                  	// #23
 2c8:	lsl	w0, w1, w0
 2cc:	ldr	w1, [sp, #108]
 2d0:	orr	w0, w1, w0
 2d4:	str	w0, [sp, #108]
 2d8:	b	2e0 <__extendXfYf2__+0x2a8>
 2dc:	str	wzr, [sp, #108]
 2e0:	ldrh	w1, [sp, #54]
 2e4:	ldr	w2, [sp, #76]
 2e8:	ldr	w0, [sp, #104]
 2ec:	sub	w0, w2, w0
 2f0:	lsl	w0, w1, w0
 2f4:	ldr	w1, [sp, #108]
 2f8:	orr	w0, w1, w0
 2fc:	str	w0, [sp, #40]
 300:	ldr	w0, [sp, #40]
 304:	bl	1c <dstFromRep>
 308:	ldp	x29, x30, [sp], #112
 30c:	ret

0000000000000310 <__extendhfsf2>:
 310:	stp	x29, x30, [sp, #-32]!
 314:	mov	x29, sp
 318:	strh	w0, [sp, #30]
 31c:	ldrh	w0, [sp, #30]
 320:	bl	38 <__extendXfYf2__>
 324:	ldp	x29, x30, [sp], #32
 328:	ret

000000000000032c <__gnu_h2f_ieee>:
 32c:	stp	x29, x30, [sp, #-32]!
 330:	mov	x29, sp
 334:	strh	w0, [sp, #30]
 338:	ldrh	w0, [sp, #30]
 33c:	bl	310 <__extendhfsf2>
 340:	ldp	x29, x30, [sp], #32
 344:	ret

ffsdi2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__ffsdi2>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	str	x0, [sp, #24]
  10:	ldr	w0, [sp, #24]
  14:	cmp	w0, #0x0
  18:	b.ne	44 <__ffsdi2+0x44>  // b.any
  1c:	ldr	w0, [sp, #28]
  20:	cmp	w0, #0x0
  24:	b.ne	30 <__ffsdi2+0x30>  // b.any
  28:	mov	w0, #0x0                   	// #0
  2c:	b	54 <__ffsdi2+0x54>
  30:	ldr	w0, [sp, #28]
  34:	rbit	w0, w0
  38:	clz	w0, w0
  3c:	add	w0, w0, #0x21
  40:	b	54 <__ffsdi2+0x54>
  44:	ldr	w0, [sp, #24]
  48:	rbit	w0, w0
  4c:	clz	w0, w0
  50:	add	w0, w0, #0x1
  54:	add	sp, sp, #0x20
  58:	ret

ffssi2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__ffssi2>:
   0:	sub	sp, sp, #0x10
   4:	str	w0, [sp, #12]
   8:	ldr	w0, [sp, #12]
   c:	cmp	w0, #0x0
  10:	b.ne	1c <__ffssi2+0x1c>  // b.any
  14:	mov	w0, #0x0                   	// #0
  18:	b	2c <__ffssi2+0x2c>
  1c:	ldr	w0, [sp, #12]
  20:	rbit	w0, w0
  24:	clz	w0, w0
  28:	add	w0, w0, #0x1
  2c:	add	sp, sp, #0x10
  30:	ret

ffsti2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__ffsti2>:
   0:	sub	sp, sp, #0x20
   4:	stp	x0, x1, [sp]
   8:	ldp	x0, x1, [sp]
   c:	stp	x0, x1, [sp, #16]
  10:	ldr	x0, [sp, #16]
  14:	cmp	x0, #0x0
  18:	b.ne	44 <__ffsti2+0x44>  // b.any
  1c:	ldr	x0, [sp, #24]
  20:	cmp	x0, #0x0
  24:	b.ne	30 <__ffsti2+0x30>  // b.any
  28:	mov	w0, #0x0                   	// #0
  2c:	b	54 <__ffsti2+0x54>
  30:	ldr	x0, [sp, #24]
  34:	rbit	x0, x0
  38:	clz	x0, x0
  3c:	add	w0, w0, #0x41
  40:	b	54 <__ffsti2+0x54>
  44:	ldr	x0, [sp, #16]
  48:	rbit	x0, x0
  4c:	clz	x0, x0
  50:	add	w0, w0, #0x1
  54:	add	sp, sp, #0x20
  58:	ret

fixdfdi.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__fixdfdi>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	d0, [sp, #24]
   c:	ldr	d0, [sp, #24]
  10:	fcmpe	d0, #0.0
  14:	b.pl	2c <__fixdfdi+0x2c>  // b.nfrst
  18:	ldr	d0, [sp, #24]
  1c:	fneg	d0, d0
  20:	bl	0 <__fixunsdfdi>
  24:	neg	x0, x0
  28:	b	34 <__fixdfdi+0x34>
  2c:	ldr	d0, [sp, #24]
  30:	bl	0 <__fixunsdfdi>
  34:	ldp	x29, x30, [sp], #32
  38:	ret

fixdfsi.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <toRep>:
   0:	sub	sp, sp, #0x20
   4:	str	d0, [sp, #8]
   8:	ldr	d0, [sp, #8]
   c:	str	d0, [sp, #24]
  10:	ldr	x0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__fixint>:
  1c:	stp	x29, x30, [sp, #-80]!
  20:	mov	x29, sp
  24:	str	d0, [sp, #24]
  28:	mov	w0, #0x7fffffff            	// #2147483647
  2c:	str	w0, [sp, #76]
  30:	ldr	w0, [sp, #76]
  34:	mvn	w0, w0
  38:	str	w0, [sp, #72]
  3c:	ldr	d0, [sp, #24]
  40:	bl	0 <toRep>
  44:	str	x0, [sp, #64]
  48:	ldr	x0, [sp, #64]
  4c:	and	x0, x0, #0x7fffffffffffffff
  50:	str	x0, [sp, #56]
  54:	ldr	x0, [sp, #64]
  58:	cmp	x0, #0x0
  5c:	b.ge	68 <__fixint+0x4c>  // b.tcont
  60:	mov	w0, #0xffffffff            	// #-1
  64:	b	6c <__fixint+0x50>
  68:	mov	w0, #0x1                   	// #1
  6c:	str	w0, [sp, #52]
  70:	ldr	x0, [sp, #56]
  74:	lsr	x0, x0, #52
  78:	sub	w0, w0, #0x3ff
  7c:	str	w0, [sp, #48]
  80:	ldr	x0, [sp, #56]
  84:	and	x0, x0, #0xfffffffffffff
  88:	orr	x0, x0, #0x10000000000000
  8c:	str	x0, [sp, #40]
  90:	ldr	w0, [sp, #48]
  94:	cmp	w0, #0x0
  98:	b.ge	a4 <__fixint+0x88>  // b.tcont
  9c:	mov	w0, #0x0                   	// #0
  a0:	b	118 <__fixint+0xfc>
  a4:	ldr	w0, [sp, #48]
  a8:	cmp	w0, #0x1f
  ac:	b.ls	cc <__fixint+0xb0>  // b.plast
  b0:	ldr	w0, [sp, #52]
  b4:	cmp	w0, #0x1
  b8:	b.ne	c4 <__fixint+0xa8>  // b.any
  bc:	ldr	w0, [sp, #76]
  c0:	b	118 <__fixint+0xfc>
  c4:	ldr	w0, [sp, #72]
  c8:	b	118 <__fixint+0xfc>
  cc:	ldr	w0, [sp, #48]
  d0:	cmp	w0, #0x33
  d4:	b.gt	fc <__fixint+0xe0>
  d8:	ldrsw	x0, [sp, #52]
  dc:	mov	w2, w0
  e0:	mov	w1, #0x34                  	// #52
  e4:	ldr	w0, [sp, #48]
  e8:	sub	w0, w1, w0
  ec:	ldr	x1, [sp, #40]
  f0:	lsr	x0, x1, x0
  f4:	mul	w0, w2, w0
  f8:	b	118 <__fixint+0xfc>
  fc:	ldr	x0, [sp, #40]
 100:	mov	w1, w0
 104:	ldr	w0, [sp, #48]
 108:	sub	w0, w0, #0x34
 10c:	lsl	w1, w1, w0
 110:	ldr	w0, [sp, #52]
 114:	mul	w0, w1, w0
 118:	ldp	x29, x30, [sp], #80
 11c:	ret

0000000000000120 <__fixdfsi>:
 120:	stp	x29, x30, [sp, #-32]!
 124:	mov	x29, sp
 128:	str	d0, [sp, #24]
 12c:	ldr	d0, [sp, #24]
 130:	bl	1c <__fixint>
 134:	ldp	x29, x30, [sp], #32
 138:	ret

fixdfti.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <toRep>:
   0:	sub	sp, sp, #0x20
   4:	str	d0, [sp, #8]
   8:	ldr	d0, [sp, #8]
   c:	str	d0, [sp, #24]
  10:	ldr	x0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__fixint>:
  1c:	stp	x29, x30, [sp, #-176]!
  20:	mov	x29, sp
  24:	stp	x20, x21, [sp, #16]
  28:	stp	x22, x23, [sp, #32]
  2c:	stp	x24, x25, [sp, #48]
  30:	stp	x26, x27, [sp, #64]
  34:	str	d0, [sp, #88]
  38:	adrp	x0, 0 <toRep>
  3c:	add	x0, x0, #0x0
  40:	ldp	x0, x1, [x0]
  44:	stp	x0, x1, [sp, #160]
  48:	ldr	x0, [sp, #160]
  4c:	mvn	x0, x0
  50:	str	x0, [sp, #144]
  54:	ldr	x0, [sp, #168]
  58:	mvn	x0, x0
  5c:	str	x0, [sp, #152]
  60:	ldr	d0, [sp, #88]
  64:	bl	0 <toRep>
  68:	str	x0, [sp, #136]
  6c:	ldr	x0, [sp, #136]
  70:	and	x0, x0, #0x7fffffffffffffff
  74:	str	x0, [sp, #128]
  78:	ldr	x0, [sp, #136]
  7c:	cmp	x0, #0x0
  80:	b.ge	90 <__fixint+0x74>  // b.tcont
  84:	mov	x0, #0xffffffffffffffff    	// #-1
  88:	mov	x1, #0xffffffffffffffff    	// #-1
  8c:	b	98 <__fixint+0x7c>
  90:	mov	x0, #0x1                   	// #1
  94:	mov	x1, #0x0                   	// #0
  98:	stp	x0, x1, [sp, #112]
  9c:	ldr	x0, [sp, #128]
  a0:	lsr	x0, x0, #52
  a4:	sub	w0, w0, #0x3ff
  a8:	str	w0, [sp, #108]
  ac:	ldr	x0, [sp, #128]
  b0:	and	x0, x0, #0xfffffffffffff
  b4:	orr	x0, x0, #0x10000000000000
  b8:	str	x0, [sp, #96]
  bc:	ldr	w0, [sp, #108]
  c0:	cmp	w0, #0x0
  c4:	b.ge	d4 <__fixint+0xb8>  // b.tcont
  c8:	mov	x22, #0x0                   	// #0
  cc:	mov	x23, #0x0                   	// #0
  d0:	b	1b8 <__fixint+0x19c>
  d4:	ldr	w0, [sp, #108]
  d8:	cmp	w0, #0x7f
  dc:	b.ls	108 <__fixint+0xec>  // b.plast
  e0:	ldr	x0, [sp, #112]
  e4:	cmp	x0, #0x1
  e8:	b.ne	100 <__fixint+0xe4>  // b.any
  ec:	ldr	x0, [sp, #120]
  f0:	cmp	x0, #0x0
  f4:	b.ne	100 <__fixint+0xe4>  // b.any
  f8:	ldp	x22, x23, [sp, #160]
  fc:	b	1b8 <__fixint+0x19c>
 100:	ldp	x22, x23, [sp, #144]
 104:	b	1b8 <__fixint+0x19c>
 108:	ldr	w0, [sp, #108]
 10c:	cmp	w0, #0x33
 110:	b.gt	150 <__fixint+0x134>
 114:	mov	w1, #0x34                  	// #52
 118:	ldr	w0, [sp, #108]
 11c:	sub	w0, w1, w0
 120:	ldr	x1, [sp, #96]
 124:	lsr	x0, x1, x0
 128:	mov	x26, x0
 12c:	mov	x27, #0x0                   	// #0
 130:	ldp	x0, x1, [sp, #112]
 134:	mul	x3, x26, x0
 138:	umulh	x2, x26, x0
 13c:	madd	x2, x27, x0, x2
 140:	madd	x2, x26, x1, x2
 144:	mov	x22, x3
 148:	mov	x23, x2
 14c:	b	1b8 <__fixint+0x19c>
 150:	ldr	x0, [sp, #96]
 154:	mov	x24, x0
 158:	mov	x25, #0x0                   	// #0
 15c:	ldr	w0, [sp, #108]
 160:	sub	w0, w0, #0x34
 164:	sub	w1, w0, #0x40
 168:	lsl	x2, x24, x1
 16c:	mov	x5, #0x0                   	// #0
 170:	lsr	x4, x24, #1
 174:	mov	w3, #0x3f                  	// #63
 178:	sub	w3, w3, w0
 17c:	lsr	x3, x4, x3
 180:	lsl	x21, x25, x0
 184:	orr	x21, x3, x21
 188:	lsl	x20, x24, x0
 18c:	cmp	w1, #0x0
 190:	csel	x21, x2, x21, ge  // ge = tcont
 194:	cmp	w1, #0x0
 198:	csel	x20, x5, x20, ge  // ge = tcont
 19c:	ldp	x0, x1, [sp, #112]
 1a0:	mul	x3, x20, x0
 1a4:	umulh	x2, x20, x0
 1a8:	madd	x2, x21, x0, x2
 1ac:	madd	x2, x20, x1, x2
 1b0:	mov	x22, x3
 1b4:	mov	x23, x2
 1b8:	mov	x0, x22
 1bc:	mov	x1, x23
 1c0:	ldp	x20, x21, [sp, #16]
 1c4:	ldp	x22, x23, [sp, #32]
 1c8:	ldp	x24, x25, [sp, #48]
 1cc:	ldp	x26, x27, [sp, #64]
 1d0:	ldp	x29, x30, [sp], #176
 1d4:	ret

00000000000001d8 <__fixdfti>:
 1d8:	stp	x29, x30, [sp, #-32]!
 1dc:	mov	x29, sp
 1e0:	str	d0, [sp, #24]
 1e4:	ldr	d0, [sp, #24]
 1e8:	bl	1c <__fixint>
 1ec:	ldp	x29, x30, [sp], #32
 1f0:	ret

fixsfdi.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__fixsfdi>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	s0, [sp, #28]
   c:	ldr	s0, [sp, #28]
  10:	fcmpe	s0, #0.0
  14:	b.pl	2c <__fixsfdi+0x2c>  // b.nfrst
  18:	ldr	s0, [sp, #28]
  1c:	fneg	s0, s0
  20:	bl	0 <__fixunssfdi>
  24:	neg	x0, x0
  28:	b	34 <__fixsfdi+0x34>
  2c:	ldr	s0, [sp, #28]
  30:	bl	0 <__fixunssfdi>
  34:	ldp	x29, x30, [sp], #32
  38:	ret

fixsfsi.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <toRep>:
   0:	sub	sp, sp, #0x20
   4:	str	s0, [sp, #12]
   8:	ldr	s0, [sp, #12]
   c:	str	s0, [sp, #24]
  10:	ldr	w0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__fixint>:
  1c:	stp	x29, x30, [sp, #-64]!
  20:	mov	x29, sp
  24:	str	s0, [sp, #28]
  28:	mov	w0, #0x7fffffff            	// #2147483647
  2c:	str	w0, [sp, #60]
  30:	ldr	w0, [sp, #60]
  34:	mvn	w0, w0
  38:	str	w0, [sp, #56]
  3c:	ldr	s0, [sp, #28]
  40:	bl	0 <toRep>
  44:	str	w0, [sp, #52]
  48:	ldr	w0, [sp, #52]
  4c:	and	w0, w0, #0x7fffffff
  50:	str	w0, [sp, #48]
  54:	ldr	w0, [sp, #52]
  58:	cmp	w0, #0x0
  5c:	b.ge	68 <__fixint+0x4c>  // b.tcont
  60:	mov	w0, #0xffffffff            	// #-1
  64:	b	6c <__fixint+0x50>
  68:	mov	w0, #0x1                   	// #1
  6c:	str	w0, [sp, #44]
  70:	ldr	w0, [sp, #48]
  74:	lsr	w0, w0, #23
  78:	sub	w0, w0, #0x7f
  7c:	str	w0, [sp, #40]
  80:	ldr	w0, [sp, #48]
  84:	and	w0, w0, #0x7fffff
  88:	orr	w0, w0, #0x800000
  8c:	str	w0, [sp, #36]
  90:	ldr	w0, [sp, #40]
  94:	cmp	w0, #0x0
  98:	b.ge	a4 <__fixint+0x88>  // b.tcont
  9c:	mov	w0, #0x0                   	// #0
  a0:	b	110 <__fixint+0xf4>
  a4:	ldr	w0, [sp, #40]
  a8:	cmp	w0, #0x1f
  ac:	b.ls	cc <__fixint+0xb0>  // b.plast
  b0:	ldr	w0, [sp, #44]
  b4:	cmp	w0, #0x1
  b8:	b.ne	c4 <__fixint+0xa8>  // b.any
  bc:	ldr	w0, [sp, #60]
  c0:	b	110 <__fixint+0xf4>
  c4:	ldr	w0, [sp, #56]
  c8:	b	110 <__fixint+0xf4>
  cc:	ldr	w0, [sp, #40]
  d0:	cmp	w0, #0x16
  d4:	b.gt	f8 <__fixint+0xdc>
  d8:	mov	w1, #0x17                  	// #23
  dc:	ldr	w0, [sp, #40]
  e0:	sub	w0, w1, w0
  e4:	ldr	w1, [sp, #36]
  e8:	lsr	w1, w1, w0
  ec:	ldr	w0, [sp, #44]
  f0:	mul	w0, w1, w0
  f4:	b	110 <__fixint+0xf4>
  f8:	ldr	w1, [sp, #36]
  fc:	ldr	w0, [sp, #40]
 100:	sub	w0, w0, #0x17
 104:	lsl	w1, w1, w0
 108:	ldr	w0, [sp, #44]
 10c:	mul	w0, w1, w0
 110:	ldp	x29, x30, [sp], #64
 114:	ret

0000000000000118 <__fixsfsi>:
 118:	stp	x29, x30, [sp, #-32]!
 11c:	mov	x29, sp
 120:	str	s0, [sp, #28]
 124:	ldr	s0, [sp, #28]
 128:	bl	1c <__fixint>
 12c:	ldp	x29, x30, [sp], #32
 130:	ret

fixsfti.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <toRep>:
   0:	sub	sp, sp, #0x20
   4:	str	s0, [sp, #12]
   8:	ldr	s0, [sp, #12]
   c:	str	s0, [sp, #24]
  10:	ldr	w0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__fixint>:
  1c:	stp	x29, x30, [sp, #-176]!
  20:	mov	x29, sp
  24:	stp	x20, x21, [sp, #16]
  28:	stp	x22, x23, [sp, #32]
  2c:	stp	x24, x25, [sp, #48]
  30:	stp	x26, x27, [sp, #64]
  34:	str	s0, [sp, #92]
  38:	adrp	x0, 0 <toRep>
  3c:	add	x0, x0, #0x0
  40:	ldp	x0, x1, [x0]
  44:	stp	x0, x1, [sp, #160]
  48:	ldr	x0, [sp, #160]
  4c:	mvn	x0, x0
  50:	str	x0, [sp, #144]
  54:	ldr	x0, [sp, #168]
  58:	mvn	x0, x0
  5c:	str	x0, [sp, #152]
  60:	ldr	s0, [sp, #92]
  64:	bl	0 <toRep>
  68:	str	w0, [sp, #140]
  6c:	ldr	w0, [sp, #140]
  70:	and	w0, w0, #0x7fffffff
  74:	str	w0, [sp, #136]
  78:	ldr	w0, [sp, #140]
  7c:	cmp	w0, #0x0
  80:	b.ge	90 <__fixint+0x74>  // b.tcont
  84:	mov	x0, #0xffffffffffffffff    	// #-1
  88:	mov	x1, #0xffffffffffffffff    	// #-1
  8c:	b	98 <__fixint+0x7c>
  90:	mov	x0, #0x1                   	// #1
  94:	mov	x1, #0x0                   	// #0
  98:	stp	x0, x1, [sp, #112]
  9c:	ldr	w0, [sp, #136]
  a0:	lsr	w0, w0, #23
  a4:	sub	w0, w0, #0x7f
  a8:	str	w0, [sp, #108]
  ac:	ldr	w0, [sp, #136]
  b0:	and	w0, w0, #0x7fffff
  b4:	orr	w0, w0, #0x800000
  b8:	str	w0, [sp, #104]
  bc:	ldr	w0, [sp, #108]
  c0:	cmp	w0, #0x0
  c4:	b.ge	d4 <__fixint+0xb8>  // b.tcont
  c8:	mov	x22, #0x0                   	// #0
  cc:	mov	x23, #0x0                   	// #0
  d0:	b	1c0 <__fixint+0x1a4>
  d4:	ldr	w0, [sp, #108]
  d8:	cmp	w0, #0x7f
  dc:	b.ls	108 <__fixint+0xec>  // b.plast
  e0:	ldr	x0, [sp, #112]
  e4:	cmp	x0, #0x1
  e8:	b.ne	100 <__fixint+0xe4>  // b.any
  ec:	ldr	x0, [sp, #120]
  f0:	cmp	x0, #0x0
  f4:	b.ne	100 <__fixint+0xe4>  // b.any
  f8:	ldp	x22, x23, [sp, #160]
  fc:	b	1c0 <__fixint+0x1a4>
 100:	ldp	x22, x23, [sp, #144]
 104:	b	1c0 <__fixint+0x1a4>
 108:	ldr	w0, [sp, #108]
 10c:	cmp	w0, #0x16
 110:	b.gt	154 <__fixint+0x138>
 114:	mov	w1, #0x17                  	// #23
 118:	ldr	w0, [sp, #108]
 11c:	sub	w0, w1, w0
 120:	ldr	w1, [sp, #104]
 124:	lsr	w0, w1, w0
 128:	mov	w0, w0
 12c:	mov	x26, x0
 130:	mov	x27, #0x0                   	// #0
 134:	ldp	x0, x1, [sp, #112]
 138:	mul	x3, x26, x0
 13c:	umulh	x2, x26, x0
 140:	madd	x2, x27, x0, x2
 144:	madd	x2, x26, x1, x2
 148:	mov	x22, x3
 14c:	mov	x23, x2
 150:	b	1c0 <__fixint+0x1a4>
 154:	ldr	w0, [sp, #104]
 158:	mov	w0, w0
 15c:	mov	x24, x0
 160:	mov	x25, #0x0                   	// #0
 164:	ldr	w0, [sp, #108]
 168:	sub	w0, w0, #0x17
 16c:	sub	w1, w0, #0x40
 170:	lsl	x2, x24, x1
 174:	mov	x5, #0x0                   	// #0
 178:	lsr	x4, x24, #1
 17c:	mov	w3, #0x3f                  	// #63
 180:	sub	w3, w3, w0
 184:	lsr	x3, x4, x3
 188:	lsl	x21, x25, x0
 18c:	orr	x21, x3, x21
 190:	lsl	x20, x24, x0
 194:	cmp	w1, #0x0
 198:	csel	x21, x2, x21, ge  // ge = tcont
 19c:	cmp	w1, #0x0
 1a0:	csel	x20, x5, x20, ge  // ge = tcont
 1a4:	ldp	x0, x1, [sp, #112]
 1a8:	mul	x3, x20, x0
 1ac:	umulh	x2, x20, x0
 1b0:	madd	x2, x21, x0, x2
 1b4:	madd	x2, x20, x1, x2
 1b8:	mov	x22, x3
 1bc:	mov	x23, x2
 1c0:	mov	x0, x22
 1c4:	mov	x1, x23
 1c8:	ldp	x20, x21, [sp, #16]
 1cc:	ldp	x22, x23, [sp, #32]
 1d0:	ldp	x24, x25, [sp, #48]
 1d4:	ldp	x26, x27, [sp, #64]
 1d8:	ldp	x29, x30, [sp], #176
 1dc:	ret

00000000000001e0 <__fixsfti>:
 1e0:	stp	x29, x30, [sp, #-32]!
 1e4:	mov	x29, sp
 1e8:	str	s0, [sp, #28]
 1ec:	ldr	s0, [sp, #28]
 1f0:	bl	1c <__fixint>
 1f4:	ldp	x29, x30, [sp], #32
 1f8:	ret

fixunsdfdi.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__fixunsdfdi>:
   0:	sub	sp, sp, #0x20
   4:	str	d0, [sp, #8]
   8:	ldr	d0, [sp, #8]
   c:	fcmpe	d0, #0.0
  10:	b.hi	1c <__fixunsdfdi+0x1c>  // b.pmore
  14:	mov	x0, #0x0                   	// #0
  18:	b	68 <__fixunsdfdi+0x68>
  1c:	mov	x0, #0x41f0000000000000    	// #4751297606875873280
  20:	fmov	d1, x0
  24:	ldr	d0, [sp, #8]
  28:	fdiv	d0, d0, d1
  2c:	fcvtzu	w0, d0
  30:	str	w0, [sp, #28]
  34:	ldr	w0, [sp, #28]
  38:	ucvtf	d0, w0
  3c:	mov	x0, #0x41f0000000000000    	// #4751297606875873280
  40:	fmov	d1, x0
  44:	fmul	d0, d0, d1
  48:	ldr	d1, [sp, #8]
  4c:	fsub	d0, d1, d0
  50:	fcvtzu	w0, d0
  54:	str	w0, [sp, #24]
  58:	ldr	w0, [sp, #28]
  5c:	lsl	x1, x0, #32
  60:	ldr	w0, [sp, #24]
  64:	orr	x0, x1, x0
  68:	add	sp, sp, #0x20
  6c:	ret

fixunsdfsi.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <toRep>:
   0:	sub	sp, sp, #0x20
   4:	str	d0, [sp, #8]
   8:	ldr	d0, [sp, #8]
   c:	str	d0, [sp, #24]
  10:	ldr	x0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__fixuint>:
  1c:	stp	x29, x30, [sp, #-64]!
  20:	mov	x29, sp
  24:	str	d0, [sp, #24]
  28:	ldr	d0, [sp, #24]
  2c:	bl	0 <toRep>
  30:	str	x0, [sp, #56]
  34:	ldr	x0, [sp, #56]
  38:	and	x0, x0, #0x7fffffffffffffff
  3c:	str	x0, [sp, #48]
  40:	ldr	x0, [sp, #56]
  44:	cmp	x0, #0x0
  48:	b.ge	54 <__fixuint+0x38>  // b.tcont
  4c:	mov	w0, #0xffffffff            	// #-1
  50:	b	58 <__fixuint+0x3c>
  54:	mov	w0, #0x1                   	// #1
  58:	str	w0, [sp, #44]
  5c:	ldr	x0, [sp, #48]
  60:	lsr	x0, x0, #52
  64:	sub	w0, w0, #0x3ff
  68:	str	w0, [sp, #40]
  6c:	ldr	x0, [sp, #48]
  70:	and	x0, x0, #0xfffffffffffff
  74:	orr	x0, x0, #0x10000000000000
  78:	str	x0, [sp, #32]
  7c:	ldr	w0, [sp, #44]
  80:	cmn	w0, #0x1
  84:	b.eq	94 <__fixuint+0x78>  // b.none
  88:	ldr	w0, [sp, #40]
  8c:	cmp	w0, #0x0
  90:	b.ge	9c <__fixuint+0x80>  // b.tcont
  94:	mov	w0, #0x0                   	// #0
  98:	b	e8 <__fixuint+0xcc>
  9c:	ldr	w0, [sp, #40]
  a0:	cmp	w0, #0x1f
  a4:	b.ls	b0 <__fixuint+0x94>  // b.plast
  a8:	mov	w0, #0xffffffff            	// #-1
  ac:	b	e8 <__fixuint+0xcc>
  b0:	ldr	w0, [sp, #40]
  b4:	cmp	w0, #0x33
  b8:	b.gt	d4 <__fixuint+0xb8>
  bc:	mov	w1, #0x34                  	// #52
  c0:	ldr	w0, [sp, #40]
  c4:	sub	w0, w1, w0
  c8:	ldr	x1, [sp, #32]
  cc:	lsr	x0, x1, x0
  d0:	b	e8 <__fixuint+0xcc>
  d4:	ldr	x0, [sp, #32]
  d8:	mov	w1, w0
  dc:	ldr	w0, [sp, #40]
  e0:	sub	w0, w0, #0x34
  e4:	lsl	w0, w1, w0
  e8:	ldp	x29, x30, [sp], #64
  ec:	ret

00000000000000f0 <__fixunsdfsi>:
  f0:	stp	x29, x30, [sp, #-32]!
  f4:	mov	x29, sp
  f8:	str	d0, [sp, #24]
  fc:	ldr	d0, [sp, #24]
 100:	bl	1c <__fixuint>
 104:	ldp	x29, x30, [sp], #32
 108:	ret

fixunsdfti.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <toRep>:
   0:	sub	sp, sp, #0x20
   4:	str	d0, [sp, #8]
   8:	ldr	d0, [sp, #8]
   c:	str	d0, [sp, #24]
  10:	ldr	x0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__fixuint>:
  1c:	stp	x29, x30, [sp, #-96]!
  20:	mov	x29, sp
  24:	stp	x20, x21, [sp, #16]
  28:	stp	x22, x23, [sp, #32]
  2c:	str	d0, [sp, #56]
  30:	ldr	d0, [sp, #56]
  34:	bl	0 <toRep>
  38:	str	x0, [sp, #88]
  3c:	ldr	x0, [sp, #88]
  40:	and	x0, x0, #0x7fffffffffffffff
  44:	str	x0, [sp, #80]
  48:	ldr	x0, [sp, #88]
  4c:	cmp	x0, #0x0
  50:	b.ge	5c <__fixuint+0x40>  // b.tcont
  54:	mov	w0, #0xffffffff            	// #-1
  58:	b	60 <__fixuint+0x44>
  5c:	mov	w0, #0x1                   	// #1
  60:	str	w0, [sp, #76]
  64:	ldr	x0, [sp, #80]
  68:	lsr	x0, x0, #52
  6c:	sub	w0, w0, #0x3ff
  70:	str	w0, [sp, #72]
  74:	ldr	x0, [sp, #80]
  78:	and	x0, x0, #0xfffffffffffff
  7c:	orr	x0, x0, #0x10000000000000
  80:	str	x0, [sp, #64]
  84:	ldr	w0, [sp, #76]
  88:	cmn	w0, #0x1
  8c:	b.eq	9c <__fixuint+0x80>  // b.none
  90:	ldr	w0, [sp, #72]
  94:	cmp	w0, #0x0
  98:	b.ge	a8 <__fixuint+0x8c>  // b.tcont
  9c:	mov	x20, #0x0                   	// #0
  a0:	mov	x21, #0x0                   	// #0
  a4:	b	138 <__fixuint+0x11c>
  a8:	ldr	w0, [sp, #72]
  ac:	cmp	w0, #0x7f
  b0:	b.ls	c0 <__fixuint+0xa4>  // b.plast
  b4:	mov	x20, #0xffffffffffffffff    	// #-1
  b8:	mov	x21, #0xffffffffffffffff    	// #-1
  bc:	b	138 <__fixuint+0x11c>
  c0:	ldr	w0, [sp, #72]
  c4:	cmp	w0, #0x33
  c8:	b.gt	ec <__fixuint+0xd0>
  cc:	mov	w1, #0x34                  	// #52
  d0:	ldr	w0, [sp, #72]
  d4:	sub	w0, w1, w0
  d8:	ldr	x1, [sp, #64]
  dc:	lsr	x0, x1, x0
  e0:	mov	x20, x0
  e4:	mov	x21, #0x0                   	// #0
  e8:	b	138 <__fixuint+0x11c>
  ec:	ldr	x0, [sp, #64]
  f0:	mov	x22, x0
  f4:	mov	x23, #0x0                   	// #0
  f8:	ldr	w0, [sp, #72]
  fc:	sub	w0, w0, #0x34
 100:	sub	w1, w0, #0x40
 104:	lsl	x2, x22, x1
 108:	mov	x5, #0x0                   	// #0
 10c:	lsr	x4, x22, #1
 110:	mov	w3, #0x3f                  	// #63
 114:	sub	w3, w3, w0
 118:	lsr	x3, x4, x3
 11c:	lsl	x21, x23, x0
 120:	orr	x21, x3, x21
 124:	lsl	x20, x22, x0
 128:	cmp	w1, #0x0
 12c:	csel	x21, x2, x21, ge  // ge = tcont
 130:	cmp	w1, #0x0
 134:	csel	x20, x5, x20, ge  // ge = tcont
 138:	mov	x0, x20
 13c:	mov	x1, x21
 140:	ldp	x20, x21, [sp, #16]
 144:	ldp	x22, x23, [sp, #32]
 148:	ldp	x29, x30, [sp], #96
 14c:	ret

0000000000000150 <__fixunsdfti>:
 150:	stp	x29, x30, [sp, #-32]!
 154:	mov	x29, sp
 158:	str	d0, [sp, #24]
 15c:	ldr	d0, [sp, #24]
 160:	bl	1c <__fixuint>
 164:	ldp	x29, x30, [sp], #32
 168:	ret

fixunssfdi.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__fixunssfdi>:
   0:	sub	sp, sp, #0x20
   4:	str	s0, [sp, #12]
   8:	ldr	s0, [sp, #12]
   c:	fcmpe	s0, #0.0
  10:	b.hi	1c <__fixunssfdi+0x1c>  // b.pmore
  14:	mov	x0, #0x0                   	// #0
  18:	b	74 <__fixunssfdi+0x74>
  1c:	ldr	s0, [sp, #12]
  20:	fcvt	d0, s0
  24:	str	d0, [sp, #24]
  28:	mov	x0, #0x41f0000000000000    	// #4751297606875873280
  2c:	fmov	d1, x0
  30:	ldr	d0, [sp, #24]
  34:	fdiv	d0, d0, d1
  38:	fcvtzu	w0, d0
  3c:	str	w0, [sp, #20]
  40:	ldr	w0, [sp, #20]
  44:	ucvtf	d0, w0
  48:	mov	x0, #0x41f0000000000000    	// #4751297606875873280
  4c:	fmov	d1, x0
  50:	fmul	d0, d0, d1
  54:	ldr	d1, [sp, #24]
  58:	fsub	d0, d1, d0
  5c:	fcvtzu	w0, d0
  60:	str	w0, [sp, #16]
  64:	ldr	w0, [sp, #20]
  68:	lsl	x1, x0, #32
  6c:	ldr	w0, [sp, #16]
  70:	orr	x0, x1, x0
  74:	add	sp, sp, #0x20
  78:	ret

fixunssfsi.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <toRep>:
   0:	sub	sp, sp, #0x20
   4:	str	s0, [sp, #12]
   8:	ldr	s0, [sp, #12]
   c:	str	s0, [sp, #24]
  10:	ldr	w0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__fixuint>:
  1c:	stp	x29, x30, [sp, #-64]!
  20:	mov	x29, sp
  24:	str	s0, [sp, #28]
  28:	ldr	s0, [sp, #28]
  2c:	bl	0 <toRep>
  30:	str	w0, [sp, #60]
  34:	ldr	w0, [sp, #60]
  38:	and	w0, w0, #0x7fffffff
  3c:	str	w0, [sp, #56]
  40:	ldr	w0, [sp, #60]
  44:	cmp	w0, #0x0
  48:	b.ge	54 <__fixuint+0x38>  // b.tcont
  4c:	mov	w0, #0xffffffff            	// #-1
  50:	b	58 <__fixuint+0x3c>
  54:	mov	w0, #0x1                   	// #1
  58:	str	w0, [sp, #52]
  5c:	ldr	w0, [sp, #56]
  60:	lsr	w0, w0, #23
  64:	sub	w0, w0, #0x7f
  68:	str	w0, [sp, #48]
  6c:	ldr	w0, [sp, #56]
  70:	and	w0, w0, #0x7fffff
  74:	orr	w0, w0, #0x800000
  78:	str	w0, [sp, #44]
  7c:	ldr	w0, [sp, #52]
  80:	cmn	w0, #0x1
  84:	b.eq	94 <__fixuint+0x78>  // b.none
  88:	ldr	w0, [sp, #48]
  8c:	cmp	w0, #0x0
  90:	b.ge	9c <__fixuint+0x80>  // b.tcont
  94:	mov	w0, #0x0                   	// #0
  98:	b	e4 <__fixuint+0xc8>
  9c:	ldr	w0, [sp, #48]
  a0:	cmp	w0, #0x1f
  a4:	b.ls	b0 <__fixuint+0x94>  // b.plast
  a8:	mov	w0, #0xffffffff            	// #-1
  ac:	b	e4 <__fixuint+0xc8>
  b0:	ldr	w0, [sp, #48]
  b4:	cmp	w0, #0x16
  b8:	b.gt	d4 <__fixuint+0xb8>
  bc:	mov	w1, #0x17                  	// #23
  c0:	ldr	w0, [sp, #48]
  c4:	sub	w0, w1, w0
  c8:	ldr	w1, [sp, #44]
  cc:	lsr	w0, w1, w0
  d0:	b	e4 <__fixuint+0xc8>
  d4:	ldr	w0, [sp, #48]
  d8:	sub	w0, w0, #0x17
  dc:	ldr	w1, [sp, #44]
  e0:	lsl	w0, w1, w0
  e4:	ldp	x29, x30, [sp], #64
  e8:	ret

00000000000000ec <__fixunssfsi>:
  ec:	stp	x29, x30, [sp, #-32]!
  f0:	mov	x29, sp
  f4:	str	s0, [sp, #28]
  f8:	ldr	s0, [sp, #28]
  fc:	bl	1c <__fixuint>
 100:	ldp	x29, x30, [sp], #32
 104:	ret

fixunssfti.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <toRep>:
   0:	sub	sp, sp, #0x20
   4:	str	s0, [sp, #12]
   8:	ldr	s0, [sp, #12]
   c:	str	s0, [sp, #24]
  10:	ldr	w0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__fixuint>:
  1c:	stp	x29, x30, [sp, #-96]!
  20:	mov	x29, sp
  24:	stp	x20, x21, [sp, #16]
  28:	stp	x22, x23, [sp, #32]
  2c:	str	s0, [sp, #60]
  30:	ldr	s0, [sp, #60]
  34:	bl	0 <toRep>
  38:	str	w0, [sp, #92]
  3c:	ldr	w0, [sp, #92]
  40:	and	w0, w0, #0x7fffffff
  44:	str	w0, [sp, #88]
  48:	ldr	w0, [sp, #92]
  4c:	cmp	w0, #0x0
  50:	b.ge	5c <__fixuint+0x40>  // b.tcont
  54:	mov	w0, #0xffffffff            	// #-1
  58:	b	60 <__fixuint+0x44>
  5c:	mov	w0, #0x1                   	// #1
  60:	str	w0, [sp, #84]
  64:	ldr	w0, [sp, #88]
  68:	lsr	w0, w0, #23
  6c:	sub	w0, w0, #0x7f
  70:	str	w0, [sp, #80]
  74:	ldr	w0, [sp, #88]
  78:	and	w0, w0, #0x7fffff
  7c:	orr	w0, w0, #0x800000
  80:	str	w0, [sp, #76]
  84:	ldr	w0, [sp, #84]
  88:	cmn	w0, #0x1
  8c:	b.eq	9c <__fixuint+0x80>  // b.none
  90:	ldr	w0, [sp, #80]
  94:	cmp	w0, #0x0
  98:	b.ge	a8 <__fixuint+0x8c>  // b.tcont
  9c:	mov	x20, #0x0                   	// #0
  a0:	mov	x21, #0x0                   	// #0
  a4:	b	140 <__fixuint+0x124>
  a8:	ldr	w0, [sp, #80]
  ac:	cmp	w0, #0x7f
  b0:	b.ls	c0 <__fixuint+0xa4>  // b.plast
  b4:	mov	x20, #0xffffffffffffffff    	// #-1
  b8:	mov	x21, #0xffffffffffffffff    	// #-1
  bc:	b	140 <__fixuint+0x124>
  c0:	ldr	w0, [sp, #80]
  c4:	cmp	w0, #0x16
  c8:	b.gt	f0 <__fixuint+0xd4>
  cc:	mov	w1, #0x17                  	// #23
  d0:	ldr	w0, [sp, #80]
  d4:	sub	w0, w1, w0
  d8:	ldr	w1, [sp, #76]
  dc:	lsr	w0, w1, w0
  e0:	mov	w0, w0
  e4:	mov	x20, x0
  e8:	mov	x21, #0x0                   	// #0
  ec:	b	140 <__fixuint+0x124>
  f0:	ldr	w0, [sp, #76]
  f4:	mov	w0, w0
  f8:	mov	x22, x0
  fc:	mov	x23, #0x0                   	// #0
 100:	ldr	w0, [sp, #80]
 104:	sub	w0, w0, #0x17
 108:	sub	w1, w0, #0x40
 10c:	lsl	x2, x22, x1
 110:	mov	x5, #0x0                   	// #0
 114:	lsr	x4, x22, #1
 118:	mov	w3, #0x3f                  	// #63
 11c:	sub	w3, w3, w0
 120:	lsr	x3, x4, x3
 124:	lsl	x21, x23, x0
 128:	orr	x21, x3, x21
 12c:	lsl	x20, x22, x0
 130:	cmp	w1, #0x0
 134:	csel	x21, x2, x21, ge  // ge = tcont
 138:	cmp	w1, #0x0
 13c:	csel	x20, x5, x20, ge  // ge = tcont
 140:	mov	x0, x20
 144:	mov	x1, x21
 148:	ldp	x20, x21, [sp, #16]
 14c:	ldp	x22, x23, [sp, #32]
 150:	ldp	x29, x30, [sp], #96
 154:	ret

0000000000000158 <__fixunssfti>:
 158:	stp	x29, x30, [sp, #-32]!
 15c:	mov	x29, sp
 160:	str	s0, [sp, #28]
 164:	ldr	s0, [sp, #28]
 168:	bl	1c <__fixuint>
 16c:	ldp	x29, x30, [sp], #32
 170:	ret

floatdidf.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__floatdidf>:
   0:	sub	sp, sp, #0x30
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <__floatdidf>
   c:	add	x0, x0, #0x0
  10:	ldr	d0, [x0]
  14:	str	d0, [sp, #24]
  18:	ldr	x0, [sp, #8]
  1c:	asr	x0, x0, #32
  20:	scvtf	d1, w0
  24:	adrp	x0, 0 <__floatdidf>
  28:	add	x0, x0, #0x0
  2c:	ldr	d0, [x0]
  30:	fmul	d0, d1, d0
  34:	str	d0, [sp, #40]
  38:	ldr	x1, [sp, #24]
  3c:	ldr	x0, [sp, #8]
  40:	and	x0, x0, #0xffffffff
  44:	orr	x0, x1, x0
  48:	str	x0, [sp, #24]
  4c:	adrp	x0, 0 <__floatdidf>
  50:	add	x0, x0, #0x0
  54:	ldr	d0, [x0]
  58:	ldr	d1, [sp, #40]
  5c:	fsub	d1, d1, d0
  60:	ldr	d0, [sp, #24]
  64:	fadd	d0, d1, d0
  68:	str	d0, [sp, #32]
  6c:	ldr	d0, [sp, #32]
  70:	add	sp, sp, #0x30
  74:	ret

floatdisf.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__floatdisf>:
   0:	sub	sp, sp, #0x30
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	cmp	x0, #0x0
  10:	b.ne	1c <__floatdisf+0x1c>  // b.any
  14:	movi	v0.2s, #0x0
  18:	b	1a8 <__floatdisf+0x1a8>
  1c:	mov	w0, #0x40                  	// #64
  20:	str	w0, [sp, #40]
  24:	ldr	w0, [sp, #40]
  28:	sub	w0, w0, #0x1
  2c:	ldr	x1, [sp, #8]
  30:	asr	x0, x1, x0
  34:	str	x0, [sp, #32]
  38:	ldr	x1, [sp, #8]
  3c:	ldr	x0, [sp, #32]
  40:	eor	x1, x1, x0
  44:	ldr	x0, [sp, #32]
  48:	sub	x0, x1, x0
  4c:	str	x0, [sp, #8]
  50:	ldr	x0, [sp, #8]
  54:	clz	x0, x0
  58:	mov	w1, w0
  5c:	ldr	w0, [sp, #40]
  60:	sub	w0, w0, w1
  64:	str	w0, [sp, #28]
  68:	ldr	w0, [sp, #28]
  6c:	sub	w0, w0, #0x1
  70:	str	w0, [sp, #44]
  74:	ldr	w0, [sp, #28]
  78:	cmp	w0, #0x18
  7c:	b.le	164 <__floatdisf+0x164>
  80:	ldr	w0, [sp, #28]
  84:	cmp	w0, #0x19
  88:	b.eq	9c <__floatdisf+0x9c>  // b.none
  8c:	ldr	w0, [sp, #28]
  90:	cmp	w0, #0x1a
  94:	b.eq	f8 <__floatdisf+0xf8>  // b.none
  98:	b	ac <__floatdisf+0xac>
  9c:	ldr	x0, [sp, #8]
  a0:	lsl	x0, x0, #1
  a4:	str	x0, [sp, #8]
  a8:	b	fc <__floatdisf+0xfc>
  ac:	ldr	x1, [sp, #8]
  b0:	ldr	w0, [sp, #28]
  b4:	sub	w0, w0, #0x1a
  b8:	lsr	x1, x1, x0
  bc:	ldr	w0, [sp, #28]
  c0:	ldr	w2, [sp, #40]
  c4:	sub	w0, w2, w0
  c8:	add	w0, w0, #0x1a
  cc:	mov	x2, #0xffffffffffffffff    	// #-1
  d0:	lsr	x2, x2, x0
  d4:	ldr	x0, [sp, #8]
  d8:	and	x0, x2, x0
  dc:	cmp	x0, #0x0
  e0:	cset	w0, ne  // ne = any
  e4:	and	w0, w0, #0xff
  e8:	and	x0, x0, #0xff
  ec:	orr	x0, x1, x0
  f0:	str	x0, [sp, #8]
  f4:	b	fc <__floatdisf+0xfc>
  f8:	nop
  fc:	ldr	x0, [sp, #8]
 100:	and	x0, x0, #0x4
 104:	cmp	x0, #0x0
 108:	cset	w0, ne  // ne = any
 10c:	and	w0, w0, #0xff
 110:	and	x0, x0, #0xff
 114:	ldr	x1, [sp, #8]
 118:	orr	x0, x1, x0
 11c:	str	x0, [sp, #8]
 120:	ldr	x0, [sp, #8]
 124:	add	x0, x0, #0x1
 128:	str	x0, [sp, #8]
 12c:	ldr	x0, [sp, #8]
 130:	asr	x0, x0, #2
 134:	str	x0, [sp, #8]
 138:	ldr	x0, [sp, #8]
 13c:	and	x0, x0, #0x1000000
 140:	cmp	x0, #0x0
 144:	b.eq	17c <__floatdisf+0x17c>  // b.none
 148:	ldr	x0, [sp, #8]
 14c:	asr	x0, x0, #1
 150:	str	x0, [sp, #8]
 154:	ldr	w0, [sp, #44]
 158:	add	w0, w0, #0x1
 15c:	str	w0, [sp, #44]
 160:	b	17c <__floatdisf+0x17c>
 164:	mov	w1, #0x18                  	// #24
 168:	ldr	w0, [sp, #28]
 16c:	sub	w0, w1, w0
 170:	ldr	x1, [sp, #8]
 174:	lsl	x0, x1, x0
 178:	str	x0, [sp, #8]
 17c:	ldr	x0, [sp, #32]
 180:	and	w0, w0, #0x80000000
 184:	ldr	w1, [sp, #44]
 188:	add	w1, w1, #0x7f
 18c:	lsl	w1, w1, #23
 190:	orr	w1, w0, w1
 194:	ldr	x0, [sp, #8]
 198:	and	w0, w0, #0x7fffff
 19c:	orr	w0, w1, w0
 1a0:	str	w0, [sp, #24]
 1a4:	ldr	s0, [sp, #24]
 1a8:	add	sp, sp, #0x30
 1ac:	ret

floatsidf.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fromRep>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	str	x0, [sp, #24]
  10:	ldr	d0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__floatsidf>:
  1c:	stp	x29, x30, [sp, #-64]!
  20:	mov	x29, sp
  24:	str	w0, [sp, #28]
  28:	mov	w0, #0x20                  	// #32
  2c:	str	w0, [sp, #52]
  30:	ldr	w0, [sp, #28]
  34:	cmp	w0, #0x0
  38:	b.ne	48 <__floatsidf+0x2c>  // b.any
  3c:	mov	x0, #0x0                   	// #0
  40:	bl	0 <fromRep>
  44:	b	d8 <__floatsidf+0xbc>
  48:	str	xzr, [sp, #56]
  4c:	ldr	w0, [sp, #28]
  50:	cmp	w0, #0x0
  54:	b.ge	6c <__floatsidf+0x50>  // b.tcont
  58:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
  5c:	str	x0, [sp, #56]
  60:	ldr	w0, [sp, #28]
  64:	neg	w0, w0
  68:	str	w0, [sp, #28]
  6c:	ldr	w0, [sp, #52]
  70:	sub	w1, w0, #0x1
  74:	ldr	w0, [sp, #28]
  78:	clz	w0, w0
  7c:	sub	w0, w1, w0
  80:	str	w0, [sp, #48]
  84:	mov	w1, #0x34                  	// #52
  88:	ldr	w0, [sp, #48]
  8c:	sub	w0, w1, w0
  90:	str	w0, [sp, #44]
  94:	ldr	w0, [sp, #28]
  98:	mov	w1, w0
  9c:	ldr	w0, [sp, #44]
  a0:	lsl	x0, x1, x0
  a4:	eor	x0, x0, #0x10000000000000
  a8:	str	x0, [sp, #32]
  ac:	ldr	w0, [sp, #48]
  b0:	add	w0, w0, #0x3ff
  b4:	sxtw	x0, w0
  b8:	lsl	x0, x0, #52
  bc:	ldr	x1, [sp, #32]
  c0:	add	x0, x1, x0
  c4:	str	x0, [sp, #32]
  c8:	ldr	x1, [sp, #32]
  cc:	ldr	x0, [sp, #56]
  d0:	orr	x0, x1, x0
  d4:	bl	0 <fromRep>
  d8:	ldp	x29, x30, [sp], #64
  dc:	ret

floatsisf.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fromRep>:
   0:	sub	sp, sp, #0x20
   4:	str	w0, [sp, #12]
   8:	ldr	w0, [sp, #12]
   c:	str	w0, [sp, #24]
  10:	ldr	s0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__floatsisf>:
  1c:	stp	x29, x30, [sp, #-64]!
  20:	mov	x29, sp
  24:	str	w0, [sp, #28]
  28:	mov	w0, #0x20                  	// #32
  2c:	str	w0, [sp, #52]
  30:	ldr	w0, [sp, #28]
  34:	cmp	w0, #0x0
  38:	b.ne	48 <__floatsisf+0x2c>  // b.any
  3c:	mov	w0, #0x0                   	// #0
  40:	bl	0 <fromRep>
  44:	b	154 <__floatsisf+0x138>
  48:	str	wzr, [sp, #60]
  4c:	ldr	w0, [sp, #28]
  50:	cmp	w0, #0x0
  54:	b.ge	6c <__floatsisf+0x50>  // b.tcont
  58:	mov	w0, #0x80000000            	// #-2147483648
  5c:	str	w0, [sp, #60]
  60:	ldr	w0, [sp, #28]
  64:	neg	w0, w0
  68:	str	w0, [sp, #28]
  6c:	ldr	w0, [sp, #52]
  70:	sub	w1, w0, #0x1
  74:	ldr	w0, [sp, #28]
  78:	clz	w0, w0
  7c:	sub	w0, w1, w0
  80:	str	w0, [sp, #48]
  84:	ldr	w0, [sp, #48]
  88:	cmp	w0, #0x17
  8c:	b.gt	b8 <__floatsisf+0x9c>
  90:	mov	w1, #0x17                  	// #23
  94:	ldr	w0, [sp, #48]
  98:	sub	w0, w1, w0
  9c:	str	w0, [sp, #36]
  a0:	ldr	w1, [sp, #28]
  a4:	ldr	w0, [sp, #36]
  a8:	lsl	w0, w1, w0
  ac:	eor	w0, w0, #0x800000
  b0:	str	w0, [sp, #56]
  b4:	b	12c <__floatsisf+0x110>
  b8:	ldr	w0, [sp, #48]
  bc:	sub	w0, w0, #0x17
  c0:	str	w0, [sp, #44]
  c4:	ldr	w1, [sp, #28]
  c8:	ldr	w0, [sp, #44]
  cc:	lsr	w0, w1, w0
  d0:	eor	w0, w0, #0x800000
  d4:	str	w0, [sp, #56]
  d8:	ldr	w1, [sp, #28]
  dc:	ldr	w0, [sp, #44]
  e0:	mov	w2, #0x20                  	// #32
  e4:	sub	w0, w2, w0
  e8:	lsl	w0, w1, w0
  ec:	str	w0, [sp, #40]
  f0:	ldr	w1, [sp, #40]
  f4:	mov	w0, #0x80000000            	// #-2147483648
  f8:	cmp	w1, w0
  fc:	b.ls	10c <__floatsisf+0xf0>  // b.plast
 100:	ldr	w0, [sp, #56]
 104:	add	w0, w0, #0x1
 108:	str	w0, [sp, #56]
 10c:	ldr	w1, [sp, #40]
 110:	mov	w0, #0x80000000            	// #-2147483648
 114:	cmp	w1, w0
 118:	b.ne	12c <__floatsisf+0x110>  // b.any
 11c:	ldr	w0, [sp, #56]
 120:	add	w0, w0, #0x1
 124:	and	w0, w0, #0xfffffffe
 128:	str	w0, [sp, #56]
 12c:	ldr	w0, [sp, #48]
 130:	add	w0, w0, #0x7f
 134:	lsl	w0, w0, #23
 138:	ldr	w1, [sp, #56]
 13c:	add	w0, w1, w0
 140:	str	w0, [sp, #56]
 144:	ldr	w1, [sp, #56]
 148:	ldr	w0, [sp, #60]
 14c:	orr	w0, w1, w0
 150:	bl	0 <fromRep>
 154:	ldp	x29, x30, [sp], #64
 158:	ret

floattidf.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__floattidf>:
   0:	stp	x29, x30, [sp, #-240]!
   4:	mov	x29, sp
   8:	stp	x20, x21, [sp, #16]
   c:	stp	x22, x23, [sp, #32]
  10:	stp	x24, x25, [sp, #48]
  14:	stp	x26, x27, [sp, #64]
  18:	stp	x0, x1, [sp, #176]
  1c:	ldr	x0, [sp, #176]
  20:	ldr	x1, [sp, #184]
  24:	orr	x0, x0, x1
  28:	cmp	x0, #0x0
  2c:	b.ne	38 <__floattidf+0x38>  // b.any
  30:	movi	d0, #0x0
  34:	b	410 <__floattidf+0x410>
  38:	mov	w0, #0x80                  	// #128
  3c:	str	w0, [sp, #232]
  40:	ldr	w0, [sp, #232]
  44:	sub	w0, w0, #0x1
  48:	sub	w1, w0, #0x40
  4c:	ldr	x6, [sp, #184]
  50:	asr	x7, x6, x1
  54:	ldr	x6, [sp, #184]
  58:	asr	x6, x6, #63
  5c:	ldr	x8, [sp, #184]
  60:	lsl	x9, x8, #1
  64:	mov	w8, #0x3f                  	// #63
  68:	sub	w8, w8, w0
  6c:	lsl	x8, x9, x8
  70:	ldr	x9, [sp, #176]
  74:	lsr	x9, x9, x0
  78:	orr	x8, x9, x8
  7c:	str	x8, [sp, #208]
  80:	ldr	x8, [sp, #184]
  84:	asr	x0, x8, x0
  88:	str	x0, [sp, #216]
  8c:	ldr	x0, [sp, #208]
  90:	cmp	w1, #0x0
  94:	csel	x0, x0, x7, lt  // lt = tstop
  98:	str	x0, [sp, #208]
  9c:	ldr	x0, [sp, #216]
  a0:	cmp	w1, #0x0
  a4:	csel	x0, x0, x6, lt  // lt = tstop
  a8:	str	x0, [sp, #216]
  ac:	ldr	x1, [sp, #176]
  b0:	ldr	x0, [sp, #208]
  b4:	eor	x2, x1, x0
  b8:	ldr	x1, [sp, #184]
  bc:	ldr	x0, [sp, #216]
  c0:	eor	x3, x1, x0
  c4:	ldp	x0, x1, [sp, #208]
  c8:	subs	x6, x2, x0
  cc:	sbc	x0, x3, x1
  d0:	mov	x4, x6
  d4:	mov	x5, x0
  d8:	stp	x4, x5, [sp, #176]
  dc:	ldp	x0, x1, [sp, #176]
  e0:	bl	0 <__clzti2>
  e4:	mov	w1, w0
  e8:	ldr	w0, [sp, #232]
  ec:	sub	w0, w0, w1
  f0:	str	w0, [sp, #204]
  f4:	ldr	w0, [sp, #204]
  f8:	sub	w0, w0, #0x1
  fc:	str	w0, [sp, #236]
 100:	ldr	w0, [sp, #204]
 104:	cmp	w0, #0x35
 108:	b.le	354 <__floattidf+0x354>
 10c:	ldr	w0, [sp, #204]
 110:	cmp	w0, #0x36
 114:	b.eq	128 <__floattidf+0x128>  // b.none
 118:	ldr	w0, [sp, #204]
 11c:	cmp	w0, #0x37
 120:	b.eq	250 <__floattidf+0x250>  // b.none
 124:	b	150 <__floattidf+0x150>
 128:	ldr	x0, [sp, #176]
 12c:	lsr	x0, x0, #63
 130:	ldr	x1, [sp, #184]
 134:	lsl	x1, x1, #1
 138:	orr	x0, x1, x0
 13c:	str	x0, [sp, #184]
 140:	ldr	x0, [sp, #176]
 144:	lsl	x0, x0, #1
 148:	str	x0, [sp, #176]
 14c:	b	254 <__floattidf+0x254>
 150:	ldp	x0, x1, [sp, #176]
 154:	ldr	w2, [sp, #204]
 158:	sub	w2, w2, #0x37
 15c:	sub	w3, w2, #0x40
 160:	lsr	x4, x1, x3
 164:	mov	x7, #0x0                   	// #0
 168:	lsl	x6, x1, #1
 16c:	mov	w5, #0x3f                  	// #63
 170:	sub	w5, w5, w2
 174:	lsl	x5, x6, x5
 178:	lsr	x20, x0, x2
 17c:	orr	x20, x5, x20
 180:	lsr	x21, x1, x2
 184:	cmp	w3, #0x0
 188:	csel	x20, x4, x20, ge  // ge = tcont
 18c:	cmp	w3, #0x0
 190:	csel	x21, x7, x21, ge  // ge = tcont
 194:	ldr	w0, [sp, #204]
 198:	ldr	w1, [sp, #232]
 19c:	sub	w0, w1, w0
 1a0:	add	w0, w0, #0x37
 1a4:	sub	w1, w0, #0x40
 1a8:	mov	x2, #0xffffffffffffffff    	// #-1
 1ac:	lsr	x2, x2, x1
 1b0:	mov	x5, #0x0                   	// #0
 1b4:	mov	x3, #0xffffffffffffffff    	// #-1
 1b8:	lsl	x4, x3, #1
 1bc:	mov	w3, #0x3f                  	// #63
 1c0:	sub	w3, w3, w0
 1c4:	lsl	x3, x4, x3
 1c8:	mov	x4, #0xffffffffffffffff    	// #-1
 1cc:	lsr	x22, x4, x0
 1d0:	orr	x22, x3, x22
 1d4:	mov	x3, #0xffffffffffffffff    	// #-1
 1d8:	lsr	x23, x3, x0
 1dc:	cmp	w1, #0x0
 1e0:	csel	x22, x2, x22, ge  // ge = tcont
 1e4:	cmp	w1, #0x0
 1e8:	csel	x23, x5, x23, ge  // ge = tcont
 1ec:	ldp	x0, x1, [sp, #176]
 1f0:	and	x2, x22, x0
 1f4:	str	x2, [sp, #80]
 1f8:	and	x0, x23, x1
 1fc:	str	x0, [sp, #88]
 200:	ldp	x0, x1, [sp, #80]
 204:	mov	x2, x0
 208:	mov	x0, x1
 20c:	orr	x0, x2, x0
 210:	cmp	x0, #0x0
 214:	cset	w0, ne  // ne = any
 218:	and	w0, w0, #0xff
 21c:	and	x0, x0, #0xff
 220:	str	x0, [sp, #96]
 224:	str	xzr, [sp, #104]
 228:	ldp	x0, x1, [sp, #96]
 22c:	mov	x2, x0
 230:	orr	x2, x20, x2
 234:	str	x2, [sp, #112]
 238:	mov	x0, x1
 23c:	orr	x0, x21, x0
 240:	str	x0, [sp, #120]
 244:	ldp	x0, x1, [sp, #112]
 248:	stp	x0, x1, [sp, #176]
 24c:	b	254 <__floattidf+0x254>
 250:	nop
 254:	ldr	x0, [sp, #176]
 258:	and	x26, x0, #0x4
 25c:	ldr	x0, [sp, #184]
 260:	mov	x1, #0x0                   	// #0
 264:	and	x27, x0, x1
 268:	orr	x0, x26, x27
 26c:	cmp	x0, #0x0
 270:	cset	w0, ne  // ne = any
 274:	and	w0, w0, #0xff
 278:	and	x0, x0, #0xff
 27c:	str	x0, [sp, #128]
 280:	str	xzr, [sp, #136]
 284:	ldr	x0, [sp, #176]
 288:	ldp	x2, x3, [sp, #128]
 28c:	mov	x1, x2
 290:	orr	x0, x0, x1
 294:	str	x0, [sp, #176]
 298:	ldr	x0, [sp, #184]
 29c:	mov	x1, x3
 2a0:	orr	x0, x0, x1
 2a4:	str	x0, [sp, #184]
 2a8:	ldp	x0, x1, [sp, #176]
 2ac:	mov	x2, #0x1                   	// #1
 2b0:	adds	x2, x0, x2
 2b4:	mov	x3, #0x0                   	// #0
 2b8:	adc	x0, x1, x3
 2bc:	str	x2, [sp, #160]
 2c0:	str	x0, [sp, #168]
 2c4:	ldp	x0, x1, [sp, #160]
 2c8:	stp	x0, x1, [sp, #176]
 2cc:	ldr	x0, [sp, #184]
 2d0:	lsl	x0, x0, #62
 2d4:	ldr	x1, [sp, #176]
 2d8:	lsr	x1, x1, #2
 2dc:	orr	x0, x1, x0
 2e0:	str	x0, [sp, #176]
 2e4:	ldr	x0, [sp, #184]
 2e8:	asr	x0, x0, #2
 2ec:	str	x0, [sp, #184]
 2f0:	ldp	x0, x1, [sp, #176]
 2f4:	and	x2, x0, #0x20000000000000
 2f8:	str	x2, [sp, #144]
 2fc:	mov	x2, #0x0                   	// #0
 300:	and	x0, x1, x2
 304:	str	x0, [sp, #152]
 308:	ldp	x2, x3, [sp, #144]
 30c:	mov	x0, x2
 310:	mov	x1, x3
 314:	orr	x0, x0, x1
 318:	cmp	x0, #0x0
 31c:	b.eq	3c0 <__floattidf+0x3c0>  // b.none
 320:	ldr	x0, [sp, #184]
 324:	lsl	x0, x0, #63
 328:	ldr	x1, [sp, #176]
 32c:	lsr	x1, x1, #1
 330:	orr	x0, x1, x0
 334:	str	x0, [sp, #176]
 338:	ldr	x0, [sp, #184]
 33c:	asr	x0, x0, #1
 340:	str	x0, [sp, #184]
 344:	ldr	w0, [sp, #236]
 348:	add	w0, w0, #0x1
 34c:	str	w0, [sp, #236]
 350:	b	3c0 <__floattidf+0x3c0>
 354:	mov	w1, #0x35                  	// #53
 358:	ldr	w0, [sp, #204]
 35c:	sub	w0, w1, w0
 360:	sub	w1, w0, #0x40
 364:	ldr	x2, [sp, #176]
 368:	lsl	x2, x2, x1
 36c:	mov	x5, #0x0                   	// #0
 370:	ldr	x3, [sp, #176]
 374:	lsr	x4, x3, #1
 378:	mov	w3, #0x3f                  	// #63
 37c:	sub	w3, w3, w0
 380:	lsr	x3, x4, x3
 384:	ldr	x4, [sp, #184]
 388:	lsl	x4, x4, x0
 38c:	orr	x3, x4, x3
 390:	str	x3, [sp, #184]
 394:	ldr	x3, [sp, #176]
 398:	lsl	x0, x3, x0
 39c:	str	x0, [sp, #176]
 3a0:	ldr	x0, [sp, #184]
 3a4:	cmp	w1, #0x0
 3a8:	csel	x0, x0, x2, lt  // lt = tstop
 3ac:	str	x0, [sp, #184]
 3b0:	ldr	x0, [sp, #176]
 3b4:	cmp	w1, #0x0
 3b8:	csel	x0, x0, x5, lt  // lt = tstop
 3bc:	str	x0, [sp, #176]
 3c0:	ldr	x0, [sp, #208]
 3c4:	and	w0, w0, #0x80000000
 3c8:	ldr	w1, [sp, #236]
 3cc:	add	w1, w1, #0x3ff
 3d0:	lsl	w1, w1, #20
 3d4:	orr	w1, w0, w1
 3d8:	ldr	x0, [sp, #184]
 3dc:	lsl	x0, x0, #32
 3e0:	ldr	x2, [sp, #176]
 3e4:	lsr	x24, x2, #32
 3e8:	orr	x24, x0, x24
 3ec:	ldr	x0, [sp, #184]
 3f0:	asr	x25, x0, #32
 3f4:	mov	w0, w24
 3f8:	and	w0, w0, #0xfffff
 3fc:	orr	w0, w1, w0
 400:	str	w0, [sp, #196]
 404:	ldr	x0, [sp, #176]
 408:	str	w0, [sp, #192]
 40c:	ldr	d0, [sp, #192]
 410:	ldp	x20, x21, [sp, #16]
 414:	ldp	x22, x23, [sp, #32]
 418:	ldp	x24, x25, [sp, #48]
 41c:	ldp	x26, x27, [sp, #64]
 420:	ldp	x29, x30, [sp], #240
 424:	ret

floattisf.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__floattisf>:
   0:	stp	x29, x30, [sp, #-224]!
   4:	mov	x29, sp
   8:	stp	x20, x21, [sp, #16]
   c:	stp	x22, x23, [sp, #32]
  10:	stp	x24, x25, [sp, #48]
  14:	stp	x26, x27, [sp, #64]
  18:	stp	x0, x1, [sp, #160]
  1c:	ldr	x0, [sp, #160]
  20:	ldr	x1, [sp, #168]
  24:	orr	x0, x0, x1
  28:	cmp	x0, #0x0
  2c:	b.ne	38 <__floattisf+0x38>  // b.any
  30:	movi	v0.2s, #0x0
  34:	b	3d8 <__floattisf+0x3d8>
  38:	mov	w0, #0x80                  	// #128
  3c:	str	w0, [sp, #216]
  40:	ldr	w0, [sp, #216]
  44:	sub	w0, w0, #0x1
  48:	sub	w1, w0, #0x40
  4c:	ldr	x6, [sp, #168]
  50:	asr	x7, x6, x1
  54:	ldr	x6, [sp, #168]
  58:	asr	x6, x6, #63
  5c:	ldr	x8, [sp, #168]
  60:	lsl	x9, x8, #1
  64:	mov	w8, #0x3f                  	// #63
  68:	sub	w8, w8, w0
  6c:	lsl	x8, x9, x8
  70:	ldr	x9, [sp, #160]
  74:	lsr	x9, x9, x0
  78:	orr	x8, x9, x8
  7c:	str	x8, [sp, #192]
  80:	ldr	x8, [sp, #168]
  84:	asr	x0, x8, x0
  88:	str	x0, [sp, #200]
  8c:	ldr	x0, [sp, #192]
  90:	cmp	w1, #0x0
  94:	csel	x0, x0, x7, lt  // lt = tstop
  98:	str	x0, [sp, #192]
  9c:	ldr	x0, [sp, #200]
  a0:	cmp	w1, #0x0
  a4:	csel	x0, x0, x6, lt  // lt = tstop
  a8:	str	x0, [sp, #200]
  ac:	ldr	x1, [sp, #160]
  b0:	ldr	x0, [sp, #192]
  b4:	eor	x2, x1, x0
  b8:	ldr	x1, [sp, #168]
  bc:	ldr	x0, [sp, #200]
  c0:	eor	x3, x1, x0
  c4:	ldp	x0, x1, [sp, #192]
  c8:	subs	x6, x2, x0
  cc:	sbc	x0, x3, x1
  d0:	mov	x4, x6
  d4:	mov	x5, x0
  d8:	stp	x4, x5, [sp, #160]
  dc:	ldp	x0, x1, [sp, #160]
  e0:	bl	0 <__clzti2>
  e4:	mov	w1, w0
  e8:	ldr	w0, [sp, #216]
  ec:	sub	w0, w0, w1
  f0:	str	w0, [sp, #188]
  f4:	ldr	w0, [sp, #188]
  f8:	sub	w0, w0, #0x1
  fc:	str	w0, [sp, #220]
 100:	ldr	w0, [sp, #188]
 104:	cmp	w0, #0x18
 108:	b.le	340 <__floattisf+0x340>
 10c:	ldr	w0, [sp, #188]
 110:	cmp	w0, #0x19
 114:	b.eq	128 <__floattisf+0x128>  // b.none
 118:	ldr	w0, [sp, #188]
 11c:	cmp	w0, #0x1a
 120:	b.eq	23c <__floattisf+0x23c>  // b.none
 124:	b	150 <__floattisf+0x150>
 128:	ldr	x0, [sp, #160]
 12c:	lsr	x0, x0, #63
 130:	ldr	x1, [sp, #168]
 134:	lsl	x1, x1, #1
 138:	orr	x0, x1, x0
 13c:	str	x0, [sp, #168]
 140:	ldr	x0, [sp, #160]
 144:	lsl	x0, x0, #1
 148:	str	x0, [sp, #160]
 14c:	b	240 <__floattisf+0x240>
 150:	ldp	x0, x1, [sp, #160]
 154:	ldr	w2, [sp, #188]
 158:	sub	w2, w2, #0x1a
 15c:	sub	w3, w2, #0x40
 160:	lsr	x4, x1, x3
 164:	mov	x7, #0x0                   	// #0
 168:	lsl	x6, x1, #1
 16c:	mov	w5, #0x3f                  	// #63
 170:	sub	w5, w5, w2
 174:	lsl	x5, x6, x5
 178:	lsr	x20, x0, x2
 17c:	orr	x20, x5, x20
 180:	lsr	x21, x1, x2
 184:	cmp	w3, #0x0
 188:	csel	x20, x4, x20, ge  // ge = tcont
 18c:	cmp	w3, #0x0
 190:	csel	x21, x7, x21, ge  // ge = tcont
 194:	ldr	w0, [sp, #188]
 198:	ldr	w1, [sp, #216]
 19c:	sub	w0, w1, w0
 1a0:	add	w0, w0, #0x1a
 1a4:	sub	w1, w0, #0x40
 1a8:	mov	x2, #0xffffffffffffffff    	// #-1
 1ac:	lsr	x2, x2, x1
 1b0:	mov	x5, #0x0                   	// #0
 1b4:	mov	x3, #0xffffffffffffffff    	// #-1
 1b8:	lsl	x4, x3, #1
 1bc:	mov	w3, #0x3f                  	// #63
 1c0:	sub	w3, w3, w0
 1c4:	lsl	x3, x4, x3
 1c8:	mov	x4, #0xffffffffffffffff    	// #-1
 1cc:	lsr	x22, x4, x0
 1d0:	orr	x22, x3, x22
 1d4:	mov	x3, #0xffffffffffffffff    	// #-1
 1d8:	lsr	x23, x3, x0
 1dc:	cmp	w1, #0x0
 1e0:	csel	x22, x2, x22, ge  // ge = tcont
 1e4:	cmp	w1, #0x0
 1e8:	csel	x23, x5, x23, ge  // ge = tcont
 1ec:	ldp	x0, x1, [sp, #160]
 1f0:	and	x26, x22, x0
 1f4:	and	x27, x23, x1
 1f8:	orr	x0, x26, x27
 1fc:	cmp	x0, #0x0
 200:	cset	w0, ne  // ne = any
 204:	and	w0, w0, #0xff
 208:	and	x0, x0, #0xff
 20c:	str	x0, [sp, #80]
 210:	str	xzr, [sp, #88]
 214:	ldp	x0, x1, [sp, #80]
 218:	mov	x2, x0
 21c:	orr	x2, x20, x2
 220:	str	x2, [sp, #96]
 224:	mov	x0, x1
 228:	orr	x0, x21, x0
 22c:	str	x0, [sp, #104]
 230:	ldp	x0, x1, [sp, #96]
 234:	stp	x0, x1, [sp, #160]
 238:	b	240 <__floattisf+0x240>
 23c:	nop
 240:	ldr	x0, [sp, #160]
 244:	and	x24, x0, #0x4
 248:	ldr	x0, [sp, #168]
 24c:	mov	x1, #0x0                   	// #0
 250:	and	x25, x0, x1
 254:	orr	x0, x24, x25
 258:	cmp	x0, #0x0
 25c:	cset	w0, ne  // ne = any
 260:	and	w0, w0, #0xff
 264:	and	x0, x0, #0xff
 268:	str	x0, [sp, #112]
 26c:	str	xzr, [sp, #120]
 270:	ldr	x0, [sp, #160]
 274:	ldp	x2, x3, [sp, #112]
 278:	mov	x1, x2
 27c:	orr	x0, x0, x1
 280:	str	x0, [sp, #160]
 284:	ldr	x0, [sp, #168]
 288:	mov	x1, x3
 28c:	orr	x0, x0, x1
 290:	str	x0, [sp, #168]
 294:	ldp	x0, x1, [sp, #160]
 298:	mov	x2, #0x1                   	// #1
 29c:	adds	x2, x0, x2
 2a0:	mov	x3, #0x0                   	// #0
 2a4:	adc	x0, x1, x3
 2a8:	str	x2, [sp, #144]
 2ac:	str	x0, [sp, #152]
 2b0:	ldp	x0, x1, [sp, #144]
 2b4:	stp	x0, x1, [sp, #160]
 2b8:	ldr	x0, [sp, #168]
 2bc:	lsl	x0, x0, #62
 2c0:	ldr	x1, [sp, #160]
 2c4:	lsr	x1, x1, #2
 2c8:	orr	x0, x1, x0
 2cc:	str	x0, [sp, #160]
 2d0:	ldr	x0, [sp, #168]
 2d4:	asr	x0, x0, #2
 2d8:	str	x0, [sp, #168]
 2dc:	ldp	x0, x1, [sp, #160]
 2e0:	and	x2, x0, #0x1000000
 2e4:	str	x2, [sp, #128]
 2e8:	mov	x2, #0x0                   	// #0
 2ec:	and	x0, x1, x2
 2f0:	str	x0, [sp, #136]
 2f4:	ldp	x2, x3, [sp, #128]
 2f8:	mov	x0, x2
 2fc:	mov	x1, x3
 300:	orr	x0, x0, x1
 304:	cmp	x0, #0x0
 308:	b.eq	3ac <__floattisf+0x3ac>  // b.none
 30c:	ldr	x0, [sp, #168]
 310:	lsl	x0, x0, #63
 314:	ldr	x1, [sp, #160]
 318:	lsr	x1, x1, #1
 31c:	orr	x0, x1, x0
 320:	str	x0, [sp, #160]
 324:	ldr	x0, [sp, #168]
 328:	asr	x0, x0, #1
 32c:	str	x0, [sp, #168]
 330:	ldr	w0, [sp, #220]
 334:	add	w0, w0, #0x1
 338:	str	w0, [sp, #220]
 33c:	b	3ac <__floattisf+0x3ac>
 340:	mov	w1, #0x18                  	// #24
 344:	ldr	w0, [sp, #188]
 348:	sub	w0, w1, w0
 34c:	sub	w1, w0, #0x40
 350:	ldr	x2, [sp, #160]
 354:	lsl	x2, x2, x1
 358:	mov	x5, #0x0                   	// #0
 35c:	ldr	x3, [sp, #160]
 360:	lsr	x4, x3, #1
 364:	mov	w3, #0x3f                  	// #63
 368:	sub	w3, w3, w0
 36c:	lsr	x3, x4, x3
 370:	ldr	x4, [sp, #168]
 374:	lsl	x4, x4, x0
 378:	orr	x3, x4, x3
 37c:	str	x3, [sp, #168]
 380:	ldr	x3, [sp, #160]
 384:	lsl	x0, x3, x0
 388:	str	x0, [sp, #160]
 38c:	ldr	x0, [sp, #168]
 390:	cmp	w1, #0x0
 394:	csel	x0, x0, x2, lt  // lt = tstop
 398:	str	x0, [sp, #168]
 39c:	ldr	x0, [sp, #160]
 3a0:	cmp	w1, #0x0
 3a4:	csel	x0, x0, x5, lt  // lt = tstop
 3a8:	str	x0, [sp, #160]
 3ac:	ldr	x0, [sp, #192]
 3b0:	and	w0, w0, #0x80000000
 3b4:	ldr	w1, [sp, #220]
 3b8:	add	w1, w1, #0x7f
 3bc:	lsl	w1, w1, #23
 3c0:	orr	w1, w0, w1
 3c4:	ldr	x0, [sp, #160]
 3c8:	and	w0, w0, #0x7fffff
 3cc:	orr	w0, w1, w0
 3d0:	str	w0, [sp, #184]
 3d4:	ldr	s0, [sp, #184]
 3d8:	ldp	x20, x21, [sp, #16]
 3dc:	ldp	x22, x23, [sp, #32]
 3e0:	ldp	x24, x25, [sp, #48]
 3e4:	ldp	x26, x27, [sp, #64]
 3e8:	ldp	x29, x30, [sp], #224
 3ec:	ret

floatundidf.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__floatundidf>:
   0:	sub	sp, sp, #0x30
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <__floatundidf>
   c:	add	x0, x0, #0x0
  10:	ldr	d0, [x0]
  14:	str	d0, [sp, #32]
  18:	adrp	x0, 0 <__floatundidf>
  1c:	add	x0, x0, #0x0
  20:	ldr	d0, [x0]
  24:	str	d0, [sp, #24]
  28:	ldr	x1, [sp, #32]
  2c:	ldr	x0, [sp, #8]
  30:	lsr	x0, x0, #32
  34:	orr	x0, x1, x0
  38:	str	x0, [sp, #32]
  3c:	ldr	x1, [sp, #24]
  40:	ldr	x0, [sp, #8]
  44:	and	x0, x0, #0xffffffff
  48:	orr	x0, x1, x0
  4c:	str	x0, [sp, #24]
  50:	ldr	d1, [sp, #32]
  54:	adrp	x0, 0 <__floatundidf>
  58:	add	x0, x0, #0x0
  5c:	ldr	d0, [x0]
  60:	fsub	d1, d1, d0
  64:	ldr	d0, [sp, #24]
  68:	fadd	d0, d1, d0
  6c:	str	d0, [sp, #40]
  70:	ldr	d0, [sp, #40]
  74:	add	sp, sp, #0x30
  78:	ret

floatundisf.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__floatundisf>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	cmp	x0, #0x0
  10:	b.ne	1c <__floatundisf+0x1c>  // b.any
  14:	movi	v0.2s, #0x0
  18:	b	174 <__floatundisf+0x174>
  1c:	mov	w0, #0x40                  	// #64
  20:	str	w0, [sp, #24]
  24:	ldr	x0, [sp, #8]
  28:	clz	x0, x0
  2c:	mov	w1, w0
  30:	ldr	w0, [sp, #24]
  34:	sub	w0, w0, w1
  38:	str	w0, [sp, #20]
  3c:	ldr	w0, [sp, #20]
  40:	sub	w0, w0, #0x1
  44:	str	w0, [sp, #28]
  48:	ldr	w0, [sp, #20]
  4c:	cmp	w0, #0x18
  50:	b.le	138 <__floatundisf+0x138>
  54:	ldr	w0, [sp, #20]
  58:	cmp	w0, #0x19
  5c:	b.eq	70 <__floatundisf+0x70>  // b.none
  60:	ldr	w0, [sp, #20]
  64:	cmp	w0, #0x1a
  68:	b.eq	cc <__floatundisf+0xcc>  // b.none
  6c:	b	80 <__floatundisf+0x80>
  70:	ldr	x0, [sp, #8]
  74:	lsl	x0, x0, #1
  78:	str	x0, [sp, #8]
  7c:	b	d0 <__floatundisf+0xd0>
  80:	ldr	w0, [sp, #20]
  84:	sub	w0, w0, #0x1a
  88:	ldr	x1, [sp, #8]
  8c:	lsr	x1, x1, x0
  90:	ldr	w0, [sp, #20]
  94:	ldr	w2, [sp, #24]
  98:	sub	w0, w2, w0
  9c:	add	w0, w0, #0x1a
  a0:	mov	x2, #0xffffffffffffffff    	// #-1
  a4:	lsr	x2, x2, x0
  a8:	ldr	x0, [sp, #8]
  ac:	and	x0, x2, x0
  b0:	cmp	x0, #0x0
  b4:	cset	w0, ne  // ne = any
  b8:	and	w0, w0, #0xff
  bc:	and	x0, x0, #0xff
  c0:	orr	x0, x1, x0
  c4:	str	x0, [sp, #8]
  c8:	b	d0 <__floatundisf+0xd0>
  cc:	nop
  d0:	ldr	x0, [sp, #8]
  d4:	and	x0, x0, #0x4
  d8:	cmp	x0, #0x0
  dc:	cset	w0, ne  // ne = any
  e0:	and	w0, w0, #0xff
  e4:	and	x0, x0, #0xff
  e8:	ldr	x1, [sp, #8]
  ec:	orr	x0, x1, x0
  f0:	str	x0, [sp, #8]
  f4:	ldr	x0, [sp, #8]
  f8:	add	x0, x0, #0x1
  fc:	str	x0, [sp, #8]
 100:	ldr	x0, [sp, #8]
 104:	lsr	x0, x0, #2
 108:	str	x0, [sp, #8]
 10c:	ldr	x0, [sp, #8]
 110:	and	x0, x0, #0x1000000
 114:	cmp	x0, #0x0
 118:	b.eq	150 <__floatundisf+0x150>  // b.none
 11c:	ldr	x0, [sp, #8]
 120:	lsr	x0, x0, #1
 124:	str	x0, [sp, #8]
 128:	ldr	w0, [sp, #28]
 12c:	add	w0, w0, #0x1
 130:	str	w0, [sp, #28]
 134:	b	150 <__floatundisf+0x150>
 138:	mov	w1, #0x18                  	// #24
 13c:	ldr	w0, [sp, #20]
 140:	sub	w0, w1, w0
 144:	ldr	x1, [sp, #8]
 148:	lsl	x0, x1, x0
 14c:	str	x0, [sp, #8]
 150:	ldr	w0, [sp, #28]
 154:	add	w0, w0, #0x7f
 158:	lsl	w0, w0, #23
 15c:	mov	w1, w0
 160:	ldr	x0, [sp, #8]
 164:	and	w0, w0, #0x7fffff
 168:	orr	w0, w1, w0
 16c:	str	w0, [sp, #16]
 170:	ldr	s0, [sp, #16]
 174:	add	sp, sp, #0x20
 178:	ret

floatunsidf.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fromRep>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	str	x0, [sp, #24]
  10:	ldr	d0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__floatunsidf>:
  1c:	stp	x29, x30, [sp, #-64]!
  20:	mov	x29, sp
  24:	str	w0, [sp, #28]
  28:	mov	w0, #0x20                  	// #32
  2c:	str	w0, [sp, #60]
  30:	ldr	w0, [sp, #28]
  34:	cmp	w0, #0x0
  38:	b.ne	48 <__floatunsidf+0x2c>  // b.any
  3c:	mov	x0, #0x0                   	// #0
  40:	bl	0 <fromRep>
  44:	b	a8 <__floatunsidf+0x8c>
  48:	ldr	w0, [sp, #60]
  4c:	sub	w1, w0, #0x1
  50:	ldr	w0, [sp, #28]
  54:	clz	w0, w0
  58:	sub	w0, w1, w0
  5c:	str	w0, [sp, #56]
  60:	mov	w1, #0x34                  	// #52
  64:	ldr	w0, [sp, #56]
  68:	sub	w0, w1, w0
  6c:	str	w0, [sp, #52]
  70:	ldr	w1, [sp, #28]
  74:	ldr	w0, [sp, #52]
  78:	lsl	x0, x1, x0
  7c:	eor	x0, x0, #0x10000000000000
  80:	str	x0, [sp, #40]
  84:	ldr	w0, [sp, #56]
  88:	add	w0, w0, #0x3ff
  8c:	sxtw	x0, w0
  90:	lsl	x0, x0, #52
  94:	ldr	x1, [sp, #40]
  98:	add	x0, x1, x0
  9c:	str	x0, [sp, #40]
  a0:	ldr	x0, [sp, #40]
  a4:	bl	0 <fromRep>
  a8:	ldp	x29, x30, [sp], #64
  ac:	ret

floatunsisf.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fromRep>:
   0:	sub	sp, sp, #0x20
   4:	str	w0, [sp, #12]
   8:	ldr	w0, [sp, #12]
   c:	str	w0, [sp, #24]
  10:	ldr	s0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <__floatunsisf>:
  1c:	stp	x29, x30, [sp, #-64]!
  20:	mov	x29, sp
  24:	str	w0, [sp, #28]
  28:	mov	w0, #0x20                  	// #32
  2c:	str	w0, [sp, #56]
  30:	ldr	w0, [sp, #28]
  34:	cmp	w0, #0x0
  38:	b.ne	48 <__floatunsisf+0x2c>  // b.any
  3c:	mov	w0, #0x0                   	// #0
  40:	bl	0 <fromRep>
  44:	b	128 <__floatunsisf+0x10c>
  48:	ldr	w0, [sp, #56]
  4c:	sub	w1, w0, #0x1
  50:	ldr	w0, [sp, #28]
  54:	clz	w0, w0
  58:	sub	w0, w1, w0
  5c:	str	w0, [sp, #52]
  60:	ldr	w0, [sp, #52]
  64:	cmp	w0, #0x17
  68:	b.gt	94 <__floatunsisf+0x78>
  6c:	mov	w1, #0x17                  	// #23
  70:	ldr	w0, [sp, #52]
  74:	sub	w0, w1, w0
  78:	str	w0, [sp, #40]
  7c:	ldr	w0, [sp, #40]
  80:	ldr	w1, [sp, #28]
  84:	lsl	w0, w1, w0
  88:	eor	w0, w0, #0x800000
  8c:	str	w0, [sp, #60]
  90:	b	108 <__floatunsisf+0xec>
  94:	ldr	w0, [sp, #52]
  98:	sub	w0, w0, #0x17
  9c:	str	w0, [sp, #48]
  a0:	ldr	w0, [sp, #48]
  a4:	ldr	w1, [sp, #28]
  a8:	lsr	w0, w1, w0
  ac:	eor	w0, w0, #0x800000
  b0:	str	w0, [sp, #60]
  b4:	ldr	w0, [sp, #48]
  b8:	mov	w1, #0x20                  	// #32
  bc:	sub	w0, w1, w0
  c0:	ldr	w1, [sp, #28]
  c4:	lsl	w0, w1, w0
  c8:	str	w0, [sp, #44]
  cc:	ldr	w1, [sp, #44]
  d0:	mov	w0, #0x80000000            	// #-2147483648
  d4:	cmp	w1, w0
  d8:	b.ls	e8 <__floatunsisf+0xcc>  // b.plast
  dc:	ldr	w0, [sp, #60]
  e0:	add	w0, w0, #0x1
  e4:	str	w0, [sp, #60]
  e8:	ldr	w1, [sp, #44]
  ec:	mov	w0, #0x80000000            	// #-2147483648
  f0:	cmp	w1, w0
  f4:	b.ne	108 <__floatunsisf+0xec>  // b.any
  f8:	ldr	w0, [sp, #60]
  fc:	add	w0, w0, #0x1
 100:	and	w0, w0, #0xfffffffe
 104:	str	w0, [sp, #60]
 108:	ldr	w0, [sp, #52]
 10c:	add	w0, w0, #0x7f
 110:	lsl	w0, w0, #23
 114:	ldr	w1, [sp, #60]
 118:	add	w0, w1, w0
 11c:	str	w0, [sp, #60]
 120:	ldr	w0, [sp, #60]
 124:	bl	0 <fromRep>
 128:	ldp	x29, x30, [sp], #64
 12c:	ret

floatuntidf.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__floatuntidf>:
   0:	stp	x29, x30, [sp, #-208]!
   4:	mov	x29, sp
   8:	stp	x20, x21, [sp, #16]
   c:	stp	x22, x23, [sp, #32]
  10:	stp	x24, x25, [sp, #48]
  14:	stp	x26, x27, [sp, #64]
  18:	stp	x0, x1, [sp, #160]
  1c:	ldr	x0, [sp, #160]
  20:	ldr	x1, [sp, #168]
  24:	orr	x0, x0, x1
  28:	cmp	x0, #0x0
  2c:	b.ne	38 <__floatuntidf+0x38>  // b.any
  30:	movi	d0, #0x0
  34:	b	378 <__floatuntidf+0x378>
  38:	mov	w0, #0x80                  	// #128
  3c:	str	w0, [sp, #200]
  40:	ldp	x0, x1, [sp, #160]
  44:	bl	0 <__clzti2>
  48:	mov	w1, w0
  4c:	ldr	w0, [sp, #200]
  50:	sub	w0, w0, w1
  54:	str	w0, [sp, #196]
  58:	ldr	w0, [sp, #196]
  5c:	sub	w0, w0, #0x1
  60:	str	w0, [sp, #204]
  64:	ldr	w0, [sp, #196]
  68:	cmp	w0, #0x35
  6c:	b.le	2c4 <__floatuntidf+0x2c4>
  70:	ldr	w0, [sp, #196]
  74:	cmp	w0, #0x36
  78:	b.eq	8c <__floatuntidf+0x8c>  // b.none
  7c:	ldr	w0, [sp, #196]
  80:	cmp	w0, #0x37
  84:	b.eq	1bc <__floatuntidf+0x1bc>  // b.none
  88:	b	b4 <__floatuntidf+0xb4>
  8c:	ldr	x0, [sp, #160]
  90:	lsr	x0, x0, #63
  94:	ldr	x1, [sp, #168]
  98:	lsl	x1, x1, #1
  9c:	orr	x0, x1, x0
  a0:	str	x0, [sp, #168]
  a4:	ldr	x0, [sp, #160]
  a8:	lsl	x0, x0, #1
  ac:	str	x0, [sp, #160]
  b0:	b	1c0 <__floatuntidf+0x1c0>
  b4:	ldr	w0, [sp, #196]
  b8:	sub	w0, w0, #0x37
  bc:	sub	w1, w0, #0x40
  c0:	ldr	x2, [sp, #168]
  c4:	lsr	x2, x2, x1
  c8:	mov	x5, #0x0                   	// #0
  cc:	ldr	x3, [sp, #168]
  d0:	lsl	x4, x3, #1
  d4:	mov	w3, #0x3f                  	// #63
  d8:	sub	w3, w3, w0
  dc:	lsl	x3, x4, x3
  e0:	ldr	x4, [sp, #160]
  e4:	lsr	x20, x4, x0
  e8:	orr	x20, x3, x20
  ec:	ldr	x3, [sp, #168]
  f0:	lsr	x21, x3, x0
  f4:	cmp	w1, #0x0
  f8:	csel	x20, x2, x20, ge  // ge = tcont
  fc:	cmp	w1, #0x0
 100:	csel	x21, x5, x21, ge  // ge = tcont
 104:	ldr	w0, [sp, #196]
 108:	ldr	w1, [sp, #200]
 10c:	sub	w0, w1, w0
 110:	add	w0, w0, #0x37
 114:	sub	w1, w0, #0x40
 118:	mov	x2, #0xffffffffffffffff    	// #-1
 11c:	lsr	x2, x2, x1
 120:	mov	x5, #0x0                   	// #0
 124:	mov	x3, #0xffffffffffffffff    	// #-1
 128:	lsl	x4, x3, #1
 12c:	mov	w3, #0x3f                  	// #63
 130:	sub	w3, w3, w0
 134:	lsl	x3, x4, x3
 138:	mov	x4, #0xffffffffffffffff    	// #-1
 13c:	lsr	x22, x4, x0
 140:	orr	x22, x3, x22
 144:	mov	x3, #0xffffffffffffffff    	// #-1
 148:	lsr	x23, x3, x0
 14c:	cmp	w1, #0x0
 150:	csel	x22, x2, x22, ge  // ge = tcont
 154:	cmp	w1, #0x0
 158:	csel	x23, x5, x23, ge  // ge = tcont
 15c:	ldr	x0, [sp, #160]
 160:	and	x0, x0, x22
 164:	str	x0, [sp, #80]
 168:	ldr	x0, [sp, #168]
 16c:	and	x0, x0, x23
 170:	str	x0, [sp, #88]
 174:	ldp	x0, x1, [sp, #80]
 178:	mov	x2, x0
 17c:	mov	x0, x1
 180:	orr	x0, x2, x0
 184:	cmp	x0, #0x0
 188:	cset	w0, ne  // ne = any
 18c:	and	w0, w0, #0xff
 190:	and	x0, x0, #0xff
 194:	str	x0, [sp, #96]
 198:	str	xzr, [sp, #104]
 19c:	ldp	x2, x3, [sp, #96]
 1a0:	mov	x0, x2
 1a4:	orr	x0, x20, x0
 1a8:	str	x0, [sp, #160]
 1ac:	mov	x0, x3
 1b0:	orr	x0, x21, x0
 1b4:	str	x0, [sp, #168]
 1b8:	b	1c0 <__floatuntidf+0x1c0>
 1bc:	nop
 1c0:	ldr	x0, [sp, #160]
 1c4:	and	x26, x0, #0x4
 1c8:	ldr	x0, [sp, #168]
 1cc:	mov	x1, #0x0                   	// #0
 1d0:	and	x27, x0, x1
 1d4:	orr	x0, x26, x27
 1d8:	cmp	x0, #0x0
 1dc:	cset	w0, ne  // ne = any
 1e0:	and	w0, w0, #0xff
 1e4:	and	x0, x0, #0xff
 1e8:	str	x0, [sp, #112]
 1ec:	str	xzr, [sp, #120]
 1f0:	ldr	x0, [sp, #160]
 1f4:	ldp	x2, x3, [sp, #112]
 1f8:	mov	x1, x2
 1fc:	orr	x0, x0, x1
 200:	str	x0, [sp, #160]
 204:	ldr	x0, [sp, #168]
 208:	mov	x1, x3
 20c:	orr	x0, x0, x1
 210:	str	x0, [sp, #168]
 214:	ldp	x0, x1, [sp, #160]
 218:	mov	x2, #0x1                   	// #1
 21c:	adds	x2, x0, x2
 220:	mov	x3, #0x0                   	// #0
 224:	adc	x0, x1, x3
 228:	str	x2, [sp, #144]
 22c:	str	x0, [sp, #152]
 230:	ldp	x0, x1, [sp, #144]
 234:	stp	x0, x1, [sp, #160]
 238:	ldr	x0, [sp, #168]
 23c:	lsl	x0, x0, #62
 240:	ldr	x1, [sp, #160]
 244:	lsr	x1, x1, #2
 248:	orr	x0, x1, x0
 24c:	str	x0, [sp, #160]
 250:	ldr	x0, [sp, #168]
 254:	lsr	x0, x0, #2
 258:	str	x0, [sp, #168]
 25c:	ldr	x0, [sp, #160]
 260:	and	x0, x0, #0x20000000000000
 264:	str	x0, [sp, #128]
 268:	ldr	x0, [sp, #168]
 26c:	mov	x1, #0x0                   	// #0
 270:	and	x0, x0, x1
 274:	str	x0, [sp, #136]
 278:	ldp	x2, x3, [sp, #128]
 27c:	mov	x0, x2
 280:	mov	x1, x3
 284:	orr	x0, x0, x1
 288:	cmp	x0, #0x0
 28c:	b.eq	330 <__floatuntidf+0x330>  // b.none
 290:	ldr	x0, [sp, #168]
 294:	lsl	x0, x0, #63
 298:	ldr	x1, [sp, #160]
 29c:	lsr	x1, x1, #1
 2a0:	orr	x0, x1, x0
 2a4:	str	x0, [sp, #160]
 2a8:	ldr	x0, [sp, #168]
 2ac:	lsr	x0, x0, #1
 2b0:	str	x0, [sp, #168]
 2b4:	ldr	w0, [sp, #204]
 2b8:	add	w0, w0, #0x1
 2bc:	str	w0, [sp, #204]
 2c0:	b	330 <__floatuntidf+0x330>
 2c4:	mov	w1, #0x35                  	// #53
 2c8:	ldr	w0, [sp, #196]
 2cc:	sub	w0, w1, w0
 2d0:	sub	w1, w0, #0x40
 2d4:	ldr	x2, [sp, #160]
 2d8:	lsl	x2, x2, x1
 2dc:	mov	x5, #0x0                   	// #0
 2e0:	ldr	x3, [sp, #160]
 2e4:	lsr	x4, x3, #1
 2e8:	mov	w3, #0x3f                  	// #63
 2ec:	sub	w3, w3, w0
 2f0:	lsr	x3, x4, x3
 2f4:	ldr	x4, [sp, #168]
 2f8:	lsl	x4, x4, x0
 2fc:	orr	x3, x4, x3
 300:	str	x3, [sp, #168]
 304:	ldr	x3, [sp, #160]
 308:	lsl	x0, x3, x0
 30c:	str	x0, [sp, #160]
 310:	ldr	x0, [sp, #168]
 314:	cmp	w1, #0x0
 318:	csel	x0, x0, x2, lt  // lt = tstop
 31c:	str	x0, [sp, #168]
 320:	ldr	x0, [sp, #160]
 324:	cmp	w1, #0x0
 328:	csel	x0, x0, x5, lt  // lt = tstop
 32c:	str	x0, [sp, #160]
 330:	ldr	w0, [sp, #204]
 334:	add	w0, w0, #0x3ff
 338:	lsl	w0, w0, #20
 33c:	mov	w2, w0
 340:	ldr	x0, [sp, #168]
 344:	lsl	x0, x0, #32
 348:	ldr	x1, [sp, #160]
 34c:	lsr	x24, x1, #32
 350:	orr	x24, x0, x24
 354:	ldr	x0, [sp, #168]
 358:	lsr	x25, x0, #32
 35c:	mov	w0, w24
 360:	and	w0, w0, #0xfffff
 364:	orr	w0, w2, w0
 368:	str	w0, [sp, #188]
 36c:	ldr	x0, [sp, #160]
 370:	str	w0, [sp, #184]
 374:	ldr	d0, [sp, #184]
 378:	ldp	x20, x21, [sp, #16]
 37c:	ldp	x22, x23, [sp, #32]
 380:	ldp	x24, x25, [sp, #48]
 384:	ldp	x26, x27, [sp, #64]
 388:	ldp	x29, x30, [sp], #208
 38c:	ret

floatuntisf.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__floatuntisf>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	mov	x29, sp
   8:	stp	x20, x21, [sp, #16]
   c:	stp	x22, x23, [sp, #32]
  10:	stp	x24, x25, [sp, #48]
  14:	stp	x26, x27, [sp, #64]
  18:	stp	x0, x1, [sp, #144]
  1c:	ldr	x0, [sp, #144]
  20:	ldr	x1, [sp, #152]
  24:	orr	x0, x0, x1
  28:	cmp	x0, #0x0
  2c:	b.ne	38 <__floatuntisf+0x38>  // b.any
  30:	movi	v0.2s, #0x0
  34:	b	340 <__floatuntisf+0x340>
  38:	mov	w0, #0x80                  	// #128
  3c:	str	w0, [sp, #168]
  40:	ldp	x0, x1, [sp, #144]
  44:	bl	0 <__clzti2>
  48:	mov	w1, w0
  4c:	ldr	w0, [sp, #168]
  50:	sub	w0, w0, w1
  54:	str	w0, [sp, #164]
  58:	ldr	w0, [sp, #164]
  5c:	sub	w0, w0, #0x1
  60:	str	w0, [sp, #172]
  64:	ldr	w0, [sp, #164]
  68:	cmp	w0, #0x18
  6c:	b.le	2b0 <__floatuntisf+0x2b0>
  70:	ldr	w0, [sp, #164]
  74:	cmp	w0, #0x19
  78:	b.eq	8c <__floatuntisf+0x8c>  // b.none
  7c:	ldr	w0, [sp, #164]
  80:	cmp	w0, #0x1a
  84:	b.eq	1a8 <__floatuntisf+0x1a8>  // b.none
  88:	b	b4 <__floatuntisf+0xb4>
  8c:	ldr	x0, [sp, #144]
  90:	lsr	x0, x0, #63
  94:	ldr	x1, [sp, #152]
  98:	lsl	x1, x1, #1
  9c:	orr	x0, x1, x0
  a0:	str	x0, [sp, #152]
  a4:	ldr	x0, [sp, #144]
  a8:	lsl	x0, x0, #1
  ac:	str	x0, [sp, #144]
  b0:	b	1ac <__floatuntisf+0x1ac>
  b4:	ldr	w0, [sp, #164]
  b8:	sub	w0, w0, #0x1a
  bc:	sub	w1, w0, #0x40
  c0:	ldr	x2, [sp, #152]
  c4:	lsr	x2, x2, x1
  c8:	mov	x5, #0x0                   	// #0
  cc:	ldr	x3, [sp, #152]
  d0:	lsl	x4, x3, #1
  d4:	mov	w3, #0x3f                  	// #63
  d8:	sub	w3, w3, w0
  dc:	lsl	x3, x4, x3
  e0:	ldr	x4, [sp, #144]
  e4:	lsr	x20, x4, x0
  e8:	orr	x20, x3, x20
  ec:	ldr	x3, [sp, #152]
  f0:	lsr	x21, x3, x0
  f4:	cmp	w1, #0x0
  f8:	csel	x20, x2, x20, ge  // ge = tcont
  fc:	cmp	w1, #0x0
 100:	csel	x21, x5, x21, ge  // ge = tcont
 104:	ldr	w0, [sp, #164]
 108:	ldr	w1, [sp, #168]
 10c:	sub	w0, w1, w0
 110:	add	w0, w0, #0x1a
 114:	sub	w1, w0, #0x40
 118:	mov	x2, #0xffffffffffffffff    	// #-1
 11c:	lsr	x2, x2, x1
 120:	mov	x5, #0x0                   	// #0
 124:	mov	x3, #0xffffffffffffffff    	// #-1
 128:	lsl	x4, x3, #1
 12c:	mov	w3, #0x3f                  	// #63
 130:	sub	w3, w3, w0
 134:	lsl	x3, x4, x3
 138:	mov	x4, #0xffffffffffffffff    	// #-1
 13c:	lsr	x22, x4, x0
 140:	orr	x22, x3, x22
 144:	mov	x3, #0xffffffffffffffff    	// #-1
 148:	lsr	x23, x3, x0
 14c:	cmp	w1, #0x0
 150:	csel	x22, x2, x22, ge  // ge = tcont
 154:	cmp	w1, #0x0
 158:	csel	x23, x5, x23, ge  // ge = tcont
 15c:	ldr	x0, [sp, #144]
 160:	and	x26, x0, x22
 164:	ldr	x0, [sp, #152]
 168:	and	x27, x0, x23
 16c:	orr	x0, x26, x27
 170:	cmp	x0, #0x0
 174:	cset	w0, ne  // ne = any
 178:	and	w0, w0, #0xff
 17c:	and	x0, x0, #0xff
 180:	str	x0, [sp, #80]
 184:	str	xzr, [sp, #88]
 188:	ldp	x2, x3, [sp, #80]
 18c:	mov	x0, x2
 190:	orr	x0, x20, x0
 194:	str	x0, [sp, #144]
 198:	mov	x0, x3
 19c:	orr	x0, x21, x0
 1a0:	str	x0, [sp, #152]
 1a4:	b	1ac <__floatuntisf+0x1ac>
 1a8:	nop
 1ac:	ldr	x0, [sp, #144]
 1b0:	and	x24, x0, #0x4
 1b4:	ldr	x0, [sp, #152]
 1b8:	mov	x1, #0x0                   	// #0
 1bc:	and	x25, x0, x1
 1c0:	orr	x0, x24, x25
 1c4:	cmp	x0, #0x0
 1c8:	cset	w0, ne  // ne = any
 1cc:	and	w0, w0, #0xff
 1d0:	and	x0, x0, #0xff
 1d4:	str	x0, [sp, #96]
 1d8:	str	xzr, [sp, #104]
 1dc:	ldr	x0, [sp, #144]
 1e0:	ldp	x2, x3, [sp, #96]
 1e4:	mov	x1, x2
 1e8:	orr	x0, x0, x1
 1ec:	str	x0, [sp, #144]
 1f0:	ldr	x0, [sp, #152]
 1f4:	mov	x1, x3
 1f8:	orr	x0, x0, x1
 1fc:	str	x0, [sp, #152]
 200:	ldp	x0, x1, [sp, #144]
 204:	mov	x2, #0x1                   	// #1
 208:	adds	x2, x0, x2
 20c:	mov	x3, #0x0                   	// #0
 210:	adc	x0, x1, x3
 214:	str	x2, [sp, #128]
 218:	str	x0, [sp, #136]
 21c:	ldp	x0, x1, [sp, #128]
 220:	stp	x0, x1, [sp, #144]
 224:	ldr	x0, [sp, #152]
 228:	lsl	x0, x0, #62
 22c:	ldr	x1, [sp, #144]
 230:	lsr	x1, x1, #2
 234:	orr	x0, x1, x0
 238:	str	x0, [sp, #144]
 23c:	ldr	x0, [sp, #152]
 240:	lsr	x0, x0, #2
 244:	str	x0, [sp, #152]
 248:	ldr	x0, [sp, #144]
 24c:	and	x0, x0, #0x1000000
 250:	str	x0, [sp, #112]
 254:	ldr	x0, [sp, #152]
 258:	mov	x1, #0x0                   	// #0
 25c:	and	x0, x0, x1
 260:	str	x0, [sp, #120]
 264:	ldp	x2, x3, [sp, #112]
 268:	mov	x0, x2
 26c:	mov	x1, x3
 270:	orr	x0, x0, x1
 274:	cmp	x0, #0x0
 278:	b.eq	31c <__floatuntisf+0x31c>  // b.none
 27c:	ldr	x0, [sp, #152]
 280:	lsl	x0, x0, #63
 284:	ldr	x1, [sp, #144]
 288:	lsr	x1, x1, #1
 28c:	orr	x0, x1, x0
 290:	str	x0, [sp, #144]
 294:	ldr	x0, [sp, #152]
 298:	lsr	x0, x0, #1
 29c:	str	x0, [sp, #152]
 2a0:	ldr	w0, [sp, #172]
 2a4:	add	w0, w0, #0x1
 2a8:	str	w0, [sp, #172]
 2ac:	b	31c <__floatuntisf+0x31c>
 2b0:	mov	w1, #0x18                  	// #24
 2b4:	ldr	w0, [sp, #164]
 2b8:	sub	w0, w1, w0
 2bc:	sub	w1, w0, #0x40
 2c0:	ldr	x2, [sp, #144]
 2c4:	lsl	x2, x2, x1
 2c8:	mov	x5, #0x0                   	// #0
 2cc:	ldr	x3, [sp, #144]
 2d0:	lsr	x4, x3, #1
 2d4:	mov	w3, #0x3f                  	// #63
 2d8:	sub	w3, w3, w0
 2dc:	lsr	x3, x4, x3
 2e0:	ldr	x4, [sp, #152]
 2e4:	lsl	x4, x4, x0
 2e8:	orr	x3, x4, x3
 2ec:	str	x3, [sp, #152]
 2f0:	ldr	x3, [sp, #144]
 2f4:	lsl	x0, x3, x0
 2f8:	str	x0, [sp, #144]
 2fc:	ldr	x0, [sp, #152]
 300:	cmp	w1, #0x0
 304:	csel	x0, x0, x2, lt  // lt = tstop
 308:	str	x0, [sp, #152]
 30c:	ldr	x0, [sp, #144]
 310:	cmp	w1, #0x0
 314:	csel	x0, x0, x5, lt  // lt = tstop
 318:	str	x0, [sp, #144]
 31c:	ldr	w0, [sp, #172]
 320:	add	w0, w0, #0x7f
 324:	lsl	w0, w0, #23
 328:	mov	w1, w0
 32c:	ldr	x0, [sp, #144]
 330:	and	w0, w0, #0x7fffff
 334:	orr	w0, w1, w0
 338:	str	w0, [sp, #160]
 33c:	ldr	s0, [sp, #160]
 340:	ldp	x20, x21, [sp, #16]
 344:	ldp	x22, x23, [sp, #32]
 348:	ldp	x24, x25, [sp, #48]
 34c:	ldp	x26, x27, [sp, #64]
 350:	ldp	x29, x30, [sp], #176
 354:	ret

int_util.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__compilerrt_abort_impl>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	w1, [sp, #36]
  10:	str	x2, [sp, #24]
  14:	bl	0 <abort>

lshrdi3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__lshrdi3>:
   0:	sub	sp, sp, #0x30
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	mov	w0, #0x20                  	// #32
  10:	str	w0, [sp, #44]
  14:	ldr	x0, [sp, #8]
  18:	str	x0, [sp, #32]
  1c:	ldr	w1, [sp, #4]
  20:	ldr	w0, [sp, #44]
  24:	and	w0, w1, w0
  28:	cmp	w0, #0x0
  2c:	b.eq	50 <__lshrdi3+0x50>  // b.none
  30:	str	wzr, [sp, #28]
  34:	ldr	w1, [sp, #36]
  38:	ldr	w2, [sp, #4]
  3c:	ldr	w0, [sp, #44]
  40:	sub	w0, w2, w0
  44:	lsr	w0, w1, w0
  48:	str	w0, [sp, #24]
  4c:	b	9c <__lshrdi3+0x9c>
  50:	ldr	w0, [sp, #4]
  54:	cmp	w0, #0x0
  58:	b.ne	64 <__lshrdi3+0x64>  // b.any
  5c:	ldr	x0, [sp, #8]
  60:	b	a0 <__lshrdi3+0xa0>
  64:	ldr	w1, [sp, #36]
  68:	ldr	w0, [sp, #4]
  6c:	lsr	w0, w1, w0
  70:	str	w0, [sp, #28]
  74:	ldr	w1, [sp, #36]
  78:	ldr	w2, [sp, #44]
  7c:	ldr	w0, [sp, #4]
  80:	sub	w0, w2, w0
  84:	lsl	w1, w1, w0
  88:	ldr	w2, [sp, #32]
  8c:	ldr	w0, [sp, #4]
  90:	lsr	w0, w2, w0
  94:	orr	w0, w1, w0
  98:	str	w0, [sp, #24]
  9c:	ldr	x0, [sp, #24]
  a0:	add	sp, sp, #0x30
  a4:	ret

lshrti3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__lshrti3>:
   0:	sub	sp, sp, #0x50
   4:	stp	x0, x1, [sp, #16]
   8:	str	w2, [sp, #12]
   c:	mov	w0, #0x40                  	// #64
  10:	str	w0, [sp, #76]
  14:	ldp	x0, x1, [sp, #16]
  18:	stp	x0, x1, [sp, #48]
  1c:	ldr	w1, [sp, #12]
  20:	ldr	w0, [sp, #76]
  24:	and	w0, w1, w0
  28:	cmp	w0, #0x0
  2c:	b.eq	50 <__lshrti3+0x50>  // b.none
  30:	str	xzr, [sp, #40]
  34:	ldr	x1, [sp, #56]
  38:	ldr	w2, [sp, #12]
  3c:	ldr	w0, [sp, #76]
  40:	sub	w0, w2, w0
  44:	lsr	x0, x1, x0
  48:	str	x0, [sp, #32]
  4c:	b	9c <__lshrti3+0x9c>
  50:	ldr	w0, [sp, #12]
  54:	cmp	w0, #0x0
  58:	b.ne	64 <__lshrti3+0x64>  // b.any
  5c:	ldp	x0, x1, [sp, #16]
  60:	b	a0 <__lshrti3+0xa0>
  64:	ldr	x1, [sp, #56]
  68:	ldr	w0, [sp, #12]
  6c:	lsr	x0, x1, x0
  70:	str	x0, [sp, #40]
  74:	ldr	x1, [sp, #56]
  78:	ldr	w2, [sp, #76]
  7c:	ldr	w0, [sp, #12]
  80:	sub	w0, w2, w0
  84:	lsl	x1, x1, x0
  88:	ldr	x2, [sp, #48]
  8c:	ldr	w0, [sp, #12]
  90:	lsr	x0, x2, x0
  94:	orr	x0, x1, x0
  98:	str	x0, [sp, #32]
  9c:	ldp	x0, x1, [sp, #32]
  a0:	add	sp, sp, #0x50
  a4:	ret

moddi3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__moddi3>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	mov	w0, #0x3f                  	// #63
  14:	str	w0, [sp, #60]
  18:	ldr	w0, [sp, #60]
  1c:	ldr	x1, [sp, #16]
  20:	asr	x0, x1, x0
  24:	str	x0, [sp, #48]
  28:	ldr	x1, [sp, #16]
  2c:	ldr	x0, [sp, #48]
  30:	eor	x1, x1, x0
  34:	ldr	x0, [sp, #48]
  38:	sub	x0, x1, x0
  3c:	str	x0, [sp, #16]
  40:	ldr	w0, [sp, #60]
  44:	ldr	x1, [sp, #24]
  48:	asr	x0, x1, x0
  4c:	str	x0, [sp, #48]
  50:	ldr	x1, [sp, #24]
  54:	ldr	x0, [sp, #48]
  58:	eor	x1, x1, x0
  5c:	ldr	x0, [sp, #48]
  60:	sub	x0, x1, x0
  64:	str	x0, [sp, #24]
  68:	ldr	x0, [sp, #24]
  6c:	ldr	x1, [sp, #16]
  70:	add	x2, sp, #0x28
  74:	bl	0 <__udivmoddi4>
  78:	ldr	x0, [sp, #40]
  7c:	mov	x1, x0
  80:	ldr	x0, [sp, #48]
  84:	eor	x1, x1, x0
  88:	ldr	x0, [sp, #48]
  8c:	sub	x0, x1, x0
  90:	ldp	x29, x30, [sp], #64
  94:	ret

modsi3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__modsi3>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	w0, [sp, #28]
   c:	str	w1, [sp, #24]
  10:	ldr	w1, [sp, #24]
  14:	ldr	w0, [sp, #28]
  18:	bl	0 <__divsi3>
  1c:	mov	w1, w0
  20:	ldr	w0, [sp, #24]
  24:	mul	w0, w1, w0
  28:	ldr	w1, [sp, #28]
  2c:	sub	w0, w1, w0
  30:	ldp	x29, x30, [sp], #32
  34:	ret

modti3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__modti3>:
   0:	stp	x29, x30, [sp, #-128]!
   4:	mov	x29, sp
   8:	stp	x20, x21, [sp, #16]
   c:	stp	x22, x23, [sp, #32]
  10:	stp	x0, x1, [sp, #64]
  14:	stp	x2, x3, [sp, #48]
  18:	mov	w0, #0x7f                  	// #127
  1c:	str	w0, [sp, #124]
  20:	ldr	w0, [sp, #124]
  24:	sub	w0, w0, #0x40
  28:	ldr	x1, [sp, #56]
  2c:	asr	x2, x1, x0
  30:	ldr	x1, [sp, #56]
  34:	asr	x1, x1, #63
  38:	ldr	x3, [sp, #56]
  3c:	lsl	x12, x3, #1
  40:	mov	w13, #0x3f                  	// #63
  44:	ldr	w3, [sp, #124]
  48:	sub	w3, w13, w3
  4c:	lsl	x3, x12, x3
  50:	ldr	w12, [sp, #124]
  54:	ldr	x13, [sp, #48]
  58:	lsr	x12, x13, x12
  5c:	orr	x3, x12, x3
  60:	str	x3, [sp, #96]
  64:	ldr	w3, [sp, #124]
  68:	ldr	x12, [sp, #56]
  6c:	asr	x3, x12, x3
  70:	str	x3, [sp, #104]
  74:	ldr	x3, [sp, #96]
  78:	cmp	w0, #0x0
  7c:	csel	x2, x3, x2, lt  // lt = tstop
  80:	str	x2, [sp, #96]
  84:	ldr	x2, [sp, #104]
  88:	cmp	w0, #0x0
  8c:	csel	x0, x2, x1, lt  // lt = tstop
  90:	str	x0, [sp, #104]
  94:	ldr	x1, [sp, #48]
  98:	ldr	x0, [sp, #96]
  9c:	eor	x6, x1, x0
  a0:	ldr	x1, [sp, #56]
  a4:	ldr	x0, [sp, #104]
  a8:	eor	x7, x1, x0
  ac:	ldp	x0, x1, [sp, #96]
  b0:	subs	x2, x6, x0
  b4:	sbc	x0, x7, x1
  b8:	mov	x10, x2
  bc:	mov	x11, x0
  c0:	stp	x10, x11, [sp, #48]
  c4:	ldr	w0, [sp, #124]
  c8:	sub	w0, w0, #0x40
  cc:	ldr	x1, [sp, #72]
  d0:	asr	x2, x1, x0
  d4:	ldr	x1, [sp, #72]
  d8:	asr	x1, x1, #63
  dc:	ldr	x3, [sp, #72]
  e0:	lsl	x6, x3, #1
  e4:	mov	w7, #0x3f                  	// #63
  e8:	ldr	w3, [sp, #124]
  ec:	sub	w3, w7, w3
  f0:	lsl	x3, x6, x3
  f4:	ldr	w6, [sp, #124]
  f8:	ldr	x7, [sp, #64]
  fc:	lsr	x6, x7, x6
 100:	orr	x3, x6, x3
 104:	str	x3, [sp, #96]
 108:	ldr	w3, [sp, #124]
 10c:	ldr	x6, [sp, #72]
 110:	asr	x3, x6, x3
 114:	str	x3, [sp, #104]
 118:	ldr	x3, [sp, #96]
 11c:	cmp	w0, #0x0
 120:	csel	x2, x3, x2, lt  // lt = tstop
 124:	str	x2, [sp, #96]
 128:	ldr	x2, [sp, #104]
 12c:	cmp	w0, #0x0
 130:	csel	x0, x2, x1, lt  // lt = tstop
 134:	str	x0, [sp, #104]
 138:	ldr	x1, [sp, #64]
 13c:	ldr	x0, [sp, #96]
 140:	eor	x4, x1, x0
 144:	ldr	x1, [sp, #72]
 148:	ldr	x0, [sp, #104]
 14c:	eor	x5, x1, x0
 150:	ldp	x0, x1, [sp, #96]
 154:	subs	x2, x4, x0
 158:	sbc	x0, x5, x1
 15c:	mov	x8, x2
 160:	mov	x9, x0
 164:	stp	x8, x9, [sp, #64]
 168:	ldp	x0, x1, [sp, #64]
 16c:	ldp	x2, x3, [sp, #48]
 170:	add	x4, sp, #0x50
 174:	bl	0 <__udivmodti4>
 178:	ldp	x0, x1, [sp, #80]
 17c:	ldr	x2, [sp, #96]
 180:	eor	x20, x2, x0
 184:	ldr	x2, [sp, #104]
 188:	eor	x21, x2, x1
 18c:	ldp	x0, x1, [sp, #96]
 190:	subs	x2, x20, x0
 194:	sbc	x0, x21, x1
 198:	mov	x22, x2
 19c:	mov	x23, x0
 1a0:	mov	x0, x22
 1a4:	mov	x1, x23
 1a8:	ldp	x20, x21, [sp, #16]
 1ac:	ldp	x22, x23, [sp, #32]
 1b0:	ldp	x29, x30, [sp], #128
 1b4:	ret

muldc3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__muldc3>:
   0:	sub	sp, sp, #0x70
   4:	str	d0, [sp, #24]
   8:	str	d1, [sp, #16]
   c:	str	d2, [sp, #8]
  10:	str	d3, [sp]
  14:	ldr	d1, [sp, #24]
  18:	ldr	d0, [sp, #8]
  1c:	fmul	d0, d1, d0
  20:	str	d0, [sp, #80]
  24:	ldr	d1, [sp, #16]
  28:	ldr	d0, [sp]
  2c:	fmul	d0, d1, d0
  30:	str	d0, [sp, #72]
  34:	ldr	d1, [sp, #24]
  38:	ldr	d0, [sp]
  3c:	fmul	d0, d1, d0
  40:	str	d0, [sp, #64]
  44:	ldr	d1, [sp, #16]
  48:	ldr	d0, [sp, #8]
  4c:	fmul	d0, d1, d0
  50:	str	d0, [sp, #56]
  54:	ldr	d1, [sp, #80]
  58:	ldr	d0, [sp, #72]
  5c:	fsub	d0, d1, d0
  60:	str	d0, [sp, #104]
  64:	ldr	d0, [sp, #96]
  68:	ldr	d1, [sp, #104]
  6c:	str	d1, [sp, #40]
  70:	str	d0, [sp, #48]
  74:	ldr	d1, [sp, #64]
  78:	ldr	d0, [sp, #56]
  7c:	fadd	d0, d1, d0
  80:	str	d0, [sp, #96]
  84:	ldr	d0, [sp, #96]
  88:	ldr	d1, [sp, #104]
  8c:	str	d1, [sp, #40]
  90:	str	d0, [sp, #48]
  94:	ldr	d0, [sp, #104]
  98:	fcmp	d0, d0
  9c:	b.vc	4e8 <__muldc3+0x4e8>
  a0:	ldr	d0, [sp, #96]
  a4:	fcmp	d0, d0
  a8:	b.vc	4e8 <__muldc3+0x4e8>
  ac:	str	wzr, [sp, #92]
  b0:	ldr	d0, [sp, #24]
  b4:	fabs	d0, d0
  b8:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
  bc:	fmov	d1, x0
  c0:	fcmp	d0, d1
  c4:	cset	w0, le
  c8:	and	w0, w0, #0xff
  cc:	eor	w0, w0, #0x1
  d0:	and	w0, w0, #0xff
  d4:	cmp	w0, #0x0
  d8:	b.ne	108 <__muldc3+0x108>  // b.any
  dc:	ldr	d0, [sp, #16]
  e0:	fabs	d0, d0
  e4:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
  e8:	fmov	d1, x0
  ec:	fcmp	d0, d1
  f0:	cset	w0, le
  f4:	and	w0, w0, #0xff
  f8:	eor	w0, w0, #0x1
  fc:	and	w0, w0, #0xff
 100:	cmp	w0, #0x0
 104:	b.eq	1d8 <__muldc3+0x1d8>  // b.none
 108:	ldr	d0, [sp, #24]
 10c:	fabs	d0, d0
 110:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 114:	fmov	d1, x0
 118:	fcmp	d0, d1
 11c:	cset	w0, le
 120:	and	w0, w0, #0xff
 124:	eor	w0, w0, #0x1
 128:	and	w0, w0, #0xff
 12c:	scvtf	d0, w0
 130:	ldr	d1, [sp, #24]
 134:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 138:	fmov	d2, x0
 13c:	bit	v0.8b, v1.8b, v2.8b
 140:	str	d0, [sp, #24]
 144:	ldr	d0, [sp, #16]
 148:	fabs	d0, d0
 14c:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 150:	fmov	d1, x0
 154:	fcmp	d0, d1
 158:	cset	w0, le
 15c:	and	w0, w0, #0xff
 160:	eor	w0, w0, #0x1
 164:	and	w0, w0, #0xff
 168:	scvtf	d0, w0
 16c:	ldr	d1, [sp, #16]
 170:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 174:	fmov	d2, x0
 178:	bit	v0.8b, v1.8b, v2.8b
 17c:	str	d0, [sp, #16]
 180:	ldr	d1, [sp, #8]
 184:	ldr	d0, [sp, #8]
 188:	fcmp	d1, d0
 18c:	b.vc	1a8 <__muldc3+0x1a8>
 190:	movi	d1, #0x0
 194:	ldr	d0, [sp, #8]
 198:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 19c:	fmov	d2, x0
 1a0:	bif	v0.8b, v1.8b, v2.8b
 1a4:	str	d0, [sp, #8]
 1a8:	ldr	d1, [sp]
 1ac:	ldr	d0, [sp]
 1b0:	fcmp	d1, d0
 1b4:	b.vc	1d0 <__muldc3+0x1d0>
 1b8:	movi	d1, #0x0
 1bc:	ldr	d0, [sp]
 1c0:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 1c4:	fmov	d2, x0
 1c8:	bif	v0.8b, v1.8b, v2.8b
 1cc:	str	d0, [sp]
 1d0:	mov	w0, #0x1                   	// #1
 1d4:	str	w0, [sp, #92]
 1d8:	ldr	d0, [sp, #8]
 1dc:	fabs	d0, d0
 1e0:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 1e4:	fmov	d1, x0
 1e8:	fcmp	d0, d1
 1ec:	cset	w0, le
 1f0:	and	w0, w0, #0xff
 1f4:	eor	w0, w0, #0x1
 1f8:	and	w0, w0, #0xff
 1fc:	cmp	w0, #0x0
 200:	b.ne	230 <__muldc3+0x230>  // b.any
 204:	ldr	d0, [sp]
 208:	fabs	d0, d0
 20c:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 210:	fmov	d1, x0
 214:	fcmp	d0, d1
 218:	cset	w0, le
 21c:	and	w0, w0, #0xff
 220:	eor	w0, w0, #0x1
 224:	and	w0, w0, #0xff
 228:	cmp	w0, #0x0
 22c:	b.eq	300 <__muldc3+0x300>  // b.none
 230:	ldr	d0, [sp, #8]
 234:	fabs	d0, d0
 238:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 23c:	fmov	d1, x0
 240:	fcmp	d0, d1
 244:	cset	w0, le
 248:	and	w0, w0, #0xff
 24c:	eor	w0, w0, #0x1
 250:	and	w0, w0, #0xff
 254:	scvtf	d0, w0
 258:	ldr	d1, [sp, #8]
 25c:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 260:	fmov	d2, x0
 264:	bit	v0.8b, v1.8b, v2.8b
 268:	str	d0, [sp, #8]
 26c:	ldr	d0, [sp]
 270:	fabs	d0, d0
 274:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 278:	fmov	d1, x0
 27c:	fcmp	d0, d1
 280:	cset	w0, le
 284:	and	w0, w0, #0xff
 288:	eor	w0, w0, #0x1
 28c:	and	w0, w0, #0xff
 290:	scvtf	d0, w0
 294:	ldr	d1, [sp]
 298:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 29c:	fmov	d2, x0
 2a0:	bit	v0.8b, v1.8b, v2.8b
 2a4:	str	d0, [sp]
 2a8:	ldr	d1, [sp, #24]
 2ac:	ldr	d0, [sp, #24]
 2b0:	fcmp	d1, d0
 2b4:	b.vc	2d0 <__muldc3+0x2d0>
 2b8:	movi	d1, #0x0
 2bc:	ldr	d0, [sp, #24]
 2c0:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 2c4:	fmov	d2, x0
 2c8:	bif	v0.8b, v1.8b, v2.8b
 2cc:	str	d0, [sp, #24]
 2d0:	ldr	d1, [sp, #16]
 2d4:	ldr	d0, [sp, #16]
 2d8:	fcmp	d1, d0
 2dc:	b.vc	2f8 <__muldc3+0x2f8>
 2e0:	movi	d1, #0x0
 2e4:	ldr	d0, [sp, #16]
 2e8:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 2ec:	fmov	d2, x0
 2f0:	bif	v0.8b, v1.8b, v2.8b
 2f4:	str	d0, [sp, #16]
 2f8:	mov	w0, #0x1                   	// #1
 2fc:	str	w0, [sp, #92]
 300:	ldr	w0, [sp, #92]
 304:	cmp	w0, #0x0
 308:	b.ne	464 <__muldc3+0x464>  // b.any
 30c:	ldr	d0, [sp, #80]
 310:	fabs	d0, d0
 314:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 318:	fmov	d1, x0
 31c:	fcmp	d0, d1
 320:	cset	w0, le
 324:	and	w0, w0, #0xff
 328:	eor	w0, w0, #0x1
 32c:	and	w0, w0, #0xff
 330:	cmp	w0, #0x0
 334:	b.ne	3bc <__muldc3+0x3bc>  // b.any
 338:	ldr	d0, [sp, #72]
 33c:	fabs	d0, d0
 340:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 344:	fmov	d1, x0
 348:	fcmp	d0, d1
 34c:	cset	w0, le
 350:	and	w0, w0, #0xff
 354:	eor	w0, w0, #0x1
 358:	and	w0, w0, #0xff
 35c:	cmp	w0, #0x0
 360:	b.ne	3bc <__muldc3+0x3bc>  // b.any
 364:	ldr	d0, [sp, #64]
 368:	fabs	d0, d0
 36c:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 370:	fmov	d1, x0
 374:	fcmp	d0, d1
 378:	cset	w0, le
 37c:	and	w0, w0, #0xff
 380:	eor	w0, w0, #0x1
 384:	and	w0, w0, #0xff
 388:	cmp	w0, #0x0
 38c:	b.ne	3bc <__muldc3+0x3bc>  // b.any
 390:	ldr	d0, [sp, #56]
 394:	fabs	d0, d0
 398:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 39c:	fmov	d1, x0
 3a0:	fcmp	d0, d1
 3a4:	cset	w0, le
 3a8:	and	w0, w0, #0xff
 3ac:	eor	w0, w0, #0x1
 3b0:	and	w0, w0, #0xff
 3b4:	cmp	w0, #0x0
 3b8:	b.eq	464 <__muldc3+0x464>  // b.none
 3bc:	ldr	d1, [sp, #24]
 3c0:	ldr	d0, [sp, #24]
 3c4:	fcmp	d1, d0
 3c8:	b.vc	3e4 <__muldc3+0x3e4>
 3cc:	movi	d1, #0x0
 3d0:	ldr	d0, [sp, #24]
 3d4:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 3d8:	fmov	d2, x0
 3dc:	bif	v0.8b, v1.8b, v2.8b
 3e0:	str	d0, [sp, #24]
 3e4:	ldr	d1, [sp, #16]
 3e8:	ldr	d0, [sp, #16]
 3ec:	fcmp	d1, d0
 3f0:	b.vc	40c <__muldc3+0x40c>
 3f4:	movi	d1, #0x0
 3f8:	ldr	d0, [sp, #16]
 3fc:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 400:	fmov	d2, x0
 404:	bif	v0.8b, v1.8b, v2.8b
 408:	str	d0, [sp, #16]
 40c:	ldr	d1, [sp, #8]
 410:	ldr	d0, [sp, #8]
 414:	fcmp	d1, d0
 418:	b.vc	434 <__muldc3+0x434>
 41c:	movi	d1, #0x0
 420:	ldr	d0, [sp, #8]
 424:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 428:	fmov	d2, x0
 42c:	bif	v0.8b, v1.8b, v2.8b
 430:	str	d0, [sp, #8]
 434:	ldr	d1, [sp]
 438:	ldr	d0, [sp]
 43c:	fcmp	d1, d0
 440:	b.vc	45c <__muldc3+0x45c>
 444:	movi	d1, #0x0
 448:	ldr	d0, [sp]
 44c:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 450:	fmov	d2, x0
 454:	bif	v0.8b, v1.8b, v2.8b
 458:	str	d0, [sp]
 45c:	mov	w0, #0x1                   	// #1
 460:	str	w0, [sp, #92]
 464:	ldr	w0, [sp, #92]
 468:	cmp	w0, #0x0
 46c:	b.eq	4e8 <__muldc3+0x4e8>  // b.none
 470:	ldr	d1, [sp, #24]
 474:	ldr	d0, [sp, #8]
 478:	fmul	d1, d1, d0
 47c:	ldr	d2, [sp, #16]
 480:	ldr	d0, [sp]
 484:	fmul	d0, d2, d0
 488:	fsub	d0, d1, d0
 48c:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 490:	fmov	d1, x0
 494:	fmul	d0, d0, d1
 498:	str	d0, [sp, #104]
 49c:	ldr	d0, [sp, #96]
 4a0:	ldr	d1, [sp, #104]
 4a4:	str	d1, [sp, #40]
 4a8:	str	d0, [sp, #48]
 4ac:	ldr	d1, [sp, #24]
 4b0:	ldr	d0, [sp]
 4b4:	fmul	d1, d1, d0
 4b8:	ldr	d2, [sp, #16]
 4bc:	ldr	d0, [sp, #8]
 4c0:	fmul	d0, d2, d0
 4c4:	fadd	d0, d1, d0
 4c8:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 4cc:	fmov	d1, x0
 4d0:	fmul	d0, d0, d1
 4d4:	str	d0, [sp, #96]
 4d8:	ldr	d0, [sp, #96]
 4dc:	ldr	d1, [sp, #104]
 4e0:	str	d1, [sp, #40]
 4e4:	str	d0, [sp, #48]
 4e8:	ldr	d1, [sp, #104]
 4ec:	ldr	d0, [sp, #96]
 4f0:	fmov	d2, d1
 4f4:	fmov	d1, d0
 4f8:	fmov	d0, d2
 4fc:	add	sp, sp, #0x70
 500:	ret

muldf3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <rep_clz>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	clz	x0, x0
  10:	add	sp, sp, #0x10
  14:	ret

0000000000000018 <wideMultiply>:
  18:	sub	sp, sp, #0x50
  1c:	str	x0, [sp, #24]
  20:	str	x1, [sp, #16]
  24:	str	x2, [sp, #8]
  28:	str	x3, [sp]
  2c:	ldr	x0, [sp, #24]
  30:	and	x1, x0, #0xffffffff
  34:	ldr	x0, [sp, #16]
  38:	and	x0, x0, #0xffffffff
  3c:	mul	x0, x1, x0
  40:	str	x0, [sp, #72]
  44:	ldr	x0, [sp, #24]
  48:	and	x1, x0, #0xffffffff
  4c:	ldr	x0, [sp, #16]
  50:	lsr	x0, x0, #32
  54:	mul	x0, x1, x0
  58:	str	x0, [sp, #64]
  5c:	ldr	x0, [sp, #24]
  60:	lsr	x1, x0, #32
  64:	ldr	x0, [sp, #16]
  68:	and	x0, x0, #0xffffffff
  6c:	mul	x0, x1, x0
  70:	str	x0, [sp, #56]
  74:	ldr	x0, [sp, #24]
  78:	lsr	x1, x0, #32
  7c:	ldr	x0, [sp, #16]
  80:	lsr	x0, x0, #32
  84:	mul	x0, x1, x0
  88:	str	x0, [sp, #48]
  8c:	ldr	x0, [sp, #72]
  90:	and	x0, x0, #0xffffffff
  94:	str	x0, [sp, #40]
  98:	ldr	x0, [sp, #72]
  9c:	lsr	x1, x0, #32
  a0:	ldr	x0, [sp, #64]
  a4:	and	x0, x0, #0xffffffff
  a8:	add	x1, x1, x0
  ac:	ldr	x0, [sp, #56]
  b0:	and	x0, x0, #0xffffffff
  b4:	add	x0, x1, x0
  b8:	str	x0, [sp, #32]
  bc:	ldr	x0, [sp, #32]
  c0:	lsl	x1, x0, #32
  c4:	ldr	x0, [sp, #40]
  c8:	add	x1, x1, x0
  cc:	ldr	x0, [sp]
  d0:	str	x1, [x0]
  d4:	ldr	x0, [sp, #64]
  d8:	lsr	x1, x0, #32
  dc:	ldr	x0, [sp, #56]
  e0:	lsr	x0, x0, #32
  e4:	add	x1, x1, x0
  e8:	ldr	x0, [sp, #32]
  ec:	lsr	x0, x0, #32
  f0:	add	x1, x1, x0
  f4:	ldr	x0, [sp, #48]
  f8:	add	x1, x1, x0
  fc:	ldr	x0, [sp, #8]
 100:	str	x1, [x0]
 104:	nop
 108:	add	sp, sp, #0x50
 10c:	ret

0000000000000110 <toRep>:
 110:	sub	sp, sp, #0x20
 114:	str	d0, [sp, #8]
 118:	ldr	d0, [sp, #8]
 11c:	str	d0, [sp, #24]
 120:	ldr	x0, [sp, #24]
 124:	add	sp, sp, #0x20
 128:	ret

000000000000012c <fromRep>:
 12c:	sub	sp, sp, #0x20
 130:	str	x0, [sp, #8]
 134:	ldr	x0, [sp, #8]
 138:	str	x0, [sp, #24]
 13c:	ldr	d0, [sp, #24]
 140:	add	sp, sp, #0x20
 144:	ret

0000000000000148 <normalize>:
 148:	stp	x29, x30, [sp, #-64]!
 14c:	mov	x29, sp
 150:	str	x19, [sp, #16]
 154:	str	x0, [sp, #40]
 158:	ldr	x0, [sp, #40]
 15c:	ldr	x0, [x0]
 160:	bl	0 <rep_clz>
 164:	mov	w19, w0
 168:	mov	x0, #0x10000000000000      	// #4503599627370496
 16c:	bl	0 <rep_clz>
 170:	sub	w0, w19, w0
 174:	str	w0, [sp, #60]
 178:	ldr	x0, [sp, #40]
 17c:	ldr	x1, [x0]
 180:	ldr	w0, [sp, #60]
 184:	lsl	x1, x1, x0
 188:	ldr	x0, [sp, #40]
 18c:	str	x1, [x0]
 190:	mov	w1, #0x1                   	// #1
 194:	ldr	w0, [sp, #60]
 198:	sub	w0, w1, w0
 19c:	ldr	x19, [sp, #16]
 1a0:	ldp	x29, x30, [sp], #64
 1a4:	ret

00000000000001a8 <wideLeftShift>:
 1a8:	sub	sp, sp, #0x20
 1ac:	str	x0, [sp, #24]
 1b0:	str	x1, [sp, #16]
 1b4:	str	w2, [sp, #12]
 1b8:	ldr	x0, [sp, #24]
 1bc:	ldr	x1, [x0]
 1c0:	ldr	w0, [sp, #12]
 1c4:	lsl	x1, x1, x0
 1c8:	ldr	x0, [sp, #16]
 1cc:	ldr	x2, [x0]
 1d0:	ldr	w0, [sp, #12]
 1d4:	mov	w3, #0x40                  	// #64
 1d8:	sub	w0, w3, w0
 1dc:	lsr	x0, x2, x0
 1e0:	orr	x1, x1, x0
 1e4:	ldr	x0, [sp, #24]
 1e8:	str	x1, [x0]
 1ec:	ldr	x0, [sp, #16]
 1f0:	ldr	x1, [x0]
 1f4:	ldr	w0, [sp, #12]
 1f8:	lsl	x1, x1, x0
 1fc:	ldr	x0, [sp, #16]
 200:	str	x1, [x0]
 204:	nop
 208:	add	sp, sp, #0x20
 20c:	ret

0000000000000210 <wideRightShiftWithSticky>:
 210:	sub	sp, sp, #0x30
 214:	str	x0, [sp, #24]
 218:	str	x1, [sp, #16]
 21c:	str	w2, [sp, #12]
 220:	ldr	w0, [sp, #12]
 224:	cmp	w0, #0x3f
 228:	b.hi	2a8 <wideRightShiftWithSticky+0x98>  // b.pmore
 22c:	ldr	x0, [sp, #16]
 230:	ldr	x1, [x0]
 234:	mov	w2, #0x40                  	// #64
 238:	ldr	w0, [sp, #12]
 23c:	sub	w0, w2, w0
 240:	lsl	x0, x1, x0
 244:	cmp	x0, #0x0
 248:	cset	w0, ne  // ne = any
 24c:	strb	w0, [sp, #45]
 250:	ldr	x0, [sp, #24]
 254:	ldr	x1, [x0]
 258:	mov	w2, #0x40                  	// #64
 25c:	ldr	w0, [sp, #12]
 260:	sub	w0, w2, w0
 264:	lsl	x1, x1, x0
 268:	ldr	x0, [sp, #16]
 26c:	ldr	x2, [x0]
 270:	ldr	w0, [sp, #12]
 274:	lsr	x0, x2, x0
 278:	orr	x1, x1, x0
 27c:	ldrb	w0, [sp, #45]
 280:	orr	x1, x1, x0
 284:	ldr	x0, [sp, #16]
 288:	str	x1, [x0]
 28c:	ldr	x0, [sp, #24]
 290:	ldr	x1, [x0]
 294:	ldr	w0, [sp, #12]
 298:	lsr	x1, x1, x0
 29c:	ldr	x0, [sp, #24]
 2a0:	str	x1, [x0]
 2a4:	b	348 <wideRightShiftWithSticky+0x138>
 2a8:	ldr	w0, [sp, #12]
 2ac:	cmp	w0, #0x7f
 2b0:	b.hi	314 <wideRightShiftWithSticky+0x104>  // b.pmore
 2b4:	ldr	x0, [sp, #24]
 2b8:	ldr	x1, [x0]
 2bc:	mov	w2, #0x80                  	// #128
 2c0:	ldr	w0, [sp, #12]
 2c4:	sub	w0, w2, w0
 2c8:	lsl	x1, x1, x0
 2cc:	ldr	x0, [sp, #16]
 2d0:	ldr	x0, [x0]
 2d4:	orr	x0, x1, x0
 2d8:	cmp	x0, #0x0
 2dc:	cset	w0, ne  // ne = any
 2e0:	strb	w0, [sp, #46]
 2e4:	ldr	x0, [sp, #24]
 2e8:	ldr	x1, [x0]
 2ec:	ldr	w0, [sp, #12]
 2f0:	sub	w0, w0, #0x40
 2f4:	lsr	x1, x1, x0
 2f8:	ldrb	w0, [sp, #46]
 2fc:	orr	x1, x1, x0
 300:	ldr	x0, [sp, #16]
 304:	str	x1, [x0]
 308:	ldr	x0, [sp, #24]
 30c:	str	xzr, [x0]
 310:	b	348 <wideRightShiftWithSticky+0x138>
 314:	ldr	x0, [sp, #24]
 318:	ldr	x1, [x0]
 31c:	ldr	x0, [sp, #16]
 320:	ldr	x0, [x0]
 324:	orr	x0, x1, x0
 328:	cmp	x0, #0x0
 32c:	cset	w0, ne  // ne = any
 330:	strb	w0, [sp, #47]
 334:	ldrb	w1, [sp, #47]
 338:	ldr	x0, [sp, #16]
 33c:	str	x1, [x0]
 340:	ldr	x0, [sp, #24]
 344:	str	xzr, [x0]
 348:	nop
 34c:	add	sp, sp, #0x30
 350:	ret

0000000000000354 <__mulXf3__>:
 354:	stp	x29, x30, [sp, #-128]!
 358:	mov	x29, sp
 35c:	str	x19, [sp, #16]
 360:	str	d0, [sp, #40]
 364:	str	d1, [sp, #32]
 368:	ldr	d0, [sp, #40]
 36c:	bl	110 <toRep>
 370:	lsr	x0, x0, #52
 374:	and	w0, w0, #0x7ff
 378:	str	w0, [sp, #116]
 37c:	ldr	d0, [sp, #32]
 380:	bl	110 <toRep>
 384:	lsr	x0, x0, #52
 388:	and	w0, w0, #0x7ff
 38c:	str	w0, [sp, #112]
 390:	ldr	d0, [sp, #40]
 394:	bl	110 <toRep>
 398:	mov	x19, x0
 39c:	ldr	d0, [sp, #32]
 3a0:	bl	110 <toRep>
 3a4:	eor	x0, x19, x0
 3a8:	and	x0, x0, #0x8000000000000000
 3ac:	str	x0, [sp, #104]
 3b0:	ldr	d0, [sp, #40]
 3b4:	bl	110 <toRep>
 3b8:	and	x0, x0, #0xfffffffffffff
 3bc:	str	x0, [sp, #72]
 3c0:	ldr	d0, [sp, #32]
 3c4:	bl	110 <toRep>
 3c8:	and	x0, x0, #0xfffffffffffff
 3cc:	str	x0, [sp, #64]
 3d0:	str	wzr, [sp, #124]
 3d4:	ldr	w0, [sp, #116]
 3d8:	sub	w0, w0, #0x1
 3dc:	cmp	w0, #0x7fd
 3e0:	b.hi	3f4 <__mulXf3__+0xa0>  // b.pmore
 3e4:	ldr	w0, [sp, #112]
 3e8:	sub	w0, w0, #0x1
 3ec:	cmp	w0, #0x7fd
 3f0:	b.ls	554 <__mulXf3__+0x200>  // b.plast
 3f4:	ldr	d0, [sp, #40]
 3f8:	bl	110 <toRep>
 3fc:	and	x0, x0, #0x7fffffffffffffff
 400:	str	x0, [sp, #96]
 404:	ldr	d0, [sp, #32]
 408:	bl	110 <toRep>
 40c:	and	x0, x0, #0x7fffffffffffffff
 410:	str	x0, [sp, #88]
 414:	ldr	x1, [sp, #96]
 418:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 41c:	cmp	x1, x0
 420:	b.ls	438 <__mulXf3__+0xe4>  // b.plast
 424:	ldr	d0, [sp, #40]
 428:	bl	110 <toRep>
 42c:	orr	x0, x0, #0x8000000000000
 430:	bl	12c <fromRep>
 434:	b	6b8 <__mulXf3__+0x364>
 438:	ldr	x1, [sp, #88]
 43c:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 440:	cmp	x1, x0
 444:	b.ls	45c <__mulXf3__+0x108>  // b.plast
 448:	ldr	d0, [sp, #32]
 44c:	bl	110 <toRep>
 450:	orr	x0, x0, #0x8000000000000
 454:	bl	12c <fromRep>
 458:	b	6b8 <__mulXf3__+0x364>
 45c:	ldr	x1, [sp, #96]
 460:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 464:	cmp	x1, x0
 468:	b.ne	498 <__mulXf3__+0x144>  // b.any
 46c:	ldr	x0, [sp, #88]
 470:	cmp	x0, #0x0
 474:	b.eq	48c <__mulXf3__+0x138>  // b.none
 478:	ldr	x1, [sp, #96]
 47c:	ldr	x0, [sp, #104]
 480:	orr	x0, x1, x0
 484:	bl	12c <fromRep>
 488:	b	6b8 <__mulXf3__+0x364>
 48c:	mov	x0, #0x7ff8000000000000    	// #9221120237041090560
 490:	bl	12c <fromRep>
 494:	b	6b8 <__mulXf3__+0x364>
 498:	ldr	x1, [sp, #88]
 49c:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 4a0:	cmp	x1, x0
 4a4:	b.ne	4d4 <__mulXf3__+0x180>  // b.any
 4a8:	ldr	x0, [sp, #96]
 4ac:	cmp	x0, #0x0
 4b0:	b.eq	4c8 <__mulXf3__+0x174>  // b.none
 4b4:	ldr	x1, [sp, #88]
 4b8:	ldr	x0, [sp, #104]
 4bc:	orr	x0, x1, x0
 4c0:	bl	12c <fromRep>
 4c4:	b	6b8 <__mulXf3__+0x364>
 4c8:	mov	x0, #0x7ff8000000000000    	// #9221120237041090560
 4cc:	bl	12c <fromRep>
 4d0:	b	6b8 <__mulXf3__+0x364>
 4d4:	ldr	x0, [sp, #96]
 4d8:	cmp	x0, #0x0
 4dc:	b.ne	4ec <__mulXf3__+0x198>  // b.any
 4e0:	ldr	x0, [sp, #104]
 4e4:	bl	12c <fromRep>
 4e8:	b	6b8 <__mulXf3__+0x364>
 4ec:	ldr	x0, [sp, #88]
 4f0:	cmp	x0, #0x0
 4f4:	b.ne	504 <__mulXf3__+0x1b0>  // b.any
 4f8:	ldr	x0, [sp, #104]
 4fc:	bl	12c <fromRep>
 500:	b	6b8 <__mulXf3__+0x364>
 504:	ldr	x1, [sp, #96]
 508:	mov	x0, #0xfffffffffffff       	// #4503599627370495
 50c:	cmp	x1, x0
 510:	b.hi	52c <__mulXf3__+0x1d8>  // b.pmore
 514:	add	x0, sp, #0x48
 518:	bl	148 <normalize>
 51c:	mov	w1, w0
 520:	ldr	w0, [sp, #124]
 524:	add	w0, w0, w1
 528:	str	w0, [sp, #124]
 52c:	ldr	x1, [sp, #88]
 530:	mov	x0, #0xfffffffffffff       	// #4503599627370495
 534:	cmp	x1, x0
 538:	b.hi	554 <__mulXf3__+0x200>  // b.pmore
 53c:	add	x0, sp, #0x40
 540:	bl	148 <normalize>
 544:	mov	w1, w0
 548:	ldr	w0, [sp, #124]
 54c:	add	w0, w0, w1
 550:	str	w0, [sp, #124]
 554:	ldr	x0, [sp, #72]
 558:	orr	x0, x0, #0x10000000000000
 55c:	str	x0, [sp, #72]
 560:	ldr	x0, [sp, #64]
 564:	orr	x0, x0, #0x10000000000000
 568:	str	x0, [sp, #64]
 56c:	ldr	x4, [sp, #72]
 570:	ldr	x0, [sp, #64]
 574:	lsl	x0, x0, #11
 578:	add	x2, sp, #0x30
 57c:	add	x1, sp, #0x38
 580:	mov	x3, x2
 584:	mov	x2, x1
 588:	mov	x1, x0
 58c:	mov	x0, x4
 590:	bl	18 <wideMultiply>
 594:	ldr	w1, [sp, #116]
 598:	ldr	w0, [sp, #112]
 59c:	add	w1, w1, w0
 5a0:	ldr	w0, [sp, #124]
 5a4:	add	w0, w1, w0
 5a8:	sub	w0, w0, #0x3ff
 5ac:	str	w0, [sp, #120]
 5b0:	ldr	x0, [sp, #56]
 5b4:	and	x0, x0, #0x10000000000000
 5b8:	cmp	x0, #0x0
 5bc:	b.eq	5d0 <__mulXf3__+0x27c>  // b.none
 5c0:	ldr	w0, [sp, #120]
 5c4:	add	w0, w0, #0x1
 5c8:	str	w0, [sp, #120]
 5cc:	b	5e0 <__mulXf3__+0x28c>
 5d0:	add	x1, sp, #0x30
 5d4:	add	x0, sp, #0x38
 5d8:	mov	w2, #0x1                   	// #1
 5dc:	bl	1a8 <wideLeftShift>
 5e0:	ldr	w0, [sp, #120]
 5e4:	cmp	w0, #0x7fe
 5e8:	b.le	5fc <__mulXf3__+0x2a8>
 5ec:	ldr	x0, [sp, #104]
 5f0:	orr	x0, x0, #0x7ff0000000000000
 5f4:	bl	12c <fromRep>
 5f8:	b	6b8 <__mulXf3__+0x364>
 5fc:	ldr	w0, [sp, #120]
 600:	cmp	w0, #0x0
 604:	b.gt	644 <__mulXf3__+0x2f0>
 608:	ldr	w0, [sp, #120]
 60c:	mov	w1, #0x1                   	// #1
 610:	sub	w0, w1, w0
 614:	str	w0, [sp, #84]
 618:	ldr	w0, [sp, #84]
 61c:	cmp	w0, #0x3f
 620:	b.ls	630 <__mulXf3__+0x2dc>  // b.plast
 624:	ldr	x0, [sp, #104]
 628:	bl	12c <fromRep>
 62c:	b	6b8 <__mulXf3__+0x364>
 630:	add	x1, sp, #0x30
 634:	add	x0, sp, #0x38
 638:	ldr	w2, [sp, #84]
 63c:	bl	210 <wideRightShiftWithSticky>
 640:	b	664 <__mulXf3__+0x310>
 644:	ldr	x0, [sp, #56]
 648:	and	x0, x0, #0xfffffffffffff
 64c:	str	x0, [sp, #56]
 650:	ldrsw	x0, [sp, #120]
 654:	lsl	x1, x0, #52
 658:	ldr	x0, [sp, #56]
 65c:	orr	x0, x1, x0
 660:	str	x0, [sp, #56]
 664:	ldr	x1, [sp, #56]
 668:	ldr	x0, [sp, #104]
 66c:	orr	x0, x1, x0
 670:	str	x0, [sp, #56]
 674:	ldr	x1, [sp, #48]
 678:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 67c:	cmp	x1, x0
 680:	b.ls	690 <__mulXf3__+0x33c>  // b.plast
 684:	ldr	x0, [sp, #56]
 688:	add	x0, x0, #0x1
 68c:	str	x0, [sp, #56]
 690:	ldr	x1, [sp, #48]
 694:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 698:	cmp	x1, x0
 69c:	b.ne	6b0 <__mulXf3__+0x35c>  // b.any
 6a0:	ldr	x0, [sp, #56]
 6a4:	add	x0, x0, #0x1
 6a8:	and	x0, x0, #0xfffffffffffffffe
 6ac:	str	x0, [sp, #56]
 6b0:	ldr	x0, [sp, #56]
 6b4:	bl	12c <fromRep>
 6b8:	ldr	x19, [sp, #16]
 6bc:	ldp	x29, x30, [sp], #128
 6c0:	ret

00000000000006c4 <__muldf3>:
 6c4:	stp	x29, x30, [sp, #-32]!
 6c8:	mov	x29, sp
 6cc:	str	d0, [sp, #24]
 6d0:	str	d1, [sp, #16]
 6d4:	ldr	d1, [sp, #16]
 6d8:	ldr	d0, [sp, #24]
 6dc:	bl	354 <__mulXf3__>
 6e0:	ldp	x29, x30, [sp], #32
 6e4:	ret

muldi3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__muldsi3>:
   0:	sub	sp, sp, #0x30
   4:	str	w0, [sp, #12]
   8:	str	w1, [sp, #8]
   c:	mov	w0, #0x10                  	// #16
  10:	str	w0, [sp, #44]
  14:	ldr	w0, [sp, #44]
  18:	mov	w1, #0xffffffff            	// #-1
  1c:	lsr	w0, w1, w0
  20:	str	w0, [sp, #40]
  24:	ldr	w1, [sp, #12]
  28:	ldr	w0, [sp, #40]
  2c:	and	w1, w1, w0
  30:	ldr	w2, [sp, #8]
  34:	ldr	w0, [sp, #40]
  38:	and	w0, w2, w0
  3c:	mul	w0, w1, w0
  40:	str	w0, [sp, #24]
  44:	ldr	w1, [sp, #24]
  48:	ldr	w0, [sp, #44]
  4c:	lsr	w0, w1, w0
  50:	str	w0, [sp, #36]
  54:	ldr	w1, [sp, #24]
  58:	ldr	w0, [sp, #40]
  5c:	and	w0, w1, w0
  60:	str	w0, [sp, #24]
  64:	ldr	w0, [sp, #44]
  68:	ldr	w1, [sp, #12]
  6c:	lsr	w1, w1, w0
  70:	ldr	w2, [sp, #8]
  74:	ldr	w0, [sp, #40]
  78:	and	w0, w2, w0
  7c:	mul	w0, w1, w0
  80:	ldr	w1, [sp, #36]
  84:	add	w0, w1, w0
  88:	str	w0, [sp, #36]
  8c:	ldr	w1, [sp, #24]
  90:	ldr	w2, [sp, #36]
  94:	ldr	w0, [sp, #40]
  98:	and	w2, w2, w0
  9c:	ldr	w0, [sp, #44]
  a0:	lsl	w0, w2, w0
  a4:	add	w0, w1, w0
  a8:	str	w0, [sp, #24]
  ac:	ldr	w0, [sp, #44]
  b0:	ldr	w1, [sp, #36]
  b4:	lsr	w0, w1, w0
  b8:	str	w0, [sp, #28]
  bc:	ldr	w1, [sp, #24]
  c0:	ldr	w0, [sp, #44]
  c4:	lsr	w0, w1, w0
  c8:	str	w0, [sp, #36]
  cc:	ldr	w1, [sp, #24]
  d0:	ldr	w0, [sp, #40]
  d4:	and	w0, w1, w0
  d8:	str	w0, [sp, #24]
  dc:	ldr	w0, [sp, #44]
  e0:	ldr	w1, [sp, #8]
  e4:	lsr	w1, w1, w0
  e8:	ldr	w2, [sp, #12]
  ec:	ldr	w0, [sp, #40]
  f0:	and	w0, w2, w0
  f4:	mul	w0, w1, w0
  f8:	ldr	w1, [sp, #36]
  fc:	add	w0, w1, w0
 100:	str	w0, [sp, #36]
 104:	ldr	w1, [sp, #24]
 108:	ldr	w2, [sp, #36]
 10c:	ldr	w0, [sp, #40]
 110:	and	w2, w2, w0
 114:	ldr	w0, [sp, #44]
 118:	lsl	w0, w2, w0
 11c:	add	w0, w1, w0
 120:	str	w0, [sp, #24]
 124:	ldr	w0, [sp, #28]
 128:	mov	w2, w0
 12c:	ldr	w0, [sp, #44]
 130:	ldr	w1, [sp, #36]
 134:	lsr	w0, w1, w0
 138:	add	w0, w2, w0
 13c:	str	w0, [sp, #28]
 140:	ldr	w0, [sp, #28]
 144:	mov	w3, w0
 148:	ldr	w0, [sp, #44]
 14c:	ldr	w1, [sp, #12]
 150:	lsr	w1, w1, w0
 154:	ldr	w0, [sp, #44]
 158:	ldr	w2, [sp, #8]
 15c:	lsr	w0, w2, w0
 160:	mul	w0, w1, w0
 164:	add	w0, w3, w0
 168:	str	w0, [sp, #28]
 16c:	ldr	x0, [sp, #24]
 170:	add	sp, sp, #0x30
 174:	ret

0000000000000178 <__muldi3>:
 178:	stp	x29, x30, [sp, #-64]!
 17c:	mov	x29, sp
 180:	str	x0, [sp, #24]
 184:	str	x1, [sp, #16]
 188:	ldr	x0, [sp, #24]
 18c:	str	x0, [sp, #56]
 190:	ldr	x0, [sp, #16]
 194:	str	x0, [sp, #48]
 198:	ldr	w0, [sp, #56]
 19c:	ldr	w1, [sp, #48]
 1a0:	bl	0 <__muldsi3>
 1a4:	str	x0, [sp, #40]
 1a8:	ldr	w0, [sp, #44]
 1ac:	mov	w2, w0
 1b0:	ldr	w0, [sp, #60]
 1b4:	mov	w1, w0
 1b8:	ldr	w0, [sp, #48]
 1bc:	mul	w1, w1, w0
 1c0:	ldr	w0, [sp, #56]
 1c4:	ldr	w3, [sp, #52]
 1c8:	mul	w0, w0, w3
 1cc:	add	w0, w1, w0
 1d0:	add	w0, w2, w0
 1d4:	str	w0, [sp, #44]
 1d8:	ldr	x0, [sp, #40]
 1dc:	ldp	x29, x30, [sp], #64
 1e0:	ret

mulodi4.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__mulodi4>:
   0:	sub	sp, sp, #0x60
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	x2, [sp, #8]
  10:	mov	w0, #0x40                  	// #64
  14:	str	w0, [sp, #92]
  18:	ldr	w0, [sp, #92]
  1c:	sub	w0, w0, #0x1
  20:	mov	x1, #0x1                   	// #1
  24:	lsl	x0, x1, x0
  28:	str	x0, [sp, #80]
  2c:	ldr	x0, [sp, #80]
  30:	mvn	x0, x0
  34:	str	x0, [sp, #72]
  38:	ldr	x0, [sp, #8]
  3c:	str	wzr, [x0]
  40:	ldr	x1, [sp, #24]
  44:	ldr	x0, [sp, #16]
  48:	mul	x0, x1, x0
  4c:	str	x0, [sp, #64]
  50:	ldr	x1, [sp, #24]
  54:	ldr	x0, [sp, #80]
  58:	cmp	x1, x0
  5c:	b.ne	8c <__mulodi4+0x8c>  // b.any
  60:	ldr	x0, [sp, #16]
  64:	cmp	x0, #0x0
  68:	b.eq	84 <__mulodi4+0x84>  // b.none
  6c:	ldr	x0, [sp, #16]
  70:	cmp	x0, #0x1
  74:	b.eq	84 <__mulodi4+0x84>  // b.none
  78:	ldr	x0, [sp, #8]
  7c:	mov	w1, #0x1                   	// #1
  80:	str	w1, [x0]
  84:	ldr	x0, [sp, #64]
  88:	b	1a4 <__mulodi4+0x1a4>
  8c:	ldr	x1, [sp, #16]
  90:	ldr	x0, [sp, #80]
  94:	cmp	x1, x0
  98:	b.ne	c8 <__mulodi4+0xc8>  // b.any
  9c:	ldr	x0, [sp, #24]
  a0:	cmp	x0, #0x0
  a4:	b.eq	c0 <__mulodi4+0xc0>  // b.none
  a8:	ldr	x0, [sp, #24]
  ac:	cmp	x0, #0x1
  b0:	b.eq	c0 <__mulodi4+0xc0>  // b.none
  b4:	ldr	x0, [sp, #8]
  b8:	mov	w1, #0x1                   	// #1
  bc:	str	w1, [x0]
  c0:	ldr	x0, [sp, #64]
  c4:	b	1a4 <__mulodi4+0x1a4>
  c8:	ldr	w0, [sp, #92]
  cc:	sub	w0, w0, #0x1
  d0:	ldr	x1, [sp, #24]
  d4:	asr	x0, x1, x0
  d8:	str	x0, [sp, #56]
  dc:	ldr	x1, [sp, #24]
  e0:	ldr	x0, [sp, #56]
  e4:	eor	x1, x1, x0
  e8:	ldr	x0, [sp, #56]
  ec:	sub	x0, x1, x0
  f0:	str	x0, [sp, #48]
  f4:	ldr	w0, [sp, #92]
  f8:	sub	w0, w0, #0x1
  fc:	ldr	x1, [sp, #16]
 100:	asr	x0, x1, x0
 104:	str	x0, [sp, #40]
 108:	ldr	x1, [sp, #16]
 10c:	ldr	x0, [sp, #40]
 110:	eor	x1, x1, x0
 114:	ldr	x0, [sp, #40]
 118:	sub	x0, x1, x0
 11c:	str	x0, [sp, #32]
 120:	ldr	x0, [sp, #48]
 124:	cmp	x0, #0x1
 128:	b.le	138 <__mulodi4+0x138>
 12c:	ldr	x0, [sp, #32]
 130:	cmp	x0, #0x1
 134:	b.gt	140 <__mulodi4+0x140>
 138:	ldr	x0, [sp, #64]
 13c:	b	1a4 <__mulodi4+0x1a4>
 140:	ldr	x1, [sp, #56]
 144:	ldr	x0, [sp, #40]
 148:	cmp	x1, x0
 14c:	b.ne	178 <__mulodi4+0x178>  // b.any
 150:	ldr	x1, [sp, #72]
 154:	ldr	x0, [sp, #32]
 158:	sdiv	x0, x1, x0
 15c:	ldr	x1, [sp, #48]
 160:	cmp	x1, x0
 164:	b.le	1a0 <__mulodi4+0x1a0>
 168:	ldr	x0, [sp, #8]
 16c:	mov	w1, #0x1                   	// #1
 170:	str	w1, [x0]
 174:	b	1a0 <__mulodi4+0x1a0>
 178:	ldr	x0, [sp, #32]
 17c:	neg	x0, x0
 180:	ldr	x1, [sp, #80]
 184:	sdiv	x0, x1, x0
 188:	ldr	x1, [sp, #48]
 18c:	cmp	x1, x0
 190:	b.le	1a0 <__mulodi4+0x1a0>
 194:	ldr	x0, [sp, #8]
 198:	mov	w1, #0x1                   	// #1
 19c:	str	w1, [x0]
 1a0:	ldr	x0, [sp, #64]
 1a4:	add	sp, sp, #0x60
 1a8:	ret

mulosi4.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__mulosi4>:
   0:	sub	sp, sp, #0x30
   4:	str	w0, [sp, #12]
   8:	str	w1, [sp, #8]
   c:	str	x2, [sp]
  10:	mov	w0, #0x20                  	// #32
  14:	str	w0, [sp, #44]
  18:	ldr	w0, [sp, #44]
  1c:	sub	w0, w0, #0x1
  20:	mov	w1, #0x1                   	// #1
  24:	lsl	w0, w1, w0
  28:	str	w0, [sp, #40]
  2c:	ldr	w0, [sp, #40]
  30:	mvn	w0, w0
  34:	str	w0, [sp, #36]
  38:	ldr	x0, [sp]
  3c:	str	wzr, [x0]
  40:	ldr	w1, [sp, #12]
  44:	ldr	w0, [sp, #8]
  48:	mul	w0, w1, w0
  4c:	str	w0, [sp, #32]
  50:	ldr	w1, [sp, #12]
  54:	ldr	w0, [sp, #40]
  58:	cmp	w1, w0
  5c:	b.ne	8c <__mulosi4+0x8c>  // b.any
  60:	ldr	w0, [sp, #8]
  64:	cmp	w0, #0x0
  68:	b.eq	84 <__mulosi4+0x84>  // b.none
  6c:	ldr	w0, [sp, #8]
  70:	cmp	w0, #0x1
  74:	b.eq	84 <__mulosi4+0x84>  // b.none
  78:	ldr	x0, [sp]
  7c:	mov	w1, #0x1                   	// #1
  80:	str	w1, [x0]
  84:	ldr	w0, [sp, #32]
  88:	b	1a4 <__mulosi4+0x1a4>
  8c:	ldr	w1, [sp, #8]
  90:	ldr	w0, [sp, #40]
  94:	cmp	w1, w0
  98:	b.ne	c8 <__mulosi4+0xc8>  // b.any
  9c:	ldr	w0, [sp, #12]
  a0:	cmp	w0, #0x0
  a4:	b.eq	c0 <__mulosi4+0xc0>  // b.none
  a8:	ldr	w0, [sp, #12]
  ac:	cmp	w0, #0x1
  b0:	b.eq	c0 <__mulosi4+0xc0>  // b.none
  b4:	ldr	x0, [sp]
  b8:	mov	w1, #0x1                   	// #1
  bc:	str	w1, [x0]
  c0:	ldr	w0, [sp, #32]
  c4:	b	1a4 <__mulosi4+0x1a4>
  c8:	ldr	w0, [sp, #44]
  cc:	sub	w0, w0, #0x1
  d0:	ldr	w1, [sp, #12]
  d4:	asr	w0, w1, w0
  d8:	str	w0, [sp, #28]
  dc:	ldr	w1, [sp, #12]
  e0:	ldr	w0, [sp, #28]
  e4:	eor	w1, w1, w0
  e8:	ldr	w0, [sp, #28]
  ec:	sub	w0, w1, w0
  f0:	str	w0, [sp, #24]
  f4:	ldr	w0, [sp, #44]
  f8:	sub	w0, w0, #0x1
  fc:	ldr	w1, [sp, #8]
 100:	asr	w0, w1, w0
 104:	str	w0, [sp, #20]
 108:	ldr	w1, [sp, #8]
 10c:	ldr	w0, [sp, #20]
 110:	eor	w1, w1, w0
 114:	ldr	w0, [sp, #20]
 118:	sub	w0, w1, w0
 11c:	str	w0, [sp, #16]
 120:	ldr	w0, [sp, #24]
 124:	cmp	w0, #0x1
 128:	b.le	138 <__mulosi4+0x138>
 12c:	ldr	w0, [sp, #16]
 130:	cmp	w0, #0x1
 134:	b.gt	140 <__mulosi4+0x140>
 138:	ldr	w0, [sp, #32]
 13c:	b	1a4 <__mulosi4+0x1a4>
 140:	ldr	w1, [sp, #28]
 144:	ldr	w0, [sp, #20]
 148:	cmp	w1, w0
 14c:	b.ne	178 <__mulosi4+0x178>  // b.any
 150:	ldr	w1, [sp, #36]
 154:	ldr	w0, [sp, #16]
 158:	sdiv	w0, w1, w0
 15c:	ldr	w1, [sp, #24]
 160:	cmp	w1, w0
 164:	b.le	1a0 <__mulosi4+0x1a0>
 168:	ldr	x0, [sp]
 16c:	mov	w1, #0x1                   	// #1
 170:	str	w1, [x0]
 174:	b	1a0 <__mulosi4+0x1a0>
 178:	ldr	w0, [sp, #16]
 17c:	neg	w0, w0
 180:	ldr	w1, [sp, #40]
 184:	sdiv	w0, w1, w0
 188:	ldr	w1, [sp, #24]
 18c:	cmp	w1, w0
 190:	b.le	1a0 <__mulosi4+0x1a0>
 194:	ldr	x0, [sp]
 198:	mov	w1, #0x1                   	// #1
 19c:	str	w1, [x0]
 1a0:	ldr	w0, [sp, #32]
 1a4:	add	sp, sp, #0x30
 1a8:	ret

muloti4.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__muloti4>:
   0:	stp	x29, x30, [sp, #-192]!
   4:	mov	x29, sp
   8:	stp	x0, x1, [sp, #48]
   c:	stp	x2, x3, [sp, #32]
  10:	str	x4, [sp, #24]
  14:	mov	w0, #0x80                  	// #128
  18:	str	w0, [sp, #188]
  1c:	ldr	w0, [sp, #188]
  20:	sub	w0, w0, #0x1
  24:	sub	w1, w0, #0x40
  28:	mov	x2, #0x1                   	// #1
  2c:	lsl	x2, x2, x1
  30:	mov	x5, #0x0                   	// #0
  34:	mov	x3, #0x1                   	// #1
  38:	lsr	x4, x3, #1
  3c:	mov	w3, #0x3f                  	// #63
  40:	sub	w3, w3, w0
  44:	lsr	x3, x4, x3
  48:	mov	x4, #0x0                   	// #0
  4c:	lsl	x4, x4, x0
  50:	orr	x3, x4, x3
  54:	str	x3, [sp, #168]
  58:	mov	x3, #0x1                   	// #1
  5c:	lsl	x0, x3, x0
  60:	str	x0, [sp, #160]
  64:	ldr	x0, [sp, #168]
  68:	cmp	w1, #0x0
  6c:	csel	x0, x0, x2, lt  // lt = tstop
  70:	str	x0, [sp, #168]
  74:	ldr	x0, [sp, #160]
  78:	cmp	w1, #0x0
  7c:	csel	x0, x0, x5, lt  // lt = tstop
  80:	str	x0, [sp, #160]
  84:	ldr	x0, [sp, #160]
  88:	mvn	x0, x0
  8c:	str	x0, [sp, #144]
  90:	ldr	x0, [sp, #168]
  94:	mvn	x0, x0
  98:	str	x0, [sp, #152]
  9c:	ldr	x0, [sp, #24]
  a0:	str	wzr, [x0]
  a4:	ldp	x2, x3, [sp, #48]
  a8:	ldp	x0, x1, [sp, #32]
  ac:	mul	x5, x2, x0
  b0:	umulh	x4, x2, x0
  b4:	madd	x4, x3, x0, x4
  b8:	madd	x4, x2, x1, x4
  bc:	mov	x14, x5
  c0:	mov	x15, x4
  c4:	stp	x14, x15, [sp, #128]
  c8:	ldr	x1, [sp, #48]
  cc:	ldr	x0, [sp, #160]
  d0:	cmp	x1, x0
  d4:	b.ne	128 <__muloti4+0x128>  // b.any
  d8:	ldr	x1, [sp, #56]
  dc:	ldr	x0, [sp, #168]
  e0:	cmp	x1, x0
  e4:	b.ne	128 <__muloti4+0x128>  // b.any
  e8:	ldr	x0, [sp, #32]
  ec:	ldr	x1, [sp, #40]
  f0:	orr	x0, x0, x1
  f4:	cmp	x0, #0x0
  f8:	b.eq	120 <__muloti4+0x120>  // b.none
  fc:	ldr	x0, [sp, #32]
 100:	cmp	x0, #0x1
 104:	b.ne	114 <__muloti4+0x114>  // b.any
 108:	ldr	x0, [sp, #40]
 10c:	cmp	x0, #0x0
 110:	b.eq	120 <__muloti4+0x120>  // b.none
 114:	ldr	x0, [sp, #24]
 118:	mov	w1, #0x1                   	// #1
 11c:	str	w1, [x0]
 120:	ldp	x0, x1, [sp, #128]
 124:	b	3c8 <__muloti4+0x3c8>
 128:	ldr	x1, [sp, #32]
 12c:	ldr	x0, [sp, #160]
 130:	cmp	x1, x0
 134:	b.ne	188 <__muloti4+0x188>  // b.any
 138:	ldr	x1, [sp, #40]
 13c:	ldr	x0, [sp, #168]
 140:	cmp	x1, x0
 144:	b.ne	188 <__muloti4+0x188>  // b.any
 148:	ldr	x0, [sp, #48]
 14c:	ldr	x1, [sp, #56]
 150:	orr	x0, x0, x1
 154:	cmp	x0, #0x0
 158:	b.eq	180 <__muloti4+0x180>  // b.none
 15c:	ldr	x0, [sp, #48]
 160:	cmp	x0, #0x1
 164:	b.ne	174 <__muloti4+0x174>  // b.any
 168:	ldr	x0, [sp, #56]
 16c:	cmp	x0, #0x0
 170:	b.eq	180 <__muloti4+0x180>  // b.none
 174:	ldr	x0, [sp, #24]
 178:	mov	w1, #0x1                   	// #1
 17c:	str	w1, [x0]
 180:	ldp	x0, x1, [sp, #128]
 184:	b	3c8 <__muloti4+0x3c8>
 188:	ldr	w0, [sp, #188]
 18c:	sub	w0, w0, #0x1
 190:	sub	w1, w0, #0x40
 194:	ldr	x2, [sp, #56]
 198:	asr	x3, x2, x1
 19c:	ldr	x2, [sp, #56]
 1a0:	asr	x2, x2, #63
 1a4:	ldr	x4, [sp, #56]
 1a8:	lsl	x5, x4, #1
 1ac:	mov	w4, #0x3f                  	// #63
 1b0:	sub	w4, w4, w0
 1b4:	lsl	x4, x5, x4
 1b8:	ldr	x5, [sp, #48]
 1bc:	lsr	x5, x5, x0
 1c0:	orr	x4, x5, x4
 1c4:	str	x4, [sp, #112]
 1c8:	ldr	x4, [sp, #56]
 1cc:	asr	x0, x4, x0
 1d0:	str	x0, [sp, #120]
 1d4:	ldr	x0, [sp, #112]
 1d8:	cmp	w1, #0x0
 1dc:	csel	x0, x0, x3, lt  // lt = tstop
 1e0:	str	x0, [sp, #112]
 1e4:	ldr	x0, [sp, #120]
 1e8:	cmp	w1, #0x0
 1ec:	csel	x0, x0, x2, lt  // lt = tstop
 1f0:	str	x0, [sp, #120]
 1f4:	ldr	x1, [sp, #48]
 1f8:	ldr	x0, [sp, #112]
 1fc:	eor	x8, x1, x0
 200:	ldr	x1, [sp, #56]
 204:	ldr	x0, [sp, #120]
 208:	eor	x9, x1, x0
 20c:	ldp	x0, x1, [sp, #112]
 210:	subs	x2, x8, x0
 214:	sbc	x0, x9, x1
 218:	mov	x12, x2
 21c:	mov	x13, x0
 220:	stp	x12, x13, [sp, #96]
 224:	ldr	w0, [sp, #188]
 228:	sub	w0, w0, #0x1
 22c:	sub	w1, w0, #0x40
 230:	ldr	x2, [sp, #40]
 234:	asr	x3, x2, x1
 238:	ldr	x2, [sp, #40]
 23c:	asr	x2, x2, #63
 240:	ldr	x4, [sp, #40]
 244:	lsl	x5, x4, #1
 248:	mov	w4, #0x3f                  	// #63
 24c:	sub	w4, w4, w0
 250:	lsl	x4, x5, x4
 254:	ldr	x5, [sp, #32]
 258:	lsr	x5, x5, x0
 25c:	orr	x4, x5, x4
 260:	str	x4, [sp, #80]
 264:	ldr	x4, [sp, #40]
 268:	asr	x0, x4, x0
 26c:	str	x0, [sp, #88]
 270:	ldr	x0, [sp, #80]
 274:	cmp	w1, #0x0
 278:	csel	x0, x0, x3, lt  // lt = tstop
 27c:	str	x0, [sp, #80]
 280:	ldr	x0, [sp, #88]
 284:	cmp	w1, #0x0
 288:	csel	x0, x0, x2, lt  // lt = tstop
 28c:	str	x0, [sp, #88]
 290:	ldr	x1, [sp, #32]
 294:	ldr	x0, [sp, #80]
 298:	eor	x6, x1, x0
 29c:	ldr	x1, [sp, #40]
 2a0:	ldr	x0, [sp, #88]
 2a4:	eor	x7, x1, x0
 2a8:	ldp	x0, x1, [sp, #80]
 2ac:	subs	x2, x6, x0
 2b0:	sbc	x0, x7, x1
 2b4:	mov	x10, x2
 2b8:	mov	x11, x0
 2bc:	stp	x10, x11, [sp, #64]
 2c0:	ldr	x0, [sp, #104]
 2c4:	cmp	x0, #0x0
 2c8:	b.gt	2e4 <__muloti4+0x2e4>
 2cc:	ldr	x0, [sp, #104]
 2d0:	cmp	x0, #0x0
 2d4:	b.ne	308 <__muloti4+0x308>  // b.any
 2d8:	ldr	x0, [sp, #96]
 2dc:	cmp	x0, #0x1
 2e0:	b.ls	308 <__muloti4+0x308>  // b.plast
 2e4:	ldr	x0, [sp, #72]
 2e8:	cmp	x0, #0x0
 2ec:	b.gt	310 <__muloti4+0x310>
 2f0:	ldr	x0, [sp, #72]
 2f4:	cmp	x0, #0x0
 2f8:	b.ne	308 <__muloti4+0x308>  // b.any
 2fc:	ldr	x0, [sp, #64]
 300:	cmp	x0, #0x1
 304:	b.hi	310 <__muloti4+0x310>  // b.pmore
 308:	ldp	x0, x1, [sp, #128]
 30c:	b	3c8 <__muloti4+0x3c8>
 310:	ldr	x1, [sp, #112]
 314:	ldr	x0, [sp, #80]
 318:	cmp	x1, x0
 31c:	b.ne	370 <__muloti4+0x370>  // b.any
 320:	ldr	x1, [sp, #120]
 324:	ldr	x0, [sp, #88]
 328:	cmp	x1, x0
 32c:	b.ne	370 <__muloti4+0x370>  // b.any
 330:	ldp	x2, x3, [sp, #64]
 334:	ldp	x0, x1, [sp, #144]
 338:	bl	0 <__divti3>
 33c:	ldr	x2, [sp, #104]
 340:	cmp	x2, x1
 344:	b.gt	360 <__muloti4+0x360>
 348:	ldr	x2, [sp, #104]
 34c:	cmp	x2, x1
 350:	b.ne	3c4 <__muloti4+0x3c4>  // b.any
 354:	ldr	x2, [sp, #96]
 358:	cmp	x2, x0
 35c:	b.ls	3c4 <__muloti4+0x3c4>  // b.plast
 360:	ldr	x0, [sp, #24]
 364:	mov	w1, #0x1                   	// #1
 368:	str	w1, [x0]
 36c:	b	3c4 <__muloti4+0x3c4>
 370:	ldp	x0, x1, [sp, #64]
 374:	negs	x2, x0
 378:	ngc	x0, x1
 37c:	mov	x16, x2
 380:	mov	x17, x0
 384:	mov	x2, x16
 388:	mov	x3, x17
 38c:	ldp	x0, x1, [sp, #160]
 390:	bl	0 <__divti3>
 394:	ldr	x2, [sp, #104]
 398:	cmp	x2, x1
 39c:	b.gt	3b8 <__muloti4+0x3b8>
 3a0:	ldr	x2, [sp, #104]
 3a4:	cmp	x2, x1
 3a8:	b.ne	3c4 <__muloti4+0x3c4>  // b.any
 3ac:	ldr	x2, [sp, #96]
 3b0:	cmp	x2, x0
 3b4:	b.ls	3c4 <__muloti4+0x3c4>  // b.plast
 3b8:	ldr	x0, [sp, #24]
 3bc:	mov	w1, #0x1                   	// #1
 3c0:	str	w1, [x0]
 3c4:	ldp	x0, x1, [sp, #128]
 3c8:	ldp	x29, x30, [sp], #192
 3cc:	ret

mulsc3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__mulsc3>:
   0:	sub	sp, sp, #0x40
   4:	str	s0, [sp, #12]
   8:	str	s1, [sp, #8]
   c:	str	s2, [sp, #4]
  10:	str	s3, [sp]
  14:	ldr	s1, [sp, #12]
  18:	ldr	s0, [sp, #4]
  1c:	fmul	s0, s1, s0
  20:	str	s0, [sp, #48]
  24:	ldr	s1, [sp, #8]
  28:	ldr	s0, [sp]
  2c:	fmul	s0, s1, s0
  30:	str	s0, [sp, #44]
  34:	ldr	s1, [sp, #12]
  38:	ldr	s0, [sp]
  3c:	fmul	s0, s1, s0
  40:	str	s0, [sp, #40]
  44:	ldr	s1, [sp, #8]
  48:	ldr	s0, [sp, #4]
  4c:	fmul	s0, s1, s0
  50:	str	s0, [sp, #36]
  54:	ldr	s1, [sp, #48]
  58:	ldr	s0, [sp, #44]
  5c:	fsub	s0, s1, s0
  60:	str	s0, [sp, #60]
  64:	ldr	s0, [sp, #56]
  68:	ldr	s1, [sp, #60]
  6c:	str	s1, [sp, #28]
  70:	str	s0, [sp, #32]
  74:	ldr	s1, [sp, #40]
  78:	ldr	s0, [sp, #36]
  7c:	fadd	s0, s1, s0
  80:	str	s0, [sp, #56]
  84:	ldr	s0, [sp, #56]
  88:	ldr	s1, [sp, #60]
  8c:	str	s1, [sp, #28]
  90:	str	s0, [sp, #32]
  94:	ldr	s0, [sp, #60]
  98:	fcmp	s0, s0
  9c:	b.vc	4c8 <__mulsc3+0x4c8>
  a0:	ldr	s0, [sp, #56]
  a4:	fcmp	s0, s0
  a8:	b.vc	4c8 <__mulsc3+0x4c8>
  ac:	str	wzr, [sp, #52]
  b0:	ldr	s0, [sp, #12]
  b4:	fabs	s0, s0
  b8:	mov	w0, #0x7f7fffff            	// #2139095039
  bc:	fmov	s1, w0
  c0:	fcmp	s0, s1
  c4:	cset	w0, le
  c8:	and	w0, w0, #0xff
  cc:	eor	w0, w0, #0x1
  d0:	and	w0, w0, #0xff
  d4:	cmp	w0, #0x0
  d8:	b.ne	108 <__mulsc3+0x108>  // b.any
  dc:	ldr	s0, [sp, #8]
  e0:	fabs	s0, s0
  e4:	mov	w0, #0x7f7fffff            	// #2139095039
  e8:	fmov	s1, w0
  ec:	fcmp	s0, s1
  f0:	cset	w0, le
  f4:	and	w0, w0, #0xff
  f8:	eor	w0, w0, #0x1
  fc:	and	w0, w0, #0xff
 100:	cmp	w0, #0x0
 104:	b.eq	1d0 <__mulsc3+0x1d0>  // b.none
 108:	ldr	s0, [sp, #12]
 10c:	fabs	s0, s0
 110:	mov	w0, #0x7f7fffff            	// #2139095039
 114:	fmov	s1, w0
 118:	fcmp	s0, s1
 11c:	cset	w0, le
 120:	and	w0, w0, #0xff
 124:	eor	w0, w0, #0x1
 128:	and	w0, w0, #0xff
 12c:	fmov	s0, w0
 130:	scvtf	s0, s0
 134:	ldr	s1, [sp, #12]
 138:	movi	v2.2s, #0x80, lsl #24
 13c:	bit	v0.8b, v1.8b, v2.8b
 140:	str	s0, [sp, #12]
 144:	ldr	s0, [sp, #8]
 148:	fabs	s0, s0
 14c:	mov	w0, #0x7f7fffff            	// #2139095039
 150:	fmov	s1, w0
 154:	fcmp	s0, s1
 158:	cset	w0, le
 15c:	and	w0, w0, #0xff
 160:	eor	w0, w0, #0x1
 164:	and	w0, w0, #0xff
 168:	fmov	s0, w0
 16c:	scvtf	s0, s0
 170:	ldr	s1, [sp, #8]
 174:	movi	v2.2s, #0x80, lsl #24
 178:	bit	v0.8b, v1.8b, v2.8b
 17c:	str	s0, [sp, #8]
 180:	ldr	s1, [sp, #4]
 184:	ldr	s0, [sp, #4]
 188:	fcmp	s1, s0
 18c:	b.vc	1a4 <__mulsc3+0x1a4>
 190:	movi	v2.2s, #0x0
 194:	ldr	s0, [sp, #4]
 198:	movi	v1.2s, #0x80, lsl #24
 19c:	bif	v0.8b, v2.8b, v1.8b
 1a0:	str	s0, [sp, #4]
 1a4:	ldr	s1, [sp]
 1a8:	ldr	s0, [sp]
 1ac:	fcmp	s1, s0
 1b0:	b.vc	1c8 <__mulsc3+0x1c8>
 1b4:	movi	v2.2s, #0x0
 1b8:	ldr	s0, [sp]
 1bc:	movi	v1.2s, #0x80, lsl #24
 1c0:	bif	v0.8b, v2.8b, v1.8b
 1c4:	str	s0, [sp]
 1c8:	mov	w0, #0x1                   	// #1
 1cc:	str	w0, [sp, #52]
 1d0:	ldr	s0, [sp, #4]
 1d4:	fabs	s0, s0
 1d8:	mov	w0, #0x7f7fffff            	// #2139095039
 1dc:	fmov	s1, w0
 1e0:	fcmp	s0, s1
 1e4:	cset	w0, le
 1e8:	and	w0, w0, #0xff
 1ec:	eor	w0, w0, #0x1
 1f0:	and	w0, w0, #0xff
 1f4:	cmp	w0, #0x0
 1f8:	b.ne	228 <__mulsc3+0x228>  // b.any
 1fc:	ldr	s0, [sp]
 200:	fabs	s0, s0
 204:	mov	w0, #0x7f7fffff            	// #2139095039
 208:	fmov	s1, w0
 20c:	fcmp	s0, s1
 210:	cset	w0, le
 214:	and	w0, w0, #0xff
 218:	eor	w0, w0, #0x1
 21c:	and	w0, w0, #0xff
 220:	cmp	w0, #0x0
 224:	b.eq	2f0 <__mulsc3+0x2f0>  // b.none
 228:	ldr	s0, [sp, #4]
 22c:	fabs	s0, s0
 230:	mov	w0, #0x7f7fffff            	// #2139095039
 234:	fmov	s1, w0
 238:	fcmp	s0, s1
 23c:	cset	w0, le
 240:	and	w0, w0, #0xff
 244:	eor	w0, w0, #0x1
 248:	and	w0, w0, #0xff
 24c:	fmov	s0, w0
 250:	scvtf	s0, s0
 254:	ldr	s1, [sp, #4]
 258:	movi	v2.2s, #0x80, lsl #24
 25c:	bit	v0.8b, v1.8b, v2.8b
 260:	str	s0, [sp, #4]
 264:	ldr	s0, [sp]
 268:	fabs	s0, s0
 26c:	mov	w0, #0x7f7fffff            	// #2139095039
 270:	fmov	s1, w0
 274:	fcmp	s0, s1
 278:	cset	w0, le
 27c:	and	w0, w0, #0xff
 280:	eor	w0, w0, #0x1
 284:	and	w0, w0, #0xff
 288:	fmov	s0, w0
 28c:	scvtf	s0, s0
 290:	ldr	s1, [sp]
 294:	movi	v2.2s, #0x80, lsl #24
 298:	bit	v0.8b, v1.8b, v2.8b
 29c:	str	s0, [sp]
 2a0:	ldr	s1, [sp, #12]
 2a4:	ldr	s0, [sp, #12]
 2a8:	fcmp	s1, s0
 2ac:	b.vc	2c4 <__mulsc3+0x2c4>
 2b0:	movi	v2.2s, #0x0
 2b4:	ldr	s0, [sp, #12]
 2b8:	movi	v1.2s, #0x80, lsl #24
 2bc:	bif	v0.8b, v2.8b, v1.8b
 2c0:	str	s0, [sp, #12]
 2c4:	ldr	s1, [sp, #8]
 2c8:	ldr	s0, [sp, #8]
 2cc:	fcmp	s1, s0
 2d0:	b.vc	2e8 <__mulsc3+0x2e8>
 2d4:	movi	v2.2s, #0x0
 2d8:	ldr	s0, [sp, #8]
 2dc:	movi	v1.2s, #0x80, lsl #24
 2e0:	bif	v0.8b, v2.8b, v1.8b
 2e4:	str	s0, [sp, #8]
 2e8:	mov	w0, #0x1                   	// #1
 2ec:	str	w0, [sp, #52]
 2f0:	ldr	w0, [sp, #52]
 2f4:	cmp	w0, #0x0
 2f8:	b.ne	444 <__mulsc3+0x444>  // b.any
 2fc:	ldr	s0, [sp, #48]
 300:	fabs	s0, s0
 304:	mov	w0, #0x7f7fffff            	// #2139095039
 308:	fmov	s1, w0
 30c:	fcmp	s0, s1
 310:	cset	w0, le
 314:	and	w0, w0, #0xff
 318:	eor	w0, w0, #0x1
 31c:	and	w0, w0, #0xff
 320:	cmp	w0, #0x0
 324:	b.ne	3ac <__mulsc3+0x3ac>  // b.any
 328:	ldr	s0, [sp, #44]
 32c:	fabs	s0, s0
 330:	mov	w0, #0x7f7fffff            	// #2139095039
 334:	fmov	s1, w0
 338:	fcmp	s0, s1
 33c:	cset	w0, le
 340:	and	w0, w0, #0xff
 344:	eor	w0, w0, #0x1
 348:	and	w0, w0, #0xff
 34c:	cmp	w0, #0x0
 350:	b.ne	3ac <__mulsc3+0x3ac>  // b.any
 354:	ldr	s0, [sp, #40]
 358:	fabs	s0, s0
 35c:	mov	w0, #0x7f7fffff            	// #2139095039
 360:	fmov	s1, w0
 364:	fcmp	s0, s1
 368:	cset	w0, le
 36c:	and	w0, w0, #0xff
 370:	eor	w0, w0, #0x1
 374:	and	w0, w0, #0xff
 378:	cmp	w0, #0x0
 37c:	b.ne	3ac <__mulsc3+0x3ac>  // b.any
 380:	ldr	s0, [sp, #36]
 384:	fabs	s0, s0
 388:	mov	w0, #0x7f7fffff            	// #2139095039
 38c:	fmov	s1, w0
 390:	fcmp	s0, s1
 394:	cset	w0, le
 398:	and	w0, w0, #0xff
 39c:	eor	w0, w0, #0x1
 3a0:	and	w0, w0, #0xff
 3a4:	cmp	w0, #0x0
 3a8:	b.eq	444 <__mulsc3+0x444>  // b.none
 3ac:	ldr	s1, [sp, #12]
 3b0:	ldr	s0, [sp, #12]
 3b4:	fcmp	s1, s0
 3b8:	b.vc	3d0 <__mulsc3+0x3d0>
 3bc:	movi	v2.2s, #0x0
 3c0:	ldr	s0, [sp, #12]
 3c4:	movi	v1.2s, #0x80, lsl #24
 3c8:	bif	v0.8b, v2.8b, v1.8b
 3cc:	str	s0, [sp, #12]
 3d0:	ldr	s1, [sp, #8]
 3d4:	ldr	s0, [sp, #8]
 3d8:	fcmp	s1, s0
 3dc:	b.vc	3f4 <__mulsc3+0x3f4>
 3e0:	movi	v2.2s, #0x0
 3e4:	ldr	s0, [sp, #8]
 3e8:	movi	v1.2s, #0x80, lsl #24
 3ec:	bif	v0.8b, v2.8b, v1.8b
 3f0:	str	s0, [sp, #8]
 3f4:	ldr	s1, [sp, #4]
 3f8:	ldr	s0, [sp, #4]
 3fc:	fcmp	s1, s0
 400:	b.vc	418 <__mulsc3+0x418>
 404:	movi	v2.2s, #0x0
 408:	ldr	s0, [sp, #4]
 40c:	movi	v1.2s, #0x80, lsl #24
 410:	bif	v0.8b, v2.8b, v1.8b
 414:	str	s0, [sp, #4]
 418:	ldr	s1, [sp]
 41c:	ldr	s0, [sp]
 420:	fcmp	s1, s0
 424:	b.vc	43c <__mulsc3+0x43c>
 428:	movi	v2.2s, #0x0
 42c:	ldr	s0, [sp]
 430:	movi	v1.2s, #0x80, lsl #24
 434:	bif	v0.8b, v2.8b, v1.8b
 438:	str	s0, [sp]
 43c:	mov	w0, #0x1                   	// #1
 440:	str	w0, [sp, #52]
 444:	ldr	w0, [sp, #52]
 448:	cmp	w0, #0x0
 44c:	b.eq	4c8 <__mulsc3+0x4c8>  // b.none
 450:	ldr	s1, [sp, #12]
 454:	ldr	s0, [sp, #4]
 458:	fmul	s1, s1, s0
 45c:	ldr	s2, [sp, #8]
 460:	ldr	s0, [sp]
 464:	fmul	s0, s2, s0
 468:	fsub	s0, s1, s0
 46c:	mov	w0, #0x7f800000            	// #2139095040
 470:	fmov	s1, w0
 474:	fmul	s0, s0, s1
 478:	str	s0, [sp, #60]
 47c:	ldr	s0, [sp, #56]
 480:	ldr	s1, [sp, #60]
 484:	str	s1, [sp, #28]
 488:	str	s0, [sp, #32]
 48c:	ldr	s1, [sp, #12]
 490:	ldr	s0, [sp]
 494:	fmul	s1, s1, s0
 498:	ldr	s2, [sp, #8]
 49c:	ldr	s0, [sp, #4]
 4a0:	fmul	s0, s2, s0
 4a4:	fadd	s0, s1, s0
 4a8:	mov	w0, #0x7f800000            	// #2139095040
 4ac:	fmov	s1, w0
 4b0:	fmul	s0, s0, s1
 4b4:	str	s0, [sp, #56]
 4b8:	ldr	s0, [sp, #56]
 4bc:	ldr	s1, [sp, #60]
 4c0:	str	s1, [sp, #28]
 4c4:	str	s0, [sp, #32]
 4c8:	ldr	s1, [sp, #60]
 4cc:	ldr	s0, [sp, #56]
 4d0:	fmov	s2, s1
 4d4:	fmov	s1, s0
 4d8:	fmov	s0, s2
 4dc:	add	sp, sp, #0x40
 4e0:	ret

mulsf3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <rep_clz>:
   0:	sub	sp, sp, #0x10
   4:	str	w0, [sp, #12]
   8:	ldr	w0, [sp, #12]
   c:	clz	w0, w0
  10:	add	sp, sp, #0x10
  14:	ret

0000000000000018 <wideMultiply>:
  18:	sub	sp, sp, #0x30
  1c:	str	w0, [sp, #28]
  20:	str	w1, [sp, #24]
  24:	str	x2, [sp, #16]
  28:	str	x3, [sp, #8]
  2c:	ldr	w1, [sp, #28]
  30:	ldr	w0, [sp, #24]
  34:	mul	x0, x1, x0
  38:	str	x0, [sp, #40]
  3c:	ldr	x0, [sp, #40]
  40:	lsr	x0, x0, #32
  44:	mov	w1, w0
  48:	ldr	x0, [sp, #16]
  4c:	str	w1, [x0]
  50:	ldr	x0, [sp, #40]
  54:	mov	w1, w0
  58:	ldr	x0, [sp, #8]
  5c:	str	w1, [x0]
  60:	nop
  64:	add	sp, sp, #0x30
  68:	ret

000000000000006c <toRep>:
  6c:	sub	sp, sp, #0x20
  70:	str	s0, [sp, #12]
  74:	ldr	s0, [sp, #12]
  78:	str	s0, [sp, #24]
  7c:	ldr	w0, [sp, #24]
  80:	add	sp, sp, #0x20
  84:	ret

0000000000000088 <fromRep>:
  88:	sub	sp, sp, #0x20
  8c:	str	w0, [sp, #12]
  90:	ldr	w0, [sp, #12]
  94:	str	w0, [sp, #24]
  98:	ldr	s0, [sp, #24]
  9c:	add	sp, sp, #0x20
  a0:	ret

00000000000000a4 <normalize>:
  a4:	stp	x29, x30, [sp, #-64]!
  a8:	mov	x29, sp
  ac:	str	x19, [sp, #16]
  b0:	str	x0, [sp, #40]
  b4:	ldr	x0, [sp, #40]
  b8:	ldr	w0, [x0]
  bc:	bl	0 <rep_clz>
  c0:	mov	w19, w0
  c4:	mov	w0, #0x800000              	// #8388608
  c8:	bl	0 <rep_clz>
  cc:	sub	w0, w19, w0
  d0:	str	w0, [sp, #60]
  d4:	ldr	x0, [sp, #40]
  d8:	ldr	w1, [x0]
  dc:	ldr	w0, [sp, #60]
  e0:	lsl	w1, w1, w0
  e4:	ldr	x0, [sp, #40]
  e8:	str	w1, [x0]
  ec:	mov	w1, #0x1                   	// #1
  f0:	ldr	w0, [sp, #60]
  f4:	sub	w0, w1, w0
  f8:	ldr	x19, [sp, #16]
  fc:	ldp	x29, x30, [sp], #64
 100:	ret

0000000000000104 <wideLeftShift>:
 104:	sub	sp, sp, #0x20
 108:	str	x0, [sp, #24]
 10c:	str	x1, [sp, #16]
 110:	str	w2, [sp, #12]
 114:	ldr	x0, [sp, #24]
 118:	ldr	w1, [x0]
 11c:	ldr	w0, [sp, #12]
 120:	lsl	w1, w1, w0
 124:	ldr	x0, [sp, #16]
 128:	ldr	w2, [x0]
 12c:	ldr	w0, [sp, #12]
 130:	mov	w3, #0x20                  	// #32
 134:	sub	w0, w3, w0
 138:	lsr	w0, w2, w0
 13c:	orr	w1, w1, w0
 140:	ldr	x0, [sp, #24]
 144:	str	w1, [x0]
 148:	ldr	x0, [sp, #16]
 14c:	ldr	w1, [x0]
 150:	ldr	w0, [sp, #12]
 154:	lsl	w1, w1, w0
 158:	ldr	x0, [sp, #16]
 15c:	str	w1, [x0]
 160:	nop
 164:	add	sp, sp, #0x20
 168:	ret

000000000000016c <wideRightShiftWithSticky>:
 16c:	sub	sp, sp, #0x30
 170:	str	x0, [sp, #24]
 174:	str	x1, [sp, #16]
 178:	str	w2, [sp, #12]
 17c:	ldr	w0, [sp, #12]
 180:	cmp	w0, #0x1f
 184:	b.hi	204 <wideRightShiftWithSticky+0x98>  // b.pmore
 188:	ldr	x0, [sp, #16]
 18c:	ldr	w1, [x0]
 190:	mov	w2, #0x20                  	// #32
 194:	ldr	w0, [sp, #12]
 198:	sub	w0, w2, w0
 19c:	lsl	w0, w1, w0
 1a0:	cmp	w0, #0x0
 1a4:	cset	w0, ne  // ne = any
 1a8:	strb	w0, [sp, #45]
 1ac:	ldr	x0, [sp, #24]
 1b0:	ldr	w1, [x0]
 1b4:	mov	w2, #0x20                  	// #32
 1b8:	ldr	w0, [sp, #12]
 1bc:	sub	w0, w2, w0
 1c0:	lsl	w1, w1, w0
 1c4:	ldr	x0, [sp, #16]
 1c8:	ldr	w2, [x0]
 1cc:	ldr	w0, [sp, #12]
 1d0:	lsr	w0, w2, w0
 1d4:	orr	w1, w1, w0
 1d8:	ldrb	w0, [sp, #45]
 1dc:	orr	w1, w1, w0
 1e0:	ldr	x0, [sp, #16]
 1e4:	str	w1, [x0]
 1e8:	ldr	x0, [sp, #24]
 1ec:	ldr	w1, [x0]
 1f0:	ldr	w0, [sp, #12]
 1f4:	lsr	w1, w1, w0
 1f8:	ldr	x0, [sp, #24]
 1fc:	str	w1, [x0]
 200:	b	2a4 <wideRightShiftWithSticky+0x138>
 204:	ldr	w0, [sp, #12]
 208:	cmp	w0, #0x3f
 20c:	b.hi	270 <wideRightShiftWithSticky+0x104>  // b.pmore
 210:	ldr	x0, [sp, #24]
 214:	ldr	w1, [x0]
 218:	mov	w2, #0x40                  	// #64
 21c:	ldr	w0, [sp, #12]
 220:	sub	w0, w2, w0
 224:	lsl	w1, w1, w0
 228:	ldr	x0, [sp, #16]
 22c:	ldr	w0, [x0]
 230:	orr	w0, w1, w0
 234:	cmp	w0, #0x0
 238:	cset	w0, ne  // ne = any
 23c:	strb	w0, [sp, #46]
 240:	ldr	x0, [sp, #24]
 244:	ldr	w1, [x0]
 248:	ldr	w0, [sp, #12]
 24c:	sub	w0, w0, #0x20
 250:	lsr	w1, w1, w0
 254:	ldrb	w0, [sp, #46]
 258:	orr	w1, w1, w0
 25c:	ldr	x0, [sp, #16]
 260:	str	w1, [x0]
 264:	ldr	x0, [sp, #24]
 268:	str	wzr, [x0]
 26c:	b	2a4 <wideRightShiftWithSticky+0x138>
 270:	ldr	x0, [sp, #24]
 274:	ldr	w1, [x0]
 278:	ldr	x0, [sp, #16]
 27c:	ldr	w0, [x0]
 280:	orr	w0, w1, w0
 284:	cmp	w0, #0x0
 288:	cset	w0, ne  // ne = any
 28c:	strb	w0, [sp, #47]
 290:	ldrb	w1, [sp, #47]
 294:	ldr	x0, [sp, #16]
 298:	str	w1, [x0]
 29c:	ldr	x0, [sp, #24]
 2a0:	str	wzr, [x0]
 2a4:	nop
 2a8:	add	sp, sp, #0x30
 2ac:	ret

00000000000002b0 <__mulXf3__>:
 2b0:	stp	x29, x30, [sp, #-96]!
 2b4:	mov	x29, sp
 2b8:	str	x19, [sp, #16]
 2bc:	str	s0, [sp, #44]
 2c0:	str	s1, [sp, #40]
 2c4:	ldr	s0, [sp, #44]
 2c8:	bl	6c <toRep>
 2cc:	lsr	w0, w0, #23
 2d0:	and	w0, w0, #0xff
 2d4:	str	w0, [sp, #84]
 2d8:	ldr	s0, [sp, #40]
 2dc:	bl	6c <toRep>
 2e0:	lsr	w0, w0, #23
 2e4:	and	w0, w0, #0xff
 2e8:	str	w0, [sp, #80]
 2ec:	ldr	s0, [sp, #44]
 2f0:	bl	6c <toRep>
 2f4:	mov	w19, w0
 2f8:	ldr	s0, [sp, #40]
 2fc:	bl	6c <toRep>
 300:	eor	w0, w19, w0
 304:	and	w0, w0, #0x80000000
 308:	str	w0, [sp, #76]
 30c:	ldr	s0, [sp, #44]
 310:	bl	6c <toRep>
 314:	and	w0, w0, #0x7fffff
 318:	str	w0, [sp, #60]
 31c:	ldr	s0, [sp, #40]
 320:	bl	6c <toRep>
 324:	and	w0, w0, #0x7fffff
 328:	str	w0, [sp, #56]
 32c:	str	wzr, [sp, #92]
 330:	ldr	w0, [sp, #84]
 334:	sub	w0, w0, #0x1
 338:	cmp	w0, #0xfd
 33c:	b.hi	350 <__mulXf3__+0xa0>  // b.pmore
 340:	ldr	w0, [sp, #80]
 344:	sub	w0, w0, #0x1
 348:	cmp	w0, #0xfd
 34c:	b.ls	4b0 <__mulXf3__+0x200>  // b.plast
 350:	ldr	s0, [sp, #44]
 354:	bl	6c <toRep>
 358:	and	w0, w0, #0x7fffffff
 35c:	str	w0, [sp, #72]
 360:	ldr	s0, [sp, #40]
 364:	bl	6c <toRep>
 368:	and	w0, w0, #0x7fffffff
 36c:	str	w0, [sp, #68]
 370:	ldr	w1, [sp, #72]
 374:	mov	w0, #0x7f800000            	// #2139095040
 378:	cmp	w1, w0
 37c:	b.ls	394 <__mulXf3__+0xe4>  // b.plast
 380:	ldr	s0, [sp, #44]
 384:	bl	6c <toRep>
 388:	orr	w0, w0, #0x400000
 38c:	bl	88 <fromRep>
 390:	b	614 <__mulXf3__+0x364>
 394:	ldr	w1, [sp, #68]
 398:	mov	w0, #0x7f800000            	// #2139095040
 39c:	cmp	w1, w0
 3a0:	b.ls	3b8 <__mulXf3__+0x108>  // b.plast
 3a4:	ldr	s0, [sp, #40]
 3a8:	bl	6c <toRep>
 3ac:	orr	w0, w0, #0x400000
 3b0:	bl	88 <fromRep>
 3b4:	b	614 <__mulXf3__+0x364>
 3b8:	ldr	w1, [sp, #72]
 3bc:	mov	w0, #0x7f800000            	// #2139095040
 3c0:	cmp	w1, w0
 3c4:	b.ne	3f4 <__mulXf3__+0x144>  // b.any
 3c8:	ldr	w0, [sp, #68]
 3cc:	cmp	w0, #0x0
 3d0:	b.eq	3e8 <__mulXf3__+0x138>  // b.none
 3d4:	ldr	w1, [sp, #72]
 3d8:	ldr	w0, [sp, #76]
 3dc:	orr	w0, w1, w0
 3e0:	bl	88 <fromRep>
 3e4:	b	614 <__mulXf3__+0x364>
 3e8:	mov	w0, #0x7fc00000            	// #2143289344
 3ec:	bl	88 <fromRep>
 3f0:	b	614 <__mulXf3__+0x364>
 3f4:	ldr	w1, [sp, #68]
 3f8:	mov	w0, #0x7f800000            	// #2139095040
 3fc:	cmp	w1, w0
 400:	b.ne	430 <__mulXf3__+0x180>  // b.any
 404:	ldr	w0, [sp, #72]
 408:	cmp	w0, #0x0
 40c:	b.eq	424 <__mulXf3__+0x174>  // b.none
 410:	ldr	w1, [sp, #68]
 414:	ldr	w0, [sp, #76]
 418:	orr	w0, w1, w0
 41c:	bl	88 <fromRep>
 420:	b	614 <__mulXf3__+0x364>
 424:	mov	w0, #0x7fc00000            	// #2143289344
 428:	bl	88 <fromRep>
 42c:	b	614 <__mulXf3__+0x364>
 430:	ldr	w0, [sp, #72]
 434:	cmp	w0, #0x0
 438:	b.ne	448 <__mulXf3__+0x198>  // b.any
 43c:	ldr	w0, [sp, #76]
 440:	bl	88 <fromRep>
 444:	b	614 <__mulXf3__+0x364>
 448:	ldr	w0, [sp, #68]
 44c:	cmp	w0, #0x0
 450:	b.ne	460 <__mulXf3__+0x1b0>  // b.any
 454:	ldr	w0, [sp, #76]
 458:	bl	88 <fromRep>
 45c:	b	614 <__mulXf3__+0x364>
 460:	ldr	w1, [sp, #72]
 464:	mov	w0, #0x7fffff              	// #8388607
 468:	cmp	w1, w0
 46c:	b.hi	488 <__mulXf3__+0x1d8>  // b.pmore
 470:	add	x0, sp, #0x3c
 474:	bl	a4 <normalize>
 478:	mov	w1, w0
 47c:	ldr	w0, [sp, #92]
 480:	add	w0, w0, w1
 484:	str	w0, [sp, #92]
 488:	ldr	w1, [sp, #68]
 48c:	mov	w0, #0x7fffff              	// #8388607
 490:	cmp	w1, w0
 494:	b.hi	4b0 <__mulXf3__+0x200>  // b.pmore
 498:	add	x0, sp, #0x38
 49c:	bl	a4 <normalize>
 4a0:	mov	w1, w0
 4a4:	ldr	w0, [sp, #92]
 4a8:	add	w0, w0, w1
 4ac:	str	w0, [sp, #92]
 4b0:	ldr	w0, [sp, #60]
 4b4:	orr	w0, w0, #0x800000
 4b8:	str	w0, [sp, #60]
 4bc:	ldr	w0, [sp, #56]
 4c0:	orr	w0, w0, #0x800000
 4c4:	str	w0, [sp, #56]
 4c8:	ldr	w4, [sp, #60]
 4cc:	ldr	w0, [sp, #56]
 4d0:	lsl	w0, w0, #8
 4d4:	add	x2, sp, #0x30
 4d8:	add	x1, sp, #0x34
 4dc:	mov	x3, x2
 4e0:	mov	x2, x1
 4e4:	mov	w1, w0
 4e8:	mov	w0, w4
 4ec:	bl	18 <wideMultiply>
 4f0:	ldr	w1, [sp, #84]
 4f4:	ldr	w0, [sp, #80]
 4f8:	add	w1, w1, w0
 4fc:	ldr	w0, [sp, #92]
 500:	add	w0, w1, w0
 504:	sub	w0, w0, #0x7f
 508:	str	w0, [sp, #88]
 50c:	ldr	w0, [sp, #52]
 510:	and	w0, w0, #0x800000
 514:	cmp	w0, #0x0
 518:	b.eq	52c <__mulXf3__+0x27c>  // b.none
 51c:	ldr	w0, [sp, #88]
 520:	add	w0, w0, #0x1
 524:	str	w0, [sp, #88]
 528:	b	53c <__mulXf3__+0x28c>
 52c:	add	x1, sp, #0x30
 530:	add	x0, sp, #0x34
 534:	mov	w2, #0x1                   	// #1
 538:	bl	104 <wideLeftShift>
 53c:	ldr	w0, [sp, #88]
 540:	cmp	w0, #0xfe
 544:	b.le	558 <__mulXf3__+0x2a8>
 548:	ldr	w0, [sp, #76]
 54c:	orr	w0, w0, #0x7f800000
 550:	bl	88 <fromRep>
 554:	b	614 <__mulXf3__+0x364>
 558:	ldr	w0, [sp, #88]
 55c:	cmp	w0, #0x0
 560:	b.gt	5a0 <__mulXf3__+0x2f0>
 564:	ldr	w0, [sp, #88]
 568:	mov	w1, #0x1                   	// #1
 56c:	sub	w0, w1, w0
 570:	str	w0, [sp, #64]
 574:	ldr	w0, [sp, #64]
 578:	cmp	w0, #0x1f
 57c:	b.ls	58c <__mulXf3__+0x2dc>  // b.plast
 580:	ldr	w0, [sp, #76]
 584:	bl	88 <fromRep>
 588:	b	614 <__mulXf3__+0x364>
 58c:	add	x1, sp, #0x30
 590:	add	x0, sp, #0x34
 594:	ldr	w2, [sp, #64]
 598:	bl	16c <wideRightShiftWithSticky>
 59c:	b	5c0 <__mulXf3__+0x310>
 5a0:	ldr	w0, [sp, #52]
 5a4:	and	w0, w0, #0x7fffff
 5a8:	str	w0, [sp, #52]
 5ac:	ldr	w0, [sp, #88]
 5b0:	lsl	w1, w0, #23
 5b4:	ldr	w0, [sp, #52]
 5b8:	orr	w0, w1, w0
 5bc:	str	w0, [sp, #52]
 5c0:	ldr	w1, [sp, #52]
 5c4:	ldr	w0, [sp, #76]
 5c8:	orr	w0, w1, w0
 5cc:	str	w0, [sp, #52]
 5d0:	ldr	w1, [sp, #48]
 5d4:	mov	w0, #0x80000000            	// #-2147483648
 5d8:	cmp	w1, w0
 5dc:	b.ls	5ec <__mulXf3__+0x33c>  // b.plast
 5e0:	ldr	w0, [sp, #52]
 5e4:	add	w0, w0, #0x1
 5e8:	str	w0, [sp, #52]
 5ec:	ldr	w1, [sp, #48]
 5f0:	mov	w0, #0x80000000            	// #-2147483648
 5f4:	cmp	w1, w0
 5f8:	b.ne	60c <__mulXf3__+0x35c>  // b.any
 5fc:	ldr	w0, [sp, #52]
 600:	add	w0, w0, #0x1
 604:	and	w0, w0, #0xfffffffe
 608:	str	w0, [sp, #52]
 60c:	ldr	w0, [sp, #52]
 610:	bl	88 <fromRep>
 614:	ldr	x19, [sp, #16]
 618:	ldp	x29, x30, [sp], #96
 61c:	ret

0000000000000620 <__mulsf3>:
 620:	stp	x29, x30, [sp, #-32]!
 624:	mov	x29, sp
 628:	str	s0, [sp, #28]
 62c:	str	s1, [sp, #24]
 630:	ldr	s1, [sp, #24]
 634:	ldr	s0, [sp, #28]
 638:	bl	2b0 <__mulXf3__>
 63c:	ldp	x29, x30, [sp], #32
 640:	ret

multi3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__mulddi3>:
   0:	sub	sp, sp, #0x40
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	mov	w0, #0x20                  	// #32
  10:	str	w0, [sp, #60]
  14:	ldr	w0, [sp, #60]
  18:	mov	x1, #0xffffffffffffffff    	// #-1
  1c:	lsr	x0, x1, x0
  20:	str	x0, [sp, #48]
  24:	ldr	x1, [sp, #8]
  28:	ldr	x0, [sp, #48]
  2c:	and	x1, x1, x0
  30:	ldr	x2, [sp]
  34:	ldr	x0, [sp, #48]
  38:	and	x0, x2, x0
  3c:	mul	x0, x1, x0
  40:	str	x0, [sp, #16]
  44:	ldr	x1, [sp, #16]
  48:	ldr	w0, [sp, #60]
  4c:	lsr	x0, x1, x0
  50:	str	x0, [sp, #40]
  54:	ldr	x1, [sp, #16]
  58:	ldr	x0, [sp, #48]
  5c:	and	x0, x1, x0
  60:	str	x0, [sp, #16]
  64:	ldr	w0, [sp, #60]
  68:	ldr	x1, [sp, #8]
  6c:	lsr	x1, x1, x0
  70:	ldr	x2, [sp]
  74:	ldr	x0, [sp, #48]
  78:	and	x0, x2, x0
  7c:	mul	x0, x1, x0
  80:	ldr	x1, [sp, #40]
  84:	add	x0, x1, x0
  88:	str	x0, [sp, #40]
  8c:	ldr	x1, [sp, #16]
  90:	ldr	x2, [sp, #40]
  94:	ldr	x0, [sp, #48]
  98:	and	x2, x2, x0
  9c:	ldr	w0, [sp, #60]
  a0:	lsl	x0, x2, x0
  a4:	add	x0, x1, x0
  a8:	str	x0, [sp, #16]
  ac:	ldr	w0, [sp, #60]
  b0:	ldr	x1, [sp, #40]
  b4:	lsr	x0, x1, x0
  b8:	str	x0, [sp, #24]
  bc:	ldr	x1, [sp, #16]
  c0:	ldr	w0, [sp, #60]
  c4:	lsr	x0, x1, x0
  c8:	str	x0, [sp, #40]
  cc:	ldr	x1, [sp, #16]
  d0:	ldr	x0, [sp, #48]
  d4:	and	x0, x1, x0
  d8:	str	x0, [sp, #16]
  dc:	ldr	w0, [sp, #60]
  e0:	ldr	x1, [sp]
  e4:	lsr	x1, x1, x0
  e8:	ldr	x2, [sp, #8]
  ec:	ldr	x0, [sp, #48]
  f0:	and	x0, x2, x0
  f4:	mul	x0, x1, x0
  f8:	ldr	x1, [sp, #40]
  fc:	add	x0, x1, x0
 100:	str	x0, [sp, #40]
 104:	ldr	x1, [sp, #16]
 108:	ldr	x2, [sp, #40]
 10c:	ldr	x0, [sp, #48]
 110:	and	x2, x2, x0
 114:	ldr	w0, [sp, #60]
 118:	lsl	x0, x2, x0
 11c:	add	x0, x1, x0
 120:	str	x0, [sp, #16]
 124:	ldr	x0, [sp, #24]
 128:	mov	x2, x0
 12c:	ldr	w0, [sp, #60]
 130:	ldr	x1, [sp, #40]
 134:	lsr	x0, x1, x0
 138:	add	x0, x2, x0
 13c:	str	x0, [sp, #24]
 140:	ldr	x0, [sp, #24]
 144:	mov	x3, x0
 148:	ldr	w0, [sp, #60]
 14c:	ldr	x1, [sp, #8]
 150:	lsr	x1, x1, x0
 154:	ldr	w0, [sp, #60]
 158:	ldr	x2, [sp]
 15c:	lsr	x0, x2, x0
 160:	mul	x0, x1, x0
 164:	add	x0, x3, x0
 168:	str	x0, [sp, #24]
 16c:	ldp	x0, x1, [sp, #16]
 170:	add	sp, sp, #0x40
 174:	ret

0000000000000178 <__multi3>:
 178:	stp	x29, x30, [sp, #-96]!
 17c:	mov	x29, sp
 180:	stp	x0, x1, [sp, #32]
 184:	stp	x2, x3, [sp, #16]
 188:	ldp	x0, x1, [sp, #32]
 18c:	stp	x0, x1, [sp, #80]
 190:	ldp	x0, x1, [sp, #16]
 194:	stp	x0, x1, [sp, #64]
 198:	ldr	x0, [sp, #80]
 19c:	ldr	x1, [sp, #64]
 1a0:	bl	0 <__mulddi3>
 1a4:	stp	x0, x1, [sp, #48]
 1a8:	ldr	x0, [sp, #56]
 1ac:	mov	x2, x0
 1b0:	ldr	x0, [sp, #88]
 1b4:	mov	x1, x0
 1b8:	ldr	x0, [sp, #64]
 1bc:	mul	x1, x1, x0
 1c0:	ldr	x0, [sp, #80]
 1c4:	ldr	x3, [sp, #72]
 1c8:	mul	x0, x0, x3
 1cc:	add	x0, x1, x0
 1d0:	add	x0, x2, x0
 1d4:	str	x0, [sp, #56]
 1d8:	ldp	x0, x1, [sp, #48]
 1dc:	ldp	x29, x30, [sp], #96
 1e0:	ret

multf3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <rep_clz>:
       0:	sub	sp, sp, #0x30
       4:	stp	x0, x1, [sp]
       8:	ldp	x0, x1, [sp]
       c:	stp	x0, x1, [sp, #16]
      10:	ldr	x0, [sp, #24]
      14:	cmp	x0, #0x0
      18:	b.eq	2c <rep_clz+0x2c>  // b.none
      1c:	ldr	x0, [sp, #24]
      20:	str	x0, [sp, #40]
      24:	str	xzr, [sp, #32]
      28:	b	3c <rep_clz+0x3c>
      2c:	ldr	x0, [sp, #16]
      30:	str	x0, [sp, #40]
      34:	mov	x0, #0x40                  	// #64
      38:	str	x0, [sp, #32]
      3c:	ldr	x0, [sp, #40]
      40:	clz	x0, x0
      44:	mov	w1, w0
      48:	ldr	x0, [sp, #32]
      4c:	add	w0, w1, w0
      50:	add	sp, sp, #0x30
      54:	ret

0000000000000058 <wideMultiply>:
      58:	sub	sp, sp, #0x590
      5c:	stp	x29, x30, [sp]
      60:	mov	x29, sp
      64:	stp	x19, x20, [sp, #16]
      68:	stp	x21, x22, [sp, #32]
      6c:	stp	x23, x24, [sp, #48]
      70:	stp	x25, x26, [sp, #64]
      74:	str	x27, [sp, #80]
      78:	add	x30, sp, #0x410
      7c:	stp	x0, x1, [x30, #96]
      80:	add	x0, sp, #0x410
      84:	stp	x2, x3, [x0, #80]
      88:	str	x4, [sp, #1112]
      8c:	str	x5, [sp, #1104]
      90:	ldr	x0, [sp, #1144]
      94:	lsr	x6, x0, #32
      98:	mov	x7, #0x0                   	// #0
      9c:	mov	x0, x6
      a0:	and	x1, x0, #0xffffffff
      a4:	ldr	x0, [sp, #1128]
      a8:	lsr	x10, x0, #32
      ac:	mov	x11, #0x0                   	// #0
      b0:	mov	x0, x10
      b4:	and	x0, x0, #0xffffffff
      b8:	mul	x0, x1, x0
      bc:	str	x0, [sp, #1416]
      c0:	ldr	x0, [sp, #1144]
      c4:	lsr	x12, x0, #32
      c8:	mov	x13, #0x0                   	// #0
      cc:	mov	x0, x12
      d0:	and	x1, x0, #0xffffffff
      d4:	ldr	x0, [sp, #1128]
      d8:	str	x0, [sp, #192]
      dc:	str	xzr, [sp, #200]
      e0:	ldr	x0, [sp, #192]
      e4:	and	x0, x0, #0xffffffff
      e8:	mul	x0, x1, x0
      ec:	str	x0, [sp, #1408]
      f0:	ldr	x0, [sp, #1144]
      f4:	lsr	x20, x0, #32
      f8:	mov	x21, #0x0                   	// #0
      fc:	mov	x0, x20
     100:	and	x2, x0, #0xffffffff
     104:	ldr	x0, [sp, #1128]
     108:	lsl	x1, x0, #32
     10c:	ldr	x0, [sp, #1120]
     110:	lsr	x8, x0, #32
     114:	orr	x8, x1, x8
     118:	ldr	x0, [sp, #1128]
     11c:	lsr	x9, x0, #32
     120:	mov	x0, x8
     124:	and	x0, x0, #0xffffffff
     128:	mul	x0, x2, x0
     12c:	str	x0, [sp, #1400]
     130:	ldr	x0, [sp, #1144]
     134:	lsr	x0, x0, #32
     138:	str	x0, [sp, #208]
     13c:	str	xzr, [sp, #216]
     140:	ldr	x0, [sp, #208]
     144:	and	x1, x0, #0xffffffff
     148:	ldr	x0, [sp, #1120]
     14c:	and	x0, x0, #0xffffffff
     150:	mul	x0, x1, x0
     154:	str	x0, [sp, #1392]
     158:	ldr	x0, [sp, #1144]
     15c:	str	x0, [sp, #224]
     160:	str	xzr, [sp, #232]
     164:	ldr	x0, [sp, #224]
     168:	and	x1, x0, #0xffffffff
     16c:	ldr	x0, [sp, #1128]
     170:	lsr	x0, x0, #32
     174:	str	x0, [sp, #240]
     178:	str	xzr, [sp, #248]
     17c:	ldr	x0, [sp, #240]
     180:	and	x0, x0, #0xffffffff
     184:	mul	x0, x1, x0
     188:	str	x0, [sp, #1384]
     18c:	ldr	x0, [sp, #1144]
     190:	str	x0, [sp, #256]
     194:	str	xzr, [sp, #264]
     198:	ldr	x0, [sp, #256]
     19c:	and	x1, x0, #0xffffffff
     1a0:	ldr	x0, [sp, #1128]
     1a4:	str	x0, [sp, #272]
     1a8:	str	xzr, [sp, #280]
     1ac:	ldr	x0, [sp, #272]
     1b0:	and	x0, x0, #0xffffffff
     1b4:	mul	x0, x1, x0
     1b8:	str	x0, [sp, #1376]
     1bc:	ldr	x0, [sp, #1144]
     1c0:	str	x0, [sp, #288]
     1c4:	str	xzr, [sp, #296]
     1c8:	ldr	x0, [sp, #288]
     1cc:	and	x2, x0, #0xffffffff
     1d0:	ldr	x0, [sp, #1128]
     1d4:	lsl	x1, x0, #32
     1d8:	ldr	x0, [sp, #1120]
     1dc:	lsr	x14, x0, #32
     1e0:	orr	x14, x1, x14
     1e4:	ldr	x0, [sp, #1128]
     1e8:	lsr	x15, x0, #32
     1ec:	mov	x0, x14
     1f0:	and	x0, x0, #0xffffffff
     1f4:	mul	x0, x2, x0
     1f8:	str	x0, [sp, #1368]
     1fc:	ldr	x0, [sp, #1144]
     200:	str	x0, [sp, #304]
     204:	str	xzr, [sp, #312]
     208:	ldr	x0, [sp, #304]
     20c:	and	x1, x0, #0xffffffff
     210:	ldr	x0, [sp, #1120]
     214:	and	x0, x0, #0xffffffff
     218:	mul	x0, x1, x0
     21c:	str	x0, [sp, #1360]
     220:	ldr	x0, [sp, #1144]
     224:	lsl	x1, x0, #32
     228:	ldr	x0, [sp, #1136]
     22c:	lsr	x16, x0, #32
     230:	orr	x16, x1, x16
     234:	ldr	x0, [sp, #1144]
     238:	lsr	x17, x0, #32
     23c:	mov	x0, x16
     240:	and	x1, x0, #0xffffffff
     244:	ldr	x0, [sp, #1128]
     248:	lsr	x0, x0, #32
     24c:	str	x0, [sp, #320]
     250:	str	xzr, [sp, #328]
     254:	ldr	x0, [sp, #320]
     258:	and	x0, x0, #0xffffffff
     25c:	mul	x0, x1, x0
     260:	str	x0, [sp, #1352]
     264:	ldr	x0, [sp, #1144]
     268:	lsl	x1, x0, #32
     26c:	ldr	x0, [sp, #1136]
     270:	lsr	x18, x0, #32
     274:	orr	x18, x1, x18
     278:	ldr	x0, [sp, #1144]
     27c:	lsr	x19, x0, #32
     280:	mov	x0, x18
     284:	and	x1, x0, #0xffffffff
     288:	ldr	x0, [sp, #1128]
     28c:	str	x0, [sp, #336]
     290:	str	xzr, [sp, #344]
     294:	ldr	x0, [sp, #336]
     298:	and	x0, x0, #0xffffffff
     29c:	mul	x0, x1, x0
     2a0:	str	x0, [sp, #1344]
     2a4:	ldr	x0, [sp, #1144]
     2a8:	lsl	x1, x0, #32
     2ac:	ldr	x0, [sp, #1136]
     2b0:	lsr	x22, x0, #32
     2b4:	orr	x22, x1, x22
     2b8:	ldr	x0, [sp, #1144]
     2bc:	lsr	x23, x0, #32
     2c0:	mov	x0, x22
     2c4:	and	x2, x0, #0xffffffff
     2c8:	ldr	x0, [sp, #1128]
     2cc:	lsl	x1, x0, #32
     2d0:	ldr	x0, [sp, #1120]
     2d4:	lsr	x24, x0, #32
     2d8:	orr	x24, x1, x24
     2dc:	ldr	x0, [sp, #1128]
     2e0:	lsr	x25, x0, #32
     2e4:	mov	x0, x24
     2e8:	and	x0, x0, #0xffffffff
     2ec:	mul	x0, x2, x0
     2f0:	str	x0, [sp, #1336]
     2f4:	ldr	x0, [sp, #1144]
     2f8:	lsl	x1, x0, #32
     2fc:	ldr	x0, [sp, #1136]
     300:	lsr	x26, x0, #32
     304:	orr	x26, x1, x26
     308:	ldr	x0, [sp, #1144]
     30c:	lsr	x27, x0, #32
     310:	mov	x0, x26
     314:	and	x1, x0, #0xffffffff
     318:	ldr	x0, [sp, #1120]
     31c:	and	x0, x0, #0xffffffff
     320:	mul	x0, x1, x0
     324:	str	x0, [sp, #1328]
     328:	ldr	x0, [sp, #1136]
     32c:	and	x1, x0, #0xffffffff
     330:	ldr	x0, [sp, #1128]
     334:	lsr	x0, x0, #32
     338:	str	x0, [sp, #352]
     33c:	str	xzr, [sp, #360]
     340:	ldr	x0, [sp, #352]
     344:	and	x0, x0, #0xffffffff
     348:	mul	x0, x1, x0
     34c:	str	x0, [sp, #1320]
     350:	ldr	x0, [sp, #1136]
     354:	and	x1, x0, #0xffffffff
     358:	ldr	x0, [sp, #1128]
     35c:	str	x0, [sp, #368]
     360:	str	xzr, [sp, #376]
     364:	ldr	x0, [sp, #368]
     368:	and	x0, x0, #0xffffffff
     36c:	mul	x0, x1, x0
     370:	str	x0, [sp, #1312]
     374:	ldr	x0, [sp, #1136]
     378:	and	x2, x0, #0xffffffff
     37c:	ldr	x0, [sp, #1128]
     380:	lsl	x1, x0, #32
     384:	ldr	x0, [sp, #1120]
     388:	lsr	x0, x0, #32
     38c:	str	x0, [sp, #96]
     390:	ldr	x0, [sp, #96]
     394:	orr	x0, x1, x0
     398:	str	x0, [sp, #96]
     39c:	ldr	x0, [sp, #1128]
     3a0:	lsr	x0, x0, #32
     3a4:	str	x0, [sp, #104]
     3a8:	ldr	x0, [sp, #96]
     3ac:	and	x0, x0, #0xffffffff
     3b0:	mul	x0, x2, x0
     3b4:	str	x0, [sp, #1304]
     3b8:	ldr	x0, [sp, #1136]
     3bc:	and	x1, x0, #0xffffffff
     3c0:	ldr	x0, [sp, #1120]
     3c4:	and	x0, x0, #0xffffffff
     3c8:	mul	x0, x1, x0
     3cc:	str	x0, [sp, #1296]
     3d0:	ldr	x0, [sp, #1296]
     3d4:	str	x0, [sp, #1280]
     3d8:	str	xzr, [sp, #1288]
     3dc:	ldr	x0, [sp, #1328]
     3e0:	str	x0, [sp, #384]
     3e4:	str	xzr, [sp, #392]
     3e8:	ldr	x0, [sp, #1304]
     3ec:	str	x0, [sp, #400]
     3f0:	str	xzr, [sp, #408]
     3f4:	ldp	x4, x5, [sp, #400]
     3f8:	mov	x0, x4
     3fc:	ldp	x2, x3, [sp, #384]
     400:	mov	x1, x2
     404:	adds	x1, x1, x0
     408:	mov	x0, x5
     40c:	mov	x2, x3
     410:	adc	x0, x2, x0
     414:	str	x1, [sp, #992]
     418:	str	x0, [sp, #1000]
     41c:	add	x0, sp, #0x410
     420:	ldp	x0, x1, [x0, #-48]
     424:	add	x2, sp, #0x410
     428:	stp	x0, x1, [x2, #224]
     42c:	ldr	x0, [sp, #1360]
     430:	str	x0, [sp, #416]
     434:	str	xzr, [sp, #424]
     438:	ldr	x0, [sp, #1336]
     43c:	str	x0, [sp, #432]
     440:	str	xzr, [sp, #440]
     444:	ldp	x4, x5, [sp, #432]
     448:	mov	x0, x4
     44c:	ldp	x2, x3, [sp, #416]
     450:	mov	x1, x2
     454:	adds	x1, x1, x0
     458:	mov	x0, x5
     45c:	mov	x2, x3
     460:	adc	x0, x2, x0
     464:	str	x1, [sp, #448]
     468:	str	x0, [sp, #456]
     46c:	ldr	x0, [sp, #1312]
     470:	str	x0, [sp, #464]
     474:	str	xzr, [sp, #472]
     478:	ldp	x4, x5, [sp, #464]
     47c:	mov	x0, x4
     480:	ldp	x2, x3, [sp, #448]
     484:	mov	x1, x2
     488:	adds	x1, x1, x0
     48c:	mov	x0, x5
     490:	mov	x2, x3
     494:	adc	x0, x2, x0
     498:	str	x1, [sp, #1008]
     49c:	str	x0, [sp, #1016]
     4a0:	add	x0, sp, #0x410
     4a4:	ldp	x0, x1, [x0, #-32]
     4a8:	add	x2, sp, #0x410
     4ac:	stp	x0, x1, [x2, #208]
     4b0:	ldr	x0, [sp, #1392]
     4b4:	str	x0, [sp, #480]
     4b8:	str	xzr, [sp, #488]
     4bc:	ldr	x0, [sp, #1368]
     4c0:	str	x0, [sp, #496]
     4c4:	str	xzr, [sp, #504]
     4c8:	ldp	x4, x5, [sp, #496]
     4cc:	mov	x0, x4
     4d0:	ldp	x2, x3, [sp, #480]
     4d4:	mov	x1, x2
     4d8:	adds	x1, x1, x0
     4dc:	mov	x0, x5
     4e0:	mov	x2, x3
     4e4:	adc	x0, x2, x0
     4e8:	str	x1, [sp, #512]
     4ec:	str	x0, [sp, #520]
     4f0:	ldr	x0, [sp, #1344]
     4f4:	str	x0, [sp, #528]
     4f8:	str	xzr, [sp, #536]
     4fc:	add	x0, sp, #0x210
     500:	ldp	x4, x5, [x0]
     504:	mov	x0, x4
     508:	add	x1, sp, #0x200
     50c:	ldp	x2, x3, [x1]
     510:	mov	x1, x2
     514:	adds	x1, x1, x0
     518:	mov	x0, x5
     51c:	mov	x2, x3
     520:	adc	x0, x2, x0
     524:	str	x1, [sp, #544]
     528:	str	x0, [sp, #552]
     52c:	ldr	x0, [sp, #1320]
     530:	str	x0, [sp, #560]
     534:	str	xzr, [sp, #568]
     538:	add	x0, sp, #0x210
     53c:	ldp	x4, x5, [x0, #32]
     540:	mov	x0, x4
     544:	add	x1, sp, #0x210
     548:	ldp	x2, x3, [x1, #16]
     54c:	mov	x1, x2
     550:	adds	x1, x1, x0
     554:	mov	x0, x5
     558:	mov	x2, x3
     55c:	adc	x0, x2, x0
     560:	str	x1, [sp, #1024]
     564:	str	x0, [sp, #1032]
     568:	add	x0, sp, #0x410
     56c:	ldp	x0, x1, [x0, #-16]
     570:	add	x2, sp, #0x410
     574:	stp	x0, x1, [x2, #192]
     578:	ldr	x0, [sp, #1400]
     57c:	str	x0, [sp, #576]
     580:	str	xzr, [sp, #584]
     584:	ldr	x0, [sp, #1376]
     588:	str	x0, [sp, #592]
     58c:	str	xzr, [sp, #600]
     590:	add	x0, sp, #0x210
     594:	ldp	x4, x5, [x0, #64]
     598:	mov	x0, x4
     59c:	add	x1, sp, #0x210
     5a0:	ldp	x2, x3, [x1, #48]
     5a4:	mov	x1, x2
     5a8:	adds	x1, x1, x0
     5ac:	mov	x0, x5
     5b0:	mov	x2, x3
     5b4:	adc	x0, x2, x0
     5b8:	str	x1, [sp, #608]
     5bc:	str	x0, [sp, #616]
     5c0:	ldr	x0, [sp, #1352]
     5c4:	str	x0, [sp, #624]
     5c8:	str	xzr, [sp, #632]
     5cc:	add	x0, sp, #0x210
     5d0:	ldp	x4, x5, [x0, #96]
     5d4:	mov	x0, x4
     5d8:	add	x1, sp, #0x210
     5dc:	ldp	x2, x3, [x1, #80]
     5e0:	mov	x1, x2
     5e4:	adds	x1, x1, x0
     5e8:	mov	x0, x5
     5ec:	mov	x2, x3
     5f0:	adc	x0, x2, x0
     5f4:	str	x1, [sp, #1040]
     5f8:	str	x0, [sp, #1048]
     5fc:	add	x0, sp, #0x410
     600:	ldp	x0, x1, [x0]
     604:	add	x2, sp, #0x410
     608:	stp	x0, x1, [x2, #176]
     60c:	ldr	x0, [sp, #1408]
     610:	str	x0, [sp, #640]
     614:	str	xzr, [sp, #648]
     618:	ldr	x0, [sp, #1384]
     61c:	str	x0, [sp, #656]
     620:	str	xzr, [sp, #664]
     624:	add	x0, sp, #0x210
     628:	ldp	x4, x5, [x0, #128]
     62c:	mov	x0, x4
     630:	add	x1, sp, #0x210
     634:	ldp	x2, x3, [x1, #112]
     638:	mov	x1, x2
     63c:	adds	x1, x1, x0
     640:	mov	x0, x5
     644:	mov	x2, x3
     648:	adc	x0, x2, x0
     64c:	str	x1, [sp, #1056]
     650:	str	x0, [sp, #1064]
     654:	add	x0, sp, #0x410
     658:	ldp	x0, x1, [x0, #16]
     65c:	add	x2, sp, #0x410
     660:	stp	x0, x1, [x2, #160]
     664:	ldr	x0, [sp, #1416]
     668:	str	x0, [sp, #1184]
     66c:	str	xzr, [sp, #1192]
     670:	ldr	x1, [sp, #1280]
     674:	mov	x0, #0xffffffffffffffff    	// #-1
     678:	and	x0, x1, x0
     67c:	str	x0, [sp, #672]
     680:	ldr	x1, [sp, #1288]
     684:	mov	x0, #0x0                   	// #0
     688:	and	x0, x1, x0
     68c:	str	x0, [sp, #680]
     690:	ldr	x0, [sp, #1264]
     694:	lsr	x1, x0, #32
     698:	ldr	x0, [sp, #1272]
     69c:	lsl	x0, x0, #32
     6a0:	str	x0, [sp, #120]
     6a4:	ldr	x0, [sp, #120]
     6a8:	orr	x0, x1, x0
     6ac:	str	x0, [sp, #120]
     6b0:	ldr	x0, [sp, #1264]
     6b4:	lsl	x0, x0, #32
     6b8:	str	x0, [sp, #112]
     6bc:	ldp	x2, x3, [sp, #112]
     6c0:	mov	x0, x2
     6c4:	and	x0, x0, #0xffffffff00000000
     6c8:	str	x0, [sp, #688]
     6cc:	mov	x0, #0x0                   	// #0
     6d0:	mov	x1, x3
     6d4:	and	x0, x1, x0
     6d8:	str	x0, [sp, #696]
     6dc:	add	x0, sp, #0x210
     6e0:	ldp	x4, x5, [x0, #160]
     6e4:	mov	x0, x4
     6e8:	add	x1, sp, #0x210
     6ec:	ldp	x2, x3, [x1, #144]
     6f0:	mov	x1, x2
     6f4:	adds	x1, x1, x0
     6f8:	mov	x0, x5
     6fc:	mov	x2, x3
     700:	adc	x0, x2, x0
     704:	str	x1, [sp, #1072]
     708:	str	x0, [sp, #1080]
     70c:	add	x0, sp, #0x410
     710:	ldp	x0, x1, [x0, #32]
     714:	add	x2, sp, #0x410
     718:	stp	x0, x1, [x2, #128]
     71c:	ldr	x0, [sp, #1288]
     720:	str	x0, [sp, #704]
     724:	str	xzr, [sp, #712]
     728:	ldr	x0, [sp, #1272]
     72c:	lsl	x1, x0, #32
     730:	ldr	x0, [sp, #1264]
     734:	lsr	x0, x0, #32
     738:	str	x0, [sp, #128]
     73c:	ldr	x0, [sp, #128]
     740:	orr	x0, x1, x0
     744:	str	x0, [sp, #128]
     748:	ldr	x0, [sp, #1272]
     74c:	lsr	x0, x0, #32
     750:	str	x0, [sp, #136]
     754:	mov	x0, #0xffffffffffffffff    	// #-1
     758:	ldp	x2, x3, [sp, #128]
     75c:	mov	x1, x2
     760:	and	x0, x1, x0
     764:	str	x0, [sp, #720]
     768:	mov	x0, #0x0                   	// #0
     76c:	mov	x1, x3
     770:	and	x0, x1, x0
     774:	str	x0, [sp, #728]
     778:	add	x0, sp, #0x210
     77c:	ldp	x4, x5, [x0, #192]
     780:	mov	x0, x4
     784:	add	x1, sp, #0x210
     788:	ldp	x2, x3, [x1, #176]
     78c:	mov	x1, x2
     790:	adds	x1, x1, x0
     794:	mov	x0, x5
     798:	mov	x2, x3
     79c:	adc	x0, x2, x0
     7a0:	str	x1, [sp, #736]
     7a4:	str	x0, [sp, #744]
     7a8:	ldr	x1, [sp, #1248]
     7ac:	mov	x0, #0xffffffffffffffff    	// #-1
     7b0:	and	x0, x1, x0
     7b4:	str	x0, [sp, #752]
     7b8:	ldr	x1, [sp, #1256]
     7bc:	mov	x0, #0x0                   	// #0
     7c0:	and	x0, x1, x0
     7c4:	str	x0, [sp, #760]
     7c8:	add	x0, sp, #0x210
     7cc:	ldp	x4, x5, [x0, #224]
     7d0:	mov	x0, x4
     7d4:	add	x1, sp, #0x210
     7d8:	ldp	x2, x3, [x1, #208]
     7dc:	mov	x1, x2
     7e0:	adds	x1, x1, x0
     7e4:	mov	x0, x5
     7e8:	mov	x2, x3
     7ec:	adc	x0, x2, x0
     7f0:	str	x1, [sp, #768]
     7f4:	str	x0, [sp, #776]
     7f8:	ldr	x0, [sp, #1232]
     7fc:	lsr	x1, x0, #32
     800:	ldr	x0, [sp, #1240]
     804:	lsl	x0, x0, #32
     808:	str	x0, [sp, #152]
     80c:	ldr	x0, [sp, #152]
     810:	orr	x0, x1, x0
     814:	str	x0, [sp, #152]
     818:	ldr	x0, [sp, #1232]
     81c:	lsl	x0, x0, #32
     820:	str	x0, [sp, #144]
     824:	ldp	x2, x3, [sp, #144]
     828:	mov	x0, x2
     82c:	and	x0, x0, #0xffffffff00000000
     830:	str	x0, [sp, #784]
     834:	mov	x0, #0x0                   	// #0
     838:	mov	x1, x3
     83c:	and	x0, x1, x0
     840:	str	x0, [sp, #792]
     844:	add	x0, sp, #0x410
     848:	ldp	x4, x5, [x0, #-256]
     84c:	mov	x0, x4
     850:	add	x1, sp, #0x210
     854:	ldp	x2, x3, [x1, #240]
     858:	mov	x1, x2
     85c:	adds	x1, x1, x0
     860:	mov	x0, x5
     864:	mov	x2, x3
     868:	adc	x0, x2, x0
     86c:	str	x1, [sp, #1088]
     870:	str	x0, [sp, #1096]
     874:	add	x0, sp, #0x410
     878:	ldp	x0, x1, [x0, #48]
     87c:	add	x2, sp, #0x410
     880:	stp	x0, x1, [x2, #112]
     884:	ldr	x0, [sp, #1152]
     888:	str	x0, [sp, #808]
     88c:	str	xzr, [sp, #800]
     890:	add	x0, sp, #0x410
     894:	ldp	x0, x1, [x0, #128]
     898:	mov	x2, x0
     89c:	add	x3, sp, #0x410
     8a0:	ldp	x4, x5, [x3, #-240]
     8a4:	mov	x3, x4
     8a8:	adds	x2, x3, x2
     8ac:	mov	x0, x1
     8b0:	mov	x1, x5
     8b4:	adc	x0, x1, x0
     8b8:	str	x2, [sp, #816]
     8bc:	str	x0, [sp, #824]
     8c0:	ldr	x0, [sp, #1104]
     8c4:	add	x1, sp, #0x410
     8c8:	ldp	x2, x3, [x1, #-224]
     8cc:	stp	x2, x3, [x0]
     8d0:	ldr	x0, [sp, #1160]
     8d4:	str	x0, [sp, #832]
     8d8:	str	xzr, [sp, #840]
     8dc:	ldr	x0, [sp, #1272]
     8e0:	lsr	x0, x0, #32
     8e4:	str	x0, [sp, #848]
     8e8:	str	xzr, [sp, #856]
     8ec:	add	x0, sp, #0x410
     8f0:	ldp	x4, x5, [x0, #-192]
     8f4:	mov	x0, x4
     8f8:	add	x1, sp, #0x410
     8fc:	ldp	x2, x3, [x1, #-208]
     900:	mov	x1, x2
     904:	adds	x1, x1, x0
     908:	mov	x0, x5
     90c:	mov	x2, x3
     910:	adc	x0, x2, x0
     914:	str	x1, [sp, #864]
     918:	str	x0, [sp, #872]
     91c:	ldr	x0, [sp, #1256]
     920:	str	x0, [sp, #880]
     924:	str	xzr, [sp, #888]
     928:	add	x0, sp, #0x410
     92c:	ldp	x4, x5, [x0, #-160]
     930:	mov	x0, x4
     934:	add	x1, sp, #0x410
     938:	ldp	x2, x3, [x1, #-176]
     93c:	mov	x1, x2
     940:	adds	x1, x1, x0
     944:	mov	x0, x5
     948:	mov	x2, x3
     94c:	adc	x0, x2, x0
     950:	str	x1, [sp, #896]
     954:	str	x0, [sp, #904]
     958:	ldr	x0, [sp, #1240]
     95c:	lsl	x0, x0, #32
     960:	ldr	x1, [sp, #1232]
     964:	lsr	x1, x1, #32
     968:	str	x1, [sp, #160]
     96c:	ldr	x1, [sp, #160]
     970:	orr	x0, x0, x1
     974:	str	x0, [sp, #160]
     978:	ldr	x0, [sp, #1240]
     97c:	lsr	x0, x0, #32
     980:	str	x0, [sp, #168]
     984:	ldp	x4, x5, [sp, #160]
     988:	mov	x0, x4
     98c:	add	x1, sp, #0x410
     990:	ldp	x2, x3, [x1, #-144]
     994:	mov	x1, x2
     998:	adds	x1, x1, x0
     99c:	mov	x0, x5
     9a0:	mov	x2, x3
     9a4:	adc	x0, x2, x0
     9a8:	str	x1, [sp, #912]
     9ac:	str	x0, [sp, #920]
     9b0:	add	x0, sp, #0x410
     9b4:	ldp	x0, x1, [x0, #176]
     9b8:	mov	x2, x0
     9bc:	add	x3, sp, #0x410
     9c0:	ldp	x4, x5, [x3, #-128]
     9c4:	mov	x3, x4
     9c8:	adds	x2, x3, x2
     9cc:	mov	x0, x1
     9d0:	mov	x1, x5
     9d4:	adc	x0, x1, x0
     9d8:	str	x2, [sp, #928]
     9dc:	str	x0, [sp, #936]
     9e0:	ldr	x0, [sp, #1200]
     9e4:	lsr	x0, x0, #32
     9e8:	ldr	x1, [sp, #1208]
     9ec:	lsl	x1, x1, #32
     9f0:	str	x1, [sp, #184]
     9f4:	ldr	x1, [sp, #184]
     9f8:	orr	x0, x0, x1
     9fc:	str	x0, [sp, #184]
     a00:	ldr	x0, [sp, #1200]
     a04:	lsl	x0, x0, #32
     a08:	str	x0, [sp, #176]
     a0c:	ldp	x4, x5, [sp, #176]
     a10:	mov	x0, x4
     a14:	add	x1, sp, #0x410
     a18:	ldp	x2, x3, [x1, #-112]
     a1c:	mov	x1, x2
     a20:	adds	x1, x1, x0
     a24:	mov	x0, x5
     a28:	mov	x2, x3
     a2c:	adc	x0, x2, x0
     a30:	str	x1, [sp, #944]
     a34:	str	x0, [sp, #952]
     a38:	ldr	x0, [sp, #1184]
     a3c:	str	x0, [sp, #968]
     a40:	str	xzr, [sp, #960]
     a44:	add	x0, sp, #0x410
     a48:	ldp	x4, x5, [x0, #-80]
     a4c:	mov	x0, x4
     a50:	add	x1, sp, #0x410
     a54:	ldp	x2, x3, [x1, #-96]
     a58:	mov	x1, x2
     a5c:	adds	x1, x1, x0
     a60:	mov	x0, x5
     a64:	mov	x2, x3
     a68:	adc	x0, x2, x0
     a6c:	str	x1, [sp, #976]
     a70:	str	x0, [sp, #984]
     a74:	ldr	x0, [sp, #1112]
     a78:	add	x1, sp, #0x410
     a7c:	ldp	x2, x3, [x1, #-64]
     a80:	stp	x2, x3, [x0]
     a84:	nop
     a88:	ldp	x19, x20, [sp, #16]
     a8c:	ldp	x21, x22, [sp, #32]
     a90:	ldp	x23, x24, [sp, #48]
     a94:	ldp	x25, x26, [sp, #64]
     a98:	ldr	x27, [sp, #80]
     a9c:	ldp	x29, x30, [sp]
     aa0:	add	sp, sp, #0x590
     aa4:	ret

0000000000000aa8 <toRep>:
     aa8:	sub	sp, sp, #0x20
     aac:	str	q0, [sp]
     ab0:	ldr	q0, [sp]
     ab4:	str	q0, [sp, #16]
     ab8:	ldp	x0, x1, [sp, #16]
     abc:	add	sp, sp, #0x20
     ac0:	ret

0000000000000ac4 <fromRep>:
     ac4:	sub	sp, sp, #0x20
     ac8:	stp	x0, x1, [sp]
     acc:	ldp	x0, x1, [sp]
     ad0:	stp	x0, x1, [sp, #16]
     ad4:	ldr	q0, [sp, #16]
     ad8:	add	sp, sp, #0x20
     adc:	ret

0000000000000ae0 <normalize>:
     ae0:	stp	x29, x30, [sp, #-80]!
     ae4:	mov	x29, sp
     ae8:	stp	x19, x20, [sp, #16]
     aec:	str	x21, [sp, #32]
     af0:	str	x0, [sp, #56]
     af4:	ldr	x0, [sp, #56]
     af8:	ldp	x0, x1, [x0]
     afc:	bl	0 <rep_clz>
     b00:	mov	w19, w0
     b04:	adrp	x0, 0 <rep_clz>
     b08:	add	x0, x0, #0x0
     b0c:	ldp	x0, x1, [x0]
     b10:	bl	0 <rep_clz>
     b14:	sub	w0, w19, w0
     b18:	str	w0, [sp, #76]
     b1c:	ldr	x0, [sp, #56]
     b20:	ldp	x0, x1, [x0]
     b24:	ldr	w2, [sp, #76]
     b28:	sub	w2, w2, #0x40
     b2c:	lsl	x3, x0, x2
     b30:	mov	x7, #0x0                   	// #0
     b34:	lsr	x5, x0, #1
     b38:	mov	w6, #0x3f                  	// #63
     b3c:	ldr	w4, [sp, #76]
     b40:	sub	w4, w6, w4
     b44:	lsr	x4, x5, x4
     b48:	ldr	w5, [sp, #76]
     b4c:	lsl	x21, x1, x5
     b50:	orr	x21, x4, x21
     b54:	ldr	w4, [sp, #76]
     b58:	lsl	x20, x0, x4
     b5c:	cmp	w2, #0x0
     b60:	csel	x21, x3, x21, ge  // ge = tcont
     b64:	cmp	w2, #0x0
     b68:	csel	x20, x7, x20, ge  // ge = tcont
     b6c:	ldr	x0, [sp, #56]
     b70:	stp	x20, x21, [x0]
     b74:	mov	w1, #0x1                   	// #1
     b78:	ldr	w0, [sp, #76]
     b7c:	sub	w0, w1, w0
     b80:	ldp	x19, x20, [sp, #16]
     b84:	ldr	x21, [sp, #32]
     b88:	ldp	x29, x30, [sp], #80
     b8c:	ret

0000000000000b90 <wideLeftShift>:
     b90:	sub	sp, sp, #0x20
     b94:	str	x0, [sp, #24]
     b98:	str	x1, [sp, #16]
     b9c:	str	w2, [sp, #12]
     ba0:	ldr	x0, [sp, #24]
     ba4:	ldp	x0, x1, [x0]
     ba8:	ldr	w2, [sp, #12]
     bac:	sub	w2, w2, #0x40
     bb0:	lsl	x3, x0, x2
     bb4:	mov	x15, #0x0                   	// #0
     bb8:	lsr	x13, x0, #1
     bbc:	mov	w14, #0x3f                  	// #63
     bc0:	ldr	w12, [sp, #12]
     bc4:	sub	w12, w14, w12
     bc8:	lsr	x12, x13, x12
     bcc:	ldr	w13, [sp, #12]
     bd0:	lsl	x7, x1, x13
     bd4:	orr	x7, x12, x7
     bd8:	ldr	w12, [sp, #12]
     bdc:	lsl	x6, x0, x12
     be0:	cmp	w2, #0x0
     be4:	csel	x7, x3, x7, ge  // ge = tcont
     be8:	cmp	w2, #0x0
     bec:	csel	x6, x15, x6, ge  // ge = tcont
     bf0:	ldr	x0, [sp, #16]
     bf4:	ldp	x0, x1, [x0]
     bf8:	ldr	w2, [sp, #12]
     bfc:	mov	w3, #0x80                  	// #128
     c00:	sub	w2, w3, w2
     c04:	sub	w3, w2, #0x40
     c08:	lsr	x12, x1, x3
     c0c:	mov	x15, #0x0                   	// #0
     c10:	lsl	x14, x1, #1
     c14:	mov	w13, #0x3f                  	// #63
     c18:	sub	w13, w13, w2
     c1c:	lsl	x13, x14, x13
     c20:	lsr	x4, x0, x2
     c24:	orr	x4, x13, x4
     c28:	lsr	x5, x1, x2
     c2c:	cmp	w3, #0x0
     c30:	csel	x4, x12, x4, ge  // ge = tcont
     c34:	cmp	w3, #0x0
     c38:	csel	x5, x15, x5, ge  // ge = tcont
     c3c:	orr	x10, x6, x4
     c40:	orr	x11, x7, x5
     c44:	ldr	x0, [sp, #24]
     c48:	stp	x10, x11, [x0]
     c4c:	ldr	x0, [sp, #16]
     c50:	ldp	x0, x1, [x0]
     c54:	ldr	w2, [sp, #12]
     c58:	sub	w2, w2, #0x40
     c5c:	lsl	x3, x0, x2
     c60:	mov	x7, #0x0                   	// #0
     c64:	lsr	x5, x0, #1
     c68:	mov	w6, #0x3f                  	// #63
     c6c:	ldr	w4, [sp, #12]
     c70:	sub	w4, w6, w4
     c74:	lsr	x4, x5, x4
     c78:	ldr	w5, [sp, #12]
     c7c:	lsl	x9, x1, x5
     c80:	orr	x9, x4, x9
     c84:	ldr	w4, [sp, #12]
     c88:	lsl	x8, x0, x4
     c8c:	cmp	w2, #0x0
     c90:	csel	x9, x3, x9, ge  // ge = tcont
     c94:	cmp	w2, #0x0
     c98:	csel	x8, x7, x8, ge  // ge = tcont
     c9c:	ldr	x0, [sp, #16]
     ca0:	stp	x8, x9, [x0]
     ca4:	nop
     ca8:	add	sp, sp, #0x20
     cac:	ret

0000000000000cb0 <wideRightShiftWithSticky>:
     cb0:	stp	x19, x20, [sp, #-160]!
     cb4:	stp	x21, x22, [sp, #16]
     cb8:	stp	x23, x24, [sp, #32]
     cbc:	stp	x25, x26, [sp, #48]
     cc0:	str	x27, [sp, #64]
     cc4:	str	x0, [sp, #136]
     cc8:	str	x1, [sp, #128]
     ccc:	str	w2, [sp, #124]
     cd0:	ldr	w0, [sp, #124]
     cd4:	cmp	w0, #0x7f
     cd8:	b.hi	e64 <wideRightShiftWithSticky+0x1b4>  // b.pmore
     cdc:	ldr	x0, [sp, #128]
     ce0:	ldp	x0, x1, [x0]
     ce4:	mov	w3, #0x80                  	// #128
     ce8:	ldr	w2, [sp, #124]
     cec:	sub	w2, w3, w2
     cf0:	sub	w3, w2, #0x40
     cf4:	lsl	x4, x0, x3
     cf8:	mov	x7, #0x0                   	// #0
     cfc:	lsr	x6, x0, #1
     d00:	mov	w5, #0x3f                  	// #63
     d04:	sub	w5, w5, w2
     d08:	lsr	x5, x6, x5
     d0c:	lsl	x13, x1, x2
     d10:	orr	x13, x5, x13
     d14:	lsl	x12, x0, x2
     d18:	cmp	w3, #0x0
     d1c:	csel	x13, x4, x13, ge  // ge = tcont
     d20:	cmp	w3, #0x0
     d24:	csel	x12, x7, x12, ge  // ge = tcont
     d28:	orr	x0, x12, x13
     d2c:	cmp	x0, #0x0
     d30:	cset	w0, ne  // ne = any
     d34:	strb	w0, [sp, #157]
     d38:	ldr	x0, [sp, #136]
     d3c:	ldp	x0, x1, [x0]
     d40:	mov	w3, #0x80                  	// #128
     d44:	ldr	w2, [sp, #124]
     d48:	sub	w2, w3, w2
     d4c:	sub	w3, w2, #0x40
     d50:	lsl	x4, x0, x3
     d54:	mov	x7, #0x0                   	// #0
     d58:	lsr	x6, x0, #1
     d5c:	mov	w5, #0x3f                  	// #63
     d60:	sub	w5, w5, w2
     d64:	lsr	x5, x6, x5
     d68:	lsl	x11, x1, x2
     d6c:	orr	x11, x5, x11
     d70:	lsl	x10, x0, x2
     d74:	cmp	w3, #0x0
     d78:	csel	x11, x4, x11, ge  // ge = tcont
     d7c:	cmp	w3, #0x0
     d80:	csel	x10, x7, x10, ge  // ge = tcont
     d84:	ldr	x0, [sp, #128]
     d88:	ldp	x0, x1, [x0]
     d8c:	ldr	w2, [sp, #124]
     d90:	sub	w2, w2, #0x40
     d94:	lsr	x3, x1, x2
     d98:	mov	x7, #0x0                   	// #0
     d9c:	lsl	x5, x1, #1
     da0:	mov	w6, #0x3f                  	// #63
     da4:	ldr	w4, [sp, #124]
     da8:	sub	w4, w6, w4
     dac:	lsl	x4, x5, x4
     db0:	ldr	w5, [sp, #124]
     db4:	lsr	x8, x0, x5
     db8:	orr	x8, x4, x8
     dbc:	ldr	w4, [sp, #124]
     dc0:	lsr	x9, x1, x4
     dc4:	cmp	w2, #0x0
     dc8:	csel	x8, x3, x8, ge  // ge = tcont
     dcc:	cmp	w2, #0x0
     dd0:	csel	x9, x7, x9, ge  // ge = tcont
     dd4:	orr	x20, x10, x8
     dd8:	orr	x21, x11, x9
     ddc:	ldrb	w0, [sp, #157]
     de0:	and	x0, x0, #0xff
     de4:	mov	x24, x0
     de8:	mov	x25, #0x0                   	// #0
     dec:	orr	x0, x20, x24
     df0:	str	x0, [sp, #80]
     df4:	orr	x0, x21, x25
     df8:	str	x0, [sp, #88]
     dfc:	ldr	x0, [sp, #128]
     e00:	ldp	x2, x3, [sp, #80]
     e04:	stp	x2, x3, [x0]
     e08:	ldr	x0, [sp, #136]
     e0c:	ldp	x0, x1, [x0]
     e10:	ldr	w2, [sp, #124]
     e14:	sub	w2, w2, #0x40
     e18:	lsr	x3, x1, x2
     e1c:	mov	x7, #0x0                   	// #0
     e20:	lsl	x5, x1, #1
     e24:	mov	w6, #0x3f                  	// #63
     e28:	ldr	w4, [sp, #124]
     e2c:	sub	w4, w6, w4
     e30:	lsl	x4, x5, x4
     e34:	ldr	w5, [sp, #124]
     e38:	lsr	x14, x0, x5
     e3c:	orr	x14, x4, x14
     e40:	ldr	w4, [sp, #124]
     e44:	lsr	x15, x1, x4
     e48:	cmp	w2, #0x0
     e4c:	csel	x14, x3, x14, ge  // ge = tcont
     e50:	cmp	w2, #0x0
     e54:	csel	x15, x7, x15, ge  // ge = tcont
     e58:	ldr	x0, [sp, #136]
     e5c:	stp	x14, x15, [x0]
     e60:	b	f9c <wideRightShiftWithSticky+0x2ec>
     e64:	ldr	w0, [sp, #124]
     e68:	cmp	w0, #0xff
     e6c:	b.hi	f50 <wideRightShiftWithSticky+0x2a0>  // b.pmore
     e70:	ldr	x0, [sp, #136]
     e74:	ldp	x0, x1, [x0]
     e78:	mov	w3, #0x100                 	// #256
     e7c:	ldr	w2, [sp, #124]
     e80:	sub	w2, w3, w2
     e84:	sub	w3, w2, #0x40
     e88:	lsl	x8, x0, x3
     e8c:	mov	x11, #0x0                   	// #0
     e90:	lsr	x10, x0, #1
     e94:	mov	w9, #0x3f                  	// #63
     e98:	sub	w9, w9, w2
     e9c:	lsr	x9, x10, x9
     ea0:	lsl	x7, x1, x2
     ea4:	orr	x7, x9, x7
     ea8:	lsl	x6, x0, x2
     eac:	cmp	w3, #0x0
     eb0:	csel	x7, x8, x7, ge  // ge = tcont
     eb4:	cmp	w3, #0x0
     eb8:	csel	x6, x11, x6, ge  // ge = tcont
     ebc:	ldr	x0, [sp, #128]
     ec0:	ldp	x0, x1, [x0]
     ec4:	orr	x18, x6, x0
     ec8:	orr	x19, x7, x1
     ecc:	orr	x0, x18, x19
     ed0:	cmp	x0, #0x0
     ed4:	cset	w0, ne  // ne = any
     ed8:	strb	w0, [sp, #158]
     edc:	ldr	x0, [sp, #136]
     ee0:	ldp	x0, x1, [x0]
     ee4:	ldr	w2, [sp, #124]
     ee8:	sub	w2, w2, #0x80
     eec:	sub	w3, w2, #0x40
     ef0:	lsr	x6, x1, x3
     ef4:	mov	x9, #0x0                   	// #0
     ef8:	lsl	x8, x1, #1
     efc:	mov	w7, #0x3f                  	// #63
     f00:	sub	w7, w7, w2
     f04:	lsl	x7, x8, x7
     f08:	lsr	x4, x0, x2
     f0c:	orr	x4, x7, x4
     f10:	lsr	x5, x1, x2
     f14:	cmp	w3, #0x0
     f18:	csel	x4, x6, x4, ge  // ge = tcont
     f1c:	cmp	w3, #0x0
     f20:	csel	x5, x9, x5, ge  // ge = tcont
     f24:	ldrb	w0, [sp, #158]
     f28:	and	x0, x0, #0xff
     f2c:	mov	x22, x0
     f30:	mov	x23, #0x0                   	// #0
     f34:	orr	x26, x4, x22
     f38:	orr	x27, x5, x23
     f3c:	ldr	x0, [sp, #128]
     f40:	stp	x26, x27, [x0]
     f44:	ldr	x0, [sp, #136]
     f48:	stp	xzr, xzr, [x0]
     f4c:	b	f9c <wideRightShiftWithSticky+0x2ec>
     f50:	ldr	x0, [sp, #136]
     f54:	ldp	x2, x3, [x0]
     f58:	ldr	x0, [sp, #128]
     f5c:	ldp	x0, x1, [x0]
     f60:	orr	x16, x2, x0
     f64:	orr	x17, x3, x1
     f68:	orr	x0, x16, x17
     f6c:	cmp	x0, #0x0
     f70:	cset	w0, ne  // ne = any
     f74:	strb	w0, [sp, #159]
     f78:	ldrb	w0, [sp, #159]
     f7c:	and	x0, x0, #0xff
     f80:	str	x0, [sp, #96]
     f84:	str	xzr, [sp, #104]
     f88:	ldr	x0, [sp, #128]
     f8c:	ldp	x2, x3, [sp, #96]
     f90:	stp	x2, x3, [x0]
     f94:	ldr	x0, [sp, #136]
     f98:	stp	xzr, xzr, [x0]
     f9c:	nop
     fa0:	ldp	x21, x22, [sp, #16]
     fa4:	ldp	x23, x24, [sp, #32]
     fa8:	ldp	x25, x26, [sp, #48]
     fac:	ldr	x27, [sp, #64]
     fb0:	ldp	x19, x20, [sp], #160
     fb4:	ret

0000000000000fb8 <__mulXf3__>:
     fb8:	sub	sp, sp, #0x220
     fbc:	stp	x29, x30, [sp]
     fc0:	mov	x29, sp
     fc4:	stp	x20, x21, [sp, #16]
     fc8:	stp	x22, x23, [sp, #32]
     fcc:	stp	x24, x25, [sp, #48]
     fd0:	stp	x26, x27, [sp, #64]
     fd4:	str	q0, [sp, #384]
     fd8:	str	q1, [sp, #368]
     fdc:	ldr	q0, [sp, #384]
     fe0:	bl	aa8 <toRep>
     fe4:	lsr	x20, x1, #48
     fe8:	mov	x21, #0x0                   	// #0
     fec:	mov	w0, w20
     ff0:	and	w0, w0, #0x7fff
     ff4:	str	w0, [sp, #532]
     ff8:	ldr	q0, [sp, #368]
     ffc:	bl	aa8 <toRep>
    1000:	lsr	x24, x1, #48
    1004:	mov	x25, #0x0                   	// #0
    1008:	mov	w0, w24
    100c:	and	w0, w0, #0x7fff
    1010:	str	w0, [sp, #528]
    1014:	ldr	q0, [sp, #384]
    1018:	bl	aa8 <toRep>
    101c:	mov	x20, x0
    1020:	mov	x21, x1
    1024:	ldr	q0, [sp, #368]
    1028:	bl	aa8 <toRep>
    102c:	eor	x22, x20, x0
    1030:	eor	x23, x21, x1
    1034:	mov	x0, #0x0                   	// #0
    1038:	and	x0, x22, x0
    103c:	str	x0, [sp, #512]
    1040:	and	x0, x23, #0x8000000000000000
    1044:	str	x0, [sp, #520]
    1048:	ldr	q0, [sp, #384]
    104c:	bl	aa8 <toRep>
    1050:	mov	x2, #0xffffffffffffffff    	// #-1
    1054:	and	x26, x0, x2
    1058:	and	x27, x1, #0xffffffffffff
    105c:	stp	x26, x27, [sp, #448]
    1060:	ldr	q0, [sp, #368]
    1064:	bl	aa8 <toRep>
    1068:	mov	x2, #0xffffffffffffffff    	// #-1
    106c:	and	x2, x0, x2
    1070:	str	x2, [sp, #96]
    1074:	and	x0, x1, #0xffffffffffff
    1078:	str	x0, [sp, #104]
    107c:	ldp	x0, x1, [sp, #96]
    1080:	stp	x0, x1, [sp, #432]
    1084:	str	wzr, [sp, #540]
    1088:	ldr	w0, [sp, #532]
    108c:	sub	w1, w0, #0x1
    1090:	mov	w0, #0x7ffd                	// #32765
    1094:	cmp	w1, w0
    1098:	b.hi	10b0 <__mulXf3__+0xf8>  // b.pmore
    109c:	ldr	w0, [sp, #528]
    10a0:	sub	w1, w0, #0x1
    10a4:	mov	w0, #0x7ffd                	// #32765
    10a8:	cmp	w1, w0
    10ac:	b.ls	1330 <__mulXf3__+0x378>  // b.plast
    10b0:	ldr	q0, [sp, #384]
    10b4:	bl	aa8 <toRep>
    10b8:	mov	x2, x0
    10bc:	mov	x3, x1
    10c0:	mov	x0, #0xffffffffffffffff    	// #-1
    10c4:	and	x0, x2, x0
    10c8:	str	x0, [sp, #496]
    10cc:	and	x0, x3, #0x7fffffffffffffff
    10d0:	str	x0, [sp, #504]
    10d4:	ldr	q0, [sp, #368]
    10d8:	bl	aa8 <toRep>
    10dc:	mov	x2, x0
    10e0:	mov	x3, x1
    10e4:	mov	x0, #0xffffffffffffffff    	// #-1
    10e8:	and	x0, x2, x0
    10ec:	str	x0, [sp, #480]
    10f0:	and	x0, x3, #0x7fffffffffffffff
    10f4:	str	x0, [sp, #488]
    10f8:	ldr	x1, [sp, #504]
    10fc:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
    1100:	cmp	x1, x0
    1104:	b.hi	1124 <__mulXf3__+0x16c>  // b.pmore
    1108:	ldr	x1, [sp, #504]
    110c:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
    1110:	cmp	x1, x0
    1114:	b.ne	114c <__mulXf3__+0x194>  // b.any
    1118:	ldr	x0, [sp, #496]
    111c:	cmp	x0, #0x0
    1120:	b.eq	114c <__mulXf3__+0x194>  // b.none
    1124:	ldr	q0, [sp, #384]
    1128:	bl	aa8 <toRep>
    112c:	mov	x2, #0x0                   	// #0
    1130:	orr	x2, x0, x2
    1134:	str	x2, [sp, #112]
    1138:	orr	x0, x1, #0x800000000000
    113c:	str	x0, [sp, #120]
    1140:	ldp	x0, x1, [sp, #112]
    1144:	bl	ac4 <fromRep>
    1148:	b	15e8 <__mulXf3__+0x630>
    114c:	ldr	x1, [sp, #488]
    1150:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
    1154:	cmp	x1, x0
    1158:	b.hi	1178 <__mulXf3__+0x1c0>  // b.pmore
    115c:	ldr	x1, [sp, #488]
    1160:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
    1164:	cmp	x1, x0
    1168:	b.ne	11a0 <__mulXf3__+0x1e8>  // b.any
    116c:	ldr	x0, [sp, #480]
    1170:	cmp	x0, #0x0
    1174:	b.eq	11a0 <__mulXf3__+0x1e8>  // b.none
    1178:	ldr	q0, [sp, #368]
    117c:	bl	aa8 <toRep>
    1180:	mov	x2, #0x0                   	// #0
    1184:	orr	x2, x0, x2
    1188:	str	x2, [sp, #128]
    118c:	orr	x0, x1, #0x800000000000
    1190:	str	x0, [sp, #136]
    1194:	ldp	x0, x1, [sp, #128]
    1198:	bl	ac4 <fromRep>
    119c:	b	15e8 <__mulXf3__+0x630>
    11a0:	ldr	x0, [sp, #496]
    11a4:	cmp	x0, #0x0
    11a8:	b.ne	1210 <__mulXf3__+0x258>  // b.any
    11ac:	ldr	x1, [sp, #504]
    11b0:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
    11b4:	cmp	x1, x0
    11b8:	b.ne	1210 <__mulXf3__+0x258>  // b.any
    11bc:	ldr	x0, [sp, #480]
    11c0:	ldr	x1, [sp, #488]
    11c4:	orr	x0, x0, x1
    11c8:	cmp	x0, #0x0
    11cc:	b.eq	11fc <__mulXf3__+0x244>  // b.none
    11d0:	ldr	x1, [sp, #496]
    11d4:	ldr	x0, [sp, #512]
    11d8:	orr	x0, x1, x0
    11dc:	str	x0, [sp, #144]
    11e0:	ldr	x1, [sp, #504]
    11e4:	ldr	x0, [sp, #520]
    11e8:	orr	x0, x1, x0
    11ec:	str	x0, [sp, #152]
    11f0:	ldp	x0, x1, [sp, #144]
    11f4:	bl	ac4 <fromRep>
    11f8:	b	15e8 <__mulXf3__+0x630>
    11fc:	adrp	x0, 0 <rep_clz>
    1200:	add	x0, x0, #0x0
    1204:	ldp	x0, x1, [x0]
    1208:	bl	ac4 <fromRep>
    120c:	b	15e8 <__mulXf3__+0x630>
    1210:	ldr	x0, [sp, #480]
    1214:	cmp	x0, #0x0
    1218:	b.ne	1280 <__mulXf3__+0x2c8>  // b.any
    121c:	ldr	x1, [sp, #488]
    1220:	mov	x0, #0x7fff000000000000    	// #9223090561878065152
    1224:	cmp	x1, x0
    1228:	b.ne	1280 <__mulXf3__+0x2c8>  // b.any
    122c:	ldr	x0, [sp, #496]
    1230:	ldr	x1, [sp, #504]
    1234:	orr	x0, x0, x1
    1238:	cmp	x0, #0x0
    123c:	b.eq	126c <__mulXf3__+0x2b4>  // b.none
    1240:	ldr	x1, [sp, #480]
    1244:	ldr	x0, [sp, #512]
    1248:	orr	x0, x1, x0
    124c:	str	x0, [sp, #160]
    1250:	ldr	x1, [sp, #488]
    1254:	ldr	x0, [sp, #520]
    1258:	orr	x0, x1, x0
    125c:	str	x0, [sp, #168]
    1260:	ldp	x0, x1, [sp, #160]
    1264:	bl	ac4 <fromRep>
    1268:	b	15e8 <__mulXf3__+0x630>
    126c:	adrp	x0, 0 <rep_clz>
    1270:	add	x0, x0, #0x0
    1274:	ldp	x0, x1, [x0]
    1278:	bl	ac4 <fromRep>
    127c:	b	15e8 <__mulXf3__+0x630>
    1280:	ldr	x0, [sp, #496]
    1284:	ldr	x1, [sp, #504]
    1288:	orr	x0, x0, x1
    128c:	cmp	x0, #0x0
    1290:	b.ne	12a4 <__mulXf3__+0x2ec>  // b.any
    1294:	add	x0, sp, #0x200
    1298:	ldp	x0, x1, [x0]
    129c:	bl	ac4 <fromRep>
    12a0:	b	15e8 <__mulXf3__+0x630>
    12a4:	ldr	x0, [sp, #480]
    12a8:	ldr	x1, [sp, #488]
    12ac:	orr	x0, x0, x1
    12b0:	cmp	x0, #0x0
    12b4:	b.ne	12c8 <__mulXf3__+0x310>  // b.any
    12b8:	add	x0, sp, #0x200
    12bc:	ldp	x0, x1, [x0]
    12c0:	bl	ac4 <fromRep>
    12c4:	b	15e8 <__mulXf3__+0x630>
    12c8:	ldr	x1, [sp, #504]
    12cc:	mov	x0, #0xffffffffffff        	// #281474976710655
    12d0:	cmp	x1, x0
    12d4:	b.hi	12fc <__mulXf3__+0x344>  // b.pmore
    12d8:	ldr	x1, [sp, #504]
    12dc:	mov	x0, #0xffffffffffff        	// #281474976710655
    12e0:	cmp	x1, x0
    12e4:	add	x0, sp, #0x1c0
    12e8:	bl	ae0 <normalize>
    12ec:	mov	w1, w0
    12f0:	ldr	w0, [sp, #540]
    12f4:	add	w0, w0, w1
    12f8:	str	w0, [sp, #540]
    12fc:	ldr	x1, [sp, #488]
    1300:	mov	x0, #0xffffffffffff        	// #281474976710655
    1304:	cmp	x1, x0
    1308:	b.hi	1330 <__mulXf3__+0x378>  // b.pmore
    130c:	ldr	x1, [sp, #488]
    1310:	mov	x0, #0xffffffffffff        	// #281474976710655
    1314:	cmp	x1, x0
    1318:	add	x0, sp, #0x1b0
    131c:	bl	ae0 <normalize>
    1320:	mov	w1, w0
    1324:	ldr	w0, [sp, #540]
    1328:	add	w0, w0, w1
    132c:	str	w0, [sp, #540]
    1330:	ldp	x0, x1, [sp, #448]
    1334:	mov	x2, #0x0                   	// #0
    1338:	orr	x2, x0, x2
    133c:	str	x2, [sp, #176]
    1340:	orr	x0, x1, #0x1000000000000
    1344:	str	x0, [sp, #184]
    1348:	ldp	x0, x1, [sp, #176]
    134c:	stp	x0, x1, [sp, #448]
    1350:	ldp	x0, x1, [sp, #432]
    1354:	mov	x2, #0x0                   	// #0
    1358:	orr	x2, x0, x2
    135c:	str	x2, [sp, #192]
    1360:	orr	x0, x1, #0x1000000000000
    1364:	str	x0, [sp, #200]
    1368:	ldp	x0, x1, [sp, #192]
    136c:	stp	x0, x1, [sp, #432]
    1370:	ldp	x6, x7, [sp, #448]
    1374:	ldp	x0, x1, [sp, #432]
    1378:	lsr	x2, x0, #49
    137c:	lsl	x3, x1, #15
    1380:	str	x3, [sp, #88]
    1384:	ldr	x3, [sp, #88]
    1388:	orr	x2, x2, x3
    138c:	str	x2, [sp, #88]
    1390:	lsl	x0, x0, #15
    1394:	str	x0, [sp, #80]
    1398:	add	x1, sp, #0x190
    139c:	add	x0, sp, #0x1a0
    13a0:	mov	x5, x1
    13a4:	mov	x4, x0
    13a8:	ldp	x2, x3, [sp, #80]
    13ac:	mov	x0, x6
    13b0:	mov	x1, x7
    13b4:	bl	58 <wideMultiply>
    13b8:	ldr	w1, [sp, #532]
    13bc:	ldr	w0, [sp, #528]
    13c0:	add	w1, w1, w0
    13c4:	ldr	w0, [sp, #540]
    13c8:	add	w1, w1, w0
    13cc:	mov	w0, #0xffffc001            	// #-16383
    13d0:	add	w0, w1, w0
    13d4:	str	w0, [sp, #536]
    13d8:	ldp	x0, x1, [sp, #416]
    13dc:	mov	x2, #0x0                   	// #0
    13e0:	and	x2, x0, x2
    13e4:	str	x2, [sp, #208]
    13e8:	and	x0, x1, #0x1000000000000
    13ec:	str	x0, [sp, #216]
    13f0:	ldp	x2, x3, [sp, #208]
    13f4:	mov	x0, x2
    13f8:	mov	x1, x3
    13fc:	orr	x0, x0, x1
    1400:	cmp	x0, #0x0
    1404:	b.eq	1418 <__mulXf3__+0x460>  // b.none
    1408:	ldr	w0, [sp, #536]
    140c:	add	w0, w0, #0x1
    1410:	str	w0, [sp, #536]
    1414:	b	1428 <__mulXf3__+0x470>
    1418:	add	x1, sp, #0x190
    141c:	add	x0, sp, #0x1a0
    1420:	mov	w2, #0x1                   	// #1
    1424:	bl	b90 <wideLeftShift>
    1428:	ldr	w1, [sp, #536]
    142c:	mov	w0, #0x7ffe                	// #32766
    1430:	cmp	w1, w0
    1434:	b.le	1460 <__mulXf3__+0x4a8>
    1438:	ldr	x0, [sp, #512]
    143c:	mov	x1, #0x0                   	// #0
    1440:	orr	x0, x0, x1
    1444:	str	x0, [sp, #224]
    1448:	ldr	x0, [sp, #520]
    144c:	orr	x0, x0, #0x7fff000000000000
    1450:	str	x0, [sp, #232]
    1454:	ldp	x0, x1, [sp, #224]
    1458:	bl	ac4 <fromRep>
    145c:	b	15e8 <__mulXf3__+0x630>
    1460:	ldr	w0, [sp, #536]
    1464:	cmp	w0, #0x0
    1468:	b.gt	14ac <__mulXf3__+0x4f4>
    146c:	ldr	w0, [sp, #536]
    1470:	mov	w1, #0x1                   	// #1
    1474:	sub	w0, w1, w0
    1478:	str	w0, [sp, #476]
    147c:	ldr	w0, [sp, #476]
    1480:	cmp	w0, #0x7f
    1484:	b.ls	1498 <__mulXf3__+0x4e0>  // b.plast
    1488:	add	x0, sp, #0x200
    148c:	ldp	x0, x1, [x0]
    1490:	bl	ac4 <fromRep>
    1494:	b	15e8 <__mulXf3__+0x630>
    1498:	add	x1, sp, #0x190
    149c:	add	x0, sp, #0x1a0
    14a0:	ldr	w2, [sp, #476]
    14a4:	bl	cb0 <wideRightShiftWithSticky>
    14a8:	b	1518 <__mulXf3__+0x560>
    14ac:	ldp	x0, x1, [sp, #416]
    14b0:	mov	x2, #0xffffffffffffffff    	// #-1
    14b4:	and	x2, x0, x2
    14b8:	str	x2, [sp, #240]
    14bc:	and	x0, x1, #0xffffffffffff
    14c0:	str	x0, [sp, #248]
    14c4:	ldp	x0, x1, [sp, #240]
    14c8:	stp	x0, x1, [sp, #416]
    14cc:	ldr	w0, [sp, #536]
    14d0:	sxtw	x0, w0
    14d4:	str	x0, [sp, #256]
    14d8:	asr	x0, x0, #63
    14dc:	str	x0, [sp, #264]
    14e0:	ldr	x0, [sp, #256]
    14e4:	lsl	x0, x0, #48
    14e8:	str	x0, [sp, #280]
    14ec:	str	xzr, [sp, #272]
    14f0:	ldp	x0, x1, [sp, #416]
    14f4:	ldp	x2, x3, [sp, #272]
    14f8:	mov	x4, x2
    14fc:	orr	x4, x4, x0
    1500:	str	x4, [sp, #288]
    1504:	mov	x2, x3
    1508:	orr	x0, x2, x1
    150c:	str	x0, [sp, #296]
    1510:	ldp	x0, x1, [sp, #288]
    1514:	stp	x0, x1, [sp, #416]
    1518:	ldp	x0, x1, [sp, #416]
    151c:	ldr	x2, [sp, #512]
    1520:	orr	x2, x2, x0
    1524:	str	x2, [sp, #304]
    1528:	ldr	x2, [sp, #520]
    152c:	orr	x0, x2, x1
    1530:	str	x0, [sp, #312]
    1534:	ldp	x0, x1, [sp, #304]
    1538:	stp	x0, x1, [sp, #416]
    153c:	ldp	x0, x1, [sp, #400]
    1540:	mov	x2, #0x8000000000000000    	// #-9223372036854775808
    1544:	cmp	x1, x2
    1548:	b.hi	1560 <__mulXf3__+0x5a8>  // b.pmore
    154c:	mov	x2, #0x8000000000000000    	// #-9223372036854775808
    1550:	cmp	x1, x2
    1554:	b.ne	1584 <__mulXf3__+0x5cc>  // b.any
    1558:	cmp	x0, #0x0
    155c:	b.eq	1584 <__mulXf3__+0x5cc>  // b.none
    1560:	ldp	x0, x1, [sp, #416]
    1564:	mov	x2, #0x1                   	// #1
    1568:	adds	x2, x0, x2
    156c:	mov	x3, #0x0                   	// #0
    1570:	adc	x0, x1, x3
    1574:	str	x2, [sp, #320]
    1578:	str	x0, [sp, #328]
    157c:	ldp	x0, x1, [sp, #320]
    1580:	stp	x0, x1, [sp, #416]
    1584:	ldp	x0, x1, [sp, #400]
    1588:	cmp	x0, #0x0
    158c:	b.ne	15e0 <__mulXf3__+0x628>  // b.any
    1590:	mov	x2, #0x8000000000000000    	// #-9223372036854775808
    1594:	cmp	x1, x2
    1598:	b.ne	15e0 <__mulXf3__+0x628>  // b.any
    159c:	ldp	x0, x1, [sp, #416]
    15a0:	mov	x2, #0x1                   	// #1
    15a4:	adds	x2, x0, x2
    15a8:	mov	x3, #0x0                   	// #0
    15ac:	adc	x0, x1, x3
    15b0:	str	x2, [sp, #336]
    15b4:	str	x0, [sp, #344]
    15b8:	ldp	x2, x3, [sp, #336]
    15bc:	mov	x0, x2
    15c0:	and	x0, x0, #0xfffffffffffffffe
    15c4:	str	x0, [sp, #352]
    15c8:	mov	x0, #0xffffffffffffffff    	// #-1
    15cc:	mov	x1, x3
    15d0:	and	x0, x1, x0
    15d4:	str	x0, [sp, #360]
    15d8:	ldp	x0, x1, [sp, #352]
    15dc:	stp	x0, x1, [sp, #416]
    15e0:	ldp	x0, x1, [sp, #416]
    15e4:	bl	ac4 <fromRep>
    15e8:	ldp	x20, x21, [sp, #16]
    15ec:	ldp	x22, x23, [sp, #32]
    15f0:	ldp	x24, x25, [sp, #48]
    15f4:	ldp	x26, x27, [sp, #64]
    15f8:	ldp	x29, x30, [sp]
    15fc:	add	sp, sp, #0x220
    1600:	ret

0000000000001604 <__multf3>:
    1604:	stp	x29, x30, [sp, #-48]!
    1608:	mov	x29, sp
    160c:	str	q0, [sp, #32]
    1610:	str	q1, [sp, #16]
    1614:	ldr	q1, [sp, #16]
    1618:	ldr	q0, [sp, #32]
    161c:	bl	fb8 <__mulXf3__>
    1620:	ldp	x29, x30, [sp], #48
    1624:	ret

mulvdi3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__mulvdi3>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	mov	w0, #0x40                  	// #64
  14:	str	w0, [sp, #92]
  18:	ldr	w0, [sp, #92]
  1c:	sub	w0, w0, #0x1
  20:	mov	x1, #0x1                   	// #1
  24:	lsl	x0, x1, x0
  28:	str	x0, [sp, #80]
  2c:	ldr	x0, [sp, #80]
  30:	mvn	x0, x0
  34:	str	x0, [sp, #72]
  38:	ldr	x1, [sp, #24]
  3c:	ldr	x0, [sp, #80]
  40:	cmp	x1, x0
  44:	b.ne	88 <__mulvdi3+0x88>  // b.any
  48:	ldr	x0, [sp, #16]
  4c:	cmp	x0, #0x0
  50:	b.eq	60 <__mulvdi3+0x60>  // b.none
  54:	ldr	x0, [sp, #16]
  58:	cmp	x0, #0x1
  5c:	b.ne	70 <__mulvdi3+0x70>  // b.any
  60:	ldr	x1, [sp, #24]
  64:	ldr	x0, [sp, #16]
  68:	mul	x0, x1, x0
  6c:	b	1d8 <__mulvdi3+0x1d8>
  70:	adrp	x0, 0 <__mulvdi3>
  74:	add	x2, x0, #0x0
  78:	mov	w1, #0x1a                  	// #26
  7c:	adrp	x0, 0 <__mulvdi3>
  80:	add	x0, x0, #0x0
  84:	bl	0 <__compilerrt_abort_impl>
  88:	ldr	x1, [sp, #16]
  8c:	ldr	x0, [sp, #80]
  90:	cmp	x1, x0
  94:	b.ne	d8 <__mulvdi3+0xd8>  // b.any
  98:	ldr	x0, [sp, #24]
  9c:	cmp	x0, #0x0
  a0:	b.eq	b0 <__mulvdi3+0xb0>  // b.none
  a4:	ldr	x0, [sp, #24]
  a8:	cmp	x0, #0x1
  ac:	b.ne	c0 <__mulvdi3+0xc0>  // b.any
  b0:	ldr	x1, [sp, #24]
  b4:	ldr	x0, [sp, #16]
  b8:	mul	x0, x1, x0
  bc:	b	1d8 <__mulvdi3+0x1d8>
  c0:	adrp	x0, 0 <__mulvdi3>
  c4:	add	x2, x0, #0x0
  c8:	mov	w1, #0x1f                  	// #31
  cc:	adrp	x0, 0 <__mulvdi3>
  d0:	add	x0, x0, #0x0
  d4:	bl	0 <__compilerrt_abort_impl>
  d8:	ldr	w0, [sp, #92]
  dc:	sub	w0, w0, #0x1
  e0:	ldr	x1, [sp, #24]
  e4:	asr	x0, x1, x0
  e8:	str	x0, [sp, #64]
  ec:	ldr	x1, [sp, #24]
  f0:	ldr	x0, [sp, #64]
  f4:	eor	x1, x1, x0
  f8:	ldr	x0, [sp, #64]
  fc:	sub	x0, x1, x0
 100:	str	x0, [sp, #56]
 104:	ldr	w0, [sp, #92]
 108:	sub	w0, w0, #0x1
 10c:	ldr	x1, [sp, #16]
 110:	asr	x0, x1, x0
 114:	str	x0, [sp, #48]
 118:	ldr	x1, [sp, #16]
 11c:	ldr	x0, [sp, #48]
 120:	eor	x1, x1, x0
 124:	ldr	x0, [sp, #48]
 128:	sub	x0, x1, x0
 12c:	str	x0, [sp, #40]
 130:	ldr	x0, [sp, #56]
 134:	cmp	x0, #0x1
 138:	b.le	148 <__mulvdi3+0x148>
 13c:	ldr	x0, [sp, #40]
 140:	cmp	x0, #0x1
 144:	b.gt	158 <__mulvdi3+0x158>
 148:	ldr	x1, [sp, #24]
 14c:	ldr	x0, [sp, #16]
 150:	mul	x0, x1, x0
 154:	b	1d8 <__mulvdi3+0x1d8>
 158:	ldr	x1, [sp, #64]
 15c:	ldr	x0, [sp, #48]
 160:	cmp	x1, x0
 164:	b.ne	198 <__mulvdi3+0x198>  // b.any
 168:	ldr	x1, [sp, #72]
 16c:	ldr	x0, [sp, #40]
 170:	sdiv	x0, x1, x0
 174:	ldr	x1, [sp, #56]
 178:	cmp	x1, x0
 17c:	b.le	1cc <__mulvdi3+0x1cc>
 180:	adrp	x0, 0 <__mulvdi3>
 184:	add	x2, x0, #0x0
 188:	mov	w1, #0x29                  	// #41
 18c:	adrp	x0, 0 <__mulvdi3>
 190:	add	x0, x0, #0x0
 194:	bl	0 <__compilerrt_abort_impl>
 198:	ldr	x0, [sp, #40]
 19c:	neg	x0, x0
 1a0:	ldr	x1, [sp, #80]
 1a4:	sdiv	x0, x1, x0
 1a8:	ldr	x1, [sp, #56]
 1ac:	cmp	x1, x0
 1b0:	b.le	1cc <__mulvdi3+0x1cc>
 1b4:	adrp	x0, 0 <__mulvdi3>
 1b8:	add	x2, x0, #0x0
 1bc:	mov	w1, #0x2c                  	// #44
 1c0:	adrp	x0, 0 <__mulvdi3>
 1c4:	add	x0, x0, #0x0
 1c8:	bl	0 <__compilerrt_abort_impl>
 1cc:	ldr	x1, [sp, #24]
 1d0:	ldr	x0, [sp, #16]
 1d4:	mul	x0, x1, x0
 1d8:	ldp	x29, x30, [sp], #96
 1dc:	ret

mulvsi3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__mulvsi3>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	w0, [sp, #28]
   c:	str	w1, [sp, #24]
  10:	mov	w0, #0x20                  	// #32
  14:	str	w0, [sp, #60]
  18:	ldr	w0, [sp, #60]
  1c:	sub	w0, w0, #0x1
  20:	mov	w1, #0x1                   	// #1
  24:	lsl	w0, w1, w0
  28:	str	w0, [sp, #56]
  2c:	ldr	w0, [sp, #56]
  30:	mvn	w0, w0
  34:	str	w0, [sp, #52]
  38:	ldr	w1, [sp, #28]
  3c:	ldr	w0, [sp, #56]
  40:	cmp	w1, w0
  44:	b.ne	88 <__mulvsi3+0x88>  // b.any
  48:	ldr	w0, [sp, #24]
  4c:	cmp	w0, #0x0
  50:	b.eq	60 <__mulvsi3+0x60>  // b.none
  54:	ldr	w0, [sp, #24]
  58:	cmp	w0, #0x1
  5c:	b.ne	70 <__mulvsi3+0x70>  // b.any
  60:	ldr	w1, [sp, #28]
  64:	ldr	w0, [sp, #24]
  68:	mul	w0, w1, w0
  6c:	b	1d8 <__mulvsi3+0x1d8>
  70:	adrp	x0, 0 <__mulvsi3>
  74:	add	x2, x0, #0x0
  78:	mov	w1, #0x1a                  	// #26
  7c:	adrp	x0, 0 <__mulvsi3>
  80:	add	x0, x0, #0x0
  84:	bl	0 <__compilerrt_abort_impl>
  88:	ldr	w1, [sp, #24]
  8c:	ldr	w0, [sp, #56]
  90:	cmp	w1, w0
  94:	b.ne	d8 <__mulvsi3+0xd8>  // b.any
  98:	ldr	w0, [sp, #28]
  9c:	cmp	w0, #0x0
  a0:	b.eq	b0 <__mulvsi3+0xb0>  // b.none
  a4:	ldr	w0, [sp, #28]
  a8:	cmp	w0, #0x1
  ac:	b.ne	c0 <__mulvsi3+0xc0>  // b.any
  b0:	ldr	w1, [sp, #28]
  b4:	ldr	w0, [sp, #24]
  b8:	mul	w0, w1, w0
  bc:	b	1d8 <__mulvsi3+0x1d8>
  c0:	adrp	x0, 0 <__mulvsi3>
  c4:	add	x2, x0, #0x0
  c8:	mov	w1, #0x1f                  	// #31
  cc:	adrp	x0, 0 <__mulvsi3>
  d0:	add	x0, x0, #0x0
  d4:	bl	0 <__compilerrt_abort_impl>
  d8:	ldr	w0, [sp, #60]
  dc:	sub	w0, w0, #0x1
  e0:	ldr	w1, [sp, #28]
  e4:	asr	w0, w1, w0
  e8:	str	w0, [sp, #48]
  ec:	ldr	w1, [sp, #28]
  f0:	ldr	w0, [sp, #48]
  f4:	eor	w1, w1, w0
  f8:	ldr	w0, [sp, #48]
  fc:	sub	w0, w1, w0
 100:	str	w0, [sp, #44]
 104:	ldr	w0, [sp, #60]
 108:	sub	w0, w0, #0x1
 10c:	ldr	w1, [sp, #24]
 110:	asr	w0, w1, w0
 114:	str	w0, [sp, #40]
 118:	ldr	w1, [sp, #24]
 11c:	ldr	w0, [sp, #40]
 120:	eor	w1, w1, w0
 124:	ldr	w0, [sp, #40]
 128:	sub	w0, w1, w0
 12c:	str	w0, [sp, #36]
 130:	ldr	w0, [sp, #44]
 134:	cmp	w0, #0x1
 138:	b.le	148 <__mulvsi3+0x148>
 13c:	ldr	w0, [sp, #36]
 140:	cmp	w0, #0x1
 144:	b.gt	158 <__mulvsi3+0x158>
 148:	ldr	w1, [sp, #28]
 14c:	ldr	w0, [sp, #24]
 150:	mul	w0, w1, w0
 154:	b	1d8 <__mulvsi3+0x1d8>
 158:	ldr	w1, [sp, #48]
 15c:	ldr	w0, [sp, #40]
 160:	cmp	w1, w0
 164:	b.ne	198 <__mulvsi3+0x198>  // b.any
 168:	ldr	w1, [sp, #52]
 16c:	ldr	w0, [sp, #36]
 170:	sdiv	w0, w1, w0
 174:	ldr	w1, [sp, #44]
 178:	cmp	w1, w0
 17c:	b.le	1cc <__mulvsi3+0x1cc>
 180:	adrp	x0, 0 <__mulvsi3>
 184:	add	x2, x0, #0x0
 188:	mov	w1, #0x29                  	// #41
 18c:	adrp	x0, 0 <__mulvsi3>
 190:	add	x0, x0, #0x0
 194:	bl	0 <__compilerrt_abort_impl>
 198:	ldr	w0, [sp, #36]
 19c:	neg	w0, w0
 1a0:	ldr	w1, [sp, #56]
 1a4:	sdiv	w0, w1, w0
 1a8:	ldr	w1, [sp, #44]
 1ac:	cmp	w1, w0
 1b0:	b.le	1cc <__mulvsi3+0x1cc>
 1b4:	adrp	x0, 0 <__mulvsi3>
 1b8:	add	x2, x0, #0x0
 1bc:	mov	w1, #0x2c                  	// #44
 1c0:	adrp	x0, 0 <__mulvsi3>
 1c4:	add	x0, x0, #0x0
 1c8:	bl	0 <__compilerrt_abort_impl>
 1cc:	ldr	w1, [sp, #28]
 1d0:	ldr	w0, [sp, #24]
 1d4:	mul	w0, w1, w0
 1d8:	ldp	x29, x30, [sp], #64
 1dc:	ret

mulvti3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__mulvti3>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	mov	x29, sp
   8:	stp	x20, x21, [sp, #16]
   c:	stp	x0, x1, [sp, #48]
  10:	stp	x2, x3, [sp, #32]
  14:	mov	w0, #0x80                  	// #128
  18:	str	w0, [sp, #172]
  1c:	ldr	w0, [sp, #172]
  20:	sub	w0, w0, #0x1
  24:	sub	w1, w0, #0x40
  28:	mov	x2, #0x1                   	// #1
  2c:	lsl	x2, x2, x1
  30:	mov	x15, #0x0                   	// #0
  34:	mov	x3, #0x1                   	// #1
  38:	lsr	x14, x3, #1
  3c:	mov	w3, #0x3f                  	// #63
  40:	sub	w3, w3, w0
  44:	lsr	x3, x14, x3
  48:	mov	x14, #0x0                   	// #0
  4c:	lsl	x14, x14, x0
  50:	orr	x3, x14, x3
  54:	str	x3, [sp, #152]
  58:	mov	x3, #0x1                   	// #1
  5c:	lsl	x0, x3, x0
  60:	str	x0, [sp, #144]
  64:	ldr	x0, [sp, #152]
  68:	cmp	w1, #0x0
  6c:	csel	x0, x0, x2, lt  // lt = tstop
  70:	str	x0, [sp, #152]
  74:	ldr	x0, [sp, #144]
  78:	cmp	w1, #0x0
  7c:	csel	x0, x0, x15, lt  // lt = tstop
  80:	str	x0, [sp, #144]
  84:	ldr	x0, [sp, #144]
  88:	mvn	x0, x0
  8c:	str	x0, [sp, #128]
  90:	ldr	x0, [sp, #152]
  94:	mvn	x0, x0
  98:	str	x0, [sp, #136]
  9c:	ldr	x1, [sp, #48]
  a0:	ldr	x0, [sp, #144]
  a4:	cmp	x1, x0
  a8:	b.ne	124 <__mulvti3+0x124>  // b.any
  ac:	ldr	x1, [sp, #56]
  b0:	ldr	x0, [sp, #152]
  b4:	cmp	x1, x0
  b8:	b.ne	124 <__mulvti3+0x124>  // b.any
  bc:	ldr	x0, [sp, #32]
  c0:	ldr	x1, [sp, #40]
  c4:	orr	x0, x0, x1
  c8:	cmp	x0, #0x0
  cc:	b.eq	e8 <__mulvti3+0xe8>  // b.none
  d0:	ldr	x0, [sp, #32]
  d4:	cmp	x0, #0x1
  d8:	b.ne	10c <__mulvti3+0x10c>  // b.any
  dc:	ldr	x0, [sp, #40]
  e0:	cmp	x0, #0x0
  e4:	b.ne	10c <__mulvti3+0x10c>  // b.any
  e8:	ldp	x2, x3, [sp, #48]
  ec:	ldp	x0, x1, [sp, #32]
  f0:	mul	x5, x2, x0
  f4:	umulh	x4, x2, x0
  f8:	madd	x4, x3, x0, x4
  fc:	madd	x4, x2, x1, x4
 100:	mov	x20, x5
 104:	mov	x21, x4
 108:	b	438 <__mulvti3+0x438>
 10c:	adrp	x0, 0 <__mulvti3>
 110:	add	x2, x0, #0x0
 114:	mov	w1, #0x1c                  	// #28
 118:	adrp	x0, 0 <__mulvti3>
 11c:	add	x0, x0, #0x0
 120:	bl	0 <__compilerrt_abort_impl>
 124:	ldr	x1, [sp, #32]
 128:	ldr	x0, [sp, #144]
 12c:	cmp	x1, x0
 130:	b.ne	1ac <__mulvti3+0x1ac>  // b.any
 134:	ldr	x1, [sp, #40]
 138:	ldr	x0, [sp, #152]
 13c:	cmp	x1, x0
 140:	b.ne	1ac <__mulvti3+0x1ac>  // b.any
 144:	ldr	x0, [sp, #48]
 148:	ldr	x1, [sp, #56]
 14c:	orr	x0, x0, x1
 150:	cmp	x0, #0x0
 154:	b.eq	170 <__mulvti3+0x170>  // b.none
 158:	ldr	x0, [sp, #48]
 15c:	cmp	x0, #0x1
 160:	b.ne	194 <__mulvti3+0x194>  // b.any
 164:	ldr	x0, [sp, #56]
 168:	cmp	x0, #0x0
 16c:	b.ne	194 <__mulvti3+0x194>  // b.any
 170:	ldp	x2, x3, [sp, #48]
 174:	ldp	x0, x1, [sp, #32]
 178:	mul	x5, x2, x0
 17c:	umulh	x4, x2, x0
 180:	madd	x4, x3, x0, x4
 184:	madd	x4, x2, x1, x4
 188:	mov	x20, x5
 18c:	mov	x21, x4
 190:	b	438 <__mulvti3+0x438>
 194:	adrp	x0, 0 <__mulvti3>
 198:	add	x2, x0, #0x0
 19c:	mov	w1, #0x21                  	// #33
 1a0:	adrp	x0, 0 <__mulvti3>
 1a4:	add	x0, x0, #0x0
 1a8:	bl	0 <__compilerrt_abort_impl>
 1ac:	ldr	w0, [sp, #172]
 1b0:	sub	w0, w0, #0x1
 1b4:	sub	w1, w0, #0x40
 1b8:	ldr	x2, [sp, #56]
 1bc:	asr	x3, x2, x1
 1c0:	ldr	x2, [sp, #56]
 1c4:	asr	x2, x2, #63
 1c8:	ldr	x14, [sp, #56]
 1cc:	lsl	x15, x14, #1
 1d0:	mov	w14, #0x3f                  	// #63
 1d4:	sub	w14, w14, w0
 1d8:	lsl	x14, x15, x14
 1dc:	ldr	x15, [sp, #48]
 1e0:	lsr	x15, x15, x0
 1e4:	orr	x14, x15, x14
 1e8:	str	x14, [sp, #112]
 1ec:	ldr	x14, [sp, #56]
 1f0:	asr	x0, x14, x0
 1f4:	str	x0, [sp, #120]
 1f8:	ldr	x0, [sp, #112]
 1fc:	cmp	w1, #0x0
 200:	csel	x0, x0, x3, lt  // lt = tstop
 204:	str	x0, [sp, #112]
 208:	ldr	x0, [sp, #120]
 20c:	cmp	w1, #0x0
 210:	csel	x0, x0, x2, lt  // lt = tstop
 214:	str	x0, [sp, #120]
 218:	ldr	x1, [sp, #48]
 21c:	ldr	x0, [sp, #112]
 220:	eor	x6, x1, x0
 224:	ldr	x1, [sp, #56]
 228:	ldr	x0, [sp, #120]
 22c:	eor	x7, x1, x0
 230:	ldp	x0, x1, [sp, #112]
 234:	subs	x2, x6, x0
 238:	sbc	x0, x7, x1
 23c:	mov	x10, x2
 240:	mov	x11, x0
 244:	stp	x10, x11, [sp, #96]
 248:	ldr	w0, [sp, #172]
 24c:	sub	w0, w0, #0x1
 250:	sub	w1, w0, #0x40
 254:	ldr	x2, [sp, #40]
 258:	asr	x3, x2, x1
 25c:	ldr	x2, [sp, #40]
 260:	asr	x2, x2, #63
 264:	ldr	x6, [sp, #40]
 268:	lsl	x7, x6, #1
 26c:	mov	w6, #0x3f                  	// #63
 270:	sub	w6, w6, w0
 274:	lsl	x6, x7, x6
 278:	ldr	x7, [sp, #32]
 27c:	lsr	x7, x7, x0
 280:	orr	x6, x7, x6
 284:	str	x6, [sp, #80]
 288:	ldr	x6, [sp, #40]
 28c:	asr	x0, x6, x0
 290:	str	x0, [sp, #88]
 294:	ldr	x0, [sp, #80]
 298:	cmp	w1, #0x0
 29c:	csel	x0, x0, x3, lt  // lt = tstop
 2a0:	str	x0, [sp, #80]
 2a4:	ldr	x0, [sp, #88]
 2a8:	cmp	w1, #0x0
 2ac:	csel	x0, x0, x2, lt  // lt = tstop
 2b0:	str	x0, [sp, #88]
 2b4:	ldr	x1, [sp, #32]
 2b8:	ldr	x0, [sp, #80]
 2bc:	eor	x4, x1, x0
 2c0:	ldr	x1, [sp, #40]
 2c4:	ldr	x0, [sp, #88]
 2c8:	eor	x5, x1, x0
 2cc:	ldp	x0, x1, [sp, #80]
 2d0:	subs	x2, x4, x0
 2d4:	sbc	x0, x5, x1
 2d8:	mov	x8, x2
 2dc:	mov	x9, x0
 2e0:	stp	x8, x9, [sp, #64]
 2e4:	ldr	x0, [sp, #104]
 2e8:	cmp	x0, #0x0
 2ec:	b.gt	308 <__mulvti3+0x308>
 2f0:	ldr	x0, [sp, #104]
 2f4:	cmp	x0, #0x0
 2f8:	b.ne	32c <__mulvti3+0x32c>  // b.any
 2fc:	ldr	x0, [sp, #96]
 300:	cmp	x0, #0x1
 304:	b.ls	32c <__mulvti3+0x32c>  // b.plast
 308:	ldr	x0, [sp, #72]
 30c:	cmp	x0, #0x0
 310:	b.gt	350 <__mulvti3+0x350>
 314:	ldr	x0, [sp, #72]
 318:	cmp	x0, #0x0
 31c:	b.ne	32c <__mulvti3+0x32c>  // b.any
 320:	ldr	x0, [sp, #64]
 324:	cmp	x0, #0x1
 328:	b.hi	350 <__mulvti3+0x350>  // b.pmore
 32c:	ldp	x2, x3, [sp, #48]
 330:	ldp	x0, x1, [sp, #32]
 334:	mul	x5, x2, x0
 338:	umulh	x4, x2, x0
 33c:	madd	x4, x3, x0, x4
 340:	madd	x4, x2, x1, x4
 344:	mov	x20, x5
 348:	mov	x21, x4
 34c:	b	438 <__mulvti3+0x438>
 350:	ldr	x1, [sp, #112]
 354:	ldr	x0, [sp, #80]
 358:	cmp	x1, x0
 35c:	b.ne	3b8 <__mulvti3+0x3b8>  // b.any
 360:	ldr	x1, [sp, #120]
 364:	ldr	x0, [sp, #88]
 368:	cmp	x1, x0
 36c:	b.ne	3b8 <__mulvti3+0x3b8>  // b.any
 370:	ldp	x2, x3, [sp, #64]
 374:	ldp	x0, x1, [sp, #128]
 378:	bl	0 <__divti3>
 37c:	ldr	x2, [sp, #104]
 380:	cmp	x2, x1
 384:	b.gt	3a0 <__mulvti3+0x3a0>
 388:	ldr	x2, [sp, #104]
 38c:	cmp	x2, x1
 390:	b.ne	418 <__mulvti3+0x418>  // b.any
 394:	ldr	x2, [sp, #96]
 398:	cmp	x2, x0
 39c:	b.ls	418 <__mulvti3+0x418>  // b.plast
 3a0:	adrp	x0, 0 <__mulvti3>
 3a4:	add	x2, x0, #0x0
 3a8:	mov	w1, #0x2b                  	// #43
 3ac:	adrp	x0, 0 <__mulvti3>
 3b0:	add	x0, x0, #0x0
 3b4:	bl	0 <__compilerrt_abort_impl>
 3b8:	ldp	x0, x1, [sp, #64]
 3bc:	negs	x2, x0
 3c0:	ngc	x0, x1
 3c4:	mov	x12, x2
 3c8:	mov	x13, x0
 3cc:	mov	x2, x12
 3d0:	mov	x3, x13
 3d4:	ldp	x0, x1, [sp, #144]
 3d8:	bl	0 <__divti3>
 3dc:	ldr	x2, [sp, #104]
 3e0:	cmp	x2, x1
 3e4:	b.gt	400 <__mulvti3+0x400>
 3e8:	ldr	x2, [sp, #104]
 3ec:	cmp	x2, x1
 3f0:	b.ne	418 <__mulvti3+0x418>  // b.any
 3f4:	ldr	x2, [sp, #96]
 3f8:	cmp	x2, x0
 3fc:	b.ls	418 <__mulvti3+0x418>  // b.plast
 400:	adrp	x0, 0 <__mulvti3>
 404:	add	x2, x0, #0x0
 408:	mov	w1, #0x2e                  	// #46
 40c:	adrp	x0, 0 <__mulvti3>
 410:	add	x0, x0, #0x0
 414:	bl	0 <__compilerrt_abort_impl>
 418:	ldp	x2, x3, [sp, #48]
 41c:	ldp	x0, x1, [sp, #32]
 420:	mul	x5, x2, x0
 424:	umulh	x4, x2, x0
 428:	madd	x4, x3, x0, x4
 42c:	madd	x4, x2, x1, x4
 430:	mov	x20, x5
 434:	mov	x21, x4
 438:	mov	x0, x20
 43c:	mov	x1, x21
 440:	ldp	x20, x21, [sp, #16]
 444:	ldp	x29, x30, [sp], #176
 448:	ret

negdf2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <toRep>:
   0:	sub	sp, sp, #0x20
   4:	str	d0, [sp, #8]
   8:	ldr	d0, [sp, #8]
   c:	str	d0, [sp, #24]
  10:	ldr	x0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <fromRep>:
  1c:	sub	sp, sp, #0x20
  20:	str	x0, [sp, #8]
  24:	ldr	x0, [sp, #8]
  28:	str	x0, [sp, #24]
  2c:	ldr	d0, [sp, #24]
  30:	add	sp, sp, #0x20
  34:	ret

0000000000000038 <__negdf2>:
  38:	stp	x29, x30, [sp, #-32]!
  3c:	mov	x29, sp
  40:	str	d0, [sp, #24]
  44:	ldr	d0, [sp, #24]
  48:	bl	0 <toRep>
  4c:	eor	x0, x0, #0x8000000000000000
  50:	bl	1c <fromRep>
  54:	ldp	x29, x30, [sp], #32
  58:	ret

negdi2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__negdi2>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	neg	x0, x0
  10:	add	sp, sp, #0x10
  14:	ret

negsf2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <toRep>:
   0:	sub	sp, sp, #0x20
   4:	str	s0, [sp, #12]
   8:	ldr	s0, [sp, #12]
   c:	str	s0, [sp, #24]
  10:	ldr	w0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <fromRep>:
  1c:	sub	sp, sp, #0x20
  20:	str	w0, [sp, #12]
  24:	ldr	w0, [sp, #12]
  28:	str	w0, [sp, #24]
  2c:	ldr	s0, [sp, #24]
  30:	add	sp, sp, #0x20
  34:	ret

0000000000000038 <__negsf2>:
  38:	stp	x29, x30, [sp, #-32]!
  3c:	mov	x29, sp
  40:	str	s0, [sp, #28]
  44:	ldr	s0, [sp, #28]
  48:	bl	0 <toRep>
  4c:	eor	w0, w0, #0x80000000
  50:	bl	1c <fromRep>
  54:	ldp	x29, x30, [sp], #32
  58:	ret

negti2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__negti2>:
   0:	sub	sp, sp, #0x10
   4:	stp	x0, x1, [sp]
   8:	ldp	x0, x1, [sp]
   c:	negs	x4, x0
  10:	ngc	x0, x1
  14:	mov	x2, x4
  18:	mov	x3, x0
  1c:	mov	x0, x2
  20:	mov	x1, x3
  24:	add	sp, sp, #0x10
  28:	ret

negvdi2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__negvdi2>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
  10:	str	x0, [sp, #40]
  14:	ldr	x1, [sp, #24]
  18:	ldr	x0, [sp, #40]
  1c:	cmp	x1, x0
  20:	b.ne	3c <__negvdi2+0x3c>  // b.any
  24:	adrp	x0, 0 <__negvdi2>
  28:	add	x2, x0, #0x0
  2c:	mov	w1, #0x16                  	// #22
  30:	adrp	x0, 0 <__negvdi2>
  34:	add	x0, x0, #0x0
  38:	bl	0 <__compilerrt_abort_impl>
  3c:	ldr	x0, [sp, #24]
  40:	neg	x0, x0
  44:	ldp	x29, x30, [sp], #48
  48:	ret

negvsi2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__negvsi2>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	w0, [sp, #28]
   c:	mov	w0, #0x80000000            	// #-2147483648
  10:	str	w0, [sp, #44]
  14:	ldr	w1, [sp, #28]
  18:	ldr	w0, [sp, #44]
  1c:	cmp	w1, w0
  20:	b.ne	3c <__negvsi2+0x3c>  // b.any
  24:	adrp	x0, 0 <__negvsi2>
  28:	add	x2, x0, #0x0
  2c:	mov	w1, #0x16                  	// #22
  30:	adrp	x0, 0 <__negvsi2>
  34:	add	x0, x0, #0x0
  38:	bl	0 <__compilerrt_abort_impl>
  3c:	ldr	w0, [sp, #28]
  40:	neg	w0, w0
  44:	ldp	x29, x30, [sp], #48
  48:	ret

negvti2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__negvti2>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x0, x1, [sp, #16]
   c:	adrp	x0, 0 <__negvti2>
  10:	add	x0, x0, #0x0
  14:	ldp	x0, x1, [x0]
  18:	stp	x0, x1, [sp, #32]
  1c:	ldr	x1, [sp, #16]
  20:	ldr	x0, [sp, #32]
  24:	cmp	x1, x0
  28:	b.ne	54 <__negvti2+0x54>  // b.any
  2c:	ldr	x1, [sp, #24]
  30:	ldr	x0, [sp, #40]
  34:	cmp	x1, x0
  38:	b.ne	54 <__negvti2+0x54>  // b.any
  3c:	adrp	x0, 0 <__negvti2>
  40:	add	x2, x0, #0x0
  44:	mov	w1, #0x18                  	// #24
  48:	adrp	x0, 0 <__negvti2>
  4c:	add	x0, x0, #0x0
  50:	bl	0 <__compilerrt_abort_impl>
  54:	ldp	x0, x1, [sp, #16]
  58:	negs	x4, x0
  5c:	ngc	x0, x1
  60:	mov	x2, x4
  64:	mov	x3, x0
  68:	mov	x0, x2
  6c:	mov	x1, x3
  70:	ldp	x29, x30, [sp], #48
  74:	ret

os_version_check.c.o:     file format elf64-littleaarch64


paritydi2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__paritydi2>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	str	x0, [sp, #40]
  14:	ldr	w0, [sp, #44]
  18:	mov	w1, w0
  1c:	ldr	w0, [sp, #40]
  20:	eor	w0, w1, w0
  24:	bl	0 <__paritysi2>
  28:	ldp	x29, x30, [sp], #48
  2c:	ret

paritysi2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__paritysi2>:
   0:	sub	sp, sp, #0x20
   4:	str	w0, [sp, #12]
   8:	ldr	w0, [sp, #12]
   c:	str	w0, [sp, #28]
  10:	ldr	w0, [sp, #28]
  14:	lsr	w0, w0, #16
  18:	ldr	w1, [sp, #28]
  1c:	eor	w0, w1, w0
  20:	str	w0, [sp, #28]
  24:	ldr	w0, [sp, #28]
  28:	lsr	w0, w0, #8
  2c:	ldr	w1, [sp, #28]
  30:	eor	w0, w1, w0
  34:	str	w0, [sp, #28]
  38:	ldr	w0, [sp, #28]
  3c:	lsr	w0, w0, #4
  40:	ldr	w1, [sp, #28]
  44:	eor	w0, w1, w0
  48:	str	w0, [sp, #28]
  4c:	ldr	w0, [sp, #28]
  50:	and	w0, w0, #0xf
  54:	mov	w1, #0x6996                	// #27030
  58:	asr	w0, w1, w0
  5c:	and	w0, w0, #0x1
  60:	add	sp, sp, #0x20
  64:	ret

parityti2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__parityti2>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x0, x1, [sp, #16]
   c:	ldp	x0, x1, [sp, #16]
  10:	stp	x0, x1, [sp, #32]
  14:	ldr	x0, [sp, #40]
  18:	mov	x1, x0
  1c:	ldr	x0, [sp, #32]
  20:	eor	x0, x1, x0
  24:	bl	0 <__paritydi2>
  28:	ldp	x29, x30, [sp], #48
  2c:	ret

popcountdi2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__popcountdi2>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	str	x0, [sp, #24]
  10:	ldr	x0, [sp, #24]
  14:	lsr	x0, x0, #1
  18:	and	x0, x0, #0x5555555555555555
  1c:	ldr	x1, [sp, #24]
  20:	sub	x0, x1, x0
  24:	str	x0, [sp, #24]
  28:	ldr	x0, [sp, #24]
  2c:	lsr	x0, x0, #2
  30:	and	x1, x0, #0x3333333333333333
  34:	ldr	x0, [sp, #24]
  38:	and	x0, x0, #0x3333333333333333
  3c:	add	x0, x1, x0
  40:	str	x0, [sp, #24]
  44:	ldr	x0, [sp, #24]
  48:	lsr	x1, x0, #4
  4c:	ldr	x0, [sp, #24]
  50:	add	x0, x1, x0
  54:	and	x0, x0, #0xf0f0f0f0f0f0f0f
  58:	str	x0, [sp, #24]
  5c:	ldr	x0, [sp, #24]
  60:	mov	w1, w0
  64:	ldr	x0, [sp, #24]
  68:	lsr	x0, x0, #32
  6c:	add	w0, w1, w0
  70:	str	w0, [sp, #20]
  74:	ldr	w0, [sp, #20]
  78:	lsr	w0, w0, #16
  7c:	ldr	w1, [sp, #20]
  80:	add	w0, w1, w0
  84:	str	w0, [sp, #20]
  88:	ldr	w0, [sp, #20]
  8c:	lsr	w1, w0, #8
  90:	ldr	w0, [sp, #20]
  94:	add	w0, w1, w0
  98:	and	w0, w0, #0x7f
  9c:	add	sp, sp, #0x20
  a0:	ret

popcountsi2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__popcountsi2>:
   0:	sub	sp, sp, #0x20
   4:	str	w0, [sp, #12]
   8:	ldr	w0, [sp, #12]
   c:	str	w0, [sp, #28]
  10:	ldr	w0, [sp, #28]
  14:	lsr	w0, w0, #1
  18:	and	w0, w0, #0x55555555
  1c:	ldr	w1, [sp, #28]
  20:	sub	w0, w1, w0
  24:	str	w0, [sp, #28]
  28:	ldr	w0, [sp, #28]
  2c:	lsr	w0, w0, #2
  30:	and	w1, w0, #0x33333333
  34:	ldr	w0, [sp, #28]
  38:	and	w0, w0, #0x33333333
  3c:	add	w0, w1, w0
  40:	str	w0, [sp, #28]
  44:	ldr	w0, [sp, #28]
  48:	lsr	w1, w0, #4
  4c:	ldr	w0, [sp, #28]
  50:	add	w0, w1, w0
  54:	and	w0, w0, #0xf0f0f0f
  58:	str	w0, [sp, #28]
  5c:	ldr	w0, [sp, #28]
  60:	lsr	w0, w0, #16
  64:	ldr	w1, [sp, #28]
  68:	add	w0, w1, w0
  6c:	str	w0, [sp, #28]
  70:	ldr	w0, [sp, #28]
  74:	lsr	w1, w0, #8
  78:	ldr	w0, [sp, #28]
  7c:	add	w0, w1, w0
  80:	and	w0, w0, #0x3f
  84:	add	sp, sp, #0x20
  88:	ret

popcountti2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__popcountti2>:
   0:	stp	x19, x20, [sp, #-80]!
   4:	str	x21, [sp, #16]
   8:	stp	x0, x1, [sp, #32]
   c:	ldp	x0, x1, [sp, #32]
  10:	stp	x0, x1, [sp, #64]
  14:	ldr	x0, [sp, #72]
  18:	lsl	x0, x0, #63
  1c:	ldr	x1, [sp, #64]
  20:	lsr	x6, x1, #1
  24:	orr	x6, x0, x6
  28:	ldr	x0, [sp, #72]
  2c:	lsr	x7, x0, #1
  30:	and	x10, x6, #0x5555555555555555
  34:	and	x11, x7, #0x5555555555555555
  38:	ldp	x0, x1, [sp, #64]
  3c:	subs	x6, x0, x10
  40:	sbc	x0, x1, x11
  44:	mov	x18, x6
  48:	mov	x19, x0
  4c:	stp	x18, x19, [sp, #64]
  50:	ldr	x0, [sp, #72]
  54:	lsl	x0, x0, #62
  58:	ldr	x1, [sp, #64]
  5c:	lsr	x4, x1, #2
  60:	orr	x4, x0, x4
  64:	ldr	x0, [sp, #72]
  68:	lsr	x5, x0, #2
  6c:	and	x8, x4, #0x3333333333333333
  70:	and	x9, x5, #0x3333333333333333
  74:	ldr	x0, [sp, #64]
  78:	and	x14, x0, #0x3333333333333333
  7c:	ldr	x0, [sp, #72]
  80:	and	x15, x0, #0x3333333333333333
  84:	mov	x0, x14
  88:	adds	x1, x8, x0
  8c:	mov	x0, x15
  90:	adc	x0, x9, x0
  94:	mov	x16, x1
  98:	mov	x17, x0
  9c:	stp	x16, x17, [sp, #64]
  a0:	ldr	x0, [sp, #72]
  a4:	lsl	x0, x0, #60
  a8:	ldr	x1, [sp, #64]
  ac:	lsr	x2, x1, #4
  b0:	orr	x2, x0, x2
  b4:	ldr	x0, [sp, #72]
  b8:	lsr	x3, x0, #4
  bc:	ldp	x0, x1, [sp, #64]
  c0:	mov	x4, x0
  c4:	adds	x4, x2, x4
  c8:	mov	x0, x1
  cc:	adc	x0, x3, x0
  d0:	mov	x12, x4
  d4:	mov	x13, x0
  d8:	and	x0, x12, #0xf0f0f0f0f0f0f0f
  dc:	str	x0, [sp, #64]
  e0:	and	x0, x13, #0xf0f0f0f0f0f0f0f
  e4:	str	x0, [sp, #72]
  e8:	ldr	x0, [sp, #64]
  ec:	ldr	x1, [sp, #72]
  f0:	mov	x20, x1
  f4:	mov	x21, #0x0                   	// #0
  f8:	mov	x1, x20
  fc:	add	x0, x0, x1
 100:	str	x0, [sp, #56]
 104:	ldr	x0, [sp, #56]
 108:	mov	w1, w0
 10c:	ldr	x0, [sp, #56]
 110:	lsr	x0, x0, #32
 114:	add	w0, w1, w0
 118:	str	w0, [sp, #52]
 11c:	ldr	w0, [sp, #52]
 120:	lsr	w0, w0, #16
 124:	ldr	w1, [sp, #52]
 128:	add	w0, w1, w0
 12c:	str	w0, [sp, #52]
 130:	ldr	w0, [sp, #52]
 134:	lsr	w1, w0, #8
 138:	ldr	w0, [sp, #52]
 13c:	add	w0, w1, w0
 140:	and	w0, w0, #0xff
 144:	ldr	x21, [sp, #16]
 148:	ldp	x19, x20, [sp], #80
 14c:	ret

powidf2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__powidf2>:
   0:	sub	sp, sp, #0x20
   4:	str	d0, [sp, #8]
   8:	str	w0, [sp, #4]
   c:	ldr	w0, [sp, #4]
  10:	lsr	w0, w0, #31
  14:	and	w0, w0, #0xff
  18:	str	w0, [sp, #20]
  1c:	fmov	d0, #1.000000000000000000e+00
  20:	str	d0, [sp, #24]
  24:	ldr	w0, [sp, #4]
  28:	and	w0, w0, #0x1
  2c:	cmp	w0, #0x0
  30:	b.eq	44 <__powidf2+0x44>  // b.none
  34:	ldr	d1, [sp, #24]
  38:	ldr	d0, [sp, #8]
  3c:	fmul	d0, d1, d0
  40:	str	d0, [sp, #24]
  44:	ldr	w0, [sp, #4]
  48:	lsr	w1, w0, #31
  4c:	add	w0, w1, w0
  50:	asr	w0, w0, #1
  54:	str	w0, [sp, #4]
  58:	ldr	w0, [sp, #4]
  5c:	cmp	w0, #0x0
  60:	b.eq	74 <__powidf2+0x74>  // b.none
  64:	ldr	d0, [sp, #8]
  68:	fmul	d0, d0, d0
  6c:	str	d0, [sp, #8]
  70:	b	24 <__powidf2+0x24>
  74:	nop
  78:	ldr	w0, [sp, #20]
  7c:	cmp	w0, #0x0
  80:	b.eq	94 <__powidf2+0x94>  // b.none
  84:	ldr	d0, [sp, #24]
  88:	fmov	d1, #1.000000000000000000e+00
  8c:	fdiv	d0, d1, d0
  90:	b	98 <__powidf2+0x98>
  94:	ldr	d0, [sp, #24]
  98:	add	sp, sp, #0x20
  9c:	ret

powisf2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__powisf2>:
   0:	sub	sp, sp, #0x20
   4:	str	s0, [sp, #12]
   8:	str	w0, [sp, #8]
   c:	ldr	w0, [sp, #8]
  10:	lsr	w0, w0, #31
  14:	and	w0, w0, #0xff
  18:	str	w0, [sp, #24]
  1c:	fmov	s0, #1.000000000000000000e+00
  20:	str	s0, [sp, #28]
  24:	ldr	w0, [sp, #8]
  28:	and	w0, w0, #0x1
  2c:	cmp	w0, #0x0
  30:	b.eq	44 <__powisf2+0x44>  // b.none
  34:	ldr	s1, [sp, #28]
  38:	ldr	s0, [sp, #12]
  3c:	fmul	s0, s1, s0
  40:	str	s0, [sp, #28]
  44:	ldr	w0, [sp, #8]
  48:	lsr	w1, w0, #31
  4c:	add	w0, w1, w0
  50:	asr	w0, w0, #1
  54:	str	w0, [sp, #8]
  58:	ldr	w0, [sp, #8]
  5c:	cmp	w0, #0x0
  60:	b.eq	74 <__powisf2+0x74>  // b.none
  64:	ldr	s0, [sp, #12]
  68:	fmul	s0, s0, s0
  6c:	str	s0, [sp, #12]
  70:	b	24 <__powisf2+0x24>
  74:	nop
  78:	ldr	w0, [sp, #24]
  7c:	cmp	w0, #0x0
  80:	b.eq	94 <__powisf2+0x94>  // b.none
  84:	ldr	s0, [sp, #28]
  88:	fmov	s1, #1.000000000000000000e+00
  8c:	fdiv	s0, s1, s0
  90:	b	98 <__powisf2+0x98>
  94:	ldr	s0, [sp, #28]
  98:	add	sp, sp, #0x20
  9c:	ret

powitf2.c.o:     file format elf64-littleaarch64


subdf3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <toRep>:
   0:	sub	sp, sp, #0x20
   4:	str	d0, [sp, #8]
   8:	ldr	d0, [sp, #8]
   c:	str	d0, [sp, #24]
  10:	ldr	x0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <fromRep>:
  1c:	sub	sp, sp, #0x20
  20:	str	x0, [sp, #8]
  24:	ldr	x0, [sp, #8]
  28:	str	x0, [sp, #24]
  2c:	ldr	d0, [sp, #24]
  30:	add	sp, sp, #0x20
  34:	ret

0000000000000038 <__subdf3>:
  38:	stp	x29, x30, [sp, #-32]!
  3c:	mov	x29, sp
  40:	str	d0, [sp, #24]
  44:	str	d1, [sp, #16]
  48:	ldr	d0, [sp, #16]
  4c:	bl	0 <toRep>
  50:	eor	x0, x0, #0x8000000000000000
  54:	bl	1c <fromRep>
  58:	fmov	d1, d0
  5c:	ldr	d0, [sp, #24]
  60:	bl	0 <__adddf3>
  64:	ldp	x29, x30, [sp], #32
  68:	ret

subsf3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <toRep>:
   0:	sub	sp, sp, #0x20
   4:	str	s0, [sp, #12]
   8:	ldr	s0, [sp, #12]
   c:	str	s0, [sp, #24]
  10:	ldr	w0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <fromRep>:
  1c:	sub	sp, sp, #0x20
  20:	str	w0, [sp, #12]
  24:	ldr	w0, [sp, #12]
  28:	str	w0, [sp, #24]
  2c:	ldr	s0, [sp, #24]
  30:	add	sp, sp, #0x20
  34:	ret

0000000000000038 <__subsf3>:
  38:	stp	x29, x30, [sp, #-32]!
  3c:	mov	x29, sp
  40:	str	s0, [sp, #28]
  44:	str	s1, [sp, #24]
  48:	ldr	s0, [sp, #24]
  4c:	bl	0 <toRep>
  50:	eor	w0, w0, #0x80000000
  54:	bl	1c <fromRep>
  58:	fmov	s1, s0
  5c:	ldr	s0, [sp, #28]
  60:	bl	0 <__addsf3>
  64:	ldp	x29, x30, [sp], #32
  68:	ret

subvdi3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__subvdi3>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x1, [sp, #24]
  14:	ldr	x0, [sp, #16]
  18:	sub	x0, x1, x0
  1c:	str	x0, [sp, #40]
  20:	ldr	x0, [sp, #16]
  24:	cmp	x0, #0x0
  28:	b.lt	54 <__subvdi3+0x54>  // b.tstop
  2c:	ldr	x1, [sp, #40]
  30:	ldr	x0, [sp, #24]
  34:	cmp	x1, x0
  38:	b.le	7c <__subvdi3+0x7c>
  3c:	adrp	x0, 0 <__subvdi3>
  40:	add	x2, x0, #0x0
  44:	mov	w1, #0x17                  	// #23
  48:	adrp	x0, 0 <__subvdi3>
  4c:	add	x0, x0, #0x0
  50:	bl	0 <__compilerrt_abort_impl>
  54:	ldr	x1, [sp, #40]
  58:	ldr	x0, [sp, #24]
  5c:	cmp	x1, x0
  60:	b.gt	7c <__subvdi3+0x7c>
  64:	adrp	x0, 0 <__subvdi3>
  68:	add	x2, x0, #0x0
  6c:	mov	w1, #0x1a                  	// #26
  70:	adrp	x0, 0 <__subvdi3>
  74:	add	x0, x0, #0x0
  78:	bl	0 <__compilerrt_abort_impl>
  7c:	ldr	x0, [sp, #40]
  80:	ldp	x29, x30, [sp], #48
  84:	ret

subvsi3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__subvsi3>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	w0, [sp, #28]
   c:	str	w1, [sp, #24]
  10:	ldr	w1, [sp, #28]
  14:	ldr	w0, [sp, #24]
  18:	sub	w0, w1, w0
  1c:	str	w0, [sp, #44]
  20:	ldr	w0, [sp, #24]
  24:	cmp	w0, #0x0
  28:	b.lt	54 <__subvsi3+0x54>  // b.tstop
  2c:	ldr	w1, [sp, #44]
  30:	ldr	w0, [sp, #28]
  34:	cmp	w1, w0
  38:	b.le	7c <__subvsi3+0x7c>
  3c:	adrp	x0, 0 <__subvsi3>
  40:	add	x2, x0, #0x0
  44:	mov	w1, #0x17                  	// #23
  48:	adrp	x0, 0 <__subvsi3>
  4c:	add	x0, x0, #0x0
  50:	bl	0 <__compilerrt_abort_impl>
  54:	ldr	w1, [sp, #44]
  58:	ldr	w0, [sp, #28]
  5c:	cmp	w1, w0
  60:	b.gt	7c <__subvsi3+0x7c>
  64:	adrp	x0, 0 <__subvsi3>
  68:	add	x2, x0, #0x0
  6c:	mov	w1, #0x1a                  	// #26
  70:	adrp	x0, 0 <__subvsi3>
  74:	add	x0, x0, #0x0
  78:	bl	0 <__compilerrt_abort_impl>
  7c:	ldr	w0, [sp, #44]
  80:	ldp	x29, x30, [sp], #48
  84:	ret

subvti3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__subvti3>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x0, x1, [sp, #32]
   c:	stp	x2, x3, [sp, #16]
  10:	ldp	x2, x3, [sp, #32]
  14:	ldp	x0, x1, [sp, #16]
  18:	subs	x6, x2, x0
  1c:	sbc	x0, x3, x1
  20:	mov	x4, x6
  24:	mov	x5, x0
  28:	stp	x4, x5, [sp, #48]
  2c:	ldr	x0, [sp, #24]
  30:	cmp	x0, #0x0
  34:	b.lt	80 <__subvti3+0x80>  // b.tstop
  38:	ldr	x1, [sp, #56]
  3c:	ldr	x0, [sp, #40]
  40:	cmp	x1, x0
  44:	b.gt	68 <__subvti3+0x68>
  48:	ldr	x1, [sp, #56]
  4c:	ldr	x0, [sp, #40]
  50:	cmp	x1, x0
  54:	b.ne	c8 <__subvti3+0xc8>  // b.any
  58:	ldr	x1, [sp, #48]
  5c:	ldr	x0, [sp, #32]
  60:	cmp	x1, x0
  64:	b.ls	c8 <__subvti3+0xc8>  // b.plast
  68:	adrp	x0, 0 <__subvti3>
  6c:	add	x2, x0, #0x0
  70:	mov	w1, #0x19                  	// #25
  74:	adrp	x0, 0 <__subvti3>
  78:	add	x0, x0, #0x0
  7c:	bl	0 <__compilerrt_abort_impl>
  80:	ldr	x1, [sp, #56]
  84:	ldr	x0, [sp, #40]
  88:	cmp	x1, x0
  8c:	b.gt	c8 <__subvti3+0xc8>
  90:	ldr	x1, [sp, #56]
  94:	ldr	x0, [sp, #40]
  98:	cmp	x1, x0
  9c:	b.ne	b0 <__subvti3+0xb0>  // b.any
  a0:	ldr	x1, [sp, #48]
  a4:	ldr	x0, [sp, #32]
  a8:	cmp	x1, x0
  ac:	b.hi	c8 <__subvti3+0xc8>  // b.pmore
  b0:	adrp	x0, 0 <__subvti3>
  b4:	add	x2, x0, #0x0
  b8:	mov	w1, #0x1c                  	// #28
  bc:	adrp	x0, 0 <__subvti3>
  c0:	add	x0, x0, #0x0
  c4:	bl	0 <__compilerrt_abort_impl>
  c8:	ldp	x0, x1, [sp, #48]
  cc:	ldp	x29, x30, [sp], #64
  d0:	ret

subtf3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <toRep>:
   0:	sub	sp, sp, #0x20
   4:	str	q0, [sp]
   8:	ldr	q0, [sp]
   c:	str	q0, [sp, #16]
  10:	ldp	x0, x1, [sp, #16]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <fromRep>:
  1c:	sub	sp, sp, #0x20
  20:	stp	x0, x1, [sp]
  24:	ldp	x0, x1, [sp]
  28:	stp	x0, x1, [sp, #16]
  2c:	ldr	q0, [sp, #16]
  30:	add	sp, sp, #0x20
  34:	ret

0000000000000038 <__subtf3>:
  38:	stp	x29, x30, [sp, #-64]!
  3c:	mov	x29, sp
  40:	stp	x20, x21, [sp, #16]
  44:	str	q0, [sp, #48]
  48:	str	q1, [sp, #32]
  4c:	ldr	q0, [sp, #32]
  50:	bl	0 <toRep>
  54:	mov	x2, #0x0                   	// #0
  58:	eor	x20, x0, x2
  5c:	eor	x21, x1, #0x8000000000000000
  60:	mov	x0, x20
  64:	mov	x1, x21
  68:	bl	1c <fromRep>
  6c:	mov	v1.16b, v0.16b
  70:	ldr	q0, [sp, #48]
  74:	bl	0 <__addtf3>
  78:	ldp	x20, x21, [sp, #16]
  7c:	ldp	x29, x30, [sp], #64
  80:	ret

trampoline_setup.c.o:     file format elf64-littleaarch64


truncdfhf2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srcToRep>:
   0:	sub	sp, sp, #0x20
   4:	str	d0, [sp, #8]
   8:	ldr	d0, [sp, #8]
   c:	str	d0, [sp, #24]
  10:	ldr	x0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <dstFromRep>:
  1c:	sub	sp, sp, #0x20
  20:	strh	w0, [sp, #14]
  24:	ldrh	w0, [sp, #14]
  28:	strh	w0, [sp, #24]
  2c:	ldrh	w0, [sp, #24]
  30:	add	sp, sp, #0x20
  34:	ret

0000000000000038 <__truncXfYf2__>:
  38:	stp	x29, x30, [sp, #-256]!
  3c:	mov	x29, sp
  40:	str	d0, [sp, #24]
  44:	mov	w0, #0x40                  	// #64
  48:	str	w0, [sp, #248]
  4c:	mov	w0, #0x34                  	// #52
  50:	ldr	w1, [sp, #248]
  54:	sub	w0, w1, w0
  58:	sub	w0, w0, #0x1
  5c:	str	w0, [sp, #244]
  60:	ldr	w0, [sp, #244]
  64:	mov	w1, #0x1                   	// #1
  68:	lsl	w0, w1, w0
  6c:	sub	w0, w0, #0x1
  70:	str	w0, [sp, #240]
  74:	ldr	w0, [sp, #240]
  78:	asr	w0, w0, #1
  7c:	str	w0, [sp, #236]
  80:	mov	w0, #0x34                  	// #52
  84:	mov	x1, #0x1                   	// #1
  88:	lsl	x0, x1, x0
  8c:	str	x0, [sp, #224]
  90:	ldr	x0, [sp, #224]
  94:	sub	x0, x0, #0x1
  98:	str	x0, [sp, #216]
  9c:	ldrsw	x1, [sp, #240]
  a0:	mov	w0, #0x34                  	// #52
  a4:	lsl	x0, x1, x0
  a8:	str	x0, [sp, #208]
  ac:	mov	w1, #0x34                  	// #52
  b0:	ldr	w0, [sp, #244]
  b4:	add	w0, w1, w0
  b8:	mov	x1, #0x1                   	// #1
  bc:	lsl	x0, x1, x0
  c0:	str	x0, [sp, #200]
  c4:	ldr	x0, [sp, #200]
  c8:	sub	x0, x0, #0x1
  cc:	str	x0, [sp, #192]
  d0:	mov	w1, #0x34                  	// #52
  d4:	mov	w0, #0xa                   	// #10
  d8:	sub	w0, w1, w0
  dc:	mov	x1, #0x1                   	// #1
  e0:	lsl	x0, x1, x0
  e4:	sub	x0, x0, #0x1
  e8:	str	x0, [sp, #184]
  ec:	mov	w1, #0x34                  	// #52
  f0:	mov	w0, #0xa                   	// #10
  f4:	sub	w0, w1, w0
  f8:	sub	w0, w0, #0x1
  fc:	mov	x1, #0x1                   	// #1
 100:	lsl	x0, x1, x0
 104:	str	x0, [sp, #176]
 108:	mov	w0, #0x34                  	// #52
 10c:	sub	w0, w0, #0x1
 110:	mov	x1, #0x1                   	// #1
 114:	lsl	x0, x1, x0
 118:	str	x0, [sp, #168]
 11c:	ldr	x0, [sp, #168]
 120:	sub	x0, x0, #0x1
 124:	str	x0, [sp, #160]
 128:	mov	w0, #0x10                  	// #16
 12c:	str	w0, [sp, #156]
 130:	mov	w0, #0xa                   	// #10
 134:	ldr	w1, [sp, #156]
 138:	sub	w0, w1, w0
 13c:	sub	w0, w0, #0x1
 140:	str	w0, [sp, #152]
 144:	ldr	w0, [sp, #152]
 148:	mov	w1, #0x1                   	// #1
 14c:	lsl	w0, w1, w0
 150:	sub	w0, w0, #0x1
 154:	str	w0, [sp, #148]
 158:	ldr	w0, [sp, #148]
 15c:	asr	w0, w0, #1
 160:	str	w0, [sp, #144]
 164:	ldr	w0, [sp, #236]
 168:	add	w1, w0, #0x1
 16c:	ldr	w0, [sp, #144]
 170:	sub	w0, w1, w0
 174:	str	w0, [sp, #140]
 178:	ldr	w1, [sp, #236]
 17c:	ldr	w0, [sp, #148]
 180:	add	w1, w1, w0
 184:	ldr	w0, [sp, #144]
 188:	sub	w0, w1, w0
 18c:	str	w0, [sp, #136]
 190:	ldrsw	x1, [sp, #140]
 194:	mov	w0, #0x34                  	// #52
 198:	lsl	x0, x1, x0
 19c:	str	x0, [sp, #128]
 1a0:	ldrsw	x1, [sp, #136]
 1a4:	mov	w0, #0x34                  	// #52
 1a8:	lsl	x0, x1, x0
 1ac:	str	x0, [sp, #120]
 1b0:	mov	w0, #0xa                   	// #10
 1b4:	sub	w0, w0, #0x1
 1b8:	mov	w1, #0x1                   	// #1
 1bc:	lsl	w0, w1, w0
 1c0:	strh	w0, [sp, #118]
 1c4:	ldrh	w0, [sp, #118]
 1c8:	sub	w0, w0, #0x1
 1cc:	strh	w0, [sp, #116]
 1d0:	ldr	d0, [sp, #24]
 1d4:	bl	0 <srcToRep>
 1d8:	str	x0, [sp, #104]
 1dc:	ldr	x1, [sp, #104]
 1e0:	ldr	x0, [sp, #192]
 1e4:	and	x0, x1, x0
 1e8:	str	x0, [sp, #96]
 1ec:	ldr	x1, [sp, #104]
 1f0:	ldr	x0, [sp, #200]
 1f4:	and	x0, x1, x0
 1f8:	str	x0, [sp, #88]
 1fc:	ldr	x1, [sp, #96]
 200:	ldr	x0, [sp, #128]
 204:	sub	x1, x1, x0
 208:	ldr	x2, [sp, #96]
 20c:	ldr	x0, [sp, #120]
 210:	sub	x0, x2, x0
 214:	cmp	x1, x0
 218:	b.cs	2c0 <__truncXfYf2__+0x288>  // b.hs, b.nlast
 21c:	mov	w1, #0x34                  	// #52
 220:	mov	w0, #0xa                   	// #10
 224:	sub	w0, w1, w0
 228:	ldr	x1, [sp, #96]
 22c:	lsr	x0, x1, x0
 230:	strh	w0, [sp, #254]
 234:	ldr	w0, [sp, #236]
 238:	and	w1, w0, #0xffff
 23c:	ldr	w0, [sp, #144]
 240:	and	w0, w0, #0xffff
 244:	sub	w0, w1, w0
 248:	and	w0, w0, #0xffff
 24c:	mov	w1, w0
 250:	mov	w0, #0xa                   	// #10
 254:	lsl	w0, w1, w0
 258:	and	w0, w0, #0xffff
 25c:	ldrh	w1, [sp, #254]
 260:	sub	w0, w1, w0
 264:	strh	w0, [sp, #254]
 268:	ldr	x1, [sp, #96]
 26c:	ldr	x0, [sp, #184]
 270:	and	x0, x1, x0
 274:	str	x0, [sp, #40]
 278:	ldr	x1, [sp, #40]
 27c:	ldr	x0, [sp, #176]
 280:	cmp	x1, x0
 284:	b.ls	298 <__truncXfYf2__+0x260>  // b.plast
 288:	ldrh	w0, [sp, #254]
 28c:	add	w0, w0, #0x1
 290:	strh	w0, [sp, #254]
 294:	b	460 <__truncXfYf2__+0x428>
 298:	ldr	x1, [sp, #40]
 29c:	ldr	x0, [sp, #176]
 2a0:	cmp	x1, x0
 2a4:	b.ne	460 <__truncXfYf2__+0x428>  // b.any
 2a8:	ldrh	w0, [sp, #254]
 2ac:	add	w0, w0, #0x1
 2b0:	and	w0, w0, #0xffff
 2b4:	and	w0, w0, #0xfffffffe
 2b8:	strh	w0, [sp, #254]
 2bc:	b	460 <__truncXfYf2__+0x428>
 2c0:	ldr	x1, [sp, #96]
 2c4:	ldr	x0, [sp, #208]
 2c8:	cmp	x1, x0
 2cc:	b.ls	334 <__truncXfYf2__+0x2fc>  // b.plast
 2d0:	ldr	w0, [sp, #148]
 2d4:	and	w0, w0, #0xffff
 2d8:	mov	w1, w0
 2dc:	mov	w0, #0xa                   	// #10
 2e0:	lsl	w0, w1, w0
 2e4:	strh	w0, [sp, #254]
 2e8:	ldrh	w1, [sp, #254]
 2ec:	ldrh	w0, [sp, #118]
 2f0:	orr	w0, w1, w0
 2f4:	strh	w0, [sp, #254]
 2f8:	ldr	x1, [sp, #96]
 2fc:	ldr	x0, [sp, #160]
 300:	and	x1, x1, x0
 304:	mov	w2, #0x34                  	// #52
 308:	mov	w0, #0xa                   	// #10
 30c:	sub	w0, w2, w0
 310:	lsr	x0, x1, x0
 314:	and	w1, w0, #0xffff
 318:	ldrh	w0, [sp, #116]
 31c:	and	w0, w1, w0
 320:	and	w1, w0, #0xffff
 324:	ldrh	w0, [sp, #254]
 328:	orr	w0, w1, w0
 32c:	strh	w0, [sp, #254]
 330:	b	460 <__truncXfYf2__+0x428>
 334:	ldr	x1, [sp, #96]
 338:	ldr	x0, [sp, #120]
 33c:	cmp	x1, x0
 340:	b.cc	360 <__truncXfYf2__+0x328>  // b.lo, b.ul, b.last
 344:	ldr	w0, [sp, #148]
 348:	and	w0, w0, #0xffff
 34c:	mov	w1, w0
 350:	mov	w0, #0xa                   	// #10
 354:	lsl	w0, w1, w0
 358:	strh	w0, [sp, #254]
 35c:	b	460 <__truncXfYf2__+0x428>
 360:	mov	w0, #0x34                  	// #52
 364:	ldr	x1, [sp, #96]
 368:	lsr	x0, x1, x0
 36c:	str	w0, [sp, #84]
 370:	ldr	w1, [sp, #236]
 374:	ldr	w0, [sp, #144]
 378:	sub	w1, w1, w0
 37c:	ldr	w0, [sp, #84]
 380:	sub	w0, w1, w0
 384:	add	w0, w0, #0x1
 388:	str	w0, [sp, #80]
 38c:	ldr	x1, [sp, #104]
 390:	ldr	x0, [sp, #216]
 394:	and	x0, x1, x0
 398:	ldr	x1, [sp, #224]
 39c:	orr	x0, x1, x0
 3a0:	str	x0, [sp, #72]
 3a4:	mov	w0, #0x34                  	// #52
 3a8:	ldr	w1, [sp, #80]
 3ac:	cmp	w1, w0
 3b0:	b.le	3bc <__truncXfYf2__+0x384>
 3b4:	strh	wzr, [sp, #254]
 3b8:	b	460 <__truncXfYf2__+0x428>
 3bc:	ldr	w1, [sp, #248]
 3c0:	ldr	w0, [sp, #80]
 3c4:	sub	w0, w1, w0
 3c8:	ldr	x1, [sp, #72]
 3cc:	lsl	x0, x1, x0
 3d0:	cmp	x0, #0x0
 3d4:	cset	w0, ne  // ne = any
 3d8:	strb	w0, [sp, #71]
 3dc:	ldr	w0, [sp, #80]
 3e0:	ldr	x1, [sp, #72]
 3e4:	lsr	x1, x1, x0
 3e8:	ldrb	w0, [sp, #71]
 3ec:	orr	x0, x1, x0
 3f0:	str	x0, [sp, #56]
 3f4:	mov	w1, #0x34                  	// #52
 3f8:	mov	w0, #0xa                   	// #10
 3fc:	sub	w0, w1, w0
 400:	ldr	x1, [sp, #56]
 404:	lsr	x0, x1, x0
 408:	strh	w0, [sp, #254]
 40c:	ldr	x1, [sp, #56]
 410:	ldr	x0, [sp, #184]
 414:	and	x0, x1, x0
 418:	str	x0, [sp, #48]
 41c:	ldr	x1, [sp, #48]
 420:	ldr	x0, [sp, #176]
 424:	cmp	x1, x0
 428:	b.ls	43c <__truncXfYf2__+0x404>  // b.plast
 42c:	ldrh	w0, [sp, #254]
 430:	add	w0, w0, #0x1
 434:	strh	w0, [sp, #254]
 438:	b	460 <__truncXfYf2__+0x428>
 43c:	ldr	x1, [sp, #48]
 440:	ldr	x0, [sp, #176]
 444:	cmp	x1, x0
 448:	b.ne	460 <__truncXfYf2__+0x428>  // b.any
 44c:	ldrh	w0, [sp, #254]
 450:	add	w0, w0, #0x1
 454:	and	w0, w0, #0xffff
 458:	and	w0, w0, #0xfffffffe
 45c:	strh	w0, [sp, #254]
 460:	ldr	w1, [sp, #248]
 464:	ldr	w0, [sp, #156]
 468:	sub	w0, w1, w0
 46c:	ldr	x1, [sp, #88]
 470:	lsr	x0, x1, x0
 474:	and	w1, w0, #0xffff
 478:	ldrh	w0, [sp, #254]
 47c:	orr	w0, w1, w0
 480:	strh	w0, [sp, #38]
 484:	ldrh	w0, [sp, #38]
 488:	bl	1c <dstFromRep>
 48c:	and	w0, w0, #0xffff
 490:	ldp	x29, x30, [sp], #256
 494:	ret

0000000000000498 <__truncdfhf2>:
 498:	stp	x29, x30, [sp, #-32]!
 49c:	mov	x29, sp
 4a0:	str	d0, [sp, #24]
 4a4:	ldr	d0, [sp, #24]
 4a8:	bl	38 <__truncXfYf2__>
 4ac:	and	w0, w0, #0xffff
 4b0:	ldp	x29, x30, [sp], #32
 4b4:	ret

truncdfsf2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srcToRep>:
   0:	sub	sp, sp, #0x20
   4:	str	d0, [sp, #8]
   8:	ldr	d0, [sp, #8]
   c:	str	d0, [sp, #24]
  10:	ldr	x0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <dstFromRep>:
  1c:	sub	sp, sp, #0x20
  20:	str	w0, [sp, #12]
  24:	ldr	w0, [sp, #12]
  28:	str	w0, [sp, #24]
  2c:	ldr	s0, [sp, #24]
  30:	add	sp, sp, #0x20
  34:	ret

0000000000000038 <__truncXfYf2__>:
  38:	stp	x29, x30, [sp, #-256]!
  3c:	mov	x29, sp
  40:	str	d0, [sp, #24]
  44:	mov	w0, #0x40                  	// #64
  48:	str	w0, [sp, #248]
  4c:	mov	w0, #0x34                  	// #52
  50:	ldr	w1, [sp, #248]
  54:	sub	w0, w1, w0
  58:	sub	w0, w0, #0x1
  5c:	str	w0, [sp, #244]
  60:	ldr	w0, [sp, #244]
  64:	mov	w1, #0x1                   	// #1
  68:	lsl	w0, w1, w0
  6c:	sub	w0, w0, #0x1
  70:	str	w0, [sp, #240]
  74:	ldr	w0, [sp, #240]
  78:	asr	w0, w0, #1
  7c:	str	w0, [sp, #236]
  80:	mov	w0, #0x34                  	// #52
  84:	mov	x1, #0x1                   	// #1
  88:	lsl	x0, x1, x0
  8c:	str	x0, [sp, #224]
  90:	ldr	x0, [sp, #224]
  94:	sub	x0, x0, #0x1
  98:	str	x0, [sp, #216]
  9c:	ldrsw	x1, [sp, #240]
  a0:	mov	w0, #0x34                  	// #52
  a4:	lsl	x0, x1, x0
  a8:	str	x0, [sp, #208]
  ac:	mov	w1, #0x34                  	// #52
  b0:	ldr	w0, [sp, #244]
  b4:	add	w0, w1, w0
  b8:	mov	x1, #0x1                   	// #1
  bc:	lsl	x0, x1, x0
  c0:	str	x0, [sp, #200]
  c4:	ldr	x0, [sp, #200]
  c8:	sub	x0, x0, #0x1
  cc:	str	x0, [sp, #192]
  d0:	mov	w1, #0x34                  	// #52
  d4:	mov	w0, #0x17                  	// #23
  d8:	sub	w0, w1, w0
  dc:	mov	x1, #0x1                   	// #1
  e0:	lsl	x0, x1, x0
  e4:	sub	x0, x0, #0x1
  e8:	str	x0, [sp, #184]
  ec:	mov	w1, #0x34                  	// #52
  f0:	mov	w0, #0x17                  	// #23
  f4:	sub	w0, w1, w0
  f8:	sub	w0, w0, #0x1
  fc:	mov	x1, #0x1                   	// #1
 100:	lsl	x0, x1, x0
 104:	str	x0, [sp, #176]
 108:	mov	w0, #0x34                  	// #52
 10c:	sub	w0, w0, #0x1
 110:	mov	x1, #0x1                   	// #1
 114:	lsl	x0, x1, x0
 118:	str	x0, [sp, #168]
 11c:	ldr	x0, [sp, #168]
 120:	sub	x0, x0, #0x1
 124:	str	x0, [sp, #160]
 128:	mov	w0, #0x20                  	// #32
 12c:	str	w0, [sp, #156]
 130:	mov	w0, #0x17                  	// #23
 134:	ldr	w1, [sp, #156]
 138:	sub	w0, w1, w0
 13c:	sub	w0, w0, #0x1
 140:	str	w0, [sp, #152]
 144:	ldr	w0, [sp, #152]
 148:	mov	w1, #0x1                   	// #1
 14c:	lsl	w0, w1, w0
 150:	sub	w0, w0, #0x1
 154:	str	w0, [sp, #148]
 158:	ldr	w0, [sp, #148]
 15c:	asr	w0, w0, #1
 160:	str	w0, [sp, #144]
 164:	ldr	w0, [sp, #236]
 168:	add	w1, w0, #0x1
 16c:	ldr	w0, [sp, #144]
 170:	sub	w0, w1, w0
 174:	str	w0, [sp, #140]
 178:	ldr	w1, [sp, #236]
 17c:	ldr	w0, [sp, #148]
 180:	add	w1, w1, w0
 184:	ldr	w0, [sp, #144]
 188:	sub	w0, w1, w0
 18c:	str	w0, [sp, #136]
 190:	ldrsw	x1, [sp, #140]
 194:	mov	w0, #0x34                  	// #52
 198:	lsl	x0, x1, x0
 19c:	str	x0, [sp, #128]
 1a0:	ldrsw	x1, [sp, #136]
 1a4:	mov	w0, #0x34                  	// #52
 1a8:	lsl	x0, x1, x0
 1ac:	str	x0, [sp, #120]
 1b0:	mov	w0, #0x17                  	// #23
 1b4:	sub	w0, w0, #0x1
 1b8:	mov	w1, #0x1                   	// #1
 1bc:	lsl	w0, w1, w0
 1c0:	str	w0, [sp, #116]
 1c4:	ldr	w0, [sp, #116]
 1c8:	sub	w0, w0, #0x1
 1cc:	str	w0, [sp, #112]
 1d0:	ldr	d0, [sp, #24]
 1d4:	bl	0 <srcToRep>
 1d8:	str	x0, [sp, #104]
 1dc:	ldr	x1, [sp, #104]
 1e0:	ldr	x0, [sp, #192]
 1e4:	and	x0, x1, x0
 1e8:	str	x0, [sp, #96]
 1ec:	ldr	x1, [sp, #104]
 1f0:	ldr	x0, [sp, #200]
 1f4:	and	x0, x1, x0
 1f8:	str	x0, [sp, #88]
 1fc:	ldr	x1, [sp, #96]
 200:	ldr	x0, [sp, #128]
 204:	sub	x1, x1, x0
 208:	ldr	x2, [sp, #96]
 20c:	ldr	x0, [sp, #120]
 210:	sub	x0, x2, x0
 214:	cmp	x1, x0
 218:	b.cs	2ac <__truncXfYf2__+0x274>  // b.hs, b.nlast
 21c:	mov	w1, #0x34                  	// #52
 220:	mov	w0, #0x17                  	// #23
 224:	sub	w0, w1, w0
 228:	ldr	x1, [sp, #96]
 22c:	lsr	x0, x1, x0
 230:	str	w0, [sp, #252]
 234:	ldr	w1, [sp, #236]
 238:	ldr	w0, [sp, #144]
 23c:	sub	w0, w1, w0
 240:	mov	w1, w0
 244:	mov	w0, #0x17                  	// #23
 248:	lsl	w0, w1, w0
 24c:	ldr	w1, [sp, #252]
 250:	sub	w0, w1, w0
 254:	str	w0, [sp, #252]
 258:	ldr	x1, [sp, #96]
 25c:	ldr	x0, [sp, #184]
 260:	and	x0, x1, x0
 264:	str	x0, [sp, #40]
 268:	ldr	x1, [sp, #40]
 26c:	ldr	x0, [sp, #176]
 270:	cmp	x1, x0
 274:	b.ls	288 <__truncXfYf2__+0x250>  // b.plast
 278:	ldr	w0, [sp, #252]
 27c:	add	w0, w0, #0x1
 280:	str	w0, [sp, #252]
 284:	b	434 <__truncXfYf2__+0x3fc>
 288:	ldr	x1, [sp, #40]
 28c:	ldr	x0, [sp, #176]
 290:	cmp	x1, x0
 294:	b.ne	434 <__truncXfYf2__+0x3fc>  // b.any
 298:	ldr	w0, [sp, #252]
 29c:	add	w0, w0, #0x1
 2a0:	and	w0, w0, #0xfffffffe
 2a4:	str	w0, [sp, #252]
 2a8:	b	434 <__truncXfYf2__+0x3fc>
 2ac:	ldr	x1, [sp, #96]
 2b0:	ldr	x0, [sp, #208]
 2b4:	cmp	x1, x0
 2b8:	b.ls	314 <__truncXfYf2__+0x2dc>  // b.plast
 2bc:	ldr	w1, [sp, #148]
 2c0:	mov	w0, #0x17                  	// #23
 2c4:	lsl	w0, w1, w0
 2c8:	str	w0, [sp, #252]
 2cc:	ldr	w1, [sp, #252]
 2d0:	ldr	w0, [sp, #116]
 2d4:	orr	w0, w1, w0
 2d8:	str	w0, [sp, #252]
 2dc:	ldr	x1, [sp, #96]
 2e0:	ldr	x0, [sp, #160]
 2e4:	and	x1, x1, x0
 2e8:	mov	w2, #0x34                  	// #52
 2ec:	mov	w0, #0x17                  	// #23
 2f0:	sub	w0, w2, w0
 2f4:	lsr	x0, x1, x0
 2f8:	mov	w1, w0
 2fc:	ldr	w0, [sp, #112]
 300:	and	w0, w1, w0
 304:	ldr	w1, [sp, #252]
 308:	orr	w0, w1, w0
 30c:	str	w0, [sp, #252]
 310:	b	434 <__truncXfYf2__+0x3fc>
 314:	ldr	x1, [sp, #96]
 318:	ldr	x0, [sp, #120]
 31c:	cmp	x1, x0
 320:	b.cc	338 <__truncXfYf2__+0x300>  // b.lo, b.ul, b.last
 324:	ldr	w1, [sp, #148]
 328:	mov	w0, #0x17                  	// #23
 32c:	lsl	w0, w1, w0
 330:	str	w0, [sp, #252]
 334:	b	434 <__truncXfYf2__+0x3fc>
 338:	mov	w0, #0x34                  	// #52
 33c:	ldr	x1, [sp, #96]
 340:	lsr	x0, x1, x0
 344:	str	w0, [sp, #84]
 348:	ldr	w1, [sp, #236]
 34c:	ldr	w0, [sp, #144]
 350:	sub	w1, w1, w0
 354:	ldr	w0, [sp, #84]
 358:	sub	w0, w1, w0
 35c:	add	w0, w0, #0x1
 360:	str	w0, [sp, #80]
 364:	ldr	x1, [sp, #104]
 368:	ldr	x0, [sp, #216]
 36c:	and	x0, x1, x0
 370:	ldr	x1, [sp, #224]
 374:	orr	x0, x1, x0
 378:	str	x0, [sp, #72]
 37c:	mov	w0, #0x34                  	// #52
 380:	ldr	w1, [sp, #80]
 384:	cmp	w1, w0
 388:	b.le	394 <__truncXfYf2__+0x35c>
 38c:	str	wzr, [sp, #252]
 390:	b	434 <__truncXfYf2__+0x3fc>
 394:	ldr	w1, [sp, #248]
 398:	ldr	w0, [sp, #80]
 39c:	sub	w0, w1, w0
 3a0:	ldr	x1, [sp, #72]
 3a4:	lsl	x0, x1, x0
 3a8:	cmp	x0, #0x0
 3ac:	cset	w0, ne  // ne = any
 3b0:	strb	w0, [sp, #71]
 3b4:	ldr	w0, [sp, #80]
 3b8:	ldr	x1, [sp, #72]
 3bc:	lsr	x1, x1, x0
 3c0:	ldrb	w0, [sp, #71]
 3c4:	orr	x0, x1, x0
 3c8:	str	x0, [sp, #56]
 3cc:	mov	w1, #0x34                  	// #52
 3d0:	mov	w0, #0x17                  	// #23
 3d4:	sub	w0, w1, w0
 3d8:	ldr	x1, [sp, #56]
 3dc:	lsr	x0, x1, x0
 3e0:	str	w0, [sp, #252]
 3e4:	ldr	x1, [sp, #56]
 3e8:	ldr	x0, [sp, #184]
 3ec:	and	x0, x1, x0
 3f0:	str	x0, [sp, #48]
 3f4:	ldr	x1, [sp, #48]
 3f8:	ldr	x0, [sp, #176]
 3fc:	cmp	x1, x0
 400:	b.ls	414 <__truncXfYf2__+0x3dc>  // b.plast
 404:	ldr	w0, [sp, #252]
 408:	add	w0, w0, #0x1
 40c:	str	w0, [sp, #252]
 410:	b	434 <__truncXfYf2__+0x3fc>
 414:	ldr	x1, [sp, #48]
 418:	ldr	x0, [sp, #176]
 41c:	cmp	x1, x0
 420:	b.ne	434 <__truncXfYf2__+0x3fc>  // b.any
 424:	ldr	w0, [sp, #252]
 428:	add	w0, w0, #0x1
 42c:	and	w0, w0, #0xfffffffe
 430:	str	w0, [sp, #252]
 434:	ldr	w1, [sp, #248]
 438:	ldr	w0, [sp, #156]
 43c:	sub	w0, w1, w0
 440:	ldr	x1, [sp, #88]
 444:	lsr	x0, x1, x0
 448:	mov	w1, w0
 44c:	ldr	w0, [sp, #252]
 450:	orr	w0, w0, w1
 454:	str	w0, [sp, #36]
 458:	ldr	w0, [sp, #36]
 45c:	bl	1c <dstFromRep>
 460:	ldp	x29, x30, [sp], #256
 464:	ret

0000000000000468 <__truncdfsf2>:
 468:	stp	x29, x30, [sp, #-32]!
 46c:	mov	x29, sp
 470:	str	d0, [sp, #24]
 474:	ldr	d0, [sp, #24]
 478:	bl	38 <__truncXfYf2__>
 47c:	ldp	x29, x30, [sp], #32
 480:	ret

truncsfhf2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srcToRep>:
   0:	sub	sp, sp, #0x20
   4:	str	s0, [sp, #12]
   8:	ldr	s0, [sp, #12]
   c:	str	s0, [sp, #24]
  10:	ldr	w0, [sp, #24]
  14:	add	sp, sp, #0x20
  18:	ret

000000000000001c <dstFromRep>:
  1c:	sub	sp, sp, #0x20
  20:	strh	w0, [sp, #14]
  24:	ldrh	w0, [sp, #14]
  28:	strh	w0, [sp, #24]
  2c:	ldrh	w0, [sp, #24]
  30:	add	sp, sp, #0x20
  34:	ret

0000000000000038 <__truncXfYf2__>:
  38:	stp	x29, x30, [sp, #-176]!
  3c:	mov	x29, sp
  40:	str	s0, [sp, #28]
  44:	mov	w0, #0x20                  	// #32
  48:	str	w0, [sp, #168]
  4c:	mov	w0, #0x17                  	// #23
  50:	ldr	w1, [sp, #168]
  54:	sub	w0, w1, w0
  58:	sub	w0, w0, #0x1
  5c:	str	w0, [sp, #164]
  60:	ldr	w0, [sp, #164]
  64:	mov	w1, #0x1                   	// #1
  68:	lsl	w0, w1, w0
  6c:	sub	w0, w0, #0x1
  70:	str	w0, [sp, #160]
  74:	ldr	w0, [sp, #160]
  78:	asr	w0, w0, #1
  7c:	str	w0, [sp, #156]
  80:	mov	w0, #0x17                  	// #23
  84:	mov	w1, #0x1                   	// #1
  88:	lsl	w0, w1, w0
  8c:	str	w0, [sp, #152]
  90:	ldr	w0, [sp, #152]
  94:	sub	w0, w0, #0x1
  98:	str	w0, [sp, #148]
  9c:	ldr	w1, [sp, #160]
  a0:	mov	w0, #0x17                  	// #23
  a4:	lsl	w0, w1, w0
  a8:	str	w0, [sp, #144]
  ac:	mov	w1, #0x17                  	// #23
  b0:	ldr	w0, [sp, #164]
  b4:	add	w0, w1, w0
  b8:	mov	w1, #0x1                   	// #1
  bc:	lsl	w0, w1, w0
  c0:	str	w0, [sp, #140]
  c4:	ldr	w0, [sp, #140]
  c8:	sub	w0, w0, #0x1
  cc:	str	w0, [sp, #136]
  d0:	mov	w1, #0x17                  	// #23
  d4:	mov	w0, #0xa                   	// #10
  d8:	sub	w0, w1, w0
  dc:	mov	w1, #0x1                   	// #1
  e0:	lsl	w0, w1, w0
  e4:	sub	w0, w0, #0x1
  e8:	str	w0, [sp, #132]
  ec:	mov	w1, #0x17                  	// #23
  f0:	mov	w0, #0xa                   	// #10
  f4:	sub	w0, w1, w0
  f8:	sub	w0, w0, #0x1
  fc:	mov	w1, #0x1                   	// #1
 100:	lsl	w0, w1, w0
 104:	str	w0, [sp, #128]
 108:	mov	w0, #0x17                  	// #23
 10c:	sub	w0, w0, #0x1
 110:	mov	w1, #0x1                   	// #1
 114:	lsl	w0, w1, w0
 118:	str	w0, [sp, #124]
 11c:	ldr	w0, [sp, #124]
 120:	sub	w0, w0, #0x1
 124:	str	w0, [sp, #120]
 128:	mov	w0, #0x10                  	// #16
 12c:	str	w0, [sp, #116]
 130:	mov	w0, #0xa                   	// #10
 134:	ldr	w1, [sp, #116]
 138:	sub	w0, w1, w0
 13c:	sub	w0, w0, #0x1
 140:	str	w0, [sp, #112]
 144:	ldr	w0, [sp, #112]
 148:	mov	w1, #0x1                   	// #1
 14c:	lsl	w0, w1, w0
 150:	sub	w0, w0, #0x1
 154:	str	w0, [sp, #108]
 158:	ldr	w0, [sp, #108]
 15c:	asr	w0, w0, #1
 160:	str	w0, [sp, #104]
 164:	ldr	w0, [sp, #156]
 168:	add	w1, w0, #0x1
 16c:	ldr	w0, [sp, #104]
 170:	sub	w0, w1, w0
 174:	str	w0, [sp, #100]
 178:	ldr	w1, [sp, #156]
 17c:	ldr	w0, [sp, #108]
 180:	add	w1, w1, w0
 184:	ldr	w0, [sp, #104]
 188:	sub	w0, w1, w0
 18c:	str	w0, [sp, #96]
 190:	ldr	w1, [sp, #100]
 194:	mov	w0, #0x17                  	// #23
 198:	lsl	w0, w1, w0
 19c:	str	w0, [sp, #92]
 1a0:	ldr	w1, [sp, #96]
 1a4:	mov	w0, #0x17                  	// #23
 1a8:	lsl	w0, w1, w0
 1ac:	str	w0, [sp, #88]
 1b0:	mov	w0, #0xa                   	// #10
 1b4:	sub	w0, w0, #0x1
 1b8:	mov	w1, #0x1                   	// #1
 1bc:	lsl	w0, w1, w0
 1c0:	strh	w0, [sp, #86]
 1c4:	ldrh	w0, [sp, #86]
 1c8:	sub	w0, w0, #0x1
 1cc:	strh	w0, [sp, #84]
 1d0:	ldr	s0, [sp, #28]
 1d4:	bl	0 <srcToRep>
 1d8:	str	w0, [sp, #80]
 1dc:	ldr	w1, [sp, #80]
 1e0:	ldr	w0, [sp, #136]
 1e4:	and	w0, w1, w0
 1e8:	str	w0, [sp, #76]
 1ec:	ldr	w1, [sp, #80]
 1f0:	ldr	w0, [sp, #140]
 1f4:	and	w0, w1, w0
 1f8:	str	w0, [sp, #72]
 1fc:	ldr	w1, [sp, #76]
 200:	ldr	w0, [sp, #92]
 204:	sub	w1, w1, w0
 208:	ldr	w2, [sp, #76]
 20c:	ldr	w0, [sp, #88]
 210:	sub	w0, w2, w0
 214:	cmp	w1, w0
 218:	b.cs	2c0 <__truncXfYf2__+0x288>  // b.hs, b.nlast
 21c:	mov	w1, #0x17                  	// #23
 220:	mov	w0, #0xa                   	// #10
 224:	sub	w0, w1, w0
 228:	ldr	w1, [sp, #76]
 22c:	lsr	w0, w1, w0
 230:	strh	w0, [sp, #174]
 234:	ldr	w0, [sp, #156]
 238:	and	w1, w0, #0xffff
 23c:	ldr	w0, [sp, #104]
 240:	and	w0, w0, #0xffff
 244:	sub	w0, w1, w0
 248:	and	w0, w0, #0xffff
 24c:	mov	w1, w0
 250:	mov	w0, #0xa                   	// #10
 254:	lsl	w0, w1, w0
 258:	and	w0, w0, #0xffff
 25c:	ldrh	w1, [sp, #174]
 260:	sub	w0, w1, w0
 264:	strh	w0, [sp, #174]
 268:	ldr	w1, [sp, #76]
 26c:	ldr	w0, [sp, #132]
 270:	and	w0, w1, w0
 274:	str	w0, [sp, #44]
 278:	ldr	w1, [sp, #44]
 27c:	ldr	w0, [sp, #128]
 280:	cmp	w1, w0
 284:	b.ls	298 <__truncXfYf2__+0x260>  // b.plast
 288:	ldrh	w0, [sp, #174]
 28c:	add	w0, w0, #0x1
 290:	strh	w0, [sp, #174]
 294:	b	460 <__truncXfYf2__+0x428>
 298:	ldr	w1, [sp, #44]
 29c:	ldr	w0, [sp, #128]
 2a0:	cmp	w1, w0
 2a4:	b.ne	460 <__truncXfYf2__+0x428>  // b.any
 2a8:	ldrh	w0, [sp, #174]
 2ac:	add	w0, w0, #0x1
 2b0:	and	w0, w0, #0xffff
 2b4:	and	w0, w0, #0xfffffffe
 2b8:	strh	w0, [sp, #174]
 2bc:	b	460 <__truncXfYf2__+0x428>
 2c0:	ldr	w1, [sp, #76]
 2c4:	ldr	w0, [sp, #144]
 2c8:	cmp	w1, w0
 2cc:	b.ls	334 <__truncXfYf2__+0x2fc>  // b.plast
 2d0:	ldr	w0, [sp, #108]
 2d4:	and	w0, w0, #0xffff
 2d8:	mov	w1, w0
 2dc:	mov	w0, #0xa                   	// #10
 2e0:	lsl	w0, w1, w0
 2e4:	strh	w0, [sp, #174]
 2e8:	ldrh	w1, [sp, #174]
 2ec:	ldrh	w0, [sp, #86]
 2f0:	orr	w0, w1, w0
 2f4:	strh	w0, [sp, #174]
 2f8:	ldr	w1, [sp, #76]
 2fc:	ldr	w0, [sp, #120]
 300:	and	w1, w1, w0
 304:	mov	w2, #0x17                  	// #23
 308:	mov	w0, #0xa                   	// #10
 30c:	sub	w0, w2, w0
 310:	lsr	w0, w1, w0
 314:	and	w1, w0, #0xffff
 318:	ldrh	w0, [sp, #84]
 31c:	and	w0, w1, w0
 320:	and	w1, w0, #0xffff
 324:	ldrh	w0, [sp, #174]
 328:	orr	w0, w1, w0
 32c:	strh	w0, [sp, #174]
 330:	b	460 <__truncXfYf2__+0x428>
 334:	ldr	w1, [sp, #76]
 338:	ldr	w0, [sp, #88]
 33c:	cmp	w1, w0
 340:	b.cc	360 <__truncXfYf2__+0x328>  // b.lo, b.ul, b.last
 344:	ldr	w0, [sp, #108]
 348:	and	w0, w0, #0xffff
 34c:	mov	w1, w0
 350:	mov	w0, #0xa                   	// #10
 354:	lsl	w0, w1, w0
 358:	strh	w0, [sp, #174]
 35c:	b	460 <__truncXfYf2__+0x428>
 360:	mov	w0, #0x17                  	// #23
 364:	ldr	w1, [sp, #76]
 368:	lsr	w0, w1, w0
 36c:	str	w0, [sp, #68]
 370:	ldr	w1, [sp, #156]
 374:	ldr	w0, [sp, #104]
 378:	sub	w1, w1, w0
 37c:	ldr	w0, [sp, #68]
 380:	sub	w0, w1, w0
 384:	add	w0, w0, #0x1
 388:	str	w0, [sp, #64]
 38c:	ldr	w1, [sp, #80]
 390:	ldr	w0, [sp, #148]
 394:	and	w0, w1, w0
 398:	ldr	w1, [sp, #152]
 39c:	orr	w0, w1, w0
 3a0:	str	w0, [sp, #60]
 3a4:	mov	w0, #0x17                  	// #23
 3a8:	ldr	w1, [sp, #64]
 3ac:	cmp	w1, w0
 3b0:	b.le	3bc <__truncXfYf2__+0x384>
 3b4:	strh	wzr, [sp, #174]
 3b8:	b	460 <__truncXfYf2__+0x428>
 3bc:	ldr	w1, [sp, #168]
 3c0:	ldr	w0, [sp, #64]
 3c4:	sub	w0, w1, w0
 3c8:	ldr	w1, [sp, #60]
 3cc:	lsl	w0, w1, w0
 3d0:	cmp	w0, #0x0
 3d4:	cset	w0, ne  // ne = any
 3d8:	strb	w0, [sp, #59]
 3dc:	ldr	w0, [sp, #64]
 3e0:	ldr	w1, [sp, #60]
 3e4:	lsr	w1, w1, w0
 3e8:	ldrb	w0, [sp, #59]
 3ec:	orr	w0, w1, w0
 3f0:	str	w0, [sp, #52]
 3f4:	mov	w1, #0x17                  	// #23
 3f8:	mov	w0, #0xa                   	// #10
 3fc:	sub	w0, w1, w0
 400:	ldr	w1, [sp, #52]
 404:	lsr	w0, w1, w0
 408:	strh	w0, [sp, #174]
 40c:	ldr	w1, [sp, #52]
 410:	ldr	w0, [sp, #132]
 414:	and	w0, w1, w0
 418:	str	w0, [sp, #48]
 41c:	ldr	w1, [sp, #48]
 420:	ldr	w0, [sp, #128]
 424:	cmp	w1, w0
 428:	b.ls	43c <__truncXfYf2__+0x404>  // b.plast
 42c:	ldrh	w0, [sp, #174]
 430:	add	w0, w0, #0x1
 434:	strh	w0, [sp, #174]
 438:	b	460 <__truncXfYf2__+0x428>
 43c:	ldr	w1, [sp, #48]
 440:	ldr	w0, [sp, #128]
 444:	cmp	w1, w0
 448:	b.ne	460 <__truncXfYf2__+0x428>  // b.any
 44c:	ldrh	w0, [sp, #174]
 450:	add	w0, w0, #0x1
 454:	and	w0, w0, #0xffff
 458:	and	w0, w0, #0xfffffffe
 45c:	strh	w0, [sp, #174]
 460:	ldr	w1, [sp, #168]
 464:	ldr	w0, [sp, #116]
 468:	sub	w0, w1, w0
 46c:	ldr	w1, [sp, #72]
 470:	lsr	w0, w1, w0
 474:	and	w1, w0, #0xffff
 478:	ldrh	w0, [sp, #174]
 47c:	orr	w0, w1, w0
 480:	strh	w0, [sp, #42]
 484:	ldrh	w0, [sp, #42]
 488:	bl	1c <dstFromRep>
 48c:	and	w0, w0, #0xffff
 490:	ldp	x29, x30, [sp], #176
 494:	ret

0000000000000498 <__truncsfhf2>:
 498:	stp	x29, x30, [sp, #-32]!
 49c:	mov	x29, sp
 4a0:	str	s0, [sp, #28]
 4a4:	ldr	s0, [sp, #28]
 4a8:	bl	38 <__truncXfYf2__>
 4ac:	and	w0, w0, #0xffff
 4b0:	ldp	x29, x30, [sp], #32
 4b4:	ret

00000000000004b8 <__gnu_f2h_ieee>:
 4b8:	stp	x29, x30, [sp, #-32]!
 4bc:	mov	x29, sp
 4c0:	str	s0, [sp, #28]
 4c4:	ldr	s0, [sp, #28]
 4c8:	bl	498 <__truncsfhf2>
 4cc:	and	w0, w0, #0xffff
 4d0:	ldp	x29, x30, [sp], #32
 4d4:	ret

ucmpdi2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__ucmpdi2>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	ldr	x0, [sp, #8]
  10:	str	x0, [sp, #24]
  14:	ldr	x0, [sp]
  18:	str	x0, [sp, #16]
  1c:	ldr	w1, [sp, #28]
  20:	ldr	w0, [sp, #20]
  24:	cmp	w1, w0
  28:	b.cs	34 <__ucmpdi2+0x34>  // b.hs, b.nlast
  2c:	mov	w0, #0x0                   	// #0
  30:	b	80 <__ucmpdi2+0x80>
  34:	ldr	w1, [sp, #28]
  38:	ldr	w0, [sp, #20]
  3c:	cmp	w1, w0
  40:	b.ls	4c <__ucmpdi2+0x4c>  // b.plast
  44:	mov	w0, #0x2                   	// #2
  48:	b	80 <__ucmpdi2+0x80>
  4c:	ldr	w1, [sp, #24]
  50:	ldr	w0, [sp, #16]
  54:	cmp	w1, w0
  58:	b.cs	64 <__ucmpdi2+0x64>  // b.hs, b.nlast
  5c:	mov	w0, #0x0                   	// #0
  60:	b	80 <__ucmpdi2+0x80>
  64:	ldr	w1, [sp, #24]
  68:	ldr	w0, [sp, #16]
  6c:	cmp	w1, w0
  70:	b.ls	7c <__ucmpdi2+0x7c>  // b.plast
  74:	mov	w0, #0x2                   	// #2
  78:	b	80 <__ucmpdi2+0x80>
  7c:	mov	w0, #0x1                   	// #1
  80:	add	sp, sp, #0x20
  84:	ret

ucmpti2.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__ucmpti2>:
   0:	sub	sp, sp, #0x40
   4:	stp	x0, x1, [sp, #16]
   8:	stp	x2, x3, [sp]
   c:	ldp	x0, x1, [sp, #16]
  10:	stp	x0, x1, [sp, #48]
  14:	ldp	x0, x1, [sp]
  18:	stp	x0, x1, [sp, #32]
  1c:	ldr	x1, [sp, #56]
  20:	ldr	x0, [sp, #40]
  24:	cmp	x1, x0
  28:	b.cs	34 <__ucmpti2+0x34>  // b.hs, b.nlast
  2c:	mov	w0, #0x0                   	// #0
  30:	b	80 <__ucmpti2+0x80>
  34:	ldr	x1, [sp, #56]
  38:	ldr	x0, [sp, #40]
  3c:	cmp	x1, x0
  40:	b.ls	4c <__ucmpti2+0x4c>  // b.plast
  44:	mov	w0, #0x2                   	// #2
  48:	b	80 <__ucmpti2+0x80>
  4c:	ldr	x1, [sp, #48]
  50:	ldr	x0, [sp, #32]
  54:	cmp	x1, x0
  58:	b.cs	64 <__ucmpti2+0x64>  // b.hs, b.nlast
  5c:	mov	w0, #0x0                   	// #0
  60:	b	80 <__ucmpti2+0x80>
  64:	ldr	x1, [sp, #48]
  68:	ldr	x0, [sp, #32]
  6c:	cmp	x1, x0
  70:	b.ls	7c <__ucmpti2+0x7c>  // b.plast
  74:	mov	w0, #0x2                   	// #2
  78:	b	80 <__ucmpti2+0x80>
  7c:	mov	w0, #0x1                   	// #1
  80:	add	sp, sp, #0x40
  84:	ret

udivdi3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__udivdi3>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	mov	x2, #0x0                   	// #0
  14:	ldr	x1, [sp, #16]
  18:	ldr	x0, [sp, #24]
  1c:	bl	0 <__udivmoddi4>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

udivmoddi4.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__udivmoddi4>:
   0:	sub	sp, sp, #0x60
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	x2, [sp, #8]
  10:	mov	w0, #0x20                  	// #32
  14:	str	w0, [sp, #84]
  18:	mov	w0, #0x40                  	// #64
  1c:	str	w0, [sp, #80]
  20:	ldr	x0, [sp, #24]
  24:	str	x0, [sp, #64]
  28:	ldr	x0, [sp, #16]
  2c:	str	x0, [sp, #56]
  30:	ldr	w0, [sp, #68]
  34:	cmp	w0, #0x0
  38:	b.ne	ac <__udivmoddi4+0xac>  // b.any
  3c:	ldr	w0, [sp, #60]
  40:	cmp	w0, #0x0
  44:	b.ne	88 <__udivmoddi4+0x88>  // b.any
  48:	ldr	x0, [sp, #8]
  4c:	cmp	x0, #0x0
  50:	b.eq	74 <__udivmoddi4+0x74>  // b.none
  54:	ldr	w0, [sp, #64]
  58:	ldr	w1, [sp, #56]
  5c:	udiv	w2, w0, w1
  60:	mul	w1, w2, w1
  64:	sub	w0, w0, w1
  68:	mov	w1, w0
  6c:	ldr	x0, [sp, #8]
  70:	str	x1, [x0]
  74:	ldr	w1, [sp, #64]
  78:	ldr	w0, [sp, #56]
  7c:	udiv	w0, w1, w0
  80:	mov	w0, w0
  84:	b	624 <__udivmoddi4+0x624>
  88:	ldr	x0, [sp, #8]
  8c:	cmp	x0, #0x0
  90:	b.eq	a4 <__udivmoddi4+0xa4>  // b.none
  94:	ldr	w0, [sp, #64]
  98:	mov	w1, w0
  9c:	ldr	x0, [sp, #8]
  a0:	str	x1, [x0]
  a4:	mov	x0, #0x0                   	// #0
  a8:	b	624 <__udivmoddi4+0x624>
  ac:	ldr	w0, [sp, #56]
  b0:	cmp	w0, #0x0
  b4:	b.ne	270 <__udivmoddi4+0x270>  // b.any
  b8:	ldr	w0, [sp, #60]
  bc:	cmp	w0, #0x0
  c0:	b.ne	104 <__udivmoddi4+0x104>  // b.any
  c4:	ldr	x0, [sp, #8]
  c8:	cmp	x0, #0x0
  cc:	b.eq	f0 <__udivmoddi4+0xf0>  // b.none
  d0:	ldr	w0, [sp, #68]
  d4:	ldr	w1, [sp, #56]
  d8:	udiv	w2, w0, w1
  dc:	mul	w1, w2, w1
  e0:	sub	w0, w0, w1
  e4:	mov	w1, w0
  e8:	ldr	x0, [sp, #8]
  ec:	str	x1, [x0]
  f0:	ldr	w1, [sp, #68]
  f4:	ldr	w0, [sp, #56]
  f8:	udiv	w0, w1, w0
  fc:	mov	w0, w0
 100:	b	624 <__udivmoddi4+0x624>
 104:	ldr	w0, [sp, #64]
 108:	cmp	w0, #0x0
 10c:	b.ne	158 <__udivmoddi4+0x158>  // b.any
 110:	ldr	x0, [sp, #8]
 114:	cmp	x0, #0x0
 118:	b.eq	144 <__udivmoddi4+0x144>  // b.none
 11c:	ldr	w0, [sp, #68]
 120:	ldr	w1, [sp, #60]
 124:	udiv	w2, w0, w1
 128:	mul	w1, w2, w1
 12c:	sub	w0, w0, w1
 130:	str	w0, [sp, #44]
 134:	str	wzr, [sp, #40]
 138:	ldr	x1, [sp, #40]
 13c:	ldr	x0, [sp, #8]
 140:	str	x1, [x0]
 144:	ldr	w1, [sp, #68]
 148:	ldr	w0, [sp, #60]
 14c:	udiv	w0, w1, w0
 150:	mov	w0, w0
 154:	b	624 <__udivmoddi4+0x624>
 158:	ldr	w1, [sp, #60]
 15c:	ldr	w0, [sp, #60]
 160:	sub	w0, w0, #0x1
 164:	and	w0, w1, w0
 168:	cmp	w0, #0x0
 16c:	b.ne	1c0 <__udivmoddi4+0x1c0>  // b.any
 170:	ldr	x0, [sp, #8]
 174:	cmp	x0, #0x0
 178:	b.eq	1a4 <__udivmoddi4+0x1a4>  // b.none
 17c:	ldr	w0, [sp, #64]
 180:	str	w0, [sp, #40]
 184:	ldr	w1, [sp, #68]
 188:	ldr	w0, [sp, #60]
 18c:	sub	w0, w0, #0x1
 190:	and	w0, w1, w0
 194:	str	w0, [sp, #44]
 198:	ldr	x1, [sp, #40]
 19c:	ldr	x0, [sp, #8]
 1a0:	str	x1, [x0]
 1a4:	ldr	w1, [sp, #68]
 1a8:	ldr	w0, [sp, #60]
 1ac:	rbit	w0, w0
 1b0:	clz	w0, w0
 1b4:	lsr	w0, w1, w0
 1b8:	mov	w0, w0
 1bc:	b	624 <__udivmoddi4+0x624>
 1c0:	ldr	w0, [sp, #60]
 1c4:	clz	w1, w0
 1c8:	ldr	w0, [sp, #68]
 1cc:	clz	w0, w0
 1d0:	sub	w0, w1, w0
 1d4:	str	w0, [sp, #92]
 1d8:	ldr	w0, [sp, #84]
 1dc:	sub	w0, w0, #0x2
 1e0:	ldr	w1, [sp, #92]
 1e4:	cmp	w1, w0
 1e8:	b.ls	20c <__udivmoddi4+0x20c>  // b.plast
 1ec:	ldr	x0, [sp, #8]
 1f0:	cmp	x0, #0x0
 1f4:	b.eq	204 <__udivmoddi4+0x204>  // b.none
 1f8:	ldr	x1, [sp, #64]
 1fc:	ldr	x0, [sp, #8]
 200:	str	x1, [x0]
 204:	mov	x0, #0x0                   	// #0
 208:	b	624 <__udivmoddi4+0x624>
 20c:	ldr	w0, [sp, #92]
 210:	add	w0, w0, #0x1
 214:	str	w0, [sp, #92]
 218:	str	wzr, [sp, #48]
 21c:	ldr	w1, [sp, #64]
 220:	ldr	w2, [sp, #84]
 224:	ldr	w0, [sp, #92]
 228:	sub	w0, w2, w0
 22c:	lsl	w0, w1, w0
 230:	str	w0, [sp, #52]
 234:	ldr	w1, [sp, #68]
 238:	ldr	w0, [sp, #92]
 23c:	lsr	w0, w1, w0
 240:	str	w0, [sp, #44]
 244:	ldr	w1, [sp, #68]
 248:	ldr	w2, [sp, #84]
 24c:	ldr	w0, [sp, #92]
 250:	sub	w0, w2, w0
 254:	lsl	w1, w1, w0
 258:	ldr	w2, [sp, #64]
 25c:	ldr	w0, [sp, #92]
 260:	lsr	w0, w2, w0
 264:	orr	w0, w1, w0
 268:	str	w0, [sp, #40]
 26c:	b	518 <__udivmoddi4+0x518>
 270:	ldr	w0, [sp, #60]
 274:	cmp	w0, #0x0
 278:	b.ne	444 <__udivmoddi4+0x444>  // b.any
 27c:	ldr	w1, [sp, #56]
 280:	ldr	w0, [sp, #56]
 284:	sub	w0, w0, #0x1
 288:	and	w0, w1, w0
 28c:	cmp	w0, #0x0
 290:	b.ne	320 <__udivmoddi4+0x320>  // b.any
 294:	ldr	x0, [sp, #8]
 298:	cmp	x0, #0x0
 29c:	b.eq	2bc <__udivmoddi4+0x2bc>  // b.none
 2a0:	ldr	w1, [sp, #64]
 2a4:	ldr	w0, [sp, #56]
 2a8:	sub	w0, w0, #0x1
 2ac:	and	w0, w1, w0
 2b0:	mov	w1, w0
 2b4:	ldr	x0, [sp, #8]
 2b8:	str	x1, [x0]
 2bc:	ldr	w0, [sp, #56]
 2c0:	cmp	w0, #0x1
 2c4:	b.ne	2d0 <__udivmoddi4+0x2d0>  // b.any
 2c8:	ldr	x0, [sp, #64]
 2cc:	b	624 <__udivmoddi4+0x624>
 2d0:	ldr	w0, [sp, #56]
 2d4:	rbit	w0, w0
 2d8:	clz	w0, w0
 2dc:	str	w0, [sp, #92]
 2e0:	ldr	w1, [sp, #68]
 2e4:	ldr	w0, [sp, #92]
 2e8:	lsr	w0, w1, w0
 2ec:	str	w0, [sp, #52]
 2f0:	ldr	w1, [sp, #68]
 2f4:	ldr	w2, [sp, #84]
 2f8:	ldr	w0, [sp, #92]
 2fc:	sub	w0, w2, w0
 300:	lsl	w1, w1, w0
 304:	ldr	w2, [sp, #64]
 308:	ldr	w0, [sp, #92]
 30c:	lsr	w0, w2, w0
 310:	orr	w0, w1, w0
 314:	str	w0, [sp, #48]
 318:	ldr	x0, [sp, #48]
 31c:	b	624 <__udivmoddi4+0x624>
 320:	ldr	w0, [sp, #56]
 324:	clz	w0, w0
 328:	mov	w1, w0
 32c:	ldr	w0, [sp, #84]
 330:	add	w0, w1, w0
 334:	ldr	w1, [sp, #68]
 338:	clz	w1, w1
 33c:	sub	w0, w0, w1
 340:	add	w0, w0, #0x1
 344:	str	w0, [sp, #92]
 348:	ldr	w1, [sp, #92]
 34c:	ldr	w0, [sp, #84]
 350:	cmp	w1, w0
 354:	b.ne	374 <__udivmoddi4+0x374>  // b.any
 358:	str	wzr, [sp, #48]
 35c:	ldr	w0, [sp, #64]
 360:	str	w0, [sp, #52]
 364:	str	wzr, [sp, #44]
 368:	ldr	w0, [sp, #68]
 36c:	str	w0, [sp, #40]
 370:	b	518 <__udivmoddi4+0x518>
 374:	ldr	w1, [sp, #92]
 378:	ldr	w0, [sp, #84]
 37c:	cmp	w1, w0
 380:	b.cs	3dc <__udivmoddi4+0x3dc>  // b.hs, b.nlast
 384:	str	wzr, [sp, #48]
 388:	ldr	w1, [sp, #64]
 38c:	ldr	w2, [sp, #84]
 390:	ldr	w0, [sp, #92]
 394:	sub	w0, w2, w0
 398:	lsl	w0, w1, w0
 39c:	str	w0, [sp, #52]
 3a0:	ldr	w1, [sp, #68]
 3a4:	ldr	w0, [sp, #92]
 3a8:	lsr	w0, w1, w0
 3ac:	str	w0, [sp, #44]
 3b0:	ldr	w1, [sp, #68]
 3b4:	ldr	w2, [sp, #84]
 3b8:	ldr	w0, [sp, #92]
 3bc:	sub	w0, w2, w0
 3c0:	lsl	w1, w1, w0
 3c4:	ldr	w2, [sp, #64]
 3c8:	ldr	w0, [sp, #92]
 3cc:	lsr	w0, w2, w0
 3d0:	orr	w0, w1, w0
 3d4:	str	w0, [sp, #40]
 3d8:	b	518 <__udivmoddi4+0x518>
 3dc:	ldr	w1, [sp, #64]
 3e0:	ldr	w2, [sp, #80]
 3e4:	ldr	w0, [sp, #92]
 3e8:	sub	w0, w2, w0
 3ec:	lsl	w0, w1, w0
 3f0:	str	w0, [sp, #48]
 3f4:	ldr	w1, [sp, #68]
 3f8:	ldr	w2, [sp, #80]
 3fc:	ldr	w0, [sp, #92]
 400:	sub	w0, w2, w0
 404:	lsl	w1, w1, w0
 408:	ldr	w2, [sp, #64]
 40c:	ldr	w3, [sp, #92]
 410:	ldr	w0, [sp, #84]
 414:	sub	w0, w3, w0
 418:	lsr	w0, w2, w0
 41c:	orr	w0, w1, w0
 420:	str	w0, [sp, #52]
 424:	str	wzr, [sp, #44]
 428:	ldr	w1, [sp, #68]
 42c:	ldr	w2, [sp, #92]
 430:	ldr	w0, [sp, #84]
 434:	sub	w0, w2, w0
 438:	lsr	w0, w1, w0
 43c:	str	w0, [sp, #40]
 440:	b	518 <__udivmoddi4+0x518>
 444:	ldr	w0, [sp, #60]
 448:	clz	w1, w0
 44c:	ldr	w0, [sp, #68]
 450:	clz	w0, w0
 454:	sub	w0, w1, w0
 458:	str	w0, [sp, #92]
 45c:	ldr	w0, [sp, #84]
 460:	sub	w0, w0, #0x1
 464:	ldr	w1, [sp, #92]
 468:	cmp	w1, w0
 46c:	b.ls	490 <__udivmoddi4+0x490>  // b.plast
 470:	ldr	x0, [sp, #8]
 474:	cmp	x0, #0x0
 478:	b.eq	488 <__udivmoddi4+0x488>  // b.none
 47c:	ldr	x1, [sp, #64]
 480:	ldr	x0, [sp, #8]
 484:	str	x1, [x0]
 488:	mov	x0, #0x0                   	// #0
 48c:	b	624 <__udivmoddi4+0x624>
 490:	ldr	w0, [sp, #92]
 494:	add	w0, w0, #0x1
 498:	str	w0, [sp, #92]
 49c:	str	wzr, [sp, #48]
 4a0:	ldr	w1, [sp, #92]
 4a4:	ldr	w0, [sp, #84]
 4a8:	cmp	w1, w0
 4ac:	b.ne	4c8 <__udivmoddi4+0x4c8>  // b.any
 4b0:	ldr	w0, [sp, #64]
 4b4:	str	w0, [sp, #52]
 4b8:	str	wzr, [sp, #44]
 4bc:	ldr	w0, [sp, #68]
 4c0:	str	w0, [sp, #40]
 4c4:	b	518 <__udivmoddi4+0x518>
 4c8:	ldr	w1, [sp, #64]
 4cc:	ldr	w2, [sp, #84]
 4d0:	ldr	w0, [sp, #92]
 4d4:	sub	w0, w2, w0
 4d8:	lsl	w0, w1, w0
 4dc:	str	w0, [sp, #52]
 4e0:	ldr	w1, [sp, #68]
 4e4:	ldr	w0, [sp, #92]
 4e8:	lsr	w0, w1, w0
 4ec:	str	w0, [sp, #44]
 4f0:	ldr	w1, [sp, #68]
 4f4:	ldr	w2, [sp, #84]
 4f8:	ldr	w0, [sp, #92]
 4fc:	sub	w0, w2, w0
 500:	lsl	w1, w1, w0
 504:	ldr	w2, [sp, #64]
 508:	ldr	w0, [sp, #92]
 50c:	lsr	w0, w2, w0
 510:	orr	w0, w1, w0
 514:	str	w0, [sp, #40]
 518:	str	wzr, [sp, #88]
 51c:	b	5e8 <__udivmoddi4+0x5e8>
 520:	ldr	w0, [sp, #44]
 524:	lsl	w1, w0, #1
 528:	ldr	w2, [sp, #40]
 52c:	ldr	w0, [sp, #84]
 530:	sub	w0, w0, #0x1
 534:	lsr	w0, w2, w0
 538:	orr	w0, w1, w0
 53c:	str	w0, [sp, #44]
 540:	ldr	w0, [sp, #40]
 544:	lsl	w1, w0, #1
 548:	ldr	w2, [sp, #52]
 54c:	ldr	w0, [sp, #84]
 550:	sub	w0, w0, #0x1
 554:	lsr	w0, w2, w0
 558:	orr	w0, w1, w0
 55c:	str	w0, [sp, #40]
 560:	ldr	w0, [sp, #52]
 564:	lsl	w1, w0, #1
 568:	ldr	w2, [sp, #48]
 56c:	ldr	w0, [sp, #84]
 570:	sub	w0, w0, #0x1
 574:	lsr	w0, w2, w0
 578:	orr	w0, w1, w0
 57c:	str	w0, [sp, #52]
 580:	ldr	w0, [sp, #48]
 584:	lsl	w1, w0, #1
 588:	ldr	w0, [sp, #88]
 58c:	orr	w0, w1, w0
 590:	str	w0, [sp, #48]
 594:	ldr	x1, [sp, #56]
 598:	ldr	x0, [sp, #40]
 59c:	sub	x0, x1, x0
 5a0:	sub	x0, x0, #0x1
 5a4:	mov	x1, x0
 5a8:	ldr	w0, [sp, #80]
 5ac:	sub	w0, w0, #0x1
 5b0:	asr	x0, x1, x0
 5b4:	str	x0, [sp, #72]
 5b8:	ldr	x0, [sp, #72]
 5bc:	and	w0, w0, #0x1
 5c0:	str	w0, [sp, #88]
 5c4:	ldr	x1, [sp, #40]
 5c8:	ldr	x2, [sp, #56]
 5cc:	ldr	x0, [sp, #72]
 5d0:	and	x0, x2, x0
 5d4:	sub	x0, x1, x0
 5d8:	str	x0, [sp, #40]
 5dc:	ldr	w0, [sp, #92]
 5e0:	sub	w0, w0, #0x1
 5e4:	str	w0, [sp, #92]
 5e8:	ldr	w0, [sp, #92]
 5ec:	cmp	w0, #0x0
 5f0:	b.ne	520 <__udivmoddi4+0x520>  // b.any
 5f4:	ldr	x0, [sp, #48]
 5f8:	lsl	x1, x0, #1
 5fc:	ldr	w0, [sp, #88]
 600:	orr	x0, x1, x0
 604:	str	x0, [sp, #48]
 608:	ldr	x0, [sp, #8]
 60c:	cmp	x0, #0x0
 610:	b.eq	620 <__udivmoddi4+0x620>  // b.none
 614:	ldr	x1, [sp, #40]
 618:	ldr	x0, [sp, #8]
 61c:	str	x1, [x0]
 620:	ldr	x0, [sp, #48]
 624:	add	sp, sp, #0x60
 628:	ret

udivmodsi4.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__udivmodsi4>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	w0, [sp, #28]
   c:	str	w1, [sp, #24]
  10:	str	x2, [sp, #16]
  14:	ldr	w1, [sp, #24]
  18:	ldr	w0, [sp, #28]
  1c:	bl	0 <__udivsi3>
  20:	str	w0, [sp, #44]
  24:	ldr	w1, [sp, #44]
  28:	ldr	w0, [sp, #24]
  2c:	mul	w0, w1, w0
  30:	ldr	w1, [sp, #28]
  34:	sub	w1, w1, w0
  38:	ldr	x0, [sp, #16]
  3c:	str	w1, [x0]
  40:	ldr	w0, [sp, #44]
  44:	ldp	x29, x30, [sp], #48
  48:	ret

udivmodti4.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__udivmodti4>:
   0:	stp	x19, x20, [sp, #-240]!
   4:	stp	x21, x22, [sp, #16]
   8:	stp	x23, x24, [sp, #32]
   c:	stp	x25, x26, [sp, #48]
  10:	str	x27, [sp, #64]
  14:	stp	x0, x1, [sp, #128]
  18:	stp	x2, x3, [sp, #112]
  1c:	str	x4, [sp, #104]
  20:	mov	w0, #0x40                  	// #64
  24:	str	w0, [sp, #228]
  28:	mov	w0, #0x80                  	// #128
  2c:	str	w0, [sp, #224]
  30:	ldp	x0, x1, [sp, #128]
  34:	stp	x0, x1, [sp, #192]
  38:	ldp	x0, x1, [sp, #112]
  3c:	stp	x0, x1, [sp, #176]
  40:	ldr	x0, [sp, #200]
  44:	cmp	x0, #0x0
  48:	b.ne	cc <__udivmodti4+0xcc>  // b.any
  4c:	ldr	x0, [sp, #184]
  50:	cmp	x0, #0x0
  54:	b.ne	a0 <__udivmodti4+0xa0>  // b.any
  58:	ldr	x0, [sp, #104]
  5c:	cmp	x0, #0x0
  60:	b.eq	88 <__udivmodti4+0x88>  // b.none
  64:	ldr	x0, [sp, #192]
  68:	ldr	x1, [sp, #176]
  6c:	udiv	x2, x0, x1
  70:	mul	x1, x2, x1
  74:	sub	x0, x0, x1
  78:	mov	x26, x0
  7c:	mov	x27, #0x0                   	// #0
  80:	ldr	x0, [sp, #104]
  84:	stp	x26, x27, [x0]
  88:	ldr	x1, [sp, #192]
  8c:	ldr	x0, [sp, #176]
  90:	udiv	x0, x1, x0
  94:	mov	x6, x0
  98:	mov	x7, #0x0                   	// #0
  9c:	b	6fc <__udivmodti4+0x6fc>
  a0:	ldr	x0, [sp, #104]
  a4:	cmp	x0, #0x0
  a8:	b.eq	c0 <__udivmodti4+0xc0>  // b.none
  ac:	ldr	x0, [sp, #192]
  b0:	mov	x24, x0
  b4:	mov	x25, #0x0                   	// #0
  b8:	ldr	x0, [sp, #104]
  bc:	stp	x24, x25, [x0]
  c0:	mov	x6, #0x0                   	// #0
  c4:	mov	x7, #0x0                   	// #0
  c8:	b	6fc <__udivmodti4+0x6fc>
  cc:	ldr	x0, [sp, #176]
  d0:	cmp	x0, #0x0
  d4:	b.ne	2a8 <__udivmodti4+0x2a8>  // b.any
  d8:	ldr	x0, [sp, #184]
  dc:	cmp	x0, #0x0
  e0:	b.ne	12c <__udivmodti4+0x12c>  // b.any
  e4:	ldr	x0, [sp, #104]
  e8:	cmp	x0, #0x0
  ec:	b.eq	114 <__udivmodti4+0x114>  // b.none
  f0:	ldr	x0, [sp, #200]
  f4:	ldr	x1, [sp, #176]
  f8:	udiv	x2, x0, x1
  fc:	mul	x1, x2, x1
 100:	sub	x0, x0, x1
 104:	mov	x22, x0
 108:	mov	x23, #0x0                   	// #0
 10c:	ldr	x0, [sp, #104]
 110:	stp	x22, x23, [x0]
 114:	ldr	x1, [sp, #200]
 118:	ldr	x0, [sp, #176]
 11c:	udiv	x0, x1, x0
 120:	mov	x6, x0
 124:	mov	x7, #0x0                   	// #0
 128:	b	6fc <__udivmodti4+0x6fc>
 12c:	ldr	x0, [sp, #192]
 130:	cmp	x0, #0x0
 134:	b.ne	184 <__udivmodti4+0x184>  // b.any
 138:	ldr	x0, [sp, #104]
 13c:	cmp	x0, #0x0
 140:	b.eq	16c <__udivmodti4+0x16c>  // b.none
 144:	ldr	x0, [sp, #200]
 148:	ldr	x1, [sp, #184]
 14c:	udiv	x2, x0, x1
 150:	mul	x1, x2, x1
 154:	sub	x0, x0, x1
 158:	str	x0, [sp, #152]
 15c:	str	xzr, [sp, #144]
 160:	ldp	x0, x1, [sp, #144]
 164:	ldr	x2, [sp, #104]
 168:	stp	x0, x1, [x2]
 16c:	ldr	x1, [sp, #200]
 170:	ldr	x0, [sp, #184]
 174:	udiv	x0, x1, x0
 178:	mov	x6, x0
 17c:	mov	x7, #0x0                   	// #0
 180:	b	6fc <__udivmodti4+0x6fc>
 184:	ldr	x1, [sp, #184]
 188:	ldr	x0, [sp, #184]
 18c:	sub	x0, x0, #0x1
 190:	and	x0, x1, x0
 194:	cmp	x0, #0x0
 198:	b.ne	1f0 <__udivmodti4+0x1f0>  // b.any
 19c:	ldr	x0, [sp, #104]
 1a0:	cmp	x0, #0x0
 1a4:	b.eq	1d0 <__udivmodti4+0x1d0>  // b.none
 1a8:	ldr	x0, [sp, #192]
 1ac:	str	x0, [sp, #144]
 1b0:	ldr	x1, [sp, #200]
 1b4:	ldr	x0, [sp, #184]
 1b8:	sub	x0, x0, #0x1
 1bc:	and	x0, x1, x0
 1c0:	str	x0, [sp, #152]
 1c4:	ldp	x0, x1, [sp, #144]
 1c8:	ldr	x2, [sp, #104]
 1cc:	stp	x0, x1, [x2]
 1d0:	ldr	x0, [sp, #200]
 1d4:	ldr	x1, [sp, #184]
 1d8:	rbit	x1, x1
 1dc:	clz	x1, x1
 1e0:	lsr	x0, x0, x1
 1e4:	mov	x6, x0
 1e8:	mov	x7, #0x0                   	// #0
 1ec:	b	6fc <__udivmodti4+0x6fc>
 1f0:	ldr	x0, [sp, #184]
 1f4:	clz	x0, x0
 1f8:	mov	w1, w0
 1fc:	ldr	x0, [sp, #200]
 200:	clz	x0, x0
 204:	sub	w0, w1, w0
 208:	str	w0, [sp, #236]
 20c:	ldr	w0, [sp, #228]
 210:	sub	w0, w0, #0x2
 214:	ldr	w1, [sp, #236]
 218:	cmp	w1, w0
 21c:	b.ls	244 <__udivmodti4+0x244>  // b.plast
 220:	ldr	x0, [sp, #104]
 224:	cmp	x0, #0x0
 228:	b.eq	238 <__udivmodti4+0x238>  // b.none
 22c:	ldp	x0, x1, [sp, #192]
 230:	ldr	x2, [sp, #104]
 234:	stp	x0, x1, [x2]
 238:	mov	x6, #0x0                   	// #0
 23c:	mov	x7, #0x0                   	// #0
 240:	b	6fc <__udivmodti4+0x6fc>
 244:	ldr	w0, [sp, #236]
 248:	add	w0, w0, #0x1
 24c:	str	w0, [sp, #236]
 250:	str	xzr, [sp, #160]
 254:	ldr	x1, [sp, #192]
 258:	ldr	w2, [sp, #228]
 25c:	ldr	w0, [sp, #236]
 260:	sub	w0, w2, w0
 264:	lsl	x0, x1, x0
 268:	str	x0, [sp, #168]
 26c:	ldr	x1, [sp, #200]
 270:	ldr	w0, [sp, #236]
 274:	lsr	x0, x1, x0
 278:	str	x0, [sp, #152]
 27c:	ldr	x1, [sp, #200]
 280:	ldr	w2, [sp, #228]
 284:	ldr	w0, [sp, #236]
 288:	sub	w0, w2, w0
 28c:	lsl	x1, x1, x0
 290:	ldr	x2, [sp, #192]
 294:	ldr	w0, [sp, #236]
 298:	lsr	x0, x2, x0
 29c:	orr	x0, x1, x0
 2a0:	str	x0, [sp, #144]
 2a4:	b	55c <__udivmodti4+0x55c>
 2a8:	ldr	x0, [sp, #184]
 2ac:	cmp	x0, #0x0
 2b0:	b.ne	480 <__udivmodti4+0x480>  // b.any
 2b4:	ldr	x1, [sp, #176]
 2b8:	ldr	x0, [sp, #176]
 2bc:	sub	x0, x0, #0x1
 2c0:	and	x0, x1, x0
 2c4:	cmp	x0, #0x0
 2c8:	b.ne	35c <__udivmodti4+0x35c>  // b.any
 2cc:	ldr	x0, [sp, #104]
 2d0:	cmp	x0, #0x0
 2d4:	b.eq	2f8 <__udivmodti4+0x2f8>  // b.none
 2d8:	ldr	x1, [sp, #192]
 2dc:	ldr	x0, [sp, #176]
 2e0:	sub	x0, x0, #0x1
 2e4:	and	x0, x1, x0
 2e8:	mov	x20, x0
 2ec:	mov	x21, #0x0                   	// #0
 2f0:	ldr	x0, [sp, #104]
 2f4:	stp	x20, x21, [x0]
 2f8:	ldr	x0, [sp, #176]
 2fc:	cmp	x0, #0x1
 300:	b.ne	30c <__udivmodti4+0x30c>  // b.any
 304:	ldp	x6, x7, [sp, #192]
 308:	b	6fc <__udivmodti4+0x6fc>
 30c:	ldr	x0, [sp, #176]
 310:	rbit	x0, x0
 314:	clz	x0, x0
 318:	str	w0, [sp, #236]
 31c:	ldr	x1, [sp, #200]
 320:	ldr	w0, [sp, #236]
 324:	lsr	x0, x1, x0
 328:	str	x0, [sp, #168]
 32c:	ldr	x1, [sp, #200]
 330:	ldr	w2, [sp, #228]
 334:	ldr	w0, [sp, #236]
 338:	sub	w0, w2, w0
 33c:	lsl	x1, x1, x0
 340:	ldr	x2, [sp, #192]
 344:	ldr	w0, [sp, #236]
 348:	lsr	x0, x2, x0
 34c:	orr	x0, x1, x0
 350:	str	x0, [sp, #160]
 354:	ldp	x6, x7, [sp, #160]
 358:	b	6fc <__udivmodti4+0x6fc>
 35c:	ldr	x0, [sp, #176]
 360:	clz	x0, x0
 364:	mov	w1, w0
 368:	ldr	w0, [sp, #228]
 36c:	add	w0, w1, w0
 370:	ldr	x1, [sp, #200]
 374:	clz	x1, x1
 378:	sub	w0, w0, w1
 37c:	add	w0, w0, #0x1
 380:	str	w0, [sp, #236]
 384:	ldr	w1, [sp, #236]
 388:	ldr	w0, [sp, #228]
 38c:	cmp	w1, w0
 390:	b.ne	3b0 <__udivmodti4+0x3b0>  // b.any
 394:	str	xzr, [sp, #160]
 398:	ldr	x0, [sp, #192]
 39c:	str	x0, [sp, #168]
 3a0:	str	xzr, [sp, #152]
 3a4:	ldr	x0, [sp, #200]
 3a8:	str	x0, [sp, #144]
 3ac:	b	55c <__udivmodti4+0x55c>
 3b0:	ldr	w1, [sp, #236]
 3b4:	ldr	w0, [sp, #228]
 3b8:	cmp	w1, w0
 3bc:	b.cs	418 <__udivmodti4+0x418>  // b.hs, b.nlast
 3c0:	str	xzr, [sp, #160]
 3c4:	ldr	x1, [sp, #192]
 3c8:	ldr	w2, [sp, #228]
 3cc:	ldr	w0, [sp, #236]
 3d0:	sub	w0, w2, w0
 3d4:	lsl	x0, x1, x0
 3d8:	str	x0, [sp, #168]
 3dc:	ldr	x1, [sp, #200]
 3e0:	ldr	w0, [sp, #236]
 3e4:	lsr	x0, x1, x0
 3e8:	str	x0, [sp, #152]
 3ec:	ldr	x1, [sp, #200]
 3f0:	ldr	w2, [sp, #228]
 3f4:	ldr	w0, [sp, #236]
 3f8:	sub	w0, w2, w0
 3fc:	lsl	x1, x1, x0
 400:	ldr	x2, [sp, #192]
 404:	ldr	w0, [sp, #236]
 408:	lsr	x0, x2, x0
 40c:	orr	x0, x1, x0
 410:	str	x0, [sp, #144]
 414:	b	55c <__udivmodti4+0x55c>
 418:	ldr	x1, [sp, #192]
 41c:	ldr	w2, [sp, #224]
 420:	ldr	w0, [sp, #236]
 424:	sub	w0, w2, w0
 428:	lsl	x0, x1, x0
 42c:	str	x0, [sp, #160]
 430:	ldr	x1, [sp, #200]
 434:	ldr	w2, [sp, #224]
 438:	ldr	w0, [sp, #236]
 43c:	sub	w0, w2, w0
 440:	lsl	x1, x1, x0
 444:	ldr	x2, [sp, #192]
 448:	ldr	w3, [sp, #236]
 44c:	ldr	w0, [sp, #228]
 450:	sub	w0, w3, w0
 454:	lsr	x0, x2, x0
 458:	orr	x0, x1, x0
 45c:	str	x0, [sp, #168]
 460:	str	xzr, [sp, #152]
 464:	ldr	x1, [sp, #200]
 468:	ldr	w2, [sp, #236]
 46c:	ldr	w0, [sp, #228]
 470:	sub	w0, w2, w0
 474:	lsr	x0, x1, x0
 478:	str	x0, [sp, #144]
 47c:	b	55c <__udivmodti4+0x55c>
 480:	ldr	x0, [sp, #184]
 484:	clz	x0, x0
 488:	mov	w1, w0
 48c:	ldr	x0, [sp, #200]
 490:	clz	x0, x0
 494:	sub	w0, w1, w0
 498:	str	w0, [sp, #236]
 49c:	ldr	w0, [sp, #228]
 4a0:	sub	w0, w0, #0x1
 4a4:	ldr	w1, [sp, #236]
 4a8:	cmp	w1, w0
 4ac:	b.ls	4d4 <__udivmodti4+0x4d4>  // b.plast
 4b0:	ldr	x0, [sp, #104]
 4b4:	cmp	x0, #0x0
 4b8:	b.eq	4c8 <__udivmodti4+0x4c8>  // b.none
 4bc:	ldp	x0, x1, [sp, #192]
 4c0:	ldr	x2, [sp, #104]
 4c4:	stp	x0, x1, [x2]
 4c8:	mov	x6, #0x0                   	// #0
 4cc:	mov	x7, #0x0                   	// #0
 4d0:	b	6fc <__udivmodti4+0x6fc>
 4d4:	ldr	w0, [sp, #236]
 4d8:	add	w0, w0, #0x1
 4dc:	str	w0, [sp, #236]
 4e0:	str	xzr, [sp, #160]
 4e4:	ldr	w1, [sp, #236]
 4e8:	ldr	w0, [sp, #228]
 4ec:	cmp	w1, w0
 4f0:	b.ne	50c <__udivmodti4+0x50c>  // b.any
 4f4:	ldr	x0, [sp, #192]
 4f8:	str	x0, [sp, #168]
 4fc:	str	xzr, [sp, #152]
 500:	ldr	x0, [sp, #200]
 504:	str	x0, [sp, #144]
 508:	b	55c <__udivmodti4+0x55c>
 50c:	ldr	x1, [sp, #200]
 510:	ldr	w0, [sp, #236]
 514:	lsr	x0, x1, x0
 518:	str	x0, [sp, #152]
 51c:	ldr	x1, [sp, #200]
 520:	ldr	w2, [sp, #228]
 524:	ldr	w0, [sp, #236]
 528:	sub	w0, w2, w0
 52c:	lsl	x1, x1, x0
 530:	ldr	x2, [sp, #192]
 534:	ldr	w0, [sp, #236]
 538:	lsr	x0, x2, x0
 53c:	orr	x0, x1, x0
 540:	str	x0, [sp, #144]
 544:	ldr	x1, [sp, #192]
 548:	ldr	w2, [sp, #228]
 54c:	ldr	w0, [sp, #236]
 550:	sub	w0, w2, w0
 554:	lsl	x0, x1, x0
 558:	str	x0, [sp, #168]
 55c:	str	wzr, [sp, #232]
 560:	b	6a4 <__udivmodti4+0x6a4>
 564:	ldr	x0, [sp, #152]
 568:	lsl	x1, x0, #1
 56c:	ldr	x2, [sp, #144]
 570:	ldr	w0, [sp, #228]
 574:	sub	w0, w0, #0x1
 578:	lsr	x0, x2, x0
 57c:	orr	x0, x1, x0
 580:	str	x0, [sp, #152]
 584:	ldr	x0, [sp, #144]
 588:	lsl	x1, x0, #1
 58c:	ldr	x2, [sp, #168]
 590:	ldr	w0, [sp, #228]
 594:	sub	w0, w0, #0x1
 598:	lsr	x0, x2, x0
 59c:	orr	x0, x1, x0
 5a0:	str	x0, [sp, #144]
 5a4:	ldr	x0, [sp, #168]
 5a8:	lsl	x1, x0, #1
 5ac:	ldr	x2, [sp, #160]
 5b0:	ldr	w0, [sp, #228]
 5b4:	sub	w0, w0, #0x1
 5b8:	lsr	x0, x2, x0
 5bc:	orr	x0, x1, x0
 5c0:	str	x0, [sp, #168]
 5c4:	ldr	x0, [sp, #160]
 5c8:	lsl	x1, x0, #1
 5cc:	ldr	w0, [sp, #232]
 5d0:	orr	x0, x1, x0
 5d4:	str	x0, [sp, #160]
 5d8:	ldp	x2, x3, [sp, #176]
 5dc:	ldp	x0, x1, [sp, #144]
 5e0:	subs	x4, x2, x0
 5e4:	sbc	x0, x3, x1
 5e8:	mov	x14, x4
 5ec:	mov	x15, x0
 5f0:	mov	x0, #0xffffffffffffffff    	// #-1
 5f4:	adds	x1, x14, x0
 5f8:	mov	x0, #0xffffffffffffffff    	// #-1
 5fc:	adc	x0, x15, x0
 600:	str	x1, [sp, #80]
 604:	str	x0, [sp, #88]
 608:	ldp	x0, x1, [sp, #80]
 60c:	ldr	w2, [sp, #224]
 610:	sub	w2, w2, #0x1
 614:	sub	w3, w2, #0x40
 618:	asr	x5, x1, x3
 61c:	asr	x4, x1, #63
 620:	lsl	x7, x1, #1
 624:	mov	w6, #0x3f                  	// #63
 628:	sub	w6, w6, w2
 62c:	lsl	x6, x7, x6
 630:	lsr	x7, x0, x2
 634:	orr	x6, x7, x6
 638:	str	x6, [sp, #208]
 63c:	asr	x0, x1, x2
 640:	str	x0, [sp, #216]
 644:	ldr	x0, [sp, #208]
 648:	cmp	w3, #0x0
 64c:	csel	x0, x0, x5, lt  // lt = tstop
 650:	str	x0, [sp, #208]
 654:	ldr	x0, [sp, #216]
 658:	cmp	w3, #0x0
 65c:	csel	x0, x0, x4, lt  // lt = tstop
 660:	str	x0, [sp, #216]
 664:	ldr	x0, [sp, #208]
 668:	and	w0, w0, #0x1
 66c:	str	w0, [sp, #232]
 670:	ldp	x0, x1, [sp, #144]
 674:	ldp	x4, x5, [sp, #176]
 678:	ldp	x2, x3, [sp, #208]
 67c:	and	x10, x4, x2
 680:	and	x11, x5, x3
 684:	subs	x2, x0, x10
 688:	sbc	x0, x1, x11
 68c:	mov	x18, x2
 690:	mov	x19, x0
 694:	stp	x18, x19, [sp, #144]
 698:	ldr	w0, [sp, #236]
 69c:	sub	w0, w0, #0x1
 6a0:	str	w0, [sp, #236]
 6a4:	ldr	w0, [sp, #236]
 6a8:	cmp	w0, #0x0
 6ac:	b.ne	564 <__udivmodti4+0x564>  // b.any
 6b0:	ldp	x0, x1, [sp, #160]
 6b4:	lsr	x2, x0, #63
 6b8:	lsl	x9, x1, #1
 6bc:	orr	x9, x2, x9
 6c0:	lsl	x8, x0, #1
 6c4:	ldr	w0, [sp, #232]
 6c8:	mov	w0, w0
 6cc:	mov	x12, x0
 6d0:	mov	x13, #0x0                   	// #0
 6d4:	orr	x16, x8, x12
 6d8:	orr	x17, x9, x13
 6dc:	stp	x16, x17, [sp, #160]
 6e0:	ldr	x0, [sp, #104]
 6e4:	cmp	x0, #0x0
 6e8:	b.eq	6f8 <__udivmodti4+0x6f8>  // b.none
 6ec:	ldp	x0, x1, [sp, #144]
 6f0:	ldr	x2, [sp, #104]
 6f4:	stp	x0, x1, [x2]
 6f8:	ldp	x6, x7, [sp, #160]
 6fc:	mov	x0, x6
 700:	mov	x1, x7
 704:	ldp	x21, x22, [sp, #16]
 708:	ldp	x23, x24, [sp, #32]
 70c:	ldp	x25, x26, [sp, #48]
 710:	ldr	x27, [sp, #64]
 714:	ldp	x19, x20, [sp], #240
 718:	ret

udivsi3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__udivsi3>:
   0:	sub	sp, sp, #0x30
   4:	str	w0, [sp, #12]
   8:	str	w1, [sp, #8]
   c:	mov	w0, #0x20                  	// #32
  10:	str	w0, [sp, #28]
  14:	ldr	w0, [sp, #8]
  18:	cmp	w0, #0x0
  1c:	b.ne	28 <__udivsi3+0x28>  // b.any
  20:	mov	w0, #0x0                   	// #0
  24:	b	174 <__udivsi3+0x174>
  28:	ldr	w0, [sp, #12]
  2c:	cmp	w0, #0x0
  30:	b.ne	3c <__udivsi3+0x3c>  // b.any
  34:	mov	w0, #0x0                   	// #0
  38:	b	174 <__udivsi3+0x174>
  3c:	ldr	w0, [sp, #8]
  40:	clz	w1, w0
  44:	ldr	w0, [sp, #12]
  48:	clz	w0, w0
  4c:	sub	w0, w1, w0
  50:	str	w0, [sp, #36]
  54:	ldr	w0, [sp, #28]
  58:	sub	w0, w0, #0x1
  5c:	ldr	w1, [sp, #36]
  60:	cmp	w1, w0
  64:	b.ls	70 <__udivsi3+0x70>  // b.plast
  68:	mov	w0, #0x0                   	// #0
  6c:	b	174 <__udivsi3+0x174>
  70:	ldr	w0, [sp, #28]
  74:	sub	w0, w0, #0x1
  78:	ldr	w1, [sp, #36]
  7c:	cmp	w1, w0
  80:	b.ne	8c <__udivsi3+0x8c>  // b.any
  84:	ldr	w0, [sp, #12]
  88:	b	174 <__udivsi3+0x174>
  8c:	ldr	w0, [sp, #36]
  90:	add	w0, w0, #0x1
  94:	str	w0, [sp, #36]
  98:	ldr	w1, [sp, #28]
  9c:	ldr	w0, [sp, #36]
  a0:	sub	w0, w1, w0
  a4:	ldr	w1, [sp, #12]
  a8:	lsl	w0, w1, w0
  ac:	str	w0, [sp, #44]
  b0:	ldr	w0, [sp, #36]
  b4:	ldr	w1, [sp, #12]
  b8:	lsr	w0, w1, w0
  bc:	str	w0, [sp, #40]
  c0:	str	wzr, [sp, #32]
  c4:	b	150 <__udivsi3+0x150>
  c8:	ldr	w0, [sp, #40]
  cc:	lsl	w1, w0, #1
  d0:	ldr	w0, [sp, #28]
  d4:	sub	w0, w0, #0x1
  d8:	ldr	w2, [sp, #44]
  dc:	lsr	w0, w2, w0
  e0:	orr	w0, w1, w0
  e4:	str	w0, [sp, #40]
  e8:	ldr	w0, [sp, #44]
  ec:	lsl	w0, w0, #1
  f0:	ldr	w1, [sp, #32]
  f4:	orr	w0, w1, w0
  f8:	str	w0, [sp, #44]
  fc:	ldr	w1, [sp, #8]
 100:	ldr	w0, [sp, #40]
 104:	sub	w0, w1, w0
 108:	sub	w0, w0, #0x1
 10c:	mov	w1, w0
 110:	ldr	w0, [sp, #28]
 114:	sub	w0, w0, #0x1
 118:	asr	w0, w1, w0
 11c:	str	w0, [sp, #24]
 120:	ldr	w0, [sp, #24]
 124:	and	w0, w0, #0x1
 128:	str	w0, [sp, #32]
 12c:	ldr	w1, [sp, #24]
 130:	ldr	w0, [sp, #8]
 134:	and	w0, w1, w0
 138:	ldr	w1, [sp, #40]
 13c:	sub	w0, w1, w0
 140:	str	w0, [sp, #40]
 144:	ldr	w0, [sp, #36]
 148:	sub	w0, w0, #0x1
 14c:	str	w0, [sp, #36]
 150:	ldr	w0, [sp, #36]
 154:	cmp	w0, #0x0
 158:	b.ne	c8 <__udivsi3+0xc8>  // b.any
 15c:	ldr	w0, [sp, #44]
 160:	lsl	w0, w0, #1
 164:	ldr	w1, [sp, #32]
 168:	orr	w0, w1, w0
 16c:	str	w0, [sp, #44]
 170:	ldr	w0, [sp, #44]
 174:	add	sp, sp, #0x30
 178:	ret

udivti3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__udivti3>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x0, x1, [sp, #32]
   c:	stp	x2, x3, [sp, #16]
  10:	mov	x4, #0x0                   	// #0
  14:	ldp	x2, x3, [sp, #16]
  18:	ldp	x0, x1, [sp, #32]
  1c:	bl	0 <__udivmodti4>
  20:	ldp	x29, x30, [sp], #48
  24:	ret

umoddi3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__umoddi3>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	add	x0, sp, #0x28
  14:	mov	x2, x0
  18:	ldr	x1, [sp, #16]
  1c:	ldr	x0, [sp, #24]
  20:	bl	0 <__udivmoddi4>
  24:	ldr	x0, [sp, #40]
  28:	ldp	x29, x30, [sp], #48
  2c:	ret

umodsi3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__umodsi3>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	w0, [sp, #28]
   c:	str	w1, [sp, #24]
  10:	ldr	w1, [sp, #24]
  14:	ldr	w0, [sp, #28]
  18:	bl	0 <__udivsi3>
  1c:	mov	w1, w0
  20:	ldr	w0, [sp, #24]
  24:	mul	w0, w1, w0
  28:	ldr	w1, [sp, #28]
  2c:	sub	w0, w1, w0
  30:	ldp	x29, x30, [sp], #32
  34:	ret

umodti3.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__umodti3>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x0, x1, [sp, #32]
   c:	stp	x2, x3, [sp, #16]
  10:	add	x0, sp, #0x30
  14:	mov	x4, x0
  18:	ldp	x2, x3, [sp, #16]
  1c:	ldp	x0, x1, [sp, #32]
  20:	bl	0 <__udivmodti4>
  24:	ldp	x0, x1, [sp, #48]
  28:	ldp	x29, x30, [sp], #64
  2c:	ret

emutls.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <emutls_memalign_alloc>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x1, [sp, #24]
  14:	ldr	x0, [sp, #16]
  18:	add	x0, x1, x0
  1c:	add	x0, x0, #0x7
  20:	bl	0 <malloc>
  24:	str	x0, [sp, #40]
  28:	ldr	x0, [sp, #40]
  2c:	cmp	x0, #0x0
  30:	b.ne	38 <emutls_memalign_alloc+0x38>  // b.any
  34:	bl	0 <abort>
  38:	ldr	x0, [sp, #24]
  3c:	add	x0, x0, #0x7
  40:	ldr	x1, [sp, #40]
  44:	add	x0, x1, x0
  48:	mov	x1, x0
  4c:	ldr	x0, [sp, #24]
  50:	neg	x0, x0
  54:	and	x0, x1, x0
  58:	str	x0, [sp, #32]
  5c:	ldr	x0, [sp, #32]
  60:	sub	x0, x0, #0x8
  64:	ldr	x1, [sp, #40]
  68:	str	x1, [x0]
  6c:	ldr	x0, [sp, #32]
  70:	ldp	x29, x30, [sp], #48
  74:	ret

0000000000000078 <emutls_memalign_free>:
  78:	stp	x29, x30, [sp, #-32]!
  7c:	mov	x29, sp
  80:	str	x0, [sp, #24]
  84:	ldr	x0, [sp, #24]
  88:	sub	x0, x0, #0x8
  8c:	ldr	x0, [x0]
  90:	bl	0 <free>
  94:	nop
  98:	ldp	x29, x30, [sp], #32
  9c:	ret

00000000000000a0 <emutls_setspecific>:
  a0:	stp	x29, x30, [sp, #-32]!
  a4:	mov	x29, sp
  a8:	str	x0, [sp, #24]
  ac:	adrp	x0, 0 <emutls_memalign_alloc>
  b0:	add	x0, x0, #0x0
  b4:	ldr	w0, [x0]
  b8:	ldr	x1, [sp, #24]
  bc:	bl	0 <pthread_setspecific>
  c0:	nop
  c4:	ldp	x29, x30, [sp], #32
  c8:	ret

00000000000000cc <emutls_getspecific>:
  cc:	stp	x29, x30, [sp, #-16]!
  d0:	mov	x29, sp
  d4:	adrp	x0, 0 <emutls_memalign_alloc>
  d8:	add	x0, x0, #0x0
  dc:	ldr	w0, [x0]
  e0:	bl	0 <pthread_getspecific>
  e4:	ldp	x29, x30, [sp], #16
  e8:	ret

00000000000000ec <emutls_key_destructor>:
  ec:	stp	x29, x30, [sp, #-48]!
  f0:	mov	x29, sp
  f4:	str	x0, [sp, #24]
  f8:	ldr	x0, [sp, #24]
  fc:	str	x0, [sp, #40]
 100:	ldr	x0, [sp, #40]
 104:	ldr	x0, [x0]
 108:	cmp	x0, #0x0
 10c:	b.eq	130 <emutls_key_destructor+0x44>  // b.none
 110:	ldr	x0, [sp, #40]
 114:	ldr	x0, [x0]
 118:	sub	x1, x0, #0x1
 11c:	ldr	x0, [sp, #40]
 120:	str	x1, [x0]
 124:	ldr	x0, [sp, #40]
 128:	bl	a0 <emutls_setspecific>
 12c:	b	140 <emutls_key_destructor+0x54>
 130:	ldr	x0, [sp, #40]
 134:	bl	1f8 <emutls_shutdown>
 138:	ldr	x0, [sp, #24]
 13c:	bl	0 <free>
 140:	nop
 144:	ldp	x29, x30, [sp], #48
 148:	ret

000000000000014c <emutls_init>:
 14c:	stp	x29, x30, [sp, #-16]!
 150:	mov	x29, sp
 154:	adrp	x0, 0 <emutls_memalign_alloc>
 158:	add	x1, x0, #0x0
 15c:	adrp	x0, 0 <emutls_memalign_alloc>
 160:	add	x0, x0, #0x0
 164:	bl	0 <pthread_key_create>
 168:	cmp	w0, #0x0
 16c:	b.eq	174 <emutls_init+0x28>  // b.none
 170:	bl	0 <abort>
 174:	adrp	x0, 0 <emutls_memalign_alloc>
 178:	add	x0, x0, #0x0
 17c:	mov	w1, #0x1                   	// #1
 180:	strb	w1, [x0]
 184:	nop
 188:	ldp	x29, x30, [sp], #16
 18c:	ret

0000000000000190 <emutls_init_once>:
 190:	stp	x29, x30, [sp, #-16]!
 194:	mov	x29, sp
 198:	adrp	x0, 0 <emutls_memalign_alloc>
 19c:	add	x1, x0, #0x0
 1a0:	adrp	x0, 0 <emutls_memalign_alloc>
 1a4:	add	x0, x0, #0x0
 1a8:	bl	0 <pthread_once>
 1ac:	nop
 1b0:	ldp	x29, x30, [sp], #16
 1b4:	ret

00000000000001b8 <emutls_lock>:
 1b8:	stp	x29, x30, [sp, #-16]!
 1bc:	mov	x29, sp
 1c0:	adrp	x0, 0 <emutls_memalign_alloc>
 1c4:	add	x0, x0, #0x0
 1c8:	bl	0 <pthread_mutex_lock>
 1cc:	nop
 1d0:	ldp	x29, x30, [sp], #16
 1d4:	ret

00000000000001d8 <emutls_unlock>:
 1d8:	stp	x29, x30, [sp, #-16]!
 1dc:	mov	x29, sp
 1e0:	adrp	x0, 0 <emutls_memalign_alloc>
 1e4:	add	x0, x0, #0x0
 1e8:	bl	0 <pthread_mutex_unlock>
 1ec:	nop
 1f0:	ldp	x29, x30, [sp], #16
 1f4:	ret

00000000000001f8 <emutls_shutdown>:
 1f8:	stp	x29, x30, [sp, #-48]!
 1fc:	mov	x29, sp
 200:	str	x0, [sp, #24]
 204:	ldr	x0, [sp, #24]
 208:	cmp	x0, #0x0
 20c:	b.eq	264 <emutls_shutdown+0x6c>  // b.none
 210:	str	xzr, [sp, #40]
 214:	b	250 <emutls_shutdown+0x58>
 218:	ldr	x0, [sp, #24]
 21c:	ldr	x1, [sp, #40]
 220:	add	x1, x1, #0x2
 224:	ldr	x0, [x0, x1, lsl #3]
 228:	cmp	x0, #0x0
 22c:	b.eq	244 <emutls_shutdown+0x4c>  // b.none
 230:	ldr	x0, [sp, #24]
 234:	ldr	x1, [sp, #40]
 238:	add	x1, x1, #0x2
 23c:	ldr	x0, [x0, x1, lsl #3]
 240:	bl	78 <emutls_memalign_free>
 244:	ldr	x0, [sp, #40]
 248:	add	x0, x0, #0x1
 24c:	str	x0, [sp, #40]
 250:	ldr	x0, [sp, #24]
 254:	ldr	x0, [x0, #8]
 258:	ldr	x1, [sp, #40]
 25c:	cmp	x1, x0
 260:	b.cc	218 <emutls_shutdown+0x20>  // b.lo, b.ul, b.last
 264:	nop
 268:	ldp	x29, x30, [sp], #48
 26c:	ret

0000000000000270 <emutls_allocate_object>:
 270:	stp	x29, x30, [sp, #-64]!
 274:	mov	x29, sp
 278:	str	x0, [sp, #24]
 27c:	ldr	x0, [sp, #24]
 280:	ldr	x0, [x0]
 284:	str	x0, [sp, #48]
 288:	ldr	x0, [sp, #24]
 28c:	ldr	x0, [x0, #8]
 290:	str	x0, [sp, #56]
 294:	ldr	x0, [sp, #56]
 298:	cmp	x0, #0x7
 29c:	b.hi	2a8 <emutls_allocate_object+0x38>  // b.pmore
 2a0:	mov	x0, #0x8                   	// #8
 2a4:	str	x0, [sp, #56]
 2a8:	ldr	x0, [sp, #56]
 2ac:	sub	x1, x0, #0x1
 2b0:	ldr	x0, [sp, #56]
 2b4:	and	x0, x1, x0
 2b8:	cmp	x0, #0x0
 2bc:	b.eq	2c4 <emutls_allocate_object+0x54>  // b.none
 2c0:	bl	0 <abort>
 2c4:	ldr	x1, [sp, #48]
 2c8:	ldr	x0, [sp, #56]
 2cc:	bl	0 <emutls_memalign_alloc>
 2d0:	str	x0, [sp, #40]
 2d4:	ldr	x0, [sp, #24]
 2d8:	ldr	x0, [x0, #24]
 2dc:	cmp	x0, #0x0
 2e0:	b.eq	300 <emutls_allocate_object+0x90>  // b.none
 2e4:	ldr	x0, [sp, #24]
 2e8:	ldr	x0, [x0, #24]
 2ec:	ldr	x2, [sp, #48]
 2f0:	mov	x1, x0
 2f4:	ldr	x0, [sp, #40]
 2f8:	bl	0 <memcpy>
 2fc:	b	310 <emutls_allocate_object+0xa0>
 300:	ldr	x2, [sp, #48]
 304:	mov	w1, #0x0                   	// #0
 308:	ldr	x0, [sp, #40]
 30c:	bl	0 <memset>
 310:	ldr	x0, [sp, #40]
 314:	ldp	x29, x30, [sp], #64
 318:	ret

000000000000031c <emutls_get_index>:
 31c:	stp	x29, x30, [sp, #-48]!
 320:	mov	x29, sp
 324:	str	x0, [sp, #24]
 328:	ldr	x0, [sp, #24]
 32c:	add	x0, x0, #0x10
 330:	ldar	x0, [x0]
 334:	str	x0, [sp, #40]
 338:	ldr	x0, [sp, #40]
 33c:	cmp	x0, #0x0
 340:	b.ne	3a4 <emutls_get_index+0x88>  // b.any
 344:	bl	190 <emutls_init_once>
 348:	bl	1b8 <emutls_lock>
 34c:	ldr	x0, [sp, #24]
 350:	ldr	x0, [x0, #16]
 354:	str	x0, [sp, #40]
 358:	ldr	x0, [sp, #40]
 35c:	cmp	x0, #0x0
 360:	b.ne	3a0 <emutls_get_index+0x84>  // b.any
 364:	adrp	x0, 0 <emutls_memalign_alloc>
 368:	add	x0, x0, #0x0
 36c:	ldr	x0, [x0]
 370:	add	x1, x0, #0x1
 374:	adrp	x0, 0 <emutls_memalign_alloc>
 378:	add	x0, x0, #0x0
 37c:	str	x1, [x0]
 380:	adrp	x0, 0 <emutls_memalign_alloc>
 384:	add	x0, x0, #0x0
 388:	ldr	x0, [x0]
 38c:	str	x0, [sp, #40]
 390:	ldr	x0, [sp, #24]
 394:	add	x0, x0, #0x10
 398:	ldr	x1, [sp, #40]
 39c:	stlr	x1, [x0]
 3a0:	bl	1d8 <emutls_unlock>
 3a4:	ldr	x0, [sp, #40]
 3a8:	ldp	x29, x30, [sp], #48
 3ac:	ret

00000000000003b0 <emutls_check_array_set_size>:
 3b0:	stp	x29, x30, [sp, #-32]!
 3b4:	mov	x29, sp
 3b8:	str	x0, [sp, #24]
 3bc:	str	x1, [sp, #16]
 3c0:	ldr	x0, [sp, #24]
 3c4:	cmp	x0, #0x0
 3c8:	b.ne	3d0 <emutls_check_array_set_size+0x20>  // b.any
 3cc:	bl	0 <abort>
 3d0:	ldr	x0, [sp, #24]
 3d4:	ldr	x1, [sp, #16]
 3d8:	str	x1, [x0, #8]
 3dc:	ldr	x0, [sp, #24]
 3e0:	bl	a0 <emutls_setspecific>
 3e4:	nop
 3e8:	ldp	x29, x30, [sp], #32
 3ec:	ret

00000000000003f0 <emutls_new_data_array_size>:
 3f0:	sub	sp, sp, #0x20
 3f4:	str	x0, [sp, #8]
 3f8:	mov	x0, #0x2                   	// #2
 3fc:	str	x0, [sp, #24]
 400:	ldr	x1, [sp, #8]
 404:	ldr	x0, [sp, #24]
 408:	add	x0, x1, x0
 40c:	add	x0, x0, #0xf
 410:	and	x1, x0, #0xfffffffffffffff0
 414:	ldr	x0, [sp, #24]
 418:	sub	x0, x1, x0
 41c:	add	sp, sp, #0x20
 420:	ret

0000000000000424 <emutls_asize>:
 424:	sub	sp, sp, #0x10
 428:	str	x0, [sp, #8]
 42c:	ldr	x0, [sp, #8]
 430:	add	x0, x0, #0x2
 434:	lsl	x0, x0, #3
 438:	add	sp, sp, #0x10
 43c:	ret

0000000000000440 <emutls_get_address_array>:
 440:	stp	x29, x30, [sp, #-64]!
 444:	mov	x29, sp
 448:	str	x0, [sp, #24]
 44c:	bl	cc <emutls_getspecific>
 450:	str	x0, [sp, #56]
 454:	ldr	x0, [sp, #56]
 458:	cmp	x0, #0x0
 45c:	b.ne	4c0 <emutls_get_address_array+0x80>  // b.any
 460:	ldr	x0, [sp, #24]
 464:	bl	3f0 <emutls_new_data_array_size>
 468:	str	x0, [sp, #32]
 46c:	ldr	x0, [sp, #32]
 470:	bl	424 <emutls_asize>
 474:	bl	0 <malloc>
 478:	str	x0, [sp, #56]
 47c:	ldr	x0, [sp, #56]
 480:	cmp	x0, #0x0
 484:	b.eq	4b0 <emutls_get_address_array+0x70>  // b.none
 488:	ldr	x0, [sp, #56]
 48c:	add	x3, x0, #0x10
 490:	ldr	x0, [sp, #32]
 494:	lsl	x0, x0, #3
 498:	mov	x2, x0
 49c:	mov	w1, #0x0                   	// #0
 4a0:	mov	x0, x3
 4a4:	bl	0 <memset>
 4a8:	ldr	x0, [sp, #56]
 4ac:	str	xzr, [x0]
 4b0:	ldr	x1, [sp, #32]
 4b4:	ldr	x0, [sp, #56]
 4b8:	bl	3b0 <emutls_check_array_set_size>
 4bc:	b	550 <emutls_get_address_array+0x110>
 4c0:	ldr	x0, [sp, #56]
 4c4:	ldr	x0, [x0, #8]
 4c8:	ldr	x1, [sp, #24]
 4cc:	cmp	x1, x0
 4d0:	b.ls	550 <emutls_get_address_array+0x110>  // b.plast
 4d4:	ldr	x0, [sp, #56]
 4d8:	ldr	x0, [x0, #8]
 4dc:	str	x0, [sp, #48]
 4e0:	ldr	x0, [sp, #24]
 4e4:	bl	3f0 <emutls_new_data_array_size>
 4e8:	str	x0, [sp, #40]
 4ec:	ldr	x0, [sp, #40]
 4f0:	bl	424 <emutls_asize>
 4f4:	mov	x1, x0
 4f8:	ldr	x0, [sp, #56]
 4fc:	bl	0 <realloc>
 500:	str	x0, [sp, #56]
 504:	ldr	x0, [sp, #56]
 508:	cmp	x0, #0x0
 50c:	b.eq	544 <emutls_get_address_array+0x104>  // b.none
 510:	ldr	x0, [sp, #56]
 514:	add	x1, x0, #0x10
 518:	ldr	x0, [sp, #48]
 51c:	lsl	x0, x0, #3
 520:	add	x3, x1, x0
 524:	ldr	x1, [sp, #40]
 528:	ldr	x0, [sp, #48]
 52c:	sub	x0, x1, x0
 530:	lsl	x0, x0, #3
 534:	mov	x2, x0
 538:	mov	w1, #0x0                   	// #0
 53c:	mov	x0, x3
 540:	bl	0 <memset>
 544:	ldr	x1, [sp, #40]
 548:	ldr	x0, [sp, #56]
 54c:	bl	3b0 <emutls_check_array_set_size>
 550:	ldr	x0, [sp, #56]
 554:	ldp	x29, x30, [sp], #64
 558:	ret

000000000000055c <__emutls_get_address>:
 55c:	stp	x29, x30, [sp, #-48]!
 560:	mov	x29, sp
 564:	str	x0, [sp, #24]
 568:	ldr	x0, [sp, #24]
 56c:	bl	31c <emutls_get_index>
 570:	str	x0, [sp, #40]
 574:	ldr	x0, [sp, #40]
 578:	sub	x1, x0, #0x1
 57c:	str	x1, [sp, #40]
 580:	bl	440 <emutls_get_address_array>
 584:	str	x0, [sp, #32]
 588:	ldr	x0, [sp, #32]
 58c:	ldr	x1, [sp, #40]
 590:	add	x1, x1, #0x2
 594:	ldr	x0, [x0, x1, lsl #3]
 598:	cmp	x0, #0x0
 59c:	b.ne	5bc <__emutls_get_address+0x60>  // b.any
 5a0:	ldr	x0, [sp, #24]
 5a4:	bl	270 <emutls_allocate_object>
 5a8:	mov	x2, x0
 5ac:	ldr	x0, [sp, #32]
 5b0:	ldr	x1, [sp, #40]
 5b4:	add	x1, x1, #0x2
 5b8:	str	x2, [x0, x1, lsl #3]
 5bc:	ldr	x0, [sp, #32]
 5c0:	ldr	x1, [sp, #40]
 5c4:	add	x1, x1, #0x2
 5c8:	ldr	x0, [x0, x1, lsl #3]
 5cc:	ldp	x29, x30, [sp], #48
 5d0:	ret

enable_execute_stack.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__enable_execute_stack>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	mov	w0, #0x1e                  	// #30
  10:	bl	0 <sysconf>
  14:	str	x0, [sp, #72]
  18:	ldr	x0, [sp, #72]
  1c:	neg	x0, x0
  20:	str	x0, [sp, #64]
  24:	ldr	x0, [sp, #24]
  28:	str	x0, [sp, #56]
  2c:	ldr	x1, [sp, #56]
  30:	ldr	x0, [sp, #64]
  34:	and	x0, x1, x0
  38:	str	x0, [sp, #48]
  3c:	ldr	x1, [sp, #56]
  40:	ldr	x0, [sp, #72]
  44:	add	x0, x1, x0
  48:	add	x1, x0, #0x30
  4c:	ldr	x0, [sp, #64]
  50:	and	x0, x1, x0
  54:	str	x0, [sp, #40]
  58:	ldr	x1, [sp, #40]
  5c:	ldr	x0, [sp, #48]
  60:	sub	x0, x1, x0
  64:	str	x0, [sp, #32]
  68:	mov	w2, #0x7                   	// #7
  6c:	ldr	x1, [sp, #32]
  70:	ldr	x0, [sp, #48]
  74:	bl	0 <mprotect>
  78:	nop
  7c:	ldp	x29, x30, [sp], #80
  80:	ret

eprintf.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__eprintf>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	x3, [sp, #16]
  18:	adrp	x0, 0 <stderr>
  1c:	ldr	x0, [x0]
  20:	ldr	x0, [x0]
  24:	ldr	x4, [sp, #16]
  28:	ldr	x3, [sp, #24]
  2c:	ldr	x2, [sp, #32]
  30:	ldr	x1, [sp, #40]
  34:	bl	0 <fprintf>
  38:	adrp	x0, 0 <stderr>
  3c:	ldr	x0, [x0]
  40:	ldr	x0, [x0]
  44:	bl	0 <fflush>
  48:	adrp	x0, 0 <__eprintf>
  4c:	add	x2, x0, #0x0
  50:	mov	w1, #0x1a                  	// #26
  54:	adrp	x0, 0 <__eprintf>
  58:	add	x0, x0, #0x0
  5c:	bl	0 <__compilerrt_abort_impl>

gcc_personality_v0.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <readULEB128>:
   0:	sub	sp, sp, #0x30
   4:	str	x0, [sp, #8]
   8:	str	xzr, [sp, #40]
   c:	str	xzr, [sp, #32]
  10:	ldr	x0, [sp, #8]
  14:	ldr	x0, [x0]
  18:	str	x0, [sp, #24]
  1c:	ldr	x0, [sp, #24]
  20:	add	x1, x0, #0x1
  24:	str	x1, [sp, #24]
  28:	ldrb	w0, [x0]
  2c:	strb	w0, [sp, #23]
  30:	ldrb	w0, [sp, #23]
  34:	and	w0, w0, #0x7f
  38:	ldr	x1, [sp, #32]
  3c:	lsl	w0, w0, w1
  40:	sxtw	x0, w0
  44:	ldr	x1, [sp, #40]
  48:	orr	x0, x1, x0
  4c:	str	x0, [sp, #40]
  50:	ldr	x0, [sp, #32]
  54:	add	x0, x0, #0x7
  58:	str	x0, [sp, #32]
  5c:	ldrsb	w0, [sp, #23]
  60:	cmp	w0, #0x0
  64:	b.lt	1c <readULEB128+0x1c>  // b.tstop
  68:	ldr	x0, [sp, #8]
  6c:	ldr	x1, [sp, #24]
  70:	str	x1, [x0]
  74:	ldr	x0, [sp, #40]
  78:	add	sp, sp, #0x30
  7c:	ret

0000000000000080 <readEncodedPointer>:
  80:	stp	x29, x30, [sp, #-48]!
  84:	mov	x29, sp
  88:	str	x0, [sp, #24]
  8c:	strb	w1, [sp, #23]
  90:	ldr	x0, [sp, #24]
  94:	ldr	x0, [x0]
  98:	str	x0, [sp, #32]
  9c:	str	xzr, [sp, #40]
  a0:	ldrb	w0, [sp, #23]
  a4:	cmp	w0, #0xff
  a8:	b.ne	b4 <readEncodedPointer+0x34>  // b.any
  ac:	mov	x0, #0x0                   	// #0
  b0:	b	2a4 <readEncodedPointer+0x224>
  b4:	ldrb	w0, [sp, #23]
  b8:	and	w0, w0, #0xf
  bc:	cmp	w0, #0xc
  c0:	b.eq	1f8 <readEncodedPointer+0x178>  // b.none
  c4:	cmp	w0, #0xc
  c8:	b.gt	214 <readEncodedPointer+0x194>
  cc:	cmp	w0, #0xb
  d0:	b.eq	1d8 <readEncodedPointer+0x158>  // b.none
  d4:	cmp	w0, #0xb
  d8:	b.gt	214 <readEncodedPointer+0x194>
  dc:	cmp	w0, #0xa
  e0:	b.eq	1b8 <readEncodedPointer+0x138>  // b.none
  e4:	cmp	w0, #0xa
  e8:	b.gt	214 <readEncodedPointer+0x194>
  ec:	cmp	w0, #0x4
  f0:	b.eq	19c <readEncodedPointer+0x11c>  // b.none
  f4:	cmp	w0, #0x4
  f8:	b.gt	214 <readEncodedPointer+0x194>
  fc:	cmp	w0, #0x3
 100:	b.eq	17c <readEncodedPointer+0xfc>  // b.none
 104:	cmp	w0, #0x3
 108:	b.gt	214 <readEncodedPointer+0x194>
 10c:	cmp	w0, #0x2
 110:	b.eq	15c <readEncodedPointer+0xdc>  // b.none
 114:	cmp	w0, #0x2
 118:	b.gt	214 <readEncodedPointer+0x194>
 11c:	cmp	w0, #0x0
 120:	b.eq	130 <readEncodedPointer+0xb0>  // b.none
 124:	cmp	w0, #0x1
 128:	b.eq	14c <readEncodedPointer+0xcc>  // b.none
 12c:	b	214 <readEncodedPointer+0x194>
 130:	ldr	x0, [sp, #32]
 134:	ldr	x0, [x0]
 138:	str	x0, [sp, #40]
 13c:	ldr	x0, [sp, #32]
 140:	add	x0, x0, #0x8
 144:	str	x0, [sp, #32]
 148:	b	22c <readEncodedPointer+0x1ac>
 14c:	add	x0, sp, #0x20
 150:	bl	0 <readULEB128>
 154:	str	x0, [sp, #40]
 158:	b	22c <readEncodedPointer+0x1ac>
 15c:	ldr	x0, [sp, #32]
 160:	ldrh	w0, [x0]
 164:	and	x0, x0, #0xffff
 168:	str	x0, [sp, #40]
 16c:	ldr	x0, [sp, #32]
 170:	add	x0, x0, #0x2
 174:	str	x0, [sp, #32]
 178:	b	22c <readEncodedPointer+0x1ac>
 17c:	ldr	x0, [sp, #32]
 180:	ldr	w0, [x0]
 184:	mov	w0, w0
 188:	str	x0, [sp, #40]
 18c:	ldr	x0, [sp, #32]
 190:	add	x0, x0, #0x4
 194:	str	x0, [sp, #32]
 198:	b	22c <readEncodedPointer+0x1ac>
 19c:	ldr	x0, [sp, #32]
 1a0:	ldr	x0, [x0]
 1a4:	str	x0, [sp, #40]
 1a8:	ldr	x0, [sp, #32]
 1ac:	add	x0, x0, #0x8
 1b0:	str	x0, [sp, #32]
 1b4:	b	22c <readEncodedPointer+0x1ac>
 1b8:	ldr	x0, [sp, #32]
 1bc:	ldrsh	w0, [x0]
 1c0:	sxth	x0, w0
 1c4:	str	x0, [sp, #40]
 1c8:	ldr	x0, [sp, #32]
 1cc:	add	x0, x0, #0x2
 1d0:	str	x0, [sp, #32]
 1d4:	b	22c <readEncodedPointer+0x1ac>
 1d8:	ldr	x0, [sp, #32]
 1dc:	ldr	w0, [x0]
 1e0:	sxtw	x0, w0
 1e4:	str	x0, [sp, #40]
 1e8:	ldr	x0, [sp, #32]
 1ec:	add	x0, x0, #0x4
 1f0:	str	x0, [sp, #32]
 1f4:	b	22c <readEncodedPointer+0x1ac>
 1f8:	ldr	x0, [sp, #32]
 1fc:	ldr	x0, [x0]
 200:	str	x0, [sp, #40]
 204:	ldr	x0, [sp, #32]
 208:	add	x0, x0, #0x8
 20c:	str	x0, [sp, #32]
 210:	b	22c <readEncodedPointer+0x1ac>
 214:	adrp	x0, 0 <readULEB128>
 218:	add	x2, x0, #0x0
 21c:	mov	w1, #0x68                  	// #104
 220:	adrp	x0, 0 <readULEB128>
 224:	add	x0, x0, #0x0
 228:	bl	0 <__compilerrt_abort_impl>
 22c:	ldrb	w0, [sp, #23]
 230:	and	w0, w0, #0x70
 234:	cmp	w0, #0x0
 238:	b.eq	278 <readEncodedPointer+0x1f8>  // b.none
 23c:	cmp	w0, #0x10
 240:	b.ne	260 <readEncodedPointer+0x1e0>  // b.any
 244:	ldr	x0, [sp, #24]
 248:	ldr	x0, [x0]
 24c:	mov	x1, x0
 250:	ldr	x0, [sp, #40]
 254:	add	x0, x0, x1
 258:	str	x0, [sp, #40]
 25c:	b	27c <readEncodedPointer+0x1fc>
 260:	adrp	x0, 0 <readULEB128>
 264:	add	x2, x0, #0x0
 268:	mov	w1, #0x7a                  	// #122
 26c:	adrp	x0, 0 <readULEB128>
 270:	add	x0, x0, #0x0
 274:	bl	0 <__compilerrt_abort_impl>
 278:	nop
 27c:	ldrsb	w0, [sp, #23]
 280:	cmp	w0, #0x0
 284:	b.ge	294 <readEncodedPointer+0x214>  // b.tcont
 288:	ldr	x0, [sp, #40]
 28c:	ldr	x0, [x0]
 290:	str	x0, [sp, #40]
 294:	ldr	x1, [sp, #32]
 298:	ldr	x0, [sp, #24]
 29c:	str	x1, [x0]
 2a0:	ldr	x0, [sp, #40]
 2a4:	ldp	x29, x30, [sp], #48
 2a8:	ret

00000000000002ac <continueUnwind>:
 2ac:	sub	sp, sp, #0x10
 2b0:	str	x0, [sp, #8]
 2b4:	str	x1, [sp]
 2b8:	mov	w0, #0x8                   	// #8
 2bc:	add	sp, sp, #0x10
 2c0:	ret

00000000000002c4 <__gcc_personality_v0>:
 2c4:	stp	x29, x30, [sp, #-144]!
 2c8:	mov	x29, sp
 2cc:	str	w0, [sp, #44]
 2d0:	str	w1, [sp, #40]
 2d4:	str	x2, [sp, #32]
 2d8:	str	x3, [sp, #24]
 2dc:	str	x4, [sp, #16]
 2e0:	ldr	w0, [sp, #40]
 2e4:	and	w0, w0, #0x1
 2e8:	cmp	w0, #0x0
 2ec:	b.eq	300 <__gcc_personality_v0+0x3c>  // b.none
 2f0:	ldr	x1, [sp, #16]
 2f4:	ldr	x0, [sp, #24]
 2f8:	bl	2ac <continueUnwind>
 2fc:	b	4c0 <__gcc_personality_v0+0x1fc>
 300:	ldr	x0, [sp, #16]
 304:	bl	0 <_Unwind_GetLanguageSpecificData>
 308:	str	x0, [sp, #64]
 30c:	ldr	x0, [sp, #64]
 310:	cmp	x0, #0x0
 314:	b.ne	328 <__gcc_personality_v0+0x64>  // b.any
 318:	ldr	x1, [sp, #16]
 31c:	ldr	x0, [sp, #24]
 320:	bl	2ac <continueUnwind>
 324:	b	4c0 <__gcc_personality_v0+0x1fc>
 328:	ldr	x0, [sp, #16]
 32c:	bl	0 <_Unwind_GetIP>
 330:	sub	x0, x0, #0x1
 334:	str	x0, [sp, #136]
 338:	ldr	x0, [sp, #16]
 33c:	bl	0 <_Unwind_GetRegionStart>
 340:	str	x0, [sp, #128]
 344:	ldr	x1, [sp, #136]
 348:	ldr	x0, [sp, #128]
 34c:	sub	x0, x1, x0
 350:	str	x0, [sp, #120]
 354:	ldr	x0, [sp, #64]
 358:	add	x1, x0, #0x1
 35c:	str	x1, [sp, #64]
 360:	ldrb	w0, [x0]
 364:	strb	w0, [sp, #119]
 368:	ldrb	w0, [sp, #119]
 36c:	cmp	w0, #0xff
 370:	b.eq	380 <__gcc_personality_v0+0xbc>  // b.none
 374:	add	x0, sp, #0x40
 378:	ldrb	w1, [sp, #119]
 37c:	bl	80 <readEncodedPointer>
 380:	ldr	x0, [sp, #64]
 384:	add	x1, x0, #0x1
 388:	str	x1, [sp, #64]
 38c:	ldrb	w0, [x0]
 390:	strb	w0, [sp, #118]
 394:	ldrb	w0, [sp, #118]
 398:	cmp	w0, #0xff
 39c:	b.eq	3a8 <__gcc_personality_v0+0xe4>  // b.none
 3a0:	add	x0, sp, #0x40
 3a4:	bl	0 <readULEB128>
 3a8:	ldr	x0, [sp, #64]
 3ac:	add	x1, x0, #0x1
 3b0:	str	x1, [sp, #64]
 3b4:	ldrb	w0, [x0]
 3b8:	strb	w0, [sp, #117]
 3bc:	add	x0, sp, #0x40
 3c0:	bl	0 <readULEB128>
 3c4:	str	w0, [sp, #112]
 3c8:	ldr	x0, [sp, #64]
 3cc:	str	x0, [sp, #104]
 3d0:	ldr	w0, [sp, #112]
 3d4:	ldr	x1, [sp, #104]
 3d8:	add	x0, x1, x0
 3dc:	str	x0, [sp, #96]
 3e0:	ldr	x0, [sp, #104]
 3e4:	str	x0, [sp, #56]
 3e8:	b	4a4 <__gcc_personality_v0+0x1e0>
 3ec:	add	x0, sp, #0x38
 3f0:	ldrb	w1, [sp, #117]
 3f4:	bl	80 <readEncodedPointer>
 3f8:	str	x0, [sp, #88]
 3fc:	add	x0, sp, #0x38
 400:	ldrb	w1, [sp, #117]
 404:	bl	80 <readEncodedPointer>
 408:	str	x0, [sp, #80]
 40c:	add	x0, sp, #0x38
 410:	ldrb	w1, [sp, #117]
 414:	bl	80 <readEncodedPointer>
 418:	str	x0, [sp, #72]
 41c:	add	x0, sp, #0x38
 420:	bl	0 <readULEB128>
 424:	ldr	x0, [sp, #72]
 428:	cmp	x0, #0x0
 42c:	b.ne	434 <__gcc_personality_v0+0x170>  // b.any
 430:	b	4a4 <__gcc_personality_v0+0x1e0>
 434:	ldr	x1, [sp, #88]
 438:	ldr	x0, [sp, #120]
 43c:	cmp	x1, x0
 440:	b.hi	4a4 <__gcc_personality_v0+0x1e0>  // b.pmore
 444:	ldr	x1, [sp, #88]
 448:	ldr	x0, [sp, #80]
 44c:	add	x0, x1, x0
 450:	ldr	x1, [sp, #120]
 454:	cmp	x1, x0
 458:	b.cs	4a4 <__gcc_personality_v0+0x1e0>  // b.hs, b.nlast
 45c:	mov	w1, #0x0                   	// #0
 460:	ldr	x0, [sp, #24]
 464:	mov	x2, x0
 468:	ldr	x0, [sp, #16]
 46c:	bl	0 <_Unwind_SetGR>
 470:	mov	w0, #0x1                   	// #1
 474:	mov	x2, #0x0                   	// #0
 478:	mov	w1, w0
 47c:	ldr	x0, [sp, #16]
 480:	bl	0 <_Unwind_SetGR>
 484:	ldr	x1, [sp, #128]
 488:	ldr	x0, [sp, #72]
 48c:	add	x0, x1, x0
 490:	mov	x1, x0
 494:	ldr	x0, [sp, #16]
 498:	bl	0 <_Unwind_SetIP>
 49c:	mov	w0, #0x7                   	// #7
 4a0:	b	4c0 <__gcc_personality_v0+0x1fc>
 4a4:	ldr	x0, [sp, #56]
 4a8:	ldr	x1, [sp, #96]
 4ac:	cmp	x1, x0
 4b0:	b.hi	3ec <__gcc_personality_v0+0x128>  // b.pmore
 4b4:	ldr	x1, [sp, #16]
 4b8:	ldr	x0, [sp, #24]
 4bc:	bl	2ac <continueUnwind>
 4c0:	ldp	x29, x30, [sp], #144
 4c4:	ret

clear_cache.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__clear_cache>:
   0:	sub	sp, sp, #0x40
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	ldr	x0, [sp, #8]
  10:	str	x0, [sp, #48]
  14:	ldr	x0, [sp]
  18:	str	x0, [sp, #40]
  1c:	adrp	x0, 0 <__clear_cache>
  20:	add	x0, x0, #0x0
  24:	ldr	x0, [x0]
  28:	cmp	x0, #0x0
  2c:	b.ne	40 <__clear_cache+0x40>  // b.any
  30:	mrs	x1, ctr_el0
  34:	adrp	x0, 0 <__clear_cache>
  38:	add	x0, x0, #0x0
  3c:	str	x1, [x0]
  40:	adrp	x0, 0 <__clear_cache>
  44:	add	x0, x0, #0x0
  48:	ldr	x0, [x0]
  4c:	and	x0, x0, #0x10000000
  50:	cmp	x0, #0x0
  54:	b.ne	bc <__clear_cache+0xbc>  // b.any
  58:	adrp	x0, 0 <__clear_cache>
  5c:	add	x0, x0, #0x0
  60:	ldr	x0, [x0]
  64:	lsr	x0, x0, #16
  68:	and	w0, w0, #0xf
  6c:	mov	w1, #0x4                   	// #4
  70:	lsl	w0, w1, w0
  74:	sxtw	x0, w0
  78:	str	x0, [sp, #32]
  7c:	ldr	x0, [sp, #32]
  80:	neg	x0, x0
  84:	ldr	x1, [sp, #48]
  88:	and	x0, x1, x0
  8c:	str	x0, [sp, #56]
  90:	b	ac <__clear_cache+0xac>
  94:	ldr	x0, [sp, #56]
  98:	dc	cvau, x0
  9c:	ldr	x1, [sp, #56]
  a0:	ldr	x0, [sp, #32]
  a4:	add	x0, x1, x0
  a8:	str	x0, [sp, #56]
  ac:	ldr	x1, [sp, #56]
  b0:	ldr	x0, [sp, #40]
  b4:	cmp	x1, x0
  b8:	b.cc	94 <__clear_cache+0x94>  // b.lo, b.ul, b.last
  bc:	dsb	ish
  c0:	adrp	x0, 0 <__clear_cache>
  c4:	add	x0, x0, #0x0
  c8:	ldr	x0, [x0]
  cc:	and	x0, x0, #0x20000000
  d0:	cmp	x0, #0x0
  d4:	b.ne	138 <__clear_cache+0x138>  // b.any
  d8:	adrp	x0, 0 <__clear_cache>
  dc:	add	x0, x0, #0x0
  e0:	ldr	x0, [x0]
  e4:	and	w0, w0, #0xf
  e8:	mov	w1, #0x4                   	// #4
  ec:	lsl	w0, w1, w0
  f0:	sxtw	x0, w0
  f4:	str	x0, [sp, #24]
  f8:	ldr	x0, [sp, #24]
  fc:	neg	x0, x0
 100:	ldr	x1, [sp, #48]
 104:	and	x0, x1, x0
 108:	str	x0, [sp, #56]
 10c:	b	128 <__clear_cache+0x128>
 110:	ldr	x0, [sp, #56]
 114:	ic	ivau, x0
 118:	ldr	x1, [sp, #56]
 11c:	ldr	x0, [sp, #24]
 120:	add	x0, x1, x0
 124:	str	x0, [sp, #56]
 128:	ldr	x1, [sp, #56]
 12c:	ldr	x0, [sp, #40]
 130:	cmp	x1, x0
 134:	b.cc	110 <__clear_cache+0x110>  // b.lo, b.ul, b.last
 138:	isb
 13c:	nop
 140:	add	sp, sp, #0x40
 144:	ret

fp_mode.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__fe_getround>:
   0:	sub	sp, sp, #0x10
   4:	mrs	x0, fpcr
   8:	str	x0, [sp, #8]
   c:	ldr	x0, [sp, #8]
  10:	lsr	x0, x0, #22
  14:	and	x0, x0, #0x3
  18:	str	x0, [sp, #8]
  1c:	ldr	x0, [sp, #8]
  20:	cmp	x0, #0x3
  24:	b.eq	60 <__fe_getround+0x60>  // b.none
  28:	ldr	x0, [sp, #8]
  2c:	cmp	x0, #0x3
  30:	b.hi	68 <__fe_getround+0x68>  // b.pmore
  34:	ldr	x0, [sp, #8]
  38:	cmp	x0, #0x1
  3c:	b.eq	50 <__fe_getround+0x50>  // b.none
  40:	ldr	x0, [sp, #8]
  44:	cmp	x0, #0x2
  48:	b.eq	58 <__fe_getround+0x58>  // b.none
  4c:	b	68 <__fe_getround+0x68>
  50:	mov	w0, #0x2                   	// #2
  54:	b	6c <__fe_getround+0x6c>
  58:	mov	w0, #0x1                   	// #1
  5c:	b	6c <__fe_getround+0x6c>
  60:	mov	w0, #0x3                   	// #3
  64:	b	6c <__fe_getround+0x6c>
  68:	mov	w0, #0x0                   	// #0
  6c:	add	sp, sp, #0x10
  70:	ret

0000000000000074 <__fe_raise_inexact>:
  74:	sub	sp, sp, #0x10
  78:	mrs	x0, fpsr
  7c:	str	x0, [sp, #8]
  80:	ldr	x0, [sp, #8]
  84:	orr	x0, x0, #0x10
  88:	msr	fpsr, x0
  8c:	mov	w0, #0x0                   	// #0
  90:	add	sp, sp, #0x10
  94:	ret
