
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//gzio.module_gcc_-O2:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <eat_field>:
       0:	stp	x29, x30, [sp, #-48]!
       4:	mov	x29, sp
       8:	stp	x19, x20, [sp, #16]
       c:	mov	x20, x0
      10:	mov	w19, w1
      14:	mov	w0, #0x1                   	// #1
      18:	strb	w0, [sp, #47]
      1c:	b	44 <eat_field+0x44>
      20:	sub	w0, w19, #0x1
      24:	cbz	w19, 54 <eat_field+0x54>
      28:	mov	w19, w0
      2c:	add	x1, sp, #0x2f
      30:	mov	x0, x20
      34:	mov	x2, #0x1                   	// #1
      38:	bl	0 <grub_file_read>
      3c:	cmp	w0, #0x1
      40:	b.ne	64 <eat_field+0x64>  // b.any
      44:	cmn	w19, #0x1
      48:	b.ne	20 <eat_field+0x20>  // b.any
      4c:	ldrb	w0, [sp, #47]
      50:	cbnz	w0, 2c <eat_field+0x2c>
      54:	mov	w0, #0x0                   	// #0
      58:	ldp	x19, x20, [sp, #16]
      5c:	ldp	x29, x30, [sp], #48
      60:	ret
      64:	cmp	w0, #0x0
      68:	cset	w0, eq  // eq = none
      6c:	ldp	x19, x20, [sp, #16]
      70:	ldp	x29, x30, [sp], #48
      74:	ret

0000000000000078 <initialize_tables>:
      78:	stp	x29, x30, [sp, #-48]!
      7c:	mov	x29, sp
      80:	ldr	x1, [x0, #32]
      84:	str	x21, [sp, #32]
      88:	add	x21, x0, #0x8, lsl #12
      8c:	stp	x19, x20, [sp, #16]
      90:	mov	x20, x0
      94:	ldr	x0, [x0, #24]
      98:	str	xzr, [x21, #8336]
      9c:	cbz	x0, 140 <initialize_tables+0xc8>
      a0:	ldr	x0, [x20, #8]
      a4:	cmp	x1, x0
      a8:	b.hi	12c <initialize_tables+0xb4>  // b.pmore
      ac:	str	x1, [x20, #16]
      b0:	ldr	x19, [x21, #8280]
      b4:	stur	xzr, [x20, #44]
      b8:	str	xzr, [x20, #8264]
      bc:	str	wzr, [x20, #8272]
      c0:	cbz	x19, d8 <initialize_tables+0x60>
      c4:	nop
      c8:	sub	x0, x19, #0x10
      cc:	ldur	x19, [x19, #-8]
      d0:	bl	0 <grub_free>
      d4:	cbnz	x19, c8 <initialize_tables+0x50>
      d8:	ldr	x19, [x21, #8288]
      dc:	cbz	x19, f0 <initialize_tables+0x78>
      e0:	sub	x0, x19, #0x10
      e4:	ldur	x19, [x19, #-8]
      e8:	bl	0 <grub_free>
      ec:	cbnz	x19, e0 <initialize_tables+0x68>
      f0:	ldr	x0, [x21, #8320]
      f4:	str	xzr, [x21, #8280]
      f8:	str	xzr, [x21, #8288]
      fc:	cbz	x0, 11c <initialize_tables+0xa4>
     100:	ldr	x1, [x21, #8296]
     104:	ldp	x19, x20, [sp, #16]
     108:	ldr	x21, [sp, #32]
     10c:	ldp	x29, x30, [sp], #48
     110:	ldr	x1, [x1, #40]
     114:	mov	x16, x1
     118:	br	x16
     11c:	ldp	x19, x20, [sp, #16]
     120:	ldr	x21, [sp, #32]
     124:	ldp	x29, x30, [sp], #48
     128:	ret
     12c:	adrp	x1, 0 <eat_field>
     130:	mov	w0, #0xb                   	// #11
     134:	ldr	x1, [x1]
     138:	bl	0 <grub_error>
     13c:	b	b0 <initialize_tables+0x38>
     140:	ldr	x0, [x20]
     144:	bl	0 <grub_file_seek>
     148:	b	b0 <initialize_tables+0x38>
     14c:	nop
	...

0000000000000158 <huft_build>:
     158:	sub	sp, sp, #0x650
     15c:	stp	x29, x30, [sp]
     160:	mov	x29, sp
     164:	stp	x19, x20, [sp, #16]
     168:	add	x19, sp, #0xc0
     16c:	mov	x20, x0
     170:	stp	x23, x24, [sp, #48]
     174:	mov	w23, w1
     178:	mov	x0, x19
     17c:	mov	w1, #0x0                   	// #0
     180:	stp	x21, x22, [sp, #32]
     184:	mov	x22, x6
     188:	mov	x21, x5
     18c:	stp	x3, x4, [sp, #144]
     190:	str	w2, [sp, #168]
     194:	mov	x2, #0x44                  	// #68
     198:	bl	0 <grub_memset>
     19c:	ubfiz	x9, x23, #2, #32
     1a0:	mov	w6, w23
     1a4:	add	x0, x20, x9
     1a8:	mov	x3, x20
     1ac:	nop
     1b0:	ldr	w2, [x3], #4
     1b4:	cmp	x0, x3
     1b8:	ldr	w1, [x19, x2, lsl #2]
     1bc:	add	w1, w1, #0x1
     1c0:	str	w1, [x19, x2, lsl #2]
     1c4:	b.ne	1b0 <huft_build+0x58>  // b.any
     1c8:	ldr	w5, [sp, #192]
     1cc:	cmp	w5, w23
     1d0:	mov	w10, w5
     1d4:	b.eq	714 <huft_build+0x5bc>  // b.none
     1d8:	stp	x27, x28, [sp, #80]
     1dc:	mov	x2, x19
     1e0:	ldr	w28, [x22]
     1e4:	mov	x0, x19
     1e8:	mov	w8, #0x1                   	// #1
     1ec:	nop
     1f0:	ldr	w1, [x0, #4]
     1f4:	add	x0, x0, #0x4
     1f8:	cbnz	w1, 27c <huft_build+0x124>
     1fc:	add	w8, w8, #0x1
     200:	cmp	w8, #0x11
     204:	b.ne	1f0 <huft_build+0x98>  // b.any
     208:	mov	w1, #0x20000               	// #131072
     20c:	str	w8, [sp, #104]
     210:	cmp	w28, w8
     214:	mov	w4, #0x10                  	// #16
     218:	csel	w28, w28, w8, cs  // cs = hs, nlast
     21c:	nop
     220:	ldr	w0, [x2, #64]
     224:	sub	x2, x2, #0x4
     228:	cbnz	w0, 28c <huft_build+0x134>
     22c:	subs	w4, w4, #0x1
     230:	b.ne	220 <huft_build+0xc8>  // b.any
     234:	cbnz	w28, 798 <huft_build+0x640>
     238:	subs	w0, w1, w5
     23c:	str	wzr, [x22]
     240:	str	w0, [sp, #172]
     244:	b.mi	25c <huft_build+0x104>  // b.first
     248:	stp	x25, x26, [sp, #64]
     24c:	str	wzr, [sp, #140]
     250:	str	w1, [sp, #192]
     254:	str	wzr, [sp, #268]
     258:	b	300 <huft_build+0x1a8>
     25c:	ldp	x27, x28, [sp, #80]
     260:	mov	w0, #0x2                   	// #2
     264:	ldp	x29, x30, [sp]
     268:	ldp	x19, x20, [sp, #16]
     26c:	ldp	x21, x22, [sp, #32]
     270:	ldp	x23, x24, [sp, #48]
     274:	add	sp, sp, #0x650
     278:	ret
     27c:	mov	w1, #0x1                   	// #1
     280:	str	w8, [sp, #104]
     284:	lsl	w1, w1, w8
     288:	b	210 <huft_build+0xb8>
     28c:	cmp	w28, w4
     290:	str	w4, [sp, #140]
     294:	csel	w28, w28, w4, ls  // ls = plast
     298:	str	w28, [x22]
     29c:	cmp	w8, w4
     2a0:	b.cs	7b4 <huft_build+0x65c>  // b.hs, b.nlast
     2a4:	ldr	w2, [x19, w8, uxtw #2]
     2a8:	subs	w1, w1, w2
     2ac:	b.mi	25c <huft_build+0x104>  // b.first
     2b0:	add	w0, w8, #0x1
     2b4:	mvn	w10, w8
     2b8:	add	w10, w10, w4
     2bc:	mov	x5, #0x0                   	// #0
     2c0:	add	x0, x19, x0, lsl #2
     2c4:	b	2d8 <huft_build+0x180>
     2c8:	ldr	w2, [x0, x5, lsl #2]
     2cc:	add	x5, x5, #0x1
     2d0:	subs	w1, w1, w2
     2d4:	b.mi	25c <huft_build+0x104>  // b.first
     2d8:	lsl	w1, w1, #1
     2dc:	cmp	x10, x5
     2e0:	b.ne	2c8 <huft_build+0x170>  // b.any
     2e4:	ldr	w10, [x19, w4, uxtw #2]
     2e8:	subs	w0, w1, w10
     2ec:	str	w0, [sp, #172]
     2f0:	b.mi	25c <huft_build+0x104>  // b.first
     2f4:	stp	x25, x26, [sp, #64]
     2f8:	str	w1, [x19, w4, uxtw #2]
     2fc:	str	wzr, [sp, #268]
     300:	sub	w5, w4, #0x2
     304:	mov	x0, #0x0                   	// #0
     308:	add	x5, x5, #0x1
     30c:	mov	w1, #0x0                   	// #0
     310:	lsl	x5, x5, #2
     314:	nop
     318:	add	x3, x19, x0
     31c:	add	x2, sp, #0x108
     320:	add	x2, x2, x0
     324:	add	x0, x0, #0x4
     328:	cmp	x5, x0
     32c:	ldr	w3, [x3, #4]
     330:	add	w1, w1, w3
     334:	str	w1, [x2, #8]
     338:	b.ne	318 <huft_build+0x1c0>  // b.any
     33c:	add	x4, sp, #0x108
     340:	add	x10, sp, #0x1d0
     344:	mov	x0, #0x0                   	// #0
     348:	ldr	w1, [x20, x0, lsl #2]
     34c:	mov	w2, w1
     350:	cbz	w1, 364 <huft_build+0x20c>
     354:	ldr	w1, [x4, x2, lsl #2]
     358:	add	w3, w1, #0x1
     35c:	str	w3, [x4, x2, lsl #2]
     360:	str	w0, [x10, w1, uxtw #2]
     364:	add	x0, x0, #0x1
     368:	cmp	x6, x0
     36c:	b.ne	348 <huft_build+0x1f0>  // b.any
     370:	ldr	w0, [sp, #140]
     374:	neg	w25, w28
     378:	str	wzr, [sp, #264]
     37c:	str	xzr, [sp, #336]
     380:	cmp	w0, w8
     384:	b.lt	6f4 <huft_build+0x59c>  // b.tstop
     388:	add	x0, x19, w8, sxtw #2
     38c:	str	x0, [sp, #128]
     390:	add	x0, sp, #0x1d0
     394:	mov	w24, #0x0                   	// #0
     398:	add	x0, x0, x9
     39c:	str	x0, [sp, #176]
     3a0:	add	x0, sp, #0x1d0
     3a4:	str	x0, [sp, #160]
     3a8:	ldr	w0, [sp, #140]
     3ac:	mov	w19, #0xffffffff            	// #-1
     3b0:	mov	w1, w19
     3b4:	mov	x4, x21
     3b8:	add	w0, w0, #0x1
     3bc:	str	w0, [sp, #188]
     3c0:	mov	x0, x27
     3c4:	mov	w19, w28
     3c8:	mov	w27, w25
     3cc:	mov	w28, w1
     3d0:	mov	w25, w24
     3d4:	mov	x24, x0
     3d8:	mov	x13, #0x0                   	// #0
     3dc:	mov	w26, #0x0                   	// #0
     3e0:	ldr	x0, [sp, #128]
     3e4:	ldr	w0, [x0]
     3e8:	str	w0, [sp, #100]
     3ec:	cbz	w0, 6d0 <huft_build+0x578>
     3f0:	ldr	w0, [sp, #104]
     3f4:	mov	w1, #0x1                   	// #1
     3f8:	mov	x23, x24
     3fc:	mov	w24, w26
     400:	sub	w0, w0, #0x1
     404:	mov	w26, w28
     408:	lsl	w0, w1, w0
     40c:	str	w0, [sp, #184]
     410:	mov	w0, w25
     414:	mov	w25, w27
     418:	mov	w27, w19
     41c:	mov	w19, w0
     420:	ldr	w0, [sp, #104]
     424:	add	w3, w27, w25
     428:	cmp	w3, w0
     42c:	b.ge	7a8 <huft_build+0x650>  // b.tcont
     430:	ldr	w0, [sp, #104]
     434:	add	w6, w26, #0x1
     438:	mov	x19, x4
     43c:	str	w24, [sp, #136]
     440:	sub	w5, w0, w3
     444:	ldr	w0, [sp, #140]
     448:	sxtw	x28, w6
     44c:	sub	w21, w0, w3
     450:	add	x0, sp, #0x150
     454:	add	x22, x0, w26, sxtw #3
     458:	mov	x24, x28
     45c:	mov	x26, x23
     460:	mov	x28, x22
     464:	mov	w23, w27
     468:	mov	w22, w3
     46c:	mov	w27, w21
     470:	mov	w21, w5
     474:	b	4f8 <huft_build+0x3a0>
     478:	add	w0, w25, #0x1
     47c:	lsl	x0, x0, #4
     480:	bl	0 <grub_zalloc>
     484:	cbz	x0, 578 <huft_build+0x420>
     488:	add	x13, x0, #0x10
     48c:	str	x13, [x19]
     490:	str	xzr, [x0, #8]
     494:	add	x19, x0, #0x8
     498:	str	x13, [x28, #8]
     49c:	cbz	w24, 4d8 <huft_build+0x380>
     4a0:	ldrb	w2, [sp, #96]
     4a4:	add	w0, w20, #0x10
     4a8:	ldr	w1, [sp, #136]
     4ac:	ldr	x4, [x28]
     4b0:	bfxil	x26, x0, #0, #8
     4b4:	lsr	w20, w1, w2
     4b8:	add	x2, sp, #0x108
     4bc:	lsl	x20, x20, #4
     4c0:	bfi	x26, x23, #8, #8
     4c4:	add	x0, x4, x20
     4c8:	str	x13, [sp, #120]
     4cc:	str	w1, [x2, x24, lsl #2]
     4d0:	str	x26, [x4, x20]
     4d4:	str	x13, [x0, #8]
     4d8:	ldr	w0, [sp, #104]
     4dc:	add	w22, w22, w23
     4e0:	add	x24, x24, #0x1
     4e4:	sub	w21, w21, w23
     4e8:	add	x28, x28, #0x8
     4ec:	sub	w27, w27, w23
     4f0:	cmp	w22, w0
     4f4:	b.ge	5bc <huft_build+0x464>  // b.tcont
     4f8:	mov	w0, #0x1                   	// #1
     4fc:	stp	w24, w21, [sp, #108]
     500:	lsl	w25, w0, w21
     504:	sub	w0, w22, w23
     508:	str	w0, [sp, #96]
     50c:	mov	w20, w21
     510:	ldr	w0, [sp, #100]
     514:	str	w22, [sp, #116]
     518:	cmp	w0, w25
     51c:	b.cs	478 <huft_build+0x320>  // b.hs, b.nlast
     520:	cmp	w27, w23
     524:	add	w20, w21, #0x1
     528:	csel	w12, w27, w23, ls  // ls = plast
     52c:	sub	w0, w25, w0
     530:	cmp	w12, w20
     534:	ldr	x4, [sp, #128]
     538:	b.hi	550 <huft_build+0x3f8>  // b.pmore
     53c:	b	560 <huft_build+0x408>
     540:	add	w20, w20, #0x1
     544:	sub	w0, w2, w1
     548:	cmp	w12, w20
     54c:	b.ls	560 <huft_build+0x408>  // b.plast
     550:	ldr	w1, [x4, #4]!
     554:	lsl	w2, w0, #1
     558:	cmp	w1, w0, lsl #1
     55c:	b.cc	540 <huft_build+0x3e8>  // b.lo, b.ul, b.last
     560:	mov	w0, #0x1                   	// #1
     564:	lsl	w25, w0, w20
     568:	add	w0, w25, #0x1
     56c:	lsl	x0, x0, #4
     570:	bl	0 <grub_zalloc>
     574:	cbnz	x0, 488 <huft_build+0x330>
     578:	ldr	w19, [sp, #108]
     57c:	cbz	w19, 598 <huft_build+0x440>
     580:	ldr	x19, [sp, #336]
     584:	cbz	x19, 598 <huft_build+0x440>
     588:	sub	x0, x19, #0x10
     58c:	ldur	x19, [x19, #-8]
     590:	bl	0 <grub_free>
     594:	cbnz	x19, 588 <huft_build+0x430>
     598:	mov	w0, #0x3                   	// #3
     59c:	ldp	x29, x30, [sp]
     5a0:	ldp	x19, x20, [sp, #16]
     5a4:	ldp	x21, x22, [sp, #32]
     5a8:	ldp	x23, x24, [sp, #48]
     5ac:	ldp	x25, x26, [sp, #64]
     5b0:	ldp	x27, x28, [sp, #80]
     5b4:	add	sp, sp, #0x650
     5b8:	ret
     5bc:	mov	x4, x19
     5c0:	mov	w19, w25
     5c4:	ldr	w25, [sp, #116]
     5c8:	mov	w27, w23
     5cc:	ldr	w24, [sp, #136]
     5d0:	mov	x23, x26
     5d4:	ldr	w26, [sp, #108]
     5d8:	sub	w5, w0, w25
     5dc:	ldr	x0, [sp, #160]
     5e0:	and	w5, w5, #0xff
     5e4:	ldr	x1, [sp, #176]
     5e8:	mov	w6, #0x63                  	// #99
     5ec:	cmp	x1, x0
     5f0:	b.hi	738 <huft_build+0x5e0>  // b.pmore
     5f4:	ldrb	w1, [sp, #112]
     5f8:	mov	w0, #0x1                   	// #1
     5fc:	lsl	w22, w0, w1
     600:	lsr	w0, w24, w25
     604:	cmp	w0, w19
     608:	b.cs	634 <huft_build+0x4dc>  // b.hs, b.nlast
     60c:	ldr	x3, [sp, #120]
     610:	ubfiz	x1, x0, #4, #32
     614:	bfxil	x23, x6, #0, #8
     618:	add	x2, x13, x1
     61c:	add	w0, w0, w22
     620:	bfi	x23, x5, #8, #8
     624:	str	x23, [x13, x1]
     628:	str	x3, [x2, #8]
     62c:	cmp	w0, w19
     630:	b.cc	610 <huft_build+0x4b8>  // b.lo, b.ul, b.last
     634:	ldr	w0, [sp, #184]
     638:	tst	w0, w24
     63c:	b.eq	650 <huft_build+0x4f8>  // b.none
     640:	eor	w24, w24, w0
     644:	lsr	w0, w0, #1
     648:	tst	w24, w0
     64c:	b.ne	640 <huft_build+0x4e8>  // b.any
     650:	add	x1, sp, #0x108
     654:	eor	w24, w24, w0
     658:	mov	w0, #0x1                   	// #1
     65c:	sbfiz	x2, x26, #2, #32
     660:	lsl	w0, w0, w25
     664:	sub	w0, w0, #0x1
     668:	ldr	w3, [x1, w26, sxtw #2]
     66c:	and	w0, w0, w24
     670:	cmp	w3, w0
     674:	b.eq	6a4 <huft_build+0x54c>  // b.none
     678:	add	x2, x1, x2
     67c:	nop
     680:	sub	w25, w25, w27
     684:	mov	w0, #0x1                   	// #1
     688:	ldr	w1, [x2, #-4]!
     68c:	sub	w26, w26, #0x1
     690:	lsl	w0, w0, w25
     694:	sub	w0, w0, #0x1
     698:	and	w0, w0, w24
     69c:	cmp	w0, w1
     6a0:	b.ne	680 <huft_build+0x528>  // b.any
     6a4:	ldr	w0, [sp, #100]
     6a8:	subs	w0, w0, #0x1
     6ac:	str	w0, [sp, #100]
     6b0:	b.ne	420 <huft_build+0x2c8>  // b.any
     6b4:	mov	w0, w19
     6b8:	mov	w28, w26
     6bc:	mov	w19, w27
     6c0:	mov	w26, w24
     6c4:	mov	w27, w25
     6c8:	mov	x24, x23
     6cc:	mov	w25, w0
     6d0:	ldr	x1, [sp, #128]
     6d4:	ldr	w0, [sp, #104]
     6d8:	add	x1, x1, #0x4
     6dc:	str	x1, [sp, #128]
     6e0:	add	w0, w0, #0x1
     6e4:	ldr	w1, [sp, #188]
     6e8:	str	w0, [sp, #104]
     6ec:	cmp	w1, w0
     6f0:	b.ne	3e0 <huft_build+0x288>  // b.any
     6f4:	ldr	w0, [sp, #172]
     6f8:	ldp	x25, x26, [sp, #64]
     6fc:	cmp	w0, #0x0
     700:	ldr	w0, [sp, #140]
     704:	ldp	x27, x28, [sp, #80]
     708:	ccmp	w0, #0x1, #0x4, ne  // ne = any
     70c:	cset	w0, ne  // ne = any
     710:	b	264 <huft_build+0x10c>
     714:	str	xzr, [x21]
     718:	mov	w0, #0x0                   	// #0
     71c:	str	wzr, [x22]
     720:	ldp	x29, x30, [sp]
     724:	ldp	x19, x20, [sp, #16]
     728:	ldp	x21, x22, [sp, #32]
     72c:	ldp	x23, x24, [sp, #48]
     730:	add	sp, sp, #0x650
     734:	ret
     738:	mov	x1, x0
     73c:	ldr	w0, [x1], #4
     740:	str	x1, [sp, #160]
     744:	ldr	w1, [sp, #168]
     748:	cmp	w0, w1
     74c:	b.cs	76c <huft_build+0x614>  // b.hs, b.nlast
     750:	ldr	x1, [sp, #120]
     754:	cmp	w0, #0x100
     758:	cset	w6, ne  // ne = any
     75c:	add	w6, w6, #0xf
     760:	bfxil	x1, x0, #0, #16
     764:	str	x1, [sp, #120]
     768:	b	5f4 <huft_build+0x49c>
     76c:	ldr	w1, [sp, #168]
     770:	sub	w0, w0, w1
     774:	ldr	x1, [sp, #144]
     778:	lsl	x0, x0, #1
     77c:	ldrh	w2, [x1, x0]
     780:	ldr	x1, [sp, #152]
     784:	ldrb	w6, [x1, x0]
     788:	ldr	x0, [sp, #120]
     78c:	bfxil	x0, x2, #0, #16
     790:	str	x0, [sp, #120]
     794:	b	5f4 <huft_build+0x49c>
     798:	mov	w28, #0x0                   	// #0
     79c:	str	wzr, [x22]
     7a0:	str	wzr, [sp, #140]
     7a4:	b	2e8 <huft_build+0x190>
     7a8:	sub	w5, w0, w25
     7ac:	str	w5, [sp, #112]
     7b0:	b	5dc <huft_build+0x484>
     7b4:	ldr	w2, [x19, w4, uxtw #2]
     7b8:	mov	w0, w4
     7bc:	subs	w2, w1, w2
     7c0:	str	w2, [sp, #172]
     7c4:	b.mi	25c <huft_build+0x104>  // b.first
     7c8:	stp	x25, x26, [sp, #64]
     7cc:	cmp	w4, #0x1
     7d0:	str	w1, [x19, x0, lsl #2]
     7d4:	str	wzr, [sp, #268]
     7d8:	b.eq	33c <huft_build+0x1e4>  // b.none
     7dc:	b	300 <huft_build+0x1a8>

00000000000007e0 <init_fixed_block>:
     7e0:	sub	sp, sp, #0x4b0
     7e4:	mov	w2, #0x8                   	// #8
     7e8:	stp	x29, x30, [sp]
     7ec:	mov	x29, sp
     7f0:	stp	x19, x20, [sp, #16]
     7f4:	add	x19, sp, #0x30
     7f8:	mov	x20, x0
     7fc:	add	x3, x19, #0x240
     800:	mov	x1, x19
     804:	stp	x21, x22, [sp, #32]
     808:	str	w2, [x1], #4
     80c:	cmp	x1, x3
     810:	b.ne	808 <init_fixed_block+0x28>  // b.any
     814:	add	x0, sp, #0x30
     818:	add	x1, sp, #0x270
     81c:	add	x3, x0, #0x400
     820:	mov	w2, #0x9                   	// #9
     824:	nop
     828:	str	w2, [x1], #4
     82c:	cmp	x3, x1
     830:	b.ne	828 <init_fixed_block+0x48>  // b.any
     834:	add	x0, sp, #0x30
     838:	add	x1, sp, #0x430
     83c:	add	x3, x0, #0x460
     840:	mov	w2, #0x7                   	// #7
     844:	nop
     848:	str	w2, [x1], #4
     84c:	cmp	x3, x1
     850:	b.ne	848 <init_fixed_block+0x68>  // b.any
     854:	adrp	x0, 0 <eat_field>
     858:	add	x22, x20, #0x8, lsl #12
     85c:	add	x8, sp, #0x490
     860:	mov	x7, #0x800000008           	// #34359738376
     864:	ldr	x21, [x0]
     868:	str	w2, [x22, #8328]
     86c:	mov	x4, #0xa088                	// #41096
     870:	mov	w1, #0x120                 	// #288
     874:	add	x6, x20, x4
     878:	mov	w2, #0x101                 	// #257
     87c:	mov	x4, x21
     880:	add	x3, x21, #0x40
     884:	add	x0, sp, #0x30
     888:	mov	x5, #0xa058                	// #41048
     88c:	add	x5, x20, x5
     890:	stp	x7, x7, [x8]
     894:	stp	x7, x7, [x8, #16]
     898:	bl	158 <huft_build>
     89c:	add	x2, sp, #0xa8
     8a0:	mov	w1, #0x5                   	// #5
     8a4:	cbnz	w0, 950 <init_fixed_block+0x170>
     8a8:	str	w1, [x19], #4
     8ac:	cmp	x19, x2
     8b0:	b.ne	8a8 <init_fixed_block+0xc8>  // b.any
     8b4:	str	w1, [x22, #8332]
     8b8:	mov	x2, #0xa08c                	// #41100
     8bc:	mov	x3, #0xa060                	// #41056
     8c0:	add	x6, x20, x2
     8c4:	add	x5, x20, x3
     8c8:	add	x0, sp, #0x30
     8cc:	add	x4, x21, #0x80
     8d0:	add	x3, x21, #0xc0
     8d4:	mov	w2, #0x0                   	// #0
     8d8:	mov	w1, #0x1e                  	// #30
     8dc:	bl	158 <huft_build>
     8e0:	cmp	w0, #0x1
     8e4:	b.gt	90c <init_fixed_block+0x12c>
     8e8:	ldr	w0, [x20, #44]
     8ec:	str	wzr, [x20, #52]
     8f0:	add	w0, w0, #0x1
     8f4:	str	w0, [x20, #44]
     8f8:	ldp	x29, x30, [sp]
     8fc:	ldp	x19, x20, [sp, #16]
     900:	ldp	x21, x22, [sp, #32]
     904:	add	sp, sp, #0x4b0
     908:	ret
     90c:	adrp	x0, 0 <eat_field>
     910:	ldr	x0, [x0]
     914:	ldr	w0, [x0]
     918:	cbz	w0, 984 <init_fixed_block+0x1a4>
     91c:	ldr	x19, [x22, #8280]
     920:	cbz	x19, 938 <init_fixed_block+0x158>
     924:	nop
     928:	sub	x0, x19, #0x10
     92c:	ldur	x19, [x19, #-8]
     930:	bl	0 <grub_free>
     934:	cbnz	x19, 928 <init_fixed_block+0x148>
     938:	str	xzr, [x22, #8280]
     93c:	ldp	x29, x30, [sp]
     940:	ldp	x19, x20, [sp, #16]
     944:	ldp	x21, x22, [sp, #32]
     948:	add	sp, sp, #0x4b0
     94c:	ret
     950:	adrp	x0, 0 <eat_field>
     954:	ldr	x0, [x0]
     958:	ldr	w0, [x0]
     95c:	cbnz	w0, 8f8 <init_fixed_block+0x118>
     960:	adrp	x1, 0 <eat_field>
     964:	mov	w0, #0x1a                  	// #26
     968:	ldr	x1, [x1]
     96c:	bl	0 <grub_error>
     970:	ldp	x29, x30, [sp]
     974:	ldp	x19, x20, [sp, #16]
     978:	ldp	x21, x22, [sp, #32]
     97c:	add	sp, sp, #0x4b0
     980:	ret
     984:	adrp	x1, 0 <eat_field>
     988:	mov	w0, #0x1a                  	// #26
     98c:	ldr	x1, [x1]
     990:	bl	0 <grub_error>
     994:	b	91c <init_fixed_block+0x13c>
	...

00000000000009b0 <grub_gzio_close>:
     9b0:	stp	x29, x30, [sp, #-48]!
     9b4:	mov	x29, sp
     9b8:	stp	x21, x22, [sp, #32]
     9bc:	ldr	x21, [x0, #80]
     9c0:	stp	x19, x20, [sp, #16]
     9c4:	mov	x20, x0
     9c8:	add	x22, x21, #0x8, lsl #12
     9cc:	ldr	x0, [x21]
     9d0:	bl	0 <grub_file_close>
     9d4:	ldr	x19, [x22, #8280]
     9d8:	cbz	x19, 9f0 <grub_gzio_close+0x40>
     9dc:	nop
     9e0:	sub	x0, x19, #0x10
     9e4:	ldur	x19, [x19, #-8]
     9e8:	bl	0 <grub_free>
     9ec:	cbnz	x19, 9e0 <grub_gzio_close+0x30>
     9f0:	ldr	x19, [x22, #8288]
     9f4:	cbz	x19, a08 <grub_gzio_close+0x58>
     9f8:	sub	x0, x19, #0x10
     9fc:	ldur	x19, [x19, #-8]
     a00:	bl	0 <grub_free>
     a04:	cbnz	x19, 9f8 <grub_gzio_close+0x48>
     a08:	ldr	x0, [x22, #8320]
     a0c:	bl	0 <grub_free>
     a10:	mov	x0, x21
     a14:	bl	0 <grub_free>
     a18:	adrp	x0, 0 <eat_field>
     a1c:	ldp	x21, x22, [sp, #32]
     a20:	ldr	x0, [x0]
     a24:	ldr	w0, [x0]
     a28:	stp	xzr, xzr, [x20]
     a2c:	ldp	x19, x20, [sp, #16]
     a30:	ldp	x29, x30, [sp], #48
     a34:	ret
	...

0000000000000a40 <get_byte>:
     a40:	stp	x29, x30, [sp, #-32]!
     a44:	mov	x29, sp
     a48:	ldr	x1, [x0, #24]
     a4c:	str	x19, [sp, #16]
     a50:	mov	x19, x0
     a54:	cbz	x1, a80 <get_byte+0x40>
     a58:	ldp	x3, x2, [x19, #8]
     a5c:	mov	w0, #0x0                   	// #0
     a60:	cmp	x2, x3
     a64:	b.cs	a74 <get_byte+0x34>  // b.hs, b.nlast
     a68:	add	x0, x2, #0x1
     a6c:	str	x0, [x19, #16]
     a70:	ldrb	w0, [x1, x2]
     a74:	ldr	x19, [sp, #16]
     a78:	ldp	x29, x30, [sp], #32
     a7c:	ret
     a80:	ldr	x0, [x0]
     a84:	cbz	x0, ad0 <get_byte+0x90>
     a88:	ldr	x2, [x0, #24]
     a8c:	ldr	x1, [x19, #32]
     a90:	cmp	x2, x1
     a94:	b.eq	ac0 <get_byte+0x80>  // b.none
     a98:	ldr	w1, [x19, #8256]
     a9c:	cmp	w1, #0x2, lsl #12
     aa0:	b.eq	ac0 <get_byte+0x80>  // b.none
     aa4:	add	x0, x19, w1, sxtw
     aa8:	add	w1, w1, #0x1
     aac:	str	w1, [x19, #8256]
     ab0:	ldr	x19, [sp, #16]
     ab4:	ldrb	w0, [x0, #64]
     ab8:	ldp	x29, x30, [sp], #32
     abc:	ret
     ac0:	str	wzr, [x19, #8256]
     ac4:	add	x1, x19, #0x40
     ac8:	mov	x2, #0x2000                	// #8192
     acc:	bl	0 <grub_file_read>
     ad0:	ldr	w1, [x19, #8256]
     ad4:	b	aa4 <get_byte+0x64>

0000000000000ad8 <init_dynamic_block>:
     ad8:	sub	sp, sp, #0x570
     adc:	stp	x29, x30, [sp]
     ae0:	mov	x29, sp
     ae4:	stp	x19, x20, [sp, #16]
     ae8:	mov	x19, x0
     aec:	stp	x21, x22, [sp, #32]
     af0:	ldr	w22, [x0, #8272]
     af4:	stp	x27, x28, [sp, #80]
     af8:	cmp	w22, #0x4
     afc:	ldr	x20, [x0, #8264]
     b00:	b.hi	b18 <init_dynamic_block+0x40>  // b.pmore
     b04:	bl	a40 <get_byte>
     b08:	sxtw	x0, w0
     b0c:	lsl	x0, x0, x22
     b10:	add	w22, w22, #0x8
     b14:	orr	x20, x20, x0
     b18:	and	w27, w20, #0x1f
     b1c:	sub	w21, w22, #0x5
     b20:	add	w0, w27, #0x101
     b24:	str	w0, [sp, #96]
     b28:	lsr	x20, x20, #5
     b2c:	cmp	w21, #0x4
     b30:	b.hi	b4c <init_dynamic_block+0x74>  // b.pmore
     b34:	mov	x0, x19
     b38:	bl	a40 <get_byte>
     b3c:	sxtw	x0, w0
     b40:	lsl	x0, x0, x21
     b44:	add	w21, w22, #0x3
     b48:	orr	x20, x20, x0
     b4c:	and	w28, w20, #0x1f
     b50:	sub	w27, w21, #0x5
     b54:	add	w0, w28, #0x1
     b58:	str	w0, [sp, #108]
     b5c:	lsr	x20, x20, #5
     b60:	cmp	w27, #0x3
     b64:	b.hi	b80 <init_dynamic_block+0xa8>  // b.pmore
     b68:	mov	x0, x19
     b6c:	bl	a40 <get_byte>
     b70:	sxtw	x0, w0
     b74:	lsl	x0, x0, x27
     b78:	add	w27, w21, #0x3
     b7c:	orr	x20, x20, x0
     b80:	ldr	w0, [sp, #96]
     b84:	lsr	x28, x20, #4
     b88:	ldr	w1, [sp, #108]
     b8c:	sub	w27, w27, #0x4
     b90:	cmp	w0, #0x11e
     b94:	and	w0, w20, #0xf
     b98:	ccmp	w1, #0x1e, #0x2, ls  // ls = plast
     b9c:	add	w20, w0, #0x4
     ba0:	b.hi	f44 <init_dynamic_block+0x46c>  // b.pmore
     ba4:	adrp	x1, 0 <eat_field>
     ba8:	add	w0, w0, #0x3
     bac:	stp	x23, x24, [sp, #48]
     bb0:	add	x23, sp, #0x80
     bb4:	mov	w24, #0x10                  	// #16
     bb8:	ldr	x22, [x1]
     bbc:	stp	x25, x26, [sp, #64]
     bc0:	add	x21, x22, #0x4
     bc4:	add	x25, x21, w0, uxtw #2
     bc8:	b	bd0 <init_dynamic_block+0xf8>
     bcc:	ldr	w24, [x21], #4
     bd0:	mov	x0, x19
     bd4:	cmp	w27, #0x2
     bd8:	b.hi	bf0 <init_dynamic_block+0x118>  // b.pmore
     bdc:	bl	a40 <get_byte>
     be0:	sxtw	x0, w0
     be4:	lsl	x0, x0, x27
     be8:	add	w27, w27, #0x8
     bec:	orr	x28, x28, x0
     bf0:	and	w0, w28, #0x7
     bf4:	str	w0, [x23, w24, uxtw #2]
     bf8:	sub	w27, w27, #0x3
     bfc:	cmp	x25, x21
     c00:	lsr	x28, x28, #3
     c04:	b.ne	bcc <init_dynamic_block+0xf4>  // b.any
     c08:	cmp	w20, #0x13
     c0c:	b.eq	c24 <init_dynamic_block+0x14c>  // b.none
     c10:	ldr	w0, [x22, w20, uxtw #2]
     c14:	add	w20, w20, #0x1
     c18:	cmp	w20, #0x13
     c1c:	str	wzr, [x23, x0, lsl #2]
     c20:	b.ne	c10 <init_dynamic_block+0x138>  // b.any
     c24:	add	x20, x19, #0x8, lsl #12
     c28:	mov	w0, #0x7                   	// #7
     c2c:	mov	x3, #0xa058                	// #41048
     c30:	mov	x4, #0xa088                	// #41096
     c34:	add	x1, x19, x4
     c38:	add	x5, x19, x3
     c3c:	str	w0, [x20, #8328]
     c40:	mov	x6, x1
     c44:	mov	w2, #0x13                  	// #19
     c48:	mov	x0, x23
     c4c:	mov	x4, #0x0                   	// #0
     c50:	mov	x3, #0x0                   	// #0
     c54:	stp	x5, x1, [sp, #112]
     c58:	mov	w1, w2
     c5c:	bl	158 <huft_build>
     c60:	mov	w21, w0
     c64:	cbnz	w0, f14 <init_dynamic_block+0x43c>
     c68:	ldr	w0, [x20, #8328]
     c6c:	add	x1, x22, #0x50
     c70:	ldr	w2, [sp, #96]
     c74:	mov	w25, #0x0                   	// #0
     c78:	ldr	w3, [sp, #108]
     c7c:	mov	w22, #0x0                   	// #0
     c80:	ldrh	w26, [x1, w0, sxtw #1]
     c84:	add	w24, w2, w3
     c88:	cmp	w0, w27
     c8c:	b.ls	cb4 <init_dynamic_block+0x1dc>  // b.plast
     c90:	mov	x0, x19
     c94:	bl	a40 <get_byte>
     c98:	sxtw	x0, w0
     c9c:	ldr	w1, [x20, #8328]
     ca0:	lsl	x0, x0, x27
     ca4:	add	w27, w27, #0x8
     ca8:	orr	x28, x28, x0
     cac:	cmp	w1, w27
     cb0:	b.hi	c90 <init_dynamic_block+0x1b8>  // b.pmore
     cb4:	and	w1, w26, w28
     cb8:	ldr	x0, [x20, #8280]
     cbc:	ubfiz	x1, x1, #4, #16
     cc0:	add	x0, x0, x1
     cc4:	str	x0, [x20, #8288]
     cc8:	ldrb	w1, [x0, #1]
     ccc:	ldrh	w0, [x0, #8]
     cd0:	sub	w27, w27, w1
     cd4:	cmp	w0, #0xf
     cd8:	lsr	x28, x28, x1
     cdc:	b.hi	d00 <init_dynamic_block+0x228>  // b.pmore
     ce0:	mov	w25, w0
     ce4:	str	w0, [x23, w21, sxtw #2]
     ce8:	add	w21, w21, #0x1
     cec:	cmp	w21, w24
     cf0:	mov	w22, w21
     cf4:	b.cs	d80 <init_dynamic_block+0x2a8>  // b.hs, b.nlast
     cf8:	ldr	w0, [x20, #8328]
     cfc:	b	c88 <init_dynamic_block+0x1b0>
     d00:	cmp	w0, #0x10
     d04:	b.eq	eb0 <init_dynamic_block+0x3d8>  // b.none
     d08:	cmp	w0, #0x11
     d0c:	b.eq	e44 <init_dynamic_block+0x36c>  // b.none
     d10:	cmp	w27, #0x6
     d14:	b.hi	d30 <init_dynamic_block+0x258>  // b.pmore
     d18:	mov	x0, x19
     d1c:	bl	a40 <get_byte>
     d20:	sxtw	x0, w0
     d24:	lsl	x0, x0, x27
     d28:	add	w27, w27, #0x8
     d2c:	orr	x28, x28, x0
     d30:	and	w4, w28, #0x7f
     d34:	add	w0, w22, #0xb
     d38:	add	w0, w0, w4
     d3c:	sub	w27, w27, #0x7
     d40:	cmp	w0, w24
     d44:	lsr	x28, x28, #7
     d48:	b.hi	f6c <init_dynamic_block+0x494>  // b.pmore
     d4c:	add	w2, w4, #0xa
     d50:	add	x3, x23, w21, sxtw #2
     d54:	mov	x0, #0x0                   	// #0
     d58:	str	wzr, [x3, x0, lsl #2]
     d5c:	cmp	x2, x0
     d60:	add	x0, x0, #0x1
     d64:	b.ne	d58 <init_dynamic_block+0x280>  // b.any
     d68:	add	w21, w21, #0xb
     d6c:	mov	w25, #0x0                   	// #0
     d70:	add	w21, w21, w4
     d74:	cmp	w21, w24
     d78:	mov	w22, w21
     d7c:	b.cc	cf8 <init_dynamic_block+0x220>  // b.lo, b.ul, b.last
     d80:	ldr	x21, [x20, #8280]
     d84:	cbz	x21, d98 <init_dynamic_block+0x2c0>
     d88:	sub	x0, x21, #0x10
     d8c:	ldur	x21, [x21, #-8]
     d90:	bl	0 <grub_free>
     d94:	cbnz	x21, d88 <init_dynamic_block+0x2b0>
     d98:	adrp	x1, 0 <eat_field>
     d9c:	str	xzr, [x20, #8280]
     da0:	ldp	x5, x6, [sp, #112]
     da4:	str	xzr, [x20, #8288]
     da8:	ldr	x21, [x1]
     dac:	str	x28, [x19, #8264]
     db0:	ldr	w1, [sp, #96]
     db4:	mov	w0, #0x9                   	// #9
     db8:	str	w27, [x19, #8272]
     dbc:	mov	x4, x21
     dc0:	str	w0, [x20, #8328]
     dc4:	add	x3, x21, #0x40
     dc8:	mov	x0, x23
     dcc:	mov	w2, #0x101                 	// #257
     dd0:	bl	158 <huft_build>
     dd4:	cbnz	w0, f14 <init_dynamic_block+0x43c>
     dd8:	mov	w0, #0x6                   	// #6
     ddc:	mov	x1, #0xa08c                	// #41100
     de0:	str	w0, [x20, #8332]
     de4:	add	x6, x19, x1
     de8:	ldr	x0, [sp, #96]
     dec:	mov	x2, #0xa060                	// #41056
     df0:	ldr	w1, [sp, #108]
     df4:	add	x5, x19, x2
     df8:	add	x4, x21, #0x80
     dfc:	add	x3, x21, #0xc0
     e00:	ubfiz	x0, x0, #2, #10
     e04:	mov	w2, #0x0                   	// #0
     e08:	add	x0, x23, x0
     e0c:	bl	158 <huft_build>
     e10:	cbnz	w0, f9c <init_dynamic_block+0x4c4>
     e14:	ldr	w0, [x19, #44]
     e18:	ldp	x23, x24, [sp, #48]
     e1c:	add	w0, w0, #0x1
     e20:	ldp	x25, x26, [sp, #64]
     e24:	str	w0, [x19, #44]
     e28:	str	wzr, [x19, #52]
     e2c:	ldp	x29, x30, [sp]
     e30:	ldp	x19, x20, [sp, #16]
     e34:	ldp	x21, x22, [sp, #32]
     e38:	ldp	x27, x28, [sp, #80]
     e3c:	add	sp, sp, #0x570
     e40:	ret
     e44:	cmp	w27, #0x2
     e48:	b.hi	e64 <init_dynamic_block+0x38c>  // b.pmore
     e4c:	mov	x0, x19
     e50:	bl	a40 <get_byte>
     e54:	sxtw	x0, w0
     e58:	lsl	x0, x0, x27
     e5c:	add	w27, w27, #0x8
     e60:	orr	x28, x28, x0
     e64:	and	w4, w28, #0x7
     e68:	add	w0, w22, #0x3
     e6c:	add	w0, w0, w4
     e70:	sub	w27, w27, #0x3
     e74:	cmp	w0, w24
     e78:	lsr	x28, x28, #3
     e7c:	b.hi	f6c <init_dynamic_block+0x494>  // b.pmore
     e80:	add	w2, w4, #0x2
     e84:	add	x3, x23, w21, sxtw #2
     e88:	mov	x0, #0x0                   	// #0
     e8c:	nop
     e90:	str	wzr, [x3, x0, lsl #2]
     e94:	cmp	x2, x0
     e98:	add	x0, x0, #0x1
     e9c:	b.ne	e90 <init_dynamic_block+0x3b8>  // b.any
     ea0:	add	w21, w21, #0x3
     ea4:	mov	w25, #0x0                   	// #0
     ea8:	add	w21, w21, w4
     eac:	b	cec <init_dynamic_block+0x214>
     eb0:	cmp	w27, #0x1
     eb4:	b.hi	ed0 <init_dynamic_block+0x3f8>  // b.pmore
     eb8:	mov	x0, x19
     ebc:	bl	a40 <get_byte>
     ec0:	sxtw	x0, w0
     ec4:	lsl	x0, x0, x27
     ec8:	add	w27, w27, #0x8
     ecc:	orr	x28, x28, x0
     ed0:	and	w2, w28, #0x3
     ed4:	add	w0, w22, #0x3
     ed8:	add	w0, w0, w2
     edc:	sub	w27, w27, #0x2
     ee0:	cmp	w0, w24
     ee4:	lsr	x28, x28, #2
     ee8:	b.hi	f6c <init_dynamic_block+0x494>  // b.pmore
     eec:	add	w0, w2, #0x2
     ef0:	add	x1, x23, w21, sxtw #2
     ef4:	nop
     ef8:	str	w25, [x1], #4
     efc:	sub	w0, w0, #0x1
     f00:	cmn	w0, #0x1
     f04:	b.ne	ef8 <init_dynamic_block+0x420>  // b.any
     f08:	add	w21, w21, #0x3
     f0c:	add	w21, w21, w2
     f10:	b	cec <init_dynamic_block+0x214>
     f14:	adrp	x1, 0 <eat_field>
     f18:	ldr	x1, [x1]
     f1c:	mov	w0, #0x1a                  	// #26
     f20:	bl	0 <grub_error>
     f24:	ldp	x29, x30, [sp]
     f28:	ldp	x19, x20, [sp, #16]
     f2c:	ldp	x21, x22, [sp, #32]
     f30:	ldp	x23, x24, [sp, #48]
     f34:	ldp	x25, x26, [sp, #64]
     f38:	ldp	x27, x28, [sp, #80]
     f3c:	add	sp, sp, #0x570
     f40:	ret
     f44:	adrp	x1, 0 <eat_field>
     f48:	mov	w0, #0x1a                  	// #26
     f4c:	ldr	x1, [x1]
     f50:	bl	0 <grub_error>
     f54:	ldp	x29, x30, [sp]
     f58:	ldp	x19, x20, [sp, #16]
     f5c:	ldp	x21, x22, [sp, #32]
     f60:	ldp	x27, x28, [sp, #80]
     f64:	add	sp, sp, #0x570
     f68:	ret
     f6c:	adrp	x1, 0 <eat_field>
     f70:	mov	w0, #0x1a                  	// #26
     f74:	ldr	x1, [x1]
     f78:	bl	0 <grub_error>
     f7c:	ldp	x29, x30, [sp]
     f80:	ldp	x19, x20, [sp, #16]
     f84:	ldp	x21, x22, [sp, #32]
     f88:	ldp	x23, x24, [sp, #48]
     f8c:	ldp	x25, x26, [sp, #64]
     f90:	ldp	x27, x28, [sp, #80]
     f94:	add	sp, sp, #0x570
     f98:	ret
     f9c:	ldr	x19, [x20, #8280]
     fa0:	cbz	x19, fb4 <init_dynamic_block+0x4dc>
     fa4:	sub	x0, x19, #0x10
     fa8:	ldur	x19, [x19, #-8]
     fac:	bl	0 <grub_free>
     fb0:	cbnz	x19, fa4 <init_dynamic_block+0x4cc>
     fb4:	adrp	x1, 0 <eat_field>
     fb8:	str	xzr, [x20, #8280]
     fbc:	b	f18 <init_dynamic_block+0x440>
	...

0000000000000fe8 <grub_gzio_read_real>:
     fe8:	stp	x29, x30, [sp, #-176]!
     fec:	mov	x29, sp
     ff0:	stp	x19, x20, [sp, #16]
     ff4:	add	x19, x0, #0x8, lsl #12
     ff8:	stp	x3, x2, [sp, #160]
     ffc:	ldr	x2, [x19, #8336]
    1000:	stp	x21, x22, [sp, #32]
    1004:	stp	x27, x28, [sp, #80]
    1008:	mov	x28, x0
    100c:	str	x1, [sp, #144]
    1010:	add	x1, x1, #0x8, lsl #12
    1014:	cmp	x2, x1
    1018:	b.hi	182c <grub_gzio_read_real+0x844>  // b.pmore
    101c:	ldr	x0, [sp, #160]
    1020:	cbz	x0, 1848 <grub_gzio_read_real+0x860>
    1024:	adrp	x0, 0 <eat_field>
    1028:	mov	x1, #0x2054                	// #8276
    102c:	add	x1, x28, x1
    1030:	stp	x23, x24, [sp, #48]
    1034:	ldr	x22, [x0]
    1038:	stp	x25, x26, [sp, #64]
    103c:	str	x1, [sp, #136]
    1040:	str	xzr, [sp, #152]
    1044:	ldr	w0, [x22]
    1048:	cbnz	w0, 1834 <grub_gzio_read_real+0x84c>
    104c:	nop
    1050:	ldr	x1, [sp, #144]
    1054:	ldr	x0, [x19, #8336]
    1058:	cmp	x0, x1
    105c:	b.hi	17d0 <grub_gzio_read_real+0x7e8>  // b.pmore
    1060:	mov	x2, #0x2053                	// #8275
    1064:	mov	w25, #0x0                   	// #0
    1068:	add	x0, x28, x2
    106c:	str	x0, [sp, #128]
    1070:	str	wzr, [x19, #8276]
    1074:	nop
    1078:	ldr	w0, [x22]
    107c:	cbnz	w0, 11f4 <grub_gzio_read_real+0x20c>
    1080:	ldr	w0, [x28, #44]
    1084:	cbnz	w0, 15f4 <grub_gzio_read_real+0x60c>
    1088:	ldr	w0, [x28, #48]
    108c:	cbnz	w0, 11f4 <grub_gzio_read_real+0x20c>
    1090:	ldr	w21, [x28, #8272]
    1094:	ldr	x20, [x28, #8264]
    1098:	cbnz	w21, 16ec <grub_gzio_read_real+0x704>
    109c:	mov	x0, x28
    10a0:	bl	a40 <get_byte>
    10a4:	sxtw	x0, w0
    10a8:	mov	w21, #0x5                   	// #5
    10ac:	orr	x20, x0, x20
    10b0:	and	w0, w20, #0x1
    10b4:	str	w0, [x28, #48]
    10b8:	lsr	x20, x20, #1
    10bc:	and	w2, w20, #0x3
    10c0:	lsr	x20, x20, #2
    10c4:	str	w2, [x28, #40]
    10c8:	cmp	w2, #0x1
    10cc:	str	x20, [x28, #8264]
    10d0:	str	w21, [x28, #8272]
    10d4:	b.eq	1738 <grub_gzio_read_real+0x750>  // b.none
    10d8:	cmp	w2, #0x2
    10dc:	b.eq	1748 <grub_gzio_read_real+0x760>  // b.none
    10e0:	cbz	w2, 1614 <grub_gzio_read_real+0x62c>
    10e4:	cmp	w2, #0x2
    10e8:	b.gt	1600 <grub_gzio_read_real+0x618>
    10ec:	ldr	w0, [x22]
    10f0:	cbnz	w0, 122c <grub_gzio_read_real+0x244>
    10f4:	ldr	w2, [x28, #40]
    10f8:	ldr	w25, [x19, #8276]
    10fc:	cbz	w2, 13e4 <grub_gzio_read_real+0x3fc>
    1100:	adrp	x0, 0 <eat_field>
    1104:	ldrsw	x5, [x19, #8328]
    1108:	ldrsw	x2, [x19, #8332]
    110c:	ldr	x21, [x0]
    1110:	ldr	w24, [x28, #60]
    1114:	add	x1, x21, #0x50
    1118:	ldr	w27, [x28, #8272]
    111c:	ldp	w0, w23, [x28, #52]
    1120:	ldr	x26, [x28, #8264]
    1124:	ldrh	w3, [x1, x5, lsl #1]
    1128:	ldrh	w1, [x1, x2, lsl #1]
    112c:	stp	w3, w1, [sp, #104]
    1130:	cbnz	w0, 1160 <grub_gzio_read_real+0x178>
    1134:	b	12bc <grub_gzio_read_real+0x2d4>
    1138:	ldr	x0, [sp, #136]
    113c:	mov	w2, w5
    1140:	add	w24, w9, w5
    1144:	add	x1, x0, w9, uxtw
    1148:	add	x0, x0, w25, uxtw
    114c:	add	w25, w25, w5
    1150:	bl	0 <grub_memmove>
    1154:	cmp	w25, #0x8, lsl #12
    1158:	b.eq	11d0 <grub_gzio_read_real+0x1e8>  // b.none
    115c:	cbz	w23, 15e4 <grub_gzio_read_real+0x5fc>
    1160:	and	w9, w24, #0x7fff
    1164:	mov	w0, #0x8000                	// #32768
    1168:	cmp	w9, w25
    116c:	sub	w5, w0, w25
    1170:	sub	w0, w0, w9
    1174:	sub	w2, w25, w9
    1178:	csel	w5, w5, w0, ls  // ls = plast
    117c:	cmp	w23, w5
    1180:	csel	w5, w23, w5, ls  // ls = plast
    1184:	sub	w23, w23, w5
    1188:	add	w24, w9, w5
    118c:	cmp	w5, w2
    1190:	b.ls	1138 <grub_gzio_read_real+0x150>  // b.plast
    1194:	nop
    1198:	mov	w1, w9
    119c:	add	w0, w2, w9
    11a0:	add	w9, w9, #0x1
    11a4:	add	x1, x28, w1, uxtw
    11a8:	add	x0, x28, w0, uxtw
    11ac:	add	x1, x1, #0x2, lsl #12
    11b0:	add	x0, x0, #0x2, lsl #12
    11b4:	cmp	w9, w24
    11b8:	ldrb	w1, [x1, #84]
    11bc:	strb	w1, [x0, #84]
    11c0:	b.ne	1198 <grub_gzio_read_real+0x1b0>  // b.any
    11c4:	add	w25, w25, w5
    11c8:	cmp	w25, #0x8, lsl #12
    11cc:	b.ne	115c <grub_gzio_read_real+0x174>  // b.any
    11d0:	ldr	w0, [x28, #44]
    11d4:	cbz	w23, 1758 <grub_gzio_read_real+0x770>
    11d8:	stp	w23, w24, [x28, #56]
    11dc:	mov	w3, #0x8000                	// #32768
    11e0:	str	w3, [x19, #8276]
    11e4:	str	x26, [x28, #8264]
    11e8:	str	w27, [x28, #8272]
    11ec:	cbz	w0, 1398 <grub_gzio_read_real+0x3b0>
    11f0:	mov	w25, w3
    11f4:	ldr	x1, [x19, #8336]
    11f8:	mov	w2, w25
    11fc:	ldr	x0, [x19, #8320]
    1200:	add	x1, x1, x2
    1204:	str	x1, [x19, #8336]
    1208:	cbz	x0, 122c <grub_gzio_read_real+0x244>
    120c:	ldr	x3, [x19, #8296]
    1210:	ldr	x1, [sp, #136]
    1214:	ldr	x3, [x3, #48]
    1218:	blr	x3
    121c:	ldr	x0, [x19, #8312]
    1220:	ldr	x1, [x19, #8336]
    1224:	cmp	x1, x0
    1228:	b.eq	1788 <grub_gzio_read_real+0x7a0>  // b.none
    122c:	ldr	w0, [x19, #8276]
    1230:	cbnz	w0, 1050 <grub_gzio_read_real+0x68>
    1234:	ldp	x23, x24, [sp, #48]
    1238:	ldp	x25, x26, [sp, #64]
    123c:	ldr	w0, [x22]
    1240:	cbnz	w0, 183c <grub_gzio_read_real+0x854>
    1244:	ldp	x19, x20, [sp, #16]
    1248:	ldp	x21, x22, [sp, #32]
    124c:	ldp	x27, x28, [sp, #80]
    1250:	ldr	x0, [sp, #152]
    1254:	ldp	x29, x30, [sp], #176
    1258:	ret
    125c:	ldr	w0, [sp, #104]
    1260:	ldr	x2, [x19, #8280]
    1264:	and	w0, w0, w26
    1268:	ubfiz	x0, x0, #4, #16
    126c:	add	x1, x2, x0
    1270:	ldrb	w20, [x2, x0]
    1274:	cmp	w20, #0x10
    1278:	b.hi	130c <grub_gzio_read_real+0x324>  // b.pmore
    127c:	nop
    1280:	ldrb	w0, [x1, #1]
    1284:	cmp	w20, #0x10
    1288:	sub	w27, w27, w0
    128c:	lsr	x26, x26, x0
    1290:	b.ne	1444 <grub_gzio_read_real+0x45c>  // b.any
    1294:	add	x0, x28, w25, uxtw
    1298:	ldrh	w1, [x1, #8]
    129c:	add	x0, x0, #0x2, lsl #12
    12a0:	add	w3, w25, #0x1
    12a4:	cmp	w3, #0x8, lsl #12
    12a8:	strb	w1, [x0, #84]
    12ac:	b.eq	1768 <grub_gzio_read_real+0x780>  // b.none
    12b0:	ldr	w0, [x28, #52]
    12b4:	mov	w25, w3
    12b8:	cbnz	w0, 1160 <grub_gzio_read_real+0x178>
    12bc:	ldr	w0, [x19, #8328]
    12c0:	cmp	w27, w0
    12c4:	b.cs	125c <grub_gzio_read_real+0x274>  // b.hs, b.nlast
    12c8:	mov	x0, x28
    12cc:	bl	a40 <get_byte>
    12d0:	sxtw	x0, w0
    12d4:	ldr	w1, [x19, #8328]
    12d8:	lsl	x0, x0, x27
    12dc:	add	w27, w27, #0x8
    12e0:	orr	x26, x26, x0
    12e4:	cmp	w27, w1
    12e8:	b.cc	12c8 <grub_gzio_read_real+0x2e0>  // b.lo, b.ul, b.last
    12ec:	ldr	w0, [sp, #104]
    12f0:	ldr	x2, [x19, #8280]
    12f4:	and	w0, w0, w26
    12f8:	ubfiz	x0, x0, #4, #16
    12fc:	add	x1, x2, x0
    1300:	ldrb	w20, [x2, x0]
    1304:	cmp	w20, #0x10
    1308:	b.ls	1280 <grub_gzio_read_real+0x298>  // b.plast
    130c:	add	x2, x21, #0x50
    1310:	cmp	w20, #0x63
    1314:	b.eq	1388 <grub_gzio_read_real+0x3a0>  // b.none
    1318:	ldrb	w0, [x1, #1]
    131c:	sub	w20, w20, #0x10
    1320:	sub	w27, w27, w0
    1324:	cmp	w27, w20
    1328:	lsr	x26, x26, x0
    132c:	b.cs	1360 <grub_gzio_read_real+0x378>  // b.hs, b.nlast
    1330:	mov	x0, x28
    1334:	str	x1, [sp, #112]
    1338:	bl	a40 <get_byte>
    133c:	sxtw	x0, w0
    1340:	ldr	x1, [sp, #112]
    1344:	lsl	x0, x0, x27
    1348:	orr	x26, x26, x0
    134c:	adrp	x0, 0 <eat_field>
    1350:	add	w27, w27, #0x8
    1354:	ldr	x2, [x0]
    1358:	cmp	w20, w27
    135c:	b.hi	1330 <grub_gzio_read_real+0x348>  // b.pmore
    1360:	ldrh	w0, [x2, w20, uxtw #1]
    1364:	ldr	x5, [x1, #8]
    1368:	and	w0, w0, w26
    136c:	ubfiz	x0, x0, #4, #16
    1370:	add	x1, x5, x0
    1374:	ldrb	w20, [x5, x0]
    1378:	cmp	w20, #0x10
    137c:	b.ls	1280 <grub_gzio_read_real+0x298>  // b.plast
    1380:	cmp	w20, #0x63
    1384:	b.ne	1318 <grub_gzio_read_real+0x330>  // b.any
    1388:	adrp	x1, 0 <eat_field>
    138c:	mov	w0, #0x1a                  	// #26
    1390:	ldr	x1, [x1]
    1394:	bl	0 <grub_error>
    1398:	ldr	x20, [x19, #8280]
    139c:	cbz	x20, 13b0 <grub_gzio_read_real+0x3c8>
    13a0:	sub	x0, x20, #0x10
    13a4:	ldur	x20, [x20, #-8]
    13a8:	bl	0 <grub_free>
    13ac:	cbnz	x20, 13a0 <grub_gzio_read_real+0x3b8>
    13b0:	ldr	x20, [x19, #8288]
    13b4:	cbz	x20, 13c8 <grub_gzio_read_real+0x3e0>
    13b8:	sub	x0, x20, #0x10
    13bc:	ldur	x20, [x20, #-8]
    13c0:	bl	0 <grub_free>
    13c4:	cbnz	x20, 13b8 <grub_gzio_read_real+0x3d0>
    13c8:	ldr	w25, [x19, #8276]
    13cc:	str	xzr, [x19, #8280]
    13d0:	str	xzr, [x19, #8288]
    13d4:	mov	w0, #0x7fff                	// #32767
    13d8:	cmp	w25, w0
    13dc:	b.ls	1078 <grub_gzio_read_real+0x90>  // b.plast
    13e0:	b	11f4 <grub_gzio_read_real+0x20c>
    13e4:	ldr	w1, [x28, #44]
    13e8:	mov	w0, #0x7fff                	// #32767
    13ec:	cmp	w1, #0x0
    13f0:	ccmp	w25, w0, #0x0, ne  // ne = any
    13f4:	b.gt	143c <grub_gzio_read_real+0x454>
    13f8:	add	w3, w25, #0x1
    13fc:	mov	w21, w0
    1400:	sxtw	x25, w3
    1404:	b	1414 <grub_gzio_read_real+0x42c>
    1408:	ldr	w0, [x22]
    140c:	cbnz	w0, 143c <grub_gzio_read_real+0x454>
    1410:	mov	x25, x1
    1414:	mov	x0, x28
    1418:	bl	a40 <get_byte>
    141c:	ldr	x1, [sp, #128]
    1420:	strb	w0, [x1, x25]
    1424:	add	x1, x25, #0x1
    1428:	ldr	w0, [x28, #44]
    142c:	subs	w0, w0, #0x1
    1430:	str	w0, [x28, #44]
    1434:	ccmp	w25, w21, #0x0, ne  // ne = any
    1438:	b.le	1408 <grub_gzio_read_real+0x420>
    143c:	str	w25, [x19, #8276]
    1440:	b	13d4 <grub_gzio_read_real+0x3ec>
    1444:	cmp	w20, #0xf
    1448:	b.eq	1770 <grub_gzio_read_real+0x788>  // b.none
    144c:	cmp	w27, w20
    1450:	b.cs	1480 <grub_gzio_read_real+0x498>  // b.hs, b.nlast
    1454:	nop
    1458:	mov	x0, x28
    145c:	str	x1, [sp, #112]
    1460:	bl	a40 <get_byte>
    1464:	sxtw	x0, w0
    1468:	ldr	x1, [sp, #112]
    146c:	lsl	x0, x0, x27
    1470:	add	w27, w27, #0x8
    1474:	orr	x26, x26, x0
    1478:	cmp	w20, w27
    147c:	b.hi	1458 <grub_gzio_read_real+0x470>  // b.pmore
    1480:	ldrh	w1, [x1, #8]
    1484:	add	x0, x21, #0x50
    1488:	mov	w2, w20
    148c:	ldr	w7, [x19, #8332]
    1490:	str	w1, [sp, #112]
    1494:	sub	w23, w27, w20
    1498:	lsr	x24, x26, x20
    149c:	cmp	w7, w23
    14a0:	ldrh	w20, [x0, x2, lsl #1]
    14a4:	b.ls	14cc <grub_gzio_read_real+0x4e4>  // b.plast
    14a8:	mov	x0, x28
    14ac:	bl	a40 <get_byte>
    14b0:	sxtw	x0, w0
    14b4:	ldr	w2, [x19, #8332]
    14b8:	lsl	x0, x0, x23
    14bc:	add	w23, w23, #0x8
    14c0:	orr	x24, x24, x0
    14c4:	cmp	w23, w2
    14c8:	b.cc	14a8 <grub_gzio_read_real+0x4c0>  // b.lo, b.ul, b.last
    14cc:	ldr	w0, [sp, #108]
    14d0:	ldr	x2, [x19, #8288]
    14d4:	and	w0, w0, w24
    14d8:	ubfiz	x0, x0, #4, #16
    14dc:	add	x27, x2, x0
    14e0:	ldrb	w2, [x2, x0]
    14e4:	cmp	w2, #0x10
    14e8:	b.ls	1560 <grub_gzio_read_real+0x578>  // b.plast
    14ec:	add	x8, x21, #0x50
    14f0:	cmp	w2, #0x63
    14f4:	b.eq	1388 <grub_gzio_read_real+0x3a0>  // b.none
    14f8:	ldrb	w0, [x27, #1]
    14fc:	sub	w2, w2, #0x10
    1500:	sub	w23, w23, w0
    1504:	cmp	w23, w2
    1508:	lsr	x24, x24, x0
    150c:	b.cs	1540 <grub_gzio_read_real+0x558>  // b.hs, b.nlast
    1510:	mov	x0, x28
    1514:	str	w2, [sp, #120]
    1518:	bl	a40 <get_byte>
    151c:	sxtw	x0, w0
    1520:	ldr	w2, [sp, #120]
    1524:	lsl	x0, x0, x23
    1528:	orr	x24, x24, x0
    152c:	adrp	x0, 0 <eat_field>
    1530:	add	w23, w23, #0x8
    1534:	cmp	w2, w23
    1538:	ldr	x8, [x0]
    153c:	b.hi	1510 <grub_gzio_read_real+0x528>  // b.pmore
    1540:	ldrh	w0, [x8, w2, uxtw #1]
    1544:	ldr	x2, [x27, #8]
    1548:	and	w0, w0, w24
    154c:	ubfiz	x0, x0, #4, #16
    1550:	add	x27, x2, x0
    1554:	ldrb	w2, [x2, x0]
    1558:	cmp	w2, #0x10
    155c:	b.hi	14f0 <grub_gzio_read_real+0x508>  // b.pmore
    1560:	ldrb	w0, [x27, #1]
    1564:	sub	w5, w23, w0
    1568:	cmp	w5, w2
    156c:	lsr	x24, x24, x0
    1570:	b.cs	15a0 <grub_gzio_read_real+0x5b8>  // b.hs, b.nlast
    1574:	nop
    1578:	mov	x0, x28
    157c:	stp	w2, w5, [sp, #120]
    1580:	bl	a40 <get_byte>
    1584:	sxtw	x0, w0
    1588:	ldp	w2, w5, [sp, #120]
    158c:	lsl	x0, x0, x5
    1590:	add	w5, w5, #0x8
    1594:	orr	x24, x24, x0
    1598:	cmp	w5, w2
    159c:	b.cc	1578 <grub_gzio_read_real+0x590>  // b.lo, b.ul, b.last
    15a0:	add	x9, x21, #0x50
    15a4:	mov	w10, w2
    15a8:	ldr	w1, [sp, #112]
    15ac:	and	w20, w20, w26
    15b0:	ldr	w0, [x28, #52]
    15b4:	lsr	x26, x24, x2
    15b8:	ldrh	w8, [x27, #8]
    15bc:	add	w23, w20, w1
    15c0:	ldrh	w20, [x9, x10, lsl #1]
    15c4:	add	w0, w0, #0x1
    15c8:	str	w0, [x28, #52]
    15cc:	sub	w8, w25, w8
    15d0:	and	w1, w20, w24
    15d4:	sub	w27, w5, w2
    15d8:	sub	w24, w8, w1
    15dc:	cbz	w0, 12bc <grub_gzio_read_real+0x2d4>
    15e0:	b	1160 <grub_gzio_read_real+0x178>
    15e4:	ldr	w0, [x28, #52]
    15e8:	sub	w0, w0, #0x1
    15ec:	str	w0, [x28, #52]
    15f0:	b	1130 <grub_gzio_read_real+0x148>
    15f4:	ldr	w2, [x28, #40]
    15f8:	cmp	w2, #0x2
    15fc:	b.le	10f8 <grub_gzio_read_real+0x110>
    1600:	adrp	x1, 0 <eat_field>
    1604:	mov	w0, #0x1a                  	// #26
    1608:	ldr	x1, [x1]
    160c:	bl	0 <grub_error>
    1610:	b	10ec <grub_gzio_read_real+0x104>
    1614:	and	w0, w21, #0x7
    1618:	and	w21, w21, #0xfffffff8
    161c:	cmp	w21, #0xf
    1620:	lsr	x20, x20, x0
    1624:	b.hi	1664 <grub_gzio_read_real+0x67c>  // b.pmore
    1628:	mov	w23, w21
    162c:	nop
    1630:	mov	x0, x28
    1634:	bl	a40 <get_byte>
    1638:	sxtw	x0, w0
    163c:	lsl	x0, x0, x23
    1640:	add	w23, w23, #0x8
    1644:	orr	x20, x20, x0
    1648:	cmp	w23, #0xf
    164c:	b.ls	1630 <grub_gzio_read_real+0x648>  // b.plast
    1650:	mov	w0, #0xf                   	// #15
    1654:	sub	w0, w0, w21
    1658:	and	w0, w0, #0xfffffff8
    165c:	add	w21, w21, #0x8
    1660:	add	w21, w21, w0
    1664:	and	w0, w20, #0xffff
    1668:	str	w0, [x28, #44]
    166c:	sub	w23, w21, #0x10
    1670:	lsr	x20, x20, #16
    1674:	cmp	w23, #0xf
    1678:	b.hi	16b8 <grub_gzio_read_real+0x6d0>  // b.pmore
    167c:	nop
    1680:	mov	x0, x28
    1684:	bl	a40 <get_byte>
    1688:	sxtw	x0, w0
    168c:	lsl	x0, x0, x23
    1690:	add	w23, w23, #0x8
    1694:	orr	x20, x20, x0
    1698:	cmp	w23, #0xf
    169c:	b.ls	1680 <grub_gzio_read_real+0x698>  // b.plast
    16a0:	mov	w23, #0x1f                  	// #31
    16a4:	sub	w23, w23, w21
    16a8:	and	w23, w23, #0xfffffff8
    16ac:	sub	w21, w21, #0x8
    16b0:	ldr	w0, [x28, #44]
    16b4:	add	w23, w21, w23
    16b8:	mvn	w1, w20
    16bc:	cmp	w0, w1, uxth
    16c0:	b.eq	16d4 <grub_gzio_read_real+0x6ec>  // b.none
    16c4:	adrp	x1, 0 <eat_field>
    16c8:	mov	w0, #0x1a                  	// #26
    16cc:	ldr	x1, [x1]
    16d0:	bl	0 <grub_error>
    16d4:	lsr	x20, x20, #16
    16d8:	sub	w23, w23, #0x10
    16dc:	ldr	w2, [x28, #40]
    16e0:	str	x20, [x28, #8264]
    16e4:	str	w23, [x28, #8272]
    16e8:	b	10e4 <grub_gzio_read_real+0xfc>
    16ec:	and	w0, w20, #0x1
    16f0:	str	w0, [x28, #48]
    16f4:	sub	w23, w21, #0x1
    16f8:	lsr	x20, x20, #1
    16fc:	cmp	w23, #0x1
    1700:	b.hi	1858 <grub_gzio_read_real+0x870>  // b.pmore
    1704:	mov	x0, x28
    1708:	bl	a40 <get_byte>
    170c:	sxtw	x0, w0
    1710:	add	w21, w21, #0x5
    1714:	str	w21, [x28, #8272]
    1718:	lsl	x0, x0, x23
    171c:	orr	x20, x20, x0
    1720:	and	w2, w20, #0x3
    1724:	str	w2, [x28, #40]
    1728:	lsr	x20, x20, #2
    172c:	str	x20, [x28, #8264]
    1730:	cmp	w2, #0x1
    1734:	b.ne	10d8 <grub_gzio_read_real+0xf0>  // b.any
    1738:	mov	x0, x28
    173c:	bl	7e0 <init_fixed_block>
    1740:	ldr	w2, [x28, #40]
    1744:	b	10e4 <grub_gzio_read_real+0xfc>
    1748:	mov	x0, x28
    174c:	bl	ad8 <init_dynamic_block>
    1750:	ldr	w2, [x28, #40]
    1754:	b	10e4 <grub_gzio_read_real+0xfc>
    1758:	ldr	w1, [x28, #52]
    175c:	sub	w1, w1, #0x1
    1760:	str	w1, [x28, #52]
    1764:	b	11d8 <grub_gzio_read_real+0x1f0>
    1768:	ldr	w0, [x28, #44]
    176c:	b	11d8 <grub_gzio_read_real+0x1f0>
    1770:	str	wzr, [x28, #44]
    1774:	stp	w23, w24, [x28, #56]
    1778:	str	w25, [x19, #8276]
    177c:	str	x26, [x28, #8264]
    1780:	str	w27, [x28, #8272]
    1784:	b	1398 <grub_gzio_read_real+0x3b0>
    1788:	ldr	x1, [x19, #8296]
    178c:	ldr	x0, [x19, #8320]
    1790:	ldr	x1, [x1, #56]
    1794:	blr	x1
    1798:	ldr	x1, [x19, #8296]
    179c:	ldr	x0, [x19, #8320]
    17a0:	ldr	x1, [x1, #64]
    17a4:	blr	x1
    17a8:	ldr	w3, [x0]
    17ac:	ldr	w2, [x19, #8304]
    17b0:	rev	w3, w3
    17b4:	cmp	w3, w2
    17b8:	b.eq	122c <grub_gzio_read_real+0x244>  // b.none
    17bc:	adrp	x1, 0 <eat_field>
    17c0:	mov	w0, #0x1a                  	// #26
    17c4:	ldr	x1, [x1]
    17c8:	bl	0 <grub_error>
    17cc:	b	122c <grub_gzio_read_real+0x244>
    17d0:	ldr	w1, [x19, #8276]
    17d4:	cbz	w1, 1234 <grub_gzio_read_real+0x24c>
    17d8:	ldp	x2, x21, [sp, #136]
    17dc:	ldp	x3, x23, [sp, #152]
    17e0:	ldr	x24, [sp, #168]
    17e4:	sub	x0, x0, x21
    17e8:	and	x1, x21, #0x7fff
    17ec:	add	x1, x2, x1
    17f0:	cmp	x0, x23
    17f4:	csel	x20, x0, x23, ls  // ls = plast
    17f8:	mov	x0, x24
    17fc:	add	x3, x3, x20
    1800:	mov	x2, x20
    1804:	str	x3, [sp, #152]
    1808:	bl	0 <grub_memmove>
    180c:	add	x0, x21, x20
    1810:	str	x0, [sp, #144]
    1814:	add	x0, x24, x20
    1818:	str	x0, [sp, #168]
    181c:	subs	x0, x23, x20
    1820:	str	x0, [sp, #160]
    1824:	b.ne	1044 <grub_gzio_read_real+0x5c>  // b.any
    1828:	b	1234 <grub_gzio_read_real+0x24c>
    182c:	bl	78 <initialize_tables>
    1830:	b	101c <grub_gzio_read_real+0x34>
    1834:	ldp	x23, x24, [sp, #48]
    1838:	ldp	x25, x26, [sp, #64]
    183c:	mov	x0, #0xffffffffffffffff    	// #-1
    1840:	str	x0, [sp, #152]
    1844:	b	1244 <grub_gzio_read_real+0x25c>
    1848:	adrp	x0, 0 <eat_field>
    184c:	str	xzr, [sp, #152]
    1850:	ldr	x22, [x0]
    1854:	b	123c <grub_gzio_read_real+0x254>
    1858:	sub	w21, w21, #0x3
    185c:	b	10bc <grub_gzio_read_real+0xd4>
	...

0000000000001898 <grub_gzio_read>:
    1898:	stp	x29, x30, [sp, #-32]!
    189c:	mov	x29, sp
    18a0:	str	x19, [sp, #16]
    18a4:	mov	x19, x2
    18a8:	mov	x2, x1
    18ac:	mov	x3, x19
    18b0:	ldr	x1, [x0, #24]
    18b4:	ldr	x0, [x0, #80]
    18b8:	bl	fe8 <grub_gzio_read_real>
    18bc:	adrp	x1, 0 <eat_field>
    18c0:	ldr	x1, [x1]
    18c4:	ldr	w1, [x1]
    18c8:	cbnz	w1, 18d4 <grub_gzio_read+0x3c>
    18cc:	cmp	x19, x0
    18d0:	b.ne	18e0 <grub_gzio_read+0x48>  // b.any
    18d4:	ldr	x19, [sp, #16]
    18d8:	ldp	x29, x30, [sp], #32
    18dc:	ret
    18e0:	adrp	x1, 0 <eat_field>
    18e4:	mov	w0, #0x1a                  	// #26
    18e8:	ldr	x1, [x1]
    18ec:	bl	0 <grub_error>
    18f0:	mov	x0, #0xffffffffffffffff    	// #-1
    18f4:	b	18d4 <grub_gzio_read+0x3c>
	...

0000000000001908 <grub_gzio_open>:
    1908:	stp	x29, x30, [sp, #-80]!
    190c:	mov	x29, sp
    1910:	stp	x19, x20, [sp, #16]
    1914:	mov	x19, x0
    1918:	tbz	w1, #17, 192c <grub_gzio_open+0x24>
    191c:	mov	x0, x19
    1920:	ldp	x19, x20, [sp, #16]
    1924:	ldp	x29, x30, [sp], #80
    1928:	ret
    192c:	mov	x0, #0x68                  	// #104
    1930:	bl	0 <grub_zalloc>
    1934:	mov	x20, x0
    1938:	cbz	x0, 1ac8 <grub_gzio_open+0x1c0>
    193c:	mov	x0, #0xa098                	// #41112
    1940:	stp	x21, x22, [sp, #32]
    1944:	bl	0 <grub_zalloc>
    1948:	mov	x21, x0
    194c:	cbz	x0, 1b18 <grub_gzio_open+0x210>
    1950:	adrp	x0, 0 <eat_field>
    1954:	add	x22, x21, #0x8, lsl #12
    1958:	str	x19, [x21]
    195c:	ldr	x0, [x0]
    1960:	str	x0, [x22, #8296]
    1964:	ldr	x0, [x0, #72]
    1968:	bl	0 <grub_malloc>
    196c:	mov	x2, x0
    1970:	ldr	x0, [x21]
    1974:	adrp	x1, 0 <eat_field>
    1978:	ldr	x4, [x19, #8]
    197c:	str	x2, [x22, #8320]
    1980:	ldr	x1, [x1]
    1984:	mov	w3, #0x1                   	// #1
    1988:	ldr	x2, [x0, #24]
    198c:	add	x1, x1, #0x100
    1990:	stp	x4, x1, [x20, #8]
    1994:	str	w3, [x20, #72]
    1998:	str	x21, [x20, #80]
    199c:	cbnz	x2, 1ab8 <grub_gzio_open+0x1b0>
    19a0:	add	x1, sp, #0x40
    19a4:	mov	x2, #0xa                   	// #10
    19a8:	bl	0 <grub_file_read>
    19ac:	cmp	x0, #0xa
    19b0:	b.ne	1a74 <grub_gzio_open+0x16c>  // b.any
    19b4:	ldrh	w0, [sp, #64]
    19b8:	mov	w2, #0x8b1f                	// #35615
    19bc:	mov	w1, #0x9e1f                	// #40479
    19c0:	cmp	w0, w2
    19c4:	ccmp	w0, w1, #0x4, ne  // ne = any
    19c8:	b.ne	1a74 <grub_gzio_open+0x16c>  // b.any
    19cc:	ldrb	w0, [sp, #66]
    19d0:	cmp	w0, #0x8
    19d4:	b.ne	1a74 <grub_gzio_open+0x16c>  // b.any
    19d8:	ldrb	w1, [sp, #67]
    19dc:	mov	w0, #0xffffffe2            	// #-30
    19e0:	tst	w1, w0
    19e4:	b.ne	1a74 <grub_gzio_open+0x16c>  // b.any
    19e8:	ldr	x0, [x21]
    19ec:	tbnz	w1, #2, 1ad0 <grub_gzio_open+0x1c8>
    19f0:	tbnz	w1, #3, 1b00 <grub_gzio_open+0x1f8>
    19f4:	tbz	w1, #4, 1a08 <grub_gzio_open+0x100>
    19f8:	mov	w1, #0xffffffff            	// #-1
    19fc:	bl	0 <eat_field>
    1a00:	cbnz	w0, 1a74 <grub_gzio_open+0x16c>
    1a04:	ldr	x0, [x21]
    1a08:	ldr	x1, [x0, #24]
    1a0c:	str	x1, [x21, #32]
    1a10:	ldr	x1, [x0, #64]
    1a14:	sub	x1, x1, #0x8
    1a18:	bl	0 <grub_file_seek>
    1a1c:	ldr	x0, [x21]
    1a20:	mov	x2, #0x4                   	// #4
    1a24:	add	x1, sp, #0x3c
    1a28:	bl	0 <grub_file_read>
    1a2c:	mov	x2, x0
    1a30:	cmp	x0, #0x4
    1a34:	b.ne	1a74 <grub_gzio_open+0x16c>  // b.any
    1a38:	mov	x0, #0xa078                	// #41080
    1a3c:	ldr	w3, [sp, #60]
    1a40:	add	x1, x21, x0
    1a44:	ldr	x0, [x21]
    1a48:	str	w3, [x22, #8304]
    1a4c:	bl	0 <grub_file_read>
    1a50:	cmp	x0, #0x4
    1a54:	b.ne	1a74 <grub_gzio_open+0x16c>  // b.any
    1a58:	ldr	w1, [x22, #8312]
    1a5c:	mov	x0, x21
    1a60:	str	x1, [x20, #64]
    1a64:	mov	x19, x20
    1a68:	bl	78 <initialize_tables>
    1a6c:	ldp	x21, x22, [sp, #32]
    1a70:	b	191c <grub_gzio_open+0x14>
    1a74:	adrp	x1, 0 <eat_field>
    1a78:	ldr	x0, [x22, #8320]
    1a7c:	ldr	x1, [x1]
    1a80:	str	wzr, [x1]
    1a84:	bl	0 <grub_free>
    1a88:	mov	x0, x21
    1a8c:	bl	0 <grub_free>
    1a90:	mov	x0, x20
    1a94:	bl	0 <grub_free>
    1a98:	mov	x0, x19
    1a9c:	mov	x1, #0x0                   	// #0
    1aa0:	bl	0 <grub_file_seek>
    1aa4:	mov	x0, x19
    1aa8:	ldp	x19, x20, [sp, #16]
    1aac:	ldp	x21, x22, [sp, #32]
    1ab0:	ldp	x29, x30, [sp], #80
    1ab4:	ret
    1ab8:	mov	x1, #0x0                   	// #0
    1abc:	bl	0 <grub_file_seek>
    1ac0:	ldr	x0, [x21]
    1ac4:	b	19a0 <grub_gzio_open+0x98>
    1ac8:	mov	x19, #0x0                   	// #0
    1acc:	b	191c <grub_gzio_open+0x14>
    1ad0:	add	x1, sp, #0x3a
    1ad4:	mov	x2, #0x2                   	// #2
    1ad8:	bl	0 <grub_file_read>
    1adc:	cmp	x0, #0x2
    1ae0:	b.ne	1a74 <grub_gzio_open+0x16c>  // b.any
    1ae4:	ldrh	w1, [sp, #58]
    1ae8:	ldr	x0, [x21]
    1aec:	bl	0 <eat_field>
    1af0:	cbnz	w0, 1a74 <grub_gzio_open+0x16c>
    1af4:	ldrb	w1, [sp, #67]
    1af8:	ldr	x0, [x21]
    1afc:	tbz	w1, #3, 19f4 <grub_gzio_open+0xec>
    1b00:	mov	w1, #0xffffffff            	// #-1
    1b04:	bl	0 <eat_field>
    1b08:	cbnz	w0, 1a74 <grub_gzio_open+0x16c>
    1b0c:	ldrb	w1, [sp, #67]
    1b10:	ldr	x0, [x21]
    1b14:	b	19f4 <grub_gzio_open+0xec>
    1b18:	mov	x0, x20
    1b1c:	mov	x19, #0x0                   	// #0
    1b20:	bl	0 <grub_free>
    1b24:	ldp	x21, x22, [sp, #32]
    1b28:	b	191c <grub_gzio_open+0x14>
    1b2c:	nop
	...

0000000000001b48 <grub_zlib_decompress>:
    1b48:	stp	x29, x30, [sp, #-64]!
    1b4c:	mov	x29, sp
    1b50:	stp	x19, x20, [sp, #16]
    1b54:	mov	x19, x0
    1b58:	mov	x0, #0xa098                	// #41112
    1b5c:	stp	x21, x22, [sp, #32]
    1b60:	mov	x21, x2
    1b64:	mov	x22, x3
    1b68:	stp	x23, x24, [sp, #48]
    1b6c:	mov	x24, x1
    1b70:	mov	x23, x4
    1b74:	bl	0 <grub_zalloc>
    1b78:	cbz	x0, 1c54 <grub_zlib_decompress+0x10c>
    1b7c:	stp	x24, xzr, [x0, #8]
    1b80:	mov	x20, x0
    1b84:	str	x19, [x0, #24]
    1b88:	bl	a40 <get_byte>
    1b8c:	mov	w19, w0
    1b90:	mov	x0, x20
    1b94:	bl	a40 <get_byte>
    1b98:	and	w1, w19, #0xf
    1b9c:	cmp	w1, #0x8
    1ba0:	b.ne	1c20 <grub_zlib_decompress+0xd8>  // b.any
    1ba4:	and	w1, w19, #0xff
    1ba8:	add	w1, w1, w0, uxtb #2
    1bac:	cmp	w1, #0x1f
    1bb0:	b.ls	1bc8 <grub_zlib_decompress+0x80>  // b.plast
    1bb4:	nop
    1bb8:	and	w2, w1, #0x1f
    1bbc:	add	w1, w2, w1, lsr #5
    1bc0:	cmp	w1, #0x1f
    1bc4:	b.hi	1bb8 <grub_zlib_decompress+0x70>  // b.pmore
    1bc8:	cmp	w1, #0x0
    1bcc:	ccmp	w1, #0x1f, #0x4, ne  // ne = any
    1bd0:	b.ne	1c20 <grub_zlib_decompress+0xd8>  // b.any
    1bd4:	tbnz	w0, #5, 1c20 <grub_zlib_decompress+0xd8>
    1bd8:	mov	x0, #0x2                   	// #2
    1bdc:	str	x0, [x20, #32]
    1be0:	mov	x0, x20
    1be4:	bl	78 <initialize_tables>
    1be8:	mov	x3, x23
    1bec:	mov	x2, x22
    1bf0:	mov	x1, x21
    1bf4:	mov	x0, x20
    1bf8:	bl	fe8 <grub_gzio_read_real>
    1bfc:	mov	x19, x0
    1c00:	mov	x0, x20
    1c04:	bl	0 <grub_free>
    1c08:	mov	x0, x19
    1c0c:	ldp	x19, x20, [sp, #16]
    1c10:	ldp	x21, x22, [sp, #32]
    1c14:	ldp	x23, x24, [sp, #48]
    1c18:	ldp	x29, x30, [sp], #64
    1c1c:	ret
    1c20:	adrp	x1, 0 <eat_field>
    1c24:	mov	w0, #0x1a                  	// #26
    1c28:	mov	x19, #0xffffffffffffffff    	// #-1
    1c2c:	ldr	x1, [x1]
    1c30:	bl	0 <grub_error>
    1c34:	mov	x0, x20
    1c38:	bl	0 <grub_free>
    1c3c:	mov	x0, x19
    1c40:	ldp	x19, x20, [sp, #16]
    1c44:	ldp	x21, x22, [sp, #32]
    1c48:	ldp	x23, x24, [sp, #48]
    1c4c:	ldp	x29, x30, [sp], #64
    1c50:	ret
    1c54:	mov	x19, #0xffffffffffffffff    	// #-1
    1c58:	b	1c08 <grub_zlib_decompress+0xc0>
    1c5c:	nop
	...

0000000000001c68 <grub_deflate_decompress>:
    1c68:	stp	x29, x30, [sp, #-64]!
    1c6c:	mov	x29, sp
    1c70:	stp	x19, x20, [sp, #16]
    1c74:	mov	x20, x2
    1c78:	stp	x21, x22, [sp, #32]
    1c7c:	mov	x21, x3
    1c80:	mov	x22, x4
    1c84:	stp	x23, x24, [sp, #48]
    1c88:	mov	x23, x0
    1c8c:	mov	x24, x1
    1c90:	mov	x0, #0xa098                	// #41112
    1c94:	bl	0 <grub_zalloc>
    1c98:	cbz	x0, 1ce8 <grub_deflate_decompress+0x80>
    1c9c:	stp	x24, xzr, [x0, #8]
    1ca0:	mov	x19, x0
    1ca4:	str	x23, [x0, #24]
    1ca8:	bl	78 <initialize_tables>
    1cac:	mov	x1, x20
    1cb0:	mov	x0, x19
    1cb4:	mov	x3, x22
    1cb8:	mov	x2, x21
    1cbc:	bl	fe8 <grub_gzio_read_real>
    1cc0:	mov	x1, x0
    1cc4:	mov	x0, x19
    1cc8:	mov	x19, x1
    1ccc:	bl	0 <grub_free>
    1cd0:	mov	x0, x19
    1cd4:	ldp	x19, x20, [sp, #16]
    1cd8:	ldp	x21, x22, [sp, #32]
    1cdc:	ldp	x23, x24, [sp, #48]
    1ce0:	ldp	x29, x30, [sp], #64
    1ce4:	ret
    1ce8:	mov	x19, #0xffffffffffffffff    	// #-1
    1cec:	b	1cd0 <grub_deflate_decompress+0x68>

0000000000001cf0 <grub_mod_init>:
    1cf0:	adrp	x0, 0 <eat_field>
    1cf4:	adrp	x1, 0 <eat_field>
    1cf8:	ldr	x0, [x0]
    1cfc:	ldr	x1, [x1]
    1d00:	str	x1, [x0, #8]
    1d04:	ret
	...

0000000000001d18 <grub_mod_fini>:
    1d18:	adrp	x0, 0 <eat_field>
    1d1c:	ldr	x0, [x0]
    1d20:	str	xzr, [x0, #8]
    1d24:	ret
	...
