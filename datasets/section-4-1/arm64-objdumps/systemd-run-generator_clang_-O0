
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-run-generator_clang_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000400db8 <_init>:
  400db8:	stp	x29, x30, [sp, #-16]!
  400dbc:	mov	x29, sp
  400dc0:	bl	401030 <call_weak_fn>
  400dc4:	ldp	x29, x30, [sp], #16
  400dc8:	ret

Disassembly of section .plt:

0000000000400dd0 <__libc_start_main@plt-0x20>:
  400dd0:	stp	x16, x30, [sp, #-16]!
  400dd4:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400dd8:	ldr	x17, [x16, #3840]
  400ddc:	add	x16, x16, #0xf00
  400de0:	br	x17
  400de4:	nop
  400de8:	nop
  400dec:	nop

0000000000400df0 <__libc_start_main@plt>:
  400df0:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400df4:	ldr	x17, [x16, #3848]
  400df8:	add	x16, x16, #0xf08
  400dfc:	br	x17

0000000000400e00 <abort@plt>:
  400e00:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400e04:	ldr	x17, [x16, #3856]
  400e08:	add	x16, x16, #0xf10
  400e0c:	br	x17

0000000000400e10 <__gmon_start__@plt>:
  400e10:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400e14:	ldr	x17, [x16, #3864]
  400e18:	add	x16, x16, #0xf18
  400e1c:	br	x17

0000000000400e20 <log_setup_generator@plt>:
  400e20:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400e24:	ldr	x17, [x16, #3872]
  400e28:	add	x16, x16, #0xf20
  400e2c:	br	x17

0000000000400e30 <log_get_max_level_realm@plt>:
  400e30:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400e34:	ldr	x17, [x16, #3880]
  400e38:	add	x16, x16, #0xf28
  400e3c:	br	x17

0000000000400e40 <log_internal_realm@plt>:
  400e40:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400e44:	ldr	x17, [x16, #3888]
  400e48:	add	x16, x16, #0xf30
  400e4c:	br	x17

0000000000400e50 <abs@plt>:
  400e50:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400e54:	ldr	x17, [x16, #3896]
  400e58:	add	x16, x16, #0xf38
  400e5c:	br	x17

0000000000400e60 <ask_password_agent_close@plt>:
  400e60:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400e64:	ldr	x17, [x16, #3904]
  400e68:	add	x16, x16, #0xf40
  400e6c:	br	x17

0000000000400e70 <polkit_agent_close@plt>:
  400e70:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400e74:	ldr	x17, [x16, #3912]
  400e78:	add	x16, x16, #0xf48
  400e7c:	br	x17

0000000000400e80 <pager_close@plt>:
  400e80:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400e84:	ldr	x17, [x16, #3920]
  400e88:	add	x16, x16, #0xf50
  400e8c:	br	x17

0000000000400e90 <mac_selinux_finish@plt>:
  400e90:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400e94:	ldr	x17, [x16, #3928]
  400e98:	add	x16, x16, #0xf58
  400e9c:	br	x17

0000000000400ea0 <log_assert_failed_realm@plt>:
  400ea0:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400ea4:	ldr	x17, [x16, #3936]
  400ea8:	add	x16, x16, #0xf60
  400eac:	br	x17

0000000000400eb0 <proc_cmdline_parse@plt>:
  400eb0:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400eb4:	ldr	x17, [x16, #3944]
  400eb8:	add	x16, x16, #0xf68
  400ebc:	br	x17

0000000000400ec0 <strv_free@plt>:
  400ec0:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400ec4:	ldr	x17, [x16, #3952]
  400ec8:	add	x16, x16, #0xf70
  400ecc:	br	x17

0000000000400ed0 <free@plt>:
  400ed0:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400ed4:	ldr	x17, [x16, #3960]
  400ed8:	add	x16, x16, #0xf78
  400edc:	br	x17

0000000000400ee0 <proc_cmdline_key_streq@plt>:
  400ee0:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400ee4:	ldr	x17, [x16, #3968]
  400ee8:	add	x16, x16, #0xf80
  400eec:	br	x17

0000000000400ef0 <strv_extend@plt>:
  400ef0:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400ef4:	ldr	x17, [x16, #3976]
  400ef8:	add	x16, x16, #0xf88
  400efc:	br	x17

0000000000400f00 <log_oom_internal@plt>:
  400f00:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400f04:	ldr	x17, [x16, #3984]
  400f08:	add	x16, x16, #0xf90
  400f0c:	br	x17

0000000000400f10 <free_and_strdup@plt>:
  400f10:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400f14:	ldr	x17, [x16, #3992]
  400f18:	add	x16, x16, #0xf98
  400f1c:	br	x17

0000000000400f20 <strlen@plt>:
  400f20:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400f24:	ldr	x17, [x16, #4000]
  400f28:	add	x16, x16, #0xfa0
  400f2c:	br	x17

0000000000400f30 <stpcpy@plt>:
  400f30:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400f34:	ldr	x17, [x16, #4008]
  400f38:	add	x16, x16, #0xfa8
  400f3c:	br	x17

0000000000400f40 <fopen64@plt>:
  400f40:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400f44:	ldr	x17, [x16, #4016]
  400f48:	add	x16, x16, #0xfb0
  400f4c:	br	x17

0000000000400f50 <__errno_location@plt>:
  400f50:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400f54:	ldr	x17, [x16, #4024]
  400f58:	add	x16, x16, #0xfb8
  400f5c:	br	x17

0000000000400f60 <fputs@plt>:
  400f60:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400f64:	ldr	x17, [x16, #4032]
  400f68:	add	x16, x16, #0xfc0
  400f6c:	br	x17

0000000000400f70 <fprintf@plt>:
  400f70:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400f74:	ldr	x17, [x16, #4040]
  400f78:	add	x16, x16, #0xfc8
  400f7c:	br	x17

0000000000400f80 <fflush_and_check@plt>:
  400f80:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400f84:	ldr	x17, [x16, #4048]
  400f88:	add	x16, x16, #0xfd0
  400f8c:	br	x17

0000000000400f90 <symlink@plt>:
  400f90:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400f94:	ldr	x17, [x16, #4056]
  400f98:	add	x16, x16, #0xfd8
  400f9c:	br	x17

0000000000400fa0 <safe_fclose@plt>:
  400fa0:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400fa4:	ldr	x17, [x16, #4064]
  400fa8:	add	x16, x16, #0xfe0
  400fac:	br	x17

0000000000400fb0 <strcmp_ptr@plt>:
  400fb0:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400fb4:	ldr	x17, [x16, #4072]
  400fb8:	add	x16, x16, #0xfe8
  400fbc:	br	x17

0000000000400fc0 <strreplace@plt>:
  400fc0:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400fc4:	ldr	x17, [x16, #4080]
  400fc8:	add	x16, x16, #0xff0
  400fcc:	br	x17

0000000000400fd0 <write_string_file_ts@plt>:
  400fd0:	adrp	x16, 41f000 <__FRAME_END__+0x1c350>
  400fd4:	ldr	x17, [x16, #4088]
  400fd8:	add	x16, x16, #0xff8
  400fdc:	br	x17

Disassembly of section .text:

0000000000400fe0 <_start>:
  400fe0:	mov	x29, #0x0                   	// #0
  400fe4:	mov	x30, #0x0                   	// #0
  400fe8:	mov	x5, x0
  400fec:	ldr	x1, [sp]
  400ff0:	add	x2, sp, #0x8
  400ff4:	mov	x6, sp
  400ff8:	movz	x0, #0x0, lsl #48
  400ffc:	movk	x0, #0x0, lsl #32
  401000:	movk	x0, #0x40, lsl #16
  401004:	movk	x0, #0x122c
  401008:	movz	x3, #0x0, lsl #48
  40100c:	movk	x3, #0x0, lsl #32
  401010:	movk	x3, #0x40, lsl #16
  401014:	movk	x3, #0x25e8
  401018:	movz	x4, #0x0, lsl #48
  40101c:	movk	x4, #0x0, lsl #32
  401020:	movk	x4, #0x40, lsl #16
  401024:	movk	x4, #0x2668
  401028:	bl	400df0 <__libc_start_main@plt>
  40102c:	bl	400e00 <abort@plt>

0000000000401030 <call_weak_fn>:
  401030:	adrp	x0, 41f000 <__FRAME_END__+0x1c350>
  401034:	ldr	x0, [x0, #3800]
  401038:	cbz	x0, 401040 <call_weak_fn+0x10>
  40103c:	b	400e10 <__gmon_start__@plt>
  401040:	ret

0000000000401044 <deregister_tm_clones>:
  401044:	stp	x29, x30, [sp, #-32]!
  401048:	mov	x29, sp
  40104c:	adrp	x0, 420000 <completed.8445>
  401050:	add	x0, x0, #0x0
  401054:	str	x0, [sp, #24]
  401058:	ldr	x0, [sp, #24]
  40105c:	str	x0, [sp, #24]
  401060:	ldr	x1, [sp, #24]
  401064:	adrp	x0, 420000 <completed.8445>
  401068:	add	x0, x0, #0x0
  40106c:	cmp	x1, x0
  401070:	b.eq	4010ac <deregister_tm_clones+0x68>  // b.none
  401074:	adrp	x0, 402000 <generate+0x824>
  401078:	add	x0, x0, #0x680
  40107c:	ldr	x0, [x0]
  401080:	str	x0, [sp, #16]
  401084:	ldr	x0, [sp, #16]
  401088:	str	x0, [sp, #16]
  40108c:	ldr	x0, [sp, #16]
  401090:	cmp	x0, #0x0
  401094:	b.eq	4010b0 <deregister_tm_clones+0x6c>  // b.none
  401098:	ldr	x1, [sp, #16]
  40109c:	adrp	x0, 420000 <completed.8445>
  4010a0:	add	x0, x0, #0x0
  4010a4:	blr	x1
  4010a8:	b	4010b0 <deregister_tm_clones+0x6c>
  4010ac:	nop
  4010b0:	ldp	x29, x30, [sp], #32
  4010b4:	ret

00000000004010b8 <register_tm_clones>:
  4010b8:	stp	x29, x30, [sp, #-48]!
  4010bc:	mov	x29, sp
  4010c0:	adrp	x0, 420000 <completed.8445>
  4010c4:	add	x0, x0, #0x0
  4010c8:	str	x0, [sp, #40]
  4010cc:	ldr	x0, [sp, #40]
  4010d0:	str	x0, [sp, #40]
  4010d4:	ldr	x1, [sp, #40]
  4010d8:	adrp	x0, 420000 <completed.8445>
  4010dc:	add	x0, x0, #0x0
  4010e0:	sub	x0, x1, x0
  4010e4:	asr	x0, x0, #3
  4010e8:	lsr	x1, x0, #63
  4010ec:	add	x0, x1, x0
  4010f0:	asr	x0, x0, #1
  4010f4:	str	x0, [sp, #32]
  4010f8:	ldr	x0, [sp, #32]
  4010fc:	cmp	x0, #0x0
  401100:	b.eq	401140 <register_tm_clones+0x88>  // b.none
  401104:	adrp	x0, 402000 <generate+0x824>
  401108:	add	x0, x0, #0x688
  40110c:	ldr	x0, [x0]
  401110:	str	x0, [sp, #24]
  401114:	ldr	x0, [sp, #24]
  401118:	str	x0, [sp, #24]
  40111c:	ldr	x0, [sp, #24]
  401120:	cmp	x0, #0x0
  401124:	b.eq	401144 <register_tm_clones+0x8c>  // b.none
  401128:	ldr	x2, [sp, #24]
  40112c:	ldr	x1, [sp, #32]
  401130:	adrp	x0, 420000 <completed.8445>
  401134:	add	x0, x0, #0x0
  401138:	blr	x2
  40113c:	b	401144 <register_tm_clones+0x8c>
  401140:	nop
  401144:	ldp	x29, x30, [sp], #48
  401148:	ret

000000000040114c <__do_global_dtors_aux>:
  40114c:	stp	x29, x30, [sp, #-16]!
  401150:	mov	x29, sp
  401154:	adrp	x0, 420000 <completed.8445>
  401158:	add	x0, x0, #0x0
  40115c:	ldrb	w0, [x0]
  401160:	and	x0, x0, #0xff
  401164:	cmp	x0, #0x0
  401168:	b.ne	401184 <__do_global_dtors_aux+0x38>  // b.any
  40116c:	bl	401044 <deregister_tm_clones>
  401170:	adrp	x0, 420000 <completed.8445>
  401174:	add	x0, x0, #0x0
  401178:	mov	w1, #0x1                   	// #1
  40117c:	strb	w1, [x0]
  401180:	b	401188 <__do_global_dtors_aux+0x3c>
  401184:	nop
  401188:	ldp	x29, x30, [sp], #16
  40118c:	ret

0000000000401190 <frame_dummy>:
  401190:	stp	x29, x30, [sp, #-16]!
  401194:	mov	x29, sp
  401198:	bl	4010b8 <register_tm_clones>
  40119c:	nop
  4011a0:	ldp	x29, x30, [sp], #16
  4011a4:	ret

00000000004011a8 <__unique_prefix_static_destructor_wrapper0>:
  4011a8:	sub	sp, sp, #0x20
  4011ac:	stp	x29, x30, [sp, #16]
  4011b0:	add	x29, sp, #0x10
  4011b4:	str	x0, [sp, #8]
  4011b8:	ldr	x8, [sp, #8]
  4011bc:	str	x8, [sp]
  4011c0:	ldr	x0, [sp]
  4011c4:	bl	4015d4 <strv_freep>
  4011c8:	ldp	x29, x30, [sp, #16]
  4011cc:	add	sp, sp, #0x20
  4011d0:	ret

00000000004011d4 <__unique_prefix_static_destructor_wrapper1>:
  4011d4:	sub	sp, sp, #0x20
  4011d8:	stp	x29, x30, [sp, #16]
  4011dc:	add	x29, sp, #0x10
  4011e0:	str	x0, [sp, #8]
  4011e4:	ldr	x8, [sp, #8]
  4011e8:	str	x8, [sp]
  4011ec:	ldr	x0, [sp]
  4011f0:	bl	401608 <freep>
  4011f4:	ldp	x29, x30, [sp, #16]
  4011f8:	add	sp, sp, #0x20
  4011fc:	ret

0000000000401200 <__unique_prefix_static_destructor_wrapper2>:
  401200:	sub	sp, sp, #0x20
  401204:	stp	x29, x30, [sp, #16]
  401208:	add	x29, sp, #0x10
  40120c:	str	x0, [sp, #8]
  401210:	ldr	x8, [sp, #8]
  401214:	str	x8, [sp]
  401218:	ldr	x0, [sp]
  40121c:	bl	401608 <freep>
  401220:	ldp	x29, x30, [sp, #16]
  401224:	add	sp, sp, #0x20
  401228:	ret

000000000040122c <main>:
  40122c:	sub	sp, sp, #0x80
  401230:	stp	x29, x30, [sp, #112]
  401234:	add	x29, sp, #0x70
  401238:	adrp	x8, 402000 <generate+0x824>
  40123c:	add	x8, x8, #0x690
  401240:	add	x2, x8, #0x3
  401244:	adrp	x8, 402000 <generate+0x824>
  401248:	add	x8, x8, #0x6e6
  40124c:	stur	wzr, [x29, #-4]
  401250:	stur	w0, [x29, #-8]
  401254:	stur	x1, [x29, #-16]
  401258:	ldur	w0, [x29, #-8]
  40125c:	ldur	x1, [x29, #-16]
  401260:	stur	x2, [x29, #-48]
  401264:	str	x8, [sp, #56]
  401268:	bl	4013e4 <save_argc_argv>
  40126c:	bl	400e20 <log_setup_generator@plt>
  401270:	ldur	w9, [x29, #-8]
  401274:	cmp	w9, #0x1
  401278:	b.le	401314 <main+0xe8>
  40127c:	ldur	w8, [x29, #-8]
  401280:	cmp	w8, #0x4
  401284:	b.eq	401314 <main+0xe8>  // b.none
  401288:	mov	w8, #0x3                   	// #3
  40128c:	stur	w8, [x29, #-24]
  401290:	mov	w8, #0x16                  	// #22
  401294:	movk	w8, #0x4000, lsl #16
  401298:	stur	w8, [x29, #-28]
  40129c:	stur	wzr, [x29, #-32]
  4012a0:	ldur	w0, [x29, #-32]
  4012a4:	bl	400e30 <log_get_max_level_realm@plt>
  4012a8:	ldur	w8, [x29, #-24]
  4012ac:	and	w8, w8, #0x7
  4012b0:	cmp	w0, w8
  4012b4:	b.lt	4012ec <main+0xc0>  // b.tstop
  4012b8:	ldur	w8, [x29, #-32]
  4012bc:	ldur	w9, [x29, #-24]
  4012c0:	orr	w0, w9, w8, lsl #10
  4012c4:	ldur	w1, [x29, #-28]
  4012c8:	ldur	x2, [x29, #-48]
  4012cc:	mov	w3, #0x8a                  	// #138
  4012d0:	adrp	x4, 402000 <generate+0x824>
  4012d4:	add	x4, x4, #0x6b5
  4012d8:	adrp	x5, 402000 <generate+0x824>
  4012dc:	add	x5, x5, #0x6ba
  4012e0:	bl	400e40 <log_internal_realm@plt>
  4012e4:	str	w0, [sp, #52]
  4012e8:	b	401300 <main+0xd4>
  4012ec:	ldur	w0, [x29, #-28]
  4012f0:	bl	400e50 <abs@plt>
  4012f4:	mov	w8, wzr
  4012f8:	subs	w8, w8, w0, uxtb
  4012fc:	str	w8, [sp, #52]
  401300:	ldr	w8, [sp, #52]
  401304:	stur	w8, [x29, #-36]
  401308:	ldur	w8, [x29, #-36]
  40130c:	stur	w8, [x29, #-4]
  401310:	b	4013d4 <main+0x1a8>
  401314:	ldur	w8, [x29, #-8]
  401318:	cmp	w8, #0x1
  40131c:	b.le	401330 <main+0x104>
  401320:	ldur	x8, [x29, #-16]
  401324:	ldr	x8, [x8, #8]
  401328:	str	x8, [sp, #40]
  40132c:	b	401338 <main+0x10c>
  401330:	ldr	x8, [sp, #56]
  401334:	str	x8, [sp, #40]
  401338:	ldr	x8, [sp, #40]
  40133c:	ldur	w9, [x29, #-8]
  401340:	cmp	w9, #0x1
  401344:	str	x8, [sp, #32]
  401348:	b.le	40135c <main+0x130>
  40134c:	ldur	x8, [x29, #-16]
  401350:	ldr	x8, [x8, #16]
  401354:	str	x8, [sp, #24]
  401358:	b	401364 <main+0x138>
  40135c:	ldr	x8, [sp, #56]
  401360:	str	x8, [sp, #24]
  401364:	ldr	x8, [sp, #24]
  401368:	ldur	w9, [x29, #-8]
  40136c:	cmp	w9, #0x1
  401370:	str	x8, [sp, #16]
  401374:	b.le	401388 <main+0x15c>
  401378:	ldur	x8, [x29, #-16]
  40137c:	ldr	x8, [x8, #24]
  401380:	str	x8, [sp, #8]
  401384:	b	401390 <main+0x164>
  401388:	ldr	x8, [sp, #56]
  40138c:	str	x8, [sp, #8]
  401390:	ldr	x8, [sp, #8]
  401394:	ldr	x0, [sp, #32]
  401398:	ldr	x1, [sp, #16]
  40139c:	mov	x2, x8
  4013a0:	bl	401418 <run>
  4013a4:	stur	w0, [x29, #-20]
  4013a8:	bl	400e60 <ask_password_agent_close@plt>
  4013ac:	bl	400e70 <polkit_agent_close@plt>
  4013b0:	bl	400e80 <pager_close@plt>
  4013b4:	bl	400e90 <mac_selinux_finish@plt>
  4013b8:	bl	401554 <static_destruct>
  4013bc:	ldur	w9, [x29, #-20]
  4013c0:	mov	w10, wzr
  4013c4:	mov	w11, #0x1                   	// #1
  4013c8:	cmp	w9, #0x0
  4013cc:	csel	w9, w11, w10, lt  // lt = tstop
  4013d0:	stur	w9, [x29, #-4]
  4013d4:	ldur	w0, [x29, #-4]
  4013d8:	ldp	x29, x30, [sp, #112]
  4013dc:	add	sp, sp, #0x80
  4013e0:	ret

00000000004013e4 <save_argc_argv>:
  4013e4:	sub	sp, sp, #0x10
  4013e8:	adrp	x8, 420000 <completed.8445>
  4013ec:	add	x8, x8, #0x28
  4013f0:	adrp	x9, 420000 <completed.8445>
  4013f4:	add	x9, x9, #0x30
  4013f8:	str	w0, [sp, #12]
  4013fc:	str	x1, [sp]
  401400:	ldr	w10, [sp, #12]
  401404:	str	w10, [x8]
  401408:	ldr	x8, [sp]
  40140c:	str	x8, [x9]
  401410:	add	sp, sp, #0x10
  401414:	ret

0000000000401418 <run>:
  401418:	sub	sp, sp, #0x50
  40141c:	stp	x29, x30, [sp, #64]
  401420:	add	x29, sp, #0x40
  401424:	adrp	x8, 402000 <generate+0x824>
  401428:	add	x8, x8, #0x690
  40142c:	add	x8, x8, #0x3
  401430:	stur	x0, [x29, #-8]
  401434:	stur	x1, [x29, #-16]
  401438:	stur	x2, [x29, #-24]
  40143c:	str	x8, [sp, #8]
  401440:	ldur	x8, [x29, #-8]
  401444:	adrp	x9, 420000 <completed.8445>
  401448:	add	x9, x9, #0x20
  40144c:	str	x8, [x9]
  401450:	cmp	x8, #0x0
  401454:	cset	w10, ne  // ne = any
  401458:	mov	w11, #0x1                   	// #1
  40145c:	eor	w10, w10, #0x1
  401460:	eor	w10, w10, w11
  401464:	eor	w10, w10, w11
  401468:	and	w10, w10, #0x1
  40146c:	mov	w0, w10
  401470:	sxtw	x8, w0
  401474:	cbz	x8, 40149c <run+0x84>
  401478:	mov	w8, wzr
  40147c:	mov	w0, w8
  401480:	adrp	x1, 402000 <generate+0x824>
  401484:	add	x1, x1, #0x6eb
  401488:	ldr	x2, [sp, #8]
  40148c:	mov	w3, #0x81                  	// #129
  401490:	adrp	x4, 402000 <generate+0x824>
  401494:	add	x4, x4, #0x6fb
  401498:	bl	400ea0 <log_assert_failed_realm@plt>
  40149c:	adrp	x0, 401000 <_start+0x20>
  4014a0:	add	x0, x0, #0x630
  4014a4:	mov	x8, xzr
  4014a8:	mov	x1, x8
  4014ac:	mov	w2, #0x5                   	// #5
  4014b0:	bl	400eb0 <proc_cmdline_parse@plt>
  4014b4:	stur	w0, [x29, #-28]
  4014b8:	ldur	w9, [x29, #-28]
  4014bc:	cmp	w9, #0x0
  4014c0:	cset	w9, ge  // ge = tcont
  4014c4:	tbnz	w9, #0, 401544 <run+0x12c>
  4014c8:	mov	w8, #0x4                   	// #4
  4014cc:	str	w8, [sp, #32]
  4014d0:	ldur	w8, [x29, #-28]
  4014d4:	str	w8, [sp, #28]
  4014d8:	str	wzr, [sp, #24]
  4014dc:	ldr	w0, [sp, #24]
  4014e0:	bl	400e30 <log_get_max_level_realm@plt>
  4014e4:	ldr	w8, [sp, #32]
  4014e8:	and	w8, w8, #0x7
  4014ec:	cmp	w0, w8
  4014f0:	b.lt	401528 <run+0x110>  // b.tstop
  4014f4:	ldr	w8, [sp, #24]
  4014f8:	ldr	w9, [sp, #32]
  4014fc:	orr	w0, w9, w8, lsl #10
  401500:	ldr	w1, [sp, #28]
  401504:	ldr	x2, [sp, #8]
  401508:	mov	w3, #0x85                  	// #133
  40150c:	adrp	x4, 402000 <generate+0x824>
  401510:	add	x4, x4, #0x72d
  401514:	adrp	x5, 402000 <generate+0x824>
  401518:	add	x5, x5, #0x731
  40151c:	bl	400e40 <log_internal_realm@plt>
  401520:	str	w0, [sp, #4]
  401524:	b	40153c <run+0x124>
  401528:	ldr	w0, [sp, #28]
  40152c:	bl	400e50 <abs@plt>
  401530:	mov	w8, wzr
  401534:	subs	w8, w8, w0, uxtb
  401538:	str	w8, [sp, #4]
  40153c:	ldr	w8, [sp, #4]
  401540:	str	w8, [sp, #20]
  401544:	bl	4017dc <generate>
  401548:	ldp	x29, x30, [sp, #64]
  40154c:	add	sp, sp, #0x50
  401550:	ret

0000000000401554 <static_destruct>:
  401554:	sub	sp, sp, #0x20
  401558:	stp	x29, x30, [sp, #16]
  40155c:	add	x29, sp, #0x10
  401560:	adrp	x8, 41f000 <__FRAME_END__+0x1c350>
  401564:	ldr	x8, [x8, #3808]
  401568:	str	x8, [sp]
  40156c:	cbnz	x8, 401574 <static_destruct+0x20>
  401570:	b	4015c8 <static_destruct+0x74>
  401574:	ldr	x0, [sp]
  401578:	mov	x1, #0x8                   	// #8
  40157c:	bl	4025b8 <ALIGN_TO>
  401580:	str	x0, [sp, #8]
  401584:	ldr	x8, [sp, #8]
  401588:	adrp	x9, 41f000 <__FRAME_END__+0x1c350>
  40158c:	ldr	x9, [x9, #3816]
  401590:	cmp	x8, x9
  401594:	b.cs	4015c8 <static_destruct+0x74>  // b.hs, b.nlast
  401598:	ldr	x8, [sp, #8]
  40159c:	ldr	x8, [x8, #8]
  4015a0:	ldr	x9, [sp, #8]
  4015a4:	ldr	x0, [x9]
  4015a8:	blr	x8
  4015ac:	ldr	x8, [sp, #8]
  4015b0:	add	x8, x8, #0x10
  4015b4:	mov	x0, x8
  4015b8:	mov	x1, #0x8                   	// #8
  4015bc:	bl	4025b8 <ALIGN_TO>
  4015c0:	str	x0, [sp, #8]
  4015c4:	b	401584 <static_destruct+0x30>
  4015c8:	ldp	x29, x30, [sp, #16]
  4015cc:	add	sp, sp, #0x20
  4015d0:	ret

00000000004015d4 <strv_freep>:
  4015d4:	sub	sp, sp, #0x20
  4015d8:	stp	x29, x30, [sp, #16]
  4015dc:	add	x29, sp, #0x10
  4015e0:	str	x0, [sp, #8]
  4015e4:	ldr	x8, [sp, #8]
  4015e8:	ldr	x8, [x8]
  4015ec:	cbz	x8, 4015fc <strv_freep+0x28>
  4015f0:	ldr	x8, [sp, #8]
  4015f4:	ldr	x0, [x8]
  4015f8:	bl	400ec0 <strv_free@plt>
  4015fc:	ldp	x29, x30, [sp, #16]
  401600:	add	sp, sp, #0x20
  401604:	ret

0000000000401608 <freep>:
  401608:	sub	sp, sp, #0x20
  40160c:	stp	x29, x30, [sp, #16]
  401610:	add	x29, sp, #0x10
  401614:	str	x0, [sp, #8]
  401618:	ldr	x8, [sp, #8]
  40161c:	ldr	x0, [x8]
  401620:	bl	400ed0 <free@plt>
  401624:	ldp	x29, x30, [sp, #16]
  401628:	add	sp, sp, #0x20
  40162c:	ret

0000000000401630 <parse>:
  401630:	sub	sp, sp, #0x50
  401634:	stp	x29, x30, [sp, #64]
  401638:	add	x29, sp, #0x40
  40163c:	adrp	x8, 402000 <generate+0x824>
  401640:	add	x8, x8, #0x763
  401644:	adrp	x9, 402000 <generate+0x824>
  401648:	add	x9, x9, #0x690
  40164c:	add	x9, x9, #0x3
  401650:	adrp	x10, 402000 <generate+0x824>
  401654:	add	x10, x10, #0x76f
  401658:	stur	x0, [x29, #-16]
  40165c:	stur	x1, [x29, #-24]
  401660:	str	x2, [sp, #32]
  401664:	ldur	x0, [x29, #-16]
  401668:	mov	x1, x8
  40166c:	str	x9, [sp, #16]
  401670:	str	x10, [sp, #8]
  401674:	bl	400ee0 <proc_cmdline_key_streq@plt>
  401678:	tbnz	w0, #0, 401680 <parse+0x50>
  40167c:	b	4016e4 <parse+0xb4>
  401680:	ldur	x0, [x29, #-16]
  401684:	ldur	x1, [x29, #-24]
  401688:	bl	402368 <proc_cmdline_value_missing>
  40168c:	tbnz	w0, #0, 401694 <parse+0x64>
  401690:	b	40169c <parse+0x6c>
  401694:	stur	wzr, [x29, #-4]
  401698:	b	4017cc <parse+0x19c>
  40169c:	ldur	x1, [x29, #-24]
  4016a0:	adrp	x0, 420000 <completed.8445>
  4016a4:	add	x0, x0, #0x8
  4016a8:	bl	400ef0 <strv_extend@plt>
  4016ac:	str	w0, [sp, #28]
  4016b0:	ldr	w8, [sp, #28]
  4016b4:	cmp	w8, #0x0
  4016b8:	cset	w8, ge  // ge = tcont
  4016bc:	tbnz	w8, #0, 4016e0 <parse+0xb0>
  4016c0:	mov	w8, wzr
  4016c4:	mov	w0, w8
  4016c8:	ldr	x1, [sp, #16]
  4016cc:	mov	w2, #0x22                  	// #34
  4016d0:	ldr	x3, [sp, #8]
  4016d4:	bl	400f00 <log_oom_internal@plt>
  4016d8:	stur	w0, [x29, #-4]
  4016dc:	b	4017cc <parse+0x19c>
  4016e0:	b	4017c8 <parse+0x198>
  4016e4:	ldur	x0, [x29, #-16]
  4016e8:	adrp	x1, 402000 <generate+0x824>
  4016ec:	add	x1, x1, #0x775
  4016f0:	bl	400ee0 <proc_cmdline_key_streq@plt>
  4016f4:	tbnz	w0, #0, 4016fc <parse+0xcc>
  4016f8:	b	401758 <parse+0x128>
  4016fc:	ldur	x0, [x29, #-16]
  401700:	ldur	x1, [x29, #-24]
  401704:	bl	402368 <proc_cmdline_value_missing>
  401708:	tbnz	w0, #0, 401710 <parse+0xe0>
  40170c:	b	401718 <parse+0xe8>
  401710:	stur	wzr, [x29, #-4]
  401714:	b	4017cc <parse+0x19c>
  401718:	ldur	x1, [x29, #-24]
  40171c:	adrp	x0, 420000 <completed.8445>
  401720:	add	x0, x0, #0x10
  401724:	bl	400f10 <free_and_strdup@plt>
  401728:	cmp	w0, #0x0
  40172c:	cset	w8, ge  // ge = tcont
  401730:	tbnz	w8, #0, 401754 <parse+0x124>
  401734:	mov	w8, wzr
  401738:	mov	w0, w8
  40173c:	ldr	x1, [sp, #16]
  401740:	mov	w2, #0x2a                  	// #42
  401744:	ldr	x3, [sp, #8]
  401748:	bl	400f00 <log_oom_internal@plt>
  40174c:	stur	w0, [x29, #-4]
  401750:	b	4017cc <parse+0x19c>
  401754:	b	4017c8 <parse+0x198>
  401758:	ldur	x0, [x29, #-16]
  40175c:	adrp	x1, 402000 <generate+0x824>
  401760:	add	x1, x1, #0x790
  401764:	bl	400ee0 <proc_cmdline_key_streq@plt>
  401768:	tbnz	w0, #0, 401770 <parse+0x140>
  40176c:	b	4017c8 <parse+0x198>
  401770:	ldur	x0, [x29, #-16]
  401774:	ldur	x1, [x29, #-24]
  401778:	bl	402368 <proc_cmdline_value_missing>
  40177c:	tbnz	w0, #0, 401784 <parse+0x154>
  401780:	b	40178c <parse+0x15c>
  401784:	stur	wzr, [x29, #-4]
  401788:	b	4017cc <parse+0x19c>
  40178c:	ldur	x1, [x29, #-24]
  401790:	adrp	x0, 420000 <completed.8445>
  401794:	add	x0, x0, #0x18
  401798:	bl	400f10 <free_and_strdup@plt>
  40179c:	cmp	w0, #0x0
  4017a0:	cset	w8, ge  // ge = tcont
  4017a4:	tbnz	w8, #0, 4017c8 <parse+0x198>
  4017a8:	mov	w8, wzr
  4017ac:	mov	w0, w8
  4017b0:	ldr	x1, [sp, #16]
  4017b4:	mov	w2, #0x32                  	// #50
  4017b8:	ldr	x3, [sp, #8]
  4017bc:	bl	400f00 <log_oom_internal@plt>
  4017c0:	stur	w0, [x29, #-4]
  4017c4:	b	4017cc <parse+0x19c>
  4017c8:	stur	wzr, [x29, #-4]
  4017cc:	ldur	w0, [x29, #-4]
  4017d0:	ldp	x29, x30, [sp, #64]
  4017d4:	add	sp, sp, #0x50
  4017d8:	ret

00000000004017dc <generate>:
  4017dc:	stp	x29, x30, [sp, #-32]!
  4017e0:	stp	x28, x19, [sp, #16]
  4017e4:	mov	x29, sp
  4017e8:	sub	sp, sp, #0x1e0
  4017ec:	mov	x19, sp
  4017f0:	mov	x8, xzr
  4017f4:	adrp	x9, 420000 <completed.8445>
  4017f8:	add	x9, x9, #0x8
  4017fc:	adrp	x10, 420000 <completed.8445>
  401800:	add	x10, x10, #0x10
  401804:	adrp	x11, 420000 <completed.8445>
  401808:	add	x11, x11, #0x20
  40180c:	adrp	x12, 402000 <generate+0x824>
  401810:	add	x12, x12, #0x690
  401814:	add	x12, x12, #0x3
  401818:	adrp	x13, 402000 <generate+0x824>
  40181c:	add	x13, x13, #0x89f
  401820:	adrp	x14, 402000 <generate+0x824>
  401824:	add	x14, x14, #0x87c
  401828:	adrp	x15, 402000 <generate+0x824>
  40182c:	add	x15, x15, #0x869
  401830:	adrp	x16, 402000 <generate+0x824>
  401834:	add	x16, x16, #0x83e
  401838:	stur	x8, [x29, #-16]
  40183c:	ldr	x0, [x9]
  401840:	str	x10, [x19, #144]
  401844:	str	x11, [x19, #136]
  401848:	str	x12, [x19, #128]
  40184c:	str	x13, [x19, #120]
  401850:	str	x14, [x19, #112]
  401854:	str	x15, [x19, #104]
  401858:	str	x16, [x19, #96]
  40185c:	bl	402468 <strv_isempty>
  401860:	tbnz	w0, #0, 401868 <generate+0x8c>
  401864:	b	401884 <generate+0xa8>
  401868:	ldr	x8, [x19, #144]
  40186c:	ldr	x9, [x8]
  401870:	cbnz	x9, 401884 <generate+0xa8>
  401874:	stur	wzr, [x29, #-4]
  401878:	mov	w8, #0x1                   	// #1
  40187c:	stur	w8, [x29, #-40]
  401880:	b	40234c <generate+0xb70>
  401884:	ldr	x8, [x19, #136]
  401888:	ldr	x9, [x8]
  40188c:	sub	x10, x29, #0x38
  401890:	stur	x9, [x29, #-56]
  401894:	adrp	x9, 402000 <generate+0x824>
  401898:	add	x9, x9, #0x821
  40189c:	str	x9, [x10, #8]
  4018a0:	stur	xzr, [x29, #-80]
  4018a4:	stur	xzr, [x29, #-88]
  4018a8:	ldur	x8, [x29, #-88]
  4018ac:	mov	w9, #0x0                   	// #0
  4018b0:	cmp	x8, #0x2
  4018b4:	str	w9, [x19, #92]
  4018b8:	b.cs	4018e0 <generate+0x104>  // b.hs, b.nlast
  4018bc:	ldur	x8, [x29, #-88]
  4018c0:	mov	x9, #0x8                   	// #8
  4018c4:	mul	x8, x9, x8
  4018c8:	sub	x9, x29, #0x38
  4018cc:	add	x8, x9, x8
  4018d0:	ldr	x8, [x8]
  4018d4:	cmp	x8, #0x0
  4018d8:	cset	w10, ne  // ne = any
  4018dc:	str	w10, [x19, #92]
  4018e0:	ldr	w8, [x19, #92]
  4018e4:	tbnz	w8, #0, 4018ec <generate+0x110>
  4018e8:	b	401924 <generate+0x148>
  4018ec:	ldur	x8, [x29, #-88]
  4018f0:	mov	x9, #0x8                   	// #8
  4018f4:	mul	x8, x9, x8
  4018f8:	sub	x9, x29, #0x38
  4018fc:	add	x8, x9, x8
  401900:	ldr	x0, [x8]
  401904:	bl	400f20 <strlen@plt>
  401908:	ldur	x8, [x29, #-80]
  40190c:	add	x8, x8, x0
  401910:	stur	x8, [x29, #-80]
  401914:	ldur	x8, [x29, #-88]
  401918:	add	x8, x8, #0x1
  40191c:	stur	x8, [x29, #-88]
  401920:	b	4018a8 <generate+0xcc>
  401924:	ldur	x8, [x29, #-80]
  401928:	add	x8, x8, #0x1
  40192c:	stur	x8, [x29, #-96]
  401930:	ldur	x1, [x29, #-96]
  401934:	mov	x0, #0x1                   	// #1
  401938:	bl	4024a8 <size_multiply_overflow>
  40193c:	mov	w8, #0x1                   	// #1
  401940:	eor	w9, w0, #0x1
  401944:	eor	w9, w9, w8
  401948:	eor	w9, w9, w8
  40194c:	eor	w8, w9, w8
  401950:	and	w8, w8, #0x1
  401954:	mov	w1, w8
  401958:	sxtw	x10, w1
  40195c:	cbz	x10, 40197c <generate+0x1a0>
  401960:	mov	w8, wzr
  401964:	mov	w0, w8
  401968:	ldr	x1, [x19, #96]
  40196c:	ldr	x2, [x19, #128]
  401970:	mov	w3, #0x41                  	// #65
  401974:	ldr	x4, [x19, #104]
  401978:	bl	400ea0 <log_assert_failed_realm@plt>
  40197c:	ldur	x8, [x29, #-96]
  401980:	mov	x9, #0x1                   	// #1
  401984:	mul	x8, x9, x8
  401988:	cmp	x8, #0x400, lsl #12
  40198c:	cset	w10, ls  // ls = plast
  401990:	mov	w11, #0x1                   	// #1
  401994:	eor	w10, w10, #0x1
  401998:	eor	w10, w10, w11
  40199c:	eor	w10, w10, w11
  4019a0:	and	w10, w10, #0x1
  4019a4:	mov	w0, w10
  4019a8:	sxtw	x8, w0
  4019ac:	cbz	x8, 4019cc <generate+0x1f0>
  4019b0:	mov	w8, wzr
  4019b4:	mov	w0, w8
  4019b8:	ldr	x1, [x19, #112]
  4019bc:	ldr	x2, [x19, #128]
  4019c0:	mov	w3, #0x41                  	// #65
  4019c4:	ldr	x4, [x19, #104]
  4019c8:	bl	400ea0 <log_assert_failed_realm@plt>
  4019cc:	ldur	x8, [x29, #-96]
  4019d0:	mov	x9, #0x1                   	// #1
  4019d4:	mul	x8, x9, x8
  4019d8:	mul	x8, x8, x9
  4019dc:	add	x8, x8, #0xf
  4019e0:	and	x8, x8, #0xfffffffffffffff0
  4019e4:	mov	x9, sp
  4019e8:	subs	x8, x9, x8
  4019ec:	mov	sp, x8
  4019f0:	stur	x8, [x29, #-104]
  4019f4:	ldur	x8, [x29, #-104]
  4019f8:	stur	x8, [x29, #-64]
  4019fc:	stur	x8, [x29, #-72]
  401a00:	stur	xzr, [x29, #-88]
  401a04:	ldur	x8, [x29, #-88]
  401a08:	mov	w9, #0x0                   	// #0
  401a0c:	cmp	x8, #0x2
  401a10:	str	w9, [x19, #88]
  401a14:	b.cs	401a3c <generate+0x260>  // b.hs, b.nlast
  401a18:	ldur	x8, [x29, #-88]
  401a1c:	mov	x9, #0x8                   	// #8
  401a20:	mul	x8, x9, x8
  401a24:	sub	x9, x29, #0x38
  401a28:	add	x8, x9, x8
  401a2c:	ldr	x8, [x8]
  401a30:	cmp	x8, #0x0
  401a34:	cset	w10, ne  // ne = any
  401a38:	str	w10, [x19, #88]
  401a3c:	ldr	w8, [x19, #88]
  401a40:	tbnz	w8, #0, 401a48 <generate+0x26c>
  401a44:	b	401a7c <generate+0x2a0>
  401a48:	ldur	x0, [x29, #-72]
  401a4c:	ldur	x8, [x29, #-88]
  401a50:	mov	x9, #0x8                   	// #8
  401a54:	mul	x8, x9, x8
  401a58:	sub	x9, x29, #0x38
  401a5c:	add	x8, x9, x8
  401a60:	ldr	x1, [x8]
  401a64:	bl	400f30 <stpcpy@plt>
  401a68:	stur	x0, [x29, #-72]
  401a6c:	ldur	x8, [x29, #-88]
  401a70:	add	x8, x8, #0x1
  401a74:	stur	x8, [x29, #-88]
  401a78:	b	401a04 <generate+0x228>
  401a7c:	ldur	x8, [x29, #-72]
  401a80:	mov	w9, #0x0                   	// #0
  401a84:	strb	w9, [x8]
  401a88:	ldur	x8, [x29, #-64]
  401a8c:	stur	x8, [x29, #-112]
  401a90:	ldur	x8, [x29, #-112]
  401a94:	stur	x8, [x29, #-24]
  401a98:	ldur	x0, [x29, #-24]
  401a9c:	adrp	x1, 402000 <generate+0x824>
  401aa0:	add	x1, x1, #0x89b
  401aa4:	bl	400f40 <fopen64@plt>
  401aa8:	stur	x0, [x29, #-16]
  401aac:	ldur	x8, [x29, #-16]
  401ab0:	cbnz	x8, 401b48 <generate+0x36c>
  401ab4:	mov	w8, #0x3                   	// #3
  401ab8:	stur	w8, [x29, #-116]
  401abc:	bl	400f50 <__errno_location@plt>
  401ac0:	ldr	w8, [x0]
  401ac4:	stur	w8, [x29, #-120]
  401ac8:	stur	wzr, [x29, #-124]
  401acc:	ldur	w0, [x29, #-124]
  401ad0:	bl	400e30 <log_get_max_level_realm@plt>
  401ad4:	ldur	w8, [x29, #-116]
  401ad8:	and	w8, w8, #0x7
  401adc:	cmp	w0, w8
  401ae0:	b.lt	401b18 <generate+0x33c>  // b.tstop
  401ae4:	ldur	w8, [x29, #-124]
  401ae8:	ldur	w9, [x29, #-116]
  401aec:	orr	w0, w9, w8, lsl #10
  401af0:	ldur	w1, [x29, #-120]
  401af4:	ldur	x6, [x29, #-24]
  401af8:	ldr	x2, [x19, #128]
  401afc:	mov	w3, #0x44                  	// #68
  401b00:	ldr	x4, [x19, #120]
  401b04:	adrp	x5, 402000 <generate+0x824>
  401b08:	add	x5, x5, #0x8a8
  401b0c:	bl	400e40 <log_internal_realm@plt>
  401b10:	str	w0, [x19, #84]
  401b14:	b	401b2c <generate+0x350>
  401b18:	ldur	w0, [x29, #-120]
  401b1c:	bl	400e50 <abs@plt>
  401b20:	mov	w8, wzr
  401b24:	subs	w8, w8, w0, uxtb
  401b28:	str	w8, [x19, #84]
  401b2c:	ldr	w8, [x19, #84]
  401b30:	stur	w8, [x29, #-128]
  401b34:	ldur	w8, [x29, #-128]
  401b38:	stur	w8, [x29, #-4]
  401b3c:	mov	w8, #0x1                   	// #1
  401b40:	stur	w8, [x29, #-40]
  401b44:	b	40234c <generate+0xb70>
  401b48:	ldur	x1, [x29, #-16]
  401b4c:	adrp	x0, 402000 <generate+0x824>
  401b50:	add	x0, x0, #0x8ca
  401b54:	bl	400f60 <fputs@plt>
  401b58:	ldr	x8, [x19, #144]
  401b5c:	ldr	x9, [x8]
  401b60:	mov	x0, x9
  401b64:	adrp	x1, 402000 <generate+0x824>
  401b68:	add	x1, x1, #0x977
  401b6c:	bl	402510 <streq_ptr>
  401b70:	tbnz	w0, #0, 401bbc <generate+0x3e0>
  401b74:	ldur	x0, [x29, #-16]
  401b78:	ldr	x8, [x19, #144]
  401b7c:	ldr	x9, [x8]
  401b80:	str	x0, [x19, #72]
  401b84:	str	x9, [x19, #64]
  401b88:	cbz	x9, 401b98 <generate+0x3bc>
  401b8c:	ldr	x8, [x19, #64]
  401b90:	str	x8, [x19, #56]
  401b94:	b	401ba4 <generate+0x3c8>
  401b98:	adrp	x8, 402000 <generate+0x824>
  401b9c:	add	x8, x8, #0x98e
  401ba0:	str	x8, [x19, #56]
  401ba4:	ldr	x8, [x19, #56]
  401ba8:	ldr	x0, [x19, #72]
  401bac:	adrp	x1, 402000 <generate+0x824>
  401bb0:	add	x1, x1, #0x97c
  401bb4:	mov	x2, x8
  401bb8:	bl	400f70 <fprintf@plt>
  401bbc:	adrp	x8, 420000 <completed.8445>
  401bc0:	add	x8, x8, #0x18
  401bc4:	ldr	x0, [x8]
  401bc8:	adrp	x1, 402000 <generate+0x824>
  401bcc:	add	x1, x1, #0x977
  401bd0:	bl	402510 <streq_ptr>
  401bd4:	tbnz	w0, #0, 401c24 <generate+0x448>
  401bd8:	ldur	x0, [x29, #-16]
  401bdc:	adrp	x8, 420000 <completed.8445>
  401be0:	add	x8, x8, #0x18
  401be4:	ldr	x8, [x8]
  401be8:	str	x0, [x19, #48]
  401bec:	str	x8, [x19, #40]
  401bf0:	cbz	x8, 401c00 <generate+0x424>
  401bf4:	ldr	x8, [x19, #40]
  401bf8:	str	x8, [x19, #32]
  401bfc:	b	401c0c <generate+0x430>
  401c00:	adrp	x8, 402000 <generate+0x824>
  401c04:	add	x8, x8, #0x98e
  401c08:	str	x8, [x19, #32]
  401c0c:	ldr	x8, [x19, #32]
  401c10:	ldr	x0, [x19, #48]
  401c14:	adrp	x1, 402000 <generate+0x824>
  401c18:	add	x1, x1, #0x993
  401c1c:	mov	x2, x8
  401c20:	bl	400f70 <fprintf@plt>
  401c24:	ldur	x1, [x29, #-16]
  401c28:	adrp	x0, 402000 <generate+0x824>
  401c2c:	add	x0, x0, #0x9a5
  401c30:	bl	400f60 <fputs@plt>
  401c34:	adrp	x8, 420000 <completed.8445>
  401c38:	add	x8, x8, #0x8
  401c3c:	ldr	x8, [x8]
  401c40:	stur	x8, [x29, #-32]
  401c44:	ldur	x8, [x29, #-32]
  401c48:	mov	w9, #0x0                   	// #0
  401c4c:	str	w9, [x19, #28]
  401c50:	cbz	x8, 401c68 <generate+0x48c>
  401c54:	ldur	x8, [x29, #-32]
  401c58:	ldr	x8, [x8]
  401c5c:	cmp	x8, #0x0
  401c60:	cset	w9, ne  // ne = any
  401c64:	str	w9, [x19, #28]
  401c68:	ldr	w8, [x19, #28]
  401c6c:	tbnz	w8, #0, 401c74 <generate+0x498>
  401c70:	b	401d04 <generate+0x528>
  401c74:	mov	x8, xzr
  401c78:	stur	x8, [x29, #-136]
  401c7c:	ldur	x8, [x29, #-32]
  401c80:	ldr	x0, [x8]
  401c84:	bl	402548 <specifier_escape>
  401c88:	stur	x0, [x29, #-136]
  401c8c:	ldur	x8, [x29, #-136]
  401c90:	cbnz	x8, 401cbc <generate+0x4e0>
  401c94:	mov	w8, wzr
  401c98:	mov	w0, w8
  401c9c:	ldr	x1, [x19, #128]
  401ca0:	mov	w2, #0x5e                  	// #94
  401ca4:	ldr	x3, [x19, #120]
  401ca8:	bl	400f00 <log_oom_internal@plt>
  401cac:	stur	w0, [x29, #-4]
  401cb0:	mov	w8, #0x1                   	// #1
  401cb4:	stur	w8, [x29, #-40]
  401cb8:	b	401cd4 <generate+0x4f8>
  401cbc:	ldur	x0, [x29, #-16]
  401cc0:	ldur	x2, [x29, #-136]
  401cc4:	adrp	x1, 402000 <generate+0x824>
  401cc8:	add	x1, x1, #0x9dd
  401ccc:	bl	400f70 <fprintf@plt>
  401cd0:	stur	wzr, [x29, #-40]
  401cd4:	sub	x0, x29, #0x88
  401cd8:	bl	401608 <freep>
  401cdc:	ldur	w8, [x29, #-40]
  401ce0:	cmp	w8, #0x0
  401ce4:	cset	w8, eq  // eq = none
  401ce8:	eor	w8, w8, #0x1
  401cec:	tbnz	w8, #0, 40234c <generate+0xb70>
  401cf0:	b	401cf4 <generate+0x518>
  401cf4:	ldur	x8, [x29, #-32]
  401cf8:	add	x8, x8, #0x8
  401cfc:	stur	x8, [x29, #-32]
  401d00:	b	401c44 <generate+0x468>
  401d04:	ldur	x0, [x29, #-16]
  401d08:	bl	400f80 <fflush_and_check@plt>
  401d0c:	stur	w0, [x29, #-36]
  401d10:	ldur	w8, [x29, #-36]
  401d14:	cmp	w8, #0x0
  401d18:	cset	w8, ge  // ge = tcont
  401d1c:	tbnz	w8, #0, 401db0 <generate+0x5d4>
  401d20:	mov	w8, #0x3                   	// #3
  401d24:	stur	w8, [x29, #-140]
  401d28:	ldur	w8, [x29, #-36]
  401d2c:	stur	w8, [x29, #-144]
  401d30:	stur	wzr, [x29, #-148]
  401d34:	ldur	w0, [x29, #-148]
  401d38:	bl	400e30 <log_get_max_level_realm@plt>
  401d3c:	ldur	w8, [x29, #-140]
  401d40:	and	w8, w8, #0x7
  401d44:	cmp	w0, w8
  401d48:	b.lt	401d80 <generate+0x5a4>  // b.tstop
  401d4c:	ldur	w8, [x29, #-148]
  401d50:	ldur	w9, [x29, #-140]
  401d54:	orr	w0, w9, w8, lsl #10
  401d58:	ldur	w1, [x29, #-144]
  401d5c:	ldur	x6, [x29, #-24]
  401d60:	ldr	x2, [x19, #128]
  401d64:	mov	w3, #0x65                  	// #101
  401d68:	ldr	x4, [x19, #120]
  401d6c:	adrp	x5, 402000 <generate+0x824>
  401d70:	add	x5, x5, #0x9eb
  401d74:	bl	400e40 <log_internal_realm@plt>
  401d78:	str	w0, [x19, #24]
  401d7c:	b	401d94 <generate+0x5b8>
  401d80:	ldur	w0, [x29, #-144]
  401d84:	bl	400e50 <abs@plt>
  401d88:	mov	w8, wzr
  401d8c:	subs	w8, w8, w0, uxtb
  401d90:	str	w8, [x19, #24]
  401d94:	ldr	w8, [x19, #24]
  401d98:	stur	w8, [x29, #-152]
  401d9c:	ldur	w8, [x29, #-152]
  401da0:	stur	w8, [x29, #-4]
  401da4:	mov	w8, #0x1                   	// #1
  401da8:	stur	w8, [x29, #-40]
  401dac:	b	40234c <generate+0xb70>
  401db0:	ldr	x8, [x19, #136]
  401db4:	ldr	x9, [x8]
  401db8:	sub	x10, x29, #0xa8
  401dbc:	stur	x9, [x29, #-168]
  401dc0:	adrp	x9, 402000 <generate+0x824>
  401dc4:	add	x9, x9, #0xa0c
  401dc8:	str	x9, [x10, #8]
  401dcc:	stur	xzr, [x29, #-192]
  401dd0:	stur	xzr, [x29, #-200]
  401dd4:	ldur	x8, [x29, #-200]
  401dd8:	mov	w9, #0x0                   	// #0
  401ddc:	cmp	x8, #0x2
  401de0:	str	w9, [x19, #20]
  401de4:	b.cs	401e0c <generate+0x630>  // b.hs, b.nlast
  401de8:	ldur	x8, [x29, #-200]
  401dec:	mov	x9, #0x8                   	// #8
  401df0:	mul	x8, x9, x8
  401df4:	sub	x9, x29, #0xa8
  401df8:	add	x8, x9, x8
  401dfc:	ldr	x8, [x8]
  401e00:	cmp	x8, #0x0
  401e04:	cset	w10, ne  // ne = any
  401e08:	str	w10, [x19, #20]
  401e0c:	ldr	w8, [x19, #20]
  401e10:	tbnz	w8, #0, 401e18 <generate+0x63c>
  401e14:	b	401e50 <generate+0x674>
  401e18:	ldur	x8, [x29, #-200]
  401e1c:	mov	x9, #0x8                   	// #8
  401e20:	mul	x8, x9, x8
  401e24:	sub	x9, x29, #0xa8
  401e28:	add	x8, x9, x8
  401e2c:	ldr	x0, [x8]
  401e30:	bl	400f20 <strlen@plt>
  401e34:	ldur	x8, [x29, #-192]
  401e38:	add	x8, x8, x0
  401e3c:	stur	x8, [x29, #-192]
  401e40:	ldur	x8, [x29, #-200]
  401e44:	add	x8, x8, #0x1
  401e48:	stur	x8, [x29, #-200]
  401e4c:	b	401dd4 <generate+0x5f8>
  401e50:	ldur	x8, [x29, #-192]
  401e54:	add	x8, x8, #0x1
  401e58:	stur	x8, [x29, #-208]
  401e5c:	ldur	x1, [x29, #-208]
  401e60:	mov	x0, #0x1                   	// #1
  401e64:	bl	4024a8 <size_multiply_overflow>
  401e68:	mov	w8, #0x1                   	// #1
  401e6c:	eor	w9, w0, #0x1
  401e70:	eor	w9, w9, w8
  401e74:	eor	w9, w9, w8
  401e78:	eor	w8, w9, w8
  401e7c:	and	w8, w8, #0x1
  401e80:	mov	w1, w8
  401e84:	sxtw	x10, w1
  401e88:	cbz	x10, 401ea8 <generate+0x6cc>
  401e8c:	mov	w8, wzr
  401e90:	mov	w0, w8
  401e94:	ldr	x1, [x19, #96]
  401e98:	ldr	x2, [x19, #128]
  401e9c:	mov	w3, #0x68                  	// #104
  401ea0:	ldr	x4, [x19, #104]
  401ea4:	bl	400ea0 <log_assert_failed_realm@plt>
  401ea8:	ldur	x8, [x29, #-208]
  401eac:	mov	x9, #0x1                   	// #1
  401eb0:	mul	x8, x9, x8
  401eb4:	cmp	x8, #0x400, lsl #12
  401eb8:	cset	w10, ls  // ls = plast
  401ebc:	mov	w11, #0x1                   	// #1
  401ec0:	eor	w10, w10, #0x1
  401ec4:	eor	w10, w10, w11
  401ec8:	eor	w10, w10, w11
  401ecc:	and	w10, w10, #0x1
  401ed0:	mov	w0, w10
  401ed4:	sxtw	x8, w0
  401ed8:	cbz	x8, 401ef8 <generate+0x71c>
  401edc:	mov	w8, wzr
  401ee0:	mov	w0, w8
  401ee4:	ldr	x1, [x19, #112]
  401ee8:	ldr	x2, [x19, #128]
  401eec:	mov	w3, #0x68                  	// #104
  401ef0:	ldr	x4, [x19, #104]
  401ef4:	bl	400ea0 <log_assert_failed_realm@plt>
  401ef8:	ldur	x8, [x29, #-208]
  401efc:	mov	x9, #0x1                   	// #1
  401f00:	mul	x8, x9, x8
  401f04:	mul	x8, x8, x9
  401f08:	add	x8, x8, #0xf
  401f0c:	and	x8, x8, #0xfffffffffffffff0
  401f10:	mov	x9, sp
  401f14:	subs	x8, x9, x8
  401f18:	mov	sp, x8
  401f1c:	stur	x8, [x29, #-216]
  401f20:	ldur	x8, [x29, #-216]
  401f24:	stur	x8, [x29, #-176]
  401f28:	stur	x8, [x29, #-184]
  401f2c:	stur	xzr, [x29, #-200]
  401f30:	ldur	x8, [x29, #-200]
  401f34:	mov	w9, #0x0                   	// #0
  401f38:	cmp	x8, #0x2
  401f3c:	str	w9, [x19, #16]
  401f40:	b.cs	401f68 <generate+0x78c>  // b.hs, b.nlast
  401f44:	ldur	x8, [x29, #-200]
  401f48:	mov	x9, #0x8                   	// #8
  401f4c:	mul	x8, x9, x8
  401f50:	sub	x9, x29, #0xa8
  401f54:	add	x8, x9, x8
  401f58:	ldr	x8, [x8]
  401f5c:	cmp	x8, #0x0
  401f60:	cset	w10, ne  // ne = any
  401f64:	str	w10, [x19, #16]
  401f68:	ldr	w8, [x19, #16]
  401f6c:	tbnz	w8, #0, 401f74 <generate+0x798>
  401f70:	b	401fa8 <generate+0x7cc>
  401f74:	ldur	x0, [x29, #-184]
  401f78:	ldur	x8, [x29, #-200]
  401f7c:	mov	x9, #0x8                   	// #8
  401f80:	mul	x8, x9, x8
  401f84:	sub	x9, x29, #0xa8
  401f88:	add	x8, x9, x8
  401f8c:	ldr	x1, [x8]
  401f90:	bl	400f30 <stpcpy@plt>
  401f94:	stur	x0, [x29, #-184]
  401f98:	ldur	x8, [x29, #-200]
  401f9c:	add	x8, x8, #0x1
  401fa0:	stur	x8, [x29, #-200]
  401fa4:	b	401f30 <generate+0x754>
  401fa8:	ldur	x8, [x29, #-184]
  401fac:	mov	w9, #0x0                   	// #0
  401fb0:	strb	w9, [x8]
  401fb4:	ldur	x8, [x29, #-176]
  401fb8:	stur	x8, [x29, #-224]
  401fbc:	ldur	x8, [x29, #-224]
  401fc0:	stur	x8, [x29, #-24]
  401fc4:	ldur	x0, [x29, #-24]
  401fc8:	adrp	x1, 402000 <generate+0x824>
  401fcc:	add	x1, x1, #0xa28
  401fd0:	mov	w2, #0x41                  	// #65
  401fd4:	bl	40257c <write_string_file>
  401fd8:	stur	w0, [x29, #-36]
  401fdc:	ldur	w9, [x29, #-36]
  401fe0:	cmp	w9, #0x0
  401fe4:	cset	w9, ge  // ge = tcont
  401fe8:	tbnz	w9, #0, 40207c <generate+0x8a0>
  401fec:	mov	w8, #0x3                   	// #3
  401ff0:	stur	w8, [x29, #-228]
  401ff4:	ldur	w8, [x29, #-36]
  401ff8:	stur	w8, [x29, #-232]
  401ffc:	stur	wzr, [x29, #-236]
  402000:	ldur	w0, [x29, #-236]
  402004:	bl	400e30 <log_get_max_level_realm@plt>
  402008:	ldur	w8, [x29, #-228]
  40200c:	and	w8, w8, #0x7
  402010:	cmp	w0, w8
  402014:	b.lt	40204c <generate+0x870>  // b.tstop
  402018:	ldur	w8, [x29, #-236]
  40201c:	ldur	w9, [x29, #-228]
  402020:	orr	w0, w9, w8, lsl #10
  402024:	ldur	w1, [x29, #-232]
  402028:	ldur	x6, [x29, #-24]
  40202c:	ldr	x2, [x19, #128]
  402030:	mov	w3, #0x74                  	// #116
  402034:	ldr	x4, [x19, #120]
  402038:	adrp	x5, 402000 <generate+0x824>
  40203c:	add	x5, x5, #0x8a8
  402040:	bl	400e40 <log_internal_realm@plt>
  402044:	str	w0, [x19, #12]
  402048:	b	402060 <generate+0x884>
  40204c:	ldur	w0, [x29, #-232]
  402050:	bl	400e50 <abs@plt>
  402054:	mov	w8, wzr
  402058:	subs	w8, w8, w0, uxtb
  40205c:	str	w8, [x19, #12]
  402060:	ldr	w8, [x19, #12]
  402064:	str	w8, [x19, #240]
  402068:	ldr	w8, [x19, #240]
  40206c:	stur	w8, [x29, #-4]
  402070:	mov	w8, #0x1                   	// #1
  402074:	stur	w8, [x29, #-40]
  402078:	b	40234c <generate+0xb70>
  40207c:	ldr	x8, [x19, #136]
  402080:	ldr	x9, [x8]
  402084:	add	x10, x19, #0xe0
  402088:	str	x9, [x19, #224]
  40208c:	adrp	x9, 402000 <generate+0x824>
  402090:	add	x9, x9, #0xb1c
  402094:	str	x9, [x10, #8]
  402098:	str	xzr, [x19, #200]
  40209c:	str	xzr, [x19, #192]
  4020a0:	ldr	x8, [x19, #192]
  4020a4:	mov	w9, #0x0                   	// #0
  4020a8:	cmp	x8, #0x2
  4020ac:	str	w9, [x19, #8]
  4020b0:	b.cs	4020d8 <generate+0x8fc>  // b.hs, b.nlast
  4020b4:	ldr	x8, [x19, #192]
  4020b8:	mov	x9, #0x8                   	// #8
  4020bc:	mul	x8, x9, x8
  4020c0:	add	x9, x19, #0xe0
  4020c4:	add	x8, x9, x8
  4020c8:	ldr	x8, [x8]
  4020cc:	cmp	x8, #0x0
  4020d0:	cset	w10, ne  // ne = any
  4020d4:	str	w10, [x19, #8]
  4020d8:	ldr	w8, [x19, #8]
  4020dc:	tbnz	w8, #0, 4020e4 <generate+0x908>
  4020e0:	b	40211c <generate+0x940>
  4020e4:	ldr	x8, [x19, #192]
  4020e8:	mov	x9, #0x8                   	// #8
  4020ec:	mul	x8, x9, x8
  4020f0:	add	x9, x19, #0xe0
  4020f4:	add	x8, x9, x8
  4020f8:	ldr	x0, [x8]
  4020fc:	bl	400f20 <strlen@plt>
  402100:	ldr	x8, [x19, #200]
  402104:	add	x8, x8, x0
  402108:	str	x8, [x19, #200]
  40210c:	ldr	x8, [x19, #192]
  402110:	add	x8, x8, #0x1
  402114:	str	x8, [x19, #192]
  402118:	b	4020a0 <generate+0x8c4>
  40211c:	ldr	x8, [x19, #200]
  402120:	add	x8, x8, #0x1
  402124:	str	x8, [x19, #184]
  402128:	ldr	x1, [x19, #184]
  40212c:	mov	x0, #0x1                   	// #1
  402130:	bl	4024a8 <size_multiply_overflow>
  402134:	mov	w8, #0x1                   	// #1
  402138:	eor	w9, w0, #0x1
  40213c:	eor	w9, w9, w8
  402140:	eor	w9, w9, w8
  402144:	eor	w8, w9, w8
  402148:	and	w8, w8, #0x1
  40214c:	mov	w1, w8
  402150:	sxtw	x10, w1
  402154:	cbz	x10, 402174 <generate+0x998>
  402158:	mov	w8, wzr
  40215c:	mov	w0, w8
  402160:	ldr	x1, [x19, #96]
  402164:	ldr	x2, [x19, #128]
  402168:	mov	w3, #0x77                  	// #119
  40216c:	ldr	x4, [x19, #104]
  402170:	bl	400ea0 <log_assert_failed_realm@plt>
  402174:	ldr	x8, [x19, #184]
  402178:	mov	x9, #0x1                   	// #1
  40217c:	mul	x8, x9, x8
  402180:	cmp	x8, #0x400, lsl #12
  402184:	cset	w10, ls  // ls = plast
  402188:	mov	w11, #0x1                   	// #1
  40218c:	eor	w10, w10, #0x1
  402190:	eor	w10, w10, w11
  402194:	eor	w10, w10, w11
  402198:	and	w10, w10, #0x1
  40219c:	mov	w0, w10
  4021a0:	sxtw	x8, w0
  4021a4:	cbz	x8, 4021c4 <generate+0x9e8>
  4021a8:	mov	w8, wzr
  4021ac:	mov	w0, w8
  4021b0:	ldr	x1, [x19, #112]
  4021b4:	ldr	x2, [x19, #128]
  4021b8:	mov	w3, #0x77                  	// #119
  4021bc:	ldr	x4, [x19, #104]
  4021c0:	bl	400ea0 <log_assert_failed_realm@plt>
  4021c4:	ldr	x8, [x19, #184]
  4021c8:	mov	x9, #0x1                   	// #1
  4021cc:	mul	x8, x9, x8
  4021d0:	mul	x8, x8, x9
  4021d4:	add	x8, x8, #0xf
  4021d8:	and	x8, x8, #0xfffffffffffffff0
  4021dc:	mov	x9, sp
  4021e0:	subs	x8, x9, x8
  4021e4:	mov	sp, x8
  4021e8:	str	x8, [x19, #176]
  4021ec:	ldr	x8, [x19, #176]
  4021f0:	str	x8, [x19, #216]
  4021f4:	str	x8, [x19, #208]
  4021f8:	str	xzr, [x19, #192]
  4021fc:	ldr	x8, [x19, #192]
  402200:	mov	w9, #0x0                   	// #0
  402204:	cmp	x8, #0x2
  402208:	str	w9, [x19, #4]
  40220c:	b.cs	402234 <generate+0xa58>  // b.hs, b.nlast
  402210:	ldr	x8, [x19, #192]
  402214:	mov	x9, #0x8                   	// #8
  402218:	mul	x8, x9, x8
  40221c:	add	x9, x19, #0xe0
  402220:	add	x8, x9, x8
  402224:	ldr	x8, [x8]
  402228:	cmp	x8, #0x0
  40222c:	cset	w10, ne  // ne = any
  402230:	str	w10, [x19, #4]
  402234:	ldr	w8, [x19, #4]
  402238:	tbnz	w8, #0, 402240 <generate+0xa64>
  40223c:	b	402274 <generate+0xa98>
  402240:	ldr	x0, [x19, #208]
  402244:	ldr	x8, [x19, #192]
  402248:	mov	x9, #0x8                   	// #8
  40224c:	mul	x8, x9, x8
  402250:	add	x9, x19, #0xe0
  402254:	add	x8, x9, x8
  402258:	ldr	x1, [x8]
  40225c:	bl	400f30 <stpcpy@plt>
  402260:	str	x0, [x19, #208]
  402264:	ldr	x8, [x19, #192]
  402268:	add	x8, x8, #0x1
  40226c:	str	x8, [x19, #192]
  402270:	b	4021fc <generate+0xa20>
  402274:	ldr	x8, [x19, #208]
  402278:	mov	w9, #0x0                   	// #0
  40227c:	strb	w9, [x8]
  402280:	ldr	x8, [x19, #216]
  402284:	str	x8, [x19, #168]
  402288:	ldr	x8, [x19, #168]
  40228c:	stur	x8, [x29, #-24]
  402290:	ldur	x1, [x29, #-24]
  402294:	adrp	x0, 402000 <generate+0x824>
  402298:	add	x0, x0, #0xb2c
  40229c:	bl	400f90 <symlink@plt>
  4022a0:	cmp	w0, #0x0
  4022a4:	cset	w9, ge  // ge = tcont
  4022a8:	tbnz	w9, #0, 402340 <generate+0xb64>
  4022ac:	mov	w8, #0x3                   	// #3
  4022b0:	str	w8, [x19, #164]
  4022b4:	bl	400f50 <__errno_location@plt>
  4022b8:	ldr	w8, [x0]
  4022bc:	str	w8, [x19, #160]
  4022c0:	str	wzr, [x19, #156]
  4022c4:	ldr	w0, [x19, #156]
  4022c8:	bl	400e30 <log_get_max_level_realm@plt>
  4022cc:	ldr	w8, [x19, #164]
  4022d0:	and	w8, w8, #0x7
  4022d4:	cmp	w0, w8
  4022d8:	b.lt	402310 <generate+0xb34>  // b.tstop
  4022dc:	ldr	w8, [x19, #156]
  4022e0:	ldr	w9, [x19, #164]
  4022e4:	orr	w0, w9, w8, lsl #10
  4022e8:	ldr	w1, [x19, #160]
  4022ec:	ldur	x6, [x29, #-24]
  4022f0:	ldr	x2, [x19, #128]
  4022f4:	mov	w3, #0x79                  	// #121
  4022f8:	ldr	x4, [x19, #120]
  4022fc:	adrp	x5, 402000 <generate+0x824>
  402300:	add	x5, x5, #0xb47
  402304:	bl	400e40 <log_internal_realm@plt>
  402308:	str	w0, [x19]
  40230c:	b	402324 <generate+0xb48>
  402310:	ldr	w0, [x19, #160]
  402314:	bl	400e50 <abs@plt>
  402318:	mov	w8, wzr
  40231c:	subs	w8, w8, w0, uxtb
  402320:	str	w8, [x19]
  402324:	ldr	w8, [x19]
  402328:	str	w8, [x19, #152]
  40232c:	ldr	w8, [x19, #152]
  402330:	stur	w8, [x29, #-4]
  402334:	mov	w8, #0x1                   	// #1
  402338:	stur	w8, [x29, #-40]
  40233c:	b	40234c <generate+0xb70>
  402340:	stur	wzr, [x29, #-4]
  402344:	mov	w8, #0x1                   	// #1
  402348:	stur	w8, [x29, #-40]
  40234c:	sub	x0, x29, #0x10
  402350:	bl	402440 <fclosep>
  402354:	ldur	w0, [x29, #-4]
  402358:	mov	sp, x29
  40235c:	ldp	x28, x19, [sp, #16]
  402360:	ldp	x29, x30, [sp], #32
  402364:	ret

0000000000402368 <proc_cmdline_value_missing>:
  402368:	sub	sp, sp, #0x50
  40236c:	stp	x29, x30, [sp, #64]
  402370:	add	x29, sp, #0x40
  402374:	adrp	x8, 402000 <generate+0x824>
  402378:	add	x8, x8, #0x7ab
  40237c:	add	x2, x8, #0x3
  402380:	stur	x0, [x29, #-16]
  402384:	stur	x1, [x29, #-24]
  402388:	ldur	x8, [x29, #-24]
  40238c:	str	x2, [sp, #16]
  402390:	cbnz	x8, 402420 <proc_cmdline_value_missing+0xb8>
  402394:	mov	w8, #0x4                   	// #4
  402398:	stur	w8, [x29, #-28]
  40239c:	str	wzr, [sp, #32]
  4023a0:	str	wzr, [sp, #28]
  4023a4:	ldr	w0, [sp, #28]
  4023a8:	bl	400e30 <log_get_max_level_realm@plt>
  4023ac:	ldur	w8, [x29, #-28]
  4023b0:	and	w8, w8, #0x7
  4023b4:	cmp	w0, w8
  4023b8:	b.lt	4023f4 <proc_cmdline_value_missing+0x8c>  // b.tstop
  4023bc:	ldr	w8, [sp, #28]
  4023c0:	ldur	w9, [x29, #-28]
  4023c4:	orr	w0, w9, w8, lsl #10
  4023c8:	ldr	w1, [sp, #32]
  4023cc:	ldur	x6, [x29, #-16]
  4023d0:	ldr	x2, [sp, #16]
  4023d4:	mov	w3, #0x21                  	// #33
  4023d8:	adrp	x4, 402000 <generate+0x824>
  4023dc:	add	x4, x4, #0x7c7
  4023e0:	adrp	x5, 402000 <generate+0x824>
  4023e4:	add	x5, x5, #0x7e2
  4023e8:	bl	400e40 <log_internal_realm@plt>
  4023ec:	str	w0, [sp, #12]
  4023f0:	b	402408 <proc_cmdline_value_missing+0xa0>
  4023f4:	ldr	w0, [sp, #32]
  4023f8:	bl	400e50 <abs@plt>
  4023fc:	mov	w8, wzr
  402400:	subs	w8, w8, w0, uxtb
  402404:	str	w8, [sp, #12]
  402408:	ldr	w8, [sp, #12]
  40240c:	str	w8, [sp, #24]
  402410:	mov	w8, #0x1                   	// #1
  402414:	and	w8, w8, #0x1
  402418:	sturb	w8, [x29, #-1]
  40241c:	b	40242c <proc_cmdline_value_missing+0xc4>
  402420:	mov	w8, wzr
  402424:	and	w8, w8, #0x1
  402428:	sturb	w8, [x29, #-1]
  40242c:	ldurb	w8, [x29, #-1]
  402430:	and	w0, w8, #0x1
  402434:	ldp	x29, x30, [sp, #64]
  402438:	add	sp, sp, #0x50
  40243c:	ret

0000000000402440 <fclosep>:
  402440:	sub	sp, sp, #0x20
  402444:	stp	x29, x30, [sp, #16]
  402448:	add	x29, sp, #0x10
  40244c:	str	x0, [sp, #8]
  402450:	ldr	x8, [sp, #8]
  402454:	ldr	x0, [x8]
  402458:	bl	400fa0 <safe_fclose@plt>
  40245c:	ldp	x29, x30, [sp, #16]
  402460:	add	sp, sp, #0x20
  402464:	ret

0000000000402468 <strv_isempty>:
  402468:	sub	sp, sp, #0x10
  40246c:	str	x0, [sp, #8]
  402470:	ldr	x8, [sp, #8]
  402474:	mov	w9, #0x1                   	// #1
  402478:	str	w9, [sp, #4]
  40247c:	cbz	x8, 402498 <strv_isempty+0x30>
  402480:	ldr	x8, [sp, #8]
  402484:	ldr	x8, [x8]
  402488:	cmp	x8, #0x0
  40248c:	cset	w9, ne  // ne = any
  402490:	eor	w9, w9, #0x1
  402494:	str	w9, [sp, #4]
  402498:	ldr	w8, [sp, #4]
  40249c:	and	w0, w8, #0x1
  4024a0:	add	sp, sp, #0x10
  4024a4:	ret

00000000004024a8 <size_multiply_overflow>:
  4024a8:	sub	sp, sp, #0x20
  4024ac:	str	x0, [sp, #24]
  4024b0:	str	x1, [sp, #16]
  4024b4:	ldr	x8, [sp, #16]
  4024b8:	mov	w9, #0x0                   	// #0
  4024bc:	str	w9, [sp, #12]
  4024c0:	cbz	x8, 4024e0 <size_multiply_overflow+0x38>
  4024c4:	ldr	x8, [sp, #24]
  4024c8:	ldr	x9, [sp, #16]
  4024cc:	mov	x10, #0xffffffffffffffff    	// #-1
  4024d0:	udiv	x9, x10, x9
  4024d4:	cmp	x8, x9
  4024d8:	cset	w11, hi  // hi = pmore
  4024dc:	str	w11, [sp, #12]
  4024e0:	ldr	w8, [sp, #12]
  4024e4:	mov	w9, #0x1                   	// #1
  4024e8:	eor	w8, w8, #0x1
  4024ec:	eor	w8, w8, w9
  4024f0:	and	w8, w8, #0x1
  4024f4:	mov	w0, w8
  4024f8:	sxtw	x10, w0
  4024fc:	cmp	x10, #0x0
  402500:	cset	w8, ne  // ne = any
  402504:	and	w0, w8, #0x1
  402508:	add	sp, sp, #0x20
  40250c:	ret

0000000000402510 <streq_ptr>:
  402510:	sub	sp, sp, #0x20
  402514:	stp	x29, x30, [sp, #16]
  402518:	add	x29, sp, #0x10
  40251c:	str	x0, [sp, #8]
  402520:	str	x1, [sp]
  402524:	ldr	x0, [sp, #8]
  402528:	ldr	x1, [sp]
  40252c:	bl	400fb0 <strcmp_ptr@plt>
  402530:	cmp	w0, #0x0
  402534:	cset	w8, eq  // eq = none
  402538:	and	w0, w8, #0x1
  40253c:	ldp	x29, x30, [sp, #16]
  402540:	add	sp, sp, #0x20
  402544:	ret

0000000000402548 <specifier_escape>:
  402548:	sub	sp, sp, #0x20
  40254c:	stp	x29, x30, [sp, #16]
  402550:	add	x29, sp, #0x10
  402554:	adrp	x1, 402000 <generate+0x824>
  402558:	add	x1, x1, #0xb86
  40255c:	adrp	x2, 402000 <generate+0x824>
  402560:	add	x2, x2, #0xb88
  402564:	str	x0, [sp, #8]
  402568:	ldr	x0, [sp, #8]
  40256c:	bl	400fc0 <strreplace@plt>
  402570:	ldp	x29, x30, [sp, #16]
  402574:	add	sp, sp, #0x20
  402578:	ret

000000000040257c <write_string_file>:
  40257c:	sub	sp, sp, #0x30
  402580:	stp	x29, x30, [sp, #32]
  402584:	add	x29, sp, #0x20
  402588:	mov	x8, xzr
  40258c:	stur	x0, [x29, #-8]
  402590:	str	x1, [sp, #16]
  402594:	str	w2, [sp, #12]
  402598:	ldur	x0, [x29, #-8]
  40259c:	ldr	x1, [sp, #16]
  4025a0:	ldr	w2, [sp, #12]
  4025a4:	mov	x3, x8
  4025a8:	bl	400fd0 <write_string_file_ts@plt>
  4025ac:	ldp	x29, x30, [sp, #32]
  4025b0:	add	sp, sp, #0x30
  4025b4:	ret

00000000004025b8 <ALIGN_TO>:
  4025b8:	sub	sp, sp, #0x10
  4025bc:	str	x0, [sp, #8]
  4025c0:	str	x1, [sp]
  4025c4:	ldr	x8, [sp, #8]
  4025c8:	ldr	x9, [sp]
  4025cc:	add	x8, x8, x9
  4025d0:	subs	x8, x8, #0x1
  4025d4:	ldr	x9, [sp]
  4025d8:	subs	x9, x9, #0x1
  4025dc:	bic	x0, x8, x9
  4025e0:	add	sp, sp, #0x10
  4025e4:	ret

00000000004025e8 <__libc_csu_init>:
  4025e8:	stp	x29, x30, [sp, #-64]!
  4025ec:	mov	x29, sp
  4025f0:	stp	x19, x20, [sp, #16]
  4025f4:	adrp	x20, 41f000 <__FRAME_END__+0x1c350>
  4025f8:	add	x20, x20, #0xcb0
  4025fc:	stp	x21, x22, [sp, #32]
  402600:	adrp	x21, 41f000 <__FRAME_END__+0x1c350>
  402604:	add	x21, x21, #0xca8
  402608:	sub	x20, x20, x21
  40260c:	mov	w22, w0
  402610:	stp	x23, x24, [sp, #48]
  402614:	mov	x23, x1
  402618:	mov	x24, x2
  40261c:	bl	400db8 <_init>
  402620:	cmp	xzr, x20, asr #3
  402624:	b.eq	402650 <__libc_csu_init+0x68>  // b.none
  402628:	asr	x20, x20, #3
  40262c:	mov	x19, #0x0                   	// #0
  402630:	ldr	x3, [x21, x19, lsl #3]
  402634:	mov	x2, x24
  402638:	add	x19, x19, #0x1
  40263c:	mov	x1, x23
  402640:	mov	w0, w22
  402644:	blr	x3
  402648:	cmp	x20, x19
  40264c:	b.ne	402630 <__libc_csu_init+0x48>  // b.any
  402650:	ldp	x19, x20, [sp, #16]
  402654:	ldp	x21, x22, [sp, #32]
  402658:	ldp	x23, x24, [sp, #48]
  40265c:	ldp	x29, x30, [sp], #64
  402660:	ret
  402664:	nop

0000000000402668 <__libc_csu_fini>:
  402668:	ret

Disassembly of section .fini:

000000000040266c <_fini>:
  40266c:	stp	x29, x30, [sp, #-16]!
  402670:	mov	x29, sp
  402674:	ldp	x29, x30, [sp], #16
  402678:	ret
