In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libbz2.a_clang_-O2:

blocksort.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_blockSort>:
       0:	stp	x29, x30, [sp, #-96]!
       4:	stp	x28, x27, [sp, #16]
       8:	stp	x26, x25, [sp, #32]
       c:	stp	x24, x23, [sp, #48]
      10:	stp	x22, x21, [sp, #64]
      14:	stp	x20, x19, [sp, #80]
      18:	mov	x29, sp
      1c:	sub	sp, sp, #0x1, lsl #12
      20:	sub	sp, sp, #0x2b0
      24:	ldrsw	x9, [x0, #108]
      28:	ldr	x19, [x0, #56]
      2c:	ldr	x21, [x0, #40]
      30:	ldr	w26, [x0, #656]
      34:	mov	w8, #0x2710                	// #10000
      38:	mov	x20, x0
      3c:	cmp	w9, w8
      40:	and	x27, x9, #0xffffffff
      44:	b.lt	1024 <BZ2_blockSort+0x1024>  // b.tstop
      48:	ldr	w8, [x20, #88]
      4c:	str	x9, [sp, #16]
      50:	add	w9, w27, #0x22
      54:	add	w10, w27, #0x23
      58:	tst	w9, #0x1
      5c:	csel	w9, w9, w10, eq  // eq = none
      60:	cmp	w8, #0x1
      64:	csinc	w8, w8, wzr, gt
      68:	mov	w11, #0x64                  	// #100
      6c:	cmp	w8, #0x64
      70:	mov	w10, #0x5556                	// #21846
      74:	csel	w8, w8, w11, lt  // lt = tstop
      78:	ldr	x24, [x20, #64]
      7c:	movk	w10, #0x5555, lsl #16
      80:	sub	w8, w8, #0x1
      84:	smull	x8, w8, w10
      88:	str	x20, [sp]
      8c:	sxtw	x20, w9
      90:	lsr	x9, x8, #63
      94:	lsr	x8, x8, #32
      98:	add	w8, w8, w9
      9c:	add	x23, x24, x20
      a0:	cmp	w26, #0x4
      a4:	mul	w8, w8, w27
      a8:	str	w8, [sp, #12]
      ac:	str	w8, [sp, #236]
      b0:	b.ge	10f4 <BZ2_blockSort+0x10f4>  // b.tcont
      b4:	mov	w2, #0x40004               	// #262148
      b8:	mov	x0, x21
      bc:	mov	w1, wzr
      c0:	add	x22, sp, #0x8f0
      c4:	bl	0 <memset>
      c8:	ldrb	w10, [x24]
      cc:	sub	w12, w27, #0x4
      d0:	sub	w13, w27, #0x3
      d4:	sub	w14, w27, #0x2
      d8:	sub	w9, w27, #0x1
      dc:	add	x15, x20, w12, sxtw #1
      e0:	add	x16, x20, w13, sxtw #1
      e4:	add	x17, x20, w14, sxtw #1
      e8:	mov	x8, xzr
      ec:	str	w9, [sp, #36]
      f0:	sub	w9, w27, #0x1
      f4:	add	x11, x24, w12, sxtw
      f8:	add	x12, x24, w13, sxtw
      fc:	add	x13, x24, w14, sxtw
     100:	add	x14, x24, x15
     104:	add	x15, x24, x16
     108:	lsl	w10, w10, #8
     10c:	add	x16, x24, x17
     110:	add	w17, w9, w8
     114:	strh	wzr, [x23, w17, uxtw #1]
     118:	ldrb	w17, [x24, x17]
     11c:	lsl	x0, x8, #1
     120:	lsl	w17, w17, #8
     124:	orr	w10, w17, w10, asr #8
     128:	sbfiz	x17, x10, #2, #32
     12c:	ldr	w18, [x21, x17]
     130:	add	w18, w18, #0x1
     134:	str	w18, [x21, x17]
     138:	strh	wzr, [x16, x0]
     13c:	ldrb	w17, [x13, x8]
     140:	lsl	w17, w17, #8
     144:	orr	w10, w17, w10, asr #8
     148:	sbfiz	x17, x10, #2, #32
     14c:	ldr	w18, [x21, x17]
     150:	add	w18, w18, #0x1
     154:	str	w18, [x21, x17]
     158:	strh	wzr, [x15, x0]
     15c:	ldrb	w17, [x12, x8]
     160:	lsl	w17, w17, #8
     164:	orr	w10, w17, w10, asr #8
     168:	sbfiz	x17, x10, #2, #32
     16c:	ldr	w18, [x21, x17]
     170:	add	w18, w18, #0x1
     174:	str	w18, [x21, x17]
     178:	strh	wzr, [x14, x0]
     17c:	ldrb	w17, [x11, x8]
     180:	sub	x8, x8, #0x4
     184:	add	w0, w27, w8
     188:	add	w0, w0, #0x3
     18c:	lsl	w17, w17, #8
     190:	orr	w10, w17, w10, asr #8
     194:	sbfiz	x17, x10, #2, #32
     198:	ldr	w18, [x21, x17]
     19c:	cmp	w0, #0x6
     1a0:	add	w18, w18, #0x1
     1a4:	str	w18, [x21, x17]
     1a8:	b.gt	110 <BZ2_blockSort+0x110>
     1ac:	ldr	x16, [sp, #16]
     1b0:	add	w9, w27, w8
     1b4:	add	w9, w9, #0x3
     1b8:	cmp	w9, #0x4
     1bc:	b.lt	1fc <BZ2_blockSort+0x1fc>  // b.tstop
     1c0:	sub	w9, w16, #0x1
     1c4:	add	x8, x9, x8
     1c8:	and	x8, x8, #0xffffffff
     1cc:	add	x9, x24, x20
     1d0:	strh	wzr, [x9, x8, lsl #1]
     1d4:	ldrb	w11, [x24, x8]
     1d8:	cmp	x8, #0x0
     1dc:	sub	x8, x8, #0x1
     1e0:	lsl	w11, w11, #8
     1e4:	orr	w10, w11, w10, asr #8
     1e8:	sbfiz	x11, x10, #2, #32
     1ec:	ldr	w12, [x21, x11]
     1f0:	add	w12, w12, #0x1
     1f4:	str	w12, [x21, x11]
     1f8:	b.gt	1d0 <BZ2_blockSort+0x1d0>
     1fc:	add	x9, x20, x16, lsl #1
     200:	add	x9, x24, x9
     204:	add	x8, x24, x16
     208:	add	x14, x9, #0x44
     20c:	add	x13, x8, #0x22
     210:	cmp	x8, x14
     214:	add	x12, x24, #0x22
     218:	cset	w11, cc  // cc = lo, ul, last
     21c:	cmp	x9, x13
     220:	cset	w15, cc  // cc = lo, ul, last
     224:	cmp	x8, x12
     228:	and	w15, w11, w15
     22c:	cset	w11, cc  // cc = lo, ul, last
     230:	cmp	x24, x13
     234:	cset	w13, cc  // cc = lo, ul, last
     238:	cmp	x9, x12
     23c:	cset	w12, cc  // cc = lo, ul, last
     240:	cmp	x24, x14
     244:	mov	x10, xzr
     248:	cset	w14, cc  // cc = lo, ul, last
     24c:	tbnz	w15, #0, 2b4 <BZ2_blockSort+0x2b4>
     250:	and	w11, w11, w13
     254:	tbnz	w11, #0, 2b4 <BZ2_blockSort+0x2b4>
     258:	and	w11, w12, w14
     25c:	cbnz	w11, 2b4 <BZ2_blockSort+0x2b4>
     260:	ldr	x10, [x24]
     264:	lsl	x11, x16, #1
     268:	movi	v0.2d, #0x0
     26c:	str	x10, [x24, x16]
     270:	str	q0, [x23, x11]
     274:	ldr	x10, [x24, #8]
     278:	add	x11, x16, #0x8
     27c:	str	x10, [x24, x11]
     280:	lsl	x10, x11, #1
     284:	str	q0, [x23, x10]
     288:	ldr	x10, [x24, #16]
     28c:	add	x11, x16, #0x10
     290:	str	x10, [x24, x11]
     294:	lsl	x10, x11, #1
     298:	str	q0, [x23, x10]
     29c:	ldr	x10, [x24, #24]
     2a0:	add	x11, x16, #0x18
     2a4:	str	x10, [x24, x11]
     2a8:	lsl	x10, x11, #1
     2ac:	str	q0, [x23, x10]
     2b0:	mov	w10, #0x20                  	// #32
     2b4:	ldrb	w11, [x24, x10]
     2b8:	strb	w11, [x8, x10]
     2bc:	strh	wzr, [x9, x10, lsl #1]
     2c0:	add	x10, x10, #0x1
     2c4:	cmp	x10, #0x22
     2c8:	b.ne	2b4 <BZ2_blockSort+0x2b4>  // b.any
     2cc:	cmp	w26, #0x4
     2d0:	b.ge	1114 <BZ2_blockSort+0x1114>  // b.tcont
     2d4:	mov	x8, x21
     2d8:	ldr	w9, [x8], #4
     2dc:	mov	x10, xzr
     2e0:	ldr	w11, [x8, x10]
     2e4:	add	w9, w11, w9
     2e8:	str	w9, [x8, x10]
     2ec:	add	x10, x10, #0x4
     2f0:	cmp	x10, #0x40, lsl #12
     2f4:	b.ne	2e0 <BZ2_blockSort+0x2e0>  // b.any
     2f8:	ldrb	w9, [x24]
     2fc:	sub	w11, w27, #0x4
     300:	sub	w12, w27, #0x3
     304:	sub	w13, w27, #0x2
     308:	mov	x8, xzr
     30c:	sub	w10, w16, #0x1
     310:	add	x14, x24, w11, sxtw
     314:	add	x15, x24, w12, sxtw
     318:	lsl	w9, w9, #8
     31c:	add	x16, x24, w13, sxtw
     320:	add	x17, x10, x8
     324:	ldrb	w18, [x24, w17, uxtw]
     328:	ubfx	w9, w9, #8, #8
     32c:	bfi	w9, w18, #8, #8
     330:	lsl	x9, x9, #2
     334:	ldr	w0, [x21, x9]
     338:	sub	w0, w0, #0x1
     33c:	str	w0, [x21, x9]
     340:	str	w17, [x19, w0, sxtw #2]
     344:	ldrb	w17, [x16, x8]
     348:	lsl	x9, x18, #2
     34c:	add	w0, w13, w8
     350:	bfi	x9, x17, #10, #8
     354:	ldr	w18, [x21, x9]
     358:	lsl	x17, x17, #2
     35c:	sub	w18, w18, #0x1
     360:	str	w18, [x21, x9]
     364:	str	w0, [x19, w18, sxtw #2]
     368:	ldrb	w9, [x15, x8]
     36c:	add	w0, w12, w8
     370:	bfi	x17, x9, #10, #8
     374:	ldr	w18, [x21, x17]
     378:	sub	w18, w18, #0x1
     37c:	str	w18, [x21, x17]
     380:	str	w0, [x19, w18, sxtw #2]
     384:	ldrb	w17, [x14, x8]
     388:	add	w18, w11, w8
     38c:	sub	x8, x8, #0x4
     390:	add	w1, w27, w8
     394:	bfi	w9, w17, #8, #24
     398:	and	x17, x9, #0xffff
     39c:	lsl	x17, x17, #2
     3a0:	ldr	w0, [x21, x17]
     3a4:	add	w1, w1, #0x3
     3a8:	cmp	w1, #0x6
     3ac:	sub	w0, w0, #0x1
     3b0:	str	w0, [x21, x17]
     3b4:	str	w18, [x19, w0, sxtw #2]
     3b8:	b.gt	320 <BZ2_blockSort+0x320>
     3bc:	add	w10, w27, w8
     3c0:	add	w10, w10, #0x3
     3c4:	cmp	w10, #0x4
     3c8:	b.lt	40c <BZ2_blockSort+0x40c>  // b.tstop
     3cc:	sub	w10, w27, #0x1
     3d0:	add	x8, x10, x8
     3d4:	and	x10, x8, #0xffffffff
     3d8:	ldrb	w11, [x24, x10]
     3dc:	ubfx	w9, w9, #8, #8
     3e0:	cmp	x10, #0x0
     3e4:	sub	x10, x10, #0x1
     3e8:	bfi	w9, w11, #8, #24
     3ec:	and	x11, x9, #0xffff
     3f0:	lsl	x11, x11, #2
     3f4:	ldr	w12, [x21, x11]
     3f8:	sub	w12, w12, #0x1
     3fc:	str	w12, [x21, x11]
     400:	str	w8, [x19, w12, sxtw #2]
     404:	sub	w8, w8, #0x1
     408:	b.gt	3d8 <BZ2_blockSort+0x3d8>
     40c:	movi	v0.2d, #0x0
     410:	adrp	x9, 0 <BZ2_blockSort>
     414:	stp	q0, q0, [x22, #224]
     418:	stp	q0, q0, [x22, #192]
     41c:	stp	q0, q0, [x22, #160]
     420:	stp	q0, q0, [x22, #128]
     424:	stp	q0, q0, [x22, #96]
     428:	stp	q0, q0, [x22, #64]
     42c:	stp	q0, q0, [x22, #32]
     430:	stp	q0, q0, [x22]
     434:	ldr	q0, [x9]
     438:	mov	x8, xzr
     43c:	movi	v1.4s, #0x4
     440:	add	x9, sp, #0x9f0
     444:	movi	v2.4s, #0x8
     448:	add	v3.4s, v0.4s, v1.4s
     44c:	add	x10, x9, x8
     450:	add	x8, x8, #0x20
     454:	stp	q0, q3, [x10]
     458:	cmp	x8, #0x400
     45c:	add	v0.4s, v0.4s, v2.4s
     460:	b.ne	448 <BZ2_blockSort+0x448>  // b.any
     464:	mov	w8, #0x5556                	// #21846
     468:	mov	w9, #0x16c                 	// #364
     46c:	movk	w8, #0x5555, lsl #16
     470:	add	x10, sp, #0x9f0
     474:	str	w26, [sp, #100]
     478:	b	48c <BZ2_blockSort+0x48c>
     47c:	sub	w9, w9, #0x3
     480:	cmp	w9, #0x2
     484:	mov	w9, w11
     488:	b.ls	520 <BZ2_blockSort+0x520>  // b.plast
     48c:	smull	x11, w9, w8
     490:	lsr	x12, x11, #63
     494:	lsr	x11, x11, #32
     498:	cmp	w9, #0x2ff
     49c:	add	w11, w11, w12
     4a0:	b.gt	47c <BZ2_blockSort+0x47c>
     4a4:	mov	w12, wzr
     4a8:	sxtw	x13, w11
     4ac:	b	4c8 <BZ2_blockSort+0x4c8>
     4b0:	mov	x18, x0
     4b4:	cmp	x13, #0xff
     4b8:	add	x13, x13, #0x1
     4bc:	add	w12, w12, #0x1
     4c0:	str	w14, [x10, x18, lsl #2]
     4c4:	b.ge	47c <BZ2_blockSort+0x47c>  // b.tcont
     4c8:	ldr	w14, [x10, x13, lsl #2]
     4cc:	lsl	w15, w14, #8
     4d0:	add	w16, w15, #0x100
     4d4:	ldr	w16, [x21, w16, sxtw #2]
     4d8:	ldr	w15, [x21, w15, sxtw #2]
     4dc:	sub	w15, w16, w15
     4e0:	mov	w16, w12
     4e4:	ldr	w17, [x10, w16, sxtw #2]
     4e8:	add	w1, w11, w16
     4ec:	lsl	w18, w17, #8
     4f0:	add	w0, w18, #0x100
     4f4:	ldr	w0, [x21, w0, sxtw #2]
     4f8:	ldr	w18, [x21, w18, sxtw #2]
     4fc:	sub	w18, w0, w18
     500:	cmp	w18, w15
     504:	sxtw	x0, w1
     508:	b.ls	4b0 <BZ2_blockSort+0x4b0>  // b.plast
     50c:	sxtw	x18, w16
     510:	subs	w16, w18, w11
     514:	str	w17, [x10, x0, lsl #2]
     518:	b.ge	4e4 <BZ2_blockSort+0x4e4>  // b.tcont
     51c:	b	4b4 <BZ2_blockSort+0x4b4>
     520:	add	x8, x19, #0x8
     524:	stp	x8, x21, [sp, #72]
     528:	add	x8, x19, #0x10
     52c:	str	x8, [sp, #64]
     530:	add	x8, x19, #0x14
     534:	ldr	w25, [sp, #12]
     538:	str	x8, [sp, #48]
     53c:	add	x8, x21, #0x4
     540:	str	x8, [sp, #40]
     544:	sub	x8, x19, #0x4
     548:	add	x3, sp, #0x1, lsl #12
     54c:	mov	w22, wzr
     550:	add	x20, x19, #0x4
     554:	str	x8, [sp, #24]
     558:	add	x26, sp, #0x8f0
     55c:	add	x3, x3, #0x110
     560:	add	x4, sp, #0xf80
     564:	add	x5, sp, #0xdf0
     568:	mov	x8, xzr
     56c:	mov	x9, xzr
     570:	str	w25, [sp, #216]
     574:	str	x20, [sp, #104]
     578:	str	x23, [sp, #224]
     57c:	b	590 <BZ2_blockSort+0x590>
     580:	ldr	x8, [sp, #56]
     584:	add	x8, x8, #0x1
     588:	cmp	x8, #0x100
     58c:	b.eq	1098 <BZ2_blockSort+0x1098>  // b.none
     590:	add	x9, sp, #0x9f0
     594:	ldr	w9, [x9, x8, lsl #2]
     598:	str	x8, [sp, #56]
     59c:	mov	x11, xzr
     5a0:	sxtw	x8, w9
     5a4:	str	x8, [sp, #128]
     5a8:	lsl	w8, w9, #8
     5ac:	sxtw	x10, w8
     5b0:	mov	x8, xzr
     5b4:	str	x10, [sp, #120]
     5b8:	str	x9, [sp, #168]
     5bc:	b	5e8 <BZ2_blockSort+0x5e8>
     5c0:	ldr	x11, [sp, #152]
     5c4:	mov	w8, w25
     5c8:	orr	w9, w9, #0x200000
     5cc:	str	w9, [x21, x11, lsl #2]
     5d0:	mov	w25, w8
     5d4:	ldr	x8, [sp, #192]
     5d8:	ldr	x9, [sp, #168]
     5dc:	add	x8, x8, #0x1
     5e0:	cmp	x8, #0x100
     5e4:	b.eq	db8 <BZ2_blockSort+0xdb8>  // b.none
     5e8:	cmp	x8, x9
     5ec:	b.eq	5dc <BZ2_blockSort+0x5dc>  // b.none
     5f0:	add	x11, x8, x10
     5f4:	ldr	w9, [x21, x11, lsl #2]
     5f8:	str	x8, [sp, #192]
     5fc:	tbnz	w9, #21, 5c4 <BZ2_blockSort+0x5c4>
     600:	add	x8, x21, x11, lsl #2
     604:	ldr	w8, [x8, #4]
     608:	str	x11, [sp, #152]
     60c:	and	w11, w9, #0xffdfffff
     610:	and	w8, w8, #0xffdfffff
     614:	sub	w8, w8, #0x1
     618:	stp	w8, w11, [sp, #144]
     61c:	subs	w8, w8, w11
     620:	b.le	5c0 <BZ2_blockSort+0x5c0>
     624:	ldr	w9, [sp, #100]
     628:	cmp	w9, #0x4
     62c:	b.ge	d80 <BZ2_blockSort+0xd80>  // b.tcont
     630:	ldr	w8, [sp, #148]
     634:	mov	w1, #0x1                   	// #1
     638:	str	w8, [sp, #4368]
     63c:	ldr	w8, [sp, #144]
     640:	str	w8, [sp, #3968]
     644:	mov	w8, #0x2                   	// #2
     648:	str	w8, [sp, #3568]
     64c:	b	690 <BZ2_blockSort+0x690>
     650:	ldr	w25, [sp, #236]
     654:	ldp	x21, x1, [sp, #80]
     658:	mov	x27, x22
     65c:	ldr	w22, [sp, #116]
     660:	ldr	x20, [sp, #104]
     664:	add	x3, sp, #0x1, lsl #12
     668:	add	x3, x3, #0x110
     66c:	add	x4, sp, #0xf80
     670:	add	x5, sp, #0xdf0
     674:	str	w25, [sp, #216]
     678:	mov	w8, w25
     67c:	mov	w9, w25
     680:	tbnz	w25, #31, d54 <BZ2_blockSort+0xd54>
     684:	ldr	w8, [sp, #216]
     688:	cmp	w1, #0x0
     68c:	b.le	d54 <BZ2_blockSort+0xd54>
     690:	sxtw	x23, w1
     694:	sub	x1, x23, #0x1
     698:	cmp	w23, #0x62
     69c:	b.lt	6c0 <BZ2_blockSort+0x6c0>  // b.tstop
     6a0:	mov	w0, #0x3e9                 	// #1001
     6a4:	mov	x26, x1
     6a8:	bl	0 <BZ2_bz__AssertH__fail>
     6ac:	add	x3, sp, #0x1, lsl #12
     6b0:	mov	x1, x26
     6b4:	add	x5, sp, #0xdf0
     6b8:	add	x4, sp, #0xf80
     6bc:	add	x3, x3, #0x110
     6c0:	lsl	x8, x1, #2
     6c4:	ldr	w6, [x3, x8]
     6c8:	ldr	w9, [x4, x8]
     6cc:	ldr	w26, [x5, x8]
     6d0:	sub	w10, w9, w6
     6d4:	cmp	w10, #0x14
     6d8:	sxtw	x28, w9
     6dc:	b.lt	858 <BZ2_blockSort+0x858>  // b.tstop
     6e0:	cmp	w26, #0xf
     6e4:	b.ge	858 <BZ2_blockSort+0x858>  // b.tcont
     6e8:	sxtw	x14, w6
     6ec:	ldr	w10, [x19, x28, lsl #2]
     6f0:	add	w11, w9, w6
     6f4:	ldr	w12, [x19, x14, lsl #2]
     6f8:	asr	w11, w11, #1
     6fc:	ldr	w11, [x19, w11, sxtw #2]
     700:	add	w10, w10, w26
     704:	add	w12, w12, w26
     708:	ldrb	w10, [x24, w10, uxtw]
     70c:	ldrb	w12, [x24, w12, uxtw]
     710:	add	w11, w11, w26
     714:	ldrb	w11, [x24, w11, uxtw]
     718:	cmp	w12, w10
     71c:	csel	w13, w12, w10, hi  // hi = pmore
     720:	csel	w10, w10, w12, hi  // hi = pmore
     724:	cmp	w10, w11
     728:	csel	w10, w10, w11, hi  // hi = pmore
     72c:	cmp	w13, w11
     730:	csel	w15, w10, w13, hi  // hi = pmore
     734:	mov	w12, w9
     738:	mov	w10, w6
     73c:	mov	w13, w9
     740:	mov	w11, w6
     744:	cmp	w11, w13
     748:	b.gt	7b4 <BZ2_blockSort+0x7b4>
     74c:	sxtw	x16, w13
     750:	sxtw	x10, w10
     754:	sxtw	x17, w11
     758:	ldr	w11, [x19, x17, lsl #2]
     75c:	add	w18, w11, w26
     760:	ldrb	w18, [x24, w18, uxtw]
     764:	subs	w18, w18, w15
     768:	b.eq	788 <BZ2_blockSort+0x788>  // b.none
     76c:	cmp	w18, #0x0
     770:	b.gt	7b0 <BZ2_blockSort+0x7b0>
     774:	add	x11, x17, #0x1
     778:	cmp	x17, x16
     77c:	mov	x17, x11
     780:	b.lt	758 <BZ2_blockSort+0x758>  // b.tstop
     784:	b	7b4 <BZ2_blockSort+0x7b4>
     788:	lsl	x18, x10, #2
     78c:	ldr	w0, [x19, x18]
     790:	add	x10, x10, #0x1
     794:	cmp	w13, w17
     798:	str	w0, [x19, x17, lsl #2]
     79c:	str	w11, [x19, x18]
     7a0:	add	w11, w17, #0x1
     7a4:	b.gt	754 <BZ2_blockSort+0x754>
     7a8:	add	w11, w17, #0x1
     7ac:	b	7b4 <BZ2_blockSort+0x7b4>
     7b0:	mov	w11, w17
     7b4:	cmp	w11, w13
     7b8:	b.gt	83c <BZ2_blockSort+0x83c>
     7bc:	sxtw	x16, w11
     7c0:	sxtw	x12, w12
     7c4:	sxtw	x17, w13
     7c8:	ldr	w13, [x19, x17, lsl #2]
     7cc:	add	w18, w13, w26
     7d0:	ldrb	w18, [x24, w18, uxtw]
     7d4:	subs	w18, w18, w15
     7d8:	b.eq	7f4 <BZ2_blockSort+0x7f4>  // b.none
     7dc:	tbnz	w18, #31, 818 <BZ2_blockSort+0x818>
     7e0:	sub	x13, x17, #0x1
     7e4:	cmp	x17, x16
     7e8:	mov	x17, x13
     7ec:	b.gt	7c8 <BZ2_blockSort+0x7c8>
     7f0:	b	83c <BZ2_blockSort+0x83c>
     7f4:	lsl	x18, x12, #2
     7f8:	ldr	w0, [x19, x18]
     7fc:	sub	x12, x12, #0x1
     800:	cmp	w11, w17
     804:	str	w0, [x19, x17, lsl #2]
     808:	str	w13, [x19, x18]
     80c:	sub	w13, w17, #0x1
     810:	b.lt	7c4 <BZ2_blockSort+0x7c4>  // b.tstop
     814:	b	83c <BZ2_blockSort+0x83c>
     818:	lsl	x16, x16, #2
     81c:	ldr	w18, [x19, x16]
     820:	add	w11, w11, #0x1
     824:	str	w13, [x19, x16]
     828:	sub	w13, w17, #0x1
     82c:	str	w18, [x19, x17, lsl #2]
     830:	cmp	w11, w13
     834:	b.le	74c <BZ2_blockSort+0x74c>
     838:	b	7b4 <BZ2_blockSort+0x7b4>
     83c:	cmp	w12, w10
     840:	b.ge	8b0 <BZ2_blockSort+0x8b0>  // b.tcont
     844:	add	w8, w26, #0x1
     848:	str	w8, [x5, x1, lsl #2]
     84c:	cmp	w23, #0x62
     850:	b.ge	6a0 <BZ2_blockSort+0x6a0>  // b.tcont
     854:	b	6c0 <BZ2_blockSort+0x6c0>
     858:	cmp	w10, #0x1
     85c:	b.lt	678 <BZ2_blockSort+0x678>  // b.tstop
     860:	adrp	x11, 0 <BZ2_blockSort>
     864:	mov	x8, xzr
     868:	add	x11, x11, #0x0
     86c:	ldr	w9, [x11, x8, lsl #2]
     870:	add	x8, x8, #0x1
     874:	cmp	w9, w10
     878:	b.le	86c <BZ2_blockSort+0x86c>
     87c:	cmp	w8, #0x1
     880:	b.eq	678 <BZ2_blockSort+0x678>  // b.none
     884:	sub	x8, x8, #0x1
     888:	add	w9, w6, #0x1
     88c:	str	w22, [sp, #116]
     890:	mov	x22, x27
     894:	str	w9, [sp, #164]
     898:	and	x8, x8, #0xffffffff
     89c:	add	w9, w6, #0x2
     8a0:	str	x1, [sp, #88]
     8a4:	str	w9, [sp, #160]
     8a8:	str	x6, [sp, #136]
     8ac:	b	b5c <BZ2_blockSort+0xb5c>
     8b0:	sub	w18, w10, w6
     8b4:	sub	w0, w11, w10
     8b8:	cmp	w18, w0
     8bc:	csel	w15, w18, w0, lt  // lt = tstop
     8c0:	cmp	w15, #0x1
     8c4:	b.lt	9a0 <BZ2_blockSort+0x9a0>  // b.tstop
     8c8:	cmp	w18, w0
     8cc:	csel	w17, w18, w0, lt  // lt = tstop
     8d0:	cmp	w17, #0x1
     8d4:	csinc	w17, w17, wzr, lt  // lt = tstop
     8d8:	sub	w16, w11, w15
     8dc:	sub	w17, w15, w17
     8e0:	cmp	w17, #0x7
     8e4:	sxtw	x16, w16
     8e8:	b.cc	978 <BZ2_blockSort+0x978>  // b.lo, b.ul, b.last
     8ec:	cmp	w18, w0
     8f0:	csel	w18, w18, w0, lt  // lt = tstop
     8f4:	cmp	w18, #0x1
     8f8:	csinc	w18, w18, wzr, lt  // lt = tstop
     8fc:	sub	w18, w15, w18
     900:	add	x0, x16, x18
     904:	add	x1, x19, x14, lsl #2
     908:	add	x0, x20, x0, lsl #2
     90c:	cmp	x1, x0
     910:	b.cs	928 <BZ2_blockSort+0x928>  // b.hs, b.nlast
     914:	add	x18, x14, x18
     918:	add	x18, x20, x18, lsl #2
     91c:	add	x0, x19, x16, lsl #2
     920:	cmp	x0, x18
     924:	b.cc	978 <BZ2_blockSort+0x978>  // b.lo, b.ul, b.last
     928:	ldr	x2, [sp, #64]
     92c:	add	x17, x17, #0x1
     930:	and	x0, x17, #0x1fffffff8
     934:	add	x18, x0, x14
     938:	add	x1, x2, x16, lsl #2
     93c:	add	x16, x0, x16
     940:	sub	w15, w15, w0
     944:	add	x14, x2, x14, lsl #2
     948:	mov	x2, x0
     94c:	ldp	q0, q3, [x14, #-16]
     950:	ldp	q1, q2, [x1, #-16]
     954:	subs	x2, x2, #0x8
     958:	stp	q1, q2, [x14, #-16]
     95c:	stp	q0, q3, [x1, #-16]
     960:	add	x1, x1, #0x20
     964:	add	x14, x14, #0x20
     968:	b.ne	94c <BZ2_blockSort+0x94c>  // b.any
     96c:	cmp	x17, x0
     970:	mov	x14, x18
     974:	b.eq	9a0 <BZ2_blockSort+0x9a0>  // b.none
     978:	add	x14, x19, x14, lsl #2
     97c:	add	x16, x19, x16, lsl #2
     980:	add	w15, w15, #0x1
     984:	ldr	w17, [x16]
     988:	ldr	w18, [x14]
     98c:	sub	w15, w15, #0x1
     990:	cmp	w15, #0x1
     994:	str	w17, [x14], #4
     998:	str	w18, [x16], #4
     99c:	b.gt	984 <BZ2_blockSort+0x984>
     9a0:	sub	w17, w9, w12
     9a4:	sub	w12, w12, w13
     9a8:	cmp	w17, w12
     9ac:	csel	w13, w17, w12, lt  // lt = tstop
     9b0:	cmp	w13, #0x1
     9b4:	b.lt	a9c <BZ2_blockSort+0xa9c>  // b.tstop
     9b8:	cmp	w17, w12
     9bc:	csel	w15, w17, w12, lt  // lt = tstop
     9c0:	cmp	w15, #0x1
     9c4:	csinc	w15, w15, wzr, lt  // lt = tstop
     9c8:	sub	w14, w9, w13
     9cc:	sub	w16, w13, w15
     9d0:	sxtw	x14, w14
     9d4:	cmp	w16, #0x7
     9d8:	sxtw	x15, w11
     9dc:	b.cc	a74 <BZ2_blockSort+0xa74>  // b.lo, b.ul, b.last
     9e0:	cmp	w17, w12
     9e4:	csel	w17, w17, w12, lt  // lt = tstop
     9e8:	cmp	w17, #0x1
     9ec:	ldr	x1, [sp, #72]
     9f0:	csinc	w17, w17, wzr, lt  // lt = tstop
     9f4:	sub	w17, w13, w17
     9f8:	add	x0, x14, x17
     9fc:	add	x18, x19, x15, lsl #2
     a00:	add	x0, x1, x0, lsl #2
     a04:	cmp	x18, x0
     a08:	b.cs	a20 <BZ2_blockSort+0xa20>  // b.hs, b.nlast
     a0c:	add	x17, x15, x17
     a10:	add	x17, x20, x17, lsl #2
     a14:	add	x18, x20, x14, lsl #2
     a18:	cmp	x18, x17
     a1c:	b.cc	a74 <BZ2_blockSort+0xa74>  // b.lo, b.ul, b.last
     a20:	ldr	x17, [sp, #48]
     a24:	ldr	x1, [sp, #64]
     a28:	add	x16, x16, #0x1
     a2c:	and	x18, x16, #0x1fffffff8
     a30:	add	x0, x17, x14, lsl #2
     a34:	add	x17, x18, x15
     a38:	add	x14, x18, x14
     a3c:	sub	w13, w13, w18
     a40:	add	x15, x1, x15, lsl #2
     a44:	mov	x1, x18
     a48:	ldp	q0, q3, [x15, #-16]
     a4c:	ldp	q1, q2, [x0, #-16]
     a50:	subs	x1, x1, #0x8
     a54:	stp	q1, q2, [x15, #-16]
     a58:	stp	q0, q3, [x0, #-16]
     a5c:	add	x0, x0, #0x20
     a60:	add	x15, x15, #0x20
     a64:	b.ne	a48 <BZ2_blockSort+0xa48>  // b.any
     a68:	cmp	x16, x18
     a6c:	mov	x15, x17
     a70:	b.eq	a9c <BZ2_blockSort+0xa9c>  // b.none
     a74:	add	x15, x19, x15, lsl #2
     a78:	add	x14, x20, x14, lsl #2
     a7c:	add	w13, w13, #0x1
     a80:	ldr	w16, [x14]
     a84:	ldr	w17, [x15]
     a88:	sub	w13, w13, #0x1
     a8c:	cmp	w13, #0x1
     a90:	str	w16, [x15], #4
     a94:	str	w17, [x14], #4
     a98:	b.gt	a80 <BZ2_blockSort+0xa80>
     a9c:	sub	w10, w6, w10
     aa0:	sub	w12, w9, w12
     aa4:	add	w10, w10, w11
     aa8:	add	w11, w12, #0x1
     aac:	sub	w13, w10, #0x1
     ab0:	sub	w11, w9, w11
     ab4:	sub	w15, w13, w6
     ab8:	cmp	w15, w11
     abc:	csinc	w11, w6, w12, lt  // lt = tstop
     ac0:	csel	w16, w13, w9, lt  // lt = tstop
     ac4:	sub	w14, w12, w10
     ac8:	csel	w9, w9, w13, lt  // lt = tstop
     acc:	sub	w13, w16, w11
     ad0:	csinc	w15, w6, w12, ge  // ge = tcont
     ad4:	cmp	w13, w14
     ad8:	csel	w13, w10, w11, lt  // lt = tstop
     adc:	csel	w14, w16, w12, lt  // lt = tstop
     ae0:	csel	w12, w12, w16, lt  // lt = tstop
     ae4:	sub	w17, w9, w15
     ae8:	csel	w10, w11, w10, lt  // lt = tstop
     aec:	sub	w11, w12, w13
     af0:	cinc	w16, w26, ge  // ge = tcont
     af4:	cinc	w18, w26, lt  // lt = tstop
     af8:	cmp	w17, w11
     afc:	lsl	x11, x23, #2
     b00:	csel	w17, w15, w13, lt  // lt = tstop
     b04:	csel	w13, w13, w15, lt  // lt = tstop
     b08:	csel	w15, w9, w12, lt  // lt = tstop
     b0c:	csel	w9, w12, w9, lt  // lt = tstop
     b10:	csel	w12, w26, w18, lt  // lt = tstop
     b14:	csel	w18, w18, w26, lt  // lt = tstop
     b18:	add	x0, x11, #0x4
     b1c:	str	w13, [x3, x8]
     b20:	str	w9, [x4, x8]
     b24:	str	w18, [x5, x8]
     b28:	str	w17, [x3, x11]
     b2c:	str	w15, [x4, x11]
     b30:	str	w12, [x5, x11]
     b34:	str	w10, [x3, x0]
     b38:	str	w14, [x4, x0]
     b3c:	str	w16, [x5, x0]
     b40:	add	w1, w23, #0x2
     b44:	b	684 <BZ2_blockSort+0x684>
     b48:	ldr	x8, [sp, #176]
     b4c:	ldr	x6, [sp, #136]
     b50:	cmp	x8, #0x1
     b54:	ldr	x8, [sp, #184]
     b58:	b.le	650 <BZ2_blockSort+0x650>
     b5c:	str	x8, [sp, #176]
     b60:	sub	x9, x8, #0x1
     b64:	adrp	x8, 0 <BZ2_blockSort>
     b68:	add	x8, x8, #0x0
     b6c:	ldr	w27, [x8, x9, lsl #2]
     b70:	str	x9, [sp, #184]
     b74:	add	w8, w27, w6
     b78:	sxtw	x20, w8
     b7c:	ldr	w8, [sp, #160]
     b80:	mov	x10, x20
     b84:	str	w8, [sp, #204]
     b88:	ldr	w8, [sp, #164]
     b8c:	stp	w8, w6, [sp, #208]
     b90:	mov	w8, w6
     b94:	b	bdc <BZ2_blockSort+0xbdc>
     b98:	add	w8, w27, w21
     b9c:	sxtw	x21, w8
     ba0:	ldr	w9, [sp, #212]
     ba4:	ldr	w8, [sp, #200]
     ba8:	ldr	x10, [sp, #216]
     bac:	add	w9, w9, #0x3
     bb0:	str	w9, [sp, #212]
     bb4:	ldr	w9, [sp, #208]
     bb8:	str	w8, [x19, x21, lsl #2]
     bbc:	ldr	w8, [sp, #236]
     bc0:	add	x10, x10, #0x3
     bc4:	add	w9, w9, #0x3
     bc8:	str	w9, [sp, #208]
     bcc:	ldr	w9, [sp, #204]
     bd0:	add	w9, w9, #0x3
     bd4:	str	w9, [sp, #204]
     bd8:	tbnz	w8, #31, d30 <BZ2_blockSort+0xd30>
     bdc:	cmp	x10, x28
     be0:	b.gt	b48 <BZ2_blockSort+0xb48>
     be4:	ldr	w8, [x19, x10, lsl #2]
     be8:	ldr	w25, [sp, #212]
     bec:	str	x10, [sp, #216]
     bf0:	add	w23, w8, w26
     bf4:	str	w8, [sp, #200]
     bf8:	ldr	w8, [x19, w25, sxtw #2]
     bfc:	ldr	x3, [sp, #224]
     c00:	add	x5, sp, #0xec
     c04:	mov	w1, w23
     c08:	add	w0, w8, w26
     c0c:	mov	x2, x24
     c10:	mov	w4, w22
     c14:	sxtw	x21, w25
     c18:	bl	1b60 <mainGtU>
     c1c:	tst	w0, #0xff
     c20:	b.eq	c40 <BZ2_blockSort+0xc40>  // b.none
     c24:	ldr	w8, [x19, x21, lsl #2]
     c28:	add	w9, w27, w25
     c2c:	cmp	w21, w20
     c30:	sub	w25, w21, w27
     c34:	str	w8, [x19, w9, sxtw #2]
     c38:	b.ge	bf8 <BZ2_blockSort+0xbf8>  // b.tcont
     c3c:	b	c48 <BZ2_blockSort+0xc48>
     c40:	add	w8, w27, w21
     c44:	sxtw	x21, w8
     c48:	ldr	x8, [sp, #216]
     c4c:	ldr	w9, [sp, #200]
     c50:	cmp	x8, x28
     c54:	str	w9, [x19, x21, lsl #2]
     c58:	b.ge	b48 <BZ2_blockSort+0xb48>  // b.tcont
     c5c:	add	x8, x8, #0x1
     c60:	ldr	w8, [x19, x8, lsl #2]
     c64:	ldr	w25, [sp, #208]
     c68:	add	w23, w8, w26
     c6c:	str	w8, [sp, #200]
     c70:	ldr	w8, [x19, w25, sxtw #2]
     c74:	ldr	x3, [sp, #224]
     c78:	add	x5, sp, #0xec
     c7c:	mov	w1, w23
     c80:	add	w0, w8, w26
     c84:	mov	x2, x24
     c88:	mov	w4, w22
     c8c:	sxtw	x21, w25
     c90:	bl	1b60 <mainGtU>
     c94:	tst	w0, #0xff
     c98:	b.eq	cb8 <BZ2_blockSort+0xcb8>  // b.none
     c9c:	ldr	w8, [x19, x21, lsl #2]
     ca0:	add	w9, w27, w25
     ca4:	cmp	w21, w20
     ca8:	sub	w25, w21, w27
     cac:	str	w8, [x19, w9, sxtw #2]
     cb0:	b.ge	c70 <BZ2_blockSort+0xc70>  // b.tcont
     cb4:	b	cc0 <BZ2_blockSort+0xcc0>
     cb8:	add	w8, w27, w21
     cbc:	sxtw	x21, w8
     cc0:	ldr	x8, [sp, #216]
     cc4:	ldr	w9, [sp, #200]
     cc8:	add	x8, x8, #0x2
     ccc:	cmp	x8, x28
     cd0:	str	w9, [x19, x21, lsl #2]
     cd4:	b.gt	b48 <BZ2_blockSort+0xb48>
     cd8:	ldr	w8, [x19, x8, lsl #2]
     cdc:	ldr	w25, [sp, #204]
     ce0:	add	w23, w8, w26
     ce4:	str	w8, [sp, #200]
     ce8:	ldr	w8, [x19, w25, sxtw #2]
     cec:	ldr	x3, [sp, #224]
     cf0:	add	x5, sp, #0xec
     cf4:	mov	w1, w23
     cf8:	add	w0, w8, w26
     cfc:	mov	x2, x24
     d00:	mov	w4, w22
     d04:	sxtw	x21, w25
     d08:	bl	1b60 <mainGtU>
     d0c:	tst	w0, #0xff
     d10:	b.eq	b98 <BZ2_blockSort+0xb98>  // b.none
     d14:	ldr	w8, [x19, x21, lsl #2]
     d18:	add	w9, w27, w25
     d1c:	cmp	w21, w20
     d20:	sub	w25, w21, w27
     d24:	str	w8, [x19, w9, sxtw #2]
     d28:	b.ge	ce8 <BZ2_blockSort+0xce8>  // b.tcont
     d2c:	b	ba0 <BZ2_blockSort+0xba0>
     d30:	ldr	x21, [sp, #80]
     d34:	mov	x27, x22
     d38:	ldr	w22, [sp, #116]
     d3c:	ldr	x20, [sp, #104]
     d40:	add	x3, sp, #0x1, lsl #12
     d44:	str	w8, [sp, #216]
     d48:	add	x3, x3, #0x110
     d4c:	add	x4, sp, #0xf80
     d50:	add	x5, sp, #0xdf0
     d54:	tbnz	w8, #31, 1004 <BZ2_blockSort+0x1004>
     d58:	ldp	w12, w10, [sp, #144]
     d5c:	ldr	x11, [sp, #152]
     d60:	ldr	x23, [sp, #224]
     d64:	add	x26, sp, #0x8f0
     d68:	sub	w10, w22, w10
     d6c:	add	w10, w10, w12
     d70:	ldr	w9, [x21, x11, lsl #2]
     d74:	add	w22, w10, #0x1
     d78:	ldr	x10, [sp, #120]
     d7c:	b	5c8 <BZ2_blockSort+0x5c8>
     d80:	adrp	x9, 0 <stderr>
     d84:	ldr	x0, [x9]
     d88:	adrp	x1, 0 <BZ2_blockSort>
     d8c:	add	w5, w8, #0x1
     d90:	add	x1, x1, #0x0
     d94:	ldr	x2, [sp, #168]
     d98:	ldr	x3, [sp, #192]
     d9c:	mov	w4, w22
     da0:	bl	0 <fprintf>
     da4:	add	x3, sp, #0x1, lsl #12
     da8:	add	x5, sp, #0xdf0
     dac:	add	x4, sp, #0xf80
     db0:	add	x3, x3, #0x110
     db4:	b	630 <BZ2_blockSort+0x630>
     db8:	ldr	x20, [sp, #128]
     dbc:	ldrb	w8, [x26, x20]
     dc0:	cbz	w8, ddc <BZ2_blockSort+0xddc>
     dc4:	mov	w0, #0x3ee                 	// #1006
     dc8:	bl	0 <BZ2_bz__AssertH__fail>
     dcc:	add	x3, sp, #0x1, lsl #12
     dd0:	add	x5, sp, #0xdf0
     dd4:	add	x4, sp, #0xf80
     dd8:	add	x3, x3, #0x110
     ddc:	ldr	x9, [sp, #40]
     de0:	mov	x8, xzr
     de4:	add	x13, sp, #0x4f0
     de8:	add	x11, sp, #0xf0
     dec:	add	x9, x9, x20, lsl #2
     df0:	ldur	w10, [x9, #-4]
     df4:	and	w10, w10, #0xffdfffff
     df8:	str	w10, [x13, x8]
     dfc:	ldr	w10, [x9]
     e00:	add	x9, x9, #0x400
     e04:	and	w10, w10, #0xffdfffff
     e08:	sub	w10, w10, #0x1
     e0c:	str	w10, [x11, x8]
     e10:	add	x8, x8, #0x4
     e14:	cmp	x8, #0x400
     e18:	b.ne	df0 <BZ2_blockSort+0xdf0>  // b.any
     e1c:	ldr	x8, [sp, #120]
     e20:	add	x14, sp, #0xf0
     e24:	ldrsw	x9, [x21, x8, lsl #2]
     e28:	ldr	w8, [x13, x20, lsl #2]
     e2c:	and	x9, x9, #0xffffffffffdfffff
     e30:	cmp	w9, w8
     e34:	b.lt	ea8 <BZ2_blockSort+0xea8>  // b.tstop
     e38:	ldr	x10, [sp, #120]
     e3c:	mov	x9, x20
     e40:	ldr	w9, [x14, x9, lsl #2]
     e44:	add	w20, w10, #0x100
     e48:	ldr	w10, [x21, w20, sxtw #2]
     e4c:	and	w10, w10, #0xffdfffff
     e50:	sub	w10, w10, #0x1
     e54:	cmp	w10, w9
     e58:	b.le	ee0 <BZ2_blockSort+0xee0>
     e5c:	ldr	w11, [x19, w10, sxtw #2]
     e60:	sub	w11, w11, #0x1
     e64:	and	w12, w27, w11, asr #31
     e68:	add	w11, w12, w11
     e6c:	ldrb	w12, [x24, w11, sxtw]
     e70:	ldrb	w13, [x26, x12]
     e74:	cbnz	w13, e50 <BZ2_blockSort+0xe50>
     e78:	lsl	x9, x12, #2
     e7c:	add	x14, sp, #0xf0
     e80:	ldrsw	x12, [x14, x9]
     e84:	sub	w13, w12, #0x1
     e88:	str	w13, [x14, x9]
     e8c:	ldr	x9, [sp, #128]
     e90:	str	w11, [x19, x12, lsl #2]
     e94:	ldr	w9, [x14, x9, lsl #2]
     e98:	b	e50 <BZ2_blockSort+0xe50>
     e9c:	add	x9, x9, #0x1
     ea0:	cmp	x9, w8, sxtw
     ea4:	b.ge	e38 <BZ2_blockSort+0xe38>  // b.tcont
     ea8:	ldr	w10, [x19, x9, lsl #2]
     eac:	sub	w10, w10, #0x1
     eb0:	and	w11, w27, w10, asr #31
     eb4:	add	w10, w11, w10
     eb8:	ldrb	w11, [x24, w10, sxtw]
     ebc:	ldrb	w12, [x26, x11]
     ec0:	cbnz	w12, e9c <BZ2_blockSort+0xe9c>
     ec4:	lsl	x8, x11, #2
     ec8:	ldrsw	x11, [x13, x8]
     ecc:	add	w12, w11, #0x1
     ed0:	str	w12, [x13, x8]
     ed4:	str	w10, [x19, x11, lsl #2]
     ed8:	ldr	w8, [x13, x20, lsl #2]
     edc:	b	e9c <BZ2_blockSort+0xe9c>
     ee0:	sub	w10, w8, #0x1
     ee4:	cmp	w10, w9
     ee8:	b.eq	f14 <BZ2_blockSort+0xf14>  // b.none
     eec:	cbnz	w8, efc <BZ2_blockSort+0xefc>
     ef0:	ldr	w8, [sp, #36]
     ef4:	cmp	w9, w8
     ef8:	b.eq	f14 <BZ2_blockSort+0xf14>  // b.none
     efc:	mov	w0, #0x3ef                 	// #1007
     f00:	bl	0 <BZ2_bz__AssertH__fail>
     f04:	add	x3, sp, #0x1, lsl #12
     f08:	add	x5, sp, #0xdf0
     f0c:	add	x4, sp, #0xf80
     f10:	add	x3, x3, #0x110
     f14:	ldr	x14, [sp, #128]
     f18:	mov	x9, xzr
     f1c:	sxtw	x8, w20
     f20:	add	x10, x21, x14, lsl #2
     f24:	add	x11, x10, x9
     f28:	ldr	w12, [x11]
     f2c:	ldr	w13, [x11, #1024]
     f30:	add	x9, x9, #0x800
     f34:	cmp	x9, #0x40, lsl #12
     f38:	orr	w12, w12, #0x200000
     f3c:	orr	w13, w13, #0x200000
     f40:	str	w12, [x11]
     f44:	str	w13, [x11, #1024]
     f48:	b.ne	f24 <BZ2_blockSort+0xf24>  // b.any
     f4c:	ldr	x9, [sp, #56]
     f50:	ldr	x20, [sp, #104]
     f54:	cmp	x9, #0xfe
     f58:	mov	w9, #0x1                   	// #1
     f5c:	strb	w9, [x26, x14]
     f60:	b.hi	580 <BZ2_blockSort+0x580>  // b.pmore
     f64:	ldr	x9, [sp, #120]
     f68:	ldr	w8, [x21, x8, lsl #2]
     f6c:	mov	w12, #0xfffe                	// #65534
     f70:	ldrsw	x9, [x21, x9, lsl #2]
     f74:	and	w8, w8, #0xffdfffff
     f78:	and	x10, x9, #0xffffffffffdfffff
     f7c:	sub	w11, w8, w10
     f80:	mov	w8, #0xffffffff            	// #-1
     f84:	add	w8, w8, #0x1
     f88:	asr	w9, w11, w8
     f8c:	cmp	w9, w12
     f90:	b.gt	f84 <BZ2_blockSort+0xf84>
     f94:	subs	w9, w11, #0x1
     f98:	b.lt	fdc <BZ2_blockSort+0xfdc>  // b.tstop
     f9c:	ldr	x12, [sp, #24]
     fa0:	mov	w11, w11
     fa4:	add	x10, x12, x10, lsl #2
     fa8:	b	fb8 <BZ2_blockSort+0xfb8>
     fac:	add	x12, x11, #0x1
     fb0:	cmp	x12, #0x1
     fb4:	b.le	fdc <BZ2_blockSort+0xfdc>
     fb8:	ldrsw	x12, [x10, x11, lsl #2]
     fbc:	sub	x11, x11, #0x1
     fc0:	lsr	w13, w11, w8
     fc4:	cmp	w12, #0x21
     fc8:	strh	w13, [x23, x12, lsl #1]
     fcc:	b.gt	fac <BZ2_blockSort+0xfac>
     fd0:	add	w12, w12, w27
     fd4:	strh	w13, [x23, w12, sxtw #1]
     fd8:	b	fac <BZ2_blockSort+0xfac>
     fdc:	asr	w8, w9, w8
     fe0:	cmp	w8, #0x10, lsl #12
     fe4:	b.lt	580 <BZ2_blockSort+0x580>  // b.tstop
     fe8:	mov	w0, #0x3ea                 	// #1002
     fec:	bl	0 <BZ2_bz__AssertH__fail>
     ff0:	add	x3, sp, #0x1, lsl #12
     ff4:	add	x5, sp, #0xdf0
     ff8:	add	x4, sp, #0xf80
     ffc:	add	x3, x3, #0x110
    1000:	b	580 <BZ2_blockSort+0x580>
    1004:	ldr	x20, [sp]
    1008:	ldr	w25, [sp, #216]
    100c:	ldr	w26, [sp, #100]
    1010:	cmp	w26, #0x3
    1014:	b.ge	10b4 <BZ2_blockSort+0x10b4>  // b.tcont
    1018:	tbz	w25, #31, 1038 <BZ2_blockSort+0x1038>
    101c:	cmp	w26, #0x2
    1020:	b.ge	1138 <BZ2_blockSort+0x1138>  // b.tcont
    1024:	ldp	x0, x1, [x20, #24]
    1028:	mov	x2, x21
    102c:	mov	w3, w27
    1030:	mov	w4, w26
    1034:	bl	117c <fallbackSort>
    1038:	ldrsw	x8, [x20, #108]
    103c:	mov	w9, #0xffffffff            	// #-1
    1040:	str	w9, [x20, #48]
    1044:	cmp	w8, #0x1
    1048:	b.lt	1064 <BZ2_blockSort+0x1064>  // b.tstop
    104c:	mov	x9, xzr
    1050:	ldr	w10, [x19, x9, lsl #2]
    1054:	cbz	w10, 1070 <BZ2_blockSort+0x1070>
    1058:	add	x9, x9, #0x1
    105c:	cmp	x9, x8
    1060:	b.lt	1050 <BZ2_blockSort+0x1050>  // b.tstop
    1064:	mov	w0, #0x3eb                 	// #1003
    1068:	bl	0 <BZ2_bz__AssertH__fail>
    106c:	b	1074 <BZ2_blockSort+0x1074>
    1070:	str	w9, [x20, #48]
    1074:	add	sp, sp, #0x1, lsl #12
    1078:	add	sp, sp, #0x2b0
    107c:	ldp	x20, x19, [sp, #80]
    1080:	ldp	x22, x21, [sp, #64]
    1084:	ldp	x24, x23, [sp, #48]
    1088:	ldp	x26, x25, [sp, #32]
    108c:	ldp	x28, x27, [sp, #16]
    1090:	ldp	x29, x30, [sp], #96
    1094:	ret
    1098:	ldr	w26, [sp, #100]
    109c:	cmp	w26, #0x3
    10a0:	b.gt	1158 <BZ2_blockSort+0x1158>
    10a4:	ldr	x20, [sp]
    10a8:	ldr	w25, [sp, #216]
    10ac:	cmp	w26, #0x3
    10b0:	b.lt	1018 <BZ2_blockSort+0x1018>  // b.tstop
    10b4:	adrp	x8, 0 <stderr>
    10b8:	ldr	x0, [x8]
    10bc:	ldr	w8, [sp, #12]
    10c0:	cmp	w27, #0x0
    10c4:	adrp	x1, 0 <BZ2_blockSort>
    10c8:	add	x1, x1, #0x0
    10cc:	sub	w2, w8, w25
    10d0:	csinc	w8, w27, wzr, ne  // ne = any
    10d4:	scvtf	s0, w2
    10d8:	scvtf	s1, w8
    10dc:	fdiv	s0, s0, s1
    10e0:	fcvt	d0, s0
    10e4:	ldr	x3, [sp, #16]
    10e8:	bl	0 <fprintf>
    10ec:	tbz	w25, #31, 1038 <BZ2_blockSort+0x1038>
    10f0:	b	101c <BZ2_blockSort+0x101c>
    10f4:	adrp	x8, 0 <stderr>
    10f8:	ldr	x3, [x8]
    10fc:	adrp	x0, 0 <BZ2_blockSort>
    1100:	add	x0, x0, #0x0
    1104:	mov	w1, #0x21                  	// #33
    1108:	mov	w2, #0x1                   	// #1
    110c:	bl	0 <fwrite>
    1110:	b	b4 <BZ2_blockSort+0xb4>
    1114:	adrp	x8, 0 <stderr>
    1118:	ldr	x3, [x8]
    111c:	adrp	x0, 0 <BZ2_blockSort>
    1120:	add	x0, x0, #0x0
    1124:	mov	w1, #0x1b                  	// #27
    1128:	mov	w2, #0x1                   	// #1
    112c:	bl	0 <fwrite>
    1130:	ldr	x16, [sp, #16]
    1134:	b	2d4 <BZ2_blockSort+0x2d4>
    1138:	adrp	x8, 0 <stderr>
    113c:	ldr	x3, [x8]
    1140:	adrp	x0, 0 <BZ2_blockSort>
    1144:	add	x0, x0, #0x0
    1148:	mov	w1, #0x35                  	// #53
    114c:	mov	w2, #0x1                   	// #1
    1150:	bl	0 <fwrite>
    1154:	b	1024 <BZ2_blockSort+0x1024>
    1158:	adrp	x8, 0 <stderr>
    115c:	ldr	x0, [x8]
    1160:	adrp	x1, 0 <BZ2_blockSort>
    1164:	sub	w4, w27, w22
    1168:	add	x1, x1, #0x0
    116c:	ldr	x2, [sp, #16]
    1170:	mov	w3, w22
    1174:	bl	0 <fprintf>
    1178:	b	10a4 <BZ2_blockSort+0x10a4>

000000000000117c <fallbackSort>:
    117c:	stp	x29, x30, [sp, #-96]!
    1180:	stp	x28, x27, [sp, #16]
    1184:	stp	x26, x25, [sp, #32]
    1188:	stp	x24, x23, [sp, #48]
    118c:	stp	x22, x21, [sp, #64]
    1190:	stp	x20, x19, [sp, #80]
    1194:	mov	x29, sp
    1198:	sub	sp, sp, #0xb60
    119c:	mov	w25, w4
    11a0:	mov	w21, w3
    11a4:	mov	x23, x2
    11a8:	mov	x19, x1
    11ac:	mov	x20, x0
    11b0:	cmp	w4, #0x4
    11b4:	b.ge	1b18 <fallbackSort+0x99c>  // b.tcont
    11b8:	add	x0, sp, #0x434
    11bc:	mov	w2, #0x404                 	// #1028
    11c0:	mov	w1, wzr
    11c4:	mov	w28, w21
    11c8:	mov	w22, w21
    11cc:	add	x21, sp, #0x434
    11d0:	bl	0 <memset>
    11d4:	cmp	w22, #0x1
    11d8:	str	w22, [sp, #32]
    11dc:	b.lt	120c <fallbackSort+0x90>  // b.tstop
    11e0:	mov	x8, x28
    11e4:	mov	x9, x19
    11e8:	ldrb	w10, [x9], #1
    11ec:	subs	x8, x8, #0x1
    11f0:	lsl	x10, x10, #2
    11f4:	ldr	w11, [x21, x10]
    11f8:	add	w11, w11, #0x1
    11fc:	str	w11, [x21, x10]
    1200:	b.ne	11e8 <fallbackSort+0x6c>  // b.any
    1204:	ldr	w22, [sp, #1076]
    1208:	b	1210 <fallbackSort+0x94>
    120c:	mov	w22, wzr
    1210:	add	x0, sp, #0x34
    1214:	add	x1, sp, #0x434
    1218:	mov	w2, #0x400                 	// #1024
    121c:	bl	0 <memcpy>
    1220:	mov	x8, xzr
    1224:	add	x9, x21, #0x4
    1228:	ldr	w10, [x9, x8]
    122c:	add	w22, w10, w22
    1230:	str	w22, [x9, x8]
    1234:	add	x8, x8, #0x4
    1238:	cmp	x8, #0x400
    123c:	b.ne	1228 <fallbackSort+0xac>  // b.any
    1240:	ldr	w21, [sp, #32]
    1244:	cmp	w21, #0x1
    1248:	b.lt	1278 <fallbackSort+0xfc>  // b.tstop
    124c:	mov	x8, xzr
    1250:	add	x9, sp, #0x434
    1254:	ldrb	w10, [x19, x8]
    1258:	lsl	x10, x10, #2
    125c:	ldrsw	x11, [x9, x10]
    1260:	sub	x11, x11, #0x1
    1264:	str	w11, [x9, x10]
    1268:	str	w8, [x20, x11, lsl #2]
    126c:	add	x8, x8, #0x1
    1270:	cmp	x28, x8
    1274:	b.ne	1254 <fallbackSort+0xd8>  // b.any
    1278:	cmn	w21, #0x3f
    127c:	b.lt	12ac <fallbackSort+0x130>  // b.tstop
    1280:	add	w8, w21, #0x1f
    1284:	cmp	w21, #0x0
    1288:	csel	w8, w8, w21, lt  // lt = tstop
    128c:	asr	w8, w8, #5
    1290:	cmn	w21, #0x20
    1294:	csinc	w8, wzr, w8, le
    1298:	lsl	x8, x8, #2
    129c:	add	x2, x8, #0x4
    12a0:	mov	x0, x23
    12a4:	mov	w1, wzr
    12a8:	bl	0 <memset>
    12ac:	mov	x8, xzr
    12b0:	add	x9, sp, #0x434
    12b4:	mov	w10, #0x1                   	// #1
    12b8:	ldr	w11, [x9, x8]
    12bc:	add	x8, x8, #0x4
    12c0:	cmp	x8, #0x400
    12c4:	asr	w12, w11, #5
    12c8:	sbfiz	x12, x12, #2, #32
    12cc:	ldr	w13, [x23, x12]
    12d0:	lsl	w11, w10, w11
    12d4:	orr	w11, w11, w13
    12d8:	str	w11, [x23, x12]
    12dc:	b.ne	12b8 <fallbackSort+0x13c>  // b.any
    12e0:	mov	w8, wzr
    12e4:	mov	w9, #0x1                   	// #1
    12e8:	add	w10, w21, w8
    12ec:	asr	w11, w10, #5
    12f0:	sbfiz	x11, x11, #2, #32
    12f4:	ldr	w12, [x23, x11]
    12f8:	lsl	w13, w9, w10
    12fc:	add	w10, w10, #0x1
    1300:	add	w8, w8, #0x2
    1304:	orr	w12, w12, w13
    1308:	asr	w13, w10, #5
    130c:	sbfiz	x13, x13, #2, #32
    1310:	str	w12, [x23, x11]
    1314:	ldr	w11, [x23, x13]
    1318:	lsl	w10, w9, w10
    131c:	cmp	w8, #0x40
    1320:	bic	w10, w11, w10
    1324:	str	w10, [x23, x13]
    1328:	b.ne	12e8 <fallbackSort+0x16c>  // b.any
    132c:	add	x8, x20, #0x4
    1330:	str	x8, [sp, #24]
    1334:	add	x8, x20, #0x8
    1338:	str	x8, [sp, #16]
    133c:	add	x8, x20, #0x10
    1340:	str	x8, [sp, #8]
    1344:	add	x8, x20, #0x14
    1348:	mov	w24, #0x1                   	// #1
    134c:	add	x4, sp, #0x9c8
    1350:	add	x5, sp, #0x838
    1354:	mov	w22, #0x1                   	// #1
    1358:	str	x8, [sp]
    135c:	str	w25, [sp, #36]
    1360:	cmp	w25, #0x4
    1364:	b.ge	1a40 <fallbackSort+0x8c4>  // b.tcont
    1368:	cmp	w21, #0x1
    136c:	b.lt	13ac <fallbackSort+0x230>  // b.tstop
    1370:	mov	x8, xzr
    1374:	mov	w9, wzr
    1378:	ubfx	x10, x8, #5, #27
    137c:	ldr	w10, [x23, x10, lsl #2]
    1380:	ldr	w11, [x20, x8, lsl #2]
    1384:	lsr	w10, w10, w8
    1388:	sub	w11, w11, w22
    138c:	tst	w10, #0x1
    1390:	and	w12, w28, w11, asr #31
    1394:	csel	w9, w9, w8, eq  // eq = none
    1398:	add	x8, x8, #0x1
    139c:	add	w10, w12, w11
    13a0:	cmp	x28, x8
    13a4:	str	w9, [x19, w10, sxtw #2]
    13a8:	b.ne	1378 <fallbackSort+0x1fc>  // b.any
    13ac:	stp	w22, wzr, [sp, #44]
    13b0:	mov	w22, #0xffffffff            	// #-1
    13b4:	add	w27, w22, #0x1
    13b8:	asr	w9, w27, #5
    13bc:	ldr	w9, [x23, w9, sxtw #2]
    13c0:	lsl	w10, w24, w27
    13c4:	mov	w8, w22
    13c8:	tst	w27, #0x1f
    13cc:	and	w9, w10, w9
    13d0:	b.eq	13dc <fallbackSort+0x260>  // b.none
    13d4:	mov	w22, w27
    13d8:	cbnz	w9, 13b4 <fallbackSort+0x238>
    13dc:	cbz	w9, 1414 <fallbackSort+0x298>
    13e0:	sub	w9, w8, #0x1f
    13e4:	add	w9, w9, #0x20
    13e8:	asr	w10, w9, #5
    13ec:	ldr	w10, [x23, w10, sxtw #2]
    13f0:	mov	w27, w8
    13f4:	add	w8, w8, #0x20
    13f8:	cmn	w10, #0x1
    13fc:	b.eq	13e4 <fallbackSort+0x268>  // b.none
    1400:	add	w27, w27, #0x1
    1404:	asr	w8, w27, #5
    1408:	ldr	w8, [x23, w8, sxtw #2]
    140c:	lsr	w8, w8, w27
    1410:	tbnz	w8, #0, 1400 <fallbackSort+0x284>
    1414:	cmp	w27, w21
    1418:	b.gt	1a18 <fallbackSort+0x89c>
    141c:	sub	w25, w27, #0x1
    1420:	sub	w11, w27, #0x20
    1424:	mov	w13, w25
    1428:	mov	w10, w27
    142c:	asr	w8, w10, #5
    1430:	ldr	w12, [x23, w8, sxtw #2]
    1434:	mov	w8, w11
    1438:	lsl	w11, w24, w10
    143c:	mov	w9, w13
    1440:	tst	w10, #0x1f
    1444:	and	w12, w11, w12
    1448:	add	w10, w10, #0x1
    144c:	b.eq	145c <fallbackSort+0x2e0>  // b.none
    1450:	add	w11, w8, #0x1
    1454:	add	w13, w9, #0x1
    1458:	cbz	w12, 142c <fallbackSort+0x2b0>
    145c:	cbz	w12, 1468 <fallbackSort+0x2ec>
    1460:	sub	w26, w10, #0x1
    1464:	b	1494 <fallbackSort+0x318>
    1468:	add	w8, w8, #0x20
    146c:	asr	w10, w8, #5
    1470:	ldr	w10, [x23, w10, sxtw #2]
    1474:	mov	w26, w9
    1478:	add	w9, w9, #0x20
    147c:	cbz	w10, 1468 <fallbackSort+0x2ec>
    1480:	add	w26, w26, #0x1
    1484:	asr	w8, w26, #5
    1488:	ldr	w8, [x23, w8, sxtw #2]
    148c:	lsr	w8, w8, w26
    1490:	tbz	w8, #0, 1480 <fallbackSort+0x304>
    1494:	cmp	w26, w21
    1498:	b.gt	1a18 <fallbackSort+0x89c>
    149c:	cmp	w26, w27
    14a0:	sub	w22, w26, #0x1
    14a4:	b.le	13b4 <fallbackSort+0x238>
    14a8:	ldr	w8, [sp, #48]
    14ac:	str	wzr, [sp, #40]
    14b0:	str	w25, [sp, #2504]
    14b4:	str	w22, [sp, #2104]
    14b8:	sub	w8, w8, w27
    14bc:	add	w8, w8, w22
    14c0:	add	w8, w8, #0x2
    14c4:	str	w8, [sp, #48]
    14c8:	mov	w8, #0x1                   	// #1
    14cc:	mov	w8, w8
    14d0:	b	14dc <fallbackSort+0x360>
    14d4:	cmp	x21, #0x1
    14d8:	b.le	19c0 <fallbackSort+0x844>
    14dc:	mov	x21, x8
    14e0:	cmp	x8, #0x63
    14e4:	b.lt	14f8 <fallbackSort+0x37c>  // b.tstop
    14e8:	mov	w0, #0x3ec                 	// #1004
    14ec:	bl	0 <BZ2_bz__AssertH__fail>
    14f0:	add	x5, sp, #0x838
    14f4:	add	x4, sp, #0x9c8
    14f8:	sub	x8, x21, #0x1
    14fc:	lsl	x9, x8, #2
    1500:	ldr	w10, [x4, x9]
    1504:	ldr	w9, [x5, x9]
    1508:	sxtw	x12, w10
    150c:	sub	w11, w9, w10
    1510:	cmp	w11, #0x9
    1514:	b.gt	1618 <fallbackSort+0x49c>
    1518:	cmp	w9, w10
    151c:	b.eq	14d4 <fallbackSort+0x358>  // b.none
    1520:	cmp	w11, #0x4
    1524:	sxtw	x11, w9
    1528:	b.lt	1538 <fallbackSort+0x3bc>  // b.tstop
    152c:	sub	w13, w9, #0x4
    1530:	cmp	w13, w10
    1534:	b.ge	15b0 <fallbackSort+0x434>  // b.tcont
    1538:	cmp	w9, w10
    153c:	b.le	14d4 <fallbackSort+0x358>
    1540:	add	x10, x20, x11, lsl #2
    1544:	mov	x15, x11
    1548:	b	1564 <fallbackSort+0x3e8>
    154c:	sub	w16, w15, #0x1
    1550:	cmp	x13, x12
    1554:	sub	x10, x10, #0x4
    1558:	mov	x15, x13
    155c:	str	w14, [x20, w16, sxtw #2]
    1560:	b.le	14d4 <fallbackSort+0x358>
    1564:	sub	x13, x15, #0x1
    1568:	ldrsw	x14, [x20, x13, lsl #2]
    156c:	cmp	w15, w9
    1570:	mov	w16, w13
    1574:	b.gt	1550 <fallbackSort+0x3d4>
    1578:	ldr	w16, [x19, x14, lsl #2]
    157c:	mov	x17, x10
    1580:	ldr	w18, [x17]
    1584:	ldr	w0, [x19, x18, lsl #2]
    1588:	cmp	w16, w0
    158c:	b.ls	154c <fallbackSort+0x3d0>  // b.plast
    1590:	stur	w18, [x17, #-4]
    1594:	add	x18, x15, #0x1
    1598:	cmp	x15, x11
    159c:	add	x17, x17, #0x4
    15a0:	mov	x15, x18
    15a4:	b.lt	1580 <fallbackSort+0x404>  // b.tstop
    15a8:	mov	w15, w18
    15ac:	b	154c <fallbackSort+0x3d0>
    15b0:	sxtw	x13, w13
    15b4:	mov	w14, w9
    15b8:	b	15d4 <fallbackSort+0x458>
    15bc:	mov	w16, w13
    15c0:	cmp	x13, x12
    15c4:	sub	x13, x13, #0x1
    15c8:	sub	w14, w14, #0x1
    15cc:	str	w15, [x20, w16, sxtw #2]
    15d0:	b.le	1538 <fallbackSort+0x3bc>
    15d4:	ldrsw	x15, [x20, x13, lsl #2]
    15d8:	add	x16, x13, #0x4
    15dc:	cmp	x16, x11
    15e0:	b.gt	15bc <fallbackSort+0x440>
    15e4:	ldr	w17, [x19, x15, lsl #2]
    15e8:	sxtw	x18, w14
    15ec:	mov	w16, w13
    15f0:	ldr	w0, [x20, x18, lsl #2]
    15f4:	ldr	w1, [x19, x0, lsl #2]
    15f8:	cmp	w17, w1
    15fc:	b.ls	15c0 <fallbackSort+0x444>  // b.plast
    1600:	add	x18, x18, #0x4
    1604:	str	w0, [x20, w16, sxtw #2]
    1608:	cmp	x18, x11
    160c:	add	w16, w16, #0x4
    1610:	b.le	15f0 <fallbackSort+0x474>
    1614:	b	15c0 <fallbackSort+0x444>
    1618:	ldr	w14, [sp, #40]
    161c:	mov	w11, #0x1dc5                	// #7621
    1620:	orr	w13, wzr, #0x1
    1624:	madd	w11, w14, w11, w13
    1628:	and	w13, w11, #0x7fff
    162c:	mov	w11, #0xaaab                	// #43691
    1630:	movk	w11, #0xaaaa, lsl #16
    1634:	umull	x11, w13, w11
    1638:	lsr	x11, x11, #33
    163c:	add	w11, w11, w11, lsl #1
    1640:	str	w13, [sp, #40]
    1644:	subs	w13, w13, w11
    1648:	mov	w11, w10
    164c:	b.eq	1668 <fallbackSort+0x4ec>  // b.none
    1650:	cmp	w13, #0x1
    1654:	b.ne	1664 <fallbackSort+0x4e8>  // b.any
    1658:	add	w11, w9, w10
    165c:	asr	w11, w11, #1
    1660:	b	1668 <fallbackSort+0x4ec>
    1664:	mov	w11, w9
    1668:	ldr	w11, [x20, w11, sxtw #2]
    166c:	mov	w14, w9
    1670:	mov	w15, w9
    1674:	mov	w13, w10
    1678:	ldr	w16, [x19, x11, lsl #2]
    167c:	mov	w11, w10
    1680:	cmp	w13, w15
    1684:	b.gt	16ec <fallbackSort+0x570>
    1688:	sxtw	x17, w15
    168c:	sxtw	x11, w11
    1690:	sxtw	x18, w13
    1694:	ldr	w13, [x20, x18, lsl #2]
    1698:	ldr	w0, [x19, x13, lsl #2]
    169c:	subs	w0, w0, w16
    16a0:	b.eq	16c0 <fallbackSort+0x544>  // b.none
    16a4:	cmp	w0, #0x0
    16a8:	b.gt	16e8 <fallbackSort+0x56c>
    16ac:	add	x13, x18, #0x1
    16b0:	cmp	x18, x17
    16b4:	mov	x18, x13
    16b8:	b.lt	1694 <fallbackSort+0x518>  // b.tstop
    16bc:	b	16ec <fallbackSort+0x570>
    16c0:	lsl	x0, x11, #2
    16c4:	ldr	w1, [x20, x0]
    16c8:	add	x11, x11, #0x1
    16cc:	cmp	w15, w18
    16d0:	str	w1, [x20, x18, lsl #2]
    16d4:	str	w13, [x20, x0]
    16d8:	add	w13, w18, #0x1
    16dc:	b.gt	1690 <fallbackSort+0x514>
    16e0:	add	w13, w18, #0x1
    16e4:	b	16ec <fallbackSort+0x570>
    16e8:	mov	w13, w18
    16ec:	cmp	w13, w15
    16f0:	b.gt	1770 <fallbackSort+0x5f4>
    16f4:	sxtw	x17, w13
    16f8:	sxtw	x14, w14
    16fc:	sxtw	x18, w15
    1700:	ldr	w15, [x20, x18, lsl #2]
    1704:	ldr	w0, [x19, x15, lsl #2]
    1708:	subs	w0, w0, w16
    170c:	b.eq	1728 <fallbackSort+0x5ac>  // b.none
    1710:	tbnz	w0, #31, 174c <fallbackSort+0x5d0>
    1714:	sub	x15, x18, #0x1
    1718:	cmp	x18, x17
    171c:	mov	x18, x15
    1720:	b.gt	1700 <fallbackSort+0x584>
    1724:	b	1770 <fallbackSort+0x5f4>
    1728:	lsl	x0, x14, #2
    172c:	ldr	w1, [x20, x0]
    1730:	sub	x14, x14, #0x1
    1734:	cmp	w13, w18
    1738:	str	w1, [x20, x18, lsl #2]
    173c:	str	w15, [x20, x0]
    1740:	sub	w15, w18, #0x1
    1744:	b.lt	16fc <fallbackSort+0x580>  // b.tstop
    1748:	b	1770 <fallbackSort+0x5f4>
    174c:	lsl	x17, x17, #2
    1750:	ldr	w0, [x20, x17]
    1754:	add	w13, w13, #0x1
    1758:	str	w15, [x20, x17]
    175c:	sub	w15, w18, #0x1
    1760:	str	w0, [x20, x18, lsl #2]
    1764:	cmp	w13, w15
    1768:	b.le	1688 <fallbackSort+0x50c>
    176c:	b	16ec <fallbackSort+0x570>
    1770:	cmp	w14, w11
    1774:	b.lt	19b8 <fallbackSort+0x83c>  // b.tstop
    1778:	sub	w0, w11, w10
    177c:	sub	w1, w13, w11
    1780:	cmp	w0, w1
    1784:	csel	w16, w0, w1, lt  // lt = tstop
    1788:	cmp	w16, #0x1
    178c:	b.lt	1870 <fallbackSort+0x6f4>  // b.tstop
    1790:	cmp	w0, w1
    1794:	csel	w18, w0, w1, lt  // lt = tstop
    1798:	cmp	w18, #0x1
    179c:	csinc	w18, w18, wzr, lt  // lt = tstop
    17a0:	sub	w17, w13, w16
    17a4:	sub	w18, w16, w18
    17a8:	cmp	w18, #0x7
    17ac:	sxtw	x17, w17
    17b0:	b.cc	1848 <fallbackSort+0x6cc>  // b.lo, b.ul, b.last
    17b4:	cmp	w0, w1
    17b8:	csel	w0, w0, w1, lt  // lt = tstop
    17bc:	cmp	w0, #0x1
    17c0:	ldr	x3, [sp, #24]
    17c4:	csinc	w0, w0, wzr, lt  // lt = tstop
    17c8:	sub	w0, w16, w0
    17cc:	add	x1, x17, x0
    17d0:	add	x2, x20, x12, lsl #2
    17d4:	add	x1, x3, x1, lsl #2
    17d8:	cmp	x2, x1
    17dc:	b.cs	17f8 <fallbackSort+0x67c>  // b.hs, b.nlast
    17e0:	ldr	x1, [sp, #24]
    17e4:	add	x0, x12, x0
    17e8:	add	x0, x1, x0, lsl #2
    17ec:	add	x1, x20, x17, lsl #2
    17f0:	cmp	x1, x0
    17f4:	b.cc	1848 <fallbackSort+0x6cc>  // b.lo, b.ul, b.last
    17f8:	ldr	x3, [sp, #8]
    17fc:	add	x18, x18, #0x1
    1800:	and	x1, x18, #0x1fffffff8
    1804:	add	x0, x1, x12
    1808:	add	x2, x3, x17, lsl #2
    180c:	add	x17, x1, x17
    1810:	sub	w16, w16, w1
    1814:	add	x12, x3, x12, lsl #2
    1818:	mov	x3, x1
    181c:	ldp	q0, q3, [x12, #-16]
    1820:	ldp	q1, q2, [x2, #-16]
    1824:	subs	x3, x3, #0x8
    1828:	stp	q1, q2, [x12, #-16]
    182c:	stp	q0, q3, [x2, #-16]
    1830:	add	x2, x2, #0x20
    1834:	add	x12, x12, #0x20
    1838:	b.ne	181c <fallbackSort+0x6a0>  // b.any
    183c:	cmp	x18, x1
    1840:	mov	x12, x0
    1844:	b.eq	1870 <fallbackSort+0x6f4>  // b.none
    1848:	add	x12, x20, x12, lsl #2
    184c:	add	x17, x20, x17, lsl #2
    1850:	add	w16, w16, #0x1
    1854:	ldr	w18, [x17]
    1858:	ldr	w0, [x12]
    185c:	sub	w16, w16, #0x1
    1860:	cmp	w16, #0x1
    1864:	str	w18, [x12], #4
    1868:	str	w0, [x17], #4
    186c:	b.gt	1854 <fallbackSort+0x6d8>
    1870:	sub	w18, w9, w14
    1874:	sub	w12, w14, w15
    1878:	cmp	w18, w12
    187c:	csel	w14, w18, w12, lt  // lt = tstop
    1880:	cmp	w14, #0x1
    1884:	b.lt	1970 <fallbackSort+0x7f4>  // b.tstop
    1888:	cmp	w12, w18
    188c:	csel	w16, w12, w18, lt  // lt = tstop
    1890:	cmp	w16, #0x1
    1894:	csinc	w16, w16, wzr, lt  // lt = tstop
    1898:	sub	w15, w9, w14
    189c:	sub	w17, w14, w16
    18a0:	sxtw	x15, w15
    18a4:	cmp	w17, #0x7
    18a8:	sxtw	x16, w13
    18ac:	b.cc	1944 <fallbackSort+0x7c8>  // b.lo, b.ul, b.last
    18b0:	cmp	w12, w18
    18b4:	csel	w18, w12, w18, lt  // lt = tstop
    18b8:	cmp	w18, #0x1
    18bc:	ldr	x2, [sp, #16]
    18c0:	csinc	w18, w18, wzr, lt  // lt = tstop
    18c4:	sub	w18, w14, w18
    18c8:	add	x1, x15, x18
    18cc:	add	x0, x20, x16, lsl #2
    18d0:	add	x1, x2, x1, lsl #2
    18d4:	cmp	x0, x1
    18d8:	b.cs	18f4 <fallbackSort+0x778>  // b.hs, b.nlast
    18dc:	ldr	x0, [sp, #24]
    18e0:	add	x18, x16, x18
    18e4:	add	x18, x0, x18, lsl #2
    18e8:	add	x0, x0, x15, lsl #2
    18ec:	cmp	x0, x18
    18f0:	b.cc	1944 <fallbackSort+0x7c8>  // b.lo, b.ul, b.last
    18f4:	ldp	x18, x2, [sp]
    18f8:	add	x17, x17, #0x1
    18fc:	and	x0, x17, #0x1fffffff8
    1900:	sub	w14, w14, w0
    1904:	add	x1, x18, x15, lsl #2
    1908:	add	x18, x0, x16
    190c:	add	x15, x0, x15
    1910:	add	x16, x2, x16, lsl #2
    1914:	mov	x2, x0
    1918:	ldp	q0, q3, [x16, #-16]
    191c:	ldp	q1, q2, [x1, #-16]
    1920:	subs	x2, x2, #0x8
    1924:	stp	q1, q2, [x16, #-16]
    1928:	stp	q0, q3, [x1, #-16]
    192c:	add	x1, x1, #0x20
    1930:	add	x16, x16, #0x20
    1934:	b.ne	1918 <fallbackSort+0x79c>  // b.any
    1938:	cmp	x17, x0
    193c:	mov	x16, x18
    1940:	b.eq	1970 <fallbackSort+0x7f4>  // b.none
    1944:	ldr	x17, [sp, #24]
    1948:	add	x16, x20, x16, lsl #2
    194c:	add	w14, w14, #0x1
    1950:	add	x15, x17, x15, lsl #2
    1954:	ldr	w17, [x15]
    1958:	ldr	w18, [x16]
    195c:	sub	w14, w14, #0x1
    1960:	cmp	w14, #0x1
    1964:	str	w17, [x16], #4
    1968:	str	w18, [x15], #4
    196c:	b.gt	1954 <fallbackSort+0x7d8>
    1970:	mvn	w11, w11
    1974:	sub	w12, w9, w12
    1978:	add	w14, w10, w11
    197c:	add	w11, w12, #0x1
    1980:	add	w12, w14, w13
    1984:	sub	w13, w12, w10
    1988:	sub	w14, w9, w11
    198c:	cmp	w13, w14
    1990:	b.le	199c <fallbackSort+0x820>
    1994:	str	w12, [x5, x8, lsl #2]
    1998:	b	19a8 <fallbackSort+0x82c>
    199c:	str	w11, [x4, x8, lsl #2]
    19a0:	mov	w11, w10
    19a4:	mov	w9, w12
    19a8:	sbfiz	x8, x21, #2, #32
    19ac:	str	w11, [x4, x8]
    19b0:	str	w9, [x5, x8]
    19b4:	add	w8, w21, #0x1
    19b8:	cmp	w8, #0x0
    19bc:	b.gt	14cc <fallbackSort+0x350>
    19c0:	ldr	w21, [sp, #32]
    19c4:	cmp	w27, w26
    19c8:	b.gt	13b4 <fallbackSort+0x238>
    19cc:	sxtw	x8, w25
    19d0:	sxtw	x9, w26
    19d4:	mov	w10, #0xffffffff            	// #-1
    19d8:	b	19e8 <fallbackSort+0x86c>
    19dc:	add	x8, x8, #0x1
    19e0:	cmp	x8, x9
    19e4:	b.ge	13b4 <fallbackSort+0x238>  // b.tcont
    19e8:	ldr	w11, [x20, x8, lsl #2]
    19ec:	ldr	w11, [x19, x11, lsl #2]
    19f0:	cmp	w10, w11
    19f4:	b.eq	19dc <fallbackSort+0x860>  // b.none
    19f8:	asr	w10, w8, #5
    19fc:	sbfiz	x10, x10, #2, #32
    1a00:	ldr	w12, [x23, x10]
    1a04:	lsl	w13, w24, w8
    1a08:	orr	w12, w12, w13
    1a0c:	str	w12, [x23, x10]
    1a10:	mov	w10, w11
    1a14:	b	19dc <fallbackSort+0x860>
    1a18:	ldr	w25, [sp, #36]
    1a1c:	ldr	w26, [sp, #48]
    1a20:	cmp	w25, #0x4
    1a24:	b.ge	1a6c <fallbackSort+0x8f0>  // b.tcont
    1a28:	ldr	w22, [sp, #44]
    1a2c:	lsl	w22, w22, #1
    1a30:	cmp	w22, w21
    1a34:	b.gt	1a90 <fallbackSort+0x914>
    1a38:	cbnz	w26, 1360 <fallbackSort+0x1e4>
    1a3c:	b	1a90 <fallbackSort+0x914>
    1a40:	adrp	x8, 0 <stderr>
    1a44:	ldr	x0, [x8]
    1a48:	adrp	x1, 0 <BZ2_blockSort>
    1a4c:	add	x1, x1, #0x0
    1a50:	mov	w2, w22
    1a54:	bl	0 <fprintf>
    1a58:	add	x5, sp, #0x838
    1a5c:	add	x4, sp, #0x9c8
    1a60:	cmp	w21, #0x1
    1a64:	b.ge	1370 <fallbackSort+0x1f4>  // b.tcont
    1a68:	b	13ac <fallbackSort+0x230>
    1a6c:	adrp	x8, 0 <stderr>
    1a70:	ldr	x0, [x8]
    1a74:	adrp	x1, 0 <BZ2_blockSort>
    1a78:	add	x1, x1, #0x0
    1a7c:	mov	w2, w26
    1a80:	bl	0 <fprintf>
    1a84:	add	x5, sp, #0x838
    1a88:	add	x4, sp, #0x9c8
    1a8c:	b	1a28 <fallbackSort+0x8ac>
    1a90:	cmp	w25, #0x4
    1a94:	b.ge	1b38 <fallbackSort+0x9bc>  // b.tcont
    1a98:	cmp	w21, #0x1
    1a9c:	b.lt	1af8 <fallbackSort+0x97c>  // b.tstop
    1aa0:	mov	x8, xzr
    1aa4:	mov	x11, xzr
    1aa8:	add	x9, sp, #0x34
    1aac:	sxtw	x11, w11
    1ab0:	sub	w10, w11, #0x1
    1ab4:	ldr	w12, [x9, x11, lsl #2]
    1ab8:	add	x11, x11, #0x1
    1abc:	add	w10, w10, #0x1
    1ac0:	cbz	w12, 1ab4 <fallbackSort+0x938>
    1ac4:	add	x13, x9, x11, lsl #2
    1ac8:	sub	w12, w12, #0x1
    1acc:	stur	w12, [x13, #-4]
    1ad0:	ldr	w12, [x20, x8, lsl #2]
    1ad4:	add	x8, x8, #0x1
    1ad8:	sub	x11, x11, #0x1
    1adc:	cmp	x8, x28
    1ae0:	strb	w11, [x19, x12]
    1ae4:	b.ne	1aac <fallbackSort+0x930>  // b.any
    1ae8:	cmp	w10, #0x100
    1aec:	b.lt	1af8 <fallbackSort+0x97c>  // b.tstop
    1af0:	mov	w0, #0x3ed                 	// #1005
    1af4:	bl	0 <BZ2_bz__AssertH__fail>
    1af8:	add	sp, sp, #0xb60
    1afc:	ldp	x20, x19, [sp, #80]
    1b00:	ldp	x22, x21, [sp, #64]
    1b04:	ldp	x24, x23, [sp, #48]
    1b08:	ldp	x26, x25, [sp, #32]
    1b0c:	ldp	x28, x27, [sp, #16]
    1b10:	ldp	x29, x30, [sp], #96
    1b14:	ret
    1b18:	adrp	x8, 0 <stderr>
    1b1c:	ldr	x3, [x8]
    1b20:	adrp	x0, 0 <BZ2_blockSort>
    1b24:	add	x0, x0, #0x0
    1b28:	mov	w1, #0x1b                  	// #27
    1b2c:	mov	w2, #0x1                   	// #1
    1b30:	bl	0 <fwrite>
    1b34:	b	11b8 <fallbackSort+0x3c>
    1b38:	adrp	x8, 0 <stderr>
    1b3c:	ldr	x3, [x8]
    1b40:	adrp	x0, 0 <BZ2_blockSort>
    1b44:	add	x0, x0, #0x0
    1b48:	mov	w1, #0x21                  	// #33
    1b4c:	mov	w2, #0x1                   	// #1
    1b50:	bl	0 <fwrite>
    1b54:	cmp	w21, #0x1
    1b58:	b.ge	1aa0 <fallbackSort+0x924>  // b.tcont
    1b5c:	b	1af8 <fallbackSort+0x97c>

0000000000001b60 <mainGtU>:
    1b60:	ldrb	w8, [x2, w0, uxtw]
    1b64:	ldrb	w9, [x2, w1, uxtw]
    1b68:	cmp	w8, w9
    1b6c:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1b70:	add	w8, w0, #0x1
    1b74:	add	w9, w1, #0x1
    1b78:	ldrb	w8, [x2, w8, uxtw]
    1b7c:	ldrb	w9, [x2, w9, uxtw]
    1b80:	cmp	w8, w9
    1b84:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1b88:	add	w8, w0, #0x2
    1b8c:	add	w9, w1, #0x2
    1b90:	ldrb	w8, [x2, w8, uxtw]
    1b94:	ldrb	w9, [x2, w9, uxtw]
    1b98:	cmp	w8, w9
    1b9c:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1ba0:	add	w8, w0, #0x3
    1ba4:	add	w9, w1, #0x3
    1ba8:	ldrb	w8, [x2, w8, uxtw]
    1bac:	ldrb	w9, [x2, w9, uxtw]
    1bb0:	cmp	w8, w9
    1bb4:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1bb8:	add	w8, w0, #0x4
    1bbc:	add	w9, w1, #0x4
    1bc0:	ldrb	w8, [x2, w8, uxtw]
    1bc4:	ldrb	w9, [x2, w9, uxtw]
    1bc8:	cmp	w8, w9
    1bcc:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1bd0:	add	w8, w0, #0x5
    1bd4:	add	w9, w1, #0x5
    1bd8:	ldrb	w8, [x2, w8, uxtw]
    1bdc:	ldrb	w9, [x2, w9, uxtw]
    1be0:	cmp	w8, w9
    1be4:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1be8:	add	w8, w0, #0x6
    1bec:	add	w9, w1, #0x6
    1bf0:	ldrb	w8, [x2, w8, uxtw]
    1bf4:	ldrb	w9, [x2, w9, uxtw]
    1bf8:	cmp	w8, w9
    1bfc:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1c00:	add	w8, w0, #0x7
    1c04:	add	w9, w1, #0x7
    1c08:	ldrb	w8, [x2, w8, uxtw]
    1c0c:	ldrb	w9, [x2, w9, uxtw]
    1c10:	cmp	w8, w9
    1c14:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1c18:	add	w8, w0, #0x8
    1c1c:	add	w9, w1, #0x8
    1c20:	ldrb	w8, [x2, w8, uxtw]
    1c24:	ldrb	w9, [x2, w9, uxtw]
    1c28:	cmp	w8, w9
    1c2c:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1c30:	add	w8, w0, #0x9
    1c34:	add	w9, w1, #0x9
    1c38:	ldrb	w8, [x2, w8, uxtw]
    1c3c:	ldrb	w9, [x2, w9, uxtw]
    1c40:	cmp	w8, w9
    1c44:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1c48:	add	w8, w0, #0xa
    1c4c:	add	w9, w1, #0xa
    1c50:	ldrb	w8, [x2, w8, uxtw]
    1c54:	ldrb	w9, [x2, w9, uxtw]
    1c58:	cmp	w8, w9
    1c5c:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1c60:	add	w8, w0, #0xb
    1c64:	add	w9, w1, #0xb
    1c68:	ldrb	w8, [x2, w8, uxtw]
    1c6c:	ldrb	w9, [x2, w9, uxtw]
    1c70:	cmp	w8, w9
    1c74:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1c78:	add	w9, w0, #0xc
    1c7c:	add	w10, w1, #0xc
    1c80:	add	w8, w4, #0x10
    1c84:	mov	w9, w9
    1c88:	mov	w10, w10
    1c8c:	ldrb	w11, [x2, x9]
    1c90:	ldrb	w12, [x2, x10]
    1c94:	cmp	w11, w12
    1c98:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1c9c:	ldrh	w11, [x3, x9, lsl #1]
    1ca0:	ldrh	w12, [x3, x10, lsl #1]
    1ca4:	cmp	w11, w12
    1ca8:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1cac:	add	w11, w9, #0x1
    1cb0:	add	w12, w10, #0x1
    1cb4:	ldrb	w13, [x2, x11]
    1cb8:	ldrb	w14, [x2, x12]
    1cbc:	cmp	w13, w14
    1cc0:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1cc4:	ldrh	w11, [x3, x11, lsl #1]
    1cc8:	ldrh	w12, [x3, x12, lsl #1]
    1ccc:	cmp	w11, w12
    1cd0:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1cd4:	add	w11, w9, #0x2
    1cd8:	add	w12, w10, #0x2
    1cdc:	ldrb	w13, [x2, x11]
    1ce0:	ldrb	w14, [x2, x12]
    1ce4:	cmp	w13, w14
    1ce8:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1cec:	ldrh	w11, [x3, x11, lsl #1]
    1cf0:	ldrh	w12, [x3, x12, lsl #1]
    1cf4:	cmp	w11, w12
    1cf8:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1cfc:	add	w11, w9, #0x3
    1d00:	add	w12, w10, #0x3
    1d04:	ldrb	w13, [x2, x11]
    1d08:	ldrb	w14, [x2, x12]
    1d0c:	cmp	w13, w14
    1d10:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1d14:	ldrh	w11, [x3, x11, lsl #1]
    1d18:	ldrh	w12, [x3, x12, lsl #1]
    1d1c:	cmp	w11, w12
    1d20:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1d24:	add	w11, w9, #0x4
    1d28:	add	w12, w10, #0x4
    1d2c:	ldrb	w13, [x2, x11]
    1d30:	ldrb	w14, [x2, x12]
    1d34:	cmp	w13, w14
    1d38:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1d3c:	ldrh	w11, [x3, x11, lsl #1]
    1d40:	ldrh	w12, [x3, x12, lsl #1]
    1d44:	cmp	w11, w12
    1d48:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1d4c:	add	w11, w9, #0x5
    1d50:	add	w12, w10, #0x5
    1d54:	ldrb	w13, [x2, x11]
    1d58:	ldrb	w14, [x2, x12]
    1d5c:	cmp	w13, w14
    1d60:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1d64:	ldrh	w11, [x3, x11, lsl #1]
    1d68:	ldrh	w12, [x3, x12, lsl #1]
    1d6c:	cmp	w11, w12
    1d70:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1d74:	add	w11, w9, #0x6
    1d78:	add	w12, w10, #0x6
    1d7c:	ldrb	w13, [x2, x11]
    1d80:	ldrb	w14, [x2, x12]
    1d84:	cmp	w13, w14
    1d88:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1d8c:	ldrh	w11, [x3, x11, lsl #1]
    1d90:	ldrh	w12, [x3, x12, lsl #1]
    1d94:	cmp	w11, w12
    1d98:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1d9c:	add	w11, w9, #0x7
    1da0:	add	w12, w10, #0x7
    1da4:	ldrb	w13, [x2, x11]
    1da8:	ldrb	w14, [x2, x12]
    1dac:	cmp	w13, w14
    1db0:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1db4:	ldrh	w11, [x3, x11, lsl #1]
    1db8:	ldrh	w12, [x3, x12, lsl #1]
    1dbc:	cmp	w11, w12
    1dc0:	b.ne	1e04 <mainGtU+0x2a4>  // b.any
    1dc4:	add	w9, w9, #0x8
    1dc8:	ldr	w11, [x5]
    1dcc:	add	w10, w10, #0x8
    1dd0:	cmp	w9, w4
    1dd4:	csel	w12, wzr, w4, cc  // cc = lo, ul, last
    1dd8:	cmp	w10, w4
    1ddc:	sub	w8, w8, #0x8
    1de0:	sub	w9, w9, w12
    1de4:	csel	w12, wzr, w4, cc  // cc = lo, ul, last
    1de8:	mov	w0, wzr
    1dec:	sub	w10, w10, w12
    1df0:	sub	w11, w11, #0x1
    1df4:	cmp	w8, #0x7
    1df8:	str	w11, [x5]
    1dfc:	b.gt	1c84 <mainGtU+0x124>
    1e00:	ret
    1e04:	cset	w0, hi  // hi = pmore
    1e08:	ret

huffman.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_hbMakeCodeLengths>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	stp	x28, x27, [sp, #16]
   8:	stp	x26, x25, [sp, #32]
   c:	stp	x24, x23, [sp, #48]
  10:	stp	x22, x21, [sp, #64]
  14:	stp	x20, x19, [sp, #80]
  18:	mov	x29, sp
  1c:	sub	sp, sp, #0x1, lsl #12
  20:	sub	sp, sp, #0x460
  24:	mov	w19, w3
  28:	mov	w20, w2
  2c:	cmp	w2, #0x1
  30:	mov	x21, x0
  34:	b.lt	c0 <BZ2_hbMakeCodeLengths+0xc0>  // b.tstop
  38:	cmp	w20, #0x3
  3c:	mov	w8, w20
  40:	b.hi	4c <BZ2_hbMakeCodeLengths+0x4c>  // b.pmore
  44:	mov	x9, xzr
  48:	b	88 <BZ2_hbMakeCodeLengths+0x88>
  4c:	and	x9, x8, #0xfffffffc
  50:	add	x10, sp, #0x838
  54:	add	x10, x10, #0x4
  58:	movi	v0.4s, #0x1, lsl #8
  5c:	mov	x11, x9
  60:	mov	x12, x1
  64:	ldr	q1, [x12], #16
  68:	subs	x11, x11, #0x4
  6c:	cmeq	v2.4s, v1.4s, #0
  70:	shl	v1.4s, v1.4s, #8
  74:	bsl	v2.16b, v0.16b, v1.16b
  78:	str	q2, [x10], #16
  7c:	b.ne	64 <BZ2_hbMakeCodeLengths+0x64>  // b.any
  80:	cmp	x9, x8
  84:	b.eq	c0 <BZ2_hbMakeCodeLengths+0xc0>  // b.none
  88:	lsl	x10, x9, #2
  8c:	add	x11, sp, #0x838
  90:	sub	x8, x8, x9
  94:	add	x9, x1, x10
  98:	add	x10, x10, x11
  9c:	add	x10, x10, #0x4
  a0:	mov	w11, #0x100                 	// #256
  a4:	ldr	w12, [x9], #4
  a8:	lsl	w13, w12, #8
  ac:	cmp	w12, #0x0
  b0:	csel	w12, w11, w13, eq  // eq = none
  b4:	subs	x8, x8, #0x1
  b8:	str	w12, [x10], #4
  bc:	b.ne	a4 <BZ2_hbMakeCodeLengths+0xa4>  // b.any
  c0:	mov	w8, #0xfffffffe            	// #-2
  c4:	cmp	w20, #0x1
  c8:	str	wzr, [sp, #4168]
  cc:	str	wzr, [sp, #2104]
  d0:	str	w8, [sp, #40]
  d4:	b.lt	480 <BZ2_hbMakeCodeLengths+0x480>  // b.tstop
  d8:	add	w24, w20, #0x1
  dc:	add	x26, sp, #0x838
  e0:	sub	x22, x24, #0x1
  e4:	add	x10, x26, #0x4
  e8:	str	x10, [sp, #16]
  ec:	and	x10, x22, #0xfffffffffffffffc
  f0:	sxtw	x9, w20
  f4:	add	x23, sp, #0x1, lsl #12
  f8:	str	x10, [sp, #32]
  fc:	orr	x10, x10, #0x1
 100:	mov	x8, xzr
 104:	str	x9, [sp, #24]
 108:	mov	w25, w20
 10c:	mov	w9, #0x1                   	// #1
 110:	add	x27, sp, #0x28
 114:	mov	w28, #0xffffffff            	// #-1
 118:	add	x23, x23, #0x48
 11c:	str	x10, [sp, #8]
 120:	b	144 <BZ2_hbMakeCodeLengths+0x144>
 124:	mov	w9, #0xfffffffe            	// #-2
 128:	mov	x8, xzr
 12c:	str	w9, [sp, #40]
 130:	cmp	w20, #0x1
 134:	mov	w9, #0x1                   	// #1
 138:	str	wzr, [sp, #4168]
 13c:	str	wzr, [sp, #2104]
 140:	b.lt	480 <BZ2_hbMakeCodeLengths+0x480>  // b.tstop
 144:	add	x8, x8, #0x1
 148:	add	x10, x23, x8, lsl #2
 14c:	str	w9, [x10]
 150:	ubfx	x12, x8, #1, #31
 154:	ldrsw	x13, [x23, w12, uxtw #2]
 158:	lsl	x14, x9, #2
 15c:	ldr	w11, [x26, x14]
 160:	str	w28, [x27, x14]
 164:	ldr	w15, [x26, x13, lsl #2]
 168:	cmp	w11, w15
 16c:	b.ge	190 <BZ2_hbMakeCodeLengths+0x190>  // b.tcont
 170:	str	w13, [x10]
 174:	asr	w14, w12, #1
 178:	ldrsw	x13, [x23, w14, sxtw #2]
 17c:	ldr	w10, [x26, x13, lsl #2]
 180:	cmp	w11, w10
 184:	add	x10, x23, w12, sxtw #2
 188:	mov	w12, w14
 18c:	b.lt	170 <BZ2_hbMakeCodeLengths+0x170>  // b.tstop
 190:	str	w9, [x10]
 194:	cmp	x8, x25
 198:	add	x9, x9, #0x1
 19c:	b.ne	144 <BZ2_hbMakeCodeLengths+0x144>  // b.any
 1a0:	cmp	w20, #0x104
 1a4:	b.cc	1b0 <BZ2_hbMakeCodeLengths+0x1b0>  // b.lo, b.ul, b.last
 1a8:	mov	w0, #0x7d1                 	// #2001
 1ac:	bl	0 <BZ2_bz__AssertH__fail>
 1b0:	cmp	w20, #0x2
 1b4:	mov	w8, w20
 1b8:	b.lt	38c <BZ2_hbMakeCodeLengths+0x38c>  // b.tstop
 1bc:	ldr	x8, [sp, #24]
 1c0:	mov	x9, x25
 1c4:	b	1d8 <BZ2_hbMakeCodeLengths+0x1d8>
 1c8:	cmp	x9, #0x2
 1cc:	mov	x9, x10
 1d0:	str	w8, [x12]
 1d4:	b.le	38c <BZ2_hbMakeCodeLengths+0x38c>
 1d8:	ldr	w12, [x23, x9, lsl #2]
 1dc:	ldrsw	x11, [sp, #4172]
 1e0:	cmp	x9, #0x3
 1e4:	sub	x10, x9, #0x1
 1e8:	str	w12, [sp, #4172]
 1ec:	b.lt	25c <BZ2_hbMakeCodeLengths+0x25c>  // b.tstop
 1f0:	sxtw	x13, w12
 1f4:	ldr	w13, [x26, x13, lsl #2]
 1f8:	mov	w14, #0x1                   	// #1
 1fc:	mov	w16, #0x2                   	// #2
 200:	sxtw	x17, w16
 204:	cmp	x10, x17
 208:	b.le	230 <BZ2_hbMakeCodeLengths+0x230>
 20c:	orr	x15, x17, #0x1
 210:	ldrsw	x18, [x23, x15, lsl #2]
 214:	ldrsw	x17, [x23, x17, lsl #2]
 218:	ldr	w18, [x26, x18, lsl #2]
 21c:	ldr	w17, [x26, x17, lsl #2]
 220:	cmp	w18, w17
 224:	csel	w15, w15, w16, lt  // lt = tstop
 228:	sxtw	x17, w15
 22c:	b	234 <BZ2_hbMakeCodeLengths+0x234>
 230:	mov	w15, w16
 234:	ldrsw	x17, [x23, x17, lsl #2]
 238:	ldr	w16, [x26, x17, lsl #2]
 23c:	cmp	w13, w16
 240:	b.lt	264 <BZ2_hbMakeCodeLengths+0x264>  // b.tstop
 244:	lsl	w16, w15, #1
 248:	cmp	x9, w16, sxtw
 24c:	str	w17, [x23, w14, sxtw #2]
 250:	mov	w14, w15
 254:	b.gt	200 <BZ2_hbMakeCodeLengths+0x200>
 258:	b	268 <BZ2_hbMakeCodeLengths+0x268>
 25c:	mov	w15, #0x1                   	// #1
 260:	b	268 <BZ2_hbMakeCodeLengths+0x268>
 264:	mov	w15, w14
 268:	str	w12, [x23, w15, sxtw #2]
 26c:	add	x12, x23, x10, lsl #2
 270:	ldr	w14, [x12]
 274:	ldrsw	x13, [sp, #4172]
 278:	cmp	x9, #0x3
 27c:	str	w14, [sp, #4172]
 280:	b.gt	28c <BZ2_hbMakeCodeLengths+0x28c>
 284:	mov	w18, #0x1                   	// #1
 288:	b	300 <BZ2_hbMakeCodeLengths+0x300>
 28c:	sxtw	x15, w14
 290:	ldr	w15, [x26, x15, lsl #2]
 294:	sub	x16, x9, #0x2
 298:	mov	w17, #0x1                   	// #1
 29c:	mov	w0, #0x2                   	// #2
 2a0:	sxtw	x1, w0
 2a4:	cmp	x16, x1
 2a8:	b.le	2d0 <BZ2_hbMakeCodeLengths+0x2d0>
 2ac:	orr	x18, x1, #0x1
 2b0:	ldrsw	x2, [x23, x18, lsl #2]
 2b4:	ldrsw	x1, [x23, x1, lsl #2]
 2b8:	ldr	w2, [x26, x2, lsl #2]
 2bc:	ldr	w1, [x26, x1, lsl #2]
 2c0:	cmp	w2, w1
 2c4:	csel	w18, w18, w0, lt  // lt = tstop
 2c8:	sxtw	x1, w18
 2cc:	b	2d4 <BZ2_hbMakeCodeLengths+0x2d4>
 2d0:	mov	w18, w0
 2d4:	ldrsw	x1, [x23, x1, lsl #2]
 2d8:	ldr	w0, [x26, x1, lsl #2]
 2dc:	cmp	w15, w0
 2e0:	b.lt	2fc <BZ2_hbMakeCodeLengths+0x2fc>  // b.tstop
 2e4:	lsl	w0, w18, #1
 2e8:	cmp	x16, w0, sxtw
 2ec:	str	w1, [x23, w17, sxtw #2]
 2f0:	mov	w17, w18
 2f4:	b.ge	2a0 <BZ2_hbMakeCodeLengths+0x2a0>  // b.tcont
 2f8:	b	300 <BZ2_hbMakeCodeLengths+0x300>
 2fc:	mov	w18, w17
 300:	lsl	x15, x13, #2
 304:	lsl	x16, x11, #2
 308:	ldr	w13, [x26, x16]
 30c:	ldr	w17, [x26, x15]
 310:	str	w14, [x23, w18, sxtw #2]
 314:	add	x8, x8, #0x1
 318:	and	w14, w13, #0xffffff00
 31c:	and	w18, w17, #0xffffff00
 320:	and	w13, w13, #0xff
 324:	and	w17, w17, #0xff
 328:	asr	w11, w10, #1
 32c:	str	w8, [x23, x10, lsl #2]
 330:	cmp	w13, w17
 334:	add	w18, w18, w14
 338:	ldrsw	x14, [x23, w11, sxtw #2]
 33c:	csel	w13, w13, w17, hi  // hi = pmore
 340:	add	w13, w13, #0x1
 344:	orr	w13, w13, w18
 348:	lsl	x17, x8, #2
 34c:	str	w13, [x26, x17]
 350:	ldr	w18, [x26, x14, lsl #2]
 354:	str	w8, [x27, x15]
 358:	str	w8, [x27, x16]
 35c:	str	w28, [x27, x17]
 360:	cmp	w13, w18
 364:	b.ge	1c8 <BZ2_hbMakeCodeLengths+0x1c8>  // b.tcont
 368:	str	w14, [x12]
 36c:	asr	w15, w11, #1
 370:	ldrsw	x14, [x23, w15, sxtw #2]
 374:	ldr	w12, [x26, x14, lsl #2]
 378:	cmp	w13, w12
 37c:	add	x12, x23, w11, sxtw #2
 380:	mov	w11, w15
 384:	b.lt	368 <BZ2_hbMakeCodeLengths+0x368>  // b.tstop
 388:	b	1c8 <BZ2_hbMakeCodeLengths+0x1c8>
 38c:	cmp	w8, #0x204
 390:	b.lt	39c <BZ2_hbMakeCodeLengths+0x39c>  // b.tstop
 394:	mov	w0, #0x7d2                 	// #2002
 398:	bl	0 <BZ2_bz__AssertH__fail>
 39c:	cmp	w20, #0x1
 3a0:	movi	v2.4s, #0x1, lsl #8
 3a4:	b.lt	480 <BZ2_hbMakeCodeLengths+0x480>  // b.tstop
 3a8:	mov	w8, wzr
 3ac:	mov	w9, #0x1                   	// #1
 3b0:	mov	w10, #0xffffffff            	// #-1
 3b4:	mov	w11, w9
 3b8:	ldr	w11, [x27, w11, sxtw #2]
 3bc:	add	w10, w10, #0x1
 3c0:	tbz	w11, #31, 3b8 <BZ2_hbMakeCodeLengths+0x3b8>
 3c4:	add	x11, x9, x21
 3c8:	cmp	w10, w19
 3cc:	add	x9, x9, #0x1
 3d0:	csinc	w8, w8, wzr, le
 3d4:	cmp	x9, x24
 3d8:	sturb	w10, [x11, #-1]
 3dc:	b.ne	3b0 <BZ2_hbMakeCodeLengths+0x3b0>  // b.any
 3e0:	tst	w8, #0xff
 3e4:	b.eq	480 <BZ2_hbMakeCodeLengths+0x480>  // b.none
 3e8:	cmp	w20, #0x1
 3ec:	b.lt	470 <BZ2_hbMakeCodeLengths+0x470>  // b.tstop
 3f0:	cmp	x22, #0x4
 3f4:	b.cs	400 <BZ2_hbMakeCodeLengths+0x400>  // b.hs, b.nlast
 3f8:	mov	w9, #0x1                   	// #1
 3fc:	b	43c <BZ2_hbMakeCodeLengths+0x43c>
 400:	ldr	x8, [sp, #32]
 404:	ldr	x9, [sp, #16]
 408:	ldr	q0, [x9]
 40c:	subs	x8, x8, #0x4
 410:	sshr	v1.4s, v0.4s, #8
 414:	usra	v1.4s, v0.4s, #31
 418:	shl	v0.4s, v1.4s, #7
 41c:	bic	v0.4s, #0xff
 420:	add	v0.4s, v0.4s, v2.4s
 424:	str	q0, [x9], #16
 428:	b.ne	408 <BZ2_hbMakeCodeLengths+0x408>  // b.any
 42c:	ldr	x8, [sp, #32]
 430:	ldr	x9, [sp, #8]
 434:	cmp	x22, x8
 438:	b.eq	124 <BZ2_hbMakeCodeLengths+0x124>  // b.none
 43c:	add	x8, x26, x9, lsl #2
 440:	sub	x9, x24, x9
 444:	ldr	w10, [x8]
 448:	asr	w10, w10, #8
 44c:	cmp	w10, #0x0
 450:	cinc	w10, w10, lt  // lt = tstop
 454:	lsl	w10, w10, #7
 458:	and	w10, w10, #0xffffff00
 45c:	add	w10, w10, #0x100
 460:	subs	x9, x9, #0x1
 464:	str	w10, [x8], #4
 468:	b.ne	444 <BZ2_hbMakeCodeLengths+0x444>  // b.any
 46c:	b	124 <BZ2_hbMakeCodeLengths+0x124>
 470:	mov	w8, #0xfffffffe            	// #-2
 474:	str	wzr, [sp, #4168]
 478:	str	wzr, [sp, #2104]
 47c:	str	w8, [sp, #40]
 480:	add	sp, sp, #0x1, lsl #12
 484:	add	sp, sp, #0x460
 488:	ldp	x20, x19, [sp, #80]
 48c:	ldp	x22, x21, [sp, #64]
 490:	ldp	x24, x23, [sp, #48]
 494:	ldp	x26, x25, [sp, #32]
 498:	ldp	x28, x27, [sp, #16]
 49c:	ldp	x29, x30, [sp], #96
 4a0:	ret

00000000000004a4 <BZ2_hbAssignCodes>:
 4a4:	cmp	w2, w3
 4a8:	b.le	4b0 <BZ2_hbAssignCodes+0xc>
 4ac:	ret
 4b0:	mov	w8, wzr
 4b4:	mov	w9, w4
 4b8:	b	4cc <BZ2_hbAssignCodes+0x28>
 4bc:	cmp	w2, w3
 4c0:	add	w2, w2, #0x1
 4c4:	lsl	w8, w8, #1
 4c8:	b.ge	4ac <BZ2_hbAssignCodes+0x8>  // b.tcont
 4cc:	cmp	w4, #0x1
 4d0:	b.lt	4bc <BZ2_hbAssignCodes+0x18>  // b.tstop
 4d4:	mov	x10, x9
 4d8:	mov	x11, x1
 4dc:	mov	x12, x0
 4e0:	b	4f4 <BZ2_hbAssignCodes+0x50>
 4e4:	add	x12, x12, #0x4
 4e8:	subs	x10, x10, #0x1
 4ec:	add	x11, x11, #0x1
 4f0:	b.eq	4bc <BZ2_hbAssignCodes+0x18>  // b.none
 4f4:	ldrb	w13, [x11]
 4f8:	cmp	w2, w13
 4fc:	b.ne	4e4 <BZ2_hbAssignCodes+0x40>  // b.any
 500:	str	w8, [x12]
 504:	add	w8, w8, #0x1
 508:	b	4e4 <BZ2_hbAssignCodes+0x40>

000000000000050c <BZ2_hbCreateDecodeTables>:
 50c:	str	x25, [sp, #-64]!
 510:	stp	x24, x23, [sp, #16]
 514:	stp	x22, x21, [sp, #32]
 518:	stp	x20, x19, [sp, #48]
 51c:	cmp	w4, w5
 520:	b.le	590 <BZ2_hbCreateDecodeTables+0x84>
 524:	movi	v0.2d, #0x0
 528:	cmp	w6, #0x0
 52c:	stur	q0, [x1, #76]
 530:	stp	q0, q0, [x1, #48]
 534:	stp	q0, q0, [x1, #16]
 538:	str	q0, [x1]
 53c:	b.le	5e0 <BZ2_hbCreateDecodeTables+0xd4>
 540:	mov	w8, w6
 544:	ldrb	w9, [x3], #1
 548:	subs	x8, x8, #0x1
 54c:	add	x9, x1, x9, lsl #2
 550:	ldr	w10, [x9, #4]
 554:	add	w10, w10, #0x1
 558:	str	w10, [x9, #4]
 55c:	b.ne	544 <BZ2_hbCreateDecodeTables+0x38>  // b.any
 560:	ldp	w8, w25, [x1, #4]
 564:	ldp	w18, w24, [x1, #12]
 568:	ldp	w17, w23, [x1, #20]
 56c:	ldp	w16, w22, [x1, #28]
 570:	ldp	w15, w21, [x1, #36]
 574:	ldp	w14, w20, [x1, #44]
 578:	ldp	w13, w19, [x1, #52]
 57c:	ldp	w12, w7, [x1, #60]
 580:	ldp	w11, w6, [x1, #68]
 584:	ldp	w10, w3, [x1, #76]
 588:	ldp	w9, w2, [x1, #84]
 58c:	b	638 <BZ2_hbCreateDecodeTables+0x12c>
 590:	mov	w8, wzr
 594:	mov	w9, w6
 598:	mov	w10, w4
 59c:	b	5ac <BZ2_hbCreateDecodeTables+0xa0>
 5a0:	cmp	w10, w5
 5a4:	add	w10, w10, #0x1
 5a8:	b.ge	524 <BZ2_hbCreateDecodeTables+0x18>  // b.tcont
 5ac:	cmp	w6, #0x1
 5b0:	b.lt	5a0 <BZ2_hbCreateDecodeTables+0x94>  // b.tstop
 5b4:	mov	x11, xzr
 5b8:	b	5c8 <BZ2_hbCreateDecodeTables+0xbc>
 5bc:	add	x11, x11, #0x1
 5c0:	cmp	x9, x11
 5c4:	b.eq	5a0 <BZ2_hbCreateDecodeTables+0x94>  // b.none
 5c8:	ldrb	w12, [x3, x11]
 5cc:	cmp	w10, w12
 5d0:	b.ne	5bc <BZ2_hbCreateDecodeTables+0xb0>  // b.any
 5d4:	str	w11, [x2, w8, sxtw #2]
 5d8:	add	w8, w8, #0x1
 5dc:	b	5bc <BZ2_hbCreateDecodeTables+0xb0>
 5e0:	mov	w2, wzr
 5e4:	mov	w9, wzr
 5e8:	mov	w3, wzr
 5ec:	mov	w10, wzr
 5f0:	mov	w6, wzr
 5f4:	mov	w11, wzr
 5f8:	mov	w7, wzr
 5fc:	mov	w12, wzr
 600:	mov	w19, wzr
 604:	mov	w13, wzr
 608:	mov	w20, wzr
 60c:	mov	w14, wzr
 610:	mov	w21, wzr
 614:	mov	w15, wzr
 618:	mov	w22, wzr
 61c:	mov	w16, wzr
 620:	mov	w23, wzr
 624:	mov	w17, wzr
 628:	mov	w24, wzr
 62c:	mov	w18, wzr
 630:	mov	w25, wzr
 634:	mov	w8, wzr
 638:	add	w25, w25, w8
 63c:	stp	w8, w25, [x1, #4]
 640:	add	w8, w18, w25
 644:	add	w18, w24, w8
 648:	stp	w8, w18, [x1, #12]
 64c:	add	w8, w17, w18
 650:	add	w17, w23, w8
 654:	stp	w8, w17, [x1, #20]
 658:	add	w8, w16, w17
 65c:	add	w16, w22, w8
 660:	stp	w8, w16, [x1, #28]
 664:	add	w8, w15, w16
 668:	add	w15, w21, w8
 66c:	stp	w8, w15, [x1, #36]
 670:	add	w8, w14, w15
 674:	add	w14, w20, w8
 678:	stp	w8, w14, [x1, #44]
 67c:	add	w8, w13, w14
 680:	add	w13, w19, w8
 684:	stp	w8, w13, [x1, #52]
 688:	add	w8, w12, w13
 68c:	add	w12, w7, w8
 690:	stp	w8, w12, [x1, #60]
 694:	add	w8, w11, w12
 698:	add	w11, w6, w8
 69c:	stp	w8, w11, [x1, #68]
 6a0:	add	w8, w10, w11
 6a4:	add	w10, w3, w8
 6a8:	stp	w8, w10, [x1, #76]
 6ac:	add	w8, w9, w10
 6b0:	cmp	w4, w5
 6b4:	add	w9, w2, w8
 6b8:	stp	w8, w9, [x1, #84]
 6bc:	stur	q0, [x0, #76]
 6c0:	stp	q0, q0, [x0, #48]
 6c4:	stp	q0, q0, [x0, #16]
 6c8:	str	q0, [x0]
 6cc:	b.gt	708 <BZ2_hbCreateDecodeTables+0x1fc>
 6d0:	mov	w8, wzr
 6d4:	sxtw	x10, w4
 6d8:	sxtw	x9, w5
 6dc:	lsl	x11, x10, #2
 6e0:	add	x12, x1, x11
 6e4:	ldp	w12, w13, [x12]
 6e8:	cmp	x10, x9
 6ec:	add	x10, x10, #0x1
 6f0:	sub	w12, w13, w12
 6f4:	add	w8, w12, w8
 6f8:	sub	w12, w8, #0x1
 6fc:	lsl	w8, w8, #1
 700:	str	w12, [x0, x11]
 704:	b.lt	6dc <BZ2_hbCreateDecodeTables+0x1d0>  // b.tstop
 708:	cmp	w4, w5
 70c:	b.ge	7e0 <BZ2_hbCreateDecodeTables+0x2d4>  // b.tcont
 710:	sxtw	x8, w4
 714:	sxtw	x9, w5
 718:	sub	x10, x9, x8
 71c:	cmp	x10, #0x7
 720:	b.ls	7ac <BZ2_hbCreateDecodeTables+0x2a0>  // b.plast
 724:	lsl	x13, x8, #2
 728:	lsl	x11, x9, #2
 72c:	add	x12, x13, x1
 730:	add	x14, x12, #0x4
 734:	add	x15, x0, x11
 738:	cmp	x14, x15
 73c:	b.cs	754 <BZ2_hbCreateDecodeTables+0x248>  // b.hs, b.nlast
 740:	add	x11, x11, x1
 744:	add	x11, x11, #0x4
 748:	add	x14, x0, x13
 74c:	cmp	x14, x11
 750:	b.cc	7ac <BZ2_hbCreateDecodeTables+0x2a0>  // b.lo, b.ul, b.last
 754:	and	x11, x10, #0xfffffffffffffff8
 758:	add	x13, x13, x0
 75c:	add	x12, x12, #0x14
 760:	add	x8, x11, x8
 764:	add	x13, x13, #0x10
 768:	movi	v0.4s, #0x2
 76c:	mov	x14, x11
 770:	ldp	q1, q2, [x13, #-16]
 774:	ldp	q3, q4, [x12, #-16]
 778:	subs	x14, x14, #0x8
 77c:	add	x13, x13, #0x20
 780:	shl	v1.4s, v1.4s, #1
 784:	shl	v2.4s, v2.4s, #1
 788:	sub	v1.4s, v1.4s, v3.4s
 78c:	sub	v2.4s, v2.4s, v4.4s
 790:	add	v1.4s, v1.4s, v0.4s
 794:	add	v2.4s, v2.4s, v0.4s
 798:	stp	q1, q2, [x12, #-16]
 79c:	add	x12, x12, #0x20
 7a0:	b.ne	770 <BZ2_hbCreateDecodeTables+0x264>  // b.any
 7a4:	cmp	x10, x11
 7a8:	b.eq	7e0 <BZ2_hbCreateDecodeTables+0x2d4>  // b.none
 7ac:	lsl	x10, x8, #2
 7b0:	sub	x8, x9, x8
 7b4:	add	x9, x0, x10
 7b8:	add	x10, x10, x1
 7bc:	add	x10, x10, #0x4
 7c0:	ldr	w11, [x9], #4
 7c4:	ldr	w12, [x10]
 7c8:	subs	x8, x8, #0x1
 7cc:	lsl	w11, w11, #1
 7d0:	sub	w11, w11, w12
 7d4:	add	w11, w11, #0x2
 7d8:	str	w11, [x10], #4
 7dc:	b.ne	7c0 <BZ2_hbCreateDecodeTables+0x2b4>  // b.any
 7e0:	ldp	x20, x19, [sp, #48]
 7e4:	ldp	x22, x21, [sp, #32]
 7e8:	ldp	x24, x23, [sp, #16]
 7ec:	ldr	x25, [sp], #64
 7f0:	ret

crctable.o:     file format elf64-littleaarch64


randtable.o:     file format elf64-littleaarch64


compress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_bsInitWrite>:
       0:	movi	v0.2d, #0x0
       4:	str	d0, [x0, #640]
       8:	ret

000000000000000c <BZ2_compressBlock>:
       c:	sub	sp, sp, #0x150
      10:	stp	x29, x30, [sp, #256]
      14:	stp	x28, x25, [sp, #272]
      18:	stp	x24, x23, [sp, #288]
      1c:	stp	x22, x21, [sp, #304]
      20:	stp	x20, x19, [sp, #320]
      24:	add	x29, sp, #0x100
      28:	ldr	w5, [x0, #108]
      2c:	mov	x19, x0
      30:	mov	w20, w1
      34:	cmp	w5, #0x1
      38:	b.lt	7c <BZ2_compressBlock+0x70>  // b.tstop
      3c:	ldr	w8, [x19, #648]
      40:	ldr	w9, [x19, #652]
      44:	ldr	w2, [x19, #660]
      48:	mvn	w3, w8
      4c:	eon	w4, w8, w9, ror #31
      50:	cmp	w2, #0x2
      54:	str	w3, [x19, #648]
      58:	str	w4, [x19, #652]
      5c:	b.lt	64 <BZ2_compressBlock+0x58>  // b.tstop
      60:	str	wzr, [x19, #116]
      64:	ldr	w8, [x19, #656]
      68:	cmp	w8, #0x2
      6c:	b.ge	a64 <BZ2_compressBlock+0xa58>  // b.tcont
      70:	mov	x0, x19
      74:	bl	0 <BZ2_blockSort>
      78:	ldr	w5, [x19, #108]
      7c:	ldr	x8, [x19, #32]
      80:	ldr	w9, [x19, #660]
      84:	add	x8, x8, w5, sxtw
      88:	cmp	w9, #0x1
      8c:	str	x8, [x19, #80]
      90:	b.ne	1ec <BZ2_compressBlock+0x1e0>  // b.any
      94:	adrp	x9, 0 <BZ2_bsInitWrite>
      98:	ldr	d0, [x9]
      9c:	ldrsw	x9, [x19, #116]
      a0:	mov	w10, #0x42                  	// #66
      a4:	str	d0, [x19, #640]
      a8:	strb	w10, [x8, x9]
      ac:	ldr	w8, [x19, #116]
      b0:	ldr	w10, [x19, #640]
      b4:	ldr	w9, [x19, #644]
      b8:	add	w8, w8, #0x1
      bc:	lsl	w10, w10, #8
      c0:	sub	w11, w9, #0x8
      c4:	cmp	w9, #0x10
      c8:	str	w8, [x19, #116]
      cc:	str	w10, [x19, #640]
      d0:	str	w11, [x19, #644]
      d4:	b.lt	110 <BZ2_compressBlock+0x104>  // b.tstop
      d8:	ldr	x9, [x19, #80]
      dc:	lsr	w10, w10, #24
      e0:	strb	w10, [x9, w8, sxtw]
      e4:	ldr	w8, [x19, #116]
      e8:	ldr	w10, [x19, #640]
      ec:	ldr	w9, [x19, #644]
      f0:	add	w8, w8, #0x1
      f4:	lsl	w10, w10, #8
      f8:	sub	w11, w9, #0x8
      fc:	cmp	w9, #0xf
     100:	str	w8, [x19, #116]
     104:	str	w10, [x19, #640]
     108:	str	w11, [x19, #644]
     10c:	b.gt	d8 <BZ2_compressBlock+0xcc>
     110:	neg	w11, w9
     114:	mov	w12, #0x5a                  	// #90
     118:	lsl	w11, w12, w11
     11c:	cmp	w9, #0x8
     120:	orr	w11, w11, w10
     124:	str	w11, [x19, #640]
     128:	str	w9, [x19, #644]
     12c:	b.lt	168 <BZ2_compressBlock+0x15c>  // b.tstop
     130:	ldr	x9, [x19, #80]
     134:	lsr	w10, w11, #24
     138:	strb	w10, [x9, w8, sxtw]
     13c:	ldr	w8, [x19, #116]
     140:	ldr	w9, [x19, #640]
     144:	ldr	w10, [x19, #644]
     148:	add	w8, w8, #0x1
     14c:	lsl	w11, w9, #8
     150:	sub	w9, w10, #0x8
     154:	cmp	w10, #0xf
     158:	str	w8, [x19, #116]
     15c:	str	w11, [x19, #640]
     160:	str	w9, [x19, #644]
     164:	b.gt	130 <BZ2_compressBlock+0x124>
     168:	ldr	w14, [x19, #664]
     16c:	mov	w10, #0x18                  	// #24
     170:	mov	w12, #0x68                  	// #104
     174:	sub	w15, w10, w9
     178:	lsl	w12, w12, w15
     17c:	orr	w12, w12, w11
     180:	add	w11, w14, #0x30
     184:	add	w13, w9, #0x8
     188:	and	w11, w11, #0xff
     18c:	str	w13, [x19, #644]
     190:	str	w12, [x19, #640]
     194:	tbnz	w9, #31, 1d0 <BZ2_compressBlock+0x1c4>
     198:	ldr	x9, [x19, #80]
     19c:	lsr	w12, w12, #24
     1a0:	strb	w12, [x9, w8, sxtw]
     1a4:	ldr	w8, [x19, #116]
     1a8:	ldr	w9, [x19, #640]
     1ac:	ldr	w14, [x19, #644]
     1b0:	add	w8, w8, #0x1
     1b4:	lsl	w12, w9, #8
     1b8:	sub	w13, w14, #0x8
     1bc:	cmp	w14, #0xf
     1c0:	str	w8, [x19, #116]
     1c4:	str	w12, [x19, #640]
     1c8:	str	w13, [x19, #644]
     1cc:	b.gt	198 <BZ2_compressBlock+0x18c>
     1d0:	ldr	w5, [x19, #108]
     1d4:	sub	w8, w10, w13
     1d8:	lsl	w8, w11, w8
     1dc:	add	w9, w13, #0x8
     1e0:	orr	w8, w8, w12
     1e4:	str	w8, [x19, #640]
     1e8:	str	w9, [x19, #644]
     1ec:	cmp	w5, #0x1
     1f0:	b.lt	798 <BZ2_compressBlock+0x78c>  // b.tstop
     1f4:	ldr	w10, [x19, #644]
     1f8:	cmp	w10, #0x7
     1fc:	b.le	244 <BZ2_compressBlock+0x238>
     200:	ldr	w9, [x19, #640]
     204:	ldr	w8, [x19, #116]
     208:	ldr	x10, [x19, #80]
     20c:	lsr	w9, w9, #24
     210:	strb	w9, [x10, w8, sxtw]
     214:	ldr	w8, [x19, #116]
     218:	ldr	w9, [x19, #640]
     21c:	ldr	w11, [x19, #644]
     220:	add	w8, w8, #0x1
     224:	lsl	w9, w9, #8
     228:	sub	w10, w11, #0x8
     22c:	cmp	w11, #0xf
     230:	str	w8, [x19, #116]
     234:	str	w9, [x19, #640]
     238:	str	w10, [x19, #644]
     23c:	b.gt	208 <BZ2_compressBlock+0x1fc>
     240:	b	248 <BZ2_compressBlock+0x23c>
     244:	ldr	w9, [x19, #640]
     248:	mov	w8, #0x18                  	// #24
     24c:	mov	w12, #0x31                  	// #49
     250:	sub	w13, w8, w10
     254:	lsl	w12, w12, w13
     258:	add	w11, w10, #0x8
     25c:	orr	w9, w12, w9
     260:	str	w9, [x19, #640]
     264:	str	w11, [x19, #644]
     268:	tbnz	w10, #31, 2a8 <BZ2_compressBlock+0x29c>
     26c:	ldr	w10, [x19, #116]
     270:	ldr	x11, [x19, #80]
     274:	lsr	w9, w9, #24
     278:	strb	w9, [x11, w10, sxtw]
     27c:	ldr	w9, [x19, #116]
     280:	ldr	w11, [x19, #640]
     284:	ldr	w12, [x19, #644]
     288:	add	w10, w9, #0x1
     28c:	lsl	w9, w11, #8
     290:	sub	w11, w12, #0x8
     294:	cmp	w12, #0xf
     298:	str	w10, [x19, #116]
     29c:	str	w9, [x19, #640]
     2a0:	str	w11, [x19, #644]
     2a4:	b.gt	270 <BZ2_compressBlock+0x264>
     2a8:	sub	w8, w8, w11
     2ac:	mov	w12, #0x41                  	// #65
     2b0:	lsl	w8, w12, w8
     2b4:	add	w10, w11, #0x8
     2b8:	orr	w9, w8, w9
     2bc:	str	w9, [x19, #640]
     2c0:	str	w10, [x19, #644]
     2c4:	tbnz	w11, #31, 304 <BZ2_compressBlock+0x2f8>
     2c8:	ldr	w8, [x19, #116]
     2cc:	ldr	x10, [x19, #80]
     2d0:	lsr	w9, w9, #24
     2d4:	strb	w9, [x10, w8, sxtw]
     2d8:	ldr	w8, [x19, #116]
     2dc:	ldr	w9, [x19, #640]
     2e0:	ldr	w11, [x19, #644]
     2e4:	add	w8, w8, #0x1
     2e8:	lsl	w9, w9, #8
     2ec:	sub	w10, w11, #0x8
     2f0:	cmp	w11, #0xf
     2f4:	str	w8, [x19, #116]
     2f8:	str	w9, [x19, #640]
     2fc:	str	w10, [x19, #644]
     300:	b.gt	2cc <BZ2_compressBlock+0x2c0>
     304:	mov	w8, #0x18                  	// #24
     308:	mov	w12, #0x59                  	// #89
     30c:	sub	w13, w8, w10
     310:	lsl	w12, w12, w13
     314:	add	w11, w10, #0x8
     318:	orr	w9, w12, w9
     31c:	str	w9, [x19, #640]
     320:	str	w11, [x19, #644]
     324:	tbnz	w10, #31, 364 <BZ2_compressBlock+0x358>
     328:	ldr	w10, [x19, #116]
     32c:	ldr	x11, [x19, #80]
     330:	lsr	w9, w9, #24
     334:	strb	w9, [x11, w10, sxtw]
     338:	ldr	w9, [x19, #116]
     33c:	ldr	w11, [x19, #640]
     340:	ldr	w12, [x19, #644]
     344:	add	w10, w9, #0x1
     348:	lsl	w9, w11, #8
     34c:	sub	w11, w12, #0x8
     350:	cmp	w12, #0xf
     354:	str	w10, [x19, #116]
     358:	str	w9, [x19, #640]
     35c:	str	w11, [x19, #644]
     360:	b.gt	32c <BZ2_compressBlock+0x320>
     364:	sub	w8, w8, w11
     368:	mov	w12, #0x26                  	// #38
     36c:	lsl	w8, w12, w8
     370:	add	w10, w11, #0x8
     374:	orr	w9, w8, w9
     378:	str	w9, [x19, #640]
     37c:	str	w10, [x19, #644]
     380:	tbnz	w11, #31, 3c0 <BZ2_compressBlock+0x3b4>
     384:	ldr	w8, [x19, #116]
     388:	ldr	x10, [x19, #80]
     38c:	lsr	w9, w9, #24
     390:	strb	w9, [x10, w8, sxtw]
     394:	ldr	w8, [x19, #116]
     398:	ldr	w9, [x19, #640]
     39c:	ldr	w11, [x19, #644]
     3a0:	add	w8, w8, #0x1
     3a4:	lsl	w9, w9, #8
     3a8:	sub	w10, w11, #0x8
     3ac:	cmp	w11, #0xf
     3b0:	str	w8, [x19, #116]
     3b4:	str	w9, [x19, #640]
     3b8:	str	w10, [x19, #644]
     3bc:	b.gt	388 <BZ2_compressBlock+0x37c>
     3c0:	mov	w8, #0x18                  	// #24
     3c4:	mov	w12, #0x53                  	// #83
     3c8:	sub	w13, w8, w10
     3cc:	lsl	w12, w12, w13
     3d0:	add	w11, w10, #0x8
     3d4:	orr	w9, w12, w9
     3d8:	str	w9, [x19, #640]
     3dc:	str	w11, [x19, #644]
     3e0:	tbnz	w10, #31, 420 <BZ2_compressBlock+0x414>
     3e4:	ldr	w10, [x19, #116]
     3e8:	ldr	x11, [x19, #80]
     3ec:	lsr	w9, w9, #24
     3f0:	strb	w9, [x11, w10, sxtw]
     3f4:	ldr	w9, [x19, #116]
     3f8:	ldr	w11, [x19, #640]
     3fc:	ldr	w12, [x19, #644]
     400:	add	w10, w9, #0x1
     404:	lsl	w9, w11, #8
     408:	sub	w11, w12, #0x8
     40c:	cmp	w12, #0xf
     410:	str	w10, [x19, #116]
     414:	str	w9, [x19, #640]
     418:	str	w11, [x19, #644]
     41c:	b.gt	3e8 <BZ2_compressBlock+0x3dc>
     420:	ldr	w1, [x19, #648]
     424:	sub	w8, w8, w11
     428:	mov	w10, #0x59                  	// #89
     42c:	lsl	w8, w10, w8
     430:	add	w11, w11, #0x8
     434:	orr	w8, w8, w9
     438:	mov	x0, x19
     43c:	str	w8, [x19, #640]
     440:	str	w11, [x19, #644]
     444:	bl	a98 <bsPutUInt32>
     448:	ldr	w10, [x19, #644]
     44c:	cmp	w10, #0x7
     450:	b.le	498 <BZ2_compressBlock+0x48c>
     454:	ldr	w8, [x19, #640]
     458:	ldr	w9, [x19, #116]
     45c:	ldr	x10, [x19, #80]
     460:	lsr	w8, w8, #24
     464:	strb	w8, [x10, w9, sxtw]
     468:	ldr	w8, [x19, #116]
     46c:	ldr	w10, [x19, #640]
     470:	ldr	w11, [x19, #644]
     474:	add	w9, w8, #0x1
     478:	lsl	w8, w10, #8
     47c:	sub	w10, w11, #0x8
     480:	cmp	w11, #0xf
     484:	str	w9, [x19, #116]
     488:	str	w8, [x19, #640]
     48c:	str	w10, [x19, #644]
     490:	b.gt	45c <BZ2_compressBlock+0x450>
     494:	b	49c <BZ2_compressBlock+0x490>
     498:	ldr	w8, [x19, #640]
     49c:	ldr	w9, [x19, #48]
     4a0:	add	w11, w10, #0x1
     4a4:	cmp	w10, #0x7
     4a8:	str	w8, [x19, #640]
     4ac:	str	w11, [x19, #644]
     4b0:	b.lt	4f0 <BZ2_compressBlock+0x4e4>  // b.tstop
     4b4:	ldr	w10, [x19, #116]
     4b8:	ldr	x11, [x19, #80]
     4bc:	lsr	w8, w8, #24
     4c0:	strb	w8, [x11, w10, sxtw]
     4c4:	ldr	w8, [x19, #116]
     4c8:	ldr	w11, [x19, #640]
     4cc:	ldr	w12, [x19, #644]
     4d0:	add	w10, w8, #0x1
     4d4:	lsl	w8, w11, #8
     4d8:	sub	w11, w12, #0x8
     4dc:	cmp	w12, #0xf
     4e0:	str	w10, [x19, #116]
     4e4:	str	w8, [x19, #640]
     4e8:	str	w11, [x19, #644]
     4ec:	b.gt	4b8 <BZ2_compressBlock+0x4ac>
     4f0:	mov	w12, #0x8                   	// #8
     4f4:	ldp	x23, x24, [x19, #56]
     4f8:	ldr	x21, [x19, #72]
     4fc:	add	w13, w11, #0x18
     500:	sub	w11, w12, w11
     504:	lsl	w9, w9, w11
     508:	mov	w25, wzr
     50c:	mov	x10, xzr
     510:	orr	w8, w9, w8
     514:	str	w13, [x19, #644]
     518:	str	w8, [x19, #640]
     51c:	str	wzr, [x19, #124]
     520:	b	530 <BZ2_compressBlock+0x524>
     524:	add	x10, x10, #0x1
     528:	cmp	x10, #0x100
     52c:	b.eq	54c <BZ2_compressBlock+0x540>  // b.none
     530:	add	x8, x19, x10
     534:	ldrb	w9, [x8, #128]
     538:	cbz	w9, 524 <BZ2_compressBlock+0x518>
     53c:	strb	w25, [x8, #384]
     540:	add	w25, w25, #0x1
     544:	str	w25, [x19, #124]
     548:	b	524 <BZ2_compressBlock+0x518>
     54c:	cmn	w25, #0x1
     550:	add	w22, w25, #0x1
     554:	b.lt	5d0 <BZ2_compressBlock+0x5c4>  // b.tstop
     558:	mov	w8, w22
     55c:	lsl	x8, x8, #2
     560:	add	x0, x19, #0x2a0
     564:	add	x2, x8, #0x4
     568:	mov	w1, wzr
     56c:	bl	0 <memset>
     570:	cmp	w25, #0x1
     574:	b.lt	5d0 <BZ2_compressBlock+0x5c4>  // b.tstop
     578:	cmp	w25, #0xf
     57c:	mov	w8, w25
     580:	b.hi	58c <BZ2_compressBlock+0x580>  // b.pmore
     584:	mov	x9, xzr
     588:	b	5bc <BZ2_compressBlock+0x5b0>
     58c:	adrp	x9, 0 <BZ2_bsInitWrite>
     590:	ldr	q0, [x9]
     594:	and	x9, x8, #0xfffffff0
     598:	mov	x10, sp
     59c:	movi	v1.16b, #0x10
     5a0:	mov	x11, x9
     5a4:	str	q0, [x10], #16
     5a8:	subs	x11, x11, #0x10
     5ac:	add	v0.16b, v0.16b, v1.16b
     5b0:	b.ne	5a4 <BZ2_compressBlock+0x598>  // b.any
     5b4:	cmp	x9, x8
     5b8:	b.eq	5d0 <BZ2_compressBlock+0x5c4>  // b.none
     5bc:	mov	x10, sp
     5c0:	strb	w9, [x10, x9]
     5c4:	add	x9, x9, #0x1
     5c8:	cmp	x8, x9
     5cc:	b.ne	5c0 <BZ2_compressBlock+0x5b4>  // b.any
     5d0:	ldr	w15, [x19, #108]
     5d4:	cmp	w15, #0x1
     5d8:	b.lt	770 <BZ2_compressBlock+0x764>  // b.tstop
     5dc:	mov	x10, sp
     5e0:	mov	x9, xzr
     5e4:	mov	w13, wzr
     5e8:	mov	w8, wzr
     5ec:	orr	x11, x10, #0x1
     5f0:	mov	w12, #0x1                   	// #1
     5f4:	b	630 <BZ2_compressBlock+0x624>
     5f8:	strb	w14, [sp]
     5fc:	sub	w14, w15, w10
     600:	sxtw	x14, w14
     604:	add	x14, x14, #0x1
     608:	strh	w14, [x21, w8, sxtw #1]
     60c:	add	x14, x19, x14, lsl #2
     610:	ldr	w15, [x14, #672]
     614:	add	w8, w8, #0x1
     618:	add	w15, w15, #0x1
     61c:	str	w15, [x14, #672]
     620:	ldr	w15, [x19, #108]
     624:	add	x9, x9, #0x1
     628:	cmp	x9, w15, sxtw
     62c:	b.ge	704 <BZ2_compressBlock+0x6f8>  // b.tcont
     630:	ldr	w14, [x23, x9, lsl #2]
     634:	sub	w14, w14, #0x1
     638:	and	w16, w15, w14, asr #31
     63c:	add	w14, w16, w14
     640:	ldrb	w14, [x24, w14, sxtw]
     644:	ldrb	w16, [sp]
     648:	add	x14, x19, x14
     64c:	ldrb	w14, [x14, #384]
     650:	cmp	w16, w14
     654:	b.ne	660 <BZ2_compressBlock+0x654>  // b.any
     658:	add	w13, w13, #0x1
     65c:	b	624 <BZ2_compressBlock+0x618>
     660:	subs	w15, w13, #0x1
     664:	b.lt	6d4 <BZ2_compressBlock+0x6c8>  // b.tstop
     668:	add	w16, w8, #0x1
     66c:	add	x13, x21, w8, sxtw #1
     670:	mov	w8, w16
     674:	tbnz	w15, #0, 694 <BZ2_compressBlock+0x688>
     678:	strh	wzr, [x13]
     67c:	ldr	w16, [x19, #672]
     680:	add	w16, w16, #0x1
     684:	str	w16, [x19, #672]
     688:	subs	w16, w15, #0x2
     68c:	b.ge	6ac <BZ2_compressBlock+0x6a0>  // b.tcont
     690:	b	6cc <BZ2_compressBlock+0x6c0>
     694:	strh	w12, [x13]
     698:	ldr	w16, [x19, #676]
     69c:	add	w16, w16, #0x1
     6a0:	str	w16, [x19, #676]
     6a4:	subs	w16, w15, #0x2
     6a8:	b.lt	6cc <BZ2_compressBlock+0x6c0>  // b.tstop
     6ac:	sub	w15, w15, #0x1
     6b0:	cmp	w16, #0x0
     6b4:	csel	w15, w15, w16, lt  // lt = tstop
     6b8:	add	w8, w8, #0x1
     6bc:	asr	w15, w15, #1
     6c0:	add	x13, x13, #0x2
     6c4:	tbnz	w15, #0, 694 <BZ2_compressBlock+0x688>
     6c8:	b	678 <BZ2_compressBlock+0x66c>
     6cc:	ldrb	w16, [sp]
     6d0:	mov	w13, wzr
     6d4:	ldrb	w17, [sp, #1]
     6d8:	mov	x15, x11
     6dc:	strb	w16, [sp, #1]
     6e0:	cmp	w14, w17
     6e4:	b.eq	5f8 <BZ2_compressBlock+0x5ec>  // b.none
     6e8:	mov	x15, x11
     6ec:	ldrb	w16, [x15, #1]!
     6f0:	cmp	w14, w16
     6f4:	strb	w17, [x15]
     6f8:	mov	w17, w16
     6fc:	b.ne	6ec <BZ2_compressBlock+0x6e0>  // b.any
     700:	b	5f8 <BZ2_compressBlock+0x5ec>
     704:	subs	w9, w13, #0x1
     708:	b.lt	774 <BZ2_compressBlock+0x768>  // b.tstop
     70c:	add	x10, x21, w8, sxtw #1
     710:	add	w8, w8, #0x1
     714:	mov	w11, #0x1                   	// #1
     718:	tbnz	w9, #0, 738 <BZ2_compressBlock+0x72c>
     71c:	strh	wzr, [x10]
     720:	ldr	w12, [x19, #672]
     724:	add	w12, w12, #0x1
     728:	str	w12, [x19, #672]
     72c:	subs	w12, w9, #0x2
     730:	b.ge	750 <BZ2_compressBlock+0x744>  // b.tcont
     734:	b	774 <BZ2_compressBlock+0x768>
     738:	strh	w11, [x10]
     73c:	ldr	w12, [x19, #676]
     740:	add	w12, w12, #0x1
     744:	str	w12, [x19, #676]
     748:	subs	w12, w9, #0x2
     74c:	b.lt	774 <BZ2_compressBlock+0x768>  // b.tstop
     750:	sub	w9, w9, #0x1
     754:	cmp	w12, #0x0
     758:	csel	w9, w9, w12, lt  // lt = tstop
     75c:	add	w8, w8, #0x1
     760:	asr	w9, w9, #1
     764:	add	x10, x10, #0x2
     768:	tbnz	w9, #0, 738 <BZ2_compressBlock+0x72c>
     76c:	b	71c <BZ2_compressBlock+0x710>
     770:	mov	w8, wzr
     774:	strh	w22, [x21, w8, sxtw #1]
     778:	add	x9, x19, w22, sxtw #2
     77c:	ldr	w10, [x9, #672]
     780:	add	w8, w8, #0x1
     784:	mov	x0, x19
     788:	add	w10, w10, #0x1
     78c:	str	w10, [x9, #672]
     790:	str	w8, [x19, #668]
     794:	bl	c28 <sendMTFValues>
     798:	tst	w20, #0xff
     79c:	b.eq	a48 <BZ2_compressBlock+0xa3c>  // b.none
     7a0:	ldr	w10, [x19, #644]
     7a4:	cmp	w10, #0x7
     7a8:	b.le	7f0 <BZ2_compressBlock+0x7e4>
     7ac:	ldr	w9, [x19, #640]
     7b0:	ldr	w8, [x19, #116]
     7b4:	ldr	x10, [x19, #80]
     7b8:	lsr	w9, w9, #24
     7bc:	strb	w9, [x10, w8, sxtw]
     7c0:	ldr	w8, [x19, #116]
     7c4:	ldr	w9, [x19, #640]
     7c8:	ldr	w11, [x19, #644]
     7cc:	add	w8, w8, #0x1
     7d0:	lsl	w9, w9, #8
     7d4:	sub	w10, w11, #0x8
     7d8:	cmp	w11, #0xf
     7dc:	str	w8, [x19, #116]
     7e0:	str	w9, [x19, #640]
     7e4:	str	w10, [x19, #644]
     7e8:	b.gt	7b4 <BZ2_compressBlock+0x7a8>
     7ec:	b	7f4 <BZ2_compressBlock+0x7e8>
     7f0:	ldr	w9, [x19, #640]
     7f4:	mov	w8, #0x18                  	// #24
     7f8:	mov	w12, #0x17                  	// #23
     7fc:	sub	w13, w8, w10
     800:	lsl	w12, w12, w13
     804:	add	w11, w10, #0x8
     808:	orr	w9, w12, w9
     80c:	str	w9, [x19, #640]
     810:	str	w11, [x19, #644]
     814:	tbnz	w10, #31, 854 <BZ2_compressBlock+0x848>
     818:	ldr	w10, [x19, #116]
     81c:	ldr	x11, [x19, #80]
     820:	lsr	w9, w9, #24
     824:	strb	w9, [x11, w10, sxtw]
     828:	ldr	w9, [x19, #116]
     82c:	ldr	w11, [x19, #640]
     830:	ldr	w12, [x19, #644]
     834:	add	w10, w9, #0x1
     838:	lsl	w9, w11, #8
     83c:	sub	w11, w12, #0x8
     840:	cmp	w12, #0xf
     844:	str	w10, [x19, #116]
     848:	str	w9, [x19, #640]
     84c:	str	w11, [x19, #644]
     850:	b.gt	81c <BZ2_compressBlock+0x810>
     854:	sub	w8, w8, w11
     858:	mov	w12, #0x72                  	// #114
     85c:	lsl	w8, w12, w8
     860:	add	w10, w11, #0x8
     864:	orr	w9, w8, w9
     868:	str	w9, [x19, #640]
     86c:	str	w10, [x19, #644]
     870:	tbnz	w11, #31, 8b0 <BZ2_compressBlock+0x8a4>
     874:	ldr	w8, [x19, #116]
     878:	ldr	x10, [x19, #80]
     87c:	lsr	w9, w9, #24
     880:	strb	w9, [x10, w8, sxtw]
     884:	ldr	w8, [x19, #116]
     888:	ldr	w9, [x19, #640]
     88c:	ldr	w11, [x19, #644]
     890:	add	w8, w8, #0x1
     894:	lsl	w9, w9, #8
     898:	sub	w10, w11, #0x8
     89c:	cmp	w11, #0xf
     8a0:	str	w8, [x19, #116]
     8a4:	str	w9, [x19, #640]
     8a8:	str	w10, [x19, #644]
     8ac:	b.gt	878 <BZ2_compressBlock+0x86c>
     8b0:	mov	w8, #0x18                  	// #24
     8b4:	mov	w12, #0x45                  	// #69
     8b8:	sub	w13, w8, w10
     8bc:	lsl	w12, w12, w13
     8c0:	add	w11, w10, #0x8
     8c4:	orr	w9, w12, w9
     8c8:	str	w9, [x19, #640]
     8cc:	str	w11, [x19, #644]
     8d0:	tbnz	w10, #31, 910 <BZ2_compressBlock+0x904>
     8d4:	ldr	w10, [x19, #116]
     8d8:	ldr	x11, [x19, #80]
     8dc:	lsr	w9, w9, #24
     8e0:	strb	w9, [x11, w10, sxtw]
     8e4:	ldr	w9, [x19, #116]
     8e8:	ldr	w11, [x19, #640]
     8ec:	ldr	w12, [x19, #644]
     8f0:	add	w10, w9, #0x1
     8f4:	lsl	w9, w11, #8
     8f8:	sub	w11, w12, #0x8
     8fc:	cmp	w12, #0xf
     900:	str	w10, [x19, #116]
     904:	str	w9, [x19, #640]
     908:	str	w11, [x19, #644]
     90c:	b.gt	8d8 <BZ2_compressBlock+0x8cc>
     910:	sub	w8, w8, w11
     914:	mov	w12, #0x38                  	// #56
     918:	lsl	w8, w12, w8
     91c:	add	w10, w11, #0x8
     920:	orr	w9, w8, w9
     924:	str	w9, [x19, #640]
     928:	str	w10, [x19, #644]
     92c:	tbnz	w11, #31, 96c <BZ2_compressBlock+0x960>
     930:	ldr	w8, [x19, #116]
     934:	ldr	x10, [x19, #80]
     938:	lsr	w9, w9, #24
     93c:	strb	w9, [x10, w8, sxtw]
     940:	ldr	w8, [x19, #116]
     944:	ldr	w9, [x19, #640]
     948:	ldr	w11, [x19, #644]
     94c:	add	w8, w8, #0x1
     950:	lsl	w9, w9, #8
     954:	sub	w10, w11, #0x8
     958:	cmp	w11, #0xf
     95c:	str	w8, [x19, #116]
     960:	str	w9, [x19, #640]
     964:	str	w10, [x19, #644]
     968:	b.gt	934 <BZ2_compressBlock+0x928>
     96c:	mov	w8, #0x18                  	// #24
     970:	mov	w12, #0x50                  	// #80
     974:	sub	w13, w8, w10
     978:	lsl	w12, w12, w13
     97c:	add	w11, w10, #0x8
     980:	orr	w9, w12, w9
     984:	str	w9, [x19, #640]
     988:	str	w11, [x19, #644]
     98c:	tbnz	w10, #31, 9cc <BZ2_compressBlock+0x9c0>
     990:	ldr	w10, [x19, #116]
     994:	ldr	x11, [x19, #80]
     998:	lsr	w9, w9, #24
     99c:	strb	w9, [x11, w10, sxtw]
     9a0:	ldr	w9, [x19, #116]
     9a4:	ldr	w11, [x19, #640]
     9a8:	ldr	w12, [x19, #644]
     9ac:	add	w10, w9, #0x1
     9b0:	lsl	w9, w11, #8
     9b4:	sub	w11, w12, #0x8
     9b8:	cmp	w12, #0xf
     9bc:	str	w10, [x19, #116]
     9c0:	str	w9, [x19, #640]
     9c4:	str	w11, [x19, #644]
     9c8:	b.gt	994 <BZ2_compressBlock+0x988>
     9cc:	ldr	w1, [x19, #652]
     9d0:	sub	w8, w8, w11
     9d4:	mov	w10, #0x90                  	// #144
     9d8:	lsl	w8, w10, w8
     9dc:	add	w11, w11, #0x8
     9e0:	orr	w8, w8, w9
     9e4:	mov	x0, x19
     9e8:	str	w8, [x19, #640]
     9ec:	str	w11, [x19, #644]
     9f0:	bl	a98 <bsPutUInt32>
     9f4:	ldr	w8, [x19, #656]
     9f8:	cmp	w8, #0x1
     9fc:	b.gt	a7c <BZ2_compressBlock+0xa70>
     a00:	ldr	w8, [x19, #644]
     a04:	cmp	w8, #0x1
     a08:	b.lt	a48 <BZ2_compressBlock+0xa3c>  // b.tstop
     a0c:	ldr	w8, [x19, #640]
     a10:	ldr	w9, [x19, #116]
     a14:	ldr	x10, [x19, #80]
     a18:	lsr	w8, w8, #24
     a1c:	strb	w8, [x10, w9, sxtw]
     a20:	ldr	w8, [x19, #116]
     a24:	ldr	w10, [x19, #640]
     a28:	ldr	w11, [x19, #644]
     a2c:	add	w9, w8, #0x1
     a30:	lsl	w8, w10, #8
     a34:	subs	w10, w11, #0x8
     a38:	str	w9, [x19, #116]
     a3c:	str	w8, [x19, #640]
     a40:	str	w10, [x19, #644]
     a44:	b.gt	a14 <BZ2_compressBlock+0xa08>
     a48:	ldp	x20, x19, [sp, #320]
     a4c:	ldp	x22, x21, [sp, #304]
     a50:	ldp	x24, x23, [sp, #288]
     a54:	ldp	x28, x25, [sp, #272]
     a58:	ldp	x29, x30, [sp, #256]
     a5c:	add	sp, sp, #0x150
     a60:	ret
     a64:	adrp	x8, 0 <stderr>
     a68:	ldr	x0, [x8]
     a6c:	adrp	x1, 0 <BZ2_bsInitWrite>
     a70:	add	x1, x1, #0x0
     a74:	bl	0 <fprintf>
     a78:	b	70 <BZ2_compressBlock+0x64>
     a7c:	adrp	x8, 0 <stderr>
     a80:	ldr	x0, [x8]
     a84:	ldr	w2, [x19, #652]
     a88:	adrp	x1, 0 <BZ2_bsInitWrite>
     a8c:	add	x1, x1, #0x0
     a90:	bl	0 <fprintf>
     a94:	b	a00 <BZ2_compressBlock+0x9f4>

0000000000000a98 <bsPutUInt32>:
     a98:	ldr	w11, [x0, #644]
     a9c:	lsr	w8, w1, #24
     aa0:	cmp	w11, #0x7
     aa4:	b.le	aec <bsPutUInt32+0x54>
     aa8:	ldr	w10, [x0, #640]
     aac:	ldr	w9, [x0, #116]
     ab0:	ldr	x11, [x0, #80]
     ab4:	lsr	w10, w10, #24
     ab8:	strb	w10, [x11, w9, sxtw]
     abc:	ldr	w9, [x0, #116]
     ac0:	ldr	w10, [x0, #640]
     ac4:	ldr	w12, [x0, #644]
     ac8:	add	w9, w9, #0x1
     acc:	lsl	w10, w10, #8
     ad0:	sub	w11, w12, #0x8
     ad4:	cmp	w12, #0xf
     ad8:	str	w9, [x0, #116]
     adc:	str	w10, [x0, #640]
     ae0:	str	w11, [x0, #644]
     ae4:	b.gt	ab0 <bsPutUInt32+0x18>
     ae8:	b	af0 <bsPutUInt32+0x58>
     aec:	ldr	w10, [x0, #640]
     af0:	mov	w9, #0x18                  	// #24
     af4:	sub	w13, w9, w11
     af8:	lsl	w8, w8, w13
     afc:	add	w12, w11, #0x8
     b00:	orr	w10, w8, w10
     b04:	ubfx	w8, w1, #16, #8
     b08:	str	w12, [x0, #644]
     b0c:	str	w10, [x0, #640]
     b10:	tbnz	w11, #31, b50 <bsPutUInt32+0xb8>
     b14:	ldr	w11, [x0, #116]
     b18:	ldr	x12, [x0, #80]
     b1c:	lsr	w10, w10, #24
     b20:	strb	w10, [x12, w11, sxtw]
     b24:	ldr	w10, [x0, #116]
     b28:	ldr	w12, [x0, #640]
     b2c:	ldr	w13, [x0, #644]
     b30:	add	w11, w10, #0x1
     b34:	lsl	w10, w12, #8
     b38:	sub	w12, w13, #0x8
     b3c:	cmp	w13, #0xf
     b40:	str	w11, [x0, #116]
     b44:	str	w10, [x0, #640]
     b48:	str	w12, [x0, #644]
     b4c:	b.gt	b18 <bsPutUInt32+0x80>
     b50:	sub	w9, w9, w12
     b54:	lsl	w8, w8, w9
     b58:	add	w11, w12, #0x8
     b5c:	orr	w10, w8, w10
     b60:	ubfx	w9, w1, #8, #8
     b64:	str	w11, [x0, #644]
     b68:	str	w10, [x0, #640]
     b6c:	tbnz	w12, #31, bac <bsPutUInt32+0x114>
     b70:	ldr	w8, [x0, #116]
     b74:	ldr	x11, [x0, #80]
     b78:	lsr	w10, w10, #24
     b7c:	strb	w10, [x11, w8, sxtw]
     b80:	ldr	w8, [x0, #116]
     b84:	ldr	w10, [x0, #640]
     b88:	ldr	w12, [x0, #644]
     b8c:	add	w8, w8, #0x1
     b90:	lsl	w10, w10, #8
     b94:	sub	w11, w12, #0x8
     b98:	cmp	w12, #0xf
     b9c:	str	w8, [x0, #116]
     ba0:	str	w10, [x0, #640]
     ba4:	str	w11, [x0, #644]
     ba8:	b.gt	b74 <bsPutUInt32+0xdc>
     bac:	mov	w8, #0x18                  	// #24
     bb0:	sub	w13, w8, w11
     bb4:	lsl	w9, w9, w13
     bb8:	add	w12, w11, #0x8
     bbc:	orr	w10, w9, w10
     bc0:	and	w9, w1, #0xff
     bc4:	str	w12, [x0, #644]
     bc8:	str	w10, [x0, #640]
     bcc:	tbnz	w11, #31, c0c <bsPutUInt32+0x174>
     bd0:	ldr	w11, [x0, #116]
     bd4:	ldr	x12, [x0, #80]
     bd8:	lsr	w10, w10, #24
     bdc:	strb	w10, [x12, w11, sxtw]
     be0:	ldr	w10, [x0, #116]
     be4:	ldr	w12, [x0, #640]
     be8:	ldr	w13, [x0, #644]
     bec:	add	w11, w10, #0x1
     bf0:	lsl	w10, w12, #8
     bf4:	sub	w12, w13, #0x8
     bf8:	cmp	w13, #0xf
     bfc:	str	w11, [x0, #116]
     c00:	str	w10, [x0, #640]
     c04:	str	w12, [x0, #644]
     c08:	b.gt	bd4 <bsPutUInt32+0x13c>
     c0c:	sub	w8, w8, w12
     c10:	lsl	w8, w9, w8
     c14:	add	w11, w12, #0x8
     c18:	orr	w8, w8, w10
     c1c:	str	w8, [x0, #640]
     c20:	str	w11, [x0, #644]
     c24:	ret

0000000000000c28 <sendMTFValues>:
     c28:	sub	sp, sp, #0x140
     c2c:	str	d8, [sp, #208]
     c30:	stp	x29, x30, [sp, #224]
     c34:	stp	x28, x27, [sp, #240]
     c38:	stp	x26, x25, [sp, #256]
     c3c:	stp	x24, x23, [sp, #272]
     c40:	stp	x22, x21, [sp, #288]
     c44:	stp	x20, x19, [sp, #304]
     c48:	add	x29, sp, #0xd0
     c4c:	ldr	w8, [x0, #656]
     c50:	ldr	x9, [x0, #72]
     c54:	mov	x28, x0
     c58:	cmp	w8, #0x3
     c5c:	adrp	x8, 0 <stderr>
     c60:	stur	x9, [x29, #-96]
     c64:	b.ge	3ec4 <sendMTFValues+0x329c>  // b.tcont
     c68:	ldrsw	x13, [x28, #124]
     c6c:	add	w19, w13, #0x2
     c70:	cmp	w19, #0x1
     c74:	csinc	w20, w19, wzr, gt
     c78:	cmn	w13, #0x2
     c7c:	str	x13, [sp, #80]
     c80:	b.le	d00 <sendMTFValues+0xd8>
     c84:	mov	w8, #0x934c                	// #37708
     c88:	add	x0, x28, x8
     c8c:	mov	w1, #0xf                   	// #15
     c90:	mov	x2, x20
     c94:	bl	0 <memset>
     c98:	mov	w8, #0x944e                	// #37966
     c9c:	add	x0, x28, x8
     ca0:	mov	w1, #0xf                   	// #15
     ca4:	mov	x2, x20
     ca8:	bl	0 <memset>
     cac:	mov	w8, #0x9550                	// #38224
     cb0:	add	x0, x28, x8
     cb4:	mov	w1, #0xf                   	// #15
     cb8:	mov	x2, x20
     cbc:	bl	0 <memset>
     cc0:	mov	w8, #0x9652                	// #38482
     cc4:	add	x0, x28, x8
     cc8:	mov	w1, #0xf                   	// #15
     ccc:	mov	x2, x20
     cd0:	bl	0 <memset>
     cd4:	mov	w8, #0x9754                	// #38740
     cd8:	add	x0, x28, x8
     cdc:	mov	w1, #0xf                   	// #15
     ce0:	mov	x2, x20
     ce4:	bl	0 <memset>
     ce8:	mov	w8, #0x9856                	// #38998
     cec:	add	x0, x28, x8
     cf0:	mov	w1, #0xf                   	// #15
     cf4:	mov	x2, x20
     cf8:	bl	0 <memset>
     cfc:	ldr	x13, [sp, #80]
     d00:	ldr	w14, [x28, #668]
     d04:	cmp	w14, #0x0
     d08:	b.gt	d1c <sendMTFValues+0xf4>
     d0c:	mov	w0, #0xbb9                 	// #3001
     d10:	bl	0 <BZ2_bz__AssertH__fail>
     d14:	ldr	x13, [sp, #80]
     d18:	ldr	w14, [x28, #668]
     d1c:	cmp	w14, #0xc8
     d20:	str	x20, [sp, #16]
     d24:	b.ge	d30 <sendMTFValues+0x108>  // b.tcont
     d28:	mov	w8, #0x2                   	// #2
     d2c:	b	d5c <sendMTFValues+0x134>
     d30:	cmp	w14, #0x258
     d34:	b.ge	d40 <sendMTFValues+0x118>  // b.tcont
     d38:	mov	w8, #0x3                   	// #3
     d3c:	b	d5c <sendMTFValues+0x134>
     d40:	cmp	w14, #0x4b0
     d44:	b.ge	d50 <sendMTFValues+0x128>  // b.tcont
     d48:	mov	w8, #0x4                   	// #4
     d4c:	b	d5c <sendMTFValues+0x134>
     d50:	cmp	w14, #0x960
     d54:	mov	w8, #0x5                   	// #5
     d58:	cinc	w8, w8, ge  // ge = tcont
     d5c:	mov	w9, #0x102                 	// #258
     d60:	mov	w23, w8
     d64:	adrp	x11, 0 <BZ2_bsInitWrite>
     d68:	umaddl	x8, w8, w9, x28
     d6c:	adrp	x9, 0 <BZ2_bsInitWrite>
     d70:	str	x19, [sp, #64]
     d74:	sxtw	x19, w19
     d78:	ldr	q16, [x11]
     d7c:	ldr	q17, [x9]
     d80:	mov	w10, #0x924a                	// #37450
     d84:	cmp	x19, #0x1
     d88:	csinc	x15, x19, xzr, gt
     d8c:	add	x20, x8, x10
     d90:	mov	w8, #0x4                   	// #4
     d94:	mov	w25, wzr
     d98:	add	x21, x28, #0x2a4
     d9c:	mov	w22, #0xf                   	// #15
     da0:	movi	v8.4h, #0xf
     da4:	and	x16, x15, #0x7ffffffffffffffc
     da8:	dup	v18.2d, x8
     dac:	mov	x27, x23
     db0:	stur	q16, [x29, #-80]
     db4:	str	q17, [sp, #96]
     db8:	str	x15, [sp, #72]
     dbc:	str	x16, [sp, #56]
     dc0:	str	q18, [sp, #32]
     dc4:	b	de0 <sendMTFValues+0x1b8>
     dc8:	add	w25, w26, #0x1
     dcc:	sub	w14, w14, w24
     dd0:	cmp	x27, #0x1
     dd4:	sub	x20, x20, #0x102
     dd8:	mov	x27, x8
     ddc:	b.le	f70 <sendMTFValues+0x348>
     de0:	sdiv	w8, w14, w27
     de4:	mov	w24, wzr
     de8:	cmp	w8, #0x1
     dec:	sub	w26, w25, #0x1
     df0:	b.lt	e24 <sendMTFValues+0x1fc>  // b.tstop
     df4:	cmp	w26, w13
     df8:	b.gt	e24 <sendMTFValues+0x1fc>
     dfc:	mov	w24, wzr
     e00:	sxtw	x9, w26
     e04:	ldr	w10, [x21, x9, lsl #2]
     e08:	add	x26, x9, #0x1
     e0c:	add	w24, w10, w24
     e10:	cmp	w24, w8
     e14:	b.ge	e24 <sendMTFValues+0x1fc>  // b.tcont
     e18:	cmp	x9, x13
     e1c:	mov	x9, x26
     e20:	b.lt	e04 <sendMTFValues+0x1dc>  // b.tstop
     e24:	cmp	w26, w25
     e28:	b.le	e54 <sendMTFValues+0x22c>
     e2c:	cmp	x27, x23
     e30:	b.eq	e54 <sendMTFValues+0x22c>  // b.none
     e34:	cmp	x27, #0x1
     e38:	b.eq	e54 <sendMTFValues+0x22c>  // b.none
     e3c:	sub	w8, w23, w27
     e40:	tbz	w8, #0, e54 <sendMTFValues+0x22c>
     e44:	add	x8, x28, w26, sxtw #2
     e48:	ldr	w8, [x8, #672]
     e4c:	sub	w26, w26, #0x1
     e50:	sub	w24, w24, w8
     e54:	ldr	w8, [x28, #656]
     e58:	cmp	w8, #0x3
     e5c:	b.ge	f08 <sendMTFValues+0x2e0>  // b.tcont
     e60:	cmn	w13, #0x1
     e64:	sub	x8, x27, #0x1
     e68:	b.lt	dc8 <sendMTFValues+0x1a0>  // b.tstop
     e6c:	sxtw	x9, w26
     e70:	cmp	x15, #0x4
     e74:	sxtw	x10, w25
     e78:	b.cs	e84 <sendMTFValues+0x25c>  // b.hs, b.nlast
     e7c:	mov	x11, xzr
     e80:	b	ee8 <sendMTFValues+0x2c0>
     e84:	dup	v0.2d, x10
     e88:	dup	v1.2d, x9
     e8c:	mov	x11, x16
     e90:	mov	x12, x20
     e94:	mov	v2.16b, v17.16b
     e98:	mov	v3.16b, v16.16b
     e9c:	cmgt	v4.2d, v0.2d, v2.2d
     ea0:	cmgt	v6.2d, v2.2d, v1.2d
     ea4:	cmgt	v5.2d, v0.2d, v3.2d
     ea8:	cmgt	v7.2d, v3.2d, v1.2d
     eac:	orr	v4.16b, v4.16b, v6.16b
     eb0:	orr	v5.16b, v5.16b, v7.16b
     eb4:	xtn	v4.2s, v4.2d
     eb8:	xtn2	v4.4s, v5.2d
     ebc:	xtn	v4.4h, v4.4s
     ec0:	and	v4.8b, v4.8b, v8.8b
     ec4:	xtn	v4.8b, v4.8h
     ec8:	add	v3.2d, v3.2d, v18.2d
     ecc:	subs	x11, x11, #0x4
     ed0:	st1	{v4.s}[0], [x12], #4
     ed4:	add	v2.2d, v2.2d, v18.2d
     ed8:	b.ne	e9c <sendMTFValues+0x274>  // b.any
     edc:	cmp	x15, x16
     ee0:	mov	x11, x16
     ee4:	b.eq	dc8 <sendMTFValues+0x1a0>  // b.none
     ee8:	cmp	x11, x9
     eec:	ccmp	x11, x10, #0x8, le
     ef0:	csel	w12, w22, wzr, lt  // lt = tstop
     ef4:	strb	w12, [x20, x11]
     ef8:	add	x11, x11, #0x1
     efc:	cmp	x11, x19
     f00:	b.lt	ee8 <sendMTFValues+0x2c0>  // b.tstop
     f04:	b	dc8 <sendMTFValues+0x1a0>
     f08:	ldr	s0, [x28, #668]
     f0c:	adrp	x8, 0 <stderr>
     f10:	ldr	x0, [x8]
     f14:	scvtf	s1, w24
     f18:	mov	x8, #0x4059000000000000    	// #4636737291354636288
     f1c:	fcvt	d1, s1
     f20:	fmov	d2, x8
     f24:	scvtf	s0, s0
     f28:	fmul	d1, d1, d2
     f2c:	fcvt	d0, s0
     f30:	adrp	x1, 0 <BZ2_bsInitWrite>
     f34:	fdiv	d0, d1, d0
     f38:	add	x1, x1, #0x0
     f3c:	mov	w2, w27
     f40:	mov	w3, w25
     f44:	mov	w4, w26
     f48:	mov	w5, w24
     f4c:	str	w14, [x29, #8]
     f50:	bl	0 <fprintf>
     f54:	ldr	q18, [sp, #32]
     f58:	ldr	x16, [sp, #56]
     f5c:	ldp	x15, x13, [sp, #72]
     f60:	ldr	q17, [sp, #96]
     f64:	ldur	q16, [x29, #-80]
     f68:	ldr	w14, [x29, #8]
     f6c:	b	e60 <sendMTFValues+0x238>
     f70:	lsl	x8, x23, #2
     f74:	stp	x8, x19, [sp, #24]
     f78:	ldr	x8, [sp, #16]
     f7c:	cmp	w23, #0x6
     f80:	cset	w10, ne  // ne = any
     f84:	cmn	w13, #0x1
     f88:	lsl	x8, x8, #2
     f8c:	str	x8, [sp, #16]
     f90:	lsl	x8, x23, #1
     f94:	str	x8, [sp, #96]
     f98:	mov	w8, #0x934c                	// #37708
     f9c:	mov	w21, #0xb188                	// #45448
     fa0:	mov	w9, #0xc9b8                	// #51640
     fa4:	add	x25, x28, x8
     fa8:	cset	w8, lt  // lt = tstop
     fac:	sub	x22, x29, #0x14
     fb0:	add	x11, x28, x21
     fb4:	add	x20, x28, x9
     fb8:	orr	w8, w8, w10
     fbc:	str	wzr, [sp, #72]
     fc0:	str	x11, [sp, #56]
     fc4:	str	w8, [sp, #12]
     fc8:	stur	x28, [x29, #-88]
     fcc:	str	x23, [sp, #88]
     fd0:	ldr	x2, [sp, #24]
     fd4:	sub	x0, x29, #0x2c
     fd8:	mov	w1, wzr
     fdc:	bl	0 <memset>
     fe0:	ldr	x26, [sp, #56]
     fe4:	ldr	x8, [sp, #80]
     fe8:	ldr	x24, [sp, #16]
     fec:	mov	x19, x23
     ff0:	b	1000 <sendMTFValues+0x3d8>
     ff4:	subs	x19, x19, #0x1
     ff8:	add	x26, x26, #0x408
     ffc:	b.eq	1020 <sendMTFValues+0x3f8>  // b.none
    1000:	cmn	w8, #0x1
    1004:	b.lt	ff4 <sendMTFValues+0x3cc>  // b.tstop
    1008:	mov	x0, x26
    100c:	mov	w1, wzr
    1010:	mov	x2, x24
    1014:	bl	0 <memset>
    1018:	ldr	x8, [sp, #80]
    101c:	b	ff4 <sendMTFValues+0x3cc>
    1020:	ldr	x14, [sp, #32]
    1024:	ldr	w8, [sp, #12]
    1028:	tbnz	w8, #0, 107c <sendMTFValues+0x454>
    102c:	mov	x8, xzr
    1030:	mov	x9, xzr
    1034:	add	x10, x25, x9
    1038:	ldrb	w11, [x10, #258]
    103c:	ldrb	w12, [x10]
    1040:	add	x13, x25, x8
    1044:	add	x9, x9, #0x1
    1048:	cmp	x9, x14
    104c:	bfi	w12, w11, #16, #8
    1050:	str	w12, [x13, #13932]
    1054:	ldrb	w11, [x10, #774]
    1058:	ldrb	w12, [x10, #516]
    105c:	add	x8, x8, #0x10
    1060:	bfi	w12, w11, #16, #8
    1064:	str	w12, [x13, #13936]
    1068:	ldrb	w11, [x10, #1290]
    106c:	ldrb	w10, [x10, #1032]
    1070:	bfi	w10, w11, #16, #8
    1074:	str	w10, [x13, #13940]
    1078:	b.lt	1034 <sendMTFValues+0x40c>  // b.tstop
    107c:	ldr	w19, [x28, #668]
    1080:	cmp	w19, #0x1
    1084:	b.lt	1b88 <sendMTFValues+0xf60>  // b.tstop
    1088:	mov	x24, xzr
    108c:	mov	w28, wzr
    1090:	mov	w1, wzr
    1094:	b	14a0 <sendMTFValues+0x878>
    1098:	add	x10, x18, x26, lsl #1
    109c:	ldrh	w12, [x10]
    10a0:	mov	w9, #0x408                 	// #1032
    10a4:	madd	x9, x11, x9, x17
    10a8:	add	x9, x9, x21
    10ac:	lsl	x11, x12, #2
    10b0:	ldr	w12, [x9, x11]
    10b4:	add	w12, w12, #0x1
    10b8:	str	w12, [x9, x11]
    10bc:	ldrh	w11, [x10, #2]
    10c0:	lsl	x11, x11, #2
    10c4:	ldr	w12, [x9, x11]
    10c8:	add	w12, w12, #0x1
    10cc:	str	w12, [x9, x11]
    10d0:	ldrh	w11, [x10, #4]
    10d4:	lsl	x11, x11, #2
    10d8:	ldr	w12, [x9, x11]
    10dc:	add	w12, w12, #0x1
    10e0:	str	w12, [x9, x11]
    10e4:	ldrh	w11, [x10, #6]
    10e8:	lsl	x11, x11, #2
    10ec:	ldr	w12, [x9, x11]
    10f0:	add	w12, w12, #0x1
    10f4:	str	w12, [x9, x11]
    10f8:	ldrh	w11, [x10, #8]
    10fc:	lsl	x11, x11, #2
    1100:	ldr	w12, [x9, x11]
    1104:	add	w12, w12, #0x1
    1108:	str	w12, [x9, x11]
    110c:	ldrh	w11, [x10, #10]
    1110:	lsl	x11, x11, #2
    1114:	ldr	w12, [x9, x11]
    1118:	add	w12, w12, #0x1
    111c:	str	w12, [x9, x11]
    1120:	ldrh	w11, [x10, #12]
    1124:	lsl	x11, x11, #2
    1128:	ldr	w12, [x9, x11]
    112c:	add	w12, w12, #0x1
    1130:	str	w12, [x9, x11]
    1134:	ldrh	w11, [x10, #14]
    1138:	lsl	x11, x11, #2
    113c:	ldr	w12, [x9, x11]
    1140:	add	w12, w12, #0x1
    1144:	str	w12, [x9, x11]
    1148:	ldrh	w11, [x10, #16]
    114c:	lsl	x11, x11, #2
    1150:	ldr	w12, [x9, x11]
    1154:	add	w12, w12, #0x1
    1158:	str	w12, [x9, x11]
    115c:	ldrh	w11, [x10, #18]
    1160:	lsl	x11, x11, #2
    1164:	ldr	w12, [x9, x11]
    1168:	add	w12, w12, #0x1
    116c:	str	w12, [x9, x11]
    1170:	ldrh	w11, [x10, #20]
    1174:	lsl	x11, x11, #2
    1178:	ldr	w12, [x9, x11]
    117c:	add	w12, w12, #0x1
    1180:	str	w12, [x9, x11]
    1184:	ldrh	w11, [x10, #22]
    1188:	lsl	x11, x11, #2
    118c:	ldr	w12, [x9, x11]
    1190:	add	w12, w12, #0x1
    1194:	str	w12, [x9, x11]
    1198:	ldrh	w11, [x10, #24]
    119c:	lsl	x11, x11, #2
    11a0:	ldr	w12, [x9, x11]
    11a4:	add	w12, w12, #0x1
    11a8:	str	w12, [x9, x11]
    11ac:	ldrh	w11, [x10, #26]
    11b0:	lsl	x11, x11, #2
    11b4:	ldr	w12, [x9, x11]
    11b8:	add	w12, w12, #0x1
    11bc:	str	w12, [x9, x11]
    11c0:	ldrh	w11, [x10, #28]
    11c4:	lsl	x11, x11, #2
    11c8:	ldr	w12, [x9, x11]
    11cc:	add	w12, w12, #0x1
    11d0:	str	w12, [x9, x11]
    11d4:	ldrh	w11, [x10, #30]
    11d8:	lsl	x11, x11, #2
    11dc:	ldr	w12, [x9, x11]
    11e0:	add	w12, w12, #0x1
    11e4:	str	w12, [x9, x11]
    11e8:	ldrh	w11, [x10, #32]
    11ec:	lsl	x11, x11, #2
    11f0:	ldr	w12, [x9, x11]
    11f4:	add	w12, w12, #0x1
    11f8:	str	w12, [x9, x11]
    11fc:	ldrh	w11, [x10, #34]
    1200:	lsl	x11, x11, #2
    1204:	ldr	w12, [x9, x11]
    1208:	add	w12, w12, #0x1
    120c:	str	w12, [x9, x11]
    1210:	ldrh	w11, [x10, #36]
    1214:	lsl	x11, x11, #2
    1218:	ldr	w12, [x9, x11]
    121c:	add	w12, w12, #0x1
    1220:	str	w12, [x9, x11]
    1224:	ldrh	w11, [x10, #38]
    1228:	lsl	x11, x11, #2
    122c:	ldr	w12, [x9, x11]
    1230:	add	w12, w12, #0x1
    1234:	str	w12, [x9, x11]
    1238:	ldrh	w11, [x10, #40]
    123c:	lsl	x11, x11, #2
    1240:	ldr	w12, [x9, x11]
    1244:	add	w12, w12, #0x1
    1248:	str	w12, [x9, x11]
    124c:	ldrh	w11, [x10, #42]
    1250:	lsl	x11, x11, #2
    1254:	ldr	w12, [x9, x11]
    1258:	add	w12, w12, #0x1
    125c:	str	w12, [x9, x11]
    1260:	ldrh	w11, [x10, #44]
    1264:	lsl	x11, x11, #2
    1268:	ldr	w12, [x9, x11]
    126c:	add	w12, w12, #0x1
    1270:	str	w12, [x9, x11]
    1274:	ldrh	w11, [x10, #46]
    1278:	lsl	x11, x11, #2
    127c:	ldr	w12, [x9, x11]
    1280:	add	w12, w12, #0x1
    1284:	str	w12, [x9, x11]
    1288:	ldrh	w11, [x10, #48]
    128c:	lsl	x11, x11, #2
    1290:	ldr	w12, [x9, x11]
    1294:	add	w12, w12, #0x1
    1298:	str	w12, [x9, x11]
    129c:	ldrh	w11, [x10, #50]
    12a0:	lsl	x11, x11, #2
    12a4:	ldr	w12, [x9, x11]
    12a8:	add	w12, w12, #0x1
    12ac:	str	w12, [x9, x11]
    12b0:	ldrh	w11, [x10, #52]
    12b4:	lsl	x11, x11, #2
    12b8:	ldr	w12, [x9, x11]
    12bc:	add	w12, w12, #0x1
    12c0:	str	w12, [x9, x11]
    12c4:	ldrh	w11, [x10, #54]
    12c8:	lsl	x11, x11, #2
    12cc:	ldr	w12, [x9, x11]
    12d0:	add	w12, w12, #0x1
    12d4:	str	w12, [x9, x11]
    12d8:	ldrh	w11, [x10, #56]
    12dc:	lsl	x11, x11, #2
    12e0:	ldr	w12, [x9, x11]
    12e4:	add	w12, w12, #0x1
    12e8:	str	w12, [x9, x11]
    12ec:	ldrh	w11, [x10, #58]
    12f0:	lsl	x11, x11, #2
    12f4:	ldr	w12, [x9, x11]
    12f8:	add	w12, w12, #0x1
    12fc:	str	w12, [x9, x11]
    1300:	ldrh	w11, [x10, #60]
    1304:	lsl	x11, x11, #2
    1308:	ldr	w12, [x9, x11]
    130c:	add	w12, w12, #0x1
    1310:	str	w12, [x9, x11]
    1314:	ldrh	w11, [x10, #62]
    1318:	lsl	x11, x11, #2
    131c:	ldr	w12, [x9, x11]
    1320:	add	w12, w12, #0x1
    1324:	str	w12, [x9, x11]
    1328:	ldrh	w11, [x10, #64]
    132c:	lsl	x11, x11, #2
    1330:	ldr	w12, [x9, x11]
    1334:	add	w12, w12, #0x1
    1338:	str	w12, [x9, x11]
    133c:	ldrh	w11, [x10, #66]
    1340:	lsl	x11, x11, #2
    1344:	ldr	w12, [x9, x11]
    1348:	add	w12, w12, #0x1
    134c:	str	w12, [x9, x11]
    1350:	ldrh	w11, [x10, #68]
    1354:	lsl	x11, x11, #2
    1358:	ldr	w12, [x9, x11]
    135c:	add	w12, w12, #0x1
    1360:	str	w12, [x9, x11]
    1364:	ldrh	w11, [x10, #70]
    1368:	lsl	x11, x11, #2
    136c:	ldr	w12, [x9, x11]
    1370:	add	w12, w12, #0x1
    1374:	str	w12, [x9, x11]
    1378:	ldrh	w11, [x10, #72]
    137c:	lsl	x11, x11, #2
    1380:	ldr	w12, [x9, x11]
    1384:	add	w12, w12, #0x1
    1388:	str	w12, [x9, x11]
    138c:	ldrh	w11, [x10, #74]
    1390:	lsl	x11, x11, #2
    1394:	ldr	w12, [x9, x11]
    1398:	add	w12, w12, #0x1
    139c:	str	w12, [x9, x11]
    13a0:	ldrh	w11, [x10, #76]
    13a4:	lsl	x11, x11, #2
    13a8:	ldr	w12, [x9, x11]
    13ac:	add	w12, w12, #0x1
    13b0:	str	w12, [x9, x11]
    13b4:	ldrh	w11, [x10, #78]
    13b8:	lsl	x11, x11, #2
    13bc:	ldr	w12, [x9, x11]
    13c0:	add	w12, w12, #0x1
    13c4:	str	w12, [x9, x11]
    13c8:	ldrh	w11, [x10, #80]
    13cc:	lsl	x11, x11, #2
    13d0:	ldr	w12, [x9, x11]
    13d4:	add	w12, w12, #0x1
    13d8:	str	w12, [x9, x11]
    13dc:	ldrh	w11, [x10, #82]
    13e0:	lsl	x11, x11, #2
    13e4:	ldr	w12, [x9, x11]
    13e8:	add	w12, w12, #0x1
    13ec:	str	w12, [x9, x11]
    13f0:	ldrh	w11, [x10, #84]
    13f4:	lsl	x11, x11, #2
    13f8:	ldr	w12, [x9, x11]
    13fc:	add	w12, w12, #0x1
    1400:	str	w12, [x9, x11]
    1404:	ldrh	w11, [x10, #86]
    1408:	lsl	x11, x11, #2
    140c:	ldr	w12, [x9, x11]
    1410:	add	w12, w12, #0x1
    1414:	str	w12, [x9, x11]
    1418:	ldrh	w11, [x10, #88]
    141c:	lsl	x11, x11, #2
    1420:	ldr	w12, [x9, x11]
    1424:	add	w12, w12, #0x1
    1428:	str	w12, [x9, x11]
    142c:	ldrh	w11, [x10, #90]
    1430:	lsl	x11, x11, #2
    1434:	ldr	w12, [x9, x11]
    1438:	add	w12, w12, #0x1
    143c:	str	w12, [x9, x11]
    1440:	ldrh	w11, [x10, #92]
    1444:	lsl	x11, x11, #2
    1448:	ldr	w12, [x9, x11]
    144c:	add	w12, w12, #0x1
    1450:	str	w12, [x9, x11]
    1454:	ldrh	w11, [x10, #94]
    1458:	lsl	x11, x11, #2
    145c:	ldr	w12, [x9, x11]
    1460:	add	w12, w12, #0x1
    1464:	str	w12, [x9, x11]
    1468:	ldrh	w10, [x10, #96]
    146c:	lsl	x10, x10, #2
    1470:	ldr	w11, [x9, x10]
    1474:	add	w11, w11, #0x1
    1478:	str	w11, [x9, x10]
    147c:	ldrh	w10, [x18, w0, sxtw #1]
    1480:	lsl	x10, x10, #2
    1484:	ldr	w11, [x9, x10]
    1488:	add	w11, w11, #0x1
    148c:	str	w11, [x9, x10]
    1490:	ldr	w19, [x17, #668]
    1494:	add	w28, w8, #0x1
    1498:	cmp	w28, w19
    149c:	b.ge	1b80 <sendMTFValues+0xf58>  // b.tcont
    14a0:	ldr	x2, [sp, #96]
    14a4:	stur	w1, [x29, #-80]
    14a8:	cmp	w23, #0x6
    14ac:	sxtw	x26, w28
    14b0:	sub	x0, x29, #0x14
    14b4:	mov	w1, wzr
    14b8:	str	x24, [x29, #8]
    14bc:	cset	w24, eq  // eq = none
    14c0:	add	x23, x26, #0x31
    14c4:	sub	w27, w19, #0x1
    14c8:	bl	0 <memset>
    14cc:	mov	x0, x23
    14d0:	cmp	w0, w19
    14d4:	csel	w8, w0, w27, lt  // lt = tstop
    14d8:	sub	w9, w8, w28
    14dc:	cmp	w9, #0x31
    14e0:	cset	w9, eq  // eq = none
    14e4:	and	w9, w24, w9
    14e8:	tbz	w9, #0, 1a98 <sendMTFValues+0xe70>
    14ec:	ldur	x18, [x29, #-96]
    14f0:	ldr	x24, [x29, #8]
    14f4:	ldur	w1, [x29, #-80]
    14f8:	ldr	x23, [sp, #88]
    14fc:	add	x10, x18, x26, lsl #1
    1500:	ldrh	w11, [x10]
    1504:	ldrh	w12, [x10, #2]
    1508:	ldrh	w15, [x10, #4]
    150c:	add	x11, x20, x11, lsl #4
    1510:	add	x12, x20, x12, lsl #4
    1514:	ldp	w13, w17, [x12]
    1518:	ldp	w14, w16, [x11]
    151c:	ldr	w11, [x11, #8]
    1520:	ldr	w12, [x12, #8]
    1524:	add	x15, x20, x15, lsl #4
    1528:	add	w13, w13, w14
    152c:	ldrh	w14, [x10, #6]
    1530:	add	w16, w17, w16
    1534:	add	w11, w12, w11
    1538:	ldp	w17, w12, [x15]
    153c:	ldr	w15, [x15, #8]
    1540:	add	x14, x20, x14, lsl #4
    1544:	add	w13, w13, w17
    1548:	ldrh	w17, [x10, #8]
    154c:	add	w12, w16, w12
    1550:	add	w11, w11, w15
    1554:	ldp	w15, w16, [x14]
    1558:	ldr	w14, [x14, #8]
    155c:	add	x17, x20, x17, lsl #4
    1560:	add	w13, w13, w15
    1564:	add	w12, w12, w16
    1568:	ldrh	w16, [x10, #10]
    156c:	add	w11, w11, w14
    1570:	ldp	w15, w14, [x17]
    1574:	ldr	w17, [x17, #8]
    1578:	add	x16, x20, x16, lsl #4
    157c:	add	w13, w13, w15
    1580:	ldrh	w15, [x10, #12]
    1584:	add	w12, w12, w14
    1588:	add	w11, w11, w17
    158c:	ldp	w14, w17, [x16]
    1590:	ldr	w16, [x16, #8]
    1594:	add	x15, x20, x15, lsl #4
    1598:	add	w13, w13, w14
    159c:	ldrh	w14, [x10, #14]
    15a0:	add	w12, w12, w17
    15a4:	add	w11, w11, w16
    15a8:	ldp	w16, w17, [x15]
    15ac:	ldr	w15, [x15, #8]
    15b0:	add	x14, x20, x14, lsl #4
    15b4:	add	w12, w12, w17
    15b8:	ldrh	w17, [x10, #16]
    15bc:	add	w13, w13, w16
    15c0:	add	w11, w11, w15
    15c4:	ldp	w16, w15, [x14]
    15c8:	ldr	w14, [x14, #8]
    15cc:	add	x17, x20, x17, lsl #4
    15d0:	add	w13, w13, w16
    15d4:	ldrh	w16, [x10, #18]
    15d8:	add	w12, w12, w15
    15dc:	add	w11, w11, w14
    15e0:	ldp	w15, w14, [x17]
    15e4:	ldr	w17, [x17, #8]
    15e8:	add	x16, x20, x16, lsl #4
    15ec:	add	w13, w13, w15
    15f0:	ldrh	w15, [x10, #20]
    15f4:	add	w12, w12, w14
    15f8:	add	w11, w11, w17
    15fc:	ldp	w14, w17, [x16]
    1600:	ldr	w16, [x16, #8]
    1604:	add	x15, x20, x15, lsl #4
    1608:	add	w13, w13, w14
    160c:	add	w12, w12, w17
    1610:	ldrh	w17, [x10, #22]
    1614:	add	w11, w11, w16
    1618:	ldp	w14, w16, [x15]
    161c:	ldr	w15, [x15, #8]
    1620:	add	x17, x20, x17, lsl #4
    1624:	add	w13, w13, w14
    1628:	ldrh	w14, [x10, #24]
    162c:	add	w12, w12, w16
    1630:	add	w11, w11, w15
    1634:	ldp	w16, w15, [x17]
    1638:	ldr	w17, [x17, #8]
    163c:	add	x14, x20, x14, lsl #4
    1640:	add	w13, w13, w16
    1644:	ldrh	w16, [x10, #26]
    1648:	add	w12, w12, w15
    164c:	add	w11, w11, w17
    1650:	ldp	w15, w17, [x14]
    1654:	ldr	w14, [x14, #8]
    1658:	add	x16, x20, x16, lsl #4
    165c:	add	w12, w12, w17
    1660:	ldrh	w17, [x10, #28]
    1664:	add	w13, w13, w15
    1668:	add	w11, w11, w14
    166c:	ldp	w15, w14, [x16]
    1670:	ldr	w16, [x16, #8]
    1674:	add	x17, x20, x17, lsl #4
    1678:	add	w13, w13, w15
    167c:	ldrh	w15, [x10, #30]
    1680:	add	w12, w12, w14
    1684:	add	w11, w11, w16
    1688:	ldp	w14, w16, [x17]
    168c:	ldr	w17, [x17, #8]
    1690:	add	x15, x20, x15, lsl #4
    1694:	add	w13, w13, w14
    1698:	ldrh	w14, [x10, #32]
    169c:	add	w12, w12, w16
    16a0:	add	w11, w11, w17
    16a4:	ldp	w16, w17, [x15]
    16a8:	ldr	w15, [x15, #8]
    16ac:	add	x14, x20, x14, lsl #4
    16b0:	add	w13, w13, w16
    16b4:	add	w12, w12, w17
    16b8:	ldrh	w17, [x10, #34]
    16bc:	add	w11, w11, w15
    16c0:	ldp	w16, w15, [x14]
    16c4:	ldr	w14, [x14, #8]
    16c8:	add	x17, x20, x17, lsl #4
    16cc:	add	w13, w13, w16
    16d0:	ldrh	w16, [x10, #36]
    16d4:	add	w12, w12, w15
    16d8:	add	w11, w11, w14
    16dc:	ldp	w15, w14, [x17]
    16e0:	ldr	w17, [x17, #8]
    16e4:	add	x16, x20, x16, lsl #4
    16e8:	add	w13, w13, w15
    16ec:	ldrh	w15, [x10, #38]
    16f0:	add	w12, w12, w14
    16f4:	add	w11, w11, w17
    16f8:	ldp	w14, w17, [x16]
    16fc:	ldr	w16, [x16, #8]
    1700:	add	x15, x20, x15, lsl #4
    1704:	add	w12, w12, w17
    1708:	ldrh	w17, [x10, #40]
    170c:	add	w13, w13, w14
    1710:	add	w11, w11, w16
    1714:	ldp	w14, w16, [x15]
    1718:	ldr	w15, [x15, #8]
    171c:	add	x17, x20, x17, lsl #4
    1720:	add	w13, w13, w14
    1724:	ldrh	w14, [x10, #42]
    1728:	add	w12, w12, w16
    172c:	add	w11, w11, w15
    1730:	ldp	w16, w15, [x17]
    1734:	ldr	w17, [x17, #8]
    1738:	add	x14, x20, x14, lsl #4
    173c:	add	w13, w13, w16
    1740:	ldrh	w16, [x10, #44]
    1744:	add	w12, w12, w15
    1748:	add	w11, w11, w17
    174c:	ldp	w15, w17, [x14]
    1750:	ldr	w14, [x14, #8]
    1754:	add	x16, x20, x16, lsl #4
    1758:	add	w13, w13, w15
    175c:	add	w12, w12, w17
    1760:	ldrh	w17, [x10, #46]
    1764:	add	w11, w11, w14
    1768:	ldp	w15, w14, [x16]
    176c:	ldr	w16, [x16, #8]
    1770:	add	x17, x20, x17, lsl #4
    1774:	add	w13, w13, w15
    1778:	ldrh	w15, [x10, #48]
    177c:	add	w12, w12, w14
    1780:	add	w11, w11, w16
    1784:	ldp	w14, w16, [x17]
    1788:	ldr	w17, [x17, #8]
    178c:	add	x15, x20, x15, lsl #4
    1790:	add	w13, w13, w14
    1794:	ldrh	w14, [x10, #50]
    1798:	add	w12, w12, w16
    179c:	add	w11, w11, w17
    17a0:	ldp	w16, w17, [x15]
    17a4:	ldr	w15, [x15, #8]
    17a8:	add	x14, x20, x14, lsl #4
    17ac:	add	w12, w12, w17
    17b0:	ldrh	w17, [x10, #52]
    17b4:	add	w13, w13, w16
    17b8:	add	w11, w11, w15
    17bc:	ldp	w16, w15, [x14]
    17c0:	ldr	w14, [x14, #8]
    17c4:	add	x17, x20, x17, lsl #4
    17c8:	add	w13, w13, w16
    17cc:	ldrh	w16, [x10, #54]
    17d0:	add	w12, w12, w15
    17d4:	add	w11, w11, w14
    17d8:	ldp	w15, w14, [x17]
    17dc:	ldr	w17, [x17, #8]
    17e0:	add	x16, x20, x16, lsl #4
    17e4:	add	w13, w13, w15
    17e8:	ldrh	w15, [x10, #56]
    17ec:	add	w12, w12, w14
    17f0:	add	w11, w11, w17
    17f4:	ldp	w14, w17, [x16]
    17f8:	ldr	w16, [x16, #8]
    17fc:	add	x15, x20, x15, lsl #4
    1800:	add	w13, w13, w14
    1804:	add	w12, w12, w17
    1808:	ldrh	w17, [x10, #58]
    180c:	add	w11, w11, w16
    1810:	ldp	w14, w16, [x15]
    1814:	ldr	w15, [x15, #8]
    1818:	add	x17, x20, x17, lsl #4
    181c:	add	w13, w13, w14
    1820:	ldrh	w14, [x10, #60]
    1824:	add	w12, w12, w16
    1828:	add	w11, w11, w15
    182c:	ldp	w16, w15, [x17]
    1830:	ldr	w17, [x17, #8]
    1834:	add	x14, x20, x14, lsl #4
    1838:	add	w13, w13, w16
    183c:	ldrh	w16, [x10, #62]
    1840:	add	w12, w12, w15
    1844:	add	w11, w11, w17
    1848:	ldp	w15, w17, [x14]
    184c:	ldr	w14, [x14, #8]
    1850:	add	x16, x20, x16, lsl #4
    1854:	add	w12, w12, w17
    1858:	ldrh	w17, [x10, #64]
    185c:	add	w13, w13, w15
    1860:	add	w11, w11, w14
    1864:	ldp	w15, w14, [x16]
    1868:	ldr	w16, [x16, #8]
    186c:	add	x17, x20, x17, lsl #4
    1870:	add	w13, w13, w15
    1874:	ldrh	w15, [x10, #66]
    1878:	add	w12, w12, w14
    187c:	add	w11, w11, w16
    1880:	ldp	w14, w16, [x17]
    1884:	ldr	w17, [x17, #8]
    1888:	add	x15, x20, x15, lsl #4
    188c:	add	w13, w13, w14
    1890:	ldrh	w14, [x10, #68]
    1894:	add	w12, w12, w16
    1898:	add	w11, w11, w17
    189c:	ldp	w16, w17, [x15]
    18a0:	ldr	w15, [x15, #8]
    18a4:	add	x14, x20, x14, lsl #4
    18a8:	add	w13, w13, w16
    18ac:	add	w12, w12, w17
    18b0:	ldrh	w17, [x10, #70]
    18b4:	add	w11, w11, w15
    18b8:	ldp	w16, w15, [x14]
    18bc:	ldr	w14, [x14, #8]
    18c0:	add	x17, x20, x17, lsl #4
    18c4:	add	w13, w13, w16
    18c8:	ldrh	w16, [x10, #72]
    18cc:	add	w12, w12, w15
    18d0:	add	w11, w11, w14
    18d4:	ldp	w15, w14, [x17]
    18d8:	ldr	w17, [x17, #8]
    18dc:	add	x16, x20, x16, lsl #4
    18e0:	add	w13, w13, w15
    18e4:	ldrh	w15, [x10, #74]
    18e8:	add	w12, w12, w14
    18ec:	add	w11, w11, w17
    18f0:	ldp	w14, w17, [x16]
    18f4:	ldr	w16, [x16, #8]
    18f8:	add	x15, x20, x15, lsl #4
    18fc:	add	w12, w12, w17
    1900:	ldrh	w17, [x10, #76]
    1904:	add	w13, w13, w14
    1908:	add	w11, w11, w16
    190c:	ldp	w14, w16, [x15]
    1910:	ldr	w15, [x15, #8]
    1914:	add	x17, x20, x17, lsl #4
    1918:	add	w13, w13, w14
    191c:	ldrh	w14, [x10, #78]
    1920:	add	w12, w12, w16
    1924:	add	w11, w11, w15
    1928:	ldp	w16, w15, [x17]
    192c:	ldr	w17, [x17, #8]
    1930:	add	x14, x20, x14, lsl #4
    1934:	add	w13, w13, w16
    1938:	ldrh	w16, [x10, #80]
    193c:	add	w12, w12, w15
    1940:	add	w11, w11, w17
    1944:	ldp	w15, w17, [x14]
    1948:	ldr	w14, [x14, #8]
    194c:	add	x16, x20, x16, lsl #4
    1950:	add	w13, w13, w15
    1954:	add	w12, w12, w17
    1958:	ldrh	w17, [x10, #82]
    195c:	add	w11, w11, w14
    1960:	ldp	w15, w14, [x16]
    1964:	ldr	w16, [x16, #8]
    1968:	add	x17, x20, x17, lsl #4
    196c:	add	w13, w13, w15
    1970:	ldrh	w15, [x10, #84]
    1974:	add	w12, w12, w14
    1978:	add	w11, w11, w16
    197c:	ldp	w14, w16, [x17]
    1980:	ldr	w17, [x17, #8]
    1984:	add	x15, x20, x15, lsl #4
    1988:	add	w13, w13, w14
    198c:	ldrh	w14, [x10, #86]
    1990:	add	w12, w12, w16
    1994:	add	w11, w11, w17
    1998:	ldp	w16, w17, [x15]
    199c:	ldr	w15, [x15, #8]
    19a0:	add	x14, x20, x14, lsl #4
    19a4:	add	w12, w12, w17
    19a8:	ldrh	w17, [x10, #88]
    19ac:	add	w13, w13, w16
    19b0:	add	w11, w11, w15
    19b4:	ldp	w16, w15, [x14]
    19b8:	ldr	w14, [x14, #8]
    19bc:	add	x17, x20, x17, lsl #4
    19c0:	add	w13, w13, w16
    19c4:	ldrh	w16, [x10, #90]
    19c8:	add	w12, w12, w15
    19cc:	add	w11, w11, w14
    19d0:	ldp	w15, w14, [x17]
    19d4:	ldr	w17, [x17, #8]
    19d8:	add	x16, x20, x16, lsl #4
    19dc:	add	w13, w13, w15
    19e0:	ldrh	w15, [x10, #92]
    19e4:	add	w12, w12, w14
    19e8:	add	w11, w11, w17
    19ec:	ldp	w14, w17, [x16]
    19f0:	ldr	w16, [x16, #8]
    19f4:	add	x15, x20, x15, lsl #4
    19f8:	add	w13, w13, w14
    19fc:	add	w11, w11, w16
    1a00:	ldp	w14, w16, [x15]
    1a04:	add	w12, w12, w17
    1a08:	ldrh	w17, [x10, #94]
    1a0c:	ldrh	w10, [x10, #96]
    1a10:	add	w13, w13, w14
    1a14:	ldr	w14, [x15, #8]
    1a18:	add	x15, x20, x17, lsl #4
    1a1c:	add	w12, w12, w16
    1a20:	add	x10, x20, x10, lsl #4
    1a24:	add	w11, w11, w14
    1a28:	ldp	w16, w14, [x15]
    1a2c:	ldr	w15, [x15, #8]
    1a30:	ldur	x17, [x29, #-88]
    1a34:	add	w13, w13, w16
    1a38:	ldrh	w16, [x18, x0, lsl #1]
    1a3c:	add	w12, w12, w14
    1a40:	add	w11, w11, w15
    1a44:	ldp	w14, w15, [x10]
    1a48:	add	x16, x20, x16, lsl #4
    1a4c:	ldr	w10, [x10, #8]
    1a50:	add	w13, w13, w14
    1a54:	add	w12, w12, w15
    1a58:	ldp	w14, w15, [x16]
    1a5c:	ldr	w16, [x16, #8]
    1a60:	add	w10, w11, w10
    1a64:	add	w11, w13, w14
    1a68:	add	w12, w12, w15
    1a6c:	add	w10, w10, w16
    1a70:	sturh	w11, [x29, #-20]
    1a74:	lsr	w11, w11, #16
    1a78:	sturh	w12, [x29, #-16]
    1a7c:	lsr	w12, w12, #16
    1a80:	sturh	w10, [x29, #-12]
    1a84:	lsr	w10, w10, #16
    1a88:	sturh	w11, [x29, #-18]
    1a8c:	sturh	w12, [x29, #-14]
    1a90:	sturh	w10, [x29, #-10]
    1a94:	b	1af0 <sendMTFValues+0xec8>
    1a98:	ldp	x18, x17, [x29, #-96]
    1a9c:	ldr	x24, [x29, #8]
    1aa0:	ldur	w1, [x29, #-80]
    1aa4:	ldr	x23, [sp, #88]
    1aa8:	cmp	w8, w26
    1aac:	b.lt	1af0 <sendMTFValues+0xec8>  // b.tstop
    1ab0:	sxtw	x10, w8
    1ab4:	mov	x11, x26
    1ab8:	ldrh	w12, [x18, x11, lsl #1]
    1abc:	sub	x13, x29, #0x14
    1ac0:	mov	x14, x23
    1ac4:	add	x12, x25, x12
    1ac8:	ldrb	w15, [x12]
    1acc:	ldrh	w16, [x13]
    1ad0:	subs	x14, x14, #0x1
    1ad4:	add	x12, x12, #0x102
    1ad8:	add	w15, w16, w15
    1adc:	strh	w15, [x13], #2
    1ae0:	b.ne	1ac8 <sendMTFValues+0xea0>  // b.any
    1ae4:	cmp	x11, x10
    1ae8:	add	x11, x11, #0x1
    1aec:	b.lt	1ab8 <sendMTFValues+0xe90>  // b.tstop
    1af0:	mov	w11, #0xc9ff                	// #51711
    1af4:	mov	x12, xzr
    1af8:	movk	w11, #0x3b9a, lsl #16
    1afc:	mov	w10, #0xffffffff            	// #-1
    1b00:	ldrh	w13, [x22, x12, lsl #1]
    1b04:	cmp	w11, w13
    1b08:	csel	w10, w12, w10, gt
    1b0c:	add	x12, x12, #0x1
    1b10:	csel	w11, w13, w11, gt
    1b14:	cmp	x23, x12
    1b18:	b.ne	1b00 <sendMTFValues+0xed8>  // b.any
    1b1c:	sbfiz	x12, x10, #2, #32
    1b20:	sub	x15, x29, #0x2c
    1b24:	ldr	w13, [x15, x12]
    1b28:	add	w1, w11, w1
    1b2c:	sxtw	x11, w10
    1b30:	add	x14, x17, x24
    1b34:	add	w13, w13, #0x1
    1b38:	add	x24, x24, #0x1
    1b3c:	str	w13, [x15, x12]
    1b40:	strb	w10, [x14, #1704]
    1b44:	tbnz	w9, #0, 1098 <sendMTFValues+0x470>
    1b48:	cmp	w8, w26
    1b4c:	mov	w13, #0x408                 	// #1032
    1b50:	b.lt	1490 <sendMTFValues+0x868>  // b.tstop
    1b54:	sxtw	x9, w8
    1b58:	ldrh	w10, [x18, x26, lsl #1]
    1b5c:	madd	x12, x11, x13, x17
    1b60:	cmp	x26, x9
    1b64:	add	x26, x26, #0x1
    1b68:	add	x10, x12, x10, lsl #2
    1b6c:	ldr	w12, [x10, x21]
    1b70:	add	w12, w12, #0x1
    1b74:	str	w12, [x10, x21]
    1b78:	b.lt	1b58 <sendMTFValues+0xf30>  // b.tstop
    1b7c:	b	1490 <sendMTFValues+0x868>
    1b80:	ldur	x28, [x29, #-88]
    1b84:	b	1b90 <sendMTFValues+0xf68>
    1b88:	mov	w24, wzr
    1b8c:	mov	w1, wzr
    1b90:	ldr	w8, [x28, #656]
    1b94:	cmp	w8, #0x3
    1b98:	b.ge	1be8 <sendMTFValues+0xfc0>  // b.tcont
    1b9c:	ldp	x26, x28, [sp, #56]
    1ba0:	mov	x19, x23
    1ba4:	mov	x27, x25
    1ba8:	mov	w3, #0x11                  	// #17
    1bac:	mov	x0, x27
    1bb0:	mov	x1, x26
    1bb4:	mov	w2, w28
    1bb8:	bl	0 <BZ2_hbMakeCodeLengths>
    1bbc:	add	x27, x27, #0x102
    1bc0:	subs	x19, x19, #0x1
    1bc4:	add	x26, x26, #0x408
    1bc8:	b.ne	1ba8 <sendMTFValues+0xf80>  // b.any
    1bcc:	ldr	w8, [sp, #72]
    1bd0:	ldur	x28, [x29, #-88]
    1bd4:	add	w8, w8, #0x1
    1bd8:	cmp	w8, #0x4
    1bdc:	str	w8, [sp, #72]
    1be0:	b.ne	fd0 <sendMTFValues+0x3a8>  // b.any
    1be4:	b	1c58 <sendMTFValues+0x1030>
    1be8:	ldr	w8, [sp, #72]
    1bec:	str	x24, [x29, #8]
    1bf0:	adrp	x24, 0 <stderr>
    1bf4:	ldr	x0, [x24]
    1bf8:	add	w2, w8, #0x1
    1bfc:	add	w8, w1, #0x7
    1c00:	cmp	w1, #0x0
    1c04:	csel	w8, w8, w1, lt  // lt = tstop
    1c08:	adrp	x1, 0 <BZ2_bsInitWrite>
    1c0c:	asr	w3, w8, #3
    1c10:	add	x1, x1, #0x0
    1c14:	bl	0 <fprintf>
    1c18:	ldr	x1, [x24]
    1c1c:	adrp	x27, 0 <BZ2_bsInitWrite>
    1c20:	sub	x19, x29, #0x2c
    1c24:	mov	x26, x23
    1c28:	add	x27, x27, #0x0
    1c2c:	ldr	w2, [x19], #4
    1c30:	mov	x0, x1
    1c34:	mov	x1, x27
    1c38:	bl	0 <fprintf>
    1c3c:	ldr	x1, [x24]
    1c40:	subs	x26, x26, #0x1
    1c44:	b.ne	1c2c <sendMTFValues+0x1004>  // b.any
    1c48:	mov	w0, #0xa                   	// #10
    1c4c:	bl	0 <fputc>
    1c50:	ldr	x24, [x29, #8]
    1c54:	b	1b9c <sendMTFValues+0xf74>
    1c58:	mov	w8, #0x4653                	// #18003
    1c5c:	cmp	w24, w8
    1c60:	b.lt	1c6c <sendMTFValues+0x1044>  // b.tstop
    1c64:	mov	w0, #0xbbb                 	// #3003
    1c68:	bl	0 <BZ2_bz__AssertH__fail>
    1c6c:	ldr	x19, [sp, #32]
    1c70:	mov	x8, xzr
    1c74:	sub	x9, x29, #0x3c
    1c78:	strb	w8, [x9, x8]
    1c7c:	add	x8, x8, #0x1
    1c80:	cmp	x23, x8
    1c84:	b.ne	1c78 <sendMTFValues+0x1050>  // b.any
    1c88:	ldr	x5, [sp, #80]
    1c8c:	cmp	w24, #0x1
    1c90:	b.lt	1cfc <sendMTFValues+0x10d4>  // b.tstop
    1c94:	ldurb	w11, [x29, #-60]
    1c98:	sub	x10, x29, #0x3c
    1c9c:	mov	x8, xzr
    1ca0:	mov	w9, w24
    1ca4:	orr	x10, x10, #0x1
    1ca8:	mov	w12, #0x4cfa                	// #19706
    1cac:	b	1cc4 <sendMTFValues+0x109c>
    1cb0:	mov	w15, wzr
    1cb4:	add	x8, x8, #0x1
    1cb8:	cmp	x8, x9
    1cbc:	strb	w15, [x13, x12]
    1cc0:	b.eq	1cf8 <sendMTFValues+0x10d0>  // b.none
    1cc4:	add	x13, x28, x8
    1cc8:	ldrb	w14, [x13, #1704]
    1ccc:	cmp	w14, w11, uxtb
    1cd0:	b.eq	1cb0 <sendMTFValues+0x1088>  // b.none
    1cd4:	mov	x15, xzr
    1cd8:	ldrb	w16, [x10, x15]
    1cdc:	strb	w11, [x10, x15]
    1ce0:	add	x15, x15, #0x1
    1ce4:	cmp	w14, w16
    1ce8:	mov	w11, w16
    1cec:	b.ne	1cd8 <sendMTFValues+0x10b0>  // b.any
    1cf0:	mov	w11, w14
    1cf4:	b	1cb4 <sendMTFValues+0x108c>
    1cf8:	sturb	w11, [x29, #-60]
    1cfc:	cmp	x19, #0x1
    1d00:	mov	w8, #0x934d                	// #37709
    1d04:	mov	w9, #0x934c                	// #37708
    1d08:	csinc	x27, x19, xzr, gt
    1d0c:	str	x24, [x29, #8]
    1d10:	mov	x20, xzr
    1d14:	add	x24, x28, x8
    1d18:	add	x25, x28, x9
    1d1c:	and	x26, x27, #0x7ffffffffffffffe
    1d20:	b	1d74 <sendMTFValues+0x114c>
    1d24:	mov	w21, wzr
    1d28:	mov	w22, #0x20                  	// #32
    1d2c:	mov	w8, #0x408                 	// #1032
    1d30:	madd	x8, x20, x8, x28
    1d34:	mov	w9, #0x102                 	// #258
    1d38:	mov	w10, #0x9958                	// #39256
    1d3c:	madd	x9, x20, x9, x28
    1d40:	add	x0, x8, x10
    1d44:	mov	w8, #0x934c                	// #37708
    1d48:	add	x1, x9, x8
    1d4c:	mov	w2, w22
    1d50:	mov	w3, w21
    1d54:	ldr	x4, [sp, #64]
    1d58:	bl	0 <BZ2_hbAssignCodes>
    1d5c:	ldr	x5, [sp, #80]
    1d60:	add	x20, x20, #0x1
    1d64:	add	x24, x24, #0x102
    1d68:	cmp	x20, x23
    1d6c:	add	x25, x25, #0x102
    1d70:	b.eq	1e3c <sendMTFValues+0x1214>  // b.none
    1d74:	cmn	w5, #0x1
    1d78:	b.lt	1d24 <sendMTFValues+0x10fc>  // b.tstop
    1d7c:	cmp	x27, #0x2
    1d80:	b.cs	1d94 <sendMTFValues+0x116c>  // b.hs, b.nlast
    1d84:	mov	x8, xzr
    1d88:	mov	w21, wzr
    1d8c:	mov	w22, #0x20                  	// #32
    1d90:	b	1df8 <sendMTFValues+0x11d0>
    1d94:	mov	w9, wzr
    1d98:	mov	w10, wzr
    1d9c:	mov	w8, #0x20                  	// #32
    1da0:	mov	x12, x26
    1da4:	mov	x13, x24
    1da8:	mov	w11, #0x20                  	// #32
    1dac:	ldurb	w14, [x13, #-1]
    1db0:	ldrb	w15, [x13], #2
    1db4:	cmp	w9, w14
    1db8:	csel	w9, w14, w9, cc  // cc = lo, ul, last
    1dbc:	cmp	w10, w15
    1dc0:	csel	w10, w15, w10, cc  // cc = lo, ul, last
    1dc4:	cmp	w8, w14
    1dc8:	csel	w8, w14, w8, gt
    1dcc:	cmp	w11, w15
    1dd0:	csel	w11, w15, w11, gt
    1dd4:	subs	x12, x12, #0x2
    1dd8:	b.ne	1dac <sendMTFValues+0x1184>  // b.any
    1ddc:	cmp	w9, w10
    1de0:	csel	w21, w9, w10, hi  // hi = pmore
    1de4:	cmp	w8, w11
    1de8:	csel	w22, w8, w11, lt  // lt = tstop
    1dec:	cmp	x27, x26
    1df0:	mov	x8, x26
    1df4:	b.eq	1e18 <sendMTFValues+0x11f0>  // b.none
    1df8:	ldrb	w9, [x25, x8]
    1dfc:	add	x8, x8, #0x1
    1e00:	cmp	w21, w9
    1e04:	csel	w21, w9, w21, cc  // cc = lo, ul, last
    1e08:	cmp	w22, w9
    1e0c:	csel	w22, w9, w22, gt
    1e10:	cmp	x8, x19
    1e14:	b.lt	1df8 <sendMTFValues+0x11d0>  // b.tstop
    1e18:	cmp	w21, #0x12
    1e1c:	b.lt	1e28 <sendMTFValues+0x1200>  // b.tstop
    1e20:	mov	w0, #0xbbc                 	// #3004
    1e24:	bl	0 <BZ2_bz__AssertH__fail>
    1e28:	cmp	w22, #0x0
    1e2c:	b.gt	1d2c <sendMTFValues+0x1104>
    1e30:	mov	w0, #0xbbd                 	// #3005
    1e34:	bl	0 <BZ2_bz__AssertH__fail>
    1e38:	b	1d2c <sendMTFValues+0x1104>
    1e3c:	mov	x8, xzr
    1e40:	add	x9, x28, #0x8f
    1e44:	sub	x10, x29, #0x3c
    1e48:	strb	wzr, [x10, x8]
    1e4c:	ldurb	w11, [x9, #-15]
    1e50:	cmp	w11, #0x0
    1e54:	cset	w12, ne  // ne = any
    1e58:	strb	w12, [x10, x8]
    1e5c:	ldurb	w12, [x9, #-14]
    1e60:	orr	w11, w11, w12
    1e64:	tst	w11, #0xff
    1e68:	cset	w12, ne  // ne = any
    1e6c:	strb	w12, [x10, x8]
    1e70:	ldurb	w12, [x9, #-13]
    1e74:	orr	w11, w11, w12
    1e78:	tst	w11, #0xff
    1e7c:	cset	w12, ne  // ne = any
    1e80:	strb	w12, [x10, x8]
    1e84:	ldurb	w12, [x9, #-12]
    1e88:	orr	w11, w11, w12
    1e8c:	tst	w11, #0xff
    1e90:	cset	w12, ne  // ne = any
    1e94:	strb	w12, [x10, x8]
    1e98:	ldurb	w12, [x9, #-11]
    1e9c:	orr	w11, w11, w12
    1ea0:	tst	w11, #0xff
    1ea4:	cset	w12, ne  // ne = any
    1ea8:	strb	w12, [x10, x8]
    1eac:	ldurb	w12, [x9, #-10]
    1eb0:	orr	w11, w11, w12
    1eb4:	tst	w11, #0xff
    1eb8:	cset	w12, ne  // ne = any
    1ebc:	strb	w12, [x10, x8]
    1ec0:	ldurb	w12, [x9, #-9]
    1ec4:	orr	w11, w11, w12
    1ec8:	tst	w11, #0xff
    1ecc:	cset	w12, ne  // ne = any
    1ed0:	strb	w12, [x10, x8]
    1ed4:	ldurb	w12, [x9, #-8]
    1ed8:	orr	w11, w11, w12
    1edc:	tst	w11, #0xff
    1ee0:	cset	w12, ne  // ne = any
    1ee4:	strb	w12, [x10, x8]
    1ee8:	ldurb	w12, [x9, #-7]
    1eec:	orr	w11, w11, w12
    1ef0:	tst	w11, #0xff
    1ef4:	cset	w12, ne  // ne = any
    1ef8:	strb	w12, [x10, x8]
    1efc:	ldurb	w12, [x9, #-6]
    1f00:	orr	w11, w11, w12
    1f04:	tst	w11, #0xff
    1f08:	cset	w12, ne  // ne = any
    1f0c:	strb	w12, [x10, x8]
    1f10:	ldurb	w12, [x9, #-5]
    1f14:	orr	w11, w11, w12
    1f18:	tst	w11, #0xff
    1f1c:	cset	w12, ne  // ne = any
    1f20:	strb	w12, [x10, x8]
    1f24:	ldurb	w12, [x9, #-4]
    1f28:	orr	w11, w11, w12
    1f2c:	tst	w11, #0xff
    1f30:	cset	w12, ne  // ne = any
    1f34:	strb	w12, [x10, x8]
    1f38:	ldurb	w12, [x9, #-3]
    1f3c:	orr	w11, w11, w12
    1f40:	tst	w11, #0xff
    1f44:	cset	w12, ne  // ne = any
    1f48:	strb	w12, [x10, x8]
    1f4c:	ldurb	w12, [x9, #-2]
    1f50:	orr	w11, w11, w12
    1f54:	tst	w11, #0xff
    1f58:	cset	w12, ne  // ne = any
    1f5c:	strb	w12, [x10, x8]
    1f60:	ldurb	w12, [x9, #-1]
    1f64:	orr	w11, w11, w12
    1f68:	tst	w11, #0xff
    1f6c:	cset	w12, ne  // ne = any
    1f70:	strb	w12, [x10, x8]
    1f74:	ldrb	w12, [x9], #16
    1f78:	orr	w11, w11, w12
    1f7c:	tst	w11, #0xff
    1f80:	cset	w11, ne  // ne = any
    1f84:	strb	w11, [x10, x8]
    1f88:	add	x8, x8, #0x1
    1f8c:	cmp	x8, #0x10
    1f90:	b.ne	1e48 <sendMTFValues+0x1220>  // b.any
    1f94:	mov	x20, x28
    1f98:	ldr	w8, [x20, #116]!
    1f9c:	mov	x12, xzr
    1fa0:	sub	x13, x29, #0x3c
    1fa4:	mov	w14, #0x80000000            	// #-2147483648
    1fa8:	ldr	w10, [x20, #528]
    1fac:	ldr	w11, [x20, #524]
    1fb0:	add	x21, x20, #0x210
    1fb4:	add	x22, x20, #0x20c
    1fb8:	sub	x24, x20, #0x24
    1fbc:	mov	w9, w8
    1fc0:	b	1fe4 <sendMTFValues+0x13bc>
    1fc4:	lsr	w15, w14, w10
    1fc8:	orr	w11, w15, w11
    1fcc:	add	x12, x12, #0x1
    1fd0:	add	w10, w10, #0x1
    1fd4:	cmp	x12, #0x10
    1fd8:	str	w11, [x22]
    1fdc:	str	w10, [x21]
    1fe0:	b.eq	2074 <sendMTFValues+0x144c>  // b.none
    1fe4:	ldrb	w15, [x13, x12]
    1fe8:	cbz	w15, 2030 <sendMTFValues+0x1408>
    1fec:	cmp	w10, #0x8
    1ff0:	b.lt	1fc4 <sendMTFValues+0x139c>  // b.tstop
    1ff4:	ldr	x10, [x24]
    1ff8:	lsr	w11, w11, #24
    1ffc:	strb	w11, [x10, w9, sxtw]
    2000:	ldr	w9, [x20]
    2004:	add	w9, w9, #0x1
    2008:	str	w9, [x20]
    200c:	ldr	w10, [x22]
    2010:	lsl	w11, w10, #8
    2014:	str	w11, [x22]
    2018:	ldr	w15, [x21]
    201c:	sub	w10, w15, #0x8
    2020:	cmp	w15, #0xf
    2024:	str	w10, [x21]
    2028:	b.gt	1ff4 <sendMTFValues+0x13cc>
    202c:	b	1fc4 <sendMTFValues+0x139c>
    2030:	cmp	w10, #0x8
    2034:	b.lt	1fcc <sendMTFValues+0x13a4>  // b.tstop
    2038:	ldr	x10, [x24]
    203c:	lsr	w11, w11, #24
    2040:	strb	w11, [x10, w9, sxtw]
    2044:	ldr	w9, [x20]
    2048:	add	w9, w9, #0x1
    204c:	str	w9, [x20]
    2050:	ldr	w10, [x22]
    2054:	lsl	w11, w10, #8
    2058:	str	w11, [x22]
    205c:	ldr	w15, [x21]
    2060:	sub	w10, w15, #0x8
    2064:	cmp	w15, #0xf
    2068:	str	w10, [x21]
    206c:	b.gt	2038 <sendMTFValues+0x1410>
    2070:	b	1fcc <sendMTFValues+0x13a4>
    2074:	mov	x12, xzr
    2078:	sub	x13, x29, #0x3c
    207c:	mov	w14, #0x80000000            	// #-2147483648
    2080:	b	2090 <sendMTFValues+0x1468>
    2084:	add	x12, x12, #0x1
    2088:	cmp	x12, #0x10
    208c:	b.eq	215c <sendMTFValues+0x1534>  // b.none
    2090:	ldrb	w15, [x13, x12]
    2094:	cbz	w15, 2084 <sendMTFValues+0x145c>
    2098:	mov	x15, xzr
    209c:	lsl	x16, x12, #4
    20a0:	b	20c4 <sendMTFValues+0x149c>
    20a4:	lsr	w17, w14, w10
    20a8:	orr	w11, w17, w11
    20ac:	add	x15, x15, #0x1
    20b0:	add	w10, w10, #0x1
    20b4:	cmp	x15, #0x10
    20b8:	str	w11, [x22]
    20bc:	str	w10, [x21]
    20c0:	b.eq	2084 <sendMTFValues+0x145c>  // b.none
    20c4:	add	x17, x15, x16
    20c8:	add	x17, x28, x17
    20cc:	ldrb	w17, [x17, #128]
    20d0:	cbz	w17, 2118 <sendMTFValues+0x14f0>
    20d4:	cmp	w10, #0x8
    20d8:	b.lt	20a4 <sendMTFValues+0x147c>  // b.tstop
    20dc:	ldr	x10, [x24]
    20e0:	lsr	w11, w11, #24
    20e4:	strb	w11, [x10, w9, sxtw]
    20e8:	ldr	w9, [x20]
    20ec:	add	w9, w9, #0x1
    20f0:	str	w9, [x20]
    20f4:	ldr	w10, [x22]
    20f8:	lsl	w11, w10, #8
    20fc:	str	w11, [x22]
    2100:	ldr	w17, [x21]
    2104:	sub	w10, w17, #0x8
    2108:	cmp	w17, #0xf
    210c:	str	w10, [x21]
    2110:	b.gt	20dc <sendMTFValues+0x14b4>
    2114:	b	20a4 <sendMTFValues+0x147c>
    2118:	cmp	w10, #0x8
    211c:	b.lt	20ac <sendMTFValues+0x1484>  // b.tstop
    2120:	ldr	x10, [x24]
    2124:	lsr	w11, w11, #24
    2128:	strb	w11, [x10, w9, sxtw]
    212c:	ldr	w9, [x20]
    2130:	add	w9, w9, #0x1
    2134:	str	w9, [x20]
    2138:	ldr	w10, [x22]
    213c:	lsl	w11, w10, #8
    2140:	str	w11, [x22]
    2144:	ldr	w17, [x21]
    2148:	sub	w10, w17, #0x8
    214c:	cmp	w17, #0xf
    2150:	str	w10, [x21]
    2154:	b.gt	2120 <sendMTFValues+0x14f8>
    2158:	b	20ac <sendMTFValues+0x1484>
    215c:	ldr	w11, [x28, #656]
    2160:	cmp	w11, #0x3
    2164:	b.ge	3ee4 <sendMTFValues+0x32bc>  // b.tcont
    2168:	ldr	w11, [x22]
    216c:	mov	w8, w9
    2170:	cmp	w10, #0x8
    2174:	b.lt	21b0 <sendMTFValues+0x1588>  // b.tstop
    2178:	ldr	x10, [x24]
    217c:	lsr	w11, w11, #24
    2180:	strb	w11, [x10, w8, sxtw]
    2184:	ldr	w8, [x20]
    2188:	add	w8, w8, #0x1
    218c:	str	w8, [x20]
    2190:	ldr	w10, [x22]
    2194:	lsl	w11, w10, #8
    2198:	str	w11, [x22]
    219c:	ldr	w12, [x21]
    21a0:	sub	w10, w12, #0x8
    21a4:	cmp	w12, #0xf
    21a8:	str	w10, [x21]
    21ac:	b.gt	2178 <sendMTFValues+0x1550>
    21b0:	mov	w13, #0x1d                  	// #29
    21b4:	add	w12, w10, #0x3
    21b8:	cmp	w10, #0x5
    21bc:	sub	w10, w13, w10
    21c0:	lsl	w10, w23, w10
    21c4:	orr	w10, w10, w11
    21c8:	str	w10, [x22]
    21cc:	str	w12, [x21]
    21d0:	b.lt	220c <sendMTFValues+0x15e4>  // b.tstop
    21d4:	ldr	x11, [x24]
    21d8:	lsr	w10, w10, #24
    21dc:	strb	w10, [x11, w8, sxtw]
    21e0:	ldr	w8, [x20]
    21e4:	add	w8, w8, #0x1
    21e8:	str	w8, [x20]
    21ec:	ldr	w10, [x22]
    21f0:	lsl	w10, w10, #8
    21f4:	str	w10, [x22]
    21f8:	ldr	w11, [x21]
    21fc:	sub	w12, w11, #0x8
    2200:	cmp	w11, #0xf
    2204:	str	w12, [x21]
    2208:	b.gt	21d4 <sendMTFValues+0x15ac>
    220c:	ldr	x14, [x29, #8]
    2210:	mov	w13, #0x11                  	// #17
    2214:	add	w11, w12, #0xf
    2218:	sub	w12, w13, w12
    221c:	lsl	w12, w14, w12
    2220:	cmp	w14, #0x1
    2224:	orr	w10, w12, w10
    2228:	str	w10, [x22]
    222c:	str	w11, [x21]
    2230:	b.lt	2334 <sendMTFValues+0x170c>  // b.tstop
    2234:	mov	x12, xzr
    2238:	mov	w13, w14
    223c:	mov	w14, #0x4cfa                	// #19706
    2240:	mov	w15, #0x80000000            	// #-2147483648
    2244:	b	2260 <sendMTFValues+0x1638>
    2248:	add	x12, x12, #0x1
    224c:	add	w11, w18, #0x1
    2250:	cmp	x12, x13
    2254:	str	w10, [x22]
    2258:	str	w11, [x21]
    225c:	b.eq	2334 <sendMTFValues+0x170c>  // b.none
    2260:	add	x16, x28, x12
    2264:	add	x16, x16, x14
    2268:	ldrb	w17, [x16]
    226c:	cmp	w11, #0x7
    2270:	cset	w0, gt
    2274:	cbz	w17, 22f0 <sendMTFValues+0x16c8>
    2278:	mov	w17, wzr
    227c:	b	22b0 <sendMTFValues+0x1688>
    2280:	lsr	w0, w15, w11
    2284:	add	w18, w11, #0x1
    2288:	orr	w10, w0, w10
    228c:	str	w10, [x22]
    2290:	str	w18, [x21]
    2294:	ldrb	w1, [x16]
    2298:	add	w17, w17, #0x1
    229c:	cmp	w11, #0x6
    22a0:	cset	w0, gt
    22a4:	cmp	w17, w1
    22a8:	mov	w11, w18
    22ac:	b.cs	22f4 <sendMTFValues+0x16cc>  // b.hs, b.nlast
    22b0:	tbz	w0, #0, 2280 <sendMTFValues+0x1658>
    22b4:	ldr	x11, [x24]
    22b8:	lsr	w10, w10, #24
    22bc:	strb	w10, [x11, w8, sxtw]
    22c0:	ldr	w8, [x20]
    22c4:	add	w8, w8, #0x1
    22c8:	str	w8, [x20]
    22cc:	ldr	w10, [x22]
    22d0:	lsl	w10, w10, #8
    22d4:	str	w10, [x22]
    22d8:	ldr	w18, [x21]
    22dc:	sub	w11, w18, #0x8
    22e0:	cmp	w18, #0xf
    22e4:	str	w11, [x21]
    22e8:	b.gt	22b4 <sendMTFValues+0x168c>
    22ec:	b	2280 <sendMTFValues+0x1658>
    22f0:	mov	w18, w11
    22f4:	cbz	w0, 2248 <sendMTFValues+0x1620>
    22f8:	ldr	x11, [x24]
    22fc:	lsr	w10, w10, #24
    2300:	strb	w10, [x11, w8, sxtw]
    2304:	ldr	w8, [x20]
    2308:	add	w8, w8, #0x1
    230c:	str	w8, [x20]
    2310:	ldr	w10, [x22]
    2314:	lsl	w10, w10, #8
    2318:	str	w10, [x22]
    231c:	ldr	w11, [x21]
    2320:	sub	w18, w11, #0x8
    2324:	cmp	w11, #0xf
    2328:	str	w18, [x21]
    232c:	b.gt	22f8 <sendMTFValues+0x16d0>
    2330:	b	2248 <sendMTFValues+0x1620>
    2334:	ldr	w12, [x28, #656]
    2338:	cmp	w12, #0x3
    233c:	b.ge	3f0c <sendMTFValues+0x32e4>  // b.tcont
    2340:	mov	x9, xzr
    2344:	mov	w12, #0x102                 	// #258
    2348:	mov	w13, #0x934c                	// #37708
    234c:	mov	w14, #0x1b                  	// #27
    2350:	mov	w15, #0x1e                  	// #30
    2354:	mov	w16, #0x2                   	// #2
    2358:	mov	w17, #0x3                   	// #3
    235c:	mov	w26, w8
    2360:	b	2370 <sendMTFValues+0x1748>
    2364:	add	x9, x9, #0x1
    2368:	cmp	x9, x23
    236c:	b.eq	253c <sendMTFValues+0x1914>  // b.none
    2370:	madd	x18, x9, x12, x28
    2374:	ldrb	w18, [x18, x13]
    2378:	cmp	w11, #0x8
    237c:	b.lt	23b8 <sendMTFValues+0x1790>  // b.tstop
    2380:	ldr	x11, [x24]
    2384:	lsr	w10, w10, #24
    2388:	strb	w10, [x11, w26, sxtw]
    238c:	ldr	w10, [x20]
    2390:	add	w26, w10, #0x1
    2394:	str	w26, [x20]
    2398:	ldr	w10, [x22]
    239c:	lsl	w10, w10, #8
    23a0:	str	w10, [x22]
    23a4:	ldr	w0, [x21]
    23a8:	sub	w11, w0, #0x8
    23ac:	cmp	w0, #0xf
    23b0:	str	w11, [x21]
    23b4:	b.gt	2380 <sendMTFValues+0x1758>
    23b8:	sub	w0, w14, w11
    23bc:	lsl	w0, w18, w0
    23c0:	add	w11, w11, #0x5
    23c4:	cmn	w5, #0x1
    23c8:	orr	w10, w0, w10
    23cc:	str	w10, [x22]
    23d0:	str	w11, [x21]
    23d4:	b.lt	2364 <sendMTFValues+0x173c>  // b.tstop
    23d8:	mov	x0, xzr
    23dc:	b	23f8 <sendMTFValues+0x17d0>
    23e0:	add	x0, x0, #0x1
    23e4:	add	w11, w11, #0x1
    23e8:	cmp	x0, x19
    23ec:	str	w10, [x22]
    23f0:	str	w11, [x21]
    23f4:	b.ge	2364 <sendMTFValues+0x173c>  // b.tcont
    23f8:	madd	x1, x9, x12, x28
    23fc:	add	x1, x1, x0
    2400:	add	x1, x1, x13
    2404:	ldrb	w2, [x1]
    2408:	b	242c <sendMTFValues+0x1804>
    240c:	sub	w2, w15, w11
    2410:	lsl	w2, w16, w2
    2414:	add	w11, w11, #0x2
    2418:	orr	w10, w2, w10
    241c:	str	w10, [x22]
    2420:	str	w11, [x21]
    2424:	ldrb	w2, [x1]
    2428:	add	w18, w18, #0x1
    242c:	cmp	w18, w2
    2430:	b.ge	2478 <sendMTFValues+0x1850>  // b.tcont
    2434:	cmp	w11, #0x8
    2438:	b.lt	240c <sendMTFValues+0x17e4>  // b.tstop
    243c:	ldr	x11, [x24]
    2440:	lsr	w10, w10, #24
    2444:	strb	w10, [x11, w26, sxtw]
    2448:	ldr	w10, [x20]
    244c:	add	w26, w10, #0x1
    2450:	str	w26, [x20]
    2454:	ldr	w10, [x22]
    2458:	lsl	w10, w10, #8
    245c:	str	w10, [x22]
    2460:	ldr	w2, [x21]
    2464:	sub	w11, w2, #0x8
    2468:	cmp	w2, #0xf
    246c:	str	w11, [x21]
    2470:	b.gt	243c <sendMTFValues+0x1814>
    2474:	b	240c <sendMTFValues+0x17e4>
    2478:	cmp	w11, #0x7
    247c:	cset	w3, gt
    2480:	cmp	w18, w2
    2484:	b.gt	24fc <sendMTFValues+0x18d4>
    2488:	cbz	w3, 23e0 <sendMTFValues+0x17b8>
    248c:	ldr	x11, [x24]
    2490:	lsr	w10, w10, #24
    2494:	strb	w10, [x11, w26, sxtw]
    2498:	ldr	w10, [x20]
    249c:	add	w26, w10, #0x1
    24a0:	str	w26, [x20]
    24a4:	ldr	w10, [x22]
    24a8:	lsl	w10, w10, #8
    24ac:	str	w10, [x22]
    24b0:	ldr	w1, [x21]
    24b4:	sub	w11, w1, #0x8
    24b8:	cmp	w1, #0xf
    24bc:	str	w11, [x21]
    24c0:	b.gt	248c <sendMTFValues+0x1864>
    24c4:	b	23e0 <sendMTFValues+0x17b8>
    24c8:	sub	w2, w15, w11
    24cc:	lsl	w2, w17, w2
    24d0:	add	w4, w11, #0x2
    24d4:	orr	w10, w2, w10
    24d8:	str	w10, [x22]
    24dc:	str	w4, [x21]
    24e0:	ldrb	w2, [x1]
    24e4:	cmp	w11, #0x5
    24e8:	sub	w18, w18, #0x1
    24ec:	cset	w3, gt
    24f0:	cmp	w18, w2
    24f4:	mov	w11, w4
    24f8:	b.le	2488 <sendMTFValues+0x1860>
    24fc:	tbz	w3, #0, 24c8 <sendMTFValues+0x18a0>
    2500:	ldr	x11, [x24]
    2504:	lsr	w10, w10, #24
    2508:	strb	w10, [x11, w26, sxtw]
    250c:	ldr	w10, [x20]
    2510:	add	w26, w10, #0x1
    2514:	str	w26, [x20]
    2518:	ldr	w10, [x22]
    251c:	lsl	w10, w10, #8
    2520:	str	w10, [x22]
    2524:	ldr	w2, [x21]
    2528:	sub	w11, w2, #0x8
    252c:	cmp	w2, #0xf
    2530:	str	w11, [x21]
    2534:	b.gt	2500 <sendMTFValues+0x18d8>
    2538:	b	24c8 <sendMTFValues+0x18a0>
    253c:	ldr	w9, [x28, #656]
    2540:	cmp	w9, #0x3
    2544:	b.ge	3f38 <sendMTFValues+0x3310>  // b.tcont
    2548:	ldr	w8, [x28, #668]
    254c:	ldur	x16, [x29, #-96]
    2550:	cmp	w8, #0x1
    2554:	b.lt	3e7c <sendMTFValues+0x3254>  // b.tstop
    2558:	mov	x3, xzr
    255c:	mov	w9, wzr
    2560:	mov	w17, #0x102                 	// #258
    2564:	mov	w18, #0x934c                	// #37708
    2568:	mov	w0, #0x408                 	// #1032
    256c:	mov	w1, #0x9958                	// #39256
    2570:	b	25a0 <sendMTFValues+0x1978>
    2574:	add	w10, w11, w10
    2578:	neg	w11, w10
    257c:	lsl	w8, w8, w11
    2580:	orr	w8, w8, w9
    2584:	str	w8, [x22]
    2588:	str	w10, [x21]
    258c:	ldr	w8, [x28, #668]
    2590:	add	w9, w25, #0x1
    2594:	add	x3, x3, #0x1
    2598:	cmp	w9, w8
    259c:	b.ge	3e80 <sendMTFValues+0x3258>  // b.tcont
    25a0:	add	x19, x28, x3
    25a4:	sxtw	x27, w9
    25a8:	ldrb	w9, [x19, #1704]
    25ac:	add	x4, x27, #0x31
    25b0:	sub	w10, w8, #0x1
    25b4:	cmp	w4, w8
    25b8:	csel	w25, w4, w10, lt  // lt = tstop
    25bc:	cmp	w23, w9
    25c0:	b.hi	25f8 <sendMTFValues+0x19d0>  // b.pmore
    25c4:	mov	w0, #0xbbe                 	// #3006
    25c8:	stur	x3, [x29, #-80]
    25cc:	str	x27, [sp, #96]
    25d0:	mov	x27, x4
    25d4:	bl	0 <BZ2_bz__AssertH__fail>
    25d8:	mov	x4, x27
    25dc:	ldr	x27, [sp, #96]
    25e0:	ldur	x3, [x29, #-80]
    25e4:	ldur	x16, [x29, #-96]
    25e8:	mov	w1, #0x9958                	// #39256
    25ec:	mov	w0, #0x408                 	// #1032
    25f0:	mov	w18, #0x934c                	// #37708
    25f4:	mov	w17, #0x102                 	// #258
    25f8:	cmp	w23, #0x6
    25fc:	add	x8, x19, #0x6a8
    2600:	b.ne	3dd8 <sendMTFValues+0x31b0>  // b.any
    2604:	sub	w9, w25, w27
    2608:	cmp	w9, #0x31
    260c:	b.ne	3dd8 <sendMTFValues+0x31b0>  // b.any
    2610:	ldrb	w8, [x8]
    2614:	ldrh	w9, [x16, x27, lsl #1]
    2618:	ldr	w12, [x28, #644]
    261c:	madd	x10, x8, x17, x28
    2620:	madd	x11, x8, x0, x28
    2624:	add	x10, x10, x9
    2628:	add	x11, x11, x9, lsl #2
    262c:	ldrb	w9, [x10, x18]
    2630:	ldr	w10, [x11, x1]
    2634:	ldr	w11, [x28, #640]
    2638:	cmp	w12, #0x8
    263c:	b.lt	267c <sendMTFValues+0x1a54>  // b.tstop
    2640:	ldr	w13, [x20]
    2644:	ldr	x12, [x24]
    2648:	lsr	w11, w11, #24
    264c:	strb	w11, [x12, w13, sxtw]
    2650:	ldr	w11, [x20]
    2654:	add	w13, w11, #0x1
    2658:	str	w13, [x20]
    265c:	ldr	w11, [x22]
    2660:	lsl	w11, w11, #8
    2664:	str	w11, [x22]
    2668:	ldr	w14, [x21]
    266c:	sub	w12, w14, #0x8
    2670:	cmp	w14, #0xf
    2674:	str	w12, [x21]
    2678:	b.gt	2644 <sendMTFValues+0x1a1c>
    267c:	add	w13, w12, w9
    2680:	neg	w12, w13
    2684:	lsl	w10, w10, w12
    2688:	orr	w10, w10, w11
    268c:	add	x9, x16, x27, lsl #1
    2690:	str	w13, [x28, #644]
    2694:	str	w10, [x28, #640]
    2698:	ldrh	w11, [x9, #2]
    269c:	madd	x12, x8, x17, x28
    26a0:	madd	x14, x8, x0, x28
    26a4:	cmp	w13, #0x8
    26a8:	add	x12, x12, x11
    26ac:	add	x11, x14, x11, lsl #2
    26b0:	ldrb	w12, [x12, x18]
    26b4:	ldr	w11, [x11, x1]
    26b8:	b.lt	26f8 <sendMTFValues+0x1ad0>  // b.tstop
    26bc:	ldr	w14, [x20]
    26c0:	ldr	x13, [x24]
    26c4:	lsr	w10, w10, #24
    26c8:	strb	w10, [x13, w14, sxtw]
    26cc:	ldr	w10, [x20]
    26d0:	add	w14, w10, #0x1
    26d4:	str	w14, [x20]
    26d8:	ldr	w10, [x22]
    26dc:	lsl	w10, w10, #8
    26e0:	str	w10, [x22]
    26e4:	ldr	w15, [x21]
    26e8:	sub	w13, w15, #0x8
    26ec:	cmp	w15, #0xf
    26f0:	str	w13, [x21]
    26f4:	b.gt	26c0 <sendMTFValues+0x1a98>
    26f8:	add	w12, w13, w12
    26fc:	neg	w13, w12
    2700:	lsl	w11, w11, w13
    2704:	orr	w10, w11, w10
    2708:	str	w12, [x28, #644]
    270c:	str	w10, [x28, #640]
    2710:	ldrh	w9, [x9, #4]
    2714:	madd	x11, x8, x17, x28
    2718:	madd	x13, x8, x0, x28
    271c:	cmp	w12, #0x8
    2720:	add	x11, x11, x9
    2724:	add	x13, x13, x9, lsl #2
    2728:	ldrb	w9, [x11, x18]
    272c:	ldr	w11, [x13, x1]
    2730:	b.lt	2770 <sendMTFValues+0x1b48>  // b.tstop
    2734:	ldr	w13, [x20]
    2738:	ldr	x12, [x24]
    273c:	lsr	w10, w10, #24
    2740:	strb	w10, [x12, w13, sxtw]
    2744:	ldr	w10, [x20]
    2748:	add	w13, w10, #0x1
    274c:	str	w13, [x20]
    2750:	ldr	w10, [x22]
    2754:	lsl	w10, w10, #8
    2758:	str	w10, [x22]
    275c:	ldr	w14, [x21]
    2760:	sub	w12, w14, #0x8
    2764:	cmp	w14, #0xf
    2768:	str	w12, [x21]
    276c:	b.gt	2738 <sendMTFValues+0x1b10>
    2770:	add	w13, w12, w9
    2774:	neg	w12, w13
    2778:	lsl	w11, w11, w12
    277c:	orr	w10, w11, w10
    2780:	add	x9, x16, x27, lsl #1
    2784:	str	w13, [x28, #644]
    2788:	str	w10, [x28, #640]
    278c:	ldrh	w11, [x9, #6]
    2790:	madd	x12, x8, x17, x28
    2794:	madd	x14, x8, x0, x28
    2798:	cmp	w13, #0x8
    279c:	add	x12, x12, x11
    27a0:	add	x11, x14, x11, lsl #2
    27a4:	ldrb	w12, [x12, x18]
    27a8:	ldr	w11, [x11, x1]
    27ac:	b.lt	27ec <sendMTFValues+0x1bc4>  // b.tstop
    27b0:	ldr	w14, [x20]
    27b4:	ldr	x13, [x24]
    27b8:	lsr	w10, w10, #24
    27bc:	strb	w10, [x13, w14, sxtw]
    27c0:	ldr	w10, [x20]
    27c4:	add	w14, w10, #0x1
    27c8:	str	w14, [x20]
    27cc:	ldr	w10, [x22]
    27d0:	lsl	w10, w10, #8
    27d4:	str	w10, [x22]
    27d8:	ldr	w15, [x21]
    27dc:	sub	w13, w15, #0x8
    27e0:	cmp	w15, #0xf
    27e4:	str	w13, [x21]
    27e8:	b.gt	27b4 <sendMTFValues+0x1b8c>
    27ec:	add	w12, w13, w12
    27f0:	neg	w13, w12
    27f4:	lsl	w11, w11, w13
    27f8:	orr	w10, w11, w10
    27fc:	str	w12, [x28, #644]
    2800:	str	w10, [x28, #640]
    2804:	ldrh	w9, [x9, #8]
    2808:	madd	x11, x8, x17, x28
    280c:	madd	x13, x8, x0, x28
    2810:	cmp	w12, #0x8
    2814:	add	x11, x11, x9
    2818:	add	x13, x13, x9, lsl #2
    281c:	ldrb	w9, [x11, x18]
    2820:	ldr	w11, [x13, x1]
    2824:	b.lt	2864 <sendMTFValues+0x1c3c>  // b.tstop
    2828:	ldr	w13, [x20]
    282c:	ldr	x12, [x24]
    2830:	lsr	w10, w10, #24
    2834:	strb	w10, [x12, w13, sxtw]
    2838:	ldr	w10, [x20]
    283c:	add	w13, w10, #0x1
    2840:	str	w13, [x20]
    2844:	ldr	w10, [x22]
    2848:	lsl	w10, w10, #8
    284c:	str	w10, [x22]
    2850:	ldr	w14, [x21]
    2854:	sub	w12, w14, #0x8
    2858:	cmp	w14, #0xf
    285c:	str	w12, [x21]
    2860:	b.gt	282c <sendMTFValues+0x1c04>
    2864:	add	w13, w12, w9
    2868:	neg	w12, w13
    286c:	lsl	w11, w11, w12
    2870:	orr	w10, w11, w10
    2874:	add	x9, x16, x27, lsl #1
    2878:	str	w13, [x28, #644]
    287c:	str	w10, [x28, #640]
    2880:	ldrh	w11, [x9, #10]
    2884:	madd	x12, x8, x17, x28
    2888:	madd	x14, x8, x0, x28
    288c:	cmp	w13, #0x8
    2890:	add	x12, x12, x11
    2894:	add	x11, x14, x11, lsl #2
    2898:	ldrb	w12, [x12, x18]
    289c:	ldr	w11, [x11, x1]
    28a0:	b.lt	28e0 <sendMTFValues+0x1cb8>  // b.tstop
    28a4:	ldr	w14, [x20]
    28a8:	ldr	x13, [x24]
    28ac:	lsr	w10, w10, #24
    28b0:	strb	w10, [x13, w14, sxtw]
    28b4:	ldr	w10, [x20]
    28b8:	add	w14, w10, #0x1
    28bc:	str	w14, [x20]
    28c0:	ldr	w10, [x22]
    28c4:	lsl	w10, w10, #8
    28c8:	str	w10, [x22]
    28cc:	ldr	w15, [x21]
    28d0:	sub	w13, w15, #0x8
    28d4:	cmp	w15, #0xf
    28d8:	str	w13, [x21]
    28dc:	b.gt	28a8 <sendMTFValues+0x1c80>
    28e0:	add	w12, w13, w12
    28e4:	neg	w13, w12
    28e8:	lsl	w11, w11, w13
    28ec:	orr	w10, w11, w10
    28f0:	str	w12, [x28, #644]
    28f4:	str	w10, [x28, #640]
    28f8:	ldrh	w9, [x9, #12]
    28fc:	madd	x11, x8, x17, x28
    2900:	madd	x13, x8, x0, x28
    2904:	cmp	w12, #0x8
    2908:	add	x11, x11, x9
    290c:	add	x13, x13, x9, lsl #2
    2910:	ldrb	w9, [x11, x18]
    2914:	ldr	w11, [x13, x1]
    2918:	b.lt	2958 <sendMTFValues+0x1d30>  // b.tstop
    291c:	ldr	w13, [x20]
    2920:	ldr	x12, [x24]
    2924:	lsr	w10, w10, #24
    2928:	strb	w10, [x12, w13, sxtw]
    292c:	ldr	w10, [x20]
    2930:	add	w13, w10, #0x1
    2934:	str	w13, [x20]
    2938:	ldr	w10, [x22]
    293c:	lsl	w10, w10, #8
    2940:	str	w10, [x22]
    2944:	ldr	w14, [x21]
    2948:	sub	w12, w14, #0x8
    294c:	cmp	w14, #0xf
    2950:	str	w12, [x21]
    2954:	b.gt	2920 <sendMTFValues+0x1cf8>
    2958:	add	w13, w12, w9
    295c:	neg	w12, w13
    2960:	lsl	w11, w11, w12
    2964:	orr	w10, w11, w10
    2968:	add	x9, x16, x27, lsl #1
    296c:	str	w13, [x28, #644]
    2970:	str	w10, [x28, #640]
    2974:	ldrh	w11, [x9, #14]
    2978:	madd	x12, x8, x17, x28
    297c:	madd	x14, x8, x0, x28
    2980:	cmp	w13, #0x8
    2984:	add	x12, x12, x11
    2988:	add	x11, x14, x11, lsl #2
    298c:	ldrb	w12, [x12, x18]
    2990:	ldr	w11, [x11, x1]
    2994:	b.lt	29d4 <sendMTFValues+0x1dac>  // b.tstop
    2998:	ldr	w14, [x20]
    299c:	ldr	x13, [x24]
    29a0:	lsr	w10, w10, #24
    29a4:	strb	w10, [x13, w14, sxtw]
    29a8:	ldr	w10, [x20]
    29ac:	add	w14, w10, #0x1
    29b0:	str	w14, [x20]
    29b4:	ldr	w10, [x22]
    29b8:	lsl	w10, w10, #8
    29bc:	str	w10, [x22]
    29c0:	ldr	w15, [x21]
    29c4:	sub	w13, w15, #0x8
    29c8:	cmp	w15, #0xf
    29cc:	str	w13, [x21]
    29d0:	b.gt	299c <sendMTFValues+0x1d74>
    29d4:	add	w12, w13, w12
    29d8:	neg	w13, w12
    29dc:	lsl	w11, w11, w13
    29e0:	orr	w10, w11, w10
    29e4:	str	w12, [x28, #644]
    29e8:	str	w10, [x28, #640]
    29ec:	ldrh	w9, [x9, #16]
    29f0:	madd	x11, x8, x17, x28
    29f4:	madd	x13, x8, x0, x28
    29f8:	cmp	w12, #0x8
    29fc:	add	x11, x11, x9
    2a00:	add	x13, x13, x9, lsl #2
    2a04:	ldrb	w9, [x11, x18]
    2a08:	ldr	w11, [x13, x1]
    2a0c:	b.lt	2a4c <sendMTFValues+0x1e24>  // b.tstop
    2a10:	ldr	w13, [x20]
    2a14:	ldr	x12, [x24]
    2a18:	lsr	w10, w10, #24
    2a1c:	strb	w10, [x12, w13, sxtw]
    2a20:	ldr	w10, [x20]
    2a24:	add	w13, w10, #0x1
    2a28:	str	w13, [x20]
    2a2c:	ldr	w10, [x22]
    2a30:	lsl	w10, w10, #8
    2a34:	str	w10, [x22]
    2a38:	ldr	w14, [x21]
    2a3c:	sub	w12, w14, #0x8
    2a40:	cmp	w14, #0xf
    2a44:	str	w12, [x21]
    2a48:	b.gt	2a14 <sendMTFValues+0x1dec>
    2a4c:	add	w13, w12, w9
    2a50:	neg	w12, w13
    2a54:	lsl	w11, w11, w12
    2a58:	orr	w10, w11, w10
    2a5c:	add	x9, x16, x27, lsl #1
    2a60:	str	w13, [x28, #644]
    2a64:	str	w10, [x28, #640]
    2a68:	ldrh	w11, [x9, #18]
    2a6c:	madd	x12, x8, x17, x28
    2a70:	madd	x14, x8, x0, x28
    2a74:	cmp	w13, #0x8
    2a78:	add	x12, x12, x11
    2a7c:	add	x11, x14, x11, lsl #2
    2a80:	ldrb	w12, [x12, x18]
    2a84:	ldr	w11, [x11, x1]
    2a88:	b.lt	2ac8 <sendMTFValues+0x1ea0>  // b.tstop
    2a8c:	ldr	w14, [x20]
    2a90:	ldr	x13, [x24]
    2a94:	lsr	w10, w10, #24
    2a98:	strb	w10, [x13, w14, sxtw]
    2a9c:	ldr	w10, [x20]
    2aa0:	add	w14, w10, #0x1
    2aa4:	str	w14, [x20]
    2aa8:	ldr	w10, [x22]
    2aac:	lsl	w10, w10, #8
    2ab0:	str	w10, [x22]
    2ab4:	ldr	w15, [x21]
    2ab8:	sub	w13, w15, #0x8
    2abc:	cmp	w15, #0xf
    2ac0:	str	w13, [x21]
    2ac4:	b.gt	2a90 <sendMTFValues+0x1e68>
    2ac8:	add	w12, w13, w12
    2acc:	neg	w13, w12
    2ad0:	lsl	w11, w11, w13
    2ad4:	orr	w10, w11, w10
    2ad8:	str	w12, [x28, #644]
    2adc:	str	w10, [x28, #640]
    2ae0:	ldrh	w9, [x9, #20]
    2ae4:	madd	x11, x8, x17, x28
    2ae8:	madd	x13, x8, x0, x28
    2aec:	cmp	w12, #0x8
    2af0:	add	x11, x11, x9
    2af4:	add	x13, x13, x9, lsl #2
    2af8:	ldrb	w9, [x11, x18]
    2afc:	ldr	w11, [x13, x1]
    2b00:	b.lt	2b40 <sendMTFValues+0x1f18>  // b.tstop
    2b04:	ldr	w13, [x20]
    2b08:	ldr	x12, [x24]
    2b0c:	lsr	w10, w10, #24
    2b10:	strb	w10, [x12, w13, sxtw]
    2b14:	ldr	w10, [x20]
    2b18:	add	w13, w10, #0x1
    2b1c:	str	w13, [x20]
    2b20:	ldr	w10, [x22]
    2b24:	lsl	w10, w10, #8
    2b28:	str	w10, [x22]
    2b2c:	ldr	w14, [x21]
    2b30:	sub	w12, w14, #0x8
    2b34:	cmp	w14, #0xf
    2b38:	str	w12, [x21]
    2b3c:	b.gt	2b08 <sendMTFValues+0x1ee0>
    2b40:	add	w13, w12, w9
    2b44:	neg	w12, w13
    2b48:	lsl	w11, w11, w12
    2b4c:	orr	w10, w11, w10
    2b50:	add	x9, x16, x27, lsl #1
    2b54:	str	w13, [x28, #644]
    2b58:	str	w10, [x28, #640]
    2b5c:	ldrh	w11, [x9, #22]
    2b60:	madd	x12, x8, x17, x28
    2b64:	madd	x14, x8, x0, x28
    2b68:	cmp	w13, #0x8
    2b6c:	add	x12, x12, x11
    2b70:	add	x11, x14, x11, lsl #2
    2b74:	ldrb	w12, [x12, x18]
    2b78:	ldr	w11, [x11, x1]
    2b7c:	b.lt	2bbc <sendMTFValues+0x1f94>  // b.tstop
    2b80:	ldr	w14, [x20]
    2b84:	ldr	x13, [x24]
    2b88:	lsr	w10, w10, #24
    2b8c:	strb	w10, [x13, w14, sxtw]
    2b90:	ldr	w10, [x20]
    2b94:	add	w14, w10, #0x1
    2b98:	str	w14, [x20]
    2b9c:	ldr	w10, [x22]
    2ba0:	lsl	w10, w10, #8
    2ba4:	str	w10, [x22]
    2ba8:	ldr	w15, [x21]
    2bac:	sub	w13, w15, #0x8
    2bb0:	cmp	w15, #0xf
    2bb4:	str	w13, [x21]
    2bb8:	b.gt	2b84 <sendMTFValues+0x1f5c>
    2bbc:	add	w12, w13, w12
    2bc0:	neg	w13, w12
    2bc4:	lsl	w11, w11, w13
    2bc8:	orr	w10, w11, w10
    2bcc:	str	w12, [x28, #644]
    2bd0:	str	w10, [x28, #640]
    2bd4:	ldrh	w9, [x9, #24]
    2bd8:	madd	x11, x8, x17, x28
    2bdc:	madd	x13, x8, x0, x28
    2be0:	cmp	w12, #0x8
    2be4:	add	x11, x11, x9
    2be8:	add	x13, x13, x9, lsl #2
    2bec:	ldrb	w9, [x11, x18]
    2bf0:	ldr	w11, [x13, x1]
    2bf4:	b.lt	2c34 <sendMTFValues+0x200c>  // b.tstop
    2bf8:	ldr	w13, [x20]
    2bfc:	ldr	x12, [x24]
    2c00:	lsr	w10, w10, #24
    2c04:	strb	w10, [x12, w13, sxtw]
    2c08:	ldr	w10, [x20]
    2c0c:	add	w13, w10, #0x1
    2c10:	str	w13, [x20]
    2c14:	ldr	w10, [x22]
    2c18:	lsl	w10, w10, #8
    2c1c:	str	w10, [x22]
    2c20:	ldr	w14, [x21]
    2c24:	sub	w12, w14, #0x8
    2c28:	cmp	w14, #0xf
    2c2c:	str	w12, [x21]
    2c30:	b.gt	2bfc <sendMTFValues+0x1fd4>
    2c34:	add	w13, w12, w9
    2c38:	neg	w12, w13
    2c3c:	lsl	w11, w11, w12
    2c40:	orr	w10, w11, w10
    2c44:	add	x9, x16, x27, lsl #1
    2c48:	str	w13, [x28, #644]
    2c4c:	str	w10, [x28, #640]
    2c50:	ldrh	w11, [x9, #26]
    2c54:	madd	x12, x8, x17, x28
    2c58:	madd	x14, x8, x0, x28
    2c5c:	cmp	w13, #0x8
    2c60:	add	x12, x12, x11
    2c64:	add	x11, x14, x11, lsl #2
    2c68:	ldrb	w12, [x12, x18]
    2c6c:	ldr	w11, [x11, x1]
    2c70:	b.lt	2cb0 <sendMTFValues+0x2088>  // b.tstop
    2c74:	ldr	w14, [x20]
    2c78:	ldr	x13, [x24]
    2c7c:	lsr	w10, w10, #24
    2c80:	strb	w10, [x13, w14, sxtw]
    2c84:	ldr	w10, [x20]
    2c88:	add	w14, w10, #0x1
    2c8c:	str	w14, [x20]
    2c90:	ldr	w10, [x22]
    2c94:	lsl	w10, w10, #8
    2c98:	str	w10, [x22]
    2c9c:	ldr	w15, [x21]
    2ca0:	sub	w13, w15, #0x8
    2ca4:	cmp	w15, #0xf
    2ca8:	str	w13, [x21]
    2cac:	b.gt	2c78 <sendMTFValues+0x2050>
    2cb0:	add	w12, w13, w12
    2cb4:	neg	w13, w12
    2cb8:	lsl	w11, w11, w13
    2cbc:	orr	w10, w11, w10
    2cc0:	str	w12, [x28, #644]
    2cc4:	str	w10, [x28, #640]
    2cc8:	ldrh	w9, [x9, #28]
    2ccc:	madd	x11, x8, x17, x28
    2cd0:	madd	x13, x8, x0, x28
    2cd4:	cmp	w12, #0x8
    2cd8:	add	x11, x11, x9
    2cdc:	add	x13, x13, x9, lsl #2
    2ce0:	ldrb	w9, [x11, x18]
    2ce4:	ldr	w11, [x13, x1]
    2ce8:	b.lt	2d28 <sendMTFValues+0x2100>  // b.tstop
    2cec:	ldr	w13, [x20]
    2cf0:	ldr	x12, [x24]
    2cf4:	lsr	w10, w10, #24
    2cf8:	strb	w10, [x12, w13, sxtw]
    2cfc:	ldr	w10, [x20]
    2d00:	add	w13, w10, #0x1
    2d04:	str	w13, [x20]
    2d08:	ldr	w10, [x22]
    2d0c:	lsl	w10, w10, #8
    2d10:	str	w10, [x22]
    2d14:	ldr	w14, [x21]
    2d18:	sub	w12, w14, #0x8
    2d1c:	cmp	w14, #0xf
    2d20:	str	w12, [x21]
    2d24:	b.gt	2cf0 <sendMTFValues+0x20c8>
    2d28:	add	w13, w12, w9
    2d2c:	neg	w12, w13
    2d30:	lsl	w11, w11, w12
    2d34:	orr	w10, w11, w10
    2d38:	add	x9, x16, x27, lsl #1
    2d3c:	str	w13, [x28, #644]
    2d40:	str	w10, [x28, #640]
    2d44:	ldrh	w11, [x9, #30]
    2d48:	madd	x12, x8, x17, x28
    2d4c:	madd	x14, x8, x0, x28
    2d50:	cmp	w13, #0x8
    2d54:	add	x12, x12, x11
    2d58:	add	x11, x14, x11, lsl #2
    2d5c:	ldrb	w12, [x12, x18]
    2d60:	ldr	w11, [x11, x1]
    2d64:	b.lt	2da4 <sendMTFValues+0x217c>  // b.tstop
    2d68:	ldr	w14, [x20]
    2d6c:	ldr	x13, [x24]
    2d70:	lsr	w10, w10, #24
    2d74:	strb	w10, [x13, w14, sxtw]
    2d78:	ldr	w10, [x20]
    2d7c:	add	w14, w10, #0x1
    2d80:	str	w14, [x20]
    2d84:	ldr	w10, [x22]
    2d88:	lsl	w10, w10, #8
    2d8c:	str	w10, [x22]
    2d90:	ldr	w15, [x21]
    2d94:	sub	w13, w15, #0x8
    2d98:	cmp	w15, #0xf
    2d9c:	str	w13, [x21]
    2da0:	b.gt	2d6c <sendMTFValues+0x2144>
    2da4:	add	w12, w13, w12
    2da8:	neg	w13, w12
    2dac:	lsl	w11, w11, w13
    2db0:	orr	w10, w11, w10
    2db4:	str	w12, [x28, #644]
    2db8:	str	w10, [x28, #640]
    2dbc:	ldrh	w9, [x9, #32]
    2dc0:	madd	x11, x8, x17, x28
    2dc4:	madd	x13, x8, x0, x28
    2dc8:	cmp	w12, #0x8
    2dcc:	add	x11, x11, x9
    2dd0:	add	x13, x13, x9, lsl #2
    2dd4:	ldrb	w9, [x11, x18]
    2dd8:	ldr	w11, [x13, x1]
    2ddc:	b.lt	2e1c <sendMTFValues+0x21f4>  // b.tstop
    2de0:	ldr	w13, [x20]
    2de4:	ldr	x12, [x24]
    2de8:	lsr	w10, w10, #24
    2dec:	strb	w10, [x12, w13, sxtw]
    2df0:	ldr	w10, [x20]
    2df4:	add	w13, w10, #0x1
    2df8:	str	w13, [x20]
    2dfc:	ldr	w10, [x22]
    2e00:	lsl	w10, w10, #8
    2e04:	str	w10, [x22]
    2e08:	ldr	w14, [x21]
    2e0c:	sub	w12, w14, #0x8
    2e10:	cmp	w14, #0xf
    2e14:	str	w12, [x21]
    2e18:	b.gt	2de4 <sendMTFValues+0x21bc>
    2e1c:	add	w13, w12, w9
    2e20:	neg	w12, w13
    2e24:	lsl	w11, w11, w12
    2e28:	orr	w10, w11, w10
    2e2c:	add	x9, x16, x27, lsl #1
    2e30:	str	w13, [x28, #644]
    2e34:	str	w10, [x28, #640]
    2e38:	ldrh	w11, [x9, #34]
    2e3c:	madd	x12, x8, x17, x28
    2e40:	madd	x14, x8, x0, x28
    2e44:	cmp	w13, #0x8
    2e48:	add	x12, x12, x11
    2e4c:	add	x11, x14, x11, lsl #2
    2e50:	ldrb	w12, [x12, x18]
    2e54:	ldr	w11, [x11, x1]
    2e58:	b.lt	2e98 <sendMTFValues+0x2270>  // b.tstop
    2e5c:	ldr	w14, [x20]
    2e60:	ldr	x13, [x24]
    2e64:	lsr	w10, w10, #24
    2e68:	strb	w10, [x13, w14, sxtw]
    2e6c:	ldr	w10, [x20]
    2e70:	add	w14, w10, #0x1
    2e74:	str	w14, [x20]
    2e78:	ldr	w10, [x22]
    2e7c:	lsl	w10, w10, #8
    2e80:	str	w10, [x22]
    2e84:	ldr	w15, [x21]
    2e88:	sub	w13, w15, #0x8
    2e8c:	cmp	w15, #0xf
    2e90:	str	w13, [x21]
    2e94:	b.gt	2e60 <sendMTFValues+0x2238>
    2e98:	add	w12, w13, w12
    2e9c:	neg	w13, w12
    2ea0:	lsl	w11, w11, w13
    2ea4:	orr	w10, w11, w10
    2ea8:	str	w12, [x28, #644]
    2eac:	str	w10, [x28, #640]
    2eb0:	ldrh	w9, [x9, #36]
    2eb4:	madd	x11, x8, x17, x28
    2eb8:	madd	x13, x8, x0, x28
    2ebc:	cmp	w12, #0x8
    2ec0:	add	x11, x11, x9
    2ec4:	add	x13, x13, x9, lsl #2
    2ec8:	ldrb	w9, [x11, x18]
    2ecc:	ldr	w11, [x13, x1]
    2ed0:	b.lt	2f10 <sendMTFValues+0x22e8>  // b.tstop
    2ed4:	ldr	w13, [x20]
    2ed8:	ldr	x12, [x24]
    2edc:	lsr	w10, w10, #24
    2ee0:	strb	w10, [x12, w13, sxtw]
    2ee4:	ldr	w10, [x20]
    2ee8:	add	w13, w10, #0x1
    2eec:	str	w13, [x20]
    2ef0:	ldr	w10, [x22]
    2ef4:	lsl	w10, w10, #8
    2ef8:	str	w10, [x22]
    2efc:	ldr	w14, [x21]
    2f00:	sub	w12, w14, #0x8
    2f04:	cmp	w14, #0xf
    2f08:	str	w12, [x21]
    2f0c:	b.gt	2ed8 <sendMTFValues+0x22b0>
    2f10:	add	w13, w12, w9
    2f14:	neg	w12, w13
    2f18:	lsl	w11, w11, w12
    2f1c:	orr	w10, w11, w10
    2f20:	add	x9, x16, x27, lsl #1
    2f24:	str	w13, [x28, #644]
    2f28:	str	w10, [x28, #640]
    2f2c:	ldrh	w11, [x9, #38]
    2f30:	madd	x12, x8, x17, x28
    2f34:	madd	x14, x8, x0, x28
    2f38:	cmp	w13, #0x8
    2f3c:	add	x12, x12, x11
    2f40:	add	x11, x14, x11, lsl #2
    2f44:	ldrb	w12, [x12, x18]
    2f48:	ldr	w11, [x11, x1]
    2f4c:	b.lt	2f8c <sendMTFValues+0x2364>  // b.tstop
    2f50:	ldr	w14, [x20]
    2f54:	ldr	x13, [x24]
    2f58:	lsr	w10, w10, #24
    2f5c:	strb	w10, [x13, w14, sxtw]
    2f60:	ldr	w10, [x20]
    2f64:	add	w14, w10, #0x1
    2f68:	str	w14, [x20]
    2f6c:	ldr	w10, [x22]
    2f70:	lsl	w10, w10, #8
    2f74:	str	w10, [x22]
    2f78:	ldr	w15, [x21]
    2f7c:	sub	w13, w15, #0x8
    2f80:	cmp	w15, #0xf
    2f84:	str	w13, [x21]
    2f88:	b.gt	2f54 <sendMTFValues+0x232c>
    2f8c:	add	w12, w13, w12
    2f90:	neg	w13, w12
    2f94:	lsl	w11, w11, w13
    2f98:	orr	w10, w11, w10
    2f9c:	str	w12, [x28, #644]
    2fa0:	str	w10, [x28, #640]
    2fa4:	ldrh	w9, [x9, #40]
    2fa8:	madd	x11, x8, x17, x28
    2fac:	madd	x13, x8, x0, x28
    2fb0:	cmp	w12, #0x8
    2fb4:	add	x11, x11, x9
    2fb8:	add	x13, x13, x9, lsl #2
    2fbc:	ldrb	w9, [x11, x18]
    2fc0:	ldr	w11, [x13, x1]
    2fc4:	b.lt	3004 <sendMTFValues+0x23dc>  // b.tstop
    2fc8:	ldr	w13, [x20]
    2fcc:	ldr	x12, [x24]
    2fd0:	lsr	w10, w10, #24
    2fd4:	strb	w10, [x12, w13, sxtw]
    2fd8:	ldr	w10, [x20]
    2fdc:	add	w13, w10, #0x1
    2fe0:	str	w13, [x20]
    2fe4:	ldr	w10, [x22]
    2fe8:	lsl	w10, w10, #8
    2fec:	str	w10, [x22]
    2ff0:	ldr	w14, [x21]
    2ff4:	sub	w12, w14, #0x8
    2ff8:	cmp	w14, #0xf
    2ffc:	str	w12, [x21]
    3000:	b.gt	2fcc <sendMTFValues+0x23a4>
    3004:	add	w13, w12, w9
    3008:	neg	w12, w13
    300c:	lsl	w11, w11, w12
    3010:	orr	w10, w11, w10
    3014:	add	x9, x16, x27, lsl #1
    3018:	str	w13, [x28, #644]
    301c:	str	w10, [x28, #640]
    3020:	ldrh	w11, [x9, #42]
    3024:	madd	x12, x8, x17, x28
    3028:	madd	x14, x8, x0, x28
    302c:	cmp	w13, #0x8
    3030:	add	x12, x12, x11
    3034:	add	x11, x14, x11, lsl #2
    3038:	ldrb	w12, [x12, x18]
    303c:	ldr	w11, [x11, x1]
    3040:	b.lt	3080 <sendMTFValues+0x2458>  // b.tstop
    3044:	ldr	w14, [x20]
    3048:	ldr	x13, [x24]
    304c:	lsr	w10, w10, #24
    3050:	strb	w10, [x13, w14, sxtw]
    3054:	ldr	w10, [x20]
    3058:	add	w14, w10, #0x1
    305c:	str	w14, [x20]
    3060:	ldr	w10, [x22]
    3064:	lsl	w10, w10, #8
    3068:	str	w10, [x22]
    306c:	ldr	w15, [x21]
    3070:	sub	w13, w15, #0x8
    3074:	cmp	w15, #0xf
    3078:	str	w13, [x21]
    307c:	b.gt	3048 <sendMTFValues+0x2420>
    3080:	add	w12, w13, w12
    3084:	neg	w13, w12
    3088:	lsl	w11, w11, w13
    308c:	orr	w10, w11, w10
    3090:	str	w12, [x28, #644]
    3094:	str	w10, [x28, #640]
    3098:	ldrh	w9, [x9, #44]
    309c:	madd	x11, x8, x17, x28
    30a0:	madd	x13, x8, x0, x28
    30a4:	cmp	w12, #0x8
    30a8:	add	x11, x11, x9
    30ac:	add	x13, x13, x9, lsl #2
    30b0:	ldrb	w9, [x11, x18]
    30b4:	ldr	w11, [x13, x1]
    30b8:	b.lt	30f8 <sendMTFValues+0x24d0>  // b.tstop
    30bc:	ldr	w13, [x20]
    30c0:	ldr	x12, [x24]
    30c4:	lsr	w10, w10, #24
    30c8:	strb	w10, [x12, w13, sxtw]
    30cc:	ldr	w10, [x20]
    30d0:	add	w13, w10, #0x1
    30d4:	str	w13, [x20]
    30d8:	ldr	w10, [x22]
    30dc:	lsl	w10, w10, #8
    30e0:	str	w10, [x22]
    30e4:	ldr	w14, [x21]
    30e8:	sub	w12, w14, #0x8
    30ec:	cmp	w14, #0xf
    30f0:	str	w12, [x21]
    30f4:	b.gt	30c0 <sendMTFValues+0x2498>
    30f8:	add	w13, w12, w9
    30fc:	neg	w12, w13
    3100:	lsl	w11, w11, w12
    3104:	orr	w10, w11, w10
    3108:	add	x9, x16, x27, lsl #1
    310c:	str	w13, [x28, #644]
    3110:	str	w10, [x28, #640]
    3114:	ldrh	w11, [x9, #46]
    3118:	madd	x12, x8, x17, x28
    311c:	madd	x14, x8, x0, x28
    3120:	cmp	w13, #0x8
    3124:	add	x12, x12, x11
    3128:	add	x11, x14, x11, lsl #2
    312c:	ldrb	w12, [x12, x18]
    3130:	ldr	w11, [x11, x1]
    3134:	b.lt	3174 <sendMTFValues+0x254c>  // b.tstop
    3138:	ldr	w14, [x20]
    313c:	ldr	x13, [x24]
    3140:	lsr	w10, w10, #24
    3144:	strb	w10, [x13, w14, sxtw]
    3148:	ldr	w10, [x20]
    314c:	add	w14, w10, #0x1
    3150:	str	w14, [x20]
    3154:	ldr	w10, [x22]
    3158:	lsl	w10, w10, #8
    315c:	str	w10, [x22]
    3160:	ldr	w15, [x21]
    3164:	sub	w13, w15, #0x8
    3168:	cmp	w15, #0xf
    316c:	str	w13, [x21]
    3170:	b.gt	313c <sendMTFValues+0x2514>
    3174:	add	w12, w13, w12
    3178:	neg	w13, w12
    317c:	lsl	w11, w11, w13
    3180:	orr	w10, w11, w10
    3184:	str	w12, [x28, #644]
    3188:	str	w10, [x28, #640]
    318c:	ldrh	w9, [x9, #48]
    3190:	madd	x11, x8, x17, x28
    3194:	madd	x13, x8, x0, x28
    3198:	cmp	w12, #0x8
    319c:	add	x11, x11, x9
    31a0:	add	x13, x13, x9, lsl #2
    31a4:	ldrb	w9, [x11, x18]
    31a8:	ldr	w11, [x13, x1]
    31ac:	b.lt	31ec <sendMTFValues+0x25c4>  // b.tstop
    31b0:	ldr	w13, [x20]
    31b4:	ldr	x12, [x24]
    31b8:	lsr	w10, w10, #24
    31bc:	strb	w10, [x12, w13, sxtw]
    31c0:	ldr	w10, [x20]
    31c4:	add	w13, w10, #0x1
    31c8:	str	w13, [x20]
    31cc:	ldr	w10, [x22]
    31d0:	lsl	w10, w10, #8
    31d4:	str	w10, [x22]
    31d8:	ldr	w14, [x21]
    31dc:	sub	w12, w14, #0x8
    31e0:	cmp	w14, #0xf
    31e4:	str	w12, [x21]
    31e8:	b.gt	31b4 <sendMTFValues+0x258c>
    31ec:	add	w13, w12, w9
    31f0:	neg	w12, w13
    31f4:	lsl	w11, w11, w12
    31f8:	orr	w10, w11, w10
    31fc:	add	x9, x16, x27, lsl #1
    3200:	str	w13, [x28, #644]
    3204:	str	w10, [x28, #640]
    3208:	ldrh	w11, [x9, #50]
    320c:	madd	x12, x8, x17, x28
    3210:	madd	x14, x8, x0, x28
    3214:	cmp	w13, #0x8
    3218:	add	x12, x12, x11
    321c:	add	x11, x14, x11, lsl #2
    3220:	ldrb	w12, [x12, x18]
    3224:	ldr	w11, [x11, x1]
    3228:	b.lt	3268 <sendMTFValues+0x2640>  // b.tstop
    322c:	ldr	w14, [x20]
    3230:	ldr	x13, [x24]
    3234:	lsr	w10, w10, #24
    3238:	strb	w10, [x13, w14, sxtw]
    323c:	ldr	w10, [x20]
    3240:	add	w14, w10, #0x1
    3244:	str	w14, [x20]
    3248:	ldr	w10, [x22]
    324c:	lsl	w10, w10, #8
    3250:	str	w10, [x22]
    3254:	ldr	w15, [x21]
    3258:	sub	w13, w15, #0x8
    325c:	cmp	w15, #0xf
    3260:	str	w13, [x21]
    3264:	b.gt	3230 <sendMTFValues+0x2608>
    3268:	add	w12, w13, w12
    326c:	neg	w13, w12
    3270:	lsl	w11, w11, w13
    3274:	orr	w10, w11, w10
    3278:	str	w12, [x28, #644]
    327c:	str	w10, [x28, #640]
    3280:	ldrh	w9, [x9, #52]
    3284:	madd	x11, x8, x17, x28
    3288:	madd	x13, x8, x0, x28
    328c:	cmp	w12, #0x8
    3290:	add	x11, x11, x9
    3294:	add	x13, x13, x9, lsl #2
    3298:	ldrb	w9, [x11, x18]
    329c:	ldr	w11, [x13, x1]
    32a0:	b.lt	32e0 <sendMTFValues+0x26b8>  // b.tstop
    32a4:	ldr	w13, [x20]
    32a8:	ldr	x12, [x24]
    32ac:	lsr	w10, w10, #24
    32b0:	strb	w10, [x12, w13, sxtw]
    32b4:	ldr	w10, [x20]
    32b8:	add	w13, w10, #0x1
    32bc:	str	w13, [x20]
    32c0:	ldr	w10, [x22]
    32c4:	lsl	w10, w10, #8
    32c8:	str	w10, [x22]
    32cc:	ldr	w14, [x21]
    32d0:	sub	w12, w14, #0x8
    32d4:	cmp	w14, #0xf
    32d8:	str	w12, [x21]
    32dc:	b.gt	32a8 <sendMTFValues+0x2680>
    32e0:	add	w13, w12, w9
    32e4:	neg	w12, w13
    32e8:	lsl	w11, w11, w12
    32ec:	orr	w10, w11, w10
    32f0:	add	x9, x16, x27, lsl #1
    32f4:	str	w13, [x28, #644]
    32f8:	str	w10, [x28, #640]
    32fc:	ldrh	w11, [x9, #54]
    3300:	madd	x12, x8, x17, x28
    3304:	madd	x14, x8, x0, x28
    3308:	cmp	w13, #0x8
    330c:	add	x12, x12, x11
    3310:	add	x11, x14, x11, lsl #2
    3314:	ldrb	w12, [x12, x18]
    3318:	ldr	w11, [x11, x1]
    331c:	b.lt	335c <sendMTFValues+0x2734>  // b.tstop
    3320:	ldr	w14, [x20]
    3324:	ldr	x13, [x24]
    3328:	lsr	w10, w10, #24
    332c:	strb	w10, [x13, w14, sxtw]
    3330:	ldr	w10, [x20]
    3334:	add	w14, w10, #0x1
    3338:	str	w14, [x20]
    333c:	ldr	w10, [x22]
    3340:	lsl	w10, w10, #8
    3344:	str	w10, [x22]
    3348:	ldr	w15, [x21]
    334c:	sub	w13, w15, #0x8
    3350:	cmp	w15, #0xf
    3354:	str	w13, [x21]
    3358:	b.gt	3324 <sendMTFValues+0x26fc>
    335c:	add	w12, w13, w12
    3360:	neg	w13, w12
    3364:	lsl	w11, w11, w13
    3368:	orr	w10, w11, w10
    336c:	str	w12, [x28, #644]
    3370:	str	w10, [x28, #640]
    3374:	ldrh	w9, [x9, #56]
    3378:	madd	x11, x8, x17, x28
    337c:	madd	x13, x8, x0, x28
    3380:	cmp	w12, #0x8
    3384:	add	x11, x11, x9
    3388:	add	x13, x13, x9, lsl #2
    338c:	ldrb	w9, [x11, x18]
    3390:	ldr	w11, [x13, x1]
    3394:	b.lt	33d4 <sendMTFValues+0x27ac>  // b.tstop
    3398:	ldr	w13, [x20]
    339c:	ldr	x12, [x24]
    33a0:	lsr	w10, w10, #24
    33a4:	strb	w10, [x12, w13, sxtw]
    33a8:	ldr	w10, [x20]
    33ac:	add	w13, w10, #0x1
    33b0:	str	w13, [x20]
    33b4:	ldr	w10, [x22]
    33b8:	lsl	w10, w10, #8
    33bc:	str	w10, [x22]
    33c0:	ldr	w14, [x21]
    33c4:	sub	w12, w14, #0x8
    33c8:	cmp	w14, #0xf
    33cc:	str	w12, [x21]
    33d0:	b.gt	339c <sendMTFValues+0x2774>
    33d4:	add	w13, w12, w9
    33d8:	neg	w12, w13
    33dc:	lsl	w11, w11, w12
    33e0:	orr	w10, w11, w10
    33e4:	add	x9, x16, x27, lsl #1
    33e8:	str	w13, [x28, #644]
    33ec:	str	w10, [x28, #640]
    33f0:	ldrh	w11, [x9, #58]
    33f4:	madd	x12, x8, x17, x28
    33f8:	madd	x14, x8, x0, x28
    33fc:	cmp	w13, #0x8
    3400:	add	x12, x12, x11
    3404:	add	x11, x14, x11, lsl #2
    3408:	ldrb	w12, [x12, x18]
    340c:	ldr	w11, [x11, x1]
    3410:	b.lt	3450 <sendMTFValues+0x2828>  // b.tstop
    3414:	ldr	w14, [x20]
    3418:	ldr	x13, [x24]
    341c:	lsr	w10, w10, #24
    3420:	strb	w10, [x13, w14, sxtw]
    3424:	ldr	w10, [x20]
    3428:	add	w14, w10, #0x1
    342c:	str	w14, [x20]
    3430:	ldr	w10, [x22]
    3434:	lsl	w10, w10, #8
    3438:	str	w10, [x22]
    343c:	ldr	w15, [x21]
    3440:	sub	w13, w15, #0x8
    3444:	cmp	w15, #0xf
    3448:	str	w13, [x21]
    344c:	b.gt	3418 <sendMTFValues+0x27f0>
    3450:	add	w12, w13, w12
    3454:	neg	w13, w12
    3458:	lsl	w11, w11, w13
    345c:	orr	w10, w11, w10
    3460:	str	w12, [x28, #644]
    3464:	str	w10, [x28, #640]
    3468:	ldrh	w9, [x9, #60]
    346c:	madd	x11, x8, x17, x28
    3470:	madd	x13, x8, x0, x28
    3474:	cmp	w12, #0x8
    3478:	add	x11, x11, x9
    347c:	add	x13, x13, x9, lsl #2
    3480:	ldrb	w9, [x11, x18]
    3484:	ldr	w11, [x13, x1]
    3488:	b.lt	34c8 <sendMTFValues+0x28a0>  // b.tstop
    348c:	ldr	w13, [x20]
    3490:	ldr	x12, [x24]
    3494:	lsr	w10, w10, #24
    3498:	strb	w10, [x12, w13, sxtw]
    349c:	ldr	w10, [x20]
    34a0:	add	w13, w10, #0x1
    34a4:	str	w13, [x20]
    34a8:	ldr	w10, [x22]
    34ac:	lsl	w10, w10, #8
    34b0:	str	w10, [x22]
    34b4:	ldr	w14, [x21]
    34b8:	sub	w12, w14, #0x8
    34bc:	cmp	w14, #0xf
    34c0:	str	w12, [x21]
    34c4:	b.gt	3490 <sendMTFValues+0x2868>
    34c8:	add	w13, w12, w9
    34cc:	neg	w12, w13
    34d0:	lsl	w11, w11, w12
    34d4:	orr	w10, w11, w10
    34d8:	add	x9, x16, x27, lsl #1
    34dc:	str	w13, [x28, #644]
    34e0:	str	w10, [x28, #640]
    34e4:	ldrh	w11, [x9, #62]
    34e8:	madd	x12, x8, x17, x28
    34ec:	madd	x14, x8, x0, x28
    34f0:	cmp	w13, #0x8
    34f4:	add	x12, x12, x11
    34f8:	add	x11, x14, x11, lsl #2
    34fc:	ldrb	w12, [x12, x18]
    3500:	ldr	w11, [x11, x1]
    3504:	b.lt	3544 <sendMTFValues+0x291c>  // b.tstop
    3508:	ldr	w14, [x20]
    350c:	ldr	x13, [x24]
    3510:	lsr	w10, w10, #24
    3514:	strb	w10, [x13, w14, sxtw]
    3518:	ldr	w10, [x20]
    351c:	add	w14, w10, #0x1
    3520:	str	w14, [x20]
    3524:	ldr	w10, [x22]
    3528:	lsl	w10, w10, #8
    352c:	str	w10, [x22]
    3530:	ldr	w15, [x21]
    3534:	sub	w13, w15, #0x8
    3538:	cmp	w15, #0xf
    353c:	str	w13, [x21]
    3540:	b.gt	350c <sendMTFValues+0x28e4>
    3544:	add	w12, w13, w12
    3548:	neg	w13, w12
    354c:	lsl	w11, w11, w13
    3550:	orr	w10, w11, w10
    3554:	str	w12, [x28, #644]
    3558:	str	w10, [x28, #640]
    355c:	ldrh	w9, [x9, #64]
    3560:	madd	x11, x8, x17, x28
    3564:	madd	x13, x8, x0, x28
    3568:	cmp	w12, #0x8
    356c:	add	x11, x11, x9
    3570:	add	x13, x13, x9, lsl #2
    3574:	ldrb	w9, [x11, x18]
    3578:	ldr	w11, [x13, x1]
    357c:	b.lt	35bc <sendMTFValues+0x2994>  // b.tstop
    3580:	ldr	w13, [x20]
    3584:	ldr	x12, [x24]
    3588:	lsr	w10, w10, #24
    358c:	strb	w10, [x12, w13, sxtw]
    3590:	ldr	w10, [x20]
    3594:	add	w13, w10, #0x1
    3598:	str	w13, [x20]
    359c:	ldr	w10, [x22]
    35a0:	lsl	w10, w10, #8
    35a4:	str	w10, [x22]
    35a8:	ldr	w14, [x21]
    35ac:	sub	w12, w14, #0x8
    35b0:	cmp	w14, #0xf
    35b4:	str	w12, [x21]
    35b8:	b.gt	3584 <sendMTFValues+0x295c>
    35bc:	add	w13, w12, w9
    35c0:	neg	w12, w13
    35c4:	lsl	w11, w11, w12
    35c8:	orr	w10, w11, w10
    35cc:	add	x9, x16, x27, lsl #1
    35d0:	str	w13, [x28, #644]
    35d4:	str	w10, [x28, #640]
    35d8:	ldrh	w11, [x9, #66]
    35dc:	madd	x12, x8, x17, x28
    35e0:	madd	x14, x8, x0, x28
    35e4:	cmp	w13, #0x8
    35e8:	add	x12, x12, x11
    35ec:	add	x11, x14, x11, lsl #2
    35f0:	ldrb	w12, [x12, x18]
    35f4:	ldr	w11, [x11, x1]
    35f8:	b.lt	3638 <sendMTFValues+0x2a10>  // b.tstop
    35fc:	ldr	w14, [x20]
    3600:	ldr	x13, [x24]
    3604:	lsr	w10, w10, #24
    3608:	strb	w10, [x13, w14, sxtw]
    360c:	ldr	w10, [x20]
    3610:	add	w14, w10, #0x1
    3614:	str	w14, [x20]
    3618:	ldr	w10, [x22]
    361c:	lsl	w10, w10, #8
    3620:	str	w10, [x22]
    3624:	ldr	w15, [x21]
    3628:	sub	w13, w15, #0x8
    362c:	cmp	w15, #0xf
    3630:	str	w13, [x21]
    3634:	b.gt	3600 <sendMTFValues+0x29d8>
    3638:	add	w12, w13, w12
    363c:	neg	w13, w12
    3640:	lsl	w11, w11, w13
    3644:	orr	w10, w11, w10
    3648:	str	w12, [x28, #644]
    364c:	str	w10, [x28, #640]
    3650:	ldrh	w9, [x9, #68]
    3654:	madd	x11, x8, x17, x28
    3658:	madd	x13, x8, x0, x28
    365c:	cmp	w12, #0x8
    3660:	add	x11, x11, x9
    3664:	add	x13, x13, x9, lsl #2
    3668:	ldrb	w9, [x11, x18]
    366c:	ldr	w11, [x13, x1]
    3670:	b.lt	36b0 <sendMTFValues+0x2a88>  // b.tstop
    3674:	ldr	w13, [x20]
    3678:	ldr	x12, [x24]
    367c:	lsr	w10, w10, #24
    3680:	strb	w10, [x12, w13, sxtw]
    3684:	ldr	w10, [x20]
    3688:	add	w13, w10, #0x1
    368c:	str	w13, [x20]
    3690:	ldr	w10, [x22]
    3694:	lsl	w10, w10, #8
    3698:	str	w10, [x22]
    369c:	ldr	w14, [x21]
    36a0:	sub	w12, w14, #0x8
    36a4:	cmp	w14, #0xf
    36a8:	str	w12, [x21]
    36ac:	b.gt	3678 <sendMTFValues+0x2a50>
    36b0:	add	w13, w12, w9
    36b4:	neg	w12, w13
    36b8:	lsl	w11, w11, w12
    36bc:	orr	w10, w11, w10
    36c0:	add	x9, x16, x27, lsl #1
    36c4:	str	w13, [x28, #644]
    36c8:	str	w10, [x28, #640]
    36cc:	ldrh	w11, [x9, #70]
    36d0:	madd	x12, x8, x17, x28
    36d4:	madd	x14, x8, x0, x28
    36d8:	cmp	w13, #0x8
    36dc:	add	x12, x12, x11
    36e0:	add	x11, x14, x11, lsl #2
    36e4:	ldrb	w12, [x12, x18]
    36e8:	ldr	w11, [x11, x1]
    36ec:	b.lt	372c <sendMTFValues+0x2b04>  // b.tstop
    36f0:	ldr	w14, [x20]
    36f4:	ldr	x13, [x24]
    36f8:	lsr	w10, w10, #24
    36fc:	strb	w10, [x13, w14, sxtw]
    3700:	ldr	w10, [x20]
    3704:	add	w14, w10, #0x1
    3708:	str	w14, [x20]
    370c:	ldr	w10, [x22]
    3710:	lsl	w10, w10, #8
    3714:	str	w10, [x22]
    3718:	ldr	w15, [x21]
    371c:	sub	w13, w15, #0x8
    3720:	cmp	w15, #0xf
    3724:	str	w13, [x21]
    3728:	b.gt	36f4 <sendMTFValues+0x2acc>
    372c:	add	w12, w13, w12
    3730:	neg	w13, w12
    3734:	lsl	w11, w11, w13
    3738:	orr	w10, w11, w10
    373c:	str	w12, [x28, #644]
    3740:	str	w10, [x28, #640]
    3744:	ldrh	w9, [x9, #72]
    3748:	madd	x11, x8, x17, x28
    374c:	madd	x13, x8, x0, x28
    3750:	cmp	w12, #0x8
    3754:	add	x11, x11, x9
    3758:	add	x13, x13, x9, lsl #2
    375c:	ldrb	w9, [x11, x18]
    3760:	ldr	w11, [x13, x1]
    3764:	b.lt	37a4 <sendMTFValues+0x2b7c>  // b.tstop
    3768:	ldr	w13, [x20]
    376c:	ldr	x12, [x24]
    3770:	lsr	w10, w10, #24
    3774:	strb	w10, [x12, w13, sxtw]
    3778:	ldr	w10, [x20]
    377c:	add	w13, w10, #0x1
    3780:	str	w13, [x20]
    3784:	ldr	w10, [x22]
    3788:	lsl	w10, w10, #8
    378c:	str	w10, [x22]
    3790:	ldr	w14, [x21]
    3794:	sub	w12, w14, #0x8
    3798:	cmp	w14, #0xf
    379c:	str	w12, [x21]
    37a0:	b.gt	376c <sendMTFValues+0x2b44>
    37a4:	add	w13, w12, w9
    37a8:	neg	w12, w13
    37ac:	lsl	w11, w11, w12
    37b0:	orr	w10, w11, w10
    37b4:	add	x9, x16, x27, lsl #1
    37b8:	str	w13, [x28, #644]
    37bc:	str	w10, [x28, #640]
    37c0:	ldrh	w11, [x9, #74]
    37c4:	madd	x12, x8, x17, x28
    37c8:	madd	x14, x8, x0, x28
    37cc:	cmp	w13, #0x8
    37d0:	add	x12, x12, x11
    37d4:	add	x11, x14, x11, lsl #2
    37d8:	ldrb	w12, [x12, x18]
    37dc:	ldr	w11, [x11, x1]
    37e0:	b.lt	3820 <sendMTFValues+0x2bf8>  // b.tstop
    37e4:	ldr	w14, [x20]
    37e8:	ldr	x13, [x24]
    37ec:	lsr	w10, w10, #24
    37f0:	strb	w10, [x13, w14, sxtw]
    37f4:	ldr	w10, [x20]
    37f8:	add	w14, w10, #0x1
    37fc:	str	w14, [x20]
    3800:	ldr	w10, [x22]
    3804:	lsl	w10, w10, #8
    3808:	str	w10, [x22]
    380c:	ldr	w15, [x21]
    3810:	sub	w13, w15, #0x8
    3814:	cmp	w15, #0xf
    3818:	str	w13, [x21]
    381c:	b.gt	37e8 <sendMTFValues+0x2bc0>
    3820:	add	w12, w13, w12
    3824:	neg	w13, w12
    3828:	lsl	w11, w11, w13
    382c:	orr	w10, w11, w10
    3830:	str	w12, [x28, #644]
    3834:	str	w10, [x28, #640]
    3838:	ldrh	w9, [x9, #76]
    383c:	madd	x11, x8, x17, x28
    3840:	madd	x13, x8, x0, x28
    3844:	cmp	w12, #0x8
    3848:	add	x11, x11, x9
    384c:	add	x13, x13, x9, lsl #2
    3850:	ldrb	w9, [x11, x18]
    3854:	ldr	w11, [x13, x1]
    3858:	b.lt	3898 <sendMTFValues+0x2c70>  // b.tstop
    385c:	ldr	w13, [x20]
    3860:	ldr	x12, [x24]
    3864:	lsr	w10, w10, #24
    3868:	strb	w10, [x12, w13, sxtw]
    386c:	ldr	w10, [x20]
    3870:	add	w13, w10, #0x1
    3874:	str	w13, [x20]
    3878:	ldr	w10, [x22]
    387c:	lsl	w10, w10, #8
    3880:	str	w10, [x22]
    3884:	ldr	w14, [x21]
    3888:	sub	w12, w14, #0x8
    388c:	cmp	w14, #0xf
    3890:	str	w12, [x21]
    3894:	b.gt	3860 <sendMTFValues+0x2c38>
    3898:	add	w13, w12, w9
    389c:	neg	w12, w13
    38a0:	lsl	w11, w11, w12
    38a4:	orr	w10, w11, w10
    38a8:	add	x9, x16, x27, lsl #1
    38ac:	str	w13, [x28, #644]
    38b0:	str	w10, [x28, #640]
    38b4:	ldrh	w11, [x9, #78]
    38b8:	madd	x12, x8, x17, x28
    38bc:	madd	x14, x8, x0, x28
    38c0:	cmp	w13, #0x8
    38c4:	add	x12, x12, x11
    38c8:	add	x11, x14, x11, lsl #2
    38cc:	ldrb	w12, [x12, x18]
    38d0:	ldr	w11, [x11, x1]
    38d4:	b.lt	3914 <sendMTFValues+0x2cec>  // b.tstop
    38d8:	ldr	w14, [x20]
    38dc:	ldr	x13, [x24]
    38e0:	lsr	w10, w10, #24
    38e4:	strb	w10, [x13, w14, sxtw]
    38e8:	ldr	w10, [x20]
    38ec:	add	w14, w10, #0x1
    38f0:	str	w14, [x20]
    38f4:	ldr	w10, [x22]
    38f8:	lsl	w10, w10, #8
    38fc:	str	w10, [x22]
    3900:	ldr	w15, [x21]
    3904:	sub	w13, w15, #0x8
    3908:	cmp	w15, #0xf
    390c:	str	w13, [x21]
    3910:	b.gt	38dc <sendMTFValues+0x2cb4>
    3914:	add	w12, w13, w12
    3918:	neg	w13, w12
    391c:	lsl	w11, w11, w13
    3920:	orr	w10, w11, w10
    3924:	str	w12, [x28, #644]
    3928:	str	w10, [x28, #640]
    392c:	ldrh	w9, [x9, #80]
    3930:	madd	x11, x8, x17, x28
    3934:	madd	x13, x8, x0, x28
    3938:	cmp	w12, #0x8
    393c:	add	x11, x11, x9
    3940:	add	x13, x13, x9, lsl #2
    3944:	ldrb	w9, [x11, x18]
    3948:	ldr	w11, [x13, x1]
    394c:	b.lt	398c <sendMTFValues+0x2d64>  // b.tstop
    3950:	ldr	w13, [x20]
    3954:	ldr	x12, [x24]
    3958:	lsr	w10, w10, #24
    395c:	strb	w10, [x12, w13, sxtw]
    3960:	ldr	w10, [x20]
    3964:	add	w13, w10, #0x1
    3968:	str	w13, [x20]
    396c:	ldr	w10, [x22]
    3970:	lsl	w10, w10, #8
    3974:	str	w10, [x22]
    3978:	ldr	w14, [x21]
    397c:	sub	w12, w14, #0x8
    3980:	cmp	w14, #0xf
    3984:	str	w12, [x21]
    3988:	b.gt	3954 <sendMTFValues+0x2d2c>
    398c:	add	w13, w12, w9
    3990:	neg	w12, w13
    3994:	lsl	w11, w11, w12
    3998:	orr	w10, w11, w10
    399c:	add	x9, x16, x27, lsl #1
    39a0:	str	w13, [x28, #644]
    39a4:	str	w10, [x28, #640]
    39a8:	ldrh	w11, [x9, #82]
    39ac:	madd	x12, x8, x17, x28
    39b0:	madd	x14, x8, x0, x28
    39b4:	cmp	w13, #0x8
    39b8:	add	x12, x12, x11
    39bc:	add	x11, x14, x11, lsl #2
    39c0:	ldrb	w12, [x12, x18]
    39c4:	ldr	w11, [x11, x1]
    39c8:	b.lt	3a08 <sendMTFValues+0x2de0>  // b.tstop
    39cc:	ldr	w14, [x20]
    39d0:	ldr	x13, [x24]
    39d4:	lsr	w10, w10, #24
    39d8:	strb	w10, [x13, w14, sxtw]
    39dc:	ldr	w10, [x20]
    39e0:	add	w14, w10, #0x1
    39e4:	str	w14, [x20]
    39e8:	ldr	w10, [x22]
    39ec:	lsl	w10, w10, #8
    39f0:	str	w10, [x22]
    39f4:	ldr	w15, [x21]
    39f8:	sub	w13, w15, #0x8
    39fc:	cmp	w15, #0xf
    3a00:	str	w13, [x21]
    3a04:	b.gt	39d0 <sendMTFValues+0x2da8>
    3a08:	add	w12, w13, w12
    3a0c:	neg	w13, w12
    3a10:	lsl	w11, w11, w13
    3a14:	orr	w10, w11, w10
    3a18:	str	w12, [x28, #644]
    3a1c:	str	w10, [x28, #640]
    3a20:	ldrh	w9, [x9, #84]
    3a24:	madd	x11, x8, x17, x28
    3a28:	madd	x13, x8, x0, x28
    3a2c:	cmp	w12, #0x8
    3a30:	add	x11, x11, x9
    3a34:	add	x13, x13, x9, lsl #2
    3a38:	ldrb	w9, [x11, x18]
    3a3c:	ldr	w11, [x13, x1]
    3a40:	b.lt	3a80 <sendMTFValues+0x2e58>  // b.tstop
    3a44:	ldr	w13, [x20]
    3a48:	ldr	x12, [x24]
    3a4c:	lsr	w10, w10, #24
    3a50:	strb	w10, [x12, w13, sxtw]
    3a54:	ldr	w10, [x20]
    3a58:	add	w13, w10, #0x1
    3a5c:	str	w13, [x20]
    3a60:	ldr	w10, [x22]
    3a64:	lsl	w10, w10, #8
    3a68:	str	w10, [x22]
    3a6c:	ldr	w14, [x21]
    3a70:	sub	w12, w14, #0x8
    3a74:	cmp	w14, #0xf
    3a78:	str	w12, [x21]
    3a7c:	b.gt	3a48 <sendMTFValues+0x2e20>
    3a80:	add	w13, w12, w9
    3a84:	neg	w12, w13
    3a88:	lsl	w11, w11, w12
    3a8c:	orr	w10, w11, w10
    3a90:	add	x9, x16, x27, lsl #1
    3a94:	str	w13, [x28, #644]
    3a98:	str	w10, [x28, #640]
    3a9c:	ldrh	w11, [x9, #86]
    3aa0:	madd	x12, x8, x17, x28
    3aa4:	madd	x14, x8, x0, x28
    3aa8:	cmp	w13, #0x8
    3aac:	add	x12, x12, x11
    3ab0:	add	x11, x14, x11, lsl #2
    3ab4:	ldrb	w12, [x12, x18]
    3ab8:	ldr	w11, [x11, x1]
    3abc:	b.lt	3afc <sendMTFValues+0x2ed4>  // b.tstop
    3ac0:	ldr	w14, [x20]
    3ac4:	ldr	x13, [x24]
    3ac8:	lsr	w10, w10, #24
    3acc:	strb	w10, [x13, w14, sxtw]
    3ad0:	ldr	w10, [x20]
    3ad4:	add	w14, w10, #0x1
    3ad8:	str	w14, [x20]
    3adc:	ldr	w10, [x22]
    3ae0:	lsl	w10, w10, #8
    3ae4:	str	w10, [x22]
    3ae8:	ldr	w15, [x21]
    3aec:	sub	w13, w15, #0x8
    3af0:	cmp	w15, #0xf
    3af4:	str	w13, [x21]
    3af8:	b.gt	3ac4 <sendMTFValues+0x2e9c>
    3afc:	add	w12, w13, w12
    3b00:	neg	w13, w12
    3b04:	lsl	w11, w11, w13
    3b08:	orr	w10, w11, w10
    3b0c:	str	w12, [x28, #644]
    3b10:	str	w10, [x28, #640]
    3b14:	ldrh	w9, [x9, #88]
    3b18:	madd	x11, x8, x17, x28
    3b1c:	madd	x13, x8, x0, x28
    3b20:	cmp	w12, #0x8
    3b24:	add	x11, x11, x9
    3b28:	add	x13, x13, x9, lsl #2
    3b2c:	ldrb	w9, [x11, x18]
    3b30:	ldr	w11, [x13, x1]
    3b34:	b.lt	3b74 <sendMTFValues+0x2f4c>  // b.tstop
    3b38:	ldr	w13, [x20]
    3b3c:	ldr	x12, [x24]
    3b40:	lsr	w10, w10, #24
    3b44:	strb	w10, [x12, w13, sxtw]
    3b48:	ldr	w10, [x20]
    3b4c:	add	w13, w10, #0x1
    3b50:	str	w13, [x20]
    3b54:	ldr	w10, [x22]
    3b58:	lsl	w10, w10, #8
    3b5c:	str	w10, [x22]
    3b60:	ldr	w14, [x21]
    3b64:	sub	w12, w14, #0x8
    3b68:	cmp	w14, #0xf
    3b6c:	str	w12, [x21]
    3b70:	b.gt	3b3c <sendMTFValues+0x2f14>
    3b74:	add	w13, w12, w9
    3b78:	neg	w12, w13
    3b7c:	lsl	w11, w11, w12
    3b80:	orr	w10, w11, w10
    3b84:	add	x9, x16, x27, lsl #1
    3b88:	str	w13, [x28, #644]
    3b8c:	str	w10, [x28, #640]
    3b90:	ldrh	w11, [x9, #90]
    3b94:	madd	x12, x8, x17, x28
    3b98:	madd	x14, x8, x0, x28
    3b9c:	cmp	w13, #0x8
    3ba0:	add	x12, x12, x11
    3ba4:	add	x11, x14, x11, lsl #2
    3ba8:	ldrb	w12, [x12, x18]
    3bac:	ldr	w11, [x11, x1]
    3bb0:	b.lt	3bf0 <sendMTFValues+0x2fc8>  // b.tstop
    3bb4:	ldr	w14, [x20]
    3bb8:	ldr	x13, [x24]
    3bbc:	lsr	w10, w10, #24
    3bc0:	strb	w10, [x13, w14, sxtw]
    3bc4:	ldr	w10, [x20]
    3bc8:	add	w14, w10, #0x1
    3bcc:	str	w14, [x20]
    3bd0:	ldr	w10, [x22]
    3bd4:	lsl	w10, w10, #8
    3bd8:	str	w10, [x22]
    3bdc:	ldr	w15, [x21]
    3be0:	sub	w13, w15, #0x8
    3be4:	cmp	w15, #0xf
    3be8:	str	w13, [x21]
    3bec:	b.gt	3bb8 <sendMTFValues+0x2f90>
    3bf0:	add	w12, w13, w12
    3bf4:	neg	w13, w12
    3bf8:	lsl	w11, w11, w13
    3bfc:	orr	w10, w11, w10
    3c00:	str	w12, [x28, #644]
    3c04:	str	w10, [x28, #640]
    3c08:	ldrh	w9, [x9, #92]
    3c0c:	madd	x11, x8, x17, x28
    3c10:	madd	x13, x8, x0, x28
    3c14:	cmp	w12, #0x8
    3c18:	add	x11, x11, x9
    3c1c:	add	x13, x13, x9, lsl #2
    3c20:	ldrb	w9, [x11, x18]
    3c24:	ldr	w11, [x13, x1]
    3c28:	b.lt	3c68 <sendMTFValues+0x3040>  // b.tstop
    3c2c:	ldr	w13, [x20]
    3c30:	ldr	x12, [x24]
    3c34:	lsr	w10, w10, #24
    3c38:	strb	w10, [x12, w13, sxtw]
    3c3c:	ldr	w10, [x20]
    3c40:	add	w13, w10, #0x1
    3c44:	str	w13, [x20]
    3c48:	ldr	w10, [x22]
    3c4c:	lsl	w10, w10, #8
    3c50:	str	w10, [x22]
    3c54:	ldr	w14, [x21]
    3c58:	sub	w12, w14, #0x8
    3c5c:	cmp	w14, #0xf
    3c60:	str	w12, [x21]
    3c64:	b.gt	3c30 <sendMTFValues+0x3008>
    3c68:	add	w13, w12, w9
    3c6c:	neg	w12, w13
    3c70:	lsl	w11, w11, w12
    3c74:	orr	w10, w11, w10
    3c78:	add	x9, x16, x27, lsl #1
    3c7c:	str	w13, [x28, #644]
    3c80:	str	w10, [x28, #640]
    3c84:	ldrh	w11, [x9, #94]
    3c88:	madd	x12, x8, x17, x28
    3c8c:	madd	x14, x8, x0, x28
    3c90:	cmp	w13, #0x8
    3c94:	add	x12, x12, x11
    3c98:	add	x11, x14, x11, lsl #2
    3c9c:	ldrb	w12, [x12, x18]
    3ca0:	ldr	w11, [x11, x1]
    3ca4:	b.lt	3ce4 <sendMTFValues+0x30bc>  // b.tstop
    3ca8:	ldr	w14, [x20]
    3cac:	ldr	x13, [x24]
    3cb0:	lsr	w10, w10, #24
    3cb4:	strb	w10, [x13, w14, sxtw]
    3cb8:	ldr	w10, [x20]
    3cbc:	add	w14, w10, #0x1
    3cc0:	str	w14, [x20]
    3cc4:	ldr	w10, [x22]
    3cc8:	lsl	w10, w10, #8
    3ccc:	str	w10, [x22]
    3cd0:	ldr	w15, [x21]
    3cd4:	sub	w13, w15, #0x8
    3cd8:	cmp	w15, #0xf
    3cdc:	str	w13, [x21]
    3ce0:	b.gt	3cac <sendMTFValues+0x3084>
    3ce4:	add	w12, w13, w12
    3ce8:	neg	w13, w12
    3cec:	lsl	w11, w11, w13
    3cf0:	orr	w10, w11, w10
    3cf4:	str	w12, [x28, #644]
    3cf8:	str	w10, [x28, #640]
    3cfc:	ldrh	w9, [x9, #96]
    3d00:	madd	x11, x8, x17, x28
    3d04:	madd	x13, x8, x0, x28
    3d08:	cmp	w12, #0x8
    3d0c:	add	x11, x11, x9
    3d10:	add	x9, x13, x9, lsl #2
    3d14:	ldrb	w11, [x11, x18]
    3d18:	ldr	w9, [x9, x1]
    3d1c:	b.lt	3d5c <sendMTFValues+0x3134>  // b.tstop
    3d20:	ldr	w13, [x20]
    3d24:	ldr	x12, [x24]
    3d28:	lsr	w10, w10, #24
    3d2c:	strb	w10, [x12, w13, sxtw]
    3d30:	ldr	w10, [x20]
    3d34:	add	w13, w10, #0x1
    3d38:	str	w13, [x20]
    3d3c:	ldr	w10, [x22]
    3d40:	lsl	w10, w10, #8
    3d44:	str	w10, [x22]
    3d48:	ldr	w14, [x21]
    3d4c:	sub	w12, w14, #0x8
    3d50:	cmp	w14, #0xf
    3d54:	str	w12, [x21]
    3d58:	b.gt	3d24 <sendMTFValues+0x30fc>
    3d5c:	add	w11, w12, w11
    3d60:	neg	w12, w11
    3d64:	lsl	w9, w9, w12
    3d68:	orr	w9, w9, w10
    3d6c:	str	w11, [x28, #644]
    3d70:	str	w9, [x28, #640]
    3d74:	ldrh	w10, [x16, x4, lsl #1]
    3d78:	madd	x12, x8, x17, x28
    3d7c:	madd	x8, x8, x0, x28
    3d80:	cmp	w11, #0x8
    3d84:	add	x12, x12, x10
    3d88:	add	x8, x8, x10, lsl #2
    3d8c:	ldrb	w10, [x12, x18]
    3d90:	ldr	w8, [x8, x1]
    3d94:	b.lt	2574 <sendMTFValues+0x194c>  // b.tstop
    3d98:	ldr	w12, [x20]
    3d9c:	ldr	x11, [x24]
    3da0:	lsr	w9, w9, #24
    3da4:	strb	w9, [x11, w12, sxtw]
    3da8:	ldr	w9, [x20]
    3dac:	add	w12, w9, #0x1
    3db0:	str	w12, [x20]
    3db4:	ldr	w9, [x22]
    3db8:	lsl	w9, w9, #8
    3dbc:	str	w9, [x22]
    3dc0:	ldr	w13, [x21]
    3dc4:	sub	w11, w13, #0x8
    3dc8:	cmp	w13, #0xf
    3dcc:	str	w11, [x21]
    3dd0:	b.gt	3d9c <sendMTFValues+0x3174>
    3dd4:	b	2574 <sendMTFValues+0x194c>
    3dd8:	cmp	w25, w27
    3ddc:	b.lt	258c <sendMTFValues+0x1964>  // b.tstop
    3de0:	ldr	w11, [x21]
    3de4:	ldr	w10, [x22]
    3de8:	sxtw	x9, w25
    3dec:	b	3e14 <sendMTFValues+0x31ec>
    3df0:	add	w11, w11, w13
    3df4:	neg	w13, w11
    3df8:	lsl	w12, w12, w13
    3dfc:	cmp	x27, x9
    3e00:	add	x27, x27, #0x1
    3e04:	orr	w10, w12, w10
    3e08:	str	w10, [x22]
    3e0c:	str	w11, [x21]
    3e10:	b.ge	258c <sendMTFValues+0x1964>  // b.tcont
    3e14:	ldrb	w12, [x8]
    3e18:	ldrh	w13, [x16, x27, lsl #1]
    3e1c:	cmp	w11, #0x8
    3e20:	madd	x14, x12, x17, x28
    3e24:	madd	x12, x12, x0, x28
    3e28:	add	x14, x14, x13
    3e2c:	add	x12, x12, x13, lsl #2
    3e30:	ldrb	w13, [x14, x18]
    3e34:	ldr	w12, [x12, x1]
    3e38:	b.lt	3df0 <sendMTFValues+0x31c8>  // b.tstop
    3e3c:	ldr	w14, [x20]
    3e40:	ldr	x11, [x24]
    3e44:	lsr	w10, w10, #24
    3e48:	strb	w10, [x11, w14, sxtw]
    3e4c:	ldr	w10, [x20]
    3e50:	add	w14, w10, #0x1
    3e54:	str	w14, [x20]
    3e58:	ldr	w10, [x22]
    3e5c:	lsl	w10, w10, #8
    3e60:	str	w10, [x22]
    3e64:	ldr	w15, [x21]
    3e68:	sub	w11, w15, #0x8
    3e6c:	cmp	w15, #0xf
    3e70:	str	w11, [x21]
    3e74:	b.gt	3e40 <sendMTFValues+0x3218>
    3e78:	b	3df0 <sendMTFValues+0x31c8>
    3e7c:	mov	w3, wzr
    3e80:	ldr	x8, [x29, #8]
    3e84:	cmp	w3, w8
    3e88:	b.eq	3e94 <sendMTFValues+0x326c>  // b.none
    3e8c:	mov	w0, #0xbbf                 	// #3007
    3e90:	bl	0 <BZ2_bz__AssertH__fail>
    3e94:	ldr	w8, [x28, #656]
    3e98:	cmp	w8, #0x3
    3e9c:	b.ge	3f58 <sendMTFValues+0x3330>  // b.tcont
    3ea0:	ldp	x20, x19, [sp, #304]
    3ea4:	ldp	x22, x21, [sp, #288]
    3ea8:	ldp	x24, x23, [sp, #272]
    3eac:	ldp	x26, x25, [sp, #256]
    3eb0:	ldp	x28, x27, [sp, #240]
    3eb4:	ldp	x29, x30, [sp, #224]
    3eb8:	ldr	d8, [sp, #208]
    3ebc:	add	sp, sp, #0x140
    3ec0:	ret
    3ec4:	ldr	x0, [x8]
    3ec8:	ldr	w2, [x28, #108]
    3ecc:	ldr	w3, [x28, #668]
    3ed0:	ldr	w4, [x28, #124]
    3ed4:	adrp	x1, 0 <BZ2_bsInitWrite>
    3ed8:	add	x1, x1, #0x0
    3edc:	bl	0 <fprintf>
    3ee0:	b	c68 <sendMTFValues+0x40>
    3ee4:	adrp	x10, 0 <stderr>
    3ee8:	ldr	x0, [x10]
    3eec:	adrp	x1, 0 <BZ2_bsInitWrite>
    3ef0:	sub	w2, w9, w8
    3ef4:	add	x1, x1, #0x0
    3ef8:	bl	0 <fprintf>
    3efc:	ldr	x5, [sp, #80]
    3f00:	ldr	w9, [x20]
    3f04:	ldr	w10, [x21]
    3f08:	b	2168 <sendMTFValues+0x1540>
    3f0c:	adrp	x10, 0 <stderr>
    3f10:	ldr	x0, [x10]
    3f14:	adrp	x1, 0 <BZ2_bsInitWrite>
    3f18:	sub	w2, w8, w9
    3f1c:	add	x1, x1, #0x0
    3f20:	bl	0 <fprintf>
    3f24:	ldr	x5, [sp, #80]
    3f28:	ldr	w8, [x20]
    3f2c:	ldr	w11, [x21]
    3f30:	ldr	w10, [x22]
    3f34:	b	2340 <sendMTFValues+0x1718>
    3f38:	adrp	x9, 0 <stderr>
    3f3c:	ldr	x0, [x9]
    3f40:	adrp	x1, 0 <BZ2_bsInitWrite>
    3f44:	sub	w2, w26, w8
    3f48:	add	x1, x1, #0x0
    3f4c:	bl	0 <fprintf>
    3f50:	ldr	w26, [x20]
    3f54:	b	2548 <sendMTFValues+0x1920>
    3f58:	ldr	w8, [x20]
    3f5c:	adrp	x9, 0 <stderr>
    3f60:	ldr	x0, [x9]
    3f64:	adrp	x1, 0 <BZ2_bsInitWrite>
    3f68:	sub	w2, w8, w26
    3f6c:	add	x1, x1, #0x0
    3f70:	bl	0 <fprintf>
    3f74:	b	3ea0 <sendMTFValues+0x3278>

decompress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_decompress>:
       0:	sub	sp, sp, #0xe0
       4:	stp	x29, x30, [sp, #128]
       8:	stp	x28, x27, [sp, #144]
       c:	stp	x26, x25, [sp, #160]
      10:	stp	x24, x23, [sp, #176]
      14:	stp	x22, x21, [sp, #192]
      18:	stp	x20, x19, [sp, #208]
      1c:	add	x29, sp, #0x80
      20:	ldr	w8, [x0, #8]
      24:	ldr	x27, [x0]
      28:	mov	w9, #0xfa24                	// #64036
      2c:	mov	x21, x0
      30:	subs	w8, w8, #0xa
      34:	add	x22, x0, x9
      38:	b.ne	b0 <BZ2_decompress+0xb0>  // b.any
      3c:	mov	x7, xzr
      40:	mov	x23, xzr
      44:	mov	w24, wzr
      48:	mov	w28, wzr
      4c:	mov	w14, wzr
      50:	mov	w30, wzr
      54:	mov	w16, wzr
      58:	mov	w25, wzr
      5c:	mov	w3, wzr
      60:	mov	w26, wzr
      64:	mov	w17, wzr
      68:	mov	w19, wzr
      6c:	mov	w4, wzr
      70:	mov	w2, wzr
      74:	mov	w18, wzr
      78:	mov	w15, wzr
      7c:	mov	w5, wzr
      80:	mov	w6, wzr
      84:	mov	w1, wzr
      88:	mov	w20, wzr
      8c:	mov	w10, wzr
      90:	movi	v0.2d, #0x0
      94:	stur	xzr, [x29, #-24]
      98:	stur	xzr, [x29, #-36]
      9c:	stur	q0, [x22, #92]
      a0:	stp	q0, q0, [x22, #64]
      a4:	stp	q0, q0, [x22, #32]
      a8:	stp	q0, q0, [x22]
      ac:	b	f4 <BZ2_decompress+0xf4>
      b0:	ldp	w9, w18, [x22, #24]
      b4:	ldp	w10, w20, [x22]
      b8:	ldp	w1, w6, [x22, #8]
      bc:	ldp	w5, w15, [x22, #16]
      c0:	stur	w9, [x29, #-32]
      c4:	ldp	w25, w9, [x22, #56]
      c8:	ldp	w2, w4, [x22, #32]
      cc:	ldp	w19, w17, [x22, #40]
      d0:	ldp	w26, w3, [x22, #48]
      d4:	stur	w9, [x29, #-36]
      d8:	ldur	x9, [x22, #84]
      dc:	ldp	w16, w30, [x22, #64]
      e0:	ldp	w14, w28, [x22, #72]
      e4:	ldr	w24, [x22, #80]
      e8:	ldur	x23, [x22, #92]
      ec:	ldur	x7, [x22, #100]
      f0:	stur	x9, [x29, #-24]
      f4:	cmp	w8, #0x28
      f8:	stur	x10, [x29, #-16]
      fc:	b.hi	14c <BZ2_decompress+0x14c>  // b.pmore
     100:	adrp	x10, 0 <BZ2_decompress>
     104:	add	x10, x10, #0x0
     108:	adr	x9, 118 <BZ2_decompress+0x118>
     10c:	ldrh	w11, [x10, x8, lsl #1]
     110:	add	x9, x9, x11, lsl #2
     114:	br	x9
     118:	ldr	w8, [x21, #36]
     11c:	mov	w9, #0xa                   	// #10
     120:	str	w9, [x21, #8]
     124:	cmp	w8, #0x8
     128:	b.lt	5f4 <BZ2_decompress+0x5f4>  // b.tstop
     12c:	ldr	w9, [x21, #32]
     130:	sub	w8, w8, #0x8
     134:	lsr	w9, w9, w8
     138:	and	w9, w9, #0xff
     13c:	cmp	w9, #0x42
     140:	str	w8, [x21, #36]
     144:	b.eq	1ec <BZ2_decompress+0x1ec>  // b.none
     148:	b	284 <BZ2_decompress+0x284>
     14c:	mov	w0, #0xfa1                 	// #4001
     150:	str	w6, [sp, #32]
     154:	stur	w4, [x29, #-56]
     158:	str	w24, [sp, #52]
     15c:	stp	w14, w15, [x29, #-44]
     160:	stur	w26, [x29, #-48]
     164:	str	x28, [sp, #40]
     168:	stur	w25, [x29, #-60]
     16c:	mov	w25, w5
     170:	stur	w20, [x29, #-52]
     174:	str	x19, [sp, #56]
     178:	mov	x19, x7
     17c:	str	w3, [sp, #36]
     180:	mov	w21, w30
     184:	mov	x26, x16
     188:	mov	x27, x17
     18c:	mov	x20, x18
     190:	mov	w24, w1
     194:	mov	w28, w2
     198:	bl	0 <BZ2_bz__AssertH__fail>
     19c:	mov	w0, #0xfa2                 	// #4002
     1a0:	bl	0 <BZ2_bz__AssertH__fail>
     1a4:	mov	w2, w28
     1a8:	mov	w1, w24
     1ac:	mov	x18, x20
     1b0:	mov	x16, x26
     1b4:	ldp	w6, w3, [sp, #32]
     1b8:	mov	x7, x19
     1bc:	ldr	x19, [sp, #56]
     1c0:	ldp	w20, w26, [x29, #-52]
     1c4:	mov	w5, w25
     1c8:	ldp	w25, w4, [x29, #-60]
     1cc:	ldr	x28, [sp, #40]
     1d0:	ldp	w14, w15, [x29, #-44]
     1d4:	ldr	w24, [sp, #52]
     1d8:	mov	x17, x27
     1dc:	mov	w30, w21
     1e0:	mov	w0, wzr
     1e4:	b	174c <BZ2_decompress+0x174c>
     1e8:	ldr	w8, [x21, #36]
     1ec:	mov	w9, #0xb                   	// #11
     1f0:	cmp	w8, #0x8
     1f4:	str	w9, [x21, #8]
     1f8:	b.lt	44c <BZ2_decompress+0x44c>  // b.tstop
     1fc:	ldr	w9, [x21, #32]
     200:	sub	w8, w8, #0x8
     204:	lsr	w9, w9, w8
     208:	and	w9, w9, #0xff
     20c:	cmp	w9, #0x5a
     210:	str	w8, [x21, #36]
     214:	b.eq	220 <BZ2_decompress+0x220>  // b.none
     218:	b	284 <BZ2_decompress+0x284>
     21c:	ldr	w8, [x21, #36]
     220:	mov	w9, #0xc                   	// #12
     224:	cmp	w8, #0x8
     228:	str	w9, [x21, #8]
     22c:	b.lt	3f0 <BZ2_decompress+0x3f0>  // b.tstop
     230:	ldr	w9, [x21, #32]
     234:	sub	w8, w8, #0x8
     238:	lsr	w9, w9, w8
     23c:	and	w9, w9, #0xff
     240:	cmp	w9, #0x68
     244:	str	w8, [x21, #36]
     248:	b.eq	254 <BZ2_decompress+0x254>  // b.none
     24c:	b	284 <BZ2_decompress+0x284>
     250:	ldr	w8, [x21, #36]
     254:	mov	w9, #0xd                   	// #13
     258:	cmp	w8, #0x8
     25c:	str	w9, [x21, #8]
     260:	b.lt	394 <BZ2_decompress+0x394>  // b.tstop
     264:	ldr	w9, [x21, #32]
     268:	sub	w10, w8, #0x8
     26c:	lsr	w8, w9, w10
     270:	and	w8, w8, #0xff
     274:	sub	w9, w8, #0x31
     278:	cmp	w9, #0x8
     27c:	stp	w10, w8, [x21, #36]
     280:	b.ls	50c <BZ2_decompress+0x50c>  // b.plast
     284:	mov	w0, #0xfffffffb            	// #-5
     288:	b	174c <BZ2_decompress+0x174c>
     28c:	ldr	w8, [x21, #36]
     290:	b	6d8 <BZ2_decompress+0x6d8>
     294:	ldr	w8, [x21, #36]
     298:	b	704 <BZ2_decompress+0x704>
     29c:	ldr	w8, [x21, #36]
     2a0:	b	730 <BZ2_decompress+0x730>
     2a4:	ldr	w8, [x21, #36]
     2a8:	b	75c <BZ2_decompress+0x75c>
     2ac:	ldr	w8, [x21, #36]
     2b0:	b	788 <BZ2_decompress+0x788>
     2b4:	ldr	w8, [x21, #36]
     2b8:	b	804 <BZ2_decompress+0x804>
     2bc:	ldr	w8, [x21, #36]
     2c0:	b	830 <BZ2_decompress+0x830>
     2c4:	ldr	w8, [x21, #36]
     2c8:	b	85c <BZ2_decompress+0x85c>
     2cc:	ldr	w8, [x21, #36]
     2d0:	b	888 <BZ2_decompress+0x888>
     2d4:	ldr	w8, [x21, #36]
     2d8:	b	8b4 <BZ2_decompress+0x8b4>
     2dc:	ldr	w8, [x21, #36]
     2e0:	b	8e0 <BZ2_decompress+0x8e0>
     2e4:	ldr	w8, [x21, #36]
     2e8:	b	90c <BZ2_decompress+0x90c>
     2ec:	ldr	w8, [x21, #36]
     2f0:	mov	w9, #0x1f                  	// #31
     2f4:	cmp	w8, #0xf
     2f8:	str	w9, [x21, #8]
     2fc:	b.lt	4a8 <BZ2_decompress+0x4a8>  // b.tstop
     300:	ldr	w10, [x21, #32]
     304:	sub	w8, w8, #0xf
     308:	lsr	w10, w10, w8
     30c:	mov	w9, wzr
     310:	ands	w15, w10, #0x7fff
     314:	str	w8, [x21, #36]
     318:	b.ne	1988 <BZ2_decompress+0x1988>  // b.any
     31c:	mov	w0, #0xfffffffc            	// #-4
     320:	mov	w15, w9
     324:	b	174c <BZ2_decompress+0x174c>
     328:	ldr	w8, [x21, #36]
     32c:	ldur	x0, [x29, #-16]
     330:	b	20c8 <BZ2_decompress+0x20c8>
     334:	ldr	w8, [x21, #36]
     338:	b	1564 <BZ2_decompress+0x1564>
     33c:	ldr	w8, [x21, #36]
     340:	b	1614 <BZ2_decompress+0x1614>
     344:	ldr	w8, [x21, #36]
     348:	b	16a8 <BZ2_decompress+0x16a8>
     34c:	ldr	w8, [x21, #36]
     350:	b	ae4 <BZ2_decompress+0xae4>
     354:	ldr	w8, [x21, #36]
     358:	b	b10 <BZ2_decompress+0xb10>
     35c:	ldr	w8, [x21, #36]
     360:	b	b3c <BZ2_decompress+0xb3c>
     364:	ldr	w8, [x21, #36]
     368:	b	b68 <BZ2_decompress+0xb68>
     36c:	ldr	w8, [x21, #36]
     370:	b	b94 <BZ2_decompress+0xb94>
     374:	ldr	w8, [x21, #36]
     378:	b	bc4 <BZ2_decompress+0xbc4>
     37c:	ldr	w8, [x21, #36]
     380:	b	bf0 <BZ2_decompress+0xbf0>
     384:	ldr	w8, [x21, #36]
     388:	b	c1c <BZ2_decompress+0xc1c>
     38c:	ldr	w8, [x21, #36]
     390:	b	c48 <BZ2_decompress+0xc48>
     394:	ldr	w9, [x27, #8]
     398:	sub	w10, w9, #0x1
     39c:	b	3ac <BZ2_decompress+0x3ac>
     3a0:	cmp	w8, #0x8
     3a4:	sub	w10, w10, #0x1
     3a8:	b.pl	268 <BZ2_decompress+0x268>  // b.nfrst
     3ac:	cmn	w10, #0x1
     3b0:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
     3b4:	ldr	x11, [x27]
     3b8:	ldr	w12, [x21, #32]
     3bc:	add	w8, w8, #0x8
     3c0:	ldrb	w9, [x11], #1
     3c4:	bfi	w9, w12, #8, #24
     3c8:	stp	w9, w8, [x21, #32]
     3cc:	ldr	w12, [x27, #12]
     3d0:	str	x11, [x27]
     3d4:	adds	w11, w12, #0x1
     3d8:	stp	w10, w11, [x27, #8]
     3dc:	b.cc	3a0 <BZ2_decompress+0x3a0>  // b.lo, b.ul, b.last
     3e0:	ldr	w11, [x27, #16]
     3e4:	add	w11, w11, #0x1
     3e8:	str	w11, [x27, #16]
     3ec:	b	3a0 <BZ2_decompress+0x3a0>
     3f0:	ldr	w9, [x27, #8]
     3f4:	sub	w10, w9, #0x1
     3f8:	b	408 <BZ2_decompress+0x408>
     3fc:	cmp	w8, #0x8
     400:	sub	w10, w10, #0x1
     404:	b.pl	234 <BZ2_decompress+0x234>  // b.nfrst
     408:	cmn	w10, #0x1
     40c:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
     410:	ldr	x11, [x27]
     414:	ldr	w12, [x21, #32]
     418:	add	w8, w8, #0x8
     41c:	ldrb	w9, [x11], #1
     420:	bfi	w9, w12, #8, #24
     424:	stp	w9, w8, [x21, #32]
     428:	ldr	w12, [x27, #12]
     42c:	str	x11, [x27]
     430:	adds	w11, w12, #0x1
     434:	stp	w10, w11, [x27, #8]
     438:	b.cc	3fc <BZ2_decompress+0x3fc>  // b.lo, b.ul, b.last
     43c:	ldr	w11, [x27, #16]
     440:	add	w11, w11, #0x1
     444:	str	w11, [x27, #16]
     448:	b	3fc <BZ2_decompress+0x3fc>
     44c:	ldr	w9, [x27, #8]
     450:	sub	w10, w9, #0x1
     454:	b	464 <BZ2_decompress+0x464>
     458:	cmp	w8, #0x8
     45c:	sub	w10, w10, #0x1
     460:	b.pl	200 <BZ2_decompress+0x200>  // b.nfrst
     464:	cmn	w10, #0x1
     468:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
     46c:	ldr	x11, [x27]
     470:	ldr	w12, [x21, #32]
     474:	add	w8, w8, #0x8
     478:	ldrb	w9, [x11], #1
     47c:	bfi	w9, w12, #8, #24
     480:	stp	w9, w8, [x21, #32]
     484:	ldr	w12, [x27, #12]
     488:	str	x11, [x27]
     48c:	adds	w11, w12, #0x1
     490:	stp	w10, w11, [x27, #8]
     494:	b.cc	458 <BZ2_decompress+0x458>  // b.lo, b.ul, b.last
     498:	ldr	w11, [x27, #16]
     49c:	add	w11, w11, #0x1
     4a0:	str	w11, [x27, #16]
     4a4:	b	458 <BZ2_decompress+0x458>
     4a8:	ldr	x9, [x21]
     4ac:	ldr	w10, [x9, #8]
     4b0:	sub	w11, w10, #0x1
     4b4:	b	4c8 <BZ2_decompress+0x4c8>
     4b8:	sub	w12, w8, #0x8
     4bc:	cmp	w12, #0x6
     4c0:	sub	w11, w11, #0x1
     4c4:	b.gt	304 <BZ2_decompress+0x304>
     4c8:	cmn	w11, #0x1
     4cc:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
     4d0:	ldr	x12, [x9]
     4d4:	ldr	w13, [x21, #32]
     4d8:	add	w8, w8, #0x8
     4dc:	ldrb	w10, [x12], #1
     4e0:	bfi	w10, w13, #8, #24
     4e4:	stp	w10, w8, [x21, #32]
     4e8:	ldr	w13, [x9, #12]
     4ec:	str	x12, [x9]
     4f0:	adds	w12, w13, #0x1
     4f4:	stp	w11, w12, [x9, #8]
     4f8:	b.cc	4b8 <BZ2_decompress+0x4b8>  // b.lo, b.ul, b.last
     4fc:	ldr	w12, [x9, #16]
     500:	add	w12, w12, #0x1
     504:	str	w12, [x9, #16]
     508:	b	4b8 <BZ2_decompress+0x4b8>
     50c:	sub	w9, w8, #0x30
     510:	stp	w20, w26, [x29, #-52]
     514:	str	w9, [x21, #40]
     518:	ldrb	w10, [x21, #44]
     51c:	ldr	x8, [x27, #56]
     520:	ldr	x0, [x27, #72]
     524:	str	x19, [sp, #56]
     528:	mov	x19, x16
     52c:	mov	w26, w30
     530:	str	x23, [sp, #24]
     534:	mov	x20, x7
     538:	stur	w25, [x29, #-60]
     53c:	mov	w23, w3
     540:	mov	w25, w6
     544:	stur	w14, [x29, #-44]
     548:	str	w2, [sp, #52]
     54c:	str	w1, [sp, #36]
     550:	str	x18, [sp, #40]
     554:	str	x17, [sp, #16]
     558:	stur	w15, [x29, #-40]
     55c:	str	w5, [sp, #32]
     560:	stur	w4, [x29, #-56]
     564:	cbz	w10, 650 <BZ2_decompress+0x650>
     568:	mov	w10, #0xd40                 	// #3392
     56c:	movk	w10, #0x3, lsl #16
     570:	mul	w1, w9, w10
     574:	mov	w2, #0x1                   	// #1
     578:	blr	x8
     57c:	ldr	w8, [x21, #40]
     580:	str	x0, [x21, #3160]
     584:	ldr	x9, [x27, #56]
     588:	ldr	x0, [x27, #72]
     58c:	mov	w10, #0x86a0                	// #34464
     590:	movk	w10, #0x1, lsl #16
     594:	mul	w8, w8, w10
     598:	asr	w1, w8, #1
     59c:	mov	w2, #0x1                   	// #1
     5a0:	blr	x9
     5a4:	mov	x8, x0
     5a8:	str	x0, [x21, #3168]
     5ac:	mov	w0, #0xfffffffd            	// #-3
     5b0:	cbz	x8, 13a8 <BZ2_decompress+0x13a8>
     5b4:	ldr	x8, [x21, #3160]
     5b8:	mov	w6, w25
     5bc:	mov	w3, w23
     5c0:	ldp	w25, w4, [x29, #-60]
     5c4:	ldp	w5, w1, [sp, #32]
     5c8:	mov	x7, x20
     5cc:	ldp	x17, x23, [sp, #16]
     5d0:	mov	w30, w26
     5d4:	ldp	w14, w15, [x29, #-44]
     5d8:	ldp	w20, w26, [x29, #-52]
     5dc:	mov	x16, x19
     5e0:	ldr	x19, [sp, #56]
     5e4:	ldr	x18, [sp, #40]
     5e8:	ldr	w2, [sp, #52]
     5ec:	cbnz	x8, 6a0 <BZ2_decompress+0x6a0>
     5f0:	b	174c <BZ2_decompress+0x174c>
     5f4:	ldr	w9, [x27, #8]
     5f8:	sub	w10, w9, #0x1
     5fc:	b	60c <BZ2_decompress+0x60c>
     600:	cmp	w8, #0x8
     604:	sub	w10, w10, #0x1
     608:	b.pl	130 <BZ2_decompress+0x130>  // b.nfrst
     60c:	cmn	w10, #0x1
     610:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
     614:	ldr	x11, [x27]
     618:	ldr	w12, [x21, #32]
     61c:	add	w8, w8, #0x8
     620:	ldrb	w9, [x11], #1
     624:	bfi	w9, w12, #8, #24
     628:	stp	w9, w8, [x21, #32]
     62c:	ldr	w12, [x27, #12]
     630:	str	x11, [x27]
     634:	adds	w11, w12, #0x1
     638:	stp	w10, w11, [x27, #8]
     63c:	b.cc	600 <BZ2_decompress+0x600>  // b.lo, b.ul, b.last
     640:	ldr	w11, [x27, #16]
     644:	add	w11, w11, #0x1
     648:	str	w11, [x27, #16]
     64c:	b	600 <BZ2_decompress+0x600>
     650:	mov	w10, #0x1a80                	// #6784
     654:	movk	w10, #0x6, lsl #16
     658:	mul	w1, w9, w10
     65c:	mov	w2, #0x1                   	// #1
     660:	blr	x8
     664:	str	x0, [x21, #3152]
     668:	mov	w6, w25
     66c:	mov	w3, w23
     670:	ldp	w25, w4, [x29, #-60]
     674:	ldp	w5, w1, [sp, #32]
     678:	mov	x7, x20
     67c:	ldp	x17, x23, [sp, #16]
     680:	mov	w30, w26
     684:	ldp	w14, w15, [x29, #-44]
     688:	ldp	w20, w26, [x29, #-52]
     68c:	mov	x16, x19
     690:	ldr	x19, [sp, #56]
     694:	ldr	x18, [sp, #40]
     698:	ldr	w2, [sp, #52]
     69c:	cbz	x0, 13e4 <BZ2_decompress+0x13e4>
     6a0:	ldr	w8, [x21, #36]
     6a4:	mov	w9, #0xe                   	// #14
     6a8:	str	w9, [x21, #8]
     6ac:	cmp	w8, #0x8
     6b0:	b.lt	1348 <BZ2_decompress+0x1348>  // b.tstop
     6b4:	ldr	w10, [x21, #32]
     6b8:	sub	w8, w8, #0x8
     6bc:	lsr	w9, w10, w8
     6c0:	and	w9, w9, #0xff
     6c4:	cmp	w9, #0x17
     6c8:	str	w8, [x21, #36]
     6cc:	b.eq	ae4 <BZ2_decompress+0xae4>  // b.none
     6d0:	cmp	w9, #0x31
     6d4:	b.ne	1748 <BZ2_decompress+0x1748>  // b.any
     6d8:	mov	w9, #0xf                   	// #15
     6dc:	cmp	w8, #0x8
     6e0:	str	w9, [x21, #8]
     6e4:	b.lt	1288 <BZ2_decompress+0x1288>  // b.tstop
     6e8:	ldr	w10, [x21, #32]
     6ec:	sub	w8, w8, #0x8
     6f0:	lsr	w9, w10, w8
     6f4:	and	w9, w9, #0xff
     6f8:	cmp	w9, #0x41
     6fc:	str	w8, [x21, #36]
     700:	b.ne	1748 <BZ2_decompress+0x1748>  // b.any
     704:	mov	w9, #0x10                  	// #16
     708:	cmp	w8, #0x8
     70c:	str	w9, [x21, #8]
     710:	b.lt	11c8 <BZ2_decompress+0x11c8>  // b.tstop
     714:	ldr	w10, [x21, #32]
     718:	sub	w8, w8, #0x8
     71c:	lsr	w9, w10, w8
     720:	and	w9, w9, #0xff
     724:	cmp	w9, #0x59
     728:	str	w8, [x21, #36]
     72c:	b.ne	1748 <BZ2_decompress+0x1748>  // b.any
     730:	mov	w9, #0x11                  	// #17
     734:	cmp	w8, #0x8
     738:	str	w9, [x21, #8]
     73c:	b.lt	1108 <BZ2_decompress+0x1108>  // b.tstop
     740:	ldr	w10, [x21, #32]
     744:	sub	w8, w8, #0x8
     748:	lsr	w9, w10, w8
     74c:	and	w9, w9, #0xff
     750:	cmp	w9, #0x26
     754:	str	w8, [x21, #36]
     758:	b.ne	1748 <BZ2_decompress+0x1748>  // b.any
     75c:	mov	w9, #0x12                  	// #18
     760:	cmp	w8, #0x8
     764:	str	w9, [x21, #8]
     768:	b.lt	1048 <BZ2_decompress+0x1048>  // b.tstop
     76c:	ldr	w10, [x21, #32]
     770:	sub	w8, w8, #0x8
     774:	lsr	w9, w10, w8
     778:	and	w9, w9, #0xff
     77c:	cmp	w9, #0x53
     780:	str	w8, [x21, #36]
     784:	b.ne	1748 <BZ2_decompress+0x1748>  // b.any
     788:	mov	w9, #0x13                  	// #19
     78c:	cmp	w8, #0x8
     790:	str	w9, [x21, #8]
     794:	b.lt	f88 <BZ2_decompress+0xf88>  // b.tstop
     798:	ldr	w10, [x21, #32]
     79c:	sub	w8, w8, #0x8
     7a0:	lsr	w9, w10, w8
     7a4:	and	w9, w9, #0xff
     7a8:	cmp	w9, #0x59
     7ac:	str	w8, [x21, #36]
     7b0:	b.ne	1748 <BZ2_decompress+0x1748>  // b.any
     7b4:	ldp	w8, w9, [x21, #48]
     7b8:	mov	w27, w2
     7bc:	add	w2, w8, #0x1
     7c0:	cmp	w9, #0x2
     7c4:	str	w2, [x21, #48]
     7c8:	b.ge	13ec <BZ2_decompress+0x13ec>  // b.tcont
     7cc:	mov	w2, w27
     7d0:	str	wzr, [x21, #3176]
     7d4:	ldr	w8, [x21, #36]
     7d8:	mov	w9, #0x14                  	// #20
     7dc:	str	w9, [x21, #8]
     7e0:	cmp	w8, #0x8
     7e4:	b.lt	ec8 <BZ2_decompress+0xec8>  // b.tstop
     7e8:	ldr	w9, [x21, #32]
     7ec:	ldr	w10, [x21, #3176]
     7f0:	sub	w8, w8, #0x8
     7f4:	lsr	w9, w9, w8
     7f8:	str	w8, [x21, #36]
     7fc:	bfi	w9, w10, #8, #24
     800:	str	w9, [x21, #3176]
     804:	mov	w9, #0x15                  	// #21
     808:	cmp	w8, #0x8
     80c:	str	w9, [x21, #8]
     810:	b.lt	e08 <BZ2_decompress+0xe08>  // b.tstop
     814:	ldr	w9, [x21, #32]
     818:	ldr	w10, [x21, #3176]
     81c:	sub	w8, w8, #0x8
     820:	lsr	w9, w9, w8
     824:	str	w8, [x21, #36]
     828:	bfi	w9, w10, #8, #24
     82c:	str	w9, [x21, #3176]
     830:	mov	w9, #0x16                  	// #22
     834:	cmp	w8, #0x8
     838:	str	w9, [x21, #8]
     83c:	b.lt	ce4 <BZ2_decompress+0xce4>  // b.tstop
     840:	ldr	w9, [x21, #32]
     844:	ldr	w10, [x21, #3176]
     848:	sub	w8, w8, #0x8
     84c:	lsr	w9, w9, w8
     850:	str	w8, [x21, #36]
     854:	bfi	w9, w10, #8, #24
     858:	str	w9, [x21, #3176]
     85c:	mov	w9, #0x17                  	// #23
     860:	cmp	w8, #0x8
     864:	str	w9, [x21, #8]
     868:	b.lt	a84 <BZ2_decompress+0xa84>  // b.tstop
     86c:	ldr	w9, [x21, #32]
     870:	ldr	w10, [x21, #3176]
     874:	sub	w8, w8, #0x8
     878:	lsr	w9, w9, w8
     87c:	str	w8, [x21, #36]
     880:	bfi	w9, w10, #8, #24
     884:	str	w9, [x21, #3176]
     888:	mov	w9, #0x18                  	// #24
     88c:	cmp	w8, #0x1
     890:	str	w9, [x21, #8]
     894:	b.lt	da4 <BZ2_decompress+0xda4>  // b.tstop
     898:	ldr	w10, [x21, #32]
     89c:	sub	w8, w8, #0x1
     8a0:	lsr	w9, w10, w8
     8a4:	and	w9, w9, #0x1
     8a8:	str	w8, [x21, #36]
     8ac:	strb	w9, [x21, #20]
     8b0:	str	wzr, [x21, #56]
     8b4:	mov	w9, #0x19                  	// #25
     8b8:	cmp	w8, #0x8
     8bc:	str	w9, [x21, #8]
     8c0:	b.lt	a24 <BZ2_decompress+0xa24>  // b.tstop
     8c4:	ldr	w9, [x21, #32]
     8c8:	ldr	w10, [x21, #56]
     8cc:	sub	w8, w8, #0x8
     8d0:	lsr	w9, w9, w8
     8d4:	str	w8, [x21, #36]
     8d8:	bfi	w9, w10, #8, #24
     8dc:	str	w9, [x21, #56]
     8e0:	mov	w9, #0x1a                  	// #26
     8e4:	cmp	w8, #0x8
     8e8:	str	w9, [x21, #8]
     8ec:	b.lt	9c4 <BZ2_decompress+0x9c4>  // b.tstop
     8f0:	ldr	w9, [x21, #32]
     8f4:	ldr	w10, [x21, #56]
     8f8:	sub	w8, w8, #0x8
     8fc:	lsr	w9, w9, w8
     900:	str	w8, [x21, #36]
     904:	bfi	w9, w10, #8, #24
     908:	str	w9, [x21, #56]
     90c:	mov	w9, #0x1b                  	// #27
     910:	cmp	w8, #0x8
     914:	str	w9, [x21, #8]
     918:	b.lt	964 <BZ2_decompress+0x964>  // b.tstop
     91c:	ldr	w10, [x21, #32]
     920:	ldr	w9, [x21, #56]
     924:	sub	w11, w8, #0x8
     928:	lsr	w8, w10, w11
     92c:	str	w11, [x21, #36]
     930:	bfi	w8, w9, #8, #24
     934:	str	w8, [x21, #56]
     938:	tbnz	w8, #31, 1748 <BZ2_decompress+0x1748>
     93c:	ldr	w9, [x21, #40]
     940:	mov	w10, #0x86a0                	// #34464
     944:	movk	w10, #0x1, lsl #16
     948:	mul	w9, w9, w10
     94c:	mov	w10, #0xa                   	// #10
     950:	orr	w9, w9, w10
     954:	cmp	w8, w9
     958:	b.gt	1748 <BZ2_decompress+0x1748>
     95c:	mov	w0, wzr
     960:	b	1484 <BZ2_decompress+0x1484>
     964:	ldr	x9, [x21]
     968:	ldr	w10, [x9, #8]
     96c:	sub	w11, w10, #0x1
     970:	b	980 <BZ2_decompress+0x980>
     974:	cmp	w8, #0x8
     978:	sub	w11, w11, #0x1
     97c:	b.pl	920 <BZ2_decompress+0x920>  // b.nfrst
     980:	cmn	w11, #0x1
     984:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
     988:	ldr	x12, [x9]
     98c:	ldr	w13, [x21, #32]
     990:	add	w8, w8, #0x8
     994:	ldrb	w10, [x12], #1
     998:	bfi	w10, w13, #8, #24
     99c:	stp	w10, w8, [x21, #32]
     9a0:	ldr	w13, [x9, #12]
     9a4:	str	x12, [x9]
     9a8:	adds	w12, w13, #0x1
     9ac:	stp	w11, w12, [x9, #8]
     9b0:	b.cc	974 <BZ2_decompress+0x974>  // b.lo, b.ul, b.last
     9b4:	ldr	w12, [x9, #16]
     9b8:	add	w12, w12, #0x1
     9bc:	str	w12, [x9, #16]
     9c0:	b	974 <BZ2_decompress+0x974>
     9c4:	ldr	x10, [x21]
     9c8:	ldr	w9, [x10, #8]
     9cc:	sub	w11, w9, #0x1
     9d0:	b	9e0 <BZ2_decompress+0x9e0>
     9d4:	cmp	w8, #0x8
     9d8:	sub	w11, w11, #0x1
     9dc:	b.pl	8f4 <BZ2_decompress+0x8f4>  // b.nfrst
     9e0:	cmn	w11, #0x1
     9e4:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
     9e8:	ldr	x12, [x10]
     9ec:	ldr	w13, [x21, #32]
     9f0:	add	w8, w8, #0x8
     9f4:	ldrb	w9, [x12], #1
     9f8:	bfi	w9, w13, #8, #24
     9fc:	stp	w9, w8, [x21, #32]
     a00:	ldr	w13, [x10, #12]
     a04:	str	x12, [x10]
     a08:	adds	w12, w13, #0x1
     a0c:	stp	w11, w12, [x10, #8]
     a10:	b.cc	9d4 <BZ2_decompress+0x9d4>  // b.lo, b.ul, b.last
     a14:	ldr	w12, [x10, #16]
     a18:	add	w12, w12, #0x1
     a1c:	str	w12, [x10, #16]
     a20:	b	9d4 <BZ2_decompress+0x9d4>
     a24:	ldr	x10, [x21]
     a28:	ldr	w9, [x10, #8]
     a2c:	sub	w11, w9, #0x1
     a30:	b	a40 <BZ2_decompress+0xa40>
     a34:	cmp	w8, #0x8
     a38:	sub	w11, w11, #0x1
     a3c:	b.pl	8c8 <BZ2_decompress+0x8c8>  // b.nfrst
     a40:	cmn	w11, #0x1
     a44:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
     a48:	ldr	x12, [x10]
     a4c:	ldr	w13, [x21, #32]
     a50:	add	w8, w8, #0x8
     a54:	ldrb	w9, [x12], #1
     a58:	bfi	w9, w13, #8, #24
     a5c:	stp	w9, w8, [x21, #32]
     a60:	ldr	w13, [x10, #12]
     a64:	str	x12, [x10]
     a68:	adds	w12, w13, #0x1
     a6c:	stp	w11, w12, [x10, #8]
     a70:	b.cc	a34 <BZ2_decompress+0xa34>  // b.lo, b.ul, b.last
     a74:	ldr	w12, [x10, #16]
     a78:	add	w12, w12, #0x1
     a7c:	str	w12, [x10, #16]
     a80:	b	a34 <BZ2_decompress+0xa34>
     a84:	ldr	x10, [x21]
     a88:	ldr	w9, [x10, #8]
     a8c:	sub	w11, w9, #0x1
     a90:	b	aa0 <BZ2_decompress+0xaa0>
     a94:	cmp	w8, #0x8
     a98:	sub	w11, w11, #0x1
     a9c:	b.pl	870 <BZ2_decompress+0x870>  // b.nfrst
     aa0:	cmn	w11, #0x1
     aa4:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
     aa8:	ldr	x12, [x10]
     aac:	ldr	w13, [x21, #32]
     ab0:	add	w8, w8, #0x8
     ab4:	ldrb	w9, [x12], #1
     ab8:	bfi	w9, w13, #8, #24
     abc:	stp	w9, w8, [x21, #32]
     ac0:	ldr	w13, [x10, #12]
     ac4:	str	x12, [x10]
     ac8:	adds	w12, w13, #0x1
     acc:	stp	w11, w12, [x10, #8]
     ad0:	b.cc	a94 <BZ2_decompress+0xa94>  // b.lo, b.ul, b.last
     ad4:	ldr	w12, [x10, #16]
     ad8:	add	w12, w12, #0x1
     adc:	str	w12, [x10, #16]
     ae0:	b	a94 <BZ2_decompress+0xa94>
     ae4:	mov	w9, #0x2a                  	// #42
     ae8:	cmp	w8, #0x8
     aec:	str	w9, [x21, #8]
     af0:	b.lt	12e8 <BZ2_decompress+0x12e8>  // b.tstop
     af4:	ldr	w10, [x21, #32]
     af8:	sub	w8, w8, #0x8
     afc:	lsr	w9, w10, w8
     b00:	and	w9, w9, #0xff
     b04:	cmp	w9, #0x72
     b08:	str	w8, [x21, #36]
     b0c:	b.ne	1748 <BZ2_decompress+0x1748>  // b.any
     b10:	mov	w9, #0x2b                  	// #43
     b14:	cmp	w8, #0x8
     b18:	str	w9, [x21, #8]
     b1c:	b.lt	1228 <BZ2_decompress+0x1228>  // b.tstop
     b20:	ldr	w10, [x21, #32]
     b24:	sub	w8, w8, #0x8
     b28:	lsr	w9, w10, w8
     b2c:	and	w9, w9, #0xff
     b30:	cmp	w9, #0x45
     b34:	str	w8, [x21, #36]
     b38:	b.ne	1748 <BZ2_decompress+0x1748>  // b.any
     b3c:	mov	w9, #0x2c                  	// #44
     b40:	cmp	w8, #0x8
     b44:	str	w9, [x21, #8]
     b48:	b.lt	1168 <BZ2_decompress+0x1168>  // b.tstop
     b4c:	ldr	w10, [x21, #32]
     b50:	sub	w8, w8, #0x8
     b54:	lsr	w9, w10, w8
     b58:	and	w9, w9, #0xff
     b5c:	cmp	w9, #0x38
     b60:	str	w8, [x21, #36]
     b64:	b.ne	1748 <BZ2_decompress+0x1748>  // b.any
     b68:	mov	w9, #0x2d                  	// #45
     b6c:	cmp	w8, #0x8
     b70:	str	w9, [x21, #8]
     b74:	b.lt	10a8 <BZ2_decompress+0x10a8>  // b.tstop
     b78:	ldr	w10, [x21, #32]
     b7c:	sub	w8, w8, #0x8
     b80:	lsr	w9, w10, w8
     b84:	and	w9, w9, #0xff
     b88:	cmp	w9, #0x50
     b8c:	str	w8, [x21, #36]
     b90:	b.ne	1748 <BZ2_decompress+0x1748>  // b.any
     b94:	mov	w9, #0x2e                  	// #46
     b98:	cmp	w8, #0x8
     b9c:	str	w9, [x21, #8]
     ba0:	b.lt	fe8 <BZ2_decompress+0xfe8>  // b.tstop
     ba4:	ldr	w10, [x21, #32]
     ba8:	sub	w8, w8, #0x8
     bac:	lsr	w9, w10, w8
     bb0:	and	w9, w9, #0xff
     bb4:	cmp	w9, #0x90
     bb8:	str	w8, [x21, #36]
     bbc:	b.ne	1748 <BZ2_decompress+0x1748>  // b.any
     bc0:	str	wzr, [x21, #3180]
     bc4:	mov	w9, #0x2f                  	// #47
     bc8:	cmp	w8, #0x8
     bcc:	str	w9, [x21, #8]
     bd0:	b.lt	f28 <BZ2_decompress+0xf28>  // b.tstop
     bd4:	ldr	w9, [x21, #32]
     bd8:	ldr	w10, [x21, #3180]
     bdc:	sub	w8, w8, #0x8
     be0:	lsr	w9, w9, w8
     be4:	str	w8, [x21, #36]
     be8:	bfi	w9, w10, #8, #24
     bec:	str	w9, [x21, #3180]
     bf0:	mov	w9, #0x30                  	// #48
     bf4:	cmp	w8, #0x8
     bf8:	str	w9, [x21, #8]
     bfc:	b.lt	e68 <BZ2_decompress+0xe68>  // b.tstop
     c00:	ldr	w9, [x21, #32]
     c04:	ldr	w10, [x21, #3180]
     c08:	sub	w8, w8, #0x8
     c0c:	lsr	w9, w9, w8
     c10:	str	w8, [x21, #36]
     c14:	bfi	w9, w10, #8, #24
     c18:	str	w9, [x21, #3180]
     c1c:	mov	w9, #0x31                  	// #49
     c20:	cmp	w8, #0x8
     c24:	str	w9, [x21, #8]
     c28:	b.lt	d44 <BZ2_decompress+0xd44>  // b.tstop
     c2c:	ldr	w9, [x21, #32]
     c30:	ldr	w10, [x21, #3180]
     c34:	sub	w8, w8, #0x8
     c38:	lsr	w9, w9, w8
     c3c:	str	w8, [x21, #36]
     c40:	bfi	w9, w10, #8, #24
     c44:	str	w9, [x21, #3180]
     c48:	mov	w9, #0x32                  	// #50
     c4c:	cmp	w8, #0x8
     c50:	str	w9, [x21, #8]
     c54:	b.lt	c84 <BZ2_decompress+0xc84>  // b.tstop
     c58:	ldr	w9, [x21, #32]
     c5c:	ldr	w10, [x21, #3180]
     c60:	sub	w8, w8, #0x8
     c64:	lsr	w9, w9, w8
     c68:	mov	w11, #0x1                   	// #1
     c6c:	bfi	w9, w10, #8, #24
     c70:	str	w8, [x21, #36]
     c74:	str	w11, [x21, #8]
     c78:	str	w9, [x21, #3180]
     c7c:	mov	w0, #0x4                   	// #4
     c80:	b	174c <BZ2_decompress+0x174c>
     c84:	ldr	x10, [x21]
     c88:	ldr	w9, [x10, #8]
     c8c:	sub	w11, w9, #0x1
     c90:	b	ca0 <BZ2_decompress+0xca0>
     c94:	cmp	w8, #0x8
     c98:	sub	w11, w11, #0x1
     c9c:	b.pl	c5c <BZ2_decompress+0xc5c>  // b.nfrst
     ca0:	cmn	w11, #0x1
     ca4:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
     ca8:	ldr	x12, [x10]
     cac:	ldr	w13, [x21, #32]
     cb0:	add	w8, w8, #0x8
     cb4:	ldrb	w9, [x12], #1
     cb8:	bfi	w9, w13, #8, #24
     cbc:	stp	w9, w8, [x21, #32]
     cc0:	ldr	w13, [x10, #12]
     cc4:	str	x12, [x10]
     cc8:	adds	w12, w13, #0x1
     ccc:	stp	w11, w12, [x10, #8]
     cd0:	b.cc	c94 <BZ2_decompress+0xc94>  // b.lo, b.ul, b.last
     cd4:	ldr	w12, [x10, #16]
     cd8:	add	w12, w12, #0x1
     cdc:	str	w12, [x10, #16]
     ce0:	b	c94 <BZ2_decompress+0xc94>
     ce4:	ldr	x10, [x21]
     ce8:	ldr	w9, [x10, #8]
     cec:	sub	w11, w9, #0x1
     cf0:	b	d00 <BZ2_decompress+0xd00>
     cf4:	cmp	w8, #0x8
     cf8:	sub	w11, w11, #0x1
     cfc:	b.pl	844 <BZ2_decompress+0x844>  // b.nfrst
     d00:	cmn	w11, #0x1
     d04:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
     d08:	ldr	x12, [x10]
     d0c:	ldr	w13, [x21, #32]
     d10:	add	w8, w8, #0x8
     d14:	ldrb	w9, [x12], #1
     d18:	bfi	w9, w13, #8, #24
     d1c:	stp	w9, w8, [x21, #32]
     d20:	ldr	w13, [x10, #12]
     d24:	str	x12, [x10]
     d28:	adds	w12, w13, #0x1
     d2c:	stp	w11, w12, [x10, #8]
     d30:	b.cc	cf4 <BZ2_decompress+0xcf4>  // b.lo, b.ul, b.last
     d34:	ldr	w12, [x10, #16]
     d38:	add	w12, w12, #0x1
     d3c:	str	w12, [x10, #16]
     d40:	b	cf4 <BZ2_decompress+0xcf4>
     d44:	ldr	x10, [x21]
     d48:	ldr	w9, [x10, #8]
     d4c:	sub	w11, w9, #0x1
     d50:	b	d60 <BZ2_decompress+0xd60>
     d54:	cmp	w8, #0x8
     d58:	sub	w11, w11, #0x1
     d5c:	b.pl	c30 <BZ2_decompress+0xc30>  // b.nfrst
     d60:	cmn	w11, #0x1
     d64:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
     d68:	ldr	x12, [x10]
     d6c:	ldr	w13, [x21, #32]
     d70:	add	w8, w8, #0x8
     d74:	ldrb	w9, [x12], #1
     d78:	bfi	w9, w13, #8, #24
     d7c:	stp	w9, w8, [x21, #32]
     d80:	ldr	w13, [x10, #12]
     d84:	str	x12, [x10]
     d88:	adds	w12, w13, #0x1
     d8c:	stp	w11, w12, [x10, #8]
     d90:	b.cc	d54 <BZ2_decompress+0xd54>  // b.lo, b.ul, b.last
     d94:	ldr	w12, [x10, #16]
     d98:	add	w12, w12, #0x1
     d9c:	str	w12, [x10, #16]
     da0:	b	d54 <BZ2_decompress+0xd54>
     da4:	ldr	x9, [x21]
     da8:	ldr	w10, [x9, #8]
     dac:	sub	w11, w10, #0x1
     db0:	b	dc4 <BZ2_decompress+0xdc4>
     db4:	sub	w12, w8, #0x8
     db8:	cmn	w12, #0x8
     dbc:	sub	w11, w11, #0x1
     dc0:	b.gt	89c <BZ2_decompress+0x89c>
     dc4:	cmn	w11, #0x1
     dc8:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
     dcc:	ldr	x12, [x9]
     dd0:	ldr	w13, [x21, #32]
     dd4:	add	w8, w8, #0x8
     dd8:	ldrb	w10, [x12], #1
     ddc:	bfi	w10, w13, #8, #24
     de0:	stp	w10, w8, [x21, #32]
     de4:	ldr	w13, [x9, #12]
     de8:	str	x12, [x9]
     dec:	adds	w12, w13, #0x1
     df0:	stp	w11, w12, [x9, #8]
     df4:	b.cc	db4 <BZ2_decompress+0xdb4>  // b.lo, b.ul, b.last
     df8:	ldr	w12, [x9, #16]
     dfc:	add	w12, w12, #0x1
     e00:	str	w12, [x9, #16]
     e04:	b	db4 <BZ2_decompress+0xdb4>
     e08:	ldr	x10, [x21]
     e0c:	ldr	w9, [x10, #8]
     e10:	sub	w11, w9, #0x1
     e14:	b	e24 <BZ2_decompress+0xe24>
     e18:	cmp	w8, #0x8
     e1c:	sub	w11, w11, #0x1
     e20:	b.pl	818 <BZ2_decompress+0x818>  // b.nfrst
     e24:	cmn	w11, #0x1
     e28:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
     e2c:	ldr	x12, [x10]
     e30:	ldr	w13, [x21, #32]
     e34:	add	w8, w8, #0x8
     e38:	ldrb	w9, [x12], #1
     e3c:	bfi	w9, w13, #8, #24
     e40:	stp	w9, w8, [x21, #32]
     e44:	ldr	w13, [x10, #12]
     e48:	str	x12, [x10]
     e4c:	adds	w12, w13, #0x1
     e50:	stp	w11, w12, [x10, #8]
     e54:	b.cc	e18 <BZ2_decompress+0xe18>  // b.lo, b.ul, b.last
     e58:	ldr	w12, [x10, #16]
     e5c:	add	w12, w12, #0x1
     e60:	str	w12, [x10, #16]
     e64:	b	e18 <BZ2_decompress+0xe18>
     e68:	ldr	x10, [x21]
     e6c:	ldr	w9, [x10, #8]
     e70:	sub	w11, w9, #0x1
     e74:	b	e84 <BZ2_decompress+0xe84>
     e78:	cmp	w8, #0x8
     e7c:	sub	w11, w11, #0x1
     e80:	b.pl	c04 <BZ2_decompress+0xc04>  // b.nfrst
     e84:	cmn	w11, #0x1
     e88:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
     e8c:	ldr	x12, [x10]
     e90:	ldr	w13, [x21, #32]
     e94:	add	w8, w8, #0x8
     e98:	ldrb	w9, [x12], #1
     e9c:	bfi	w9, w13, #8, #24
     ea0:	stp	w9, w8, [x21, #32]
     ea4:	ldr	w13, [x10, #12]
     ea8:	str	x12, [x10]
     eac:	adds	w12, w13, #0x1
     eb0:	stp	w11, w12, [x10, #8]
     eb4:	b.cc	e78 <BZ2_decompress+0xe78>  // b.lo, b.ul, b.last
     eb8:	ldr	w12, [x10, #16]
     ebc:	add	w12, w12, #0x1
     ec0:	str	w12, [x10, #16]
     ec4:	b	e78 <BZ2_decompress+0xe78>
     ec8:	ldr	x10, [x21]
     ecc:	ldr	w9, [x10, #8]
     ed0:	sub	w11, w9, #0x1
     ed4:	b	ee4 <BZ2_decompress+0xee4>
     ed8:	cmp	w8, #0x8
     edc:	sub	w11, w11, #0x1
     ee0:	b.pl	7ec <BZ2_decompress+0x7ec>  // b.nfrst
     ee4:	cmn	w11, #0x1
     ee8:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
     eec:	ldr	x12, [x10]
     ef0:	ldr	w13, [x21, #32]
     ef4:	add	w8, w8, #0x8
     ef8:	ldrb	w9, [x12], #1
     efc:	bfi	w9, w13, #8, #24
     f00:	stp	w9, w8, [x21, #32]
     f04:	ldr	w13, [x10, #12]
     f08:	str	x12, [x10]
     f0c:	adds	w12, w13, #0x1
     f10:	stp	w11, w12, [x10, #8]
     f14:	b.cc	ed8 <BZ2_decompress+0xed8>  // b.lo, b.ul, b.last
     f18:	ldr	w12, [x10, #16]
     f1c:	add	w12, w12, #0x1
     f20:	str	w12, [x10, #16]
     f24:	b	ed8 <BZ2_decompress+0xed8>
     f28:	ldr	x10, [x21]
     f2c:	ldr	w9, [x10, #8]
     f30:	sub	w11, w9, #0x1
     f34:	b	f44 <BZ2_decompress+0xf44>
     f38:	cmp	w8, #0x8
     f3c:	sub	w11, w11, #0x1
     f40:	b.pl	bd8 <BZ2_decompress+0xbd8>  // b.nfrst
     f44:	cmn	w11, #0x1
     f48:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
     f4c:	ldr	x12, [x10]
     f50:	ldr	w13, [x21, #32]
     f54:	add	w8, w8, #0x8
     f58:	ldrb	w9, [x12], #1
     f5c:	bfi	w9, w13, #8, #24
     f60:	stp	w9, w8, [x21, #32]
     f64:	ldr	w13, [x10, #12]
     f68:	str	x12, [x10]
     f6c:	adds	w12, w13, #0x1
     f70:	stp	w11, w12, [x10, #8]
     f74:	b.cc	f38 <BZ2_decompress+0xf38>  // b.lo, b.ul, b.last
     f78:	ldr	w12, [x10, #16]
     f7c:	add	w12, w12, #0x1
     f80:	str	w12, [x10, #16]
     f84:	b	f38 <BZ2_decompress+0xf38>
     f88:	ldr	x9, [x21]
     f8c:	ldr	w10, [x9, #8]
     f90:	sub	w11, w10, #0x1
     f94:	b	fa4 <BZ2_decompress+0xfa4>
     f98:	cmp	w8, #0x8
     f9c:	sub	w11, w11, #0x1
     fa0:	b.pl	79c <BZ2_decompress+0x79c>  // b.nfrst
     fa4:	cmn	w11, #0x1
     fa8:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
     fac:	ldr	x12, [x9]
     fb0:	ldr	w13, [x21, #32]
     fb4:	add	w8, w8, #0x8
     fb8:	ldrb	w10, [x12], #1
     fbc:	bfi	w10, w13, #8, #24
     fc0:	stp	w10, w8, [x21, #32]
     fc4:	ldr	w13, [x9, #12]
     fc8:	str	x12, [x9]
     fcc:	adds	w12, w13, #0x1
     fd0:	stp	w11, w12, [x9, #8]
     fd4:	b.cc	f98 <BZ2_decompress+0xf98>  // b.lo, b.ul, b.last
     fd8:	ldr	w12, [x9, #16]
     fdc:	add	w12, w12, #0x1
     fe0:	str	w12, [x9, #16]
     fe4:	b	f98 <BZ2_decompress+0xf98>
     fe8:	ldr	x9, [x21]
     fec:	ldr	w10, [x9, #8]
     ff0:	sub	w11, w10, #0x1
     ff4:	b	1004 <BZ2_decompress+0x1004>
     ff8:	cmp	w8, #0x8
     ffc:	sub	w11, w11, #0x1
    1000:	b.pl	ba8 <BZ2_decompress+0xba8>  // b.nfrst
    1004:	cmn	w11, #0x1
    1008:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
    100c:	ldr	x12, [x9]
    1010:	ldr	w13, [x21, #32]
    1014:	add	w8, w8, #0x8
    1018:	ldrb	w10, [x12], #1
    101c:	bfi	w10, w13, #8, #24
    1020:	stp	w10, w8, [x21, #32]
    1024:	ldr	w13, [x9, #12]
    1028:	str	x12, [x9]
    102c:	adds	w12, w13, #0x1
    1030:	stp	w11, w12, [x9, #8]
    1034:	b.cc	ff8 <BZ2_decompress+0xff8>  // b.lo, b.ul, b.last
    1038:	ldr	w12, [x9, #16]
    103c:	add	w12, w12, #0x1
    1040:	str	w12, [x9, #16]
    1044:	b	ff8 <BZ2_decompress+0xff8>
    1048:	ldr	x9, [x21]
    104c:	ldr	w10, [x9, #8]
    1050:	sub	w11, w10, #0x1
    1054:	b	1064 <BZ2_decompress+0x1064>
    1058:	cmp	w8, #0x8
    105c:	sub	w11, w11, #0x1
    1060:	b.pl	770 <BZ2_decompress+0x770>  // b.nfrst
    1064:	cmn	w11, #0x1
    1068:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
    106c:	ldr	x12, [x9]
    1070:	ldr	w13, [x21, #32]
    1074:	add	w8, w8, #0x8
    1078:	ldrb	w10, [x12], #1
    107c:	bfi	w10, w13, #8, #24
    1080:	stp	w10, w8, [x21, #32]
    1084:	ldr	w13, [x9, #12]
    1088:	str	x12, [x9]
    108c:	adds	w12, w13, #0x1
    1090:	stp	w11, w12, [x9, #8]
    1094:	b.cc	1058 <BZ2_decompress+0x1058>  // b.lo, b.ul, b.last
    1098:	ldr	w12, [x9, #16]
    109c:	add	w12, w12, #0x1
    10a0:	str	w12, [x9, #16]
    10a4:	b	1058 <BZ2_decompress+0x1058>
    10a8:	ldr	x9, [x21]
    10ac:	ldr	w10, [x9, #8]
    10b0:	sub	w11, w10, #0x1
    10b4:	b	10c4 <BZ2_decompress+0x10c4>
    10b8:	cmp	w8, #0x8
    10bc:	sub	w11, w11, #0x1
    10c0:	b.pl	b7c <BZ2_decompress+0xb7c>  // b.nfrst
    10c4:	cmn	w11, #0x1
    10c8:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
    10cc:	ldr	x12, [x9]
    10d0:	ldr	w13, [x21, #32]
    10d4:	add	w8, w8, #0x8
    10d8:	ldrb	w10, [x12], #1
    10dc:	bfi	w10, w13, #8, #24
    10e0:	stp	w10, w8, [x21, #32]
    10e4:	ldr	w13, [x9, #12]
    10e8:	str	x12, [x9]
    10ec:	adds	w12, w13, #0x1
    10f0:	stp	w11, w12, [x9, #8]
    10f4:	b.cc	10b8 <BZ2_decompress+0x10b8>  // b.lo, b.ul, b.last
    10f8:	ldr	w12, [x9, #16]
    10fc:	add	w12, w12, #0x1
    1100:	str	w12, [x9, #16]
    1104:	b	10b8 <BZ2_decompress+0x10b8>
    1108:	ldr	x9, [x21]
    110c:	ldr	w10, [x9, #8]
    1110:	sub	w11, w10, #0x1
    1114:	b	1124 <BZ2_decompress+0x1124>
    1118:	cmp	w8, #0x8
    111c:	sub	w11, w11, #0x1
    1120:	b.pl	744 <BZ2_decompress+0x744>  // b.nfrst
    1124:	cmn	w11, #0x1
    1128:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
    112c:	ldr	x12, [x9]
    1130:	ldr	w13, [x21, #32]
    1134:	add	w8, w8, #0x8
    1138:	ldrb	w10, [x12], #1
    113c:	bfi	w10, w13, #8, #24
    1140:	stp	w10, w8, [x21, #32]
    1144:	ldr	w13, [x9, #12]
    1148:	str	x12, [x9]
    114c:	adds	w12, w13, #0x1
    1150:	stp	w11, w12, [x9, #8]
    1154:	b.cc	1118 <BZ2_decompress+0x1118>  // b.lo, b.ul, b.last
    1158:	ldr	w12, [x9, #16]
    115c:	add	w12, w12, #0x1
    1160:	str	w12, [x9, #16]
    1164:	b	1118 <BZ2_decompress+0x1118>
    1168:	ldr	x9, [x21]
    116c:	ldr	w10, [x9, #8]
    1170:	sub	w11, w10, #0x1
    1174:	b	1184 <BZ2_decompress+0x1184>
    1178:	cmp	w8, #0x8
    117c:	sub	w11, w11, #0x1
    1180:	b.pl	b50 <BZ2_decompress+0xb50>  // b.nfrst
    1184:	cmn	w11, #0x1
    1188:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
    118c:	ldr	x12, [x9]
    1190:	ldr	w13, [x21, #32]
    1194:	add	w8, w8, #0x8
    1198:	ldrb	w10, [x12], #1
    119c:	bfi	w10, w13, #8, #24
    11a0:	stp	w10, w8, [x21, #32]
    11a4:	ldr	w13, [x9, #12]
    11a8:	str	x12, [x9]
    11ac:	adds	w12, w13, #0x1
    11b0:	stp	w11, w12, [x9, #8]
    11b4:	b.cc	1178 <BZ2_decompress+0x1178>  // b.lo, b.ul, b.last
    11b8:	ldr	w12, [x9, #16]
    11bc:	add	w12, w12, #0x1
    11c0:	str	w12, [x9, #16]
    11c4:	b	1178 <BZ2_decompress+0x1178>
    11c8:	ldr	x9, [x21]
    11cc:	ldr	w10, [x9, #8]
    11d0:	sub	w11, w10, #0x1
    11d4:	b	11e4 <BZ2_decompress+0x11e4>
    11d8:	cmp	w8, #0x8
    11dc:	sub	w11, w11, #0x1
    11e0:	b.pl	718 <BZ2_decompress+0x718>  // b.nfrst
    11e4:	cmn	w11, #0x1
    11e8:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
    11ec:	ldr	x12, [x9]
    11f0:	ldr	w13, [x21, #32]
    11f4:	add	w8, w8, #0x8
    11f8:	ldrb	w10, [x12], #1
    11fc:	bfi	w10, w13, #8, #24
    1200:	stp	w10, w8, [x21, #32]
    1204:	ldr	w13, [x9, #12]
    1208:	str	x12, [x9]
    120c:	adds	w12, w13, #0x1
    1210:	stp	w11, w12, [x9, #8]
    1214:	b.cc	11d8 <BZ2_decompress+0x11d8>  // b.lo, b.ul, b.last
    1218:	ldr	w12, [x9, #16]
    121c:	add	w12, w12, #0x1
    1220:	str	w12, [x9, #16]
    1224:	b	11d8 <BZ2_decompress+0x11d8>
    1228:	ldr	x9, [x21]
    122c:	ldr	w10, [x9, #8]
    1230:	sub	w11, w10, #0x1
    1234:	b	1244 <BZ2_decompress+0x1244>
    1238:	cmp	w8, #0x8
    123c:	sub	w11, w11, #0x1
    1240:	b.pl	b24 <BZ2_decompress+0xb24>  // b.nfrst
    1244:	cmn	w11, #0x1
    1248:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
    124c:	ldr	x12, [x9]
    1250:	ldr	w13, [x21, #32]
    1254:	add	w8, w8, #0x8
    1258:	ldrb	w10, [x12], #1
    125c:	bfi	w10, w13, #8, #24
    1260:	stp	w10, w8, [x21, #32]
    1264:	ldr	w13, [x9, #12]
    1268:	str	x12, [x9]
    126c:	adds	w12, w13, #0x1
    1270:	stp	w11, w12, [x9, #8]
    1274:	b.cc	1238 <BZ2_decompress+0x1238>  // b.lo, b.ul, b.last
    1278:	ldr	w12, [x9, #16]
    127c:	add	w12, w12, #0x1
    1280:	str	w12, [x9, #16]
    1284:	b	1238 <BZ2_decompress+0x1238>
    1288:	ldr	x9, [x21]
    128c:	ldr	w10, [x9, #8]
    1290:	sub	w11, w10, #0x1
    1294:	b	12a4 <BZ2_decompress+0x12a4>
    1298:	cmp	w8, #0x8
    129c:	sub	w11, w11, #0x1
    12a0:	b.pl	6ec <BZ2_decompress+0x6ec>  // b.nfrst
    12a4:	cmn	w11, #0x1
    12a8:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
    12ac:	ldr	x12, [x9]
    12b0:	ldr	w13, [x21, #32]
    12b4:	add	w8, w8, #0x8
    12b8:	ldrb	w10, [x12], #1
    12bc:	bfi	w10, w13, #8, #24
    12c0:	stp	w10, w8, [x21, #32]
    12c4:	ldr	w13, [x9, #12]
    12c8:	str	x12, [x9]
    12cc:	adds	w12, w13, #0x1
    12d0:	stp	w11, w12, [x9, #8]
    12d4:	b.cc	1298 <BZ2_decompress+0x1298>  // b.lo, b.ul, b.last
    12d8:	ldr	w12, [x9, #16]
    12dc:	add	w12, w12, #0x1
    12e0:	str	w12, [x9, #16]
    12e4:	b	1298 <BZ2_decompress+0x1298>
    12e8:	ldr	x9, [x21]
    12ec:	ldr	w10, [x9, #8]
    12f0:	sub	w11, w10, #0x1
    12f4:	b	1304 <BZ2_decompress+0x1304>
    12f8:	cmp	w8, #0x8
    12fc:	sub	w11, w11, #0x1
    1300:	b.pl	af8 <BZ2_decompress+0xaf8>  // b.nfrst
    1304:	cmn	w11, #0x1
    1308:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
    130c:	ldr	x12, [x9]
    1310:	ldr	w13, [x21, #32]
    1314:	add	w8, w8, #0x8
    1318:	ldrb	w10, [x12], #1
    131c:	bfi	w10, w13, #8, #24
    1320:	stp	w10, w8, [x21, #32]
    1324:	ldr	w13, [x9, #12]
    1328:	str	x12, [x9]
    132c:	adds	w12, w13, #0x1
    1330:	stp	w11, w12, [x9, #8]
    1334:	b.cc	12f8 <BZ2_decompress+0x12f8>  // b.lo, b.ul, b.last
    1338:	ldr	w12, [x9, #16]
    133c:	add	w12, w12, #0x1
    1340:	str	w12, [x9, #16]
    1344:	b	12f8 <BZ2_decompress+0x12f8>
    1348:	ldr	x9, [x21]
    134c:	ldr	w10, [x9, #8]
    1350:	sub	w11, w10, #0x1
    1354:	b	1364 <BZ2_decompress+0x1364>
    1358:	cmp	w8, #0x8
    135c:	sub	w11, w11, #0x1
    1360:	b.pl	6b8 <BZ2_decompress+0x6b8>  // b.nfrst
    1364:	cmn	w11, #0x1
    1368:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
    136c:	ldr	x12, [x9]
    1370:	ldr	w13, [x21, #32]
    1374:	add	w8, w8, #0x8
    1378:	ldrb	w10, [x12], #1
    137c:	bfi	w10, w13, #8, #24
    1380:	stp	w10, w8, [x21, #32]
    1384:	ldr	w13, [x9, #12]
    1388:	str	x12, [x9]
    138c:	adds	w12, w13, #0x1
    1390:	stp	w11, w12, [x9, #8]
    1394:	b.cc	1358 <BZ2_decompress+0x1358>  // b.lo, b.ul, b.last
    1398:	ldr	w12, [x9, #16]
    139c:	add	w12, w12, #0x1
    13a0:	str	w12, [x9, #16]
    13a4:	b	1358 <BZ2_decompress+0x1358>
    13a8:	mov	w6, w25
    13ac:	ldp	w15, w9, [x29, #-40]
    13b0:	mov	w3, w23
    13b4:	ldp	w25, w4, [x29, #-60]
    13b8:	ldp	w5, w1, [sp, #32]
    13bc:	mov	x7, x20
    13c0:	ldp	x17, x23, [sp, #16]
    13c4:	mov	w30, w26
    13c8:	ldp	w20, w26, [x29, #-52]
    13cc:	mov	x16, x19
    13d0:	ldr	x19, [sp, #56]
    13d4:	ldr	x18, [sp, #40]
    13d8:	ldr	w2, [sp, #52]
    13dc:	ldur	w14, [x29, #-44]
    13e0:	b	1750 <BZ2_decompress+0x1750>
    13e4:	mov	w0, #0xfffffffd            	// #-3
    13e8:	b	174c <BZ2_decompress+0x174c>
    13ec:	adrp	x8, 0 <stderr>
    13f0:	ldr	x0, [x8]
    13f4:	str	w1, [sp, #36]
    13f8:	adrp	x1, 0 <BZ2_decompress>
    13fc:	add	x1, x1, #0x0
    1400:	str	w24, [sp, #52]
    1404:	stur	w14, [x29, #-44]
    1408:	str	x28, [sp, #40]
    140c:	stp	w25, w4, [x29, #-60]
    1410:	mov	w25, w6
    1414:	str	w5, [sp, #32]
    1418:	stur	w15, [x29, #-40]
    141c:	stp	w20, w26, [x29, #-52]
    1420:	str	x19, [sp, #56]
    1424:	str	x7, [sp, #8]
    1428:	mov	x24, x23
    142c:	mov	w23, w3
    1430:	mov	w28, w30
    1434:	mov	x26, x16
    1438:	mov	x20, x17
    143c:	mov	x19, x18
    1440:	bl	0 <fprintf>
    1444:	ldp	w5, w1, [sp, #32]
    1448:	mov	x18, x19
    144c:	mov	x17, x20
    1450:	mov	x16, x26
    1454:	mov	w30, w28
    1458:	mov	w3, w23
    145c:	mov	x23, x24
    1460:	ldr	x7, [sp, #8]
    1464:	ldr	x19, [sp, #56]
    1468:	ldp	w20, w26, [x29, #-52]
    146c:	ldp	w14, w15, [x29, #-44]
    1470:	mov	w6, w25
    1474:	ldp	w25, w4, [x29, #-60]
    1478:	ldr	x28, [sp, #40]
    147c:	ldr	w24, [sp, #52]
    1480:	b	7cc <BZ2_decompress+0x7cc>
    1484:	cmp	w0, #0x10
    1488:	stur	x0, [x29, #-16]
    148c:	b.ge	1534 <BZ2_decompress+0x1534>  // b.tcont
    1490:	ldr	w8, [x21, #36]
    1494:	mov	w9, #0x1c                  	// #28
    1498:	str	w9, [x21, #8]
    149c:	cmp	w8, #0x1
    14a0:	b.lt	14cc <BZ2_decompress+0x14cc>  // b.tstop
    14a4:	ldr	w9, [x21, #32]
    14a8:	ldur	x0, [x29, #-16]
    14ac:	sub	w8, w8, #0x1
    14b0:	str	w8, [x21, #36]
    14b4:	lsr	w8, w9, w8
    14b8:	add	x10, x21, w0, sxtw
    14bc:	and	w8, w8, #0x1
    14c0:	strb	w8, [x10, #3452]
    14c4:	add	w0, w0, #0x1
    14c8:	b	1484 <BZ2_decompress+0x1484>
    14cc:	ldr	x10, [x21]
    14d0:	ldur	x0, [x29, #-16]
    14d4:	ldr	w9, [x10, #8]
    14d8:	sub	w11, w9, #0x1
    14dc:	b	14f0 <BZ2_decompress+0x14f0>
    14e0:	sub	w12, w8, #0x8
    14e4:	cmn	w12, #0x8
    14e8:	sub	w11, w11, #0x1
    14ec:	b.gt	14ac <BZ2_decompress+0x14ac>
    14f0:	cmn	w11, #0x1
    14f4:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
    14f8:	ldr	x12, [x10]
    14fc:	ldr	w13, [x21, #32]
    1500:	add	w8, w8, #0x8
    1504:	ldrb	w9, [x12], #1
    1508:	bfi	w9, w13, #8, #24
    150c:	stp	w9, w8, [x21, #32]
    1510:	ldr	w13, [x10, #12]
    1514:	str	x12, [x10]
    1518:	adds	w12, w13, #0x1
    151c:	stp	w11, w12, [x10, #8]
    1520:	b.cc	14e0 <BZ2_decompress+0x14e0>  // b.lo, b.ul, b.last
    1524:	ldr	w12, [x10, #16]
    1528:	add	w12, w12, #0x1
    152c:	str	w12, [x10, #16]
    1530:	b	14e0 <BZ2_decompress+0x14e0>
    1534:	add	x8, x21, #0xc7c
    1538:	movi	v0.2d, #0x0
    153c:	mov	w12, wzr
    1540:	stp	q0, q0, [x8, #224]
    1544:	stp	q0, q0, [x8, #192]
    1548:	stp	q0, q0, [x8, #160]
    154c:	stp	q0, q0, [x8, #128]
    1550:	stp	q0, q0, [x8, #96]
    1554:	stp	q0, q0, [x8, #64]
    1558:	stp	q0, q0, [x8, #32]
    155c:	stp	q0, q0, [x8]
    1560:	b	17bc <BZ2_decompress+0x17bc>
    1564:	mov	w9, #0x25                  	// #37
    1568:	cmp	w8, #0x1
    156c:	str	w9, [x21, #8]
    1570:	b.lt	15b0 <BZ2_decompress+0x15b0>  // b.tstop
    1574:	ldr	w10, [x21, #32]
    1578:	sub	w8, w8, #0x1
    157c:	lsr	w9, w10, w8
    1580:	and	w14, w9, #0x1
    1584:	bfi	w9, w30, #1, #31
    1588:	str	w8, [x21, #36]
    158c:	mov	w30, w9
    1590:	cmp	w16, #0x14
    1594:	b.gt	1748 <BZ2_decompress+0x1748>
    1598:	ldur	x9, [x29, #-24]
    159c:	ldr	w9, [x9, w16, sxtw #2]
    15a0:	cmp	w30, w9
    15a4:	b.le	21d0 <BZ2_decompress+0x21d0>
    15a8:	add	w16, w16, #0x1
    15ac:	b	1564 <BZ2_decompress+0x1564>
    15b0:	ldr	x9, [x21]
    15b4:	ldr	w10, [x9, #8]
    15b8:	sub	w11, w10, #0x1
    15bc:	b	15d0 <BZ2_decompress+0x15d0>
    15c0:	sub	w12, w8, #0x8
    15c4:	cmn	w12, #0x8
    15c8:	sub	w11, w11, #0x1
    15cc:	b.gt	1578 <BZ2_decompress+0x1578>
    15d0:	cmn	w11, #0x1
    15d4:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
    15d8:	ldr	x12, [x9]
    15dc:	ldr	w13, [x21, #32]
    15e0:	add	w8, w8, #0x8
    15e4:	ldrb	w10, [x12], #1
    15e8:	bfi	w10, w13, #8, #24
    15ec:	stp	w10, w8, [x21, #32]
    15f0:	ldr	w13, [x9, #12]
    15f4:	str	x12, [x9]
    15f8:	adds	w12, w13, #0x1
    15fc:	stp	w11, w12, [x9, #8]
    1600:	b.cc	15c0 <BZ2_decompress+0x15c0>  // b.lo, b.ul, b.last
    1604:	ldr	w12, [x9, #16]
    1608:	add	w12, w12, #0x1
    160c:	str	w12, [x9, #16]
    1610:	b	15c0 <BZ2_decompress+0x15c0>
    1614:	mov	w9, #0x27                  	// #39
    1618:	cmp	w8, #0x1
    161c:	str	w9, [x21, #8]
    1620:	b.lt	1644 <BZ2_decompress+0x1644>  // b.tstop
    1624:	ldr	w10, [x21, #32]
    1628:	sub	w8, w8, #0x1
    162c:	lsr	w9, w10, w8
    1630:	and	w14, w9, #0x1
    1634:	bfi	w9, w30, #1, #31
    1638:	str	w8, [x21, #36]
    163c:	mov	w30, w9
    1640:	b	2c8c <BZ2_decompress+0x2c8c>
    1644:	ldr	x9, [x21]
    1648:	ldr	w10, [x9, #8]
    164c:	sub	w11, w10, #0x1
    1650:	b	1664 <BZ2_decompress+0x1664>
    1654:	sub	w12, w8, #0x8
    1658:	cmn	w12, #0x8
    165c:	sub	w11, w11, #0x1
    1660:	b.gt	1628 <BZ2_decompress+0x1628>
    1664:	cmn	w11, #0x1
    1668:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
    166c:	ldr	x12, [x9]
    1670:	ldr	w13, [x21, #32]
    1674:	add	w8, w8, #0x8
    1678:	ldrb	w10, [x12], #1
    167c:	bfi	w10, w13, #8, #24
    1680:	stp	w10, w8, [x21, #32]
    1684:	ldr	w13, [x9, #12]
    1688:	str	x12, [x9]
    168c:	adds	w12, w13, #0x1
    1690:	stp	w11, w12, [x9, #8]
    1694:	b.cc	1654 <BZ2_decompress+0x1654>  // b.lo, b.ul, b.last
    1698:	ldr	w12, [x9, #16]
    169c:	add	w12, w12, #0x1
    16a0:	str	w12, [x9, #16]
    16a4:	b	1654 <BZ2_decompress+0x1654>
    16a8:	mov	w9, #0x29                  	// #41
    16ac:	cmp	w8, #0x1
    16b0:	str	w9, [x21, #8]
    16b4:	b.lt	16d8 <BZ2_decompress+0x16d8>  // b.tstop
    16b8:	ldr	w10, [x21, #32]
    16bc:	sub	w8, w8, #0x1
    16c0:	lsr	w9, w10, w8
    16c4:	and	w14, w9, #0x1
    16c8:	bfi	w9, w30, #1, #31
    16cc:	str	w8, [x21, #36]
    16d0:	mov	w30, w9
    16d4:	b	25bc <BZ2_decompress+0x25bc>
    16d8:	ldr	x9, [x21]
    16dc:	ldr	w10, [x9, #8]
    16e0:	sub	w11, w10, #0x1
    16e4:	b	16f8 <BZ2_decompress+0x16f8>
    16e8:	sub	w12, w8, #0x8
    16ec:	cmn	w12, #0x8
    16f0:	sub	w11, w11, #0x1
    16f4:	b.gt	16bc <BZ2_decompress+0x16bc>
    16f8:	cmn	w11, #0x1
    16fc:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
    1700:	ldr	x12, [x9]
    1704:	ldr	w13, [x21, #32]
    1708:	add	w8, w8, #0x8
    170c:	ldrb	w10, [x12], #1
    1710:	bfi	w10, w13, #8, #24
    1714:	stp	w10, w8, [x21, #32]
    1718:	ldr	w13, [x9, #12]
    171c:	str	x12, [x9]
    1720:	adds	w12, w13, #0x1
    1724:	stp	w11, w12, [x9, #8]
    1728:	b.cc	16e8 <BZ2_decompress+0x16e8>  // b.lo, b.ul, b.last
    172c:	ldr	w12, [x9, #16]
    1730:	add	w12, w12, #0x1
    1734:	str	w12, [x9, #16]
    1738:	b	16e8 <BZ2_decompress+0x16e8>
    173c:	mov	w0, wzr
    1740:	b	174c <BZ2_decompress+0x174c>
    1744:	stur	x0, [x29, #-16]
    1748:	mov	w0, #0xfffffffc            	// #-4
    174c:	ldur	w9, [x29, #-36]
    1750:	ldur	x8, [x29, #-16]
    1754:	stp	w1, w6, [x22, #8]
    1758:	stp	w5, w15, [x22, #16]
    175c:	str	w24, [x22, #80]
    1760:	stp	w8, w20, [x22]
    1764:	ldur	w8, [x29, #-32]
    1768:	stp	w2, w4, [x22, #32]
    176c:	stp	w19, w17, [x22, #40]
    1770:	stp	w26, w3, [x22, #48]
    1774:	stp	w8, w18, [x22, #24]
    1778:	stp	w25, w9, [x22, #56]
    177c:	stp	w16, w30, [x22, #64]
    1780:	stp	w14, w28, [x22, #72]
    1784:	ldur	x8, [x29, #-24]
    1788:	stur	x23, [x22, #92]
    178c:	stur	x7, [x22, #100]
    1790:	stur	x8, [x22, #84]
    1794:	ldp	x20, x19, [sp, #208]
    1798:	ldp	x22, x21, [sp, #192]
    179c:	ldp	x24, x23, [sp, #176]
    17a0:	ldp	x26, x25, [sp, #160]
    17a4:	ldp	x28, x27, [sp, #144]
    17a8:	ldp	x29, x30, [sp, #128]
    17ac:	add	sp, sp, #0xe0
    17b0:	ret
    17b4:	ldur	x12, [x29, #-16]
    17b8:	add	w12, w12, #0x1
    17bc:	cmp	w12, #0xf
    17c0:	stur	x12, [x29, #-16]
    17c4:	b.gt	17e4 <BZ2_decompress+0x17e4>
    17c8:	add	x8, x21, w12, sxtw
    17cc:	ldrb	w8, [x8, #3452]
    17d0:	cbz	w8, 17b4 <BZ2_decompress+0x17b4>
    17d4:	mov	w20, wzr
    17d8:	cmp	w20, #0xf
    17dc:	b.gt	17b4 <BZ2_decompress+0x17b4>
    17e0:	b	18d8 <BZ2_decompress+0x18d8>
    17e4:	mov	w9, wzr
    17e8:	mov	x8, xzr
    17ec:	add	x10, x21, #0xc7c
    17f0:	str	wzr, [x21, #3192]
    17f4:	b	1804 <BZ2_decompress+0x1804>
    17f8:	add	x8, x8, #0x1
    17fc:	cmp	x8, #0x100
    1800:	b.eq	1824 <BZ2_decompress+0x1824>  // b.none
    1804:	ldrb	w11, [x10, x8]
    1808:	cbz	w11, 17f8 <BZ2_decompress+0x17f8>
    180c:	add	x9, x21, w9, sxtw
    1810:	strb	w8, [x9, #3468]
    1814:	ldr	w9, [x21, #3192]
    1818:	add	w9, w9, #0x1
    181c:	str	w9, [x21, #3192]
    1820:	b	17f8 <BZ2_decompress+0x17f8>
    1824:	cbz	w9, 1748 <BZ2_decompress+0x1748>
    1828:	add	w6, w9, #0x2
    182c:	ldr	w8, [x21, #36]
    1830:	mov	w9, #0x1e                  	// #30
    1834:	str	w9, [x21, #8]
    1838:	cmp	w8, #0x3
    183c:	b.lt	1874 <BZ2_decompress+0x1874>  // b.tstop
    1840:	ldr	w10, [x21, #32]
    1844:	sub	w8, w8, #0x3
    1848:	lsr	w9, w10, w8
    184c:	and	w5, w9, #0x7
    1850:	cmp	w5, #0x7
    1854:	str	w8, [x21, #36]
    1858:	b.hi	2f0 <BZ2_decompress+0x2f0>  // b.pmore
    185c:	mov	w9, #0x1                   	// #1
    1860:	lsl	w9, w9, w5
    1864:	mov	w10, #0x83                  	// #131
    1868:	tst	w9, w10
    186c:	b.ne	1748 <BZ2_decompress+0x1748>  // b.any
    1870:	b	2f0 <BZ2_decompress+0x2f0>
    1874:	ldr	x9, [x21]
    1878:	ldr	w10, [x9, #8]
    187c:	sub	w11, w10, #0x1
    1880:	b	1894 <BZ2_decompress+0x1894>
    1884:	sub	w12, w8, #0x8
    1888:	cmn	w12, #0x6
    188c:	sub	w11, w11, #0x1
    1890:	b.gt	1844 <BZ2_decompress+0x1844>
    1894:	cmn	w11, #0x1
    1898:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
    189c:	ldr	x12, [x9]
    18a0:	ldr	w13, [x21, #32]
    18a4:	add	w8, w8, #0x8
    18a8:	ldrb	w10, [x12], #1
    18ac:	bfi	w10, w13, #8, #24
    18b0:	stp	w10, w8, [x21, #32]
    18b4:	ldr	w13, [x9, #12]
    18b8:	str	x12, [x9]
    18bc:	adds	w12, w13, #0x1
    18c0:	stp	w11, w12, [x9, #8]
    18c4:	b.cc	1884 <BZ2_decompress+0x1884>  // b.lo, b.ul, b.last
    18c8:	ldr	w12, [x9, #16]
    18cc:	add	w12, w12, #0x1
    18d0:	str	w12, [x9, #16]
    18d4:	b	1884 <BZ2_decompress+0x1884>
    18d8:	ldr	w8, [x21, #36]
    18dc:	mov	w9, #0x1d                  	// #29
    18e0:	str	w9, [x21, #8]
    18e4:	cmp	w8, #0x1
    18e8:	b.lt	1924 <BZ2_decompress+0x1924>  // b.tstop
    18ec:	ldr	w10, [x21, #32]
    18f0:	sub	w8, w8, #0x1
    18f4:	lsr	w9, w10, w8
    18f8:	str	w8, [x21, #36]
    18fc:	ldur	x8, [x29, #-16]
    1900:	tbz	w9, #0, 1914 <BZ2_decompress+0x1914>
    1904:	add	w8, w20, w8, lsl #4
    1908:	add	x8, x21, w8, sxtw
    190c:	mov	w9, #0x1                   	// #1
    1910:	strb	w9, [x8, #3196]
    1914:	add	w20, w20, #0x1
    1918:	cmp	w20, #0xf
    191c:	b.gt	17b4 <BZ2_decompress+0x17b4>
    1920:	b	18d8 <BZ2_decompress+0x18d8>
    1924:	ldr	x9, [x21]
    1928:	ldr	w10, [x9, #8]
    192c:	sub	w11, w10, #0x1
    1930:	b	1944 <BZ2_decompress+0x1944>
    1934:	sub	w12, w8, #0x8
    1938:	cmn	w12, #0x8
    193c:	sub	w11, w11, #0x1
    1940:	b.gt	18f0 <BZ2_decompress+0x18f0>
    1944:	cmn	w11, #0x1
    1948:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
    194c:	ldr	x12, [x9]
    1950:	ldr	w13, [x21, #32]
    1954:	add	w8, w8, #0x8
    1958:	ldrb	w10, [x12], #1
    195c:	bfi	w10, w13, #8, #24
    1960:	stp	w10, w8, [x21, #32]
    1964:	ldr	w13, [x9, #12]
    1968:	str	x12, [x9]
    196c:	adds	w12, w13, #0x1
    1970:	stp	w11, w12, [x9, #8]
    1974:	b.cc	1934 <BZ2_decompress+0x1934>  // b.lo, b.ul, b.last
    1978:	ldr	w12, [x9, #16]
    197c:	add	w12, w12, #0x1
    1980:	str	w12, [x9, #16]
    1984:	b	1934 <BZ2_decompress+0x1934>
    1988:	cmp	w9, w15
    198c:	b.ge	1a7c <BZ2_decompress+0x1a7c>  // b.tcont
    1990:	mov	w20, wzr
    1994:	mov	w8, w9
    1998:	stur	x8, [x29, #-16]
    199c:	mov	w8, #0x20                  	// #32
    19a0:	ldr	w9, [x21, #36]
    19a4:	str	w8, [x21, #8]
    19a8:	cmp	w9, #0x1
    19ac:	b.lt	19bc <BZ2_decompress+0x19bc>  // b.tstop
    19b0:	ldr	w11, [x21, #32]
    19b4:	ldur	x0, [x29, #-16]
    19b8:	b	1a2c <BZ2_decompress+0x1a2c>
    19bc:	ldr	x10, [x21]
    19c0:	ldur	x0, [x29, #-16]
    19c4:	mov	w27, w14
    19c8:	ldr	w11, [x10, #8]
    19cc:	sub	w12, w11, #0x1
    19d0:	b	19e4 <BZ2_decompress+0x19e4>
    19d4:	sub	w13, w9, #0x8
    19d8:	cmn	w13, #0x8
    19dc:	sub	w12, w12, #0x1
    19e0:	b.gt	1a28 <BZ2_decompress+0x1a28>
    19e4:	cmn	w12, #0x1
    19e8:	b.eq	1a50 <BZ2_decompress+0x1a50>  // b.none
    19ec:	ldr	x13, [x10]
    19f0:	ldr	w14, [x21, #32]
    19f4:	add	w9, w9, #0x8
    19f8:	ldrb	w11, [x13], #1
    19fc:	bfi	w11, w14, #8, #24
    1a00:	stp	w11, w9, [x21, #32]
    1a04:	ldr	w14, [x10, #12]
    1a08:	str	x13, [x10]
    1a0c:	adds	w13, w14, #0x1
    1a10:	stp	w12, w13, [x10, #8]
    1a14:	b.cc	19d4 <BZ2_decompress+0x19d4>  // b.lo, b.ul, b.last
    1a18:	ldr	w13, [x10, #16]
    1a1c:	add	w13, w13, #0x1
    1a20:	str	w13, [x10, #16]
    1a24:	b	19d4 <BZ2_decompress+0x19d4>
    1a28:	mov	w14, w27
    1a2c:	sub	w9, w9, #0x1
    1a30:	lsr	w10, w11, w9
    1a34:	str	w9, [x21, #36]
    1a38:	tbz	w10, #0, 1a5c <BZ2_decompress+0x1a5c>
    1a3c:	add	w20, w20, #0x1
    1a40:	cmp	w20, w5
    1a44:	mov	w0, #0xfffffffc            	// #-4
    1a48:	b.lt	19a0 <BZ2_decompress+0x19a0>  // b.tstop
    1a4c:	b	174c <BZ2_decompress+0x174c>
    1a50:	mov	w0, wzr
    1a54:	mov	w14, w27
    1a58:	b	174c <BZ2_decompress+0x174c>
    1a5c:	mov	w8, #0x4651                	// #18001
    1a60:	cmp	w0, w8
    1a64:	b.gt	1a74 <BZ2_decompress+0x1a74>
    1a68:	add	x8, x21, w0, sxtw
    1a6c:	mov	w9, #0x651e                	// #25886
    1a70:	strb	w20, [x8, x9]
    1a74:	add	w9, w0, #0x1
    1a78:	b	1988 <BZ2_decompress+0x1988>
    1a7c:	mov	w8, #0x4652                	// #18002
    1a80:	cmp	w15, w8
    1a84:	csel	w8, w15, w8, lt  // lt = tstop
    1a88:	subs	w10, w5, #0x1
    1a8c:	b.lt	1ab4 <BZ2_decompress+0x1ab4>  // b.tstop
    1a90:	cmp	w5, #0x1f
    1a94:	b.hi	1b68 <BZ2_decompress+0x1b68>  // b.pmore
    1a98:	mov	w9, wzr
    1a9c:	sub	x10, x29, #0x8
    1aa0:	and	x11, x9, #0xff
    1aa4:	strb	w9, [x10, x11]
    1aa8:	add	w9, w9, #0x1
    1aac:	cmp	w5, w9, uxtb
    1ab0:	b.gt	1aa0 <BZ2_decompress+0x1aa0>
    1ab4:	cmp	w15, #0x1
    1ab8:	b.lt	1b58 <BZ2_decompress+0x1b58>  // b.tstop
    1abc:	str	w2, [sp, #52]
    1ac0:	mov	x2, x18
    1ac4:	mov	x1, x17
    1ac8:	mov	x0, x16
    1acc:	mov	x15, xzr
    1ad0:	mov	x27, x8
    1ad4:	sxtw	x9, w8
    1ad8:	mov	w10, #0x651e                	// #25886
    1adc:	sub	x11, x29, #0x8
    1ae0:	mov	w12, #0x1ecc                	// #7884
    1ae4:	stur	w14, [x29, #-44]
    1ae8:	b	1b04 <BZ2_decompress+0x1b04>
    1aec:	mov	x15, x8
    1af0:	add	x15, x8, #0x1
    1af4:	cmp	x15, x9
    1af8:	sturb	w14, [x29, #-8]
    1afc:	strb	w14, [x13, x12]
    1b00:	b.ge	1b38 <BZ2_decompress+0x1b38>  // b.tcont
    1b04:	add	x13, x21, x15
    1b08:	mov	x8, x15
    1b0c:	ldrb	w15, [x13, x10]
    1b10:	ldrb	w14, [x11, x15]
    1b14:	cbz	x15, 1aec <BZ2_decompress+0x1aec>
    1b18:	add	x16, x11, x15
    1b1c:	ldurb	w17, [x16, #-1]
    1b20:	and	w18, w15, #0xff
    1b24:	sub	x15, x15, #0x1
    1b28:	cmp	w18, #0x1
    1b2c:	strb	w17, [x16]
    1b30:	b.ne	1b18 <BZ2_decompress+0x1b18>  // b.any
    1b34:	b	1aec <BZ2_decompress+0x1aec>
    1b38:	mov	x18, x2
    1b3c:	ldr	w2, [sp, #52]
    1b40:	ldur	w14, [x29, #-44]
    1b44:	mov	x16, x0
    1b48:	mov	x17, x1
    1b4c:	mov	x8, x27
    1b50:	stur	x15, [x29, #-16]
    1b54:	b	1b5c <BZ2_decompress+0x1b5c>
    1b58:	stur	xzr, [x29, #-16]
    1b5c:	mov	w1, wzr
    1b60:	mov	w15, w8
    1b64:	b	1bc8 <BZ2_decompress+0x1bc8>
    1b68:	neg	w9, w5
    1b6c:	tst	w9, #0xff
    1b70:	mov	w9, wzr
    1b74:	b.eq	1a9c <BZ2_decompress+0x1a9c>  // b.none
    1b78:	cmp	w10, #0xff
    1b7c:	b.hi	1a9c <BZ2_decompress+0x1a9c>  // b.pmore
    1b80:	adrp	x9, 0 <BZ2_decompress>
    1b84:	ldr	q0, [x9]
    1b88:	mov	w10, wzr
    1b8c:	and	w9, w5, #0xffffffe0
    1b90:	movi	v1.16b, #0x10
    1b94:	sub	x11, x29, #0x8
    1b98:	movi	v2.16b, #0x20
    1b9c:	and	x12, x10, #0xe0
    1ba0:	add	v3.16b, v0.16b, v1.16b
    1ba4:	add	w10, w10, #0x20
    1ba8:	add	x12, x11, x12
    1bac:	cmp	w9, w10
    1bb0:	stp	q0, q3, [x12]
    1bb4:	add	v0.16b, v0.16b, v2.16b
    1bb8:	b.ne	1b9c <BZ2_decompress+0x1b9c>  // b.any
    1bbc:	cmp	w5, w9
    1bc0:	b.ne	1a9c <BZ2_decompress+0x1a9c>  // b.any
    1bc4:	b	1ab4 <BZ2_decompress+0x1ab4>
    1bc8:	cmp	w1, w5
    1bcc:	b.ge	1c6c <BZ2_decompress+0x1c6c>  // b.tcont
    1bd0:	ldr	w8, [x21, #36]
    1bd4:	mov	w9, #0x21                  	// #33
    1bd8:	str	w9, [x21, #8]
    1bdc:	cmp	w8, #0x5
    1be0:	b.lt	1c08 <BZ2_decompress+0x1c08>  // b.tstop
    1be4:	ldr	w10, [x21, #32]
    1be8:	sub	w8, w8, #0x5
    1bec:	lsr	w9, w10, w8
    1bf0:	mov	w0, wzr
    1bf4:	and	w25, w9, #0x1f
    1bf8:	str	w8, [x21, #36]
    1bfc:	cmp	w0, w6
    1c00:	b.ge	20bc <BZ2_decompress+0x20bc>  // b.tcont
    1c04:	b	2060 <BZ2_decompress+0x2060>
    1c08:	ldr	x9, [x21]
    1c0c:	ldr	w10, [x9, #8]
    1c10:	sub	w11, w10, #0x1
    1c14:	b	1c28 <BZ2_decompress+0x1c28>
    1c18:	sub	w12, w8, #0x8
    1c1c:	cmn	w12, #0x4
    1c20:	sub	w11, w11, #0x1
    1c24:	b.gt	1be8 <BZ2_decompress+0x1be8>
    1c28:	cmn	w11, #0x1
    1c2c:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
    1c30:	ldr	x12, [x9]
    1c34:	ldr	w13, [x21, #32]
    1c38:	add	w8, w8, #0x8
    1c3c:	ldrb	w10, [x12], #1
    1c40:	bfi	w10, w13, #8, #24
    1c44:	stp	w10, w8, [x21, #32]
    1c48:	ldr	w13, [x9, #12]
    1c4c:	str	x12, [x9]
    1c50:	adds	w12, w13, #0x1
    1c54:	stp	w11, w12, [x9, #8]
    1c58:	b.cc	1c18 <BZ2_decompress+0x1c18>  // b.lo, b.ul, b.last
    1c5c:	ldr	w12, [x9, #16]
    1c60:	add	w12, w12, #0x1
    1c64:	str	w12, [x9, #16]
    1c68:	b	1c18 <BZ2_decompress+0x1c18>
    1c6c:	mov	w8, #0x1ecc                	// #7884
    1c70:	cmp	w5, #0x1
    1c74:	add	x8, x21, x8
    1c78:	str	w24, [sp, #52]
    1c7c:	str	x8, [sp, #16]
    1c80:	stp	w4, w20, [x29, #-56]
    1c84:	stur	w14, [x29, #-44]
    1c88:	str	w5, [sp, #32]
    1c8c:	str	x7, [sp, #8]
    1c90:	str	x23, [sp, #24]
    1c94:	stur	w15, [x29, #-40]
    1c98:	stur	w26, [x29, #-48]
    1c9c:	str	x16, [sp]
    1ca0:	b.lt	1e48 <BZ2_decompress+0x1e48>  // b.tstop
    1ca4:	mov	w8, w5
    1ca8:	stur	x8, [x29, #-16]
    1cac:	mov	w9, w6
    1cb0:	mov	w8, #0xab71                	// #43889
    1cb4:	mov	w10, #0xab70                	// #43888
    1cb8:	str	x28, [sp, #40]
    1cbc:	stur	w25, [x29, #-60]
    1cc0:	mov	x24, xzr
    1cc4:	stur	x9, [x29, #-32]
    1cc8:	and	x9, x9, #0xfffffffe
    1ccc:	add	x25, x21, x8
    1cd0:	add	x28, x21, x10
    1cd4:	str	x9, [sp, #56]
    1cd8:	b	1d60 <BZ2_decompress+0x1d60>
    1cdc:	mov	x19, x16
    1ce0:	mov	w26, w30
    1ce4:	mov	w23, w3
    1ce8:	mov	w5, wzr
    1cec:	mov	w20, #0x20                  	// #32
    1cf0:	mov	w8, #0x408                 	// #1032
    1cf4:	madd	x8, x24, x8, x21
    1cf8:	mov	w10, #0xb17c                	// #45436
    1cfc:	add	x0, x8, x10
    1d00:	mov	w10, #0xc9ac                	// #51628
    1d04:	mov	w9, #0x102                 	// #258
    1d08:	add	x1, x8, x10
    1d0c:	mov	w10, #0xe1dc                	// #57820
    1d10:	madd	x9, x24, x9, x21
    1d14:	add	x2, x8, x10
    1d18:	mov	w8, #0xab70                	// #43888
    1d1c:	add	x3, x9, x8
    1d20:	mov	w4, w20
    1d24:	mov	w27, w6
    1d28:	bl	0 <BZ2_hbCreateDecodeTables>
    1d2c:	add	x8, x21, x24, lsl #2
    1d30:	mov	w9, #0xfa0c                	// #64012
    1d34:	str	w20, [x8, x9]
    1d38:	ldur	x8, [x29, #-16]
    1d3c:	add	x24, x24, #0x1
    1d40:	mov	w6, w27
    1d44:	add	x25, x25, #0x102
    1d48:	cmp	x24, x8
    1d4c:	add	x28, x28, #0x102
    1d50:	mov	w3, w23
    1d54:	mov	w30, w26
    1d58:	mov	x16, x19
    1d5c:	b.eq	1e2c <BZ2_decompress+0x1e2c>  // b.none
    1d60:	cmp	w6, #0x1
    1d64:	b.lt	1cdc <BZ2_decompress+0x1cdc>  // b.tstop
    1d68:	cmp	w6, #0x1
    1d6c:	b.ne	1d8c <BZ2_decompress+0x1d8c>  // b.any
    1d70:	mov	x19, x16
    1d74:	mov	w26, w30
    1d78:	mov	w23, w3
    1d7c:	mov	x9, xzr
    1d80:	mov	w5, wzr
    1d84:	mov	w20, #0x20                  	// #32
    1d88:	b	1e00 <BZ2_decompress+0x1e00>
    1d8c:	ldr	x12, [sp, #56]
    1d90:	mov	w9, wzr
    1d94:	mov	w10, wzr
    1d98:	mov	w8, #0x20                  	// #32
    1d9c:	mov	x13, x25
    1da0:	mov	w11, #0x20                  	// #32
    1da4:	ldurb	w14, [x13, #-1]
    1da8:	ldrb	w15, [x13], #2
    1dac:	cmp	w9, w14
    1db0:	csel	w9, w14, w9, cc  // cc = lo, ul, last
    1db4:	cmp	w10, w15
    1db8:	csel	w10, w15, w10, cc  // cc = lo, ul, last
    1dbc:	cmp	w8, w14
    1dc0:	csel	w8, w14, w8, gt
    1dc4:	cmp	w11, w15
    1dc8:	csel	w11, w15, w11, gt
    1dcc:	subs	x12, x12, #0x2
    1dd0:	b.ne	1da4 <BZ2_decompress+0x1da4>  // b.any
    1dd4:	cmp	w9, w10
    1dd8:	csel	w5, w9, w10, hi  // hi = pmore
    1ddc:	cmp	w8, w11
    1de0:	csel	w20, w8, w11, lt  // lt = tstop
    1de4:	ldur	x8, [x29, #-32]
    1de8:	ldr	x9, [sp, #56]
    1dec:	mov	x19, x16
    1df0:	mov	w26, w30
    1df4:	mov	w23, w3
    1df8:	cmp	x9, x8
    1dfc:	b.eq	1cf0 <BZ2_decompress+0x1cf0>  // b.none
    1e00:	ldur	x10, [x29, #-32]
    1e04:	add	x8, x28, x9
    1e08:	sub	x9, x10, x9
    1e0c:	ldrb	w10, [x8], #1
    1e10:	cmp	w5, w10
    1e14:	csel	w5, w10, w5, cc  // cc = lo, ul, last
    1e18:	cmp	w20, w10
    1e1c:	csel	w20, w10, w20, gt
    1e20:	subs	x9, x9, #0x1
    1e24:	b.ne	1e0c <BZ2_decompress+0x1e0c>  // b.any
    1e28:	b	1cf0 <BZ2_decompress+0x1cf0>
    1e2c:	ldr	w8, [sp, #32]
    1e30:	ldur	w25, [x29, #-60]
    1e34:	ldr	x28, [sp, #40]
    1e38:	mov	w26, w30
    1e3c:	mov	w23, w3
    1e40:	str	w8, [sp, #36]
    1e44:	b	1e58 <BZ2_decompress+0x1e58>
    1e48:	mov	w26, w30
    1e4c:	mov	w23, w3
    1e50:	mov	w27, w6
    1e54:	str	wzr, [sp, #36]
    1e58:	ldr	w20, [x21, #3192]
    1e5c:	ldr	w24, [x21, #40]
    1e60:	add	x0, x21, #0x44
    1e64:	mov	w2, #0x400                 	// #1024
    1e68:	mov	w1, wzr
    1e6c:	bl	0 <memset>
    1e70:	adrp	x13, 0 <BZ2_decompress>
    1e74:	ldr	d0, [x13]
    1e78:	mov	w11, #0x86a0                	// #34464
    1e7c:	add	w10, w20, #0x1
    1e80:	movk	w11, #0x1, lsl #16
    1e84:	mov	w12, #0x1ec8                	// #7880
    1e88:	mov	x8, xzr
    1e8c:	mov	x9, xzr
    1e90:	stur	w10, [x29, #-32]
    1e94:	mov	w10, #0xd                   	// #13
    1e98:	mul	w19, w24, w11
    1e9c:	add	x11, x21, x12
    1ea0:	mov	w12, #0xb                   	// #11
    1ea4:	mov	w13, #0xa                   	// #10
    1ea8:	mov	w14, #0x9                   	// #9
    1eac:	sub	w15, w9, #0x10
    1eb0:	add	x16, x11, x9
    1eb4:	orr	w17, w15, #0xf
    1eb8:	sturb	w17, [x16, #-61]
    1ebc:	orr	w17, w15, #0xe
    1ec0:	sturb	w17, [x16, #-62]
    1ec4:	orr	w17, w15, w10
    1ec8:	sturb	w17, [x16, #-63]
    1ecc:	orr	w17, w15, #0xc
    1ed0:	sturb	w17, [x16, #-64]
    1ed4:	orr	w17, w15, w12
    1ed8:	sturb	w17, [x16, #-65]
    1edc:	orr	w17, w15, w13
    1ee0:	dup	v1.8b, w15
    1ee4:	sturb	w17, [x16, #-66]
    1ee8:	add	w17, w9, #0xff0
    1eec:	sub	x9, x9, #0x10
    1ef0:	sturb	w15, [x16, #-76]
    1ef4:	orr	w15, w15, w14
    1ef8:	orr	v1.8b, v1.8b, v0.8b
    1efc:	cmn	x9, #0x100
    1f00:	sturb	w15, [x16, #-67]
    1f04:	stur	d1, [x16, #-75]
    1f08:	str	w17, [x11, x8]
    1f0c:	sub	x8, x8, #0x4
    1f10:	b.ne	1eac <BZ2_decompress+0x1eac>  // b.any
    1f14:	ldur	w8, [x29, #-40]
    1f18:	ldr	w24, [sp, #52]
    1f1c:	ldur	w20, [x29, #-52]
    1f20:	mov	w6, w27
    1f24:	cmp	w8, #0x1
    1f28:	mov	w3, w23
    1f2c:	mov	w30, w26
    1f30:	mov	w17, wzr
    1f34:	b.lt	2030 <BZ2_decompress+0x2030>  // b.tstop
    1f38:	ldr	x8, [sp, #16]
    1f3c:	mov	w9, #0x408                 	// #1032
    1f40:	ldur	w4, [x29, #-56]
    1f44:	ldp	w5, w1, [sp, #32]
    1f48:	ldrb	w28, [x8]
    1f4c:	mov	w8, #0xfa0c                	// #64012
    1f50:	ldp	w14, w15, [x29, #-44]
    1f54:	ldur	w26, [x29, #-48]
    1f58:	add	x12, x21, w28, uxtw #2
    1f5c:	ldr	w24, [x12, x8]
    1f60:	umaddl	x9, w28, w9, x21
    1f64:	mov	w8, #0xb17c                	// #45436
    1f68:	mov	w10, #0xc9ac                	// #51628
    1f6c:	mov	w11, #0xe1dc                	// #57820
    1f70:	add	x8, x9, x8
    1f74:	mov	w18, wzr
    1f78:	add	x23, x9, x10
    1f7c:	add	x7, x9, x11
    1f80:	stur	x8, [x29, #-24]
    1f84:	mov	w8, #0x100                 	// #256
    1f88:	mov	w2, #0x31                  	// #49
    1f8c:	mov	w16, w24
    1f90:	stur	x8, [x29, #-16]
    1f94:	ldr	w8, [x21, #36]
    1f98:	mov	w9, #0x24                  	// #36
    1f9c:	str	w9, [x21, #8]
    1fa0:	cmp	w8, w16
    1fa4:	b.ge	2008 <BZ2_decompress+0x2008>  // b.tcont
    1fa8:	ldr	x9, [x21]
    1fac:	ldr	w10, [x9, #8]
    1fb0:	sub	w11, w10, #0x1
    1fb4:	b	1fc4 <BZ2_decompress+0x1fc4>
    1fb8:	cmp	w8, w16
    1fbc:	sub	w11, w11, #0x1
    1fc0:	b.ge	200c <BZ2_decompress+0x200c>  // b.tcont
    1fc4:	cmn	w11, #0x1
    1fc8:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
    1fcc:	ldr	x12, [x9]
    1fd0:	ldr	w13, [x21, #32]
    1fd4:	add	w8, w8, #0x8
    1fd8:	ldrb	w10, [x12], #1
    1fdc:	bfi	w10, w13, #8, #24
    1fe0:	stp	w10, w8, [x21, #32]
    1fe4:	ldr	w13, [x9, #12]
    1fe8:	str	x12, [x9]
    1fec:	adds	w12, w13, #0x1
    1ff0:	stp	w11, w12, [x9, #8]
    1ff4:	b.cc	1fb8 <BZ2_decompress+0x1fb8>  // b.lo, b.ul, b.last
    1ff8:	ldr	w12, [x9, #16]
    1ffc:	add	w12, w12, #0x1
    2000:	str	w12, [x9, #16]
    2004:	b	1fb8 <BZ2_decompress+0x1fb8>
    2008:	ldr	w10, [x21, #32]
    200c:	sub	w8, w8, w16
    2010:	mov	w9, #0xffffffff            	// #-1
    2014:	lsr	w10, w10, w8
    2018:	lsl	w9, w9, w16
    201c:	bic	w30, w10, w9
    2020:	str	w8, [x21, #36]
    2024:	cmp	w16, #0x14
    2028:	b.le	1598 <BZ2_decompress+0x1598>
    202c:	b	1748 <BZ2_decompress+0x1748>
    2030:	ldur	w4, [x29, #-56]
    2034:	ldp	w5, w1, [sp, #32]
    2038:	ldp	x16, x7, [sp]
    203c:	ldr	x23, [sp, #24]
    2040:	ldp	w14, w15, [x29, #-44]
    2044:	ldur	w26, [x29, #-48]
    2048:	mov	w8, #0x100                 	// #256
    204c:	mov	w2, wzr
    2050:	mov	w18, wzr
    2054:	mov	w0, #0xfffffffc            	// #-4
    2058:	stur	x8, [x29, #-16]
    205c:	b	174c <BZ2_decompress+0x174c>
    2060:	sub	w8, w25, #0x1
    2064:	cmp	w8, #0x13
    2068:	b.hi	1744 <BZ2_decompress+0x1744>  // b.pmore
    206c:	stur	x0, [x29, #-16]
    2070:	ldr	w8, [x21, #36]
    2074:	mov	w9, #0x22                  	// #34
    2078:	str	w9, [x21, #8]
    207c:	cmp	w8, #0x1
    2080:	b.lt	20fc <BZ2_decompress+0x20fc>  // b.tstop
    2084:	ldr	w10, [x21, #32]
    2088:	ldur	x0, [x29, #-16]
    208c:	sub	w8, w8, #0x1
    2090:	lsr	w9, w10, w8
    2094:	str	w8, [x21, #36]
    2098:	tbnz	w9, #0, 20c8 <BZ2_decompress+0x20c8>
    209c:	mov	w8, #0x102                 	// #258
    20a0:	smaddl	x8, w1, w8, x21
    20a4:	mov	w9, #0xab70                	// #43888
    20a8:	add	x8, x8, w0, sxtw
    20ac:	strb	w25, [x8, x9]
    20b0:	add	w0, w0, #0x1
    20b4:	cmp	w0, w6
    20b8:	b.lt	2060 <BZ2_decompress+0x2060>  // b.tstop
    20bc:	stur	x0, [x29, #-16]
    20c0:	add	w1, w1, #0x1
    20c4:	b	1bc8 <BZ2_decompress+0x1bc8>
    20c8:	mov	w9, #0x23                  	// #35
    20cc:	cmp	w8, #0x1
    20d0:	str	w9, [x21, #8]
    20d4:	b.lt	2160 <BZ2_decompress+0x2160>  // b.tstop
    20d8:	ldr	w10, [x21, #32]
    20dc:	sub	w8, w8, #0x1
    20e0:	str	w8, [x21, #36]
    20e4:	lsr	w8, w10, w8
    20e8:	tst	w8, #0x1
    20ec:	mov	w8, #0x1                   	// #1
    20f0:	cneg	w8, w8, ne  // ne = any
    20f4:	add	w25, w8, w25
    20f8:	b	2060 <BZ2_decompress+0x2060>
    20fc:	ldr	x9, [x21]
    2100:	ldr	w10, [x9, #8]
    2104:	sub	w11, w10, #0x1
    2108:	b	211c <BZ2_decompress+0x211c>
    210c:	sub	w12, w8, #0x8
    2110:	cmn	w12, #0x8
    2114:	sub	w11, w11, #0x1
    2118:	b.gt	2088 <BZ2_decompress+0x2088>
    211c:	cmn	w11, #0x1
    2120:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
    2124:	ldr	x12, [x9]
    2128:	ldr	w13, [x21, #32]
    212c:	add	w8, w8, #0x8
    2130:	ldrb	w10, [x12], #1
    2134:	bfi	w10, w13, #8, #24
    2138:	stp	w10, w8, [x21, #32]
    213c:	ldr	w13, [x9, #12]
    2140:	str	x12, [x9]
    2144:	adds	w12, w13, #0x1
    2148:	stp	w11, w12, [x9, #8]
    214c:	b.cc	210c <BZ2_decompress+0x210c>  // b.lo, b.ul, b.last
    2150:	ldr	w12, [x9, #16]
    2154:	add	w12, w12, #0x1
    2158:	str	w12, [x9, #16]
    215c:	b	210c <BZ2_decompress+0x210c>
    2160:	ldr	x9, [x21]
    2164:	ldr	w10, [x9, #8]
    2168:	sub	w11, w10, #0x1
    216c:	b	2180 <BZ2_decompress+0x2180>
    2170:	sub	w12, w8, #0x8
    2174:	cmn	w12, #0x8
    2178:	sub	w11, w11, #0x1
    217c:	b.gt	20dc <BZ2_decompress+0x20dc>
    2180:	cmn	w11, #0x1
    2184:	b.eq	21c4 <BZ2_decompress+0x21c4>  // b.none
    2188:	ldr	x12, [x9]
    218c:	ldr	w13, [x21, #32]
    2190:	add	w8, w8, #0x8
    2194:	ldrb	w10, [x12], #1
    2198:	bfi	w10, w13, #8, #24
    219c:	stp	w10, w8, [x21, #32]
    21a0:	ldr	w13, [x9, #12]
    21a4:	str	x12, [x9]
    21a8:	adds	w12, w13, #0x1
    21ac:	stp	w11, w12, [x9, #8]
    21b0:	b.cc	2170 <BZ2_decompress+0x2170>  // b.lo, b.ul, b.last
    21b4:	ldr	w12, [x9, #16]
    21b8:	add	w12, w12, #0x1
    21bc:	str	w12, [x9, #16]
    21c0:	b	2170 <BZ2_decompress+0x2170>
    21c4:	stur	x0, [x29, #-16]
    21c8:	mov	w0, wzr
    21cc:	b	174c <BZ2_decompress+0x174c>
    21d0:	sxtw	x8, w16
    21d4:	ldr	w8, [x23, x8, lsl #2]
    21d8:	sub	w8, w30, w8
    21dc:	cmp	w8, #0x101
    21e0:	b.hi	1748 <BZ2_decompress+0x1748>  // b.pmore
    21e4:	ldr	w4, [x7, w8, uxtw #2]
    21e8:	ldur	w8, [x29, #-32]
    21ec:	cmp	w4, w8
    21f0:	b.eq	25dc <BZ2_decompress+0x25dc>  // b.none
    21f4:	subs	w11, w4, #0x1
    21f8:	b.hi	2208 <BZ2_decompress+0x2208>  // b.pmore
    21fc:	mov	w26, #0xffffffff            	// #-1
    2200:	mov	w3, #0x1                   	// #1
    2204:	b	2b74 <BZ2_decompress+0x2b74>
    2208:	cmp	w17, w19
    220c:	b.ge	1748 <BZ2_decompress+0x1748>  // b.tcont
    2210:	cmp	w11, #0xf
    2214:	b.hi	229c <BZ2_decompress+0x229c>  // b.pmore
    2218:	ldrsw	x9, [x21, #7820]
    221c:	mov	w0, w14
    2220:	cmp	w11, #0x4
    2224:	add	w8, w9, w11
    2228:	add	x8, x21, x8
    222c:	ldrb	w8, [x8, #3724]
    2230:	b.cc	226c <BZ2_decompress+0x226c>  // b.lo, b.ul, b.last
    2234:	mov	w10, w4
    2238:	add	w11, w9, w10
    223c:	add	x12, x21, #0xe8c
    2240:	sub	w13, w11, #0x4
    2244:	sub	w11, w11, #0x5
    2248:	ldr	w14, [x12, w11, sxtw]
    224c:	sub	w11, w10, #0x4
    2250:	sub	w10, w10, #0x5
    2254:	cmp	w10, #0x3
    2258:	mov	w10, w11
    225c:	str	w14, [x12, w13, sxtw]
    2260:	b.hi	2238 <BZ2_decompress+0x2238>  // b.pmore
    2264:	subs	w11, w11, #0x1
    2268:	b.eq	2290 <BZ2_decompress+0x2290>  // b.none
    226c:	neg	w10, w11
    2270:	add	w11, w11, w9
    2274:	sub	w12, w11, #0x1
    2278:	add	x13, x21, #0xe8c
    227c:	ldrb	w14, [x13, w12, uxtw]
    2280:	adds	w10, w10, #0x1
    2284:	strb	w14, [x13, w11, uxtw]
    2288:	mov	w11, w12
    228c:	b.cc	2274 <BZ2_decompress+0x2274>  // b.lo, b.ul, b.last
    2290:	add	x9, x21, x9
    2294:	strb	w8, [x9, #3724]
    2298:	b	2488 <BZ2_decompress+0x2488>
    229c:	lsr	w10, w11, #4
    22a0:	add	x9, x21, w10, uxtw #2
    22a4:	ldr	w13, [x9, #7820]
    22a8:	ands	w8, w11, #0xf
    22ac:	mov	w11, #0x1e8c                	// #7820
    22b0:	add	x11, x9, x11
    22b4:	add	w8, w13, w8
    22b8:	sxtw	x12, w8
    22bc:	add	x8, x21, x12
    22c0:	ldrb	w8, [x8, #3724]
    22c4:	b.eq	22fc <BZ2_decompress+0x22fc>  // b.none
    22c8:	mov	w0, w14
    22cc:	add	x13, x21, x12
    22d0:	ldrb	w14, [x13, #3723]
    22d4:	sub	x12, x12, #0x1
    22d8:	strb	w14, [x13, #3724]
    22dc:	ldrsw	x13, [x11]
    22e0:	cmp	x12, x13
    22e4:	b.gt	22cc <BZ2_decompress+0x22cc>
    22e8:	add	w12, w13, #0x1
    22ec:	mov	w14, w0
    22f0:	str	w12, [x11]
    22f4:	cbnz	w10, 2304 <BZ2_decompress+0x2304>
    22f8:	b	233c <BZ2_decompress+0x233c>
    22fc:	add	w12, w13, #0x1
    2300:	str	w12, [x11]
    2304:	mov	w11, #0x1e8c                	// #7820
    2308:	add	x10, x10, #0x1
    230c:	add	x9, x9, x11
    2310:	ldrsw	x11, [x9]
    2314:	add	x13, x21, #0xe8c
    2318:	sub	x10, x10, #0x1
    231c:	cmp	x10, #0x1
    2320:	sub	x11, x11, #0x1
    2324:	str	w11, [x9], #-4
    2328:	ldrsw	x12, [x9]
    232c:	add	x12, x12, x13
    2330:	ldrb	w12, [x12, #15]
    2334:	strb	w12, [x13, x11]
    2338:	b.gt	2310 <BZ2_decompress+0x2310>
    233c:	ldrsw	x9, [x21, #7820]
    2340:	sub	x9, x9, #0x1
    2344:	str	w9, [x21, #7820]
    2348:	add	x9, x21, x9
    234c:	strb	w8, [x9, #3724]
    2350:	ldr	w9, [x21, #7820]
    2354:	cbnz	w9, 248c <BZ2_decompress+0x248c>
    2358:	mov	w10, #0x1ec8                	// #7880
    235c:	mov	w11, #0x1e83                	// #7811
    2360:	mov	w0, w14
    2364:	mov	x9, xzr
    2368:	add	x10, x21, x10
    236c:	add	x11, x21, x11
    2370:	ldrsw	x12, [x10]
    2374:	add	x13, x21, #0xe8c
    2378:	add	x12, x12, x13
    237c:	ldrb	w14, [x12, #15]
    2380:	add	x12, x11, x9
    2384:	strb	w14, [x12, #8]
    2388:	ldrsw	x14, [x10]
    238c:	add	x14, x14, x13
    2390:	ldrb	w14, [x14, #14]
    2394:	strb	w14, [x12, #7]
    2398:	ldrsw	x14, [x10]
    239c:	add	x14, x14, x13
    23a0:	ldrb	w14, [x14, #13]
    23a4:	strb	w14, [x12, #6]
    23a8:	ldrsw	x14, [x10]
    23ac:	add	x14, x14, x13
    23b0:	ldrb	w14, [x14, #12]
    23b4:	strb	w14, [x12, #5]
    23b8:	ldrsw	x14, [x10]
    23bc:	add	x14, x14, x13
    23c0:	ldrb	w14, [x14, #11]
    23c4:	strb	w14, [x12, #4]
    23c8:	ldrsw	x14, [x10]
    23cc:	add	x14, x14, x13
    23d0:	ldrb	w14, [x14, #10]
    23d4:	strb	w14, [x12, #3]
    23d8:	ldrsw	x14, [x10]
    23dc:	add	x14, x14, x13
    23e0:	ldrb	w14, [x14, #9]
    23e4:	strb	w14, [x12, #2]
    23e8:	ldrsw	x14, [x10]
    23ec:	add	x14, x14, x13
    23f0:	ldrb	w14, [x14, #8]
    23f4:	strb	w14, [x12, #1]
    23f8:	ldrsw	x14, [x10]
    23fc:	add	x14, x14, x13
    2400:	ldrb	w14, [x14, #7]
    2404:	strb	w14, [x12]
    2408:	ldrsw	x14, [x10]
    240c:	add	x14, x14, x13
    2410:	ldrb	w14, [x14, #6]
    2414:	sturb	w14, [x12, #-1]
    2418:	ldrsw	x14, [x10]
    241c:	add	x14, x14, x13
    2420:	ldrb	w14, [x14, #5]
    2424:	sturb	w14, [x12, #-2]
    2428:	ldrsw	x14, [x10]
    242c:	add	x14, x14, x13
    2430:	ldrb	w14, [x14, #4]
    2434:	sturb	w14, [x12, #-3]
    2438:	ldrsw	x14, [x10]
    243c:	add	x14, x14, x13
    2440:	ldrb	w14, [x14, #3]
    2444:	sturb	w14, [x12, #-4]
    2448:	ldrsw	x14, [x10]
    244c:	add	x14, x14, x13
    2450:	ldrb	w14, [x14, #2]
    2454:	sturb	w14, [x12, #-5]
    2458:	ldrsw	x14, [x10]
    245c:	add	x14, x14, x13
    2460:	ldrb	w14, [x14, #1]
    2464:	sturb	w14, [x12, #-6]
    2468:	ldrsw	x14, [x10]
    246c:	ldrb	w13, [x13, x14]
    2470:	add	w14, w9, #0xff0
    2474:	sub	x9, x9, #0x10
    2478:	cmn	x9, #0x100
    247c:	sturb	w13, [x12, #-7]
    2480:	str	w14, [x10], #-4
    2484:	b.ne	2370 <BZ2_decompress+0x2370>  // b.any
    2488:	mov	w14, w0
    248c:	add	x8, x21, x8
    2490:	ldrb	w9, [x8, #3468]
    2494:	add	x9, x21, x9, lsl #2
    2498:	ldr	w10, [x9, #68]
    249c:	add	w10, w10, #0x1
    24a0:	str	w10, [x9, #68]
    24a4:	ldrb	w9, [x21, #44]
    24a8:	ldrb	w8, [x8, #3468]
    24ac:	cbz	w9, 24c4 <BZ2_decompress+0x24c4>
    24b0:	ldr	x9, [x21, #3160]
    24b4:	strh	w8, [x9, w17, sxtw #1]
    24b8:	add	w17, w17, #0x1
    24bc:	cbnz	w2, 2524 <BZ2_decompress+0x2524>
    24c0:	b	24d4 <BZ2_decompress+0x24d4>
    24c4:	ldr	x9, [x21, #3152]
    24c8:	str	w8, [x9, w17, sxtw #2]
    24cc:	add	w17, w17, #0x1
    24d0:	cbnz	w2, 2524 <BZ2_decompress+0x2524>
    24d4:	sxtw	x8, w18
    24d8:	add	x18, x8, #0x1
    24dc:	cmp	w18, w15
    24e0:	b.ge	2d64 <BZ2_decompress+0x2d64>  // b.tcont
    24e4:	add	x8, x21, x18
    24e8:	mov	w9, #0x1ecc                	// #7884
    24ec:	ldrb	w28, [x8, x9]
    24f0:	mov	w10, #0xfa0c                	// #64012
    24f4:	mov	w8, #0x408                 	// #1032
    24f8:	mov	w9, #0xb17c                	// #45436
    24fc:	add	x12, x21, x28, lsl #2
    2500:	madd	x8, x28, x8, x21
    2504:	ldr	w24, [x12, x10]
    2508:	add	x9, x8, x9
    250c:	mov	w11, #0xe1dc                	// #57820
    2510:	stur	x9, [x29, #-24]
    2514:	mov	w9, #0xc9ac                	// #51628
    2518:	add	x7, x8, x11
    251c:	add	x23, x8, x9
    2520:	mov	w2, #0x32                  	// #50
    2524:	sub	w2, w2, #0x1
    2528:	mov	w16, w24
    252c:	ldr	w8, [x21, #36]
    2530:	mov	w9, #0x28                  	// #40
    2534:	str	w9, [x21, #8]
    2538:	cmp	w8, w16
    253c:	b.ge	25a0 <BZ2_decompress+0x25a0>  // b.tcont
    2540:	ldr	x9, [x21]
    2544:	ldr	w10, [x9, #8]
    2548:	sub	w11, w10, #0x1
    254c:	b	255c <BZ2_decompress+0x255c>
    2550:	cmp	w8, w16
    2554:	sub	w11, w11, #0x1
    2558:	b.ge	25a4 <BZ2_decompress+0x25a4>  // b.tcont
    255c:	cmn	w11, #0x1
    2560:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
    2564:	ldr	x12, [x9]
    2568:	ldr	w13, [x21, #32]
    256c:	add	w8, w8, #0x8
    2570:	ldrb	w10, [x12], #1
    2574:	bfi	w10, w13, #8, #24
    2578:	stp	w10, w8, [x21, #32]
    257c:	ldr	w13, [x9, #12]
    2580:	str	x12, [x9]
    2584:	adds	w12, w13, #0x1
    2588:	stp	w11, w12, [x9, #8]
    258c:	b.cc	2550 <BZ2_decompress+0x2550>  // b.lo, b.ul, b.last
    2590:	ldr	w12, [x9, #16]
    2594:	add	w12, w12, #0x1
    2598:	str	w12, [x9, #16]
    259c:	b	2550 <BZ2_decompress+0x2550>
    25a0:	ldr	w10, [x21, #32]
    25a4:	sub	w8, w8, w16
    25a8:	mov	w9, #0xffffffff            	// #-1
    25ac:	lsr	w10, w10, w8
    25b0:	lsl	w9, w9, w16
    25b4:	bic	w30, w10, w9
    25b8:	str	w8, [x21, #36]
    25bc:	cmp	w16, #0x14
    25c0:	b.gt	1748 <BZ2_decompress+0x1748>
    25c4:	ldur	x9, [x29, #-24]
    25c8:	ldr	w9, [x9, w16, sxtw #2]
    25cc:	cmp	w30, w9
    25d0:	b.le	21d0 <BZ2_decompress+0x21d0>
    25d4:	add	w16, w16, #0x1
    25d8:	b	16a8 <BZ2_decompress+0x16a8>
    25dc:	ldr	w8, [x21, #56]
    25e0:	mov	w0, #0xfffffffc            	// #-4
    25e4:	tbnz	w8, #31, 27bc <BZ2_decompress+0x27bc>
    25e8:	cmp	w8, w17
    25ec:	b.ge	27bc <BZ2_decompress+0x27bc>  // b.tcont
    25f0:	mov	x10, xzr
    25f4:	add	x8, x21, #0x44
    25f8:	ldr	w9, [x8, x10, lsl #2]
    25fc:	tbnz	w9, #31, 27b4 <BZ2_decompress+0x27b4>
    2600:	cmp	w9, w17
    2604:	b.gt	27b4 <BZ2_decompress+0x27b4>
    2608:	add	x10, x10, #0x1
    260c:	cmp	x10, #0x100
    2610:	b.ne	25f8 <BZ2_decompress+0x25f8>  // b.any
    2614:	mov	w27, w1
    2618:	mov	x8, xzr
    261c:	add	x1, x21, #0x448
    2620:	str	wzr, [x21, #1096]
    2624:	add	x9, x21, x8
    2628:	ldur	q0, [x9, #68]
    262c:	add	x8, x8, #0x10
    2630:	add	x9, x9, #0x44c
    2634:	cmp	x8, #0x400
    2638:	str	q0, [x9]
    263c:	b.ne	2624 <BZ2_decompress+0x2624>  // b.any
    2640:	ldr	w9, [x21, #1096]
    2644:	mov	x8, xzr
    2648:	add	x10, x21, #0x44c
    264c:	ldr	w11, [x10, x8]
    2650:	add	w9, w11, w9
    2654:	str	w9, [x10, x8]
    2658:	add	x8, x8, #0x4
    265c:	cmp	x8, #0x400
    2660:	b.ne	264c <BZ2_decompress+0x264c>  // b.any
    2664:	mov	x10, xzr
    2668:	add	x8, x21, #0x448
    266c:	ldr	w9, [x8, x10, lsl #2]
    2670:	tbnz	w9, #31, 27c4 <BZ2_decompress+0x27c4>
    2674:	cmp	w9, w17
    2678:	b.gt	27c4 <BZ2_decompress+0x27c4>
    267c:	add	x10, x10, #0x1
    2680:	cmp	x10, #0x101
    2684:	b.ne	266c <BZ2_decompress+0x266c>  // b.any
    2688:	ldr	w10, [x21, #1096]
    268c:	mov	x8, xzr
    2690:	add	x9, x21, #0x44c
    2694:	ldr	w11, [x9, x8, lsl #2]
    2698:	cmp	w10, w11
    269c:	b.gt	27cc <BZ2_decompress+0x27cc>
    26a0:	add	x8, x8, #0x1
    26a4:	cmp	x8, #0x100
    26a8:	mov	w10, w11
    26ac:	b.ne	2694 <BZ2_decompress+0x2694>  // b.any
    26b0:	ldr	w8, [x21, #52]
    26b4:	mov	w9, #0xffffffff            	// #-1
    26b8:	str	w9, [x21, #3184]
    26bc:	mov	w9, #0x2                   	// #2
    26c0:	cmp	w8, #0x2
    26c4:	str	wzr, [x21, #16]
    26c8:	strb	wzr, [x21, #12]
    26cc:	str	w9, [x21, #8]
    26d0:	str	w5, [sp, #32]
    26d4:	stur	w25, [x29, #-60]
    26d8:	str	x7, [sp, #8]
    26dc:	str	x23, [sp, #24]
    26e0:	stur	w15, [x29, #-40]
    26e4:	stur	w26, [x29, #-48]
    26e8:	str	x19, [sp, #56]
    26ec:	str	x18, [sp, #40]
    26f0:	b.ge	2b08 <BZ2_decompress+0x2b08>  // b.tcont
    26f4:	ldur	w25, [x29, #-36]
    26f8:	ldrb	w8, [x21, #44]
    26fc:	cbz	w8, 2928 <BZ2_decompress+0x2928>
    2700:	mov	w26, w14
    2704:	mov	w23, w4
    2708:	mov	w19, w6
    270c:	mov	w8, #0x448                 	// #1096
    2710:	str	w2, [sp, #52]
    2714:	str	x16, [sp]
    2718:	stur	w30, [x29, #-44]
    271c:	str	w3, [sp, #36]
    2720:	add	x9, x21, x8
    2724:	ldr	q0, [x9]
    2728:	add	x8, x8, #0x10
    272c:	add	x9, x9, #0x404
    2730:	cmp	x8, #0x848
    2734:	str	q0, [x9]
    2738:	b.ne	2720 <BZ2_decompress+0x2720>  // b.any
    273c:	ldr	w8, [x21, #2120]
    2740:	cmp	w17, #0x0
    2744:	str	w8, [x21, #3148]
    2748:	b.le	27e4 <BZ2_decompress+0x27e4>
    274c:	mov	x8, xzr
    2750:	mov	w9, w17
    2754:	b	277c <BZ2_decompress+0x277c>
    2758:	asr	w14, w14, #16
    275c:	bfi	w13, w14, #4, #28
    2760:	strb	w13, [x11, x12]
    2764:	ldr	w11, [x10]
    2768:	add	x8, x8, #0x1
    276c:	cmp	x9, x8
    2770:	add	w11, w11, #0x1
    2774:	str	w11, [x10]
    2778:	b.eq	27e4 <BZ2_decompress+0x27e4>  // b.none
    277c:	ldr	x10, [x21, #3160]
    2780:	lsl	x11, x8, #1
    2784:	ldrb	w12, [x10, x11]
    2788:	add	x15, x21, x12, lsl #2
    278c:	ldr	w14, [x15, #2124]
    2790:	ubfx	x12, x8, #1, #31
    2794:	strh	w14, [x10, x11]
    2798:	ldr	x11, [x21, #3168]
    279c:	add	x10, x15, #0x84c
    27a0:	ldrb	w13, [x11, x12]
    27a4:	tbnz	w8, #0, 2758 <BZ2_decompress+0x2758>
    27a8:	and	w13, w13, #0xf0
    27ac:	orr	w13, w13, w14, asr #16
    27b0:	b	2760 <BZ2_decompress+0x2760>
    27b4:	mov	w0, #0xfffffffc            	// #-4
    27b8:	stur	x10, [x29, #-16]
    27bc:	stur	w4, [x29, #-32]
    27c0:	b	174c <BZ2_decompress+0x174c>
    27c4:	stur	x10, [x29, #-16]
    27c8:	b	27d4 <BZ2_decompress+0x27d4>
    27cc:	add	w8, w8, #0x1
    27d0:	stur	x8, [x29, #-16]
    27d4:	mov	w0, #0xfffffffc            	// #-4
    27d8:	stur	w4, [x29, #-32]
    27dc:	mov	w1, w27
    27e0:	b	174c <BZ2_decompress+0x174c>
    27e4:	ldrsw	x9, [x21, #56]
    27e8:	ldr	x8, [x21, #3168]
    27ec:	ldr	x10, [x21, #3160]
    27f0:	str	x17, [sp, #16]
    27f4:	asr	w11, w9, #1
    27f8:	ldrb	w11, [x8, w11, sxtw]
    27fc:	ldrh	w20, [x10, x9, lsl #1]
    2800:	ubfiz	w12, w9, #2, #1
    2804:	lsr	w11, w11, w12
    2808:	bfi	w20, w11, #16, #4
    280c:	mov	w14, w20
    2810:	sbfx	x11, x14, #1, #31
    2814:	sbfiz	x12, x14, #1, #32
    2818:	ldrb	w13, [x8, x11]
    281c:	ldrh	w20, [x10, x12]
    2820:	strh	w9, [x10, x12]
    2824:	ldrb	w10, [x8, x11]
    2828:	ubfiz	w12, w14, #2, #1
    282c:	lsr	w12, w13, w12
    2830:	bfi	w20, w12, #16, #4
    2834:	tbnz	w14, #0, 2844 <BZ2_decompress+0x2844>
    2838:	and	w10, w10, #0xf0
    283c:	orr	w10, w10, w9, asr #16
    2840:	b	284c <BZ2_decompress+0x284c>
    2844:	asr	w9, w9, #16
    2848:	bfi	w10, w9, #4, #28
    284c:	strb	w10, [x8, x11]
    2850:	ldr	w8, [x21, #56]
    2854:	cmp	w14, w8
    2858:	b.eq	286c <BZ2_decompress+0x286c>  // b.none
    285c:	ldr	x10, [x21, #3160]
    2860:	ldr	x8, [x21, #3168]
    2864:	mov	w9, w14
    2868:	b	280c <BZ2_decompress+0x280c>
    286c:	ldrb	w9, [x21, #20]
    2870:	mov	w8, #0x86a0                	// #34464
    2874:	movk	w8, #0x1, lsl #16
    2878:	str	w14, [x21, #60]
    287c:	str	wzr, [x21, #1092]
    2880:	stur	x14, [x29, #-16]
    2884:	cbz	w9, 298c <BZ2_decompress+0x298c>
    2888:	ldr	w9, [x21, #40]
    288c:	str	xzr, [x21, #24]
    2890:	mul	w8, w9, w8
    2894:	cmp	w14, w8
    2898:	b.cs	2a24 <BZ2_decompress+0x2a24>  // b.hs, b.nlast
    289c:	ldur	x0, [x29, #-16]
    28a0:	bl	0 <BZ2_indexIntoF>
    28a4:	ldr	w9, [x21, #60]
    28a8:	ldr	x10, [x21, #3168]
    28ac:	str	w0, [x21, #64]
    28b0:	ldr	x11, [x21, #3160]
    28b4:	lsr	x12, x9, #1
    28b8:	ldrb	w10, [x10, x12]
    28bc:	ldr	w12, [x21, #1092]
    28c0:	ldrh	w11, [x11, x9, lsl #1]
    28c4:	ubfiz	w9, w9, #2, #1
    28c8:	lsr	w10, w10, w9
    28cc:	ldr	w9, [x21, #24]
    28d0:	mov	w8, w0
    28d4:	add	w12, w12, #0x1
    28d8:	bfi	w11, w10, #16, #4
    28dc:	str	w11, [x21, #60]
    28e0:	str	w12, [x21, #1092]
    28e4:	cbnz	w9, 2908 <BZ2_decompress+0x2908>
    28e8:	ldrsw	x10, [x21, #28]
    28ec:	adrp	x9, 0 <BZ2_rNums>
    28f0:	add	x9, x9, #0x0
    28f4:	ldr	w9, [x9, x10, lsl #2]
    28f8:	add	w11, w10, #0x1
    28fc:	cmp	w11, #0x200
    2900:	csinc	w10, wzr, w10, eq  // eq = none
    2904:	stp	w9, w10, [x21, #24]
    2908:	sub	w9, w9, #0x1
    290c:	cmp	w9, #0x1
    2910:	str	w9, [x21, #24]
    2914:	cset	w9, eq  // eq = none
    2918:	mov	w0, wzr
    291c:	eor	w8, w8, w9
    2920:	str	w8, [x21, #64]
    2924:	b	29e4 <BZ2_decompress+0x29e4>
    2928:	ldr	x8, [x21, #3152]
    292c:	mov	w26, w14
    2930:	mov	x18, x17
    2934:	cmp	w17, #0x1
    2938:	b.lt	2a2c <BZ2_decompress+0x2a2c>  // b.tstop
    293c:	mov	w10, w18
    2940:	mov	x9, xzr
    2944:	lsl	x10, x10, #8
    2948:	mov	x11, x8
    294c:	ldrb	w12, [x11], #4
    2950:	add	x12, x21, x12, lsl #2
    2954:	ldrsw	x13, [x12, #1096]
    2958:	lsl	x13, x13, #2
    295c:	ldr	w14, [x8, x13]
    2960:	orr	w14, w14, w9
    2964:	str	w14, [x8, x13]
    2968:	ldr	w13, [x12, #1096]
    296c:	add	x9, x9, #0x100
    2970:	cmp	x10, x9
    2974:	add	w13, w13, #0x1
    2978:	str	w13, [x12, #1096]
    297c:	b.ne	294c <BZ2_decompress+0x294c>  // b.any
    2980:	mov	w9, w18
    2984:	stur	x9, [x29, #-16]
    2988:	b	2a30 <BZ2_decompress+0x2a30>
    298c:	ldr	w9, [x21, #40]
    2990:	mul	w8, w9, w8
    2994:	cmp	w14, w8
    2998:	b.cs	2a24 <BZ2_decompress+0x2a24>  // b.hs, b.nlast
    299c:	ldur	x0, [x29, #-16]
    29a0:	bl	0 <BZ2_indexIntoF>
    29a4:	ldr	w9, [x21, #60]
    29a8:	mov	w8, w0
    29ac:	ldr	x10, [x21, #3168]
    29b0:	str	w8, [x21, #64]
    29b4:	ldr	x8, [x21, #3160]
    29b8:	lsr	x11, x9, #1
    29bc:	ldrb	w10, [x10, x11]
    29c0:	ldr	w11, [x21, #1092]
    29c4:	ldrh	w8, [x8, x9, lsl #1]
    29c8:	ubfiz	w9, w9, #2, #1
    29cc:	lsr	w9, w10, w9
    29d0:	add	w10, w11, #0x1
    29d4:	bfi	w8, w9, #16, #4
    29d8:	mov	w0, wzr
    29dc:	str	w8, [x21, #60]
    29e0:	str	w10, [x21, #1092]
    29e4:	mov	w4, w23
    29e8:	stur	w23, [x29, #-32]
    29ec:	mov	w6, w19
    29f0:	mov	w9, w25
    29f4:	ldp	w5, w3, [sp, #32]
    29f8:	ldur	w25, [x29, #-60]
    29fc:	mov	w14, w26
    2a00:	ldp	x16, x7, [sp]
    2a04:	ldp	x17, x23, [sp, #16]
    2a08:	ldp	w30, w15, [x29, #-44]
    2a0c:	ldur	w26, [x29, #-48]
    2a10:	ldr	x19, [sp, #56]
    2a14:	ldr	x18, [sp, #40]
    2a18:	ldr	w2, [sp, #52]
    2a1c:	mov	w1, w27
    2a20:	b	1750 <BZ2_decompress+0x1750>
    2a24:	mov	w0, #0x1                   	// #1
    2a28:	b	1794 <BZ2_decompress+0x1794>
    2a2c:	stur	xzr, [x29, #-16]
    2a30:	ldrsw	x9, [x21, #56]
    2a34:	ldrb	w11, [x21, #20]
    2a38:	mov	w10, #0x86a0                	// #34464
    2a3c:	movk	w10, #0x1, lsl #16
    2a40:	ldr	w9, [x8, x9, lsl #2]
    2a44:	str	wzr, [x21, #1092]
    2a48:	lsr	x9, x9, #8
    2a4c:	str	w9, [x21, #60]
    2a50:	cbz	w11, 2aa4 <BZ2_decompress+0x2aa4>
    2a54:	ldr	w11, [x21, #40]
    2a58:	mov	w0, #0x1                   	// #1
    2a5c:	str	xzr, [x21, #24]
    2a60:	mul	w10, w11, w10
    2a64:	cmp	w9, w10
    2a68:	b.cs	1794 <BZ2_decompress+0x1794>  // b.hs, b.nlast
    2a6c:	ldr	w8, [x8, x9, lsl #2]
    2a70:	str	w0, [x21, #1092]
    2a74:	lsr	w9, w8, #8
    2a78:	str	w9, [x21, #60]
    2a7c:	adrp	x9, 0 <BZ2_rNums>
    2a80:	ldr	w9, [x9]
    2a84:	and	w8, w8, #0xff
    2a88:	sub	w9, w9, #0x1
    2a8c:	cmp	w9, #0x1
    2a90:	stp	w9, w0, [x21, #24]
    2a94:	cset	w9, eq  // eq = none
    2a98:	eor	w8, w8, w9
    2a9c:	str	w8, [x21, #64]
    2aa0:	b	2acc <BZ2_decompress+0x2acc>
    2aa4:	ldr	w11, [x21, #40]
    2aa8:	mov	w0, #0x1                   	// #1
    2aac:	mul	w10, w11, w10
    2ab0:	cmp	w9, w10
    2ab4:	b.cs	1794 <BZ2_decompress+0x1794>  // b.hs, b.nlast
    2ab8:	ldr	w8, [x8, w9, uxtw #2]
    2abc:	str	w0, [x21, #1092]
    2ac0:	and	w9, w8, #0xff
    2ac4:	lsr	w8, w8, #8
    2ac8:	stp	w8, w9, [x21, #60]
    2acc:	mov	w9, w25
    2ad0:	ldr	w5, [sp, #32]
    2ad4:	ldur	w25, [x29, #-60]
    2ad8:	mov	w14, w26
    2adc:	ldr	x7, [sp, #8]
    2ae0:	ldr	x23, [sp, #24]
    2ae4:	ldur	w15, [x29, #-40]
    2ae8:	ldur	w26, [x29, #-48]
    2aec:	ldr	x19, [sp, #56]
    2af0:	mov	x17, x18
    2af4:	ldr	x18, [sp, #40]
    2af8:	stur	w4, [x29, #-32]
    2afc:	mov	w0, wzr
    2b00:	mov	w1, w27
    2b04:	b	1750 <BZ2_decompress+0x1750>
    2b08:	adrp	x8, 0 <stderr>
    2b0c:	str	w3, [sp, #36]
    2b10:	ldr	x3, [x8]
    2b14:	adrp	x0, 0 <BZ2_decompress>
    2b18:	add	x0, x0, #0x0
    2b1c:	stur	x1, [x29, #-16]
    2b20:	mov	w1, #0x6                   	// #6
    2b24:	str	w2, [sp, #52]
    2b28:	mov	w2, #0x1                   	// #1
    2b2c:	stur	w4, [x29, #-56]
    2b30:	stur	w20, [x29, #-52]
    2b34:	mov	w25, w6
    2b38:	mov	w26, w30
    2b3c:	mov	x19, x16
    2b40:	mov	x23, x17
    2b44:	stur	w14, [x29, #-44]
    2b48:	bl	0 <fwrite>
    2b4c:	ldur	w14, [x29, #-44]
    2b50:	ldr	w2, [sp, #52]
    2b54:	ldr	w3, [sp, #36]
    2b58:	ldp	w4, w20, [x29, #-56]
    2b5c:	ldur	x1, [x29, #-16]
    2b60:	mov	x17, x23
    2b64:	mov	x16, x19
    2b68:	mov	w30, w26
    2b6c:	mov	w6, w25
    2b70:	b	26f4 <BZ2_decompress+0x26f4>
    2b74:	cmp	w3, #0x200, lsl #12
    2b78:	b.ge	1748 <BZ2_decompress+0x1748>  // b.tcont
    2b7c:	cmp	w4, #0x1
    2b80:	b.eq	2b98 <BZ2_decompress+0x2b98>  // b.none
    2b84:	cbnz	w4, 2b8c <BZ2_decompress+0x2b8c>
    2b88:	add	w26, w26, w3
    2b8c:	lsl	w3, w3, #1
    2b90:	cbnz	w2, 2bf4 <BZ2_decompress+0x2bf4>
    2b94:	b	2ba4 <BZ2_decompress+0x2ba4>
    2b98:	add	w26, w26, w3, lsl #1
    2b9c:	lsl	w3, w3, #1
    2ba0:	cbnz	w2, 2bf4 <BZ2_decompress+0x2bf4>
    2ba4:	sxtw	x8, w18
    2ba8:	add	x18, x8, #0x1
    2bac:	cmp	w18, w15
    2bb0:	b.ge	2d64 <BZ2_decompress+0x2d64>  // b.tcont
    2bb4:	add	x8, x21, x18
    2bb8:	mov	w9, #0x1ecc                	// #7884
    2bbc:	ldrb	w28, [x8, x9]
    2bc0:	mov	w10, #0xfa0c                	// #64012
    2bc4:	mov	w8, #0x408                 	// #1032
    2bc8:	mov	w9, #0xb17c                	// #45436
    2bcc:	add	x12, x21, x28, lsl #2
    2bd0:	madd	x8, x28, x8, x21
    2bd4:	ldr	w24, [x12, x10]
    2bd8:	add	x9, x8, x9
    2bdc:	mov	w11, #0xe1dc                	// #57820
    2be0:	stur	x9, [x29, #-24]
    2be4:	mov	w9, #0xc9ac                	// #51628
    2be8:	add	x7, x8, x11
    2bec:	add	x23, x8, x9
    2bf0:	mov	w2, #0x32                  	// #50
    2bf4:	sub	w2, w2, #0x1
    2bf8:	mov	w16, w24
    2bfc:	ldr	w8, [x21, #36]
    2c00:	mov	w9, #0x26                  	// #38
    2c04:	str	w9, [x21, #8]
    2c08:	cmp	w8, w16
    2c0c:	b.ge	2c70 <BZ2_decompress+0x2c70>  // b.tcont
    2c10:	ldr	x9, [x21]
    2c14:	ldr	w10, [x9, #8]
    2c18:	sub	w11, w10, #0x1
    2c1c:	b	2c2c <BZ2_decompress+0x2c2c>
    2c20:	cmp	w8, w16
    2c24:	sub	w11, w11, #0x1
    2c28:	b.ge	2c74 <BZ2_decompress+0x2c74>  // b.tcont
    2c2c:	cmn	w11, #0x1
    2c30:	b.eq	173c <BZ2_decompress+0x173c>  // b.none
    2c34:	ldr	x12, [x9]
    2c38:	ldr	w13, [x21, #32]
    2c3c:	add	w8, w8, #0x8
    2c40:	ldrb	w10, [x12], #1
    2c44:	bfi	w10, w13, #8, #24
    2c48:	stp	w10, w8, [x21, #32]
    2c4c:	ldr	w13, [x9, #12]
    2c50:	str	x12, [x9]
    2c54:	adds	w12, w13, #0x1
    2c58:	stp	w11, w12, [x9, #8]
    2c5c:	b.cc	2c20 <BZ2_decompress+0x2c20>  // b.lo, b.ul, b.last
    2c60:	ldr	w12, [x9, #16]
    2c64:	add	w12, w12, #0x1
    2c68:	str	w12, [x9, #16]
    2c6c:	b	2c20 <BZ2_decompress+0x2c20>
    2c70:	ldr	w10, [x21, #32]
    2c74:	sub	w8, w8, w16
    2c78:	mov	w9, #0xffffffff            	// #-1
    2c7c:	lsr	w10, w10, w8
    2c80:	lsl	w9, w9, w16
    2c84:	bic	w30, w10, w9
    2c88:	str	w8, [x21, #36]
    2c8c:	cmp	w16, #0x14
    2c90:	b.gt	1748 <BZ2_decompress+0x1748>
    2c94:	ldur	x9, [x29, #-24]
    2c98:	ldr	w9, [x9, w16, sxtw #2]
    2c9c:	cmp	w30, w9
    2ca0:	b.le	2cac <BZ2_decompress+0x2cac>
    2ca4:	add	w16, w16, #0x1
    2ca8:	b	1614 <BZ2_decompress+0x1614>
    2cac:	sxtw	x8, w16
    2cb0:	ldr	w8, [x23, x8, lsl #2]
    2cb4:	sub	w8, w30, w8
    2cb8:	cmp	w8, #0x101
    2cbc:	b.hi	1748 <BZ2_decompress+0x1748>  // b.pmore
    2cc0:	ldr	w4, [x7, w8, uxtw #2]
    2cc4:	cmp	w4, #0x2
    2cc8:	b.cc	2b74 <BZ2_decompress+0x2b74>  // b.lo, b.ul, b.last
    2ccc:	ldrsw	x8, [x21, #7820]
    2cd0:	add	x8, x21, x8
    2cd4:	ldrb	w8, [x8, #3724]
    2cd8:	add	x8, x21, x8
    2cdc:	ldrb	w9, [x8, #3468]
    2ce0:	add	w8, w26, #0x1
    2ce4:	add	x10, x21, x9, lsl #2
    2ce8:	ldr	w11, [x10, #68]
    2cec:	add	w11, w11, w8
    2cf0:	str	w11, [x10, #68]
    2cf4:	ldrb	w10, [x21, #44]
    2cf8:	cbz	w10, 2d28 <BZ2_decompress+0x2d28>
    2cfc:	tbnz	w26, #31, 2d50 <BZ2_decompress+0x2d50>
    2d00:	sxtw	x17, w17
    2d04:	sxtw	x10, w19
    2d08:	cmp	x17, x10
    2d0c:	b.ge	2d58 <BZ2_decompress+0x2d58>  // b.tcont
    2d10:	ldr	x11, [x21, #3160]
    2d14:	subs	w8, w8, #0x1
    2d18:	strh	w9, [x11, x17, lsl #1]
    2d1c:	add	x17, x17, #0x1
    2d20:	b.gt	2d08 <BZ2_decompress+0x2d08>
    2d24:	b	2d50 <BZ2_decompress+0x2d50>
    2d28:	tbnz	w26, #31, 2d50 <BZ2_decompress+0x2d50>
    2d2c:	sxtw	x17, w17
    2d30:	sxtw	x10, w19
    2d34:	cmp	x17, x10
    2d38:	b.ge	2d58 <BZ2_decompress+0x2d58>  // b.tcont
    2d3c:	ldr	x11, [x21, #3152]
    2d40:	subs	w8, w8, #0x1
    2d44:	str	w9, [x11, x17, lsl #2]
    2d48:	add	x17, x17, #0x1
    2d4c:	b.gt	2d34 <BZ2_decompress+0x2d34>
    2d50:	mov	w26, w8
    2d54:	b	21e8 <BZ2_decompress+0x21e8>
    2d58:	mov	w0, #0xfffffffc            	// #-4
    2d5c:	mov	w26, w8
    2d60:	b	174c <BZ2_decompress+0x174c>
    2d64:	mov	w2, wzr
    2d68:	b	1748 <BZ2_decompress+0x1748>

bzlib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_bz__AssertH__fail>:
       0:	stp	x29, x30, [sp, #-32]!
       4:	stp	x20, x19, [sp, #16]
       8:	mov	x29, sp
       c:	adrp	x20, 0 <stderr>
      10:	ldr	x8, [x20]
      14:	mov	w19, w0
      18:	adrp	x1, 0 <BZ2_bz__AssertH__fail>
      1c:	adrp	x3, 0 <BZ2_bz__AssertH__fail>
      20:	add	x1, x1, #0x0
      24:	add	x3, x3, #0x0
      28:	mov	x0, x8
      2c:	mov	w2, w19
      30:	bl	0 <fprintf>
      34:	cmp	w19, #0x3ef
      38:	b.ne	54 <BZ2_bz__AssertH__fail+0x54>  // b.any
      3c:	ldr	x3, [x20]
      40:	adrp	x0, 0 <BZ2_bz__AssertH__fail>
      44:	add	x0, x0, #0x0
      48:	mov	w1, #0x420                 	// #1056
      4c:	mov	w2, #0x1                   	// #1
      50:	bl	0 <fwrite>
      54:	mov	w0, #0x3                   	// #3
      58:	bl	0 <exit>

000000000000005c <BZ2_bzlibVersion>:
      5c:	adrp	x0, 0 <BZ2_bz__AssertH__fail>
      60:	add	x0, x0, #0x0
      64:	ret

0000000000000068 <BZ2_bzCompressInit>:
      68:	stp	x29, x30, [sp, #-64]!
      6c:	stp	x24, x23, [sp, #16]
      70:	stp	x22, x21, [sp, #32]
      74:	stp	x20, x19, [sp, #48]
      78:	mov	x29, sp
      7c:	mov	x19, x0
      80:	cmp	w3, #0xfa
      84:	mov	w0, #0xfffffffe            	// #-2
      88:	b.hi	234 <BZ2_bzCompressInit+0x1cc>  // b.pmore
      8c:	cbz	x19, 234 <BZ2_bzCompressInit+0x1cc>
      90:	sub	w8, w1, #0x1
      94:	mov	w21, w1
      98:	cmp	w8, #0x8
      9c:	b.hi	234 <BZ2_bzCompressInit+0x1cc>  // b.pmore
      a0:	ldr	x8, [x19, #56]
      a4:	cmp	w3, #0x0
      a8:	mov	w9, #0x1e                  	// #30
      ac:	mov	w22, w2
      b0:	csel	w24, w9, w3, eq  // eq = none
      b4:	cbz	x8, 1e4 <BZ2_bzCompressInit+0x17c>
      b8:	ldr	x9, [x19, #64]
      bc:	cbnz	x9, cc <BZ2_bzCompressInit+0x64>
      c0:	adrp	x9, 0 <BZ2_bz__AssertH__fail>
      c4:	add	x9, x9, #0x0
      c8:	str	x9, [x19, #64]
      cc:	ldr	x0, [x19, #72]
      d0:	mov	w1, #0xd9d8                	// #55768
      d4:	mov	w2, #0x1                   	// #1
      d8:	blr	x8
      dc:	cbz	x0, 230 <BZ2_bzCompressInit+0x1c8>
      e0:	str	x19, [x0]
      e4:	stp	xzr, xzr, [x0, #32]
      e8:	str	xzr, [x0, #24]
      ec:	mov	x20, x0
      f0:	ldr	x8, [x19, #56]
      f4:	ldr	x0, [x19, #72]
      f8:	mov	w9, #0x1a80                	// #6784
      fc:	movk	w9, #0x6, lsl #16
     100:	mul	w23, w21, w9
     104:	mov	w2, #0x1                   	// #1
     108:	mov	w1, w23
     10c:	blr	x8
     110:	str	x0, [x20, #24]
     114:	ldr	x8, [x19, #56]
     118:	ldr	x0, [x19, #72]
     11c:	add	w1, w23, #0x88
     120:	mov	w2, #0x1                   	// #1
     124:	blr	x8
     128:	str	x0, [x20, #32]
     12c:	ldr	x8, [x19, #56]
     130:	ldr	x0, [x19, #72]
     134:	mov	w1, #0x40004               	// #262148
     138:	mov	w2, #0x1                   	// #1
     13c:	blr	x8
     140:	ldr	x1, [x20, #24]
     144:	str	x0, [x20, #40]
     148:	cbz	x1, 204 <BZ2_bzCompressInit+0x19c>
     14c:	cbz	x0, 1fc <BZ2_bzCompressInit+0x194>
     150:	ldr	x8, [x20, #32]
     154:	cbz	x8, 1fc <BZ2_bzCompressInit+0x194>
     158:	mov	w9, #0x86a0                	// #34464
     15c:	movk	w9, #0x1, lsl #16
     160:	movi	v0.2s, #0x2
     164:	mul	w9, w21, w9
     168:	stp	x1, x8, [x20, #56]
     16c:	movi	v1.2d, #0x0
     170:	adrp	x8, 0 <BZ2_bz__AssertH__fail>
     174:	str	d0, [x20, #8]
     178:	movi	d0, #0xffffffff
     17c:	sub	w9, w9, #0x13
     180:	str	w22, [x20, #656]
     184:	str	w21, [x20, #664]
     188:	str	w24, [x20, #88]
     18c:	stp	x1, xzr, [x20, #72]
     190:	str	w9, [x20, #112]
     194:	str	x20, [x19, #48]
     198:	stur	d1, [x19, #12]
     19c:	stur	d1, [x19, #36]
     1a0:	str	d0, [x20, #648]
     1a4:	ldr	d0, [x8]
     1a8:	mov	w0, wzr
     1ac:	mov	w10, #0x1                   	// #1
     1b0:	str	wzr, [x20, #108]
     1b4:	stur	d1, [x20, #116]
     1b8:	stp	q1, q1, [x20, #128]
     1bc:	stp	q1, q1, [x20, #160]
     1c0:	stp	q1, q1, [x20, #192]
     1c4:	stp	q1, q1, [x20, #224]
     1c8:	stp	q1, q1, [x20, #256]
     1cc:	stp	q1, q1, [x20, #288]
     1d0:	stp	q1, q1, [x20, #320]
     1d4:	stp	q1, q1, [x20, #352]
     1d8:	stur	d0, [x20, #92]
     1dc:	str	w10, [x20, #660]
     1e0:	b	234 <BZ2_bzCompressInit+0x1cc>
     1e4:	adrp	x8, 0 <BZ2_bz__AssertH__fail>
     1e8:	add	x8, x8, #0x0
     1ec:	str	x8, [x19, #56]
     1f0:	ldr	x9, [x19, #64]
     1f4:	cbnz	x9, cc <BZ2_bzCompressInit+0x64>
     1f8:	b	c0 <BZ2_bzCompressInit+0x58>
     1fc:	ldp	x8, x0, [x19, #64]
     200:	blr	x8
     204:	ldr	x1, [x20, #32]
     208:	cbz	x1, 214 <BZ2_bzCompressInit+0x1ac>
     20c:	ldp	x8, x0, [x19, #64]
     210:	blr	x8
     214:	ldr	x1, [x20, #40]
     218:	cbz	x1, 224 <BZ2_bzCompressInit+0x1bc>
     21c:	ldp	x8, x0, [x19, #64]
     220:	blr	x8
     224:	ldp	x8, x0, [x19, #64]
     228:	mov	x1, x20
     22c:	blr	x8
     230:	mov	w0, #0xfffffffd            	// #-3
     234:	ldp	x20, x19, [sp, #48]
     238:	ldp	x22, x21, [sp, #32]
     23c:	ldp	x24, x23, [sp, #16]
     240:	ldp	x29, x30, [sp], #64
     244:	ret

0000000000000248 <default_bzalloc>:
     248:	mul	w8, w2, w1
     24c:	sxtw	x0, w8
     250:	b	0 <malloc>

0000000000000254 <default_bzfree>:
     254:	cbz	x1, 260 <default_bzfree+0xc>
     258:	mov	x0, x1
     25c:	b	0 <free>
     260:	ret

0000000000000264 <BZ2_bzCompress>:
     264:	stp	x29, x30, [sp, #-32]!
     268:	str	x19, [sp, #16]
     26c:	mov	x29, sp
     270:	cbz	x0, 28c <BZ2_bzCompress+0x28>
     274:	ldr	x19, [x0, #48]
     278:	mov	x8, x0
     27c:	cbz	x19, 28c <BZ2_bzCompress+0x28>
     280:	ldr	x9, [x19]
     284:	cmp	x9, x8
     288:	b.eq	29c <BZ2_bzCompress+0x38>  // b.none
     28c:	mov	w0, #0xfffffffe            	// #-2
     290:	ldr	x19, [sp, #16]
     294:	ldp	x29, x30, [sp], #32
     298:	ret
     29c:	ldr	w9, [x19, #8]
     2a0:	mov	w0, #0xffffffff            	// #-1
     2a4:	b	2b8 <BZ2_bzCompress+0x54>
     2a8:	mov	w9, #0x3                   	// #3
     2ac:	ldr	w10, [x8, #8]
     2b0:	str	w9, [x19, #8]
     2b4:	str	w10, [x19, #16]
     2b8:	cmp	w9, #0x2
     2bc:	b.ne	2d8 <BZ2_bzCompress+0x74>  // b.any
     2c0:	cmp	w1, #0x1
     2c4:	b.eq	2a8 <BZ2_bzCompress+0x44>  // b.none
     2c8:	cmp	w1, #0x2
     2cc:	b.ne	328 <BZ2_bzCompress+0xc4>  // b.any
     2d0:	mov	w9, #0x4                   	// #4
     2d4:	b	2ac <BZ2_bzCompress+0x48>
     2d8:	cmp	w9, #0x1
     2dc:	b.eq	290 <BZ2_bzCompress+0x2c>  // b.none
     2e0:	cmp	w9, #0x3
     2e4:	b.eq	348 <BZ2_bzCompress+0xe4>  // b.none
     2e8:	cmp	w9, #0x4
     2ec:	b.ne	380 <BZ2_bzCompress+0x11c>  // b.any
     2f0:	cmp	w1, #0x2
     2f4:	b.ne	378 <BZ2_bzCompress+0x114>  // b.any
     2f8:	ldr	w9, [x19, #16]
     2fc:	ldr	w10, [x8, #8]
     300:	cmp	w9, w10
     304:	b.ne	378 <BZ2_bzCompress+0x114>  // b.any
     308:	mov	x0, x8
     30c:	bl	3f0 <handle_compress>
     310:	tst	w0, #0xff
     314:	b.eq	378 <BZ2_bzCompress+0x114>  // b.none
     318:	ldr	w8, [x19, #16]
     31c:	cbz	w8, 3bc <BZ2_bzCompress+0x158>
     320:	mov	w0, #0x3                   	// #3
     324:	b	290 <BZ2_bzCompress+0x2c>
     328:	mov	w0, #0xfffffffe            	// #-2
     32c:	cbnz	w1, 290 <BZ2_bzCompress+0x2c>
     330:	mov	x0, x8
     334:	bl	3f0 <handle_compress>
     338:	tst	w0, #0xff
     33c:	mov	w8, #0xfffffffe            	// #-2
     340:	cinv	w0, w8, ne  // ne = any
     344:	b	290 <BZ2_bzCompress+0x2c>
     348:	cmp	w1, #0x1
     34c:	b.ne	378 <BZ2_bzCompress+0x114>  // b.any
     350:	ldr	w9, [x19, #16]
     354:	ldr	w10, [x8, #8]
     358:	cmp	w9, w10
     35c:	b.ne	378 <BZ2_bzCompress+0x114>  // b.any
     360:	mov	x0, x8
     364:	bl	3f0 <handle_compress>
     368:	ldr	w8, [x19, #16]
     36c:	cbz	w8, 388 <BZ2_bzCompress+0x124>
     370:	mov	w0, #0x2                   	// #2
     374:	b	290 <BZ2_bzCompress+0x2c>
     378:	mov	w0, #0xffffffff            	// #-1
     37c:	b	290 <BZ2_bzCompress+0x2c>
     380:	mov	w0, wzr
     384:	b	290 <BZ2_bzCompress+0x2c>
     388:	ldr	w8, [x19, #92]
     38c:	cmp	w8, #0xff
     390:	b.hi	3a0 <BZ2_bzCompress+0x13c>  // b.pmore
     394:	ldr	w8, [x19, #96]
     398:	cmp	w8, #0x0
     39c:	b.gt	370 <BZ2_bzCompress+0x10c>
     3a0:	ldp	w9, w8, [x19, #116]
     3a4:	mov	w0, #0x2                   	// #2
     3a8:	cmp	w8, w9
     3ac:	b.lt	290 <BZ2_bzCompress+0x2c>  // b.tstop
     3b0:	str	w0, [x19, #8]
     3b4:	mov	w0, #0x1                   	// #1
     3b8:	b	290 <BZ2_bzCompress+0x2c>
     3bc:	ldr	w8, [x19, #92]
     3c0:	cmp	w8, #0xff
     3c4:	b.hi	3d4 <BZ2_bzCompress+0x170>  // b.pmore
     3c8:	ldr	w8, [x19, #96]
     3cc:	cmp	w8, #0x0
     3d0:	b.gt	320 <BZ2_bzCompress+0xbc>
     3d4:	ldp	w9, w8, [x19, #116]
     3d8:	cmp	w8, w9
     3dc:	b.lt	320 <BZ2_bzCompress+0xbc>  // b.tstop
     3e0:	mov	w8, #0x1                   	// #1
     3e4:	str	w8, [x19, #8]
     3e8:	mov	w0, #0x4                   	// #4
     3ec:	b	290 <BZ2_bzCompress+0x2c>

00000000000003f0 <handle_compress>:
     3f0:	str	d8, [sp, #-96]!
     3f4:	stp	x29, x30, [sp, #8]
     3f8:	str	x27, [sp, #24]
     3fc:	stp	x26, x25, [sp, #32]
     400:	stp	x24, x23, [sp, #48]
     404:	stp	x22, x21, [sp, #64]
     408:	stp	x20, x19, [sp, #80]
     40c:	mov	x29, sp
     410:	ldr	x19, [x0, #48]
     414:	adrp	x8, 0 <BZ2_bz__AssertH__fail>
     418:	ldr	d8, [x8]
     41c:	adrp	x23, 0 <BZ2_crc32Table>
     420:	mov	w20, wzr
     424:	mov	w21, wzr
     428:	mov	w22, #0x1                   	// #1
     42c:	add	x23, x23, #0x0
     430:	mov	w24, #0xffffffff            	// #-1
     434:	add	x25, x19, #0x80
     438:	mov	w26, #0x2                   	// #2
     43c:	b	44c <handle_compress+0x5c>
     440:	ldr	x8, [x19]
     444:	ldr	w8, [x8, #8]
     448:	cbz	w8, 7d0 <handle_compress+0x3e0>
     44c:	ldr	w8, [x19, #12]
     450:	cmp	w8, #0x2
     454:	b.eq	588 <handle_compress+0x198>  // b.none
     458:	cmp	w8, #0x1
     45c:	b.ne	450 <handle_compress+0x60>  // b.any
     460:	ldr	x9, [x19]
     464:	ldr	w8, [x19, #120]
     468:	ldr	w10, [x9, #32]
     46c:	cbz	w10, 4e0 <handle_compress+0xf0>
     470:	ldr	w10, [x19, #116]
     474:	cmp	w8, w10
     478:	b.ge	4e0 <handle_compress+0xf0>  // b.tcont
     47c:	ldr	x9, [x9, #24]
     480:	ldr	x10, [x19, #80]
     484:	ldrb	w8, [x10, w8, sxtw]
     488:	strb	w8, [x9]
     48c:	ldr	w8, [x19, #120]
     490:	ldr	x10, [x19]
     494:	add	w8, w8, #0x1
     498:	str	w8, [x19, #120]
     49c:	ldp	w9, w13, [x10, #32]
     4a0:	ldr	x12, [x10, #24]
     4a4:	sub	w11, w9, #0x1
     4a8:	add	x9, x12, #0x1
     4ac:	adds	w12, w13, #0x1
     4b0:	stp	w11, w12, [x10, #32]
     4b4:	str	x9, [x10, #24]
     4b8:	b.cc	4c8 <handle_compress+0xd8>  // b.lo, b.ul, b.last
     4bc:	ldr	w12, [x10, #40]
     4c0:	add	w12, w12, #0x1
     4c4:	str	w12, [x10, #40]
     4c8:	cbz	w11, 4d8 <handle_compress+0xe8>
     4cc:	ldr	w10, [x19, #116]
     4d0:	cmp	w8, w10
     4d4:	b.lt	480 <handle_compress+0x90>  // b.tstop
     4d8:	mov	w9, #0x1                   	// #1
     4dc:	b	4e4 <handle_compress+0xf4>
     4e0:	mov	w9, wzr
     4e4:	ldr	w10, [x19, #116]
     4e8:	orr	w20, w9, w20
     4ec:	cmp	w8, w10
     4f0:	b.lt	7d0 <handle_compress+0x3e0>  // b.tstop
     4f4:	ldr	w10, [x19, #8]
     4f8:	cmp	w10, #0x4
     4fc:	b.ne	520 <handle_compress+0x130>  // b.any
     500:	ldr	w8, [x19, #16]
     504:	cbnz	w8, 520 <handle_compress+0x130>
     508:	ldr	w8, [x19, #92]
     50c:	cmp	w8, #0xff
     510:	b.hi	7d0 <handle_compress+0x3e0>  // b.pmore
     514:	ldr	w8, [x19, #96]
     518:	cmp	w8, #0x1
     51c:	b.lt	7d0 <handle_compress+0x3e0>  // b.tstop
     520:	movi	v0.2d, #0x0
     524:	str	wzr, [x19, #108]
     528:	stp	wzr, wzr, [x19, #116]
     52c:	str	w24, [x19, #648]
     530:	stp	q0, q0, [x25, #224]
     534:	stp	q0, q0, [x25, #192]
     538:	stp	q0, q0, [x25, #160]
     53c:	stp	q0, q0, [x25, #128]
     540:	stp	q0, q0, [x25, #96]
     544:	stp	q0, q0, [x25, #64]
     548:	stp	q0, q0, [x25, #32]
     54c:	stp	q0, q0, [x25]
     550:	ldr	w8, [x19, #660]
     554:	cmp	w10, #0x3
     558:	str	w26, [x19, #12]
     55c:	add	w8, w8, #0x1
     560:	str	w8, [x19, #660]
     564:	b.ne	58c <handle_compress+0x19c>  // b.any
     568:	ldr	w8, [x19, #16]
     56c:	cbnz	w8, 588 <handle_compress+0x198>
     570:	ldr	w8, [x19, #92]
     574:	cmp	w8, #0xff
     578:	b.hi	7d0 <handle_compress+0x3e0>  // b.pmore
     57c:	ldr	w8, [x19, #96]
     580:	cmp	w8, #0x0
     584:	b.le	7d0 <handle_compress+0x3e0>
     588:	ldr	w10, [x19, #8]
     58c:	ldp	w8, w9, [x19, #108]
     590:	cmp	w10, #0x2
     594:	b.ne	67c <handle_compress+0x28c>  // b.any
     598:	cmp	w8, w9
     59c:	b.ge	770 <handle_compress+0x380>  // b.tcont
     5a0:	ldr	x10, [x19]
     5a4:	ldr	w11, [x10, #8]
     5a8:	cbz	w11, 770 <handle_compress+0x380>
     5ac:	ldr	x12, [x10]
     5b0:	ldr	w11, [x19, #92]
     5b4:	ldrb	w27, [x12]
     5b8:	ldr	w9, [x19, #96]
     5bc:	cmp	w11, w27
     5c0:	b.ne	5d8 <handle_compress+0x1e8>  // b.any
     5c4:	cmp	w9, #0xff
     5c8:	b.eq	61c <handle_compress+0x22c>  // b.none
     5cc:	add	w8, w9, #0x1
     5d0:	str	w8, [x19, #96]
     5d4:	b	630 <handle_compress+0x240>
     5d8:	cmp	w9, #0x1
     5dc:	b.ne	61c <handle_compress+0x22c>  // b.any
     5e0:	ldr	w9, [x19, #648]
     5e4:	and	w10, w11, #0xff
     5e8:	add	x12, x19, w11, uxtw
     5ec:	eor	w10, w10, w9, lsr #24
     5f0:	ldr	w10, [x23, w10, uxtw #2]
     5f4:	eor	w9, w10, w9, lsl #8
     5f8:	str	w9, [x19, #648]
     5fc:	strb	w22, [x12, #128]
     600:	ldr	x9, [x19, #64]
     604:	strb	w11, [x9, w8, sxtw]
     608:	ldr	w8, [x19, #108]
     60c:	str	w27, [x19, #92]
     610:	add	w8, w8, #0x1
     614:	str	w8, [x19, #108]
     618:	b	630 <handle_compress+0x240>
     61c:	cmp	w11, #0xff
     620:	b.hi	62c <handle_compress+0x23c>  // b.pmore
     624:	mov	x0, x19
     628:	bl	2c9c <add_pair_to_block>
     62c:	stp	w27, w22, [x19, #92]
     630:	ldr	x8, [x19]
     634:	ldr	x9, [x8]
     638:	ldp	w10, w11, [x8, #8]
     63c:	add	x12, x9, #0x1
     640:	sub	w13, w10, #0x1
     644:	adds	w9, w11, #0x1
     648:	str	x12, [x8]
     64c:	stp	w13, w9, [x8, #8]
     650:	b.cc	660 <handle_compress+0x270>  // b.lo, b.ul, b.last
     654:	ldr	w9, [x8, #16]
     658:	add	w9, w9, #0x1
     65c:	str	w9, [x8, #16]
     660:	ldp	w8, w9, [x19, #108]
     664:	mov	w10, #0x1                   	// #1
     668:	cmp	w8, w9
     66c:	b.ge	774 <handle_compress+0x384>  // b.tcont
     670:	mov	w11, w27
     674:	cbnz	w13, 5b4 <handle_compress+0x1c4>
     678:	b	774 <handle_compress+0x384>
     67c:	cmp	w8, w9
     680:	b.ge	770 <handle_compress+0x380>  // b.tcont
     684:	ldr	x11, [x19]
     688:	ldr	w10, [x11, #8]
     68c:	cbz	w10, 774 <handle_compress+0x384>
     690:	ldr	w10, [x19, #16]
     694:	cbz	w10, 774 <handle_compress+0x384>
     698:	ldr	x9, [x11]
     69c:	ldrb	w27, [x9]
     6a0:	ldp	w9, w10, [x19, #92]
     6a4:	cmp	w9, w27
     6a8:	b.ne	6c0 <handle_compress+0x2d0>  // b.any
     6ac:	cmp	w10, #0xff
     6b0:	b.eq	704 <handle_compress+0x314>  // b.none
     6b4:	add	w8, w10, #0x1
     6b8:	str	w8, [x19, #96]
     6bc:	b	718 <handle_compress+0x328>
     6c0:	cmp	w10, #0x1
     6c4:	b.ne	704 <handle_compress+0x314>  // b.any
     6c8:	ldr	w10, [x19, #648]
     6cc:	and	w11, w9, #0xff
     6d0:	add	x12, x19, x9
     6d4:	eor	w11, w11, w10, lsr #24
     6d8:	ldr	w11, [x23, w11, uxtw #2]
     6dc:	eor	w10, w11, w10, lsl #8
     6e0:	str	w10, [x19, #648]
     6e4:	strb	w22, [x12, #128]
     6e8:	ldr	x10, [x19, #64]
     6ec:	strb	w9, [x10, w8, sxtw]
     6f0:	ldr	w8, [x19, #108]
     6f4:	str	w27, [x19, #92]
     6f8:	add	w8, w8, #0x1
     6fc:	str	w8, [x19, #108]
     700:	b	718 <handle_compress+0x328>
     704:	cmp	w9, #0xff
     708:	b.hi	714 <handle_compress+0x324>  // b.pmore
     70c:	mov	x0, x19
     710:	bl	2c9c <add_pair_to_block>
     714:	stp	w27, w22, [x19, #92]
     718:	ldr	x11, [x19]
     71c:	ldr	x8, [x11]
     720:	ldp	w9, w10, [x11, #8]
     724:	add	x8, x8, #0x1
     728:	sub	w12, w9, #0x1
     72c:	adds	w9, w10, #0x1
     730:	str	x8, [x11]
     734:	stp	w12, w9, [x11, #8]
     738:	b.cc	748 <handle_compress+0x358>  // b.lo, b.ul, b.last
     73c:	ldr	w8, [x11, #16]
     740:	add	w8, w8, #0x1
     744:	str	w8, [x11, #16]
     748:	ldr	w10, [x19, #16]
     74c:	ldp	w8, w9, [x19, #108]
     750:	sub	w13, w10, #0x1
     754:	cmp	w8, w9
     758:	mov	w10, #0x1                   	// #1
     75c:	str	w13, [x19, #16]
     760:	b.ge	774 <handle_compress+0x384>  // b.tcont
     764:	cbz	w12, 774 <handle_compress+0x384>
     768:	cbnz	w13, 698 <handle_compress+0x2a8>
     76c:	b	774 <handle_compress+0x384>
     770:	mov	w10, wzr
     774:	ldr	w11, [x19, #8]
     778:	orr	w21, w10, w21
     77c:	cmp	w11, #0x2
     780:	b.eq	78c <handle_compress+0x39c>  // b.none
     784:	ldr	w10, [x19, #16]
     788:	cbz	w10, 79c <handle_compress+0x3ac>
     78c:	cmp	w8, w9
     790:	b.lt	440 <handle_compress+0x50>  // b.tstop
     794:	mov	w1, wzr
     798:	b	7c0 <handle_compress+0x3d0>
     79c:	ldr	w8, [x19, #92]
     7a0:	cmp	w8, #0xff
     7a4:	b.hi	7b4 <handle_compress+0x3c4>  // b.pmore
     7a8:	mov	x0, x19
     7ac:	bl	2c9c <add_pair_to_block>
     7b0:	ldr	w11, [x19, #8]
     7b4:	cmp	w11, #0x4
     7b8:	cset	w1, eq  // eq = none
     7bc:	stur	d8, [x19, #92]
     7c0:	mov	x0, x19
     7c4:	bl	0 <BZ2_compressBlock>
     7c8:	str	w22, [x19, #12]
     7cc:	b	44c <handle_compress+0x5c>
     7d0:	orr	w8, w21, w20
     7d4:	ldp	x20, x19, [sp, #80]
     7d8:	ldp	x22, x21, [sp, #64]
     7dc:	ldp	x24, x23, [sp, #48]
     7e0:	ldp	x26, x25, [sp, #32]
     7e4:	ldr	x27, [sp, #24]
     7e8:	ldp	x29, x30, [sp, #8]
     7ec:	tst	w8, #0xff
     7f0:	cset	w0, ne  // ne = any
     7f4:	ldr	d8, [sp], #96
     7f8:	ret

00000000000007fc <BZ2_bzCompressEnd>:
     7fc:	stp	x29, x30, [sp, #-32]!
     800:	stp	x20, x19, [sp, #16]
     804:	mov	x29, sp
     808:	cbz	x0, 824 <BZ2_bzCompressEnd+0x28>
     80c:	ldr	x20, [x0, #48]
     810:	mov	x19, x0
     814:	cbz	x20, 824 <BZ2_bzCompressEnd+0x28>
     818:	ldr	x8, [x20]
     81c:	cmp	x8, x19
     820:	b.eq	834 <BZ2_bzCompressEnd+0x38>  // b.none
     824:	mov	w0, #0xfffffffe            	// #-2
     828:	ldp	x20, x19, [sp, #16]
     82c:	ldp	x29, x30, [sp], #32
     830:	ret
     834:	ldr	x1, [x20, #24]
     838:	cbz	x1, 844 <BZ2_bzCompressEnd+0x48>
     83c:	ldp	x8, x0, [x19, #64]
     840:	blr	x8
     844:	ldr	x1, [x20, #32]
     848:	cbz	x1, 854 <BZ2_bzCompressEnd+0x58>
     84c:	ldp	x8, x0, [x19, #64]
     850:	blr	x8
     854:	ldr	x1, [x20, #40]
     858:	cbz	x1, 864 <BZ2_bzCompressEnd+0x68>
     85c:	ldp	x8, x0, [x19, #64]
     860:	blr	x8
     864:	ldp	x8, x0, [x19, #64]
     868:	ldr	x1, [x19, #48]
     86c:	blr	x8
     870:	mov	w0, wzr
     874:	str	xzr, [x19, #48]
     878:	b	828 <BZ2_bzCompressEnd+0x2c>

000000000000087c <BZ2_bzDecompressInit>:
     87c:	stp	x29, x30, [sp, #-48]!
     880:	str	x21, [sp, #16]
     884:	stp	x20, x19, [sp, #32]
     888:	mov	x29, sp
     88c:	mov	x21, x0
     890:	cmp	w1, #0x4
     894:	mov	w0, #0xfffffffe            	// #-2
     898:	b.hi	940 <BZ2_bzDecompressInit+0xc4>  // b.pmore
     89c:	cbz	x21, 940 <BZ2_bzDecompressInit+0xc4>
     8a0:	mov	w20, w2
     8a4:	cmp	w2, #0x1
     8a8:	b.hi	940 <BZ2_bzDecompressInit+0xc4>  // b.pmore
     8ac:	ldr	x8, [x21, #56]
     8b0:	mov	w19, w1
     8b4:	cbz	x8, 918 <BZ2_bzDecompressInit+0x9c>
     8b8:	ldr	x9, [x21, #64]
     8bc:	cbz	x9, 92c <BZ2_bzDecompressInit+0xb0>
     8c0:	ldr	x0, [x21, #72]
     8c4:	mov	w1, #0xfa90                	// #64144
     8c8:	mov	w2, #0x1                   	// #1
     8cc:	blr	x8
     8d0:	cbz	x0, 93c <BZ2_bzDecompressInit+0xc0>
     8d4:	mov	x8, x0
     8d8:	mov	w0, wzr
     8dc:	mov	w9, #0xa                   	// #10
     8e0:	movi	v0.2d, #0x0
     8e4:	str	x21, [x8]
     8e8:	str	x8, [x21, #48]
     8ec:	str	w9, [x8, #8]
     8f0:	str	wzr, [x8, #3188]
     8f4:	str	d0, [x8, #32]
     8f8:	stur	d0, [x21, #12]
     8fc:	stur	d0, [x21, #36]
     900:	strb	w20, [x8, #44]
     904:	str	xzr, [x8, #3152]
     908:	str	xzr, [x8, #3168]
     90c:	str	xzr, [x8, #3160]
     910:	stp	wzr, w19, [x8, #48]
     914:	b	940 <BZ2_bzDecompressInit+0xc4>
     918:	adrp	x8, 0 <BZ2_bz__AssertH__fail>
     91c:	add	x8, x8, #0x0
     920:	str	x8, [x21, #56]
     924:	ldr	x9, [x21, #64]
     928:	cbnz	x9, 8c0 <BZ2_bzDecompressInit+0x44>
     92c:	adrp	x9, 0 <BZ2_bz__AssertH__fail>
     930:	add	x9, x9, #0x0
     934:	str	x9, [x21, #64]
     938:	b	8c0 <BZ2_bzDecompressInit+0x44>
     93c:	mov	w0, #0xfffffffd            	// #-3
     940:	ldp	x20, x19, [sp, #32]
     944:	ldr	x21, [sp, #16]
     948:	ldp	x29, x30, [sp], #48
     94c:	ret

0000000000000950 <BZ2_indexIntoF>:
     950:	mov	w8, w0
     954:	mov	w0, wzr
     958:	mov	w9, #0x100                 	// #256
     95c:	add	w10, w0, w9
     960:	asr	w10, w10, #1
     964:	ldr	w11, [x1, w10, sxtw #2]
     968:	cmp	w11, w8
     96c:	csel	w9, w10, w9, gt
     970:	csel	w0, w0, w10, gt
     974:	sub	w10, w9, w0
     978:	cmp	w10, #0x1
     97c:	b.ne	95c <BZ2_indexIntoF+0xc>  // b.any
     980:	ret

0000000000000984 <BZ2_bzDecompress>:
     984:	stp	x29, x30, [sp, #-96]!
     988:	stp	x28, x27, [sp, #16]
     98c:	stp	x26, x25, [sp, #32]
     990:	stp	x24, x23, [sp, #48]
     994:	stp	x22, x21, [sp, #64]
     998:	stp	x20, x19, [sp, #80]
     99c:	mov	x29, sp
     9a0:	cbz	x0, 9b8 <BZ2_bzDecompress+0x34>
     9a4:	ldr	x19, [x0, #48]
     9a8:	cbz	x19, 9b8 <BZ2_bzDecompress+0x34>
     9ac:	ldr	x8, [x19]
     9b0:	cmp	x8, x0
     9b4:	b.eq	9d8 <BZ2_bzDecompress+0x54>  // b.none
     9b8:	mov	w0, #0xfffffffe            	// #-2
     9bc:	ldp	x20, x19, [sp, #80]
     9c0:	ldp	x22, x21, [sp, #64]
     9c4:	ldp	x24, x23, [sp, #48]
     9c8:	ldp	x26, x25, [sp, #32]
     9cc:	ldp	x28, x27, [sp, #16]
     9d0:	ldp	x29, x30, [sp], #96
     9d4:	ret
     9d8:	ldr	w8, [x19, #8]
     9dc:	mov	w9, #0xfa50                	// #64080
     9e0:	mov	w22, #0x86a0                	// #34464
     9e4:	adrp	x23, 0 <BZ2_crc32Table>
     9e8:	adrp	x25, 0 <BZ2_rNums>
     9ec:	movk	w22, #0x1, lsl #16
     9f0:	add	x23, x23, #0x0
     9f4:	mov	w24, #0x1                   	// #1
     9f8:	add	x25, x25, #0x0
     9fc:	mov	w26, #0x2                   	// #2
     a00:	mov	w27, #0x3                   	// #3
     a04:	add	x28, x19, x9
     a08:	adrp	x21, 0 <stderr>
     a0c:	mov	w20, #0xe                   	// #14
     a10:	cmp	w8, #0x1
     a14:	b.eq	1738 <BZ2_bzDecompress+0xdb4>  // b.none
     a18:	cmp	w8, #0x2
     a1c:	b.eq	a2c <BZ2_bzDecompress+0xa8>  // b.none
     a20:	cmp	w8, #0xa
     a24:	b.lt	a10 <BZ2_bzDecompress+0x8c>  // b.tstop
     a28:	b	16cc <BZ2_bzDecompress+0xd48>
     a2c:	ldrb	w8, [x19, #44]
     a30:	ldrb	w9, [x19, #20]
     a34:	cbz	w8, e74 <BZ2_bzDecompress+0x4f0>
     a38:	ldr	x8, [x19]
     a3c:	ldr	w10, [x8, #32]
     a40:	cbz	w9, 113c <BZ2_bzDecompress+0x7b8>
     a44:	cbz	w10, 1670 <BZ2_bzDecompress+0xcec>
     a48:	ldr	w13, [x19, #16]
     a4c:	b	a60 <BZ2_bzDecompress+0xdc>
     a50:	str	w16, [x19, #64]
     a54:	mov	w13, #0x1                   	// #1
     a58:	ldr	w9, [x8, #32]
     a5c:	cbz	w9, 1670 <BZ2_bzDecompress+0xcec>
     a60:	cbnz	w13, cac <BZ2_bzDecompress+0x328>
     a64:	ldr	w13, [x28]
     a68:	ldr	w9, [x19, #1092]
     a6c:	add	w10, w13, #0x1
     a70:	cmp	w9, w10
     a74:	b.eq	1670 <BZ2_bzDecompress+0xcec>  // b.none
     a78:	b.gt	1740 <BZ2_bzDecompress+0xdbc>
     a7c:	ldr	w10, [x19, #40]
     a80:	ldp	w15, w14, [x19, #60]
     a84:	str	w24, [x19, #16]
     a88:	mul	w12, w10, w22
     a8c:	cmp	w15, w12
     a90:	strb	w14, [x19, #12]
     a94:	b.cs	1740 <BZ2_bzDecompress+0xdbc>  // b.hs, b.nlast
     a98:	mov	w16, wzr
     a9c:	mov	w10, #0x100                 	// #256
     aa0:	add	w11, w16, w10
     aa4:	asr	w11, w11, #1
     aa8:	add	x17, x19, w11, sxtw #2
     aac:	ldr	w17, [x17, #1096]
     ab0:	cmp	w17, w15
     ab4:	csel	w10, w11, w10, gt
     ab8:	csel	w16, w16, w11, gt
     abc:	sub	w11, w10, w16
     ac0:	cmp	w11, #0x1
     ac4:	b.ne	aa0 <BZ2_bzDecompress+0x11c>  // b.any
     ac8:	ldr	x11, [x19, #3168]
     acc:	ldr	x10, [x19, #3160]
     ad0:	lsr	x17, x15, #1
     ad4:	ldrb	w18, [x11, x17]
     ad8:	lsl	w17, w15, #2
     adc:	and	x0, x17, #0x4
     ae0:	ldrh	w17, [x10, x15, lsl #1]
     ae4:	lsr	x18, x18, x0
     ae8:	ldr	w15, [x19, #24]
     aec:	lsl	w18, w18, #16
     af0:	and	x18, x18, #0xf0000
     af4:	orr	x1, x18, x17
     af8:	str	w1, [x19, #60]
     afc:	cbnz	w15, b18 <BZ2_bzDecompress+0x194>
     b00:	ldrsw	x18, [x19, #28]
     b04:	ldr	w15, [x25, x18, lsl #2]
     b08:	add	w0, w18, #0x1
     b0c:	cmp	w0, #0x200
     b10:	csinc	w18, wzr, w18, eq  // eq = none
     b14:	stp	w15, w18, [x19, #24]
     b18:	sub	w18, w15, #0x1
     b1c:	add	w15, w9, #0x1
     b20:	cmp	w9, w13
     b24:	str	w18, [x19, #24]
     b28:	str	w15, [x19, #1092]
     b2c:	b.eq	a54 <BZ2_bzDecompress+0xd0>  // b.none
     b30:	cmp	w18, #0x1
     b34:	cset	w0, eq  // eq = none
     b38:	and	w16, w16, #0xff
     b3c:	eor	w16, w16, w0
     b40:	cmp	w16, w14
     b44:	b.ne	a50 <BZ2_bzDecompress+0xcc>  // b.any
     b48:	cmp	w1, w12
     b4c:	str	w26, [x19, #16]
     b50:	b.cs	1740 <BZ2_bzDecompress+0xdbc>  // b.hs, b.nlast
     b54:	mov	w0, wzr
     b58:	mov	w16, #0x100                 	// #256
     b5c:	add	w2, w0, w16
     b60:	asr	w2, w2, #1
     b64:	add	x3, x19, w2, sxtw #2
     b68:	ldr	w3, [x3, #1096]
     b6c:	cmp	w3, w1
     b70:	csel	w16, w2, w16, gt
     b74:	csel	w0, w0, w2, gt
     b78:	sub	w2, w16, w0
     b7c:	cmp	w2, #0x1
     b80:	b.ne	b5c <BZ2_bzDecompress+0x1d8>  // b.any
     b84:	lsr	x16, x1, #1
     b88:	ldrb	w2, [x11, x16]
     b8c:	lsl	w17, w17, #2
     b90:	ldrh	w16, [x10, x1, lsl #1]
     b94:	and	x17, x17, #0x4
     b98:	lsr	x17, x2, x17
     b9c:	lsl	w17, w17, #16
     ba0:	and	x17, x17, #0xf0000
     ba4:	orr	x1, x17, x16
     ba8:	str	w1, [x19, #60]
     bac:	cbnz	w18, bc8 <BZ2_bzDecompress+0x244>
     bb0:	ldrsw	x17, [x19, #28]
     bb4:	ldr	w18, [x25, x17, lsl #2]
     bb8:	add	w2, w17, #0x1
     bbc:	cmp	w2, #0x200
     bc0:	csinc	w17, wzr, w17, eq  // eq = none
     bc4:	stp	w18, w17, [x19, #24]
     bc8:	sub	w18, w18, #0x1
     bcc:	add	w17, w9, #0x2
     bd0:	cmp	w15, w13
     bd4:	str	w18, [x19, #24]
     bd8:	str	w17, [x19, #1092]
     bdc:	b.ne	be8 <BZ2_bzDecompress+0x264>  // b.any
     be0:	mov	w13, #0x2                   	// #2
     be4:	b	a58 <BZ2_bzDecompress+0xd4>
     be8:	cmp	w18, #0x1
     bec:	cset	w15, eq  // eq = none
     bf0:	and	w0, w0, #0xff
     bf4:	eor	w15, w0, w15
     bf8:	cmp	w15, w14
     bfc:	b.ne	ca0 <BZ2_bzDecompress+0x31c>  // b.any
     c00:	cmp	w1, w12
     c04:	str	w27, [x19, #16]
     c08:	b.cs	1740 <BZ2_bzDecompress+0xdbc>  // b.hs, b.nlast
     c0c:	mov	w0, wzr
     c10:	mov	w15, #0x100                 	// #256
     c14:	add	w2, w0, w15
     c18:	asr	w2, w2, #1
     c1c:	add	x3, x19, w2, sxtw #2
     c20:	ldr	w3, [x3, #1096]
     c24:	cmp	w3, w1
     c28:	csel	w15, w2, w15, gt
     c2c:	csel	w0, w0, w2, gt
     c30:	sub	w2, w15, w0
     c34:	cmp	w2, #0x1
     c38:	b.ne	c14 <BZ2_bzDecompress+0x290>  // b.any
     c3c:	lsr	x15, x1, #1
     c40:	ldrb	w2, [x11, x15]
     c44:	lsl	w16, w16, #2
     c48:	ldrh	w15, [x10, x1, lsl #1]
     c4c:	and	x16, x16, #0x4
     c50:	lsr	x16, x2, x16
     c54:	lsl	w16, w16, #16
     c58:	and	x16, x16, #0xf0000
     c5c:	orr	x1, x16, x15
     c60:	str	w1, [x19, #60]
     c64:	cbnz	w18, c80 <BZ2_bzDecompress+0x2fc>
     c68:	ldrsw	x16, [x19, #28]
     c6c:	ldr	w18, [x25, x16, lsl #2]
     c70:	add	w2, w16, #0x1
     c74:	cmp	w2, #0x200
     c78:	csinc	w16, wzr, w16, eq  // eq = none
     c7c:	stp	w18, w16, [x19, #24]
     c80:	sub	w16, w18, #0x1
     c84:	add	w18, w9, #0x3
     c88:	cmp	w17, w13
     c8c:	str	w16, [x19, #24]
     c90:	str	w18, [x19, #1092]
     c94:	b.ne	d14 <BZ2_bzDecompress+0x390>  // b.any
     c98:	mov	w13, #0x3                   	// #3
     c9c:	b	a58 <BZ2_bzDecompress+0xd4>
     ca0:	str	w15, [x19, #64]
     ca4:	mov	w13, #0x2                   	// #2
     ca8:	b	a58 <BZ2_bzDecompress+0xd4>
     cac:	ldrb	w9, [x19, #12]
     cb0:	ldr	x8, [x8, #24]
     cb4:	strb	w9, [x8]
     cb8:	ldr	w9, [x19, #3184]
     cbc:	ldrb	w8, [x19, #12]
     cc0:	ldr	w10, [x19, #16]
     cc4:	eor	w8, w8, w9, lsr #24
     cc8:	ldr	w11, [x23, w8, uxtw #2]
     ccc:	ldr	x8, [x19]
     cd0:	sub	w13, w10, #0x1
     cd4:	str	w13, [x19, #16]
     cd8:	eor	w9, w11, w9, lsl #8
     cdc:	str	w9, [x19, #3184]
     ce0:	ldr	x9, [x8, #24]
     ce4:	ldp	w10, w11, [x8, #32]
     ce8:	add	x9, x9, #0x1
     cec:	str	x9, [x8, #24]
     cf0:	sub	w9, w10, #0x1
     cf4:	adds	w10, w11, #0x1
     cf8:	stp	w9, w10, [x8, #32]
     cfc:	b.cc	d0c <BZ2_bzDecompress+0x388>  // b.lo, b.ul, b.last
     d00:	ldr	w10, [x8, #40]
     d04:	add	w10, w10, #0x1
     d08:	str	w10, [x8, #40]
     d0c:	cbnz	w9, a60 <BZ2_bzDecompress+0xdc>
     d10:	b	1670 <BZ2_bzDecompress+0xcec>
     d14:	cmp	w16, #0x1
     d18:	cset	w13, eq  // eq = none
     d1c:	and	w17, w0, #0xff
     d20:	eor	w13, w17, w13
     d24:	cmp	w13, w14
     d28:	b.ne	e68 <BZ2_bzDecompress+0x4e4>  // b.any
     d2c:	cmp	w1, w12
     d30:	b.cs	1740 <BZ2_bzDecompress+0xdbc>  // b.hs, b.nlast
     d34:	mov	w13, wzr
     d38:	mov	w14, #0x100                 	// #256
     d3c:	add	w17, w13, w14
     d40:	asr	w17, w17, #1
     d44:	add	x18, x19, w17, sxtw #2
     d48:	ldr	w18, [x18, #1096]
     d4c:	cmp	w18, w1
     d50:	csel	w14, w17, w14, gt
     d54:	csel	w13, w13, w17, gt
     d58:	sub	w17, w14, w13
     d5c:	cmp	w17, #0x1
     d60:	b.ne	d3c <BZ2_bzDecompress+0x3b8>  // b.any
     d64:	lsr	x14, x1, #1
     d68:	ldrb	w17, [x11, x14]
     d6c:	lsl	w15, w15, #2
     d70:	ldrh	w14, [x10, x1, lsl #1]
     d74:	and	x15, x15, #0x4
     d78:	lsr	x15, x17, x15
     d7c:	lsl	w15, w15, #16
     d80:	and	x15, x15, #0xf0000
     d84:	orr	x15, x15, x14
     d88:	str	w15, [x19, #60]
     d8c:	cbnz	w16, da8 <BZ2_bzDecompress+0x424>
     d90:	ldrsw	x17, [x19, #28]
     d94:	ldr	w16, [x25, x17, lsl #2]
     d98:	add	w18, w17, #0x1
     d9c:	cmp	w18, #0x200
     da0:	csinc	w17, wzr, w17, eq  // eq = none
     da4:	stp	w16, w17, [x19, #24]
     da8:	sub	w16, w16, #0x1
     dac:	add	w17, w9, #0x4
     db0:	cmp	w16, #0x1
     db4:	and	w13, w13, #0xff
     db8:	str	w17, [x19, #1092]
     dbc:	cset	w17, eq  // eq = none
     dc0:	eor	w13, w13, w17
     dc4:	add	w13, w13, #0x4
     dc8:	cmp	w15, w12
     dcc:	str	w16, [x19, #24]
     dd0:	str	w13, [x19, #16]
     dd4:	b.cs	1740 <BZ2_bzDecompress+0xdbc>  // b.hs, b.nlast
     dd8:	mov	w12, wzr
     ddc:	mov	w17, #0x100                 	// #256
     de0:	add	w18, w12, w17
     de4:	asr	w18, w18, #1
     de8:	add	x0, x19, w18, sxtw #2
     dec:	ldr	w0, [x0, #1096]
     df0:	cmp	w0, w15
     df4:	csel	w17, w18, w17, gt
     df8:	csel	w12, w12, w18, gt
     dfc:	sub	w18, w17, w12
     e00:	cmp	w18, #0x1
     e04:	b.ne	de0 <BZ2_bzDecompress+0x45c>  // b.any
     e08:	str	w12, [x19, #64]
     e0c:	lsr	x17, x15, #1
     e10:	ldrb	w11, [x11, x17]
     e14:	ldrh	w10, [x10, x15, lsl #1]
     e18:	ubfiz	w14, w14, #2, #1
     e1c:	lsr	w11, w11, w14
     e20:	bfi	w10, w11, #16, #4
     e24:	str	w10, [x19, #60]
     e28:	cbnz	w16, e44 <BZ2_bzDecompress+0x4c0>
     e2c:	ldrsw	x10, [x19, #28]
     e30:	ldr	w16, [x25, x10, lsl #2]
     e34:	add	w11, w10, #0x1
     e38:	cmp	w11, #0x200
     e3c:	csinc	w10, wzr, w10, eq  // eq = none
     e40:	stp	w16, w10, [x19, #24]
     e44:	sub	w10, w16, #0x1
     e48:	cmp	w10, #0x1
     e4c:	str	w10, [x19, #24]
     e50:	cset	w10, eq  // eq = none
     e54:	add	w9, w9, #0x5
     e58:	eor	w10, w12, w10
     e5c:	str	w10, [x19, #64]
     e60:	str	w9, [x19, #1092]
     e64:	b	a58 <BZ2_bzDecompress+0xd4>
     e68:	str	w13, [x19, #64]
     e6c:	mov	w13, #0x3                   	// #3
     e70:	b	a58 <BZ2_bzDecompress+0xd4>
     e74:	cbz	w9, 1474 <BZ2_bzDecompress+0xaf0>
     e78:	ldr	x8, [x19]
     e7c:	ldr	w9, [x8, #32]
     e80:	cbz	w9, 1670 <BZ2_bzDecompress+0xcec>
     e84:	ldr	w12, [x19, #16]
     e88:	b	e9c <BZ2_bzDecompress+0x518>
     e8c:	str	w17, [x19, #64]
     e90:	mov	w12, #0x1                   	// #1
     e94:	ldr	w9, [x8, #32]
     e98:	cbz	w9, 1670 <BZ2_bzDecompress+0xcec>
     e9c:	cbnz	w12, 1000 <BZ2_bzDecompress+0x67c>
     ea0:	ldr	w12, [x28]
     ea4:	ldr	w9, [x19, #1092]
     ea8:	add	w10, w12, #0x1
     eac:	cmp	w9, w10
     eb0:	b.eq	1670 <BZ2_bzDecompress+0xcec>  // b.none
     eb4:	b.gt	1740 <BZ2_bzDecompress+0xdbc>
     eb8:	ldr	w10, [x19, #40]
     ebc:	ldp	w14, w13, [x19, #60]
     ec0:	str	w24, [x19, #16]
     ec4:	mul	w11, w10, w22
     ec8:	cmp	w14, w11
     ecc:	strb	w13, [x19, #12]
     ed0:	b.cs	1740 <BZ2_bzDecompress+0xdbc>  // b.hs, b.nlast
     ed4:	ldr	x10, [x19, #3152]
     ed8:	ldr	w17, [x10, x14, lsl #2]
     edc:	ldr	w14, [x19, #24]
     ee0:	lsr	x16, x17, #8
     ee4:	str	w16, [x19, #60]
     ee8:	cbnz	w14, f04 <BZ2_bzDecompress+0x580>
     eec:	ldrsw	x15, [x19, #28]
     ef0:	ldr	w14, [x25, x15, lsl #2]
     ef4:	add	w18, w15, #0x1
     ef8:	cmp	w18, #0x200
     efc:	csinc	w15, wzr, w15, eq  // eq = none
     f00:	stp	w14, w15, [x19, #24]
     f04:	sub	w15, w14, #0x1
     f08:	add	w14, w9, #0x1
     f0c:	cmp	w9, w12
     f10:	str	w15, [x19, #24]
     f14:	str	w14, [x19, #1092]
     f18:	b.eq	e90 <BZ2_bzDecompress+0x50c>  // b.none
     f1c:	cmp	w15, #0x1
     f20:	cset	w18, eq  // eq = none
     f24:	and	w17, w17, #0xff
     f28:	eor	w17, w17, w18
     f2c:	cmp	w17, w13
     f30:	b.ne	e8c <BZ2_bzDecompress+0x508>  // b.any
     f34:	cmp	w16, w11
     f38:	str	w26, [x19, #16]
     f3c:	b.cs	1740 <BZ2_bzDecompress+0xdbc>  // b.hs, b.nlast
     f40:	ldr	w18, [x10, x16, lsl #2]
     f44:	lsr	x16, x18, #8
     f48:	str	w16, [x19, #60]
     f4c:	cbnz	w15, f68 <BZ2_bzDecompress+0x5e4>
     f50:	ldrsw	x17, [x19, #28]
     f54:	ldr	w15, [x25, x17, lsl #2]
     f58:	add	w0, w17, #0x1
     f5c:	cmp	w0, #0x200
     f60:	csinc	w17, wzr, w17, eq  // eq = none
     f64:	stp	w15, w17, [x19, #24]
     f68:	sub	w17, w15, #0x1
     f6c:	add	w15, w9, #0x2
     f70:	cmp	w14, w12
     f74:	str	w17, [x19, #24]
     f78:	str	w15, [x19, #1092]
     f7c:	b.ne	f88 <BZ2_bzDecompress+0x604>  // b.any
     f80:	mov	w12, #0x2                   	// #2
     f84:	b	e94 <BZ2_bzDecompress+0x510>
     f88:	cmp	w17, #0x1
     f8c:	cset	w14, eq  // eq = none
     f90:	and	w18, w18, #0xff
     f94:	eor	w14, w18, w14
     f98:	cmp	w14, w13
     f9c:	b.ne	ff4 <BZ2_bzDecompress+0x670>  // b.any
     fa0:	cmp	w16, w11
     fa4:	str	w27, [x19, #16]
     fa8:	b.cs	1740 <BZ2_bzDecompress+0xdbc>  // b.hs, b.nlast
     fac:	ldr	w18, [x10, x16, lsl #2]
     fb0:	lsr	x14, x18, #8
     fb4:	str	w14, [x19, #60]
     fb8:	cbnz	w17, fd4 <BZ2_bzDecompress+0x650>
     fbc:	ldrsw	x16, [x19, #28]
     fc0:	ldr	w17, [x25, x16, lsl #2]
     fc4:	add	w0, w16, #0x1
     fc8:	cmp	w0, #0x200
     fcc:	csinc	w16, wzr, w16, eq  // eq = none
     fd0:	stp	w17, w16, [x19, #24]
     fd4:	sub	w16, w17, #0x1
     fd8:	add	w17, w9, #0x3
     fdc:	cmp	w15, w12
     fe0:	str	w16, [x19, #24]
     fe4:	str	w17, [x19, #1092]
     fe8:	b.ne	1068 <BZ2_bzDecompress+0x6e4>  // b.any
     fec:	mov	w12, #0x3                   	// #3
     ff0:	b	e94 <BZ2_bzDecompress+0x510>
     ff4:	str	w14, [x19, #64]
     ff8:	mov	w12, #0x2                   	// #2
     ffc:	b	e94 <BZ2_bzDecompress+0x510>
    1000:	ldrb	w9, [x19, #12]
    1004:	ldr	x8, [x8, #24]
    1008:	strb	w9, [x8]
    100c:	ldr	w9, [x19, #3184]
    1010:	ldrb	w8, [x19, #12]
    1014:	ldr	w10, [x19, #16]
    1018:	eor	w8, w8, w9, lsr #24
    101c:	ldr	w11, [x23, w8, uxtw #2]
    1020:	ldr	x8, [x19]
    1024:	sub	w12, w10, #0x1
    1028:	str	w12, [x19, #16]
    102c:	eor	w9, w11, w9, lsl #8
    1030:	str	w9, [x19, #3184]
    1034:	ldr	x9, [x8, #24]
    1038:	ldp	w10, w11, [x8, #32]
    103c:	add	x9, x9, #0x1
    1040:	str	x9, [x8, #24]
    1044:	sub	w9, w10, #0x1
    1048:	adds	w10, w11, #0x1
    104c:	stp	w9, w10, [x8, #32]
    1050:	b.cc	1060 <BZ2_bzDecompress+0x6dc>  // b.lo, b.ul, b.last
    1054:	ldr	w10, [x8, #40]
    1058:	add	w10, w10, #0x1
    105c:	str	w10, [x8, #40]
    1060:	cbnz	w9, e9c <BZ2_bzDecompress+0x518>
    1064:	b	1670 <BZ2_bzDecompress+0xcec>
    1068:	cmp	w16, #0x1
    106c:	cset	w12, eq  // eq = none
    1070:	and	w15, w18, #0xff
    1074:	eor	w12, w15, w12
    1078:	cmp	w12, w13
    107c:	b.ne	1130 <BZ2_bzDecompress+0x7ac>  // b.any
    1080:	cmp	w14, w11
    1084:	b.cs	1740 <BZ2_bzDecompress+0xdbc>  // b.hs, b.nlast
    1088:	ldr	w12, [x10, x14, lsl #2]
    108c:	lsr	x13, x12, #8
    1090:	str	w13, [x19, #60]
    1094:	cbnz	w16, 10b0 <BZ2_bzDecompress+0x72c>
    1098:	ldrsw	x14, [x19, #28]
    109c:	ldr	w16, [x25, x14, lsl #2]
    10a0:	add	w15, w14, #0x1
    10a4:	cmp	w15, #0x200
    10a8:	csinc	w14, wzr, w14, eq  // eq = none
    10ac:	stp	w16, w14, [x19, #24]
    10b0:	sub	w14, w16, #0x1
    10b4:	add	w15, w9, #0x4
    10b8:	cmp	w14, #0x1
    10bc:	and	w12, w12, #0xff
    10c0:	str	w15, [x19, #1092]
    10c4:	cset	w15, eq  // eq = none
    10c8:	eor	w12, w12, w15
    10cc:	add	w12, w12, #0x4
    10d0:	cmp	w13, w11
    10d4:	str	w14, [x19, #24]
    10d8:	str	w12, [x19, #16]
    10dc:	b.cs	1740 <BZ2_bzDecompress+0xdbc>  // b.hs, b.nlast
    10e0:	ldr	w11, [x10, x13, lsl #2]
    10e4:	and	w10, w11, #0xff
    10e8:	lsr	w11, w11, #8
    10ec:	stp	w11, w10, [x19, #60]
    10f0:	cbnz	w14, 110c <BZ2_bzDecompress+0x788>
    10f4:	ldrsw	x11, [x19, #28]
    10f8:	ldr	w14, [x25, x11, lsl #2]
    10fc:	add	w13, w11, #0x1
    1100:	cmp	w13, #0x200
    1104:	csinc	w11, wzr, w11, eq  // eq = none
    1108:	stp	w14, w11, [x19, #24]
    110c:	sub	w11, w14, #0x1
    1110:	cmp	w11, #0x1
    1114:	str	w11, [x19, #24]
    1118:	cset	w11, eq  // eq = none
    111c:	add	w9, w9, #0x5
    1120:	eor	w10, w10, w11
    1124:	str	w10, [x19, #64]
    1128:	str	w9, [x19, #1092]
    112c:	b	e94 <BZ2_bzDecompress+0x510>
    1130:	str	w12, [x19, #64]
    1134:	mov	w12, #0x3                   	// #3
    1138:	b	e94 <BZ2_bzDecompress+0x510>
    113c:	cbz	w10, 1670 <BZ2_bzDecompress+0xcec>
    1140:	ldr	w13, [x19, #16]
    1144:	b	1158 <BZ2_bzDecompress+0x7d4>
    1148:	str	w16, [x19, #64]
    114c:	mov	w13, #0x1                   	// #1
    1150:	ldr	w9, [x8, #32]
    1154:	cbz	w9, 1670 <BZ2_bzDecompress+0xcec>
    1158:	cbnz	w13, 131c <BZ2_bzDecompress+0x998>
    115c:	ldr	w13, [x28]
    1160:	ldr	w9, [x19, #1092]
    1164:	add	w10, w13, #0x1
    1168:	cmp	w9, w10
    116c:	b.eq	1670 <BZ2_bzDecompress+0xcec>  // b.none
    1170:	b.gt	1740 <BZ2_bzDecompress+0xdbc>
    1174:	ldr	w10, [x19, #40]
    1178:	ldp	w17, w14, [x19, #60]
    117c:	str	w24, [x19, #16]
    1180:	mul	w12, w10, w22
    1184:	cmp	w17, w12
    1188:	strb	w14, [x19, #12]
    118c:	b.cs	1740 <BZ2_bzDecompress+0xdbc>  // b.hs, b.nlast
    1190:	mov	w16, wzr
    1194:	mov	w10, #0x100                 	// #256
    1198:	add	w11, w16, w10
    119c:	asr	w11, w11, #1
    11a0:	add	x15, x19, w11, sxtw #2
    11a4:	ldr	w15, [x15, #1096]
    11a8:	cmp	w15, w17
    11ac:	csel	w10, w11, w10, gt
    11b0:	csel	w16, w16, w11, gt
    11b4:	sub	w11, w10, w16
    11b8:	cmp	w11, #0x1
    11bc:	b.ne	1198 <BZ2_bzDecompress+0x814>  // b.any
    11c0:	ldr	x11, [x19, #3168]
    11c4:	ldr	x10, [x19, #3160]
    11c8:	lsr	x18, x17, #1
    11cc:	lsl	w0, w17, #2
    11d0:	ldrb	w18, [x11, x18]
    11d4:	and	x0, x0, #0x4
    11d8:	ldrh	w17, [x10, x17, lsl #1]
    11dc:	add	w15, w9, #0x1
    11e0:	lsr	x18, x18, x0
    11e4:	lsl	w18, w18, #16
    11e8:	and	x18, x18, #0xf0000
    11ec:	cmp	w9, w13
    11f0:	orr	x0, x18, x17
    11f4:	str	w0, [x19, #60]
    11f8:	str	w15, [x19, #1092]
    11fc:	b.eq	114c <BZ2_bzDecompress+0x7c8>  // b.none
    1200:	and	w16, w16, #0xff
    1204:	cmp	w16, w14
    1208:	b.ne	1148 <BZ2_bzDecompress+0x7c4>  // b.any
    120c:	cmp	w0, w12
    1210:	str	w26, [x19, #16]
    1214:	b.cs	1740 <BZ2_bzDecompress+0xdbc>  // b.hs, b.nlast
    1218:	mov	w18, wzr
    121c:	mov	w16, #0x100                 	// #256
    1220:	add	w1, w18, w16
    1224:	asr	w1, w1, #1
    1228:	add	x2, x19, w1, sxtw #2
    122c:	ldr	w2, [x2, #1096]
    1230:	cmp	w2, w0
    1234:	csel	w16, w1, w16, gt
    1238:	csel	w18, w18, w1, gt
    123c:	sub	w1, w16, w18
    1240:	cmp	w1, #0x1
    1244:	b.ne	1220 <BZ2_bzDecompress+0x89c>  // b.any
    1248:	ldrh	w16, [x10, x0, lsl #1]
    124c:	lsr	x0, x0, #1
    1250:	ldrb	w0, [x11, x0]
    1254:	lsl	w1, w17, #2
    1258:	cmp	w15, w13
    125c:	and	x15, x1, #0x4
    1260:	lsr	x15, x0, x15
    1264:	lsl	w15, w15, #16
    1268:	and	x15, x15, #0xf0000
    126c:	add	w17, w9, #0x2
    1270:	orr	x0, x15, x16
    1274:	str	w0, [x19, #60]
    1278:	str	w17, [x19, #1092]
    127c:	b.ne	1288 <BZ2_bzDecompress+0x904>  // b.any
    1280:	mov	w13, #0x2                   	// #2
    1284:	b	1150 <BZ2_bzDecompress+0x7cc>
    1288:	and	w15, w18, #0xff
    128c:	cmp	w15, w14
    1290:	b.ne	1310 <BZ2_bzDecompress+0x98c>  // b.any
    1294:	cmp	w0, w12
    1298:	str	w27, [x19, #16]
    129c:	b.cs	1740 <BZ2_bzDecompress+0xdbc>  // b.hs, b.nlast
    12a0:	mov	w18, wzr
    12a4:	mov	w15, #0x100                 	// #256
    12a8:	add	w1, w18, w15
    12ac:	asr	w1, w1, #1
    12b0:	add	x2, x19, w1, sxtw #2
    12b4:	ldr	w2, [x2, #1096]
    12b8:	cmp	w2, w0
    12bc:	csel	w15, w1, w15, gt
    12c0:	csel	w18, w18, w1, gt
    12c4:	sub	w1, w15, w18
    12c8:	cmp	w1, #0x1
    12cc:	b.ne	12a8 <BZ2_bzDecompress+0x924>  // b.any
    12d0:	ldrh	w15, [x10, x0, lsl #1]
    12d4:	lsr	x0, x0, #1
    12d8:	ldrb	w0, [x11, x0]
    12dc:	lsl	w16, w16, #2
    12e0:	cmp	w17, w13
    12e4:	and	x13, x16, #0x4
    12e8:	lsr	x13, x0, x13
    12ec:	lsl	w13, w13, #16
    12f0:	and	x13, x13, #0xf0000
    12f4:	add	w1, w9, #0x3
    12f8:	orr	x16, x13, x15
    12fc:	str	w16, [x19, #60]
    1300:	str	w1, [x19, #1092]
    1304:	b.ne	1384 <BZ2_bzDecompress+0xa00>  // b.any
    1308:	mov	w13, #0x3                   	// #3
    130c:	b	1150 <BZ2_bzDecompress+0x7cc>
    1310:	str	w15, [x19, #64]
    1314:	mov	w13, #0x2                   	// #2
    1318:	b	1150 <BZ2_bzDecompress+0x7cc>
    131c:	ldrb	w9, [x19, #12]
    1320:	ldr	x8, [x8, #24]
    1324:	strb	w9, [x8]
    1328:	ldr	w9, [x19, #3184]
    132c:	ldrb	w8, [x19, #12]
    1330:	ldr	w10, [x19, #16]
    1334:	eor	w8, w8, w9, lsr #24
    1338:	ldr	w11, [x23, w8, uxtw #2]
    133c:	ldr	x8, [x19]
    1340:	sub	w13, w10, #0x1
    1344:	str	w13, [x19, #16]
    1348:	eor	w9, w11, w9, lsl #8
    134c:	str	w9, [x19, #3184]
    1350:	ldr	x9, [x8, #24]
    1354:	ldp	w10, w11, [x8, #32]
    1358:	add	x9, x9, #0x1
    135c:	str	x9, [x8, #24]
    1360:	sub	w9, w10, #0x1
    1364:	adds	w10, w11, #0x1
    1368:	stp	w9, w10, [x8, #32]
    136c:	b.cc	137c <BZ2_bzDecompress+0x9f8>  // b.lo, b.ul, b.last
    1370:	ldr	w10, [x8, #40]
    1374:	add	w10, w10, #0x1
    1378:	str	w10, [x8, #40]
    137c:	cbnz	w9, 1158 <BZ2_bzDecompress+0x7d4>
    1380:	b	1670 <BZ2_bzDecompress+0xcec>
    1384:	and	w13, w18, #0xff
    1388:	cmp	w13, w14
    138c:	b.ne	1468 <BZ2_bzDecompress+0xae4>  // b.any
    1390:	cmp	w16, w12
    1394:	b.cs	1740 <BZ2_bzDecompress+0xdbc>  // b.hs, b.nlast
    1398:	mov	w13, wzr
    139c:	mov	w14, #0x100                 	// #256
    13a0:	add	w17, w13, w14
    13a4:	asr	w17, w17, #1
    13a8:	add	x18, x19, w17, sxtw #2
    13ac:	ldr	w18, [x18, #1096]
    13b0:	cmp	w18, w16
    13b4:	csel	w14, w17, w14, gt
    13b8:	csel	w13, w13, w17, gt
    13bc:	sub	w17, w14, w13
    13c0:	cmp	w17, #0x1
    13c4:	b.ne	13a0 <BZ2_bzDecompress+0xa1c>  // b.any
    13c8:	ldrh	w14, [x10, x16, lsl #1]
    13cc:	lsr	x16, x16, #1
    13d0:	ldrb	w16, [x11, x16]
    13d4:	lsl	w15, w15, #2
    13d8:	and	x15, x15, #0x4
    13dc:	and	w13, w13, #0xff
    13e0:	lsr	x15, x16, x15
    13e4:	lsl	w15, w15, #16
    13e8:	and	x15, x15, #0xf0000
    13ec:	orr	x15, x15, x14
    13f0:	add	w17, w9, #0x4
    13f4:	add	w13, w13, #0x4
    13f8:	cmp	w15, w12
    13fc:	str	w17, [x19, #1092]
    1400:	str	w15, [x19, #60]
    1404:	str	w13, [x19, #16]
    1408:	b.cs	1740 <BZ2_bzDecompress+0xdbc>  // b.hs, b.nlast
    140c:	mov	w12, wzr
    1410:	mov	w16, #0x100                 	// #256
    1414:	add	w17, w12, w16
    1418:	asr	w17, w17, #1
    141c:	add	x18, x19, w17, sxtw #2
    1420:	ldr	w18, [x18, #1096]
    1424:	cmp	w18, w15
    1428:	csel	w16, w17, w16, gt
    142c:	csel	w12, w12, w17, gt
    1430:	sub	w17, w16, w12
    1434:	cmp	w17, #0x1
    1438:	b.ne	1414 <BZ2_bzDecompress+0xa90>  // b.any
    143c:	str	w12, [x19, #64]
    1440:	lsr	x12, x15, #1
    1444:	ldrb	w11, [x11, x12]
    1448:	ldrh	w10, [x10, x15, lsl #1]
    144c:	ubfiz	w12, w14, #2, #1
    1450:	add	w9, w9, #0x5
    1454:	lsr	w11, w11, w12
    1458:	bfi	w10, w11, #16, #4
    145c:	str	w10, [x19, #60]
    1460:	str	w9, [x19, #1092]
    1464:	b	1150 <BZ2_bzDecompress+0x7cc>
    1468:	str	w13, [x19, #64]
    146c:	mov	w13, #0x3                   	// #3
    1470:	b	1150 <BZ2_bzDecompress+0x7cc>
    1474:	ldr	x10, [x19]
    1478:	ldr	w15, [x28]
    147c:	ldr	w12, [x19, #40]
    1480:	ldr	w8, [x19, #3184]
    1484:	ldr	w11, [x10, #32]
    1488:	ldrb	w17, [x19, #12]
    148c:	ldr	w1, [x19, #16]
    1490:	ldr	w0, [x19, #1092]
    1494:	ldr	x9, [x19, #3152]
    1498:	ldp	w13, w18, [x19, #60]
    149c:	ldr	x10, [x10, #24]
    14a0:	add	w14, w15, #0x1
    14a4:	mul	w16, w12, w22
    14a8:	mov	w12, w11
    14ac:	cmp	w1, #0x1
    14b0:	b.lt	1518 <BZ2_bzDecompress+0xb94>  // b.tstop
    14b4:	cbz	w12, 162c <BZ2_bzDecompress+0xca8>
    14b8:	mov	w5, w1
    14bc:	mov	x2, xzr
    14c0:	and	w3, w17, #0xff
    14c4:	mov	w4, w12
    14c8:	sub	x5, x5, #0x1
    14cc:	cmp	w5, w2
    14d0:	b.eq	14f4 <BZ2_bzDecompress+0xb70>  // b.none
    14d4:	strb	w17, [x10, x2]
    14d8:	eor	w6, w3, w8, lsr #24
    14dc:	ldr	w6, [x23, w6, uxtw #2]
    14e0:	add	x2, x2, #0x1
    14e4:	cmp	w4, w2
    14e8:	eor	w8, w6, w8, lsl #8
    14ec:	b.ne	14cc <BZ2_bzDecompress+0xb48>  // b.any
    14f0:	b	1620 <BZ2_bzDecompress+0xc9c>
    14f4:	sub	w12, w12, w2
    14f8:	add	x10, x10, x2
    14fc:	cbz	w12, 1720 <BZ2_bzDecompress+0xd9c>
    1500:	and	w1, w17, #0xff
    1504:	strb	w17, [x10], #1
    1508:	eor	w1, w1, w8, lsr #24
    150c:	ldr	w1, [x23, w1, uxtw #2]
    1510:	sub	w12, w12, #0x1
    1514:	eor	w8, w1, w8, lsl #8
    1518:	mov	w3, w0
    151c:	mov	w2, w18
    1520:	cmp	w0, w14
    1524:	b.gt	1740 <BZ2_bzDecompress+0xdbc>
    1528:	b.eq	1728 <BZ2_bzDecompress+0xda4>  // b.none
    152c:	cmp	w13, w16
    1530:	b.cs	1740 <BZ2_bzDecompress+0xdbc>  // b.hs, b.nlast
    1534:	ldr	w17, [x9, w13, uxtw #2]
    1538:	add	w0, w3, #0x1
    153c:	and	w18, w17, #0xff
    1540:	lsr	x13, x17, #8
    1544:	cmp	w18, w2
    1548:	b.ne	1558 <BZ2_bzDecompress+0xbd4>  // b.any
    154c:	cmp	w3, w15
    1550:	b.ne	1560 <BZ2_bzDecompress+0xbdc>  // b.any
    1554:	mov	w18, w2
    1558:	mov	w17, w2
    155c:	b	14fc <BZ2_bzDecompress+0xb78>
    1560:	cmp	w13, w16
    1564:	b.cs	1740 <BZ2_bzDecompress+0xdbc>  // b.hs, b.nlast
    1568:	ldr	w5, [x9, x13, lsl #2]
    156c:	add	w4, w3, #0x2
    1570:	cmp	w4, w14
    1574:	mov	w1, #0x2                   	// #2
    1578:	lsr	x13, x5, #8
    157c:	mov	w0, w14
    1580:	mov	w18, w2
    1584:	mov	w17, w2
    1588:	b.eq	14ac <BZ2_bzDecompress+0xb28>  // b.none
    158c:	and	w18, w5, #0xff
    1590:	cmp	w18, w2
    1594:	mov	w1, #0x2                   	// #2
    1598:	mov	w0, w4
    159c:	mov	w17, w2
    15a0:	b.ne	14ac <BZ2_bzDecompress+0xb28>  // b.any
    15a4:	cmp	w13, w16
    15a8:	b.cs	1740 <BZ2_bzDecompress+0xdbc>  // b.hs, b.nlast
    15ac:	ldr	w5, [x9, x13, lsl #2]
    15b0:	add	w4, w3, #0x3
    15b4:	cmp	w4, w14
    15b8:	mov	w1, #0x3                   	// #3
    15bc:	lsr	x13, x5, #8
    15c0:	mov	w0, w14
    15c4:	mov	w18, w2
    15c8:	mov	w17, w2
    15cc:	b.eq	14ac <BZ2_bzDecompress+0xb28>  // b.none
    15d0:	and	w18, w5, #0xff
    15d4:	cmp	w18, w2
    15d8:	mov	w1, #0x3                   	// #3
    15dc:	mov	w0, w4
    15e0:	mov	w17, w2
    15e4:	b.ne	14ac <BZ2_bzDecompress+0xb28>  // b.any
    15e8:	cmp	w13, w16
    15ec:	b.cs	1740 <BZ2_bzDecompress+0xdbc>  // b.hs, b.nlast
    15f0:	ldr	w13, [x9, x13, lsl #2]
    15f4:	lsr	x17, x13, #8
    15f8:	cmp	w17, w16
    15fc:	b.cs	1740 <BZ2_bzDecompress+0xdbc>  // b.hs, b.nlast
    1600:	ldr	w17, [x9, x17, lsl #2]
    1604:	and	w13, w13, #0xff
    1608:	add	w1, w13, #0x4
    160c:	add	w0, w3, #0x5
    1610:	and	w18, w17, #0xff
    1614:	lsr	w13, w17, #8
    1618:	mov	w17, w2
    161c:	b	14ac <BZ2_bzDecompress+0xb28>
    1620:	mov	w12, wzr
    1624:	add	x10, x10, x2
    1628:	sub	w1, w1, w2
    162c:	ldr	x14, [x19]
    1630:	sub	w11, w11, w12
    1634:	ldr	w15, [x14, #36]
    1638:	adds	w11, w15, w11
    163c:	str	w11, [x14, #36]
    1640:	b.cc	1650 <BZ2_bzDecompress+0xccc>  // b.lo, b.ul, b.last
    1644:	ldr	w11, [x14, #40]
    1648:	add	w11, w11, #0x1
    164c:	str	w11, [x14, #40]
    1650:	str	w8, [x19, #3184]
    1654:	strb	w17, [x19, #12]
    1658:	str	w1, [x19, #16]
    165c:	str	w0, [x19, #1092]
    1660:	str	x9, [x19, #3152]
    1664:	stp	w13, w18, [x19, #60]
    1668:	str	x10, [x14, #24]
    166c:	str	w12, [x14, #32]
    1670:	ldr	w8, [x28]
    1674:	ldr	w9, [x19, #1092]
    1678:	add	w8, w8, #0x1
    167c:	cmp	w9, w8
    1680:	b.ne	176c <BZ2_bzDecompress+0xde8>  // b.any
    1684:	ldr	w8, [x19, #16]
    1688:	cbnz	w8, 176c <BZ2_bzDecompress+0xde8>
    168c:	ldr	w9, [x19, #3184]
    1690:	ldr	w8, [x19, #52]
    1694:	mvn	w3, w9
    1698:	cmp	w8, #0x2
    169c:	str	w3, [x19, #3184]
    16a0:	b.gt	16f0 <BZ2_bzDecompress+0xd6c>
    16a4:	cmp	w8, #0x2
    16a8:	b.ge	1710 <BZ2_bzDecompress+0xd8c>  // b.tcont
    16ac:	ldr	w8, [x19, #3184]
    16b0:	ldr	w9, [x19, #3176]
    16b4:	cmp	w8, w9
    16b8:	b.ne	1740 <BZ2_bzDecompress+0xdbc>  // b.any
    16bc:	ldr	w9, [x19, #3188]
    16c0:	str	w20, [x19, #8]
    16c4:	eor	w8, w8, w9, ror #31
    16c8:	str	w8, [x19, #3188]
    16cc:	mov	x0, x19
    16d0:	bl	0 <BZ2_decompress>
    16d4:	cmp	w0, #0x4
    16d8:	b.eq	1748 <BZ2_bzDecompress+0xdc4>  // b.none
    16dc:	ldr	w8, [x19, #8]
    16e0:	cmp	w8, #0x2
    16e4:	mov	w8, #0x2                   	// #2
    16e8:	b.eq	a10 <BZ2_bzDecompress+0x8c>  // b.none
    16ec:	b	9bc <BZ2_bzDecompress+0x38>
    16f0:	ldr	x0, [x21]
    16f4:	ldr	w2, [x19, #3176]
    16f8:	adrp	x1, 0 <BZ2_bz__AssertH__fail>
    16fc:	add	x1, x1, #0x0
    1700:	bl	0 <fprintf>
    1704:	ldr	w8, [x19, #52]
    1708:	cmp	w8, #0x2
    170c:	b.lt	16ac <BZ2_bzDecompress+0xd28>  // b.tstop
    1710:	ldr	x1, [x21]
    1714:	mov	w0, #0x5d                  	// #93
    1718:	bl	0 <fputc>
    171c:	b	16ac <BZ2_bzDecompress+0xd28>
    1720:	mov	w1, #0x1                   	// #1
    1724:	b	162c <BZ2_bzDecompress+0xca8>
    1728:	mov	w1, wzr
    172c:	mov	w0, w14
    1730:	mov	w18, w2
    1734:	b	162c <BZ2_bzDecompress+0xca8>
    1738:	mov	w0, #0xffffffff            	// #-1
    173c:	b	9bc <BZ2_bzDecompress+0x38>
    1740:	mov	w0, #0xfffffffc            	// #-4
    1744:	b	9bc <BZ2_bzDecompress+0x38>
    1748:	ldr	w8, [x19, #52]
    174c:	cmp	w8, #0x3
    1750:	b.ge	1774 <BZ2_bzDecompress+0xdf0>  // b.tcont
    1754:	ldr	w8, [x19, #3188]
    1758:	ldr	w9, [x19, #3180]
    175c:	cmp	w8, w9
    1760:	mov	w8, #0x4                   	// #4
    1764:	cneg	w0, w8, ne  // ne = any
    1768:	b	9bc <BZ2_bzDecompress+0x38>
    176c:	mov	w0, wzr
    1770:	b	9bc <BZ2_bzDecompress+0x38>
    1774:	ldr	x0, [x21]
    1778:	ldr	w2, [x19, #3180]
    177c:	ldr	w3, [x19, #3188]
    1780:	adrp	x1, 0 <BZ2_bz__AssertH__fail>
    1784:	add	x1, x1, #0x0
    1788:	bl	0 <fprintf>
    178c:	b	1754 <BZ2_bzDecompress+0xdd0>

0000000000001790 <BZ2_bzDecompressEnd>:
    1790:	stp	x29, x30, [sp, #-32]!
    1794:	stp	x20, x19, [sp, #16]
    1798:	mov	x29, sp
    179c:	cbz	x0, 17b8 <BZ2_bzDecompressEnd+0x28>
    17a0:	ldr	x20, [x0, #48]
    17a4:	mov	x19, x0
    17a8:	cbz	x20, 17b8 <BZ2_bzDecompressEnd+0x28>
    17ac:	ldr	x8, [x20]
    17b0:	cmp	x8, x19
    17b4:	b.eq	17c8 <BZ2_bzDecompressEnd+0x38>  // b.none
    17b8:	mov	w0, #0xfffffffe            	// #-2
    17bc:	ldp	x20, x19, [sp, #16]
    17c0:	ldp	x29, x30, [sp], #32
    17c4:	ret
    17c8:	ldr	x1, [x20, #3152]
    17cc:	cbz	x1, 17d8 <BZ2_bzDecompressEnd+0x48>
    17d0:	ldp	x8, x0, [x19, #64]
    17d4:	blr	x8
    17d8:	ldr	x1, [x20, #3160]
    17dc:	cbz	x1, 17e8 <BZ2_bzDecompressEnd+0x58>
    17e0:	ldp	x8, x0, [x19, #64]
    17e4:	blr	x8
    17e8:	ldr	x1, [x20, #3168]
    17ec:	cbz	x1, 17f8 <BZ2_bzDecompressEnd+0x68>
    17f0:	ldp	x8, x0, [x19, #64]
    17f4:	blr	x8
    17f8:	ldp	x8, x0, [x19, #64]
    17fc:	ldr	x1, [x19, #48]
    1800:	blr	x8
    1804:	mov	w0, wzr
    1808:	str	xzr, [x19, #48]
    180c:	b	17bc <BZ2_bzDecompressEnd+0x2c>

0000000000001810 <BZ2_bzWriteOpen>:
    1810:	stp	x29, x30, [sp, #-80]!
    1814:	str	x25, [sp, #16]
    1818:	stp	x24, x23, [sp, #32]
    181c:	stp	x22, x21, [sp, #48]
    1820:	stp	x20, x19, [sp, #64]
    1824:	mov	x29, sp
    1828:	mov	w23, w4
    182c:	mov	w21, w3
    1830:	mov	w22, w2
    1834:	mov	x24, x1
    1838:	mov	x19, x0
    183c:	cbz	x0, 1844 <BZ2_bzWriteOpen+0x34>
    1840:	str	wzr, [x19]
    1844:	cmp	w21, #0x4
    1848:	b.hi	1880 <BZ2_bzWriteOpen+0x70>  // b.pmore
    184c:	cmp	w23, #0xfa
    1850:	b.hi	1880 <BZ2_bzWriteOpen+0x70>  // b.pmore
    1854:	cbz	x24, 1880 <BZ2_bzWriteOpen+0x70>
    1858:	sub	w8, w22, #0x1
    185c:	cmp	w8, #0x9
    1860:	b.cs	1880 <BZ2_bzWriteOpen+0x70>  // b.hs, b.nlast
    1864:	mov	x0, x24
    1868:	bl	0 <ferror>
    186c:	cbz	w0, 18ac <BZ2_bzWriteOpen+0x9c>
    1870:	mov	x20, xzr
    1874:	cbz	x19, 1890 <BZ2_bzWriteOpen+0x80>
    1878:	mov	w8, #0xfffffffa            	// #-6
    187c:	b	188c <BZ2_bzWriteOpen+0x7c>
    1880:	mov	x20, xzr
    1884:	cbz	x19, 1890 <BZ2_bzWriteOpen+0x80>
    1888:	mov	w8, #0xfffffffe            	// #-2
    188c:	str	w8, [x19]
    1890:	mov	x0, x20
    1894:	ldp	x20, x19, [sp, #64]
    1898:	ldp	x22, x21, [sp, #48]
    189c:	ldp	x24, x23, [sp, #32]
    18a0:	ldr	x25, [sp, #16]
    18a4:	ldp	x29, x30, [sp], #80
    18a8:	ret
    18ac:	mov	w0, #0x13f0                	// #5104
    18b0:	bl	0 <malloc>
    18b4:	cbz	x0, 192c <BZ2_bzWriteOpen+0x11c>
    18b8:	mov	w8, #0x1394                	// #5012
    18bc:	mov	x20, x0
    18c0:	add	x25, x0, x8
    18c4:	cbz	x19, 18cc <BZ2_bzWriteOpen+0xbc>
    18c8:	str	wzr, [x19]
    18cc:	mov	w8, #0x1398                	// #5016
    18d0:	cmp	w23, #0x0
    18d4:	mov	w9, #0x1e                  	// #30
    18d8:	str	wzr, [x20, #5096]
    18dc:	strb	wzr, [x25, #88]
    18e0:	str	x24, [x20]
    18e4:	mov	w24, #0x1                   	// #1
    18e8:	movi	v0.2d, #0x0
    18ec:	add	x0, x20, x8
    18f0:	csel	w3, w9, w23, eq  // eq = none
    18f4:	mov	w1, w22
    18f8:	mov	w2, w21
    18fc:	str	wzr, [x20, #5008]
    1900:	strb	w24, [x25]
    1904:	str	xzr, [x20, #5088]
    1908:	str	q0, [x20, #5072]
    190c:	bl	68 <BZ2_bzCompressInit>
    1910:	cbz	w0, 193c <BZ2_bzWriteOpen+0x12c>
    1914:	cbz	x19, 191c <BZ2_bzWriteOpen+0x10c>
    1918:	str	w0, [x19]
    191c:	mov	x0, x20
    1920:	bl	0 <free>
    1924:	mov	x20, xzr
    1928:	b	1890 <BZ2_bzWriteOpen+0x80>
    192c:	mov	x20, xzr
    1930:	cbz	x19, 1890 <BZ2_bzWriteOpen+0x80>
    1934:	mov	w8, #0xfffffffd            	// #-3
    1938:	b	188c <BZ2_bzWriteOpen+0x7c>
    193c:	str	wzr, [x20, #5024]
    1940:	strb	w24, [x25, #88]
    1944:	b	1890 <BZ2_bzWriteOpen+0x80>

0000000000001948 <BZ2_bzWrite>:
    1948:	stp	x29, x30, [sp, #-64]!
    194c:	stp	x24, x23, [sp, #16]
    1950:	stp	x22, x21, [sp, #32]
    1954:	stp	x20, x19, [sp, #48]
    1958:	mov	x29, sp
    195c:	mov	w22, w3
    1960:	mov	x21, x2
    1964:	mov	x19, x1
    1968:	mov	x20, x0
    196c:	cbz	x0, 1974 <BZ2_bzWrite+0x2c>
    1970:	str	wzr, [x20]
    1974:	cbz	x19, 19b0 <BZ2_bzWrite+0x68>
    1978:	str	wzr, [x19, #5096]
    197c:	cbz	x21, 19b0 <BZ2_bzWrite+0x68>
    1980:	tbnz	w22, #31, 19b0 <BZ2_bzWrite+0x68>
    1984:	mov	w8, #0x1394                	// #5012
    1988:	ldrb	w8, [x19, x8]
    198c:	cbz	w8, 19c8 <BZ2_bzWrite+0x80>
    1990:	ldr	x0, [x19]
    1994:	bl	0 <ferror>
    1998:	cbz	w0, 19f0 <BZ2_bzWrite+0xa8>
    199c:	cbz	x20, 19a8 <BZ2_bzWrite+0x60>
    19a0:	mov	w8, #0xfffffffa            	// #-6
    19a4:	str	w8, [x20]
    19a8:	mov	w8, #0xfffffffa            	// #-6
    19ac:	b	19d8 <BZ2_bzWrite+0x90>
    19b0:	cbz	x20, 19bc <BZ2_bzWrite+0x74>
    19b4:	mov	w8, #0xfffffffe            	// #-2
    19b8:	str	w8, [x20]
    19bc:	cbz	x19, 19dc <BZ2_bzWrite+0x94>
    19c0:	mov	w8, #0xfffffffe            	// #-2
    19c4:	b	19d8 <BZ2_bzWrite+0x90>
    19c8:	cbz	x20, 19d4 <BZ2_bzWrite+0x8c>
    19cc:	mov	w8, #0xffffffff            	// #-1
    19d0:	str	w8, [x20]
    19d4:	mov	w8, #0xffffffff            	// #-1
    19d8:	str	w8, [x19, #5096]
    19dc:	ldp	x20, x19, [sp, #48]
    19e0:	ldp	x22, x21, [sp, #32]
    19e4:	ldp	x24, x23, [sp, #16]
    19e8:	ldp	x29, x30, [sp], #64
    19ec:	ret
    19f0:	cbz	w22, 1a90 <BZ2_bzWrite+0x148>
    19f4:	mov	w8, #0x1398                	// #5016
    19f8:	str	w22, [x19, #5024]
    19fc:	str	x21, [x19, #5016]
    1a00:	add	x21, x19, #0x8
    1a04:	add	x22, x19, x8
    1a08:	mov	w24, #0x1388                	// #5000
    1a0c:	b	1a18 <BZ2_bzWrite+0xd0>
    1a10:	ldr	w8, [x19, #5024]
    1a14:	cbz	w8, 1a90 <BZ2_bzWrite+0x148>
    1a18:	ldr	x8, [x19, #5064]
    1a1c:	str	w24, [x19, #5048]
    1a20:	str	x21, [x19, #5040]
    1a24:	cbz	x8, 1aa0 <BZ2_bzWrite+0x158>
    1a28:	ldr	x9, [x8]
    1a2c:	cmp	x9, x22
    1a30:	b.ne	1aa0 <BZ2_bzWrite+0x158>  // b.any
    1a34:	ldr	w9, [x8, #8]
    1a38:	cmp	w9, #0x2
    1a3c:	b.ne	1aa8 <BZ2_bzWrite+0x160>  // b.any
    1a40:	mov	x0, x22
    1a44:	bl	3f0 <handle_compress>
    1a48:	tst	w0, #0xff
    1a4c:	b.eq	1aa0 <BZ2_bzWrite+0x158>  // b.none
    1a50:	ldrsw	x8, [x19, #5048]
    1a54:	ubfx	x9, x8, #3, #29
    1a58:	cmp	w9, #0x270
    1a5c:	b.hi	1a10 <BZ2_bzWrite+0xc8>  // b.pmore
    1a60:	ldr	x3, [x19]
    1a64:	sub	x23, x24, x8
    1a68:	mov	w1, #0x1                   	// #1
    1a6c:	mov	x0, x21
    1a70:	mov	x2, x23
    1a74:	bl	0 <fwrite>
    1a78:	cmp	w23, w0
    1a7c:	b.ne	199c <BZ2_bzWrite+0x54>  // b.any
    1a80:	ldr	x0, [x19]
    1a84:	bl	0 <ferror>
    1a88:	cbz	w0, 1a10 <BZ2_bzWrite+0xc8>
    1a8c:	b	199c <BZ2_bzWrite+0x54>
    1a90:	cbz	x20, 1a98 <BZ2_bzWrite+0x150>
    1a94:	str	wzr, [x20]
    1a98:	str	wzr, [x19, #5096]
    1a9c:	b	19dc <BZ2_bzWrite+0x94>
    1aa0:	mov	w8, #0xfffffffe            	// #-2
    1aa4:	b	1acc <BZ2_bzWrite+0x184>
    1aa8:	cmp	w9, #0x4
    1aac:	mov	w8, wzr
    1ab0:	b.hi	1acc <BZ2_bzWrite+0x184>  // b.pmore
    1ab4:	mov	w10, #0x1                   	// #1
    1ab8:	lsl	w9, w10, w9
    1abc:	mov	w10, #0x1a                  	// #26
    1ac0:	tst	w9, w10
    1ac4:	b.eq	1acc <BZ2_bzWrite+0x184>  // b.none
    1ac8:	mov	w8, #0xffffffff            	// #-1
    1acc:	cbz	x20, 19d8 <BZ2_bzWrite+0x90>
    1ad0:	str	w8, [x20]
    1ad4:	b	19d8 <BZ2_bzWrite+0x90>

0000000000001ad8 <BZ2_bzWriteClose>:
    1ad8:	mov	x5, x4
    1adc:	mov	x4, xzr
    1ae0:	mov	x6, xzr
    1ae4:	b	1ae8 <BZ2_bzWriteClose64>

0000000000001ae8 <BZ2_bzWriteClose64>:
    1ae8:	sub	sp, sp, #0x70
    1aec:	stp	x29, x30, [sp, #16]
    1af0:	stp	x28, x27, [sp, #32]
    1af4:	stp	x26, x25, [sp, #48]
    1af8:	stp	x24, x23, [sp, #64]
    1afc:	stp	x22, x21, [sp, #80]
    1b00:	stp	x20, x19, [sp, #96]
    1b04:	add	x29, sp, #0x10
    1b08:	mov	x20, x0
    1b0c:	cbz	x1, 1b58 <BZ2_bzWriteClose64+0x70>
    1b10:	mov	w8, #0x1394                	// #5012
    1b14:	ldrb	w8, [x1, x8]
    1b18:	mov	x19, x1
    1b1c:	cbz	w8, 1b64 <BZ2_bzWriteClose64+0x7c>
    1b20:	ldr	x25, [x19]
    1b24:	mov	x21, x6
    1b28:	mov	x22, x5
    1b2c:	mov	x23, x4
    1b30:	mov	x0, x25
    1b34:	mov	x24, x3
    1b38:	mov	w26, w2
    1b3c:	bl	0 <ferror>
    1b40:	cbz	w0, 1b98 <BZ2_bzWriteClose64+0xb0>
    1b44:	cbz	x20, 1b50 <BZ2_bzWriteClose64+0x68>
    1b48:	mov	w8, #0xfffffffa            	// #-6
    1b4c:	str	w8, [x20]
    1b50:	mov	w8, #0xfffffffa            	// #-6
    1b54:	b	1b74 <BZ2_bzWriteClose64+0x8c>
    1b58:	cbz	x20, 1b78 <BZ2_bzWriteClose64+0x90>
    1b5c:	str	wzr, [x20]
    1b60:	b	1b78 <BZ2_bzWriteClose64+0x90>
    1b64:	cbz	x20, 1b70 <BZ2_bzWriteClose64+0x88>
    1b68:	mov	w8, #0xffffffff            	// #-1
    1b6c:	str	w8, [x20]
    1b70:	mov	w8, #0xffffffff            	// #-1
    1b74:	str	w8, [x19, #5096]
    1b78:	ldp	x20, x19, [sp, #96]
    1b7c:	ldp	x22, x21, [sp, #80]
    1b80:	ldp	x24, x23, [sp, #64]
    1b84:	ldp	x26, x25, [sp, #48]
    1b88:	ldp	x28, x27, [sp, #32]
    1b8c:	ldp	x29, x30, [sp, #16]
    1b90:	add	sp, sp, #0x70
    1b94:	ret
    1b98:	cbz	x24, 1ba0 <BZ2_bzWriteClose64+0xb8>
    1b9c:	str	wzr, [x24]
    1ba0:	cbz	x23, 1ba8 <BZ2_bzWriteClose64+0xc0>
    1ba4:	str	wzr, [x23]
    1ba8:	cbz	x22, 1bb0 <BZ2_bzWriteClose64+0xc8>
    1bac:	str	wzr, [x22]
    1bb0:	cbz	x21, 1bb8 <BZ2_bzWriteClose64+0xd0>
    1bb4:	str	wzr, [x21]
    1bb8:	cbz	w26, 1c84 <BZ2_bzWriteClose64+0x19c>
    1bbc:	cbz	x24, 1bc8 <BZ2_bzWriteClose64+0xe0>
    1bc0:	ldr	w8, [x19, #5028]
    1bc4:	str	w8, [x24]
    1bc8:	cbz	x23, 1bd4 <BZ2_bzWriteClose64+0xec>
    1bcc:	ldr	w8, [x19, #5032]
    1bd0:	str	w8, [x23]
    1bd4:	cbz	x22, 1be0 <BZ2_bzWriteClose64+0xf8>
    1bd8:	ldr	w8, [x19, #5052]
    1bdc:	str	w8, [x22]
    1be0:	cbz	x21, 1bec <BZ2_bzWriteClose64+0x104>
    1be4:	ldr	w8, [x19, #5056]
    1be8:	str	w8, [x21]
    1bec:	cbz	x20, 1bf4 <BZ2_bzWriteClose64+0x10c>
    1bf0:	str	wzr, [x20]
    1bf4:	ldr	x20, [x19, #5064]
    1bf8:	str	wzr, [x19, #5096]
    1bfc:	cbz	x20, 1c60 <BZ2_bzWriteClose64+0x178>
    1c00:	ldr	x8, [x20]
    1c04:	mov	w9, #0x1398                	// #5016
    1c08:	add	x9, x19, x9
    1c0c:	cmp	x8, x9
    1c10:	b.ne	1c60 <BZ2_bzWriteClose64+0x178>  // b.any
    1c14:	ldr	x1, [x20, #24]
    1c18:	cbz	x1, 1c28 <BZ2_bzWriteClose64+0x140>
    1c1c:	ldr	x8, [x19, #5080]
    1c20:	ldr	x0, [x19, #5088]
    1c24:	blr	x8
    1c28:	ldr	x1, [x20, #32]
    1c2c:	cbz	x1, 1c3c <BZ2_bzWriteClose64+0x154>
    1c30:	ldr	x8, [x19, #5080]
    1c34:	ldr	x0, [x19, #5088]
    1c38:	blr	x8
    1c3c:	ldr	x1, [x20, #40]
    1c40:	cbz	x1, 1c50 <BZ2_bzWriteClose64+0x168>
    1c44:	ldr	x8, [x19, #5080]
    1c48:	ldr	x0, [x19, #5088]
    1c4c:	blr	x8
    1c50:	ldr	x8, [x19, #5080]
    1c54:	ldr	x0, [x19, #5088]
    1c58:	ldr	x1, [x19, #5064]
    1c5c:	blr	x8
    1c60:	mov	x0, x19
    1c64:	ldp	x20, x19, [sp, #96]
    1c68:	ldp	x22, x21, [sp, #80]
    1c6c:	ldp	x24, x23, [sp, #64]
    1c70:	ldp	x26, x25, [sp, #48]
    1c74:	ldp	x28, x27, [sp, #32]
    1c78:	ldp	x29, x30, [sp, #16]
    1c7c:	add	sp, sp, #0x70
    1c80:	b	0 <free>
    1c84:	ldr	w8, [x19, #5096]
    1c88:	cbz	w8, 1cb0 <BZ2_bzWriteClose64+0x1c8>
    1c8c:	mov	x0, x25
    1c90:	bl	0 <ferror>
    1c94:	cbnz	w0, 1bbc <BZ2_bzWriteClose64+0xd4>
    1c98:	mov	x0, x25
    1c9c:	bl	0 <fflush>
    1ca0:	ldr	x0, [x19]
    1ca4:	bl	0 <ferror>
    1ca8:	cbnz	w0, 1b44 <BZ2_bzWriteClose64+0x5c>
    1cac:	b	1bbc <BZ2_bzWriteClose64+0xd4>
    1cb0:	mov	w8, #0x1398                	// #5016
    1cb4:	add	x25, x19, #0x8
    1cb8:	mov	w28, #0x1388                	// #5000
    1cbc:	add	x26, x19, x8
    1cc0:	ldr	x27, [x19, #5064]
    1cc4:	str	w28, [x19, #5048]
    1cc8:	str	x25, [x19, #5040]
    1ccc:	cbz	x27, 1ddc <BZ2_bzWriteClose64+0x2f4>
    1cd0:	ldr	x8, [x27]
    1cd4:	cmp	x8, x26
    1cd8:	b.ne	1ddc <BZ2_bzWriteClose64+0x2f4>  // b.any
    1cdc:	ldr	w8, [x27, #8]
    1ce0:	cmp	w8, #0x2
    1ce4:	b.ne	1d00 <BZ2_bzWriteClose64+0x218>  // b.any
    1ce8:	ldr	w9, [x19, #5024]
    1cec:	mov	w8, #0x4                   	// #4
    1cf0:	str	w8, [x27, #8]
    1cf4:	str	w9, [x27, #16]
    1cf8:	cmp	w8, #0x2
    1cfc:	b.eq	1ce8 <BZ2_bzWriteClose64+0x200>  // b.none
    1d00:	cmp	w8, #0x1
    1d04:	b.eq	1dcc <BZ2_bzWriteClose64+0x2e4>  // b.none
    1d08:	cmp	w8, #0x3
    1d0c:	b.eq	1dcc <BZ2_bzWriteClose64+0x2e4>  // b.none
    1d10:	cmp	w8, #0x4
    1d14:	b.ne	1dd4 <BZ2_bzWriteClose64+0x2ec>  // b.any
    1d18:	ldr	w8, [x27, #16]
    1d1c:	ldr	w9, [x19, #5024]
    1d20:	cmp	w8, w9
    1d24:	b.ne	1dcc <BZ2_bzWriteClose64+0x2e4>  // b.any
    1d28:	mov	x0, x26
    1d2c:	mov	w28, #0x1                   	// #1
    1d30:	bl	3f0 <handle_compress>
    1d34:	tst	w0, #0xff
    1d38:	b.eq	1dcc <BZ2_bzWriteClose64+0x2e4>  // b.none
    1d3c:	ldr	w8, [x27, #16]
    1d40:	cbz	w8, 1d9c <BZ2_bzWriteClose64+0x2b4>
    1d44:	mov	w27, #0x3                   	// #3
    1d48:	ldrsw	x8, [x19, #5048]
    1d4c:	mov	w28, #0x1388                	// #5000
    1d50:	ubfx	x9, x8, #3, #29
    1d54:	cmp	w9, #0x270
    1d58:	b.hi	1d90 <BZ2_bzWriteClose64+0x2a8>  // b.pmore
    1d5c:	ldr	x3, [x19]
    1d60:	stur	w27, [x29, #-4]
    1d64:	sub	x27, x28, x8
    1d68:	mov	w1, #0x1                   	// #1
    1d6c:	mov	x0, x25
    1d70:	mov	x2, x27
    1d74:	bl	0 <fwrite>
    1d78:	cmp	w27, w0
    1d7c:	ldur	w27, [x29, #-4]
    1d80:	b.ne	1b44 <BZ2_bzWriteClose64+0x5c>  // b.any
    1d84:	ldr	x0, [x19]
    1d88:	bl	0 <ferror>
    1d8c:	cbnz	w0, 1b44 <BZ2_bzWriteClose64+0x5c>
    1d90:	cmp	w27, #0x4
    1d94:	b.ne	1cc0 <BZ2_bzWriteClose64+0x1d8>  // b.any
    1d98:	b	1dec <BZ2_bzWriteClose64+0x304>
    1d9c:	ldr	w8, [x27, #92]
    1da0:	cmp	w8, #0xff
    1da4:	b.hi	1db4 <BZ2_bzWriteClose64+0x2cc>  // b.pmore
    1da8:	ldr	w8, [x27, #96]
    1dac:	cmp	w8, #0x0
    1db0:	b.gt	1d44 <BZ2_bzWriteClose64+0x25c>
    1db4:	ldp	w9, w8, [x27, #116]
    1db8:	cmp	w8, w9
    1dbc:	b.lt	1d44 <BZ2_bzWriteClose64+0x25c>  // b.tstop
    1dc0:	str	w28, [x27, #8]
    1dc4:	mov	w27, #0x4                   	// #4
    1dc8:	b	1d48 <BZ2_bzWriteClose64+0x260>
    1dcc:	mov	w8, #0xffffffff            	// #-1
    1dd0:	b	1de0 <BZ2_bzWriteClose64+0x2f8>
    1dd4:	mov	w8, wzr
    1dd8:	b	1de0 <BZ2_bzWriteClose64+0x2f8>
    1ddc:	mov	w8, #0xfffffffe            	// #-2
    1de0:	cbz	x20, 1b74 <BZ2_bzWriteClose64+0x8c>
    1de4:	str	w8, [x20]
    1de8:	b	1b74 <BZ2_bzWriteClose64+0x8c>
    1dec:	ldr	x25, [x19]
    1df0:	b	1c8c <BZ2_bzWriteClose64+0x1a4>

0000000000001df4 <BZ2_bzReadOpen>:
    1df4:	stp	x29, x30, [sp, #-80]!
    1df8:	stp	x26, x25, [sp, #16]
    1dfc:	stp	x24, x23, [sp, #32]
    1e00:	stp	x22, x21, [sp, #48]
    1e04:	stp	x20, x19, [sp, #64]
    1e08:	mov	x29, sp
    1e0c:	mov	w24, w5
    1e10:	mov	x23, x4
    1e14:	mov	w21, w3
    1e18:	mov	w19, w2
    1e1c:	mov	x25, x1
    1e20:	mov	x22, x0
    1e24:	cbz	x0, 1e2c <BZ2_bzReadOpen+0x38>
    1e28:	str	wzr, [x22]
    1e2c:	cbz	x25, 1e58 <BZ2_bzReadOpen+0x64>
    1e30:	cmp	w19, #0x4
    1e34:	b.hi	1e58 <BZ2_bzReadOpen+0x64>  // b.pmore
    1e38:	cmp	w21, #0x1
    1e3c:	b.hi	1e58 <BZ2_bzReadOpen+0x64>  // b.pmore
    1e40:	cbnz	x23, 1e48 <BZ2_bzReadOpen+0x54>
    1e44:	cbnz	w24, 1e58 <BZ2_bzReadOpen+0x64>
    1e48:	cbz	x23, 1e84 <BZ2_bzReadOpen+0x90>
    1e4c:	mov	w8, #0x1389                	// #5001
    1e50:	cmp	w24, w8
    1e54:	b.cc	1e84 <BZ2_bzReadOpen+0x90>  // b.lo, b.ul, b.last
    1e58:	mov	x20, xzr
    1e5c:	cbz	x22, 1e68 <BZ2_bzReadOpen+0x74>
    1e60:	mov	w8, #0xfffffffe            	// #-2
    1e64:	str	w8, [x22]
    1e68:	mov	x0, x20
    1e6c:	ldp	x20, x19, [sp, #64]
    1e70:	ldp	x22, x21, [sp, #48]
    1e74:	ldp	x24, x23, [sp, #32]
    1e78:	ldp	x26, x25, [sp, #16]
    1e7c:	ldp	x29, x30, [sp], #80
    1e80:	ret
    1e84:	mov	x0, x25
    1e88:	bl	0 <ferror>
    1e8c:	cbz	w0, 1ea0 <BZ2_bzReadOpen+0xac>
    1e90:	mov	x20, xzr
    1e94:	cbz	x22, 1e68 <BZ2_bzReadOpen+0x74>
    1e98:	mov	w8, #0xfffffffa            	// #-6
    1e9c:	b	1e64 <BZ2_bzReadOpen+0x70>
    1ea0:	mov	w0, #0x13f0                	// #5104
    1ea4:	bl	0 <malloc>
    1ea8:	cbz	x0, 1fb4 <BZ2_bzReadOpen+0x1c0>
    1eac:	mov	w8, #0x1394                	// #5012
    1eb0:	mov	x20, x0
    1eb4:	add	x26, x0, x8
    1eb8:	cbz	x22, 1ec0 <BZ2_bzReadOpen+0xcc>
    1ebc:	str	wzr, [x22]
    1ec0:	mov	w8, #0x13d0                	// #5072
    1ec4:	movi	v0.2d, #0x0
    1ec8:	cmp	w24, #0x1
    1ecc:	add	x8, x20, x8
    1ed0:	str	wzr, [x20, #5096]
    1ed4:	strb	wzr, [x26, #88]
    1ed8:	str	x25, [x20]
    1edc:	str	wzr, [x20, #5008]
    1ee0:	strb	wzr, [x26]
    1ee4:	str	xzr, [x20, #5088]
    1ee8:	str	q0, [x20, #5072]
    1eec:	b.lt	1f24 <BZ2_bzReadOpen+0x130>  // b.tstop
    1ef0:	mov	w11, wzr
    1ef4:	add	x9, x20, #0x8
    1ef8:	add	w10, w24, #0x1
    1efc:	ldrb	w12, [x23], #1
    1f00:	sub	w10, w10, #0x1
    1f04:	cmp	w10, #0x1
    1f08:	strb	w12, [x9, w11, sxtw]
    1f0c:	ldr	w11, [x20, #5008]
    1f10:	add	w11, w11, #0x1
    1f14:	str	w11, [x20, #5008]
    1f18:	b.gt	1efc <BZ2_bzReadOpen+0x108>
    1f1c:	ldr	x9, [x8]
    1f20:	cbnz	x9, 1f30 <BZ2_bzReadOpen+0x13c>
    1f24:	adrp	x9, 0 <BZ2_bz__AssertH__fail>
    1f28:	add	x9, x9, #0x0
    1f2c:	str	x9, [x8]
    1f30:	ldr	x8, [x20, #5080]
    1f34:	cbnz	x8, 1f44 <BZ2_bzReadOpen+0x150>
    1f38:	adrp	x8, 0 <BZ2_bz__AssertH__fail>
    1f3c:	add	x8, x8, #0x0
    1f40:	str	x8, [x20, #5080]
    1f44:	ldr	x0, [x20, #5088]
    1f48:	mov	w1, #0xfa90                	// #64144
    1f4c:	mov	w2, #0x1                   	// #1
    1f50:	mov	w23, #0x1                   	// #1
    1f54:	blr	x9
    1f58:	cbz	x0, 1fc4 <BZ2_bzReadOpen+0x1d0>
    1f5c:	mov	w8, #0x1398                	// #5016
    1f60:	add	x8, x20, x8
    1f64:	str	x8, [x0]
    1f68:	mov	w8, #0xa                   	// #10
    1f6c:	movi	v0.2d, #0x0
    1f70:	str	x0, [x20, #5064]
    1f74:	str	w8, [x0, #8]
    1f78:	str	d0, [x0, #32]
    1f7c:	str	wzr, [x0, #3188]
    1f80:	str	d0, [x26, #16]
    1f84:	str	d0, [x26, #40]
    1f88:	strb	w21, [x0, #44]
    1f8c:	str	xzr, [x0, #3152]
    1f90:	str	xzr, [x0, #3168]
    1f94:	str	xzr, [x0, #3160]
    1f98:	stp	wzr, w19, [x0, #48]
    1f9c:	ldr	w8, [x20, #5008]
    1fa0:	add	x9, x20, #0x8
    1fa4:	str	x9, [x20, #5016]
    1fa8:	str	w8, [x20, #5024]
    1fac:	strb	w23, [x26, #88]
    1fb0:	b	1e68 <BZ2_bzReadOpen+0x74>
    1fb4:	mov	x20, xzr
    1fb8:	cbz	x22, 1e68 <BZ2_bzReadOpen+0x74>
    1fbc:	mov	w8, #0xfffffffd            	// #-3
    1fc0:	b	1e64 <BZ2_bzReadOpen+0x70>
    1fc4:	cbz	x22, 1fd0 <BZ2_bzReadOpen+0x1dc>
    1fc8:	mov	w8, #0xfffffffd            	// #-3
    1fcc:	str	w8, [x22]
    1fd0:	mov	x0, x20
    1fd4:	bl	0 <free>
    1fd8:	mov	x20, xzr
    1fdc:	b	1e68 <BZ2_bzReadOpen+0x74>

0000000000001fe0 <BZ2_bzReadClose>:
    1fe0:	stp	x29, x30, [sp, #-32]!
    1fe4:	stp	x20, x19, [sp, #16]
    1fe8:	mov	x29, sp
    1fec:	mov	x19, x1
    1ff0:	cbz	x0, 1ff8 <BZ2_bzReadClose+0x18>
    1ff4:	str	wzr, [x0]
    1ff8:	cbz	x19, 2028 <BZ2_bzReadClose+0x48>
    1ffc:	mov	w8, #0x1394                	// #5012
    2000:	add	x8, x19, x8
    2004:	str	wzr, [x19, #5096]
    2008:	ldrb	w9, [x8]
    200c:	cbz	w9, 203c <BZ2_bzReadClose+0x5c>
    2010:	cbz	x0, 201c <BZ2_bzReadClose+0x3c>
    2014:	mov	w8, #0xffffffff            	// #-1
    2018:	str	w8, [x0]
    201c:	mov	w8, #0xffffffff            	// #-1
    2020:	str	w8, [x19, #5096]
    2024:	b	2030 <BZ2_bzReadClose+0x50>
    2028:	cbz	x0, 2030 <BZ2_bzReadClose+0x50>
    202c:	str	wzr, [x0]
    2030:	ldp	x20, x19, [sp, #16]
    2034:	ldp	x29, x30, [sp], #32
    2038:	ret
    203c:	ldrb	w8, [x8, #88]
    2040:	cbz	w8, 20ac <BZ2_bzReadClose+0xcc>
    2044:	ldr	x20, [x19, #5064]
    2048:	cbz	x20, 20ac <BZ2_bzReadClose+0xcc>
    204c:	ldr	x8, [x20]
    2050:	mov	w9, #0x1398                	// #5016
    2054:	add	x9, x19, x9
    2058:	cmp	x8, x9
    205c:	b.ne	20ac <BZ2_bzReadClose+0xcc>  // b.any
    2060:	ldr	x1, [x20, #3152]
    2064:	cbz	x1, 2074 <BZ2_bzReadClose+0x94>
    2068:	ldr	x8, [x19, #5080]
    206c:	ldr	x0, [x19, #5088]
    2070:	blr	x8
    2074:	ldr	x1, [x20, #3160]
    2078:	cbz	x1, 2088 <BZ2_bzReadClose+0xa8>
    207c:	ldr	x8, [x19, #5080]
    2080:	ldr	x0, [x19, #5088]
    2084:	blr	x8
    2088:	ldr	x1, [x20, #3168]
    208c:	cbz	x1, 209c <BZ2_bzReadClose+0xbc>
    2090:	ldr	x8, [x19, #5080]
    2094:	ldr	x0, [x19, #5088]
    2098:	blr	x8
    209c:	ldr	x8, [x19, #5080]
    20a0:	ldr	x0, [x19, #5088]
    20a4:	ldr	x1, [x19, #5064]
    20a8:	blr	x8
    20ac:	mov	x0, x19
    20b0:	ldp	x20, x19, [sp, #16]
    20b4:	ldp	x29, x30, [sp], #32
    20b8:	b	0 <free>

00000000000020bc <BZ2_bzRead>:
    20bc:	stp	x29, x30, [sp, #-64]!
    20c0:	stp	x24, x23, [sp, #16]
    20c4:	stp	x22, x21, [sp, #32]
    20c8:	stp	x20, x19, [sp, #48]
    20cc:	mov	x29, sp
    20d0:	mov	w20, w3
    20d4:	mov	x19, x1
    20d8:	mov	x21, x0
    20dc:	cbz	x0, 20e4 <BZ2_bzRead+0x28>
    20e0:	str	wzr, [x21]
    20e4:	cbz	x19, 2118 <BZ2_bzRead+0x5c>
    20e8:	str	wzr, [x19, #5096]
    20ec:	cbz	x2, 2118 <BZ2_bzRead+0x5c>
    20f0:	tbnz	w20, #31, 2118 <BZ2_bzRead+0x5c>
    20f4:	mov	w8, #0x1394                	// #5012
    20f8:	ldrb	w8, [x19, x8]
    20fc:	cbz	w8, 214c <BZ2_bzRead+0x90>
    2100:	cbz	x21, 210c <BZ2_bzRead+0x50>
    2104:	mov	w8, #0xffffffff            	// #-1
    2108:	str	w8, [x21]
    210c:	mov	w20, wzr
    2110:	mov	w8, #0xffffffff            	// #-1
    2114:	b	2130 <BZ2_bzRead+0x74>
    2118:	cbz	x21, 2124 <BZ2_bzRead+0x68>
    211c:	mov	w8, #0xfffffffe            	// #-2
    2120:	str	w8, [x21]
    2124:	mov	w20, wzr
    2128:	cbz	x19, 2134 <BZ2_bzRead+0x78>
    212c:	mov	w8, #0xfffffffe            	// #-2
    2130:	str	w8, [x19, #5096]
    2134:	mov	w0, w20
    2138:	ldp	x20, x19, [sp, #48]
    213c:	ldp	x22, x21, [sp, #32]
    2140:	ldp	x24, x23, [sp, #16]
    2144:	ldp	x29, x30, [sp], #64
    2148:	ret
    214c:	cbz	w20, 2238 <BZ2_bzRead+0x17c>
    2150:	mov	w8, #0x1398                	// #5016
    2154:	add	x22, x19, x8
    2158:	add	x23, x19, #0x8
    215c:	str	w20, [x19, #5048]
    2160:	str	x2, [x19, #5040]
    2164:	b	2178 <BZ2_bzRead+0xbc>
    2168:	cmp	w0, #0x4
    216c:	b.eq	2288 <BZ2_bzRead+0x1cc>  // b.none
    2170:	ldr	w8, [x19, #5048]
    2174:	cbz	w8, 2278 <BZ2_bzRead+0x1bc>
    2178:	ldr	x24, [x19]
    217c:	mov	x0, x24
    2180:	bl	0 <ferror>
    2184:	cbnz	w0, 224c <BZ2_bzRead+0x190>
    2188:	ldr	w8, [x19, #5024]
    218c:	cbnz	w8, 21dc <BZ2_bzRead+0x120>
    2190:	mov	x0, x24
    2194:	bl	0 <fgetc>
    2198:	cmn	w0, #0x1
    219c:	b.eq	21dc <BZ2_bzRead+0x120>  // b.none
    21a0:	mov	x1, x24
    21a4:	bl	0 <ungetc>
    21a8:	ldr	x3, [x19]
    21ac:	mov	w1, #0x1                   	// #1
    21b0:	mov	w2, #0x1388                	// #5000
    21b4:	mov	x0, x23
    21b8:	bl	0 <fread>
    21bc:	ldr	x8, [x19]
    21c0:	mov	x24, x0
    21c4:	mov	x0, x8
    21c8:	bl	0 <ferror>
    21cc:	cbnz	w0, 224c <BZ2_bzRead+0x190>
    21d0:	str	w24, [x19, #5008]
    21d4:	str	w24, [x19, #5024]
    21d8:	str	x23, [x19, #5016]
    21dc:	mov	x0, x22
    21e0:	bl	984 <BZ2_bzDecompress>
    21e4:	tst	w0, #0xfffffffb
    21e8:	b.ne	2264 <BZ2_bzRead+0x1a8>  // b.any
    21ec:	cbnz	w0, 2168 <BZ2_bzRead+0xac>
    21f0:	ldr	x24, [x19]
    21f4:	mov	x0, x24
    21f8:	bl	0 <fgetc>
    21fc:	cmn	w0, #0x1
    2200:	b.eq	2210 <BZ2_bzRead+0x154>  // b.none
    2204:	mov	x1, x24
    2208:	bl	0 <ungetc>
    220c:	b	2170 <BZ2_bzRead+0xb4>
    2210:	ldr	w8, [x19, #5024]
    2214:	cbnz	w8, 2170 <BZ2_bzRead+0xb4>
    2218:	ldr	w8, [x19, #5048]
    221c:	cbz	w8, 2278 <BZ2_bzRead+0x1bc>
    2220:	cbz	x21, 222c <BZ2_bzRead+0x170>
    2224:	mov	w8, #0xfffffff9            	// #-7
    2228:	str	w8, [x21]
    222c:	mov	w20, wzr
    2230:	mov	w8, #0xfffffff9            	// #-7
    2234:	b	2130 <BZ2_bzRead+0x74>
    2238:	cbz	x21, 2240 <BZ2_bzRead+0x184>
    223c:	str	wzr, [x21]
    2240:	mov	w20, wzr
    2244:	str	wzr, [x19, #5096]
    2248:	b	2134 <BZ2_bzRead+0x78>
    224c:	cbz	x21, 2258 <BZ2_bzRead+0x19c>
    2250:	mov	w8, #0xfffffffa            	// #-6
    2254:	str	w8, [x21]
    2258:	mov	w20, wzr
    225c:	mov	w8, #0xfffffffa            	// #-6
    2260:	b	2130 <BZ2_bzRead+0x74>
    2264:	cbz	x21, 226c <BZ2_bzRead+0x1b0>
    2268:	str	w0, [x21]
    226c:	mov	w20, wzr
    2270:	str	w0, [x19, #5096]
    2274:	b	2134 <BZ2_bzRead+0x78>
    2278:	cbz	x21, 2280 <BZ2_bzRead+0x1c4>
    227c:	str	wzr, [x21]
    2280:	str	wzr, [x19, #5096]
    2284:	b	2134 <BZ2_bzRead+0x78>
    2288:	cbz	x21, 2294 <BZ2_bzRead+0x1d8>
    228c:	mov	w8, #0x4                   	// #4
    2290:	str	w8, [x21]
    2294:	ldr	w8, [x19, #5048]
    2298:	mov	w9, #0x4                   	// #4
    229c:	str	w9, [x19, #5096]
    22a0:	sub	w20, w20, w8
    22a4:	b	2134 <BZ2_bzRead+0x78>

00000000000022a8 <BZ2_bzReadGetUnused>:
    22a8:	cbz	x1, 22e0 <BZ2_bzReadGetUnused+0x38>
    22ac:	ldr	w8, [x1, #5096]
    22b0:	cmp	w8, #0x4
    22b4:	b.ne	22f0 <BZ2_bzReadGetUnused+0x48>  // b.any
    22b8:	cbz	x2, 2308 <BZ2_bzReadGetUnused+0x60>
    22bc:	cbz	x3, 2308 <BZ2_bzReadGetUnused+0x60>
    22c0:	cbz	x0, 22c8 <BZ2_bzReadGetUnused+0x20>
    22c4:	str	wzr, [x0]
    22c8:	ldr	w8, [x1, #5024]
    22cc:	str	wzr, [x1, #5096]
    22d0:	str	w8, [x3]
    22d4:	ldr	x8, [x1, #5016]
    22d8:	str	x8, [x2]
    22dc:	ret
    22e0:	cbz	x0, 22dc <BZ2_bzReadGetUnused+0x34>
    22e4:	mov	w8, #0xfffffffe            	// #-2
    22e8:	str	w8, [x0]
    22ec:	ret
    22f0:	cbz	x0, 22fc <BZ2_bzReadGetUnused+0x54>
    22f4:	mov	w8, #0xffffffff            	// #-1
    22f8:	str	w8, [x0]
    22fc:	mov	w8, #0xffffffff            	// #-1
    2300:	str	w8, [x1, #5096]
    2304:	ret
    2308:	cbz	x0, 2314 <BZ2_bzReadGetUnused+0x6c>
    230c:	mov	w8, #0xfffffffe            	// #-2
    2310:	str	w8, [x0]
    2314:	mov	w8, #0xfffffffe            	// #-2
    2318:	str	w8, [x1, #5096]
    231c:	ret

0000000000002320 <BZ2_bzBuffToBuffCompress>:
    2320:	sub	sp, sp, #0x90
    2324:	stp	x29, x30, [sp, #80]
    2328:	str	x23, [sp, #96]
    232c:	stp	x22, x21, [sp, #112]
    2330:	stp	x20, x19, [sp, #128]
    2334:	add	x29, sp, #0x50
    2338:	cmp	w6, #0xfa
    233c:	mov	w19, #0xfffffffe            	// #-2
    2340:	b.hi	23a0 <BZ2_bzBuffToBuffCompress+0x80>  // b.pmore
    2344:	cmp	w5, #0x4
    2348:	b.hi	23a0 <BZ2_bzBuffToBuffCompress+0x80>  // b.pmore
    234c:	mov	x23, x0
    2350:	cbz	x0, 23a0 <BZ2_bzBuffToBuffCompress+0x80>
    2354:	mov	x20, x1
    2358:	cbz	x1, 23a0 <BZ2_bzBuffToBuffCompress+0x80>
    235c:	mov	x22, x2
    2360:	cbz	x2, 23a0 <BZ2_bzBuffToBuffCompress+0x80>
    2364:	sub	w8, w4, #0x1
    2368:	cmp	w8, #0x8
    236c:	b.hi	23a0 <BZ2_bzBuffToBuffCompress+0x80>  // b.pmore
    2370:	cmp	w6, #0x0
    2374:	mov	w8, #0x1e                  	// #30
    2378:	mov	w21, w3
    237c:	csel	w3, w8, w6, eq  // eq = none
    2380:	mov	x0, sp
    2384:	mov	w1, w4
    2388:	mov	w2, w5
    238c:	stp	xzr, xzr, [sp, #56]
    2390:	str	xzr, [sp, #72]
    2394:	bl	68 <BZ2_bzCompressInit>
    2398:	mov	w19, w0
    239c:	cbz	w0, 23bc <BZ2_bzBuffToBuffCompress+0x9c>
    23a0:	mov	w0, w19
    23a4:	ldp	x20, x19, [sp, #128]
    23a8:	ldp	x22, x21, [sp, #112]
    23ac:	ldr	x23, [sp, #96]
    23b0:	ldp	x29, x30, [sp, #80]
    23b4:	add	sp, sp, #0x90
    23b8:	ret
    23bc:	str	x22, [sp]
    23c0:	str	x23, [sp, #24]
    23c4:	str	w21, [sp, #8]
    23c8:	ldr	w8, [x20]
    23cc:	ldr	x22, [sp, #48]
    23d0:	str	w8, [sp, #32]
    23d4:	cbz	x22, 23f0 <BZ2_bzBuffToBuffCompress+0xd0>
    23d8:	ldr	x8, [x22]
    23dc:	mov	x23, sp
    23e0:	cmp	x8, x23
    23e4:	b.eq	23f8 <BZ2_bzBuffToBuffCompress+0xd8>  // b.none
    23e8:	mov	w19, #0xfffffffe            	// #-2
    23ec:	b	2480 <BZ2_bzBuffToBuffCompress+0x160>
    23f0:	mov	w19, #0xfffffffe            	// #-2
    23f4:	b	23a0 <BZ2_bzBuffToBuffCompress+0x80>
    23f8:	ldr	w8, [x22, #8]
    23fc:	cmp	w8, #0x2
    2400:	b.ne	2418 <BZ2_bzBuffToBuffCompress+0xf8>  // b.any
    2404:	mov	w8, #0x4                   	// #4
    2408:	str	w21, [x22, #16]
    240c:	str	w8, [x22, #8]
    2410:	cmp	w8, #0x2
    2414:	b.eq	2404 <BZ2_bzBuffToBuffCompress+0xe4>  // b.none
    2418:	cmp	w8, #0x1
    241c:	b.eq	2474 <BZ2_bzBuffToBuffCompress+0x154>  // b.none
    2420:	cmp	w8, #0x3
    2424:	b.eq	2474 <BZ2_bzBuffToBuffCompress+0x154>  // b.none
    2428:	cmp	w8, #0x4
    242c:	b.ne	247c <BZ2_bzBuffToBuffCompress+0x15c>  // b.any
    2430:	ldr	w8, [x22, #16]
    2434:	cmp	w8, w21
    2438:	b.ne	2474 <BZ2_bzBuffToBuffCompress+0x154>  // b.any
    243c:	mov	x0, sp
    2440:	bl	3f0 <handle_compress>
    2444:	tst	w0, #0xff
    2448:	b.eq	24d0 <BZ2_bzBuffToBuffCompress+0x1b0>  // b.none
    244c:	ldr	w8, [x22, #16]
    2450:	cbz	w8, 24e0 <BZ2_bzBuffToBuffCompress+0x1c0>
    2454:	ldr	x19, [sp, #48]
    2458:	cbz	x19, 246c <BZ2_bzBuffToBuffCompress+0x14c>
    245c:	ldr	x8, [x19]
    2460:	mov	x9, sp
    2464:	cmp	x8, x9
    2468:	b.eq	253c <BZ2_bzBuffToBuffCompress+0x21c>  // b.none
    246c:	mov	w19, #0xfffffff8            	// #-8
    2470:	b	23a0 <BZ2_bzBuffToBuffCompress+0x80>
    2474:	mov	w19, #0xffffffff            	// #-1
    2478:	b	2480 <BZ2_bzBuffToBuffCompress+0x160>
    247c:	mov	w19, wzr
    2480:	ldr	x8, [x22]
    2484:	cmp	x8, x23
    2488:	b.ne	23a0 <BZ2_bzBuffToBuffCompress+0x80>  // b.any
    248c:	ldr	x1, [x22, #24]
    2490:	cbz	x1, 249c <BZ2_bzBuffToBuffCompress+0x17c>
    2494:	ldp	x8, x0, [sp, #64]
    2498:	blr	x8
    249c:	ldr	x1, [x22, #32]
    24a0:	cbz	x1, 24ac <BZ2_bzBuffToBuffCompress+0x18c>
    24a4:	ldp	x8, x0, [sp, #64]
    24a8:	blr	x8
    24ac:	ldr	x1, [x22, #40]
    24b0:	cbz	x1, 24bc <BZ2_bzBuffToBuffCompress+0x19c>
    24b4:	ldp	x8, x0, [sp, #64]
    24b8:	blr	x8
    24bc:	ldp	x8, x0, [sp, #64]
    24c0:	ldr	x1, [sp, #48]
    24c4:	blr	x8
    24c8:	str	xzr, [sp, #48]
    24cc:	b	23a0 <BZ2_bzBuffToBuffCompress+0x80>
    24d0:	ldr	x22, [sp, #48]
    24d4:	mov	w19, #0xffffffff            	// #-1
    24d8:	cbnz	x22, 2480 <BZ2_bzBuffToBuffCompress+0x160>
    24dc:	b	23a0 <BZ2_bzBuffToBuffCompress+0x80>
    24e0:	ldr	w8, [x22, #92]
    24e4:	cmp	w8, #0xff
    24e8:	b.hi	24f8 <BZ2_bzBuffToBuffCompress+0x1d8>  // b.pmore
    24ec:	ldr	w8, [x22, #96]
    24f0:	cmp	w8, #0x0
    24f4:	b.gt	2454 <BZ2_bzBuffToBuffCompress+0x134>
    24f8:	ldp	w9, w8, [x22, #116]
    24fc:	cmp	w8, w9
    2500:	b.lt	2454 <BZ2_bzBuffToBuffCompress+0x134>  // b.tstop
    2504:	mov	w8, #0x1                   	// #1
    2508:	str	w8, [x22, #8]
    250c:	ldr	w8, [sp, #32]
    2510:	ldr	w9, [x20]
    2514:	sub	w8, w9, w8
    2518:	str	w8, [x20]
    251c:	ldr	x19, [sp, #48]
    2520:	cbz	x19, 23a0 <BZ2_bzBuffToBuffCompress+0x80>
    2524:	ldr	x8, [x19]
    2528:	mov	x9, sp
    252c:	cmp	x8, x9
    2530:	b.eq	2584 <BZ2_bzBuffToBuffCompress+0x264>  // b.none
    2534:	mov	w19, wzr
    2538:	b	23a0 <BZ2_bzBuffToBuffCompress+0x80>
    253c:	ldr	x1, [x19, #24]
    2540:	cbz	x1, 254c <BZ2_bzBuffToBuffCompress+0x22c>
    2544:	ldp	x8, x0, [sp, #64]
    2548:	blr	x8
    254c:	ldr	x1, [x19, #32]
    2550:	cbz	x1, 255c <BZ2_bzBuffToBuffCompress+0x23c>
    2554:	ldp	x8, x0, [sp, #64]
    2558:	blr	x8
    255c:	ldr	x1, [x19, #40]
    2560:	cbz	x1, 256c <BZ2_bzBuffToBuffCompress+0x24c>
    2564:	ldp	x8, x0, [sp, #64]
    2568:	blr	x8
    256c:	ldp	x8, x0, [sp, #64]
    2570:	ldr	x1, [sp, #48]
    2574:	blr	x8
    2578:	str	xzr, [sp, #48]
    257c:	mov	w19, #0xfffffff8            	// #-8
    2580:	b	23a0 <BZ2_bzBuffToBuffCompress+0x80>
    2584:	ldr	x1, [x19, #24]
    2588:	cbz	x1, 2594 <BZ2_bzBuffToBuffCompress+0x274>
    258c:	ldp	x8, x0, [sp, #64]
    2590:	blr	x8
    2594:	ldr	x1, [x19, #32]
    2598:	cbz	x1, 25a4 <BZ2_bzBuffToBuffCompress+0x284>
    259c:	ldp	x8, x0, [sp, #64]
    25a0:	blr	x8
    25a4:	ldr	x1, [x19, #40]
    25a8:	cbz	x1, 25b4 <BZ2_bzBuffToBuffCompress+0x294>
    25ac:	ldp	x8, x0, [sp, #64]
    25b0:	blr	x8
    25b4:	ldp	x8, x0, [sp, #64]
    25b8:	ldr	x1, [sp, #48]
    25bc:	blr	x8
    25c0:	mov	w19, wzr
    25c4:	b	24c8 <BZ2_bzBuffToBuffCompress+0x1a8>

00000000000025c8 <BZ2_bzBuffToBuffDecompress>:
    25c8:	sub	sp, sp, #0xa0
    25cc:	stp	x29, x30, [sp, #80]
    25d0:	str	x25, [sp, #96]
    25d4:	stp	x24, x23, [sp, #112]
    25d8:	stp	x22, x21, [sp, #128]
    25dc:	stp	x20, x19, [sp, #144]
    25e0:	add	x29, sp, #0x50
    25e4:	mov	w19, #0xfffffffe            	// #-2
    25e8:	cbz	x0, 27ec <BZ2_bzBuffToBuffDecompress+0x224>
    25ec:	mov	x20, x1
    25f0:	cbz	x1, 27ec <BZ2_bzBuffToBuffDecompress+0x224>
    25f4:	mov	x23, x2
    25f8:	cbz	x2, 27ec <BZ2_bzBuffToBuffDecompress+0x224>
    25fc:	mov	w25, w4
    2600:	cmp	w4, #0x1
    2604:	mov	w19, #0xfffffffe            	// #-2
    2608:	b.hi	27ec <BZ2_bzBuffToBuffDecompress+0x224>  // b.pmore
    260c:	mov	w22, w5
    2610:	cmp	w5, #0x4
    2614:	b.hi	27ec <BZ2_bzBuffToBuffDecompress+0x224>  // b.pmore
    2618:	adrp	x8, 0 <BZ2_bz__AssertH__fail>
    261c:	adrp	x9, 0 <BZ2_bz__AssertH__fail>
    2620:	mov	x24, x0
    2624:	add	x8, x8, #0x0
    2628:	add	x9, x9, #0x0
    262c:	mov	w0, #0xfa90                	// #64144
    2630:	mov	w21, w3
    2634:	str	x8, [sp, #56]
    2638:	stp	x9, xzr, [sp, #64]
    263c:	bl	0 <malloc>
    2640:	cbz	x0, 26dc <BZ2_bzBuffToBuffDecompress+0x114>
    2644:	mov	x8, sp
    2648:	mov	w9, #0xa                   	// #10
    264c:	movi	v0.2d, #0x0
    2650:	str	x0, [sp, #48]
    2654:	strb	w25, [x0, #44]
    2658:	str	wzr, [x0, #3188]
    265c:	str	xzr, [x0, #3152]
    2660:	str	xzr, [x0, #3168]
    2664:	str	xzr, [x0, #3160]
    2668:	stp	wzr, w22, [x0, #48]
    266c:	str	x23, [sp]
    2670:	str	x24, [sp, #24]
    2674:	str	x8, [x0]
    2678:	str	w9, [x0, #8]
    267c:	str	d0, [x0, #32]
    2680:	stur	d0, [sp, #12]
    2684:	stur	d0, [sp, #36]
    2688:	str	w21, [sp, #8]
    268c:	ldr	w8, [x20]
    2690:	mov	x0, sp
    2694:	str	w8, [sp, #32]
    2698:	bl	984 <BZ2_bzDecompress>
    269c:	cbz	w0, 26e4 <BZ2_bzBuffToBuffDecompress+0x11c>
    26a0:	mov	w19, w0
    26a4:	cmp	w0, #0x4
    26a8:	b.ne	2750 <BZ2_bzBuffToBuffDecompress+0x188>  // b.any
    26ac:	ldr	w8, [sp, #32]
    26b0:	ldr	w9, [x20]
    26b4:	sub	w8, w9, w8
    26b8:	str	w8, [x20]
    26bc:	ldr	x19, [sp, #48]
    26c0:	cbz	x19, 27ec <BZ2_bzBuffToBuffDecompress+0x224>
    26c4:	ldr	x8, [x19]
    26c8:	mov	x9, sp
    26cc:	cmp	x8, x9
    26d0:	b.eq	27a8 <BZ2_bzBuffToBuffDecompress+0x1e0>  // b.none
    26d4:	mov	w19, wzr
    26d8:	b	27ec <BZ2_bzBuffToBuffDecompress+0x224>
    26dc:	mov	w19, #0xfffffffd            	// #-3
    26e0:	b	27ec <BZ2_bzBuffToBuffDecompress+0x224>
    26e4:	ldr	x20, [sp, #48]
    26e8:	ldr	w19, [sp, #32]
    26ec:	cbz	x20, 2740 <BZ2_bzBuffToBuffDecompress+0x178>
    26f0:	ldr	x8, [x20]
    26f4:	mov	x9, sp
    26f8:	cmp	x8, x9
    26fc:	b.ne	2740 <BZ2_bzBuffToBuffDecompress+0x178>  // b.any
    2700:	ldr	x1, [x20, #3152]
    2704:	cbz	x1, 2710 <BZ2_bzBuffToBuffDecompress+0x148>
    2708:	ldp	x8, x0, [sp, #64]
    270c:	blr	x8
    2710:	ldr	x1, [x20, #3160]
    2714:	cbz	x1, 2720 <BZ2_bzBuffToBuffDecompress+0x158>
    2718:	ldp	x8, x0, [sp, #64]
    271c:	blr	x8
    2720:	ldr	x1, [x20, #3168]
    2724:	cbz	x1, 2730 <BZ2_bzBuffToBuffDecompress+0x168>
    2728:	ldp	x8, x0, [sp, #64]
    272c:	blr	x8
    2730:	ldp	x8, x0, [sp, #64]
    2734:	ldr	x1, [sp, #48]
    2738:	blr	x8
    273c:	str	xzr, [sp, #48]
    2740:	cmp	w19, #0x0
    2744:	mov	w8, #0xfffffff8            	// #-8
    2748:	cinc	w19, w8, ne  // ne = any
    274c:	b	27ec <BZ2_bzBuffToBuffDecompress+0x224>
    2750:	ldr	x20, [sp, #48]
    2754:	cbz	x20, 27ec <BZ2_bzBuffToBuffDecompress+0x224>
    2758:	ldr	x8, [x20]
    275c:	mov	x9, sp
    2760:	cmp	x8, x9
    2764:	b.ne	27ec <BZ2_bzBuffToBuffDecompress+0x224>  // b.any
    2768:	ldr	x1, [x20, #3152]
    276c:	cbz	x1, 2778 <BZ2_bzBuffToBuffDecompress+0x1b0>
    2770:	ldp	x8, x0, [sp, #64]
    2774:	blr	x8
    2778:	ldr	x1, [x20, #3160]
    277c:	cbz	x1, 2788 <BZ2_bzBuffToBuffDecompress+0x1c0>
    2780:	ldp	x8, x0, [sp, #64]
    2784:	blr	x8
    2788:	ldr	x1, [x20, #3168]
    278c:	cbz	x1, 2798 <BZ2_bzBuffToBuffDecompress+0x1d0>
    2790:	ldp	x8, x0, [sp, #64]
    2794:	blr	x8
    2798:	ldp	x8, x0, [sp, #64]
    279c:	ldr	x1, [sp, #48]
    27a0:	blr	x8
    27a4:	b	27e8 <BZ2_bzBuffToBuffDecompress+0x220>
    27a8:	ldr	x1, [x19, #3152]
    27ac:	cbz	x1, 27b8 <BZ2_bzBuffToBuffDecompress+0x1f0>
    27b0:	ldp	x8, x0, [sp, #64]
    27b4:	blr	x8
    27b8:	ldr	x1, [x19, #3160]
    27bc:	cbz	x1, 27c8 <BZ2_bzBuffToBuffDecompress+0x200>
    27c0:	ldp	x8, x0, [sp, #64]
    27c4:	blr	x8
    27c8:	ldr	x1, [x19, #3168]
    27cc:	cbz	x1, 27d8 <BZ2_bzBuffToBuffDecompress+0x210>
    27d0:	ldp	x8, x0, [sp, #64]
    27d4:	blr	x8
    27d8:	ldp	x8, x0, [sp, #64]
    27dc:	ldr	x1, [sp, #48]
    27e0:	blr	x8
    27e4:	mov	w19, wzr
    27e8:	str	xzr, [sp, #48]
    27ec:	mov	w0, w19
    27f0:	ldp	x20, x19, [sp, #144]
    27f4:	ldp	x22, x21, [sp, #128]
    27f8:	ldp	x24, x23, [sp, #112]
    27fc:	ldr	x25, [sp, #96]
    2800:	ldp	x29, x30, [sp, #80]
    2804:	add	sp, sp, #0xa0
    2808:	ret

000000000000280c <BZ2_bzopen>:
    280c:	mov	x2, x1
    2810:	mov	w1, #0xffffffff            	// #-1
    2814:	mov	w3, wzr
    2818:	b	281c <bzopen_or_bzdopen>

000000000000281c <bzopen_or_bzdopen>:
    281c:	stp	x29, x30, [sp, #-96]!
    2820:	str	x28, [sp, #16]
    2824:	stp	x26, x25, [sp, #32]
    2828:	stp	x24, x23, [sp, #48]
    282c:	stp	x22, x21, [sp, #64]
    2830:	stp	x20, x19, [sp, #80]
    2834:	mov	x29, sp
    2838:	sub	sp, sp, #0x1, lsl #12
    283c:	sub	sp, sp, #0x3a0
    2840:	strh	wzr, [sp, #16]
    2844:	str	xzr, [sp, #8]
    2848:	cbz	x2, 29f8 <bzopen_or_bzdopen+0x1dc>
    284c:	mov	w22, w3
    2850:	mov	x23, x2
    2854:	mov	w21, w1
    2858:	mov	x20, x0
    285c:	mov	w25, wzr
    2860:	mov	w19, wzr
    2864:	mov	w24, #0x9                   	// #9
    2868:	b	2874 <bzopen_or_bzdopen+0x58>
    286c:	mov	w19, #0x1                   	// #1
    2870:	add	x23, x23, #0x1
    2874:	ldrb	w26, [x23]
    2878:	cmp	w26, #0x72
    287c:	b.le	289c <bzopen_or_bzdopen+0x80>
    2880:	cmp	w26, #0x73
    2884:	b.eq	286c <bzopen_or_bzdopen+0x50>  // b.none
    2888:	cmp	w26, #0x77
    288c:	b.ne	28b0 <bzopen_or_bzdopen+0x94>  // b.any
    2890:	mov	w25, #0x1                   	// #1
    2894:	add	x23, x23, #0x1
    2898:	b	2874 <bzopen_or_bzdopen+0x58>
    289c:	b.ne	28ac <bzopen_or_bzdopen+0x90>  // b.any
    28a0:	mov	w25, wzr
    28a4:	add	x23, x23, #0x1
    28a8:	b	2874 <bzopen_or_bzdopen+0x58>
    28ac:	cbz	w26, 28d0 <bzopen_or_bzdopen+0xb4>
    28b0:	bl	0 <__ctype_b_loc>
    28b4:	ldr	x8, [x0]
    28b8:	sub	w9, w26, #0x30
    28bc:	add	x23, x23, #0x1
    28c0:	ldrh	w8, [x8, w26, uxtw #1]
    28c4:	tst	w8, #0x800
    28c8:	csel	w24, w24, w9, eq  // eq = none
    28cc:	b	2874 <bzopen_or_bzdopen+0x58>
    28d0:	add	x0, sp, #0x8
    28d4:	add	x23, sp, #0x8
    28d8:	bl	0 <strlen>
    28dc:	cmp	w25, #0x0
    28e0:	mov	w8, #0x72                  	// #114
    28e4:	mov	w9, #0x77                  	// #119
    28e8:	csel	w8, w9, w8, ne  // ne = any
    28ec:	strh	w8, [x23, x0]
    28f0:	add	x0, sp, #0x8
    28f4:	bl	0 <strlen>
    28f8:	mov	w8, #0x62                  	// #98
    28fc:	strh	w8, [x23, x0]
    2900:	cbz	w22, 291c <bzopen_or_bzdopen+0x100>
    2904:	add	x1, sp, #0x8
    2908:	mov	w0, w21
    290c:	bl	0 <fdopen>
    2910:	mov	x20, x0
    2914:	cbnz	x20, 2960 <bzopen_or_bzdopen+0x144>
    2918:	b	29f8 <bzopen_or_bzdopen+0x1dc>
    291c:	cbz	x20, 2940 <bzopen_or_bzdopen+0x124>
    2920:	ldrb	w8, [x20]
    2924:	cbz	w8, 2940 <bzopen_or_bzdopen+0x124>
    2928:	add	x1, sp, #0x8
    292c:	mov	x0, x20
    2930:	bl	0 <fopen64>
    2934:	mov	x20, x0
    2938:	cbnz	x20, 2960 <bzopen_or_bzdopen+0x144>
    293c:	b	29f8 <bzopen_or_bzdopen+0x1dc>
    2940:	adrp	x8, 0 <stdout>
    2944:	adrp	x9, 0 <stdin>
    2948:	add	x8, x8, #0x0
    294c:	add	x9, x9, #0x0
    2950:	cmp	w25, #0x0
    2954:	csel	x8, x8, x9, ne  // ne = any
    2958:	ldr	x20, [x8]
    295c:	cbz	x20, 29f8 <bzopen_or_bzdopen+0x1dc>
    2960:	cbz	w25, 2990 <bzopen_or_bzdopen+0x174>
    2964:	cmp	w24, #0x1
    2968:	csinc	w8, w24, wzr, gt
    296c:	cmp	w8, #0x9
    2970:	mov	w9, #0x9                   	// #9
    2974:	csel	w21, w8, w9, lt  // lt = tstop
    2978:	sub	w8, w21, #0x1
    297c:	cmp	w8, #0x9
    2980:	str	wzr, [x29, #28]
    2984:	b.cc	29b8 <bzopen_or_bzdopen+0x19c>  // b.lo, b.ul, b.last
    2988:	mov	w8, #0xfffffffe            	// #-2
    298c:	b	29c8 <bzopen_or_bzdopen+0x1ac>
    2990:	add	x0, x29, #0x1c
    2994:	add	x4, sp, #0x18
    2998:	mov	x1, x20
    299c:	mov	w2, wzr
    29a0:	mov	w3, w19
    29a4:	mov	w5, wzr
    29a8:	bl	1df4 <BZ2_bzReadOpen>
    29ac:	mov	x19, x0
    29b0:	cbnz	x0, 29fc <bzopen_or_bzdopen+0x1e0>
    29b4:	b	29cc <bzopen_or_bzdopen+0x1b0>
    29b8:	mov	x0, x20
    29bc:	bl	0 <ferror>
    29c0:	cbz	w0, 2a24 <bzopen_or_bzdopen+0x208>
    29c4:	mov	w8, #0xfffffffa            	// #-6
    29c8:	str	w8, [x29, #28]
    29cc:	adrp	x8, 0 <stdin>
    29d0:	ldr	x8, [x8]
    29d4:	mov	x19, xzr
    29d8:	cmp	x20, x8
    29dc:	b.eq	29fc <bzopen_or_bzdopen+0x1e0>  // b.none
    29e0:	adrp	x8, 0 <stdout>
    29e4:	ldr	x8, [x8]
    29e8:	cmp	x20, x8
    29ec:	b.eq	29fc <bzopen_or_bzdopen+0x1e0>  // b.none
    29f0:	mov	x0, x20
    29f4:	bl	0 <fclose>
    29f8:	mov	x19, xzr
    29fc:	mov	x0, x19
    2a00:	add	sp, sp, #0x1, lsl #12
    2a04:	add	sp, sp, #0x3a0
    2a08:	ldp	x20, x19, [sp, #80]
    2a0c:	ldp	x22, x21, [sp, #64]
    2a10:	ldp	x24, x23, [sp, #48]
    2a14:	ldp	x26, x25, [sp, #32]
    2a18:	ldr	x28, [sp, #16]
    2a1c:	ldp	x29, x30, [sp], #96
    2a20:	ret
    2a24:	mov	w0, #0x13f0                	// #5104
    2a28:	bl	0 <malloc>
    2a2c:	cbz	x0, 2a90 <bzopen_or_bzdopen+0x274>
    2a30:	mov	w8, #0x1394                	// #5012
    2a34:	mov	w9, #0x1398                	// #5016
    2a38:	mov	x19, x0
    2a3c:	str	wzr, [x0, #5096]
    2a40:	mov	w22, #0x1                   	// #1
    2a44:	movi	v0.2d, #0x0
    2a48:	add	x23, x0, x8
    2a4c:	add	x0, x0, x9
    2a50:	mov	w3, #0x1e                  	// #30
    2a54:	mov	w1, w21
    2a58:	mov	w2, wzr
    2a5c:	str	wzr, [x29, #28]
    2a60:	strb	wzr, [x23, #88]
    2a64:	str	wzr, [x19, #5008]
    2a68:	str	x20, [x19]
    2a6c:	strb	w22, [x23]
    2a70:	str	xzr, [x19, #5088]
    2a74:	str	q0, [x19, #5072]
    2a78:	bl	68 <BZ2_bzCompressInit>
    2a7c:	cbz	w0, 2a98 <bzopen_or_bzdopen+0x27c>
    2a80:	str	w0, [x29, #28]
    2a84:	mov	x0, x19
    2a88:	bl	0 <free>
    2a8c:	b	29cc <bzopen_or_bzdopen+0x1b0>
    2a90:	mov	w8, #0xfffffffd            	// #-3
    2a94:	b	29c8 <bzopen_or_bzdopen+0x1ac>
    2a98:	str	wzr, [x19, #5024]
    2a9c:	strb	w22, [x23, #88]
    2aa0:	b	29fc <bzopen_or_bzdopen+0x1e0>

0000000000002aa4 <BZ2_bzdopen>:
    2aa4:	mov	x2, x1
    2aa8:	mov	w3, #0x1                   	// #1
    2aac:	mov	w1, w0
    2ab0:	mov	x0, xzr
    2ab4:	b	281c <bzopen_or_bzdopen>

0000000000002ab8 <BZ2_bzread>:
    2ab8:	sub	sp, sp, #0x20
    2abc:	stp	x29, x30, [sp, #16]
    2ac0:	add	x29, sp, #0x10
    2ac4:	ldr	w9, [x0, #5096]
    2ac8:	cmp	w9, #0x4
    2acc:	b.ne	2ad8 <BZ2_bzread+0x20>  // b.any
    2ad0:	mov	w0, wzr
    2ad4:	b	2afc <BZ2_bzread+0x44>
    2ad8:	mov	x8, x0
    2adc:	mov	w3, w2
    2ae0:	mov	x2, x1
    2ae4:	sub	x0, x29, #0x4
    2ae8:	mov	x1, x8
    2aec:	bl	20bc <BZ2_bzRead>
    2af0:	ldur	w8, [x29, #-4]
    2af4:	tst	w8, #0xfffffffb
    2af8:	csinv	w0, w0, wzr, eq  // eq = none
    2afc:	ldp	x29, x30, [sp, #16]
    2b00:	add	sp, sp, #0x20
    2b04:	ret

0000000000002b08 <BZ2_bzwrite>:
    2b08:	stp	x29, x30, [sp, #-32]!
    2b0c:	str	x19, [sp, #16]
    2b10:	mov	x29, sp
    2b14:	mov	w19, w2
    2b18:	mov	x2, x1
    2b1c:	mov	x1, x0
    2b20:	add	x0, x29, #0x1c
    2b24:	mov	w3, w19
    2b28:	bl	1948 <BZ2_bzWrite>
    2b2c:	ldr	w8, [x29, #28]
    2b30:	cmp	w8, #0x0
    2b34:	csinv	w0, w19, wzr, eq  // eq = none
    2b38:	ldr	x19, [sp, #16]
    2b3c:	ldp	x29, x30, [sp], #32
    2b40:	ret

0000000000002b44 <BZ2_bzflush>:
    2b44:	mov	w0, wzr
    2b48:	ret

0000000000002b4c <BZ2_bzclose>:
    2b4c:	stp	x29, x30, [sp, #-48]!
    2b50:	str	x21, [sp, #16]
    2b54:	stp	x20, x19, [sp, #32]
    2b58:	mov	x29, sp
    2b5c:	cbz	x0, 2c6c <BZ2_bzclose+0x120>
    2b60:	mov	w8, #0x1394                	// #5012
    2b64:	add	x8, x0, x8
    2b68:	ldrb	w9, [x8]
    2b6c:	ldr	x19, [x0]
    2b70:	mov	x20, x0
    2b74:	cbz	w9, 2bc4 <BZ2_bzclose+0x78>
    2b78:	add	x0, x29, #0x1c
    2b7c:	mov	x1, x20
    2b80:	mov	w2, wzr
    2b84:	mov	x3, xzr
    2b88:	mov	x4, xzr
    2b8c:	mov	x5, xzr
    2b90:	mov	x6, xzr
    2b94:	bl	1ae8 <BZ2_bzWriteClose64>
    2b98:	ldr	w8, [x29, #28]
    2b9c:	cbz	w8, 2c44 <BZ2_bzclose+0xf8>
    2ba0:	mov	w2, #0x1                   	// #1
    2ba4:	mov	x0, xzr
    2ba8:	mov	x1, x20
    2bac:	mov	x3, xzr
    2bb0:	mov	x4, xzr
    2bb4:	mov	x5, xzr
    2bb8:	mov	x6, xzr
    2bbc:	bl	1ae8 <BZ2_bzWriteClose64>
    2bc0:	b	2c44 <BZ2_bzclose+0xf8>
    2bc4:	str	wzr, [x29, #28]
    2bc8:	str	wzr, [x20, #5096]
    2bcc:	ldrb	w8, [x8, #88]
    2bd0:	cbz	w8, 2c3c <BZ2_bzclose+0xf0>
    2bd4:	ldr	x21, [x20, #5064]
    2bd8:	cbz	x21, 2c3c <BZ2_bzclose+0xf0>
    2bdc:	ldr	x8, [x21]
    2be0:	mov	w9, #0x1398                	// #5016
    2be4:	add	x9, x20, x9
    2be8:	cmp	x8, x9
    2bec:	b.ne	2c3c <BZ2_bzclose+0xf0>  // b.any
    2bf0:	ldr	x1, [x21, #3152]
    2bf4:	cbz	x1, 2c04 <BZ2_bzclose+0xb8>
    2bf8:	ldr	x8, [x20, #5080]
    2bfc:	ldr	x0, [x20, #5088]
    2c00:	blr	x8
    2c04:	ldr	x1, [x21, #3160]
    2c08:	cbz	x1, 2c18 <BZ2_bzclose+0xcc>
    2c0c:	ldr	x8, [x20, #5080]
    2c10:	ldr	x0, [x20, #5088]
    2c14:	blr	x8
    2c18:	ldr	x1, [x21, #3168]
    2c1c:	cbz	x1, 2c2c <BZ2_bzclose+0xe0>
    2c20:	ldr	x8, [x20, #5080]
    2c24:	ldr	x0, [x20, #5088]
    2c28:	blr	x8
    2c2c:	ldr	x8, [x20, #5080]
    2c30:	ldr	x0, [x20, #5088]
    2c34:	ldr	x1, [x20, #5064]
    2c38:	blr	x8
    2c3c:	mov	x0, x20
    2c40:	bl	0 <free>
    2c44:	adrp	x8, 0 <stdin>
    2c48:	ldr	x8, [x8]
    2c4c:	cmp	x19, x8
    2c50:	b.eq	2c6c <BZ2_bzclose+0x120>  // b.none
    2c54:	adrp	x8, 0 <stdout>
    2c58:	ldr	x8, [x8]
    2c5c:	cmp	x19, x8
    2c60:	b.eq	2c6c <BZ2_bzclose+0x120>  // b.none
    2c64:	mov	x0, x19
    2c68:	bl	0 <fclose>
    2c6c:	ldp	x20, x19, [sp, #32]
    2c70:	ldr	x21, [sp, #16]
    2c74:	ldp	x29, x30, [sp], #48
    2c78:	ret

0000000000002c7c <BZ2_bzerror>:
    2c7c:	ldr	w8, [x0, #5096]
    2c80:	adrp	x9, 0 <BZ2_bz__AssertH__fail>
    2c84:	add	x9, x9, #0x0
    2c88:	and	w8, w8, w8, asr #31
    2c8c:	sub	x9, x9, w8, sxtw #3
    2c90:	ldr	x0, [x9]
    2c94:	str	w8, [x1]
    2c98:	ret

0000000000002c9c <add_pair_to_block>:
    2c9c:	ldp	w8, w9, [x0, #92]
    2ca0:	sxtw	x9, w9
    2ca4:	cmp	w9, #0x1
    2ca8:	b.lt	2cdc <add_pair_to_block+0x40>  // b.tstop
    2cac:	ldr	w11, [x0, #648]
    2cb0:	adrp	x13, 0 <BZ2_crc32Table>
    2cb4:	mov	w10, wzr
    2cb8:	and	w12, w8, #0xff
    2cbc:	add	x13, x13, #0x0
    2cc0:	eor	w14, w12, w11, lsr #24
    2cc4:	ldr	w14, [x13, w14, uxtw #2]
    2cc8:	add	w10, w10, #0x1
    2ccc:	cmp	w10, w9
    2cd0:	eor	w11, w14, w11, lsl #8
    2cd4:	str	w11, [x0, #648]
    2cd8:	b.lt	2cc0 <add_pair_to_block+0x24>  // b.tstop
    2cdc:	add	x10, x0, x8
    2ce0:	mov	w11, #0x1                   	// #1
    2ce4:	cmp	w9, #0x3
    2ce8:	strb	w11, [x10, #128]
    2cec:	b.eq	2d0c <add_pair_to_block+0x70>  // b.none
    2cf0:	cmp	w9, #0x2
    2cf4:	b.eq	2d48 <add_pair_to_block+0xac>  // b.none
    2cf8:	cmp	w9, #0x1
    2cfc:	b.ne	2d70 <add_pair_to_block+0xd4>  // b.any
    2d00:	ldr	w10, [x0, #108]!
    2d04:	sub	x9, x0, #0x2c
    2d08:	b	2ddc <add_pair_to_block+0x140>
    2d0c:	ldr	x9, [x0, #64]!
    2d10:	mov	x11, x0
    2d14:	ldrsw	x10, [x11, #44]!
    2d18:	strb	w8, [x9, x10]
    2d1c:	ldrsw	x9, [x11]
    2d20:	add	x9, x9, #0x1
    2d24:	str	w9, [x11]
    2d28:	ldr	x10, [x0]
    2d2c:	strb	w8, [x10, x9]
    2d30:	ldr	w9, [x11]
    2d34:	add	w10, w9, #0x1
    2d38:	str	w10, [x11]
    2d3c:	mov	x9, x0
    2d40:	mov	x0, x11
    2d44:	b	2ddc <add_pair_to_block+0x140>
    2d48:	ldr	x9, [x0, #64]!
    2d4c:	mov	x11, x0
    2d50:	ldrsw	x10, [x11, #44]!
    2d54:	strb	w8, [x9, x10]
    2d58:	ldr	w10, [x11]
    2d5c:	mov	x9, x0
    2d60:	mov	x0, x11
    2d64:	add	w10, w10, #0x1
    2d68:	str	w10, [x11]
    2d6c:	b	2ddc <add_pair_to_block+0x140>
    2d70:	add	x9, x9, x0
    2d74:	mov	w10, #0x1                   	// #1
    2d78:	strb	w10, [x9, #124]
    2d7c:	ldrsw	x10, [x0, #108]!
    2d80:	mov	x9, x0
    2d84:	ldr	x11, [x9, #-44]!
    2d88:	strb	w8, [x11, x10]
    2d8c:	ldrsw	x10, [x0]
    2d90:	add	x10, x10, #0x1
    2d94:	str	w10, [x0]
    2d98:	ldr	x11, [x9]
    2d9c:	strb	w8, [x11, x10]
    2da0:	ldrsw	x10, [x0]
    2da4:	add	x10, x10, #0x1
    2da8:	str	w10, [x0]
    2dac:	ldr	x11, [x9]
    2db0:	strb	w8, [x11, x10]
    2db4:	ldrsw	x10, [x0]
    2db8:	add	x10, x10, #0x1
    2dbc:	str	w10, [x0]
    2dc0:	ldr	x11, [x9]
    2dc4:	strb	w8, [x11, x10]
    2dc8:	ldr	w8, [x0]
    2dcc:	ldurb	w11, [x0, #-12]
    2dd0:	add	w10, w8, #0x1
    2dd4:	sub	w8, w11, #0x4
    2dd8:	str	w10, [x0]
    2ddc:	ldr	x9, [x9]
    2de0:	strb	w8, [x9, w10, sxtw]
    2de4:	ldr	w8, [x0]
    2de8:	add	w8, w8, #0x1
    2dec:	str	w8, [x0]
    2df0:	ret
