In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libgcc_eh.a_clang_-O0:

unwind-dw2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <aarch64_vg>:
       0:	cntd	x0
       4:	ret

0000000000000008 <size_of_encoded_value>:
       8:	stp	x29, x30, [sp, #-32]!
       c:	mov	x29, sp
      10:	strb	w0, [sp, #31]
      14:	ldrb	w0, [sp, #31]
      18:	cmp	w0, #0xff
      1c:	b.ne	28 <size_of_encoded_value+0x20>  // b.any
      20:	mov	w0, #0x0                   	// #0
      24:	b	88 <size_of_encoded_value+0x80>
      28:	ldrb	w0, [sp, #31]
      2c:	and	w0, w0, #0x7
      30:	cmp	w0, #0x4
      34:	b.eq	7c <size_of_encoded_value+0x74>  // b.none
      38:	cmp	w0, #0x4
      3c:	b.gt	84 <size_of_encoded_value+0x7c>
      40:	cmp	w0, #0x3
      44:	b.eq	74 <size_of_encoded_value+0x6c>  // b.none
      48:	cmp	w0, #0x3
      4c:	b.gt	84 <size_of_encoded_value+0x7c>
      50:	cmp	w0, #0x0
      54:	b.eq	64 <size_of_encoded_value+0x5c>  // b.none
      58:	cmp	w0, #0x2
      5c:	b.eq	6c <size_of_encoded_value+0x64>  // b.none
      60:	b	84 <size_of_encoded_value+0x7c>
      64:	mov	w0, #0x8                   	// #8
      68:	b	88 <size_of_encoded_value+0x80>
      6c:	mov	w0, #0x2                   	// #2
      70:	b	88 <size_of_encoded_value+0x80>
      74:	mov	w0, #0x4                   	// #4
      78:	b	88 <size_of_encoded_value+0x80>
      7c:	mov	w0, #0x8                   	// #8
      80:	b	88 <size_of_encoded_value+0x80>
      84:	bl	0 <abort>
      88:	ldp	x29, x30, [sp], #32
      8c:	ret

0000000000000090 <base_of_encoded_value>:
      90:	stp	x29, x30, [sp, #-32]!
      94:	mov	x29, sp
      98:	strb	w0, [sp, #31]
      9c:	str	x1, [sp, #16]
      a0:	ldrb	w0, [sp, #31]
      a4:	cmp	w0, #0xff
      a8:	b.ne	b4 <base_of_encoded_value+0x24>  // b.any
      ac:	mov	x0, #0x0                   	// #0
      b0:	b	13c <base_of_encoded_value+0xac>
      b4:	ldrb	w0, [sp, #31]
      b8:	and	w0, w0, #0x70
      bc:	cmp	w0, #0x50
      c0:	b.eq	10c <base_of_encoded_value+0x7c>  // b.none
      c4:	cmp	w0, #0x50
      c8:	b.gt	138 <base_of_encoded_value+0xa8>
      cc:	cmp	w0, #0x40
      d0:	b.eq	12c <base_of_encoded_value+0x9c>  // b.none
      d4:	cmp	w0, #0x40
      d8:	b.gt	138 <base_of_encoded_value+0xa8>
      dc:	cmp	w0, #0x30
      e0:	b.eq	120 <base_of_encoded_value+0x90>  // b.none
      e4:	cmp	w0, #0x30
      e8:	b.gt	138 <base_of_encoded_value+0xa8>
      ec:	cmp	w0, #0x20
      f0:	b.eq	114 <base_of_encoded_value+0x84>  // b.none
      f4:	cmp	w0, #0x20
      f8:	b.gt	138 <base_of_encoded_value+0xa8>
      fc:	cmp	w0, #0x0
     100:	b.eq	10c <base_of_encoded_value+0x7c>  // b.none
     104:	cmp	w0, #0x10
     108:	b.ne	138 <base_of_encoded_value+0xa8>  // b.any
     10c:	mov	x0, #0x0                   	// #0
     110:	b	13c <base_of_encoded_value+0xac>
     114:	ldr	x0, [sp, #16]
     118:	bl	bb0 <_Unwind_GetTextRelBase>
     11c:	b	13c <base_of_encoded_value+0xac>
     120:	ldr	x0, [sp, #16]
     124:	bl	b98 <_Unwind_GetDataRelBase>
     128:	b	13c <base_of_encoded_value+0xac>
     12c:	ldr	x0, [sp, #16]
     130:	bl	b40 <_Unwind_GetRegionStart>
     134:	b	13c <base_of_encoded_value+0xac>
     138:	bl	0 <abort>
     13c:	ldp	x29, x30, [sp], #32
     140:	ret

0000000000000144 <read_uleb128>:
     144:	sub	sp, sp, #0x30
     148:	str	x0, [sp, #8]
     14c:	str	x1, [sp]
     150:	str	wzr, [sp, #44]
     154:	str	xzr, [sp, #32]
     158:	ldr	x0, [sp, #8]
     15c:	add	x1, x0, #0x1
     160:	str	x1, [sp, #8]
     164:	ldrb	w0, [x0]
     168:	strb	w0, [sp, #31]
     16c:	ldrb	w0, [sp, #31]
     170:	and	x1, x0, #0x7f
     174:	ldr	w0, [sp, #44]
     178:	lsl	x0, x1, x0
     17c:	ldr	x1, [sp, #32]
     180:	orr	x0, x1, x0
     184:	str	x0, [sp, #32]
     188:	ldr	w0, [sp, #44]
     18c:	add	w0, w0, #0x7
     190:	str	w0, [sp, #44]
     194:	ldrsb	w0, [sp, #31]
     198:	cmp	w0, #0x0
     19c:	b.lt	158 <read_uleb128+0x14>  // b.tstop
     1a0:	ldr	x0, [sp]
     1a4:	ldr	x1, [sp, #32]
     1a8:	str	x1, [x0]
     1ac:	ldr	x0, [sp, #8]
     1b0:	add	sp, sp, #0x30
     1b4:	ret

00000000000001b8 <read_sleb128>:
     1b8:	sub	sp, sp, #0x30
     1bc:	str	x0, [sp, #8]
     1c0:	str	x1, [sp]
     1c4:	str	wzr, [sp, #44]
     1c8:	str	xzr, [sp, #32]
     1cc:	ldr	x0, [sp, #8]
     1d0:	add	x1, x0, #0x1
     1d4:	str	x1, [sp, #8]
     1d8:	ldrb	w0, [x0]
     1dc:	strb	w0, [sp, #31]
     1e0:	ldrb	w0, [sp, #31]
     1e4:	and	x1, x0, #0x7f
     1e8:	ldr	w0, [sp, #44]
     1ec:	lsl	x0, x1, x0
     1f0:	ldr	x1, [sp, #32]
     1f4:	orr	x0, x1, x0
     1f8:	str	x0, [sp, #32]
     1fc:	ldr	w0, [sp, #44]
     200:	add	w0, w0, #0x7
     204:	str	w0, [sp, #44]
     208:	ldrsb	w0, [sp, #31]
     20c:	cmp	w0, #0x0
     210:	b.lt	1cc <read_sleb128+0x14>  // b.tstop
     214:	ldr	w0, [sp, #44]
     218:	cmp	w0, #0x3f
     21c:	b.hi	24c <read_sleb128+0x94>  // b.pmore
     220:	ldrb	w0, [sp, #31]
     224:	and	w0, w0, #0x40
     228:	cmp	w0, #0x0
     22c:	b.eq	24c <read_sleb128+0x94>  // b.none
     230:	ldr	w0, [sp, #44]
     234:	mov	x1, #0x1                   	// #1
     238:	lsl	x0, x1, x0
     23c:	neg	x0, x0
     240:	ldr	x1, [sp, #32]
     244:	orr	x0, x1, x0
     248:	str	x0, [sp, #32]
     24c:	ldr	x1, [sp, #32]
     250:	ldr	x0, [sp]
     254:	str	x1, [x0]
     258:	ldr	x0, [sp, #8]
     25c:	add	sp, sp, #0x30
     260:	ret

0000000000000264 <read_encoded_value_with_base>:
     264:	stp	x29, x30, [sp, #-96]!
     268:	mov	x29, sp
     26c:	strb	w0, [sp, #47]
     270:	str	x1, [sp, #32]
     274:	str	x2, [sp, #24]
     278:	str	x3, [sp, #16]
     27c:	ldr	x0, [sp, #24]
     280:	str	x0, [sp, #80]
     284:	ldrb	w0, [sp, #47]
     288:	cmp	w0, #0x50
     28c:	b.ne	2c4 <read_encoded_value_with_base+0x60>  // b.any
     290:	ldr	x0, [sp, #24]
     294:	str	x0, [sp, #72]
     298:	ldr	x0, [sp, #72]
     29c:	add	x0, x0, #0x7
     2a0:	and	x0, x0, #0xfffffffffffffff8
     2a4:	str	x0, [sp, #72]
     2a8:	ldr	x0, [sp, #72]
     2ac:	ldr	x0, [x0]
     2b0:	str	x0, [sp, #88]
     2b4:	ldr	x0, [sp, #72]
     2b8:	add	x0, x0, #0x8
     2bc:	str	x0, [sp, #24]
     2c0:	b	4b4 <read_encoded_value_with_base+0x250>
     2c4:	ldrb	w0, [sp, #47]
     2c8:	and	w0, w0, #0xf
     2cc:	cmp	w0, #0xc
     2d0:	b.eq	448 <read_encoded_value_with_base+0x1e4>  // b.none
     2d4:	cmp	w0, #0xc
     2d8:	b.gt	464 <read_encoded_value_with_base+0x200>
     2dc:	cmp	w0, #0xb
     2e0:	b.eq	428 <read_encoded_value_with_base+0x1c4>  // b.none
     2e4:	cmp	w0, #0xb
     2e8:	b.gt	464 <read_encoded_value_with_base+0x200>
     2ec:	cmp	w0, #0xa
     2f0:	b.eq	408 <read_encoded_value_with_base+0x1a4>  // b.none
     2f4:	cmp	w0, #0xa
     2f8:	b.gt	464 <read_encoded_value_with_base+0x200>
     2fc:	cmp	w0, #0x9
     300:	b.eq	38c <read_encoded_value_with_base+0x128>  // b.none
     304:	cmp	w0, #0x9
     308:	b.gt	464 <read_encoded_value_with_base+0x200>
     30c:	cmp	w0, #0x4
     310:	b.eq	3ec <read_encoded_value_with_base+0x188>  // b.none
     314:	cmp	w0, #0x4
     318:	b.gt	464 <read_encoded_value_with_base+0x200>
     31c:	cmp	w0, #0x3
     320:	b.eq	3cc <read_encoded_value_with_base+0x168>  // b.none
     324:	cmp	w0, #0x3
     328:	b.gt	464 <read_encoded_value_with_base+0x200>
     32c:	cmp	w0, #0x2
     330:	b.eq	3ac <read_encoded_value_with_base+0x148>  // b.none
     334:	cmp	w0, #0x2
     338:	b.gt	464 <read_encoded_value_with_base+0x200>
     33c:	cmp	w0, #0x0
     340:	b.eq	350 <read_encoded_value_with_base+0xec>  // b.none
     344:	cmp	w0, #0x1
     348:	b.eq	36c <read_encoded_value_with_base+0x108>  // b.none
     34c:	b	464 <read_encoded_value_with_base+0x200>
     350:	ldr	x0, [sp, #80]
     354:	ldr	x0, [x0]
     358:	str	x0, [sp, #88]
     35c:	ldr	x0, [sp, #24]
     360:	add	x0, x0, #0x8
     364:	str	x0, [sp, #24]
     368:	b	468 <read_encoded_value_with_base+0x204>
     36c:	add	x0, sp, #0x40
     370:	mov	x1, x0
     374:	ldr	x0, [sp, #24]
     378:	bl	144 <read_uleb128>
     37c:	str	x0, [sp, #24]
     380:	ldr	x0, [sp, #64]
     384:	str	x0, [sp, #88]
     388:	b	468 <read_encoded_value_with_base+0x204>
     38c:	add	x0, sp, #0x38
     390:	mov	x1, x0
     394:	ldr	x0, [sp, #24]
     398:	bl	1b8 <read_sleb128>
     39c:	str	x0, [sp, #24]
     3a0:	ldr	x0, [sp, #56]
     3a4:	str	x0, [sp, #88]
     3a8:	b	468 <read_encoded_value_with_base+0x204>
     3ac:	ldr	x0, [sp, #80]
     3b0:	ldrh	w0, [x0]
     3b4:	and	x0, x0, #0xffff
     3b8:	str	x0, [sp, #88]
     3bc:	ldr	x0, [sp, #24]
     3c0:	add	x0, x0, #0x2
     3c4:	str	x0, [sp, #24]
     3c8:	b	468 <read_encoded_value_with_base+0x204>
     3cc:	ldr	x0, [sp, #80]
     3d0:	ldr	w0, [x0]
     3d4:	mov	w0, w0
     3d8:	str	x0, [sp, #88]
     3dc:	ldr	x0, [sp, #24]
     3e0:	add	x0, x0, #0x4
     3e4:	str	x0, [sp, #24]
     3e8:	b	468 <read_encoded_value_with_base+0x204>
     3ec:	ldr	x0, [sp, #80]
     3f0:	ldr	x0, [x0]
     3f4:	str	x0, [sp, #88]
     3f8:	ldr	x0, [sp, #24]
     3fc:	add	x0, x0, #0x8
     400:	str	x0, [sp, #24]
     404:	b	468 <read_encoded_value_with_base+0x204>
     408:	ldr	x0, [sp, #80]
     40c:	ldrsh	w0, [x0]
     410:	sxth	x0, w0
     414:	str	x0, [sp, #88]
     418:	ldr	x0, [sp, #24]
     41c:	add	x0, x0, #0x2
     420:	str	x0, [sp, #24]
     424:	b	468 <read_encoded_value_with_base+0x204>
     428:	ldr	x0, [sp, #80]
     42c:	ldr	w0, [x0]
     430:	sxtw	x0, w0
     434:	str	x0, [sp, #88]
     438:	ldr	x0, [sp, #24]
     43c:	add	x0, x0, #0x4
     440:	str	x0, [sp, #24]
     444:	b	468 <read_encoded_value_with_base+0x204>
     448:	ldr	x0, [sp, #80]
     44c:	ldr	x0, [x0]
     450:	str	x0, [sp, #88]
     454:	ldr	x0, [sp, #24]
     458:	add	x0, x0, #0x8
     45c:	str	x0, [sp, #24]
     460:	b	468 <read_encoded_value_with_base+0x204>
     464:	bl	0 <abort>
     468:	ldr	x0, [sp, #88]
     46c:	cmp	x0, #0x0
     470:	b.eq	4b4 <read_encoded_value_with_base+0x250>  // b.none
     474:	ldrb	w0, [sp, #47]
     478:	and	w0, w0, #0x70
     47c:	cmp	w0, #0x10
     480:	b.ne	48c <read_encoded_value_with_base+0x228>  // b.any
     484:	ldr	x0, [sp, #80]
     488:	b	490 <read_encoded_value_with_base+0x22c>
     48c:	ldr	x0, [sp, #32]
     490:	ldr	x1, [sp, #88]
     494:	add	x0, x1, x0
     498:	str	x0, [sp, #88]
     49c:	ldrsb	w0, [sp, #47]
     4a0:	cmp	w0, #0x0
     4a4:	b.ge	4b4 <read_encoded_value_with_base+0x250>  // b.tcont
     4a8:	ldr	x0, [sp, #88]
     4ac:	ldr	x0, [x0]
     4b0:	str	x0, [sp, #88]
     4b4:	ldr	x0, [sp, #16]
     4b8:	ldr	x1, [sp, #88]
     4bc:	str	x1, [x0]
     4c0:	ldr	x0, [sp, #24]
     4c4:	ldp	x29, x30, [sp], #96
     4c8:	ret

00000000000004cc <read_encoded_value>:
     4cc:	stp	x29, x30, [sp, #-48]!
     4d0:	mov	x29, sp
     4d4:	str	x0, [sp, #40]
     4d8:	strb	w1, [sp, #39]
     4dc:	str	x2, [sp, #24]
     4e0:	str	x3, [sp, #16]
     4e4:	ldr	x1, [sp, #40]
     4e8:	ldrb	w0, [sp, #39]
     4ec:	bl	90 <base_of_encoded_value>
     4f0:	ldr	x3, [sp, #16]
     4f4:	ldr	x2, [sp, #24]
     4f8:	mov	x1, x0
     4fc:	ldrb	w0, [sp, #39]
     500:	bl	264 <read_encoded_value_with_base>
     504:	ldp	x29, x30, [sp], #48
     508:	ret

000000000000050c <get_cie>:
     50c:	sub	sp, sp, #0x10
     510:	str	x0, [sp, #8]
     514:	ldr	x0, [sp, #8]
     518:	add	x1, x0, #0x4
     51c:	ldr	x0, [sp, #8]
     520:	ldr	w0, [x0, #4]
     524:	sxtw	x0, w0
     528:	neg	x0, x0
     52c:	add	x0, x1, x0
     530:	add	sp, sp, #0x10
     534:	ret

0000000000000538 <next_fde>:
     538:	sub	sp, sp, #0x10
     53c:	str	x0, [sp, #8]
     540:	ldr	x0, [sp, #8]
     544:	ldr	w0, [x0]
     548:	mov	w0, w0
     54c:	add	x0, x0, #0x4
     550:	ldr	x1, [sp, #8]
     554:	add	x0, x1, x0
     558:	add	sp, sp, #0x10
     55c:	ret

0000000000000560 <__gthread_active_p>:
     560:	adrp	x0, 0 <aarch64_vg>
     564:	add	x0, x0, #0x0
     568:	ldr	x0, [x0]
     56c:	cmp	x0, #0x0
     570:	cset	w0, ne  // ne = any
     574:	and	w0, w0, #0xff
     578:	ret

000000000000057c <__gthread_once>:
     57c:	stp	x29, x30, [sp, #-32]!
     580:	mov	x29, sp
     584:	str	x0, [sp, #24]
     588:	str	x1, [sp, #16]
     58c:	bl	560 <__gthread_active_p>
     590:	cmp	w0, #0x0
     594:	b.eq	5a8 <__gthread_once+0x2c>  // b.none
     598:	ldr	x1, [sp, #16]
     59c:	ldr	x0, [sp, #24]
     5a0:	bl	0 <pthread_once>
     5a4:	b	5ac <__gthread_once+0x30>
     5a8:	mov	w0, #0xffffffff            	// #-1
     5ac:	ldp	x29, x30, [sp], #32
     5b0:	ret

00000000000005b4 <_Unwind_Get_Unwind_Word>:
     5b4:	sub	sp, sp, #0x10
     5b8:	str	x0, [sp, #8]
     5bc:	ldr	x0, [sp, #8]
     5c0:	add	sp, sp, #0x10
     5c4:	ret

00000000000005c8 <_Unwind_Get_Unwind_Context_Reg_Val>:
     5c8:	sub	sp, sp, #0x10
     5cc:	str	x0, [sp, #8]
     5d0:	ldr	x0, [sp, #8]
     5d4:	add	sp, sp, #0x10
     5d8:	ret

00000000000005dc <read_pointer>:
     5dc:	sub	sp, sp, #0x20
     5e0:	str	x0, [sp, #8]
     5e4:	ldr	x0, [sp, #8]
     5e8:	str	x0, [sp, #24]
     5ec:	ldr	x0, [sp, #24]
     5f0:	ldr	x0, [x0]
     5f4:	add	sp, sp, #0x20
     5f8:	ret

00000000000005fc <read_1u>:
     5fc:	sub	sp, sp, #0x10
     600:	str	x0, [sp, #8]
     604:	ldr	x0, [sp, #8]
     608:	ldrb	w0, [x0]
     60c:	add	sp, sp, #0x10
     610:	ret

0000000000000614 <read_1s>:
     614:	sub	sp, sp, #0x10
     618:	str	x0, [sp, #8]
     61c:	ldr	x0, [sp, #8]
     620:	ldrsb	w0, [x0]
     624:	add	sp, sp, #0x10
     628:	ret

000000000000062c <read_2u>:
     62c:	sub	sp, sp, #0x20
     630:	str	x0, [sp, #8]
     634:	ldr	x0, [sp, #8]
     638:	str	x0, [sp, #24]
     63c:	ldr	x0, [sp, #24]
     640:	ldrh	w0, [x0]
     644:	add	sp, sp, #0x20
     648:	ret

000000000000064c <read_2s>:
     64c:	sub	sp, sp, #0x20
     650:	str	x0, [sp, #8]
     654:	ldr	x0, [sp, #8]
     658:	str	x0, [sp, #24]
     65c:	ldr	x0, [sp, #24]
     660:	ldrsh	w0, [x0]
     664:	add	sp, sp, #0x20
     668:	ret

000000000000066c <read_4u>:
     66c:	sub	sp, sp, #0x20
     670:	str	x0, [sp, #8]
     674:	ldr	x0, [sp, #8]
     678:	str	x0, [sp, #24]
     67c:	ldr	x0, [sp, #24]
     680:	ldr	w0, [x0]
     684:	add	sp, sp, #0x20
     688:	ret

000000000000068c <read_4s>:
     68c:	sub	sp, sp, #0x20
     690:	str	x0, [sp, #8]
     694:	ldr	x0, [sp, #8]
     698:	str	x0, [sp, #24]
     69c:	ldr	x0, [sp, #24]
     6a0:	ldr	w0, [x0]
     6a4:	add	sp, sp, #0x20
     6a8:	ret

00000000000006ac <read_8u>:
     6ac:	sub	sp, sp, #0x20
     6b0:	str	x0, [sp, #8]
     6b4:	ldr	x0, [sp, #8]
     6b8:	str	x0, [sp, #24]
     6bc:	ldr	x0, [sp, #24]
     6c0:	ldr	x0, [x0]
     6c4:	add	sp, sp, #0x20
     6c8:	ret

00000000000006cc <read_8s>:
     6cc:	sub	sp, sp, #0x20
     6d0:	str	x0, [sp, #8]
     6d4:	ldr	x0, [sp, #8]
     6d8:	str	x0, [sp, #24]
     6dc:	ldr	x0, [sp, #24]
     6e0:	ldr	x0, [x0]
     6e4:	add	sp, sp, #0x20
     6e8:	ret

00000000000006ec <_Unwind_IsSignalFrame>:
     6ec:	sub	sp, sp, #0x10
     6f0:	str	x0, [sp, #8]
     6f4:	ldr	x0, [sp, #8]
     6f8:	ldr	x0, [x0, #832]
     6fc:	asr	x0, x0, #63
     700:	mov	w0, w0
     704:	and	x0, x0, #0x1
     708:	add	sp, sp, #0x10
     70c:	ret

0000000000000710 <_Unwind_SetSignalFrame>:
     710:	sub	sp, sp, #0x10
     714:	str	x0, [sp, #8]
     718:	str	w1, [sp, #4]
     71c:	ldr	w0, [sp, #4]
     720:	cmp	w0, #0x0
     724:	b.eq	740 <_Unwind_SetSignalFrame+0x30>  // b.none
     728:	ldr	x0, [sp, #8]
     72c:	ldr	x0, [x0, #832]
     730:	orr	x1, x0, #0x8000000000000000
     734:	ldr	x0, [sp, #8]
     738:	str	x1, [x0, #832]
     73c:	b	754 <_Unwind_SetSignalFrame+0x44>
     740:	ldr	x0, [sp, #8]
     744:	ldr	x0, [x0, #832]
     748:	and	x1, x0, #0x7fffffffffffffff
     74c:	ldr	x0, [sp, #8]
     750:	str	x1, [x0, #832]
     754:	nop
     758:	add	sp, sp, #0x10
     75c:	ret

0000000000000760 <_Unwind_IsExtendedContext>:
     760:	sub	sp, sp, #0x10
     764:	str	x0, [sp, #8]
     768:	ldr	x0, [sp, #8]
     76c:	ldr	x0, [x0, #832]
     770:	and	x0, x0, #0x4000000000000000
     774:	cmp	x0, #0x0
     778:	cset	w0, ne  // ne = any
     77c:	and	w0, w0, #0xff
     780:	and	x0, x0, #0xff
     784:	add	sp, sp, #0x10
     788:	ret

000000000000078c <_Unwind_GetGR>:
     78c:	stp	x29, x30, [sp, #-64]!
     790:	mov	x29, sp
     794:	str	x0, [sp, #24]
     798:	str	w1, [sp, #20]
     79c:	ldr	w0, [sp, #20]
     7a0:	str	w0, [sp, #60]
     7a4:	ldr	w0, [sp, #60]
     7a8:	cmp	w0, #0x61
     7ac:	b.le	7b4 <_Unwind_GetGR+0x28>
     7b0:	bl	0 <abort>
     7b4:	adrp	x0, 0 <aarch64_vg>
     7b8:	add	x1, x0, #0x0
     7bc:	ldrsw	x0, [sp, #60]
     7c0:	ldrb	w0, [x1, x0]
     7c4:	str	w0, [sp, #56]
     7c8:	ldr	x0, [sp, #24]
     7cc:	ldrsw	x1, [sp, #60]
     7d0:	ldr	x0, [x0, x1, lsl #3]
     7d4:	str	x0, [sp, #48]
     7d8:	ldr	x0, [sp, #24]
     7dc:	bl	760 <_Unwind_IsExtendedContext>
     7e0:	cmp	x0, #0x0
     7e4:	b.eq	80c <_Unwind_GetGR+0x80>  // b.none
     7e8:	ldr	x1, [sp, #24]
     7ec:	ldrsw	x0, [sp, #60]
     7f0:	add	x0, x1, x0
     7f4:	ldrb	w0, [x0, #856]
     7f8:	cmp	w0, #0x0
     7fc:	b.eq	80c <_Unwind_GetGR+0x80>  // b.none
     800:	ldr	x0, [sp, #48]
     804:	bl	5b4 <_Unwind_Get_Unwind_Word>
     808:	b	85c <_Unwind_GetGR+0xd0>
     80c:	ldr	w0, [sp, #20]
     810:	cmp	w0, #0x2e
     814:	b.ne	82c <_Unwind_GetGR+0xa0>  // b.any
     818:	bl	0 <aarch64_vg>
     81c:	sxtw	x0, w0
     820:	str	x0, [sp, #40]
     824:	ldr	x0, [sp, #40]
     828:	b	85c <_Unwind_GetGR+0xd0>
     82c:	ldr	w0, [sp, #56]
     830:	cmp	w0, #0x8
     834:	b.ne	844 <_Unwind_GetGR+0xb8>  // b.any
     838:	ldr	x0, [sp, #48]
     83c:	ldr	x0, [x0]
     840:	b	85c <_Unwind_GetGR+0xd0>
     844:	ldr	w0, [sp, #56]
     848:	cmp	w0, #0x8
     84c:	b.eq	854 <_Unwind_GetGR+0xc8>  // b.none
     850:	bl	0 <abort>
     854:	ldr	x0, [sp, #48]
     858:	ldr	x0, [x0]
     85c:	ldp	x29, x30, [sp], #64
     860:	ret

0000000000000864 <_Unwind_GetPtr>:
     864:	stp	x29, x30, [sp, #-32]!
     868:	mov	x29, sp
     86c:	str	x0, [sp, #24]
     870:	str	w1, [sp, #20]
     874:	ldr	w1, [sp, #20]
     878:	ldr	x0, [sp, #24]
     87c:	bl	78c <_Unwind_GetGR>
     880:	ldp	x29, x30, [sp], #32
     884:	ret

0000000000000888 <_Unwind_GetCFA>:
     888:	sub	sp, sp, #0x10
     88c:	str	x0, [sp, #8]
     890:	ldr	x0, [sp, #8]
     894:	ldr	x0, [x0, #784]
     898:	add	sp, sp, #0x10
     89c:	ret

00000000000008a0 <_Unwind_SetGR>:
     8a0:	stp	x29, x30, [sp, #-64]!
     8a4:	mov	x29, sp
     8a8:	str	x0, [sp, #40]
     8ac:	str	w1, [sp, #36]
     8b0:	str	x2, [sp, #24]
     8b4:	ldr	w0, [sp, #36]
     8b8:	cmp	w0, #0x61
     8bc:	b.le	8c4 <_Unwind_SetGR+0x24>
     8c0:	bl	0 <abort>
     8c4:	adrp	x0, 0 <aarch64_vg>
     8c8:	add	x1, x0, #0x0
     8cc:	ldrsw	x0, [sp, #36]
     8d0:	ldrb	w0, [x1, x0]
     8d4:	str	w0, [sp, #60]
     8d8:	ldr	x0, [sp, #40]
     8dc:	bl	760 <_Unwind_IsExtendedContext>
     8e0:	cmp	x0, #0x0
     8e4:	b.eq	91c <_Unwind_SetGR+0x7c>  // b.none
     8e8:	ldr	x1, [sp, #40]
     8ec:	ldrsw	x0, [sp, #36]
     8f0:	add	x0, x1, x0
     8f4:	ldrb	w0, [x0, #856]
     8f8:	cmp	w0, #0x0
     8fc:	b.eq	91c <_Unwind_SetGR+0x7c>  // b.none
     900:	ldr	x0, [sp, #24]
     904:	bl	5c8 <_Unwind_Get_Unwind_Context_Reg_Val>
     908:	mov	x2, x0
     90c:	ldr	x0, [sp, #40]
     910:	ldrsw	x1, [sp, #36]
     914:	str	x2, [x0, x1, lsl #3]
     918:	b	964 <_Unwind_SetGR+0xc4>
     91c:	ldr	x0, [sp, #40]
     920:	ldrsw	x1, [sp, #36]
     924:	ldr	x0, [x0, x1, lsl #3]
     928:	str	x0, [sp, #48]
     92c:	ldr	w0, [sp, #60]
     930:	cmp	w0, #0x8
     934:	b.ne	948 <_Unwind_SetGR+0xa8>  // b.any
     938:	ldr	x0, [sp, #48]
     93c:	ldr	x1, [sp, #24]
     940:	str	x1, [x0]
     944:	b	964 <_Unwind_SetGR+0xc4>
     948:	ldr	w0, [sp, #60]
     94c:	cmp	w0, #0x8
     950:	b.eq	958 <_Unwind_SetGR+0xb8>  // b.none
     954:	bl	0 <abort>
     958:	ldr	x0, [sp, #48]
     95c:	ldr	x1, [sp, #24]
     960:	str	x1, [x0]
     964:	ldp	x29, x30, [sp], #64
     968:	ret

000000000000096c <_Unwind_GetGRPtr>:
     96c:	stp	x29, x30, [sp, #-32]!
     970:	mov	x29, sp
     974:	str	x0, [sp, #24]
     978:	str	w1, [sp, #20]
     97c:	ldr	x0, [sp, #24]
     980:	bl	760 <_Unwind_IsExtendedContext>
     984:	cmp	x0, #0x0
     988:	b.eq	9b8 <_Unwind_GetGRPtr+0x4c>  // b.none
     98c:	ldr	x1, [sp, #24]
     990:	ldrsw	x0, [sp, #20]
     994:	add	x0, x1, x0
     998:	ldrb	w0, [x0, #856]
     99c:	cmp	w0, #0x0
     9a0:	b.eq	9b8 <_Unwind_GetGRPtr+0x4c>  // b.none
     9a4:	ldrsw	x0, [sp, #20]
     9a8:	lsl	x0, x0, #3
     9ac:	ldr	x1, [sp, #24]
     9b0:	add	x0, x1, x0
     9b4:	b	9c4 <_Unwind_GetGRPtr+0x58>
     9b8:	ldr	x0, [sp, #24]
     9bc:	ldrsw	x1, [sp, #20]
     9c0:	ldr	x0, [x0, x1, lsl #3]
     9c4:	ldp	x29, x30, [sp], #32
     9c8:	ret

00000000000009cc <_Unwind_SetGRPtr>:
     9cc:	stp	x29, x30, [sp, #-48]!
     9d0:	mov	x29, sp
     9d4:	str	x0, [sp, #40]
     9d8:	str	w1, [sp, #36]
     9dc:	str	x2, [sp, #24]
     9e0:	ldr	x0, [sp, #40]
     9e4:	bl	760 <_Unwind_IsExtendedContext>
     9e8:	cmp	x0, #0x0
     9ec:	b.eq	a00 <_Unwind_SetGRPtr+0x34>  // b.none
     9f0:	ldr	x1, [sp, #40]
     9f4:	ldrsw	x0, [sp, #36]
     9f8:	add	x0, x1, x0
     9fc:	strb	wzr, [x0, #856]
     a00:	ldr	x0, [sp, #40]
     a04:	ldrsw	x1, [sp, #36]
     a08:	ldr	x2, [sp, #24]
     a0c:	str	x2, [x0, x1, lsl #3]
     a10:	nop
     a14:	ldp	x29, x30, [sp], #48
     a18:	ret

0000000000000a1c <_Unwind_SetGRValue>:
     a1c:	stp	x29, x30, [sp, #-48]!
     a20:	mov	x29, sp
     a24:	str	x0, [sp, #40]
     a28:	str	w1, [sp, #36]
     a2c:	str	x2, [sp, #24]
     a30:	ldr	w0, [sp, #36]
     a34:	cmp	w0, #0x61
     a38:	b.le	a40 <_Unwind_SetGRValue+0x24>
     a3c:	bl	0 <abort>
     a40:	adrp	x0, 0 <aarch64_vg>
     a44:	add	x1, x0, #0x0
     a48:	ldrsw	x0, [sp, #36]
     a4c:	ldrb	w0, [x1, x0]
     a50:	cmp	w0, #0x8
     a54:	b.ls	a5c <_Unwind_SetGRValue+0x40>  // b.plast
     a58:	bl	0 <abort>
     a5c:	ldr	x1, [sp, #40]
     a60:	ldrsw	x0, [sp, #36]
     a64:	add	x0, x1, x0
     a68:	mov	w1, #0x1                   	// #1
     a6c:	strb	w1, [x0, #856]
     a70:	ldr	x0, [sp, #24]
     a74:	bl	5c8 <_Unwind_Get_Unwind_Context_Reg_Val>
     a78:	mov	x2, x0
     a7c:	ldr	x0, [sp, #40]
     a80:	ldrsw	x1, [sp, #36]
     a84:	str	x2, [x0, x1, lsl #3]
     a88:	nop
     a8c:	ldp	x29, x30, [sp], #48
     a90:	ret

0000000000000a94 <_Unwind_GRByValue>:
     a94:	sub	sp, sp, #0x10
     a98:	str	x0, [sp, #8]
     a9c:	str	w1, [sp, #4]
     aa0:	ldr	x1, [sp, #8]
     aa4:	ldrsw	x0, [sp, #4]
     aa8:	add	x0, x1, x0
     aac:	ldrb	w0, [x0, #856]
     ab0:	add	sp, sp, #0x10
     ab4:	ret

0000000000000ab8 <_Unwind_GetIP>:
     ab8:	sub	sp, sp, #0x10
     abc:	str	x0, [sp, #8]
     ac0:	ldr	x0, [sp, #8]
     ac4:	ldr	x0, [x0, #792]
     ac8:	add	sp, sp, #0x10
     acc:	ret

0000000000000ad0 <_Unwind_GetIPInfo>:
     ad0:	stp	x29, x30, [sp, #-32]!
     ad4:	mov	x29, sp
     ad8:	str	x0, [sp, #24]
     adc:	str	x1, [sp, #16]
     ae0:	ldr	x0, [sp, #24]
     ae4:	bl	6ec <_Unwind_IsSignalFrame>
     ae8:	mov	w1, w0
     aec:	ldr	x0, [sp, #16]
     af0:	str	w1, [x0]
     af4:	ldr	x0, [sp, #24]
     af8:	ldr	x0, [x0, #792]
     afc:	ldp	x29, x30, [sp], #32
     b00:	ret

0000000000000b04 <_Unwind_SetIP>:
     b04:	sub	sp, sp, #0x10
     b08:	str	x0, [sp, #8]
     b0c:	str	x1, [sp]
     b10:	ldr	x1, [sp]
     b14:	ldr	x0, [sp, #8]
     b18:	str	x1, [x0, #792]
     b1c:	nop
     b20:	add	sp, sp, #0x10
     b24:	ret

0000000000000b28 <_Unwind_GetLanguageSpecificData>:
     b28:	sub	sp, sp, #0x10
     b2c:	str	x0, [sp, #8]
     b30:	ldr	x0, [sp, #8]
     b34:	ldr	x0, [x0, #800]
     b38:	add	sp, sp, #0x10
     b3c:	ret

0000000000000b40 <_Unwind_GetRegionStart>:
     b40:	sub	sp, sp, #0x10
     b44:	str	x0, [sp, #8]
     b48:	ldr	x0, [sp, #8]
     b4c:	ldr	x0, [x0, #824]
     b50:	add	sp, sp, #0x10
     b54:	ret

0000000000000b58 <_Unwind_FindEnclosingFunction>:
     b58:	stp	x29, x30, [sp, #-64]!
     b5c:	mov	x29, sp
     b60:	str	x0, [sp, #24]
     b64:	ldr	x0, [sp, #24]
     b68:	sub	x0, x0, #0x1
     b6c:	add	x1, sp, #0x20
     b70:	bl	0 <_Unwind_Find_FDE>
     b74:	str	x0, [sp, #56]
     b78:	ldr	x0, [sp, #56]
     b7c:	cmp	x0, #0x0
     b80:	b.eq	b8c <_Unwind_FindEnclosingFunction+0x34>  // b.none
     b84:	ldr	x0, [sp, #48]
     b88:	b	b90 <_Unwind_FindEnclosingFunction+0x38>
     b8c:	mov	x0, #0x0                   	// #0
     b90:	ldp	x29, x30, [sp], #64
     b94:	ret

0000000000000b98 <_Unwind_GetDataRelBase>:
     b98:	sub	sp, sp, #0x10
     b9c:	str	x0, [sp, #8]
     ba0:	ldr	x0, [sp, #8]
     ba4:	ldr	x0, [x0, #816]
     ba8:	add	sp, sp, #0x10
     bac:	ret

0000000000000bb0 <_Unwind_GetTextRelBase>:
     bb0:	sub	sp, sp, #0x10
     bb4:	str	x0, [sp, #8]
     bb8:	ldr	x0, [sp, #8]
     bbc:	ldr	x0, [x0, #808]
     bc0:	add	sp, sp, #0x10
     bc4:	ret

0000000000000bc8 <aarch64_post_extract_frame_addr>:
     bc8:	sub	sp, sp, #0x30
     bcc:	str	x0, [sp, #24]
     bd0:	str	x1, [sp, #16]
     bd4:	str	x2, [sp, #8]
     bd8:	ldr	x0, [sp, #16]
     bdc:	ldr	x0, [x0, #544]
     be0:	and	x0, x0, #0x1
     be4:	cmp	x0, #0x0
     be8:	b.eq	c18 <aarch64_post_extract_frame_addr+0x50>  // b.none
     bec:	ldr	x0, [sp, #24]
     bf0:	ldr	x0, [x0, #784]
     bf4:	str	x0, [sp, #40]
     bf8:	ldr	x1, [sp, #8]
     bfc:	mov	x0, x1
     c00:	ldr	x0, [sp, #40]
     c04:	mov	x17, x1
     c08:	mov	x16, x0
     c0c:	autia1716
     c10:	mov	x0, x17
     c14:	b	c1c <aarch64_post_extract_frame_addr+0x54>
     c18:	ldr	x0, [sp, #8]
     c1c:	add	sp, sp, #0x30
     c20:	ret

0000000000000c24 <aarch64_post_frob_eh_handler_addr>:
     c24:	sub	sp, sp, #0x20
     c28:	str	x0, [sp, #24]
     c2c:	str	x1, [sp, #16]
     c30:	str	x2, [sp, #8]
     c34:	ldr	x0, [sp, #24]
     c38:	ldr	x0, [x0, #832]
     c3c:	and	x0, x0, #0x2000000000000000
     c40:	cmp	x0, #0x0
     c44:	b.eq	c70 <aarch64_post_frob_eh_handler_addr+0x4c>  // b.none
     c48:	ldr	x0, [sp, #24]
     c4c:	ldr	x0, [x0, #784]
     c50:	mov	x2, x0
     c54:	ldr	x1, [sp, #8]
     c58:	mov	x0, x1
     c5c:	mov	x17, x1
     c60:	mov	x16, x2
     c64:	pacia1716
     c68:	mov	x0, x17
     c6c:	b	c74 <aarch64_post_frob_eh_handler_addr+0x50>
     c70:	ldr	x0, [sp, #8]
     c74:	add	sp, sp, #0x20
     c78:	ret

0000000000000c7c <aarch64_frob_update_context>:
     c7c:	sub	sp, sp, #0x10
     c80:	str	x0, [sp, #8]
     c84:	str	x1, [sp]
     c88:	ldr	x0, [sp]
     c8c:	ldr	x0, [x0, #544]
     c90:	and	x0, x0, #0x1
     c94:	cmp	x0, #0x0
     c98:	b.eq	cb4 <aarch64_frob_update_context+0x38>  // b.none
     c9c:	ldr	x0, [sp, #8]
     ca0:	ldr	x0, [x0, #832]
     ca4:	orr	x1, x0, #0x2000000000000000
     ca8:	ldr	x0, [sp, #8]
     cac:	str	x1, [x0, #832]
     cb0:	nop
     cb4:	nop
     cb8:	add	sp, sp, #0x10
     cbc:	ret

0000000000000cc0 <aarch64_fallback_frame_state>:
     cc0:	sub	sp, sp, #0x50
     cc4:	str	x0, [sp, #8]
     cc8:	str	x1, [sp]
     ccc:	ldr	x0, [sp, #8]
     cd0:	ldr	x0, [x0, #792]
     cd4:	str	x0, [sp, #56]
     cd8:	ldr	x0, [sp, #56]
     cdc:	ldr	w1, [x0]
     ce0:	mov	w0, #0x1168                	// #4456
     ce4:	movk	w0, #0xd280, lsl #16
     ce8:	cmp	w1, w0
     cec:	b.ne	d0c <aarch64_fallback_frame_state+0x4c>  // b.any
     cf0:	ldr	x0, [sp, #56]
     cf4:	add	x0, x0, #0x4
     cf8:	ldr	w1, [x0]
     cfc:	mov	w0, #0x1                   	// #1
     d00:	movk	w0, #0xd400, lsl #16
     d04:	cmp	w1, w0
     d08:	b.eq	d14 <aarch64_fallback_frame_state+0x54>  // b.none
     d0c:	mov	w0, #0x5                   	// #5
     d10:	b	f28 <aarch64_fallback_frame_state+0x268>
     d14:	ldr	x0, [sp, #8]
     d18:	ldr	x0, [x0, #784]
     d1c:	str	x0, [sp, #48]
     d20:	ldr	x0, [sp, #48]
     d24:	add	x0, x0, #0x130
     d28:	str	x0, [sp, #40]
     d2c:	ldr	x0, [sp, #40]
     d30:	str	x0, [sp, #32]
     d34:	ldr	x0, [sp]
     d38:	mov	w1, #0x1                   	// #1
     d3c:	str	w1, [x0, #1600]
     d40:	ldr	x0, [sp]
     d44:	mov	x1, #0x1f                  	// #31
     d48:	str	x1, [x0, #1584]
     d4c:	ldr	x0, [sp, #8]
     d50:	ldr	x0, [x0, #784]
     d54:	mov	x1, x0
     d58:	ldr	x0, [sp, #32]
     d5c:	sub	x0, x0, x1
     d60:	mov	x1, x0
     d64:	ldr	x0, [sp]
     d68:	str	x1, [x0, #1576]
     d6c:	str	wzr, [sp, #68]
     d70:	b	dd0 <aarch64_fallback_frame_state+0x110>
     d74:	ldr	x1, [sp]
     d78:	ldrsw	x0, [sp, #68]
     d7c:	lsl	x0, x0, #4
     d80:	add	x0, x1, x0
     d84:	mov	w1, #0x1                   	// #1
     d88:	str	w1, [x0, #8]
     d8c:	ldrsw	x0, [sp, #68]
     d90:	lsl	x0, x0, #3
     d94:	ldr	x1, [sp, #40]
     d98:	add	x0, x1, x0
     d9c:	add	x0, x0, #0x8
     da0:	mov	x1, x0
     da4:	ldr	x0, [sp, #32]
     da8:	sub	x0, x1, x0
     dac:	mov	x2, x0
     db0:	ldr	x1, [sp]
     db4:	ldrsw	x0, [sp, #68]
     db8:	lsl	x0, x0, #4
     dbc:	add	x0, x1, x0
     dc0:	str	x2, [x0]
     dc4:	ldr	w0, [sp, #68]
     dc8:	add	w0, w0, #0x1
     dcc:	str	w0, [sp, #68]
     dd0:	ldr	w0, [sp, #68]
     dd4:	cmp	w0, #0x1e
     dd8:	b.le	d74 <aarch64_fallback_frame_state+0xb4>
     ddc:	ldr	x0, [sp, #40]
     de0:	add	x0, x0, #0x120
     de4:	str	x0, [sp, #72]
     de8:	b	ea8 <aarch64_fallback_frame_state+0x1e8>
     dec:	ldr	x0, [sp, #72]
     df0:	ldr	w1, [x0]
     df4:	mov	w0, #0x8001                	// #32769
     df8:	movk	w0, #0x4650, lsl #16
     dfc:	cmp	w1, w0
     e00:	b.ne	e90 <aarch64_fallback_frame_state+0x1d0>  // b.any
     e04:	ldr	x0, [sp, #72]
     e08:	str	x0, [sp, #24]
     e0c:	str	wzr, [sp, #64]
     e10:	b	e84 <aarch64_fallback_frame_state+0x1c4>
     e14:	ldr	w0, [sp, #64]
     e18:	add	w0, w0, #0x40
     e1c:	ldr	x1, [sp]
     e20:	sxtw	x0, w0
     e24:	lsl	x0, x0, #4
     e28:	add	x0, x1, x0
     e2c:	mov	w1, #0x1                   	// #1
     e30:	str	w1, [x0, #8]
     e34:	ldrsw	x0, [sp, #64]
     e38:	add	x0, x0, #0x1
     e3c:	lsl	x0, x0, #4
     e40:	ldr	x1, [sp, #24]
     e44:	add	x0, x1, x0
     e48:	mov	x1, x0
     e4c:	ldr	x0, [sp, #32]
     e50:	sub	x0, x1, x0
     e54:	str	x0, [sp, #16]
     e58:	ldr	w0, [sp, #64]
     e5c:	add	w0, w0, #0x40
     e60:	ldr	x1, [sp]
     e64:	sxtw	x0, w0
     e68:	lsl	x0, x0, #4
     e6c:	add	x0, x1, x0
     e70:	ldr	x1, [sp, #16]
     e74:	str	x1, [x0]
     e78:	ldr	w0, [sp, #64]
     e7c:	add	w0, w0, #0x1
     e80:	str	w0, [sp, #64]
     e84:	ldr	w0, [sp, #64]
     e88:	cmp	w0, #0x1f
     e8c:	b.le	e14 <aarch64_fallback_frame_state+0x154>
     e90:	ldr	x0, [sp, #72]
     e94:	ldr	w0, [x0, #4]
     e98:	mov	w0, w0
     e9c:	ldr	x1, [sp, #72]
     ea0:	add	x0, x1, x0
     ea4:	str	x0, [sp, #72]
     ea8:	ldr	x0, [sp, #72]
     eac:	ldr	w0, [x0]
     eb0:	cmp	w0, #0x0
     eb4:	b.ne	dec <aarch64_fallback_frame_state+0x12c>  // b.any
     eb8:	ldr	x0, [sp]
     ebc:	mov	w1, #0x1                   	// #1
     ec0:	str	w1, [x0, #504]
     ec4:	ldr	x0, [sp, #40]
     ec8:	add	x0, x0, #0x100
     ecc:	mov	x1, x0
     ed0:	ldr	x0, [sp, #32]
     ed4:	sub	x0, x1, x0
     ed8:	mov	x1, x0
     edc:	ldr	x0, [sp]
     ee0:	str	x1, [x0, #496]
     ee4:	ldr	x0, [sp]
     ee8:	mov	w1, #0x1                   	// #1
     eec:	strb	w1, [x0, #1651]
     ef0:	ldr	x0, [sp]
     ef4:	mov	w1, #0x4                   	// #4
     ef8:	str	w1, [x0, #1544]
     efc:	ldr	x0, [sp, #40]
     f00:	ldr	x1, [x0, #264]
     f04:	ldr	x0, [sp, #32]
     f08:	sub	x0, x1, x0
     f0c:	mov	x1, x0
     f10:	ldr	x0, [sp]
     f14:	str	x1, [x0, #1536]
     f18:	ldr	x0, [sp]
     f1c:	mov	x1, #0x60                  	// #96
     f20:	str	x1, [x0, #1640]
     f24:	mov	w0, #0x0                   	// #0
     f28:	add	sp, sp, #0x50
     f2c:	ret

0000000000000f30 <extract_cie_info>:
     f30:	stp	x29, x30, [sp, #-96]!
     f34:	mov	x29, sp
     f38:	str	x0, [sp, #40]
     f3c:	str	x1, [sp, #32]
     f40:	str	x2, [sp, #24]
     f44:	ldr	x0, [sp, #40]
     f48:	add	x0, x0, #0x9
     f4c:	str	x0, [sp, #88]
     f50:	ldr	x0, [sp, #88]
     f54:	bl	0 <strlen>
     f58:	add	x0, x0, #0x1
     f5c:	ldr	x1, [sp, #88]
     f60:	add	x0, x1, x0
     f64:	str	x0, [sp, #80]
     f68:	str	xzr, [sp, #72]
     f6c:	ldr	x0, [sp, #88]
     f70:	ldrb	w0, [x0]
     f74:	cmp	w0, #0x65
     f78:	b.ne	fbc <extract_cie_info+0x8c>  // b.any
     f7c:	ldr	x0, [sp, #88]
     f80:	add	x0, x0, #0x1
     f84:	ldrb	w0, [x0]
     f88:	cmp	w0, #0x68
     f8c:	b.ne	fbc <extract_cie_info+0x8c>  // b.any
     f90:	ldr	x0, [sp, #80]
     f94:	bl	5dc <read_pointer>
     f98:	mov	x1, x0
     f9c:	ldr	x0, [sp, #24]
     fa0:	str	x1, [x0, #1656]
     fa4:	ldr	x0, [sp, #80]
     fa8:	add	x0, x0, #0x8
     fac:	str	x0, [sp, #80]
     fb0:	ldr	x0, [sp, #88]
     fb4:	add	x0, x0, #0x2
     fb8:	str	x0, [sp, #88]
     fbc:	ldr	x0, [sp, #40]
     fc0:	ldrb	w0, [x0, #8]
     fc4:	cmp	w0, #0x3
     fc8:	cset	w0, hi  // hi = pmore
     fcc:	and	w0, w0, #0xff
     fd0:	and	x0, x0, #0xff
     fd4:	cmp	x0, #0x0
     fd8:	b.eq	1014 <extract_cie_info+0xe4>  // b.none
     fdc:	ldr	x0, [sp, #80]
     fe0:	ldrb	w0, [x0]
     fe4:	cmp	w0, #0x8
     fe8:	b.ne	1000 <extract_cie_info+0xd0>  // b.any
     fec:	ldr	x0, [sp, #80]
     ff0:	add	x0, x0, #0x1
     ff4:	ldrb	w0, [x0]
     ff8:	cmp	w0, #0x0
     ffc:	b.eq	1008 <extract_cie_info+0xd8>  // b.none
    1000:	mov	x0, #0x0                   	// #0
    1004:	b	1228 <extract_cie_info+0x2f8>
    1008:	ldr	x0, [sp, #80]
    100c:	add	x0, x0, #0x2
    1010:	str	x0, [sp, #80]
    1014:	add	x0, sp, #0x40
    1018:	mov	x1, x0
    101c:	ldr	x0, [sp, #80]
    1020:	bl	144 <read_uleb128>
    1024:	str	x0, [sp, #80]
    1028:	ldr	x1, [sp, #64]
    102c:	ldr	x0, [sp, #24]
    1030:	str	x1, [x0, #1632]
    1034:	add	x0, sp, #0x38
    1038:	mov	x1, x0
    103c:	ldr	x0, [sp, #80]
    1040:	bl	1b8 <read_sleb128>
    1044:	str	x0, [sp, #80]
    1048:	ldr	x1, [sp, #56]
    104c:	ldr	x0, [sp, #24]
    1050:	str	x1, [x0, #1624]
    1054:	ldr	x0, [sp, #40]
    1058:	ldrb	w0, [x0, #8]
    105c:	cmp	w0, #0x1
    1060:	b.ne	1084 <extract_cie_info+0x154>  // b.any
    1064:	ldr	x0, [sp, #80]
    1068:	add	x1, x0, #0x1
    106c:	str	x1, [sp, #80]
    1070:	ldrb	w0, [x0]
    1074:	and	x1, x0, #0xff
    1078:	ldr	x0, [sp, #24]
    107c:	str	x1, [x0, #1640]
    1080:	b	10a4 <extract_cie_info+0x174>
    1084:	add	x0, sp, #0x40
    1088:	mov	x1, x0
    108c:	ldr	x0, [sp, #80]
    1090:	bl	144 <read_uleb128>
    1094:	str	x0, [sp, #80]
    1098:	ldr	x1, [sp, #64]
    109c:	ldr	x0, [sp, #24]
    10a0:	str	x1, [x0, #1640]
    10a4:	ldr	x0, [sp, #24]
    10a8:	mov	w1, #0xffffffff            	// #-1
    10ac:	strb	w1, [x0, #1649]
    10b0:	ldr	x0, [sp, #88]
    10b4:	ldrb	w0, [x0]
    10b8:	cmp	w0, #0x7a
    10bc:	b.ne	1200 <extract_cie_info+0x2d0>  // b.any
    10c0:	add	x0, sp, #0x40
    10c4:	mov	x1, x0
    10c8:	ldr	x0, [sp, #80]
    10cc:	bl	144 <read_uleb128>
    10d0:	str	x0, [sp, #80]
    10d4:	ldr	x0, [sp, #64]
    10d8:	ldr	x1, [sp, #80]
    10dc:	add	x0, x1, x0
    10e0:	str	x0, [sp, #72]
    10e4:	ldr	x0, [sp, #24]
    10e8:	mov	w1, #0x1                   	// #1
    10ec:	strb	w1, [x0, #1650]
    10f0:	ldr	x0, [sp, #88]
    10f4:	add	x0, x0, #0x1
    10f8:	str	x0, [sp, #88]
    10fc:	b	1200 <extract_cie_info+0x2d0>
    1100:	ldr	x0, [sp, #88]
    1104:	ldrb	w0, [x0]
    1108:	cmp	w0, #0x4c
    110c:	b.ne	1138 <extract_cie_info+0x208>  // b.any
    1110:	ldr	x0, [sp, #80]
    1114:	add	x1, x0, #0x1
    1118:	str	x1, [sp, #80]
    111c:	ldrb	w1, [x0]
    1120:	ldr	x0, [sp, #24]
    1124:	strb	w1, [x0, #1649]
    1128:	ldr	x0, [sp, #88]
    112c:	add	x0, x0, #0x1
    1130:	str	x0, [sp, #88]
    1134:	b	1200 <extract_cie_info+0x2d0>
    1138:	ldr	x0, [sp, #88]
    113c:	ldrb	w0, [x0]
    1140:	cmp	w0, #0x52
    1144:	b.ne	1170 <extract_cie_info+0x240>  // b.any
    1148:	ldr	x0, [sp, #80]
    114c:	add	x1, x0, #0x1
    1150:	str	x1, [sp, #80]
    1154:	ldrb	w1, [x0]
    1158:	ldr	x0, [sp, #24]
    115c:	strb	w1, [x0, #1648]
    1160:	ldr	x0, [sp, #88]
    1164:	add	x0, x0, #0x1
    1168:	str	x0, [sp, #88]
    116c:	b	1200 <extract_cie_info+0x2d0>
    1170:	ldr	x0, [sp, #88]
    1174:	ldrb	w0, [x0]
    1178:	cmp	w0, #0x50
    117c:	b.ne	11cc <extract_cie_info+0x29c>  // b.any
    1180:	ldr	x0, [sp, #80]
    1184:	ldrb	w4, [x0]
    1188:	ldr	x0, [sp, #80]
    118c:	add	x0, x0, #0x1
    1190:	add	x1, sp, #0x30
    1194:	mov	x3, x1
    1198:	mov	x2, x0
    119c:	mov	w1, w4
    11a0:	ldr	x0, [sp, #32]
    11a4:	bl	4cc <read_encoded_value>
    11a8:	str	x0, [sp, #80]
    11ac:	ldr	x0, [sp, #48]
    11b0:	mov	x1, x0
    11b4:	ldr	x0, [sp, #24]
    11b8:	str	x1, [x0, #1616]
    11bc:	ldr	x0, [sp, #88]
    11c0:	add	x0, x0, #0x1
    11c4:	str	x0, [sp, #88]
    11c8:	b	1200 <extract_cie_info+0x2d0>
    11cc:	ldr	x0, [sp, #88]
    11d0:	ldrb	w0, [x0]
    11d4:	cmp	w0, #0x53
    11d8:	b.ne	11f8 <extract_cie_info+0x2c8>  // b.any
    11dc:	ldr	x0, [sp, #24]
    11e0:	mov	w1, #0x1                   	// #1
    11e4:	strb	w1, [x0, #1651]
    11e8:	ldr	x0, [sp, #88]
    11ec:	add	x0, x0, #0x1
    11f0:	str	x0, [sp, #88]
    11f4:	b	1200 <extract_cie_info+0x2d0>
    11f8:	ldr	x0, [sp, #72]
    11fc:	b	1228 <extract_cie_info+0x2f8>
    1200:	ldr	x0, [sp, #88]
    1204:	ldrb	w0, [x0]
    1208:	cmp	w0, #0x0
    120c:	b.ne	1100 <extract_cie_info+0x1d0>  // b.any
    1210:	ldr	x0, [sp, #72]
    1214:	cmp	x0, #0x0
    1218:	b.eq	1224 <extract_cie_info+0x2f4>  // b.none
    121c:	ldr	x0, [sp, #72]
    1220:	b	1228 <extract_cie_info+0x2f8>
    1224:	ldr	x0, [sp, #80]
    1228:	ldp	x29, x30, [sp], #96
    122c:	ret

0000000000001230 <execute_stack_op>:
    1230:	sub	sp, sp, #0x2b0
    1234:	stp	x29, x30, [sp]
    1238:	mov	x29, sp
    123c:	str	x0, [sp, #40]
    1240:	str	x1, [sp, #32]
    1244:	str	x2, [sp, #24]
    1248:	str	x3, [sp, #16]
    124c:	ldr	x0, [sp, #16]
    1250:	str	x0, [sp, #88]
    1254:	mov	w0, #0x1                   	// #1
    1258:	str	w0, [sp, #684]
    125c:	b	1bf8 <execute_stack_op+0x9c8>
    1260:	ldr	x0, [sp, #40]
    1264:	add	x1, x0, #0x1
    1268:	str	x1, [sp, #40]
    126c:	ldrb	w0, [x0]
    1270:	str	w0, [sp, #668]
    1274:	ldr	w0, [sp, #668]
    1278:	sub	w0, w0, #0x3
    127c:	cmp	w0, #0xee
    1280:	b.hi	1bb4 <execute_stack_op+0x984>  // b.pmore
    1284:	adrp	x1, 0 <aarch64_vg>
    1288:	add	x1, x1, #0x0
    128c:	ldr	w0, [x1, w0, uxtw #2]
    1290:	adr	x1, 129c <execute_stack_op+0x6c>
    1294:	add	x0, x1, w0, sxtw #2
    1298:	br	x0
    129c:	ldr	w0, [sp, #668]
    12a0:	sub	w0, w0, #0x30
    12a4:	mov	w0, w0
    12a8:	str	x0, [sp, #672]
    12ac:	b	1bb8 <execute_stack_op+0x988>
    12b0:	ldr	x0, [sp, #40]
    12b4:	bl	5dc <read_pointer>
    12b8:	str	x0, [sp, #672]
    12bc:	ldr	x0, [sp, #40]
    12c0:	add	x0, x0, #0x8
    12c4:	str	x0, [sp, #40]
    12c8:	b	1bb8 <execute_stack_op+0x988>
    12cc:	ldr	x0, [sp, #40]
    12d0:	ldrb	w4, [x0]
    12d4:	ldr	x0, [sp, #40]
    12d8:	add	x0, x0, #0x1
    12dc:	add	x1, sp, #0x30
    12e0:	mov	x3, x1
    12e4:	mov	x2, x0
    12e8:	mov	w1, w4
    12ec:	ldr	x0, [sp, #24]
    12f0:	bl	4cc <read_encoded_value>
    12f4:	str	x0, [sp, #40]
    12f8:	ldr	x0, [sp, #48]
    12fc:	str	x0, [sp, #672]
    1300:	b	1bb8 <execute_stack_op+0x988>
    1304:	ldr	x0, [sp, #40]
    1308:	bl	5fc <read_1u>
    130c:	sxtw	x0, w0
    1310:	str	x0, [sp, #672]
    1314:	ldr	x0, [sp, #40]
    1318:	add	x0, x0, #0x1
    131c:	str	x0, [sp, #40]
    1320:	b	1bb8 <execute_stack_op+0x988>
    1324:	ldr	x0, [sp, #40]
    1328:	bl	614 <read_1s>
    132c:	sxtw	x0, w0
    1330:	str	x0, [sp, #672]
    1334:	ldr	x0, [sp, #40]
    1338:	add	x0, x0, #0x1
    133c:	str	x0, [sp, #40]
    1340:	b	1bb8 <execute_stack_op+0x988>
    1344:	ldr	x0, [sp, #40]
    1348:	bl	62c <read_2u>
    134c:	sxtw	x0, w0
    1350:	str	x0, [sp, #672]
    1354:	ldr	x0, [sp, #40]
    1358:	add	x0, x0, #0x2
    135c:	str	x0, [sp, #40]
    1360:	b	1bb8 <execute_stack_op+0x988>
    1364:	ldr	x0, [sp, #40]
    1368:	bl	64c <read_2s>
    136c:	sxtw	x0, w0
    1370:	str	x0, [sp, #672]
    1374:	ldr	x0, [sp, #40]
    1378:	add	x0, x0, #0x2
    137c:	str	x0, [sp, #40]
    1380:	b	1bb8 <execute_stack_op+0x988>
    1384:	ldr	x0, [sp, #40]
    1388:	bl	66c <read_4u>
    138c:	mov	w0, w0
    1390:	str	x0, [sp, #672]
    1394:	ldr	x0, [sp, #40]
    1398:	add	x0, x0, #0x4
    139c:	str	x0, [sp, #40]
    13a0:	b	1bb8 <execute_stack_op+0x988>
    13a4:	ldr	x0, [sp, #40]
    13a8:	bl	68c <read_4s>
    13ac:	sxtw	x0, w0
    13b0:	str	x0, [sp, #672]
    13b4:	ldr	x0, [sp, #40]
    13b8:	add	x0, x0, #0x4
    13bc:	str	x0, [sp, #40]
    13c0:	b	1bb8 <execute_stack_op+0x988>
    13c4:	ldr	x0, [sp, #40]
    13c8:	bl	6ac <read_8u>
    13cc:	str	x0, [sp, #672]
    13d0:	ldr	x0, [sp, #40]
    13d4:	add	x0, x0, #0x8
    13d8:	str	x0, [sp, #40]
    13dc:	b	1bb8 <execute_stack_op+0x988>
    13e0:	ldr	x0, [sp, #40]
    13e4:	bl	6cc <read_8s>
    13e8:	str	x0, [sp, #672]
    13ec:	ldr	x0, [sp, #40]
    13f0:	add	x0, x0, #0x8
    13f4:	str	x0, [sp, #40]
    13f8:	b	1bb8 <execute_stack_op+0x988>
    13fc:	add	x0, sp, #0x48
    1400:	mov	x1, x0
    1404:	ldr	x0, [sp, #40]
    1408:	bl	144 <read_uleb128>
    140c:	str	x0, [sp, #40]
    1410:	ldr	x0, [sp, #72]
    1414:	str	x0, [sp, #672]
    1418:	b	1bb8 <execute_stack_op+0x988>
    141c:	add	x0, sp, #0x38
    1420:	mov	x1, x0
    1424:	ldr	x0, [sp, #40]
    1428:	bl	1b8 <read_sleb128>
    142c:	str	x0, [sp, #40]
    1430:	ldr	x0, [sp, #56]
    1434:	str	x0, [sp, #672]
    1438:	b	1bb8 <execute_stack_op+0x988>
    143c:	ldr	w0, [sp, #668]
    1440:	sub	w0, w0, #0x50
    1444:	mov	w1, w0
    1448:	ldr	x0, [sp, #24]
    144c:	bl	78c <_Unwind_GetGR>
    1450:	str	x0, [sp, #672]
    1454:	b	1bb8 <execute_stack_op+0x988>
    1458:	add	x0, sp, #0x50
    145c:	mov	x1, x0
    1460:	ldr	x0, [sp, #40]
    1464:	bl	144 <read_uleb128>
    1468:	str	x0, [sp, #40]
    146c:	ldr	x0, [sp, #80]
    1470:	mov	w1, w0
    1474:	ldr	x0, [sp, #24]
    1478:	bl	78c <_Unwind_GetGR>
    147c:	str	x0, [sp, #672]
    1480:	b	1bb8 <execute_stack_op+0x988>
    1484:	add	x0, sp, #0x40
    1488:	mov	x1, x0
    148c:	ldr	x0, [sp, #40]
    1490:	bl	1b8 <read_sleb128>
    1494:	str	x0, [sp, #40]
    1498:	ldr	w0, [sp, #668]
    149c:	sub	w0, w0, #0x70
    14a0:	mov	w1, w0
    14a4:	ldr	x0, [sp, #24]
    14a8:	bl	78c <_Unwind_GetGR>
    14ac:	ldr	x1, [sp, #64]
    14b0:	add	x0, x0, x1
    14b4:	str	x0, [sp, #672]
    14b8:	b	1bb8 <execute_stack_op+0x988>
    14bc:	add	x0, sp, #0x50
    14c0:	mov	x1, x0
    14c4:	ldr	x0, [sp, #40]
    14c8:	bl	144 <read_uleb128>
    14cc:	str	x0, [sp, #40]
    14d0:	add	x0, sp, #0x40
    14d4:	mov	x1, x0
    14d8:	ldr	x0, [sp, #40]
    14dc:	bl	1b8 <read_sleb128>
    14e0:	str	x0, [sp, #40]
    14e4:	ldr	x0, [sp, #80]
    14e8:	mov	w1, w0
    14ec:	ldr	x0, [sp, #24]
    14f0:	bl	78c <_Unwind_GetGR>
    14f4:	ldr	x1, [sp, #64]
    14f8:	add	x0, x0, x1
    14fc:	str	x0, [sp, #672]
    1500:	b	1bb8 <execute_stack_op+0x988>
    1504:	ldr	w0, [sp, #684]
    1508:	cmp	w0, #0x0
    150c:	b.ne	1514 <execute_stack_op+0x2e4>  // b.any
    1510:	bl	0 <abort>
    1514:	ldr	w0, [sp, #684]
    1518:	sub	w0, w0, #0x1
    151c:	sxtw	x0, w0
    1520:	lsl	x0, x0, #3
    1524:	add	x1, sp, #0x58
    1528:	ldr	x0, [x1, x0]
    152c:	str	x0, [sp, #672]
    1530:	b	1bb8 <execute_stack_op+0x988>
    1534:	ldr	w0, [sp, #684]
    1538:	cmp	w0, #0x0
    153c:	b.ne	1544 <execute_stack_op+0x314>  // b.any
    1540:	bl	0 <abort>
    1544:	ldr	w0, [sp, #684]
    1548:	sub	w0, w0, #0x1
    154c:	str	w0, [sp, #684]
    1550:	b	1bf8 <execute_stack_op+0x9c8>
    1554:	ldr	x0, [sp, #40]
    1558:	add	x1, x0, #0x1
    155c:	str	x1, [sp, #40]
    1560:	ldrb	w0, [x0]
    1564:	and	x0, x0, #0xff
    1568:	str	x0, [sp, #64]
    156c:	ldr	w0, [sp, #684]
    1570:	sub	w0, w0, #0x1
    1574:	sxtw	x1, w0
    1578:	ldr	x0, [sp, #64]
    157c:	cmp	x1, x0
    1580:	b.gt	1588 <execute_stack_op+0x358>
    1584:	bl	0 <abort>
    1588:	ldr	w0, [sp, #684]
    158c:	sub	w0, w0, #0x1
    1590:	sxtw	x1, w0
    1594:	ldr	x0, [sp, #64]
    1598:	sub	x0, x1, x0
    159c:	lsl	x0, x0, #3
    15a0:	add	x1, sp, #0x58
    15a4:	ldr	x0, [x1, x0]
    15a8:	str	x0, [sp, #672]
    15ac:	b	1bb8 <execute_stack_op+0x988>
    15b0:	ldr	w0, [sp, #684]
    15b4:	cmp	w0, #0x1
    15b8:	b.gt	15c0 <execute_stack_op+0x390>
    15bc:	bl	0 <abort>
    15c0:	ldr	w0, [sp, #684]
    15c4:	sub	w0, w0, #0x2
    15c8:	sxtw	x0, w0
    15cc:	lsl	x0, x0, #3
    15d0:	add	x1, sp, #0x58
    15d4:	ldr	x0, [x1, x0]
    15d8:	str	x0, [sp, #672]
    15dc:	b	1bb8 <execute_stack_op+0x988>
    15e0:	ldr	w0, [sp, #684]
    15e4:	cmp	w0, #0x1
    15e8:	b.gt	15f0 <execute_stack_op+0x3c0>
    15ec:	bl	0 <abort>
    15f0:	ldr	w0, [sp, #684]
    15f4:	sub	w0, w0, #0x1
    15f8:	sxtw	x0, w0
    15fc:	lsl	x0, x0, #3
    1600:	add	x1, sp, #0x58
    1604:	ldr	x0, [x1, x0]
    1608:	str	x0, [sp, #616]
    160c:	ldr	w0, [sp, #684]
    1610:	sub	w1, w0, #0x2
    1614:	ldr	w0, [sp, #684]
    1618:	sub	w3, w0, #0x1
    161c:	sxtw	x0, w1
    1620:	lsl	x0, x0, #3
    1624:	add	x1, sp, #0x58
    1628:	ldr	x2, [x1, x0]
    162c:	sxtw	x0, w3
    1630:	lsl	x0, x0, #3
    1634:	add	x1, sp, #0x58
    1638:	str	x2, [x1, x0]
    163c:	ldr	w0, [sp, #684]
    1640:	sub	w0, w0, #0x2
    1644:	sxtw	x0, w0
    1648:	lsl	x0, x0, #3
    164c:	add	x1, sp, #0x58
    1650:	ldr	x2, [sp, #616]
    1654:	str	x2, [x1, x0]
    1658:	b	1bf8 <execute_stack_op+0x9c8>
    165c:	ldr	w0, [sp, #684]
    1660:	cmp	w0, #0x2
    1664:	b.gt	166c <execute_stack_op+0x43c>
    1668:	bl	0 <abort>
    166c:	ldr	w0, [sp, #684]
    1670:	sub	w0, w0, #0x1
    1674:	sxtw	x0, w0
    1678:	lsl	x0, x0, #3
    167c:	add	x1, sp, #0x58
    1680:	ldr	x0, [x1, x0]
    1684:	str	x0, [sp, #640]
    1688:	ldr	w0, [sp, #684]
    168c:	sub	w0, w0, #0x2
    1690:	sxtw	x0, w0
    1694:	lsl	x0, x0, #3
    1698:	add	x1, sp, #0x58
    169c:	ldr	x0, [x1, x0]
    16a0:	str	x0, [sp, #632]
    16a4:	ldr	w0, [sp, #684]
    16a8:	sub	w0, w0, #0x3
    16ac:	sxtw	x0, w0
    16b0:	lsl	x0, x0, #3
    16b4:	add	x1, sp, #0x58
    16b8:	ldr	x0, [x1, x0]
    16bc:	str	x0, [sp, #624]
    16c0:	ldr	w0, [sp, #684]
    16c4:	sub	w0, w0, #0x1
    16c8:	sxtw	x0, w0
    16cc:	lsl	x0, x0, #3
    16d0:	add	x1, sp, #0x58
    16d4:	ldr	x2, [sp, #632]
    16d8:	str	x2, [x1, x0]
    16dc:	ldr	w0, [sp, #684]
    16e0:	sub	w0, w0, #0x2
    16e4:	sxtw	x0, w0
    16e8:	lsl	x0, x0, #3
    16ec:	add	x1, sp, #0x58
    16f0:	ldr	x2, [sp, #624]
    16f4:	str	x2, [x1, x0]
    16f8:	ldr	w0, [sp, #684]
    16fc:	sub	w0, w0, #0x3
    1700:	sxtw	x0, w0
    1704:	lsl	x0, x0, #3
    1708:	add	x1, sp, #0x58
    170c:	ldr	x2, [sp, #640]
    1710:	str	x2, [x1, x0]
    1714:	b	1bf8 <execute_stack_op+0x9c8>
    1718:	ldr	w0, [sp, #684]
    171c:	cmp	w0, #0x0
    1720:	b.ne	1728 <execute_stack_op+0x4f8>  // b.any
    1724:	bl	0 <abort>
    1728:	ldr	w0, [sp, #684]
    172c:	sub	w0, w0, #0x1
    1730:	str	w0, [sp, #684]
    1734:	ldrsw	x0, [sp, #684]
    1738:	lsl	x0, x0, #3
    173c:	add	x1, sp, #0x58
    1740:	ldr	x0, [x1, x0]
    1744:	str	x0, [sp, #672]
    1748:	ldr	w0, [sp, #668]
    174c:	cmp	w0, #0x94
    1750:	b.eq	17dc <execute_stack_op+0x5ac>  // b.none
    1754:	ldr	w0, [sp, #668]
    1758:	cmp	w0, #0x94
    175c:	b.hi	18e0 <execute_stack_op+0x6b0>  // b.pmore
    1760:	ldr	w0, [sp, #668]
    1764:	cmp	w0, #0x23
    1768:	b.eq	18b8 <execute_stack_op+0x688>  // b.none
    176c:	ldr	w0, [sp, #668]
    1770:	cmp	w0, #0x23
    1774:	b.hi	18e0 <execute_stack_op+0x6b0>  // b.pmore
    1778:	ldr	w0, [sp, #668]
    177c:	cmp	w0, #0x20
    1780:	b.eq	18a8 <execute_stack_op+0x678>  // b.none
    1784:	ldr	w0, [sp, #668]
    1788:	cmp	w0, #0x20
    178c:	b.hi	18e0 <execute_stack_op+0x6b0>  // b.pmore
    1790:	ldr	w0, [sp, #668]
    1794:	cmp	w0, #0x1f
    1798:	b.eq	1898 <execute_stack_op+0x668>  // b.none
    179c:	ldr	w0, [sp, #668]
    17a0:	cmp	w0, #0x1f
    17a4:	b.hi	18e0 <execute_stack_op+0x6b0>  // b.pmore
    17a8:	ldr	w0, [sp, #668]
    17ac:	cmp	w0, #0x6
    17b0:	b.eq	17c4 <execute_stack_op+0x594>  // b.none
    17b4:	ldr	w0, [sp, #668]
    17b8:	cmp	w0, #0x19
    17bc:	b.eq	187c <execute_stack_op+0x64c>  // b.none
    17c0:	b	18e0 <execute_stack_op+0x6b0>
    17c4:	ldr	x0, [sp, #672]
    17c8:	str	x0, [sp, #600]
    17cc:	ldr	x0, [sp, #600]
    17d0:	bl	5dc <read_pointer>
    17d4:	str	x0, [sp, #672]
    17d8:	b	18e8 <execute_stack_op+0x6b8>
    17dc:	ldr	x0, [sp, #672]
    17e0:	str	x0, [sp, #608]
    17e4:	ldr	x0, [sp, #40]
    17e8:	add	x1, x0, #0x1
    17ec:	str	x1, [sp, #40]
    17f0:	ldrb	w0, [x0]
    17f4:	cmp	w0, #0x8
    17f8:	b.eq	1864 <execute_stack_op+0x634>  // b.none
    17fc:	cmp	w0, #0x8
    1800:	b.gt	1874 <execute_stack_op+0x644>
    1804:	cmp	w0, #0x4
    1808:	b.eq	1850 <execute_stack_op+0x620>  // b.none
    180c:	cmp	w0, #0x4
    1810:	b.gt	1874 <execute_stack_op+0x644>
    1814:	cmp	w0, #0x1
    1818:	b.eq	1828 <execute_stack_op+0x5f8>  // b.none
    181c:	cmp	w0, #0x2
    1820:	b.eq	183c <execute_stack_op+0x60c>  // b.none
    1824:	b	1874 <execute_stack_op+0x644>
    1828:	ldr	x0, [sp, #608]
    182c:	bl	5fc <read_1u>
    1830:	sxtw	x0, w0
    1834:	str	x0, [sp, #672]
    1838:	b	1878 <execute_stack_op+0x648>
    183c:	ldr	x0, [sp, #608]
    1840:	bl	62c <read_2u>
    1844:	sxtw	x0, w0
    1848:	str	x0, [sp, #672]
    184c:	b	1878 <execute_stack_op+0x648>
    1850:	ldr	x0, [sp, #608]
    1854:	bl	66c <read_4u>
    1858:	mov	w0, w0
    185c:	str	x0, [sp, #672]
    1860:	b	1878 <execute_stack_op+0x648>
    1864:	ldr	x0, [sp, #608]
    1868:	bl	6ac <read_8u>
    186c:	str	x0, [sp, #672]
    1870:	b	1878 <execute_stack_op+0x648>
    1874:	bl	0 <abort>
    1878:	b	18e8 <execute_stack_op+0x6b8>
    187c:	ldr	x0, [sp, #672]
    1880:	cmp	x0, #0x0
    1884:	b.ge	18e4 <execute_stack_op+0x6b4>  // b.tcont
    1888:	ldr	x0, [sp, #672]
    188c:	neg	x0, x0
    1890:	str	x0, [sp, #672]
    1894:	b	18e4 <execute_stack_op+0x6b4>
    1898:	ldr	x0, [sp, #672]
    189c:	neg	x0, x0
    18a0:	str	x0, [sp, #672]
    18a4:	b	18e8 <execute_stack_op+0x6b8>
    18a8:	ldr	x0, [sp, #672]
    18ac:	mvn	x0, x0
    18b0:	str	x0, [sp, #672]
    18b4:	b	18e8 <execute_stack_op+0x6b8>
    18b8:	add	x0, sp, #0x48
    18bc:	mov	x1, x0
    18c0:	ldr	x0, [sp, #40]
    18c4:	bl	144 <read_uleb128>
    18c8:	str	x0, [sp, #40]
    18cc:	ldr	x0, [sp, #72]
    18d0:	ldr	x1, [sp, #672]
    18d4:	add	x0, x1, x0
    18d8:	str	x0, [sp, #672]
    18dc:	b	18e8 <execute_stack_op+0x6b8>
    18e0:	bl	0 <abort>
    18e4:	nop
    18e8:	b	1bb8 <execute_stack_op+0x988>
    18ec:	ldr	w0, [sp, #684]
    18f0:	cmp	w0, #0x1
    18f4:	b.gt	18fc <execute_stack_op+0x6cc>
    18f8:	bl	0 <abort>
    18fc:	ldr	w0, [sp, #684]
    1900:	sub	w0, w0, #0x2
    1904:	str	w0, [sp, #684]
    1908:	ldrsw	x0, [sp, #684]
    190c:	lsl	x0, x0, #3
    1910:	add	x1, sp, #0x58
    1914:	ldr	x0, [x1, x0]
    1918:	str	x0, [sp, #656]
    191c:	ldr	w0, [sp, #684]
    1920:	add	w0, w0, #0x1
    1924:	sxtw	x0, w0
    1928:	lsl	x0, x0, #3
    192c:	add	x1, sp, #0x58
    1930:	ldr	x0, [x1, x0]
    1934:	str	x0, [sp, #648]
    1938:	ldr	w0, [sp, #668]
    193c:	sub	w0, w0, #0x1a
    1940:	cmp	w0, #0x14
    1944:	b.hi	1b10 <execute_stack_op+0x8e0>  // b.pmore
    1948:	adrp	x1, 0 <aarch64_vg>
    194c:	add	x1, x1, #0x0
    1950:	ldr	w0, [x1, w0, uxtw #2]
    1954:	adr	x1, 1960 <execute_stack_op+0x730>
    1958:	add	x0, x1, w0, sxtw #2
    195c:	br	x0
    1960:	ldr	x1, [sp, #656]
    1964:	ldr	x0, [sp, #648]
    1968:	and	x0, x1, x0
    196c:	str	x0, [sp, #672]
    1970:	b	1b14 <execute_stack_op+0x8e4>
    1974:	ldr	x1, [sp, #656]
    1978:	ldr	x0, [sp, #648]
    197c:	sdiv	x0, x1, x0
    1980:	str	x0, [sp, #672]
    1984:	b	1b14 <execute_stack_op+0x8e4>
    1988:	ldr	x1, [sp, #656]
    198c:	ldr	x0, [sp, #648]
    1990:	sub	x0, x1, x0
    1994:	str	x0, [sp, #672]
    1998:	b	1b14 <execute_stack_op+0x8e4>
    199c:	ldr	x0, [sp, #656]
    19a0:	ldr	x1, [sp, #648]
    19a4:	udiv	x2, x0, x1
    19a8:	ldr	x1, [sp, #648]
    19ac:	mul	x1, x2, x1
    19b0:	sub	x0, x0, x1
    19b4:	str	x0, [sp, #672]
    19b8:	b	1b14 <execute_stack_op+0x8e4>
    19bc:	ldr	x1, [sp, #656]
    19c0:	ldr	x0, [sp, #648]
    19c4:	mul	x0, x1, x0
    19c8:	str	x0, [sp, #672]
    19cc:	b	1b14 <execute_stack_op+0x8e4>
    19d0:	ldr	x1, [sp, #656]
    19d4:	ldr	x0, [sp, #648]
    19d8:	orr	x0, x1, x0
    19dc:	str	x0, [sp, #672]
    19e0:	b	1b14 <execute_stack_op+0x8e4>
    19e4:	ldr	x1, [sp, #656]
    19e8:	ldr	x0, [sp, #648]
    19ec:	add	x0, x1, x0
    19f0:	str	x0, [sp, #672]
    19f4:	b	1b14 <execute_stack_op+0x8e4>
    19f8:	ldr	x0, [sp, #648]
    19fc:	mov	w1, w0
    1a00:	ldr	x0, [sp, #656]
    1a04:	lsl	x0, x0, x1
    1a08:	str	x0, [sp, #672]
    1a0c:	b	1b14 <execute_stack_op+0x8e4>
    1a10:	ldr	x0, [sp, #648]
    1a14:	mov	w1, w0
    1a18:	ldr	x0, [sp, #656]
    1a1c:	lsr	x0, x0, x1
    1a20:	str	x0, [sp, #672]
    1a24:	b	1b14 <execute_stack_op+0x8e4>
    1a28:	ldr	x0, [sp, #656]
    1a2c:	ldr	x1, [sp, #648]
    1a30:	asr	x0, x0, x1
    1a34:	str	x0, [sp, #672]
    1a38:	b	1b14 <execute_stack_op+0x8e4>
    1a3c:	ldr	x1, [sp, #656]
    1a40:	ldr	x0, [sp, #648]
    1a44:	eor	x0, x1, x0
    1a48:	str	x0, [sp, #672]
    1a4c:	b	1b14 <execute_stack_op+0x8e4>
    1a50:	ldr	x1, [sp, #656]
    1a54:	ldr	x0, [sp, #648]
    1a58:	cmp	x1, x0
    1a5c:	cset	w0, le
    1a60:	and	w0, w0, #0xff
    1a64:	and	x0, x0, #0xff
    1a68:	str	x0, [sp, #672]
    1a6c:	b	1b14 <execute_stack_op+0x8e4>
    1a70:	ldr	x1, [sp, #656]
    1a74:	ldr	x0, [sp, #648]
    1a78:	cmp	x1, x0
    1a7c:	cset	w0, ge  // ge = tcont
    1a80:	and	w0, w0, #0xff
    1a84:	and	x0, x0, #0xff
    1a88:	str	x0, [sp, #672]
    1a8c:	b	1b14 <execute_stack_op+0x8e4>
    1a90:	ldr	x1, [sp, #656]
    1a94:	ldr	x0, [sp, #648]
    1a98:	cmp	x1, x0
    1a9c:	cset	w0, eq  // eq = none
    1aa0:	and	w0, w0, #0xff
    1aa4:	and	x0, x0, #0xff
    1aa8:	str	x0, [sp, #672]
    1aac:	b	1b14 <execute_stack_op+0x8e4>
    1ab0:	ldr	x1, [sp, #656]
    1ab4:	ldr	x0, [sp, #648]
    1ab8:	cmp	x1, x0
    1abc:	cset	w0, lt  // lt = tstop
    1ac0:	and	w0, w0, #0xff
    1ac4:	and	x0, x0, #0xff
    1ac8:	str	x0, [sp, #672]
    1acc:	b	1b14 <execute_stack_op+0x8e4>
    1ad0:	ldr	x1, [sp, #656]
    1ad4:	ldr	x0, [sp, #648]
    1ad8:	cmp	x1, x0
    1adc:	cset	w0, gt
    1ae0:	and	w0, w0, #0xff
    1ae4:	and	x0, x0, #0xff
    1ae8:	str	x0, [sp, #672]
    1aec:	b	1b14 <execute_stack_op+0x8e4>
    1af0:	ldr	x1, [sp, #656]
    1af4:	ldr	x0, [sp, #648]
    1af8:	cmp	x1, x0
    1afc:	cset	w0, ne  // ne = any
    1b00:	and	w0, w0, #0xff
    1b04:	and	x0, x0, #0xff
    1b08:	str	x0, [sp, #672]
    1b0c:	b	1b14 <execute_stack_op+0x8e4>
    1b10:	bl	0 <abort>
    1b14:	b	1bb8 <execute_stack_op+0x988>
    1b18:	ldr	x0, [sp, #40]
    1b1c:	bl	64c <read_2s>
    1b20:	sxtw	x0, w0
    1b24:	str	x0, [sp, #64]
    1b28:	ldr	x0, [sp, #40]
    1b2c:	add	x0, x0, #0x2
    1b30:	str	x0, [sp, #40]
    1b34:	ldr	x0, [sp, #64]
    1b38:	mov	x1, x0
    1b3c:	ldr	x0, [sp, #40]
    1b40:	add	x0, x0, x1
    1b44:	str	x0, [sp, #40]
    1b48:	b	1bf8 <execute_stack_op+0x9c8>
    1b4c:	ldr	w0, [sp, #684]
    1b50:	cmp	w0, #0x0
    1b54:	b.ne	1b5c <execute_stack_op+0x92c>  // b.any
    1b58:	bl	0 <abort>
    1b5c:	ldr	w0, [sp, #684]
    1b60:	sub	w0, w0, #0x1
    1b64:	str	w0, [sp, #684]
    1b68:	ldr	x0, [sp, #40]
    1b6c:	bl	64c <read_2s>
    1b70:	sxtw	x0, w0
    1b74:	str	x0, [sp, #64]
    1b78:	ldr	x0, [sp, #40]
    1b7c:	add	x0, x0, #0x2
    1b80:	str	x0, [sp, #40]
    1b84:	ldrsw	x0, [sp, #684]
    1b88:	lsl	x0, x0, #3
    1b8c:	add	x1, sp, #0x58
    1b90:	ldr	x0, [x1, x0]
    1b94:	cmp	x0, #0x0
    1b98:	b.eq	1bf4 <execute_stack_op+0x9c4>  // b.none
    1b9c:	ldr	x0, [sp, #64]
    1ba0:	mov	x1, x0
    1ba4:	ldr	x0, [sp, #40]
    1ba8:	add	x0, x0, x1
    1bac:	str	x0, [sp, #40]
    1bb0:	b	1bf4 <execute_stack_op+0x9c4>
    1bb4:	bl	0 <abort>
    1bb8:	ldr	w0, [sp, #684]
    1bbc:	cmp	w0, #0x3f
    1bc0:	b.ls	1bc8 <execute_stack_op+0x998>  // b.plast
    1bc4:	bl	0 <abort>
    1bc8:	ldr	w0, [sp, #684]
    1bcc:	add	w1, w0, #0x1
    1bd0:	str	w1, [sp, #684]
    1bd4:	sxtw	x0, w0
    1bd8:	lsl	x0, x0, #3
    1bdc:	add	x1, sp, #0x58
    1be0:	ldr	x2, [sp, #672]
    1be4:	str	x2, [x1, x0]
    1be8:	b	1bf8 <execute_stack_op+0x9c8>
    1bec:	nop
    1bf0:	b	1bf8 <execute_stack_op+0x9c8>
    1bf4:	nop
    1bf8:	ldr	x1, [sp, #40]
    1bfc:	ldr	x0, [sp, #32]
    1c00:	cmp	x1, x0
    1c04:	b.cc	1260 <execute_stack_op+0x30>  // b.lo, b.ul, b.last
    1c08:	ldr	w0, [sp, #684]
    1c0c:	cmp	w0, #0x0
    1c10:	b.ne	1c18 <execute_stack_op+0x9e8>  // b.any
    1c14:	bl	0 <abort>
    1c18:	ldr	w0, [sp, #684]
    1c1c:	sub	w0, w0, #0x1
    1c20:	str	w0, [sp, #684]
    1c24:	ldrsw	x0, [sp, #684]
    1c28:	lsl	x0, x0, #3
    1c2c:	add	x1, sp, #0x58
    1c30:	ldr	x0, [x1, x0]
    1c34:	b	1c3c <execute_stack_op+0xa0c>
    1c38:	bl	3e50 <_Unwind_Resume>
    1c3c:	ldp	x29, x30, [sp]
    1c40:	add	sp, sp, #0x2b0
    1c44:	ret

0000000000001c48 <execute_cfa_program>:
    1c48:	stp	x29, x30, [sp, #-144]!
    1c4c:	mov	x29, sp
    1c50:	stp	x19, x20, [sp, #16]
    1c54:	str	x0, [x29, #56]
    1c58:	str	x1, [x29, #48]
    1c5c:	str	x2, [x29, #40]
    1c60:	str	x3, [x29, #32]
    1c64:	str	xzr, [x29, #136]
    1c68:	ldr	x0, [x29, #32]
    1c6c:	str	xzr, [x0, #1568]
    1c70:	b	2718 <execute_cfa_program+0xad0>
    1c74:	ldr	x0, [x29, #56]
    1c78:	add	x1, x0, #0x1
    1c7c:	str	x1, [x29, #56]
    1c80:	ldrb	w0, [x0]
    1c84:	strb	w0, [x29, #127]
    1c88:	ldrb	w0, [x29, #127]
    1c8c:	and	w0, w0, #0xc0
    1c90:	cmp	w0, #0x40
    1c94:	b.ne	1cc4 <execute_cfa_program+0x7c>  // b.any
    1c98:	ldr	x0, [x29, #32]
    1c9c:	ldr	x1, [x0, #1608]
    1ca0:	ldrb	w0, [x29, #127]
    1ca4:	and	x2, x0, #0x3f
    1ca8:	ldr	x0, [x29, #32]
    1cac:	ldr	x0, [x0, #1632]
    1cb0:	mul	x0, x2, x0
    1cb4:	add	x1, x1, x0
    1cb8:	ldr	x0, [x29, #32]
    1cbc:	str	x1, [x0, #1608]
    1cc0:	b	2718 <execute_cfa_program+0xad0>
    1cc4:	ldrb	w0, [x29, #127]
    1cc8:	and	w0, w0, #0xc0
    1ccc:	cmp	w0, #0x80
    1cd0:	b.ne	1d60 <execute_cfa_program+0x118>  // b.any
    1cd4:	ldrb	w0, [x29, #127]
    1cd8:	and	x0, x0, #0x3f
    1cdc:	str	x0, [x29, #96]
    1ce0:	add	x0, x29, #0x58
    1ce4:	mov	x1, x0
    1ce8:	ldr	x0, [x29, #56]
    1cec:	bl	144 <read_uleb128>
    1cf0:	str	x0, [x29, #56]
    1cf4:	ldr	x0, [x29, #32]
    1cf8:	ldr	x0, [x0, #1624]
    1cfc:	ldr	x1, [x29, #88]
    1d00:	mul	x0, x0, x1
    1d04:	str	x0, [x29, #112]
    1d08:	ldr	x0, [x29, #96]
    1d0c:	str	x0, [x29, #96]
    1d10:	ldr	x0, [x29, #96]
    1d14:	cmp	x0, #0x61
    1d18:	cset	w0, ls  // ls = plast
    1d1c:	and	w0, w0, #0xff
    1d20:	and	x0, x0, #0xff
    1d24:	cmp	x0, #0x0
    1d28:	b.eq	2718 <execute_cfa_program+0xad0>  // b.none
    1d2c:	ldr	x0, [x29, #96]
    1d30:	ldr	x1, [x29, #32]
    1d34:	lsl	x0, x0, #4
    1d38:	add	x0, x1, x0
    1d3c:	mov	w1, #0x1                   	// #1
    1d40:	str	w1, [x0, #8]
    1d44:	ldr	x0, [x29, #96]
    1d48:	ldr	x1, [x29, #32]
    1d4c:	lsl	x0, x0, #4
    1d50:	add	x0, x1, x0
    1d54:	ldr	x1, [x29, #112]
    1d58:	str	x1, [x0]
    1d5c:	b	2718 <execute_cfa_program+0xad0>
    1d60:	ldrb	w0, [x29, #127]
    1d64:	and	w0, w0, #0xc0
    1d68:	cmp	w0, #0xc0
    1d6c:	b.ne	1db8 <execute_cfa_program+0x170>  // b.any
    1d70:	ldrb	w0, [x29, #127]
    1d74:	and	x0, x0, #0x3f
    1d78:	str	x0, [x29, #96]
    1d7c:	ldr	x0, [x29, #96]
    1d80:	str	x0, [x29, #96]
    1d84:	ldr	x0, [x29, #96]
    1d88:	cmp	x0, #0x61
    1d8c:	cset	w0, ls  // ls = plast
    1d90:	and	w0, w0, #0xff
    1d94:	and	x0, x0, #0xff
    1d98:	cmp	x0, #0x0
    1d9c:	b.eq	2718 <execute_cfa_program+0xad0>  // b.none
    1da0:	ldr	x0, [x29, #96]
    1da4:	ldr	x1, [x29, #32]
    1da8:	lsl	x0, x0, #4
    1dac:	add	x0, x1, x0
    1db0:	str	wzr, [x0, #8]
    1db4:	b	2718 <execute_cfa_program+0xad0>
    1db8:	ldrb	w0, [x29, #127]
    1dbc:	cmp	w0, #0x2f
    1dc0:	b.hi	26c8 <execute_cfa_program+0xa80>  // b.pmore
    1dc4:	adrp	x1, 0 <aarch64_vg>
    1dc8:	add	x1, x1, #0x0
    1dcc:	ldr	w0, [x1, w0, uxtw #2]
    1dd0:	adr	x1, 1ddc <execute_cfa_program+0x194>
    1dd4:	add	x0, x1, w0, sxtw #2
    1dd8:	br	x0
    1ddc:	ldr	x0, [x29, #32]
    1de0:	ldrb	w1, [x0, #1648]
    1de4:	add	x0, x29, #0x48
    1de8:	mov	x3, x0
    1dec:	ldr	x2, [x29, #56]
    1df0:	ldr	x0, [x29, #40]
    1df4:	bl	4cc <read_encoded_value>
    1df8:	str	x0, [x29, #56]
    1dfc:	ldr	x0, [x29, #72]
    1e00:	mov	x1, x0
    1e04:	ldr	x0, [x29, #32]
    1e08:	str	x1, [x0, #1608]
    1e0c:	b	2718 <execute_cfa_program+0xad0>
    1e10:	ldr	x0, [x29, #56]
    1e14:	bl	5fc <read_1u>
    1e18:	sxtw	x1, w0
    1e1c:	ldr	x0, [x29, #32]
    1e20:	ldr	x0, [x0, #1632]
    1e24:	mul	x0, x1, x0
    1e28:	ldr	x1, [x29, #32]
    1e2c:	ldr	x1, [x1, #1608]
    1e30:	add	x1, x1, x0
    1e34:	ldr	x0, [x29, #32]
    1e38:	str	x1, [x0, #1608]
    1e3c:	ldr	x0, [x29, #56]
    1e40:	add	x0, x0, #0x1
    1e44:	str	x0, [x29, #56]
    1e48:	b	2718 <execute_cfa_program+0xad0>
    1e4c:	ldr	x0, [x29, #56]
    1e50:	bl	62c <read_2u>
    1e54:	sxtw	x1, w0
    1e58:	ldr	x0, [x29, #32]
    1e5c:	ldr	x0, [x0, #1632]
    1e60:	mul	x0, x1, x0
    1e64:	ldr	x1, [x29, #32]
    1e68:	ldr	x1, [x1, #1608]
    1e6c:	add	x1, x1, x0
    1e70:	ldr	x0, [x29, #32]
    1e74:	str	x1, [x0, #1608]
    1e78:	ldr	x0, [x29, #56]
    1e7c:	add	x0, x0, #0x2
    1e80:	str	x0, [x29, #56]
    1e84:	b	2718 <execute_cfa_program+0xad0>
    1e88:	ldr	x0, [x29, #56]
    1e8c:	bl	66c <read_4u>
    1e90:	mov	w1, w0
    1e94:	ldr	x0, [x29, #32]
    1e98:	ldr	x0, [x0, #1632]
    1e9c:	mul	x0, x1, x0
    1ea0:	ldr	x1, [x29, #32]
    1ea4:	ldr	x1, [x1, #1608]
    1ea8:	add	x1, x1, x0
    1eac:	ldr	x0, [x29, #32]
    1eb0:	str	x1, [x0, #1608]
    1eb4:	ldr	x0, [x29, #56]
    1eb8:	add	x0, x0, #0x4
    1ebc:	str	x0, [x29, #56]
    1ec0:	b	2718 <execute_cfa_program+0xad0>
    1ec4:	add	x0, x29, #0x60
    1ec8:	mov	x1, x0
    1ecc:	ldr	x0, [x29, #56]
    1ed0:	bl	144 <read_uleb128>
    1ed4:	str	x0, [x29, #56]
    1ed8:	add	x0, x29, #0x58
    1edc:	mov	x1, x0
    1ee0:	ldr	x0, [x29, #56]
    1ee4:	bl	144 <read_uleb128>
    1ee8:	str	x0, [x29, #56]
    1eec:	ldr	x0, [x29, #32]
    1ef0:	ldr	x0, [x0, #1624]
    1ef4:	ldr	x1, [x29, #88]
    1ef8:	mul	x0, x0, x1
    1efc:	str	x0, [x29, #112]
    1f00:	ldr	x0, [x29, #96]
    1f04:	str	x0, [x29, #96]
    1f08:	ldr	x0, [x29, #96]
    1f0c:	cmp	x0, #0x61
    1f10:	cset	w0, ls  // ls = plast
    1f14:	and	w0, w0, #0xff
    1f18:	and	x0, x0, #0xff
    1f1c:	cmp	x0, #0x0
    1f20:	b.eq	26d4 <execute_cfa_program+0xa8c>  // b.none
    1f24:	ldr	x0, [x29, #96]
    1f28:	ldr	x1, [x29, #32]
    1f2c:	lsl	x0, x0, #4
    1f30:	add	x0, x1, x0
    1f34:	mov	w1, #0x1                   	// #1
    1f38:	str	w1, [x0, #8]
    1f3c:	ldr	x0, [x29, #96]
    1f40:	ldr	x1, [x29, #32]
    1f44:	lsl	x0, x0, #4
    1f48:	add	x0, x1, x0
    1f4c:	ldr	x1, [x29, #112]
    1f50:	str	x1, [x0]
    1f54:	b	26d4 <execute_cfa_program+0xa8c>
    1f58:	add	x0, x29, #0x60
    1f5c:	mov	x1, x0
    1f60:	ldr	x0, [x29, #56]
    1f64:	bl	144 <read_uleb128>
    1f68:	str	x0, [x29, #56]
    1f6c:	ldr	x0, [x29, #96]
    1f70:	str	x0, [x29, #96]
    1f74:	ldr	x0, [x29, #96]
    1f78:	cmp	x0, #0x61
    1f7c:	cset	w0, ls  // ls = plast
    1f80:	and	w0, w0, #0xff
    1f84:	and	x0, x0, #0xff
    1f88:	cmp	x0, #0x0
    1f8c:	b.eq	26dc <execute_cfa_program+0xa94>  // b.none
    1f90:	ldr	x0, [x29, #96]
    1f94:	ldr	x1, [x29, #32]
    1f98:	lsl	x0, x0, #4
    1f9c:	add	x0, x1, x0
    1fa0:	str	wzr, [x0, #8]
    1fa4:	b	26dc <execute_cfa_program+0xa94>
    1fa8:	add	x0, x29, #0x60
    1fac:	mov	x1, x0
    1fb0:	ldr	x0, [x29, #56]
    1fb4:	bl	144 <read_uleb128>
    1fb8:	str	x0, [x29, #56]
    1fbc:	ldr	x0, [x29, #96]
    1fc0:	str	x0, [x29, #96]
    1fc4:	ldr	x0, [x29, #96]
    1fc8:	cmp	x0, #0x61
    1fcc:	cset	w0, ls  // ls = plast
    1fd0:	and	w0, w0, #0xff
    1fd4:	and	x0, x0, #0xff
    1fd8:	cmp	x0, #0x0
    1fdc:	b.eq	26e4 <execute_cfa_program+0xa9c>  // b.none
    1fe0:	ldr	x0, [x29, #96]
    1fe4:	ldr	x1, [x29, #32]
    1fe8:	lsl	x0, x0, #4
    1fec:	add	x0, x1, x0
    1ff0:	str	wzr, [x0, #8]
    1ff4:	b	26e4 <execute_cfa_program+0xa9c>
    1ff8:	add	x0, x29, #0x60
    1ffc:	mov	x1, x0
    2000:	ldr	x0, [x29, #56]
    2004:	bl	144 <read_uleb128>
    2008:	str	x0, [x29, #56]
    200c:	ldr	x0, [x29, #96]
    2010:	str	x0, [x29, #96]
    2014:	ldr	x0, [x29, #96]
    2018:	cmp	x0, #0x61
    201c:	cset	w0, ls  // ls = plast
    2020:	and	w0, w0, #0xff
    2024:	and	x0, x0, #0xff
    2028:	cmp	x0, #0x0
    202c:	b.eq	26ec <execute_cfa_program+0xaa4>  // b.none
    2030:	ldr	x0, [x29, #96]
    2034:	ldr	x1, [x29, #32]
    2038:	lsl	x0, x0, #4
    203c:	add	x0, x1, x0
    2040:	mov	w1, #0x6                   	// #6
    2044:	str	w1, [x0, #8]
    2048:	b	26ec <execute_cfa_program+0xaa4>
    204c:	add	x0, x29, #0x60
    2050:	mov	x1, x0
    2054:	ldr	x0, [x29, #56]
    2058:	bl	144 <read_uleb128>
    205c:	str	x0, [x29, #56]
    2060:	add	x0, x29, #0x40
    2064:	mov	x1, x0
    2068:	ldr	x0, [x29, #56]
    206c:	bl	144 <read_uleb128>
    2070:	str	x0, [x29, #56]
    2074:	ldr	x0, [x29, #96]
    2078:	str	x0, [x29, #96]
    207c:	ldr	x0, [x29, #96]
    2080:	cmp	x0, #0x61
    2084:	cset	w0, ls  // ls = plast
    2088:	and	w0, w0, #0xff
    208c:	and	x0, x0, #0xff
    2090:	cmp	x0, #0x0
    2094:	b.eq	26f4 <execute_cfa_program+0xaac>  // b.none
    2098:	ldr	x0, [x29, #96]
    209c:	ldr	x1, [x29, #32]
    20a0:	lsl	x0, x0, #4
    20a4:	add	x0, x1, x0
    20a8:	mov	w1, #0x2                   	// #2
    20ac:	str	w1, [x0, #8]
    20b0:	ldr	x0, [x29, #96]
    20b4:	ldr	x1, [x29, #64]
    20b8:	ldr	x2, [x29, #32]
    20bc:	lsl	x0, x0, #4
    20c0:	add	x0, x2, x0
    20c4:	str	x1, [x0]
    20c8:	b	26f4 <execute_cfa_program+0xaac>
    20cc:	ldr	x0, [x29, #136]
    20d0:	cmp	x0, #0x0
    20d4:	b.eq	20f0 <execute_cfa_program+0x4a8>  // b.none
    20d8:	ldr	x0, [x29, #136]
    20dc:	str	x0, [x29, #128]
    20e0:	ldr	x0, [x29, #136]
    20e4:	ldr	x0, [x0, #1568]
    20e8:	str	x0, [x29, #136]
    20ec:	b	2108 <execute_cfa_program+0x4c0>
    20f0:	sub	sp, sp, #0x650
    20f4:	mov	x0, sp
    20f8:	add	x0, x0, #0xf
    20fc:	lsr	x0, x0, #4
    2100:	lsl	x0, x0, #4
    2104:	str	x0, [x29, #128]
    2108:	ldr	x1, [x29, #128]
    210c:	ldr	x0, [x29, #32]
    2110:	mov	x3, x1
    2114:	mov	x1, x0
    2118:	mov	x0, #0x648                 	// #1608
    211c:	mov	x2, x0
    2120:	mov	x0, x3
    2124:	bl	0 <memcpy>
    2128:	ldr	x0, [x29, #32]
    212c:	ldr	x1, [x29, #128]
    2130:	str	x1, [x0, #1568]
    2134:	b	2718 <execute_cfa_program+0xad0>
    2138:	ldr	x0, [x29, #32]
    213c:	ldr	x0, [x0, #1568]
    2140:	str	x0, [x29, #104]
    2144:	ldr	x1, [x29, #32]
    2148:	ldr	x0, [x29, #104]
    214c:	mov	x3, x1
    2150:	mov	x1, x0
    2154:	mov	x0, #0x648                 	// #1608
    2158:	mov	x2, x0
    215c:	mov	x0, x3
    2160:	bl	0 <memcpy>
    2164:	ldr	x0, [x29, #104]
    2168:	ldr	x1, [x29, #136]
    216c:	str	x1, [x0, #1568]
    2170:	ldr	x0, [x29, #104]
    2174:	str	x0, [x29, #136]
    2178:	b	2718 <execute_cfa_program+0xad0>
    217c:	add	x0, x29, #0x58
    2180:	mov	x1, x0
    2184:	ldr	x0, [x29, #56]
    2188:	bl	144 <read_uleb128>
    218c:	str	x0, [x29, #56]
    2190:	ldr	x1, [x29, #88]
    2194:	ldr	x0, [x29, #32]
    2198:	str	x1, [x0, #1584]
    219c:	add	x0, x29, #0x58
    21a0:	mov	x1, x0
    21a4:	ldr	x0, [x29, #56]
    21a8:	bl	144 <read_uleb128>
    21ac:	str	x0, [x29, #56]
    21b0:	ldr	x0, [x29, #88]
    21b4:	mov	x1, x0
    21b8:	ldr	x0, [x29, #32]
    21bc:	str	x1, [x0, #1576]
    21c0:	ldr	x0, [x29, #32]
    21c4:	mov	w1, #0x1                   	// #1
    21c8:	str	w1, [x0, #1600]
    21cc:	b	2718 <execute_cfa_program+0xad0>
    21d0:	add	x0, x29, #0x58
    21d4:	mov	x1, x0
    21d8:	ldr	x0, [x29, #56]
    21dc:	bl	144 <read_uleb128>
    21e0:	str	x0, [x29, #56]
    21e4:	ldr	x1, [x29, #88]
    21e8:	ldr	x0, [x29, #32]
    21ec:	str	x1, [x0, #1584]
    21f0:	ldr	x0, [x29, #32]
    21f4:	mov	w1, #0x1                   	// #1
    21f8:	str	w1, [x0, #1600]
    21fc:	b	2718 <execute_cfa_program+0xad0>
    2200:	add	x0, x29, #0x58
    2204:	mov	x1, x0
    2208:	ldr	x0, [x29, #56]
    220c:	bl	144 <read_uleb128>
    2210:	str	x0, [x29, #56]
    2214:	ldr	x0, [x29, #88]
    2218:	mov	x1, x0
    221c:	ldr	x0, [x29, #32]
    2220:	str	x1, [x0, #1576]
    2224:	b	2718 <execute_cfa_program+0xad0>
    2228:	ldr	x0, [x29, #32]
    222c:	ldr	x1, [x29, #56]
    2230:	str	x1, [x0, #1592]
    2234:	ldr	x0, [x29, #32]
    2238:	mov	w1, #0x2                   	// #2
    223c:	str	w1, [x0, #1600]
    2240:	add	x0, x29, #0x58
    2244:	mov	x1, x0
    2248:	ldr	x0, [x29, #56]
    224c:	bl	144 <read_uleb128>
    2250:	str	x0, [x29, #56]
    2254:	ldr	x0, [x29, #88]
    2258:	ldr	x1, [x29, #56]
    225c:	add	x0, x1, x0
    2260:	str	x0, [x29, #56]
    2264:	b	2718 <execute_cfa_program+0xad0>
    2268:	add	x0, x29, #0x60
    226c:	mov	x1, x0
    2270:	ldr	x0, [x29, #56]
    2274:	bl	144 <read_uleb128>
    2278:	str	x0, [x29, #56]
    227c:	ldr	x0, [x29, #96]
    2280:	str	x0, [x29, #96]
    2284:	ldr	x0, [x29, #96]
    2288:	cmp	x0, #0x61
    228c:	cset	w0, ls  // ls = plast
    2290:	and	w0, w0, #0xff
    2294:	and	x0, x0, #0xff
    2298:	cmp	x0, #0x0
    229c:	b.eq	22d0 <execute_cfa_program+0x688>  // b.none
    22a0:	ldr	x0, [x29, #96]
    22a4:	ldr	x1, [x29, #32]
    22a8:	lsl	x0, x0, #4
    22ac:	add	x0, x1, x0
    22b0:	mov	w1, #0x3                   	// #3
    22b4:	str	w1, [x0, #8]
    22b8:	ldr	x0, [x29, #96]
    22bc:	ldr	x1, [x29, #32]
    22c0:	lsl	x0, x0, #4
    22c4:	add	x0, x1, x0
    22c8:	ldr	x1, [x29, #56]
    22cc:	str	x1, [x0]
    22d0:	add	x0, x29, #0x58
    22d4:	mov	x1, x0
    22d8:	ldr	x0, [x29, #56]
    22dc:	bl	144 <read_uleb128>
    22e0:	str	x0, [x29, #56]
    22e4:	ldr	x0, [x29, #88]
    22e8:	ldr	x1, [x29, #56]
    22ec:	add	x0, x1, x0
    22f0:	str	x0, [x29, #56]
    22f4:	b	2718 <execute_cfa_program+0xad0>
    22f8:	add	x0, x29, #0x60
    22fc:	mov	x1, x0
    2300:	ldr	x0, [x29, #56]
    2304:	bl	144 <read_uleb128>
    2308:	str	x0, [x29, #56]
    230c:	add	x0, x29, #0x50
    2310:	mov	x1, x0
    2314:	ldr	x0, [x29, #56]
    2318:	bl	1b8 <read_sleb128>
    231c:	str	x0, [x29, #56]
    2320:	ldr	x0, [x29, #32]
    2324:	ldr	x1, [x0, #1624]
    2328:	ldr	x0, [x29, #80]
    232c:	mul	x0, x1, x0
    2330:	str	x0, [x29, #112]
    2334:	ldr	x0, [x29, #96]
    2338:	str	x0, [x29, #96]
    233c:	ldr	x0, [x29, #96]
    2340:	cmp	x0, #0x61
    2344:	cset	w0, ls  // ls = plast
    2348:	and	w0, w0, #0xff
    234c:	and	x0, x0, #0xff
    2350:	cmp	x0, #0x0
    2354:	b.eq	26fc <execute_cfa_program+0xab4>  // b.none
    2358:	ldr	x0, [x29, #96]
    235c:	ldr	x1, [x29, #32]
    2360:	lsl	x0, x0, #4
    2364:	add	x0, x1, x0
    2368:	mov	w1, #0x1                   	// #1
    236c:	str	w1, [x0, #8]
    2370:	ldr	x0, [x29, #96]
    2374:	ldr	x1, [x29, #32]
    2378:	lsl	x0, x0, #4
    237c:	add	x0, x1, x0
    2380:	ldr	x1, [x29, #112]
    2384:	str	x1, [x0]
    2388:	b	26fc <execute_cfa_program+0xab4>
    238c:	add	x0, x29, #0x58
    2390:	mov	x1, x0
    2394:	ldr	x0, [x29, #56]
    2398:	bl	144 <read_uleb128>
    239c:	str	x0, [x29, #56]
    23a0:	ldr	x1, [x29, #88]
    23a4:	ldr	x0, [x29, #32]
    23a8:	str	x1, [x0, #1584]
    23ac:	add	x0, x29, #0x50
    23b0:	mov	x1, x0
    23b4:	ldr	x0, [x29, #56]
    23b8:	bl	1b8 <read_sleb128>
    23bc:	str	x0, [x29, #56]
    23c0:	ldr	x1, [x29, #80]
    23c4:	ldr	x0, [x29, #32]
    23c8:	str	x1, [x0, #1576]
    23cc:	ldr	x0, [x29, #32]
    23d0:	mov	w1, #0x1                   	// #1
    23d4:	str	w1, [x0, #1600]
    23d8:	ldr	x0, [x29, #32]
    23dc:	ldr	x1, [x0, #1576]
    23e0:	ldr	x0, [x29, #32]
    23e4:	ldr	x0, [x0, #1624]
    23e8:	mul	x1, x1, x0
    23ec:	ldr	x0, [x29, #32]
    23f0:	str	x1, [x0, #1576]
    23f4:	b	2718 <execute_cfa_program+0xad0>
    23f8:	add	x0, x29, #0x50
    23fc:	mov	x1, x0
    2400:	ldr	x0, [x29, #56]
    2404:	bl	1b8 <read_sleb128>
    2408:	str	x0, [x29, #56]
    240c:	ldr	x1, [x29, #80]
    2410:	ldr	x0, [x29, #32]
    2414:	str	x1, [x0, #1576]
    2418:	ldr	x0, [x29, #32]
    241c:	ldr	x1, [x0, #1576]
    2420:	ldr	x0, [x29, #32]
    2424:	ldr	x0, [x0, #1624]
    2428:	mul	x1, x1, x0
    242c:	ldr	x0, [x29, #32]
    2430:	str	x1, [x0, #1576]
    2434:	b	2718 <execute_cfa_program+0xad0>
    2438:	add	x0, x29, #0x60
    243c:	mov	x1, x0
    2440:	ldr	x0, [x29, #56]
    2444:	bl	144 <read_uleb128>
    2448:	str	x0, [x29, #56]
    244c:	add	x0, x29, #0x58
    2450:	mov	x1, x0
    2454:	ldr	x0, [x29, #56]
    2458:	bl	144 <read_uleb128>
    245c:	str	x0, [x29, #56]
    2460:	ldr	x0, [x29, #32]
    2464:	ldr	x0, [x0, #1624]
    2468:	ldr	x1, [x29, #88]
    246c:	mul	x0, x0, x1
    2470:	str	x0, [x29, #112]
    2474:	ldr	x0, [x29, #96]
    2478:	str	x0, [x29, #96]
    247c:	ldr	x0, [x29, #96]
    2480:	cmp	x0, #0x61
    2484:	cset	w0, ls  // ls = plast
    2488:	and	w0, w0, #0xff
    248c:	and	x0, x0, #0xff
    2490:	cmp	x0, #0x0
    2494:	b.eq	2704 <execute_cfa_program+0xabc>  // b.none
    2498:	ldr	x0, [x29, #96]
    249c:	ldr	x1, [x29, #32]
    24a0:	lsl	x0, x0, #4
    24a4:	add	x0, x1, x0
    24a8:	mov	w1, #0x4                   	// #4
    24ac:	str	w1, [x0, #8]
    24b0:	ldr	x0, [x29, #96]
    24b4:	ldr	x1, [x29, #32]
    24b8:	lsl	x0, x0, #4
    24bc:	add	x0, x1, x0
    24c0:	ldr	x1, [x29, #112]
    24c4:	str	x1, [x0]
    24c8:	b	2704 <execute_cfa_program+0xabc>
    24cc:	add	x0, x29, #0x60
    24d0:	mov	x1, x0
    24d4:	ldr	x0, [x29, #56]
    24d8:	bl	144 <read_uleb128>
    24dc:	str	x0, [x29, #56]
    24e0:	add	x0, x29, #0x50
    24e4:	mov	x1, x0
    24e8:	ldr	x0, [x29, #56]
    24ec:	bl	1b8 <read_sleb128>
    24f0:	str	x0, [x29, #56]
    24f4:	ldr	x0, [x29, #32]
    24f8:	ldr	x1, [x0, #1624]
    24fc:	ldr	x0, [x29, #80]
    2500:	mul	x0, x1, x0
    2504:	str	x0, [x29, #112]
    2508:	ldr	x0, [x29, #96]
    250c:	str	x0, [x29, #96]
    2510:	ldr	x0, [x29, #96]
    2514:	cmp	x0, #0x61
    2518:	cset	w0, ls  // ls = plast
    251c:	and	w0, w0, #0xff
    2520:	and	x0, x0, #0xff
    2524:	cmp	x0, #0x0
    2528:	b.eq	270c <execute_cfa_program+0xac4>  // b.none
    252c:	ldr	x0, [x29, #96]
    2530:	ldr	x1, [x29, #32]
    2534:	lsl	x0, x0, #4
    2538:	add	x0, x1, x0
    253c:	mov	w1, #0x4                   	// #4
    2540:	str	w1, [x0, #8]
    2544:	ldr	x0, [x29, #96]
    2548:	ldr	x1, [x29, #32]
    254c:	lsl	x0, x0, #4
    2550:	add	x0, x1, x0
    2554:	ldr	x1, [x29, #112]
    2558:	str	x1, [x0]
    255c:	b	270c <execute_cfa_program+0xac4>
    2560:	add	x0, x29, #0x60
    2564:	mov	x1, x0
    2568:	ldr	x0, [x29, #56]
    256c:	bl	144 <read_uleb128>
    2570:	str	x0, [x29, #56]
    2574:	ldr	x0, [x29, #96]
    2578:	str	x0, [x29, #96]
    257c:	ldr	x0, [x29, #96]
    2580:	cmp	x0, #0x61
    2584:	cset	w0, ls  // ls = plast
    2588:	and	w0, w0, #0xff
    258c:	and	x0, x0, #0xff
    2590:	cmp	x0, #0x0
    2594:	b.eq	25c8 <execute_cfa_program+0x980>  // b.none
    2598:	ldr	x0, [x29, #96]
    259c:	ldr	x1, [x29, #32]
    25a0:	lsl	x0, x0, #4
    25a4:	add	x0, x1, x0
    25a8:	mov	w1, #0x5                   	// #5
    25ac:	str	w1, [x0, #8]
    25b0:	ldr	x0, [x29, #96]
    25b4:	ldr	x1, [x29, #32]
    25b8:	lsl	x0, x0, #4
    25bc:	add	x0, x1, x0
    25c0:	ldr	x1, [x29, #56]
    25c4:	str	x1, [x0]
    25c8:	add	x0, x29, #0x58
    25cc:	mov	x1, x0
    25d0:	ldr	x0, [x29, #56]
    25d4:	bl	144 <read_uleb128>
    25d8:	str	x0, [x29, #56]
    25dc:	ldr	x0, [x29, #88]
    25e0:	ldr	x1, [x29, #56]
    25e4:	add	x0, x1, x0
    25e8:	str	x0, [x29, #56]
    25ec:	b	2718 <execute_cfa_program+0xad0>
    25f0:	ldr	x0, [x29, #32]
    25f4:	ldr	x0, [x0, #544]
    25f8:	eor	x1, x0, #0x1
    25fc:	ldr	x0, [x29, #32]
    2600:	str	x1, [x0, #544]
    2604:	b	2718 <execute_cfa_program+0xad0>
    2608:	add	x0, x29, #0x58
    260c:	mov	x1, x0
    2610:	ldr	x0, [x29, #56]
    2614:	bl	144 <read_uleb128>
    2618:	str	x0, [x29, #56]
    261c:	ldr	x1, [x29, #88]
    2620:	ldr	x0, [x29, #40]
    2624:	str	x1, [x0, #848]
    2628:	b	2718 <execute_cfa_program+0xad0>
    262c:	add	x0, x29, #0x60
    2630:	mov	x1, x0
    2634:	ldr	x0, [x29, #56]
    2638:	bl	144 <read_uleb128>
    263c:	str	x0, [x29, #56]
    2640:	add	x0, x29, #0x58
    2644:	mov	x1, x0
    2648:	ldr	x0, [x29, #56]
    264c:	bl	144 <read_uleb128>
    2650:	str	x0, [x29, #56]
    2654:	ldr	x0, [x29, #32]
    2658:	ldr	x0, [x0, #1624]
    265c:	mov	x1, x0
    2660:	ldr	x0, [x29, #88]
    2664:	mul	x0, x1, x0
    2668:	str	x0, [x29, #112]
    266c:	ldr	x0, [x29, #96]
    2670:	str	x0, [x29, #96]
    2674:	ldr	x0, [x29, #96]
    2678:	cmp	x0, #0x61
    267c:	cset	w0, ls  // ls = plast
    2680:	and	w0, w0, #0xff
    2684:	and	x0, x0, #0xff
    2688:	cmp	x0, #0x0
    268c:	b.eq	2714 <execute_cfa_program+0xacc>  // b.none
    2690:	ldr	x0, [x29, #96]
    2694:	ldr	x1, [x29, #32]
    2698:	lsl	x0, x0, #4
    269c:	add	x0, x1, x0
    26a0:	mov	w1, #0x1                   	// #1
    26a4:	str	w1, [x0, #8]
    26a8:	ldr	x0, [x29, #96]
    26ac:	ldr	x1, [x29, #112]
    26b0:	neg	x1, x1
    26b4:	ldr	x2, [x29, #32]
    26b8:	lsl	x0, x0, #4
    26bc:	add	x0, x2, x0
    26c0:	str	x1, [x0]
    26c4:	b	2714 <execute_cfa_program+0xacc>
    26c8:	bl	0 <abort>
    26cc:	nop
    26d0:	b	2718 <execute_cfa_program+0xad0>
    26d4:	nop
    26d8:	b	2718 <execute_cfa_program+0xad0>
    26dc:	nop
    26e0:	b	2718 <execute_cfa_program+0xad0>
    26e4:	nop
    26e8:	b	2718 <execute_cfa_program+0xad0>
    26ec:	nop
    26f0:	b	2718 <execute_cfa_program+0xad0>
    26f4:	nop
    26f8:	b	2718 <execute_cfa_program+0xad0>
    26fc:	nop
    2700:	b	2718 <execute_cfa_program+0xad0>
    2704:	nop
    2708:	b	2718 <execute_cfa_program+0xad0>
    270c:	nop
    2710:	b	2718 <execute_cfa_program+0xad0>
    2714:	nop
    2718:	ldr	x1, [x29, #56]
    271c:	ldr	x0, [x29, #48]
    2720:	cmp	x1, x0
    2724:	b.cs	274c <execute_cfa_program+0xb04>  // b.hs, b.nlast
    2728:	ldr	x0, [x29, #32]
    272c:	ldr	x19, [x0, #1608]
    2730:	ldr	x0, [x29, #40]
    2734:	ldr	x20, [x0, #792]
    2738:	ldr	x0, [x29, #40]
    273c:	bl	6ec <_Unwind_IsSignalFrame>
    2740:	add	x0, x20, x0
    2744:	cmp	x19, x0
    2748:	b.cc	1c74 <execute_cfa_program+0x2c>  // b.lo, b.ul, b.last
    274c:	nop
    2750:	mov	sp, x29
    2754:	ldp	x19, x20, [sp, #16]
    2758:	ldp	x29, x30, [sp], #144
    275c:	ret

0000000000002760 <uw_frame_state_for>:
    2760:	stp	x29, x30, [sp, #-112]!
    2764:	mov	x29, sp
    2768:	str	x19, [sp, #16]
    276c:	str	x0, [sp, #40]
    2770:	str	x1, [sp, #32]
    2774:	mov	x2, #0x680                 	// #1664
    2778:	mov	w1, #0x0                   	// #0
    277c:	ldr	x0, [sp, #32]
    2780:	bl	0 <memset>
    2784:	ldr	x0, [sp, #40]
    2788:	str	xzr, [x0, #848]
    278c:	ldr	x0, [sp, #40]
    2790:	str	xzr, [x0, #800]
    2794:	ldr	x0, [sp, #40]
    2798:	ldr	x0, [x0, #792]
    279c:	cmp	x0, #0x0
    27a0:	b.ne	27ac <uw_frame_state_for+0x4c>  // b.any
    27a4:	mov	w0, #0x5                   	// #5
    27a8:	b	2938 <uw_frame_state_for+0x1d8>
    27ac:	ldr	x0, [sp, #40]
    27b0:	ldr	x19, [x0, #792]
    27b4:	ldr	x0, [sp, #40]
    27b8:	bl	6ec <_Unwind_IsSignalFrame>
    27bc:	sub	x0, x0, #0x1
    27c0:	add	x2, x19, x0
    27c4:	ldr	x0, [sp, #40]
    27c8:	add	x0, x0, #0x328
    27cc:	mov	x1, x0
    27d0:	mov	x0, x2
    27d4:	bl	0 <_Unwind_Find_FDE>
    27d8:	str	x0, [sp, #88]
    27dc:	ldr	x0, [sp, #88]
    27e0:	cmp	x0, #0x0
    27e4:	b.ne	27f8 <uw_frame_state_for+0x98>  // b.any
    27e8:	ldr	x1, [sp, #32]
    27ec:	ldr	x0, [sp, #40]
    27f0:	bl	cc0 <aarch64_fallback_frame_state>
    27f4:	b	2938 <uw_frame_state_for+0x1d8>
    27f8:	ldr	x0, [sp, #40]
    27fc:	ldr	x1, [x0, #824]
    2800:	ldr	x0, [sp, #32]
    2804:	str	x1, [x0, #1608]
    2808:	ldr	x0, [sp, #88]
    280c:	bl	50c <get_cie>
    2810:	str	x0, [sp, #80]
    2814:	ldr	x2, [sp, #32]
    2818:	ldr	x1, [sp, #40]
    281c:	ldr	x0, [sp, #80]
    2820:	bl	f30 <extract_cie_info>
    2824:	str	x0, [sp, #96]
    2828:	ldr	x0, [sp, #96]
    282c:	cmp	x0, #0x0
    2830:	b.ne	283c <uw_frame_state_for+0xdc>  // b.any
    2834:	mov	w0, #0x3                   	// #3
    2838:	b	2938 <uw_frame_state_for+0x1d8>
    283c:	ldr	x0, [sp, #80]
    2840:	bl	538 <next_fde>
    2844:	str	x0, [sp, #72]
    2848:	ldr	x3, [sp, #32]
    284c:	ldr	x2, [sp, #40]
    2850:	ldr	x1, [sp, #72]
    2854:	ldr	x0, [sp, #96]
    2858:	bl	1c48 <execute_cfa_program>
    285c:	ldr	x0, [sp, #88]
    2860:	add	x0, x0, #0x8
    2864:	str	x0, [sp, #104]
    2868:	ldr	x0, [sp, #32]
    286c:	ldrb	w0, [x0, #1648]
    2870:	bl	8 <size_of_encoded_value>
    2874:	lsl	w0, w0, #1
    2878:	mov	w0, w0
    287c:	ldr	x1, [sp, #104]
    2880:	add	x0, x1, x0
    2884:	str	x0, [sp, #104]
    2888:	str	xzr, [sp, #96]
    288c:	ldr	x0, [sp, #32]
    2890:	ldrb	w0, [x0, #1650]
    2894:	cmp	w0, #0x0
    2898:	b.eq	28c0 <uw_frame_state_for+0x160>  // b.none
    289c:	add	x0, sp, #0x40
    28a0:	mov	x1, x0
    28a4:	ldr	x0, [sp, #104]
    28a8:	bl	144 <read_uleb128>
    28ac:	str	x0, [sp, #104]
    28b0:	ldr	x0, [sp, #64]
    28b4:	ldr	x1, [sp, #104]
    28b8:	add	x0, x1, x0
    28bc:	str	x0, [sp, #96]
    28c0:	ldr	x0, [sp, #32]
    28c4:	ldrb	w0, [x0, #1649]
    28c8:	cmp	w0, #0xff
    28cc:	b.eq	2900 <uw_frame_state_for+0x1a0>  // b.none
    28d0:	ldr	x0, [sp, #32]
    28d4:	ldrb	w1, [x0, #1649]
    28d8:	add	x0, sp, #0x38
    28dc:	mov	x3, x0
    28e0:	ldr	x2, [sp, #104]
    28e4:	ldr	x0, [sp, #40]
    28e8:	bl	4cc <read_encoded_value>
    28ec:	str	x0, [sp, #104]
    28f0:	ldr	x0, [sp, #56]
    28f4:	mov	x1, x0
    28f8:	ldr	x0, [sp, #40]
    28fc:	str	x1, [x0, #800]
    2900:	ldr	x0, [sp, #96]
    2904:	cmp	x0, #0x0
    2908:	b.ne	2914 <uw_frame_state_for+0x1b4>  // b.any
    290c:	ldr	x0, [sp, #104]
    2910:	str	x0, [sp, #96]
    2914:	ldr	x0, [sp, #88]
    2918:	bl	538 <next_fde>
    291c:	str	x0, [sp, #72]
    2920:	ldr	x3, [sp, #32]
    2924:	ldr	x2, [sp, #40]
    2928:	ldr	x1, [sp, #72]
    292c:	ldr	x0, [sp, #96]
    2930:	bl	1c48 <execute_cfa_program>
    2934:	mov	w0, #0x0                   	// #0
    2938:	ldr	x19, [sp, #16]
    293c:	ldp	x29, x30, [sp], #112
    2940:	ret

0000000000002944 <__frame_state_for>:
    2944:	sub	sp, sp, #0xa70
    2948:	stp	x29, x30, [sp]
    294c:	mov	x29, sp
    2950:	str	x0, [sp, #24]
    2954:	str	x1, [sp, #16]
    2958:	add	x0, sp, #0x6a8
    295c:	mov	x2, #0x3c0                 	// #960
    2960:	mov	w1, #0x0                   	// #0
    2964:	bl	0 <memset>
    2968:	mov	x0, #0x4000000000000000    	// #4611686018427387904
    296c:	str	x0, [sp, #2536]
    2970:	ldr	x0, [sp, #24]
    2974:	add	x0, x0, #0x1
    2978:	str	x0, [sp, #2496]
    297c:	add	x1, sp, #0x28
    2980:	add	x0, sp, #0x6a8
    2984:	bl	2760 <uw_frame_state_for>
    2988:	cmp	w0, #0x0
    298c:	b.eq	2998 <__frame_state_for+0x54>  // b.none
    2990:	mov	x0, #0x0                   	// #0
    2994:	b	2ac0 <__frame_state_for+0x17c>
    2998:	ldr	w0, [sp, #1640]
    299c:	cmp	w0, #0x2
    29a0:	b.ne	29ac <__frame_state_for+0x68>  // b.any
    29a4:	mov	x0, #0x0                   	// #0
    29a8:	b	2ac0 <__frame_state_for+0x17c>
    29ac:	str	wzr, [sp, #2668]
    29b0:	b	2a68 <__frame_state_for+0x124>
    29b4:	ldrsw	x0, [sp, #2668]
    29b8:	lsl	x0, x0, #4
    29bc:	add	x1, sp, #0x30
    29c0:	ldr	w0, [x1, x0]
    29c4:	and	w2, w0, #0xff
    29c8:	ldr	x1, [sp, #16]
    29cc:	ldrsw	x0, [sp, #2668]
    29d0:	add	x0, x1, x0
    29d4:	mov	w1, w2
    29d8:	strb	w1, [x0, #820]
    29dc:	ldr	x1, [sp, #16]
    29e0:	ldrsw	x0, [sp, #2668]
    29e4:	add	x0, x1, x0
    29e8:	ldrb	w0, [x0, #820]
    29ec:	cmp	w0, #0x1
    29f0:	b.eq	2a24 <__frame_state_for+0xe0>  // b.none
    29f4:	cmp	w0, #0x2
    29f8:	b.ne	2a48 <__frame_state_for+0x104>  // b.any
    29fc:	ldrsw	x0, [sp, #2668]
    2a00:	lsl	x0, x0, #4
    2a04:	add	x1, sp, #0x28
    2a08:	ldr	x0, [x1, x0]
    2a0c:	mov	x2, x0
    2a10:	ldr	x0, [sp, #16]
    2a14:	ldrsw	x1, [sp, #2668]
    2a18:	add	x1, x1, #0x4
    2a1c:	str	x2, [x0, x1, lsl #3]
    2a20:	b	2a5c <__frame_state_for+0x118>
    2a24:	ldrsw	x0, [sp, #2668]
    2a28:	lsl	x0, x0, #4
    2a2c:	add	x1, sp, #0x28
    2a30:	ldr	x2, [x1, x0]
    2a34:	ldr	x0, [sp, #16]
    2a38:	ldrsw	x1, [sp, #2668]
    2a3c:	add	x1, x1, #0x4
    2a40:	str	x2, [x0, x1, lsl #3]
    2a44:	b	2a5c <__frame_state_for+0x118>
    2a48:	ldr	x0, [sp, #16]
    2a4c:	ldrsw	x1, [sp, #2668]
    2a50:	add	x1, x1, #0x4
    2a54:	str	xzr, [x0, x1, lsl #3]
    2a58:	nop
    2a5c:	ldr	w0, [sp, #2668]
    2a60:	add	w0, w0, #0x1
    2a64:	str	w0, [sp, #2668]
    2a68:	ldr	w0, [sp, #2668]
    2a6c:	cmp	w0, #0x61
    2a70:	b.le	29b4 <__frame_state_for+0x70>
    2a74:	ldr	x1, [sp, #1616]
    2a78:	ldr	x0, [sp, #16]
    2a7c:	str	x1, [x0, #16]
    2a80:	ldr	x0, [sp, #1624]
    2a84:	and	w1, w0, #0xffff
    2a88:	ldr	x0, [sp, #16]
    2a8c:	strh	w1, [x0, #816]
    2a90:	ldr	x0, [sp, #1680]
    2a94:	and	w1, w0, #0xffff
    2a98:	ldr	x0, [sp, #16]
    2a9c:	strh	w1, [x0, #818]
    2aa0:	ldr	x0, [sp, #2552]
    2aa4:	mov	x1, x0
    2aa8:	ldr	x0, [sp, #16]
    2aac:	str	x1, [x0, #24]
    2ab0:	ldr	x1, [sp, #1696]
    2ab4:	ldr	x0, [sp, #16]
    2ab8:	str	x1, [x0, #8]
    2abc:	ldr	x0, [sp, #16]
    2ac0:	ldp	x29, x30, [sp]
    2ac4:	add	sp, sp, #0xa70
    2ac8:	ret

0000000000002acc <_Unwind_SetSpColumn>:
    2acc:	stp	x29, x30, [sp, #-64]!
    2ad0:	mov	x29, sp
    2ad4:	str	x0, [sp, #40]
    2ad8:	str	x1, [sp, #32]
    2adc:	str	x2, [sp, #24]
    2ae0:	mov	w2, #0x1f                  	// #31
    2ae4:	adrp	x0, 0 <aarch64_vg>
    2ae8:	add	x1, x0, #0x0
    2aec:	mov	w0, w2
    2af0:	ldrb	w0, [x1, x0]
    2af4:	str	w0, [sp, #60]
    2af8:	ldr	w0, [sp, #60]
    2afc:	cmp	w0, #0x8
    2b00:	b.ne	2b14 <_Unwind_SetSpColumn+0x48>  // b.any
    2b04:	ldr	x1, [sp, #32]
    2b08:	ldr	x0, [sp, #24]
    2b0c:	str	x1, [x0]
    2b10:	b	2b30 <_Unwind_SetSpColumn+0x64>
    2b14:	ldr	w0, [sp, #60]
    2b18:	cmp	w0, #0x8
    2b1c:	b.eq	2b24 <_Unwind_SetSpColumn+0x58>  // b.none
    2b20:	bl	0 <abort>
    2b24:	ldr	x1, [sp, #32]
    2b28:	ldr	x0, [sp, #24]
    2b2c:	str	x1, [x0]
    2b30:	mov	w0, #0x1f                  	// #31
    2b34:	ldr	x2, [sp, #24]
    2b38:	mov	w1, w0
    2b3c:	ldr	x0, [sp, #40]
    2b40:	bl	9cc <_Unwind_SetGRPtr>
    2b44:	nop
    2b48:	ldp	x29, x30, [sp], #64
    2b4c:	ret

0000000000002b50 <uw_update_context_1>:
    2b50:	sub	sp, sp, #0x450
    2b54:	stp	x29, x30, [sp]
    2b58:	mov	x29, sp
    2b5c:	str	x19, [sp, #16]
    2b60:	str	x0, [sp, #40]
    2b64:	str	x1, [sp, #32]
    2b68:	ldr	x1, [sp, #40]
    2b6c:	add	x0, sp, #0x58
    2b70:	mov	x3, x1
    2b74:	mov	x1, #0x3c0                 	// #960
    2b78:	mov	x2, x1
    2b7c:	mov	x1, x3
    2b80:	bl	0 <memcpy>
    2b84:	mov	w0, #0x1f                  	// #31
    2b88:	mov	w1, w0
    2b8c:	add	x0, sp, #0x58
    2b90:	bl	96c <_Unwind_GetGRPtr>
    2b94:	cmp	x0, #0x0
    2b98:	b.ne	2bb0 <uw_update_context_1+0x60>  // b.any
    2b9c:	ldr	x0, [sp, #40]
    2ba0:	ldr	x1, [x0, #784]
    2ba4:	add	x2, sp, #0x50
    2ba8:	add	x0, sp, #0x58
    2bac:	bl	2acc <_Unwind_SetSpColumn>
    2bb0:	mov	w0, #0x1f                  	// #31
    2bb4:	mov	x2, #0x0                   	// #0
    2bb8:	mov	w1, w0
    2bbc:	ldr	x0, [sp, #40]
    2bc0:	bl	9cc <_Unwind_SetGRPtr>
    2bc4:	ldr	x0, [sp, #32]
    2bc8:	ldr	w0, [x0, #1600]
    2bcc:	cmp	w0, #0x1
    2bd0:	b.eq	2be0 <uw_update_context_1+0x90>  // b.none
    2bd4:	cmp	w0, #0x2
    2bd8:	b.eq	2c14 <uw_update_context_1+0xc4>  // b.none
    2bdc:	b	2c60 <uw_update_context_1+0x110>
    2be0:	ldr	x0, [sp, #32]
    2be4:	ldr	x0, [x0, #1584]
    2be8:	mov	w1, w0
    2bec:	add	x0, sp, #0x58
    2bf0:	bl	864 <_Unwind_GetPtr>
    2bf4:	str	x0, [sp, #1096]
    2bf8:	ldr	x0, [sp, #32]
    2bfc:	ldr	x0, [x0, #1576]
    2c00:	mov	x1, x0
    2c04:	ldr	x0, [sp, #1096]
    2c08:	add	x0, x0, x1
    2c0c:	str	x0, [sp, #1096]
    2c10:	b	2c64 <uw_update_context_1+0x114>
    2c14:	ldr	x0, [sp, #32]
    2c18:	ldr	x0, [x0, #1592]
    2c1c:	str	x0, [sp, #1080]
    2c20:	add	x0, sp, #0x48
    2c24:	mov	x1, x0
    2c28:	ldr	x0, [sp, #1080]
    2c2c:	bl	144 <read_uleb128>
    2c30:	str	x0, [sp, #1080]
    2c34:	ldr	x0, [sp, #72]
    2c38:	ldr	x1, [sp, #1080]
    2c3c:	add	x0, x1, x0
    2c40:	add	x1, sp, #0x58
    2c44:	mov	x3, #0x0                   	// #0
    2c48:	mov	x2, x1
    2c4c:	mov	x1, x0
    2c50:	ldr	x0, [sp, #1080]
    2c54:	bl	1230 <execute_stack_op>
    2c58:	str	x0, [sp, #1096]
    2c5c:	b	2c64 <uw_update_context_1+0x114>
    2c60:	bl	0 <abort>
    2c64:	ldr	x0, [sp, #40]
    2c68:	ldr	x1, [sp, #1096]
    2c6c:	str	x1, [x0, #784]
    2c70:	str	xzr, [sp, #1088]
    2c74:	b	2ef8 <uw_update_context_1+0x3a8>
    2c78:	ldr	x1, [sp, #32]
    2c7c:	ldr	x0, [sp, #1088]
    2c80:	lsl	x0, x0, #4
    2c84:	add	x0, x1, x0
    2c88:	ldr	w0, [x0, #8]
    2c8c:	cmp	w0, #0x6
    2c90:	b.eq	2ee8 <uw_update_context_1+0x398>  // b.none
    2c94:	cmp	w0, #0x6
    2c98:	b.hi	2eec <uw_update_context_1+0x39c>  // b.pmore
    2c9c:	cmp	w0, #0x5
    2ca0:	b.eq	2e78 <uw_update_context_1+0x328>  // b.none
    2ca4:	cmp	w0, #0x5
    2ca8:	b.hi	2eec <uw_update_context_1+0x39c>  // b.pmore
    2cac:	cmp	w0, #0x4
    2cb0:	b.eq	2e3c <uw_update_context_1+0x2ec>  // b.none
    2cb4:	cmp	w0, #0x4
    2cb8:	b.hi	2eec <uw_update_context_1+0x39c>  // b.pmore
    2cbc:	cmp	w0, #0x3
    2cc0:	b.eq	2dc8 <uw_update_context_1+0x278>  // b.none
    2cc4:	cmp	w0, #0x3
    2cc8:	b.hi	2eec <uw_update_context_1+0x39c>  // b.pmore
    2ccc:	cmp	w0, #0x2
    2cd0:	b.eq	2d28 <uw_update_context_1+0x1d8>  // b.none
    2cd4:	cmp	w0, #0x2
    2cd8:	b.hi	2eec <uw_update_context_1+0x39c>  // b.pmore
    2cdc:	cmp	w0, #0x0
    2ce0:	b.eq	2ee8 <uw_update_context_1+0x398>  // b.none
    2ce4:	cmp	w0, #0x1
    2ce8:	b.ne	2eec <uw_update_context_1+0x39c>  // b.any
    2cec:	ldr	x0, [sp, #1088]
    2cf0:	mov	w3, w0
    2cf4:	ldr	x1, [sp, #32]
    2cf8:	ldr	x0, [sp, #1088]
    2cfc:	lsl	x0, x0, #4
    2d00:	add	x0, x1, x0
    2d04:	ldr	x0, [x0]
    2d08:	mov	x1, x0
    2d0c:	ldr	x0, [sp, #1096]
    2d10:	add	x0, x0, x1
    2d14:	mov	x2, x0
    2d18:	mov	w1, w3
    2d1c:	ldr	x0, [sp, #40]
    2d20:	bl	9cc <_Unwind_SetGRPtr>
    2d24:	b	2eec <uw_update_context_1+0x39c>
    2d28:	ldr	x1, [sp, #32]
    2d2c:	ldr	x0, [sp, #1088]
    2d30:	lsl	x0, x0, #4
    2d34:	add	x0, x1, x0
    2d38:	ldr	x0, [x0]
    2d3c:	mov	w1, w0
    2d40:	add	x0, sp, #0x58
    2d44:	bl	a94 <_Unwind_GRByValue>
    2d48:	cmp	w0, #0x0
    2d4c:	b.eq	2d8c <uw_update_context_1+0x23c>  // b.none
    2d50:	ldr	x0, [sp, #1088]
    2d54:	mov	w19, w0
    2d58:	ldr	x1, [sp, #32]
    2d5c:	ldr	x0, [sp, #1088]
    2d60:	lsl	x0, x0, #4
    2d64:	add	x0, x1, x0
    2d68:	ldr	x0, [x0]
    2d6c:	mov	w1, w0
    2d70:	add	x0, sp, #0x58
    2d74:	bl	78c <_Unwind_GetGR>
    2d78:	mov	x2, x0
    2d7c:	mov	w1, w19
    2d80:	ldr	x0, [sp, #40]
    2d84:	bl	a1c <_Unwind_SetGRValue>
    2d88:	b	2eec <uw_update_context_1+0x39c>
    2d8c:	ldr	x0, [sp, #1088]
    2d90:	mov	w19, w0
    2d94:	ldr	x1, [sp, #32]
    2d98:	ldr	x0, [sp, #1088]
    2d9c:	lsl	x0, x0, #4
    2da0:	add	x0, x1, x0
    2da4:	ldr	x0, [x0]
    2da8:	mov	w1, w0
    2dac:	add	x0, sp, #0x58
    2db0:	bl	96c <_Unwind_GetGRPtr>
    2db4:	mov	x2, x0
    2db8:	mov	w1, w19
    2dbc:	ldr	x0, [sp, #40]
    2dc0:	bl	9cc <_Unwind_SetGRPtr>
    2dc4:	b	2eec <uw_update_context_1+0x39c>
    2dc8:	ldr	x1, [sp, #32]
    2dcc:	ldr	x0, [sp, #1088]
    2dd0:	lsl	x0, x0, #4
    2dd4:	add	x0, x1, x0
    2dd8:	ldr	x0, [x0]
    2ddc:	str	x0, [sp, #1056]
    2de0:	add	x0, sp, #0x40
    2de4:	mov	x1, x0
    2de8:	ldr	x0, [sp, #1056]
    2dec:	bl	144 <read_uleb128>
    2df0:	str	x0, [sp, #1056]
    2df4:	ldr	x0, [sp, #64]
    2df8:	ldr	x1, [sp, #1056]
    2dfc:	add	x0, x1, x0
    2e00:	ldr	x2, [sp, #1096]
    2e04:	add	x1, sp, #0x58
    2e08:	mov	x3, x2
    2e0c:	mov	x2, x1
    2e10:	mov	x1, x0
    2e14:	ldr	x0, [sp, #1056]
    2e18:	bl	1230 <execute_stack_op>
    2e1c:	str	x0, [sp, #1048]
    2e20:	ldr	x0, [sp, #1088]
    2e24:	mov	w1, w0
    2e28:	ldr	x0, [sp, #1048]
    2e2c:	mov	x2, x0
    2e30:	ldr	x0, [sp, #40]
    2e34:	bl	9cc <_Unwind_SetGRPtr>
    2e38:	b	2eec <uw_update_context_1+0x39c>
    2e3c:	ldr	x0, [sp, #1088]
    2e40:	mov	w3, w0
    2e44:	ldr	x1, [sp, #32]
    2e48:	ldr	x0, [sp, #1088]
    2e4c:	lsl	x0, x0, #4
    2e50:	add	x0, x1, x0
    2e54:	ldr	x0, [x0]
    2e58:	mov	x1, x0
    2e5c:	ldr	x0, [sp, #1096]
    2e60:	add	x0, x0, x1
    2e64:	mov	x2, x0
    2e68:	mov	w1, w3
    2e6c:	ldr	x0, [sp, #40]
    2e70:	bl	a1c <_Unwind_SetGRValue>
    2e74:	b	2eec <uw_update_context_1+0x39c>
    2e78:	ldr	x1, [sp, #32]
    2e7c:	ldr	x0, [sp, #1088]
    2e80:	lsl	x0, x0, #4
    2e84:	add	x0, x1, x0
    2e88:	ldr	x0, [x0]
    2e8c:	str	x0, [sp, #1072]
    2e90:	add	x0, sp, #0x38
    2e94:	mov	x1, x0
    2e98:	ldr	x0, [sp, #1072]
    2e9c:	bl	144 <read_uleb128>
    2ea0:	str	x0, [sp, #1072]
    2ea4:	ldr	x0, [sp, #56]
    2ea8:	ldr	x1, [sp, #1072]
    2eac:	add	x0, x1, x0
    2eb0:	ldr	x2, [sp, #1096]
    2eb4:	add	x1, sp, #0x58
    2eb8:	mov	x3, x2
    2ebc:	mov	x2, x1
    2ec0:	mov	x1, x0
    2ec4:	ldr	x0, [sp, #1072]
    2ec8:	bl	1230 <execute_stack_op>
    2ecc:	str	x0, [sp, #1064]
    2ed0:	ldr	x0, [sp, #1088]
    2ed4:	ldr	x2, [sp, #1064]
    2ed8:	mov	w1, w0
    2edc:	ldr	x0, [sp, #40]
    2ee0:	bl	a1c <_Unwind_SetGRValue>
    2ee4:	b	2eec <uw_update_context_1+0x39c>
    2ee8:	nop
    2eec:	ldr	x0, [sp, #1088]
    2ef0:	add	x0, x0, #0x1
    2ef4:	str	x0, [sp, #1088]
    2ef8:	ldr	x0, [sp, #1088]
    2efc:	cmp	x0, #0x61
    2f00:	b.le	2c78 <uw_update_context_1+0x128>
    2f04:	ldr	x0, [sp, #32]
    2f08:	ldrb	w0, [x0, #1651]
    2f0c:	mov	w1, w0
    2f10:	ldr	x0, [sp, #40]
    2f14:	bl	710 <_Unwind_SetSignalFrame>
    2f18:	ldr	x1, [sp, #32]
    2f1c:	ldr	x0, [sp, #40]
    2f20:	bl	c7c <aarch64_frob_update_context>
    2f24:	nop
    2f28:	ldr	x19, [sp, #16]
    2f2c:	ldp	x29, x30, [sp]
    2f30:	add	sp, sp, #0x450
    2f34:	ret

0000000000002f38 <uw_update_context>:
    2f38:	stp	x29, x30, [sp, #-32]!
    2f3c:	mov	x29, sp
    2f40:	str	x0, [sp, #24]
    2f44:	str	x1, [sp, #16]
    2f48:	ldr	x1, [sp, #16]
    2f4c:	ldr	x0, [sp, #24]
    2f50:	bl	2b50 <uw_update_context_1>
    2f54:	ldr	x0, [sp, #16]
    2f58:	ldr	x0, [x0, #1640]
    2f5c:	ldr	x1, [sp, #16]
    2f60:	lsl	x0, x0, #4
    2f64:	add	x0, x1, x0
    2f68:	ldr	w0, [x0, #8]
    2f6c:	cmp	w0, #0x6
    2f70:	b.ne	2f80 <uw_update_context+0x48>  // b.any
    2f74:	ldr	x0, [sp, #24]
    2f78:	str	xzr, [x0, #792]
    2f7c:	b	2fc4 <uw_update_context+0x8c>
    2f80:	ldr	x0, [sp, #16]
    2f84:	ldr	x0, [x0, #1640]
    2f88:	mov	w1, w0
    2f8c:	ldr	x0, [sp, #24]
    2f90:	bl	864 <_Unwind_GetPtr>
    2f94:	mov	x1, x0
    2f98:	ldr	x0, [sp, #24]
    2f9c:	str	x1, [x0, #792]
    2fa0:	ldr	x0, [sp, #24]
    2fa4:	ldr	x0, [x0, #792]
    2fa8:	mov	x2, x0
    2fac:	ldr	x1, [sp, #16]
    2fb0:	ldr	x0, [sp, #24]
    2fb4:	bl	bc8 <aarch64_post_extract_frame_addr>
    2fb8:	mov	x1, x0
    2fbc:	ldr	x0, [sp, #24]
    2fc0:	str	x1, [x0, #792]
    2fc4:	nop
    2fc8:	ldp	x29, x30, [sp], #32
    2fcc:	ret

0000000000002fd0 <uw_advance_context>:
    2fd0:	stp	x29, x30, [sp, #-32]!
    2fd4:	mov	x29, sp
    2fd8:	str	x0, [sp, #24]
    2fdc:	str	x1, [sp, #16]
    2fe0:	ldr	x1, [sp, #16]
    2fe4:	ldr	x0, [sp, #24]
    2fe8:	bl	2f38 <uw_update_context>
    2fec:	nop
    2ff0:	ldp	x29, x30, [sp], #32
    2ff4:	ret

0000000000002ff8 <init_dwarf_reg_size_table>:
    2ff8:	adrp	x0, 0 <aarch64_vg>
    2ffc:	add	x0, x0, #0x0
    3000:	mov	w1, #0x8                   	// #8
    3004:	strb	w1, [x0]
    3008:	adrp	x0, 0 <aarch64_vg>
    300c:	add	x0, x0, #0x0
    3010:	mov	w1, #0x8                   	// #8
    3014:	strb	w1, [x0]
    3018:	adrp	x0, 0 <aarch64_vg>
    301c:	add	x0, x0, #0x0
    3020:	mov	w1, #0x8                   	// #8
    3024:	strb	w1, [x0]
    3028:	adrp	x0, 0 <aarch64_vg>
    302c:	add	x0, x0, #0x0
    3030:	mov	w1, #0x8                   	// #8
    3034:	strb	w1, [x0]
    3038:	adrp	x0, 0 <aarch64_vg>
    303c:	add	x0, x0, #0x0
    3040:	mov	w1, #0x8                   	// #8
    3044:	strb	w1, [x0]
    3048:	adrp	x0, 0 <aarch64_vg>
    304c:	add	x0, x0, #0x0
    3050:	mov	w1, #0x8                   	// #8
    3054:	strb	w1, [x0]
    3058:	adrp	x0, 0 <aarch64_vg>
    305c:	add	x0, x0, #0x0
    3060:	mov	w1, #0x8                   	// #8
    3064:	strb	w1, [x0]
    3068:	adrp	x0, 0 <aarch64_vg>
    306c:	add	x0, x0, #0x0
    3070:	mov	w1, #0x8                   	// #8
    3074:	strb	w1, [x0]
    3078:	adrp	x0, 0 <aarch64_vg>
    307c:	add	x0, x0, #0x0
    3080:	mov	w1, #0x8                   	// #8
    3084:	strb	w1, [x0]
    3088:	adrp	x0, 0 <aarch64_vg>
    308c:	add	x0, x0, #0x0
    3090:	mov	w1, #0x8                   	// #8
    3094:	strb	w1, [x0]
    3098:	adrp	x0, 0 <aarch64_vg>
    309c:	add	x0, x0, #0x0
    30a0:	mov	w1, #0x8                   	// #8
    30a4:	strb	w1, [x0]
    30a8:	adrp	x0, 0 <aarch64_vg>
    30ac:	add	x0, x0, #0x0
    30b0:	mov	w1, #0x8                   	// #8
    30b4:	strb	w1, [x0]
    30b8:	adrp	x0, 0 <aarch64_vg>
    30bc:	add	x0, x0, #0x0
    30c0:	mov	w1, #0x8                   	// #8
    30c4:	strb	w1, [x0]
    30c8:	adrp	x0, 0 <aarch64_vg>
    30cc:	add	x0, x0, #0x0
    30d0:	mov	w1, #0x8                   	// #8
    30d4:	strb	w1, [x0]
    30d8:	adrp	x0, 0 <aarch64_vg>
    30dc:	add	x0, x0, #0x0
    30e0:	mov	w1, #0x8                   	// #8
    30e4:	strb	w1, [x0]
    30e8:	adrp	x0, 0 <aarch64_vg>
    30ec:	add	x0, x0, #0x0
    30f0:	mov	w1, #0x8                   	// #8
    30f4:	strb	w1, [x0]
    30f8:	adrp	x0, 0 <aarch64_vg>
    30fc:	add	x0, x0, #0x0
    3100:	mov	w1, #0x8                   	// #8
    3104:	strb	w1, [x0]
    3108:	adrp	x0, 0 <aarch64_vg>
    310c:	add	x0, x0, #0x0
    3110:	mov	w1, #0x8                   	// #8
    3114:	strb	w1, [x0]
    3118:	adrp	x0, 0 <aarch64_vg>
    311c:	add	x0, x0, #0x0
    3120:	mov	w1, #0x8                   	// #8
    3124:	strb	w1, [x0]
    3128:	adrp	x0, 0 <aarch64_vg>
    312c:	add	x0, x0, #0x0
    3130:	mov	w1, #0x8                   	// #8
    3134:	strb	w1, [x0]
    3138:	adrp	x0, 0 <aarch64_vg>
    313c:	add	x0, x0, #0x0
    3140:	mov	w1, #0x8                   	// #8
    3144:	strb	w1, [x0]
    3148:	adrp	x0, 0 <aarch64_vg>
    314c:	add	x0, x0, #0x0
    3150:	mov	w1, #0x8                   	// #8
    3154:	strb	w1, [x0]
    3158:	adrp	x0, 0 <aarch64_vg>
    315c:	add	x0, x0, #0x0
    3160:	mov	w1, #0x8                   	// #8
    3164:	strb	w1, [x0]
    3168:	adrp	x0, 0 <aarch64_vg>
    316c:	add	x0, x0, #0x0
    3170:	mov	w1, #0x8                   	// #8
    3174:	strb	w1, [x0]
    3178:	adrp	x0, 0 <aarch64_vg>
    317c:	add	x0, x0, #0x0
    3180:	mov	w1, #0x8                   	// #8
    3184:	strb	w1, [x0]
    3188:	adrp	x0, 0 <aarch64_vg>
    318c:	add	x0, x0, #0x0
    3190:	mov	w1, #0x8                   	// #8
    3194:	strb	w1, [x0]
    3198:	adrp	x0, 0 <aarch64_vg>
    319c:	add	x0, x0, #0x0
    31a0:	mov	w1, #0x8                   	// #8
    31a4:	strb	w1, [x0]
    31a8:	adrp	x0, 0 <aarch64_vg>
    31ac:	add	x0, x0, #0x0
    31b0:	mov	w1, #0x8                   	// #8
    31b4:	strb	w1, [x0]
    31b8:	adrp	x0, 0 <aarch64_vg>
    31bc:	add	x0, x0, #0x0
    31c0:	mov	w1, #0x8                   	// #8
    31c4:	strb	w1, [x0]
    31c8:	adrp	x0, 0 <aarch64_vg>
    31cc:	add	x0, x0, #0x0
    31d0:	mov	w1, #0x8                   	// #8
    31d4:	strb	w1, [x0]
    31d8:	adrp	x0, 0 <aarch64_vg>
    31dc:	add	x0, x0, #0x0
    31e0:	mov	w1, #0x8                   	// #8
    31e4:	strb	w1, [x0]
    31e8:	adrp	x0, 0 <aarch64_vg>
    31ec:	add	x0, x0, #0x0
    31f0:	mov	w1, #0x8                   	// #8
    31f4:	strb	w1, [x0]
    31f8:	adrp	x0, 0 <aarch64_vg>
    31fc:	add	x0, x0, #0x0
    3200:	mov	w1, #0x8                   	// #8
    3204:	strb	w1, [x0]
    3208:	adrp	x0, 0 <aarch64_vg>
    320c:	add	x0, x0, #0x0
    3210:	mov	w1, #0x8                   	// #8
    3214:	strb	w1, [x0]
    3218:	adrp	x0, 0 <aarch64_vg>
    321c:	add	x0, x0, #0x0
    3220:	mov	w1, #0x8                   	// #8
    3224:	strb	w1, [x0]
    3228:	adrp	x0, 0 <aarch64_vg>
    322c:	add	x0, x0, #0x0
    3230:	mov	w1, #0x8                   	// #8
    3234:	strb	w1, [x0]
    3238:	adrp	x0, 0 <aarch64_vg>
    323c:	add	x0, x0, #0x0
    3240:	mov	w1, #0x8                   	// #8
    3244:	strb	w1, [x0]
    3248:	adrp	x0, 0 <aarch64_vg>
    324c:	add	x0, x0, #0x0
    3250:	mov	w1, #0x8                   	// #8
    3254:	strb	w1, [x0]
    3258:	adrp	x0, 0 <aarch64_vg>
    325c:	add	x0, x0, #0x0
    3260:	mov	w1, #0x8                   	// #8
    3264:	strb	w1, [x0]
    3268:	adrp	x0, 0 <aarch64_vg>
    326c:	add	x0, x0, #0x0
    3270:	mov	w1, #0x8                   	// #8
    3274:	strb	w1, [x0]
    3278:	adrp	x0, 0 <aarch64_vg>
    327c:	add	x0, x0, #0x0
    3280:	mov	w1, #0x8                   	// #8
    3284:	strb	w1, [x0]
    3288:	adrp	x0, 0 <aarch64_vg>
    328c:	add	x0, x0, #0x0
    3290:	mov	w1, #0x8                   	// #8
    3294:	strb	w1, [x0]
    3298:	adrp	x0, 0 <aarch64_vg>
    329c:	add	x0, x0, #0x0
    32a0:	mov	w1, #0x8                   	// #8
    32a4:	strb	w1, [x0]
    32a8:	adrp	x0, 0 <aarch64_vg>
    32ac:	add	x0, x0, #0x0
    32b0:	mov	w1, #0x8                   	// #8
    32b4:	strb	w1, [x0]
    32b8:	adrp	x0, 0 <aarch64_vg>
    32bc:	add	x0, x0, #0x0
    32c0:	mov	w1, #0x8                   	// #8
    32c4:	strb	w1, [x0]
    32c8:	adrp	x0, 0 <aarch64_vg>
    32cc:	add	x0, x0, #0x0
    32d0:	mov	w1, #0x8                   	// #8
    32d4:	strb	w1, [x0]
    32d8:	adrp	x0, 0 <aarch64_vg>
    32dc:	add	x0, x0, #0x0
    32e0:	mov	w1, #0x8                   	// #8
    32e4:	strb	w1, [x0]
    32e8:	adrp	x0, 0 <aarch64_vg>
    32ec:	add	x0, x0, #0x0
    32f0:	mov	w1, #0x8                   	// #8
    32f4:	strb	w1, [x0]
    32f8:	adrp	x0, 0 <aarch64_vg>
    32fc:	add	x0, x0, #0x0
    3300:	mov	w1, #0x8                   	// #8
    3304:	strb	w1, [x0]
    3308:	adrp	x0, 0 <aarch64_vg>
    330c:	add	x0, x0, #0x0
    3310:	mov	w1, #0x8                   	// #8
    3314:	strb	w1, [x0]
    3318:	adrp	x0, 0 <aarch64_vg>
    331c:	add	x0, x0, #0x0
    3320:	mov	w1, #0x8                   	// #8
    3324:	strb	w1, [x0]
    3328:	adrp	x0, 0 <aarch64_vg>
    332c:	add	x0, x0, #0x0
    3330:	mov	w1, #0x8                   	// #8
    3334:	strb	w1, [x0]
    3338:	adrp	x0, 0 <aarch64_vg>
    333c:	add	x0, x0, #0x0
    3340:	mov	w1, #0x8                   	// #8
    3344:	strb	w1, [x0]
    3348:	adrp	x0, 0 <aarch64_vg>
    334c:	add	x0, x0, #0x0
    3350:	mov	w1, #0x8                   	// #8
    3354:	strb	w1, [x0]
    3358:	adrp	x0, 0 <aarch64_vg>
    335c:	add	x0, x0, #0x0
    3360:	mov	w1, #0x8                   	// #8
    3364:	strb	w1, [x0]
    3368:	adrp	x0, 0 <aarch64_vg>
    336c:	add	x0, x0, #0x0
    3370:	mov	w1, #0x8                   	// #8
    3374:	strb	w1, [x0]
    3378:	adrp	x0, 0 <aarch64_vg>
    337c:	add	x0, x0, #0x0
    3380:	mov	w1, #0x8                   	// #8
    3384:	strb	w1, [x0]
    3388:	adrp	x0, 0 <aarch64_vg>
    338c:	add	x0, x0, #0x0
    3390:	mov	w1, #0x8                   	// #8
    3394:	strb	w1, [x0]
    3398:	adrp	x0, 0 <aarch64_vg>
    339c:	add	x0, x0, #0x0
    33a0:	mov	w1, #0x8                   	// #8
    33a4:	strb	w1, [x0]
    33a8:	adrp	x0, 0 <aarch64_vg>
    33ac:	add	x0, x0, #0x0
    33b0:	mov	w1, #0x8                   	// #8
    33b4:	strb	w1, [x0]
    33b8:	adrp	x0, 0 <aarch64_vg>
    33bc:	add	x0, x0, #0x0
    33c0:	mov	w1, #0x8                   	// #8
    33c4:	strb	w1, [x0]
    33c8:	adrp	x0, 0 <aarch64_vg>
    33cc:	add	x0, x0, #0x0
    33d0:	mov	w1, #0x8                   	// #8
    33d4:	strb	w1, [x0]
    33d8:	adrp	x0, 0 <aarch64_vg>
    33dc:	add	x0, x0, #0x0
    33e0:	mov	w1, #0x8                   	// #8
    33e4:	strb	w1, [x0]
    33e8:	adrp	x0, 0 <aarch64_vg>
    33ec:	add	x0, x0, #0x0
    33f0:	mov	w1, #0x8                   	// #8
    33f4:	strb	w1, [x0]
    33f8:	adrp	x0, 0 <aarch64_vg>
    33fc:	add	x0, x0, #0x0
    3400:	mov	w1, #0x8                   	// #8
    3404:	strb	w1, [x0]
    3408:	adrp	x0, 0 <aarch64_vg>
    340c:	add	x0, x0, #0x0
    3410:	mov	w1, #0x8                   	// #8
    3414:	strb	w1, [x0]
    3418:	adrp	x0, 0 <aarch64_vg>
    341c:	add	x0, x0, #0x0
    3420:	mov	w1, #0x8                   	// #8
    3424:	strb	w1, [x0]
    3428:	adrp	x0, 0 <aarch64_vg>
    342c:	add	x0, x0, #0x0
    3430:	mov	w1, #0x8                   	// #8
    3434:	strb	w1, [x0]
    3438:	adrp	x0, 0 <aarch64_vg>
    343c:	add	x0, x0, #0x0
    3440:	mov	w1, #0x8                   	// #8
    3444:	strb	w1, [x0]
    3448:	adrp	x0, 0 <aarch64_vg>
    344c:	add	x0, x0, #0x0
    3450:	mov	w1, #0x8                   	// #8
    3454:	strb	w1, [x0]
    3458:	adrp	x0, 0 <aarch64_vg>
    345c:	add	x0, x0, #0x0
    3460:	mov	w1, #0x8                   	// #8
    3464:	strb	w1, [x0]
    3468:	adrp	x0, 0 <aarch64_vg>
    346c:	add	x0, x0, #0x0
    3470:	mov	w1, #0x8                   	// #8
    3474:	strb	w1, [x0]
    3478:	adrp	x0, 0 <aarch64_vg>
    347c:	add	x0, x0, #0x0
    3480:	mov	w1, #0x8                   	// #8
    3484:	strb	w1, [x0]
    3488:	adrp	x0, 0 <aarch64_vg>
    348c:	add	x0, x0, #0x0
    3490:	mov	w1, #0x8                   	// #8
    3494:	strb	w1, [x0]
    3498:	adrp	x0, 0 <aarch64_vg>
    349c:	add	x0, x0, #0x0
    34a0:	mov	w1, #0x8                   	// #8
    34a4:	strb	w1, [x0]
    34a8:	adrp	x0, 0 <aarch64_vg>
    34ac:	add	x0, x0, #0x0
    34b0:	mov	w1, #0x8                   	// #8
    34b4:	strb	w1, [x0]
    34b8:	adrp	x0, 0 <aarch64_vg>
    34bc:	add	x0, x0, #0x0
    34c0:	mov	w1, #0x8                   	// #8
    34c4:	strb	w1, [x0]
    34c8:	adrp	x0, 0 <aarch64_vg>
    34cc:	add	x0, x0, #0x0
    34d0:	mov	w1, #0x8                   	// #8
    34d4:	strb	w1, [x0]
    34d8:	adrp	x0, 0 <aarch64_vg>
    34dc:	add	x0, x0, #0x0
    34e0:	mov	w1, #0x8                   	// #8
    34e4:	strb	w1, [x0]
    34e8:	adrp	x0, 0 <aarch64_vg>
    34ec:	add	x0, x0, #0x0
    34f0:	mov	w1, #0x8                   	// #8
    34f4:	strb	w1, [x0]
    34f8:	adrp	x0, 0 <aarch64_vg>
    34fc:	add	x0, x0, #0x0
    3500:	mov	w1, #0x8                   	// #8
    3504:	strb	w1, [x0]
    3508:	adrp	x0, 0 <aarch64_vg>
    350c:	add	x0, x0, #0x0
    3510:	mov	w1, #0x8                   	// #8
    3514:	strb	w1, [x0]
    3518:	nop
    351c:	ret

0000000000003520 <uw_init_context_1>:
    3520:	sub	sp, sp, #0x6d0
    3524:	stp	x29, x30, [sp]
    3528:	mov	x29, sp
    352c:	mov	x3, x30
    3530:	str	x0, [sp, #40]
    3534:	str	x1, [sp, #32]
    3538:	str	x2, [sp, #24]
    353c:	mov	x0, x3
    3540:	str	x0, [sp, #1736]
    3544:	ldr	x1, [sp, #1736]
    3548:	mov	x0, x1
    354c:	mov	x30, x1
    3550:	xpaclri
    3554:	mov	x0, x30
    3558:	str	x0, [sp, #1736]
    355c:	mov	x2, #0x3c0                 	// #960
    3560:	mov	w1, #0x0                   	// #0
    3564:	ldr	x0, [sp, #40]
    3568:	bl	0 <memset>
    356c:	ldr	x0, [sp, #40]
    3570:	ldr	x1, [sp, #1736]
    3574:	str	x1, [x0, #792]
    3578:	ldr	x0, [sp, #40]
    357c:	mov	x1, #0x4000000000000000    	// #4611686018427387904
    3580:	str	x1, [x0, #832]
    3584:	add	x0, sp, #0x40
    3588:	mov	x1, x0
    358c:	ldr	x0, [sp, #40]
    3590:	bl	2760 <uw_frame_state_for>
    3594:	str	w0, [sp, #1732]
    3598:	ldr	w0, [sp, #1732]
    359c:	cmp	w0, #0x0
    35a0:	b.eq	35a8 <uw_init_context_1+0x88>  // b.none
    35a4:	bl	0 <abort>
    35a8:	adrp	x0, 0 <aarch64_vg>
    35ac:	add	x1, x0, #0x0
    35b0:	adrp	x0, 0 <aarch64_vg>
    35b4:	add	x0, x0, #0x0
    35b8:	bl	57c <__gthread_once>
    35bc:	cmp	w0, #0x0
    35c0:	b.eq	35dc <uw_init_context_1+0xbc>  // b.none
    35c4:	adrp	x0, 0 <aarch64_vg>
    35c8:	add	x0, x0, #0x0
    35cc:	ldrb	w0, [x0]
    35d0:	cmp	w0, #0x0
    35d4:	b.ne	35dc <uw_init_context_1+0xbc>  // b.any
    35d8:	bl	2ff8 <init_dwarf_reg_size_table>
    35dc:	add	x0, sp, #0x38
    35e0:	mov	x2, x0
    35e4:	ldr	x1, [sp, #32]
    35e8:	ldr	x0, [sp, #40]
    35ec:	bl	2acc <_Unwind_SetSpColumn>
    35f0:	mov	w0, #0x1                   	// #1
    35f4:	str	w0, [sp, #1664]
    35f8:	mov	w0, #0x1f                  	// #31
    35fc:	mov	w0, w0
    3600:	str	x0, [sp, #1648]
    3604:	str	xzr, [sp, #1640]
    3608:	add	x0, sp, #0x40
    360c:	mov	x1, x0
    3610:	ldr	x0, [sp, #40]
    3614:	bl	2b50 <uw_update_context_1>
    3618:	ldr	x1, [sp, #24]
    361c:	ldr	x0, [sp, #40]
    3620:	str	x1, [x0, #792]
    3624:	ldr	x0, [sp, #40]
    3628:	ldr	x0, [x0, #792]
    362c:	mov	x1, x0
    3630:	mov	x30, x0
    3634:	xpaclri
    3638:	mov	x1, x30
    363c:	ldr	x0, [sp, #40]
    3640:	str	x1, [x0, #792]
    3644:	nop
    3648:	ldp	x29, x30, [sp]
    364c:	add	sp, sp, #0x6d0
    3650:	ret

0000000000003654 <_Unwind_DebugHook>:
    3654:	sub	sp, sp, #0x10
    3658:	str	x0, [sp, #8]
    365c:	str	x1, [sp]
    3660:	nop
    3664:	add	sp, sp, #0x10
    3668:	ret

000000000000366c <uw_frob_return_addr>:
    366c:	stp	x29, x30, [sp, #-48]!
    3670:	mov	x29, sp
    3674:	str	x0, [sp, #24]
    3678:	str	x1, [sp, #16]
    367c:	ldr	x0, [sp, #16]
    3680:	ldr	x0, [x0, #792]
    3684:	str	x0, [sp, #40]
    3688:	ldr	x2, [sp, #40]
    368c:	ldr	x1, [sp, #16]
    3690:	ldr	x0, [sp, #24]
    3694:	bl	c24 <aarch64_post_frob_eh_handler_addr>
    3698:	str	x0, [sp, #40]
    369c:	ldr	x0, [sp, #40]
    36a0:	ldp	x29, x30, [sp], #48
    36a4:	ret

00000000000036a8 <uw_install_context_1>:
    36a8:	stp	x29, x30, [sp, #-96]!
    36ac:	mov	x29, sp
    36b0:	str	x0, [sp, #24]
    36b4:	str	x1, [sp, #16]
    36b8:	mov	w0, #0x1f                  	// #31
    36bc:	mov	w1, w0
    36c0:	ldr	x0, [sp, #16]
    36c4:	bl	96c <_Unwind_GetGRPtr>
    36c8:	cmp	x0, #0x0
    36cc:	b.ne	36ec <uw_install_context_1+0x44>  // b.any
    36d0:	ldr	x0, [sp, #16]
    36d4:	ldr	x0, [x0, #784]
    36d8:	add	x1, sp, #0x38
    36dc:	mov	x2, x1
    36e0:	mov	x1, x0
    36e4:	ldr	x0, [sp, #16]
    36e8:	bl	2acc <_Unwind_SetSpColumn>
    36ec:	str	xzr, [sp, #88]
    36f0:	b	381c <uw_install_context_1+0x174>
    36f4:	ldr	x0, [sp, #24]
    36f8:	ldr	x1, [sp, #88]
    36fc:	ldr	x0, [x0, x1, lsl #3]
    3700:	str	x0, [sp, #72]
    3704:	ldr	x0, [sp, #16]
    3708:	ldr	x1, [sp, #88]
    370c:	ldr	x0, [x0, x1, lsl #3]
    3710:	str	x0, [sp, #64]
    3714:	ldr	x1, [sp, #24]
    3718:	ldr	x0, [sp, #88]
    371c:	add	x0, x1, x0
    3720:	ldrb	w0, [x0, #856]
    3724:	cmp	w0, #0x0
    3728:	b.eq	3730 <uw_install_context_1+0x88>  // b.none
    372c:	bl	0 <abort>
    3730:	ldr	x1, [sp, #16]
    3734:	ldr	x0, [sp, #88]
    3738:	add	x0, x1, x0
    373c:	ldrb	w0, [x0, #856]
    3740:	cmp	w0, #0x0
    3744:	b.eq	37c0 <uw_install_context_1+0x118>  // b.none
    3748:	ldr	x0, [sp, #72]
    374c:	cmp	x0, #0x0
    3750:	b.eq	37c0 <uw_install_context_1+0x118>  // b.none
    3754:	adrp	x0, 0 <aarch64_vg>
    3758:	add	x1, x0, #0x0
    375c:	ldr	x0, [sp, #88]
    3760:	add	x0, x1, x0
    3764:	ldrb	w0, [x0]
    3768:	cmp	w0, #0x8
    376c:	b.ne	3788 <uw_install_context_1+0xe0>  // b.any
    3770:	ldr	x0, [sp, #64]
    3774:	str	x0, [sp, #48]
    3778:	ldr	x1, [sp, #48]
    377c:	ldr	x0, [sp, #72]
    3780:	str	x1, [x0]
    3784:	b	3810 <uw_install_context_1+0x168>
    3788:	adrp	x0, 0 <aarch64_vg>
    378c:	add	x1, x0, #0x0
    3790:	ldr	x0, [sp, #88]
    3794:	add	x0, x1, x0
    3798:	ldrb	w0, [x0]
    379c:	cmp	w0, #0x8
    37a0:	b.eq	37a8 <uw_install_context_1+0x100>  // b.none
    37a4:	bl	0 <abort>
    37a8:	ldr	x0, [sp, #64]
    37ac:	str	x0, [sp, #40]
    37b0:	ldr	x1, [sp, #40]
    37b4:	ldr	x0, [sp, #72]
    37b8:	str	x1, [x0]
    37bc:	b	3810 <uw_install_context_1+0x168>
    37c0:	ldr	x0, [sp, #64]
    37c4:	cmp	x0, #0x0
    37c8:	b.eq	3810 <uw_install_context_1+0x168>  // b.none
    37cc:	ldr	x0, [sp, #72]
    37d0:	cmp	x0, #0x0
    37d4:	b.eq	3810 <uw_install_context_1+0x168>  // b.none
    37d8:	ldr	x1, [sp, #64]
    37dc:	ldr	x0, [sp, #72]
    37e0:	cmp	x1, x0
    37e4:	b.eq	3810 <uw_install_context_1+0x168>  // b.none
    37e8:	adrp	x0, 0 <aarch64_vg>
    37ec:	add	x1, x0, #0x0
    37f0:	ldr	x0, [sp, #88]
    37f4:	add	x0, x1, x0
    37f8:	ldrb	w0, [x0]
    37fc:	and	x0, x0, #0xff
    3800:	mov	x2, x0
    3804:	ldr	x1, [sp, #64]
    3808:	ldr	x0, [sp, #72]
    380c:	bl	0 <memcpy>
    3810:	ldr	x0, [sp, #88]
    3814:	add	x0, x0, #0x1
    3818:	str	x0, [sp, #88]
    381c:	ldr	x0, [sp, #88]
    3820:	cmp	x0, #0x60
    3824:	b.le	36f4 <uw_install_context_1+0x4c>
    3828:	mov	w0, #0x1f                  	// #31
    382c:	mov	w1, w0
    3830:	ldr	x0, [sp, #24]
    3834:	bl	96c <_Unwind_GetGRPtr>
    3838:	cmp	x0, #0x0
    383c:	b.ne	3878 <uw_install_context_1+0x1d0>  // b.any
    3840:	mov	w0, #0x1f                  	// #31
    3844:	mov	w1, w0
    3848:	ldr	x0, [sp, #16]
    384c:	bl	864 <_Unwind_GetPtr>
    3850:	str	x0, [sp, #80]
    3854:	ldr	x0, [sp, #24]
    3858:	ldr	x0, [x0, #784]
    385c:	ldr	x1, [sp, #80]
    3860:	sub	x0, x1, x0
    3864:	mov	x1, x0
    3868:	ldr	x0, [sp, #16]
    386c:	ldr	x0, [x0, #848]
    3870:	add	x0, x1, x0
    3874:	b	387c <uw_install_context_1+0x1d4>
    3878:	mov	x0, #0x0                   	// #0
    387c:	ldp	x29, x30, [sp], #96
    3880:	ret

0000000000003884 <uw_identify_context>:
    3884:	stp	x29, x30, [sp, #-48]!
    3888:	mov	x29, sp
    388c:	str	x19, [sp, #16]
    3890:	str	x0, [sp, #40]
    3894:	ldr	x0, [sp, #40]
    3898:	bl	888 <_Unwind_GetCFA>
    389c:	mov	x19, x0
    38a0:	ldr	x0, [sp, #40]
    38a4:	bl	6ec <_Unwind_IsSignalFrame>
    38a8:	sub	x0, x19, x0
    38ac:	ldr	x19, [sp, #16]
    38b0:	ldp	x29, x30, [sp], #48
    38b4:	ret

00000000000038b8 <_Unwind_RaiseException_Phase2>:
    38b8:	sub	sp, sp, #0x6c0
    38bc:	stp	x29, x30, [sp]
    38c0:	mov	x29, sp
    38c4:	str	x0, [sp, #40]
    38c8:	str	x1, [sp, #32]
    38cc:	str	x2, [sp, #24]
    38d0:	mov	x0, #0x1                   	// #1
    38d4:	str	x0, [sp, #1720]
    38d8:	add	x0, sp, #0x30
    38dc:	mov	x1, x0
    38e0:	ldr	x0, [sp, #32]
    38e4:	bl	2760 <uw_frame_state_for>
    38e8:	str	w0, [sp, #1716]
    38ec:	ldr	x0, [sp, #32]
    38f0:	bl	3884 <uw_identify_context>
    38f4:	mov	x1, x0
    38f8:	ldr	x0, [sp, #40]
    38fc:	ldr	x0, [x0, #24]
    3900:	cmp	x1, x0
    3904:	b.ne	3910 <_Unwind_RaiseException_Phase2+0x58>  // b.any
    3908:	mov	w0, #0x4                   	// #4
    390c:	b	3914 <_Unwind_RaiseException_Phase2+0x5c>
    3910:	mov	w0, #0x0                   	// #0
    3914:	str	w0, [sp, #1712]
    3918:	ldr	w0, [sp, #1716]
    391c:	cmp	w0, #0x0
    3920:	b.eq	392c <_Unwind_RaiseException_Phase2+0x74>  // b.none
    3924:	mov	w0, #0x2                   	// #2
    3928:	b	39c8 <_Unwind_RaiseException_Phase2+0x110>
    392c:	ldr	x0, [sp, #1664]
    3930:	cmp	x0, #0x0
    3934:	b.eq	3998 <_Unwind_RaiseException_Phase2+0xe0>  // b.none
    3938:	ldr	x5, [sp, #1664]
    393c:	ldr	w0, [sp, #1712]
    3940:	orr	w1, w0, #0x2
    3944:	ldr	x0, [sp, #40]
    3948:	ldr	x0, [x0]
    394c:	ldr	x4, [sp, #32]
    3950:	ldr	x3, [sp, #40]
    3954:	mov	x2, x0
    3958:	mov	w0, #0x1                   	// #1
    395c:	blr	x5
    3960:	str	w0, [sp, #1716]
    3964:	ldr	w0, [sp, #1716]
    3968:	cmp	w0, #0x7
    396c:	b.ne	3984 <_Unwind_RaiseException_Phase2+0xcc>  // b.any
    3970:	ldr	x0, [sp, #24]
    3974:	ldr	x1, [sp, #1720]
    3978:	str	x1, [x0]
    397c:	ldr	w0, [sp, #1716]
    3980:	b	39c8 <_Unwind_RaiseException_Phase2+0x110>
    3984:	ldr	w0, [sp, #1716]
    3988:	cmp	w0, #0x8
    398c:	b.eq	3998 <_Unwind_RaiseException_Phase2+0xe0>  // b.none
    3990:	mov	w0, #0x2                   	// #2
    3994:	b	39c8 <_Unwind_RaiseException_Phase2+0x110>
    3998:	ldr	w0, [sp, #1712]
    399c:	cmp	w0, #0x0
    39a0:	b.eq	39a8 <_Unwind_RaiseException_Phase2+0xf0>  // b.none
    39a4:	bl	0 <abort>
    39a8:	add	x0, sp, #0x30
    39ac:	mov	x1, x0
    39b0:	ldr	x0, [sp, #32]
    39b4:	bl	2f38 <uw_update_context>
    39b8:	ldr	x0, [sp, #1720]
    39bc:	add	x0, x0, #0x1
    39c0:	str	x0, [sp, #1720]
    39c4:	b	38d8 <_Unwind_RaiseException_Phase2+0x20>
    39c8:	ldp	x29, x30, [sp]
    39cc:	add	sp, sp, #0x6c0
    39d0:	ret

00000000000039d4 <_Unwind_RaiseException>:
    39d4:	sub	sp, sp, #0xef0
    39d8:	stp	x29, x30, [sp]
    39dc:	mov	x29, sp
    39e0:	stp	x0, x1, [sp, #16]
    39e4:	stp	x2, x3, [sp, #32]
    39e8:	stp	x19, x20, [sp, #48]
    39ec:	stp	x21, x22, [sp, #64]
    39f0:	stp	x23, x24, [sp, #80]
    39f4:	stp	x25, x26, [sp, #96]
    39f8:	stp	x27, x28, [sp, #112]
    39fc:	stp	d8, d9, [sp, #128]
    3a00:	stp	d10, d11, [sp, #144]
    3a04:	stp	d12, d13, [sp, #160]
    3a08:	stp	d14, d15, [sp, #176]
    3a0c:	mov	x2, x30
    3a10:	str	x0, [sp, #200]
    3a14:	add	x1, sp, #0xef0
    3a18:	add	x0, sp, #0xb18
    3a1c:	bl	3520 <uw_init_context_1>
    3a20:	add	x0, sp, #0x758
    3a24:	add	x1, sp, #0xb18
    3a28:	mov	x2, #0x3c0                 	// #960
    3a2c:	bl	0 <memcpy>
    3a30:	add	x1, sp, #0xd0
    3a34:	add	x0, sp, #0x758
    3a38:	bl	2760 <uw_frame_state_for>
    3a3c:	str	w0, [sp, #3820]
    3a40:	ldr	w0, [sp, #3820]
    3a44:	cmp	w0, #0x5
    3a48:	b.ne	3a54 <_Unwind_RaiseException+0x80>  // b.any
    3a4c:	mov	w0, #0x5                   	// #5
    3a50:	b	3b70 <_Unwind_RaiseException+0x19c>
    3a54:	ldr	w0, [sp, #3820]
    3a58:	cmp	w0, #0x0
    3a5c:	b.eq	3a68 <_Unwind_RaiseException+0x94>  // b.none
    3a60:	mov	w0, #0x3                   	// #3
    3a64:	b	3b70 <_Unwind_RaiseException+0x19c>
    3a68:	ldr	x0, [sp, #1824]
    3a6c:	cmp	x0, #0x0
    3a70:	b.eq	3b18 <_Unwind_RaiseException+0x144>  // b.none
    3a74:	ldr	x5, [sp, #1824]
    3a78:	ldr	x0, [sp, #200]
    3a7c:	ldr	x0, [x0]
    3a80:	add	x1, sp, #0x758
    3a84:	mov	x4, x1
    3a88:	ldr	x3, [sp, #200]
    3a8c:	mov	x2, x0
    3a90:	mov	w1, #0x1                   	// #1
    3a94:	mov	w0, #0x1                   	// #1
    3a98:	blr	x5
    3a9c:	str	w0, [sp, #3820]
    3aa0:	ldr	w0, [sp, #3820]
    3aa4:	cmp	w0, #0x6
    3aa8:	b.ne	3b04 <_Unwind_RaiseException+0x130>  // b.any
    3aac:	ldr	x0, [sp, #200]
    3ab0:	str	xzr, [x0, #16]
    3ab4:	add	x0, sp, #0x758
    3ab8:	bl	3884 <uw_identify_context>
    3abc:	mov	x1, x0
    3ac0:	ldr	x0, [sp, #200]
    3ac4:	str	x1, [x0, #24]
    3ac8:	add	x0, sp, #0x758
    3acc:	add	x1, sp, #0xb18
    3ad0:	mov	x2, #0x3c0                 	// #960
    3ad4:	bl	0 <memcpy>
    3ad8:	add	x1, sp, #0x750
    3adc:	add	x0, sp, #0x758
    3ae0:	mov	x2, x1
    3ae4:	mov	x1, x0
    3ae8:	ldr	x0, [sp, #200]
    3aec:	bl	38b8 <_Unwind_RaiseException_Phase2>
    3af0:	str	w0, [sp, #3820]
    3af4:	ldr	w0, [sp, #3820]
    3af8:	cmp	w0, #0x7
    3afc:	b.ne	3b28 <_Unwind_RaiseException+0x154>  // b.any
    3b00:	b	3b30 <_Unwind_RaiseException+0x15c>
    3b04:	ldr	w0, [sp, #3820]
    3b08:	cmp	w0, #0x8
    3b0c:	b.eq	3b18 <_Unwind_RaiseException+0x144>  // b.none
    3b10:	mov	w0, #0x3                   	// #3
    3b14:	b	3b70 <_Unwind_RaiseException+0x19c>
    3b18:	add	x1, sp, #0xd0
    3b1c:	add	x0, sp, #0x758
    3b20:	bl	2f38 <uw_update_context>
    3b24:	b	3a30 <_Unwind_RaiseException+0x5c>
    3b28:	ldr	w0, [sp, #3820]
    3b2c:	b	3b70 <_Unwind_RaiseException+0x19c>
    3b30:	add	x1, sp, #0x758
    3b34:	add	x0, sp, #0xb18
    3b38:	bl	36a8 <uw_install_context_1>
    3b3c:	str	x0, [sp, #3808]
    3b40:	add	x1, sp, #0x758
    3b44:	add	x0, sp, #0xb18
    3b48:	bl	366c <uw_frob_return_addr>
    3b4c:	str	x0, [sp, #3800]
    3b50:	ldr	x0, [sp, #2664]
    3b54:	ldr	x1, [sp, #3800]
    3b58:	bl	3654 <_Unwind_DebugHook>
    3b5c:	ldr	x2, [sp, #3808]
    3b60:	ldr	x1, [sp, #3800]
    3b64:	mov	x4, x2
    3b68:	str	x1, [x29, #8]
    3b6c:	b	3b74 <_Unwind_RaiseException+0x1a0>
    3b70:	mov	x4, #0x0                   	// #0
    3b74:	ldp	x0, x1, [sp, #16]
    3b78:	ldp	x2, x3, [sp, #32]
    3b7c:	ldp	x19, x20, [sp, #48]
    3b80:	ldp	x21, x22, [sp, #64]
    3b84:	ldp	x23, x24, [sp, #80]
    3b88:	ldp	x25, x26, [sp, #96]
    3b8c:	ldp	x27, x28, [sp, #112]
    3b90:	ldp	x29, x30, [sp]
    3b94:	ldp	d8, d9, [sp, #128]
    3b98:	ldp	d10, d11, [sp, #144]
    3b9c:	ldp	d12, d13, [sp, #160]
    3ba0:	ldp	d14, d15, [sp, #176]
    3ba4:	add	sp, sp, #0xef0
    3ba8:	add	sp, sp, x4
    3bac:	ret

0000000000003bb0 <_Unwind_ForcedUnwind_Phase2>:
    3bb0:	sub	sp, sp, #0x6e0
    3bb4:	stp	x29, x30, [sp]
    3bb8:	mov	x29, sp
    3bbc:	str	x0, [sp, #40]
    3bc0:	str	x1, [sp, #32]
    3bc4:	str	x2, [sp, #24]
    3bc8:	ldr	x0, [sp, #40]
    3bcc:	ldr	x0, [x0, #16]
    3bd0:	str	x0, [sp, #1728]
    3bd4:	ldr	x0, [sp, #40]
    3bd8:	ldr	x0, [x0, #24]
    3bdc:	str	x0, [sp, #1720]
    3be0:	mov	x0, #0x1                   	// #1
    3be4:	str	x0, [sp, #1744]
    3be8:	add	x0, sp, #0x30
    3bec:	mov	x1, x0
    3bf0:	ldr	x0, [sp, #32]
    3bf4:	bl	2760 <uw_frame_state_for>
    3bf8:	str	w0, [sp, #1756]
    3bfc:	ldr	w0, [sp, #1756]
    3c00:	cmp	w0, #0x0
    3c04:	b.eq	3c1c <_Unwind_ForcedUnwind_Phase2+0x6c>  // b.none
    3c08:	ldr	w0, [sp, #1756]
    3c0c:	cmp	w0, #0x5
    3c10:	b.eq	3c1c <_Unwind_ForcedUnwind_Phase2+0x6c>  // b.none
    3c14:	mov	w0, #0x2                   	// #2
    3c18:	b	3d18 <_Unwind_ForcedUnwind_Phase2+0x168>
    3c1c:	mov	w0, #0xa                   	// #10
    3c20:	str	w0, [sp, #1740]
    3c24:	ldr	w0, [sp, #1756]
    3c28:	cmp	w0, #0x5
    3c2c:	b.ne	3c3c <_Unwind_ForcedUnwind_Phase2+0x8c>  // b.any
    3c30:	ldr	w0, [sp, #1740]
    3c34:	orr	w0, w0, #0x10
    3c38:	str	w0, [sp, #1740]
    3c3c:	ldr	x0, [sp, #40]
    3c40:	ldr	x0, [x0]
    3c44:	ldr	x6, [sp, #1728]
    3c48:	ldr	x5, [sp, #1720]
    3c4c:	ldr	x4, [sp, #32]
    3c50:	ldr	x3, [sp, #40]
    3c54:	mov	x2, x0
    3c58:	ldr	w1, [sp, #1740]
    3c5c:	mov	w0, #0x1                   	// #1
    3c60:	blr	x6
    3c64:	str	w0, [sp, #1716]
    3c68:	ldr	w0, [sp, #1716]
    3c6c:	cmp	w0, #0x0
    3c70:	b.eq	3c7c <_Unwind_ForcedUnwind_Phase2+0xcc>  // b.none
    3c74:	mov	w0, #0x2                   	// #2
    3c78:	b	3d18 <_Unwind_ForcedUnwind_Phase2+0x168>
    3c7c:	ldr	w0, [sp, #1756]
    3c80:	cmp	w0, #0x5
    3c84:	b.eq	3cfc <_Unwind_ForcedUnwind_Phase2+0x14c>  // b.none
    3c88:	ldr	x0, [sp, #1664]
    3c8c:	cmp	x0, #0x0
    3c90:	b.eq	3cdc <_Unwind_ForcedUnwind_Phase2+0x12c>  // b.none
    3c94:	ldr	x5, [sp, #1664]
    3c98:	ldr	x0, [sp, #40]
    3c9c:	ldr	x0, [x0]
    3ca0:	ldr	x4, [sp, #32]
    3ca4:	ldr	x3, [sp, #40]
    3ca8:	mov	x2, x0
    3cac:	mov	w1, #0xa                   	// #10
    3cb0:	mov	w0, #0x1                   	// #1
    3cb4:	blr	x5
    3cb8:	str	w0, [sp, #1756]
    3cbc:	ldr	w0, [sp, #1756]
    3cc0:	cmp	w0, #0x7
    3cc4:	b.eq	3d04 <_Unwind_ForcedUnwind_Phase2+0x154>  // b.none
    3cc8:	ldr	w0, [sp, #1756]
    3ccc:	cmp	w0, #0x8
    3cd0:	b.eq	3cdc <_Unwind_ForcedUnwind_Phase2+0x12c>  // b.none
    3cd4:	mov	w0, #0x2                   	// #2
    3cd8:	b	3d18 <_Unwind_ForcedUnwind_Phase2+0x168>
    3cdc:	add	x0, sp, #0x30
    3ce0:	mov	x1, x0
    3ce4:	ldr	x0, [sp, #32]
    3ce8:	bl	2fd0 <uw_advance_context>
    3cec:	ldr	x0, [sp, #1744]
    3cf0:	add	x0, x0, #0x1
    3cf4:	str	x0, [sp, #1744]
    3cf8:	b	3be8 <_Unwind_ForcedUnwind_Phase2+0x38>
    3cfc:	nop
    3d00:	b	3d08 <_Unwind_ForcedUnwind_Phase2+0x158>
    3d04:	nop
    3d08:	ldr	x0, [sp, #24]
    3d0c:	ldr	x1, [sp, #1744]
    3d10:	str	x1, [x0]
    3d14:	ldr	w0, [sp, #1756]
    3d18:	ldp	x29, x30, [sp]
    3d1c:	add	sp, sp, #0x6e0
    3d20:	ret

0000000000003d24 <_Unwind_ForcedUnwind>:
    3d24:	sub	sp, sp, #0x880
    3d28:	stp	x29, x30, [sp]
    3d2c:	mov	x29, sp
    3d30:	stp	x0, x1, [sp, #16]
    3d34:	stp	x2, x3, [sp, #32]
    3d38:	stp	x19, x20, [sp, #48]
    3d3c:	stp	x21, x22, [sp, #64]
    3d40:	stp	x23, x24, [sp, #80]
    3d44:	stp	x25, x26, [sp, #96]
    3d48:	stp	x27, x28, [sp, #112]
    3d4c:	stp	d8, d9, [sp, #128]
    3d50:	stp	d10, d11, [sp, #144]
    3d54:	stp	d12, d13, [sp, #160]
    3d58:	stp	d14, d15, [sp, #176]
    3d5c:	mov	x3, x30
    3d60:	str	x0, [sp, #216]
    3d64:	str	x1, [sp, #208]
    3d68:	str	x2, [sp, #200]
    3d6c:	add	x1, sp, #0x880
    3d70:	mov	x2, x3
    3d74:	add	x0, sp, #0x4a8
    3d78:	bl	3520 <uw_init_context_1>
    3d7c:	add	x0, sp, #0xe8
    3d80:	add	x1, sp, #0x4a8
    3d84:	mov	x2, #0x3c0                 	// #960
    3d88:	bl	0 <memcpy>
    3d8c:	ldr	x1, [sp, #208]
    3d90:	ldr	x0, [sp, #216]
    3d94:	str	x1, [x0, #16]
    3d98:	ldr	x1, [sp, #200]
    3d9c:	ldr	x0, [sp, #216]
    3da0:	str	x1, [x0, #24]
    3da4:	add	x1, sp, #0xe0
    3da8:	add	x0, sp, #0xe8
    3dac:	mov	x2, x1
    3db0:	mov	x1, x0
    3db4:	ldr	x0, [sp, #216]
    3db8:	bl	3bb0 <_Unwind_ForcedUnwind_Phase2>
    3dbc:	str	w0, [sp, #2172]
    3dc0:	ldr	w0, [sp, #2172]
    3dc4:	cmp	w0, #0x7
    3dc8:	b.eq	3dd8 <_Unwind_ForcedUnwind+0xb4>  // b.none
    3dcc:	ldr	w0, [sp, #2172]
    3dd0:	mov	x4, #0x0                   	// #0
    3dd4:	b	3e14 <_Unwind_ForcedUnwind+0xf0>
    3dd8:	add	x1, sp, #0xe8
    3ddc:	add	x0, sp, #0x4a8
    3de0:	bl	36a8 <uw_install_context_1>
    3de4:	str	x0, [sp, #2160]
    3de8:	add	x1, sp, #0xe8
    3dec:	add	x0, sp, #0x4a8
    3df0:	bl	366c <uw_frob_return_addr>
    3df4:	str	x0, [sp, #2152]
    3df8:	ldr	x0, [sp, #1016]
    3dfc:	ldr	x1, [sp, #2152]
    3e00:	bl	3654 <_Unwind_DebugHook>
    3e04:	ldr	x2, [sp, #2160]
    3e08:	ldr	x1, [sp, #2152]
    3e0c:	mov	x4, x2
    3e10:	str	x1, [x29, #8]
    3e14:	ldp	x0, x1, [sp, #16]
    3e18:	ldp	x2, x3, [sp, #32]
    3e1c:	ldp	x19, x20, [sp, #48]
    3e20:	ldp	x21, x22, [sp, #64]
    3e24:	ldp	x23, x24, [sp, #80]
    3e28:	ldp	x25, x26, [sp, #96]
    3e2c:	ldp	x27, x28, [sp, #112]
    3e30:	ldp	x29, x30, [sp]
    3e34:	ldp	d8, d9, [sp, #128]
    3e38:	ldp	d10, d11, [sp, #144]
    3e3c:	ldp	d12, d13, [sp, #160]
    3e40:	ldp	d14, d15, [sp, #176]
    3e44:	add	sp, sp, #0x880
    3e48:	add	sp, sp, x4
    3e4c:	ret

0000000000003e50 <_Unwind_Resume>:
    3e50:	sub	sp, sp, #0x870
    3e54:	stp	x29, x30, [sp]
    3e58:	mov	x29, sp
    3e5c:	stp	x0, x1, [sp, #16]
    3e60:	stp	x2, x3, [sp, #32]
    3e64:	stp	x19, x20, [sp, #48]
    3e68:	stp	x21, x22, [sp, #64]
    3e6c:	stp	x23, x24, [sp, #80]
    3e70:	stp	x25, x26, [sp, #96]
    3e74:	stp	x27, x28, [sp, #112]
    3e78:	stp	d8, d9, [sp, #128]
    3e7c:	stp	d10, d11, [sp, #144]
    3e80:	stp	d12, d13, [sp, #160]
    3e84:	stp	d14, d15, [sp, #176]
    3e88:	mov	x2, x30
    3e8c:	str	x0, [sp, #200]
    3e90:	add	x1, sp, #0x870
    3e94:	add	x0, sp, #0x498
    3e98:	bl	3520 <uw_init_context_1>
    3e9c:	add	x0, sp, #0xd8
    3ea0:	add	x1, sp, #0x498
    3ea4:	mov	x2, #0x3c0                 	// #960
    3ea8:	bl	0 <memcpy>
    3eac:	ldr	x0, [sp, #200]
    3eb0:	ldr	x0, [x0, #16]
    3eb4:	cmp	x0, #0x0
    3eb8:	b.ne	3edc <_Unwind_Resume+0x8c>  // b.any
    3ebc:	add	x1, sp, #0xd0
    3ec0:	add	x0, sp, #0xd8
    3ec4:	mov	x2, x1
    3ec8:	mov	x1, x0
    3ecc:	ldr	x0, [sp, #200]
    3ed0:	bl	38b8 <_Unwind_RaiseException_Phase2>
    3ed4:	str	w0, [sp, #2156]
    3ed8:	b	3ef8 <_Unwind_Resume+0xa8>
    3edc:	add	x1, sp, #0xd0
    3ee0:	add	x0, sp, #0xd8
    3ee4:	mov	x2, x1
    3ee8:	mov	x1, x0
    3eec:	ldr	x0, [sp, #200]
    3ef0:	bl	3bb0 <_Unwind_ForcedUnwind_Phase2>
    3ef4:	str	w0, [sp, #2156]
    3ef8:	ldr	w0, [sp, #2156]
    3efc:	cmp	w0, #0x7
    3f00:	b.eq	3f08 <_Unwind_Resume+0xb8>  // b.none
    3f04:	bl	0 <abort>
    3f08:	add	x1, sp, #0xd8
    3f0c:	add	x0, sp, #0x498
    3f10:	bl	36a8 <uw_install_context_1>
    3f14:	str	x0, [sp, #2144]
    3f18:	add	x1, sp, #0xd8
    3f1c:	add	x0, sp, #0x498
    3f20:	bl	366c <uw_frob_return_addr>
    3f24:	str	x0, [sp, #2136]
    3f28:	ldr	x0, [sp, #1000]
    3f2c:	ldr	x1, [sp, #2136]
    3f30:	bl	3654 <_Unwind_DebugHook>
    3f34:	ldr	x1, [sp, #2144]
    3f38:	ldr	x0, [sp, #2136]
    3f3c:	mov	x4, x1
    3f40:	str	x0, [x29, #8]
    3f44:	ldp	x0, x1, [sp, #16]
    3f48:	ldp	x2, x3, [sp, #32]
    3f4c:	ldp	x19, x20, [sp, #48]
    3f50:	ldp	x21, x22, [sp, #64]
    3f54:	ldp	x23, x24, [sp, #80]
    3f58:	ldp	x25, x26, [sp, #96]
    3f5c:	ldp	x27, x28, [sp, #112]
    3f60:	ldp	x29, x30, [sp]
    3f64:	ldp	d8, d9, [sp, #128]
    3f68:	ldp	d10, d11, [sp, #144]
    3f6c:	ldp	d12, d13, [sp, #160]
    3f70:	ldp	d14, d15, [sp, #176]
    3f74:	add	sp, sp, #0x870
    3f78:	add	sp, sp, x4
    3f7c:	ret

0000000000003f80 <_Unwind_Resume_or_Rethrow>:
    3f80:	sub	sp, sp, #0x870
    3f84:	stp	x29, x30, [sp]
    3f88:	mov	x29, sp
    3f8c:	stp	x0, x1, [sp, #16]
    3f90:	stp	x2, x3, [sp, #32]
    3f94:	stp	x19, x20, [sp, #48]
    3f98:	stp	x21, x22, [sp, #64]
    3f9c:	stp	x23, x24, [sp, #80]
    3fa0:	stp	x25, x26, [sp, #96]
    3fa4:	stp	x27, x28, [sp, #112]
    3fa8:	stp	d8, d9, [sp, #128]
    3fac:	stp	d10, d11, [sp, #144]
    3fb0:	stp	d12, d13, [sp, #160]
    3fb4:	stp	d14, d15, [sp, #176]
    3fb8:	mov	x2, x30
    3fbc:	str	x0, [sp, #200]
    3fc0:	ldr	x0, [sp, #200]
    3fc4:	ldr	x0, [x0, #16]
    3fc8:	cmp	x0, #0x0
    3fcc:	b.ne	3fe0 <_Unwind_Resume_or_Rethrow+0x60>  // b.any
    3fd0:	ldr	x0, [sp, #200]
    3fd4:	bl	39d4 <_Unwind_RaiseException>
    3fd8:	mov	x4, #0x0                   	// #0
    3fdc:	b	4064 <_Unwind_Resume_or_Rethrow+0xe4>
    3fe0:	add	x1, sp, #0x870
    3fe4:	add	x0, sp, #0x498
    3fe8:	bl	3520 <uw_init_context_1>
    3fec:	add	x0, sp, #0xd8
    3ff0:	add	x1, sp, #0x498
    3ff4:	mov	x2, #0x3c0                 	// #960
    3ff8:	bl	0 <memcpy>
    3ffc:	add	x1, sp, #0xd0
    4000:	add	x0, sp, #0xd8
    4004:	mov	x2, x1
    4008:	mov	x1, x0
    400c:	ldr	x0, [sp, #200]
    4010:	bl	3bb0 <_Unwind_ForcedUnwind_Phase2>
    4014:	str	w0, [sp, #2156]
    4018:	ldr	w0, [sp, #2156]
    401c:	cmp	w0, #0x7
    4020:	b.eq	4028 <_Unwind_Resume_or_Rethrow+0xa8>  // b.none
    4024:	bl	0 <abort>
    4028:	add	x1, sp, #0xd8
    402c:	add	x0, sp, #0x498
    4030:	bl	36a8 <uw_install_context_1>
    4034:	str	x0, [sp, #2144]
    4038:	add	x1, sp, #0xd8
    403c:	add	x0, sp, #0x498
    4040:	bl	366c <uw_frob_return_addr>
    4044:	str	x0, [sp, #2136]
    4048:	ldr	x0, [sp, #1000]
    404c:	ldr	x1, [sp, #2136]
    4050:	bl	3654 <_Unwind_DebugHook>
    4054:	ldr	x2, [sp, #2144]
    4058:	ldr	x1, [sp, #2136]
    405c:	mov	x4, x2
    4060:	str	x1, [x29, #8]
    4064:	ldp	x0, x1, [sp, #16]
    4068:	ldp	x2, x3, [sp, #32]
    406c:	ldp	x19, x20, [sp, #48]
    4070:	ldp	x21, x22, [sp, #64]
    4074:	ldp	x23, x24, [sp, #80]
    4078:	ldp	x25, x26, [sp, #96]
    407c:	ldp	x27, x28, [sp, #112]
    4080:	ldp	x29, x30, [sp]
    4084:	ldp	d8, d9, [sp, #128]
    4088:	ldp	d10, d11, [sp, #144]
    408c:	ldp	d12, d13, [sp, #160]
    4090:	ldp	d14, d15, [sp, #176]
    4094:	add	sp, sp, #0x870
    4098:	add	sp, sp, x4
    409c:	ret

00000000000040a0 <_Unwind_DeleteException>:
    40a0:	stp	x29, x30, [sp, #-32]!
    40a4:	mov	x29, sp
    40a8:	str	x0, [sp, #24]
    40ac:	ldr	x0, [sp, #24]
    40b0:	ldr	x0, [x0, #8]
    40b4:	cmp	x0, #0x0
    40b8:	b.eq	40d0 <_Unwind_DeleteException+0x30>  // b.none
    40bc:	ldr	x0, [sp, #24]
    40c0:	ldr	x2, [x0, #8]
    40c4:	ldr	x1, [sp, #24]
    40c8:	mov	w0, #0x1                   	// #1
    40cc:	blr	x2
    40d0:	nop
    40d4:	ldp	x29, x30, [sp], #32
    40d8:	ret

00000000000040dc <_Unwind_Backtrace>:
    40dc:	sub	sp, sp, #0xb00
    40e0:	stp	x29, x30, [sp]
    40e4:	mov	x29, sp
    40e8:	stp	x19, x20, [sp, #16]
    40ec:	stp	x21, x22, [sp, #32]
    40f0:	stp	x23, x24, [sp, #48]
    40f4:	stp	x25, x26, [sp, #64]
    40f8:	stp	x27, x28, [sp, #80]
    40fc:	stp	d8, d9, [sp, #96]
    4100:	stp	d10, d11, [sp, #112]
    4104:	stp	d12, d13, [sp, #128]
    4108:	stp	d14, d15, [sp, #144]
    410c:	mov	x2, x30
    4110:	str	x0, [sp, #168]
    4114:	str	x1, [sp, #160]
    4118:	add	x1, sp, #0xb00
    411c:	add	x0, sp, #0x738
    4120:	bl	3520 <uw_init_context_1>
    4124:	add	x1, sp, #0xb8
    4128:	add	x0, sp, #0x738
    412c:	bl	2760 <uw_frame_state_for>
    4130:	str	w0, [sp, #2812]
    4134:	ldr	w0, [sp, #2812]
    4138:	cmp	w0, #0x0
    413c:	b.eq	4154 <_Unwind_Backtrace+0x78>  // b.none
    4140:	ldr	w0, [sp, #2812]
    4144:	cmp	w0, #0x5
    4148:	b.eq	4154 <_Unwind_Backtrace+0x78>  // b.none
    414c:	mov	w0, #0x3                   	// #3
    4150:	b	4198 <_Unwind_Backtrace+0xbc>
    4154:	add	x0, sp, #0x738
    4158:	ldr	x2, [sp, #168]
    415c:	ldr	x1, [sp, #160]
    4160:	blr	x2
    4164:	cmp	w0, #0x0
    4168:	b.eq	4174 <_Unwind_Backtrace+0x98>  // b.none
    416c:	mov	w0, #0x3                   	// #3
    4170:	b	4198 <_Unwind_Backtrace+0xbc>
    4174:	ldr	w0, [sp, #2812]
    4178:	cmp	w0, #0x5
    417c:	b.ne	4188 <_Unwind_Backtrace+0xac>  // b.any
    4180:	ldr	w0, [sp, #2812]
    4184:	b	4198 <_Unwind_Backtrace+0xbc>
    4188:	add	x1, sp, #0xb8
    418c:	add	x0, sp, #0x738
    4190:	bl	2f38 <uw_update_context>
    4194:	b	4124 <_Unwind_Backtrace+0x48>
    4198:	ldp	x19, x20, [sp, #16]
    419c:	ldp	x21, x22, [sp, #32]
    41a0:	ldp	x23, x24, [sp, #48]
    41a4:	ldp	x25, x26, [sp, #64]
    41a8:	ldp	x27, x28, [sp, #80]
    41ac:	ldp	x29, x30, [sp]
    41b0:	ldp	d8, d9, [sp, #96]
    41b4:	ldp	d10, d11, [sp, #112]
    41b8:	ldp	d12, d13, [sp, #128]
    41bc:	ldp	d14, d15, [sp, #144]
    41c0:	add	sp, sp, #0xb00
    41c4:	ret

unwind-dw2-fde-dip.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <size_of_encoded_value>:
       0:	stp	x29, x30, [sp, #-32]!
       4:	mov	x29, sp
       8:	strb	w0, [sp, #31]
       c:	ldrb	w0, [sp, #31]
      10:	cmp	w0, #0xff
      14:	b.ne	20 <size_of_encoded_value+0x20>  // b.any
      18:	mov	w0, #0x0                   	// #0
      1c:	b	80 <size_of_encoded_value+0x80>
      20:	ldrb	w0, [sp, #31]
      24:	and	w0, w0, #0x7
      28:	cmp	w0, #0x4
      2c:	b.eq	74 <size_of_encoded_value+0x74>  // b.none
      30:	cmp	w0, #0x4
      34:	b.gt	7c <size_of_encoded_value+0x7c>
      38:	cmp	w0, #0x3
      3c:	b.eq	6c <size_of_encoded_value+0x6c>  // b.none
      40:	cmp	w0, #0x3
      44:	b.gt	7c <size_of_encoded_value+0x7c>
      48:	cmp	w0, #0x0
      4c:	b.eq	5c <size_of_encoded_value+0x5c>  // b.none
      50:	cmp	w0, #0x2
      54:	b.eq	64 <size_of_encoded_value+0x64>  // b.none
      58:	b	7c <size_of_encoded_value+0x7c>
      5c:	mov	w0, #0x8                   	// #8
      60:	b	80 <size_of_encoded_value+0x80>
      64:	mov	w0, #0x2                   	// #2
      68:	b	80 <size_of_encoded_value+0x80>
      6c:	mov	w0, #0x4                   	// #4
      70:	b	80 <size_of_encoded_value+0x80>
      74:	mov	w0, #0x8                   	// #8
      78:	b	80 <size_of_encoded_value+0x80>
      7c:	bl	0 <abort>
      80:	ldp	x29, x30, [sp], #32
      84:	ret

0000000000000088 <read_uleb128>:
      88:	sub	sp, sp, #0x30
      8c:	str	x0, [sp, #8]
      90:	str	x1, [sp]
      94:	str	wzr, [sp, #44]
      98:	str	xzr, [sp, #32]
      9c:	ldr	x0, [sp, #8]
      a0:	add	x1, x0, #0x1
      a4:	str	x1, [sp, #8]
      a8:	ldrb	w0, [x0]
      ac:	strb	w0, [sp, #31]
      b0:	ldrb	w0, [sp, #31]
      b4:	and	x1, x0, #0x7f
      b8:	ldr	w0, [sp, #44]
      bc:	lsl	x0, x1, x0
      c0:	ldr	x1, [sp, #32]
      c4:	orr	x0, x1, x0
      c8:	str	x0, [sp, #32]
      cc:	ldr	w0, [sp, #44]
      d0:	add	w0, w0, #0x7
      d4:	str	w0, [sp, #44]
      d8:	ldrsb	w0, [sp, #31]
      dc:	cmp	w0, #0x0
      e0:	b.lt	9c <read_uleb128+0x14>  // b.tstop
      e4:	ldr	x0, [sp]
      e8:	ldr	x1, [sp, #32]
      ec:	str	x1, [x0]
      f0:	ldr	x0, [sp, #8]
      f4:	add	sp, sp, #0x30
      f8:	ret

00000000000000fc <read_sleb128>:
      fc:	sub	sp, sp, #0x30
     100:	str	x0, [sp, #8]
     104:	str	x1, [sp]
     108:	str	wzr, [sp, #44]
     10c:	str	xzr, [sp, #32]
     110:	ldr	x0, [sp, #8]
     114:	add	x1, x0, #0x1
     118:	str	x1, [sp, #8]
     11c:	ldrb	w0, [x0]
     120:	strb	w0, [sp, #31]
     124:	ldrb	w0, [sp, #31]
     128:	and	x1, x0, #0x7f
     12c:	ldr	w0, [sp, #44]
     130:	lsl	x0, x1, x0
     134:	ldr	x1, [sp, #32]
     138:	orr	x0, x1, x0
     13c:	str	x0, [sp, #32]
     140:	ldr	w0, [sp, #44]
     144:	add	w0, w0, #0x7
     148:	str	w0, [sp, #44]
     14c:	ldrsb	w0, [sp, #31]
     150:	cmp	w0, #0x0
     154:	b.lt	110 <read_sleb128+0x14>  // b.tstop
     158:	ldr	w0, [sp, #44]
     15c:	cmp	w0, #0x3f
     160:	b.hi	190 <read_sleb128+0x94>  // b.pmore
     164:	ldrb	w0, [sp, #31]
     168:	and	w0, w0, #0x40
     16c:	cmp	w0, #0x0
     170:	b.eq	190 <read_sleb128+0x94>  // b.none
     174:	ldr	w0, [sp, #44]
     178:	mov	x1, #0x1                   	// #1
     17c:	lsl	x0, x1, x0
     180:	neg	x0, x0
     184:	ldr	x1, [sp, #32]
     188:	orr	x0, x1, x0
     18c:	str	x0, [sp, #32]
     190:	ldr	x1, [sp, #32]
     194:	ldr	x0, [sp]
     198:	str	x1, [x0]
     19c:	ldr	x0, [sp, #8]
     1a0:	add	sp, sp, #0x30
     1a4:	ret

00000000000001a8 <read_encoded_value_with_base>:
     1a8:	stp	x29, x30, [sp, #-96]!
     1ac:	mov	x29, sp
     1b0:	strb	w0, [sp, #47]
     1b4:	str	x1, [sp, #32]
     1b8:	str	x2, [sp, #24]
     1bc:	str	x3, [sp, #16]
     1c0:	ldr	x0, [sp, #24]
     1c4:	str	x0, [sp, #80]
     1c8:	ldrb	w0, [sp, #47]
     1cc:	cmp	w0, #0x50
     1d0:	b.ne	208 <read_encoded_value_with_base+0x60>  // b.any
     1d4:	ldr	x0, [sp, #24]
     1d8:	str	x0, [sp, #72]
     1dc:	ldr	x0, [sp, #72]
     1e0:	add	x0, x0, #0x7
     1e4:	and	x0, x0, #0xfffffffffffffff8
     1e8:	str	x0, [sp, #72]
     1ec:	ldr	x0, [sp, #72]
     1f0:	ldr	x0, [x0]
     1f4:	str	x0, [sp, #88]
     1f8:	ldr	x0, [sp, #72]
     1fc:	add	x0, x0, #0x8
     200:	str	x0, [sp, #24]
     204:	b	3f8 <read_encoded_value_with_base+0x250>
     208:	ldrb	w0, [sp, #47]
     20c:	and	w0, w0, #0xf
     210:	cmp	w0, #0xc
     214:	b.eq	38c <read_encoded_value_with_base+0x1e4>  // b.none
     218:	cmp	w0, #0xc
     21c:	b.gt	3a8 <read_encoded_value_with_base+0x200>
     220:	cmp	w0, #0xb
     224:	b.eq	36c <read_encoded_value_with_base+0x1c4>  // b.none
     228:	cmp	w0, #0xb
     22c:	b.gt	3a8 <read_encoded_value_with_base+0x200>
     230:	cmp	w0, #0xa
     234:	b.eq	34c <read_encoded_value_with_base+0x1a4>  // b.none
     238:	cmp	w0, #0xa
     23c:	b.gt	3a8 <read_encoded_value_with_base+0x200>
     240:	cmp	w0, #0x9
     244:	b.eq	2d0 <read_encoded_value_with_base+0x128>  // b.none
     248:	cmp	w0, #0x9
     24c:	b.gt	3a8 <read_encoded_value_with_base+0x200>
     250:	cmp	w0, #0x4
     254:	b.eq	330 <read_encoded_value_with_base+0x188>  // b.none
     258:	cmp	w0, #0x4
     25c:	b.gt	3a8 <read_encoded_value_with_base+0x200>
     260:	cmp	w0, #0x3
     264:	b.eq	310 <read_encoded_value_with_base+0x168>  // b.none
     268:	cmp	w0, #0x3
     26c:	b.gt	3a8 <read_encoded_value_with_base+0x200>
     270:	cmp	w0, #0x2
     274:	b.eq	2f0 <read_encoded_value_with_base+0x148>  // b.none
     278:	cmp	w0, #0x2
     27c:	b.gt	3a8 <read_encoded_value_with_base+0x200>
     280:	cmp	w0, #0x0
     284:	b.eq	294 <read_encoded_value_with_base+0xec>  // b.none
     288:	cmp	w0, #0x1
     28c:	b.eq	2b0 <read_encoded_value_with_base+0x108>  // b.none
     290:	b	3a8 <read_encoded_value_with_base+0x200>
     294:	ldr	x0, [sp, #80]
     298:	ldr	x0, [x0]
     29c:	str	x0, [sp, #88]
     2a0:	ldr	x0, [sp, #24]
     2a4:	add	x0, x0, #0x8
     2a8:	str	x0, [sp, #24]
     2ac:	b	3ac <read_encoded_value_with_base+0x204>
     2b0:	add	x0, sp, #0x40
     2b4:	mov	x1, x0
     2b8:	ldr	x0, [sp, #24]
     2bc:	bl	88 <read_uleb128>
     2c0:	str	x0, [sp, #24]
     2c4:	ldr	x0, [sp, #64]
     2c8:	str	x0, [sp, #88]
     2cc:	b	3ac <read_encoded_value_with_base+0x204>
     2d0:	add	x0, sp, #0x38
     2d4:	mov	x1, x0
     2d8:	ldr	x0, [sp, #24]
     2dc:	bl	fc <read_sleb128>
     2e0:	str	x0, [sp, #24]
     2e4:	ldr	x0, [sp, #56]
     2e8:	str	x0, [sp, #88]
     2ec:	b	3ac <read_encoded_value_with_base+0x204>
     2f0:	ldr	x0, [sp, #80]
     2f4:	ldrh	w0, [x0]
     2f8:	and	x0, x0, #0xffff
     2fc:	str	x0, [sp, #88]
     300:	ldr	x0, [sp, #24]
     304:	add	x0, x0, #0x2
     308:	str	x0, [sp, #24]
     30c:	b	3ac <read_encoded_value_with_base+0x204>
     310:	ldr	x0, [sp, #80]
     314:	ldr	w0, [x0]
     318:	mov	w0, w0
     31c:	str	x0, [sp, #88]
     320:	ldr	x0, [sp, #24]
     324:	add	x0, x0, #0x4
     328:	str	x0, [sp, #24]
     32c:	b	3ac <read_encoded_value_with_base+0x204>
     330:	ldr	x0, [sp, #80]
     334:	ldr	x0, [x0]
     338:	str	x0, [sp, #88]
     33c:	ldr	x0, [sp, #24]
     340:	add	x0, x0, #0x8
     344:	str	x0, [sp, #24]
     348:	b	3ac <read_encoded_value_with_base+0x204>
     34c:	ldr	x0, [sp, #80]
     350:	ldrsh	w0, [x0]
     354:	sxth	x0, w0
     358:	str	x0, [sp, #88]
     35c:	ldr	x0, [sp, #24]
     360:	add	x0, x0, #0x2
     364:	str	x0, [sp, #24]
     368:	b	3ac <read_encoded_value_with_base+0x204>
     36c:	ldr	x0, [sp, #80]
     370:	ldr	w0, [x0]
     374:	sxtw	x0, w0
     378:	str	x0, [sp, #88]
     37c:	ldr	x0, [sp, #24]
     380:	add	x0, x0, #0x4
     384:	str	x0, [sp, #24]
     388:	b	3ac <read_encoded_value_with_base+0x204>
     38c:	ldr	x0, [sp, #80]
     390:	ldr	x0, [x0]
     394:	str	x0, [sp, #88]
     398:	ldr	x0, [sp, #24]
     39c:	add	x0, x0, #0x8
     3a0:	str	x0, [sp, #24]
     3a4:	b	3ac <read_encoded_value_with_base+0x204>
     3a8:	bl	0 <abort>
     3ac:	ldr	x0, [sp, #88]
     3b0:	cmp	x0, #0x0
     3b4:	b.eq	3f8 <read_encoded_value_with_base+0x250>  // b.none
     3b8:	ldrb	w0, [sp, #47]
     3bc:	and	w0, w0, #0x70
     3c0:	cmp	w0, #0x10
     3c4:	b.ne	3d0 <read_encoded_value_with_base+0x228>  // b.any
     3c8:	ldr	x0, [sp, #80]
     3cc:	b	3d4 <read_encoded_value_with_base+0x22c>
     3d0:	ldr	x0, [sp, #32]
     3d4:	ldr	x1, [sp, #88]
     3d8:	add	x0, x1, x0
     3dc:	str	x0, [sp, #88]
     3e0:	ldrsb	w0, [sp, #47]
     3e4:	cmp	w0, #0x0
     3e8:	b.ge	3f8 <read_encoded_value_with_base+0x250>  // b.tcont
     3ec:	ldr	x0, [sp, #88]
     3f0:	ldr	x0, [x0]
     3f4:	str	x0, [sp, #88]
     3f8:	ldr	x0, [sp, #16]
     3fc:	ldr	x1, [sp, #88]
     400:	str	x1, [x0]
     404:	ldr	x0, [sp, #24]
     408:	ldp	x29, x30, [sp], #96
     40c:	ret

0000000000000410 <get_cie>:
     410:	sub	sp, sp, #0x10
     414:	str	x0, [sp, #8]
     418:	ldr	x0, [sp, #8]
     41c:	add	x1, x0, #0x4
     420:	ldr	x0, [sp, #8]
     424:	ldr	w0, [x0, #4]
     428:	sxtw	x0, w0
     42c:	neg	x0, x0
     430:	add	x0, x1, x0
     434:	add	sp, sp, #0x10
     438:	ret

000000000000043c <next_fde>:
     43c:	sub	sp, sp, #0x10
     440:	str	x0, [sp, #8]
     444:	ldr	x0, [sp, #8]
     448:	ldr	w0, [x0]
     44c:	mov	w0, w0
     450:	add	x0, x0, #0x4
     454:	ldr	x1, [sp, #8]
     458:	add	x0, x1, x0
     45c:	add	sp, sp, #0x10
     460:	ret

0000000000000464 <last_fde>:
     464:	sub	sp, sp, #0x10
     468:	str	x0, [sp, #8]
     46c:	str	x1, [sp]
     470:	ldr	x0, [sp]
     474:	ldr	w0, [x0]
     478:	cmp	w0, #0x0
     47c:	cset	w0, eq  // eq = none
     480:	and	w0, w0, #0xff
     484:	add	sp, sp, #0x10
     488:	ret

000000000000048c <__gthread_active_p>:
     48c:	adrp	x0, 0 <size_of_encoded_value>
     490:	add	x0, x0, #0x0
     494:	ldr	x0, [x0]
     498:	cmp	x0, #0x0
     49c:	cset	w0, ne  // ne = any
     4a0:	and	w0, w0, #0xff
     4a4:	ret

00000000000004a8 <__gthread_mutex_lock>:
     4a8:	stp	x29, x30, [sp, #-32]!
     4ac:	mov	x29, sp
     4b0:	str	x0, [sp, #24]
     4b4:	bl	48c <__gthread_active_p>
     4b8:	cmp	w0, #0x0
     4bc:	b.eq	4cc <__gthread_mutex_lock+0x24>  // b.none
     4c0:	ldr	x0, [sp, #24]
     4c4:	bl	0 <pthread_mutex_lock>
     4c8:	b	4d0 <__gthread_mutex_lock+0x28>
     4cc:	mov	w0, #0x0                   	// #0
     4d0:	ldp	x29, x30, [sp], #32
     4d4:	ret

00000000000004d8 <__gthread_mutex_unlock>:
     4d8:	stp	x29, x30, [sp, #-32]!
     4dc:	mov	x29, sp
     4e0:	str	x0, [sp, #24]
     4e4:	bl	48c <__gthread_active_p>
     4e8:	cmp	w0, #0x0
     4ec:	b.eq	4fc <__gthread_mutex_unlock+0x24>  // b.none
     4f0:	ldr	x0, [sp, #24]
     4f4:	bl	0 <pthread_mutex_unlock>
     4f8:	b	500 <__gthread_mutex_unlock+0x28>
     4fc:	mov	w0, #0x0                   	// #0
     500:	ldp	x29, x30, [sp], #32
     504:	ret

0000000000000508 <__register_frame_info_bases>:
     508:	stp	x29, x30, [sp, #-48]!
     50c:	mov	x29, sp
     510:	str	x0, [sp, #40]
     514:	str	x1, [sp, #32]
     518:	str	x2, [sp, #24]
     51c:	str	x3, [sp, #16]
     520:	ldr	x0, [sp, #40]
     524:	cmp	x0, #0x0
     528:	b.eq	5e8 <__register_frame_info_bases+0xe0>  // b.none
     52c:	ldr	x0, [sp, #40]
     530:	ldr	w0, [x0]
     534:	cmp	w0, #0x0
     538:	b.eq	5e8 <__register_frame_info_bases+0xe0>  // b.none
     53c:	ldr	x0, [sp, #32]
     540:	mov	x1, #0xffffffffffffffff    	// #-1
     544:	str	x1, [x0]
     548:	ldr	x0, [sp, #32]
     54c:	ldr	x1, [sp, #24]
     550:	str	x1, [x0, #8]
     554:	ldr	x0, [sp, #32]
     558:	ldr	x1, [sp, #16]
     55c:	str	x1, [x0, #16]
     560:	ldr	x0, [sp, #32]
     564:	ldr	x1, [sp, #40]
     568:	str	x1, [x0, #24]
     56c:	ldr	x0, [sp, #32]
     570:	str	xzr, [x0, #32]
     574:	ldr	x0, [sp, #32]
     578:	ldrh	w1, [x0, #32]
     57c:	orr	w1, w1, #0x7f8
     580:	strh	w1, [x0, #32]
     584:	adrp	x0, 0 <size_of_encoded_value>
     588:	add	x0, x0, #0x0
     58c:	bl	4a8 <__gthread_mutex_lock>
     590:	adrp	x0, 0 <size_of_encoded_value>
     594:	add	x0, x0, #0x0
     598:	ldr	x1, [x0]
     59c:	ldr	x0, [sp, #32]
     5a0:	str	x1, [x0, #40]
     5a4:	adrp	x0, 0 <size_of_encoded_value>
     5a8:	add	x0, x0, #0x0
     5ac:	ldr	x1, [sp, #32]
     5b0:	str	x1, [x0]
     5b4:	adrp	x0, 0 <size_of_encoded_value>
     5b8:	add	x0, x0, #0x0
     5bc:	ldr	w0, [x0]
     5c0:	cmp	w0, #0x0
     5c4:	b.ne	5d8 <__register_frame_info_bases+0xd0>  // b.any
     5c8:	adrp	x0, 0 <size_of_encoded_value>
     5cc:	add	x0, x0, #0x0
     5d0:	mov	w1, #0x1                   	// #1
     5d4:	str	w1, [x0]
     5d8:	adrp	x0, 0 <size_of_encoded_value>
     5dc:	add	x0, x0, #0x0
     5e0:	bl	4d8 <__gthread_mutex_unlock>
     5e4:	b	5ec <__register_frame_info_bases+0xe4>
     5e8:	nop
     5ec:	ldp	x29, x30, [sp], #48
     5f0:	ret

00000000000005f4 <__register_frame_info>:
     5f4:	stp	x29, x30, [sp, #-32]!
     5f8:	mov	x29, sp
     5fc:	str	x0, [sp, #24]
     600:	str	x1, [sp, #16]
     604:	mov	x3, #0x0                   	// #0
     608:	mov	x2, #0x0                   	// #0
     60c:	ldr	x1, [sp, #16]
     610:	ldr	x0, [sp, #24]
     614:	bl	508 <__register_frame_info_bases>
     618:	nop
     61c:	ldp	x29, x30, [sp], #32
     620:	ret

0000000000000624 <__register_frame>:
     624:	stp	x29, x30, [sp, #-48]!
     628:	mov	x29, sp
     62c:	str	x0, [sp, #24]
     630:	ldr	x0, [sp, #24]
     634:	ldr	w0, [x0]
     638:	cmp	w0, #0x0
     63c:	b.eq	65c <__register_frame+0x38>  // b.none
     640:	mov	x0, #0x30                  	// #48
     644:	bl	0 <malloc>
     648:	str	x0, [sp, #40]
     64c:	ldr	x1, [sp, #40]
     650:	ldr	x0, [sp, #24]
     654:	bl	5f4 <__register_frame_info>
     658:	b	660 <__register_frame+0x3c>
     65c:	nop
     660:	ldp	x29, x30, [sp], #48
     664:	ret

0000000000000668 <__register_frame_info_table_bases>:
     668:	stp	x29, x30, [sp, #-48]!
     66c:	mov	x29, sp
     670:	str	x0, [sp, #40]
     674:	str	x1, [sp, #32]
     678:	str	x2, [sp, #24]
     67c:	str	x3, [sp, #16]
     680:	ldr	x0, [sp, #32]
     684:	mov	x1, #0xffffffffffffffff    	// #-1
     688:	str	x1, [x0]
     68c:	ldr	x0, [sp, #32]
     690:	ldr	x1, [sp, #24]
     694:	str	x1, [x0, #8]
     698:	ldr	x0, [sp, #32]
     69c:	ldr	x1, [sp, #16]
     6a0:	str	x1, [x0, #16]
     6a4:	ldr	x0, [sp, #32]
     6a8:	ldr	x1, [sp, #40]
     6ac:	str	x1, [x0, #24]
     6b0:	ldr	x0, [sp, #32]
     6b4:	str	xzr, [x0, #32]
     6b8:	ldr	x0, [sp, #32]
     6bc:	ldrb	w1, [x0, #32]
     6c0:	orr	w1, w1, #0x2
     6c4:	strb	w1, [x0, #32]
     6c8:	ldr	x0, [sp, #32]
     6cc:	ldrh	w1, [x0, #32]
     6d0:	orr	w1, w1, #0x7f8
     6d4:	strh	w1, [x0, #32]
     6d8:	adrp	x0, 0 <size_of_encoded_value>
     6dc:	add	x0, x0, #0x0
     6e0:	bl	4a8 <__gthread_mutex_lock>
     6e4:	adrp	x0, 0 <size_of_encoded_value>
     6e8:	add	x0, x0, #0x0
     6ec:	ldr	x1, [x0]
     6f0:	ldr	x0, [sp, #32]
     6f4:	str	x1, [x0, #40]
     6f8:	adrp	x0, 0 <size_of_encoded_value>
     6fc:	add	x0, x0, #0x0
     700:	ldr	x1, [sp, #32]
     704:	str	x1, [x0]
     708:	adrp	x0, 0 <size_of_encoded_value>
     70c:	add	x0, x0, #0x0
     710:	ldr	w0, [x0]
     714:	cmp	w0, #0x0
     718:	b.ne	72c <__register_frame_info_table_bases+0xc4>  // b.any
     71c:	adrp	x0, 0 <size_of_encoded_value>
     720:	add	x0, x0, #0x0
     724:	mov	w1, #0x1                   	// #1
     728:	str	w1, [x0]
     72c:	adrp	x0, 0 <size_of_encoded_value>
     730:	add	x0, x0, #0x0
     734:	bl	4d8 <__gthread_mutex_unlock>
     738:	nop
     73c:	ldp	x29, x30, [sp], #48
     740:	ret

0000000000000744 <__register_frame_info_table>:
     744:	stp	x29, x30, [sp, #-32]!
     748:	mov	x29, sp
     74c:	str	x0, [sp, #24]
     750:	str	x1, [sp, #16]
     754:	mov	x3, #0x0                   	// #0
     758:	mov	x2, #0x0                   	// #0
     75c:	ldr	x1, [sp, #16]
     760:	ldr	x0, [sp, #24]
     764:	bl	668 <__register_frame_info_table_bases>
     768:	nop
     76c:	ldp	x29, x30, [sp], #32
     770:	ret

0000000000000774 <__register_frame_table>:
     774:	stp	x29, x30, [sp, #-48]!
     778:	mov	x29, sp
     77c:	str	x0, [sp, #24]
     780:	mov	x0, #0x30                  	// #48
     784:	bl	0 <malloc>
     788:	str	x0, [sp, #40]
     78c:	ldr	x1, [sp, #40]
     790:	ldr	x0, [sp, #24]
     794:	bl	744 <__register_frame_info_table>
     798:	nop
     79c:	ldp	x29, x30, [sp], #48
     7a0:	ret

00000000000007a4 <__deregister_frame_info_bases>:
     7a4:	stp	x29, x30, [sp, #-48]!
     7a8:	mov	x29, sp
     7ac:	str	x0, [sp, #24]
     7b0:	str	xzr, [sp, #32]
     7b4:	ldr	x0, [sp, #24]
     7b8:	cmp	x0, #0x0
     7bc:	b.eq	7d0 <__deregister_frame_info_bases+0x2c>  // b.none
     7c0:	ldr	x0, [sp, #24]
     7c4:	ldr	w0, [x0]
     7c8:	cmp	w0, #0x0
     7cc:	b.ne	7d8 <__deregister_frame_info_bases+0x34>  // b.any
     7d0:	ldr	x0, [sp, #32]
     7d4:	b	93c <__deregister_frame_info_bases+0x198>
     7d8:	adrp	x0, 0 <size_of_encoded_value>
     7dc:	add	x0, x0, #0x0
     7e0:	bl	4a8 <__gthread_mutex_lock>
     7e4:	adrp	x0, 0 <size_of_encoded_value>
     7e8:	add	x0, x0, #0x0
     7ec:	str	x0, [sp, #40]
     7f0:	b	83c <__deregister_frame_info_bases+0x98>
     7f4:	ldr	x0, [sp, #40]
     7f8:	ldr	x0, [x0]
     7fc:	ldr	x0, [x0, #24]
     800:	ldr	x1, [sp, #24]
     804:	cmp	x1, x0
     808:	b.ne	82c <__deregister_frame_info_bases+0x88>  // b.any
     80c:	ldr	x0, [sp, #40]
     810:	ldr	x0, [x0]
     814:	str	x0, [sp, #32]
     818:	ldr	x0, [sp, #32]
     81c:	ldr	x1, [x0, #40]
     820:	ldr	x0, [sp, #40]
     824:	str	x1, [x0]
     828:	b	91c <__deregister_frame_info_bases+0x178>
     82c:	ldr	x0, [sp, #40]
     830:	ldr	x0, [x0]
     834:	add	x0, x0, #0x28
     838:	str	x0, [sp, #40]
     83c:	ldr	x0, [sp, #40]
     840:	ldr	x0, [x0]
     844:	cmp	x0, #0x0
     848:	b.ne	7f4 <__deregister_frame_info_bases+0x50>  // b.any
     84c:	adrp	x0, 0 <size_of_encoded_value>
     850:	add	x0, x0, #0x0
     854:	str	x0, [sp, #40]
     858:	b	908 <__deregister_frame_info_bases+0x164>
     85c:	ldr	x0, [sp, #40]
     860:	ldr	x0, [x0]
     864:	ldrb	w0, [x0, #32]
     868:	and	w0, w0, #0x1
     86c:	and	w0, w0, #0xff
     870:	cmp	w0, #0x0
     874:	b.eq	8c0 <__deregister_frame_info_bases+0x11c>  // b.none
     878:	ldr	x0, [sp, #40]
     87c:	ldr	x0, [x0]
     880:	ldr	x0, [x0, #24]
     884:	ldr	x0, [x0]
     888:	ldr	x1, [sp, #24]
     88c:	cmp	x1, x0
     890:	b.ne	8f8 <__deregister_frame_info_bases+0x154>  // b.any
     894:	ldr	x0, [sp, #40]
     898:	ldr	x0, [x0]
     89c:	str	x0, [sp, #32]
     8a0:	ldr	x0, [sp, #32]
     8a4:	ldr	x1, [x0, #40]
     8a8:	ldr	x0, [sp, #40]
     8ac:	str	x1, [x0]
     8b0:	ldr	x0, [sp, #32]
     8b4:	ldr	x0, [x0, #24]
     8b8:	bl	0 <free>
     8bc:	b	91c <__deregister_frame_info_bases+0x178>
     8c0:	ldr	x0, [sp, #40]
     8c4:	ldr	x0, [x0]
     8c8:	ldr	x0, [x0, #24]
     8cc:	ldr	x1, [sp, #24]
     8d0:	cmp	x1, x0
     8d4:	b.ne	8f8 <__deregister_frame_info_bases+0x154>  // b.any
     8d8:	ldr	x0, [sp, #40]
     8dc:	ldr	x0, [x0]
     8e0:	str	x0, [sp, #32]
     8e4:	ldr	x0, [sp, #32]
     8e8:	ldr	x1, [x0, #40]
     8ec:	ldr	x0, [sp, #40]
     8f0:	str	x1, [x0]
     8f4:	b	91c <__deregister_frame_info_bases+0x178>
     8f8:	ldr	x0, [sp, #40]
     8fc:	ldr	x0, [x0]
     900:	add	x0, x0, #0x28
     904:	str	x0, [sp, #40]
     908:	ldr	x0, [sp, #40]
     90c:	ldr	x0, [x0]
     910:	cmp	x0, #0x0
     914:	b.ne	85c <__deregister_frame_info_bases+0xb8>  // b.any
     918:	nop
     91c:	adrp	x0, 0 <size_of_encoded_value>
     920:	add	x0, x0, #0x0
     924:	bl	4d8 <__gthread_mutex_unlock>
     928:	ldr	x0, [sp, #32]
     92c:	cmp	x0, #0x0
     930:	b.ne	938 <__deregister_frame_info_bases+0x194>  // b.any
     934:	bl	0 <abort>
     938:	ldr	x0, [sp, #32]
     93c:	ldp	x29, x30, [sp], #48
     940:	ret

0000000000000944 <__deregister_frame_info>:
     944:	stp	x29, x30, [sp, #-32]!
     948:	mov	x29, sp
     94c:	str	x0, [sp, #24]
     950:	ldr	x0, [sp, #24]
     954:	bl	7a4 <__deregister_frame_info_bases>
     958:	ldp	x29, x30, [sp], #32
     95c:	ret

0000000000000960 <__deregister_frame>:
     960:	stp	x29, x30, [sp, #-32]!
     964:	mov	x29, sp
     968:	str	x0, [sp, #24]
     96c:	ldr	x0, [sp, #24]
     970:	ldr	w0, [x0]
     974:	cmp	w0, #0x0
     978:	b.eq	988 <__deregister_frame+0x28>  // b.none
     97c:	ldr	x0, [sp, #24]
     980:	bl	944 <__deregister_frame_info>
     984:	bl	0 <free>
     988:	nop
     98c:	ldp	x29, x30, [sp], #32
     990:	ret

0000000000000994 <base_from_object>:
     994:	stp	x29, x30, [sp, #-32]!
     998:	mov	x29, sp
     99c:	strb	w0, [sp, #31]
     9a0:	str	x1, [sp, #16]
     9a4:	ldrb	w0, [sp, #31]
     9a8:	cmp	w0, #0xff
     9ac:	b.ne	9b8 <base_from_object+0x24>  // b.any
     9b0:	mov	x0, #0x0                   	// #0
     9b4:	b	a24 <base_from_object+0x90>
     9b8:	ldrb	w0, [sp, #31]
     9bc:	and	w0, w0, #0x70
     9c0:	cmp	w0, #0x50
     9c4:	b.eq	a00 <base_from_object+0x6c>  // b.none
     9c8:	cmp	w0, #0x50
     9cc:	b.gt	a20 <base_from_object+0x8c>
     9d0:	cmp	w0, #0x30
     9d4:	b.eq	a14 <base_from_object+0x80>  // b.none
     9d8:	cmp	w0, #0x30
     9dc:	b.gt	a20 <base_from_object+0x8c>
     9e0:	cmp	w0, #0x20
     9e4:	b.eq	a08 <base_from_object+0x74>  // b.none
     9e8:	cmp	w0, #0x20
     9ec:	b.gt	a20 <base_from_object+0x8c>
     9f0:	cmp	w0, #0x0
     9f4:	b.eq	a00 <base_from_object+0x6c>  // b.none
     9f8:	cmp	w0, #0x10
     9fc:	b.ne	a20 <base_from_object+0x8c>  // b.any
     a00:	mov	x0, #0x0                   	// #0
     a04:	b	a24 <base_from_object+0x90>
     a08:	ldr	x0, [sp, #16]
     a0c:	ldr	x0, [x0, #8]
     a10:	b	a24 <base_from_object+0x90>
     a14:	ldr	x0, [sp, #16]
     a18:	ldr	x0, [x0, #16]
     a1c:	b	a24 <base_from_object+0x90>
     a20:	bl	0 <abort>
     a24:	ldp	x29, x30, [sp], #32
     a28:	ret

0000000000000a2c <get_cie_encoding>:
     a2c:	stp	x29, x30, [sp, #-80]!
     a30:	mov	x29, sp
     a34:	str	x0, [sp, #24]
     a38:	ldr	x0, [sp, #24]
     a3c:	add	x0, x0, #0x9
     a40:	str	x0, [sp, #72]
     a44:	ldr	x0, [sp, #72]
     a48:	bl	0 <strlen>
     a4c:	add	x0, x0, #0x1
     a50:	ldr	x1, [sp, #72]
     a54:	add	x0, x1, x0
     a58:	str	x0, [sp, #64]
     a5c:	ldr	x0, [sp, #24]
     a60:	ldrb	w0, [x0, #8]
     a64:	cmp	w0, #0x3
     a68:	cset	w0, hi  // hi = pmore
     a6c:	and	w0, w0, #0xff
     a70:	and	x0, x0, #0xff
     a74:	cmp	x0, #0x0
     a78:	b.eq	ab4 <get_cie_encoding+0x88>  // b.none
     a7c:	ldr	x0, [sp, #64]
     a80:	ldrb	w0, [x0]
     a84:	cmp	w0, #0x8
     a88:	b.ne	aa0 <get_cie_encoding+0x74>  // b.any
     a8c:	ldr	x0, [sp, #64]
     a90:	add	x0, x0, #0x1
     a94:	ldrb	w0, [x0]
     a98:	cmp	w0, #0x0
     a9c:	b.eq	aa8 <get_cie_encoding+0x7c>  // b.none
     aa0:	mov	w0, #0xff                  	// #255
     aa4:	b	be4 <get_cie_encoding+0x1b8>
     aa8:	ldr	x0, [sp, #64]
     aac:	add	x0, x0, #0x2
     ab0:	str	x0, [sp, #64]
     ab4:	ldr	x0, [sp, #72]
     ab8:	ldrb	w0, [x0]
     abc:	cmp	w0, #0x7a
     ac0:	b.eq	acc <get_cie_encoding+0xa0>  // b.none
     ac4:	mov	w0, #0x0                   	// #0
     ac8:	b	be4 <get_cie_encoding+0x1b8>
     acc:	add	x0, sp, #0x30
     ad0:	mov	x1, x0
     ad4:	ldr	x0, [sp, #64]
     ad8:	bl	88 <read_uleb128>
     adc:	str	x0, [sp, #64]
     ae0:	add	x0, sp, #0x28
     ae4:	mov	x1, x0
     ae8:	ldr	x0, [sp, #64]
     aec:	bl	fc <read_sleb128>
     af0:	str	x0, [sp, #64]
     af4:	ldr	x0, [sp, #24]
     af8:	ldrb	w0, [x0, #8]
     afc:	cmp	w0, #0x1
     b00:	b.ne	b14 <get_cie_encoding+0xe8>  // b.any
     b04:	ldr	x0, [sp, #64]
     b08:	add	x0, x0, #0x1
     b0c:	str	x0, [sp, #64]
     b10:	b	b28 <get_cie_encoding+0xfc>
     b14:	add	x0, sp, #0x30
     b18:	mov	x1, x0
     b1c:	ldr	x0, [sp, #64]
     b20:	bl	88 <read_uleb128>
     b24:	str	x0, [sp, #64]
     b28:	ldr	x0, [sp, #72]
     b2c:	add	x0, x0, #0x1
     b30:	str	x0, [sp, #72]
     b34:	add	x0, sp, #0x30
     b38:	mov	x1, x0
     b3c:	ldr	x0, [sp, #64]
     b40:	bl	88 <read_uleb128>
     b44:	str	x0, [sp, #64]
     b48:	ldr	x0, [sp, #72]
     b4c:	ldrb	w0, [x0]
     b50:	cmp	w0, #0x52
     b54:	b.ne	b64 <get_cie_encoding+0x138>  // b.any
     b58:	ldr	x0, [sp, #64]
     b5c:	ldrb	w0, [x0]
     b60:	b	be4 <get_cie_encoding+0x1b8>
     b64:	ldr	x0, [sp, #72]
     b68:	ldrb	w0, [x0]
     b6c:	cmp	w0, #0x50
     b70:	b.ne	bac <get_cie_encoding+0x180>  // b.any
     b74:	ldr	x0, [sp, #64]
     b78:	ldrb	w0, [x0]
     b7c:	and	w0, w0, #0x7f
     b80:	and	w4, w0, #0xff
     b84:	ldr	x0, [sp, #64]
     b88:	add	x0, x0, #0x1
     b8c:	add	x1, sp, #0x38
     b90:	mov	x3, x1
     b94:	mov	x2, x0
     b98:	mov	x1, #0x0                   	// #0
     b9c:	mov	w0, w4
     ba0:	bl	1a8 <read_encoded_value_with_base>
     ba4:	str	x0, [sp, #64]
     ba8:	b	bd4 <get_cie_encoding+0x1a8>
     bac:	ldr	x0, [sp, #72]
     bb0:	ldrb	w0, [x0]
     bb4:	cmp	w0, #0x4c
     bb8:	b.ne	bcc <get_cie_encoding+0x1a0>  // b.any
     bbc:	ldr	x0, [sp, #64]
     bc0:	add	x0, x0, #0x1
     bc4:	str	x0, [sp, #64]
     bc8:	b	bd4 <get_cie_encoding+0x1a8>
     bcc:	mov	w0, #0x0                   	// #0
     bd0:	b	be4 <get_cie_encoding+0x1b8>
     bd4:	ldr	x0, [sp, #72]
     bd8:	add	x0, x0, #0x1
     bdc:	str	x0, [sp, #72]
     be0:	b	b48 <get_cie_encoding+0x11c>
     be4:	ldp	x29, x30, [sp], #80
     be8:	ret

0000000000000bec <get_fde_encoding>:
     bec:	stp	x29, x30, [sp, #-32]!
     bf0:	mov	x29, sp
     bf4:	str	x0, [sp, #24]
     bf8:	ldr	x0, [sp, #24]
     bfc:	bl	410 <get_cie>
     c00:	bl	a2c <get_cie_encoding>
     c04:	ldp	x29, x30, [sp], #32
     c08:	ret

0000000000000c0c <fde_unencoded_compare>:
     c0c:	sub	sp, sp, #0x30
     c10:	str	x0, [sp, #24]
     c14:	str	x1, [sp, #16]
     c18:	str	x2, [sp, #8]
     c1c:	ldr	x0, [sp, #16]
     c20:	add	x0, x0, #0x8
     c24:	ldr	x0, [x0]
     c28:	str	x0, [sp, #40]
     c2c:	ldr	x0, [sp, #8]
     c30:	add	x0, x0, #0x8
     c34:	ldr	x0, [x0]
     c38:	str	x0, [sp, #32]
     c3c:	ldr	x1, [sp, #40]
     c40:	ldr	x0, [sp, #32]
     c44:	cmp	x1, x0
     c48:	b.ls	c54 <fde_unencoded_compare+0x48>  // b.plast
     c4c:	mov	w0, #0x1                   	// #1
     c50:	b	c70 <fde_unencoded_compare+0x64>
     c54:	ldr	x1, [sp, #40]
     c58:	ldr	x0, [sp, #32]
     c5c:	cmp	x1, x0
     c60:	b.cs	c6c <fde_unencoded_compare+0x60>  // b.hs, b.nlast
     c64:	mov	w0, #0xffffffff            	// #-1
     c68:	b	c70 <fde_unencoded_compare+0x64>
     c6c:	mov	w0, #0x0                   	// #0
     c70:	add	sp, sp, #0x30
     c74:	ret

0000000000000c78 <fde_single_encoding_compare>:
     c78:	stp	x29, x30, [sp, #-80]!
     c7c:	mov	x29, sp
     c80:	str	x0, [sp, #40]
     c84:	str	x1, [sp, #32]
     c88:	str	x2, [sp, #24]
     c8c:	ldr	x0, [sp, #40]
     c90:	ldrh	w0, [x0, #32]
     c94:	ubfx	x0, x0, #3, #8
     c98:	and	w0, w0, #0xff
     c9c:	ldr	x1, [sp, #40]
     ca0:	bl	994 <base_from_object>
     ca4:	str	x0, [sp, #72]
     ca8:	ldr	x0, [sp, #40]
     cac:	ldrh	w0, [x0, #32]
     cb0:	ubfx	x0, x0, #3, #8
     cb4:	and	w4, w0, #0xff
     cb8:	ldr	x0, [sp, #32]
     cbc:	add	x0, x0, #0x8
     cc0:	add	x1, sp, #0x40
     cc4:	mov	x3, x1
     cc8:	mov	x2, x0
     ccc:	ldr	x1, [sp, #72]
     cd0:	mov	w0, w4
     cd4:	bl	1a8 <read_encoded_value_with_base>
     cd8:	ldr	x0, [sp, #40]
     cdc:	ldrh	w0, [x0, #32]
     ce0:	ubfx	x0, x0, #3, #8
     ce4:	and	w4, w0, #0xff
     ce8:	ldr	x0, [sp, #24]
     cec:	add	x0, x0, #0x8
     cf0:	add	x1, sp, #0x38
     cf4:	mov	x3, x1
     cf8:	mov	x2, x0
     cfc:	ldr	x1, [sp, #72]
     d00:	mov	w0, w4
     d04:	bl	1a8 <read_encoded_value_with_base>
     d08:	ldr	x1, [sp, #64]
     d0c:	ldr	x0, [sp, #56]
     d10:	cmp	x1, x0
     d14:	b.ls	d20 <fde_single_encoding_compare+0xa8>  // b.plast
     d18:	mov	w0, #0x1                   	// #1
     d1c:	b	d3c <fde_single_encoding_compare+0xc4>
     d20:	ldr	x1, [sp, #64]
     d24:	ldr	x0, [sp, #56]
     d28:	cmp	x1, x0
     d2c:	b.cs	d38 <fde_single_encoding_compare+0xc0>  // b.hs, b.nlast
     d30:	mov	w0, #0xffffffff            	// #-1
     d34:	b	d3c <fde_single_encoding_compare+0xc4>
     d38:	mov	w0, #0x0                   	// #0
     d3c:	ldp	x29, x30, [sp], #80
     d40:	ret

0000000000000d44 <fde_mixed_encoding_compare>:
     d44:	stp	x29, x30, [sp, #-96]!
     d48:	mov	x29, sp
     d4c:	str	x19, [sp, #16]
     d50:	str	x0, [sp, #56]
     d54:	str	x1, [sp, #48]
     d58:	str	x2, [sp, #40]
     d5c:	ldr	x0, [sp, #48]
     d60:	bl	bec <get_fde_encoding>
     d64:	str	w0, [sp, #92]
     d68:	ldr	w0, [sp, #92]
     d6c:	and	w19, w0, #0xff
     d70:	ldr	w0, [sp, #92]
     d74:	and	w0, w0, #0xff
     d78:	ldr	x1, [sp, #56]
     d7c:	bl	994 <base_from_object>
     d80:	mov	x4, x0
     d84:	ldr	x0, [sp, #48]
     d88:	add	x0, x0, #0x8
     d8c:	add	x1, sp, #0x50
     d90:	mov	x3, x1
     d94:	mov	x2, x0
     d98:	mov	x1, x4
     d9c:	mov	w0, w19
     da0:	bl	1a8 <read_encoded_value_with_base>
     da4:	ldr	x0, [sp, #40]
     da8:	bl	bec <get_fde_encoding>
     dac:	str	w0, [sp, #88]
     db0:	ldr	w0, [sp, #88]
     db4:	and	w19, w0, #0xff
     db8:	ldr	w0, [sp, #88]
     dbc:	and	w0, w0, #0xff
     dc0:	ldr	x1, [sp, #56]
     dc4:	bl	994 <base_from_object>
     dc8:	mov	x4, x0
     dcc:	ldr	x0, [sp, #40]
     dd0:	add	x0, x0, #0x8
     dd4:	add	x1, sp, #0x48
     dd8:	mov	x3, x1
     ddc:	mov	x2, x0
     de0:	mov	x1, x4
     de4:	mov	w0, w19
     de8:	bl	1a8 <read_encoded_value_with_base>
     dec:	ldr	x1, [sp, #80]
     df0:	ldr	x0, [sp, #72]
     df4:	cmp	x1, x0
     df8:	b.ls	e04 <fde_mixed_encoding_compare+0xc0>  // b.plast
     dfc:	mov	w0, #0x1                   	// #1
     e00:	b	e20 <fde_mixed_encoding_compare+0xdc>
     e04:	ldr	x1, [sp, #80]
     e08:	ldr	x0, [sp, #72]
     e0c:	cmp	x1, x0
     e10:	b.cs	e1c <fde_mixed_encoding_compare+0xd8>  // b.hs, b.nlast
     e14:	mov	w0, #0xffffffff            	// #-1
     e18:	b	e20 <fde_mixed_encoding_compare+0xdc>
     e1c:	mov	w0, #0x0                   	// #0
     e20:	ldr	x19, [sp, #16]
     e24:	ldp	x29, x30, [sp], #96
     e28:	ret

0000000000000e2c <start_fde_sort>:
     e2c:	stp	x29, x30, [sp, #-48]!
     e30:	mov	x29, sp
     e34:	str	x0, [sp, #24]
     e38:	str	x1, [sp, #16]
     e3c:	ldr	x0, [sp, #16]
     e40:	cmp	x0, #0x0
     e44:	b.ne	e50 <start_fde_sort+0x24>  // b.any
     e48:	mov	w0, #0x0                   	// #0
     e4c:	b	ecc <start_fde_sort+0xa0>
     e50:	ldr	x0, [sp, #16]
     e54:	add	x0, x0, #0x2
     e58:	lsl	x0, x0, #3
     e5c:	str	x0, [sp, #40]
     e60:	ldr	x0, [sp, #40]
     e64:	bl	0 <malloc>
     e68:	mov	x1, x0
     e6c:	ldr	x0, [sp, #24]
     e70:	str	x1, [x0]
     e74:	ldr	x0, [sp, #24]
     e78:	ldr	x0, [x0]
     e7c:	cmp	x0, #0x0
     e80:	b.eq	ec8 <start_fde_sort+0x9c>  // b.none
     e84:	ldr	x0, [sp, #24]
     e88:	ldr	x0, [x0]
     e8c:	str	xzr, [x0, #8]
     e90:	ldr	x0, [sp, #40]
     e94:	bl	0 <malloc>
     e98:	mov	x1, x0
     e9c:	ldr	x0, [sp, #24]
     ea0:	str	x1, [x0, #8]
     ea4:	ldr	x0, [sp, #24]
     ea8:	ldr	x0, [x0, #8]
     eac:	cmp	x0, #0x0
     eb0:	b.eq	ec0 <start_fde_sort+0x94>  // b.none
     eb4:	ldr	x0, [sp, #24]
     eb8:	ldr	x0, [x0, #8]
     ebc:	str	xzr, [x0, #8]
     ec0:	mov	w0, #0x1                   	// #1
     ec4:	b	ecc <start_fde_sort+0xa0>
     ec8:	mov	w0, #0x0                   	// #0
     ecc:	ldp	x29, x30, [sp], #48
     ed0:	ret

0000000000000ed4 <fde_insert>:
     ed4:	sub	sp, sp, #0x10
     ed8:	str	x0, [sp, #8]
     edc:	str	x1, [sp]
     ee0:	ldr	x0, [sp, #8]
     ee4:	ldr	x0, [x0]
     ee8:	cmp	x0, #0x0
     eec:	b.eq	f18 <fde_insert+0x44>  // b.none
     ef0:	ldr	x0, [sp, #8]
     ef4:	ldr	x2, [x0]
     ef8:	ldr	x0, [sp, #8]
     efc:	ldr	x1, [x0]
     f00:	ldr	x0, [x1, #8]
     f04:	add	x3, x0, #0x1
     f08:	str	x3, [x1, #8]
     f0c:	add	x0, x0, #0x2
     f10:	ldr	x1, [sp]
     f14:	str	x1, [x2, x0, lsl #3]
     f18:	nop
     f1c:	add	sp, sp, #0x10
     f20:	ret

0000000000000f24 <fde_split>:
     f24:	stp	x29, x30, [sp, #-96]!
     f28:	mov	x29, sp
     f2c:	str	x0, [sp, #40]
     f30:	str	x1, [sp, #32]
     f34:	str	x2, [sp, #24]
     f38:	str	x3, [sp, #16]
     f3c:	ldr	x0, [sp, #24]
     f40:	ldr	x0, [x0, #8]
     f44:	str	x0, [sp, #48]
     f48:	adrp	x0, 0 <size_of_encoded_value>
     f4c:	add	x0, x0, #0x0
     f50:	str	x0, [sp, #88]
     f54:	str	xzr, [sp, #80]
     f58:	b	1038 <fde_split+0x114>
     f5c:	ldr	x0, [sp, #88]
     f60:	str	x0, [sp, #56]
     f64:	b	fbc <fde_split+0x98>
     f68:	ldr	x0, [sp, #24]
     f6c:	add	x0, x0, #0x10
     f70:	ldr	x1, [sp, #56]
     f74:	sub	x0, x1, x0
     f78:	asr	x0, x0, #3
     f7c:	mov	x1, x0
     f80:	ldr	x0, [sp, #16]
     f84:	add	x1, x1, #0x2
     f88:	ldr	x0, [x0, x1, lsl #3]
     f8c:	str	x0, [sp, #88]
     f90:	ldr	x0, [sp, #24]
     f94:	add	x0, x0, #0x10
     f98:	ldr	x1, [sp, #56]
     f9c:	sub	x0, x1, x0
     fa0:	asr	x0, x0, #3
     fa4:	mov	x1, x0
     fa8:	ldr	x0, [sp, #16]
     fac:	add	x1, x1, #0x2
     fb0:	str	xzr, [x0, x1, lsl #3]
     fb4:	ldr	x0, [sp, #88]
     fb8:	str	x0, [sp, #56]
     fbc:	ldr	x1, [sp, #56]
     fc0:	adrp	x0, 0 <size_of_encoded_value>
     fc4:	add	x0, x0, #0x0
     fc8:	cmp	x1, x0
     fcc:	b.eq	1000 <fde_split+0xdc>  // b.none
     fd0:	ldr	x0, [sp, #24]
     fd4:	ldr	x1, [sp, #80]
     fd8:	add	x1, x1, #0x2
     fdc:	ldr	x1, [x0, x1, lsl #3]
     fe0:	ldr	x0, [sp, #56]
     fe4:	ldr	x0, [x0]
     fe8:	ldr	x3, [sp, #32]
     fec:	mov	x2, x0
     ff0:	ldr	x0, [sp, #40]
     ff4:	blr	x3
     ff8:	cmp	w0, #0x0
     ffc:	b.lt	f68 <fde_split+0x44>  // b.tstop
    1000:	ldr	x0, [sp, #16]
    1004:	ldr	x1, [sp, #80]
    1008:	add	x1, x1, #0x2
    100c:	ldr	x2, [sp, #88]
    1010:	str	x2, [x0, x1, lsl #3]
    1014:	ldr	x0, [sp, #80]
    1018:	add	x0, x0, #0x2
    101c:	lsl	x0, x0, #3
    1020:	ldr	x1, [sp, #24]
    1024:	add	x0, x1, x0
    1028:	str	x0, [sp, #88]
    102c:	ldr	x0, [sp, #80]
    1030:	add	x0, x0, #0x1
    1034:	str	x0, [sp, #80]
    1038:	ldr	x1, [sp, #80]
    103c:	ldr	x0, [sp, #48]
    1040:	cmp	x1, x0
    1044:	b.cc	f5c <fde_split+0x38>  // b.lo, b.ul, b.last
    1048:	str	xzr, [sp, #64]
    104c:	ldr	x0, [sp, #64]
    1050:	str	x0, [sp, #72]
    1054:	ldr	x0, [sp, #72]
    1058:	str	x0, [sp, #80]
    105c:	b	10d8 <fde_split+0x1b4>
    1060:	ldr	x0, [sp, #16]
    1064:	ldr	x1, [sp, #80]
    1068:	add	x1, x1, #0x2
    106c:	ldr	x0, [x0, x1, lsl #3]
    1070:	cmp	x0, #0x0
    1074:	b.eq	10a4 <fde_split+0x180>  // b.none
    1078:	ldr	x0, [sp, #72]
    107c:	add	x1, x0, #0x1
    1080:	str	x1, [sp, #72]
    1084:	ldr	x1, [sp, #24]
    1088:	ldr	x2, [sp, #80]
    108c:	add	x2, x2, #0x2
    1090:	ldr	x2, [x1, x2, lsl #3]
    1094:	ldr	x1, [sp, #24]
    1098:	add	x0, x0, #0x2
    109c:	str	x2, [x1, x0, lsl #3]
    10a0:	b	10cc <fde_split+0x1a8>
    10a4:	ldr	x0, [sp, #64]
    10a8:	add	x1, x0, #0x1
    10ac:	str	x1, [sp, #64]
    10b0:	ldr	x1, [sp, #24]
    10b4:	ldr	x2, [sp, #80]
    10b8:	add	x2, x2, #0x2
    10bc:	ldr	x2, [x1, x2, lsl #3]
    10c0:	ldr	x1, [sp, #16]
    10c4:	add	x0, x0, #0x2
    10c8:	str	x2, [x1, x0, lsl #3]
    10cc:	ldr	x0, [sp, #80]
    10d0:	add	x0, x0, #0x1
    10d4:	str	x0, [sp, #80]
    10d8:	ldr	x1, [sp, #80]
    10dc:	ldr	x0, [sp, #48]
    10e0:	cmp	x1, x0
    10e4:	b.cc	1060 <fde_split+0x13c>  // b.lo, b.ul, b.last
    10e8:	ldr	x0, [sp, #24]
    10ec:	ldr	x1, [sp, #72]
    10f0:	str	x1, [x0, #8]
    10f4:	ldr	x0, [sp, #16]
    10f8:	ldr	x1, [sp, #64]
    10fc:	str	x1, [x0, #8]
    1100:	nop
    1104:	ldp	x29, x30, [sp], #96
    1108:	ret

000000000000110c <frame_downheap>:
    110c:	stp	x29, x30, [sp, #-64]!
    1110:	mov	x29, sp
    1114:	str	x0, [sp, #40]
    1118:	str	x1, [sp, #32]
    111c:	str	x2, [sp, #24]
    1120:	str	w3, [sp, #20]
    1124:	str	w4, [sp, #16]
    1128:	ldr	w0, [sp, #20]
    112c:	str	w0, [sp, #60]
    1130:	ldr	w0, [sp, #60]
    1134:	lsl	w0, w0, #1
    1138:	add	w0, w0, #0x1
    113c:	str	w0, [sp, #56]
    1140:	b	1260 <frame_downheap+0x154>
    1144:	ldr	w0, [sp, #56]
    1148:	add	w0, w0, #0x1
    114c:	ldr	w1, [sp, #16]
    1150:	cmp	w1, w0
    1154:	b.le	11ac <frame_downheap+0xa0>
    1158:	ldrsw	x0, [sp, #56]
    115c:	lsl	x0, x0, #3
    1160:	ldr	x1, [sp, #24]
    1164:	add	x0, x1, x0
    1168:	ldr	x4, [x0]
    116c:	ldrsw	x0, [sp, #56]
    1170:	add	x0, x0, #0x1
    1174:	lsl	x0, x0, #3
    1178:	ldr	x1, [sp, #24]
    117c:	add	x0, x1, x0
    1180:	ldr	x0, [x0]
    1184:	ldr	x3, [sp, #32]
    1188:	mov	x2, x0
    118c:	mov	x1, x4
    1190:	ldr	x0, [sp, #40]
    1194:	blr	x3
    1198:	cmp	w0, #0x0
    119c:	b.ge	11ac <frame_downheap+0xa0>  // b.tcont
    11a0:	ldr	w0, [sp, #56]
    11a4:	add	w0, w0, #0x1
    11a8:	str	w0, [sp, #56]
    11ac:	ldrsw	x0, [sp, #60]
    11b0:	lsl	x0, x0, #3
    11b4:	ldr	x1, [sp, #24]
    11b8:	add	x0, x1, x0
    11bc:	ldr	x4, [x0]
    11c0:	ldrsw	x0, [sp, #56]
    11c4:	lsl	x0, x0, #3
    11c8:	ldr	x1, [sp, #24]
    11cc:	add	x0, x1, x0
    11d0:	ldr	x0, [x0]
    11d4:	ldr	x3, [sp, #32]
    11d8:	mov	x2, x0
    11dc:	mov	x1, x4
    11e0:	ldr	x0, [sp, #40]
    11e4:	blr	x3
    11e8:	cmp	w0, #0x0
    11ec:	b.ge	1274 <frame_downheap+0x168>  // b.tcont
    11f0:	ldrsw	x0, [sp, #60]
    11f4:	lsl	x0, x0, #3
    11f8:	ldr	x1, [sp, #24]
    11fc:	add	x0, x1, x0
    1200:	ldr	x0, [x0]
    1204:	str	x0, [sp, #48]
    1208:	ldrsw	x0, [sp, #56]
    120c:	lsl	x0, x0, #3
    1210:	ldr	x1, [sp, #24]
    1214:	add	x1, x1, x0
    1218:	ldrsw	x0, [sp, #60]
    121c:	lsl	x0, x0, #3
    1220:	ldr	x2, [sp, #24]
    1224:	add	x0, x2, x0
    1228:	ldr	x1, [x1]
    122c:	str	x1, [x0]
    1230:	ldrsw	x0, [sp, #56]
    1234:	lsl	x0, x0, #3
    1238:	ldr	x1, [sp, #24]
    123c:	add	x0, x1, x0
    1240:	ldr	x1, [sp, #48]
    1244:	str	x1, [x0]
    1248:	ldr	w0, [sp, #56]
    124c:	str	w0, [sp, #60]
    1250:	ldr	w0, [sp, #60]
    1254:	lsl	w0, w0, #1
    1258:	add	w0, w0, #0x1
    125c:	str	w0, [sp, #56]
    1260:	ldr	w1, [sp, #56]
    1264:	ldr	w0, [sp, #16]
    1268:	cmp	w1, w0
    126c:	b.lt	1144 <frame_downheap+0x38>  // b.tstop
    1270:	b	1278 <frame_downheap+0x16c>
    1274:	nop
    1278:	nop
    127c:	ldp	x29, x30, [sp], #64
    1280:	ret

0000000000001284 <frame_heapsort>:
    1284:	stp	x29, x30, [sp, #-80]!
    1288:	mov	x29, sp
    128c:	str	x0, [sp, #40]
    1290:	str	x1, [sp, #32]
    1294:	str	x2, [sp, #24]
    1298:	ldr	x0, [sp, #24]
    129c:	add	x0, x0, #0x10
    12a0:	str	x0, [sp, #64]
    12a4:	ldr	x0, [sp, #24]
    12a8:	ldr	x0, [x0, #8]
    12ac:	str	x0, [sp, #56]
    12b0:	ldr	x0, [sp, #56]
    12b4:	lsr	x0, x0, #1
    12b8:	sub	w0, w0, #0x1
    12bc:	str	w0, [sp, #76]
    12c0:	b	12ec <frame_heapsort+0x68>
    12c4:	ldr	x0, [sp, #56]
    12c8:	mov	w4, w0
    12cc:	ldr	w3, [sp, #76]
    12d0:	ldr	x2, [sp, #64]
    12d4:	ldr	x1, [sp, #32]
    12d8:	ldr	x0, [sp, #40]
    12dc:	bl	110c <frame_downheap>
    12e0:	ldr	w0, [sp, #76]
    12e4:	sub	w0, w0, #0x1
    12e8:	str	w0, [sp, #76]
    12ec:	ldr	w0, [sp, #76]
    12f0:	cmp	w0, #0x0
    12f4:	b.ge	12c4 <frame_heapsort+0x40>  // b.tcont
    12f8:	ldr	x0, [sp, #56]
    12fc:	sub	w0, w0, #0x1
    1300:	str	w0, [sp, #76]
    1304:	b	136c <frame_heapsort+0xe8>
    1308:	ldr	x0, [sp, #64]
    130c:	ldr	x0, [x0]
    1310:	str	x0, [sp, #48]
    1314:	ldrsw	x0, [sp, #76]
    1318:	lsl	x0, x0, #3
    131c:	ldr	x1, [sp, #64]
    1320:	add	x0, x1, x0
    1324:	ldr	x1, [x0]
    1328:	ldr	x0, [sp, #64]
    132c:	str	x1, [x0]
    1330:	ldrsw	x0, [sp, #76]
    1334:	lsl	x0, x0, #3
    1338:	ldr	x1, [sp, #64]
    133c:	add	x0, x1, x0
    1340:	ldr	x1, [sp, #48]
    1344:	str	x1, [x0]
    1348:	ldr	w4, [sp, #76]
    134c:	mov	w3, #0x0                   	// #0
    1350:	ldr	x2, [sp, #64]
    1354:	ldr	x1, [sp, #32]
    1358:	ldr	x0, [sp, #40]
    135c:	bl	110c <frame_downheap>
    1360:	ldr	w0, [sp, #76]
    1364:	sub	w0, w0, #0x1
    1368:	str	w0, [sp, #76]
    136c:	ldr	w0, [sp, #76]
    1370:	cmp	w0, #0x0
    1374:	b.gt	1308 <frame_heapsort+0x84>
    1378:	nop
    137c:	nop
    1380:	ldp	x29, x30, [sp], #80
    1384:	ret

0000000000001388 <fde_merge>:
    1388:	stp	x29, x30, [sp, #-80]!
    138c:	mov	x29, sp
    1390:	str	x0, [sp, #40]
    1394:	str	x1, [sp, #32]
    1398:	str	x2, [sp, #24]
    139c:	str	x3, [sp, #16]
    13a0:	ldr	x0, [sp, #16]
    13a4:	ldr	x0, [x0, #8]
    13a8:	str	x0, [sp, #64]
    13ac:	ldr	x0, [sp, #64]
    13b0:	cmp	x0, #0x0
    13b4:	b.eq	14a0 <fde_merge+0x118>  // b.none
    13b8:	ldr	x0, [sp, #24]
    13bc:	ldr	x0, [x0, #8]
    13c0:	str	x0, [sp, #72]
    13c4:	ldr	x0, [sp, #64]
    13c8:	sub	x0, x0, #0x1
    13cc:	str	x0, [sp, #64]
    13d0:	ldr	x0, [sp, #16]
    13d4:	ldr	x1, [sp, #64]
    13d8:	add	x1, x1, #0x2
    13dc:	ldr	x0, [x0, x1, lsl #3]
    13e0:	str	x0, [sp, #56]
    13e4:	b	1420 <fde_merge+0x98>
    13e8:	ldr	x0, [sp, #72]
    13ec:	sub	x2, x0, #0x1
    13f0:	ldr	x1, [sp, #72]
    13f4:	ldr	x0, [sp, #64]
    13f8:	add	x1, x1, x0
    13fc:	ldr	x0, [sp, #24]
    1400:	add	x2, x2, #0x2
    1404:	ldr	x2, [x0, x2, lsl #3]
    1408:	ldr	x0, [sp, #24]
    140c:	add	x1, x1, #0x2
    1410:	str	x2, [x0, x1, lsl #3]
    1414:	ldr	x0, [sp, #72]
    1418:	sub	x0, x0, #0x1
    141c:	str	x0, [sp, #72]
    1420:	ldr	x0, [sp, #72]
    1424:	cmp	x0, #0x0
    1428:	b.eq	145c <fde_merge+0xd4>  // b.none
    142c:	ldr	x0, [sp, #72]
    1430:	sub	x1, x0, #0x1
    1434:	ldr	x0, [sp, #24]
    1438:	add	x1, x1, #0x2
    143c:	ldr	x0, [x0, x1, lsl #3]
    1440:	ldr	x3, [sp, #32]
    1444:	ldr	x2, [sp, #56]
    1448:	mov	x1, x0
    144c:	ldr	x0, [sp, #40]
    1450:	blr	x3
    1454:	cmp	w0, #0x0
    1458:	b.gt	13e8 <fde_merge+0x60>
    145c:	ldr	x1, [sp, #72]
    1460:	ldr	x0, [sp, #64]
    1464:	add	x1, x1, x0
    1468:	ldr	x0, [sp, #24]
    146c:	add	x1, x1, #0x2
    1470:	ldr	x2, [sp, #56]
    1474:	str	x2, [x0, x1, lsl #3]
    1478:	ldr	x0, [sp, #64]
    147c:	cmp	x0, #0x0
    1480:	b.ne	13c4 <fde_merge+0x3c>  // b.any
    1484:	ldr	x0, [sp, #24]
    1488:	ldr	x1, [x0, #8]
    148c:	ldr	x0, [sp, #16]
    1490:	ldr	x0, [x0, #8]
    1494:	add	x1, x1, x0
    1498:	ldr	x0, [sp, #24]
    149c:	str	x1, [x0, #8]
    14a0:	nop
    14a4:	ldp	x29, x30, [sp], #80
    14a8:	ret

00000000000014ac <end_fde_sort>:
    14ac:	stp	x29, x30, [sp, #-64]!
    14b0:	mov	x29, sp
    14b4:	str	x0, [sp, #40]
    14b8:	str	x1, [sp, #32]
    14bc:	str	x2, [sp, #24]
    14c0:	ldr	x0, [sp, #32]
    14c4:	ldr	x0, [x0]
    14c8:	cmp	x0, #0x0
    14cc:	b.eq	14ec <end_fde_sort+0x40>  // b.none
    14d0:	ldr	x0, [sp, #32]
    14d4:	ldr	x0, [x0]
    14d8:	ldr	x0, [x0, #8]
    14dc:	ldr	x1, [sp, #24]
    14e0:	cmp	x1, x0
    14e4:	b.eq	14ec <end_fde_sort+0x40>  // b.none
    14e8:	bl	0 <abort>
    14ec:	ldr	x0, [sp, #40]
    14f0:	ldrb	w0, [x0, #32]
    14f4:	and	w0, w0, #0x4
    14f8:	and	w0, w0, #0xff
    14fc:	cmp	w0, #0x0
    1500:	b.eq	1514 <end_fde_sort+0x68>  // b.none
    1504:	adrp	x0, 0 <size_of_encoded_value>
    1508:	add	x0, x0, #0x0
    150c:	str	x0, [sp, #56]
    1510:	b	1548 <end_fde_sort+0x9c>
    1514:	ldr	x0, [sp, #40]
    1518:	ldrh	w0, [x0, #32]
    151c:	and	w0, w0, #0x7f8
    1520:	and	w0, w0, #0xffff
    1524:	cmp	w0, #0x0
    1528:	b.ne	153c <end_fde_sort+0x90>  // b.any
    152c:	adrp	x0, 0 <size_of_encoded_value>
    1530:	add	x0, x0, #0x0
    1534:	str	x0, [sp, #56]
    1538:	b	1548 <end_fde_sort+0x9c>
    153c:	adrp	x0, 0 <size_of_encoded_value>
    1540:	add	x0, x0, #0x0
    1544:	str	x0, [sp, #56]
    1548:	ldr	x0, [sp, #32]
    154c:	ldr	x0, [x0, #8]
    1550:	cmp	x0, #0x0
    1554:	b.eq	15f4 <end_fde_sort+0x148>  // b.none
    1558:	ldr	x0, [sp, #32]
    155c:	ldr	x1, [x0]
    1560:	ldr	x0, [sp, #32]
    1564:	ldr	x0, [x0, #8]
    1568:	mov	x3, x0
    156c:	mov	x2, x1
    1570:	ldr	x1, [sp, #56]
    1574:	ldr	x0, [sp, #40]
    1578:	bl	f24 <fde_split>
    157c:	ldr	x0, [sp, #32]
    1580:	ldr	x0, [x0]
    1584:	ldr	x1, [x0, #8]
    1588:	ldr	x0, [sp, #32]
    158c:	ldr	x0, [x0, #8]
    1590:	ldr	x0, [x0, #8]
    1594:	add	x0, x1, x0
    1598:	ldr	x1, [sp, #24]
    159c:	cmp	x1, x0
    15a0:	b.eq	15a8 <end_fde_sort+0xfc>  // b.none
    15a4:	bl	0 <abort>
    15a8:	ldr	x0, [sp, #32]
    15ac:	ldr	x0, [x0, #8]
    15b0:	mov	x2, x0
    15b4:	ldr	x1, [sp, #56]
    15b8:	ldr	x0, [sp, #40]
    15bc:	bl	1284 <frame_heapsort>
    15c0:	ldr	x0, [sp, #32]
    15c4:	ldr	x1, [x0]
    15c8:	ldr	x0, [sp, #32]
    15cc:	ldr	x0, [x0, #8]
    15d0:	mov	x3, x0
    15d4:	mov	x2, x1
    15d8:	ldr	x1, [sp, #56]
    15dc:	ldr	x0, [sp, #40]
    15e0:	bl	1388 <fde_merge>
    15e4:	ldr	x0, [sp, #32]
    15e8:	ldr	x0, [x0, #8]
    15ec:	bl	0 <free>
    15f0:	b	160c <end_fde_sort+0x160>
    15f4:	ldr	x0, [sp, #32]
    15f8:	ldr	x0, [x0]
    15fc:	mov	x2, x0
    1600:	ldr	x1, [sp, #56]
    1604:	ldr	x0, [sp, #40]
    1608:	bl	1284 <frame_heapsort>
    160c:	nop
    1610:	ldp	x29, x30, [sp], #64
    1614:	ret

0000000000001618 <classify_object_over_fdes>:
    1618:	stp	x29, x30, [sp, #-96]!
    161c:	mov	x29, sp
    1620:	str	x0, [sp, #24]
    1624:	str	x1, [sp, #16]
    1628:	str	xzr, [sp, #88]
    162c:	str	xzr, [sp, #80]
    1630:	str	wzr, [sp, #76]
    1634:	str	xzr, [sp, #64]
    1638:	b	17d4 <classify_object_over_fdes+0x1bc>
    163c:	ldr	x0, [sp, #16]
    1640:	ldr	w0, [x0, #4]
    1644:	cmp	w0, #0x0
    1648:	b.eq	17bc <classify_object_over_fdes+0x1a4>  // b.none
    164c:	ldr	x0, [sp, #16]
    1650:	bl	410 <get_cie>
    1654:	str	x0, [sp, #48]
    1658:	ldr	x1, [sp, #48]
    165c:	ldr	x0, [sp, #88]
    1660:	cmp	x1, x0
    1664:	b.eq	1708 <classify_object_over_fdes+0xf0>  // b.none
    1668:	ldr	x0, [sp, #48]
    166c:	str	x0, [sp, #88]
    1670:	ldr	x0, [sp, #48]
    1674:	bl	a2c <get_cie_encoding>
    1678:	str	w0, [sp, #76]
    167c:	ldr	w0, [sp, #76]
    1680:	cmp	w0, #0xff
    1684:	b.ne	1690 <classify_object_over_fdes+0x78>  // b.any
    1688:	mov	x0, #0xffffffffffffffff    	// #-1
    168c:	b	17ec <classify_object_over_fdes+0x1d4>
    1690:	ldr	w0, [sp, #76]
    1694:	and	w0, w0, #0xff
    1698:	ldr	x1, [sp, #24]
    169c:	bl	994 <base_from_object>
    16a0:	str	x0, [sp, #64]
    16a4:	ldr	x0, [sp, #24]
    16a8:	ldrh	w0, [x0, #32]
    16ac:	and	w0, w0, #0x7f8
    16b0:	and	w0, w0, #0xffff
    16b4:	cmp	w0, #0x7f8
    16b8:	b.ne	16d8 <classify_object_over_fdes+0xc0>  // b.any
    16bc:	ldr	w0, [sp, #76]
    16c0:	and	w2, w0, #0xff
    16c4:	ldr	x1, [sp, #24]
    16c8:	ldrh	w0, [x1, #32]
    16cc:	bfi	w0, w2, #3, #8
    16d0:	strh	w0, [x1, #32]
    16d4:	b	1708 <classify_object_over_fdes+0xf0>
    16d8:	ldr	x0, [sp, #24]
    16dc:	ldrh	w0, [x0, #32]
    16e0:	ubfx	x0, x0, #3, #8
    16e4:	and	w0, w0, #0xff
    16e8:	mov	w1, w0
    16ec:	ldr	w0, [sp, #76]
    16f0:	cmp	w0, w1
    16f4:	b.eq	1708 <classify_object_over_fdes+0xf0>  // b.none
    16f8:	ldr	x0, [sp, #24]
    16fc:	ldrb	w1, [x0, #32]
    1700:	orr	w1, w1, #0x4
    1704:	strb	w1, [x0, #32]
    1708:	ldr	w0, [sp, #76]
    170c:	and	w4, w0, #0xff
    1710:	ldr	x0, [sp, #16]
    1714:	add	x0, x0, #0x8
    1718:	add	x1, sp, #0x28
    171c:	mov	x3, x1
    1720:	mov	x2, x0
    1724:	ldr	x1, [sp, #64]
    1728:	mov	w0, w4
    172c:	bl	1a8 <read_encoded_value_with_base>
    1730:	ldr	w0, [sp, #76]
    1734:	and	w0, w0, #0xff
    1738:	bl	0 <size_of_encoded_value>
    173c:	mov	w0, w0
    1740:	str	x0, [sp, #56]
    1744:	ldr	x0, [sp, #56]
    1748:	cmp	x0, #0x7
    174c:	b.hi	176c <classify_object_over_fdes+0x154>  // b.pmore
    1750:	ldr	x0, [sp, #56]
    1754:	lsl	w0, w0, #3
    1758:	mov	x1, #0x1                   	// #1
    175c:	lsl	x0, x1, x0
    1760:	sub	x0, x0, #0x1
    1764:	str	x0, [sp, #56]
    1768:	b	1774 <classify_object_over_fdes+0x15c>
    176c:	mov	x0, #0xffffffffffffffff    	// #-1
    1770:	str	x0, [sp, #56]
    1774:	ldr	x1, [sp, #40]
    1778:	ldr	x0, [sp, #56]
    177c:	and	x0, x1, x0
    1780:	cmp	x0, #0x0
    1784:	b.eq	17c4 <classify_object_over_fdes+0x1ac>  // b.none
    1788:	ldr	x0, [sp, #80]
    178c:	add	x0, x0, #0x1
    1790:	str	x0, [sp, #80]
    1794:	ldr	x0, [sp, #24]
    1798:	ldr	x0, [x0]
    179c:	ldr	x1, [sp, #40]
    17a0:	cmp	x0, x1
    17a4:	b.ls	17c8 <classify_object_over_fdes+0x1b0>  // b.plast
    17a8:	ldr	x0, [sp, #40]
    17ac:	mov	x1, x0
    17b0:	ldr	x0, [sp, #24]
    17b4:	str	x1, [x0]
    17b8:	b	17c8 <classify_object_over_fdes+0x1b0>
    17bc:	nop
    17c0:	b	17c8 <classify_object_over_fdes+0x1b0>
    17c4:	nop
    17c8:	ldr	x0, [sp, #16]
    17cc:	bl	43c <next_fde>
    17d0:	str	x0, [sp, #16]
    17d4:	ldr	x1, [sp, #16]
    17d8:	ldr	x0, [sp, #24]
    17dc:	bl	464 <last_fde>
    17e0:	cmp	w0, #0x0
    17e4:	b.eq	163c <classify_object_over_fdes+0x24>  // b.none
    17e8:	ldr	x0, [sp, #80]
    17ec:	ldp	x29, x30, [sp], #96
    17f0:	ret

00000000000017f4 <add_fdes>:
    17f4:	stp	x29, x30, [sp, #-112]!
    17f8:	mov	x29, sp
    17fc:	str	x0, [sp, #40]
    1800:	str	x1, [sp, #32]
    1804:	str	x2, [sp, #24]
    1808:	str	xzr, [sp, #104]
    180c:	ldr	x0, [sp, #40]
    1810:	ldrh	w0, [x0, #32]
    1814:	ubfx	x0, x0, #3, #8
    1818:	and	w0, w0, #0xff
    181c:	str	w0, [sp, #100]
    1820:	ldr	x0, [sp, #40]
    1824:	ldrh	w0, [x0, #32]
    1828:	ubfx	x0, x0, #3, #8
    182c:	and	w0, w0, #0xff
    1830:	ldr	x1, [sp, #40]
    1834:	bl	994 <base_from_object>
    1838:	str	x0, [sp, #88]
    183c:	b	1980 <add_fdes+0x18c>
    1840:	ldr	x0, [sp, #24]
    1844:	ldr	w0, [x0, #4]
    1848:	cmp	w0, #0x0
    184c:	b.eq	1968 <add_fdes+0x174>  // b.none
    1850:	ldr	x0, [sp, #40]
    1854:	ldrb	w0, [x0, #32]
    1858:	and	w0, w0, #0x4
    185c:	and	w0, w0, #0xff
    1860:	cmp	w0, #0x0
    1864:	b.eq	18ac <add_fdes+0xb8>  // b.none
    1868:	ldr	x0, [sp, #24]
    186c:	bl	410 <get_cie>
    1870:	str	x0, [sp, #72]
    1874:	ldr	x1, [sp, #72]
    1878:	ldr	x0, [sp, #104]
    187c:	cmp	x1, x0
    1880:	b.eq	18ac <add_fdes+0xb8>  // b.none
    1884:	ldr	x0, [sp, #72]
    1888:	str	x0, [sp, #104]
    188c:	ldr	x0, [sp, #72]
    1890:	bl	a2c <get_cie_encoding>
    1894:	str	w0, [sp, #100]
    1898:	ldr	w0, [sp, #100]
    189c:	and	w0, w0, #0xff
    18a0:	ldr	x1, [sp, #40]
    18a4:	bl	994 <base_from_object>
    18a8:	str	x0, [sp, #88]
    18ac:	ldr	w0, [sp, #100]
    18b0:	cmp	w0, #0x0
    18b4:	b.ne	18d8 <add_fdes+0xe4>  // b.any
    18b8:	ldr	x0, [sp, #24]
    18bc:	add	x0, x0, #0x8
    18c0:	ldr	x0, [x0]
    18c4:	str	x0, [sp, #64]
    18c8:	ldr	x0, [sp, #64]
    18cc:	cmp	x0, #0x0
    18d0:	b.ne	1958 <add_fdes+0x164>  // b.any
    18d4:	b	1974 <add_fdes+0x180>
    18d8:	ldr	w0, [sp, #100]
    18dc:	and	w4, w0, #0xff
    18e0:	ldr	x0, [sp, #24]
    18e4:	add	x0, x0, #0x8
    18e8:	add	x1, sp, #0x38
    18ec:	mov	x3, x1
    18f0:	mov	x2, x0
    18f4:	ldr	x1, [sp, #88]
    18f8:	mov	w0, w4
    18fc:	bl	1a8 <read_encoded_value_with_base>
    1900:	ldr	w0, [sp, #100]
    1904:	and	w0, w0, #0xff
    1908:	bl	0 <size_of_encoded_value>
    190c:	mov	w0, w0
    1910:	str	x0, [sp, #80]
    1914:	ldr	x0, [sp, #80]
    1918:	cmp	x0, #0x7
    191c:	b.hi	193c <add_fdes+0x148>  // b.pmore
    1920:	ldr	x0, [sp, #80]
    1924:	lsl	w0, w0, #3
    1928:	mov	x1, #0x1                   	// #1
    192c:	lsl	x0, x1, x0
    1930:	sub	x0, x0, #0x1
    1934:	str	x0, [sp, #80]
    1938:	b	1944 <add_fdes+0x150>
    193c:	mov	x0, #0xffffffffffffffff    	// #-1
    1940:	str	x0, [sp, #80]
    1944:	ldr	x1, [sp, #56]
    1948:	ldr	x0, [sp, #80]
    194c:	and	x0, x1, x0
    1950:	cmp	x0, #0x0
    1954:	b.eq	1970 <add_fdes+0x17c>  // b.none
    1958:	ldr	x1, [sp, #24]
    195c:	ldr	x0, [sp, #32]
    1960:	bl	ed4 <fde_insert>
    1964:	b	1974 <add_fdes+0x180>
    1968:	nop
    196c:	b	1974 <add_fdes+0x180>
    1970:	nop
    1974:	ldr	x0, [sp, #24]
    1978:	bl	43c <next_fde>
    197c:	str	x0, [sp, #24]
    1980:	ldr	x1, [sp, #24]
    1984:	ldr	x0, [sp, #40]
    1988:	bl	464 <last_fde>
    198c:	cmp	w0, #0x0
    1990:	b.eq	1840 <add_fdes+0x4c>  // b.none
    1994:	nop
    1998:	nop
    199c:	ldp	x29, x30, [sp], #112
    19a0:	ret

00000000000019a4 <init_object>:
    19a4:	stp	x29, x30, [sp, #-80]!
    19a8:	mov	x29, sp
    19ac:	str	x0, [sp, #24]
    19b0:	ldr	x0, [sp, #24]
    19b4:	ldr	w0, [x0, #32]
    19b8:	lsr	w0, w0, #11
    19bc:	mov	w0, w0
    19c0:	str	x0, [sp, #72]
    19c4:	ldr	x0, [sp, #72]
    19c8:	cmp	x0, #0x0
    19cc:	b.ne	1af0 <init_object+0x14c>  // b.any
    19d0:	ldr	x0, [sp, #24]
    19d4:	ldrb	w0, [x0, #32]
    19d8:	and	w0, w0, #0x2
    19dc:	and	w0, w0, #0xff
    19e0:	cmp	w0, #0x0
    19e4:	b.eq	1a50 <init_object+0xac>  // b.none
    19e8:	ldr	x0, [sp, #24]
    19ec:	ldr	x0, [x0, #24]
    19f0:	str	x0, [sp, #64]
    19f4:	str	xzr, [sp, #72]
    19f8:	b	1a3c <init_object+0x98>
    19fc:	ldr	x0, [sp, #64]
    1a00:	ldr	x0, [x0]
    1a04:	mov	x1, x0
    1a08:	ldr	x0, [sp, #24]
    1a0c:	bl	1618 <classify_object_over_fdes>
    1a10:	str	x0, [sp, #48]
    1a14:	ldr	x0, [sp, #48]
    1a18:	cmn	x0, #0x1
    1a1c:	b.eq	1a78 <init_object+0xd4>  // b.none
    1a20:	ldr	x1, [sp, #72]
    1a24:	ldr	x0, [sp, #48]
    1a28:	add	x0, x1, x0
    1a2c:	str	x0, [sp, #72]
    1a30:	ldr	x0, [sp, #64]
    1a34:	add	x0, x0, #0x8
    1a38:	str	x0, [sp, #64]
    1a3c:	ldr	x0, [sp, #64]
    1a40:	ldr	x0, [x0]
    1a44:	cmp	x0, #0x0
    1a48:	b.ne	19fc <init_object+0x58>  // b.any
    1a4c:	b	1aa8 <init_object+0x104>
    1a50:	ldr	x0, [sp, #24]
    1a54:	ldr	x0, [x0, #24]
    1a58:	mov	x1, x0
    1a5c:	ldr	x0, [sp, #24]
    1a60:	bl	1618 <classify_object_over_fdes>
    1a64:	str	x0, [sp, #72]
    1a68:	ldr	x0, [sp, #72]
    1a6c:	cmn	x0, #0x1
    1a70:	b.ne	1aa8 <init_object+0x104>  // b.any
    1a74:	b	1a7c <init_object+0xd8>
    1a78:	nop
    1a7c:	ldr	x0, [sp, #24]
    1a80:	str	xzr, [x0, #32]
    1a84:	ldr	x0, [sp, #24]
    1a88:	ldrh	w1, [x0, #32]
    1a8c:	orr	w1, w1, #0x7f8
    1a90:	strh	w1, [x0, #32]
    1a94:	ldr	x0, [sp, #24]
    1a98:	adrp	x1, 0 <size_of_encoded_value>
    1a9c:	add	x1, x1, #0x0
    1aa0:	str	x1, [x0, #24]
    1aa4:	b	1bcc <init_object+0x228>
    1aa8:	ldr	x0, [sp, #72]
    1aac:	mov	w1, w0
    1ab0:	and	w1, w1, #0x1fffff
    1ab4:	ldr	x2, [sp, #24]
    1ab8:	ldr	w0, [x2, #32]
    1abc:	bfi	w0, w1, #11, #21
    1ac0:	str	w0, [x2, #32]
    1ac4:	ldr	x0, [sp, #24]
    1ac8:	ldr	w0, [x0, #32]
    1acc:	lsr	w0, w0, #11
    1ad0:	mov	w0, w0
    1ad4:	ldr	x1, [sp, #72]
    1ad8:	cmp	x1, x0
    1adc:	b.eq	1af0 <init_object+0x14c>  // b.none
    1ae0:	ldr	x0, [sp, #24]
    1ae4:	ldr	w1, [x0, #32]
    1ae8:	and	w1, w1, #0x7ff
    1aec:	str	w1, [x0, #32]
    1af0:	add	x0, sp, #0x20
    1af4:	ldr	x1, [sp, #72]
    1af8:	bl	e2c <start_fde_sort>
    1afc:	cmp	w0, #0x0
    1b00:	b.eq	1bc8 <init_object+0x224>  // b.none
    1b04:	ldr	x0, [sp, #24]
    1b08:	ldrb	w0, [x0, #32]
    1b0c:	and	w0, w0, #0x2
    1b10:	and	w0, w0, #0xff
    1b14:	cmp	w0, #0x0
    1b18:	b.eq	1b68 <init_object+0x1c4>  // b.none
    1b1c:	ldr	x0, [sp, #24]
    1b20:	ldr	x0, [x0, #24]
    1b24:	str	x0, [sp, #56]
    1b28:	b	1b54 <init_object+0x1b0>
    1b2c:	ldr	x0, [sp, #56]
    1b30:	ldr	x1, [x0]
    1b34:	add	x0, sp, #0x20
    1b38:	mov	x2, x1
    1b3c:	mov	x1, x0
    1b40:	ldr	x0, [sp, #24]
    1b44:	bl	17f4 <add_fdes>
    1b48:	ldr	x0, [sp, #56]
    1b4c:	add	x0, x0, #0x8
    1b50:	str	x0, [sp, #56]
    1b54:	ldr	x0, [sp, #56]
    1b58:	ldr	x0, [x0]
    1b5c:	cmp	x0, #0x0
    1b60:	b.ne	1b2c <init_object+0x188>  // b.any
    1b64:	b	1b84 <init_object+0x1e0>
    1b68:	ldr	x0, [sp, #24]
    1b6c:	ldr	x1, [x0, #24]
    1b70:	add	x0, sp, #0x20
    1b74:	mov	x2, x1
    1b78:	mov	x1, x0
    1b7c:	ldr	x0, [sp, #24]
    1b80:	bl	17f4 <add_fdes>
    1b84:	add	x0, sp, #0x20
    1b88:	ldr	x2, [sp, #72]
    1b8c:	mov	x1, x0
    1b90:	ldr	x0, [sp, #24]
    1b94:	bl	14ac <end_fde_sort>
    1b98:	ldr	x0, [sp, #32]
    1b9c:	ldr	x1, [sp, #24]
    1ba0:	ldr	x1, [x1, #24]
    1ba4:	str	x1, [x0]
    1ba8:	ldr	x1, [sp, #32]
    1bac:	ldr	x0, [sp, #24]
    1bb0:	str	x1, [x0, #24]
    1bb4:	ldr	x0, [sp, #24]
    1bb8:	ldrb	w1, [x0, #32]
    1bbc:	orr	w1, w1, #0x1
    1bc0:	strb	w1, [x0, #32]
    1bc4:	b	1bcc <init_object+0x228>
    1bc8:	nop
    1bcc:	ldp	x29, x30, [sp], #80
    1bd0:	ret

0000000000001bd4 <linear_search_fdes>:
    1bd4:	stp	x29, x30, [sp, #-128]!
    1bd8:	mov	x29, sp
    1bdc:	str	x0, [sp, #40]
    1be0:	str	x1, [sp, #32]
    1be4:	str	x2, [sp, #24]
    1be8:	str	xzr, [sp, #120]
    1bec:	ldr	x0, [sp, #40]
    1bf0:	ldrh	w0, [x0, #32]
    1bf4:	ubfx	x0, x0, #3, #8
    1bf8:	and	w0, w0, #0xff
    1bfc:	str	w0, [sp, #116]
    1c00:	ldr	x0, [sp, #40]
    1c04:	ldrh	w0, [x0, #32]
    1c08:	ubfx	x0, x0, #3, #8
    1c0c:	and	w0, w0, #0xff
    1c10:	ldr	x1, [sp, #40]
    1c14:	bl	994 <base_from_object>
    1c18:	str	x0, [sp, #104]
    1c1c:	b	1db0 <linear_search_fdes+0x1dc>
    1c20:	ldr	x0, [sp, #32]
    1c24:	ldr	w0, [x0, #4]
    1c28:	cmp	w0, #0x0
    1c2c:	b.eq	1d98 <linear_search_fdes+0x1c4>  // b.none
    1c30:	ldr	x0, [sp, #40]
    1c34:	ldrb	w0, [x0, #32]
    1c38:	and	w0, w0, #0x4
    1c3c:	and	w0, w0, #0xff
    1c40:	cmp	w0, #0x0
    1c44:	b.eq	1c8c <linear_search_fdes+0xb8>  // b.none
    1c48:	ldr	x0, [sp, #32]
    1c4c:	bl	410 <get_cie>
    1c50:	str	x0, [sp, #88]
    1c54:	ldr	x1, [sp, #88]
    1c58:	ldr	x0, [sp, #120]
    1c5c:	cmp	x1, x0
    1c60:	b.eq	1c8c <linear_search_fdes+0xb8>  // b.none
    1c64:	ldr	x0, [sp, #88]
    1c68:	str	x0, [sp, #120]
    1c6c:	ldr	x0, [sp, #88]
    1c70:	bl	a2c <get_cie_encoding>
    1c74:	str	w0, [sp, #116]
    1c78:	ldr	w0, [sp, #116]
    1c7c:	and	w0, w0, #0xff
    1c80:	ldr	x1, [sp, #40]
    1c84:	bl	994 <base_from_object>
    1c88:	str	x0, [sp, #104]
    1c8c:	ldr	w0, [sp, #116]
    1c90:	cmp	w0, #0x0
    1c94:	b.ne	1ccc <linear_search_fdes+0xf8>  // b.any
    1c98:	ldr	x0, [sp, #32]
    1c9c:	add	x0, x0, #0x8
    1ca0:	str	x0, [sp, #72]
    1ca4:	ldr	x0, [sp, #72]
    1ca8:	ldr	x0, [x0]
    1cac:	str	x0, [sp, #64]
    1cb0:	ldr	x0, [sp, #72]
    1cb4:	ldr	x0, [x0, #8]
    1cb8:	str	x0, [sp, #56]
    1cbc:	ldr	x0, [sp, #64]
    1cc0:	cmp	x0, #0x0
    1cc4:	b.ne	1d78 <linear_search_fdes+0x1a4>  // b.any
    1cc8:	b	1da4 <linear_search_fdes+0x1d0>
    1ccc:	ldr	w0, [sp, #116]
    1cd0:	and	w4, w0, #0xff
    1cd4:	ldr	x0, [sp, #32]
    1cd8:	add	x0, x0, #0x8
    1cdc:	add	x1, sp, #0x40
    1ce0:	mov	x3, x1
    1ce4:	mov	x2, x0
    1ce8:	ldr	x1, [sp, #104]
    1cec:	mov	w0, w4
    1cf0:	bl	1a8 <read_encoded_value_with_base>
    1cf4:	str	x0, [sp, #80]
    1cf8:	ldr	w0, [sp, #116]
    1cfc:	and	w0, w0, #0xff
    1d00:	and	w0, w0, #0xf
    1d04:	and	w4, w0, #0xff
    1d08:	add	x0, sp, #0x38
    1d0c:	mov	x3, x0
    1d10:	ldr	x2, [sp, #80]
    1d14:	mov	x1, #0x0                   	// #0
    1d18:	mov	w0, w4
    1d1c:	bl	1a8 <read_encoded_value_with_base>
    1d20:	ldr	w0, [sp, #116]
    1d24:	and	w0, w0, #0xff
    1d28:	bl	0 <size_of_encoded_value>
    1d2c:	mov	w0, w0
    1d30:	str	x0, [sp, #96]
    1d34:	ldr	x0, [sp, #96]
    1d38:	cmp	x0, #0x7
    1d3c:	b.hi	1d5c <linear_search_fdes+0x188>  // b.pmore
    1d40:	ldr	x0, [sp, #96]
    1d44:	lsl	w0, w0, #3
    1d48:	mov	x1, #0x1                   	// #1
    1d4c:	lsl	x0, x1, x0
    1d50:	sub	x0, x0, #0x1
    1d54:	str	x0, [sp, #96]
    1d58:	b	1d64 <linear_search_fdes+0x190>
    1d5c:	mov	x0, #0xffffffffffffffff    	// #-1
    1d60:	str	x0, [sp, #96]
    1d64:	ldr	x1, [sp, #64]
    1d68:	ldr	x0, [sp, #96]
    1d6c:	and	x0, x1, x0
    1d70:	cmp	x0, #0x0
    1d74:	b.eq	1da0 <linear_search_fdes+0x1cc>  // b.none
    1d78:	ldr	x1, [sp, #24]
    1d7c:	ldr	x0, [sp, #64]
    1d80:	sub	x1, x1, x0
    1d84:	ldr	x0, [sp, #56]
    1d88:	cmp	x1, x0
    1d8c:	b.cs	1da4 <linear_search_fdes+0x1d0>  // b.hs, b.nlast
    1d90:	ldr	x0, [sp, #32]
    1d94:	b	1dc8 <linear_search_fdes+0x1f4>
    1d98:	nop
    1d9c:	b	1da4 <linear_search_fdes+0x1d0>
    1da0:	nop
    1da4:	ldr	x0, [sp, #32]
    1da8:	bl	43c <next_fde>
    1dac:	str	x0, [sp, #32]
    1db0:	ldr	x1, [sp, #32]
    1db4:	ldr	x0, [sp, #40]
    1db8:	bl	464 <last_fde>
    1dbc:	cmp	w0, #0x0
    1dc0:	b.eq	1c20 <linear_search_fdes+0x4c>  // b.none
    1dc4:	mov	x0, #0x0                   	// #0
    1dc8:	ldp	x29, x30, [sp], #128
    1dcc:	ret

0000000000001dd0 <binary_search_unencoded_fdes>:
    1dd0:	sub	sp, sp, #0x50
    1dd4:	str	x0, [sp, #8]
    1dd8:	str	x1, [sp]
    1ddc:	ldr	x0, [sp, #8]
    1de0:	ldr	x0, [x0, #24]
    1de4:	str	x0, [sp, #56]
    1de8:	str	xzr, [sp, #72]
    1dec:	ldr	x0, [sp, #56]
    1df0:	ldr	x0, [x0, #8]
    1df4:	str	x0, [sp, #64]
    1df8:	b	1e94 <binary_search_unencoded_fdes+0xc4>
    1dfc:	ldr	x1, [sp, #72]
    1e00:	ldr	x0, [sp, #64]
    1e04:	add	x0, x1, x0
    1e08:	lsr	x0, x0, #1
    1e0c:	str	x0, [sp, #48]
    1e10:	ldr	x0, [sp, #56]
    1e14:	ldr	x1, [sp, #48]
    1e18:	add	x1, x1, #0x2
    1e1c:	ldr	x0, [x0, x1, lsl #3]
    1e20:	str	x0, [sp, #40]
    1e24:	ldr	x0, [sp, #40]
    1e28:	add	x0, x0, #0x8
    1e2c:	ldr	x0, [x0]
    1e30:	str	x0, [sp, #32]
    1e34:	ldr	x0, [sp, #40]
    1e38:	add	x0, x0, #0x8
    1e3c:	add	x0, x0, #0x8
    1e40:	ldr	x0, [x0]
    1e44:	str	x0, [sp, #24]
    1e48:	ldr	x0, [sp, #32]
    1e4c:	ldr	x1, [sp]
    1e50:	cmp	x1, x0
    1e54:	b.cs	1e64 <binary_search_unencoded_fdes+0x94>  // b.hs, b.nlast
    1e58:	ldr	x0, [sp, #48]
    1e5c:	str	x0, [sp, #64]
    1e60:	b	1e94 <binary_search_unencoded_fdes+0xc4>
    1e64:	ldr	x1, [sp, #32]
    1e68:	ldr	x0, [sp, #24]
    1e6c:	add	x0, x1, x0
    1e70:	ldr	x1, [sp]
    1e74:	cmp	x1, x0
    1e78:	b.cc	1e8c <binary_search_unencoded_fdes+0xbc>  // b.lo, b.ul, b.last
    1e7c:	ldr	x0, [sp, #48]
    1e80:	add	x0, x0, #0x1
    1e84:	str	x0, [sp, #72]
    1e88:	b	1e94 <binary_search_unencoded_fdes+0xc4>
    1e8c:	ldr	x0, [sp, #40]
    1e90:	b	1ea8 <binary_search_unencoded_fdes+0xd8>
    1e94:	ldr	x1, [sp, #72]
    1e98:	ldr	x0, [sp, #64]
    1e9c:	cmp	x1, x0
    1ea0:	b.cc	1dfc <binary_search_unencoded_fdes+0x2c>  // b.lo, b.ul, b.last
    1ea4:	mov	x0, #0x0                   	// #0
    1ea8:	add	sp, sp, #0x50
    1eac:	ret

0000000000001eb0 <binary_search_single_encoding_fdes>:
    1eb0:	stp	x29, x30, [sp, #-112]!
    1eb4:	mov	x29, sp
    1eb8:	str	x0, [sp, #24]
    1ebc:	str	x1, [sp, #16]
    1ec0:	ldr	x0, [sp, #24]
    1ec4:	ldr	x0, [x0, #24]
    1ec8:	str	x0, [sp, #88]
    1ecc:	ldr	x0, [sp, #24]
    1ed0:	ldrh	w0, [x0, #32]
    1ed4:	ubfx	x0, x0, #3, #8
    1ed8:	and	w0, w0, #0xff
    1edc:	str	w0, [sp, #84]
    1ee0:	ldr	w0, [sp, #84]
    1ee4:	and	w0, w0, #0xff
    1ee8:	ldr	x1, [sp, #24]
    1eec:	bl	994 <base_from_object>
    1ef0:	str	x0, [sp, #72]
    1ef4:	str	xzr, [sp, #104]
    1ef8:	ldr	x0, [sp, #88]
    1efc:	ldr	x0, [x0, #8]
    1f00:	str	x0, [sp, #96]
    1f04:	b	1fd0 <binary_search_single_encoding_fdes+0x120>
    1f08:	ldr	x1, [sp, #104]
    1f0c:	ldr	x0, [sp, #96]
    1f10:	add	x0, x1, x0
    1f14:	lsr	x0, x0, #1
    1f18:	str	x0, [sp, #64]
    1f1c:	ldr	x0, [sp, #88]
    1f20:	ldr	x1, [sp, #64]
    1f24:	add	x1, x1, #0x2
    1f28:	ldr	x0, [x0, x1, lsl #3]
    1f2c:	str	x0, [sp, #56]
    1f30:	ldr	w0, [sp, #84]
    1f34:	and	w4, w0, #0xff
    1f38:	ldr	x0, [sp, #56]
    1f3c:	add	x0, x0, #0x8
    1f40:	add	x1, sp, #0x28
    1f44:	mov	x3, x1
    1f48:	mov	x2, x0
    1f4c:	ldr	x1, [sp, #72]
    1f50:	mov	w0, w4
    1f54:	bl	1a8 <read_encoded_value_with_base>
    1f58:	str	x0, [sp, #48]
    1f5c:	ldr	w0, [sp, #84]
    1f60:	and	w0, w0, #0xff
    1f64:	and	w0, w0, #0xf
    1f68:	and	w4, w0, #0xff
    1f6c:	add	x0, sp, #0x20
    1f70:	mov	x3, x0
    1f74:	ldr	x2, [sp, #48]
    1f78:	mov	x1, #0x0                   	// #0
    1f7c:	mov	w0, w4
    1f80:	bl	1a8 <read_encoded_value_with_base>
    1f84:	ldr	x1, [sp, #16]
    1f88:	ldr	x0, [sp, #40]
    1f8c:	cmp	x1, x0
    1f90:	b.cs	1fa0 <binary_search_single_encoding_fdes+0xf0>  // b.hs, b.nlast
    1f94:	ldr	x0, [sp, #64]
    1f98:	str	x0, [sp, #96]
    1f9c:	b	1fd0 <binary_search_single_encoding_fdes+0x120>
    1fa0:	ldr	x1, [sp, #40]
    1fa4:	ldr	x0, [sp, #32]
    1fa8:	add	x1, x1, x0
    1fac:	ldr	x0, [sp, #16]
    1fb0:	cmp	x1, x0
    1fb4:	b.hi	1fc8 <binary_search_single_encoding_fdes+0x118>  // b.pmore
    1fb8:	ldr	x0, [sp, #64]
    1fbc:	add	x0, x0, #0x1
    1fc0:	str	x0, [sp, #104]
    1fc4:	b	1fd0 <binary_search_single_encoding_fdes+0x120>
    1fc8:	ldr	x0, [sp, #56]
    1fcc:	b	1fe4 <binary_search_single_encoding_fdes+0x134>
    1fd0:	ldr	x1, [sp, #104]
    1fd4:	ldr	x0, [sp, #96]
    1fd8:	cmp	x1, x0
    1fdc:	b.cc	1f08 <binary_search_single_encoding_fdes+0x58>  // b.lo, b.ul, b.last
    1fe0:	mov	x0, #0x0                   	// #0
    1fe4:	ldp	x29, x30, [sp], #112
    1fe8:	ret

0000000000001fec <binary_search_mixed_encoding_fdes>:
    1fec:	stp	x29, x30, [sp, #-128]!
    1ff0:	mov	x29, sp
    1ff4:	str	x19, [sp, #16]
    1ff8:	str	x0, [sp, #40]
    1ffc:	str	x1, [sp, #32]
    2000:	ldr	x0, [sp, #40]
    2004:	ldr	x0, [x0, #24]
    2008:	str	x0, [sp, #104]
    200c:	str	xzr, [sp, #120]
    2010:	ldr	x0, [sp, #104]
    2014:	ldr	x0, [x0, #8]
    2018:	str	x0, [sp, #112]
    201c:	b	2108 <binary_search_mixed_encoding_fdes+0x11c>
    2020:	ldr	x1, [sp, #120]
    2024:	ldr	x0, [sp, #112]
    2028:	add	x0, x1, x0
    202c:	lsr	x0, x0, #1
    2030:	str	x0, [sp, #96]
    2034:	ldr	x0, [sp, #104]
    2038:	ldr	x1, [sp, #96]
    203c:	add	x1, x1, #0x2
    2040:	ldr	x0, [x0, x1, lsl #3]
    2044:	str	x0, [sp, #88]
    2048:	ldr	x0, [sp, #88]
    204c:	bl	bec <get_fde_encoding>
    2050:	str	w0, [sp, #84]
    2054:	ldr	w0, [sp, #84]
    2058:	and	w19, w0, #0xff
    205c:	ldr	w0, [sp, #84]
    2060:	and	w0, w0, #0xff
    2064:	ldr	x1, [sp, #40]
    2068:	bl	994 <base_from_object>
    206c:	mov	x4, x0
    2070:	ldr	x0, [sp, #88]
    2074:	add	x0, x0, #0x8
    2078:	add	x1, sp, #0x40
    207c:	mov	x3, x1
    2080:	mov	x2, x0
    2084:	mov	x1, x4
    2088:	mov	w0, w19
    208c:	bl	1a8 <read_encoded_value_with_base>
    2090:	str	x0, [sp, #72]
    2094:	ldr	w0, [sp, #84]
    2098:	and	w0, w0, #0xff
    209c:	and	w0, w0, #0xf
    20a0:	and	w4, w0, #0xff
    20a4:	add	x0, sp, #0x38
    20a8:	mov	x3, x0
    20ac:	ldr	x2, [sp, #72]
    20b0:	mov	x1, #0x0                   	// #0
    20b4:	mov	w0, w4
    20b8:	bl	1a8 <read_encoded_value_with_base>
    20bc:	ldr	x1, [sp, #32]
    20c0:	ldr	x0, [sp, #64]
    20c4:	cmp	x1, x0
    20c8:	b.cs	20d8 <binary_search_mixed_encoding_fdes+0xec>  // b.hs, b.nlast
    20cc:	ldr	x0, [sp, #96]
    20d0:	str	x0, [sp, #112]
    20d4:	b	2108 <binary_search_mixed_encoding_fdes+0x11c>
    20d8:	ldr	x1, [sp, #64]
    20dc:	ldr	x0, [sp, #56]
    20e0:	add	x1, x1, x0
    20e4:	ldr	x0, [sp, #32]
    20e8:	cmp	x1, x0
    20ec:	b.hi	2100 <binary_search_mixed_encoding_fdes+0x114>  // b.pmore
    20f0:	ldr	x0, [sp, #96]
    20f4:	add	x0, x0, #0x1
    20f8:	str	x0, [sp, #120]
    20fc:	b	2108 <binary_search_mixed_encoding_fdes+0x11c>
    2100:	ldr	x0, [sp, #88]
    2104:	b	211c <binary_search_mixed_encoding_fdes+0x130>
    2108:	ldr	x1, [sp, #120]
    210c:	ldr	x0, [sp, #112]
    2110:	cmp	x1, x0
    2114:	b.cc	2020 <binary_search_mixed_encoding_fdes+0x34>  // b.lo, b.ul, b.last
    2118:	mov	x0, #0x0                   	// #0
    211c:	ldr	x19, [sp, #16]
    2120:	ldp	x29, x30, [sp], #128
    2124:	ret

0000000000002128 <search_object>:
    2128:	stp	x29, x30, [sp, #-48]!
    212c:	mov	x29, sp
    2130:	str	x0, [sp, #24]
    2134:	str	x1, [sp, #16]
    2138:	ldr	x0, [sp, #24]
    213c:	ldrb	w0, [x0, #32]
    2140:	and	w0, w0, #0x1
    2144:	and	w0, w0, #0xff
    2148:	cmp	w0, #0x0
    214c:	b.ne	2174 <search_object+0x4c>  // b.any
    2150:	ldr	x0, [sp, #24]
    2154:	bl	19a4 <init_object>
    2158:	ldr	x0, [sp, #24]
    215c:	ldr	x0, [x0]
    2160:	ldr	x1, [sp, #16]
    2164:	cmp	x1, x0
    2168:	b.cs	2174 <search_object+0x4c>  // b.hs, b.nlast
    216c:	mov	x0, #0x0                   	// #0
    2170:	b	2280 <search_object+0x158>
    2174:	ldr	x0, [sp, #24]
    2178:	ldrb	w0, [x0, #32]
    217c:	and	w0, w0, #0x1
    2180:	and	w0, w0, #0xff
    2184:	cmp	w0, #0x0
    2188:	b.eq	21ec <search_object+0xc4>  // b.none
    218c:	ldr	x0, [sp, #24]
    2190:	ldrb	w0, [x0, #32]
    2194:	and	w0, w0, #0x4
    2198:	and	w0, w0, #0xff
    219c:	cmp	w0, #0x0
    21a0:	b.eq	21b4 <search_object+0x8c>  // b.none
    21a4:	ldr	x1, [sp, #16]
    21a8:	ldr	x0, [sp, #24]
    21ac:	bl	1fec <binary_search_mixed_encoding_fdes>
    21b0:	b	2280 <search_object+0x158>
    21b4:	ldr	x0, [sp, #24]
    21b8:	ldrh	w0, [x0, #32]
    21bc:	and	w0, w0, #0x7f8
    21c0:	and	w0, w0, #0xffff
    21c4:	cmp	w0, #0x0
    21c8:	b.ne	21dc <search_object+0xb4>  // b.any
    21cc:	ldr	x1, [sp, #16]
    21d0:	ldr	x0, [sp, #24]
    21d4:	bl	1dd0 <binary_search_unencoded_fdes>
    21d8:	b	2280 <search_object+0x158>
    21dc:	ldr	x1, [sp, #16]
    21e0:	ldr	x0, [sp, #24]
    21e4:	bl	1eb0 <binary_search_single_encoding_fdes>
    21e8:	b	2280 <search_object+0x158>
    21ec:	ldr	x0, [sp, #24]
    21f0:	ldrb	w0, [x0, #32]
    21f4:	and	w0, w0, #0x2
    21f8:	and	w0, w0, #0xff
    21fc:	cmp	w0, #0x0
    2200:	b.eq	2268 <search_object+0x140>  // b.none
    2204:	ldr	x0, [sp, #24]
    2208:	ldr	x0, [x0, #24]
    220c:	str	x0, [sp, #40]
    2210:	b	2250 <search_object+0x128>
    2214:	ldr	x0, [sp, #40]
    2218:	ldr	x0, [x0]
    221c:	ldr	x2, [sp, #16]
    2220:	mov	x1, x0
    2224:	ldr	x0, [sp, #24]
    2228:	bl	1bd4 <linear_search_fdes>
    222c:	str	x0, [sp, #32]
    2230:	ldr	x0, [sp, #32]
    2234:	cmp	x0, #0x0
    2238:	b.eq	2244 <search_object+0x11c>  // b.none
    223c:	ldr	x0, [sp, #32]
    2240:	b	2280 <search_object+0x158>
    2244:	ldr	x0, [sp, #40]
    2248:	add	x0, x0, #0x8
    224c:	str	x0, [sp, #40]
    2250:	ldr	x0, [sp, #40]
    2254:	ldr	x0, [x0]
    2258:	cmp	x0, #0x0
    225c:	b.ne	2214 <search_object+0xec>  // b.any
    2260:	mov	x0, #0x0                   	// #0
    2264:	b	2280 <search_object+0x158>
    2268:	ldr	x0, [sp, #24]
    226c:	ldr	x0, [x0, #24]
    2270:	ldr	x2, [sp, #16]
    2274:	mov	x1, x0
    2278:	ldr	x0, [sp, #24]
    227c:	bl	1bd4 <linear_search_fdes>
    2280:	ldp	x29, x30, [sp], #48
    2284:	ret

0000000000002288 <_Unwind_Find_registered_FDE>:
    2288:	stp	x29, x30, [sp, #-96]!
    228c:	mov	x29, sp
    2290:	str	x19, [sp, #16]
    2294:	str	x0, [sp, #40]
    2298:	str	x1, [sp, #32]
    229c:	str	xzr, [sp, #80]
    22a0:	adrp	x0, 0 <size_of_encoded_value>
    22a4:	add	x0, x0, #0x0
    22a8:	ldr	w0, [x0]
    22ac:	cmp	w0, #0x0
    22b0:	cset	w0, eq  // eq = none
    22b4:	and	w0, w0, #0xff
    22b8:	and	x0, x0, #0xff
    22bc:	cmp	x0, #0x0
    22c0:	b.eq	22cc <_Unwind_Find_registered_FDE+0x44>  // b.none
    22c4:	mov	x0, #0x0                   	// #0
    22c8:	b	24c8 <_Unwind_Find_registered_FDE+0x240>
    22cc:	adrp	x0, 0 <size_of_encoded_value>
    22d0:	add	x0, x0, #0x0
    22d4:	bl	4a8 <__gthread_mutex_lock>
    22d8:	adrp	x0, 0 <size_of_encoded_value>
    22dc:	add	x0, x0, #0x0
    22e0:	ldr	x0, [x0]
    22e4:	str	x0, [sp, #88]
    22e8:	b	232c <_Unwind_Find_registered_FDE+0xa4>
    22ec:	ldr	x0, [sp, #88]
    22f0:	ldr	x0, [x0]
    22f4:	ldr	x1, [sp, #40]
    22f8:	cmp	x1, x0
    22fc:	b.cc	2320 <_Unwind_Find_registered_FDE+0x98>  // b.lo, b.ul, b.last
    2300:	ldr	x1, [sp, #40]
    2304:	ldr	x0, [sp, #88]
    2308:	bl	2128 <search_object>
    230c:	str	x0, [sp, #80]
    2310:	ldr	x0, [sp, #80]
    2314:	cmp	x0, #0x0
    2318:	b.eq	233c <_Unwind_Find_registered_FDE+0xb4>  // b.none
    231c:	b	2408 <_Unwind_Find_registered_FDE+0x180>
    2320:	ldr	x0, [sp, #88]
    2324:	ldr	x0, [x0, #40]
    2328:	str	x0, [sp, #88]
    232c:	ldr	x0, [sp, #88]
    2330:	cmp	x0, #0x0
    2334:	b.ne	22ec <_Unwind_Find_registered_FDE+0x64>  // b.any
    2338:	b	23e4 <_Unwind_Find_registered_FDE+0x15c>
    233c:	nop
    2340:	b	23e4 <_Unwind_Find_registered_FDE+0x15c>
    2344:	ldr	x0, [sp, #88]
    2348:	ldr	x1, [x0, #40]
    234c:	adrp	x0, 0 <size_of_encoded_value>
    2350:	add	x0, x0, #0x0
    2354:	str	x1, [x0]
    2358:	ldr	x1, [sp, #40]
    235c:	ldr	x0, [sp, #88]
    2360:	bl	2128 <search_object>
    2364:	str	x0, [sp, #80]
    2368:	adrp	x0, 0 <size_of_encoded_value>
    236c:	add	x0, x0, #0x0
    2370:	str	x0, [sp, #72]
    2374:	b	23a4 <_Unwind_Find_registered_FDE+0x11c>
    2378:	ldr	x0, [sp, #72]
    237c:	ldr	x0, [x0]
    2380:	ldr	x1, [x0]
    2384:	ldr	x0, [sp, #88]
    2388:	ldr	x0, [x0]
    238c:	cmp	x1, x0
    2390:	b.cc	23b8 <_Unwind_Find_registered_FDE+0x130>  // b.lo, b.ul, b.last
    2394:	ldr	x0, [sp, #72]
    2398:	ldr	x0, [x0]
    239c:	add	x0, x0, #0x28
    23a0:	str	x0, [sp, #72]
    23a4:	ldr	x0, [sp, #72]
    23a8:	ldr	x0, [x0]
    23ac:	cmp	x0, #0x0
    23b0:	b.ne	2378 <_Unwind_Find_registered_FDE+0xf0>  // b.any
    23b4:	b	23bc <_Unwind_Find_registered_FDE+0x134>
    23b8:	nop
    23bc:	ldr	x0, [sp, #72]
    23c0:	ldr	x1, [x0]
    23c4:	ldr	x0, [sp, #88]
    23c8:	str	x1, [x0, #40]
    23cc:	ldr	x0, [sp, #72]
    23d0:	ldr	x1, [sp, #88]
    23d4:	str	x1, [x0]
    23d8:	ldr	x0, [sp, #80]
    23dc:	cmp	x0, #0x0
    23e0:	b.ne	2404 <_Unwind_Find_registered_FDE+0x17c>  // b.any
    23e4:	adrp	x0, 0 <size_of_encoded_value>
    23e8:	add	x0, x0, #0x0
    23ec:	ldr	x0, [x0]
    23f0:	str	x0, [sp, #88]
    23f4:	ldr	x0, [sp, #88]
    23f8:	cmp	x0, #0x0
    23fc:	b.ne	2344 <_Unwind_Find_registered_FDE+0xbc>  // b.any
    2400:	b	2408 <_Unwind_Find_registered_FDE+0x180>
    2404:	nop
    2408:	adrp	x0, 0 <size_of_encoded_value>
    240c:	add	x0, x0, #0x0
    2410:	bl	4d8 <__gthread_mutex_unlock>
    2414:	ldr	x0, [sp, #80]
    2418:	cmp	x0, #0x0
    241c:	b.eq	24c4 <_Unwind_Find_registered_FDE+0x23c>  // b.none
    2420:	ldr	x0, [sp, #88]
    2424:	ldr	x1, [x0, #8]
    2428:	ldr	x0, [sp, #32]
    242c:	str	x1, [x0]
    2430:	ldr	x0, [sp, #88]
    2434:	ldr	x1, [x0, #16]
    2438:	ldr	x0, [sp, #32]
    243c:	str	x1, [x0, #8]
    2440:	ldr	x0, [sp, #88]
    2444:	ldrh	w0, [x0, #32]
    2448:	ubfx	x0, x0, #3, #8
    244c:	and	w0, w0, #0xff
    2450:	str	w0, [sp, #68]
    2454:	ldr	x0, [sp, #88]
    2458:	ldrb	w0, [x0, #32]
    245c:	and	w0, w0, #0x4
    2460:	and	w0, w0, #0xff
    2464:	cmp	w0, #0x0
    2468:	b.eq	2478 <_Unwind_Find_registered_FDE+0x1f0>  // b.none
    246c:	ldr	x0, [sp, #80]
    2470:	bl	bec <get_fde_encoding>
    2474:	str	w0, [sp, #68]
    2478:	ldr	w0, [sp, #68]
    247c:	and	w19, w0, #0xff
    2480:	ldr	w0, [sp, #68]
    2484:	and	w0, w0, #0xff
    2488:	ldr	x1, [sp, #88]
    248c:	bl	994 <base_from_object>
    2490:	mov	x4, x0
    2494:	ldr	x0, [sp, #80]
    2498:	add	x0, x0, #0x8
    249c:	add	x1, sp, #0x38
    24a0:	mov	x3, x1
    24a4:	mov	x2, x0
    24a8:	mov	x1, x4
    24ac:	mov	w0, w19
    24b0:	bl	1a8 <read_encoded_value_with_base>
    24b4:	ldr	x0, [sp, #56]
    24b8:	mov	x1, x0
    24bc:	ldr	x0, [sp, #32]
    24c0:	str	x1, [x0, #16]
    24c4:	ldr	x0, [sp, #80]
    24c8:	ldr	x19, [sp, #16]
    24cc:	ldp	x29, x30, [sp], #96
    24d0:	ret

00000000000024d4 <base_from_cb_data>:
    24d4:	stp	x29, x30, [sp, #-32]!
    24d8:	mov	x29, sp
    24dc:	strb	w0, [sp, #31]
    24e0:	str	x1, [sp, #16]
    24e4:	ldrb	w0, [sp, #31]
    24e8:	cmp	w0, #0xff
    24ec:	b.ne	24f8 <base_from_cb_data+0x24>  // b.any
    24f0:	mov	x0, #0x0                   	// #0
    24f4:	b	2564 <base_from_cb_data+0x90>
    24f8:	ldrb	w0, [sp, #31]
    24fc:	and	w0, w0, #0x70
    2500:	cmp	w0, #0x50
    2504:	b.eq	2540 <base_from_cb_data+0x6c>  // b.none
    2508:	cmp	w0, #0x50
    250c:	b.gt	2560 <base_from_cb_data+0x8c>
    2510:	cmp	w0, #0x30
    2514:	b.eq	2554 <base_from_cb_data+0x80>  // b.none
    2518:	cmp	w0, #0x30
    251c:	b.gt	2560 <base_from_cb_data+0x8c>
    2520:	cmp	w0, #0x20
    2524:	b.eq	2548 <base_from_cb_data+0x74>  // b.none
    2528:	cmp	w0, #0x20
    252c:	b.gt	2560 <base_from_cb_data+0x8c>
    2530:	cmp	w0, #0x0
    2534:	b.eq	2540 <base_from_cb_data+0x6c>  // b.none
    2538:	cmp	w0, #0x10
    253c:	b.ne	2560 <base_from_cb_data+0x8c>  // b.any
    2540:	mov	x0, #0x0                   	// #0
    2544:	b	2564 <base_from_cb_data+0x90>
    2548:	ldr	x0, [sp, #16]
    254c:	ldr	x0, [x0, #8]
    2550:	b	2564 <base_from_cb_data+0x90>
    2554:	ldr	x0, [sp, #16]
    2558:	ldr	x0, [x0, #16]
    255c:	b	2564 <base_from_cb_data+0x90>
    2560:	bl	0 <abort>
    2564:	ldp	x29, x30, [sp], #32
    2568:	ret

000000000000256c <_Unwind_IteratePhdrCallback>:
    256c:	stp	x29, x30, [sp, #-352]!
    2570:	mov	x29, sp
    2574:	str	x19, [sp, #16]
    2578:	str	x0, [sp, #56]
    257c:	str	x1, [sp, #48]
    2580:	str	x2, [sp, #40]
    2584:	ldr	x0, [sp, #40]
    2588:	str	x0, [sp, #224]
    258c:	str	xzr, [sp, #296]
    2590:	str	xzr, [sp, #288]
    2594:	str	xzr, [sp, #312]
    2598:	ldr	x0, [sp, #56]
    259c:	ldr	x0, [x0, #16]
    25a0:	str	x0, [sp, #344]
    25a4:	ldr	x0, [sp, #56]
    25a8:	ldr	x0, [x0]
    25ac:	str	x0, [sp, #304]
    25b0:	str	xzr, [sp, #336]
    25b4:	str	xzr, [sp, #328]
    25b8:	str	xzr, [sp, #280]
    25bc:	str	xzr, [sp, #272]
    25c0:	ldr	x0, [sp, #224]
    25c4:	ldr	w0, [x0, #40]
    25c8:	cmp	w0, #0x0
    25cc:	b.eq	2858 <_Unwind_IteratePhdrCallback+0x2ec>  // b.none
    25d0:	ldr	x0, [sp, #48]
    25d4:	cmp	x0, #0x2f
    25d8:	b.ls	2858 <_Unwind_IteratePhdrCallback+0x2ec>  // b.plast
    25dc:	ldr	x0, [sp, #56]
    25e0:	str	x0, [sp, #216]
    25e4:	ldr	x0, [sp, #216]
    25e8:	ldr	x1, [x0, #32]
    25ec:	adrp	x0, 0 <size_of_encoded_value>
    25f0:	add	x0, x0, #0x0
    25f4:	ldr	x0, [x0]
    25f8:	cmp	x1, x0
    25fc:	b.ne	2734 <_Unwind_IteratePhdrCallback+0x1c8>  // b.any
    2600:	ldr	x0, [sp, #216]
    2604:	ldr	x1, [x0, #40]
    2608:	adrp	x0, 0 <size_of_encoded_value>
    260c:	add	x0, x0, #0x0
    2610:	ldr	x0, [x0]
    2614:	cmp	x1, x0
    2618:	b.ne	2734 <_Unwind_IteratePhdrCallback+0x1c8>  // b.any
    261c:	adrp	x0, 0 <size_of_encoded_value>
    2620:	add	x0, x0, #0x0
    2624:	ldr	x0, [x0]
    2628:	str	x0, [sp, #264]
    262c:	b	271c <_Unwind_IteratePhdrCallback+0x1b0>
    2630:	ldr	x0, [sp, #224]
    2634:	ldr	x1, [x0]
    2638:	ldr	x0, [sp, #264]
    263c:	ldr	x0, [x0]
    2640:	cmp	x1, x0
    2644:	b.cc	26d4 <_Unwind_IteratePhdrCallback+0x168>  // b.lo, b.ul, b.last
    2648:	ldr	x0, [sp, #224]
    264c:	ldr	x1, [x0]
    2650:	ldr	x0, [sp, #264]
    2654:	ldr	x0, [x0, #8]
    2658:	cmp	x1, x0
    265c:	b.cs	26d4 <_Unwind_IteratePhdrCallback+0x168>  // b.hs, b.nlast
    2660:	ldr	x0, [sp, #264]
    2664:	ldr	x0, [x0, #16]
    2668:	str	x0, [sp, #304]
    266c:	ldr	x0, [sp, #264]
    2670:	ldr	x0, [x0, #24]
    2674:	str	x0, [sp, #336]
    2678:	ldr	x0, [sp, #264]
    267c:	ldr	x0, [x0, #32]
    2680:	str	x0, [sp, #328]
    2684:	adrp	x0, 0 <size_of_encoded_value>
    2688:	add	x0, x0, #0x0
    268c:	ldr	x0, [x0]
    2690:	ldr	x1, [sp, #264]
    2694:	cmp	x1, x0
    2698:	b.eq	2a34 <_Unwind_IteratePhdrCallback+0x4c8>  // b.none
    269c:	ldr	x0, [sp, #264]
    26a0:	ldr	x1, [x0, #40]
    26a4:	ldr	x0, [sp, #280]
    26a8:	str	x1, [x0, #40]
    26ac:	adrp	x0, 0 <size_of_encoded_value>
    26b0:	add	x0, x0, #0x0
    26b4:	ldr	x1, [x0]
    26b8:	ldr	x0, [sp, #264]
    26bc:	str	x1, [x0, #40]
    26c0:	adrp	x0, 0 <size_of_encoded_value>
    26c4:	add	x0, x0, #0x0
    26c8:	ldr	x1, [sp, #264]
    26cc:	str	x1, [x0]
    26d0:	b	2a34 <_Unwind_IteratePhdrCallback+0x4c8>
    26d4:	ldr	x0, [sp, #264]
    26d8:	str	x0, [sp, #272]
    26dc:	ldr	x0, [sp, #264]
    26e0:	ldr	x1, [x0]
    26e4:	ldr	x0, [sp, #264]
    26e8:	ldr	x0, [x0, #8]
    26ec:	orr	x0, x1, x0
    26f0:	cmp	x0, #0x0
    26f4:	b.eq	272c <_Unwind_IteratePhdrCallback+0x1c0>  // b.none
    26f8:	ldr	x0, [sp, #264]
    26fc:	ldr	x0, [x0, #40]
    2700:	cmp	x0, #0x0
    2704:	b.eq	2710 <_Unwind_IteratePhdrCallback+0x1a4>  // b.none
    2708:	ldr	x0, [sp, #264]
    270c:	str	x0, [sp, #280]
    2710:	ldr	x0, [sp, #264]
    2714:	ldr	x0, [x0, #40]
    2718:	str	x0, [sp, #264]
    271c:	ldr	x0, [sp, #264]
    2720:	cmp	x0, #0x0
    2724:	b.ne	2630 <_Unwind_IteratePhdrCallback+0xc4>  // b.any
    2728:	b	2858 <_Unwind_IteratePhdrCallback+0x2ec>
    272c:	nop
    2730:	b	2858 <_Unwind_IteratePhdrCallback+0x2ec>
    2734:	ldr	x0, [sp, #216]
    2738:	ldr	x1, [x0, #32]
    273c:	adrp	x0, 0 <size_of_encoded_value>
    2740:	add	x0, x0, #0x0
    2744:	str	x1, [x0]
    2748:	ldr	x0, [sp, #216]
    274c:	ldr	x1, [x0, #40]
    2750:	adrp	x0, 0 <size_of_encoded_value>
    2754:	add	x0, x0, #0x0
    2758:	str	x1, [x0]
    275c:	str	wzr, [sp, #260]
    2760:	b	2804 <_Unwind_IteratePhdrCallback+0x298>
    2764:	adrp	x0, 0 <size_of_encoded_value>
    2768:	add	x2, x0, #0x0
    276c:	ldrsw	x1, [sp, #260]
    2770:	mov	x0, x1
    2774:	lsl	x0, x0, #1
    2778:	add	x0, x0, x1
    277c:	lsl	x0, x0, #4
    2780:	add	x0, x2, x0
    2784:	str	xzr, [x0]
    2788:	adrp	x0, 0 <size_of_encoded_value>
    278c:	add	x2, x0, #0x0
    2790:	ldrsw	x1, [sp, #260]
    2794:	mov	x0, x1
    2798:	lsl	x0, x0, #1
    279c:	add	x0, x0, x1
    27a0:	lsl	x0, x0, #4
    27a4:	add	x0, x2, x0
    27a8:	str	xzr, [x0, #8]
    27ac:	ldr	w0, [sp, #260]
    27b0:	add	w0, w0, #0x1
    27b4:	sxtw	x1, w0
    27b8:	mov	x0, x1
    27bc:	lsl	x0, x0, #1
    27c0:	add	x0, x0, x1
    27c4:	lsl	x0, x0, #4
    27c8:	adrp	x1, 0 <size_of_encoded_value>
    27cc:	add	x1, x1, #0x0
    27d0:	add	x2, x0, x1
    27d4:	adrp	x0, 0 <size_of_encoded_value>
    27d8:	add	x3, x0, #0x0
    27dc:	ldrsw	x1, [sp, #260]
    27e0:	mov	x0, x1
    27e4:	lsl	x0, x0, #1
    27e8:	add	x0, x0, x1
    27ec:	lsl	x0, x0, #4
    27f0:	add	x0, x3, x0
    27f4:	str	x2, [x0, #40]
    27f8:	ldr	w0, [sp, #260]
    27fc:	add	w0, w0, #0x1
    2800:	str	w0, [sp, #260]
    2804:	ldr	w0, [sp, #260]
    2808:	cmp	w0, #0x7
    280c:	b.le	2764 <_Unwind_IteratePhdrCallback+0x1f8>
    2810:	ldr	w0, [sp, #260]
    2814:	sub	w1, w0, #0x1
    2818:	adrp	x0, 0 <size_of_encoded_value>
    281c:	add	x2, x0, #0x0
    2820:	sxtw	x1, w1
    2824:	mov	x0, x1
    2828:	lsl	x0, x0, #1
    282c:	add	x0, x0, x1
    2830:	lsl	x0, x0, #4
    2834:	add	x0, x2, x0
    2838:	str	xzr, [x0, #40]
    283c:	adrp	x0, 0 <size_of_encoded_value>
    2840:	add	x0, x0, #0x0
    2844:	adrp	x1, 0 <size_of_encoded_value>
    2848:	add	x1, x1, #0x0
    284c:	str	x1, [x0]
    2850:	ldr	x0, [sp, #224]
    2854:	str	wzr, [x0, #40]
    2858:	ldr	x0, [sp, #48]
    285c:	cmp	x0, #0x19
    2860:	b.hi	286c <_Unwind_IteratePhdrCallback+0x300>  // b.pmore
    2864:	mov	w0, #0xffffffff            	// #-1
    2868:	b	2e3c <_Unwind_IteratePhdrCallback+0x8d0>
    286c:	ldr	x0, [sp, #56]
    2870:	ldrh	w0, [x0, #24]
    2874:	and	x0, x0, #0xffff
    2878:	str	x0, [sp, #320]
    287c:	b	2948 <_Unwind_IteratePhdrCallback+0x3dc>
    2880:	ldr	x0, [sp, #344]
    2884:	ldr	w0, [x0]
    2888:	cmp	w0, #0x1
    288c:	b.ne	2900 <_Unwind_IteratePhdrCallback+0x394>  // b.any
    2890:	ldr	x0, [sp, #344]
    2894:	ldr	x0, [x0, #16]
    2898:	ldr	x1, [sp, #304]
    289c:	add	x0, x1, x0
    28a0:	str	x0, [sp, #208]
    28a4:	ldr	x0, [sp, #224]
    28a8:	ldr	x0, [x0]
    28ac:	ldr	x1, [sp, #208]
    28b0:	cmp	x1, x0
    28b4:	b.hi	293c <_Unwind_IteratePhdrCallback+0x3d0>  // b.pmore
    28b8:	ldr	x0, [sp, #224]
    28bc:	ldr	x1, [x0]
    28c0:	ldr	x0, [sp, #344]
    28c4:	ldr	x2, [x0, #40]
    28c8:	ldr	x0, [sp, #208]
    28cc:	add	x0, x2, x0
    28d0:	cmp	x1, x0
    28d4:	b.cs	293c <_Unwind_IteratePhdrCallback+0x3d0>  // b.hs, b.nlast
    28d8:	mov	x0, #0x1                   	// #1
    28dc:	str	x0, [sp, #312]
    28e0:	ldr	x0, [sp, #208]
    28e4:	str	x0, [sp, #296]
    28e8:	ldr	x0, [sp, #344]
    28ec:	ldr	x0, [x0, #40]
    28f0:	ldr	x1, [sp, #208]
    28f4:	add	x0, x1, x0
    28f8:	str	x0, [sp, #288]
    28fc:	b	293c <_Unwind_IteratePhdrCallback+0x3d0>
    2900:	ldr	x0, [sp, #344]
    2904:	ldr	w1, [x0]
    2908:	mov	w0, #0xe550                	// #58704
    290c:	movk	w0, #0x6474, lsl #16
    2910:	cmp	w1, w0
    2914:	b.ne	2924 <_Unwind_IteratePhdrCallback+0x3b8>  // b.any
    2918:	ldr	x0, [sp, #344]
    291c:	str	x0, [sp, #336]
    2920:	b	293c <_Unwind_IteratePhdrCallback+0x3d0>
    2924:	ldr	x0, [sp, #344]
    2928:	ldr	w0, [x0]
    292c:	cmp	w0, #0x2
    2930:	b.ne	293c <_Unwind_IteratePhdrCallback+0x3d0>  // b.any
    2934:	ldr	x0, [sp, #344]
    2938:	str	x0, [sp, #328]
    293c:	ldr	x0, [sp, #344]
    2940:	add	x0, x0, #0x38
    2944:	str	x0, [sp, #344]
    2948:	ldr	x0, [sp, #320]
    294c:	sub	x0, x0, #0x1
    2950:	str	x0, [sp, #320]
    2954:	ldr	x0, [sp, #320]
    2958:	cmp	x0, #0x0
    295c:	b.ge	2880 <_Unwind_IteratePhdrCallback+0x314>  // b.tcont
    2960:	ldr	x0, [sp, #312]
    2964:	cmp	x0, #0x0
    2968:	b.ne	2974 <_Unwind_IteratePhdrCallback+0x408>  // b.any
    296c:	mov	w0, #0x0                   	// #0
    2970:	b	2e3c <_Unwind_IteratePhdrCallback+0x8d0>
    2974:	ldr	x0, [sp, #48]
    2978:	cmp	x0, #0x2f
    297c:	b.ls	2a3c <_Unwind_IteratePhdrCallback+0x4d0>  // b.plast
    2980:	ldr	x0, [sp, #272]
    2984:	cmp	x0, #0x0
    2988:	b.eq	29cc <_Unwind_IteratePhdrCallback+0x460>  // b.none
    298c:	ldr	x0, [sp, #280]
    2990:	cmp	x0, #0x0
    2994:	b.eq	29cc <_Unwind_IteratePhdrCallback+0x460>  // b.none
    2998:	ldr	x0, [sp, #272]
    299c:	ldr	x1, [x0, #40]
    29a0:	ldr	x0, [sp, #280]
    29a4:	str	x1, [x0, #40]
    29a8:	adrp	x0, 0 <size_of_encoded_value>
    29ac:	add	x0, x0, #0x0
    29b0:	ldr	x1, [x0]
    29b4:	ldr	x0, [sp, #272]
    29b8:	str	x1, [x0, #40]
    29bc:	adrp	x0, 0 <size_of_encoded_value>
    29c0:	add	x0, x0, #0x0
    29c4:	ldr	x1, [sp, #272]
    29c8:	str	x1, [x0]
    29cc:	adrp	x0, 0 <size_of_encoded_value>
    29d0:	add	x0, x0, #0x0
    29d4:	ldr	x0, [x0]
    29d8:	ldr	x1, [sp, #304]
    29dc:	str	x1, [x0, #16]
    29e0:	adrp	x0, 0 <size_of_encoded_value>
    29e4:	add	x0, x0, #0x0
    29e8:	ldr	x0, [x0]
    29ec:	ldr	x1, [sp, #336]
    29f0:	str	x1, [x0, #24]
    29f4:	adrp	x0, 0 <size_of_encoded_value>
    29f8:	add	x0, x0, #0x0
    29fc:	ldr	x0, [x0]
    2a00:	ldr	x1, [sp, #328]
    2a04:	str	x1, [x0, #32]
    2a08:	adrp	x0, 0 <size_of_encoded_value>
    2a0c:	add	x0, x0, #0x0
    2a10:	ldr	x0, [x0]
    2a14:	ldr	x1, [sp, #296]
    2a18:	str	x1, [x0]
    2a1c:	adrp	x0, 0 <size_of_encoded_value>
    2a20:	add	x0, x0, #0x0
    2a24:	ldr	x0, [x0]
    2a28:	ldr	x1, [sp, #288]
    2a2c:	str	x1, [x0, #8]
    2a30:	b	2a40 <_Unwind_IteratePhdrCallback+0x4d4>
    2a34:	nop
    2a38:	b	2a40 <_Unwind_IteratePhdrCallback+0x4d4>
    2a3c:	nop
    2a40:	ldr	x0, [sp, #336]
    2a44:	cmp	x0, #0x0
    2a48:	b.ne	2a54 <_Unwind_IteratePhdrCallback+0x4e8>  // b.any
    2a4c:	mov	w0, #0x0                   	// #0
    2a50:	b	2e3c <_Unwind_IteratePhdrCallback+0x8d0>
    2a54:	ldr	x0, [sp, #336]
    2a58:	ldr	x1, [x0, #16]
    2a5c:	ldr	x0, [sp, #304]
    2a60:	add	x0, x1, x0
    2a64:	str	x0, [sp, #200]
    2a68:	ldr	x0, [sp, #200]
    2a6c:	ldrb	w0, [x0]
    2a70:	cmp	w0, #0x1
    2a74:	b.eq	2a80 <_Unwind_IteratePhdrCallback+0x514>  // b.none
    2a78:	mov	w0, #0x1                   	// #1
    2a7c:	b	2e3c <_Unwind_IteratePhdrCallback+0x8d0>
    2a80:	ldr	x0, [sp, #200]
    2a84:	ldrb	w19, [x0, #1]
    2a88:	ldr	x0, [sp, #200]
    2a8c:	ldrb	w0, [x0, #1]
    2a90:	ldr	x1, [sp, #224]
    2a94:	bl	24d4 <base_from_cb_data>
    2a98:	mov	x4, x0
    2a9c:	ldr	x0, [sp, #200]
    2aa0:	add	x0, x0, #0x4
    2aa4:	add	x1, sp, #0x90
    2aa8:	mov	x3, x1
    2aac:	mov	x2, x0
    2ab0:	mov	x1, x4
    2ab4:	mov	w0, w19
    2ab8:	bl	1a8 <read_encoded_value_with_base>
    2abc:	str	x0, [sp, #192]
    2ac0:	ldr	x0, [sp, #200]
    2ac4:	ldrb	w0, [x0, #2]
    2ac8:	cmp	w0, #0xff
    2acc:	b.eq	2d6c <_Unwind_IteratePhdrCallback+0x800>  // b.none
    2ad0:	ldr	x0, [sp, #200]
    2ad4:	ldrb	w0, [x0, #3]
    2ad8:	cmp	w0, #0x3b
    2adc:	b.ne	2d6c <_Unwind_IteratePhdrCallback+0x800>  // b.any
    2ae0:	ldr	x0, [sp, #200]
    2ae4:	ldrb	w19, [x0, #2]
    2ae8:	ldr	x0, [sp, #200]
    2aec:	ldrb	w0, [x0, #2]
    2af0:	ldr	x1, [sp, #224]
    2af4:	bl	24d4 <base_from_cb_data>
    2af8:	mov	x1, x0
    2afc:	add	x0, sp, #0x58
    2b00:	mov	x3, x0
    2b04:	ldr	x2, [sp, #192]
    2b08:	mov	w0, w19
    2b0c:	bl	1a8 <read_encoded_value_with_base>
    2b10:	str	x0, [sp, #192]
    2b14:	ldr	x0, [sp, #88]
    2b18:	cmp	x0, #0x0
    2b1c:	b.ne	2b28 <_Unwind_IteratePhdrCallback+0x5bc>  // b.any
    2b20:	mov	w0, #0x1                   	// #1
    2b24:	b	2e3c <_Unwind_IteratePhdrCallback+0x8d0>
    2b28:	ldr	x0, [sp, #192]
    2b2c:	and	x0, x0, #0x3
    2b30:	cmp	x0, #0x0
    2b34:	b.ne	2d6c <_Unwind_IteratePhdrCallback+0x800>  // b.any
    2b38:	ldr	x0, [sp, #192]
    2b3c:	str	x0, [sp, #184]
    2b40:	ldr	x0, [sp, #200]
    2b44:	str	x0, [sp, #176]
    2b48:	ldr	x0, [sp, #88]
    2b4c:	sub	x0, x0, #0x1
    2b50:	str	x0, [sp, #232]
    2b54:	ldr	x0, [sp, #224]
    2b58:	ldr	x1, [x0]
    2b5c:	ldr	x0, [sp, #184]
    2b60:	ldr	w0, [x0]
    2b64:	sxtw	x2, w0
    2b68:	ldr	x0, [sp, #176]
    2b6c:	add	x0, x2, x0
    2b70:	cmp	x1, x0
    2b74:	b.cs	2b80 <_Unwind_IteratePhdrCallback+0x614>  // b.hs, b.nlast
    2b78:	mov	w0, #0x1                   	// #1
    2b7c:	b	2e3c <_Unwind_IteratePhdrCallback+0x8d0>
    2b80:	ldr	x0, [sp, #224]
    2b84:	ldr	x1, [x0]
    2b88:	ldr	x0, [sp, #232]
    2b8c:	lsl	x0, x0, #3
    2b90:	ldr	x2, [sp, #184]
    2b94:	add	x0, x2, x0
    2b98:	ldr	w0, [x0]
    2b9c:	sxtw	x2, w0
    2ba0:	ldr	x0, [sp, #176]
    2ba4:	add	x0, x2, x0
    2ba8:	cmp	x1, x0
    2bac:	b.cs	2c7c <_Unwind_IteratePhdrCallback+0x710>  // b.hs, b.nlast
    2bb0:	str	xzr, [sp, #248]
    2bb4:	ldr	x0, [sp, #232]
    2bb8:	str	x0, [sp, #240]
    2bbc:	b	2c50 <_Unwind_IteratePhdrCallback+0x6e4>
    2bc0:	ldr	x1, [sp, #248]
    2bc4:	ldr	x0, [sp, #240]
    2bc8:	add	x0, x1, x0
    2bcc:	lsr	x0, x0, #1
    2bd0:	str	x0, [sp, #232]
    2bd4:	ldr	x0, [sp, #224]
    2bd8:	ldr	x1, [x0]
    2bdc:	ldr	x0, [sp, #232]
    2be0:	lsl	x0, x0, #3
    2be4:	ldr	x2, [sp, #184]
    2be8:	add	x0, x2, x0
    2bec:	ldr	w0, [x0]
    2bf0:	sxtw	x2, w0
    2bf4:	ldr	x0, [sp, #176]
    2bf8:	add	x0, x2, x0
    2bfc:	cmp	x1, x0
    2c00:	b.cs	2c10 <_Unwind_IteratePhdrCallback+0x6a4>  // b.hs, b.nlast
    2c04:	ldr	x0, [sp, #232]
    2c08:	str	x0, [sp, #240]
    2c0c:	b	2c50 <_Unwind_IteratePhdrCallback+0x6e4>
    2c10:	ldr	x0, [sp, #224]
    2c14:	ldr	x1, [x0]
    2c18:	ldr	x0, [sp, #232]
    2c1c:	add	x0, x0, #0x1
    2c20:	lsl	x0, x0, #3
    2c24:	ldr	x2, [sp, #184]
    2c28:	add	x0, x2, x0
    2c2c:	ldr	w0, [x0]
    2c30:	sxtw	x2, w0
    2c34:	ldr	x0, [sp, #176]
    2c38:	add	x0, x2, x0
    2c3c:	cmp	x1, x0
    2c40:	b.cc	2c64 <_Unwind_IteratePhdrCallback+0x6f8>  // b.lo, b.ul, b.last
    2c44:	ldr	x0, [sp, #232]
    2c48:	add	x0, x0, #0x1
    2c4c:	str	x0, [sp, #248]
    2c50:	ldr	x1, [sp, #248]
    2c54:	ldr	x0, [sp, #240]
    2c58:	cmp	x1, x0
    2c5c:	b.cc	2bc0 <_Unwind_IteratePhdrCallback+0x654>  // b.lo, b.ul, b.last
    2c60:	b	2c68 <_Unwind_IteratePhdrCallback+0x6fc>
    2c64:	nop
    2c68:	ldr	x1, [sp, #248]
    2c6c:	ldr	x0, [sp, #240]
    2c70:	cmp	x1, x0
    2c74:	b.cc	2c7c <_Unwind_IteratePhdrCallback+0x710>  // b.lo, b.ul, b.last
    2c78:	bl	0 <abort>
    2c7c:	ldr	x0, [sp, #232]
    2c80:	lsl	x0, x0, #3
    2c84:	ldr	x1, [sp, #184]
    2c88:	add	x0, x1, x0
    2c8c:	ldr	w0, [x0, #4]
    2c90:	sxtw	x1, w0
    2c94:	ldr	x0, [sp, #176]
    2c98:	add	x0, x1, x0
    2c9c:	str	x0, [sp, #168]
    2ca0:	ldr	x0, [sp, #168]
    2ca4:	bl	bec <get_fde_encoding>
    2ca8:	str	w0, [sp, #164]
    2cac:	ldr	w0, [sp, #164]
    2cb0:	and	w0, w0, #0xff
    2cb4:	bl	0 <size_of_encoded_value>
    2cb8:	str	w0, [sp, #160]
    2cbc:	ldr	w0, [sp, #164]
    2cc0:	and	w0, w0, #0xff
    2cc4:	and	w0, w0, #0xf
    2cc8:	and	w4, w0, #0xff
    2ccc:	ldr	w0, [sp, #160]
    2cd0:	ldr	x1, [sp, #168]
    2cd4:	add	x0, x1, x0
    2cd8:	add	x0, x0, #0x8
    2cdc:	add	x1, sp, #0x50
    2ce0:	mov	x3, x1
    2ce4:	mov	x2, x0
    2ce8:	mov	x1, #0x0                   	// #0
    2cec:	mov	w0, w4
    2cf0:	bl	1a8 <read_encoded_value_with_base>
    2cf4:	ldr	x0, [sp, #224]
    2cf8:	ldr	x1, [x0]
    2cfc:	ldr	x0, [sp, #232]
    2d00:	lsl	x0, x0, #3
    2d04:	ldr	x2, [sp, #184]
    2d08:	add	x0, x2, x0
    2d0c:	ldr	w0, [x0]
    2d10:	sxtw	x2, w0
    2d14:	ldr	x0, [sp, #176]
    2d18:	add	x2, x2, x0
    2d1c:	ldr	x0, [sp, #80]
    2d20:	add	x0, x2, x0
    2d24:	cmp	x1, x0
    2d28:	b.cs	2d38 <_Unwind_IteratePhdrCallback+0x7cc>  // b.hs, b.nlast
    2d2c:	ldr	x0, [sp, #224]
    2d30:	ldr	x1, [sp, #168]
    2d34:	str	x1, [x0, #32]
    2d38:	ldr	x0, [sp, #232]
    2d3c:	lsl	x0, x0, #3
    2d40:	ldr	x1, [sp, #184]
    2d44:	add	x0, x1, x0
    2d48:	ldr	w0, [x0]
    2d4c:	sxtw	x1, w0
    2d50:	ldr	x0, [sp, #176]
    2d54:	add	x0, x1, x0
    2d58:	mov	x1, x0
    2d5c:	ldr	x0, [sp, #224]
    2d60:	str	x1, [x0, #24]
    2d64:	mov	w0, #0x1                   	// #1
    2d68:	b	2e3c <_Unwind_IteratePhdrCallback+0x8d0>
    2d6c:	str	xzr, [sp, #96]
    2d70:	ldr	x0, [sp, #224]
    2d74:	ldr	x0, [x0, #8]
    2d78:	str	x0, [sp, #104]
    2d7c:	ldr	x0, [sp, #224]
    2d80:	ldr	x0, [x0, #16]
    2d84:	str	x0, [sp, #112]
    2d88:	ldr	x0, [sp, #144]
    2d8c:	str	x0, [sp, #120]
    2d90:	str	xzr, [sp, #128]
    2d94:	ldrb	w0, [sp, #128]
    2d98:	orr	w0, w0, #0x4
    2d9c:	strb	w0, [sp, #128]
    2da0:	ldr	x0, [sp, #144]
    2da4:	mov	x1, x0
    2da8:	ldr	x0, [sp, #224]
    2dac:	ldr	x0, [x0]
    2db0:	mov	x2, x0
    2db4:	add	x0, sp, #0x60
    2db8:	bl	1bd4 <linear_search_fdes>
    2dbc:	mov	x1, x0
    2dc0:	ldr	x0, [sp, #224]
    2dc4:	str	x1, [x0, #32]
    2dc8:	ldr	x0, [sp, #224]
    2dcc:	ldr	x0, [x0, #32]
    2dd0:	cmp	x0, #0x0
    2dd4:	b.eq	2e38 <_Unwind_IteratePhdrCallback+0x8cc>  // b.none
    2dd8:	ldr	x0, [sp, #224]
    2ddc:	ldr	x0, [x0, #32]
    2de0:	bl	bec <get_fde_encoding>
    2de4:	str	w0, [sp, #156]
    2de8:	ldr	w0, [sp, #156]
    2dec:	and	w19, w0, #0xff
    2df0:	ldr	w0, [sp, #156]
    2df4:	and	w0, w0, #0xff
    2df8:	ldr	x1, [sp, #224]
    2dfc:	bl	24d4 <base_from_cb_data>
    2e00:	mov	x4, x0
    2e04:	ldr	x0, [sp, #224]
    2e08:	ldr	x0, [x0, #32]
    2e0c:	add	x0, x0, #0x8
    2e10:	add	x1, sp, #0x48
    2e14:	mov	x3, x1
    2e18:	mov	x2, x0
    2e1c:	mov	x1, x4
    2e20:	mov	w0, w19
    2e24:	bl	1a8 <read_encoded_value_with_base>
    2e28:	ldr	x0, [sp, #72]
    2e2c:	mov	x1, x0
    2e30:	ldr	x0, [sp, #224]
    2e34:	str	x1, [x0, #24]
    2e38:	mov	w0, #0x1                   	// #1
    2e3c:	ldr	x19, [sp, #16]
    2e40:	ldp	x29, x30, [sp], #352
    2e44:	ret

0000000000002e48 <_Unwind_Find_FDE>:
    2e48:	stp	x29, x30, [sp, #-96]!
    2e4c:	mov	x29, sp
    2e50:	str	x0, [sp, #24]
    2e54:	str	x1, [sp, #16]
    2e58:	ldr	x1, [sp, #16]
    2e5c:	ldr	x0, [sp, #24]
    2e60:	bl	2288 <_Unwind_Find_registered_FDE>
    2e64:	str	x0, [sp, #88]
    2e68:	ldr	x0, [sp, #88]
    2e6c:	cmp	x0, #0x0
    2e70:	b.eq	2e7c <_Unwind_Find_FDE+0x34>  // b.none
    2e74:	ldr	x0, [sp, #88]
    2e78:	b	2ef4 <_Unwind_Find_FDE+0xac>
    2e7c:	ldr	x0, [sp, #24]
    2e80:	str	x0, [sp, #40]
    2e84:	str	xzr, [sp, #48]
    2e88:	str	xzr, [sp, #56]
    2e8c:	str	xzr, [sp, #64]
    2e90:	str	xzr, [sp, #72]
    2e94:	mov	w0, #0x1                   	// #1
    2e98:	str	w0, [sp, #80]
    2e9c:	add	x0, sp, #0x28
    2ea0:	mov	x1, x0
    2ea4:	adrp	x0, 0 <size_of_encoded_value>
    2ea8:	add	x0, x0, #0x0
    2eac:	bl	0 <dl_iterate_phdr>
    2eb0:	cmp	w0, #0x0
    2eb4:	b.ge	2ec0 <_Unwind_Find_FDE+0x78>  // b.tcont
    2eb8:	mov	x0, #0x0                   	// #0
    2ebc:	b	2ef4 <_Unwind_Find_FDE+0xac>
    2ec0:	ldr	x0, [sp, #72]
    2ec4:	cmp	x0, #0x0
    2ec8:	b.eq	2ef0 <_Unwind_Find_FDE+0xa8>  // b.none
    2ecc:	ldr	x1, [sp, #48]
    2ed0:	ldr	x0, [sp, #16]
    2ed4:	str	x1, [x0]
    2ed8:	ldr	x1, [sp, #56]
    2edc:	ldr	x0, [sp, #16]
    2ee0:	str	x1, [x0, #8]
    2ee4:	ldr	x1, [sp, #64]
    2ee8:	ldr	x0, [sp, #16]
    2eec:	str	x1, [x0, #16]
    2ef0:	ldr	x0, [sp, #72]
    2ef4:	ldp	x29, x30, [sp], #96
    2ef8:	ret

unwind-sjlj.o:     file format elf64-littleaarch64


unwind-c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <base_of_encoded_value>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	strb	w0, [sp, #31]
   c:	str	x1, [sp, #16]
  10:	ldrb	w0, [sp, #31]
  14:	cmp	w0, #0xff
  18:	b.ne	24 <base_of_encoded_value+0x24>  // b.any
  1c:	mov	x0, #0x0                   	// #0
  20:	b	ac <base_of_encoded_value+0xac>
  24:	ldrb	w0, [sp, #31]
  28:	and	w0, w0, #0x70
  2c:	cmp	w0, #0x50
  30:	b.eq	7c <base_of_encoded_value+0x7c>  // b.none
  34:	cmp	w0, #0x50
  38:	b.gt	a8 <base_of_encoded_value+0xa8>
  3c:	cmp	w0, #0x40
  40:	b.eq	9c <base_of_encoded_value+0x9c>  // b.none
  44:	cmp	w0, #0x40
  48:	b.gt	a8 <base_of_encoded_value+0xa8>
  4c:	cmp	w0, #0x30
  50:	b.eq	90 <base_of_encoded_value+0x90>  // b.none
  54:	cmp	w0, #0x30
  58:	b.gt	a8 <base_of_encoded_value+0xa8>
  5c:	cmp	w0, #0x20
  60:	b.eq	84 <base_of_encoded_value+0x84>  // b.none
  64:	cmp	w0, #0x20
  68:	b.gt	a8 <base_of_encoded_value+0xa8>
  6c:	cmp	w0, #0x0
  70:	b.eq	7c <base_of_encoded_value+0x7c>  // b.none
  74:	cmp	w0, #0x10
  78:	b.ne	a8 <base_of_encoded_value+0xa8>  // b.any
  7c:	mov	x0, #0x0                   	// #0
  80:	b	ac <base_of_encoded_value+0xac>
  84:	ldr	x0, [sp, #16]
  88:	bl	0 <_Unwind_GetTextRelBase>
  8c:	b	ac <base_of_encoded_value+0xac>
  90:	ldr	x0, [sp, #16]
  94:	bl	0 <_Unwind_GetDataRelBase>
  98:	b	ac <base_of_encoded_value+0xac>
  9c:	ldr	x0, [sp, #16]
  a0:	bl	0 <_Unwind_GetRegionStart>
  a4:	b	ac <base_of_encoded_value+0xac>
  a8:	bl	0 <abort>
  ac:	ldp	x29, x30, [sp], #32
  b0:	ret

00000000000000b4 <read_uleb128>:
  b4:	sub	sp, sp, #0x30
  b8:	str	x0, [sp, #8]
  bc:	str	x1, [sp]
  c0:	str	wzr, [sp, #44]
  c4:	str	xzr, [sp, #32]
  c8:	ldr	x0, [sp, #8]
  cc:	add	x1, x0, #0x1
  d0:	str	x1, [sp, #8]
  d4:	ldrb	w0, [x0]
  d8:	strb	w0, [sp, #31]
  dc:	ldrb	w0, [sp, #31]
  e0:	and	x1, x0, #0x7f
  e4:	ldr	w0, [sp, #44]
  e8:	lsl	x0, x1, x0
  ec:	ldr	x1, [sp, #32]
  f0:	orr	x0, x1, x0
  f4:	str	x0, [sp, #32]
  f8:	ldr	w0, [sp, #44]
  fc:	add	w0, w0, #0x7
 100:	str	w0, [sp, #44]
 104:	ldrsb	w0, [sp, #31]
 108:	cmp	w0, #0x0
 10c:	b.lt	c8 <read_uleb128+0x14>  // b.tstop
 110:	ldr	x0, [sp]
 114:	ldr	x1, [sp, #32]
 118:	str	x1, [x0]
 11c:	ldr	x0, [sp, #8]
 120:	add	sp, sp, #0x30
 124:	ret

0000000000000128 <read_sleb128>:
 128:	sub	sp, sp, #0x30
 12c:	str	x0, [sp, #8]
 130:	str	x1, [sp]
 134:	str	wzr, [sp, #44]
 138:	str	xzr, [sp, #32]
 13c:	ldr	x0, [sp, #8]
 140:	add	x1, x0, #0x1
 144:	str	x1, [sp, #8]
 148:	ldrb	w0, [x0]
 14c:	strb	w0, [sp, #31]
 150:	ldrb	w0, [sp, #31]
 154:	and	x1, x0, #0x7f
 158:	ldr	w0, [sp, #44]
 15c:	lsl	x0, x1, x0
 160:	ldr	x1, [sp, #32]
 164:	orr	x0, x1, x0
 168:	str	x0, [sp, #32]
 16c:	ldr	w0, [sp, #44]
 170:	add	w0, w0, #0x7
 174:	str	w0, [sp, #44]
 178:	ldrsb	w0, [sp, #31]
 17c:	cmp	w0, #0x0
 180:	b.lt	13c <read_sleb128+0x14>  // b.tstop
 184:	ldr	w0, [sp, #44]
 188:	cmp	w0, #0x3f
 18c:	b.hi	1bc <read_sleb128+0x94>  // b.pmore
 190:	ldrb	w0, [sp, #31]
 194:	and	w0, w0, #0x40
 198:	cmp	w0, #0x0
 19c:	b.eq	1bc <read_sleb128+0x94>  // b.none
 1a0:	ldr	w0, [sp, #44]
 1a4:	mov	x1, #0x1                   	// #1
 1a8:	lsl	x0, x1, x0
 1ac:	neg	x0, x0
 1b0:	ldr	x1, [sp, #32]
 1b4:	orr	x0, x1, x0
 1b8:	str	x0, [sp, #32]
 1bc:	ldr	x1, [sp, #32]
 1c0:	ldr	x0, [sp]
 1c4:	str	x1, [x0]
 1c8:	ldr	x0, [sp, #8]
 1cc:	add	sp, sp, #0x30
 1d0:	ret

00000000000001d4 <read_encoded_value_with_base>:
 1d4:	stp	x29, x30, [sp, #-96]!
 1d8:	mov	x29, sp
 1dc:	strb	w0, [sp, #47]
 1e0:	str	x1, [sp, #32]
 1e4:	str	x2, [sp, #24]
 1e8:	str	x3, [sp, #16]
 1ec:	ldr	x0, [sp, #24]
 1f0:	str	x0, [sp, #80]
 1f4:	ldrb	w0, [sp, #47]
 1f8:	cmp	w0, #0x50
 1fc:	b.ne	234 <read_encoded_value_with_base+0x60>  // b.any
 200:	ldr	x0, [sp, #24]
 204:	str	x0, [sp, #72]
 208:	ldr	x0, [sp, #72]
 20c:	add	x0, x0, #0x7
 210:	and	x0, x0, #0xfffffffffffffff8
 214:	str	x0, [sp, #72]
 218:	ldr	x0, [sp, #72]
 21c:	ldr	x0, [x0]
 220:	str	x0, [sp, #88]
 224:	ldr	x0, [sp, #72]
 228:	add	x0, x0, #0x8
 22c:	str	x0, [sp, #24]
 230:	b	424 <read_encoded_value_with_base+0x250>
 234:	ldrb	w0, [sp, #47]
 238:	and	w0, w0, #0xf
 23c:	cmp	w0, #0xc
 240:	b.eq	3b8 <read_encoded_value_with_base+0x1e4>  // b.none
 244:	cmp	w0, #0xc
 248:	b.gt	3d4 <read_encoded_value_with_base+0x200>
 24c:	cmp	w0, #0xb
 250:	b.eq	398 <read_encoded_value_with_base+0x1c4>  // b.none
 254:	cmp	w0, #0xb
 258:	b.gt	3d4 <read_encoded_value_with_base+0x200>
 25c:	cmp	w0, #0xa
 260:	b.eq	378 <read_encoded_value_with_base+0x1a4>  // b.none
 264:	cmp	w0, #0xa
 268:	b.gt	3d4 <read_encoded_value_with_base+0x200>
 26c:	cmp	w0, #0x9
 270:	b.eq	2fc <read_encoded_value_with_base+0x128>  // b.none
 274:	cmp	w0, #0x9
 278:	b.gt	3d4 <read_encoded_value_with_base+0x200>
 27c:	cmp	w0, #0x4
 280:	b.eq	35c <read_encoded_value_with_base+0x188>  // b.none
 284:	cmp	w0, #0x4
 288:	b.gt	3d4 <read_encoded_value_with_base+0x200>
 28c:	cmp	w0, #0x3
 290:	b.eq	33c <read_encoded_value_with_base+0x168>  // b.none
 294:	cmp	w0, #0x3
 298:	b.gt	3d4 <read_encoded_value_with_base+0x200>
 29c:	cmp	w0, #0x2
 2a0:	b.eq	31c <read_encoded_value_with_base+0x148>  // b.none
 2a4:	cmp	w0, #0x2
 2a8:	b.gt	3d4 <read_encoded_value_with_base+0x200>
 2ac:	cmp	w0, #0x0
 2b0:	b.eq	2c0 <read_encoded_value_with_base+0xec>  // b.none
 2b4:	cmp	w0, #0x1
 2b8:	b.eq	2dc <read_encoded_value_with_base+0x108>  // b.none
 2bc:	b	3d4 <read_encoded_value_with_base+0x200>
 2c0:	ldr	x0, [sp, #80]
 2c4:	ldr	x0, [x0]
 2c8:	str	x0, [sp, #88]
 2cc:	ldr	x0, [sp, #24]
 2d0:	add	x0, x0, #0x8
 2d4:	str	x0, [sp, #24]
 2d8:	b	3d8 <read_encoded_value_with_base+0x204>
 2dc:	add	x0, sp, #0x40
 2e0:	mov	x1, x0
 2e4:	ldr	x0, [sp, #24]
 2e8:	bl	b4 <read_uleb128>
 2ec:	str	x0, [sp, #24]
 2f0:	ldr	x0, [sp, #64]
 2f4:	str	x0, [sp, #88]
 2f8:	b	3d8 <read_encoded_value_with_base+0x204>
 2fc:	add	x0, sp, #0x38
 300:	mov	x1, x0
 304:	ldr	x0, [sp, #24]
 308:	bl	128 <read_sleb128>
 30c:	str	x0, [sp, #24]
 310:	ldr	x0, [sp, #56]
 314:	str	x0, [sp, #88]
 318:	b	3d8 <read_encoded_value_with_base+0x204>
 31c:	ldr	x0, [sp, #80]
 320:	ldrh	w0, [x0]
 324:	and	x0, x0, #0xffff
 328:	str	x0, [sp, #88]
 32c:	ldr	x0, [sp, #24]
 330:	add	x0, x0, #0x2
 334:	str	x0, [sp, #24]
 338:	b	3d8 <read_encoded_value_with_base+0x204>
 33c:	ldr	x0, [sp, #80]
 340:	ldr	w0, [x0]
 344:	mov	w0, w0
 348:	str	x0, [sp, #88]
 34c:	ldr	x0, [sp, #24]
 350:	add	x0, x0, #0x4
 354:	str	x0, [sp, #24]
 358:	b	3d8 <read_encoded_value_with_base+0x204>
 35c:	ldr	x0, [sp, #80]
 360:	ldr	x0, [x0]
 364:	str	x0, [sp, #88]
 368:	ldr	x0, [sp, #24]
 36c:	add	x0, x0, #0x8
 370:	str	x0, [sp, #24]
 374:	b	3d8 <read_encoded_value_with_base+0x204>
 378:	ldr	x0, [sp, #80]
 37c:	ldrsh	w0, [x0]
 380:	sxth	x0, w0
 384:	str	x0, [sp, #88]
 388:	ldr	x0, [sp, #24]
 38c:	add	x0, x0, #0x2
 390:	str	x0, [sp, #24]
 394:	b	3d8 <read_encoded_value_with_base+0x204>
 398:	ldr	x0, [sp, #80]
 39c:	ldr	w0, [x0]
 3a0:	sxtw	x0, w0
 3a4:	str	x0, [sp, #88]
 3a8:	ldr	x0, [sp, #24]
 3ac:	add	x0, x0, #0x4
 3b0:	str	x0, [sp, #24]
 3b4:	b	3d8 <read_encoded_value_with_base+0x204>
 3b8:	ldr	x0, [sp, #80]
 3bc:	ldr	x0, [x0]
 3c0:	str	x0, [sp, #88]
 3c4:	ldr	x0, [sp, #24]
 3c8:	add	x0, x0, #0x8
 3cc:	str	x0, [sp, #24]
 3d0:	b	3d8 <read_encoded_value_with_base+0x204>
 3d4:	bl	0 <abort>
 3d8:	ldr	x0, [sp, #88]
 3dc:	cmp	x0, #0x0
 3e0:	b.eq	424 <read_encoded_value_with_base+0x250>  // b.none
 3e4:	ldrb	w0, [sp, #47]
 3e8:	and	w0, w0, #0x70
 3ec:	cmp	w0, #0x10
 3f0:	b.ne	3fc <read_encoded_value_with_base+0x228>  // b.any
 3f4:	ldr	x0, [sp, #80]
 3f8:	b	400 <read_encoded_value_with_base+0x22c>
 3fc:	ldr	x0, [sp, #32]
 400:	ldr	x1, [sp, #88]
 404:	add	x0, x1, x0
 408:	str	x0, [sp, #88]
 40c:	ldrsb	w0, [sp, #47]
 410:	cmp	w0, #0x0
 414:	b.ge	424 <read_encoded_value_with_base+0x250>  // b.tcont
 418:	ldr	x0, [sp, #88]
 41c:	ldr	x0, [x0]
 420:	str	x0, [sp, #88]
 424:	ldr	x0, [sp, #16]
 428:	ldr	x1, [sp, #88]
 42c:	str	x1, [x0]
 430:	ldr	x0, [sp, #24]
 434:	ldp	x29, x30, [sp], #96
 438:	ret

000000000000043c <read_encoded_value>:
 43c:	stp	x29, x30, [sp, #-48]!
 440:	mov	x29, sp
 444:	str	x0, [sp, #40]
 448:	strb	w1, [sp, #39]
 44c:	str	x2, [sp, #24]
 450:	str	x3, [sp, #16]
 454:	ldr	x1, [sp, #40]
 458:	ldrb	w0, [sp, #39]
 45c:	bl	0 <base_of_encoded_value>
 460:	ldr	x3, [sp, #16]
 464:	ldr	x2, [sp, #24]
 468:	mov	x1, x0
 46c:	ldrb	w0, [sp, #39]
 470:	bl	1d4 <read_encoded_value_with_base>
 474:	ldp	x29, x30, [sp], #48
 478:	ret

000000000000047c <parse_lsda_header>:
 47c:	stp	x29, x30, [sp, #-64]!
 480:	mov	x29, sp
 484:	str	x0, [sp, #40]
 488:	str	x1, [sp, #32]
 48c:	str	x2, [sp, #24]
 490:	ldr	x0, [sp, #40]
 494:	cmp	x0, #0x0
 498:	b.eq	4ac <parse_lsda_header+0x30>  // b.none
 49c:	ldr	x0, [sp, #40]
 4a0:	bl	0 <_Unwind_GetRegionStart>
 4a4:	mov	x1, x0
 4a8:	b	4b0 <parse_lsda_header+0x34>
 4ac:	mov	x1, #0x0                   	// #0
 4b0:	ldr	x0, [sp, #24]
 4b4:	str	x1, [x0]
 4b8:	ldr	x0, [sp, #32]
 4bc:	add	x1, x0, #0x1
 4c0:	str	x1, [sp, #32]
 4c4:	ldrb	w0, [x0]
 4c8:	strb	w0, [sp, #63]
 4cc:	ldrb	w0, [sp, #63]
 4d0:	cmp	w0, #0xff
 4d4:	b.eq	4fc <parse_lsda_header+0x80>  // b.none
 4d8:	ldr	x0, [sp, #24]
 4dc:	add	x0, x0, #0x8
 4e0:	mov	x3, x0
 4e4:	ldr	x2, [sp, #32]
 4e8:	ldrb	w1, [sp, #63]
 4ec:	ldr	x0, [sp, #40]
 4f0:	bl	43c <read_encoded_value>
 4f4:	str	x0, [sp, #32]
 4f8:	b	50c <parse_lsda_header+0x90>
 4fc:	ldr	x0, [sp, #24]
 500:	ldr	x1, [x0]
 504:	ldr	x0, [sp, #24]
 508:	str	x1, [x0, #8]
 50c:	ldr	x0, [sp, #32]
 510:	add	x1, x0, #0x1
 514:	str	x1, [sp, #32]
 518:	ldrb	w1, [x0]
 51c:	ldr	x0, [sp, #24]
 520:	strb	w1, [x0, #40]
 524:	ldr	x0, [sp, #24]
 528:	ldrb	w0, [x0, #40]
 52c:	cmp	w0, #0xff
 530:	b.eq	560 <parse_lsda_header+0xe4>  // b.none
 534:	add	x0, sp, #0x30
 538:	mov	x1, x0
 53c:	ldr	x0, [sp, #32]
 540:	bl	b4 <read_uleb128>
 544:	str	x0, [sp, #32]
 548:	ldr	x0, [sp, #48]
 54c:	ldr	x1, [sp, #32]
 550:	add	x1, x1, x0
 554:	ldr	x0, [sp, #24]
 558:	str	x1, [x0, #24]
 55c:	b	568 <parse_lsda_header+0xec>
 560:	ldr	x0, [sp, #24]
 564:	str	xzr, [x0, #24]
 568:	ldr	x0, [sp, #32]
 56c:	add	x1, x0, #0x1
 570:	str	x1, [sp, #32]
 574:	ldrb	w1, [x0]
 578:	ldr	x0, [sp, #24]
 57c:	strb	w1, [x0, #41]
 580:	add	x0, sp, #0x30
 584:	mov	x1, x0
 588:	ldr	x0, [sp, #32]
 58c:	bl	b4 <read_uleb128>
 590:	str	x0, [sp, #32]
 594:	ldr	x0, [sp, #48]
 598:	ldr	x1, [sp, #32]
 59c:	add	x1, x1, x0
 5a0:	ldr	x0, [sp, #24]
 5a4:	str	x1, [x0, #32]
 5a8:	ldr	x0, [sp, #32]
 5ac:	ldp	x29, x30, [sp], #64
 5b0:	ret

00000000000005b4 <__gcc_personality_v0>:
 5b4:	stp	x29, x30, [sp, #-176]!
 5b8:	mov	x29, sp
 5bc:	str	w0, [sp, #44]
 5c0:	str	w1, [sp, #40]
 5c4:	str	x2, [sp, #32]
 5c8:	str	x3, [sp, #24]
 5cc:	str	x4, [sp, #16]
 5d0:	str	wzr, [sp, #92]
 5d4:	ldr	w0, [sp, #44]
 5d8:	cmp	w0, #0x1
 5dc:	b.eq	5e8 <__gcc_personality_v0+0x34>  // b.none
 5e0:	mov	w0, #0x3                   	// #3
 5e4:	b	7a0 <__gcc_personality_v0+0x1ec>
 5e8:	ldr	w0, [sp, #40]
 5ec:	and	w0, w0, #0x2
 5f0:	cmp	w0, #0x0
 5f4:	b.ne	600 <__gcc_personality_v0+0x4c>  // b.any
 5f8:	mov	w0, #0x8                   	// #8
 5fc:	b	7a0 <__gcc_personality_v0+0x1ec>
 600:	ldr	x0, [sp, #16]
 604:	bl	0 <_Unwind_GetLanguageSpecificData>
 608:	str	x0, [sp, #144]
 60c:	ldr	x0, [sp, #144]
 610:	cmp	x0, #0x0
 614:	b.ne	620 <__gcc_personality_v0+0x6c>  // b.any
 618:	mov	w0, #0x8                   	// #8
 61c:	b	7a0 <__gcc_personality_v0+0x1ec>
 620:	add	x0, sp, #0x60
 624:	mov	x2, x0
 628:	ldr	x1, [sp, #144]
 62c:	ldr	x0, [sp, #16]
 630:	bl	47c <parse_lsda_header>
 634:	str	x0, [sp, #168]
 638:	add	x0, sp, #0x5c
 63c:	mov	x1, x0
 640:	ldr	x0, [sp, #16]
 644:	bl	0 <_Unwind_GetIPInfo>
 648:	str	x0, [sp, #152]
 64c:	ldr	w0, [sp, #92]
 650:	cmp	w0, #0x0
 654:	b.ne	664 <__gcc_personality_v0+0xb0>  // b.any
 658:	ldr	x0, [sp, #152]
 65c:	sub	x0, x0, #0x1
 660:	str	x0, [sp, #152]
 664:	str	xzr, [sp, #160]
 668:	b	738 <__gcc_personality_v0+0x184>
 66c:	ldrb	w1, [sp, #137]
 670:	add	x0, sp, #0x50
 674:	mov	x3, x0
 678:	ldr	x2, [sp, #168]
 67c:	mov	x0, #0x0                   	// #0
 680:	bl	43c <read_encoded_value>
 684:	str	x0, [sp, #168]
 688:	ldrb	w1, [sp, #137]
 68c:	add	x0, sp, #0x48
 690:	mov	x3, x0
 694:	ldr	x2, [sp, #168]
 698:	mov	x0, #0x0                   	// #0
 69c:	bl	43c <read_encoded_value>
 6a0:	str	x0, [sp, #168]
 6a4:	ldrb	w1, [sp, #137]
 6a8:	add	x0, sp, #0x40
 6ac:	mov	x3, x0
 6b0:	ldr	x2, [sp, #168]
 6b4:	mov	x0, #0x0                   	// #0
 6b8:	bl	43c <read_encoded_value>
 6bc:	str	x0, [sp, #168]
 6c0:	add	x0, sp, #0x38
 6c4:	mov	x1, x0
 6c8:	ldr	x0, [sp, #168]
 6cc:	bl	b4 <read_uleb128>
 6d0:	str	x0, [sp, #168]
 6d4:	ldr	x1, [sp, #96]
 6d8:	ldr	x0, [sp, #80]
 6dc:	add	x0, x1, x0
 6e0:	ldr	x1, [sp, #152]
 6e4:	cmp	x1, x0
 6e8:	b.cs	6f8 <__gcc_personality_v0+0x144>  // b.hs, b.nlast
 6ec:	ldr	x0, [sp, #128]
 6f0:	str	x0, [sp, #168]
 6f4:	b	738 <__gcc_personality_v0+0x184>
 6f8:	ldr	x1, [sp, #96]
 6fc:	ldr	x0, [sp, #80]
 700:	add	x1, x1, x0
 704:	ldr	x0, [sp, #72]
 708:	add	x0, x1, x0
 70c:	ldr	x1, [sp, #152]
 710:	cmp	x1, x0
 714:	b.cs	738 <__gcc_personality_v0+0x184>  // b.hs, b.nlast
 718:	ldr	x0, [sp, #64]
 71c:	cmp	x0, #0x0
 720:	b.eq	750 <__gcc_personality_v0+0x19c>  // b.none
 724:	ldr	x1, [sp, #104]
 728:	ldr	x0, [sp, #64]
 72c:	add	x0, x1, x0
 730:	str	x0, [sp, #160]
 734:	b	754 <__gcc_personality_v0+0x1a0>
 738:	ldr	x0, [sp, #128]
 73c:	ldr	x1, [sp, #168]
 740:	cmp	x1, x0
 744:	b.cc	66c <__gcc_personality_v0+0xb8>  // b.lo, b.ul, b.last
 748:	mov	w0, #0x8                   	// #8
 74c:	b	7a0 <__gcc_personality_v0+0x1ec>
 750:	nop
 754:	ldr	x0, [sp, #160]
 758:	cmp	x0, #0x0
 75c:	b.ne	768 <__gcc_personality_v0+0x1b4>  // b.any
 760:	mov	w0, #0x8                   	// #8
 764:	b	7a0 <__gcc_personality_v0+0x1ec>
 768:	mov	w1, #0x0                   	// #0
 76c:	ldr	x0, [sp, #24]
 770:	mov	x2, x0
 774:	ldr	x0, [sp, #16]
 778:	bl	0 <_Unwind_SetGR>
 77c:	mov	w0, #0x1                   	// #1
 780:	mov	x2, #0x0                   	// #0
 784:	mov	w1, w0
 788:	ldr	x0, [sp, #16]
 78c:	bl	0 <_Unwind_SetGR>
 790:	ldr	x1, [sp, #160]
 794:	ldr	x0, [sp, #16]
 798:	bl	0 <_Unwind_SetIP>
 79c:	mov	w0, #0x7                   	// #7
 7a0:	ldp	x29, x30, [sp], #176
 7a4:	ret

emutls.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__gthread_active_p>:
   0:	adrp	x0, 0 <__gthread_active_p>
   4:	add	x0, x0, #0x0
   8:	ldr	x0, [x0]
   c:	cmp	x0, #0x0
  10:	cset	w0, ne  // ne = any
  14:	and	w0, w0, #0xff
  18:	ret

000000000000001c <__gthread_once>:
  1c:	stp	x29, x30, [sp, #-32]!
  20:	mov	x29, sp
  24:	str	x0, [sp, #24]
  28:	str	x1, [sp, #16]
  2c:	bl	0 <__gthread_active_p>
  30:	cmp	w0, #0x0
  34:	b.eq	48 <__gthread_once+0x2c>  // b.none
  38:	ldr	x1, [sp, #16]
  3c:	ldr	x0, [sp, #24]
  40:	bl	0 <pthread_once>
  44:	b	4c <__gthread_once+0x30>
  48:	mov	w0, #0xffffffff            	// #-1
  4c:	ldp	x29, x30, [sp], #32
  50:	ret

0000000000000054 <__gthread_key_create>:
  54:	stp	x29, x30, [sp, #-32]!
  58:	mov	x29, sp
  5c:	str	x0, [sp, #24]
  60:	str	x1, [sp, #16]
  64:	ldr	x1, [sp, #16]
  68:	ldr	x0, [sp, #24]
  6c:	bl	0 <pthread_key_create>
  70:	ldp	x29, x30, [sp], #32
  74:	ret

0000000000000078 <__gthread_getspecific>:
  78:	stp	x29, x30, [sp, #-32]!
  7c:	mov	x29, sp
  80:	str	w0, [sp, #28]
  84:	ldr	w0, [sp, #28]
  88:	bl	0 <pthread_getspecific>
  8c:	ldp	x29, x30, [sp], #32
  90:	ret

0000000000000094 <__gthread_setspecific>:
  94:	stp	x29, x30, [sp, #-32]!
  98:	mov	x29, sp
  9c:	str	w0, [sp, #28]
  a0:	str	x1, [sp, #16]
  a4:	ldr	x1, [sp, #16]
  a8:	ldr	w0, [sp, #28]
  ac:	bl	0 <pthread_setspecific>
  b0:	ldp	x29, x30, [sp], #32
  b4:	ret

00000000000000b8 <__gthread_mutex_lock>:
  b8:	stp	x29, x30, [sp, #-32]!
  bc:	mov	x29, sp
  c0:	str	x0, [sp, #24]
  c4:	bl	0 <__gthread_active_p>
  c8:	cmp	w0, #0x0
  cc:	b.eq	dc <__gthread_mutex_lock+0x24>  // b.none
  d0:	ldr	x0, [sp, #24]
  d4:	bl	0 <pthread_mutex_lock>
  d8:	b	e0 <__gthread_mutex_lock+0x28>
  dc:	mov	w0, #0x0                   	// #0
  e0:	ldp	x29, x30, [sp], #32
  e4:	ret

00000000000000e8 <__gthread_mutex_unlock>:
  e8:	stp	x29, x30, [sp, #-32]!
  ec:	mov	x29, sp
  f0:	str	x0, [sp, #24]
  f4:	bl	0 <__gthread_active_p>
  f8:	cmp	w0, #0x0
  fc:	b.eq	10c <__gthread_mutex_unlock+0x24>  // b.none
 100:	ldr	x0, [sp, #24]
 104:	bl	0 <pthread_mutex_unlock>
 108:	b	110 <__gthread_mutex_unlock+0x28>
 10c:	mov	w0, #0x0                   	// #0
 110:	ldp	x29, x30, [sp], #32
 114:	ret

0000000000000118 <emutls_destroy>:
 118:	stp	x29, x30, [sp, #-64]!
 11c:	mov	x29, sp
 120:	str	x0, [sp, #24]
 124:	ldr	x0, [sp, #24]
 128:	str	x0, [sp, #48]
 12c:	ldr	x0, [sp, #48]
 130:	ldr	x0, [x0]
 134:	str	x0, [sp, #40]
 138:	str	xzr, [sp, #56]
 13c:	b	188 <emutls_destroy+0x70>
 140:	ldr	x1, [sp, #48]
 144:	ldr	x0, [sp, #56]
 148:	lsl	x0, x0, #3
 14c:	add	x0, x1, x0
 150:	ldr	x0, [x0, #8]
 154:	cmp	x0, #0x0
 158:	b.eq	17c <emutls_destroy+0x64>  // b.none
 15c:	ldr	x1, [sp, #48]
 160:	ldr	x0, [sp, #56]
 164:	lsl	x0, x0, #3
 168:	add	x0, x1, x0
 16c:	ldr	x0, [x0, #8]
 170:	sub	x0, x0, #0x8
 174:	ldr	x0, [x0]
 178:	bl	0 <free>
 17c:	ldr	x0, [sp, #56]
 180:	add	x0, x0, #0x1
 184:	str	x0, [sp, #56]
 188:	ldr	x1, [sp, #56]
 18c:	ldr	x0, [sp, #40]
 190:	cmp	x1, x0
 194:	b.cc	140 <emutls_destroy+0x28>  // b.lo, b.ul, b.last
 198:	ldr	x0, [sp, #24]
 19c:	bl	0 <free>
 1a0:	nop
 1a4:	ldp	x29, x30, [sp], #64
 1a8:	ret

00000000000001ac <emutls_init>:
 1ac:	stp	x29, x30, [sp, #-16]!
 1b0:	mov	x29, sp
 1b4:	adrp	x0, 0 <__gthread_active_p>
 1b8:	add	x1, x0, #0x0
 1bc:	adrp	x0, 0 <__gthread_active_p>
 1c0:	add	x0, x0, #0x0
 1c4:	bl	54 <__gthread_key_create>
 1c8:	cmp	w0, #0x0
 1cc:	b.eq	1d4 <emutls_init+0x28>  // b.none
 1d0:	bl	0 <abort>
 1d4:	nop
 1d8:	ldp	x29, x30, [sp], #16
 1dc:	ret

00000000000001e0 <emutls_alloc>:
 1e0:	stp	x29, x30, [sp, #-48]!
 1e4:	mov	x29, sp
 1e8:	str	x0, [sp, #24]
 1ec:	ldr	x0, [sp, #24]
 1f0:	ldr	x0, [x0, #8]
 1f4:	cmp	x0, #0x8
 1f8:	b.hi	23c <emutls_alloc+0x5c>  // b.pmore
 1fc:	ldr	x0, [sp, #24]
 200:	ldr	x0, [x0]
 204:	add	x0, x0, #0x8
 208:	bl	0 <malloc>
 20c:	str	x0, [sp, #32]
 210:	ldr	x0, [sp, #32]
 214:	cmp	x0, #0x0
 218:	b.ne	220 <emutls_alloc+0x40>  // b.any
 21c:	bl	0 <abort>
 220:	ldr	x0, [sp, #32]
 224:	ldr	x1, [sp, #32]
 228:	str	x1, [x0]
 22c:	ldr	x0, [sp, #32]
 230:	add	x0, x0, #0x8
 234:	str	x0, [sp, #40]
 238:	b	2a8 <emutls_alloc+0xc8>
 23c:	ldr	x0, [sp, #24]
 240:	ldr	x1, [x0]
 244:	ldr	x0, [sp, #24]
 248:	ldr	x0, [x0, #8]
 24c:	add	x0, x1, x0
 250:	add	x0, x0, #0x7
 254:	bl	0 <malloc>
 258:	str	x0, [sp, #32]
 25c:	ldr	x0, [sp, #32]
 260:	cmp	x0, #0x0
 264:	b.ne	26c <emutls_alloc+0x8c>  // b.any
 268:	bl	0 <abort>
 26c:	ldr	x0, [sp, #24]
 270:	ldr	x0, [x0, #8]
 274:	add	x0, x0, #0x7
 278:	ldr	x1, [sp, #32]
 27c:	add	x0, x1, x0
 280:	mov	x1, x0
 284:	ldr	x0, [sp, #24]
 288:	ldr	x0, [x0, #8]
 28c:	neg	x0, x0
 290:	and	x0, x1, x0
 294:	str	x0, [sp, #40]
 298:	ldr	x0, [sp, #40]
 29c:	sub	x0, x0, #0x8
 2a0:	ldr	x1, [sp, #32]
 2a4:	str	x1, [x0]
 2a8:	ldr	x0, [sp, #24]
 2ac:	ldr	x0, [x0, #24]
 2b0:	cmp	x0, #0x0
 2b4:	b.eq	2d8 <emutls_alloc+0xf8>  // b.none
 2b8:	ldr	x0, [sp, #24]
 2bc:	ldr	x1, [x0, #24]
 2c0:	ldr	x0, [sp, #24]
 2c4:	ldr	x0, [x0]
 2c8:	mov	x2, x0
 2cc:	ldr	x0, [sp, #40]
 2d0:	bl	0 <memcpy>
 2d4:	b	2f0 <emutls_alloc+0x110>
 2d8:	ldr	x0, [sp, #24]
 2dc:	ldr	x0, [x0]
 2e0:	mov	x2, x0
 2e4:	mov	w1, #0x0                   	// #0
 2e8:	ldr	x0, [sp, #40]
 2ec:	bl	0 <memset>
 2f0:	ldr	x0, [sp, #40]
 2f4:	ldp	x29, x30, [sp], #48
 2f8:	ret

00000000000002fc <__emutls_get_address>:
 2fc:	stp	x29, x30, [sp, #-80]!
 300:	mov	x29, sp
 304:	str	x0, [sp, #24]
 308:	bl	0 <__gthread_active_p>
 30c:	cmp	w0, #0x0
 310:	b.ne	354 <__emutls_get_address+0x58>  // b.any
 314:	ldr	x0, [sp, #24]
 318:	ldr	x0, [x0, #16]
 31c:	cmp	x0, #0x0
 320:	cset	w0, eq  // eq = none
 324:	and	w0, w0, #0xff
 328:	and	x0, x0, #0xff
 32c:	cmp	x0, #0x0
 330:	b.eq	348 <__emutls_get_address+0x4c>  // b.none
 334:	ldr	x0, [sp, #24]
 338:	bl	1e0 <emutls_alloc>
 33c:	mov	x1, x0
 340:	ldr	x0, [sp, #24]
 344:	str	x1, [x0, #16]
 348:	ldr	x0, [sp, #24]
 34c:	ldr	x0, [x0, #16]
 350:	b	5c0 <__emutls_get_address+0x2c4>
 354:	ldr	x0, [sp, #24]
 358:	add	x0, x0, #0x10
 35c:	ldar	x0, [x0]
 360:	str	x0, [sp, #72]
 364:	ldr	x0, [sp, #72]
 368:	cmp	x0, #0x0
 36c:	cset	w0, eq  // eq = none
 370:	and	w0, w0, #0xff
 374:	and	x0, x0, #0xff
 378:	cmp	x0, #0x0
 37c:	b.eq	400 <__emutls_get_address+0x104>  // b.none
 380:	adrp	x0, 0 <__gthread_active_p>
 384:	add	x1, x0, #0x0
 388:	adrp	x0, 0 <__gthread_active_p>
 38c:	add	x0, x0, #0x0
 390:	bl	1c <__gthread_once>
 394:	adrp	x0, 0 <__gthread_active_p>
 398:	add	x0, x0, #0x0
 39c:	bl	b8 <__gthread_mutex_lock>
 3a0:	ldr	x0, [sp, #24]
 3a4:	ldr	x0, [x0, #16]
 3a8:	str	x0, [sp, #72]
 3ac:	ldr	x0, [sp, #72]
 3b0:	cmp	x0, #0x0
 3b4:	b.ne	3f4 <__emutls_get_address+0xf8>  // b.any
 3b8:	adrp	x0, 0 <__gthread_active_p>
 3bc:	add	x0, x0, #0x0
 3c0:	ldr	x0, [x0]
 3c4:	add	x1, x0, #0x1
 3c8:	adrp	x0, 0 <__gthread_active_p>
 3cc:	add	x0, x0, #0x0
 3d0:	str	x1, [x0]
 3d4:	adrp	x0, 0 <__gthread_active_p>
 3d8:	add	x0, x0, #0x0
 3dc:	ldr	x0, [x0]
 3e0:	str	x0, [sp, #72]
 3e4:	ldr	x0, [sp, #24]
 3e8:	add	x0, x0, #0x10
 3ec:	ldr	x1, [sp, #72]
 3f0:	stlr	x1, [x0]
 3f4:	adrp	x0, 0 <__gthread_active_p>
 3f8:	add	x0, x0, #0x0
 3fc:	bl	e8 <__gthread_mutex_unlock>
 400:	adrp	x0, 0 <__gthread_active_p>
 404:	add	x0, x0, #0x0
 408:	ldr	w0, [x0]
 40c:	bl	78 <__gthread_getspecific>
 410:	str	x0, [sp, #64]
 414:	ldr	x0, [sp, #64]
 418:	cmp	x0, #0x0
 41c:	cset	w0, eq  // eq = none
 420:	and	w0, w0, #0xff
 424:	and	x0, x0, #0xff
 428:	cmp	x0, #0x0
 42c:	b.eq	484 <__emutls_get_address+0x188>  // b.none
 430:	ldr	x0, [sp, #72]
 434:	add	x0, x0, #0x20
 438:	str	x0, [sp, #32]
 43c:	ldr	x0, [sp, #32]
 440:	add	x0, x0, #0x1
 444:	mov	x1, #0x8                   	// #8
 448:	bl	0 <calloc>
 44c:	str	x0, [sp, #64]
 450:	ldr	x0, [sp, #64]
 454:	cmp	x0, #0x0
 458:	b.ne	460 <__emutls_get_address+0x164>  // b.any
 45c:	bl	0 <abort>
 460:	ldr	x0, [sp, #64]
 464:	ldr	x1, [sp, #32]
 468:	str	x1, [x0]
 46c:	adrp	x0, 0 <__gthread_active_p>
 470:	add	x0, x0, #0x0
 474:	ldr	w0, [x0]
 478:	ldr	x1, [sp, #64]
 47c:	bl	94 <__gthread_setspecific>
 480:	b	55c <__emutls_get_address+0x260>
 484:	ldr	x0, [sp, #64]
 488:	ldr	x0, [x0]
 48c:	ldr	x1, [sp, #72]
 490:	cmp	x1, x0
 494:	cset	w0, hi  // hi = pmore
 498:	and	w0, w0, #0xff
 49c:	and	x0, x0, #0xff
 4a0:	cmp	x0, #0x0
 4a4:	b.eq	55c <__emutls_get_address+0x260>  // b.none
 4a8:	ldr	x0, [sp, #64]
 4ac:	ldr	x0, [x0]
 4b0:	str	x0, [sp, #40]
 4b4:	ldr	x0, [sp, #40]
 4b8:	lsl	x0, x0, #1
 4bc:	str	x0, [sp, #56]
 4c0:	ldr	x1, [sp, #72]
 4c4:	ldr	x0, [sp, #56]
 4c8:	cmp	x1, x0
 4cc:	b.ls	4dc <__emutls_get_address+0x1e0>  // b.plast
 4d0:	ldr	x0, [sp, #72]
 4d4:	add	x0, x0, #0x20
 4d8:	str	x0, [sp, #56]
 4dc:	ldr	x0, [sp, #56]
 4e0:	add	x0, x0, #0x1
 4e4:	lsl	x0, x0, #3
 4e8:	mov	x1, x0
 4ec:	ldr	x0, [sp, #64]
 4f0:	bl	0 <realloc>
 4f4:	str	x0, [sp, #64]
 4f8:	ldr	x0, [sp, #64]
 4fc:	cmp	x0, #0x0
 500:	b.ne	508 <__emutls_get_address+0x20c>  // b.any
 504:	bl	0 <abort>
 508:	ldr	x0, [sp, #64]
 50c:	ldr	x1, [sp, #56]
 510:	str	x1, [x0]
 514:	ldr	x0, [sp, #64]
 518:	add	x1, x0, #0x8
 51c:	ldr	x0, [sp, #40]
 520:	lsl	x0, x0, #3
 524:	add	x3, x1, x0
 528:	ldr	x1, [sp, #56]
 52c:	ldr	x0, [sp, #40]
 530:	sub	x0, x1, x0
 534:	lsl	x0, x0, #3
 538:	mov	x2, x0
 53c:	mov	w1, #0x0                   	// #0
 540:	mov	x0, x3
 544:	bl	0 <memset>
 548:	adrp	x0, 0 <__gthread_active_p>
 54c:	add	x0, x0, #0x0
 550:	ldr	w0, [x0]
 554:	ldr	x1, [sp, #64]
 558:	bl	94 <__gthread_setspecific>
 55c:	ldr	x0, [sp, #72]
 560:	sub	x0, x0, #0x1
 564:	ldr	x1, [sp, #64]
 568:	lsl	x0, x0, #3
 56c:	add	x0, x1, x0
 570:	ldr	x0, [x0, #8]
 574:	str	x0, [sp, #48]
 578:	ldr	x0, [sp, #48]
 57c:	cmp	x0, #0x0
 580:	cset	w0, eq  // eq = none
 584:	and	w0, w0, #0xff
 588:	and	x0, x0, #0xff
 58c:	cmp	x0, #0x0
 590:	b.eq	5bc <__emutls_get_address+0x2c0>  // b.none
 594:	ldr	x0, [sp, #24]
 598:	bl	1e0 <emutls_alloc>
 59c:	str	x0, [sp, #48]
 5a0:	ldr	x0, [sp, #72]
 5a4:	sub	x0, x0, #0x1
 5a8:	ldr	x1, [sp, #64]
 5ac:	lsl	x0, x0, #3
 5b0:	add	x0, x1, x0
 5b4:	ldr	x1, [sp, #48]
 5b8:	str	x1, [x0, #8]
 5bc:	ldr	x0, [sp, #48]
 5c0:	ldp	x29, x30, [sp], #80
 5c4:	ret

00000000000005c8 <__emutls_register_common>:
 5c8:	sub	sp, sp, #0x20
 5cc:	str	x0, [sp, #24]
 5d0:	str	x1, [sp, #16]
 5d4:	str	x2, [sp, #8]
 5d8:	str	x3, [sp]
 5dc:	ldr	x0, [sp, #24]
 5e0:	ldr	x0, [x0]
 5e4:	ldr	x1, [sp, #16]
 5e8:	cmp	x1, x0
 5ec:	b.ls	604 <__emutls_register_common+0x3c>  // b.plast
 5f0:	ldr	x0, [sp, #24]
 5f4:	ldr	x1, [sp, #16]
 5f8:	str	x1, [x0]
 5fc:	ldr	x0, [sp, #24]
 600:	str	xzr, [x0, #24]
 604:	ldr	x0, [sp, #24]
 608:	ldr	x0, [x0, #8]
 60c:	ldr	x1, [sp, #8]
 610:	cmp	x1, x0
 614:	b.ls	624 <__emutls_register_common+0x5c>  // b.plast
 618:	ldr	x0, [sp, #24]
 61c:	ldr	x1, [sp, #8]
 620:	str	x1, [x0, #8]
 624:	ldr	x0, [sp]
 628:	cmp	x0, #0x0
 62c:	b.eq	650 <__emutls_register_common+0x88>  // b.none
 630:	ldr	x0, [sp, #24]
 634:	ldr	x0, [x0]
 638:	ldr	x1, [sp, #16]
 63c:	cmp	x1, x0
 640:	b.ne	650 <__emutls_register_common+0x88>  // b.any
 644:	ldr	x0, [sp, #24]
 648:	ldr	x1, [sp]
 64c:	str	x1, [x0, #24]
 650:	nop
 654:	add	sp, sp, #0x20
 658:	ret
