
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//_heapq.cpython-38-aarch64-linux-gnu.so_gcc_-O2:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000000aa0 <.init>:
 aa0:	stp	x29, x30, [sp, #-16]!
 aa4:	mov	x29, sp
 aa8:	bl	b90 <PyModule_AddObject@plt+0x10>
 aac:	ldp	x29, x30, [sp], #16
 ab0:	ret

Disassembly of section .plt:

0000000000000ac0 <__cxa_finalize@plt-0x20>:
 ac0:	stp	x16, x30, [sp, #-16]!
 ac4:	adrp	x16, 13000 <PyInit__heapq@@Base+0x11918>
 ac8:	ldr	x17, [x16, #4088]
 acc:	add	x16, x16, #0xff8
 ad0:	br	x17
 ad4:	nop
 ad8:	nop
 adc:	nop

0000000000000ae0 <__cxa_finalize@plt>:
 ae0:	adrp	x16, 14000 <__cxa_finalize@GLIBC_2.17>
 ae4:	ldr	x17, [x16]
 ae8:	add	x16, x16, #0x0
 aec:	br	x17

0000000000000af0 <PyList_SetSlice@plt>:
 af0:	adrp	x16, 14000 <__cxa_finalize@GLIBC_2.17>
 af4:	ldr	x17, [x16, #8]
 af8:	add	x16, x16, #0x8
 afc:	br	x17

0000000000000b00 <_Py_Dealloc@plt>:
 b00:	adrp	x16, 14000 <__cxa_finalize@GLIBC_2.17>
 b04:	ldr	x17, [x16, #16]
 b08:	add	x16, x16, #0x10
 b0c:	br	x17

0000000000000b10 <PyErr_SetString@plt>:
 b10:	adrp	x16, 14000 <__cxa_finalize@GLIBC_2.17>
 b14:	ldr	x17, [x16, #24]
 b18:	add	x16, x16, #0x18
 b1c:	br	x17

0000000000000b20 <PyObject_RichCompareBool@plt>:
 b20:	adrp	x16, 14000 <__cxa_finalize@GLIBC_2.17>
 b24:	ldr	x17, [x16, #32]
 b28:	add	x16, x16, #0x20
 b2c:	br	x17

0000000000000b30 <PyList_Append@plt>:
 b30:	adrp	x16, 14000 <__cxa_finalize@GLIBC_2.17>
 b34:	ldr	x17, [x16, #40]
 b38:	add	x16, x16, #0x28
 b3c:	br	x17

0000000000000b40 <__gmon_start__@plt>:
 b40:	adrp	x16, 14000 <__cxa_finalize@GLIBC_2.17>
 b44:	ldr	x17, [x16, #48]
 b48:	add	x16, x16, #0x30
 b4c:	br	x17

0000000000000b50 <_PyArg_CheckPositional@plt>:
 b50:	adrp	x16, 14000 <__cxa_finalize@GLIBC_2.17>
 b54:	ldr	x17, [x16, #56]
 b58:	add	x16, x16, #0x38
 b5c:	br	x17

0000000000000b60 <PyModule_Create2@plt>:
 b60:	adrp	x16, 14000 <__cxa_finalize@GLIBC_2.17>
 b64:	ldr	x17, [x16, #64]
 b68:	add	x16, x16, #0x40
 b6c:	br	x17

0000000000000b70 <PyUnicode_DecodeUTF8@plt>:
 b70:	adrp	x16, 14000 <__cxa_finalize@GLIBC_2.17>
 b74:	ldr	x17, [x16, #72]
 b78:	add	x16, x16, #0x48
 b7c:	br	x17

0000000000000b80 <PyModule_AddObject@plt>:
 b80:	adrp	x16, 14000 <__cxa_finalize@GLIBC_2.17>
 b84:	ldr	x17, [x16, #80]
 b88:	add	x16, x16, #0x50
 b8c:	br	x17

Disassembly of section .text:

0000000000000b90 <PyInit__heapq@@Base-0xb58>:
     b90:	adrp	x0, 13000 <PyInit__heapq@@Base+0x11918>
     b94:	ldr	x0, [x0, #4040]
     b98:	cbz	x0, ba0 <PyModule_AddObject@plt+0x20>
     b9c:	b	b40 <__gmon_start__@plt>
     ba0:	ret
     ba4:	nop
     ba8:	adrp	x0, 14000 <PyInit__heapq@@Base+0x12918>
     bac:	add	x0, x0, #0x1e8
     bb0:	adrp	x1, 14000 <PyInit__heapq@@Base+0x12918>
     bb4:	add	x1, x1, #0x1e8
     bb8:	cmp	x1, x0
     bbc:	b.eq	bd4 <PyModule_AddObject@plt+0x54>  // b.none
     bc0:	adrp	x1, 13000 <PyInit__heapq@@Base+0x11918>
     bc4:	ldr	x1, [x1, #4008]
     bc8:	cbz	x1, bd4 <PyModule_AddObject@plt+0x54>
     bcc:	mov	x16, x1
     bd0:	br	x16
     bd4:	ret
     bd8:	adrp	x0, 14000 <PyInit__heapq@@Base+0x12918>
     bdc:	add	x0, x0, #0x1e8
     be0:	adrp	x1, 14000 <PyInit__heapq@@Base+0x12918>
     be4:	add	x1, x1, #0x1e8
     be8:	sub	x1, x1, x0
     bec:	lsr	x2, x1, #63
     bf0:	add	x1, x2, x1, asr #3
     bf4:	cmp	xzr, x1, asr #1
     bf8:	asr	x1, x1, #1
     bfc:	b.eq	c14 <PyModule_AddObject@plt+0x94>  // b.none
     c00:	adrp	x2, 13000 <PyInit__heapq@@Base+0x11918>
     c04:	ldr	x2, [x2, #4064]
     c08:	cbz	x2, c14 <PyModule_AddObject@plt+0x94>
     c0c:	mov	x16, x2
     c10:	br	x16
     c14:	ret
     c18:	stp	x29, x30, [sp, #-32]!
     c1c:	mov	x29, sp
     c20:	str	x19, [sp, #16]
     c24:	adrp	x19, 14000 <PyInit__heapq@@Base+0x12918>
     c28:	ldrb	w0, [x19, #488]
     c2c:	cbnz	w0, c54 <PyModule_AddObject@plt+0xd4>
     c30:	adrp	x0, 13000 <PyInit__heapq@@Base+0x11918>
     c34:	ldr	x0, [x0, #4016]
     c38:	cbz	x0, c48 <PyModule_AddObject@plt+0xc8>
     c3c:	adrp	x0, 14000 <PyInit__heapq@@Base+0x12918>
     c40:	ldr	x0, [x0, #88]
     c44:	bl	ae0 <__cxa_finalize@plt>
     c48:	bl	ba8 <PyModule_AddObject@plt+0x28>
     c4c:	mov	w0, #0x1                   	// #1
     c50:	strb	w0, [x19, #488]
     c54:	ldr	x19, [sp, #16]
     c58:	ldp	x29, x30, [sp], #32
     c5c:	ret
     c60:	b	bd8 <PyModule_AddObject@plt+0x58>
     c64:	nop
     c68:	stp	x29, x30, [sp, #-80]!
     c6c:	mov	x29, sp
     c70:	stp	x23, x24, [sp, #48]
     c74:	ldr	x24, [x0, #16]
     c78:	cmp	x24, x1
     c7c:	b.le	dec <PyModule_AddObject@plt+0x26c>
     c80:	stp	x21, x22, [sp, #32]
     c84:	cmp	x1, x24, asr #1
     c88:	mov	x22, x0
     c8c:	ldr	x2, [x0, #24]
     c90:	str	x25, [sp, #64]
     c94:	mov	x21, x1
     c98:	asr	x25, x24, #1
     c9c:	b.ge	dd4 <PyModule_AddObject@plt+0x254>  // b.tcont
     ca0:	mov	x23, x24
     ca4:	stp	x19, x20, [sp, #16]
     ca8:	mov	x20, x1
     cac:	b	cc8 <PyModule_AddObject@plt+0x148>
     cb0:	ldr	x3, [x2, x20, lsl #3]
     cb4:	str	x3, [x5]
     cb8:	str	x1, [x2, x20, lsl #3]
     cbc:	cmp	x19, x25
     cc0:	mov	x20, x19
     cc4:	b.ge	d30 <PyModule_AddObject@plt+0x1b0>  // b.tcont
     cc8:	lsl	x3, x20, #1
     ccc:	add	x19, x3, #0x1
     cd0:	add	x3, x3, #0x2
     cd4:	cmp	x3, x23
     cd8:	lsl	x4, x19, #3
     cdc:	add	x5, x2, x4
     ce0:	ldr	x1, [x2, x19, lsl #3]
     ce4:	b.ge	cb0 <PyModule_AddObject@plt+0x130>  // b.tcont
     ce8:	ldr	x0, [x2, x3, lsl #3]
     cec:	mov	w2, #0x0                   	// #0
     cf0:	bl	b20 <PyObject_RichCompareBool@plt>
     cf4:	tbnz	w0, #31, d98 <PyModule_AddObject@plt+0x218>
     cf8:	ldp	x24, x2, [x22, #16]
     cfc:	eor	w0, w0, #0x1
     d00:	add	x19, x19, x0
     d04:	lsl	x4, x19, #3
     d08:	cmp	x24, x23
     d0c:	b.ne	db4 <PyModule_AddObject@plt+0x234>  // b.any
     d10:	add	x5, x2, x4
     d14:	cmp	x19, x25
     d18:	ldr	x3, [x2, x20, lsl #3]
     d1c:	ldr	x1, [x2, x19, lsl #3]
     d20:	str	x3, [x5]
     d24:	str	x1, [x2, x20, lsl #3]
     d28:	mov	x20, x19
     d2c:	b.lt	cc8 <PyModule_AddObject@plt+0x148>  // b.tstop
     d30:	cmp	x19, x24
     d34:	b.ge	e0c <PyModule_AddObject@plt+0x28c>  // b.tcont
     d38:	mov	x3, x2
     d3c:	cmp	x19, x21
     d40:	ldr	x1, [x2, x4]
     d44:	b.gt	d78 <PyModule_AddObject@plt+0x1f8>
     d48:	b	dd0 <PyModule_AddObject@plt+0x250>
     d4c:	ldr	x1, [x22, #16]
     d50:	cmp	x24, x1
     d54:	b.ne	db4 <PyModule_AddObject@plt+0x234>  // b.any
     d58:	cbz	w0, dd0 <PyModule_AddObject@plt+0x250>
     d5c:	ldr	x3, [x22, #24]
     d60:	cmp	x21, x19
     d64:	ldr	x1, [x3, x20, lsl #3]
     d68:	ldr	x0, [x3, x23]
     d6c:	str	x1, [x3, x23]
     d70:	str	x0, [x3, x20, lsl #3]
     d74:	b.ge	dd0 <PyModule_AddObject@plt+0x250>  // b.tcont
     d78:	sub	x0, x19, #0x1
     d7c:	mov	x20, x19
     d80:	mov	w2, #0x0                   	// #0
     d84:	asr	x19, x0, #1
     d88:	lsl	x23, x19, #3
     d8c:	ldr	x0, [x3, x19, lsl #3]
     d90:	bl	b20 <PyObject_RichCompareBool@plt>
     d94:	tbz	w0, #31, d4c <PyModule_AddObject@plt+0x1cc>
     d98:	ldp	x19, x20, [sp, #16]
     d9c:	mov	w0, #0xffffffff            	// #-1
     da0:	ldp	x21, x22, [sp, #32]
     da4:	ldr	x25, [sp, #64]
     da8:	ldp	x23, x24, [sp, #48]
     dac:	ldp	x29, x30, [sp], #80
     db0:	ret
     db4:	adrp	x0, 13000 <PyInit__heapq@@Base+0x11918>
     db8:	adrp	x1, 1000 <PyModule_AddObject@plt+0x480>
     dbc:	add	x1, x1, #0x770
     dc0:	ldr	x0, [x0, #4024]
     dc4:	ldr	x0, [x0]
     dc8:	bl	b10 <PyErr_SetString@plt>
     dcc:	b	d98 <PyModule_AddObject@plt+0x218>
     dd0:	ldp	x19, x20, [sp, #16]
     dd4:	mov	w0, #0x0                   	// #0
     dd8:	ldp	x21, x22, [sp, #32]
     ddc:	ldp	x23, x24, [sp, #48]
     de0:	ldr	x25, [sp, #64]
     de4:	ldp	x29, x30, [sp], #80
     de8:	ret
     dec:	adrp	x0, 13000 <PyInit__heapq@@Base+0x11918>
     df0:	adrp	x1, 1000 <PyModule_AddObject@plt+0x480>
     df4:	add	x1, x1, #0x758
     df8:	ldr	x0, [x0, #4056]
     dfc:	ldr	x0, [x0]
     e00:	bl	b10 <PyErr_SetString@plt>
     e04:	mov	w0, #0xffffffff            	// #-1
     e08:	b	da8 <PyModule_AddObject@plt+0x228>
     e0c:	adrp	x0, 13000 <PyInit__heapq@@Base+0x11918>
     e10:	adrp	x1, 1000 <PyModule_AddObject@plt+0x480>
     e14:	add	x1, x1, #0x758
     e18:	ldr	x0, [x0, #4056]
     e1c:	b	dc4 <PyModule_AddObject@plt+0x244>
     e20:	stp	x29, x30, [sp, #-64]!
     e24:	mov	x29, sp
     e28:	stp	x23, x24, [sp, #48]
     e2c:	ldr	x24, [x0, #16]
     e30:	cmp	x24, x2
     e34:	b.le	f0c <PyModule_AddObject@plt+0x38c>
     e38:	ldr	x3, [x0, #24]
     e3c:	stp	x19, x20, [sp, #16]
     e40:	mov	x23, x1
     e44:	stp	x21, x22, [sp, #32]
     e48:	mov	x19, x2
     e4c:	mov	x22, x0
     e50:	cmp	x2, x1
     e54:	ldr	x0, [x3, x2, lsl #3]
     e58:	b.gt	e8c <PyModule_AddObject@plt+0x30c>
     e5c:	b	ec4 <PyModule_AddObject@plt+0x344>
     e60:	ldr	x1, [x22, #16]
     e64:	cmp	x1, x24
     e68:	b.ne	edc <PyModule_AddObject@plt+0x35c>  // b.any
     e6c:	cbz	w0, ec4 <PyModule_AddObject@plt+0x344>
     e70:	ldr	x3, [x22, #24]
     e74:	cmp	x23, x19
     e78:	ldr	x0, [x3, x20, lsl #3]
     e7c:	ldr	x1, [x3, x21]
     e80:	str	x0, [x3, x21]
     e84:	str	x1, [x3, x20, lsl #3]
     e88:	b.ge	ec4 <PyModule_AddObject@plt+0x344>  // b.tcont
     e8c:	sub	x1, x19, #0x1
     e90:	mov	x20, x19
     e94:	mov	w2, #0x0                   	// #0
     e98:	asr	x19, x1, #1
     e9c:	lsl	x21, x19, #3
     ea0:	ldr	x1, [x3, x19, lsl #3]
     ea4:	bl	b20 <PyObject_RichCompareBool@plt>
     ea8:	tbz	w0, #31, e60 <PyModule_AddObject@plt+0x2e0>
     eac:	ldp	x19, x20, [sp, #16]
     eb0:	mov	w0, #0xffffffff            	// #-1
     eb4:	ldp	x21, x22, [sp, #32]
     eb8:	ldp	x23, x24, [sp, #48]
     ebc:	ldp	x29, x30, [sp], #64
     ec0:	ret
     ec4:	mov	w0, #0x0                   	// #0
     ec8:	ldp	x19, x20, [sp, #16]
     ecc:	ldp	x21, x22, [sp, #32]
     ed0:	ldp	x23, x24, [sp, #48]
     ed4:	ldp	x29, x30, [sp], #64
     ed8:	ret
     edc:	adrp	x0, 13000 <PyInit__heapq@@Base+0x11918>
     ee0:	adrp	x1, 1000 <PyModule_AddObject@plt+0x480>
     ee4:	add	x1, x1, #0x770
     ee8:	ldr	x0, [x0, #4024]
     eec:	ldr	x0, [x0]
     ef0:	bl	b10 <PyErr_SetString@plt>
     ef4:	mov	w0, #0xffffffff            	// #-1
     ef8:	ldp	x19, x20, [sp, #16]
     efc:	ldp	x21, x22, [sp, #32]
     f00:	ldp	x23, x24, [sp, #48]
     f04:	ldp	x29, x30, [sp], #64
     f08:	ret
     f0c:	adrp	x0, 13000 <PyInit__heapq@@Base+0x11918>
     f10:	adrp	x1, 1000 <PyModule_AddObject@plt+0x480>
     f14:	add	x1, x1, #0x758
     f18:	ldr	x0, [x0, #4056]
     f1c:	ldr	x0, [x0]
     f20:	bl	b10 <PyErr_SetString@plt>
     f24:	mov	w0, #0xffffffff            	// #-1
     f28:	b	eb8 <PyModule_AddObject@plt+0x338>
     f2c:	nop
     f30:	stp	x29, x30, [sp, #-64]!
     f34:	mov	x29, sp
     f38:	stp	x21, x22, [sp, #32]
     f3c:	ldr	x22, [x0, #16]
     f40:	cmp	x22, x1
     f44:	b.le	1058 <PyModule_AddObject@plt+0x4d8>
     f48:	stp	x19, x20, [sp, #16]
     f4c:	mov	x21, x1
     f50:	cmp	x1, x22, asr #1
     f54:	stp	x23, x24, [sp, #48]
     f58:	mov	x24, x0
     f5c:	asr	x23, x22, #1
     f60:	ldr	x3, [x0, #24]
     f64:	b.ge	1050 <PyModule_AddObject@plt+0x4d0>  // b.tcont
     f68:	mov	x20, x1
     f6c:	b	f88 <PyModule_AddObject@plt+0x408>
     f70:	ldr	x1, [x3, x20, lsl #3]
     f74:	str	x1, [x4]
     f78:	str	x0, [x3, x20, lsl #3]
     f7c:	cmp	x19, x23
     f80:	mov	x20, x19
     f84:	b.ge	fe8 <PyModule_AddObject@plt+0x468>  // b.tcont
     f88:	lsl	x2, x20, #1
     f8c:	add	x19, x2, #0x1
     f90:	add	x2, x2, #0x2
     f94:	cmp	x2, x22
     f98:	add	x4, x3, x19, lsl #3
     f9c:	ldr	x0, [x3, x19, lsl #3]
     fa0:	b.ge	f70 <PyModule_AddObject@plt+0x3f0>  // b.tcont
     fa4:	ldr	x1, [x3, x2, lsl #3]
     fa8:	mov	w2, #0x0                   	// #0
     fac:	bl	b20 <PyObject_RichCompareBool@plt>
     fb0:	tbnz	w0, #31, 1008 <PyModule_AddObject@plt+0x488>
     fb4:	ldp	x1, x3, [x24, #16]
     fb8:	eor	w0, w0, #0x1
     fbc:	add	x19, x19, x0
     fc0:	cmp	x1, x22
     fc4:	b.ne	1020 <PyModule_AddObject@plt+0x4a0>  // b.any
     fc8:	add	x4, x3, x19, lsl #3
     fcc:	cmp	x19, x23
     fd0:	ldr	x1, [x3, x20, lsl #3]
     fd4:	ldr	x0, [x3, x19, lsl #3]
     fd8:	str	x1, [x4]
     fdc:	str	x0, [x3, x20, lsl #3]
     fe0:	mov	x20, x19
     fe4:	b.lt	f88 <PyModule_AddObject@plt+0x408>  // b.tstop
     fe8:	mov	x2, x19
     fec:	mov	x1, x21
     ff0:	mov	x0, x24
     ff4:	ldp	x19, x20, [sp, #16]
     ff8:	ldp	x21, x22, [sp, #32]
     ffc:	ldp	x23, x24, [sp, #48]
    1000:	ldp	x29, x30, [sp], #64
    1004:	b	e20 <PyModule_AddObject@plt+0x2a0>
    1008:	ldp	x19, x20, [sp, #16]
    100c:	ldp	x23, x24, [sp, #48]
    1010:	mov	w0, #0xffffffff            	// #-1
    1014:	ldp	x21, x22, [sp, #32]
    1018:	ldp	x29, x30, [sp], #64
    101c:	ret
    1020:	adrp	x0, 13000 <PyInit__heapq@@Base+0x11918>
    1024:	adrp	x1, 1000 <PyModule_AddObject@plt+0x480>
    1028:	add	x1, x1, #0x770
    102c:	ldr	x0, [x0, #4024]
    1030:	ldr	x0, [x0]
    1034:	bl	b10 <PyErr_SetString@plt>
    1038:	mov	w0, #0xffffffff            	// #-1
    103c:	ldp	x19, x20, [sp, #16]
    1040:	ldp	x21, x22, [sp, #32]
    1044:	ldp	x23, x24, [sp, #48]
    1048:	ldp	x29, x30, [sp], #64
    104c:	ret
    1050:	mov	x19, x1
    1054:	b	fe8 <PyModule_AddObject@plt+0x468>
    1058:	adrp	x0, 13000 <PyInit__heapq@@Base+0x11918>
    105c:	adrp	x1, 1000 <PyModule_AddObject@plt+0x480>
    1060:	add	x1, x1, #0x758
    1064:	ldr	x0, [x0, #4056]
    1068:	ldr	x0, [x0]
    106c:	bl	b10 <PyErr_SetString@plt>
    1070:	b	1010 <PyModule_AddObject@plt+0x490>
    1074:	nop
    1078:	stp	x29, x30, [sp, #-48]!
    107c:	mov	x29, sp
    1080:	stp	x21, x22, [sp, #32]
    1084:	mov	x22, x1
    1088:	ldr	x1, [x0, #8]
    108c:	stp	x19, x20, [sp, #16]
    1090:	ldr	x1, [x1, #168]
    1094:	tbz	w1, #25, 1180 <PyModule_AddObject@plt+0x600>
    1098:	ldr	x20, [x0, #16]
    109c:	mov	x19, x0
    10a0:	cbz	x20, 1134 <PyModule_AddObject@plt+0x5b4>
    10a4:	ldr	x4, [x0, #24]
    10a8:	mov	x2, x20
    10ac:	sub	x1, x20, #0x1
    10b0:	mov	x3, #0x0                   	// #0
    10b4:	add	x4, x4, x20, lsl #3
    10b8:	ldur	x21, [x4, #-8]
    10bc:	ldr	x4, [x21]
    10c0:	add	x4, x4, #0x1
    10c4:	str	x4, [x21]
    10c8:	bl	af0 <PyList_SetSlice@plt>
    10cc:	cbnz	w0, 1160 <PyModule_AddObject@plt+0x5e0>
    10d0:	cmp	x20, #0x1
    10d4:	mov	x20, x21
    10d8:	b.eq	10f8 <PyModule_AddObject@plt+0x578>  // b.none
    10dc:	ldr	x2, [x19, #24]
    10e0:	mov	x0, x19
    10e4:	mov	x1, #0x0                   	// #0
    10e8:	ldr	x20, [x2]
    10ec:	str	x21, [x2]
    10f0:	blr	x22
    10f4:	cbnz	w0, 110c <PyModule_AddObject@plt+0x58c>
    10f8:	mov	x0, x20
    10fc:	ldp	x19, x20, [sp, #16]
    1100:	ldp	x21, x22, [sp, #32]
    1104:	ldp	x29, x30, [sp], #48
    1108:	ret
    110c:	ldr	x0, [x20]
    1110:	sub	x0, x0, #0x1
    1114:	str	x0, [x20]
    1118:	cbz	x0, 11a0 <PyModule_AddObject@plt+0x620>
    111c:	mov	x20, #0x0                   	// #0
    1120:	mov	x0, x20
    1124:	ldp	x19, x20, [sp, #16]
    1128:	ldp	x21, x22, [sp, #32]
    112c:	ldp	x29, x30, [sp], #48
    1130:	ret
    1134:	adrp	x0, 13000 <PyInit__heapq@@Base+0x11918>
    1138:	adrp	x1, 1000 <PyModule_AddObject@plt+0x480>
    113c:	add	x1, x1, #0x758
    1140:	ldr	x0, [x0, #4056]
    1144:	ldr	x0, [x0]
    1148:	bl	b10 <PyErr_SetString@plt>
    114c:	mov	x0, x20
    1150:	ldp	x19, x20, [sp, #16]
    1154:	ldp	x21, x22, [sp, #32]
    1158:	ldp	x29, x30, [sp], #48
    115c:	ret
    1160:	ldr	x0, [x21]
    1164:	sub	x0, x0, #0x1
    1168:	str	x0, [x21]
    116c:	cbnz	x0, 111c <PyModule_AddObject@plt+0x59c>
    1170:	mov	x0, x21
    1174:	mov	x20, #0x0                   	// #0
    1178:	bl	b00 <_Py_Dealloc@plt>
    117c:	b	10f8 <PyModule_AddObject@plt+0x578>
    1180:	adrp	x0, 13000 <PyInit__heapq@@Base+0x11918>
    1184:	adrp	x1, 1000 <PyModule_AddObject@plt+0x480>
    1188:	mov	x20, #0x0                   	// #0
    118c:	add	x1, x1, #0x798
    1190:	ldr	x0, [x0, #4032]
    1194:	ldr	x0, [x0]
    1198:	bl	b10 <PyErr_SetString@plt>
    119c:	b	10f8 <PyModule_AddObject@plt+0x578>
    11a0:	mov	x0, x20
    11a4:	mov	x20, #0x0                   	// #0
    11a8:	bl	b00 <_Py_Dealloc@plt>
    11ac:	b	10f8 <PyModule_AddObject@plt+0x578>
    11b0:	mov	x0, x1
    11b4:	adrp	x1, 0 <__cxa_finalize@plt-0xae0>
    11b8:	add	x1, x1, #0xc68
    11bc:	b	1078 <PyModule_AddObject@plt+0x4f8>
    11c0:	mov	x0, x1
    11c4:	adrp	x1, 0 <__cxa_finalize@plt-0xae0>
    11c8:	add	x1, x1, #0xf30
    11cc:	b	1078 <PyModule_AddObject@plt+0x4f8>
    11d0:	stp	x29, x30, [sp, #-80]!
    11d4:	mov	x29, sp
    11d8:	stp	x19, x20, [sp, #16]
    11dc:	mov	x20, x0
    11e0:	ldr	x0, [x0, #8]
    11e4:	ldr	x0, [x0, #168]
    11e8:	tbz	w0, #25, 130c <PyModule_AddObject@plt+0x78c>
    11ec:	stp	x21, x22, [sp, #32]
    11f0:	mov	x21, x1
    11f4:	ldr	x1, [x20, #16]
    11f8:	cmp	x1, #0x9c4
    11fc:	asr	x19, x1, #1
    1200:	b.gt	1268 <PyModule_AddObject@plt+0x6e8>
    1204:	subs	x19, x19, #0x1
    1208:	b.pl	1218 <PyModule_AddObject@plt+0x698>  // b.nfrst
    120c:	b	1240 <PyModule_AddObject@plt+0x6c0>
    1210:	cmn	x19, #0x1
    1214:	b.eq	1240 <PyModule_AddObject@plt+0x6c0>  // b.none
    1218:	mov	x1, x19
    121c:	mov	x0, x20
    1220:	sub	x19, x19, #0x1
    1224:	blr	x21
    1228:	cbz	w0, 1210 <PyModule_AddObject@plt+0x690>
    122c:	ldp	x21, x22, [sp, #32]
    1230:	mov	x0, #0x0                   	// #0
    1234:	ldp	x19, x20, [sp, #16]
    1238:	ldp	x29, x30, [sp], #80
    123c:	ret
    1240:	adrp	x1, 13000 <PyInit__heapq@@Base+0x11918>
    1244:	ldp	x21, x22, [sp, #32]
    1248:	ldr	x1, [x1, #4048]
    124c:	ldp	x19, x20, [sp, #16]
    1250:	mov	x0, x1
    1254:	ldr	x2, [x1]
    1258:	add	x2, x2, #0x1
    125c:	str	x2, [x1]
    1260:	ldp	x29, x30, [sp], #80
    1264:	ret
    1268:	add	x0, x19, #0x1
    126c:	stp	x23, x24, [sp, #48]
    1270:	mov	w23, #0x0                   	// #0
    1274:	str	x25, [sp, #64]
    1278:	asr	x0, x0, #1
    127c:	add	w23, w23, #0x1
    1280:	cmp	x0, #0x1
    1284:	b.ne	1278 <PyModule_AddObject@plt+0x6f8>  // b.any
    1288:	lsl	x23, x0, x23
    128c:	sub	x25, x23, #0x2
    1290:	cmp	x25, x1, asr #2
    1294:	asr	x1, x1, #2
    1298:	b.lt	12d8 <PyModule_AddObject@plt+0x758>  // b.tstop
    129c:	sub	x24, x1, #0x1
    12a0:	mov	x22, x25
    12a4:	b	12b0 <PyModule_AddObject@plt+0x730>
    12a8:	tbz	w22, #0, 12cc <PyModule_AddObject@plt+0x74c>
    12ac:	asr	x22, x22, #1
    12b0:	mov	x1, x22
    12b4:	mov	x0, x20
    12b8:	blr	x21
    12bc:	cbz	w0, 12a8 <PyModule_AddObject@plt+0x728>
    12c0:	ldp	x23, x24, [sp, #48]
    12c4:	ldr	x25, [sp, #64]
    12c8:	b	122c <PyModule_AddObject@plt+0x6ac>
    12cc:	sub	x25, x25, #0x1
    12d0:	cmp	x25, x24
    12d4:	b.ne	12a0 <PyModule_AddObject@plt+0x720>  // b.any
    12d8:	sub	x23, x23, #0x1
    12dc:	sub	x19, x19, #0x1
    12e0:	cmp	x23, x19
    12e4:	b.gt	1338 <PyModule_AddObject@plt+0x7b8>
    12e8:	mov	x22, x19
    12ec:	b	12f8 <PyModule_AddObject@plt+0x778>
    12f0:	tbz	w22, #0, 132c <PyModule_AddObject@plt+0x7ac>
    12f4:	asr	x22, x22, #1
    12f8:	mov	x1, x22
    12fc:	mov	x0, x20
    1300:	blr	x21
    1304:	cbz	w0, 12f0 <PyModule_AddObject@plt+0x770>
    1308:	b	12c0 <PyModule_AddObject@plt+0x740>
    130c:	adrp	x0, 13000 <PyInit__heapq@@Base+0x11918>
    1310:	adrp	x1, 1000 <PyModule_AddObject@plt+0x480>
    1314:	add	x1, x1, #0x798
    1318:	ldr	x0, [x0, #4032]
    131c:	ldr	x0, [x0]
    1320:	bl	b10 <PyErr_SetString@plt>
    1324:	mov	x0, #0x0                   	// #0
    1328:	b	1234 <PyModule_AddObject@plt+0x6b4>
    132c:	sub	x19, x19, #0x1
    1330:	cmp	x23, x19
    1334:	b.le	12e8 <PyModule_AddObject@plt+0x768>
    1338:	adrp	x1, 13000 <PyInit__heapq@@Base+0x11918>
    133c:	ldp	x21, x22, [sp, #32]
    1340:	ldr	x1, [x1, #4048]
    1344:	ldp	x23, x24, [sp, #48]
    1348:	mov	x0, x1
    134c:	ldr	x2, [x1]
    1350:	ldr	x25, [sp, #64]
    1354:	add	x2, x2, #0x1
    1358:	str	x2, [x1]
    135c:	b	1234 <PyModule_AddObject@plt+0x6b4>
    1360:	mov	x0, x1
    1364:	adrp	x1, 0 <__cxa_finalize@plt-0xae0>
    1368:	add	x1, x1, #0xc68
    136c:	b	11d0 <PyModule_AddObject@plt+0x650>
    1370:	mov	x0, x1
    1374:	adrp	x1, 0 <__cxa_finalize@plt-0xae0>
    1378:	add	x1, x1, #0xf30
    137c:	b	11d0 <PyModule_AddObject@plt+0x650>
    1380:	stp	x29, x30, [sp, #-32]!
    1384:	mov	x4, x1
    1388:	mov	x29, sp
    138c:	ldr	x1, [x0, #8]
    1390:	ldr	x1, [x1, #168]
    1394:	str	x19, [sp, #16]
    1398:	tbz	w1, #25, 13f0 <PyModule_AddObject@plt+0x870>
    139c:	ldr	x1, [x0, #16]
    13a0:	cbz	x1, 1410 <PyModule_AddObject@plt+0x890>
    13a4:	ldr	x5, [x0, #24]
    13a8:	mov	x1, #0x0                   	// #0
    13ac:	ldr	x3, [x4]
    13b0:	ldr	x19, [x5]
    13b4:	add	x3, x3, #0x1
    13b8:	str	x3, [x4]
    13bc:	str	x4, [x5]
    13c0:	blr	x2
    13c4:	cbnz	w0, 13d8 <PyModule_AddObject@plt+0x858>
    13c8:	mov	x0, x19
    13cc:	ldr	x19, [sp, #16]
    13d0:	ldp	x29, x30, [sp], #32
    13d4:	ret
    13d8:	ldr	x0, [x19]
    13dc:	sub	x0, x0, #0x1
    13e0:	str	x0, [x19]
    13e4:	cbz	x0, 1430 <PyModule_AddObject@plt+0x8b0>
    13e8:	mov	x19, #0x0                   	// #0
    13ec:	b	13c8 <PyModule_AddObject@plt+0x848>
    13f0:	adrp	x0, 13000 <PyInit__heapq@@Base+0x11918>
    13f4:	adrp	x1, 1000 <PyModule_AddObject@plt+0x480>
    13f8:	mov	x19, #0x0                   	// #0
    13fc:	add	x1, x1, #0x798
    1400:	ldr	x0, [x0, #4032]
    1404:	ldr	x0, [x0]
    1408:	bl	b10 <PyErr_SetString@plt>
    140c:	b	13c8 <PyModule_AddObject@plt+0x848>
    1410:	adrp	x0, 13000 <PyInit__heapq@@Base+0x11918>
    1414:	adrp	x1, 1000 <PyModule_AddObject@plt+0x480>
    1418:	mov	x19, #0x0                   	// #0
    141c:	add	x1, x1, #0x758
    1420:	ldr	x0, [x0, #4056]
    1424:	ldr	x0, [x0]
    1428:	bl	b10 <PyErr_SetString@plt>
    142c:	b	13c8 <PyModule_AddObject@plt+0x848>
    1430:	mov	x0, x19
    1434:	mov	x19, #0x0                   	// #0
    1438:	bl	b00 <_Py_Dealloc@plt>
    143c:	b	13c8 <PyModule_AddObject@plt+0x848>
    1440:	stp	x29, x30, [sp, #-32]!
    1444:	cmp	x2, #0x2
    1448:	mov	x29, sp
    144c:	str	x19, [sp, #16]
    1450:	mov	x19, x1
    1454:	b.eq	1474 <PyModule_AddObject@plt+0x8f4>  // b.none
    1458:	mov	x1, x2
    145c:	adrp	x0, 1000 <PyModule_AddObject@plt+0x480>
    1460:	mov	x3, #0x2                   	// #2
    1464:	add	x0, x0, #0x7b8
    1468:	mov	x2, x3
    146c:	bl	b50 <_PyArg_CheckPositional@plt>
    1470:	cbz	w0, 148c <PyModule_AddObject@plt+0x90c>
    1474:	ldp	x0, x1, [x19]
    1478:	adrp	x2, 0 <__cxa_finalize@plt-0xae0>
    147c:	ldr	x19, [sp, #16]
    1480:	add	x2, x2, #0xc68
    1484:	ldp	x29, x30, [sp], #32
    1488:	b	1380 <PyModule_AddObject@plt+0x800>
    148c:	mov	x0, #0x0                   	// #0
    1490:	ldr	x19, [sp, #16]
    1494:	ldp	x29, x30, [sp], #32
    1498:	ret
    149c:	nop
    14a0:	stp	x29, x30, [sp, #-32]!
    14a4:	cmp	x2, #0x2
    14a8:	mov	x29, sp
    14ac:	str	x19, [sp, #16]
    14b0:	mov	x19, x1
    14b4:	b.eq	14d4 <PyModule_AddObject@plt+0x954>  // b.none
    14b8:	mov	x1, x2
    14bc:	adrp	x0, 1000 <PyModule_AddObject@plt+0x480>
    14c0:	mov	x3, #0x2                   	// #2
    14c4:	add	x0, x0, #0x7d0
    14c8:	mov	x2, x3
    14cc:	bl	b50 <_PyArg_CheckPositional@plt>
    14d0:	cbz	w0, 14ec <PyModule_AddObject@plt+0x96c>
    14d4:	ldp	x0, x1, [x19]
    14d8:	adrp	x2, 0 <__cxa_finalize@plt-0xae0>
    14dc:	ldr	x19, [sp, #16]
    14e0:	add	x2, x2, #0xf30
    14e4:	ldp	x29, x30, [sp], #32
    14e8:	b	1380 <PyModule_AddObject@plt+0x800>
    14ec:	mov	x0, #0x0                   	// #0
    14f0:	ldr	x19, [sp, #16]
    14f4:	ldp	x29, x30, [sp], #32
    14f8:	ret
    14fc:	nop
    1500:	stp	x29, x30, [sp, #-32]!
    1504:	cmp	x2, #0x2
    1508:	mov	x29, sp
    150c:	stp	x19, x20, [sp, #16]
    1510:	mov	x19, x1
    1514:	b.eq	1534 <PyModule_AddObject@plt+0x9b4>  // b.none
    1518:	mov	x1, x2
    151c:	adrp	x0, 1000 <PyModule_AddObject@plt+0x480>
    1520:	mov	x3, #0x2                   	// #2
    1524:	add	x0, x0, #0x7e0
    1528:	mov	x2, x3
    152c:	bl	b50 <_PyArg_CheckPositional@plt>
    1530:	cbz	w0, 15dc <PyModule_AddObject@plt+0xa5c>
    1534:	ldp	x20, x19, [x19]
    1538:	ldr	x0, [x20, #8]
    153c:	ldr	x0, [x0, #168]
    1540:	tbz	w0, #25, 15f0 <PyModule_AddObject@plt+0xa70>
    1544:	ldr	x0, [x20, #16]
    1548:	cbnz	x0, 1568 <PyModule_AddObject@plt+0x9e8>
    154c:	ldr	x0, [x19]
    1550:	add	x0, x0, #0x1
    1554:	str	x0, [x19]
    1558:	mov	x0, x19
    155c:	ldp	x19, x20, [sp, #16]
    1560:	ldp	x29, x30, [sp], #32
    1564:	ret
    1568:	ldr	x0, [x20, #24]
    156c:	mov	x1, x19
    1570:	mov	w2, #0x0                   	// #0
    1574:	ldr	x0, [x0]
    1578:	bl	b20 <PyObject_RichCompareBool@plt>
    157c:	cmp	w0, #0x0
    1580:	b.lt	15dc <PyModule_AddObject@plt+0xa5c>  // b.tstop
    1584:	b.eq	154c <PyModule_AddObject@plt+0x9cc>  // b.none
    1588:	ldr	x0, [x20, #16]
    158c:	cbz	x0, 1610 <PyModule_AddObject@plt+0xa90>
    1590:	ldr	x3, [x20, #24]
    1594:	mov	x0, x20
    1598:	ldr	x2, [x19]
    159c:	mov	x1, #0x0                   	// #0
    15a0:	ldr	x4, [x3]
    15a4:	add	x2, x2, #0x1
    15a8:	str	x2, [x19]
    15ac:	str	x19, [x3]
    15b0:	mov	x19, x4
    15b4:	bl	f30 <PyModule_AddObject@plt+0x3b0>
    15b8:	cbz	w0, 1558 <PyModule_AddObject@plt+0x9d8>
    15bc:	ldr	x0, [x19]
    15c0:	sub	x0, x0, #0x1
    15c4:	str	x0, [x19]
    15c8:	cbnz	x0, 15dc <PyModule_AddObject@plt+0xa5c>
    15cc:	mov	x0, x19
    15d0:	mov	x19, #0x0                   	// #0
    15d4:	bl	b00 <_Py_Dealloc@plt>
    15d8:	b	1558 <PyModule_AddObject@plt+0x9d8>
    15dc:	mov	x19, #0x0                   	// #0
    15e0:	mov	x0, x19
    15e4:	ldp	x19, x20, [sp, #16]
    15e8:	ldp	x29, x30, [sp], #32
    15ec:	ret
    15f0:	adrp	x0, 13000 <PyInit__heapq@@Base+0x11918>
    15f4:	adrp	x1, 1000 <PyModule_AddObject@plt+0x480>
    15f8:	mov	x19, #0x0                   	// #0
    15fc:	add	x1, x1, #0x798
    1600:	ldr	x0, [x0, #4032]
    1604:	ldr	x0, [x0]
    1608:	bl	b10 <PyErr_SetString@plt>
    160c:	b	1558 <PyModule_AddObject@plt+0x9d8>
    1610:	adrp	x0, 13000 <PyInit__heapq@@Base+0x11918>
    1614:	adrp	x1, 1000 <PyModule_AddObject@plt+0x480>
    1618:	mov	x19, #0x0                   	// #0
    161c:	add	x1, x1, #0x758
    1620:	ldr	x0, [x0, #4056]
    1624:	ldr	x0, [x0]
    1628:	bl	b10 <PyErr_SetString@plt>
    162c:	b	1558 <PyModule_AddObject@plt+0x9d8>
    1630:	stp	x29, x30, [sp, #-32]!
    1634:	cmp	x2, #0x2
    1638:	mov	x29, sp
    163c:	stp	x19, x20, [sp, #16]
    1640:	mov	x19, x1
    1644:	b.eq	1664 <PyModule_AddObject@plt+0xae4>  // b.none
    1648:	mov	x1, x2
    164c:	adrp	x0, 1000 <PyModule_AddObject@plt+0x480>
    1650:	mov	x3, #0x2                   	// #2
    1654:	add	x0, x0, #0x7f0
    1658:	mov	x2, x3
    165c:	bl	b50 <_PyArg_CheckPositional@plt>
    1660:	cbz	w0, 16d4 <PyModule_AddObject@plt+0xb54>
    1664:	ldp	x20, x1, [x19]
    1668:	ldr	x0, [x20, #8]
    166c:	ldr	x0, [x0, #168]
    1670:	tbz	w0, #25, 16bc <PyModule_AddObject@plt+0xb3c>
    1674:	mov	x0, x20
    1678:	bl	b30 <PyList_Append@plt>
    167c:	cbnz	w0, 16d4 <PyModule_AddObject@plt+0xb54>
    1680:	ldr	x2, [x20, #16]
    1684:	mov	x0, x20
    1688:	mov	x1, #0x0                   	// #0
    168c:	sub	x2, x2, #0x1
    1690:	bl	e20 <PyModule_AddObject@plt+0x2a0>
    1694:	cbnz	w0, 16d4 <PyModule_AddObject@plt+0xb54>
    1698:	adrp	x1, 13000 <PyInit__heapq@@Base+0x11918>
    169c:	ldp	x19, x20, [sp, #16]
    16a0:	ldr	x1, [x1, #4048]
    16a4:	mov	x0, x1
    16a8:	ldr	x2, [x1]
    16ac:	add	x2, x2, #0x1
    16b0:	str	x2, [x1]
    16b4:	ldp	x29, x30, [sp], #32
    16b8:	ret
    16bc:	adrp	x0, 13000 <PyInit__heapq@@Base+0x11918>
    16c0:	adrp	x1, 1000 <PyModule_AddObject@plt+0x480>
    16c4:	add	x1, x1, #0x798
    16c8:	ldr	x0, [x0, #4032]
    16cc:	ldr	x0, [x0]
    16d0:	bl	b10 <PyErr_SetString@plt>
    16d4:	mov	x0, #0x0                   	// #0
    16d8:	ldp	x19, x20, [sp, #16]
    16dc:	ldp	x29, x30, [sp], #32
    16e0:	ret
    16e4:	nop

00000000000016e8 <PyInit__heapq@@Base>:
    16e8:	stp	x29, x30, [sp, #-32]!
    16ec:	adrp	x0, 14000 <PyInit__heapq@@Base+0x12918>
    16f0:	mov	w1, #0x3f5                 	// #1013
    16f4:	mov	x29, sp
    16f8:	add	x0, x0, #0x60
    16fc:	str	x19, [sp, #16]
    1700:	bl	b60 <PyModule_Create2@plt>
    1704:	mov	x19, x0
    1708:	cbz	x0, 1734 <PyInit__heapq@@Base+0x4c>
    170c:	mov	x2, #0x0                   	// #0
    1710:	mov	x1, #0x126f                	// #4719
    1714:	adrp	x0, 1000 <PyModule_AddObject@plt+0x480>
    1718:	add	x0, x0, #0x848
    171c:	bl	b70 <PyUnicode_DecodeUTF8@plt>
    1720:	mov	x2, x0
    1724:	adrp	x1, 1000 <PyModule_AddObject@plt+0x480>
    1728:	mov	x0, x19
    172c:	add	x1, x1, #0x800
    1730:	bl	b80 <PyModule_AddObject@plt>
    1734:	mov	x0, x19
    1738:	ldr	x19, [sp, #16]
    173c:	ldp	x29, x30, [sp], #32
    1740:	ret

Disassembly of section .fini:

0000000000001744 <.fini>:
    1744:	stp	x29, x30, [sp, #-16]!
    1748:	mov	x29, sp
    174c:	ldp	x29, x30, [sp], #16
    1750:	ret
