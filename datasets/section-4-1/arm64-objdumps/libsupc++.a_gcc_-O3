In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libsupc++.a_gcc_-O3:

array_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv117__array_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv117__array_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv117__array_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv117__array_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv117__array_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv117__array_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x10                  	// #16
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

atexit_arm.o:     file format elf64-littleaarch64


atexit_thread.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_thread_atexit:

0000000000000000 <__cxa_thread_atexit>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_thread_atexit_impl>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

bad_alloc.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt9bad_alloc4whatEv:

0000000000000000 <_ZNKSt9bad_alloc4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt9bad_alloc4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt9bad_allocD2Ev:

0000000000000000 <_ZNSt9bad_allocD1Ev>:
   0:	adrp	x1, 0 <_ZNSt9bad_allocD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9exceptionD2Ev>

Disassembly of section .text._ZNSt9bad_allocD0Ev:

0000000000000000 <_ZNSt9bad_allocD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt9bad_allocD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

bad_array_length.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt16bad_array_length4whatEv:

0000000000000000 <_ZNKSt16bad_array_length4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt16bad_array_length4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt16bad_array_lengthD2Ev:

0000000000000000 <_ZNSt16bad_array_lengthD1Ev>:
   0:	adrp	x1, 0 <_ZNSt16bad_array_lengthD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9bad_allocD2Ev>

Disassembly of section .text._ZNSt16bad_array_lengthD0Ev:

0000000000000000 <_ZNSt16bad_array_lengthD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt16bad_array_lengthD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text.unlikely.__cxa_throw_bad_array_length:

0000000000000000 <__cxa_throw_bad_array_length>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x0, #0x8                   	// #8
   8:	mov	x29, sp
   c:	bl	0 <__cxa_allocate_exception>
  10:	adrp	x3, 0 <__cxa_throw_bad_array_length>
  14:	adrp	x2, 0 <__cxa_throw_bad_array_length>
  18:	adrp	x1, 0 <__cxa_throw_bad_array_length>
  1c:	ldr	x3, [x3]
  20:	ldr	x2, [x2]
  24:	add	x3, x3, #0x10
  28:	ldr	x1, [x1]
  2c:	str	x3, [x0]
  30:	bl	0 <__cxa_throw>

bad_array_new.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt20bad_array_new_length4whatEv:

0000000000000000 <_ZNKSt20bad_array_new_length4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt20bad_array_new_length4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt20bad_array_new_lengthD2Ev:

0000000000000000 <_ZNSt20bad_array_new_lengthD1Ev>:
   0:	adrp	x1, 0 <_ZNSt20bad_array_new_lengthD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9bad_allocD2Ev>

Disassembly of section .text._ZNSt20bad_array_new_lengthD0Ev:

0000000000000000 <_ZNSt20bad_array_new_lengthD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt20bad_array_new_lengthD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

bad_cast.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt8bad_cast4whatEv:

0000000000000000 <_ZNKSt8bad_cast4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt8bad_cast4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt8bad_castD2Ev:

0000000000000000 <_ZNSt8bad_castD1Ev>:
   0:	adrp	x1, 0 <_ZNSt8bad_castD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9exceptionD2Ev>

Disassembly of section .text._ZNSt8bad_castD0Ev:

0000000000000000 <_ZNSt8bad_castD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt8bad_castD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

bad_typeid.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt10bad_typeid4whatEv:

0000000000000000 <_ZNKSt10bad_typeid4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt10bad_typeid4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt10bad_typeidD2Ev:

0000000000000000 <_ZNSt10bad_typeidD1Ev>:
   0:	adrp	x1, 0 <_ZNSt10bad_typeidD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9exceptionD2Ev>

Disassembly of section .text._ZNSt10bad_typeidD0Ev:

0000000000000000 <_ZNSt10bad_typeidD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt10bad_typeidD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

class_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	ldr	x4, [x0]
   c:	str	xzr, [sp, #40]
  10:	str	xzr, [sp, #56]
  14:	add	x3, sp, #0x28
  18:	ldr	x4, [x4, #48]
  1c:	str	x19, [sp, #16]
  20:	mov	x19, x2
  24:	mov	x2, #0x1000000000          	// #68719476736
  28:	str	x2, [sp, #48]
  2c:	ldr	x2, [x19]
  30:	blr	x4
  34:	ldr	w0, [sp, #48]
  38:	and	w0, w0, #0x6
  3c:	cmp	w0, #0x6
  40:	b.ne	5c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>  // b.any
  44:	ldr	x1, [sp, #40]
  48:	str	x1, [x19]
  4c:	mov	w0, #0x1                   	// #1
  50:	ldr	x19, [sp, #16]
  54:	ldp	x29, x30, [sp], #64
  58:	ret
  5c:	mov	w0, #0x0                   	// #0
  60:	ldr	x19, [sp, #16]
  64:	ldp	x29, x30, [sp], #64
  68:	ret

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
   0:	cmp	x4, x2
   4:	mov	w0, #0x6                   	// #6
   8:	csinc	w0, w0, wzr, eq  // eq = none
   c:	ret

Disassembly of section .text._ZN10__cxxabiv117__class_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv117__class_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv117__class_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x10                  	// #16
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	cmp	x4, x6
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x20, x4
  14:	mov	x19, x7
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	w21, w2
  20:	ldr	x22, [x0, #8]
  24:	str	x23, [sp, #48]
  28:	mov	x23, x3
  2c:	b.eq	7c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>  // b.none
  30:	ldr	x1, [x3, #8]
  34:	cmp	x1, x22
  38:	b.eq	54 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x54>  // b.none
  3c:	ldrb	w0, [x22]
  40:	cmp	w0, #0x2a
  44:	b.eq	64 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x64>  // b.none
  48:	mov	x0, x22
  4c:	bl	0 <strcmp>
  50:	cbnz	w0, 64 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x64>
  54:	mov	w0, #0x1                   	// #1
  58:	str	x20, [x19]
  5c:	str	w21, [x19, #8]
  60:	str	w0, [x19, #16]
  64:	mov	w0, #0x0                   	// #0
  68:	ldp	x19, x20, [sp, #16]
  6c:	ldp	x21, x22, [sp, #32]
  70:	ldr	x23, [sp, #48]
  74:	ldp	x29, x30, [sp], #64
  78:	ret
  7c:	ldr	x1, [x5, #8]
  80:	cmp	x1, x22
  84:	b.eq	c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc0>  // b.none
  88:	ldrb	w0, [x22]
  8c:	cmp	w0, #0x2a
  90:	b.eq	b0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>  // b.none
  94:	mov	x0, x22
  98:	bl	0 <strcmp>
  9c:	cbz	w0, c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc0>
  a0:	ldr	x1, [x23, #8]
  a4:	cmp	x22, x1
  a8:	b.ne	48 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>  // b.any
  ac:	b	54 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x54>
  b0:	ldr	x0, [x3, #8]
  b4:	cmp	x0, x22
  b8:	b.ne	64 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x64>  // b.any
  bc:	b	54 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x54>
  c0:	str	w21, [x19, #12]
  c4:	mov	w0, #0x0                   	// #0
  c8:	ldp	x19, x20, [sp, #16]
  cc:	ldp	x21, x22, [sp, #32]
  d0:	ldr	x23, [sp, #48]
  d4:	ldp	x29, x30, [sp], #64
  d8:	ret

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	ldr	x0, [x0, #8]
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x20, x2
  14:	ldr	x1, [x1, #8]
  18:	str	x21, [sp, #32]
  1c:	mov	x19, x3
  20:	cmp	x0, x1
  24:	b.eq	40 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x40>  // b.none
  28:	ldrb	w2, [x0]
  2c:	mov	w21, #0x0                   	// #0
  30:	cmp	w2, #0x2a
  34:	b.eq	58 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x58>  // b.none
  38:	bl	0 <strcmp>
  3c:	cbnz	w0, 58 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x58>
  40:	mov	x0, #0x10                  	// #16
  44:	mov	w1, #0x6                   	// #6
  48:	mov	w21, #0x1                   	// #1
  4c:	str	x20, [x19]
  50:	str	w1, [x19, #8]
  54:	str	x0, [x19, #16]
  58:	mov	w0, w21
  5c:	ldp	x19, x20, [sp, #16]
  60:	ldr	x21, [sp, #32]
  64:	ldp	x29, x30, [sp], #48
  68:	ret

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x0
  10:	mov	x19, x1
  14:	ldr	x0, [x0, #8]
  18:	ldr	x1, [x1, #8]
  1c:	cmp	x0, x1
  20:	b.eq	88 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x88>  // b.none
  24:	stp	x21, x22, [sp, #32]
  28:	mov	x22, x2
  2c:	mov	w21, w3
  30:	ldrb	w2, [x0]
  34:	cmp	w2, #0x2a
  38:	b.eq	58 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>  // b.none
  3c:	bl	0 <strcmp>
  40:	cbnz	w0, 58 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
  44:	mov	w0, #0x1                   	// #1
  48:	ldp	x19, x20, [sp, #16]
  4c:	ldp	x21, x22, [sp, #32]
  50:	ldp	x29, x30, [sp], #48
  54:	ret
  58:	cmp	w21, #0x3
  5c:	b.hi	98 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x98>  // b.pmore
  60:	ldr	x3, [x19]
  64:	mov	x2, x22
  68:	mov	x1, x20
  6c:	mov	x0, x19
  70:	ldp	x19, x20, [sp, #16]
  74:	ldp	x21, x22, [sp, #32]
  78:	ldp	x29, x30, [sp], #48
  7c:	ldr	x3, [x3, #40]
  80:	mov	x16, x3
  84:	br	x16
  88:	mov	w0, #0x1                   	// #1
  8c:	ldp	x19, x20, [sp, #16]
  90:	ldp	x29, x30, [sp], #48
  94:	ret
  98:	mov	w0, #0x0                   	// #0
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x21, x22, [sp, #32]
  a4:	ldp	x29, x30, [sp], #48
  a8:	ret

del_op.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPv:

0000000000000000 <_ZdlPv>:
   0:	b	0 <free>

del_ops.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvm:

0000000000000000 <_ZdlPvm>:
   0:	b	0 <_ZdlPv>

del_opnt.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvRKSt9nothrow_t:

0000000000000000 <_ZdlPvRKSt9nothrow_t>:
   0:	b	0 <_ZdlPv>

del_opv.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPv:

0000000000000000 <_ZdaPv>:
   0:	b	0 <_ZdlPv>

del_opvs.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvm:

0000000000000000 <_ZdaPvm>:
   0:	b	0 <_ZdaPv>

del_opvnt.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvRKSt9nothrow_t:

0000000000000000 <_ZdaPvRKSt9nothrow_t>:
   0:	b	0 <_ZdaPv>

dyncast.o:     file format elf64-littleaarch64


Disassembly of section .text.__dynamic_cast:

0000000000000000 <__dynamic_cast>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x7, #0x1000000000          	// #68719476736
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x0
  14:	mov	x20, x3
  18:	ldr	x0, [x0]
  1c:	ldp	x4, x3, [x0, #-16]
  20:	str	x7, [sp, #72]
  24:	str	xzr, [sp, #56]
  28:	str	xzr, [sp, #64]
  2c:	ldr	x0, [x19, x4]
  30:	add	x4, x19, x4
  34:	ldur	x0, [x0, #-8]
  38:	cmp	x0, x3
  3c:	b.ne	c8 <__dynamic_cast+0xc8>  // b.any
  40:	mov	x5, x1
  44:	stp	x21, x22, [sp, #32]
  48:	mov	x22, x1
  4c:	ldr	x1, [x0]
  50:	mov	x6, x19
  54:	mov	x3, x2
  58:	mov	x21, x2
  5c:	add	x7, sp, #0x38
  60:	mov	w2, #0x6                   	// #6
  64:	ldr	x8, [x1, #56]
  68:	mov	x1, x20
  6c:	blr	x8
  70:	ldr	x6, [sp, #56]
  74:	mov	x0, x6
  78:	cbz	x6, c4 <__dynamic_cast+0xc4>
  7c:	ldr	w1, [sp, #72]
  80:	and	w2, w1, #0x6
  84:	cmp	w2, #0x6
  88:	b.eq	d8 <__dynamic_cast+0xd8>  // b.none
  8c:	ldp	w3, w4, [sp, #64]
  90:	and	w3, w4, w3
  94:	and	w3, w3, #0x6
  98:	cmp	w3, #0x6
  9c:	b.eq	d8 <__dynamic_cast+0xd8>  // b.none
  a0:	mov	w0, #0x5                   	// #5
  a4:	and	w4, w4, w0
  a8:	cmp	w4, #0x4
  ac:	b.eq	c4 <__dynamic_cast+0xc4>  // b.none
  b0:	cbnz	w1, c4 <__dynamic_cast+0xc4>
  b4:	tbnz	x20, #63, e8 <__dynamic_cast+0xe8>
  b8:	add	x20, x6, x20
  bc:	cmp	x19, x20
  c0:	b.eq	120 <__dynamic_cast+0x120>  // b.none
  c4:	ldp	x21, x22, [sp, #32]
  c8:	mov	x0, #0x0                   	// #0
  cc:	ldp	x19, x20, [sp, #16]
  d0:	ldp	x29, x30, [sp], #80
  d4:	ret
  d8:	ldp	x19, x20, [sp, #16]
  dc:	ldp	x21, x22, [sp, #32]
  e0:	ldp	x29, x30, [sp], #80
  e4:	ret
  e8:	cmn	x20, #0x2
  ec:	b.eq	c4 <__dynamic_cast+0xc4>  // b.none
  f0:	ldr	x5, [x21]
  f4:	mov	x4, x19
  f8:	mov	x3, x22
  fc:	mov	x2, x6
 100:	mov	x1, x20
 104:	mov	x0, x21
 108:	ldr	x5, [x5, #64]
 10c:	blr	x5
 110:	and	w0, w0, #0x6
 114:	cmp	w0, #0x6
 118:	b.ne	c4 <__dynamic_cast+0xc4>  // b.any
 11c:	ldr	x6, [sp, #56]
 120:	mov	x0, x6
 124:	ldp	x19, x20, [sp, #16]
 128:	ldp	x21, x22, [sp, #32]
 12c:	ldp	x29, x30, [sp], #80
 130:	ret

eh_alloc.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNK9__gnu_cxx24__concurrence_lock_error4whatEv:

0000000000000000 <_ZNK9__gnu_cxx24__concurrence_lock_error4whatEv>:
   0:	adrp	x0, 0 <_ZNK9__gnu_cxx24__concurrence_lock_error4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNK9__gnu_cxx26__concurrence_unlock_error4whatEv:

0000000000000000 <_ZNK9__gnu_cxx26__concurrence_unlock_error4whatEv>:
   0:	adrp	x0, 0 <_ZNK9__gnu_cxx26__concurrence_unlock_error4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZN9__gnu_cxx24__concurrence_lock_errorD2Ev:

0000000000000000 <_ZN9__gnu_cxx24__concurrence_lock_errorD1Ev>:
   0:	adrp	x1, 0 <_ZN9__gnu_cxx24__concurrence_lock_errorD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9exceptionD2Ev>

Disassembly of section .text._ZN9__gnu_cxx26__concurrence_unlock_errorD2Ev:

0000000000000000 <_ZN9__gnu_cxx26__concurrence_unlock_errorD1Ev>:
   0:	adrp	x1, 0 <_ZN9__gnu_cxx26__concurrence_unlock_errorD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9exceptionD2Ev>

Disassembly of section .text._ZN9__gnu_cxx24__concurrence_lock_errorD0Ev:

0000000000000000 <_ZN9__gnu_cxx24__concurrence_lock_errorD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	adrp	x1, 0 <_ZN9__gnu_cxx24__concurrence_lock_errorD0Ev>
   8:	mov	x29, sp
   c:	ldr	x1, [x1]
  10:	str	x19, [sp, #16]
  14:	mov	x19, x0
  18:	add	x1, x1, #0x10
  1c:	str	x1, [x0]
  20:	bl	0 <_ZNSt9exceptionD2Ev>
  24:	mov	x0, x19
  28:	mov	x1, #0x8                   	// #8
  2c:	ldr	x19, [sp, #16]
  30:	ldp	x29, x30, [sp], #32
  34:	b	0 <_ZdlPvm>

Disassembly of section .text._ZN9__gnu_cxx26__concurrence_unlock_errorD0Ev:

0000000000000000 <_ZN9__gnu_cxx26__concurrence_unlock_errorD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	adrp	x1, 0 <_ZN9__gnu_cxx26__concurrence_unlock_errorD0Ev>
   8:	mov	x29, sp
   c:	ldr	x1, [x1]
  10:	str	x19, [sp, #16]
  14:	mov	x19, x0
  18:	add	x1, x1, #0x10
  1c:	str	x1, [x0]
  20:	bl	0 <_ZNSt9exceptionD2Ev>
  24:	mov	x0, x19
  28:	mov	x1, #0x8                   	// #8
  2c:	ldr	x19, [sp, #16]
  30:	ldp	x29, x30, [sp], #32
  34:	b	0 <_ZdlPvm>

Disassembly of section .text.unlikely._ZN9__gnu_cxx30__throw_concurrence_lock_errorEv:

0000000000000000 <_ZN9__gnu_cxx30__throw_concurrence_lock_errorEv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x0, #0x8                   	// #8
   8:	mov	x29, sp
   c:	bl	0 <_ZN9__gnu_cxx30__throw_concurrence_lock_errorEv>
  10:	adrp	x3, 0 <_ZN9__gnu_cxx30__throw_concurrence_lock_errorEv>
  14:	adrp	x2, 0 <_ZN9__gnu_cxx30__throw_concurrence_lock_errorEv>
  18:	adrp	x1, 0 <_ZN9__gnu_cxx30__throw_concurrence_lock_errorEv>
  1c:	ldr	x3, [x3]
  20:	ldr	x2, [x2]
  24:	add	x3, x3, #0x10
  28:	ldr	x1, [x1]
  2c:	str	x3, [x0]
  30:	bl	0 <__cxa_throw>

Disassembly of section .text._ZN12_GLOBAL__N_14pool4freeEPv.constprop.0:

0000000000000000 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	adrp	x20, 0 <__pthread_key_create>
  10:	mov	x19, x0
  14:	ldr	x0, [x20]
  18:	str	x21, [sp, #32]
  1c:	adrp	x21, 0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
  20:	cbz	x0, 30 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
  24:	add	x0, x21, #0x0
  28:	bl	0 <pthread_mutex_lock>
  2c:	cbnz	w0, 128 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x128>
  30:	add	x0, x21, #0x0
  34:	sub	x5, x19, #0x10
  38:	ldr	x1, [x0, #48]
  3c:	cbz	x1, b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xb8>
  40:	ldur	x6, [x19, #-16]
  44:	add	x4, x5, x6
  48:	cmp	x1, x4
  4c:	b.hi	b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xb8>  // b.pmore
  50:	ldr	x2, [x1, #8]
  54:	b.eq	10c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x10c>  // b.none
  58:	add	x0, x0, #0x30
  5c:	cbnz	x2, 78 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x78>
  60:	b	94 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x94>
  64:	ldr	x3, [x2, #8]
  68:	add	x0, x1, #0x8
  6c:	cbz	x3, f4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xf4>
  70:	mov	x1, x2
  74:	mov	x2, x3
  78:	cmp	x4, x2
  7c:	b.cc	64 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x64>  // b.lo, b.ul, b.last
  80:	b.ne	120 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x120>  // b.any
  84:	ldp	x2, x3, [x4]
  88:	str	x3, [x1, #8]
  8c:	ldr	x1, [x0]
  90:	add	x6, x6, x2
  94:	ldr	x2, [x1]
  98:	add	x3, x1, x2
  9c:	cmp	x5, x3
  a0:	b.eq	e8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xe8>  // b.none
  a4:	ldr	x1, [x1, #8]
  a8:	stp	x6, x1, [x19, #-16]
  ac:	ldr	x0, [x0]
  b0:	str	x5, [x0, #8]
  b4:	b	c4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xc4>
  b8:	add	x0, x21, #0x0
  bc:	stur	x1, [x19, #-8]
  c0:	str	x5, [x0, #48]
  c4:	ldr	x20, [x20]
  c8:	cbz	x20, d8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xd8>
  cc:	add	x0, x21, #0x0
  d0:	bl	0 <pthread_mutex_unlock>
  d4:	cbnz	w0, 12c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x12c>
  d8:	ldp	x19, x20, [sp, #16]
  dc:	ldr	x21, [sp, #32]
  e0:	ldp	x29, x30, [sp], #48
  e4:	ret
  e8:	add	x6, x2, x6
  ec:	str	x6, [x1]
  f0:	b	c4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xc4>
  f4:	ldr	x1, [x1, #8]
  f8:	ldr	x2, [x1]
  fc:	add	x3, x1, x2
 100:	cmp	x5, x3
 104:	b.ne	a4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xa4>  // b.any
 108:	b	e8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xe8>
 10c:	ldr	x1, [x1]
 110:	add	x6, x1, x6
 114:	stp	x6, x2, [x19, #-16]
 118:	str	x5, [x0, #48]
 11c:	b	c4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xc4>
 120:	ldr	x1, [x0]
 124:	b	94 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x94>
 128:	bl	0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 12c:	mov	x0, #0x8                   	// #8
 130:	bl	0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 134:	adrp	x3, 0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 138:	adrp	x2, 0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 13c:	adrp	x1, 0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 140:	ldr	x3, [x3]
 144:	ldr	x2, [x2]
 148:	add	x3, x3, #0x10
 14c:	ldr	x1, [x1]
 150:	str	x3, [x0]
 154:	bl	0 <__cxa_throw>
 158:	cmn	x1, #0x1
 15c:	b.ne	164 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x164>  // b.any
 160:	bl	0 <__cxa_call_unexpected>
 164:	bl	0 <_Unwind_Resume>

Disassembly of section .text._ZN12_GLOBAL__N_14pool8allocateEm.constprop.0:

0000000000000000 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	adrp	x20, 0 <__pthread_key_create>
  10:	mov	x19, x0
  14:	ldr	x0, [x20]
  18:	str	x21, [sp, #32]
  1c:	adrp	x21, 0 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0>
  20:	cbz	x0, 30 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x30>
  24:	add	x0, x21, #0x0
  28:	bl	0 <pthread_mutex_lock>
  2c:	cbnz	w0, cc <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0xcc>
  30:	add	x3, x21, #0x0
  34:	adds	x0, x19, #0x10
  38:	mov	x19, #0x10                  	// #16
  3c:	csel	x0, x0, x19, cc  // cc = lo, ul, last
  40:	add	x0, x0, #0xf
  44:	ldr	x19, [x3, #48]
  48:	and	x0, x0, #0xfffffffffffffff0
  4c:	cbz	x19, 98 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x98>
  50:	add	x3, x3, #0x30
  54:	b	60 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x60>
  58:	add	x3, x2, #0x8
  5c:	cbz	x19, 98 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x98>
  60:	mov	x2, x19
  64:	ldp	x1, x19, [x19]
  68:	cmp	x0, x1
  6c:	b.hi	58 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x58>  // b.pmore
  70:	sub	x1, x1, x0
  74:	cmp	x1, #0xf
  78:	b.ls	c0 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0xc0>  // b.plast
  7c:	add	x4, x2, x0
  80:	str	x19, [x4, #8]
  84:	str	x1, [x2, x0]
  88:	ldr	x2, [x3]
  8c:	add	x19, x2, #0x10
  90:	str	x0, [x2]
  94:	str	x4, [x3]
  98:	ldr	x20, [x20]
  9c:	cbz	x20, ac <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0xac>
  a0:	add	x0, x21, #0x0
  a4:	bl	0 <pthread_mutex_unlock>
  a8:	cbnz	w0, d0 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0xd0>
  ac:	mov	x0, x19
  b0:	ldp	x19, x20, [sp, #16]
  b4:	ldr	x21, [sp, #32]
  b8:	ldp	x29, x30, [sp], #48
  bc:	ret
  c0:	str	x19, [x3]
  c4:	add	x19, x2, #0x10
  c8:	b	98 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x98>
  cc:	bl	0 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0>
  d0:	mov	x0, #0x8                   	// #8
  d4:	bl	0 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0>
  d8:	adrp	x3, 0 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0>
  dc:	adrp	x2, 0 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0>
  e0:	adrp	x1, 0 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0>
  e4:	ldr	x3, [x3]
  e8:	ldr	x2, [x2]
  ec:	add	x3, x3, #0x10
  f0:	ldr	x1, [x1]
  f4:	str	x3, [x0]
  f8:	bl	0 <__cxa_throw>
  fc:	cmn	x1, #0x1
 100:	b.ne	108 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x108>  // b.any
 104:	bl	0 <__cxa_call_unexpected>
 108:	bl	0 <_Unwind_Resume>

Disassembly of section .text._ZN9__gnu_cxx9__freeresEv:

0000000000000000 <_ZN9__gnu_cxx9__freeresEv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	adrp	x19, 0 <_ZN9__gnu_cxx9__freeresEv>
  10:	add	x19, x19, #0x0
  14:	ldr	x0, [x19, #56]
  18:	cbz	x0, 24 <_ZN9__gnu_cxx9__freeresEv+0x24>
  1c:	bl	0 <free>
  20:	str	xzr, [x19, #56]
  24:	ldr	x19, [sp, #16]
  28:	ldp	x29, x30, [sp], #32
  2c:	ret

Disassembly of section .text.__cxa_allocate_exception:

0000000000000000 <__cxa_allocate_exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	add	x19, x0, #0x80
  10:	mov	x0, x19
  14:	bl	0 <malloc>
  18:	mov	x1, x0
  1c:	cbz	x0, 50 <__cxa_allocate_exception+0x50>
  20:	stp	xzr, xzr, [x1]
  24:	add	x0, x1, #0x80
  28:	stp	xzr, xzr, [x1, #16]
  2c:	stp	xzr, xzr, [x1, #32]
  30:	stp	xzr, xzr, [x1, #48]
  34:	stp	xzr, xzr, [x1, #64]
  38:	stp	xzr, xzr, [x1, #80]
  3c:	stp	xzr, xzr, [x1, #96]
  40:	stp	xzr, xzr, [x1, #112]
  44:	ldr	x19, [sp, #16]
  48:	ldp	x29, x30, [sp], #32
  4c:	ret
  50:	mov	x0, x19
  54:	bl	0 <__cxa_allocate_exception>
  58:	mov	x1, x0
  5c:	cbnz	x0, 20 <__cxa_allocate_exception+0x20>
  60:	bl	0 <_ZSt9terminatev>

Disassembly of section .text.__cxa_free_exception:

0000000000000000 <__cxa_free_exception>:
   0:	adrp	x1, 0 <__cxa_free_exception>
   4:	add	x1, x1, #0x0
   8:	sub	x0, x0, #0x80
   c:	ldr	x2, [x1, #56]
  10:	cmp	x0, x2
  14:	b.ls	3c <__cxa_free_exception+0x3c>  // b.plast
  18:	ldr	x1, [x1, #64]
  1c:	add	x2, x2, x1
  20:	cmp	x0, x2
  24:	b.cs	3c <__cxa_free_exception+0x3c>  // b.hs, b.nlast
  28:	stp	x29, x30, [sp, #-16]!
  2c:	mov	x29, sp
  30:	bl	0 <__cxa_free_exception>
  34:	ldp	x29, x30, [sp], #16
  38:	ret
  3c:	b	0 <free>

Disassembly of section .text.__cxa_allocate_dependent_exception:

0000000000000000 <__cxa_allocate_dependent_exception>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x0, #0x70                  	// #112
   8:	mov	x29, sp
   c:	bl	0 <malloc>
  10:	cbz	x0, 38 <__cxa_allocate_dependent_exception+0x38>
  14:	stp	xzr, xzr, [x0]
  18:	stp	xzr, xzr, [x0, #16]
  1c:	stp	xzr, xzr, [x0, #32]
  20:	stp	xzr, xzr, [x0, #48]
  24:	stp	xzr, xzr, [x0, #64]
  28:	stp	xzr, xzr, [x0, #80]
  2c:	stp	xzr, xzr, [x0, #96]
  30:	ldp	x29, x30, [sp], #16
  34:	ret
  38:	mov	x0, #0x70                  	// #112
  3c:	bl	0 <__cxa_allocate_dependent_exception>
  40:	cbnz	x0, 14 <__cxa_allocate_dependent_exception+0x14>
  44:	bl	0 <_ZSt9terminatev>

Disassembly of section .text.__cxa_free_dependent_exception:

0000000000000000 <__cxa_free_dependent_exception>:
   0:	adrp	x2, 0 <__cxa_free_dependent_exception>
   4:	add	x2, x2, #0x0
   8:	mov	x1, x0
   c:	ldr	x3, [x2, #56]
  10:	cmp	x0, x3
  14:	b.ls	3c <__cxa_free_dependent_exception+0x3c>  // b.plast
  18:	ldr	x2, [x2, #64]
  1c:	add	x3, x3, x2
  20:	cmp	x0, x3
  24:	b.cs	3c <__cxa_free_dependent_exception+0x3c>  // b.hs, b.nlast
  28:	stp	x29, x30, [sp, #-16]!
  2c:	mov	x29, sp
  30:	bl	0 <__cxa_free_dependent_exception>
  34:	ldp	x29, x30, [sp], #16
  38:	ret
  3c:	mov	x0, x1
  40:	b	0 <free>

Disassembly of section .text.startup._GLOBAL__sub_I_eh_alloc.cc:

0000000000000000 <_GLOBAL__sub_I_eh_alloc.cc>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	adrp	x20, 0 <_GLOBAL__sub_I_eh_alloc.cc>
  10:	add	x19, x20, #0x0
  14:	str	x21, [sp, #32]
  18:	mov	x21, #0x1c00                	// #7168
  1c:	movk	x21, #0x1, lsl #16
  20:	mov	x0, x21
  24:	stp	xzr, xzr, [x19]
  28:	stp	xzr, xzr, [x19, #16]
  2c:	stp	xzr, xzr, [x19, #32]
  30:	str	x21, [x19, #64]
  34:	bl	0 <malloc>
  38:	str	x0, [x19, #56]
  3c:	cbz	x0, 5c <_GLOBAL__sub_I_eh_alloc.cc+0x5c>
  40:	stp	x21, xzr, [x0]
  44:	add	x20, x20, #0x0
  48:	ldr	x21, [sp, #32]
  4c:	str	x0, [x20, #48]
  50:	ldp	x19, x20, [sp, #16]
  54:	ldp	x29, x30, [sp], #48
  58:	ret
  5c:	str	xzr, [x19, #64]
  60:	b	44 <_GLOBAL__sub_I_eh_alloc.cc+0x44>

eh_arm.o:     file format elf64-littleaarch64


eh_aux_runtime.o:     file format elf64-littleaarch64


Disassembly of section .text.unlikely.__cxa_bad_cast:

0000000000000000 <__cxa_bad_cast>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x0, #0x8                   	// #8
   8:	mov	x29, sp
   c:	bl	0 <__cxa_allocate_exception>
  10:	adrp	x3, 0 <_ZTVSt8bad_cast>
  14:	adrp	x2, 0 <_ZNSt8bad_castD1Ev>
  18:	adrp	x1, 0 <_ZTISt8bad_cast>
  1c:	ldr	x3, [x3]
  20:	ldr	x2, [x2]
  24:	add	x3, x3, #0x10
  28:	ldr	x1, [x1]
  2c:	str	x3, [x0]
  30:	bl	0 <__cxa_throw>

Disassembly of section .text.unlikely.__cxa_bad_typeid:

0000000000000000 <__cxa_bad_typeid>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x0, #0x8                   	// #8
   8:	mov	x29, sp
   c:	bl	0 <__cxa_allocate_exception>
  10:	adrp	x3, 0 <_ZTVSt10bad_typeid>
  14:	adrp	x2, 0 <_ZNSt10bad_typeidD1Ev>
  18:	adrp	x1, 0 <_ZTISt10bad_typeid>
  1c:	ldr	x3, [x3]
  20:	ldr	x2, [x2]
  24:	add	x3, x3, #0x10
  28:	ldr	x1, [x1]
  2c:	str	x3, [x0]
  30:	bl	0 <__cxa_throw>

Disassembly of section .text.unlikely.__cxa_throw_bad_array_new_length:

0000000000000000 <__cxa_throw_bad_array_new_length>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x0, #0x8                   	// #8
   8:	mov	x29, sp
   c:	bl	0 <__cxa_allocate_exception>
  10:	adrp	x3, 0 <_ZTVSt20bad_array_new_length>
  14:	adrp	x2, 0 <_ZNSt20bad_array_new_lengthD1Ev>
  18:	adrp	x1, 0 <_ZTISt20bad_array_new_length>
  1c:	ldr	x3, [x3]
  20:	ldr	x2, [x2]
  24:	add	x3, x3, #0x10
  28:	ldr	x1, [x1]
  2c:	str	x3, [x0]
  30:	bl	0 <__cxa_throw>

eh_call.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_call_terminate:

0000000000000000 <__cxa_call_terminate>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	cbz	x0, 38 <__cxa_call_terminate+0x38>
  10:	mov	x19, x0
  14:	bl	0 <__cxa_begin_catch>
  18:	mov	x1, #0xd500                	// #54528
  1c:	movk	x1, #0xbcd4, lsl #16
  20:	ldr	x0, [x19]
  24:	movk	x1, #0xaabc, lsl #32
  28:	movk	x1, #0xb8b1, lsl #48
  2c:	add	x0, x0, x1
  30:	cmp	x0, #0x1
  34:	b.ls	3c <__cxa_call_terminate+0x3c>  // b.plast
  38:	bl	0 <_ZSt9terminatev>
  3c:	ldur	x0, [x19, #-56]
  40:	bl	0 <_ZN10__cxxabiv111__terminateEPFvvE>

eh_catch.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_get_exception_ptr:

0000000000000000 <__cxa_get_exception_ptr>:
   0:	ldur	x0, [x0, #-8]
   4:	ret

Disassembly of section .text.__cxa_begin_catch:

0000000000000000 <__cxa_begin_catch>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <__cxa_get_globals>
  14:	mov	x1, x0
  18:	mov	x2, x19
  1c:	mov	x4, #0xd500                	// #54528
  20:	movk	x4, #0xbcd4, lsl #16
  24:	movk	x4, #0xaabc, lsl #32
  28:	ldr	x3, [x2], #-80
  2c:	movk	x4, #0xb8b1, lsl #48
  30:	ldr	x0, [x0]
  34:	add	x3, x3, x4
  38:	cmp	x3, #0x1
  3c:	b.ls	54 <__cxa_begin_catch+0x54>  // b.plast
  40:	cbnz	x0, 98 <__cxa_begin_catch+0x98>
  44:	str	x2, [x1]
  48:	ldr	x19, [sp, #16]
  4c:	ldp	x29, x30, [sp], #32
  50:	ret
  54:	ldur	w3, [x19, #-40]
  58:	mov	w5, #0x1                   	// #1
  5c:	ldr	w4, [x1, #8]
  60:	cmp	w3, #0x0
  64:	sub	w5, w5, w3
  68:	csinc	w3, w5, w3, lt  // lt = tstop
  6c:	stur	w3, [x19, #-40]
  70:	sub	w3, w4, #0x1
  74:	str	w3, [x1, #8]
  78:	cmp	x0, x2
  7c:	b.eq	88 <__cxa_begin_catch+0x88>  // b.none
  80:	stur	x0, [x19, #-48]
  84:	str	x2, [x1]
  88:	ldur	x0, [x19, #-8]
  8c:	ldr	x19, [sp, #16]
  90:	ldp	x29, x30, [sp], #32
  94:	ret
  98:	bl	0 <_ZSt9terminatev>

Disassembly of section .text.__cxa_end_catch:

0000000000000000 <__cxa_end_catch>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals_fast>
   c:	ldr	x1, [x0]
  10:	cbz	x1, 50 <__cxa_end_catch+0x50>
  14:	mov	x3, #0xd500                	// #54528
  18:	ldr	x2, [x1, #80]
  1c:	movk	x3, #0xbcd4, lsl #16
  20:	movk	x3, #0xaabc, lsl #32
  24:	movk	x3, #0xb8b1, lsl #48
  28:	add	x2, x2, x3
  2c:	cmp	x2, #0x1
  30:	b.hi	70 <__cxa_end_catch+0x70>  // b.pmore
  34:	ldr	w2, [x1, #40]
  38:	tbnz	w2, #31, 58 <__cxa_end_catch+0x58>
  3c:	subs	w2, w2, #0x1
  40:	b.eq	80 <__cxa_end_catch+0x80>  // b.none
  44:	cmn	w2, #0x1
  48:	b.eq	94 <__cxa_end_catch+0x94>  // b.none
  4c:	str	w2, [x1, #40]
  50:	ldp	x29, x30, [sp], #16
  54:	ret
  58:	adds	w2, w2, #0x1
  5c:	b.ne	4c <__cxa_end_catch+0x4c>  // b.any
  60:	ldr	x3, [x1, #32]
  64:	str	x3, [x0]
  68:	str	w2, [x1, #40]
  6c:	b	50 <__cxa_end_catch+0x50>
  70:	str	xzr, [x0]
  74:	add	x0, x1, #0x50
  78:	ldp	x29, x30, [sp], #16
  7c:	b	0 <_Unwind_DeleteException>
  80:	ldr	x2, [x1, #32]
  84:	str	x2, [x0]
  88:	add	x0, x1, #0x50
  8c:	ldp	x29, x30, [sp], #16
  90:	b	0 <_Unwind_DeleteException>
  94:	bl	0 <_ZSt9terminatev>

Disassembly of section .text._ZSt18uncaught_exceptionv:

0000000000000000 <_ZSt18uncaught_exceptionv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals>
   c:	ldr	w0, [x0, #8]
  10:	ldp	x29, x30, [sp], #16
  14:	cmp	w0, #0x0
  18:	cset	w0, ne  // ne = any
  1c:	ret

Disassembly of section .text._ZSt19uncaught_exceptionsv:

0000000000000000 <_ZSt19uncaught_exceptionsv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals>
   c:	ldr	w0, [x0, #8]
  10:	ldp	x29, x30, [sp], #16
  14:	ret

eh_exception.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt9exceptionD2Ev:

0000000000000000 <_ZNSt9exceptionD1Ev>:
   0:	ret

Disassembly of section .text._ZNSt13bad_exceptionD2Ev:

0000000000000000 <_ZNSt13bad_exceptionD1Ev>:
   0:	adrp	x1, 0 <_ZNSt13bad_exceptionD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt13bad_exceptionD1Ev>

Disassembly of section .text._ZNKSt9exception4whatEv:

0000000000000000 <_ZNKSt9exception4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt9exception4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNKSt13bad_exception4whatEv:

0000000000000000 <_ZNKSt13bad_exception4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt13bad_exception4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt9exceptionD0Ev:

0000000000000000 <_ZNSt9exceptionD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt9exceptionD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNSt13bad_exceptionD0Ev:

0000000000000000 <_ZNSt13bad_exceptionD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt13bad_exceptionD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZN10__cxxabiv115__forced_unwindD2Ev:

0000000000000000 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
   0:	ret

Disassembly of section .text._ZN10__cxxabiv115__forced_unwindD0Ev:

0000000000000000 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv115__forced_unwindD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZN10__cxxabiv119__foreign_exceptionD2Ev:

0000000000000000 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
   0:	ret

Disassembly of section .text._ZN10__cxxabiv119__foreign_exceptionD0Ev:

0000000000000000 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZGTtNKSt9exceptionD1Ev:

0000000000000000 <_ZGTtNKSt9exceptionD1Ev>:
   0:	ret

Disassembly of section .text._ZGTtNKSt9exception4whatEv:

0000000000000000 <_ZGTtNKSt9exception4whatEv>:
   0:	b	0 <_ZGTtNKSt9exception4whatEv>

Disassembly of section .text._ZGTtNKSt13bad_exceptionD1Ev:

0000000000000000 <_ZGTtNKSt13bad_exceptionD1Ev>:
   0:	ret

Disassembly of section .text._ZGTtNKSt13bad_exception4whatEv:

0000000000000000 <_ZGTtNKSt13bad_exception4whatEv>:
   0:	b	0 <_ZGTtNKSt13bad_exception4whatEv>

eh_globals.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_get_globals_fast:

0000000000000000 <__cxa_get_globals_fast>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mrs	x1, tpidr_el0
   8:	adrp	x0, 0 <__cxa_get_globals_fast>
   c:	ldr	x2, [x0]
  10:	add	x0, x0, #0x0
  14:	blr	x2
  18:	mov	x29, sp
  1c:	add	x0, x1, x0
  20:	ldp	x29, x30, [sp], #16
  24:	ret

Disassembly of section .text.__cxa_get_globals:

0000000000000000 <__cxa_get_globals>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mrs	x1, tpidr_el0
   8:	adrp	x0, 0 <__cxa_get_globals>
   c:	ldr	x2, [x0]
  10:	add	x0, x0, #0x0
  14:	blr	x2
  18:	mov	x29, sp
  1c:	add	x0, x1, x0
  20:	ldp	x29, x30, [sp], #16
  24:	ret

eh_personality.o:     file format elf64-littleaarch64


Disassembly of section .text._ZL28read_encoded_value_with_basehmPKhPm:

0000000000000000 <_ZL28read_encoded_value_with_basehmPKhPm>:
   0:	and	w5, w0, #0xff
   4:	cmp	w5, #0x50
   8:	b.eq	120 <_ZL28read_encoded_value_with_basehmPKhPm+0x120>  // b.none
   c:	and	w4, w5, #0xf
  10:	cmp	w4, #0x4
  14:	b.eq	30 <_ZL28read_encoded_value_with_basehmPKhPm+0x30>  // b.none
  18:	b.ls	44 <_ZL28read_encoded_value_with_basehmPKhPm+0x44>  // b.plast
  1c:	cmp	w4, #0xb
  20:	b.eq	144 <_ZL28read_encoded_value_with_basehmPKhPm+0x144>  // b.none
  24:	b.ls	a0 <_ZL28read_encoded_value_with_basehmPKhPm+0xa0>  // b.plast
  28:	cmp	w4, #0xc
  2c:	b.ne	154 <_ZL28read_encoded_value_with_basehmPKhPm+0x154>  // b.any
  30:	mov	x0, x2
  34:	ldr	x4, [x0], #8
  38:	cbnz	x4, 100 <_ZL28read_encoded_value_with_basehmPKhPm+0x100>
  3c:	str	x4, [x3]
  40:	ret
  44:	cmp	w4, #0x2
  48:	b.eq	134 <_ZL28read_encoded_value_with_basehmPKhPm+0x134>  // b.none
  4c:	b.ls	68 <_ZL28read_encoded_value_with_basehmPKhPm+0x68>  // b.plast
  50:	cmp	w4, #0x3
  54:	b.ne	154 <_ZL28read_encoded_value_with_basehmPKhPm+0x154>  // b.any
  58:	mov	x0, x2
  5c:	ldr	w4, [x0], #4
  60:	cbz	x4, 3c <_ZL28read_encoded_value_with_basehmPKhPm+0x3c>
  64:	b	100 <_ZL28read_encoded_value_with_basehmPKhPm+0x100>
  68:	cbz	w4, 30 <_ZL28read_encoded_value_with_basehmPKhPm+0x30>
  6c:	cmp	w4, #0x1
  70:	b.ne	154 <_ZL28read_encoded_value_with_basehmPKhPm+0x154>  // b.any
  74:	mov	x0, x2
  78:	mov	x4, #0x0                   	// #0
  7c:	mov	w7, #0x0                   	// #0
  80:	ldrb	w8, [x0], #1
  84:	and	x6, x8, #0x7f
  88:	lsl	x6, x6, x7
  8c:	add	w7, w7, #0x7
  90:	orr	x4, x4, x6
  94:	tbnz	w8, #7, 80 <_ZL28read_encoded_value_with_basehmPKhPm+0x80>
  98:	cbz	x4, 3c <_ZL28read_encoded_value_with_basehmPKhPm+0x3c>
  9c:	b	100 <_ZL28read_encoded_value_with_basehmPKhPm+0x100>
  a0:	cmp	w4, #0x9
  a4:	b.eq	c0 <_ZL28read_encoded_value_with_basehmPKhPm+0xc0>  // b.none
  a8:	cmp	w4, #0xa
  ac:	b.ne	154 <_ZL28read_encoded_value_with_basehmPKhPm+0x154>  // b.any
  b0:	mov	x0, x2
  b4:	ldrsh	x4, [x0], #2
  b8:	cbz	x4, 3c <_ZL28read_encoded_value_with_basehmPKhPm+0x3c>
  bc:	b	100 <_ZL28read_encoded_value_with_basehmPKhPm+0x100>
  c0:	mov	x0, x2
  c4:	mov	x4, #0x0                   	// #0
  c8:	mov	w7, #0x0                   	// #0
  cc:	ldrb	w8, [x0], #1
  d0:	and	x6, x8, #0x7f
  d4:	lsl	x6, x6, x7
  d8:	add	w7, w7, #0x7
  dc:	orr	x4, x4, x6
  e0:	tbnz	w8, #7, cc <_ZL28read_encoded_value_with_basehmPKhPm+0xcc>
  e4:	cmp	w7, #0x3f
  e8:	b.hi	38 <_ZL28read_encoded_value_with_basehmPKhPm+0x38>  // b.pmore
  ec:	tbz	w8, #6, 38 <_ZL28read_encoded_value_with_basehmPKhPm+0x38>
  f0:	mov	x6, #0xffffffffffffffff    	// #-1
  f4:	lsl	x7, x6, x7
  f8:	orr	x4, x4, x7
  fc:	nop
 100:	and	w6, w5, #0x70
 104:	cmp	w6, #0x10
 108:	csel	x1, x2, x1, eq  // eq = none
 10c:	add	x4, x4, x1
 110:	tbz	w5, #7, 3c <_ZL28read_encoded_value_with_basehmPKhPm+0x3c>
 114:	ldr	x4, [x4]
 118:	str	x4, [x3]
 11c:	ret
 120:	add	x0, x2, #0x7
 124:	and	x0, x0, #0xfffffffffffffff8
 128:	ldr	x4, [x0], #8
 12c:	str	x4, [x3]
 130:	ret
 134:	mov	x0, x2
 138:	ldrh	w4, [x0], #2
 13c:	cbz	x4, 3c <_ZL28read_encoded_value_with_basehmPKhPm+0x3c>
 140:	b	100 <_ZL28read_encoded_value_with_basehmPKhPm+0x100>
 144:	mov	x0, x2
 148:	ldrsw	x4, [x0], #4
 14c:	cbz	x4, 3c <_ZL28read_encoded_value_with_basehmPKhPm+0x3c>
 150:	b	100 <_ZL28read_encoded_value_with_basehmPKhPm+0x100>
 154:	stp	x29, x30, [sp, #-16]!
 158:	mov	x29, sp
 15c:	bl	0 <abort>

Disassembly of section .text._ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl:

0000000000000000 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x23, x24, [sp, #48]
   c:	mov	x23, x0
  10:	mvn	x0, x3
  14:	stp	x19, x20, [sp, #16]
  18:	mov	x20, x1
  1c:	ldr	x19, [x23, #24]
  20:	stp	x21, x22, [sp, #32]
  24:	mov	x22, x2
  28:	add	x21, sp, #0x48
  2c:	add	x19, x19, x0
  30:	mov	x6, #0x0                   	// #0
  34:	mov	w4, #0x0                   	// #0
  38:	ldrb	w5, [x19], #1
  3c:	and	x3, x5, #0x7f
  40:	lsl	x3, x3, x4
  44:	add	w4, w4, #0x7
  48:	orr	x6, x6, x3
  4c:	tbnz	w5, #7, 38 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x38>
  50:	cbz	x6, 144 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x144>
  54:	ldrb	w0, [x23, #40]
  58:	cmp	w0, #0xff
  5c:	b.eq	13c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x13c>  // b.none
  60:	and	w3, w0, #0x7
  64:	cmp	w3, #0x2
  68:	b.eq	134 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x134>  // b.none
  6c:	b.ls	104 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x104>  // b.plast
  70:	cmp	w3, #0x3
  74:	neg	x2, x6, lsl #2
  78:	b.ne	f4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xf4>  // b.any
  7c:	ldp	x1, x4, [x23, #16]
  80:	mov	x3, x21
  84:	add	x2, x4, x2
  88:	bl	0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
  8c:	ldr	x1, [x20]
  90:	mov	x0, x20
  94:	ldr	x24, [sp, #72]
  98:	str	x22, [sp, #72]
  9c:	ldr	x1, [x1, #16]
  a0:	blr	x1
  a4:	tst	w0, #0xff
  a8:	b.eq	10c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x10c>  // b.none
  ac:	ldr	x4, [sp, #72]
  b0:	mov	x0, x24
  b4:	mov	x2, x21
  b8:	mov	x1, x20
  bc:	mov	w3, #0x1                   	// #1
  c0:	ldr	x4, [x4]
  c4:	str	x4, [sp, #72]
  c8:	ldr	x4, [x24]
  cc:	ldr	x4, [x4, #32]
  d0:	blr	x4
  d4:	tst	w0, #0xff
  d8:	b.eq	30 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x30>  // b.none
  dc:	mov	w0, #0x1                   	// #1
  e0:	ldp	x19, x20, [sp, #16]
  e4:	ldp	x21, x22, [sp, #32]
  e8:	ldp	x23, x24, [sp, #48]
  ec:	ldp	x29, x30, [sp], #80
  f0:	ret
  f4:	cmp	w3, #0x4
  f8:	b.ne	108 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x108>  // b.any
  fc:	neg	x2, x6, lsl #3
 100:	b	7c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x7c>
 104:	cbz	w3, fc <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xfc>
 108:	bl	0 <abort>
 10c:	ldr	x4, [x24]
 110:	mov	x0, x24
 114:	mov	x2, x21
 118:	mov	x1, x20
 11c:	mov	w3, #0x1                   	// #1
 120:	ldr	x4, [x4, #32]
 124:	blr	x4
 128:	tst	w0, #0xff
 12c:	b.eq	30 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x30>  // b.none
 130:	b	dc <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xdc>
 134:	neg	x2, x6, lsl #1
 138:	b	7c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x7c>
 13c:	mov	x2, #0x0                   	// #0
 140:	b	7c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x7c>
 144:	mov	w0, #0x0                   	// #0
 148:	ldp	x19, x20, [sp, #16]
 14c:	ldp	x21, x22, [sp, #32]
 150:	ldp	x23, x24, [sp, #48]
 154:	ldp	x29, x30, [sp], #80
 158:	ret

Disassembly of section .text._ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info:

0000000000000000 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x1
  10:	mov	x20, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x1, #0x0                   	// #0
  1c:	mov	x21, x0
  20:	cbz	x0, 2c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x2c>
  24:	bl	0 <_Unwind_GetRegionStart>
  28:	mov	x1, x0
  2c:	str	x1, [x20]
  30:	ldrb	w22, [x19], #1
  34:	cmp	w22, #0xff
  38:	b.ne	c0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xc0>  // b.any
  3c:	mov	x0, x19
  40:	str	x1, [x20, #8]
  44:	ldrb	w1, [x0], #1
  48:	strb	w1, [x20, #40]
  4c:	cmp	w1, #0xff
  50:	b.eq	11c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>  // b.none
  54:	mov	x5, #0x0                   	// #0
  58:	mov	w3, #0x0                   	// #0
  5c:	nop
  60:	ldrb	w4, [x0], #1
  64:	and	x1, x4, #0x7f
  68:	lsl	x1, x1, x3
  6c:	add	w3, w3, #0x7
  70:	orr	x5, x5, x1
  74:	tbnz	w4, #7, 60 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x60>
  78:	add	x5, x0, x5
  7c:	str	x5, [x20, #24]
  80:	ldrb	w1, [x0], #1
  84:	mov	x5, #0x0                   	// #0
  88:	mov	w3, #0x0                   	// #0
  8c:	strb	w1, [x20, #41]
  90:	ldrb	w4, [x0], #1
  94:	and	x1, x4, #0x7f
  98:	lsl	x1, x1, x3
  9c:	add	w3, w3, #0x7
  a0:	orr	x5, x5, x1
  a4:	tbnz	w4, #7, 90 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
  a8:	add	x5, x0, x5
  ac:	ldp	x21, x22, [sp, #32]
  b0:	str	x5, [x20, #32]
  b4:	ldp	x19, x20, [sp, #16]
  b8:	ldp	x29, x30, [sp], #64
  bc:	ret
  c0:	str	x23, [sp, #48]
  c4:	and	w0, w22, #0x70
  c8:	cmp	w0, #0x30
  cc:	add	x23, x20, #0x8
  d0:	b.eq	194 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x194>  // b.none
  d4:	b.hi	154 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x154>  // b.pmore
  d8:	cmp	w0, #0x20
  dc:	b.ne	124 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>  // b.any
  e0:	mov	x0, x21
  e4:	bl	0 <_Unwind_GetTextRelBase>
  e8:	mov	x1, x0
  ec:	mov	x3, x23
  f0:	mov	x2, x19
  f4:	mov	w0, w22
  f8:	bl	0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  fc:	ldr	x23, [sp, #48]
 100:	mov	x19, x0
 104:	nop
 108:	mov	x0, x19
 10c:	ldrb	w1, [x0], #1
 110:	strb	w1, [x20, #40]
 114:	cmp	w1, #0xff
 118:	b.ne	54 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>  // b.any
 11c:	str	xzr, [x20, #24]
 120:	b	80 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x80>
 124:	b.hi	130 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x130>  // b.pmore
 128:	tst	w22, #0x60
 12c:	b.eq	134 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x134>  // b.none
 130:	bl	0 <abort>
 134:	mov	x3, x23
 138:	mov	x2, x19
 13c:	mov	w0, w22
 140:	mov	x1, #0x0                   	// #0
 144:	bl	0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 148:	mov	x19, x0
 14c:	ldr	x23, [sp, #48]
 150:	b	108 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x108>
 154:	cmp	w0, #0x40
 158:	b.ne	16c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x16c>  // b.any
 15c:	mov	x0, x21
 160:	bl	0 <_Unwind_GetRegionStart>
 164:	mov	x1, x0
 168:	b	ec <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xec>
 16c:	cmp	w0, #0x50
 170:	mov	x1, #0x0                   	// #0
 174:	b.ne	130 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x130>  // b.any
 178:	mov	x3, x23
 17c:	mov	x2, x19
 180:	mov	w0, w22
 184:	bl	0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 188:	mov	x19, x0
 18c:	ldr	x23, [sp, #48]
 190:	b	108 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x108>
 194:	mov	x0, x21
 198:	bl	0 <_Unwind_GetDataRelBase>
 19c:	mov	x1, x0
 1a0:	b	ec <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xec>

Disassembly of section .text.__gxx_personality_v0:

0000000000000000 <__gxx_personality_v0>:
   0:	stp	x29, x30, [sp, #-256]!
   4:	cmp	w0, #0x1
   8:	mov	x29, sp
   c:	str	wzr, [sp, #180]
  10:	b.ne	74 <__gxx_personality_v0+0x74>  // b.any
  14:	stp	x19, x20, [sp, #16]
  18:	mov	x20, #0xd500                	// #54528
  1c:	movk	x20, #0xbcd4, lsl #16
  20:	movk	x20, #0xaabc, lsl #32
  24:	stp	x21, x22, [sp, #32]
  28:	movk	x20, #0xb8b1, lsl #48
  2c:	add	x0, x2, x20
  30:	stp	x23, x24, [sp, #48]
  34:	cmp	x0, #0x1
  38:	stp	x27, x28, [sp, #80]
  3c:	mov	w22, w1
  40:	mov	x21, x3
  44:	str	x0, [sp, #104]
  48:	cset	w0, ls  // ls = plast
  4c:	str	w0, [sp, #120]
  50:	cmp	w1, #0x6
  54:	mov	x19, x4
  58:	csel	w27, w0, wzr, eq  // eq = none
  5c:	cbz	w27, 80 <__gxx_personality_v0+0x80>
  60:	ldur	x23, [x3, #-16]
  64:	cbnz	x23, 294 <__gxx_personality_v0+0x294>
  68:	stp	x25, x26, [sp, #64]
  6c:	mov	x0, x21
  70:	bl	0 <__cxa_call_terminate>
  74:	mov	w0, #0x3                   	// #3
  78:	ldp	x29, x30, [sp], #256
  7c:	ret
  80:	mov	x0, x4
  84:	bl	0 <_Unwind_GetLanguageSpecificData>
  88:	str	x0, [sp, #112]
  8c:	cbz	x0, 310 <__gxx_personality_v0+0x310>
  90:	mov	x1, x0
  94:	add	x0, sp, #0xd0
  98:	mov	x2, x0
  9c:	stp	x25, x26, [sp, #64]
  a0:	str	x0, [sp, #136]
  a4:	mov	x0, x19
  a8:	bl	0 <__gxx_personality_v0>
  ac:	mov	x28, x0
  b0:	ldrb	w1, [sp, #248]
  b4:	cmp	w1, #0xff
  b8:	b.eq	40c <__gxx_personality_v0+0x40c>  // b.none
  bc:	and	w0, w1, #0x70
  c0:	cmp	w0, #0x30
  c4:	b.eq	4dc <__gxx_personality_v0+0x4dc>  // b.none
  c8:	b.hi	414 <__gxx_personality_v0+0x414>  // b.pmore
  cc:	cmp	w0, #0x20
  d0:	b.ne	400 <__gxx_personality_v0+0x400>  // b.any
  d4:	mov	x0, x19
  d8:	bl	0 <_Unwind_GetTextRelBase>
  dc:	mov	x3, x0
  e0:	add	x1, sp, #0xb4
  e4:	mov	x0, x19
  e8:	str	x3, [sp, #224]
  ec:	bl	0 <_Unwind_GetIPInfo>
  f0:	ldr	w3, [sp, #180]
  f4:	ldr	x1, [sp, #240]
  f8:	cmp	w3, #0x0
  fc:	cset	x3, eq  // eq = none
 100:	sub	x23, x0, x3
 104:	cmp	x28, x1
 108:	b.cs	240 <__gxx_personality_v0+0x240>  // b.hs, b.nlast
 10c:	add	x26, sp, #0xb8
 110:	add	x25, sp, #0xc0
 114:	add	x24, sp, #0xc8
 118:	ldrb	w20, [sp, #249]
 11c:	cmp	w20, #0xff
 120:	b.eq	350 <__gxx_personality_v0+0x350>  // b.none
 124:	and	w0, w20, #0x70
 128:	cmp	w0, #0x30
 12c:	b.eq	3e0 <__gxx_personality_v0+0x3e0>  // b.none
 130:	b.hi	3a0 <__gxx_personality_v0+0x3a0>  // b.pmore
 134:	cmp	w0, #0x20
 138:	b.ne	390 <__gxx_personality_v0+0x390>  // b.any
 13c:	mov	x0, #0x0                   	// #0
 140:	bl	0 <_Unwind_GetTextRelBase>
 144:	mov	x1, x0
 148:	mov	x2, x28
 14c:	mov	w0, w20
 150:	mov	x3, x26
 154:	bl	0 <__gxx_personality_v0>
 158:	ldrb	w20, [sp, #249]
 15c:	mov	x28, x0
 160:	cmp	w20, #0xff
 164:	b.eq	340 <__gxx_personality_v0+0x340>  // b.none
 168:	and	w0, w20, #0x70
 16c:	cmp	w0, #0x30
 170:	b.eq	3d0 <__gxx_personality_v0+0x3d0>  // b.none
 174:	b.hi	3b8 <__gxx_personality_v0+0x3b8>  // b.pmore
 178:	cmp	w0, #0x20
 17c:	b.ne	380 <__gxx_personality_v0+0x380>  // b.any
 180:	mov	x0, #0x0                   	// #0
 184:	bl	0 <_Unwind_GetTextRelBase>
 188:	mov	x1, x0
 18c:	nop
 190:	mov	x2, x28
 194:	mov	w0, w20
 198:	mov	x3, x25
 19c:	bl	0 <__gxx_personality_v0>
 1a0:	ldrb	w28, [sp, #249]
 1a4:	mov	x20, x0
 1a8:	cmp	w28, #0xff
 1ac:	b.eq	330 <__gxx_personality_v0+0x330>  // b.none
 1b0:	and	w0, w28, #0x70
 1b4:	cmp	w0, #0x30
 1b8:	b.eq	3f0 <__gxx_personality_v0+0x3f0>  // b.none
 1bc:	b.hi	368 <__gxx_personality_v0+0x368>  // b.pmore
 1c0:	cmp	w0, #0x20
 1c4:	b.ne	358 <__gxx_personality_v0+0x358>  // b.any
 1c8:	mov	x0, #0x0                   	// #0
 1cc:	bl	0 <_Unwind_GetTextRelBase>
 1d0:	mov	x1, x0
 1d4:	nop
 1d8:	mov	w0, w28
 1dc:	mov	x3, x24
 1e0:	mov	x2, x20
 1e4:	bl	0 <__gxx_personality_v0>
 1e8:	mov	w3, #0x0                   	// #0
 1ec:	mov	x28, x0
 1f0:	mov	x0, #0x0                   	// #0
 1f4:	nop
 1f8:	ldrb	w4, [x28], #1
 1fc:	and	x1, x4, #0x7f
 200:	lsl	x1, x1, x3
 204:	add	w3, w3, #0x7
 208:	orr	x0, x0, x1
 20c:	tbnz	w4, #7, 1f8 <__gxx_personality_v0+0x1f8>
 210:	ldr	x3, [sp, #184]
 214:	ldr	x1, [sp, #208]
 218:	add	x1, x1, x3
 21c:	cmp	x1, x23
 220:	b.hi	240 <__gxx_personality_v0+0x240>  // b.pmore
 224:	ldr	x3, [sp, #192]
 228:	add	x1, x1, x3
 22c:	cmp	x1, x23
 230:	b.hi	2ec <__gxx_personality_v0+0x2ec>  // b.pmore
 234:	ldr	x0, [sp, #240]
 238:	cmp	x0, x28
 23c:	b.hi	118 <__gxx_personality_v0+0x118>  // b.pmore
 240:	tbz	w22, #0, 43c <__gxx_personality_v0+0x43c>
 244:	mov	x26, #0x0                   	// #0
 248:	mov	x23, #0x0                   	// #0
 24c:	mov	w28, #0x0                   	// #0
 250:	str	xzr, [sp, #128]
 254:	ldr	x0, [sp, #104]
 258:	cmp	x0, #0x1
 25c:	mov	w0, #0x6                   	// #6
 260:	b.hi	27c <__gxx_personality_v0+0x27c>  // b.pmore
 264:	ldr	x1, [sp, #112]
 268:	stp	x26, x1, [x21, #-32]
 26c:	ldr	x1, [sp, #128]
 270:	stur	w28, [x21, #-36]
 274:	stur	x23, [x21, #-16]
 278:	stur	x1, [x21, #-8]
 27c:	ldp	x19, x20, [sp, #16]
 280:	ldp	x21, x22, [sp, #32]
 284:	ldp	x23, x24, [sp, #48]
 288:	ldp	x25, x26, [sp, #64]
 28c:	ldp	x27, x28, [sp, #80]
 290:	b	78 <__gxx_personality_v0+0x78>
 294:	ldur	w28, [x3, #-36]
 298:	ldur	x0, [x3, #-24]
 29c:	str	x0, [sp, #112]
 2a0:	tbnz	w28, #31, 458 <__gxx_personality_v0+0x458>
 2a4:	mov	x2, x21
 2a8:	mov	x0, x19
 2ac:	mov	w1, #0x0                   	// #0
 2b0:	bl	0 <_Unwind_SetGR>
 2b4:	sxtw	x2, w28
 2b8:	mov	x0, x19
 2bc:	mov	w1, #0x1                   	// #1
 2c0:	bl	0 <_Unwind_SetGR>
 2c4:	mov	x1, x23
 2c8:	mov	x0, x19
 2cc:	bl	0 <_Unwind_SetIP>
 2d0:	mov	w0, #0x7                   	// #7
 2d4:	ldp	x19, x20, [sp, #16]
 2d8:	ldp	x21, x22, [sp, #32]
 2dc:	ldp	x23, x24, [sp, #48]
 2e0:	ldp	x27, x28, [sp, #80]
 2e4:	ldp	x29, x30, [sp], #256
 2e8:	ret
 2ec:	ldr	x23, [sp, #200]
 2f0:	cbz	x23, 450 <__gxx_personality_v0+0x450>
 2f4:	ldr	x1, [sp, #216]
 2f8:	add	x23, x23, x1
 2fc:	cbnz	x0, 4ec <__gxx_personality_v0+0x4ec>
 300:	cbz	x23, 30c <__gxx_personality_v0+0x30c>
 304:	and	w28, w22, #0x1
 308:	tbz	w22, #0, 4d4 <__gxx_personality_v0+0x4d4>
 30c:	ldp	x25, x26, [sp, #64]
 310:	mov	w0, #0x8                   	// #8
 314:	ldp	x19, x20, [sp, #16]
 318:	ldp	x21, x22, [sp, #32]
 31c:	ldp	x23, x24, [sp, #48]
 320:	ldp	x27, x28, [sp, #80]
 324:	b	78 <__gxx_personality_v0+0x78>
 328:	cmp	w0, #0x50
 32c:	b.ne	364 <__gxx_personality_v0+0x364>  // b.any
 330:	mov	x1, #0x0                   	// #0
 334:	b	1d8 <__gxx_personality_v0+0x1d8>
 338:	cmp	w0, #0x50
 33c:	b.ne	364 <__gxx_personality_v0+0x364>  // b.any
 340:	mov	x1, #0x0                   	// #0
 344:	b	190 <__gxx_personality_v0+0x190>
 348:	cmp	w0, #0x50
 34c:	b.ne	364 <__gxx_personality_v0+0x364>  // b.any
 350:	mov	x1, #0x0                   	// #0
 354:	b	148 <__gxx_personality_v0+0x148>
 358:	b.hi	364 <__gxx_personality_v0+0x364>  // b.pmore
 35c:	tst	w28, #0x60
 360:	b.eq	330 <__gxx_personality_v0+0x330>  // b.none
 364:	bl	0 <abort>
 368:	cmp	w0, #0x40
 36c:	b.ne	328 <__gxx_personality_v0+0x328>  // b.any
 370:	mov	x0, #0x0                   	// #0
 374:	bl	0 <_Unwind_GetRegionStart>
 378:	mov	x1, x0
 37c:	b	1d8 <__gxx_personality_v0+0x1d8>
 380:	b.hi	364 <__gxx_personality_v0+0x364>  // b.pmore
 384:	tst	w20, #0x60
 388:	b.eq	340 <__gxx_personality_v0+0x340>  // b.none
 38c:	bl	0 <abort>
 390:	b.hi	364 <__gxx_personality_v0+0x364>  // b.pmore
 394:	tst	w20, #0x60
 398:	b.eq	350 <__gxx_personality_v0+0x350>  // b.none
 39c:	bl	0 <abort>
 3a0:	cmp	w0, #0x40
 3a4:	b.ne	348 <__gxx_personality_v0+0x348>  // b.any
 3a8:	mov	x0, #0x0                   	// #0
 3ac:	bl	0 <_Unwind_GetRegionStart>
 3b0:	mov	x1, x0
 3b4:	b	148 <__gxx_personality_v0+0x148>
 3b8:	cmp	w0, #0x40
 3bc:	b.ne	338 <__gxx_personality_v0+0x338>  // b.any
 3c0:	mov	x0, #0x0                   	// #0
 3c4:	bl	0 <_Unwind_GetRegionStart>
 3c8:	mov	x1, x0
 3cc:	b	190 <__gxx_personality_v0+0x190>
 3d0:	mov	x0, #0x0                   	// #0
 3d4:	bl	0 <_Unwind_GetDataRelBase>
 3d8:	mov	x1, x0
 3dc:	b	190 <__gxx_personality_v0+0x190>
 3e0:	mov	x0, #0x0                   	// #0
 3e4:	bl	0 <_Unwind_GetDataRelBase>
 3e8:	mov	x1, x0
 3ec:	b	148 <__gxx_personality_v0+0x148>
 3f0:	mov	x0, #0x0                   	// #0
 3f4:	bl	0 <_Unwind_GetDataRelBase>
 3f8:	mov	x1, x0
 3fc:	b	1d8 <__gxx_personality_v0+0x1d8>
 400:	b.hi	364 <__gxx_personality_v0+0x364>  // b.pmore
 404:	tst	w1, #0x60
 408:	b.ne	364 <__gxx_personality_v0+0x364>  // b.any
 40c:	mov	x3, #0x0                   	// #0
 410:	b	e0 <__gxx_personality_v0+0xe0>
 414:	cmp	w0, #0x40
 418:	b.ne	42c <__gxx_personality_v0+0x42c>  // b.any
 41c:	mov	x0, x19
 420:	bl	0 <_Unwind_GetRegionStart>
 424:	mov	x3, x0
 428:	b	e0 <__gxx_personality_v0+0xe0>
 42c:	cmp	w0, #0x50
 430:	mov	x3, #0x0                   	// #0
 434:	b.eq	e0 <__gxx_personality_v0+0xe0>  // b.none
 438:	bl	0 <abort>
 43c:	tbnz	w22, #3, 44c <__gxx_personality_v0+0x44c>
 440:	ldr	x0, [sp, #104]
 444:	cmp	x0, #0x1
 448:	b.ls	6c <__gxx_personality_v0+0x6c>  // b.plast
 44c:	bl	0 <_ZSt9terminatev>
 450:	mov	w0, #0x8                   	// #8
 454:	b	27c <__gxx_personality_v0+0x27c>
 458:	ldr	x1, [sp, #112]
 45c:	add	x2, sp, #0xd0
 460:	mov	x0, x19
 464:	bl	0 <__gxx_personality_v0>
 468:	ldrb	w1, [sp, #248]
 46c:	cmp	w1, #0xff
 470:	b.eq	868 <__gxx_personality_v0+0x868>  // b.none
 474:	and	w2, w1, #0x70
 478:	mov	w0, w2
 47c:	cmp	w2, #0x30
 480:	b.eq	858 <__gxx_personality_v0+0x858>  // b.none
 484:	b.hi	7c0 <__gxx_personality_v0+0x7c0>  // b.pmore
 488:	cmp	w2, #0x20
 48c:	b.ne	7ac <__gxx_personality_v0+0x7ac>  // b.any
 490:	mov	x0, x19
 494:	bl	0 <_Unwind_GetTextRelBase>
 498:	ldrb	w1, [sp, #248]
 49c:	str	x0, [sp, #224]
 4a0:	cmp	w1, #0xff
 4a4:	b.eq	788 <__gxx_personality_v0+0x788>  // b.none
 4a8:	and	w0, w1, #0x70
 4ac:	cmp	w0, #0x30
 4b0:	and	w0, w0, #0xff
 4b4:	b.eq	81c <__gxx_personality_v0+0x81c>  // b.none
 4b8:	b.hi	794 <__gxx_personality_v0+0x794>  // b.pmore
 4bc:	cmp	w0, #0x20
 4c0:	b.ne	774 <__gxx_personality_v0+0x774>  // b.any
 4c4:	mov	x0, x19
 4c8:	bl	0 <_Unwind_GetTextRelBase>
 4cc:	stur	x0, [x21, #-16]
 4d0:	b	2a4 <__gxx_personality_v0+0x2a4>
 4d4:	ldp	x25, x26, [sp, #64]
 4d8:	b	2a4 <__gxx_personality_v0+0x2a4>
 4dc:	mov	x0, x19
 4e0:	bl	0 <_Unwind_GetDataRelBase>
 4e4:	mov	x3, x0
 4e8:	b	e0 <__gxx_personality_v0+0xe0>
 4ec:	ldr	x5, [sp, #240]
 4f0:	sub	x0, x0, #0x1
 4f4:	add	x26, x5, x0
 4f8:	cbz	x23, 30c <__gxx_personality_v0+0x30c>
 4fc:	cbz	x26, 304 <__gxx_personality_v0+0x304>
 500:	and	w0, w22, #0x8
 504:	str	w0, [sp, #172]
 508:	tbnz	w22, #3, 808 <__gxx_personality_v0+0x808>
 50c:	ldr	x0, [sp, #104]
 510:	cmp	x0, #0x1
 514:	b.ls	82c <__gxx_personality_v0+0x82c>  // b.plast
 518:	adrp	x7, 0 <_ZTIN10__cxxabiv119__foreign_exceptionE>
 51c:	mov	w0, #0x1                   	// #1
 520:	str	xzr, [sp, #128]
 524:	ldr	x7, [x7]
 528:	ands	w1, w22, #0x8
 52c:	ldr	w1, [sp, #120]
 530:	mov	x25, #0x1                   	// #1
 534:	ccmp	w1, #0x0, #0x4, eq  // eq = none
 538:	csel	w20, w0, wzr, ne  // ne = any
 53c:	nop
 540:	mov	x4, x26
 544:	mov	x28, #0x0                   	// #0
 548:	mov	w1, #0x0                   	// #0
 54c:	nop
 550:	ldrb	w2, [x4], #1
 554:	and	x0, x2, #0x7f
 558:	lsl	x0, x0, x1
 55c:	add	w1, w1, #0x7
 560:	orr	x28, x28, x0
 564:	tbnz	w2, #7, 550 <__gxx_personality_v0+0x550>
 568:	cmp	w1, #0x3f
 56c:	b.hi	584 <__gxx_personality_v0+0x584>  // b.pmore
 570:	lsl	x0, x25, x1
 574:	neg	x0, x0
 578:	orr	x0, x28, x0
 57c:	tst	x2, #0x40
 580:	csel	x28, x0, x28, ne  // ne = any
 584:	mov	x3, x4
 588:	mov	x8, #0x0                   	// #0
 58c:	mov	w1, #0x0                   	// #0
 590:	ldrb	w2, [x3], #1
 594:	and	x0, x2, #0x7f
 598:	lsl	x0, x0, x1
 59c:	add	w1, w1, #0x7
 5a0:	orr	x8, x8, x0
 5a4:	tbnz	w2, #7, 590 <__gxx_personality_v0+0x590>
 5a8:	cmp	w1, #0x3f
 5ac:	b.hi	5c4 <__gxx_personality_v0+0x5c4>  // b.pmore
 5b0:	lsl	x0, x25, x1
 5b4:	neg	x0, x0
 5b8:	orr	x0, x8, x0
 5bc:	tst	x2, #0x40
 5c0:	csel	x8, x0, x8, ne  // ne = any
 5c4:	cmp	x28, #0x0
 5c8:	cbz	x28, 710 <__gxx_personality_v0+0x710>
 5cc:	b.gt	618 <__gxx_personality_v0+0x618>
 5d0:	cbnz	w20, 734 <__gxx_personality_v0+0x734>
 5d4:	ldr	x0, [sp, #232]
 5d8:	mvn	x3, x28
 5dc:	mov	x9, #0x0                   	// #0
 5e0:	mov	w1, #0x0                   	// #0
 5e4:	add	x3, x0, x3
 5e8:	ldrb	w2, [x3], #1
 5ec:	and	x0, x2, #0x7f
 5f0:	lsl	x0, x0, x1
 5f4:	add	w1, w1, #0x7
 5f8:	orr	x9, x9, x0
 5fc:	tbnz	w2, #7, 5e8 <__gxx_personality_v0+0x5e8>
 600:	cmp	x9, #0x0
 604:	cset	w0, eq  // eq = none
 608:	cbnz	w0, 6e4 <__gxx_personality_v0+0x6e4>
 60c:	cbz	x8, 7fc <__gxx_personality_v0+0x7fc>
 610:	add	x26, x4, x8
 614:	b	540 <__gxx_personality_v0+0x540>
 618:	ldrb	w0, [sp, #248]
 61c:	cmp	w0, #0xff
 620:	b.eq	76c <__gxx_personality_v0+0x76c>  // b.none
 624:	and	w1, w0, #0x7
 628:	cmp	w1, #0x2
 62c:	b.eq	764 <__gxx_personality_v0+0x764>  // b.none
 630:	b.ls	728 <__gxx_personality_v0+0x728>  // b.plast
 634:	cmp	w1, #0x3
 638:	neg	x2, x28, lsl #2
 63c:	b.ne	718 <__gxx_personality_v0+0x718>  // b.any
 640:	ldp	x1, x9, [sp, #224]
 644:	mov	x3, x24
 648:	str	x7, [sp, #120]
 64c:	stp	x8, x4, [sp, #144]
 650:	add	x2, x9, x2
 654:	bl	0 <__gxx_personality_v0>
 658:	ldr	x1, [sp, #200]
 65c:	str	x1, [sp, #160]
 660:	cbz	x1, 6e4 <__gxx_personality_v0+0x6e4>
 664:	ldr	x7, [sp, #120]
 668:	ldp	x8, x4, [sp, #144]
 66c:	cbz	x7, 60c <__gxx_personality_v0+0x60c>
 670:	ldr	x0, [sp, #128]
 674:	str	x0, [sp, #200]
 678:	mov	x0, x7
 67c:	ldr	x2, [x7]
 680:	ldr	x2, [x2, #16]
 684:	blr	x2
 688:	tst	w0, #0xff
 68c:	ldr	x7, [sp, #120]
 690:	ldp	x8, x4, [sp, #144]
 694:	ldr	x1, [sp, #160]
 698:	b.eq	6a8 <__gxx_personality_v0+0x6a8>  // b.none
 69c:	ldr	x0, [sp, #200]
 6a0:	ldr	x0, [x0]
 6a4:	str	x0, [sp, #200]
 6a8:	ldr	x9, [x1]
 6ac:	str	x7, [sp, #120]
 6b0:	stp	x8, x4, [sp, #144]
 6b4:	mov	x0, x1
 6b8:	mov	x2, x24
 6bc:	ldr	x9, [x9, #32]
 6c0:	mov	x1, x7
 6c4:	mov	w3, #0x1                   	// #1
 6c8:	blr	x9
 6cc:	tst	w0, #0xff
 6d0:	ldr	x7, [sp, #120]
 6d4:	ldp	x8, x4, [sp, #144]
 6d8:	b.eq	60c <__gxx_personality_v0+0x60c>  // b.none
 6dc:	ldr	x0, [sp, #200]
 6e0:	str	x0, [sp, #128]
 6e4:	tbnz	w22, #0, 254 <__gxx_personality_v0+0x254>
 6e8:	ldr	w0, [sp, #172]
 6ec:	cbnz	w0, 6fc <__gxx_personality_v0+0x6fc>
 6f0:	ldr	x0, [sp, #104]
 6f4:	cmp	x0, #0x1
 6f8:	b.ls	704 <__gxx_personality_v0+0x704>  // b.plast
 6fc:	tbz	w28, #31, 4d4 <__gxx_personality_v0+0x4d4>
 700:	bl	0 <_ZSt10unexpectedv>
 704:	ldp	x25, x26, [sp, #64]
 708:	tbz	w28, #31, 2a4 <__gxx_personality_v0+0x2a4>
 70c:	b	458 <__gxx_personality_v0+0x458>
 710:	mov	w27, #0x1                   	// #1
 714:	b	60c <__gxx_personality_v0+0x60c>
 718:	cmp	w1, #0x4
 71c:	b.ne	364 <__gxx_personality_v0+0x364>  // b.any
 720:	neg	x2, x28, lsl #3
 724:	b	640 <__gxx_personality_v0+0x640>
 728:	cbnz	w1, 364 <__gxx_personality_v0+0x364>
 72c:	neg	x2, x28, lsl #3
 730:	b	640 <__gxx_personality_v0+0x640>
 734:	ldp	x2, x0, [sp, #128]
 738:	mov	x1, x7
 73c:	mov	x3, x28
 740:	str	x7, [sp, #120]
 744:	stp	x8, x4, [sp, #144]
 748:	bl	0 <__gxx_personality_v0>
 74c:	and	w0, w0, #0xff
 750:	eor	w0, w0, #0x1
 754:	ldr	x7, [sp, #120]
 758:	ldp	x8, x4, [sp, #144]
 75c:	cbz	w0, 60c <__gxx_personality_v0+0x60c>
 760:	b	6e4 <__gxx_personality_v0+0x6e4>
 764:	neg	x2, x28, lsl #1
 768:	b	640 <__gxx_personality_v0+0x640>
 76c:	mov	x2, #0x0                   	// #0
 770:	b	640 <__gxx_personality_v0+0x640>
 774:	b.hi	780 <__gxx_personality_v0+0x780>  // b.pmore
 778:	tst	w1, #0x60
 77c:	b.eq	788 <__gxx_personality_v0+0x788>  // b.none
 780:	stp	x25, x26, [sp, #64]
 784:	bl	0 <abort>
 788:	mov	x0, #0x0                   	// #0
 78c:	stur	x0, [x21, #-16]
 790:	b	2a4 <__gxx_personality_v0+0x2a4>
 794:	cmp	w0, #0x40
 798:	b.ne	7d8 <__gxx_personality_v0+0x7d8>  // b.any
 79c:	mov	x0, x19
 7a0:	bl	0 <_Unwind_GetRegionStart>
 7a4:	stur	x0, [x21, #-16]
 7a8:	b	2a4 <__gxx_personality_v0+0x2a4>
 7ac:	b.hi	780 <__gxx_personality_v0+0x780>  // b.pmore
 7b0:	tst	w1, #0x60
 7b4:	b.ne	780 <__gxx_personality_v0+0x780>  // b.any
 7b8:	str	xzr, [sp, #224]
 7bc:	b	4ac <__gxx_personality_v0+0x4ac>
 7c0:	cmp	w2, #0x40
 7c4:	b.ne	7ec <__gxx_personality_v0+0x7ec>  // b.any
 7c8:	mov	x0, x19
 7cc:	bl	0 <_Unwind_GetRegionStart>
 7d0:	ldrb	w1, [sp, #248]
 7d4:	b	49c <__gxx_personality_v0+0x49c>
 7d8:	cmp	w0, #0x50
 7dc:	mov	x0, #0x0                   	// #0
 7e0:	b.ne	780 <__gxx_personality_v0+0x780>  // b.any
 7e4:	stur	x0, [x21, #-16]
 7e8:	b	2a4 <__gxx_personality_v0+0x2a4>
 7ec:	cmp	w2, #0x50
 7f0:	b.ne	780 <__gxx_personality_v0+0x780>  // b.any
 7f4:	str	xzr, [sp, #224]
 7f8:	b	4ac <__gxx_personality_v0+0x4ac>
 7fc:	cbnz	w27, 304 <__gxx_personality_v0+0x304>
 800:	ldp	x25, x26, [sp, #64]
 804:	b	310 <__gxx_personality_v0+0x310>
 808:	adrp	x7, 0 <_ZTIN10__cxxabiv115__forced_unwindE>
 80c:	mov	w0, #0x1                   	// #1
 810:	str	xzr, [sp, #128]
 814:	ldr	x7, [x7]
 818:	b	528 <__gxx_personality_v0+0x528>
 81c:	mov	x0, x19
 820:	bl	0 <_Unwind_GetDataRelBase>
 824:	stur	x0, [x21, #-16]
 828:	b	2a4 <__gxx_personality_v0+0x2a4>
 82c:	mov	x1, x21
 830:	ldr	x0, [x1], #32
 834:	str	x1, [sp, #128]
 838:	tbz	w0, #0, 844 <__gxx_personality_v0+0x844>
 83c:	ldur	x0, [x21, #-80]
 840:	str	x0, [sp, #128]
 844:	ldr	x0, [sp, #128]
 848:	ldur	x7, [x0, #-112]
 84c:	cmp	x7, #0x0
 850:	cset	w0, ne  // ne = any
 854:	b	528 <__gxx_personality_v0+0x528>
 858:	mov	x0, x19
 85c:	bl	0 <_Unwind_GetDataRelBase>
 860:	ldrb	w1, [sp, #248]
 864:	b	49c <__gxx_personality_v0+0x49c>
 868:	mov	x0, #0x0                   	// #0
 86c:	stur	x0, [x21, #-16]
 870:	str	xzr, [sp, #224]
 874:	b	2a4 <__gxx_personality_v0+0x2a4>
 878:	bl	0 <__cxa_begin_catch>
 87c:	bl	0 <_ZSt9terminatev>

Disassembly of section .text.__cxa_call_unexpected:

0000000000000000 <__cxa_call_unexpected>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	stp	x21, x22, [sp, #32]
  14:	str	x23, [sp, #48]
  18:	bl	0 <__cxa_begin_catch>
  1c:	ldp	x0, x21, [x19, #-64]
  20:	ldur	x1, [x19, #-16]
  24:	str	x1, [sp, #80]
  28:	ldur	w20, [x19, #-36]
  2c:	ldur	x19, [x19, #-24]
  30:	bl	0 <_ZN10__cxxabiv112__unexpectedEPFvvE>
  34:	bl	0 <__cxa_begin_catch>
  38:	bl	0 <__cxa_get_globals_fast>
  3c:	ldr	x22, [x0]
  40:	ldr	x0, [x22, #80]
  44:	tbz	w0, #0, c8 <__cxa_call_unexpected+0xc8>
  48:	ldr	x22, [x22]
  4c:	add	x23, sp, #0x40
  50:	mov	x1, x19
  54:	mov	x2, x23
  58:	mov	x0, #0x0                   	// #0
  5c:	bl	0 <__cxa_call_unexpected>
  60:	ldur	x1, [x22, #-112]
  64:	sxtw	x20, w20
  68:	mov	x3, x20
  6c:	mov	x2, x22
  70:	mov	x0, x23
  74:	bl	0 <__cxa_call_unexpected>
  78:	tst	w0, #0xff
  7c:	b.ne	e4 <__cxa_call_unexpected+0xe4>  // b.any
  80:	adrp	x19, 0 <_ZTISt13bad_exception>
  84:	mov	x3, x20
  88:	mov	x0, x23
  8c:	mov	x2, #0x0                   	// #0
  90:	ldr	x1, [x19]
  94:	bl	0 <__cxa_call_unexpected>
  98:	tst	w0, #0xff
  9c:	b.eq	e8 <__cxa_call_unexpected+0xe8>  // b.none
  a0:	mov	x0, #0x8                   	// #8
  a4:	bl	0 <__cxa_allocate_exception>
  a8:	adrp	x3, 0 <_ZTVSt13bad_exception>
  ac:	adrp	x2, 0 <_ZNSt13bad_exceptionD1Ev>
  b0:	ldr	x1, [x19]
  b4:	ldr	x3, [x3]
  b8:	ldr	x2, [x2]
  bc:	add	x3, x3, #0x10
  c0:	str	x3, [x0]
  c4:	bl	0 <__cxa_throw>
  c8:	add	x22, x22, #0x70
  cc:	b	4c <__cxa_call_unexpected+0x4c>
  d0:	mov	x19, x0
  d4:	bl	0 <__cxa_end_catch>
  d8:	bl	0 <__cxa_end_catch>
  dc:	mov	x0, x19
  e0:	bl	0 <_Unwind_Resume>
  e4:	bl	0 <__cxa_rethrow>
  e8:	mov	x0, x21
  ec:	bl	0 <_ZN10__cxxabiv111__terminateEPFvvE>

eh_ptr.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt15__exception_ptr13exception_ptr18_M_safe_bool_dummyEv:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptr18_M_safe_bool_dummyEv>:
   0:	ret

Disassembly of section .text._ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception:

0000000000000000 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	cmp	w0, #0x1
   8:	mov	x29, sp
   c:	str	x19, [sp, #16]
  10:	ldur	x19, [x1, #-80]
  14:	b.hi	64 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x64>  // b.pmore
  18:	sub	x0, x1, #0x50
  1c:	bl	0 <__cxa_free_dependent_exception>
  20:	sub	x0, x19, #0x80
  24:	ldaxr	w1, [x0]
  28:	sub	w1, w1, #0x1
  2c:	stlxr	w2, w1, [x0]
  30:	cbnz	w2, 24 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x24>
  34:	cbnz	w1, 58 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x58>
  38:	ldur	x1, [x19, #-104]
  3c:	cbz	x1, 48 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x48>
  40:	mov	x0, x19
  44:	blr	x1
  48:	mov	x0, x19
  4c:	ldr	x19, [sp, #16]
  50:	ldp	x29, x30, [sp], #32
  54:	b	0 <__cxa_free_exception>
  58:	ldr	x19, [sp, #16]
  5c:	ldp	x29, x30, [sp], #32
  60:	ret
  64:	ldur	x0, [x19, #-88]
  68:	bl	0 <_ZN10__cxxabiv111__terminateEPFvvE>

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrC2Ev:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrC1Ev>:
   0:	str	xzr, [x0]
   4:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrC2EMS0_FvvE:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrC1EMS0_FvvE>:
   0:	str	xzr, [x0]
   4:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptr9_M_addrefEv:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv>:
   0:	ldr	x0, [x0]
   4:	cbz	x0, 1c <_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv+0x1c>
   8:	sub	x0, x0, #0x80
   c:	ldaxr	w1, [x0]
  10:	add	w1, w1, #0x1
  14:	stlxr	w2, w1, [x0]
  18:	cbnz	w2, c <_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv+0xc>
  1c:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrC2EPv:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrC1EPv>:
   0:	str	x1, [x0]
   4:	b	0 <_ZNSt15__exception_ptr13exception_ptrC1EPv>

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrC2ERKS0_:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrC1ERKS0_>:
   0:	ldr	x1, [x1]
   4:	str	x1, [x0]
   8:	b	0 <_ZNSt15__exception_ptr13exception_ptrC1ERKS0_>

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptr10_M_releaseEv:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	ldr	x0, [x0]
  14:	cbz	x0, 4c <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv+0x4c>
  18:	sub	x1, x0, #0x80
  1c:	ldaxr	w2, [x1]
  20:	sub	w2, w2, #0x1
  24:	stlxr	w3, w2, [x1]
  28:	cbnz	w3, 1c <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv+0x1c>
  2c:	cbnz	w2, 4c <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv+0x4c>
  30:	ldur	x1, [x0, #-104]
  34:	ldr	x0, [x19]
  38:	cbz	x1, 44 <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv+0x44>
  3c:	blr	x1
  40:	ldr	x0, [x19]
  44:	bl	0 <__cxa_free_exception>
  48:	str	xzr, [x19]
  4c:	ldr	x19, [sp, #16]
  50:	ldp	x29, x30, [sp], #32
  54:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrD2Ev:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrD1Ev>:
   0:	b	0 <_ZNSt15__exception_ptr13exception_ptrD1Ev>

Disassembly of section .text._ZNKSt15__exception_ptr13exception_ptr6_M_getEv:

0000000000000000 <_ZNKSt15__exception_ptr13exception_ptr6_M_getEv>:
   0:	ldr	x0, [x0]
   4:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptr4swapERS0_:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptr4swapERS0_>:
   0:	ldr	x3, [x1]
   4:	ldr	x2, [x0]
   8:	str	x3, [x0]
   c:	str	x2, [x1]
  10:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptraSERKS0_:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptraSERKS0_>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	add	x19, sp, #0x28
  10:	mov	x20, x0
  14:	mov	x0, x19
  18:	bl	0 <_ZNSt15__exception_ptr13exception_ptraSERKS0_>
  1c:	mov	x1, x20
  20:	mov	x0, x19
  24:	bl	0 <_ZNSt15__exception_ptr13exception_ptraSERKS0_>
  28:	mov	x0, x19
  2c:	bl	0 <_ZNSt15__exception_ptr13exception_ptraSERKS0_>
  30:	mov	x0, x20
  34:	ldp	x19, x20, [sp, #16]
  38:	ldp	x29, x30, [sp], #48
  3c:	ret

Disassembly of section .text._ZNKSt15__exception_ptr13exception_ptrntEv:

0000000000000000 <_ZNKSt15__exception_ptr13exception_ptrntEv>:
   0:	ldr	x0, [x0]
   4:	cmp	x0, #0x0
   8:	cset	w0, eq  // eq = none
   c:	ret

Disassembly of section .text._ZNKSt15__exception_ptr13exception_ptrcvMS0_FvvEEv:

0000000000000000 <_ZNKSt15__exception_ptr13exception_ptrcvMS0_FvvEEv>:
   0:	adrp	x2, 0 <_ZNKSt15__exception_ptr13exception_ptrcvMS0_FvvEEv>
   4:	mov	x1, #0x0                   	// #0
   8:	ldr	x0, [x0]
   c:	ldr	x2, [x2]
  10:	cmp	x0, #0x0
  14:	csel	x0, x2, xzr, ne  // ne = any
  18:	ret

Disassembly of section .text._ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv:

0000000000000000 <_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv>:
   0:	ldr	x0, [x0]
   4:	ldur	x0, [x0, #-112]
   8:	ret

Disassembly of section .text._ZNSt15__exception_ptreqERKNS_13exception_ptrES2_:

0000000000000000 <_ZNSt15__exception_ptreqERKNS_13exception_ptrES2_>:
   0:	ldr	x2, [x0]
   4:	ldr	x0, [x1]
   8:	cmp	x2, x0
   c:	cset	w0, eq  // eq = none
  10:	ret

Disassembly of section .text._ZNSt15__exception_ptrneERKNS_13exception_ptrES2_:

0000000000000000 <_ZNSt15__exception_ptrneERKNS_13exception_ptrES2_>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZNSt15__exception_ptrneERKNS_13exception_ptrES2_>
   c:	and	w0, w0, #0xff
  10:	eor	w0, w0, #0x1
  14:	ldp	x29, x30, [sp], #16
  18:	ret

Disassembly of section .text._ZSt17current_exceptionv:

0000000000000000 <_ZSt17current_exceptionv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x8
  10:	bl	0 <__cxa_get_globals>
  14:	ldr	x0, [x0]
  18:	cbz	x0, 60 <_ZSt17current_exceptionv+0x60>
  1c:	mov	x1, #0xd500                	// #54528
  20:	ldr	x2, [x0, #80]
  24:	movk	x1, #0xbcd4, lsl #16
  28:	movk	x1, #0xaabc, lsl #32
  2c:	movk	x1, #0xb8b1, lsl #48
  30:	add	x1, x2, x1
  34:	cmp	x1, #0x1
  38:	b.hi	60 <_ZSt17current_exceptionv+0x60>  // b.pmore
  3c:	add	x1, x0, #0x70
  40:	tbz	w2, #0, 48 <_ZSt17current_exceptionv+0x48>
  44:	ldr	x1, [x0]
  48:	mov	x0, x19
  4c:	bl	0 <_ZSt17current_exceptionv>
  50:	mov	x0, x19
  54:	ldr	x19, [sp, #16]
  58:	ldp	x29, x30, [sp], #32
  5c:	ret
  60:	mov	x0, x19
  64:	bl	0 <_ZSt17current_exceptionv>
  68:	mov	x0, x19
  6c:	ldr	x19, [sp, #16]
  70:	ldp	x29, x30, [sp], #32
  74:	ret

Disassembly of section .text._ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE:

0000000000000000 <_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	bl	0 <_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE>
  10:	mov	x20, x0
  14:	bl	0 <__cxa_allocate_dependent_exception>
  18:	mov	x19, x0
  1c:	sub	x1, x20, #0x80
  20:	str	x20, [x0]
  24:	ldaxr	w0, [x1]
  28:	add	w0, w0, #0x1
  2c:	stlxr	w2, w0, [x1]
  30:	cbnz	w2, 24 <_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE+0x24>
  34:	bl	0 <_ZSt14get_unexpectedv>
  38:	str	x0, [x19, #16]
  3c:	add	x20, x19, #0x50
  40:	bl	0 <_ZSt13get_terminatev>
  44:	str	x0, [x19, #24]
  48:	mov	x2, #0x2b01                	// #11009
  4c:	adrp	x1, 0 <_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE>
  50:	movk	x2, #0x432b, lsl #16
  54:	add	x1, x1, #0x0
  58:	movk	x2, #0x5543, lsl #32
  5c:	movk	x2, #0x474e, lsl #48
  60:	stp	x2, x1, [x19, #80]
  64:	bl	0 <__cxa_get_globals>
  68:	mov	x1, x0
  6c:	mov	x0, x20
  70:	ldr	w2, [x1, #8]
  74:	add	w2, w2, #0x1
  78:	str	w2, [x1, #8]
  7c:	bl	0 <_Unwind_RaiseException>
  80:	mov	x0, x20
  84:	bl	0 <__cxa_begin_catch>
  88:	bl	0 <_ZSt9terminatev>

eh_term_handler.o:     file format elf64-littleaarch64


eh_terminate.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv111__terminateEPFvvE:

0000000000000000 <_ZN10__cxxabiv111__terminateEPFvvE>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	blr	x0
   c:	bl	0 <abort>
  10:	bl	0 <__cxa_begin_catch>
  14:	bl	0 <abort>

Disassembly of section .text._ZSt13set_terminatePFvvE:

0000000000000000 <_ZSt13set_terminatePFvvE>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv119__terminate_handlerE>
   4:	mov	x2, x0
   8:	ldr	x1, [x1]
   c:	ldaxr	x0, [x1]
  10:	stlxr	w3, x2, [x1]
  14:	cbnz	w3, c <_ZSt13set_terminatePFvvE+0xc>
  18:	ret

Disassembly of section .text._ZSt13get_terminatev:

0000000000000000 <_ZSt13get_terminatev>:
   0:	adrp	x0, 0 <_ZN10__cxxabiv119__terminate_handlerE>
   4:	ldr	x0, [x0]
   8:	ldar	x0, [x0]
   c:	ret

Disassembly of section .text._ZSt9terminatev:

0000000000000000 <_ZSt9terminatev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZSt9terminatev>
   c:	bl	0 <_ZSt9terminatev>

Disassembly of section .text._ZN10__cxxabiv112__unexpectedEPFvvE:

0000000000000000 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	blr	x0
   c:	bl	0 <_ZN10__cxxabiv112__unexpectedEPFvvE>

Disassembly of section .text._ZSt14set_unexpectedPFvvE:

0000000000000000 <_ZSt14set_unexpectedPFvvE>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv120__unexpected_handlerE>
   4:	mov	x2, x0
   8:	ldr	x1, [x1]
   c:	ldaxr	x0, [x1]
  10:	stlxr	w3, x2, [x1]
  14:	cbnz	w3, c <_ZSt14set_unexpectedPFvvE+0xc>
  18:	ret

Disassembly of section .text._ZSt14get_unexpectedv:

0000000000000000 <_ZSt14get_unexpectedv>:
   0:	adrp	x0, 0 <_ZN10__cxxabiv120__unexpected_handlerE>
   4:	ldr	x0, [x0]
   8:	ldar	x0, [x0]
   c:	ret

Disassembly of section .text._ZSt10unexpectedv:

0000000000000000 <_ZSt10unexpectedv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZSt10unexpectedv>
   c:	bl	0 <_ZSt10unexpectedv>

eh_tm.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_tm_cleanup:

0000000000000000 <__cxa_tm_cleanup>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x1
  10:	mov	w20, w2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x0
  1c:	stp	x23, x24, [sp, #48]
  20:	bl	0 <__cxa_get_globals_fast>
  24:	mov	x22, x0
  28:	cbz	x21, 40 <__cxa_tm_cleanup+0x40>
  2c:	ldr	w1, [x22, #8]
  30:	mov	x0, x21
  34:	sub	w1, w1, #0x1
  38:	str	w1, [x22, #8]
  3c:	bl	0 <__cxa_free_exception>
  40:	cbz	x19, 6c <__cxa_tm_cleanup+0x6c>
  44:	mov	x0, #0xd500                	// #54528
  48:	ldr	x1, [x19]
  4c:	movk	x0, #0xbcd4, lsl #16
  50:	movk	x0, #0xaabc, lsl #32
  54:	movk	x0, #0xb8b1, lsl #48
  58:	add	x0, x1, x0
  5c:	cmp	x0, #0x1
  60:	b.ls	100 <__cxa_tm_cleanup+0x100>  // b.plast
  64:	mov	x0, x19
  68:	bl	0 <_Unwind_DeleteException>
  6c:	cbz	w20, ec <__cxa_tm_cleanup+0xec>
  70:	ldr	x19, [x22]
  74:	cbz	x19, ec <__cxa_tm_cleanup+0xec>
  78:	mov	x23, #0xd500                	// #54528
  7c:	movk	x23, #0xbcd4, lsl #16
  80:	movk	x23, #0xaabc, lsl #32
  84:	movk	x23, #0xb8b1, lsl #48
  88:	b	9c <__cxa_tm_cleanup+0x9c>
  8c:	bl	0 <_Unwind_DeleteException>
  90:	mov	x19, #0x0                   	// #0
  94:	subs	w20, w20, #0x1
  98:	b.eq	e8 <__cxa_tm_cleanup+0xe8>  // b.none
  9c:	ldr	x1, [x19, #80]
  a0:	add	x0, x19, #0x50
  a4:	add	x2, x1, x23
  a8:	cmp	x2, #0x1
  ac:	b.hi	8c <__cxa_tm_cleanup+0x8c>  // b.pmore
  b0:	ldr	x24, [x19, #32]
  b4:	tbnz	w1, #0, 128 <__cxa_tm_cleanup+0x128>
  b8:	sub	x21, x19, #0x10
  bc:	ldaxr	w0, [x21]
  c0:	sub	w0, w0, #0x1
  c4:	stlxr	w1, w0, [x21]
  c8:	cbnz	w1, bc <__cxa_tm_cleanup+0xbc>
  cc:	mov	x19, x24
  d0:	cbnz	w0, 94 <__cxa_tm_cleanup+0x94>
  d4:	add	x0, x21, #0x80
  d8:	bl	0 <__cxa_free_exception>
  dc:	subs	w20, w20, #0x1
  e0:	b.ne	9c <__cxa_tm_cleanup+0x9c>  // b.any
  e4:	nop
  e8:	str	x19, [x22]
  ec:	ldp	x19, x20, [sp, #16]
  f0:	ldp	x21, x22, [sp, #32]
  f4:	ldp	x23, x24, [sp, #48]
  f8:	ldp	x29, x30, [sp], #64
  fc:	ret
 100:	tbnz	w1, #0, 13c <__cxa_tm_cleanup+0x13c>
 104:	sub	x19, x19, #0x60
 108:	ldaxr	w0, [x19]
 10c:	sub	w0, w0, #0x1
 110:	stlxr	w1, w0, [x19]
 114:	cbnz	w1, 108 <__cxa_tm_cleanup+0x108>
 118:	cbnz	w0, 6c <__cxa_tm_cleanup+0x6c>
 11c:	add	x0, x19, #0x80
 120:	bl	0 <__cxa_free_exception>
 124:	b	6c <__cxa_tm_cleanup+0x6c>
 128:	ldr	x21, [x19]
 12c:	mov	x0, x19
 130:	sub	x21, x21, #0x80
 134:	bl	0 <__cxa_free_dependent_exception>
 138:	b	bc <__cxa_tm_cleanup+0xbc>
 13c:	ldur	x1, [x19, #-80]
 140:	sub	x0, x19, #0x50
 144:	sub	x19, x1, #0x80
 148:	bl	0 <__cxa_free_dependent_exception>
 14c:	b	108 <__cxa_tm_cleanup+0x108>
 150:	cmn	x1, #0x1
 154:	b.ne	15c <__cxa_tm_cleanup+0x15c>  // b.any
 158:	bl	0 <__cxa_call_unexpected>
 15c:	bl	0 <_Unwind_Resume>

eh_throw.o:     file format elf64-littleaarch64


Disassembly of section .text._ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception:

0000000000000000 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	cmp	w0, #0x1
   8:	mov	x29, sp
   c:	b.hi	58 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x58>  // b.pmore
  10:	sub	x0, x1, #0x60
  14:	ldaxr	w2, [x0]
  18:	sub	w2, w2, #0x1
  1c:	stlxr	w3, w2, [x0]
  20:	cbnz	w3, 14 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x14>
  24:	cbnz	w2, 50 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x50>
  28:	ldur	x2, [x1, #-72]
  2c:	str	x19, [sp, #16]
  30:	add	x19, x1, #0x20
  34:	cbz	x2, 40 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x40>
  38:	mov	x0, x19
  3c:	blr	x2
  40:	mov	x0, x19
  44:	ldr	x19, [sp, #16]
  48:	ldp	x29, x30, [sp], #32
  4c:	b	0 <__cxa_free_exception>
  50:	ldp	x29, x30, [sp], #32
  54:	ret
  58:	ldur	x0, [x1, #-56]
  5c:	str	x19, [sp, #16]
  60:	bl	0 <_ZN10__cxxabiv111__terminateEPFvvE>

Disassembly of section .text.__cxa_init_primary_exception:

0000000000000000 <__cxa_init_primary_exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	sub	x20, x0, #0x80
  14:	stur	wzr, [x0, #-128]
  18:	stp	x1, x2, [x0, #-112]
  1c:	bl	0 <_ZSt14get_unexpectedv>
  20:	stur	x0, [x19, #-96]
  24:	bl	0 <_ZSt13get_terminatev>
  28:	mov	x3, x0
  2c:	mov	x2, #0x2b00                	// #11008
  30:	adrp	x1, 0 <__cxa_init_primary_exception>
  34:	movk	x2, #0x432b, lsl #16
  38:	add	x1, x1, #0x0
  3c:	movk	x2, #0x5543, lsl #32
  40:	stur	x3, [x19, #-88]
  44:	movk	x2, #0x474e, lsl #48
  48:	stp	x2, x1, [x19, #-32]
  4c:	mov	x0, x20
  50:	ldp	x19, x20, [sp, #16]
  54:	ldp	x29, x30, [sp], #32
  58:	ret

Disassembly of section .text.__cxa_throw:

0000000000000000 <__cxa_throw>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x1
  14:	str	x21, [sp, #32]
  18:	mov	x21, x2
  1c:	bl	0 <__cxa_get_globals>
  20:	mov	x3, x0
  24:	mov	x2, x21
  28:	mov	x1, x20
  2c:	mov	x0, x19
  30:	ldr	w4, [x3, #8]
  34:	add	w4, w4, #0x1
  38:	str	w4, [x3, #8]
  3c:	bl	0 <__cxa_throw>
  40:	mov	x19, x0
  44:	mov	w0, #0x1                   	// #1
  48:	str	w0, [x19], #96
  4c:	mov	x0, x19
  50:	bl	0 <_Unwind_RaiseException>
  54:	mov	x0, x19
  58:	bl	0 <__cxa_begin_catch>
  5c:	bl	0 <_ZSt9terminatev>

Disassembly of section .text.__cxa_rethrow:

0000000000000000 <__cxa_rethrow>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	bl	0 <__cxa_get_globals>
  10:	ldr	w2, [x0, #8]
  14:	ldr	x1, [x0]
  18:	add	w2, w2, #0x1
  1c:	str	w2, [x0, #8]
  20:	cbz	x1, 5c <__cxa_rethrow+0x5c>
  24:	mov	x3, #0xd500                	// #54528
  28:	ldr	x2, [x1, #80]
  2c:	movk	x3, #0xbcd4, lsl #16
  30:	movk	x3, #0xaabc, lsl #32
  34:	movk	x3, #0xb8b1, lsl #48
  38:	add	x2, x2, x3
  3c:	cmp	x2, #0x1
  40:	b.ls	60 <__cxa_rethrow+0x60>  // b.plast
  44:	str	xzr, [x0]
  48:	add	x19, x1, #0x50
  4c:	mov	x0, x19
  50:	bl	0 <_Unwind_Resume_or_Rethrow>
  54:	mov	x0, x19
  58:	bl	0 <__cxa_begin_catch>
  5c:	bl	0 <_ZSt9terminatev>
  60:	ldr	w0, [x1, #40]
  64:	neg	w0, w0
  68:	str	w0, [x1, #40]
  6c:	b	48 <__cxa_rethrow+0x48>

eh_type.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_current_exception_type:

0000000000000000 <__cxa_current_exception_type>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals>
   c:	ldr	x0, [x0]
  10:	cbz	x0, 24 <__cxa_current_exception_type+0x24>
  14:	ldr	x1, [x0, #80]
  18:	ldr	x0, [x0]
  1c:	tbz	w1, #0, 24 <__cxa_current_exception_type+0x24>
  20:	ldur	x0, [x0, #-112]
  24:	ldp	x29, x30, [sp], #16
  28:	ret

eh_unex_handler.o:     file format elf64-littleaarch64


enum_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv116__enum_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv116__enum_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv116__enum_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv116__enum_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv116__enum_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv116__enum_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x10                  	// #16
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

function_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNK10__cxxabiv120__function_type_info15__is_function_pEv:

0000000000000000 <_ZNK10__cxxabiv120__function_type_info15__is_function_pEv>:
   0:	mov	w0, #0x1                   	// #1
   4:	ret

Disassembly of section .text._ZN10__cxxabiv120__function_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv120__function_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv120__function_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv120__function_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv120__function_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv120__function_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x10                  	// #16
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

fundamental_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv123__fundamental_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv123__fundamental_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x10                  	// #16
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

guard.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_guard_acquire:

0000000000000000 <__cxa_guard_acquire>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x23, [sp, #48]
   c:	mov	x23, x0
  10:	ldarb	w0, [x0]
  14:	tst	w0, #0xff
  18:	b.ne	74 <__cxa_guard_acquire+0x74>  // b.any
  1c:	adrp	x0, 0 <__pthread_key_create>
  20:	ldr	x0, [x0]
  24:	cbz	x0, 84 <__cxa_guard_acquire+0x84>
  28:	stp	x19, x20, [sp, #16]
  2c:	mov	w19, #0x100                 	// #256
  30:	mov	w20, #0x1                   	// #1
  34:	stp	x21, x22, [sp, #32]
  38:	mov	w21, w19
  3c:	ldaxr	w0, [x23]
  40:	cbnz	w0, 4c <__cxa_guard_acquire+0x4c>
  44:	stlxr	w1, w19, [x23]
  48:	cbnz	w1, 3c <__cxa_guard_acquire+0x3c>
  4c:	cmp	w0, #0x0
  50:	b.ne	ac <__cxa_guard_acquire+0xac>  // b.any
  54:	mov	w0, #0x1                   	// #1
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldp	x21, x22, [sp, #32]
  60:	ldr	x23, [sp, #48]
  64:	ldp	x29, x30, [sp], #64
  68:	ret
  6c:	ldp	x19, x20, [sp, #16]
  70:	ldp	x21, x22, [sp, #32]
  74:	mov	w0, #0x0                   	// #0
  78:	ldr	x23, [sp, #48]
  7c:	ldp	x29, x30, [sp], #64
  80:	ret
  84:	ldrb	w0, [x23]
  88:	cbnz	w0, 74 <__cxa_guard_acquire+0x74>
  8c:	ldrb	w0, [x23, #1]
  90:	cbnz	w0, 124 <__cxa_guard_acquire+0x124>
  94:	mov	w2, #0x1                   	// #1
  98:	strb	w2, [x23, #1]
  9c:	mov	w0, #0x1                   	// #1
  a0:	ldr	x23, [sp, #48]
  a4:	ldp	x29, x30, [sp], #64
  a8:	ret
  ac:	orr	w22, w19, #0x10000
  b0:	mov	w3, w0
  b4:	cmp	w20, w3
  b8:	b.eq	6c <__cxa_guard_acquire+0x6c>  // b.none
  bc:	cmp	w19, w3
  c0:	b.ne	e0 <__cxa_guard_acquire+0xe0>  // b.any
  c4:	mov	w3, w22
  c8:	ldaxr	w2, [x23]
  cc:	cmp	w2, w0
  d0:	b.ne	dc <__cxa_guard_acquire+0xdc>  // b.any
  d4:	stlxr	w1, w22, [x23]
  d8:	cbnz	w1, c8 <__cxa_guard_acquire+0xc8>
  dc:	b.ne	114 <__cxa_guard_acquire+0x114>  // b.any
  e0:	mov	x1, x23
  e4:	mov	w4, #0x0                   	// #0
  e8:	mov	w2, #0x0                   	// #0
  ec:	mov	x0, #0x62                  	// #98
  f0:	bl	0 <syscall>
  f4:	ldaxr	w0, [x23]
  f8:	cbnz	w0, 104 <__cxa_guard_acquire+0x104>
  fc:	stlxr	w1, w21, [x23]
 100:	cbnz	w1, f4 <__cxa_guard_acquire+0xf4>
 104:	cmp	w0, #0x0
 108:	mov	w3, w0
 10c:	b.eq	54 <__cxa_guard_acquire+0x54>  // b.none
 110:	b	b4 <__cxa_guard_acquire+0xb4>
 114:	cmp	w20, w2
 118:	b.eq	6c <__cxa_guard_acquire+0x6c>  // b.none
 11c:	cbnz	w2, e0 <__cxa_guard_acquire+0xe0>
 120:	b	f4 <__cxa_guard_acquire+0xf4>
 124:	mov	x0, #0x8                   	// #8
 128:	stp	x19, x20, [sp, #16]
 12c:	stp	x21, x22, [sp, #32]
 130:	bl	0 <__cxa_allocate_exception>
 134:	mov	x19, x0
 138:	bl	0 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>
 13c:	adrp	x2, 0 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>
 140:	adrp	x1, 0 <_ZTIN9__gnu_cxx20recursive_init_errorE>
 144:	mov	x0, x19
 148:	ldr	x2, [x2]
 14c:	ldr	x1, [x1]
 150:	bl	0 <__cxa_throw>

Disassembly of section .text.__cxa_guard_abort:

0000000000000000 <__cxa_guard_abort>:
   0:	adrp	x1, 0 <__pthread_key_create>
   4:	ldr	x1, [x1]
   8:	cbnz	x1, 14 <__cxa_guard_abort+0x14>
   c:	strb	wzr, [x0, #1]
  10:	ret
  14:	ldaxr	w1, [x0]
  18:	stlxr	w2, wzr, [x0]
  1c:	cbnz	w2, 14 <__cxa_guard_abort+0x14>
  20:	tbz	w1, #16, 10 <__cxa_guard_abort+0x10>
  24:	mov	x1, x0
  28:	mov	w3, #0x7fffffff            	// #2147483647
  2c:	mov	w2, #0x1                   	// #1
  30:	mov	x0, #0x62                  	// #98
  34:	b	0 <syscall>

Disassembly of section .text.__cxa_guard_release:

0000000000000000 <__cxa_guard_release>:
   0:	adrp	x1, 0 <__pthread_key_create>
   4:	ldr	x1, [x1]
   8:	cbz	x1, 24 <__cxa_guard_release+0x24>
   c:	mov	w2, #0x1                   	// #1
  10:	ldaxr	w1, [x0]
  14:	stlxr	w3, w2, [x0]
  18:	cbnz	w3, 10 <__cxa_guard_release+0x10>
  1c:	tbnz	w1, #16, 34 <__cxa_guard_release+0x34>
  20:	ret
  24:	strb	wzr, [x0, #1]
  28:	mov	w1, #0x1                   	// #1
  2c:	stlrb	w1, [x0]
  30:	ret
  34:	mov	x1, x0
  38:	mov	w3, #0x7fffffff            	// #2147483647
  3c:	mov	x0, #0x62                  	// #98
  40:	b	0 <syscall>

guard_error.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN9__gnu_cxx20recursive_init_errorD2Ev:

0000000000000000 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>:
   0:	adrp	x1, 0 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9exceptionD2Ev>

Disassembly of section .text._ZN9__gnu_cxx20recursive_init_errorD0Ev:

0000000000000000 <_ZN9__gnu_cxx20recursive_init_errorD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN9__gnu_cxx20recursive_init_errorD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x8                   	// #8
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZN9__gnu_cxx20recursive_init_errorC2Ev:

0000000000000000 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>:
   0:	adrp	x1, 0 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	ret

hash_bytes.o:     file format elf64-littleaarch64


Disassembly of section .text._ZSt11_Hash_bytesPKvmm:

0000000000000000 <_ZSt11_Hash_bytesPKvmm>:
   0:	mov	x4, #0xe995                	// #59797
   4:	and	x5, x1, #0xfffffffffffffff8
   8:	movk	x4, #0x5bd1, lsl #16
   c:	add	x5, x0, x5
  10:	movk	x4, #0xa793, lsl #32
  14:	cmp	x0, x5
  18:	movk	x4, #0xc6a4, lsl #48
  1c:	mul	x3, x1, x4
  20:	eor	x2, x3, x2
  24:	b.eq	48 <_ZSt11_Hash_bytesPKvmm+0x48>  // b.none
  28:	ldr	x3, [x0], #8
  2c:	cmp	x5, x0
  30:	mul	x3, x3, x4
  34:	eor	x3, x3, x3, lsr #47
  38:	mul	x3, x3, x4
  3c:	eor	x2, x3, x2
  40:	mul	x2, x2, x4
  44:	b.ne	28 <_ZSt11_Hash_bytesPKvmm+0x28>  // b.any
  48:	ands	x0, x1, #0x7
  4c:	b.eq	e0 <_ZSt11_Hash_bytesPKvmm+0xe0>  // b.none
  50:	sub	w1, w0, #0x1
  54:	subs	w3, w0, #0x2
  58:	ldrb	w1, [x5, w1, sxtw]
  5c:	b.mi	c8 <_ZSt11_Hash_bytesPKvmm+0xc8>  // b.first
  60:	ldrb	w3, [x5, w3, sxtw]
  64:	cmp	x0, #0x2
  68:	sub	w4, w0, #0x3
  6c:	add	x1, x3, x1, lsl #8
  70:	b.eq	c8 <_ZSt11_Hash_bytesPKvmm+0xc8>  // b.none
  74:	ldrb	w3, [x5, w4, sxtw]
  78:	cmp	x0, #0x3
  7c:	sub	w4, w0, #0x4
  80:	add	x1, x3, x1, lsl #8
  84:	b.eq	c8 <_ZSt11_Hash_bytesPKvmm+0xc8>  // b.none
  88:	ldrb	w3, [x5, w4, sxtw]
  8c:	cmp	x0, #0x4
  90:	sub	w4, w0, #0x5
  94:	add	x1, x3, x1, lsl #8
  98:	b.eq	c8 <_ZSt11_Hash_bytesPKvmm+0xc8>  // b.none
  9c:	ldrb	w3, [x5, w4, sxtw]
  a0:	cmp	x0, #0x5
  a4:	sub	w4, w0, #0x6
  a8:	add	x1, x3, x1, lsl #8
  ac:	b.eq	c8 <_ZSt11_Hash_bytesPKvmm+0xc8>  // b.none
  b0:	ldrb	w3, [x5, w4, sxtw]
  b4:	cmp	w0, #0x7
  b8:	add	x1, x3, x1, lsl #8
  bc:	b.ne	c8 <_ZSt11_Hash_bytesPKvmm+0xc8>  // b.any
  c0:	ldrb	w0, [x5]
  c4:	add	x1, x0, x1, lsl #8
  c8:	mov	x3, #0xe995                	// #59797
  cc:	eor	x2, x2, x1
  d0:	movk	x3, #0x5bd1, lsl #16
  d4:	movk	x3, #0xa793, lsl #32
  d8:	movk	x3, #0xc6a4, lsl #48
  dc:	mul	x2, x2, x3
  e0:	mov	x0, #0xe995                	// #59797
  e4:	eor	x2, x2, x2, lsr #47
  e8:	movk	x0, #0x5bd1, lsl #16
  ec:	movk	x0, #0xa793, lsl #32
  f0:	movk	x0, #0xc6a4, lsl #48
  f4:	mul	x0, x2, x0
  f8:	eor	x0, x0, x0, lsr #47
  fc:	ret

Disassembly of section .text._ZSt15_Fnv_hash_bytesPKvmm:

0000000000000000 <_ZSt15_Fnv_hash_bytesPKvmm>:
   0:	mov	x3, x0
   4:	cbz	x1, 30 <_ZSt15_Fnv_hash_bytesPKvmm+0x30>
   8:	add	x1, x0, x1
   c:	mov	x4, #0x1b3                 	// #435
  10:	mov	x0, x2
  14:	movk	x4, #0x100, lsl #32
  18:	ldrb	w2, [x3], #1
  1c:	eor	x0, x2, x0
  20:	cmp	x3, x1
  24:	mul	x0, x0, x4
  28:	b.ne	18 <_ZSt15_Fnv_hash_bytesPKvmm+0x18>  // b.any
  2c:	ret
  30:	mov	x0, x2
  34:	ret

nested_exception.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt16nested_exceptionD2Ev:

0000000000000000 <_ZNSt16nested_exceptionD1Ev>:
   0:	adrp	x1, 0 <_ZNSt16nested_exceptionD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0], #8
  10:	b	0 <_ZNSt15__exception_ptr13exception_ptrD1Ev>

Disassembly of section .text._ZNSt16nested_exceptionD0Ev:

0000000000000000 <_ZNSt16nested_exceptionD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt16nested_exceptionD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x10                  	// #16
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

new_handler.o:     file format elf64-littleaarch64


Disassembly of section .text._ZSt15set_new_handlerPFvvE:

0000000000000000 <_ZSt15set_new_handlerPFvvE>:
   0:	adrp	x1, 0 <_ZSt15set_new_handlerPFvvE>
   4:	mov	x2, x0
   8:	add	x1, x1, #0x0
   c:	ldaxr	x0, [x1]
  10:	stlxr	w3, x2, [x1]
  14:	cbnz	w3, c <_ZSt15set_new_handlerPFvvE+0xc>
  18:	ret

Disassembly of section .text._ZSt15get_new_handlerv:

0000000000000000 <_ZSt15get_new_handlerv>:
   0:	adrp	x0, 0 <_ZSt15get_new_handlerv>
   4:	add	x0, x0, #0x0
   8:	ldar	x0, [x0]
   c:	ret

new_op.o:     file format elf64-littleaarch64


Disassembly of section .text._Znwm:

0000000000000000 <_Znwm>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	cmp	x0, #0x0
   8:	mov	x29, sp
   c:	str	x19, [sp, #16]
  10:	csinc	x19, x0, xzr, ne  // ne = any
  14:	mov	x0, x19
  18:	bl	0 <malloc>
  1c:	cbz	x0, 2c <_Znwm+0x2c>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret
  2c:	bl	0 <_ZSt15get_new_handlerv>
  30:	cbz	x0, 3c <_Znwm+0x3c>
  34:	blr	x0
  38:	b	14 <_Znwm+0x14>
  3c:	mov	x0, #0x8                   	// #8
  40:	bl	0 <__cxa_allocate_exception>
  44:	adrp	x3, 0 <_ZTVSt9bad_alloc>
  48:	adrp	x2, 0 <_ZNSt9bad_allocD1Ev>
  4c:	adrp	x1, 0 <_ZTISt9bad_alloc>
  50:	ldr	x3, [x3]
  54:	ldr	x2, [x2]
  58:	add	x3, x3, #0x10
  5c:	ldr	x1, [x1]
  60:	str	x3, [x0]
  64:	bl	0 <__cxa_throw>

new_opnt.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnwmRKSt9nothrow_t:

0000000000000000 <_ZnwmRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_Znwm>
   c:	ldp	x29, x30, [sp], #16
  10:	ret
  14:	bl	0 <__cxa_begin_catch>
  18:	bl	0 <__cxa_end_catch>
  1c:	mov	x0, #0x0                   	// #0
  20:	b	c <_ZnwmRKSt9nothrow_t+0xc>

new_opv.o:     file format elf64-littleaarch64


Disassembly of section .text._Znam:

0000000000000000 <_Znam>:
   0:	b	0 <_Znwm>

new_opvnt.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnamRKSt9nothrow_t:

0000000000000000 <_ZnamRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_Znam>
   c:	ldp	x29, x30, [sp], #16
  10:	ret
  14:	bl	0 <__cxa_begin_catch>
  18:	bl	0 <__cxa_end_catch>
  1c:	mov	x0, #0x0                   	// #0
  20:	b	c <_ZnamRKSt9nothrow_t+0xc>

new_opa.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnwmSt11align_val_t:

0000000000000000 <_ZnwmSt11align_val_t>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	cbz	x1, 70 <_ZnwmSt11align_val_t+0x70>
  10:	fmov	d0, x1
  14:	mov	x19, x1
  18:	cnt	v0.8b, v0.8b
  1c:	addv	b0, v0.8b
  20:	umov	w1, v0.b[0]
  24:	cmp	w1, #0x1
  28:	b.ne	70 <_ZnwmSt11align_val_t+0x70>  // b.any
  2c:	cmp	x0, #0x0
  30:	neg	x20, x19
  34:	csinc	x0, x0, xzr, ne  // ne = any
  38:	sub	x0, x0, #0x1
  3c:	add	x0, x0, x19
  40:	and	x20, x20, x0
  44:	mov	x1, x20
  48:	mov	x0, x19
  4c:	bl	0 <aligned_alloc>
  50:	cbz	x0, 60 <_ZnwmSt11align_val_t+0x60>
  54:	ldp	x19, x20, [sp, #16]
  58:	ldp	x29, x30, [sp], #32
  5c:	ret
  60:	bl	0 <_ZSt15get_new_handlerv>
  64:	cbz	x0, 70 <_ZnwmSt11align_val_t+0x70>
  68:	blr	x0
  6c:	b	44 <_ZnwmSt11align_val_t+0x44>
  70:	mov	x0, #0x8                   	// #8
  74:	bl	0 <__cxa_allocate_exception>
  78:	adrp	x3, 0 <_ZTVSt9bad_alloc>
  7c:	adrp	x2, 0 <_ZNSt9bad_allocD1Ev>
  80:	adrp	x1, 0 <_ZTISt9bad_alloc>
  84:	ldr	x3, [x3]
  88:	ldr	x2, [x2]
  8c:	add	x3, x3, #0x10
  90:	ldr	x1, [x1]
  94:	str	x3, [x0]
  98:	bl	0 <__cxa_throw>

new_opant.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnwmSt11align_val_tRKSt9nothrow_t:

0000000000000000 <_ZnwmSt11align_val_tRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZnwmSt11align_val_t>
   c:	ldp	x29, x30, [sp], #16
  10:	ret
  14:	bl	0 <__cxa_begin_catch>
  18:	bl	0 <__cxa_end_catch>
  1c:	mov	x0, #0x0                   	// #0
  20:	b	c <_ZnwmSt11align_val_tRKSt9nothrow_t+0xc>

new_opva.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnamSt11align_val_t:

0000000000000000 <_ZnamSt11align_val_t>:
   0:	b	0 <_ZnwmSt11align_val_t>

new_opvant.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnamSt11align_val_tRKSt9nothrow_t:

0000000000000000 <_ZnamSt11align_val_tRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZnamSt11align_val_t>
   c:	ldp	x29, x30, [sp], #16
  10:	ret
  14:	bl	0 <__cxa_begin_catch>
  18:	bl	0 <__cxa_end_catch>
  1c:	mov	x0, #0x0                   	// #0
  20:	b	c <_ZnamSt11align_val_tRKSt9nothrow_t+0xc>

del_opa.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvSt11align_val_t:

0000000000000000 <_ZdlPvSt11align_val_t>:
   0:	b	0 <free>

del_opant.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvSt11align_val_tRKSt9nothrow_t:

0000000000000000 <_ZdlPvSt11align_val_tRKSt9nothrow_t>:
   0:	b	0 <_ZdlPvSt11align_val_t>

del_opsa.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvmSt11align_val_t:

0000000000000000 <_ZdlPvmSt11align_val_t>:
   0:	mov	x1, x2
   4:	b	0 <_ZdlPvSt11align_val_t>

del_opva.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvSt11align_val_t:

0000000000000000 <_ZdaPvSt11align_val_t>:
   0:	b	0 <_ZdlPvSt11align_val_t>

del_opvant.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvSt11align_val_tRKSt9nothrow_t:

0000000000000000 <_ZdaPvSt11align_val_tRKSt9nothrow_t>:
   0:	b	0 <_ZdaPvSt11align_val_t>

del_opvsa.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvmSt11align_val_t:

0000000000000000 <_ZdaPvmSt11align_val_t>:
   0:	mov	x1, x2
   4:	b	0 <_ZdaPvSt11align_val_t>

pbase_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj:

0000000000000000 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
   0:	ldr	x0, [x0, #24]
   4:	add	w3, w3, #0x2
   8:	ldr	x1, [x1, #24]
   c:	ldr	x4, [x0]
  10:	ldr	x4, [x4, #32]
  14:	mov	x16, x4
  18:	br	x16

Disassembly of section .text._ZN10__cxxabiv117__pbase_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZNSt9type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv117__pbase_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x20                  	// #32
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj:

0000000000000000 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	stp	x21, x22, [sp, #32]
  14:	ldr	x0, [x0, #8]
  18:	ldr	x21, [x1, #8]
  1c:	cmp	x0, x21
  20:	b.eq	1cc <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1cc>  // b.none
  24:	stp	x23, x24, [sp, #48]
  28:	mov	x20, x1
  2c:	mov	x23, x2
  30:	ldrb	w1, [x0]
  34:	mov	w22, w3
  38:	cmp	w1, #0x2a
  3c:	b.eq	64 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x64>  // b.none
  40:	mov	x1, x21
  44:	bl	0 <strcmp>
  48:	cbnz	w0, 64 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
  4c:	ldp	x23, x24, [sp, #48]
  50:	mov	w0, #0x1                   	// #1
  54:	ldp	x19, x20, [sp, #16]
  58:	ldp	x21, x22, [sp, #32]
  5c:	ldp	x29, x30, [sp], #64
  60:	ret
  64:	adrp	x0, 0 <_ZTIDn>
  68:	ldr	x0, [x0]
  6c:	ldr	x1, [x0, #8]
  70:	cmp	x21, x1
  74:	b.eq	90 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x90>  // b.none
  78:	ldrb	w0, [x21]
  7c:	cmp	w0, #0x2a
  80:	b.eq	114 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x114>  // b.none
  84:	mov	x0, x21
  88:	bl	0 <strcmp>
  8c:	cbnz	w0, 114 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x114>
  90:	ldr	x24, [x19]
  94:	adrp	x0, 0 <_ZTIN10__cxxabiv119__pointer_type_infoE>
  98:	ldr	x0, [x0]
  9c:	ldur	x2, [x24, #-8]
  a0:	ldr	x1, [x0, #8]
  a4:	ldr	x21, [x2, #8]
  a8:	cmp	x21, x1
  ac:	b.eq	1e0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1e0>  // b.none
  b0:	ldrb	w0, [x21]
  b4:	cmp	w0, #0x2a
  b8:	b.eq	1fc <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1fc>  // b.none
  bc:	mov	x0, x21
  c0:	bl	0 <strcmp>
  c4:	cbz	w0, 1e0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1e0>
  c8:	adrp	x0, 0 <_ZTIN10__cxxabiv129__pointer_to_member_type_infoE>
  cc:	ldr	x0, [x0]
  d0:	ldr	x1, [x0, #8]
  d4:	cmp	x21, x1
  d8:	b.eq	e8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xe8>  // b.none
  dc:	mov	x0, x21
  e0:	bl	0 <strcmp>
  e4:	cbnz	w0, 254 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x254>
  e8:	ldr	x0, [x19, #24]
  ec:	ldr	x1, [x0]
  f0:	ldr	x1, [x1, #24]
  f4:	blr	x1
  f8:	ands	w0, w0, #0xff
  fc:	b.eq	23c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x23c>  // b.none
 100:	adrp	x1, 0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>
 104:	add	x1, x1, #0x0
 108:	str	x1, [x23]
 10c:	ldp	x23, x24, [sp, #48]
 110:	b	54 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x54>
 114:	ldr	x24, [x19]
 118:	ldr	x0, [x20]
 11c:	ldur	x1, [x24, #-8]
 120:	ldur	x0, [x0, #-8]
 124:	ldr	x21, [x1, #8]
 128:	ldr	x1, [x0, #8]
 12c:	cmp	x21, x1
 130:	b.eq	14c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x14c>  // b.none
 134:	ldrb	w0, [x21]
 138:	cmp	w0, #0x2a
 13c:	b.eq	224 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x224>  // b.none
 140:	mov	x0, x21
 144:	bl	0 <strcmp>
 148:	cbnz	w0, 224 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x224>
 14c:	tbz	w22, #0, 224 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x224>
 150:	ldr	w0, [x20, #16]
 154:	ldr	w3, [x19, #16]
 158:	and	w1, w0, #0x60
 15c:	and	w2, w3, #0x60
 160:	bics	wzr, w1, w2
 164:	and	w4, w0, w2
 168:	csel	w0, w4, w0, ne  // ne = any
 16c:	bic	w1, w2, w1
 170:	bic	w0, w0, w3
 174:	orr	w0, w1, w0
 178:	cbnz	w0, 224 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x224>
 17c:	adrp	x0, 0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>
 180:	tst	x3, #0x1
 184:	ldr	x4, [x24, #48]
 188:	and	w1, w22, #0xfffffffe
 18c:	ldr	x0, [x0]
 190:	csel	w22, w1, w22, eq  // eq = none
 194:	cmp	x4, x0
 198:	b.ne	26c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x26c>  // b.any
 19c:	ldr	x0, [x19, #24]
 1a0:	add	w3, w22, #0x2
 1a4:	ldr	x1, [x20, #24]
 1a8:	mov	x2, x23
 1ac:	ldr	x4, [x0]
 1b0:	ldr	x4, [x4, #32]
 1b4:	mov	x16, x4
 1b8:	ldp	x19, x20, [sp, #16]
 1bc:	ldp	x21, x22, [sp, #32]
 1c0:	ldp	x23, x24, [sp, #48]
 1c4:	ldp	x29, x30, [sp], #64
 1c8:	br	x16
 1cc:	mov	w0, #0x1                   	// #1
 1d0:	ldp	x19, x20, [sp, #16]
 1d4:	ldp	x21, x22, [sp, #32]
 1d8:	ldp	x29, x30, [sp], #64
 1dc:	ret
 1e0:	str	xzr, [x23]
 1e4:	mov	w0, #0x1                   	// #1
 1e8:	ldp	x19, x20, [sp, #16]
 1ec:	ldp	x21, x22, [sp, #32]
 1f0:	ldp	x23, x24, [sp, #48]
 1f4:	ldp	x29, x30, [sp], #64
 1f8:	ret
 1fc:	adrp	x0, 0 <_ZTIN10__cxxabiv129__pointer_to_member_type_infoE>
 200:	ldr	x0, [x0]
 204:	ldr	x0, [x0, #8]
 208:	cmp	x21, x0
 20c:	b.eq	e8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xe8>  // b.none
 210:	ldr	x0, [x20]
 214:	ldur	x0, [x0, #-8]
 218:	ldr	x0, [x0, #8]
 21c:	cmp	x21, x0
 220:	b.eq	14c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x14c>  // b.none
 224:	mov	w0, #0x0                   	// #0
 228:	ldp	x19, x20, [sp, #16]
 22c:	ldp	x21, x22, [sp, #32]
 230:	ldp	x23, x24, [sp, #48]
 234:	ldp	x29, x30, [sp], #64
 238:	ret
 23c:	adrp	x1, 0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>
 240:	mov	w0, #0x1                   	// #1
 244:	add	x1, x1, #0x0
 248:	str	x1, [x23]
 24c:	ldp	x23, x24, [sp, #48]
 250:	b	54 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x54>
 254:	ldr	x0, [x20]
 258:	ldur	x0, [x0, #-8]
 25c:	ldr	x1, [x0, #8]
 260:	cmp	x21, x1
 264:	b.ne	140 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x140>  // b.any
 268:	b	14c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x14c>
 26c:	mov	w3, w22
 270:	mov	x2, x23
 274:	mov	x1, x20
 278:	mov	x0, x19
 27c:	b	1b4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1b4>

pmem_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x28                  	// #40
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj:

0000000000000000 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x0
  10:	mov	x19, x1
  14:	ldr	x0, [x0, #32]
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x21, x2
  20:	ldr	x1, [x1, #32]
  24:	mov	w22, w3
  28:	ldr	x0, [x0, #8]
  2c:	ldr	x1, [x1, #8]
  30:	cmp	x0, x1
  34:	b.eq	60 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x60>  // b.none
  38:	ldrb	w2, [x0]
  3c:	cmp	w2, #0x2a
  40:	b.eq	4c <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x4c>  // b.none
  44:	bl	0 <strcmp>
  48:	cbz	w0, 60 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x60>
  4c:	mov	w0, #0x0                   	// #0
  50:	ldp	x19, x20, [sp, #16]
  54:	ldp	x21, x22, [sp, #32]
  58:	ldp	x29, x30, [sp], #48
  5c:	ret
  60:	ldr	x0, [x20, #24]
  64:	add	w3, w22, #0x2
  68:	mov	x2, x21
  6c:	ldr	x1, [x19, #24]
  70:	ldr	x4, [x0]
  74:	ldp	x19, x20, [sp, #16]
  78:	ldp	x21, x22, [sp, #32]
  7c:	ldp	x29, x30, [sp], #48
  80:	ldr	x4, [x4, #32]
  84:	mov	x16, x4
  88:	br	x16

pointer_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv:

0000000000000000 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
   0:	mov	w0, #0x1                   	// #1
   4:	ret

Disassembly of section .text._ZN10__cxxabiv119__pointer_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv119__pointer_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x20                  	// #32
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj:

0000000000000000 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	cmp	w3, #0x1
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	w19, w3
  14:	mov	x20, x1
  18:	str	x21, [sp, #32]
  1c:	ldr	x21, [x0, #24]
  20:	b.ls	4c <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x4c>  // b.plast
  24:	ldr	x0, [x21]
  28:	add	w3, w19, #0x2
  2c:	ldr	x1, [x20, #24]
  30:	ldp	x19, x20, [sp, #16]
  34:	ldr	x4, [x0, #32]
  38:	mov	x0, x21
  3c:	ldr	x21, [sp, #32]
  40:	mov	x16, x4
  44:	ldp	x29, x30, [sp], #64
  48:	br	x16
  4c:	adrp	x1, 0 <_ZTIv>
  50:	ldr	x0, [x21, #8]
  54:	ldr	x1, [x1]
  58:	ldr	x1, [x1, #8]
  5c:	cmp	x0, x1
  60:	b.eq	80 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x80>  // b.none
  64:	ldrb	w3, [x0]
  68:	cmp	w3, #0x2a
  6c:	b.eq	24 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x24>  // b.none
  70:	str	x2, [sp, #56]
  74:	bl	0 <strcmp>
  78:	ldr	x2, [sp, #56]
  7c:	cbnz	w0, 24 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x24>
  80:	ldr	x0, [x20, #24]
  84:	ldr	x1, [x0]
  88:	ldr	x1, [x1, #24]
  8c:	blr	x1
  90:	and	w0, w0, #0xff
  94:	eor	w0, w0, #0x1
  98:	ldp	x19, x20, [sp, #16]
  9c:	ldr	x21, [sp, #32]
  a0:	ldp	x29, x30, [sp], #64
  a4:	ret

pure.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_pure_virtual:

0000000000000000 <__cxa_pure_virtual>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x1, 0 <__cxa_pure_virtual>
   8:	add	x1, x1, #0x0
   c:	mov	x2, #0x1b                  	// #27
  10:	mov	x29, sp
  14:	mov	w0, #0x2                   	// #2
  18:	bl	0 <write>
  1c:	bl	0 <_ZSt9terminatev>

Disassembly of section .text.__cxa_deleted_virtual:

0000000000000000 <__cxa_deleted_virtual>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x1, 0 <__cxa_deleted_virtual>
   8:	add	x1, x1, #0x0
   c:	mov	x2, #0x1e                  	// #30
  10:	mov	x29, sp
  14:	mov	w0, #0x2                   	// #2
  18:	bl	0 <write>
  1c:	bl	0 <_ZSt9terminatev>

si_class_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv120__si_class_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZN10__cxxabiv117__class_type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv120__si_class_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x18                  	// #24
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_:

0000000000000000 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	cmp	x4, x2
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x0
  14:	mov	x20, x1
  18:	b.eq	3c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x3c>  // b.none
  1c:	ldr	x0, [x19, #16]
  20:	mov	x1, x20
  24:	ldp	x19, x20, [sp, #16]
  28:	ldr	x5, [x0]
  2c:	ldr	x5, [x5, #64]
  30:	ldp	x29, x30, [sp], #64
  34:	mov	x16, x5
  38:	br	x16
  3c:	ldr	x1, [x3, #8]
  40:	ldr	x0, [x0, #8]
  44:	cmp	x0, x1
  48:	b.eq	70 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x70>  // b.none
  4c:	ldrb	w5, [x0]
  50:	cmp	w5, #0x2a
  54:	b.eq	1c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x1c>  // b.none
  58:	stp	x2, x3, [sp, #40]
  5c:	str	x4, [sp, #56]
  60:	bl	0 <strcmp>
  64:	ldp	x2, x3, [sp, #40]
  68:	ldr	x4, [sp, #56]
  6c:	cbnz	w0, 1c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x1c>
  70:	mov	w0, #0x6                   	// #6
  74:	ldp	x19, x20, [sp, #16]
  78:	ldp	x29, x30, [sp], #64
  7c:	ret

Disassembly of section .text._ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE:

0000000000000000 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x21, x22, [sp, #32]
   c:	mov	x22, x3
  10:	mov	x21, x1
  14:	stp	x25, x26, [sp, #64]
  18:	mov	w26, w2
  1c:	ldr	x25, [x0, #8]
  20:	stp	x19, x20, [sp, #16]
  24:	mov	x19, x4
  28:	ldr	x3, [x3, #8]
  2c:	stp	x23, x24, [sp, #48]
  30:	mov	x20, x7
  34:	mov	x23, x6
  38:	cmp	x25, x3
  3c:	b.eq	6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>  // b.none
  40:	stp	x27, x28, [sp, #80]
  44:	mov	x24, x5
  48:	mov	x27, x0
  4c:	ldrb	w28, [x25]
  50:	cmp	w28, #0x2a
  54:	b.eq	a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa8>  // b.none
  58:	mov	x1, x3
  5c:	mov	x0, x25
  60:	bl	0 <strcmp>
  64:	cbnz	w0, a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa8>
  68:	ldp	x27, x28, [sp, #80]
  6c:	str	x19, [x20]
  70:	str	w26, [x20, #8]
  74:	tbnz	x21, #63, f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf8>
  78:	add	x1, x19, x21
  7c:	mov	w2, #0x6                   	// #6
  80:	cmp	x23, x1
  84:	mov	w0, #0x0                   	// #0
  88:	csinc	w2, w2, wzr, eq  // eq = none
  8c:	str	w2, [x20, #16]
  90:	ldp	x19, x20, [sp, #16]
  94:	ldp	x21, x22, [sp, #32]
  98:	ldp	x23, x24, [sp, #48]
  9c:	ldp	x25, x26, [sp, #64]
  a0:	ldp	x29, x30, [sp], #96
  a4:	ret
  a8:	cmp	x19, x23
  ac:	b.eq	110 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x110>  // b.none
  b0:	ldr	x0, [x27, #16]
  b4:	mov	x7, x20
  b8:	mov	x6, x23
  bc:	mov	x5, x24
  c0:	mov	x4, x19
  c4:	mov	x3, x22
  c8:	ldr	x8, [x0]
  cc:	mov	w2, w26
  d0:	mov	x1, x21
  d4:	ldp	x19, x20, [sp, #16]
  d8:	ldp	x21, x22, [sp, #32]
  dc:	ldp	x23, x24, [sp, #48]
  e0:	ldp	x25, x26, [sp, #64]
  e4:	ldp	x27, x28, [sp, #80]
  e8:	ldp	x29, x30, [sp], #96
  ec:	ldr	x8, [x8, #56]
  f0:	mov	x16, x8
  f4:	br	x16
  f8:	cmn	x21, #0x2
  fc:	mov	w0, #0x0                   	// #0
 100:	b.ne	90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x90>  // b.any
 104:	mov	w1, #0x1                   	// #1
 108:	str	w1, [x20, #16]
 10c:	b	90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x90>
 110:	ldr	x1, [x24, #8]
 114:	cmp	x25, x1
 118:	b.eq	130 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>  // b.none
 11c:	cmp	w28, #0x2a
 120:	b.eq	b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>  // b.none
 124:	mov	x0, x25
 128:	bl	0 <strcmp>
 12c:	cbnz	w0, b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
 130:	mov	w0, #0x0                   	// #0
 134:	ldp	x27, x28, [sp, #80]
 138:	str	w26, [x20, #12]
 13c:	b	90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x90>

Disassembly of section .text._ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE:

0000000000000000 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x1
  10:	mov	x20, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x22, x0
  1c:	mov	x21, x3
  20:	bl	0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
  24:	tst	w0, #0xff
  28:	b.ne	58 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>  // b.any
  2c:	ldr	x0, [x22, #16]
  30:	mov	x3, x21
  34:	mov	x2, x20
  38:	mov	x1, x19
  3c:	ldp	x19, x20, [sp, #16]
  40:	ldr	x4, [x0]
  44:	ldp	x21, x22, [sp, #32]
  48:	ldp	x29, x30, [sp], #48
  4c:	ldr	x4, [x4, #48]
  50:	mov	x16, x4
  54:	br	x16
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldp	x21, x22, [sp, #32]
  60:	ldp	x29, x30, [sp], #48
  64:	ret

tinfo.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt9type_infoD2Ev:

0000000000000000 <_ZNSt9type_infoD1Ev>:
   0:	ret

Disassembly of section .text._ZNKSt9type_info14__is_pointer_pEv:

0000000000000000 <_ZNKSt9type_info14__is_pointer_pEv>:
   0:	mov	w0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv:

0000000000000000 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   0:	mov	w0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZNSt9type_infoD0Ev:

0000000000000000 <_ZNSt9type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt9type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x10                  	// #16
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNKSt9type_info10__do_catchEPKS_PPvj:

0000000000000000 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   0:	ldr	x2, [x0, #8]
   4:	ldr	x1, [x1, #8]
   8:	cmp	x2, x1
   c:	b.eq	44 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x44>  // b.none
  10:	ldrb	w3, [x2]
  14:	mov	w0, #0x0                   	// #0
  18:	cmp	w3, #0x2a
  1c:	b.eq	40 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x40>  // b.none
  20:	stp	x29, x30, [sp, #-16]!
  24:	mov	x0, x2
  28:	mov	x29, sp
  2c:	bl	0 <strcmp>
  30:	cmp	w0, #0x0
  34:	cset	w0, eq  // eq = none
  38:	ldp	x29, x30, [sp], #16
  3c:	ret
  40:	ret
  44:	mov	w0, #0x1                   	// #1
  48:	ret

tinfo2.o:     file format elf64-littleaarch64


vec.o:     file format elf64-littleaarch64


Disassembly of section .text.unlikely._ZN10__cxxabiv112_GLOBAL__N_117uncatch_exceptionC2Ev:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_117uncatch_exceptionC1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <__cxa_get_globals_fast>
  14:	ldr	w2, [x0, #8]
  18:	ldr	x1, [x0]
  1c:	add	w2, w2, #0x1
  20:	str	x1, [x19]
  24:	ldr	x19, [sp, #16]
  28:	ldr	w3, [x1, #40]
  2c:	ldr	x4, [x1, #32]
  30:	sub	w3, w3, #0x1
  34:	str	w3, [x1, #40]
  38:	str	x4, [x0]
  3c:	str	w2, [x0, #8]
  40:	ldp	x29, x30, [sp], #32
  44:	ret

Disassembly of section .text.unlikely._ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm.part.0:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm.part.0>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x0, #0x8                   	// #8
   8:	mov	x29, sp
   c:	bl	0 <__cxa_allocate_exception>
  10:	adrp	x3, 0 <_ZTVSt9bad_alloc>
  14:	adrp	x2, 0 <_ZNSt9bad_allocD1Ev>
  18:	adrp	x1, 0 <_ZTISt9bad_alloc>
  1c:	ldr	x3, [x3]
  20:	ldr	x2, [x2]
  24:	add	x3, x3, #0x10
  28:	ldr	x1, [x1]
  2c:	str	x3, [x0]
  30:	bl	0 <__cxa_throw>

Disassembly of section .text.__cxa_vec_cleanup:

0000000000000000 <__cxa_vec_cleanup>:
   0:	cbz	x3, 4c <__cxa_vec_cleanup+0x4c>
   4:	stp	x29, x30, [sp, #-48]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	madd	x19, x1, x2, x0
  14:	mov	x20, x1
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x22, x2
  20:	mov	x21, x3
  24:	cbz	x20, 3c <__cxa_vec_cleanup+0x3c>
  28:	sub	x19, x19, x22
  2c:	mov	x0, x19
  30:	blr	x21
  34:	sub	x20, x20, #0x1
  38:	cbnz	x20, 28 <__cxa_vec_cleanup+0x28>
  3c:	ldp	x19, x20, [sp, #16]
  40:	ldp	x21, x22, [sp, #32]
  44:	ldp	x29, x30, [sp], #48
  48:	ret
  4c:	ret
  50:	bl	0 <__cxa_begin_catch>
  54:	bl	0 <_ZSt9terminatev>

Disassembly of section .text.__cxa_vec_ctor:

0000000000000000 <__cxa_vec_ctor>:
   0:	cbz	x3, 70 <__cxa_vec_ctor+0x70>
   4:	stp	x29, x30, [sp, #-96]!
   8:	mov	x29, sp
   c:	stp	x21, x22, [sp, #32]
  10:	mov	x22, x1
  14:	cbz	x1, 64 <__cxa_vec_ctor+0x64>
  18:	mov	x21, x3
  1c:	stp	x19, x20, [sp, #16]
  20:	mov	x20, x0
  24:	stp	x23, x24, [sp, #48]
  28:	mov	x24, x0
  2c:	mov	x23, x2
  30:	str	x25, [sp, #64]
  34:	mov	x25, x4
  38:	mov	x19, #0x0                   	// #0
  3c:	nop
  40:	mov	x0, x20
  44:	blr	x21
  48:	add	x19, x19, #0x1
  4c:	add	x20, x20, x23
  50:	cmp	x22, x19
  54:	b.ne	40 <__cxa_vec_ctor+0x40>  // b.any
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldp	x23, x24, [sp, #48]
  60:	ldr	x25, [sp, #64]
  64:	ldp	x21, x22, [sp, #32]
  68:	ldp	x29, x30, [sp], #96
  6c:	ret
  70:	ret
  74:	bl	0 <__cxa_begin_catch>
  78:	add	x0, sp, #0x58
  7c:	bl	0 <__cxa_vec_ctor>
  80:	mov	x0, x24
  84:	mov	x3, x25
  88:	mov	x2, x23
  8c:	mov	x1, x19
  90:	bl	0 <__cxa_vec_ctor>
  94:	ldr	x0, [sp, #88]
  98:	add	x0, x0, #0x50
  9c:	bl	0 <__cxa_begin_catch>
  a0:	bl	0 <__cxa_rethrow>
  a4:	mov	x19, x0
  a8:	bl	0 <__cxa_end_catch>
  ac:	mov	x0, x19
  b0:	bl	0 <_Unwind_Resume>

Disassembly of section .text.__cxa_vec_new2:

0000000000000000 <__cxa_vec_new2>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x2
  10:	stp	x21, x22, [sp, #32]
  14:	mov	x22, x0
  18:	mov	x21, x1
  1c:	stp	x23, x24, [sp, #48]
  20:	mov	x0, #0x0                   	// #0
  24:	mov	x23, x3
  28:	str	x25, [sp, #64]
  2c:	mov	x24, x4
  30:	mov	x25, x6
  34:	cbz	x1, 4c <__cxa_vec_new2+0x4c>
  38:	umulh	x0, x22, x1
  3c:	cbnz	x0, a0 <__cxa_vec_new2+0xa0>
  40:	mul	x0, x22, x1
  44:	cmn	x2, x0
  48:	b.cs	cc <__cxa_vec_new2+0xcc>  // b.hs, b.nlast
  4c:	add	x0, x0, x20
  50:	blr	x5
  54:	mov	x19, x0
  58:	cbz	x0, 78 <__cxa_vec_new2+0x78>
  5c:	cbnz	x20, 94 <__cxa_vec_new2+0x94>
  60:	mov	x4, x24
  64:	mov	x3, x23
  68:	mov	x2, x21
  6c:	mov	x1, x22
  70:	mov	x0, x19
  74:	bl	0 <__cxa_vec_new2>
  78:	mov	x0, x19
  7c:	ldp	x19, x20, [sp, #16]
  80:	ldp	x21, x22, [sp, #32]
  84:	ldp	x23, x24, [sp, #48]
  88:	ldr	x25, [sp, #64]
  8c:	ldp	x29, x30, [sp], #96
  90:	ret
  94:	add	x19, x19, x20
  98:	stur	x22, [x19, #-8]
  9c:	b	60 <__cxa_vec_new2+0x60>
  a0:	bl	0 <__cxa_vec_new2>
  a4:	bl	0 <__cxa_begin_catch>
  a8:	add	x0, sp, #0x58
  ac:	bl	0 <__cxa_vec_new2>
  b0:	cbz	x25, bc <__cxa_vec_new2+0xbc>
  b4:	sub	x0, x19, x20
  b8:	blr	x25
  bc:	ldr	x0, [sp, #88]
  c0:	add	x0, x0, #0x50
  c4:	bl	0 <__cxa_begin_catch>
  c8:	bl	0 <__cxa_rethrow>
  cc:	mov	x0, #0x8                   	// #8
  d0:	bl	0 <__cxa_allocate_exception>
  d4:	adrp	x3, 0 <_ZTVSt9bad_alloc>
  d8:	adrp	x2, 0 <_ZNSt9bad_allocD1Ev>
  dc:	adrp	x1, 0 <_ZTISt9bad_alloc>
  e0:	ldr	x3, [x3]
  e4:	ldr	x2, [x2]
  e8:	add	x3, x3, #0x10
  ec:	ldr	x1, [x1]
  f0:	str	x3, [x0]
  f4:	bl	0 <__cxa_throw>
  f8:	mov	x19, x0
  fc:	b	110 <__cxa_vec_new2+0x110>
 100:	ldr	x1, [sp, #88]
 104:	mov	x19, x0
 108:	add	x0, x1, #0x50
 10c:	bl	0 <__cxa_begin_catch>
 110:	bl	0 <__cxa_end_catch>
 114:	mov	x0, x19
 118:	bl	0 <_Unwind_Resume>

Disassembly of section .text.__cxa_vec_new:

0000000000000000 <__cxa_vec_new>:
   0:	adrp	x6, 0 <_ZdaPv>
   4:	adrp	x5, 0 <_Znam>
   8:	ldr	x6, [x6]
   c:	ldr	x5, [x5]
  10:	b	0 <__cxa_vec_new>

Disassembly of section .text.__cxa_vec_new3:

0000000000000000 <__cxa_vec_new3>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x2
  10:	stp	x21, x22, [sp, #32]
  14:	mov	x22, x0
  18:	mov	x21, x1
  1c:	stp	x23, x24, [sp, #48]
  20:	mov	x0, #0x0                   	// #0
  24:	mov	x24, x3
  28:	stp	x25, x26, [sp, #64]
  2c:	mov	x26, x4
  30:	mov	x25, x6
  34:	cbz	x1, 4c <__cxa_vec_new3+0x4c>
  38:	umulh	x0, x22, x1
  3c:	cbnz	x0, a4 <__cxa_vec_new3+0xa4>
  40:	mul	x0, x22, x1
  44:	cmn	x2, x0
  48:	b.cs	d4 <__cxa_vec_new3+0xd4>  // b.hs, b.nlast
  4c:	add	x23, x0, x20
  50:	mov	x0, x23
  54:	blr	x5
  58:	mov	x19, x0
  5c:	cbz	x0, 7c <__cxa_vec_new3+0x7c>
  60:	cbnz	x20, 98 <__cxa_vec_new3+0x98>
  64:	mov	x4, x26
  68:	mov	x3, x24
  6c:	mov	x2, x21
  70:	mov	x1, x22
  74:	mov	x0, x19
  78:	bl	0 <__cxa_vec_new3>
  7c:	mov	x0, x19
  80:	ldp	x19, x20, [sp, #16]
  84:	ldp	x21, x22, [sp, #32]
  88:	ldp	x23, x24, [sp, #48]
  8c:	ldp	x25, x26, [sp, #64]
  90:	ldp	x29, x30, [sp], #96
  94:	ret
  98:	add	x19, x19, x20
  9c:	stur	x22, [x19, #-8]
  a0:	b	64 <__cxa_vec_new3+0x64>
  a4:	bl	0 <__cxa_vec_new3>
  a8:	bl	0 <__cxa_begin_catch>
  ac:	add	x0, sp, #0x58
  b0:	bl	0 <__cxa_vec_new3>
  b4:	cbz	x25, c4 <__cxa_vec_new3+0xc4>
  b8:	mov	x1, x23
  bc:	sub	x0, x19, x20
  c0:	blr	x25
  c4:	ldr	x0, [sp, #88]
  c8:	add	x0, x0, #0x50
  cc:	bl	0 <__cxa_begin_catch>
  d0:	bl	0 <__cxa_rethrow>
  d4:	mov	x0, #0x8                   	// #8
  d8:	bl	0 <__cxa_allocate_exception>
  dc:	adrp	x3, 0 <_ZTVSt9bad_alloc>
  e0:	adrp	x2, 0 <_ZNSt9bad_allocD1Ev>
  e4:	adrp	x1, 0 <_ZTISt9bad_alloc>
  e8:	ldr	x3, [x3]
  ec:	ldr	x2, [x2]
  f0:	add	x3, x3, #0x10
  f4:	ldr	x1, [x1]
  f8:	str	x3, [x0]
  fc:	bl	0 <__cxa_throw>
 100:	mov	x19, x0
 104:	b	118 <__cxa_vec_new3+0x118>
 108:	ldr	x1, [sp, #88]
 10c:	mov	x19, x0
 110:	add	x0, x1, #0x50
 114:	bl	0 <__cxa_begin_catch>
 118:	bl	0 <__cxa_end_catch>
 11c:	mov	x0, x19
 120:	bl	0 <_Unwind_Resume>

Disassembly of section .text.__cxa_vec_cctor:

0000000000000000 <__cxa_vec_cctor>:
   0:	cbz	x4, 78 <__cxa_vec_cctor+0x78>
   4:	stp	x29, x30, [sp, #-96]!
   8:	mov	x29, sp
   c:	stp	x23, x24, [sp, #48]
  10:	mov	x24, x2
  14:	cbz	x2, 6c <__cxa_vec_cctor+0x6c>
  18:	mov	x23, x4
  1c:	stp	x19, x20, [sp, #16]
  20:	mov	x19, x1
  24:	stp	x21, x22, [sp, #32]
  28:	mov	x22, x3
  2c:	mov	x21, x0
  30:	stp	x25, x26, [sp, #64]
  34:	mov	x25, x0
  38:	mov	x26, x5
  3c:	mov	x20, #0x0                   	// #0
  40:	mov	x1, x19
  44:	mov	x0, x21
  48:	blr	x23
  4c:	add	x20, x20, #0x1
  50:	add	x19, x19, x22
  54:	cmp	x24, x20
  58:	add	x21, x21, x22
  5c:	b.ne	40 <__cxa_vec_cctor+0x40>  // b.any
  60:	ldp	x19, x20, [sp, #16]
  64:	ldp	x21, x22, [sp, #32]
  68:	ldp	x25, x26, [sp, #64]
  6c:	ldp	x23, x24, [sp, #48]
  70:	ldp	x29, x30, [sp], #96
  74:	ret
  78:	ret
  7c:	bl	0 <__cxa_begin_catch>
  80:	add	x0, sp, #0x58
  84:	bl	0 <__cxa_vec_cctor>
  88:	mov	x0, x25
  8c:	mov	x3, x26
  90:	mov	x2, x22
  94:	mov	x1, x20
  98:	bl	0 <__cxa_vec_cctor>
  9c:	ldr	x0, [sp, #88]
  a0:	add	x0, x0, #0x50
  a4:	bl	0 <__cxa_begin_catch>
  a8:	bl	0 <__cxa_rethrow>
  ac:	mov	x19, x0
  b0:	bl	0 <__cxa_end_catch>
  b4:	mov	x0, x19
  b8:	bl	0 <_Unwind_Resume>

Disassembly of section .text.__cxa_vec_dtor:

0000000000000000 <__cxa_vec_dtor>:
   0:	cbz	x3, 5c <__cxa_vec_dtor+0x5c>
   4:	stp	x29, x30, [sp, #-80]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	madd	x20, x1, x2, x0
  14:	sub	x19, x1, #0x1
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x22, x2
  20:	mov	x21, x3
  24:	str	x23, [sp, #48]
  28:	mov	x23, x0
  2c:	b	40 <__cxa_vec_dtor+0x40>
  30:	sub	x20, x20, x22
  34:	mov	x0, x20
  38:	blr	x21
  3c:	sub	x19, x19, #0x1
  40:	cmn	x19, #0x1
  44:	b.ne	30 <__cxa_vec_dtor+0x30>  // b.any
  48:	ldp	x19, x20, [sp, #16]
  4c:	ldp	x21, x22, [sp, #32]
  50:	ldr	x23, [sp, #48]
  54:	ldp	x29, x30, [sp], #80
  58:	ret
  5c:	ret
  60:	bl	0 <__cxa_begin_catch>
  64:	add	x0, sp, #0x48
  68:	bl	0 <__cxa_vec_dtor>
  6c:	mov	x0, x23
  70:	mov	x3, x21
  74:	mov	x2, x22
  78:	mov	x1, x19
  7c:	bl	0 <__cxa_vec_dtor>
  80:	ldr	x0, [sp, #72]
  84:	add	x0, x0, #0x50
  88:	bl	0 <__cxa_begin_catch>
  8c:	bl	0 <__cxa_rethrow>
  90:	mov	x19, x0
  94:	bl	0 <__cxa_end_catch>
  98:	mov	x0, x19
  9c:	bl	0 <_Unwind_Resume>

Disassembly of section .text.__cxa_vec_delete2:

0000000000000000 <__cxa_vec_delete2>:
   0:	cbz	x0, 5c <__cxa_vec_delete2+0x5c>
   4:	stp	x29, x30, [sp, #-48]!
   8:	mov	x5, x0
   c:	mov	x29, sp
  10:	stp	x19, x20, [sp, #16]
  14:	mov	x19, x2
  18:	mov	x20, x4
  1c:	cbnz	x2, 34 <__cxa_vec_delete2+0x34>
  20:	mov	x0, x5
  24:	blr	x20
  28:	ldp	x19, x20, [sp, #16]
  2c:	ldp	x29, x30, [sp], #48
  30:	ret
  34:	mov	x2, x1
  38:	sub	x19, x0, x19
  3c:	ldur	x1, [x0, #-8]
  40:	bl	0 <__cxa_vec_delete2>
  44:	mov	x5, x19
  48:	mov	x0, x5
  4c:	blr	x20
  50:	ldp	x19, x20, [sp, #16]
  54:	ldp	x29, x30, [sp], #48
  58:	ret
  5c:	ret
  60:	bl	0 <__cxa_begin_catch>
  64:	add	x0, sp, #0x28
  68:	bl	0 <__cxa_vec_delete2>
  6c:	mov	x0, x19
  70:	blr	x20
  74:	ldr	x0, [sp, #40]
  78:	add	x0, x0, #0x50
  7c:	bl	0 <__cxa_begin_catch>
  80:	bl	0 <__cxa_rethrow>
  84:	ldr	x1, [sp, #40]
  88:	mov	x19, x0
  8c:	add	x0, x1, #0x50
  90:	bl	0 <__cxa_begin_catch>
  94:	bl	0 <__cxa_end_catch>
  98:	mov	x0, x19
  9c:	bl	0 <_Unwind_Resume>
  a0:	mov	x19, x0
  a4:	b	94 <__cxa_vec_delete2+0x94>

Disassembly of section .text.__cxa_vec_delete:

0000000000000000 <__cxa_vec_delete>:
   0:	adrp	x4, 0 <_ZdaPv>
   4:	ldr	x4, [x4]
   8:	b	0 <__cxa_vec_delete>

Disassembly of section .text.__cxa_vec_delete3:

0000000000000000 <__cxa_vec_delete3>:
   0:	cbz	x0, 74 <__cxa_vec_delete3+0x74>
   4:	stp	x29, x30, [sp, #-64]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x20, x2
  14:	mov	x19, x0
  18:	str	x21, [sp, #32]
  1c:	mov	x21, x4
  20:	cbnz	x2, 40 <__cxa_vec_delete3+0x40>
  24:	mov	x1, x20
  28:	mov	x0, x19
  2c:	blr	x21
  30:	ldp	x19, x20, [sp, #16]
  34:	ldr	x21, [sp, #32]
  38:	ldp	x29, x30, [sp], #64
  3c:	ret
  40:	mov	x6, x1
  44:	mov	x2, x1
  48:	ldur	x1, [x0, #-8]
  4c:	sub	x19, x0, x20
  50:	madd	x20, x1, x6, x20
  54:	bl	0 <__cxa_vec_delete3>
  58:	mov	x1, x20
  5c:	mov	x0, x19
  60:	blr	x21
  64:	ldp	x19, x20, [sp, #16]
  68:	ldr	x21, [sp, #32]
  6c:	ldp	x29, x30, [sp], #64
  70:	ret
  74:	ret
  78:	bl	0 <__cxa_begin_catch>
  7c:	add	x0, sp, #0x38
  80:	bl	0 <__cxa_vec_delete3>
  84:	mov	x1, x20
  88:	mov	x0, x19
  8c:	blr	x21
  90:	ldr	x0, [sp, #56]
  94:	add	x0, x0, #0x50
  98:	bl	0 <__cxa_begin_catch>
  9c:	bl	0 <__cxa_rethrow>
  a0:	ldr	x1, [sp, #56]
  a4:	mov	x19, x0
  a8:	add	x0, x1, #0x50
  ac:	bl	0 <__cxa_begin_catch>
  b0:	bl	0 <__cxa_end_catch>
  b4:	mov	x0, x19
  b8:	bl	0 <_Unwind_Resume>
  bc:	mov	x19, x0
  c0:	b	b0 <__cxa_vec_delete3+0xb0>

vmi_class_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv121__vmi_class_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
   0:	adrp	x1, 0 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	b	0 <_ZN10__cxxabiv117__class_type_infoD2Ev>

Disassembly of section .text._ZN10__cxxabiv121__vmi_class_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>
  14:	mov	x0, x19
  18:	mov	x1, #0x28                  	// #40
  1c:	ldr	x19, [sp, #16]
  20:	ldp	x29, x30, [sp], #32
  24:	b	0 <_ZdlPvm>

Disassembly of section .text._ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_:

0000000000000000 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	cmp	x2, x4
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x0
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x22, x3
  1c:	stp	x23, x24, [sp, #48]
  20:	mov	x23, x2
  24:	stp	x25, x26, [sp, #64]
  28:	mov	x25, x4
  2c:	mov	x26, x1
  30:	b.eq	114 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x114>  // b.none
  34:	ldr	w0, [x19, #20]
  38:	mov	w20, w0
  3c:	cbz	w0, a8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xa8>
  40:	mov	x1, #0x8                   	// #8
  44:	cmn	x26, #0x3
  48:	add	x0, x1, w0, uxtw #4
  4c:	add	x19, x19, x0
  50:	b.eq	c8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc8>  // b.none
  54:	nop
  58:	ldr	x0, [x19, #8]
  5c:	and	w24, w0, #0x1
  60:	tbz	w0, #1, 9c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x9c>
  64:	asr	x2, x0, #8
  68:	tbz	w0, #0, 74 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x74>
  6c:	ldr	x0, [x23]
  70:	ldr	x2, [x0, x2]
  74:	add	x2, x23, x2
  78:	ldr	x0, [x19]
  7c:	mov	x4, x25
  80:	mov	x3, x22
  84:	mov	x1, x26
  88:	ldr	x5, [x0]
  8c:	ldr	x5, [x5, #64]
  90:	blr	x5
  94:	cmp	w0, #0x3
  98:	b.gt	140 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x140>
  9c:	sub	x19, x19, #0x10
  a0:	subs	x20, x20, #0x1
  a4:	b.ne	58 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x58>  // b.any
  a8:	mov	w21, #0x1                   	// #1
  ac:	mov	w0, w21
  b0:	ldp	x19, x20, [sp, #16]
  b4:	ldp	x21, x22, [sp, #32]
  b8:	ldp	x23, x24, [sp, #48]
  bc:	ldp	x25, x26, [sp, #64]
  c0:	ldp	x29, x30, [sp], #80
  c4:	ret
  c8:	ldr	x0, [x19, #8]
  cc:	tbz	w0, #1, 104 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x104>
  d0:	asr	x2, x0, #8
  d4:	mov	x4, x25
  d8:	mov	x3, x22
  dc:	add	x2, x23, x2
  e0:	mov	x1, #0xfffffffffffffffd    	// #-3
  e4:	tbnz	w0, #0, 104 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x104>
  e8:	ldr	x0, [x19]
  ec:	ldr	x5, [x0]
  f0:	ldr	x5, [x5, #64]
  f4:	blr	x5
  f8:	mov	w21, w0
  fc:	cmp	w0, #0x3
 100:	b.gt	ac <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xac>
 104:	sub	x19, x19, #0x10
 108:	subs	x20, x20, #0x1
 10c:	b.ne	c8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc8>  // b.any
 110:	b	a8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xa8>
 114:	ldr	x0, [x0, #8]
 118:	mov	w21, #0x6                   	// #6
 11c:	ldr	x1, [x3, #8]
 120:	cmp	x0, x1
 124:	b.eq	ac <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xac>  // b.none
 128:	ldrb	w2, [x0]
 12c:	cmp	w2, #0x2a
 130:	b.eq	34 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x34>  // b.none
 134:	bl	0 <strcmp>
 138:	cbz	w0, ac <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xac>
 13c:	b	34 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x34>
 140:	orr	w21, w0, w24
 144:	mov	w0, w21
 148:	ldp	x19, x20, [sp, #16]
 14c:	ldp	x21, x22, [sp, #32]
 150:	ldp	x23, x24, [sp, #48]
 154:	ldp	x25, x26, [sp, #64]
 158:	ldp	x29, x30, [sp], #80
 15c:	ret

Disassembly of section .text._ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE:

0000000000000000 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   0:	stp	x29, x30, [sp, #-192]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x7
  10:	ldr	w7, [x7, #20]
  14:	stp	x21, x22, [sp, #32]
  18:	mov	w20, w2
  1c:	mov	x22, x3
  20:	stp	x25, x26, [sp, #64]
  24:	mov	x26, x4
  28:	mov	x25, x6
  2c:	stp	x27, x28, [sp, #80]
  30:	mov	x27, x1
  34:	mov	x28, x5
  38:	str	x0, [sp, #136]
  3c:	tbz	w7, #4, 48 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x48>
  40:	ldr	w0, [x0, #16]
  44:	str	w0, [x19, #20]
  48:	ldr	x0, [sp, #136]
  4c:	cmp	x26, x25
  50:	ldr	x21, [x0, #8]
  54:	b.eq	244 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x244>  // b.none
  58:	ldr	x1, [x22, #8]
  5c:	cmp	x1, x21
  60:	b.eq	278 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x278>  // b.none
  64:	ldrb	w0, [x21]
  68:	cmp	w0, #0x2a
  6c:	b.eq	7c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>  // b.none
  70:	mov	x0, x21
  74:	bl	0 <strcmp>
  78:	cbz	w0, 278 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x278>
  7c:	cmp	x27, #0x0
  80:	sub	x12, x25, x27
  84:	mov	w0, #0x1                   	// #1
  88:	stp	x23, x24, [sp, #48]
  8c:	csel	x24, x12, xzr, ge  // ge = tcont
  90:	str	wzr, [sp, #124]
  94:	stp	w0, wzr, [sp, #144]
  98:	add	x0, sp, #0xa8
  9c:	str	x0, [sp, #128]
  a0:	str	d8, [sp, #96]
  a4:	ldr	x1, [sp, #136]
  a8:	ldr	w8, [x1, #20]
  ac:	mov	w23, w8
  b0:	cbz	w8, 210 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x210>
  b4:	mov	x0, #0x8                   	// #8
  b8:	movi	v8.2s, #0x0
  bc:	add	x8, x0, w8, uxtw #4
  c0:	add	x21, x1, x8
  c4:	nop
  c8:	ldr	x0, [x21, #8]
  cc:	str	xzr, [sp, #168]
  d0:	ldr	w1, [x19, #20]
  d4:	mov	w2, w20
  d8:	stp	wzr, w1, [sp, #184]
  dc:	str	d8, [sp, #176]
  e0:	asr	x4, x0, #8
  e4:	tbz	w0, #0, f4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf4>
  e8:	ldr	x3, [x26]
  ec:	orr	w2, w20, #0x1
  f0:	ldr	x4, [x3, x4]
  f4:	add	x4, x26, x4
  f8:	cbz	x24, 110 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x110>
  fc:	cmp	x24, x4
 100:	ldr	w5, [sp, #144]
 104:	cset	w3, cc  // cc = lo, ul, last
 108:	cmp	w3, w5
 10c:	b.eq	2c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c4>  // b.none
 110:	tbnz	w0, #1, 120 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x120>
 114:	cmn	x27, #0x2
 118:	b.eq	2b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2b8>  // b.none
 11c:	and	w2, w2, #0xfffffffd
 120:	ldr	x0, [x21]
 124:	mov	x5, x28
 128:	ldr	x7, [sp, #128]
 12c:	mov	x3, x22
 130:	ldr	x13, [x0]
 134:	mov	x1, x27
 138:	mov	x6, x25
 13c:	ldr	x13, [x13, #56]
 140:	blr	x13
 144:	and	w0, w0, #0xff
 148:	ldp	w1, w5, [sp, #180]
 14c:	ldr	w3, [x19, #12]
 150:	orr	w3, w3, w1
 154:	str	w3, [x19, #12]
 158:	and	w1, w5, #0xfffffffb
 15c:	cmp	w1, #0x2
 160:	ldr	x1, [sp, #168]
 164:	b.eq	51c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x51c>  // b.none
 168:	ldr	w6, [sp, #124]
 16c:	mov	x4, x1
 170:	ldr	x2, [x19]
 174:	cbnz	w6, 2d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d0>
 178:	cbz	x2, 3e8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e8>
 17c:	cmp	x2, x1
 180:	b.eq	3d4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d4>  // b.none
 184:	cmp	x1, #0x0
 188:	ccmp	w0, #0x0, #0x0, eq  // eq = none
 18c:	b.eq	1fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>  // b.none
 190:	ldr	w7, [x19, #16]
 194:	cmp	w3, #0x3
 198:	b.le	2e4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e4>
 19c:	tbz	w3, #0, 1a8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a8>
 1a0:	ldr	w0, [x19, #20]
 1a4:	tbnz	w0, #1, 2e4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e4>
 1a8:	cmp	w7, #0x0
 1ac:	csinc	w7, w7, wzr, ne  // ne = any
 1b0:	cmp	w5, #0x0
 1b4:	csinc	w5, w5, wzr, ne  // ne = any
 1b8:	mov	w13, w7
 1bc:	mov	w14, w5
 1c0:	eor	w0, w5, w13
 1c4:	cmp	w0, #0x3
 1c8:	b.le	3a8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3a8>
 1cc:	cmp	w5, #0x3
 1d0:	b.le	470 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x470>
 1d4:	ldr	x1, [sp, #168]
 1d8:	and	w13, w5, #0x2
 1dc:	ldr	w0, [sp, #176]
 1e0:	str	x1, [x19]
 1e4:	str	w0, [x19, #8]
 1e8:	str	wzr, [sp, #124]
 1ec:	str	w5, [x19, #16]
 1f0:	cbnz	w13, 5a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a4>
 1f4:	tbz	w5, #0, 5a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a4>
 1f8:	ldr	w3, [x19, #12]
 1fc:	cmp	w3, #0x4
 200:	b.eq	220 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x220>  // b.none
 204:	sub	x21, x21, #0x10
 208:	subs	x23, x23, #0x1
 20c:	b.ne	c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xc8>  // b.any
 210:	ldp	w0, w1, [sp, #144]
 214:	and	w0, w0, w1
 218:	stp	wzr, w0, [sp, #144]
 21c:	cbnz	w0, a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa4>
 220:	ldrb	w0, [sp, #124]
 224:	ldp	x19, x20, [sp, #16]
 228:	ldp	x21, x22, [sp, #32]
 22c:	ldp	x23, x24, [sp, #48]
 230:	ldp	x25, x26, [sp, #64]
 234:	ldp	x27, x28, [sp, #80]
 238:	ldr	d8, [sp, #96]
 23c:	ldp	x29, x30, [sp], #192
 240:	ret
 244:	ldr	x1, [x28, #8]
 248:	cmp	x1, x21
 24c:	b.eq	4f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4f8>  // b.none
 250:	ldrb	w0, [x21]
 254:	cmp	w0, #0x2a
 258:	b.eq	4d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4d0>  // b.none
 25c:	mov	x0, x21
 260:	bl	0 <strcmp>
 264:	cbz	w0, 4f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4f8>
 268:	ldr	x1, [x22, #8]
 26c:	cmp	x1, x21
 270:	b.ne	70 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x70>  // b.any
 274:	nop
 278:	str	x26, [x19]
 27c:	str	w20, [x19, #8]
 280:	tbnz	x27, #63, 4e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e0>
 284:	add	x10, x26, x27
 288:	mov	w0, #0x6                   	// #6
 28c:	cmp	x25, x10
 290:	str	wzr, [sp, #124]
 294:	csinc	w0, w0, wzr, eq  // eq = none
 298:	str	w0, [x19, #16]
 29c:	ldrb	w0, [sp, #124]
 2a0:	ldp	x19, x20, [sp, #16]
 2a4:	ldp	x21, x22, [sp, #32]
 2a8:	ldp	x25, x26, [sp, #64]
 2ac:	ldp	x27, x28, [sp, #80]
 2b0:	ldp	x29, x30, [sp], #192
 2b4:	ret
 2b8:	tst	x1, #0x3
 2bc:	b.ne	11c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x11c>  // b.any
 2c0:	b	204 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x204>
 2c4:	mov	w0, #0x1                   	// #1
 2c8:	str	w0, [sp, #148]
 2cc:	b	204 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x204>
 2d0:	cbnz	x2, 17c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17c>
 2d4:	cbz	x1, 1fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 2d8:	ldr	w7, [x19, #16]
 2dc:	cmp	w3, #0x3
 2e0:	b.gt	19c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x19c>
 2e4:	cmp	w7, #0x0
 2e8:	mov	w13, w7
 2ec:	mov	w14, w5
 2f0:	b.le	414 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x414>
 2f4:	cmp	w5, #0x0
 2f8:	b.gt	1c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c0>
 2fc:	cmp	w7, #0x3
 300:	b.le	358 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x358>
 304:	tbz	w7, #0, 314 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
 308:	ldr	x0, [sp, #136]
 30c:	ldr	w0, [x0, #16]
 310:	tbnz	w0, #1, 358 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x358>
 314:	eor	w0, w7, #0x1
 318:	mov	w5, w7
 31c:	cmp	w0, #0x3
 320:	b.gt	350 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x350>
 324:	ldr	w3, [x19, #12]
 328:	mov	w0, #0x1                   	// #1
 32c:	str	xzr, [x19]
 330:	str	w0, [x19, #16]
 334:	str	w0, [sp, #124]
 338:	b	1fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 33c:	mov	w13, #0x6                   	// #6
 340:	cmp	w5, #0x0
 344:	mov	w7, w13
 348:	b.gt	1c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c0>
 34c:	mov	w5, w13
 350:	and	w13, w13, #0x2
 354:	b	1ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ec>
 358:	ldr	x4, [sp, #168]
 35c:	tbz	x27, #63, 4b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b8>
 360:	cmn	x27, #0x2
 364:	b.eq	4c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c4>  // b.none
 368:	ldr	x5, [x22]
 36c:	stp	w7, w13, [sp, #152]
 370:	mov	x2, x4
 374:	mov	x3, x28
 378:	mov	x4, x25
 37c:	mov	x1, x27
 380:	ldr	x5, [x5, #64]
 384:	mov	x0, x22
 388:	blr	x5
 38c:	mov	w5, w0
 390:	ldp	w7, w13, [sp, #152]
 394:	mov	w14, w0
 398:	eor	w0, w5, w13
 39c:	cmp	w0, #0x3
 3a0:	b.gt	1cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1cc>
 3a4:	nop
 3a8:	and	w13, w14, w13
 3ac:	cmp	w13, #0x3
 3b0:	b.le	324 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
 3b4:	mov	w0, #0x2                   	// #2
 3b8:	mov	w1, #0x1                   	// #1
 3bc:	str	w1, [sp, #124]
 3c0:	ldp	x23, x24, [sp, #48]
 3c4:	ldr	d8, [sp, #96]
 3c8:	str	xzr, [x19]
 3cc:	str	w0, [x19, #16]
 3d0:	b	29c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x29c>
 3d4:	ldr	w0, [x19, #8]
 3d8:	ldr	w1, [sp, #176]
 3dc:	orr	w0, w0, w1
 3e0:	str	w0, [x19, #8]
 3e4:	b	1fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 3e8:	ldr	w2, [sp, #176]
 3ec:	cmp	x1, #0x0
 3f0:	str	x1, [x19]
 3f4:	ccmp	w3, #0x0, #0x4, ne  // ne = any
 3f8:	str	w2, [x19, #8]
 3fc:	str	w0, [sp, #124]
 400:	b.eq	1fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>  // b.none
 404:	ldr	x0, [sp, #136]
 408:	ldr	w0, [x0, #16]
 40c:	tbnz	w0, #0, 1fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1fc>
 410:	b	220 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x220>
 414:	cmp	w5, #0x3
 418:	b.le	42c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42c>
 41c:	tbz	w5, #0, 460 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x460>
 420:	ldr	x0, [sp, #136]
 424:	ldr	w0, [x0, #16]
 428:	tbz	w0, #1, 460 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x460>
 42c:	tbnz	x27, #63, 47c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x47c>
 430:	add	x0, x2, x27
 434:	cmp	x25, x0
 438:	b.eq	33c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x33c>  // b.none
 43c:	cmp	w5, #0x0
 440:	b.gt	55c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x55c>
 444:	add	x1, x1, x27
 448:	cmp	x25, x1
 44c:	b.eq	588 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x588>  // b.none
 450:	mov	w5, #0x1                   	// #1
 454:	mov	w13, w5
 458:	eor	w0, w13, #0x1
 45c:	b	31c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x31c>
 460:	eor	w0, w5, #0x1
 464:	cmp	w0, #0x3
 468:	b.le	328 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x328>
 46c:	b	1d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1d8>
 470:	and	w13, w13, #0x2
 474:	mov	w5, w7
 478:	b	1ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ec>
 47c:	str	w14, [sp, #152]
 480:	cmn	x27, #0x2
 484:	b.eq	554 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x554>  // b.none
 488:	ldr	x7, [x22]
 48c:	str	w5, [sp, #156]
 490:	mov	x4, x25
 494:	mov	x3, x28
 498:	mov	x1, x27
 49c:	mov	x0, x22
 4a0:	ldr	x7, [x7, #64]
 4a4:	blr	x7
 4a8:	mov	w7, w0
 4ac:	ldp	w14, w5, [sp, #152]
 4b0:	mov	w13, w0
 4b4:	b	2f4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f4>
 4b8:	add	x0, x4, x27
 4bc:	cmp	x25, x0
 4c0:	b.eq	574 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x574>  // b.none
 4c4:	mov	w5, w7
 4c8:	eor	w0, w13, #0x1
 4cc:	b	31c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x31c>
 4d0:	ldr	x0, [x22, #8]
 4d4:	cmp	x0, x21
 4d8:	b.ne	7c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>  // b.any
 4dc:	b	278 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x278>
 4e0:	str	wzr, [sp, #124]
 4e4:	cmn	x27, #0x2
 4e8:	b.ne	29c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x29c>  // b.any
 4ec:	mov	w0, #0x1                   	// #1
 4f0:	str	w0, [x19, #16]
 4f4:	b	29c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x29c>
 4f8:	str	w20, [x19, #12]
 4fc:	str	wzr, [sp, #124]
 500:	ldp	x19, x20, [sp, #16]
 504:	ldrb	w0, [sp, #124]
 508:	ldp	x21, x22, [sp, #32]
 50c:	ldp	x25, x26, [sp, #64]
 510:	ldp	x27, x28, [sp, #80]
 514:	ldp	x29, x30, [sp], #192
 518:	ret
 51c:	str	w0, [sp, #124]
 520:	ldr	w0, [sp, #176]
 524:	ldp	x23, x24, [sp, #48]
 528:	ldr	d8, [sp, #96]
 52c:	str	x1, [x19]
 530:	str	w0, [x19, #8]
 534:	str	w5, [x19, #16]
 538:	ldrb	w0, [sp, #124]
 53c:	ldp	x19, x20, [sp, #16]
 540:	ldp	x21, x22, [sp, #32]
 544:	ldp	x25, x26, [sp, #64]
 548:	ldp	x27, x28, [sp, #80]
 54c:	ldp	x29, x30, [sp], #192
 550:	ret
 554:	cmp	w5, #0x0
 558:	b.le	450 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x450>
 55c:	eor	w0, w5, #0x1
 560:	cmp	w0, #0x3
 564:	b.le	328 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x328>
 568:	mov	w13, #0x1                   	// #1
 56c:	mov	w7, w13
 570:	b	1cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1cc>
 574:	eor	w7, w7, #0x6
 578:	cmp	w7, #0x3
 57c:	b.gt	588 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x588>
 580:	mov	w14, #0x6                   	// #6
 584:	b	3a8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3a8>
 588:	ldr	w1, [sp, #176]
 58c:	mov	w0, #0x6                   	// #6
 590:	str	x4, [x19]
 594:	str	w1, [x19, #8]
 598:	str	w0, [x19, #16]
 59c:	str	wzr, [sp, #124]
 5a0:	b	220 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x220>
 5a4:	str	wzr, [sp, #124]
 5a8:	ldp	x23, x24, [sp, #48]
 5ac:	ldr	d8, [sp, #96]
 5b0:	b	29c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x29c>

Disassembly of section .text._ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE:

0000000000000000 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   0:	stp	x29, x30, [sp, #-144]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	stp	x21, x22, [sp, #32]
  14:	mov	x22, x1
  18:	stp	x25, x26, [sp, #64]
  1c:	stp	x27, x28, [sp, #80]
  20:	mov	x28, x2
  24:	mov	x27, x3
  28:	str	x0, [sp, #96]
  2c:	bl	0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
  30:	ands	w25, w0, #0xff
  34:	b.ne	134 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x134>  // b.any
  38:	ldr	w21, [x27, #12]
  3c:	tbnz	w21, #4, 214 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x214>
  40:	ldr	x1, [sp, #96]
  44:	ldr	w19, [x1, #20]
  48:	mov	w26, w19
  4c:	cbz	w19, 128 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x128>
  50:	mov	x0, #0x8                   	// #8
  54:	stp	x23, x24, [sp, #48]
  58:	add	x19, x0, w19, uxtw #4
  5c:	add	x23, sp, #0x78
  60:	add	x19, x1, x19
  64:	and	w2, w21, #0x1
  68:	str	w2, [sp, #104]
  6c:	nop
  70:	ldr	x4, [x19, #8]
  74:	str	xzr, [sp, #120]
  78:	stp	wzr, w21, [sp, #128]
  7c:	str	xzr, [sp, #136]
  80:	and	w24, w4, #0x1
  84:	and	x20, x4, #0x2
  88:	tbnz	w4, #1, 94 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x94>
  8c:	ldr	w0, [sp, #104]
  90:	cbz	w0, 118 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x118>
  94:	mov	x2, #0x0                   	// #0
  98:	cbz	x28, b0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb0>
  9c:	asr	x4, x4, #8
  a0:	cbz	w24, ac <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xac>
  a4:	ldr	x0, [x28]
  a8:	ldr	x4, [x0, x4]
  ac:	add	x2, x28, x4
  b0:	ldr	x0, [x19]
  b4:	mov	x3, x23
  b8:	mov	x1, x22
  bc:	ldr	x4, [x0]
  c0:	ldr	x4, [x4, #48]
  c4:	blr	x4
  c8:	ands	w25, w0, #0xff
  cc:	b.eq	118 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x118>  // b.none
  d0:	ldr	x0, [sp, #136]
  d4:	cmp	w24, #0x0
  d8:	ccmp	x0, #0x10, #0x0, ne  // ne = any
  dc:	b.eq	1f0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f0>  // b.none
  e0:	ldr	w2, [sp, #128]
  e4:	cmp	x20, #0x0
  e8:	ccmp	w2, #0x3, #0x4, eq  // eq = none
  ec:	b.gt	184 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x184>
  f0:	ldr	x1, [x27, #16]
  f4:	cbz	x1, 150 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x150>
  f8:	ldr	x4, [x27]
  fc:	ldr	x5, [sp, #120]
 100:	cmp	x4, x5
 104:	b.ne	21c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x21c>  // b.any
 108:	cbz	x4, 190 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x190>
 10c:	ldr	w0, [x27, #8]
 110:	orr	w2, w0, w2
 114:	str	w2, [x27, #8]
 118:	sub	x19, x19, #0x10
 11c:	subs	x26, x26, #0x1
 120:	b.ne	70 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x70>  // b.any
 124:	ldp	x23, x24, [sp, #48]
 128:	ldr	w0, [x27, #8]
 12c:	cmp	w0, #0x0
 130:	cset	w25, ne  // ne = any
 134:	mov	w0, w25
 138:	ldp	x19, x20, [sp, #16]
 13c:	ldp	x21, x22, [sp, #32]
 140:	ldp	x25, x26, [sp, #64]
 144:	ldp	x27, x28, [sp, #80]
 148:	ldp	x29, x30, [sp], #144
 14c:	ret
 150:	ldp	x0, x1, [x23]
 154:	stp	x0, x1, [x27]
 158:	ldr	x0, [x23, #16]
 15c:	str	x0, [x27, #16]
 160:	ldr	w0, [x27, #8]
 164:	cmp	w0, #0x3
 168:	b.le	17c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x17c>
 16c:	tbz	w0, #1, 1fc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1fc>
 170:	ldr	x0, [sp, #96]
 174:	ldr	w0, [x0, #16]
 178:	tbnz	w0, #0, 118 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x118>
 17c:	ldp	x23, x24, [sp, #48]
 180:	b	134 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x134>
 184:	and	w2, w2, #0xfffffffd
 188:	str	w2, [sp, #128]
 18c:	b	f0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 190:	cmp	x1, #0x10
 194:	ccmp	x0, #0x10, #0x4, ne  // ne = any
 198:	b.eq	1c8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1c8>  // b.none
 19c:	ldr	x0, [x0, #8]
 1a0:	ldr	x1, [x1, #8]
 1a4:	cmp	x0, x1
 1a8:	b.eq	10c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10c>  // b.none
 1ac:	ldrb	w4, [x0]
 1b0:	str	w2, [sp, #108]
 1b4:	cmp	w4, #0x2a
 1b8:	b.eq	1c8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1c8>  // b.none
 1bc:	bl	0 <strcmp>
 1c0:	ldr	w2, [sp, #108]
 1c4:	cbz	w0, 10c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10c>
 1c8:	mov	w0, #0x2                   	// #2
 1cc:	ldp	x23, x24, [sp, #48]
 1d0:	str	w0, [x27, #8]
 1d4:	mov	w0, w25
 1d8:	ldp	x19, x20, [sp, #16]
 1dc:	ldp	x21, x22, [sp, #32]
 1e0:	ldp	x25, x26, [sp, #64]
 1e4:	ldp	x27, x28, [sp, #80]
 1e8:	ldp	x29, x30, [sp], #144
 1ec:	ret
 1f0:	ldr	x0, [x19]
 1f4:	str	x0, [sp, #136]
 1f8:	b	e0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe0>
 1fc:	tbz	w0, #0, 17c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x17c>
 200:	ldr	x0, [sp, #96]
 204:	ldr	w0, [x0, #16]
 208:	tbnz	w0, #1, 118 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x118>
 20c:	ldp	x23, x24, [sp, #48]
 210:	b	134 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x134>
 214:	ldr	w21, [x19, #16]
 218:	b	40 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x40>
 21c:	mov	w0, #0x2                   	// #2
 220:	ldp	x23, x24, [sp, #48]
 224:	str	xzr, [x27]
 228:	str	w0, [x27, #8]
 22c:	b	134 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x134>

vterminate.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN9__gnu_cxx27__verbose_terminate_handlerEv:

0000000000000000 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
   8:	mov	x29, sp
   c:	ldrb	w1, [x0]
  10:	cbnz	w1, f8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>
  14:	mov	w1, #0x1                   	// #1
  18:	strb	w1, [x0]
  1c:	bl	0 <__cxa_current_exception_type>
  20:	cbz	x0, cc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
  24:	stp	x19, x20, [sp, #16]
  28:	mov	w4, #0xffffffff            	// #-1
  2c:	add	x3, sp, #0x3c
  30:	ldr	x19, [x0, #8]
  34:	stp	x21, x22, [sp, #32]
  38:	adrp	x21, 0 <stderr>
  3c:	mov	x2, #0x0                   	// #0
  40:	mov	x1, #0x0                   	// #0
  44:	ldrb	w0, [x19]
  48:	str	w4, [sp, #60]
  4c:	cmp	w0, #0x2a
  50:	cinc	x19, x19, eq  // eq = none
  54:	mov	x0, x19
  58:	bl	0 <__cxa_demangle>
  5c:	mov	x20, x0
  60:	ldr	x22, [x21]
  64:	mov	x1, #0x1                   	// #1
  68:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
  6c:	mov	x2, #0x30                  	// #48
  70:	add	x0, x0, #0x0
  74:	ldr	x3, [x22]
  78:	bl	0 <fwrite>
  7c:	ldr	w0, [sp, #60]
  80:	ldr	x1, [x22]
  84:	cbz	w0, c0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xc0>
  88:	mov	x0, x19
  8c:	bl	0 <fputs>
  90:	ldr	x3, [x21]
  94:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
  98:	mov	x2, #0x2                   	// #2
  9c:	add	x0, x0, #0x0
  a0:	mov	x1, #0x1                   	// #1
  a4:	ldr	x3, [x3]
  a8:	bl	0 <fwrite>
  ac:	ldr	w0, [sp, #60]
  b0:	cbnz	w0, bc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xbc>
  b4:	mov	x0, x20
  b8:	bl	0 <free>
  bc:	bl	0 <__cxa_rethrow>
  c0:	mov	x0, x20
  c4:	bl	0 <fputs>
  c8:	b	90 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x90>
  cc:	adrp	x3, 0 <stderr>
  d0:	mov	x2, #0x2d                  	// #45
  d4:	mov	x1, #0x1                   	// #1
  d8:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
  dc:	ldr	x3, [x3]
  e0:	add	x0, x0, #0x0
  e4:	ldr	x3, [x3]
  e8:	bl	0 <fwrite>
  ec:	stp	x19, x20, [sp, #16]
  f0:	stp	x21, x22, [sp, #32]
  f4:	bl	0 <abort>
  f8:	adrp	x3, 0 <stderr>
  fc:	mov	x2, #0x1d                  	// #29
 100:	mov	x1, #0x1                   	// #1
 104:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
 108:	ldr	x3, [x3]
 10c:	add	x0, x0, #0x0
 110:	stp	x19, x20, [sp, #16]
 114:	ldr	x3, [x3]
 118:	stp	x21, x22, [sp, #32]
 11c:	bl	0 <fwrite>
 120:	bl	0 <abort>
 124:	mov	x19, x1
 128:	cmp	x1, #0x1
 12c:	b.ne	188 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x188>  // b.any
 130:	bl	0 <__cxa_begin_catch>
 134:	ldr	x1, [x0]
 138:	ldr	x1, [x1, #16]
 13c:	blr	x1
 140:	mov	x20, x0
 144:	ldr	x3, [x21]
 148:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
 14c:	mov	x1, x19
 150:	add	x0, x0, #0x0
 154:	mov	x2, #0xb                   	// #11
 158:	ldr	x3, [x3]
 15c:	bl	0 <fwrite>
 160:	ldr	x1, [x21]
 164:	mov	x0, x20
 168:	ldr	x1, [x1]
 16c:	bl	0 <fputs>
 170:	ldr	x21, [x21]
 174:	mov	w0, #0xa                   	// #10
 178:	ldr	x1, [x21]
 17c:	bl	0 <fputc>
 180:	bl	0 <__cxa_end_catch>
 184:	bl	0 <abort>
 188:	bl	0 <__cxa_begin_catch>
 18c:	bl	0 <__cxa_end_catch>
 190:	bl	0 <abort>
 194:	mov	x19, x0
 198:	bl	0 <__cxa_end_catch>
 19c:	mov	x0, x19
 1a0:	bl	0 <_Unwind_Resume>

cp-demangle.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <d_make_comp>:
       0:	sub	w5, w1, #0x1
       4:	mov	x4, x0
       8:	cmp	w5, #0x4f
       c:	b.ls	18 <d_make_comp+0x18>  // b.plast
      10:	mov	x0, #0x0                   	// #0
      14:	ret
      18:	adrp	x0, 0 <d_make_comp>
      1c:	add	x0, x0, #0x0
      20:	ldrb	w0, [x0, w5, uxtw]
      24:	adr	x5, 30 <d_make_comp+0x30>
      28:	add	x0, x5, w0, sxtb #2
      2c:	br	x0
      30:	cbz	x3, 10 <d_make_comp+0x10>
      34:	ldp	w0, w5, [x4, #40]
      38:	cmp	w0, w5
      3c:	b.ge	10 <d_make_comp+0x10>  // b.tcont
      40:	mov	w5, #0x18                  	// #24
      44:	add	w7, w0, #0x1
      48:	ldr	x6, [x4, #32]
      4c:	smull	x5, w0, w5
      50:	add	x0, x6, x5
      54:	str	wzr, [x0, #4]
      58:	str	w7, [x4, #40]
      5c:	str	w1, [x6, x5]
      60:	stp	x2, x3, [x0, #8]
      64:	ret
      68:	cbnz	x2, 34 <d_make_comp+0x34>
      6c:	mov	x0, #0x0                   	// #0
      70:	b	14 <d_make_comp+0x14>
      74:	cmp	x2, #0x0
      78:	ccmp	x3, #0x0, #0x4, ne  // ne = any
      7c:	b.ne	34 <d_make_comp+0x34>  // b.any
      80:	mov	x0, #0x0                   	// #0
      84:	b	14 <d_make_comp+0x14>

0000000000000088 <d_count_templates_scopes>:
      88:	cbz	x1, 168 <d_count_templates_scopes+0xe0>
      8c:	stp	x29, x30, [sp, #-32]!
      90:	mov	x29, sp
      94:	stp	x19, x20, [sp, #16]
      98:	mov	x20, x0
      9c:	mov	x19, x1
      a0:	adrp	x0, 0 <d_make_comp>
      a4:	add	x0, x0, #0x0
      a8:	ldr	w1, [x19]
      ac:	sub	w1, w1, #0x1
      b0:	cmp	w1, #0x4f
      b4:	b.ls	c4 <d_count_templates_scopes+0x3c>  // b.plast
      b8:	ldp	x19, x20, [sp, #16]
      bc:	ldp	x29, x30, [sp], #32
      c0:	ret
      c4:	ldrb	w1, [x0, w1, uxtw]
      c8:	adr	x2, d4 <d_count_templates_scopes+0x4c>
      cc:	add	x1, x2, w1, sxtb #2
      d0:	br	x1
      d4:	ldr	x0, [x19, #8]
      d8:	ldr	w0, [x0]
      dc:	cmp	w0, #0x5
      e0:	b.ne	f0 <d_count_templates_scopes+0x68>  // b.any
      e4:	ldr	w0, [x20, #348]
      e8:	add	w0, w0, #0x1
      ec:	str	w0, [x20, #348]
      f0:	ldr	w0, [x20, #308]
      f4:	cmp	w0, #0x800
      f8:	b.gt	b8 <d_count_templates_scopes+0x30>
      fc:	ldr	x1, [x19, #8]
     100:	add	w0, w0, #0x1
     104:	str	w0, [x20, #308]
     108:	mov	x0, x20
     10c:	bl	88 <d_count_templates_scopes>
     110:	ldr	x1, [x19, #16]
     114:	mov	x0, x20
     118:	bl	88 <d_count_templates_scopes>
     11c:	ldr	w0, [x20, #308]
     120:	sub	w0, w0, #0x1
     124:	str	w0, [x20, #308]
     128:	ldp	x19, x20, [sp, #16]
     12c:	ldp	x29, x30, [sp], #32
     130:	ret
     134:	ldr	x19, [x19, #8]
     138:	cbnz	x19, a8 <d_count_templates_scopes+0x20>
     13c:	b	b8 <d_count_templates_scopes+0x30>
     140:	ldr	x19, [x19, #16]
     144:	cbnz	x19, a8 <d_count_templates_scopes+0x20>
     148:	b	b8 <d_count_templates_scopes+0x30>
     14c:	ldr	w0, [x20, #364]
     150:	add	w0, w0, #0x1
     154:	str	w0, [x20, #364]
     158:	ldr	w0, [x20, #308]
     15c:	cmp	w0, #0x800
     160:	b.gt	b8 <d_count_templates_scopes+0x30>
     164:	b	fc <d_count_templates_scopes+0x74>
     168:	ret
     16c:	nop

0000000000000170 <d_append_buffer>:
     170:	cbz	x2, 238 <d_append_buffer+0xc8>
     174:	stp	x29, x30, [sp, #-64]!
     178:	mov	x29, sp
     17c:	stp	x19, x20, [sp, #16]
     180:	mov	x20, x1
     184:	mov	x19, x0
     188:	stp	x21, x22, [sp, #32]
     18c:	add	x22, x1, x2
     190:	ldr	x1, [x0, #256]
     194:	str	x23, [sp, #48]
     198:	mov	x23, #0x1                   	// #1
     19c:	b	1f4 <d_append_buffer+0x84>
     1a0:	ldp	x3, x2, [x19, #272]
     1a4:	strb	wzr, [x19, #255]
     1a8:	add	x20, x20, #0x1
     1ac:	blr	x3
     1b0:	strb	w21, [x19]
     1b4:	ldr	x0, [x19, #320]
     1b8:	str	x23, [x19, #256]
     1bc:	strb	w21, [x19, #264]
     1c0:	cmp	x22, x20
     1c4:	add	x0, x0, #0x1
     1c8:	str	x0, [x19, #320]
     1cc:	mov	x0, #0x1                   	// #1
     1d0:	b.eq	224 <d_append_buffer+0xb4>  // b.none
     1d4:	ldrb	w21, [x20]
     1d8:	add	x1, x0, #0x1
     1dc:	str	x1, [x19, #256]
     1e0:	add	x20, x20, #0x1
     1e4:	strb	w21, [x19, x0]
     1e8:	cmp	x20, x22
     1ec:	strb	w21, [x19, #264]
     1f0:	b.eq	224 <d_append_buffer+0xb4>  // b.none
     1f4:	ldrb	w21, [x20]
     1f8:	mov	x0, x19
     1fc:	cmp	x1, #0xff
     200:	b.eq	1a0 <d_append_buffer+0x30>  // b.none
     204:	mov	x0, x1
     208:	add	x20, x20, #0x1
     20c:	add	x1, x0, #0x1
     210:	str	x1, [x19, #256]
     214:	cmp	x20, x22
     218:	strb	w21, [x19, x0]
     21c:	strb	w21, [x19, #264]
     220:	b.ne	1f4 <d_append_buffer+0x84>  // b.any
     224:	ldp	x19, x20, [sp, #16]
     228:	ldp	x21, x22, [sp, #32]
     22c:	ldr	x23, [sp, #48]
     230:	ldp	x29, x30, [sp], #64
     234:	ret
     238:	ret
     23c:	nop

0000000000000240 <d_index_template_argument.part.0>:
     240:	cbnz	x0, 25c <d_index_template_argument.part.0+0x1c>
     244:	b	268 <d_index_template_argument.part.0+0x28>
     248:	cmp	w1, #0x0
     24c:	b.le	270 <d_index_template_argument.part.0+0x30>
     250:	ldr	x0, [x0, #16]
     254:	sub	w1, w1, #0x1
     258:	cbz	x0, 26c <d_index_template_argument.part.0+0x2c>
     25c:	ldr	w2, [x0]
     260:	cmp	w2, #0x2f
     264:	b.eq	248 <d_index_template_argument.part.0+0x8>  // b.none
     268:	mov	x0, #0x0                   	// #0
     26c:	ret
     270:	b.ne	268 <d_index_template_argument.part.0+0x28>  // b.any
     274:	ldr	x0, [x0, #8]
     278:	ret
     27c:	nop

0000000000000280 <d_growable_string_callback_adapter>:
     280:	stp	x29, x30, [sp, #-48]!
     284:	mov	x29, sp
     288:	stp	x19, x20, [sp, #16]
     28c:	mov	x19, x2
     290:	add	x2, x1, #0x1
     294:	stp	x21, x22, [sp, #32]
     298:	mov	x21, x1
     29c:	mov	x22, x0
     2a0:	ldp	x1, x20, [x19, #8]
     2a4:	add	x1, x2, x1
     2a8:	ldr	w2, [x19, #24]
     2ac:	cmp	x1, x20
     2b0:	b.hi	2f4 <d_growable_string_callback_adapter+0x74>  // b.pmore
     2b4:	cbnz	w2, 2e4 <d_growable_string_callback_adapter+0x64>
     2b8:	ldp	x3, x0, [x19]
     2bc:	mov	x1, x22
     2c0:	mov	x2, x21
     2c4:	add	x0, x3, x0
     2c8:	bl	0 <memcpy>
     2cc:	ldp	x0, x1, [x19]
     2d0:	add	x0, x0, x21
     2d4:	strb	wzr, [x0, x1]
     2d8:	ldr	x1, [x19, #8]
     2dc:	add	x1, x1, x21
     2e0:	str	x1, [x19, #8]
     2e4:	ldp	x19, x20, [sp, #16]
     2e8:	ldp	x21, x22, [sp, #32]
     2ec:	ldp	x29, x30, [sp], #48
     2f0:	ret
     2f4:	cbnz	w2, 2e4 <d_growable_string_callback_adapter+0x64>
     2f8:	cbz	x20, 330 <d_growable_string_callback_adapter+0xb0>
     2fc:	nop
     300:	lsl	x20, x20, #1
     304:	cmp	x1, x20
     308:	b.hi	300 <d_growable_string_callback_adapter+0x80>  // b.pmore
     30c:	ldr	x0, [x19]
     310:	mov	x1, x20
     314:	bl	0 <realloc>
     318:	cbz	x0, 340 <d_growable_string_callback_adapter+0xc0>
     31c:	ldr	w2, [x19, #24]
     320:	str	x0, [x19]
     324:	str	x20, [x19, #16]
     328:	cbz	w2, 2b8 <d_growable_string_callback_adapter+0x38>
     32c:	b	2e4 <d_growable_string_callback_adapter+0x64>
     330:	cmp	x1, #0x2
     334:	mov	x20, #0x2                   	// #2
     338:	b.hi	300 <d_growable_string_callback_adapter+0x80>  // b.pmore
     33c:	b	30c <d_growable_string_callback_adapter+0x8c>
     340:	ldr	x0, [x19]
     344:	bl	0 <free>
     348:	str	xzr, [x19]
     34c:	mov	w0, #0x1                   	// #1
     350:	stp	xzr, xzr, [x19, #8]
     354:	str	w0, [x19, #24]
     358:	b	2e4 <d_growable_string_callback_adapter+0x64>
     35c:	nop

0000000000000360 <d_find_pack>:
     360:	cbz	x1, 47c <d_find_pack+0x11c>
     364:	stp	x29, x30, [sp, #-48]!
     368:	mov	x29, sp
     36c:	stp	x21, x22, [sp, #32]
     370:	mov	x21, #0x8001                	// #32769
     374:	movk	x21, #0x410, lsl #16
     378:	movk	x21, #0xc600, lsl #32
     37c:	stp	x19, x20, [sp, #16]
     380:	mov	x20, x0
     384:	mov	x19, x1
     388:	mov	x22, #0x1                   	// #1
     38c:	movk	x21, #0x19, lsl #48
     390:	ldr	w2, [x19]
     394:	cmp	w2, #0x8
     398:	b.eq	3b0 <d_find_pack+0x50>  // b.none
     39c:	b.hi	41c <d_find_pack+0xbc>  // b.pmore
     3a0:	cmp	w2, #0x6
     3a4:	b.eq	3b8 <d_find_pack+0x58>  // b.none
     3a8:	cmp	w2, #0x7
     3ac:	b.ne	3cc <d_find_pack+0x6c>  // b.any
     3b0:	ldr	x19, [x19, #16]
     3b4:	cbnz	x19, 390 <d_find_pack+0x30>
     3b8:	mov	x0, #0x0                   	// #0
     3bc:	ldp	x19, x20, [sp, #16]
     3c0:	ldp	x21, x22, [sp, #32]
     3c4:	ldp	x29, x30, [sp], #48
     3c8:	ret
     3cc:	cbz	w2, 3b8 <d_find_pack+0x58>
     3d0:	cmp	w2, #0x5
     3d4:	b.ne	438 <d_find_pack+0xd8>  // b.any
     3d8:	ldr	x0, [x20, #288]
     3dc:	cbz	x0, 470 <d_find_pack+0x110>
     3e0:	ldr	x0, [x0, #8]
     3e4:	ldr	x2, [x19, #8]
     3e8:	ldr	x0, [x0, #16]
     3ec:	mov	w1, w2
     3f0:	tbnz	w2, #31, 450 <d_find_pack+0xf0>
     3f4:	cbnz	x0, 40c <d_find_pack+0xac>
     3f8:	b	3b8 <d_find_pack+0x58>
     3fc:	cbz	w1, 44c <d_find_pack+0xec>
     400:	ldr	x0, [x0, #16]
     404:	sub	w1, w1, #0x1
     408:	cbz	x0, 3b8 <d_find_pack+0x58>
     40c:	ldr	w2, [x0]
     410:	cmp	w2, #0x2f
     414:	b.eq	3fc <d_find_pack+0x9c>  // b.none
     418:	b	3b8 <d_find_pack+0x58>
     41c:	sub	w2, w2, #0x18
     420:	cmp	w2, #0x34
     424:	b.hi	438 <d_find_pack+0xd8>  // b.pmore
     428:	lsl	x2, x22, x2
     42c:	tst	x2, x21
     430:	b.ne	3b8 <d_find_pack+0x58>  // b.any
     434:	tbnz	w2, #27, 3b0 <d_find_pack+0x50>
     438:	ldr	x1, [x19, #8]
     43c:	mov	x0, x20
     440:	bl	360 <d_find_pack>
     444:	cbz	x0, 3b0 <d_find_pack+0x50>
     448:	b	3bc <d_find_pack+0x5c>
     44c:	ldr	x0, [x0, #8]
     450:	cbz	x0, 3b8 <d_find_pack+0x58>
     454:	ldr	w1, [x0]
     458:	cmp	w1, #0x2f
     45c:	b.ne	3b8 <d_find_pack+0x58>  // b.any
     460:	ldp	x19, x20, [sp, #16]
     464:	ldp	x21, x22, [sp, #32]
     468:	ldp	x29, x30, [sp], #48
     46c:	ret
     470:	mov	w1, #0x1                   	// #1
     474:	str	w1, [x20, #304]
     478:	b	3bc <d_find_pack+0x5c>
     47c:	mov	x0, #0x0                   	// #0
     480:	ret
     484:	nop

0000000000000488 <d_source_name>:
     488:	ldr	x2, [x0, #24]
     48c:	mov	x6, x0
     490:	mov	w9, #0x0                   	// #0
     494:	ldrb	w1, [x2]
     498:	cmp	w1, #0x6e
     49c:	b.ne	4b4 <d_source_name+0x2c>  // b.any
     4a0:	add	x0, x2, #0x1
     4a4:	str	x0, [x6, #24]
     4a8:	mov	w9, #0x1                   	// #1
     4ac:	ldrb	w1, [x2, #1]
     4b0:	mov	x2, x0
     4b4:	sub	w3, w1, #0x30
     4b8:	mov	w7, #0xcccd                	// #52429
     4bc:	and	w3, w3, #0xff
     4c0:	add	x5, x2, #0x1
     4c4:	cmp	w3, #0x9
     4c8:	mov	w2, w1
     4cc:	mov	w8, #0x7fffffff            	// #2147483647
     4d0:	mov	w1, #0x0                   	// #0
     4d4:	movk	w7, #0xcccc, lsl #16
     4d8:	b.ls	4f4 <d_source_name+0x6c>  // b.plast
     4dc:	b	5e8 <d_source_name+0x160>
     4e0:	umull	x3, w3, w7
     4e4:	add	x5, x5, #0x1
     4e8:	lsr	x3, x3, #35
     4ec:	cmp	w3, w1
     4f0:	b.lt	5e8 <d_source_name+0x160>  // b.tstop
     4f4:	str	x5, [x6, #24]
     4f8:	add	w1, w1, w1, lsl #2
     4fc:	ldrb	w0, [x5]
     500:	add	w1, w2, w1, lsl #1
     504:	sub	w1, w1, #0x30
     508:	sub	w4, w0, #0x30
     50c:	mov	w2, w0
     510:	sub	w3, w8, w4
     514:	and	w4, w4, #0xff
     518:	cmp	w4, #0x9
     51c:	b.ls	4e0 <d_source_name+0x58>  // b.plast
     520:	cmp	w1, #0x0
     524:	ccmp	w9, #0x0, #0x0, gt
     528:	b.ne	5e8 <d_source_name+0x160>  // b.any
     52c:	ldr	x0, [x6, #8]
     530:	sxtw	x2, w1
     534:	sub	x0, x0, x5
     538:	cmp	x0, w1, sxtw
     53c:	b.lt	5f0 <d_source_name+0x168>  // b.tstop
     540:	ldr	w3, [x6, #16]
     544:	add	x0, x5, x2
     548:	str	x0, [x6, #24]
     54c:	tbz	w3, #2, 568 <d_source_name+0xe0>
     550:	ldrb	w2, [x5, x2]
     554:	cmp	w2, #0x24
     558:	b.ne	568 <d_source_name+0xe0>  // b.any
     55c:	add	x0, x0, #0x1
     560:	str	x0, [x6, #24]
     564:	nop
     568:	ldp	w2, w0, [x6, #40]
     56c:	cmp	w1, #0x9
     570:	b.le	5b8 <d_source_name+0x130>
     574:	mov	x3, #0x475f                	// #18271
     578:	ldr	x4, [x5]
     57c:	movk	x3, #0x4f4c, lsl #16
     580:	movk	x3, #0x4142, lsl #32
     584:	movk	x3, #0x5f4c, lsl #48
     588:	cmp	x4, x3
     58c:	b.ne	5b8 <d_source_name+0x130>  // b.any
     590:	ldrb	w3, [x5, #8]
     594:	mov	w7, #0x5f                  	// #95
     598:	mov	w4, #0x24                  	// #36
     59c:	cmp	w3, #0x2e
     5a0:	ccmp	w3, w7, #0x4, ne  // ne = any
     5a4:	ccmp	w3, w4, #0x4, ne  // ne = any
     5a8:	b.ne	5b8 <d_source_name+0x130>  // b.any
     5ac:	ldrb	w3, [x5, #9]
     5b0:	cmp	w3, #0x4e
     5b4:	b.eq	5fc <d_source_name+0x174>  // b.none
     5b8:	cmp	w0, w2
     5bc:	b.le	5f0 <d_source_name+0x168>
     5c0:	ldr	x0, [x6, #32]
     5c4:	mov	w4, #0x18                  	// #24
     5c8:	add	w3, w2, #0x1
     5cc:	smaddl	x0, w2, w4, x0
     5d0:	str	wzr, [x0, #4]
     5d4:	str	w3, [x6, #40]
     5d8:	stp	xzr, x5, [x0]
     5dc:	str	w1, [x0, #16]
     5e0:	str	x0, [x6, #64]
     5e4:	ret
     5e8:	mov	x0, #0x0                   	// #0
     5ec:	ret
     5f0:	mov	x0, #0x0                   	// #0
     5f4:	str	x0, [x6, #64]
     5f8:	b	5e4 <d_source_name+0x15c>
     5fc:	ldr	w3, [x6, #72]
     600:	cmp	w0, w2
     604:	add	w0, w3, #0x16
     608:	sub	w1, w0, w1
     60c:	str	w1, [x6, #72]
     610:	b.le	5f0 <d_source_name+0x168>
     614:	mov	w0, #0x18                  	// #24
     618:	add	w1, w2, #0x1
     61c:	ldr	x3, [x6, #32]
     620:	smull	x2, w2, w0
     624:	str	w1, [x6, #40]
     628:	mov	w4, #0x15                  	// #21
     62c:	add	x0, x3, x2
     630:	adrp	x1, 0 <d_make_comp>
     634:	add	x1, x1, #0x0
     638:	str	xzr, [x3, x2]
     63c:	str	x1, [x0, #8]
     640:	str	w4, [x0, #16]
     644:	str	x0, [x6, #64]
     648:	b	5e4 <d_source_name+0x15c>
     64c:	nop

0000000000000650 <d_substitution>:
     650:	mov	x10, x0
     654:	ldr	x0, [x0, #24]
     658:	ldrb	w2, [x0]
     65c:	cmp	w2, #0x53
     660:	b.ne	6e8 <d_substitution+0x98>  // b.any
     664:	add	x3, x0, #0x1
     668:	str	x3, [x10, #24]
     66c:	ldrb	w2, [x0, #1]
     670:	cbnz	w2, 6f4 <d_substitution+0xa4>
     674:	ldr	w0, [x10, #16]
     678:	and	w1, w1, #0x1
     67c:	ands	w4, w0, #0x8
     680:	ubfx	x4, x0, #3, #1
     684:	csel	w1, w1, wzr, eq  // eq = none
     688:	cbz	w1, 6a0 <d_substitution+0x50>
     68c:	ldrb	w0, [x3]
     690:	sub	w0, w0, #0x43
     694:	and	w0, w0, #0xff
     698:	cmp	w0, #0x1
     69c:	csinc	w4, w4, wzr, hi  // hi = pmore
     6a0:	cmp	w2, #0x74
     6a4:	b.eq	904 <d_substitution+0x2b4>  // b.none
     6a8:	cmp	w2, #0x61
     6ac:	b.eq	914 <d_substitution+0x2c4>  // b.none
     6b0:	cmp	w2, #0x62
     6b4:	b.eq	924 <d_substitution+0x2d4>  // b.none
     6b8:	cmp	w2, #0x73
     6bc:	b.eq	93c <d_substitution+0x2ec>  // b.none
     6c0:	cmp	w2, #0x69
     6c4:	b.eq	94c <d_substitution+0x2fc>  // b.none
     6c8:	cmp	w2, #0x6f
     6cc:	b.eq	7cc <d_substitution+0x17c>  // b.none
     6d0:	adrp	x1, 0 <d_make_comp>
     6d4:	add	x1, x1, #0x0
     6d8:	add	x1, x1, #0x150
     6dc:	cmp	w2, #0x64
     6e0:	b.eq	7d8 <d_substitution+0x188>  // b.none
     6e4:	nop
     6e8:	mov	x11, #0x0                   	// #0
     6ec:	mov	x0, x11
     6f0:	ret
     6f4:	add	x3, x0, #0x2
     6f8:	str	x3, [x10, #24]
     6fc:	ldrb	w2, [x0, #1]
     700:	sub	w5, w2, #0x30
     704:	cmp	w2, #0x5f
     708:	and	w0, w5, #0xff
     70c:	ccmp	w0, #0x9, #0x0, ne  // ne = any
     710:	b.hi	73c <d_substitution+0xec>  // b.pmore
     714:	cmp	w2, #0x5f
     718:	mov	w1, #0x0                   	// #0
     71c:	b.ne	750 <d_substitution+0x100>  // b.any
     720:	ldr	w0, [x10, #56]
     724:	cmp	w0, w1
     728:	b.ls	6e8 <d_substitution+0x98>  // b.plast
     72c:	ldr	x0, [x10, #48]
     730:	ldr	x11, [x0, w1, uxtw #3]
     734:	mov	x0, x11
     738:	ret
     73c:	sub	w0, w2, #0x41
     740:	and	w0, w0, #0xff
     744:	cmp	w0, #0x19
     748:	b.hi	674 <d_substitution+0x24>  // b.pmore
     74c:	nop
     750:	mov	w3, #0x0                   	// #0
     754:	nop
     758:	add	w1, w3, w3, lsl #3
     75c:	sub	w6, w2, #0x41
     760:	mov	w4, w1
     764:	and	w5, w5, #0xff
     768:	add	w1, w2, w1, lsl #2
     76c:	and	w6, w6, #0xff
     770:	sub	w1, w1, #0x37
     774:	add	w2, w2, w4, lsl #2
     778:	cmp	w5, #0x9
     77c:	b.hi	7c0 <d_substitution+0x170>  // b.pmore
     780:	sub	w1, w2, #0x30
     784:	cmp	w3, w1
     788:	b.hi	6e8 <d_substitution+0x98>  // b.pmore
     78c:	ldr	x4, [x10, #24]
     790:	mov	w3, w1
     794:	add	x0, x4, #0x1
     798:	ldrb	w2, [x4]
     79c:	cbz	w2, 7b0 <d_substitution+0x160>
     7a0:	str	x0, [x10, #24]
     7a4:	ldrb	w2, [x4]
     7a8:	cmp	w2, #0x5f
     7ac:	b.eq	7b8 <d_substitution+0x168>  // b.none
     7b0:	sub	w5, w2, #0x30
     7b4:	b	758 <d_substitution+0x108>
     7b8:	add	w1, w1, #0x1
     7bc:	b	720 <d_substitution+0xd0>
     7c0:	cmp	w6, #0x19
     7c4:	b.ls	784 <d_substitution+0x134>  // b.plast
     7c8:	b	6e8 <d_substitution+0x98>
     7cc:	adrp	x1, 0 <d_make_comp>
     7d0:	add	x1, x1, #0x0
     7d4:	add	x1, x1, #0x118
     7d8:	ldr	x6, [x1, #40]
     7dc:	ldp	w0, w5, [x10, #40]
     7e0:	cbz	x6, 81c <d_substitution+0x1cc>
     7e4:	ldr	w11, [x1, #48]
     7e8:	cmp	w5, w0
     7ec:	b.le	95c <d_substitution+0x30c>
     7f0:	mov	w9, #0x18                  	// #24
     7f4:	ldr	x8, [x10, #32]
     7f8:	smull	x7, w0, w9
     7fc:	add	w0, w0, #0x1
     800:	add	x2, x8, x7
     804:	str	wzr, [x2, #4]
     808:	str	w0, [x10, #40]
     80c:	str	w9, [x8, x7]
     810:	str	x6, [x2, #8]
     814:	str	w11, [x2, #16]
     818:	str	x2, [x10, #64]
     81c:	cbz	w4, 8f8 <d_substitution+0x2a8>
     820:	ldr	w2, [x1, #32]
     824:	ldr	x6, [x1, #24]
     828:	cmp	w5, w0
     82c:	ldr	w1, [x10, #72]
     830:	add	w1, w1, w2
     834:	str	w1, [x10, #72]
     838:	b.le	934 <d_substitution+0x2e4>
     83c:	mov	w4, #0x18                  	// #24
     840:	add	w5, w0, #0x1
     844:	ldr	x1, [x10, #32]
     848:	smull	x0, w0, w4
     84c:	add	x11, x1, x0
     850:	str	wzr, [x11, #4]
     854:	str	w5, [x10, #40]
     858:	str	w4, [x1, x0]
     85c:	str	x6, [x11, #8]
     860:	str	w2, [x11, #16]
     864:	ldrb	w0, [x3]
     868:	cmp	w0, #0x42
     86c:	b.ne	6ec <d_substitution+0x9c>  // b.any
     870:	stp	x29, x30, [sp, #-16]!
     874:	mov	x29, sp
     878:	ldr	x12, [x10, #64]
     87c:	nop
     880:	add	x3, x3, #0x1
     884:	str	x3, [x10, #24]
     888:	mov	x0, x10
     88c:	bl	488 <d_source_name>
     890:	mov	x3, x0
     894:	mov	x2, x11
     898:	mov	x0, x10
     89c:	mov	w1, #0x4c                  	// #76
     8a0:	bl	0 <d_make_comp>
     8a4:	ldr	x3, [x10, #24]
     8a8:	mov	x11, x0
     8ac:	ldrb	w0, [x3]
     8b0:	cmp	w0, #0x42
     8b4:	b.eq	880 <d_substitution+0x230>  // b.none
     8b8:	str	x12, [x10, #64]
     8bc:	cbz	x11, 8e8 <d_substitution+0x298>
     8c0:	ldp	w0, w1, [x10, #56]
     8c4:	cmp	w0, w1
     8c8:	b.ge	8e8 <d_substitution+0x298>  // b.tcont
     8cc:	ldr	x2, [x10, #48]
     8d0:	add	w1, w0, #0x1
     8d4:	str	x11, [x2, w0, sxtw #3]
     8d8:	mov	x0, x11
     8dc:	str	w1, [x10, #56]
     8e0:	ldp	x29, x30, [sp], #16
     8e4:	ret
     8e8:	mov	x11, #0x0                   	// #0
     8ec:	mov	x0, x11
     8f0:	ldp	x29, x30, [sp], #16
     8f4:	ret
     8f8:	ldr	w2, [x1, #16]
     8fc:	ldr	x6, [x1, #8]
     900:	b	828 <d_substitution+0x1d8>
     904:	adrp	x1, 0 <d_make_comp>
     908:	add	x1, x1, #0x0
     90c:	ldp	w0, w5, [x10, #40]
     910:	b	81c <d_substitution+0x1cc>
     914:	adrp	x1, 0 <d_make_comp>
     918:	add	x1, x1, #0x0
     91c:	add	x1, x1, #0x38
     920:	b	7d8 <d_substitution+0x188>
     924:	adrp	x1, 0 <d_make_comp>
     928:	add	x1, x1, #0x0
     92c:	add	x1, x1, #0x70
     930:	b	7d8 <d_substitution+0x188>
     934:	mov	x11, #0x0                   	// #0
     938:	b	864 <d_substitution+0x214>
     93c:	adrp	x1, 0 <d_make_comp>
     940:	add	x1, x1, #0x0
     944:	add	x1, x1, #0xa8
     948:	b	7d8 <d_substitution+0x188>
     94c:	adrp	x1, 0 <d_make_comp>
     950:	add	x1, x1, #0x0
     954:	add	x1, x1, #0xe0
     958:	b	7d8 <d_substitution+0x188>
     95c:	mov	x2, #0x0                   	// #0
     960:	str	x2, [x10, #64]
     964:	b	81c <d_substitution+0x1cc>

0000000000000968 <d_compact_number>:
     968:	ldr	x1, [x0, #24]
     96c:	mov	x5, x0
     970:	ldrb	w2, [x1]
     974:	cmp	w2, #0x5f
     978:	b.eq	a04 <d_compact_number+0x9c>  // b.none
     97c:	cmp	w2, #0x6e
     980:	b.eq	a0c <d_compact_number+0xa4>  // b.none
     984:	sub	w0, w2, #0x30
     988:	and	w0, w0, #0xff
     98c:	cmp	w0, #0x9
     990:	b.hi	a0c <d_compact_number+0xa4>  // b.pmore
     994:	mov	w8, #0xcccd                	// #52429
     998:	mov	w3, w2
     99c:	mov	w9, #0x7fffffff            	// #2147483647
     9a0:	mov	w2, #0x0                   	// #0
     9a4:	movk	w8, #0xcccc, lsl #16
     9a8:	b	9bc <d_compact_number+0x54>
     9ac:	umull	x4, w4, w8
     9b0:	lsr	x4, x4, #35
     9b4:	cmp	w4, w2
     9b8:	b.lt	a0c <d_compact_number+0xa4>  // b.tstop
     9bc:	add	x1, x1, #0x1
     9c0:	str	x1, [x5, #24]
     9c4:	add	w2, w2, w2, lsl #2
     9c8:	ldrb	w7, [x1]
     9cc:	add	w0, w3, w2, lsl #1
     9d0:	sub	w2, w0, #0x30
     9d4:	sub	w6, w7, #0x30
     9d8:	mov	w3, w7
     9dc:	sub	w4, w9, w6
     9e0:	and	w6, w6, #0xff
     9e4:	cmp	w6, #0x9
     9e8:	b.ls	9ac <d_compact_number+0x44>  // b.plast
     9ec:	sub	w0, w0, #0x2f
     9f0:	cmp	w7, #0x5f
     9f4:	b.ne	a0c <d_compact_number+0xa4>  // b.any
     9f8:	add	x1, x1, #0x1
     9fc:	str	x1, [x5, #24]
     a00:	ret
     a04:	mov	w0, #0x0                   	// #0
     a08:	b	9f8 <d_compact_number+0x90>
     a0c:	mov	w0, #0xffffffff            	// #-1
     a10:	ret
     a14:	nop

0000000000000a18 <d_discriminator>:
     a18:	mov	x4, x0
     a1c:	ldr	x0, [x0, #24]
     a20:	ldrb	w1, [x0]
     a24:	cmp	w1, #0x5f
     a28:	b.ne	ac8 <d_discriminator+0xb0>  // b.any
     a2c:	add	x1, x0, #0x1
     a30:	str	x1, [x4, #24]
     a34:	mov	w12, #0x0                   	// #0
     a38:	ldrb	w2, [x0, #1]
     a3c:	cmp	w2, #0x5f
     a40:	b.eq	b00 <d_discriminator+0xe8>  // b.none
     a44:	cmp	w2, #0x6e
     a48:	b.eq	ad8 <d_discriminator+0xc0>  // b.none
     a4c:	sub	w0, w2, #0x30
     a50:	and	w0, w0, #0xff
     a54:	cmp	w0, #0x9
     a58:	b.hi	ac8 <d_discriminator+0xb0>  // b.pmore
     a5c:	mov	w0, #0x0                   	// #0
     a60:	mov	w9, #0xcccd                	// #52429
     a64:	mov	w5, w2
     a68:	mov	w10, #0x7fffffff            	// #2147483647
     a6c:	mov	w2, #0x0                   	// #0
     a70:	movk	w9, #0xcccc, lsl #16
     a74:	b	a88 <d_discriminator+0x70>
     a78:	umull	x3, w3, w9
     a7c:	lsr	x3, x3, #35
     a80:	cmp	w3, w2
     a84:	b.lt	ad0 <d_discriminator+0xb8>  // b.tstop
     a88:	mov	x11, x1
     a8c:	add	x1, x1, #0x1
     a90:	str	x1, [x4, #24]
     a94:	add	w2, w2, w2, lsl #2
     a98:	ldrb	w7, [x1]
     a9c:	add	w8, w5, w2, lsl #1
     aa0:	sub	w2, w8, #0x30
     aa4:	sub	w6, w7, #0x30
     aa8:	mov	w5, w7
     aac:	sub	w3, w10, w6
     ab0:	and	w6, w6, #0xff
     ab4:	cmp	w6, #0x9
     ab8:	b.ls	a78 <d_discriminator+0x60>  // b.plast
     abc:	cbz	w0, b1c <d_discriminator+0x104>
     ac0:	cmp	w8, #0x30
     ac4:	b.ne	ad0 <d_discriminator+0xb8>  // b.any
     ac8:	mov	w0, #0x1                   	// #1
     acc:	ret
     ad0:	mov	w0, #0x0                   	// #0
     ad4:	ret
     ad8:	add	x3, x1, #0x1
     adc:	str	x3, [x4, #24]
     ae0:	ldrb	w2, [x1, #1]
     ae4:	sub	w0, w2, #0x30
     ae8:	and	w0, w0, #0xff
     aec:	cmp	w0, #0x9
     af0:	b.hi	ac8 <d_discriminator+0xb0>  // b.pmore
     af4:	mov	x1, x3
     af8:	mov	w0, #0x1                   	// #1
     afc:	b	a60 <d_discriminator+0x48>
     b00:	add	x1, x0, #0x2
     b04:	str	x1, [x4, #24]
     b08:	mov	w12, #0x1                   	// #1
     b0c:	ldrb	w2, [x0, #2]
     b10:	cmp	w2, #0x6e
     b14:	b.ne	a4c <d_discriminator+0x34>  // b.any
     b18:	b	ad8 <d_discriminator+0xc0>
     b1c:	cmp	w12, #0x0
     b20:	ccmp	w2, #0x9, #0x4, ne  // ne = any
     b24:	b.le	ac8 <d_discriminator+0xb0>
     b28:	cmp	w7, #0x5f
     b2c:	b.ne	acc <d_discriminator+0xb4>  // b.any
     b30:	add	x11, x11, #0x2
     b34:	mov	w0, #0x1                   	// #1
     b38:	str	x11, [x4, #24]
     b3c:	ret

0000000000000b40 <d_template_param>:
     b40:	mov	x1, x0
     b44:	ldr	x0, [x0, #24]
     b48:	ldrb	w2, [x0]
     b4c:	cmp	w2, #0x54
     b50:	b.ne	c20 <d_template_param+0xe0>  // b.any
     b54:	add	x2, x0, #0x1
     b58:	str	x2, [x1, #24]
     b5c:	ldrb	w5, [x0, #1]
     b60:	cmp	w5, #0x5f
     b64:	b.eq	c28 <d_template_param+0xe8>  // b.none
     b68:	sub	w0, w5, #0x30
     b6c:	and	w0, w0, #0xff
     b70:	cmp	w0, #0x9
     b74:	b.hi	c20 <d_template_param+0xe0>  // b.pmore
     b78:	mov	w9, #0xcccd                	// #52429
     b7c:	mov	w0, #0x0                   	// #0
     b80:	mov	w10, #0x7fffffff            	// #2147483647
     b84:	movk	w9, #0xcccc, lsl #16
     b88:	b	b9c <d_template_param+0x5c>
     b8c:	umull	x3, w3, w9
     b90:	lsr	x3, x3, #35
     b94:	cmp	w3, w0
     b98:	b.lt	c20 <d_template_param+0xe0>  // b.tstop
     b9c:	mov	x8, x2
     ba0:	add	x2, x2, #0x1
     ba4:	str	x2, [x1, #24]
     ba8:	add	w0, w0, w0, lsl #2
     bac:	ldrb	w7, [x2]
     bb0:	add	w6, w5, w0, lsl #1
     bb4:	sub	w0, w6, #0x30
     bb8:	sub	w4, w7, #0x30
     bbc:	mov	w5, w7
     bc0:	sub	w3, w10, w4
     bc4:	and	w4, w4, #0xff
     bc8:	cmp	w4, #0x9
     bcc:	b.ls	b8c <d_template_param+0x4c>  // b.plast
     bd0:	sub	w0, w6, #0x2f
     bd4:	cmp	w7, #0x5f
     bd8:	b.ne	c20 <d_template_param+0xe0>  // b.any
     bdc:	add	x8, x8, #0x2
     be0:	str	x8, [x1, #24]
     be4:	ldp	w2, w3, [x1, #40]
     be8:	cmp	w2, w3
     bec:	b.ge	c20 <d_template_param+0xe0>  // b.tcont
     bf0:	mov	w4, #0x18                  	// #24
     bf4:	add	w5, w2, #0x1
     bf8:	ldr	x3, [x1, #32]
     bfc:	smull	x2, w2, w4
     c00:	sxtw	x6, w0
     c04:	mov	w4, #0x5                   	// #5
     c08:	add	x0, x3, x2
     c0c:	str	wzr, [x0, #4]
     c10:	str	w5, [x1, #40]
     c14:	str	w4, [x3, x2]
     c18:	str	x6, [x0, #8]
     c1c:	ret
     c20:	mov	x0, #0x0                   	// #0
     c24:	ret
     c28:	add	x2, x0, #0x2
     c2c:	mov	w0, #0x0                   	// #0
     c30:	str	x2, [x1, #24]
     c34:	b	be4 <d_template_param+0xa4>

0000000000000c38 <d_call_offset>:
     c38:	mov	x2, x0
     c3c:	cbnz	w1, c58 <d_call_offset+0x20>
     c40:	ldr	x0, [x0, #24]
     c44:	ldrb	w1, [x0]
     c48:	cbz	w1, d80 <d_call_offset+0x148>
     c4c:	add	x1, x0, #0x1
     c50:	str	x1, [x2, #24]
     c54:	ldrb	w1, [x0]
     c58:	cmp	w1, #0x68
     c5c:	b.eq	d9c <d_call_offset+0x164>  // b.none
     c60:	cmp	w1, #0x76
     c64:	b.ne	d80 <d_call_offset+0x148>  // b.any
     c68:	ldr	x6, [x2, #24]
     c6c:	ldrb	w5, [x6]
     c70:	cmp	w5, #0x6e
     c74:	b.eq	d88 <d_call_offset+0x150>  // b.none
     c78:	sub	w0, w5, #0x30
     c7c:	and	w0, w0, #0xff
     c80:	cmp	w0, #0x9
     c84:	b.hi	ce0 <d_call_offset+0xa8>  // b.pmore
     c88:	mov	w7, #0xcccd                	// #52429
     c8c:	add	x3, x6, #0x1
     c90:	mov	w1, #0x0                   	// #0
     c94:	mov	w8, #0x7fffffff            	// #2147483647
     c98:	movk	w7, #0xcccc, lsl #16
     c9c:	b	cb0 <d_call_offset+0x78>
     ca0:	umull	x0, w0, w7
     ca4:	lsr	x0, x0, #35
     ca8:	cmp	w0, w1
     cac:	b.lt	d80 <d_call_offset+0x148>  // b.tstop
     cb0:	add	w1, w1, w1, lsl #2
     cb4:	str	x3, [x2, #24]
     cb8:	mov	x6, x3
     cbc:	add	x3, x3, #0x1
     cc0:	add	w1, w5, w1, lsl #1
     cc4:	ldurb	w5, [x3, #-1]
     cc8:	sub	w1, w1, #0x30
     ccc:	sub	w4, w5, #0x30
     cd0:	sub	w0, w8, w4
     cd4:	and	w4, w4, #0xff
     cd8:	cmp	w4, #0x9
     cdc:	b.ls	ca0 <d_call_offset+0x68>  // b.plast
     ce0:	cmp	w5, #0x5f
     ce4:	b.ne	d80 <d_call_offset+0x148>  // b.any
     ce8:	add	x4, x6, #0x1
     cec:	str	x4, [x2, #24]
     cf0:	ldrb	w0, [x6, #1]
     cf4:	cmp	w0, #0x6e
     cf8:	b.ne	d08 <d_call_offset+0xd0>  // b.any
     cfc:	add	x4, x6, #0x2
     d00:	str	x4, [x2, #24]
     d04:	ldrb	w0, [x6, #2]
     d08:	sub	w1, w0, #0x30
     d0c:	and	w1, w1, #0xff
     d10:	cmp	w1, #0x9
     d14:	b.hi	d68 <d_call_offset+0x130>  // b.pmore
     d18:	mov	w7, #0xcccd                	// #52429
     d1c:	mov	w1, #0x0                   	// #0
     d20:	mov	w6, #0x7fffffff            	// #2147483647
     d24:	movk	w7, #0xcccc, lsl #16
     d28:	b	d3c <d_call_offset+0x104>
     d2c:	umull	x3, w3, w7
     d30:	lsr	x3, x3, #35
     d34:	cmp	w3, w1
     d38:	b.lt	d80 <d_call_offset+0x148>  // b.tstop
     d3c:	add	x4, x4, #0x1
     d40:	add	w1, w1, w1, lsl #2
     d44:	str	x4, [x2, #24]
     d48:	add	w1, w0, w1, lsl #1
     d4c:	ldrb	w0, [x4]
     d50:	sub	w1, w1, #0x30
     d54:	sub	w5, w0, #0x30
     d58:	sub	w3, w6, w5
     d5c:	and	w5, w5, #0xff
     d60:	cmp	w5, #0x9
     d64:	b.ls	d2c <d_call_offset+0xf4>  // b.plast
     d68:	cmp	w0, #0x5f
     d6c:	b.ne	d80 <d_call_offset+0x148>  // b.any
     d70:	add	x4, x4, #0x1
     d74:	mov	w0, #0x1                   	// #1
     d78:	str	x4, [x2, #24]
     d7c:	ret
     d80:	mov	w0, #0x0                   	// #0
     d84:	ret
     d88:	add	x0, x6, #0x1
     d8c:	str	x0, [x2, #24]
     d90:	ldrb	w5, [x6, #1]
     d94:	mov	x6, x0
     d98:	b	c78 <d_call_offset+0x40>
     d9c:	ldr	x4, [x2, #24]
     da0:	ldrb	w0, [x4]
     da4:	cmp	w0, #0x6e
     da8:	b.ne	dbc <d_call_offset+0x184>  // b.any
     dac:	add	x1, x4, #0x1
     db0:	str	x1, [x2, #24]
     db4:	ldrb	w0, [x4, #1]
     db8:	mov	x4, x1
     dbc:	sub	w1, w0, #0x30
     dc0:	and	w1, w1, #0xff
     dc4:	cmp	w1, #0x9
     dc8:	b.hi	d68 <d_call_offset+0x130>  // b.pmore
     dcc:	mov	w7, #0xcccd                	// #52429
     dd0:	add	x5, x4, #0x1
     dd4:	mov	w1, #0x0                   	// #0
     dd8:	mov	w8, #0x7fffffff            	// #2147483647
     ddc:	movk	w7, #0xcccc, lsl #16
     de0:	b	df4 <d_call_offset+0x1bc>
     de4:	umull	x3, w3, w7
     de8:	lsr	x3, x3, #35
     dec:	cmp	w3, w1
     df0:	b.lt	d80 <d_call_offset+0x148>  // b.tstop
     df4:	add	w1, w1, w1, lsl #2
     df8:	str	x5, [x2, #24]
     dfc:	mov	x4, x5
     e00:	add	x5, x5, #0x1
     e04:	add	w1, w0, w1, lsl #1
     e08:	ldurb	w0, [x5, #-1]
     e0c:	sub	w1, w1, #0x30
     e10:	sub	w6, w0, #0x30
     e14:	sub	w3, w8, w6
     e18:	and	w6, w6, #0xff
     e1c:	cmp	w6, #0x9
     e20:	b.ls	de4 <d_call_offset+0x1ac>  // b.plast
     e24:	b	d68 <d_call_offset+0x130>

0000000000000e28 <d_type>:
     e28:	stp	x29, x30, [sp, #-80]!
     e2c:	mov	w2, #0x56                  	// #86
     e30:	mov	w1, #0x4b                  	// #75
     e34:	mov	x29, sp
     e38:	ldr	x3, [x0, #24]
     e3c:	stp	x19, x20, [sp, #16]
     e40:	mov	x19, x0
     e44:	ldrb	w0, [x3]
     e48:	cmp	w0, #0x72
     e4c:	ccmp	w0, w2, #0x4, ne  // ne = any
     e50:	ccmp	w0, w1, #0x4, ne  // ne = any
     e54:	b.eq	e9c <d_type+0x74>  // b.none
     e58:	cmp	w0, #0x44
     e5c:	b.eq	f20 <d_type+0xf8>  // b.none
     e60:	sub	w2, w0, #0x30
     e64:	cmp	w2, #0x4a
     e68:	b.hi	e88 <d_type+0x60>  // b.pmore
     e6c:	adrp	x1, 0 <d_make_comp>
     e70:	add	x1, x1, #0x0
     e74:	ldrh	w1, [x1, w2, uxtw #1]
     e78:	adr	x2, e84 <d_type+0x5c>
     e7c:	add	x1, x2, w1, sxth #2
     e80:	br	x1
     e84:	ldp	x21, x22, [sp, #32]
     e88:	mov	x20, #0x0                   	// #0
     e8c:	mov	x0, x20
     e90:	ldp	x19, x20, [sp, #16]
     e94:	ldp	x29, x30, [sp], #80
     e98:	ret
     e9c:	add	x1, sp, #0x48
     ea0:	mov	x0, x19
     ea4:	mov	w2, #0x0                   	// #0
     ea8:	stp	x21, x22, [sp, #32]
     eac:	bl	3500 <d_cv_qualifiers>
     eb0:	mov	x21, x0
     eb4:	cbz	x0, e84 <d_type+0x5c>
     eb8:	ldr	x0, [x19, #24]
     ebc:	ldrb	w0, [x0]
     ec0:	cmp	w0, #0x46
     ec4:	mov	x0, x19
     ec8:	b.eq	fec <d_type+0x1c4>  // b.none
     ecc:	bl	e28 <d_type>
     ed0:	str	x0, [x21]
     ed4:	cbz	x0, e84 <d_type+0x5c>
     ed8:	ldr	w1, [x0]
     edc:	ldr	x20, [sp, #72]
     ee0:	sub	w1, w1, #0x1f
     ee4:	cmp	w1, #0x1
     ee8:	b.ls	fd0 <d_type+0x1a8>  // b.plast
     eec:	cbz	x20, e84 <d_type+0x5c>
     ef0:	ldp	w0, w1, [x19, #56]
     ef4:	cmp	w0, w1
     ef8:	b.ge	e84 <d_type+0x5c>  // b.tcont
     efc:	ldr	x2, [x19, #48]
     f00:	add	w1, w0, #0x1
     f04:	ldp	x21, x22, [sp, #32]
     f08:	str	x20, [x2, w0, sxtw #3]
     f0c:	mov	x0, x20
     f10:	str	w1, [x19, #56]
     f14:	ldp	x19, x20, [sp, #16]
     f18:	ldp	x29, x30, [sp], #80
     f1c:	ret
     f20:	ldrb	w0, [x3, #1]
     f24:	and	w1, w0, #0xffffffdf
     f28:	sub	w0, w0, #0x77
     f2c:	cmp	w1, #0x4f
     f30:	and	w0, w0, #0xff
     f34:	ccmp	w0, #0x1, #0x0, ne  // ne = any
     f38:	b.ls	e9c <d_type+0x74>  // b.plast
     f3c:	add	x0, x3, #0x1
     f40:	str	x0, [x19, #24]
     f44:	ldrb	w0, [x3, #1]
     f48:	cbz	w0, e88 <d_type+0x60>
     f4c:	add	x0, x3, #0x2
     f50:	str	x0, [x19, #24]
     f54:	ldrb	w0, [x3, #1]
     f58:	cmp	w0, #0x68
     f5c:	b.eq	1a5c <d_type+0xc34>  // b.none
     f60:	b.hi	1474 <d_type+0x64c>  // b.pmore
     f64:	cmp	w0, #0x63
     f68:	b.eq	1a1c <d_type+0xbf4>  // b.none
     f6c:	b.ls	1424 <d_type+0x5fc>  // b.plast
     f70:	cmp	w0, #0x65
     f74:	b.eq	19cc <d_type+0xba4>  // b.none
     f78:	cmp	w0, #0x66
     f7c:	b.ne	13e4 <d_type+0x5bc>  // b.any
     f80:	ldp	w0, w1, [x19, #40]
     f84:	cmp	w0, w1
     f88:	b.ge	1c0c <d_type+0xde4>  // b.tcont
     f8c:	mov	w1, #0x18                  	// #24
     f90:	add	w5, w0, #0x1
     f94:	ldr	x3, [x19, #32]
     f98:	smull	x0, w0, w1
     f9c:	ldr	w2, [x19, #72]
     fa0:	adrp	x1, 0 <d_make_comp>
     fa4:	add	x1, x1, #0x0
     fa8:	add	x20, x3, x0
     fac:	add	x1, x1, #0x4c8
     fb0:	mov	w4, #0x27                  	// #39
     fb4:	str	wzr, [x20, #4]
     fb8:	add	w2, w2, #0x9
     fbc:	str	w5, [x19, #40]
     fc0:	str	w4, [x3, x0]
     fc4:	str	x1, [x20, #8]
     fc8:	str	w2, [x19, #72]
     fcc:	b	e8c <d_type+0x64>
     fd0:	ldr	x1, [x0, #8]
     fd4:	str	x20, [x0, #8]
     fd8:	ldr	x0, [x21]
     fdc:	str	x0, [sp, #72]
     fe0:	str	x1, [x21]
     fe4:	ldr	x20, [sp, #72]
     fe8:	b	eec <d_type+0xc4>
     fec:	bl	2430 <d_function_type>
     ff0:	str	x0, [x21]
     ff4:	b	ed4 <d_type+0xac>
     ff8:	ldp	w2, w4, [x19, #40]
     ffc:	sub	w0, w0, #0x61
    1000:	adrp	x1, 0 <d_make_comp>
    1004:	add	x1, x1, #0x0
    1008:	sbfiz	x0, x0, #5, #32
    100c:	add	x1, x1, #0x188
    1010:	add	x0, x1, x0
    1014:	cmp	w2, w4
    1018:	b.ge	1c0c <d_type+0xde4>  // b.tcont
    101c:	mov	w1, #0x18                  	// #24
    1020:	add	w6, w2, #0x1
    1024:	ldr	x4, [x19, #32]
    1028:	smull	x2, w2, w1
    102c:	ldr	w7, [x0, #8]
    1030:	mov	w5, #0x27                  	// #39
    1034:	add	x20, x4, x2
    1038:	ldr	w1, [x19, #72]
    103c:	add	x3, x3, #0x1
    1040:	add	w1, w1, w7
    1044:	str	wzr, [x20, #4]
    1048:	str	w6, [x19, #40]
    104c:	str	w5, [x4, x2]
    1050:	str	x0, [x20, #8]
    1054:	str	x3, [x19, #24]
    1058:	str	w1, [x19, #72]
    105c:	b	e8c <d_type+0x64>
    1060:	add	x3, x3, #0x1
    1064:	str	x3, [x19, #24]
    1068:	mov	x0, x19
    106c:	bl	488 <d_source_name>
    1070:	str	x0, [sp, #72]
    1074:	ldr	x1, [x19, #24]
    1078:	mov	x20, x0
    107c:	ldrb	w0, [x1]
    1080:	cmp	w0, #0x49
    1084:	b.eq	184c <d_type+0xa24>  // b.none
    1088:	mov	x0, x19
    108c:	bl	e28 <d_type>
    1090:	ldr	x3, [sp, #72]
    1094:	mov	x2, x0
    1098:	mov	w1, #0x21                  	// #33
    109c:	mov	x0, x19
    10a0:	bl	0 <d_make_comp>
    10a4:	mov	x20, x0
    10a8:	str	x0, [sp, #72]
    10ac:	nop
    10b0:	cbz	x20, e88 <d_type+0x60>
    10b4:	ldp	w0, w1, [x19, #56]
    10b8:	cmp	w0, w1
    10bc:	b.ge	e88 <d_type+0x60>  // b.tcont
    10c0:	ldr	x2, [x19, #48]
    10c4:	add	w1, w0, #0x1
    10c8:	str	x20, [x2, w0, sxtw #3]
    10cc:	str	w1, [x19, #56]
    10d0:	ldr	x20, [sp, #72]
    10d4:	mov	x0, x20
    10d8:	ldp	x19, x20, [sp, #16]
    10dc:	ldp	x29, x30, [sp], #80
    10e0:	ret
    10e4:	mov	x0, x19
    10e8:	stp	x21, x22, [sp, #32]
    10ec:	bl	b40 <d_template_param>
    10f0:	ldr	x21, [x19, #24]
    10f4:	str	x0, [sp, #72]
    10f8:	mov	x20, x0
    10fc:	ldrb	w0, [x21]
    1100:	cmp	w0, #0x49
    1104:	b.eq	17ac <d_type+0x984>  // b.none
    1108:	ldp	x21, x22, [sp, #32]
    110c:	b	10b0 <d_type+0x288>
    1110:	ldrb	w0, [x3, #1]
    1114:	sub	w1, w0, #0x30
    1118:	cmp	w0, #0x5f
    111c:	and	w1, w1, #0xff
    1120:	ccmp	w1, #0x9, #0x0, ne  // ne = any
    1124:	b.ls	1138 <d_type+0x310>  // b.plast
    1128:	sub	w0, w0, #0x41
    112c:	and	w0, w0, #0xff
    1130:	cmp	w0, #0x19
    1134:	b.hi	1828 <d_type+0xa00>  // b.pmore
    1138:	mov	w1, #0x0                   	// #0
    113c:	mov	x0, x19
    1140:	bl	650 <d_substitution>
    1144:	str	x0, [sp, #72]
    1148:	ldr	x1, [x19, #24]
    114c:	mov	x20, x0
    1150:	ldrb	w0, [x1]
    1154:	cmp	w0, #0x49
    1158:	b.ne	e8c <d_type+0x64>  // b.any
    115c:	add	x1, x1, #0x1
    1160:	str	x1, [x19, #24]
    1164:	mov	x0, x19
    1168:	bl	37f8 <d_template_args_1>
    116c:	mov	x3, x0
    1170:	mov	x2, x20
    1174:	mov	x0, x19
    1178:	mov	w1, #0x4                   	// #4
    117c:	bl	0 <d_make_comp>
    1180:	mov	x20, x0
    1184:	str	x0, [sp, #72]
    1188:	b	10b0 <d_type+0x288>
    118c:	add	x3, x3, #0x1
    1190:	str	x3, [x19, #24]
    1194:	mov	x0, x19
    1198:	bl	e28 <d_type>
    119c:	mov	x2, x0
    11a0:	mov	x3, #0x0                   	// #0
    11a4:	mov	x0, x19
    11a8:	mov	w1, #0x23                  	// #35
    11ac:	bl	0 <d_make_comp>
    11b0:	mov	x20, x0
    11b4:	str	x0, [sp, #72]
    11b8:	b	10b0 <d_type+0x288>
    11bc:	add	x3, x3, #0x1
    11c0:	str	x3, [x19, #24]
    11c4:	mov	x0, x19
    11c8:	bl	e28 <d_type>
    11cc:	mov	x2, x0
    11d0:	mov	x3, #0x0                   	// #0
    11d4:	mov	x0, x19
    11d8:	mov	w1, #0x22                  	// #34
    11dc:	bl	0 <d_make_comp>
    11e0:	mov	x20, x0
    11e4:	str	x0, [sp, #72]
    11e8:	b	10b0 <d_type+0x288>
    11ec:	add	x3, x3, #0x1
    11f0:	str	x3, [x19, #24]
    11f4:	mov	x0, x19
    11f8:	bl	e28 <d_type>
    11fc:	mov	x2, x0
    1200:	mov	x3, #0x0                   	// #0
    1204:	mov	x0, x19
    1208:	mov	w1, #0x24                  	// #36
    120c:	bl	0 <d_make_comp>
    1210:	mov	x20, x0
    1214:	str	x0, [sp, #72]
    1218:	b	10b0 <d_type+0x288>
    121c:	add	x3, x3, #0x1
    1220:	str	x3, [x19, #24]
    1224:	mov	x0, x19
    1228:	bl	e28 <d_type>
    122c:	mov	x2, x0
    1230:	mov	x3, #0x0                   	// #0
    1234:	mov	x0, x19
    1238:	mov	w1, #0x26                  	// #38
    123c:	bl	0 <d_make_comp>
    1240:	mov	x20, x0
    1244:	str	x0, [sp, #72]
    1248:	b	10b0 <d_type+0x288>
    124c:	mov	x0, x19
    1250:	bl	2430 <d_function_type>
    1254:	mov	x20, x0
    1258:	str	x0, [sp, #72]
    125c:	b	10b0 <d_type+0x288>
    1260:	add	x3, x3, #0x1
    1264:	str	x3, [x19, #24]
    1268:	mov	x0, x19
    126c:	bl	488 <d_source_name>
    1270:	mov	x2, x0
    1274:	mov	x3, #0x0                   	// #0
    1278:	mov	x0, x19
    127c:	mov	w1, #0x28                  	// #40
    1280:	bl	0 <d_make_comp>
    1284:	mov	x20, x0
    1288:	str	x0, [sp, #72]
    128c:	b	10b0 <d_type+0x288>
    1290:	add	x3, x3, #0x1
    1294:	str	x3, [x19, #24]
    1298:	mov	x0, x19
    129c:	bl	e28 <d_type>
    12a0:	mov	x2, x0
    12a4:	mov	x3, #0x0                   	// #0
    12a8:	mov	x0, x19
    12ac:	mov	w1, #0x25                  	// #37
    12b0:	bl	0 <d_make_comp>
    12b4:	mov	x20, x0
    12b8:	str	x0, [sp, #72]
    12bc:	b	10b0 <d_type+0x288>
    12c0:	mov	x0, x19
    12c4:	bl	3990 <d_name>
    12c8:	mov	x20, x0
    12cc:	str	x0, [sp, #72]
    12d0:	b	10b0 <d_type+0x288>
    12d4:	add	x4, x3, #0x1
    12d8:	str	x4, [x19, #24]
    12dc:	ldrb	w0, [x3, #1]
    12e0:	cmp	w0, #0x5f
    12e4:	b.eq	1820 <d_type+0x9f8>  // b.none
    12e8:	sub	w0, w0, #0x30
    12ec:	and	w0, w0, #0xff
    12f0:	cmp	w0, #0x9
    12f4:	b.hi	1878 <d_type+0xa50>  // b.pmore
    12f8:	mov	x1, x4
    12fc:	nop
    1300:	mov	x3, x1
    1304:	add	x1, x1, #0x1
    1308:	str	x1, [x19, #24]
    130c:	ldrb	w0, [x1]
    1310:	sub	w0, w0, #0x30
    1314:	and	w0, w0, #0xff
    1318:	cmp	w0, #0x9
    131c:	b.ls	1300 <d_type+0x4d8>  // b.plast
    1320:	ldp	w0, w5, [x19, #40]
    1324:	sub	x2, x1, x4
    1328:	cmp	w0, w5
    132c:	b.ge	e88 <d_type+0x60>  // b.tcont
    1330:	mov	w7, #0x18                  	// #24
    1334:	add	w6, w0, #0x1
    1338:	ldr	x5, [x19, #32]
    133c:	smull	x0, w0, w7
    1340:	cmp	w2, #0x0
    1344:	add	x20, x5, x0
    1348:	str	wzr, [x20, #4]
    134c:	str	w6, [x19, #40]
    1350:	b.le	e88 <d_type+0x60>
    1354:	str	xzr, [x5, x0]
    1358:	str	x4, [x20, #8]
    135c:	str	w2, [x20, #16]
    1360:	ldrb	w0, [x3, #1]
    1364:	mov	x4, x1
    1368:	cmp	w0, #0x5f
    136c:	b.ne	e88 <d_type+0x60>  // b.any
    1370:	add	x4, x4, #0x1
    1374:	str	x4, [x19, #24]
    1378:	mov	x0, x19
    137c:	bl	e28 <d_type>
    1380:	mov	x3, x0
    1384:	mov	x2, x20
    1388:	mov	x0, x19
    138c:	mov	w1, #0x2a                  	// #42
    1390:	bl	0 <d_make_comp>
    1394:	mov	x20, x0
    1398:	str	x0, [sp, #72]
    139c:	b	10b0 <d_type+0x288>
    13a0:	add	x3, x3, #0x1
    13a4:	str	x3, [x19, #24]
    13a8:	mov	x0, x19
    13ac:	bl	e28 <d_type>
    13b0:	mov	x20, x0
    13b4:	cbz	x0, e88 <d_type+0x60>
    13b8:	mov	x0, x19
    13bc:	bl	e28 <d_type>
    13c0:	mov	x3, x0
    13c4:	cbz	x0, e88 <d_type+0x60>
    13c8:	mov	x2, x20
    13cc:	mov	x0, x19
    13d0:	mov	w1, #0x2b                  	// #43
    13d4:	bl	0 <d_make_comp>
    13d8:	mov	x20, x0
    13dc:	str	x0, [sp, #72]
    13e0:	b	10b0 <d_type+0x288>
    13e4:	cmp	w0, #0x64
    13e8:	b.ne	e88 <d_type+0x60>  // b.any
    13ec:	ldp	w0, w1, [x19, #40]
    13f0:	cmp	w0, w1
    13f4:	b.ge	1c0c <d_type+0xde4>  // b.tcont
    13f8:	mov	w1, #0x18                  	// #24
    13fc:	add	w5, w0, #0x1
    1400:	ldr	x3, [x19, #32]
    1404:	smull	x0, w0, w1
    1408:	adrp	x1, 0 <d_make_comp>
    140c:	add	x1, x1, #0x0
    1410:	ldr	w2, [x19, #72]
    1414:	add	x1, x1, #0x4e8
    1418:	add	x20, x3, x0
    141c:	mov	w4, #0x27                  	// #39
    1420:	b	fb4 <d_type+0x18c>
    1424:	cmp	w0, #0x54
    1428:	b.eq	15a0 <d_type+0x778>  // b.none
    142c:	cmp	w0, #0x61
    1430:	b.ne	1634 <d_type+0x80c>  // b.any
    1434:	ldp	w0, w1, [x19, #40]
    1438:	cmp	w0, w1
    143c:	b.ge	e88 <d_type+0x60>  // b.tcont
    1440:	mov	w3, #0x18                  	// #24
    1444:	add	w1, w0, #0x1
    1448:	ldr	x2, [x19, #32]
    144c:	smull	x0, w0, w3
    1450:	str	w1, [x19, #40]
    1454:	mov	w3, #0x4                   	// #4
    1458:	add	x20, x2, x0
    145c:	adrp	x1, 0 <d_make_comp>
    1460:	add	x1, x1, #0x0
    1464:	str	xzr, [x2, x0]
    1468:	str	x1, [x20, #8]
    146c:	str	w3, [x20, #16]
    1470:	b	e8c <d_type+0x64>
    1474:	cmp	w0, #0x73
    1478:	b.eq	18f4 <d_type+0xacc>  // b.none
    147c:	b.ls	15fc <d_type+0x7d4>  // b.plast
    1480:	cmp	w0, #0x75
    1484:	b.eq	197c <d_type+0xb54>  // b.none
    1488:	cmp	w0, #0x76
    148c:	b.ne	1598 <d_type+0x770>  // b.any
    1490:	ldrb	w0, [x3, #2]
    1494:	cmp	w0, #0x5f
    1498:	b.eq	1b90 <d_type+0xd68>  // b.none
    149c:	ldp	w0, w1, [x19, #40]
    14a0:	cmp	w0, w1
    14a4:	b.ge	e88 <d_type+0x60>  // b.tcont
    14a8:	mov	w2, #0x18                  	// #24
    14ac:	add	w4, w0, #0x1
    14b0:	ldr	x1, [x19, #32]
    14b4:	smull	x0, w0, w2
    14b8:	mov	w2, #0x42                  	// #66
    14bc:	add	x20, x1, x0
    14c0:	str	wzr, [x20, #4]
    14c4:	str	w4, [x19, #40]
    14c8:	str	w2, [x1, x0]
    14cc:	ldrb	w0, [x3, #2]
    14d0:	cmp	w0, #0x6e
    14d4:	b.eq	1bc4 <d_type+0xd9c>  // b.none
    14d8:	sub	w1, w0, #0x30
    14dc:	and	w1, w1, #0xff
    14e0:	cmp	w1, #0x9
    14e4:	b.hi	1be8 <d_type+0xdc0>  // b.pmore
    14e8:	mov	w2, #0x0                   	// #0
    14ec:	mov	w6, #0xcccd                	// #52429
    14f0:	mov	w5, w0
    14f4:	mov	w7, #0x7fffffff            	// #2147483647
    14f8:	mov	w0, #0x0                   	// #0
    14fc:	movk	w6, #0xcccc, lsl #16
    1500:	ldr	x3, [x19, #24]
    1504:	b	1520 <d_type+0x6f8>
    1508:	sub	w1, w7, w1
    150c:	mov	w5, w4
    1510:	umull	x1, w1, w6
    1514:	lsr	x1, x1, #35
    1518:	cmp	w1, w0
    151c:	b.lt	1bbc <d_type+0xd94>  // b.tstop
    1520:	add	x3, x3, #0x1
    1524:	str	x3, [x19, #24]
    1528:	add	w0, w0, w0, lsl #2
    152c:	ldrb	w4, [x3]
    1530:	add	w0, w5, w0, lsl #1
    1534:	sub	w0, w0, #0x30
    1538:	sub	w1, w4, #0x30
    153c:	and	w5, w1, #0xff
    1540:	cmp	w5, #0x9
    1544:	b.ls	1508 <d_type+0x6e0>  // b.plast
    1548:	cbz	w2, 1550 <d_type+0x728>
    154c:	neg	w0, w0
    1550:	sxtw	x0, w0
    1554:	str	x0, [x20, #8]
    1558:	ldr	x0, [x19, #24]
    155c:	ldrb	w1, [x0]
    1560:	cmp	w1, #0x5f
    1564:	b.ne	e88 <d_type+0x60>  // b.any
    1568:	add	x0, x0, #0x1
    156c:	str	x0, [x19, #24]
    1570:	mov	x0, x19
    1574:	bl	e28 <d_type>
    1578:	mov	x3, x0
    157c:	mov	x2, x20
    1580:	mov	x0, x19
    1584:	mov	w1, #0x2d                  	// #45
    1588:	bl	0 <d_make_comp>
    158c:	mov	x20, x0
    1590:	str	x0, [sp, #72]
    1594:	b	10b0 <d_type+0x288>
    1598:	cmp	w0, #0x74
    159c:	b.ne	e88 <d_type+0x60>  // b.any
    15a0:	ldr	w20, [x19, #76]
    15a4:	mov	w0, #0x1                   	// #1
    15a8:	str	w0, [x19, #76]
    15ac:	mov	x0, x19
    15b0:	bl	2dd0 <d_expression_1>
    15b4:	str	w20, [x19, #76]
    15b8:	mov	x2, x0
    15bc:	mov	x3, #0x0                   	// #0
    15c0:	mov	x0, x19
    15c4:	mov	w1, #0x43                  	// #67
    15c8:	bl	0 <d_make_comp>
    15cc:	str	x0, [sp, #72]
    15d0:	mov	x20, x0
    15d4:	cbz	x0, e88 <d_type+0x60>
    15d8:	ldr	x0, [x19, #24]
    15dc:	ldrb	w1, [x0]
    15e0:	cbz	w1, e88 <d_type+0x60>
    15e4:	add	x1, x0, #0x1
    15e8:	str	x1, [x19, #24]
    15ec:	ldrb	w0, [x0]
    15f0:	cmp	w0, #0x45
    15f4:	b.ne	e88 <d_type+0x60>  // b.any
    15f8:	b	10b4 <d_type+0x28c>
    15fc:	cmp	w0, #0x6e
    1600:	b.eq	192c <d_type+0xb04>  // b.none
    1604:	cmp	w0, #0x70
    1608:	b.ne	1754 <d_type+0x92c>  // b.any
    160c:	mov	x0, x19
    1610:	bl	e28 <d_type>
    1614:	mov	x3, #0x0                   	// #0
    1618:	mov	x2, x0
    161c:	mov	w1, #0x4b                  	// #75
    1620:	mov	x0, x19
    1624:	bl	0 <d_make_comp>
    1628:	mov	x20, x0
    162c:	str	x0, [sp, #72]
    1630:	b	10b0 <d_type+0x288>
    1634:	cmp	w0, #0x46
    1638:	b.ne	e88 <d_type+0x60>  // b.any
    163c:	ldp	w0, w1, [x19, #40]
    1640:	cmp	w0, w1
    1644:	b.ge	1bf8 <d_type+0xdd0>  // b.tcont
    1648:	mov	w2, #0x18                  	// #24
    164c:	add	w4, w0, #0x1
    1650:	ldr	x1, [x19, #32]
    1654:	smull	x0, w0, w2
    1658:	mov	w2, #0x2c                  	// #44
    165c:	add	x20, x1, x0
    1660:	str	wzr, [x20, #4]
    1664:	str	w4, [x19, #40]
    1668:	str	x20, [sp, #72]
    166c:	str	w2, [x1, x0]
    1670:	ldrb	w0, [x3, #2]
    1674:	sub	w0, w0, #0x30
    1678:	and	w0, w0, #0xff
    167c:	cmp	w0, #0x9
    1680:	cset	w1, ls  // ls = plast
    1684:	strh	w1, [x20, #16]
    1688:	b.ls	1af4 <d_type+0xccc>  // b.plast
    168c:	mov	x0, x19
    1690:	bl	e28 <d_type>
    1694:	str	x0, [x20, #8]
    1698:	ldr	x20, [sp, #72]
    169c:	ldr	x0, [x20, #8]
    16a0:	cbz	x0, e88 <d_type+0x60>
    16a4:	ldr	x2, [x19, #24]
    16a8:	ldrb	w1, [x2]
    16ac:	cmp	w1, #0x6e
    16b0:	b.ne	16c4 <d_type+0x89c>  // b.any
    16b4:	add	x0, x2, #0x1
    16b8:	str	x0, [x19, #24]
    16bc:	ldrb	w1, [x2, #1]
    16c0:	mov	x2, x0
    16c4:	sub	w0, w1, #0x30
    16c8:	mov	w5, #0xcccd                	// #52429
    16cc:	and	w0, w0, #0xff
    16d0:	mov	w4, w1
    16d4:	cmp	w0, #0x9
    16d8:	mov	w1, #0x0                   	// #0
    16dc:	mov	w6, #0x7fffffff            	// #2147483647
    16e0:	movk	w5, #0xcccc, lsl #16
    16e4:	b.ls	1704 <d_type+0x8dc>  // b.plast
    16e8:	b	172c <d_type+0x904>
    16ec:	sub	w0, w6, w0
    16f0:	mov	w4, w3
    16f4:	umull	x0, w0, w5
    16f8:	lsr	x0, x0, #35
    16fc:	cmp	w0, w1
    1700:	b.lt	172c <d_type+0x904>  // b.tstop
    1704:	add	x2, x2, #0x1
    1708:	str	x2, [x19, #24]
    170c:	add	w1, w1, w1, lsl #2
    1710:	ldrb	w3, [x2]
    1714:	add	w1, w4, w1, lsl #1
    1718:	sub	w1, w1, #0x30
    171c:	sub	w0, w3, #0x30
    1720:	and	w4, w0, #0xff
    1724:	cmp	w4, #0x9
    1728:	b.ls	16ec <d_type+0x8c4>  // b.plast
    172c:	ldr	x1, [x19, #24]
    1730:	ldrb	w0, [x1]
    1734:	cbz	w0, 1744 <d_type+0x91c>
    1738:	add	x0, x1, #0x1
    173c:	str	x0, [x19, #24]
    1740:	ldrb	w0, [x1]
    1744:	cmp	w0, #0x73
    1748:	cset	w0, eq  // eq = none
    174c:	strh	w0, [x20, #18]
    1750:	b	e8c <d_type+0x64>
    1754:	cmp	w0, #0x69
    1758:	b.ne	e88 <d_type+0x60>  // b.any
    175c:	ldp	w0, w1, [x19, #40]
    1760:	cmp	w0, w1
    1764:	b.ge	1c0c <d_type+0xde4>  // b.tcont
    1768:	mov	w1, #0x18                  	// #24
    176c:	add	w5, w0, #0x1
    1770:	ldr	x3, [x19, #32]
    1774:	smull	x0, w0, w1
    1778:	ldr	w2, [x19, #72]
    177c:	adrp	x1, 0 <d_make_comp>
    1780:	add	x1, x1, #0x0
    1784:	add	x20, x3, x0
    1788:	add	x1, x1, #0x588
    178c:	mov	w4, #0x27                  	// #39
    1790:	str	wzr, [x20, #4]
    1794:	add	w2, w2, #0x8
    1798:	str	w5, [x19, #40]
    179c:	str	w4, [x3, x0]
    17a0:	str	x1, [x20, #8]
    17a4:	str	w2, [x19, #72]
    17a8:	b	e8c <d_type+0x64>
    17ac:	ldr	w0, [x19, #80]
    17b0:	cbnz	w0, 18a4 <d_type+0xa7c>
    17b4:	cbz	x20, e84 <d_type+0x5c>
    17b8:	ldp	w0, w1, [x19, #56]
    17bc:	cmp	w0, w1
    17c0:	b.ge	e84 <d_type+0x5c>  // b.tcont
    17c4:	ldr	x2, [x19, #48]
    17c8:	add	w1, w0, #0x1
    17cc:	mov	x3, #0x0                   	// #0
    17d0:	str	x20, [x2, w0, sxtw #3]
    17d4:	str	w1, [x19, #56]
    17d8:	ldrb	w0, [x21]
    17dc:	sub	w0, w0, #0x49
    17e0:	and	w0, w0, #0xff
    17e4:	cmp	w0, #0x1
    17e8:	b.hi	1800 <d_type+0x9d8>  // b.pmore
    17ec:	add	x21, x21, #0x1
    17f0:	str	x21, [x19, #24]
    17f4:	mov	x0, x19
    17f8:	bl	37f8 <d_template_args_1>
    17fc:	mov	x3, x0
    1800:	mov	x2, x20
    1804:	mov	x0, x19
    1808:	mov	w1, #0x4                   	// #4
    180c:	bl	0 <d_make_comp>
    1810:	mov	x20, x0
    1814:	str	x0, [sp, #72]
    1818:	ldp	x21, x22, [sp, #32]
    181c:	b	10b0 <d_type+0x288>
    1820:	mov	x20, #0x0                   	// #0
    1824:	b	1370 <d_type+0x548>
    1828:	mov	x0, x19
    182c:	bl	3990 <d_name>
    1830:	str	x0, [sp, #72]
    1834:	mov	x20, x0
    1838:	cbz	x0, e88 <d_type+0x60>
    183c:	ldr	w0, [x0]
    1840:	cmp	w0, #0x18
    1844:	b.ne	10b4 <d_type+0x28c>  // b.any
    1848:	b	e8c <d_type+0x64>
    184c:	add	x1, x1, #0x1
    1850:	str	x1, [x19, #24]
    1854:	mov	x0, x19
    1858:	bl	37f8 <d_template_args_1>
    185c:	mov	x3, x0
    1860:	mov	x2, x20
    1864:	mov	x0, x19
    1868:	mov	w1, #0x4                   	// #4
    186c:	bl	0 <d_make_comp>
    1870:	str	x0, [sp, #72]
    1874:	b	1088 <d_type+0x260>
    1878:	ldr	w20, [x19, #76]
    187c:	mov	w0, #0x1                   	// #1
    1880:	str	w0, [x19, #76]
    1884:	mov	x0, x19
    1888:	bl	2dd0 <d_expression_1>
    188c:	str	w20, [x19, #76]
    1890:	mov	x20, x0
    1894:	cbz	x0, e88 <d_type+0x60>
    1898:	ldr	x1, [x19, #24]
    189c:	ldrb	w0, [x1]
    18a0:	b	1364 <d_type+0x53c>
    18a4:	ldr	w22, [x19, #56]
    18a8:	add	x0, x21, #0x1
    18ac:	ldr	w20, [x19, #72]
    18b0:	str	x23, [sp, #48]
    18b4:	str	x0, [x19, #24]
    18b8:	mov	x0, x19
    18bc:	ldr	w23, [x19, #40]
    18c0:	bl	37f8 <d_template_args_1>
    18c4:	ldr	x1, [x19, #24]
    18c8:	ldrb	w1, [x1]
    18cc:	cmp	w1, #0x49
    18d0:	b.eq	1aac <d_type+0xc84>  // b.none
    18d4:	str	x21, [x19, #24]
    18d8:	str	w23, [x19, #40]
    18dc:	str	w22, [x19, #56]
    18e0:	str	w20, [x19, #72]
    18e4:	ldp	x21, x22, [sp, #32]
    18e8:	ldr	x23, [sp, #48]
    18ec:	ldr	x20, [sp, #72]
    18f0:	b	10b0 <d_type+0x288>
    18f4:	ldp	w0, w1, [x19, #40]
    18f8:	cmp	w0, w1
    18fc:	b.ge	1c0c <d_type+0xde4>  // b.tcont
    1900:	mov	w1, #0x18                  	// #24
    1904:	add	w5, w0, #0x1
    1908:	ldr	x3, [x19, #32]
    190c:	smull	x0, w0, w1
    1910:	adrp	x1, 0 <d_make_comp>
    1914:	add	x1, x1, #0x0
    1918:	ldr	w2, [x19, #72]
    191c:	add	x1, x1, #0x568
    1920:	add	x20, x3, x0
    1924:	mov	w4, #0x27                  	// #39
    1928:	b	1790 <d_type+0x968>
    192c:	ldp	w0, w1, [x19, #40]
    1930:	cmp	w0, w1
    1934:	b.ge	1c0c <d_type+0xde4>  // b.tcont
    1938:	mov	w1, #0x18                  	// #24
    193c:	add	w5, w0, #0x1
    1940:	ldr	x3, [x19, #32]
    1944:	smull	x0, w0, w1
    1948:	ldr	w2, [x19, #72]
    194c:	mov	w4, #0x27                  	// #39
    1950:	add	x20, x3, x0
    1954:	adrp	x1, 0 <d_make_comp>
    1958:	add	x1, x1, #0x0
    195c:	add	w2, w2, #0x11
    1960:	add	x1, x1, #0x5a8
    1964:	str	wzr, [x20, #4]
    1968:	str	w5, [x19, #40]
    196c:	str	w4, [x3, x0]
    1970:	str	x1, [x20, #8]
    1974:	str	w2, [x19, #72]
    1978:	b	e8c <d_type+0x64>
    197c:	ldp	w0, w1, [x19, #40]
    1980:	cmp	w0, w1
    1984:	b.ge	1c0c <d_type+0xde4>  // b.tcont
    1988:	mov	w1, #0x18                  	// #24
    198c:	add	w5, w0, #0x1
    1990:	ldr	x3, [x19, #32]
    1994:	smull	x0, w0, w1
    1998:	ldr	w2, [x19, #72]
    199c:	mov	w4, #0x27                  	// #39
    19a0:	add	x20, x3, x0
    19a4:	adrp	x1, 0 <d_make_comp>
    19a8:	add	x1, x1, #0x0
    19ac:	add	w2, w2, #0x7
    19b0:	add	x1, x1, #0x548
    19b4:	str	wzr, [x20, #4]
    19b8:	str	w5, [x19, #40]
    19bc:	str	w4, [x3, x0]
    19c0:	str	x1, [x20, #8]
    19c4:	str	w2, [x19, #72]
    19c8:	b	e8c <d_type+0x64>
    19cc:	ldp	w0, w1, [x19, #40]
    19d0:	cmp	w0, w1
    19d4:	b.ge	1c0c <d_type+0xde4>  // b.tcont
    19d8:	mov	w1, #0x18                  	// #24
    19dc:	add	w5, w0, #0x1
    19e0:	ldr	x3, [x19, #32]
    19e4:	smull	x0, w0, w1
    19e8:	ldr	w2, [x19, #72]
    19ec:	mov	w4, #0x27                  	// #39
    19f0:	add	x20, x3, x0
    19f4:	adrp	x1, 0 <d_make_comp>
    19f8:	add	x1, x1, #0x0
    19fc:	add	w2, w2, #0xa
    1a00:	add	x1, x1, #0x508
    1a04:	str	wzr, [x20, #4]
    1a08:	str	w5, [x19, #40]
    1a0c:	str	w4, [x3, x0]
    1a10:	str	x1, [x20, #8]
    1a14:	str	w2, [x19, #72]
    1a18:	b	e8c <d_type+0x64>
    1a1c:	ldp	w0, w1, [x19, #40]
    1a20:	cmp	w0, w1
    1a24:	b.ge	e88 <d_type+0x60>  // b.tcont
    1a28:	mov	w3, #0x18                  	// #24
    1a2c:	add	w1, w0, #0x1
    1a30:	ldr	x2, [x19, #32]
    1a34:	smull	x0, w0, w3
    1a38:	str	w1, [x19, #40]
    1a3c:	mov	w3, #0xe                   	// #14
    1a40:	add	x20, x2, x0
    1a44:	adrp	x1, 0 <d_make_comp>
    1a48:	add	x1, x1, #0x0
    1a4c:	str	xzr, [x2, x0]
    1a50:	str	x1, [x20, #8]
    1a54:	str	w3, [x20, #16]
    1a58:	b	e8c <d_type+0x64>
    1a5c:	ldp	w0, w1, [x19, #40]
    1a60:	cmp	w0, w1
    1a64:	b.ge	1c0c <d_type+0xde4>  // b.tcont
    1a68:	mov	w1, #0x18                  	// #24
    1a6c:	add	w5, w0, #0x1
    1a70:	ldr	x3, [x19, #32]
    1a74:	smull	x0, w0, w1
    1a78:	ldr	w2, [x19, #72]
    1a7c:	mov	w4, #0x27                  	// #39
    1a80:	add	x20, x3, x0
    1a84:	adrp	x1, 0 <d_make_comp>
    1a88:	add	x1, x1, #0x0
    1a8c:	add	w2, w2, #0x4
    1a90:	add	x1, x1, #0x528
    1a94:	str	wzr, [x20, #4]
    1a98:	str	w5, [x19, #40]
    1a9c:	str	w4, [x3, x0]
    1aa0:	str	x1, [x20, #8]
    1aa4:	str	w2, [x19, #72]
    1aa8:	b	e8c <d_type+0x64>
    1aac:	ldr	x2, [sp, #72]
    1ab0:	cbz	x2, 1b84 <d_type+0xd5c>
    1ab4:	ldp	w4, w1, [x19, #56]
    1ab8:	cmp	w4, w1
    1abc:	b.ge	1b84 <d_type+0xd5c>  // b.tcont
    1ac0:	ldr	x6, [x19, #48]
    1ac4:	add	w5, w4, #0x1
    1ac8:	mov	x3, x0
    1acc:	mov	w1, #0x4                   	// #4
    1ad0:	mov	x0, x19
    1ad4:	str	x2, [x6, w4, sxtw #3]
    1ad8:	str	w5, [x19, #56]
    1adc:	bl	0 <d_make_comp>
    1ae0:	mov	x20, x0
    1ae4:	str	x0, [sp, #72]
    1ae8:	ldp	x21, x22, [sp, #32]
    1aec:	ldr	x23, [sp, #48]
    1af0:	b	10b0 <d_type+0x288>
    1af4:	ldr	x0, [x19, #24]
    1af8:	ldrb	w1, [x0]
    1afc:	cmp	w1, #0x6e
    1b00:	b.ne	1b10 <d_type+0xce8>  // b.any
    1b04:	add	x1, x0, #0x1
    1b08:	str	x1, [x19, #24]
    1b0c:	ldrb	w1, [x0, #1]
    1b10:	sub	w0, w1, #0x30
    1b14:	and	w0, w0, #0xff
    1b18:	cmp	w0, #0x9
    1b1c:	b.hi	168c <d_type+0x864>  // b.pmore
    1b20:	ldr	x2, [x19, #24]
    1b24:	mov	w5, #0xcccd                	// #52429
    1b28:	mov	w3, w1
    1b2c:	mov	w6, #0x7fffffff            	// #2147483647
    1b30:	add	x2, x2, #0x1
    1b34:	mov	w1, #0x0                   	// #0
    1b38:	movk	w5, #0xcccc, lsl #16
    1b3c:	b	1b5c <d_type+0xd34>
    1b40:	sub	w0, w6, w0
    1b44:	mov	w3, w4
    1b48:	add	x2, x2, #0x1
    1b4c:	umull	x0, w0, w5
    1b50:	lsr	x0, x0, #35
    1b54:	cmp	w0, w1
    1b58:	b.lt	168c <d_type+0x864>  // b.tstop
    1b5c:	str	x2, [x19, #24]
    1b60:	add	w1, w1, w1, lsl #2
    1b64:	ldrb	w4, [x2]
    1b68:	add	w1, w3, w1, lsl #1
    1b6c:	sub	w1, w1, #0x30
    1b70:	sub	w0, w4, #0x30
    1b74:	and	w3, w0, #0xff
    1b78:	cmp	w3, #0x9
    1b7c:	b.ls	1b40 <d_type+0xd18>  // b.plast
    1b80:	b	168c <d_type+0x864>
    1b84:	ldp	x21, x22, [sp, #32]
    1b88:	ldr	x23, [sp, #48]
    1b8c:	b	e88 <d_type+0x60>
    1b90:	add	x3, x3, #0x3
    1b94:	ldr	w20, [x19, #76]
    1b98:	mov	w1, #0x1                   	// #1
    1b9c:	str	x3, [x19, #24]
    1ba0:	str	w1, [x19, #76]
    1ba4:	mov	x0, x19
    1ba8:	bl	2dd0 <d_expression_1>
    1bac:	str	w20, [x19, #76]
    1bb0:	mov	x20, x0
    1bb4:	cbnz	x0, 1558 <d_type+0x730>
    1bb8:	b	e88 <d_type+0x60>
    1bbc:	mov	w0, #0xffffffff            	// #-1
    1bc0:	b	1550 <d_type+0x728>
    1bc4:	add	x0, x3, #0x3
    1bc8:	str	x0, [x19, #24]
    1bcc:	ldrb	w0, [x3, #3]
    1bd0:	sub	w1, w0, #0x30
    1bd4:	and	w1, w1, #0xff
    1bd8:	cmp	w1, #0x9
    1bdc:	b.hi	1bf0 <d_type+0xdc8>  // b.pmore
    1be0:	mov	w2, #0x1                   	// #1
    1be4:	b	14ec <d_type+0x6c4>
    1be8:	mov	w0, #0x0                   	// #0
    1bec:	b	1550 <d_type+0x728>
    1bf0:	mov	w0, #0x0                   	// #0
    1bf4:	b	154c <d_type+0x724>
    1bf8:	mov	x0, #0x0                   	// #0
    1bfc:	stp	x21, x22, [sp, #32]
    1c00:	str	x23, [sp, #48]
    1c04:	str	wzr, [x0]
    1c08:	brk	#0x3e8
    1c0c:	mov	x0, #0x0                   	// #0
    1c10:	str	xzr, [sp, #72]
    1c14:	stp	x21, x22, [sp, #32]
    1c18:	str	x23, [sp, #48]
    1c1c:	ldr	x0, [x0, #8]
    1c20:	brk	#0x3e8
    1c24:	nop

0000000000001c28 <d_operator_name>:
    1c28:	stp	x29, x30, [sp, #-32]!
    1c2c:	mov	x29, sp
    1c30:	ldr	x1, [x0, #24]
    1c34:	stp	x19, x20, [sp, #16]
    1c38:	mov	x19, x0
    1c3c:	ldrb	w10, [x1]
    1c40:	cbz	w10, 1d04 <d_operator_name+0xdc>
    1c44:	add	x2, x1, #0x1
    1c48:	str	x2, [x0, #24]
    1c4c:	ldrb	w10, [x1, #1]
    1c50:	ldrb	w8, [x1]
    1c54:	cbnz	w10, 1d0c <d_operator_name+0xe4>
    1c58:	adrp	x5, 0 <d_make_comp>
    1c5c:	add	x5, x5, #0x0
    1c60:	add	x5, x5, #0x5c8
    1c64:	mov	w4, #0x43                  	// #67
    1c68:	mov	w2, #0x0                   	// #0
    1c6c:	mov	w7, #0x18                  	// #24
    1c70:	sub	w1, w4, w2
    1c74:	add	w1, w1, w1, lsr #31
    1c78:	add	w1, w2, w1, asr #1
    1c7c:	smull	x3, w1, w7
    1c80:	add	x9, x5, x3
    1c84:	ldr	x3, [x5, x3]
    1c88:	ldrb	w6, [x3]
    1c8c:	cmp	w6, w8
    1c90:	b.eq	1cb4 <d_operator_name+0x8c>  // b.none
    1c94:	b.ls	1cfc <d_operator_name+0xd4>  // b.plast
    1c98:	mov	w4, w1
    1c9c:	cmp	w2, w4
    1ca0:	b.ne	1c70 <d_operator_name+0x48>  // b.any
    1ca4:	mov	x0, #0x0                   	// #0
    1ca8:	ldp	x19, x20, [sp, #16]
    1cac:	ldp	x29, x30, [sp], #32
    1cb0:	ret
    1cb4:	ldrb	w3, [x3, #1]
    1cb8:	cmp	w3, w10
    1cbc:	b.ne	1c94 <d_operator_name+0x6c>  // b.any
    1cc0:	ldp	w0, w1, [x19, #40]
    1cc4:	cmp	w0, w1
    1cc8:	b.ge	1ca4 <d_operator_name+0x7c>  // b.tcont
    1ccc:	ldr	x2, [x19, #32]
    1cd0:	smull	x7, w0, w7
    1cd4:	add	w1, w0, #0x1
    1cd8:	mov	w3, #0x32                  	// #50
    1cdc:	add	x0, x2, x7
    1ce0:	str	wzr, [x0, #4]
    1ce4:	str	w1, [x19, #40]
    1ce8:	str	w3, [x2, x7]
    1cec:	str	x9, [x0, #8]
    1cf0:	ldp	x19, x20, [sp, #16]
    1cf4:	ldp	x29, x30, [sp], #32
    1cf8:	ret
    1cfc:	add	w2, w1, #0x1
    1d00:	b	1c9c <d_operator_name+0x74>
    1d04:	mov	w8, #0x0                   	// #0
    1d08:	b	1c58 <d_operator_name+0x30>
    1d0c:	add	x2, x1, #0x2
    1d10:	str	x2, [x0, #24]
    1d14:	cmp	w8, #0x76
    1d18:	ldrb	w10, [x1, #1]
    1d1c:	b.ne	1d78 <d_operator_name+0x150>  // b.any
    1d20:	sub	w11, w10, #0x30
    1d24:	and	w1, w11, #0xff
    1d28:	cmp	w1, #0x9
    1d2c:	b.hi	1c58 <d_operator_name+0x30>  // b.pmore
    1d30:	bl	488 <d_source_name>
    1d34:	mov	x2, x0
    1d38:	ldp	w1, w0, [x19, #40]
    1d3c:	cmp	w1, w0
    1d40:	b.ge	1ca4 <d_operator_name+0x7c>  // b.tcont
    1d44:	mov	w0, #0x18                  	// #24
    1d48:	add	w4, w1, #0x1
    1d4c:	ldr	x3, [x19, #32]
    1d50:	smull	x1, w1, w0
    1d54:	add	x0, x3, x1
    1d58:	str	wzr, [x0, #4]
    1d5c:	str	w4, [x19, #40]
    1d60:	cbz	x2, 1ca4 <d_operator_name+0x7c>
    1d64:	mov	x4, #0x33                  	// #51
    1d68:	str	x4, [x3, x1]
    1d6c:	str	w11, [x0, #8]
    1d70:	str	x2, [x0, #16]
    1d74:	b	1ca8 <d_operator_name+0x80>
    1d78:	cmp	w8, #0x63
    1d7c:	mov	w1, #0x76                  	// #118
    1d80:	ccmp	w10, w1, #0x0, eq  // eq = none
    1d84:	b.ne	1c58 <d_operator_name+0x30>  // b.any
    1d88:	ldp	w1, w20, [x0, #76]
    1d8c:	cmp	w1, #0x0
    1d90:	cset	w1, eq  // eq = none
    1d94:	str	w1, [x0, #80]
    1d98:	bl	e28 <d_type>
    1d9c:	mov	x2, x0
    1da0:	ldr	w1, [x19, #80]
    1da4:	mov	x3, #0x0                   	// #0
    1da8:	cbz	w1, 1dc8 <d_operator_name+0x1a0>
    1dac:	mov	x0, x19
    1db0:	mov	w1, #0x35                  	// #53
    1db4:	bl	0 <d_make_comp>
    1db8:	str	w20, [x19, #80]
    1dbc:	ldp	x19, x20, [sp, #16]
    1dc0:	ldp	x29, x30, [sp], #32
    1dc4:	ret
    1dc8:	mov	x0, x19
    1dcc:	mov	w1, #0x34                  	// #52
    1dd0:	bl	0 <d_make_comp>
    1dd4:	str	w20, [x19, #80]
    1dd8:	b	1dbc <d_operator_name+0x194>
    1ddc:	nop

0000000000001de0 <d_parmlist>:
    1de0:	stp	x29, x30, [sp, #-80]!
    1de4:	mov	x29, sp
    1de8:	stp	x19, x20, [sp, #16]
    1dec:	mov	x19, x0
    1df0:	mov	w0, #0x2e                  	// #46
    1df4:	str	xzr, [sp, #72]
    1df8:	ldr	x4, [x19, #24]
    1dfc:	ldrb	w1, [x4]
    1e00:	cmp	w1, #0x45
    1e04:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    1e08:	ccmp	w1, w0, #0x4, ne  // ne = any
    1e0c:	b.eq	1ee0 <d_parmlist+0x100>  // b.none
    1e10:	mov	w20, #0x4f                  	// #79
    1e14:	stp	x21, x22, [sp, #32]
    1e18:	add	x22, sp, #0x48
    1e1c:	mov	w21, #0x18                  	// #24
    1e20:	str	x23, [sp, #48]
    1e24:	mov	w23, w0
    1e28:	b	1e64 <d_parmlist+0x84>
    1e2c:	ldp	x4, x3, [x19, #24]
    1e30:	smull	x1, w1, w21
    1e34:	add	x2, x3, x1
    1e38:	str	wzr, [x2, #4]
    1e3c:	str	w5, [x19, #40]
    1e40:	str	w23, [x3, x1]
    1e44:	stp	x0, xzr, [x2, #8]
    1e48:	str	x2, [x22]
    1e4c:	add	x22, x2, #0x10
    1e50:	ldrb	w1, [x4]
    1e54:	cmp	w1, #0x45
    1e58:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    1e5c:	ccmp	w1, w23, #0x4, ne  // ne = any
    1e60:	b.eq	1eb4 <d_parmlist+0xd4>  // b.none
    1e64:	cmp	w1, #0x52
    1e68:	mov	x0, x19
    1e6c:	ccmp	w1, w20, #0x4, ne  // ne = any
    1e70:	b.ne	1e80 <d_parmlist+0xa0>  // b.any
    1e74:	ldrb	w1, [x4, #1]
    1e78:	cmp	w1, #0x45
    1e7c:	b.eq	1eb4 <d_parmlist+0xd4>  // b.none
    1e80:	bl	e28 <d_type>
    1e84:	cbz	x0, 1ed8 <d_parmlist+0xf8>
    1e88:	ldp	w1, w2, [x19, #40]
    1e8c:	add	w5, w1, #0x1
    1e90:	cmp	w1, w2
    1e94:	b.lt	1e2c <d_parmlist+0x4c>  // b.tstop
    1e98:	ldr	x23, [sp, #48]
    1e9c:	str	xzr, [x22]
    1ea0:	ldp	x21, x22, [sp, #32]
    1ea4:	mov	x0, #0x0                   	// #0
    1ea8:	ldp	x19, x20, [sp, #16]
    1eac:	ldp	x29, x30, [sp], #80
    1eb0:	ret
    1eb4:	ldr	x0, [sp, #72]
    1eb8:	cbz	x0, 1ed8 <d_parmlist+0xf8>
    1ebc:	ldr	x1, [x0, #16]
    1ec0:	cbz	x1, 1ef0 <d_parmlist+0x110>
    1ec4:	ldp	x19, x20, [sp, #16]
    1ec8:	ldp	x21, x22, [sp, #32]
    1ecc:	ldr	x23, [sp, #48]
    1ed0:	ldp	x29, x30, [sp], #80
    1ed4:	ret
    1ed8:	ldp	x21, x22, [sp, #32]
    1edc:	ldr	x23, [sp, #48]
    1ee0:	mov	x0, #0x0                   	// #0
    1ee4:	ldp	x19, x20, [sp, #16]
    1ee8:	ldp	x29, x30, [sp], #80
    1eec:	ret
    1ef0:	ldr	x1, [x0, #8]
    1ef4:	ldr	w2, [x1]
    1ef8:	cmp	w2, #0x27
    1efc:	b.ne	1ec4 <d_parmlist+0xe4>  // b.any
    1f00:	ldr	x1, [x1, #8]
    1f04:	ldr	w2, [x1, #28]
    1f08:	cmp	w2, #0x9
    1f0c:	b.ne	1ec4 <d_parmlist+0xe4>  // b.any
    1f10:	ldr	w2, [x1, #8]
    1f14:	ldr	w1, [x19, #72]
    1f18:	ldp	x21, x22, [sp, #32]
    1f1c:	sub	w1, w1, w2
    1f20:	ldr	x23, [sp, #48]
    1f24:	str	w1, [x19, #72]
    1f28:	str	xzr, [x0, #8]
    1f2c:	b	1ea8 <d_parmlist+0xc8>

0000000000001f30 <d_unqualified_name>:
    1f30:	stp	x29, x30, [sp, #-32]!
    1f34:	mov	x29, sp
    1f38:	ldr	x1, [x0, #24]
    1f3c:	stp	x19, x20, [sp, #16]
    1f40:	mov	x19, x0
    1f44:	ldrb	w3, [x1]
    1f48:	sub	w2, w3, #0x30
    1f4c:	and	w2, w2, #0xff
    1f50:	cmp	w2, #0x9
    1f54:	b.ls	2060 <d_unqualified_name+0x130>  // b.plast
    1f58:	sub	w2, w3, #0x61
    1f5c:	and	w2, w2, #0xff
    1f60:	cmp	w2, #0x19
    1f64:	b.hi	1fac <d_unqualified_name+0x7c>  // b.pmore
    1f68:	cmp	w3, #0x6f
    1f6c:	b.eq	21a8 <d_unqualified_name+0x278>  // b.none
    1f70:	mov	x0, x19
    1f74:	bl	1c28 <d_operator_name>
    1f78:	mov	x13, x0
    1f7c:	cbz	x0, 1f8c <d_unqualified_name+0x5c>
    1f80:	ldr	w0, [x0]
    1f84:	cmp	w0, #0x32
    1f88:	b.eq	210c <d_unqualified_name+0x1dc>  // b.none
    1f8c:	ldr	x1, [x19, #24]
    1f90:	ldrb	w2, [x1]
    1f94:	cmp	w2, #0x42
    1f98:	b.eq	2078 <d_unqualified_name+0x148>  // b.none
    1f9c:	mov	x0, x13
    1fa0:	ldp	x19, x20, [sp, #16]
    1fa4:	ldp	x29, x30, [sp], #32
    1fa8:	ret
    1fac:	sub	w2, w3, #0x43
    1fb0:	and	w2, w2, #0xff
    1fb4:	cmp	w2, #0x1
    1fb8:	b.ls	21c0 <d_unqualified_name+0x290>  // b.plast
    1fbc:	cmp	w3, #0x4c
    1fc0:	b.eq	2174 <d_unqualified_name+0x244>  // b.none
    1fc4:	cmp	w3, #0x55
    1fc8:	b.ne	2194 <d_unqualified_name+0x264>  // b.any
    1fcc:	ldrb	w2, [x1, #1]
    1fd0:	cmp	w2, #0x6c
    1fd4:	b.eq	22f0 <d_unqualified_name+0x3c0>  // b.none
    1fd8:	cmp	w2, #0x74
    1fdc:	b.ne	2194 <d_unqualified_name+0x264>  // b.any
    1fe0:	add	x3, x1, #0x1
    1fe4:	str	x3, [x0, #24]
    1fe8:	ldrb	w2, [x1, #1]
    1fec:	cmp	w2, #0x74
    1ff0:	b.ne	22e4 <d_unqualified_name+0x3b4>  // b.any
    1ff4:	add	x1, x1, #0x2
    1ff8:	str	x1, [x0, #24]
    1ffc:	bl	968 <d_compact_number>
    2000:	tbnz	w0, #31, 23cc <d_unqualified_name+0x49c>
    2004:	ldp	w1, w2, [x19, #40]
    2008:	cmp	w1, w2
    200c:	b.ge	23cc <d_unqualified_name+0x49c>  // b.tcont
    2010:	mov	w2, #0x18                  	// #24
    2014:	add	w7, w1, #0x1
    2018:	ldp	w3, w6, [x19, #56]
    201c:	smull	x2, w1, w2
    2020:	ldp	x1, x4, [x19, #24]
    2024:	mov	w5, #0x48                  	// #72
    2028:	sxtw	x0, w0
    202c:	cmp	w3, w6
    2030:	add	x13, x4, x2
    2034:	str	wzr, [x13, #4]
    2038:	str	w7, [x19, #40]
    203c:	str	w5, [x4, x2]
    2040:	str	x0, [x13, #8]
    2044:	b.ge	2388 <d_unqualified_name+0x458>  // b.tcont
    2048:	ldr	x2, [x19, #48]
    204c:	add	w0, w3, #0x1
    2050:	str	x13, [x2, w3, sxtw #3]
    2054:	str	w0, [x19, #56]
    2058:	ldrb	w2, [x1]
    205c:	b	1f94 <d_unqualified_name+0x64>
    2060:	bl	488 <d_source_name>
    2064:	mov	x13, x0
    2068:	ldr	x1, [x19, #24]
    206c:	ldrb	w2, [x1]
    2070:	cmp	w2, #0x42
    2074:	b.ne	1f9c <d_unqualified_name+0x6c>  // b.any
    2078:	mov	w11, #0x18                  	// #24
    207c:	mov	w10, #0x4c                  	// #76
    2080:	ldr	x12, [x19, #64]
    2084:	b	20c8 <d_unqualified_name+0x198>
    2088:	ldp	w1, w3, [x19, #40]
    208c:	add	w2, w1, #0x1
    2090:	cmp	w1, w3
    2094:	b.ge	20e4 <d_unqualified_name+0x1b4>  // b.tcont
    2098:	ldr	x4, [x19, #32]
    209c:	smull	x1, w1, w11
    20a0:	add	x3, x4, x1
    20a4:	str	wzr, [x3, #4]
    20a8:	str	w2, [x19, #40]
    20ac:	str	w10, [x4, x1]
    20b0:	ldr	x1, [x19, #24]
    20b4:	stp	x13, x0, [x3, #8]
    20b8:	mov	x13, x3
    20bc:	ldrb	w3, [x1]
    20c0:	cmp	w3, #0x42
    20c4:	b.ne	20f8 <d_unqualified_name+0x1c8>  // b.any
    20c8:	add	x1, x1, #0x1
    20cc:	str	x1, [x19, #24]
    20d0:	mov	x0, x19
    20d4:	bl	488 <d_source_name>
    20d8:	cmp	x13, #0x0
    20dc:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    20e0:	b.ne	2088 <d_unqualified_name+0x158>  // b.any
    20e4:	ldr	x1, [x19, #24]
    20e8:	mov	x13, #0x0                   	// #0
    20ec:	ldrb	w3, [x1]
    20f0:	cmp	w3, #0x42
    20f4:	b.eq	20c8 <d_unqualified_name+0x198>  // b.none
    20f8:	str	x12, [x19, #64]
    20fc:	mov	x0, x13
    2100:	ldp	x19, x20, [sp, #16]
    2104:	ldp	x29, x30, [sp], #32
    2108:	ret
    210c:	ldr	x1, [x13, #8]
    2110:	ldr	w0, [x19, #72]
    2114:	ldr	x2, [x1]
    2118:	add	w0, w0, #0x7
    211c:	ldr	w1, [x1, #16]
    2120:	add	w0, w0, w1
    2124:	str	w0, [x19, #72]
    2128:	ldrb	w0, [x2]
    212c:	cmp	w0, #0x6c
    2130:	b.ne	1f8c <d_unqualified_name+0x5c>  // b.any
    2134:	ldrb	w0, [x2, #1]
    2138:	cmp	w0, #0x69
    213c:	b.ne	1f8c <d_unqualified_name+0x5c>  // b.any
    2140:	ldrb	w0, [x2, #2]
    2144:	cbnz	w0, 1f8c <d_unqualified_name+0x5c>
    2148:	mov	x0, x19
    214c:	bl	488 <d_source_name>
    2150:	mov	w1, #0x37                  	// #55
    2154:	mov	x2, x13
    2158:	mov	x3, x0
    215c:	mov	x0, x19
    2160:	bl	0 <d_make_comp>
    2164:	mov	x13, x0
    2168:	ldr	x1, [x19, #24]
    216c:	ldrb	w2, [x1]
    2170:	b	1f94 <d_unqualified_name+0x64>
    2174:	add	x1, x1, #0x1
    2178:	str	x1, [x0, #24]
    217c:	bl	488 <d_source_name>
    2180:	mov	x13, x0
    2184:	cbz	x0, 2194 <d_unqualified_name+0x264>
    2188:	mov	x0, x19
    218c:	bl	a18 <d_discriminator>
    2190:	cbnz	w0, 1f8c <d_unqualified_name+0x5c>
    2194:	mov	x13, #0x0                   	// #0
    2198:	mov	x0, x13
    219c:	ldp	x19, x20, [sp, #16]
    21a0:	ldp	x29, x30, [sp], #32
    21a4:	ret
    21a8:	ldrb	w0, [x1, #1]
    21ac:	cmp	w0, #0x6e
    21b0:	b.ne	1f70 <d_unqualified_name+0x40>  // b.any
    21b4:	add	x1, x1, #0x2
    21b8:	str	x1, [x19, #24]
    21bc:	b	1f70 <d_unqualified_name+0x40>
    21c0:	ldr	x0, [x0, #64]
    21c4:	cbz	x0, 2270 <d_unqualified_name+0x340>
    21c8:	ldr	w2, [x0]
    21cc:	cbnz	w2, 2268 <d_unqualified_name+0x338>
    21d0:	ldr	w3, [x0, #16]
    21d4:	ldr	w2, [x19, #72]
    21d8:	add	w2, w2, w3
    21dc:	str	w2, [x19, #72]
    21e0:	ldrb	w2, [x1]
    21e4:	cmp	w2, #0x43
    21e8:	b.eq	2278 <d_unqualified_name+0x348>  // b.none
    21ec:	cmp	w2, #0x44
    21f0:	b.ne	22e8 <d_unqualified_name+0x3b8>  // b.any
    21f4:	ldrb	w2, [x1, #1]
    21f8:	cmp	w2, #0x32
    21fc:	b.eq	2414 <d_unqualified_name+0x4e4>  // b.none
    2200:	b.hi	2394 <d_unqualified_name+0x464>  // b.pmore
    2204:	cmp	w2, #0x30
    2208:	b.eq	23bc <d_unqualified_name+0x48c>  // b.none
    220c:	cmp	w2, #0x31
    2210:	mov	w3, #0x2                   	// #2
    2214:	b.ne	2194 <d_unqualified_name+0x264>  // b.any
    2218:	ldp	w2, w5, [x19, #40]
    221c:	add	x4, x1, #0x2
    2220:	str	x4, [x19, #24]
    2224:	cmp	w2, w5
    2228:	b.ge	23ac <d_unqualified_name+0x47c>  // b.tcont
    222c:	mov	w7, #0x18                  	// #24
    2230:	add	w6, w2, #0x1
    2234:	ldr	x5, [x19, #32]
    2238:	smull	x2, w2, w7
    223c:	add	x13, x5, x2
    2240:	str	wzr, [x13, #4]
    2244:	str	w6, [x19, #40]
    2248:	cbz	x0, 23ac <d_unqualified_name+0x47c>
    224c:	mov	x6, #0x8                   	// #8
    2250:	str	x6, [x5, x2]
    2254:	str	w3, [x13, #8]
    2258:	str	x0, [x13, #16]
    225c:	ldrb	w2, [x1, #2]
    2260:	mov	x1, x4
    2264:	b	1f94 <d_unqualified_name+0x64>
    2268:	cmp	w2, #0x18
    226c:	b.eq	21d0 <d_unqualified_name+0x2a0>  // b.none
    2270:	cmp	w3, #0x43
    2274:	b.ne	21f4 <d_unqualified_name+0x2c4>  // b.any
    2278:	ldrb	w2, [x1, #1]
    227c:	cmp	w2, #0x49
    2280:	b.eq	23dc <d_unqualified_name+0x4ac>  // b.none
    2284:	sub	w3, w2, #0x31
    2288:	and	w3, w3, #0xff
    228c:	cmp	w3, #0x4
    2290:	b.hi	2194 <d_unqualified_name+0x264>  // b.pmore
    2294:	sub	w20, w2, #0x30
    2298:	add	x1, x1, #0x2
    229c:	str	x1, [x19, #24]
    22a0:	ldp	w1, w2, [x19, #40]
    22a4:	cmp	w1, w2
    22a8:	b.ge	23cc <d_unqualified_name+0x49c>  // b.tcont
    22ac:	mov	w2, #0x18                  	// #24
    22b0:	add	w4, w1, #0x1
    22b4:	smull	x2, w1, w2
    22b8:	ldp	x1, x3, [x19, #24]
    22bc:	add	x13, x3, x2
    22c0:	str	wzr, [x13, #4]
    22c4:	str	w4, [x19, #40]
    22c8:	cbz	x0, 2388 <d_unqualified_name+0x458>
    22cc:	mov	x4, #0x7                   	// #7
    22d0:	str	x4, [x3, x2]
    22d4:	str	w20, [x13, #8]
    22d8:	str	x0, [x13, #16]
    22dc:	ldrb	w2, [x1]
    22e0:	b	1f94 <d_unqualified_name+0x64>
    22e4:	mov	x1, x3
    22e8:	mov	x13, #0x0                   	// #0
    22ec:	b	1f94 <d_unqualified_name+0x64>
    22f0:	add	x3, x1, #0x1
    22f4:	str	x3, [x0, #24]
    22f8:	ldrb	w2, [x1, #1]
    22fc:	cmp	w2, #0x6c
    2300:	b.ne	22e4 <d_unqualified_name+0x3b4>  // b.any
    2304:	add	x1, x1, #0x2
    2308:	str	x1, [x0, #24]
    230c:	bl	1de0 <d_parmlist>
    2310:	mov	x10, x0
    2314:	ldr	x1, [x19, #24]
    2318:	mov	x13, #0x0                   	// #0
    231c:	ldrb	w2, [x1]
    2320:	cbz	x0, 1f94 <d_unqualified_name+0x64>
    2324:	cmp	w2, #0x45
    2328:	b.ne	1f94 <d_unqualified_name+0x64>  // b.any
    232c:	add	x1, x1, #0x1
    2330:	str	x1, [x19, #24]
    2334:	mov	x0, x19
    2338:	bl	968 <d_compact_number>
    233c:	tbnz	w0, #31, 23cc <d_unqualified_name+0x49c>
    2340:	ldp	w2, w3, [x19, #40]
    2344:	ldr	x1, [x19, #24]
    2348:	cmp	w2, w3
    234c:	b.ge	2388 <d_unqualified_name+0x458>  // b.tcont
    2350:	mov	w3, #0x18                  	// #24
    2354:	add	w6, w2, #0x1
    2358:	ldr	x4, [x19, #32]
    235c:	smull	x2, w2, w3
    2360:	ldp	w3, w7, [x19, #56]
    2364:	add	x13, x4, x2
    2368:	mov	w5, #0x46                  	// #70
    236c:	cmp	w3, w7
    2370:	str	wzr, [x13, #4]
    2374:	str	w6, [x19, #40]
    2378:	str	w5, [x4, x2]
    237c:	str	x10, [x13, #8]
    2380:	str	w0, [x13, #16]
    2384:	b.lt	2048 <d_unqualified_name+0x118>  // b.tstop
    2388:	ldrb	w2, [x1]
    238c:	mov	x13, #0x0                   	// #0
    2390:	b	1f94 <d_unqualified_name+0x64>
    2394:	cmp	w2, #0x34
    2398:	b.eq	23c4 <d_unqualified_name+0x494>  // b.none
    239c:	cmp	w2, #0x35
    23a0:	b.ne	2194 <d_unqualified_name+0x264>  // b.any
    23a4:	mov	w3, #0x5                   	// #5
    23a8:	b	2218 <d_unqualified_name+0x2e8>
    23ac:	ldrb	w2, [x1, #2]
    23b0:	mov	x13, #0x0                   	// #0
    23b4:	mov	x1, x4
    23b8:	b	1f94 <d_unqualified_name+0x64>
    23bc:	mov	w3, #0x1                   	// #1
    23c0:	b	2218 <d_unqualified_name+0x2e8>
    23c4:	mov	w3, #0x4                   	// #4
    23c8:	b	2218 <d_unqualified_name+0x2e8>
    23cc:	ldr	x1, [x19, #24]
    23d0:	mov	x13, #0x0                   	// #0
    23d4:	ldrb	w2, [x1]
    23d8:	b	1f94 <d_unqualified_name+0x64>
    23dc:	add	x3, x1, #0x1
    23e0:	str	x3, [x19, #24]
    23e4:	ldrb	w2, [x1, #2]
    23e8:	sub	w0, w2, #0x31
    23ec:	and	w0, w0, #0xff
    23f0:	cmp	w0, #0x4
    23f4:	b.hi	241c <d_unqualified_name+0x4ec>  // b.pmore
    23f8:	add	x1, x1, #0x3
    23fc:	str	x1, [x19, #24]
    2400:	sub	w20, w2, #0x30
    2404:	mov	x0, x19
    2408:	bl	e28 <d_type>
    240c:	ldr	x0, [x19, #64]
    2410:	b	22a0 <d_unqualified_name+0x370>
    2414:	mov	w3, #0x3                   	// #3
    2418:	b	2218 <d_unqualified_name+0x2e8>
    241c:	ldrb	w2, [x1, #1]
    2420:	mov	x13, #0x0                   	// #0
    2424:	mov	x1, x3
    2428:	b	1f94 <d_unqualified_name+0x64>
    242c:	nop

0000000000002430 <d_function_type>:
    2430:	stp	x29, x30, [sp, #-32]!
    2434:	mov	x29, sp
    2438:	stp	x19, x20, [sp, #16]
    243c:	mov	x19, x0
    2440:	ldr	w0, [x0, #16]
    2444:	tbnz	w0, #18, 2480 <d_function_type+0x50>
    2448:	ldr	w2, [x19, #84]
    244c:	cmp	w2, #0x800
    2450:	b.hi	2490 <d_function_type+0x60>  // b.pmore
    2454:	ldr	x1, [x19, #24]
    2458:	add	w0, w2, #0x1
    245c:	str	w0, [x19, #84]
    2460:	mov	x0, #0x0                   	// #0
    2464:	ldrb	w3, [x1]
    2468:	cmp	w3, #0x46
    246c:	b.eq	24a0 <d_function_type+0x70>  // b.none
    2470:	str	w2, [x19, #84]
    2474:	ldp	x19, x20, [sp, #16]
    2478:	ldp	x29, x30, [sp], #32
    247c:	ret
    2480:	ldr	x1, [x19, #24]
    2484:	ldrb	w0, [x1]
    2488:	cmp	w0, #0x46
    248c:	b.eq	24a0 <d_function_type+0x70>  // b.none
    2490:	mov	x0, #0x0                   	// #0
    2494:	ldp	x19, x20, [sp, #16]
    2498:	ldp	x29, x30, [sp], #32
    249c:	ret
    24a0:	add	x0, x1, #0x1
    24a4:	str	x0, [x19, #24]
    24a8:	ldrb	w2, [x1, #1]
    24ac:	cmp	w2, #0x59
    24b0:	b.ne	24c0 <d_function_type+0x90>  // b.any
    24b4:	add	x0, x1, #0x2
    24b8:	str	x0, [x19, #24]
    24bc:	ldrb	w2, [x1, #2]
    24c0:	cmp	w2, #0x4a
    24c4:	b.ne	24d0 <d_function_type+0xa0>  // b.any
    24c8:	add	x0, x0, #0x1
    24cc:	str	x0, [x19, #24]
    24d0:	mov	x0, x19
    24d4:	bl	e28 <d_type>
    24d8:	mov	x20, x0
    24dc:	cbz	x0, 2588 <d_function_type+0x158>
    24e0:	mov	x0, x19
    24e4:	bl	1de0 <d_parmlist>
    24e8:	mov	x3, x0
    24ec:	cbz	x0, 2588 <d_function_type+0x158>
    24f0:	mov	x2, x20
    24f4:	mov	x0, x19
    24f8:	mov	w1, #0x29                  	// #41
    24fc:	bl	0 <d_make_comp>
    2500:	ldr	x2, [x19, #24]
    2504:	mov	w3, #0x4f                  	// #79
    2508:	ldrb	w1, [x2]
    250c:	cmp	w1, #0x52
    2510:	ccmp	w1, w3, #0x4, ne  // ne = any
    2514:	b.ne	2558 <d_function_type+0x128>  // b.any
    2518:	ldr	w4, [x19, #72]
    251c:	cmp	w1, #0x52
    2520:	mov	w1, #0x20                  	// #32
    2524:	add	w3, w4, #0x3
    2528:	b.ne	2534 <d_function_type+0x104>  // b.any
    252c:	add	w3, w4, #0x2
    2530:	mov	w1, #0x1f                  	// #31
    2534:	add	x2, x2, #0x1
    2538:	str	x2, [x19, #24]
    253c:	str	w3, [x19, #72]
    2540:	mov	x2, x0
    2544:	mov	x3, #0x0                   	// #0
    2548:	mov	x0, x19
    254c:	bl	0 <d_make_comp>
    2550:	ldr	x2, [x19, #24]
    2554:	ldrb	w1, [x2]
    2558:	cmp	w1, #0x45
    255c:	b.eq	257c <d_function_type+0x14c>  // b.none
    2560:	mov	x0, #0x0                   	// #0
    2564:	ldr	w1, [x19, #16]
    2568:	tbnz	w1, #18, 2494 <d_function_type+0x64>
    256c:	ldr	w2, [x19, #84]
    2570:	sub	w2, w2, #0x1
    2574:	str	w2, [x19, #84]
    2578:	b	2474 <d_function_type+0x44>
    257c:	add	x2, x2, #0x1
    2580:	str	x2, [x19, #24]
    2584:	b	2564 <d_function_type+0x134>
    2588:	mov	x0, #0x0                   	// #0
    258c:	b	2500 <d_function_type+0xd0>

0000000000002590 <d_exprlist>:
    2590:	stp	x29, x30, [sp, #-112]!
    2594:	mov	x29, sp
    2598:	ldr	x2, [x0, #24]
    259c:	stp	x19, x20, [sp, #16]
    25a0:	mov	x19, x0
    25a4:	str	xzr, [sp, #104]
    25a8:	ldrb	w3, [x2]
    25ac:	cmp	w3, w1, uxtb
    25b0:	b.eq	2cd4 <d_exprlist+0x744>  // b.none
    25b4:	stp	x21, x22, [sp, #32]
    25b8:	add	x21, sp, #0x68
    25bc:	mov	w22, #0x1                   	// #1
    25c0:	stp	x23, x24, [sp, #48]
    25c4:	and	w23, w1, #0xff
    25c8:	mov	w24, #0x6d                  	// #109
    25cc:	stp	x25, x26, [sp, #64]
    25d0:	ldr	w25, [x19, #76]
    25d4:	str	w22, [x19, #76]
    25d8:	ldrb	w0, [x2]
    25dc:	cmp	w0, #0x4c
    25e0:	b.eq	279c <d_exprlist+0x20c>  // b.none
    25e4:	cmp	w0, #0x54
    25e8:	b.eq	2838 <d_exprlist+0x2a8>  // b.none
    25ec:	cmp	w0, #0x73
    25f0:	b.eq	2738 <d_exprlist+0x1a8>  // b.none
    25f4:	cmp	w0, #0x66
    25f8:	b.ne	2694 <d_exprlist+0x104>  // b.any
    25fc:	ldrb	w0, [x2, #1]
    2600:	cmp	w0, #0x70
    2604:	b.eq	2848 <d_exprlist+0x2b8>  // b.none
    2608:	mov	x0, x19
    260c:	bl	1c28 <d_operator_name>
    2610:	mov	x20, x0
    2614:	cbz	x0, 2674 <d_exprlist+0xe4>
    2618:	ldr	w0, [x0]
    261c:	cmp	w0, #0x32
    2620:	b.eq	28b0 <d_exprlist+0x320>  // b.none
    2624:	cmp	w0, #0x34
    2628:	b.eq	2cf4 <d_exprlist+0x764>  // b.none
    262c:	b.hi	2670 <d_exprlist+0xe0>  // b.pmore
    2630:	cmp	w0, #0x33
    2634:	b.ne	2670 <d_exprlist+0xe0>  // b.any
    2638:	ldr	w0, [x20, #8]
    263c:	cmp	w0, #0x2
    2640:	b.eq	2670 <d_exprlist+0xe0>  // b.none
    2644:	b.gt	2670 <d_exprlist+0xe0>
    2648:	cbnz	w0, 2a98 <d_exprlist+0x508>
    264c:	mov	x2, x20
    2650:	mov	x0, x19
    2654:	mov	x3, #0x0                   	// #0
    2658:	mov	w1, #0x36                  	// #54
    265c:	bl	0 <d_make_comp>
    2660:	mov	x20, x0
    2664:	b	27a8 <d_exprlist+0x218>
    2668:	ldr	x27, [sp, #80]
    266c:	nop
    2670:	mov	x20, #0x0                   	// #0
    2674:	str	w25, [x19, #76]
    2678:	mov	x0, x20
    267c:	ldp	x19, x20, [sp, #16]
    2680:	ldp	x21, x22, [sp, #32]
    2684:	ldp	x23, x24, [sp, #48]
    2688:	ldp	x25, x26, [sp, #64]
    268c:	ldp	x29, x30, [sp], #112
    2690:	ret
    2694:	sub	w1, w0, #0x30
    2698:	and	w1, w1, #0xff
    269c:	cmp	w1, #0x9
    26a0:	b.hi	27b8 <d_exprlist+0x228>  // b.pmore
    26a4:	mov	x0, x19
    26a8:	bl	1f30 <d_unqualified_name>
    26ac:	mov	x20, x0
    26b0:	cbz	x0, 2674 <d_exprlist+0xe4>
    26b4:	ldr	x0, [x19, #24]
    26b8:	ldrb	w1, [x0]
    26bc:	cmp	w1, #0x49
    26c0:	b.eq	29c4 <d_exprlist+0x434>  // b.none
    26c4:	ldp	w1, w0, [x19, #40]
    26c8:	str	w25, [x19, #76]
    26cc:	cmp	w0, w1
    26d0:	b.le	2778 <d_exprlist+0x1e8>
    26d4:	ldp	x2, x3, [x19, #24]
    26d8:	mov	w0, #0x18                  	// #24
    26dc:	add	w5, w1, #0x1
    26e0:	mov	w4, #0x2e                  	// #46
    26e4:	smull	x1, w1, w0
    26e8:	add	x0, x3, x1
    26ec:	str	wzr, [x0, #4]
    26f0:	str	w5, [x19, #40]
    26f4:	str	w4, [x3, x1]
    26f8:	stp	x20, xzr, [x0, #8]
    26fc:	str	x0, [x21]
    2700:	add	x21, x0, #0x10
    2704:	ldrb	w0, [x2]
    2708:	cmp	w0, w23
    270c:	b.ne	25d0 <d_exprlist+0x40>  // b.any
    2710:	ldr	x20, [sp, #104]
    2714:	add	x2, x2, #0x1
    2718:	str	x2, [x19, #24]
    271c:	mov	x0, x20
    2720:	ldp	x19, x20, [sp, #16]
    2724:	ldp	x21, x22, [sp, #32]
    2728:	ldp	x23, x24, [sp, #48]
    272c:	ldp	x25, x26, [sp, #64]
    2730:	ldp	x29, x30, [sp], #112
    2734:	ret
    2738:	ldrb	w0, [x2, #1]
    273c:	cmp	w0, #0x72
    2740:	b.eq	2a24 <d_exprlist+0x494>  // b.none
    2744:	cmp	w0, #0x70
    2748:	b.ne	2608 <d_exprlist+0x78>  // b.any
    274c:	add	x2, x2, #0x2
    2750:	str	x2, [x19, #24]
    2754:	mov	x0, x19
    2758:	bl	2dd0 <d_expression_1>
    275c:	mov	x2, x0
    2760:	mov	x3, #0x0                   	// #0
    2764:	mov	x0, x19
    2768:	mov	w1, #0x4b                  	// #75
    276c:	bl	0 <d_make_comp>
    2770:	mov	x20, x0
    2774:	b	27a8 <d_exprlist+0x218>
    2778:	str	xzr, [x21]
    277c:	mov	x20, #0x0                   	// #0
    2780:	mov	x0, x20
    2784:	ldp	x19, x20, [sp, #16]
    2788:	ldp	x21, x22, [sp, #32]
    278c:	ldp	x23, x24, [sp, #48]
    2790:	ldp	x25, x26, [sp, #64]
    2794:	ldp	x29, x30, [sp], #112
    2798:	ret
    279c:	mov	x0, x19
    27a0:	bl	4c40 <d_expr_primary>
    27a4:	mov	x20, x0
    27a8:	str	w25, [x19, #76]
    27ac:	cbz	x20, 2678 <d_exprlist+0xe8>
    27b0:	ldp	w1, w0, [x19, #40]
    27b4:	b	26cc <d_exprlist+0x13c>
    27b8:	cmp	w0, #0x6f
    27bc:	b.ne	27d8 <d_exprlist+0x248>  // b.any
    27c0:	ldrb	w0, [x2, #1]
    27c4:	cmp	w0, #0x6e
    27c8:	b.ne	2608 <d_exprlist+0x78>  // b.any
    27cc:	add	x2, x2, #0x2
    27d0:	str	x2, [x19, #24]
    27d4:	b	26a4 <d_exprlist+0x114>
    27d8:	cmp	w0, #0x69
    27dc:	mov	w1, #0x74                  	// #116
    27e0:	ccmp	w0, w1, #0x4, ne  // ne = any
    27e4:	b.ne	2608 <d_exprlist+0x78>  // b.any
    27e8:	ldrb	w1, [x2, #1]
    27ec:	cmp	w1, #0x6c
    27f0:	b.ne	2608 <d_exprlist+0x78>  // b.any
    27f4:	add	x1, x2, #0x2
    27f8:	str	x1, [x19, #24]
    27fc:	cmp	w0, #0x74
    2800:	mov	x20, #0x0                   	// #0
    2804:	b.eq	2b74 <d_exprlist+0x5e4>  // b.none
    2808:	ldrb	w0, [x1, #1]
    280c:	cbz	w0, 2670 <d_exprlist+0xe0>
    2810:	mov	w1, #0x45                  	// #69
    2814:	mov	x0, x19
    2818:	bl	2590 <d_exprlist>
    281c:	mov	x3, x0
    2820:	mov	x2, x20
    2824:	mov	x0, x19
    2828:	mov	w1, #0x31                  	// #49
    282c:	bl	0 <d_make_comp>
    2830:	mov	x20, x0
    2834:	b	27a8 <d_exprlist+0x218>
    2838:	mov	x0, x19
    283c:	bl	b40 <d_template_param>
    2840:	mov	x20, x0
    2844:	b	27a8 <d_exprlist+0x218>
    2848:	add	x0, x2, #0x2
    284c:	str	x0, [x19, #24]
    2850:	ldrb	w0, [x2, #2]
    2854:	cmp	w0, #0x54
    2858:	b.eq	2a14 <d_exprlist+0x484>  // b.none
    285c:	mov	x0, x19
    2860:	bl	968 <d_compact_number>
    2864:	mvn	x1, x0
    2868:	tst	x1, #0x7fffffff
    286c:	b.eq	2670 <d_exprlist+0xe0>  // b.none
    2870:	add	w3, w0, #0x1
    2874:	ldp	w2, w0, [x19, #40]
    2878:	cmp	w2, w0
    287c:	b.ge	2670 <d_exprlist+0xe0>  // b.tcont
    2880:	mov	w5, #0x18                  	// #24
    2884:	add	w1, w2, #0x1
    2888:	ldr	x4, [x19, #32]
    288c:	smull	x2, w2, w5
    2890:	mov	w5, #0x6                   	// #6
    2894:	sxtw	x3, w3
    2898:	add	x20, x4, x2
    289c:	str	wzr, [x20, #4]
    28a0:	str	w1, [x19, #40]
    28a4:	str	w5, [x4, x2]
    28a8:	str	x3, [x20, #8]
    28ac:	b	26c8 <d_exprlist+0x138>
    28b0:	ldr	x2, [x20, #8]
    28b4:	ldr	w0, [x19, #72]
    28b8:	ldr	w1, [x2, #16]
    28bc:	ldr	x26, [x2]
    28c0:	sub	w1, w1, #0x2
    28c4:	add	w0, w0, w1
    28c8:	str	w0, [x19, #72]
    28cc:	ldrb	w1, [x26]
    28d0:	cmp	w1, #0x73
    28d4:	b.eq	29f0 <d_exprlist+0x460>  // b.none
    28d8:	str	x27, [sp, #80]
    28dc:	ldr	w27, [x2, #20]
    28e0:	cmp	w27, #0x1
    28e4:	b.eq	2abc <d_exprlist+0x52c>  // b.none
    28e8:	b.le	2ab0 <d_exprlist+0x520>
    28ec:	cmp	w27, #0x2
    28f0:	b.eq	2bdc <d_exprlist+0x64c>  // b.none
    28f4:	cmp	w27, #0x3
    28f8:	b.ne	2668 <d_exprlist+0xd8>  // b.any
    28fc:	cmp	w1, #0x71
    2900:	b.eq	2b90 <d_exprlist+0x600>  // b.none
    2904:	ldrb	w0, [x26]
    2908:	cmp	w0, #0x66
    290c:	b.eq	2d60 <d_exprlist+0x7d0>  // b.none
    2910:	cmp	w0, #0x6e
    2914:	b.ne	2bcc <d_exprlist+0x63c>  // b.any
    2918:	ldrb	w0, [x26, #1]
    291c:	mov	w1, #0x61                  	// #97
    2920:	cmp	w0, #0x77
    2924:	ccmp	w0, w1, #0x4, ne  // ne = any
    2928:	b.ne	2bcc <d_exprlist+0x63c>  // b.any
    292c:	mov	w1, #0x5f                  	// #95
    2930:	mov	x0, x19
    2934:	bl	2590 <d_exprlist>
    2938:	mov	x26, x0
    293c:	mov	x0, x19
    2940:	bl	e28 <d_type>
    2944:	ldr	x1, [x19, #24]
    2948:	mov	x27, x0
    294c:	ldrb	w0, [x1]
    2950:	cmp	w0, #0x45
    2954:	b.eq	2dc0 <d_exprlist+0x830>  // b.none
    2958:	cmp	w0, #0x70
    295c:	b.eq	2d98 <d_exprlist+0x808>  // b.none
    2960:	cmp	w0, #0x69
    2964:	b.ne	2bcc <d_exprlist+0x63c>  // b.any
    2968:	ldrb	w0, [x1, #1]
    296c:	cmp	w0, #0x6c
    2970:	b.ne	2bcc <d_exprlist+0x63c>  // b.any
    2974:	mov	x0, x19
    2978:	bl	2dd0 <d_expression_1>
    297c:	mov	x3, x0
    2980:	mov	x2, x27
    2984:	mov	w1, #0x3c                  	// #60
    2988:	mov	x0, x19
    298c:	bl	0 <d_make_comp>
    2990:	mov	x2, x26
    2994:	mov	x3, x0
    2998:	mov	w1, #0x3b                  	// #59
    299c:	mov	x0, x19
    29a0:	bl	0 <d_make_comp>
    29a4:	mov	x3, x0
    29a8:	mov	x2, x20
    29ac:	mov	x0, x19
    29b0:	mov	w1, #0x3a                  	// #58
    29b4:	bl	0 <d_make_comp>
    29b8:	mov	x20, x0
    29bc:	ldr	x27, [sp, #80]
    29c0:	b	27a8 <d_exprlist+0x218>
    29c4:	add	x0, x0, #0x1
    29c8:	str	x0, [x19, #24]
    29cc:	mov	x0, x19
    29d0:	bl	37f8 <d_template_args_1>
    29d4:	mov	x3, x0
    29d8:	mov	x2, x20
    29dc:	mov	x0, x19
    29e0:	mov	w1, #0x4                   	// #4
    29e4:	bl	0 <d_make_comp>
    29e8:	mov	x20, x0
    29ec:	b	27a8 <d_exprlist+0x218>
    29f0:	ldrb	w0, [x26, #1]
    29f4:	cmp	w0, #0x74
    29f8:	b.ne	28d8 <d_exprlist+0x348>  // b.any
    29fc:	ldrb	w0, [x26, #2]
    2a00:	cbnz	w0, 28d8 <d_exprlist+0x348>
    2a04:	mov	x0, x19
    2a08:	bl	e28 <d_type>
    2a0c:	mov	x3, x0
    2a10:	b	2b00 <d_exprlist+0x570>
    2a14:	add	x2, x2, #0x3
    2a18:	mov	w3, #0x0                   	// #0
    2a1c:	str	x2, [x19, #24]
    2a20:	b	2874 <d_exprlist+0x2e4>
    2a24:	add	x2, x2, #0x2
    2a28:	str	x2, [x19, #24]
    2a2c:	mov	x0, x19
    2a30:	bl	e28 <d_type>
    2a34:	mov	x20, x0
    2a38:	mov	x0, x19
    2a3c:	bl	1f30 <d_unqualified_name>
    2a40:	ldr	x1, [x19, #24]
    2a44:	mov	x26, x0
    2a48:	mov	x3, x26
    2a4c:	ldrb	w0, [x1]
    2a50:	cmp	w0, #0x49
    2a54:	b.ne	2a80 <d_exprlist+0x4f0>  // b.any
    2a58:	add	x1, x1, #0x1
    2a5c:	str	x1, [x19, #24]
    2a60:	mov	x0, x19
    2a64:	bl	37f8 <d_template_args_1>
    2a68:	mov	x3, x0
    2a6c:	mov	x2, x26
    2a70:	mov	x0, x19
    2a74:	mov	w1, #0x4                   	// #4
    2a78:	bl	0 <d_make_comp>
    2a7c:	mov	x3, x0
    2a80:	mov	x2, x20
    2a84:	mov	x0, x19
    2a88:	mov	w1, #0x1                   	// #1
    2a8c:	bl	0 <d_make_comp>
    2a90:	mov	x20, x0
    2a94:	b	27a8 <d_exprlist+0x218>
    2a98:	cmp	w0, #0x1
    2a9c:	b.ne	2670 <d_exprlist+0xe0>  // b.any
    2aa0:	mov	x0, x19
    2aa4:	bl	2dd0 <d_expression_1>
    2aa8:	mov	x3, x0
    2aac:	b	2b00 <d_exprlist+0x570>
    2ab0:	cbnz	w27, 2668 <d_exprlist+0xd8>
    2ab4:	ldr	x27, [sp, #80]
    2ab8:	b	264c <d_exprlist+0xbc>
    2abc:	ldrb	w0, [x26]
    2ac0:	cmp	w0, #0x70
    2ac4:	ccmp	w0, w24, #0x4, ne  // ne = any
    2ac8:	b.eq	2b44 <d_exprlist+0x5b4>  // b.none
    2acc:	mov	w27, #0x0                   	// #0
    2ad0:	cmp	w1, #0x73
    2ad4:	b.ne	2b18 <d_exprlist+0x588>  // b.any
    2ad8:	ldrb	w0, [x26, #1]
    2adc:	cmp	w0, #0x50
    2ae0:	b.ne	2b18 <d_exprlist+0x588>  // b.any
    2ae4:	ldrb	w0, [x26, #2]
    2ae8:	cbnz	w0, 2b18 <d_exprlist+0x588>
    2aec:	mov	x0, x19
    2af0:	bl	37f8 <d_template_args_1>
    2af4:	mov	x3, x0
    2af8:	cbnz	w27, 2b28 <d_exprlist+0x598>
    2afc:	ldr	x27, [sp, #80]
    2b00:	mov	x2, x20
    2b04:	mov	x0, x19
    2b08:	mov	w1, #0x37                  	// #55
    2b0c:	bl	0 <d_make_comp>
    2b10:	mov	x20, x0
    2b14:	b	27a8 <d_exprlist+0x218>
    2b18:	mov	x0, x19
    2b1c:	bl	2dd0 <d_expression_1>
    2b20:	mov	x3, x0
    2b24:	cbz	w27, 2afc <d_exprlist+0x56c>
    2b28:	mov	x2, x3
    2b2c:	mov	x0, x19
    2b30:	mov	w1, #0x39                  	// #57
    2b34:	bl	0 <d_make_comp>
    2b38:	mov	x3, x0
    2b3c:	ldr	x27, [sp, #80]
    2b40:	b	2b00 <d_exprlist+0x570>
    2b44:	ldrb	w2, [x26, #1]
    2b48:	cmp	w2, w0
    2b4c:	b.ne	2acc <d_exprlist+0x53c>  // b.any
    2b50:	ldr	x0, [x19, #24]
    2b54:	ldrb	w2, [x0]
    2b58:	cmp	w2, #0x5f
    2b5c:	b.ne	2ad0 <d_exprlist+0x540>  // b.any
    2b60:	add	x0, x0, #0x1
    2b64:	str	x0, [x19, #24]
    2b68:	mov	w27, #0x0                   	// #0
    2b6c:	ldrb	w1, [x26]
    2b70:	b	2ad0 <d_exprlist+0x540>
    2b74:	mov	x0, x19
    2b78:	bl	e28 <d_type>
    2b7c:	ldr	x1, [x19, #24]
    2b80:	mov	x20, x0
    2b84:	ldrb	w0, [x1, #1]
    2b88:	cbnz	w0, 2810 <d_exprlist+0x280>
    2b8c:	b	2670 <d_exprlist+0xe0>
    2b90:	ldrb	w0, [x26, #1]
    2b94:	cmp	w0, #0x75
    2b98:	b.ne	2904 <d_exprlist+0x374>  // b.any
    2b9c:	ldrb	w0, [x26, #2]
    2ba0:	cbnz	w0, 2904 <d_exprlist+0x374>
    2ba4:	mov	x0, x19
    2ba8:	bl	2dd0 <d_expression_1>
    2bac:	mov	x26, x0
    2bb0:	mov	x0, x19
    2bb4:	bl	2dd0 <d_expression_1>
    2bb8:	mov	x27, x0
    2bbc:	mov	x0, x19
    2bc0:	bl	2dd0 <d_expression_1>
    2bc4:	mov	x3, x0
    2bc8:	cbnz	x0, 2980 <d_exprlist+0x3f0>
    2bcc:	mov	x20, #0x0                   	// #0
    2bd0:	ldr	x27, [sp, #80]
    2bd4:	str	w25, [x19, #76]
    2bd8:	b	2678 <d_exprlist+0xe8>
    2bdc:	ldr	x0, [x20, #8]
    2be0:	ldr	x0, [x0]
    2be4:	ldrb	w1, [x0, #1]
    2be8:	cmp	w1, #0x63
    2bec:	b.eq	2d20 <d_exprlist+0x790>  // b.none
    2bf0:	ldrb	w0, [x26]
    2bf4:	cmp	w0, #0x66
    2bf8:	b.eq	2d50 <d_exprlist+0x7c0>  // b.none
    2bfc:	mov	x0, x19
    2c00:	bl	2dd0 <d_expression_1>
    2c04:	mov	x27, x0
    2c08:	ldrb	w1, [x26]
    2c0c:	cmp	w1, #0x63
    2c10:	b.ne	2c3c <d_exprlist+0x6ac>  // b.any
    2c14:	ldrb	w0, [x26, #1]
    2c18:	cmp	w0, #0x6c
    2c1c:	b.ne	2c3c <d_exprlist+0x6ac>  // b.any
    2c20:	ldrb	w0, [x26, #2]
    2c24:	cbnz	w0, 2c3c <d_exprlist+0x6ac>
    2c28:	mov	x0, x19
    2c2c:	mov	w1, #0x45                  	// #69
    2c30:	bl	2590 <d_exprlist>
    2c34:	mov	x26, x0
    2c38:	b	2c74 <d_exprlist+0x6e4>
    2c3c:	cmp	w1, #0x64
    2c40:	b.ne	2ca8 <d_exprlist+0x718>  // b.any
    2c44:	ldrb	w0, [x26, #1]
    2c48:	cmp	w0, #0x74
    2c4c:	b.ne	2ca8 <d_exprlist+0x718>  // b.any
    2c50:	ldrb	w0, [x26, #2]
    2c54:	cbnz	w0, 2ca8 <d_exprlist+0x718>
    2c58:	mov	x0, x19
    2c5c:	bl	1f30 <d_unqualified_name>
    2c60:	ldr	x1, [x19, #24]
    2c64:	mov	x26, x0
    2c68:	ldrb	w0, [x1]
    2c6c:	cmp	w0, #0x49
    2c70:	b.eq	2d6c <d_exprlist+0x7dc>  // b.none
    2c74:	mov	x2, x27
    2c78:	mov	x3, x26
    2c7c:	mov	w1, #0x39                  	// #57
    2c80:	mov	x0, x19
    2c84:	bl	0 <d_make_comp>
    2c88:	mov	x3, x0
    2c8c:	mov	x2, x20
    2c90:	mov	x0, x19
    2c94:	mov	w1, #0x38                  	// #56
    2c98:	bl	0 <d_make_comp>
    2c9c:	mov	x20, x0
    2ca0:	ldr	x27, [sp, #80]
    2ca4:	b	27a8 <d_exprlist+0x218>
    2ca8:	cmp	w1, #0x70
    2cac:	b.ne	2cc4 <d_exprlist+0x734>  // b.any
    2cb0:	ldrb	w0, [x26, #1]
    2cb4:	cmp	w0, #0x74
    2cb8:	b.ne	2cc4 <d_exprlist+0x734>  // b.any
    2cbc:	ldrb	w0, [x26, #2]
    2cc0:	cbz	w0, 2c58 <d_exprlist+0x6c8>
    2cc4:	mov	x0, x19
    2cc8:	bl	2dd0 <d_expression_1>
    2ccc:	mov	x26, x0
    2cd0:	b	2c74 <d_exprlist+0x6e4>
    2cd4:	add	x2, x2, #0x1
    2cd8:	str	x2, [x0, #24]
    2cdc:	ldp	x19, x20, [sp, #16]
    2ce0:	mov	x3, #0x0                   	// #0
    2ce4:	ldp	x29, x30, [sp], #112
    2ce8:	mov	w1, #0x2e                  	// #46
    2cec:	mov	x2, #0x0                   	// #0
    2cf0:	b	0 <d_make_comp>
    2cf4:	ldr	x0, [x19, #24]
    2cf8:	ldrb	w1, [x0]
    2cfc:	cmp	w1, #0x5f
    2d00:	b.ne	2aa0 <d_exprlist+0x510>  // b.any
    2d04:	add	x0, x0, #0x1
    2d08:	str	x0, [x19, #24]
    2d0c:	mov	w1, #0x45                  	// #69
    2d10:	mov	x0, x19
    2d14:	bl	2590 <d_exprlist>
    2d18:	mov	x3, x0
    2d1c:	b	2b00 <d_exprlist+0x570>
    2d20:	ldrb	w0, [x0]
    2d24:	sub	w1, w0, #0x63
    2d28:	sub	w0, w0, #0x72
    2d2c:	and	w1, w1, #0xff
    2d30:	and	w0, w0, #0xff
    2d34:	cmp	w1, #0x1
    2d38:	ccmp	w0, #0x1, #0x0, hi  // hi = pmore
    2d3c:	b.hi	2bf0 <d_exprlist+0x660>  // b.pmore
    2d40:	mov	x0, x19
    2d44:	bl	e28 <d_type>
    2d48:	mov	x27, x0
    2d4c:	b	2c08 <d_exprlist+0x678>
    2d50:	mov	x0, x19
    2d54:	bl	1c28 <d_operator_name>
    2d58:	mov	x27, x0
    2d5c:	b	2c08 <d_exprlist+0x678>
    2d60:	mov	x0, x19
    2d64:	bl	1c28 <d_operator_name>
    2d68:	b	2bac <d_exprlist+0x61c>
    2d6c:	add	x1, x1, #0x1
    2d70:	str	x1, [x19, #24]
    2d74:	mov	x0, x19
    2d78:	bl	37f8 <d_template_args_1>
    2d7c:	mov	x3, x0
    2d80:	mov	x2, x26
    2d84:	mov	x0, x19
    2d88:	mov	w1, #0x4                   	// #4
    2d8c:	bl	0 <d_make_comp>
    2d90:	mov	x26, x0
    2d94:	b	2c74 <d_exprlist+0x6e4>
    2d98:	ldrb	w0, [x1, #1]
    2d9c:	cmp	w0, #0x69
    2da0:	b.ne	2bcc <d_exprlist+0x63c>  // b.any
    2da4:	add	x1, x1, #0x2
    2da8:	str	x1, [x19, #24]
    2dac:	mov	x0, x19
    2db0:	mov	w1, #0x45                  	// #69
    2db4:	bl	2590 <d_exprlist>
    2db8:	mov	x3, x0
    2dbc:	b	2980 <d_exprlist+0x3f0>
    2dc0:	add	x1, x1, #0x1
    2dc4:	mov	x3, #0x0                   	// #0
    2dc8:	str	x1, [x19, #24]
    2dcc:	b	2980 <d_exprlist+0x3f0>

0000000000002dd0 <d_expression_1>:
    2dd0:	ldr	x2, [x0, #24]
    2dd4:	ldrb	w1, [x2]
    2dd8:	cmp	w1, #0x4c
    2ddc:	b.eq	2f6c <d_expression_1+0x19c>  // b.none
    2de0:	cmp	w1, #0x54
    2de4:	b.eq	2ff0 <d_expression_1+0x220>  // b.none
    2de8:	stp	x29, x30, [sp, #-48]!
    2dec:	cmp	w1, #0x73
    2df0:	mov	x29, sp
    2df4:	stp	x19, x20, [sp, #16]
    2df8:	mov	x19, x0
    2dfc:	b.eq	2eb4 <d_expression_1+0xe4>  // b.none
    2e00:	cmp	w1, #0x66
    2e04:	b.eq	2e48 <d_expression_1+0x78>  // b.none
    2e08:	sub	w3, w1, #0x30
    2e0c:	and	w3, w3, #0xff
    2e10:	cmp	w3, #0x9
    2e14:	b.hi	2f70 <d_expression_1+0x1a0>  // b.pmore
    2e18:	mov	x0, x19
    2e1c:	bl	1f30 <d_unqualified_name>
    2e20:	mov	x20, x0
    2e24:	cbz	x0, 2f58 <d_expression_1+0x188>
    2e28:	ldr	x0, [x19, #24]
    2e2c:	ldrb	w1, [x0]
    2e30:	cmp	w1, #0x49
    2e34:	b.eq	30c8 <d_expression_1+0x2f8>  // b.none
    2e38:	mov	x0, x20
    2e3c:	ldp	x19, x20, [sp, #16]
    2e40:	ldp	x29, x30, [sp], #48
    2e44:	ret
    2e48:	ldrb	w1, [x2, #1]
    2e4c:	cmp	w1, #0x70
    2e50:	b.eq	2ef0 <d_expression_1+0x120>  // b.none
    2e54:	mov	x0, x19
    2e58:	bl	1c28 <d_operator_name>
    2e5c:	mov	x20, x0
    2e60:	cbz	x0, 2f58 <d_expression_1+0x188>
    2e64:	ldr	w0, [x0]
    2e68:	cmp	w0, #0x32
    2e6c:	b.eq	2ff4 <d_expression_1+0x224>  // b.none
    2e70:	cmp	w0, #0x34
    2e74:	b.eq	3420 <d_expression_1+0x650>  // b.none
    2e78:	b.hi	2f58 <d_expression_1+0x188>  // b.pmore
    2e7c:	cmp	w0, #0x33
    2e80:	b.ne	2f58 <d_expression_1+0x188>  // b.any
    2e84:	ldr	w0, [x20, #8]
    2e88:	cmp	w0, #0x2
    2e8c:	b.eq	2f58 <d_expression_1+0x188>  // b.none
    2e90:	b.gt	2f58 <d_expression_1+0x188>
    2e94:	cbnz	w0, 31bc <d_expression_1+0x3ec>
    2e98:	mov	x2, x20
    2e9c:	mov	x0, x19
    2ea0:	ldp	x19, x20, [sp, #16]
    2ea4:	mov	x3, #0x0                   	// #0
    2ea8:	ldp	x29, x30, [sp], #48
    2eac:	mov	w1, #0x36                  	// #54
    2eb0:	b	0 <d_make_comp>
    2eb4:	ldrb	w1, [x2, #1]
    2eb8:	cmp	w1, #0x72
    2ebc:	b.eq	30f4 <d_expression_1+0x324>  // b.none
    2ec0:	cmp	w1, #0x70
    2ec4:	b.ne	2e54 <d_expression_1+0x84>  // b.any
    2ec8:	add	x2, x2, #0x2
    2ecc:	str	x2, [x0, #24]
    2ed0:	bl	2dd0 <d_expression_1>
    2ed4:	mov	x2, x0
    2ed8:	mov	x0, x19
    2edc:	mov	x3, #0x0                   	// #0
    2ee0:	ldp	x19, x20, [sp, #16]
    2ee4:	mov	w1, #0x4b                  	// #75
    2ee8:	ldp	x29, x30, [sp], #48
    2eec:	b	0 <d_make_comp>
    2ef0:	add	x1, x2, #0x2
    2ef4:	str	x1, [x0, #24]
    2ef8:	ldrb	w1, [x2, #2]
    2efc:	cmp	w1, #0x54
    2f00:	b.eq	3280 <d_expression_1+0x4b0>  // b.none
    2f04:	bl	968 <d_compact_number>
    2f08:	mvn	x1, x0
    2f0c:	add	w0, w0, #0x1
    2f10:	tst	x1, #0x7fffffff
    2f14:	b.eq	2f58 <d_expression_1+0x188>  // b.none
    2f18:	ldp	w1, w2, [x19, #40]
    2f1c:	cmp	w1, w2
    2f20:	b.ge	2f58 <d_expression_1+0x188>  // b.tcont
    2f24:	mov	w3, #0x18                  	// #24
    2f28:	add	w4, w1, #0x1
    2f2c:	ldr	x2, [x19, #32]
    2f30:	smull	x1, w1, w3
    2f34:	mov	w3, #0x6                   	// #6
    2f38:	sxtw	x0, w0
    2f3c:	add	x20, x2, x1
    2f40:	str	wzr, [x20, #4]
    2f44:	str	w4, [x19, #40]
    2f48:	str	w3, [x2, x1]
    2f4c:	str	x0, [x20, #8]
    2f50:	b	2e38 <d_expression_1+0x68>
    2f54:	ldp	x21, x22, [sp, #32]
    2f58:	mov	x20, #0x0                   	// #0
    2f5c:	mov	x0, x20
    2f60:	ldp	x19, x20, [sp, #16]
    2f64:	ldp	x29, x30, [sp], #48
    2f68:	ret
    2f6c:	b	4c40 <d_expr_primary>
    2f70:	cmp	w1, #0x6f
    2f74:	b.ne	2f90 <d_expression_1+0x1c0>  // b.any
    2f78:	ldrb	w0, [x2, #1]
    2f7c:	cmp	w0, #0x6e
    2f80:	b.ne	2e54 <d_expression_1+0x84>  // b.any
    2f84:	add	x2, x2, #0x2
    2f88:	str	x2, [x19, #24]
    2f8c:	b	2e18 <d_expression_1+0x48>
    2f90:	cmp	w1, #0x69
    2f94:	mov	w3, #0x74                  	// #116
    2f98:	ccmp	w1, w3, #0x4, ne  // ne = any
    2f9c:	b.ne	2e54 <d_expression_1+0x84>  // b.any
    2fa0:	ldrb	w3, [x2, #1]
    2fa4:	cmp	w3, #0x6c
    2fa8:	b.ne	2e54 <d_expression_1+0x84>  // b.any
    2fac:	add	x3, x2, #0x2
    2fb0:	str	x3, [x0, #24]
    2fb4:	cmp	w1, #0x74
    2fb8:	mov	x20, #0x0                   	// #0
    2fbc:	b.eq	31ac <d_expression_1+0x3dc>  // b.none
    2fc0:	ldrb	w0, [x3, #1]
    2fc4:	cbz	w0, 2f58 <d_expression_1+0x188>
    2fc8:	mov	x0, x19
    2fcc:	mov	w1, #0x45                  	// #69
    2fd0:	bl	2590 <d_exprlist>
    2fd4:	mov	x3, x0
    2fd8:	mov	x2, x20
    2fdc:	mov	x0, x19
    2fe0:	ldp	x19, x20, [sp, #16]
    2fe4:	mov	w1, #0x31                  	// #49
    2fe8:	ldp	x29, x30, [sp], #48
    2fec:	b	0 <d_make_comp>
    2ff0:	b	b40 <d_template_param>
    2ff4:	ldr	x2, [x20, #8]
    2ff8:	stp	x21, x22, [sp, #32]
    2ffc:	ldr	w0, [x19, #72]
    3000:	ldr	w1, [x2, #16]
    3004:	ldr	x21, [x2]
    3008:	sub	w1, w1, #0x2
    300c:	add	w0, w0, w1
    3010:	str	w0, [x19, #72]
    3014:	ldrb	w1, [x21]
    3018:	cmp	w1, #0x73
    301c:	b.eq	3144 <d_expression_1+0x374>  // b.none
    3020:	ldr	w22, [x2, #20]
    3024:	cmp	w22, #0x1
    3028:	b.eq	31f4 <d_expression_1+0x424>  // b.none
    302c:	b.le	31e8 <d_expression_1+0x418>
    3030:	cmp	w22, #0x2
    3034:	b.eq	32ac <d_expression_1+0x4dc>  // b.none
    3038:	cmp	w22, #0x3
    303c:	b.ne	2f54 <d_expression_1+0x184>  // b.any
    3040:	cmp	w1, #0x71
    3044:	b.ne	333c <d_expression_1+0x56c>  // b.any
    3048:	ldrb	w0, [x21, #1]
    304c:	cmp	w0, #0x75
    3050:	b.ne	333c <d_expression_1+0x56c>  // b.any
    3054:	ldrb	w0, [x21, #2]
    3058:	cbnz	w0, 333c <d_expression_1+0x56c>
    305c:	mov	x0, x19
    3060:	bl	2dd0 <d_expression_1>
    3064:	mov	x21, x0
    3068:	mov	x0, x19
    306c:	bl	2dd0 <d_expression_1>
    3070:	mov	x22, x0
    3074:	mov	x0, x19
    3078:	bl	2dd0 <d_expression_1>
    307c:	mov	x3, x0
    3080:	cbz	x0, 2f54 <d_expression_1+0x184>
    3084:	mov	x2, x22
    3088:	mov	x0, x19
    308c:	mov	w1, #0x3c                  	// #60
    3090:	bl	0 <d_make_comp>
    3094:	mov	x2, x21
    3098:	mov	x3, x0
    309c:	mov	w1, #0x3b                  	// #59
    30a0:	mov	x0, x19
    30a4:	bl	0 <d_make_comp>
    30a8:	mov	x3, x0
    30ac:	mov	x2, x20
    30b0:	mov	x0, x19
    30b4:	ldp	x19, x20, [sp, #16]
    30b8:	mov	w1, #0x3a                  	// #58
    30bc:	ldp	x21, x22, [sp, #32]
    30c0:	ldp	x29, x30, [sp], #48
    30c4:	b	0 <d_make_comp>
    30c8:	add	x0, x0, #0x1
    30cc:	str	x0, [x19, #24]
    30d0:	mov	x0, x19
    30d4:	bl	37f8 <d_template_args_1>
    30d8:	mov	x3, x0
    30dc:	mov	x2, x20
    30e0:	mov	x0, x19
    30e4:	ldp	x19, x20, [sp, #16]
    30e8:	mov	w1, #0x4                   	// #4
    30ec:	ldp	x29, x30, [sp], #48
    30f0:	b	0 <d_make_comp>
    30f4:	add	x2, x2, #0x2
    30f8:	stp	x21, x22, [sp, #32]
    30fc:	str	x2, [x0, #24]
    3100:	bl	e28 <d_type>
    3104:	mov	x20, x0
    3108:	mov	x0, x19
    310c:	bl	1f30 <d_unqualified_name>
    3110:	ldr	x1, [x19, #24]
    3114:	mov	x21, x0
    3118:	mov	x3, x21
    311c:	ldrb	w0, [x1]
    3120:	cmp	w0, #0x49
    3124:	b.eq	3180 <d_expression_1+0x3b0>  // b.none
    3128:	mov	x2, x20
    312c:	mov	x0, x19
    3130:	ldp	x19, x20, [sp, #16]
    3134:	mov	w1, #0x1                   	// #1
    3138:	ldp	x21, x22, [sp, #32]
    313c:	ldp	x29, x30, [sp], #48
    3140:	b	0 <d_make_comp>
    3144:	ldrb	w0, [x21, #1]
    3148:	cmp	w0, #0x74
    314c:	b.ne	3020 <d_expression_1+0x250>  // b.any
    3150:	ldrb	w0, [x21, #2]
    3154:	cbnz	w0, 3020 <d_expression_1+0x250>
    3158:	mov	x0, x19
    315c:	bl	e28 <d_type>
    3160:	mov	x2, x20
    3164:	mov	x3, x0
    3168:	mov	x0, x19
    316c:	mov	w1, #0x37                  	// #55
    3170:	ldp	x19, x20, [sp, #16]
    3174:	ldp	x21, x22, [sp, #32]
    3178:	ldp	x29, x30, [sp], #48
    317c:	b	0 <d_make_comp>
    3180:	add	x1, x1, #0x1
    3184:	str	x1, [x19, #24]
    3188:	mov	x0, x19
    318c:	bl	37f8 <d_template_args_1>
    3190:	mov	x3, x0
    3194:	mov	x2, x21
    3198:	mov	x0, x19
    319c:	mov	w1, #0x4                   	// #4
    31a0:	bl	0 <d_make_comp>
    31a4:	mov	x3, x0
    31a8:	b	3128 <d_expression_1+0x358>
    31ac:	bl	e28 <d_type>
    31b0:	mov	x20, x0
    31b4:	ldr	x3, [x19, #24]
    31b8:	b	2fc0 <d_expression_1+0x1f0>
    31bc:	cmp	w0, #0x1
    31c0:	b.ne	2f58 <d_expression_1+0x188>  // b.any
    31c4:	mov	x0, x19
    31c8:	bl	2dd0 <d_expression_1>
    31cc:	mov	x3, x0
    31d0:	mov	x2, x20
    31d4:	mov	x0, x19
    31d8:	ldp	x19, x20, [sp, #16]
    31dc:	mov	w1, #0x37                  	// #55
    31e0:	ldp	x29, x30, [sp], #48
    31e4:	b	0 <d_make_comp>
    31e8:	cbnz	w22, 2f54 <d_expression_1+0x184>
    31ec:	ldp	x21, x22, [sp, #32]
    31f0:	b	2e98 <d_expression_1+0xc8>
    31f4:	ldrb	w0, [x21]
    31f8:	mov	w2, #0x6d                  	// #109
    31fc:	cmp	w0, #0x70
    3200:	ccmp	w0, w2, #0x4, ne  // ne = any
    3204:	b.ne	3214 <d_expression_1+0x444>  // b.any
    3208:	ldrb	w2, [x21, #1]
    320c:	cmp	w2, w0
    3210:	b.eq	324c <d_expression_1+0x47c>  // b.none
    3214:	mov	w22, #0x0                   	// #0
    3218:	cmp	w1, #0x73
    321c:	b.ne	3270 <d_expression_1+0x4a0>  // b.any
    3220:	ldrb	w0, [x21, #1]
    3224:	cmp	w0, #0x50
    3228:	b.ne	3270 <d_expression_1+0x4a0>  // b.any
    322c:	ldrb	w0, [x21, #2]
    3230:	cbnz	w0, 3270 <d_expression_1+0x4a0>
    3234:	mov	x0, x19
    3238:	bl	37f8 <d_template_args_1>
    323c:	mov	x3, x0
    3240:	cbnz	w22, 3290 <d_expression_1+0x4c0>
    3244:	ldp	x21, x22, [sp, #32]
    3248:	b	31d0 <d_expression_1+0x400>
    324c:	ldr	x0, [x19, #24]
    3250:	ldrb	w2, [x0]
    3254:	cmp	w2, #0x5f
    3258:	b.ne	3218 <d_expression_1+0x448>  // b.any
    325c:	add	x0, x0, #0x1
    3260:	str	x0, [x19, #24]
    3264:	mov	w22, #0x0                   	// #0
    3268:	ldrb	w1, [x21]
    326c:	b	3218 <d_expression_1+0x448>
    3270:	mov	x0, x19
    3274:	bl	2dd0 <d_expression_1>
    3278:	mov	x3, x0
    327c:	b	3240 <d_expression_1+0x470>
    3280:	add	x2, x2, #0x3
    3284:	mov	w0, #0x0                   	// #0
    3288:	str	x2, [x19, #24]
    328c:	b	2f18 <d_expression_1+0x148>
    3290:	mov	x2, x3
    3294:	mov	x0, x19
    3298:	mov	w1, #0x39                  	// #57
    329c:	bl	0 <d_make_comp>
    32a0:	mov	x3, x0
    32a4:	ldp	x21, x22, [sp, #32]
    32a8:	b	31d0 <d_expression_1+0x400>
    32ac:	ldr	x0, [x20, #8]
    32b0:	ldr	x0, [x0]
    32b4:	ldrb	w1, [x0, #1]
    32b8:	cmp	w1, #0x63
    32bc:	b.eq	3464 <d_expression_1+0x694>  // b.none
    32c0:	ldrb	w0, [x21]
    32c4:	cmp	w0, #0x66
    32c8:	b.eq	3494 <d_expression_1+0x6c4>  // b.none
    32cc:	mov	x0, x19
    32d0:	bl	2dd0 <d_expression_1>
    32d4:	mov	x22, x0
    32d8:	ldrb	w1, [x21]
    32dc:	cmp	w1, #0x63
    32e0:	b.ne	33bc <d_expression_1+0x5ec>  // b.any
    32e4:	ldrb	w0, [x21, #1]
    32e8:	cmp	w0, #0x6c
    32ec:	b.ne	33bc <d_expression_1+0x5ec>  // b.any
    32f0:	ldrb	w0, [x21, #2]
    32f4:	cbnz	w0, 33bc <d_expression_1+0x5ec>
    32f8:	mov	x0, x19
    32fc:	mov	w1, #0x45                  	// #69
    3300:	bl	2590 <d_exprlist>
    3304:	mov	x21, x0
    3308:	mov	x3, x21
    330c:	mov	x2, x22
    3310:	mov	x0, x19
    3314:	mov	w1, #0x39                  	// #57
    3318:	bl	0 <d_make_comp>
    331c:	mov	x3, x0
    3320:	mov	x2, x20
    3324:	mov	x0, x19
    3328:	ldp	x19, x20, [sp, #16]
    332c:	mov	w1, #0x38                  	// #56
    3330:	ldp	x21, x22, [sp, #32]
    3334:	ldp	x29, x30, [sp], #48
    3338:	b	0 <d_make_comp>
    333c:	ldrb	w0, [x21]
    3340:	cmp	w0, #0x66
    3344:	b.eq	34bc <d_expression_1+0x6ec>  // b.none
    3348:	cmp	w0, #0x6e
    334c:	b.ne	2f54 <d_expression_1+0x184>  // b.any
    3350:	ldrb	w0, [x21, #1]
    3354:	mov	w1, #0x61                  	// #97
    3358:	cmp	w0, #0x77
    335c:	ccmp	w0, w1, #0x4, ne  // ne = any
    3360:	b.ne	2f54 <d_expression_1+0x184>  // b.any
    3364:	mov	w1, #0x5f                  	// #95
    3368:	mov	x0, x19
    336c:	bl	2590 <d_exprlist>
    3370:	mov	x21, x0
    3374:	mov	x0, x19
    3378:	bl	e28 <d_type>
    337c:	ldr	x1, [x19, #24]
    3380:	mov	x22, x0
    3384:	ldrb	w0, [x1]
    3388:	cmp	w0, #0x45
    338c:	b.eq	34f0 <d_expression_1+0x720>  // b.none
    3390:	cmp	w0, #0x70
    3394:	b.eq	34c8 <d_expression_1+0x6f8>  // b.none
    3398:	cmp	w0, #0x69
    339c:	b.ne	2f54 <d_expression_1+0x184>  // b.any
    33a0:	ldrb	w0, [x1, #1]
    33a4:	cmp	w0, #0x6c
    33a8:	b.ne	2f54 <d_expression_1+0x184>  // b.any
    33ac:	mov	x0, x19
    33b0:	bl	2dd0 <d_expression_1>
    33b4:	mov	x3, x0
    33b8:	b	3084 <d_expression_1+0x2b4>
    33bc:	cmp	w1, #0x64
    33c0:	b.ne	344c <d_expression_1+0x67c>  // b.any
    33c4:	ldrb	w0, [x21, #1]
    33c8:	cmp	w0, #0x74
    33cc:	b.ne	344c <d_expression_1+0x67c>  // b.any
    33d0:	ldrb	w0, [x21, #2]
    33d4:	cbnz	w0, 344c <d_expression_1+0x67c>
    33d8:	mov	x0, x19
    33dc:	bl	1f30 <d_unqualified_name>
    33e0:	ldr	x1, [x19, #24]
    33e4:	mov	x21, x0
    33e8:	ldrb	w0, [x1]
    33ec:	cmp	w0, #0x49
    33f0:	b.ne	3308 <d_expression_1+0x538>  // b.any
    33f4:	add	x1, x1, #0x1
    33f8:	str	x1, [x19, #24]
    33fc:	mov	x0, x19
    3400:	bl	37f8 <d_template_args_1>
    3404:	mov	x3, x0
    3408:	mov	x2, x21
    340c:	mov	x0, x19
    3410:	mov	w1, #0x4                   	// #4
    3414:	bl	0 <d_make_comp>
    3418:	mov	x21, x0
    341c:	b	3308 <d_expression_1+0x538>
    3420:	ldr	x0, [x19, #24]
    3424:	ldrb	w1, [x0]
    3428:	cmp	w1, #0x5f
    342c:	b.ne	31c4 <d_expression_1+0x3f4>  // b.any
    3430:	add	x0, x0, #0x1
    3434:	str	x0, [x19, #24]
    3438:	mov	w1, #0x45                  	// #69
    343c:	mov	x0, x19
    3440:	bl	2590 <d_exprlist>
    3444:	mov	x3, x0
    3448:	b	31d0 <d_expression_1+0x400>
    344c:	cmp	w1, #0x70
    3450:	b.eq	34a4 <d_expression_1+0x6d4>  // b.none
    3454:	mov	x0, x19
    3458:	bl	2dd0 <d_expression_1>
    345c:	mov	x21, x0
    3460:	b	3308 <d_expression_1+0x538>
    3464:	ldrb	w0, [x0]
    3468:	sub	w1, w0, #0x63
    346c:	sub	w0, w0, #0x72
    3470:	and	w1, w1, #0xff
    3474:	and	w0, w0, #0xff
    3478:	cmp	w1, #0x1
    347c:	ccmp	w0, #0x1, #0x0, hi  // hi = pmore
    3480:	b.hi	32c0 <d_expression_1+0x4f0>  // b.pmore
    3484:	mov	x0, x19
    3488:	bl	e28 <d_type>
    348c:	mov	x22, x0
    3490:	b	32d8 <d_expression_1+0x508>
    3494:	mov	x0, x19
    3498:	bl	1c28 <d_operator_name>
    349c:	mov	x22, x0
    34a0:	b	32d8 <d_expression_1+0x508>
    34a4:	ldrb	w0, [x21, #1]
    34a8:	cmp	w0, #0x74
    34ac:	b.ne	3454 <d_expression_1+0x684>  // b.any
    34b0:	ldrb	w0, [x21, #2]
    34b4:	cbz	w0, 33d8 <d_expression_1+0x608>
    34b8:	b	3454 <d_expression_1+0x684>
    34bc:	mov	x0, x19
    34c0:	bl	1c28 <d_operator_name>
    34c4:	b	3064 <d_expression_1+0x294>
    34c8:	ldrb	w0, [x1, #1]
    34cc:	cmp	w0, #0x69
    34d0:	b.ne	2f54 <d_expression_1+0x184>  // b.any
    34d4:	add	x1, x1, #0x2
    34d8:	str	x1, [x19, #24]
    34dc:	mov	x0, x19
    34e0:	mov	w1, #0x45                  	// #69
    34e4:	bl	2590 <d_exprlist>
    34e8:	mov	x3, x0
    34ec:	b	3084 <d_expression_1+0x2b4>
    34f0:	add	x1, x1, #0x1
    34f4:	mov	x3, #0x0                   	// #0
    34f8:	str	x1, [x19, #24]
    34fc:	b	3084 <d_expression_1+0x2b4>

0000000000003500 <d_cv_qualifiers>:
    3500:	stp	x29, x30, [sp, #-80]!
    3504:	mov	x29, sp
    3508:	ldr	x3, [x0, #24]
    350c:	stp	x19, x20, [sp, #16]
    3510:	mov	x19, x0
    3514:	stp	x21, x22, [sp, #32]
    3518:	mov	x20, x1
    351c:	mov	w22, #0x56                  	// #86
    3520:	stp	x23, x24, [sp, #48]
    3524:	mov	x23, x1
    3528:	mov	w24, w2
    352c:	stp	x25, x26, [sp, #64]
    3530:	mov	w21, #0x4b                  	// #75
    3534:	ldrb	w4, [x3]
    3538:	mov	w0, w4
    353c:	nop
    3540:	cmp	w0, #0x72
    3544:	ccmp	w0, w22, #0x4, ne  // ne = any
    3548:	ccmp	w0, w21, #0x4, ne  // ne = any
    354c:	b.eq	35f8 <d_cv_qualifiers+0xf8>  // b.none
    3550:	cmp	w0, #0x44
    3554:	b.eq	35dc <d_cv_qualifiers+0xdc>  // b.none
    3558:	cmp	w4, #0x46
    355c:	eor	w24, w24, #0x1
    3560:	cset	w0, eq  // eq = none
    3564:	tst	w24, w0
    3568:	b.eq	35c0 <d_cv_qualifiers+0xc0>  // b.none
    356c:	cmp	x20, x23
    3570:	b.eq	35c0 <d_cv_qualifiers+0xc0>  // b.none
    3574:	mov	w3, #0x1d                  	// #29
    3578:	mov	w2, #0x1e                  	// #30
    357c:	mov	w1, #0x1c                  	// #28
    3580:	b	3598 <d_cv_qualifiers+0x98>
    3584:	cmp	w0, #0x19
    3588:	b.eq	37ec <d_cv_qualifiers+0x2ec>  // b.none
    358c:	add	x23, x23, #0x8
    3590:	cmp	x20, x23
    3594:	b.eq	35c0 <d_cv_qualifiers+0xc0>  // b.none
    3598:	ldr	x23, [x23]
    359c:	ldr	w0, [x23]
    35a0:	cmp	w0, #0x1a
    35a4:	b.eq	37e4 <d_cv_qualifiers+0x2e4>  // b.none
    35a8:	cmp	w0, #0x1b
    35ac:	b.ne	3584 <d_cv_qualifiers+0x84>  // b.any
    35b0:	str	w2, [x23]
    35b4:	add	x23, x23, #0x8
    35b8:	cmp	x20, x23
    35bc:	b.ne	3598 <d_cv_qualifiers+0x98>  // b.any
    35c0:	mov	x0, x20
    35c4:	ldp	x19, x20, [sp, #16]
    35c8:	ldp	x21, x22, [sp, #32]
    35cc:	ldp	x23, x24, [sp, #48]
    35d0:	ldp	x25, x26, [sp, #64]
    35d4:	ldp	x29, x30, [sp], #80
    35d8:	ret
    35dc:	ldrb	w0, [x3, #1]
    35e0:	and	w1, w0, #0xffffffdf
    35e4:	sub	w0, w0, #0x77
    35e8:	cmp	w1, #0x4f
    35ec:	and	w0, w0, #0xff
    35f0:	ccmp	w0, #0x1, #0x0, ne  // ne = any
    35f4:	b.hi	3558 <d_cv_qualifiers+0x58>  // b.pmore
    35f8:	add	x5, x3, #0x1
    35fc:	str	x5, [x19, #24]
    3600:	cmp	w4, #0x72
    3604:	b.eq	36c4 <d_cv_qualifiers+0x1c4>  // b.none
    3608:	cmp	w4, #0x56
    360c:	b.eq	3728 <d_cv_qualifiers+0x228>  // b.none
    3610:	cmp	w4, #0x4b
    3614:	b.eq	3750 <d_cv_qualifiers+0x250>  // b.none
    3618:	ldrb	w0, [x3, #1]
    361c:	cbz	w0, 36a4 <d_cv_qualifiers+0x1a4>
    3620:	add	x5, x3, #0x2
    3624:	str	x5, [x19, #24]
    3628:	ldrb	w25, [x3, #1]
    362c:	cmp	w25, #0x78
    3630:	b.eq	3784 <d_cv_qualifiers+0x284>  // b.none
    3634:	and	w0, w25, #0xffffffdf
    3638:	cmp	w0, #0x4f
    363c:	and	w7, w0, #0xff
    3640:	b.ne	379c <d_cv_qualifiers+0x29c>  // b.any
    3644:	ldr	w0, [x19, #72]
    3648:	cmp	w25, #0x4f
    364c:	add	w0, w0, #0x9
    3650:	str	w0, [x19, #72]
    3654:	b.ne	37dc <d_cv_qualifiers+0x2dc>  // b.any
    3658:	ldr	w26, [x19, #76]
    365c:	mov	w0, #0x1                   	// #1
    3660:	str	w0, [x19, #76]
    3664:	mov	x0, x19
    3668:	bl	2dd0 <d_expression_1>
    366c:	str	w26, [x19, #76]
    3670:	cbz	x0, 36a4 <d_cv_qualifiers+0x1a4>
    3674:	ldr	x5, [x19, #24]
    3678:	ldrb	w1, [x5]
    367c:	cmp	w1, #0x45
    3680:	b.ne	36a4 <d_cv_qualifiers+0x1a4>  // b.any
    3684:	ldp	w3, w1, [x19, #40]
    3688:	add	x5, x5, #0x1
    368c:	str	x5, [x19, #24]
    3690:	mov	w7, w25
    3694:	cmp	w3, w1
    3698:	b.lt	36ec <d_cv_qualifiers+0x1ec>  // b.tstop
    369c:	nop
    36a0:	str	xzr, [x20]
    36a4:	mov	x20, #0x0                   	// #0
    36a8:	mov	x0, x20
    36ac:	ldp	x19, x20, [sp, #16]
    36b0:	ldp	x21, x22, [sp, #32]
    36b4:	ldp	x23, x24, [sp, #48]
    36b8:	ldp	x25, x26, [sp, #64]
    36bc:	ldp	x29, x30, [sp], #80
    36c0:	ret
    36c4:	ldr	w0, [x19, #72]
    36c8:	add	w3, w0, #0x9
    36cc:	mov	x0, #0x0                   	// #0
    36d0:	cbnz	w24, 3744 <d_cv_qualifiers+0x244>
    36d4:	mov	w7, #0x19                  	// #25
    36d8:	str	w3, [x19, #72]
    36dc:	nop
    36e0:	ldp	w3, w1, [x19, #40]
    36e4:	cmp	w3, w1
    36e8:	b.ge	36a0 <d_cv_qualifiers+0x1a0>  // b.tcont
    36ec:	mov	w4, #0x18                  	// #24
    36f0:	add	w8, w3, #0x1
    36f4:	ldr	x6, [x19, #32]
    36f8:	smull	x3, w3, w4
    36fc:	add	x4, x6, x3
    3700:	str	wzr, [x4, #4]
    3704:	str	w8, [x19, #40]
    3708:	str	w7, [x6, x3]
    370c:	stp	xzr, x0, [x4, #8]
    3710:	ldr	x3, [x19, #24]
    3714:	str	x4, [x20]
    3718:	add	x20, x4, #0x8
    371c:	ldrb	w4, [x5]
    3720:	ldrb	w0, [x3]
    3724:	b	3540 <d_cv_qualifiers+0x40>
    3728:	ldr	w1, [x19, #72]
    372c:	mov	x0, #0x0                   	// #0
    3730:	add	w1, w1, #0x9
    3734:	cbnz	w24, 376c <d_cv_qualifiers+0x26c>
    3738:	mov	w7, #0x1a                  	// #26
    373c:	str	w1, [x19, #72]
    3740:	b	36e0 <d_cv_qualifiers+0x1e0>
    3744:	mov	w7, #0x1c                  	// #28
    3748:	str	w3, [x19, #72]
    374c:	b	36e0 <d_cv_qualifiers+0x1e0>
    3750:	ldr	w0, [x19, #72]
    3754:	add	w1, w0, #0x6
    3758:	mov	x0, #0x0                   	// #0
    375c:	cbnz	w24, 3778 <d_cv_qualifiers+0x278>
    3760:	mov	w7, #0x1b                  	// #27
    3764:	str	w1, [x19, #72]
    3768:	b	36e0 <d_cv_qualifiers+0x1e0>
    376c:	mov	w7, #0x1d                  	// #29
    3770:	str	w1, [x19, #72]
    3774:	b	36e0 <d_cv_qualifiers+0x1e0>
    3778:	mov	w7, #0x1e                  	// #30
    377c:	str	w1, [x19, #72]
    3780:	b	36e0 <d_cv_qualifiers+0x1e0>
    3784:	ldr	w1, [x19, #72]
    3788:	mov	x0, #0x0                   	// #0
    378c:	mov	w7, #0x4d                  	// #77
    3790:	add	w1, w1, #0x11
    3794:	str	w1, [x19, #72]
    3798:	b	36e0 <d_cv_qualifiers+0x1e0>
    379c:	cmp	w25, #0x77
    37a0:	b.ne	36a4 <d_cv_qualifiers+0x1a4>  // b.any
    37a4:	ldr	w1, [x19, #72]
    37a8:	mov	x0, x19
    37ac:	add	w1, w1, #0x6
    37b0:	str	w1, [x19, #72]
    37b4:	bl	1de0 <d_parmlist>
    37b8:	cbz	x0, 36a4 <d_cv_qualifiers+0x1a4>
    37bc:	ldr	x5, [x19, #24]
    37c0:	ldrb	w1, [x5]
    37c4:	cmp	w1, #0x45
    37c8:	b.ne	36a4 <d_cv_qualifiers+0x1a4>  // b.any
    37cc:	add	x5, x5, #0x1
    37d0:	mov	w7, #0x50                  	// #80
    37d4:	str	x5, [x19, #24]
    37d8:	b	36e0 <d_cv_qualifiers+0x1e0>
    37dc:	mov	x0, #0x0                   	// #0
    37e0:	b	36e0 <d_cv_qualifiers+0x1e0>
    37e4:	str	w3, [x23]
    37e8:	b	358c <d_cv_qualifiers+0x8c>
    37ec:	str	w1, [x23]
    37f0:	b	358c <d_cv_qualifiers+0x8c>
    37f4:	nop

00000000000037f8 <d_template_args_1>:
    37f8:	stp	x29, x30, [sp, #-96]!
    37fc:	mov	x29, sp
    3800:	ldr	x3, [x0, #24]
    3804:	stp	x19, x20, [sp, #16]
    3808:	mov	x19, x0
    380c:	stp	x23, x24, [sp, #48]
    3810:	ldrb	w1, [x3]
    3814:	ldr	x23, [x0, #64]
    3818:	cmp	w1, #0x45
    381c:	b.eq	396c <d_template_args_1+0x174>  // b.none
    3820:	add	x24, sp, #0x58
    3824:	mov	w20, #0x2f                  	// #47
    3828:	stp	x21, x22, [sp, #32]
    382c:	mov	w22, #0x1                   	// #1
    3830:	mov	w21, #0x18                  	// #24
    3834:	str	x25, [sp, #64]
    3838:	str	xzr, [sp, #88]
    383c:	nop
    3840:	cmp	w1, #0x4c
    3844:	b.eq	3924 <d_template_args_1+0x12c>  // b.none
    3848:	b.hi	38d8 <d_template_args_1+0xe0>  // b.pmore
    384c:	sub	w1, w1, #0x49
    3850:	and	w1, w1, #0xff
    3854:	cmp	w1, #0x1
    3858:	b.hi	3918 <d_template_args_1+0x120>  // b.pmore
    385c:	add	x3, x3, #0x1
    3860:	str	x3, [x19, #24]
    3864:	mov	x0, x19
    3868:	bl	37f8 <d_template_args_1>
    386c:	cbz	x0, 3950 <d_template_args_1+0x158>
    3870:	ldp	w1, w2, [x19, #40]
    3874:	cmp	w1, w2
    3878:	b.ge	3930 <d_template_args_1+0x138>  // b.tcont
    387c:	ldp	x3, x5, [x19, #24]
    3880:	smull	x4, w1, w21
    3884:	add	w1, w1, #0x1
    3888:	add	x2, x5, x4
    388c:	str	wzr, [x2, #4]
    3890:	str	w1, [x19, #40]
    3894:	str	w20, [x5, x4]
    3898:	stp	x0, xzr, [x2, #8]
    389c:	str	x2, [x24]
    38a0:	add	x24, x2, #0x10
    38a4:	ldrb	w1, [x3]
    38a8:	cmp	w1, #0x45
    38ac:	b.ne	3840 <d_template_args_1+0x48>  // b.any
    38b0:	add	x3, x3, #0x1
    38b4:	str	x3, [x19, #24]
    38b8:	str	x23, [x19, #64]
    38bc:	ldp	x19, x20, [sp, #16]
    38c0:	ldp	x21, x22, [sp, #32]
    38c4:	ldp	x23, x24, [sp, #48]
    38c8:	ldr	x25, [sp, #64]
    38cc:	ldr	x0, [sp, #88]
    38d0:	ldp	x29, x30, [sp], #96
    38d4:	ret
    38d8:	cmp	w1, #0x58
    38dc:	b.ne	3918 <d_template_args_1+0x120>  // b.any
    38e0:	add	x3, x3, #0x1
    38e4:	ldr	w25, [x19, #76]
    38e8:	str	x3, [x19, #24]
    38ec:	mov	x0, x19
    38f0:	str	w22, [x19, #76]
    38f4:	bl	2dd0 <d_expression_1>
    38f8:	str	w25, [x19, #76]
    38fc:	ldr	x1, [x19, #24]
    3900:	ldrb	w2, [x1]
    3904:	cmp	w2, #0x45
    3908:	b.ne	3950 <d_template_args_1+0x158>  // b.any
    390c:	add	x1, x1, #0x1
    3910:	str	x1, [x19, #24]
    3914:	b	386c <d_template_args_1+0x74>
    3918:	mov	x0, x19
    391c:	bl	e28 <d_type>
    3920:	b	386c <d_template_args_1+0x74>
    3924:	mov	x0, x19
    3928:	bl	4c40 <d_expr_primary>
    392c:	b	386c <d_template_args_1+0x74>
    3930:	str	xzr, [x24]
    3934:	mov	x0, #0x0                   	// #0
    3938:	ldp	x19, x20, [sp, #16]
    393c:	ldp	x21, x22, [sp, #32]
    3940:	ldp	x23, x24, [sp, #48]
    3944:	ldr	x25, [sp, #64]
    3948:	ldp	x29, x30, [sp], #96
    394c:	ret
    3950:	mov	x0, #0x0                   	// #0
    3954:	ldp	x19, x20, [sp, #16]
    3958:	ldp	x21, x22, [sp, #32]
    395c:	ldp	x23, x24, [sp, #48]
    3960:	ldr	x25, [sp, #64]
    3964:	ldp	x29, x30, [sp], #96
    3968:	ret
    396c:	add	x3, x3, #0x1
    3970:	mov	x2, #0x0                   	// #0
    3974:	ldp	x23, x24, [sp, #48]
    3978:	str	x3, [x0, #24]
    397c:	ldp	x19, x20, [sp, #16]
    3980:	mov	w1, #0x2f                  	// #47
    3984:	ldp	x29, x30, [sp], #96
    3988:	mov	x3, #0x0                   	// #0
    398c:	b	0 <d_make_comp>

0000000000003990 <d_name>:
    3990:	stp	x29, x30, [sp, #-112]!
    3994:	mov	x29, sp
    3998:	ldr	x2, [x0, #24]
    399c:	stp	x19, x20, [sp, #16]
    39a0:	ldrb	w1, [x2]
    39a4:	cmp	w1, #0x55
    39a8:	b.eq	3ba8 <d_name+0x218>  // b.none
    39ac:	mov	x19, x0
    39b0:	b.hi	3a60 <d_name+0xd0>  // b.pmore
    39b4:	cmp	w1, #0x4e
    39b8:	b.eq	3bc0 <d_name+0x230>  // b.none
    39bc:	cmp	w1, #0x53
    39c0:	b.ne	3b50 <d_name+0x1c0>  // b.any
    39c4:	ldrb	w1, [x2, #1]
    39c8:	cmp	w1, #0x74
    39cc:	b.ne	3af0 <d_name+0x160>  // b.any
    39d0:	ldp	w0, w1, [x0, #40]
    39d4:	add	x2, x2, #0x2
    39d8:	str	x2, [x19, #24]
    39dc:	cmp	w0, w1
    39e0:	b.ge	3ee0 <d_name+0x550>  // b.tcont
    39e4:	mov	w3, #0x18                  	// #24
    39e8:	add	w1, w0, #0x1
    39ec:	ldr	x2, [x19, #32]
    39f0:	smull	x0, w0, w3
    39f4:	str	w1, [x19, #40]
    39f8:	mov	w3, #0x3                   	// #3
    39fc:	add	x20, x2, x0
    3a00:	adrp	x1, 0 <d_make_comp>
    3a04:	add	x1, x1, #0x0
    3a08:	str	xzr, [x2, x0]
    3a0c:	str	x1, [x20, #8]
    3a10:	str	w3, [x20, #16]
    3a14:	mov	x0, x19
    3a18:	bl	1f30 <d_unqualified_name>
    3a1c:	mov	x2, x20
    3a20:	mov	x3, x0
    3a24:	mov	w1, #0x1                   	// #1
    3a28:	mov	x0, x19
    3a2c:	bl	0 <d_make_comp>
    3a30:	mov	x20, x0
    3a34:	ldr	w3, [x19, #72]
    3a38:	ldr	x1, [x19, #24]
    3a3c:	add	w3, w3, #0x3
    3a40:	str	w3, [x19, #72]
    3a44:	ldrb	w0, [x1]
    3a48:	cmp	w0, #0x49
    3a4c:	b.eq	3e78 <d_name+0x4e8>  // b.none
    3a50:	mov	x0, x20
    3a54:	ldp	x19, x20, [sp, #16]
    3a58:	ldp	x29, x30, [sp], #112
    3a5c:	ret
    3a60:	cmp	w1, #0x5a
    3a64:	b.ne	3b50 <d_name+0x1c0>  // b.any
    3a68:	add	x2, x2, #0x1
    3a6c:	str	x2, [x0, #24]
    3a70:	mov	w1, #0x0                   	// #0
    3a74:	bl	41b8 <d_encoding>
    3a78:	mov	x20, x0
    3a7c:	cbz	x0, 3b48 <d_name+0x1b8>
    3a80:	ldr	x0, [x19, #24]
    3a84:	ldrb	w1, [x0]
    3a88:	cmp	w1, #0x45
    3a8c:	b.ne	3b48 <d_name+0x1b8>  // b.any
    3a90:	add	x1, x0, #0x1
    3a94:	str	x1, [x19, #24]
    3a98:	ldrb	w1, [x0, #1]
    3a9c:	cmp	w1, #0x73
    3aa0:	b.eq	3f08 <d_name+0x578>  // b.none
    3aa4:	cmp	w1, #0x64
    3aa8:	b.eq	3d9c <d_name+0x40c>  // b.none
    3aac:	mov	x0, x19
    3ab0:	bl	3990 <d_name>
    3ab4:	mov	x3, x0
    3ab8:	cbz	x0, 3acc <d_name+0x13c>
    3abc:	ldr	w0, [x0]
    3ac0:	sub	w0, w0, #0x46
    3ac4:	tst	w0, #0xfffffffd
    3ac8:	b.ne	3f5c <d_name+0x5cc>  // b.any
    3acc:	ldr	w0, [x20]
    3ad0:	cmp	w0, #0x3
    3ad4:	b.eq	3ec8 <d_name+0x538>  // b.none
    3ad8:	mov	x2, x20
    3adc:	mov	x0, x19
    3ae0:	mov	w1, #0x2                   	// #2
    3ae4:	bl	0 <d_make_comp>
    3ae8:	mov	x20, x0
    3aec:	b	3a50 <d_name+0xc0>
    3af0:	mov	w1, #0x0                   	// #0
    3af4:	bl	650 <d_substitution>
    3af8:	ldr	x1, [x19, #24]
    3afc:	mov	x20, x0
    3b00:	ldrb	w0, [x1]
    3b04:	cmp	w0, #0x49
    3b08:	b.ne	3a50 <d_name+0xc0>  // b.any
    3b0c:	add	x1, x1, #0x1
    3b10:	str	x1, [x19, #24]
    3b14:	mov	x0, x19
    3b18:	bl	37f8 <d_template_args_1>
    3b1c:	mov	x3, x0
    3b20:	mov	x2, x20
    3b24:	mov	x0, x19
    3b28:	mov	w1, #0x4                   	// #4
    3b2c:	bl	0 <d_make_comp>
    3b30:	mov	x20, x0
    3b34:	b	3a50 <d_name+0xc0>
    3b38:	mov	x0, x19
    3b3c:	bl	a18 <d_discriminator>
    3b40:	cbnz	w0, 3dd8 <d_name+0x448>
    3b44:	ldp	x21, x22, [sp, #32]
    3b48:	mov	x20, #0x0                   	// #0
    3b4c:	b	3a50 <d_name+0xc0>
    3b50:	mov	x0, x19
    3b54:	bl	1f30 <d_unqualified_name>
    3b58:	ldr	x1, [x19, #24]
    3b5c:	mov	x20, x0
    3b60:	ldrb	w0, [x1]
    3b64:	cmp	w0, #0x49
    3b68:	b.ne	3a50 <d_name+0xc0>  // b.any
    3b6c:	cbz	x20, 3b48 <d_name+0x1b8>
    3b70:	ldp	w2, w0, [x19, #56]
    3b74:	cmp	w2, w0
    3b78:	b.ge	3b48 <d_name+0x1b8>  // b.tcont
    3b7c:	ldr	x4, [x19, #48]
    3b80:	add	w0, w2, #0x1
    3b84:	mov	x3, #0x0                   	// #0
    3b88:	str	x20, [x4, w2, sxtw #3]
    3b8c:	str	w0, [x19, #56]
    3b90:	ldrb	w2, [x1]
    3b94:	sub	w2, w2, #0x49
    3b98:	and	w2, w2, #0xff
    3b9c:	cmp	w2, #0x1
    3ba0:	b.ls	3b0c <d_name+0x17c>  // b.plast
    3ba4:	b	3b20 <d_name+0x190>
    3ba8:	bl	1f30 <d_unqualified_name>
    3bac:	mov	x20, x0
    3bb0:	mov	x0, x20
    3bb4:	ldp	x19, x20, [sp, #16]
    3bb8:	ldp	x29, x30, [sp], #112
    3bbc:	ret
    3bc0:	stp	x21, x22, [sp, #32]
    3bc4:	add	x2, x2, #0x1
    3bc8:	add	x1, sp, #0x68
    3bcc:	str	x2, [x0, #24]
    3bd0:	mov	w2, #0x1                   	// #1
    3bd4:	bl	3500 <d_cv_qualifiers>
    3bd8:	mov	x22, x0
    3bdc:	cbz	x0, 3ebc <d_name+0x52c>
    3be0:	ldr	x3, [x19, #24]
    3be4:	stp	x23, x24, [sp, #48]
    3be8:	mov	w0, #0x4f                  	// #79
    3bec:	mov	x23, #0x0                   	// #0
    3bf0:	ldrb	w20, [x3]
    3bf4:	cmp	w20, #0x52
    3bf8:	ccmp	w20, w0, #0x4, ne  // ne = any
    3bfc:	b.eq	3d54 <d_name+0x3c4>  // b.none
    3c00:	cbz	w20, 3cbc <d_name+0x32c>
    3c04:	mov	x21, #0x0                   	// #0
    3c08:	mov	w24, #0x4c                  	// #76
    3c0c:	stp	x25, x26, [sp, #64]
    3c10:	mov	w25, #0x55                  	// #85
    3c14:	cmp	w20, #0x44
    3c18:	b.eq	3cd0 <d_name+0x340>  // b.none
    3c1c:	sub	w1, w20, #0x30
    3c20:	sub	w0, w20, #0x61
    3c24:	and	w1, w1, #0xff
    3c28:	and	w0, w0, #0xff
    3c2c:	cmp	w1, #0x9
    3c30:	mov	x26, x21
    3c34:	ccmp	w0, #0x19, #0x0, hi  // hi = pmore
    3c38:	b.ls	3c4c <d_name+0x2bc>  // b.plast
    3c3c:	cmp	w20, #0x43
    3c40:	ccmp	w20, w25, #0x4, ne  // ne = any
    3c44:	ccmp	w20, w24, #0x4, ne  // ne = any
    3c48:	b.ne	3d1c <d_name+0x38c>  // b.any
    3c4c:	mov	x0, x19
    3c50:	bl	1f30 <d_unqualified_name>
    3c54:	mov	x21, x0
    3c58:	cbz	x26, 3c74 <d_name+0x2e4>
    3c5c:	mov	w1, #0x1                   	// #1
    3c60:	mov	x3, x21
    3c64:	mov	x2, x26
    3c68:	mov	x0, x19
    3c6c:	bl	0 <d_make_comp>
    3c70:	mov	x21, x0
    3c74:	cmp	w20, #0x53
    3c78:	ldr	x3, [x19, #24]
    3c7c:	b.eq	3cac <d_name+0x31c>  // b.none
    3c80:	ldrb	w20, [x3]
    3c84:	cmp	w20, #0x45
    3c88:	b.eq	3d04 <d_name+0x374>  // b.none
    3c8c:	cbz	x21, 3cb8 <d_name+0x328>
    3c90:	ldp	w0, w1, [x19, #56]
    3c94:	cmp	w0, w1
    3c98:	b.ge	3cb8 <d_name+0x328>  // b.tcont
    3c9c:	ldr	x2, [x19, #48]
    3ca0:	add	w1, w0, #0x1
    3ca4:	str	x21, [x2, w0, sxtw #3]
    3ca8:	str	w1, [x19, #56]
    3cac:	ldrb	w20, [x3]
    3cb0:	cbnz	w20, 3c14 <d_name+0x284>
    3cb4:	nop
    3cb8:	ldp	x25, x26, [sp, #64]
    3cbc:	mov	x20, #0x0                   	// #0
    3cc0:	ldp	x23, x24, [sp, #48]
    3cc4:	str	xzr, [x22]
    3cc8:	ldp	x21, x22, [sp, #32]
    3ccc:	b	3a50 <d_name+0xc0>
    3cd0:	ldrb	w0, [x3, #1]
    3cd4:	and	w0, w0, #0xffffffdf
    3cd8:	and	w0, w0, #0xff
    3cdc:	cmp	w0, #0x54
    3ce0:	mov	x0, x19
    3ce4:	b.ne	3d0c <d_name+0x37c>  // b.any
    3ce8:	mov	x26, x21
    3cec:	bl	e28 <d_type>
    3cf0:	mov	x21, x0
    3cf4:	mov	w1, #0x1                   	// #1
    3cf8:	cbnz	x26, 3c60 <d_name+0x2d0>
    3cfc:	ldr	x3, [x19, #24]
    3d00:	b	3c80 <d_name+0x2f0>
    3d04:	mov	x26, x21
    3d08:	b	3c3c <d_name+0x2ac>
    3d0c:	mov	x26, x21
    3d10:	bl	1f30 <d_unqualified_name>
    3d14:	mov	x21, x0
    3d18:	b	3cf4 <d_name+0x364>
    3d1c:	cmp	w20, #0x53
    3d20:	b.eq	3e18 <d_name+0x488>  // b.none
    3d24:	cmp	w20, #0x49
    3d28:	b.eq	3ee8 <d_name+0x558>  // b.none
    3d2c:	cmp	w20, #0x54
    3d30:	b.eq	3f84 <d_name+0x5f4>  // b.none
    3d34:	cmp	w20, #0x45
    3d38:	b.eq	3e34 <d_name+0x4a4>  // b.none
    3d3c:	cmp	w20, #0x4d
    3d40:	ccmp	x21, #0x0, #0x4, eq  // eq = none
    3d44:	b.eq	3cb8 <d_name+0x328>  // b.none
    3d48:	add	x3, x3, #0x1
    3d4c:	str	x3, [x19, #24]
    3d50:	b	3cac <d_name+0x31c>
    3d54:	ldr	w2, [x19, #72]
    3d58:	cmp	w20, #0x52
    3d5c:	mov	w1, #0x20                  	// #32
    3d60:	add	w0, w2, #0x3
    3d64:	b.ne	3d70 <d_name+0x3e0>  // b.any
    3d68:	add	w0, w2, #0x2
    3d6c:	mov	w1, #0x1f                  	// #31
    3d70:	add	x3, x3, #0x1
    3d74:	str	x3, [x19, #24]
    3d78:	str	w0, [x19, #72]
    3d7c:	mov	x3, #0x0                   	// #0
    3d80:	mov	x0, x19
    3d84:	mov	x2, #0x0                   	// #0
    3d88:	bl	0 <d_make_comp>
    3d8c:	mov	x23, x0
    3d90:	ldr	x3, [x19, #24]
    3d94:	ldrb	w20, [x3]
    3d98:	b	3c00 <d_name+0x270>
    3d9c:	stp	x21, x22, [sp, #32]
    3da0:	add	x0, x0, #0x2
    3da4:	str	x0, [x19, #24]
    3da8:	mov	x0, x19
    3dac:	bl	968 <d_compact_number>
    3db0:	mov	w21, w0
    3db4:	tbnz	w0, #31, 3b44 <d_name+0x1b4>
    3db8:	mov	x0, x19
    3dbc:	bl	3990 <d_name>
    3dc0:	mov	x13, x0
    3dc4:	cbz	x0, 3dd8 <d_name+0x448>
    3dc8:	ldr	w0, [x0]
    3dcc:	sub	w0, w0, #0x46
    3dd0:	tst	w0, #0xfffffffd
    3dd4:	b.ne	3b38 <d_name+0x1a8>  // b.any
    3dd8:	ldp	w1, w0, [x19, #40]
    3ddc:	cmp	w1, w0
    3de0:	b.ge	3f78 <d_name+0x5e8>  // b.tcont
    3de4:	mov	w2, #0x18                  	// #24
    3de8:	add	w4, w1, #0x1
    3dec:	ldr	x0, [x19, #32]
    3df0:	smull	x1, w1, w2
    3df4:	mov	w2, #0x47                  	// #71
    3df8:	add	x3, x0, x1
    3dfc:	str	wzr, [x3, #4]
    3e00:	str	w4, [x19, #40]
    3e04:	str	w2, [x0, x1]
    3e08:	str	x13, [x3, #8]
    3e0c:	str	w21, [x3, #16]
    3e10:	ldp	x21, x22, [sp, #32]
    3e14:	b	3acc <d_name+0x13c>
    3e18:	mov	x0, x19
    3e1c:	mov	w1, #0x1                   	// #1
    3e20:	bl	650 <d_substitution>
    3e24:	mov	x21, x0
    3e28:	cbnz	x26, 3c5c <d_name+0x2cc>
    3e2c:	ldr	x3, [x19, #24]
    3e30:	b	3cac <d_name+0x31c>
    3e34:	str	x21, [x22]
    3e38:	cbz	x21, 3eb4 <d_name+0x524>
    3e3c:	cbz	x23, 3e4c <d_name+0x4bc>
    3e40:	ldr	x0, [sp, #104]
    3e44:	str	x0, [x23, #8]
    3e48:	str	x23, [sp, #104]
    3e4c:	ldr	x0, [x19, #24]
    3e50:	ldrb	w1, [x0]
    3e54:	cmp	w1, #0x45
    3e58:	b.ne	3eb4 <d_name+0x524>  // b.any
    3e5c:	add	x0, x0, #0x1
    3e60:	ldp	x21, x22, [sp, #32]
    3e64:	ldp	x23, x24, [sp, #48]
    3e68:	ldp	x25, x26, [sp, #64]
    3e6c:	str	x0, [x19, #24]
    3e70:	ldr	x20, [sp, #104]
    3e74:	b	3a50 <d_name+0xc0>
    3e78:	cbz	x20, 3b48 <d_name+0x1b8>
    3e7c:	ldp	w0, w2, [x19, #56]
    3e80:	cmp	w0, w2
    3e84:	b.ge	3b48 <d_name+0x1b8>  // b.tcont
    3e88:	ldr	x4, [x19, #48]
    3e8c:	add	w2, w0, #0x1
    3e90:	mov	x3, #0x0                   	// #0
    3e94:	str	x20, [x4, w0, sxtw #3]
    3e98:	str	w2, [x19, #56]
    3e9c:	ldrb	w0, [x1]
    3ea0:	sub	w0, w0, #0x49
    3ea4:	and	w0, w0, #0xff
    3ea8:	cmp	w0, #0x1
    3eac:	b.hi	3b20 <d_name+0x190>  // b.pmore
    3eb0:	b	3b0c <d_name+0x17c>
    3eb4:	ldp	x23, x24, [sp, #48]
    3eb8:	ldp	x25, x26, [sp, #64]
    3ebc:	mov	x20, #0x0                   	// #0
    3ec0:	ldp	x21, x22, [sp, #32]
    3ec4:	b	3a50 <d_name+0xc0>
    3ec8:	ldr	x0, [x20, #16]
    3ecc:	ldr	w1, [x0]
    3ed0:	cmp	w1, #0x29
    3ed4:	b.ne	3ad8 <d_name+0x148>  // b.any
    3ed8:	str	xzr, [x0, #8]
    3edc:	b	3ad8 <d_name+0x148>
    3ee0:	mov	x20, #0x0                   	// #0
    3ee4:	b	3a14 <d_name+0x84>
    3ee8:	cbz	x21, 3cb8 <d_name+0x328>
    3eec:	add	x3, x3, #0x1
    3ef0:	str	x3, [x19, #24]
    3ef4:	mov	x0, x19
    3ef8:	bl	37f8 <d_template_args_1>
    3efc:	mov	x21, x0
    3f00:	mov	w1, #0x4                   	// #4
    3f04:	b	3c60 <d_name+0x2d0>
    3f08:	add	x0, x0, #0x2
    3f0c:	str	x0, [x19, #24]
    3f10:	mov	x0, x19
    3f14:	bl	a18 <d_discriminator>
    3f18:	cbz	w0, 3b48 <d_name+0x1b8>
    3f1c:	ldp	w0, w1, [x19, #40]
    3f20:	cmp	w0, w1
    3f24:	b.ge	3f7c <d_name+0x5ec>  // b.tcont
    3f28:	mov	w3, #0x18                  	// #24
    3f2c:	add	w1, w0, #0x1
    3f30:	ldr	x2, [x19, #32]
    3f34:	smull	x0, w0, w3
    3f38:	str	w1, [x19, #40]
    3f3c:	mov	w4, #0xe                   	// #14
    3f40:	add	x3, x2, x0
    3f44:	adrp	x1, 0 <d_make_comp>
    3f48:	add	x1, x1, #0x0
    3f4c:	str	xzr, [x2, x0]
    3f50:	str	x1, [x3, #8]
    3f54:	str	w4, [x3, #16]
    3f58:	b	3acc <d_name+0x13c>
    3f5c:	mov	x0, x19
    3f60:	str	x3, [sp, #88]
    3f64:	bl	a18 <d_discriminator>
    3f68:	ldr	x3, [sp, #88]
    3f6c:	cbnz	w0, 3acc <d_name+0x13c>
    3f70:	mov	x20, #0x0                   	// #0
    3f74:	b	3a50 <d_name+0xc0>
    3f78:	ldp	x21, x22, [sp, #32]
    3f7c:	mov	x3, #0x0                   	// #0
    3f80:	b	3acc <d_name+0x13c>
    3f84:	mov	x0, x19
    3f88:	bl	b40 <d_template_param>
    3f8c:	mov	x21, x0
    3f90:	b	3cf4 <d_name+0x364>
    3f94:	nop

0000000000003f98 <d_encoding.part.0>:
    3f98:	stp	x29, x30, [sp, #-48]!
    3f9c:	mov	x29, sp
    3fa0:	stp	x19, x20, [sp, #16]
    3fa4:	mov	x20, x0
    3fa8:	stp	x21, x22, [sp, #32]
    3fac:	mov	w22, w1
    3fb0:	bl	3990 <d_name>
    3fb4:	cbz	x0, 40cc <d_encoding.part.0+0x134>
    3fb8:	mov	x19, x0
    3fbc:	cbz	w22, 4050 <d_encoding.part.0+0xb8>
    3fc0:	ldr	w0, [x20, #16]
    3fc4:	tbnz	w0, #0, 4050 <d_encoding.part.0+0xb8>
    3fc8:	mov	x1, #0x1f                  	// #31
    3fcc:	mov	x2, #0x1                   	// #1
    3fd0:	movk	x1, #0x1a, lsl #48
    3fd4:	ldr	w3, [x19]
    3fd8:	sub	w0, w3, #0x1c
    3fdc:	cmp	w0, #0x34
    3fe0:	b.hi	3ff0 <d_encoding.part.0+0x58>  // b.pmore
    3fe4:	lsl	x0, x2, x0
    3fe8:	tst	x0, x1
    3fec:	b.ne	4164 <d_encoding.part.0+0x1cc>  // b.any
    3ff0:	cmp	w3, #0x2
    3ff4:	b.ne	403c <d_encoding.part.0+0xa4>  // b.any
    3ff8:	ldr	x3, [x19, #16]
    3ffc:	mov	x1, #0x1f                  	// #31
    4000:	mov	x2, #0x1                   	// #1
    4004:	movk	x1, #0x1a, lsl #48
    4008:	ldr	w0, [x3]
    400c:	sub	w0, w0, #0x1c
    4010:	cmp	w0, #0x34
    4014:	b.hi	403c <d_encoding.part.0+0xa4>  // b.pmore
    4018:	lsl	x0, x2, x0
    401c:	tst	x0, x1
    4020:	b.eq	403c <d_encoding.part.0+0xa4>  // b.none
    4024:	ldr	x3, [x3, #8]
    4028:	str	x3, [x19, #16]
    402c:	ldr	w0, [x3]
    4030:	sub	w0, w0, #0x1c
    4034:	cmp	w0, #0x34
    4038:	b.ls	4018 <d_encoding.part.0+0x80>  // b.plast
    403c:	mov	x0, x19
    4040:	ldp	x19, x20, [sp, #16]
    4044:	ldp	x21, x22, [sp, #32]
    4048:	ldp	x29, x30, [sp], #48
    404c:	ret
    4050:	ldr	x1, [x20, #24]
    4054:	ldrb	w4, [x1]
    4058:	cmp	w4, #0x45
    405c:	ccmp	w4, #0x0, #0x4, ne  // ne = any
    4060:	b.eq	403c <d_encoding.part.0+0xa4>  // b.none
    4064:	mov	x2, #0x1f                  	// #31
    4068:	mov	x21, x19
    406c:	mov	x5, #0x1                   	// #1
    4070:	movk	x2, #0x1a, lsl #48
    4074:	ldr	w0, [x21]
    4078:	cmp	w0, #0x4
    407c:	b.eq	416c <d_encoding.part.0+0x1d4>  // b.none
    4080:	sub	w3, w0, #0x1c
    4084:	b.hi	4144 <d_encoding.part.0+0x1ac>  // b.pmore
    4088:	cmp	w0, #0x2
    408c:	b.ne	40e4 <d_encoding.part.0+0x14c>  // b.any
    4090:	ldr	x21, [x21, #16]
    4094:	cbnz	x21, 4074 <d_encoding.part.0+0xdc>
    4098:	cmp	w4, #0x4a
    409c:	b.ne	40f0 <d_encoding.part.0+0x158>  // b.any
    40a0:	add	x1, x1, #0x1
    40a4:	str	x1, [x20, #24]
    40a8:	b	40bc <d_encoding.part.0+0x124>
    40ac:	cmp	w0, #0x35
    40b0:	b.eq	40e4 <d_encoding.part.0+0x14c>  // b.none
    40b4:	cmp	w4, #0x4a
    40b8:	b.eq	40a0 <d_encoding.part.0+0x108>  // b.none
    40bc:	mov	x0, x20
    40c0:	bl	e28 <d_type>
    40c4:	mov	x21, x0
    40c8:	cbnz	x0, 40f0 <d_encoding.part.0+0x158>
    40cc:	mov	x19, #0x0                   	// #0
    40d0:	mov	x0, x19
    40d4:	ldp	x19, x20, [sp, #16]
    40d8:	ldp	x21, x22, [sp, #32]
    40dc:	ldp	x29, x30, [sp], #48
    40e0:	ret
    40e4:	cmp	w4, #0x4a
    40e8:	mov	x21, #0x0                   	// #0
    40ec:	b.eq	40a0 <d_encoding.part.0+0x108>  // b.none
    40f0:	mov	x0, x20
    40f4:	bl	1de0 <d_parmlist>
    40f8:	mov	x3, x0
    40fc:	cbz	x0, 40cc <d_encoding.part.0+0x134>
    4100:	mov	x2, x21
    4104:	mov	x0, x20
    4108:	mov	w1, #0x29                  	// #41
    410c:	bl	0 <d_make_comp>
    4110:	mov	x3, x0
    4114:	cbz	x0, 40cc <d_encoding.part.0+0x134>
    4118:	cbnz	w22, 4128 <d_encoding.part.0+0x190>
    411c:	ldr	w0, [x19]
    4120:	cmp	w0, #0x2
    4124:	b.eq	41a0 <d_encoding.part.0+0x208>  // b.none
    4128:	mov	x2, x19
    412c:	mov	x0, x20
    4130:	ldp	x19, x20, [sp, #16]
    4134:	mov	w1, #0x3                   	// #3
    4138:	ldp	x21, x22, [sp, #32]
    413c:	ldp	x29, x30, [sp], #48
    4140:	b	0 <d_make_comp>
    4144:	cmp	w3, #0x34
    4148:	b.hi	40e4 <d_encoding.part.0+0x14c>  // b.pmore
    414c:	lsl	x3, x5, x3
    4150:	tst	x3, x2
    4154:	b.eq	40e4 <d_encoding.part.0+0x14c>  // b.none
    4158:	ldr	x21, [x21, #8]
    415c:	cbnz	x21, 4074 <d_encoding.part.0+0xdc>
    4160:	b	4098 <d_encoding.part.0+0x100>
    4164:	ldr	x19, [x19, #8]
    4168:	b	3fd4 <d_encoding.part.0+0x3c>
    416c:	ldr	x2, [x21, #8]
    4170:	cbz	x2, 40b4 <d_encoding.part.0+0x11c>
    4174:	ldr	w0, [x2]
    4178:	sub	w3, w0, #0x1
    417c:	cmp	w0, #0x8
    4180:	b.hi	40ac <d_encoding.part.0+0x114>  // b.pmore
    4184:	cmp	w0, #0x6
    4188:	b.hi	40e4 <d_encoding.part.0+0x14c>  // b.pmore
    418c:	cmp	w3, #0x1
    4190:	b.hi	40b4 <d_encoding.part.0+0x11c>  // b.pmore
    4194:	ldr	x2, [x2, #16]
    4198:	cbnz	x2, 4174 <d_encoding.part.0+0x1dc>
    419c:	b	40b4 <d_encoding.part.0+0x11c>
    41a0:	ldr	w0, [x3]
    41a4:	cmp	w0, #0x29
    41a8:	b.ne	4128 <d_encoding.part.0+0x190>  // b.any
    41ac:	str	xzr, [x3, #8]
    41b0:	b	4128 <d_encoding.part.0+0x190>
    41b4:	nop

00000000000041b8 <d_encoding>:
    41b8:	ldr	x2, [x0, #24]
    41bc:	mov	w3, #0x54                  	// #84
    41c0:	ldrb	w2, [x2]
    41c4:	cmp	w2, #0x47
    41c8:	ccmp	w2, w3, #0x4, ne  // ne = any
    41cc:	b.ne	41d4 <d_encoding+0x1c>  // b.any
    41d0:	b	43f0 <d_special_name>
    41d4:	stp	x29, x30, [sp, #-48]!
    41d8:	mov	x29, sp
    41dc:	stp	x19, x20, [sp, #16]
    41e0:	mov	x19, x0
    41e4:	mov	w20, w1
    41e8:	stp	x21, x22, [sp, #32]
    41ec:	bl	3990 <d_name>
    41f0:	mov	x21, x0
    41f4:	cbz	x0, 42b0 <d_encoding+0xf8>
    41f8:	cbz	w20, 4248 <d_encoding+0x90>
    41fc:	ldr	w0, [x19, #16]
    4200:	tbnz	w0, #0, 4248 <d_encoding+0x90>
    4204:	mov	x0, #0x1f                  	// #31
    4208:	mov	x2, #0x1                   	// #1
    420c:	movk	x0, #0x1a, lsl #48
    4210:	ldr	w3, [x21]
    4214:	sub	w1, w3, #0x1c
    4218:	cmp	w1, #0x34
    421c:	b.hi	422c <d_encoding+0x74>  // b.pmore
    4220:	lsl	x1, x2, x1
    4224:	tst	x1, x0
    4228:	b.ne	4360 <d_encoding+0x1a8>  // b.any
    422c:	cmp	w3, #0x2
    4230:	b.eq	4368 <d_encoding+0x1b0>  // b.none
    4234:	mov	x0, x21
    4238:	ldp	x19, x20, [sp, #16]
    423c:	ldp	x21, x22, [sp, #32]
    4240:	ldp	x29, x30, [sp], #48
    4244:	ret
    4248:	ldr	x5, [x19, #24]
    424c:	ldrb	w1, [x5]
    4250:	cmp	w1, #0x45
    4254:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    4258:	b.eq	4234 <d_encoding+0x7c>  // b.none
    425c:	mov	x0, #0x1f                  	// #31
    4260:	mov	x22, x21
    4264:	mov	x2, #0x1                   	// #1
    4268:	movk	x0, #0x1a, lsl #48
    426c:	ldr	w4, [x22]
    4270:	cmp	w4, #0x4
    4274:	b.eq	43b0 <d_encoding+0x1f8>  // b.none
    4278:	sub	w3, w4, #0x1c
    427c:	b.hi	4340 <d_encoding+0x188>  // b.pmore
    4280:	cmp	w4, #0x2
    4284:	b.ne	42d0 <d_encoding+0x118>  // b.any
    4288:	ldr	x22, [x22, #16]
    428c:	cbnz	x22, 426c <d_encoding+0xb4>
    4290:	cmp	w1, #0x4a
    4294:	b.ne	42dc <d_encoding+0x124>  // b.any
    4298:	add	x5, x5, #0x1
    429c:	str	x5, [x19, #24]
    42a0:	mov	x0, x19
    42a4:	bl	e28 <d_type>
    42a8:	mov	x22, x0
    42ac:	cbnz	x0, 42dc <d_encoding+0x124>
    42b0:	mov	x21, #0x0                   	// #0
    42b4:	mov	x0, x21
    42b8:	ldp	x19, x20, [sp, #16]
    42bc:	ldp	x21, x22, [sp, #32]
    42c0:	ldp	x29, x30, [sp], #48
    42c4:	ret
    42c8:	cmp	w0, #0x35
    42cc:	b.ne	43e0 <d_encoding+0x228>  // b.any
    42d0:	cmp	w1, #0x4a
    42d4:	mov	x22, #0x0                   	// #0
    42d8:	b.eq	4298 <d_encoding+0xe0>  // b.none
    42dc:	mov	x0, x19
    42e0:	bl	1de0 <d_parmlist>
    42e4:	mov	x3, x0
    42e8:	cbz	x0, 42b0 <d_encoding+0xf8>
    42ec:	mov	x2, x22
    42f0:	mov	x0, x19
    42f4:	mov	w1, #0x29                  	// #41
    42f8:	bl	0 <d_make_comp>
    42fc:	mov	x3, x0
    4300:	cbz	x0, 42b0 <d_encoding+0xf8>
    4304:	cbnz	w20, 4324 <d_encoding+0x16c>
    4308:	ldr	w0, [x21]
    430c:	cmp	w0, #0x2
    4310:	b.ne	4324 <d_encoding+0x16c>  // b.any
    4314:	ldr	w0, [x3]
    4318:	cmp	w0, #0x29
    431c:	b.ne	4324 <d_encoding+0x16c>  // b.any
    4320:	str	xzr, [x3, #8]
    4324:	mov	x2, x21
    4328:	mov	x0, x19
    432c:	ldp	x19, x20, [sp, #16]
    4330:	mov	w1, #0x3                   	// #3
    4334:	ldp	x21, x22, [sp, #32]
    4338:	ldp	x29, x30, [sp], #48
    433c:	b	0 <d_make_comp>
    4340:	cmp	w3, #0x34
    4344:	b.hi	42d0 <d_encoding+0x118>  // b.pmore
    4348:	lsl	x3, x2, x3
    434c:	tst	x3, x0
    4350:	b.eq	42d0 <d_encoding+0x118>  // b.none
    4354:	ldr	x22, [x22, #8]
    4358:	cbnz	x22, 426c <d_encoding+0xb4>
    435c:	b	4290 <d_encoding+0xd8>
    4360:	ldr	x21, [x21, #8]
    4364:	b	4210 <d_encoding+0x58>
    4368:	ldr	x3, [x21, #16]
    436c:	mov	x0, #0x1f                  	// #31
    4370:	mov	x2, #0x1                   	// #1
    4374:	movk	x0, #0x1a, lsl #48
    4378:	ldr	w1, [x3]
    437c:	sub	w1, w1, #0x1c
    4380:	cmp	w1, #0x34
    4384:	b.hi	4234 <d_encoding+0x7c>  // b.pmore
    4388:	lsl	x1, x2, x1
    438c:	tst	x1, x0
    4390:	b.eq	4234 <d_encoding+0x7c>  // b.none
    4394:	ldr	x3, [x3, #8]
    4398:	str	x3, [x21, #16]
    439c:	ldr	w1, [x3]
    43a0:	sub	w1, w1, #0x1c
    43a4:	cmp	w1, #0x34
    43a8:	b.ls	4388 <d_encoding+0x1d0>  // b.plast
    43ac:	b	4234 <d_encoding+0x7c>
    43b0:	ldr	x2, [x22, #8]
    43b4:	cbz	x2, 43e0 <d_encoding+0x228>
    43b8:	ldr	w0, [x2]
    43bc:	sub	w3, w0, #0x1
    43c0:	cmp	w0, #0x8
    43c4:	b.hi	42c8 <d_encoding+0x110>  // b.pmore
    43c8:	cmp	w0, #0x6
    43cc:	b.hi	42d0 <d_encoding+0x118>  // b.pmore
    43d0:	cmp	w3, #0x1
    43d4:	b.hi	43e0 <d_encoding+0x228>  // b.pmore
    43d8:	ldr	x2, [x2, #16]
    43dc:	cbnz	x2, 43b8 <d_encoding+0x200>
    43e0:	cmp	w1, #0x4a
    43e4:	b.ne	42a0 <d_encoding+0xe8>  // b.any
    43e8:	b	4298 <d_encoding+0xe0>
    43ec:	nop

00000000000043f0 <d_special_name>:
    43f0:	stp	x29, x30, [sp, #-32]!
    43f4:	mov	x29, sp
    43f8:	ldr	w3, [x0, #72]
    43fc:	ldr	x2, [x0, #24]
    4400:	stp	x19, x20, [sp, #16]
    4404:	add	w1, w3, #0x14
    4408:	str	w1, [x0, #72]
    440c:	mov	x19, x0
    4410:	ldrb	w1, [x2]
    4414:	cmp	w1, #0x54
    4418:	b.eq	46b8 <d_special_name+0x2c8>  // b.none
    441c:	cmp	w1, #0x47
    4420:	b.ne	45c0 <d_special_name+0x1d0>  // b.any
    4424:	add	x1, x2, #0x1
    4428:	str	x1, [x0, #24]
    442c:	ldrb	w1, [x2, #1]
    4430:	cbz	w1, 45c0 <d_special_name+0x1d0>
    4434:	add	x1, x2, #0x2
    4438:	str	x1, [x0, #24]
    443c:	ldrb	w3, [x2, #1]
    4440:	cmp	w3, #0x54
    4444:	b.eq	486c <d_special_name+0x47c>  // b.none
    4448:	b.ls	45d0 <d_special_name+0x1e0>  // b.plast
    444c:	cmp	w3, #0x56
    4450:	b.eq	484c <d_special_name+0x45c>  // b.none
    4454:	cmp	w3, #0x72
    4458:	b.ne	45c0 <d_special_name+0x1d0>  // b.any
    445c:	ldrb	w5, [x2, #2]
    4460:	mov	w9, #0x0                   	// #0
    4464:	cmp	w5, #0x6e
    4468:	b.eq	4a14 <d_special_name+0x624>  // b.none
    446c:	sub	w0, w5, #0x30
    4470:	and	w0, w0, #0xff
    4474:	cmp	w0, #0x9
    4478:	b.hi	45c0 <d_special_name+0x1d0>  // b.pmore
    447c:	mov	w8, #0xcccd                	// #52429
    4480:	add	x1, x1, #0x1
    4484:	mov	w0, #0x0                   	// #0
    4488:	mov	w7, #0x7fffffff            	// #2147483647
    448c:	movk	w8, #0xcccc, lsl #16
    4490:	b	44a8 <d_special_name+0xb8>
    4494:	umull	x2, w2, w8
    4498:	add	x1, x1, #0x1
    449c:	lsr	x2, x2, #35
    44a0:	cmp	w2, w0
    44a4:	b.lt	45c0 <d_special_name+0x1d0>  // b.tstop
    44a8:	str	x1, [x19, #24]
    44ac:	add	w0, w0, w0, lsl #2
    44b0:	ldrb	w4, [x1]
    44b4:	add	w6, w5, w0, lsl #1
    44b8:	sub	w0, w6, #0x30
    44bc:	sub	w3, w4, #0x30
    44c0:	mov	w5, w4
    44c4:	sub	w2, w7, w3
    44c8:	and	w3, w3, #0xff
    44cc:	cmp	w3, #0x9
    44d0:	b.ls	4494 <d_special_name+0xa4>  // b.plast
    44d4:	cmp	w9, #0x0
    44d8:	ccmp	w0, #0x1, #0x4, eq  // eq = none
    44dc:	b.le	45c0 <d_special_name+0x1d0>
    44e0:	cbz	w4, 45c0 <d_special_name+0x1d0>
    44e4:	add	x9, x1, #0x1
    44e8:	str	x9, [x19, #24]
    44ec:	ldrb	w0, [x1]
    44f0:	cmp	w0, #0x5f
    44f4:	b.ne	45c0 <d_special_name+0x1d0>  // b.any
    44f8:	sub	w8, w6, #0x31
    44fc:	mov	x2, #0x0                   	// #0
    4500:	mov	w11, #0x18                  	// #24
    4504:	mov	w10, #0x41                  	// #65
    4508:	ldrb	w0, [x9]
    450c:	cbz	w0, 45c0 <d_special_name+0x1d0>
    4510:	cmp	w0, #0x24
    4514:	b.ne	4a8c <d_special_name+0x69c>  // b.any
    4518:	ldrb	w0, [x9, #1]
    451c:	cmp	w0, #0x53
    4520:	b.eq	4b0c <d_special_name+0x71c>  // b.none
    4524:	cmp	w0, #0x5f
    4528:	b.eq	4afc <d_special_name+0x70c>  // b.none
    452c:	cmp	w0, #0x24
    4530:	b.ne	45c0 <d_special_name+0x1d0>  // b.any
    4534:	ldp	w1, w3, [x19, #40]
    4538:	ldr	x9, [x19, #24]
    453c:	cmp	w1, w3
    4540:	add	x9, x9, #0x2
    4544:	b.ge	4be0 <d_special_name+0x7f0>  // b.tcont
    4548:	ldr	x5, [x19, #32]
    454c:	smull	x4, w1, w11
    4550:	add	w1, w1, #0x1
    4554:	sub	w8, w8, #0x2
    4558:	add	x3, x5, x4
    455c:	str	wzr, [x3, #4]
    4560:	str	w1, [x19, #40]
    4564:	str	w10, [x5, x4]
    4568:	str	w0, [x3, #8]
    456c:	str	x9, [x19, #24]
    4570:	cbz	x2, 4af4 <d_special_name+0x704>
    4574:	mov	x0, x19
    4578:	mov	w1, #0x40                  	// #64
    457c:	bl	0 <d_make_comp>
    4580:	mov	x2, x0
    4584:	cbz	x0, 45c0 <d_special_name+0x1d0>
    4588:	cmp	w8, #0x0
    458c:	b.gt	4508 <d_special_name+0x118>
    4590:	mov	x0, x19
    4594:	mov	x3, #0x0                   	// #0
    4598:	ldp	x19, x20, [sp, #16]
    459c:	mov	w1, #0x3f                  	// #63
    45a0:	ldp	x29, x30, [sp], #32
    45a4:	b	0 <d_make_comp>
    45a8:	ldp	w3, w0, [x19, #40]
    45ac:	cmp	w0, w3
    45b0:	b.gt	4ac4 <d_special_name+0x6d4>
    45b4:	ldr	x0, [x19, #24]
    45b8:	add	x1, x0, x1
    45bc:	str	x1, [x19, #24]
    45c0:	mov	x0, #0x0                   	// #0
    45c4:	ldp	x19, x20, [sp, #16]
    45c8:	ldp	x29, x30, [sp], #32
    45cc:	ret
    45d0:	cmp	w3, #0x41
    45d4:	b.eq	48b0 <d_special_name+0x4c0>  // b.none
    45d8:	cmp	w3, #0x52
    45dc:	b.ne	45c0 <d_special_name+0x1d0>  // b.any
    45e0:	bl	3990 <d_name>
    45e4:	mov	x2, x0
    45e8:	ldp	w1, w0, [x19, #40]
    45ec:	cmp	w1, w0
    45f0:	b.ge	4a50 <d_special_name+0x660>  // b.tcont
    45f4:	ldp	x6, x0, [x19, #24]
    45f8:	mov	w3, #0x18                  	// #24
    45fc:	add	w5, w1, #0x1
    4600:	mov	w4, #0x42                  	// #66
    4604:	smull	x1, w1, w3
    4608:	add	x3, x0, x1
    460c:	str	wzr, [x3, #4]
    4610:	str	w5, [x19, #40]
    4614:	str	w4, [x0, x1]
    4618:	ldrb	w1, [x6]
    461c:	cmp	w1, #0x6e
    4620:	b.eq	4a28 <d_special_name+0x638>  // b.none
    4624:	sub	w0, w1, #0x30
    4628:	and	w0, w0, #0xff
    462c:	cmp	w0, #0x9
    4630:	b.hi	4c20 <d_special_name+0x830>  // b.pmore
    4634:	mov	w0, #0x0                   	// #0
    4638:	mov	w9, #0xcccd                	// #52429
    463c:	mov	w7, w1
    4640:	add	x6, x6, #0x1
    4644:	mov	w1, #0x0                   	// #0
    4648:	mov	w8, #0x7fffffff            	// #2147483647
    464c:	movk	w9, #0xcccc, lsl #16
    4650:	b	4664 <d_special_name+0x274>
    4654:	umull	x4, w4, w9
    4658:	lsr	x4, x4, #35
    465c:	cmp	w4, w1
    4660:	b.lt	4b04 <d_special_name+0x714>  // b.tstop
    4664:	str	x6, [x19, #24]
    4668:	add	w1, w1, w1, lsl #2
    466c:	add	x6, x6, #0x1
    4670:	ldurb	w4, [x6, #-1]
    4674:	add	w1, w7, w1, lsl #1
    4678:	sub	w1, w1, #0x30
    467c:	sub	w5, w4, #0x30
    4680:	mov	w7, w4
    4684:	sub	w4, w8, w5
    4688:	and	w5, w5, #0xff
    468c:	cmp	w5, #0x9
    4690:	b.ls	4654 <d_special_name+0x264>  // b.plast
    4694:	cbz	w0, 469c <d_special_name+0x2ac>
    4698:	neg	w1, w1
    469c:	sxtw	x1, w1
    46a0:	str	x1, [x3, #8]
    46a4:	mov	x0, x19
    46a8:	mov	w1, #0x16                  	// #22
    46ac:	ldp	x19, x20, [sp, #16]
    46b0:	ldp	x29, x30, [sp], #32
    46b4:	b	0 <d_make_comp>
    46b8:	add	x1, x2, #0x1
    46bc:	str	x1, [x0, #24]
    46c0:	ldrb	w1, [x2, #1]
    46c4:	cbz	w1, 45c0 <d_special_name+0x1d0>
    46c8:	add	x1, x2, #0x2
    46cc:	str	x1, [x0, #24]
    46d0:	ldrb	w1, [x2, #1]
    46d4:	cmp	w1, #0x53
    46d8:	b.eq	4ba0 <d_special_name+0x7b0>  // b.none
    46dc:	b.ls	472c <d_special_name+0x33c>  // b.plast
    46e0:	cmp	w1, #0x63
    46e4:	b.eq	4b5c <d_special_name+0x76c>  // b.none
    46e8:	b.ls	4798 <d_special_name+0x3a8>  // b.plast
    46ec:	cmp	w1, #0x68
    46f0:	b.eq	48f4 <d_special_name+0x504>  // b.none
    46f4:	cmp	w1, #0x76
    46f8:	b.ne	45c0 <d_special_name+0x1d0>  // b.any
    46fc:	bl	c38 <d_call_offset>
    4700:	cbz	w0, 45c0 <d_special_name+0x1d0>
    4704:	mov	x0, x19
    4708:	mov	w1, #0x0                   	// #0
    470c:	bl	41b8 <d_encoding>
    4710:	mov	x2, x0
    4714:	mov	x0, x19
    4718:	mov	x3, #0x0                   	// #0
    471c:	ldp	x19, x20, [sp, #16]
    4720:	mov	w1, #0x10                  	// #16
    4724:	ldp	x29, x30, [sp], #32
    4728:	b	0 <d_make_comp>
    472c:	cmp	w1, #0x48
    4730:	b.eq	4bc0 <d_special_name+0x7d0>  // b.none
    4734:	b.ls	4768 <d_special_name+0x378>  // b.plast
    4738:	cmp	w1, #0x49
    473c:	b.eq	48d4 <d_special_name+0x4e4>  // b.none
    4740:	cmp	w1, #0x4a
    4744:	b.ne	45c0 <d_special_name+0x1d0>  // b.any
    4748:	bl	e28 <d_type>
    474c:	mov	x2, x0
    4750:	mov	x0, x19
    4754:	mov	x3, #0x0                   	// #0
    4758:	ldp	x19, x20, [sp, #16]
    475c:	mov	w1, #0x12                  	// #18
    4760:	ldp	x29, x30, [sp], #32
    4764:	b	0 <d_make_comp>
    4768:	cmp	w1, #0x43
    476c:	b.eq	494c <d_special_name+0x55c>  // b.none
    4770:	cmp	w1, #0x46
    4774:	b.ne	47c8 <d_special_name+0x3d8>  // b.any
    4778:	bl	e28 <d_type>
    477c:	mov	x2, x0
    4780:	mov	x0, x19
    4784:	mov	x3, #0x0                   	// #0
    4788:	ldp	x19, x20, [sp, #16]
    478c:	mov	w1, #0xe                   	// #14
    4790:	ldp	x29, x30, [sp], #32
    4794:	b	0 <d_make_comp>
    4798:	cmp	w1, #0x56
    479c:	b.eq	4924 <d_special_name+0x534>  // b.none
    47a0:	cmp	w1, #0x57
    47a4:	b.ne	481c <d_special_name+0x42c>  // b.any
    47a8:	bl	3990 <d_name>
    47ac:	mov	x2, x0
    47b0:	mov	x0, x19
    47b4:	mov	x3, #0x0                   	// #0
    47b8:	ldp	x19, x20, [sp, #16]
    47bc:	mov	w1, #0x15                  	// #21
    47c0:	ldp	x29, x30, [sp], #32
    47c4:	b	0 <d_make_comp>
    47c8:	cmp	w1, #0x41
    47cc:	b.ne	45c0 <d_special_name+0x1d0>  // b.any
    47d0:	ldrb	w0, [x2, #2]
    47d4:	cmp	w0, #0x4c
    47d8:	b.eq	4a7c <d_special_name+0x68c>  // b.none
    47dc:	b.hi	4b14 <d_special_name+0x724>  // b.pmore
    47e0:	sub	w0, w0, #0x49
    47e4:	and	w0, w0, #0xff
    47e8:	cmp	w0, #0x1
    47ec:	b.hi	4c10 <d_special_name+0x820>  // b.pmore
    47f0:	add	x2, x2, #0x3
    47f4:	str	x2, [x19, #24]
    47f8:	mov	x0, x19
    47fc:	bl	37f8 <d_template_args_1>
    4800:	mov	x2, x0
    4804:	mov	x0, x19
    4808:	mov	x3, #0x0                   	// #0
    480c:	ldp	x19, x20, [sp, #16]
    4810:	mov	w1, #0x30                  	// #48
    4814:	ldp	x29, x30, [sp], #32
    4818:	b	0 <d_make_comp>
    481c:	cmp	w1, #0x54
    4820:	b.ne	45c0 <d_special_name+0x1d0>  // b.any
    4824:	add	w3, w3, #0xa
    4828:	str	w3, [x0, #72]
    482c:	bl	e28 <d_type>
    4830:	mov	x2, x0
    4834:	mov	x0, x19
    4838:	mov	x3, #0x0                   	// #0
    483c:	ldp	x19, x20, [sp, #16]
    4840:	mov	w1, #0xa                   	// #10
    4844:	ldp	x29, x30, [sp], #32
    4848:	b	0 <d_make_comp>
    484c:	bl	3990 <d_name>
    4850:	mov	x2, x0
    4854:	mov	x0, x19
    4858:	mov	x3, #0x0                   	// #0
    485c:	ldp	x19, x20, [sp, #16]
    4860:	mov	w1, #0x13                  	// #19
    4864:	ldp	x29, x30, [sp], #32
    4868:	b	0 <d_make_comp>
    486c:	ldrb	w1, [x2, #2]
    4870:	cbz	w1, 4888 <d_special_name+0x498>
    4874:	add	x1, x2, #0x3
    4878:	str	x1, [x0, #24]
    487c:	ldrb	w1, [x2, #2]
    4880:	cmp	w1, #0x6e
    4884:	b.eq	4a58 <d_special_name+0x668>  // b.none
    4888:	mov	x0, x19
    488c:	mov	w1, #0x0                   	// #0
    4890:	bl	41b8 <d_encoding>
    4894:	mov	x2, x0
    4898:	mov	x0, x19
    489c:	mov	x3, #0x0                   	// #0
    48a0:	ldp	x19, x20, [sp, #16]
    48a4:	mov	w1, #0x49                  	// #73
    48a8:	ldp	x29, x30, [sp], #32
    48ac:	b	0 <d_make_comp>
    48b0:	mov	w1, #0x0                   	// #0
    48b4:	bl	41b8 <d_encoding>
    48b8:	mov	x2, x0
    48bc:	mov	x0, x19
    48c0:	ldp	x19, x20, [sp, #16]
    48c4:	mov	x3, #0x0                   	// #0
    48c8:	ldp	x29, x30, [sp], #32
    48cc:	mov	w1, #0x17                  	// #23
    48d0:	b	0 <d_make_comp>
    48d4:	bl	e28 <d_type>
    48d8:	mov	x2, x0
    48dc:	mov	x0, x19
    48e0:	mov	x3, #0x0                   	// #0
    48e4:	ldp	x19, x20, [sp, #16]
    48e8:	mov	w1, #0xc                   	// #12
    48ec:	ldp	x29, x30, [sp], #32
    48f0:	b	0 <d_make_comp>
    48f4:	bl	c38 <d_call_offset>
    48f8:	cbz	w0, 45c0 <d_special_name+0x1d0>
    48fc:	mov	x0, x19
    4900:	mov	w1, #0x0                   	// #0
    4904:	bl	41b8 <d_encoding>
    4908:	mov	x2, x0
    490c:	mov	x0, x19
    4910:	mov	x3, #0x0                   	// #0
    4914:	ldp	x19, x20, [sp, #16]
    4918:	mov	w1, #0xf                   	// #15
    491c:	ldp	x29, x30, [sp], #32
    4920:	b	0 <d_make_comp>
    4924:	add	w3, w3, #0xf
    4928:	str	w3, [x0, #72]
    492c:	bl	e28 <d_type>
    4930:	mov	x2, x0
    4934:	mov	x0, x19
    4938:	mov	x3, #0x0                   	// #0
    493c:	ldp	x19, x20, [sp, #16]
    4940:	mov	w1, #0x9                   	// #9
    4944:	ldp	x29, x30, [sp], #32
    4948:	b	0 <d_make_comp>
    494c:	bl	e28 <d_type>
    4950:	mov	x20, x0
    4954:	ldr	x5, [x19, #24]
    4958:	ldrb	w6, [x5]
    495c:	cmp	w6, #0x6e
    4960:	b.eq	4be8 <d_special_name+0x7f8>  // b.none
    4964:	sub	w0, w6, #0x30
    4968:	and	w0, w0, #0xff
    496c:	cmp	w0, #0x9
    4970:	b.hi	49d4 <d_special_name+0x5e4>  // b.pmore
    4974:	mov	w0, #0x0                   	// #0
    4978:	mov	w9, #0xcccd                	// #52429
    497c:	mov	w1, #0x0                   	// #0
    4980:	mov	w8, #0x7fffffff            	// #2147483647
    4984:	movk	w9, #0xcccc, lsl #16
    4988:	b	499c <d_special_name+0x5ac>
    498c:	umull	x2, w2, w9
    4990:	lsr	x2, x2, #35
    4994:	cmp	w2, w1
    4998:	b.lt	45c0 <d_special_name+0x1d0>  // b.tstop
    499c:	add	x5, x5, #0x1
    49a0:	add	w1, w1, w1, lsl #2
    49a4:	str	x5, [x19, #24]
    49a8:	add	w7, w6, w1, lsl #1
    49ac:	ldrb	w6, [x5]
    49b0:	sub	w1, w7, #0x30
    49b4:	sub	w4, w6, #0x30
    49b8:	sub	w2, w8, w4
    49bc:	and	w4, w4, #0xff
    49c0:	cmp	w4, #0x9
    49c4:	b.ls	498c <d_special_name+0x59c>  // b.plast
    49c8:	cbz	w0, 49d4 <d_special_name+0x5e4>
    49cc:	cmp	w7, #0x30
    49d0:	b.ne	45c0 <d_special_name+0x1d0>  // b.any
    49d4:	cmp	w6, #0x5f
    49d8:	b.ne	45c0 <d_special_name+0x1d0>  // b.any
    49dc:	add	x5, x5, #0x1
    49e0:	str	x5, [x19, #24]
    49e4:	mov	x0, x19
    49e8:	bl	e28 <d_type>
    49ec:	mov	x2, x0
    49f0:	ldr	w1, [x19, #72]
    49f4:	mov	x3, x20
    49f8:	mov	x0, x19
    49fc:	add	w1, w1, #0x5
    4a00:	str	w1, [x19, #72]
    4a04:	ldp	x19, x20, [sp, #16]
    4a08:	mov	w1, #0xb                   	// #11
    4a0c:	ldp	x29, x30, [sp], #32
    4a10:	b	0 <d_make_comp>
    4a14:	add	x1, x2, #0x3
    4a18:	str	x1, [x0, #24]
    4a1c:	mov	w9, #0x1                   	// #1
    4a20:	ldrb	w5, [x2, #3]
    4a24:	b	446c <d_special_name+0x7c>
    4a28:	add	x4, x6, #0x1
    4a2c:	str	x4, [x19, #24]
    4a30:	ldrb	w1, [x6, #1]
    4a34:	sub	w0, w1, #0x30
    4a38:	and	w0, w0, #0xff
    4a3c:	cmp	w0, #0x9
    4a40:	b.hi	4c30 <d_special_name+0x840>  // b.pmore
    4a44:	mov	x6, x4
    4a48:	mov	w0, #0x1                   	// #1
    4a4c:	b	4638 <d_special_name+0x248>
    4a50:	mov	x3, #0x0                   	// #0
    4a54:	b	46a4 <d_special_name+0x2b4>
    4a58:	mov	w1, #0x0                   	// #0
    4a5c:	bl	41b8 <d_encoding>
    4a60:	mov	x2, x0
    4a64:	mov	x0, x19
    4a68:	ldp	x19, x20, [sp, #16]
    4a6c:	mov	x3, #0x0                   	// #0
    4a70:	ldp	x29, x30, [sp], #32
    4a74:	mov	w1, #0x4a                  	// #74
    4a78:	b	0 <d_make_comp>
    4a7c:	mov	x0, x19
    4a80:	bl	4c40 <d_expr_primary>
    4a84:	mov	x2, x0
    4a88:	b	4804 <d_special_name+0x414>
    4a8c:	mov	x1, #0x1                   	// #1
    4a90:	b	4a98 <d_special_name+0x6a8>
    4a94:	mov	x1, x4
    4a98:	cmp	w8, w1
    4a9c:	mov	w5, w1
    4aa0:	b.le	45a8 <d_special_name+0x1b8>
    4aa4:	ldrb	w3, [x9, x1]
    4aa8:	add	x4, x1, #0x1
    4aac:	cmp	w3, #0x24
    4ab0:	ccmp	w3, #0x0, #0x4, ne  // ne = any
    4ab4:	b.ne	4a94 <d_special_name+0x6a4>  // b.any
    4ab8:	ldp	w3, w0, [x19, #40]
    4abc:	cmp	w3, w0
    4ac0:	b.ge	45b4 <d_special_name+0x1c4>  // b.tcont
    4ac4:	ldr	x4, [x19, #32]
    4ac8:	add	w0, w3, #0x1
    4acc:	sub	w8, w8, w5
    4ad0:	smaddl	x3, w3, w11, x4
    4ad4:	str	wzr, [x3, #4]
    4ad8:	str	w0, [x19, #40]
    4adc:	stp	xzr, x9, [x3]
    4ae0:	ldr	x9, [x19, #24]
    4ae4:	str	w5, [x3, #16]
    4ae8:	add	x9, x9, x1
    4aec:	str	x9, [x19, #24]
    4af0:	b	4570 <d_special_name+0x180>
    4af4:	mov	x2, x3
    4af8:	b	4588 <d_special_name+0x198>
    4afc:	mov	w0, #0x2e                  	// #46
    4b00:	b	4534 <d_special_name+0x144>
    4b04:	mov	x1, #0xffffffffffffffff    	// #-1
    4b08:	b	46a0 <d_special_name+0x2b0>
    4b0c:	mov	w0, #0x2f                  	// #47
    4b10:	b	4534 <d_special_name+0x144>
    4b14:	cmp	w0, #0x58
    4b18:	b.ne	4c10 <d_special_name+0x820>  // b.any
    4b1c:	add	x2, x2, #0x3
    4b20:	ldr	w20, [x19, #76]
    4b24:	mov	w1, #0x1                   	// #1
    4b28:	str	x2, [x19, #24]
    4b2c:	str	w1, [x19, #76]
    4b30:	mov	x0, x19
    4b34:	bl	2dd0 <d_expression_1>
    4b38:	str	w20, [x19, #76]
    4b3c:	ldr	x1, [x19, #24]
    4b40:	mov	x2, x0
    4b44:	ldrb	w0, [x1]
    4b48:	cmp	w0, #0x45
    4b4c:	b.ne	4c28 <d_special_name+0x838>  // b.any
    4b50:	add	x1, x1, #0x1
    4b54:	str	x1, [x19, #24]
    4b58:	b	4804 <d_special_name+0x414>
    4b5c:	mov	w1, #0x0                   	// #0
    4b60:	bl	c38 <d_call_offset>
    4b64:	cbz	w0, 45c0 <d_special_name+0x1d0>
    4b68:	mov	x0, x19
    4b6c:	mov	w1, #0x0                   	// #0
    4b70:	bl	c38 <d_call_offset>
    4b74:	cbz	w0, 45c0 <d_special_name+0x1d0>
    4b78:	mov	x0, x19
    4b7c:	mov	w1, #0x0                   	// #0
    4b80:	bl	41b8 <d_encoding>
    4b84:	mov	x2, x0
    4b88:	mov	x0, x19
    4b8c:	mov	x3, #0x0                   	// #0
    4b90:	ldp	x19, x20, [sp, #16]
    4b94:	mov	w1, #0x11                  	// #17
    4b98:	ldp	x29, x30, [sp], #32
    4b9c:	b	0 <d_make_comp>
    4ba0:	bl	e28 <d_type>
    4ba4:	mov	x2, x0
    4ba8:	mov	x0, x19
    4bac:	mov	x3, #0x0                   	// #0
    4bb0:	ldp	x19, x20, [sp, #16]
    4bb4:	mov	w1, #0xd                   	// #13
    4bb8:	ldp	x29, x30, [sp], #32
    4bbc:	b	0 <d_make_comp>
    4bc0:	bl	3990 <d_name>
    4bc4:	mov	x2, x0
    4bc8:	mov	x0, x19
    4bcc:	mov	x3, #0x0                   	// #0
    4bd0:	ldp	x19, x20, [sp, #16]
    4bd4:	mov	w1, #0x14                  	// #20
    4bd8:	ldp	x29, x30, [sp], #32
    4bdc:	b	0 <d_make_comp>
    4be0:	str	x9, [x19, #24]
    4be4:	b	45c0 <d_special_name+0x1d0>
    4be8:	add	x1, x5, #0x1
    4bec:	str	x1, [x19, #24]
    4bf0:	ldrb	w6, [x5, #1]
    4bf4:	mov	x5, x1
    4bf8:	sub	w0, w6, #0x30
    4bfc:	and	w0, w0, #0xff
    4c00:	cmp	w0, #0x9
    4c04:	b.hi	49d4 <d_special_name+0x5e4>  // b.pmore
    4c08:	mov	w0, #0x1                   	// #1
    4c0c:	b	4978 <d_special_name+0x588>
    4c10:	mov	x0, x19
    4c14:	bl	e28 <d_type>
    4c18:	mov	x2, x0
    4c1c:	b	4804 <d_special_name+0x414>
    4c20:	mov	x1, #0x0                   	// #0
    4c24:	b	46a0 <d_special_name+0x2b0>
    4c28:	mov	x2, #0x0                   	// #0
    4c2c:	b	4804 <d_special_name+0x414>
    4c30:	mov	w1, #0x0                   	// #0
    4c34:	neg	w1, w1
    4c38:	b	469c <d_special_name+0x2ac>
    4c3c:	nop

0000000000004c40 <d_expr_primary>:
    4c40:	ldr	x2, [x0, #24]
    4c44:	ldrb	w1, [x2]
    4c48:	cmp	w1, #0x4c
    4c4c:	b.ne	4d60 <d_expr_primary+0x120>  // b.any
    4c50:	stp	x29, x30, [sp, #-32]!
    4c54:	add	x1, x2, #0x1
    4c58:	mov	w4, #0x5a                  	// #90
    4c5c:	mov	x29, sp
    4c60:	str	x19, [sp, #16]
    4c64:	mov	x19, x0
    4c68:	str	x1, [x0, #24]
    4c6c:	ldrb	w3, [x2, #1]
    4c70:	cmp	w3, #0x5f
    4c74:	ccmp	w3, w4, #0x4, ne  // ne = any
    4c78:	b.eq	4cf4 <d_expr_primary+0xb4>  // b.none
    4c7c:	bl	e28 <d_type>
    4c80:	mov	x2, x0
    4c84:	cbz	x0, 4ce4 <d_expr_primary+0xa4>
    4c88:	ldr	w0, [x0]
    4c8c:	cmp	w0, #0x27
    4c90:	b.eq	4dd8 <d_expr_primary+0x198>  // b.none
    4c94:	ldr	x0, [x19, #24]
    4c98:	mov	w1, #0x3d                  	// #61
    4c9c:	ldrb	w4, [x0]
    4ca0:	cmp	w4, #0x6e
    4ca4:	b.ne	4cbc <d_expr_primary+0x7c>  // b.any
    4ca8:	add	x3, x0, #0x1
    4cac:	str	x3, [x19, #24]
    4cb0:	mov	w1, #0x3e                  	// #62
    4cb4:	ldrb	w4, [x0, #1]
    4cb8:	mov	x0, x3
    4cbc:	cmp	w4, #0x45
    4cc0:	b.eq	4e00 <d_expr_primary+0x1c0>  // b.none
    4cc4:	add	x3, x0, #0x1
    4cc8:	b	4cdc <d_expr_primary+0x9c>
    4ccc:	str	x3, [x19, #24]
    4cd0:	ldrb	w4, [x3], #1
    4cd4:	cmp	w4, #0x45
    4cd8:	b.eq	4d84 <d_expr_primary+0x144>  // b.none
    4cdc:	mov	x5, x3
    4ce0:	cbnz	w4, 4ccc <d_expr_primary+0x8c>
    4ce4:	mov	x0, #0x0                   	// #0
    4ce8:	ldr	x19, [sp, #16]
    4cec:	ldp	x29, x30, [sp], #32
    4cf0:	ret
    4cf4:	cmp	w3, #0x5f
    4cf8:	b.eq	4d68 <d_expr_primary+0x128>  // b.none
    4cfc:	add	x0, x1, #0x1
    4d00:	str	x0, [x19, #24]
    4d04:	mov	w2, #0x54                  	// #84
    4d08:	ldrb	w0, [x1, #1]
    4d0c:	cmp	w0, #0x47
    4d10:	ccmp	w0, w2, #0x4, ne  // ne = any
    4d14:	b.eq	4d4c <d_expr_primary+0x10c>  // b.none
    4d18:	mov	w1, #0x0                   	// #0
    4d1c:	mov	x0, x19
    4d20:	bl	3f98 <d_encoding.part.0>
    4d24:	ldr	x1, [x19, #24]
    4d28:	ldrb	w2, [x1]
    4d2c:	nop
    4d30:	cmp	w2, #0x45
    4d34:	b.ne	4ce4 <d_expr_primary+0xa4>  // b.any
    4d38:	add	x1, x1, #0x1
    4d3c:	str	x1, [x19, #24]
    4d40:	ldr	x19, [sp, #16]
    4d44:	ldp	x29, x30, [sp], #32
    4d48:	ret
    4d4c:	mov	x0, x19
    4d50:	bl	43f0 <d_special_name>
    4d54:	ldr	x1, [x19, #24]
    4d58:	ldrb	w2, [x1]
    4d5c:	b	4d30 <d_expr_primary+0xf0>
    4d60:	mov	x0, #0x0                   	// #0
    4d64:	ret
    4d68:	add	x1, x2, #0x2
    4d6c:	str	x1, [x19, #24]
    4d70:	mov	x0, #0x0                   	// #0
    4d74:	ldrb	w2, [x2, #2]
    4d78:	cmp	w2, w4
    4d7c:	b.ne	4d30 <d_expr_primary+0xf0>  // b.any
    4d80:	b	4cfc <d_expr_primary+0xbc>
    4d84:	sub	w5, w5, w0
    4d88:	ldp	w3, w4, [x19, #40]
    4d8c:	cmp	w3, w4
    4d90:	b.ge	4df8 <d_expr_primary+0x1b8>  // b.tcont
    4d94:	mov	w4, #0x18                  	// #24
    4d98:	add	w7, w3, #0x1
    4d9c:	ldr	x6, [x19, #32]
    4da0:	smull	x4, w3, w4
    4da4:	cmp	w5, #0x0
    4da8:	add	x3, x6, x4
    4dac:	str	wzr, [x3, #4]
    4db0:	str	w7, [x19, #40]
    4db4:	b.le	4df8 <d_expr_primary+0x1b8>
    4db8:	str	xzr, [x6, x4]
    4dbc:	str	x0, [x3, #8]
    4dc0:	str	w5, [x3, #16]
    4dc4:	mov	x0, x19
    4dc8:	bl	0 <d_make_comp>
    4dcc:	ldr	x1, [x19, #24]
    4dd0:	ldrb	w2, [x1]
    4dd4:	b	4d30 <d_expr_primary+0xf0>
    4dd8:	ldr	x0, [x2, #8]
    4ddc:	ldr	w1, [x0, #28]
    4de0:	cbz	w1, 4c94 <d_expr_primary+0x54>
    4de4:	ldr	w1, [x0, #8]
    4de8:	ldr	w0, [x19, #72]
    4dec:	sub	w0, w0, w1
    4df0:	str	w0, [x19, #72]
    4df4:	b	4c94 <d_expr_primary+0x54>
    4df8:	mov	x3, #0x0                   	// #0
    4dfc:	b	4dc4 <d_expr_primary+0x184>
    4e00:	mov	w5, #0x0                   	// #0
    4e04:	b	4d88 <d_expr_primary+0x148>

0000000000004e08 <d_print_comp_inner>:
    4e08:	stp	x29, x30, [sp, #-256]!
    4e0c:	mov	x29, sp
    4e10:	stp	x19, x20, [sp, #16]
    4e14:	mov	x19, x0
    4e18:	cbz	x2, 4ea4 <d_print_comp_inner+0x9c>
    4e1c:	stp	x21, x22, [sp, #32]
    4e20:	ldr	w21, [x0, #304]
    4e24:	cbnz	w21, 4e6c <d_print_comp_inner+0x64>
    4e28:	ldr	w20, [x2]
    4e2c:	stp	x23, x24, [sp, #48]
    4e30:	mov	x24, x2
    4e34:	cmp	w20, #0x50
    4e38:	b.ls	4e50 <d_print_comp_inner+0x48>  // b.plast
    4e3c:	mov	w0, #0x1                   	// #1
    4e40:	ldp	x21, x22, [sp, #32]
    4e44:	ldp	x23, x24, [sp, #48]
    4e48:	str	w0, [x19, #304]
    4e4c:	b	4e70 <d_print_comp_inner+0x68>
    4e50:	adrp	x0, 0 <d_make_comp>
    4e54:	mov	w22, w1
    4e58:	add	x0, x0, #0x0
    4e5c:	ldrh	w0, [x0, w20, uxtw #1]
    4e60:	adr	x1, 4e6c <d_print_comp_inner+0x64>
    4e64:	add	x0, x1, w0, sxth #2
    4e68:	br	x0
    4e6c:	ldp	x21, x22, [sp, #32]
    4e70:	ldp	x19, x20, [sp, #16]
    4e74:	ldp	x29, x30, [sp], #256
    4e78:	ret
    4e7c:	ldr	x0, [x2, #16]
    4e80:	ldr	w1, [x0]
    4e84:	cmp	w1, #0x3b
    4e88:	b.ne	4e9c <d_print_comp_inner+0x94>  // b.any
    4e8c:	ldr	x0, [x0, #16]
    4e90:	ldr	w0, [x0]
    4e94:	cmp	w0, #0x3c
    4e98:	b.eq	cddc <d_print_comp_inner+0x7fd4>  // b.none
    4e9c:	ldp	x21, x22, [sp, #32]
    4ea0:	ldp	x23, x24, [sp, #48]
    4ea4:	mov	w0, #0x1                   	// #1
    4ea8:	str	w0, [x19, #304]
    4eac:	ldp	x19, x20, [sp, #16]
    4eb0:	ldp	x29, x30, [sp], #256
    4eb4:	ret
    4eb8:	stp	x25, x26, [sp, #64]
    4ebc:	add	x0, sp, #0x80
    4ec0:	ldp	x1, x2, [x19, #288]
    4ec4:	stp	x2, x24, [sp, #128]
    4ec8:	str	wzr, [sp, #144]
    4ecc:	str	x1, [sp, #152]
    4ed0:	ldr	x3, [x24, #8]
    4ed4:	str	x0, [x19, #296]
    4ed8:	mov	x25, x3
    4edc:	cbnz	x25, 84c4 <d_print_comp_inner+0x36bc>
    4ee0:	mov	w0, #0x1                   	// #1
    4ee4:	str	w0, [x19, #304]
    4ee8:	mov	x2, x24
    4eec:	mov	w1, w22
    4ef0:	mov	x0, x19
    4ef4:	bl	ea20 <d_print_mod>
    4ef8:	ldr	x0, [sp, #128]
    4efc:	str	x0, [x19, #296]
    4f00:	cbz	w21, 8538 <d_print_comp_inner+0x3730>
    4f04:	ldp	x21, x22, [sp, #32]
    4f08:	ldp	x25, x26, [sp, #64]
    4f0c:	str	x23, [x19, #288]
    4f10:	ldp	x23, x24, [sp, #48]
    4f14:	b	4e70 <d_print_comp_inner+0x68>
    4f18:	ldr	x2, [x19, #296]
    4f1c:	stp	x25, x26, [sp, #64]
    4f20:	mov	x0, x2
    4f24:	ldr	x25, [x24, #8]
    4f28:	cbz	x2, 4f5c <d_print_comp_inner+0x154>
    4f2c:	nop
    4f30:	ldr	w1, [x0, #16]
    4f34:	cbnz	w1, 4f54 <d_print_comp_inner+0x14c>
    4f38:	ldr	x1, [x0, #8]
    4f3c:	ldr	w1, [x1]
    4f40:	sub	w3, w1, #0x19
    4f44:	cmp	w3, #0x2
    4f48:	b.hi	c434 <d_print_comp_inner+0x762c>  // b.pmore
    4f4c:	cmp	w20, w1
    4f50:	b.eq	c440 <d_print_comp_inner+0x7638>  // b.none
    4f54:	ldr	x0, [x0]
    4f58:	cbnz	x0, 4f30 <d_print_comp_inner+0x128>
    4f5c:	ldr	x4, [x19, #288]
    4f60:	b	5230 <d_print_comp_inner+0x428>
    4f64:	ldr	x20, [x2, #8]
    4f68:	cbz	x20, 4fd4 <d_print_comp_inner+0x1cc>
    4f6c:	ldr	w0, [x20, #4]
    4f70:	cmp	w0, #0x1
    4f74:	b.gt	b750 <d_print_comp_inner+0x6948>
    4f78:	ldr	w1, [x19, #308]
    4f7c:	cmp	w1, #0x400
    4f80:	b.gt	b750 <d_print_comp_inner+0x6948>
    4f84:	ldr	x3, [x19, #328]
    4f88:	add	w0, w0, #0x1
    4f8c:	str	w0, [x20, #4]
    4f90:	add	w1, w1, #0x1
    4f94:	add	x0, sp, #0x80
    4f98:	str	w1, [x19, #308]
    4f9c:	str	x0, [x19, #328]
    4fa0:	mov	w1, w22
    4fa4:	mov	x0, x19
    4fa8:	mov	x2, x20
    4fac:	stp	x20, x3, [sp, #128]
    4fb0:	bl	4e08 <d_print_comp_inner>
    4fb4:	ldr	w1, [x20, #4]
    4fb8:	ldr	x0, [sp, #136]
    4fbc:	str	x0, [x19, #328]
    4fc0:	ldr	w0, [x19, #308]
    4fc4:	sub	w1, w1, #0x1
    4fc8:	str	w1, [x20, #4]
    4fcc:	sub	w0, w0, #0x1
    4fd0:	str	w0, [x19, #308]
    4fd4:	ldr	x0, [x24, #16]
    4fd8:	cbz	x0, c3b8 <d_print_comp_inner+0x75b0>
    4fdc:	ldr	x1, [x19, #256]
    4fe0:	cmp	x1, #0xfd
    4fe4:	b.ls	b820 <d_print_comp_inner+0x6a18>  // b.plast
    4fe8:	strb	wzr, [x19, x1]
    4fec:	mov	x0, x19
    4ff0:	ldp	x3, x2, [x19, #272]
    4ff4:	blr	x3
    4ff8:	ldr	x0, [x19, #320]
    4ffc:	mov	w1, #0x2c                  	// #44
    5000:	mov	x2, #0x1                   	// #1
    5004:	strb	w1, [x19]
    5008:	add	x0, x0, x2
    500c:	str	x0, [x19, #320]
    5010:	add	x21, x2, #0x1
    5014:	str	x21, [x19, #256]
    5018:	mov	w0, #0x20                  	// #32
    501c:	strb	w0, [x19, x2]
    5020:	strb	w0, [x19, #264]
    5024:	ldr	x20, [x24, #16]
    5028:	cbz	x20, 9780 <d_print_comp_inner+0x4978>
    502c:	ldr	w0, [x20, #4]
    5030:	cmp	w0, #0x1
    5034:	b.gt	9780 <d_print_comp_inner+0x4978>
    5038:	ldr	w1, [x19, #308]
    503c:	cmp	w1, #0x400
    5040:	b.gt	9780 <d_print_comp_inner+0x4978>
    5044:	ldp	x23, x3, [x19, #320]
    5048:	add	w0, w0, #0x1
    504c:	str	w0, [x20, #4]
    5050:	add	w1, w1, #0x1
    5054:	add	x0, sp, #0x80
    5058:	str	w1, [x19, #308]
    505c:	str	x0, [x19, #328]
    5060:	mov	w1, w22
    5064:	mov	x0, x19
    5068:	mov	x2, x20
    506c:	stp	x20, x3, [sp, #128]
    5070:	bl	4e08 <d_print_comp_inner>
    5074:	ldr	w1, [x20, #4]
    5078:	ldr	x0, [sp, #136]
    507c:	sub	w1, w1, #0x1
    5080:	str	x0, [x19, #328]
    5084:	ldr	w0, [x19, #308]
    5088:	str	w1, [x20, #4]
    508c:	ldr	x1, [x19, #320]
    5090:	sub	w0, w0, #0x1
    5094:	str	w0, [x19, #308]
    5098:	cmp	x1, x23
    509c:	b.eq	d040 <d_print_comp_inner+0x8238>  // b.none
    50a0:	ldp	x21, x22, [sp, #32]
    50a4:	ldp	x23, x24, [sp, #48]
    50a8:	b	4e70 <d_print_comp_inner+0x68>
    50ac:	ldr	x20, [x2, #8]
    50b0:	cbz	x20, 9160 <d_print_comp_inner+0x4358>
    50b4:	ldr	w0, [x20, #4]
    50b8:	cmp	w0, #0x1
    50bc:	b.gt	9160 <d_print_comp_inner+0x4358>
    50c0:	ldr	w1, [x19, #308]
    50c4:	cmp	w1, #0x400
    50c8:	b.gt	9160 <d_print_comp_inner+0x4358>
    50cc:	ldr	x3, [x19, #328]
    50d0:	add	w0, w0, #0x1
    50d4:	str	w0, [x20, #4]
    50d8:	add	w1, w1, #0x1
    50dc:	add	x0, sp, #0x80
    50e0:	str	w1, [x19, #308]
    50e4:	str	x0, [x19, #328]
    50e8:	mov	w1, w22
    50ec:	mov	x0, x19
    50f0:	mov	x2, x20
    50f4:	stp	x20, x3, [sp, #128]
    50f8:	bl	4e08 <d_print_comp_inner>
    50fc:	ldr	w1, [x20, #4]
    5100:	ldr	x0, [sp, #136]
    5104:	str	x0, [x19, #328]
    5108:	ldr	w0, [x19, #308]
    510c:	sub	w1, w1, #0x1
    5110:	str	w1, [x20, #4]
    5114:	sub	w0, w0, #0x1
    5118:	str	w0, [x19, #308]
    511c:	ldr	x1, [x19, #256]
    5120:	tbz	w22, #2, c01c <d_print_comp_inner+0x7214>
    5124:	add	x0, x1, #0x1
    5128:	cmp	x1, #0xff
    512c:	b.ne	5154 <d_print_comp_inner+0x34c>  // b.any
    5130:	ldp	x3, x2, [x19, #272]
    5134:	strb	wzr, [x19, #255]
    5138:	mov	x0, x19
    513c:	blr	x3
    5140:	ldr	x2, [x19, #320]
    5144:	mov	x0, #0x1                   	// #1
    5148:	mov	x1, #0x0                   	// #0
    514c:	add	x2, x2, x0
    5150:	str	x2, [x19, #320]
    5154:	str	x0, [x19, #256]
    5158:	mov	w2, #0x2e                  	// #46
    515c:	strb	w2, [x19, x1]
    5160:	strb	w2, [x19, #264]
    5164:	ldr	x23, [x24, #16]
    5168:	ldr	w1, [x23]
    516c:	cmp	w1, #0x47
    5170:	b.eq	c870 <d_print_comp_inner+0x7a68>  // b.none
    5174:	ldr	w0, [x23, #4]
    5178:	cmp	w0, #0x1
    517c:	b.gt	914c <d_print_comp_inner+0x4344>
    5180:	ldr	w1, [x19, #308]
    5184:	cmp	w1, #0x400
    5188:	b.gt	914c <d_print_comp_inner+0x4344>
    518c:	ldr	x3, [x19, #328]
    5190:	add	w0, w0, #0x1
    5194:	str	w0, [x23, #4]
    5198:	add	w1, w1, #0x1
    519c:	add	x0, sp, #0x80
    51a0:	str	w1, [x19, #308]
    51a4:	str	x0, [x19, #328]
    51a8:	mov	w1, w22
    51ac:	mov	x2, x23
    51b0:	mov	x0, x19
    51b4:	stp	x23, x3, [sp, #128]
    51b8:	bl	4e08 <d_print_comp_inner>
    51bc:	ldr	w1, [x23, #4]
    51c0:	ldr	x0, [sp, #136]
    51c4:	sub	w1, w1, #0x1
    51c8:	ldp	x21, x22, [sp, #32]
    51cc:	str	x0, [x19, #328]
    51d0:	ldr	w0, [x19, #308]
    51d4:	str	w1, [x23, #4]
    51d8:	sub	w0, w0, #0x1
    51dc:	ldp	x23, x24, [sp, #48]
    51e0:	str	w0, [x19, #308]
    51e4:	b	4e70 <d_print_comp_inner+0x68>
    51e8:	ldr	w0, [x19, #312]
    51ec:	ldr	x3, [x2, #8]
    51f0:	stp	x25, x26, [sp, #64]
    51f4:	mov	x25, x3
    51f8:	ldr	w1, [x3]
    51fc:	cbnz	w0, 9894 <d_print_comp_inner+0x4a8c>
    5200:	cmp	w1, #0x5
    5204:	b.eq	cc54 <d_print_comp_inner+0x7e4c>  // b.none
    5208:	ldr	x4, [x19, #288]
    520c:	mov	x0, x3
    5210:	mov	w21, #0x0                   	// #0
    5214:	cmp	w1, #0x23
    5218:	ldr	x2, [x19, #296]
    521c:	b.eq	979c <d_print_comp_inner+0x4994>  // b.none
    5220:	cmp	w20, w1
    5224:	b.eq	979c <d_print_comp_inner+0x4994>  // b.none
    5228:	cmp	w1, #0x24
    522c:	b.eq	84a8 <d_print_comp_inner+0x36a0>  // b.none
    5230:	add	x0, sp, #0x80
    5234:	stp	x2, x24, [sp, #128]
    5238:	str	wzr, [sp, #144]
    523c:	str	x4, [sp, #152]
    5240:	str	x0, [x19, #296]
    5244:	b	4edc <d_print_comp_inner+0xd4>
    5248:	ldr	x20, [x24, #16]
    524c:	add	x0, sp, #0x80
    5250:	ldp	x1, x2, [x19, #288]
    5254:	stp	x2, x24, [sp, #128]
    5258:	str	wzr, [sp, #144]
    525c:	str	x1, [sp, #152]
    5260:	str	x0, [x19, #296]
    5264:	cbz	x20, 9218 <d_print_comp_inner+0x4410>
    5268:	ldr	w0, [x20, #4]
    526c:	cmp	w0, #0x1
    5270:	b.gt	9218 <d_print_comp_inner+0x4410>
    5274:	ldr	w1, [x19, #308]
    5278:	cmp	w1, #0x400
    527c:	b.gt	9218 <d_print_comp_inner+0x4410>
    5280:	ldr	x3, [x19, #328]
    5284:	add	w0, w0, #0x1
    5288:	str	w0, [x20, #4]
    528c:	add	w1, w1, #0x1
    5290:	add	x0, sp, #0x70
    5294:	str	w1, [x19, #308]
    5298:	str	x0, [x19, #328]
    529c:	mov	x2, x20
    52a0:	mov	w1, w22
    52a4:	mov	x0, x19
    52a8:	stp	x20, x3, [sp, #112]
    52ac:	bl	4e08 <d_print_comp_inner>
    52b0:	ldr	w1, [x20, #4]
    52b4:	ldr	x0, [sp, #120]
    52b8:	str	x0, [x19, #328]
    52bc:	ldr	w2, [sp, #144]
    52c0:	sub	w1, w1, #0x1
    52c4:	ldr	w0, [x19, #308]
    52c8:	str	w1, [x20, #4]
    52cc:	sub	w0, w0, #0x1
    52d0:	str	w0, [x19, #308]
    52d4:	cbz	w2, 9220 <d_print_comp_inner+0x4418>
    52d8:	ldr	x0, [sp, #128]
    52dc:	ldp	x21, x22, [sp, #32]
    52e0:	ldp	x23, x24, [sp, #48]
    52e4:	str	x0, [x19, #296]
    52e8:	b	4e70 <d_print_comp_inner+0x68>
    52ec:	ldr	x23, [x2, #8]
    52f0:	mov	w21, #0x0                   	// #0
    52f4:	ldr	w0, [x23]
    52f8:	cmp	w0, #0x27
    52fc:	b.eq	bc64 <d_print_comp_inner+0x6e5c>  // b.none
    5300:	ldr	x0, [x19, #256]
    5304:	cmp	x0, #0xff
    5308:	b.eq	c148 <d_print_comp_inner+0x7340>  // b.none
    530c:	add	x1, x0, #0x1
    5310:	str	x1, [x19, #256]
    5314:	mov	w2, #0x28                  	// #40
    5318:	strb	w2, [x19, x0]
    531c:	strb	w2, [x19, #264]
    5320:	ldr	w0, [x23, #4]
    5324:	cmp	w0, #0x1
    5328:	b.gt	97b4 <d_print_comp_inner+0x49ac>
    532c:	ldr	w2, [x19, #308]
    5330:	cmp	w2, #0x400
    5334:	b.gt	97b4 <d_print_comp_inner+0x49ac>
    5338:	ldr	x3, [x19, #328]
    533c:	add	w0, w0, #0x1
    5340:	str	w0, [x23, #4]
    5344:	add	w2, w2, #0x1
    5348:	add	x0, sp, #0x80
    534c:	str	w2, [x19, #308]
    5350:	str	x0, [x19, #328]
    5354:	mov	w1, w22
    5358:	mov	x2, x23
    535c:	mov	x0, x19
    5360:	stp	x23, x3, [sp, #128]
    5364:	bl	4e08 <d_print_comp_inner>
    5368:	ldr	w2, [x23, #4]
    536c:	ldr	x0, [sp, #136]
    5370:	str	x0, [x19, #328]
    5374:	ldr	w0, [x19, #308]
    5378:	sub	w2, w2, #0x1
    537c:	ldr	x1, [x19, #256]
    5380:	str	w2, [x23, #4]
    5384:	sub	w0, w0, #0x1
    5388:	str	w0, [x19, #308]
    538c:	cmp	x1, #0xff
    5390:	b.ne	b75c <d_print_comp_inner+0x6954>  // b.any
    5394:	ldp	x3, x2, [x19, #272]
    5398:	strb	wzr, [x19, #255]
    539c:	mov	x0, x19
    53a0:	blr	x3
    53a4:	ldr	x1, [x19, #320]
    53a8:	mov	w0, #0x29                  	// #41
    53ac:	strb	w0, [x19]
    53b0:	strb	w0, [x19, #264]
    53b4:	mov	x0, #0x1                   	// #1
    53b8:	add	x1, x1, x0
    53bc:	str	x0, [x19, #256]
    53c0:	str	x1, [x19, #320]
    53c4:	ldr	w1, [x24]
    53c8:	cmp	w1, #0x3e
    53cc:	b.eq	c0a8 <d_print_comp_inner+0x72a0>  // b.none
    53d0:	cmp	w21, #0x8
    53d4:	b.eq	b7b0 <d_print_comp_inner+0x69a8>  // b.none
    53d8:	ldr	x20, [x24, #16]
    53dc:	cbz	x20, 9398 <d_print_comp_inner+0x4590>
    53e0:	ldr	w0, [x20, #4]
    53e4:	cmp	w0, #0x1
    53e8:	b.gt	9398 <d_print_comp_inner+0x4590>
    53ec:	ldr	w1, [x19, #308]
    53f0:	cmp	w1, #0x400
    53f4:	b.gt	9398 <d_print_comp_inner+0x4590>
    53f8:	ldr	x3, [x19, #328]
    53fc:	add	w0, w0, #0x1
    5400:	str	w0, [x20, #4]
    5404:	add	w1, w1, #0x1
    5408:	add	x0, sp, #0x80
    540c:	str	w1, [x19, #308]
    5410:	str	x0, [x19, #328]
    5414:	mov	w1, w22
    5418:	mov	x0, x19
    541c:	mov	x2, x20
    5420:	stp	x20, x3, [sp, #128]
    5424:	bl	4e08 <d_print_comp_inner>
    5428:	ldr	w1, [x20, #4]
    542c:	ldr	x0, [sp, #136]
    5430:	str	x0, [x19, #328]
    5434:	ldr	w0, [x19, #308]
    5438:	sub	w1, w1, #0x1
    543c:	str	w1, [x20, #4]
    5440:	sub	w0, w0, #0x1
    5444:	str	w0, [x19, #308]
    5448:	cmp	w21, #0x8
    544c:	b.eq	c33c <d_print_comp_inner+0x7534>  // b.none
    5450:	ldp	x21, x22, [sp, #32]
    5454:	ldp	x23, x24, [sp, #48]
    5458:	b	4e70 <d_print_comp_inner+0x68>
    545c:	ldr	x0, [x19, #256]
    5460:	cmp	x0, #0xff
    5464:	b.eq	af90 <d_print_comp_inner+0x6188>  // b.none
    5468:	add	x1, x0, #0x1
    546c:	str	x1, [x19, #256]
    5470:	mov	w2, #0x6f                  	// #111
    5474:	strb	w2, [x19, x0]
    5478:	strb	w2, [x19, #264]
    547c:	cmp	x1, #0xff
    5480:	b.ne	a8dc <d_print_comp_inner+0x5ad4>  // b.any
    5484:	ldp	x3, x2, [x19, #272]
    5488:	strb	wzr, [x19, #255]
    548c:	mov	x0, x19
    5490:	blr	x3
    5494:	ldr	x0, [x19, #320]
    5498:	mov	w2, #0x6570                	// #25968
    549c:	mov	w1, #0x72                  	// #114
    54a0:	mov	x3, #0x3                   	// #3
    54a4:	add	x0, x0, #0x1
    54a8:	strh	w2, [x19]
    54ac:	strb	w1, [x19, #2]
    54b0:	str	x0, [x19, #320]
    54b4:	add	x1, x3, #0x1
    54b8:	str	x1, [x19, #256]
    54bc:	mov	w0, #0x61                  	// #97
    54c0:	strb	w0, [x19, x3]
    54c4:	strb	w0, [x19, #264]
    54c8:	cmp	x1, #0xff
    54cc:	b.ne	a92c <d_print_comp_inner+0x5b24>  // b.any
    54d0:	ldp	x3, x2, [x19, #272]
    54d4:	strb	wzr, [x19, #255]
    54d8:	mov	x0, x19
    54dc:	blr	x3
    54e0:	ldr	x0, [x19, #320]
    54e4:	mov	w2, #0x6f74                	// #28532
    54e8:	mov	x1, #0x2                   	// #2
    54ec:	strh	w2, [x19]
    54f0:	add	x0, x0, #0x1
    54f4:	str	x0, [x19, #320]
    54f8:	add	x0, x1, #0x1
    54fc:	mov	w2, #0x72                  	// #114
    5500:	strb	w2, [x19, x1]
    5504:	add	x3, x0, #0x1
    5508:	str	x3, [x19, #256]
    550c:	mov	w1, #0x20                  	// #32
    5510:	strb	w1, [x19, x0]
    5514:	strb	w1, [x19, #264]
    5518:	ldr	x0, [x19, #368]
    551c:	cbz	x0, 5530 <d_print_comp_inner+0x728>
    5520:	ldr	x2, [x19, #288]
    5524:	add	x1, sp, #0x70
    5528:	stp	x2, x0, [sp, #112]
    552c:	str	x1, [x19, #288]
    5530:	ldr	x20, [x24, #8]
    5534:	ldr	w1, [x20]
    5538:	cmp	w1, #0x4
    553c:	b.eq	bda8 <d_print_comp_inner+0x6fa0>  // b.none
    5540:	ldr	w1, [x20, #4]
    5544:	cmp	w1, #0x1
    5548:	b.gt	97a8 <d_print_comp_inner+0x49a0>
    554c:	ldr	w2, [x19, #308]
    5550:	cmp	w2, #0x400
    5554:	b.gt	97a8 <d_print_comp_inner+0x49a0>
    5558:	ldr	x3, [x19, #328]
    555c:	add	w1, w1, #0x1
    5560:	str	w1, [x20, #4]
    5564:	add	w2, w2, #0x1
    5568:	add	x0, sp, #0x80
    556c:	str	w2, [x19, #308]
    5570:	str	x0, [x19, #328]
    5574:	mov	w1, w22
    5578:	mov	x2, x20
    557c:	mov	x0, x19
    5580:	stp	x20, x3, [sp, #128]
    5584:	bl	4e08 <d_print_comp_inner>
    5588:	ldr	w2, [x20, #4]
    558c:	ldr	x0, [sp, #136]
    5590:	str	x0, [x19, #328]
    5594:	ldr	w1, [x19, #308]
    5598:	sub	w2, w2, #0x1
    559c:	ldr	x0, [x19, #368]
    55a0:	str	w2, [x20, #4]
    55a4:	sub	w1, w1, #0x1
    55a8:	str	w1, [x19, #308]
    55ac:	cbz	x0, ca20 <d_print_comp_inner+0x7c18>
    55b0:	ldr	x0, [sp, #112]
    55b4:	ldp	x21, x22, [sp, #32]
    55b8:	ldp	x23, x24, [sp, #48]
    55bc:	str	x0, [x19, #288]
    55c0:	b	4e70 <d_print_comp_inner+0x68>
    55c4:	ldr	x20, [x2, #8]
    55c8:	ldr	x0, [x19, #256]
    55cc:	cmp	x0, #0xff
    55d0:	cbnz	x20, 9a18 <d_print_comp_inner+0x4c10>
    55d4:	b.eq	ce80 <d_print_comp_inner+0x8078>  // b.none
    55d8:	add	x1, x0, #0x1
    55dc:	str	x1, [x19, #256]
    55e0:	mov	w2, #0x74                  	// #116
    55e4:	strb	w2, [x19, x0]
    55e8:	strb	w2, [x19, #264]
    55ec:	cmp	x1, #0xff
    55f0:	b.ne	c460 <d_print_comp_inner+0x7658>  // b.any
    55f4:	ldp	x3, x2, [x19, #272]
    55f8:	strb	wzr, [x19, #255]
    55fc:	mov	x0, x19
    5600:	blr	x3
    5604:	ldr	x0, [x19, #320]
    5608:	mov	w2, #0x68                  	// #104
    560c:	mov	x1, #0x1                   	// #1
    5610:	strb	w2, [x19]
    5614:	add	x0, x0, x1
    5618:	str	x0, [x19, #320]
    561c:	add	x0, x1, #0x1
    5620:	mov	w2, #0x69                  	// #105
    5624:	strb	w2, [x19, x1]
    5628:	add	x1, x0, #0x1
    562c:	str	x1, [x19, #256]
    5630:	mov	w1, #0x73                  	// #115
    5634:	strb	w1, [x19, x0]
    5638:	strb	w1, [x19, #264]
    563c:	ldp	x21, x22, [sp, #32]
    5640:	ldp	x23, x24, [sp, #48]
    5644:	b	4e70 <d_print_comp_inner+0x68>
    5648:	ldr	x20, [x2, #16]
    564c:	cbz	x20, 916c <d_print_comp_inner+0x4364>
    5650:	ldr	w0, [x20, #4]
    5654:	cmp	w0, #0x1
    5658:	b.gt	916c <d_print_comp_inner+0x4364>
    565c:	ldr	w1, [x19, #308]
    5660:	cmp	w1, #0x400
    5664:	b.gt	916c <d_print_comp_inner+0x4364>
    5668:	ldr	x3, [x19, #328]
    566c:	add	w0, w0, #0x1
    5670:	str	w0, [x20, #4]
    5674:	add	w1, w1, #0x1
    5678:	add	x0, sp, #0x80
    567c:	str	w1, [x19, #308]
    5680:	str	x0, [x19, #328]
    5684:	mov	w1, w22
    5688:	mov	x0, x19
    568c:	mov	x2, x20
    5690:	stp	x20, x3, [sp, #128]
    5694:	bl	4e08 <d_print_comp_inner>
    5698:	ldr	w1, [x20, #4]
    569c:	ldr	x0, [sp, #136]
    56a0:	sub	w1, w1, #0x1
    56a4:	ldp	x21, x22, [sp, #32]
    56a8:	ldp	x23, x24, [sp, #48]
    56ac:	str	x0, [x19, #328]
    56b0:	ldr	w0, [x19, #308]
    56b4:	str	w1, [x20, #4]
    56b8:	sub	w0, w0, #0x1
    56bc:	str	w0, [x19, #308]
    56c0:	b	4e70 <d_print_comp_inner+0x68>
    56c4:	ldrsw	x21, [x2, #16]
    56c8:	ldr	x20, [x2, #8]
    56cc:	tbnz	w22, #2, 9928 <d_print_comp_inner+0x4b20>
    56d0:	cbz	x21, d85c <d_print_comp_inner+0x8a54>
    56d4:	add	x22, x20, x21
    56d8:	mov	x23, #0x1                   	// #1
    56dc:	ldr	x1, [x19, #256]
    56e0:	b	573c <d_print_comp_inner+0x934>
    56e4:	ldp	x3, x2, [x19, #272]
    56e8:	strb	wzr, [x19, #255]
    56ec:	mov	x0, x19
    56f0:	add	x20, x20, #0x1
    56f4:	blr	x3
    56f8:	strb	w21, [x19]
    56fc:	ldr	x0, [x19, #320]
    5700:	str	x23, [x19, #256]
    5704:	strb	w21, [x19, #264]
    5708:	cmp	x20, x22
    570c:	add	x0, x0, #0x1
    5710:	str	x0, [x19, #320]
    5714:	b.eq	d0bc <d_print_comp_inner+0x82b4>  // b.none
    5718:	ldrb	w21, [x20]
    571c:	mov	x0, #0x1                   	// #1
    5720:	add	x1, x0, #0x1
    5724:	str	x1, [x19, #256]
    5728:	strb	w21, [x19, x0]
    572c:	add	x20, x20, #0x1
    5730:	strb	w21, [x19, #264]
    5734:	cmp	x22, x20
    5738:	b.eq	c3e8 <d_print_comp_inner+0x75e0>  // b.none
    573c:	ldrb	w21, [x20]
    5740:	cmp	x1, #0xff
    5744:	b.eq	56e4 <d_print_comp_inner+0x8dc>  // b.none
    5748:	mov	x0, x1
    574c:	b	5720 <d_print_comp_inner+0x918>
    5750:	stp	x25, x26, [sp, #64]
    5754:	ldr	x25, [x2, #8]
    5758:	ldr	x23, [x19, #296]
    575c:	str	xzr, [x19, #296]
    5760:	cbz	x25, cbb0 <d_print_comp_inner+0x7da8>
    5764:	ldr	w4, [x25]
    5768:	ldr	x3, [x19, #288]
    576c:	stp	xzr, x25, [sp, #128]
    5770:	sub	w1, w4, #0x1c
    5774:	str	wzr, [sp, #144]
    5778:	cmp	w1, #0x34
    577c:	str	x3, [sp, #152]
    5780:	b.hi	579c <d_print_comp_inner+0x994>  // b.pmore
    5784:	mov	x0, #0x1                   	// #1
    5788:	mov	x2, #0x1f                  	// #31
    578c:	movk	x2, #0x1a, lsl #48
    5790:	lsl	x1, x0, x1
    5794:	tst	x1, x2
    5798:	b.ne	9b60 <d_print_comp_inner+0x4d58>  // b.any
    579c:	add	x21, sp, #0x80
    57a0:	mov	w20, #0x1                   	// #1
    57a4:	mov	x1, x21
    57a8:	str	x1, [x19, #296]
    57ac:	cmp	w4, #0x2
    57b0:	b.eq	ca40 <d_print_comp_inner+0x7c38>  // b.none
    57b4:	cmp	w4, #0x4
    57b8:	b.ne	57c8 <d_print_comp_inner+0x9c0>  // b.any
    57bc:	add	x0, sp, #0x60
    57c0:	stp	x3, x25, [sp, #96]
    57c4:	str	x0, [x19, #288]
    57c8:	ldr	x24, [x24, #16]
    57cc:	cbz	x24, b7c8 <d_print_comp_inner+0x69c0>
    57d0:	ldr	w0, [x24, #4]
    57d4:	cmp	w0, #0x1
    57d8:	b.gt	b7c8 <d_print_comp_inner+0x69c0>
    57dc:	ldr	w1, [x19, #308]
    57e0:	cmp	w1, #0x400
    57e4:	b.gt	b7c8 <d_print_comp_inner+0x69c0>
    57e8:	ldr	x3, [x19, #328]
    57ec:	add	w0, w0, #0x1
    57f0:	str	w0, [x24, #4]
    57f4:	add	w1, w1, #0x1
    57f8:	add	x0, sp, #0x70
    57fc:	str	w1, [x19, #308]
    5800:	str	x0, [x19, #328]
    5804:	mov	w1, w22
    5808:	mov	x0, x19
    580c:	mov	x2, x24
    5810:	stp	x24, x3, [sp, #112]
    5814:	bl	4e08 <d_print_comp_inner>
    5818:	ldr	w1, [x24, #4]
    581c:	ldr	x0, [sp, #120]
    5820:	str	x0, [x19, #328]
    5824:	ldr	w0, [x19, #308]
    5828:	sub	w1, w1, #0x1
    582c:	str	w1, [x24, #4]
    5830:	sub	w0, w0, #0x1
    5834:	str	w0, [x19, #308]
    5838:	ldr	w0, [x25]
    583c:	cmp	w0, #0x4
    5840:	b.ne	584c <d_print_comp_inner+0xa44>  // b.any
    5844:	ldr	x0, [sp, #96]
    5848:	str	x0, [x19, #288]
    584c:	sub	w20, w20, #0x1
    5850:	mov	w24, #0x20                  	// #32
    5854:	ubfiz	x0, x20, #5, #32
    5858:	add	x21, x21, x0
    585c:	b	5864 <d_print_comp_inner+0xa5c>
    5860:	sub	w20, w20, #0x1
    5864:	ldr	w0, [x21, #16]
    5868:	cbnz	w0, 58c0 <d_print_comp_inner+0xab8>
    586c:	ldr	x0, [x19, #256]
    5870:	add	x1, x0, #0x1
    5874:	cmp	x0, #0xff
    5878:	b.ne	58a4 <d_print_comp_inner+0xa9c>  // b.any
    587c:	ldp	x3, x2, [x19, #272]
    5880:	strb	wzr, [x19, #255]
    5884:	mov	x1, x0
    5888:	mov	x0, x19
    588c:	blr	x3
    5890:	ldr	x2, [x19, #320]
    5894:	mov	x1, #0x1                   	// #1
    5898:	mov	x0, #0x0                   	// #0
    589c:	add	x2, x2, x1
    58a0:	str	x2, [x19, #320]
    58a4:	str	x1, [x19, #256]
    58a8:	mov	w1, w22
    58ac:	ldr	x2, [x21, #8]
    58b0:	strb	w24, [x19, x0]
    58b4:	strb	w24, [x19, #264]
    58b8:	mov	x0, x19
    58bc:	bl	ea20 <d_print_mod>
    58c0:	sub	x21, x21, #0x20
    58c4:	cbnz	w20, 5860 <d_print_comp_inner+0xa58>
    58c8:	ldp	x21, x22, [sp, #32]
    58cc:	ldp	x25, x26, [sp, #64]
    58d0:	str	x23, [x19, #296]
    58d4:	ldp	x23, x24, [sp, #48]
    58d8:	b	4e70 <d_print_comp_inner+0x68>
    58dc:	and	w20, w22, #0xffffff9f
    58e0:	ldr	x3, [x19, #296]
    58e4:	tbnz	w22, #5, c204 <d_print_comp_inner+0x73fc>
    58e8:	ldr	x2, [x2, #8]
    58ec:	cbz	x2, 58f4 <d_print_comp_inner+0xaec>
    58f0:	tbz	w22, #6, cbd4 <d_print_comp_inner+0x7dcc>
    58f4:	add	x2, x24, #0x10
    58f8:	mov	w1, w20
    58fc:	mov	x0, x19
    5900:	bl	11210 <d_print_function_type.isra.0>
    5904:	ldp	x21, x22, [sp, #32]
    5908:	ldp	x23, x24, [sp, #48]
    590c:	b	4e70 <d_print_comp_inner+0x68>
    5910:	ldp	x1, x23, [x19, #288]
    5914:	add	x21, sp, #0x80
    5918:	stp	x23, x2, [sp, #128]
    591c:	mov	w20, #0x1                   	// #1
    5920:	mov	x5, x21
    5924:	str	wzr, [sp, #144]
    5928:	mov	w6, w20
    592c:	str	x1, [sp, #152]
    5930:	str	x21, [x19, #296]
    5934:	mov	x0, x23
    5938:	cbnz	x23, 5984 <d_print_comp_inner+0xb7c>
    593c:	b	5998 <d_print_comp_inner+0xb90>
    5940:	ldr	w1, [x0, #16]
    5944:	cbnz	w1, 597c <d_print_comp_inner+0xb74>
    5948:	cmp	w20, #0x3
    594c:	b.hi	ca2c <d_print_comp_inner+0x7c24>  // b.pmore
    5950:	ubfiz	x1, x20, #5, #32
    5954:	add	w20, w20, #0x1
    5958:	add	x4, x21, x1
    595c:	ldp	x2, x3, [x0]
    5960:	stp	x2, x3, [x4]
    5964:	ldp	x2, x3, [x0, #16]
    5968:	stp	x2, x3, [x4, #16]
    596c:	str	x5, [x21, x1]
    5970:	mov	x5, x4
    5974:	str	x4, [x19, #296]
    5978:	str	w6, [x0, #16]
    597c:	ldr	x0, [x0]
    5980:	cbz	x0, 5998 <d_print_comp_inner+0xb90>
    5984:	ldr	x1, [x0, #8]
    5988:	ldr	w1, [x1]
    598c:	sub	w1, w1, #0x19
    5990:	cmp	w1, #0x2
    5994:	b.ls	5940 <d_print_comp_inner+0xb38>  // b.plast
    5998:	stp	x25, x26, [sp, #64]
    599c:	ldr	x25, [x24, #16]
    59a0:	cbz	x25, 9740 <d_print_comp_inner+0x4938>
    59a4:	ldr	w0, [x25, #4]
    59a8:	cmp	w0, #0x1
    59ac:	b.gt	9740 <d_print_comp_inner+0x4938>
    59b0:	ldr	w1, [x19, #308]
    59b4:	cmp	w1, #0x400
    59b8:	b.gt	9740 <d_print_comp_inner+0x4938>
    59bc:	ldr	x3, [x19, #328]
    59c0:	add	w0, w0, #0x1
    59c4:	str	w0, [x25, #4]
    59c8:	add	w1, w1, #0x1
    59cc:	add	x0, sp, #0x70
    59d0:	str	w1, [x19, #308]
    59d4:	str	x0, [x19, #328]
    59d8:	mov	w1, w22
    59dc:	mov	x0, x19
    59e0:	mov	x2, x25
    59e4:	stp	x25, x3, [sp, #112]
    59e8:	bl	4e08 <d_print_comp_inner>
    59ec:	ldr	w1, [x25, #4]
    59f0:	ldr	x0, [sp, #120]
    59f4:	str	x0, [x19, #328]
    59f8:	ldr	w0, [x19, #308]
    59fc:	sub	w1, w1, #0x1
    5a00:	str	w1, [x25, #4]
    5a04:	sub	w0, w0, #0x1
    5a08:	str	w0, [x19, #308]
    5a0c:	ldr	w0, [sp, #144]
    5a10:	str	x23, [x19, #296]
    5a14:	cbnz	w0, c3f4 <d_print_comp_inner+0x75ec>
    5a18:	ubfiz	x0, x20, #5, #32
    5a1c:	cmp	w20, #0x1
    5a20:	add	x21, x21, x0
    5a24:	b.eq	5a48 <d_print_comp_inner+0xc40>  // b.none
    5a28:	ldur	x2, [x21, #-24]
    5a2c:	sub	w20, w20, #0x1
    5a30:	mov	w1, w22
    5a34:	mov	x0, x19
    5a38:	sub	x21, x21, #0x20
    5a3c:	bl	ea20 <d_print_mod>
    5a40:	cmp	w20, #0x1
    5a44:	b.ne	5a28 <d_print_comp_inner+0xc20>  // b.any
    5a48:	ldr	x3, [x19, #296]
    5a4c:	add	x2, x24, #0x8
    5a50:	mov	w1, w22
    5a54:	mov	x0, x19
    5a58:	bl	10ee0 <d_print_array_type.isra.0>
    5a5c:	ldp	x21, x22, [sp, #32]
    5a60:	ldp	x23, x24, [sp, #48]
    5a64:	ldp	x25, x26, [sp, #64]
    5a68:	b	4e70 <d_print_comp_inner+0x68>
    5a6c:	ldr	x1, [x2, #8]
    5a70:	mov	x0, x19
    5a74:	stp	x25, x26, [sp, #64]
    5a78:	mov	w26, #0x0                   	// #0
    5a7c:	bl	360 <d_find_pack>
    5a80:	cbz	x0, d308 <d_print_comp_inner+0x8500>
    5a84:	nop
    5a88:	ldr	w1, [x0]
    5a8c:	cmp	w1, #0x2f
    5a90:	b.ne	9770 <d_print_comp_inner+0x4968>  // b.any
    5a94:	ldr	x1, [x0, #8]
    5a98:	cbz	x1, 9770 <d_print_comp_inner+0x4968>
    5a9c:	ldr	x0, [x0, #16]
    5aa0:	add	w26, w26, #0x1
    5aa4:	cbnz	x0, 5a88 <d_print_comp_inner+0xc80>
    5aa8:	ldr	x20, [x24, #8]
    5aac:	str	x27, [sp, #80]
    5ab0:	sub	w27, w26, #0x1
    5ab4:	cmp	w27, #0x0
    5ab8:	b.le	8f70 <d_print_comp_inner+0x4168>
    5abc:	add	x25, sp, #0x80
    5ac0:	mov	w23, #0x1                   	// #1
    5ac4:	mov	w24, #0x2c                  	// #44
    5ac8:	b	5b68 <d_print_comp_inner+0xd60>
    5acc:	ldr	w1, [x19, #308]
    5ad0:	cmp	w1, #0x400
    5ad4:	b.gt	5b7c <d_print_comp_inner+0xd74>
    5ad8:	ldr	x3, [x19, #328]
    5adc:	add	w0, w0, #0x1
    5ae0:	str	w0, [x20, #4]
    5ae4:	add	w1, w1, #0x1
    5ae8:	str	w1, [x19, #308]
    5aec:	mov	x0, x19
    5af0:	str	x25, [x19, #328]
    5af4:	mov	w1, w22
    5af8:	mov	x2, x20
    5afc:	stp	x20, x3, [sp, #128]
    5b00:	bl	4e08 <d_print_comp_inner>
    5b04:	ldr	w1, [x20, #4]
    5b08:	ldr	x0, [sp, #136]
    5b0c:	str	x0, [x19, #328]
    5b10:	ldr	w0, [x19, #308]
    5b14:	sub	w1, w1, #0x1
    5b18:	str	w1, [x20, #4]
    5b1c:	sub	w0, w0, #0x1
    5b20:	str	w0, [x19, #308]
    5b24:	ldr	x0, [x19, #256]
    5b28:	cmp	x0, #0xff
    5b2c:	b.eq	8570 <d_print_comp_inner+0x3768>  // b.none
    5b30:	add	x1, x0, #0x1
    5b34:	str	x1, [x19, #256]
    5b38:	strb	w24, [x19, x0]
    5b3c:	cmp	x1, #0xff
    5b40:	strb	w24, [x19, #264]
    5b44:	b.eq	8548 <d_print_comp_inner+0x3740>  // b.none
    5b48:	add	x0, x0, #0x2
    5b4c:	str	x0, [x19, #256]
    5b50:	mov	w0, #0x20                  	// #32
    5b54:	strb	w0, [x19, x1]
    5b58:	add	w21, w21, #0x1
    5b5c:	strb	w0, [x19, #264]
    5b60:	cmp	w21, w27
    5b64:	b.ge	9010 <d_print_comp_inner+0x4208>  // b.tcont
    5b68:	str	w21, [x19, #316]
    5b6c:	cbz	x20, 5b7c <d_print_comp_inner+0xd74>
    5b70:	ldr	w0, [x20, #4]
    5b74:	cmp	w0, #0x1
    5b78:	b.le	5acc <d_print_comp_inner+0xcc4>
    5b7c:	str	w23, [x19, #304]
    5b80:	b	5b24 <d_print_comp_inner+0xd1c>
    5b84:	ldr	x20, [x2, #8]
    5b88:	cbz	x20, 924c <d_print_comp_inner+0x4444>
    5b8c:	ldr	w0, [x20, #4]
    5b90:	cmp	w0, #0x1
    5b94:	b.gt	924c <d_print_comp_inner+0x4444>
    5b98:	ldr	w1, [x19, #308]
    5b9c:	cmp	w1, #0x400
    5ba0:	b.gt	924c <d_print_comp_inner+0x4444>
    5ba4:	ldr	x3, [x19, #328]
    5ba8:	add	w0, w0, #0x1
    5bac:	str	w0, [x20, #4]
    5bb0:	add	w1, w1, #0x1
    5bb4:	add	x0, sp, #0x80
    5bb8:	str	w1, [x19, #308]
    5bbc:	str	x0, [x19, #328]
    5bc0:	mov	w1, w22
    5bc4:	mov	x0, x19
    5bc8:	mov	x2, x20
    5bcc:	stp	x20, x3, [sp, #128]
    5bd0:	bl	4e08 <d_print_comp_inner>
    5bd4:	ldr	w1, [x20, #4]
    5bd8:	ldr	x0, [sp, #136]
    5bdc:	str	x0, [x19, #328]
    5be0:	ldr	w0, [x19, #308]
    5be4:	sub	w1, w1, #0x1
    5be8:	str	w1, [x20, #4]
    5bec:	sub	w0, w0, #0x1
    5bf0:	str	w0, [x19, #308]
    5bf4:	ldr	x0, [x19, #256]
    5bf8:	cmp	x0, #0xff
    5bfc:	b.eq	bbc0 <d_print_comp_inner+0x6db8>  // b.none
    5c00:	add	x1, x0, #0x1
    5c04:	str	x1, [x19, #256]
    5c08:	mov	w2, #0x5b                  	// #91
    5c0c:	strb	w2, [x19, x0]
    5c10:	strb	w2, [x19, #264]
    5c14:	cmp	x1, #0xff
    5c18:	b.ne	a284 <d_print_comp_inner+0x547c>  // b.any
    5c1c:	ldp	x3, x2, [x19, #272]
    5c20:	strb	wzr, [x19, #255]
    5c24:	mov	x0, x19
    5c28:	blr	x3
    5c2c:	ldr	x0, [x19, #320]
    5c30:	mov	w1, #0x6261                	// #25185
    5c34:	mov	x2, #0x2                   	// #2
    5c38:	strh	w1, [x19]
    5c3c:	add	x0, x0, #0x1
    5c40:	str	x0, [x19, #320]
    5c44:	add	x1, x2, #0x1
    5c48:	mov	w0, #0x69                  	// #105
    5c4c:	strb	w0, [x19, x2]
    5c50:	add	x0, x1, #0x1
    5c54:	str	x0, [x19, #256]
    5c58:	mov	w2, #0x3a                  	// #58
    5c5c:	strb	w2, [x19, x1]
    5c60:	strb	w2, [x19, #264]
    5c64:	ldr	x20, [x24, #16]
    5c68:	cbz	x20, 9044 <d_print_comp_inner+0x423c>
    5c6c:	ldr	w1, [x20, #4]
    5c70:	cmp	w1, #0x1
    5c74:	b.gt	9044 <d_print_comp_inner+0x423c>
    5c78:	ldr	w2, [x19, #308]
    5c7c:	cmp	w2, #0x400
    5c80:	b.gt	9044 <d_print_comp_inner+0x423c>
    5c84:	ldr	x3, [x19, #328]
    5c88:	add	w1, w1, #0x1
    5c8c:	str	w1, [x20, #4]
    5c90:	add	w2, w2, #0x1
    5c94:	add	x0, sp, #0x80
    5c98:	str	w2, [x19, #308]
    5c9c:	str	x0, [x19, #328]
    5ca0:	mov	w1, w22
    5ca4:	mov	x2, x20
    5ca8:	mov	x0, x19
    5cac:	stp	x20, x3, [sp, #128]
    5cb0:	bl	4e08 <d_print_comp_inner>
    5cb4:	ldr	w2, [x20, #4]
    5cb8:	ldr	x0, [sp, #136]
    5cbc:	str	x0, [x19, #328]
    5cc0:	ldr	w1, [x19, #308]
    5cc4:	sub	w2, w2, #0x1
    5cc8:	ldr	x0, [x19, #256]
    5ccc:	str	w2, [x20, #4]
    5cd0:	sub	w1, w1, #0x1
    5cd4:	str	w1, [x19, #308]
    5cd8:	add	x1, x0, #0x1
    5cdc:	cmp	x0, #0xff
    5ce0:	b.ne	5d0c <d_print_comp_inner+0xf04>  // b.any
    5ce4:	ldp	x3, x2, [x19, #272]
    5ce8:	strb	wzr, [x19, #255]
    5cec:	mov	x1, x0
    5cf0:	mov	x0, x19
    5cf4:	blr	x3
    5cf8:	ldr	x2, [x19, #320]
    5cfc:	mov	x1, #0x1                   	// #1
    5d00:	mov	x0, #0x0                   	// #0
    5d04:	add	x2, x2, x1
    5d08:	str	x2, [x19, #320]
    5d0c:	str	x1, [x19, #256]
    5d10:	mov	w1, #0x5d                  	// #93
    5d14:	strb	w1, [x19, x0]
    5d18:	strb	w1, [x19, #264]
    5d1c:	ldp	x21, x22, [sp, #32]
    5d20:	ldp	x23, x24, [sp, #48]
    5d24:	b	4e70 <d_print_comp_inner+0x68>
    5d28:	adrp	x20, 0 <d_make_comp>
    5d2c:	add	x20, x20, #0x0
    5d30:	mov	x23, #0x1                   	// #1
    5d34:	stp	x25, x26, [sp, #64]
    5d38:	add	x25, x20, #0x1c
    5d3c:	ldr	x1, [x19, #256]
    5d40:	b	5d9c <d_print_comp_inner+0xf94>
    5d44:	ldp	x3, x2, [x19, #272]
    5d48:	strb	wzr, [x19, #255]
    5d4c:	mov	x0, x19
    5d50:	add	x20, x20, #0x1
    5d54:	blr	x3
    5d58:	strb	w21, [x19]
    5d5c:	ldr	x0, [x19, #320]
    5d60:	str	x23, [x19, #256]
    5d64:	strb	w21, [x19, #264]
    5d68:	cmp	x20, x25
    5d6c:	add	x0, x0, #0x1
    5d70:	str	x0, [x19, #320]
    5d74:	b.eq	8b88 <d_print_comp_inner+0x3d80>  // b.none
    5d78:	ldrb	w21, [x20]
    5d7c:	mov	x0, #0x1                   	// #1
    5d80:	add	x1, x0, #0x1
    5d84:	str	x1, [x19, #256]
    5d88:	strb	w21, [x19, x0]
    5d8c:	add	x20, x20, #0x1
    5d90:	strb	w21, [x19, #264]
    5d94:	cmp	x25, x20
    5d98:	b.eq	8b88 <d_print_comp_inner+0x3d80>  // b.none
    5d9c:	ldrb	w21, [x20]
    5da0:	cmp	x1, #0xff
    5da4:	b.eq	5d44 <d_print_comp_inner+0xf3c>  // b.none
    5da8:	mov	x0, x1
    5dac:	b	5d80 <d_print_comp_inner+0xf78>
    5db0:	ldr	x0, [x19, #256]
    5db4:	cmp	x0, #0xff
    5db8:	b.eq	b390 <d_print_comp_inner+0x6588>  // b.none
    5dbc:	add	x1, x0, #0x1
    5dc0:	str	x1, [x19, #256]
    5dc4:	mov	w2, #0x7b                  	// #123
    5dc8:	strb	w2, [x19, x0]
    5dcc:	strb	w2, [x19, #264]
    5dd0:	cmp	x1, #0xff
    5dd4:	b.ne	9bec <d_print_comp_inner+0x4de4>  // b.any
    5dd8:	ldp	x3, x2, [x19, #272]
    5ddc:	strb	wzr, [x19, #255]
    5de0:	mov	x0, x19
    5de4:	blr	x3
    5de8:	ldr	x0, [x19, #320]
    5dec:	mov	w3, #0x616c                	// #24940
    5df0:	mov	w2, #0x6d                  	// #109
    5df4:	mov	x1, #0x3                   	// #3
    5df8:	add	x0, x0, #0x1
    5dfc:	strh	w3, [x19]
    5e00:	strb	w2, [x19, #2]
    5e04:	str	x0, [x19, #320]
    5e08:	add	x0, x1, #0x1
    5e0c:	str	x0, [x19, #256]
    5e10:	mov	w2, #0x62                  	// #98
    5e14:	strb	w2, [x19, x1]
    5e18:	strb	w2, [x19, #264]
    5e1c:	cmp	x0, #0xff
    5e20:	b.ne	9c3c <d_print_comp_inner+0x4e34>  // b.any
    5e24:	ldp	x3, x2, [x19, #272]
    5e28:	strb	wzr, [x19, #255]
    5e2c:	mov	x1, x0
    5e30:	mov	x0, x19
    5e34:	blr	x3
    5e38:	ldr	x0, [x19, #320]
    5e3c:	mov	w1, #0x64                  	// #100
    5e40:	mov	x2, #0x1                   	// #1
    5e44:	strb	w1, [x19]
    5e48:	add	x0, x0, x2
    5e4c:	str	x0, [x19, #320]
    5e50:	add	x1, x2, #0x1
    5e54:	mov	w0, #0x61                  	// #97
    5e58:	strb	w0, [x19, x2]
    5e5c:	add	x0, x1, #0x1
    5e60:	str	x0, [x19, #256]
    5e64:	mov	w2, #0x28                  	// #40
    5e68:	strb	w2, [x19, x1]
    5e6c:	strb	w2, [x19, #264]
    5e70:	ldr	w1, [x19, #312]
    5e74:	ldr	x20, [x24, #8]
    5e78:	add	w2, w1, #0x1
    5e7c:	str	w2, [x19, #312]
    5e80:	cbz	x20, 9050 <d_print_comp_inner+0x4248>
    5e84:	ldr	w2, [x20, #4]
    5e88:	cmp	w2, #0x1
    5e8c:	b.gt	9050 <d_print_comp_inner+0x4248>
    5e90:	ldr	w3, [x19, #308]
    5e94:	cmp	w3, #0x400
    5e98:	b.gt	9050 <d_print_comp_inner+0x4248>
    5e9c:	add	w2, w2, #0x1
    5ea0:	add	w3, w3, #0x1
    5ea4:	str	w2, [x20, #4]
    5ea8:	add	x21, sp, #0x80
    5eac:	str	w3, [x19, #308]
    5eb0:	mov	w1, w22
    5eb4:	ldr	x3, [x19, #328]
    5eb8:	str	x21, [x19, #328]
    5ebc:	mov	x0, x19
    5ec0:	mov	x2, x20
    5ec4:	stp	x20, x3, [sp, #128]
    5ec8:	bl	4e08 <d_print_comp_inner>
    5ecc:	ldr	w3, [x20, #4]
    5ed0:	ldr	w1, [x19, #312]
    5ed4:	ldr	x0, [sp, #136]
    5ed8:	str	x0, [x19, #328]
    5edc:	ldr	w2, [x19, #308]
    5ee0:	sub	w3, w3, #0x1
    5ee4:	sub	w1, w1, #0x1
    5ee8:	ldr	x0, [x19, #256]
    5eec:	str	w3, [x20, #4]
    5ef0:	sub	w2, w2, #0x1
    5ef4:	str	w2, [x19, #308]
    5ef8:	str	w1, [x19, #312]
    5efc:	cmp	x0, #0xff
    5f00:	b.eq	943c <d_print_comp_inner+0x4634>  // b.none
    5f04:	add	x1, x0, #0x1
    5f08:	str	x1, [x19, #256]
    5f0c:	mov	w2, #0x29                  	// #41
    5f10:	strb	w2, [x19, x0]
    5f14:	strb	w2, [x19, #264]
    5f18:	cmp	x1, #0xff
    5f1c:	b.ne	9468 <d_print_comp_inner+0x4660>  // b.any
    5f20:	ldp	x3, x2, [x19, #272]
    5f24:	strb	wzr, [x19, #255]
    5f28:	mov	x0, x19
    5f2c:	blr	x3
    5f30:	ldr	x2, [x19, #320]
    5f34:	mov	x0, #0x1                   	// #1
    5f38:	mov	x1, #0x0                   	// #0
    5f3c:	add	x2, x2, x0
    5f40:	str	x2, [x19, #320]
    5f44:	str	x0, [x19, #256]
    5f48:	mov	w0, #0x23                  	// #35
    5f4c:	strb	w0, [x19, x1]
    5f50:	adrp	x1, 0 <d_make_comp>
    5f54:	strb	w0, [x19, #264]
    5f58:	add	x1, x1, #0x0
    5f5c:	mov	x0, x21
    5f60:	ldr	w2, [x24, #16]
    5f64:	add	w2, w2, #0x1
    5f68:	bl	0 <sprintf>
    5f6c:	mov	x0, x21
    5f70:	bl	0 <strlen>
    5f74:	cbz	x0, 93a4 <d_print_comp_inner+0x459c>
    5f78:	add	x22, x21, x0
    5f7c:	mov	x23, #0x1                   	// #1
    5f80:	ldr	x1, [x19, #256]
    5f84:	b	5fe0 <d_print_comp_inner+0x11d8>
    5f88:	ldp	x3, x2, [x19, #272]
    5f8c:	strb	wzr, [x19, #255]
    5f90:	mov	x0, x19
    5f94:	add	x21, x21, #0x1
    5f98:	blr	x3
    5f9c:	strb	w20, [x19]
    5fa0:	ldr	x0, [x19, #320]
    5fa4:	str	x23, [x19, #256]
    5fa8:	strb	w20, [x19, #264]
    5fac:	cmp	x21, x22
    5fb0:	add	x0, x0, #0x1
    5fb4:	str	x0, [x19, #320]
    5fb8:	b.eq	9470 <d_print_comp_inner+0x4668>  // b.none
    5fbc:	ldrb	w20, [x21]
    5fc0:	mov	x0, #0x1                   	// #1
    5fc4:	add	x1, x0, #0x1
    5fc8:	str	x1, [x19, #256]
    5fcc:	strb	w20, [x19, x0]
    5fd0:	add	x21, x21, #0x1
    5fd4:	strb	w20, [x19, #264]
    5fd8:	cmp	x22, x21
    5fdc:	b.eq	93a8 <d_print_comp_inner+0x45a0>  // b.none
    5fe0:	ldrb	w20, [x21]
    5fe4:	cmp	x1, #0xff
    5fe8:	b.eq	5f88 <d_print_comp_inner+0x1180>  // b.none
    5fec:	mov	x0, x1
    5ff0:	b	5fc4 <d_print_comp_inner+0x11bc>
    5ff4:	ldr	x0, [x19, #256]
    5ff8:	cmp	x0, #0xff
    5ffc:	b.eq	a454 <d_print_comp_inner+0x564c>  // b.none
    6000:	add	x1, x0, #0x1
    6004:	str	x1, [x19, #256]
    6008:	mov	w2, #0x7b                  	// #123
    600c:	strb	w2, [x19, x0]
    6010:	strb	w2, [x19, #264]
    6014:	cmp	x1, #0xff
    6018:	b.ne	9488 <d_print_comp_inner+0x4680>  // b.any
    601c:	ldp	x3, x2, [x19, #272]
    6020:	strb	wzr, [x19, #255]
    6024:	mov	x0, x19
    6028:	blr	x3
    602c:	ldr	x0, [x19, #320]
    6030:	mov	w3, #0x6e75                	// #28277
    6034:	mov	w2, #0x6e                  	// #110
    6038:	mov	x1, #0x3                   	// #3
    603c:	add	x0, x0, #0x1
    6040:	strh	w3, [x19]
    6044:	strb	w2, [x19, #2]
    6048:	str	x0, [x19, #320]
    604c:	add	x0, x1, #0x1
    6050:	str	x0, [x19, #256]
    6054:	mov	w2, #0x61                  	// #97
    6058:	strb	w2, [x19, x1]
    605c:	strb	w2, [x19, #264]
    6060:	cmp	x0, #0xff
    6064:	b.ne	94d8 <d_print_comp_inner+0x46d0>  // b.any
    6068:	ldp	x3, x2, [x19, #272]
    606c:	strb	wzr, [x19, #255]
    6070:	mov	x1, x0
    6074:	mov	x0, x19
    6078:	blr	x3
    607c:	ldr	x0, [x19, #320]
    6080:	mov	w3, #0x656d                	// #25965
    6084:	mov	w2, #0x64                  	// #100
    6088:	mov	x1, #0x3                   	// #3
    608c:	add	x0, x0, #0x1
    6090:	strh	w3, [x19]
    6094:	strb	w2, [x19, #2]
    6098:	str	x0, [x19, #320]
    609c:	add	x0, x1, #0x1
    60a0:	str	x0, [x19, #256]
    60a4:	mov	w2, #0x20                  	// #32
    60a8:	strb	w2, [x19, x1]
    60ac:	strb	w2, [x19, #264]
    60b0:	cmp	x0, #0xff
    60b4:	b.ne	9524 <d_print_comp_inner+0x471c>  // b.any
    60b8:	ldp	x3, x2, [x19, #272]
    60bc:	strb	wzr, [x19, #255]
    60c0:	mov	x1, x0
    60c4:	mov	x0, x19
    60c8:	blr	x3
    60cc:	ldr	x0, [x19, #320]
    60d0:	mov	w3, #0x7974                	// #31092
    60d4:	mov	w2, #0x70                  	// #112
    60d8:	mov	x1, #0x3                   	// #3
    60dc:	add	x0, x0, #0x1
    60e0:	strh	w3, [x19]
    60e4:	strb	w2, [x19, #2]
    60e8:	str	x0, [x19, #320]
    60ec:	add	x0, x1, #0x1
    60f0:	str	x0, [x19, #256]
    60f4:	mov	w2, #0x65                  	// #101
    60f8:	strb	w2, [x19, x1]
    60fc:	strb	w2, [x19, #264]
    6100:	cmp	x0, #0xff
    6104:	b.ne	9574 <d_print_comp_inner+0x476c>  // b.any
    6108:	ldp	x3, x2, [x19, #272]
    610c:	strb	wzr, [x19, #255]
    6110:	mov	x1, x0
    6114:	mov	x0, x19
    6118:	blr	x3
    611c:	ldr	x2, [x19, #320]
    6120:	mov	x1, #0x1                   	// #1
    6124:	mov	x0, #0x0                   	// #0
    6128:	add	x2, x2, x1
    612c:	str	x2, [x19, #320]
    6130:	str	x1, [x19, #256]
    6134:	mov	w2, #0x23                  	// #35
    6138:	strb	w2, [x19, x0]
    613c:	adrp	x1, 0 <d_make_comp>
    6140:	strb	w2, [x19, #264]
    6144:	add	x1, x1, #0x0
    6148:	add	x20, sp, #0x80
    614c:	ldr	x2, [x24, #8]
    6150:	mov	x0, x20
    6154:	add	w2, w2, #0x1
    6158:	bl	0 <sprintf>
    615c:	mov	x0, x20
    6160:	bl	0 <strlen>
    6164:	cbz	x0, 93f0 <d_print_comp_inner+0x45e8>
    6168:	add	x22, x20, x0
    616c:	mov	x23, #0x1                   	// #1
    6170:	ldr	x1, [x19, #256]
    6174:	b	61d0 <d_print_comp_inner+0x13c8>
    6178:	ldp	x3, x2, [x19, #272]
    617c:	strb	wzr, [x19, #255]
    6180:	mov	x0, x19
    6184:	add	x20, x20, #0x1
    6188:	blr	x3
    618c:	strb	w21, [x19]
    6190:	ldr	x0, [x19, #320]
    6194:	str	x23, [x19, #256]
    6198:	strb	w21, [x19, #264]
    619c:	cmp	x20, x22
    61a0:	add	x0, x0, #0x1
    61a4:	str	x0, [x19, #320]
    61a8:	b.eq	947c <d_print_comp_inner+0x4674>  // b.none
    61ac:	ldrb	w21, [x20]
    61b0:	mov	x0, #0x1                   	// #1
    61b4:	add	x1, x0, #0x1
    61b8:	str	x1, [x19, #256]
    61bc:	strb	w21, [x19, x0]
    61c0:	add	x20, x20, #0x1
    61c4:	strb	w21, [x19, #264]
    61c8:	cmp	x22, x20
    61cc:	b.eq	93f4 <d_print_comp_inner+0x45ec>  // b.none
    61d0:	ldrb	w21, [x20]
    61d4:	cmp	x1, #0xff
    61d8:	b.eq	6178 <d_print_comp_inner+0x1370>  // b.none
    61dc:	mov	x0, x1
    61e0:	b	61b4 <d_print_comp_inner+0x13ac>
    61e4:	adrp	x20, 0 <d_make_comp>
    61e8:	add	x20, x20, #0x0
    61ec:	mov	x23, #0x1                   	// #1
    61f0:	stp	x25, x26, [sp, #64]
    61f4:	add	x25, x20, #0x16
    61f8:	ldr	x1, [x19, #256]
    61fc:	b	6258 <d_print_comp_inner+0x1450>
    6200:	ldp	x3, x2, [x19, #272]
    6204:	strb	wzr, [x19, #255]
    6208:	mov	x0, x19
    620c:	add	x20, x20, #0x1
    6210:	blr	x3
    6214:	strb	w21, [x19]
    6218:	ldr	x0, [x19, #320]
    621c:	str	x23, [x19, #256]
    6220:	strb	w21, [x19, #264]
    6224:	cmp	x20, x25
    6228:	add	x0, x0, #0x1
    622c:	str	x0, [x19, #320]
    6230:	b.eq	8e70 <d_print_comp_inner+0x4068>  // b.none
    6234:	ldrb	w21, [x20]
    6238:	mov	x0, #0x1                   	// #1
    623c:	add	x1, x0, #0x1
    6240:	str	x1, [x19, #256]
    6244:	strb	w21, [x19, x0]
    6248:	add	x20, x20, #0x1
    624c:	strb	w21, [x19, #264]
    6250:	cmp	x25, x20
    6254:	b.eq	8e70 <d_print_comp_inner+0x4068>  // b.none
    6258:	ldrb	w21, [x20]
    625c:	cmp	x1, #0xff
    6260:	b.eq	6200 <d_print_comp_inner+0x13f8>  // b.none
    6264:	mov	x0, x1
    6268:	b	623c <d_print_comp_inner+0x1434>
    626c:	ldr	x0, [x19, #256]
    6270:	cmp	x0, #0xff
    6274:	b.eq	a654 <d_print_comp_inner+0x584c>  // b.none
    6278:	add	x1, x0, #0x1
    627c:	str	x1, [x19, #256]
    6280:	mov	w2, #0x6a                  	// #106
    6284:	strb	w2, [x19, x0]
    6288:	strb	w2, [x19, #264]
    628c:	cmp	x1, #0xff
    6290:	b.ne	9d24 <d_print_comp_inner+0x4f1c>  // b.any
    6294:	ldp	x3, x2, [x19, #272]
    6298:	strb	wzr, [x19, #255]
    629c:	mov	x0, x19
    62a0:	blr	x3
    62a4:	ldr	x0, [x19, #320]
    62a8:	mov	w2, #0x7661                	// #30305
    62ac:	mov	w1, #0x61                  	// #97
    62b0:	mov	x3, #0x3                   	// #3
    62b4:	add	x0, x0, #0x1
    62b8:	strh	w2, [x19]
    62bc:	strb	w1, [x19, #2]
    62c0:	str	x0, [x19, #320]
    62c4:	add	x1, x3, #0x1
    62c8:	str	x1, [x19, #256]
    62cc:	mov	w0, #0x20                  	// #32
    62d0:	strb	w0, [x19, x3]
    62d4:	strb	w0, [x19, #264]
    62d8:	cmp	x1, #0xff
    62dc:	b.ne	9d74 <d_print_comp_inner+0x4f6c>  // b.any
    62e0:	ldp	x3, x2, [x19, #272]
    62e4:	strb	wzr, [x19, #255]
    62e8:	mov	x0, x19
    62ec:	blr	x3
    62f0:	ldr	x1, [x19, #320]
    62f4:	mov	w3, #0x6c43                	// #27715
    62f8:	mov	w2, #0x61                  	// #97
    62fc:	mov	x0, #0x3                   	// #3
    6300:	add	x1, x1, #0x1
    6304:	strh	w3, [x19]
    6308:	strb	w2, [x19, #2]
    630c:	str	x1, [x19, #320]
    6310:	add	x1, x0, #0x1
    6314:	str	x1, [x19, #256]
    6318:	mov	w2, #0x73                  	// #115
    631c:	strb	w2, [x19, x0]
    6320:	strb	w2, [x19, #264]
    6324:	cmp	x1, #0xff
    6328:	b.ne	9dc4 <d_print_comp_inner+0x4fbc>  // b.any
    632c:	ldp	x3, x2, [x19, #272]
    6330:	strb	wzr, [x19, #255]
    6334:	mov	x0, x19
    6338:	blr	x3
    633c:	ldr	x1, [x19, #320]
    6340:	mov	w3, #0x2073                	// #8307
    6344:	mov	w2, #0x66                  	// #102
    6348:	mov	x0, #0x3                   	// #3
    634c:	add	x1, x1, #0x1
    6350:	strh	w3, [x19]
    6354:	strb	w2, [x19, #2]
    6358:	str	x1, [x19, #320]
    635c:	add	x1, x0, #0x1
    6360:	str	x1, [x19, #256]
    6364:	mov	w2, #0x6f                  	// #111
    6368:	strb	w2, [x19, x0]
    636c:	strb	w2, [x19, #264]
    6370:	cmp	x1, #0xff
    6374:	b.ne	9e14 <d_print_comp_inner+0x500c>  // b.any
    6378:	ldp	x3, x2, [x19, #272]
    637c:	strb	wzr, [x19, #255]
    6380:	mov	x0, x19
    6384:	blr	x3
    6388:	ldr	x1, [x19, #320]
    638c:	mov	w2, #0x72                  	// #114
    6390:	mov	x0, #0x1                   	// #1
    6394:	strb	w2, [x19]
    6398:	add	x1, x1, x0
    639c:	str	x1, [x19, #320]
    63a0:	add	x1, x0, #0x1
    63a4:	str	x1, [x19, #256]
    63a8:	mov	w1, #0x20                  	// #32
    63ac:	strb	w1, [x19, x0]
    63b0:	strb	w1, [x19, #264]
    63b4:	ldr	x20, [x24, #8]
    63b8:	cbz	x20, 90b8 <d_print_comp_inner+0x42b0>
    63bc:	ldr	w0, [x20, #4]
    63c0:	cmp	w0, #0x1
    63c4:	b.gt	90b8 <d_print_comp_inner+0x42b0>
    63c8:	ldr	w1, [x19, #308]
    63cc:	cmp	w1, #0x400
    63d0:	b.gt	90b8 <d_print_comp_inner+0x42b0>
    63d4:	ldr	x3, [x19, #328]
    63d8:	add	w0, w0, #0x1
    63dc:	str	w0, [x20, #4]
    63e0:	add	w1, w1, #0x1
    63e4:	add	x0, sp, #0x80
    63e8:	str	w1, [x19, #308]
    63ec:	str	x0, [x19, #328]
    63f0:	mov	w1, w22
    63f4:	mov	x0, x19
    63f8:	mov	x2, x20
    63fc:	stp	x20, x3, [sp, #128]
    6400:	bl	4e08 <d_print_comp_inner>
    6404:	ldr	w1, [x20, #4]
    6408:	ldr	x0, [sp, #136]
    640c:	sub	w1, w1, #0x1
    6410:	ldp	x21, x22, [sp, #32]
    6414:	ldp	x23, x24, [sp, #48]
    6418:	str	x0, [x19, #328]
    641c:	ldr	w0, [x19, #308]
    6420:	str	w1, [x20, #4]
    6424:	sub	w0, w0, #0x1
    6428:	str	w0, [x19, #308]
    642c:	b	4e70 <d_print_comp_inner+0x68>
    6430:	adrp	x20, 0 <d_make_comp>
    6434:	add	x20, x20, #0x0
    6438:	mov	x23, #0x1                   	// #1
    643c:	stp	x25, x26, [sp, #64]
    6440:	add	x25, x20, #0x13
    6444:	ldr	x1, [x19, #256]
    6448:	b	64a4 <d_print_comp_inner+0x169c>
    644c:	ldp	x3, x2, [x19, #272]
    6450:	strb	wzr, [x19, #255]
    6454:	mov	x0, x19
    6458:	add	x20, x20, #0x1
    645c:	blr	x3
    6460:	strb	w21, [x19]
    6464:	ldr	x0, [x19, #320]
    6468:	str	x23, [x19, #256]
    646c:	strb	w21, [x19, #264]
    6470:	cmp	x20, x25
    6474:	add	x0, x0, #0x1
    6478:	str	x0, [x19, #320]
    647c:	b.eq	8908 <d_print_comp_inner+0x3b00>  // b.none
    6480:	ldrb	w21, [x20]
    6484:	mov	x0, #0x1                   	// #1
    6488:	add	x1, x0, #0x1
    648c:	str	x1, [x19, #256]
    6490:	strb	w21, [x19, x0]
    6494:	add	x20, x20, #0x1
    6498:	strb	w21, [x19, #264]
    649c:	cmp	x25, x20
    64a0:	b.eq	8908 <d_print_comp_inner+0x3b00>  // b.none
    64a4:	ldrb	w21, [x20]
    64a8:	cmp	x1, #0xff
    64ac:	b.eq	644c <d_print_comp_inner+0x1644>  // b.none
    64b0:	mov	x0, x1
    64b4:	b	6488 <d_print_comp_inner+0x1680>
    64b8:	adrp	x20, 0 <d_make_comp>
    64bc:	add	x20, x20, #0x0
    64c0:	mov	x23, #0x1                   	// #1
    64c4:	stp	x25, x26, [sp, #64]
    64c8:	add	x25, x20, #0x16
    64cc:	ldr	x1, [x19, #256]
    64d0:	b	652c <d_print_comp_inner+0x1724>
    64d4:	ldp	x3, x2, [x19, #272]
    64d8:	strb	wzr, [x19, #255]
    64dc:	mov	x0, x19
    64e0:	add	x20, x20, #0x1
    64e4:	blr	x3
    64e8:	strb	w21, [x19]
    64ec:	ldr	x0, [x19, #320]
    64f0:	str	x23, [x19, #256]
    64f4:	strb	w21, [x19, #264]
    64f8:	cmp	x25, x20
    64fc:	add	x0, x0, #0x1
    6500:	str	x0, [x19, #320]
    6504:	b.eq	8808 <d_print_comp_inner+0x3a00>  // b.none
    6508:	ldrb	w21, [x20]
    650c:	mov	x0, #0x1                   	// #1
    6510:	add	x1, x0, #0x1
    6514:	str	x1, [x19, #256]
    6518:	strb	w21, [x19, x0]
    651c:	add	x20, x20, #0x1
    6520:	strb	w21, [x19, #264]
    6524:	cmp	x25, x20
    6528:	b.eq	8808 <d_print_comp_inner+0x3a00>  // b.none
    652c:	ldrb	w21, [x20]
    6530:	cmp	x1, #0xff
    6534:	b.eq	64d4 <d_print_comp_inner+0x16cc>  // b.none
    6538:	mov	x0, x1
    653c:	b	6510 <d_print_comp_inner+0x1708>
    6540:	adrp	x20, 0 <d_make_comp>
    6544:	add	x20, x20, #0x0
    6548:	mov	x23, #0x1                   	// #1
    654c:	stp	x25, x26, [sp, #64]
    6550:	add	x25, x20, #0x19
    6554:	ldr	x1, [x19, #256]
    6558:	b	65b4 <d_print_comp_inner+0x17ac>
    655c:	ldp	x3, x2, [x19, #272]
    6560:	strb	wzr, [x19, #255]
    6564:	mov	x0, x19
    6568:	add	x20, x20, #0x1
    656c:	blr	x3
    6570:	strb	w21, [x19]
    6574:	ldr	x0, [x19, #320]
    6578:	str	x23, [x19, #256]
    657c:	strb	w21, [x19, #264]
    6580:	cmp	x25, x20
    6584:	add	x0, x0, #0x1
    6588:	str	x0, [x19, #320]
    658c:	b.eq	8a88 <d_print_comp_inner+0x3c80>  // b.none
    6590:	ldrb	w21, [x20]
    6594:	mov	x0, #0x1                   	// #1
    6598:	add	x1, x0, #0x1
    659c:	str	x1, [x19, #256]
    65a0:	strb	w21, [x19, x0]
    65a4:	add	x20, x20, #0x1
    65a8:	strb	w21, [x19, #264]
    65ac:	cmp	x25, x20
    65b0:	b.eq	8a88 <d_print_comp_inner+0x3c80>  // b.none
    65b4:	ldrb	w21, [x20]
    65b8:	cmp	x1, #0xff
    65bc:	b.eq	655c <d_print_comp_inner+0x1754>  // b.none
    65c0:	mov	x0, x1
    65c4:	b	6598 <d_print_comp_inner+0x1790>
    65c8:	adrp	x20, 0 <d_make_comp>
    65cc:	add	x20, x20, #0x0
    65d0:	mov	x23, #0x1                   	// #1
    65d4:	stp	x25, x26, [sp, #64]
    65d8:	add	x25, x20, #0x15
    65dc:	ldr	x1, [x19, #256]
    65e0:	b	663c <d_print_comp_inner+0x1834>
    65e4:	ldp	x3, x2, [x19, #272]
    65e8:	strb	wzr, [x19, #255]
    65ec:	mov	x0, x19
    65f0:	add	x20, x20, #0x1
    65f4:	blr	x3
    65f8:	strb	w21, [x19]
    65fc:	ldr	x0, [x19, #320]
    6600:	str	x23, [x19, #256]
    6604:	strb	w21, [x19, #264]
    6608:	cmp	x25, x20
    660c:	add	x0, x0, #0x1
    6610:	str	x0, [x19, #320]
    6614:	b.eq	8c88 <d_print_comp_inner+0x3e80>  // b.none
    6618:	ldrb	w21, [x20]
    661c:	mov	x0, #0x1                   	// #1
    6620:	add	x1, x0, #0x1
    6624:	str	x1, [x19, #256]
    6628:	strb	w21, [x19, x0]
    662c:	add	x20, x20, #0x1
    6630:	strb	w21, [x19, #264]
    6634:	cmp	x25, x20
    6638:	b.eq	8c8c <d_print_comp_inner+0x3e84>  // b.none
    663c:	ldrb	w21, [x20]
    6640:	cmp	x1, #0xff
    6644:	b.eq	65e4 <d_print_comp_inner+0x17dc>  // b.none
    6648:	mov	x0, x1
    664c:	b	6620 <d_print_comp_inner+0x1818>
    6650:	adrp	x20, 0 <d_make_comp>
    6654:	add	x20, x20, #0x0
    6658:	mov	x23, #0x1                   	// #1
    665c:	stp	x25, x26, [sp, #64]
    6660:	add	x25, x20, #0x11
    6664:	ldr	x1, [x19, #256]
    6668:	b	66c4 <d_print_comp_inner+0x18bc>
    666c:	ldp	x3, x2, [x19, #272]
    6670:	strb	wzr, [x19, #255]
    6674:	mov	x0, x19
    6678:	add	x20, x20, #0x1
    667c:	blr	x3
    6680:	strb	w21, [x19]
    6684:	ldr	x0, [x19, #320]
    6688:	str	x23, [x19, #256]
    668c:	strb	w21, [x19, #264]
    6690:	cmp	x25, x20
    6694:	add	x0, x0, #0x1
    6698:	str	x0, [x19, #320]
    669c:	b.eq	8ef0 <d_print_comp_inner+0x40e8>  // b.none
    66a0:	ldrb	w21, [x20]
    66a4:	mov	x0, #0x1                   	// #1
    66a8:	add	x1, x0, #0x1
    66ac:	str	x1, [x19, #256]
    66b0:	strb	w21, [x19, x0]
    66b4:	add	x20, x20, #0x1
    66b8:	strb	w21, [x19, #264]
    66bc:	cmp	x25, x20
    66c0:	b.eq	8ef0 <d_print_comp_inner+0x40e8>  // b.none
    66c4:	ldrb	w21, [x20]
    66c8:	cmp	x1, #0xff
    66cc:	b.eq	666c <d_print_comp_inner+0x1864>  // b.none
    66d0:	mov	x0, x1
    66d4:	b	66a8 <d_print_comp_inner+0x18a0>
    66d8:	ldr	x0, [x2, #8]
    66dc:	tbnz	w22, #2, 98a0 <d_print_comp_inner+0x4a98>
    66e0:	ldrsw	x22, [x0, #8]
    66e4:	ldr	x20, [x0]
    66e8:	cbz	x22, d838 <d_print_comp_inner+0x8a30>
    66ec:	add	x22, x20, x22
    66f0:	mov	x23, #0x1                   	// #1
    66f4:	ldr	x1, [x19, #256]
    66f8:	b	6754 <d_print_comp_inner+0x194c>
    66fc:	ldp	x3, x2, [x19, #272]
    6700:	strb	wzr, [x19, #255]
    6704:	mov	x0, x19
    6708:	add	x20, x20, #0x1
    670c:	blr	x3
    6710:	strb	w21, [x19]
    6714:	ldr	x0, [x19, #320]
    6718:	str	x23, [x19, #256]
    671c:	strb	w21, [x19, #264]
    6720:	cmp	x20, x22
    6724:	add	x0, x0, #0x1
    6728:	str	x0, [x19, #320]
    672c:	b.eq	d0a4 <d_print_comp_inner+0x829c>  // b.none
    6730:	ldrb	w21, [x20]
    6734:	mov	x0, #0x1                   	// #1
    6738:	add	x1, x0, #0x1
    673c:	str	x1, [x19, #256]
    6740:	strb	w21, [x19, x0]
    6744:	add	x20, x20, #0x1
    6748:	strb	w21, [x19, #264]
    674c:	cmp	x20, x22
    6750:	b.eq	c3c4 <d_print_comp_inner+0x75bc>  // b.none
    6754:	ldrb	w21, [x20]
    6758:	cmp	x1, #0xff
    675c:	b.eq	66fc <d_print_comp_inner+0x18f4>  // b.none
    6760:	mov	x0, x1
    6764:	b	6738 <d_print_comp_inner+0x1930>
    6768:	ldr	x20, [x2, #8]
    676c:	cbz	x20, 9060 <d_print_comp_inner+0x4258>
    6770:	ldr	w0, [x20, #4]
    6774:	cmp	w0, #0x1
    6778:	b.gt	9060 <d_print_comp_inner+0x4258>
    677c:	ldr	w1, [x19, #308]
    6780:	cmp	w1, #0x400
    6784:	b.gt	9060 <d_print_comp_inner+0x4258>
    6788:	ldr	x3, [x19, #328]
    678c:	add	w0, w0, #0x1
    6790:	str	w0, [x20, #4]
    6794:	add	w1, w1, #0x1
    6798:	add	x0, sp, #0x80
    679c:	str	w1, [x19, #308]
    67a0:	str	x0, [x19, #328]
    67a4:	mov	w1, w22
    67a8:	mov	x0, x19
    67ac:	mov	x2, x20
    67b0:	stp	x20, x3, [sp, #128]
    67b4:	bl	4e08 <d_print_comp_inner>
    67b8:	ldr	w1, [x20, #4]
    67bc:	ldr	x0, [sp, #136]
    67c0:	sub	w1, w1, #0x1
    67c4:	ldp	x21, x22, [sp, #32]
    67c8:	ldp	x23, x24, [sp, #48]
    67cc:	str	x0, [x19, #328]
    67d0:	ldr	w0, [x19, #308]
    67d4:	str	w1, [x20, #4]
    67d8:	sub	w0, w0, #0x1
    67dc:	str	w0, [x19, #308]
    67e0:	b	4e70 <d_print_comp_inner+0x68>
    67e4:	ldr	x0, [x19, #256]
    67e8:	cmp	x0, #0xff
    67ec:	b.eq	ab4c <d_print_comp_inner+0x5d44>  // b.none
    67f0:	add	x1, x0, #0x1
    67f4:	str	x1, [x19, #256]
    67f8:	mov	w2, #0x56                  	// #86
    67fc:	strb	w2, [x19, x0]
    6800:	strb	w2, [x19, #264]
    6804:	cmp	x1, #0xff
    6808:	b.ne	a2d0 <d_print_comp_inner+0x54c8>  // b.any
    680c:	ldp	x3, x2, [x19, #272]
    6810:	strb	wzr, [x19, #255]
    6814:	mov	x0, x19
    6818:	blr	x3
    681c:	ldr	x0, [x19, #320]
    6820:	mov	w3, #0x5454                	// #21588
    6824:	mov	w2, #0x20                  	// #32
    6828:	mov	x1, #0x3                   	// #3
    682c:	add	x0, x0, #0x1
    6830:	strh	w3, [x19]
    6834:	strb	w2, [x19, #2]
    6838:	str	x0, [x19, #320]
    683c:	add	x0, x1, #0x1
    6840:	str	x0, [x19, #256]
    6844:	mov	w2, #0x66                  	// #102
    6848:	strb	w2, [x19, x1]
    684c:	strb	w2, [x19, #264]
    6850:	cmp	x0, #0xff
    6854:	b.ne	a320 <d_print_comp_inner+0x5518>  // b.any
    6858:	ldp	x3, x2, [x19, #272]
    685c:	strb	wzr, [x19, #255]
    6860:	mov	x1, x0
    6864:	mov	x0, x19
    6868:	blr	x3
    686c:	ldr	x0, [x19, #320]
    6870:	mov	w2, #0x6f                  	// #111
    6874:	mov	x1, #0x1                   	// #1
    6878:	strb	w2, [x19]
    687c:	add	x0, x0, x1
    6880:	str	x0, [x19, #320]
    6884:	add	x0, x1, #0x1
    6888:	mov	w2, #0x72                  	// #114
    688c:	strb	w2, [x19, x1]
    6890:	add	x1, x0, #0x1
    6894:	str	x1, [x19, #256]
    6898:	mov	w1, #0x20                  	// #32
    689c:	strb	w1, [x19, x0]
    68a0:	strb	w1, [x19, #264]
    68a4:	ldr	x20, [x24, #8]
    68a8:	cbz	x20, 9180 <d_print_comp_inner+0x4378>
    68ac:	ldr	w0, [x20, #4]
    68b0:	cmp	w0, #0x1
    68b4:	b.gt	9180 <d_print_comp_inner+0x4378>
    68b8:	ldr	w1, [x19, #308]
    68bc:	cmp	w1, #0x400
    68c0:	b.gt	9180 <d_print_comp_inner+0x4378>
    68c4:	ldr	x3, [x19, #328]
    68c8:	add	w0, w0, #0x1
    68cc:	str	w0, [x20, #4]
    68d0:	add	w1, w1, #0x1
    68d4:	add	x0, sp, #0x80
    68d8:	str	w1, [x19, #308]
    68dc:	str	x0, [x19, #328]
    68e0:	mov	w1, w22
    68e4:	mov	x0, x19
    68e8:	mov	x2, x20
    68ec:	stp	x20, x3, [sp, #128]
    68f0:	bl	4e08 <d_print_comp_inner>
    68f4:	ldr	w1, [x20, #4]
    68f8:	ldr	x0, [sp, #136]
    68fc:	sub	w1, w1, #0x1
    6900:	ldp	x21, x22, [sp, #32]
    6904:	ldp	x23, x24, [sp, #48]
    6908:	str	x0, [x19, #328]
    690c:	ldr	w0, [x19, #308]
    6910:	str	w1, [x20, #4]
    6914:	sub	w0, w0, #0x1
    6918:	str	w0, [x19, #308]
    691c:	b	4e70 <d_print_comp_inner+0x68>
    6920:	ldr	x1, [x19, #256]
    6924:	ldrb	w20, [x2, #8]
    6928:	add	x0, x1, #0x1
    692c:	cmp	x1, #0xff
    6930:	b.ne	6958 <d_print_comp_inner+0x1b50>  // b.any
    6934:	ldp	x3, x2, [x19, #272]
    6938:	strb	wzr, [x19, #255]
    693c:	mov	x0, x19
    6940:	blr	x3
    6944:	ldr	x2, [x19, #320]
    6948:	mov	x0, #0x1                   	// #1
    694c:	mov	x1, #0x0                   	// #0
    6950:	add	x2, x2, x0
    6954:	str	x2, [x19, #320]
    6958:	str	x0, [x19, #256]
    695c:	strb	w20, [x19, x1]
    6960:	strb	w20, [x19, #264]
    6964:	ldp	x21, x22, [sp, #32]
    6968:	ldp	x23, x24, [sp, #48]
    696c:	b	4e70 <d_print_comp_inner+0x68>
    6970:	ldr	x0, [x19, #256]
    6974:	cmp	x0, #0xff
    6978:	b.eq	b148 <d_print_comp_inner+0x6340>  // b.none
    697c:	add	x1, x0, #0x1
    6980:	str	x1, [x19, #256]
    6984:	mov	w2, #0x6a                  	// #106
    6988:	strb	w2, [x19, x0]
    698c:	strb	w2, [x19, #264]
    6990:	cmp	x1, #0xff
    6994:	b.ne	957c <d_print_comp_inner+0x4774>  // b.any
    6998:	ldp	x3, x2, [x19, #272]
    699c:	strb	wzr, [x19, #255]
    69a0:	mov	x0, x19
    69a4:	blr	x3
    69a8:	ldr	x0, [x19, #320]
    69ac:	mov	w3, #0x7661                	// #30305
    69b0:	mov	w2, #0x61                  	// #97
    69b4:	mov	x1, #0x3                   	// #3
    69b8:	add	x0, x0, #0x1
    69bc:	strh	w3, [x19]
    69c0:	strb	w2, [x19, #2]
    69c4:	str	x0, [x19, #320]
    69c8:	add	x0, x1, #0x1
    69cc:	str	x0, [x19, #256]
    69d0:	mov	w2, #0x20                  	// #32
    69d4:	strb	w2, [x19, x1]
    69d8:	strb	w2, [x19, #264]
    69dc:	cmp	x0, #0xff
    69e0:	b.ne	95cc <d_print_comp_inner+0x47c4>  // b.any
    69e4:	ldp	x3, x2, [x19, #272]
    69e8:	strb	wzr, [x19, #255]
    69ec:	mov	x1, x0
    69f0:	mov	x0, x19
    69f4:	blr	x3
    69f8:	ldr	x0, [x19, #320]
    69fc:	mov	w3, #0x6572                	// #25970
    6a00:	mov	w2, #0x73                  	// #115
    6a04:	mov	x1, #0x3                   	// #3
    6a08:	add	x0, x0, #0x1
    6a0c:	strh	w3, [x19]
    6a10:	strb	w2, [x19, #2]
    6a14:	str	x0, [x19, #320]
    6a18:	add	x0, x1, #0x1
    6a1c:	str	x0, [x19, #256]
    6a20:	mov	w2, #0x6f                  	// #111
    6a24:	strb	w2, [x19, x1]
    6a28:	strb	w2, [x19, #264]
    6a2c:	cmp	x0, #0xff
    6a30:	b.ne	9618 <d_print_comp_inner+0x4810>  // b.any
    6a34:	ldp	x3, x2, [x19, #272]
    6a38:	strb	wzr, [x19, #255]
    6a3c:	mov	x1, x0
    6a40:	mov	x0, x19
    6a44:	blr	x3
    6a48:	ldr	x0, [x19, #320]
    6a4c:	mov	w3, #0x7275                	// #29301
    6a50:	mov	w2, #0x63                  	// #99
    6a54:	mov	x1, #0x3                   	// #3
    6a58:	add	x0, x0, #0x1
    6a5c:	strh	w3, [x19]
    6a60:	strb	w2, [x19, #2]
    6a64:	str	x0, [x19, #320]
    6a68:	add	x0, x1, #0x1
    6a6c:	str	x0, [x19, #256]
    6a70:	mov	w2, #0x65                  	// #101
    6a74:	strb	w2, [x19, x1]
    6a78:	strb	w2, [x19, #264]
    6a7c:	cmp	x0, #0xff
    6a80:	b.ne	9668 <d_print_comp_inner+0x4860>  // b.any
    6a84:	ldp	x3, x2, [x19, #272]
    6a88:	strb	wzr, [x19, #255]
    6a8c:	mov	x1, x0
    6a90:	mov	x0, x19
    6a94:	blr	x3
    6a98:	ldr	x2, [x19, #320]
    6a9c:	mov	x1, #0x1                   	// #1
    6aa0:	mov	x0, #0x0                   	// #0
    6aa4:	add	x2, x2, x1
    6aa8:	str	x2, [x19, #320]
    6aac:	str	x1, [x19, #256]
    6ab0:	mov	w1, #0x20                  	// #32
    6ab4:	strb	w1, [x19, x0]
    6ab8:	strb	w1, [x19, #264]
    6abc:	ldr	x20, [x24, #8]
    6ac0:	cbz	x20, 9194 <d_print_comp_inner+0x438c>
    6ac4:	ldr	w0, [x20, #4]
    6ac8:	cmp	w0, #0x1
    6acc:	b.gt	9194 <d_print_comp_inner+0x438c>
    6ad0:	ldr	w1, [x19, #308]
    6ad4:	cmp	w1, #0x400
    6ad8:	b.gt	9194 <d_print_comp_inner+0x438c>
    6adc:	ldr	x3, [x19, #328]
    6ae0:	add	w0, w0, #0x1
    6ae4:	str	w0, [x20, #4]
    6ae8:	add	w1, w1, #0x1
    6aec:	add	x0, sp, #0x80
    6af0:	str	w1, [x19, #308]
    6af4:	str	x0, [x19, #328]
    6af8:	mov	w1, w22
    6afc:	mov	x0, x19
    6b00:	mov	x2, x20
    6b04:	stp	x20, x3, [sp, #128]
    6b08:	bl	4e08 <d_print_comp_inner>
    6b0c:	ldr	w1, [x20, #4]
    6b10:	ldr	x0, [sp, #136]
    6b14:	sub	w1, w1, #0x1
    6b18:	ldp	x21, x22, [sp, #32]
    6b1c:	ldp	x23, x24, [sp, #48]
    6b20:	str	x0, [x19, #328]
    6b24:	ldr	w0, [x19, #308]
    6b28:	str	w1, [x20, #4]
    6b2c:	sub	w0, w0, #0x1
    6b30:	str	w0, [x19, #308]
    6b34:	b	4e70 <d_print_comp_inner+0x68>
    6b38:	ldr	x20, [x2, #8]
    6b3c:	cbz	x20, 92e0 <d_print_comp_inner+0x44d8>
    6b40:	ldr	w0, [x20, #4]
    6b44:	cmp	w0, #0x1
    6b48:	b.gt	92e0 <d_print_comp_inner+0x44d8>
    6b4c:	ldr	w1, [x19, #308]
    6b50:	cmp	w1, #0x400
    6b54:	b.gt	92e0 <d_print_comp_inner+0x44d8>
    6b58:	ldr	x3, [x19, #328]
    6b5c:	add	w0, w0, #0x1
    6b60:	str	w0, [x20, #4]
    6b64:	add	w1, w1, #0x1
    6b68:	add	x0, sp, #0x80
    6b6c:	str	w1, [x19, #308]
    6b70:	str	x0, [x19, #328]
    6b74:	mov	w1, w22
    6b78:	mov	x0, x19
    6b7c:	mov	x2, x20
    6b80:	stp	x20, x3, [sp, #128]
    6b84:	bl	4e08 <d_print_comp_inner>
    6b88:	ldr	w1, [x20, #4]
    6b8c:	ldr	x0, [sp, #136]
    6b90:	str	x0, [x19, #328]
    6b94:	ldr	w0, [x19, #308]
    6b98:	sub	w1, w1, #0x1
    6b9c:	str	w1, [x20, #4]
    6ba0:	sub	w0, w0, #0x1
    6ba4:	str	w0, [x19, #308]
    6ba8:	ldr	x20, [x24, #16]
    6bac:	cbz	x20, 92cc <d_print_comp_inner+0x44c4>
    6bb0:	ldr	w0, [x20, #4]
    6bb4:	cmp	w0, #0x1
    6bb8:	b.gt	92cc <d_print_comp_inner+0x44c4>
    6bbc:	ldr	w1, [x19, #308]
    6bc0:	cmp	w1, #0x400
    6bc4:	b.gt	92cc <d_print_comp_inner+0x44c4>
    6bc8:	ldr	x3, [x19, #328]
    6bcc:	add	w0, w0, #0x1
    6bd0:	str	w0, [x20, #4]
    6bd4:	add	w1, w1, #0x1
    6bd8:	add	x0, sp, #0x80
    6bdc:	str	w1, [x19, #308]
    6be0:	str	x0, [x19, #328]
    6be4:	mov	w1, w22
    6be8:	mov	x0, x19
    6bec:	mov	x2, x20
    6bf0:	stp	x20, x3, [sp, #128]
    6bf4:	bl	4e08 <d_print_comp_inner>
    6bf8:	ldr	w1, [x20, #4]
    6bfc:	ldr	x0, [sp, #136]
    6c00:	sub	w1, w1, #0x1
    6c04:	ldp	x21, x22, [sp, #32]
    6c08:	ldp	x23, x24, [sp, #48]
    6c0c:	str	x0, [x19, #328]
    6c10:	ldr	w0, [x19, #308]
    6c14:	str	w1, [x20, #4]
    6c18:	sub	w0, w0, #0x1
    6c1c:	str	w0, [x19, #308]
    6c20:	b	4e70 <d_print_comp_inner+0x68>
    6c24:	ldrsh	w0, [x2, #18]
    6c28:	cbnz	w0, c0d0 <d_print_comp_inner+0x72c8>
    6c2c:	ldr	x20, [x24, #8]
    6c30:	adrp	x0, 0 <d_make_comp>
    6c34:	add	x0, x0, #0x0
    6c38:	add	x0, x0, #0x288
    6c3c:	ldr	x1, [x20, #8]
    6c40:	cmp	x1, x0
    6c44:	b.ne	b5f0 <d_print_comp_inner+0x67e8>  // b.any
    6c48:	ldr	x0, [x19, #256]
    6c4c:	cmp	x0, #0xff
    6c50:	ldrsh	w1, [x24, #16]
    6c54:	cbz	w1, b694 <d_print_comp_inner+0x688c>
    6c58:	b.eq	c7c0 <d_print_comp_inner+0x79b8>  // b.none
    6c5c:	add	x1, x0, #0x1
    6c60:	str	x1, [x19, #256]
    6c64:	mov	w2, #0x5f                  	// #95
    6c68:	strb	w2, [x19, x0]
    6c6c:	strb	w2, [x19, #264]
    6c70:	cmp	x1, #0xff
    6c74:	b.ne	c278 <d_print_comp_inner+0x7470>  // b.any
    6c78:	ldp	x3, x2, [x19, #272]
    6c7c:	strb	wzr, [x19, #255]
    6c80:	mov	x0, x19
    6c84:	blr	x3
    6c88:	ldr	x0, [x19, #320]
    6c8c:	mov	w3, #0x6341                	// #25409
    6c90:	mov	w2, #0x63                  	// #99
    6c94:	mov	x1, #0x3                   	// #3
    6c98:	add	x0, x0, #0x1
    6c9c:	strh	w3, [x19]
    6ca0:	strb	w2, [x19, #2]
    6ca4:	str	x0, [x19, #320]
    6ca8:	add	x0, x1, #0x1
    6cac:	str	x0, [x19, #256]
    6cb0:	mov	w2, #0x75                  	// #117
    6cb4:	strb	w2, [x19, x1]
    6cb8:	strb	w2, [x19, #264]
    6cbc:	cmp	x0, #0xff
    6cc0:	b.ne	c2cc <d_print_comp_inner+0x74c4>  // b.any
    6cc4:	ldp	x3, x2, [x19, #272]
    6cc8:	strb	wzr, [x19, #255]
    6ccc:	mov	x1, x0
    6cd0:	mov	x0, x19
    6cd4:	blr	x3
    6cd8:	ldr	x2, [x19, #320]
    6cdc:	mov	x1, #0x1                   	// #1
    6ce0:	mov	x0, #0x0                   	// #0
    6ce4:	add	x2, x2, x1
    6ce8:	str	x2, [x19, #320]
    6cec:	str	x1, [x19, #256]
    6cf0:	mov	w1, #0x6d                  	// #109
    6cf4:	strb	w1, [x19, x0]
    6cf8:	strb	w1, [x19, #264]
    6cfc:	ldp	x21, x22, [sp, #32]
    6d00:	ldp	x23, x24, [sp, #48]
    6d04:	b	4e70 <d_print_comp_inner+0x68>
    6d08:	adrp	x20, 0 <d_make_comp>
    6d0c:	add	x20, x20, #0x0
    6d10:	mov	x23, #0x1                   	// #1
    6d14:	stp	x25, x26, [sp, #64]
    6d18:	add	x25, x20, #0x1e
    6d1c:	ldr	x1, [x19, #256]
    6d20:	b	6d7c <d_print_comp_inner+0x1f74>
    6d24:	ldp	x3, x2, [x19, #272]
    6d28:	strb	wzr, [x19, #255]
    6d2c:	mov	x0, x19
    6d30:	add	x20, x20, #0x1
    6d34:	blr	x3
    6d38:	strb	w21, [x19]
    6d3c:	ldr	x0, [x19, #320]
    6d40:	str	x23, [x19, #256]
    6d44:	strb	w21, [x19, #264]
    6d48:	cmp	x20, x25
    6d4c:	add	x0, x0, #0x1
    6d50:	str	x0, [x19, #320]
    6d54:	b.eq	8b08 <d_print_comp_inner+0x3d00>  // b.none
    6d58:	ldrb	w21, [x20]
    6d5c:	mov	x0, #0x1                   	// #1
    6d60:	add	x1, x0, #0x1
    6d64:	str	x1, [x19, #256]
    6d68:	strb	w21, [x19, x0]
    6d6c:	add	x20, x20, #0x1
    6d70:	strb	w21, [x19, #264]
    6d74:	cmp	x25, x20
    6d78:	b.eq	8b08 <d_print_comp_inner+0x3d00>  // b.none
    6d7c:	ldrb	w21, [x20]
    6d80:	cmp	x1, #0xff
    6d84:	b.eq	6d24 <d_print_comp_inner+0x1f1c>  // b.none
    6d88:	mov	x0, x1
    6d8c:	b	6d60 <d_print_comp_inner+0x1f58>
    6d90:	adrp	x20, 0 <d_make_comp>
    6d94:	add	x20, x20, #0x0
    6d98:	mov	x23, #0x1                   	// #1
    6d9c:	stp	x25, x26, [sp, #64]
    6da0:	add	x25, x20, #0x11
    6da4:	ldr	x1, [x19, #256]
    6da8:	b	6e04 <d_print_comp_inner+0x1ffc>
    6dac:	ldp	x3, x2, [x19, #272]
    6db0:	strb	wzr, [x19, #255]
    6db4:	mov	x0, x19
    6db8:	add	x20, x20, #0x1
    6dbc:	blr	x3
    6dc0:	strb	w21, [x19]
    6dc4:	ldr	x0, [x19, #320]
    6dc8:	str	x23, [x19, #256]
    6dcc:	strb	w21, [x19, #264]
    6dd0:	cmp	x20, x25
    6dd4:	add	x0, x0, #0x1
    6dd8:	str	x0, [x19, #320]
    6ddc:	b.eq	8c08 <d_print_comp_inner+0x3e00>  // b.none
    6de0:	ldrb	w21, [x20]
    6de4:	mov	x0, #0x1                   	// #1
    6de8:	add	x1, x0, #0x1
    6dec:	str	x1, [x19, #256]
    6df0:	strb	w21, [x19, x0]
    6df4:	add	x20, x20, #0x1
    6df8:	strb	w21, [x19, #264]
    6dfc:	cmp	x25, x20
    6e00:	b.eq	8c08 <d_print_comp_inner+0x3e00>  // b.none
    6e04:	ldrb	w21, [x20]
    6e08:	cmp	x1, #0xff
    6e0c:	b.eq	6dac <d_print_comp_inner+0x1fa4>  // b.none
    6e10:	mov	x0, x1
    6e14:	b	6de8 <d_print_comp_inner+0x1fe0>
    6e18:	adrp	x20, 0 <d_make_comp>
    6e1c:	add	x20, x20, #0x0
    6e20:	mov	x23, #0x1                   	// #1
    6e24:	stp	x25, x26, [sp, #64]
    6e28:	add	x25, x20, #0x1a
    6e2c:	ldr	x1, [x19, #256]
    6e30:	b	6e8c <d_print_comp_inner+0x2084>
    6e34:	ldp	x3, x2, [x19, #272]
    6e38:	strb	wzr, [x19, #255]
    6e3c:	mov	x0, x19
    6e40:	add	x20, x20, #0x1
    6e44:	blr	x3
    6e48:	strb	w21, [x19]
    6e4c:	ldr	x0, [x19, #320]
    6e50:	str	x23, [x19, #256]
    6e54:	strb	w21, [x19, #264]
    6e58:	cmp	x20, x25
    6e5c:	add	x0, x0, #0x1
    6e60:	str	x0, [x19, #320]
    6e64:	b.eq	8df0 <d_print_comp_inner+0x3fe8>  // b.none
    6e68:	ldrb	w21, [x20]
    6e6c:	mov	x0, #0x1                   	// #1
    6e70:	add	x1, x0, #0x1
    6e74:	str	x1, [x19, #256]
    6e78:	strb	w21, [x19, x0]
    6e7c:	add	x20, x20, #0x1
    6e80:	strb	w21, [x19, #264]
    6e84:	cmp	x25, x20
    6e88:	b.eq	8df0 <d_print_comp_inner+0x3fe8>  // b.none
    6e8c:	ldrb	w21, [x20]
    6e90:	cmp	x1, #0xff
    6e94:	b.eq	6e34 <d_print_comp_inner+0x202c>  // b.none
    6e98:	mov	x0, x1
    6e9c:	b	6e70 <d_print_comp_inner+0x2068>
    6ea0:	adrp	x20, 0 <d_make_comp>
    6ea4:	add	x20, x20, #0x0
    6ea8:	mov	x23, #0x1                   	// #1
    6eac:	stp	x25, x26, [sp, #64]
    6eb0:	add	x25, x20, #0x1a
    6eb4:	ldr	x1, [x19, #256]
    6eb8:	b	6f14 <d_print_comp_inner+0x210c>
    6ebc:	ldp	x3, x2, [x19, #272]
    6ec0:	strb	wzr, [x19, #255]
    6ec4:	mov	x0, x19
    6ec8:	add	x20, x20, #0x1
    6ecc:	blr	x3
    6ed0:	strb	w21, [x19]
    6ed4:	ldr	x0, [x19, #320]
    6ed8:	str	x23, [x19, #256]
    6edc:	strb	w21, [x19, #264]
    6ee0:	cmp	x20, x25
    6ee4:	add	x0, x0, #0x1
    6ee8:	str	x0, [x19, #320]
    6eec:	b.eq	8788 <d_print_comp_inner+0x3980>  // b.none
    6ef0:	ldrb	w21, [x20]
    6ef4:	mov	x0, #0x1                   	// #1
    6ef8:	add	x1, x0, #0x1
    6efc:	str	x1, [x19, #256]
    6f00:	strb	w21, [x19, x0]
    6f04:	add	x20, x20, #0x1
    6f08:	strb	w21, [x19, #264]
    6f0c:	cmp	x20, x25
    6f10:	b.eq	8788 <d_print_comp_inner+0x3980>  // b.none
    6f14:	ldrb	w21, [x20]
    6f18:	cmp	x1, #0xff
    6f1c:	b.eq	6ebc <d_print_comp_inner+0x20b4>  // b.none
    6f20:	mov	x0, x1
    6f24:	b	6ef8 <d_print_comp_inner+0x20f0>
    6f28:	ldp	x21, x20, [x2, #8]
    6f2c:	cbz	x21, 6f98 <d_print_comp_inner+0x2190>
    6f30:	ldr	w0, [x21, #4]
    6f34:	cmp	w0, #0x1
    6f38:	b.gt	b688 <d_print_comp_inner+0x6880>
    6f3c:	ldr	w1, [x19, #308]
    6f40:	cmp	w1, #0x400
    6f44:	b.gt	b688 <d_print_comp_inner+0x6880>
    6f48:	ldr	x3, [x19, #328]
    6f4c:	add	w0, w0, #0x1
    6f50:	str	w0, [x21, #4]
    6f54:	add	w1, w1, #0x1
    6f58:	add	x0, sp, #0x80
    6f5c:	str	w1, [x19, #308]
    6f60:	str	x0, [x19, #328]
    6f64:	mov	w1, w22
    6f68:	mov	x0, x19
    6f6c:	mov	x2, x21
    6f70:	stp	x21, x3, [sp, #128]
    6f74:	bl	4e08 <d_print_comp_inner>
    6f78:	ldr	w1, [x21, #4]
    6f7c:	ldr	x0, [sp, #136]
    6f80:	str	x0, [x19, #328]
    6f84:	ldr	w0, [x19, #308]
    6f88:	sub	w1, w1, #0x1
    6f8c:	str	w1, [x21, #4]
    6f90:	sub	w0, w0, #0x1
    6f94:	str	w0, [x19, #308]
    6f98:	ldr	x1, [x19, #256]
    6f9c:	add	x0, x1, #0x1
    6fa0:	cmp	x1, #0xff
    6fa4:	b.ne	6fcc <d_print_comp_inner+0x21c4>  // b.any
    6fa8:	ldp	x3, x2, [x19, #272]
    6fac:	strb	wzr, [x19, #255]
    6fb0:	mov	x0, x19
    6fb4:	blr	x3
    6fb8:	ldr	x2, [x19, #320]
    6fbc:	mov	x0, #0x1                   	// #1
    6fc0:	mov	x1, #0x0                   	// #0
    6fc4:	add	x2, x2, x0
    6fc8:	str	x2, [x19, #320]
    6fcc:	str	x0, [x19, #256]
    6fd0:	mov	w2, #0x7b                  	// #123
    6fd4:	strb	w2, [x19, x1]
    6fd8:	strb	w2, [x19, #264]
    6fdc:	cbz	x20, 927c <d_print_comp_inner+0x4474>
    6fe0:	ldr	w1, [x20, #4]
    6fe4:	cmp	w1, #0x1
    6fe8:	b.gt	927c <d_print_comp_inner+0x4474>
    6fec:	ldr	w2, [x19, #308]
    6ff0:	cmp	w2, #0x400
    6ff4:	b.gt	927c <d_print_comp_inner+0x4474>
    6ff8:	ldr	x3, [x19, #328]
    6ffc:	add	w1, w1, #0x1
    7000:	str	w1, [x20, #4]
    7004:	add	w2, w2, #0x1
    7008:	add	x0, sp, #0x80
    700c:	str	w2, [x19, #308]
    7010:	str	x0, [x19, #328]
    7014:	mov	w1, w22
    7018:	mov	x2, x20
    701c:	mov	x0, x19
    7020:	stp	x20, x3, [sp, #128]
    7024:	bl	4e08 <d_print_comp_inner>
    7028:	ldr	w2, [x20, #4]
    702c:	ldr	x0, [sp, #136]
    7030:	str	x0, [x19, #328]
    7034:	ldr	w1, [x19, #308]
    7038:	sub	w2, w2, #0x1
    703c:	ldr	x0, [x19, #256]
    7040:	str	w2, [x20, #4]
    7044:	sub	w1, w1, #0x1
    7048:	str	w1, [x19, #308]
    704c:	add	x1, x0, #0x1
    7050:	cmp	x0, #0xff
    7054:	b.ne	7080 <d_print_comp_inner+0x2278>  // b.any
    7058:	ldp	x3, x2, [x19, #272]
    705c:	strb	wzr, [x19, #255]
    7060:	mov	x1, x0
    7064:	mov	x0, x19
    7068:	blr	x3
    706c:	ldr	x2, [x19, #320]
    7070:	mov	x1, #0x1                   	// #1
    7074:	mov	x0, #0x0                   	// #0
    7078:	add	x2, x2, x1
    707c:	str	x2, [x19, #320]
    7080:	str	x1, [x19, #256]
    7084:	mov	w1, #0x7d                  	// #125
    7088:	strb	w1, [x19, x0]
    708c:	strb	w1, [x19, #264]
    7090:	ldp	x21, x22, [sp, #32]
    7094:	ldp	x23, x24, [sp, #48]
    7098:	b	4e70 <d_print_comp_inner+0x68>
    709c:	ldr	x22, [x2, #8]
    70a0:	ldr	x0, [x19, #256]
    70a4:	ldr	w21, [x22, #16]
    70a8:	cmp	x0, #0xff
    70ac:	b.eq	ae7c <d_print_comp_inner+0x6074>  // b.none
    70b0:	add	x1, x0, #0x1
    70b4:	str	x1, [x19, #256]
    70b8:	mov	w2, #0x6f                  	// #111
    70bc:	strb	w2, [x19, x0]
    70c0:	strb	w2, [x19, #264]
    70c4:	cmp	x1, #0xff
    70c8:	b.ne	a1c4 <d_print_comp_inner+0x53bc>  // b.any
    70cc:	ldp	x3, x2, [x19, #272]
    70d0:	strb	wzr, [x19, #255]
    70d4:	mov	x0, x19
    70d8:	blr	x3
    70dc:	ldr	x0, [x19, #320]
    70e0:	mov	w3, #0x6570                	// #25968
    70e4:	mov	w2, #0x72                  	// #114
    70e8:	mov	x1, #0x3                   	// #3
    70ec:	add	x0, x0, #0x1
    70f0:	strh	w3, [x19]
    70f4:	strb	w2, [x19, #2]
    70f8:	str	x0, [x19, #320]
    70fc:	add	x0, x1, #0x1
    7100:	str	x0, [x19, #256]
    7104:	mov	w2, #0x61                  	// #97
    7108:	strb	w2, [x19, x1]
    710c:	strb	w2, [x19, #264]
    7110:	cmp	x0, #0xff
    7114:	b.ne	a214 <d_print_comp_inner+0x540c>  // b.any
    7118:	ldp	x3, x2, [x19, #272]
    711c:	strb	wzr, [x19, #255]
    7120:	mov	x1, x0
    7124:	mov	x0, x19
    7128:	blr	x3
    712c:	ldr	x0, [x19, #320]
    7130:	mov	w2, #0x74                  	// #116
    7134:	mov	x1, #0x1                   	// #1
    7138:	strb	w2, [x19]
    713c:	add	x0, x0, x1
    7140:	str	x0, [x19, #320]
    7144:	add	x0, x1, #0x1
    7148:	mov	w2, #0x6f                  	// #111
    714c:	strb	w2, [x19, x1]
    7150:	add	x1, x0, #0x1
    7154:	str	x1, [x19, #256]
    7158:	mov	w2, #0x72                  	// #114
    715c:	strb	w2, [x19, x0]
    7160:	strb	w2, [x19, #264]
    7164:	ldr	x20, [x22, #8]
    7168:	ldrb	w0, [x20]
    716c:	sub	w0, w0, #0x61
    7170:	and	w0, w0, #0xff
    7174:	cmp	w0, #0x19
    7178:	b.hi	71bc <d_print_comp_inner+0x23b4>  // b.pmore
    717c:	cmp	x1, #0xff
    7180:	b.ne	dc40 <d_print_comp_inner+0x8e38>  // b.any
    7184:	ldp	x3, x2, [x19, #272]
    7188:	strb	wzr, [x19, #255]
    718c:	mov	x0, x19
    7190:	blr	x3
    7194:	ldr	x2, [x19, #320]
    7198:	mov	x1, #0x1                   	// #1
    719c:	mov	x0, #0x0                   	// #0
    71a0:	add	x2, x2, x1
    71a4:	ldr	x20, [x22, #8]
    71a8:	str	x2, [x19, #320]
    71ac:	str	x1, [x19, #256]
    71b0:	mov	w2, #0x20                  	// #32
    71b4:	strb	w2, [x19, x0]
    71b8:	strb	w2, [x19, #264]
    71bc:	sxtw	x22, w21
    71c0:	sub	w0, w21, #0x1
    71c4:	add	x2, x20, x22
    71c8:	sxtw	x0, w0
    71cc:	ldurb	w2, [x2, #-1]
    71d0:	cmp	w2, #0x20
    71d4:	csel	x22, x22, x0, ne  // ne = any
    71d8:	cbz	x22, d2ac <d_print_comp_inner+0x84a4>
    71dc:	add	x22, x20, x22
    71e0:	mov	x23, #0x1                   	// #1
    71e4:	b	7240 <d_print_comp_inner+0x2438>
    71e8:	ldp	x3, x2, [x19, #272]
    71ec:	strb	wzr, [x19, #255]
    71f0:	mov	x0, x19
    71f4:	add	x20, x20, #0x1
    71f8:	blr	x3
    71fc:	strb	w21, [x19]
    7200:	ldr	x0, [x19, #320]
    7204:	str	x23, [x19, #256]
    7208:	strb	w21, [x19, #264]
    720c:	cmp	x20, x22
    7210:	add	x0, x0, #0x1
    7214:	str	x0, [x19, #320]
    7218:	b.eq	c3a0 <d_print_comp_inner+0x7598>  // b.none
    721c:	ldrb	w21, [x20]
    7220:	mov	x0, #0x1                   	// #1
    7224:	add	x1, x0, #0x1
    7228:	str	x1, [x19, #256]
    722c:	strb	w21, [x19, x0]
    7230:	add	x20, x20, #0x1
    7234:	strb	w21, [x19, #264]
    7238:	cmp	x22, x20
    723c:	b.eq	974c <d_print_comp_inner+0x4944>  // b.none
    7240:	ldrb	w21, [x20]
    7244:	cmp	x1, #0xff
    7248:	b.eq	71e8 <d_print_comp_inner+0x23e0>  // b.none
    724c:	mov	x0, x1
    7250:	b	7224 <d_print_comp_inner+0x241c>
    7254:	ldr	x0, [x19, #256]
    7258:	cmp	x0, #0xff
    725c:	b.eq	b524 <d_print_comp_inner+0x671c>  // b.none
    7260:	add	x1, x0, #0x1
    7264:	str	x1, [x19, #256]
    7268:	mov	w2, #0x6f                  	// #111
    726c:	strb	w2, [x19, x0]
    7270:	strb	w2, [x19, #264]
    7274:	cmp	x1, #0xff
    7278:	b.ne	9c88 <d_print_comp_inner+0x4e80>  // b.any
    727c:	ldp	x3, x2, [x19, #272]
    7280:	strb	wzr, [x19, #255]
    7284:	mov	x0, x19
    7288:	blr	x3
    728c:	ldr	x0, [x19, #320]
    7290:	mov	w2, #0x6570                	// #25968
    7294:	mov	w1, #0x72                  	// #114
    7298:	mov	x3, #0x3                   	// #3
    729c:	add	x0, x0, #0x1
    72a0:	strh	w2, [x19]
    72a4:	strb	w1, [x19, #2]
    72a8:	str	x0, [x19, #320]
    72ac:	add	x1, x3, #0x1
    72b0:	str	x1, [x19, #256]
    72b4:	mov	w0, #0x61                  	// #97
    72b8:	strb	w0, [x19, x3]
    72bc:	strb	w0, [x19, #264]
    72c0:	cmp	x1, #0xff
    72c4:	b.ne	9cd8 <d_print_comp_inner+0x4ed0>  // b.any
    72c8:	ldp	x3, x2, [x19, #272]
    72cc:	strb	wzr, [x19, #255]
    72d0:	mov	x0, x19
    72d4:	blr	x3
    72d8:	ldr	x0, [x19, #320]
    72dc:	mov	w2, #0x6f74                	// #28532
    72e0:	mov	x1, #0x2                   	// #2
    72e4:	strh	w2, [x19]
    72e8:	add	x0, x0, #0x1
    72ec:	str	x0, [x19, #320]
    72f0:	add	x0, x1, #0x1
    72f4:	mov	w2, #0x72                  	// #114
    72f8:	strb	w2, [x19, x1]
    72fc:	add	x1, x0, #0x1
    7300:	str	x1, [x19, #256]
    7304:	mov	w1, #0x20                  	// #32
    7308:	strb	w1, [x19, x0]
    730c:	strb	w1, [x19, #264]
    7310:	ldr	x20, [x24, #16]
    7314:	cbz	x20, 92b8 <d_print_comp_inner+0x44b0>
    7318:	ldr	w0, [x20, #4]
    731c:	cmp	w0, #0x1
    7320:	b.gt	92b8 <d_print_comp_inner+0x44b0>
    7324:	ldr	w1, [x19, #308]
    7328:	cmp	w1, #0x400
    732c:	b.gt	92b8 <d_print_comp_inner+0x44b0>
    7330:	ldr	x3, [x19, #328]
    7334:	add	w0, w0, #0x1
    7338:	str	w0, [x20, #4]
    733c:	add	w1, w1, #0x1
    7340:	add	x0, sp, #0x80
    7344:	str	w1, [x19, #308]
    7348:	str	x0, [x19, #328]
    734c:	mov	w1, w22
    7350:	mov	x0, x19
    7354:	mov	x2, x20
    7358:	stp	x20, x3, [sp, #128]
    735c:	bl	4e08 <d_print_comp_inner>
    7360:	ldr	w1, [x20, #4]
    7364:	ldr	x0, [sp, #136]
    7368:	sub	w1, w1, #0x1
    736c:	ldp	x21, x22, [sp, #32]
    7370:	ldp	x23, x24, [sp, #48]
    7374:	str	x0, [x19, #328]
    7378:	ldr	w0, [x19, #308]
    737c:	str	w1, [x20, #4]
    7380:	sub	w0, w0, #0x1
    7384:	str	w0, [x19, #308]
    7388:	b	4e70 <d_print_comp_inner+0x68>
    738c:	ldr	x20, [x2, #8]
    7390:	cbz	x20, 90ac <d_print_comp_inner+0x42a4>
    7394:	ldr	w0, [x20, #4]
    7398:	cmp	w0, #0x1
    739c:	b.gt	90ac <d_print_comp_inner+0x42a4>
    73a0:	ldr	w1, [x19, #308]
    73a4:	cmp	w1, #0x400
    73a8:	b.gt	90ac <d_print_comp_inner+0x42a4>
    73ac:	ldr	x3, [x19, #328]
    73b0:	add	w0, w0, #0x1
    73b4:	str	w0, [x20, #4]
    73b8:	add	w1, w1, #0x1
    73bc:	add	x0, sp, #0x80
    73c0:	str	w1, [x19, #308]
    73c4:	str	x0, [x19, #328]
    73c8:	mov	w1, w22
    73cc:	mov	x0, x19
    73d0:	mov	x2, x20
    73d4:	stp	x20, x3, [sp, #128]
    73d8:	bl	4e08 <d_print_comp_inner>
    73dc:	ldr	w1, [x20, #4]
    73e0:	ldr	x0, [sp, #136]
    73e4:	str	x0, [x19, #328]
    73e8:	ldr	w0, [x19, #308]
    73ec:	sub	w1, w1, #0x1
    73f0:	str	w1, [x20, #4]
    73f4:	sub	w0, w0, #0x1
    73f8:	str	w0, [x19, #308]
    73fc:	ldr	x0, [x19, #256]
    7400:	cmp	x0, #0xff
    7404:	b.eq	ac5c <d_print_comp_inner+0x5e54>  // b.none
    7408:	add	x1, x0, #0x1
    740c:	str	x1, [x19, #256]
    7410:	mov	w2, #0x20                  	// #32
    7414:	strb	w2, [x19, x0]
    7418:	strb	w2, [x19, #264]
    741c:	cmp	x1, #0xff
    7420:	b.ne	a56c <d_print_comp_inner+0x5764>  // b.any
    7424:	ldp	x3, x2, [x19, #272]
    7428:	strb	wzr, [x19, #255]
    742c:	mov	x0, x19
    7430:	blr	x3
    7434:	ldr	x0, [x19, #320]
    7438:	mov	w3, #0x635b                	// #25435
    743c:	mov	w2, #0x6c                  	// #108
    7440:	mov	x1, #0x3                   	// #3
    7444:	add	x0, x0, #0x1
    7448:	strh	w3, [x19]
    744c:	strb	w2, [x19, #2]
    7450:	str	x0, [x19, #320]
    7454:	add	x0, x1, #0x1
    7458:	str	x0, [x19, #256]
    745c:	mov	w2, #0x6f                  	// #111
    7460:	strb	w2, [x19, x1]
    7464:	strb	w2, [x19, #264]
    7468:	cmp	x0, #0xff
    746c:	b.ne	a5bc <d_print_comp_inner+0x57b4>  // b.any
    7470:	ldp	x3, x2, [x19, #272]
    7474:	strb	wzr, [x19, #255]
    7478:	mov	x1, x0
    747c:	mov	x0, x19
    7480:	blr	x3
    7484:	ldr	x0, [x19, #320]
    7488:	mov	w1, #0x6e                  	// #110
    748c:	mov	x2, #0x1                   	// #1
    7490:	strb	w1, [x19]
    7494:	add	x0, x0, x2
    7498:	str	x0, [x19, #320]
    749c:	add	x1, x2, #0x1
    74a0:	mov	w0, #0x65                  	// #101
    74a4:	strb	w0, [x19, x2]
    74a8:	add	x0, x1, #0x1
    74ac:	str	x0, [x19, #256]
    74b0:	mov	w2, #0x20                  	// #32
    74b4:	strb	w2, [x19, x1]
    74b8:	strb	w2, [x19, #264]
    74bc:	ldr	x20, [x24, #16]
    74c0:	cbz	x20, 9258 <d_print_comp_inner+0x4450>
    74c4:	ldr	w1, [x20, #4]
    74c8:	cmp	w1, #0x1
    74cc:	b.gt	9258 <d_print_comp_inner+0x4450>
    74d0:	ldr	w2, [x19, #308]
    74d4:	cmp	w2, #0x400
    74d8:	b.gt	9258 <d_print_comp_inner+0x4450>
    74dc:	ldr	x3, [x19, #328]
    74e0:	add	w1, w1, #0x1
    74e4:	str	w1, [x20, #4]
    74e8:	add	w2, w2, #0x1
    74ec:	add	x0, sp, #0x80
    74f0:	str	w2, [x19, #308]
    74f4:	str	x0, [x19, #328]
    74f8:	mov	w1, w22
    74fc:	mov	x2, x20
    7500:	mov	x0, x19
    7504:	stp	x20, x3, [sp, #128]
    7508:	bl	4e08 <d_print_comp_inner>
    750c:	ldr	w2, [x20, #4]
    7510:	ldr	x0, [sp, #136]
    7514:	str	x0, [x19, #328]
    7518:	ldr	w1, [x19, #308]
    751c:	sub	w2, w2, #0x1
    7520:	ldr	x0, [x19, #256]
    7524:	str	w2, [x20, #4]
    7528:	sub	w1, w1, #0x1
    752c:	str	w1, [x19, #308]
    7530:	add	x1, x0, #0x1
    7534:	cmp	x0, #0xff
    7538:	b.ne	7564 <d_print_comp_inner+0x275c>  // b.any
    753c:	ldp	x3, x2, [x19, #272]
    7540:	strb	wzr, [x19, #255]
    7544:	mov	x1, x0
    7548:	mov	x0, x19
    754c:	blr	x3
    7550:	ldr	x2, [x19, #320]
    7554:	mov	x1, #0x1                   	// #1
    7558:	mov	x0, #0x0                   	// #0
    755c:	add	x2, x2, x1
    7560:	str	x2, [x19, #320]
    7564:	str	x1, [x19, #256]
    7568:	mov	w1, #0x5d                  	// #93
    756c:	strb	w1, [x19, x0]
    7570:	strb	w1, [x19, #264]
    7574:	ldp	x21, x22, [sp, #32]
    7578:	ldp	x23, x24, [sp, #48]
    757c:	b	4e70 <d_print_comp_inner+0x68>
    7580:	ldr	x2, [x2, #8]
    7584:	mov	w1, w22
    7588:	mov	x0, x19
    758c:	bl	dd28 <d_print_expr_op>
    7590:	ldp	x21, x22, [sp, #32]
    7594:	ldp	x23, x24, [sp, #48]
    7598:	b	4e70 <d_print_comp_inner+0x68>
    759c:	ldp	x21, x20, [x2, #8]
    75a0:	ldr	w0, [x21]
    75a4:	cmp	w0, #0x32
    75a8:	b.eq	b8a4 <d_print_comp_inner+0x6a9c>  // b.none
    75ac:	cmp	w0, #0x34
    75b0:	b.ne	dc58 <d_print_comp_inner+0x8e50>  // b.any
    75b4:	ldr	x1, [x19, #256]
    75b8:	add	x0, x1, #0x1
    75bc:	cmp	x1, #0xff
    75c0:	b.ne	75e8 <d_print_comp_inner+0x27e0>  // b.any
    75c4:	ldp	x3, x2, [x19, #272]
    75c8:	strb	wzr, [x19, #255]
    75cc:	mov	x0, x19
    75d0:	blr	x3
    75d4:	ldr	x2, [x19, #320]
    75d8:	mov	x0, #0x1                   	// #1
    75dc:	mov	x1, #0x0                   	// #0
    75e0:	add	x2, x2, x0
    75e4:	str	x2, [x19, #320]
    75e8:	str	x0, [x19, #256]
    75ec:	mov	w2, #0x28                  	// #40
    75f0:	strb	w2, [x19, x1]
    75f4:	strb	w2, [x19, #264]
    75f8:	ldr	x21, [x21, #8]
    75fc:	cbz	x21, c388 <d_print_comp_inner+0x7580>
    7600:	ldr	w1, [x21, #4]
    7604:	cmp	w1, #0x1
    7608:	b.gt	c388 <d_print_comp_inner+0x7580>
    760c:	ldr	w2, [x19, #308]
    7610:	cmp	w2, #0x400
    7614:	b.gt	c388 <d_print_comp_inner+0x7580>
    7618:	ldr	x3, [x19, #328]
    761c:	add	w1, w1, #0x1
    7620:	str	w1, [x21, #4]
    7624:	add	w2, w2, #0x1
    7628:	add	x0, sp, #0x80
    762c:	str	w2, [x19, #308]
    7630:	str	x0, [x19, #328]
    7634:	mov	w1, w22
    7638:	mov	x2, x21
    763c:	mov	x0, x19
    7640:	stp	x21, x3, [sp, #128]
    7644:	bl	4e08 <d_print_comp_inner>
    7648:	ldr	w2, [x21, #4]
    764c:	ldr	x0, [sp, #136]
    7650:	str	x0, [x19, #328]
    7654:	ldr	w1, [x19, #308]
    7658:	sub	w2, w2, #0x1
    765c:	ldr	x0, [x19, #256]
    7660:	str	w2, [x21, #4]
    7664:	sub	w1, w1, #0x1
    7668:	str	w1, [x19, #308]
    766c:	add	x1, x0, #0x1
    7670:	cmp	x0, #0xff
    7674:	b.ne	76a0 <d_print_comp_inner+0x2898>  // b.any
    7678:	ldp	x3, x2, [x19, #272]
    767c:	strb	wzr, [x19, #255]
    7680:	mov	x1, x0
    7684:	mov	x0, x19
    7688:	blr	x3
    768c:	ldr	x2, [x19, #320]
    7690:	mov	x1, #0x1                   	// #1
    7694:	mov	x0, #0x0                   	// #0
    7698:	add	x2, x2, x1
    769c:	str	x2, [x19, #320]
    76a0:	str	x1, [x19, #256]
    76a4:	mov	w1, #0x29                  	// #41
    76a8:	strb	w1, [x19, x0]
    76ac:	strb	w1, [x19, #264]
    76b0:	mov	w1, w22
    76b4:	mov	x2, x20
    76b8:	mov	x0, x19
    76bc:	bl	de90 <d_print_subexpr>
    76c0:	ldp	x21, x22, [sp, #32]
    76c4:	ldp	x23, x24, [sp, #48]
    76c8:	b	4e70 <d_print_comp_inner+0x68>
    76cc:	ldr	x0, [x2, #16]
    76d0:	ldr	w0, [x0]
    76d4:	cmp	w0, #0x39
    76d8:	b.ne	4e9c <d_print_comp_inner+0x94>  // b.any
    76dc:	ldr	x2, [x2, #8]
    76e0:	ldr	x0, [x2, #8]
    76e4:	ldr	x0, [x0]
    76e8:	ldrb	w1, [x0, #1]
    76ec:	cmp	w1, #0x63
    76f0:	b.eq	ceb0 <d_print_comp_inner+0x80a8>  // b.none
    76f4:	add	x3, x24, #0x10
    76f8:	mov	w1, w22
    76fc:	mov	x0, x19
    7700:	bl	dfe0 <d_maybe_print_fold_expression.isra.0>
    7704:	cbnz	w0, d100 <d_print_comp_inner+0x82f8>
    7708:	ldr	x0, [x24, #8]
    770c:	ldr	w1, [x0]
    7710:	cmp	w1, #0x32
    7714:	b.eq	d6b0 <d_print_comp_inner+0x88a8>  // b.none
    7718:	ldr	x0, [x0, #8]
    771c:	ldr	x1, [x0]
    7720:	ldrb	w0, [x1]
    7724:	subs	w0, w0, #0x63
    7728:	b.ne	773c <d_print_comp_inner+0x2934>  // b.any
    772c:	ldrb	w0, [x1, #1]
    7730:	subs	w0, w0, #0x6c
    7734:	b.ne	773c <d_print_comp_inner+0x2934>  // b.any
    7738:	ldrb	w0, [x1, #2]
    773c:	ldr	x1, [x24, #16]
    7740:	ldr	x2, [x1, #8]
    7744:	cbnz	w0, 7754 <d_print_comp_inner+0x294c>
    7748:	ldr	w0, [x2]
    774c:	cmp	w0, #0x3
    7750:	b.eq	d7d0 <d_print_comp_inner+0x89c8>  // b.none
    7754:	mov	w1, w22
    7758:	mov	x0, x19
    775c:	bl	de90 <d_print_subexpr>
    7760:	ldr	x2, [x24, #8]
    7764:	ldr	x0, [x2, #8]
    7768:	ldr	x0, [x0]
    776c:	ldrb	w1, [x0]
    7770:	cmp	w1, #0x69
    7774:	b.ne	d1c8 <d_print_comp_inner+0x83c0>  // b.any
    7778:	ldrb	w3, [x0, #1]
    777c:	cmp	w3, #0x78
    7780:	b.ne	d1c8 <d_print_comp_inner+0x83c0>  // b.any
    7784:	ldrb	w3, [x0, #2]
    7788:	cbnz	w3, d1c8 <d_print_comp_inner+0x83c0>
    778c:	ldr	x1, [x19, #256]
    7790:	cmp	x1, #0xff
    7794:	b.ne	77bc <d_print_comp_inner+0x29b4>  // b.any
    7798:	ldp	x3, x2, [x19, #272]
    779c:	strb	wzr, [x19, #255]
    77a0:	mov	x0, x19
    77a4:	blr	x3
    77a8:	str	xzr, [x19, #256]
    77ac:	ldr	x0, [x19, #320]
    77b0:	mov	x1, #0x0                   	// #0
    77b4:	add	x0, x0, #0x1
    77b8:	str	x0, [x19, #320]
    77bc:	add	x0, x1, #0x1
    77c0:	str	x0, [x19, #256]
    77c4:	mov	w0, #0x5b                  	// #91
    77c8:	strb	w0, [x19, x1]
    77cc:	strb	w0, [x19, #264]
    77d0:	mov	w1, w22
    77d4:	mov	x0, x19
    77d8:	ldr	x2, [x24, #16]
    77dc:	ldr	x2, [x2, #16]
    77e0:	bl	dc90 <d_print_comp>
    77e4:	ldr	x1, [x19, #256]
    77e8:	cmp	x1, #0xff
    77ec:	b.ne	7814 <d_print_comp_inner+0x2a0c>  // b.any
    77f0:	ldp	x3, x2, [x19, #272]
    77f4:	strb	wzr, [x19, #255]
    77f8:	mov	x0, x19
    77fc:	blr	x3
    7800:	str	xzr, [x19, #256]
    7804:	ldr	x0, [x19, #320]
    7808:	mov	x1, #0x0                   	// #0
    780c:	add	x0, x0, #0x1
    7810:	str	x0, [x19, #320]
    7814:	add	x0, x1, #0x1
    7818:	str	x0, [x19, #256]
    781c:	mov	w0, #0x5d                  	// #93
    7820:	strb	w0, [x19, x1]
    7824:	strb	w0, [x19, #264]
    7828:	ldr	x0, [x24, #8]
    782c:	ldr	w1, [x0]
    7830:	cmp	w1, #0x32
    7834:	b.eq	d71c <d_print_comp_inner+0x8914>  // b.none
    7838:	ldp	x21, x22, [sp, #32]
    783c:	ldp	x23, x24, [sp, #48]
    7840:	b	4e70 <d_print_comp_inner+0x68>
    7844:	adrp	x20, 0 <d_make_comp>
    7848:	add	x20, x20, #0x0
    784c:	mov	x23, #0x1                   	// #1
    7850:	stp	x25, x26, [sp, #64]
    7854:	add	x25, x20, #0x10
    7858:	ldr	x1, [x19, #256]
    785c:	b	78b8 <d_print_comp_inner+0x2ab0>
    7860:	ldp	x3, x2, [x19, #272]
    7864:	strb	wzr, [x19, #255]
    7868:	mov	x0, x19
    786c:	add	x20, x20, #0x1
    7870:	blr	x3
    7874:	strb	w21, [x19]
    7878:	ldr	x0, [x19, #320]
    787c:	str	x23, [x19, #256]
    7880:	strb	w21, [x19, #264]
    7884:	cmp	x20, x25
    7888:	add	x0, x0, #0x1
    788c:	str	x0, [x19, #320]
    7890:	b.eq	8888 <d_print_comp_inner+0x3a80>  // b.none
    7894:	ldrb	w21, [x20]
    7898:	mov	x0, #0x1                   	// #1
    789c:	add	x1, x0, #0x1
    78a0:	str	x1, [x19, #256]
    78a4:	strb	w21, [x19, x0]
    78a8:	add	x20, x20, #0x1
    78ac:	strb	w21, [x19, #264]
    78b0:	cmp	x25, x20
    78b4:	b.eq	8888 <d_print_comp_inner+0x3a80>  // b.none
    78b8:	ldrb	w21, [x20]
    78bc:	cmp	x1, #0xff
    78c0:	b.eq	7860 <d_print_comp_inner+0x2a58>  // b.none
    78c4:	mov	x0, x1
    78c8:	b	789c <d_print_comp_inner+0x2a94>
    78cc:	ldrsw	x22, [x2, #16]
    78d0:	ldr	x20, [x2, #8]
    78d4:	cbz	x22, d2c4 <d_print_comp_inner+0x84bc>
    78d8:	add	x22, x20, x22
    78dc:	mov	x23, #0x1                   	// #1
    78e0:	ldr	x1, [x19, #256]
    78e4:	b	7940 <d_print_comp_inner+0x2b38>
    78e8:	ldp	x3, x2, [x19, #272]
    78ec:	strb	wzr, [x19, #255]
    78f0:	mov	x0, x19
    78f4:	add	x20, x20, #0x1
    78f8:	blr	x3
    78fc:	strb	w21, [x19]
    7900:	ldr	x0, [x19, #320]
    7904:	str	x23, [x19, #256]
    7908:	strb	w21, [x19, #264]
    790c:	cmp	x20, x22
    7910:	add	x0, x0, #0x1
    7914:	str	x0, [x19, #320]
    7918:	b.eq	c3ac <d_print_comp_inner+0x75a4>  // b.none
    791c:	ldrb	w21, [x20]
    7920:	mov	x0, #0x1                   	// #1
    7924:	add	x1, x0, #0x1
    7928:	str	x1, [x19, #256]
    792c:	strb	w21, [x19, x0]
    7930:	add	x20, x20, #0x1
    7934:	strb	w21, [x19, #264]
    7938:	cmp	x22, x20
    793c:	b.eq	9758 <d_print_comp_inner+0x4950>  // b.none
    7940:	ldrb	w21, [x20]
    7944:	cmp	x1, #0xff
    7948:	b.eq	78e8 <d_print_comp_inner+0x2ae0>  // b.none
    794c:	mov	x0, x1
    7950:	b	7924 <d_print_comp_inner+0x2b1c>
    7954:	ldr	w2, [x2, #8]
    7958:	adrp	x1, 0 <d_make_comp>
    795c:	add	x1, x1, #0x0
    7960:	add	x20, sp, #0x80
    7964:	mov	x0, x20
    7968:	bl	0 <sprintf>
    796c:	mov	x0, x20
    7970:	bl	0 <strlen>
    7974:	cbz	x0, d2b8 <d_print_comp_inner+0x84b0>
    7978:	add	x22, x20, x0
    797c:	mov	x23, #0x1                   	// #1
    7980:	ldr	x1, [x19, #256]
    7984:	b	79e0 <d_print_comp_inner+0x2bd8>
    7988:	ldp	x3, x2, [x19, #272]
    798c:	strb	wzr, [x19, #255]
    7990:	mov	x0, x19
    7994:	add	x20, x20, #0x1
    7998:	blr	x3
    799c:	strb	w21, [x19]
    79a0:	ldr	x0, [x19, #320]
    79a4:	str	x23, [x19, #256]
    79a8:	strb	w21, [x19, #264]
    79ac:	cmp	x20, x22
    79b0:	add	x0, x0, #0x1
    79b4:	str	x0, [x19, #320]
    79b8:	b.eq	c394 <d_print_comp_inner+0x758c>  // b.none
    79bc:	ldrb	w21, [x20]
    79c0:	mov	x0, #0x1                   	// #1
    79c4:	add	x1, x0, #0x1
    79c8:	str	x1, [x19, #256]
    79cc:	strb	w21, [x19, x0]
    79d0:	add	x20, x20, #0x1
    79d4:	strb	w21, [x19, #264]
    79d8:	cmp	x22, x20
    79dc:	b.eq	9764 <d_print_comp_inner+0x495c>  // b.none
    79e0:	ldrb	w21, [x20]
    79e4:	cmp	x1, #0xff
    79e8:	b.eq	7988 <d_print_comp_inner+0x2b80>  // b.none
    79ec:	mov	x0, x1
    79f0:	b	79c4 <d_print_comp_inner+0x2bbc>
    79f4:	ldr	x0, [x19, #256]
    79f8:	cmp	x0, #0xff
    79fc:	b.eq	9670 <d_print_comp_inner+0x4868>  // b.none
    7a00:	add	x1, x0, #0x1
    7a04:	str	x1, [x19, #256]
    7a08:	mov	w2, #0x64                  	// #100
    7a0c:	strb	w2, [x19, x0]
    7a10:	strb	w2, [x19, #264]
    7a14:	cmp	x1, #0xff
    7a18:	b.ne	aa10 <d_print_comp_inner+0x5c08>  // b.any
    7a1c:	ldp	x3, x2, [x19, #272]
    7a20:	strb	wzr, [x19, #255]
    7a24:	mov	x0, x19
    7a28:	blr	x3
    7a2c:	ldr	x0, [x19, #320]
    7a30:	mov	w3, #0x6365                	// #25445
    7a34:	mov	w2, #0x6c                  	// #108
    7a38:	mov	x1, #0x3                   	// #3
    7a3c:	add	x0, x0, #0x1
    7a40:	strh	w3, [x19]
    7a44:	strb	w2, [x19, #2]
    7a48:	str	x0, [x19, #320]
    7a4c:	add	x0, x1, #0x1
    7a50:	str	x0, [x19, #256]
    7a54:	mov	w2, #0x74                  	// #116
    7a58:	strb	w2, [x19, x1]
    7a5c:	strb	w2, [x19, #264]
    7a60:	cmp	x0, #0xff
    7a64:	b.ne	aa60 <d_print_comp_inner+0x5c58>  // b.any
    7a68:	ldp	x3, x2, [x19, #272]
    7a6c:	strb	wzr, [x19, #255]
    7a70:	mov	x1, x0
    7a74:	mov	x0, x19
    7a78:	blr	x3
    7a7c:	ldr	x0, [x19, #320]
    7a80:	mov	w2, #0x7079                	// #28793
    7a84:	mov	w1, #0x65                  	// #101
    7a88:	mov	x3, #0x3                   	// #3
    7a8c:	add	x0, x0, #0x1
    7a90:	strh	w2, [x19]
    7a94:	strb	w1, [x19, #2]
    7a98:	str	x0, [x19, #320]
    7a9c:	add	x1, x3, #0x1
    7aa0:	str	x1, [x19, #256]
    7aa4:	mov	w0, #0x20                  	// #32
    7aa8:	strb	w0, [x19, x3]
    7aac:	strb	w0, [x19, #264]
    7ab0:	cmp	x1, #0xff
    7ab4:	b.ne	9738 <d_print_comp_inner+0x4930>  // b.any
    7ab8:	ldp	x3, x2, [x19, #272]
    7abc:	strb	wzr, [x19, #255]
    7ac0:	mov	x0, x19
    7ac4:	blr	x3
    7ac8:	ldr	x2, [x19, #320]
    7acc:	mov	x0, #0x1                   	// #1
    7ad0:	mov	x1, #0x0                   	// #0
    7ad4:	add	x2, x2, x0
    7ad8:	str	x2, [x19, #320]
    7adc:	str	x0, [x19, #256]
    7ae0:	mov	w2, #0x28                  	// #40
    7ae4:	strb	w2, [x19, x1]
    7ae8:	strb	w2, [x19, #264]
    7aec:	ldr	x20, [x24, #8]
    7af0:	cbz	x20, 9088 <d_print_comp_inner+0x4280>
    7af4:	ldr	w1, [x20, #4]
    7af8:	cmp	w1, #0x1
    7afc:	b.gt	9088 <d_print_comp_inner+0x4280>
    7b00:	ldr	w2, [x19, #308]
    7b04:	cmp	w2, #0x400
    7b08:	b.gt	9088 <d_print_comp_inner+0x4280>
    7b0c:	ldr	x3, [x19, #328]
    7b10:	add	w1, w1, #0x1
    7b14:	str	w1, [x20, #4]
    7b18:	add	w2, w2, #0x1
    7b1c:	add	x0, sp, #0x80
    7b20:	str	w2, [x19, #308]
    7b24:	str	x0, [x19, #328]
    7b28:	mov	w1, w22
    7b2c:	mov	x2, x20
    7b30:	mov	x0, x19
    7b34:	stp	x20, x3, [sp, #128]
    7b38:	bl	4e08 <d_print_comp_inner>
    7b3c:	ldr	w2, [x20, #4]
    7b40:	ldr	x0, [sp, #136]
    7b44:	str	x0, [x19, #328]
    7b48:	ldr	w1, [x19, #308]
    7b4c:	sub	w2, w2, #0x1
    7b50:	ldr	x0, [x19, #256]
    7b54:	str	w2, [x20, #4]
    7b58:	sub	w1, w1, #0x1
    7b5c:	str	w1, [x19, #308]
    7b60:	add	x1, x0, #0x1
    7b64:	cmp	x0, #0xff
    7b68:	b.ne	7b94 <d_print_comp_inner+0x2d8c>  // b.any
    7b6c:	ldp	x3, x2, [x19, #272]
    7b70:	strb	wzr, [x19, #255]
    7b74:	mov	x1, x0
    7b78:	mov	x0, x19
    7b7c:	blr	x3
    7b80:	ldr	x2, [x19, #320]
    7b84:	mov	x1, #0x1                   	// #1
    7b88:	mov	x0, #0x0                   	// #0
    7b8c:	add	x2, x2, x1
    7b90:	str	x2, [x19, #320]
    7b94:	str	x1, [x19, #256]
    7b98:	mov	w1, #0x29                  	// #41
    7b9c:	strb	w1, [x19, x0]
    7ba0:	strb	w1, [x19, #264]
    7ba4:	ldp	x21, x22, [sp, #32]
    7ba8:	ldp	x23, x24, [sp, #48]
    7bac:	b	4e70 <d_print_comp_inner+0x68>
    7bb0:	adrp	x20, 0 <d_make_comp>
    7bb4:	add	x20, x20, #0x0
    7bb8:	mov	x23, #0x1                   	// #1
    7bbc:	stp	x25, x26, [sp, #64]
    7bc0:	add	x25, x20, #0x1d
    7bc4:	ldr	x1, [x19, #256]
    7bc8:	b	7c24 <d_print_comp_inner+0x2e1c>
    7bcc:	ldp	x3, x2, [x19, #272]
    7bd0:	strb	wzr, [x19, #255]
    7bd4:	mov	x0, x19
    7bd8:	add	x20, x20, #0x1
    7bdc:	blr	x3
    7be0:	strb	w21, [x19]
    7be4:	ldr	x0, [x19, #320]
    7be8:	str	x23, [x19, #256]
    7bec:	strb	w21, [x19, #264]
    7bf0:	cmp	x20, x25
    7bf4:	add	x0, x0, #0x1
    7bf8:	str	x0, [x19, #320]
    7bfc:	b.eq	8988 <d_print_comp_inner+0x3b80>  // b.none
    7c00:	ldrb	w21, [x20]
    7c04:	mov	x0, #0x1                   	// #1
    7c08:	add	x1, x0, #0x1
    7c0c:	str	x1, [x19, #256]
    7c10:	strb	w21, [x19, x0]
    7c14:	add	x20, x20, #0x1
    7c18:	strb	w21, [x19, #264]
    7c1c:	cmp	x20, x25
    7c20:	b.eq	8988 <d_print_comp_inner+0x3b80>  // b.none
    7c24:	ldrb	w21, [x20]
    7c28:	cmp	x1, #0xff
    7c2c:	b.eq	7bcc <d_print_comp_inner+0x2dc4>  // b.none
    7c30:	mov	x0, x1
    7c34:	b	7c08 <d_print_comp_inner+0x2e00>
    7c38:	ldr	x1, [x19, #256]
    7c3c:	add	x0, x1, #0x1
    7c40:	cmp	x1, #0xff
    7c44:	b.ne	7c6c <d_print_comp_inner+0x2e64>  // b.any
    7c48:	ldp	x3, x2, [x19, #272]
    7c4c:	strb	wzr, [x19, #255]
    7c50:	mov	x0, x19
    7c54:	blr	x3
    7c58:	ldr	x2, [x19, #320]
    7c5c:	mov	x0, #0x1                   	// #1
    7c60:	mov	x1, #0x0                   	// #0
    7c64:	add	x2, x2, x0
    7c68:	str	x2, [x19, #320]
    7c6c:	str	x0, [x19, #256]
    7c70:	mov	w0, #0x7e                  	// #126
    7c74:	strb	w0, [x19, x1]
    7c78:	strb	w0, [x19, #264]
    7c7c:	ldr	x20, [x24, #16]
    7c80:	cbz	x20, 9074 <d_print_comp_inner+0x426c>
    7c84:	ldr	w0, [x20, #4]
    7c88:	cmp	w0, #0x1
    7c8c:	b.gt	9074 <d_print_comp_inner+0x426c>
    7c90:	ldr	w1, [x19, #308]
    7c94:	cmp	w1, #0x400
    7c98:	b.gt	9074 <d_print_comp_inner+0x426c>
    7c9c:	ldr	x3, [x19, #328]
    7ca0:	add	w0, w0, #0x1
    7ca4:	str	w0, [x20, #4]
    7ca8:	add	w1, w1, #0x1
    7cac:	add	x0, sp, #0x80
    7cb0:	str	w1, [x19, #308]
    7cb4:	str	x0, [x19, #328]
    7cb8:	mov	w1, w22
    7cbc:	mov	x0, x19
    7cc0:	mov	x2, x20
    7cc4:	stp	x20, x3, [sp, #128]
    7cc8:	bl	4e08 <d_print_comp_inner>
    7ccc:	ldr	w1, [x20, #4]
    7cd0:	ldr	x0, [sp, #136]
    7cd4:	sub	w1, w1, #0x1
    7cd8:	ldp	x21, x22, [sp, #32]
    7cdc:	ldp	x23, x24, [sp, #48]
    7ce0:	str	x0, [x19, #328]
    7ce4:	ldr	w0, [x19, #308]
    7ce8:	str	w1, [x20, #4]
    7cec:	sub	w0, w0, #0x1
    7cf0:	str	w0, [x19, #308]
    7cf4:	b	4e70 <d_print_comp_inner+0x68>
    7cf8:	ldr	x0, [x19, #256]
    7cfc:	cmp	x0, #0xff
    7d00:	b.eq	a80c <d_print_comp_inner+0x5a04>  // b.none
    7d04:	add	x1, x0, #0x1
    7d08:	str	x1, [x19, #256]
    7d0c:	mov	w2, #0x76                  	// #118
    7d10:	strb	w2, [x19, x0]
    7d14:	strb	w2, [x19, #264]
    7d18:	cmp	x1, #0xff
    7d1c:	b.ne	9f4c <d_print_comp_inner+0x5144>  // b.any
    7d20:	ldp	x3, x2, [x19, #272]
    7d24:	strb	wzr, [x19, #255]
    7d28:	mov	x0, x19
    7d2c:	blr	x3
    7d30:	ldr	x0, [x19, #320]
    7d34:	mov	w2, #0x6174                	// #24948
    7d38:	mov	w1, #0x62                  	// #98
    7d3c:	mov	x3, #0x3                   	// #3
    7d40:	add	x0, x0, #0x1
    7d44:	strh	w2, [x19]
    7d48:	strb	w1, [x19, #2]
    7d4c:	str	x0, [x19, #320]
    7d50:	add	x1, x3, #0x1
    7d54:	str	x1, [x19, #256]
    7d58:	mov	w0, #0x6c                  	// #108
    7d5c:	strb	w0, [x19, x3]
    7d60:	strb	w0, [x19, #264]
    7d64:	cmp	x1, #0xff
    7d68:	b.ne	9f9c <d_print_comp_inner+0x5194>  // b.any
    7d6c:	ldp	x3, x2, [x19, #272]
    7d70:	strb	wzr, [x19, #255]
    7d74:	mov	x0, x19
    7d78:	blr	x3
    7d7c:	ldr	x1, [x19, #320]
    7d80:	mov	w3, #0x2065                	// #8293
    7d84:	mov	w2, #0x66                  	// #102
    7d88:	mov	x0, #0x3                   	// #3
    7d8c:	add	x1, x1, #0x1
    7d90:	strh	w3, [x19]
    7d94:	strb	w2, [x19, #2]
    7d98:	str	x1, [x19, #320]
    7d9c:	add	x1, x0, #0x1
    7da0:	str	x1, [x19, #256]
    7da4:	mov	w2, #0x6f                  	// #111
    7da8:	strb	w2, [x19, x0]
    7dac:	strb	w2, [x19, #264]
    7db0:	cmp	x1, #0xff
    7db4:	b.ne	9fec <d_print_comp_inner+0x51e4>  // b.any
    7db8:	ldp	x3, x2, [x19, #272]
    7dbc:	strb	wzr, [x19, #255]
    7dc0:	mov	x0, x19
    7dc4:	blr	x3
    7dc8:	ldr	x1, [x19, #320]
    7dcc:	mov	w2, #0x72                  	// #114
    7dd0:	mov	x0, #0x1                   	// #1
    7dd4:	strb	w2, [x19]
    7dd8:	add	x1, x1, x0
    7ddc:	str	x1, [x19, #320]
    7de0:	add	x1, x0, #0x1
    7de4:	str	x1, [x19, #256]
    7de8:	mov	w1, #0x20                  	// #32
    7dec:	strb	w1, [x19, x0]
    7df0:	strb	w1, [x19, #264]
    7df4:	ldr	x20, [x24, #8]
    7df8:	cbz	x20, 91a8 <d_print_comp_inner+0x43a0>
    7dfc:	ldr	w0, [x20, #4]
    7e00:	cmp	w0, #0x1
    7e04:	b.gt	91a8 <d_print_comp_inner+0x43a0>
    7e08:	ldr	w1, [x19, #308]
    7e0c:	cmp	w1, #0x400
    7e10:	b.gt	91a8 <d_print_comp_inner+0x43a0>
    7e14:	ldr	x3, [x19, #328]
    7e18:	add	w0, w0, #0x1
    7e1c:	str	w0, [x20, #4]
    7e20:	add	w1, w1, #0x1
    7e24:	add	x0, sp, #0x80
    7e28:	str	w1, [x19, #308]
    7e2c:	str	x0, [x19, #328]
    7e30:	mov	w1, w22
    7e34:	mov	x0, x19
    7e38:	mov	x2, x20
    7e3c:	stp	x20, x3, [sp, #128]
    7e40:	bl	4e08 <d_print_comp_inner>
    7e44:	ldr	w1, [x20, #4]
    7e48:	ldr	x0, [sp, #136]
    7e4c:	sub	w1, w1, #0x1
    7e50:	ldp	x21, x22, [sp, #32]
    7e54:	ldp	x23, x24, [sp, #48]
    7e58:	str	x0, [x19, #328]
    7e5c:	ldr	w0, [x19, #308]
    7e60:	str	w1, [x20, #4]
    7e64:	sub	w0, w0, #0x1
    7e68:	str	w0, [x19, #308]
    7e6c:	b	4e70 <d_print_comp_inner+0x68>
    7e70:	ldr	x0, [x19, #256]
    7e74:	cmp	x0, #0xff
    7e78:	b.eq	b40c <d_print_comp_inner+0x6604>  // b.none
    7e7c:	add	x1, x0, #0x1
    7e80:	str	x1, [x19, #256]
    7e84:	mov	w2, #0x74                  	// #116
    7e88:	strb	w2, [x19, x0]
    7e8c:	strb	w2, [x19, #264]
    7e90:	cmp	x1, #0xff
    7e94:	b.ne	a0d8 <d_print_comp_inner+0x52d0>  // b.any
    7e98:	ldp	x3, x2, [x19, #272]
    7e9c:	strb	wzr, [x19, #255]
    7ea0:	mov	x0, x19
    7ea4:	blr	x3
    7ea8:	ldr	x0, [x19, #320]
    7eac:	mov	w2, #0x7079                	// #28793
    7eb0:	mov	w1, #0x65                  	// #101
    7eb4:	mov	x3, #0x3                   	// #3
    7eb8:	add	x0, x0, #0x1
    7ebc:	strh	w2, [x19]
    7ec0:	strb	w1, [x19, #2]
    7ec4:	str	x0, [x19, #320]
    7ec8:	add	x1, x3, #0x1
    7ecc:	str	x1, [x19, #256]
    7ed0:	mov	w0, #0x69                  	// #105
    7ed4:	strb	w0, [x19, x3]
    7ed8:	strb	w0, [x19, #264]
    7edc:	cmp	x1, #0xff
    7ee0:	b.ne	a128 <d_print_comp_inner+0x5320>  // b.any
    7ee4:	ldp	x3, x2, [x19, #272]
    7ee8:	strb	wzr, [x19, #255]
    7eec:	mov	x0, x19
    7ef0:	blr	x3
    7ef4:	ldr	x1, [x19, #320]
    7ef8:	mov	w3, #0x666e                	// #26222
    7efc:	mov	w2, #0x6f                  	// #111
    7f00:	mov	x0, #0x3                   	// #3
    7f04:	add	x1, x1, #0x1
    7f08:	strh	w3, [x19]
    7f0c:	strb	w2, [x19, #2]
    7f10:	str	x1, [x19, #320]
    7f14:	add	x1, x0, #0x1
    7f18:	str	x1, [x19, #256]
    7f1c:	mov	w2, #0x20                  	// #32
    7f20:	strb	w2, [x19, x0]
    7f24:	strb	w2, [x19, #264]
    7f28:	cmp	x1, #0xff
    7f2c:	b.ne	a178 <d_print_comp_inner+0x5370>  // b.any
    7f30:	ldp	x3, x2, [x19, #272]
    7f34:	strb	wzr, [x19, #255]
    7f38:	mov	x0, x19
    7f3c:	blr	x3
    7f40:	ldr	x0, [x19, #320]
    7f44:	mov	w2, #0x6f66                	// #28518
    7f48:	mov	x1, #0x2                   	// #2
    7f4c:	strh	w2, [x19]
    7f50:	add	x0, x0, #0x1
    7f54:	str	x0, [x19, #320]
    7f58:	add	x0, x1, #0x1
    7f5c:	mov	w2, #0x72                  	// #114
    7f60:	strb	w2, [x19, x1]
    7f64:	add	x1, x0, #0x1
    7f68:	str	x1, [x19, #256]
    7f6c:	mov	w1, #0x20                  	// #32
    7f70:	strb	w1, [x19, x0]
    7f74:	strb	w1, [x19, #264]
    7f78:	ldr	x20, [x24, #8]
    7f7c:	cbz	x20, 91ec <d_print_comp_inner+0x43e4>
    7f80:	ldr	w0, [x20, #4]
    7f84:	cmp	w0, #0x1
    7f88:	b.gt	91ec <d_print_comp_inner+0x43e4>
    7f8c:	ldr	w1, [x19, #308]
    7f90:	cmp	w1, #0x400
    7f94:	b.gt	91ec <d_print_comp_inner+0x43e4>
    7f98:	ldr	x3, [x19, #328]
    7f9c:	add	w0, w0, #0x1
    7fa0:	str	w0, [x20, #4]
    7fa4:	add	w1, w1, #0x1
    7fa8:	add	x0, sp, #0x80
    7fac:	str	w1, [x19, #308]
    7fb0:	str	x0, [x19, #328]
    7fb4:	mov	w1, w22
    7fb8:	mov	x0, x19
    7fbc:	mov	x2, x20
    7fc0:	stp	x20, x3, [sp, #128]
    7fc4:	bl	4e08 <d_print_comp_inner>
    7fc8:	ldr	w1, [x20, #4]
    7fcc:	ldr	x0, [sp, #136]
    7fd0:	sub	w1, w1, #0x1
    7fd4:	ldp	x21, x22, [sp, #32]
    7fd8:	ldp	x23, x24, [sp, #48]
    7fdc:	str	x0, [x19, #328]
    7fe0:	ldr	w0, [x19, #308]
    7fe4:	str	w1, [x20, #4]
    7fe8:	sub	w0, w0, #0x1
    7fec:	str	w0, [x19, #308]
    7ff0:	b	4e70 <d_print_comp_inner+0x68>
    7ff4:	ldr	x20, [x2, #8]
    7ff8:	ldr	x23, [x19, #296]
    7ffc:	str	xzr, [x19, #296]
    8000:	ldr	x21, [x19, #368]
    8004:	str	x2, [x19, #368]
    8008:	tbz	w22, #2, 937c <d_print_comp_inner+0x4574>
    800c:	ldr	w0, [x20]
    8010:	cbnz	w0, 8020 <d_print_comp_inner+0x3218>
    8014:	ldr	w0, [x20, #16]
    8018:	cmp	w0, #0x6
    801c:	b.eq	d1f4 <d_print_comp_inner+0x83ec>  // b.none
    8020:	ldr	w0, [x20, #4]
    8024:	cmp	w0, #0x1
    8028:	b.gt	9380 <d_print_comp_inner+0x4578>
    802c:	ldr	w1, [x19, #308]
    8030:	cmp	w1, #0x400
    8034:	b.gt	9380 <d_print_comp_inner+0x4578>
    8038:	ldr	x3, [x19, #328]
    803c:	add	w0, w0, #0x1
    8040:	str	w0, [x20, #4]
    8044:	add	w1, w1, #0x1
    8048:	add	x0, sp, #0x80
    804c:	str	w1, [x19, #308]
    8050:	str	x0, [x19, #328]
    8054:	mov	w1, w22
    8058:	mov	x0, x19
    805c:	mov	x2, x20
    8060:	stp	x20, x3, [sp, #128]
    8064:	bl	4e08 <d_print_comp_inner>
    8068:	ldr	w1, [x20, #4]
    806c:	ldr	x0, [sp, #136]
    8070:	str	x0, [x19, #328]
    8074:	ldr	w0, [x19, #308]
    8078:	sub	w1, w1, #0x1
    807c:	str	w1, [x20, #4]
    8080:	sub	w0, w0, #0x1
    8084:	str	w0, [x19, #308]
    8088:	ldrb	w0, [x19, #264]
    808c:	ldr	x1, [x19, #256]
    8090:	cmp	w0, #0x3c
    8094:	b.eq	bfd8 <d_print_comp_inner+0x71d0>  // b.none
    8098:	add	x0, x1, #0x1
    809c:	cmp	x1, #0xff
    80a0:	b.ne	80c8 <d_print_comp_inner+0x32c0>  // b.any
    80a4:	ldp	x3, x2, [x19, #272]
    80a8:	strb	wzr, [x19, #255]
    80ac:	mov	x0, x19
    80b0:	blr	x3
    80b4:	ldr	x2, [x19, #320]
    80b8:	mov	x0, #0x1                   	// #1
    80bc:	mov	x1, #0x0                   	// #0
    80c0:	add	x2, x2, x0
    80c4:	str	x2, [x19, #320]
    80c8:	str	x0, [x19, #256]
    80cc:	mov	w2, #0x3c                  	// #60
    80d0:	strb	w2, [x19, x1]
    80d4:	strb	w2, [x19, #264]
    80d8:	ldr	x20, [x24, #16]
    80dc:	cbz	x20, 938c <d_print_comp_inner+0x4584>
    80e0:	ldr	w1, [x20, #4]
    80e4:	cmp	w1, #0x1
    80e8:	b.gt	938c <d_print_comp_inner+0x4584>
    80ec:	ldr	w2, [x19, #308]
    80f0:	cmp	w2, #0x400
    80f4:	b.gt	938c <d_print_comp_inner+0x4584>
    80f8:	ldr	x3, [x19, #328]
    80fc:	add	w1, w1, #0x1
    8100:	str	w1, [x20, #4]
    8104:	add	w2, w2, #0x1
    8108:	add	x0, sp, #0x80
    810c:	str	w2, [x19, #308]
    8110:	str	x0, [x19, #328]
    8114:	mov	w1, w22
    8118:	mov	x2, x20
    811c:	mov	x0, x19
    8120:	stp	x20, x3, [sp, #128]
    8124:	bl	4e08 <d_print_comp_inner>
    8128:	ldr	w1, [x20, #4]
    812c:	ldr	x0, [sp, #136]
    8130:	str	x0, [x19, #328]
    8134:	sub	w1, w1, #0x1
    8138:	ldr	w0, [x19, #308]
    813c:	str	w1, [x20, #4]
    8140:	ldr	x1, [x19, #256]
    8144:	sub	w0, w0, #0x1
    8148:	ldrb	w2, [x19, #264]
    814c:	str	w0, [x19, #308]
    8150:	mov	x0, x1
    8154:	cmp	w2, #0x3e
    8158:	b.ne	8198 <d_print_comp_inner+0x3390>  // b.any
    815c:	cmp	x1, #0xff
    8160:	b.ne	8184 <d_print_comp_inner+0x337c>  // b.any
    8164:	ldp	x3, x2, [x19, #272]
    8168:	strb	wzr, [x19, #255]
    816c:	mov	x0, x19
    8170:	blr	x3
    8174:	ldr	x0, [x19, #320]
    8178:	mov	x1, #0x0                   	// #0
    817c:	add	x0, x0, #0x1
    8180:	str	x0, [x19, #320]
    8184:	add	x0, x1, #0x1
    8188:	str	x0, [x19, #256]
    818c:	mov	w2, #0x20                  	// #32
    8190:	strb	w2, [x19, x1]
    8194:	strb	w2, [x19, #264]
    8198:	add	x1, x0, #0x1
    819c:	cmp	x0, #0xff
    81a0:	b.ne	81cc <d_print_comp_inner+0x33c4>  // b.any
    81a4:	ldp	x3, x2, [x19, #272]
    81a8:	strb	wzr, [x19, #255]
    81ac:	mov	x1, x0
    81b0:	mov	x0, x19
    81b4:	blr	x3
    81b8:	ldr	x2, [x19, #320]
    81bc:	mov	x1, #0x1                   	// #1
    81c0:	mov	x0, #0x0                   	// #0
    81c4:	add	x2, x2, x1
    81c8:	str	x2, [x19, #320]
    81cc:	str	x1, [x19, #256]
    81d0:	mov	w1, #0x3e                  	// #62
    81d4:	strb	w1, [x19, x0]
    81d8:	strb	w1, [x19, #264]
    81dc:	str	x23, [x19, #296]
    81e0:	str	x21, [x19, #368]
    81e4:	ldp	x21, x22, [sp, #32]
    81e8:	ldp	x23, x24, [sp, #48]
    81ec:	b	4e70 <d_print_comp_inner+0x68>
    81f0:	adrp	x20, 0 <d_make_comp>
    81f4:	add	x20, x20, #0x0
    81f8:	mov	x23, #0x1                   	// #1
    81fc:	stp	x25, x26, [sp, #64]
    8200:	add	x25, x20, #0x15
    8204:	ldr	x1, [x19, #256]
    8208:	b	8264 <d_print_comp_inner+0x345c>
    820c:	ldp	x3, x2, [x19, #272]
    8210:	strb	wzr, [x19, #255]
    8214:	mov	x0, x19
    8218:	add	x20, x20, #0x1
    821c:	blr	x3
    8220:	strb	w21, [x19]
    8224:	ldr	x0, [x19, #320]
    8228:	str	x23, [x19, #256]
    822c:	strb	w21, [x19, #264]
    8230:	cmp	x20, x25
    8234:	add	x0, x0, #0x1
    8238:	str	x0, [x19, #320]
    823c:	b.eq	8708 <d_print_comp_inner+0x3900>  // b.none
    8240:	ldrb	w21, [x20]
    8244:	mov	x0, #0x1                   	// #1
    8248:	add	x1, x0, #0x1
    824c:	str	x1, [x19, #256]
    8250:	strb	w21, [x19, x0]
    8254:	add	x20, x20, #0x1
    8258:	strb	w21, [x19, #264]
    825c:	cmp	x20, x25
    8260:	b.eq	8708 <d_print_comp_inner+0x3900>  // b.none
    8264:	ldrb	w21, [x20]
    8268:	cmp	x1, #0xff
    826c:	b.eq	820c <d_print_comp_inner+0x3404>  // b.none
    8270:	mov	x0, x1
    8274:	b	8248 <d_print_comp_inner+0x3440>
    8278:	ldr	w0, [x19, #312]
    827c:	cbz	w0, 97c0 <d_print_comp_inner+0x49b8>
    8280:	ldr	x0, [x19, #256]
    8284:	cmp	x0, #0xff
    8288:	b.eq	cd1c <d_print_comp_inner+0x7f14>  // b.none
    828c:	add	x3, x0, #0x1
    8290:	str	x3, [x19, #256]
    8294:	mov	w1, #0x61                  	// #97
    8298:	strb	w1, [x19, x0]
    829c:	strb	w1, [x19, #264]
    82a0:	cmp	x3, #0xff
    82a4:	b.ne	c4ac <d_print_comp_inner+0x76a4>  // b.any
    82a8:	ldp	x4, x2, [x19, #272]
    82ac:	strb	wzr, [x19, #255]
    82b0:	mov	x1, x3
    82b4:	mov	x0, x19
    82b8:	blr	x4
    82bc:	ldr	x1, [x19, #320]
    82c0:	mov	w2, #0x7475                	// #29813
    82c4:	mov	x0, #0x2                   	// #2
    82c8:	strh	w2, [x19]
    82cc:	add	x1, x1, #0x1
    82d0:	str	x1, [x19, #320]
    82d4:	add	x1, x0, #0x1
    82d8:	mov	w2, #0x6f                  	// #111
    82dc:	strb	w2, [x19, x0]
    82e0:	add	x0, x1, #0x1
    82e4:	str	x0, [x19, #256]
    82e8:	mov	w0, #0x3a                  	// #58
    82ec:	strb	w0, [x19, x1]
    82f0:	adrp	x1, 0 <d_make_comp>
    82f4:	strb	w0, [x19, #264]
    82f8:	add	x1, x1, #0x0
    82fc:	add	x20, sp, #0x80
    8300:	ldr	x2, [x24, #8]
    8304:	mov	x0, x20
    8308:	add	w2, w2, #0x1
    830c:	bl	0 <sprintf>
    8310:	mov	x0, x20
    8314:	bl	0 <strlen>
    8318:	cbz	x0, d820 <d_print_comp_inner+0x8a18>
    831c:	add	x22, x20, x0
    8320:	mov	x23, #0x1                   	// #1
    8324:	ldr	x1, [x19, #256]
    8328:	b	8384 <d_print_comp_inner+0x357c>
    832c:	ldp	x3, x2, [x19, #272]
    8330:	strb	wzr, [x19, #255]
    8334:	mov	x0, x19
    8338:	add	x20, x20, #0x1
    833c:	blr	x3
    8340:	strb	w21, [x19]
    8344:	ldr	x0, [x19, #320]
    8348:	str	x23, [x19, #256]
    834c:	strb	w21, [x19, #264]
    8350:	cmp	x20, x22
    8354:	add	x0, x0, #0x1
    8358:	str	x0, [x19, #320]
    835c:	b.eq	d0b0 <d_print_comp_inner+0x82a8>  // b.none
    8360:	ldrb	w21, [x20]
    8364:	mov	x0, #0x1                   	// #1
    8368:	add	x1, x0, #0x1
    836c:	str	x1, [x19, #256]
    8370:	strb	w21, [x19, x0]
    8374:	add	x20, x20, #0x1
    8378:	strb	w21, [x19, #264]
    837c:	cmp	x22, x20
    8380:	b.eq	c3dc <d_print_comp_inner+0x75d4>  // b.none
    8384:	ldrb	w21, [x20]
    8388:	cmp	x1, #0xff
    838c:	b.eq	832c <d_print_comp_inner+0x3524>  // b.none
    8390:	mov	x0, x1
    8394:	b	8368 <d_print_comp_inner+0x3560>
    8398:	adrp	x20, 0 <d_make_comp>
    839c:	add	x20, x20, #0x0
    83a0:	mov	x23, #0x1                   	// #1
    83a4:	stp	x25, x26, [sp, #64]
    83a8:	add	x25, x20, #0x18
    83ac:	ldr	x1, [x19, #256]
    83b0:	b	840c <d_print_comp_inner+0x3604>
    83b4:	ldp	x3, x2, [x19, #272]
    83b8:	strb	wzr, [x19, #255]
    83bc:	mov	x0, x19
    83c0:	add	x20, x20, #0x1
    83c4:	blr	x3
    83c8:	strb	w21, [x19]
    83cc:	ldr	x0, [x19, #320]
    83d0:	str	x23, [x19, #256]
    83d4:	strb	w21, [x19, #264]
    83d8:	cmp	x20, x25
    83dc:	add	x0, x0, #0x1
    83e0:	str	x0, [x19, #320]
    83e4:	b.eq	85a0 <d_print_comp_inner+0x3798>  // b.none
    83e8:	ldrb	w21, [x20]
    83ec:	mov	x0, #0x1                   	// #1
    83f0:	add	x1, x0, #0x1
    83f4:	str	x1, [x19, #256]
    83f8:	strb	w21, [x19, x0]
    83fc:	add	x20, x20, #0x1
    8400:	strb	w21, [x19, #264]
    8404:	cmp	x25, x20
    8408:	b.eq	85a4 <d_print_comp_inner+0x379c>  // b.none
    840c:	ldrb	w21, [x20]
    8410:	cmp	x1, #0xff
    8414:	b.eq	83b4 <d_print_comp_inner+0x35ac>  // b.none
    8418:	mov	x0, x1
    841c:	b	83f0 <d_print_comp_inner+0x35e8>
    8420:	adrp	x20, 0 <d_make_comp>
    8424:	add	x20, x20, #0x0
    8428:	mov	x23, #0x1                   	// #1
    842c:	stp	x25, x26, [sp, #64]
    8430:	add	x25, x20, #0x12
    8434:	ldr	x1, [x19, #256]
    8438:	b	8494 <d_print_comp_inner+0x368c>
    843c:	ldp	x3, x2, [x19, #272]
    8440:	strb	wzr, [x19, #255]
    8444:	mov	x0, x19
    8448:	add	x20, x20, #0x1
    844c:	blr	x3
    8450:	strb	w21, [x19]
    8454:	ldr	x0, [x19, #320]
    8458:	str	x23, [x19, #256]
    845c:	strb	w21, [x19, #264]
    8460:	cmp	x20, x25
    8464:	add	x0, x0, #0x1
    8468:	str	x0, [x19, #320]
    846c:	b.eq	8a08 <d_print_comp_inner+0x3c00>  // b.none
    8470:	ldrb	w21, [x20]
    8474:	mov	x0, #0x1                   	// #1
    8478:	add	x1, x0, #0x1
    847c:	str	x1, [x19, #256]
    8480:	strb	w21, [x19, x0]
    8484:	add	x20, x20, #0x1
    8488:	strb	w21, [x19, #264]
    848c:	cmp	x25, x20
    8490:	b.eq	8a08 <d_print_comp_inner+0x3c00>  // b.none
    8494:	ldrb	w21, [x20]
    8498:	cmp	x1, #0xff
    849c:	b.eq	843c <d_print_comp_inner+0x3634>  // b.none
    84a0:	mov	x0, x1
    84a4:	b	8478 <d_print_comp_inner+0x3670>
    84a8:	ldr	x25, [x0, #8]
    84ac:	add	x0, sp, #0x80
    84b0:	stp	x2, x24, [sp, #128]
    84b4:	str	wzr, [sp, #144]
    84b8:	str	x4, [sp, #152]
    84bc:	str	x0, [x19, #296]
    84c0:	cbz	x25, 4ed8 <d_print_comp_inner+0xd0>
    84c4:	ldr	w0, [x25, #4]
    84c8:	cmp	w0, #0x1
    84cc:	b.gt	4ee0 <d_print_comp_inner+0xd8>
    84d0:	ldr	w1, [x19, #308]
    84d4:	cmp	w1, #0x400
    84d8:	b.gt	4ee0 <d_print_comp_inner+0xd8>
    84dc:	ldr	x3, [x19, #328]
    84e0:	add	w0, w0, #0x1
    84e4:	str	w0, [x25, #4]
    84e8:	add	w1, w1, #0x1
    84ec:	add	x0, sp, #0x70
    84f0:	str	w1, [x19, #308]
    84f4:	str	x0, [x19, #328]
    84f8:	mov	x2, x25
    84fc:	mov	w1, w22
    8500:	mov	x0, x19
    8504:	stp	x25, x3, [sp, #112]
    8508:	bl	4e08 <d_print_comp_inner>
    850c:	ldr	w1, [x25, #4]
    8510:	ldr	x0, [sp, #120]
    8514:	str	x0, [x19, #328]
    8518:	ldr	w2, [sp, #144]
    851c:	sub	w1, w1, #0x1
    8520:	ldr	w0, [x19, #308]
    8524:	str	w1, [x25, #4]
    8528:	sub	w0, w0, #0x1
    852c:	str	w0, [x19, #308]
    8530:	cbnz	w2, 4ef8 <d_print_comp_inner+0xf0>
    8534:	b	4ee8 <d_print_comp_inner+0xe0>
    8538:	ldp	x21, x22, [sp, #32]
    853c:	ldp	x23, x24, [sp, #48]
    8540:	ldp	x25, x26, [sp, #64]
    8544:	b	4e70 <d_print_comp_inner+0x68>
    8548:	ldp	x3, x2, [x19, #272]
    854c:	strb	wzr, [x19, #255]
    8550:	mov	x0, x19
    8554:	blr	x3
    8558:	ldr	x2, [x19, #320]
    855c:	mov	x0, #0x1                   	// #1
    8560:	mov	x1, #0x0                   	// #0
    8564:	add	x2, x2, x0
    8568:	str	x2, [x19, #320]
    856c:	b	5b4c <d_print_comp_inner+0xd44>
    8570:	ldp	x3, x2, [x19, #272]
    8574:	strb	wzr, [x19, #255]
    8578:	mov	x1, x0
    857c:	mov	x0, x19
    8580:	blr	x3
    8584:	strb	w24, [x19]
    8588:	ldr	x2, [x19, #320]
    858c:	mov	x1, #0x1                   	// #1
    8590:	mov	x0, #0x2                   	// #2
    8594:	add	x2, x2, x1
    8598:	str	x2, [x19, #320]
    859c:	b	5b4c <d_print_comp_inner+0xd44>
    85a0:	mov	x1, #0x1                   	// #1
    85a4:	ldr	x20, [x24, #8]
    85a8:	cbz	x20, 9038 <d_print_comp_inner+0x4230>
    85ac:	ldr	w0, [x20, #4]
    85b0:	cmp	w0, #0x1
    85b4:	b.gt	9038 <d_print_comp_inner+0x4230>
    85b8:	ldr	w2, [x19, #308]
    85bc:	cmp	w2, #0x400
    85c0:	b.gt	9038 <d_print_comp_inner+0x4230>
    85c4:	ldr	x3, [x19, #328]
    85c8:	add	w0, w0, #0x1
    85cc:	str	w0, [x20, #4]
    85d0:	add	w2, w2, #0x1
    85d4:	add	x0, sp, #0x80
    85d8:	str	w2, [x19, #308]
    85dc:	str	x0, [x19, #328]
    85e0:	mov	w1, w22
    85e4:	mov	x2, x20
    85e8:	mov	x0, x19
    85ec:	stp	x20, x3, [sp, #128]
    85f0:	bl	4e08 <d_print_comp_inner>
    85f4:	ldr	w2, [x20, #4]
    85f8:	ldr	x0, [sp, #136]
    85fc:	str	x0, [x19, #328]
    8600:	ldr	w0, [x19, #308]
    8604:	sub	w2, w2, #0x1
    8608:	ldr	x1, [x19, #256]
    860c:	str	w2, [x20, #4]
    8610:	sub	w0, w0, #0x1
    8614:	str	w0, [x19, #308]
    8618:	cmp	x1, #0xff
    861c:	b.eq	bc38 <d_print_comp_inner+0x6e30>  // b.none
    8620:	add	x0, x1, #0x1
    8624:	str	x0, [x19, #256]
    8628:	mov	w2, #0x2d                  	// #45
    862c:	strb	w2, [x19, x1]
    8630:	strb	w2, [x19, #264]
    8634:	cmp	x0, #0xff
    8638:	b.ne	a608 <d_print_comp_inner+0x5800>  // b.any
    863c:	ldp	x3, x2, [x19, #272]
    8640:	strb	wzr, [x19, #255]
    8644:	mov	x1, x0
    8648:	mov	x0, x19
    864c:	blr	x3
    8650:	ldr	x0, [x19, #320]
    8654:	mov	w1, #0x69                  	// #105
    8658:	mov	x2, #0x1                   	// #1
    865c:	strb	w1, [x19]
    8660:	add	x0, x0, x2
    8664:	str	x0, [x19, #320]
    8668:	add	x1, x2, #0x1
    866c:	mov	w0, #0x6e                  	// #110
    8670:	strb	w0, [x19, x2]
    8674:	add	x0, x1, #0x1
    8678:	str	x0, [x19, #256]
    867c:	mov	w0, #0x2d                  	// #45
    8680:	strb	w0, [x19, x1]
    8684:	strb	w0, [x19, #264]
    8688:	ldr	x20, [x24, #16]
    868c:	cbz	x20, 9094 <d_print_comp_inner+0x428c>
    8690:	ldr	w0, [x20, #4]
    8694:	cmp	w0, #0x1
    8698:	b.gt	9094 <d_print_comp_inner+0x428c>
    869c:	ldr	w1, [x19, #308]
    86a0:	cmp	w1, #0x400
    86a4:	b.gt	9094 <d_print_comp_inner+0x428c>
    86a8:	ldr	x3, [x19, #328]
    86ac:	add	w0, w0, #0x1
    86b0:	str	w0, [x20, #4]
    86b4:	add	w1, w1, #0x1
    86b8:	add	x0, sp, #0x80
    86bc:	str	w1, [x19, #308]
    86c0:	str	x0, [x19, #328]
    86c4:	mov	w1, w22
    86c8:	mov	x0, x19
    86cc:	mov	x2, x20
    86d0:	stp	x20, x3, [sp, #128]
    86d4:	bl	4e08 <d_print_comp_inner>
    86d8:	ldr	w1, [x20, #4]
    86dc:	ldr	x0, [sp, #136]
    86e0:	sub	w1, w1, #0x1
    86e4:	ldp	x21, x22, [sp, #32]
    86e8:	ldp	x23, x24, [sp, #48]
    86ec:	ldp	x25, x26, [sp, #64]
    86f0:	str	x0, [x19, #328]
    86f4:	ldr	w0, [x19, #308]
    86f8:	str	w1, [x20, #4]
    86fc:	sub	w0, w0, #0x1
    8700:	str	w0, [x19, #308]
    8704:	b	4e70 <d_print_comp_inner+0x68>
    8708:	ldr	x20, [x24, #8]
    870c:	cbz	x20, 90cc <d_print_comp_inner+0x42c4>
    8710:	ldr	w0, [x20, #4]
    8714:	cmp	w0, #0x1
    8718:	b.gt	90cc <d_print_comp_inner+0x42c4>
    871c:	ldr	w1, [x19, #308]
    8720:	cmp	w1, #0x400
    8724:	b.gt	90cc <d_print_comp_inner+0x42c4>
    8728:	ldr	x3, [x19, #328]
    872c:	add	w0, w0, #0x1
    8730:	str	w0, [x20, #4]
    8734:	add	w1, w1, #0x1
    8738:	add	x0, sp, #0x80
    873c:	str	w1, [x19, #308]
    8740:	str	x0, [x19, #328]
    8744:	mov	w1, w22
    8748:	mov	x0, x19
    874c:	mov	x2, x20
    8750:	stp	x20, x3, [sp, #128]
    8754:	bl	4e08 <d_print_comp_inner>
    8758:	ldr	w1, [x20, #4]
    875c:	ldr	x0, [sp, #136]
    8760:	sub	w1, w1, #0x1
    8764:	ldp	x21, x22, [sp, #32]
    8768:	ldp	x23, x24, [sp, #48]
    876c:	ldp	x25, x26, [sp, #64]
    8770:	str	x0, [x19, #328]
    8774:	ldr	w0, [x19, #308]
    8778:	str	w1, [x20, #4]
    877c:	sub	w0, w0, #0x1
    8780:	str	w0, [x19, #308]
    8784:	b	4e70 <d_print_comp_inner+0x68>
    8788:	ldr	x20, [x24, #8]
    878c:	cbz	x20, 91bc <d_print_comp_inner+0x43b4>
    8790:	ldr	w0, [x20, #4]
    8794:	cmp	w0, #0x1
    8798:	b.gt	91bc <d_print_comp_inner+0x43b4>
    879c:	ldr	w1, [x19, #308]
    87a0:	cmp	w1, #0x400
    87a4:	b.gt	91bc <d_print_comp_inner+0x43b4>
    87a8:	ldr	x3, [x19, #328]
    87ac:	add	w0, w0, #0x1
    87b0:	str	w0, [x20, #4]
    87b4:	add	w1, w1, #0x1
    87b8:	add	x0, sp, #0x80
    87bc:	str	w1, [x19, #308]
    87c0:	str	x0, [x19, #328]
    87c4:	mov	w1, w22
    87c8:	mov	x0, x19
    87cc:	mov	x2, x20
    87d0:	stp	x20, x3, [sp, #128]
    87d4:	bl	4e08 <d_print_comp_inner>
    87d8:	ldr	w1, [x20, #4]
    87dc:	ldr	x0, [sp, #136]
    87e0:	sub	w1, w1, #0x1
    87e4:	ldp	x21, x22, [sp, #32]
    87e8:	ldp	x23, x24, [sp, #48]
    87ec:	ldp	x25, x26, [sp, #64]
    87f0:	str	x0, [x19, #328]
    87f4:	ldr	w0, [x19, #308]
    87f8:	str	w1, [x20, #4]
    87fc:	sub	w0, w0, #0x1
    8800:	str	w0, [x19, #308]
    8804:	b	4e70 <d_print_comp_inner+0x68>
    8808:	ldr	x20, [x24, #8]
    880c:	cbz	x20, 9200 <d_print_comp_inner+0x43f8>
    8810:	ldr	w0, [x20, #4]
    8814:	cmp	w0, #0x1
    8818:	b.gt	9200 <d_print_comp_inner+0x43f8>
    881c:	ldr	w1, [x19, #308]
    8820:	cmp	w1, #0x400
    8824:	b.gt	9200 <d_print_comp_inner+0x43f8>
    8828:	ldr	x3, [x19, #328]
    882c:	add	w0, w0, #0x1
    8830:	str	w0, [x20, #4]
    8834:	add	w1, w1, #0x1
    8838:	add	x0, sp, #0x80
    883c:	str	w1, [x19, #308]
    8840:	str	x0, [x19, #328]
    8844:	mov	w1, w22
    8848:	mov	x0, x19
    884c:	mov	x2, x20
    8850:	stp	x20, x3, [sp, #128]
    8854:	bl	4e08 <d_print_comp_inner>
    8858:	ldr	w1, [x20, #4]
    885c:	ldr	x0, [sp, #136]
    8860:	sub	w1, w1, #0x1
    8864:	ldp	x21, x22, [sp, #32]
    8868:	ldp	x23, x24, [sp, #48]
    886c:	ldp	x25, x26, [sp, #64]
    8870:	str	x0, [x19, #328]
    8874:	ldr	w0, [x19, #308]
    8878:	str	w1, [x20, #4]
    887c:	sub	w0, w0, #0x1
    8880:	str	w0, [x19, #308]
    8884:	b	4e70 <d_print_comp_inner+0x68>
    8888:	ldr	x20, [x24, #8]
    888c:	cbz	x20, 91d4 <d_print_comp_inner+0x43cc>
    8890:	ldr	w0, [x20, #4]
    8894:	cmp	w0, #0x1
    8898:	b.gt	91d4 <d_print_comp_inner+0x43cc>
    889c:	ldr	w1, [x19, #308]
    88a0:	cmp	w1, #0x400
    88a4:	b.gt	91d4 <d_print_comp_inner+0x43cc>
    88a8:	ldr	x3, [x19, #328]
    88ac:	add	w0, w0, #0x1
    88b0:	str	w0, [x20, #4]
    88b4:	add	w1, w1, #0x1
    88b8:	add	x0, sp, #0x80
    88bc:	str	w1, [x19, #308]
    88c0:	str	x0, [x19, #328]
    88c4:	mov	w1, w22
    88c8:	mov	x0, x19
    88cc:	mov	x2, x20
    88d0:	stp	x20, x3, [sp, #128]
    88d4:	bl	4e08 <d_print_comp_inner>
    88d8:	ldr	w1, [x20, #4]
    88dc:	ldr	x0, [sp, #136]
    88e0:	sub	w1, w1, #0x1
    88e4:	ldp	x21, x22, [sp, #32]
    88e8:	ldp	x23, x24, [sp, #48]
    88ec:	ldp	x25, x26, [sp, #64]
    88f0:	str	x0, [x19, #328]
    88f4:	ldr	w0, [x19, #308]
    88f8:	str	w1, [x20, #4]
    88fc:	sub	w0, w0, #0x1
    8900:	str	w0, [x19, #308]
    8904:	b	4e70 <d_print_comp_inner+0x68>
    8908:	ldr	x20, [x24, #8]
    890c:	cbz	x20, 92ec <d_print_comp_inner+0x44e4>
    8910:	ldr	w0, [x20, #4]
    8914:	cmp	w0, #0x1
    8918:	b.gt	92ec <d_print_comp_inner+0x44e4>
    891c:	ldr	w1, [x19, #308]
    8920:	cmp	w1, #0x400
    8924:	b.gt	92ec <d_print_comp_inner+0x44e4>
    8928:	ldr	x3, [x19, #328]
    892c:	add	w0, w0, #0x1
    8930:	str	w0, [x20, #4]
    8934:	add	w1, w1, #0x1
    8938:	add	x0, sp, #0x80
    893c:	str	w1, [x19, #308]
    8940:	str	x0, [x19, #328]
    8944:	mov	w1, w22
    8948:	mov	x0, x19
    894c:	mov	x2, x20
    8950:	stp	x20, x3, [sp, #128]
    8954:	bl	4e08 <d_print_comp_inner>
    8958:	ldr	w1, [x20, #4]
    895c:	ldr	x0, [sp, #136]
    8960:	sub	w1, w1, #0x1
    8964:	ldp	x21, x22, [sp, #32]
    8968:	ldp	x23, x24, [sp, #48]
    896c:	ldp	x25, x26, [sp, #64]
    8970:	str	x0, [x19, #328]
    8974:	ldr	w0, [x19, #308]
    8978:	str	w1, [x20, #4]
    897c:	sub	w0, w0, #0x1
    8980:	str	w0, [x19, #308]
    8984:	b	4e70 <d_print_comp_inner+0x68>
    8988:	ldr	x20, [x24, #8]
    898c:	cbz	x20, 9264 <d_print_comp_inner+0x445c>
    8990:	ldr	w0, [x20, #4]
    8994:	cmp	w0, #0x1
    8998:	b.gt	9264 <d_print_comp_inner+0x445c>
    899c:	ldr	w1, [x19, #308]
    89a0:	cmp	w1, #0x400
    89a4:	b.gt	9264 <d_print_comp_inner+0x445c>
    89a8:	ldr	x3, [x19, #328]
    89ac:	add	w0, w0, #0x1
    89b0:	str	w0, [x20, #4]
    89b4:	add	w1, w1, #0x1
    89b8:	add	x0, sp, #0x80
    89bc:	str	w1, [x19, #308]
    89c0:	str	x0, [x19, #328]
    89c4:	mov	w1, w22
    89c8:	mov	x0, x19
    89cc:	mov	x2, x20
    89d0:	stp	x20, x3, [sp, #128]
    89d4:	bl	4e08 <d_print_comp_inner>
    89d8:	ldr	w1, [x20, #4]
    89dc:	ldr	x0, [sp, #136]
    89e0:	sub	w1, w1, #0x1
    89e4:	ldp	x21, x22, [sp, #32]
    89e8:	ldp	x23, x24, [sp, #48]
    89ec:	ldp	x25, x26, [sp, #64]
    89f0:	str	x0, [x19, #328]
    89f4:	ldr	w0, [x19, #308]
    89f8:	str	w1, [x20, #4]
    89fc:	sub	w0, w0, #0x1
    8a00:	str	w0, [x19, #308]
    8a04:	b	4e70 <d_print_comp_inner+0x68>
    8a08:	ldr	x20, [x24, #8]
    8a0c:	cbz	x20, 934c <d_print_comp_inner+0x4544>
    8a10:	ldr	w0, [x20, #4]
    8a14:	cmp	w0, #0x1
    8a18:	b.gt	934c <d_print_comp_inner+0x4544>
    8a1c:	ldr	w1, [x19, #308]
    8a20:	cmp	w1, #0x400
    8a24:	b.gt	934c <d_print_comp_inner+0x4544>
    8a28:	ldr	x3, [x19, #328]
    8a2c:	add	w0, w0, #0x1
    8a30:	str	w0, [x20, #4]
    8a34:	add	w1, w1, #0x1
    8a38:	add	x0, sp, #0x80
    8a3c:	str	w1, [x19, #308]
    8a40:	str	x0, [x19, #328]
    8a44:	mov	w1, w22
    8a48:	mov	x0, x19
    8a4c:	mov	x2, x20
    8a50:	stp	x20, x3, [sp, #128]
    8a54:	bl	4e08 <d_print_comp_inner>
    8a58:	ldr	w1, [x20, #4]
    8a5c:	ldr	x0, [sp, #136]
    8a60:	sub	w1, w1, #0x1
    8a64:	ldp	x21, x22, [sp, #32]
    8a68:	ldp	x23, x24, [sp, #48]
    8a6c:	ldp	x25, x26, [sp, #64]
    8a70:	str	x0, [x19, #328]
    8a74:	ldr	w0, [x19, #308]
    8a78:	str	w1, [x20, #4]
    8a7c:	sub	w0, w0, #0x1
    8a80:	str	w0, [x19, #308]
    8a84:	b	4e70 <d_print_comp_inner+0x68>
    8a88:	ldr	x20, [x24, #8]
    8a8c:	cbz	x20, 9234 <d_print_comp_inner+0x442c>
    8a90:	ldr	w0, [x20, #4]
    8a94:	cmp	w0, #0x1
    8a98:	b.gt	9234 <d_print_comp_inner+0x442c>
    8a9c:	ldr	w1, [x19, #308]
    8aa0:	cmp	w1, #0x400
    8aa4:	b.gt	9234 <d_print_comp_inner+0x442c>
    8aa8:	ldr	x3, [x19, #328]
    8aac:	add	w0, w0, #0x1
    8ab0:	str	w0, [x20, #4]
    8ab4:	add	w1, w1, #0x1
    8ab8:	add	x0, sp, #0x80
    8abc:	str	w1, [x19, #308]
    8ac0:	str	x0, [x19, #328]
    8ac4:	mov	w1, w22
    8ac8:	mov	x0, x19
    8acc:	mov	x2, x20
    8ad0:	stp	x20, x3, [sp, #128]
    8ad4:	bl	4e08 <d_print_comp_inner>
    8ad8:	ldr	w1, [x20, #4]
    8adc:	ldr	x0, [sp, #136]
    8ae0:	sub	w1, w1, #0x1
    8ae4:	ldp	x21, x22, [sp, #32]
    8ae8:	ldp	x23, x24, [sp, #48]
    8aec:	ldp	x25, x26, [sp, #64]
    8af0:	str	x0, [x19, #328]
    8af4:	ldr	w0, [x19, #308]
    8af8:	str	w1, [x20, #4]
    8afc:	sub	w0, w0, #0x1
    8b00:	str	w0, [x19, #308]
    8b04:	b	4e70 <d_print_comp_inner+0x68>
    8b08:	ldr	x20, [x24, #8]
    8b0c:	cbz	x20, 9304 <d_print_comp_inner+0x44fc>
    8b10:	ldr	w0, [x20, #4]
    8b14:	cmp	w0, #0x1
    8b18:	b.gt	9304 <d_print_comp_inner+0x44fc>
    8b1c:	ldr	w1, [x19, #308]
    8b20:	cmp	w1, #0x400
    8b24:	b.gt	9304 <d_print_comp_inner+0x44fc>
    8b28:	ldr	x3, [x19, #328]
    8b2c:	add	w0, w0, #0x1
    8b30:	str	w0, [x20, #4]
    8b34:	add	w1, w1, #0x1
    8b38:	add	x0, sp, #0x80
    8b3c:	str	w1, [x19, #308]
    8b40:	str	x0, [x19, #328]
    8b44:	mov	w1, w22
    8b48:	mov	x0, x19
    8b4c:	mov	x2, x20
    8b50:	stp	x20, x3, [sp, #128]
    8b54:	bl	4e08 <d_print_comp_inner>
    8b58:	ldr	w1, [x20, #4]
    8b5c:	ldr	x0, [sp, #136]
    8b60:	sub	w1, w1, #0x1
    8b64:	ldp	x21, x22, [sp, #32]
    8b68:	ldp	x23, x24, [sp, #48]
    8b6c:	ldp	x25, x26, [sp, #64]
    8b70:	str	x0, [x19, #328]
    8b74:	ldr	w0, [x19, #308]
    8b78:	str	w1, [x20, #4]
    8b7c:	sub	w0, w0, #0x1
    8b80:	str	w0, [x19, #308]
    8b84:	b	4e70 <d_print_comp_inner+0x68>
    8b88:	ldr	x20, [x24, #8]
    8b8c:	cbz	x20, 9288 <d_print_comp_inner+0x4480>
    8b90:	ldr	w0, [x20, #4]
    8b94:	cmp	w0, #0x1
    8b98:	b.gt	9288 <d_print_comp_inner+0x4480>
    8b9c:	ldr	w1, [x19, #308]
    8ba0:	cmp	w1, #0x400
    8ba4:	b.gt	9288 <d_print_comp_inner+0x4480>
    8ba8:	ldr	x3, [x19, #328]
    8bac:	add	w0, w0, #0x1
    8bb0:	str	w0, [x20, #4]
    8bb4:	add	w1, w1, #0x1
    8bb8:	add	x0, sp, #0x80
    8bbc:	str	w1, [x19, #308]
    8bc0:	str	x0, [x19, #328]
    8bc4:	mov	w1, w22
    8bc8:	mov	x0, x19
    8bcc:	mov	x2, x20
    8bd0:	stp	x20, x3, [sp, #128]
    8bd4:	bl	4e08 <d_print_comp_inner>
    8bd8:	ldr	w1, [x20, #4]
    8bdc:	ldr	x0, [sp, #136]
    8be0:	sub	w1, w1, #0x1
    8be4:	ldp	x21, x22, [sp, #32]
    8be8:	ldp	x23, x24, [sp, #48]
    8bec:	ldp	x25, x26, [sp, #64]
    8bf0:	str	x0, [x19, #328]
    8bf4:	ldr	w0, [x19, #308]
    8bf8:	str	w1, [x20, #4]
    8bfc:	sub	w0, w0, #0x1
    8c00:	str	w0, [x19, #308]
    8c04:	b	4e70 <d_print_comp_inner+0x68>
    8c08:	ldr	x20, [x24, #8]
    8c0c:	cbz	x20, 9334 <d_print_comp_inner+0x452c>
    8c10:	ldr	w0, [x20, #4]
    8c14:	cmp	w0, #0x1
    8c18:	b.gt	9334 <d_print_comp_inner+0x452c>
    8c1c:	ldr	w1, [x19, #308]
    8c20:	cmp	w1, #0x400
    8c24:	b.gt	9334 <d_print_comp_inner+0x452c>
    8c28:	ldr	x3, [x19, #328]
    8c2c:	add	w0, w0, #0x1
    8c30:	str	w0, [x20, #4]
    8c34:	add	w1, w1, #0x1
    8c38:	add	x0, sp, #0x80
    8c3c:	str	w1, [x19, #308]
    8c40:	str	x0, [x19, #328]
    8c44:	mov	w1, w22
    8c48:	mov	x0, x19
    8c4c:	mov	x2, x20
    8c50:	stp	x20, x3, [sp, #128]
    8c54:	bl	4e08 <d_print_comp_inner>
    8c58:	ldr	w1, [x20, #4]
    8c5c:	ldr	x0, [sp, #136]
    8c60:	sub	w1, w1, #0x1
    8c64:	ldp	x21, x22, [sp, #32]
    8c68:	ldp	x23, x24, [sp, #48]
    8c6c:	ldp	x25, x26, [sp, #64]
    8c70:	str	x0, [x19, #328]
    8c74:	ldr	w0, [x19, #308]
    8c78:	str	w1, [x20, #4]
    8c7c:	sub	w0, w0, #0x1
    8c80:	str	w0, [x19, #308]
    8c84:	b	4e70 <d_print_comp_inner+0x68>
    8c88:	mov	x1, #0x1                   	// #1
    8c8c:	ldr	x20, [x24, #16]
    8c90:	cbz	x20, 902c <d_print_comp_inner+0x4224>
    8c94:	ldr	w0, [x20, #4]
    8c98:	cmp	w0, #0x1
    8c9c:	b.gt	902c <d_print_comp_inner+0x4224>
    8ca0:	ldr	w2, [x19, #308]
    8ca4:	cmp	w2, #0x400
    8ca8:	b.gt	902c <d_print_comp_inner+0x4224>
    8cac:	ldr	x3, [x19, #328]
    8cb0:	add	w0, w0, #0x1
    8cb4:	str	w0, [x20, #4]
    8cb8:	add	w2, w2, #0x1
    8cbc:	add	x0, sp, #0x80
    8cc0:	str	w2, [x19, #308]
    8cc4:	str	x0, [x19, #328]
    8cc8:	mov	w1, w22
    8ccc:	mov	x2, x20
    8cd0:	mov	x0, x19
    8cd4:	stp	x20, x3, [sp, #128]
    8cd8:	bl	4e08 <d_print_comp_inner>
    8cdc:	ldr	w2, [x20, #4]
    8ce0:	ldr	x0, [sp, #136]
    8ce4:	str	x0, [x19, #328]
    8ce8:	ldr	w0, [x19, #308]
    8cec:	sub	w2, w2, #0x1
    8cf0:	ldr	x1, [x19, #256]
    8cf4:	str	w2, [x20, #4]
    8cf8:	sub	w0, w0, #0x1
    8cfc:	str	w0, [x19, #308]
    8d00:	cmp	x1, #0xff
    8d04:	b.eq	b830 <d_print_comp_inner+0x6a28>  // b.none
    8d08:	add	x0, x1, #0x1
    8d0c:	str	x0, [x19, #256]
    8d10:	mov	w2, #0x20                  	// #32
    8d14:	strb	w2, [x19, x1]
    8d18:	strb	w2, [x19, #264]
    8d1c:	cmp	x0, #0xff
    8d20:	b.ne	9ba0 <d_print_comp_inner+0x4d98>  // b.any
    8d24:	ldp	x3, x2, [x19, #272]
    8d28:	strb	wzr, [x19, #255]
    8d2c:	mov	x1, x0
    8d30:	mov	x0, x19
    8d34:	blr	x3
    8d38:	ldr	x0, [x19, #320]
    8d3c:	mov	w1, #0x6f66                	// #28518
    8d40:	mov	x2, #0x2                   	// #2
    8d44:	strh	w1, [x19]
    8d48:	add	x0, x0, #0x1
    8d4c:	str	x0, [x19, #320]
    8d50:	add	x1, x2, #0x1
    8d54:	mov	w0, #0x72                  	// #114
    8d58:	strb	w0, [x19, x2]
    8d5c:	add	x0, x1, #0x1
    8d60:	str	x0, [x19, #256]
    8d64:	mov	w0, #0x20                  	// #32
    8d68:	strb	w0, [x19, x1]
    8d6c:	strb	w0, [x19, #264]
    8d70:	ldr	x20, [x24, #8]
    8d74:	cbz	x20, 92a0 <d_print_comp_inner+0x4498>
    8d78:	ldr	w0, [x20, #4]
    8d7c:	cmp	w0, #0x1
    8d80:	b.gt	92a0 <d_print_comp_inner+0x4498>
    8d84:	ldr	w1, [x19, #308]
    8d88:	cmp	w1, #0x400
    8d8c:	b.gt	92a0 <d_print_comp_inner+0x4498>
    8d90:	ldr	x3, [x19, #328]
    8d94:	add	w0, w0, #0x1
    8d98:	str	w0, [x20, #4]
    8d9c:	add	w1, w1, #0x1
    8da0:	add	x0, sp, #0x80
    8da4:	str	w1, [x19, #308]
    8da8:	str	x0, [x19, #328]
    8dac:	mov	w1, w22
    8db0:	mov	x0, x19
    8db4:	mov	x2, x20
    8db8:	stp	x20, x3, [sp, #128]
    8dbc:	bl	4e08 <d_print_comp_inner>
    8dc0:	ldr	w1, [x20, #4]
    8dc4:	ldr	x0, [sp, #136]
    8dc8:	sub	w1, w1, #0x1
    8dcc:	ldp	x21, x22, [sp, #32]
    8dd0:	ldp	x23, x24, [sp, #48]
    8dd4:	ldp	x25, x26, [sp, #64]
    8dd8:	str	x0, [x19, #328]
    8ddc:	ldr	w0, [x19, #308]
    8de0:	str	w1, [x20, #4]
    8de4:	sub	w0, w0, #0x1
    8de8:	str	w0, [x19, #308]
    8dec:	b	4e70 <d_print_comp_inner+0x68>
    8df0:	ldr	x20, [x24, #8]
    8df4:	cbz	x20, 931c <d_print_comp_inner+0x4514>
    8df8:	ldr	w0, [x20, #4]
    8dfc:	cmp	w0, #0x1
    8e00:	b.gt	931c <d_print_comp_inner+0x4514>
    8e04:	ldr	w1, [x19, #308]
    8e08:	cmp	w1, #0x400
    8e0c:	b.gt	931c <d_print_comp_inner+0x4514>
    8e10:	ldr	x3, [x19, #328]
    8e14:	add	w0, w0, #0x1
    8e18:	str	w0, [x20, #4]
    8e1c:	add	w1, w1, #0x1
    8e20:	add	x0, sp, #0x80
    8e24:	str	w1, [x19, #308]
    8e28:	str	x0, [x19, #328]
    8e2c:	mov	w1, w22
    8e30:	mov	x0, x19
    8e34:	mov	x2, x20
    8e38:	stp	x20, x3, [sp, #128]
    8e3c:	bl	4e08 <d_print_comp_inner>
    8e40:	ldr	w1, [x20, #4]
    8e44:	ldr	x0, [sp, #136]
    8e48:	sub	w1, w1, #0x1
    8e4c:	ldp	x21, x22, [sp, #32]
    8e50:	ldp	x23, x24, [sp, #48]
    8e54:	ldp	x25, x26, [sp, #64]
    8e58:	str	x0, [x19, #328]
    8e5c:	ldr	w0, [x19, #308]
    8e60:	str	w1, [x20, #4]
    8e64:	sub	w0, w0, #0x1
    8e68:	str	w0, [x19, #308]
    8e6c:	b	4e70 <d_print_comp_inner+0x68>
    8e70:	ldr	x20, [x24, #8]
    8e74:	cbz	x20, 9364 <d_print_comp_inner+0x455c>
    8e78:	ldr	w0, [x20, #4]
    8e7c:	cmp	w0, #0x1
    8e80:	b.gt	9364 <d_print_comp_inner+0x455c>
    8e84:	ldr	w1, [x19, #308]
    8e88:	cmp	w1, #0x400
    8e8c:	b.gt	9364 <d_print_comp_inner+0x455c>
    8e90:	ldr	x3, [x19, #328]
    8e94:	add	w0, w0, #0x1
    8e98:	str	w0, [x20, #4]
    8e9c:	add	w1, w1, #0x1
    8ea0:	add	x0, sp, #0x80
    8ea4:	str	w1, [x19, #308]
    8ea8:	str	x0, [x19, #328]
    8eac:	mov	w1, w22
    8eb0:	mov	x0, x19
    8eb4:	mov	x2, x20
    8eb8:	stp	x20, x3, [sp, #128]
    8ebc:	bl	4e08 <d_print_comp_inner>
    8ec0:	ldr	w1, [x20, #4]
    8ec4:	ldr	x0, [sp, #136]
    8ec8:	sub	w1, w1, #0x1
    8ecc:	ldp	x21, x22, [sp, #32]
    8ed0:	ldp	x23, x24, [sp, #48]
    8ed4:	ldp	x25, x26, [sp, #64]
    8ed8:	str	x0, [x19, #328]
    8edc:	ldr	w0, [x19, #308]
    8ee0:	str	w1, [x20, #4]
    8ee4:	sub	w0, w0, #0x1
    8ee8:	str	w0, [x19, #308]
    8eec:	b	4e70 <d_print_comp_inner+0x68>
    8ef0:	ldr	x20, [x24, #8]
    8ef4:	cbz	x20, 90e4 <d_print_comp_inner+0x42dc>
    8ef8:	ldr	w0, [x20, #4]
    8efc:	cmp	w0, #0x1
    8f00:	b.gt	90e4 <d_print_comp_inner+0x42dc>
    8f04:	ldr	w1, [x19, #308]
    8f08:	cmp	w1, #0x400
    8f0c:	b.gt	90e4 <d_print_comp_inner+0x42dc>
    8f10:	ldr	x3, [x19, #328]
    8f14:	add	w0, w0, #0x1
    8f18:	str	w0, [x20, #4]
    8f1c:	add	w1, w1, #0x1
    8f20:	add	x0, sp, #0x80
    8f24:	str	w1, [x19, #308]
    8f28:	str	x0, [x19, #328]
    8f2c:	mov	w1, w22
    8f30:	mov	x0, x19
    8f34:	mov	x2, x20
    8f38:	stp	x20, x3, [sp, #128]
    8f3c:	bl	4e08 <d_print_comp_inner>
    8f40:	ldr	w1, [x20, #4]
    8f44:	ldr	x0, [sp, #136]
    8f48:	sub	w1, w1, #0x1
    8f4c:	ldp	x21, x22, [sp, #32]
    8f50:	ldp	x23, x24, [sp, #48]
    8f54:	ldp	x25, x26, [sp, #64]
    8f58:	str	x0, [x19, #328]
    8f5c:	ldr	w0, [x19, #308]
    8f60:	str	w1, [x20, #4]
    8f64:	sub	w0, w0, #0x1
    8f68:	str	w0, [x19, #308]
    8f6c:	b	4e70 <d_print_comp_inner+0x68>
    8f70:	add	x23, sp, #0x80
    8f74:	mov	w24, #0x1                   	// #1
    8f78:	b	8fe0 <d_print_comp_inner+0x41d8>
    8f7c:	ldr	w1, [x19, #308]
    8f80:	cmp	w1, #0x400
    8f84:	b.gt	8ff4 <d_print_comp_inner+0x41ec>
    8f88:	ldr	x3, [x19, #328]
    8f8c:	add	w0, w0, #0x1
    8f90:	str	w0, [x20, #4]
    8f94:	add	w1, w1, #0x1
    8f98:	str	w1, [x19, #308]
    8f9c:	mov	x0, x19
    8fa0:	str	x23, [x19, #328]
    8fa4:	mov	w1, w22
    8fa8:	mov	x2, x20
    8fac:	stp	x20, x3, [sp, #128]
    8fb0:	bl	4e08 <d_print_comp_inner>
    8fb4:	ldr	w1, [x20, #4]
    8fb8:	ldr	x0, [sp, #136]
    8fbc:	str	x0, [x19, #328]
    8fc0:	ldr	w0, [x19, #308]
    8fc4:	sub	w1, w1, #0x1
    8fc8:	str	w1, [x20, #4]
    8fcc:	sub	w0, w0, #0x1
    8fd0:	str	w0, [x19, #308]
    8fd4:	add	w21, w21, #0x1
    8fd8:	cmp	w21, w26
    8fdc:	b.ge	8ffc <d_print_comp_inner+0x41f4>  // b.tcont
    8fe0:	str	w21, [x19, #316]
    8fe4:	cbz	x20, 8ff4 <d_print_comp_inner+0x41ec>
    8fe8:	ldr	w0, [x20, #4]
    8fec:	cmp	w0, #0x1
    8ff0:	b.le	8f7c <d_print_comp_inner+0x4174>
    8ff4:	str	w24, [x19, #304]
    8ff8:	b	8fd4 <d_print_comp_inner+0x41cc>
    8ffc:	ldp	x21, x22, [sp, #32]
    9000:	ldp	x23, x24, [sp, #48]
    9004:	ldp	x25, x26, [sp, #64]
    9008:	ldr	x27, [sp, #80]
    900c:	b	4e70 <d_print_comp_inner+0x68>
    9010:	cmp	w21, w26
    9014:	b.lt	8f70 <d_print_comp_inner+0x4168>  // b.tstop
    9018:	ldp	x21, x22, [sp, #32]
    901c:	ldp	x23, x24, [sp, #48]
    9020:	ldp	x25, x26, [sp, #64]
    9024:	ldr	x27, [sp, #80]
    9028:	b	4e70 <d_print_comp_inner+0x68>
    902c:	mov	w0, #0x1                   	// #1
    9030:	str	w0, [x19, #304]
    9034:	b	8d00 <d_print_comp_inner+0x3ef8>
    9038:	mov	w0, #0x1                   	// #1
    903c:	str	w0, [x19, #304]
    9040:	b	8618 <d_print_comp_inner+0x3810>
    9044:	mov	w1, #0x1                   	// #1
    9048:	str	w1, [x19, #304]
    904c:	b	5cd8 <d_print_comp_inner+0xed0>
    9050:	mov	w2, #0x1                   	// #1
    9054:	add	x21, sp, #0x80
    9058:	str	w2, [x19, #304]
    905c:	b	5ef8 <d_print_comp_inner+0x10f0>
    9060:	mov	w0, #0x1                   	// #1
    9064:	ldp	x21, x22, [sp, #32]
    9068:	ldp	x23, x24, [sp, #48]
    906c:	str	w0, [x19, #304]
    9070:	b	4e70 <d_print_comp_inner+0x68>
    9074:	mov	w0, #0x1                   	// #1
    9078:	ldp	x21, x22, [sp, #32]
    907c:	ldp	x23, x24, [sp, #48]
    9080:	str	w0, [x19, #304]
    9084:	b	4e70 <d_print_comp_inner+0x68>
    9088:	mov	w1, #0x1                   	// #1
    908c:	str	w1, [x19, #304]
    9090:	b	7b60 <d_print_comp_inner+0x2d58>
    9094:	mov	w0, #0x1                   	// #1
    9098:	ldp	x21, x22, [sp, #32]
    909c:	ldp	x23, x24, [sp, #48]
    90a0:	ldp	x25, x26, [sp, #64]
    90a4:	str	w0, [x19, #304]
    90a8:	b	4e70 <d_print_comp_inner+0x68>
    90ac:	mov	w0, #0x1                   	// #1
    90b0:	str	w0, [x19, #304]
    90b4:	b	73fc <d_print_comp_inner+0x25f4>
    90b8:	mov	w0, #0x1                   	// #1
    90bc:	ldp	x21, x22, [sp, #32]
    90c0:	ldp	x23, x24, [sp, #48]
    90c4:	str	w0, [x19, #304]
    90c8:	b	4e70 <d_print_comp_inner+0x68>
    90cc:	mov	w0, #0x1                   	// #1
    90d0:	ldp	x21, x22, [sp, #32]
    90d4:	ldp	x23, x24, [sp, #48]
    90d8:	ldp	x25, x26, [sp, #64]
    90dc:	str	w0, [x19, #304]
    90e0:	b	4e70 <d_print_comp_inner+0x68>
    90e4:	mov	w0, #0x1                   	// #1
    90e8:	ldp	x21, x22, [sp, #32]
    90ec:	ldp	x23, x24, [sp, #48]
    90f0:	ldp	x25, x26, [sp, #64]
    90f4:	str	w0, [x19, #304]
    90f8:	b	4e70 <d_print_comp_inner+0x68>
    90fc:	ldp	x25, x26, [sp, #64]
    9100:	cmp	x1, #0xff
    9104:	b.ne	d464 <d_print_comp_inner+0x865c>  // b.any
    9108:	ldp	x3, x2, [x19, #272]
    910c:	strb	wzr, [x19, #255]
    9110:	mov	x0, x19
    9114:	blr	x3
    9118:	ldr	x1, [x19, #320]
    911c:	mov	w2, #0x3a7d                	// #14973
    9120:	mov	x0, #0x2                   	// #2
    9124:	strh	w2, [x19]
    9128:	add	x1, x1, #0x1
    912c:	str	x1, [x19, #320]
    9130:	add	x2, x0, #0x1
    9134:	str	x2, [x19, #256]
    9138:	mov	w1, #0x3a                  	// #58
    913c:	strb	w1, [x19, x0]
    9140:	strb	w1, [x19, #264]
    9144:	ldr	x23, [x23, #8]
    9148:	cbnz	x23, 5174 <d_print_comp_inner+0x36c>
    914c:	mov	w0, #0x1                   	// #1
    9150:	ldp	x21, x22, [sp, #32]
    9154:	ldp	x23, x24, [sp, #48]
    9158:	str	w0, [x19, #304]
    915c:	b	4e70 <d_print_comp_inner+0x68>
    9160:	mov	w0, #0x1                   	// #1
    9164:	str	w0, [x19, #304]
    9168:	b	511c <d_print_comp_inner+0x314>
    916c:	mov	w0, #0x1                   	// #1
    9170:	ldp	x21, x22, [sp, #32]
    9174:	ldp	x23, x24, [sp, #48]
    9178:	str	w0, [x19, #304]
    917c:	b	4e70 <d_print_comp_inner+0x68>
    9180:	mov	w0, #0x1                   	// #1
    9184:	ldp	x21, x22, [sp, #32]
    9188:	ldp	x23, x24, [sp, #48]
    918c:	str	w0, [x19, #304]
    9190:	b	4e70 <d_print_comp_inner+0x68>
    9194:	mov	w0, #0x1                   	// #1
    9198:	ldp	x21, x22, [sp, #32]
    919c:	ldp	x23, x24, [sp, #48]
    91a0:	str	w0, [x19, #304]
    91a4:	b	4e70 <d_print_comp_inner+0x68>
    91a8:	mov	w0, #0x1                   	// #1
    91ac:	ldp	x21, x22, [sp, #32]
    91b0:	ldp	x23, x24, [sp, #48]
    91b4:	str	w0, [x19, #304]
    91b8:	b	4e70 <d_print_comp_inner+0x68>
    91bc:	mov	w0, #0x1                   	// #1
    91c0:	ldp	x21, x22, [sp, #32]
    91c4:	ldp	x23, x24, [sp, #48]
    91c8:	ldp	x25, x26, [sp, #64]
    91cc:	str	w0, [x19, #304]
    91d0:	b	4e70 <d_print_comp_inner+0x68>
    91d4:	mov	w0, #0x1                   	// #1
    91d8:	ldp	x21, x22, [sp, #32]
    91dc:	ldp	x23, x24, [sp, #48]
    91e0:	ldp	x25, x26, [sp, #64]
    91e4:	str	w0, [x19, #304]
    91e8:	b	4e70 <d_print_comp_inner+0x68>
    91ec:	mov	w0, #0x1                   	// #1
    91f0:	ldp	x21, x22, [sp, #32]
    91f4:	ldp	x23, x24, [sp, #48]
    91f8:	str	w0, [x19, #304]
    91fc:	b	4e70 <d_print_comp_inner+0x68>
    9200:	mov	w0, #0x1                   	// #1
    9204:	ldp	x21, x22, [sp, #32]
    9208:	ldp	x23, x24, [sp, #48]
    920c:	ldp	x25, x26, [sp, #64]
    9210:	str	w0, [x19, #304]
    9214:	b	4e70 <d_print_comp_inner+0x68>
    9218:	mov	w0, #0x1                   	// #1
    921c:	str	w0, [x19, #304]
    9220:	mov	x2, x24
    9224:	mov	w1, w22
    9228:	mov	x0, x19
    922c:	bl	ea20 <d_print_mod>
    9230:	b	52d8 <d_print_comp_inner+0x4d0>
    9234:	mov	w0, #0x1                   	// #1
    9238:	ldp	x21, x22, [sp, #32]
    923c:	ldp	x23, x24, [sp, #48]
    9240:	ldp	x25, x26, [sp, #64]
    9244:	str	w0, [x19, #304]
    9248:	b	4e70 <d_print_comp_inner+0x68>
    924c:	mov	w0, #0x1                   	// #1
    9250:	str	w0, [x19, #304]
    9254:	b	5bf4 <d_print_comp_inner+0xdec>
    9258:	mov	w1, #0x1                   	// #1
    925c:	str	w1, [x19, #304]
    9260:	b	7530 <d_print_comp_inner+0x2728>
    9264:	mov	w0, #0x1                   	// #1
    9268:	ldp	x21, x22, [sp, #32]
    926c:	ldp	x23, x24, [sp, #48]
    9270:	ldp	x25, x26, [sp, #64]
    9274:	str	w0, [x19, #304]
    9278:	b	4e70 <d_print_comp_inner+0x68>
    927c:	mov	w1, #0x1                   	// #1
    9280:	str	w1, [x19, #304]
    9284:	b	704c <d_print_comp_inner+0x2244>
    9288:	mov	w0, #0x1                   	// #1
    928c:	ldp	x21, x22, [sp, #32]
    9290:	ldp	x23, x24, [sp, #48]
    9294:	ldp	x25, x26, [sp, #64]
    9298:	str	w0, [x19, #304]
    929c:	b	4e70 <d_print_comp_inner+0x68>
    92a0:	mov	w0, #0x1                   	// #1
    92a4:	ldp	x21, x22, [sp, #32]
    92a8:	ldp	x23, x24, [sp, #48]
    92ac:	ldp	x25, x26, [sp, #64]
    92b0:	str	w0, [x19, #304]
    92b4:	b	4e70 <d_print_comp_inner+0x68>
    92b8:	mov	w0, #0x1                   	// #1
    92bc:	ldp	x21, x22, [sp, #32]
    92c0:	ldp	x23, x24, [sp, #48]
    92c4:	str	w0, [x19, #304]
    92c8:	b	4e70 <d_print_comp_inner+0x68>
    92cc:	mov	w0, #0x1                   	// #1
    92d0:	ldp	x21, x22, [sp, #32]
    92d4:	ldp	x23, x24, [sp, #48]
    92d8:	str	w0, [x19, #304]
    92dc:	b	4e70 <d_print_comp_inner+0x68>
    92e0:	mov	w0, #0x1                   	// #1
    92e4:	str	w0, [x19, #304]
    92e8:	b	6ba8 <d_print_comp_inner+0x1da0>
    92ec:	mov	w0, #0x1                   	// #1
    92f0:	ldp	x21, x22, [sp, #32]
    92f4:	ldp	x23, x24, [sp, #48]
    92f8:	ldp	x25, x26, [sp, #64]
    92fc:	str	w0, [x19, #304]
    9300:	b	4e70 <d_print_comp_inner+0x68>
    9304:	mov	w0, #0x1                   	// #1
    9308:	ldp	x21, x22, [sp, #32]
    930c:	ldp	x23, x24, [sp, #48]
    9310:	ldp	x25, x26, [sp, #64]
    9314:	str	w0, [x19, #304]
    9318:	b	4e70 <d_print_comp_inner+0x68>
    931c:	mov	w0, #0x1                   	// #1
    9320:	ldp	x21, x22, [sp, #32]
    9324:	ldp	x23, x24, [sp, #48]
    9328:	ldp	x25, x26, [sp, #64]
    932c:	str	w0, [x19, #304]
    9330:	b	4e70 <d_print_comp_inner+0x68>
    9334:	mov	w0, #0x1                   	// #1
    9338:	ldp	x21, x22, [sp, #32]
    933c:	ldp	x23, x24, [sp, #48]
    9340:	ldp	x25, x26, [sp, #64]
    9344:	str	w0, [x19, #304]
    9348:	b	4e70 <d_print_comp_inner+0x68>
    934c:	mov	w0, #0x1                   	// #1
    9350:	ldp	x21, x22, [sp, #32]
    9354:	ldp	x23, x24, [sp, #48]
    9358:	ldp	x25, x26, [sp, #64]
    935c:	str	w0, [x19, #304]
    9360:	b	4e70 <d_print_comp_inner+0x68>
    9364:	mov	w0, #0x1                   	// #1
    9368:	ldp	x21, x22, [sp, #32]
    936c:	ldp	x23, x24, [sp, #48]
    9370:	ldp	x25, x26, [sp, #64]
    9374:	str	w0, [x19, #304]
    9378:	b	4e70 <d_print_comp_inner+0x68>
    937c:	cbnz	x20, 8020 <d_print_comp_inner+0x3218>
    9380:	mov	w0, #0x1                   	// #1
    9384:	str	w0, [x19, #304]
    9388:	b	8088 <d_print_comp_inner+0x3280>
    938c:	mov	w1, #0x1                   	// #1
    9390:	str	w1, [x19, #304]
    9394:	b	8198 <d_print_comp_inner+0x3390>
    9398:	mov	w0, #0x1                   	// #1
    939c:	str	w0, [x19, #304]
    93a0:	b	5448 <d_print_comp_inner+0x640>
    93a4:	ldr	x1, [x19, #256]
    93a8:	cmp	x1, #0xff
    93ac:	b.ne	9474 <d_print_comp_inner+0x466c>  // b.any
    93b0:	ldp	x3, x2, [x19, #272]
    93b4:	strb	wzr, [x19, #255]
    93b8:	mov	x0, x19
    93bc:	blr	x3
    93c0:	ldr	x2, [x19, #320]
    93c4:	mov	x0, #0x1                   	// #1
    93c8:	mov	x1, #0x0                   	// #0
    93cc:	add	x2, x2, x0
    93d0:	str	x2, [x19, #320]
    93d4:	str	x0, [x19, #256]
    93d8:	mov	w0, #0x7d                  	// #125
    93dc:	strb	w0, [x19, x1]
    93e0:	strb	w0, [x19, #264]
    93e4:	ldp	x21, x22, [sp, #32]
    93e8:	ldp	x23, x24, [sp, #48]
    93ec:	b	4e70 <d_print_comp_inner+0x68>
    93f0:	ldr	x1, [x19, #256]
    93f4:	cmp	x1, #0xff
    93f8:	b.ne	9480 <d_print_comp_inner+0x4678>  // b.any
    93fc:	ldp	x3, x2, [x19, #272]
    9400:	strb	wzr, [x19, #255]
    9404:	mov	x0, x19
    9408:	blr	x3
    940c:	ldr	x2, [x19, #320]
    9410:	mov	x0, #0x1                   	// #1
    9414:	mov	x1, #0x0                   	// #0
    9418:	add	x2, x2, x0
    941c:	str	x2, [x19, #320]
    9420:	str	x0, [x19, #256]
    9424:	mov	w0, #0x7d                  	// #125
    9428:	strb	w0, [x19, x1]
    942c:	strb	w0, [x19, #264]
    9430:	ldp	x21, x22, [sp, #32]
    9434:	ldp	x23, x24, [sp, #48]
    9438:	b	4e70 <d_print_comp_inner+0x68>
    943c:	ldp	x3, x2, [x19, #272]
    9440:	strb	wzr, [x19, #255]
    9444:	mov	x1, x0
    9448:	mov	x0, x19
    944c:	blr	x3
    9450:	ldr	x0, [x19, #320]
    9454:	mov	w2, #0x29                  	// #41
    9458:	mov	x1, #0x1                   	// #1
    945c:	strb	w2, [x19]
    9460:	add	x0, x0, x1
    9464:	str	x0, [x19, #320]
    9468:	add	x0, x1, #0x1
    946c:	b	5f44 <d_print_comp_inner+0x113c>
    9470:	mov	x1, #0x1                   	// #1
    9474:	add	x0, x1, #0x1
    9478:	b	93d4 <d_print_comp_inner+0x45cc>
    947c:	mov	x1, #0x1                   	// #1
    9480:	add	x0, x1, #0x1
    9484:	b	9420 <d_print_comp_inner+0x4618>
    9488:	add	x3, x0, #0x2
    948c:	str	x3, [x19, #256]
    9490:	mov	w2, #0x75                  	// #117
    9494:	strb	w2, [x19, x1]
    9498:	strb	w2, [x19, #264]
    949c:	cmp	x3, #0xff
    94a0:	b.ne	a368 <d_print_comp_inner+0x5560>  // b.any
    94a4:	ldp	x4, x2, [x19, #272]
    94a8:	strb	wzr, [x19, #255]
    94ac:	mov	x1, x3
    94b0:	mov	x0, x19
    94b4:	blr	x4
    94b8:	ldr	x1, [x19, #320]
    94bc:	mov	w3, #0x6e6e                	// #28270
    94c0:	mov	w2, #0x61                  	// #97
    94c4:	mov	x0, #0x3                   	// #3
    94c8:	add	x1, x1, #0x1
    94cc:	strh	w3, [x19]
    94d0:	strb	w2, [x19, #2]
    94d4:	str	x1, [x19, #320]
    94d8:	add	x1, x0, #0x1
    94dc:	str	x1, [x19, #256]
    94e0:	mov	w2, #0x6d                  	// #109
    94e4:	strb	w2, [x19, x0]
    94e8:	strb	w2, [x19, #264]
    94ec:	cmp	x1, #0xff
    94f0:	b.ne	a3b8 <d_print_comp_inner+0x55b0>  // b.any
    94f4:	ldp	x3, x2, [x19, #272]
    94f8:	strb	wzr, [x19, #255]
    94fc:	mov	x0, x19
    9500:	blr	x3
    9504:	ldr	x1, [x19, #320]
    9508:	mov	w3, #0x6465                	// #25701
    950c:	mov	w2, #0x20                  	// #32
    9510:	mov	x0, #0x3                   	// #3
    9514:	add	x1, x1, #0x1
    9518:	strh	w3, [x19]
    951c:	strb	w2, [x19, #2]
    9520:	str	x1, [x19, #320]
    9524:	add	x1, x0, #0x1
    9528:	str	x1, [x19, #256]
    952c:	mov	w2, #0x74                  	// #116
    9530:	strb	w2, [x19, x0]
    9534:	strb	w2, [x19, #264]
    9538:	cmp	x1, #0xff
    953c:	b.ne	a408 <d_print_comp_inner+0x5600>  // b.any
    9540:	ldp	x3, x2, [x19, #272]
    9544:	strb	wzr, [x19, #255]
    9548:	mov	x0, x19
    954c:	blr	x3
    9550:	ldr	x0, [x19, #320]
    9554:	mov	w2, #0x7079                	// #28793
    9558:	mov	x1, #0x2                   	// #2
    955c:	strh	w2, [x19]
    9560:	add	x0, x0, #0x1
    9564:	str	x0, [x19, #320]
    9568:	add	x0, x1, #0x1
    956c:	mov	w2, #0x65                  	// #101
    9570:	strb	w2, [x19, x1]
    9574:	add	x1, x0, #0x1
    9578:	b	6130 <d_print_comp_inner+0x1328>
    957c:	add	x3, x0, #0x2
    9580:	str	x3, [x19, #256]
    9584:	mov	w2, #0x61                  	// #97
    9588:	strb	w2, [x19, x1]
    958c:	strb	w2, [x19, #264]
    9590:	cmp	x3, #0xff
    9594:	b.ne	b05c <d_print_comp_inner+0x6254>  // b.any
    9598:	ldp	x4, x2, [x19, #272]
    959c:	strb	wzr, [x19, #255]
    95a0:	mov	x1, x3
    95a4:	mov	x0, x19
    95a8:	blr	x4
    95ac:	ldr	x1, [x19, #320]
    95b0:	mov	w3, #0x6176                	// #24950
    95b4:	mov	w2, #0x20                  	// #32
    95b8:	mov	x0, #0x3                   	// #3
    95bc:	add	x1, x1, #0x1
    95c0:	strh	w3, [x19]
    95c4:	strb	w2, [x19, #2]
    95c8:	str	x1, [x19, #320]
    95cc:	add	x1, x0, #0x1
    95d0:	str	x1, [x19, #256]
    95d4:	mov	w2, #0x72                  	// #114
    95d8:	strb	w2, [x19, x0]
    95dc:	strb	w2, [x19, #264]
    95e0:	cmp	x1, #0xff
    95e4:	b.ne	b0ac <d_print_comp_inner+0x62a4>  // b.any
    95e8:	ldp	x3, x2, [x19, #272]
    95ec:	strb	wzr, [x19, #255]
    95f0:	mov	x0, x19
    95f4:	blr	x3
    95f8:	ldr	x1, [x19, #320]
    95fc:	mov	w3, #0x7365                	// #29541
    9600:	mov	w2, #0x6f                  	// #111
    9604:	mov	x0, #0x3                   	// #3
    9608:	add	x1, x1, #0x1
    960c:	strh	w3, [x19]
    9610:	strb	w2, [x19, #2]
    9614:	str	x1, [x19, #320]
    9618:	add	x1, x0, #0x1
    961c:	str	x1, [x19, #256]
    9620:	mov	w2, #0x75                  	// #117
    9624:	strb	w2, [x19, x0]
    9628:	strb	w2, [x19, #264]
    962c:	cmp	x1, #0xff
    9630:	b.ne	b0fc <d_print_comp_inner+0x62f4>  // b.any
    9634:	ldp	x3, x2, [x19, #272]
    9638:	strb	wzr, [x19, #255]
    963c:	mov	x0, x19
    9640:	blr	x3
    9644:	ldr	x0, [x19, #320]
    9648:	mov	w2, #0x6372                	// #25458
    964c:	mov	x1, #0x2                   	// #2
    9650:	strh	w2, [x19]
    9654:	add	x0, x0, #0x1
    9658:	str	x0, [x19, #320]
    965c:	add	x0, x1, #0x1
    9660:	mov	w2, #0x65                  	// #101
    9664:	strb	w2, [x19, x1]
    9668:	add	x1, x0, #0x1
    966c:	b	6aac <d_print_comp_inner+0x1ca4>
    9670:	ldp	x3, x2, [x19, #272]
    9674:	strb	wzr, [x19, #255]
    9678:	mov	x1, x0
    967c:	mov	x0, x19
    9680:	blr	x3
    9684:	ldr	x1, [x19, #320]
    9688:	mov	w3, #0x6564                	// #25956
    968c:	mov	w2, #0x63                  	// #99
    9690:	mov	x0, #0x3                   	// #3
    9694:	add	x1, x1, #0x1
    9698:	strh	w3, [x19]
    969c:	strb	w2, [x19, #2]
    96a0:	str	x1, [x19, #320]
    96a4:	add	x1, x0, #0x1
    96a8:	str	x1, [x19, #256]
    96ac:	mov	w2, #0x6c                  	// #108
    96b0:	strb	w2, [x19, x0]
    96b4:	strb	w2, [x19, #264]
    96b8:	cmp	x1, #0xff
    96bc:	b.ne	7a4c <d_print_comp_inner+0x2c44>  // b.any
    96c0:	ldp	x3, x2, [x19, #272]
    96c4:	strb	wzr, [x19, #255]
    96c8:	mov	x0, x19
    96cc:	blr	x3
    96d0:	ldr	x1, [x19, #320]
    96d4:	mov	w3, #0x7974                	// #31092
    96d8:	mov	w2, #0x70                  	// #112
    96dc:	mov	x0, #0x3                   	// #3
    96e0:	add	x1, x1, #0x1
    96e4:	strh	w3, [x19]
    96e8:	strb	w2, [x19, #2]
    96ec:	str	x1, [x19, #320]
    96f0:	add	x3, x0, #0x1
    96f4:	str	x3, [x19, #256]
    96f8:	mov	w1, #0x65                  	// #101
    96fc:	strb	w1, [x19, x0]
    9700:	strb	w1, [x19, #264]
    9704:	cmp	x3, #0xff
    9708:	b.ne	7a9c <d_print_comp_inner+0x2c94>  // b.any
    970c:	ldp	x4, x2, [x19, #272]
    9710:	strb	wzr, [x19, #255]
    9714:	mov	x1, x3
    9718:	mov	x0, x19
    971c:	blr	x4
    9720:	ldr	x0, [x19, #320]
    9724:	mov	w2, #0x20                  	// #32
    9728:	mov	x1, #0x1                   	// #1
    972c:	strb	w2, [x19]
    9730:	add	x0, x0, x1
    9734:	str	x0, [x19, #320]
    9738:	add	x0, x1, #0x1
    973c:	b	7adc <d_print_comp_inner+0x2cd4>
    9740:	mov	w0, #0x1                   	// #1
    9744:	str	w0, [x19, #304]
    9748:	b	5a0c <d_print_comp_inner+0xc04>
    974c:	ldp	x21, x22, [sp, #32]
    9750:	ldp	x23, x24, [sp, #48]
    9754:	b	4e70 <d_print_comp_inner+0x68>
    9758:	ldp	x21, x22, [sp, #32]
    975c:	ldp	x23, x24, [sp, #48]
    9760:	b	4e70 <d_print_comp_inner+0x68>
    9764:	ldp	x21, x22, [sp, #32]
    9768:	ldp	x23, x24, [sp, #48]
    976c:	b	4e70 <d_print_comp_inner+0x68>
    9770:	ldr	x20, [x24, #8]
    9774:	cbz	w26, d33c <d_print_comp_inner+0x8534>
    9778:	str	x27, [sp, #80]
    977c:	b	5ab0 <d_print_comp_inner+0xca8>
    9780:	mov	w0, #0x1                   	// #1
    9784:	str	w0, [x19, #304]
    9788:	sub	x21, x21, #0x2
    978c:	ldp	x23, x24, [sp, #48]
    9790:	str	x21, [x19, #256]
    9794:	ldp	x21, x22, [sp, #32]
    9798:	b	4e70 <d_print_comp_inner+0x68>
    979c:	mov	x24, x0
    97a0:	ldr	x25, [x0, #8]
    97a4:	b	5230 <d_print_comp_inner+0x428>
    97a8:	mov	w1, #0x1                   	// #1
    97ac:	str	w1, [x19, #304]
    97b0:	b	55ac <d_print_comp_inner+0x7a4>
    97b4:	mov	w0, #0x1                   	// #1
    97b8:	str	w0, [x19, #304]
    97bc:	b	538c <d_print_comp_inner+0x584>
    97c0:	ldr	x21, [x19, #288]
    97c4:	cbz	x21, 4e9c <d_print_comp_inner+0x94>
    97c8:	ldr	x2, [x21, #8]
    97cc:	ldr	x1, [x24, #8]
    97d0:	ldr	x20, [x2, #16]
    97d4:	mov	w0, w1
    97d8:	tbnz	w1, #31, 9804 <d_print_comp_inner+0x49fc>
    97dc:	nop
    97e0:	cbz	x20, 4e9c <d_print_comp_inner+0x94>
    97e4:	ldr	w1, [x20]
    97e8:	cmp	w1, #0x2f
    97ec:	b.ne	4e9c <d_print_comp_inner+0x94>  // b.any
    97f0:	cbz	w0, 9800 <d_print_comp_inner+0x49f8>
    97f4:	sub	w0, w0, #0x1
    97f8:	ldr	x20, [x20, #16]
    97fc:	b	97e0 <d_print_comp_inner+0x49d8>
    9800:	ldr	x20, [x20, #8]
    9804:	cbz	x20, 4e9c <d_print_comp_inner+0x94>
    9808:	ldr	w0, [x20]
    980c:	cmp	w0, #0x2f
    9810:	b.eq	d10c <d_print_comp_inner+0x8304>  // b.none
    9814:	ldr	x0, [x21]
    9818:	str	x0, [x19, #288]
    981c:	ldr	w0, [x20, #4]
    9820:	cmp	w0, #0x1
    9824:	b.gt	c404 <d_print_comp_inner+0x75fc>
    9828:	ldr	w1, [x19, #308]
    982c:	cmp	w1, #0x400
    9830:	b.gt	c404 <d_print_comp_inner+0x75fc>
    9834:	ldr	x3, [x19, #328]
    9838:	add	w0, w0, #0x1
    983c:	str	w0, [x20, #4]
    9840:	add	w1, w1, #0x1
    9844:	add	x0, sp, #0x80
    9848:	str	w1, [x19, #308]
    984c:	str	x0, [x19, #328]
    9850:	mov	w1, w22
    9854:	mov	x0, x19
    9858:	mov	x2, x20
    985c:	stp	x20, x3, [sp, #128]
    9860:	bl	4e08 <d_print_comp_inner>
    9864:	ldr	w1, [x20, #4]
    9868:	ldr	x0, [sp, #136]
    986c:	str	x0, [x19, #328]
    9870:	ldr	w0, [x19, #308]
    9874:	sub	w1, w1, #0x1
    9878:	str	w1, [x20, #4]
    987c:	sub	w0, w0, #0x1
    9880:	str	w0, [x19, #308]
    9884:	ldp	x23, x24, [sp, #48]
    9888:	str	x21, [x19, #288]
    988c:	ldp	x21, x22, [sp, #32]
    9890:	b	4e70 <d_print_comp_inner+0x68>
    9894:	mov	x0, x3
    9898:	ldr	x4, [x19, #288]
    989c:	b	5214 <d_print_comp_inner+0x40c>
    98a0:	ldrsw	x22, [x0, #24]
    98a4:	ldr	x20, [x0, #16]
    98a8:	cbz	x22, d82c <d_print_comp_inner+0x8a24>
    98ac:	add	x22, x20, x22
    98b0:	mov	x23, #0x1                   	// #1
    98b4:	ldr	x1, [x19, #256]
    98b8:	b	9914 <d_print_comp_inner+0x4b0c>
    98bc:	ldp	x3, x2, [x19, #272]
    98c0:	strb	wzr, [x19, #255]
    98c4:	mov	x0, x19
    98c8:	add	x20, x20, #0x1
    98cc:	blr	x3
    98d0:	strb	w21, [x19]
    98d4:	ldr	x0, [x19, #320]
    98d8:	str	x23, [x19, #256]
    98dc:	strb	w21, [x19, #264]
    98e0:	cmp	x20, x22
    98e4:	add	x0, x0, #0x1
    98e8:	str	x0, [x19, #320]
    98ec:	b.eq	d0dc <d_print_comp_inner+0x82d4>  // b.none
    98f0:	ldrb	w21, [x20]
    98f4:	mov	x0, #0x1                   	// #1
    98f8:	add	x1, x0, #0x1
    98fc:	str	x1, [x19, #256]
    9900:	strb	w21, [x19, x0]
    9904:	add	x20, x20, #0x1
    9908:	strb	w21, [x19, #264]
    990c:	cmp	x22, x20
    9910:	b.eq	c3d0 <d_print_comp_inner+0x75c8>  // b.none
    9914:	ldrb	w21, [x20]
    9918:	cmp	x1, #0xff
    991c:	b.eq	98bc <d_print_comp_inner+0x4ab4>  // b.none
    9920:	mov	x0, x1
    9924:	b	98f8 <d_print_comp_inner+0x4af0>
    9928:	add	x21, x20, x21
    992c:	cmp	x21, x20
    9930:	b.ls	d918 <d_print_comp_inner+0x8b10>  // b.plast
    9934:	mov	w23, #0x5f                  	// #95
    9938:	ldr	x1, [x19, #256]
    993c:	b	9960 <d_print_comp_inner+0x4b58>
    9940:	mov	x0, x1
    9944:	add	x1, x1, #0x1
    9948:	str	x1, [x19, #256]
    994c:	strb	w22, [x19, x0]
    9950:	strb	w22, [x19, #264]
    9954:	add	x20, x20, #0x1
    9958:	cmp	x21, x20
    995c:	b.ls	b67c <d_print_comp_inner+0x6874>  // b.plast
    9960:	sub	x0, x21, x20
    9964:	ldrb	w22, [x20]
    9968:	cmp	x0, #0x3
    996c:	b.le	9978 <d_print_comp_inner+0x4b70>
    9970:	cmp	w22, #0x5f
    9974:	b.eq	99a8 <d_print_comp_inner+0x4ba0>  // b.none
    9978:	cmp	x1, #0xff
    997c:	b.ne	9940 <d_print_comp_inner+0x4b38>  // b.any
    9980:	ldp	x3, x2, [x19, #272]
    9984:	strb	wzr, [x19, #255]
    9988:	mov	x0, x19
    998c:	blr	x3
    9990:	ldr	x2, [x19, #320]
    9994:	mov	x1, #0x1                   	// #1
    9998:	mov	x0, #0x0                   	// #0
    999c:	add	x2, x2, x1
    99a0:	str	x2, [x19, #320]
    99a4:	b	9948 <d_print_comp_inner+0x4b40>
    99a8:	ldrb	w0, [x20, #1]
    99ac:	cmp	w0, #0x5f
    99b0:	b.ne	9978 <d_print_comp_inner+0x4b70>  // b.any
    99b4:	ldrb	w0, [x20, #2]
    99b8:	cmp	w0, #0x55
    99bc:	b.ne	9978 <d_print_comp_inner+0x4b70>  // b.any
    99c0:	add	x24, x20, #0x3
    99c4:	cmp	x21, x24
    99c8:	b.ls	9978 <d_print_comp_inner+0x4b70>  // b.plast
    99cc:	mov	x2, #0x0                   	// #0
    99d0:	b	99ec <d_print_comp_inner+0x4be4>
    99d4:	mov	w0, w3
    99d8:	sxtw	x0, w0
    99dc:	add	x24, x24, #0x1
    99e0:	add	x2, x0, x2, lsl #4
    99e4:	cmp	x21, x24
    99e8:	b.eq	9978 <d_print_comp_inner+0x4b70>  // b.none
    99ec:	ldrb	w0, [x24]
    99f0:	sub	w3, w0, #0x30
    99f4:	and	w4, w3, #0xff
    99f8:	cmp	w4, #0x9
    99fc:	b.ls	99d4 <d_print_comp_inner+0x4bcc>  // b.plast
    9a00:	sub	w3, w0, #0x41
    9a04:	and	w3, w3, #0xff
    9a08:	cmp	w3, #0x5
    9a0c:	b.hi	d0e8 <d_print_comp_inner+0x82e0>  // b.pmore
    9a10:	sub	w0, w0, #0x37
    9a14:	b	99d8 <d_print_comp_inner+0x4bd0>
    9a18:	b.eq	c6ac <d_print_comp_inner+0x78a4>  // b.none
    9a1c:	add	x3, x0, #0x1
    9a20:	str	x3, [x19, #256]
    9a24:	mov	w1, #0x7b                  	// #123
    9a28:	strb	w1, [x19, x0]
    9a2c:	strb	w1, [x19, #264]
    9a30:	cmp	x3, #0xff
    9a34:	b.ne	c1ac <d_print_comp_inner+0x73a4>  // b.any
    9a38:	ldp	x4, x2, [x19, #272]
    9a3c:	strb	wzr, [x19, #255]
    9a40:	mov	x1, x3
    9a44:	mov	x0, x19
    9a48:	blr	x4
    9a4c:	ldr	x0, [x19, #320]
    9a50:	mov	w3, #0x6170                	// #24944
    9a54:	mov	w2, #0x72                  	// #114
    9a58:	mov	x1, #0x3                   	// #3
    9a5c:	add	x0, x0, #0x1
    9a60:	strh	w3, [x19]
    9a64:	strb	w2, [x19, #2]
    9a68:	str	x0, [x19, #320]
    9a6c:	add	x0, x1, #0x1
    9a70:	str	x0, [x19, #256]
    9a74:	mov	w2, #0x6d                  	// #109
    9a78:	strb	w2, [x19, x1]
    9a7c:	strb	w2, [x19, #264]
    9a80:	cmp	x0, #0xff
    9a84:	b.ne	c1fc <d_print_comp_inner+0x73f4>  // b.any
    9a88:	ldp	x3, x2, [x19, #272]
    9a8c:	strb	wzr, [x19, #255]
    9a90:	mov	x1, x0
    9a94:	mov	x0, x19
    9a98:	blr	x3
    9a9c:	ldr	x2, [x19, #320]
    9aa0:	mov	x1, #0x1                   	// #1
    9aa4:	mov	x0, #0x0                   	// #0
    9aa8:	add	x2, x2, x1
    9aac:	str	x2, [x19, #320]
    9ab0:	str	x1, [x19, #256]
    9ab4:	mov	w3, #0x23                  	// #35
    9ab8:	strb	w3, [x19, x0]
    9abc:	mov	w2, w20
    9ac0:	adrp	x1, 0 <d_make_comp>
    9ac4:	add	x1, x1, #0x0
    9ac8:	strb	w3, [x19, #264]
    9acc:	add	x20, sp, #0x80
    9ad0:	mov	x0, x20
    9ad4:	bl	0 <sprintf>
    9ad8:	mov	x0, x20
    9adc:	bl	0 <strlen>
    9ae0:	cbz	x0, b7d4 <d_print_comp_inner+0x69cc>
    9ae4:	add	x22, x20, x0
    9ae8:	mov	x23, #0x1                   	// #1
    9aec:	ldr	x1, [x19, #256]
    9af0:	b	9b4c <d_print_comp_inner+0x4d44>
    9af4:	ldp	x3, x2, [x19, #272]
    9af8:	strb	wzr, [x19, #255]
    9afc:	mov	x0, x19
    9b00:	add	x20, x20, #0x1
    9b04:	blr	x3
    9b08:	strb	w21, [x19]
    9b0c:	ldr	x0, [x19, #320]
    9b10:	str	x23, [x19, #256]
    9b14:	strb	w21, [x19, #264]
    9b18:	cmp	x20, x22
    9b1c:	add	x0, x0, #0x1
    9b20:	str	x0, [x19, #320]
    9b24:	b.eq	c0c4 <d_print_comp_inner+0x72bc>  // b.none
    9b28:	ldrb	w21, [x20]
    9b2c:	mov	x0, #0x1                   	// #1
    9b30:	add	x1, x0, #0x1
    9b34:	str	x1, [x19, #256]
    9b38:	strb	w21, [x19, x0]
    9b3c:	add	x20, x20, #0x1
    9b40:	strb	w21, [x19, #264]
    9b44:	cmp	x22, x20
    9b48:	b.eq	b7d8 <d_print_comp_inner+0x69d0>  // b.none
    9b4c:	ldrb	w21, [x20]
    9b50:	cmp	x1, #0xff
    9b54:	b.eq	9af4 <d_print_comp_inner+0x4cec>  // b.none
    9b58:	mov	x0, x1
    9b5c:	b	9b30 <d_print_comp_inner+0x4d28>
    9b60:	ldr	x25, [x25, #8]
    9b64:	cbz	x25, dac8 <d_print_comp_inner+0x8cc0>
    9b68:	ldr	w4, [x25]
    9b6c:	add	x21, sp, #0x80
    9b70:	stp	x21, x25, [sp, #160]
    9b74:	sub	w1, w4, #0x1c
    9b78:	str	wzr, [sp, #176]
    9b7c:	cmp	w1, #0x34
    9b80:	str	x3, [sp, #184]
    9b84:	b.hi	9b94 <d_print_comp_inner+0x4d8c>  // b.pmore
    9b88:	lsl	x1, x0, x1
    9b8c:	tst	x1, x2
    9b90:	b.ne	c4f4 <d_print_comp_inner+0x76ec>  // b.any
    9b94:	add	x1, x21, #0x20
    9b98:	mov	w20, #0x2                   	// #2
    9b9c:	b	57a8 <d_print_comp_inner+0x9a0>
    9ba0:	add	x3, x1, #0x2
    9ba4:	str	x3, [x19, #256]
    9ba8:	mov	w2, #0x66                  	// #102
    9bac:	strb	w2, [x19, x0]
    9bb0:	strb	w2, [x19, #264]
    9bb4:	cmp	x3, #0xff
    9bb8:	b.ne	a774 <d_print_comp_inner+0x596c>  // b.any
    9bbc:	ldp	x4, x2, [x19, #272]
    9bc0:	strb	wzr, [x19, #255]
    9bc4:	mov	x1, x3
    9bc8:	mov	x0, x19
    9bcc:	blr	x4
    9bd0:	ldr	x0, [x19, #320]
    9bd4:	mov	w1, #0x6f                  	// #111
    9bd8:	mov	x2, #0x1                   	// #1
    9bdc:	strb	w1, [x19]
    9be0:	add	x0, x0, x2
    9be4:	str	x0, [x19, #320]
    9be8:	b	8d50 <d_print_comp_inner+0x3f48>
    9bec:	add	x3, x0, #0x2
    9bf0:	str	x3, [x19, #256]
    9bf4:	mov	w2, #0x6c                  	// #108
    9bf8:	strb	w2, [x19, x1]
    9bfc:	strb	w2, [x19, #264]
    9c00:	cmp	x3, #0xff
    9c04:	b.ne	b2fc <d_print_comp_inner+0x64f4>  // b.any
    9c08:	ldp	x4, x2, [x19, #272]
    9c0c:	strb	wzr, [x19, #255]
    9c10:	mov	x1, x3
    9c14:	mov	x0, x19
    9c18:	blr	x4
    9c1c:	ldr	x1, [x19, #320]
    9c20:	mov	w3, #0x6d61                	// #28001
    9c24:	mov	w2, #0x62                  	// #98
    9c28:	mov	x0, #0x3                   	// #3
    9c2c:	add	x1, x1, #0x1
    9c30:	strh	w3, [x19]
    9c34:	strb	w2, [x19, #2]
    9c38:	str	x1, [x19, #320]
    9c3c:	add	x3, x0, #0x1
    9c40:	str	x3, [x19, #256]
    9c44:	mov	w1, #0x64                  	// #100
    9c48:	strb	w1, [x19, x0]
    9c4c:	strb	w1, [x19, #264]
    9c50:	cmp	x3, #0xff
    9c54:	b.ne	b34c <d_print_comp_inner+0x6544>  // b.any
    9c58:	ldp	x4, x2, [x19, #272]
    9c5c:	strb	wzr, [x19, #255]
    9c60:	mov	x1, x3
    9c64:	mov	x0, x19
    9c68:	blr	x4
    9c6c:	ldr	x0, [x19, #320]
    9c70:	mov	w2, #0x61                  	// #97
    9c74:	mov	x1, #0x1                   	// #1
    9c78:	strb	w2, [x19]
    9c7c:	add	x0, x0, x1
    9c80:	str	x0, [x19, #320]
    9c84:	b	5e5c <d_print_comp_inner+0x1054>
    9c88:	add	x3, x0, #0x2
    9c8c:	str	x3, [x19, #256]
    9c90:	mov	w2, #0x70                  	// #112
    9c94:	strb	w2, [x19, x1]
    9c98:	strb	w2, [x19, #264]
    9c9c:	cmp	x3, #0xff
    9ca0:	b.ne	a978 <d_print_comp_inner+0x5b70>  // b.any
    9ca4:	ldp	x4, x2, [x19, #272]
    9ca8:	strb	wzr, [x19, #255]
    9cac:	mov	x1, x3
    9cb0:	mov	x0, x19
    9cb4:	blr	x4
    9cb8:	ldr	x0, [x19, #320]
    9cbc:	mov	w3, #0x7265                	// #29285
    9cc0:	mov	w2, #0x61                  	// #97
    9cc4:	mov	x1, #0x3                   	// #3
    9cc8:	add	x0, x0, #0x1
    9ccc:	strh	w3, [x19]
    9cd0:	strb	w2, [x19, #2]
    9cd4:	str	x0, [x19, #320]
    9cd8:	add	x0, x1, #0x1
    9cdc:	str	x0, [x19, #256]
    9ce0:	mov	w2, #0x74                  	// #116
    9ce4:	strb	w2, [x19, x1]
    9ce8:	strb	w2, [x19, #264]
    9cec:	cmp	x0, #0xff
    9cf0:	b.ne	a9c8 <d_print_comp_inner+0x5bc0>  // b.any
    9cf4:	ldp	x3, x2, [x19, #272]
    9cf8:	strb	wzr, [x19, #255]
    9cfc:	mov	x1, x0
    9d00:	mov	x0, x19
    9d04:	blr	x3
    9d08:	ldr	x0, [x19, #320]
    9d0c:	mov	w2, #0x6f                  	// #111
    9d10:	mov	x1, #0x1                   	// #1
    9d14:	strb	w2, [x19]
    9d18:	add	x0, x0, x1
    9d1c:	str	x0, [x19, #320]
    9d20:	b	72f0 <d_print_comp_inner+0x24e8>
    9d24:	add	x3, x0, #0x2
    9d28:	str	x3, [x19, #256]
    9d2c:	mov	w2, #0x61                  	// #97
    9d30:	strb	w2, [x19, x1]
    9d34:	strb	w2, [x19, #264]
    9d38:	cmp	x3, #0xff
    9d3c:	b.ne	9e5c <d_print_comp_inner+0x5054>  // b.any
    9d40:	ldp	x4, x2, [x19, #272]
    9d44:	strb	wzr, [x19, #255]
    9d48:	mov	x1, x3
    9d4c:	mov	x0, x19
    9d50:	blr	x4
    9d54:	ldr	x0, [x19, #320]
    9d58:	mov	w3, #0x6176                	// #24950
    9d5c:	mov	w2, #0x20                  	// #32
    9d60:	mov	x1, #0x3                   	// #3
    9d64:	add	x0, x0, #0x1
    9d68:	strh	w3, [x19]
    9d6c:	strb	w2, [x19, #2]
    9d70:	str	x0, [x19, #320]
    9d74:	add	x0, x1, #0x1
    9d78:	str	x0, [x19, #256]
    9d7c:	mov	w2, #0x43                  	// #67
    9d80:	strb	w2, [x19, x1]
    9d84:	strb	w2, [x19, #264]
    9d88:	cmp	x0, #0xff
    9d8c:	b.ne	9eac <d_print_comp_inner+0x50a4>  // b.any
    9d90:	ldp	x3, x2, [x19, #272]
    9d94:	strb	wzr, [x19, #255]
    9d98:	mov	x1, x0
    9d9c:	mov	x0, x19
    9da0:	blr	x3
    9da4:	ldr	x0, [x19, #320]
    9da8:	mov	w3, #0x616c                	// #24940
    9dac:	mov	w2, #0x73                  	// #115
    9db0:	mov	x1, #0x3                   	// #3
    9db4:	add	x0, x0, #0x1
    9db8:	strh	w3, [x19]
    9dbc:	strb	w2, [x19, #2]
    9dc0:	str	x0, [x19, #320]
    9dc4:	add	x0, x1, #0x1
    9dc8:	str	x0, [x19, #256]
    9dcc:	mov	w2, #0x73                  	// #115
    9dd0:	strb	w2, [x19, x1]
    9dd4:	strb	w2, [x19, #264]
    9dd8:	cmp	x0, #0xff
    9ddc:	b.ne	9ef8 <d_print_comp_inner+0x50f0>  // b.any
    9de0:	ldp	x3, x2, [x19, #272]
    9de4:	strb	wzr, [x19, #255]
    9de8:	mov	x1, x0
    9dec:	mov	x0, x19
    9df0:	blr	x3
    9df4:	ldr	x0, [x19, #320]
    9df8:	mov	w3, #0x6620                	// #26144
    9dfc:	mov	w2, #0x6f                  	// #111
    9e00:	mov	x1, #0x3                   	// #3
    9e04:	add	x0, x0, #0x1
    9e08:	strh	w3, [x19]
    9e0c:	strb	w2, [x19, #2]
    9e10:	str	x0, [x19, #320]
    9e14:	add	x0, x1, #0x1
    9e18:	str	x0, [x19, #256]
    9e1c:	mov	w2, #0x72                  	// #114
    9e20:	strb	w2, [x19, x1]
    9e24:	strb	w2, [x19, #264]
    9e28:	cmp	x0, #0xff
    9e2c:	b.ne	63a0 <d_print_comp_inner+0x1598>  // b.any
    9e30:	ldp	x3, x2, [x19, #272]
    9e34:	strb	wzr, [x19, #255]
    9e38:	mov	x1, x0
    9e3c:	mov	x0, x19
    9e40:	blr	x3
    9e44:	ldr	x2, [x19, #320]
    9e48:	mov	x1, #0x1                   	// #1
    9e4c:	mov	x0, #0x0                   	// #0
    9e50:	add	x2, x2, x1
    9e54:	str	x2, [x19, #320]
    9e58:	b	63a4 <d_print_comp_inner+0x159c>
    9e5c:	add	x0, x0, #0x3
    9e60:	str	x0, [x19, #256]
    9e64:	mov	w1, #0x76                  	// #118
    9e68:	strb	w1, [x19, x3]
    9e6c:	strb	w1, [x19, #264]
    9e70:	cmp	x0, #0xff
    9e74:	b.ne	a688 <d_print_comp_inner+0x5880>  // b.any
    9e78:	ldp	x3, x2, [x19, #272]
    9e7c:	strb	wzr, [x19, #255]
    9e80:	mov	x1, x0
    9e84:	mov	x0, x19
    9e88:	blr	x3
    9e8c:	ldr	x1, [x19, #320]
    9e90:	mov	w3, #0x2061                	// #8289
    9e94:	mov	w2, #0x43                  	// #67
    9e98:	mov	x0, #0x3                   	// #3
    9e9c:	add	x1, x1, #0x1
    9ea0:	strh	w3, [x19]
    9ea4:	strb	w2, [x19, #2]
    9ea8:	str	x1, [x19, #320]
    9eac:	add	x1, x0, #0x1
    9eb0:	str	x1, [x19, #256]
    9eb4:	mov	w2, #0x6c                  	// #108
    9eb8:	strb	w2, [x19, x0]
    9ebc:	strb	w2, [x19, #264]
    9ec0:	cmp	x1, #0xff
    9ec4:	b.ne	a6d8 <d_print_comp_inner+0x58d0>  // b.any
    9ec8:	ldp	x3, x2, [x19, #272]
    9ecc:	strb	wzr, [x19, #255]
    9ed0:	mov	x0, x19
    9ed4:	blr	x3
    9ed8:	ldr	x1, [x19, #320]
    9edc:	mov	w3, #0x7361                	// #29537
    9ee0:	mov	w2, #0x73                  	// #115
    9ee4:	mov	x0, #0x3                   	// #3
    9ee8:	add	x1, x1, #0x1
    9eec:	strh	w3, [x19]
    9ef0:	strb	w2, [x19, #2]
    9ef4:	str	x1, [x19, #320]
    9ef8:	add	x1, x0, #0x1
    9efc:	str	x1, [x19, #256]
    9f00:	mov	w2, #0x20                  	// #32
    9f04:	strb	w2, [x19, x0]
    9f08:	strb	w2, [x19, #264]
    9f0c:	cmp	x1, #0xff
    9f10:	b.ne	a728 <d_print_comp_inner+0x5920>  // b.any
    9f14:	ldp	x3, x2, [x19, #272]
    9f18:	strb	wzr, [x19, #255]
    9f1c:	mov	x0, x19
    9f20:	blr	x3
    9f24:	ldr	x0, [x19, #320]
    9f28:	mov	w2, #0x6f66                	// #28518
    9f2c:	mov	x1, #0x2                   	// #2
    9f30:	strh	w2, [x19]
    9f34:	add	x0, x0, #0x1
    9f38:	str	x0, [x19, #320]
    9f3c:	mov	w2, #0x72                  	// #114
    9f40:	add	x0, x1, #0x1
    9f44:	strb	w2, [x19, x1]
    9f48:	b	63a0 <d_print_comp_inner+0x1598>
    9f4c:	add	x3, x0, #0x2
    9f50:	str	x3, [x19, #256]
    9f54:	mov	w2, #0x74                  	// #116
    9f58:	strb	w2, [x19, x1]
    9f5c:	strb	w2, [x19, #264]
    9f60:	cmp	x3, #0xff
    9f64:	b.ne	a034 <d_print_comp_inner+0x522c>  // b.any
    9f68:	ldp	x4, x2, [x19, #272]
    9f6c:	strb	wzr, [x19, #255]
    9f70:	mov	x1, x3
    9f74:	mov	x0, x19
    9f78:	blr	x4
    9f7c:	ldr	x0, [x19, #320]
    9f80:	mov	w3, #0x6261                	// #25185
    9f84:	mov	w2, #0x6c                  	// #108
    9f88:	mov	x1, #0x3                   	// #3
    9f8c:	add	x0, x0, #0x1
    9f90:	strh	w3, [x19]
    9f94:	strb	w2, [x19, #2]
    9f98:	str	x0, [x19, #320]
    9f9c:	add	x0, x1, #0x1
    9fa0:	str	x0, [x19, #256]
    9fa4:	mov	w2, #0x65                  	// #101
    9fa8:	strb	w2, [x19, x1]
    9fac:	strb	w2, [x19, #264]
    9fb0:	cmp	x0, #0xff
    9fb4:	b.ne	a084 <d_print_comp_inner+0x527c>  // b.any
    9fb8:	ldp	x3, x2, [x19, #272]
    9fbc:	strb	wzr, [x19, #255]
    9fc0:	mov	x1, x0
    9fc4:	mov	x0, x19
    9fc8:	blr	x3
    9fcc:	ldr	x0, [x19, #320]
    9fd0:	mov	w3, #0x6620                	// #26144
    9fd4:	mov	w2, #0x6f                  	// #111
    9fd8:	mov	x1, #0x3                   	// #3
    9fdc:	add	x0, x0, #0x1
    9fe0:	strh	w3, [x19]
    9fe4:	strb	w2, [x19, #2]
    9fe8:	str	x0, [x19, #320]
    9fec:	add	x0, x1, #0x1
    9ff0:	str	x0, [x19, #256]
    9ff4:	mov	w2, #0x72                  	// #114
    9ff8:	strb	w2, [x19, x1]
    9ffc:	strb	w2, [x19, #264]
    a000:	cmp	x0, #0xff
    a004:	b.ne	7de0 <d_print_comp_inner+0x2fd8>  // b.any
    a008:	ldp	x3, x2, [x19, #272]
    a00c:	strb	wzr, [x19, #255]
    a010:	mov	x1, x0
    a014:	mov	x0, x19
    a018:	blr	x3
    a01c:	ldr	x2, [x19, #320]
    a020:	mov	x1, #0x1                   	// #1
    a024:	mov	x0, #0x0                   	// #0
    a028:	add	x2, x2, x1
    a02c:	str	x2, [x19, #320]
    a030:	b	7de4 <d_print_comp_inner+0x2fdc>
    a034:	add	x0, x0, #0x3
    a038:	str	x0, [x19, #256]
    a03c:	mov	w1, #0x61                  	// #97
    a040:	strb	w1, [x19, x3]
    a044:	strb	w1, [x19, #264]
    a048:	cmp	x0, #0xff
    a04c:	b.ne	a840 <d_print_comp_inner+0x5a38>  // b.any
    a050:	ldp	x3, x2, [x19, #272]
    a054:	strb	wzr, [x19, #255]
    a058:	mov	x1, x0
    a05c:	mov	x0, x19
    a060:	blr	x3
    a064:	ldr	x1, [x19, #320]
    a068:	mov	w3, #0x6c62                	// #27746
    a06c:	mov	w2, #0x65                  	// #101
    a070:	mov	x0, #0x3                   	// #3
    a074:	add	x1, x1, #0x1
    a078:	strh	w3, [x19]
    a07c:	strb	w2, [x19, #2]
    a080:	str	x1, [x19, #320]
    a084:	add	x1, x0, #0x1
    a088:	str	x1, [x19, #256]
    a08c:	mov	w2, #0x20                  	// #32
    a090:	strb	w2, [x19, x0]
    a094:	strb	w2, [x19, #264]
    a098:	cmp	x1, #0xff
    a09c:	b.ne	a890 <d_print_comp_inner+0x5a88>  // b.any
    a0a0:	ldp	x3, x2, [x19, #272]
    a0a4:	strb	wzr, [x19, #255]
    a0a8:	mov	x0, x19
    a0ac:	blr	x3
    a0b0:	ldr	x0, [x19, #320]
    a0b4:	mov	w2, #0x6f66                	// #28518
    a0b8:	mov	x1, #0x2                   	// #2
    a0bc:	strh	w2, [x19]
    a0c0:	add	x0, x0, #0x1
    a0c4:	str	x0, [x19, #320]
    a0c8:	mov	w2, #0x72                  	// #114
    a0cc:	add	x0, x1, #0x1
    a0d0:	strb	w2, [x19, x1]
    a0d4:	b	7de0 <d_print_comp_inner+0x2fd8>
    a0d8:	add	x3, x0, #0x2
    a0dc:	str	x3, [x19, #256]
    a0e0:	mov	w2, #0x79                  	// #121
    a0e4:	strb	w2, [x19, x1]
    a0e8:	strb	w2, [x19, #264]
    a0ec:	cmp	x3, #0xff
    a0f0:	b.ne	acd8 <d_print_comp_inner+0x5ed0>  // b.any
    a0f4:	ldp	x4, x2, [x19, #272]
    a0f8:	strb	wzr, [x19, #255]
    a0fc:	mov	x1, x3
    a100:	mov	x0, x19
    a104:	blr	x4
    a108:	ldr	x0, [x19, #320]
    a10c:	mov	w3, #0x6570                	// #25968
    a110:	mov	w2, #0x69                  	// #105
    a114:	mov	x1, #0x3                   	// #3
    a118:	add	x0, x0, #0x1
    a11c:	strh	w3, [x19]
    a120:	strb	w2, [x19, #2]
    a124:	str	x0, [x19, #320]
    a128:	add	x0, x1, #0x1
    a12c:	str	x0, [x19, #256]
    a130:	mov	w2, #0x6e                  	// #110
    a134:	strb	w2, [x19, x1]
    a138:	strb	w2, [x19, #264]
    a13c:	cmp	x0, #0xff
    a140:	b.ne	ad28 <d_print_comp_inner+0x5f20>  // b.any
    a144:	ldp	x3, x2, [x19, #272]
    a148:	strb	wzr, [x19, #255]
    a14c:	mov	x1, x0
    a150:	mov	x0, x19
    a154:	blr	x3
    a158:	ldr	x0, [x19, #320]
    a15c:	mov	w3, #0x6f66                	// #28518
    a160:	mov	w2, #0x20                  	// #32
    a164:	mov	x1, #0x3                   	// #3
    a168:	add	x0, x0, #0x1
    a16c:	strh	w3, [x19]
    a170:	strb	w2, [x19, #2]
    a174:	str	x0, [x19, #320]
    a178:	add	x0, x1, #0x1
    a17c:	str	x0, [x19, #256]
    a180:	mov	w2, #0x66                  	// #102
    a184:	strb	w2, [x19, x1]
    a188:	strb	w2, [x19, #264]
    a18c:	cmp	x0, #0xff
    a190:	b.ne	ad70 <d_print_comp_inner+0x5f68>  // b.any
    a194:	ldp	x3, x2, [x19, #272]
    a198:	strb	wzr, [x19, #255]
    a19c:	mov	x1, x0
    a1a0:	mov	x0, x19
    a1a4:	blr	x3
    a1a8:	ldr	x0, [x19, #320]
    a1ac:	mov	w2, #0x6f                  	// #111
    a1b0:	mov	x1, #0x1                   	// #1
    a1b4:	strb	w2, [x19]
    a1b8:	add	x0, x0, x1
    a1bc:	str	x0, [x19, #320]
    a1c0:	b	7f58 <d_print_comp_inner+0x3150>
    a1c4:	add	x3, x0, #0x2
    a1c8:	str	x3, [x19, #256]
    a1cc:	mov	w2, #0x70                  	// #112
    a1d0:	strb	w2, [x19, x1]
    a1d4:	strb	w2, [x19, #264]
    a1d8:	cmp	x3, #0xff
    a1dc:	b.ne	adb8 <d_print_comp_inner+0x5fb0>  // b.any
    a1e0:	ldp	x4, x2, [x19, #272]
    a1e4:	strb	wzr, [x19, #255]
    a1e8:	mov	x1, x3
    a1ec:	mov	x0, x19
    a1f0:	blr	x4
    a1f4:	ldr	x1, [x19, #320]
    a1f8:	mov	w3, #0x7265                	// #29285
    a1fc:	mov	w2, #0x61                  	// #97
    a200:	mov	x0, #0x3                   	// #3
    a204:	add	x1, x1, #0x1
    a208:	strh	w3, [x19]
    a20c:	strb	w2, [x19, #2]
    a210:	str	x1, [x19, #320]
    a214:	add	x1, x0, #0x1
    a218:	str	x1, [x19, #256]
    a21c:	mov	w2, #0x74                  	// #116
    a220:	strb	w2, [x19, x0]
    a224:	strb	w2, [x19, #264]
    a228:	cmp	x1, #0xff
    a22c:	b.ne	ae08 <d_print_comp_inner+0x6000>  // b.any
    a230:	ldp	x3, x2, [x19, #272]
    a234:	strb	wzr, [x19, #255]
    a238:	mov	x0, x19
    a23c:	blr	x3
    a240:	mov	w1, #0x726f                	// #29295
    a244:	mov	w0, #0x72                  	// #114
    a248:	strh	w1, [x19]
    a24c:	strb	w0, [x19, #264]
    a250:	mov	x0, #0x2                   	// #2
    a254:	ldr	x1, [x19, #320]
    a258:	ldr	x20, [x22, #8]
    a25c:	add	x1, x1, #0x1
    a260:	str	x0, [x19, #256]
    a264:	str	x1, [x19, #320]
    a268:	ldrb	w1, [x20]
    a26c:	sub	w1, w1, #0x61
    a270:	and	w1, w1, #0xff
    a274:	cmp	w1, #0x19
    a278:	b.ls	ae74 <d_print_comp_inner+0x606c>  // b.plast
    a27c:	mov	x1, x0
    a280:	b	71bc <d_print_comp_inner+0x23b4>
    a284:	add	x3, x0, #0x2
    a288:	str	x3, [x19, #256]
    a28c:	mov	w2, #0x61                  	// #97
    a290:	strb	w2, [x19, x1]
    a294:	strb	w2, [x19, #264]
    a298:	cmp	x3, #0xff
    a29c:	b.ne	a7c0 <d_print_comp_inner+0x59b8>  // b.any
    a2a0:	ldp	x4, x2, [x19, #272]
    a2a4:	strb	wzr, [x19, #255]
    a2a8:	mov	x1, x3
    a2ac:	mov	x0, x19
    a2b0:	blr	x4
    a2b4:	ldr	x0, [x19, #320]
    a2b8:	mov	w1, #0x62                  	// #98
    a2bc:	mov	x2, #0x1                   	// #1
    a2c0:	strb	w1, [x19]
    a2c4:	add	x0, x0, x2
    a2c8:	str	x0, [x19, #320]
    a2cc:	b	5c44 <d_print_comp_inner+0xe3c>
    a2d0:	add	x3, x0, #0x2
    a2d4:	str	x3, [x19, #256]
    a2d8:	mov	w2, #0x54                  	// #84
    a2dc:	strb	w2, [x19, x1]
    a2e0:	strb	w2, [x19, #264]
    a2e4:	cmp	x3, #0xff
    a2e8:	b.ne	aab8 <d_print_comp_inner+0x5cb0>  // b.any
    a2ec:	ldp	x4, x2, [x19, #272]
    a2f0:	strb	wzr, [x19, #255]
    a2f4:	mov	x1, x3
    a2f8:	mov	x0, x19
    a2fc:	blr	x4
    a300:	ldr	x1, [x19, #320]
    a304:	mov	w3, #0x2054                	// #8276
    a308:	mov	w2, #0x66                  	// #102
    a30c:	mov	x0, #0x3                   	// #3
    a310:	add	x1, x1, #0x1
    a314:	strh	w3, [x19]
    a318:	strb	w2, [x19, #2]
    a31c:	str	x1, [x19, #320]
    a320:	add	x1, x0, #0x1
    a324:	str	x1, [x19, #256]
    a328:	mov	w2, #0x6f                  	// #111
    a32c:	strb	w2, [x19, x0]
    a330:	strb	w2, [x19, #264]
    a334:	cmp	x1, #0xff
    a338:	b.ne	ab04 <d_print_comp_inner+0x5cfc>  // b.any
    a33c:	ldp	x3, x2, [x19, #272]
    a340:	strb	wzr, [x19, #255]
    a344:	mov	x0, x19
    a348:	blr	x3
    a34c:	ldr	x1, [x19, #320]
    a350:	mov	w2, #0x72                  	// #114
    a354:	mov	x0, #0x1                   	// #1
    a358:	strb	w2, [x19]
    a35c:	add	x1, x1, x0
    a360:	str	x1, [x19, #320]
    a364:	b	6890 <d_print_comp_inner+0x1a88>
    a368:	add	x0, x0, #0x3
    a36c:	str	x0, [x19, #256]
    a370:	mov	w1, #0x6e                  	// #110
    a374:	strb	w1, [x19, x3]
    a378:	strb	w1, [x19, #264]
    a37c:	cmp	x0, #0xff
    a380:	b.ne	a488 <d_print_comp_inner+0x5680>  // b.any
    a384:	ldp	x3, x2, [x19, #272]
    a388:	strb	wzr, [x19, #255]
    a38c:	mov	x1, x0
    a390:	mov	x0, x19
    a394:	blr	x3
    a398:	ldr	x0, [x19, #320]
    a39c:	mov	w3, #0x616e                	// #24942
    a3a0:	mov	w2, #0x6d                  	// #109
    a3a4:	mov	x1, #0x3                   	// #3
    a3a8:	add	x0, x0, #0x1
    a3ac:	strh	w3, [x19]
    a3b0:	strb	w2, [x19, #2]
    a3b4:	str	x0, [x19, #320]
    a3b8:	add	x0, x1, #0x1
    a3bc:	str	x0, [x19, #256]
    a3c0:	mov	w2, #0x65                  	// #101
    a3c4:	strb	w2, [x19, x1]
    a3c8:	strb	w2, [x19, #264]
    a3cc:	cmp	x0, #0xff
    a3d0:	b.ne	a4d4 <d_print_comp_inner+0x56cc>  // b.any
    a3d4:	ldp	x3, x2, [x19, #272]
    a3d8:	strb	wzr, [x19, #255]
    a3dc:	mov	x1, x0
    a3e0:	mov	x0, x19
    a3e4:	blr	x3
    a3e8:	ldr	x0, [x19, #320]
    a3ec:	mov	w3, #0x2064                	// #8292
    a3f0:	mov	w2, #0x74                  	// #116
    a3f4:	mov	x1, #0x3                   	// #3
    a3f8:	add	x0, x0, #0x1
    a3fc:	strh	w3, [x19]
    a400:	strb	w2, [x19, #2]
    a404:	str	x0, [x19, #320]
    a408:	add	x0, x1, #0x1
    a40c:	str	x0, [x19, #256]
    a410:	mov	w2, #0x79                  	// #121
    a414:	strb	w2, [x19, x1]
    a418:	strb	w2, [x19, #264]
    a41c:	cmp	x0, #0xff
    a420:	b.ne	a520 <d_print_comp_inner+0x5718>  // b.any
    a424:	ldp	x3, x2, [x19, #272]
    a428:	strb	wzr, [x19, #255]
    a42c:	mov	x1, x0
    a430:	mov	x0, x19
    a434:	blr	x3
    a438:	ldr	x0, [x19, #320]
    a43c:	mov	w2, #0x70                  	// #112
    a440:	mov	x1, #0x1                   	// #1
    a444:	strb	w2, [x19]
    a448:	add	x0, x0, x1
    a44c:	str	x0, [x19, #320]
    a450:	b	9568 <d_print_comp_inner+0x4760>
    a454:	ldp	x3, x2, [x19, #272]
    a458:	strb	wzr, [x19, #255]
    a45c:	mov	x1, x0
    a460:	mov	x0, x19
    a464:	blr	x3
    a468:	ldr	x1, [x19, #320]
    a46c:	mov	w3, #0x757b                	// #30075
    a470:	mov	w2, #0x6e                  	// #110
    a474:	mov	x0, #0x3                   	// #3
    a478:	add	x1, x1, #0x1
    a47c:	strh	w3, [x19]
    a480:	strb	w2, [x19, #2]
    a484:	str	x1, [x19, #320]
    a488:	add	x1, x0, #0x1
    a48c:	str	x1, [x19, #256]
    a490:	mov	w2, #0x6e                  	// #110
    a494:	strb	w2, [x19, x0]
    a498:	strb	w2, [x19, #264]
    a49c:	cmp	x1, #0xff
    a4a0:	b.ne	604c <d_print_comp_inner+0x1244>  // b.any
    a4a4:	ldp	x3, x2, [x19, #272]
    a4a8:	strb	wzr, [x19, #255]
    a4ac:	mov	x0, x19
    a4b0:	blr	x3
    a4b4:	ldr	x1, [x19, #320]
    a4b8:	mov	w3, #0x6d61                	// #28001
    a4bc:	mov	w2, #0x65                  	// #101
    a4c0:	mov	x0, #0x3                   	// #3
    a4c4:	add	x1, x1, #0x1
    a4c8:	strh	w3, [x19]
    a4cc:	strb	w2, [x19, #2]
    a4d0:	str	x1, [x19, #320]
    a4d4:	add	x1, x0, #0x1
    a4d8:	str	x1, [x19, #256]
    a4dc:	mov	w2, #0x64                  	// #100
    a4e0:	strb	w2, [x19, x0]
    a4e4:	strb	w2, [x19, #264]
    a4e8:	cmp	x1, #0xff
    a4ec:	b.ne	609c <d_print_comp_inner+0x1294>  // b.any
    a4f0:	ldp	x3, x2, [x19, #272]
    a4f4:	strb	wzr, [x19, #255]
    a4f8:	mov	x0, x19
    a4fc:	blr	x3
    a500:	ldr	x1, [x19, #320]
    a504:	mov	w3, #0x7420                	// #29728
    a508:	mov	w2, #0x79                  	// #121
    a50c:	mov	x0, #0x3                   	// #3
    a510:	add	x1, x1, #0x1
    a514:	strh	w3, [x19]
    a518:	strb	w2, [x19, #2]
    a51c:	str	x1, [x19, #320]
    a520:	add	x1, x0, #0x1
    a524:	str	x1, [x19, #256]
    a528:	mov	w2, #0x70                  	// #112
    a52c:	strb	w2, [x19, x0]
    a530:	strb	w2, [x19, #264]
    a534:	cmp	x1, #0xff
    a538:	b.ne	60ec <d_print_comp_inner+0x12e4>  // b.any
    a53c:	ldp	x3, x2, [x19, #272]
    a540:	strb	wzr, [x19, #255]
    a544:	mov	x0, x19
    a548:	blr	x3
    a54c:	ldr	x1, [x19, #320]
    a550:	mov	x0, #0x1                   	// #1
    a554:	mov	w2, #0x65                  	// #101
    a558:	strb	w2, [x19]
    a55c:	add	x1, x1, x0
    a560:	str	x1, [x19, #320]
    a564:	add	x1, x0, #0x1
    a568:	b	6130 <d_print_comp_inner+0x1328>
    a56c:	add	x3, x0, #0x2
    a570:	str	x3, [x19, #256]
    a574:	mov	w2, #0x5b                  	// #91
    a578:	strb	w2, [x19, x1]
    a57c:	strb	w2, [x19, #264]
    a580:	cmp	x3, #0xff
    a584:	b.ne	abc8 <d_print_comp_inner+0x5dc0>  // b.any
    a588:	ldp	x4, x2, [x19, #272]
    a58c:	strb	wzr, [x19, #255]
    a590:	mov	x1, x3
    a594:	mov	x0, x19
    a598:	blr	x4
    a59c:	ldr	x1, [x19, #320]
    a5a0:	mov	w3, #0x6c63                	// #27747
    a5a4:	mov	w2, #0x6f                  	// #111
    a5a8:	mov	x0, #0x3                   	// #3
    a5ac:	add	x1, x1, #0x1
    a5b0:	strh	w3, [x19]
    a5b4:	strb	w2, [x19, #2]
    a5b8:	str	x1, [x19, #320]
    a5bc:	add	x3, x0, #0x1
    a5c0:	str	x3, [x19, #256]
    a5c4:	mov	w1, #0x6e                  	// #110
    a5c8:	strb	w1, [x19, x0]
    a5cc:	strb	w1, [x19, #264]
    a5d0:	cmp	x3, #0xff
    a5d4:	b.ne	ac18 <d_print_comp_inner+0x5e10>  // b.any
    a5d8:	ldp	x4, x2, [x19, #272]
    a5dc:	strb	wzr, [x19, #255]
    a5e0:	mov	x1, x3
    a5e4:	mov	x0, x19
    a5e8:	blr	x4
    a5ec:	ldr	x0, [x19, #320]
    a5f0:	mov	w2, #0x65                  	// #101
    a5f4:	mov	x1, #0x1                   	// #1
    a5f8:	strb	w2, [x19]
    a5fc:	add	x0, x0, x1
    a600:	str	x0, [x19, #320]
    a604:	b	74a8 <d_print_comp_inner+0x26a0>
    a608:	add	x3, x1, #0x2
    a60c:	str	x3, [x19, #256]
    a610:	mov	w2, #0x69                  	// #105
    a614:	strb	w2, [x19, x0]
    a618:	strb	w2, [x19, #264]
    a61c:	cmp	x3, #0xff
    a620:	b.ne	bd64 <d_print_comp_inner+0x6f5c>  // b.any
    a624:	ldp	x4, x2, [x19, #272]
    a628:	strb	wzr, [x19, #255]
    a62c:	mov	x1, x3
    a630:	mov	x0, x19
    a634:	blr	x4
    a638:	ldr	x0, [x19, #320]
    a63c:	mov	w2, #0x6e                  	// #110
    a640:	mov	x1, #0x1                   	// #1
    a644:	strb	w2, [x19]
    a648:	add	x0, x0, x1
    a64c:	str	x0, [x19, #320]
    a650:	b	8674 <d_print_comp_inner+0x386c>
    a654:	ldp	x3, x2, [x19, #272]
    a658:	strb	wzr, [x19, #255]
    a65c:	mov	x1, x0
    a660:	mov	x0, x19
    a664:	blr	x3
    a668:	ldr	x1, [x19, #320]
    a66c:	mov	w3, #0x616a                	// #24938
    a670:	mov	w2, #0x76                  	// #118
    a674:	mov	x0, #0x3                   	// #3
    a678:	add	x1, x1, #0x1
    a67c:	strh	w3, [x19]
    a680:	strb	w2, [x19, #2]
    a684:	str	x1, [x19, #320]
    a688:	add	x3, x0, #0x1
    a68c:	str	x3, [x19, #256]
    a690:	mov	w1, #0x61                  	// #97
    a694:	strb	w1, [x19, x0]
    a698:	strb	w1, [x19, #264]
    a69c:	cmp	x3, #0xff
    a6a0:	b.ne	62c4 <d_print_comp_inner+0x14bc>  // b.any
    a6a4:	ldp	x4, x2, [x19, #272]
    a6a8:	strb	wzr, [x19, #255]
    a6ac:	mov	x1, x3
    a6b0:	mov	x0, x19
    a6b4:	blr	x4
    a6b8:	ldr	x0, [x19, #320]
    a6bc:	mov	w3, #0x4320                	// #17184
    a6c0:	mov	w2, #0x6c                  	// #108
    a6c4:	mov	x1, #0x3                   	// #3
    a6c8:	add	x0, x0, #0x1
    a6cc:	strh	w3, [x19]
    a6d0:	strb	w2, [x19, #2]
    a6d4:	str	x0, [x19, #320]
    a6d8:	add	x0, x1, #0x1
    a6dc:	str	x0, [x19, #256]
    a6e0:	mov	w2, #0x61                  	// #97
    a6e4:	strb	w2, [x19, x1]
    a6e8:	strb	w2, [x19, #264]
    a6ec:	cmp	x0, #0xff
    a6f0:	b.ne	6310 <d_print_comp_inner+0x1508>  // b.any
    a6f4:	ldp	x3, x2, [x19, #272]
    a6f8:	strb	wzr, [x19, #255]
    a6fc:	mov	x1, x0
    a700:	mov	x0, x19
    a704:	blr	x3
    a708:	ldr	x0, [x19, #320]
    a70c:	mov	w3, #0x7373                	// #29555
    a710:	mov	w2, #0x20                  	// #32
    a714:	mov	x1, #0x3                   	// #3
    a718:	add	x0, x0, #0x1
    a71c:	strh	w3, [x19]
    a720:	strb	w2, [x19, #2]
    a724:	str	x0, [x19, #320]
    a728:	add	x0, x1, #0x1
    a72c:	str	x0, [x19, #256]
    a730:	mov	w2, #0x66                  	// #102
    a734:	strb	w2, [x19, x1]
    a738:	strb	w2, [x19, #264]
    a73c:	cmp	x0, #0xff
    a740:	b.ne	635c <d_print_comp_inner+0x1554>  // b.any
    a744:	ldp	x3, x2, [x19, #272]
    a748:	strb	wzr, [x19, #255]
    a74c:	mov	x1, x0
    a750:	mov	x0, x19
    a754:	blr	x3
    a758:	ldr	x0, [x19, #320]
    a75c:	mov	w2, #0x6f                  	// #111
    a760:	mov	x1, #0x1                   	// #1
    a764:	strb	w2, [x19]
    a768:	add	x0, x0, x1
    a76c:	str	x0, [x19, #320]
    a770:	b	9f3c <d_print_comp_inner+0x5134>
    a774:	add	x0, x1, #0x3
    a778:	str	x0, [x19, #256]
    a77c:	mov	w1, #0x6f                  	// #111
    a780:	strb	w1, [x19, x3]
    a784:	strb	w1, [x19, #264]
    a788:	cmp	x0, #0xff
    a78c:	b.ne	b860 <d_print_comp_inner+0x6a58>  // b.any
    a790:	ldp	x3, x2, [x19, #272]
    a794:	strb	wzr, [x19, #255]
    a798:	mov	x1, x0
    a79c:	mov	x0, x19
    a7a0:	blr	x3
    a7a4:	ldr	x0, [x19, #320]
    a7a8:	mov	w2, #0x72                  	// #114
    a7ac:	mov	x1, #0x1                   	// #1
    a7b0:	strb	w2, [x19]
    a7b4:	add	x0, x0, x1
    a7b8:	str	x0, [x19, #320]
    a7bc:	b	8d5c <d_print_comp_inner+0x3f54>
    a7c0:	add	x0, x0, #0x3
    a7c4:	str	x0, [x19, #256]
    a7c8:	mov	w1, #0x62                  	// #98
    a7cc:	strb	w1, [x19, x3]
    a7d0:	strb	w1, [x19, #264]
    a7d4:	cmp	x0, #0xff
    a7d8:	b.ne	bbf4 <d_print_comp_inner+0x6dec>  // b.any
    a7dc:	ldp	x3, x2, [x19, #272]
    a7e0:	strb	wzr, [x19, #255]
    a7e4:	mov	x1, x0
    a7e8:	mov	x0, x19
    a7ec:	blr	x3
    a7f0:	ldr	x0, [x19, #320]
    a7f4:	mov	w2, #0x69                  	// #105
    a7f8:	mov	x1, #0x1                   	// #1
    a7fc:	strb	w2, [x19]
    a800:	add	x0, x0, x1
    a804:	str	x0, [x19, #320]
    a808:	b	5c50 <d_print_comp_inner+0xe48>
    a80c:	ldp	x3, x2, [x19, #272]
    a810:	strb	wzr, [x19, #255]
    a814:	mov	x1, x0
    a818:	mov	x0, x19
    a81c:	blr	x3
    a820:	ldr	x1, [x19, #320]
    a824:	mov	w3, #0x7476                	// #29814
    a828:	mov	w2, #0x61                  	// #97
    a82c:	mov	x0, #0x3                   	// #3
    a830:	add	x1, x1, #0x1
    a834:	strh	w3, [x19]
    a838:	strb	w2, [x19, #2]
    a83c:	str	x1, [x19, #320]
    a840:	add	x3, x0, #0x1
    a844:	str	x3, [x19, #256]
    a848:	mov	w1, #0x62                  	// #98
    a84c:	strb	w1, [x19, x0]
    a850:	strb	w1, [x19, #264]
    a854:	cmp	x3, #0xff
    a858:	b.ne	7d50 <d_print_comp_inner+0x2f48>  // b.any
    a85c:	ldp	x4, x2, [x19, #272]
    a860:	strb	wzr, [x19, #255]
    a864:	mov	x1, x3
    a868:	mov	x0, x19
    a86c:	blr	x4
    a870:	ldr	x0, [x19, #320]
    a874:	mov	w3, #0x656c                	// #25964
    a878:	mov	w2, #0x20                  	// #32
    a87c:	mov	x1, #0x3                   	// #3
    a880:	add	x0, x0, #0x1
    a884:	strh	w3, [x19]
    a888:	strb	w2, [x19, #2]
    a88c:	str	x0, [x19, #320]
    a890:	add	x0, x1, #0x1
    a894:	str	x0, [x19, #256]
    a898:	mov	w2, #0x66                  	// #102
    a89c:	strb	w2, [x19, x1]
    a8a0:	strb	w2, [x19, #264]
    a8a4:	cmp	x0, #0xff
    a8a8:	b.ne	7d9c <d_print_comp_inner+0x2f94>  // b.any
    a8ac:	ldp	x3, x2, [x19, #272]
    a8b0:	strb	wzr, [x19, #255]
    a8b4:	mov	x1, x0
    a8b8:	mov	x0, x19
    a8bc:	blr	x3
    a8c0:	ldr	x0, [x19, #320]
    a8c4:	mov	w2, #0x6f                  	// #111
    a8c8:	mov	x1, #0x1                   	// #1
    a8cc:	strb	w2, [x19]
    a8d0:	add	x0, x0, x1
    a8d4:	str	x0, [x19, #320]
    a8d8:	b	a0c8 <d_print_comp_inner+0x52c0>
    a8dc:	add	x3, x0, #0x2
    a8e0:	str	x3, [x19, #256]
    a8e4:	mov	w2, #0x70                  	// #112
    a8e8:	strb	w2, [x19, x1]
    a8ec:	strb	w2, [x19, #264]
    a8f0:	cmp	x3, #0xff
    a8f4:	b.ne	aef8 <d_print_comp_inner+0x60f0>  // b.any
    a8f8:	ldp	x4, x2, [x19, #272]
    a8fc:	strb	wzr, [x19, #255]
    a900:	mov	x1, x3
    a904:	mov	x0, x19
    a908:	blr	x4
    a90c:	ldr	x0, [x19, #320]
    a910:	mov	w3, #0x7265                	// #29285
    a914:	mov	w2, #0x61                  	// #97
    a918:	mov	x1, #0x3                   	// #3
    a91c:	add	x0, x0, #0x1
    a920:	strh	w3, [x19]
    a924:	strb	w2, [x19, #2]
    a928:	str	x0, [x19, #320]
    a92c:	add	x0, x1, #0x1
    a930:	str	x0, [x19, #256]
    a934:	mov	w2, #0x74                  	// #116
    a938:	strb	w2, [x19, x1]
    a93c:	strb	w2, [x19, #264]
    a940:	cmp	x0, #0xff
    a944:	b.ne	af48 <d_print_comp_inner+0x6140>  // b.any
    a948:	ldp	x3, x2, [x19, #272]
    a94c:	strb	wzr, [x19, #255]
    a950:	mov	x1, x0
    a954:	mov	x0, x19
    a958:	blr	x3
    a95c:	ldr	x0, [x19, #320]
    a960:	mov	w2, #0x6f                  	// #111
    a964:	mov	x1, #0x1                   	// #1
    a968:	strb	w2, [x19]
    a96c:	add	x0, x0, x1
    a970:	str	x0, [x19, #320]
    a974:	b	54f8 <d_print_comp_inner+0x6f0>
    a978:	add	x0, x0, #0x3
    a97c:	str	x0, [x19, #256]
    a980:	mov	w1, #0x65                  	// #101
    a984:	strb	w1, [x19, x3]
    a988:	strb	w1, [x19, #264]
    a98c:	cmp	x0, #0xff
    a990:	b.ne	b558 <d_print_comp_inner+0x6750>  // b.any
    a994:	ldp	x3, x2, [x19, #272]
    a998:	strb	wzr, [x19, #255]
    a99c:	mov	x1, x0
    a9a0:	mov	x0, x19
    a9a4:	blr	x3
    a9a8:	ldr	x1, [x19, #320]
    a9ac:	mov	w3, #0x6172                	// #24946
    a9b0:	mov	w2, #0x74                  	// #116
    a9b4:	mov	x0, #0x3                   	// #3
    a9b8:	add	x1, x1, #0x1
    a9bc:	strh	w3, [x19]
    a9c0:	strb	w2, [x19, #2]
    a9c4:	str	x1, [x19, #320]
    a9c8:	add	x1, x0, #0x1
    a9cc:	str	x1, [x19, #256]
    a9d0:	mov	w2, #0x6f                  	// #111
    a9d4:	strb	w2, [x19, x0]
    a9d8:	strb	w2, [x19, #264]
    a9dc:	cmp	x1, #0xff
    a9e0:	b.ne	b5a8 <d_print_comp_inner+0x67a0>  // b.any
    a9e4:	ldp	x3, x2, [x19, #272]
    a9e8:	strb	wzr, [x19, #255]
    a9ec:	mov	x0, x19
    a9f0:	blr	x3
    a9f4:	ldr	x1, [x19, #320]
    a9f8:	mov	w2, #0x72                  	// #114
    a9fc:	mov	x0, #0x1                   	// #1
    aa00:	strb	w2, [x19]
    aa04:	add	x1, x1, x0
    aa08:	str	x1, [x19, #320]
    aa0c:	b	72fc <d_print_comp_inner+0x24f4>
    aa10:	add	x3, x0, #0x2
    aa14:	str	x3, [x19, #256]
    aa18:	mov	w2, #0x65                  	// #101
    aa1c:	strb	w2, [x19, x1]
    aa20:	strb	w2, [x19, #264]
    aa24:	cmp	x3, #0xff
    aa28:	b.ne	b260 <d_print_comp_inner+0x6458>  // b.any
    aa2c:	ldp	x4, x2, [x19, #272]
    aa30:	strb	wzr, [x19, #255]
    aa34:	mov	x1, x3
    aa38:	mov	x0, x19
    aa3c:	blr	x4
    aa40:	ldr	x1, [x19, #320]
    aa44:	mov	w3, #0x6c63                	// #27747
    aa48:	mov	w2, #0x74                  	// #116
    aa4c:	mov	x0, #0x3                   	// #3
    aa50:	add	x1, x1, #0x1
    aa54:	strh	w3, [x19]
    aa58:	strb	w2, [x19, #2]
    aa5c:	str	x1, [x19, #320]
    aa60:	add	x1, x0, #0x1
    aa64:	str	x1, [x19, #256]
    aa68:	mov	w2, #0x79                  	// #121
    aa6c:	strb	w2, [x19, x0]
    aa70:	strb	w2, [x19, #264]
    aa74:	cmp	x1, #0xff
    aa78:	b.ne	b2b0 <d_print_comp_inner+0x64a8>  // b.any
    aa7c:	ldp	x3, x2, [x19, #272]
    aa80:	strb	wzr, [x19, #255]
    aa84:	mov	x0, x19
    aa88:	blr	x3
    aa8c:	ldr	x0, [x19, #320]
    aa90:	mov	w1, #0x6570                	// #25968
    aa94:	mov	x2, #0x2                   	// #2
    aa98:	strh	w1, [x19]
    aa9c:	add	x0, x0, #0x1
    aaa0:	str	x0, [x19, #320]
    aaa4:	mov	w0, #0x20                  	// #32
    aaa8:	add	x1, x2, #0x1
    aaac:	strb	w0, [x19, x2]
    aab0:	add	x0, x1, #0x1
    aab4:	b	7adc <d_print_comp_inner+0x2cd4>
    aab8:	add	x0, x0, #0x3
    aabc:	str	x0, [x19, #256]
    aac0:	strb	w2, [x19, x3]
    aac4:	cmp	x0, #0xff
    aac8:	strb	w2, [x19, #264]
    aacc:	b.ne	ab80 <d_print_comp_inner+0x5d78>  // b.any
    aad0:	ldp	x3, x2, [x19, #272]
    aad4:	strb	wzr, [x19, #255]
    aad8:	mov	x1, x0
    aadc:	mov	x0, x19
    aae0:	blr	x3
    aae4:	ldr	x0, [x19, #320]
    aae8:	mov	w3, #0x6620                	// #26144
    aaec:	mov	w2, #0x6f                  	// #111
    aaf0:	mov	x1, #0x3                   	// #3
    aaf4:	add	x0, x0, #0x1
    aaf8:	strh	w3, [x19]
    aafc:	strb	w2, [x19, #2]
    ab00:	str	x0, [x19, #320]
    ab04:	add	x0, x1, #0x1
    ab08:	str	x0, [x19, #256]
    ab0c:	mov	w2, #0x72                  	// #114
    ab10:	strb	w2, [x19, x1]
    ab14:	strb	w2, [x19, #264]
    ab18:	cmp	x0, #0xff
    ab1c:	b.ne	6890 <d_print_comp_inner+0x1a88>  // b.any
    ab20:	ldp	x3, x2, [x19, #272]
    ab24:	strb	wzr, [x19, #255]
    ab28:	mov	x1, x0
    ab2c:	mov	x0, x19
    ab30:	blr	x3
    ab34:	ldr	x2, [x19, #320]
    ab38:	mov	x1, #0x1                   	// #1
    ab3c:	mov	x0, #0x0                   	// #0
    ab40:	add	x2, x2, x1
    ab44:	str	x2, [x19, #320]
    ab48:	b	6894 <d_print_comp_inner+0x1a8c>
    ab4c:	ldp	x3, x2, [x19, #272]
    ab50:	strb	wzr, [x19, #255]
    ab54:	mov	x1, x0
    ab58:	mov	x0, x19
    ab5c:	blr	x3
    ab60:	ldr	x1, [x19, #320]
    ab64:	mov	w3, #0x5456                	// #21590
    ab68:	mov	w2, #0x54                  	// #84
    ab6c:	mov	x0, #0x3                   	// #3
    ab70:	add	x1, x1, #0x1
    ab74:	strh	w3, [x19]
    ab78:	strb	w2, [x19, #2]
    ab7c:	str	x1, [x19, #320]
    ab80:	add	x1, x0, #0x1
    ab84:	str	x1, [x19, #256]
    ab88:	mov	w2, #0x20                  	// #32
    ab8c:	strb	w2, [x19, x0]
    ab90:	strb	w2, [x19, #264]
    ab94:	cmp	x1, #0xff
    ab98:	b.ne	683c <d_print_comp_inner+0x1a34>  // b.any
    ab9c:	ldp	x3, x2, [x19, #272]
    aba0:	strb	wzr, [x19, #255]
    aba4:	mov	x0, x19
    aba8:	blr	x3
    abac:	ldr	x0, [x19, #320]
    abb0:	mov	w2, #0x6f66                	// #28518
    abb4:	mov	x1, #0x2                   	// #2
    abb8:	strh	w2, [x19]
    abbc:	add	x0, x0, #0x1
    abc0:	str	x0, [x19, #320]
    abc4:	b	6884 <d_print_comp_inner+0x1a7c>
    abc8:	add	x0, x0, #0x3
    abcc:	str	x0, [x19, #256]
    abd0:	mov	w1, #0x63                  	// #99
    abd4:	strb	w1, [x19, x3]
    abd8:	strb	w1, [x19, #264]
    abdc:	cmp	x0, #0xff
    abe0:	b.ne	ac90 <d_print_comp_inner+0x5e88>  // b.any
    abe4:	ldp	x3, x2, [x19, #272]
    abe8:	strb	wzr, [x19, #255]
    abec:	mov	x1, x0
    abf0:	mov	x0, x19
    abf4:	blr	x3
    abf8:	ldr	x0, [x19, #320]
    abfc:	mov	w2, #0x6f6c                	// #28524
    ac00:	mov	w1, #0x6e                  	// #110
    ac04:	mov	x3, #0x3                   	// #3
    ac08:	add	x0, x0, #0x1
    ac0c:	strh	w2, [x19]
    ac10:	strb	w1, [x19, #2]
    ac14:	str	x0, [x19, #320]
    ac18:	add	x1, x3, #0x1
    ac1c:	str	x1, [x19, #256]
    ac20:	mov	w0, #0x65                  	// #101
    ac24:	strb	w0, [x19, x3]
    ac28:	strb	w0, [x19, #264]
    ac2c:	cmp	x1, #0xff
    ac30:	b.ne	74a8 <d_print_comp_inner+0x26a0>  // b.any
    ac34:	ldp	x3, x2, [x19, #272]
    ac38:	strb	wzr, [x19, #255]
    ac3c:	mov	x0, x19
    ac40:	blr	x3
    ac44:	ldr	x2, [x19, #320]
    ac48:	mov	x0, #0x1                   	// #1
    ac4c:	mov	x1, #0x0                   	// #0
    ac50:	add	x2, x2, x0
    ac54:	str	x2, [x19, #320]
    ac58:	b	74ac <d_print_comp_inner+0x26a4>
    ac5c:	ldp	x3, x2, [x19, #272]
    ac60:	strb	wzr, [x19, #255]
    ac64:	mov	x1, x0
    ac68:	mov	x0, x19
    ac6c:	blr	x3
    ac70:	ldr	x1, [x19, #320]
    ac74:	mov	w3, #0x5b20                	// #23328
    ac78:	mov	w2, #0x63                  	// #99
    ac7c:	mov	x0, #0x3                   	// #3
    ac80:	add	x1, x1, #0x1
    ac84:	strh	w3, [x19]
    ac88:	strb	w2, [x19, #2]
    ac8c:	str	x1, [x19, #320]
    ac90:	add	x1, x0, #0x1
    ac94:	str	x1, [x19, #256]
    ac98:	mov	w2, #0x6c                  	// #108
    ac9c:	strb	w2, [x19, x0]
    aca0:	strb	w2, [x19, #264]
    aca4:	cmp	x1, #0xff
    aca8:	b.ne	7454 <d_print_comp_inner+0x264c>  // b.any
    acac:	ldp	x3, x2, [x19, #272]
    acb0:	strb	wzr, [x19, #255]
    acb4:	mov	x0, x19
    acb8:	blr	x3
    acbc:	ldr	x0, [x19, #320]
    acc0:	mov	w1, #0x6e6f                	// #28271
    acc4:	mov	x2, #0x2                   	// #2
    acc8:	strh	w1, [x19]
    accc:	add	x0, x0, #0x1
    acd0:	str	x0, [x19, #320]
    acd4:	b	749c <d_print_comp_inner+0x2694>
    acd8:	add	x0, x0, #0x3
    acdc:	str	x0, [x19, #256]
    ace0:	mov	w1, #0x70                  	// #112
    ace4:	strb	w1, [x19, x3]
    ace8:	strb	w1, [x19, #264]
    acec:	cmp	x0, #0xff
    acf0:	b.ne	b440 <d_print_comp_inner+0x6638>  // b.any
    acf4:	ldp	x3, x2, [x19, #272]
    acf8:	strb	wzr, [x19, #255]
    acfc:	mov	x1, x0
    ad00:	mov	x0, x19
    ad04:	blr	x3
    ad08:	ldr	x1, [x19, #320]
    ad0c:	mov	w3, #0x6965                	// #26981
    ad10:	mov	w2, #0x6e                  	// #110
    ad14:	mov	x0, #0x3                   	// #3
    ad18:	add	x1, x1, #0x1
    ad1c:	strh	w3, [x19]
    ad20:	strb	w2, [x19, #2]
    ad24:	str	x1, [x19, #320]
    ad28:	add	x1, x0, #0x1
    ad2c:	str	x1, [x19, #256]
    ad30:	mov	w20, #0x66                  	// #102
    ad34:	strb	w20, [x19, x0]
    ad38:	strb	w20, [x19, #264]
    ad3c:	cmp	x1, #0xff
    ad40:	b.ne	b490 <d_print_comp_inner+0x6688>  // b.any
    ad44:	ldp	x3, x2, [x19, #272]
    ad48:	strb	wzr, [x19, #255]
    ad4c:	mov	x0, x19
    ad50:	blr	x3
    ad54:	strb	w20, [x19, #2]
    ad58:	ldr	x1, [x19, #320]
    ad5c:	mov	w2, #0x206f                	// #8303
    ad60:	mov	x0, #0x3                   	// #3
    ad64:	strh	w2, [x19]
    ad68:	add	x1, x1, #0x1
    ad6c:	str	x1, [x19, #320]
    ad70:	add	x1, x0, #0x1
    ad74:	str	x1, [x19, #256]
    ad78:	mov	w2, #0x6f                  	// #111
    ad7c:	strb	w2, [x19, x0]
    ad80:	strb	w2, [x19, #264]
    ad84:	cmp	x1, #0xff
    ad88:	b.ne	b4dc <d_print_comp_inner+0x66d4>  // b.any
    ad8c:	ldp	x3, x2, [x19, #272]
    ad90:	strb	wzr, [x19, #255]
    ad94:	mov	x0, x19
    ad98:	blr	x3
    ad9c:	ldr	x1, [x19, #320]
    ada0:	mov	w2, #0x72                  	// #114
    ada4:	mov	x0, #0x1                   	// #1
    ada8:	strb	w2, [x19]
    adac:	add	x1, x1, x0
    adb0:	str	x1, [x19, #320]
    adb4:	b	7f64 <d_print_comp_inner+0x315c>
    adb8:	add	x0, x0, #0x3
    adbc:	str	x0, [x19, #256]
    adc0:	mov	w1, #0x65                  	// #101
    adc4:	strb	w1, [x19, x3]
    adc8:	strb	w1, [x19, #264]
    adcc:	cmp	x0, #0xff
    add0:	b.ne	aeb0 <d_print_comp_inner+0x60a8>  // b.any
    add4:	ldp	x3, x2, [x19, #272]
    add8:	strb	wzr, [x19, #255]
    addc:	mov	x1, x0
    ade0:	mov	x0, x19
    ade4:	blr	x3
    ade8:	ldr	x0, [x19, #320]
    adec:	mov	w3, #0x6172                	// #24946
    adf0:	mov	w2, #0x74                  	// #116
    adf4:	mov	x1, #0x3                   	// #3
    adf8:	add	x0, x0, #0x1
    adfc:	strh	w3, [x19]
    ae00:	strb	w2, [x19, #2]
    ae04:	str	x0, [x19, #320]
    ae08:	add	x0, x1, #0x1
    ae0c:	str	x0, [x19, #256]
    ae10:	mov	w2, #0x6f                  	// #111
    ae14:	strb	w2, [x19, x1]
    ae18:	strb	w2, [x19, #264]
    ae1c:	cmp	x0, #0xff
    ae20:	b.ne	7150 <d_print_comp_inner+0x2348>  // b.any
    ae24:	ldp	x3, x2, [x19, #272]
    ae28:	strb	wzr, [x19, #255]
    ae2c:	mov	x1, x0
    ae30:	mov	x0, x19
    ae34:	blr	x3
    ae38:	mov	w0, #0x72                  	// #114
    ae3c:	strb	w0, [x19]
    ae40:	strb	w0, [x19, #264]
    ae44:	mov	x1, #0x1                   	// #1
    ae48:	ldr	x2, [x19, #320]
    ae4c:	mov	x0, x1
    ae50:	ldr	x20, [x22, #8]
    ae54:	add	x2, x2, x1
    ae58:	str	x1, [x19, #256]
    ae5c:	str	x2, [x19, #320]
    ae60:	ldrb	w2, [x20]
    ae64:	sub	w2, w2, #0x61
    ae68:	and	w2, w2, #0xff
    ae6c:	cmp	w2, #0x19
    ae70:	b.hi	71bc <d_print_comp_inner+0x23b4>  // b.pmore
    ae74:	add	x1, x0, #0x1
    ae78:	b	71ac <d_print_comp_inner+0x23a4>
    ae7c:	ldp	x3, x2, [x19, #272]
    ae80:	strb	wzr, [x19, #255]
    ae84:	mov	x1, x0
    ae88:	mov	x0, x19
    ae8c:	blr	x3
    ae90:	ldr	x1, [x19, #320]
    ae94:	mov	w3, #0x706f                	// #28783
    ae98:	mov	w2, #0x65                  	// #101
    ae9c:	mov	x0, #0x3                   	// #3
    aea0:	add	x1, x1, #0x1
    aea4:	strh	w3, [x19]
    aea8:	strb	w2, [x19, #2]
    aeac:	str	x1, [x19, #320]
    aeb0:	add	x1, x0, #0x1
    aeb4:	str	x1, [x19, #256]
    aeb8:	mov	w2, #0x72                  	// #114
    aebc:	strb	w2, [x19, x0]
    aec0:	strb	w2, [x19, #264]
    aec4:	cmp	x1, #0xff
    aec8:	b.ne	70fc <d_print_comp_inner+0x22f4>  // b.any
    aecc:	ldp	x3, x2, [x19, #272]
    aed0:	strb	wzr, [x19, #255]
    aed4:	mov	x0, x19
    aed8:	blr	x3
    aedc:	ldr	x0, [x19, #320]
    aee0:	mov	w2, #0x7461                	// #29793
    aee4:	mov	x1, #0x2                   	// #2
    aee8:	strh	w2, [x19]
    aeec:	add	x0, x0, #0x1
    aef0:	str	x0, [x19, #320]
    aef4:	b	7144 <d_print_comp_inner+0x233c>
    aef8:	add	x0, x0, #0x3
    aefc:	str	x0, [x19, #256]
    af00:	mov	w1, #0x65                  	// #101
    af04:	strb	w1, [x19, x3]
    af08:	strb	w1, [x19, #264]
    af0c:	cmp	x0, #0xff
    af10:	b.ne	afc4 <d_print_comp_inner+0x61bc>  // b.any
    af14:	ldp	x3, x2, [x19, #272]
    af18:	strb	wzr, [x19, #255]
    af1c:	mov	x1, x0
    af20:	mov	x0, x19
    af24:	blr	x3
    af28:	ldr	x1, [x19, #320]
    af2c:	mov	w3, #0x6172                	// #24946
    af30:	mov	w2, #0x74                  	// #116
    af34:	mov	x0, #0x3                   	// #3
    af38:	add	x1, x1, #0x1
    af3c:	strh	w3, [x19]
    af40:	strb	w2, [x19, #2]
    af44:	str	x1, [x19, #320]
    af48:	add	x1, x0, #0x1
    af4c:	str	x1, [x19, #256]
    af50:	mov	w2, #0x6f                  	// #111
    af54:	strb	w2, [x19, x0]
    af58:	strb	w2, [x19, #264]
    af5c:	cmp	x1, #0xff
    af60:	b.ne	b014 <d_print_comp_inner+0x620c>  // b.any
    af64:	ldp	x3, x2, [x19, #272]
    af68:	strb	wzr, [x19, #255]
    af6c:	mov	x0, x19
    af70:	blr	x3
    af74:	ldr	x1, [x19, #320]
    af78:	mov	w2, #0x72                  	// #114
    af7c:	mov	x0, #0x1                   	// #1
    af80:	strb	w2, [x19]
    af84:	add	x1, x1, x0
    af88:	str	x1, [x19, #320]
    af8c:	b	5504 <d_print_comp_inner+0x6fc>
    af90:	ldp	x3, x2, [x19, #272]
    af94:	strb	wzr, [x19, #255]
    af98:	mov	x1, x0
    af9c:	mov	x0, x19
    afa0:	blr	x3
    afa4:	ldr	x1, [x19, #320]
    afa8:	mov	w3, #0x706f                	// #28783
    afac:	mov	w2, #0x65                  	// #101
    afb0:	mov	x0, #0x3                   	// #3
    afb4:	add	x1, x1, #0x1
    afb8:	strh	w3, [x19]
    afbc:	strb	w2, [x19, #2]
    afc0:	str	x1, [x19, #320]
    afc4:	add	x3, x0, #0x1
    afc8:	str	x3, [x19, #256]
    afcc:	mov	w1, #0x72                  	// #114
    afd0:	strb	w1, [x19, x0]
    afd4:	strb	w1, [x19, #264]
    afd8:	cmp	x3, #0xff
    afdc:	b.ne	54b4 <d_print_comp_inner+0x6ac>  // b.any
    afe0:	ldp	x4, x2, [x19, #272]
    afe4:	strb	wzr, [x19, #255]
    afe8:	mov	x1, x3
    afec:	mov	x0, x19
    aff0:	blr	x4
    aff4:	ldr	x0, [x19, #320]
    aff8:	mov	w3, #0x7461                	// #29793
    affc:	mov	w2, #0x6f                  	// #111
    b000:	mov	x1, #0x3                   	// #3
    b004:	add	x0, x0, #0x1
    b008:	strh	w3, [x19]
    b00c:	strb	w2, [x19, #2]
    b010:	str	x0, [x19, #320]
    b014:	add	x0, x1, #0x1
    b018:	str	x0, [x19, #256]
    b01c:	mov	w2, #0x72                  	// #114
    b020:	strb	w2, [x19, x1]
    b024:	strb	w2, [x19, #264]
    b028:	cmp	x0, #0xff
    b02c:	b.ne	5504 <d_print_comp_inner+0x6fc>  // b.any
    b030:	ldp	x3, x2, [x19, #272]
    b034:	strb	wzr, [x19, #255]
    b038:	mov	x1, x0
    b03c:	mov	x0, x19
    b040:	blr	x3
    b044:	ldr	x1, [x19, #320]
    b048:	mov	x3, #0x1                   	// #1
    b04c:	mov	x0, #0x0                   	// #0
    b050:	add	x1, x1, x3
    b054:	str	x1, [x19, #320]
    b058:	b	5508 <d_print_comp_inner+0x700>
    b05c:	add	x0, x0, #0x3
    b060:	str	x0, [x19, #256]
    b064:	mov	w1, #0x76                  	// #118
    b068:	strb	w1, [x19, x3]
    b06c:	strb	w1, [x19, #264]
    b070:	cmp	x0, #0xff
    b074:	b.ne	b17c <d_print_comp_inner+0x6374>  // b.any
    b078:	ldp	x3, x2, [x19, #272]
    b07c:	strb	wzr, [x19, #255]
    b080:	mov	x1, x0
    b084:	mov	x0, x19
    b088:	blr	x3
    b08c:	ldr	x0, [x19, #320]
    b090:	mov	w3, #0x2061                	// #8289
    b094:	mov	w2, #0x72                  	// #114
    b098:	mov	x1, #0x3                   	// #3
    b09c:	add	x0, x0, #0x1
    b0a0:	strh	w3, [x19]
    b0a4:	strb	w2, [x19, #2]
    b0a8:	str	x0, [x19, #320]
    b0ac:	add	x0, x1, #0x1
    b0b0:	str	x0, [x19, #256]
    b0b4:	mov	w2, #0x65                  	// #101
    b0b8:	strb	w2, [x19, x1]
    b0bc:	strb	w2, [x19, #264]
    b0c0:	cmp	x0, #0xff
    b0c4:	b.ne	b1c8 <d_print_comp_inner+0x63c0>  // b.any
    b0c8:	ldp	x3, x2, [x19, #272]
    b0cc:	strb	wzr, [x19, #255]
    b0d0:	mov	x1, x0
    b0d4:	mov	x0, x19
    b0d8:	blr	x3
    b0dc:	ldr	x0, [x19, #320]
    b0e0:	mov	w3, #0x6f73                	// #28531
    b0e4:	mov	w2, #0x75                  	// #117
    b0e8:	mov	x1, #0x3                   	// #3
    b0ec:	add	x0, x0, #0x1
    b0f0:	strh	w3, [x19]
    b0f4:	strb	w2, [x19, #2]
    b0f8:	str	x0, [x19, #320]
    b0fc:	add	x0, x1, #0x1
    b100:	str	x0, [x19, #256]
    b104:	mov	w2, #0x72                  	// #114
    b108:	strb	w2, [x19, x1]
    b10c:	strb	w2, [x19, #264]
    b110:	cmp	x0, #0xff
    b114:	b.ne	b214 <d_print_comp_inner+0x640c>  // b.any
    b118:	ldp	x3, x2, [x19, #272]
    b11c:	strb	wzr, [x19, #255]
    b120:	mov	x1, x0
    b124:	mov	x0, x19
    b128:	blr	x3
    b12c:	ldr	x0, [x19, #320]
    b130:	mov	w2, #0x63                  	// #99
    b134:	mov	x1, #0x1                   	// #1
    b138:	strb	w2, [x19]
    b13c:	add	x0, x0, x1
    b140:	str	x0, [x19, #320]
    b144:	b	965c <d_print_comp_inner+0x4854>
    b148:	ldp	x3, x2, [x19, #272]
    b14c:	strb	wzr, [x19, #255]
    b150:	mov	x1, x0
    b154:	mov	x0, x19
    b158:	blr	x3
    b15c:	ldr	x1, [x19, #320]
    b160:	mov	w3, #0x616a                	// #24938
    b164:	mov	w2, #0x76                  	// #118
    b168:	mov	x0, #0x3                   	// #3
    b16c:	add	x1, x1, #0x1
    b170:	strh	w3, [x19]
    b174:	strb	w2, [x19, #2]
    b178:	str	x1, [x19, #320]
    b17c:	add	x1, x0, #0x1
    b180:	str	x1, [x19, #256]
    b184:	mov	w2, #0x61                  	// #97
    b188:	strb	w2, [x19, x0]
    b18c:	strb	w2, [x19, #264]
    b190:	cmp	x1, #0xff
    b194:	b.ne	69c8 <d_print_comp_inner+0x1bc0>  // b.any
    b198:	ldp	x3, x2, [x19, #272]
    b19c:	strb	wzr, [x19, #255]
    b1a0:	mov	x0, x19
    b1a4:	blr	x3
    b1a8:	ldr	x1, [x19, #320]
    b1ac:	mov	w3, #0x7220                	// #29216
    b1b0:	mov	w2, #0x65                  	// #101
    b1b4:	mov	x0, #0x3                   	// #3
    b1b8:	add	x1, x1, #0x1
    b1bc:	strh	w3, [x19]
    b1c0:	strb	w2, [x19, #2]
    b1c4:	str	x1, [x19, #320]
    b1c8:	add	x1, x0, #0x1
    b1cc:	str	x1, [x19, #256]
    b1d0:	mov	w2, #0x73                  	// #115
    b1d4:	strb	w2, [x19, x0]
    b1d8:	strb	w2, [x19, #264]
    b1dc:	cmp	x1, #0xff
    b1e0:	b.ne	6a18 <d_print_comp_inner+0x1c10>  // b.any
    b1e4:	ldp	x3, x2, [x19, #272]
    b1e8:	strb	wzr, [x19, #255]
    b1ec:	mov	x0, x19
    b1f0:	blr	x3
    b1f4:	ldr	x1, [x19, #320]
    b1f8:	mov	w3, #0x756f                	// #30063
    b1fc:	mov	w2, #0x72                  	// #114
    b200:	mov	x0, #0x3                   	// #3
    b204:	add	x1, x1, #0x1
    b208:	strh	w3, [x19]
    b20c:	strb	w2, [x19, #2]
    b210:	str	x1, [x19, #320]
    b214:	add	x1, x0, #0x1
    b218:	str	x1, [x19, #256]
    b21c:	mov	w2, #0x63                  	// #99
    b220:	strb	w2, [x19, x0]
    b224:	strb	w2, [x19, #264]
    b228:	cmp	x1, #0xff
    b22c:	b.ne	6a68 <d_print_comp_inner+0x1c60>  // b.any
    b230:	ldp	x3, x2, [x19, #272]
    b234:	strb	wzr, [x19, #255]
    b238:	mov	x0, x19
    b23c:	blr	x3
    b240:	ldr	x1, [x19, #320]
    b244:	mov	x0, #0x1                   	// #1
    b248:	mov	w2, #0x65                  	// #101
    b24c:	strb	w2, [x19]
    b250:	add	x1, x1, x0
    b254:	str	x1, [x19, #320]
    b258:	add	x1, x0, #0x1
    b25c:	b	6aac <d_print_comp_inner+0x1ca4>
    b260:	add	x0, x0, #0x3
    b264:	str	x0, [x19, #256]
    b268:	mov	w1, #0x63                  	// #99
    b26c:	strb	w1, [x19, x3]
    b270:	strb	w1, [x19, #264]
    b274:	cmp	x0, #0xff
    b278:	b.ne	96a4 <d_print_comp_inner+0x489c>  // b.any
    b27c:	ldp	x3, x2, [x19, #272]
    b280:	strb	wzr, [x19, #255]
    b284:	mov	x1, x0
    b288:	mov	x0, x19
    b28c:	blr	x3
    b290:	ldr	x0, [x19, #320]
    b294:	mov	w3, #0x746c                	// #29804
    b298:	mov	w2, #0x79                  	// #121
    b29c:	mov	x1, #0x3                   	// #3
    b2a0:	add	x0, x0, #0x1
    b2a4:	strh	w3, [x19]
    b2a8:	strb	w2, [x19, #2]
    b2ac:	str	x0, [x19, #320]
    b2b0:	add	x0, x1, #0x1
    b2b4:	str	x0, [x19, #256]
    b2b8:	mov	w2, #0x70                  	// #112
    b2bc:	strb	w2, [x19, x1]
    b2c0:	strb	w2, [x19, #264]
    b2c4:	cmp	x0, #0xff
    b2c8:	b.ne	96f0 <d_print_comp_inner+0x48e8>  // b.any
    b2cc:	ldp	x3, x2, [x19, #272]
    b2d0:	strb	wzr, [x19, #255]
    b2d4:	mov	x1, x0
    b2d8:	mov	x0, x19
    b2dc:	blr	x3
    b2e0:	ldr	x0, [x19, #320]
    b2e4:	mov	w1, #0x65                  	// #101
    b2e8:	mov	x2, #0x1                   	// #1
    b2ec:	strb	w1, [x19]
    b2f0:	add	x0, x0, x2
    b2f4:	str	x0, [x19, #320]
    b2f8:	b	aaa4 <d_print_comp_inner+0x5c9c>
    b2fc:	add	x0, x0, #0x3
    b300:	str	x0, [x19, #256]
    b304:	mov	w1, #0x61                  	// #97
    b308:	strb	w1, [x19, x3]
    b30c:	strb	w1, [x19, #264]
    b310:	cmp	x0, #0xff
    b314:	b.ne	b3c4 <d_print_comp_inner+0x65bc>  // b.any
    b318:	ldp	x3, x2, [x19, #272]
    b31c:	strb	wzr, [x19, #255]
    b320:	mov	x1, x0
    b324:	mov	x0, x19
    b328:	blr	x3
    b32c:	ldr	x0, [x19, #320]
    b330:	mov	w2, #0x626d                	// #25197
    b334:	mov	w1, #0x64                  	// #100
    b338:	mov	x3, #0x3                   	// #3
    b33c:	add	x0, x0, #0x1
    b340:	strh	w2, [x19]
    b344:	strb	w1, [x19, #2]
    b348:	str	x0, [x19, #320]
    b34c:	add	x1, x3, #0x1
    b350:	str	x1, [x19, #256]
    b354:	mov	w0, #0x61                  	// #97
    b358:	strb	w0, [x19, x3]
    b35c:	strb	w0, [x19, #264]
    b360:	cmp	x1, #0xff
    b364:	b.ne	5e5c <d_print_comp_inner+0x1054>  // b.any
    b368:	ldp	x3, x2, [x19, #272]
    b36c:	strb	wzr, [x19, #255]
    b370:	mov	x0, x19
    b374:	blr	x3
    b378:	ldr	x2, [x19, #320]
    b37c:	mov	x0, #0x1                   	// #1
    b380:	mov	x1, #0x0                   	// #0
    b384:	add	x2, x2, x0
    b388:	str	x2, [x19, #320]
    b38c:	b	5e60 <d_print_comp_inner+0x1058>
    b390:	ldp	x3, x2, [x19, #272]
    b394:	strb	wzr, [x19, #255]
    b398:	mov	x1, x0
    b39c:	mov	x0, x19
    b3a0:	blr	x3
    b3a4:	ldr	x1, [x19, #320]
    b3a8:	mov	w3, #0x6c7b                	// #27771
    b3ac:	mov	w2, #0x61                  	// #97
    b3b0:	mov	x0, #0x3                   	// #3
    b3b4:	add	x1, x1, #0x1
    b3b8:	strh	w3, [x19]
    b3bc:	strb	w2, [x19, #2]
    b3c0:	str	x1, [x19, #320]
    b3c4:	add	x1, x0, #0x1
    b3c8:	str	x1, [x19, #256]
    b3cc:	mov	w2, #0x6d                  	// #109
    b3d0:	strb	w2, [x19, x0]
    b3d4:	strb	w2, [x19, #264]
    b3d8:	cmp	x1, #0xff
    b3dc:	b.ne	5e08 <d_print_comp_inner+0x1000>  // b.any
    b3e0:	ldp	x3, x2, [x19, #272]
    b3e4:	strb	wzr, [x19, #255]
    b3e8:	mov	x0, x19
    b3ec:	blr	x3
    b3f0:	ldr	x0, [x19, #320]
    b3f4:	mov	w1, #0x6462                	// #25698
    b3f8:	mov	x2, #0x2                   	// #2
    b3fc:	strh	w1, [x19]
    b400:	add	x0, x0, #0x1
    b404:	str	x0, [x19, #320]
    b408:	b	5e50 <d_print_comp_inner+0x1048>
    b40c:	ldp	x3, x2, [x19, #272]
    b410:	strb	wzr, [x19, #255]
    b414:	mov	x1, x0
    b418:	mov	x0, x19
    b41c:	blr	x3
    b420:	ldr	x1, [x19, #320]
    b424:	mov	w3, #0x7974                	// #31092
    b428:	mov	w2, #0x70                  	// #112
    b42c:	mov	x0, #0x3                   	// #3
    b430:	add	x1, x1, #0x1
    b434:	strh	w3, [x19]
    b438:	strb	w2, [x19, #2]
    b43c:	str	x1, [x19, #320]
    b440:	add	x3, x0, #0x1
    b444:	str	x3, [x19, #256]
    b448:	mov	w1, #0x65                  	// #101
    b44c:	strb	w1, [x19, x0]
    b450:	strb	w1, [x19, #264]
    b454:	cmp	x3, #0xff
    b458:	b.ne	7ec8 <d_print_comp_inner+0x30c0>  // b.any
    b45c:	ldp	x4, x2, [x19, #272]
    b460:	strb	wzr, [x19, #255]
    b464:	mov	x1, x3
    b468:	mov	x0, x19
    b46c:	blr	x4
    b470:	ldr	x0, [x19, #320]
    b474:	mov	w3, #0x6e69                	// #28265
    b478:	mov	w2, #0x66                  	// #102
    b47c:	mov	x1, #0x3                   	// #3
    b480:	add	x0, x0, #0x1
    b484:	strh	w3, [x19]
    b488:	strb	w2, [x19, #2]
    b48c:	str	x0, [x19, #320]
    b490:	add	x0, x1, #0x1
    b494:	str	x0, [x19, #256]
    b498:	mov	w20, #0x6f                  	// #111
    b49c:	strb	w20, [x19, x1]
    b4a0:	strb	w20, [x19, #264]
    b4a4:	cmp	x0, #0xff
    b4a8:	b.ne	7f14 <d_print_comp_inner+0x310c>  // b.any
    b4ac:	ldp	x3, x2, [x19, #272]
    b4b0:	strb	wzr, [x19, #255]
    b4b4:	mov	x1, x0
    b4b8:	mov	x0, x19
    b4bc:	blr	x3
    b4c0:	strb	w20, [x19, #2]
    b4c4:	ldr	x0, [x19, #320]
    b4c8:	mov	w2, #0x6620                	// #26144
    b4cc:	mov	x1, #0x3                   	// #3
    b4d0:	strh	w2, [x19]
    b4d4:	add	x0, x0, #0x1
    b4d8:	str	x0, [x19, #320]
    b4dc:	add	x0, x1, #0x1
    b4e0:	str	x0, [x19, #256]
    b4e4:	mov	w2, #0x72                  	// #114
    b4e8:	strb	w2, [x19, x1]
    b4ec:	strb	w2, [x19, #264]
    b4f0:	cmp	x0, #0xff
    b4f4:	b.ne	7f64 <d_print_comp_inner+0x315c>  // b.any
    b4f8:	ldp	x3, x2, [x19, #272]
    b4fc:	strb	wzr, [x19, #255]
    b500:	mov	x1, x0
    b504:	mov	x0, x19
    b508:	blr	x3
    b50c:	ldr	x2, [x19, #320]
    b510:	mov	x1, #0x1                   	// #1
    b514:	mov	x0, #0x0                   	// #0
    b518:	add	x2, x2, x1
    b51c:	str	x2, [x19, #320]
    b520:	b	7f68 <d_print_comp_inner+0x3160>
    b524:	ldp	x3, x2, [x19, #272]
    b528:	strb	wzr, [x19, #255]
    b52c:	mov	x1, x0
    b530:	mov	x0, x19
    b534:	blr	x3
    b538:	ldr	x1, [x19, #320]
    b53c:	mov	w3, #0x706f                	// #28783
    b540:	mov	w2, #0x65                  	// #101
    b544:	mov	x0, #0x3                   	// #3
    b548:	add	x1, x1, #0x1
    b54c:	strh	w3, [x19]
    b550:	strb	w2, [x19, #2]
    b554:	str	x1, [x19, #320]
    b558:	add	x3, x0, #0x1
    b55c:	str	x3, [x19, #256]
    b560:	mov	w1, #0x72                  	// #114
    b564:	strb	w1, [x19, x0]
    b568:	strb	w1, [x19, #264]
    b56c:	cmp	x3, #0xff
    b570:	b.ne	72ac <d_print_comp_inner+0x24a4>  // b.any
    b574:	ldp	x4, x2, [x19, #272]
    b578:	strb	wzr, [x19, #255]
    b57c:	mov	x1, x3
    b580:	mov	x0, x19
    b584:	blr	x4
    b588:	ldr	x0, [x19, #320]
    b58c:	mov	w3, #0x7461                	// #29793
    b590:	mov	w2, #0x6f                  	// #111
    b594:	mov	x1, #0x3                   	// #3
    b598:	add	x0, x0, #0x1
    b59c:	strh	w3, [x19]
    b5a0:	strb	w2, [x19, #2]
    b5a4:	str	x0, [x19, #320]
    b5a8:	add	x0, x1, #0x1
    b5ac:	str	x0, [x19, #256]
    b5b0:	mov	w2, #0x72                  	// #114
    b5b4:	strb	w2, [x19, x1]
    b5b8:	strb	w2, [x19, #264]
    b5bc:	cmp	x0, #0xff
    b5c0:	b.ne	72fc <d_print_comp_inner+0x24f4>  // b.any
    b5c4:	ldp	x3, x2, [x19, #272]
    b5c8:	strb	wzr, [x19, #255]
    b5cc:	mov	x1, x0
    b5d0:	mov	x0, x19
    b5d4:	blr	x3
    b5d8:	ldr	x2, [x19, #320]
    b5dc:	mov	x1, #0x1                   	// #1
    b5e0:	mov	x0, #0x0                   	// #0
    b5e4:	add	x2, x2, x1
    b5e8:	str	x2, [x19, #320]
    b5ec:	b	7300 <d_print_comp_inner+0x24f8>
    b5f0:	ldr	w0, [x20, #4]
    b5f4:	cmp	w0, #0x1
    b5f8:	b.gt	b744 <d_print_comp_inner+0x693c>
    b5fc:	ldr	w1, [x19, #308]
    b600:	cmp	w1, #0x400
    b604:	b.gt	b744 <d_print_comp_inner+0x693c>
    b608:	ldr	x3, [x19, #328]
    b60c:	add	w0, w0, #0x1
    b610:	str	w0, [x20, #4]
    b614:	add	w1, w1, #0x1
    b618:	add	x0, sp, #0x80
    b61c:	str	w1, [x19, #308]
    b620:	str	x0, [x19, #328]
    b624:	mov	w1, w22
    b628:	mov	x0, x19
    b62c:	mov	x2, x20
    b630:	stp	x20, x3, [sp, #128]
    b634:	bl	4e08 <d_print_comp_inner>
    b638:	ldr	w1, [x20, #4]
    b63c:	ldr	x0, [sp, #136]
    b640:	str	x0, [x19, #328]
    b644:	ldr	w0, [x19, #308]
    b648:	sub	w1, w1, #0x1
    b64c:	str	w1, [x20, #4]
    b650:	sub	w0, w0, #0x1
    b654:	str	w0, [x19, #308]
    b658:	ldr	x1, [x19, #256]
    b65c:	cmp	x1, #0xff
    b660:	b.eq	c234 <d_print_comp_inner+0x742c>  // b.none
    b664:	add	x0, x1, #0x1
    b668:	str	x0, [x19, #256]
    b66c:	mov	w2, #0x20                  	// #32
    b670:	strb	w2, [x19, x1]
    b674:	strb	w2, [x19, #264]
    b678:	b	6c4c <d_print_comp_inner+0x1e44>
    b67c:	ldp	x21, x22, [sp, #32]
    b680:	ldp	x23, x24, [sp, #48]
    b684:	b	4e70 <d_print_comp_inner+0x68>
    b688:	mov	w0, #0x1                   	// #1
    b68c:	str	w0, [x19, #304]
    b690:	b	6f98 <d_print_comp_inner+0x2190>
    b694:	b.eq	c62c <d_print_comp_inner+0x7824>  // b.none
    b698:	add	x1, x0, #0x1
    b69c:	str	x1, [x19, #256]
    b6a0:	mov	w2, #0x5f                  	// #95
    b6a4:	strb	w2, [x19, x0]
    b6a8:	strb	w2, [x19, #264]
    b6ac:	cmp	x1, #0xff
    b6b0:	b.ne	c2e0 <d_print_comp_inner+0x74d8>  // b.any
    b6b4:	ldp	x3, x2, [x19, #272]
    b6b8:	strb	wzr, [x19, #255]
    b6bc:	mov	x0, x19
    b6c0:	blr	x3
    b6c4:	ldr	x0, [x19, #320]
    b6c8:	mov	w3, #0x7246                	// #29254
    b6cc:	mov	w2, #0x61                  	// #97
    b6d0:	mov	x1, #0x3                   	// #3
    b6d4:	add	x0, x0, #0x1
    b6d8:	strh	w3, [x19]
    b6dc:	strb	w2, [x19, #2]
    b6e0:	str	x0, [x19, #320]
    b6e4:	add	x0, x1, #0x1
    b6e8:	str	x0, [x19, #256]
    b6ec:	mov	w2, #0x63                  	// #99
    b6f0:	strb	w2, [x19, x1]
    b6f4:	strb	w2, [x19, #264]
    b6f8:	cmp	x0, #0xff
    b6fc:	b.ne	c334 <d_print_comp_inner+0x752c>  // b.any
    b700:	ldp	x3, x2, [x19, #272]
    b704:	strb	wzr, [x19, #255]
    b708:	mov	x1, x0
    b70c:	mov	x0, x19
    b710:	blr	x3
    b714:	ldr	x2, [x19, #320]
    b718:	mov	x1, #0x1                   	// #1
    b71c:	mov	x0, #0x0                   	// #0
    b720:	add	x2, x2, x1
    b724:	str	x2, [x19, #320]
    b728:	str	x1, [x19, #256]
    b72c:	mov	w1, #0x74                  	// #116
    b730:	strb	w1, [x19, x0]
    b734:	strb	w1, [x19, #264]
    b738:	ldp	x21, x22, [sp, #32]
    b73c:	ldp	x23, x24, [sp, #48]
    b740:	b	4e70 <d_print_comp_inner+0x68>
    b744:	mov	w0, #0x1                   	// #1
    b748:	str	w0, [x19, #304]
    b74c:	b	b658 <d_print_comp_inner+0x6850>
    b750:	mov	w0, #0x1                   	// #1
    b754:	str	w0, [x19, #304]
    b758:	b	4fd4 <d_print_comp_inner+0x1cc>
    b75c:	add	x0, x1, #0x1
    b760:	str	x0, [x19, #256]
    b764:	mov	w2, #0x29                  	// #41
    b768:	strb	w2, [x19, x1]
    b76c:	strb	w2, [x19, #264]
    b770:	ldr	w1, [x24]
    b774:	cmp	w1, #0x3e
    b778:	b.eq	c07c <d_print_comp_inner+0x7274>  // b.none
    b77c:	cmp	w21, #0x8
    b780:	b.ne	53d8 <d_print_comp_inner+0x5d0>  // b.any
    b784:	cmp	x0, #0xff
    b788:	b.ne	b7b0 <d_print_comp_inner+0x69a8>  // b.any
    b78c:	ldp	x3, x2, [x19, #272]
    b790:	strb	wzr, [x19, #255]
    b794:	mov	x1, x0
    b798:	mov	x0, x19
    b79c:	blr	x3
    b7a0:	ldr	x1, [x19, #320]
    b7a4:	mov	x0, #0x0                   	// #0
    b7a8:	add	x1, x1, #0x1
    b7ac:	str	x1, [x19, #320]
    b7b0:	add	x1, x0, #0x1
    b7b4:	str	x1, [x19, #256]
    b7b8:	mov	w1, #0x5b                  	// #91
    b7bc:	strb	w1, [x19, x0]
    b7c0:	strb	w1, [x19, #264]
    b7c4:	b	53d8 <d_print_comp_inner+0x5d0>
    b7c8:	mov	w0, #0x1                   	// #1
    b7cc:	str	w0, [x19, #304]
    b7d0:	b	5838 <d_print_comp_inner+0xa30>
    b7d4:	ldr	x1, [x19, #256]
    b7d8:	cmp	x1, #0xff
    b7dc:	b.ne	c0c8 <d_print_comp_inner+0x72c0>  // b.any
    b7e0:	ldp	x3, x2, [x19, #272]
    b7e4:	strb	wzr, [x19, #255]
    b7e8:	mov	x0, x19
    b7ec:	blr	x3
    b7f0:	ldr	x2, [x19, #320]
    b7f4:	mov	x0, #0x1                   	// #1
    b7f8:	mov	x1, #0x0                   	// #0
    b7fc:	add	x2, x2, x0
    b800:	str	x2, [x19, #320]
    b804:	str	x0, [x19, #256]
    b808:	mov	w0, #0x7d                  	// #125
    b80c:	strb	w0, [x19, x1]
    b810:	strb	w0, [x19, #264]
    b814:	ldp	x21, x22, [sp, #32]
    b818:	ldp	x23, x24, [sp, #48]
    b81c:	b	4e70 <d_print_comp_inner+0x68>
    b820:	mov	w0, #0x2c                  	// #44
    b824:	add	x2, x1, #0x1
    b828:	strb	w0, [x19, x1]
    b82c:	b	5010 <d_print_comp_inner+0x208>
    b830:	ldp	x3, x2, [x19, #272]
    b834:	strb	wzr, [x19, #255]
    b838:	mov	x0, x19
    b83c:	blr	x3
    b840:	ldr	x1, [x19, #320]
    b844:	mov	w3, #0x6620                	// #26144
    b848:	mov	w2, #0x6f                  	// #111
    b84c:	mov	x0, #0x3                   	// #3
    b850:	add	x1, x1, #0x1
    b854:	strh	w3, [x19]
    b858:	strb	w2, [x19, #2]
    b85c:	str	x1, [x19, #320]
    b860:	add	x1, x0, #0x1
    b864:	str	x1, [x19, #256]
    b868:	mov	w2, #0x72                  	// #114
    b86c:	strb	w2, [x19, x0]
    b870:	strb	w2, [x19, #264]
    b874:	cmp	x1, #0xff
    b878:	b.ne	8d5c <d_print_comp_inner+0x3f54>  // b.any
    b87c:	ldp	x3, x2, [x19, #272]
    b880:	strb	wzr, [x19, #255]
    b884:	mov	x0, x19
    b888:	blr	x3
    b88c:	ldr	x2, [x19, #320]
    b890:	mov	x0, #0x1                   	// #1
    b894:	mov	x1, #0x0                   	// #0
    b898:	add	x2, x2, x0
    b89c:	str	x2, [x19, #320]
    b8a0:	b	8d60 <d_print_comp_inner+0x3f58>
    b8a4:	ldr	x0, [x21, #8]
    b8a8:	ldr	x23, [x0]
    b8ac:	ldrb	w0, [x23]
    b8b0:	subs	w1, w0, #0x61
    b8b4:	b.ne	b8c8 <d_print_comp_inner+0x6ac0>  // b.any
    b8b8:	ldrb	w1, [x23, #1]
    b8bc:	subs	w1, w1, #0x64
    b8c0:	b.ne	b8c8 <d_print_comp_inner+0x6ac0>  // b.any
    b8c4:	ldrb	w1, [x23, #2]
    b8c8:	ldr	w2, [x20]
    b8cc:	cbnz	w1, b8d8 <d_print_comp_inner+0x6ad0>
    b8d0:	cmp	w2, #0x3
    b8d4:	b.eq	d7fc <d_print_comp_inner+0x89f4>  // b.none
    b8d8:	cmp	w2, #0x39
    b8dc:	b.eq	d92c <d_print_comp_inner+0x8b24>  // b.none
    b8e0:	cmp	w0, #0x73
    b8e4:	b.ne	b9d0 <d_print_comp_inner+0x6bc8>  // b.any
    b8e8:	ldrb	w1, [x23, #1]
    b8ec:	cmp	w1, #0x5a
    b8f0:	b.ne	ba1c <d_print_comp_inner+0x6c14>  // b.any
    b8f4:	ldrb	w3, [x23, #2]
    b8f8:	cbnz	w3, ba1c <d_print_comp_inner+0x6c14>
    b8fc:	mov	x1, x20
    b900:	mov	x0, x19
    b904:	bl	360 <d_find_pack>
    b908:	cbnz	x0, b924 <d_print_comp_inner+0x6b1c>
    b90c:	b	b930 <d_print_comp_inner+0x6b28>
    b910:	ldr	x1, [x0, #8]
    b914:	cbz	x1, b930 <d_print_comp_inner+0x6b28>
    b918:	ldr	x0, [x0, #16]
    b91c:	add	w3, w3, #0x1
    b920:	cbz	x0, b930 <d_print_comp_inner+0x6b28>
    b924:	ldr	w1, [x0]
    b928:	cmp	w1, #0x2f
    b92c:	b.eq	b910 <d_print_comp_inner+0x6b08>  // b.none
    b930:	mov	w2, w3
    b934:	adrp	x1, 0 <d_make_comp>
    b938:	add	x1, x1, #0x0
    b93c:	add	x20, sp, #0x80
    b940:	mov	x0, x20
    b944:	bl	0 <sprintf>
    b948:	mov	x0, x20
    b94c:	bl	0 <strlen>
    b950:	cbz	x0, dad4 <d_print_comp_inner+0x8ccc>
    b954:	add	x22, x20, x0
    b958:	mov	x23, #0x1                   	// #1
    b95c:	ldr	x1, [x19, #256]
    b960:	b	b9bc <d_print_comp_inner+0x6bb4>
    b964:	ldp	x3, x2, [x19, #272]
    b968:	strb	wzr, [x19, #255]
    b96c:	mov	x0, x19
    b970:	add	x20, x20, #0x1
    b974:	blr	x3
    b978:	strb	w21, [x19]
    b97c:	ldr	x0, [x19, #320]
    b980:	str	x23, [x19, #256]
    b984:	strb	w21, [x19, #264]
    b988:	cmp	x20, x22
    b98c:	add	x0, x0, #0x1
    b990:	str	x0, [x19, #320]
    b994:	b.eq	da20 <d_print_comp_inner+0x8c18>  // b.none
    b998:	ldrb	w21, [x20]
    b99c:	mov	x0, #0x1                   	// #1
    b9a0:	add	x1, x0, #0x1
    b9a4:	str	x1, [x19, #256]
    b9a8:	strb	w21, [x19, x0]
    b9ac:	add	x20, x20, #0x1
    b9b0:	strb	w21, [x19, #264]
    b9b4:	cmp	x22, x20
    b9b8:	b.eq	d964 <d_print_comp_inner+0x8b5c>  // b.none
    b9bc:	ldrb	w21, [x20]
    b9c0:	cmp	x1, #0xff
    b9c4:	b.eq	b964 <d_print_comp_inner+0x6b5c>  // b.none
    b9c8:	mov	x0, x1
    b9cc:	b	b9a0 <d_print_comp_inner+0x6b98>
    b9d0:	mov	x0, x19
    b9d4:	mov	x2, x21
    b9d8:	mov	w1, w22
    b9dc:	bl	dd28 <d_print_expr_op>
    b9e0:	ldrb	w0, [x23]
    b9e4:	cmp	w0, #0x67
    b9e8:	b.ne	baac <d_print_comp_inner+0x6ca4>  // b.any
    b9ec:	ldrb	w1, [x23, #1]
    b9f0:	cmp	w1, #0x73
    b9f4:	b.ne	baac <d_print_comp_inner+0x6ca4>  // b.any
    b9f8:	ldrb	w1, [x23, #2]
    b9fc:	cbnz	w1, baac <d_print_comp_inner+0x6ca4>
    ba00:	mov	w1, w22
    ba04:	mov	x2, x20
    ba08:	mov	x0, x19
    ba0c:	bl	dc90 <d_print_comp>
    ba10:	ldp	x21, x22, [sp, #32]
    ba14:	ldp	x23, x24, [sp, #48]
    ba18:	b	4e70 <d_print_comp_inner+0x68>
    ba1c:	cmp	w0, #0x73
    ba20:	b.ne	b9d0 <d_print_comp_inner+0x6bc8>  // b.any
    ba24:	ldrb	w0, [x23, #1]
    ba28:	cmp	w0, #0x50
    ba2c:	b.ne	b9d0 <d_print_comp_inner+0x6bc8>  // b.any
    ba30:	ldrb	w0, [x23, #2]
    ba34:	mov	w3, #0x0                   	// #0
    ba38:	cbz	w0, ba4c <d_print_comp_inner+0x6c44>
    ba3c:	b	b9d0 <d_print_comp_inner+0x6bc8>
    ba40:	add	w3, w3, #0x1
    ba44:	ldr	x20, [x20, #16]
    ba48:	cbz	x20, d128 <d_print_comp_inner+0x8320>
    ba4c:	ldr	w0, [x20]
    ba50:	cmp	w0, #0x2f
    ba54:	b.ne	d128 <d_print_comp_inner+0x8320>  // b.any
    ba58:	ldr	x0, [x20, #8]
    ba5c:	cbz	x0, d128 <d_print_comp_inner+0x8320>
    ba60:	ldr	w1, [x0]
    ba64:	cmp	w1, #0x4b
    ba68:	b.ne	ba40 <d_print_comp_inner+0x6c38>  // b.any
    ba6c:	ldr	x1, [x0, #8]
    ba70:	mov	x0, x19
    ba74:	bl	360 <d_find_pack>
    ba78:	mov	w1, #0x0                   	// #0
    ba7c:	cbnz	x0, ba98 <d_print_comp_inner+0x6c90>
    ba80:	b	baa4 <d_print_comp_inner+0x6c9c>
    ba84:	ldr	x2, [x0, #8]
    ba88:	cbz	x2, baa4 <d_print_comp_inner+0x6c9c>
    ba8c:	ldr	x0, [x0, #16]
    ba90:	add	w1, w1, #0x1
    ba94:	cbz	x0, baa4 <d_print_comp_inner+0x6c9c>
    ba98:	ldr	w2, [x0]
    ba9c:	cmp	w2, #0x2f
    baa0:	b.eq	ba84 <d_print_comp_inner+0x6c7c>  // b.none
    baa4:	add	w3, w3, w1
    baa8:	b	ba44 <d_print_comp_inner+0x6c3c>
    baac:	cmp	w0, #0x73
    bab0:	b.ne	76b0 <d_print_comp_inner+0x28a8>  // b.any
    bab4:	ldrb	w0, [x23, #1]
    bab8:	cmp	w0, #0x74
    babc:	b.ne	76b0 <d_print_comp_inner+0x28a8>  // b.any
    bac0:	ldrb	w0, [x23, #2]
    bac4:	cbnz	w0, 76b0 <d_print_comp_inner+0x28a8>
    bac8:	ldr	x1, [x19, #256]
    bacc:	cmp	x1, #0xff
    bad0:	b.ne	baf4 <d_print_comp_inner+0x6cec>  // b.any
    bad4:	ldp	x3, x2, [x19, #272]
    bad8:	strb	wzr, [x19, #255]
    badc:	mov	x0, x19
    bae0:	blr	x3
    bae4:	ldr	x0, [x19, #320]
    bae8:	mov	x1, #0x0                   	// #0
    baec:	add	x0, x0, #0x1
    baf0:	str	x0, [x19, #320]
    baf4:	add	x0, x1, #0x1
    baf8:	str	x0, [x19, #256]
    bafc:	mov	w2, #0x28                  	// #40
    bb00:	strb	w2, [x19, x1]
    bb04:	strb	w2, [x19, #264]
    bb08:	ldr	w1, [x20, #4]
    bb0c:	cmp	w1, #0x1
    bb10:	b.gt	cbc8 <d_print_comp_inner+0x7dc0>
    bb14:	ldr	w2, [x19, #308]
    bb18:	cmp	w2, #0x400
    bb1c:	b.gt	cbc8 <d_print_comp_inner+0x7dc0>
    bb20:	ldr	x3, [x19, #328]
    bb24:	add	w1, w1, #0x1
    bb28:	str	w1, [x20, #4]
    bb2c:	add	w2, w2, #0x1
    bb30:	add	x0, sp, #0x80
    bb34:	str	w2, [x19, #308]
    bb38:	str	x0, [x19, #328]
    bb3c:	mov	w1, w22
    bb40:	mov	x2, x20
    bb44:	mov	x0, x19
    bb48:	stp	x20, x3, [sp, #128]
    bb4c:	bl	4e08 <d_print_comp_inner>
    bb50:	ldr	w2, [x20, #4]
    bb54:	ldr	x0, [sp, #136]
    bb58:	str	x0, [x19, #328]
    bb5c:	ldr	w1, [x19, #308]
    bb60:	sub	w2, w2, #0x1
    bb64:	ldr	x0, [x19, #256]
    bb68:	str	w2, [x20, #4]
    bb6c:	sub	w1, w1, #0x1
    bb70:	str	w1, [x19, #308]
    bb74:	cmp	x0, #0xff
    bb78:	b.ne	bba0 <d_print_comp_inner+0x6d98>  // b.any
    bb7c:	ldp	x3, x2, [x19, #272]
    bb80:	strb	wzr, [x19, #255]
    bb84:	mov	x1, x0
    bb88:	mov	x0, x19
    bb8c:	blr	x3
    bb90:	ldr	x1, [x19, #320]
    bb94:	mov	x0, #0x0                   	// #0
    bb98:	add	x1, x1, #0x1
    bb9c:	str	x1, [x19, #320]
    bba0:	add	x1, x0, #0x1
    bba4:	str	x1, [x19, #256]
    bba8:	mov	w1, #0x29                  	// #41
    bbac:	strb	w1, [x19, x0]
    bbb0:	strb	w1, [x19, #264]
    bbb4:	ldp	x21, x22, [sp, #32]
    bbb8:	ldp	x23, x24, [sp, #48]
    bbbc:	b	4e70 <d_print_comp_inner+0x68>
    bbc0:	ldp	x3, x2, [x19, #272]
    bbc4:	strb	wzr, [x19, #255]
    bbc8:	mov	x1, x0
    bbcc:	mov	x0, x19
    bbd0:	blr	x3
    bbd4:	ldr	x1, [x19, #320]
    bbd8:	mov	w3, #0x615b                	// #24923
    bbdc:	mov	w2, #0x62                  	// #98
    bbe0:	mov	x0, #0x3                   	// #3
    bbe4:	add	x1, x1, #0x1
    bbe8:	strh	w3, [x19]
    bbec:	strb	w2, [x19, #2]
    bbf0:	str	x1, [x19, #320]
    bbf4:	add	x1, x0, #0x1
    bbf8:	str	x1, [x19, #256]
    bbfc:	mov	w2, #0x69                  	// #105
    bc00:	strb	w2, [x19, x0]
    bc04:	strb	w2, [x19, #264]
    bc08:	cmp	x1, #0xff
    bc0c:	b.ne	5c50 <d_print_comp_inner+0xe48>  // b.any
    bc10:	ldp	x3, x2, [x19, #272]
    bc14:	strb	wzr, [x19, #255]
    bc18:	mov	x0, x19
    bc1c:	blr	x3
    bc20:	ldr	x2, [x19, #320]
    bc24:	mov	x0, #0x1                   	// #1
    bc28:	mov	x1, #0x0                   	// #0
    bc2c:	add	x2, x2, x0
    bc30:	str	x2, [x19, #320]
    bc34:	b	5c54 <d_print_comp_inner+0xe4c>
    bc38:	ldp	x3, x2, [x19, #272]
    bc3c:	strb	wzr, [x19, #255]
    bc40:	mov	x0, x19
    bc44:	blr	x3
    bc48:	ldr	x0, [x19, #320]
    bc4c:	mov	w1, #0x692d                	// #26925
    bc50:	mov	x2, #0x2                   	// #2
    bc54:	strh	w1, [x19]
    bc58:	add	x0, x0, #0x1
    bc5c:	str	x0, [x19, #320]
    bc60:	b	8668 <d_print_comp_inner+0x3860>
    bc64:	ldr	x0, [x23, #8]
    bc68:	ldr	w21, [x0, #28]
    bc6c:	cmp	w21, #0x6
    bc70:	b.hi	bd08 <d_print_comp_inner+0x6f00>  // b.pmore
    bc74:	cbz	w21, 5300 <d_print_comp_inner+0x4f8>
    bc78:	ldr	x0, [x2, #16]
    bc7c:	ldr	w0, [x0]
    bc80:	cbnz	w0, 5300 <d_print_comp_inner+0x4f8>
    bc84:	cmp	w20, #0x3e
    bc88:	b.eq	dbdc <d_print_comp_inner+0x8dd4>  // b.none
    bc8c:	ldr	x2, [x24, #16]
    bc90:	mov	w1, w22
    bc94:	mov	x0, x19
    bc98:	bl	dc90 <d_print_comp>
    bc9c:	cmp	w21, #0x4
    bca0:	b.eq	dbbc <d_print_comp_inner+0x8db4>  // b.none
    bca4:	b.hi	d970 <d_print_comp_inner+0x8b68>  // b.pmore
    bca8:	cmp	w21, #0x2
    bcac:	b.eq	db6c <d_print_comp_inner+0x8d64>  // b.none
    bcb0:	cmp	w21, #0x3
    bcb4:	b.ne	dc4c <d_print_comp_inner+0x8e44>  // b.any
    bcb8:	ldr	x1, [x19, #256]
    bcbc:	cmp	x1, #0xff
    bcc0:	b.ne	bce8 <d_print_comp_inner+0x6ee0>  // b.any
    bcc4:	ldp	x3, x2, [x19, #272]
    bcc8:	strb	wzr, [x19, #255]
    bccc:	mov	x0, x19
    bcd0:	blr	x3
    bcd4:	str	xzr, [x19, #256]
    bcd8:	ldr	x0, [x19, #320]
    bcdc:	mov	x1, #0x0                   	// #0
    bce0:	add	x0, x0, #0x1
    bce4:	str	x0, [x19, #320]
    bce8:	add	x0, x1, #0x1
    bcec:	str	x0, [x19, #256]
    bcf0:	mov	w0, #0x6c                  	// #108
    bcf4:	strb	w0, [x19, x1]
    bcf8:	strb	w0, [x19, #264]
    bcfc:	ldp	x21, x22, [sp, #32]
    bd00:	ldp	x23, x24, [sp, #48]
    bd04:	b	4e70 <d_print_comp_inner+0x68>
    bd08:	cmp	w21, #0x7
    bd0c:	b.ne	5300 <d_print_comp_inner+0x4f8>  // b.any
    bd10:	ldr	x0, [x2, #16]
    bd14:	ldr	w1, [x0]
    bd18:	cbnz	w1, 5300 <d_print_comp_inner+0x4f8>
    bd1c:	ldr	w1, [x0, #16]
    bd20:	cmp	w20, #0x3d
    bd24:	ccmp	w1, #0x1, #0x0, eq  // eq = none
    bd28:	b.ne	5300 <d_print_comp_inner+0x4f8>  // b.any
    bd2c:	ldr	x0, [x0, #8]
    bd30:	ldrb	w0, [x0]
    bd34:	cmp	w0, #0x30
    bd38:	b.eq	dc6c <d_print_comp_inner+0x8e64>  // b.none
    bd3c:	cmp	w0, #0x31
    bd40:	b.ne	5300 <d_print_comp_inner+0x4f8>  // b.any
    bd44:	mov	x0, x19
    bd48:	adrp	x1, 0 <d_make_comp>
    bd4c:	mov	x2, #0x4                   	// #4
    bd50:	add	x1, x1, #0x0
    bd54:	bl	170 <d_append_buffer>
    bd58:	ldp	x21, x22, [sp, #32]
    bd5c:	ldp	x23, x24, [sp, #48]
    bd60:	b	4e70 <d_print_comp_inner+0x68>
    bd64:	add	x1, x1, #0x3
    bd68:	str	x1, [x19, #256]
    bd6c:	mov	w0, #0x6e                  	// #110
    bd70:	strb	w0, [x19, x3]
    bd74:	strb	w0, [x19, #264]
    bd78:	cmp	x1, #0xff
    bd7c:	b.ne	8674 <d_print_comp_inner+0x386c>  // b.any
    bd80:	ldp	x3, x2, [x19, #272]
    bd84:	strb	wzr, [x19, #255]
    bd88:	mov	x0, x19
    bd8c:	blr	x3
    bd90:	ldr	x2, [x19, #320]
    bd94:	mov	x0, #0x1                   	// #1
    bd98:	mov	x1, #0x0                   	// #0
    bd9c:	add	x2, x2, x0
    bda0:	str	x2, [x19, #320]
    bda4:	b	8678 <d_print_comp_inner+0x3870>
    bda8:	ldr	x20, [x20, #8]
    bdac:	cbz	x20, c41c <d_print_comp_inner+0x7614>
    bdb0:	ldr	w1, [x20, #4]
    bdb4:	cmp	w1, #0x1
    bdb8:	b.gt	c41c <d_print_comp_inner+0x7614>
    bdbc:	ldr	w2, [x19, #308]
    bdc0:	cmp	w2, #0x400
    bdc4:	b.gt	c41c <d_print_comp_inner+0x7614>
    bdc8:	ldr	x3, [x19, #328]
    bdcc:	add	w1, w1, #0x1
    bdd0:	str	w1, [x20, #4]
    bdd4:	add	w2, w2, #0x1
    bdd8:	add	x0, sp, #0x80
    bddc:	str	w2, [x19, #308]
    bde0:	str	x0, [x19, #328]
    bde4:	mov	w1, w22
    bde8:	mov	x2, x20
    bdec:	mov	x0, x19
    bdf0:	stp	x20, x3, [sp, #128]
    bdf4:	bl	4e08 <d_print_comp_inner>
    bdf8:	ldr	w1, [x20, #4]
    bdfc:	ldr	x0, [sp, #136]
    be00:	str	x0, [x19, #328]
    be04:	ldr	w0, [x19, #308]
    be08:	sub	w1, w1, #0x1
    be0c:	ldr	x2, [x19, #368]
    be10:	sub	w0, w0, #0x1
    be14:	ldr	x3, [x19, #256]
    be18:	str	w1, [x20, #4]
    be1c:	str	w0, [x19, #308]
    be20:	mov	x1, x3
    be24:	ldrb	w0, [x19, #264]
    be28:	cbz	x2, be34 <d_print_comp_inner+0x702c>
    be2c:	ldr	x2, [sp, #112]
    be30:	str	x2, [x19, #288]
    be34:	cmp	w0, #0x3c
    be38:	b.ne	be7c <d_print_comp_inner+0x7074>  // b.any
    be3c:	cmp	x1, #0xff
    be40:	b.ne	be68 <d_print_comp_inner+0x7060>  // b.any
    be44:	ldp	x3, x2, [x19, #272]
    be48:	strb	wzr, [x19, #255]
    be4c:	mov	x0, x19
    be50:	blr	x3
    be54:	str	xzr, [x19, #256]
    be58:	ldr	x0, [x19, #320]
    be5c:	mov	x1, #0x0                   	// #0
    be60:	add	x0, x0, #0x1
    be64:	str	x0, [x19, #320]
    be68:	add	x3, x1, #0x1
    be6c:	str	x3, [x19, #256]
    be70:	mov	w0, #0x20                  	// #32
    be74:	strb	w0, [x19, x1]
    be78:	strb	w0, [x19, #264]
    be7c:	add	x0, x3, #0x1
    be80:	cmp	x3, #0xff
    be84:	b.ne	beb0 <d_print_comp_inner+0x70a8>  // b.any
    be88:	ldp	x4, x2, [x19, #272]
    be8c:	strb	wzr, [x19, #255]
    be90:	mov	x1, x3
    be94:	mov	x0, x19
    be98:	blr	x4
    be9c:	ldr	x1, [x19, #320]
    bea0:	mov	x0, #0x1                   	// #1
    bea4:	mov	x3, #0x0                   	// #0
    bea8:	add	x1, x1, x0
    beac:	str	x1, [x19, #320]
    beb0:	str	x0, [x19, #256]
    beb4:	mov	w1, #0x3c                  	// #60
    beb8:	strb	w1, [x19, x3]
    bebc:	strb	w1, [x19, #264]
    bec0:	ldr	x1, [x24, #8]
    bec4:	ldr	x20, [x1, #16]
    bec8:	cbz	x20, c410 <d_print_comp_inner+0x7608>
    becc:	ldr	w1, [x20, #4]
    bed0:	cmp	w1, #0x1
    bed4:	b.gt	c410 <d_print_comp_inner+0x7608>
    bed8:	ldr	w2, [x19, #308]
    bedc:	cmp	w2, #0x400
    bee0:	b.gt	c410 <d_print_comp_inner+0x7608>
    bee4:	ldr	x3, [x19, #328]
    bee8:	add	w1, w1, #0x1
    beec:	str	w1, [x20, #4]
    bef0:	add	w2, w2, #0x1
    bef4:	add	x0, sp, #0x80
    bef8:	str	w2, [x19, #308]
    befc:	str	x0, [x19, #328]
    bf00:	mov	w1, w22
    bf04:	mov	x2, x20
    bf08:	mov	x0, x19
    bf0c:	stp	x20, x3, [sp, #128]
    bf10:	bl	4e08 <d_print_comp_inner>
    bf14:	ldr	w1, [x19, #308]
    bf18:	ldr	x0, [sp, #136]
    bf1c:	str	x0, [x19, #328]
    bf20:	ldr	w0, [x20, #4]
    bf24:	sub	w1, w1, #0x1
    bf28:	sub	w0, w0, #0x1
    bf2c:	str	w0, [x20, #4]
    bf30:	ldr	x0, [x19, #256]
    bf34:	str	w1, [x19, #308]
    bf38:	ldrb	w2, [x19, #264]
    bf3c:	mov	x1, x0
    bf40:	cmp	w2, #0x3e
    bf44:	b.ne	bf88 <d_print_comp_inner+0x7180>  // b.any
    bf48:	cmp	x0, #0xff
    bf4c:	b.ne	bf74 <d_print_comp_inner+0x716c>  // b.any
    bf50:	ldp	x3, x2, [x19, #272]
    bf54:	strb	wzr, [x19, #255]
    bf58:	mov	x0, x19
    bf5c:	blr	x3
    bf60:	str	xzr, [x19, #256]
    bf64:	ldr	x0, [x19, #320]
    bf68:	mov	x1, #0x0                   	// #0
    bf6c:	add	x0, x0, #0x1
    bf70:	str	x0, [x19, #320]
    bf74:	add	x0, x1, #0x1
    bf78:	str	x0, [x19, #256]
    bf7c:	mov	w2, #0x20                  	// #32
    bf80:	strb	w2, [x19, x1]
    bf84:	strb	w2, [x19, #264]
    bf88:	add	x1, x0, #0x1
    bf8c:	cmp	x0, #0xff
    bf90:	b.ne	bfbc <d_print_comp_inner+0x71b4>  // b.any
    bf94:	ldp	x3, x2, [x19, #272]
    bf98:	strb	wzr, [x19, #255]
    bf9c:	mov	x1, x0
    bfa0:	mov	x0, x19
    bfa4:	blr	x3
    bfa8:	ldr	x2, [x19, #320]
    bfac:	mov	x1, #0x1                   	// #1
    bfb0:	mov	x0, #0x0                   	// #0
    bfb4:	add	x2, x2, x1
    bfb8:	str	x2, [x19, #320]
    bfbc:	str	x1, [x19, #256]
    bfc0:	mov	w1, #0x3e                  	// #62
    bfc4:	strb	w1, [x19, x0]
    bfc8:	strb	w1, [x19, #264]
    bfcc:	ldp	x21, x22, [sp, #32]
    bfd0:	ldp	x23, x24, [sp, #48]
    bfd4:	b	4e70 <d_print_comp_inner+0x68>
    bfd8:	cmp	x1, #0xff
    bfdc:	b.ne	c000 <d_print_comp_inner+0x71f8>  // b.any
    bfe0:	ldp	x3, x2, [x19, #272]
    bfe4:	strb	wzr, [x19, #255]
    bfe8:	mov	x0, x19
    bfec:	blr	x3
    bff0:	ldr	x0, [x19, #320]
    bff4:	mov	x1, #0x0                   	// #0
    bff8:	add	x0, x0, #0x1
    bffc:	str	x0, [x19, #320]
    c000:	add	x2, x1, #0x1
    c004:	str	x2, [x19, #256]
    c008:	mov	w0, #0x20                  	// #32
    c00c:	strb	w0, [x19, x1]
    c010:	mov	x1, x2
    c014:	strb	w0, [x19, #264]
    c018:	b	8098 <d_print_comp_inner+0x3290>
    c01c:	cmp	x1, #0xff
    c020:	b.eq	c840 <d_print_comp_inner+0x7a38>  // b.none
    c024:	add	x3, x1, #0x1
    c028:	str	x3, [x19, #256]
    c02c:	mov	w0, #0x3a                  	// #58
    c030:	strb	w0, [x19, x1]
    c034:	strb	w0, [x19, #264]
    c038:	cmp	x3, #0xff
    c03c:	b.ne	c868 <d_print_comp_inner+0x7a60>  // b.any
    c040:	ldp	x4, x2, [x19, #272]
    c044:	strb	wzr, [x19, #255]
    c048:	mov	x1, x3
    c04c:	mov	x0, x19
    c050:	blr	x4
    c054:	ldr	x1, [x19, #320]
    c058:	mov	x0, #0x1                   	// #1
    c05c:	mov	x3, #0x0                   	// #0
    c060:	add	x1, x1, x0
    c064:	str	x1, [x19, #320]
    c068:	str	x0, [x19, #256]
    c06c:	mov	w1, #0x3a                  	// #58
    c070:	strb	w1, [x19, x3]
    c074:	strb	w1, [x19, #264]
    c078:	b	5164 <d_print_comp_inner+0x35c>
    c07c:	cmp	x0, #0xff
    c080:	b.ne	c0a8 <d_print_comp_inner+0x72a0>  // b.any
    c084:	ldp	x3, x2, [x19, #272]
    c088:	strb	wzr, [x19, #255]
    c08c:	mov	x1, x0
    c090:	mov	x0, x19
    c094:	blr	x3
    c098:	str	xzr, [x19, #256]
    c09c:	ldr	x0, [x19, #320]
    c0a0:	add	x0, x0, #0x1
    c0a4:	str	x0, [x19, #320]
    c0a8:	ldr	x2, [x19, #256]
    c0ac:	mov	w1, #0x2d                  	// #45
    c0b0:	add	x0, x2, #0x1
    c0b4:	str	x0, [x19, #256]
    c0b8:	strb	w1, [x19, x2]
    c0bc:	strb	w1, [x19, #264]
    c0c0:	b	b77c <d_print_comp_inner+0x6974>
    c0c4:	mov	x1, #0x1                   	// #1
    c0c8:	add	x0, x1, #0x1
    c0cc:	b	b804 <d_print_comp_inner+0x69fc>
    c0d0:	ldr	x0, [x19, #256]
    c0d4:	cmp	x0, #0xff
    c0d8:	b.eq	d234 <d_print_comp_inner+0x842c>  // b.none
    c0dc:	add	x3, x0, #0x1
    c0e0:	str	x3, [x19, #256]
    c0e4:	mov	w1, #0x5f                  	// #95
    c0e8:	strb	w1, [x19, x0]
    c0ec:	strb	w1, [x19, #264]
    c0f0:	cmp	x3, #0xff
    c0f4:	b.ne	cff8 <d_print_comp_inner+0x81f0>  // b.any
    c0f8:	ldp	x4, x2, [x19, #272]
    c0fc:	strb	wzr, [x19, #255]
    c100:	mov	x1, x3
    c104:	mov	x0, x19
    c108:	blr	x4
    c10c:	ldr	x1, [x19, #320]
    c110:	mov	w2, #0x6153                	// #24915
    c114:	mov	x0, #0x2                   	// #2
    c118:	strh	w2, [x19]
    c11c:	add	x1, x1, #0x1
    c120:	str	x1, [x19, #320]
    c124:	add	x1, x0, #0x1
    c128:	mov	w2, #0x74                  	// #116
    c12c:	strb	w2, [x19, x0]
    c130:	add	x0, x1, #0x1
    c134:	str	x0, [x19, #256]
    c138:	mov	w0, #0x20                  	// #32
    c13c:	strb	w0, [x19, x1]
    c140:	strb	w0, [x19, #264]
    c144:	b	6c2c <d_print_comp_inner+0x1e24>
    c148:	ldp	x3, x2, [x19, #272]
    c14c:	strb	wzr, [x19, #255]
    c150:	mov	x1, x0
    c154:	mov	x0, x19
    c158:	blr	x3
    c15c:	ldr	x0, [x19, #320]
    c160:	mov	x2, #0x1                   	// #1
    c164:	ldr	x23, [x24, #8]
    c168:	mov	w1, #0x28                  	// #40
    c16c:	add	x0, x0, x2
    c170:	strb	w1, [x19]
    c174:	str	x2, [x19, #256]
    c178:	strb	w1, [x19, #264]
    c17c:	str	x0, [x19, #320]
    c180:	cbnz	x23, d0c8 <d_print_comp_inner+0x82c0>
    c184:	mov	w0, #0x29                  	// #41
    c188:	strb	w0, [x19, #1]
    c18c:	strb	w0, [x19, #264]
    c190:	mov	x0, #0x2                   	// #2
    c194:	str	w2, [x19, #304]
    c198:	ldr	w1, [x24]
    c19c:	str	x0, [x19, #256]
    c1a0:	cmp	w1, #0x3e
    c1a4:	b.ne	b77c <d_print_comp_inner+0x6974>  // b.any
    c1a8:	b	c0a8 <d_print_comp_inner+0x72a0>
    c1ac:	add	x1, x0, #0x2
    c1b0:	str	x1, [x19, #256]
    c1b4:	mov	w2, #0x70                  	// #112
    c1b8:	strb	w2, [x19, x3]
    c1bc:	strb	w2, [x19, #264]
    c1c0:	cmp	x1, #0xff
    c1c4:	b.ne	c5e0 <d_print_comp_inner+0x77d8>  // b.any
    c1c8:	ldp	x3, x2, [x19, #272]
    c1cc:	strb	wzr, [x19, #255]
    c1d0:	mov	x0, x19
    c1d4:	blr	x3
    c1d8:	ldr	x0, [x19, #320]
    c1dc:	mov	w2, #0x7261                	// #29281
    c1e0:	mov	x1, #0x2                   	// #2
    c1e4:	strh	w2, [x19]
    c1e8:	add	x0, x0, #0x1
    c1ec:	str	x0, [x19, #320]
    c1f0:	add	x0, x1, #0x1
    c1f4:	mov	w2, #0x6d                  	// #109
    c1f8:	strb	w2, [x19, x1]
    c1fc:	add	x1, x0, #0x1
    c200:	b	9ab0 <d_print_comp_inner+0x4ca8>
    c204:	add	x2, x2, #0x10
    c208:	mov	w1, w20
    c20c:	mov	x0, x19
    c210:	bl	11210 <d_print_function_type.isra.0>
    c214:	ldr	x2, [x24, #8]
    c218:	cbz	x2, d2d0 <d_print_comp_inner+0x84c8>
    c21c:	mov	w1, w20
    c220:	mov	x0, x19
    c224:	bl	dc90 <d_print_comp>
    c228:	ldp	x21, x22, [sp, #32]
    c22c:	ldp	x23, x24, [sp, #48]
    c230:	b	4e70 <d_print_comp_inner+0x68>
    c234:	ldp	x3, x2, [x19, #272]
    c238:	strb	wzr, [x19, #255]
    c23c:	mov	x0, x19
    c240:	blr	x3
    c244:	mov	w0, #0x20                  	// #32
    c248:	strb	w0, [x19]
    c24c:	strb	w0, [x19, #264]
    c250:	mov	x1, #0x1                   	// #1
    c254:	ldr	x0, [x19, #320]
    c258:	str	x1, [x19, #256]
    c25c:	ldrsh	w1, [x24, #16]
    c260:	add	x0, x0, #0x1
    c264:	str	x0, [x19, #320]
    c268:	cbz	w1, c2d4 <d_print_comp_inner+0x74cc>
    c26c:	mov	w0, #0x5f                  	// #95
    c270:	mov	x1, #0x2                   	// #2
    c274:	strb	w0, [x19, #1]
    c278:	add	x3, x1, #0x1
    c27c:	str	x3, [x19, #256]
    c280:	mov	w0, #0x41                  	// #65
    c284:	strb	w0, [x19, x1]
    c288:	strb	w0, [x19, #264]
    c28c:	cmp	x3, #0xff
    c290:	b.ne	c778 <d_print_comp_inner+0x7970>  // b.any
    c294:	ldp	x4, x2, [x19, #272]
    c298:	strb	wzr, [x19, #255]
    c29c:	mov	x1, x3
    c2a0:	mov	x0, x19
    c2a4:	blr	x4
    c2a8:	ldr	x0, [x19, #320]
    c2ac:	mov	w2, #0x6363                	// #25443
    c2b0:	mov	x1, #0x2                   	// #2
    c2b4:	strh	w2, [x19]
    c2b8:	add	x0, x0, #0x1
    c2bc:	str	x0, [x19, #320]
    c2c0:	add	x0, x1, #0x1
    c2c4:	mov	w2, #0x75                  	// #117
    c2c8:	strb	w2, [x19, x1]
    c2cc:	add	x1, x0, #0x1
    c2d0:	b	6cec <d_print_comp_inner+0x1ee4>
    c2d4:	mov	w0, #0x5f                  	// #95
    c2d8:	mov	x1, #0x2                   	// #2
    c2dc:	strb	w0, [x19, #1]
    c2e0:	add	x3, x1, #0x1
    c2e4:	str	x3, [x19, #256]
    c2e8:	mov	w0, #0x46                  	// #70
    c2ec:	strb	w0, [x19, x1]
    c2f0:	strb	w0, [x19, #264]
    c2f4:	cmp	x3, #0xff
    c2f8:	b.ne	c594 <d_print_comp_inner+0x778c>  // b.any
    c2fc:	ldp	x4, x2, [x19, #272]
    c300:	strb	wzr, [x19, #255]
    c304:	mov	x1, x3
    c308:	mov	x0, x19
    c30c:	blr	x4
    c310:	ldr	x0, [x19, #320]
    c314:	mov	w2, #0x6172                	// #24946
    c318:	mov	x1, #0x2                   	// #2
    c31c:	strh	w2, [x19]
    c320:	add	x0, x0, #0x1
    c324:	str	x0, [x19, #320]
    c328:	add	x0, x1, #0x1
    c32c:	mov	w2, #0x63                  	// #99
    c330:	strb	w2, [x19, x1]
    c334:	add	x1, x0, #0x1
    c338:	b	b728 <d_print_comp_inner+0x6920>
    c33c:	ldr	x1, [x19, #256]
    c340:	cmp	x1, #0xff
    c344:	b.ne	c368 <d_print_comp_inner+0x7560>  // b.any
    c348:	ldp	x3, x2, [x19, #272]
    c34c:	strb	wzr, [x19, #255]
    c350:	mov	x0, x19
    c354:	blr	x3
    c358:	ldr	x0, [x19, #320]
    c35c:	mov	x1, #0x0                   	// #0
    c360:	add	x0, x0, #0x1
    c364:	str	x0, [x19, #320]
    c368:	add	x0, x1, #0x1
    c36c:	str	x0, [x19, #256]
    c370:	mov	w0, #0x5d                  	// #93
    c374:	strb	w0, [x19, x1]
    c378:	strb	w0, [x19, #264]
    c37c:	ldp	x21, x22, [sp, #32]
    c380:	ldp	x23, x24, [sp, #48]
    c384:	b	4e70 <d_print_comp_inner+0x68>
    c388:	mov	w1, #0x1                   	// #1
    c38c:	str	w1, [x19, #304]
    c390:	b	766c <d_print_comp_inner+0x2864>
    c394:	ldp	x21, x22, [sp, #32]
    c398:	ldp	x23, x24, [sp, #48]
    c39c:	b	4e70 <d_print_comp_inner+0x68>
    c3a0:	ldp	x21, x22, [sp, #32]
    c3a4:	ldp	x23, x24, [sp, #48]
    c3a8:	b	4e70 <d_print_comp_inner+0x68>
    c3ac:	ldp	x21, x22, [sp, #32]
    c3b0:	ldp	x23, x24, [sp, #48]
    c3b4:	b	4e70 <d_print_comp_inner+0x68>
    c3b8:	ldp	x21, x22, [sp, #32]
    c3bc:	ldp	x23, x24, [sp, #48]
    c3c0:	b	4e70 <d_print_comp_inner+0x68>
    c3c4:	ldp	x21, x22, [sp, #32]
    c3c8:	ldp	x23, x24, [sp, #48]
    c3cc:	b	4e70 <d_print_comp_inner+0x68>
    c3d0:	ldp	x21, x22, [sp, #32]
    c3d4:	ldp	x23, x24, [sp, #48]
    c3d8:	b	4e70 <d_print_comp_inner+0x68>
    c3dc:	ldp	x21, x22, [sp, #32]
    c3e0:	ldp	x23, x24, [sp, #48]
    c3e4:	b	4e70 <d_print_comp_inner+0x68>
    c3e8:	ldp	x21, x22, [sp, #32]
    c3ec:	ldp	x23, x24, [sp, #48]
    c3f0:	b	4e70 <d_print_comp_inner+0x68>
    c3f4:	ldp	x21, x22, [sp, #32]
    c3f8:	ldp	x23, x24, [sp, #48]
    c3fc:	ldp	x25, x26, [sp, #64]
    c400:	b	4e70 <d_print_comp_inner+0x68>
    c404:	mov	w0, #0x1                   	// #1
    c408:	str	w0, [x19, #304]
    c40c:	b	9884 <d_print_comp_inner+0x4a7c>
    c410:	mov	w1, #0x1                   	// #1
    c414:	str	w1, [x19, #304]
    c418:	b	bf88 <d_print_comp_inner+0x7180>
    c41c:	mov	w1, #0x1                   	// #1
    c420:	str	w1, [x19, #304]
    c424:	cbz	x0, be7c <d_print_comp_inner+0x7074>
    c428:	ldr	x0, [sp, #112]
    c42c:	str	x0, [x19, #288]
    c430:	b	be7c <d_print_comp_inner+0x7074>
    c434:	mov	w21, #0x0                   	// #0
    c438:	ldr	x4, [x19, #288]
    c43c:	b	5230 <d_print_comp_inner+0x428>
    c440:	mov	x2, x25
    c444:	mov	w1, w22
    c448:	mov	x0, x19
    c44c:	bl	dc90 <d_print_comp>
    c450:	ldp	x21, x22, [sp, #32]
    c454:	ldp	x23, x24, [sp, #48]
    c458:	ldp	x25, x26, [sp, #64]
    c45c:	b	4e70 <d_print_comp_inner+0x68>
    c460:	add	x3, x0, #0x2
    c464:	str	x3, [x19, #256]
    c468:	mov	w2, #0x68                  	// #104
    c46c:	strb	w2, [x19, x1]
    c470:	strb	w2, [x19, #264]
    c474:	cmp	x3, #0xff
    c478:	b.ne	cd94 <d_print_comp_inner+0x7f8c>  // b.any
    c47c:	ldp	x4, x2, [x19, #272]
    c480:	strb	wzr, [x19, #255]
    c484:	mov	x1, x3
    c488:	mov	x0, x19
    c48c:	blr	x4
    c490:	ldr	x1, [x19, #320]
    c494:	mov	w2, #0x69                  	// #105
    c498:	mov	x0, #0x1                   	// #1
    c49c:	strb	w2, [x19]
    c4a0:	add	x1, x1, x0
    c4a4:	str	x1, [x19, #320]
    c4a8:	b	5628 <d_print_comp_inner+0x820>
    c4ac:	add	x1, x0, #0x2
    c4b0:	str	x1, [x19, #256]
    c4b4:	mov	w2, #0x75                  	// #117
    c4b8:	strb	w2, [x19, x3]
    c4bc:	strb	w2, [x19, #264]
    c4c0:	cmp	x1, #0xff
    c4c4:	b.ne	c72c <d_print_comp_inner+0x7924>  // b.any
    c4c8:	ldp	x3, x2, [x19, #272]
    c4cc:	strb	wzr, [x19, #255]
    c4d0:	mov	x0, x19
    c4d4:	blr	x3
    c4d8:	ldr	x1, [x19, #320]
    c4dc:	mov	w2, #0x74                  	// #116
    c4e0:	mov	x0, #0x1                   	// #1
    c4e4:	strb	w2, [x19]
    c4e8:	add	x1, x1, x0
    c4ec:	str	x1, [x19, #320]
    c4f0:	b	82d4 <d_print_comp_inner+0x34cc>
    c4f4:	ldr	x25, [x25, #8]
    c4f8:	cbz	x25, db08 <d_print_comp_inner+0x8d00>
    c4fc:	ldr	w4, [x25]
    c500:	add	x1, x21, #0x20
    c504:	stp	x1, x25, [sp, #192]
    c508:	sub	w1, w4, #0x1c
    c50c:	str	wzr, [sp, #208]
    c510:	cmp	w1, #0x34
    c514:	str	x3, [sp, #216]
    c518:	b.hi	d924 <d_print_comp_inner+0x8b1c>  // b.pmore
    c51c:	lsl	x0, x0, x1
    c520:	add	x1, x21, #0x40
    c524:	tst	x0, x2
    c528:	b.eq	57a8 <d_print_comp_inner+0x9a0>  // b.none
    c52c:	ldr	x25, [x25, #8]
    c530:	cbz	x25, cba8 <d_print_comp_inner+0x7da0>
    c534:	ldr	w4, [x25]
    c538:	stp	x1, x25, [sp, #224]
    c53c:	sub	w0, w4, #0x1c
    c540:	str	wzr, [sp, #240]
    c544:	cmp	w0, #0x34
    c548:	str	x3, [sp, #248]
    c54c:	b.hi	da48 <d_print_comp_inner+0x8c40>  // b.pmore
    c550:	mov	x1, #0x1f                  	// #31
    c554:	mov	x2, #0x1                   	// #1
    c558:	movk	x1, #0x1a, lsl #48
    c55c:	lsl	x0, x2, x0
    c560:	mov	w20, #0x4                   	// #4
    c564:	tst	x0, x1
    c568:	add	x1, x21, #0x60
    c56c:	b.eq	57a8 <d_print_comp_inner+0x9a0>  // b.none
    c570:	ldr	x0, [x25, #8]
    c574:	mov	x21, x1
    c578:	cbz	x0, cbac <d_print_comp_inner+0x7da4>
    c57c:	ldp	x21, x22, [sp, #32]
    c580:	ldp	x23, x24, [sp, #48]
    c584:	ldp	x25, x26, [sp, #64]
    c588:	str	x1, [x19, #296]
    c58c:	str	w2, [x19, #304]
    c590:	b	4e70 <d_print_comp_inner+0x68>
    c594:	add	x0, x1, #0x2
    c598:	str	x0, [x19, #256]
    c59c:	mov	w1, #0x72                  	// #114
    c5a0:	strb	w1, [x19, x3]
    c5a4:	strb	w1, [x19, #264]
    c5a8:	cmp	x0, #0xff
    c5ac:	b.ne	c660 <d_print_comp_inner+0x7858>  // b.any
    c5b0:	ldp	x3, x2, [x19, #272]
    c5b4:	strb	wzr, [x19, #255]
    c5b8:	mov	x1, x0
    c5bc:	mov	x0, x19
    c5c0:	blr	x3
    c5c4:	ldr	x0, [x19, #320]
    c5c8:	mov	w2, #0x61                  	// #97
    c5cc:	mov	x1, #0x1                   	// #1
    c5d0:	strb	w2, [x19]
    c5d4:	add	x0, x0, x1
    c5d8:	str	x0, [x19, #320]
    c5dc:	b	c328 <d_print_comp_inner+0x7520>
    c5e0:	add	x0, x0, #0x3
    c5e4:	str	x0, [x19, #256]
    c5e8:	mov	w2, #0x61                  	// #97
    c5ec:	strb	w2, [x19, x1]
    c5f0:	strb	w2, [x19, #264]
    c5f4:	cmp	x0, #0xff
    c5f8:	b.ne	c6e0 <d_print_comp_inner+0x78d8>  // b.any
    c5fc:	ldp	x3, x2, [x19, #272]
    c600:	strb	wzr, [x19, #255]
    c604:	mov	x1, x0
    c608:	mov	x0, x19
    c60c:	blr	x3
    c610:	ldr	x0, [x19, #320]
    c614:	mov	w2, #0x72                  	// #114
    c618:	mov	x1, #0x1                   	// #1
    c61c:	strb	w2, [x19]
    c620:	add	x0, x0, x1
    c624:	str	x0, [x19, #320]
    c628:	b	c1f0 <d_print_comp_inner+0x73e8>
    c62c:	ldp	x3, x2, [x19, #272]
    c630:	strb	wzr, [x19, #255]
    c634:	mov	x1, x0
    c638:	mov	x0, x19
    c63c:	blr	x3
    c640:	ldr	x1, [x19, #320]
    c644:	mov	w3, #0x465f                	// #18015
    c648:	mov	w2, #0x72                  	// #114
    c64c:	mov	x0, #0x3                   	// #3
    c650:	add	x1, x1, #0x1
    c654:	strh	w3, [x19]
    c658:	strb	w2, [x19, #2]
    c65c:	str	x1, [x19, #320]
    c660:	add	x1, x0, #0x1
    c664:	str	x1, [x19, #256]
    c668:	mov	w2, #0x61                  	// #97
    c66c:	strb	w2, [x19, x0]
    c670:	strb	w2, [x19, #264]
    c674:	cmp	x1, #0xff
    c678:	b.ne	b6e4 <d_print_comp_inner+0x68dc>  // b.any
    c67c:	ldp	x3, x2, [x19, #272]
    c680:	strb	wzr, [x19, #255]
    c684:	mov	x0, x19
    c688:	blr	x3
    c68c:	ldr	x1, [x19, #320]
    c690:	mov	x0, #0x1                   	// #1
    c694:	mov	w2, #0x63                  	// #99
    c698:	strb	w2, [x19]
    c69c:	add	x1, x1, x0
    c6a0:	str	x1, [x19, #320]
    c6a4:	add	x1, x0, #0x1
    c6a8:	b	b728 <d_print_comp_inner+0x6920>
    c6ac:	ldp	x3, x2, [x19, #272]
    c6b0:	strb	wzr, [x19, #255]
    c6b4:	mov	x1, x0
    c6b8:	mov	x0, x19
    c6bc:	blr	x3
    c6c0:	ldr	x1, [x19, #320]
    c6c4:	mov	w3, #0x707b                	// #28795
    c6c8:	mov	w2, #0x61                  	// #97
    c6cc:	mov	x0, #0x3                   	// #3
    c6d0:	add	x1, x1, #0x1
    c6d4:	strh	w3, [x19]
    c6d8:	strb	w2, [x19, #2]
    c6dc:	str	x1, [x19, #320]
    c6e0:	add	x1, x0, #0x1
    c6e4:	str	x1, [x19, #256]
    c6e8:	mov	w2, #0x72                  	// #114
    c6ec:	strb	w2, [x19, x0]
    c6f0:	strb	w2, [x19, #264]
    c6f4:	cmp	x1, #0xff
    c6f8:	b.ne	9a6c <d_print_comp_inner+0x4c64>  // b.any
    c6fc:	ldp	x3, x2, [x19, #272]
    c700:	strb	wzr, [x19, #255]
    c704:	mov	x0, x19
    c708:	blr	x3
    c70c:	ldr	x1, [x19, #320]
    c710:	mov	x0, #0x1                   	// #1
    c714:	mov	w2, #0x6d                  	// #109
    c718:	strb	w2, [x19]
    c71c:	add	x1, x1, x0
    c720:	str	x1, [x19, #320]
    c724:	add	x1, x0, #0x1
    c728:	b	9ab0 <d_print_comp_inner+0x4ca8>
    c72c:	add	x0, x0, #0x3
    c730:	str	x0, [x19, #256]
    c734:	mov	w2, #0x74                  	// #116
    c738:	strb	w2, [x19, x1]
    c73c:	strb	w2, [x19, #264]
    c740:	cmp	x0, #0xff
    c744:	b.ne	cd50 <d_print_comp_inner+0x7f48>  // b.any
    c748:	ldp	x3, x2, [x19, #272]
    c74c:	strb	wzr, [x19, #255]
    c750:	mov	x1, x0
    c754:	mov	x0, x19
    c758:	blr	x3
    c75c:	ldr	x0, [x19, #320]
    c760:	mov	w2, #0x6f                  	// #111
    c764:	mov	x1, #0x1                   	// #1
    c768:	strb	w2, [x19]
    c76c:	add	x0, x0, x1
    c770:	str	x0, [x19, #320]
    c774:	b	82e0 <d_print_comp_inner+0x34d8>
    c778:	add	x0, x1, #0x2
    c77c:	str	x0, [x19, #256]
    c780:	mov	w20, #0x63                  	// #99
    c784:	strb	w20, [x19, x3]
    c788:	strb	w20, [x19, #264]
    c78c:	cmp	x0, #0xff
    c790:	b.ne	c7f4 <d_print_comp_inner+0x79ec>  // b.any
    c794:	ldp	x3, x2, [x19, #272]
    c798:	strb	wzr, [x19, #255]
    c79c:	mov	x1, x0
    c7a0:	mov	x0, x19
    c7a4:	blr	x3
    c7a8:	strb	w20, [x19]
    c7ac:	ldr	x0, [x19, #320]
    c7b0:	mov	x1, #0x1                   	// #1
    c7b4:	add	x0, x0, x1
    c7b8:	str	x0, [x19, #320]
    c7bc:	b	c2c0 <d_print_comp_inner+0x74b8>
    c7c0:	ldp	x3, x2, [x19, #272]
    c7c4:	strb	wzr, [x19, #255]
    c7c8:	mov	x1, x0
    c7cc:	mov	x0, x19
    c7d0:	blr	x3
    c7d4:	ldr	x1, [x19, #320]
    c7d8:	mov	w3, #0x415f                	// #16735
    c7dc:	mov	w2, #0x63                  	// #99
    c7e0:	mov	x0, #0x3                   	// #3
    c7e4:	add	x1, x1, #0x1
    c7e8:	strh	w3, [x19]
    c7ec:	strb	w2, [x19, #2]
    c7f0:	str	x1, [x19, #320]
    c7f4:	add	x1, x0, #0x1
    c7f8:	str	x1, [x19, #256]
    c7fc:	mov	w2, #0x63                  	// #99
    c800:	strb	w2, [x19, x0]
    c804:	strb	w2, [x19, #264]
    c808:	cmp	x1, #0xff
    c80c:	b.ne	6ca8 <d_print_comp_inner+0x1ea0>  // b.any
    c810:	ldp	x3, x2, [x19, #272]
    c814:	strb	wzr, [x19, #255]
    c818:	mov	x0, x19
    c81c:	blr	x3
    c820:	ldr	x1, [x19, #320]
    c824:	mov	x0, #0x1                   	// #1
    c828:	mov	w2, #0x75                  	// #117
    c82c:	strb	w2, [x19]
    c830:	add	x1, x1, x0
    c834:	str	x1, [x19, #320]
    c838:	add	x1, x0, #0x1
    c83c:	b	6cec <d_print_comp_inner+0x1ee4>
    c840:	ldp	x3, x2, [x19, #272]
    c844:	strb	wzr, [x19, #255]
    c848:	mov	x0, x19
    c84c:	blr	x3
    c850:	ldr	x0, [x19, #320]
    c854:	mov	w1, #0x3a                  	// #58
    c858:	mov	x3, #0x1                   	// #1
    c85c:	strb	w1, [x19]
    c860:	add	x0, x0, x3
    c864:	str	x0, [x19, #320]
    c868:	add	x0, x3, #0x1
    c86c:	b	c068 <d_print_comp_inner+0x7260>
    c870:	cmp	x0, #0xff
    c874:	b.eq	d594 <d_print_comp_inner+0x878c>  // b.none
    c878:	add	x3, x0, #0x1
    c87c:	str	x3, [x19, #256]
    c880:	mov	w1, #0x7b                  	// #123
    c884:	strb	w1, [x19, x0]
    c888:	strb	w1, [x19, #264]
    c88c:	cmp	x3, #0xff
    c890:	b.ne	d34c <d_print_comp_inner+0x8544>  // b.any
    c894:	ldp	x4, x2, [x19, #272]
    c898:	strb	wzr, [x19, #255]
    c89c:	mov	x1, x3
    c8a0:	mov	x0, x19
    c8a4:	blr	x4
    c8a8:	ldr	x0, [x19, #320]
    c8ac:	mov	w2, #0x6564                	// #25956
    c8b0:	mov	w1, #0x66                  	// #102
    c8b4:	mov	x3, #0x3                   	// #3
    c8b8:	add	x0, x0, #0x1
    c8bc:	strh	w2, [x19]
    c8c0:	strb	w1, [x19, #2]
    c8c4:	str	x0, [x19, #320]
    c8c8:	add	x1, x3, #0x1
    c8cc:	str	x1, [x19, #256]
    c8d0:	mov	w0, #0x61                  	// #97
    c8d4:	strb	w0, [x19, x3]
    c8d8:	strb	w0, [x19, #264]
    c8dc:	cmp	x1, #0xff
    c8e0:	b.ne	d398 <d_print_comp_inner+0x8590>  // b.any
    c8e4:	ldp	x3, x2, [x19, #272]
    c8e8:	strb	wzr, [x19, #255]
    c8ec:	mov	x0, x19
    c8f0:	blr	x3
    c8f4:	ldr	x1, [x19, #320]
    c8f8:	mov	w3, #0x6c75                	// #27765
    c8fc:	mov	w2, #0x74                  	// #116
    c900:	mov	x0, #0x3                   	// #3
    c904:	add	x1, x1, #0x1
    c908:	strh	w3, [x19]
    c90c:	strb	w2, [x19, #2]
    c910:	str	x1, [x19, #320]
    c914:	add	x1, x0, #0x1
    c918:	str	x1, [x19, #256]
    c91c:	mov	w2, #0x20                  	// #32
    c920:	strb	w2, [x19, x0]
    c924:	strb	w2, [x19, #264]
    c928:	cmp	x1, #0xff
    c92c:	b.ne	d3e8 <d_print_comp_inner+0x85e0>  // b.any
    c930:	ldp	x3, x2, [x19, #272]
    c934:	strb	wzr, [x19, #255]
    c938:	mov	x0, x19
    c93c:	blr	x3
    c940:	ldr	x0, [x19, #320]
    c944:	mov	w2, #0x7261                	// #29281
    c948:	mov	x1, #0x2                   	// #2
    c94c:	strh	w2, [x19]
    c950:	add	x0, x0, #0x1
    c954:	str	x0, [x19, #320]
    c958:	add	x0, x1, #0x1
    c95c:	mov	w2, #0x67                  	// #103
    c960:	strb	w2, [x19, x1]
    c964:	add	x2, x0, #0x1
    c968:	str	x2, [x19, #256]
    c96c:	mov	w2, #0x23                  	// #35
    c970:	strb	w2, [x19, x0]
    c974:	adrp	x1, 0 <d_make_comp>
    c978:	strb	w2, [x19, #264]
    c97c:	add	x1, x1, #0x0
    c980:	add	x20, sp, #0x80
    c984:	ldr	w2, [x23, #16]
    c988:	mov	x0, x20
    c98c:	add	w2, w2, #0x1
    c990:	bl	0 <sprintf>
    c994:	mov	x0, x20
    c998:	bl	0 <strlen>
    c99c:	cbz	x0, dab0 <d_print_comp_inner+0x8ca8>
    c9a0:	add	x24, x20, x0
    c9a4:	stp	x25, x26, [sp, #64]
    c9a8:	mov	x25, #0x1                   	// #1
    c9ac:	ldr	x1, [x19, #256]
    c9b0:	b	ca0c <d_print_comp_inner+0x7c04>
    c9b4:	ldp	x3, x2, [x19, #272]
    c9b8:	strb	wzr, [x19, #255]
    c9bc:	mov	x0, x19
    c9c0:	add	x20, x20, #0x1
    c9c4:	blr	x3
    c9c8:	strb	w21, [x19]
    c9cc:	ldr	x0, [x19, #320]
    c9d0:	str	x25, [x19, #256]
    c9d4:	strb	w21, [x19, #264]
    c9d8:	cmp	x20, x24
    c9dc:	add	x0, x0, #0x1
    c9e0:	str	x0, [x19, #320]
    c9e4:	b.eq	d76c <d_print_comp_inner+0x8964>  // b.none
    c9e8:	ldrb	w21, [x20]
    c9ec:	mov	x0, #0x1                   	// #1
    c9f0:	add	x1, x0, #0x1
    c9f4:	str	x1, [x19, #256]
    c9f8:	strb	w21, [x19, x0]
    c9fc:	add	x20, x20, #0x1
    ca00:	strb	w21, [x19, #264]
    ca04:	cmp	x20, x24
    ca08:	b.eq	90fc <d_print_comp_inner+0x42f4>  // b.none
    ca0c:	ldrb	w21, [x20]
    ca10:	cmp	x1, #0xff
    ca14:	b.eq	c9b4 <d_print_comp_inner+0x7bac>  // b.none
    ca18:	mov	x0, x1
    ca1c:	b	c9f0 <d_print_comp_inner+0x7be8>
    ca20:	ldp	x21, x22, [sp, #32]
    ca24:	ldp	x23, x24, [sp, #48]
    ca28:	b	4e70 <d_print_comp_inner+0x68>
    ca2c:	mov	w0, #0x1                   	// #1
    ca30:	ldp	x21, x22, [sp, #32]
    ca34:	ldp	x23, x24, [sp, #48]
    ca38:	str	w0, [x19, #304]
    ca3c:	b	4e70 <d_print_comp_inner+0x68>
    ca40:	ldr	x25, [x25, #16]
    ca44:	ldr	w4, [x25]
    ca48:	cmp	w4, #0x47
    ca4c:	b.eq	d744 <d_print_comp_inner+0x893c>  // b.none
    ca50:	sub	w2, w4, #0x1c
    ca54:	cmp	w2, #0x34
    ca58:	b.hi	57b4 <d_print_comp_inner+0x9ac>  // b.pmore
    ca5c:	mov	x0, #0x1                   	// #1
    ca60:	mov	x1, #0x1f                  	// #31
    ca64:	movk	x1, #0x1a, lsl #48
    ca68:	lsl	x2, x0, x2
    ca6c:	tst	x2, x1
    ca70:	b.eq	57b4 <d_print_comp_inner+0x9ac>  // b.none
    ca74:	cmp	w20, #0x4
    ca78:	b.eq	cbb0 <d_print_comp_inner+0x7da8>  // b.none
    ca7c:	sub	w2, w20, #0x1
    ca80:	ubfiz	x8, x20, #5, #32
    ca84:	add	x7, x21, x8
    ca88:	add	x9, sp, #0x88
    ca8c:	add	x12, x21, x2, lsl #5
    ca90:	lsl	x2, x2, #5
    ca94:	add	x11, sp, #0x90
    ca98:	add	x10, sp, #0x98
    ca9c:	add	w6, w20, #0x1
    caa0:	ldp	x4, x5, [x12]
    caa4:	stp	x4, x5, [x7]
    caa8:	ldp	x4, x5, [x12, #16]
    caac:	stp	x4, x5, [x7, #16]
    cab0:	str	x12, [x21, x8]
    cab4:	str	x25, [x9, x2]
    cab8:	ldr	x25, [x25, #8]
    cabc:	str	wzr, [x11, x2]
    cac0:	str	x3, [x10, x2]
    cac4:	ldr	w4, [x25]
    cac8:	str	x7, [x19, #296]
    cacc:	sub	w2, w4, #0x1c
    cad0:	cmp	w2, #0x34
    cad4:	b.hi	cae4 <d_print_comp_inner+0x7cdc>  // b.pmore
    cad8:	lsl	x2, x0, x2
    cadc:	tst	x2, x1
    cae0:	b.ne	caec <d_print_comp_inner+0x7ce4>  // b.any
    cae4:	mov	w20, w6
    cae8:	b	57b4 <d_print_comp_inner+0x9ac>
    caec:	cmp	w6, #0x4
    caf0:	b.eq	cbb0 <d_print_comp_inner+0x7da8>  // b.none
    caf4:	ubfiz	x6, x6, #5, #32
    caf8:	add	w20, w20, #0x2
    cafc:	add	x2, x21, x6
    cb00:	ldp	x4, x5, [x7]
    cb04:	stp	x4, x5, [x2]
    cb08:	ldp	x4, x5, [x7, #16]
    cb0c:	stp	x4, x5, [x2, #16]
    cb10:	str	x7, [x21, x6]
    cb14:	str	x25, [x9, x8]
    cb18:	ldr	x25, [x25, #8]
    cb1c:	str	wzr, [x11, x8]
    cb20:	str	x3, [x10, x8]
    cb24:	ldr	w4, [x25]
    cb28:	str	x2, [x19, #296]
    cb2c:	sub	w2, w4, #0x1c
    cb30:	cmp	w2, #0x34
    cb34:	b.hi	57b4 <d_print_comp_inner+0x9ac>  // b.pmore
    cb38:	lsl	x0, x0, x2
    cb3c:	tst	x0, x1
    cb40:	b.eq	57b4 <d_print_comp_inner+0x9ac>  // b.none
    cb44:	cmp	w20, #0x4
    cb48:	b.eq	cbb0 <d_print_comp_inner+0x7da8>  // b.none
    cb4c:	ldp	x0, x1, [sp, #192]
    cb50:	str	x25, [sp, #200]
    cb54:	ldr	x25, [x25, #8]
    cb58:	stp	x0, x1, [sp, #224]
    cb5c:	add	x1, x21, #0x40
    cb60:	ldp	x6, x7, [sp, #208]
    cb64:	add	x0, x21, #0x60
    cb68:	ldr	w4, [x25]
    cb6c:	str	wzr, [sp, #208]
    cb70:	stp	x3, x1, [sp, #216]
    cb74:	sub	w2, w4, #0x1c
    cb78:	cmp	w2, #0x34
    cb7c:	stp	x6, x7, [sp, #240]
    cb80:	str	x0, [x19, #296]
    cb84:	b.hi	cba0 <d_print_comp_inner+0x7d98>  // b.pmore
    cb88:	mov	x0, #0x1                   	// #1
    cb8c:	mov	x1, #0x1f                  	// #31
    cb90:	movk	x1, #0x1a, lsl #48
    cb94:	lsl	x0, x0, x2
    cb98:	tst	x0, x1
    cb9c:	b.ne	cbb0 <d_print_comp_inner+0x7da8>  // b.any
    cba0:	mov	w20, #0x4                   	// #4
    cba4:	b	57b4 <d_print_comp_inner+0x9ac>
    cba8:	add	x21, x21, #0x40
    cbac:	str	x21, [x19, #296]
    cbb0:	mov	w0, #0x1                   	// #1
    cbb4:	ldp	x21, x22, [sp, #32]
    cbb8:	ldp	x23, x24, [sp, #48]
    cbbc:	ldp	x25, x26, [sp, #64]
    cbc0:	str	w0, [x19, #304]
    cbc4:	b	4e70 <d_print_comp_inner+0x68>
    cbc8:	mov	w1, #0x1                   	// #1
    cbcc:	str	w1, [x19, #304]
    cbd0:	b	bb74 <d_print_comp_inner+0x6d6c>
    cbd4:	ldr	x4, [x19, #288]
    cbd8:	add	x0, sp, #0x80
    cbdc:	str	x0, [x19, #296]
    cbe0:	mov	w1, w20
    cbe4:	mov	x0, x19
    cbe8:	stp	x3, x24, [sp, #128]
    cbec:	str	wzr, [sp, #144]
    cbf0:	str	x4, [sp, #152]
    cbf4:	bl	dc90 <d_print_comp>
    cbf8:	ldr	w0, [sp, #144]
    cbfc:	ldr	x1, [sp, #128]
    cc00:	str	x1, [x19, #296]
    cc04:	cbnz	w0, d7c4 <d_print_comp_inner+0x89bc>
    cc08:	ldr	x1, [x19, #256]
    cc0c:	cmp	x1, #0xff
    cc10:	b.ne	cc38 <d_print_comp_inner+0x7e30>  // b.any
    cc14:	ldp	x3, x2, [x19, #272]
    cc18:	strb	wzr, [x19, #255]
    cc1c:	mov	x0, x19
    cc20:	blr	x3
    cc24:	str	xzr, [x19, #256]
    cc28:	ldr	x0, [x19, #320]
    cc2c:	mov	x1, #0x0                   	// #0
    cc30:	add	x0, x0, #0x1
    cc34:	str	x0, [x19, #320]
    cc38:	add	x0, x1, #0x1
    cc3c:	str	x0, [x19, #256]
    cc40:	mov	w0, #0x20                  	// #32
    cc44:	strb	w0, [x19, x1]
    cc48:	strb	w0, [x19, #264]
    cc4c:	ldr	x3, [x19, #296]
    cc50:	b	58f4 <d_print_comp_inner+0xaec>
    cc54:	ldr	w4, [x19, #344]
    cc58:	ldr	x5, [x19, #336]
    cc5c:	cmp	w4, #0x0
    cc60:	b.le	d998 <d_print_comp_inner+0x8b90>
    cc64:	sub	w2, w4, #0x1
    cc68:	add	x0, x5, #0x10
    cc6c:	mov	x1, x5
    cc70:	add	x2, x0, w2, uxtw #4
    cc74:	b	cc84 <d_print_comp_inner+0x7e7c>
    cc78:	add	x1, x1, #0x10
    cc7c:	cmp	x2, x1
    cc80:	b.eq	d998 <d_print_comp_inner+0x8b90>  // b.none
    cc84:	ldr	x0, [x1]
    cc88:	cmp	x3, x0
    cc8c:	b.ne	cc78 <d_print_comp_inner+0x7e70>  // b.any
    cc90:	ldr	x4, [x19, #328]
    cc94:	mov	x0, x4
    cc98:	cbnz	x4, ccb4 <d_print_comp_inner+0x7eac>
    cc9c:	b	d754 <d_print_comp_inner+0x894c>
    cca0:	cmp	x2, x24
    cca4:	ccmp	x4, x0, #0x4, eq  // eq = none
    cca8:	b.ne	ccc0 <d_print_comp_inner+0x7eb8>  // b.any
    ccac:	ldr	x0, [x0, #8]
    ccb0:	cbz	x0, d754 <d_print_comp_inner+0x894c>
    ccb4:	ldr	x2, [x0]
    ccb8:	cmp	x2, x3
    ccbc:	b.ne	cca0 <d_print_comp_inner+0x7e98>  // b.any
    ccc0:	ldr	x4, [x19, #288]
    ccc4:	cbz	x4, dc30 <d_print_comp_inner+0x8e28>
    ccc8:	mov	w21, #0x0                   	// #0
    cccc:	ldr	x2, [x3, #8]
    ccd0:	ldr	x0, [x4, #8]
    ccd4:	mov	w1, w2
    ccd8:	ldr	x0, [x0, #16]
    ccdc:	tbnz	w2, #31, d2e0 <d_print_comp_inner+0x84d8>
    cce0:	cbnz	x0, ccf8 <d_print_comp_inner+0x7ef0>
    cce4:	b	cd04 <d_print_comp_inner+0x7efc>
    cce8:	cbz	w1, d2dc <d_print_comp_inner+0x84d4>
    ccec:	ldr	x0, [x0, #16]
    ccf0:	sub	w1, w1, #0x1
    ccf4:	cbz	x0, cd04 <d_print_comp_inner+0x7efc>
    ccf8:	ldr	w2, [x0]
    ccfc:	cmp	w2, #0x2f
    cd00:	b.eq	cce8 <d_print_comp_inner+0x7ee0>  // b.none
    cd04:	cbz	w21, dc30 <d_print_comp_inner+0x8e28>
    cd08:	ldp	x21, x22, [sp, #32]
    cd0c:	ldp	x25, x26, [sp, #64]
    cd10:	str	x23, [x19, #288]
    cd14:	ldp	x23, x24, [sp, #48]
    cd18:	b	4ea4 <d_print_comp_inner+0x9c>
    cd1c:	ldp	x3, x2, [x19, #272]
    cd20:	strb	wzr, [x19, #255]
    cd24:	mov	x1, x0
    cd28:	mov	x0, x19
    cd2c:	blr	x3
    cd30:	ldr	x1, [x19, #320]
    cd34:	mov	w3, #0x7561                	// #30049
    cd38:	mov	w2, #0x74                  	// #116
    cd3c:	mov	x0, #0x3                   	// #3
    cd40:	add	x1, x1, #0x1
    cd44:	strh	w3, [x19]
    cd48:	strb	w2, [x19, #2]
    cd4c:	str	x1, [x19, #320]
    cd50:	add	x1, x0, #0x1
    cd54:	str	x1, [x19, #256]
    cd58:	mov	w2, #0x6f                  	// #111
    cd5c:	strb	w2, [x19, x0]
    cd60:	strb	w2, [x19, #264]
    cd64:	cmp	x1, #0xff
    cd68:	b.ne	82e0 <d_print_comp_inner+0x34d8>  // b.any
    cd6c:	ldp	x3, x2, [x19, #272]
    cd70:	strb	wzr, [x19, #255]
    cd74:	mov	x0, x19
    cd78:	blr	x3
    cd7c:	ldr	x2, [x19, #320]
    cd80:	mov	x0, #0x1                   	// #1
    cd84:	mov	x1, #0x0                   	// #0
    cd88:	add	x2, x2, x0
    cd8c:	str	x2, [x19, #320]
    cd90:	b	82e4 <d_print_comp_inner+0x34dc>
    cd94:	add	x0, x0, #0x3
    cd98:	str	x0, [x19, #256]
    cd9c:	mov	w1, #0x69                  	// #105
    cda0:	strb	w1, [x19, x3]
    cda4:	strb	w1, [x19, #264]
    cda8:	cmp	x0, #0xff
    cdac:	b.ne	5628 <d_print_comp_inner+0x820>  // b.any
    cdb0:	ldp	x3, x2, [x19, #272]
    cdb4:	strb	wzr, [x19, #255]
    cdb8:	mov	x1, x0
    cdbc:	mov	x0, x19
    cdc0:	blr	x3
    cdc4:	ldr	x2, [x19, #320]
    cdc8:	mov	x1, #0x1                   	// #1
    cdcc:	mov	x0, #0x0                   	// #0
    cdd0:	add	x2, x2, x1
    cdd4:	str	x2, [x19, #320]
    cdd8:	b	562c <d_print_comp_inner+0x824>
    cddc:	add	x3, x2, #0x10
    cde0:	mov	w1, w22
    cde4:	ldr	x2, [x2, #8]
    cde8:	mov	x0, x19
    cdec:	bl	dfe0 <d_maybe_print_fold_expression.isra.0>
    cdf0:	cbnz	w0, d90c <d_print_comp_inner+0x8b04>
    cdf4:	stp	x25, x26, [sp, #64]
    cdf8:	adrp	x1, 0 <d_make_comp>
    cdfc:	add	x1, x1, #0x0
    ce00:	ldp	x25, x3, [x24, #8]
    ce04:	ldr	x0, [x25, #8]
    ce08:	ldp	x21, x2, [x3, #8]
    ce0c:	ldr	x0, [x0]
    ce10:	ldp	x23, x20, [x2, #8]
    ce14:	bl	0 <strcmp>
    ce18:	cbnz	w0, d868 <d_print_comp_inner+0x8a60>
    ce1c:	mov	x2, x21
    ce20:	mov	w1, w22
    ce24:	mov	x0, x19
    ce28:	bl	de90 <d_print_subexpr>
    ce2c:	mov	x2, x25
    ce30:	mov	w1, w22
    ce34:	mov	x0, x19
    ce38:	bl	dd28 <d_print_expr_op>
    ce3c:	mov	x2, x23
    ce40:	mov	w1, w22
    ce44:	mov	x0, x19
    ce48:	bl	de90 <d_print_subexpr>
    ce4c:	mov	x0, x19
    ce50:	mov	x2, #0x3                   	// #3
    ce54:	adrp	x1, 0 <d_make_comp>
    ce58:	add	x1, x1, #0x0
    ce5c:	bl	170 <d_append_buffer>
    ce60:	mov	w1, w22
    ce64:	mov	x2, x20
    ce68:	mov	x0, x19
    ce6c:	bl	de90 <d_print_subexpr>
    ce70:	ldp	x21, x22, [sp, #32]
    ce74:	ldp	x23, x24, [sp, #48]
    ce78:	ldp	x25, x26, [sp, #64]
    ce7c:	b	4e70 <d_print_comp_inner+0x68>
    ce80:	ldp	x3, x2, [x19, #272]
    ce84:	strb	wzr, [x19, #255]
    ce88:	mov	x1, x0
    ce8c:	mov	x0, x19
    ce90:	blr	x3
    ce94:	ldr	x0, [x19, #320]
    ce98:	mov	w2, #0x6874                	// #26740
    ce9c:	mov	x1, #0x2                   	// #2
    cea0:	strh	w2, [x19]
    cea4:	add	x0, x0, #0x1
    cea8:	str	x0, [x19, #320]
    ceac:	b	561c <d_print_comp_inner+0x814>
    ceb0:	ldrb	w0, [x0]
    ceb4:	sub	w1, w0, #0x63
    ceb8:	sub	w0, w0, #0x72
    cebc:	and	w1, w1, #0xff
    cec0:	and	w0, w0, #0xff
    cec4:	cmp	w1, #0x1
    cec8:	ccmp	w0, #0x1, #0x0, hi  // hi = pmore
    cecc:	b.hi	76f4 <d_print_comp_inner+0x28ec>  // b.pmore
    ced0:	mov	w1, w22
    ced4:	mov	x0, x19
    ced8:	bl	dd28 <d_print_expr_op>
    cedc:	ldr	x1, [x19, #256]
    cee0:	cmp	x1, #0xff
    cee4:	b.ne	cf0c <d_print_comp_inner+0x8104>  // b.any
    cee8:	ldp	x3, x2, [x19, #272]
    ceec:	strb	wzr, [x19, #255]
    cef0:	mov	x0, x19
    cef4:	blr	x3
    cef8:	str	xzr, [x19, #256]
    cefc:	ldr	x0, [x19, #320]
    cf00:	mov	x1, #0x0                   	// #0
    cf04:	add	x0, x0, #0x1
    cf08:	str	x0, [x19, #320]
    cf0c:	add	x0, x1, #0x1
    cf10:	str	x0, [x19, #256]
    cf14:	mov	w0, #0x3c                  	// #60
    cf18:	strb	w0, [x19, x1]
    cf1c:	strb	w0, [x19, #264]
    cf20:	mov	w1, w22
    cf24:	mov	x0, x19
    cf28:	ldr	x2, [x24, #16]
    cf2c:	ldr	x2, [x2, #8]
    cf30:	bl	dc90 <d_print_comp>
    cf34:	ldr	x1, [x19, #256]
    cf38:	cmp	x1, #0xff
    cf3c:	b.eq	d434 <d_print_comp_inner+0x862c>  // b.none
    cf40:	add	x0, x1, #0x1
    cf44:	str	x0, [x19, #256]
    cf48:	mov	w2, #0x3e                  	// #62
    cf4c:	strb	w2, [x19, x1]
    cf50:	strb	w2, [x19, #264]
    cf54:	cmp	x0, #0xff
    cf58:	b.ne	d45c <d_print_comp_inner+0x8654>  // b.any
    cf5c:	ldp	x3, x2, [x19, #272]
    cf60:	strb	wzr, [x19, #255]
    cf64:	mov	x1, x0
    cf68:	mov	x0, x19
    cf6c:	blr	x3
    cf70:	ldr	x1, [x19, #320]
    cf74:	mov	x2, #0x1                   	// #1
    cf78:	mov	x0, #0x0                   	// #0
    cf7c:	add	x1, x1, x2
    cf80:	str	x1, [x19, #320]
    cf84:	str	x2, [x19, #256]
    cf88:	mov	w2, #0x28                  	// #40
    cf8c:	strb	w2, [x19, x0]
    cf90:	mov	w1, w22
    cf94:	strb	w2, [x19, #264]
    cf98:	mov	x0, x19
    cf9c:	ldr	x2, [x24, #16]
    cfa0:	ldr	x2, [x2, #16]
    cfa4:	bl	dc90 <d_print_comp>
    cfa8:	ldr	x1, [x19, #256]
    cfac:	cmp	x1, #0xff
    cfb0:	b.ne	cfd8 <d_print_comp_inner+0x81d0>  // b.any
    cfb4:	ldp	x3, x2, [x19, #272]
    cfb8:	strb	wzr, [x19, #255]
    cfbc:	mov	x0, x19
    cfc0:	blr	x3
    cfc4:	str	xzr, [x19, #256]
    cfc8:	ldr	x0, [x19, #320]
    cfcc:	mov	x1, #0x0                   	// #0
    cfd0:	add	x0, x0, #0x1
    cfd4:	str	x0, [x19, #320]
    cfd8:	add	x0, x1, #0x1
    cfdc:	str	x0, [x19, #256]
    cfe0:	mov	w0, #0x29                  	// #41
    cfe4:	strb	w0, [x19, x1]
    cfe8:	strb	w0, [x19, #264]
    cfec:	ldp	x21, x22, [sp, #32]
    cff0:	ldp	x23, x24, [sp, #48]
    cff4:	b	4e70 <d_print_comp_inner+0x68>
    cff8:	add	x1, x0, #0x2
    cffc:	str	x1, [x19, #256]
    d000:	mov	w2, #0x53                  	// #83
    d004:	strb	w2, [x19, x3]
    d008:	strb	w2, [x19, #264]
    d00c:	cmp	x1, #0xff
    d010:	b.ne	d058 <d_print_comp_inner+0x8250>  // b.any
    d014:	ldp	x3, x2, [x19, #272]
    d018:	strb	wzr, [x19, #255]
    d01c:	mov	x0, x19
    d020:	blr	x3
    d024:	ldr	x1, [x19, #320]
    d028:	mov	w2, #0x61                  	// #97
    d02c:	mov	x0, #0x1                   	// #1
    d030:	strb	w2, [x19]
    d034:	add	x1, x1, x0
    d038:	str	x1, [x19, #320]
    d03c:	b	c124 <d_print_comp_inner+0x731c>
    d040:	ldr	x0, [x19, #256]
    d044:	cmp	x0, x21
    d048:	b.eq	9788 <d_print_comp_inner+0x4980>  // b.none
    d04c:	ldp	x21, x22, [sp, #32]
    d050:	ldp	x23, x24, [sp, #48]
    d054:	b	4e70 <d_print_comp_inner+0x68>
    d058:	add	x0, x0, #0x3
    d05c:	str	x0, [x19, #256]
    d060:	mov	w2, #0x61                  	// #97
    d064:	strb	w2, [x19, x1]
    d068:	strb	w2, [x19, #264]
    d06c:	cmp	x0, #0xff
    d070:	b.ne	d268 <d_print_comp_inner+0x8460>  // b.any
    d074:	ldp	x3, x2, [x19, #272]
    d078:	strb	wzr, [x19, #255]
    d07c:	mov	x1, x0
    d080:	mov	x0, x19
    d084:	blr	x3
    d088:	ldr	x0, [x19, #320]
    d08c:	mov	w2, #0x74                  	// #116
    d090:	mov	x1, #0x1                   	// #1
    d094:	strb	w2, [x19]
    d098:	add	x0, x0, x1
    d09c:	str	x0, [x19, #320]
    d0a0:	b	c130 <d_print_comp_inner+0x7328>
    d0a4:	ldp	x21, x22, [sp, #32]
    d0a8:	ldp	x23, x24, [sp, #48]
    d0ac:	b	4e70 <d_print_comp_inner+0x68>
    d0b0:	ldp	x21, x22, [sp, #32]
    d0b4:	ldp	x23, x24, [sp, #48]
    d0b8:	b	4e70 <d_print_comp_inner+0x68>
    d0bc:	ldp	x21, x22, [sp, #32]
    d0c0:	ldp	x23, x24, [sp, #48]
    d0c4:	b	4e70 <d_print_comp_inner+0x68>
    d0c8:	ldr	w0, [x23, #4]
    d0cc:	mov	x1, x2
    d0d0:	cmp	w0, #0x1
    d0d4:	b.le	532c <d_print_comp_inner+0x524>
    d0d8:	b	c184 <d_print_comp_inner+0x737c>
    d0dc:	ldp	x21, x22, [sp, #32]
    d0e0:	ldp	x23, x24, [sp, #48]
    d0e4:	b	4e70 <d_print_comp_inner+0x68>
    d0e8:	sub	w3, w0, #0x61
    d0ec:	and	w3, w3, #0xff
    d0f0:	cmp	w3, #0x5
    d0f4:	b.hi	da54 <d_print_comp_inner+0x8c4c>  // b.pmore
    d0f8:	sub	w0, w0, #0x57
    d0fc:	b	99d8 <d_print_comp_inner+0x4bd0>
    d100:	ldp	x21, x22, [sp, #32]
    d104:	ldp	x23, x24, [sp, #48]
    d108:	b	4e70 <d_print_comp_inner+0x68>
    d10c:	ldr	w1, [x19, #316]
    d110:	tbnz	w1, #31, 9814 <d_print_comp_inner+0x4a0c>
    d114:	mov	x0, x20
    d118:	bl	240 <d_index_template_argument.part.0>
    d11c:	mov	x20, x0
    d120:	cbnz	x0, 9814 <d_print_comp_inner+0x4a0c>
    d124:	b	4e9c <d_print_comp_inner+0x94>
    d128:	mov	w2, w3
    d12c:	adrp	x1, 0 <d_make_comp>
    d130:	add	x1, x1, #0x0
    d134:	add	x20, sp, #0x80
    d138:	mov	x0, x20
    d13c:	bl	0 <sprintf>
    d140:	mov	x0, x20
    d144:	bl	0 <strlen>
    d148:	cbz	x0, dc24 <d_print_comp_inner+0x8e1c>
    d14c:	add	x22, x20, x0
    d150:	mov	x23, #0x1                   	// #1
    d154:	ldr	x1, [x19, #256]
    d158:	b	d1b4 <d_print_comp_inner+0x83ac>
    d15c:	ldp	x3, x2, [x19, #272]
    d160:	strb	wzr, [x19, #255]
    d164:	mov	x0, x19
    d168:	add	x20, x20, #0x1
    d16c:	blr	x3
    d170:	strb	w21, [x19]
    d174:	ldr	x0, [x19, #320]
    d178:	str	x23, [x19, #256]
    d17c:	strb	w21, [x19, #264]
    d180:	cmp	x20, x22
    d184:	add	x0, x0, #0x1
    d188:	str	x0, [x19, #320]
    d18c:	b.eq	d958 <d_print_comp_inner+0x8b50>  // b.none
    d190:	ldrb	w21, [x20]
    d194:	mov	x0, #0x1                   	// #1
    d198:	add	x1, x0, #0x1
    d19c:	str	x1, [x19, #256]
    d1a0:	strb	w21, [x19, x0]
    d1a4:	add	x20, x20, #0x1
    d1a8:	strb	w21, [x19, #264]
    d1ac:	cmp	x22, x20
    d1b0:	b.eq	d738 <d_print_comp_inner+0x8930>  // b.none
    d1b4:	ldrb	w21, [x20]
    d1b8:	cmp	x1, #0xff
    d1bc:	b.eq	d15c <d_print_comp_inner+0x8354>  // b.none
    d1c0:	mov	x0, x1
    d1c4:	b	d198 <d_print_comp_inner+0x8390>
    d1c8:	cmp	w1, #0x63
    d1cc:	b.eq	d844 <d_print_comp_inner+0x8a3c>  // b.none
    d1d0:	mov	w1, w22
    d1d4:	mov	x0, x19
    d1d8:	bl	dd28 <d_print_expr_op>
    d1dc:	ldr	x2, [x24, #16]
    d1e0:	mov	w1, w22
    d1e4:	mov	x0, x19
    d1e8:	ldr	x2, [x2, #16]
    d1ec:	bl	de90 <d_print_subexpr>
    d1f0:	b	7828 <d_print_comp_inner+0x2a20>
    d1f4:	ldr	x0, [x20, #8]
    d1f8:	adrp	x1, 0 <d_make_comp>
    d1fc:	mov	x2, #0x6                   	// #6
    d200:	add	x1, x1, #0x0
    d204:	bl	0 <strncmp>
    d208:	cbnz	w0, 8020 <d_print_comp_inner+0x3218>
    d20c:	ldr	x2, [x24, #16]
    d210:	mov	w1, w22
    d214:	mov	x0, x19
    d218:	bl	dc90 <d_print_comp>
    d21c:	mov	x0, x19
    d220:	adrp	x1, 0 <d_make_comp>
    d224:	mov	x2, #0x2                   	// #2
    d228:	add	x1, x1, #0x0
    d22c:	bl	170 <d_append_buffer>
    d230:	b	81dc <d_print_comp_inner+0x33d4>
    d234:	ldp	x3, x2, [x19, #272]
    d238:	strb	wzr, [x19, #255]
    d23c:	mov	x1, x0
    d240:	mov	x0, x19
    d244:	blr	x3
    d248:	ldr	x1, [x19, #320]
    d24c:	mov	w3, #0x535f                	// #21343
    d250:	mov	w2, #0x61                  	// #97
    d254:	mov	x0, #0x3                   	// #3
    d258:	add	x1, x1, #0x1
    d25c:	strh	w3, [x19]
    d260:	strb	w2, [x19, #2]
    d264:	str	x1, [x19, #320]
    d268:	add	x1, x0, #0x1
    d26c:	str	x1, [x19, #256]
    d270:	mov	w2, #0x74                  	// #116
    d274:	strb	w2, [x19, x0]
    d278:	strb	w2, [x19, #264]
    d27c:	cmp	x1, #0xff
    d280:	b.ne	c130 <d_print_comp_inner+0x7328>  // b.any
    d284:	ldp	x3, x2, [x19, #272]
    d288:	strb	wzr, [x19, #255]
    d28c:	mov	x0, x19
    d290:	blr	x3
    d294:	ldr	x2, [x19, #320]
    d298:	mov	x0, #0x1                   	// #1
    d29c:	mov	x1, #0x0                   	// #0
    d2a0:	add	x2, x2, x0
    d2a4:	str	x2, [x19, #320]
    d2a8:	b	c134 <d_print_comp_inner+0x732c>
    d2ac:	ldp	x21, x22, [sp, #32]
    d2b0:	ldp	x23, x24, [sp, #48]
    d2b4:	b	4e70 <d_print_comp_inner+0x68>
    d2b8:	ldp	x21, x22, [sp, #32]
    d2bc:	ldp	x23, x24, [sp, #48]
    d2c0:	b	4e70 <d_print_comp_inner+0x68>
    d2c4:	ldp	x21, x22, [sp, #32]
    d2c8:	ldp	x23, x24, [sp, #48]
    d2cc:	b	4e70 <d_print_comp_inner+0x68>
    d2d0:	ldp	x21, x22, [sp, #32]
    d2d4:	ldp	x23, x24, [sp, #48]
    d2d8:	b	4e70 <d_print_comp_inner+0x68>
    d2dc:	ldr	x0, [x0, #8]
    d2e0:	cbz	x0, cd04 <d_print_comp_inner+0x7efc>
    d2e4:	ldr	w1, [x0]
    d2e8:	cmp	w1, #0x2f
    d2ec:	b.ne	5214 <d_print_comp_inner+0x40c>  // b.any
    d2f0:	ldr	w1, [x19, #316]
    d2f4:	tbnz	w1, #31, dae0 <d_print_comp_inner+0x8cd8>
    d2f8:	bl	240 <d_index_template_argument.part.0>
    d2fc:	cbz	x0, cd04 <d_print_comp_inner+0x7efc>
    d300:	ldr	w1, [x0]
    d304:	b	5214 <d_print_comp_inner+0x40c>
    d308:	ldr	x2, [x24, #8]
    d30c:	mov	w1, w22
    d310:	mov	x0, x19
    d314:	bl	de90 <d_print_subexpr>
    d318:	mov	x0, x19
    d31c:	adrp	x1, 0 <d_make_comp>
    d320:	mov	x2, #0x3                   	// #3
    d324:	add	x1, x1, #0x0
    d328:	bl	170 <d_append_buffer>
    d32c:	ldp	x21, x22, [sp, #32]
    d330:	ldp	x23, x24, [sp, #48]
    d334:	ldp	x25, x26, [sp, #64]
    d338:	b	4e70 <d_print_comp_inner+0x68>
    d33c:	ldp	x21, x22, [sp, #32]
    d340:	ldp	x23, x24, [sp, #48]
    d344:	ldp	x25, x26, [sp, #64]
    d348:	b	4e70 <d_print_comp_inner+0x68>
    d34c:	add	x1, x0, #0x2
    d350:	str	x1, [x19, #256]
    d354:	mov	w2, #0x64                  	// #100
    d358:	strb	w2, [x19, x3]
    d35c:	strb	w2, [x19, #264]
    d360:	cmp	x1, #0xff
    d364:	b.ne	d4b0 <d_print_comp_inner+0x86a8>  // b.any
    d368:	ldp	x3, x2, [x19, #272]
    d36c:	strb	wzr, [x19, #255]
    d370:	mov	x0, x19
    d374:	blr	x3
    d378:	ldr	x0, [x19, #320]
    d37c:	mov	w3, #0x6665                	// #26213
    d380:	mov	w2, #0x61                  	// #97
    d384:	mov	x1, #0x3                   	// #3
    d388:	add	x0, x0, #0x1
    d38c:	strh	w3, [x19]
    d390:	strb	w2, [x19, #2]
    d394:	str	x0, [x19, #320]
    d398:	add	x0, x1, #0x1
    d39c:	str	x0, [x19, #256]
    d3a0:	mov	w2, #0x75                  	// #117
    d3a4:	strb	w2, [x19, x1]
    d3a8:	strb	w2, [x19, #264]
    d3ac:	cmp	x0, #0xff
    d3b0:	b.ne	d500 <d_print_comp_inner+0x86f8>  // b.any
    d3b4:	ldp	x3, x2, [x19, #272]
    d3b8:	strb	wzr, [x19, #255]
    d3bc:	mov	x1, x0
    d3c0:	mov	x0, x19
    d3c4:	blr	x3
    d3c8:	ldr	x0, [x19, #320]
    d3cc:	mov	w3, #0x746c                	// #29804
    d3d0:	mov	w2, #0x20                  	// #32
    d3d4:	mov	x1, #0x3                   	// #3
    d3d8:	add	x0, x0, #0x1
    d3dc:	strh	w3, [x19]
    d3e0:	strb	w2, [x19, #2]
    d3e4:	str	x0, [x19, #320]
    d3e8:	add	x0, x1, #0x1
    d3ec:	str	x0, [x19, #256]
    d3f0:	mov	w2, #0x61                  	// #97
    d3f4:	strb	w2, [x19, x1]
    d3f8:	strb	w2, [x19, #264]
    d3fc:	cmp	x0, #0xff
    d400:	b.ne	d54c <d_print_comp_inner+0x8744>  // b.any
    d404:	ldp	x3, x2, [x19, #272]
    d408:	strb	wzr, [x19, #255]
    d40c:	mov	x1, x0
    d410:	mov	x0, x19
    d414:	blr	x3
    d418:	ldr	x0, [x19, #320]
    d41c:	mov	w2, #0x72                  	// #114
    d420:	mov	x1, #0x1                   	// #1
    d424:	strb	w2, [x19]
    d428:	add	x0, x0, x1
    d42c:	str	x0, [x19, #320]
    d430:	b	c958 <d_print_comp_inner+0x7b50>
    d434:	ldp	x3, x2, [x19, #272]
    d438:	strb	wzr, [x19, #255]
    d43c:	mov	x0, x19
    d440:	blr	x3
    d444:	ldr	x1, [x19, #320]
    d448:	mov	w2, #0x3e                  	// #62
    d44c:	mov	x0, #0x1                   	// #1
    d450:	strb	w2, [x19]
    d454:	add	x1, x1, x0
    d458:	str	x1, [x19, #320]
    d45c:	add	x2, x0, #0x1
    d460:	b	cf84 <d_print_comp_inner+0x817c>
    d464:	add	x3, x1, #0x1
    d468:	str	x3, [x19, #256]
    d46c:	mov	w0, #0x7d                  	// #125
    d470:	strb	w0, [x19, x1]
    d474:	strb	w0, [x19, #264]
    d478:	cmp	x3, #0xff
    d47c:	b.ne	d77c <d_print_comp_inner+0x8974>  // b.any
    d480:	ldp	x4, x2, [x19, #272]
    d484:	strb	wzr, [x19, #255]
    d488:	mov	x1, x3
    d48c:	mov	x0, x19
    d490:	blr	x4
    d494:	ldr	x1, [x19, #320]
    d498:	mov	w2, #0x3a                  	// #58
    d49c:	mov	x0, #0x1                   	// #1
    d4a0:	strb	w2, [x19]
    d4a4:	add	x1, x1, x0
    d4a8:	str	x1, [x19, #320]
    d4ac:	b	9130 <d_print_comp_inner+0x4328>
    d4b0:	add	x0, x0, #0x3
    d4b4:	str	x0, [x19, #256]
    d4b8:	mov	w2, #0x65                  	// #101
    d4bc:	strb	w2, [x19, x1]
    d4c0:	strb	w2, [x19, #264]
    d4c4:	cmp	x0, #0xff
    d4c8:	b.ne	d5c8 <d_print_comp_inner+0x87c0>  // b.any
    d4cc:	ldp	x3, x2, [x19, #272]
    d4d0:	strb	wzr, [x19, #255]
    d4d4:	mov	x1, x0
    d4d8:	mov	x0, x19
    d4dc:	blr	x3
    d4e0:	ldr	x1, [x19, #320]
    d4e4:	mov	w3, #0x6166                	// #24934
    d4e8:	mov	w2, #0x75                  	// #117
    d4ec:	mov	x0, #0x3                   	// #3
    d4f0:	add	x1, x1, #0x1
    d4f4:	strh	w3, [x19]
    d4f8:	strb	w2, [x19, #2]
    d4fc:	str	x1, [x19, #320]
    d500:	add	x1, x0, #0x1
    d504:	str	x1, [x19, #256]
    d508:	mov	w2, #0x6c                  	// #108
    d50c:	strb	w2, [x19, x0]
    d510:	strb	w2, [x19, #264]
    d514:	cmp	x1, #0xff
    d518:	b.ne	d618 <d_print_comp_inner+0x8810>  // b.any
    d51c:	ldp	x3, x2, [x19, #272]
    d520:	strb	wzr, [x19, #255]
    d524:	mov	x0, x19
    d528:	blr	x3
    d52c:	ldr	x1, [x19, #320]
    d530:	mov	w3, #0x2074                	// #8308
    d534:	mov	w2, #0x61                  	// #97
    d538:	mov	x0, #0x3                   	// #3
    d53c:	add	x1, x1, #0x1
    d540:	strh	w3, [x19]
    d544:	strb	w2, [x19, #2]
    d548:	str	x1, [x19, #320]
    d54c:	add	x1, x0, #0x1
    d550:	str	x1, [x19, #256]
    d554:	mov	w2, #0x72                  	// #114
    d558:	strb	w2, [x19, x0]
    d55c:	strb	w2, [x19, #264]
    d560:	cmp	x1, #0xff
    d564:	b.ne	d668 <d_print_comp_inner+0x8860>  // b.any
    d568:	ldp	x3, x2, [x19, #272]
    d56c:	strb	wzr, [x19, #255]
    d570:	mov	x0, x19
    d574:	blr	x3
    d578:	ldr	x1, [x19, #320]
    d57c:	mov	w2, #0x67                  	// #103
    d580:	mov	x0, #0x1                   	// #1
    d584:	strb	w2, [x19]
    d588:	add	x1, x1, x0
    d58c:	str	x1, [x19, #320]
    d590:	b	c964 <d_print_comp_inner+0x7b5c>
    d594:	ldp	x3, x2, [x19, #272]
    d598:	strb	wzr, [x19, #255]
    d59c:	mov	x1, x0
    d5a0:	mov	x0, x19
    d5a4:	blr	x3
    d5a8:	ldr	x1, [x19, #320]
    d5ac:	mov	w3, #0x647b                	// #25723
    d5b0:	mov	w2, #0x65                  	// #101
    d5b4:	mov	x0, #0x3                   	// #3
    d5b8:	add	x1, x1, #0x1
    d5bc:	strh	w3, [x19]
    d5c0:	strb	w2, [x19, #2]
    d5c4:	str	x1, [x19, #320]
    d5c8:	add	x3, x0, #0x1
    d5cc:	str	x3, [x19, #256]
    d5d0:	mov	w1, #0x66                  	// #102
    d5d4:	strb	w1, [x19, x0]
    d5d8:	strb	w1, [x19, #264]
    d5dc:	cmp	x3, #0xff
    d5e0:	b.ne	c8c8 <d_print_comp_inner+0x7ac0>  // b.any
    d5e4:	ldp	x4, x2, [x19, #272]
    d5e8:	strb	wzr, [x19, #255]
    d5ec:	mov	x1, x3
    d5f0:	mov	x0, x19
    d5f4:	blr	x4
    d5f8:	ldr	x0, [x19, #320]
    d5fc:	mov	w3, #0x7561                	// #30049
    d600:	mov	w2, #0x6c                  	// #108
    d604:	mov	x1, #0x3                   	// #3
    d608:	add	x0, x0, #0x1
    d60c:	strh	w3, [x19]
    d610:	strb	w2, [x19, #2]
    d614:	str	x0, [x19, #320]
    d618:	add	x0, x1, #0x1
    d61c:	str	x0, [x19, #256]
    d620:	mov	w2, #0x74                  	// #116
    d624:	strb	w2, [x19, x1]
    d628:	strb	w2, [x19, #264]
    d62c:	cmp	x0, #0xff
    d630:	b.ne	c914 <d_print_comp_inner+0x7b0c>  // b.any
    d634:	ldp	x3, x2, [x19, #272]
    d638:	strb	wzr, [x19, #255]
    d63c:	mov	x1, x0
    d640:	mov	x0, x19
    d644:	blr	x3
    d648:	ldr	x0, [x19, #320]
    d64c:	mov	w3, #0x6120                	// #24864
    d650:	mov	w2, #0x72                  	// #114
    d654:	mov	x1, #0x3                   	// #3
    d658:	add	x0, x0, #0x1
    d65c:	strh	w3, [x19]
    d660:	strb	w2, [x19, #2]
    d664:	str	x0, [x19, #320]
    d668:	add	x0, x1, #0x1
    d66c:	str	x0, [x19, #256]
    d670:	mov	w2, #0x67                  	// #103
    d674:	strb	w2, [x19, x1]
    d678:	strb	w2, [x19, #264]
    d67c:	cmp	x0, #0xff
    d680:	b.ne	c964 <d_print_comp_inner+0x7b5c>  // b.any
    d684:	ldp	x3, x2, [x19, #272]
    d688:	strb	wzr, [x19, #255]
    d68c:	mov	x1, x0
    d690:	mov	x0, x19
    d694:	blr	x3
    d698:	ldr	x1, [x19, #320]
    d69c:	mov	x2, #0x1                   	// #1
    d6a0:	mov	x0, #0x0                   	// #0
    d6a4:	add	x1, x1, x2
    d6a8:	str	x1, [x19, #320]
    d6ac:	b	c968 <d_print_comp_inner+0x7b60>
    d6b0:	ldr	x1, [x0, #8]
    d6b4:	ldr	w2, [x1, #16]
    d6b8:	cmp	w2, #0x1
    d6bc:	b.ne	7718 <d_print_comp_inner+0x2910>  // b.any
    d6c0:	ldr	x1, [x1, #8]
    d6c4:	ldrb	w1, [x1]
    d6c8:	cmp	w1, #0x3e
    d6cc:	b.ne	7718 <d_print_comp_inner+0x2910>  // b.any
    d6d0:	ldr	x1, [x19, #256]
    d6d4:	cmp	x1, #0xff
    d6d8:	b.ne	d700 <d_print_comp_inner+0x88f8>  // b.any
    d6dc:	ldp	x3, x2, [x19, #272]
    d6e0:	strb	wzr, [x19, #255]
    d6e4:	mov	x0, x19
    d6e8:	blr	x3
    d6ec:	str	xzr, [x19, #256]
    d6f0:	ldr	x0, [x19, #320]
    d6f4:	mov	x1, #0x0                   	// #0
    d6f8:	add	x0, x0, #0x1
    d6fc:	str	x0, [x19, #320]
    d700:	add	x0, x1, #0x1
    d704:	str	x0, [x19, #256]
    d708:	mov	w0, #0x28                  	// #40
    d70c:	strb	w0, [x19, x1]
    d710:	strb	w0, [x19, #264]
    d714:	ldr	x0, [x24, #8]
    d718:	b	7718 <d_print_comp_inner+0x2910>
    d71c:	ldr	x0, [x0, #8]
    d720:	ldr	w1, [x0, #16]
    d724:	cmp	w1, #0x1
    d728:	b.eq	da2c <d_print_comp_inner+0x8c24>  // b.none
    d72c:	ldp	x21, x22, [sp, #32]
    d730:	ldp	x23, x24, [sp, #48]
    d734:	b	4e70 <d_print_comp_inner+0x68>
    d738:	ldp	x21, x22, [sp, #32]
    d73c:	ldp	x23, x24, [sp, #48]
    d740:	b	4e70 <d_print_comp_inner+0x68>
    d744:	ldr	x25, [x25, #8]
    d748:	cbz	x25, cbb0 <d_print_comp_inner+0x7da8>
    d74c:	ldr	w4, [x25]
    d750:	b	ca50 <d_print_comp_inner+0x7c48>
    d754:	ldr	x4, [x1, #8]
    d758:	ldr	x23, [x19, #288]
    d75c:	str	x4, [x19, #288]
    d760:	cbz	x4, cd08 <d_print_comp_inner+0x7f00>
    d764:	mov	w21, #0x1                   	// #1
    d768:	b	cccc <d_print_comp_inner+0x7ec4>
    d76c:	mov	w0, #0x7d                  	// #125
    d770:	strb	w0, [x19, #1]
    d774:	mov	x3, #0x2                   	// #2
    d778:	ldp	x25, x26, [sp, #64]
    d77c:	add	x0, x3, #0x1
    d780:	str	x0, [x19, #256]
    d784:	mov	w1, #0x3a                  	// #58
    d788:	strb	w1, [x19, x3]
    d78c:	cmp	x0, #0xff
    d790:	strb	w1, [x19, #264]
    d794:	b.ne	9130 <d_print_comp_inner+0x4328>  // b.any
    d798:	ldp	x3, x2, [x19, #272]
    d79c:	strb	wzr, [x19, #255]
    d7a0:	mov	x1, x0
    d7a4:	mov	x0, x19
    d7a8:	blr	x3
    d7ac:	ldr	x1, [x19, #320]
    d7b0:	mov	x2, #0x1                   	// #1
    d7b4:	mov	x0, #0x0                   	// #0
    d7b8:	add	x1, x1, x2
    d7bc:	str	x1, [x19, #320]
    d7c0:	b	9134 <d_print_comp_inner+0x432c>
    d7c4:	ldp	x21, x22, [sp, #32]
    d7c8:	ldp	x23, x24, [sp, #48]
    d7cc:	b	4e70 <d_print_comp_inner+0x68>
    d7d0:	ldr	x0, [x2, #16]
    d7d4:	ldr	w0, [x0]
    d7d8:	cmp	w0, #0x29
    d7dc:	b.eq	d7e8 <d_print_comp_inner+0x89e0>  // b.none
    d7e0:	mov	w0, #0x1                   	// #1
    d7e4:	str	w0, [x19, #304]
    d7e8:	ldr	x2, [x2, #8]
    d7ec:	mov	w1, w22
    d7f0:	mov	x0, x19
    d7f4:	bl	de90 <d_print_subexpr>
    d7f8:	b	7760 <d_print_comp_inner+0x2958>
    d7fc:	ldr	x1, [x20, #8]
    d800:	ldr	w2, [x1]
    d804:	cmp	w2, #0x1
    d808:	b.ne	b8e0 <d_print_comp_inner+0x6ad8>  // b.any
    d80c:	ldr	x2, [x20, #16]
    d810:	ldr	w2, [x2]
    d814:	cmp	w2, #0x29
    d818:	csel	x20, x20, x1, ne  // ne = any
    d81c:	b	b8e0 <d_print_comp_inner+0x6ad8>
    d820:	ldp	x21, x22, [sp, #32]
    d824:	ldp	x23, x24, [sp, #48]
    d828:	b	4e70 <d_print_comp_inner+0x68>
    d82c:	ldp	x21, x22, [sp, #32]
    d830:	ldp	x23, x24, [sp, #48]
    d834:	b	4e70 <d_print_comp_inner+0x68>
    d838:	ldp	x21, x22, [sp, #32]
    d83c:	ldp	x23, x24, [sp, #48]
    d840:	b	4e70 <d_print_comp_inner+0x68>
    d844:	ldrb	w1, [x0, #1]
    d848:	cmp	w1, #0x6c
    d84c:	b.ne	d1d0 <d_print_comp_inner+0x83c8>  // b.any
    d850:	ldrb	w0, [x0, #2]
    d854:	cbz	w0, d1dc <d_print_comp_inner+0x83d4>
    d858:	b	d1d0 <d_print_comp_inner+0x83c8>
    d85c:	ldp	x21, x22, [sp, #32]
    d860:	ldp	x23, x24, [sp, #48]
    d864:	b	4e70 <d_print_comp_inner+0x68>
    d868:	mov	x0, x19
    d86c:	adrp	x1, 0 <d_make_comp>
    d870:	mov	x2, #0x4                   	// #4
    d874:	add	x1, x1, #0x0
    d878:	bl	170 <d_append_buffer>
    d87c:	ldr	x0, [x21, #8]
    d880:	cbz	x0, d8d8 <d_print_comp_inner+0x8ad0>
    d884:	mov	w1, w22
    d888:	mov	x2, x21
    d88c:	mov	x0, x19
    d890:	bl	de90 <d_print_subexpr>
    d894:	ldr	x1, [x19, #256]
    d898:	cmp	x1, #0xff
    d89c:	b.ne	d8c4 <d_print_comp_inner+0x8abc>  // b.any
    d8a0:	ldp	x3, x2, [x19, #272]
    d8a4:	strb	wzr, [x19, #255]
    d8a8:	mov	x0, x19
    d8ac:	blr	x3
    d8b0:	str	xzr, [x19, #256]
    d8b4:	ldr	x0, [x19, #320]
    d8b8:	mov	x1, #0x0                   	// #0
    d8bc:	add	x0, x0, #0x1
    d8c0:	str	x0, [x19, #320]
    d8c4:	add	x0, x1, #0x1
    d8c8:	str	x0, [x19, #256]
    d8cc:	mov	w0, #0x20                  	// #32
    d8d0:	strb	w0, [x19, x1]
    d8d4:	strb	w0, [x19, #264]
    d8d8:	mov	x2, x23
    d8dc:	mov	w1, w22
    d8e0:	mov	x0, x19
    d8e4:	bl	dc90 <d_print_comp>
    d8e8:	cbz	x20, dab8 <d_print_comp_inner+0x8cb0>
    d8ec:	mov	w1, w22
    d8f0:	mov	x2, x20
    d8f4:	mov	x0, x19
    d8f8:	bl	de90 <d_print_subexpr>
    d8fc:	ldp	x21, x22, [sp, #32]
    d900:	ldp	x23, x24, [sp, #48]
    d904:	ldp	x25, x26, [sp, #64]
    d908:	b	4e70 <d_print_comp_inner+0x68>
    d90c:	ldp	x21, x22, [sp, #32]
    d910:	ldp	x23, x24, [sp, #48]
    d914:	b	4e70 <d_print_comp_inner+0x68>
    d918:	ldp	x21, x22, [sp, #32]
    d91c:	ldp	x23, x24, [sp, #48]
    d920:	b	4e70 <d_print_comp_inner+0x68>
    d924:	add	x1, x21, #0x40
    d928:	b	57a8 <d_print_comp_inner+0x9a0>
    d92c:	ldr	x2, [x20, #8]
    d930:	mov	w1, w22
    d934:	mov	x0, x19
    d938:	bl	de90 <d_print_subexpr>
    d93c:	mov	x2, x21
    d940:	mov	w1, w22
    d944:	mov	x0, x19
    d948:	bl	dd28 <d_print_expr_op>
    d94c:	ldp	x21, x22, [sp, #32]
    d950:	ldp	x23, x24, [sp, #48]
    d954:	b	4e70 <d_print_comp_inner+0x68>
    d958:	ldp	x21, x22, [sp, #32]
    d95c:	ldp	x23, x24, [sp, #48]
    d960:	b	4e70 <d_print_comp_inner+0x68>
    d964:	ldp	x21, x22, [sp, #32]
    d968:	ldp	x23, x24, [sp, #48]
    d96c:	b	4e70 <d_print_comp_inner+0x68>
    d970:	cmp	w21, #0x5
    d974:	b.eq	dae8 <d_print_comp_inner+0x8ce0>  // b.none
    d978:	mov	x0, x19
    d97c:	adrp	x1, 0 <d_make_comp>
    d980:	mov	x2, #0x3                   	// #3
    d984:	add	x1, x1, #0x0
    d988:	bl	170 <d_append_buffer>
    d98c:	ldp	x21, x22, [sp, #32]
    d990:	ldp	x23, x24, [sp, #48]
    d994:	b	4e70 <d_print_comp_inner+0x68>
    d998:	ldr	w0, [x19, #348]
    d99c:	cmp	w4, w0
    d9a0:	b.ge	da08 <d_print_comp_inner+0x8c00>  // b.tcont
    d9a4:	sbfiz	x0, x4, #4, #32
    d9a8:	add	w1, w4, #0x1
    d9ac:	ldr	x2, [x19, #288]
    d9b0:	str	w1, [x19, #344]
    d9b4:	str	x3, [x5, x0]
    d9b8:	add	x0, x5, w4, sxtw #4
    d9bc:	add	x0, x0, #0x8
    d9c0:	cbz	x2, db64 <d_print_comp_inner+0x8d5c>
    d9c4:	ldr	w1, [x19, #360]
    d9c8:	ldr	w6, [x19, #364]
    d9cc:	sbfiz	x5, x1, #4, #32
    d9d0:	b	da00 <d_print_comp_inner+0x8bf8>
    d9d4:	ldr	x4, [x19, #352]
    d9d8:	add	w1, w1, #0x1
    d9dc:	ldr	x7, [x2, #8]
    d9e0:	add	x4, x4, x5
    d9e4:	str	w1, [x19, #360]
    d9e8:	add	x5, x5, #0x10
    d9ec:	str	x7, [x4, #8]
    d9f0:	str	x4, [x0]
    d9f4:	mov	x0, x4
    d9f8:	ldr	x2, [x2]
    d9fc:	cbz	x2, db64 <d_print_comp_inner+0x8d5c>
    da00:	cmp	w6, w1
    da04:	b.gt	d9d4 <d_print_comp_inner+0x8bcc>
    da08:	mov	w0, #0x1                   	// #1
    da0c:	ldp	x21, x22, [sp, #32]
    da10:	ldp	x23, x24, [sp, #48]
    da14:	ldp	x25, x26, [sp, #64]
    da18:	str	w0, [x19, #304]
    da1c:	b	4e70 <d_print_comp_inner+0x68>
    da20:	ldp	x21, x22, [sp, #32]
    da24:	ldp	x23, x24, [sp, #48]
    da28:	b	4e70 <d_print_comp_inner+0x68>
    da2c:	ldr	x0, [x0, #8]
    da30:	ldrb	w0, [x0]
    da34:	cmp	w0, #0x3e
    da38:	b.eq	db14 <d_print_comp_inner+0x8d0c>  // b.none
    da3c:	ldp	x21, x22, [sp, #32]
    da40:	ldp	x23, x24, [sp, #48]
    da44:	b	4e70 <d_print_comp_inner+0x68>
    da48:	add	x1, x21, #0x60
    da4c:	mov	w20, #0x4                   	// #4
    da50:	b	57a8 <d_print_comp_inner+0x9a0>
    da54:	cmp	x21, x24
    da58:	b.ls	9978 <d_print_comp_inner+0x4b70>  // b.plast
    da5c:	cmp	x2, #0xff
    da60:	ccmp	w0, w23, #0x0, ls  // ls = plast
    da64:	b.ne	9978 <d_print_comp_inner+0x4b70>  // b.any
    da68:	and	w22, w2, #0xff
    da6c:	cmp	x1, #0xff
    da70:	b.ne	da94 <d_print_comp_inner+0x8c8c>  // b.any
    da74:	ldp	x3, x2, [x19, #272]
    da78:	strb	wzr, [x19, #255]
    da7c:	mov	x0, x19
    da80:	blr	x3
    da84:	str	xzr, [x19, #256]
    da88:	ldr	x0, [x19, #320]
    da8c:	add	x0, x0, #0x1
    da90:	str	x0, [x19, #320]
    da94:	ldr	x0, [x19, #256]
    da98:	mov	x20, x24
    da9c:	add	x1, x0, #0x1
    daa0:	str	x1, [x19, #256]
    daa4:	strb	w22, [x19, x0]
    daa8:	strb	w22, [x19, #264]
    daac:	b	9954 <d_print_comp_inner+0x4b4c>
    dab0:	ldr	x1, [x19, #256]
    dab4:	b	9100 <d_print_comp_inner+0x42f8>
    dab8:	ldp	x21, x22, [sp, #32]
    dabc:	ldp	x23, x24, [sp, #48]
    dac0:	ldp	x25, x26, [sp, #64]
    dac4:	b	4e70 <d_print_comp_inner+0x68>
    dac8:	add	x21, sp, #0x80
    dacc:	str	x21, [x19, #296]
    dad0:	b	cbb0 <d_print_comp_inner+0x7da8>
    dad4:	ldp	x21, x22, [sp, #32]
    dad8:	ldp	x23, x24, [sp, #48]
    dadc:	b	4e70 <d_print_comp_inner+0x68>
    dae0:	ldr	x2, [x19, #296]
    dae4:	b	5230 <d_print_comp_inner+0x428>
    dae8:	mov	x0, x19
    daec:	adrp	x1, 0 <d_make_comp>
    daf0:	mov	x2, #0x2                   	// #2
    daf4:	add	x1, x1, #0x0
    daf8:	bl	170 <d_append_buffer>
    dafc:	ldp	x21, x22, [sp, #32]
    db00:	ldp	x23, x24, [sp, #48]
    db04:	b	4e70 <d_print_comp_inner+0x68>
    db08:	add	x21, x21, #0x20
    db0c:	str	x21, [x19, #296]
    db10:	b	cbb0 <d_print_comp_inner+0x7da8>
    db14:	ldr	x1, [x19, #256]
    db18:	cmp	x1, #0xff
    db1c:	b.ne	db44 <d_print_comp_inner+0x8d3c>  // b.any
    db20:	ldp	x3, x2, [x19, #272]
    db24:	strb	wzr, [x19, #255]
    db28:	mov	x0, x19
    db2c:	blr	x3
    db30:	str	xzr, [x19, #256]
    db34:	ldr	x0, [x19, #320]
    db38:	mov	x1, #0x0                   	// #0
    db3c:	add	x0, x0, #0x1
    db40:	str	x0, [x19, #320]
    db44:	add	x0, x1, #0x1
    db48:	str	x0, [x19, #256]
    db4c:	mov	w0, #0x29                  	// #41
    db50:	strb	w0, [x19, x1]
    db54:	strb	w0, [x19, #264]
    db58:	ldp	x21, x22, [sp, #32]
    db5c:	ldp	x23, x24, [sp, #48]
    db60:	b	4e70 <d_print_comp_inner+0x68>
    db64:	str	xzr, [x0]
    db68:	b	ccc0 <d_print_comp_inner+0x7eb8>
    db6c:	ldr	x1, [x19, #256]
    db70:	cmp	x1, #0xff
    db74:	b.ne	db9c <d_print_comp_inner+0x8d94>  // b.any
    db78:	ldp	x3, x2, [x19, #272]
    db7c:	strb	wzr, [x19, #255]
    db80:	mov	x0, x19
    db84:	blr	x3
    db88:	str	xzr, [x19, #256]
    db8c:	ldr	x0, [x19, #320]
    db90:	mov	x1, #0x0                   	// #0
    db94:	add	x0, x0, #0x1
    db98:	str	x0, [x19, #320]
    db9c:	add	x0, x1, #0x1
    dba0:	str	x0, [x19, #256]
    dba4:	mov	w0, #0x75                  	// #117
    dba8:	strb	w0, [x19, x1]
    dbac:	strb	w0, [x19, #264]
    dbb0:	ldp	x21, x22, [sp, #32]
    dbb4:	ldp	x23, x24, [sp, #48]
    dbb8:	b	4e70 <d_print_comp_inner+0x68>
    dbbc:	mov	x0, x19
    dbc0:	adrp	x1, 0 <d_make_comp>
    dbc4:	mov	x2, #0x2                   	// #2
    dbc8:	add	x1, x1, #0x0
    dbcc:	bl	170 <d_append_buffer>
    dbd0:	ldp	x21, x22, [sp, #32]
    dbd4:	ldp	x23, x24, [sp, #48]
    dbd8:	b	4e70 <d_print_comp_inner+0x68>
    dbdc:	ldr	x1, [x19, #256]
    dbe0:	cmp	x1, #0xff
    dbe4:	b.ne	dc0c <d_print_comp_inner+0x8e04>  // b.any
    dbe8:	ldp	x3, x2, [x19, #272]
    dbec:	strb	wzr, [x19, #255]
    dbf0:	mov	x0, x19
    dbf4:	blr	x3
    dbf8:	str	xzr, [x19, #256]
    dbfc:	ldr	x0, [x19, #320]
    dc00:	mov	x1, #0x0                   	// #0
    dc04:	add	x0, x0, #0x1
    dc08:	str	x0, [x19, #320]
    dc0c:	add	x0, x1, #0x1
    dc10:	str	x0, [x19, #256]
    dc14:	mov	w0, #0x2d                  	// #45
    dc18:	strb	w0, [x19, x1]
    dc1c:	strb	w0, [x19, #264]
    dc20:	b	bc8c <d_print_comp_inner+0x6e84>
    dc24:	ldp	x21, x22, [sp, #32]
    dc28:	ldp	x23, x24, [sp, #48]
    dc2c:	b	4e70 <d_print_comp_inner+0x68>
    dc30:	ldp	x21, x22, [sp, #32]
    dc34:	ldp	x23, x24, [sp, #48]
    dc38:	ldp	x25, x26, [sp, #64]
    dc3c:	b	4ea4 <d_print_comp_inner+0x9c>
    dc40:	mov	x0, x1
    dc44:	add	x1, x0, #0x1
    dc48:	b	71ac <d_print_comp_inner+0x23a4>
    dc4c:	ldp	x21, x22, [sp, #32]
    dc50:	ldp	x23, x24, [sp, #48]
    dc54:	b	4e70 <d_print_comp_inner+0x68>
    dc58:	mov	x2, x21
    dc5c:	mov	w1, w22
    dc60:	mov	x0, x19
    dc64:	bl	dd28 <d_print_expr_op>
    dc68:	b	76b0 <d_print_comp_inner+0x28a8>
    dc6c:	mov	x0, x19
    dc70:	adrp	x1, 0 <d_make_comp>
    dc74:	mov	x2, #0x5                   	// #5
    dc78:	add	x1, x1, #0x0
    dc7c:	bl	170 <d_append_buffer>
    dc80:	ldp	x21, x22, [sp, #32]
    dc84:	ldp	x23, x24, [sp, #48]
    dc88:	b	4e70 <d_print_comp_inner+0x68>
    dc8c:	nop

000000000000dc90 <d_print_comp>:
    dc90:	stp	x29, x30, [sp, #-48]!
    dc94:	mov	x29, sp
    dc98:	stp	x19, x20, [sp, #16]
    dc9c:	mov	x20, x0
    dca0:	cbz	x2, dd10 <d_print_comp+0x80>
    dca4:	ldr	w3, [x2, #4]
    dca8:	mov	x19, x2
    dcac:	cmp	w3, #0x1
    dcb0:	b.gt	dd10 <d_print_comp+0x80>
    dcb4:	ldr	w4, [x0, #308]
    dcb8:	cmp	w4, #0x400
    dcbc:	b.gt	dd10 <d_print_comp+0x80>
    dcc0:	add	w3, w3, #0x1
    dcc4:	add	w4, w4, #0x1
    dcc8:	str	w3, [x2, #4]
    dccc:	add	x3, sp, #0x20
    dcd0:	str	w4, [x0, #308]
    dcd4:	ldr	x4, [x0, #328]
    dcd8:	str	x3, [x0, #328]
    dcdc:	stp	x2, x4, [sp, #32]
    dce0:	bl	4e08 <d_print_comp_inner>
    dce4:	ldr	w1, [x19, #4]
    dce8:	ldr	x0, [sp, #40]
    dcec:	str	x0, [x20, #328]
    dcf0:	ldr	w0, [x20, #308]
    dcf4:	sub	w1, w1, #0x1
    dcf8:	str	w1, [x19, #4]
    dcfc:	sub	w0, w0, #0x1
    dd00:	str	w0, [x20, #308]
    dd04:	ldp	x19, x20, [sp, #16]
    dd08:	ldp	x29, x30, [sp], #48
    dd0c:	ret
    dd10:	mov	w0, #0x1                   	// #1
    dd14:	str	w0, [x20, #304]
    dd18:	ldp	x19, x20, [sp, #16]
    dd1c:	ldp	x29, x30, [sp], #48
    dd20:	ret
    dd24:	nop

000000000000dd28 <d_print_expr_op>:
    dd28:	stp	x29, x30, [sp, #-80]!
    dd2c:	mov	x29, sp
    dd30:	ldr	w3, [x2]
    dd34:	stp	x19, x20, [sp, #16]
    dd38:	mov	x20, x2
    dd3c:	mov	x19, x0
    dd40:	cmp	w3, #0x32
    dd44:	b.eq	dd74 <d_print_expr_op+0x4c>  // b.none
    dd48:	ldr	w3, [x2, #4]
    dd4c:	cmp	w3, #0x1
    dd50:	b.gt	dd60 <d_print_expr_op+0x38>
    dd54:	ldr	w4, [x0, #308]
    dd58:	cmp	w4, #0x400
    dd5c:	b.le	de34 <d_print_expr_op+0x10c>
    dd60:	mov	w0, #0x1                   	// #1
    dd64:	str	w0, [x19, #304]
    dd68:	ldp	x19, x20, [sp, #16]
    dd6c:	ldp	x29, x30, [sp], #80
    dd70:	ret
    dd74:	ldr	x0, [x2, #8]
    dd78:	stp	x21, x22, [sp, #32]
    dd7c:	ldrsw	x22, [x0, #16]
    dd80:	ldr	x20, [x0, #8]
    dd84:	cbz	x22, de84 <d_print_expr_op+0x15c>
    dd88:	add	x22, x20, x22
    dd8c:	ldr	x1, [x19, #256]
    dd90:	str	x23, [sp, #48]
    dd94:	mov	x23, #0x1                   	// #1
    dd98:	b	ddf0 <d_print_expr_op+0xc8>
    dd9c:	ldp	x3, x2, [x19, #272]
    dda0:	strb	wzr, [x19, #255]
    dda4:	add	x20, x20, #0x1
    dda8:	blr	x3
    ddac:	strb	w21, [x19]
    ddb0:	ldr	x0, [x19, #320]
    ddb4:	str	x23, [x19, #256]
    ddb8:	strb	w21, [x19, #264]
    ddbc:	cmp	x22, x20
    ddc0:	add	x0, x0, #0x1
    ddc4:	str	x0, [x19, #320]
    ddc8:	mov	x0, #0x1                   	// #1
    ddcc:	b.eq	de20 <d_print_expr_op+0xf8>  // b.none
    ddd0:	ldrb	w21, [x20]
    ddd4:	add	x1, x0, #0x1
    ddd8:	str	x1, [x19, #256]
    dddc:	add	x20, x20, #0x1
    dde0:	strb	w21, [x19, x0]
    dde4:	cmp	x20, x22
    dde8:	strb	w21, [x19, #264]
    ddec:	b.eq	de20 <d_print_expr_op+0xf8>  // b.none
    ddf0:	ldrb	w21, [x20]
    ddf4:	mov	x0, x19
    ddf8:	cmp	x1, #0xff
    ddfc:	b.eq	dd9c <d_print_expr_op+0x74>  // b.none
    de00:	mov	x0, x1
    de04:	add	x20, x20, #0x1
    de08:	add	x1, x0, #0x1
    de0c:	str	x1, [x19, #256]
    de10:	cmp	x20, x22
    de14:	strb	w21, [x19, x0]
    de18:	strb	w21, [x19, #264]
    de1c:	b.ne	ddf0 <d_print_expr_op+0xc8>  // b.any
    de20:	ldp	x19, x20, [sp, #16]
    de24:	ldp	x21, x22, [sp, #32]
    de28:	ldr	x23, [sp, #48]
    de2c:	ldp	x29, x30, [sp], #80
    de30:	ret
    de34:	add	w3, w3, #0x1
    de38:	add	w4, w4, #0x1
    de3c:	str	w3, [x2, #4]
    de40:	add	x3, sp, #0x40
    de44:	str	w4, [x0, #308]
    de48:	ldr	x4, [x0, #328]
    de4c:	str	x3, [x0, #328]
    de50:	stp	x2, x4, [sp, #64]
    de54:	bl	4e08 <d_print_comp_inner>
    de58:	ldr	w1, [x20, #4]
    de5c:	ldr	x0, [sp, #72]
    de60:	str	x0, [x19, #328]
    de64:	ldr	w0, [x19, #308]
    de68:	sub	w1, w1, #0x1
    de6c:	str	w1, [x20, #4]
    de70:	sub	w0, w0, #0x1
    de74:	str	w0, [x19, #308]
    de78:	ldp	x19, x20, [sp, #16]
    de7c:	ldp	x29, x30, [sp], #80
    de80:	ret
    de84:	ldp	x21, x22, [sp, #32]
    de88:	b	dd68 <d_print_expr_op+0x40>
    de8c:	nop

000000000000de90 <d_print_subexpr>:
    de90:	stp	x29, x30, [sp, #-64]!
    de94:	mov	x29, sp
    de98:	stp	x19, x20, [sp, #16]
    de9c:	mov	x20, x2
    dea0:	ldr	w2, [x2]
    dea4:	stp	x21, x22, [sp, #32]
    dea8:	mov	w22, #0x1                   	// #1
    deac:	cmp	w2, #0x31
    deb0:	ccmp	w2, w22, #0x0, ne  // ne = any
    deb4:	mov	w21, w1
    deb8:	mov	x19, x0
    debc:	ccmp	w2, #0x6, #0x4, hi  // hi = pmore
    dec0:	b.ne	df6c <d_print_subexpr+0xdc>  // b.any
    dec4:	ldr	w0, [x20, #4]
    dec8:	cmp	w0, #0x1
    decc:	b.gt	df60 <d_print_subexpr+0xd0>
    ded0:	ldr	w1, [x19, #308]
    ded4:	cmp	w1, #0x400
    ded8:	b.gt	df60 <d_print_subexpr+0xd0>
    dedc:	ldr	x3, [x19, #328]
    dee0:	add	w0, w0, #0x1
    dee4:	str	w0, [x20, #4]
    dee8:	add	w1, w1, #0x1
    deec:	add	x0, sp, #0x30
    def0:	str	w1, [x19, #308]
    def4:	str	x0, [x19, #328]
    def8:	mov	w1, w21
    defc:	mov	x0, x19
    df00:	mov	x2, x20
    df04:	stp	x20, x3, [sp, #48]
    df08:	bl	4e08 <d_print_comp_inner>
    df0c:	ldr	w1, [x20, #4]
    df10:	ldr	x0, [sp, #56]
    df14:	str	x0, [x19, #328]
    df18:	ldr	w0, [x19, #308]
    df1c:	sub	w1, w1, #0x1
    df20:	str	w1, [x20, #4]
    df24:	sub	w0, w0, #0x1
    df28:	str	w0, [x19, #308]
    df2c:	cbnz	w22, df50 <d_print_subexpr+0xc0>
    df30:	ldr	x1, [x19, #256]
    df34:	add	x0, x1, #0x1
    df38:	cmp	x1, #0xff
    df3c:	b.eq	df94 <d_print_subexpr+0x104>  // b.none
    df40:	str	x0, [x19, #256]
    df44:	mov	w0, #0x29                  	// #41
    df48:	strb	w0, [x19, x1]
    df4c:	strb	w0, [x19, #264]
    df50:	ldp	x19, x20, [sp, #16]
    df54:	ldp	x21, x22, [sp, #32]
    df58:	ldp	x29, x30, [sp], #64
    df5c:	ret
    df60:	mov	w0, #0x1                   	// #1
    df64:	str	w0, [x19, #304]
    df68:	b	df2c <d_print_subexpr+0x9c>
    df6c:	ldr	x1, [x0, #256]
    df70:	cmp	x1, #0xff
    df74:	b.eq	dfbc <d_print_subexpr+0x12c>  // b.none
    df78:	add	x0, x1, #0x1
    df7c:	str	x0, [x19, #256]
    df80:	mov	w0, #0x28                  	// #40
    df84:	strb	w0, [x19, x1]
    df88:	mov	w22, #0x0                   	// #0
    df8c:	strb	w0, [x19, #264]
    df90:	b	dec4 <d_print_subexpr+0x34>
    df94:	ldp	x3, x2, [x19, #272]
    df98:	strb	wzr, [x19, #255]
    df9c:	mov	x0, x19
    dfa0:	blr	x3
    dfa4:	ldr	x2, [x19, #320]
    dfa8:	mov	x0, #0x1                   	// #1
    dfac:	mov	x1, #0x0                   	// #0
    dfb0:	add	x2, x2, x0
    dfb4:	str	x2, [x19, #320]
    dfb8:	b	df40 <d_print_subexpr+0xb0>
    dfbc:	ldp	x3, x2, [x0, #272]
    dfc0:	strb	wzr, [x0, #255]
    dfc4:	blr	x3
    dfc8:	ldr	x2, [x19, #320]
    dfcc:	mov	x0, #0x1                   	// #1
    dfd0:	mov	x1, #0x0                   	// #0
    dfd4:	add	x2, x2, x0
    dfd8:	str	x2, [x19, #320]
    dfdc:	b	df7c <d_print_subexpr+0xec>

000000000000dfe0 <d_maybe_print_fold_expression.isra.0>:
    dfe0:	stp	x29, x30, [sp, #-64]!
    dfe4:	mov	x29, sp
    dfe8:	stp	x19, x20, [sp, #16]
    dfec:	mov	x19, x0
    dff0:	mov	w20, w1
    dff4:	ldr	x0, [x2, #8]
    dff8:	ldr	x0, [x0]
    dffc:	ldrb	w1, [x0]
    e000:	cmp	w1, #0x66
    e004:	b.ne	e178 <d_maybe_print_fold_expression.isra.0+0x198>  // b.any
    e008:	ldr	x1, [x3]
    e00c:	stp	x21, x22, [sp, #32]
    e010:	stp	x23, x24, [sp, #48]
    e014:	mov	x24, #0x0                   	// #0
    e018:	ldp	x23, x21, [x1, #8]
    e01c:	ldr	w1, [x21]
    e020:	cmp	w1, #0x3c
    e024:	b.eq	e250 <d_maybe_print_fold_expression.isra.0+0x270>  // b.none
    e028:	ldr	w22, [x19, #316]
    e02c:	mov	w1, #0xffffffff            	// #-1
    e030:	str	w1, [x19, #316]
    e034:	ldrb	w0, [x0, #1]
    e038:	cmp	w0, #0x6c
    e03c:	b.eq	e270 <d_maybe_print_fold_expression.isra.0+0x290>  // b.none
    e040:	b.hi	e188 <d_maybe_print_fold_expression.isra.0+0x1a8>  // b.pmore
    e044:	cmp	w0, #0x4c
    e048:	b.eq	e054 <d_maybe_print_fold_expression.isra.0+0x74>  // b.none
    e04c:	cmp	w0, #0x52
    e050:	b.ne	e15c <d_maybe_print_fold_expression.isra.0+0x17c>  // b.any
    e054:	ldr	x1, [x19, #256]
    e058:	add	x0, x1, #0x1
    e05c:	cmp	x1, #0xff
    e060:	b.eq	e384 <d_maybe_print_fold_expression.isra.0+0x3a4>  // b.none
    e064:	str	x0, [x19, #256]
    e068:	mov	w0, #0x28                  	// #40
    e06c:	strb	w0, [x19, x1]
    e070:	mov	x2, x21
    e074:	strb	w0, [x19, #264]
    e078:	mov	w1, w20
    e07c:	mov	x0, x19
    e080:	bl	de90 <d_print_subexpr>
    e084:	mov	w1, w20
    e088:	mov	x2, x23
    e08c:	mov	x0, x19
    e090:	bl	dd28 <d_print_expr_op>
    e094:	ldr	x1, [x19, #256]
    e098:	cmp	x1, #0xff
    e09c:	b.eq	e4b8 <d_maybe_print_fold_expression.isra.0+0x4d8>  // b.none
    e0a0:	add	x0, x1, #0x1
    e0a4:	str	x0, [x19, #256]
    e0a8:	mov	w21, #0x2e                  	// #46
    e0ac:	strb	w21, [x19, x1]
    e0b0:	strb	w21, [x19, #264]
    e0b4:	cmp	x0, #0xff
    e0b8:	b.ne	e478 <d_maybe_print_fold_expression.isra.0+0x498>  // b.any
    e0bc:	ldp	x3, x2, [x19, #272]
    e0c0:	strb	wzr, [x19, #255]
    e0c4:	mov	x1, x0
    e0c8:	mov	x0, x19
    e0cc:	blr	x3
    e0d0:	strb	w21, [x19]
    e0d4:	ldr	x0, [x19, #320]
    e0d8:	mov	x1, #0x1                   	// #1
    e0dc:	add	x0, x0, x1
    e0e0:	str	x0, [x19, #320]
    e0e4:	add	x0, x1, #0x1
    e0e8:	str	x0, [x19, #256]
    e0ec:	mov	w0, #0x2e                  	// #46
    e0f0:	strb	w0, [x19, x1]
    e0f4:	mov	x2, x23
    e0f8:	strb	w0, [x19, #264]
    e0fc:	mov	w1, w20
    e100:	mov	x0, x19
    e104:	bl	dd28 <d_print_expr_op>
    e108:	mov	x2, x24
    e10c:	mov	w1, w20
    e110:	mov	x0, x19
    e114:	bl	de90 <d_print_subexpr>
    e118:	ldr	x1, [x19, #256]
    e11c:	add	x0, x1, #0x1
    e120:	cmp	x1, #0xff
    e124:	b.ne	e14c <d_maybe_print_fold_expression.isra.0+0x16c>  // b.any
    e128:	ldp	x3, x2, [x19, #272]
    e12c:	strb	wzr, [x19, #255]
    e130:	mov	x0, x19
    e134:	blr	x3
    e138:	ldr	x2, [x19, #320]
    e13c:	mov	x0, #0x1                   	// #1
    e140:	mov	x1, #0x0                   	// #0
    e144:	add	x2, x2, x0
    e148:	str	x2, [x19, #320]
    e14c:	str	x0, [x19, #256]
    e150:	mov	w0, #0x29                  	// #41
    e154:	strb	w0, [x19, x1]
    e158:	strb	w0, [x19, #264]
    e15c:	ldp	x23, x24, [sp, #48]
    e160:	str	w22, [x19, #316]
    e164:	ldp	x21, x22, [sp, #32]
    e168:	mov	w0, #0x1                   	// #1
    e16c:	ldp	x19, x20, [sp, #16]
    e170:	ldp	x29, x30, [sp], #64
    e174:	ret
    e178:	mov	w0, #0x0                   	// #0
    e17c:	ldp	x19, x20, [sp, #16]
    e180:	ldp	x29, x30, [sp], #64
    e184:	ret
    e188:	cmp	w0, #0x72
    e18c:	b.ne	e15c <d_maybe_print_fold_expression.isra.0+0x17c>  // b.any
    e190:	ldr	x1, [x19, #256]
    e194:	add	x0, x1, #0x1
    e198:	cmp	x1, #0xff
    e19c:	b.eq	e3ac <d_maybe_print_fold_expression.isra.0+0x3cc>  // b.none
    e1a0:	str	x0, [x19, #256]
    e1a4:	mov	w0, #0x28                  	// #40
    e1a8:	strb	w0, [x19, x1]
    e1ac:	mov	x2, x21
    e1b0:	strb	w0, [x19, #264]
    e1b4:	mov	w1, w20
    e1b8:	mov	x0, x19
    e1bc:	bl	de90 <d_print_subexpr>
    e1c0:	mov	x0, x19
    e1c4:	mov	x2, x23
    e1c8:	mov	w1, w20
    e1cc:	bl	dd28 <d_print_expr_op>
    e1d0:	ldr	x0, [x19, #256]
    e1d4:	cmp	x0, #0xff
    e1d8:	b.eq	e448 <d_maybe_print_fold_expression.isra.0+0x468>  // b.none
    e1dc:	add	x1, x0, #0x1
    e1e0:	str	x1, [x19, #256]
    e1e4:	mov	w20, #0x2e                  	// #46
    e1e8:	strb	w20, [x19, x0]
    e1ec:	strb	w20, [x19, #264]
    e1f0:	cmp	x1, #0xff
    e1f4:	b.ne	e2f8 <d_maybe_print_fold_expression.isra.0+0x318>  // b.any
    e1f8:	ldp	x3, x2, [x19, #272]
    e1fc:	strb	wzr, [x19, #255]
    e200:	mov	x0, x19
    e204:	blr	x3
    e208:	strb	w20, [x19]
    e20c:	ldr	x0, [x19, #320]
    e210:	mov	x1, #0x1                   	// #1
    e214:	add	x0, x0, x1
    e218:	str	x0, [x19, #320]
    e21c:	add	x0, x1, #0x1
    e220:	mov	w2, #0x2e                  	// #46
    e224:	strb	w2, [x19, x1]
    e228:	add	x1, x0, #0x1
    e22c:	str	x1, [x19, #256]
    e230:	mov	w1, #0x29                  	// #41
    e234:	strb	w1, [x19, x0]
    e238:	mov	w0, #0x1                   	// #1
    e23c:	strb	w1, [x19, #264]
    e240:	ldp	x23, x24, [sp, #48]
    e244:	str	w22, [x19, #316]
    e248:	ldp	x21, x22, [sp, #32]
    e24c:	b	e16c <d_maybe_print_fold_expression.isra.0+0x18c>
    e250:	ldr	w22, [x19, #316]
    e254:	mov	w1, #0xffffffff            	// #-1
    e258:	ldr	x24, [x21, #16]
    e25c:	ldr	x21, [x21, #8]
    e260:	str	w1, [x19, #316]
    e264:	ldrb	w0, [x0, #1]
    e268:	cmp	w0, #0x6c
    e26c:	b.ne	e040 <d_maybe_print_fold_expression.isra.0+0x60>  // b.any
    e270:	ldr	x0, [x19, #256]
    e274:	cmp	x0, #0xff
    e278:	b.eq	e3d4 <d_maybe_print_fold_expression.isra.0+0x3f4>  // b.none
    e27c:	add	x1, x0, #0x1
    e280:	str	x1, [x19, #256]
    e284:	mov	w2, #0x28                  	// #40
    e288:	strb	w2, [x19, x0]
    e28c:	strb	w2, [x19, #264]
    e290:	cmp	x1, #0xff
    e294:	b.ne	e33c <d_maybe_print_fold_expression.isra.0+0x35c>  // b.any
    e298:	ldp	x3, x2, [x19, #272]
    e29c:	strb	wzr, [x19, #255]
    e2a0:	mov	x0, x19
    e2a4:	blr	x3
    e2a8:	ldr	x0, [x19, #320]
    e2ac:	mov	w2, #0x2e                  	// #46
    e2b0:	mov	x1, #0x1                   	// #1
    e2b4:	strb	w2, [x19]
    e2b8:	add	x0, x0, x1
    e2bc:	str	x0, [x19, #320]
    e2c0:	add	x0, x1, #0x1
    e2c4:	mov	w2, #0x2e                  	// #46
    e2c8:	strb	w2, [x19, x1]
    e2cc:	add	x1, x0, #0x1
    e2d0:	str	x1, [x19, #256]
    e2d4:	mov	w1, #0x2e                  	// #46
    e2d8:	strb	w1, [x19, x0]
    e2dc:	mov	x2, x23
    e2e0:	strb	w1, [x19, #264]
    e2e4:	mov	x0, x19
    e2e8:	mov	w1, w20
    e2ec:	bl	dd28 <d_print_expr_op>
    e2f0:	mov	x2, x21
    e2f4:	b	e10c <d_maybe_print_fold_expression.isra.0+0x12c>
    e2f8:	add	x3, x0, #0x2
    e2fc:	str	x3, [x19, #256]
    e300:	strb	w20, [x19, x1]
    e304:	cmp	x3, #0xff
    e308:	strb	w20, [x19, #264]
    e30c:	b.ne	e404 <d_maybe_print_fold_expression.isra.0+0x424>  // b.any
    e310:	ldp	x4, x2, [x19, #272]
    e314:	strb	wzr, [x19, #255]
    e318:	mov	x1, x3
    e31c:	mov	x0, x19
    e320:	blr	x4
    e324:	strb	w20, [x19]
    e328:	ldr	x1, [x19, #320]
    e32c:	mov	x0, #0x1                   	// #1
    e330:	add	x1, x1, x0
    e334:	str	x1, [x19, #320]
    e338:	b	e228 <d_maybe_print_fold_expression.isra.0+0x248>
    e33c:	add	x3, x0, #0x2
    e340:	str	x3, [x19, #256]
    e344:	mov	w24, #0x2e                  	// #46
    e348:	strb	w24, [x19, x1]
    e34c:	strb	w24, [x19, #264]
    e350:	cmp	x3, #0xff
    e354:	b.ne	e4e4 <d_maybe_print_fold_expression.isra.0+0x504>  // b.any
    e358:	ldp	x4, x2, [x19, #272]
    e35c:	strb	wzr, [x19, #255]
    e360:	mov	x1, x3
    e364:	mov	x0, x19
    e368:	blr	x4
    e36c:	strb	w24, [x19]
    e370:	ldr	x1, [x19, #320]
    e374:	mov	x0, #0x1                   	// #1
    e378:	add	x1, x1, x0
    e37c:	str	x1, [x19, #320]
    e380:	b	e2cc <d_maybe_print_fold_expression.isra.0+0x2ec>
    e384:	ldp	x3, x2, [x19, #272]
    e388:	strb	wzr, [x19, #255]
    e38c:	mov	x0, x19
    e390:	blr	x3
    e394:	ldr	x2, [x19, #320]
    e398:	mov	x0, #0x1                   	// #1
    e39c:	mov	x1, #0x0                   	// #0
    e3a0:	add	x2, x2, x0
    e3a4:	str	x2, [x19, #320]
    e3a8:	b	e064 <d_maybe_print_fold_expression.isra.0+0x84>
    e3ac:	ldp	x3, x2, [x19, #272]
    e3b0:	strb	wzr, [x19, #255]
    e3b4:	mov	x0, x19
    e3b8:	blr	x3
    e3bc:	ldr	x2, [x19, #320]
    e3c0:	mov	x0, #0x1                   	// #1
    e3c4:	mov	x1, #0x0                   	// #0
    e3c8:	add	x2, x2, x0
    e3cc:	str	x2, [x19, #320]
    e3d0:	b	e1a0 <d_maybe_print_fold_expression.isra.0+0x1c0>
    e3d4:	ldp	x3, x2, [x19, #272]
    e3d8:	strb	wzr, [x19, #255]
    e3dc:	mov	x1, x0
    e3e0:	mov	x0, x19
    e3e4:	blr	x3
    e3e8:	ldr	x0, [x19, #320]
    e3ec:	mov	w2, #0x2e28                	// #11816
    e3f0:	mov	x1, #0x2                   	// #2
    e3f4:	strh	w2, [x19]
    e3f8:	add	x0, x0, #0x1
    e3fc:	str	x0, [x19, #320]
    e400:	b	e2c0 <d_maybe_print_fold_expression.isra.0+0x2e0>
    e404:	add	x0, x0, #0x3
    e408:	str	x0, [x19, #256]
    e40c:	strb	w20, [x19, x3]
    e410:	cmp	x0, #0xff
    e414:	strb	w20, [x19, #264]
    e418:	b.ne	e228 <d_maybe_print_fold_expression.isra.0+0x248>  // b.any
    e41c:	ldp	x3, x2, [x19, #272]
    e420:	strb	wzr, [x19, #255]
    e424:	mov	x1, x0
    e428:	mov	x0, x19
    e42c:	blr	x3
    e430:	ldr	x2, [x19, #320]
    e434:	mov	x1, #0x1                   	// #1
    e438:	mov	x0, #0x0                   	// #0
    e43c:	add	x2, x2, x1
    e440:	str	x2, [x19, #320]
    e444:	b	e22c <d_maybe_print_fold_expression.isra.0+0x24c>
    e448:	ldp	x3, x2, [x19, #272]
    e44c:	strb	wzr, [x19, #255]
    e450:	mov	x1, x0
    e454:	mov	x0, x19
    e458:	blr	x3
    e45c:	ldr	x0, [x19, #320]
    e460:	mov	w2, #0x2e2e                	// #11822
    e464:	mov	x1, #0x2                   	// #2
    e468:	strh	w2, [x19]
    e46c:	add	x0, x0, #0x1
    e470:	str	x0, [x19, #320]
    e474:	b	e21c <d_maybe_print_fold_expression.isra.0+0x23c>
    e478:	add	x1, x1, #0x2
    e47c:	str	x1, [x19, #256]
    e480:	strb	w21, [x19, x0]
    e484:	cmp	x1, #0xff
    e488:	strb	w21, [x19, #264]
    e48c:	b.ne	e0e4 <d_maybe_print_fold_expression.isra.0+0x104>  // b.any
    e490:	ldp	x3, x2, [x19, #272]
    e494:	strb	wzr, [x19, #255]
    e498:	mov	x0, x19
    e49c:	blr	x3
    e4a0:	ldr	x2, [x19, #320]
    e4a4:	mov	x0, #0x1                   	// #1
    e4a8:	mov	x1, #0x0                   	// #0
    e4ac:	add	x2, x2, x0
    e4b0:	str	x2, [x19, #320]
    e4b4:	b	e0e8 <d_maybe_print_fold_expression.isra.0+0x108>
    e4b8:	ldp	x3, x2, [x19, #272]
    e4bc:	strb	wzr, [x19, #255]
    e4c0:	mov	x0, x19
    e4c4:	blr	x3
    e4c8:	ldr	x0, [x19, #320]
    e4cc:	mov	w2, #0x2e2e                	// #11822
    e4d0:	mov	x1, #0x2                   	// #2
    e4d4:	strh	w2, [x19]
    e4d8:	add	x0, x0, #0x1
    e4dc:	str	x0, [x19, #320]
    e4e0:	b	e0e4 <d_maybe_print_fold_expression.isra.0+0x104>
    e4e4:	add	x0, x0, #0x3
    e4e8:	str	x0, [x19, #256]
    e4ec:	strb	w24, [x19, x3]
    e4f0:	cmp	x0, #0xff
    e4f4:	strb	w24, [x19, #264]
    e4f8:	b.ne	e2cc <d_maybe_print_fold_expression.isra.0+0x2ec>  // b.any
    e4fc:	ldp	x3, x2, [x19, #272]
    e500:	strb	wzr, [x19, #255]
    e504:	mov	x1, x0
    e508:	mov	x0, x19
    e50c:	blr	x3
    e510:	ldr	x2, [x19, #320]
    e514:	mov	x1, #0x1                   	// #1
    e518:	mov	x0, #0x0                   	// #0
    e51c:	add	x2, x2, x1
    e520:	str	x2, [x19, #320]
    e524:	b	e2d0 <d_maybe_print_fold_expression.isra.0+0x2f0>

000000000000e528 <d_demangle_callback.constprop.0>:
    e528:	sub	sp, sp, #0x240
    e52c:	stp	x29, x30, [sp]
    e530:	mov	x29, sp
    e534:	stp	x19, x20, [sp, #16]
    e538:	mov	x19, x0
    e53c:	mov	x20, x1
    e540:	stp	x21, x22, [sp, #32]
    e544:	mov	x21, x2
    e548:	stp	x23, x24, [sp, #48]
    e54c:	stp	x25, x26, [sp, #64]
    e550:	ldrb	w24, [x0]
    e554:	cmp	w24, #0x5f
    e558:	b.eq	e6fc <d_demangle_callback.constprop.0+0x1d4>  // b.none
    e55c:	adrp	x1, 0 <d_make_comp>
    e560:	mov	x0, x19
    e564:	add	x1, x1, #0x0
    e568:	mov	x2, #0x8                   	// #8
    e56c:	mov	w23, #0x0                   	// #0
    e570:	bl	0 <strncmp>
    e574:	cbnz	w0, e5c0 <d_demangle_callback.constprop.0+0x98>
    e578:	ldrb	w0, [x19, #8]
    e57c:	mov	w2, #0x5f                  	// #95
    e580:	mov	w1, #0x24                  	// #36
    e584:	cmp	w0, #0x2e
    e588:	ccmp	w0, w2, #0x4, ne  // ne = any
    e58c:	ccmp	w0, w1, #0x4, ne  // ne = any
    e590:	b.ne	e5c0 <d_demangle_callback.constprop.0+0x98>  // b.any
    e594:	ldrb	w0, [x19, #9]
    e598:	mov	w1, #0x49                  	// #73
    e59c:	cmp	w0, #0x44
    e5a0:	ccmp	w0, w1, #0x4, ne  // ne = any
    e5a4:	b.ne	e5c0 <d_demangle_callback.constprop.0+0x98>  // b.any
    e5a8:	ldrb	w1, [x19, #10]
    e5ac:	cmp	w1, w2
    e5b0:	b.ne	e5c0 <d_demangle_callback.constprop.0+0x98>  // b.any
    e5b4:	cmp	w0, #0x49
    e5b8:	cset	w23, ne  // ne = any
    e5bc:	add	w23, w23, #0x2
    e5c0:	mov	x0, x19
    e5c4:	bl	0 <strlen>
    e5c8:	mov	x3, x0
    e5cc:	mov	w1, #0x11                  	// #17
    e5d0:	add	x0, x19, x0
    e5d4:	stp	x19, x0, [x29, #104]
    e5d8:	lsl	w4, w3, #1
    e5dc:	str	w1, [x29, #120]
    e5e0:	cmp	w4, #0x800
    e5e4:	str	x19, [x29, #128]
    e5e8:	mov	w0, #0x0                   	// #0
    e5ec:	stp	wzr, w4, [x29, #144]
    e5f0:	stp	wzr, w3, [x29, #160]
    e5f4:	stp	xzr, xzr, [x29, #168]
    e5f8:	str	xzr, [x29, #184]
    e5fc:	b.hi	e6dc <d_demangle_callback.constprop.0+0x1b4>  // b.pmore
    e600:	mov	x22, sp
    e604:	mov	w0, #0x18                  	// #24
    e608:	sbfiz	x3, x3, #3, #32
    e60c:	cmp	w23, #0x1
    e610:	add	x3, x3, #0xf
    e614:	smsubl	x0, w4, w0, x22
    e618:	and	x3, x3, #0xfffffffffffffff0
    e61c:	mov	sp, x0
    e620:	mov	x25, sp
    e624:	sub	sp, sp, x3
    e628:	mov	x0, sp
    e62c:	str	x25, [x29, #136]
    e630:	str	x0, [x29, #152]
    e634:	b.eq	e73c <d_demangle_callback.constprop.0+0x214>  // b.none
    e638:	sub	w0, w23, #0x2
    e63c:	cmp	w0, #0x1
    e640:	b.hi	e87c <d_demangle_callback.constprop.0+0x354>  // b.pmore
    e644:	cmp	w23, #0x2
    e648:	ldrb	w0, [x19, #11]
    e64c:	add	x24, x19, #0xb
    e650:	str	x24, [x29, #128]
    e654:	cset	w1, ne  // ne = any
    e658:	cmp	w0, #0x5f
    e65c:	add	w23, w1, #0x44
    e660:	b.eq	e710 <d_demangle_callback.constprop.0+0x1e8>  // b.none
    e664:	cmp	w4, #0x0
    e668:	b.le	e9cc <d_demangle_callback.constprop.0+0x4a4>
    e66c:	mov	x0, x24
    e670:	bl	0 <strlen>
    e674:	mov	w1, #0x1                   	// #1
    e678:	str	wzr, [x25, #4]
    e67c:	str	w1, [x29, #144]
    e680:	cmp	w0, #0x0
    e684:	b.le	e9cc <d_demangle_callback.constprop.0+0x4a4>
    e688:	add	x26, x29, #0x68
    e68c:	str	wzr, [x25]
    e690:	str	x24, [x25, #8]
    e694:	str	w0, [x25, #16]
    e698:	mov	w1, w23
    e69c:	mov	x2, x25
    e6a0:	mov	x3, #0x0                   	// #0
    e6a4:	mov	x0, x26
    e6a8:	bl	0 <d_make_comp>
    e6ac:	mov	x19, x0
    e6b0:	ldr	x23, [x29, #128]
    e6b4:	mov	x0, x23
    e6b8:	bl	0 <strlen>
    e6bc:	add	x1, x23, x0
    e6c0:	str	x1, [x29, #128]
    e6c4:	ldrb	w0, [x23, x0]
    e6c8:	cmp	w0, #0x0
    e6cc:	ccmp	x19, #0x0, #0x4, eq  // eq = none
    e6d0:	b.ne	e89c <d_demangle_callback.constprop.0+0x374>  // b.any
    e6d4:	mov	sp, x22
    e6d8:	mov	w0, #0x0                   	// #0
    e6dc:	mov	sp, x29
    e6e0:	ldp	x29, x30, [sp]
    e6e4:	ldp	x19, x20, [sp, #16]
    e6e8:	ldp	x21, x22, [sp, #32]
    e6ec:	ldp	x23, x24, [sp, #48]
    e6f0:	ldp	x25, x26, [sp, #64]
    e6f4:	add	sp, sp, #0x240
    e6f8:	ret
    e6fc:	ldrb	w0, [x0, #1]
    e700:	mov	w23, #0x1                   	// #1
    e704:	cmp	w0, #0x5a
    e708:	b.ne	e55c <d_demangle_callback.constprop.0+0x34>  // b.any
    e70c:	b	e5c0 <d_demangle_callback.constprop.0+0x98>
    e710:	ldrb	w0, [x19, #12]
    e714:	cmp	w0, #0x5a
    e718:	b.ne	e664 <d_demangle_callback.constprop.0+0x13c>  // b.any
    e71c:	add	x26, x29, #0x68
    e720:	add	x19, x19, #0xd
    e724:	mov	x0, x26
    e728:	mov	w1, #0x0                   	// #0
    e72c:	str	x19, [x29, #128]
    e730:	bl	41b8 <d_encoding>
    e734:	mov	x25, x0
    e738:	b	e698 <d_demangle_callback.constprop.0+0x170>
    e73c:	cmp	w24, #0x5f
    e740:	b.ne	e6d4 <d_demangle_callback.constprop.0+0x1ac>  // b.any
    e744:	ldrb	w0, [x19, #1]
    e748:	cmp	w0, #0x5a
    e74c:	b.ne	e6d4 <d_demangle_callback.constprop.0+0x1ac>  // b.any
    e750:	ldrb	w1, [x19, #2]
    e754:	add	x19, x19, #0x2
    e758:	str	x19, [x29, #128]
    e75c:	mov	w0, #0x54                  	// #84
    e760:	cmp	w1, #0x47
    e764:	add	x26, x29, #0x68
    e768:	ccmp	w1, w0, #0x4, ne  // ne = any
    e76c:	b.ne	ea08 <d_demangle_callback.constprop.0+0x4e0>  // b.any
    e770:	mov	x0, x26
    e774:	bl	43f0 <d_special_name>
    e778:	mov	x19, x0
    e77c:	ldr	w1, [x29, #120]
    e780:	ldr	x5, [x29, #128]
    e784:	ldrb	w0, [x5]
    e788:	tbz	w1, #0, e6c8 <d_demangle_callback.constprop.0+0x1a0>
    e78c:	cmp	w0, #0x2e
    e790:	mov	w8, #0x18                  	// #24
    e794:	b.ne	e6c8 <d_demangle_callback.constprop.0+0x1a0>  // b.any
    e798:	ldrb	w0, [x5, #1]
    e79c:	sub	w1, w0, #0x61
    e7a0:	cmp	w0, #0x5f
    e7a4:	and	w1, w1, #0xff
    e7a8:	ccmp	w1, #0x19, #0x0, ne  // ne = any
    e7ac:	b.ls	e9e0 <d_demangle_callback.constprop.0+0x4b8>  // b.plast
    e7b0:	sub	w0, w0, #0x30
    e7b4:	and	w0, w0, #0xff
    e7b8:	cmp	w0, #0x9
    e7bc:	b.hi	e6d4 <d_demangle_callback.constprop.0+0x1ac>  // b.pmore
    e7c0:	mov	x3, x5
    e7c4:	nop
    e7c8:	ldrb	w1, [x3, #1]
    e7cc:	sub	w1, w1, #0x30
    e7d0:	and	w1, w1, #0xff
    e7d4:	cmp	w1, #0x9
    e7d8:	b.hi	e814 <d_demangle_callback.constprop.0+0x2ec>  // b.pmore
    e7dc:	ldrb	w1, [x3, #2]
    e7e0:	add	x3, x3, #0x2
    e7e4:	sub	w4, w1, #0x30
    e7e8:	and	w4, w4, #0xff
    e7ec:	cmp	w4, #0x9
    e7f0:	b.hi	e80c <d_demangle_callback.constprop.0+0x2e4>  // b.pmore
    e7f4:	nop
    e7f8:	ldrb	w1, [x3, #1]!
    e7fc:	sub	w4, w1, #0x30
    e800:	and	w4, w4, #0xff
    e804:	cmp	w4, #0x9
    e808:	b.ls	e7f8 <d_demangle_callback.constprop.0+0x2d0>  // b.plast
    e80c:	cmp	w1, #0x2e
    e810:	b.eq	e7c8 <d_demangle_callback.constprop.0+0x2a0>  // b.none
    e814:	ldp	w0, w1, [x29, #144]
    e818:	str	x3, [x29, #128]
    e81c:	sub	x4, x3, x5
    e820:	cmp	w0, w1
    e824:	b.ge	e9d8 <d_demangle_callback.constprop.0+0x4b0>  // b.tcont
    e828:	ldr	x2, [x29, #136]
    e82c:	smull	x1, w0, w8
    e830:	add	w0, w0, #0x1
    e834:	cmp	w4, #0x0
    e838:	add	x3, x2, x1
    e83c:	str	wzr, [x3, #4]
    e840:	str	w0, [x29, #144]
    e844:	b.le	e9d8 <d_demangle_callback.constprop.0+0x4b0>
    e848:	str	xzr, [x2, x1]
    e84c:	str	x5, [x3, #8]
    e850:	str	w4, [x3, #16]
    e854:	mov	x2, x19
    e858:	mov	x0, x26
    e85c:	mov	w1, #0x4e                  	// #78
    e860:	bl	0 <d_make_comp>
    e864:	ldr	x5, [x29, #128]
    e868:	mov	x19, x0
    e86c:	ldrb	w0, [x5]
    e870:	cmp	w0, #0x2e
    e874:	b.eq	e798 <d_demangle_callback.constprop.0+0x270>  // b.none
    e878:	b	e6c8 <d_demangle_callback.constprop.0+0x1a0>
    e87c:	add	x0, x29, #0x68
    e880:	bl	e28 <d_type>
    e884:	ldr	x1, [x29, #128]
    e888:	mov	x19, x0
    e88c:	ldrb	w0, [x1]
    e890:	cmp	w0, #0x0
    e894:	ccmp	x19, #0x0, #0x4, eq  // eq = none
    e898:	b.eq	e6d4 <d_demangle_callback.constprop.0+0x1ac>  // b.none
    e89c:	add	x2, x29, #0x200
    e8a0:	add	x23, x29, #0xc0
    e8a4:	mov	x0, x23
    e8a8:	mov	x1, x19
    e8ac:	str	xzr, [x29, #448]
    e8b0:	stp	xzr, xzr, [x2, #8]
    e8b4:	strb	wzr, [x29, #456]
    e8b8:	stp	x20, x21, [x29, #464]
    e8bc:	stp	xzr, xzr, [x29, #480]
    e8c0:	stp	xzr, xzr, [x29, #496]
    e8c4:	str	xzr, [x29, #512]
    e8c8:	str	xzr, [x29, #536]
    e8cc:	str	xzr, [x29, #544]
    e8d0:	str	xzr, [x29, #552]
    e8d4:	bl	88 <d_count_templates_scopes>
    e8d8:	ldr	w0, [x29, #500]
    e8dc:	cmp	w0, #0x7ff
    e8e0:	b.gt	e8ec <d_demangle_callback.constprop.0+0x3c4>
    e8e4:	mov	w0, #0x0                   	// #0
    e8e8:	str	wzr, [x29, #500]
    e8ec:	ldr	w1, [x29, #540]
    e8f0:	mov	w2, #0x1                   	// #1
    e8f4:	ldr	w5, [x29, #556]
    e8f8:	mov	x20, sp
    e8fc:	cmp	w1, #0x0
    e900:	ldr	w3, [x19, #4]
    e904:	csel	w4, w1, w2, gt
    e908:	str	xzr, [x29, #560]
    e90c:	mul	w1, w1, w5
    e910:	sub	sp, sp, w4, sxtw #4
    e914:	str	w1, [x29, #556]
    e918:	mov	x4, sp
    e91c:	cmp	w1, #0x0
    e920:	str	x4, [x29, #528]
    e924:	csel	w1, w1, w2, gt
    e928:	cmp	w3, w2
    e92c:	sub	sp, sp, w1, sxtw #4
    e930:	mov	x1, sp
    e934:	str	x1, [x29, #544]
    e938:	b.gt	e9c0 <d_demangle_callback.constprop.0+0x498>
    e93c:	cmp	w0, #0x400
    e940:	b.gt	e9c0 <d_demangle_callback.constprop.0+0x498>
    e944:	add	w3, w3, #0x1
    e948:	add	x4, x29, #0x58
    e94c:	ldr	x5, [x29, #520]
    e950:	str	w3, [x19, #4]
    e954:	add	w3, w0, #0x1
    e958:	mov	w1, #0x11                  	// #17
    e95c:	mov	x0, x23
    e960:	mov	x2, x19
    e964:	stp	x19, x5, [x29, #88]
    e968:	str	w3, [x29, #500]
    e96c:	str	x4, [x29, #520]
    e970:	bl	4e08 <d_print_comp_inner>
    e974:	ldr	w1, [x19, #4]
    e978:	ldr	x0, [x29, #96]
    e97c:	str	x0, [x29, #520]
    e980:	ldr	w0, [x29, #500]
    e984:	sub	w1, w1, #0x1
    e988:	str	w1, [x19, #4]
    e98c:	sub	w0, w0, #0x1
    e990:	str	w0, [x29, #500]
    e994:	ldr	x1, [x29, #448]
    e998:	mov	sp, x20
    e99c:	ldp	x3, x2, [x29, #464]
    e9a0:	mov	x0, x23
    e9a4:	strb	wzr, [x23, x1]
    e9a8:	blr	x3
    e9ac:	ldr	w0, [x29, #496]
    e9b0:	mov	sp, x22
    e9b4:	cmp	w0, #0x0
    e9b8:	cset	w0, eq  // eq = none
    e9bc:	b	e6dc <d_demangle_callback.constprop.0+0x1b4>
    e9c0:	mov	w0, #0x1                   	// #1
    e9c4:	str	w0, [x29, #496]
    e9c8:	b	e994 <d_demangle_callback.constprop.0+0x46c>
    e9cc:	add	x26, x29, #0x68
    e9d0:	mov	x25, #0x0                   	// #0
    e9d4:	b	e698 <d_demangle_callback.constprop.0+0x170>
    e9d8:	mov	x3, #0x0                   	// #0
    e9dc:	b	e854 <d_demangle_callback.constprop.0+0x32c>
    e9e0:	ldrb	w1, [x5, #2]
    e9e4:	add	x3, x5, #0x2
    e9e8:	b	e9f0 <d_demangle_callback.constprop.0+0x4c8>
    e9ec:	ldrb	w1, [x3, #1]!
    e9f0:	sub	w0, w1, #0x61
    e9f4:	cmp	w1, #0x5f
    e9f8:	and	w0, w0, #0xff
    e9fc:	ccmp	w0, #0x19, #0x0, ne  // ne = any
    ea00:	b.ls	e9ec <d_demangle_callback.constprop.0+0x4c4>  // b.plast
    ea04:	b	e80c <d_demangle_callback.constprop.0+0x2e4>
    ea08:	mov	w1, w23
    ea0c:	mov	x0, x26
    ea10:	bl	3f98 <d_encoding.part.0>
    ea14:	mov	x19, x0
    ea18:	b	e77c <d_demangle_callback.constprop.0+0x254>
    ea1c:	nop

000000000000ea20 <d_print_mod>:
    ea20:	stp	x29, x30, [sp, #-80]!
    ea24:	mov	x29, sp
    ea28:	stp	x19, x20, [sp, #16]
    ea2c:	mov	x19, x0
    ea30:	ldr	w0, [x2]
    ea34:	stp	x21, x22, [sp, #32]
    ea38:	mov	x20, x2
    ea3c:	sub	w0, w0, #0x3
    ea40:	mov	w21, w1
    ea44:	cmp	w0, #0x4d
    ea48:	b.ls	ea7c <d_print_mod+0x5c>  // b.plast
    ea4c:	ldr	w0, [x20, #4]
    ea50:	cmp	w0, #0x1
    ea54:	b.gt	ea64 <d_print_mod+0x44>
    ea58:	ldr	w1, [x19, #308]
    ea5c:	cmp	w1, #0x400
    ea60:	b.le	f62c <d_print_mod+0xc0c>
    ea64:	mov	w0, #0x1                   	// #1
    ea68:	str	w0, [x19, #304]
    ea6c:	ldp	x19, x20, [sp, #16]
    ea70:	ldp	x21, x22, [sp, #32]
    ea74:	ldp	x29, x30, [sp], #80
    ea78:	ret
    ea7c:	adrp	x1, 0 <d_make_comp>
    ea80:	add	x1, x1, #0x0
    ea84:	ldrh	w0, [x1, w0, uxtw #1]
    ea88:	adr	x1, ea94 <d_print_mod+0x74>
    ea8c:	add	x0, x1, w0, sxth #2
    ea90:	br	x0
    ea94:	ldr	x0, [x19, #256]
    ea98:	cmp	x0, #0xff
    ea9c:	b.eq	fb04 <d_print_mod+0x10e4>  // b.none
    eaa0:	add	x1, x0, #0x1
    eaa4:	str	x1, [x19, #256]
    eaa8:	mov	w2, #0x20                  	// #32
    eaac:	strb	w2, [x19, x0]
    eab0:	strb	w2, [x19, #264]
    eab4:	cmp	x1, #0xff
    eab8:	b.ne	fe78 <d_print_mod+0x1458>  // b.any
    eabc:	ldp	x3, x2, [x19, #272]
    eac0:	strb	wzr, [x19, #255]
    eac4:	mov	x0, x19
    eac8:	blr	x3
    eacc:	ldr	x0, [x19, #320]
    ead0:	mov	w3, #0x6f63                	// #28515
    ead4:	mov	w2, #0x6e                  	// #110
    ead8:	mov	x1, #0x3                   	// #3
    eadc:	add	x0, x0, #0x1
    eae0:	strh	w3, [x19]
    eae4:	strb	w2, [x19, #2]
    eae8:	str	x0, [x19, #320]
    eaec:	add	x0, x1, #0x1
    eaf0:	str	x0, [x19, #256]
    eaf4:	mov	w2, #0x73                  	// #115
    eaf8:	strb	w2, [x19, x1]
    eafc:	strb	w2, [x19, #264]
    eb00:	cmp	x0, #0xff
    eb04:	b.ne	ebf8 <d_print_mod+0x1d8>  // b.any
    eb08:	ldp	x3, x2, [x19, #272]
    eb0c:	strb	wzr, [x19, #255]
    eb10:	mov	x1, x0
    eb14:	mov	x0, x19
    eb18:	blr	x3
    eb1c:	ldr	x2, [x19, #320]
    eb20:	mov	x1, #0x1                   	// #1
    eb24:	mov	x0, #0x0                   	// #0
    eb28:	add	x2, x2, x1
    eb2c:	str	x2, [x19, #320]
    eb30:	str	x1, [x19, #256]
    eb34:	mov	w1, #0x74                  	// #116
    eb38:	strb	w1, [x19, x0]
    eb3c:	strb	w1, [x19, #264]
    eb40:	ldp	x19, x20, [sp, #16]
    eb44:	ldp	x21, x22, [sp, #32]
    eb48:	ldp	x29, x30, [sp], #80
    eb4c:	ret
    eb50:	ldr	x0, [x19, #256]
    eb54:	cmp	x0, #0xff
    eb58:	b.eq	f740 <d_print_mod+0xd20>  // b.none
    eb5c:	add	x1, x0, #0x1
    eb60:	str	x1, [x19, #256]
    eb64:	mov	w2, #0x20                  	// #32
    eb68:	strb	w2, [x19, x0]
    eb6c:	strb	w2, [x19, #264]
    eb70:	cmp	x1, #0xff
    eb74:	b.ne	ffb8 <d_print_mod+0x1598>  // b.any
    eb78:	ldp	x3, x2, [x19, #272]
    eb7c:	strb	wzr, [x19, #255]
    eb80:	mov	x0, x19
    eb84:	blr	x3
    eb88:	ldr	x0, [x19, #320]
    eb8c:	mov	w2, #0x6572                	// #25970
    eb90:	mov	w1, #0x73                  	// #115
    eb94:	mov	x3, #0x3                   	// #3
    eb98:	add	x0, x0, #0x1
    eb9c:	strh	w2, [x19]
    eba0:	strb	w1, [x19, #2]
    eba4:	str	x0, [x19, #320]
    eba8:	add	x1, x3, #0x1
    ebac:	str	x1, [x19, #256]
    ebb0:	mov	w0, #0x74                  	// #116
    ebb4:	strb	w0, [x19, x3]
    ebb8:	strb	w0, [x19, #264]
    ebbc:	cmp	x1, #0xff
    ebc0:	b.ne	10008 <d_print_mod+0x15e8>  // b.any
    ebc4:	ldp	x3, x2, [x19, #272]
    ebc8:	strb	wzr, [x19, #255]
    ebcc:	mov	x0, x19
    ebd0:	blr	x3
    ebd4:	ldr	x0, [x19, #320]
    ebd8:	mov	w2, #0x6972                	// #26994
    ebdc:	mov	x1, #0x2                   	// #2
    ebe0:	strh	w2, [x19]
    ebe4:	add	x0, x0, #0x1
    ebe8:	str	x0, [x19, #320]
    ebec:	add	x0, x1, #0x1
    ebf0:	mov	w2, #0x63                  	// #99
    ebf4:	strb	w2, [x19, x1]
    ebf8:	add	x1, x0, #0x1
    ebfc:	b	eb30 <d_print_mod+0x110>
    ec00:	ldr	x0, [x19, #256]
    ec04:	cmp	x0, #0xff
    ec08:	b.eq	f7e8 <d_print_mod+0xdc8>  // b.none
    ec0c:	add	x1, x0, #0x1
    ec10:	str	x1, [x19, #256]
    ec14:	mov	w2, #0x20                  	// #32
    ec18:	strb	w2, [x19, x0]
    ec1c:	strb	w2, [x19, #264]
    ec20:	cmp	x1, #0xff
    ec24:	b.ne	10218 <d_print_mod+0x17f8>  // b.any
    ec28:	ldp	x3, x2, [x19, #272]
    ec2c:	strb	wzr, [x19, #255]
    ec30:	mov	x0, x19
    ec34:	blr	x3
    ec38:	ldr	x0, [x19, #320]
    ec3c:	mov	w2, #0x6f76                	// #28534
    ec40:	mov	w1, #0x6c                  	// #108
    ec44:	mov	x3, #0x3                   	// #3
    ec48:	add	x0, x0, #0x1
    ec4c:	strh	w2, [x19]
    ec50:	strb	w1, [x19, #2]
    ec54:	str	x0, [x19, #320]
    ec58:	add	x1, x3, #0x1
    ec5c:	str	x1, [x19, #256]
    ec60:	mov	w0, #0x61                  	// #97
    ec64:	strb	w0, [x19, x3]
    ec68:	strb	w0, [x19, #264]
    ec6c:	cmp	x1, #0xff
    ec70:	b.ne	10268 <d_print_mod+0x1848>  // b.any
    ec74:	ldp	x3, x2, [x19, #272]
    ec78:	strb	wzr, [x19, #255]
    ec7c:	mov	x0, x19
    ec80:	blr	x3
    ec84:	ldr	x0, [x19, #320]
    ec88:	mov	w2, #0x6974                	// #26996
    ec8c:	mov	x1, #0x2                   	// #2
    ec90:	strh	w2, [x19]
    ec94:	add	x0, x0, #0x1
    ec98:	str	x0, [x19, #320]
    ec9c:	add	x0, x1, #0x1
    eca0:	mov	w2, #0x6c                  	// #108
    eca4:	strb	w2, [x19, x1]
    eca8:	add	x1, x0, #0x1
    ecac:	b	f8b0 <d_print_mod+0xe90>
    ecb0:	ldr	x0, [x19, #256]
    ecb4:	cmp	x0, #0xff
    ecb8:	b.eq	f5c8 <d_print_mod+0xba8>  // b.none
    ecbc:	add	x1, x0, #0x1
    ecc0:	str	x1, [x19, #256]
    ecc4:	mov	w2, #0x20                  	// #32
    ecc8:	strb	w2, [x19, x0]
    eccc:	strb	w2, [x19, #264]
    ecd0:	b	eed4 <d_print_mod+0x4b4>
    ecd4:	ldr	x1, [x19, #256]
    ecd8:	add	x0, x1, #0x1
    ecdc:	cmp	x1, #0xff
    ece0:	b.eq	f8c4 <d_print_mod+0xea4>  // b.none
    ece4:	str	x0, [x19, #256]
    ece8:	mov	w0, #0x20                  	// #32
    ecec:	strb	w0, [x19, x1]
    ecf0:	strb	w0, [x19, #264]
    ecf4:	ldr	x20, [x20, #16]
    ecf8:	cbnz	x20, ea4c <d_print_mod+0x2c>
    ecfc:	b	ea64 <d_print_mod+0x44>
    ed00:	tbnz	w21, #2, ea6c <d_print_mod+0x4c>
    ed04:	ldr	x1, [x19, #256]
    ed08:	add	x0, x1, #0x1
    ed0c:	cmp	x1, #0xff
    ed10:	b.ne	ed38 <d_print_mod+0x318>  // b.any
    ed14:	ldp	x3, x2, [x19, #272]
    ed18:	strb	wzr, [x19, #255]
    ed1c:	mov	x0, x19
    ed20:	blr	x3
    ed24:	ldr	x2, [x19, #320]
    ed28:	mov	x0, #0x1                   	// #1
    ed2c:	mov	x1, #0x0                   	// #0
    ed30:	add	x2, x2, x0
    ed34:	str	x2, [x19, #320]
    ed38:	str	x0, [x19, #256]
    ed3c:	mov	w0, #0x2a                  	// #42
    ed40:	strb	w0, [x19, x1]
    ed44:	strb	w0, [x19, #264]
    ed48:	b	ea6c <d_print_mod+0x4c>
    ed4c:	ldr	x20, [x2, #8]
    ed50:	cbnz	x20, ea4c <d_print_mod+0x2c>
    ed54:	b	ea64 <d_print_mod+0x44>
    ed58:	ldrb	w0, [x19, #264]
    ed5c:	cmp	w0, #0x28
    ed60:	b.eq	eda8 <d_print_mod+0x388>  // b.none
    ed64:	ldr	x1, [x19, #256]
    ed68:	add	x0, x1, #0x1
    ed6c:	cmp	x1, #0xff
    ed70:	b.ne	ed98 <d_print_mod+0x378>  // b.any
    ed74:	ldp	x3, x2, [x19, #272]
    ed78:	strb	wzr, [x19, #255]
    ed7c:	mov	x0, x19
    ed80:	blr	x3
    ed84:	ldr	x2, [x19, #320]
    ed88:	mov	x0, #0x1                   	// #1
    ed8c:	mov	x1, #0x0                   	// #0
    ed90:	add	x2, x2, x0
    ed94:	str	x2, [x19, #320]
    ed98:	str	x0, [x19, #256]
    ed9c:	mov	w0, #0x20                  	// #32
    eda0:	strb	w0, [x19, x1]
    eda4:	strb	w0, [x19, #264]
    eda8:	ldr	x20, [x20, #8]
    edac:	cbz	x20, fc3c <d_print_mod+0x121c>
    edb0:	ldr	w0, [x20, #4]
    edb4:	cmp	w0, #0x1
    edb8:	b.gt	fc3c <d_print_mod+0x121c>
    edbc:	ldr	w1, [x19, #308]
    edc0:	cmp	w1, #0x400
    edc4:	b.gt	fc3c <d_print_mod+0x121c>
    edc8:	ldr	x3, [x19, #328]
    edcc:	add	w0, w0, #0x1
    edd0:	str	w0, [x20, #4]
    edd4:	add	w1, w1, #0x1
    edd8:	add	x0, sp, #0x40
    eddc:	str	w1, [x19, #308]
    ede0:	str	x0, [x19, #328]
    ede4:	mov	w1, w21
    ede8:	mov	x0, x19
    edec:	mov	x2, x20
    edf0:	stp	x20, x3, [sp, #64]
    edf4:	bl	4e08 <d_print_comp_inner>
    edf8:	ldr	w1, [x20, #4]
    edfc:	ldr	x0, [sp, #72]
    ee00:	str	x0, [x19, #328]
    ee04:	ldr	w0, [x19, #308]
    ee08:	sub	w1, w1, #0x1
    ee0c:	str	w1, [x20, #4]
    ee10:	sub	w0, w0, #0x1
    ee14:	str	w0, [x19, #308]
    ee18:	ldr	x0, [x19, #256]
    ee1c:	cmp	x0, #0xff
    ee20:	b.eq	1052c <d_print_mod+0x1b0c>  // b.none
    ee24:	add	x1, x0, #0x1
    ee28:	str	x1, [x19, #256]
    ee2c:	mov	w20, #0x3a                  	// #58
    ee30:	strb	w20, [x19, x0]
    ee34:	strb	w20, [x19, #264]
    ee38:	cmp	x1, #0xff
    ee3c:	b.ne	104e8 <d_print_mod+0x1ac8>  // b.any
    ee40:	ldp	x3, x2, [x19, #272]
    ee44:	strb	wzr, [x19, #255]
    ee48:	mov	x0, x19
    ee4c:	blr	x3
    ee50:	strb	w20, [x19]
    ee54:	ldr	x1, [x19, #320]
    ee58:	mov	x0, #0x1                   	// #1
    ee5c:	add	x1, x1, x0
    ee60:	str	x1, [x19, #320]
    ee64:	add	x1, x0, #0x1
    ee68:	str	x1, [x19, #256]
    ee6c:	mov	w1, #0x2a                  	// #42
    ee70:	strb	w1, [x19, x0]
    ee74:	strb	w1, [x19, #264]
    ee78:	b	ea6c <d_print_mod+0x4c>
    ee7c:	ldr	x0, [x19, #256]
    ee80:	cmp	x0, #0xff
    ee84:	b.eq	f710 <d_print_mod+0xcf0>  // b.none
    ee88:	add	x1, x0, #0x1
    ee8c:	str	x1, [x19, #256]
    ee90:	mov	w2, #0x20                  	// #32
    ee94:	strb	w2, [x19, x0]
    ee98:	strb	w2, [x19, #264]
    ee9c:	b	eea4 <d_print_mod+0x484>
    eea0:	ldr	x1, [x19, #256]
    eea4:	cmp	x1, #0xff
    eea8:	b.eq	f604 <d_print_mod+0xbe4>  // b.none
    eeac:	add	x0, x1, #0x1
    eeb0:	str	x0, [x19, #256]
    eeb4:	mov	w0, #0x26                  	// #38
    eeb8:	strb	w0, [x19, x1]
    eebc:	strb	w0, [x19, #264]
    eec0:	ldp	x19, x20, [sp, #16]
    eec4:	ldp	x21, x22, [sp, #32]
    eec8:	ldp	x29, x30, [sp], #80
    eecc:	ret
    eed0:	ldr	x1, [x19, #256]
    eed4:	cmp	x1, #0xff
    eed8:	b.eq	fc60 <d_print_mod+0x1240>  // b.none
    eedc:	add	x0, x1, #0x1
    eee0:	str	x0, [x19, #256]
    eee4:	mov	w2, #0x26                  	// #38
    eee8:	strb	w2, [x19, x1]
    eeec:	strb	w2, [x19, #264]
    eef0:	cmp	x0, #0xff
    eef4:	b.ne	f5f4 <d_print_mod+0xbd4>  // b.any
    eef8:	ldp	x3, x2, [x19, #272]
    eefc:	strb	wzr, [x19, #255]
    ef00:	mov	x1, x0
    ef04:	mov	x0, x19
    ef08:	blr	x3
    ef0c:	ldr	x2, [x19, #320]
    ef10:	mov	x1, #0x1                   	// #1
    ef14:	mov	x0, #0x0                   	// #0
    ef18:	add	x2, x2, x1
    ef1c:	str	x2, [x19, #320]
    ef20:	str	x1, [x19, #256]
    ef24:	mov	w1, #0x26                  	// #38
    ef28:	strb	w1, [x19, x0]
    ef2c:	strb	w1, [x19, #264]
    ef30:	ldp	x19, x20, [sp, #16]
    ef34:	ldp	x21, x22, [sp, #32]
    ef38:	ldp	x29, x30, [sp], #80
    ef3c:	ret
    ef40:	ldr	x0, [x19, #256]
    ef44:	cmp	x0, #0xff
    ef48:	b.eq	fa34 <d_print_mod+0x1014>  // b.none
    ef4c:	add	x1, x0, #0x1
    ef50:	str	x1, [x19, #256]
    ef54:	mov	w2, #0x20                  	// #32
    ef58:	strb	w2, [x19, x0]
    ef5c:	strb	w2, [x19, #264]
    ef60:	cmp	x1, #0xff
    ef64:	b.ne	fdd0 <d_print_mod+0x13b0>  // b.any
    ef68:	ldp	x3, x2, [x19, #272]
    ef6c:	strb	wzr, [x19, #255]
    ef70:	mov	x0, x19
    ef74:	blr	x3
    ef78:	ldr	x0, [x19, #320]
    ef7c:	mov	w3, #0x5f5f                	// #24415
    ef80:	mov	w2, #0x76                  	// #118
    ef84:	mov	x1, #0x3                   	// #3
    ef88:	add	x0, x0, #0x1
    ef8c:	strh	w3, [x19]
    ef90:	strb	w2, [x19, #2]
    ef94:	str	x0, [x19, #320]
    ef98:	add	x0, x1, #0x1
    ef9c:	str	x0, [x19, #256]
    efa0:	mov	w2, #0x65                  	// #101
    efa4:	strb	w2, [x19, x1]
    efa8:	strb	w2, [x19, #264]
    efac:	cmp	x0, #0xff
    efb0:	b.ne	fe20 <d_print_mod+0x1400>  // b.any
    efb4:	ldp	x3, x2, [x19, #272]
    efb8:	strb	wzr, [x19, #255]
    efbc:	mov	x1, x0
    efc0:	mov	x0, x19
    efc4:	blr	x3
    efc8:	ldr	x0, [x19, #320]
    efcc:	mov	w2, #0x7463                	// #29795
    efd0:	mov	w1, #0x6f                  	// #111
    efd4:	mov	x3, #0x3                   	// #3
    efd8:	add	x0, x0, #0x1
    efdc:	strh	w2, [x19]
    efe0:	strb	w1, [x19, #2]
    efe4:	str	x0, [x19, #320]
    efe8:	add	x1, x3, #0x1
    efec:	str	x1, [x19, #256]
    eff0:	mov	w0, #0x72                  	// #114
    eff4:	strb	w0, [x19, x3]
    eff8:	strb	w0, [x19, #264]
    effc:	cmp	x1, #0xff
    f000:	b.ne	fafc <d_print_mod+0x10dc>  // b.any
    f004:	ldp	x3, x2, [x19, #272]
    f008:	strb	wzr, [x19, #255]
    f00c:	mov	x0, x19
    f010:	blr	x3
    f014:	ldr	x2, [x19, #320]
    f018:	mov	x0, #0x1                   	// #1
    f01c:	mov	x1, #0x0                   	// #0
    f020:	add	x2, x2, x0
    f024:	str	x2, [x19, #320]
    f028:	str	x0, [x19, #256]
    f02c:	mov	w2, #0x28                  	// #40
    f030:	strb	w2, [x19, x1]
    f034:	strb	w2, [x19, #264]
    f038:	ldr	x20, [x20, #8]
    f03c:	cbz	x20, fc48 <d_print_mod+0x1228>
    f040:	ldr	w1, [x20, #4]
    f044:	cmp	w1, #0x1
    f048:	b.gt	fc48 <d_print_mod+0x1228>
    f04c:	ldr	w2, [x19, #308]
    f050:	cmp	w2, #0x400
    f054:	b.gt	fc48 <d_print_mod+0x1228>
    f058:	ldr	x3, [x19, #328]
    f05c:	add	w1, w1, #0x1
    f060:	str	w1, [x20, #4]
    f064:	add	w2, w2, #0x1
    f068:	add	x0, sp, #0x40
    f06c:	str	w2, [x19, #308]
    f070:	str	x0, [x19, #328]
    f074:	mov	w1, w21
    f078:	mov	x2, x20
    f07c:	mov	x0, x19
    f080:	stp	x20, x3, [sp, #64]
    f084:	bl	4e08 <d_print_comp_inner>
    f088:	ldr	w2, [x20, #4]
    f08c:	ldr	x0, [sp, #72]
    f090:	str	x0, [x19, #328]
    f094:	ldr	w1, [x19, #308]
    f098:	sub	w2, w2, #0x1
    f09c:	ldr	x0, [x19, #256]
    f0a0:	str	w2, [x20, #4]
    f0a4:	sub	w1, w1, #0x1
    f0a8:	str	w1, [x19, #308]
    f0ac:	add	x1, x0, #0x1
    f0b0:	cmp	x0, #0xff
    f0b4:	b.ne	f0e0 <d_print_mod+0x6c0>  // b.any
    f0b8:	ldp	x3, x2, [x19, #272]
    f0bc:	strb	wzr, [x19, #255]
    f0c0:	mov	x1, x0
    f0c4:	mov	x0, x19
    f0c8:	blr	x3
    f0cc:	ldr	x2, [x19, #320]
    f0d0:	mov	x1, #0x1                   	// #1
    f0d4:	mov	x0, #0x0                   	// #0
    f0d8:	add	x2, x2, x1
    f0dc:	str	x2, [x19, #320]
    f0e0:	str	x1, [x19, #256]
    f0e4:	mov	w1, #0x29                  	// #41
    f0e8:	strb	w1, [x19, x0]
    f0ec:	strb	w1, [x19, #264]
    f0f0:	b	ea6c <d_print_mod+0x4c>
    f0f4:	ldr	x0, [x19, #256]
    f0f8:	cmp	x0, #0xff
    f0fc:	b.eq	f680 <d_print_mod+0xc60>  // b.none
    f100:	add	x1, x0, #0x1
    f104:	str	x1, [x19, #256]
    f108:	mov	w2, #0x20                  	// #32
    f10c:	strb	w2, [x19, x0]
    f110:	strb	w2, [x19, #264]
    f114:	cmp	x1, #0xff
    f118:	b.ne	10158 <d_print_mod+0x1738>  // b.any
    f11c:	ldp	x3, x2, [x19, #272]
    f120:	strb	wzr, [x19, #255]
    f124:	mov	x0, x19
    f128:	blr	x3
    f12c:	ldr	x0, [x19, #320]
    f130:	mov	w3, #0x6874                	// #26740
    f134:	mov	w2, #0x72                  	// #114
    f138:	mov	x1, #0x3                   	// #3
    f13c:	add	x0, x0, #0x1
    f140:	strh	w3, [x19]
    f144:	strb	w2, [x19, #2]
    f148:	str	x0, [x19, #320]
    f14c:	add	x3, x1, #0x1
    f150:	str	x3, [x19, #256]
    f154:	mov	w0, #0x6f                  	// #111
    f158:	strb	w0, [x19, x1]
    f15c:	strb	w0, [x19, #264]
    f160:	cmp	x3, #0xff
    f164:	b.ne	101ac <d_print_mod+0x178c>  // b.any
    f168:	ldp	x4, x2, [x19, #272]
    f16c:	strb	wzr, [x19, #255]
    f170:	mov	x0, x19
    f174:	mov	x1, x3
    f178:	blr	x4
    f17c:	mov	w0, #0x77                  	// #119
    f180:	strb	w0, [x19]
    f184:	mov	x2, #0x1                   	// #1
    f188:	strb	w0, [x19, #264]
    f18c:	mov	x0, x2
    f190:	ldr	x1, [x19, #320]
    f194:	ldr	x22, [x20, #16]
    f198:	add	x1, x1, x2
    f19c:	str	x2, [x19, #256]
    f1a0:	str	x1, [x19, #320]
    f1a4:	cbz	x22, ea6c <d_print_mod+0x4c>
    f1a8:	add	x1, x0, #0x1
    f1ac:	str	x1, [x19, #256]
    f1b0:	mov	w2, #0x28                  	// #40
    f1b4:	strb	w2, [x19, x0]
    f1b8:	strb	w2, [x19, #264]
    f1bc:	ldr	w0, [x22, #4]
    f1c0:	cmp	w0, #0x1
    f1c4:	b.gt	fc54 <d_print_mod+0x1234>
    f1c8:	ldr	w2, [x19, #308]
    f1cc:	cmp	w2, #0x400
    f1d0:	b.gt	fc54 <d_print_mod+0x1234>
    f1d4:	ldr	x3, [x19, #328]
    f1d8:	add	w0, w0, #0x1
    f1dc:	str	w0, [x22, #4]
    f1e0:	add	w2, w2, #0x1
    f1e4:	add	x0, sp, #0x40
    f1e8:	str	w2, [x19, #308]
    f1ec:	str	x0, [x19, #328]
    f1f0:	mov	w1, w21
    f1f4:	mov	x2, x22
    f1f8:	mov	x0, x19
    f1fc:	stp	x22, x3, [sp, #64]
    f200:	bl	4e08 <d_print_comp_inner>
    f204:	ldr	w2, [x22, #4]
    f208:	ldr	x0, [sp, #72]
    f20c:	str	x0, [x19, #328]
    f210:	ldr	w0, [x19, #308]
    f214:	sub	w2, w2, #0x1
    f218:	ldr	x1, [x19, #256]
    f21c:	str	w2, [x22, #4]
    f220:	sub	w0, w0, #0x1
    f224:	str	w0, [x19, #308]
    f228:	cmp	x1, #0xff
    f22c:	b.ne	f5c0 <d_print_mod+0xba0>  // b.any
    f230:	ldp	x3, x2, [x19, #272]
    f234:	strb	wzr, [x19, #255]
    f238:	mov	x0, x19
    f23c:	blr	x3
    f240:	ldr	x2, [x19, #320]
    f244:	mov	x0, #0x1                   	// #1
    f248:	mov	x1, #0x0                   	// #0
    f24c:	add	x2, x2, x0
    f250:	str	x2, [x19, #320]
    f254:	str	x0, [x19, #256]
    f258:	mov	w0, #0x29                  	// #41
    f25c:	strb	w0, [x19, x1]
    f260:	strb	w0, [x19, #264]
    f264:	b	ea6c <d_print_mod+0x4c>
    f268:	ldr	x0, [x19, #256]
    f26c:	cmp	x0, #0xff
    f270:	b.eq	f8ec <d_print_mod+0xecc>  // b.none
    f274:	add	x1, x0, #0x1
    f278:	str	x1, [x19, #256]
    f27c:	mov	w2, #0x63                  	// #99
    f280:	strb	w2, [x19, x0]
    f284:	strb	w2, [x19, #264]
    f288:	cmp	x1, #0xff
    f28c:	b.ne	100d4 <d_print_mod+0x16b4>  // b.any
    f290:	ldp	x3, x2, [x19, #272]
    f294:	strb	wzr, [x19, #255]
    f298:	mov	x0, x19
    f29c:	blr	x3
    f2a0:	ldr	x0, [x19, #320]
    f2a4:	mov	w3, #0x6d6f                	// #28015
    f2a8:	mov	w2, #0x70                  	// #112
    f2ac:	mov	x1, #0x3                   	// #3
    f2b0:	add	x0, x0, #0x1
    f2b4:	strh	w3, [x19]
    f2b8:	strb	w2, [x19, #2]
    f2bc:	str	x0, [x19, #320]
    f2c0:	add	x0, x1, #0x1
    f2c4:	str	x0, [x19, #256]
    f2c8:	mov	w2, #0x6c                  	// #108
    f2cc:	strb	w2, [x19, x1]
    f2d0:	strb	w2, [x19, #264]
    f2d4:	cmp	x0, #0xff
    f2d8:	b.ne	10124 <d_print_mod+0x1704>  // b.any
    f2dc:	ldp	x3, x2, [x19, #272]
    f2e0:	strb	wzr, [x19, #255]
    f2e4:	mov	x1, x0
    f2e8:	mov	x0, x19
    f2ec:	blr	x3
    f2f0:	ldr	x0, [x19, #320]
    f2f4:	mov	w2, #0x65                  	// #101
    f2f8:	mov	x1, #0x1                   	// #1
    f2fc:	strb	w2, [x19]
    f300:	add	x0, x0, x1
    f304:	str	x0, [x19, #320]
    f308:	add	x0, x1, #0x1
    f30c:	mov	w2, #0x78                  	// #120
    f310:	strb	w2, [x19, x1]
    f314:	add	x1, x0, #0x1
    f318:	b	f408 <d_print_mod+0x9e8>
    f31c:	ldr	x0, [x19, #256]
    f320:	cmp	x0, #0xff
    f324:	b.eq	f968 <d_print_mod+0xf48>  // b.none
    f328:	add	x1, x0, #0x1
    f32c:	str	x1, [x19, #256]
    f330:	mov	w20, #0x69                  	// #105
    f334:	strb	w20, [x19, x0]
    f338:	strb	w20, [x19, #264]
    f33c:	cmp	x1, #0xff
    f340:	b.ne	fc90 <d_print_mod+0x1270>  // b.any
    f344:	ldp	x3, x2, [x19, #272]
    f348:	strb	wzr, [x19, #255]
    f34c:	mov	x0, x19
    f350:	blr	x3
    f354:	ldr	x0, [x19, #320]
    f358:	mov	w3, #0x616d                	// #24941
    f35c:	mov	w2, #0x67                  	// #103
    f360:	mov	x1, #0x3                   	// #3
    f364:	add	x0, x0, #0x1
    f368:	strh	w3, [x19]
    f36c:	strb	w2, [x19, #2]
    f370:	str	x0, [x19, #320]
    f374:	add	x0, x1, #0x1
    f378:	str	x0, [x19, #256]
    f37c:	mov	w2, #0x69                  	// #105
    f380:	strb	w2, [x19, x1]
    f384:	strb	w2, [x19, #264]
    f388:	cmp	x0, #0xff
    f38c:	b.ne	fcdc <d_print_mod+0x12bc>  // b.any
    f390:	ldp	x3, x2, [x19, #272]
    f394:	strb	wzr, [x19, #255]
    f398:	mov	x1, x0
    f39c:	mov	x0, x19
    f3a0:	blr	x3
    f3a4:	ldr	x0, [x19, #320]
    f3a8:	mov	w3, #0x616e                	// #24942
    f3ac:	mov	w2, #0x72                  	// #114
    f3b0:	mov	x1, #0x3                   	// #3
    f3b4:	add	x0, x0, #0x1
    f3b8:	strh	w3, [x19]
    f3bc:	strb	w2, [x19, #2]
    f3c0:	str	x0, [x19, #320]
    f3c4:	add	x0, x1, #0x1
    f3c8:	str	x0, [x19, #256]
    f3cc:	mov	w2, #0x79                  	// #121
    f3d0:	strb	w2, [x19, x1]
    f3d4:	strb	w2, [x19, #264]
    f3d8:	cmp	x0, #0xff
    f3dc:	b.ne	f314 <d_print_mod+0x8f4>  // b.any
    f3e0:	ldp	x3, x2, [x19, #272]
    f3e4:	strb	wzr, [x19, #255]
    f3e8:	mov	x1, x0
    f3ec:	mov	x0, x19
    f3f0:	blr	x3
    f3f4:	ldr	x2, [x19, #320]
    f3f8:	mov	x1, #0x1                   	// #1
    f3fc:	mov	x0, #0x0                   	// #0
    f400:	add	x2, x2, x1
    f404:	str	x2, [x19, #320]
    f408:	str	x1, [x19, #256]
    f40c:	mov	w1, #0x20                  	// #32
    f410:	strb	w1, [x19, x0]
    f414:	strb	w1, [x19, #264]
    f418:	ldp	x19, x20, [sp, #16]
    f41c:	ldp	x21, x22, [sp, #32]
    f420:	ldp	x29, x30, [sp], #80
    f424:	ret
    f428:	adrp	x20, 0 <d_make_comp>
    f42c:	add	x20, x20, #0x0
    f430:	add	x22, x20, #0x11
    f434:	ldr	x1, [x19, #256]
    f438:	str	x23, [sp, #48]
    f43c:	mov	x23, #0x1                   	// #1
    f440:	b	f49c <d_print_mod+0xa7c>
    f444:	ldp	x3, x2, [x19, #272]
    f448:	strb	wzr, [x19, #255]
    f44c:	mov	x0, x19
    f450:	add	x20, x20, #0x1
    f454:	blr	x3
    f458:	strb	w21, [x19]
    f45c:	ldr	x0, [x19, #320]
    f460:	str	x23, [x19, #256]
    f464:	strb	w21, [x19, #264]
    f468:	cmp	x20, x22
    f46c:	add	x0, x0, #0x1
    f470:	str	x0, [x19, #320]
    f474:	b.eq	f5fc <d_print_mod+0xbdc>  // b.none
    f478:	ldrb	w21, [x20]
    f47c:	mov	x0, #0x1                   	// #1
    f480:	add	x1, x0, #0x1
    f484:	str	x1, [x19, #256]
    f488:	strb	w21, [x19, x0]
    f48c:	add	x20, x20, #0x1
    f490:	strb	w21, [x19, #264]
    f494:	cmp	x20, x22
    f498:	b.eq	f5fc <d_print_mod+0xbdc>  // b.none
    f49c:	ldrb	w21, [x20]
    f4a0:	cmp	x1, #0xff
    f4a4:	b.eq	f444 <d_print_mod+0xa24>  // b.none
    f4a8:	mov	x0, x1
    f4ac:	b	f480 <d_print_mod+0xa60>
    f4b0:	ldr	x0, [x19, #256]
    f4b4:	cmp	x0, #0xff
    f4b8:	b.eq	fb84 <d_print_mod+0x1164>  // b.none
    f4bc:	add	x1, x0, #0x1
    f4c0:	str	x1, [x19, #256]
    f4c4:	mov	w2, #0x20                  	// #32
    f4c8:	strb	w2, [x19, x0]
    f4cc:	strb	w2, [x19, #264]
    f4d0:	cmp	x1, #0xff
    f4d4:	b.ne	102b4 <d_print_mod+0x1894>  // b.any
    f4d8:	ldp	x3, x2, [x19, #272]
    f4dc:	strb	wzr, [x19, #255]
    f4e0:	mov	x0, x19
    f4e4:	blr	x3
    f4e8:	ldr	x0, [x19, #320]
    f4ec:	mov	w2, #0x6f6e                	// #28526
    f4f0:	mov	w1, #0x65                  	// #101
    f4f4:	mov	x3, #0x3                   	// #3
    f4f8:	add	x0, x0, #0x1
    f4fc:	strh	w2, [x19]
    f500:	strb	w1, [x19, #2]
    f504:	str	x0, [x19, #320]
    f508:	add	x1, x3, #0x1
    f50c:	str	x1, [x19, #256]
    f510:	mov	w0, #0x78                  	// #120
    f514:	strb	w0, [x19, x3]
    f518:	strb	w0, [x19, #264]
    f51c:	cmp	x1, #0xff
    f520:	b.ne	10304 <d_print_mod+0x18e4>  // b.any
    f524:	ldp	x3, x2, [x19, #272]
    f528:	strb	wzr, [x19, #255]
    f52c:	mov	x0, x19
    f530:	blr	x3
    f534:	ldr	x0, [x19, #320]
    f538:	mov	w2, #0x6563                	// #25955
    f53c:	mov	x1, #0x2                   	// #2
    f540:	strh	w2, [x19]
    f544:	add	x0, x0, #0x1
    f548:	str	x0, [x19, #320]
    f54c:	add	x3, x1, #0x1
    f550:	mov	w0, #0x70                  	// #112
    f554:	strb	w0, [x19, x1]
    f558:	add	x0, x3, #0x1
    f55c:	str	x0, [x19, #256]
    f560:	mov	w1, #0x74                  	// #116
    f564:	strb	w1, [x19, x3]
    f568:	strb	w1, [x19, #264]
    f56c:	ldr	x22, [x20, #16]
    f570:	cbz	x22, ea6c <d_print_mod+0x4c>
    f574:	cmp	x0, #0xff
    f578:	b.ne	f1a8 <d_print_mod+0x788>  // b.any
    f57c:	ldp	x3, x2, [x19, #272]
    f580:	strb	wzr, [x19, #255]
    f584:	mov	x1, x0
    f588:	mov	x0, x19
    f58c:	blr	x3
    f590:	ldr	x0, [x19, #320]
    f594:	mov	x2, #0x1                   	// #1
    f598:	ldr	x22, [x20, #16]
    f59c:	mov	w1, #0x28                  	// #40
    f5a0:	add	x0, x0, x2
    f5a4:	strb	w1, [x19]
    f5a8:	str	x2, [x19, #256]
    f5ac:	strb	w1, [x19, #264]
    f5b0:	str	x0, [x19, #320]
    f5b4:	cbnz	x22, 1055c <d_print_mod+0x1b3c>
    f5b8:	mov	x1, x2
    f5bc:	str	w2, [x19, #304]
    f5c0:	add	x0, x1, #0x1
    f5c4:	b	f254 <d_print_mod+0x834>
    f5c8:	ldp	x3, x2, [x19, #272]
    f5cc:	strb	wzr, [x19, #255]
    f5d0:	mov	x1, x0
    f5d4:	mov	x0, x19
    f5d8:	blr	x3
    f5dc:	ldr	x1, [x19, #320]
    f5e0:	mov	w2, #0x2620                	// #9760
    f5e4:	mov	x0, #0x2                   	// #2
    f5e8:	strh	w2, [x19]
    f5ec:	add	x1, x1, #0x1
    f5f0:	str	x1, [x19, #320]
    f5f4:	add	x1, x0, #0x1
    f5f8:	b	ef20 <d_print_mod+0x500>
    f5fc:	ldr	x23, [sp, #48]
    f600:	b	ea6c <d_print_mod+0x4c>
    f604:	ldp	x3, x2, [x19, #272]
    f608:	strb	wzr, [x19, #255]
    f60c:	mov	x0, x19
    f610:	blr	x3
    f614:	ldr	x2, [x19, #320]
    f618:	mov	x0, #0x1                   	// #1
    f61c:	mov	x1, #0x0                   	// #0
    f620:	add	x2, x2, x0
    f624:	str	x2, [x19, #320]
    f628:	b	eeb0 <d_print_mod+0x490>
    f62c:	ldr	x3, [x19, #328]
    f630:	add	w0, w0, #0x1
    f634:	str	w0, [x20, #4]
    f638:	add	w1, w1, #0x1
    f63c:	add	x0, sp, #0x40
    f640:	str	w1, [x19, #308]
    f644:	str	x0, [x19, #328]
    f648:	mov	w1, w21
    f64c:	mov	x0, x19
    f650:	mov	x2, x20
    f654:	stp	x20, x3, [sp, #64]
    f658:	bl	4e08 <d_print_comp_inner>
    f65c:	ldr	w1, [x20, #4]
    f660:	ldr	x0, [sp, #72]
    f664:	str	x0, [x19, #328]
    f668:	ldr	w0, [x19, #308]
    f66c:	sub	w1, w1, #0x1
    f670:	str	w1, [x20, #4]
    f674:	sub	w0, w0, #0x1
    f678:	str	w0, [x19, #308]
    f67c:	b	ea6c <d_print_mod+0x4c>
    f680:	ldp	x3, x2, [x19, #272]
    f684:	strb	wzr, [x19, #255]
    f688:	mov	x1, x0
    f68c:	mov	x0, x19
    f690:	blr	x3
    f694:	ldr	x1, [x19, #320]
    f698:	mov	w3, #0x7420                	// #29728
    f69c:	mov	w2, #0x68                  	// #104
    f6a0:	mov	x0, #0x3                   	// #3
    f6a4:	add	x1, x1, #0x1
    f6a8:	strh	w3, [x19]
    f6ac:	strb	w2, [x19, #2]
    f6b0:	str	x1, [x19, #320]
    f6b4:	add	x1, x0, #0x1
    f6b8:	str	x1, [x19, #256]
    f6bc:	mov	w2, #0x72                  	// #114
    f6c0:	strb	w2, [x19, x0]
    f6c4:	strb	w2, [x19, #264]
    f6c8:	cmp	x1, #0xff
    f6cc:	b.ne	f14c <d_print_mod+0x72c>  // b.any
    f6d0:	ldp	x3, x2, [x19, #272]
    f6d4:	strb	wzr, [x19, #255]
    f6d8:	mov	x0, x19
    f6dc:	blr	x3
    f6e0:	mov	w1, #0x776f                	// #30575
    f6e4:	mov	w0, #0x77                  	// #119
    f6e8:	strh	w1, [x19]
    f6ec:	strb	w0, [x19, #264]
    f6f0:	mov	x0, #0x2                   	// #2
    f6f4:	ldr	x1, [x19, #320]
    f6f8:	ldr	x22, [x20, #16]
    f6fc:	add	x1, x1, #0x1
    f700:	str	x0, [x19, #256]
    f704:	str	x1, [x19, #320]
    f708:	cbnz	x22, f1a8 <d_print_mod+0x788>
    f70c:	b	ea6c <d_print_mod+0x4c>
    f710:	ldp	x3, x2, [x19, #272]
    f714:	strb	wzr, [x19, #255]
    f718:	mov	x1, x0
    f71c:	mov	x0, x19
    f720:	blr	x3
    f724:	ldr	x0, [x19, #320]
    f728:	mov	w2, #0x20                  	// #32
    f72c:	mov	x1, #0x1                   	// #1
    f730:	strb	w2, [x19]
    f734:	add	x0, x0, x1
    f738:	str	x0, [x19, #320]
    f73c:	b	eeac <d_print_mod+0x48c>
    f740:	ldp	x3, x2, [x19, #272]
    f744:	strb	wzr, [x19, #255]
    f748:	mov	x1, x0
    f74c:	mov	x0, x19
    f750:	blr	x3
    f754:	ldr	x1, [x19, #320]
    f758:	mov	w3, #0x7220                	// #29216
    f75c:	mov	w2, #0x65                  	// #101
    f760:	mov	x0, #0x3                   	// #3
    f764:	add	x1, x1, #0x1
    f768:	strh	w3, [x19]
    f76c:	strb	w2, [x19, #2]
    f770:	str	x1, [x19, #320]
    f774:	add	x3, x0, #0x1
    f778:	str	x3, [x19, #256]
    f77c:	mov	w1, #0x73                  	// #115
    f780:	strb	w1, [x19, x0]
    f784:	strb	w1, [x19, #264]
    f788:	cmp	x3, #0xff
    f78c:	b.ne	eba8 <d_print_mod+0x188>  // b.any
    f790:	ldp	x4, x2, [x19, #272]
    f794:	strb	wzr, [x19, #255]
    f798:	mov	x1, x3
    f79c:	mov	x0, x19
    f7a0:	blr	x4
    f7a4:	ldr	x0, [x19, #320]
    f7a8:	mov	w3, #0x7274                	// #29300
    f7ac:	mov	w2, #0x69                  	// #105
    f7b0:	mov	x1, #0x3                   	// #3
    f7b4:	add	x0, x0, #0x1
    f7b8:	strh	w3, [x19]
    f7bc:	strb	w2, [x19, #2]
    f7c0:	str	x0, [x19, #320]
    f7c4:	add	x0, x1, #0x1
    f7c8:	str	x0, [x19, #256]
    f7cc:	mov	w2, #0x63                  	// #99
    f7d0:	strb	w2, [x19, x1]
    f7d4:	strb	w2, [x19, #264]
    f7d8:	cmp	x0, #0xff
    f7dc:	b.eq	eb08 <d_print_mod+0xe8>  // b.none
    f7e0:	add	x1, x0, #0x1
    f7e4:	b	eb30 <d_print_mod+0x110>
    f7e8:	ldp	x3, x2, [x19, #272]
    f7ec:	strb	wzr, [x19, #255]
    f7f0:	mov	x1, x0
    f7f4:	mov	x0, x19
    f7f8:	blr	x3
    f7fc:	ldr	x1, [x19, #320]
    f800:	mov	w3, #0x7620                	// #30240
    f804:	mov	w2, #0x6f                  	// #111
    f808:	mov	x0, #0x3                   	// #3
    f80c:	add	x1, x1, #0x1
    f810:	strh	w3, [x19]
    f814:	strb	w2, [x19, #2]
    f818:	str	x1, [x19, #320]
    f81c:	add	x3, x0, #0x1
    f820:	str	x3, [x19, #256]
    f824:	mov	w1, #0x6c                  	// #108
    f828:	strb	w1, [x19, x0]
    f82c:	strb	w1, [x19, #264]
    f830:	cmp	x3, #0xff
    f834:	b.ne	ec58 <d_print_mod+0x238>  // b.any
    f838:	ldp	x4, x2, [x19, #272]
    f83c:	strb	wzr, [x19, #255]
    f840:	mov	x1, x3
    f844:	mov	x0, x19
    f848:	blr	x4
    f84c:	ldr	x0, [x19, #320]
    f850:	mov	w3, #0x7461                	// #29793
    f854:	mov	w2, #0x69                  	// #105
    f858:	mov	x1, #0x3                   	// #3
    f85c:	add	x0, x0, #0x1
    f860:	strh	w3, [x19]
    f864:	strb	w2, [x19, #2]
    f868:	str	x0, [x19, #320]
    f86c:	add	x0, x1, #0x1
    f870:	str	x0, [x19, #256]
    f874:	mov	w2, #0x6c                  	// #108
    f878:	strb	w2, [x19, x1]
    f87c:	strb	w2, [x19, #264]
    f880:	cmp	x0, #0xff
    f884:	b.ne	eca8 <d_print_mod+0x288>  // b.any
    f888:	ldp	x3, x2, [x19, #272]
    f88c:	strb	wzr, [x19, #255]
    f890:	mov	x1, x0
    f894:	mov	x0, x19
    f898:	blr	x3
    f89c:	ldr	x2, [x19, #320]
    f8a0:	mov	x1, #0x1                   	// #1
    f8a4:	mov	x0, #0x0                   	// #0
    f8a8:	add	x2, x2, x1
    f8ac:	str	x2, [x19, #320]
    f8b0:	str	x1, [x19, #256]
    f8b4:	mov	w1, #0x65                  	// #101
    f8b8:	strb	w1, [x19, x0]
    f8bc:	strb	w1, [x19, #264]
    f8c0:	b	ea6c <d_print_mod+0x4c>
    f8c4:	ldp	x3, x2, [x19, #272]
    f8c8:	strb	wzr, [x19, #255]
    f8cc:	mov	x0, x19
    f8d0:	blr	x3
    f8d4:	ldr	x2, [x19, #320]
    f8d8:	mov	x0, #0x1                   	// #1
    f8dc:	mov	x1, #0x0                   	// #0
    f8e0:	add	x2, x2, x0
    f8e4:	str	x2, [x19, #320]
    f8e8:	b	ece4 <d_print_mod+0x2c4>
    f8ec:	ldp	x3, x2, [x19, #272]
    f8f0:	strb	wzr, [x19, #255]
    f8f4:	mov	x1, x0
    f8f8:	mov	x0, x19
    f8fc:	blr	x3
    f900:	ldr	x1, [x19, #320]
    f904:	mov	w3, #0x6f63                	// #28515
    f908:	mov	w2, #0x6d                  	// #109
    f90c:	mov	x0, #0x3                   	// #3
    f910:	add	x1, x1, #0x1
    f914:	strh	w3, [x19]
    f918:	strb	w2, [x19, #2]
    f91c:	str	x1, [x19, #320]
    f920:	add	x1, x0, #0x1
    f924:	str	x1, [x19, #256]
    f928:	mov	w2, #0x70                  	// #112
    f92c:	strb	w2, [x19, x0]
    f930:	strb	w2, [x19, #264]
    f934:	cmp	x1, #0xff
    f938:	b.ne	f2c0 <d_print_mod+0x8a0>  // b.any
    f93c:	ldp	x3, x2, [x19, #272]
    f940:	strb	wzr, [x19, #255]
    f944:	mov	x0, x19
    f948:	blr	x3
    f94c:	ldr	x0, [x19, #320]
    f950:	mov	w2, #0x656c                	// #25964
    f954:	mov	x1, #0x2                   	// #2
    f958:	strh	w2, [x19]
    f95c:	add	x0, x0, #0x1
    f960:	str	x0, [x19, #320]
    f964:	b	f308 <d_print_mod+0x8e8>
    f968:	ldp	x3, x2, [x19, #272]
    f96c:	strb	wzr, [x19, #255]
    f970:	mov	x1, x0
    f974:	mov	x0, x19
    f978:	blr	x3
    f97c:	ldr	x1, [x19, #320]
    f980:	mov	w3, #0x6d69                	// #28009
    f984:	mov	w2, #0x61                  	// #97
    f988:	mov	x0, #0x3                   	// #3
    f98c:	add	x1, x1, #0x1
    f990:	strh	w3, [x19]
    f994:	strb	w2, [x19, #2]
    f998:	str	x1, [x19, #320]
    f99c:	add	x1, x0, #0x1
    f9a0:	str	x1, [x19, #256]
    f9a4:	mov	w2, #0x67                  	// #103
    f9a8:	strb	w2, [x19, x0]
    f9ac:	strb	w2, [x19, #264]
    f9b0:	cmp	x1, #0xff
    f9b4:	b.ne	f374 <d_print_mod+0x954>  // b.any
    f9b8:	ldp	x3, x2, [x19, #272]
    f9bc:	strb	wzr, [x19, #255]
    f9c0:	mov	x0, x19
    f9c4:	blr	x3
    f9c8:	ldr	x1, [x19, #320]
    f9cc:	mov	w3, #0x6e69                	// #28265
    f9d0:	mov	w2, #0x61                  	// #97
    f9d4:	mov	x0, #0x3                   	// #3
    f9d8:	add	x1, x1, #0x1
    f9dc:	strh	w3, [x19]
    f9e0:	strb	w2, [x19, #2]
    f9e4:	str	x1, [x19, #320]
    f9e8:	add	x1, x0, #0x1
    f9ec:	str	x1, [x19, #256]
    f9f0:	mov	w2, #0x72                  	// #114
    f9f4:	strb	w2, [x19, x0]
    f9f8:	strb	w2, [x19, #264]
    f9fc:	cmp	x1, #0xff
    fa00:	b.ne	f3c4 <d_print_mod+0x9a4>  // b.any
    fa04:	ldp	x3, x2, [x19, #272]
    fa08:	strb	wzr, [x19, #255]
    fa0c:	mov	x0, x19
    fa10:	blr	x3
    fa14:	mov	w2, #0x79                  	// #121
    fa18:	ldr	x1, [x19, #320]
    fa1c:	mov	x0, #0x1                   	// #1
    fa20:	strb	w2, [x19]
    fa24:	add	x1, x1, x0
    fa28:	str	x1, [x19, #320]
    fa2c:	add	x1, x0, #0x1
    fa30:	b	f408 <d_print_mod+0x9e8>
    fa34:	ldp	x3, x2, [x19, #272]
    fa38:	strb	wzr, [x19, #255]
    fa3c:	mov	x1, x0
    fa40:	mov	x0, x19
    fa44:	blr	x3
    fa48:	ldr	x1, [x19, #320]
    fa4c:	mov	w3, #0x5f20                	// #24352
    fa50:	mov	w2, #0x5f                  	// #95
    fa54:	mov	x0, #0x3                   	// #3
    fa58:	add	x1, x1, #0x1
    fa5c:	strh	w3, [x19]
    fa60:	strb	w2, [x19, #2]
    fa64:	str	x1, [x19, #320]
    fa68:	add	x1, x0, #0x1
    fa6c:	str	x1, [x19, #256]
    fa70:	mov	w2, #0x76                  	// #118
    fa74:	strb	w2, [x19, x0]
    fa78:	strb	w2, [x19, #264]
    fa7c:	cmp	x1, #0xff
    fa80:	b.ne	ef98 <d_print_mod+0x578>  // b.any
    fa84:	ldp	x3, x2, [x19, #272]
    fa88:	strb	wzr, [x19, #255]
    fa8c:	mov	x0, x19
    fa90:	blr	x3
    fa94:	ldr	x1, [x19, #320]
    fa98:	mov	w3, #0x6365                	// #25445
    fa9c:	mov	w2, #0x74                  	// #116
    faa0:	mov	x0, #0x3                   	// #3
    faa4:	add	x1, x1, #0x1
    faa8:	strh	w3, [x19]
    faac:	strb	w2, [x19, #2]
    fab0:	str	x1, [x19, #320]
    fab4:	add	x3, x0, #0x1
    fab8:	str	x3, [x19, #256]
    fabc:	mov	w1, #0x6f                  	// #111
    fac0:	strb	w1, [x19, x0]
    fac4:	strb	w1, [x19, #264]
    fac8:	cmp	x3, #0xff
    facc:	b.ne	efe8 <d_print_mod+0x5c8>  // b.any
    fad0:	ldp	x4, x2, [x19, #272]
    fad4:	strb	wzr, [x19, #255]
    fad8:	mov	x1, x3
    fadc:	mov	x0, x19
    fae0:	blr	x4
    fae4:	ldr	x0, [x19, #320]
    fae8:	mov	w2, #0x72                  	// #114
    faec:	mov	x1, #0x1                   	// #1
    faf0:	strb	w2, [x19]
    faf4:	add	x0, x0, x1
    faf8:	str	x0, [x19, #320]
    fafc:	add	x0, x1, #0x1
    fb00:	b	f028 <d_print_mod+0x608>
    fb04:	ldp	x3, x2, [x19, #272]
    fb08:	strb	wzr, [x19, #255]
    fb0c:	mov	x1, x0
    fb10:	mov	x0, x19
    fb14:	blr	x3
    fb18:	ldr	x1, [x19, #320]
    fb1c:	mov	w3, #0x6320                	// #25376
    fb20:	mov	w2, #0x6f                  	// #111
    fb24:	mov	x0, #0x3                   	// #3
    fb28:	add	x1, x1, #0x1
    fb2c:	strh	w3, [x19]
    fb30:	strb	w2, [x19, #2]
    fb34:	str	x1, [x19, #320]
    fb38:	add	x1, x0, #0x1
    fb3c:	str	x1, [x19, #256]
    fb40:	mov	w2, #0x6e                  	// #110
    fb44:	strb	w2, [x19, x0]
    fb48:	strb	w2, [x19, #264]
    fb4c:	cmp	x1, #0xff
    fb50:	b.ne	eaec <d_print_mod+0xcc>  // b.any
    fb54:	ldp	x3, x2, [x19, #272]
    fb58:	strb	wzr, [x19, #255]
    fb5c:	mov	x0, x19
    fb60:	blr	x3
    fb64:	mov	w2, #0x73                  	// #115
    fb68:	ldr	x1, [x19, #320]
    fb6c:	mov	x0, #0x1                   	// #1
    fb70:	strb	w2, [x19]
    fb74:	add	x1, x1, x0
    fb78:	str	x1, [x19, #320]
    fb7c:	add	x1, x0, #0x1
    fb80:	b	eb30 <d_print_mod+0x110>
    fb84:	ldp	x3, x2, [x19, #272]
    fb88:	strb	wzr, [x19, #255]
    fb8c:	mov	x1, x0
    fb90:	mov	x0, x19
    fb94:	blr	x3
    fb98:	ldr	x1, [x19, #320]
    fb9c:	mov	w3, #0x6e20                	// #28192
    fba0:	mov	w2, #0x6f                  	// #111
    fba4:	mov	x0, #0x3                   	// #3
    fba8:	add	x1, x1, #0x1
    fbac:	strh	w3, [x19]
    fbb0:	strb	w2, [x19, #2]
    fbb4:	str	x1, [x19, #320]
    fbb8:	add	x3, x0, #0x1
    fbbc:	str	x3, [x19, #256]
    fbc0:	mov	w22, #0x65                  	// #101
    fbc4:	strb	w22, [x19, x0]
    fbc8:	strb	w22, [x19, #264]
    fbcc:	cmp	x3, #0xff
    fbd0:	b.ne	f508 <d_print_mod+0xae8>  // b.any
    fbd4:	ldp	x4, x2, [x19, #272]
    fbd8:	strb	wzr, [x19, #255]
    fbdc:	mov	x1, x3
    fbe0:	mov	x0, x19
    fbe4:	blr	x4
    fbe8:	strb	w22, [x19, #2]
    fbec:	ldr	x0, [x19, #320]
    fbf0:	mov	w2, #0x6378                	// #25464
    fbf4:	mov	x1, #0x3                   	// #3
    fbf8:	strh	w2, [x19]
    fbfc:	add	x0, x0, #0x1
    fc00:	str	x0, [x19, #320]
    fc04:	add	x3, x1, #0x1
    fc08:	str	x3, [x19, #256]
    fc0c:	mov	w0, #0x70                  	// #112
    fc10:	strb	w0, [x19, x1]
    fc14:	strb	w0, [x19, #264]
    fc18:	cmp	x3, #0xff
    fc1c:	b.ne	f558 <d_print_mod+0xb38>  // b.any
    fc20:	ldp	x4, x2, [x19, #272]
    fc24:	strb	wzr, [x19, #255]
    fc28:	mov	x0, x19
    fc2c:	mov	x1, x3
    fc30:	blr	x4
    fc34:	mov	w0, #0x74                  	// #116
    fc38:	b	f180 <d_print_mod+0x760>
    fc3c:	mov	w0, #0x1                   	// #1
    fc40:	str	w0, [x19, #304]
    fc44:	b	ee18 <d_print_mod+0x3f8>
    fc48:	mov	w1, #0x1                   	// #1
    fc4c:	str	w1, [x19, #304]
    fc50:	b	f0ac <d_print_mod+0x68c>
    fc54:	mov	w0, #0x1                   	// #1
    fc58:	str	w0, [x19, #304]
    fc5c:	b	f228 <d_print_mod+0x808>
    fc60:	ldp	x3, x2, [x19, #272]
    fc64:	strb	wzr, [x19, #255]
    fc68:	mov	x0, x19
    fc6c:	blr	x3
    fc70:	ldr	x1, [x19, #320]
    fc74:	mov	x0, #0x1                   	// #1
    fc78:	mov	w2, #0x26                  	// #38
    fc7c:	strb	w2, [x19]
    fc80:	add	x1, x1, x0
    fc84:	str	x1, [x19, #320]
    fc88:	add	x1, x0, #0x1
    fc8c:	b	ef20 <d_print_mod+0x500>
    fc90:	add	x3, x0, #0x2
    fc94:	str	x3, [x19, #256]
    fc98:	mov	w2, #0x6d                  	// #109
    fc9c:	strb	w2, [x19, x1]
    fca0:	strb	w2, [x19, #264]
    fca4:	cmp	x3, #0xff
    fca8:	b.ne	fd34 <d_print_mod+0x1314>  // b.any
    fcac:	ldp	x4, x2, [x19, #272]
    fcb0:	strb	wzr, [x19, #255]
    fcb4:	mov	x1, x3
    fcb8:	mov	x0, x19
    fcbc:	blr	x4
    fcc0:	strb	w20, [x19, #2]
    fcc4:	ldr	x1, [x19, #320]
    fcc8:	mov	w2, #0x6761                	// #26465
    fccc:	mov	x0, #0x3                   	// #3
    fcd0:	strh	w2, [x19]
    fcd4:	add	x1, x1, #0x1
    fcd8:	str	x1, [x19, #320]
    fcdc:	add	x1, x0, #0x1
    fce0:	str	x1, [x19, #256]
    fce4:	mov	w2, #0x6e                  	// #110
    fce8:	strb	w2, [x19, x0]
    fcec:	strb	w2, [x19, #264]
    fcf0:	cmp	x1, #0xff
    fcf4:	b.ne	fd84 <d_print_mod+0x1364>  // b.any
    fcf8:	ldp	x3, x2, [x19, #272]
    fcfc:	strb	wzr, [x19, #255]
    fd00:	mov	x0, x19
    fd04:	blr	x3
    fd08:	ldr	x0, [x19, #320]
    fd0c:	mov	w2, #0x7261                	// #29281
    fd10:	mov	x1, #0x2                   	// #2
    fd14:	strh	w2, [x19]
    fd18:	add	x0, x0, #0x1
    fd1c:	str	x0, [x19, #320]
    fd20:	add	x0, x1, #0x1
    fd24:	mov	w2, #0x79                  	// #121
    fd28:	strb	w2, [x19, x1]
    fd2c:	add	x1, x0, #0x1
    fd30:	b	f408 <d_print_mod+0x9e8>
    fd34:	add	x0, x0, #0x3
    fd38:	str	x0, [x19, #256]
    fd3c:	mov	w1, #0x61                  	// #97
    fd40:	strb	w1, [x19, x3]
    fd44:	strb	w1, [x19, #264]
    fd48:	cmp	x0, #0xff
    fd4c:	b.ne	f99c <d_print_mod+0xf7c>  // b.any
    fd50:	ldp	x3, x2, [x19, #272]
    fd54:	strb	wzr, [x19, #255]
    fd58:	mov	x1, x0
    fd5c:	mov	x0, x19
    fd60:	blr	x3
    fd64:	ldr	x0, [x19, #320]
    fd68:	mov	w3, #0x6967                	// #26983
    fd6c:	mov	w2, #0x6e                  	// #110
    fd70:	mov	x1, #0x3                   	// #3
    fd74:	add	x0, x0, #0x1
    fd78:	strh	w3, [x19]
    fd7c:	strb	w2, [x19, #2]
    fd80:	str	x0, [x19, #320]
    fd84:	add	x0, x1, #0x1
    fd88:	str	x0, [x19, #256]
    fd8c:	mov	w2, #0x61                  	// #97
    fd90:	strb	w2, [x19, x1]
    fd94:	strb	w2, [x19, #264]
    fd98:	cmp	x0, #0xff
    fd9c:	b.ne	f9e8 <d_print_mod+0xfc8>  // b.any
    fda0:	ldp	x3, x2, [x19, #272]
    fda4:	strb	wzr, [x19, #255]
    fda8:	mov	x1, x0
    fdac:	mov	x0, x19
    fdb0:	blr	x3
    fdb4:	ldr	x0, [x19, #320]
    fdb8:	mov	w2, #0x72                  	// #114
    fdbc:	mov	x1, #0x1                   	// #1
    fdc0:	strb	w2, [x19]
    fdc4:	add	x0, x0, x1
    fdc8:	str	x0, [x19, #320]
    fdcc:	b	fd20 <d_print_mod+0x1300>
    fdd0:	add	x3, x0, #0x2
    fdd4:	str	x3, [x19, #256]
    fdd8:	mov	w2, #0x5f                  	// #95
    fddc:	strb	w2, [x19, x1]
    fde0:	strb	w2, [x19, #264]
    fde4:	cmp	x3, #0xff
    fde8:	b.ne	fed4 <d_print_mod+0x14b4>  // b.any
    fdec:	ldp	x4, x2, [x19, #272]
    fdf0:	strb	wzr, [x19, #255]
    fdf4:	mov	x1, x3
    fdf8:	mov	x0, x19
    fdfc:	blr	x4
    fe00:	ldr	x1, [x19, #320]
    fe04:	mov	w3, #0x765f                	// #30303
    fe08:	mov	w2, #0x65                  	// #101
    fe0c:	mov	x0, #0x3                   	// #3
    fe10:	add	x1, x1, #0x1
    fe14:	strh	w3, [x19]
    fe18:	strb	w2, [x19, #2]
    fe1c:	str	x1, [x19, #320]
    fe20:	add	x1, x0, #0x1
    fe24:	str	x1, [x19, #256]
    fe28:	mov	w2, #0x63                  	// #99
    fe2c:	strb	w2, [x19, x0]
    fe30:	strb	w2, [x19, #264]
    fe34:	cmp	x1, #0xff
    fe38:	b.ne	ff20 <d_print_mod+0x1500>  // b.any
    fe3c:	ldp	x3, x2, [x19, #272]
    fe40:	strb	wzr, [x19, #255]
    fe44:	mov	x0, x19
    fe48:	blr	x3
    fe4c:	ldr	x0, [x19, #320]
    fe50:	mov	w1, #0x6f74                	// #28532
    fe54:	mov	x2, #0x2                   	// #2
    fe58:	strh	w1, [x19]
    fe5c:	add	x0, x0, #0x1
    fe60:	str	x0, [x19, #320]
    fe64:	mov	w0, #0x72                  	// #114
    fe68:	add	x1, x2, #0x1
    fe6c:	strb	w0, [x19, x2]
    fe70:	add	x0, x1, #0x1
    fe74:	b	f028 <d_print_mod+0x608>
    fe78:	add	x3, x0, #0x2
    fe7c:	str	x3, [x19, #256]
    fe80:	mov	w2, #0x63                  	// #99
    fe84:	strb	w2, [x19, x1]
    fe88:	strb	w2, [x19, #264]
    fe8c:	cmp	x3, #0xff
    fe90:	b.ne	ff6c <d_print_mod+0x154c>  // b.any
    fe94:	ldp	x4, x2, [x19, #272]
    fe98:	strb	wzr, [x19, #255]
    fe9c:	mov	x1, x3
    fea0:	mov	x0, x19
    fea4:	blr	x4
    fea8:	ldr	x0, [x19, #320]
    feac:	mov	w2, #0x6e6f                	// #28271
    feb0:	mov	x1, #0x2                   	// #2
    feb4:	strh	w2, [x19]
    feb8:	add	x0, x0, #0x1
    febc:	str	x0, [x19, #320]
    fec0:	add	x0, x1, #0x1
    fec4:	mov	w2, #0x73                  	// #115
    fec8:	strb	w2, [x19, x1]
    fecc:	add	x1, x0, #0x1
    fed0:	b	eb30 <d_print_mod+0x110>
    fed4:	add	x0, x0, #0x3
    fed8:	str	x0, [x19, #256]
    fedc:	strb	w2, [x19, x3]
    fee0:	cmp	x0, #0xff
    fee4:	strb	w2, [x19, #264]
    fee8:	b.ne	fa68 <d_print_mod+0x1048>  // b.any
    feec:	ldp	x3, x2, [x19, #272]
    fef0:	strb	wzr, [x19, #255]
    fef4:	mov	x1, x0
    fef8:	mov	x0, x19
    fefc:	blr	x3
    ff00:	ldr	x0, [x19, #320]
    ff04:	mov	w3, #0x6576                	// #25974
    ff08:	mov	w2, #0x63                  	// #99
    ff0c:	mov	x1, #0x3                   	// #3
    ff10:	add	x0, x0, #0x1
    ff14:	strh	w3, [x19]
    ff18:	strb	w2, [x19, #2]
    ff1c:	str	x0, [x19, #320]
    ff20:	add	x0, x1, #0x1
    ff24:	str	x0, [x19, #256]
    ff28:	mov	w2, #0x74                  	// #116
    ff2c:	strb	w2, [x19, x1]
    ff30:	strb	w2, [x19, #264]
    ff34:	cmp	x0, #0xff
    ff38:	b.ne	fab4 <d_print_mod+0x1094>  // b.any
    ff3c:	ldp	x3, x2, [x19, #272]
    ff40:	strb	wzr, [x19, #255]
    ff44:	mov	x1, x0
    ff48:	mov	x0, x19
    ff4c:	blr	x3
    ff50:	ldr	x0, [x19, #320]
    ff54:	mov	w1, #0x6f                  	// #111
    ff58:	mov	x2, #0x1                   	// #1
    ff5c:	strb	w1, [x19]
    ff60:	add	x0, x0, x2
    ff64:	str	x0, [x19, #320]
    ff68:	b	fe64 <d_print_mod+0x1444>
    ff6c:	add	x0, x0, #0x3
    ff70:	str	x0, [x19, #256]
    ff74:	mov	w1, #0x6f                  	// #111
    ff78:	strb	w1, [x19, x3]
    ff7c:	strb	w1, [x19, #264]
    ff80:	cmp	x0, #0xff
    ff84:	b.ne	fb38 <d_print_mod+0x1118>  // b.any
    ff88:	ldp	x3, x2, [x19, #272]
    ff8c:	strb	wzr, [x19, #255]
    ff90:	mov	x1, x0
    ff94:	mov	x0, x19
    ff98:	blr	x3
    ff9c:	ldr	x0, [x19, #320]
    ffa0:	mov	w2, #0x6e                  	// #110
    ffa4:	mov	x1, #0x1                   	// #1
    ffa8:	strb	w2, [x19]
    ffac:	add	x0, x0, x1
    ffb0:	str	x0, [x19, #320]
    ffb4:	b	fec0 <d_print_mod+0x14a0>
    ffb8:	add	x3, x0, #0x2
    ffbc:	str	x3, [x19, #256]
    ffc0:	mov	w20, #0x72                  	// #114
    ffc4:	strb	w20, [x19, x1]
    ffc8:	strb	w20, [x19, #264]
    ffcc:	cmp	x3, #0xff
    ffd0:	b.ne	10054 <d_print_mod+0x1634>  // b.any
    ffd4:	ldp	x4, x2, [x19, #272]
    ffd8:	strb	wzr, [x19, #255]
    ffdc:	mov	x1, x3
    ffe0:	mov	x0, x19
    ffe4:	blr	x4
    ffe8:	ldr	x0, [x19, #320]
    ffec:	mov	w3, #0x7365                	// #29541
    fff0:	mov	w2, #0x74                  	// #116
    fff4:	mov	x1, #0x3                   	// #3
    fff8:	add	x0, x0, #0x1
    fffc:	strh	w3, [x19]
   10000:	strb	w2, [x19, #2]
   10004:	str	x0, [x19, #320]
   10008:	add	x0, x1, #0x1
   1000c:	str	x0, [x19, #256]
   10010:	mov	w2, #0x72                  	// #114
   10014:	strb	w2, [x19, x1]
   10018:	strb	w2, [x19, #264]
   1001c:	cmp	x0, #0xff
   10020:	b.ne	100a0 <d_print_mod+0x1680>  // b.any
   10024:	ldp	x3, x2, [x19, #272]
   10028:	strb	wzr, [x19, #255]
   1002c:	mov	x1, x0
   10030:	mov	x0, x19
   10034:	blr	x3
   10038:	ldr	x0, [x19, #320]
   1003c:	mov	w2, #0x69                  	// #105
   10040:	mov	x1, #0x1                   	// #1
   10044:	strb	w2, [x19]
   10048:	add	x0, x0, x1
   1004c:	str	x0, [x19, #320]
   10050:	b	ebec <d_print_mod+0x1cc>
   10054:	add	x0, x0, #0x3
   10058:	str	x0, [x19, #256]
   1005c:	mov	w1, #0x65                  	// #101
   10060:	strb	w1, [x19, x3]
   10064:	strb	w1, [x19, #264]
   10068:	cmp	x0, #0xff
   1006c:	b.ne	f774 <d_print_mod+0xd54>  // b.any
   10070:	ldp	x3, x2, [x19, #272]
   10074:	strb	wzr, [x19, #255]
   10078:	mov	x1, x0
   1007c:	mov	x0, x19
   10080:	blr	x3
   10084:	strb	w20, [x19, #2]
   10088:	ldr	x1, [x19, #320]
   1008c:	mov	w2, #0x7473                	// #29811
   10090:	mov	x0, #0x3                   	// #3
   10094:	strh	w2, [x19]
   10098:	add	x1, x1, #0x1
   1009c:	str	x1, [x19, #320]
   100a0:	add	x1, x0, #0x1
   100a4:	str	x1, [x19, #256]
   100a8:	mov	w2, #0x69                  	// #105
   100ac:	strb	w2, [x19, x0]
   100b0:	strb	w2, [x19, #264]
   100b4:	cmp	x1, #0xff
   100b8:	b.ne	f7c4 <d_print_mod+0xda4>  // b.any
   100bc:	ldp	x3, x2, [x19, #272]
   100c0:	strb	wzr, [x19, #255]
   100c4:	mov	x0, x19
   100c8:	blr	x3
   100cc:	mov	w2, #0x63                  	// #99
   100d0:	b	fb68 <d_print_mod+0x1148>
   100d4:	add	x3, x0, #0x2
   100d8:	str	x3, [x19, #256]
   100dc:	mov	w2, #0x6f                  	// #111
   100e0:	strb	w2, [x19, x1]
   100e4:	strb	w2, [x19, #264]
   100e8:	cmp	x3, #0xff
   100ec:	b.ne	10350 <d_print_mod+0x1930>  // b.any
   100f0:	ldp	x4, x2, [x19, #272]
   100f4:	strb	wzr, [x19, #255]
   100f8:	mov	x1, x3
   100fc:	mov	x0, x19
   10100:	blr	x4
   10104:	ldr	x1, [x19, #320]
   10108:	mov	w3, #0x706d                	// #28781
   1010c:	mov	w2, #0x6c                  	// #108
   10110:	mov	x0, #0x3                   	// #3
   10114:	add	x1, x1, #0x1
   10118:	strh	w3, [x19]
   1011c:	strb	w2, [x19, #2]
   10120:	str	x1, [x19, #320]
   10124:	add	x1, x0, #0x1
   10128:	str	x1, [x19, #256]
   1012c:	mov	w2, #0x65                  	// #101
   10130:	strb	w2, [x19, x0]
   10134:	strb	w2, [x19, #264]
   10138:	cmp	x1, #0xff
   1013c:	b.ne	103a0 <d_print_mod+0x1980>  // b.any
   10140:	ldp	x3, x2, [x19, #272]
   10144:	strb	wzr, [x19, #255]
   10148:	mov	x0, x19
   1014c:	blr	x3
   10150:	mov	w2, #0x78                  	// #120
   10154:	b	fa18 <d_print_mod+0xff8>
   10158:	add	x3, x0, #0x2
   1015c:	str	x3, [x19, #256]
   10160:	mov	w2, #0x74                  	// #116
   10164:	strb	w2, [x19, x1]
   10168:	strb	w2, [x19, #264]
   1016c:	cmp	x3, #0xff
   10170:	b.ne	101cc <d_print_mod+0x17ac>  // b.any
   10174:	ldp	x4, x2, [x19, #272]
   10178:	strb	wzr, [x19, #255]
   1017c:	mov	x1, x3
   10180:	mov	x0, x19
   10184:	blr	x4
   10188:	ldr	x0, [x19, #320]
   1018c:	mov	w2, #0x7268                	// #29288
   10190:	mov	x1, #0x2                   	// #2
   10194:	strh	w2, [x19]
   10198:	add	x0, x0, #0x1
   1019c:	str	x0, [x19, #320]
   101a0:	add	x3, x1, #0x1
   101a4:	mov	w0, #0x6f                  	// #111
   101a8:	strb	w0, [x19, x1]
   101ac:	add	x0, x3, #0x1
   101b0:	str	x0, [x19, #256]
   101b4:	mov	w1, #0x77                  	// #119
   101b8:	strb	w1, [x19, x3]
   101bc:	strb	w1, [x19, #264]
   101c0:	ldr	x22, [x20, #16]
   101c4:	cbnz	x22, f574 <d_print_mod+0xb54>
   101c8:	b	ea6c <d_print_mod+0x4c>
   101cc:	add	x0, x0, #0x3
   101d0:	str	x0, [x19, #256]
   101d4:	mov	w1, #0x68                  	// #104
   101d8:	strb	w1, [x19, x3]
   101dc:	strb	w1, [x19, #264]
   101e0:	cmp	x0, #0xff
   101e4:	b.ne	f6b4 <d_print_mod+0xc94>  // b.any
   101e8:	ldp	x3, x2, [x19, #272]
   101ec:	strb	wzr, [x19, #255]
   101f0:	mov	x1, x0
   101f4:	mov	x0, x19
   101f8:	blr	x3
   101fc:	ldr	x0, [x19, #320]
   10200:	mov	w2, #0x72                  	// #114
   10204:	mov	x1, #0x1                   	// #1
   10208:	strb	w2, [x19]
   1020c:	add	x0, x0, x1
   10210:	str	x0, [x19, #320]
   10214:	b	101a0 <d_print_mod+0x1780>
   10218:	add	x3, x0, #0x2
   1021c:	str	x3, [x19, #256]
   10220:	mov	w2, #0x76                  	// #118
   10224:	strb	w2, [x19, x1]
   10228:	strb	w2, [x19, #264]
   1022c:	cmp	x3, #0xff
   10230:	b.ne	1044c <d_print_mod+0x1a2c>  // b.any
   10234:	ldp	x4, x2, [x19, #272]
   10238:	strb	wzr, [x19, #255]
   1023c:	mov	x1, x3
   10240:	mov	x0, x19
   10244:	blr	x4
   10248:	ldr	x0, [x19, #320]
   1024c:	mov	w3, #0x6c6f                	// #27759
   10250:	mov	w2, #0x61                  	// #97
   10254:	mov	x1, #0x3                   	// #3
   10258:	add	x0, x0, #0x1
   1025c:	strh	w3, [x19]
   10260:	strb	w2, [x19, #2]
   10264:	str	x0, [x19, #320]
   10268:	add	x0, x1, #0x1
   1026c:	str	x0, [x19, #256]
   10270:	mov	w2, #0x74                  	// #116
   10274:	strb	w2, [x19, x1]
   10278:	strb	w2, [x19, #264]
   1027c:	cmp	x0, #0xff
   10280:	b.ne	1049c <d_print_mod+0x1a7c>  // b.any
   10284:	ldp	x3, x2, [x19, #272]
   10288:	strb	wzr, [x19, #255]
   1028c:	mov	x1, x0
   10290:	mov	x0, x19
   10294:	blr	x3
   10298:	ldr	x0, [x19, #320]
   1029c:	mov	w2, #0x69                  	// #105
   102a0:	mov	x1, #0x1                   	// #1
   102a4:	strb	w2, [x19]
   102a8:	add	x0, x0, x1
   102ac:	str	x0, [x19, #320]
   102b0:	b	ec9c <d_print_mod+0x27c>
   102b4:	add	x3, x0, #0x2
   102b8:	str	x3, [x19, #256]
   102bc:	mov	w2, #0x6e                  	// #110
   102c0:	strb	w2, [x19, x1]
   102c4:	strb	w2, [x19, #264]
   102c8:	cmp	x3, #0xff
   102cc:	b.ne	103c4 <d_print_mod+0x19a4>  // b.any
   102d0:	ldp	x4, x2, [x19, #272]
   102d4:	strb	wzr, [x19, #255]
   102d8:	mov	x1, x3
   102dc:	mov	x0, x19
   102e0:	blr	x4
   102e4:	ldr	x0, [x19, #320]
   102e8:	mov	w3, #0x656f                	// #25967
   102ec:	mov	w2, #0x78                  	// #120
   102f0:	mov	x1, #0x3                   	// #3
   102f4:	add	x0, x0, #0x1
   102f8:	strh	w3, [x19]
   102fc:	strb	w2, [x19, #2]
   10300:	str	x0, [x19, #320]
   10304:	add	x0, x1, #0x1
   10308:	str	x0, [x19, #256]
   1030c:	mov	w2, #0x63                  	// #99
   10310:	strb	w2, [x19, x1]
   10314:	strb	w2, [x19, #264]
   10318:	cmp	x0, #0xff
   1031c:	b.ne	10414 <d_print_mod+0x19f4>  // b.any
   10320:	ldp	x3, x2, [x19, #272]
   10324:	strb	wzr, [x19, #255]
   10328:	mov	x1, x0
   1032c:	mov	x0, x19
   10330:	blr	x3
   10334:	ldr	x0, [x19, #320]
   10338:	mov	w2, #0x65                  	// #101
   1033c:	mov	x1, #0x1                   	// #1
   10340:	strb	w2, [x19]
   10344:	add	x0, x0, x1
   10348:	str	x0, [x19, #320]
   1034c:	b	f54c <d_print_mod+0xb2c>
   10350:	add	x0, x0, #0x3
   10354:	str	x0, [x19, #256]
   10358:	mov	w1, #0x6d                  	// #109
   1035c:	strb	w1, [x19, x3]
   10360:	strb	w1, [x19, #264]
   10364:	cmp	x0, #0xff
   10368:	b.ne	f920 <d_print_mod+0xf00>  // b.any
   1036c:	ldp	x3, x2, [x19, #272]
   10370:	strb	wzr, [x19, #255]
   10374:	mov	x1, x0
   10378:	mov	x0, x19
   1037c:	blr	x3
   10380:	ldr	x0, [x19, #320]
   10384:	mov	w3, #0x6c70                	// #27760
   10388:	mov	w2, #0x65                  	// #101
   1038c:	mov	x1, #0x3                   	// #3
   10390:	add	x0, x0, #0x1
   10394:	strh	w3, [x19]
   10398:	strb	w2, [x19, #2]
   1039c:	str	x0, [x19, #320]
   103a0:	add	x0, x1, #0x1
   103a4:	str	x0, [x19, #256]
   103a8:	mov	w2, #0x78                  	// #120
   103ac:	strb	w2, [x19, x1]
   103b0:	strb	w2, [x19, #264]
   103b4:	cmp	x0, #0xff
   103b8:	b.eq	f3e0 <d_print_mod+0x9c0>  // b.none
   103bc:	add	x1, x0, #0x1
   103c0:	b	f408 <d_print_mod+0x9e8>
   103c4:	add	x0, x0, #0x3
   103c8:	str	x0, [x19, #256]
   103cc:	mov	w1, #0x6f                  	// #111
   103d0:	strb	w1, [x19, x3]
   103d4:	strb	w1, [x19, #264]
   103d8:	cmp	x0, #0xff
   103dc:	b.ne	fbb8 <d_print_mod+0x1198>  // b.any
   103e0:	ldp	x3, x2, [x19, #272]
   103e4:	strb	wzr, [x19, #255]
   103e8:	mov	x1, x0
   103ec:	mov	x0, x19
   103f0:	blr	x3
   103f4:	ldr	x1, [x19, #320]
   103f8:	mov	w3, #0x7865                	// #30821
   103fc:	mov	w2, #0x63                  	// #99
   10400:	mov	x0, #0x3                   	// #3
   10404:	add	x1, x1, #0x1
   10408:	strh	w3, [x19]
   1040c:	strb	w2, [x19, #2]
   10410:	str	x1, [x19, #320]
   10414:	add	x1, x0, #0x1
   10418:	str	x1, [x19, #256]
   1041c:	mov	w2, #0x65                  	// #101
   10420:	strb	w2, [x19, x0]
   10424:	strb	w2, [x19, #264]
   10428:	cmp	x1, #0xff
   1042c:	b.ne	fc04 <d_print_mod+0x11e4>  // b.any
   10430:	ldp	x3, x2, [x19, #272]
   10434:	strb	wzr, [x19, #255]
   10438:	mov	x0, x19
   1043c:	blr	x3
   10440:	mov	w1, #0x7470                	// #29808
   10444:	mov	w0, #0x74                  	// #116
   10448:	b	f6e8 <d_print_mod+0xcc8>
   1044c:	add	x0, x0, #0x3
   10450:	str	x0, [x19, #256]
   10454:	mov	w1, #0x6f                  	// #111
   10458:	strb	w1, [x19, x3]
   1045c:	strb	w1, [x19, #264]
   10460:	cmp	x0, #0xff
   10464:	b.ne	f81c <d_print_mod+0xdfc>  // b.any
   10468:	ldp	x3, x2, [x19, #272]
   1046c:	strb	wzr, [x19, #255]
   10470:	mov	x1, x0
   10474:	mov	x0, x19
   10478:	blr	x3
   1047c:	ldr	x1, [x19, #320]
   10480:	mov	w3, #0x616c                	// #24940
   10484:	mov	w2, #0x74                  	// #116
   10488:	mov	x0, #0x3                   	// #3
   1048c:	add	x1, x1, #0x1
   10490:	strh	w3, [x19]
   10494:	strb	w2, [x19, #2]
   10498:	str	x1, [x19, #320]
   1049c:	add	x1, x0, #0x1
   104a0:	str	x1, [x19, #256]
   104a4:	mov	w2, #0x69                  	// #105
   104a8:	strb	w2, [x19, x0]
   104ac:	strb	w2, [x19, #264]
   104b0:	cmp	x1, #0xff
   104b4:	b.ne	f86c <d_print_mod+0xe4c>  // b.any
   104b8:	ldp	x3, x2, [x19, #272]
   104bc:	strb	wzr, [x19, #255]
   104c0:	mov	x0, x19
   104c4:	blr	x3
   104c8:	ldr	x1, [x19, #320]
   104cc:	mov	x0, #0x1                   	// #1
   104d0:	mov	w2, #0x6c                  	// #108
   104d4:	strb	w2, [x19]
   104d8:	add	x1, x1, x0
   104dc:	str	x1, [x19, #320]
   104e0:	add	x1, x0, #0x1
   104e4:	b	f8b0 <d_print_mod+0xe90>
   104e8:	add	x0, x0, #0x2
   104ec:	str	x0, [x19, #256]
   104f0:	strb	w20, [x19, x1]
   104f4:	cmp	x0, #0xff
   104f8:	strb	w20, [x19, #264]
   104fc:	b.ne	ee64 <d_print_mod+0x444>  // b.any
   10500:	ldp	x3, x2, [x19, #272]
   10504:	strb	wzr, [x19, #255]
   10508:	mov	x1, x0
   1050c:	mov	x0, x19
   10510:	blr	x3
   10514:	ldr	x2, [x19, #320]
   10518:	mov	x1, #0x1                   	// #1
   1051c:	mov	x0, #0x0                   	// #0
   10520:	add	x2, x2, x1
   10524:	str	x2, [x19, #320]
   10528:	b	ee68 <d_print_mod+0x448>
   1052c:	ldp	x3, x2, [x19, #272]
   10530:	strb	wzr, [x19, #255]
   10534:	mov	x1, x0
   10538:	mov	x0, x19
   1053c:	blr	x3
   10540:	ldr	x1, [x19, #320]
   10544:	mov	w2, #0x3a3a                	// #14906
   10548:	mov	x0, #0x2                   	// #2
   1054c:	strh	w2, [x19]
   10550:	add	x1, x1, #0x1
   10554:	str	x1, [x19, #320]
   10558:	b	ee64 <d_print_mod+0x444>
   1055c:	ldr	w0, [x22, #4]
   10560:	mov	x1, x2
   10564:	cmp	w0, #0x1
   10568:	b.le	f1c8 <d_print_mod+0x7a8>
   1056c:	add	x0, x1, #0x1
   10570:	str	w2, [x19, #304]
   10574:	b	f254 <d_print_mod+0x834>

0000000000010578 <d_print_mod_list>:
   10578:	cbz	x2, 10afc <d_print_mod_list+0x584>
   1057c:	stp	x29, x30, [sp, #-112]!
   10580:	mov	x29, sp
   10584:	stp	x19, x20, [sp, #16]
   10588:	mov	x20, x0
   1058c:	mov	x19, x2
   10590:	stp	x21, x22, [sp, #32]
   10594:	mov	w21, w1
   10598:	mov	w22, #0x1                   	// #1
   1059c:	stp	x25, x26, [sp, #64]
   105a0:	cbnz	w3, 10694 <d_print_mod_list+0x11c>
   105a4:	mov	x22, #0x1f                  	// #31
   105a8:	stp	x23, x24, [sp, #48]
   105ac:	movk	x22, #0x1a, lsl #48
   105b0:	mov	w24, #0x1                   	// #1
   105b4:	mov	x23, #0x1                   	// #1
   105b8:	b	10620 <d_print_mod_list+0xa8>
   105bc:	ldr	w2, [x19, #16]
   105c0:	cbnz	w2, 10618 <d_print_mod_list+0xa0>
   105c4:	ldr	x4, [x19, #8]
   105c8:	mov	x2, x4
   105cc:	ldr	w5, [x4]
   105d0:	sub	w3, w5, #0x1c
   105d4:	cmp	w3, #0x34
   105d8:	b.hi	105e8 <d_print_mod_list+0x70>  // b.pmore
   105dc:	lsl	x3, x23, x3
   105e0:	tst	x3, x22
   105e4:	b.ne	10618 <d_print_mod_list+0xa0>  // b.any
   105e8:	ldr	x3, [x19, #24]
   105ec:	cmp	w5, #0x29
   105f0:	ldr	x25, [x20, #288]
   105f4:	str	w24, [x19, #16]
   105f8:	str	x3, [x20, #288]
   105fc:	b.eq	106b8 <d_print_mod_list+0x140>  // b.none
   10600:	cmp	w5, #0x2a
   10604:	b.eq	106e8 <d_print_mod_list+0x170>  // b.none
   10608:	cmp	w5, #0x2
   1060c:	b.eq	1071c <d_print_mod_list+0x1a4>  // b.none
   10610:	bl	ea20 <d_print_mod>
   10614:	str	x25, [x20, #288]
   10618:	ldr	x19, [x19]
   1061c:	cbz	x19, 10630 <d_print_mod_list+0xb8>
   10620:	ldr	w2, [x20, #304]
   10624:	mov	w1, w21
   10628:	mov	x0, x20
   1062c:	cbz	w2, 105bc <d_print_mod_list+0x44>
   10630:	ldp	x23, x24, [sp, #48]
   10634:	ldp	x19, x20, [sp, #16]
   10638:	ldp	x21, x22, [sp, #32]
   1063c:	ldp	x25, x26, [sp, #64]
   10640:	ldp	x29, x30, [sp], #112
   10644:	ret
   10648:	ldr	w2, [x19, #16]
   1064c:	cbnz	w2, 1068c <d_print_mod_list+0x114>
   10650:	ldr	x4, [x19, #8]
   10654:	ldr	x5, [x19, #24]
   10658:	mov	x2, x4
   1065c:	ldr	w3, [x4]
   10660:	ldr	x25, [x20, #288]
   10664:	str	w22, [x19, #16]
   10668:	str	x5, [x20, #288]
   1066c:	cmp	w3, #0x29
   10670:	b.eq	106bc <d_print_mod_list+0x144>  // b.none
   10674:	cmp	w3, #0x2a
   10678:	b.eq	106ec <d_print_mod_list+0x174>  // b.none
   1067c:	cmp	w3, #0x2
   10680:	b.eq	10718 <d_print_mod_list+0x1a0>  // b.none
   10684:	bl	ea20 <d_print_mod>
   10688:	str	x25, [x20, #288]
   1068c:	ldr	x19, [x19]
   10690:	cbz	x19, 10634 <d_print_mod_list+0xbc>
   10694:	ldr	w2, [x20, #304]
   10698:	mov	w1, w21
   1069c:	mov	x0, x20
   106a0:	cbz	w2, 10648 <d_print_mod_list+0xd0>
   106a4:	ldp	x19, x20, [sp, #16]
   106a8:	ldp	x21, x22, [sp, #32]
   106ac:	ldp	x25, x26, [sp, #64]
   106b0:	ldp	x29, x30, [sp], #112
   106b4:	ret
   106b8:	ldp	x23, x24, [sp, #48]
   106bc:	mov	w1, w21
   106c0:	ldr	x3, [x19]
   106c4:	mov	x0, x20
   106c8:	add	x2, x4, #0x10
   106cc:	bl	11210 <d_print_function_type.isra.0>
   106d0:	str	x25, [x20, #288]
   106d4:	ldp	x19, x20, [sp, #16]
   106d8:	ldp	x21, x22, [sp, #32]
   106dc:	ldp	x25, x26, [sp, #64]
   106e0:	ldp	x29, x30, [sp], #112
   106e4:	ret
   106e8:	ldp	x23, x24, [sp, #48]
   106ec:	mov	w1, w21
   106f0:	ldr	x3, [x19]
   106f4:	mov	x0, x20
   106f8:	add	x2, x4, #0x8
   106fc:	bl	10ee0 <d_print_array_type.isra.0>
   10700:	str	x25, [x20, #288]
   10704:	ldp	x19, x20, [sp, #16]
   10708:	ldp	x21, x22, [sp, #32]
   1070c:	ldp	x25, x26, [sp, #64]
   10710:	ldp	x29, x30, [sp], #112
   10714:	ret
   10718:	stp	x23, x24, [sp, #48]
   1071c:	ldr	x22, [x4, #8]
   10720:	ldr	x23, [x20, #296]
   10724:	str	xzr, [x20, #296]
   10728:	cbz	x22, 10744 <d_print_mod_list+0x1cc>
   1072c:	ldr	w0, [x22, #4]
   10730:	cmp	w0, #0x1
   10734:	b.gt	10744 <d_print_mod_list+0x1cc>
   10738:	ldr	w1, [x20, #308]
   1073c:	cmp	w1, #0x400
   10740:	b.le	10870 <d_print_mod_list+0x2f8>
   10744:	mov	w0, #0x1                   	// #1
   10748:	str	w0, [x20, #304]
   1074c:	str	x23, [x20, #296]
   10750:	ldr	x0, [x20, #256]
   10754:	tbz	w21, #2, 108c4 <d_print_mod_list+0x34c>
   10758:	add	x3, x0, #0x1
   1075c:	cmp	x0, #0xff
   10760:	b.ne	1078c <d_print_mod_list+0x214>  // b.any
   10764:	ldp	x3, x2, [x20, #272]
   10768:	strb	wzr, [x20, #255]
   1076c:	mov	x1, x0
   10770:	mov	x0, x20
   10774:	blr	x3
   10778:	ldr	x1, [x20, #320]
   1077c:	mov	x3, #0x1                   	// #1
   10780:	mov	x0, #0x0                   	// #0
   10784:	add	x1, x1, x3
   10788:	str	x1, [x20, #320]
   1078c:	str	x3, [x20, #256]
   10790:	mov	w1, #0x2e                  	// #46
   10794:	strb	w1, [x20, x0]
   10798:	strb	w1, [x20, #264]
   1079c:	ldr	x0, [x19, #8]
   107a0:	ldr	x22, [x0, #16]
   107a4:	ldr	w0, [x22]
   107a8:	cmp	w0, #0x47
   107ac:	b.eq	10954 <d_print_mod_list+0x3dc>  // b.none
   107b0:	mov	x1, #0x1f                  	// #31
   107b4:	mov	x2, #0x1                   	// #1
   107b8:	movk	x1, #0x1a, lsl #48
   107bc:	sub	w0, w0, #0x1c
   107c0:	cmp	w0, #0x34
   107c4:	b.hi	107d4 <d_print_mod_list+0x25c>  // b.pmore
   107c8:	lsl	x0, x2, x0
   107cc:	tst	x0, x1
   107d0:	b.ne	10810 <d_print_mod_list+0x298>  // b.any
   107d4:	ldr	w0, [x22, #4]
   107d8:	cmp	w0, #0x1
   107dc:	b.gt	107ec <d_print_mod_list+0x274>
   107e0:	ldr	w1, [x20, #308]
   107e4:	cmp	w1, #0x400
   107e8:	b.le	1081c <d_print_mod_list+0x2a4>
   107ec:	mov	w0, #0x1                   	// #1
   107f0:	str	w0, [x20, #304]
   107f4:	ldp	x23, x24, [sp, #48]
   107f8:	str	x25, [x20, #288]
   107fc:	ldp	x19, x20, [sp, #16]
   10800:	ldp	x21, x22, [sp, #32]
   10804:	ldp	x25, x26, [sp, #64]
   10808:	ldp	x29, x30, [sp], #112
   1080c:	ret
   10810:	ldr	x22, [x22, #8]
   10814:	ldr	w0, [x22]
   10818:	b	107bc <d_print_mod_list+0x244>
   1081c:	ldr	x3, [x20, #328]
   10820:	add	w0, w0, #0x1
   10824:	str	w0, [x22, #4]
   10828:	add	w1, w1, #0x1
   1082c:	add	x0, sp, #0x50
   10830:	str	w1, [x20, #308]
   10834:	str	x0, [x20, #328]
   10838:	mov	w1, w21
   1083c:	mov	x0, x20
   10840:	mov	x2, x22
   10844:	stp	x22, x3, [sp, #80]
   10848:	bl	4e08 <d_print_comp_inner>
   1084c:	ldr	w1, [x22, #4]
   10850:	ldr	x0, [sp, #88]
   10854:	str	x0, [x20, #328]
   10858:	ldr	w0, [x20, #308]
   1085c:	sub	w1, w1, #0x1
   10860:	str	w1, [x22, #4]
   10864:	sub	w0, w0, #0x1
   10868:	str	w0, [x20, #308]
   1086c:	b	107f4 <d_print_mod_list+0x27c>
   10870:	ldr	x3, [x20, #328]
   10874:	add	w0, w0, #0x1
   10878:	str	w0, [x22, #4]
   1087c:	add	w1, w1, #0x1
   10880:	add	x0, sp, #0x50
   10884:	str	w1, [x20, #308]
   10888:	str	x0, [x20, #328]
   1088c:	mov	w1, w21
   10890:	mov	x0, x20
   10894:	mov	x2, x22
   10898:	stp	x22, x3, [sp, #80]
   1089c:	bl	4e08 <d_print_comp_inner>
   108a0:	ldr	w1, [x22, #4]
   108a4:	ldr	x0, [sp, #88]
   108a8:	str	x0, [x20, #328]
   108ac:	ldr	w0, [x20, #308]
   108b0:	sub	w1, w1, #0x1
   108b4:	str	w1, [x22, #4]
   108b8:	sub	w0, w0, #0x1
   108bc:	str	w0, [x20, #308]
   108c0:	b	1074c <d_print_mod_list+0x1d4>
   108c4:	cmp	x0, #0xff
   108c8:	b.eq	10920 <d_print_mod_list+0x3a8>  // b.none
   108cc:	add	x1, x0, #0x1
   108d0:	str	x1, [x20, #256]
   108d4:	mov	w2, #0x3a                  	// #58
   108d8:	strb	w2, [x20, x0]
   108dc:	strb	w2, [x20, #264]
   108e0:	cmp	x1, #0xff
   108e4:	b.ne	1094c <d_print_mod_list+0x3d4>  // b.any
   108e8:	ldp	x3, x2, [x20, #272]
   108ec:	strb	wzr, [x20, #255]
   108f0:	mov	x0, x20
   108f4:	blr	x3
   108f8:	ldr	x0, [x20, #320]
   108fc:	mov	x3, #0x1                   	// #1
   10900:	mov	x1, #0x0                   	// #0
   10904:	add	x0, x0, x3
   10908:	str	x0, [x20, #320]
   1090c:	str	x3, [x20, #256]
   10910:	mov	w0, #0x3a                  	// #58
   10914:	strb	w0, [x20, x1]
   10918:	strb	w0, [x20, #264]
   1091c:	b	1079c <d_print_mod_list+0x224>
   10920:	ldp	x3, x2, [x20, #272]
   10924:	strb	wzr, [x20, #255]
   10928:	mov	x1, x0
   1092c:	mov	x0, x20
   10930:	blr	x3
   10934:	ldr	x0, [x20, #320]
   10938:	mov	w2, #0x3a                  	// #58
   1093c:	mov	x1, #0x1                   	// #1
   10940:	strb	w2, [x20]
   10944:	add	x0, x0, x1
   10948:	str	x0, [x20, #320]
   1094c:	add	x3, x1, #0x1
   10950:	b	1090c <d_print_mod_list+0x394>
   10954:	cmp	x3, #0xff
   10958:	b.eq	10d24 <d_print_mod_list+0x7ac>  // b.none
   1095c:	add	x1, x3, #0x1
   10960:	str	x1, [x20, #256]
   10964:	mov	w0, #0x7b                  	// #123
   10968:	strb	w0, [x20, x3]
   1096c:	strb	w0, [x20, #264]
   10970:	cmp	x1, #0xff
   10974:	b.ne	10b54 <d_print_mod_list+0x5dc>  // b.any
   10978:	ldp	x3, x2, [x20, #272]
   1097c:	strb	wzr, [x20, #255]
   10980:	mov	x0, x20
   10984:	blr	x3
   10988:	ldr	x1, [x20, #320]
   1098c:	mov	w3, #0x6564                	// #25956
   10990:	mov	w2, #0x66                  	// #102
   10994:	mov	x0, #0x3                   	// #3
   10998:	add	x1, x1, #0x1
   1099c:	strh	w3, [x20]
   109a0:	strb	w2, [x20, #2]
   109a4:	str	x1, [x20, #320]
   109a8:	add	x1, x0, #0x1
   109ac:	str	x1, [x20, #256]
   109b0:	mov	w2, #0x61                  	// #97
   109b4:	strb	w2, [x20, x0]
   109b8:	strb	w2, [x20, #264]
   109bc:	cmp	x1, #0xff
   109c0:	b.ne	10ba4 <d_print_mod_list+0x62c>  // b.any
   109c4:	ldp	x3, x2, [x20, #272]
   109c8:	strb	wzr, [x20, #255]
   109cc:	mov	x0, x20
   109d0:	blr	x3
   109d4:	ldr	x1, [x20, #320]
   109d8:	mov	w3, #0x6c75                	// #27765
   109dc:	mov	w2, #0x74                  	// #116
   109e0:	mov	x0, #0x3                   	// #3
   109e4:	add	x1, x1, #0x1
   109e8:	strh	w3, [x20]
   109ec:	strb	w2, [x20, #2]
   109f0:	str	x1, [x20, #320]
   109f4:	add	x1, x0, #0x1
   109f8:	str	x1, [x20, #256]
   109fc:	mov	w2, #0x20                  	// #32
   10a00:	strb	w2, [x20, x0]
   10a04:	strb	w2, [x20, #264]
   10a08:	cmp	x1, #0xff
   10a0c:	b.ne	10bf4 <d_print_mod_list+0x67c>  // b.any
   10a10:	ldp	x3, x2, [x20, #272]
   10a14:	strb	wzr, [x20, #255]
   10a18:	mov	x0, x20
   10a1c:	blr	x3
   10a20:	ldr	x0, [x20, #320]
   10a24:	mov	w2, #0x7261                	// #29281
   10a28:	mov	x1, #0x2                   	// #2
   10a2c:	strh	w2, [x20]
   10a30:	add	x0, x0, #0x1
   10a34:	str	x0, [x20, #320]
   10a38:	add	x0, x1, #0x1
   10a3c:	mov	w2, #0x67                  	// #103
   10a40:	strb	w2, [x20, x1]
   10a44:	add	x2, x0, #0x1
   10a48:	str	x2, [x20, #256]
   10a4c:	mov	w2, #0x23                  	// #35
   10a50:	strb	w2, [x20, x0]
   10a54:	adrp	x1, 0 <d_make_comp>
   10a58:	strb	w2, [x20, #264]
   10a5c:	add	x1, x1, #0x0
   10a60:	add	x19, sp, #0x50
   10a64:	ldr	w2, [x22, #16]
   10a68:	mov	x0, x19
   10a6c:	add	w2, w2, #0x1
   10a70:	bl	0 <sprintf>
   10a74:	mov	x0, x19
   10a78:	bl	0 <strlen>
   10a7c:	cbz	x0, 10b00 <d_print_mod_list+0x588>
   10a80:	add	x24, x19, x0
   10a84:	mov	x26, #0x1                   	// #1
   10a88:	ldr	x1, [x20, #256]
   10a8c:	b	10ae4 <d_print_mod_list+0x56c>
   10a90:	ldp	x3, x2, [x20, #272]
   10a94:	strb	wzr, [x20, #255]
   10a98:	add	x19, x19, #0x1
   10a9c:	blr	x3
   10aa0:	strb	w23, [x20]
   10aa4:	ldr	x0, [x20, #320]
   10aa8:	str	x26, [x20, #256]
   10aac:	strb	w23, [x20, #264]
   10ab0:	cmp	x24, x19
   10ab4:	add	x0, x0, #0x1
   10ab8:	str	x0, [x20, #320]
   10abc:	mov	x0, #0x1                   	// #1
   10ac0:	b.eq	10e8c <d_print_mod_list+0x914>  // b.none
   10ac4:	ldrb	w23, [x19]
   10ac8:	add	x1, x0, #0x1
   10acc:	str	x1, [x20, #256]
   10ad0:	strb	w23, [x20, x0]
   10ad4:	add	x19, x19, #0x1
   10ad8:	strb	w23, [x20, #264]
   10adc:	cmp	x24, x19
   10ae0:	b.eq	10b04 <d_print_mod_list+0x58c>  // b.none
   10ae4:	ldrb	w23, [x19]
   10ae8:	mov	x0, x20
   10aec:	cmp	x1, #0xff
   10af0:	b.eq	10a90 <d_print_mod_list+0x518>  // b.none
   10af4:	mov	x0, x1
   10af8:	b	10ac8 <d_print_mod_list+0x550>
   10afc:	ret
   10b00:	ldr	x1, [x20, #256]
   10b04:	cmp	x1, #0xff
   10b08:	b.ne	10e40 <d_print_mod_list+0x8c8>  // b.any
   10b0c:	ldp	x3, x2, [x20, #272]
   10b10:	strb	wzr, [x20, #255]
   10b14:	mov	x0, x20
   10b18:	blr	x3
   10b1c:	ldr	x1, [x20, #320]
   10b20:	mov	w2, #0x3a7d                	// #14973
   10b24:	mov	x0, #0x2                   	// #2
   10b28:	strh	w2, [x20]
   10b2c:	add	x1, x1, #0x1
   10b30:	str	x1, [x20, #320]
   10b34:	add	x2, x0, #0x1
   10b38:	str	x2, [x20, #256]
   10b3c:	mov	w1, #0x3a                  	// #58
   10b40:	strb	w1, [x20, x0]
   10b44:	strb	w1, [x20, #264]
   10b48:	ldr	x22, [x22, #8]
   10b4c:	ldr	w0, [x22]
   10b50:	b	107b0 <d_print_mod_list+0x238>
   10b54:	add	x0, x3, #0x2
   10b58:	str	x0, [x20, #256]
   10b5c:	mov	w2, #0x64                  	// #100
   10b60:	strb	w2, [x20, x1]
   10b64:	strb	w2, [x20, #264]
   10b68:	cmp	x0, #0xff
   10b6c:	b.ne	10c40 <d_print_mod_list+0x6c8>  // b.any
   10b70:	ldp	x3, x2, [x20, #272]
   10b74:	strb	wzr, [x20, #255]
   10b78:	mov	x1, x0
   10b7c:	mov	x0, x20
   10b80:	blr	x3
   10b84:	ldr	x0, [x20, #320]
   10b88:	mov	w3, #0x6665                	// #26213
   10b8c:	mov	w2, #0x61                  	// #97
   10b90:	mov	x1, #0x3                   	// #3
   10b94:	add	x0, x0, #0x1
   10b98:	strh	w3, [x20]
   10b9c:	strb	w2, [x20, #2]
   10ba0:	str	x0, [x20, #320]
   10ba4:	add	x0, x1, #0x1
   10ba8:	str	x0, [x20, #256]
   10bac:	mov	w2, #0x75                  	// #117
   10bb0:	strb	w2, [x20, x1]
   10bb4:	strb	w2, [x20, #264]
   10bb8:	cmp	x0, #0xff
   10bbc:	b.ne	10c90 <d_print_mod_list+0x718>  // b.any
   10bc0:	ldp	x3, x2, [x20, #272]
   10bc4:	strb	wzr, [x20, #255]
   10bc8:	mov	x1, x0
   10bcc:	mov	x0, x20
   10bd0:	blr	x3
   10bd4:	ldr	x0, [x20, #320]
   10bd8:	mov	w3, #0x746c                	// #29804
   10bdc:	mov	w2, #0x20                  	// #32
   10be0:	mov	x1, #0x3                   	// #3
   10be4:	add	x0, x0, #0x1
   10be8:	strh	w3, [x20]
   10bec:	strb	w2, [x20, #2]
   10bf0:	str	x0, [x20, #320]
   10bf4:	add	x0, x1, #0x1
   10bf8:	str	x0, [x20, #256]
   10bfc:	mov	w2, #0x61                  	// #97
   10c00:	strb	w2, [x20, x1]
   10c04:	strb	w2, [x20, #264]
   10c08:	cmp	x0, #0xff
   10c0c:	b.ne	10cdc <d_print_mod_list+0x764>  // b.any
   10c10:	ldp	x3, x2, [x20, #272]
   10c14:	strb	wzr, [x20, #255]
   10c18:	mov	x1, x0
   10c1c:	mov	x0, x20
   10c20:	blr	x3
   10c24:	ldr	x0, [x20, #320]
   10c28:	mov	w2, #0x72                  	// #114
   10c2c:	mov	x1, #0x1                   	// #1
   10c30:	strb	w2, [x20]
   10c34:	add	x0, x0, x1
   10c38:	str	x0, [x20, #320]
   10c3c:	b	10a38 <d_print_mod_list+0x4c0>
   10c40:	add	x3, x3, #0x3
   10c44:	str	x3, [x20, #256]
   10c48:	mov	w1, #0x65                  	// #101
   10c4c:	strb	w1, [x20, x0]
   10c50:	strb	w1, [x20, #264]
   10c54:	cmp	x3, #0xff
   10c58:	b.ne	10d58 <d_print_mod_list+0x7e0>  // b.any
   10c5c:	ldp	x4, x2, [x20, #272]
   10c60:	strb	wzr, [x20, #255]
   10c64:	mov	x1, x3
   10c68:	mov	x0, x20
   10c6c:	blr	x4
   10c70:	ldr	x1, [x20, #320]
   10c74:	mov	w3, #0x6166                	// #24934
   10c78:	mov	w2, #0x75                  	// #117
   10c7c:	mov	x0, #0x3                   	// #3
   10c80:	add	x1, x1, #0x1
   10c84:	strh	w3, [x20]
   10c88:	strb	w2, [x20, #2]
   10c8c:	str	x1, [x20, #320]
   10c90:	add	x1, x0, #0x1
   10c94:	str	x1, [x20, #256]
   10c98:	mov	w2, #0x6c                  	// #108
   10c9c:	strb	w2, [x20, x0]
   10ca0:	strb	w2, [x20, #264]
   10ca4:	cmp	x1, #0xff
   10ca8:	b.ne	10da8 <d_print_mod_list+0x830>  // b.any
   10cac:	ldp	x3, x2, [x20, #272]
   10cb0:	strb	wzr, [x20, #255]
   10cb4:	mov	x0, x20
   10cb8:	blr	x3
   10cbc:	ldr	x1, [x20, #320]
   10cc0:	mov	w3, #0x2074                	// #8308
   10cc4:	mov	w2, #0x61                  	// #97
   10cc8:	mov	x0, #0x3                   	// #3
   10ccc:	add	x1, x1, #0x1
   10cd0:	strh	w3, [x20]
   10cd4:	strb	w2, [x20, #2]
   10cd8:	str	x1, [x20, #320]
   10cdc:	add	x1, x0, #0x1
   10ce0:	str	x1, [x20, #256]
   10ce4:	mov	w2, #0x72                  	// #114
   10ce8:	strb	w2, [x20, x0]
   10cec:	strb	w2, [x20, #264]
   10cf0:	cmp	x1, #0xff
   10cf4:	b.ne	10df8 <d_print_mod_list+0x880>  // b.any
   10cf8:	ldp	x3, x2, [x20, #272]
   10cfc:	strb	wzr, [x20, #255]
   10d00:	mov	x0, x20
   10d04:	blr	x3
   10d08:	ldr	x1, [x20, #320]
   10d0c:	mov	w2, #0x67                  	// #103
   10d10:	mov	x0, #0x1                   	// #1
   10d14:	strb	w2, [x20]
   10d18:	add	x1, x1, x0
   10d1c:	str	x1, [x20, #320]
   10d20:	b	10a44 <d_print_mod_list+0x4cc>
   10d24:	ldp	x4, x2, [x20, #272]
   10d28:	strb	wzr, [x20, #255]
   10d2c:	mov	x1, x3
   10d30:	mov	x0, x20
   10d34:	blr	x4
   10d38:	ldr	x0, [x20, #320]
   10d3c:	mov	w2, #0x647b                	// #25723
   10d40:	mov	w1, #0x65                  	// #101
   10d44:	mov	x3, #0x3                   	// #3
   10d48:	add	x0, x0, #0x1
   10d4c:	strh	w2, [x20]
   10d50:	strb	w1, [x20, #2]
   10d54:	str	x0, [x20, #320]
   10d58:	add	x0, x3, #0x1
   10d5c:	str	x0, [x20, #256]
   10d60:	mov	w1, #0x66                  	// #102
   10d64:	strb	w1, [x20, x3]
   10d68:	strb	w1, [x20, #264]
   10d6c:	cmp	x0, #0xff
   10d70:	b.ne	109a8 <d_print_mod_list+0x430>  // b.any
   10d74:	ldp	x3, x2, [x20, #272]
   10d78:	strb	wzr, [x20, #255]
   10d7c:	mov	x1, x0
   10d80:	mov	x0, x20
   10d84:	blr	x3
   10d88:	ldr	x0, [x20, #320]
   10d8c:	mov	w3, #0x7561                	// #30049
   10d90:	mov	w2, #0x6c                  	// #108
   10d94:	mov	x1, #0x3                   	// #3
   10d98:	add	x0, x0, #0x1
   10d9c:	strh	w3, [x20]
   10da0:	strb	w2, [x20, #2]
   10da4:	str	x0, [x20, #320]
   10da8:	add	x0, x1, #0x1
   10dac:	str	x0, [x20, #256]
   10db0:	mov	w2, #0x74                  	// #116
   10db4:	strb	w2, [x20, x1]
   10db8:	strb	w2, [x20, #264]
   10dbc:	cmp	x0, #0xff
   10dc0:	b.ne	109f4 <d_print_mod_list+0x47c>  // b.any
   10dc4:	ldp	x3, x2, [x20, #272]
   10dc8:	strb	wzr, [x20, #255]
   10dcc:	mov	x1, x0
   10dd0:	mov	x0, x20
   10dd4:	blr	x3
   10dd8:	ldr	x0, [x20, #320]
   10ddc:	mov	w3, #0x6120                	// #24864
   10de0:	mov	w2, #0x72                  	// #114
   10de4:	mov	x1, #0x3                   	// #3
   10de8:	add	x0, x0, #0x1
   10dec:	strh	w3, [x20]
   10df0:	strb	w2, [x20, #2]
   10df4:	str	x0, [x20, #320]
   10df8:	add	x0, x1, #0x1
   10dfc:	str	x0, [x20, #256]
   10e00:	mov	w2, #0x67                  	// #103
   10e04:	strb	w2, [x20, x1]
   10e08:	strb	w2, [x20, #264]
   10e0c:	cmp	x0, #0xff
   10e10:	b.ne	10a44 <d_print_mod_list+0x4cc>  // b.any
   10e14:	ldp	x3, x2, [x20, #272]
   10e18:	strb	wzr, [x20, #255]
   10e1c:	mov	x1, x0
   10e20:	mov	x0, x20
   10e24:	blr	x3
   10e28:	ldr	x1, [x20, #320]
   10e2c:	mov	x2, #0x1                   	// #1
   10e30:	mov	x0, #0x0                   	// #0
   10e34:	add	x1, x1, x2
   10e38:	str	x1, [x20, #320]
   10e3c:	b	10a48 <d_print_mod_list+0x4d0>
   10e40:	add	x3, x1, #0x1
   10e44:	str	x3, [x20, #256]
   10e48:	mov	w0, #0x7d                  	// #125
   10e4c:	strb	w0, [x20, x1]
   10e50:	strb	w0, [x20, #264]
   10e54:	cmp	x3, #0xff
   10e58:	b.ne	10e98 <d_print_mod_list+0x920>  // b.any
   10e5c:	ldp	x4, x2, [x20, #272]
   10e60:	strb	wzr, [x20, #255]
   10e64:	mov	x1, x3
   10e68:	mov	x0, x20
   10e6c:	blr	x4
   10e70:	ldr	x1, [x20, #320]
   10e74:	mov	w2, #0x3a                  	// #58
   10e78:	mov	x0, #0x1                   	// #1
   10e7c:	strb	w2, [x20]
   10e80:	add	x1, x1, x0
   10e84:	str	x1, [x20, #320]
   10e88:	b	10b34 <d_print_mod_list+0x5bc>
   10e8c:	mov	w0, #0x7d                  	// #125
   10e90:	mov	x3, #0x2                   	// #2
   10e94:	strb	w0, [x20, #1]
   10e98:	add	x0, x3, #0x1
   10e9c:	str	x0, [x20, #256]
   10ea0:	mov	w1, #0x3a                  	// #58
   10ea4:	strb	w1, [x20, x3]
   10ea8:	strb	w1, [x20, #264]
   10eac:	cmp	x0, #0xff
   10eb0:	b.ne	10b34 <d_print_mod_list+0x5bc>  // b.any
   10eb4:	ldp	x3, x2, [x20, #272]
   10eb8:	strb	wzr, [x20, #255]
   10ebc:	mov	x1, x0
   10ec0:	mov	x0, x20
   10ec4:	blr	x3
   10ec8:	ldr	x1, [x20, #320]
   10ecc:	mov	x2, #0x1                   	// #1
   10ed0:	mov	x0, #0x0                   	// #0
   10ed4:	add	x1, x1, x2
   10ed8:	str	x1, [x20, #320]
   10edc:	b	10b38 <d_print_mod_list+0x5c0>

0000000000010ee0 <d_print_array_type.isra.0>:
   10ee0:	stp	x29, x30, [sp, #-80]!
   10ee4:	mov	x4, x3
   10ee8:	mov	x29, sp
   10eec:	stp	x19, x20, [sp, #16]
   10ef0:	mov	x19, x0
   10ef4:	stp	x21, x22, [sp, #32]
   10ef8:	mov	w22, w1
   10efc:	mov	x21, x2
   10f00:	cbz	x3, 10f2c <d_print_array_type.isra.0+0x4c>
   10f04:	nop
   10f08:	ldr	w0, [x4, #16]
   10f0c:	cbz	w0, 11040 <d_print_array_type.isra.0+0x160>
   10f10:	ldr	x4, [x4]
   10f14:	cbnz	x4, 10f08 <d_print_array_type.isra.0+0x28>
   10f18:	mov	x2, x3
   10f1c:	mov	w1, w22
   10f20:	mov	x0, x19
   10f24:	mov	w3, #0x0                   	// #0
   10f28:	bl	10578 <d_print_mod_list>
   10f2c:	ldr	x0, [x19, #256]
   10f30:	cmp	x0, #0xff
   10f34:	b.eq	1106c <d_print_array_type.isra.0+0x18c>  // b.none
   10f38:	add	x1, x0, #0x1
   10f3c:	str	x1, [x19, #256]
   10f40:	mov	w2, #0x20                  	// #32
   10f44:	strb	w2, [x19, x0]
   10f48:	strb	w2, [x19, #264]
   10f4c:	cmp	x1, #0xff
   10f50:	b.eq	11004 <d_print_array_type.isra.0+0x124>  // b.none
   10f54:	add	x0, x1, #0x1
   10f58:	str	x0, [x19, #256]
   10f5c:	mov	w2, #0x5b                  	// #91
   10f60:	strb	w2, [x19, x1]
   10f64:	strb	w2, [x19, #264]
   10f68:	ldr	x20, [x21]
   10f6c:	cbz	x20, 10f90 <d_print_array_type.isra.0+0xb0>
   10f70:	ldr	w1, [x20, #4]
   10f74:	cmp	w1, #0x1
   10f78:	b.gt	10f88 <d_print_array_type.isra.0+0xa8>
   10f7c:	ldr	w2, [x19, #308]
   10f80:	cmp	w2, #0x400
   10f84:	b.le	1114c <d_print_array_type.isra.0+0x26c>
   10f88:	mov	w1, #0x1                   	// #1
   10f8c:	str	w1, [x19, #304]
   10f90:	cmp	x0, #0xff
   10f94:	b.eq	10fbc <d_print_array_type.isra.0+0xdc>  // b.none
   10f98:	add	x1, x0, #0x1
   10f9c:	str	x1, [x19, #256]
   10fa0:	mov	w1, #0x5d                  	// #93
   10fa4:	strb	w1, [x19, x0]
   10fa8:	strb	w1, [x19, #264]
   10fac:	ldp	x19, x20, [sp, #16]
   10fb0:	ldp	x21, x22, [sp, #32]
   10fb4:	ldp	x29, x30, [sp], #80
   10fb8:	ret
   10fbc:	ldp	x3, x2, [x19, #272]
   10fc0:	strb	wzr, [x19, #255]
   10fc4:	mov	x1, x0
   10fc8:	mov	x0, x19
   10fcc:	blr	x3
   10fd0:	ldr	x2, [x19, #320]
   10fd4:	mov	x0, #0x0                   	// #0
   10fd8:	mov	x1, #0x1                   	// #1
   10fdc:	str	x1, [x19, #256]
   10fe0:	add	x2, x2, x1
   10fe4:	str	x2, [x19, #320]
   10fe8:	mov	w1, #0x5d                  	// #93
   10fec:	strb	w1, [x19, x0]
   10ff0:	strb	w1, [x19, #264]
   10ff4:	ldp	x19, x20, [sp, #16]
   10ff8:	ldp	x21, x22, [sp, #32]
   10ffc:	ldp	x29, x30, [sp], #80
   11000:	ret
   11004:	ldp	x3, x2, [x19, #272]
   11008:	strb	wzr, [x19, #255]
   1100c:	mov	x0, x19
   11010:	blr	x3
   11014:	mov	w1, #0x5b                  	// #91
   11018:	strb	w1, [x19]
   1101c:	strb	w1, [x19, #264]
   11020:	mov	x0, #0x1                   	// #1
   11024:	ldr	x1, [x19, #320]
   11028:	ldr	x20, [x21]
   1102c:	add	x1, x1, x0
   11030:	str	x0, [x19, #256]
   11034:	str	x1, [x19, #320]
   11038:	cbnz	x20, 10f70 <d_print_array_type.isra.0+0x90>
   1103c:	b	10f98 <d_print_array_type.isra.0+0xb8>
   11040:	ldr	x0, [x4, #8]
   11044:	ldr	w0, [x0]
   11048:	cmp	w0, #0x2a
   1104c:	b.ne	110b0 <d_print_array_type.isra.0+0x1d0>  // b.any
   11050:	mov	x2, x3
   11054:	mov	w1, w22
   11058:	mov	x0, x19
   1105c:	mov	w3, #0x0                   	// #0
   11060:	bl	10578 <d_print_mod_list>
   11064:	ldr	x1, [x19, #256]
   11068:	b	10f4c <d_print_array_type.isra.0+0x6c>
   1106c:	ldp	x3, x2, [x19, #272]
   11070:	strb	wzr, [x19, #255]
   11074:	mov	x1, x0
   11078:	mov	x0, x19
   1107c:	blr	x3
   11080:	mov	w1, #0x5b20                	// #23328
   11084:	mov	w0, #0x5b                  	// #91
   11088:	strh	w1, [x19]
   1108c:	strb	w0, [x19, #264]
   11090:	mov	x0, #0x2                   	// #2
   11094:	ldr	x1, [x19, #320]
   11098:	ldr	x20, [x21]
   1109c:	add	x1, x1, #0x1
   110a0:	str	x0, [x19, #256]
   110a4:	str	x1, [x19, #320]
   110a8:	cbnz	x20, 10f70 <d_print_array_type.isra.0+0x90>
   110ac:	b	10f98 <d_print_array_type.isra.0+0xb8>
   110b0:	ldr	x0, [x19, #256]
   110b4:	cmp	x0, #0xff
   110b8:	b.eq	111d0 <d_print_array_type.isra.0+0x2f0>  // b.none
   110bc:	add	x1, x0, #0x1
   110c0:	str	x1, [x19, #256]
   110c4:	mov	w2, #0x20                  	// #32
   110c8:	strb	w2, [x19, x0]
   110cc:	strb	w2, [x19, #264]
   110d0:	cmp	x1, #0xff
   110d4:	b.ne	11204 <d_print_array_type.isra.0+0x324>  // b.any
   110d8:	ldp	x4, x2, [x19, #272]
   110dc:	strb	wzr, [x19, #255]
   110e0:	mov	x0, x19
   110e4:	str	x3, [sp, #56]
   110e8:	blr	x4
   110ec:	ldr	x2, [x19, #320]
   110f0:	mov	x0, #0x1                   	// #1
   110f4:	ldr	x3, [sp, #56]
   110f8:	add	x2, x2, x0
   110fc:	mov	x1, #0x0                   	// #0
   11100:	str	x2, [x19, #320]
   11104:	str	x0, [x19, #256]
   11108:	mov	w0, #0x28                  	// #40
   1110c:	strb	w0, [x19, x1]
   11110:	mov	x2, x3
   11114:	strb	w0, [x19, #264]
   11118:	mov	w1, w22
   1111c:	mov	x0, x19
   11120:	mov	w3, #0x0                   	// #0
   11124:	bl	10578 <d_print_mod_list>
   11128:	ldr	x1, [x19, #256]
   1112c:	cmp	x1, #0xff
   11130:	b.eq	111a4 <d_print_array_type.isra.0+0x2c4>  // b.none
   11134:	add	x0, x1, #0x1
   11138:	str	x0, [x19, #256]
   1113c:	mov	w2, #0x29                  	// #41
   11140:	strb	w2, [x19, x1]
   11144:	strb	w2, [x19, #264]
   11148:	b	10f30 <d_print_array_type.isra.0+0x50>
   1114c:	ldr	x3, [x19, #328]
   11150:	add	w1, w1, #0x1
   11154:	str	w1, [x20, #4]
   11158:	add	w2, w2, #0x1
   1115c:	add	x0, sp, #0x40
   11160:	str	w2, [x19, #308]
   11164:	str	x0, [x19, #328]
   11168:	mov	w1, w22
   1116c:	mov	x2, x20
   11170:	mov	x0, x19
   11174:	stp	x20, x3, [sp, #64]
   11178:	bl	4e08 <d_print_comp_inner>
   1117c:	ldr	w2, [x20, #4]
   11180:	ldr	x0, [sp, #72]
   11184:	str	x0, [x19, #328]
   11188:	ldr	w1, [x19, #308]
   1118c:	sub	w2, w2, #0x1
   11190:	ldr	x0, [x19, #256]
   11194:	str	w2, [x20, #4]
   11198:	sub	w1, w1, #0x1
   1119c:	str	w1, [x19, #308]
   111a0:	b	10f90 <d_print_array_type.isra.0+0xb0>
   111a4:	ldp	x3, x2, [x19, #272]
   111a8:	strb	wzr, [x19, #255]
   111ac:	mov	x0, x19
   111b0:	blr	x3
   111b4:	ldr	x1, [x19, #320]
   111b8:	mov	w2, #0x29                  	// #41
   111bc:	mov	x0, #0x1                   	// #1
   111c0:	strb	w2, [x19]
   111c4:	add	x1, x1, x0
   111c8:	str	x1, [x19, #320]
   111cc:	b	10f38 <d_print_array_type.isra.0+0x58>
   111d0:	ldp	x4, x2, [x19, #272]
   111d4:	strb	wzr, [x19, #255]
   111d8:	mov	x1, x0
   111dc:	mov	x0, x19
   111e0:	str	x3, [sp, #56]
   111e4:	blr	x4
   111e8:	ldr	x0, [x19, #320]
   111ec:	mov	w2, #0x20                  	// #32
   111f0:	ldr	x3, [sp, #56]
   111f4:	mov	x1, #0x1                   	// #1
   111f8:	add	x0, x0, x1
   111fc:	strb	w2, [x19]
   11200:	str	x0, [x19, #320]
   11204:	add	x0, x1, #0x1
   11208:	b	11104 <d_print_array_type.isra.0+0x224>
   1120c:	nop

0000000000011210 <d_print_function_type.isra.0>:
   11210:	stp	x29, x30, [sp, #-80]!
   11214:	mov	x29, sp
   11218:	stp	x19, x20, [sp, #16]
   1121c:	mov	x19, x0
   11220:	mov	x20, x3
   11224:	stp	x21, x22, [sp, #32]
   11228:	mov	w22, w1
   1122c:	mov	x21, x2
   11230:	stp	x23, x24, [sp, #48]
   11234:	cbz	x3, 11278 <d_print_function_type.isra.0+0x68>
   11238:	mov	x2, #0xe000000             	// #234881024
   1123c:	mov	x4, #0x1                   	// #1
   11240:	movk	x2, #0x862, lsl #32
   11244:	ldr	w0, [x3, #16]
   11248:	cbnz	w0, 11278 <d_print_function_type.isra.0+0x68>
   1124c:	ldr	x0, [x3, #8]
   11250:	ldr	w0, [x0]
   11254:	cmp	w0, #0x2b
   11258:	b.hi	11270 <d_print_function_type.isra.0+0x60>  // b.pmore
   1125c:	lsl	x0, x4, x0
   11260:	tst	x0, x2
   11264:	b.ne	11350 <d_print_function_type.isra.0+0x140>  // b.any
   11268:	tst	x0, #0x1c00000000
   1126c:	b.ne	1141c <d_print_function_type.isra.0+0x20c>  // b.any
   11270:	ldr	x3, [x3]
   11274:	cbnz	x3, 11244 <d_print_function_type.isra.0+0x34>
   11278:	ldr	x23, [x19, #296]
   1127c:	str	xzr, [x19, #296]
   11280:	mov	w1, w22
   11284:	mov	x2, x20
   11288:	mov	x0, x19
   1128c:	mov	w3, #0x0                   	// #0
   11290:	bl	10578 <d_print_mod_list>
   11294:	ldr	x1, [x19, #256]
   11298:	cmp	x1, #0xff
   1129c:	b.eq	113e0 <d_print_function_type.isra.0+0x1d0>  // b.none
   112a0:	add	x0, x1, #0x1
   112a4:	str	x0, [x19, #256]
   112a8:	mov	w2, #0x28                  	// #40
   112ac:	strb	w2, [x19, x1]
   112b0:	strb	w2, [x19, #264]
   112b4:	ldr	x21, [x21]
   112b8:	cbz	x21, 112dc <d_print_function_type.isra.0+0xcc>
   112bc:	ldr	w1, [x21, #4]
   112c0:	cmp	w1, #0x1
   112c4:	b.gt	112d4 <d_print_function_type.isra.0+0xc4>
   112c8:	ldr	w2, [x19, #308]
   112cc:	cmp	w2, #0x400
   112d0:	b.le	11460 <d_print_function_type.isra.0+0x250>
   112d4:	mov	w1, #0x1                   	// #1
   112d8:	str	w1, [x19, #304]
   112dc:	cmp	x0, #0xff
   112e0:	b.eq	11324 <d_print_function_type.isra.0+0x114>  // b.none
   112e4:	add	x1, x0, #0x1
   112e8:	str	x1, [x19, #256]
   112ec:	mov	w3, #0x29                  	// #41
   112f0:	strb	w3, [x19, x0]
   112f4:	mov	x2, x20
   112f8:	strb	w3, [x19, #264]
   112fc:	mov	w1, w22
   11300:	mov	x0, x19
   11304:	mov	w3, #0x1                   	// #1
   11308:	bl	10578 <d_print_mod_list>
   1130c:	ldp	x21, x22, [sp, #32]
   11310:	str	x23, [x19, #296]
   11314:	ldp	x19, x20, [sp, #16]
   11318:	ldp	x23, x24, [sp, #48]
   1131c:	ldp	x29, x30, [sp], #80
   11320:	ret
   11324:	ldp	x3, x2, [x19, #272]
   11328:	strb	wzr, [x19, #255]
   1132c:	mov	x1, x0
   11330:	mov	x0, x19
   11334:	blr	x3
   11338:	ldr	x2, [x19, #320]
   1133c:	mov	x1, #0x1                   	// #1
   11340:	mov	x0, #0x0                   	// #0
   11344:	add	x2, x2, x1
   11348:	str	x2, [x19, #320]
   1134c:	b	112e8 <d_print_function_type.isra.0+0xd8>
   11350:	ldrb	w0, [x19, #264]
   11354:	ldr	x1, [x19, #256]
   11358:	cmp	w0, #0x20
   1135c:	b.eq	11380 <d_print_function_type.isra.0+0x170>  // b.none
   11360:	cmp	x1, #0xff
   11364:	b.eq	114b8 <d_print_function_type.isra.0+0x2a8>  // b.none
   11368:	add	x2, x1, #0x1
   1136c:	str	x2, [x19, #256]
   11370:	mov	w0, #0x20                  	// #32
   11374:	strb	w0, [x19, x1]
   11378:	mov	x1, x2
   1137c:	strb	w0, [x19, #264]
   11380:	cmp	x1, #0xff
   11384:	b.eq	11438 <d_print_function_type.isra.0+0x228>  // b.none
   11388:	add	x0, x1, #0x1
   1138c:	str	x0, [x19, #256]
   11390:	mov	w24, #0x28                  	// #40
   11394:	strb	w24, [x19, x1]
   11398:	mov	x0, x19
   1139c:	strb	w24, [x19, #264]
   113a0:	mov	x2, x20
   113a4:	ldr	x23, [x19, #296]
   113a8:	str	xzr, [x19, #296]
   113ac:	mov	w1, w22
   113b0:	mov	w3, #0x0                   	// #0
   113b4:	bl	10578 <d_print_mod_list>
   113b8:	ldr	x0, [x19, #256]
   113bc:	cmp	x0, #0xff
   113c0:	b.eq	114e4 <d_print_function_type.isra.0+0x2d4>  // b.none
   113c4:	add	x1, x0, #0x1
   113c8:	str	x1, [x19, #256]
   113cc:	mov	w2, #0x29                  	// #41
   113d0:	strb	w2, [x19, x0]
   113d4:	strb	w2, [x19, #264]
   113d8:	cmp	x1, #0xff
   113dc:	b.ne	112a0 <d_print_function_type.isra.0+0x90>  // b.any
   113e0:	ldp	x3, x2, [x19, #272]
   113e4:	strb	wzr, [x19, #255]
   113e8:	mov	x0, x19
   113ec:	blr	x3
   113f0:	mov	w1, #0x28                  	// #40
   113f4:	strb	w1, [x19]
   113f8:	strb	w1, [x19, #264]
   113fc:	mov	x0, #0x1                   	// #1
   11400:	ldr	x1, [x19, #320]
   11404:	ldr	x21, [x21]
   11408:	add	x1, x1, x0
   1140c:	str	x0, [x19, #256]
   11410:	str	x1, [x19, #320]
   11414:	cbnz	x21, 112bc <d_print_function_type.isra.0+0xac>
   11418:	b	112e4 <d_print_function_type.isra.0+0xd4>
   1141c:	ldrb	w0, [x19, #264]
   11420:	ldr	x1, [x19, #256]
   11424:	and	w2, w0, #0xfffffffd
   11428:	cmp	w2, #0x28
   1142c:	b.ne	11358 <d_print_function_type.isra.0+0x148>  // b.any
   11430:	cmp	x1, #0xff
   11434:	b.ne	11388 <d_print_function_type.isra.0+0x178>  // b.any
   11438:	ldp	x3, x2, [x19, #272]
   1143c:	strb	wzr, [x19, #255]
   11440:	mov	x0, x19
   11444:	blr	x3
   11448:	ldr	x2, [x19, #320]
   1144c:	mov	x0, #0x1                   	// #1
   11450:	mov	x1, #0x0                   	// #0
   11454:	add	x2, x2, x0
   11458:	str	x2, [x19, #320]
   1145c:	b	1138c <d_print_function_type.isra.0+0x17c>
   11460:	ldr	x3, [x19, #328]
   11464:	add	w1, w1, #0x1
   11468:	str	w1, [x21, #4]
   1146c:	add	w2, w2, #0x1
   11470:	add	x0, sp, #0x40
   11474:	str	w2, [x19, #308]
   11478:	str	x0, [x19, #328]
   1147c:	mov	w1, w22
   11480:	mov	x2, x21
   11484:	mov	x0, x19
   11488:	stp	x21, x3, [sp, #64]
   1148c:	bl	4e08 <d_print_comp_inner>
   11490:	ldr	w2, [x21, #4]
   11494:	ldr	x0, [sp, #72]
   11498:	str	x0, [x19, #328]
   1149c:	ldr	w1, [x19, #308]
   114a0:	sub	w2, w2, #0x1
   114a4:	ldr	x0, [x19, #256]
   114a8:	str	w2, [x21, #4]
   114ac:	sub	w1, w1, #0x1
   114b0:	str	w1, [x19, #308]
   114b4:	b	112dc <d_print_function_type.isra.0+0xcc>
   114b8:	ldp	x3, x2, [x19, #272]
   114bc:	strb	wzr, [x19, #255]
   114c0:	mov	x0, x19
   114c4:	blr	x3
   114c8:	ldr	x0, [x19, #320]
   114cc:	mov	w2, #0x20                  	// #32
   114d0:	mov	x1, #0x1                   	// #1
   114d4:	strb	w2, [x19]
   114d8:	add	x0, x0, x1
   114dc:	str	x0, [x19, #320]
   114e0:	b	11388 <d_print_function_type.isra.0+0x178>
   114e4:	ldp	x3, x2, [x19, #272]
   114e8:	strb	wzr, [x19, #255]
   114ec:	mov	x1, x0
   114f0:	mov	x0, x19
   114f4:	blr	x3
   114f8:	strb	w24, [x19, #264]
   114fc:	mov	w0, #0x2829                	// #10281
   11500:	strh	w0, [x19]
   11504:	ldr	x1, [x19, #320]
   11508:	mov	x2, #0x2                   	// #2
   1150c:	ldr	x21, [x21]
   11510:	add	x1, x1, #0x1
   11514:	str	x2, [x19, #256]
   11518:	mov	x0, x2
   1151c:	str	x1, [x19, #320]
   11520:	cbnz	x21, 112bc <d_print_function_type.isra.0+0xac>
   11524:	b	112e4 <d_print_function_type.isra.0+0xd4>

0000000000011528 <__cxa_demangle>:
   11528:	stp	x29, x30, [sp, #-96]!
   1152c:	mov	x29, sp
   11530:	stp	x21, x22, [sp, #32]
   11534:	mov	x21, x3
   11538:	cbz	x0, 11608 <__cxa_demangle+0xe0>
   1153c:	stp	x19, x20, [sp, #16]
   11540:	cmp	x1, #0x0
   11544:	mov	x19, x1
   11548:	mov	x20, x2
   1154c:	ccmp	x2, #0x0, #0x0, ne  // ne = any
   11550:	b.eq	11604 <__cxa_demangle+0xdc>  // b.none
   11554:	adrp	x1, 0 <d_make_comp>
   11558:	add	x2, sp, #0x40
   1155c:	add	x1, x1, #0x0
   11560:	str	xzr, [sp, #64]
   11564:	stp	xzr, xzr, [sp, #72]
   11568:	str	wzr, [sp, #88]
   1156c:	bl	e528 <d_demangle_callback.constprop.0>
   11570:	cbz	w0, 1165c <__cxa_demangle+0x134>
   11574:	ldr	w0, [sp, #88]
   11578:	str	x23, [sp, #48]
   1157c:	ldr	x22, [sp, #64]
   11580:	cbnz	w0, 115e0 <__cxa_demangle+0xb8>
   11584:	ldr	x23, [sp, #80]
   11588:	cbz	x22, 11680 <__cxa_demangle+0x158>
   1158c:	cbz	x19, 11650 <__cxa_demangle+0x128>
   11590:	mov	x0, x22
   11594:	bl	0 <strlen>
   11598:	ldr	x1, [x20]
   1159c:	cmp	x0, x1
   115a0:	b.cs	11628 <__cxa_demangle+0x100>  // b.hs, b.nlast
   115a4:	add	x2, x0, #0x1
   115a8:	mov	x1, x22
   115ac:	mov	x0, x19
   115b0:	bl	0 <memcpy>
   115b4:	mov	x0, x22
   115b8:	mov	x22, x19
   115bc:	bl	0 <free>
   115c0:	cbz	x21, 11638 <__cxa_demangle+0x110>
   115c4:	ldp	x19, x20, [sp, #16]
   115c8:	ldr	x23, [sp, #48]
   115cc:	str	wzr, [x21]
   115d0:	mov	x0, x22
   115d4:	ldp	x21, x22, [sp, #32]
   115d8:	ldp	x29, x30, [sp], #96
   115dc:	ret
   115e0:	mov	x23, #0x1                   	// #1
   115e4:	cbnz	x22, 1158c <__cxa_demangle+0x64>
   115e8:	cbz	x21, 116a4 <__cxa_demangle+0x17c>
   115ec:	mov	w0, #0xffffffff            	// #-1
   115f0:	mov	x22, #0x0                   	// #0
   115f4:	ldp	x19, x20, [sp, #16]
   115f8:	ldr	x23, [sp, #48]
   115fc:	str	w0, [x21]
   11600:	b	115d0 <__cxa_demangle+0xa8>
   11604:	ldp	x19, x20, [sp, #16]
   11608:	cbz	x21, 1166c <__cxa_demangle+0x144>
   1160c:	mov	w0, #0xfffffffd            	// #-3
   11610:	str	w0, [x21]
   11614:	mov	x22, #0x0                   	// #0
   11618:	mov	x0, x22
   1161c:	ldp	x21, x22, [sp, #32]
   11620:	ldp	x29, x30, [sp], #96
   11624:	ret
   11628:	mov	x0, x19
   1162c:	bl	0 <free>
   11630:	str	x23, [x20]
   11634:	cbnz	x21, 115c4 <__cxa_demangle+0x9c>
   11638:	mov	x0, x22
   1163c:	ldp	x19, x20, [sp, #16]
   11640:	ldp	x21, x22, [sp, #32]
   11644:	ldr	x23, [sp, #48]
   11648:	ldp	x29, x30, [sp], #96
   1164c:	ret
   11650:	cbz	x20, 115c0 <__cxa_demangle+0x98>
   11654:	str	x23, [x20]
   11658:	b	11634 <__cxa_demangle+0x10c>
   1165c:	ldr	x0, [sp, #64]
   11660:	bl	0 <free>
   11664:	cbnz	x21, 11690 <__cxa_demangle+0x168>
   11668:	ldp	x19, x20, [sp, #16]
   1166c:	mov	x22, #0x0                   	// #0
   11670:	mov	x0, x22
   11674:	ldp	x21, x22, [sp, #32]
   11678:	ldp	x29, x30, [sp], #96
   1167c:	ret
   11680:	cbz	x21, 116a4 <__cxa_demangle+0x17c>
   11684:	cmp	x23, #0x1
   11688:	b.eq	115ec <__cxa_demangle+0xc4>  // b.none
   1168c:	ldr	x23, [sp, #48]
   11690:	mov	w0, #0xfffffffe            	// #-2
   11694:	mov	x22, #0x0                   	// #0
   11698:	ldp	x19, x20, [sp, #16]
   1169c:	str	w0, [x21]
   116a0:	b	115d0 <__cxa_demangle+0xa8>
   116a4:	mov	x22, #0x0                   	// #0
   116a8:	ldp	x19, x20, [sp, #16]
   116ac:	ldr	x23, [sp, #48]
   116b0:	b	11670 <__cxa_demangle+0x148>
   116b4:	nop

00000000000116b8 <__gcclibcxx_demangle_callback>:
   116b8:	cmp	x0, #0x0
   116bc:	ccmp	x1, #0x0, #0x4, ne  // ne = any
   116c0:	b.eq	116e4 <__gcclibcxx_demangle_callback+0x2c>  // b.none
   116c4:	stp	x29, x30, [sp, #-16]!
   116c8:	mov	x29, sp
   116cc:	bl	e528 <d_demangle_callback.constprop.0>
   116d0:	cmp	w0, #0x0
   116d4:	ldp	x29, x30, [sp], #16
   116d8:	mov	w0, #0xfffffffe            	// #-2
   116dc:	csel	w0, wzr, w0, ne  // ne = any
   116e0:	ret
   116e4:	mov	w0, #0xfffffffd            	// #-3
   116e8:	ret
