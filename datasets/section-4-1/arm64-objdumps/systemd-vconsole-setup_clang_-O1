
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-vconsole-setup_clang_-O1:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000211658 <_start>:
  211658:	mov	x29, #0x0                   	// #0
  21165c:	mov	x30, #0x0                   	// #0
  211660:	mov	x5, x0
  211664:	ldr	x1, [sp]
  211668:	add	x2, sp, #0x8
  21166c:	mov	x6, sp
  211670:	movz	x0, #0x0, lsl #48
  211674:	movk	x0, #0x0, lsl #32
  211678:	movk	x0, #0x21, lsl #16
  21167c:	movk	x0, #0x17a8
  211680:	movz	x3, #0x0, lsl #48
  211684:	movk	x3, #0x0, lsl #32
  211688:	movk	x3, #0x21, lsl #16
  21168c:	movk	x3, #0x2bd0
  211690:	movz	x4, #0x0, lsl #48
  211694:	movk	x4, #0x0, lsl #32
  211698:	movk	x4, #0x21, lsl #16
  21169c:	movk	x4, #0x2c50
  2116a0:	bl	212ca0 <__libc_start_main@plt>
  2116a4:	bl	212cb0 <abort@plt>

00000000002116a8 <call_weak_fn>:
  2116a8:	adrp	x0, 223000 <_DYNAMIC+0x160>
  2116ac:	ldr	x0, [x0, #112]
  2116b0:	cbz	x0, 2116b8 <call_weak_fn+0x10>
  2116b4:	b	212cc0 <__gmon_start__@plt>
  2116b8:	ret

00000000002116bc <deregister_tm_clones>:
  2116bc:	adrp	x0, 233000 <_DYNAMIC+0x10160>
  2116c0:	add	x0, x0, #0x188
  2116c4:	adrp	x1, 233000 <_DYNAMIC+0x10160>
  2116c8:	add	x1, x1, #0x188
  2116cc:	cmp	x0, x1
  2116d0:	b.eq	211704 <deregister_tm_clones+0x48>  // b.none
  2116d4:	stp	x29, x30, [sp, #-32]!
  2116d8:	mov	x29, sp
  2116dc:	adrp	x0, 200000 <__FRAME_END__-0x1560>
  2116e0:	ldr	x0, [x0, #3344]
  2116e4:	str	x0, [sp, #24]
  2116e8:	mov	x1, x0
  2116ec:	cbz	x1, 2116fc <deregister_tm_clones+0x40>
  2116f0:	adrp	x0, 233000 <_DYNAMIC+0x10160>
  2116f4:	add	x0, x0, #0x188
  2116f8:	blr	x1
  2116fc:	ldp	x29, x30, [sp], #32
  211700:	ret
  211704:	ret

0000000000211708 <register_tm_clones>:
  211708:	adrp	x0, 233000 <_DYNAMIC+0x10160>
  21170c:	add	x0, x0, #0x188
  211710:	adrp	x1, 233000 <_DYNAMIC+0x10160>
  211714:	add	x1, x1, #0x188
  211718:	sub	x0, x0, x1
  21171c:	lsr	x1, x0, #63
  211720:	add	x0, x1, x0, asr #3
  211724:	cmp	xzr, x0, asr #1
  211728:	b.eq	211760 <register_tm_clones+0x58>  // b.none
  21172c:	stp	x29, x30, [sp, #-32]!
  211730:	mov	x29, sp
  211734:	asr	x1, x0, #1
  211738:	adrp	x0, 200000 <__FRAME_END__-0x1560>
  21173c:	ldr	x0, [x0, #3352]
  211740:	str	x0, [sp, #24]
  211744:	mov	x2, x0
  211748:	cbz	x2, 211758 <register_tm_clones+0x50>
  21174c:	adrp	x0, 233000 <_DYNAMIC+0x10160>
  211750:	add	x0, x0, #0x188
  211754:	blr	x2
  211758:	ldp	x29, x30, [sp], #32
  21175c:	ret
  211760:	ret

0000000000211764 <__do_global_dtors_aux>:
  211764:	adrp	x0, 233000 <_DYNAMIC+0x10160>
  211768:	ldrb	w0, [x0, #392]
  21176c:	cbnz	w0, 211790 <__do_global_dtors_aux+0x2c>
  211770:	stp	x29, x30, [sp, #-16]!
  211774:	mov	x29, sp
  211778:	bl	2116bc <deregister_tm_clones>
  21177c:	adrp	x0, 233000 <_DYNAMIC+0x10160>
  211780:	mov	w1, #0x1                   	// #1
  211784:	strb	w1, [x0, #392]
  211788:	ldp	x29, x30, [sp], #16
  21178c:	ret
  211790:	ret

0000000000211794 <frame_dummy>:
  211794:	stp	x29, x30, [sp, #-16]!
  211798:	mov	x29, sp
  21179c:	bl	211708 <register_tm_clones>
  2117a0:	ldp	x29, x30, [sp], #16
  2117a4:	ret

00000000002117a8 <main>:
  2117a8:	sub	sp, sp, #0xd0
  2117ac:	stp	x29, x30, [sp, #144]
  2117b0:	add	x29, sp, #0x90
  2117b4:	mov	w8, #0xffffffff            	// #-1
  2117b8:	stp	x24, x23, [sp, #160]
  2117bc:	stp	x22, x21, [sp, #176]
  2117c0:	stp	x20, x19, [sp, #192]
  2117c4:	mov	x19, x1
  2117c8:	stp	xzr, xzr, [x29, #-16]
  2117cc:	stp	xzr, xzr, [x29, #-32]
  2117d0:	stp	xzr, xzr, [x29, #-48]
  2117d4:	stp	wzr, w8, [x29, #-56]
  2117d8:	bl	212cd0 <log_setup_service@plt>
  2117dc:	mov	w0, #0x12                  	// #18
  2117e0:	bl	212ce0 <umask@plt>
  2117e4:	ldr	x1, [x19, #8]
  2117e8:	cbz	x1, 2117f8 <main+0x50>
  2117ec:	sub	x0, x29, #0x8
  2117f0:	bl	211af8 <verify_source_vc>
  2117f4:	b	211804 <main+0x5c>
  2117f8:	sub	x0, x29, #0x8
  2117fc:	sub	x1, x29, #0x38
  211800:	bl	211cc0 <find_source_vc>
  211804:	mov	w19, w0
  211808:	stur	w0, [x29, #-52]
  21180c:	tbnz	w0, #31, 2119d8 <main+0x230>
  211810:	bl	212cf0 <is_locale_utf8@plt>
  211814:	adrp	x8, 201000 <__FRAME_END__-0x560>
  211818:	adrp	x9, 201000 <__FRAME_END__-0x560>
  21181c:	adrp	x1, 201000 <__FRAME_END__-0x560>
  211820:	adrp	x2, 200000 <__FRAME_END__-0x1560>
  211824:	adrp	x4, 201000 <__FRAME_END__-0x560>
  211828:	adrp	x6, 201000 <__FRAME_END__-0x560>
  21182c:	mov	w20, w0
  211830:	sub	x22, x29, #0x30
  211834:	add	x8, x8, #0xe
  211838:	sub	x23, x29, #0x28
  21183c:	add	x9, x9, #0x442
  211840:	add	x1, x1, #0x42f
  211844:	add	x2, x2, #0xde8
  211848:	add	x4, x4, #0x482
  21184c:	add	x6, x6, #0x21e
  211850:	sub	x3, x29, #0x10
  211854:	sub	x5, x29, #0x18
  211858:	sub	x7, x29, #0x20
  21185c:	mov	x0, xzr
  211860:	stp	x22, xzr, [sp, #24]
  211864:	stp	x23, x8, [sp, #8]
  211868:	str	x9, [sp]
  21186c:	sub	x24, x29, #0x18
  211870:	bl	212d00 <parse_env_file_sentinel@plt>
  211874:	tbz	w0, #31, 2118bc <main+0x114>
  211878:	mov	w21, w0
  21187c:	cmn	w0, #0x2
  211880:	b.eq	2118bc <main+0x114>  // b.none
  211884:	mov	w0, wzr
  211888:	bl	212d10 <log_get_max_level_realm@plt>
  21188c:	cmp	w0, #0x4
  211890:	b.lt	2118bc <main+0x114>  // b.tstop
  211894:	adrp	x2, 201000 <__FRAME_END__-0x560>
  211898:	adrp	x4, 201000 <__FRAME_END__-0x560>
  21189c:	adrp	x5, 201000 <__FRAME_END__-0x560>
  2118a0:	add	x2, x2, #0x150
  2118a4:	add	x4, x4, #0x1b4
  2118a8:	add	x5, x5, #0x7a
  2118ac:	mov	w0, #0x4                   	// #4
  2118b0:	mov	w3, #0x1bb                 	// #443
  2118b4:	mov	w1, w21
  2118b8:	bl	212d20 <log_internal_realm@plt>
  2118bc:	adrp	x8, 200000 <__FRAME_END__-0x1560>
  2118c0:	adrp	x9, 201000 <__FRAME_END__-0x560>
  2118c4:	adrp	x10, 200000 <__FRAME_END__-0x1560>
  2118c8:	adrp	x11, 201000 <__FRAME_END__-0x560>
  2118cc:	adrp	x1, 200000 <__FRAME_END__-0x1560>
  2118d0:	adrp	x3, 201000 <__FRAME_END__-0x560>
  2118d4:	adrp	x5, 200000 <__FRAME_END__-0x1560>
  2118d8:	adrp	x7, 200000 <__FRAME_END__-0x1560>
  2118dc:	add	x8, x8, #0xdef
  2118e0:	add	x9, x9, #0x4b8
  2118e4:	add	x10, x10, #0xef5
  2118e8:	add	x11, x11, #0x324
  2118ec:	add	x1, x1, #0xd20
  2118f0:	add	x3, x3, #0x2c4
  2118f4:	add	x5, x5, #0xf3a
  2118f8:	add	x7, x7, #0xd30
  2118fc:	sub	x2, x29, #0x10
  211900:	sub	x4, x29, #0x18
  211904:	sub	x6, x29, #0x20
  211908:	mov	w0, #0x1                   	// #1
  21190c:	stp	x22, xzr, [sp, #64]
  211910:	stp	x24, x9, [sp, #32]
  211914:	stp	x22, x10, [sp, #16]
  211918:	stp	x23, x8, [sp, #48]
  21191c:	stp	x23, x11, [sp]
  211920:	bl	212d30 <proc_cmdline_get_key_many_internal@plt>
  211924:	tbz	w0, #31, 21196c <main+0x1c4>
  211928:	mov	w21, w0
  21192c:	cmn	w0, #0x2
  211930:	b.eq	21196c <main+0x1c4>  // b.none
  211934:	mov	w0, wzr
  211938:	bl	212d10 <log_get_max_level_realm@plt>
  21193c:	cmp	w0, #0x4
  211940:	b.lt	21196c <main+0x1c4>  // b.tstop
  211944:	adrp	x2, 201000 <__FRAME_END__-0x560>
  211948:	adrp	x4, 201000 <__FRAME_END__-0x560>
  21194c:	adrp	x5, 201000 <__FRAME_END__-0x560>
  211950:	add	x2, x2, #0x150
  211954:	add	x4, x4, #0x1b4
  211958:	add	x5, x5, #0x3b6
  21195c:	mov	w0, #0x4                   	// #4
  211960:	mov	w3, #0x1ca                 	// #458
  211964:	mov	w1, w21
  211968:	bl	212d20 <log_internal_realm@plt>
  21196c:	and	w21, w20, #0x1
  211970:	mov	w0, w21
  211974:	bl	211e4c <toggle_utf8_sysfs>
  211978:	ldur	x23, [x29, #-8]
  21197c:	mov	w1, w19
  211980:	mov	w2, w21
  211984:	mov	x0, x23
  211988:	bl	211efc <toggle_utf8_vc>
  21198c:	ldp	x2, x1, [x29, #-40]
  211990:	ldur	x3, [x29, #-48]
  211994:	mov	x0, x23
  211998:	bl	212130 <font_load_and_wait>
  21199c:	ldp	x2, x1, [x29, #-24]
  2119a0:	mov	w22, w0
  2119a4:	mov	x0, x23
  2119a8:	mov	w3, w21
  2119ac:	bl	2122cc <keyboard_load_and_wait>
  2119b0:	ldur	w1, [x29, #-56]
  2119b4:	mov	w21, w0
  2119b8:	cbz	w1, 211a4c <main+0x2a4>
  2119bc:	cmp	w22, #0x47
  2119c0:	b.eq	2119e0 <main+0x238>  // b.none
  2119c4:	cbnz	w22, 211a14 <main+0x26c>
  2119c8:	and	w2, w20, #0x1
  2119cc:	mov	w0, w19
  2119d0:	bl	212424 <setup_remaining_vcs>
  2119d4:	b	211a4c <main+0x2a4>
  2119d8:	mov	w19, #0x1                   	// #1
  2119dc:	b	211a74 <main+0x2cc>
  2119e0:	mov	w0, wzr
  2119e4:	bl	212d10 <log_get_max_level_realm@plt>
  2119e8:	cmp	w0, #0x5
  2119ec:	b.lt	211a4c <main+0x2a4>  // b.tstop
  2119f0:	adrp	x2, 201000 <__FRAME_END__-0x560>
  2119f4:	adrp	x4, 201000 <__FRAME_END__-0x560>
  2119f8:	adrp	x5, 201000 <__FRAME_END__-0x560>
  2119fc:	add	x2, x2, #0x150
  211a00:	add	x4, x4, #0x1b4
  211a04:	add	x5, x5, #0x2db
  211a08:	mov	w0, #0x5                   	// #5
  211a0c:	mov	w3, #0x1d9                 	// #473
  211a10:	b	211a44 <main+0x29c>
  211a14:	mov	w0, wzr
  211a18:	bl	212d10 <log_get_max_level_realm@plt>
  211a1c:	cmp	w0, #0x4
  211a20:	b.lt	211a4c <main+0x2a4>  // b.tstop
  211a24:	adrp	x2, 201000 <__FRAME_END__-0x560>
  211a28:	adrp	x4, 201000 <__FRAME_END__-0x560>
  211a2c:	adrp	x5, 201000 <__FRAME_END__-0x560>
  211a30:	add	x2, x2, #0x150
  211a34:	add	x4, x4, #0x1b4
  211a38:	add	x5, x5, #0x3d7
  211a3c:	mov	w0, #0x4                   	// #4
  211a40:	mov	w3, #0x1db                 	// #475
  211a44:	mov	w1, wzr
  211a48:	bl	212d20 <log_internal_realm@plt>
  211a4c:	cmp	w22, #0x47
  211a50:	b.eq	211a58 <main+0x2b0>  // b.none
  211a54:	cbnz	w22, 211a60 <main+0x2b8>
  211a58:	mov	w8, #0x1                   	// #1
  211a5c:	b	211a64 <main+0x2bc>
  211a60:	mov	w8, wzr
  211a64:	cmp	w21, #0x0
  211a68:	cset	w9, ne  // ne = any
  211a6c:	eor	w8, w8, #0x1
  211a70:	orr	w19, w9, w8
  211a74:	sub	x0, x29, #0x34
  211a78:	bl	211ae0 <closep>
  211a7c:	sub	x0, x29, #0x30
  211a80:	bl	211ac8 <freep>
  211a84:	sub	x0, x29, #0x28
  211a88:	bl	211ac8 <freep>
  211a8c:	sub	x0, x29, #0x20
  211a90:	bl	211ac8 <freep>
  211a94:	sub	x0, x29, #0x18
  211a98:	bl	211ac8 <freep>
  211a9c:	sub	x0, x29, #0x10
  211aa0:	bl	211ac8 <freep>
  211aa4:	sub	x0, x29, #0x8
  211aa8:	bl	211ac8 <freep>
  211aac:	mov	w0, w19
  211ab0:	ldp	x20, x19, [sp, #192]
  211ab4:	ldp	x22, x21, [sp, #176]
  211ab8:	ldp	x24, x23, [sp, #160]
  211abc:	ldp	x29, x30, [sp, #144]
  211ac0:	add	sp, sp, #0xd0
  211ac4:	ret

0000000000211ac8 <freep>:
  211ac8:	stp	x29, x30, [sp, #-16]!
  211acc:	ldr	x0, [x0]
  211ad0:	mov	x29, sp
  211ad4:	bl	212d40 <free@plt>
  211ad8:	ldp	x29, x30, [sp], #16
  211adc:	ret

0000000000211ae0 <closep>:
  211ae0:	stp	x29, x30, [sp, #-16]!
  211ae4:	ldr	w0, [x0]
  211ae8:	mov	x29, sp
  211aec:	bl	212d50 <safe_close@plt>
  211af0:	ldp	x29, x30, [sp], #16
  211af4:	ret

0000000000211af8 <verify_source_vc>:
  211af8:	sub	sp, sp, #0x40
  211afc:	stp	x20, x19, [sp, #48]
  211b00:	mov	x19, x1
  211b04:	mov	w1, #0x102                 	// #258
  211b08:	stp	x29, x30, [sp, #16]
  211b0c:	stp	x22, x21, [sp, #32]
  211b10:	add	x29, sp, #0x10
  211b14:	mov	x21, x0
  211b18:	mov	w8, #0xffffffff            	// #-1
  211b1c:	movk	w1, #0x8, lsl #16
  211b20:	mov	x0, x19
  211b24:	stur	w8, [x29, #-4]
  211b28:	bl	212d60 <open_terminal@plt>
  211b2c:	mov	w20, w0
  211b30:	stur	w0, [x29, #-4]
  211b34:	tbnz	w0, #31, 211b78 <verify_source_vc+0x80>
  211b38:	mov	w0, w20
  211b3c:	bl	212954 <verify_vc_device>
  211b40:	tbnz	w0, #31, 211bb0 <verify_source_vc+0xb8>
  211b44:	mov	w0, w20
  211b48:	bl	212990 <verify_vc_allocation_byfd>
  211b4c:	tbnz	w0, #31, 211bf4 <verify_source_vc+0xfc>
  211b50:	mov	w0, w20
  211b54:	bl	2129d8 <verify_vc_kbmode>
  211b58:	tbnz	w0, #31, 211c2c <verify_source_vc+0x134>
  211b5c:	mov	x0, x19
  211b60:	bl	212d70 <strdup@plt>
  211b64:	cbz	x0, 211ca0 <verify_source_vc+0x1a8>
  211b68:	mov	w8, #0xffffffff            	// #-1
  211b6c:	str	x0, [x21]
  211b70:	stur	w8, [x29, #-4]
  211b74:	b	211c80 <verify_source_vc+0x188>
  211b78:	mov	w0, wzr
  211b7c:	bl	212d10 <log_get_max_level_realm@plt>
  211b80:	cmp	w0, #0x3
  211b84:	b.lt	211be8 <verify_source_vc+0xf0>  // b.tstop
  211b88:	adrp	x2, 201000 <__FRAME_END__-0x560>
  211b8c:	adrp	x4, 200000 <__FRAME_END__-0x1560>
  211b90:	adrp	x5, 200000 <__FRAME_END__-0x1560>
  211b94:	add	x2, x2, #0x150
  211b98:	add	x4, x4, #0xe04
  211b9c:	add	x5, x5, #0xd42
  211ba0:	mov	w0, #0x3                   	// #3
  211ba4:	mov	w3, #0x187                 	// #391
  211ba8:	mov	w1, w20
  211bac:	b	211c64 <verify_source_vc+0x16c>
  211bb0:	mov	w22, w0
  211bb4:	mov	w0, wzr
  211bb8:	bl	212d10 <log_get_max_level_realm@plt>
  211bbc:	cmp	w0, #0x3
  211bc0:	b.lt	211c74 <verify_source_vc+0x17c>  // b.tstop
  211bc4:	adrp	x2, 201000 <__FRAME_END__-0x560>
  211bc8:	adrp	x4, 200000 <__FRAME_END__-0x1560>
  211bcc:	adrp	x5, 201000 <__FRAME_END__-0x560>
  211bd0:	add	x2, x2, #0x150
  211bd4:	add	x4, x4, #0xe04
  211bd8:	add	x5, x5, #0x339
  211bdc:	mov	w0, #0x3                   	// #3
  211be0:	mov	w3, #0x18b                 	// #395
  211be4:	b	211c60 <verify_source_vc+0x168>
  211be8:	mov	w8, wzr
  211bec:	neg	w9, w20
  211bf0:	b	211c7c <verify_source_vc+0x184>
  211bf4:	mov	w22, w0
  211bf8:	mov	w0, wzr
  211bfc:	bl	212d10 <log_get_max_level_realm@plt>
  211c00:	cmp	w0, #0x3
  211c04:	b.lt	211c74 <verify_source_vc+0x17c>  // b.tstop
  211c08:	adrp	x2, 201000 <__FRAME_END__-0x560>
  211c0c:	adrp	x4, 200000 <__FRAME_END__-0x1560>
  211c10:	adrp	x5, 201000 <__FRAME_END__-0x560>
  211c14:	add	x2, x2, #0x150
  211c18:	add	x4, x4, #0xe04
  211c1c:	add	x5, x5, #0x490
  211c20:	mov	w0, #0x3                   	// #3
  211c24:	mov	w3, #0x18f                 	// #399
  211c28:	b	211c60 <verify_source_vc+0x168>
  211c2c:	mov	w22, w0
  211c30:	mov	w0, wzr
  211c34:	bl	212d10 <log_get_max_level_realm@plt>
  211c38:	cmp	w0, #0x3
  211c3c:	b.lt	211c74 <verify_source_vc+0x17c>  // b.tstop
  211c40:	adrp	x2, 201000 <__FRAME_END__-0x560>
  211c44:	adrp	x4, 200000 <__FRAME_END__-0x1560>
  211c48:	adrp	x5, 201000 <__FRAME_END__-0x560>
  211c4c:	add	x2, x2, #0x150
  211c50:	add	x4, x4, #0xe04
  211c54:	add	x5, x5, #0x1b9
  211c58:	mov	w0, #0x3                   	// #3
  211c5c:	mov	w3, #0x193                 	// #403
  211c60:	mov	w1, w22
  211c64:	mov	x6, x19
  211c68:	bl	212d20 <log_internal_realm@plt>
  211c6c:	mov	w20, w0
  211c70:	b	211c80 <verify_source_vc+0x188>
  211c74:	mov	w8, wzr
  211c78:	neg	w9, w22
  211c7c:	sub	w20, w8, w9, uxtb
  211c80:	sub	x0, x29, #0x4
  211c84:	bl	211ae0 <closep>
  211c88:	mov	w0, w20
  211c8c:	ldp	x20, x19, [sp, #48]
  211c90:	ldp	x22, x21, [sp, #32]
  211c94:	ldp	x29, x30, [sp, #16]
  211c98:	add	sp, sp, #0x40
  211c9c:	ret
  211ca0:	adrp	x1, 201000 <__FRAME_END__-0x560>
  211ca4:	adrp	x3, 200000 <__FRAME_END__-0x1560>
  211ca8:	add	x1, x1, #0x150
  211cac:	add	x3, x3, #0xe04
  211cb0:	mov	w2, #0x197                 	// #407
  211cb4:	bl	212d80 <log_oom_internal@plt>
  211cb8:	mov	w20, w0
  211cbc:	b	211c80 <verify_source_vc+0x188>

0000000000211cc0 <find_source_vc>:
  211cc0:	sub	sp, sp, #0x70
  211cc4:	stp	x29, x30, [sp, #16]
  211cc8:	stp	x22, x21, [sp, #80]
  211ccc:	stp	x20, x19, [sp, #96]
  211cd0:	add	x29, sp, #0x10
  211cd4:	mov	x20, x1
  211cd8:	mov	x21, x0
  211cdc:	mov	w0, #0x1                   	// #1
  211ce0:	mov	w1, #0xb                   	// #11
  211ce4:	str	x27, [sp, #32]
  211ce8:	stp	x26, x25, [sp, #48]
  211cec:	stp	x24, x23, [sp, #64]
  211cf0:	str	xzr, [x29, #24]
  211cf4:	bl	212aac <malloc_multiply>
  211cf8:	str	x0, [x29, #24]
  211cfc:	cbz	x0, 211df0 <find_source_vc+0x130>
  211d00:	adrp	x24, 201000 <__FRAME_END__-0x560>
  211d04:	mov	w19, wzr
  211d08:	mov	w23, #0x1                   	// #1
  211d0c:	mov	w26, #0xffffffff            	// #-1
  211d10:	add	x24, x24, #0x416
  211d14:	mov	w0, w23
  211d18:	stur	w26, [x29, #-4]
  211d1c:	bl	212a2c <verify_vc_allocation>
  211d20:	tbnz	w0, #31, 211d80 <find_source_vc+0xc0>
  211d24:	ldr	x25, [x29, #24]
  211d28:	mov	x1, x24
  211d2c:	mov	w2, w23
  211d30:	mov	x0, x25
  211d34:	bl	212d90 <sprintf@plt>
  211d38:	mov	w1, #0x102                 	// #258
  211d3c:	movk	w1, #0x8, lsl #16
  211d40:	mov	x0, x25
  211d44:	bl	212d60 <open_terminal@plt>
  211d48:	mov	w25, w0
  211d4c:	stur	w0, [x29, #-4]
  211d50:	tbnz	w0, #31, 211d8c <find_source_vc+0xcc>
  211d54:	mov	w0, w25
  211d58:	bl	2129d8 <verify_vc_kbmode>
  211d5c:	tbnz	w0, #31, 211d80 <find_source_vc+0xc0>
  211d60:	str	w23, [x20]
  211d64:	ldr	x8, [x29, #24]
  211d68:	mov	w27, wzr
  211d6c:	mov	w22, w25
  211d70:	str	xzr, [x29, #24]
  211d74:	str	x8, [x21]
  211d78:	stur	w26, [x29, #-4]
  211d7c:	b	211d98 <find_source_vc+0xd8>
  211d80:	cmp	w19, #0x0
  211d84:	csneg	w19, w19, w0, ne  // ne = any
  211d88:	b	211d94 <find_source_vc+0xd4>
  211d8c:	cmp	w19, #0x0
  211d90:	csneg	w19, w19, w25, ne  // ne = any
  211d94:	mov	w27, #0x1                   	// #1
  211d98:	sub	x0, x29, #0x4
  211d9c:	bl	211ae0 <closep>
  211da0:	tbz	w27, #0, 211e20 <find_source_vc+0x160>
  211da4:	add	w23, w23, #0x1
  211da8:	cmp	w23, #0x40
  211dac:	b.ne	211d14 <find_source_vc+0x54>  // b.any
  211db0:	mov	w0, wzr
  211db4:	bl	212d10 <log_get_max_level_realm@plt>
  211db8:	cmp	w0, #0x3
  211dbc:	b.lt	211e10 <find_source_vc+0x150>  // b.tstop
  211dc0:	adrp	x2, 201000 <__FRAME_END__-0x560>
  211dc4:	adrp	x4, 201000 <__FRAME_END__-0x560>
  211dc8:	adrp	x5, 201000 <__FRAME_END__-0x560>
  211dcc:	add	x2, x2, #0x150
  211dd0:	add	x4, x4, #0x44e
  211dd4:	add	x5, x5, #0x1a
  211dd8:	mov	w0, #0x3                   	// #3
  211ddc:	mov	w3, #0x17d                 	// #381
  211de0:	mov	w1, w19
  211de4:	bl	212d20 <log_internal_realm@plt>
  211de8:	mov	w22, w0
  211dec:	b	211e20 <find_source_vc+0x160>
  211df0:	adrp	x1, 201000 <__FRAME_END__-0x560>
  211df4:	adrp	x3, 201000 <__FRAME_END__-0x560>
  211df8:	add	x1, x1, #0x150
  211dfc:	add	x3, x3, #0x44e
  211e00:	mov	w2, #0x15d                 	// #349
  211e04:	bl	212d80 <log_oom_internal@plt>
  211e08:	mov	w22, w0
  211e0c:	b	211e20 <find_source_vc+0x160>
  211e10:	cmp	w19, #0x0
  211e14:	mov	w8, wzr
  211e18:	cneg	w9, w19, mi  // mi = first
  211e1c:	sub	w22, w8, w9, uxtb
  211e20:	add	x0, x29, #0x18
  211e24:	bl	211ac8 <freep>
  211e28:	mov	w0, w22
  211e2c:	ldp	x20, x19, [sp, #96]
  211e30:	ldp	x22, x21, [sp, #80]
  211e34:	ldp	x24, x23, [sp, #64]
  211e38:	ldp	x26, x25, [sp, #48]
  211e3c:	ldr	x27, [sp, #32]
  211e40:	ldp	x29, x30, [sp, #16]
  211e44:	add	sp, sp, #0x70
  211e48:	ret

0000000000211e4c <toggle_utf8_sysfs>:
  211e4c:	stp	x29, x30, [sp, #-32]!
  211e50:	stp	x20, x19, [sp, #16]
  211e54:	mov	w19, w0
  211e58:	and	w0, w0, #0x1
  211e5c:	mov	x29, sp
  211e60:	bl	212b24 <one_zero>
  211e64:	bl	212afc <write_string_file>
  211e68:	mov	w20, w0
  211e6c:	mov	w0, wzr
  211e70:	bl	212d10 <log_get_max_level_realm@plt>
  211e74:	tbnz	w20, #31, 211eb4 <toggle_utf8_sysfs+0x68>
  211e78:	cmp	w0, #0x7
  211e7c:	b.lt	211ef0 <toggle_utf8_sysfs+0xa4>  // b.tstop
  211e80:	and	w0, w19, #0x1
  211e84:	bl	212b40 <enable_disable>
  211e88:	adrp	x2, 201000 <__FRAME_END__-0x560>
  211e8c:	adrp	x4, 201000 <__FRAME_END__-0x560>
  211e90:	adrp	x5, 201000 <__FRAME_END__-0x560>
  211e94:	mov	x6, x0
  211e98:	add	x2, x2, #0x150
  211e9c:	add	x4, x4, #0x3d
  211ea0:	add	x5, x5, #0xa0
  211ea4:	mov	w0, #0x7                   	// #7
  211ea8:	mov	w3, #0x7b                  	// #123
  211eac:	mov	w1, wzr
  211eb0:	b	211eec <toggle_utf8_sysfs+0xa0>
  211eb4:	cmp	w0, #0x4
  211eb8:	b.lt	211ef0 <toggle_utf8_sysfs+0xa4>  // b.tstop
  211ebc:	and	w0, w19, #0x1
  211ec0:	bl	212b40 <enable_disable>
  211ec4:	adrp	x2, 201000 <__FRAME_END__-0x560>
  211ec8:	adrp	x4, 201000 <__FRAME_END__-0x560>
  211ecc:	adrp	x5, 201000 <__FRAME_END__-0x560>
  211ed0:	mov	x6, x0
  211ed4:	add	x2, x2, #0x150
  211ed8:	add	x4, x4, #0x3d
  211edc:	add	x5, x5, #0x4ca
  211ee0:	mov	w0, #0x4                   	// #4
  211ee4:	mov	w3, #0x79                  	// #121
  211ee8:	mov	w1, w20
  211eec:	bl	212d20 <log_internal_realm@plt>
  211ef0:	ldp	x20, x19, [sp, #16]
  211ef4:	ldp	x29, x30, [sp], #32
  211ef8:	ret

0000000000211efc <toggle_utf8_vc>:
  211efc:	sub	sp, sp, #0x70
  211f00:	movi	v0.2d, #0x0
  211f04:	stp	x29, x30, [sp, #64]
  211f08:	stp	x22, x21, [sp, #80]
  211f0c:	stp	x20, x19, [sp, #96]
  211f10:	add	x29, sp, #0x40
  211f14:	stur	q0, [sp, #44]
  211f18:	stp	q0, q0, [sp, #16]
  211f1c:	str	q0, [sp]
  211f20:	cbz	x0, 2120ec <toggle_utf8_vc+0x1f0>
  211f24:	mov	w21, w1
  211f28:	tbnz	w1, #31, 21210c <toggle_utf8_vc+0x210>
  211f2c:	tst	w2, #0x1
  211f30:	mov	w8, #0x3                   	// #3
  211f34:	mov	w20, w2
  211f38:	mov	x19, x0
  211f3c:	csinc	w2, w8, wzr, ne  // ne = any
  211f40:	mov	w1, #0x4b45                	// #19269
  211f44:	mov	w0, w21
  211f48:	bl	212da0 <ioctl@plt>
  211f4c:	tbnz	w0, #31, 212000 <toggle_utf8_vc+0x104>
  211f50:	adrp	x8, 201000 <__FRAME_END__-0x560>
  211f54:	adrp	x9, 201000 <__FRAME_END__-0x560>
  211f58:	add	x8, x8, #0x4f
  211f5c:	add	x9, x9, #0x428
  211f60:	tst	w20, #0x1
  211f64:	csel	x1, x9, x8, ne  // ne = any
  211f68:	mov	w2, #0x3                   	// #3
  211f6c:	mov	w0, w21
  211f70:	mov	w3, wzr
  211f74:	bl	212db0 <loop_write@plt>
  211f78:	tbnz	w0, #31, 212048 <toggle_utf8_vc+0x14c>
  211f7c:	mov	x1, sp
  211f80:	mov	w0, w21
  211f84:	bl	212dc0 <tcgetattr@plt>
  211f88:	tbnz	w0, #31, 211fb4 <toggle_utf8_vc+0xb8>
  211f8c:	ldr	w8, [sp]
  211f90:	tst	w20, #0x1
  211f94:	mov	x2, sp
  211f98:	mov	w0, w21
  211f9c:	orr	w9, w8, #0x4000
  211fa0:	and	w8, w8, #0xffffbfff
  211fa4:	csel	w8, w9, w8, ne  // ne = any
  211fa8:	mov	w1, wzr
  211fac:	str	w8, [sp]
  211fb0:	bl	212dd0 <tcsetattr@plt>
  211fb4:	mov	w22, w0
  211fb8:	mov	w0, wzr
  211fbc:	bl	212d10 <log_get_max_level_realm@plt>
  211fc0:	tbnz	w22, #31, 212090 <toggle_utf8_vc+0x194>
  211fc4:	cmp	w0, #0x7
  211fc8:	b.lt	2120d8 <toggle_utf8_vc+0x1dc>  // b.tstop
  211fcc:	and	w0, w20, #0x1
  211fd0:	bl	212b40 <enable_disable>
  211fd4:	adrp	x2, 201000 <__FRAME_END__-0x560>
  211fd8:	adrp	x4, 200000 <__FRAME_END__-0x1560>
  211fdc:	adrp	x5, 200000 <__FRAME_END__-0x1560>
  211fe0:	mov	x6, x0
  211fe4:	add	x2, x2, #0x150
  211fe8:	add	x4, x4, #0xe7d
  211fec:	add	x5, x5, #0xeda
  211ff0:	mov	w0, #0x7                   	// #7
  211ff4:	mov	w3, #0x70                  	// #112
  211ff8:	mov	w1, wzr
  211ffc:	b	2120d0 <toggle_utf8_vc+0x1d4>
  212000:	mov	w0, wzr
  212004:	bl	212d10 <log_get_max_level_realm@plt>
  212008:	cmp	w0, #0x4
  21200c:	b.lt	2120d8 <toggle_utf8_vc+0x1dc>  // b.tstop
  212010:	bl	212de0 <__errno_location@plt>
  212014:	ldr	w21, [x0]
  212018:	and	w0, w20, #0x1
  21201c:	bl	212b40 <enable_disable>
  212020:	adrp	x2, 201000 <__FRAME_END__-0x560>
  212024:	adrp	x4, 200000 <__FRAME_END__-0x1560>
  212028:	adrp	x5, 201000 <__FRAME_END__-0x560>
  21202c:	mov	x6, x0
  212030:	add	x2, x2, #0x150
  212034:	add	x4, x4, #0xe7d
  212038:	add	x5, x5, #0x45d
  21203c:	mov	w0, #0x4                   	// #4
  212040:	mov	w3, #0x62                  	// #98
  212044:	b	2120cc <toggle_utf8_vc+0x1d0>
  212048:	mov	w22, w0
  21204c:	mov	w0, wzr
  212050:	bl	212d10 <log_get_max_level_realm@plt>
  212054:	cmp	w0, #0x4
  212058:	b.lt	2120d8 <toggle_utf8_vc+0x1dc>  // b.tstop
  21205c:	and	w0, w20, #0x1
  212060:	bl	212b40 <enable_disable>
  212064:	adrp	x2, 201000 <__FRAME_END__-0x560>
  212068:	adrp	x4, 200000 <__FRAME_END__-0x1560>
  21206c:	adrp	x5, 201000 <__FRAME_END__-0x560>
  212070:	mov	x6, x0
  212074:	add	x2, x2, #0x150
  212078:	add	x4, x4, #0xe7d
  21207c:	add	x5, x5, #0x1f1
  212080:	mov	w0, #0x4                   	// #4
  212084:	mov	w3, #0x66                  	// #102
  212088:	mov	w1, w22
  21208c:	b	2120d0 <toggle_utf8_vc+0x1d4>
  212090:	cmp	w0, #0x4
  212094:	b.lt	2120d8 <toggle_utf8_vc+0x1dc>  // b.tstop
  212098:	bl	212de0 <__errno_location@plt>
  21209c:	ldr	w21, [x0]
  2120a0:	and	w0, w20, #0x1
  2120a4:	bl	212b40 <enable_disable>
  2120a8:	adrp	x2, 201000 <__FRAME_END__-0x560>
  2120ac:	adrp	x4, 200000 <__FRAME_END__-0x1560>
  2120b0:	adrp	x5, 201000 <__FRAME_END__-0x560>
  2120b4:	mov	x6, x0
  2120b8:	add	x2, x2, #0x150
  2120bc:	add	x4, x4, #0xe7d
  2120c0:	add	x5, x5, #0x38d
  2120c4:	mov	w0, #0x4                   	// #4
  2120c8:	mov	w3, #0x6e                  	// #110
  2120cc:	mov	w1, w21
  2120d0:	mov	x7, x19
  2120d4:	bl	212d20 <log_internal_realm@plt>
  2120d8:	ldp	x20, x19, [sp, #96]
  2120dc:	ldp	x22, x21, [sp, #80]
  2120e0:	ldp	x29, x30, [sp, #64]
  2120e4:	add	sp, sp, #0x70
  2120e8:	ret
  2120ec:	adrp	x1, 200000 <__FRAME_END__-0x1560>
  2120f0:	adrp	x2, 201000 <__FRAME_END__-0x560>
  2120f4:	adrp	x4, 201000 <__FRAME_END__-0x560>
  2120f8:	add	x1, x1, #0xf0c
  2120fc:	add	x2, x2, #0x150
  212100:	add	x4, x4, #0x360
  212104:	mov	w3, #0x5d                  	// #93
  212108:	bl	212df0 <log_assert_failed_realm@plt>
  21210c:	adrp	x1, 201000 <__FRAME_END__-0x560>
  212110:	adrp	x2, 201000 <__FRAME_END__-0x560>
  212114:	adrp	x4, 201000 <__FRAME_END__-0x560>
  212118:	add	x1, x1, #0xb5
  21211c:	add	x2, x2, #0x150
  212120:	add	x4, x4, #0x360
  212124:	mov	w3, #0x5e                  	// #94
  212128:	mov	w0, wzr
  21212c:	bl	212df0 <log_assert_failed_realm@plt>

0000000000212130 <font_load_and_wait>:
  212130:	sub	sp, sp, #0x80
  212134:	stp	x22, x21, [sp, #96]
  212138:	mov	x22, x0
  21213c:	mov	x0, x1
  212140:	stp	x29, x30, [sp, #80]
  212144:	stp	x20, x19, [sp, #112]
  212148:	add	x29, sp, #0x50
  21214c:	mov	x20, x3
  212150:	mov	x21, x2
  212154:	mov	x19, x1
  212158:	bl	212b5c <isempty>
  21215c:	tbz	w0, #0, 212180 <font_load_and_wait+0x50>
  212160:	mov	x0, x21
  212164:	bl	212b5c <isempty>
  212168:	tbz	w0, #0, 212180 <font_load_and_wait+0x50>
  21216c:	mov	x0, x20
  212170:	bl	212b5c <isempty>
  212174:	tbz	w0, #0, 212180 <font_load_and_wait+0x50>
  212178:	mov	w0, wzr
  21217c:	b	212244 <font_load_and_wait+0x114>
  212180:	adrp	x8, 200000 <__FRAME_END__-0x1560>
  212184:	adrp	x9, 200000 <__FRAME_END__-0x1560>
  212188:	add	x8, x8, #0xe8c
  21218c:	add	x9, x9, #0xef2
  212190:	mov	x0, x21
  212194:	stp	x8, x9, [sp, #8]
  212198:	str	x22, [sp, #24]
  21219c:	bl	212b5c <isempty>
  2121a0:	tbz	w0, #0, 2121ac <font_load_and_wait+0x7c>
  2121a4:	mov	w21, #0x3                   	// #3
  2121a8:	b	2121bc <font_load_and_wait+0x8c>
  2121ac:	adrp	x8, 201000 <__FRAME_END__-0x560>
  2121b0:	add	x8, x8, #0x4ec
  2121b4:	stp	x8, x21, [sp, #32]
  2121b8:	mov	w21, #0x5                   	// #5
  2121bc:	mov	x0, x20
  2121c0:	bl	212b5c <isempty>
  2121c4:	tbnz	w0, #0, 2121e4 <font_load_and_wait+0xb4>
  2121c8:	adrp	x9, 201000 <__FRAME_END__-0x560>
  2121cc:	add	x9, x9, #0x44b
  2121d0:	add	x10, sp, #0x8
  2121d4:	add	w8, w21, #0x1
  2121d8:	str	x9, [x10, w21, uxtw #3]
  2121dc:	add	w21, w21, #0x2
  2121e0:	str	x20, [x10, w8, uxtw #3]
  2121e4:	mov	x0, x19
  2121e8:	bl	212b5c <isempty>
  2121ec:	tbnz	w0, #0, 212200 <font_load_and_wait+0xd0>
  2121f0:	add	w8, w21, #0x1
  2121f4:	add	x9, sp, #0x8
  2121f8:	str	x19, [x9, w21, uxtw #3]
  2121fc:	mov	w21, w8
  212200:	add	x8, sp, #0x8
  212204:	mov	w0, wzr
  212208:	str	xzr, [x8, w21, uxtw #3]
  21220c:	bl	212d10 <log_get_max_level_realm@plt>
  212210:	cmp	w0, #0x7
  212214:	b.ge	212258 <font_load_and_wait+0x128>  // b.tcont
  212218:	adrp	x0, 201000 <__FRAME_END__-0x560>
  21221c:	add	x0, x0, #0x16e
  212220:	mov	x1, sp
  212224:	bl	212bac <safe_fork>
  212228:	tbnz	w0, #31, 212244 <font_load_and_wait+0x114>
  21222c:	cbz	w0, 2122b8 <font_load_and_wait+0x188>
  212230:	ldr	w1, [sp]
  212234:	adrp	x0, 200000 <__FRAME_END__-0x1560>
  212238:	add	x0, x0, #0xe8c
  21223c:	mov	w2, #0x3                   	// #3
  212240:	bl	212e00 <wait_for_terminate_and_check@plt>
  212244:	ldp	x20, x19, [sp, #112]
  212248:	ldp	x22, x21, [sp, #96]
  21224c:	ldp	x29, x30, [sp, #80]
  212250:	add	sp, sp, #0x80
  212254:	ret
  212258:	add	x0, sp, #0x8
  21225c:	bl	212b78 <strv_join>
  212260:	mov	x19, x0
  212264:	str	x0, [sp]
  212268:	mov	w0, wzr
  21226c:	bl	212d10 <log_get_max_level_realm@plt>
  212270:	cmp	w0, #0x7
  212274:	b.lt	2122ac <font_load_and_wait+0x17c>  // b.tstop
  212278:	mov	x0, x19
  21227c:	bl	212b98 <strnull>
  212280:	adrp	x2, 201000 <__FRAME_END__-0x560>
  212284:	adrp	x4, 201000 <__FRAME_END__-0x560>
  212288:	adrp	x5, 201000 <__FRAME_END__-0x560>
  21228c:	mov	x6, x0
  212290:	add	x2, x2, #0x150
  212294:	add	x4, x4, #0x311
  212298:	add	x5, x5, #0x1a2
  21229c:	mov	w0, #0x7                   	// #7
  2122a0:	mov	w3, #0xc3                  	// #195
  2122a4:	mov	w1, wzr
  2122a8:	bl	212d20 <log_internal_realm@plt>
  2122ac:	mov	x0, sp
  2122b0:	bl	211ac8 <freep>
  2122b4:	b	212218 <font_load_and_wait+0xe8>
  2122b8:	ldr	x0, [sp, #8]
  2122bc:	add	x1, sp, #0x8
  2122c0:	bl	212e10 <execv@plt>
  2122c4:	mov	w0, #0x1                   	// #1
  2122c8:	bl	212e20 <_exit@plt>

00000000002122cc <keyboard_load_and_wait>:
  2122cc:	sub	sp, sp, #0x80
  2122d0:	stp	x22, x21, [sp, #96]
  2122d4:	mov	x22, x0
  2122d8:	mov	x0, x1
  2122dc:	stp	x29, x30, [sp, #80]
  2122e0:	stp	x20, x19, [sp, #112]
  2122e4:	add	x29, sp, #0x50
  2122e8:	mov	w21, w3
  2122ec:	mov	x19, x2
  2122f0:	mov	x20, x1
  2122f4:	bl	212b5c <isempty>
  2122f8:	tbz	w0, #0, 212304 <keyboard_load_and_wait+0x38>
  2122fc:	mov	w0, wzr
  212300:	b	21239c <keyboard_load_and_wait+0xd0>
  212304:	adrp	x8, 200000 <__FRAME_END__-0x1560>
  212308:	adrp	x9, 201000 <__FRAME_END__-0x560>
  21230c:	adrp	x10, 200000 <__FRAME_END__-0x1560>
  212310:	add	x8, x8, #0xf11
  212314:	add	x9, x9, #0x42c
  212318:	add	x10, x10, #0xef2
  21231c:	stp	x8, x9, [sp, #16]
  212320:	stp	x10, x22, [sp, #32]
  212324:	tbz	w21, #0, 21233c <keyboard_load_and_wait+0x70>
  212328:	adrp	x8, 201000 <__FRAME_END__-0x560>
  21232c:	add	x8, x8, #0x44b
  212330:	mov	w9, #0x5                   	// #5
  212334:	str	x8, [sp, #48]
  212338:	b	212340 <keyboard_load_and_wait+0x74>
  21233c:	mov	w9, #0x4                   	// #4
  212340:	add	w8, w9, #0x1
  212344:	add	x10, sp, #0x10
  212348:	str	x20, [x10, w9, uxtw #3]
  21234c:	cbz	x19, 21235c <keyboard_load_and_wait+0x90>
  212350:	orr	w9, w9, #0x2
  212354:	str	x19, [x10, w8, uxtw #3]
  212358:	mov	w8, w9
  21235c:	mov	w0, wzr
  212360:	str	xzr, [x10, w8, uxtw #3]
  212364:	bl	212d10 <log_get_max_level_realm@plt>
  212368:	cmp	w0, #0x7
  21236c:	b.ge	2123b0 <keyboard_load_and_wait+0xe4>  // b.tcont
  212370:	adrp	x0, 201000 <__FRAME_END__-0x560>
  212374:	add	x0, x0, #0x4ef
  212378:	add	x1, sp, #0x8
  21237c:	bl	212bac <safe_fork>
  212380:	tbnz	w0, #31, 21239c <keyboard_load_and_wait+0xd0>
  212384:	cbz	w0, 212410 <keyboard_load_and_wait+0x144>
  212388:	ldr	w1, [sp, #8]
  21238c:	adrp	x0, 200000 <__FRAME_END__-0x1560>
  212390:	add	x0, x0, #0xf11
  212394:	mov	w2, #0x3                   	// #3
  212398:	bl	212e00 <wait_for_terminate_and_check@plt>
  21239c:	ldp	x20, x19, [sp, #112]
  2123a0:	ldp	x22, x21, [sp, #96]
  2123a4:	ldp	x29, x30, [sp, #80]
  2123a8:	add	sp, sp, #0x80
  2123ac:	ret
  2123b0:	add	x0, sp, #0x10
  2123b4:	bl	212b78 <strv_join>
  2123b8:	mov	x19, x0
  2123bc:	str	x0, [sp, #8]
  2123c0:	mov	w0, wzr
  2123c4:	bl	212d10 <log_get_max_level_realm@plt>
  2123c8:	cmp	w0, #0x7
  2123cc:	b.lt	212404 <keyboard_load_and_wait+0x138>  // b.tstop
  2123d0:	mov	x0, x19
  2123d4:	bl	212b98 <strnull>
  2123d8:	adrp	x2, 201000 <__FRAME_END__-0x560>
  2123dc:	adrp	x4, 200000 <__FRAME_END__-0x1560>
  2123e0:	adrp	x5, 201000 <__FRAME_END__-0x560>
  2123e4:	mov	x6, x0
  2123e8:	add	x2, x2, #0x150
  2123ec:	add	x4, x4, #0xf23
  2123f0:	add	x5, x5, #0x1a2
  2123f4:	mov	w0, #0x7                   	// #7
  2123f8:	mov	w3, #0x98                  	// #152
  2123fc:	mov	w1, wzr
  212400:	bl	212d20 <log_internal_realm@plt>
  212404:	add	x0, sp, #0x8
  212408:	bl	211ac8 <freep>
  21240c:	b	212370 <keyboard_load_and_wait+0xa4>
  212410:	ldr	x0, [sp, #16]
  212414:	add	x1, sp, #0x10
  212418:	bl	212e10 <execv@plt>
  21241c:	mov	w0, #0x1                   	// #1
  212420:	bl	212e20 <_exit@plt>

0000000000212424 <setup_remaining_vcs>:
  212424:	sub	sp, sp, #0xd0
  212428:	adrp	x8, 201000 <__FRAME_END__-0x560>
  21242c:	add	x8, x8, #0x500
  212430:	ldp	q0, q1, [x8]
  212434:	stp	x29, x30, [sp, #112]
  212438:	stp	x20, x19, [sp, #192]
  21243c:	add	x29, sp, #0x70
  212440:	mov	w19, w1
  212444:	mov	w20, w0
  212448:	mov	w0, #0x4                   	// #4
  21244c:	mov	w1, #0xffff                	// #65535
  212450:	stp	x28, x27, [sp, #128]
  212454:	stp	x26, x25, [sp, #144]
  212458:	stp	x24, x23, [sp, #160]
  21245c:	stp	x22, x21, [sp, #176]
  212460:	mov	w24, w2
  212464:	sturh	wzr, [x29, #-36]
  212468:	stur	wzr, [x29, #-40]
  21246c:	stp	xzr, xzr, [sp, #40]
  212470:	stp	q0, q1, [x29, #-32]
  212474:	bl	212aac <malloc_multiply>
  212478:	str	x0, [sp, #48]
  21247c:	cbz	x0, 212500 <setup_remaining_vcs+0xdc>
  212480:	sub	x2, x29, #0x20
  212484:	mov	w1, #0x4b72                	// #19314
  212488:	mov	w0, w20
  21248c:	bl	212da0 <ioctl@plt>
  212490:	tbnz	w0, #31, 21254c <setup_remaining_vcs+0x128>
  212494:	ldur	w21, [x29, #-24]
  212498:	cmp	w21, #0x20
  21249c:	b.hi	2124b8 <setup_remaining_vcs+0x94>  // b.pmore
  2124a0:	ldur	w8, [x29, #-20]
  2124a4:	cmp	w8, #0x20
  2124a8:	b.hi	2124b8 <setup_remaining_vcs+0x94>  // b.pmore
  2124ac:	ldur	w1, [x29, #-16]
  2124b0:	cmp	w1, #0x201
  2124b4:	b.cc	212854 <setup_remaining_vcs+0x430>  // b.lo, b.ul, b.last
  2124b8:	mov	w0, wzr
  2124bc:	bl	212d10 <log_get_max_level_realm@plt>
  2124c0:	cmp	w0, #0x4
  2124c4:	b.lt	212588 <setup_remaining_vcs+0x164>  // b.tstop
  2124c8:	ldp	w7, w8, [x29, #-20]
  2124cc:	adrp	x2, 201000 <__FRAME_END__-0x560>
  2124d0:	adrp	x4, 201000 <__FRAME_END__-0x560>
  2124d4:	adrp	x5, 200000 <__FRAME_END__-0x1560>
  2124d8:	add	x2, x2, #0x150
  2124dc:	add	x4, x4, #0xbd
  2124e0:	add	x5, x5, #0xd60
  2124e4:	mov	w0, #0x4                   	// #4
  2124e8:	mov	w3, #0xf5                  	// #245
  2124ec:	mov	w1, wzr
  2124f0:	mov	w6, w21
  2124f4:	str	w8, [sp]
  2124f8:	bl	212d20 <log_internal_realm@plt>
  2124fc:	b	212588 <setup_remaining_vcs+0x164>
  212500:	mov	w2, #0xe9                  	// #233
  212504:	adrp	x1, 201000 <__FRAME_END__-0x560>
  212508:	adrp	x3, 201000 <__FRAME_END__-0x560>
  21250c:	add	x1, x1, #0x150
  212510:	add	x3, x3, #0xbd
  212514:	mov	w0, wzr
  212518:	bl	212d80 <log_oom_internal@plt>
  21251c:	add	x0, sp, #0x28
  212520:	bl	211ac8 <freep>
  212524:	add	x0, sp, #0x30
  212528:	bl	211ac8 <freep>
  21252c:	ldp	x20, x19, [sp, #192]
  212530:	ldp	x22, x21, [sp, #176]
  212534:	ldp	x24, x23, [sp, #160]
  212538:	ldp	x26, x25, [sp, #144]
  21253c:	ldp	x28, x27, [sp, #128]
  212540:	ldp	x29, x30, [sp, #112]
  212544:	add	sp, sp, #0xd0
  212548:	ret
  21254c:	mov	w0, wzr
  212550:	bl	212d10 <log_get_max_level_realm@plt>
  212554:	cmp	w0, #0x4
  212558:	b.lt	212588 <setup_remaining_vcs+0x164>  // b.tstop
  21255c:	bl	212de0 <__errno_location@plt>
  212560:	ldr	w1, [x0]
  212564:	adrp	x2, 201000 <__FRAME_END__-0x560>
  212568:	adrp	x4, 201000 <__FRAME_END__-0x560>
  21256c:	adrp	x5, 201000 <__FRAME_END__-0x560>
  212570:	add	x2, x2, #0x150
  212574:	add	x4, x4, #0xbd
  212578:	add	x5, x5, #0xd1
  21257c:	mov	w0, #0x4                   	// #4
  212580:	mov	w3, #0xf0                  	// #240
  212584:	bl	212d20 <log_internal_realm@plt>
  212588:	ldur	w8, [x29, #-32]
  21258c:	cbz	w8, 2125c8 <setup_remaining_vcs+0x1a4>
  212590:	mov	w0, wzr
  212594:	bl	212d10 <log_get_max_level_realm@plt>
  212598:	cmp	w0, #0x4
  21259c:	b.lt	2125c8 <setup_remaining_vcs+0x1a4>  // b.tstop
  2125a0:	adrp	x2, 201000 <__FRAME_END__-0x560>
  2125a4:	adrp	x4, 201000 <__FRAME_END__-0x560>
  2125a8:	adrp	x5, 200000 <__FRAME_END__-0x1560>
  2125ac:	add	x2, x2, #0x150
  2125b0:	add	x4, x4, #0xbd
  2125b4:	add	x5, x5, #0xfdf
  2125b8:	mov	w0, #0x4                   	// #4
  2125bc:	mov	w3, #0x114                 	// #276
  2125c0:	mov	w1, wzr
  2125c4:	bl	212d20 <log_internal_realm@plt>
  2125c8:	adrp	x21, 201000 <__FRAME_END__-0x560>
  2125cc:	adrp	x22, 201000 <__FRAME_END__-0x560>
  2125d0:	adrp	x23, 201000 <__FRAME_END__-0x560>
  2125d4:	adrp	x25, 200000 <__FRAME_END__-0x1560>
  2125d8:	adrp	x28, 201000 <__FRAME_END__-0x560>
  2125dc:	mov	w20, #0x1                   	// #1
  2125e0:	mov	w27, #0xffffffff            	// #-1
  2125e4:	add	x21, x21, #0x416
  2125e8:	add	x22, x22, #0x150
  2125ec:	add	x23, x23, #0xbd
  2125f0:	add	x25, x25, #0xdb5
  2125f4:	and	w24, w24, #0x1
  2125f8:	add	x28, x28, #0x256
  2125fc:	b	21261c <setup_remaining_vcs+0x1f8>
  212600:	mov	w6, w20
  212604:	bl	212d20 <log_internal_realm@plt>
  212608:	add	x0, sp, #0x18
  21260c:	bl	211ae0 <closep>
  212610:	add	w20, w20, #0x1
  212614:	cmp	w20, #0x40
  212618:	b.eq	21251c <setup_remaining_vcs+0xf8>  // b.none
  21261c:	cmp	w19, w20
  212620:	str	w27, [sp, #24]
  212624:	b.eq	212608 <setup_remaining_vcs+0x1e4>  // b.none
  212628:	mov	w0, w20
  21262c:	bl	212a2c <verify_vc_allocation>
  212630:	tbnz	w0, #31, 212608 <setup_remaining_vcs+0x1e4>
  212634:	add	x0, sp, #0x1c
  212638:	mov	w1, #0xb                   	// #11
  21263c:	mov	x2, x21
  212640:	mov	w3, w20
  212644:	bl	212e30 <snprintf@plt>
  212648:	cmp	w0, #0xb
  21264c:	b.cs	212930 <setup_remaining_vcs+0x50c>  // b.hs, b.nlast
  212650:	mov	w1, #0x102                 	// #258
  212654:	add	x0, sp, #0x1c
  212658:	movk	w1, #0x8, lsl #16
  21265c:	bl	212d60 <open_terminal@plt>
  212660:	mov	w26, w0
  212664:	str	w0, [sp, #24]
  212668:	tbnz	w0, #31, 212708 <setup_remaining_vcs+0x2e4>
  21266c:	mov	w0, w26
  212670:	bl	2129d8 <verify_vc_kbmode>
  212674:	tbnz	w0, #31, 212608 <setup_remaining_vcs+0x1e4>
  212678:	add	x0, sp, #0x1c
  21267c:	mov	w1, w26
  212680:	mov	w2, w24
  212684:	bl	211efc <toggle_utf8_vc>
  212688:	ldur	w8, [x29, #-32]
  21268c:	cbnz	w8, 212608 <setup_remaining_vcs+0x1e4>
  212690:	sub	x2, x29, #0x20
  212694:	mov	w1, #0x4b72                	// #19314
  212698:	mov	w0, w26
  21269c:	bl	212da0 <ioctl@plt>
  2126a0:	tbnz	w0, #31, 212734 <setup_remaining_vcs+0x310>
  2126a4:	sub	x2, x29, #0x28
  2126a8:	mov	w1, #0x4b68                	// #19304
  2126ac:	mov	w0, w26
  2126b0:	bl	212da0 <ioctl@plt>
  2126b4:	tbnz	w0, #31, 2127b0 <setup_remaining_vcs+0x38c>
  2126b8:	add	x2, sp, #0x38
  2126bc:	mov	w1, #0x4b67                	// #19303
  2126c0:	mov	w0, w26
  2126c4:	bl	212da0 <ioctl@plt>
  2126c8:	mov	w26, w0
  2126cc:	mov	w0, wzr
  2126d0:	bl	212d10 <log_get_max_level_realm@plt>
  2126d4:	tbnz	w26, #31, 212828 <setup_remaining_vcs+0x404>
  2126d8:	cmp	w0, #0x7
  2126dc:	b.lt	212608 <setup_remaining_vcs+0x1e4>  // b.tstop
  2126e0:	adrp	x5, 201000 <__FRAME_END__-0x560>
  2126e4:	add	x6, sp, #0x1c
  2126e8:	mov	w0, #0x7                   	// #7
  2126ec:	mov	w3, #0x152                 	// #338
  2126f0:	mov	w1, wzr
  2126f4:	mov	x2, x22
  2126f8:	mov	x4, x23
  2126fc:	add	x5, x5, #0x178
  212700:	bl	212d20 <log_internal_realm@plt>
  212704:	b	212608 <setup_remaining_vcs+0x1e4>
  212708:	mov	w0, wzr
  21270c:	bl	212d10 <log_get_max_level_realm@plt>
  212710:	cmp	w0, #0x4
  212714:	b.lt	212608 <setup_remaining_vcs+0x1e4>  // b.tstop
  212718:	mov	w0, #0x4                   	// #4
  21271c:	mov	w3, #0x121                 	// #289
  212720:	mov	w1, w26
  212724:	mov	x2, x22
  212728:	mov	x4, x23
  21272c:	mov	x5, x25
  212730:	b	212600 <setup_remaining_vcs+0x1dc>
  212734:	str	w24, [sp, #16]
  212738:	mov	x24, x28
  21273c:	mov	x28, x23
  212740:	mov	x23, x22
  212744:	mov	x22, x25
  212748:	bl	212de0 <__errno_location@plt>
  21274c:	ldr	w8, [x0]
  212750:	add	x2, sp, #0x14
  212754:	mov	w1, #0x4b3b                	// #19259
  212758:	mov	w0, w26
  21275c:	str	w8, [sp, #12]
  212760:	bl	212da0 <ioctl@plt>
  212764:	ldr	w25, [sp, #20]
  212768:	mov	w26, w0
  21276c:	mov	w0, wzr
  212770:	bl	212d10 <log_get_max_level_realm@plt>
  212774:	tbnz	w26, #31, 2127e4 <setup_remaining_vcs+0x3c0>
  212778:	cbz	w25, 2127e4 <setup_remaining_vcs+0x3c0>
  21277c:	cmp	w0, #0x7
  212780:	mov	x25, x22
  212784:	mov	x22, x23
  212788:	mov	x23, x28
  21278c:	mov	x28, x24
  212790:	b.lt	212820 <setup_remaining_vcs+0x3fc>  // b.tstop
  212794:	mov	w0, #0x7                   	// #7
  212798:	mov	w3, #0x13b                 	// #315
  21279c:	mov	w1, wzr
  2127a0:	mov	x2, x22
  2127a4:	mov	x4, x23
  2127a8:	mov	x5, x28
  2127ac:	b	212818 <setup_remaining_vcs+0x3f4>
  2127b0:	mov	w0, wzr
  2127b4:	bl	212d10 <log_get_max_level_realm@plt>
  2127b8:	cmp	w0, #0x4
  2127bc:	b.lt	212608 <setup_remaining_vcs+0x1e4>  // b.tstop
  2127c0:	bl	212de0 <__errno_location@plt>
  2127c4:	ldr	w1, [x0]
  2127c8:	adrp	x5, 200000 <__FRAME_END__-0x1560>
  2127cc:	mov	w0, #0x4                   	// #4
  2127d0:	mov	w3, #0x148                 	// #328
  2127d4:	mov	x2, x22
  2127d8:	mov	x4, x23
  2127dc:	add	x5, x5, #0xe3e
  2127e0:	b	212600 <setup_remaining_vcs+0x1dc>
  2127e4:	cmp	w0, #0x4
  2127e8:	mov	x25, x22
  2127ec:	mov	x22, x23
  2127f0:	mov	x23, x28
  2127f4:	mov	x28, x24
  2127f8:	b.lt	212820 <setup_remaining_vcs+0x3fc>  // b.tstop
  2127fc:	ldr	w1, [sp, #12]
  212800:	adrp	x5, 200000 <__FRAME_END__-0x1560>
  212804:	mov	w0, #0x4                   	// #4
  212808:	mov	w3, #0x13d                 	// #317
  21280c:	mov	x2, x22
  212810:	mov	x4, x23
  212814:	add	x5, x5, #0xe9d
  212818:	mov	w6, w20
  21281c:	bl	212d20 <log_internal_realm@plt>
  212820:	ldr	w24, [sp, #16]
  212824:	b	212608 <setup_remaining_vcs+0x1e4>
  212828:	cmp	w0, #0x4
  21282c:	b.lt	212608 <setup_remaining_vcs+0x1e4>  // b.tstop
  212830:	bl	212de0 <__errno_location@plt>
  212834:	ldr	w1, [x0]
  212838:	adrp	x5, 201000 <__FRAME_END__-0x560>
  21283c:	mov	w0, #0x4                   	// #4
  212840:	mov	w3, #0x14e                 	// #334
  212844:	mov	x2, x22
  212848:	mov	x4, x23
  21284c:	add	x5, x5, #0x288
  212850:	b	212600 <setup_remaining_vcs+0x1dc>
  212854:	lsl	w8, w21, #2
  212858:	add	w8, w8, #0x1c
  21285c:	and	w0, w8, #0xffffffe0
  212860:	bl	212aac <malloc_multiply>
  212864:	str	x0, [sp, #40]
  212868:	cbz	x0, 2128b0 <setup_remaining_vcs+0x48c>
  21286c:	stur	x0, [x29, #-8]
  212870:	sub	x2, x29, #0x20
  212874:	mov	w1, #0x4b72                	// #19314
  212878:	mov	w0, w20
  21287c:	bl	212da0 <ioctl@plt>
  212880:	tbnz	w0, #31, 2128b8 <setup_remaining_vcs+0x494>
  212884:	ldr	x8, [sp, #48]
  212888:	mov	w9, #0xffff                	// #65535
  21288c:	add	x2, sp, #0x38
  212890:	mov	w1, #0x4b66                	// #19302
  212894:	mov	w0, w20
  212898:	str	x8, [sp, #64]
  21289c:	strh	w9, [sp, #56]
  2128a0:	bl	212da0 <ioctl@plt>
  2128a4:	tbnz	w0, #31, 2128f4 <setup_remaining_vcs+0x4d0>
  2128a8:	stur	wzr, [x29, #-32]
  2128ac:	b	212588 <setup_remaining_vcs+0x164>
  2128b0:	mov	w2, #0xff                  	// #255
  2128b4:	b	212504 <setup_remaining_vcs+0xe0>
  2128b8:	mov	w0, wzr
  2128bc:	bl	212d10 <log_get_max_level_realm@plt>
  2128c0:	cmp	w0, #0x4
  2128c4:	b.lt	212588 <setup_remaining_vcs+0x164>  // b.tstop
  2128c8:	bl	212de0 <__errno_location@plt>
  2128cc:	ldr	w1, [x0]
  2128d0:	adrp	x2, 201000 <__FRAME_END__-0x560>
  2128d4:	adrp	x4, 201000 <__FRAME_END__-0x560>
  2128d8:	adrp	x5, 200000 <__FRAME_END__-0x1560>
  2128dc:	add	x2, x2, #0x150
  2128e0:	add	x4, x4, #0xbd
  2128e4:	add	x5, x5, #0xfa2
  2128e8:	mov	w0, #0x4                   	// #4
  2128ec:	mov	w3, #0x106                 	// #262
  2128f0:	b	212584 <setup_remaining_vcs+0x160>
  2128f4:	mov	w0, wzr
  2128f8:	bl	212d10 <log_get_max_level_realm@plt>
  2128fc:	cmp	w0, #0x4
  212900:	b.lt	212588 <setup_remaining_vcs+0x164>  // b.tstop
  212904:	bl	212de0 <__errno_location@plt>
  212908:	ldr	w1, [x0]
  21290c:	adrp	x2, 201000 <__FRAME_END__-0x560>
  212910:	adrp	x4, 201000 <__FRAME_END__-0x560>
  212914:	adrp	x5, 201000 <__FRAME_END__-0x560>
  212918:	add	x2, x2, #0x150
  21291c:	add	x4, x4, #0xbd
  212920:	add	x5, x5, #0x111
  212924:	mov	w0, #0x4                   	// #4
  212928:	mov	w3, #0x10c                 	// #268
  21292c:	b	212584 <setup_remaining_vcs+0x160>
  212930:	adrp	x1, 201000 <__FRAME_END__-0x560>
  212934:	adrp	x2, 201000 <__FRAME_END__-0x560>
  212938:	adrp	x4, 201000 <__FRAME_END__-0x560>
  21293c:	add	x1, x1, #0x53
  212940:	add	x2, x2, #0x150
  212944:	add	x4, x4, #0x223
  212948:	mov	w3, #0x11e                 	// #286
  21294c:	mov	w0, wzr
  212950:	bl	212df0 <log_assert_failed_realm@plt>

0000000000212954 <verify_vc_device>:
  212954:	sub	sp, sp, #0x20
  212958:	stp	x29, x30, [sp, #16]
  21295c:	add	x29, sp, #0x10
  212960:	mov	w8, #0xc                   	// #12
  212964:	sub	x2, x29, #0x4
  212968:	mov	w1, #0x541c                	// #21532
  21296c:	sturb	w8, [x29, #-4]
  212970:	bl	212da0 <ioctl@plt>
  212974:	tbz	w0, #31, 212984 <verify_vc_device+0x30>
  212978:	bl	212de0 <__errno_location@plt>
  21297c:	ldr	w8, [x0]
  212980:	neg	w0, w8
  212984:	ldp	x29, x30, [sp, #16]
  212988:	add	sp, sp, #0x20
  21298c:	ret

0000000000212990 <verify_vc_allocation_byfd>:
  212990:	sub	sp, sp, #0x20
  212994:	add	x2, sp, #0x8
  212998:	mov	w1, #0x5603                	// #22019
  21299c:	stp	x29, x30, [sp, #16]
  2129a0:	add	x29, sp, #0x10
  2129a4:	strh	wzr, [sp, #12]
  2129a8:	str	wzr, [sp, #8]
  2129ac:	bl	212da0 <ioctl@plt>
  2129b0:	tbnz	w0, #31, 2129c0 <verify_vc_allocation_byfd+0x30>
  2129b4:	ldrh	w0, [sp, #8]
  2129b8:	bl	212a2c <verify_vc_allocation>
  2129bc:	b	2129cc <verify_vc_allocation_byfd+0x3c>
  2129c0:	bl	212de0 <__errno_location@plt>
  2129c4:	ldr	w8, [x0]
  2129c8:	neg	w0, w8
  2129cc:	ldp	x29, x30, [sp, #16]
  2129d0:	add	sp, sp, #0x20
  2129d4:	ret

00000000002129d8 <verify_vc_kbmode>:
  2129d8:	sub	sp, sp, #0x20
  2129dc:	stp	x29, x30, [sp, #16]
  2129e0:	add	x29, sp, #0x10
  2129e4:	sub	x2, x29, #0x4
  2129e8:	mov	w1, #0x4b44                	// #19268
  2129ec:	bl	212da0 <ioctl@plt>
  2129f0:	tbnz	w0, #31, 212a0c <verify_vc_kbmode+0x34>
  2129f4:	ldur	w8, [x29, #-4]
  2129f8:	orr	w8, w8, #0x2
  2129fc:	cmp	w8, #0x3
  212a00:	b.ne	212a1c <verify_vc_kbmode+0x44>  // b.any
  212a04:	mov	w0, wzr
  212a08:	b	212a20 <verify_vc_kbmode+0x48>
  212a0c:	bl	212de0 <__errno_location@plt>
  212a10:	ldr	w8, [x0]
  212a14:	neg	w0, w8
  212a18:	b	212a20 <verify_vc_kbmode+0x48>
  212a1c:	mov	w0, #0xfffffff0            	// #-16
  212a20:	ldp	x29, x30, [sp, #16]
  212a24:	add	sp, sp, #0x20
  212a28:	ret

0000000000212a2c <verify_vc_allocation>:
  212a2c:	sub	sp, sp, #0x30
  212a30:	adrp	x2, 200000 <__FRAME_END__-0x1560>
  212a34:	mov	w3, w0
  212a38:	add	x2, x2, #0xf95
  212a3c:	add	x0, sp, #0xc
  212a40:	mov	w1, #0x13                  	// #19
  212a44:	stp	x29, x30, [sp, #32]
  212a48:	add	x29, sp, #0x20
  212a4c:	bl	212e30 <snprintf@plt>
  212a50:	cmp	w0, #0x13
  212a54:	b.cs	212a88 <verify_vc_allocation+0x5c>  // b.hs, b.nlast
  212a58:	add	x0, sp, #0xc
  212a5c:	mov	w1, wzr
  212a60:	bl	212e40 <access@plt>
  212a64:	mov	w8, w0
  212a68:	mov	w0, wzr
  212a6c:	tbz	w8, #31, 212a7c <verify_vc_allocation+0x50>
  212a70:	bl	212de0 <__errno_location@plt>
  212a74:	ldr	w8, [x0]
  212a78:	neg	w0, w8
  212a7c:	ldp	x29, x30, [sp, #32]
  212a80:	add	sp, sp, #0x30
  212a84:	ret
  212a88:	adrp	x1, 200000 <__FRAME_END__-0x1560>
  212a8c:	adrp	x2, 201000 <__FRAME_END__-0x560>
  212a90:	adrp	x4, 200000 <__FRAME_END__-0x1560>
  212a94:	add	x1, x1, #0xf48
  212a98:	add	x2, x2, #0x150
  212a9c:	add	x4, x4, #0xf6e
  212aa0:	mov	w3, #0x37                  	// #55
  212aa4:	mov	w0, wzr
  212aa8:	bl	212df0 <log_assert_failed_realm@plt>

0000000000212aac <malloc_multiply>:
  212aac:	stp	x29, x30, [sp, #-32]!
  212ab0:	stp	x20, x19, [sp, #16]
  212ab4:	mov	x29, sp
  212ab8:	mov	x19, x1
  212abc:	mov	x20, x0
  212ac0:	bl	212aec <size_multiply_overflow>
  212ac4:	tbz	w0, #0, 212ad0 <malloc_multiply+0x24>
  212ac8:	mov	x0, xzr
  212acc:	b	212ae0 <malloc_multiply+0x34>
  212ad0:	mul	x8, x19, x20
  212ad4:	cmp	x8, #0x0
  212ad8:	csinc	x0, x8, xzr, ne  // ne = any
  212adc:	bl	212e50 <malloc@plt>
  212ae0:	ldp	x20, x19, [sp, #16]
  212ae4:	ldp	x29, x30, [sp], #32
  212ae8:	ret

0000000000212aec <size_multiply_overflow>:
  212aec:	umulh	x8, x1, x0
  212af0:	cmp	xzr, x8
  212af4:	cset	w0, ne  // ne = any
  212af8:	ret

0000000000212afc <write_string_file>:
  212afc:	stp	x29, x30, [sp, #-16]!
  212b00:	mov	x1, x0
  212b04:	adrp	x0, 200000 <__FRAME_END__-0x1560>
  212b08:	add	x0, x0, #0xe15
  212b0c:	mov	w2, #0x20                  	// #32
  212b10:	mov	x3, xzr
  212b14:	mov	x29, sp
  212b18:	bl	212e60 <write_string_file_ts@plt>
  212b1c:	ldp	x29, x30, [sp], #16
  212b20:	ret

0000000000212b24 <one_zero>:
  212b24:	adrp	x8, 200000 <__FRAME_END__-0x1560>
  212b28:	adrp	x9, 201000 <__FRAME_END__-0x560>
  212b2c:	add	x8, x8, #0xfa0
  212b30:	add	x9, x9, #0x1ef
  212b34:	tst	w0, #0x1
  212b38:	csel	x0, x9, x8, ne  // ne = any
  212b3c:	ret

0000000000212b40 <enable_disable>:
  212b40:	adrp	x8, 200000 <__FRAME_END__-0x1560>
  212b44:	adrp	x9, 201000 <__FRAME_END__-0x560>
  212b48:	add	x8, x8, #0xd58
  212b4c:	add	x9, x9, #0x421
  212b50:	tst	w0, #0x1
  212b54:	csel	x0, x9, x8, ne  // ne = any
  212b58:	ret

0000000000212b5c <isempty>:
  212b5c:	cbz	x0, 212b70 <isempty+0x14>
  212b60:	ldrb	w8, [x0]
  212b64:	cmp	w8, #0x0
  212b68:	cset	w0, eq  // eq = none
  212b6c:	ret
  212b70:	mov	w0, #0x1                   	// #1
  212b74:	ret

0000000000212b78 <strv_join>:
  212b78:	stp	x29, x30, [sp, #-16]!
  212b7c:	adrp	x1, 200000 <__FRAME_END__-0x1560>
  212b80:	add	x1, x1, #0xe3c
  212b84:	mov	x2, xzr
  212b88:	mov	x29, sp
  212b8c:	bl	212e70 <strv_join_prefix@plt>
  212b90:	ldp	x29, x30, [sp], #16
  212b94:	ret

0000000000212b98 <strnull>:
  212b98:	adrp	x8, 201000 <__FRAME_END__-0x560>
  212b9c:	add	x8, x8, #0x3af
  212ba0:	cmp	x0, #0x0
  212ba4:	csel	x0, x8, x0, eq  // eq = none
  212ba8:	ret

0000000000212bac <safe_fork>:
  212bac:	stp	x29, x30, [sp, #-16]!
  212bb0:	mov	x4, x1
  212bb4:	mov	w3, #0x223                 	// #547
  212bb8:	mov	x1, xzr
  212bbc:	mov	x2, xzr
  212bc0:	mov	x29, sp
  212bc4:	bl	212e80 <safe_fork_full@plt>
  212bc8:	ldp	x29, x30, [sp], #16
  212bcc:	ret

0000000000212bd0 <__libc_csu_init>:
  212bd0:	stp	x29, x30, [sp, #-64]!
  212bd4:	mov	x29, sp
  212bd8:	stp	x19, x20, [sp, #16]
  212bdc:	adrp	x20, 222000 <safe_fork_full@plt+0xf180>
  212be0:	add	x20, x20, #0xea0
  212be4:	stp	x21, x22, [sp, #32]
  212be8:	adrp	x21, 222000 <safe_fork_full@plt+0xf180>
  212bec:	add	x21, x21, #0xe98
  212bf0:	sub	x20, x20, x21
  212bf4:	mov	w22, w0
  212bf8:	stp	x23, x24, [sp, #48]
  212bfc:	mov	x23, x1
  212c00:	mov	x24, x2
  212c04:	bl	212c54 <_init>
  212c08:	cmp	xzr, x20, asr #3
  212c0c:	b.eq	212c38 <__libc_csu_init+0x68>  // b.none
  212c10:	asr	x20, x20, #3
  212c14:	mov	x19, #0x0                   	// #0
  212c18:	ldr	x3, [x21, x19, lsl #3]
  212c1c:	mov	x2, x24
  212c20:	add	x19, x19, #0x1
  212c24:	mov	x1, x23
  212c28:	mov	w0, w22
  212c2c:	blr	x3
  212c30:	cmp	x20, x19
  212c34:	b.ne	212c18 <__libc_csu_init+0x48>  // b.any
  212c38:	ldp	x19, x20, [sp, #16]
  212c3c:	ldp	x21, x22, [sp, #32]
  212c40:	ldp	x23, x24, [sp, #48]
  212c44:	ldp	x29, x30, [sp], #64
  212c48:	ret
  212c4c:	nop

0000000000212c50 <__libc_csu_fini>:
  212c50:	ret

Disassembly of section .init:

0000000000212c54 <_init>:
  212c54:	stp	x29, x30, [sp, #-16]!
  212c58:	mov	x29, sp
  212c5c:	bl	2116a8 <call_weak_fn>
  212c60:	ldp	x29, x30, [sp], #16
  212c64:	ret

Disassembly of section .fini:

0000000000212c68 <_fini>:
  212c68:	stp	x29, x30, [sp, #-16]!
  212c6c:	mov	x29, sp
  212c70:	ldp	x29, x30, [sp], #16
  212c74:	ret

Disassembly of section .plt:

0000000000212c80 <__libc_start_main@plt-0x20>:
  212c80:	stp	x16, x30, [sp, #-16]!
  212c84:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212c88:	ldr	x17, [x16, #136]
  212c8c:	add	x16, x16, #0x88
  212c90:	br	x17
  212c94:	nop
  212c98:	nop
  212c9c:	nop

0000000000212ca0 <__libc_start_main@plt>:
  212ca0:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212ca4:	ldr	x17, [x16, #144]
  212ca8:	add	x16, x16, #0x90
  212cac:	br	x17

0000000000212cb0 <abort@plt>:
  212cb0:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212cb4:	ldr	x17, [x16, #152]
  212cb8:	add	x16, x16, #0x98
  212cbc:	br	x17

0000000000212cc0 <__gmon_start__@plt>:
  212cc0:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212cc4:	ldr	x17, [x16, #160]
  212cc8:	add	x16, x16, #0xa0
  212ccc:	br	x17

0000000000212cd0 <log_setup_service@plt>:
  212cd0:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212cd4:	ldr	x17, [x16, #168]
  212cd8:	add	x16, x16, #0xa8
  212cdc:	br	x17

0000000000212ce0 <umask@plt>:
  212ce0:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212ce4:	ldr	x17, [x16, #176]
  212ce8:	add	x16, x16, #0xb0
  212cec:	br	x17

0000000000212cf0 <is_locale_utf8@plt>:
  212cf0:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212cf4:	ldr	x17, [x16, #184]
  212cf8:	add	x16, x16, #0xb8
  212cfc:	br	x17

0000000000212d00 <parse_env_file_sentinel@plt>:
  212d00:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212d04:	ldr	x17, [x16, #192]
  212d08:	add	x16, x16, #0xc0
  212d0c:	br	x17

0000000000212d10 <log_get_max_level_realm@plt>:
  212d10:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212d14:	ldr	x17, [x16, #200]
  212d18:	add	x16, x16, #0xc8
  212d1c:	br	x17

0000000000212d20 <log_internal_realm@plt>:
  212d20:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212d24:	ldr	x17, [x16, #208]
  212d28:	add	x16, x16, #0xd0
  212d2c:	br	x17

0000000000212d30 <proc_cmdline_get_key_many_internal@plt>:
  212d30:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212d34:	ldr	x17, [x16, #216]
  212d38:	add	x16, x16, #0xd8
  212d3c:	br	x17

0000000000212d40 <free@plt>:
  212d40:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212d44:	ldr	x17, [x16, #224]
  212d48:	add	x16, x16, #0xe0
  212d4c:	br	x17

0000000000212d50 <safe_close@plt>:
  212d50:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212d54:	ldr	x17, [x16, #232]
  212d58:	add	x16, x16, #0xe8
  212d5c:	br	x17

0000000000212d60 <open_terminal@plt>:
  212d60:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212d64:	ldr	x17, [x16, #240]
  212d68:	add	x16, x16, #0xf0
  212d6c:	br	x17

0000000000212d70 <strdup@plt>:
  212d70:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212d74:	ldr	x17, [x16, #248]
  212d78:	add	x16, x16, #0xf8
  212d7c:	br	x17

0000000000212d80 <log_oom_internal@plt>:
  212d80:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212d84:	ldr	x17, [x16, #256]
  212d88:	add	x16, x16, #0x100
  212d8c:	br	x17

0000000000212d90 <sprintf@plt>:
  212d90:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212d94:	ldr	x17, [x16, #264]
  212d98:	add	x16, x16, #0x108
  212d9c:	br	x17

0000000000212da0 <ioctl@plt>:
  212da0:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212da4:	ldr	x17, [x16, #272]
  212da8:	add	x16, x16, #0x110
  212dac:	br	x17

0000000000212db0 <loop_write@plt>:
  212db0:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212db4:	ldr	x17, [x16, #280]
  212db8:	add	x16, x16, #0x118
  212dbc:	br	x17

0000000000212dc0 <tcgetattr@plt>:
  212dc0:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212dc4:	ldr	x17, [x16, #288]
  212dc8:	add	x16, x16, #0x120
  212dcc:	br	x17

0000000000212dd0 <tcsetattr@plt>:
  212dd0:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212dd4:	ldr	x17, [x16, #296]
  212dd8:	add	x16, x16, #0x128
  212ddc:	br	x17

0000000000212de0 <__errno_location@plt>:
  212de0:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212de4:	ldr	x17, [x16, #304]
  212de8:	add	x16, x16, #0x130
  212dec:	br	x17

0000000000212df0 <log_assert_failed_realm@plt>:
  212df0:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212df4:	ldr	x17, [x16, #312]
  212df8:	add	x16, x16, #0x138
  212dfc:	br	x17

0000000000212e00 <wait_for_terminate_and_check@plt>:
  212e00:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212e04:	ldr	x17, [x16, #320]
  212e08:	add	x16, x16, #0x140
  212e0c:	br	x17

0000000000212e10 <execv@plt>:
  212e10:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212e14:	ldr	x17, [x16, #328]
  212e18:	add	x16, x16, #0x148
  212e1c:	br	x17

0000000000212e20 <_exit@plt>:
  212e20:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212e24:	ldr	x17, [x16, #336]
  212e28:	add	x16, x16, #0x150
  212e2c:	br	x17

0000000000212e30 <snprintf@plt>:
  212e30:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212e34:	ldr	x17, [x16, #344]
  212e38:	add	x16, x16, #0x158
  212e3c:	br	x17

0000000000212e40 <access@plt>:
  212e40:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212e44:	ldr	x17, [x16, #352]
  212e48:	add	x16, x16, #0x160
  212e4c:	br	x17

0000000000212e50 <malloc@plt>:
  212e50:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212e54:	ldr	x17, [x16, #360]
  212e58:	add	x16, x16, #0x168
  212e5c:	br	x17

0000000000212e60 <write_string_file_ts@plt>:
  212e60:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212e64:	ldr	x17, [x16, #368]
  212e68:	add	x16, x16, #0x170
  212e6c:	br	x17

0000000000212e70 <strv_join_prefix@plt>:
  212e70:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212e74:	ldr	x17, [x16, #376]
  212e78:	add	x16, x16, #0x178
  212e7c:	br	x17

0000000000212e80 <safe_fork_full@plt>:
  212e80:	adrp	x16, 223000 <_DYNAMIC+0x160>
  212e84:	ldr	x17, [x16, #384]
  212e88:	add	x16, x16, #0x180
  212e8c:	br	x17
