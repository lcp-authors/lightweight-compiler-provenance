
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-volatile-root_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000400ff8 <_init>:
  400ff8:	stp	x29, x30, [sp, #-16]!
  400ffc:	mov	x29, sp
  401000:	bl	4012c0 <call_weak_fn>
  401004:	ldp	x29, x30, [sp], #16
  401008:	ret

Disassembly of section .plt:

0000000000401010 <.plt>:
  401010:	stp	x16, x30, [sp, #-16]!
  401014:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401018:	ldr	x17, [x16, #3784]
  40101c:	add	x16, x16, #0xec8
  401020:	br	x17
  401024:	nop
  401028:	nop
  40102c:	nop

0000000000401030 <mount_verbose@plt>:
  401030:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401034:	ldr	x17, [x16, #3792]
  401038:	add	x16, x16, #0xed0
  40103c:	br	x17

0000000000401040 <stpcpy@plt>:
  401040:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401044:	ldr	x17, [x16, #3800]
  401048:	add	x16, x16, #0xed8
  40104c:	br	x17

0000000000401050 <__libc_start_main@plt>:
  401050:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401054:	ldr	x17, [x16, #3808]
  401058:	add	x16, x16, #0xee0
  40105c:	br	x17

0000000000401060 <__gmon_start__@plt>:
  401060:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401064:	ldr	x17, [x16, #3816]
  401068:	add	x16, x16, #0xee8
  40106c:	br	x17

0000000000401070 <chase_symlinks@plt>:
  401070:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401074:	ldr	x17, [x16, #3824]
  401078:	add	x16, x16, #0xef0
  40107c:	br	x17

0000000000401080 <polkit_agent_close@plt>:
  401080:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401084:	ldr	x17, [x16, #3832]
  401088:	add	x16, x16, #0xef8
  40108c:	br	x17

0000000000401090 <umount_verbose@plt>:
  401090:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401094:	ldr	x17, [x16, #3840]
  401098:	add	x16, x16, #0xf00
  40109c:	br	x17

00000000004010a0 <query_volatile_mode@plt>:
  4010a0:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  4010a4:	ldr	x17, [x16, #3848]
  4010a8:	add	x16, x16, #0xf08
  4010ac:	br	x17

00000000004010b0 <path_equal@plt>:
  4010b0:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  4010b4:	ldr	x17, [x16, #3856]
  4010b8:	add	x16, x16, #0xf10
  4010bc:	br	x17

00000000004010c0 <device_path_make_major_minor@plt>:
  4010c0:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  4010c4:	ldr	x17, [x16, #3864]
  4010c8:	add	x16, x16, #0xf18
  4010cc:	br	x17

00000000004010d0 <symlink@plt>:
  4010d0:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  4010d4:	ldr	x17, [x16, #3872]
  4010d8:	add	x16, x16, #0xf20
  4010dc:	br	x17

00000000004010e0 <volatile_mode_from_string@plt>:
  4010e0:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  4010e4:	ldr	x17, [x16, #3880]
  4010e8:	add	x16, x16, #0xf28
  4010ec:	br	x17

00000000004010f0 <log_setup_service@plt>:
  4010f0:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  4010f4:	ldr	x17, [x16, #3888]
  4010f8:	add	x16, x16, #0xf30
  4010fc:	br	x17

0000000000401100 <log_assert_failed_realm@plt>:
  401100:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401104:	ldr	x17, [x16, #3896]
  401108:	add	x16, x16, #0xf38
  40110c:	br	x17

0000000000401110 <path_is_absolute@plt>:
  401110:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401114:	ldr	x17, [x16, #3904]
  401118:	add	x16, x16, #0xf40
  40111c:	br	x17

0000000000401120 <abort@plt>:
  401120:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401124:	ldr	x17, [x16, #3912]
  401128:	add	x16, x16, #0xf48
  40112c:	br	x17

0000000000401130 <get_block_device_harder@plt>:
  401130:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401134:	ldr	x17, [x16, #3920]
  401138:	add	x16, x16, #0xf50
  40113c:	br	x17

0000000000401140 <rmdir@plt>:
  401140:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401144:	ldr	x17, [x16, #3928]
  401148:	add	x16, x16, #0xf58
  40114c:	br	x17

0000000000401150 <__errno_location@plt>:
  401150:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401154:	ldr	x17, [x16, #3936]
  401158:	add	x16, x16, #0xf60
  40115c:	br	x17

0000000000401160 <__stack_chk_fail@plt>:
  401160:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401164:	ldr	x17, [x16, #3944]
  401168:	add	x16, x16, #0xf68
  40116c:	br	x17

0000000000401170 <path_is_temporary_fs@plt>:
  401170:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401174:	ldr	x17, [x16, #3952]
  401178:	add	x16, x16, #0xf70
  40117c:	br	x17

0000000000401180 <ask_password_agent_close@plt>:
  401180:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401184:	ldr	x17, [x16, #3960]
  401188:	add	x16, x16, #0xf78
  40118c:	br	x17

0000000000401190 <umount_recursive@plt>:
  401190:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401194:	ldr	x17, [x16, #3968]
  401198:	add	x16, x16, #0xf80
  40119c:	br	x17

00000000004011a0 <pager_close@plt>:
  4011a0:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  4011a4:	ldr	x17, [x16, #3976]
  4011a8:	add	x16, x16, #0xf88
  4011ac:	br	x17

00000000004011b0 <shell_escape@plt>:
  4011b0:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  4011b4:	ldr	x17, [x16, #3984]
  4011b8:	add	x16, x16, #0xf90
  4011bc:	br	x17

00000000004011c0 <log_internal_realm@plt>:
  4011c0:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  4011c4:	ldr	x17, [x16, #3992]
  4011c8:	add	x16, x16, #0xf98
  4011cc:	br	x17

00000000004011d0 <path_is_mount_point@plt>:
  4011d0:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  4011d4:	ldr	x17, [x16, #4000]
  4011d8:	add	x16, x16, #0xfa0
  4011dc:	br	x17

00000000004011e0 <mkdir@plt>:
  4011e0:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  4011e4:	ldr	x17, [x16, #4008]
  4011e8:	add	x16, x16, #0xfa8
  4011ec:	br	x17

00000000004011f0 <mount@plt>:
  4011f0:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  4011f4:	ldr	x17, [x16, #4016]
  4011f8:	add	x16, x16, #0xfb0
  4011fc:	br	x17

0000000000401200 <free@plt>:
  401200:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401204:	ldr	x17, [x16, #4024]
  401208:	add	x16, x16, #0xfb8
  40120c:	br	x17

0000000000401210 <bind_remount_recursive@plt>:
  401210:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401214:	ldr	x17, [x16, #4032]
  401218:	add	x16, x16, #0xfc0
  40121c:	br	x17

0000000000401220 <mac_selinux_finish@plt>:
  401220:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401224:	ldr	x17, [x16, #4040]
  401228:	add	x16, x16, #0xfc8
  40122c:	br	x17

0000000000401230 <mkdir_p@plt>:
  401230:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401234:	ldr	x17, [x16, #4048]
  401238:	add	x16, x16, #0xfd0
  40123c:	br	x17

0000000000401240 <strlen@plt>:
  401240:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401244:	ldr	x17, [x16, #4056]
  401248:	add	x16, x16, #0xfd8
  40124c:	br	x17

0000000000401250 <log_oom_internal@plt>:
  401250:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401254:	ldr	x17, [x16, #4064]
  401258:	add	x16, x16, #0xfe0
  40125c:	br	x17

0000000000401260 <log_get_max_level_realm@plt>:
  401260:	adrp	x16, 413000 <__FRAME_END__+0xfb30>
  401264:	ldr	x17, [x16, #4072]
  401268:	add	x16, x16, #0xfe8
  40126c:	br	x17

Disassembly of section .text:

0000000000401270 <_start>:
  401270:	mov	x29, #0x0                   	// #0
  401274:	mov	x30, #0x0                   	// #0
  401278:	mov	x5, x0
  40127c:	ldr	x1, [sp]
  401280:	add	x2, sp, #0x8
  401284:	mov	x6, sp
  401288:	movz	x0, #0x0, lsl #48
  40128c:	movk	x0, #0x0, lsl #32
  401290:	movk	x0, #0x40, lsl #16
  401294:	movk	x0, #0x2a9c
  401298:	movz	x3, #0x0, lsl #48
  40129c:	movk	x3, #0x0, lsl #32
  4012a0:	movk	x3, #0x40, lsl #16
  4012a4:	movk	x3, #0x2af0
  4012a8:	movz	x4, #0x0, lsl #48
  4012ac:	movk	x4, #0x0, lsl #32
  4012b0:	movk	x4, #0x40, lsl #16
  4012b4:	movk	x4, #0x2b70
  4012b8:	bl	401050 <__libc_start_main@plt>
  4012bc:	bl	401120 <abort@plt>

00000000004012c0 <call_weak_fn>:
  4012c0:	adrp	x0, 413000 <__FRAME_END__+0xfb30>
  4012c4:	ldr	x0, [x0, #4088]
  4012c8:	cbz	x0, 4012d0 <call_weak_fn+0x10>
  4012cc:	b	401060 <__gmon_start__@plt>
  4012d0:	ret

00000000004012d4 <deregister_tm_clones>:
  4012d4:	stp	x29, x30, [sp, #-32]!
  4012d8:	mov	x29, sp
  4012dc:	adrp	x0, 414000 <saved_argv@@SD_SHARED>
  4012e0:	add	x0, x0, #0x0
  4012e4:	str	x0, [sp, #24]
  4012e8:	ldr	x0, [sp, #24]
  4012ec:	str	x0, [sp, #24]
  4012f0:	ldr	x1, [sp, #24]
  4012f4:	adrp	x0, 414000 <saved_argv@@SD_SHARED>
  4012f8:	add	x0, x0, #0x0
  4012fc:	cmp	x1, x0
  401300:	b.eq	40133c <deregister_tm_clones+0x68>  // b.none
  401304:	adrp	x0, 402000 <make_overlay+0x498>
  401308:	add	x0, x0, #0xb88
  40130c:	ldr	x0, [x0]
  401310:	str	x0, [sp, #16]
  401314:	ldr	x0, [sp, #16]
  401318:	str	x0, [sp, #16]
  40131c:	ldr	x0, [sp, #16]
  401320:	cmp	x0, #0x0
  401324:	b.eq	401340 <deregister_tm_clones+0x6c>  // b.none
  401328:	ldr	x1, [sp, #16]
  40132c:	adrp	x0, 414000 <saved_argv@@SD_SHARED>
  401330:	add	x0, x0, #0x0
  401334:	blr	x1
  401338:	b	401340 <deregister_tm_clones+0x6c>
  40133c:	nop
  401340:	ldp	x29, x30, [sp], #32
  401344:	ret

0000000000401348 <register_tm_clones>:
  401348:	stp	x29, x30, [sp, #-48]!
  40134c:	mov	x29, sp
  401350:	adrp	x0, 414000 <saved_argv@@SD_SHARED>
  401354:	add	x0, x0, #0x0
  401358:	str	x0, [sp, #40]
  40135c:	ldr	x0, [sp, #40]
  401360:	str	x0, [sp, #40]
  401364:	ldr	x1, [sp, #40]
  401368:	adrp	x0, 414000 <saved_argv@@SD_SHARED>
  40136c:	add	x0, x0, #0x0
  401370:	sub	x0, x1, x0
  401374:	asr	x0, x0, #3
  401378:	lsr	x1, x0, #63
  40137c:	add	x0, x1, x0
  401380:	asr	x0, x0, #1
  401384:	str	x0, [sp, #32]
  401388:	ldr	x0, [sp, #32]
  40138c:	cmp	x0, #0x0
  401390:	b.eq	4013d0 <register_tm_clones+0x88>  // b.none
  401394:	adrp	x0, 402000 <make_overlay+0x498>
  401398:	add	x0, x0, #0xb90
  40139c:	ldr	x0, [x0]
  4013a0:	str	x0, [sp, #24]
  4013a4:	ldr	x0, [sp, #24]
  4013a8:	str	x0, [sp, #24]
  4013ac:	ldr	x0, [sp, #24]
  4013b0:	cmp	x0, #0x0
  4013b4:	b.eq	4013d4 <register_tm_clones+0x8c>  // b.none
  4013b8:	ldr	x2, [sp, #24]
  4013bc:	ldr	x1, [sp, #32]
  4013c0:	adrp	x0, 414000 <saved_argv@@SD_SHARED>
  4013c4:	add	x0, x0, #0x0
  4013c8:	blr	x2
  4013cc:	b	4013d4 <register_tm_clones+0x8c>
  4013d0:	nop
  4013d4:	ldp	x29, x30, [sp], #48
  4013d8:	ret

00000000004013dc <__do_global_dtors_aux>:
  4013dc:	stp	x29, x30, [sp, #-16]!
  4013e0:	mov	x29, sp
  4013e4:	adrp	x0, 414000 <saved_argv@@SD_SHARED>
  4013e8:	add	x0, x0, #0xc
  4013ec:	ldrb	w0, [x0]
  4013f0:	and	x0, x0, #0xff
  4013f4:	cmp	x0, #0x0
  4013f8:	b.ne	401414 <__do_global_dtors_aux+0x38>  // b.any
  4013fc:	bl	4012d4 <deregister_tm_clones>
  401400:	adrp	x0, 414000 <saved_argv@@SD_SHARED>
  401404:	add	x0, x0, #0xc
  401408:	mov	w1, #0x1                   	// #1
  40140c:	strb	w1, [x0]
  401410:	b	401418 <__do_global_dtors_aux+0x3c>
  401414:	nop
  401418:	ldp	x29, x30, [sp], #16
  40141c:	ret

0000000000401420 <frame_dummy>:
  401420:	stp	x29, x30, [sp, #-16]!
  401424:	mov	x29, sp
  401428:	bl	401348 <register_tm_clones>
  40142c:	nop
  401430:	ldp	x29, x30, [sp], #16
  401434:	ret

0000000000401438 <ALIGN_TO>:
  401438:	sub	sp, sp, #0x10
  40143c:	str	x0, [sp, #8]
  401440:	str	x1, [sp]
  401444:	ldr	x1, [sp, #8]
  401448:	ldr	x0, [sp]
  40144c:	add	x0, x1, x0
  401450:	sub	x1, x0, #0x1
  401454:	ldr	x0, [sp]
  401458:	neg	x0, x0
  40145c:	and	x0, x1, x0
  401460:	add	sp, sp, #0x10
  401464:	ret

0000000000401468 <freep>:
  401468:	stp	x29, x30, [sp, #-32]!
  40146c:	mov	x29, sp
  401470:	str	x0, [sp, #24]
  401474:	ldr	x0, [sp, #24]
  401478:	ldr	x0, [x0]
  40147c:	bl	401200 <free@plt>
  401480:	nop
  401484:	ldp	x29, x30, [sp], #32
  401488:	ret

000000000040148c <size_multiply_overflow>:
  40148c:	sub	sp, sp, #0x10
  401490:	str	x0, [sp, #8]
  401494:	str	x1, [sp]
  401498:	ldr	x0, [sp]
  40149c:	cmp	x0, #0x0
  4014a0:	cset	w0, ne  // ne = any
  4014a4:	and	w0, w0, #0xff
  4014a8:	and	x0, x0, #0xff
  4014ac:	cmp	x0, #0x0
  4014b0:	b.eq	4014f4 <size_multiply_overflow+0x68>  // b.none
  4014b4:	mov	x2, #0x0                   	// #0
  4014b8:	ldr	x1, [sp, #8]
  4014bc:	ldr	x0, [sp]
  4014c0:	umulh	x0, x1, x0
  4014c4:	cmp	x0, #0x0
  4014c8:	b.eq	4014d0 <size_multiply_overflow+0x44>  // b.none
  4014cc:	mov	x2, #0x1                   	// #1
  4014d0:	mov	x0, x2
  4014d4:	cmp	x0, #0x0
  4014d8:	cset	w0, ne  // ne = any
  4014dc:	and	w0, w0, #0xff
  4014e0:	and	x0, x0, #0xff
  4014e4:	cmp	x0, #0x0
  4014e8:	b.eq	4014f4 <size_multiply_overflow+0x68>  // b.none
  4014ec:	mov	w0, #0x1                   	// #1
  4014f0:	b	4014f8 <size_multiply_overflow+0x6c>
  4014f4:	mov	w0, #0x0                   	// #0
  4014f8:	and	w0, w0, #0x1
  4014fc:	and	w0, w0, #0xff
  401500:	add	sp, sp, #0x10
  401504:	ret

0000000000401508 <isempty>:
  401508:	sub	sp, sp, #0x10
  40150c:	str	x0, [sp, #8]
  401510:	ldr	x0, [sp, #8]
  401514:	cmp	x0, #0x0
  401518:	b.eq	40152c <isempty+0x24>  // b.none
  40151c:	ldr	x0, [sp, #8]
  401520:	ldrb	w0, [x0]
  401524:	cmp	w0, #0x0
  401528:	b.ne	401534 <isempty+0x2c>  // b.any
  40152c:	mov	w0, #0x1                   	// #1
  401530:	b	401538 <isempty+0x30>
  401534:	mov	w0, #0x0                   	// #0
  401538:	and	w0, w0, #0x1
  40153c:	and	w0, w0, #0xff
  401540:	add	sp, sp, #0x10
  401544:	ret

0000000000401548 <save_argc_argv>:
  401548:	sub	sp, sp, #0x10
  40154c:	str	w0, [sp, #12]
  401550:	str	x1, [sp]
  401554:	adrp	x0, 414000 <saved_argv@@SD_SHARED>
  401558:	add	x0, x0, #0x8
  40155c:	ldr	w1, [sp, #12]
  401560:	str	w1, [x0]
  401564:	adrp	x0, 414000 <saved_argv@@SD_SHARED>
  401568:	add	x0, x0, #0x0
  40156c:	ldr	x1, [sp]
  401570:	str	x1, [x0]
  401574:	nop
  401578:	add	sp, sp, #0x10
  40157c:	ret

0000000000401580 <static_destruct>:
  401580:	stp	x29, x30, [sp, #-32]!
  401584:	mov	x29, sp
  401588:	adrp	x0, 403000 <_fini+0x48c>
  40158c:	add	x0, x0, #0x1d0
  401590:	ldr	x0, [x0]
  401594:	cmp	x0, #0x0
  401598:	b.eq	4015fc <static_destruct+0x7c>  // b.none
  40159c:	adrp	x0, 403000 <_fini+0x48c>
  4015a0:	add	x0, x0, #0x1d0
  4015a4:	ldr	x0, [x0]
  4015a8:	mov	x1, #0x8                   	// #8
  4015ac:	bl	401438 <ALIGN_TO>
  4015b0:	str	x0, [sp, #24]
  4015b4:	b	4015e0 <static_destruct+0x60>
  4015b8:	ldr	x0, [sp, #24]
  4015bc:	ldr	x1, [x0, #8]
  4015c0:	ldr	x0, [sp, #24]
  4015c4:	ldr	x0, [x0]
  4015c8:	blr	x1
  4015cc:	ldr	x0, [sp, #24]
  4015d0:	add	x0, x0, #0x10
  4015d4:	mov	x1, #0x8                   	// #8
  4015d8:	bl	401438 <ALIGN_TO>
  4015dc:	str	x0, [sp, #24]
  4015e0:	ldr	x1, [sp, #24]
  4015e4:	adrp	x0, 403000 <_fini+0x48c>
  4015e8:	add	x0, x0, #0x1d8
  4015ec:	ldr	x0, [x0]
  4015f0:	cmp	x1, x0
  4015f4:	b.cc	4015b8 <static_destruct+0x38>  // b.lo, b.ul, b.last
  4015f8:	b	401600 <static_destruct+0x80>
  4015fc:	nop
  401600:	ldp	x29, x30, [sp], #32
  401604:	ret

0000000000401608 <make_volatile>:
  401608:	stp	x29, x30, [sp, #-144]!
  40160c:	mov	x29, sp
  401610:	str	x19, [sp, #16]
  401614:	str	x0, [sp, #40]
  401618:	adrp	x0, 413000 <__FRAME_END__+0xfb30>
  40161c:	add	x0, x0, #0xc80
  401620:	ldr	x1, [x0]
  401624:	str	x1, [sp, #136]
  401628:	mov	x1, #0x0                   	// #0
  40162c:	str	xzr, [sp, #128]
  401630:	ldr	x0, [sp, #40]
  401634:	cmp	x0, #0x0
  401638:	cset	w0, eq  // eq = none
  40163c:	and	w0, w0, #0xff
  401640:	and	x0, x0, #0xff
  401644:	cmp	x0, #0x0
  401648:	b.eq	401674 <make_volatile+0x6c>  // b.none
  40164c:	adrp	x0, 402000 <make_overlay+0x498>
  401650:	add	x1, x0, #0xb9b
  401654:	adrp	x0, 403000 <_fini+0x48c>
  401658:	add	x4, x0, #0x1e0
  40165c:	mov	w3, #0x16                  	// #22
  401660:	mov	x2, x1
  401664:	adrp	x0, 402000 <make_overlay+0x498>
  401668:	add	x1, x0, #0xbc0
  40166c:	mov	w0, #0x0                   	// #0
  401670:	bl	401100 <log_assert_failed_realm@plt>
  401674:	add	x0, sp, #0x80
  401678:	mov	x4, #0x0                   	// #0
  40167c:	mov	x3, x0
  401680:	mov	w2, #0x1                   	// #1
  401684:	ldr	x1, [sp, #40]
  401688:	adrp	x0, 402000 <make_overlay+0x498>
  40168c:	add	x0, x0, #0xbc8
  401690:	bl	401070 <chase_symlinks@plt>
  401694:	str	w0, [sp, #52]
  401698:	ldr	w0, [sp, #52]
  40169c:	cmp	w0, #0x0
  4016a0:	b.ge	401730 <make_volatile+0x128>  // b.tcont
  4016a4:	mov	w0, #0x3                   	// #3
  4016a8:	str	w0, [sp, #116]
  4016ac:	ldr	w0, [sp, #52]
  4016b0:	str	w0, [sp, #120]
  4016b4:	str	wzr, [sp, #124]
  4016b8:	ldr	w0, [sp, #124]
  4016bc:	bl	401260 <log_get_max_level_realm@plt>
  4016c0:	mov	w1, w0
  4016c4:	ldr	w0, [sp, #116]
  4016c8:	and	w0, w0, #0x7
  4016cc:	cmp	w1, w0
  4016d0:	b.lt	401718 <make_volatile+0x110>  // b.tstop
  4016d4:	ldr	w0, [sp, #124]
  4016d8:	lsl	w1, w0, #10
  4016dc:	ldr	w0, [sp, #116]
  4016e0:	orr	w6, w1, w0
  4016e4:	adrp	x0, 402000 <make_overlay+0x498>
  4016e8:	add	x1, x0, #0xb9b
  4016ec:	adrp	x0, 402000 <make_overlay+0x498>
  4016f0:	add	x5, x0, #0xbd0
  4016f4:	adrp	x0, 403000 <_fini+0x48c>
  4016f8:	add	x4, x0, #0x1f0
  4016fc:	mov	w3, #0x1a                  	// #26
  401700:	mov	x2, x1
  401704:	ldr	w1, [sp, #120]
  401708:	mov	w0, w6
  40170c:	bl	4011c0 <log_internal_realm@plt>
  401710:	mov	w19, w0
  401714:	b	401b2c <make_volatile+0x524>
  401718:	ldr	w0, [sp, #120]
  40171c:	cmp	w0, #0x0
  401720:	cneg	w0, w0, lt  // lt = tstop
  401724:	and	w0, w0, #0xff
  401728:	neg	w19, w0
  40172c:	b	401b2c <make_volatile+0x524>
  401730:	mov	w1, #0x1c0                 	// #448
  401734:	adrp	x0, 402000 <make_overlay+0x498>
  401738:	add	x0, x0, #0xbf8
  40173c:	bl	401230 <mkdir_p@plt>
  401740:	str	w0, [sp, #52]
  401744:	ldr	w0, [sp, #52]
  401748:	cmp	w0, #0x0
  40174c:	b.ge	4017dc <make_volatile+0x1d4>  // b.tcont
  401750:	mov	w0, #0x3                   	// #3
  401754:	str	w0, [sp, #104]
  401758:	ldr	w0, [sp, #52]
  40175c:	str	w0, [sp, #108]
  401760:	str	wzr, [sp, #112]
  401764:	ldr	w0, [sp, #112]
  401768:	bl	401260 <log_get_max_level_realm@plt>
  40176c:	mov	w1, w0
  401770:	ldr	w0, [sp, #104]
  401774:	and	w0, w0, #0x7
  401778:	cmp	w1, w0
  40177c:	b.lt	4017c4 <make_volatile+0x1bc>  // b.tstop
  401780:	ldr	w0, [sp, #112]
  401784:	lsl	w1, w0, #10
  401788:	ldr	w0, [sp, #104]
  40178c:	orr	w6, w1, w0
  401790:	adrp	x0, 402000 <make_overlay+0x498>
  401794:	add	x1, x0, #0xb9b
  401798:	adrp	x0, 402000 <make_overlay+0x498>
  40179c:	add	x5, x0, #0xc18
  4017a0:	adrp	x0, 403000 <_fini+0x48c>
  4017a4:	add	x4, x0, #0x1f0
  4017a8:	mov	w3, #0x1e                  	// #30
  4017ac:	mov	x2, x1
  4017b0:	ldr	w1, [sp, #108]
  4017b4:	mov	w0, w6
  4017b8:	bl	4011c0 <log_internal_realm@plt>
  4017bc:	mov	w19, w0
  4017c0:	b	401b2c <make_volatile+0x524>
  4017c4:	ldr	w0, [sp, #108]
  4017c8:	cmp	w0, #0x0
  4017cc:	cneg	w0, w0, lt  // lt = tstop
  4017d0:	and	w0, w0, #0xff
  4017d4:	neg	w19, w0
  4017d8:	b	401b2c <make_volatile+0x524>
  4017dc:	adrp	x0, 402000 <make_overlay+0x498>
  4017e0:	add	x5, x0, #0xc50
  4017e4:	mov	x4, #0x1000000             	// #16777216
  4017e8:	adrp	x0, 402000 <make_overlay+0x498>
  4017ec:	add	x3, x0, #0xc60
  4017f0:	adrp	x0, 402000 <make_overlay+0x498>
  4017f4:	add	x2, x0, #0xbf8
  4017f8:	adrp	x0, 402000 <make_overlay+0x498>
  4017fc:	add	x1, x0, #0xc60
  401800:	mov	w0, #0x3                   	// #3
  401804:	bl	401030 <mount_verbose@plt>
  401808:	str	w0, [sp, #52]
  40180c:	ldr	w0, [sp, #52]
  401810:	cmp	w0, #0x0
  401814:	b.lt	401b18 <make_volatile+0x510>  // b.tstop
  401818:	mov	w1, #0x1ed                 	// #493
  40181c:	adrp	x0, 402000 <make_overlay+0x498>
  401820:	add	x0, x0, #0xc68
  401824:	bl	4011e0 <mkdir@plt>
  401828:	cmp	w0, #0x0
  40182c:	b.ge	4018c0 <make_volatile+0x2b8>  // b.tcont
  401830:	mov	w0, #0x3                   	// #3
  401834:	str	w0, [sp, #92]
  401838:	bl	401150 <__errno_location@plt>
  40183c:	ldr	w0, [x0]
  401840:	str	w0, [sp, #96]
  401844:	str	wzr, [sp, #100]
  401848:	ldr	w0, [sp, #100]
  40184c:	bl	401260 <log_get_max_level_realm@plt>
  401850:	mov	w1, w0
  401854:	ldr	w0, [sp, #92]
  401858:	and	w0, w0, #0x7
  40185c:	cmp	w1, w0
  401860:	b.lt	4018a4 <make_volatile+0x29c>  // b.tstop
  401864:	ldr	w0, [sp, #100]
  401868:	lsl	w1, w0, #10
  40186c:	ldr	w0, [sp, #92]
  401870:	orr	w6, w1, w0
  401874:	adrp	x0, 402000 <make_overlay+0x498>
  401878:	add	x1, x0, #0xb9b
  40187c:	adrp	x0, 402000 <make_overlay+0x498>
  401880:	add	x5, x0, #0xc90
  401884:	adrp	x0, 403000 <_fini+0x48c>
  401888:	add	x4, x0, #0x1f0
  40188c:	mov	w3, #0x25                  	// #37
  401890:	mov	x2, x1
  401894:	ldr	w1, [sp, #96]
  401898:	mov	w0, w6
  40189c:	bl	4011c0 <log_internal_realm@plt>
  4018a0:	b	4018b8 <make_volatile+0x2b0>
  4018a4:	ldr	w0, [sp, #96]
  4018a8:	cmp	w0, #0x0
  4018ac:	cneg	w0, w0, lt  // lt = tstop
  4018b0:	and	w0, w0, #0xff
  4018b4:	neg	w0, w0
  4018b8:	str	w0, [sp, #52]
  4018bc:	b	401b04 <make_volatile+0x4fc>
  4018c0:	ldr	x1, [sp, #128]
  4018c4:	mov	x5, #0x0                   	// #0
  4018c8:	mov	x4, #0x5000                	// #20480
  4018cc:	mov	x3, #0x0                   	// #0
  4018d0:	adrp	x0, 402000 <make_overlay+0x498>
  4018d4:	add	x2, x0, #0xc68
  4018d8:	mov	w0, #0x3                   	// #3
  4018dc:	bl	401030 <mount_verbose@plt>
  4018e0:	str	w0, [sp, #52]
  4018e4:	ldr	w0, [sp, #52]
  4018e8:	cmp	w0, #0x0
  4018ec:	b.lt	401b00 <make_volatile+0x4f8>  // b.tstop
  4018f0:	mov	x3, #0x0                   	// #0
  4018f4:	mov	x2, #0x1                   	// #1
  4018f8:	mov	x1, #0x1                   	// #1
  4018fc:	adrp	x0, 402000 <make_overlay+0x498>
  401900:	add	x0, x0, #0xc68
  401904:	bl	401210 <bind_remount_recursive@plt>
  401908:	str	w0, [sp, #52]
  40190c:	ldr	w0, [sp, #52]
  401910:	cmp	w0, #0x0
  401914:	b.ge	401994 <make_volatile+0x38c>  // b.tcont
  401918:	mov	w0, #0x3                   	// #3
  40191c:	str	w0, [sp, #80]
  401920:	ldr	w0, [sp, #52]
  401924:	str	w0, [sp, #84]
  401928:	str	wzr, [sp, #88]
  40192c:	ldr	w0, [sp, #88]
  401930:	bl	401260 <log_get_max_level_realm@plt>
  401934:	mov	w1, w0
  401938:	ldr	w0, [sp, #80]
  40193c:	and	w0, w0, #0x7
  401940:	cmp	w1, w0
  401944:	b.lt	401988 <make_volatile+0x380>  // b.tstop
  401948:	ldr	w0, [sp, #88]
  40194c:	lsl	w1, w0, #10
  401950:	ldr	w0, [sp, #80]
  401954:	orr	w6, w1, w0
  401958:	adrp	x0, 402000 <make_overlay+0x498>
  40195c:	add	x1, x0, #0xb9b
  401960:	adrp	x0, 402000 <make_overlay+0x498>
  401964:	add	x5, x0, #0xcb8
  401968:	adrp	x0, 403000 <_fini+0x48c>
  40196c:	add	x4, x0, #0x1f0
  401970:	mov	w3, #0x2f                  	// #47
  401974:	mov	x2, x1
  401978:	ldr	w1, [sp, #84]
  40197c:	mov	w0, w6
  401980:	bl	4011c0 <log_internal_realm@plt>
  401984:	b	401b04 <make_volatile+0x4fc>
  401988:	ldr	w0, [sp, #84]
  40198c:	cmp	w0, #0x0
  401990:	b	401b04 <make_volatile+0x4fc>
  401994:	mov	w1, #0x0                   	// #0
  401998:	ldr	x0, [sp, #40]
  40199c:	bl	401190 <umount_recursive@plt>
  4019a0:	str	w0, [sp, #52]
  4019a4:	ldr	w0, [sp, #52]
  4019a8:	cmp	w0, #0x0
  4019ac:	b.ge	401a30 <make_volatile+0x428>  // b.tcont
  4019b0:	mov	w0, #0x3                   	// #3
  4019b4:	str	w0, [sp, #68]
  4019b8:	ldr	w0, [sp, #52]
  4019bc:	str	w0, [sp, #72]
  4019c0:	str	wzr, [sp, #76]
  4019c4:	ldr	w0, [sp, #76]
  4019c8:	bl	401260 <log_get_max_level_realm@plt>
  4019cc:	mov	w1, w0
  4019d0:	ldr	w0, [sp, #68]
  4019d4:	and	w0, w0, #0x7
  4019d8:	cmp	w1, w0
  4019dc:	b.lt	401a24 <make_volatile+0x41c>  // b.tstop
  4019e0:	ldr	w0, [sp, #76]
  4019e4:	lsl	w1, w0, #10
  4019e8:	ldr	w0, [sp, #68]
  4019ec:	orr	w7, w1, w0
  4019f0:	adrp	x0, 402000 <make_overlay+0x498>
  4019f4:	add	x1, x0, #0xb9b
  4019f8:	ldr	x6, [sp, #40]
  4019fc:	adrp	x0, 402000 <make_overlay+0x498>
  401a00:	add	x5, x0, #0xce0
  401a04:	adrp	x0, 403000 <_fini+0x48c>
  401a08:	add	x4, x0, #0x1f0
  401a0c:	mov	w3, #0x35                  	// #53
  401a10:	mov	x2, x1
  401a14:	ldr	w1, [sp, #72]
  401a18:	mov	w0, w7
  401a1c:	bl	4011c0 <log_internal_realm@plt>
  401a20:	b	401b04 <make_volatile+0x4fc>
  401a24:	ldr	w0, [sp, #72]
  401a28:	cmp	w0, #0x0
  401a2c:	b	401b04 <make_volatile+0x4fc>
  401a30:	mov	x4, #0x0                   	// #0
  401a34:	mov	x3, #0x4000                	// #16384
  401a38:	movk	x3, #0x8, lsl #16
  401a3c:	mov	x2, #0x0                   	// #0
  401a40:	adrp	x0, 402000 <make_overlay+0x498>
  401a44:	add	x1, x0, #0xd00
  401a48:	mov	x0, #0x0                   	// #0
  401a4c:	bl	4011f0 <mount@plt>
  401a50:	cmp	w0, #0x0
  401a54:	b.ge	401ad8 <make_volatile+0x4d0>  // b.tcont
  401a58:	mov	w0, #0x4                   	// #4
  401a5c:	str	w0, [sp, #56]
  401a60:	bl	401150 <__errno_location@plt>
  401a64:	ldr	w0, [x0]
  401a68:	str	w0, [sp, #60]
  401a6c:	str	wzr, [sp, #64]
  401a70:	ldr	w0, [sp, #64]
  401a74:	bl	401260 <log_get_max_level_realm@plt>
  401a78:	mov	w1, w0
  401a7c:	ldr	w0, [sp, #56]
  401a80:	and	w0, w0, #0x7
  401a84:	cmp	w1, w0
  401a88:	b.lt	401ad0 <make_volatile+0x4c8>  // b.tstop
  401a8c:	ldr	w0, [sp, #64]
  401a90:	lsl	w1, w0, #10
  401a94:	ldr	w0, [sp, #56]
  401a98:	orr	w7, w1, w0
  401a9c:	adrp	x0, 402000 <make_overlay+0x498>
  401aa0:	add	x1, x0, #0xb9b
  401aa4:	ldr	x6, [sp, #40]
  401aa8:	adrp	x0, 402000 <make_overlay+0x498>
  401aac:	add	x5, x0, #0xd08
  401ab0:	adrp	x0, 403000 <_fini+0x48c>
  401ab4:	add	x4, x0, #0x1f0
  401ab8:	mov	w3, #0x3a                  	// #58
  401abc:	mov	x2, x1
  401ac0:	ldr	w1, [sp, #60]
  401ac4:	mov	w0, w7
  401ac8:	bl	4011c0 <log_internal_realm@plt>
  401acc:	b	401ad8 <make_volatile+0x4d0>
  401ad0:	ldr	w0, [sp, #60]
  401ad4:	cmp	w0, #0x0
  401ad8:	mov	x5, #0x0                   	// #0
  401adc:	mov	x4, #0x2000                	// #8192
  401ae0:	mov	x3, #0x0                   	// #0
  401ae4:	ldr	x2, [sp, #40]
  401ae8:	adrp	x0, 402000 <make_overlay+0x498>
  401aec:	add	x1, x0, #0xbf8
  401af0:	mov	w0, #0x3                   	// #3
  401af4:	bl	401030 <mount_verbose@plt>
  401af8:	str	w0, [sp, #52]
  401afc:	b	401b04 <make_volatile+0x4fc>
  401b00:	nop
  401b04:	mov	w1, #0x0                   	// #0
  401b08:	adrp	x0, 402000 <make_overlay+0x498>
  401b0c:	add	x0, x0, #0xbf8
  401b10:	bl	401190 <umount_recursive@plt>
  401b14:	b	401b1c <make_volatile+0x514>
  401b18:	nop
  401b1c:	adrp	x0, 402000 <make_overlay+0x498>
  401b20:	add	x0, x0, #0xbf8
  401b24:	bl	401140 <rmdir@plt>
  401b28:	ldr	w19, [sp, #52]
  401b2c:	add	x0, sp, #0x80
  401b30:	bl	401468 <freep>
  401b34:	mov	w1, w19
  401b38:	adrp	x0, 413000 <__FRAME_END__+0xfb30>
  401b3c:	add	x0, x0, #0xc80
  401b40:	ldr	x2, [sp, #136]
  401b44:	ldr	x0, [x0]
  401b48:	eor	x0, x2, x0
  401b4c:	cmp	x0, #0x0
  401b50:	b.eq	401b58 <make_volatile+0x550>  // b.none
  401b54:	bl	401160 <__stack_chk_fail@plt>
  401b58:	mov	w0, w1
  401b5c:	ldr	x19, [sp, #16]
  401b60:	ldp	x29, x30, [sp], #144
  401b64:	ret

0000000000401b68 <make_overlay>:
  401b68:	stp	x29, x30, [sp, #-192]!
  401b6c:	mov	x29, sp
  401b70:	str	x19, [sp, #16]
  401b74:	str	x0, [x29, #40]
  401b78:	adrp	x0, 413000 <__FRAME_END__+0xfb30>
  401b7c:	add	x0, x0, #0xc80
  401b80:	ldr	x1, [x0]
  401b84:	str	x1, [x29, #184]
  401b88:	mov	x1, #0x0                   	// #0
  401b8c:	str	xzr, [x29, #104]
  401b90:	strb	wzr, [x29, #63]
  401b94:	str	xzr, [x29, #136]
  401b98:	ldr	x0, [x29, #40]
  401b9c:	cmp	x0, #0x0
  401ba0:	cset	w0, eq  // eq = none
  401ba4:	and	w0, w0, #0xff
  401ba8:	and	x0, x0, #0xff
  401bac:	cmp	x0, #0x0
  401bb0:	b.eq	401bdc <make_overlay+0x74>  // b.none
  401bb4:	adrp	x0, 402000 <make_overlay+0x498>
  401bb8:	add	x1, x0, #0xb9b
  401bbc:	adrp	x0, 403000 <_fini+0x48c>
  401bc0:	add	x4, x0, #0x200
  401bc4:	mov	w3, #0x4d                  	// #77
  401bc8:	mov	x2, x1
  401bcc:	adrp	x0, 402000 <make_overlay+0x498>
  401bd0:	add	x1, x0, #0xbc0
  401bd4:	mov	w0, #0x0                   	// #0
  401bd8:	bl	401100 <log_assert_failed_realm@plt>
  401bdc:	mov	w1, #0x1c0                 	// #448
  401be0:	adrp	x0, 402000 <make_overlay+0x498>
  401be4:	add	x0, x0, #0xd40
  401be8:	bl	401230 <mkdir_p@plt>
  401bec:	str	w0, [x29, #64]
  401bf0:	ldr	w0, [x29, #64]
  401bf4:	cmp	w0, #0x0
  401bf8:	b.ge	401c88 <make_overlay+0x120>  // b.tcont
  401bfc:	mov	w0, #0x3                   	// #3
  401c00:	str	w0, [x29, #92]
  401c04:	ldr	w0, [x29, #64]
  401c08:	str	w0, [x29, #96]
  401c0c:	str	wzr, [x29, #100]
  401c10:	ldr	w0, [x29, #100]
  401c14:	bl	401260 <log_get_max_level_realm@plt>
  401c18:	mov	w1, w0
  401c1c:	ldr	w0, [x29, #92]
  401c20:	and	w0, w0, #0x7
  401c24:	cmp	w1, w0
  401c28:	b.lt	401c70 <make_overlay+0x108>  // b.tstop
  401c2c:	ldr	w0, [x29, #100]
  401c30:	lsl	w1, w0, #10
  401c34:	ldr	w0, [x29, #92]
  401c38:	orr	w6, w1, w0
  401c3c:	adrp	x0, 402000 <make_overlay+0x498>
  401c40:	add	x1, x0, #0xb9b
  401c44:	adrp	x0, 402000 <make_overlay+0x498>
  401c48:	add	x5, x0, #0xd60
  401c4c:	adrp	x0, 403000 <_fini+0x48c>
  401c50:	add	x4, x0, #0x210
  401c54:	mov	w3, #0x51                  	// #81
  401c58:	mov	x2, x1
  401c5c:	ldr	w1, [x29, #96]
  401c60:	mov	w0, w6
  401c64:	bl	4011c0 <log_internal_realm@plt>
  401c68:	mov	w19, w0
  401c6c:	b	402064 <make_overlay+0x4fc>
  401c70:	ldr	w0, [x29, #96]
  401c74:	cmp	w0, #0x0
  401c78:	cneg	w0, w0, lt  // lt = tstop
  401c7c:	and	w0, w0, #0xff
  401c80:	neg	w19, w0
  401c84:	b	402064 <make_overlay+0x4fc>
  401c88:	adrp	x0, 402000 <make_overlay+0x498>
  401c8c:	add	x5, x0, #0xc50
  401c90:	mov	x4, #0x1000000             	// #16777216
  401c94:	adrp	x0, 402000 <make_overlay+0x498>
  401c98:	add	x3, x0, #0xc60
  401c9c:	adrp	x0, 402000 <make_overlay+0x498>
  401ca0:	add	x2, x0, #0xd40
  401ca4:	adrp	x0, 402000 <make_overlay+0x498>
  401ca8:	add	x1, x0, #0xc60
  401cac:	mov	w0, #0x3                   	// #3
  401cb0:	bl	401030 <mount_verbose@plt>
  401cb4:	str	w0, [x29, #64]
  401cb8:	ldr	w0, [x29, #64]
  401cbc:	cmp	w0, #0x0
  401cc0:	b.lt	402038 <make_overlay+0x4d0>  // b.tstop
  401cc4:	mov	w0, #0x1                   	// #1
  401cc8:	strb	w0, [x29, #63]
  401ccc:	mov	w1, #0x1ed                 	// #493
  401cd0:	adrp	x0, 402000 <make_overlay+0x498>
  401cd4:	add	x0, x0, #0xd90
  401cd8:	bl	4011e0 <mkdir@plt>
  401cdc:	cmp	w0, #0x0
  401ce0:	b.ge	401d74 <make_overlay+0x20c>  // b.tcont
  401ce4:	mov	w0, #0x3                   	// #3
  401ce8:	str	w0, [x29, #80]
  401cec:	bl	401150 <__errno_location@plt>
  401cf0:	ldr	w0, [x0]
  401cf4:	str	w0, [x29, #84]
  401cf8:	str	wzr, [x29, #88]
  401cfc:	ldr	w0, [x29, #88]
  401d00:	bl	401260 <log_get_max_level_realm@plt>
  401d04:	mov	w1, w0
  401d08:	ldr	w0, [x29, #80]
  401d0c:	and	w0, w0, #0x7
  401d10:	cmp	w1, w0
  401d14:	b.lt	401d58 <make_overlay+0x1f0>  // b.tstop
  401d18:	ldr	w0, [x29, #88]
  401d1c:	lsl	w1, w0, #10
  401d20:	ldr	w0, [x29, #80]
  401d24:	orr	w6, w1, w0
  401d28:	adrp	x0, 402000 <make_overlay+0x498>
  401d2c:	add	x1, x0, #0xb9b
  401d30:	adrp	x0, 402000 <make_overlay+0x498>
  401d34:	add	x5, x0, #0xdb8
  401d38:	adrp	x0, 403000 <_fini+0x48c>
  401d3c:	add	x4, x0, #0x210
  401d40:	mov	w3, #0x5a                  	// #90
  401d44:	mov	x2, x1
  401d48:	ldr	w1, [x29, #84]
  401d4c:	mov	w0, w6
  401d50:	bl	4011c0 <log_internal_realm@plt>
  401d54:	b	401d6c <make_overlay+0x204>
  401d58:	ldr	w0, [x29, #84]
  401d5c:	cmp	w0, #0x0
  401d60:	cneg	w0, w0, lt  // lt = tstop
  401d64:	and	w0, w0, #0xff
  401d68:	neg	w0, w0
  401d6c:	str	w0, [x29, #64]
  401d70:	b	40203c <make_overlay+0x4d4>
  401d74:	mov	w1, #0x1ed                 	// #493
  401d78:	adrp	x0, 402000 <make_overlay+0x498>
  401d7c:	add	x0, x0, #0xdf0
  401d80:	bl	4011e0 <mkdir@plt>
  401d84:	cmp	w0, #0x0
  401d88:	b.ge	401e1c <make_overlay+0x2b4>  // b.tcont
  401d8c:	mov	w0, #0x3                   	// #3
  401d90:	str	w0, [x29, #68]
  401d94:	bl	401150 <__errno_location@plt>
  401d98:	ldr	w0, [x0]
  401d9c:	str	w0, [x29, #72]
  401da0:	str	wzr, [x29, #76]
  401da4:	ldr	w0, [x29, #76]
  401da8:	bl	401260 <log_get_max_level_realm@plt>
  401dac:	mov	w1, w0
  401db0:	ldr	w0, [x29, #68]
  401db4:	and	w0, w0, #0x7
  401db8:	cmp	w1, w0
  401dbc:	b.lt	401e00 <make_overlay+0x298>  // b.tstop
  401dc0:	ldr	w0, [x29, #76]
  401dc4:	lsl	w1, w0, #10
  401dc8:	ldr	w0, [x29, #68]
  401dcc:	orr	w6, w1, w0
  401dd0:	adrp	x0, 402000 <make_overlay+0x498>
  401dd4:	add	x1, x0, #0xb9b
  401dd8:	adrp	x0, 402000 <make_overlay+0x498>
  401ddc:	add	x5, x0, #0xe18
  401de0:	adrp	x0, 403000 <_fini+0x48c>
  401de4:	add	x4, x0, #0x210
  401de8:	mov	w3, #0x5f                  	// #95
  401dec:	mov	x2, x1
  401df0:	ldr	w1, [x29, #72]
  401df4:	mov	w0, w6
  401df8:	bl	4011c0 <log_internal_realm@plt>
  401dfc:	b	401e14 <make_overlay+0x2ac>
  401e00:	ldr	w0, [x29, #72]
  401e04:	cmp	w0, #0x0
  401e08:	cneg	w0, w0, lt  // lt = tstop
  401e0c:	and	w0, w0, #0xff
  401e10:	neg	w0, w0
  401e14:	str	w0, [x29, #64]
  401e18:	b	40203c <make_overlay+0x4d4>
  401e1c:	adrp	x0, 402000 <make_overlay+0x498>
  401e20:	add	x1, x0, #0xe50
  401e24:	ldr	x0, [x29, #40]
  401e28:	bl	4011b0 <shell_escape@plt>
  401e2c:	str	x0, [x29, #104]
  401e30:	ldr	x0, [x29, #104]
  401e34:	cmp	x0, #0x0
  401e38:	b.ne	401e60 <make_overlay+0x2f8>  // b.any
  401e3c:	adrp	x0, 402000 <make_overlay+0x498>
  401e40:	add	x1, x0, #0xb9b
  401e44:	adrp	x0, 403000 <_fini+0x48c>
  401e48:	add	x3, x0, #0x210
  401e4c:	mov	w2, #0x65                  	// #101
  401e50:	mov	w0, #0x0                   	// #0
  401e54:	bl	401250 <log_oom_internal@plt>
  401e58:	str	w0, [x29, #64]
  401e5c:	b	40203c <make_overlay+0x4d4>
  401e60:	adrp	x0, 402000 <make_overlay+0x498>
  401e64:	add	x0, x0, #0xe58
  401e68:	str	x0, [x29, #160]
  401e6c:	ldr	x0, [x29, #104]
  401e70:	str	x0, [x29, #168]
  401e74:	adrp	x0, 402000 <make_overlay+0x498>
  401e78:	add	x0, x0, #0xe68
  401e7c:	str	x0, [x29, #176]
  401e80:	str	xzr, [x29, #120]
  401e84:	str	xzr, [x29, #128]
  401e88:	b	401ebc <make_overlay+0x354>
  401e8c:	ldr	x0, [x29, #128]
  401e90:	lsl	x0, x0, #3
  401e94:	add	x1, x29, #0xa0
  401e98:	ldr	x0, [x1, x0]
  401e9c:	bl	401240 <strlen@plt>
  401ea0:	mov	x1, x0
  401ea4:	ldr	x0, [x29, #120]
  401ea8:	add	x0, x0, x1
  401eac:	str	x0, [x29, #120]
  401eb0:	ldr	x0, [x29, #128]
  401eb4:	add	x0, x0, #0x1
  401eb8:	str	x0, [x29, #128]
  401ebc:	ldr	x0, [x29, #128]
  401ec0:	cmp	x0, #0x2
  401ec4:	b.hi	401ee0 <make_overlay+0x378>  // b.pmore
  401ec8:	ldr	x0, [x29, #128]
  401ecc:	lsl	x0, x0, #3
  401ed0:	add	x1, x29, #0xa0
  401ed4:	ldr	x0, [x1, x0]
  401ed8:	cmp	x0, #0x0
  401edc:	b.ne	401e8c <make_overlay+0x324>  // b.any
  401ee0:	ldr	x0, [x29, #120]
  401ee4:	add	x0, x0, #0x1
  401ee8:	str	x0, [x29, #144]
  401eec:	ldr	x1, [x29, #144]
  401ef0:	mov	x0, #0x1                   	// #1
  401ef4:	bl	40148c <size_multiply_overflow>
  401ef8:	and	w0, w0, #0xff
  401efc:	and	x0, x0, #0xff
  401f00:	cmp	x0, #0x0
  401f04:	b.eq	401f30 <make_overlay+0x3c8>  // b.none
  401f08:	adrp	x0, 402000 <make_overlay+0x498>
  401f0c:	add	x1, x0, #0xb9b
  401f10:	adrp	x0, 403000 <_fini+0x48c>
  401f14:	add	x4, x0, #0x200
  401f18:	mov	w3, #0x69                  	// #105
  401f1c:	mov	x2, x1
  401f20:	adrp	x0, 402000 <make_overlay+0x498>
  401f24:	add	x1, x0, #0xec0
  401f28:	mov	w0, #0x0                   	// #0
  401f2c:	bl	401100 <log_assert_failed_realm@plt>
  401f30:	ldr	x0, [x29, #144]
  401f34:	cmp	x0, #0x400, lsl #12
  401f38:	cset	w0, hi  // hi = pmore
  401f3c:	and	w0, w0, #0xff
  401f40:	and	x0, x0, #0xff
  401f44:	cmp	x0, #0x0
  401f48:	b.eq	401f74 <make_overlay+0x40c>  // b.none
  401f4c:	adrp	x0, 402000 <make_overlay+0x498>
  401f50:	add	x1, x0, #0xb9b
  401f54:	adrp	x0, 403000 <_fini+0x48c>
  401f58:	add	x4, x0, #0x200
  401f5c:	mov	w3, #0x69                  	// #105
  401f60:	mov	x2, x1
  401f64:	adrp	x0, 402000 <make_overlay+0x498>
  401f68:	add	x1, x0, #0xef0
  401f6c:	mov	w0, #0x0                   	// #0
  401f70:	bl	401100 <log_assert_failed_realm@plt>
  401f74:	ldr	x0, [x29, #144]
  401f78:	add	x0, x0, #0xf
  401f7c:	lsr	x0, x0, #4
  401f80:	lsl	x0, x0, #4
  401f84:	sub	sp, sp, x0
  401f88:	mov	x0, sp
  401f8c:	add	x0, x0, #0xf
  401f90:	lsr	x0, x0, #4
  401f94:	lsl	x0, x0, #4
  401f98:	str	x0, [x29, #152]
  401f9c:	ldr	x0, [x29, #152]
  401fa0:	str	x0, [x29, #112]
  401fa4:	str	xzr, [x29, #128]
  401fa8:	b	401fd8 <make_overlay+0x470>
  401fac:	ldr	x0, [x29, #128]
  401fb0:	lsl	x0, x0, #3
  401fb4:	add	x1, x29, #0xa0
  401fb8:	ldr	x0, [x1, x0]
  401fbc:	mov	x1, x0
  401fc0:	ldr	x0, [x29, #112]
  401fc4:	bl	401040 <stpcpy@plt>
  401fc8:	str	x0, [x29, #112]
  401fcc:	ldr	x0, [x29, #128]
  401fd0:	add	x0, x0, #0x1
  401fd4:	str	x0, [x29, #128]
  401fd8:	ldr	x0, [x29, #128]
  401fdc:	cmp	x0, #0x2
  401fe0:	b.hi	401ffc <make_overlay+0x494>  // b.pmore
  401fe4:	ldr	x0, [x29, #128]
  401fe8:	lsl	x0, x0, #3
  401fec:	add	x1, x29, #0xa0
  401ff0:	ldr	x0, [x1, x0]
  401ff4:	cmp	x0, #0x0
  401ff8:	b.ne	401fac <make_overlay+0x444>  // b.any
  401ffc:	ldr	x0, [x29, #112]
  402000:	strb	wzr, [x0]
  402004:	ldr	x0, [x29, #152]
  402008:	str	x0, [x29, #136]
  40200c:	ldr	x5, [x29, #136]
  402010:	mov	x4, #0x0                   	// #0
  402014:	adrp	x0, 402000 <make_overlay+0x498>
  402018:	add	x3, x0, #0xf10
  40201c:	ldr	x2, [x29, #40]
  402020:	adrp	x0, 402000 <make_overlay+0x498>
  402024:	add	x1, x0, #0xf10
  402028:	mov	w0, #0x3                   	// #3
  40202c:	bl	401030 <mount_verbose@plt>
  402030:	str	w0, [x29, #64]
  402034:	b	40203c <make_overlay+0x4d4>
  402038:	nop
  40203c:	ldrb	w0, [x29, #63]
  402040:	cmp	w0, #0x0
  402044:	b.eq	402054 <make_overlay+0x4ec>  // b.none
  402048:	adrp	x0, 402000 <make_overlay+0x498>
  40204c:	add	x0, x0, #0xd40
  402050:	bl	401090 <umount_verbose@plt>
  402054:	adrp	x0, 402000 <make_overlay+0x498>
  402058:	add	x0, x0, #0xd40
  40205c:	bl	401140 <rmdir@plt>
  402060:	ldr	w19, [x29, #64]
  402064:	add	x0, x29, #0x68
  402068:	bl	401468 <freep>
  40206c:	mov	w1, w19
  402070:	adrp	x0, 413000 <__FRAME_END__+0xfb30>
  402074:	add	x0, x0, #0xc80
  402078:	ldr	x2, [x29, #184]
  40207c:	ldr	x0, [x0]
  402080:	eor	x0, x2, x0
  402084:	cmp	x0, #0x0
  402088:	b.eq	402090 <make_overlay+0x528>  // b.none
  40208c:	bl	401160 <__stack_chk_fail@plt>
  402090:	mov	w0, w1
  402094:	mov	sp, x29
  402098:	ldr	x19, [sp, #16]
  40209c:	ldp	x29, x30, [sp], #192
  4020a0:	ret

00000000004020a4 <run>:
  4020a4:	stp	x29, x30, [sp, #-256]!
  4020a8:	mov	x29, sp
  4020ac:	stp	x19, x20, [sp, #16]
  4020b0:	str	w0, [sp, #44]
  4020b4:	str	x1, [sp, #32]
  4020b8:	adrp	x0, 413000 <__FRAME_END__+0xfb30>
  4020bc:	add	x0, x0, #0xc80
  4020c0:	ldr	x1, [x0]
  4020c4:	str	x1, [sp, #248]
  4020c8:	mov	x1, #0x0                   	// #0
  4020cc:	mov	w0, #0xffffffff            	// #-1
  4020d0:	str	w0, [sp, #60]
  4020d4:	bl	4010f0 <log_setup_service@plt>
  4020d8:	ldr	w0, [sp, #44]
  4020dc:	cmp	w0, #0x3
  4020e0:	b.le	402174 <run+0xd0>
  4020e4:	mov	w0, #0x3                   	// #3
  4020e8:	str	w0, [sp, #212]
  4020ec:	mov	w0, #0x16                  	// #22
  4020f0:	movk	w0, #0x4000, lsl #16
  4020f4:	str	w0, [sp, #216]
  4020f8:	str	wzr, [sp, #220]
  4020fc:	ldr	w0, [sp, #220]
  402100:	bl	401260 <log_get_max_level_realm@plt>
  402104:	mov	w1, w0
  402108:	ldr	w0, [sp, #212]
  40210c:	and	w0, w0, #0x7
  402110:	cmp	w1, w0
  402114:	b.lt	40215c <run+0xb8>  // b.tstop
  402118:	ldr	w0, [sp, #220]
  40211c:	lsl	w1, w0, #10
  402120:	ldr	w0, [sp, #212]
  402124:	orr	w6, w1, w0
  402128:	adrp	x0, 402000 <make_overlay+0x498>
  40212c:	add	x1, x0, #0xb9b
  402130:	adrp	x0, 402000 <make_overlay+0x498>
  402134:	add	x5, x0, #0xf18
  402138:	adrp	x0, 403000 <_fini+0x48c>
  40213c:	add	x4, x0, #0x220
  402140:	mov	w3, #0x7d                  	// #125
  402144:	mov	x2, x1
  402148:	ldr	w1, [sp, #216]
  40214c:	mov	w0, w6
  402150:	bl	4011c0 <log_internal_realm@plt>
  402154:	mov	w19, w0
  402158:	b	402a68 <run+0x9c4>
  40215c:	ldr	w0, [sp, #216]
  402160:	cmp	w0, #0x0
  402164:	cneg	w0, w0, lt  // lt = tstop
  402168:	and	w0, w0, #0xff
  40216c:	neg	w19, w0
  402170:	b	402a68 <run+0x9c4>
  402174:	add	x0, sp, #0x3c
  402178:	bl	4010a0 <query_volatile_mode@plt>
  40217c:	str	w0, [sp, #64]
  402180:	ldr	w0, [sp, #64]
  402184:	cmp	w0, #0x0
  402188:	b.ge	402218 <run+0x174>  // b.tcont
  40218c:	mov	w0, #0x3                   	// #3
  402190:	str	w0, [sp, #200]
  402194:	ldr	w0, [sp, #64]
  402198:	str	w0, [sp, #204]
  40219c:	str	wzr, [sp, #208]
  4021a0:	ldr	w0, [sp, #208]
  4021a4:	bl	401260 <log_get_max_level_realm@plt>
  4021a8:	mov	w1, w0
  4021ac:	ldr	w0, [sp, #200]
  4021b0:	and	w0, w0, #0x7
  4021b4:	cmp	w1, w0
  4021b8:	b.lt	402200 <run+0x15c>  // b.tstop
  4021bc:	ldr	w0, [sp, #208]
  4021c0:	lsl	w1, w0, #10
  4021c4:	ldr	w0, [sp, #200]
  4021c8:	orr	w6, w1, w0
  4021cc:	adrp	x0, 402000 <make_overlay+0x498>
  4021d0:	add	x1, x0, #0xb9b
  4021d4:	adrp	x0, 402000 <make_overlay+0x498>
  4021d8:	add	x5, x0, #0xf50
  4021dc:	adrp	x0, 403000 <_fini+0x48c>
  4021e0:	add	x4, x0, #0x220
  4021e4:	mov	w3, #0x82                  	// #130
  4021e8:	mov	x2, x1
  4021ec:	ldr	w1, [sp, #204]
  4021f0:	mov	w0, w6
  4021f4:	bl	4011c0 <log_internal_realm@plt>
  4021f8:	mov	w19, w0
  4021fc:	b	402a68 <run+0x9c4>
  402200:	ldr	w0, [sp, #204]
  402204:	cmp	w0, #0x0
  402208:	cneg	w0, w0, lt  // lt = tstop
  40220c:	and	w0, w0, #0xff
  402210:	neg	w19, w0
  402214:	b	402a68 <run+0x9c4>
  402218:	ldr	w0, [sp, #64]
  40221c:	cmp	w0, #0x0
  402220:	b.ne	4022f0 <run+0x24c>  // b.any
  402224:	ldr	w0, [sp, #44]
  402228:	cmp	w0, #0x1
  40222c:	b.le	4022f0 <run+0x24c>
  402230:	ldr	x0, [sp, #32]
  402234:	add	x0, x0, #0x8
  402238:	ldr	x0, [x0]
  40223c:	bl	4010e0 <volatile_mode_from_string@plt>
  402240:	str	w0, [sp, #60]
  402244:	ldr	w0, [sp, #60]
  402248:	cmp	w0, #0x0
  40224c:	b.ge	4022f0 <run+0x24c>  // b.tcont
  402250:	mov	w0, #0x3                   	// #3
  402254:	str	w0, [sp, #68]
  402258:	mov	w0, #0x16                  	// #22
  40225c:	movk	w0, #0x4000, lsl #16
  402260:	str	w0, [sp, #72]
  402264:	str	wzr, [sp, #76]
  402268:	ldr	w0, [sp, #76]
  40226c:	bl	401260 <log_get_max_level_realm@plt>
  402270:	mov	w1, w0
  402274:	ldr	w0, [sp, #68]
  402278:	and	w0, w0, #0x7
  40227c:	cmp	w1, w0
  402280:	b.lt	4022d8 <run+0x234>  // b.tstop
  402284:	ldr	w0, [sp, #76]
  402288:	lsl	w1, w0, #10
  40228c:	ldr	w0, [sp, #68]
  402290:	orr	w7, w1, w0
  402294:	adrp	x0, 402000 <make_overlay+0x498>
  402298:	add	x1, x0, #0xb9b
  40229c:	ldr	x0, [sp, #32]
  4022a0:	add	x0, x0, #0x8
  4022a4:	ldr	x0, [x0]
  4022a8:	mov	x6, x0
  4022ac:	adrp	x0, 402000 <make_overlay+0x498>
  4022b0:	add	x5, x0, #0xf90
  4022b4:	adrp	x0, 403000 <_fini+0x48c>
  4022b8:	add	x4, x0, #0x220
  4022bc:	mov	w3, #0x87                  	// #135
  4022c0:	mov	x2, x1
  4022c4:	ldr	w1, [sp, #72]
  4022c8:	mov	w0, w7
  4022cc:	bl	4011c0 <log_internal_realm@plt>
  4022d0:	mov	w19, w0
  4022d4:	b	402a68 <run+0x9c4>
  4022d8:	ldr	w0, [sp, #72]
  4022dc:	cmp	w0, #0x0
  4022e0:	cneg	w0, w0, lt  // lt = tstop
  4022e4:	and	w0, w0, #0xff
  4022e8:	neg	w19, w0
  4022ec:	b	402a68 <run+0x9c4>
  4022f0:	ldr	w0, [sp, #44]
  4022f4:	cmp	w0, #0x2
  4022f8:	b.gt	40230c <run+0x268>
  4022fc:	adrp	x0, 402000 <make_overlay+0x498>
  402300:	add	x0, x0, #0xfb8
  402304:	str	x0, [sp, #240]
  402308:	b	402514 <run+0x470>
  40230c:	ldr	x0, [sp, #32]
  402310:	ldr	x0, [x0, #16]
  402314:	str	x0, [sp, #240]
  402318:	ldr	x0, [sp, #240]
  40231c:	bl	401508 <isempty>
  402320:	and	w0, w0, #0xff
  402324:	cmp	w0, #0x0
  402328:	b.eq	4023bc <run+0x318>  // b.none
  40232c:	mov	w0, #0x3                   	// #3
  402330:	str	w0, [sp, #104]
  402334:	mov	w0, #0x16                  	// #22
  402338:	movk	w0, #0x4000, lsl #16
  40233c:	str	w0, [sp, #108]
  402340:	str	wzr, [sp, #112]
  402344:	ldr	w0, [sp, #112]
  402348:	bl	401260 <log_get_max_level_realm@plt>
  40234c:	mov	w1, w0
  402350:	ldr	w0, [sp, #104]
  402354:	and	w0, w0, #0x7
  402358:	cmp	w1, w0
  40235c:	b.lt	4023a4 <run+0x300>  // b.tstop
  402360:	ldr	w0, [sp, #112]
  402364:	lsl	w1, w0, #10
  402368:	ldr	w0, [sp, #104]
  40236c:	orr	w6, w1, w0
  402370:	adrp	x0, 402000 <make_overlay+0x498>
  402374:	add	x1, x0, #0xb9b
  402378:	adrp	x0, 402000 <make_overlay+0x498>
  40237c:	add	x5, x0, #0xfc8
  402380:	adrp	x0, 403000 <_fini+0x48c>
  402384:	add	x4, x0, #0x220
  402388:	mov	w3, #0x90                  	// #144
  40238c:	mov	x2, x1
  402390:	ldr	w1, [sp, #108]
  402394:	mov	w0, w6
  402398:	bl	4011c0 <log_internal_realm@plt>
  40239c:	mov	w19, w0
  4023a0:	b	402a68 <run+0x9c4>
  4023a4:	ldr	w0, [sp, #108]
  4023a8:	cmp	w0, #0x0
  4023ac:	cneg	w0, w0, lt  // lt = tstop
  4023b0:	and	w0, w0, #0xff
  4023b4:	neg	w19, w0
  4023b8:	b	402a68 <run+0x9c4>
  4023bc:	ldr	x0, [sp, #240]
  4023c0:	bl	401110 <path_is_absolute@plt>
  4023c4:	and	w0, w0, #0xff
  4023c8:	eor	w0, w0, #0x1
  4023cc:	and	w0, w0, #0xff
  4023d0:	cmp	w0, #0x0
  4023d4:	b.eq	402468 <run+0x3c4>  // b.none
  4023d8:	mov	w0, #0x3                   	// #3
  4023dc:	str	w0, [sp, #92]
  4023e0:	mov	w0, #0x16                  	// #22
  4023e4:	movk	w0, #0x4000, lsl #16
  4023e8:	str	w0, [sp, #96]
  4023ec:	str	wzr, [sp, #100]
  4023f0:	ldr	w0, [sp, #100]
  4023f4:	bl	401260 <log_get_max_level_realm@plt>
  4023f8:	mov	w1, w0
  4023fc:	ldr	w0, [sp, #92]
  402400:	and	w0, w0, #0x7
  402404:	cmp	w1, w0
  402408:	b.lt	402450 <run+0x3ac>  // b.tstop
  40240c:	ldr	w0, [sp, #100]
  402410:	lsl	w1, w0, #10
  402414:	ldr	w0, [sp, #92]
  402418:	orr	w6, w1, w0
  40241c:	adrp	x0, 402000 <make_overlay+0x498>
  402420:	add	x1, x0, #0xb9b
  402424:	adrp	x0, 402000 <make_overlay+0x498>
  402428:	add	x5, x0, #0xfe8
  40242c:	adrp	x0, 403000 <_fini+0x48c>
  402430:	add	x4, x0, #0x220
  402434:	mov	w3, #0x93                  	// #147
  402438:	mov	x2, x1
  40243c:	ldr	w1, [sp, #96]
  402440:	mov	w0, w6
  402444:	bl	4011c0 <log_internal_realm@plt>
  402448:	mov	w19, w0
  40244c:	b	402a68 <run+0x9c4>
  402450:	ldr	w0, [sp, #96]
  402454:	cmp	w0, #0x0
  402458:	cneg	w0, w0, lt  // lt = tstop
  40245c:	and	w0, w0, #0xff
  402460:	neg	w19, w0
  402464:	b	402a68 <run+0x9c4>
  402468:	adrp	x0, 402000 <make_overlay+0x498>
  40246c:	add	x1, x0, #0xd00
  402470:	ldr	x0, [sp, #240]
  402474:	bl	4010b0 <path_equal@plt>
  402478:	and	w0, w0, #0xff
  40247c:	cmp	w0, #0x0
  402480:	b.eq	402514 <run+0x470>  // b.none
  402484:	mov	w0, #0x3                   	// #3
  402488:	str	w0, [sp, #80]
  40248c:	mov	w0, #0x16                  	// #22
  402490:	movk	w0, #0x4000, lsl #16
  402494:	str	w0, [sp, #84]
  402498:	str	wzr, [sp, #88]
  40249c:	ldr	w0, [sp, #88]
  4024a0:	bl	401260 <log_get_max_level_realm@plt>
  4024a4:	mov	w1, w0
  4024a8:	ldr	w0, [sp, #80]
  4024ac:	and	w0, w0, #0x7
  4024b0:	cmp	w1, w0
  4024b4:	b.lt	4024fc <run+0x458>  // b.tstop
  4024b8:	ldr	w0, [sp, #88]
  4024bc:	lsl	w1, w0, #10
  4024c0:	ldr	w0, [sp, #80]
  4024c4:	orr	w6, w1, w0
  4024c8:	adrp	x0, 402000 <make_overlay+0x498>
  4024cc:	add	x1, x0, #0xb9b
  4024d0:	adrp	x0, 403000 <_fini+0x48c>
  4024d4:	add	x5, x0, #0x18
  4024d8:	adrp	x0, 403000 <_fini+0x48c>
  4024dc:	add	x4, x0, #0x220
  4024e0:	mov	w3, #0x96                  	// #150
  4024e4:	mov	x2, x1
  4024e8:	ldr	w1, [sp, #84]
  4024ec:	mov	w0, w6
  4024f0:	bl	4011c0 <log_internal_realm@plt>
  4024f4:	mov	w19, w0
  4024f8:	b	402a68 <run+0x9c4>
  4024fc:	ldr	w0, [sp, #84]
  402500:	cmp	w0, #0x0
  402504:	cneg	w0, w0, lt  // lt = tstop
  402508:	and	w0, w0, #0xff
  40250c:	neg	w19, w0
  402510:	b	402a68 <run+0x9c4>
  402514:	strb	wzr, [sp, #59]
  402518:	ldr	w0, [sp, #60]
  40251c:	cmp	w0, #0x1
  402520:	b.eq	40252c <run+0x488>  // b.none
  402524:	cmp	w0, #0x3
  402528:	b.ne	402534 <run+0x490>  // b.any
  40252c:	mov	w0, #0x1                   	// #1
  402530:	strb	w0, [sp, #59]
  402534:	nop
  402538:	ldrb	w0, [sp, #59]
  40253c:	eor	w0, w0, #0x1
  402540:	and	w0, w0, #0xff
  402544:	cmp	w0, #0x0
  402548:	b.eq	402554 <run+0x4b0>  // b.none
  40254c:	mov	w19, #0x0                   	// #0
  402550:	b	402a68 <run+0x9c4>
  402554:	mov	w2, #0x400                 	// #1024
  402558:	mov	x1, #0x0                   	// #0
  40255c:	ldr	x0, [sp, #240]
  402560:	bl	4011d0 <path_is_mount_point@plt>
  402564:	str	w0, [sp, #64]
  402568:	ldr	w0, [sp, #64]
  40256c:	cmp	w0, #0x0
  402570:	b.ge	402604 <run+0x560>  // b.tcont
  402574:	mov	w0, #0x3                   	// #3
  402578:	str	w0, [sp, #188]
  40257c:	ldr	w0, [sp, #64]
  402580:	str	w0, [sp, #192]
  402584:	str	wzr, [sp, #196]
  402588:	ldr	w0, [sp, #196]
  40258c:	bl	401260 <log_get_max_level_realm@plt>
  402590:	mov	w1, w0
  402594:	ldr	w0, [sp, #188]
  402598:	and	w0, w0, #0x7
  40259c:	cmp	w1, w0
  4025a0:	b.lt	4025ec <run+0x548>  // b.tstop
  4025a4:	ldr	w0, [sp, #196]
  4025a8:	lsl	w1, w0, #10
  4025ac:	ldr	w0, [sp, #188]
  4025b0:	orr	w7, w1, w0
  4025b4:	adrp	x0, 402000 <make_overlay+0x498>
  4025b8:	add	x1, x0, #0xb9b
  4025bc:	ldr	x6, [sp, #240]
  4025c0:	adrp	x0, 403000 <_fini+0x48c>
  4025c4:	add	x5, x0, #0x40
  4025c8:	adrp	x0, 403000 <_fini+0x48c>
  4025cc:	add	x4, x0, #0x220
  4025d0:	mov	w3, #0x9f                  	// #159
  4025d4:	mov	x2, x1
  4025d8:	ldr	w1, [sp, #192]
  4025dc:	mov	w0, w7
  4025e0:	bl	4011c0 <log_internal_realm@plt>
  4025e4:	mov	w19, w0
  4025e8:	b	402a68 <run+0x9c4>
  4025ec:	ldr	w0, [sp, #192]
  4025f0:	cmp	w0, #0x0
  4025f4:	cneg	w0, w0, lt  // lt = tstop
  4025f8:	and	w0, w0, #0xff
  4025fc:	neg	w19, w0
  402600:	b	402a68 <run+0x9c4>
  402604:	ldr	w0, [sp, #64]
  402608:	cmp	w0, #0x0
  40260c:	b.ne	4026a4 <run+0x600>  // b.any
  402610:	mov	w0, #0x3                   	// #3
  402614:	str	w0, [sp, #176]
  402618:	mov	w0, #0x16                  	// #22
  40261c:	movk	w0, #0x4000, lsl #16
  402620:	str	w0, [sp, #180]
  402624:	str	wzr, [sp, #184]
  402628:	ldr	w0, [sp, #184]
  40262c:	bl	401260 <log_get_max_level_realm@plt>
  402630:	mov	w1, w0
  402634:	ldr	w0, [sp, #176]
  402638:	and	w0, w0, #0x7
  40263c:	cmp	w1, w0
  402640:	b.lt	40268c <run+0x5e8>  // b.tstop
  402644:	ldr	w0, [sp, #184]
  402648:	lsl	w1, w0, #10
  40264c:	ldr	w0, [sp, #176]
  402650:	orr	w7, w1, w0
  402654:	adrp	x0, 402000 <make_overlay+0x498>
  402658:	add	x1, x0, #0xb9b
  40265c:	ldr	x6, [sp, #240]
  402660:	adrp	x0, 403000 <_fini+0x48c>
  402664:	add	x5, x0, #0x78
  402668:	adrp	x0, 403000 <_fini+0x48c>
  40266c:	add	x4, x0, #0x220
  402670:	mov	w3, #0xa1                  	// #161
  402674:	mov	x2, x1
  402678:	ldr	w1, [sp, #180]
  40267c:	mov	w0, w7
  402680:	bl	4011c0 <log_internal_realm@plt>
  402684:	mov	w19, w0
  402688:	b	402a68 <run+0x9c4>
  40268c:	ldr	w0, [sp, #180]
  402690:	cmp	w0, #0x0
  402694:	cneg	w0, w0, lt  // lt = tstop
  402698:	and	w0, w0, #0xff
  40269c:	neg	w19, w0
  4026a0:	b	402a68 <run+0x9c4>
  4026a4:	ldr	x0, [sp, #240]
  4026a8:	bl	401170 <path_is_temporary_fs@plt>
  4026ac:	str	w0, [sp, #64]
  4026b0:	ldr	w0, [sp, #64]
  4026b4:	cmp	w0, #0x0
  4026b8:	b.ge	40274c <run+0x6a8>  // b.tcont
  4026bc:	mov	w0, #0x3                   	// #3
  4026c0:	str	w0, [sp, #164]
  4026c4:	ldr	w0, [sp, #64]
  4026c8:	str	w0, [sp, #168]
  4026cc:	str	wzr, [sp, #172]
  4026d0:	ldr	w0, [sp, #172]
  4026d4:	bl	401260 <log_get_max_level_realm@plt>
  4026d8:	mov	w1, w0
  4026dc:	ldr	w0, [sp, #164]
  4026e0:	and	w0, w0, #0x7
  4026e4:	cmp	w1, w0
  4026e8:	b.lt	402734 <run+0x690>  // b.tstop
  4026ec:	ldr	w0, [sp, #172]
  4026f0:	lsl	w1, w0, #10
  4026f4:	ldr	w0, [sp, #164]
  4026f8:	orr	w7, w1, w0
  4026fc:	adrp	x0, 402000 <make_overlay+0x498>
  402700:	add	x1, x0, #0xb9b
  402704:	ldr	x6, [sp, #240]
  402708:	adrp	x0, 403000 <_fini+0x48c>
  40270c:	add	x5, x0, #0x98
  402710:	adrp	x0, 403000 <_fini+0x48c>
  402714:	add	x4, x0, #0x220
  402718:	mov	w3, #0xa5                  	// #165
  40271c:	mov	x2, x1
  402720:	ldr	w1, [sp, #168]
  402724:	mov	w0, w7
  402728:	bl	4011c0 <log_internal_realm@plt>
  40272c:	mov	w19, w0
  402730:	b	402a68 <run+0x9c4>
  402734:	ldr	w0, [sp, #168]
  402738:	cmp	w0, #0x0
  40273c:	cneg	w0, w0, lt  // lt = tstop
  402740:	and	w0, w0, #0xff
  402744:	neg	w19, w0
  402748:	b	402a68 <run+0x9c4>
  40274c:	ldr	w0, [sp, #64]
  402750:	cmp	w0, #0x0
  402754:	b.le	4027d8 <run+0x734>
  402758:	mov	w0, #0x6                   	// #6
  40275c:	str	w0, [sp, #152]
  402760:	str	wzr, [sp, #156]
  402764:	str	wzr, [sp, #160]
  402768:	ldr	w0, [sp, #160]
  40276c:	bl	401260 <log_get_max_level_realm@plt>
  402770:	mov	w1, w0
  402774:	ldr	w0, [sp, #152]
  402778:	and	w0, w0, #0x7
  40277c:	cmp	w1, w0
  402780:	b.lt	4027c8 <run+0x724>  // b.tstop
  402784:	ldr	w0, [sp, #160]
  402788:	lsl	w1, w0, #10
  40278c:	ldr	w0, [sp, #152]
  402790:	orr	w7, w1, w0
  402794:	adrp	x0, 402000 <make_overlay+0x498>
  402798:	add	x1, x0, #0xb9b
  40279c:	ldr	x6, [sp, #240]
  4027a0:	adrp	x0, 403000 <_fini+0x48c>
  4027a4:	add	x5, x0, #0xd8
  4027a8:	adrp	x0, 403000 <_fini+0x48c>
  4027ac:	add	x4, x0, #0x220
  4027b0:	mov	w3, #0xa7                  	// #167
  4027b4:	mov	x2, x1
  4027b8:	ldr	w1, [sp, #156]
  4027bc:	mov	w0, w7
  4027c0:	bl	4011c0 <log_internal_realm@plt>
  4027c4:	b	4027d0 <run+0x72c>
  4027c8:	ldr	w0, [sp, #156]
  4027cc:	cmp	w0, #0x0
  4027d0:	mov	w19, #0x0                   	// #0
  4027d4:	b	402a68 <run+0x9c4>
  4027d8:	add	x0, sp, #0xe0
  4027dc:	mov	x1, x0
  4027e0:	ldr	x0, [sp, #240]
  4027e4:	bl	401130 <get_block_device_harder@plt>
  4027e8:	str	w0, [sp, #64]
  4027ec:	ldr	w0, [sp, #64]
  4027f0:	cmp	w0, #0x0
  4027f4:	b.ge	402888 <run+0x7e4>  // b.tcont
  4027f8:	mov	w0, #0x3                   	// #3
  4027fc:	str	w0, [sp, #140]
  402800:	ldr	w0, [sp, #64]
  402804:	str	w0, [sp, #144]
  402808:	str	wzr, [sp, #148]
  40280c:	ldr	w0, [sp, #148]
  402810:	bl	401260 <log_get_max_level_realm@plt>
  402814:	mov	w1, w0
  402818:	ldr	w0, [sp, #140]
  40281c:	and	w0, w0, #0x7
  402820:	cmp	w1, w0
  402824:	b.lt	402870 <run+0x7cc>  // b.tstop
  402828:	ldr	w0, [sp, #148]
  40282c:	lsl	w1, w0, #10
  402830:	ldr	w0, [sp, #140]
  402834:	orr	w7, w1, w0
  402838:	adrp	x0, 402000 <make_overlay+0x498>
  40283c:	add	x1, x0, #0xb9b
  402840:	ldr	x6, [sp, #240]
  402844:	adrp	x0, 403000 <_fini+0x48c>
  402848:	add	x5, x0, #0x100
  40284c:	adrp	x0, 403000 <_fini+0x48c>
  402850:	add	x4, x0, #0x220
  402854:	mov	w3, #0xb1                  	// #177
  402858:	mov	x2, x1
  40285c:	ldr	w1, [sp, #144]
  402860:	mov	w0, w7
  402864:	bl	4011c0 <log_internal_realm@plt>
  402868:	mov	w19, w0
  40286c:	b	402a68 <run+0x9c4>
  402870:	ldr	w0, [sp, #144]
  402874:	cmp	w0, #0x0
  402878:	cneg	w0, w0, lt  // lt = tstop
  40287c:	and	w0, w0, #0xff
  402880:	neg	w19, w0
  402884:	b	402a68 <run+0x9c4>
  402888:	ldr	w0, [sp, #64]
  40288c:	cmp	w0, #0x0
  402890:	b.le	4029fc <run+0x958>
  402894:	str	xzr, [sp, #232]
  402898:	ldr	x0, [sp, #224]
  40289c:	add	x1, sp, #0xe8
  4028a0:	mov	x2, x1
  4028a4:	mov	x1, x0
  4028a8:	mov	w0, #0x6000                	// #24576
  4028ac:	bl	4010c0 <device_path_make_major_minor@plt>
  4028b0:	str	w0, [sp, #64]
  4028b4:	ldr	w0, [sp, #64]
  4028b8:	cmp	w0, #0x0
  4028bc:	b.ge	402950 <run+0x8ac>  // b.tcont
  4028c0:	mov	w0, #0x3                   	// #3
  4028c4:	str	w0, [sp, #128]
  4028c8:	ldr	w0, [sp, #64]
  4028cc:	str	w0, [sp, #132]
  4028d0:	str	wzr, [sp, #136]
  4028d4:	ldr	w0, [sp, #136]
  4028d8:	bl	401260 <log_get_max_level_realm@plt>
  4028dc:	mov	w1, w0
  4028e0:	ldr	w0, [sp, #128]
  4028e4:	and	w0, w0, #0x7
  4028e8:	cmp	w1, w0
  4028ec:	b.lt	402934 <run+0x890>  // b.tstop
  4028f0:	ldr	w0, [sp, #136]
  4028f4:	lsl	w1, w0, #10
  4028f8:	ldr	w0, [sp, #128]
  4028fc:	orr	w6, w1, w0
  402900:	adrp	x0, 402000 <make_overlay+0x498>
  402904:	add	x1, x0, #0xb9b
  402908:	adrp	x0, 403000 <_fini+0x48c>
  40290c:	add	x5, x0, #0x138
  402910:	adrp	x0, 403000 <_fini+0x48c>
  402914:	add	x4, x0, #0x220
  402918:	mov	w3, #0xb7                  	// #183
  40291c:	mov	x2, x1
  402920:	ldr	w1, [sp, #132]
  402924:	mov	w0, w6
  402928:	bl	4011c0 <log_internal_realm@plt>
  40292c:	mov	w19, w0
  402930:	b	402948 <run+0x8a4>
  402934:	ldr	w0, [sp, #132]
  402938:	cmp	w0, #0x0
  40293c:	cneg	w0, w0, lt  // lt = tstop
  402940:	and	w0, w0, #0xff
  402944:	neg	w19, w0
  402948:	mov	w20, #0x0                   	// #0
  40294c:	b	4029ec <run+0x948>
  402950:	ldr	x2, [sp, #232]
  402954:	adrp	x0, 403000 <_fini+0x48c>
  402958:	add	x1, x0, #0x160
  40295c:	mov	x0, x2
  402960:	bl	4010d0 <symlink@plt>
  402964:	cmp	w0, #0x0
  402968:	b.ge	4029e8 <run+0x944>  // b.tcont
  40296c:	mov	w0, #0x4                   	// #4
  402970:	str	w0, [sp, #116]
  402974:	bl	401150 <__errno_location@plt>
  402978:	ldr	w0, [x0]
  40297c:	str	w0, [sp, #120]
  402980:	str	wzr, [sp, #124]
  402984:	ldr	w0, [sp, #124]
  402988:	bl	401260 <log_get_max_level_realm@plt>
  40298c:	mov	w1, w0
  402990:	ldr	w0, [sp, #116]
  402994:	and	w0, w0, #0x7
  402998:	cmp	w1, w0
  40299c:	b.lt	4029e0 <run+0x93c>  // b.tstop
  4029a0:	ldr	w0, [sp, #124]
  4029a4:	lsl	w1, w0, #10
  4029a8:	ldr	w0, [sp, #116]
  4029ac:	orr	w6, w1, w0
  4029b0:	adrp	x0, 402000 <make_overlay+0x498>
  4029b4:	add	x1, x0, #0xb9b
  4029b8:	adrp	x0, 403000 <_fini+0x48c>
  4029bc:	add	x5, x0, #0x180
  4029c0:	adrp	x0, 403000 <_fini+0x48c>
  4029c4:	add	x4, x0, #0x220
  4029c8:	mov	w3, #0xba                  	// #186
  4029cc:	mov	x2, x1
  4029d0:	ldr	w1, [sp, #120]
  4029d4:	mov	w0, w6
  4029d8:	bl	4011c0 <log_internal_realm@plt>
  4029dc:	b	4029e8 <run+0x944>
  4029e0:	ldr	w0, [sp, #120]
  4029e4:	cmp	w0, #0x0
  4029e8:	mov	w20, #0x1                   	// #1
  4029ec:	add	x0, sp, #0xe8
  4029f0:	bl	401468 <freep>
  4029f4:	cmp	w20, #0x1
  4029f8:	b.ne	402a68 <run+0x9c4>  // b.any
  4029fc:	ldr	w0, [sp, #60]
  402a00:	cmp	w0, #0x1
  402a04:	b.ne	402a18 <run+0x974>  // b.any
  402a08:	ldr	x0, [sp, #240]
  402a0c:	bl	401608 <make_volatile>
  402a10:	mov	w19, w0
  402a14:	b	402a68 <run+0x9c4>
  402a18:	ldr	w0, [sp, #60]
  402a1c:	cmp	w0, #0x3
  402a20:	cset	w0, ne  // ne = any
  402a24:	and	w0, w0, #0xff
  402a28:	and	x0, x0, #0xff
  402a2c:	cmp	x0, #0x0
  402a30:	b.eq	402a5c <run+0x9b8>  // b.none
  402a34:	adrp	x0, 402000 <make_overlay+0x498>
  402a38:	add	x1, x0, #0xb9b
  402a3c:	adrp	x0, 403000 <_fini+0x48c>
  402a40:	add	x4, x0, #0x228
  402a44:	mov	w3, #0xc0                  	// #192
  402a48:	mov	x2, x1
  402a4c:	adrp	x0, 403000 <_fini+0x48c>
  402a50:	add	x1, x0, #0x1b8
  402a54:	mov	w0, #0x0                   	// #0
  402a58:	bl	401100 <log_assert_failed_realm@plt>
  402a5c:	ldr	x0, [sp, #240]
  402a60:	bl	401b68 <make_overlay>
  402a64:	mov	w19, w0
  402a68:	mov	w1, w19
  402a6c:	adrp	x0, 413000 <__FRAME_END__+0xfb30>
  402a70:	add	x0, x0, #0xc80
  402a74:	ldr	x2, [sp, #248]
  402a78:	ldr	x0, [x0]
  402a7c:	eor	x0, x2, x0
  402a80:	cmp	x0, #0x0
  402a84:	b.eq	402a8c <run+0x9e8>  // b.none
  402a88:	bl	401160 <__stack_chk_fail@plt>
  402a8c:	mov	w0, w1
  402a90:	ldp	x19, x20, [sp, #16]
  402a94:	ldp	x29, x30, [sp], #256
  402a98:	ret

0000000000402a9c <main>:
  402a9c:	stp	x29, x30, [sp, #-48]!
  402aa0:	mov	x29, sp
  402aa4:	str	w0, [sp, #28]
  402aa8:	str	x1, [sp, #16]
  402aac:	ldr	x1, [sp, #16]
  402ab0:	ldr	w0, [sp, #28]
  402ab4:	bl	401548 <save_argc_argv>
  402ab8:	ldr	x1, [sp, #16]
  402abc:	ldr	w0, [sp, #28]
  402ac0:	bl	4020a4 <run>
  402ac4:	str	w0, [sp, #44]
  402ac8:	bl	401180 <ask_password_agent_close@plt>
  402acc:	bl	401080 <polkit_agent_close@plt>
  402ad0:	bl	4011a0 <pager_close@plt>
  402ad4:	bl	401220 <mac_selinux_finish@plt>
  402ad8:	bl	401580 <static_destruct>
  402adc:	ldr	w0, [sp, #44]
  402ae0:	lsr	w0, w0, #31
  402ae4:	ldp	x29, x30, [sp], #48
  402ae8:	ret
  402aec:	nop

0000000000402af0 <__libc_csu_init>:
  402af0:	stp	x29, x30, [sp, #-64]!
  402af4:	mov	x29, sp
  402af8:	stp	x19, x20, [sp, #16]
  402afc:	adrp	x20, 413000 <__FRAME_END__+0xfb30>
  402b00:	add	x20, x20, #0xc78
  402b04:	stp	x21, x22, [sp, #32]
  402b08:	adrp	x21, 413000 <__FRAME_END__+0xfb30>
  402b0c:	add	x21, x21, #0xc70
  402b10:	sub	x20, x20, x21
  402b14:	mov	w22, w0
  402b18:	stp	x23, x24, [sp, #48]
  402b1c:	mov	x23, x1
  402b20:	mov	x24, x2
  402b24:	bl	400ff8 <_init>
  402b28:	cmp	xzr, x20, asr #3
  402b2c:	b.eq	402b58 <__libc_csu_init+0x68>  // b.none
  402b30:	asr	x20, x20, #3
  402b34:	mov	x19, #0x0                   	// #0
  402b38:	ldr	x3, [x21, x19, lsl #3]
  402b3c:	mov	x2, x24
  402b40:	add	x19, x19, #0x1
  402b44:	mov	x1, x23
  402b48:	mov	w0, w22
  402b4c:	blr	x3
  402b50:	cmp	x20, x19
  402b54:	b.ne	402b38 <__libc_csu_init+0x48>  // b.any
  402b58:	ldp	x19, x20, [sp, #16]
  402b5c:	ldp	x21, x22, [sp, #32]
  402b60:	ldp	x23, x24, [sp, #48]
  402b64:	ldp	x29, x30, [sp], #64
  402b68:	ret
  402b6c:	nop

0000000000402b70 <__libc_csu_fini>:
  402b70:	ret

Disassembly of section .fini:

0000000000402b74 <_fini>:
  402b74:	stp	x29, x30, [sp, #-16]!
  402b78:	mov	x29, sp
  402b7c:	ldp	x29, x30, [sp], #16
  402b80:	ret
