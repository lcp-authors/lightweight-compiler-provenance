In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libatomic.a_clang_-O0:

gload.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__atomic_load>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	w3, [sp, #20]
  18:	ldr	x0, [sp, #40]
  1c:	cmp	x0, #0x10
  20:	b.eq	160 <__atomic_load+0x160>  // b.none
  24:	ldr	x0, [sp, #40]
  28:	cmp	x0, #0x10
  2c:	b.hi	288 <__atomic_load+0x288>  // b.pmore
  30:	ldr	x0, [sp, #40]
  34:	cmp	x0, #0xf
  38:	b.hi	288 <__atomic_load+0x288>  // b.pmore
  3c:	ldr	x0, [sp, #40]
  40:	cmp	x0, #0x9
  44:	b.cs	21c <__atomic_load+0x21c>  // b.hs, b.nlast
  48:	ldr	x0, [sp, #40]
  4c:	cmp	x0, #0x8
  50:	b.eq	13c <__atomic_load+0x13c>  // b.none
  54:	ldr	x0, [sp, #40]
  58:	cmp	x0, #0x8
  5c:	b.hi	288 <__atomic_load+0x288>  // b.pmore
  60:	ldr	x0, [sp, #40]
  64:	cmp	x0, #0x7
  68:	b.hi	288 <__atomic_load+0x288>  // b.pmore
  6c:	ldr	x0, [sp, #40]
  70:	cmp	x0, #0x5
  74:	b.cs	1d4 <__atomic_load+0x1d4>  // b.hs, b.nlast
  78:	ldr	x0, [sp, #40]
  7c:	cmp	x0, #0x4
  80:	b.eq	118 <__atomic_load+0x118>  // b.none
  84:	ldr	x0, [sp, #40]
  88:	cmp	x0, #0x4
  8c:	b.hi	288 <__atomic_load+0x288>  // b.pmore
  90:	ldr	x0, [sp, #40]
  94:	cmp	x0, #0x3
  98:	b.eq	18c <__atomic_load+0x18c>  // b.none
  9c:	ldr	x0, [sp, #40]
  a0:	cmp	x0, #0x3
  a4:	b.hi	288 <__atomic_load+0x288>  // b.pmore
  a8:	ldr	x0, [sp, #40]
  ac:	cmp	x0, #0x2
  b0:	b.eq	f0 <__atomic_load+0xf0>  // b.none
  b4:	ldr	x0, [sp, #40]
  b8:	cmp	x0, #0x2
  bc:	b.hi	288 <__atomic_load+0x288>  // b.pmore
  c0:	ldr	x0, [sp, #40]
  c4:	cmp	x0, #0x0
  c8:	b.eq	2c8 <__atomic_load+0x2c8>  // b.none
  cc:	ldr	x0, [sp, #40]
  d0:	cmp	x0, #0x1
  d4:	b.ne	288 <__atomic_load+0x288>  // b.any
  d8:	ldr	x0, [sp, #32]
  dc:	ldarb	w0, [x0]
  e0:	and	w1, w0, #0xff
  e4:	ldr	x0, [sp, #24]
  e8:	strb	w1, [x0]
  ec:	b	2cc <__atomic_load+0x2cc>
  f0:	ldr	x0, [sp, #32]
  f4:	and	x0, x0, #0x1
  f8:	cmp	x0, #0x0
  fc:	b.ne	188 <__atomic_load+0x188>  // b.any
 100:	ldr	x0, [sp, #32]
 104:	ldarh	w0, [x0]
 108:	and	w1, w0, #0xffff
 10c:	ldr	x0, [sp, #24]
 110:	strh	w1, [x0]
 114:	b	2cc <__atomic_load+0x2cc>
 118:	ldr	x0, [sp, #32]
 11c:	and	x0, x0, #0x3
 120:	cmp	x0, #0x0
 124:	b.ne	1c8 <__atomic_load+0x1c8>  // b.any
 128:	ldr	x0, [sp, #32]
 12c:	ldar	w1, [x0]
 130:	ldr	x0, [sp, #24]
 134:	str	w1, [x0]
 138:	b	2cc <__atomic_load+0x2cc>
 13c:	ldr	x0, [sp, #32]
 140:	and	x0, x0, #0x7
 144:	cmp	x0, #0x0
 148:	b.ne	210 <__atomic_load+0x210>  // b.any
 14c:	ldr	x0, [sp, #32]
 150:	ldar	x1, [x0]
 154:	ldr	x0, [sp, #24]
 158:	str	x1, [x0]
 15c:	b	2cc <__atomic_load+0x2cc>
 160:	ldr	x0, [sp, #32]
 164:	and	x0, x0, #0xf
 168:	cmp	x0, #0x0
 16c:	b.ne	27c <__atomic_load+0x27c>  // b.any
 170:	ldr	w1, [sp, #20]
 174:	ldr	x0, [sp, #32]
 178:	bl	0 <__atomic_load_16>
 17c:	ldr	x2, [sp, #24]
 180:	stp	x0, x1, [x2]
 184:	b	2cc <__atomic_load+0x2cc>
 188:	nop
 18c:	ldr	x0, [sp, #32]
 190:	and	x0, x0, #0x3
 194:	str	x0, [sp, #88]
 198:	ldr	x0, [sp, #32]
 19c:	and	x0, x0, #0xfffffffffffffffc
 1a0:	str	x0, [sp, #80]
 1a4:	ldr	x1, [sp, #88]
 1a8:	ldr	x0, [sp, #40]
 1ac:	add	x0, x1, x0
 1b0:	cmp	x0, #0x4
 1b4:	b.hi	1d0 <__atomic_load+0x1d0>  // b.pmore
 1b8:	ldr	x0, [sp, #80]
 1bc:	ldar	w0, [x0]
 1c0:	str	w0, [sp, #48]
 1c4:	b	25c <__atomic_load+0x25c>
 1c8:	nop
 1cc:	b	1d4 <__atomic_load+0x1d4>
 1d0:	nop
 1d4:	ldr	x0, [sp, #32]
 1d8:	and	x0, x0, #0x7
 1dc:	str	x0, [sp, #88]
 1e0:	ldr	x0, [sp, #32]
 1e4:	and	x0, x0, #0xfffffffffffffff8
 1e8:	str	x0, [sp, #80]
 1ec:	ldr	x1, [sp, #88]
 1f0:	ldr	x0, [sp, #40]
 1f4:	add	x0, x1, x0
 1f8:	cmp	x0, #0x8
 1fc:	b.hi	218 <__atomic_load+0x218>  // b.pmore
 200:	ldr	x0, [sp, #80]
 204:	ldar	x0, [x0]
 208:	str	x0, [sp, #48]
 20c:	b	25c <__atomic_load+0x25c>
 210:	nop
 214:	b	21c <__atomic_load+0x21c>
 218:	nop
 21c:	ldr	x0, [sp, #32]
 220:	and	x0, x0, #0xf
 224:	str	x0, [sp, #88]
 228:	ldr	x0, [sp, #32]
 22c:	and	x0, x0, #0xfffffffffffffff0
 230:	str	x0, [sp, #80]
 234:	ldr	x1, [sp, #88]
 238:	ldr	x0, [sp, #40]
 23c:	add	x0, x1, x0
 240:	cmp	x0, #0x10
 244:	b.hi	284 <__atomic_load+0x284>  // b.pmore
 248:	ldr	x0, [sp, #80]
 24c:	ldr	w1, [sp, #20]
 250:	bl	0 <__atomic_load_16>
 254:	stp	x0, x1, [sp, #48]
 258:	nop
 25c:	add	x1, sp, #0x30
 260:	ldr	x0, [sp, #88]
 264:	add	x0, x1, x0
 268:	ldr	x2, [sp, #40]
 26c:	mov	x1, x0
 270:	ldr	x0, [sp, #24]
 274:	bl	0 <memcpy>
 278:	b	2cc <__atomic_load+0x2cc>
 27c:	nop
 280:	b	288 <__atomic_load+0x288>
 284:	nop
 288:	ldr	w0, [sp, #20]
 28c:	str	w0, [sp, #72]
 290:	nop
 294:	ldr	x1, [sp, #40]
 298:	ldr	x0, [sp, #32]
 29c:	bl	0 <libat_lock_n>
 2a0:	ldr	x2, [sp, #40]
 2a4:	ldr	x1, [sp, #32]
 2a8:	ldr	x0, [sp, #24]
 2ac:	bl	0 <memcpy>
 2b0:	ldr	x1, [sp, #40]
 2b4:	ldr	x0, [sp, #32]
 2b8:	bl	0 <libat_unlock_n>
 2bc:	ldr	w0, [sp, #20]
 2c0:	str	w0, [sp, #76]
 2c4:	b	2cc <__atomic_load+0x2cc>
 2c8:	nop
 2cc:	ldp	x29, x30, [sp], #96
 2d0:	ret

gstore.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__atomic_store>:
   0:	stp	x29, x30, [sp, #-208]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	w3, [sp, #20]
  18:	ldr	x0, [sp, #40]
  1c:	cmp	x0, #0x10
  20:	b.eq	158 <__atomic_store+0x158>  // b.none
  24:	ldr	x0, [sp, #40]
  28:	cmp	x0, #0x10
  2c:	b.hi	338 <__atomic_store+0x338>  // b.pmore
  30:	ldr	x0, [sp, #40]
  34:	cmp	x0, #0xf
  38:	b.hi	338 <__atomic_store+0x338>  // b.pmore
  3c:	ldr	x0, [sp, #40]
  40:	cmp	x0, #0x9
  44:	b.cs	32c <__atomic_store+0x32c>  // b.hs, b.nlast
  48:	ldr	x0, [sp, #40]
  4c:	cmp	x0, #0x8
  50:	b.eq	134 <__atomic_store+0x134>  // b.none
  54:	ldr	x0, [sp, #40]
  58:	cmp	x0, #0x8
  5c:	b.hi	338 <__atomic_store+0x338>  // b.pmore
  60:	ldr	x0, [sp, #40]
  64:	cmp	x0, #0x7
  68:	b.hi	338 <__atomic_store+0x338>  // b.pmore
  6c:	ldr	x0, [sp, #40]
  70:	cmp	x0, #0x5
  74:	b.cs	25c <__atomic_store+0x25c>  // b.hs, b.nlast
  78:	ldr	x0, [sp, #40]
  7c:	cmp	x0, #0x4
  80:	b.eq	110 <__atomic_store+0x110>  // b.none
  84:	ldr	x0, [sp, #40]
  88:	cmp	x0, #0x4
  8c:	b.hi	338 <__atomic_store+0x338>  // b.pmore
  90:	ldr	x0, [sp, #40]
  94:	cmp	x0, #0x3
  98:	b.eq	18c <__atomic_store+0x18c>  // b.none
  9c:	ldr	x0, [sp, #40]
  a0:	cmp	x0, #0x3
  a4:	b.hi	338 <__atomic_store+0x338>  // b.pmore
  a8:	ldr	x0, [sp, #40]
  ac:	cmp	x0, #0x2
  b0:	b.eq	ec <__atomic_store+0xec>  // b.none
  b4:	ldr	x0, [sp, #40]
  b8:	cmp	x0, #0x2
  bc:	b.hi	338 <__atomic_store+0x338>  // b.pmore
  c0:	ldr	x0, [sp, #40]
  c4:	cmp	x0, #0x0
  c8:	b.eq	378 <__atomic_store+0x378>  // b.none
  cc:	ldr	x0, [sp, #40]
  d0:	cmp	x0, #0x1
  d4:	b.ne	338 <__atomic_store+0x338>  // b.any
  d8:	ldr	x0, [sp, #24]
  dc:	ldrb	w1, [x0]
  e0:	ldr	x0, [sp, #32]
  e4:	stlrb	w1, [x0]
  e8:	b	37c <__atomic_store+0x37c>
  ec:	ldr	x0, [sp, #32]
  f0:	and	x0, x0, #0x1
  f4:	cmp	x0, #0x0
  f8:	b.ne	188 <__atomic_store+0x188>  // b.any
  fc:	ldr	x0, [sp, #24]
 100:	ldrh	w1, [x0]
 104:	ldr	x0, [sp, #32]
 108:	stlrh	w1, [x0]
 10c:	b	37c <__atomic_store+0x37c>
 110:	ldr	x0, [sp, #32]
 114:	and	x0, x0, #0x3
 118:	cmp	x0, #0x0
 11c:	b.ne	258 <__atomic_store+0x258>  // b.any
 120:	ldr	x0, [sp, #24]
 124:	ldr	w1, [x0]
 128:	ldr	x0, [sp, #32]
 12c:	stlr	w1, [x0]
 130:	b	37c <__atomic_store+0x37c>
 134:	ldr	x0, [sp, #32]
 138:	and	x0, x0, #0x7
 13c:	cmp	x0, #0x0
 140:	b.ne	328 <__atomic_store+0x328>  // b.any
 144:	ldr	x0, [sp, #24]
 148:	ldr	x1, [x0]
 14c:	ldr	x0, [sp, #32]
 150:	stlr	x1, [x0]
 154:	b	37c <__atomic_store+0x37c>
 158:	ldr	x0, [sp, #32]
 15c:	and	x0, x0, #0xf
 160:	cmp	x0, #0x0
 164:	b.ne	334 <__atomic_store+0x334>  // b.any
 168:	ldr	x0, [sp, #24]
 16c:	ldp	x0, x1, [x0]
 170:	ldr	w4, [sp, #20]
 174:	mov	x2, x0
 178:	mov	x3, x1
 17c:	ldr	x0, [sp, #32]
 180:	bl	0 <__atomic_store_16>
 184:	b	37c <__atomic_store+0x37c>
 188:	nop
 18c:	ldr	x0, [sp, #32]
 190:	and	x0, x0, #0x3
 194:	str	x0, [sp, #200]
 198:	ldr	x0, [sp, #32]
 19c:	and	x0, x0, #0xfffffffffffffffc
 1a0:	str	x0, [sp, #192]
 1a4:	ldr	x1, [sp, #200]
 1a8:	ldr	x0, [sp, #40]
 1ac:	add	x0, x1, x0
 1b0:	cmp	x0, #0x4
 1b4:	b.hi	25c <__atomic_store+0x25c>  // b.pmore
 1b8:	ldr	w0, [sp, #20]
 1bc:	str	w0, [sp, #172]
 1c0:	dmb	ish
 1c4:	nop
 1c8:	ldr	x0, [sp, #192]
 1cc:	ldr	w0, [x0]
 1d0:	str	w0, [sp, #128]
 1d4:	ldp	x0, x1, [sp, #128]
 1d8:	stp	x0, x1, [sp, #112]
 1dc:	add	x1, sp, #0x70
 1e0:	ldr	x0, [sp, #200]
 1e4:	add	x0, x1, x0
 1e8:	ldr	x2, [sp, #40]
 1ec:	ldr	x1, [sp, #24]
 1f0:	bl	0 <memcpy>
 1f4:	ldr	x1, [sp, #192]
 1f8:	ldr	w4, [sp, #112]
 1fc:	add	x0, sp, #0x80
 200:	ldr	w3, [x0]
 204:	ldxr	w2, [x1]
 208:	cmp	w2, w3
 20c:	b.ne	218 <__atomic_store+0x218>  // b.any
 210:	stxr	w5, w4, [x1]
 214:	cmp	w5, #0x0
 218:	cset	w1, eq  // eq = none
 21c:	cmp	w1, #0x0
 220:	b.ne	228 <__atomic_store+0x228>  // b.any
 224:	str	w2, [x0]
 228:	mov	w0, w1
 22c:	eor	w0, w0, #0x1
 230:	and	w0, w0, #0xff
 234:	cmp	w0, #0x0
 238:	b.ne	1d4 <__atomic_store+0x1d4>  // b.any
 23c:	ldr	w0, [sp, #20]
 240:	str	w0, [sp, #168]
 244:	ldr	w0, [sp, #168]
 248:	str	w0, [sp, #164]
 24c:	dmb	ish
 250:	nop
 254:	b	37c <__atomic_store+0x37c>
 258:	nop
 25c:	ldr	x0, [sp, #32]
 260:	and	x0, x0, #0x7
 264:	str	x0, [sp, #184]
 268:	ldr	x0, [sp, #32]
 26c:	and	x0, x0, #0xfffffffffffffff8
 270:	str	x0, [sp, #176]
 274:	ldr	x1, [sp, #184]
 278:	ldr	x0, [sp, #40]
 27c:	add	x0, x1, x0
 280:	cmp	x0, #0x8
 284:	b.hi	32c <__atomic_store+0x32c>  // b.pmore
 288:	ldr	w0, [sp, #20]
 28c:	str	w0, [sp, #160]
 290:	dmb	ish
 294:	nop
 298:	ldr	x0, [sp, #176]
 29c:	ldr	x0, [x0]
 2a0:	str	x0, [sp, #96]
 2a4:	ldp	x0, x1, [sp, #96]
 2a8:	stp	x0, x1, [sp, #80]
 2ac:	add	x1, sp, #0x50
 2b0:	ldr	x0, [sp, #184]
 2b4:	add	x0, x1, x0
 2b8:	ldr	x2, [sp, #40]
 2bc:	ldr	x1, [sp, #24]
 2c0:	bl	0 <memcpy>
 2c4:	ldr	x1, [sp, #176]
 2c8:	ldr	x4, [sp, #80]
 2cc:	add	x0, sp, #0x60
 2d0:	ldr	x3, [x0]
 2d4:	ldxr	x2, [x1]
 2d8:	cmp	x2, x3
 2dc:	b.ne	2e8 <__atomic_store+0x2e8>  // b.any
 2e0:	stxr	w5, x4, [x1]
 2e4:	cmp	w5, #0x0
 2e8:	cset	w1, eq  // eq = none
 2ec:	cmp	w1, #0x0
 2f0:	b.ne	2f8 <__atomic_store+0x2f8>  // b.any
 2f4:	str	x2, [x0]
 2f8:	mov	w0, w1
 2fc:	eor	w0, w0, #0x1
 300:	and	w0, w0, #0xff
 304:	cmp	w0, #0x0
 308:	b.ne	2a4 <__atomic_store+0x2a4>  // b.any
 30c:	ldr	w0, [sp, #20]
 310:	str	w0, [sp, #156]
 314:	ldr	w0, [sp, #156]
 318:	str	w0, [sp, #152]
 31c:	dmb	ish
 320:	nop
 324:	b	37c <__atomic_store+0x37c>
 328:	nop
 32c:	nop
 330:	b	338 <__atomic_store+0x338>
 334:	nop
 338:	ldr	w0, [sp, #20]
 33c:	str	w0, [sp, #144]
 340:	nop
 344:	ldr	x1, [sp, #40]
 348:	ldr	x0, [sp, #32]
 34c:	bl	0 <libat_lock_n>
 350:	ldr	x2, [sp, #40]
 354:	ldr	x1, [sp, #24]
 358:	ldr	x0, [sp, #32]
 35c:	bl	0 <memcpy>
 360:	ldr	x1, [sp, #40]
 364:	ldr	x0, [sp, #32]
 368:	bl	0 <libat_unlock_n>
 36c:	ldr	w0, [sp, #20]
 370:	str	w0, [sp, #148]
 374:	b	37c <__atomic_store+0x37c>
 378:	nop
 37c:	ldp	x29, x30, [sp], #208
 380:	ret

gcas.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__atomic_compare_exchange>:
   0:	stp	x29, x30, [sp, #-160]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #56]
   c:	str	x1, [sp, #48]
  10:	str	x2, [sp, #40]
  14:	str	x3, [sp, #32]
  18:	str	w4, [sp, #28]
  1c:	str	w5, [sp, #24]
  20:	ldr	x0, [sp, #56]
  24:	cmp	x0, #0x10
  28:	b.eq	224 <__atomic_compare_exchange+0x224>  // b.none
  2c:	ldr	x0, [sp, #56]
  30:	cmp	x0, #0x10
  34:	b.hi	4a4 <__atomic_compare_exchange+0x4a4>  // b.pmore
  38:	ldr	x0, [sp, #56]
  3c:	cmp	x0, #0xf
  40:	b.hi	4a4 <__atomic_compare_exchange+0x4a4>  // b.pmore
  44:	ldr	x0, [sp, #56]
  48:	cmp	x0, #0x9
  4c:	b.cs	498 <__atomic_compare_exchange+0x498>  // b.hs, b.nlast
  50:	ldr	x0, [sp, #56]
  54:	cmp	x0, #0x8
  58:	b.eq	1d4 <__atomic_compare_exchange+0x1d4>  // b.none
  5c:	ldr	x0, [sp, #56]
  60:	cmp	x0, #0x8
  64:	b.hi	4a4 <__atomic_compare_exchange+0x4a4>  // b.pmore
  68:	ldr	x0, [sp, #56]
  6c:	cmp	x0, #0x7
  70:	b.hi	4a4 <__atomic_compare_exchange+0x4a4>  // b.pmore
  74:	ldr	x0, [sp, #56]
  78:	cmp	x0, #0x5
  7c:	b.cs	344 <__atomic_compare_exchange+0x344>  // b.hs, b.nlast
  80:	ldr	x0, [sp, #56]
  84:	cmp	x0, #0x4
  88:	b.eq	184 <__atomic_compare_exchange+0x184>  // b.none
  8c:	ldr	x0, [sp, #56]
  90:	cmp	x0, #0x4
  94:	b.hi	4a4 <__atomic_compare_exchange+0x4a4>  // b.pmore
  98:	ldr	x0, [sp, #56]
  9c:	cmp	x0, #0x3
  a0:	b.eq	264 <__atomic_compare_exchange+0x264>  // b.none
  a4:	ldr	x0, [sp, #56]
  a8:	cmp	x0, #0x3
  ac:	b.hi	4a4 <__atomic_compare_exchange+0x4a4>  // b.pmore
  b0:	ldr	x0, [sp, #56]
  b4:	cmp	x0, #0x2
  b8:	b.eq	130 <__atomic_compare_exchange+0x130>  // b.none
  bc:	ldr	x0, [sp, #56]
  c0:	cmp	x0, #0x2
  c4:	b.hi	4a4 <__atomic_compare_exchange+0x4a4>  // b.pmore
  c8:	ldr	x0, [sp, #56]
  cc:	cmp	x0, #0x0
  d0:	b.eq	e4 <__atomic_compare_exchange+0xe4>  // b.none
  d4:	ldr	x0, [sp, #56]
  d8:	cmp	x0, #0x1
  dc:	b.eq	ec <__atomic_compare_exchange+0xec>  // b.none
  e0:	b	4a4 <__atomic_compare_exchange+0x4a4>
  e4:	mov	w0, #0x1                   	// #1
  e8:	b	540 <__atomic_compare_exchange+0x540>
  ec:	ldr	x0, [sp, #32]
  f0:	ldrb	w2, [x0]
  f4:	ldr	x0, [sp, #48]
  f8:	ldr	x1, [sp, #40]
  fc:	ldrb	w1, [x1]
 100:	ldaxrb	w3, [x0]
 104:	cmp	w3, w1, uxtb
 108:	b.ne	114 <__atomic_compare_exchange+0x114>  // b.any
 10c:	stlxrb	w4, w2, [x0]
 110:	cbnz	w4, 100 <__atomic_compare_exchange+0x100>
 114:	mov	w2, w3
 118:	cset	w0, eq  // eq = none
 11c:	cmp	w0, #0x0
 120:	b.ne	540 <__atomic_compare_exchange+0x540>  // b.any
 124:	ldr	x1, [sp, #40]
 128:	strb	w2, [x1]
 12c:	b	540 <__atomic_compare_exchange+0x540>
 130:	ldr	x0, [sp, #48]
 134:	and	x0, x0, #0x1
 138:	cmp	x0, #0x0
 13c:	b.ne	260 <__atomic_compare_exchange+0x260>  // b.any
 140:	ldr	x0, [sp, #32]
 144:	ldrh	w2, [x0]
 148:	ldr	x0, [sp, #48]
 14c:	ldr	x1, [sp, #40]
 150:	ldrh	w1, [x1]
 154:	ldaxrh	w3, [x0]
 158:	cmp	w3, w1, uxth
 15c:	b.ne	168 <__atomic_compare_exchange+0x168>  // b.any
 160:	stlxrh	w4, w2, [x0]
 164:	cbnz	w4, 154 <__atomic_compare_exchange+0x154>
 168:	mov	w2, w3
 16c:	cset	w0, eq  // eq = none
 170:	cmp	w0, #0x0
 174:	b.ne	540 <__atomic_compare_exchange+0x540>  // b.any
 178:	ldr	x1, [sp, #40]
 17c:	strh	w2, [x1]
 180:	b	540 <__atomic_compare_exchange+0x540>
 184:	ldr	x0, [sp, #48]
 188:	and	x0, x0, #0x3
 18c:	cmp	x0, #0x0
 190:	b.ne	338 <__atomic_compare_exchange+0x338>  // b.any
 194:	ldr	x0, [sp, #32]
 198:	ldr	w3, [x0]
 19c:	ldr	x0, [sp, #48]
 1a0:	ldr	x1, [sp, #40]
 1a4:	ldr	w1, [x1]
 1a8:	ldaxr	w2, [x0]
 1ac:	cmp	w2, w1
 1b0:	b.ne	1bc <__atomic_compare_exchange+0x1bc>  // b.any
 1b4:	stlxr	w4, w3, [x0]
 1b8:	cbnz	w4, 1a8 <__atomic_compare_exchange+0x1a8>
 1bc:	cset	w0, eq  // eq = none
 1c0:	cmp	w0, #0x0
 1c4:	b.ne	540 <__atomic_compare_exchange+0x540>  // b.any
 1c8:	ldr	x1, [sp, #40]
 1cc:	str	w2, [x1]
 1d0:	b	540 <__atomic_compare_exchange+0x540>
 1d4:	ldr	x0, [sp, #48]
 1d8:	and	x0, x0, #0x7
 1dc:	cmp	x0, #0x0
 1e0:	b.ne	418 <__atomic_compare_exchange+0x418>  // b.any
 1e4:	ldr	x0, [sp, #32]
 1e8:	ldr	x3, [x0]
 1ec:	ldr	x0, [sp, #48]
 1f0:	ldr	x1, [sp, #40]
 1f4:	ldr	x1, [x1]
 1f8:	ldaxr	x2, [x0]
 1fc:	cmp	x2, x1
 200:	b.ne	20c <__atomic_compare_exchange+0x20c>  // b.any
 204:	stlxr	w4, x3, [x0]
 208:	cbnz	w4, 1f8 <__atomic_compare_exchange+0x1f8>
 20c:	cset	w0, eq  // eq = none
 210:	cmp	w0, #0x0
 214:	b.ne	540 <__atomic_compare_exchange+0x540>  // b.any
 218:	ldr	x1, [sp, #40]
 21c:	str	x2, [x1]
 220:	b	540 <__atomic_compare_exchange+0x540>
 224:	ldr	x0, [sp, #48]
 228:	and	x0, x0, #0xf
 22c:	cmp	x0, #0x0
 230:	b.ne	4a0 <__atomic_compare_exchange+0x4a0>  // b.any
 234:	ldr	x0, [sp, #32]
 238:	ldp	x0, x1, [x0]
 23c:	ldr	w5, [sp, #24]
 240:	ldr	w4, [sp, #28]
 244:	mov	x2, x0
 248:	mov	x3, x1
 24c:	ldr	x1, [sp, #40]
 250:	ldr	x0, [sp, #48]
 254:	bl	0 <__atomic_compare_exchange_16>
 258:	and	w0, w0, #0xff
 25c:	b	540 <__atomic_compare_exchange+0x540>
 260:	nop
 264:	ldr	x0, [sp, #48]
 268:	and	x0, x0, #0x3
 26c:	str	x0, [sp, #152]
 270:	ldr	x0, [sp, #48]
 274:	and	x0, x0, #0xfffffffffffffffc
 278:	str	x0, [sp, #144]
 27c:	ldr	x1, [sp, #152]
 280:	ldr	x0, [sp, #56]
 284:	add	x0, x1, x0
 288:	cmp	x0, #0x4
 28c:	b.hi	340 <__atomic_compare_exchange+0x340>  // b.pmore
 290:	ldr	w0, [sp, #28]
 294:	str	w0, [sp, #136]
 298:	dmb	ish
 29c:	nop
 2a0:	ldr	x0, [sp, #144]
 2a4:	ldr	w0, [x0]
 2a8:	str	w0, [sp, #80]
 2ac:	add	x1, sp, #0x50
 2b0:	ldr	x0, [sp, #152]
 2b4:	add	x0, x1, x0
 2b8:	ldr	x2, [sp, #56]
 2bc:	ldr	x1, [sp, #40]
 2c0:	bl	0 <memcmp>
 2c4:	cmp	w0, #0x0
 2c8:	b.ne	44c <__atomic_compare_exchange+0x44c>  // b.any
 2cc:	ldp	x0, x1, [sp, #80]
 2d0:	stp	x0, x1, [sp, #64]
 2d4:	add	x1, sp, #0x40
 2d8:	ldr	x0, [sp, #152]
 2dc:	add	x0, x1, x0
 2e0:	ldr	x2, [sp, #56]
 2e4:	ldr	x1, [sp, #32]
 2e8:	bl	0 <memcpy>
 2ec:	ldr	x1, [sp, #144]
 2f0:	ldr	w4, [sp, #64]
 2f4:	add	x0, sp, #0x50
 2f8:	ldr	w3, [x0]
 2fc:	ldxr	w2, [x1]
 300:	cmp	w2, w3
 304:	b.ne	310 <__atomic_compare_exchange+0x310>  // b.any
 308:	stxr	w5, w4, [x1]
 30c:	cmp	w5, #0x0
 310:	cset	w1, eq  // eq = none
 314:	cmp	w1, #0x0
 318:	b.ne	320 <__atomic_compare_exchange+0x320>  // b.any
 31c:	str	w2, [x0]
 320:	mov	w0, w1
 324:	eor	w0, w0, #0x1
 328:	and	w0, w0, #0xff
 32c:	cmp	w0, #0x0
 330:	b.ne	2ac <__atomic_compare_exchange+0x2ac>  // b.any
 334:	b	428 <__atomic_compare_exchange+0x428>
 338:	nop
 33c:	b	344 <__atomic_compare_exchange+0x344>
 340:	nop
 344:	ldr	x0, [sp, #48]
 348:	and	x0, x0, #0x7
 34c:	str	x0, [sp, #152]
 350:	ldr	x0, [sp, #48]
 354:	and	x0, x0, #0xfffffffffffffff8
 358:	str	x0, [sp, #144]
 35c:	ldr	x1, [sp, #152]
 360:	ldr	x0, [sp, #56]
 364:	add	x0, x1, x0
 368:	cmp	x0, #0x8
 36c:	b.hi	420 <__atomic_compare_exchange+0x420>  // b.pmore
 370:	ldr	w0, [sp, #28]
 374:	str	w0, [sp, #132]
 378:	dmb	ish
 37c:	nop
 380:	ldr	x0, [sp, #144]
 384:	ldr	x0, [x0]
 388:	str	x0, [sp, #80]
 38c:	add	x1, sp, #0x50
 390:	ldr	x0, [sp, #152]
 394:	add	x0, x1, x0
 398:	ldr	x2, [sp, #56]
 39c:	ldr	x1, [sp, #40]
 3a0:	bl	0 <memcmp>
 3a4:	cmp	w0, #0x0
 3a8:	b.ne	454 <__atomic_compare_exchange+0x454>  // b.any
 3ac:	ldp	x0, x1, [sp, #80]
 3b0:	stp	x0, x1, [sp, #64]
 3b4:	add	x1, sp, #0x40
 3b8:	ldr	x0, [sp, #152]
 3bc:	add	x0, x1, x0
 3c0:	ldr	x2, [sp, #56]
 3c4:	ldr	x1, [sp, #32]
 3c8:	bl	0 <memcpy>
 3cc:	ldr	x1, [sp, #144]
 3d0:	ldr	x4, [sp, #64]
 3d4:	add	x0, sp, #0x50
 3d8:	ldr	x3, [x0]
 3dc:	ldxr	x2, [x1]
 3e0:	cmp	x2, x3
 3e4:	b.ne	3f0 <__atomic_compare_exchange+0x3f0>  // b.any
 3e8:	stxr	w5, x4, [x1]
 3ec:	cmp	w5, #0x0
 3f0:	cset	w1, eq  // eq = none
 3f4:	cmp	w1, #0x0
 3f8:	b.ne	400 <__atomic_compare_exchange+0x400>  // b.any
 3fc:	str	x2, [x0]
 400:	mov	w0, w1
 404:	eor	w0, w0, #0x1
 408:	and	w0, w0, #0xff
 40c:	cmp	w0, #0x0
 410:	b.ne	38c <__atomic_compare_exchange+0x38c>  // b.any
 414:	b	428 <__atomic_compare_exchange+0x428>
 418:	nop
 41c:	b	498 <__atomic_compare_exchange+0x498>
 420:	nop
 424:	b	498 <__atomic_compare_exchange+0x498>
 428:	ldr	w0, [sp, #28]
 42c:	str	w0, [sp, #128]
 430:	ldr	w0, [sp, #128]
 434:	str	w0, [sp, #124]
 438:	dmb	ish
 43c:	nop
 440:	nop
 444:	mov	w0, #0x1                   	// #1
 448:	b	540 <__atomic_compare_exchange+0x540>
 44c:	nop
 450:	b	458 <__atomic_compare_exchange+0x458>
 454:	nop
 458:	ldr	w0, [sp, #24]
 45c:	str	w0, [sp, #120]
 460:	ldr	w0, [sp, #120]
 464:	str	w0, [sp, #116]
 468:	dmb	ish
 46c:	nop
 470:	nop
 474:	add	x1, sp, #0x50
 478:	ldr	x0, [sp, #152]
 47c:	add	x0, x1, x0
 480:	ldr	x2, [sp, #56]
 484:	mov	x1, x0
 488:	ldr	x0, [sp, #40]
 48c:	bl	0 <memcpy>
 490:	mov	w0, #0x0                   	// #0
 494:	b	540 <__atomic_compare_exchange+0x540>
 498:	nop
 49c:	b	4a4 <__atomic_compare_exchange+0x4a4>
 4a0:	nop
 4a4:	ldr	w0, [sp, #28]
 4a8:	str	w0, [sp, #112]
 4ac:	nop
 4b0:	ldr	x1, [sp, #56]
 4b4:	ldr	x0, [sp, #48]
 4b8:	bl	0 <libat_lock_n>
 4bc:	ldr	x2, [sp, #56]
 4c0:	ldr	x1, [sp, #40]
 4c4:	ldr	x0, [sp, #48]
 4c8:	bl	0 <memcmp>
 4cc:	cmp	w0, #0x0
 4d0:	cset	w0, eq  // eq = none
 4d4:	strb	w0, [sp, #143]
 4d8:	ldrb	w0, [sp, #143]
 4dc:	cmp	w0, #0x0
 4e0:	b.eq	4ec <__atomic_compare_exchange+0x4ec>  // b.none
 4e4:	ldr	x0, [sp, #48]
 4e8:	b	4f0 <__atomic_compare_exchange+0x4f0>
 4ec:	ldr	x0, [sp, #40]
 4f0:	ldrb	w1, [sp, #143]
 4f4:	cmp	w1, #0x0
 4f8:	b.eq	504 <__atomic_compare_exchange+0x504>  // b.none
 4fc:	ldr	x1, [sp, #32]
 500:	b	508 <__atomic_compare_exchange+0x508>
 504:	ldr	x1, [sp, #48]
 508:	ldr	x2, [sp, #56]
 50c:	bl	0 <memcpy>
 510:	ldr	x1, [sp, #56]
 514:	ldr	x0, [sp, #48]
 518:	bl	0 <libat_unlock_n>
 51c:	ldrb	w0, [sp, #143]
 520:	cmp	w0, #0x0
 524:	b.eq	530 <__atomic_compare_exchange+0x530>  // b.none
 528:	ldr	w0, [sp, #28]
 52c:	b	534 <__atomic_compare_exchange+0x534>
 530:	ldr	w0, [sp, #24]
 534:	str	w0, [sp, #108]
 538:	nop
 53c:	ldrb	w0, [sp, #143]
 540:	ldp	x29, x30, [sp], #160
 544:	ret

gexch.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_large_inplace>:
   0:	sub	sp, sp, #0x440
   4:	stp	x29, x30, [sp]
   8:	mov	x29, sp
   c:	str	x0, [sp, #40]
  10:	str	x1, [sp, #32]
  14:	str	x2, [sp, #24]
  18:	str	xzr, [sp, #1080]
  1c:	str	xzr, [sp, #1080]
  20:	b	b0 <libat_exchange_large_inplace+0xb0>
  24:	ldr	x1, [sp, #32]
  28:	ldr	x0, [sp, #1080]
  2c:	add	x1, x1, x0
  30:	add	x0, sp, #0x38
  34:	mov	x3, x1
  38:	mov	x1, #0x400                 	// #1024
  3c:	mov	x2, x1
  40:	mov	x1, x3
  44:	bl	0 <memcpy>
  48:	ldr	x1, [sp, #32]
  4c:	ldr	x0, [sp, #1080]
  50:	add	x3, x1, x0
  54:	ldr	x1, [sp, #24]
  58:	ldr	x0, [sp, #1080]
  5c:	add	x0, x1, x0
  60:	mov	x2, #0x400                 	// #1024
  64:	mov	x1, x0
  68:	mov	x0, x3
  6c:	bl	0 <memcpy>
  70:	ldr	x1, [sp, #24]
  74:	ldr	x0, [sp, #1080]
  78:	add	x0, x1, x0
  7c:	mov	x3, x0
  80:	add	x0, sp, #0x38
  84:	mov	x1, #0x400                 	// #1024
  88:	mov	x2, x1
  8c:	mov	x1, x0
  90:	mov	x0, x3
  94:	bl	0 <memcpy>
  98:	ldr	x0, [sp, #1080]
  9c:	add	x0, x0, #0x400
  a0:	str	x0, [sp, #1080]
  a4:	ldr	x0, [sp, #40]
  a8:	sub	x0, x0, #0x400
  ac:	str	x0, [sp, #40]
  b0:	ldr	x0, [sp, #40]
  b4:	cmp	x0, #0x3ff
  b8:	b.hi	24 <libat_exchange_large_inplace+0x24>  // b.pmore
  bc:	ldr	x0, [sp, #40]
  c0:	cmp	x0, #0x0
  c4:	b.eq	120 <libat_exchange_large_inplace+0x120>  // b.none
  c8:	ldr	x1, [sp, #32]
  cc:	ldr	x0, [sp, #1080]
  d0:	add	x1, x1, x0
  d4:	add	x0, sp, #0x38
  d8:	ldr	x2, [sp, #40]
  dc:	bl	0 <memcpy>
  e0:	ldr	x1, [sp, #32]
  e4:	ldr	x0, [sp, #1080]
  e8:	add	x3, x1, x0
  ec:	ldr	x1, [sp, #24]
  f0:	ldr	x0, [sp, #1080]
  f4:	add	x0, x1, x0
  f8:	ldr	x2, [sp, #40]
  fc:	mov	x1, x0
 100:	mov	x0, x3
 104:	bl	0 <memcpy>
 108:	ldr	x1, [sp, #24]
 10c:	ldr	x0, [sp, #1080]
 110:	add	x0, x1, x0
 114:	add	x1, sp, #0x38
 118:	ldr	x2, [sp, #40]
 11c:	bl	0 <memcpy>
 120:	nop
 124:	ldp	x29, x30, [sp]
 128:	add	sp, sp, #0x440
 12c:	ret

0000000000000130 <__atomic_exchange>:
 130:	stp	x29, x30, [sp, #-144]!
 134:	mov	x29, sp
 138:	str	x0, [sp, #56]
 13c:	str	x1, [sp, #48]
 140:	str	x2, [sp, #40]
 144:	str	x3, [sp, #32]
 148:	str	w4, [sp, #28]
 14c:	ldr	x0, [sp, #56]
 150:	cmp	x0, #0x10
 154:	b.eq	2d4 <__atomic_exchange+0x1a4>  // b.none
 158:	ldr	x0, [sp, #56]
 15c:	cmp	x0, #0x10
 160:	b.hi	4dc <__atomic_exchange+0x3ac>  // b.pmore
 164:	ldr	x0, [sp, #56]
 168:	cmp	x0, #0xf
 16c:	b.hi	4dc <__atomic_exchange+0x3ac>  // b.pmore
 170:	ldr	x0, [sp, #56]
 174:	cmp	x0, #0x9
 178:	b.cs	4d0 <__atomic_exchange+0x3a0>  // b.hs, b.nlast
 17c:	ldr	x0, [sp, #56]
 180:	cmp	x0, #0x8
 184:	b.eq	2a0 <__atomic_exchange+0x170>  // b.none
 188:	ldr	x0, [sp, #56]
 18c:	cmp	x0, #0x8
 190:	b.hi	4dc <__atomic_exchange+0x3ac>  // b.pmore
 194:	ldr	x0, [sp, #56]
 198:	cmp	x0, #0x7
 19c:	b.hi	4dc <__atomic_exchange+0x3ac>  // b.pmore
 1a0:	ldr	x0, [sp, #56]
 1a4:	cmp	x0, #0x5
 1a8:	b.cs	3d0 <__atomic_exchange+0x2a0>  // b.hs, b.nlast
 1ac:	ldr	x0, [sp, #56]
 1b0:	cmp	x0, #0x4
 1b4:	b.eq	26c <__atomic_exchange+0x13c>  // b.none
 1b8:	ldr	x0, [sp, #56]
 1bc:	cmp	x0, #0x4
 1c0:	b.hi	4dc <__atomic_exchange+0x3ac>  // b.pmore
 1c4:	ldr	x0, [sp, #56]
 1c8:	cmp	x0, #0x3
 1cc:	b.eq	310 <__atomic_exchange+0x1e0>  // b.none
 1d0:	ldr	x0, [sp, #56]
 1d4:	cmp	x0, #0x3
 1d8:	b.hi	4dc <__atomic_exchange+0x3ac>  // b.pmore
 1dc:	ldr	x0, [sp, #56]
 1e0:	cmp	x0, #0x2
 1e4:	b.eq	234 <__atomic_exchange+0x104>  // b.none
 1e8:	ldr	x0, [sp, #56]
 1ec:	cmp	x0, #0x2
 1f0:	b.hi	4dc <__atomic_exchange+0x3ac>  // b.pmore
 1f4:	ldr	x0, [sp, #56]
 1f8:	cmp	x0, #0x0
 1fc:	b.eq	550 <__atomic_exchange+0x420>  // b.none
 200:	ldr	x0, [sp, #56]
 204:	cmp	x0, #0x1
 208:	b.ne	4dc <__atomic_exchange+0x3ac>  // b.any
 20c:	ldr	x0, [sp, #40]
 210:	ldrb	w1, [x0]
 214:	ldr	x0, [sp, #48]
 218:	ldaxrb	w2, [x0]
 21c:	stlxrb	w3, w1, [x0]
 220:	cbnz	w3, 218 <__atomic_exchange+0xe8>
 224:	and	w1, w2, #0xff
 228:	ldr	x0, [sp, #32]
 22c:	strb	w1, [x0]
 230:	b	554 <__atomic_exchange+0x424>
 234:	ldr	x0, [sp, #48]
 238:	and	x0, x0, #0x1
 23c:	cmp	x0, #0x0
 240:	b.ne	30c <__atomic_exchange+0x1dc>  // b.any
 244:	ldr	x0, [sp, #40]
 248:	ldrh	w1, [x0]
 24c:	ldr	x0, [sp, #48]
 250:	ldaxrh	w2, [x0]
 254:	stlxrh	w3, w1, [x0]
 258:	cbnz	w3, 250 <__atomic_exchange+0x120>
 25c:	and	w1, w2, #0xffff
 260:	ldr	x0, [sp, #32]
 264:	strh	w1, [x0]
 268:	b	554 <__atomic_exchange+0x424>
 26c:	ldr	x0, [sp, #48]
 270:	and	x0, x0, #0x3
 274:	cmp	x0, #0x0
 278:	b.ne	3c4 <__atomic_exchange+0x294>  // b.any
 27c:	ldr	x0, [sp, #40]
 280:	ldr	w2, [x0]
 284:	ldr	x0, [sp, #48]
 288:	ldaxr	w1, [x0]
 28c:	stlxr	w3, w2, [x0]
 290:	cbnz	w3, 288 <__atomic_exchange+0x158>
 294:	ldr	x0, [sp, #32]
 298:	str	w1, [x0]
 29c:	b	554 <__atomic_exchange+0x424>
 2a0:	ldr	x0, [sp, #48]
 2a4:	and	x0, x0, #0x7
 2a8:	cmp	x0, #0x0
 2ac:	b.ne	484 <__atomic_exchange+0x354>  // b.any
 2b0:	ldr	x0, [sp, #40]
 2b4:	ldr	x2, [x0]
 2b8:	ldr	x0, [sp, #48]
 2bc:	ldaxr	x1, [x0]
 2c0:	stlxr	w3, x2, [x0]
 2c4:	cbnz	w3, 2bc <__atomic_exchange+0x18c>
 2c8:	ldr	x0, [sp, #32]
 2cc:	str	x1, [x0]
 2d0:	b	554 <__atomic_exchange+0x424>
 2d4:	ldr	x0, [sp, #48]
 2d8:	and	x0, x0, #0xf
 2dc:	cmp	x0, #0x0
 2e0:	b.ne	4d8 <__atomic_exchange+0x3a8>  // b.any
 2e4:	ldr	x0, [sp, #40]
 2e8:	ldp	x0, x1, [x0]
 2ec:	ldr	w4, [sp, #28]
 2f0:	mov	x2, x0
 2f4:	mov	x3, x1
 2f8:	ldr	x0, [sp, #48]
 2fc:	bl	0 <__atomic_exchange_16>
 300:	ldr	x2, [sp, #32]
 304:	stp	x0, x1, [x2]
 308:	b	554 <__atomic_exchange+0x424>
 30c:	nop
 310:	ldr	x0, [sp, #48]
 314:	and	x0, x0, #0x3
 318:	str	x0, [sp, #136]
 31c:	ldr	x0, [sp, #48]
 320:	and	x0, x0, #0xfffffffffffffffc
 324:	str	x0, [sp, #128]
 328:	ldr	x1, [sp, #136]
 32c:	ldr	x0, [sp, #56]
 330:	add	x0, x1, x0
 334:	cmp	x0, #0x4
 338:	b.hi	3cc <__atomic_exchange+0x29c>  // b.pmore
 33c:	ldr	w0, [sp, #28]
 340:	str	w0, [sp, #124]
 344:	dmb	ish
 348:	nop
 34c:	ldr	x0, [sp, #128]
 350:	ldr	w0, [x0]
 354:	str	w0, [sp, #80]
 358:	ldp	x0, x1, [sp, #80]
 35c:	stp	x0, x1, [sp, #64]
 360:	add	x1, sp, #0x40
 364:	ldr	x0, [sp, #136]
 368:	add	x0, x1, x0
 36c:	ldr	x2, [sp, #56]
 370:	ldr	x1, [sp, #40]
 374:	bl	0 <memcpy>
 378:	ldr	x1, [sp, #128]
 37c:	ldr	w4, [sp, #64]
 380:	add	x0, sp, #0x50
 384:	ldr	w3, [x0]
 388:	ldxr	w2, [x1]
 38c:	cmp	w2, w3
 390:	b.ne	39c <__atomic_exchange+0x26c>  // b.any
 394:	stxr	w5, w4, [x1]
 398:	cmp	w5, #0x0
 39c:	cset	w1, eq  // eq = none
 3a0:	cmp	w1, #0x0
 3a4:	b.ne	3ac <__atomic_exchange+0x27c>  // b.any
 3a8:	str	w2, [x0]
 3ac:	mov	w0, w1
 3b0:	eor	w0, w0, #0x1
 3b4:	and	w0, w0, #0xff
 3b8:	cmp	w0, #0x0
 3bc:	b.ne	358 <__atomic_exchange+0x228>  // b.any
 3c0:	b	494 <__atomic_exchange+0x364>
 3c4:	nop
 3c8:	b	3d0 <__atomic_exchange+0x2a0>
 3cc:	nop
 3d0:	ldr	x0, [sp, #48]
 3d4:	and	x0, x0, #0x7
 3d8:	str	x0, [sp, #136]
 3dc:	ldr	x0, [sp, #48]
 3e0:	and	x0, x0, #0xfffffffffffffff8
 3e4:	str	x0, [sp, #128]
 3e8:	ldr	x1, [sp, #136]
 3ec:	ldr	x0, [sp, #56]
 3f0:	add	x0, x1, x0
 3f4:	cmp	x0, #0x8
 3f8:	b.hi	48c <__atomic_exchange+0x35c>  // b.pmore
 3fc:	ldr	w0, [sp, #28]
 400:	str	w0, [sp, #120]
 404:	dmb	ish
 408:	nop
 40c:	ldr	x0, [sp, #128]
 410:	ldr	x0, [x0]
 414:	str	x0, [sp, #80]
 418:	ldp	x0, x1, [sp, #80]
 41c:	stp	x0, x1, [sp, #64]
 420:	add	x1, sp, #0x40
 424:	ldr	x0, [sp, #136]
 428:	add	x0, x1, x0
 42c:	ldr	x2, [sp, #56]
 430:	ldr	x1, [sp, #40]
 434:	bl	0 <memcpy>
 438:	ldr	x1, [sp, #128]
 43c:	ldr	x4, [sp, #64]
 440:	add	x0, sp, #0x50
 444:	ldr	x3, [x0]
 448:	ldxr	x2, [x1]
 44c:	cmp	x2, x3
 450:	b.ne	45c <__atomic_exchange+0x32c>  // b.any
 454:	stxr	w5, x4, [x1]
 458:	cmp	w5, #0x0
 45c:	cset	w1, eq  // eq = none
 460:	cmp	w1, #0x0
 464:	b.ne	46c <__atomic_exchange+0x33c>  // b.any
 468:	str	x2, [x0]
 46c:	mov	w0, w1
 470:	eor	w0, w0, #0x1
 474:	and	w0, w0, #0xff
 478:	cmp	w0, #0x0
 47c:	b.ne	418 <__atomic_exchange+0x2e8>  // b.any
 480:	b	494 <__atomic_exchange+0x364>
 484:	nop
 488:	b	4d0 <__atomic_exchange+0x3a0>
 48c:	nop
 490:	b	4d0 <__atomic_exchange+0x3a0>
 494:	ldr	w0, [sp, #28]
 498:	str	w0, [sp, #116]
 49c:	ldr	w0, [sp, #116]
 4a0:	str	w0, [sp, #112]
 4a4:	dmb	ish
 4a8:	nop
 4ac:	nop
 4b0:	add	x1, sp, #0x50
 4b4:	ldr	x0, [sp, #136]
 4b8:	add	x0, x1, x0
 4bc:	ldr	x2, [sp, #56]
 4c0:	mov	x1, x0
 4c4:	ldr	x0, [sp, #32]
 4c8:	bl	0 <memcpy>
 4cc:	b	554 <__atomic_exchange+0x424>
 4d0:	nop
 4d4:	b	4dc <__atomic_exchange+0x3ac>
 4d8:	nop
 4dc:	ldr	w0, [sp, #28]
 4e0:	str	w0, [sp, #108]
 4e4:	nop
 4e8:	ldr	x1, [sp, #56]
 4ec:	ldr	x0, [sp, #48]
 4f0:	bl	0 <libat_lock_n>
 4f4:	ldr	x1, [sp, #40]
 4f8:	ldr	x0, [sp, #32]
 4fc:	cmp	x1, x0
 500:	b.eq	528 <__atomic_exchange+0x3f8>  // b.none
 504:	ldr	x2, [sp, #56]
 508:	ldr	x1, [sp, #48]
 50c:	ldr	x0, [sp, #32]
 510:	bl	0 <memcpy>
 514:	ldr	x2, [sp, #56]
 518:	ldr	x1, [sp, #40]
 51c:	ldr	x0, [sp, #48]
 520:	bl	0 <memcpy>
 524:	b	538 <__atomic_exchange+0x408>
 528:	ldr	x2, [sp, #40]
 52c:	ldr	x1, [sp, #48]
 530:	ldr	x0, [sp, #56]
 534:	bl	0 <libat_exchange_large_inplace>
 538:	ldr	x1, [sp, #56]
 53c:	ldr	x0, [sp, #48]
 540:	bl	0 <libat_unlock_n>
 544:	ldr	w0, [sp, #28]
 548:	str	w0, [sp, #104]
 54c:	b	554 <__atomic_exchange+0x424>
 550:	nop
 554:	ldp	x29, x30, [sp], #144
 558:	ret

glfree.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__atomic_is_lock_free>:
   0:	sub	sp, sp, #0x30
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	ldr	x0, [sp, #8]
  10:	cmp	x0, #0x10
  14:	b.eq	128 <__atomic_is_lock_free+0x128>  // b.none
  18:	ldr	x0, [sp, #8]
  1c:	cmp	x0, #0x10
  20:	b.hi	1b8 <__atomic_is_lock_free+0x1b8>  // b.pmore
  24:	ldr	x0, [sp, #8]
  28:	cmp	x0, #0xf
  2c:	b.hi	1b8 <__atomic_is_lock_free+0x1b8>  // b.pmore
  30:	ldr	x0, [sp, #8]
  34:	cmp	x0, #0x9
  38:	b.cs	1a4 <__atomic_is_lock_free+0x1a4>  // b.hs, b.nlast
  3c:	ldr	x0, [sp, #8]
  40:	cmp	x0, #0x8
  44:	b.eq	110 <__atomic_is_lock_free+0x110>  // b.none
  48:	ldr	x0, [sp, #8]
  4c:	cmp	x0, #0x8
  50:	b.hi	1b8 <__atomic_is_lock_free+0x1b8>  // b.pmore
  54:	ldr	x0, [sp, #8]
  58:	cmp	x0, #0x7
  5c:	b.hi	1b8 <__atomic_is_lock_free+0x1b8>  // b.pmore
  60:	ldr	x0, [sp, #8]
  64:	cmp	x0, #0x5
  68:	b.cs	170 <__atomic_is_lock_free+0x170>  // b.hs, b.nlast
  6c:	ldr	x0, [sp, #8]
  70:	cmp	x0, #0x4
  74:	b.eq	f8 <__atomic_is_lock_free+0xf8>  // b.none
  78:	ldr	x0, [sp, #8]
  7c:	cmp	x0, #0x4
  80:	b.hi	1b8 <__atomic_is_lock_free+0x1b8>  // b.pmore
  84:	ldr	x0, [sp, #8]
  88:	cmp	x0, #0x3
  8c:	b.eq	13c <__atomic_is_lock_free+0x13c>  // b.none
  90:	ldr	x0, [sp, #8]
  94:	cmp	x0, #0x3
  98:	b.hi	1b8 <__atomic_is_lock_free+0x1b8>  // b.pmore
  9c:	ldr	x0, [sp, #8]
  a0:	cmp	x0, #0x2
  a4:	b.eq	e0 <__atomic_is_lock_free+0xe0>  // b.none
  a8:	ldr	x0, [sp, #8]
  ac:	cmp	x0, #0x2
  b0:	b.hi	1b8 <__atomic_is_lock_free+0x1b8>  // b.pmore
  b4:	ldr	x0, [sp, #8]
  b8:	cmp	x0, #0x0
  bc:	b.eq	d0 <__atomic_is_lock_free+0xd0>  // b.none
  c0:	ldr	x0, [sp, #8]
  c4:	cmp	x0, #0x1
  c8:	b.eq	d8 <__atomic_is_lock_free+0xd8>  // b.none
  cc:	b	1b8 <__atomic_is_lock_free+0x1b8>
  d0:	mov	w0, #0x1                   	// #1
  d4:	b	1bc <__atomic_is_lock_free+0x1bc>
  d8:	mov	w0, #0x1                   	// #1
  dc:	b	1bc <__atomic_is_lock_free+0x1bc>
  e0:	ldr	x0, [sp]
  e4:	and	x0, x0, #0x1
  e8:	cmp	x0, #0x0
  ec:	b.ne	138 <__atomic_is_lock_free+0x138>  // b.any
  f0:	mov	w0, #0x1                   	// #1
  f4:	b	1bc <__atomic_is_lock_free+0x1bc>
  f8:	ldr	x0, [sp]
  fc:	and	x0, x0, #0x3
 100:	cmp	x0, #0x0
 104:	b.ne	164 <__atomic_is_lock_free+0x164>  // b.any
 108:	mov	w0, #0x1                   	// #1
 10c:	b	1bc <__atomic_is_lock_free+0x1bc>
 110:	ldr	x0, [sp]
 114:	and	x0, x0, #0x7
 118:	cmp	x0, #0x0
 11c:	b.ne	198 <__atomic_is_lock_free+0x198>  // b.any
 120:	mov	w0, #0x1                   	// #1
 124:	b	1bc <__atomic_is_lock_free+0x1bc>
 128:	ldr	x0, [sp]
 12c:	and	x0, x0, #0xf
 130:	cmp	x0, #0x0
 134:	b	1b8 <__atomic_is_lock_free+0x1b8>
 138:	nop
 13c:	ldr	x0, [sp]
 140:	and	x0, x0, #0x3
 144:	str	x0, [sp, #40]
 148:	ldr	x1, [sp, #40]
 14c:	ldr	x0, [sp, #8]
 150:	add	x0, x1, x0
 154:	cmp	x0, #0x4
 158:	b.hi	16c <__atomic_is_lock_free+0x16c>  // b.pmore
 15c:	mov	w0, #0x1                   	// #1
 160:	b	1bc <__atomic_is_lock_free+0x1bc>
 164:	nop
 168:	b	170 <__atomic_is_lock_free+0x170>
 16c:	nop
 170:	ldr	x0, [sp]
 174:	and	x0, x0, #0x7
 178:	str	x0, [sp, #32]
 17c:	ldr	x1, [sp, #32]
 180:	ldr	x0, [sp, #8]
 184:	add	x0, x1, x0
 188:	cmp	x0, #0x8
 18c:	b.hi	1a0 <__atomic_is_lock_free+0x1a0>  // b.pmore
 190:	mov	w0, #0x1                   	// #1
 194:	b	1bc <__atomic_is_lock_free+0x1bc>
 198:	nop
 19c:	b	1a4 <__atomic_is_lock_free+0x1a4>
 1a0:	nop
 1a4:	ldr	x0, [sp]
 1a8:	and	x0, x0, #0xf
 1ac:	str	x0, [sp, #24]
 1b0:	nop
 1b4:	nop
 1b8:	mov	w0, #0x0                   	// #0
 1bc:	add	sp, sp, #0x30
 1c0:	ret

lock.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <addr_hash>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	lsr	x0, x0, #6
  10:	and	x0, x0, #0x3f
  14:	add	sp, sp, #0x10
  18:	ret

000000000000001c <libat_lock_1>:
  1c:	stp	x29, x30, [sp, #-32]!
  20:	mov	x29, sp
  24:	str	x0, [sp, #24]
  28:	ldr	x0, [sp, #24]
  2c:	bl	0 <addr_hash>
  30:	lsl	x1, x0, #6
  34:	adrp	x0, 0 <addr_hash>
  38:	add	x0, x0, #0x0
  3c:	add	x0, x1, x0
  40:	bl	0 <pthread_mutex_lock>
  44:	nop
  48:	ldp	x29, x30, [sp], #32
  4c:	ret

0000000000000050 <libat_unlock_1>:
  50:	stp	x29, x30, [sp, #-32]!
  54:	mov	x29, sp
  58:	str	x0, [sp, #24]
  5c:	ldr	x0, [sp, #24]
  60:	bl	0 <addr_hash>
  64:	lsl	x1, x0, #6
  68:	adrp	x0, 0 <addr_hash>
  6c:	add	x0, x0, #0x0
  70:	add	x0, x1, x0
  74:	bl	0 <pthread_mutex_unlock>
  78:	nop
  7c:	ldp	x29, x30, [sp], #32
  80:	ret

0000000000000084 <libat_lock_n>:
  84:	stp	x29, x30, [sp, #-48]!
  88:	mov	x29, sp
  8c:	str	x0, [sp, #24]
  90:	str	x1, [sp, #16]
  94:	ldr	x0, [sp, #24]
  98:	bl	0 <addr_hash>
  9c:	str	x0, [sp, #40]
  a0:	str	xzr, [sp, #32]
  a4:	ldr	x0, [sp, #16]
  a8:	cmp	x0, #0x1, lsl #12
  ac:	b.ls	b8 <libat_lock_n+0x34>  // b.plast
  b0:	mov	x0, #0x1000                	// #4096
  b4:	str	x0, [sp, #16]
  b8:	ldr	x0, [sp, #40]
  bc:	lsl	x1, x0, #6
  c0:	adrp	x0, 0 <addr_hash>
  c4:	add	x0, x0, #0x0
  c8:	add	x0, x1, x0
  cc:	bl	0 <pthread_mutex_lock>
  d0:	ldr	x0, [sp, #40]
  d4:	add	x0, x0, #0x1
  d8:	str	x0, [sp, #40]
  dc:	ldr	x0, [sp, #40]
  e0:	cmp	x0, #0x40
  e4:	b.ne	ec <libat_lock_n+0x68>  // b.any
  e8:	str	xzr, [sp, #40]
  ec:	ldr	x0, [sp, #32]
  f0:	add	x0, x0, #0x40
  f4:	str	x0, [sp, #32]
  f8:	ldr	x1, [sp, #32]
  fc:	ldr	x0, [sp, #16]
 100:	cmp	x1, x0
 104:	b.cc	b8 <libat_lock_n+0x34>  // b.lo, b.ul, b.last
 108:	nop
 10c:	nop
 110:	ldp	x29, x30, [sp], #48
 114:	ret

0000000000000118 <libat_unlock_n>:
 118:	stp	x29, x30, [sp, #-48]!
 11c:	mov	x29, sp
 120:	str	x0, [sp, #24]
 124:	str	x1, [sp, #16]
 128:	ldr	x0, [sp, #24]
 12c:	bl	0 <addr_hash>
 130:	str	x0, [sp, #40]
 134:	str	xzr, [sp, #32]
 138:	ldr	x0, [sp, #16]
 13c:	cmp	x0, #0x1, lsl #12
 140:	b.ls	14c <libat_unlock_n+0x34>  // b.plast
 144:	mov	x0, #0x1000                	// #4096
 148:	str	x0, [sp, #16]
 14c:	ldr	x0, [sp, #40]
 150:	lsl	x1, x0, #6
 154:	adrp	x0, 0 <addr_hash>
 158:	add	x0, x0, #0x0
 15c:	add	x0, x1, x0
 160:	bl	0 <pthread_mutex_unlock>
 164:	ldr	x0, [sp, #40]
 168:	add	x0, x0, #0x1
 16c:	str	x0, [sp, #40]
 170:	ldr	x0, [sp, #40]
 174:	cmp	x0, #0x40
 178:	b.ne	180 <libat_unlock_n+0x68>  // b.any
 17c:	str	xzr, [sp, #40]
 180:	ldr	x0, [sp, #32]
 184:	add	x0, x0, #0x40
 188:	str	x0, [sp, #32]
 18c:	ldr	x1, [sp, #32]
 190:	ldr	x0, [sp, #16]
 194:	cmp	x1, x0
 198:	b.cc	14c <libat_unlock_n+0x34>  // b.lo, b.ul, b.last
 19c:	nop
 1a0:	nop
 1a4:	ldp	x29, x30, [sp], #48
 1a8:	ret

init.o:     file format elf64-littleaarch64


fenv.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__atomic_feraiseexcept>:
   0:	sub	sp, sp, #0x30
   4:	str	w0, [sp, #12]
   8:	ldr	w0, [sp, #12]
   c:	and	w0, w0, #0x1
  10:	cmp	w0, #0x0
  14:	b.eq	2c <__atomic_feraiseexcept+0x2c>  // b.none
  18:	str	wzr, [sp, #40]
  1c:	ldr	s1, [sp, #40]
  20:	ldr	s0, [sp, #40]
  24:	fdiv	s0, s1, s0
  28:	str	s0, [sp, #44]
  2c:	ldr	w0, [sp, #12]
  30:	and	w0, w0, #0x2
  34:	cmp	w0, #0x0
  38:	b.eq	50 <__atomic_feraiseexcept+0x50>  // b.none
  3c:	str	wzr, [sp, #36]
  40:	ldr	s0, [sp, #36]
  44:	fmov	s1, #1.000000000000000000e+00
  48:	fdiv	s0, s1, s0
  4c:	str	s0, [sp, #44]
  50:	ldr	w0, [sp, #12]
  54:	and	w0, w0, #0x4
  58:	cmp	w0, #0x0
  5c:	b.eq	7c <__atomic_feraiseexcept+0x7c>  // b.none
  60:	mov	w0, #0x7f7fffff            	// #2139095039
  64:	fmov	s0, w0
  68:	str	s0, [sp, #32]
  6c:	ldr	s1, [sp, #32]
  70:	ldr	s0, [sp, #32]
  74:	fmul	s0, s1, s0
  78:	str	s0, [sp, #44]
  7c:	ldr	w0, [sp, #12]
  80:	and	w0, w0, #0x8
  84:	cmp	w0, #0x0
  88:	b.eq	a4 <__atomic_feraiseexcept+0xa4>  // b.none
  8c:	movi	v0.2s, #0x80, lsl #16
  90:	str	s0, [sp, #28]
  94:	ldr	s1, [sp, #28]
  98:	ldr	s0, [sp, #28]
  9c:	fmul	s0, s1, s0
  a0:	str	s0, [sp, #44]
  a4:	ldr	w0, [sp, #12]
  a8:	and	w0, w0, #0x10
  ac:	cmp	w0, #0x0
  b0:	b.eq	cc <__atomic_feraiseexcept+0xcc>  // b.none
  b4:	fmov	s0, #3.000000000000000000e+00
  b8:	str	s0, [sp, #24]
  bc:	ldr	s0, [sp, #24]
  c0:	fmov	s1, #1.000000000000000000e+00
  c4:	fdiv	s0, s1, s0
  c8:	str	s0, [sp, #44]
  cc:	nop
  d0:	add	sp, sp, #0x30
  d4:	ret

fence.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <atomic_thread_fence>:
   0:	sub	sp, sp, #0x10
   4:	str	w0, [sp, #12]
   8:	dmb	ish
   c:	nop
  10:	add	sp, sp, #0x10
  14:	ret

0000000000000018 <atomic_signal_fence>:
  18:	sub	sp, sp, #0x10
  1c:	str	w0, [sp, #12]
  20:	nop
  24:	add	sp, sp, #0x10
  28:	ret

flag.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <atomic_flag_test_and_set>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	mov	w1, #0x1                   	// #1
  10:	ldaxrb	w2, [x0]
  14:	stlxrb	w3, w1, [x0]
  18:	cbnz	w3, 10 <atomic_flag_test_and_set+0x10>
  1c:	and	w0, w2, #0xff
  20:	add	sp, sp, #0x10
  24:	ret

0000000000000028 <atomic_flag_test_and_set_explicit>:
  28:	sub	sp, sp, #0x10
  2c:	str	x0, [sp, #8]
  30:	str	w1, [sp, #4]
  34:	ldr	x0, [sp, #8]
  38:	mov	w1, #0x1                   	// #1
  3c:	ldaxrb	w2, [x0]
  40:	stlxrb	w3, w1, [x0]
  44:	cbnz	w3, 3c <atomic_flag_test_and_set_explicit+0x14>
  48:	and	w0, w2, #0xff
  4c:	add	sp, sp, #0x10
  50:	ret

0000000000000054 <atomic_flag_clear>:
  54:	sub	sp, sp, #0x10
  58:	str	x0, [sp, #8]
  5c:	ldr	x0, [sp, #8]
  60:	stlrb	wzr, [x0]
  64:	nop
  68:	add	sp, sp, #0x10
  6c:	ret

0000000000000070 <atomic_flag_clear_explicit>:
  70:	sub	sp, sp, #0x10
  74:	str	x0, [sp, #8]
  78:	str	w1, [sp, #4]
  7c:	ldr	x0, [sp, #8]
  80:	stlrb	wzr, [x0]
  84:	add	sp, sp, #0x10
  88:	ret

load_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	ldarb	w0, [x0]
  14:	and	w0, w0, #0xff
  18:	add	sp, sp, #0x10
  1c:	ret

0000000000000020 <select_load_1>:
  20:	sub	sp, sp, #0x10
  24:	str	x0, [sp, #8]
  28:	adrp	x0, 0 <libat_load_1>
  2c:	add	x0, x0, #0x0
  30:	add	sp, sp, #0x10
  34:	ret

store_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strb	w1, [sp, #7]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrb	w1, [sp, #7]
  18:	stlrb	w1, [x0]
  1c:	nop
  20:	add	sp, sp, #0x10
  24:	ret

0000000000000028 <select_store_1>:
  28:	sub	sp, sp, #0x10
  2c:	str	x0, [sp, #8]
  30:	adrp	x0, 0 <libat_store_1>
  34:	add	x0, x0, #0x0
  38:	add	sp, sp, #0x10
  3c:	ret

cas_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_1>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	strb	w2, [sp, #15]
  10:	str	w3, [sp, #8]
  14:	str	w4, [sp, #4]
  18:	ldr	x0, [sp, #24]
  1c:	ldr	x1, [sp, #16]
  20:	ldrb	w1, [x1]
  24:	ldrb	w2, [sp, #15]
  28:	ldaxrb	w3, [x0]
  2c:	cmp	w3, w1, uxtb
  30:	b.ne	3c <libat_compare_exchange_1+0x3c>  // b.any
  34:	stlxrb	w4, w2, [x0]
  38:	cbnz	w4, 28 <libat_compare_exchange_1+0x28>
  3c:	mov	w2, w3
  40:	cset	w0, eq  // eq = none
  44:	cmp	w0, #0x0
  48:	b.ne	54 <libat_compare_exchange_1+0x54>  // b.any
  4c:	ldr	x1, [sp, #16]
  50:	strb	w2, [x1]
  54:	add	sp, sp, #0x20
  58:	ret

000000000000005c <select_compare_exchange_1>:
  5c:	sub	sp, sp, #0x10
  60:	str	x0, [sp, #8]
  64:	adrp	x0, 0 <libat_compare_exchange_1>
  68:	add	x0, x0, #0x0
  6c:	add	sp, sp, #0x10
  70:	ret

exch_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strb	w1, [sp, #7]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrb	w1, [sp, #7]
  18:	ldaxrb	w2, [x0]
  1c:	stlxrb	w3, w1, [x0]
  20:	cbnz	w3, 18 <libat_exchange_1+0x18>
  24:	and	w0, w2, #0xff
  28:	add	sp, sp, #0x10
  2c:	ret

0000000000000030 <select_exchange_1>:
  30:	sub	sp, sp, #0x10
  34:	str	x0, [sp, #8]
  38:	adrp	x0, 0 <libat_exchange_1>
  3c:	add	x0, x0, #0x0
  40:	add	sp, sp, #0x10
  44:	ret

fadd_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strb	w1, [sp, #7]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrb	w1, [sp, #7]
  18:	ldaxrb	w2, [x0]
  1c:	add	w3, w2, w1
  20:	stlxrb	w4, w3, [x0]
  24:	cbnz	w4, 18 <libat_fetch_add_1+0x18>
  28:	and	w0, w2, #0xff
  2c:	add	sp, sp, #0x10
  30:	ret

0000000000000034 <libat_add_fetch_1>:
  34:	sub	sp, sp, #0x10
  38:	str	x0, [sp, #8]
  3c:	strb	w1, [sp, #7]
  40:	str	w2, [sp]
  44:	ldr	x0, [sp, #8]
  48:	ldrb	w1, [sp, #7]
  4c:	ldaxrb	w2, [x0]
  50:	add	w2, w2, w1
  54:	stlxrb	w3, w2, [x0]
  58:	cbnz	w3, 4c <libat_add_fetch_1+0x18>
  5c:	and	w0, w2, #0xff
  60:	add	sp, sp, #0x10
  64:	ret

0000000000000068 <select_fetch_add_1>:
  68:	sub	sp, sp, #0x10
  6c:	str	x0, [sp, #8]
  70:	adrp	x0, 0 <libat_fetch_add_1>
  74:	add	x0, x0, #0x0
  78:	add	sp, sp, #0x10
  7c:	ret

0000000000000080 <select_add_fetch_1>:
  80:	sub	sp, sp, #0x10
  84:	str	x0, [sp, #8]
  88:	adrp	x0, 34 <libat_add_fetch_1>
  8c:	add	x0, x0, #0x0
  90:	add	sp, sp, #0x10
  94:	ret

fsub_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strb	w1, [sp, #7]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrb	w1, [sp, #7]
  18:	ldaxrb	w2, [x0]
  1c:	sub	w3, w2, w1
  20:	stlxrb	w4, w3, [x0]
  24:	cbnz	w4, 18 <libat_fetch_sub_1+0x18>
  28:	and	w0, w2, #0xff
  2c:	add	sp, sp, #0x10
  30:	ret

0000000000000034 <libat_sub_fetch_1>:
  34:	sub	sp, sp, #0x10
  38:	str	x0, [sp, #8]
  3c:	strb	w1, [sp, #7]
  40:	str	w2, [sp]
  44:	ldr	x0, [sp, #8]
  48:	ldrb	w1, [sp, #7]
  4c:	ldaxrb	w2, [x0]
  50:	sub	w2, w2, w1
  54:	stlxrb	w3, w2, [x0]
  58:	cbnz	w3, 4c <libat_sub_fetch_1+0x18>
  5c:	and	w0, w2, #0xff
  60:	add	sp, sp, #0x10
  64:	ret

0000000000000068 <select_fetch_sub_1>:
  68:	sub	sp, sp, #0x10
  6c:	str	x0, [sp, #8]
  70:	adrp	x0, 0 <libat_fetch_sub_1>
  74:	add	x0, x0, #0x0
  78:	add	sp, sp, #0x10
  7c:	ret

0000000000000080 <select_sub_fetch_1>:
  80:	sub	sp, sp, #0x10
  84:	str	x0, [sp, #8]
  88:	adrp	x0, 34 <libat_sub_fetch_1>
  8c:	add	x0, x0, #0x0
  90:	add	sp, sp, #0x10
  94:	ret

fand_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strb	w1, [sp, #7]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrb	w1, [sp, #7]
  18:	ldaxrb	w2, [x0]
  1c:	and	w3, w2, w1
  20:	stlxrb	w4, w3, [x0]
  24:	cbnz	w4, 18 <libat_fetch_and_1+0x18>
  28:	and	w0, w2, #0xff
  2c:	add	sp, sp, #0x10
  30:	ret

0000000000000034 <libat_and_fetch_1>:
  34:	sub	sp, sp, #0x10
  38:	str	x0, [sp, #8]
  3c:	strb	w1, [sp, #7]
  40:	str	w2, [sp]
  44:	ldr	x0, [sp, #8]
  48:	ldrb	w1, [sp, #7]
  4c:	ldaxrb	w2, [x0]
  50:	and	w2, w2, w1
  54:	stlxrb	w3, w2, [x0]
  58:	cbnz	w3, 4c <libat_and_fetch_1+0x18>
  5c:	and	w0, w2, #0xff
  60:	add	sp, sp, #0x10
  64:	ret

0000000000000068 <select_fetch_and_1>:
  68:	sub	sp, sp, #0x10
  6c:	str	x0, [sp, #8]
  70:	adrp	x0, 0 <libat_fetch_and_1>
  74:	add	x0, x0, #0x0
  78:	add	sp, sp, #0x10
  7c:	ret

0000000000000080 <select_and_fetch_1>:
  80:	sub	sp, sp, #0x10
  84:	str	x0, [sp, #8]
  88:	adrp	x0, 34 <libat_and_fetch_1>
  8c:	add	x0, x0, #0x0
  90:	add	sp, sp, #0x10
  94:	ret

fior_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strb	w1, [sp, #7]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrb	w1, [sp, #7]
  18:	ldaxrb	w2, [x0]
  1c:	orr	w3, w2, w1
  20:	stlxrb	w4, w3, [x0]
  24:	cbnz	w4, 18 <libat_fetch_or_1+0x18>
  28:	and	w0, w2, #0xff
  2c:	add	sp, sp, #0x10
  30:	ret

0000000000000034 <libat_or_fetch_1>:
  34:	sub	sp, sp, #0x10
  38:	str	x0, [sp, #8]
  3c:	strb	w1, [sp, #7]
  40:	str	w2, [sp]
  44:	ldr	x0, [sp, #8]
  48:	ldrb	w1, [sp, #7]
  4c:	ldaxrb	w2, [x0]
  50:	orr	w2, w2, w1
  54:	stlxrb	w3, w2, [x0]
  58:	cbnz	w3, 4c <libat_or_fetch_1+0x18>
  5c:	and	w0, w2, #0xff
  60:	add	sp, sp, #0x10
  64:	ret

0000000000000068 <select_fetch_or_1>:
  68:	sub	sp, sp, #0x10
  6c:	str	x0, [sp, #8]
  70:	adrp	x0, 0 <libat_fetch_or_1>
  74:	add	x0, x0, #0x0
  78:	add	sp, sp, #0x10
  7c:	ret

0000000000000080 <select_or_fetch_1>:
  80:	sub	sp, sp, #0x10
  84:	str	x0, [sp, #8]
  88:	adrp	x0, 34 <libat_or_fetch_1>
  8c:	add	x0, x0, #0x0
  90:	add	sp, sp, #0x10
  94:	ret

fxor_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strb	w1, [sp, #7]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrb	w1, [sp, #7]
  18:	ldaxrb	w2, [x0]
  1c:	eor	w3, w2, w1
  20:	stlxrb	w4, w3, [x0]
  24:	cbnz	w4, 18 <libat_fetch_xor_1+0x18>
  28:	and	w0, w2, #0xff
  2c:	add	sp, sp, #0x10
  30:	ret

0000000000000034 <libat_xor_fetch_1>:
  34:	sub	sp, sp, #0x10
  38:	str	x0, [sp, #8]
  3c:	strb	w1, [sp, #7]
  40:	str	w2, [sp]
  44:	ldr	x0, [sp, #8]
  48:	ldrb	w1, [sp, #7]
  4c:	ldaxrb	w2, [x0]
  50:	eor	w2, w2, w1
  54:	stlxrb	w3, w2, [x0]
  58:	cbnz	w3, 4c <libat_xor_fetch_1+0x18>
  5c:	and	w0, w2, #0xff
  60:	add	sp, sp, #0x10
  64:	ret

0000000000000068 <select_fetch_xor_1>:
  68:	sub	sp, sp, #0x10
  6c:	str	x0, [sp, #8]
  70:	adrp	x0, 0 <libat_fetch_xor_1>
  74:	add	x0, x0, #0x0
  78:	add	sp, sp, #0x10
  7c:	ret

0000000000000080 <select_xor_fetch_1>:
  80:	sub	sp, sp, #0x10
  84:	str	x0, [sp, #8]
  88:	adrp	x0, 34 <libat_xor_fetch_1>
  8c:	add	x0, x0, #0x0
  90:	add	sp, sp, #0x10
  94:	ret

fnand_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strb	w1, [sp, #7]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrb	w1, [sp, #7]
  18:	ldaxrb	w2, [x0]
  1c:	and	w3, w2, w1
  20:	mvn	w3, w3
  24:	stlxrb	w4, w3, [x0]
  28:	cbnz	w4, 18 <libat_fetch_nand_1+0x18>
  2c:	and	w0, w2, #0xff
  30:	add	sp, sp, #0x10
  34:	ret

0000000000000038 <libat_nand_fetch_1>:
  38:	sub	sp, sp, #0x10
  3c:	str	x0, [sp, #8]
  40:	strb	w1, [sp, #7]
  44:	str	w2, [sp]
  48:	ldr	x0, [sp, #8]
  4c:	ldrb	w1, [sp, #7]
  50:	ldaxrb	w2, [x0]
  54:	and	w2, w2, w1
  58:	mvn	w2, w2
  5c:	stlxrb	w3, w2, [x0]
  60:	cbnz	w3, 50 <libat_nand_fetch_1+0x18>
  64:	and	w0, w2, #0xff
  68:	add	sp, sp, #0x10
  6c:	ret

0000000000000070 <select_fetch_nand_1>:
  70:	sub	sp, sp, #0x10
  74:	str	x0, [sp, #8]
  78:	adrp	x0, 0 <libat_fetch_nand_1>
  7c:	add	x0, x0, #0x0
  80:	add	sp, sp, #0x10
  84:	ret

0000000000000088 <select_nand_fetch_1>:
  88:	sub	sp, sp, #0x10
  8c:	str	x0, [sp, #8]
  90:	adrp	x0, 38 <libat_nand_fetch_1>
  94:	add	x0, x0, #0x0
  98:	add	sp, sp, #0x10
  9c:	ret

tas_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	mov	w1, #0x1                   	// #1
  14:	ldaxrb	w2, [x0]
  18:	stlxrb	w3, w1, [x0]
  1c:	cbnz	w3, 14 <libat_test_and_set_1+0x14>
  20:	and	w0, w2, #0xff
  24:	add	sp, sp, #0x10
  28:	ret

000000000000002c <select_test_and_set_1>:
  2c:	sub	sp, sp, #0x10
  30:	str	x0, [sp, #8]
  34:	adrp	x0, 0 <libat_test_and_set_1>
  38:	add	x0, x0, #0x0
  3c:	add	sp, sp, #0x10
  40:	ret

load_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_2>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	ldarh	w0, [x0]
  14:	and	w0, w0, #0xffff
  18:	add	sp, sp, #0x10
  1c:	ret

0000000000000020 <select_load_2>:
  20:	sub	sp, sp, #0x10
  24:	str	x0, [sp, #8]
  28:	adrp	x0, 0 <libat_load_2>
  2c:	add	x0, x0, #0x0
  30:	add	sp, sp, #0x10
  34:	ret

store_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_2>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strh	w1, [sp, #6]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrh	w1, [sp, #6]
  18:	stlrh	w1, [x0]
  1c:	nop
  20:	add	sp, sp, #0x10
  24:	ret

0000000000000028 <select_store_2>:
  28:	sub	sp, sp, #0x10
  2c:	str	x0, [sp, #8]
  30:	adrp	x0, 0 <libat_store_2>
  34:	add	x0, x0, #0x0
  38:	add	sp, sp, #0x10
  3c:	ret

cas_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_2>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	strh	w2, [sp, #14]
  10:	str	w3, [sp, #8]
  14:	str	w4, [sp, #4]
  18:	ldr	x0, [sp, #24]
  1c:	ldr	x1, [sp, #16]
  20:	ldrh	w1, [x1]
  24:	ldrh	w2, [sp, #14]
  28:	ldaxrh	w3, [x0]
  2c:	cmp	w3, w1, uxth
  30:	b.ne	3c <libat_compare_exchange_2+0x3c>  // b.any
  34:	stlxrh	w4, w2, [x0]
  38:	cbnz	w4, 28 <libat_compare_exchange_2+0x28>
  3c:	mov	w2, w3
  40:	cset	w0, eq  // eq = none
  44:	cmp	w0, #0x0
  48:	b.ne	54 <libat_compare_exchange_2+0x54>  // b.any
  4c:	ldr	x1, [sp, #16]
  50:	strh	w2, [x1]
  54:	add	sp, sp, #0x20
  58:	ret

000000000000005c <select_compare_exchange_2>:
  5c:	sub	sp, sp, #0x10
  60:	str	x0, [sp, #8]
  64:	adrp	x0, 0 <libat_compare_exchange_2>
  68:	add	x0, x0, #0x0
  6c:	add	sp, sp, #0x10
  70:	ret

exch_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_2>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strh	w1, [sp, #6]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrh	w1, [sp, #6]
  18:	ldaxrh	w2, [x0]
  1c:	stlxrh	w3, w1, [x0]
  20:	cbnz	w3, 18 <libat_exchange_2+0x18>
  24:	and	w0, w2, #0xffff
  28:	add	sp, sp, #0x10
  2c:	ret

0000000000000030 <select_exchange_2>:
  30:	sub	sp, sp, #0x10
  34:	str	x0, [sp, #8]
  38:	adrp	x0, 0 <libat_exchange_2>
  3c:	add	x0, x0, #0x0
  40:	add	sp, sp, #0x10
  44:	ret

fadd_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_2>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strh	w1, [sp, #6]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrh	w1, [sp, #6]
  18:	ldaxrh	w2, [x0]
  1c:	add	w3, w2, w1
  20:	stlxrh	w4, w3, [x0]
  24:	cbnz	w4, 18 <libat_fetch_add_2+0x18>
  28:	and	w0, w2, #0xffff
  2c:	add	sp, sp, #0x10
  30:	ret

0000000000000034 <libat_add_fetch_2>:
  34:	sub	sp, sp, #0x10
  38:	str	x0, [sp, #8]
  3c:	strh	w1, [sp, #6]
  40:	str	w2, [sp]
  44:	ldr	x0, [sp, #8]
  48:	ldrh	w1, [sp, #6]
  4c:	ldaxrh	w2, [x0]
  50:	add	w2, w2, w1
  54:	stlxrh	w3, w2, [x0]
  58:	cbnz	w3, 4c <libat_add_fetch_2+0x18>
  5c:	and	w0, w2, #0xffff
  60:	add	sp, sp, #0x10
  64:	ret

0000000000000068 <select_fetch_add_2>:
  68:	sub	sp, sp, #0x10
  6c:	str	x0, [sp, #8]
  70:	adrp	x0, 0 <libat_fetch_add_2>
  74:	add	x0, x0, #0x0
  78:	add	sp, sp, #0x10
  7c:	ret

0000000000000080 <select_add_fetch_2>:
  80:	sub	sp, sp, #0x10
  84:	str	x0, [sp, #8]
  88:	adrp	x0, 34 <libat_add_fetch_2>
  8c:	add	x0, x0, #0x0
  90:	add	sp, sp, #0x10
  94:	ret

fsub_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_2>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strh	w1, [sp, #6]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrh	w1, [sp, #6]
  18:	ldaxrh	w2, [x0]
  1c:	sub	w3, w2, w1
  20:	stlxrh	w4, w3, [x0]
  24:	cbnz	w4, 18 <libat_fetch_sub_2+0x18>
  28:	and	w0, w2, #0xffff
  2c:	add	sp, sp, #0x10
  30:	ret

0000000000000034 <libat_sub_fetch_2>:
  34:	sub	sp, sp, #0x10
  38:	str	x0, [sp, #8]
  3c:	strh	w1, [sp, #6]
  40:	str	w2, [sp]
  44:	ldr	x0, [sp, #8]
  48:	ldrh	w1, [sp, #6]
  4c:	ldaxrh	w2, [x0]
  50:	sub	w2, w2, w1
  54:	stlxrh	w3, w2, [x0]
  58:	cbnz	w3, 4c <libat_sub_fetch_2+0x18>
  5c:	and	w0, w2, #0xffff
  60:	add	sp, sp, #0x10
  64:	ret

0000000000000068 <select_fetch_sub_2>:
  68:	sub	sp, sp, #0x10
  6c:	str	x0, [sp, #8]
  70:	adrp	x0, 0 <libat_fetch_sub_2>
  74:	add	x0, x0, #0x0
  78:	add	sp, sp, #0x10
  7c:	ret

0000000000000080 <select_sub_fetch_2>:
  80:	sub	sp, sp, #0x10
  84:	str	x0, [sp, #8]
  88:	adrp	x0, 34 <libat_sub_fetch_2>
  8c:	add	x0, x0, #0x0
  90:	add	sp, sp, #0x10
  94:	ret

fand_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_2>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strh	w1, [sp, #6]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrh	w1, [sp, #6]
  18:	ldaxrh	w2, [x0]
  1c:	and	w3, w2, w1
  20:	stlxrh	w4, w3, [x0]
  24:	cbnz	w4, 18 <libat_fetch_and_2+0x18>
  28:	and	w0, w2, #0xffff
  2c:	add	sp, sp, #0x10
  30:	ret

0000000000000034 <libat_and_fetch_2>:
  34:	sub	sp, sp, #0x10
  38:	str	x0, [sp, #8]
  3c:	strh	w1, [sp, #6]
  40:	str	w2, [sp]
  44:	ldr	x0, [sp, #8]
  48:	ldrh	w1, [sp, #6]
  4c:	ldaxrh	w2, [x0]
  50:	and	w2, w2, w1
  54:	stlxrh	w3, w2, [x0]
  58:	cbnz	w3, 4c <libat_and_fetch_2+0x18>
  5c:	and	w0, w2, #0xffff
  60:	add	sp, sp, #0x10
  64:	ret

0000000000000068 <select_fetch_and_2>:
  68:	sub	sp, sp, #0x10
  6c:	str	x0, [sp, #8]
  70:	adrp	x0, 0 <libat_fetch_and_2>
  74:	add	x0, x0, #0x0
  78:	add	sp, sp, #0x10
  7c:	ret

0000000000000080 <select_and_fetch_2>:
  80:	sub	sp, sp, #0x10
  84:	str	x0, [sp, #8]
  88:	adrp	x0, 34 <libat_and_fetch_2>
  8c:	add	x0, x0, #0x0
  90:	add	sp, sp, #0x10
  94:	ret

fior_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_2>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strh	w1, [sp, #6]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrh	w1, [sp, #6]
  18:	ldaxrh	w2, [x0]
  1c:	orr	w3, w2, w1
  20:	stlxrh	w4, w3, [x0]
  24:	cbnz	w4, 18 <libat_fetch_or_2+0x18>
  28:	and	w0, w2, #0xffff
  2c:	add	sp, sp, #0x10
  30:	ret

0000000000000034 <libat_or_fetch_2>:
  34:	sub	sp, sp, #0x10
  38:	str	x0, [sp, #8]
  3c:	strh	w1, [sp, #6]
  40:	str	w2, [sp]
  44:	ldr	x0, [sp, #8]
  48:	ldrh	w1, [sp, #6]
  4c:	ldaxrh	w2, [x0]
  50:	orr	w2, w2, w1
  54:	stlxrh	w3, w2, [x0]
  58:	cbnz	w3, 4c <libat_or_fetch_2+0x18>
  5c:	and	w0, w2, #0xffff
  60:	add	sp, sp, #0x10
  64:	ret

0000000000000068 <select_fetch_or_2>:
  68:	sub	sp, sp, #0x10
  6c:	str	x0, [sp, #8]
  70:	adrp	x0, 0 <libat_fetch_or_2>
  74:	add	x0, x0, #0x0
  78:	add	sp, sp, #0x10
  7c:	ret

0000000000000080 <select_or_fetch_2>:
  80:	sub	sp, sp, #0x10
  84:	str	x0, [sp, #8]
  88:	adrp	x0, 34 <libat_or_fetch_2>
  8c:	add	x0, x0, #0x0
  90:	add	sp, sp, #0x10
  94:	ret

fxor_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_2>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strh	w1, [sp, #6]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrh	w1, [sp, #6]
  18:	ldaxrh	w2, [x0]
  1c:	eor	w3, w2, w1
  20:	stlxrh	w4, w3, [x0]
  24:	cbnz	w4, 18 <libat_fetch_xor_2+0x18>
  28:	and	w0, w2, #0xffff
  2c:	add	sp, sp, #0x10
  30:	ret

0000000000000034 <libat_xor_fetch_2>:
  34:	sub	sp, sp, #0x10
  38:	str	x0, [sp, #8]
  3c:	strh	w1, [sp, #6]
  40:	str	w2, [sp]
  44:	ldr	x0, [sp, #8]
  48:	ldrh	w1, [sp, #6]
  4c:	ldaxrh	w2, [x0]
  50:	eor	w2, w2, w1
  54:	stlxrh	w3, w2, [x0]
  58:	cbnz	w3, 4c <libat_xor_fetch_2+0x18>
  5c:	and	w0, w2, #0xffff
  60:	add	sp, sp, #0x10
  64:	ret

0000000000000068 <select_fetch_xor_2>:
  68:	sub	sp, sp, #0x10
  6c:	str	x0, [sp, #8]
  70:	adrp	x0, 0 <libat_fetch_xor_2>
  74:	add	x0, x0, #0x0
  78:	add	sp, sp, #0x10
  7c:	ret

0000000000000080 <select_xor_fetch_2>:
  80:	sub	sp, sp, #0x10
  84:	str	x0, [sp, #8]
  88:	adrp	x0, 34 <libat_xor_fetch_2>
  8c:	add	x0, x0, #0x0
  90:	add	sp, sp, #0x10
  94:	ret

fnand_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_2>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strh	w1, [sp, #6]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrh	w1, [sp, #6]
  18:	ldaxrh	w2, [x0]
  1c:	and	w3, w2, w1
  20:	mvn	w3, w3
  24:	stlxrh	w4, w3, [x0]
  28:	cbnz	w4, 18 <libat_fetch_nand_2+0x18>
  2c:	and	w0, w2, #0xffff
  30:	add	sp, sp, #0x10
  34:	ret

0000000000000038 <libat_nand_fetch_2>:
  38:	sub	sp, sp, #0x10
  3c:	str	x0, [sp, #8]
  40:	strh	w1, [sp, #6]
  44:	str	w2, [sp]
  48:	ldr	x0, [sp, #8]
  4c:	ldrh	w1, [sp, #6]
  50:	ldaxrh	w2, [x0]
  54:	and	w2, w2, w1
  58:	mvn	w2, w2
  5c:	stlxrh	w3, w2, [x0]
  60:	cbnz	w3, 50 <libat_nand_fetch_2+0x18>
  64:	and	w0, w2, #0xffff
  68:	add	sp, sp, #0x10
  6c:	ret

0000000000000070 <select_fetch_nand_2>:
  70:	sub	sp, sp, #0x10
  74:	str	x0, [sp, #8]
  78:	adrp	x0, 0 <libat_fetch_nand_2>
  7c:	add	x0, x0, #0x0
  80:	add	sp, sp, #0x10
  84:	ret

0000000000000088 <select_nand_fetch_2>:
  88:	sub	sp, sp, #0x10
  8c:	str	x0, [sp, #8]
  90:	adrp	x0, 38 <libat_nand_fetch_2>
  94:	add	x0, x0, #0x0
  98:	add	sp, sp, #0x10
  9c:	ret

tas_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_2>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	mov	w1, #0x1                   	// #1
  14:	ldaxrb	w2, [x0]
  18:	stlxrb	w3, w1, [x0]
  1c:	cbnz	w3, 14 <libat_test_and_set_2+0x14>
  20:	and	w0, w2, #0xff
  24:	add	sp, sp, #0x10
  28:	ret

000000000000002c <select_test_and_set_2>:
  2c:	sub	sp, sp, #0x10
  30:	str	x0, [sp, #8]
  34:	adrp	x0, 0 <libat_test_and_set_2>
  38:	add	x0, x0, #0x0
  3c:	add	sp, sp, #0x10
  40:	ret

load_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_4>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	ldar	w0, [x0]
  14:	add	sp, sp, #0x10
  18:	ret

000000000000001c <select_load_4>:
  1c:	sub	sp, sp, #0x10
  20:	str	x0, [sp, #8]
  24:	adrp	x0, 0 <libat_load_4>
  28:	add	x0, x0, #0x0
  2c:	add	sp, sp, #0x10
  30:	ret

store_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_4>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldr	w1, [sp, #4]
  18:	stlr	w1, [x0]
  1c:	nop
  20:	add	sp, sp, #0x10
  24:	ret

0000000000000028 <select_store_4>:
  28:	sub	sp, sp, #0x10
  2c:	str	x0, [sp, #8]
  30:	adrp	x0, 0 <libat_store_4>
  34:	add	x0, x0, #0x0
  38:	add	sp, sp, #0x10
  3c:	ret

cas_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_4>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	w2, [sp, #12]
  10:	str	w3, [sp, #8]
  14:	str	w4, [sp, #4]
  18:	ldr	x0, [sp, #24]
  1c:	ldr	x1, [sp, #16]
  20:	ldr	w1, [x1]
  24:	ldr	w3, [sp, #12]
  28:	ldaxr	w2, [x0]
  2c:	cmp	w2, w1
  30:	b.ne	3c <libat_compare_exchange_4+0x3c>  // b.any
  34:	stlxr	w4, w3, [x0]
  38:	cbnz	w4, 28 <libat_compare_exchange_4+0x28>
  3c:	cset	w0, eq  // eq = none
  40:	cmp	w0, #0x0
  44:	b.ne	50 <libat_compare_exchange_4+0x50>  // b.any
  48:	ldr	x1, [sp, #16]
  4c:	str	w2, [x1]
  50:	add	sp, sp, #0x20
  54:	ret

0000000000000058 <select_compare_exchange_4>:
  58:	sub	sp, sp, #0x10
  5c:	str	x0, [sp, #8]
  60:	adrp	x0, 0 <libat_compare_exchange_4>
  64:	add	x0, x0, #0x0
  68:	add	sp, sp, #0x10
  6c:	ret

exch_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_4>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldr	w1, [sp, #4]
  18:	ldaxr	w2, [x0]
  1c:	stlxr	w3, w1, [x0]
  20:	cbnz	w3, 18 <libat_exchange_4+0x18>
  24:	mov	w0, w2
  28:	add	sp, sp, #0x10
  2c:	ret

0000000000000030 <select_exchange_4>:
  30:	sub	sp, sp, #0x10
  34:	str	x0, [sp, #8]
  38:	adrp	x0, 0 <libat_exchange_4>
  3c:	add	x0, x0, #0x0
  40:	add	sp, sp, #0x10
  44:	ret

fadd_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_4>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldr	w1, [sp, #4]
  18:	ldaxr	w2, [x0]
  1c:	add	w3, w2, w1
  20:	stlxr	w4, w3, [x0]
  24:	cbnz	w4, 18 <libat_fetch_add_4+0x18>
  28:	mov	w0, w2
  2c:	add	sp, sp, #0x10
  30:	ret

0000000000000034 <libat_add_fetch_4>:
  34:	sub	sp, sp, #0x10
  38:	str	x0, [sp, #8]
  3c:	str	w1, [sp, #4]
  40:	str	w2, [sp]
  44:	ldr	x0, [sp, #8]
  48:	ldr	w1, [sp, #4]
  4c:	ldaxr	w2, [x0]
  50:	add	w2, w2, w1
  54:	stlxr	w3, w2, [x0]
  58:	cbnz	w3, 4c <libat_add_fetch_4+0x18>
  5c:	mov	w0, w2
  60:	add	sp, sp, #0x10
  64:	ret

0000000000000068 <select_fetch_add_4>:
  68:	sub	sp, sp, #0x10
  6c:	str	x0, [sp, #8]
  70:	adrp	x0, 0 <libat_fetch_add_4>
  74:	add	x0, x0, #0x0
  78:	add	sp, sp, #0x10
  7c:	ret

0000000000000080 <select_add_fetch_4>:
  80:	sub	sp, sp, #0x10
  84:	str	x0, [sp, #8]
  88:	adrp	x0, 34 <libat_add_fetch_4>
  8c:	add	x0, x0, #0x0
  90:	add	sp, sp, #0x10
  94:	ret

fsub_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_4>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldr	w1, [sp, #4]
  18:	ldaxr	w2, [x0]
  1c:	sub	w3, w2, w1
  20:	stlxr	w4, w3, [x0]
  24:	cbnz	w4, 18 <libat_fetch_sub_4+0x18>
  28:	mov	w0, w2
  2c:	add	sp, sp, #0x10
  30:	ret

0000000000000034 <libat_sub_fetch_4>:
  34:	sub	sp, sp, #0x10
  38:	str	x0, [sp, #8]
  3c:	str	w1, [sp, #4]
  40:	str	w2, [sp]
  44:	ldr	x0, [sp, #8]
  48:	ldr	w1, [sp, #4]
  4c:	ldaxr	w2, [x0]
  50:	sub	w2, w2, w1
  54:	stlxr	w3, w2, [x0]
  58:	cbnz	w3, 4c <libat_sub_fetch_4+0x18>
  5c:	mov	w0, w2
  60:	add	sp, sp, #0x10
  64:	ret

0000000000000068 <select_fetch_sub_4>:
  68:	sub	sp, sp, #0x10
  6c:	str	x0, [sp, #8]
  70:	adrp	x0, 0 <libat_fetch_sub_4>
  74:	add	x0, x0, #0x0
  78:	add	sp, sp, #0x10
  7c:	ret

0000000000000080 <select_sub_fetch_4>:
  80:	sub	sp, sp, #0x10
  84:	str	x0, [sp, #8]
  88:	adrp	x0, 34 <libat_sub_fetch_4>
  8c:	add	x0, x0, #0x0
  90:	add	sp, sp, #0x10
  94:	ret

fand_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_4>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldr	w1, [sp, #4]
  18:	ldaxr	w2, [x0]
  1c:	and	w3, w2, w1
  20:	stlxr	w4, w3, [x0]
  24:	cbnz	w4, 18 <libat_fetch_and_4+0x18>
  28:	mov	w0, w2
  2c:	add	sp, sp, #0x10
  30:	ret

0000000000000034 <libat_and_fetch_4>:
  34:	sub	sp, sp, #0x10
  38:	str	x0, [sp, #8]
  3c:	str	w1, [sp, #4]
  40:	str	w2, [sp]
  44:	ldr	x0, [sp, #8]
  48:	ldr	w1, [sp, #4]
  4c:	ldaxr	w2, [x0]
  50:	and	w2, w2, w1
  54:	stlxr	w3, w2, [x0]
  58:	cbnz	w3, 4c <libat_and_fetch_4+0x18>
  5c:	mov	w0, w2
  60:	add	sp, sp, #0x10
  64:	ret

0000000000000068 <select_fetch_and_4>:
  68:	sub	sp, sp, #0x10
  6c:	str	x0, [sp, #8]
  70:	adrp	x0, 0 <libat_fetch_and_4>
  74:	add	x0, x0, #0x0
  78:	add	sp, sp, #0x10
  7c:	ret

0000000000000080 <select_and_fetch_4>:
  80:	sub	sp, sp, #0x10
  84:	str	x0, [sp, #8]
  88:	adrp	x0, 34 <libat_and_fetch_4>
  8c:	add	x0, x0, #0x0
  90:	add	sp, sp, #0x10
  94:	ret

fior_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_4>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldr	w1, [sp, #4]
  18:	ldaxr	w2, [x0]
  1c:	orr	w3, w2, w1
  20:	stlxr	w4, w3, [x0]
  24:	cbnz	w4, 18 <libat_fetch_or_4+0x18>
  28:	mov	w0, w2
  2c:	add	sp, sp, #0x10
  30:	ret

0000000000000034 <libat_or_fetch_4>:
  34:	sub	sp, sp, #0x10
  38:	str	x0, [sp, #8]
  3c:	str	w1, [sp, #4]
  40:	str	w2, [sp]
  44:	ldr	x0, [sp, #8]
  48:	ldr	w1, [sp, #4]
  4c:	ldaxr	w2, [x0]
  50:	orr	w2, w2, w1
  54:	stlxr	w3, w2, [x0]
  58:	cbnz	w3, 4c <libat_or_fetch_4+0x18>
  5c:	mov	w0, w2
  60:	add	sp, sp, #0x10
  64:	ret

0000000000000068 <select_fetch_or_4>:
  68:	sub	sp, sp, #0x10
  6c:	str	x0, [sp, #8]
  70:	adrp	x0, 0 <libat_fetch_or_4>
  74:	add	x0, x0, #0x0
  78:	add	sp, sp, #0x10
  7c:	ret

0000000000000080 <select_or_fetch_4>:
  80:	sub	sp, sp, #0x10
  84:	str	x0, [sp, #8]
  88:	adrp	x0, 34 <libat_or_fetch_4>
  8c:	add	x0, x0, #0x0
  90:	add	sp, sp, #0x10
  94:	ret

fxor_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_4>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldr	w1, [sp, #4]
  18:	ldaxr	w2, [x0]
  1c:	eor	w3, w2, w1
  20:	stlxr	w4, w3, [x0]
  24:	cbnz	w4, 18 <libat_fetch_xor_4+0x18>
  28:	mov	w0, w2
  2c:	add	sp, sp, #0x10
  30:	ret

0000000000000034 <libat_xor_fetch_4>:
  34:	sub	sp, sp, #0x10
  38:	str	x0, [sp, #8]
  3c:	str	w1, [sp, #4]
  40:	str	w2, [sp]
  44:	ldr	x0, [sp, #8]
  48:	ldr	w1, [sp, #4]
  4c:	ldaxr	w2, [x0]
  50:	eor	w2, w2, w1
  54:	stlxr	w3, w2, [x0]
  58:	cbnz	w3, 4c <libat_xor_fetch_4+0x18>
  5c:	mov	w0, w2
  60:	add	sp, sp, #0x10
  64:	ret

0000000000000068 <select_fetch_xor_4>:
  68:	sub	sp, sp, #0x10
  6c:	str	x0, [sp, #8]
  70:	adrp	x0, 0 <libat_fetch_xor_4>
  74:	add	x0, x0, #0x0
  78:	add	sp, sp, #0x10
  7c:	ret

0000000000000080 <select_xor_fetch_4>:
  80:	sub	sp, sp, #0x10
  84:	str	x0, [sp, #8]
  88:	adrp	x0, 34 <libat_xor_fetch_4>
  8c:	add	x0, x0, #0x0
  90:	add	sp, sp, #0x10
  94:	ret

fnand_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_4>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldr	w1, [sp, #4]
  18:	ldaxr	w2, [x0]
  1c:	and	w3, w2, w1
  20:	mvn	w3, w3
  24:	stlxr	w4, w3, [x0]
  28:	cbnz	w4, 18 <libat_fetch_nand_4+0x18>
  2c:	mov	w0, w2
  30:	add	sp, sp, #0x10
  34:	ret

0000000000000038 <libat_nand_fetch_4>:
  38:	sub	sp, sp, #0x10
  3c:	str	x0, [sp, #8]
  40:	str	w1, [sp, #4]
  44:	str	w2, [sp]
  48:	ldr	x0, [sp, #8]
  4c:	ldr	w1, [sp, #4]
  50:	ldaxr	w2, [x0]
  54:	and	w2, w2, w1
  58:	mvn	w2, w2
  5c:	stlxr	w3, w2, [x0]
  60:	cbnz	w3, 50 <libat_nand_fetch_4+0x18>
  64:	mov	w0, w2
  68:	add	sp, sp, #0x10
  6c:	ret

0000000000000070 <select_fetch_nand_4>:
  70:	sub	sp, sp, #0x10
  74:	str	x0, [sp, #8]
  78:	adrp	x0, 0 <libat_fetch_nand_4>
  7c:	add	x0, x0, #0x0
  80:	add	sp, sp, #0x10
  84:	ret

0000000000000088 <select_nand_fetch_4>:
  88:	sub	sp, sp, #0x10
  8c:	str	x0, [sp, #8]
  90:	adrp	x0, 38 <libat_nand_fetch_4>
  94:	add	x0, x0, #0x0
  98:	add	sp, sp, #0x10
  9c:	ret

tas_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_4>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	mov	w1, #0x1                   	// #1
  14:	ldaxrb	w2, [x0]
  18:	stlxrb	w3, w1, [x0]
  1c:	cbnz	w3, 14 <libat_test_and_set_4+0x14>
  20:	and	w0, w2, #0xff
  24:	add	sp, sp, #0x10
  28:	ret

000000000000002c <select_test_and_set_4>:
  2c:	sub	sp, sp, #0x10
  30:	str	x0, [sp, #8]
  34:	adrp	x0, 0 <libat_test_and_set_4>
  38:	add	x0, x0, #0x0
  3c:	add	sp, sp, #0x10
  40:	ret

load_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_8>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	ldar	x0, [x0]
  14:	add	sp, sp, #0x10
  18:	ret

000000000000001c <select_load_8>:
  1c:	sub	sp, sp, #0x10
  20:	str	x0, [sp, #8]
  24:	adrp	x0, 0 <libat_load_8>
  28:	add	x0, x0, #0x0
  2c:	add	sp, sp, #0x10
  30:	ret

store_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_8>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	w2, [sp, #12]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [sp, #16]
  18:	stlr	x1, [x0]
  1c:	nop
  20:	add	sp, sp, #0x20
  24:	ret

0000000000000028 <select_store_8>:
  28:	sub	sp, sp, #0x10
  2c:	str	x0, [sp, #8]
  30:	adrp	x0, 0 <libat_store_8>
  34:	add	x0, x0, #0x0
  38:	add	sp, sp, #0x10
  3c:	ret

cas_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_8>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	x2, [sp, #8]
  10:	str	w3, [sp, #4]
  14:	str	w4, [sp]
  18:	ldr	x0, [sp, #24]
  1c:	ldr	x1, [sp, #16]
  20:	ldr	x1, [x1]
  24:	ldr	x3, [sp, #8]
  28:	ldaxr	x2, [x0]
  2c:	cmp	x2, x1
  30:	b.ne	3c <libat_compare_exchange_8+0x3c>  // b.any
  34:	stlxr	w4, x3, [x0]
  38:	cbnz	w4, 28 <libat_compare_exchange_8+0x28>
  3c:	cset	w0, eq  // eq = none
  40:	cmp	w0, #0x0
  44:	b.ne	50 <libat_compare_exchange_8+0x50>  // b.any
  48:	ldr	x1, [sp, #16]
  4c:	str	x2, [x1]
  50:	add	sp, sp, #0x20
  54:	ret

0000000000000058 <select_compare_exchange_8>:
  58:	sub	sp, sp, #0x10
  5c:	str	x0, [sp, #8]
  60:	adrp	x0, 0 <libat_compare_exchange_8>
  64:	add	x0, x0, #0x0
  68:	add	sp, sp, #0x10
  6c:	ret

exch_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_8>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	w2, [sp, #12]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [sp, #16]
  18:	ldaxr	x2, [x0]
  1c:	stlxr	w3, x1, [x0]
  20:	cbnz	w3, 18 <libat_exchange_8+0x18>
  24:	mov	x0, x2
  28:	add	sp, sp, #0x20
  2c:	ret

0000000000000030 <select_exchange_8>:
  30:	sub	sp, sp, #0x10
  34:	str	x0, [sp, #8]
  38:	adrp	x0, 0 <libat_exchange_8>
  3c:	add	x0, x0, #0x0
  40:	add	sp, sp, #0x10
  44:	ret

fadd_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_8>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	w2, [sp, #12]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [sp, #16]
  18:	ldaxr	x2, [x0]
  1c:	add	x3, x2, x1
  20:	stlxr	w4, x3, [x0]
  24:	cbnz	w4, 18 <libat_fetch_add_8+0x18>
  28:	mov	x0, x2
  2c:	add	sp, sp, #0x20
  30:	ret

0000000000000034 <libat_add_fetch_8>:
  34:	sub	sp, sp, #0x20
  38:	str	x0, [sp, #24]
  3c:	str	x1, [sp, #16]
  40:	str	w2, [sp, #12]
  44:	ldr	x0, [sp, #24]
  48:	ldr	x1, [sp, #16]
  4c:	ldaxr	x2, [x0]
  50:	add	x2, x2, x1
  54:	stlxr	w3, x2, [x0]
  58:	cbnz	w3, 4c <libat_add_fetch_8+0x18>
  5c:	mov	x0, x2
  60:	add	sp, sp, #0x20
  64:	ret

0000000000000068 <select_fetch_add_8>:
  68:	sub	sp, sp, #0x10
  6c:	str	x0, [sp, #8]
  70:	adrp	x0, 0 <libat_fetch_add_8>
  74:	add	x0, x0, #0x0
  78:	add	sp, sp, #0x10
  7c:	ret

0000000000000080 <select_add_fetch_8>:
  80:	sub	sp, sp, #0x10
  84:	str	x0, [sp, #8]
  88:	adrp	x0, 34 <libat_add_fetch_8>
  8c:	add	x0, x0, #0x0
  90:	add	sp, sp, #0x10
  94:	ret

fsub_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_8>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	w2, [sp, #12]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [sp, #16]
  18:	ldaxr	x2, [x0]
  1c:	sub	x3, x2, x1
  20:	stlxr	w4, x3, [x0]
  24:	cbnz	w4, 18 <libat_fetch_sub_8+0x18>
  28:	mov	x0, x2
  2c:	add	sp, sp, #0x20
  30:	ret

0000000000000034 <libat_sub_fetch_8>:
  34:	sub	sp, sp, #0x20
  38:	str	x0, [sp, #24]
  3c:	str	x1, [sp, #16]
  40:	str	w2, [sp, #12]
  44:	ldr	x0, [sp, #24]
  48:	ldr	x1, [sp, #16]
  4c:	ldaxr	x2, [x0]
  50:	sub	x2, x2, x1
  54:	stlxr	w3, x2, [x0]
  58:	cbnz	w3, 4c <libat_sub_fetch_8+0x18>
  5c:	mov	x0, x2
  60:	add	sp, sp, #0x20
  64:	ret

0000000000000068 <select_fetch_sub_8>:
  68:	sub	sp, sp, #0x10
  6c:	str	x0, [sp, #8]
  70:	adrp	x0, 0 <libat_fetch_sub_8>
  74:	add	x0, x0, #0x0
  78:	add	sp, sp, #0x10
  7c:	ret

0000000000000080 <select_sub_fetch_8>:
  80:	sub	sp, sp, #0x10
  84:	str	x0, [sp, #8]
  88:	adrp	x0, 34 <libat_sub_fetch_8>
  8c:	add	x0, x0, #0x0
  90:	add	sp, sp, #0x10
  94:	ret

fand_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_8>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	w2, [sp, #12]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [sp, #16]
  18:	ldaxr	x2, [x0]
  1c:	and	x3, x2, x1
  20:	stlxr	w4, x3, [x0]
  24:	cbnz	w4, 18 <libat_fetch_and_8+0x18>
  28:	mov	x0, x2
  2c:	add	sp, sp, #0x20
  30:	ret

0000000000000034 <libat_and_fetch_8>:
  34:	sub	sp, sp, #0x20
  38:	str	x0, [sp, #24]
  3c:	str	x1, [sp, #16]
  40:	str	w2, [sp, #12]
  44:	ldr	x0, [sp, #24]
  48:	ldr	x1, [sp, #16]
  4c:	ldaxr	x2, [x0]
  50:	and	x2, x2, x1
  54:	stlxr	w3, x2, [x0]
  58:	cbnz	w3, 4c <libat_and_fetch_8+0x18>
  5c:	mov	x0, x2
  60:	add	sp, sp, #0x20
  64:	ret

0000000000000068 <select_fetch_and_8>:
  68:	sub	sp, sp, #0x10
  6c:	str	x0, [sp, #8]
  70:	adrp	x0, 0 <libat_fetch_and_8>
  74:	add	x0, x0, #0x0
  78:	add	sp, sp, #0x10
  7c:	ret

0000000000000080 <select_and_fetch_8>:
  80:	sub	sp, sp, #0x10
  84:	str	x0, [sp, #8]
  88:	adrp	x0, 34 <libat_and_fetch_8>
  8c:	add	x0, x0, #0x0
  90:	add	sp, sp, #0x10
  94:	ret

fior_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_8>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	w2, [sp, #12]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [sp, #16]
  18:	ldaxr	x2, [x0]
  1c:	orr	x3, x2, x1
  20:	stlxr	w4, x3, [x0]
  24:	cbnz	w4, 18 <libat_fetch_or_8+0x18>
  28:	mov	x0, x2
  2c:	add	sp, sp, #0x20
  30:	ret

0000000000000034 <libat_or_fetch_8>:
  34:	sub	sp, sp, #0x20
  38:	str	x0, [sp, #24]
  3c:	str	x1, [sp, #16]
  40:	str	w2, [sp, #12]
  44:	ldr	x0, [sp, #24]
  48:	ldr	x1, [sp, #16]
  4c:	ldaxr	x2, [x0]
  50:	orr	x2, x2, x1
  54:	stlxr	w3, x2, [x0]
  58:	cbnz	w3, 4c <libat_or_fetch_8+0x18>
  5c:	mov	x0, x2
  60:	add	sp, sp, #0x20
  64:	ret

0000000000000068 <select_fetch_or_8>:
  68:	sub	sp, sp, #0x10
  6c:	str	x0, [sp, #8]
  70:	adrp	x0, 0 <libat_fetch_or_8>
  74:	add	x0, x0, #0x0
  78:	add	sp, sp, #0x10
  7c:	ret

0000000000000080 <select_or_fetch_8>:
  80:	sub	sp, sp, #0x10
  84:	str	x0, [sp, #8]
  88:	adrp	x0, 34 <libat_or_fetch_8>
  8c:	add	x0, x0, #0x0
  90:	add	sp, sp, #0x10
  94:	ret

fxor_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_8>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	w2, [sp, #12]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [sp, #16]
  18:	ldaxr	x2, [x0]
  1c:	eor	x3, x2, x1
  20:	stlxr	w4, x3, [x0]
  24:	cbnz	w4, 18 <libat_fetch_xor_8+0x18>
  28:	mov	x0, x2
  2c:	add	sp, sp, #0x20
  30:	ret

0000000000000034 <libat_xor_fetch_8>:
  34:	sub	sp, sp, #0x20
  38:	str	x0, [sp, #24]
  3c:	str	x1, [sp, #16]
  40:	str	w2, [sp, #12]
  44:	ldr	x0, [sp, #24]
  48:	ldr	x1, [sp, #16]
  4c:	ldaxr	x2, [x0]
  50:	eor	x2, x2, x1
  54:	stlxr	w3, x2, [x0]
  58:	cbnz	w3, 4c <libat_xor_fetch_8+0x18>
  5c:	mov	x0, x2
  60:	add	sp, sp, #0x20
  64:	ret

0000000000000068 <select_fetch_xor_8>:
  68:	sub	sp, sp, #0x10
  6c:	str	x0, [sp, #8]
  70:	adrp	x0, 0 <libat_fetch_xor_8>
  74:	add	x0, x0, #0x0
  78:	add	sp, sp, #0x10
  7c:	ret

0000000000000080 <select_xor_fetch_8>:
  80:	sub	sp, sp, #0x10
  84:	str	x0, [sp, #8]
  88:	adrp	x0, 34 <libat_xor_fetch_8>
  8c:	add	x0, x0, #0x0
  90:	add	sp, sp, #0x10
  94:	ret

fnand_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_8>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	w2, [sp, #12]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [sp, #16]
  18:	ldaxr	x2, [x0]
  1c:	and	x3, x2, x1
  20:	mvn	x3, x3
  24:	stlxr	w4, x3, [x0]
  28:	cbnz	w4, 18 <libat_fetch_nand_8+0x18>
  2c:	mov	x0, x2
  30:	add	sp, sp, #0x20
  34:	ret

0000000000000038 <libat_nand_fetch_8>:
  38:	sub	sp, sp, #0x20
  3c:	str	x0, [sp, #24]
  40:	str	x1, [sp, #16]
  44:	str	w2, [sp, #12]
  48:	ldr	x0, [sp, #24]
  4c:	ldr	x1, [sp, #16]
  50:	ldaxr	x2, [x0]
  54:	and	x2, x2, x1
  58:	mvn	x2, x2
  5c:	stlxr	w3, x2, [x0]
  60:	cbnz	w3, 50 <libat_nand_fetch_8+0x18>
  64:	mov	x0, x2
  68:	add	sp, sp, #0x20
  6c:	ret

0000000000000070 <select_fetch_nand_8>:
  70:	sub	sp, sp, #0x10
  74:	str	x0, [sp, #8]
  78:	adrp	x0, 0 <libat_fetch_nand_8>
  7c:	add	x0, x0, #0x0
  80:	add	sp, sp, #0x10
  84:	ret

0000000000000088 <select_nand_fetch_8>:
  88:	sub	sp, sp, #0x10
  8c:	str	x0, [sp, #8]
  90:	adrp	x0, 38 <libat_nand_fetch_8>
  94:	add	x0, x0, #0x0
  98:	add	sp, sp, #0x10
  9c:	ret

tas_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_8>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	mov	w1, #0x1                   	// #1
  14:	ldaxrb	w2, [x0]
  18:	stlxrb	w3, w1, [x0]
  1c:	cbnz	w3, 14 <libat_test_and_set_8+0x14>
  20:	and	w0, w2, #0xff
  24:	add	sp, sp, #0x10
  28:	ret

000000000000002c <select_test_and_set_8>:
  2c:	sub	sp, sp, #0x10
  30:	str	x0, [sp, #8]
  34:	adrp	x0, 0 <libat_test_and_set_8>
  38:	add	x0, x0, #0x0
  3c:	add	sp, sp, #0x10
  40:	ret

load_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <protect_start>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <libat_lock_1>
  14:	mov	x0, #0x0                   	// #0
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

0000000000000020 <protect_end>:
  20:	stp	x29, x30, [sp, #-32]!
  24:	mov	x29, sp
  28:	str	x0, [sp, #24]
  2c:	str	x1, [sp, #16]
  30:	ldr	x0, [sp, #24]
  34:	bl	0 <libat_unlock_1>
  38:	nop
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <libat_load_16>:
  44:	stp	x29, x30, [sp, #-80]!
  48:	mov	x29, sp
  4c:	str	x0, [sp, #24]
  50:	str	w1, [sp, #20]
  54:	ldr	w0, [sp, #20]
  58:	str	w0, [sp, #40]
  5c:	nop
  60:	ldr	x0, [sp, #24]
  64:	bl	0 <protect_start>
  68:	str	x0, [sp, #72]
  6c:	ldr	x0, [sp, #24]
  70:	ldp	x0, x1, [x0]
  74:	stp	x0, x1, [sp, #48]
  78:	ldr	x1, [sp, #72]
  7c:	ldr	x0, [sp, #24]
  80:	bl	20 <protect_end>
  84:	ldr	w0, [sp, #20]
  88:	str	w0, [sp, #44]
  8c:	nop
  90:	ldp	x0, x1, [sp, #48]
  94:	ldp	x29, x30, [sp], #80
  98:	ret

000000000000009c <select_load_16>:
  9c:	sub	sp, sp, #0x10
  a0:	str	x0, [sp, #8]
  a4:	adrp	x0, 44 <libat_load_16>
  a8:	add	x0, x0, #0x0
  ac:	add	sp, sp, #0x10
  b0:	ret

store_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <protect_start>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <libat_lock_1>
  14:	mov	x0, #0x0                   	// #0
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

0000000000000020 <protect_end>:
  20:	stp	x29, x30, [sp, #-32]!
  24:	mov	x29, sp
  28:	str	x0, [sp, #24]
  2c:	str	x1, [sp, #16]
  30:	ldr	x0, [sp, #24]
  34:	bl	0 <libat_unlock_1>
  38:	nop
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <libat_store_16>:
  44:	stp	x29, x30, [sp, #-64]!
  48:	mov	x29, sp
  4c:	str	x0, [sp, #40]
  50:	stp	x2, x3, [sp, #16]
  54:	str	w4, [sp, #36]
  58:	ldr	w0, [sp, #36]
  5c:	str	w0, [sp, #48]
  60:	nop
  64:	ldr	x0, [sp, #40]
  68:	bl	0 <protect_start>
  6c:	str	x0, [sp, #56]
  70:	ldr	x2, [sp, #40]
  74:	ldp	x0, x1, [sp, #16]
  78:	stp	x0, x1, [x2]
  7c:	ldr	x1, [sp, #56]
  80:	ldr	x0, [sp, #40]
  84:	bl	20 <protect_end>
  88:	ldr	w0, [sp, #36]
  8c:	str	w0, [sp, #52]
  90:	nop
  94:	nop
  98:	ldp	x29, x30, [sp], #64
  9c:	ret

00000000000000a0 <select_store_16>:
  a0:	sub	sp, sp, #0x10
  a4:	str	x0, [sp, #8]
  a8:	adrp	x0, 44 <libat_store_16>
  ac:	add	x0, x0, #0x0
  b0:	add	sp, sp, #0x10
  b4:	ret

cas_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <protect_start>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <libat_lock_1>
  14:	mov	x0, #0x0                   	// #0
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

0000000000000020 <protect_end>:
  20:	stp	x29, x30, [sp, #-32]!
  24:	mov	x29, sp
  28:	str	x0, [sp, #24]
  2c:	str	x1, [sp, #16]
  30:	ldr	x0, [sp, #24]
  34:	bl	0 <libat_unlock_1>
  38:	nop
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <libat_compare_exchange_16>:
  44:	stp	x29, x30, [sp, #-128]!
  48:	mov	x29, sp
  4c:	stp	x20, x21, [sp, #16]
  50:	str	x0, [sp, #72]
  54:	str	x1, [sp, #64]
  58:	stp	x2, x3, [sp, #48]
  5c:	str	w4, [sp, #44]
  60:	str	w5, [sp, #40]
  64:	ldr	w0, [sp, #44]
  68:	str	w0, [sp, #88]
  6c:	nop
  70:	ldr	x0, [sp, #72]
  74:	bl	0 <protect_start>
  78:	str	x0, [sp, #120]
  7c:	ldr	x0, [sp, #72]
  80:	ldp	x0, x1, [x0]
  84:	stp	x0, x1, [sp, #96]
  88:	ldr	x0, [sp, #64]
  8c:	ldp	x0, x1, [x0]
  90:	ldr	x2, [sp, #96]
  94:	eor	x20, x2, x0
  98:	ldr	x2, [sp, #104]
  9c:	eor	x21, x2, x1
  a0:	orr	x0, x20, x21
  a4:	cmp	x0, #0x0
  a8:	cset	w0, eq  // eq = none
  ac:	strb	w0, [sp, #95]
  b0:	ldrb	w0, [sp, #95]
  b4:	cmp	w0, #0x0
  b8:	b.eq	cc <libat_compare_exchange_16+0x88>  // b.none
  bc:	ldr	x2, [sp, #72]
  c0:	ldp	x0, x1, [sp, #48]
  c4:	stp	x0, x1, [x2]
  c8:	b	d8 <libat_compare_exchange_16+0x94>
  cc:	ldr	x2, [sp, #64]
  d0:	ldp	x0, x1, [sp, #96]
  d4:	stp	x0, x1, [x2]
  d8:	ldr	x1, [sp, #120]
  dc:	ldr	x0, [sp, #72]
  e0:	bl	20 <protect_end>
  e4:	ldr	w0, [sp, #44]
  e8:	str	w0, [sp, #84]
  ec:	nop
  f0:	ldrb	w0, [sp, #95]
  f4:	ldp	x20, x21, [sp, #16]
  f8:	ldp	x29, x30, [sp], #128
  fc:	ret

0000000000000100 <select_compare_exchange_16>:
 100:	sub	sp, sp, #0x10
 104:	str	x0, [sp, #8]
 108:	adrp	x0, 44 <libat_compare_exchange_16>
 10c:	add	x0, x0, #0x0
 110:	add	sp, sp, #0x10
 114:	ret

exch_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <protect_start>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <libat_lock_1>
  14:	mov	x0, #0x0                   	// #0
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

0000000000000020 <protect_end>:
  20:	stp	x29, x30, [sp, #-32]!
  24:	mov	x29, sp
  28:	str	x0, [sp, #24]
  2c:	str	x1, [sp, #16]
  30:	ldr	x0, [sp, #24]
  34:	bl	0 <libat_unlock_1>
  38:	nop
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <libat_exchange_16>:
  44:	stp	x29, x30, [sp, #-96]!
  48:	mov	x29, sp
  4c:	str	x0, [sp, #40]
  50:	stp	x2, x3, [sp, #16]
  54:	str	w4, [sp, #36]
  58:	ldr	w0, [sp, #36]
  5c:	str	w0, [sp, #56]
  60:	nop
  64:	ldr	x0, [sp, #40]
  68:	bl	0 <protect_start>
  6c:	str	x0, [sp, #88]
  70:	ldr	x0, [sp, #40]
  74:	ldp	x0, x1, [x0]
  78:	stp	x0, x1, [sp, #64]
  7c:	ldr	x2, [sp, #40]
  80:	ldp	x0, x1, [sp, #16]
  84:	stp	x0, x1, [x2]
  88:	ldr	x1, [sp, #88]
  8c:	ldr	x0, [sp, #40]
  90:	bl	20 <protect_end>
  94:	ldr	w0, [sp, #36]
  98:	str	w0, [sp, #60]
  9c:	nop
  a0:	ldp	x0, x1, [sp, #64]
  a4:	ldp	x29, x30, [sp], #96
  a8:	ret

00000000000000ac <select_exchange_16>:
  ac:	sub	sp, sp, #0x10
  b0:	str	x0, [sp, #8]
  b4:	adrp	x0, 44 <libat_exchange_16>
  b8:	add	x0, x0, #0x0
  bc:	add	sp, sp, #0x10
  c0:	ret

fadd_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <protect_start>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <libat_lock_1>
  14:	mov	x0, #0x0                   	// #0
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

0000000000000020 <protect_end>:
  20:	stp	x29, x30, [sp, #-32]!
  24:	mov	x29, sp
  28:	str	x0, [sp, #24]
  2c:	str	x1, [sp, #16]
  30:	ldr	x0, [sp, #24]
  34:	bl	0 <libat_unlock_1>
  38:	nop
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <libat_fetch_add_16>:
  44:	stp	x29, x30, [sp, #-112]!
  48:	mov	x29, sp
  4c:	stp	x20, x21, [sp, #16]
  50:	str	x0, [sp, #56]
  54:	stp	x2, x3, [sp, #32]
  58:	str	w4, [sp, #52]
  5c:	ldr	w0, [sp, #52]
  60:	str	w0, [sp, #72]
  64:	nop
  68:	ldr	x0, [sp, #56]
  6c:	bl	0 <protect_start>
  70:	str	x0, [sp, #104]
  74:	ldr	x0, [sp, #56]
  78:	ldp	x0, x1, [x0]
  7c:	stp	x0, x1, [sp, #80]
  80:	ldp	x0, x1, [sp, #80]
  84:	ldp	x2, x3, [sp, #32]
  88:	mov	x4, x2
  8c:	adds	x4, x0, x4
  90:	mov	x2, x3
  94:	adc	x0, x1, x2
  98:	mov	x20, x4
  9c:	mov	x21, x0
  a0:	ldr	x0, [sp, #56]
  a4:	stp	x20, x21, [x0]
  a8:	ldr	x1, [sp, #104]
  ac:	ldr	x0, [sp, #56]
  b0:	bl	20 <protect_end>
  b4:	ldr	w0, [sp, #52]
  b8:	str	w0, [sp, #76]
  bc:	nop
  c0:	ldp	x0, x1, [sp, #80]
  c4:	ldp	x20, x21, [sp, #16]
  c8:	ldp	x29, x30, [sp], #112
  cc:	ret

00000000000000d0 <libat_add_fetch_16>:
  d0:	stp	x29, x30, [sp, #-112]!
  d4:	mov	x29, sp
  d8:	stp	x20, x21, [sp, #16]
  dc:	str	x0, [sp, #56]
  e0:	stp	x2, x3, [sp, #32]
  e4:	str	w4, [sp, #52]
  e8:	ldr	w0, [sp, #52]
  ec:	str	w0, [sp, #72]
  f0:	nop
  f4:	ldr	x0, [sp, #56]
  f8:	bl	0 <protect_start>
  fc:	str	x0, [sp, #104]
 100:	ldr	x0, [sp, #56]
 104:	ldp	x2, x3, [x0]
 108:	ldp	x0, x1, [sp, #32]
 10c:	mov	x4, x2
 110:	adds	x4, x0, x4
 114:	mov	x2, x3
 118:	adc	x0, x1, x2
 11c:	mov	x20, x4
 120:	mov	x21, x0
 124:	stp	x20, x21, [sp, #80]
 128:	ldr	x2, [sp, #56]
 12c:	ldp	x0, x1, [sp, #80]
 130:	stp	x0, x1, [x2]
 134:	ldr	x1, [sp, #104]
 138:	ldr	x0, [sp, #56]
 13c:	bl	20 <protect_end>
 140:	ldr	w0, [sp, #52]
 144:	str	w0, [sp, #76]
 148:	nop
 14c:	ldp	x0, x1, [sp, #80]
 150:	ldp	x20, x21, [sp, #16]
 154:	ldp	x29, x30, [sp], #112
 158:	ret

000000000000015c <select_fetch_add_16>:
 15c:	sub	sp, sp, #0x10
 160:	str	x0, [sp, #8]
 164:	adrp	x0, 44 <libat_fetch_add_16>
 168:	add	x0, x0, #0x0
 16c:	add	sp, sp, #0x10
 170:	ret

0000000000000174 <select_add_fetch_16>:
 174:	sub	sp, sp, #0x10
 178:	str	x0, [sp, #8]
 17c:	adrp	x0, d0 <libat_add_fetch_16>
 180:	add	x0, x0, #0x0
 184:	add	sp, sp, #0x10
 188:	ret

fsub_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <protect_start>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <libat_lock_1>
  14:	mov	x0, #0x0                   	// #0
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

0000000000000020 <protect_end>:
  20:	stp	x29, x30, [sp, #-32]!
  24:	mov	x29, sp
  28:	str	x0, [sp, #24]
  2c:	str	x1, [sp, #16]
  30:	ldr	x0, [sp, #24]
  34:	bl	0 <libat_unlock_1>
  38:	nop
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <libat_fetch_sub_16>:
  44:	stp	x29, x30, [sp, #-112]!
  48:	mov	x29, sp
  4c:	stp	x20, x21, [sp, #16]
  50:	str	x0, [sp, #56]
  54:	stp	x2, x3, [sp, #32]
  58:	str	w4, [sp, #52]
  5c:	ldr	w0, [sp, #52]
  60:	str	w0, [sp, #72]
  64:	nop
  68:	ldr	x0, [sp, #56]
  6c:	bl	0 <protect_start>
  70:	str	x0, [sp, #104]
  74:	ldr	x0, [sp, #56]
  78:	ldp	x0, x1, [x0]
  7c:	stp	x0, x1, [sp, #80]
  80:	ldp	x2, x3, [sp, #80]
  84:	ldp	x0, x1, [sp, #32]
  88:	subs	x4, x2, x0
  8c:	sbc	x0, x3, x1
  90:	mov	x20, x4
  94:	mov	x21, x0
  98:	ldr	x0, [sp, #56]
  9c:	stp	x20, x21, [x0]
  a0:	ldr	x1, [sp, #104]
  a4:	ldr	x0, [sp, #56]
  a8:	bl	20 <protect_end>
  ac:	ldr	w0, [sp, #52]
  b0:	str	w0, [sp, #76]
  b4:	nop
  b8:	ldp	x0, x1, [sp, #80]
  bc:	ldp	x20, x21, [sp, #16]
  c0:	ldp	x29, x30, [sp], #112
  c4:	ret

00000000000000c8 <libat_sub_fetch_16>:
  c8:	stp	x29, x30, [sp, #-112]!
  cc:	mov	x29, sp
  d0:	stp	x20, x21, [sp, #16]
  d4:	str	x0, [sp, #56]
  d8:	stp	x2, x3, [sp, #32]
  dc:	str	w4, [sp, #52]
  e0:	ldr	w0, [sp, #52]
  e4:	str	w0, [sp, #72]
  e8:	nop
  ec:	ldr	x0, [sp, #56]
  f0:	bl	0 <protect_start>
  f4:	str	x0, [sp, #104]
  f8:	ldr	x0, [sp, #56]
  fc:	ldp	x2, x3, [x0]
 100:	ldp	x0, x1, [sp, #32]
 104:	subs	x4, x2, x0
 108:	sbc	x0, x3, x1
 10c:	mov	x20, x4
 110:	mov	x21, x0
 114:	stp	x20, x21, [sp, #80]
 118:	ldr	x2, [sp, #56]
 11c:	ldp	x0, x1, [sp, #80]
 120:	stp	x0, x1, [x2]
 124:	ldr	x1, [sp, #104]
 128:	ldr	x0, [sp, #56]
 12c:	bl	20 <protect_end>
 130:	ldr	w0, [sp, #52]
 134:	str	w0, [sp, #76]
 138:	nop
 13c:	ldp	x0, x1, [sp, #80]
 140:	ldp	x20, x21, [sp, #16]
 144:	ldp	x29, x30, [sp], #112
 148:	ret

000000000000014c <select_fetch_sub_16>:
 14c:	sub	sp, sp, #0x10
 150:	str	x0, [sp, #8]
 154:	adrp	x0, 44 <libat_fetch_sub_16>
 158:	add	x0, x0, #0x0
 15c:	add	sp, sp, #0x10
 160:	ret

0000000000000164 <select_sub_fetch_16>:
 164:	sub	sp, sp, #0x10
 168:	str	x0, [sp, #8]
 16c:	adrp	x0, c8 <libat_sub_fetch_16>
 170:	add	x0, x0, #0x0
 174:	add	sp, sp, #0x10
 178:	ret

fand_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <protect_start>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <libat_lock_1>
  14:	mov	x0, #0x0                   	// #0
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

0000000000000020 <protect_end>:
  20:	stp	x29, x30, [sp, #-32]!
  24:	mov	x29, sp
  28:	str	x0, [sp, #24]
  2c:	str	x1, [sp, #16]
  30:	ldr	x0, [sp, #24]
  34:	bl	0 <libat_unlock_1>
  38:	nop
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <libat_fetch_and_16>:
  44:	stp	x29, x30, [sp, #-112]!
  48:	mov	x29, sp
  4c:	stp	x20, x21, [sp, #16]
  50:	str	x0, [sp, #56]
  54:	stp	x2, x3, [sp, #32]
  58:	str	w4, [sp, #52]
  5c:	ldr	w0, [sp, #52]
  60:	str	w0, [sp, #72]
  64:	nop
  68:	ldr	x0, [sp, #56]
  6c:	bl	0 <protect_start>
  70:	str	x0, [sp, #104]
  74:	ldr	x0, [sp, #56]
  78:	ldp	x0, x1, [x0]
  7c:	stp	x0, x1, [sp, #80]
  80:	ldr	x1, [sp, #80]
  84:	ldr	x0, [sp, #32]
  88:	and	x20, x1, x0
  8c:	ldr	x1, [sp, #88]
  90:	ldr	x0, [sp, #40]
  94:	and	x21, x1, x0
  98:	ldr	x0, [sp, #56]
  9c:	stp	x20, x21, [x0]
  a0:	ldr	x1, [sp, #104]
  a4:	ldr	x0, [sp, #56]
  a8:	bl	20 <protect_end>
  ac:	ldr	w0, [sp, #52]
  b0:	str	w0, [sp, #76]
  b4:	nop
  b8:	ldp	x0, x1, [sp, #80]
  bc:	ldp	x20, x21, [sp, #16]
  c0:	ldp	x29, x30, [sp], #112
  c4:	ret

00000000000000c8 <libat_and_fetch_16>:
  c8:	stp	x29, x30, [sp, #-96]!
  cc:	mov	x29, sp
  d0:	str	x0, [sp, #40]
  d4:	stp	x2, x3, [sp, #16]
  d8:	str	w4, [sp, #36]
  dc:	ldr	w0, [sp, #36]
  e0:	str	w0, [sp, #56]
  e4:	nop
  e8:	ldr	x0, [sp, #40]
  ec:	bl	0 <protect_start>
  f0:	str	x0, [sp, #88]
  f4:	ldr	x0, [sp, #40]
  f8:	ldp	x0, x1, [x0]
  fc:	ldr	x2, [sp, #16]
 100:	and	x2, x2, x0
 104:	str	x2, [sp, #64]
 108:	ldr	x2, [sp, #24]
 10c:	and	x0, x2, x1
 110:	str	x0, [sp, #72]
 114:	ldr	x2, [sp, #40]
 118:	ldp	x0, x1, [sp, #64]
 11c:	stp	x0, x1, [x2]
 120:	ldr	x1, [sp, #88]
 124:	ldr	x0, [sp, #40]
 128:	bl	20 <protect_end>
 12c:	ldr	w0, [sp, #36]
 130:	str	w0, [sp, #60]
 134:	nop
 138:	ldp	x0, x1, [sp, #64]
 13c:	ldp	x29, x30, [sp], #96
 140:	ret

0000000000000144 <select_fetch_and_16>:
 144:	sub	sp, sp, #0x10
 148:	str	x0, [sp, #8]
 14c:	adrp	x0, 44 <libat_fetch_and_16>
 150:	add	x0, x0, #0x0
 154:	add	sp, sp, #0x10
 158:	ret

000000000000015c <select_and_fetch_16>:
 15c:	sub	sp, sp, #0x10
 160:	str	x0, [sp, #8]
 164:	adrp	x0, c8 <libat_and_fetch_16>
 168:	add	x0, x0, #0x0
 16c:	add	sp, sp, #0x10
 170:	ret

fior_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <protect_start>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <libat_lock_1>
  14:	mov	x0, #0x0                   	// #0
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

0000000000000020 <protect_end>:
  20:	stp	x29, x30, [sp, #-32]!
  24:	mov	x29, sp
  28:	str	x0, [sp, #24]
  2c:	str	x1, [sp, #16]
  30:	ldr	x0, [sp, #24]
  34:	bl	0 <libat_unlock_1>
  38:	nop
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <libat_fetch_or_16>:
  44:	stp	x29, x30, [sp, #-112]!
  48:	mov	x29, sp
  4c:	stp	x20, x21, [sp, #16]
  50:	str	x0, [sp, #56]
  54:	stp	x2, x3, [sp, #32]
  58:	str	w4, [sp, #52]
  5c:	ldr	w0, [sp, #52]
  60:	str	w0, [sp, #72]
  64:	nop
  68:	ldr	x0, [sp, #56]
  6c:	bl	0 <protect_start>
  70:	str	x0, [sp, #104]
  74:	ldr	x0, [sp, #56]
  78:	ldp	x0, x1, [x0]
  7c:	stp	x0, x1, [sp, #80]
  80:	ldr	x1, [sp, #80]
  84:	ldr	x0, [sp, #32]
  88:	orr	x20, x1, x0
  8c:	ldr	x1, [sp, #88]
  90:	ldr	x0, [sp, #40]
  94:	orr	x21, x1, x0
  98:	ldr	x0, [sp, #56]
  9c:	stp	x20, x21, [x0]
  a0:	ldr	x1, [sp, #104]
  a4:	ldr	x0, [sp, #56]
  a8:	bl	20 <protect_end>
  ac:	ldr	w0, [sp, #52]
  b0:	str	w0, [sp, #76]
  b4:	nop
  b8:	ldp	x0, x1, [sp, #80]
  bc:	ldp	x20, x21, [sp, #16]
  c0:	ldp	x29, x30, [sp], #112
  c4:	ret

00000000000000c8 <libat_or_fetch_16>:
  c8:	stp	x29, x30, [sp, #-96]!
  cc:	mov	x29, sp
  d0:	str	x0, [sp, #40]
  d4:	stp	x2, x3, [sp, #16]
  d8:	str	w4, [sp, #36]
  dc:	ldr	w0, [sp, #36]
  e0:	str	w0, [sp, #56]
  e4:	nop
  e8:	ldr	x0, [sp, #40]
  ec:	bl	0 <protect_start>
  f0:	str	x0, [sp, #88]
  f4:	ldr	x0, [sp, #40]
  f8:	ldp	x0, x1, [x0]
  fc:	ldr	x2, [sp, #16]
 100:	orr	x2, x2, x0
 104:	str	x2, [sp, #64]
 108:	ldr	x2, [sp, #24]
 10c:	orr	x0, x2, x1
 110:	str	x0, [sp, #72]
 114:	ldr	x2, [sp, #40]
 118:	ldp	x0, x1, [sp, #64]
 11c:	stp	x0, x1, [x2]
 120:	ldr	x1, [sp, #88]
 124:	ldr	x0, [sp, #40]
 128:	bl	20 <protect_end>
 12c:	ldr	w0, [sp, #36]
 130:	str	w0, [sp, #60]
 134:	nop
 138:	ldp	x0, x1, [sp, #64]
 13c:	ldp	x29, x30, [sp], #96
 140:	ret

0000000000000144 <select_fetch_or_16>:
 144:	sub	sp, sp, #0x10
 148:	str	x0, [sp, #8]
 14c:	adrp	x0, 44 <libat_fetch_or_16>
 150:	add	x0, x0, #0x0
 154:	add	sp, sp, #0x10
 158:	ret

000000000000015c <select_or_fetch_16>:
 15c:	sub	sp, sp, #0x10
 160:	str	x0, [sp, #8]
 164:	adrp	x0, c8 <libat_or_fetch_16>
 168:	add	x0, x0, #0x0
 16c:	add	sp, sp, #0x10
 170:	ret

fxor_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <protect_start>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <libat_lock_1>
  14:	mov	x0, #0x0                   	// #0
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

0000000000000020 <protect_end>:
  20:	stp	x29, x30, [sp, #-32]!
  24:	mov	x29, sp
  28:	str	x0, [sp, #24]
  2c:	str	x1, [sp, #16]
  30:	ldr	x0, [sp, #24]
  34:	bl	0 <libat_unlock_1>
  38:	nop
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <libat_fetch_xor_16>:
  44:	stp	x29, x30, [sp, #-112]!
  48:	mov	x29, sp
  4c:	stp	x20, x21, [sp, #16]
  50:	str	x0, [sp, #56]
  54:	stp	x2, x3, [sp, #32]
  58:	str	w4, [sp, #52]
  5c:	ldr	w0, [sp, #52]
  60:	str	w0, [sp, #72]
  64:	nop
  68:	ldr	x0, [sp, #56]
  6c:	bl	0 <protect_start>
  70:	str	x0, [sp, #104]
  74:	ldr	x0, [sp, #56]
  78:	ldp	x0, x1, [x0]
  7c:	stp	x0, x1, [sp, #80]
  80:	ldr	x1, [sp, #80]
  84:	ldr	x0, [sp, #32]
  88:	eor	x20, x1, x0
  8c:	ldr	x1, [sp, #88]
  90:	ldr	x0, [sp, #40]
  94:	eor	x21, x1, x0
  98:	ldr	x0, [sp, #56]
  9c:	stp	x20, x21, [x0]
  a0:	ldr	x1, [sp, #104]
  a4:	ldr	x0, [sp, #56]
  a8:	bl	20 <protect_end>
  ac:	ldr	w0, [sp, #52]
  b0:	str	w0, [sp, #76]
  b4:	nop
  b8:	ldp	x0, x1, [sp, #80]
  bc:	ldp	x20, x21, [sp, #16]
  c0:	ldp	x29, x30, [sp], #112
  c4:	ret

00000000000000c8 <libat_xor_fetch_16>:
  c8:	stp	x29, x30, [sp, #-96]!
  cc:	mov	x29, sp
  d0:	str	x0, [sp, #40]
  d4:	stp	x2, x3, [sp, #16]
  d8:	str	w4, [sp, #36]
  dc:	ldr	w0, [sp, #36]
  e0:	str	w0, [sp, #56]
  e4:	nop
  e8:	ldr	x0, [sp, #40]
  ec:	bl	0 <protect_start>
  f0:	str	x0, [sp, #88]
  f4:	ldr	x0, [sp, #40]
  f8:	ldp	x0, x1, [x0]
  fc:	ldr	x2, [sp, #16]
 100:	eor	x2, x2, x0
 104:	str	x2, [sp, #64]
 108:	ldr	x2, [sp, #24]
 10c:	eor	x0, x2, x1
 110:	str	x0, [sp, #72]
 114:	ldr	x2, [sp, #40]
 118:	ldp	x0, x1, [sp, #64]
 11c:	stp	x0, x1, [x2]
 120:	ldr	x1, [sp, #88]
 124:	ldr	x0, [sp, #40]
 128:	bl	20 <protect_end>
 12c:	ldr	w0, [sp, #36]
 130:	str	w0, [sp, #60]
 134:	nop
 138:	ldp	x0, x1, [sp, #64]
 13c:	ldp	x29, x30, [sp], #96
 140:	ret

0000000000000144 <select_fetch_xor_16>:
 144:	sub	sp, sp, #0x10
 148:	str	x0, [sp, #8]
 14c:	adrp	x0, 44 <libat_fetch_xor_16>
 150:	add	x0, x0, #0x0
 154:	add	sp, sp, #0x10
 158:	ret

000000000000015c <select_xor_fetch_16>:
 15c:	sub	sp, sp, #0x10
 160:	str	x0, [sp, #8]
 164:	adrp	x0, c8 <libat_xor_fetch_16>
 168:	add	x0, x0, #0x0
 16c:	add	sp, sp, #0x10
 170:	ret

fnand_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <protect_start>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <libat_lock_1>
  14:	mov	x0, #0x0                   	// #0
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

0000000000000020 <protect_end>:
  20:	stp	x29, x30, [sp, #-32]!
  24:	mov	x29, sp
  28:	str	x0, [sp, #24]
  2c:	str	x1, [sp, #16]
  30:	ldr	x0, [sp, #24]
  34:	bl	0 <libat_unlock_1>
  38:	nop
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <libat_fetch_nand_16>:
  44:	stp	x29, x30, [sp, #-128]!
  48:	mov	x29, sp
  4c:	stp	x20, x21, [sp, #16]
  50:	stp	x22, x23, [sp, #32]
  54:	str	x0, [sp, #72]
  58:	stp	x2, x3, [sp, #48]
  5c:	str	w4, [sp, #68]
  60:	ldr	w0, [sp, #68]
  64:	str	w0, [sp, #88]
  68:	nop
  6c:	ldr	x0, [sp, #72]
  70:	bl	0 <protect_start>
  74:	str	x0, [sp, #120]
  78:	ldr	x0, [sp, #72]
  7c:	ldp	x0, x1, [x0]
  80:	stp	x0, x1, [sp, #96]
  84:	ldr	x1, [sp, #96]
  88:	ldr	x0, [sp, #48]
  8c:	and	x20, x1, x0
  90:	ldr	x1, [sp, #104]
  94:	ldr	x0, [sp, #56]
  98:	and	x21, x1, x0
  9c:	mvn	x22, x20
  a0:	mvn	x23, x21
  a4:	ldr	x0, [sp, #72]
  a8:	stp	x22, x23, [x0]
  ac:	ldr	x1, [sp, #120]
  b0:	ldr	x0, [sp, #72]
  b4:	bl	20 <protect_end>
  b8:	ldr	w0, [sp, #68]
  bc:	str	w0, [sp, #92]
  c0:	nop
  c4:	ldp	x0, x1, [sp, #96]
  c8:	ldp	x20, x21, [sp, #16]
  cc:	ldp	x22, x23, [sp, #32]
  d0:	ldp	x29, x30, [sp], #128
  d4:	ret

00000000000000d8 <libat_nand_fetch_16>:
  d8:	stp	x29, x30, [sp, #-112]!
  dc:	mov	x29, sp
  e0:	stp	x20, x21, [sp, #16]
  e4:	str	x0, [sp, #56]
  e8:	stp	x2, x3, [sp, #32]
  ec:	str	w4, [sp, #52]
  f0:	ldr	w0, [sp, #52]
  f4:	str	w0, [sp, #72]
  f8:	nop
  fc:	ldr	x0, [sp, #56]
 100:	bl	0 <protect_start>
 104:	str	x0, [sp, #104]
 108:	ldr	x0, [sp, #56]
 10c:	ldp	x0, x1, [x0]
 110:	ldr	x2, [sp, #32]
 114:	and	x20, x2, x0
 118:	ldr	x2, [sp, #40]
 11c:	and	x21, x2, x1
 120:	mvn	x0, x20
 124:	str	x0, [sp, #80]
 128:	mvn	x0, x21
 12c:	str	x0, [sp, #88]
 130:	ldr	x2, [sp, #56]
 134:	ldp	x0, x1, [sp, #80]
 138:	stp	x0, x1, [x2]
 13c:	ldr	x1, [sp, #104]
 140:	ldr	x0, [sp, #56]
 144:	bl	20 <protect_end>
 148:	ldr	w0, [sp, #52]
 14c:	str	w0, [sp, #76]
 150:	nop
 154:	ldp	x0, x1, [sp, #80]
 158:	ldp	x20, x21, [sp, #16]
 15c:	ldp	x29, x30, [sp], #112
 160:	ret

0000000000000164 <select_fetch_nand_16>:
 164:	sub	sp, sp, #0x10
 168:	str	x0, [sp, #8]
 16c:	adrp	x0, 44 <libat_fetch_nand_16>
 170:	add	x0, x0, #0x0
 174:	add	sp, sp, #0x10
 178:	ret

000000000000017c <select_nand_fetch_16>:
 17c:	sub	sp, sp, #0x10
 180:	str	x0, [sp, #8]
 184:	adrp	x0, d8 <libat_nand_fetch_16>
 188:	add	x0, x0, #0x0
 18c:	add	sp, sp, #0x10
 190:	ret

tas_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_16>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	mov	w1, #0x1                   	// #1
  14:	ldaxrb	w2, [x0]
  18:	stlxrb	w3, w1, [x0]
  1c:	cbnz	w3, 14 <libat_test_and_set_16+0x14>
  20:	and	w0, w2, #0xff
  24:	add	sp, sp, #0x10
  28:	ret

000000000000002c <select_test_and_set_16>:
  2c:	sub	sp, sp, #0x10
  30:	str	x0, [sp, #8]
  34:	adrp	x0, 0 <libat_test_and_set_16>
  38:	add	x0, x0, #0x0
  3c:	add	sp, sp, #0x10
  40:	ret

load_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_1_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	ldarb	w0, [x0]
  14:	and	w0, w0, #0xff
  18:	add	sp, sp, #0x10
  1c:	ret

store_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_1_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strb	w1, [sp, #7]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrb	w1, [sp, #7]
  18:	stlrb	w1, [x0]
  1c:	nop
  20:	add	sp, sp, #0x10
  24:	ret

cas_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_1_i1>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	strb	w2, [sp, #15]
  10:	str	w3, [sp, #8]
  14:	str	w4, [sp, #4]
  18:	ldr	x2, [sp, #24]
  1c:	ldr	x0, [sp, #16]
  20:	ldrb	w1, [x0]
  24:	ldrb	w3, [sp, #15]
  28:	mov	w0, w1
  2c:	casalb	w0, w3, [x2]
  30:	cmp	w0, w1, uxtb
  34:	mov	w2, w0
  38:	cset	w0, eq  // eq = none
  3c:	cmp	w0, #0x0
  40:	b.ne	4c <libat_compare_exchange_1_i1+0x4c>  // b.any
  44:	ldr	x1, [sp, #16]
  48:	strb	w2, [x1]
  4c:	add	sp, sp, #0x20
  50:	ret

exch_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_1_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strb	w1, [sp, #7]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrb	w1, [sp, #7]
  18:	swpalb	w1, w1, [x0]
  1c:	and	w0, w1, #0xff
  20:	add	sp, sp, #0x10
  24:	ret

fadd_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_1_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strb	w1, [sp, #7]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrb	w1, [sp, #7]
  18:	ldaddalb	w1, w1, [x0]
  1c:	and	w0, w1, #0xff
  20:	add	sp, sp, #0x10
  24:	ret

0000000000000028 <libat_add_fetch_1_i1>:
  28:	sub	sp, sp, #0x10
  2c:	str	x0, [sp, #8]
  30:	strb	w1, [sp, #7]
  34:	str	w2, [sp]
  38:	ldr	x0, [sp, #8]
  3c:	ldrb	w1, [sp, #7]
  40:	ldaddalb	w1, w2, [x0]
  44:	mov	w0, w1
  48:	add	w0, w2, w0
  4c:	and	w0, w0, #0xff
  50:	add	sp, sp, #0x10
  54:	ret

fsub_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_1_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strb	w1, [sp, #7]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrb	w1, [sp, #7]
  18:	neg	w1, w1
  1c:	ldaddalb	w1, w1, [x0]
  20:	and	w0, w1, #0xff
  24:	add	sp, sp, #0x10
  28:	ret

000000000000002c <libat_sub_fetch_1_i1>:
  2c:	sub	sp, sp, #0x10
  30:	str	x0, [sp, #8]
  34:	strb	w1, [sp, #7]
  38:	str	w2, [sp]
  3c:	ldr	x1, [sp, #8]
  40:	ldrb	w0, [sp, #7]
  44:	neg	w2, w0
  48:	ldaddalb	w2, w2, [x1]
  4c:	sub	w0, w2, w0
  50:	and	w0, w0, #0xff
  54:	add	sp, sp, #0x10
  58:	ret

fand_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_1_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strb	w1, [sp, #7]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrb	w1, [sp, #7]
  18:	mvn	w1, w1
  1c:	ldclralb	w1, w1, [x0]
  20:	and	w0, w1, #0xff
  24:	add	sp, sp, #0x10
  28:	ret

000000000000002c <libat_and_fetch_1_i1>:
  2c:	sub	sp, sp, #0x10
  30:	str	x0, [sp, #8]
  34:	strb	w1, [sp, #7]
  38:	str	w2, [sp]
  3c:	ldr	x1, [sp, #8]
  40:	ldrb	w0, [sp, #7]
  44:	mvn	w2, w0
  48:	ldclralb	w2, w2, [x1]
  4c:	and	w0, w2, w0
  50:	and	w0, w0, #0xff
  54:	add	sp, sp, #0x10
  58:	ret

fior_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_1_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strb	w1, [sp, #7]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrb	w1, [sp, #7]
  18:	ldsetalb	w1, w1, [x0]
  1c:	and	w0, w1, #0xff
  20:	add	sp, sp, #0x10
  24:	ret

0000000000000028 <libat_or_fetch_1_i1>:
  28:	sub	sp, sp, #0x10
  2c:	str	x0, [sp, #8]
  30:	strb	w1, [sp, #7]
  34:	str	w2, [sp]
  38:	ldr	x1, [sp, #8]
  3c:	ldrb	w0, [sp, #7]
  40:	ldsetalb	w0, w2, [x1]
  44:	orr	w0, w2, w0
  48:	and	w0, w0, #0xff
  4c:	add	sp, sp, #0x10
  50:	ret

fxor_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_1_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strb	w1, [sp, #7]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrb	w1, [sp, #7]
  18:	ldeoralb	w1, w1, [x0]
  1c:	and	w0, w1, #0xff
  20:	add	sp, sp, #0x10
  24:	ret

0000000000000028 <libat_xor_fetch_1_i1>:
  28:	sub	sp, sp, #0x10
  2c:	str	x0, [sp, #8]
  30:	strb	w1, [sp, #7]
  34:	str	w2, [sp]
  38:	ldr	x1, [sp, #8]
  3c:	ldrb	w0, [sp, #7]
  40:	ldeoralb	w0, w2, [x1]
  44:	eor	w0, w2, w0
  48:	and	w0, w0, #0xff
  4c:	add	sp, sp, #0x10
  50:	ret

fnand_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_1_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strb	w1, [sp, #7]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrb	w1, [sp, #7]
  18:	ldaxrb	w2, [x0]
  1c:	and	w3, w2, w1
  20:	mvn	w3, w3
  24:	stlxrb	w4, w3, [x0]
  28:	cbnz	w4, 18 <libat_fetch_nand_1_i1+0x18>
  2c:	and	w0, w2, #0xff
  30:	add	sp, sp, #0x10
  34:	ret

0000000000000038 <libat_nand_fetch_1_i1>:
  38:	sub	sp, sp, #0x10
  3c:	str	x0, [sp, #8]
  40:	strb	w1, [sp, #7]
  44:	str	w2, [sp]
  48:	ldr	x0, [sp, #8]
  4c:	ldrb	w1, [sp, #7]
  50:	ldaxrb	w2, [x0]
  54:	and	w2, w2, w1
  58:	mvn	w2, w2
  5c:	stlxrb	w3, w2, [x0]
  60:	cbnz	w3, 50 <libat_nand_fetch_1_i1+0x18>
  64:	and	w0, w2, #0xff
  68:	add	sp, sp, #0x10
  6c:	ret

tas_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_1_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	mov	w1, #0x1                   	// #1
  14:	swpalb	w1, w1, [x0]
  18:	and	w0, w1, #0xff
  1c:	add	sp, sp, #0x10
  20:	ret

load_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_2_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	ldarh	w0, [x0]
  14:	and	w0, w0, #0xffff
  18:	add	sp, sp, #0x10
  1c:	ret

store_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_2_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strh	w1, [sp, #6]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrh	w1, [sp, #6]
  18:	stlrh	w1, [x0]
  1c:	nop
  20:	add	sp, sp, #0x10
  24:	ret

cas_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_2_i1>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	strh	w2, [sp, #14]
  10:	str	w3, [sp, #8]
  14:	str	w4, [sp, #4]
  18:	ldr	x2, [sp, #24]
  1c:	ldr	x0, [sp, #16]
  20:	ldrh	w1, [x0]
  24:	ldrh	w3, [sp, #14]
  28:	mov	w0, w1
  2c:	casalh	w0, w3, [x2]
  30:	cmp	w0, w1, uxth
  34:	mov	w2, w0
  38:	cset	w0, eq  // eq = none
  3c:	cmp	w0, #0x0
  40:	b.ne	4c <libat_compare_exchange_2_i1+0x4c>  // b.any
  44:	ldr	x1, [sp, #16]
  48:	strh	w2, [x1]
  4c:	add	sp, sp, #0x20
  50:	ret

exch_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_2_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strh	w1, [sp, #6]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrh	w1, [sp, #6]
  18:	swpalh	w1, w1, [x0]
  1c:	and	w0, w1, #0xffff
  20:	add	sp, sp, #0x10
  24:	ret

fadd_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_2_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strh	w1, [sp, #6]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrh	w1, [sp, #6]
  18:	ldaddalh	w1, w1, [x0]
  1c:	and	w0, w1, #0xffff
  20:	add	sp, sp, #0x10
  24:	ret

0000000000000028 <libat_add_fetch_2_i1>:
  28:	sub	sp, sp, #0x10
  2c:	str	x0, [sp, #8]
  30:	strh	w1, [sp, #6]
  34:	str	w2, [sp]
  38:	ldr	x0, [sp, #8]
  3c:	ldrh	w1, [sp, #6]
  40:	ldaddalh	w1, w2, [x0]
  44:	mov	w0, w1
  48:	add	w0, w2, w0
  4c:	and	w0, w0, #0xffff
  50:	add	sp, sp, #0x10
  54:	ret

fsub_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_2_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strh	w1, [sp, #6]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrh	w1, [sp, #6]
  18:	neg	w1, w1
  1c:	ldaddalh	w1, w1, [x0]
  20:	and	w0, w1, #0xffff
  24:	add	sp, sp, #0x10
  28:	ret

000000000000002c <libat_sub_fetch_2_i1>:
  2c:	sub	sp, sp, #0x10
  30:	str	x0, [sp, #8]
  34:	strh	w1, [sp, #6]
  38:	str	w2, [sp]
  3c:	ldr	x1, [sp, #8]
  40:	ldrh	w0, [sp, #6]
  44:	neg	w2, w0
  48:	ldaddalh	w2, w2, [x1]
  4c:	sub	w0, w2, w0
  50:	and	w0, w0, #0xffff
  54:	add	sp, sp, #0x10
  58:	ret

fand_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_2_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strh	w1, [sp, #6]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrh	w1, [sp, #6]
  18:	mvn	w1, w1
  1c:	ldclralh	w1, w1, [x0]
  20:	and	w0, w1, #0xffff
  24:	add	sp, sp, #0x10
  28:	ret

000000000000002c <libat_and_fetch_2_i1>:
  2c:	sub	sp, sp, #0x10
  30:	str	x0, [sp, #8]
  34:	strh	w1, [sp, #6]
  38:	str	w2, [sp]
  3c:	ldr	x1, [sp, #8]
  40:	ldrh	w0, [sp, #6]
  44:	mvn	w2, w0
  48:	ldclralh	w2, w2, [x1]
  4c:	and	w0, w2, w0
  50:	and	w0, w0, #0xffff
  54:	add	sp, sp, #0x10
  58:	ret

fior_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_2_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strh	w1, [sp, #6]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrh	w1, [sp, #6]
  18:	ldsetalh	w1, w1, [x0]
  1c:	and	w0, w1, #0xffff
  20:	add	sp, sp, #0x10
  24:	ret

0000000000000028 <libat_or_fetch_2_i1>:
  28:	sub	sp, sp, #0x10
  2c:	str	x0, [sp, #8]
  30:	strh	w1, [sp, #6]
  34:	str	w2, [sp]
  38:	ldr	x1, [sp, #8]
  3c:	ldrh	w0, [sp, #6]
  40:	ldsetalh	w0, w2, [x1]
  44:	orr	w0, w2, w0
  48:	and	w0, w0, #0xffff
  4c:	add	sp, sp, #0x10
  50:	ret

fxor_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_2_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strh	w1, [sp, #6]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrh	w1, [sp, #6]
  18:	ldeoralh	w1, w1, [x0]
  1c:	and	w0, w1, #0xffff
  20:	add	sp, sp, #0x10
  24:	ret

0000000000000028 <libat_xor_fetch_2_i1>:
  28:	sub	sp, sp, #0x10
  2c:	str	x0, [sp, #8]
  30:	strh	w1, [sp, #6]
  34:	str	w2, [sp]
  38:	ldr	x1, [sp, #8]
  3c:	ldrh	w0, [sp, #6]
  40:	ldeoralh	w0, w2, [x1]
  44:	eor	w0, w2, w0
  48:	and	w0, w0, #0xffff
  4c:	add	sp, sp, #0x10
  50:	ret

fnand_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_2_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	strh	w1, [sp, #6]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldrh	w1, [sp, #6]
  18:	ldaxrh	w2, [x0]
  1c:	and	w3, w2, w1
  20:	mvn	w3, w3
  24:	stlxrh	w4, w3, [x0]
  28:	cbnz	w4, 18 <libat_fetch_nand_2_i1+0x18>
  2c:	and	w0, w2, #0xffff
  30:	add	sp, sp, #0x10
  34:	ret

0000000000000038 <libat_nand_fetch_2_i1>:
  38:	sub	sp, sp, #0x10
  3c:	str	x0, [sp, #8]
  40:	strh	w1, [sp, #6]
  44:	str	w2, [sp]
  48:	ldr	x0, [sp, #8]
  4c:	ldrh	w1, [sp, #6]
  50:	ldaxrh	w2, [x0]
  54:	and	w2, w2, w1
  58:	mvn	w2, w2
  5c:	stlxrh	w3, w2, [x0]
  60:	cbnz	w3, 50 <libat_nand_fetch_2_i1+0x18>
  64:	and	w0, w2, #0xffff
  68:	add	sp, sp, #0x10
  6c:	ret

tas_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_2_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	mov	w1, #0x1                   	// #1
  14:	swpalb	w1, w1, [x0]
  18:	and	w0, w1, #0xff
  1c:	add	sp, sp, #0x10
  20:	ret

load_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_4_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	ldar	w0, [x0]
  14:	add	sp, sp, #0x10
  18:	ret

store_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_4_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldr	w1, [sp, #4]
  18:	stlr	w1, [x0]
  1c:	nop
  20:	add	sp, sp, #0x10
  24:	ret

cas_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_4_i1>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	w2, [sp, #12]
  10:	str	w3, [sp, #8]
  14:	str	w4, [sp, #4]
  18:	ldr	x2, [sp, #24]
  1c:	ldr	x0, [sp, #16]
  20:	ldr	w1, [x0]
  24:	ldr	w3, [sp, #12]
  28:	mov	w0, w1
  2c:	casal	w0, w3, [x2]
  30:	cmp	w0, w1
  34:	cset	w1, eq  // eq = none
  38:	cmp	w1, #0x0
  3c:	b.ne	48 <libat_compare_exchange_4_i1+0x48>  // b.any
  40:	ldr	x2, [sp, #16]
  44:	str	w0, [x2]
  48:	mov	w0, w1
  4c:	add	sp, sp, #0x20
  50:	ret

exch_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_4_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldr	w1, [sp, #4]
  18:	swpal	w1, w1, [x0]
  1c:	mov	w0, w1
  20:	add	sp, sp, #0x10
  24:	ret

fadd_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_4_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldr	w1, [sp, #4]
  18:	ldaddal	w1, w1, [x0]
  1c:	mov	w0, w1
  20:	add	sp, sp, #0x10
  24:	ret

0000000000000028 <libat_add_fetch_4_i1>:
  28:	sub	sp, sp, #0x10
  2c:	str	x0, [sp, #8]
  30:	str	w1, [sp, #4]
  34:	str	w2, [sp]
  38:	ldr	x1, [sp, #8]
  3c:	ldr	w0, [sp, #4]
  40:	ldaddal	w0, w2, [x1]
  44:	add	w0, w2, w0
  48:	add	sp, sp, #0x10
  4c:	ret

fsub_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_4_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldr	w1, [sp, #4]
  18:	neg	w1, w1
  1c:	ldaddal	w1, w1, [x0]
  20:	mov	w0, w1
  24:	add	sp, sp, #0x10
  28:	ret

000000000000002c <libat_sub_fetch_4_i1>:
  2c:	sub	sp, sp, #0x10
  30:	str	x0, [sp, #8]
  34:	str	w1, [sp, #4]
  38:	str	w2, [sp]
  3c:	ldr	x1, [sp, #8]
  40:	ldr	w0, [sp, #4]
  44:	neg	w2, w0
  48:	ldaddal	w2, w2, [x1]
  4c:	sub	w0, w2, w0
  50:	add	sp, sp, #0x10
  54:	ret

fand_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_4_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldr	w1, [sp, #4]
  18:	mvn	w1, w1
  1c:	ldclral	w1, w1, [x0]
  20:	mov	w0, w1
  24:	add	sp, sp, #0x10
  28:	ret

000000000000002c <libat_and_fetch_4_i1>:
  2c:	sub	sp, sp, #0x10
  30:	str	x0, [sp, #8]
  34:	str	w1, [sp, #4]
  38:	str	w2, [sp]
  3c:	ldr	x1, [sp, #8]
  40:	ldr	w0, [sp, #4]
  44:	mvn	w2, w0
  48:	ldclral	w2, w2, [x1]
  4c:	and	w0, w2, w0
  50:	add	sp, sp, #0x10
  54:	ret

fior_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_4_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldr	w1, [sp, #4]
  18:	ldsetal	w1, w1, [x0]
  1c:	mov	w0, w1
  20:	add	sp, sp, #0x10
  24:	ret

0000000000000028 <libat_or_fetch_4_i1>:
  28:	sub	sp, sp, #0x10
  2c:	str	x0, [sp, #8]
  30:	str	w1, [sp, #4]
  34:	str	w2, [sp]
  38:	ldr	x1, [sp, #8]
  3c:	ldr	w0, [sp, #4]
  40:	ldsetal	w0, w2, [x1]
  44:	orr	w0, w2, w0
  48:	add	sp, sp, #0x10
  4c:	ret

fxor_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_4_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldr	w1, [sp, #4]
  18:	ldeoral	w1, w1, [x0]
  1c:	mov	w0, w1
  20:	add	sp, sp, #0x10
  24:	ret

0000000000000028 <libat_xor_fetch_4_i1>:
  28:	sub	sp, sp, #0x10
  2c:	str	x0, [sp, #8]
  30:	str	w1, [sp, #4]
  34:	str	w2, [sp]
  38:	ldr	x1, [sp, #8]
  3c:	ldr	w0, [sp, #4]
  40:	ldeoral	w0, w2, [x1]
  44:	eor	w0, w2, w0
  48:	add	sp, sp, #0x10
  4c:	ret

fnand_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_4_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	str	w2, [sp]
  10:	ldr	x0, [sp, #8]
  14:	ldr	w1, [sp, #4]
  18:	ldaxr	w2, [x0]
  1c:	and	w3, w2, w1
  20:	mvn	w3, w3
  24:	stlxr	w4, w3, [x0]
  28:	cbnz	w4, 18 <libat_fetch_nand_4_i1+0x18>
  2c:	mov	w0, w2
  30:	add	sp, sp, #0x10
  34:	ret

0000000000000038 <libat_nand_fetch_4_i1>:
  38:	sub	sp, sp, #0x10
  3c:	str	x0, [sp, #8]
  40:	str	w1, [sp, #4]
  44:	str	w2, [sp]
  48:	ldr	x0, [sp, #8]
  4c:	ldr	w1, [sp, #4]
  50:	ldaxr	w2, [x0]
  54:	and	w2, w2, w1
  58:	mvn	w2, w2
  5c:	stlxr	w3, w2, [x0]
  60:	cbnz	w3, 50 <libat_nand_fetch_4_i1+0x18>
  64:	mov	w0, w2
  68:	add	sp, sp, #0x10
  6c:	ret

tas_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_4_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	mov	w1, #0x1                   	// #1
  14:	swpalb	w1, w1, [x0]
  18:	and	w0, w1, #0xff
  1c:	add	sp, sp, #0x10
  20:	ret

load_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_8_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	ldar	x0, [x0]
  14:	add	sp, sp, #0x10
  18:	ret

store_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_8_i1>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	w2, [sp, #12]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [sp, #16]
  18:	stlr	x1, [x0]
  1c:	nop
  20:	add	sp, sp, #0x20
  24:	ret

cas_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_8_i1>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	x2, [sp, #8]
  10:	str	w3, [sp, #4]
  14:	str	w4, [sp]
  18:	ldr	x2, [sp, #24]
  1c:	ldr	x0, [sp, #16]
  20:	ldr	x1, [x0]
  24:	ldr	x3, [sp, #8]
  28:	mov	x0, x1
  2c:	casal	x0, x3, [x2]
  30:	cmp	x0, x1
  34:	cset	w1, eq  // eq = none
  38:	cmp	w1, #0x0
  3c:	b.ne	48 <libat_compare_exchange_8_i1+0x48>  // b.any
  40:	ldr	x2, [sp, #16]
  44:	str	x0, [x2]
  48:	mov	w0, w1
  4c:	add	sp, sp, #0x20
  50:	ret

exch_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_8_i1>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	w2, [sp, #12]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [sp, #16]
  18:	swpal	x1, x1, [x0]
  1c:	mov	x0, x1
  20:	add	sp, sp, #0x20
  24:	ret

fadd_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_8_i1>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	w2, [sp, #12]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [sp, #16]
  18:	ldaddal	x1, x1, [x0]
  1c:	mov	x0, x1
  20:	add	sp, sp, #0x20
  24:	ret

0000000000000028 <libat_add_fetch_8_i1>:
  28:	sub	sp, sp, #0x20
  2c:	str	x0, [sp, #24]
  30:	str	x1, [sp, #16]
  34:	str	w2, [sp, #12]
  38:	ldr	x1, [sp, #24]
  3c:	ldr	x0, [sp, #16]
  40:	ldaddal	x0, x2, [x1]
  44:	add	x0, x2, x0
  48:	add	sp, sp, #0x20
  4c:	ret

fsub_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_8_i1>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	w2, [sp, #12]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [sp, #16]
  18:	neg	x1, x1
  1c:	ldaddal	x1, x1, [x0]
  20:	mov	x0, x1
  24:	add	sp, sp, #0x20
  28:	ret

000000000000002c <libat_sub_fetch_8_i1>:
  2c:	sub	sp, sp, #0x20
  30:	str	x0, [sp, #24]
  34:	str	x1, [sp, #16]
  38:	str	w2, [sp, #12]
  3c:	ldr	x1, [sp, #24]
  40:	ldr	x0, [sp, #16]
  44:	neg	x2, x0
  48:	ldaddal	x2, x2, [x1]
  4c:	sub	x0, x2, x0
  50:	add	sp, sp, #0x20
  54:	ret

fand_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_8_i1>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	w2, [sp, #12]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [sp, #16]
  18:	mvn	x1, x1
  1c:	ldclral	x1, x1, [x0]
  20:	mov	x0, x1
  24:	add	sp, sp, #0x20
  28:	ret

000000000000002c <libat_and_fetch_8_i1>:
  2c:	sub	sp, sp, #0x20
  30:	str	x0, [sp, #24]
  34:	str	x1, [sp, #16]
  38:	str	w2, [sp, #12]
  3c:	ldr	x1, [sp, #24]
  40:	ldr	x0, [sp, #16]
  44:	mvn	x2, x0
  48:	ldclral	x2, x2, [x1]
  4c:	and	x0, x2, x0
  50:	add	sp, sp, #0x20
  54:	ret

fior_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_8_i1>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	w2, [sp, #12]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [sp, #16]
  18:	ldsetal	x1, x1, [x0]
  1c:	mov	x0, x1
  20:	add	sp, sp, #0x20
  24:	ret

0000000000000028 <libat_or_fetch_8_i1>:
  28:	sub	sp, sp, #0x20
  2c:	str	x0, [sp, #24]
  30:	str	x1, [sp, #16]
  34:	str	w2, [sp, #12]
  38:	ldr	x1, [sp, #24]
  3c:	ldr	x0, [sp, #16]
  40:	ldsetal	x0, x2, [x1]
  44:	orr	x0, x2, x0
  48:	add	sp, sp, #0x20
  4c:	ret

fxor_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_8_i1>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	w2, [sp, #12]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [sp, #16]
  18:	ldeoral	x1, x1, [x0]
  1c:	mov	x0, x1
  20:	add	sp, sp, #0x20
  24:	ret

0000000000000028 <libat_xor_fetch_8_i1>:
  28:	sub	sp, sp, #0x20
  2c:	str	x0, [sp, #24]
  30:	str	x1, [sp, #16]
  34:	str	w2, [sp, #12]
  38:	ldr	x1, [sp, #24]
  3c:	ldr	x0, [sp, #16]
  40:	ldeoral	x0, x2, [x1]
  44:	eor	x0, x2, x0
  48:	add	sp, sp, #0x20
  4c:	ret

fnand_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_8_i1>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	w2, [sp, #12]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x1, [sp, #16]
  18:	ldaxr	x2, [x0]
  1c:	and	x3, x2, x1
  20:	mvn	x3, x3
  24:	stlxr	w4, x3, [x0]
  28:	cbnz	w4, 18 <libat_fetch_nand_8_i1+0x18>
  2c:	mov	x0, x2
  30:	add	sp, sp, #0x20
  34:	ret

0000000000000038 <libat_nand_fetch_8_i1>:
  38:	sub	sp, sp, #0x20
  3c:	str	x0, [sp, #24]
  40:	str	x1, [sp, #16]
  44:	str	w2, [sp, #12]
  48:	ldr	x0, [sp, #24]
  4c:	ldr	x1, [sp, #16]
  50:	ldaxr	x2, [x0]
  54:	and	x2, x2, x1
  58:	mvn	x2, x2
  5c:	stlxr	w3, x2, [x0]
  60:	cbnz	w3, 50 <libat_nand_fetch_8_i1+0x18>
  64:	mov	x0, x2
  68:	add	sp, sp, #0x20
  6c:	ret

tas_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_8_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	mov	w1, #0x1                   	// #1
  14:	swpalb	w1, w1, [x0]
  18:	and	w0, w1, #0xff
  1c:	add	sp, sp, #0x10
  20:	ret

load_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <protect_start>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <libat_lock_1>
  14:	mov	x0, #0x0                   	// #0
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

0000000000000020 <protect_end>:
  20:	stp	x29, x30, [sp, #-32]!
  24:	mov	x29, sp
  28:	str	x0, [sp, #24]
  2c:	str	x1, [sp, #16]
  30:	ldr	x0, [sp, #24]
  34:	bl	0 <libat_unlock_1>
  38:	nop
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <libat_load_16_i1>:
  44:	stp	x29, x30, [sp, #-80]!
  48:	mov	x29, sp
  4c:	str	x0, [sp, #24]
  50:	str	w1, [sp, #20]
  54:	ldr	w0, [sp, #20]
  58:	str	w0, [sp, #40]
  5c:	nop
  60:	ldr	x0, [sp, #24]
  64:	bl	0 <protect_start>
  68:	str	x0, [sp, #72]
  6c:	ldr	x0, [sp, #24]
  70:	ldp	x0, x1, [x0]
  74:	stp	x0, x1, [sp, #48]
  78:	ldr	x1, [sp, #72]
  7c:	ldr	x0, [sp, #24]
  80:	bl	20 <protect_end>
  84:	ldr	w0, [sp, #20]
  88:	str	w0, [sp, #44]
  8c:	nop
  90:	ldp	x0, x1, [sp, #48]
  94:	ldp	x29, x30, [sp], #80
  98:	ret

store_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <protect_start>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <libat_lock_1>
  14:	mov	x0, #0x0                   	// #0
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

0000000000000020 <protect_end>:
  20:	stp	x29, x30, [sp, #-32]!
  24:	mov	x29, sp
  28:	str	x0, [sp, #24]
  2c:	str	x1, [sp, #16]
  30:	ldr	x0, [sp, #24]
  34:	bl	0 <libat_unlock_1>
  38:	nop
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <libat_store_16_i1>:
  44:	stp	x29, x30, [sp, #-64]!
  48:	mov	x29, sp
  4c:	str	x0, [sp, #40]
  50:	stp	x2, x3, [sp, #16]
  54:	str	w4, [sp, #36]
  58:	ldr	w0, [sp, #36]
  5c:	str	w0, [sp, #48]
  60:	nop
  64:	ldr	x0, [sp, #40]
  68:	bl	0 <protect_start>
  6c:	str	x0, [sp, #56]
  70:	ldr	x2, [sp, #40]
  74:	ldp	x0, x1, [sp, #16]
  78:	stp	x0, x1, [x2]
  7c:	ldr	x1, [sp, #56]
  80:	ldr	x0, [sp, #40]
  84:	bl	20 <protect_end>
  88:	ldr	w0, [sp, #36]
  8c:	str	w0, [sp, #52]
  90:	nop
  94:	nop
  98:	ldp	x29, x30, [sp], #64
  9c:	ret

cas_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <protect_start>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <libat_lock_1>
  14:	mov	x0, #0x0                   	// #0
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

0000000000000020 <protect_end>:
  20:	stp	x29, x30, [sp, #-32]!
  24:	mov	x29, sp
  28:	str	x0, [sp, #24]
  2c:	str	x1, [sp, #16]
  30:	ldr	x0, [sp, #24]
  34:	bl	0 <libat_unlock_1>
  38:	nop
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <libat_compare_exchange_16_i1>:
  44:	stp	x29, x30, [sp, #-128]!
  48:	mov	x29, sp
  4c:	stp	x20, x21, [sp, #16]
  50:	str	x0, [sp, #72]
  54:	str	x1, [sp, #64]
  58:	stp	x2, x3, [sp, #48]
  5c:	str	w4, [sp, #44]
  60:	str	w5, [sp, #40]
  64:	ldr	w0, [sp, #44]
  68:	str	w0, [sp, #88]
  6c:	nop
  70:	ldr	x0, [sp, #72]
  74:	bl	0 <protect_start>
  78:	str	x0, [sp, #120]
  7c:	ldr	x0, [sp, #72]
  80:	ldp	x0, x1, [x0]
  84:	stp	x0, x1, [sp, #96]
  88:	ldr	x0, [sp, #64]
  8c:	ldp	x0, x1, [x0]
  90:	ldr	x2, [sp, #96]
  94:	eor	x20, x2, x0
  98:	ldr	x2, [sp, #104]
  9c:	eor	x21, x2, x1
  a0:	orr	x0, x20, x21
  a4:	cmp	x0, #0x0
  a8:	cset	w0, eq  // eq = none
  ac:	strb	w0, [sp, #95]
  b0:	ldrb	w0, [sp, #95]
  b4:	cmp	w0, #0x0
  b8:	b.eq	cc <libat_compare_exchange_16_i1+0x88>  // b.none
  bc:	ldr	x2, [sp, #72]
  c0:	ldp	x0, x1, [sp, #48]
  c4:	stp	x0, x1, [x2]
  c8:	b	d8 <libat_compare_exchange_16_i1+0x94>
  cc:	ldr	x2, [sp, #64]
  d0:	ldp	x0, x1, [sp, #96]
  d4:	stp	x0, x1, [x2]
  d8:	ldr	x1, [sp, #120]
  dc:	ldr	x0, [sp, #72]
  e0:	bl	20 <protect_end>
  e4:	ldr	w0, [sp, #44]
  e8:	str	w0, [sp, #84]
  ec:	nop
  f0:	ldrb	w0, [sp, #95]
  f4:	ldp	x20, x21, [sp, #16]
  f8:	ldp	x29, x30, [sp], #128
  fc:	ret

exch_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <protect_start>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <libat_lock_1>
  14:	mov	x0, #0x0                   	// #0
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

0000000000000020 <protect_end>:
  20:	stp	x29, x30, [sp, #-32]!
  24:	mov	x29, sp
  28:	str	x0, [sp, #24]
  2c:	str	x1, [sp, #16]
  30:	ldr	x0, [sp, #24]
  34:	bl	0 <libat_unlock_1>
  38:	nop
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <libat_exchange_16_i1>:
  44:	stp	x29, x30, [sp, #-96]!
  48:	mov	x29, sp
  4c:	str	x0, [sp, #40]
  50:	stp	x2, x3, [sp, #16]
  54:	str	w4, [sp, #36]
  58:	ldr	w0, [sp, #36]
  5c:	str	w0, [sp, #56]
  60:	nop
  64:	ldr	x0, [sp, #40]
  68:	bl	0 <protect_start>
  6c:	str	x0, [sp, #88]
  70:	ldr	x0, [sp, #40]
  74:	ldp	x0, x1, [x0]
  78:	stp	x0, x1, [sp, #64]
  7c:	ldr	x2, [sp, #40]
  80:	ldp	x0, x1, [sp, #16]
  84:	stp	x0, x1, [x2]
  88:	ldr	x1, [sp, #88]
  8c:	ldr	x0, [sp, #40]
  90:	bl	20 <protect_end>
  94:	ldr	w0, [sp, #36]
  98:	str	w0, [sp, #60]
  9c:	nop
  a0:	ldp	x0, x1, [sp, #64]
  a4:	ldp	x29, x30, [sp], #96
  a8:	ret

fadd_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <protect_start>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <libat_lock_1>
  14:	mov	x0, #0x0                   	// #0
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

0000000000000020 <protect_end>:
  20:	stp	x29, x30, [sp, #-32]!
  24:	mov	x29, sp
  28:	str	x0, [sp, #24]
  2c:	str	x1, [sp, #16]
  30:	ldr	x0, [sp, #24]
  34:	bl	0 <libat_unlock_1>
  38:	nop
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <libat_fetch_add_16_i1>:
  44:	stp	x29, x30, [sp, #-112]!
  48:	mov	x29, sp
  4c:	stp	x20, x21, [sp, #16]
  50:	str	x0, [sp, #56]
  54:	stp	x2, x3, [sp, #32]
  58:	str	w4, [sp, #52]
  5c:	ldr	w0, [sp, #52]
  60:	str	w0, [sp, #72]
  64:	nop
  68:	ldr	x0, [sp, #56]
  6c:	bl	0 <protect_start>
  70:	str	x0, [sp, #104]
  74:	ldr	x0, [sp, #56]
  78:	ldp	x0, x1, [x0]
  7c:	stp	x0, x1, [sp, #80]
  80:	ldp	x0, x1, [sp, #80]
  84:	ldp	x2, x3, [sp, #32]
  88:	mov	x4, x2
  8c:	adds	x4, x0, x4
  90:	mov	x2, x3
  94:	adc	x0, x1, x2
  98:	mov	x20, x4
  9c:	mov	x21, x0
  a0:	ldr	x0, [sp, #56]
  a4:	stp	x20, x21, [x0]
  a8:	ldr	x1, [sp, #104]
  ac:	ldr	x0, [sp, #56]
  b0:	bl	20 <protect_end>
  b4:	ldr	w0, [sp, #52]
  b8:	str	w0, [sp, #76]
  bc:	nop
  c0:	ldp	x0, x1, [sp, #80]
  c4:	ldp	x20, x21, [sp, #16]
  c8:	ldp	x29, x30, [sp], #112
  cc:	ret

00000000000000d0 <libat_add_fetch_16_i1>:
  d0:	stp	x29, x30, [sp, #-112]!
  d4:	mov	x29, sp
  d8:	stp	x20, x21, [sp, #16]
  dc:	str	x0, [sp, #56]
  e0:	stp	x2, x3, [sp, #32]
  e4:	str	w4, [sp, #52]
  e8:	ldr	w0, [sp, #52]
  ec:	str	w0, [sp, #72]
  f0:	nop
  f4:	ldr	x0, [sp, #56]
  f8:	bl	0 <protect_start>
  fc:	str	x0, [sp, #104]
 100:	ldr	x0, [sp, #56]
 104:	ldp	x2, x3, [x0]
 108:	ldp	x0, x1, [sp, #32]
 10c:	mov	x4, x2
 110:	adds	x4, x0, x4
 114:	mov	x2, x3
 118:	adc	x0, x1, x2
 11c:	mov	x20, x4
 120:	mov	x21, x0
 124:	stp	x20, x21, [sp, #80]
 128:	ldr	x2, [sp, #56]
 12c:	ldp	x0, x1, [sp, #80]
 130:	stp	x0, x1, [x2]
 134:	ldr	x1, [sp, #104]
 138:	ldr	x0, [sp, #56]
 13c:	bl	20 <protect_end>
 140:	ldr	w0, [sp, #52]
 144:	str	w0, [sp, #76]
 148:	nop
 14c:	ldp	x0, x1, [sp, #80]
 150:	ldp	x20, x21, [sp, #16]
 154:	ldp	x29, x30, [sp], #112
 158:	ret

fsub_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <protect_start>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <libat_lock_1>
  14:	mov	x0, #0x0                   	// #0
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

0000000000000020 <protect_end>:
  20:	stp	x29, x30, [sp, #-32]!
  24:	mov	x29, sp
  28:	str	x0, [sp, #24]
  2c:	str	x1, [sp, #16]
  30:	ldr	x0, [sp, #24]
  34:	bl	0 <libat_unlock_1>
  38:	nop
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <libat_fetch_sub_16_i1>:
  44:	stp	x29, x30, [sp, #-112]!
  48:	mov	x29, sp
  4c:	stp	x20, x21, [sp, #16]
  50:	str	x0, [sp, #56]
  54:	stp	x2, x3, [sp, #32]
  58:	str	w4, [sp, #52]
  5c:	ldr	w0, [sp, #52]
  60:	str	w0, [sp, #72]
  64:	nop
  68:	ldr	x0, [sp, #56]
  6c:	bl	0 <protect_start>
  70:	str	x0, [sp, #104]
  74:	ldr	x0, [sp, #56]
  78:	ldp	x0, x1, [x0]
  7c:	stp	x0, x1, [sp, #80]
  80:	ldp	x2, x3, [sp, #80]
  84:	ldp	x0, x1, [sp, #32]
  88:	subs	x4, x2, x0
  8c:	sbc	x0, x3, x1
  90:	mov	x20, x4
  94:	mov	x21, x0
  98:	ldr	x0, [sp, #56]
  9c:	stp	x20, x21, [x0]
  a0:	ldr	x1, [sp, #104]
  a4:	ldr	x0, [sp, #56]
  a8:	bl	20 <protect_end>
  ac:	ldr	w0, [sp, #52]
  b0:	str	w0, [sp, #76]
  b4:	nop
  b8:	ldp	x0, x1, [sp, #80]
  bc:	ldp	x20, x21, [sp, #16]
  c0:	ldp	x29, x30, [sp], #112
  c4:	ret

00000000000000c8 <libat_sub_fetch_16_i1>:
  c8:	stp	x29, x30, [sp, #-112]!
  cc:	mov	x29, sp
  d0:	stp	x20, x21, [sp, #16]
  d4:	str	x0, [sp, #56]
  d8:	stp	x2, x3, [sp, #32]
  dc:	str	w4, [sp, #52]
  e0:	ldr	w0, [sp, #52]
  e4:	str	w0, [sp, #72]
  e8:	nop
  ec:	ldr	x0, [sp, #56]
  f0:	bl	0 <protect_start>
  f4:	str	x0, [sp, #104]
  f8:	ldr	x0, [sp, #56]
  fc:	ldp	x2, x3, [x0]
 100:	ldp	x0, x1, [sp, #32]
 104:	subs	x4, x2, x0
 108:	sbc	x0, x3, x1
 10c:	mov	x20, x4
 110:	mov	x21, x0
 114:	stp	x20, x21, [sp, #80]
 118:	ldr	x2, [sp, #56]
 11c:	ldp	x0, x1, [sp, #80]
 120:	stp	x0, x1, [x2]
 124:	ldr	x1, [sp, #104]
 128:	ldr	x0, [sp, #56]
 12c:	bl	20 <protect_end>
 130:	ldr	w0, [sp, #52]
 134:	str	w0, [sp, #76]
 138:	nop
 13c:	ldp	x0, x1, [sp, #80]
 140:	ldp	x20, x21, [sp, #16]
 144:	ldp	x29, x30, [sp], #112
 148:	ret

fand_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <protect_start>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <libat_lock_1>
  14:	mov	x0, #0x0                   	// #0
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

0000000000000020 <protect_end>:
  20:	stp	x29, x30, [sp, #-32]!
  24:	mov	x29, sp
  28:	str	x0, [sp, #24]
  2c:	str	x1, [sp, #16]
  30:	ldr	x0, [sp, #24]
  34:	bl	0 <libat_unlock_1>
  38:	nop
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <libat_fetch_and_16_i1>:
  44:	stp	x29, x30, [sp, #-112]!
  48:	mov	x29, sp
  4c:	stp	x20, x21, [sp, #16]
  50:	str	x0, [sp, #56]
  54:	stp	x2, x3, [sp, #32]
  58:	str	w4, [sp, #52]
  5c:	ldr	w0, [sp, #52]
  60:	str	w0, [sp, #72]
  64:	nop
  68:	ldr	x0, [sp, #56]
  6c:	bl	0 <protect_start>
  70:	str	x0, [sp, #104]
  74:	ldr	x0, [sp, #56]
  78:	ldp	x0, x1, [x0]
  7c:	stp	x0, x1, [sp, #80]
  80:	ldr	x1, [sp, #80]
  84:	ldr	x0, [sp, #32]
  88:	and	x20, x1, x0
  8c:	ldr	x1, [sp, #88]
  90:	ldr	x0, [sp, #40]
  94:	and	x21, x1, x0
  98:	ldr	x0, [sp, #56]
  9c:	stp	x20, x21, [x0]
  a0:	ldr	x1, [sp, #104]
  a4:	ldr	x0, [sp, #56]
  a8:	bl	20 <protect_end>
  ac:	ldr	w0, [sp, #52]
  b0:	str	w0, [sp, #76]
  b4:	nop
  b8:	ldp	x0, x1, [sp, #80]
  bc:	ldp	x20, x21, [sp, #16]
  c0:	ldp	x29, x30, [sp], #112
  c4:	ret

00000000000000c8 <libat_and_fetch_16_i1>:
  c8:	stp	x29, x30, [sp, #-96]!
  cc:	mov	x29, sp
  d0:	str	x0, [sp, #40]
  d4:	stp	x2, x3, [sp, #16]
  d8:	str	w4, [sp, #36]
  dc:	ldr	w0, [sp, #36]
  e0:	str	w0, [sp, #56]
  e4:	nop
  e8:	ldr	x0, [sp, #40]
  ec:	bl	0 <protect_start>
  f0:	str	x0, [sp, #88]
  f4:	ldr	x0, [sp, #40]
  f8:	ldp	x0, x1, [x0]
  fc:	ldr	x2, [sp, #16]
 100:	and	x2, x2, x0
 104:	str	x2, [sp, #64]
 108:	ldr	x2, [sp, #24]
 10c:	and	x0, x2, x1
 110:	str	x0, [sp, #72]
 114:	ldr	x2, [sp, #40]
 118:	ldp	x0, x1, [sp, #64]
 11c:	stp	x0, x1, [x2]
 120:	ldr	x1, [sp, #88]
 124:	ldr	x0, [sp, #40]
 128:	bl	20 <protect_end>
 12c:	ldr	w0, [sp, #36]
 130:	str	w0, [sp, #60]
 134:	nop
 138:	ldp	x0, x1, [sp, #64]
 13c:	ldp	x29, x30, [sp], #96
 140:	ret

fior_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <protect_start>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <libat_lock_1>
  14:	mov	x0, #0x0                   	// #0
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

0000000000000020 <protect_end>:
  20:	stp	x29, x30, [sp, #-32]!
  24:	mov	x29, sp
  28:	str	x0, [sp, #24]
  2c:	str	x1, [sp, #16]
  30:	ldr	x0, [sp, #24]
  34:	bl	0 <libat_unlock_1>
  38:	nop
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <libat_fetch_or_16_i1>:
  44:	stp	x29, x30, [sp, #-112]!
  48:	mov	x29, sp
  4c:	stp	x20, x21, [sp, #16]
  50:	str	x0, [sp, #56]
  54:	stp	x2, x3, [sp, #32]
  58:	str	w4, [sp, #52]
  5c:	ldr	w0, [sp, #52]
  60:	str	w0, [sp, #72]
  64:	nop
  68:	ldr	x0, [sp, #56]
  6c:	bl	0 <protect_start>
  70:	str	x0, [sp, #104]
  74:	ldr	x0, [sp, #56]
  78:	ldp	x0, x1, [x0]
  7c:	stp	x0, x1, [sp, #80]
  80:	ldr	x1, [sp, #80]
  84:	ldr	x0, [sp, #32]
  88:	orr	x20, x1, x0
  8c:	ldr	x1, [sp, #88]
  90:	ldr	x0, [sp, #40]
  94:	orr	x21, x1, x0
  98:	ldr	x0, [sp, #56]
  9c:	stp	x20, x21, [x0]
  a0:	ldr	x1, [sp, #104]
  a4:	ldr	x0, [sp, #56]
  a8:	bl	20 <protect_end>
  ac:	ldr	w0, [sp, #52]
  b0:	str	w0, [sp, #76]
  b4:	nop
  b8:	ldp	x0, x1, [sp, #80]
  bc:	ldp	x20, x21, [sp, #16]
  c0:	ldp	x29, x30, [sp], #112
  c4:	ret

00000000000000c8 <libat_or_fetch_16_i1>:
  c8:	stp	x29, x30, [sp, #-96]!
  cc:	mov	x29, sp
  d0:	str	x0, [sp, #40]
  d4:	stp	x2, x3, [sp, #16]
  d8:	str	w4, [sp, #36]
  dc:	ldr	w0, [sp, #36]
  e0:	str	w0, [sp, #56]
  e4:	nop
  e8:	ldr	x0, [sp, #40]
  ec:	bl	0 <protect_start>
  f0:	str	x0, [sp, #88]
  f4:	ldr	x0, [sp, #40]
  f8:	ldp	x0, x1, [x0]
  fc:	ldr	x2, [sp, #16]
 100:	orr	x2, x2, x0
 104:	str	x2, [sp, #64]
 108:	ldr	x2, [sp, #24]
 10c:	orr	x0, x2, x1
 110:	str	x0, [sp, #72]
 114:	ldr	x2, [sp, #40]
 118:	ldp	x0, x1, [sp, #64]
 11c:	stp	x0, x1, [x2]
 120:	ldr	x1, [sp, #88]
 124:	ldr	x0, [sp, #40]
 128:	bl	20 <protect_end>
 12c:	ldr	w0, [sp, #36]
 130:	str	w0, [sp, #60]
 134:	nop
 138:	ldp	x0, x1, [sp, #64]
 13c:	ldp	x29, x30, [sp], #96
 140:	ret

fxor_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <protect_start>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <libat_lock_1>
  14:	mov	x0, #0x0                   	// #0
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

0000000000000020 <protect_end>:
  20:	stp	x29, x30, [sp, #-32]!
  24:	mov	x29, sp
  28:	str	x0, [sp, #24]
  2c:	str	x1, [sp, #16]
  30:	ldr	x0, [sp, #24]
  34:	bl	0 <libat_unlock_1>
  38:	nop
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <libat_fetch_xor_16_i1>:
  44:	stp	x29, x30, [sp, #-112]!
  48:	mov	x29, sp
  4c:	stp	x20, x21, [sp, #16]
  50:	str	x0, [sp, #56]
  54:	stp	x2, x3, [sp, #32]
  58:	str	w4, [sp, #52]
  5c:	ldr	w0, [sp, #52]
  60:	str	w0, [sp, #72]
  64:	nop
  68:	ldr	x0, [sp, #56]
  6c:	bl	0 <protect_start>
  70:	str	x0, [sp, #104]
  74:	ldr	x0, [sp, #56]
  78:	ldp	x0, x1, [x0]
  7c:	stp	x0, x1, [sp, #80]
  80:	ldr	x1, [sp, #80]
  84:	ldr	x0, [sp, #32]
  88:	eor	x20, x1, x0
  8c:	ldr	x1, [sp, #88]
  90:	ldr	x0, [sp, #40]
  94:	eor	x21, x1, x0
  98:	ldr	x0, [sp, #56]
  9c:	stp	x20, x21, [x0]
  a0:	ldr	x1, [sp, #104]
  a4:	ldr	x0, [sp, #56]
  a8:	bl	20 <protect_end>
  ac:	ldr	w0, [sp, #52]
  b0:	str	w0, [sp, #76]
  b4:	nop
  b8:	ldp	x0, x1, [sp, #80]
  bc:	ldp	x20, x21, [sp, #16]
  c0:	ldp	x29, x30, [sp], #112
  c4:	ret

00000000000000c8 <libat_xor_fetch_16_i1>:
  c8:	stp	x29, x30, [sp, #-96]!
  cc:	mov	x29, sp
  d0:	str	x0, [sp, #40]
  d4:	stp	x2, x3, [sp, #16]
  d8:	str	w4, [sp, #36]
  dc:	ldr	w0, [sp, #36]
  e0:	str	w0, [sp, #56]
  e4:	nop
  e8:	ldr	x0, [sp, #40]
  ec:	bl	0 <protect_start>
  f0:	str	x0, [sp, #88]
  f4:	ldr	x0, [sp, #40]
  f8:	ldp	x0, x1, [x0]
  fc:	ldr	x2, [sp, #16]
 100:	eor	x2, x2, x0
 104:	str	x2, [sp, #64]
 108:	ldr	x2, [sp, #24]
 10c:	eor	x0, x2, x1
 110:	str	x0, [sp, #72]
 114:	ldr	x2, [sp, #40]
 118:	ldp	x0, x1, [sp, #64]
 11c:	stp	x0, x1, [x2]
 120:	ldr	x1, [sp, #88]
 124:	ldr	x0, [sp, #40]
 128:	bl	20 <protect_end>
 12c:	ldr	w0, [sp, #36]
 130:	str	w0, [sp, #60]
 134:	nop
 138:	ldp	x0, x1, [sp, #64]
 13c:	ldp	x29, x30, [sp], #96
 140:	ret

fnand_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <protect_start>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <libat_lock_1>
  14:	mov	x0, #0x0                   	// #0
  18:	ldp	x29, x30, [sp], #32
  1c:	ret

0000000000000020 <protect_end>:
  20:	stp	x29, x30, [sp, #-32]!
  24:	mov	x29, sp
  28:	str	x0, [sp, #24]
  2c:	str	x1, [sp, #16]
  30:	ldr	x0, [sp, #24]
  34:	bl	0 <libat_unlock_1>
  38:	nop
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <libat_fetch_nand_16_i1>:
  44:	stp	x29, x30, [sp, #-128]!
  48:	mov	x29, sp
  4c:	stp	x20, x21, [sp, #16]
  50:	stp	x22, x23, [sp, #32]
  54:	str	x0, [sp, #72]
  58:	stp	x2, x3, [sp, #48]
  5c:	str	w4, [sp, #68]
  60:	ldr	w0, [sp, #68]
  64:	str	w0, [sp, #88]
  68:	nop
  6c:	ldr	x0, [sp, #72]
  70:	bl	0 <protect_start>
  74:	str	x0, [sp, #120]
  78:	ldr	x0, [sp, #72]
  7c:	ldp	x0, x1, [x0]
  80:	stp	x0, x1, [sp, #96]
  84:	ldr	x1, [sp, #96]
  88:	ldr	x0, [sp, #48]
  8c:	and	x20, x1, x0
  90:	ldr	x1, [sp, #104]
  94:	ldr	x0, [sp, #56]
  98:	and	x21, x1, x0
  9c:	mvn	x22, x20
  a0:	mvn	x23, x21
  a4:	ldr	x0, [sp, #72]
  a8:	stp	x22, x23, [x0]
  ac:	ldr	x1, [sp, #120]
  b0:	ldr	x0, [sp, #72]
  b4:	bl	20 <protect_end>
  b8:	ldr	w0, [sp, #68]
  bc:	str	w0, [sp, #92]
  c0:	nop
  c4:	ldp	x0, x1, [sp, #96]
  c8:	ldp	x20, x21, [sp, #16]
  cc:	ldp	x22, x23, [sp, #32]
  d0:	ldp	x29, x30, [sp], #128
  d4:	ret

00000000000000d8 <libat_nand_fetch_16_i1>:
  d8:	stp	x29, x30, [sp, #-112]!
  dc:	mov	x29, sp
  e0:	stp	x20, x21, [sp, #16]
  e4:	str	x0, [sp, #56]
  e8:	stp	x2, x3, [sp, #32]
  ec:	str	w4, [sp, #52]
  f0:	ldr	w0, [sp, #52]
  f4:	str	w0, [sp, #72]
  f8:	nop
  fc:	ldr	x0, [sp, #56]
 100:	bl	0 <protect_start>
 104:	str	x0, [sp, #104]
 108:	ldr	x0, [sp, #56]
 10c:	ldp	x0, x1, [x0]
 110:	ldr	x2, [sp, #32]
 114:	and	x20, x2, x0
 118:	ldr	x2, [sp, #40]
 11c:	and	x21, x2, x1
 120:	mvn	x0, x20
 124:	str	x0, [sp, #80]
 128:	mvn	x0, x21
 12c:	str	x0, [sp, #88]
 130:	ldr	x2, [sp, #56]
 134:	ldp	x0, x1, [sp, #80]
 138:	stp	x0, x1, [x2]
 13c:	ldr	x1, [sp, #104]
 140:	ldr	x0, [sp, #56]
 144:	bl	20 <protect_end>
 148:	ldr	w0, [sp, #52]
 14c:	str	w0, [sp, #76]
 150:	nop
 154:	ldp	x0, x1, [sp, #80]
 158:	ldp	x20, x21, [sp, #16]
 15c:	ldp	x29, x30, [sp], #112
 160:	ret

tas_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_16_i1>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	mov	w1, #0x1                   	// #1
  14:	swpalb	w1, w1, [x0]
  18:	and	w0, w1, #0xff
  1c:	add	sp, sp, #0x10
  20:	ret
