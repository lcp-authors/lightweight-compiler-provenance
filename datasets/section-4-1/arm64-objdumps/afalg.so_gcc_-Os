
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//afalg.so_gcc_-Os:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000001598 <.init>:
    1598:	stp	x29, x30, [sp, #-16]!
    159c:	mov	x29, sp
    15a0:	bl	1920 <ASYNC_WAIT_CTX_get_fd@plt+0x10>
    15a4:	ldp	x29, x30, [sp], #16
    15a8:	ret

Disassembly of section .plt:

00000000000015b0 <EVP_CIPHER_meth_new@plt-0x20>:
    15b0:	stp	x16, x30, [sp, #-16]!
    15b4:	adrp	x16, 13000 <bind_engine@@Base+0x10a74>
    15b8:	ldr	x17, [x16, #4088]
    15bc:	add	x16, x16, #0xff8
    15c0:	br	x17
    15c4:	nop
    15c8:	nop
    15cc:	nop

00000000000015d0 <EVP_CIPHER_meth_new@plt>:
    15d0:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    15d4:	ldr	x17, [x16]
    15d8:	add	x16, x16, #0x0
    15dc:	br	x17

00000000000015e0 <EVP_CIPHER_meth_set_cleanup@plt>:
    15e0:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    15e4:	ldr	x17, [x16, #8]
    15e8:	add	x16, x16, #0x8
    15ec:	br	x17

00000000000015f0 <EVP_CIPHER_CTX_iv_length@plt>:
    15f0:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    15f4:	ldr	x17, [x16, #16]
    15f8:	add	x16, x16, #0x10
    15fc:	br	x17

0000000000001600 <EVP_CIPHER_meth_set_iv_length@plt>:
    1600:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1604:	ldr	x17, [x16, #24]
    1608:	add	x16, x16, #0x18
    160c:	br	x17

0000000000001610 <EVP_CIPHER_CTX_get_cipher_data@plt>:
    1610:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1614:	ldr	x17, [x16, #32]
    1618:	add	x16, x16, #0x20
    161c:	br	x17

0000000000001620 <ENGINE_set_id@plt>:
    1620:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1624:	ldr	x17, [x16, #40]
    1628:	add	x16, x16, #0x28
    162c:	br	x17

0000000000001630 <EVP_CIPHER_CTX_key_length@plt>:
    1630:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1634:	ldr	x17, [x16, #48]
    1638:	add	x16, x16, #0x30
    163c:	br	x17

0000000000001640 <ENGINE_get_static_state@plt>:
    1640:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1644:	ldr	x17, [x16, #56]
    1648:	add	x16, x16, #0x38
    164c:	br	x17

0000000000001650 <strtok@plt>:
    1650:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1654:	ldr	x17, [x16, #64]
    1658:	add	x16, x16, #0x40
    165c:	br	x17

0000000000001660 <__gmon_start__@plt>:
    1660:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1664:	ldr	x17, [x16, #72]
    1668:	add	x16, x16, #0x48
    166c:	br	x17

0000000000001670 <atoi@plt>:
    1670:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1674:	ldr	x17, [x16, #80]
    1678:	add	x16, x16, #0x50
    167c:	br	x17

0000000000001680 <ASYNC_get_current_job@plt>:
    1680:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1684:	ldr	x17, [x16, #88]
    1688:	add	x16, x16, #0x58
    168c:	br	x17

0000000000001690 <socket@plt>:
    1690:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1694:	ldr	x17, [x16, #96]
    1698:	add	x16, x16, #0x60
    169c:	br	x17

00000000000016a0 <EVP_CIPHER_CTX_cipher@plt>:
    16a0:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    16a4:	ldr	x17, [x16, #104]
    16a8:	add	x16, x16, #0x68
    16ac:	br	x17

00000000000016b0 <fprintf@plt>:
    16b0:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    16b4:	ldr	x17, [x16, #112]
    16b8:	add	x16, x16, #0x70
    16bc:	br	x17

00000000000016c0 <__cmsg_nxthdr@plt>:
    16c0:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    16c4:	ldr	x17, [x16, #120]
    16c8:	add	x16, x16, #0x78
    16cc:	br	x17

00000000000016d0 <CRYPTO_set_mem_functions@plt>:
    16d0:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    16d4:	ldr	x17, [x16, #128]
    16d8:	add	x16, x16, #0x80
    16dc:	br	x17

00000000000016e0 <__cxa_finalize@plt>:
    16e0:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    16e4:	ldr	x17, [x16, #136]
    16e8:	add	x16, x16, #0x88
    16ec:	br	x17

00000000000016f0 <EVP_CIPHER_meth_set_init@plt>:
    16f0:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    16f4:	ldr	x17, [x16, #144]
    16f8:	add	x16, x16, #0x90
    16fc:	br	x17

0000000000001700 <ASYNC_WAIT_CTX_set_wait_fd@plt>:
    1700:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1704:	ldr	x17, [x16, #152]
    1708:	add	x16, x16, #0x98
    170c:	br	x17

0000000000001710 <ENGINE_set_destroy_function@plt>:
    1710:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1714:	ldr	x17, [x16, #160]
    1718:	add	x16, x16, #0xa0
    171c:	br	x17

0000000000001720 <ERR_get_next_error_library@plt>:
    1720:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1724:	ldr	x17, [x16, #168]
    1728:	add	x16, x16, #0xa8
    172c:	br	x17

0000000000001730 <uname@plt>:
    1730:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1734:	ldr	x17, [x16, #176]
    1738:	add	x16, x16, #0xb0
    173c:	br	x17

0000000000001740 <__errno_location@plt>:
    1740:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1744:	ldr	x17, [x16, #184]
    1748:	add	x16, x16, #0xb8
    174c:	br	x17

0000000000001750 <read@plt>:
    1750:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1754:	ldr	x17, [x16, #192]
    1758:	add	x16, x16, #0xc0
    175c:	br	x17

0000000000001760 <perror@plt>:
    1760:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1764:	ldr	x17, [x16, #200]
    1768:	add	x16, x16, #0xc8
    176c:	br	x17

0000000000001770 <syscall@plt>:
    1770:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1774:	ldr	x17, [x16, #208]
    1778:	add	x16, x16, #0xd0
    177c:	br	x17

0000000000001780 <ENGINE_set_name@plt>:
    1780:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1784:	ldr	x17, [x16, #216]
    1788:	add	x16, x16, #0xd8
    178c:	br	x17

0000000000001790 <ERR_unload_strings@plt>:
    1790:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1794:	ldr	x17, [x16, #224]
    1798:	add	x16, x16, #0xe0
    179c:	br	x17

00000000000017a0 <EVP_CIPHER_CTX_iv@plt>:
    17a0:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    17a4:	ldr	x17, [x16, #232]
    17a8:	add	x16, x16, #0xe8
    17ac:	br	x17

00000000000017b0 <ENGINE_set_init_function@plt>:
    17b0:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    17b4:	ldr	x17, [x16, #240]
    17b8:	add	x16, x16, #0xf0
    17bc:	br	x17

00000000000017c0 <bind@plt>:
    17c0:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    17c4:	ldr	x17, [x16, #248]
    17c8:	add	x16, x16, #0xf8
    17cc:	br	x17

00000000000017d0 <EVP_CIPHER_meth_free@plt>:
    17d0:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    17d4:	ldr	x17, [x16, #256]
    17d8:	add	x16, x16, #0x100
    17dc:	br	x17

00000000000017e0 <ASYNC_get_wait_ctx@plt>:
    17e0:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    17e4:	ldr	x17, [x16, #264]
    17e8:	add	x16, x16, #0x108
    17ec:	br	x17

00000000000017f0 <ERR_put_error@plt>:
    17f0:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    17f4:	ldr	x17, [x16, #272]
    17f8:	add	x16, x16, #0x110
    17fc:	br	x17

0000000000001800 <ERR_load_strings@plt>:
    1800:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1804:	ldr	x17, [x16, #280]
    1808:	add	x16, x16, #0x118
    180c:	br	x17

0000000000001810 <EVP_CIPHER_CTX_nid@plt>:
    1810:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1814:	ldr	x17, [x16, #288]
    1818:	add	x16, x16, #0x120
    181c:	br	x17

0000000000001820 <strcmp@plt>:
    1820:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1824:	ldr	x17, [x16, #296]
    1828:	add	x16, x16, #0x128
    182c:	br	x17

0000000000001830 <setsockopt@plt>:
    1830:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1834:	ldr	x17, [x16, #304]
    1838:	add	x16, x16, #0x130
    183c:	br	x17

0000000000001840 <EVP_CIPHER_meth_set_flags@plt>:
    1840:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1844:	ldr	x17, [x16, #312]
    1848:	add	x16, x16, #0x138
    184c:	br	x17

0000000000001850 <ENGINE_set_ciphers@plt>:
    1850:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1854:	ldr	x17, [x16, #320]
    1858:	add	x16, x16, #0x140
    185c:	br	x17

0000000000001860 <EVP_CIPHER_meth_set_do_cipher@plt>:
    1860:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1864:	ldr	x17, [x16, #328]
    1868:	add	x16, x16, #0x148
    186c:	br	x17

0000000000001870 <accept@plt>:
    1870:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1874:	ldr	x17, [x16, #336]
    1878:	add	x16, x16, #0x150
    187c:	br	x17

0000000000001880 <ENGINE_set_finish_function@plt>:
    1880:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1884:	ldr	x17, [x16, #344]
    1888:	add	x16, x16, #0x158
    188c:	br	x17

0000000000001890 <sendmsg@plt>:
    1890:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1894:	ldr	x17, [x16, #352]
    1898:	add	x16, x16, #0x160
    189c:	br	x17

00000000000018a0 <OPENSSL_strlcpy@plt>:
    18a0:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    18a4:	ldr	x17, [x16, #360]
    18a8:	add	x16, x16, #0x168
    18ac:	br	x17

00000000000018b0 <ASYNC_pause_job@plt>:
    18b0:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    18b4:	ldr	x17, [x16, #368]
    18b8:	add	x16, x16, #0x170
    18bc:	br	x17

00000000000018c0 <EVP_CIPHER_CTX_iv_noconst@plt>:
    18c0:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    18c4:	ldr	x17, [x16, #376]
    18c8:	add	x16, x16, #0x178
    18cc:	br	x17

00000000000018d0 <close@plt>:
    18d0:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    18d4:	ldr	x17, [x16, #384]
    18d8:	add	x16, x16, #0x180
    18dc:	br	x17

00000000000018e0 <EVP_CIPHER_meth_set_impl_ctx_size@plt>:
    18e0:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    18e4:	ldr	x17, [x16, #392]
    18e8:	add	x16, x16, #0x188
    18ec:	br	x17

00000000000018f0 <fcntl@plt>:
    18f0:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    18f4:	ldr	x17, [x16, #400]
    18f8:	add	x16, x16, #0x190
    18fc:	br	x17

0000000000001900 <EVP_CIPHER_CTX_encrypting@plt>:
    1900:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1904:	ldr	x17, [x16, #408]
    1908:	add	x16, x16, #0x198
    190c:	br	x17

0000000000001910 <ASYNC_WAIT_CTX_get_fd@plt>:
    1910:	adrp	x16, 14000 <EVP_CIPHER_meth_new@OPENSSL_1_1_0>
    1914:	ldr	x17, [x16, #416]
    1918:	add	x16, x16, #0x1a0
    191c:	br	x17

Disassembly of section .text:

0000000000001920 <v_check@@Base-0xc58>:
    1920:	adrp	x0, 13000 <bind_engine@@Base+0x10a74>
    1924:	ldr	x0, [x0, #4032]
    1928:	cbz	x0, 1930 <ASYNC_WAIT_CTX_get_fd@plt+0x20>
    192c:	b	1660 <__gmon_start__@plt>
    1930:	ret
    1934:	adrp	x0, 14000 <bind_engine@@Base+0x11a74>
    1938:	add	x0, x0, #0x330
    193c:	adrp	x1, 14000 <bind_engine@@Base+0x11a74>
    1940:	add	x1, x1, #0x330
    1944:	cmp	x1, x0
    1948:	b.eq	1960 <ASYNC_WAIT_CTX_get_fd@plt+0x50>  // b.none
    194c:	adrp	x1, 13000 <bind_engine@@Base+0x10a74>
    1950:	ldr	x1, [x1, #4048]
    1954:	cbz	x1, 1960 <ASYNC_WAIT_CTX_get_fd@plt+0x50>
    1958:	mov	x16, x1
    195c:	br	x16
    1960:	ret
    1964:	adrp	x0, 14000 <bind_engine@@Base+0x11a74>
    1968:	add	x0, x0, #0x330
    196c:	adrp	x1, 14000 <bind_engine@@Base+0x11a74>
    1970:	add	x1, x1, #0x330
    1974:	sub	x1, x1, x0
    1978:	mov	x2, #0x2                   	// #2
    197c:	asr	x1, x1, #3
    1980:	sdiv	x1, x1, x2
    1984:	cbz	x1, 199c <ASYNC_WAIT_CTX_get_fd@plt+0x8c>
    1988:	adrp	x2, 13000 <bind_engine@@Base+0x10a74>
    198c:	ldr	x2, [x2, #4056]
    1990:	cbz	x2, 199c <ASYNC_WAIT_CTX_get_fd@plt+0x8c>
    1994:	mov	x16, x2
    1998:	br	x16
    199c:	ret
    19a0:	adrp	x0, 14000 <bind_engine@@Base+0x11a74>
    19a4:	ldrb	w1, [x0, #816]
    19a8:	cbnz	w1, 19ec <ASYNC_WAIT_CTX_get_fd@plt+0xdc>
    19ac:	stp	x29, x30, [sp, #-32]!
    19b0:	mov	x29, sp
    19b4:	str	x19, [sp, #16]
    19b8:	mov	x19, x0
    19bc:	adrp	x0, 13000 <bind_engine@@Base+0x10a74>
    19c0:	ldr	x0, [x0, #4040]
    19c4:	cbz	x0, 19d4 <ASYNC_WAIT_CTX_get_fd@plt+0xc4>
    19c8:	adrp	x0, 14000 <bind_engine@@Base+0x11a74>
    19cc:	ldr	x0, [x0, #424]
    19d0:	bl	16e0 <__cxa_finalize@plt>
    19d4:	bl	1934 <ASYNC_WAIT_CTX_get_fd@plt+0x24>
    19d8:	mov	w0, #0x1                   	// #1
    19dc:	strb	w0, [x19, #816]
    19e0:	ldr	x19, [sp, #16]
    19e4:	ldp	x29, x30, [sp], #32
    19e8:	ret
    19ec:	ret
    19f0:	b	1964 <ASYNC_WAIT_CTX_get_fd@plt+0x54>
    19f4:	mov	w0, #0x1                   	// #1
    19f8:	ret
    19fc:	mov	w0, w2
    1a00:	b	18d0 <close@plt>
    1a04:	stp	x29, x30, [sp, #-48]!
    1a08:	mov	x29, sp
    1a0c:	stp	x19, x20, [sp, #16]
    1a10:	adrp	x20, 14000 <bind_engine@@Base+0x11a74>
    1a14:	ldr	w0, [x20, #820]
    1a18:	str	x21, [sp, #32]
    1a1c:	cbz	w0, 1a48 <ASYNC_WAIT_CTX_get_fd@plt+0x138>
    1a20:	add	x21, x20, #0x334
    1a24:	adrp	x19, 14000 <bind_engine@@Base+0x11a74>
    1a28:	add	x19, x19, #0x1f0
    1a2c:	mov	x1, x19
    1a30:	ldr	w0, [x21, #4]
    1a34:	bl	1790 <ERR_unload_strings@plt>
    1a38:	ldr	w0, [x21, #4]
    1a3c:	add	x1, x19, #0x70
    1a40:	bl	1790 <ERR_unload_strings@plt>
    1a44:	str	wzr, [x20, #820]
    1a48:	adrp	x19, 14000 <bind_engine@@Base+0x11a74>
    1a4c:	add	x19, x19, #0x1b0
    1a50:	ldr	x0, [x19, #8]
    1a54:	bl	17d0 <EVP_CIPHER_meth_free@plt>
    1a58:	str	xzr, [x19, #8]
    1a5c:	ldr	x0, [x19, #24]
    1a60:	bl	17d0 <EVP_CIPHER_meth_free@plt>
    1a64:	str	xzr, [x19, #24]
    1a68:	ldr	x0, [x19, #40]
    1a6c:	bl	17d0 <EVP_CIPHER_meth_free@plt>
    1a70:	ldr	x21, [sp, #32]
    1a74:	str	xzr, [x19, #40]
    1a78:	mov	w0, #0x1                   	// #1
    1a7c:	ldp	x19, x20, [sp, #16]
    1a80:	ldp	x29, x30, [sp], #48
    1a84:	ret
    1a88:	stp	x29, x30, [sp, #-32]!
    1a8c:	cmp	w0, #0x1a7
    1a90:	mov	x29, sp
    1a94:	str	x19, [sp, #16]
    1a98:	adrp	x19, 14000 <bind_engine@@Base+0x11a74>
    1a9c:	b.eq	1aec <ASYNC_WAIT_CTX_get_fd@plt+0x1dc>  // b.none
    1aa0:	cmp	w0, #0x1ab
    1aa4:	b.eq	1af8 <ASYNC_WAIT_CTX_get_fd@plt+0x1e8>  // b.none
    1aa8:	cmp	w0, #0x1a3
    1aac:	b.ne	1b70 <ASYNC_WAIT_CTX_get_fd@plt+0x260>  // b.any
    1ab0:	add	x19, x19, #0x1b0
    1ab4:	ldr	x1, [x19, #8]
    1ab8:	cbnz	x1, 1adc <ASYNC_WAIT_CTX_get_fd@plt+0x1cc>
    1abc:	ldr	w2, [x19]
    1ac0:	mov	w1, #0x10                  	// #16
    1ac4:	bl	15d0 <EVP_CIPHER_meth_new@plt>
    1ac8:	str	x0, [x19, #8]
    1acc:	cbnz	x0, 1b04 <ASYNC_WAIT_CTX_get_fd@plt+0x1f4>
    1ad0:	ldr	x0, [x19, #8]
    1ad4:	bl	17d0 <EVP_CIPHER_meth_free@plt>
    1ad8:	str	xzr, [x19, #8]
    1adc:	ldr	x0, [x19, #8]
    1ae0:	ldr	x19, [sp, #16]
    1ae4:	ldp	x29, x30, [sp], #32
    1ae8:	ret
    1aec:	add	x19, x19, #0x1b0
    1af0:	add	x19, x19, #0x10
    1af4:	b	1ab4 <ASYNC_WAIT_CTX_get_fd@plt+0x1a4>
    1af8:	add	x19, x19, #0x1b0
    1afc:	add	x19, x19, #0x20
    1b00:	b	1ab4 <ASYNC_WAIT_CTX_get_fd@plt+0x1a4>
    1b04:	mov	w1, #0x10                  	// #16
    1b08:	bl	1600 <EVP_CIPHER_meth_set_iv_length@plt>
    1b0c:	cbz	w0, 1ad0 <ASYNC_WAIT_CTX_get_fd@plt+0x1c0>
    1b10:	ldr	x0, [x19, #8]
    1b14:	mov	x1, #0x1002                	// #4098
    1b18:	bl	1840 <EVP_CIPHER_meth_set_flags@plt>
    1b1c:	cbz	w0, 1ad0 <ASYNC_WAIT_CTX_get_fd@plt+0x1c0>
    1b20:	ldr	x0, [x19, #8]
    1b24:	adrp	x1, 1000 <EVP_CIPHER_meth_new@plt-0x5d0>
    1b28:	add	x1, x1, #0xcdc
    1b2c:	bl	16f0 <EVP_CIPHER_meth_set_init@plt>
    1b30:	cbz	w0, 1ad0 <ASYNC_WAIT_CTX_get_fd@plt+0x1c0>
    1b34:	ldr	x0, [x19, #8]
    1b38:	adrp	x1, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    1b3c:	add	x1, x1, #0x10c
    1b40:	bl	1860 <EVP_CIPHER_meth_set_do_cipher@plt>
    1b44:	cbz	w0, 1ad0 <ASYNC_WAIT_CTX_get_fd@plt+0x1c0>
    1b48:	ldr	x0, [x19, #8]
    1b4c:	adrp	x1, 1000 <EVP_CIPHER_meth_new@plt-0x5d0>
    1b50:	add	x1, x1, #0xbf0
    1b54:	bl	15e0 <EVP_CIPHER_meth_set_cleanup@plt>
    1b58:	cbz	w0, 1ad0 <ASYNC_WAIT_CTX_get_fd@plt+0x1c0>
    1b5c:	ldr	x0, [x19, #8]
    1b60:	mov	w1, #0x80                  	// #128
    1b64:	bl	18e0 <EVP_CIPHER_meth_set_impl_ctx_size@plt>
    1b68:	cbz	w0, 1ad0 <ASYNC_WAIT_CTX_get_fd@plt+0x1c0>
    1b6c:	b	1adc <ASYNC_WAIT_CTX_get_fd@plt+0x1cc>
    1b70:	mov	x0, #0x0                   	// #0
    1b74:	ldr	x0, [x0, #8]
    1b78:	brk	#0x3e8
    1b7c:	cbnz	x1, 1b98 <ASYNC_WAIT_CTX_get_fd@plt+0x288>
    1b80:	adrp	x0, 14000 <bind_engine@@Base+0x11a74>
    1b84:	add	x0, x0, #0x1b0
    1b88:	add	x0, x0, #0x30
    1b8c:	str	x0, [x2]
    1b90:	mov	w0, #0x3                   	// #3
    1b94:	ret
    1b98:	stp	x29, x30, [sp, #-32]!
    1b9c:	mov	w0, w3
    1ba0:	mov	x29, sp
    1ba4:	stp	x19, x20, [sp, #16]
    1ba8:	mov	x20, x1
    1bac:	sub	w1, w3, #0x1a3
    1bb0:	cmp	w1, #0x8
    1bb4:	b.hi	1be4 <ASYNC_WAIT_CTX_get_fd@plt+0x2d4>  // b.pmore
    1bb8:	mov	x19, #0x1                   	// #1
    1bbc:	mov	x2, #0x111                 	// #273
    1bc0:	lsl	x1, x19, x1
    1bc4:	tst	x1, x2
    1bc8:	b.eq	1be4 <ASYNC_WAIT_CTX_get_fd@plt+0x2d4>  // b.none
    1bcc:	bl	1a88 <ASYNC_WAIT_CTX_get_fd@plt+0x178>
    1bd0:	str	x0, [x20]
    1bd4:	mov	w0, w19
    1bd8:	ldp	x19, x20, [sp, #16]
    1bdc:	ldp	x29, x30, [sp], #32
    1be0:	ret
    1be4:	mov	w0, #0x0                   	// #0
    1be8:	str	xzr, [x20]
    1bec:	b	1bd8 <ASYNC_WAIT_CTX_get_fd@plt+0x2c8>
    1bf0:	cbnz	x0, 1c0c <ASYNC_WAIT_CTX_get_fd@plt+0x2fc>
    1bf4:	mov	w0, #0x0                   	// #0
    1bf8:	ret
    1bfc:	mov	w0, #0x0                   	// #0
    1c00:	ldr	x19, [sp, #16]
    1c04:	ldp	x29, x30, [sp], #32
    1c08:	ret
    1c0c:	stp	x29, x30, [sp, #-32]!
    1c10:	mov	x29, sp
    1c14:	str	x19, [sp, #16]
    1c18:	bl	1610 <EVP_CIPHER_CTX_get_cipher_data@plt>
    1c1c:	mov	x19, x0
    1c20:	cbz	x0, 1bfc <ASYNC_WAIT_CTX_get_fd@plt+0x2ec>
    1c24:	ldr	w1, [x19]
    1c28:	mov	w0, #0x671                 	// #1649
    1c2c:	movk	w0, #0x189, lsl #16
    1c30:	cmp	w1, w0
    1c34:	b.ne	1bfc <ASYNC_WAIT_CTX_get_fd@plt+0x2ec>  // b.any
    1c38:	ldr	w0, [x19, #4]
    1c3c:	bl	18d0 <close@plt>
    1c40:	ldr	w0, [x19, #8]
    1c44:	bl	18d0 <close@plt>
    1c48:	ldr	w0, [x19, #20]
    1c4c:	cmp	w0, #0x1
    1c50:	b.ne	1c5c <ASYNC_WAIT_CTX_get_fd@plt+0x34c>  // b.any
    1c54:	ldr	w0, [x19, #16]
    1c58:	bl	18d0 <close@plt>
    1c5c:	ldr	x1, [x19, #24]
    1c60:	mov	x0, #0x1                   	// #1
    1c64:	bl	1770 <syscall@plt>
    1c68:	mov	w0, #0x1                   	// #1
    1c6c:	b	1c00 <ASYNC_WAIT_CTX_get_fd@plt+0x2f0>
    1c70:	stp	x29, x30, [sp, #-64]!
    1c74:	adrp	x3, 14000 <bind_engine@@Base+0x11a74>
    1c78:	mov	x29, sp
    1c7c:	str	x23, [sp, #48]
    1c80:	add	x23, x3, #0x334
    1c84:	stp	x19, x20, [sp, #16]
    1c88:	mov	w20, w0
    1c8c:	mov	x19, x3
    1c90:	ldr	w0, [x23, #4]
    1c94:	stp	x21, x22, [sp, #32]
    1c98:	mov	w21, w1
    1c9c:	mov	w22, w2
    1ca0:	cbnz	w0, 1cac <ASYNC_WAIT_CTX_get_fd@plt+0x39c>
    1ca4:	bl	1720 <ERR_get_next_error_library@plt>
    1ca8:	str	w0, [x23, #4]
    1cac:	add	x19, x19, #0x334
    1cb0:	mov	w4, w22
    1cb4:	mov	w2, w21
    1cb8:	mov	w1, w20
    1cbc:	ldp	x21, x22, [sp, #32]
    1cc0:	adrp	x3, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    1cc4:	ldr	w0, [x19, #4]
    1cc8:	add	x3, x3, #0x734
    1ccc:	ldp	x19, x20, [sp, #16]
    1cd0:	ldr	x23, [sp, #48]
    1cd4:	ldp	x29, x30, [sp], #64
    1cd8:	b	17f0 <ERR_put_error@plt>
    1cdc:	cmp	x0, #0x0
    1ce0:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    1ce4:	b.ne	1cf0 <ASYNC_WAIT_CTX_get_fd@plt+0x3e0>  // b.any
    1ce8:	mov	w0, #0x0                   	// #0
    1cec:	ret
    1cf0:	stp	x29, x30, [sp, #-160]!
    1cf4:	mov	x29, sp
    1cf8:	stp	x19, x20, [sp, #16]
    1cfc:	mov	x20, x0
    1d00:	stp	x21, x22, [sp, #32]
    1d04:	mov	x21, x1
    1d08:	str	x23, [sp, #48]
    1d0c:	bl	16a0 <EVP_CIPHER_CTX_cipher@plt>
    1d10:	cbz	x0, 1e28 <ASYNC_WAIT_CTX_get_fd@plt+0x518>
    1d14:	mov	x0, x20
    1d18:	bl	1610 <EVP_CIPHER_CTX_get_cipher_data@plt>
    1d1c:	mov	x19, x0
    1d20:	cbz	x0, 1e28 <ASYNC_WAIT_CTX_get_fd@plt+0x518>
    1d24:	mov	x0, x20
    1d28:	bl	1810 <EVP_CIPHER_CTX_nid@plt>
    1d2c:	sub	w0, w0, #0x1a3
    1d30:	cmp	w0, #0x8
    1d34:	b.hi	1e28 <ASYNC_WAIT_CTX_get_fd@plt+0x518>  // b.pmore
    1d38:	mov	x22, #0x1                   	// #1
    1d3c:	mov	x1, #0x111                 	// #273
    1d40:	lsl	x0, x22, x0
    1d44:	tst	x0, x1
    1d48:	b.eq	1e28 <ASYNC_WAIT_CTX_get_fd@plt+0x518>  // b.none
    1d4c:	mov	x0, x20
    1d50:	bl	15f0 <EVP_CIPHER_CTX_iv_length@plt>
    1d54:	cmp	w0, #0x10
    1d58:	b.ne	1e28 <ASYNC_WAIT_CTX_get_fd@plt+0x518>  // b.any
    1d5c:	mov	x0, #0xffffffffffffffff    	// #-1
    1d60:	stur	x0, [x19, #4]
    1d64:	add	x23, sp, #0x48
    1d68:	mov	w0, #0x26                  	// #38
    1d6c:	stp	xzr, xzr, [sp, #72]
    1d70:	mov	x2, #0xe                   	// #14
    1d74:	adrp	x1, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    1d78:	add	x1, x1, #0x746
    1d7c:	strh	w0, [sp, #72]
    1d80:	add	x0, x23, #0x2
    1d84:	stp	xzr, xzr, [sp, #88]
    1d88:	stp	xzr, xzr, [sp, #104]
    1d8c:	stp	xzr, xzr, [sp, #120]
    1d90:	stp	xzr, xzr, [sp, #136]
    1d94:	str	xzr, [sp, #152]
    1d98:	bl	18a0 <OPENSSL_strlcpy@plt>
    1d9c:	mov	x2, #0x40                  	// #64
    1da0:	add	x0, x23, #0x18
    1da4:	adrp	x1, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    1da8:	add	x1, x1, #0x74f
    1dac:	bl	18a0 <OPENSSL_strlcpy@plt>
    1db0:	mov	w2, #0x0                   	// #0
    1db4:	mov	w1, #0x5                   	// #5
    1db8:	mov	w0, #0x26                  	// #38
    1dbc:	bl	1690 <socket@plt>
    1dc0:	str	w0, [x19, #8]
    1dc4:	cmn	w0, #0x1
    1dc8:	b.ne	1e30 <ASYNC_WAIT_CTX_get_fd@plt+0x520>  // b.any
    1dcc:	adrp	x0, 13000 <bind_engine@@Base+0x10a74>
    1dd0:	adrp	x2, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    1dd4:	adrp	x1, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    1dd8:	add	x2, x2, #0x734
    1ddc:	ldr	x0, [x0, #4064]
    1de0:	add	x1, x1, #0x758
    1de4:	mov	w3, #0x178                 	// #376
    1de8:	ldr	x0, [x0]
    1dec:	bl	16b0 <fprintf@plt>
    1df0:	mov	x0, #0x0                   	// #0
    1df4:	bl	1760 <perror@plt>
    1df8:	mov	w2, #0x179                 	// #377
    1dfc:	mov	w1, #0x6d                  	// #109
    1e00:	mov	w0, #0x65                  	// #101
    1e04:	bl	1c70 <ASYNC_WAIT_CTX_get_fd@plt+0x360>
    1e08:	ldr	w0, [x19, #8]
    1e0c:	tbnz	w0, #31, 1e14 <ASYNC_WAIT_CTX_get_fd@plt+0x504>
    1e10:	bl	18d0 <close@plt>
    1e14:	ldr	w0, [x19, #4]
    1e18:	tbnz	w0, #31, 1e20 <ASYNC_WAIT_CTX_get_fd@plt+0x510>
    1e1c:	bl	18d0 <close@plt>
    1e20:	mov	x0, #0xffffffffffffffff    	// #-1
    1e24:	stur	x0, [x19, #4]
    1e28:	mov	w0, #0x0                   	// #0
    1e2c:	b	1fb8 <ASYNC_WAIT_CTX_get_fd@plt+0x6a8>
    1e30:	mov	x1, x23
    1e34:	mov	w2, #0x58                  	// #88
    1e38:	bl	17c0 <bind@plt>
    1e3c:	tbz	w0, #31, 1e78 <ASYNC_WAIT_CTX_get_fd@plt+0x568>
    1e40:	adrp	x0, 13000 <bind_engine@@Base+0x10a74>
    1e44:	adrp	x2, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    1e48:	adrp	x1, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    1e4c:	add	x2, x2, #0x734
    1e50:	ldr	x0, [x0, #4064]
    1e54:	add	x1, x1, #0x783
    1e58:	mov	w3, #0x17f                 	// #383
    1e5c:	ldr	x0, [x0]
    1e60:	bl	16b0 <fprintf@plt>
    1e64:	mov	x0, #0x0                   	// #0
    1e68:	bl	1760 <perror@plt>
    1e6c:	mov	w2, #0x180                 	// #384
    1e70:	mov	w1, #0x67                  	// #103
    1e74:	b	1e00 <ASYNC_WAIT_CTX_get_fd@plt+0x4f0>
    1e78:	ldr	w0, [x19, #8]
    1e7c:	mov	x2, #0x0                   	// #0
    1e80:	mov	x1, #0x0                   	// #0
    1e84:	bl	1870 <accept@plt>
    1e88:	str	w0, [x19, #4]
    1e8c:	tbnz	w0, #31, 1f04 <ASYNC_WAIT_CTX_get_fd@plt+0x5f4>
    1e90:	mov	x0, x20
    1e94:	bl	1630 <EVP_CIPHER_CTX_key_length@plt>
    1e98:	mov	w4, w0
    1e9c:	ldr	w0, [x19, #8]
    1ea0:	mov	x3, x21
    1ea4:	mov	w2, w22
    1ea8:	mov	w1, #0x117                 	// #279
    1eac:	bl	1830 <setsockopt@plt>
    1eb0:	tbz	w0, #31, 1f3c <ASYNC_WAIT_CTX_get_fd@plt+0x62c>
    1eb4:	adrp	x0, 13000 <bind_engine@@Base+0x10a74>
    1eb8:	adrp	x2, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    1ebc:	adrp	x1, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    1ec0:	add	x2, x2, #0x734
    1ec4:	ldr	x0, [x0, #4064]
    1ec8:	add	x1, x1, #0x7d8
    1ecc:	mov	w3, #0x162                 	// #354
    1ed0:	ldr	x0, [x0]
    1ed4:	bl	16b0 <fprintf@plt>
    1ed8:	mov	x0, #0x0                   	// #0
    1edc:	bl	1760 <perror@plt>
    1ee0:	mov	w2, #0x163                 	// #355
    1ee4:	mov	w1, #0x6a                  	// #106
    1ee8:	mov	w0, #0x68                  	// #104
    1eec:	bl	1c70 <ASYNC_WAIT_CTX_get_fd@plt+0x360>
    1ef0:	ldr	w0, [x19, #4]
    1ef4:	bl	18d0 <close@plt>
    1ef8:	ldr	w0, [x19, #8]
    1efc:	bl	18d0 <close@plt>
    1f00:	b	1e28 <ASYNC_WAIT_CTX_get_fd@plt+0x518>
    1f04:	adrp	x0, 13000 <bind_engine@@Base+0x10a74>
    1f08:	adrp	x2, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    1f0c:	adrp	x1, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    1f10:	add	x2, x2, #0x734
    1f14:	ldr	x0, [x0, #4064]
    1f18:	add	x1, x1, #0x7ae
    1f1c:	mov	w3, #0x186                 	// #390
    1f20:	ldr	x0, [x0]
    1f24:	bl	16b0 <fprintf@plt>
    1f28:	mov	x0, #0x0                   	// #0
    1f2c:	bl	1760 <perror@plt>
    1f30:	mov	w2, #0x187                 	// #391
    1f34:	mov	w1, #0x6e                  	// #110
    1f38:	b	1e00 <ASYNC_WAIT_CTX_get_fd@plt+0x4f0>
    1f3c:	str	xzr, [x19, #24]
    1f40:	add	x2, x19, #0x18
    1f44:	mov	w1, #0x1                   	// #1
    1f48:	mov	x0, #0x0                   	// #0
    1f4c:	bl	1770 <syscall@plt>
    1f50:	tbz	w0, #31, 1f90 <ASYNC_WAIT_CTX_get_fd@plt+0x680>
    1f54:	adrp	x0, 13000 <bind_engine@@Base+0x10a74>
    1f58:	adrp	x2, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    1f5c:	adrp	x1, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    1f60:	add	x2, x2, #0x734
    1f64:	ldr	x0, [x0, #4064]
    1f68:	add	x1, x1, #0x809
    1f6c:	mov	w3, #0xcc                  	// #204
    1f70:	ldr	x0, [x0]
    1f74:	bl	16b0 <fprintf@plt>
    1f78:	mov	x0, #0x0                   	// #0
    1f7c:	bl	1760 <perror@plt>
    1f80:	mov	w2, #0xcd                  	// #205
    1f84:	mov	w1, #0x69                  	// #105
    1f88:	mov	w0, #0x66                  	// #102
    1f8c:	b	1eec <ASYNC_WAIT_CTX_get_fd@plt+0x5dc>
    1f90:	mov	x0, #0xffffffff            	// #4294967295
    1f94:	str	x0, [x19, #16]
    1f98:	mov	w0, #0x671                 	// #1649
    1f9c:	stp	xzr, xzr, [x19, #64]
    1fa0:	movk	w0, #0x189, lsl #16
    1fa4:	str	w0, [x19]
    1fa8:	mov	w0, #0x1                   	// #1
    1fac:	stp	xzr, xzr, [x19, #80]
    1fb0:	stp	xzr, xzr, [x19, #96]
    1fb4:	stp	xzr, xzr, [x19, #112]
    1fb8:	ldp	x19, x20, [sp, #16]
    1fbc:	ldp	x21, x22, [sp, #32]
    1fc0:	ldr	x23, [sp, #48]
    1fc4:	ldp	x29, x30, [sp], #160
    1fc8:	ret
    1fcc:	stp	x29, x30, [sp, #-464]!
    1fd0:	mov	x0, #0xffffffffffffffff    	// #-1
    1fd4:	mov	x29, sp
    1fd8:	stp	x21, x22, [sp, #32]
    1fdc:	add	x21, sp, #0x48
    1fe0:	stp	x19, x20, [sp, #16]
    1fe4:	str	x0, [sp, #56]
    1fe8:	str	w0, [sp, #64]
    1fec:	mov	x0, x21
    1ff0:	bl	1730 <uname@plt>
    1ff4:	cbz	w0, 2020 <ASYNC_WAIT_CTX_get_fd@plt+0x710>
    1ff8:	mov	w19, #0x0                   	// #0
    1ffc:	mov	w2, #0x307                 	// #775
    2000:	mov	w1, #0x6f                  	// #111
    2004:	mov	w0, #0x64                  	// #100
    2008:	bl	1c70 <ASYNC_WAIT_CTX_get_fd@plt+0x360>
    200c:	mov	w0, w19
    2010:	ldp	x19, x20, [sp, #16]
    2014:	ldp	x21, x22, [sp, #32]
    2018:	ldp	x29, x30, [sp], #464
    201c:	ret
    2020:	add	x22, sp, #0x38
    2024:	mov	w19, w0
    2028:	add	x0, x21, #0x82
    202c:	mov	x21, #0x0                   	// #0
    2030:	adrp	x20, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    2034:	add	x20, x20, #0x82d
    2038:	mov	x1, x20
    203c:	bl	1650 <strtok@plt>
    2040:	cmp	x0, #0x0
    2044:	ccmp	w21, #0x2, #0x0, ne  // ne = any
    2048:	b.le	20b8 <ASYNC_WAIT_CTX_get_fd@plt+0x7a8>
    204c:	ldp	w2, w3, [sp, #56]
    2050:	mov	w1, #0xff                  	// #255
    2054:	ldr	w4, [sp, #64]
    2058:	movk	w1, #0x4, lsl #16
    205c:	lsl	w0, w3, #8
    2060:	add	w0, w0, w2, lsl #16
    2064:	add	w0, w0, w4
    2068:	cmp	w0, w1
    206c:	b.gt	20d4 <ASYNC_WAIT_CTX_get_fd@plt+0x7c4>
    2070:	adrp	x20, 13000 <bind_engine@@Base+0x10a74>
    2074:	adrp	x1, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    2078:	add	x1, x1, #0x82f
    207c:	ldr	x20, [x20, #4064]
    2080:	ldr	x0, [x20]
    2084:	bl	16b0 <fprintf@plt>
    2088:	ldr	x0, [x20]
    208c:	mov	w2, #0x4                   	// #4
    2090:	mov	w4, #0x0                   	// #0
    2094:	mov	w3, #0x1                   	// #1
    2098:	adrp	x1, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    209c:	add	x1, x1, #0x869
    20a0:	bl	16b0 <fprintf@plt>
    20a4:	mov	w2, #0x318                 	// #792
    20a8:	mov	w1, #0x6b                  	// #107
    20ac:	mov	w0, #0x64                  	// #100
    20b0:	bl	1c70 <ASYNC_WAIT_CTX_get_fd@plt+0x360>
    20b4:	b	200c <ASYNC_WAIT_CTX_get_fd@plt+0x6fc>
    20b8:	bl	1670 <atoi@plt>
    20bc:	str	w0, [x22, x21, lsl #2]
    20c0:	mov	x1, x20
    20c4:	mov	x0, #0x0                   	// #0
    20c8:	add	x21, x21, #0x1
    20cc:	bl	1650 <strtok@plt>
    20d0:	b	2040 <ASYNC_WAIT_CTX_get_fd@plt+0x730>
    20d4:	mov	w2, #0x0                   	// #0
    20d8:	mov	w1, #0x5                   	// #5
    20dc:	mov	w0, #0x26                  	// #38
    20e0:	bl	1690 <socket@plt>
    20e4:	cmn	w0, #0x1
    20e8:	b.ne	20f8 <ASYNC_WAIT_CTX_get_fd@plt+0x7e8>  // b.any
    20ec:	mov	w2, #0x320                 	// #800
    20f0:	mov	w1, #0x6d                  	// #109
    20f4:	b	20ac <ASYNC_WAIT_CTX_get_fd@plt+0x79c>
    20f8:	mov	w19, #0x1                   	// #1
    20fc:	bl	18d0 <close@plt>
    2100:	b	200c <ASYNC_WAIT_CTX_get_fd@plt+0x6fc>
    2104:	mov	w0, #0x1                   	// #1
    2108:	ret
    210c:	cmp	x0, #0x0
    2110:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    2114:	b.ne	2120 <ASYNC_WAIT_CTX_get_fd@plt+0x810>  // b.any
    2118:	mov	w0, #0x0                   	// #0
    211c:	ret
    2120:	stp	x29, x30, [sp, #-272]!
    2124:	mov	x29, sp
    2128:	stp	x19, x20, [sp, #16]
    212c:	stp	x21, x22, [sp, #32]
    2130:	mov	x22, x2
    2134:	stp	x23, x24, [sp, #48]
    2138:	stp	x25, x26, [sp, #64]
    213c:	stp	x27, x28, [sp, #80]
    2140:	cbz	x2, 2274 <ASYNC_WAIT_CTX_get_fd@plt+0x964>
    2144:	mov	x20, x0
    2148:	mov	x23, x1
    214c:	mov	x21, x3
    2150:	bl	1610 <EVP_CIPHER_CTX_get_cipher_data@plt>
    2154:	mov	x19, x0
    2158:	cbz	x0, 2274 <ASYNC_WAIT_CTX_get_fd@plt+0x964>
    215c:	ldr	w1, [x19]
    2160:	mov	w0, #0x671                 	// #1649
    2164:	movk	w0, #0x189, lsl #16
    2168:	cmp	w1, w0
    216c:	b.ne	2274 <ASYNC_WAIT_CTX_get_fd@plt+0x964>  // b.any
    2170:	mov	x0, x20
    2174:	bl	1900 <EVP_CIPHER_CTX_encrypting@plt>
    2178:	cbnz	w0, 2264 <ASYNC_WAIT_CTX_get_fd@plt+0x954>
    217c:	add	x0, x22, x21
    2180:	ldp	x0, x1, [x0, #-16]
    2184:	stp	x0, x1, [sp, #96]
    2188:	add	x24, sp, #0xd0
    218c:	mov	x0, x20
    2190:	bl	17a0 <EVP_CIPHER_CTX_iv@plt>
    2194:	mov	x25, x0
    2198:	mov	x0, x20
    219c:	bl	1900 <EVP_CIPHER_CTX_encrypting@plt>
    21a0:	stp	xzr, xzr, [sp, #224]
    21a4:	mov	x1, #0x40                  	// #64
    21a8:	stp	xzr, xzr, [x24, #32]
    21ac:	add	x26, sp, #0x98
    21b0:	add	x27, sp, #0x88
    21b4:	stp	xzr, xzr, [x24, #48]
    21b8:	stp	x24, x1, [sp, #184]
    21bc:	mov	x1, #0x14                  	// #20
    21c0:	str	x1, [sp, #208]
    21c4:	mov	x1, #0x117                 	// #279
    21c8:	movk	x1, #0x3, lsl #32
    21cc:	stp	xzr, xzr, [sp, #152]
    21d0:	stp	xzr, xzr, [sp, #168]
    21d4:	str	xzr, [sp, #200]
    21d8:	str	x1, [sp, #216]
    21dc:	mov	x1, x24
    21e0:	str	w0, [sp, #224]
    21e4:	mov	x0, x26
    21e8:	bl	16c0 <__cmsg_nxthdr@plt>
    21ec:	add	x0, x0, #0x14
    21f0:	mov	x1, #0x24                  	// #36
    21f4:	stur	x1, [x0, #-20]
    21f8:	mov	x1, #0x117                 	// #279
    21fc:	movk	x1, #0x2, lsl #32
    2200:	stur	x1, [x0, #-12]
    2204:	mov	w1, #0x10                  	// #16
    2208:	stur	w1, [x0, #-4]
    220c:	mov	x1, x26
    2210:	ldp	x2, x3, [x25]
    2214:	stp	x2, x3, [x0]
    2218:	mov	w0, #0x8000                	// #32768
    221c:	str	w0, [sp, #200]
    2220:	mov	x25, #0x1                   	// #1
    2224:	mov	w2, #0x0                   	// #0
    2228:	stp	x22, x21, [sp, #136]
    222c:	ldr	w0, [x19, #4]
    2230:	stp	x27, x25, [sp, #168]
    2234:	bl	1890 <sendmsg@plt>
    2238:	tbz	x0, #63, 226c <ASYNC_WAIT_CTX_get_fd@plt+0x95c>
    223c:	adrp	x2, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    2240:	adrp	x1, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    2244:	add	x2, x2, #0x734
    2248:	add	x1, x1, #0x8a9
    224c:	mov	w3, #0x1e0                 	// #480
    2250:	adrp	x0, 13000 <bind_engine@@Base+0x10a74>
    2254:	ldr	x0, [x0, #4064]
    2258:	ldr	x0, [x0]
    225c:	bl	16b0 <fprintf@plt>
    2260:	b	2518 <ASYNC_WAIT_CTX_get_fd@plt+0xc08>
    2264:	stp	xzr, xzr, [sp, #96]
    2268:	b	2188 <ASYNC_WAIT_CTX_get_fd@plt+0x878>
    226c:	cmp	x0, x21
    2270:	b.eq	2294 <ASYNC_WAIT_CTX_get_fd@plt+0x984>  // b.none
    2274:	mov	w0, #0x0                   	// #0
    2278:	ldp	x19, x20, [sp, #16]
    227c:	ldp	x21, x22, [sp, #32]
    2280:	ldp	x23, x24, [sp, #48]
    2284:	ldp	x25, x26, [sp, #64]
    2288:	ldp	x27, x28, [sp, #80]
    228c:	ldp	x29, x30, [sp], #272
    2290:	ret
    2294:	add	x22, x19, #0x10
    2298:	ldr	w0, [x19, #4]
    229c:	str	w0, [sp, #124]
    22a0:	str	xzr, [sp, #136]
    22a4:	ldr	w0, [x22, #4]
    22a8:	stp	xzr, xzr, [sp, #152]
    22ac:	cbnz	w0, 2384 <ASYNC_WAIT_CTX_get_fd@plt+0xa74>
    22b0:	str	xzr, [sp, #208]
    22b4:	bl	1680 <ASYNC_get_current_job@plt>
    22b8:	cbz	x0, 23ec <ASYNC_WAIT_CTX_get_fd@plt+0xadc>
    22bc:	bl	17e0 <ASYNC_get_wait_ctx@plt>
    22c0:	mov	x25, x0
    22c4:	cbz	x0, 2274 <ASYNC_WAIT_CTX_get_fd@plt+0x964>
    22c8:	adrp	x5, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    22cc:	add	x28, x5, #0xa51
    22d0:	mov	x3, x24
    22d4:	mov	x2, x22
    22d8:	mov	x1, x28
    22dc:	bl	1910 <ASYNC_WAIT_CTX_get_fd@plt>
    22e0:	cbnz	w0, 237c <ASYNC_WAIT_CTX_get_fd@plt+0xa6c>
    22e4:	mov	w2, #0x0                   	// #0
    22e8:	mov	w1, #0x0                   	// #0
    22ec:	mov	x0, #0x13                  	// #19
    22f0:	bl	1770 <syscall@plt>
    22f4:	str	w0, [x19, #16]
    22f8:	mov	x2, x0
    22fc:	cmn	w0, #0x1
    2300:	b.ne	2344 <ASYNC_WAIT_CTX_get_fd@plt+0xa34>  // b.any
    2304:	adrp	x0, 13000 <bind_engine@@Base+0x10a74>
    2308:	adrp	x2, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    230c:	adrp	x1, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    2310:	add	x2, x2, #0x734
    2314:	ldr	x0, [x0, #4064]
    2318:	add	x1, x1, #0x8e2
    231c:	mov	w3, #0xa2                  	// #162
    2320:	ldr	x0, [x0]
    2324:	bl	16b0 <fprintf@plt>
    2328:	mov	x0, #0x0                   	// #0
    232c:	bl	1760 <perror@plt>
    2330:	mov	w2, #0xa3                  	// #163
    2334:	mov	w1, #0x6c                  	// #108
    2338:	mov	w0, #0x67                  	// #103
    233c:	bl	1c70 <ASYNC_WAIT_CTX_get_fd@plt+0x360>
    2340:	b	2274 <ASYNC_WAIT_CTX_get_fd@plt+0x964>
    2344:	ldr	x3, [sp, #208]
    2348:	adrp	x4, 1000 <EVP_CIPHER_meth_new@plt-0x5d0>
    234c:	mov	x1, x28
    2350:	add	x4, x4, #0x9fc
    2354:	mov	x0, x25
    2358:	bl	1700 <ASYNC_WAIT_CTX_set_wait_fd@plt>
    235c:	cbnz	w0, 236c <ASYNC_WAIT_CTX_get_fd@plt+0xa5c>
    2360:	ldr	w0, [x19, #16]
    2364:	bl	18d0 <close@plt>
    2368:	b	2274 <ASYNC_WAIT_CTX_get_fd@plt+0x964>
    236c:	ldr	w0, [x19, #16]
    2370:	mov	w2, #0x800                 	// #2048
    2374:	mov	w1, #0x4                   	// #4
    2378:	bl	18f0 <fcntl@plt>
    237c:	mov	w0, #0x2                   	// #2
    2380:	str	w0, [x22, #4]
    2384:	ldr	w1, [sp, #124]
    2388:	add	x0, x19, #0x40
    238c:	stp	xzr, xzr, [x19, #80]
    2390:	add	x25, sp, #0x80
    2394:	mov	x3, x25
    2398:	str	x0, [sp, #128]
    239c:	mov	x2, #0x1                   	// #1
    23a0:	stp	xzr, xzr, [x19, #64]
    23a4:	mov	x0, #0x2                   	// #2
    23a8:	str	w1, [x19, #84]
    23ac:	mov	w1, #0x1                   	// #1
    23b0:	stp	xzr, xzr, [x19, #112]
    23b4:	str	w1, [x19, #120]
    23b8:	ldr	w1, [x19, #16]
    23bc:	str	w1, [x19, #124]
    23c0:	ldr	x1, [x22, #8]
    23c4:	stp	x23, x21, [x19, #88]
    23c8:	str	xzr, [x19, #104]
    23cc:	bl	1770 <syscall@plt>
    23d0:	tbz	w0, #31, 2488 <ASYNC_WAIT_CTX_get_fd@plt+0xb78>
    23d4:	adrp	x2, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    23d8:	adrp	x1, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    23dc:	add	x2, x2, #0x734
    23e0:	add	x1, x1, #0x90d
    23e4:	mov	w3, #0x102                 	// #258
    23e8:	b	2250 <ASYNC_WAIT_CTX_get_fd@plt+0x940>
    23ec:	mov	w2, #0x0                   	// #0
    23f0:	mov	w1, #0x0                   	// #0
    23f4:	mov	x0, #0x13                  	// #19
    23f8:	bl	1770 <syscall@plt>
    23fc:	str	w0, [x19, #16]
    2400:	cmn	w0, #0x1
    2404:	b.ne	243c <ASYNC_WAIT_CTX_get_fd@plt+0xb2c>  // b.any
    2408:	adrp	x0, 13000 <bind_engine@@Base+0x10a74>
    240c:	adrp	x2, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    2410:	adrp	x1, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    2414:	add	x2, x2, #0x734
    2418:	ldr	x0, [x0, #4064]
    241c:	add	x1, x1, #0x8e2
    2420:	mov	w3, #0xba                  	// #186
    2424:	ldr	x0, [x0]
    2428:	bl	16b0 <fprintf@plt>
    242c:	mov	x0, #0x0                   	// #0
    2430:	bl	1760 <perror@plt>
    2434:	mov	w2, #0xbb                  	// #187
    2438:	b	2334 <ASYNC_WAIT_CTX_get_fd@plt+0xa24>
    243c:	str	w25, [x22, #4]
    2440:	b	2384 <ASYNC_WAIT_CTX_get_fd@plt+0xa74>
    2444:	mov	w19, w28
    2448:	bl	18b0 <ASYNC_pause_job@plt>
    244c:	ldr	w0, [x22]
    2450:	mov	x1, x27
    2454:	mov	x2, #0x8                   	// #8
    2458:	bl	1750 <read@plt>
    245c:	tbz	w0, #31, 2490 <ASYNC_WAIT_CTX_get_fd@plt+0xb80>
    2460:	bl	1740 <__errno_location@plt>
    2464:	ldr	w0, [x0]
    2468:	cmp	w0, #0xb
    246c:	b.eq	2448 <ASYNC_WAIT_CTX_get_fd@plt+0xb38>  // b.none
    2470:	adrp	x2, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    2474:	adrp	x1, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    2478:	add	x2, x2, #0x734
    247c:	add	x1, x1, #0x931
    2480:	mov	w3, #0x10f                 	// #271
    2484:	b	2250 <ASYNC_WAIT_CTX_get_fd@plt+0x940>
    2488:	mov	w19, #0x0                   	// #0
    248c:	b	2448 <ASYNC_WAIT_CTX_get_fd@plt+0xb38>
    2490:	ldr	x0, [sp, #136]
    2494:	cbz	x0, 2448 <ASYNC_WAIT_CTX_get_fd@plt+0xb38>
    2498:	ldr	x1, [x22, #8]
    249c:	mov	x3, #0x1                   	// #1
    24a0:	mov	x5, x26
    24a4:	mov	x4, x24
    24a8:	mov	x2, x3
    24ac:	mov	x0, #0x4                   	// #4
    24b0:	bl	1770 <syscall@plt>
    24b4:	cmp	w0, #0x0
    24b8:	b.le	2524 <ASYNC_WAIT_CTX_get_fd@plt+0xc14>
    24bc:	ldr	x0, [sp, #224]
    24c0:	tbz	x0, #63, 255c <ASYNC_WAIT_CTX_get_fd@plt+0xc4c>
    24c4:	cmn	x0, #0x10
    24c8:	b.ne	2274 <ASYNC_WAIT_CTX_get_fd@plt+0x964>  // b.any
    24cc:	add	w28, w19, #0x1
    24d0:	cmp	w19, #0x2
    24d4:	b.gt	2274 <ASYNC_WAIT_CTX_get_fd@plt+0x964>
    24d8:	ldr	x1, [x22, #8]
    24dc:	mov	x3, x25
    24e0:	mov	x2, #0x1                   	// #1
    24e4:	mov	x0, #0x2                   	// #2
    24e8:	bl	1770 <syscall@plt>
    24ec:	tbz	w0, #31, 2444 <ASYNC_WAIT_CTX_get_fd@plt+0xb34>
    24f0:	adrp	x0, 13000 <bind_engine@@Base+0x10a74>
    24f4:	adrp	x2, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    24f8:	adrp	x1, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    24fc:	mov	w4, w28
    2500:	ldr	x0, [x0, #4064]
    2504:	add	x2, x2, #0x734
    2508:	add	x1, x1, #0x95f
    250c:	mov	w3, #0x128                 	// #296
    2510:	ldr	x0, [x0]
    2514:	bl	16b0 <fprintf@plt>
    2518:	mov	x0, #0x0                   	// #0
    251c:	bl	1760 <perror@plt>
    2520:	b	2274 <ASYNC_WAIT_CTX_get_fd@plt+0x964>
    2524:	b.eq	2448 <ASYNC_WAIT_CTX_get_fd@plt+0xb38>  // b.none
    2528:	adrp	x2, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    252c:	adrp	x1, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    2530:	add	x2, x2, #0x734
    2534:	add	x1, x1, #0x990
    2538:	mov	w3, #0x13a                 	// #314
    253c:	b	2250 <ASYNC_WAIT_CTX_get_fd@plt+0x940>
    2540:	add	x21, x23, x21
    2544:	mov	x0, x20
    2548:	bl	18c0 <EVP_CIPHER_CTX_iv_noconst@plt>
    254c:	ldp	x2, x3, [x21, #-16]
    2550:	stp	x2, x3, [x0]
    2554:	mov	w0, #0x1                   	// #1
    2558:	b	2278 <ASYNC_WAIT_CTX_get_fd@plt+0x968>
    255c:	mov	x0, x20
    2560:	bl	1900 <EVP_CIPHER_CTX_encrypting@plt>
    2564:	cbnz	w0, 2540 <ASYNC_WAIT_CTX_get_fd@plt+0xc30>
    2568:	mov	x0, x20
    256c:	bl	18c0 <EVP_CIPHER_CTX_iv_noconst@plt>
    2570:	ldp	x2, x3, [sp, #96]
    2574:	b	2550 <ASYNC_WAIT_CTX_get_fd@plt+0xc40>

0000000000002578 <v_check@@Base>:
    2578:	mov	w1, #0x2ffff               	// #196607
    257c:	cmp	x0, x1
    2580:	mov	x0, #0x30000               	// #196608
    2584:	csel	x0, x0, xzr, hi  // hi = pmore
    2588:	ret

000000000000258c <bind_engine@@Base>:
    258c:	stp	x29, x30, [sp, #-48]!
    2590:	mov	x29, sp
    2594:	stp	x19, x20, [sp, #16]
    2598:	mov	x20, x2
    259c:	mov	x19, x0
    25a0:	stp	x21, x22, [sp, #32]
    25a4:	mov	x21, x1
    25a8:	bl	1640 <ENGINE_get_static_state@plt>
    25ac:	ldr	x1, [x20]
    25b0:	cmp	x1, x0
    25b4:	b.eq	25c4 <bind_engine@@Base+0x38>  // b.none
    25b8:	ldp	x0, x1, [x20, #8]
    25bc:	ldr	x2, [x20, #24]
    25c0:	bl	16d0 <CRYPTO_set_mem_functions@plt>
    25c4:	cbz	x21, 25f4 <bind_engine@@Base+0x68>
    25c8:	adrp	x1, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    25cc:	mov	x0, x21
    25d0:	add	x1, x1, #0xa51
    25d4:	bl	1820 <strcmp@plt>
    25d8:	cbz	w0, 25f4 <bind_engine@@Base+0x68>
    25dc:	mov	w19, #0x0                   	// #0
    25e0:	mov	w0, w19
    25e4:	ldp	x19, x20, [sp, #16]
    25e8:	ldp	x21, x22, [sp, #32]
    25ec:	ldp	x29, x30, [sp], #48
    25f0:	ret
    25f4:	bl	1fcc <ASYNC_WAIT_CTX_get_fd@plt+0x6bc>
    25f8:	cbz	w0, 25dc <bind_engine@@Base+0x50>
    25fc:	adrp	x20, 14000 <bind_engine@@Base+0x11a74>
    2600:	add	x21, x20, #0x334
    2604:	ldr	w0, [x21, #4]
    2608:	cbnz	w0, 2614 <bind_engine@@Base+0x88>
    260c:	bl	1720 <ERR_get_next_error_library@plt>
    2610:	str	w0, [x21, #4]
    2614:	ldr	w0, [x20, #820]
    2618:	add	x22, x20, #0x334
    261c:	cbnz	w0, 2648 <bind_engine@@Base+0xbc>
    2620:	ldr	w0, [x22, #4]
    2624:	adrp	x21, 14000 <bind_engine@@Base+0x11a74>
    2628:	add	x21, x21, #0x1f0
    262c:	mov	x1, x21
    2630:	bl	1800 <ERR_load_strings@plt>
    2634:	ldr	w0, [x22, #4]
    2638:	add	x1, x21, #0x70
    263c:	bl	1800 <ERR_load_strings@plt>
    2640:	mov	w0, #0x1                   	// #1
    2644:	str	w0, [x20, #820]
    2648:	adrp	x1, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    264c:	mov	x0, x19
    2650:	add	x1, x1, #0xa51
    2654:	bl	1620 <ENGINE_set_id@plt>
    2658:	cbnz	w0, 2670 <bind_engine@@Base+0xe4>
    265c:	mov	w2, #0x2d2                 	// #722
    2660:	mov	w1, #0x64                  	// #100
    2664:	mov	w0, #0x69                  	// #105
    2668:	bl	1c70 <ASYNC_WAIT_CTX_get_fd@plt+0x360>
    266c:	b	25dc <bind_engine@@Base+0x50>
    2670:	adrp	x1, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    2674:	mov	x0, x19
    2678:	add	x1, x1, #0x9b9
    267c:	bl	1780 <ENGINE_set_name@plt>
    2680:	cbz	w0, 265c <bind_engine@@Base+0xd0>
    2684:	adrp	x1, 1000 <EVP_CIPHER_meth_new@plt-0x5d0>
    2688:	mov	x0, x19
    268c:	add	x1, x1, #0xa04
    2690:	bl	1710 <ENGINE_set_destroy_function@plt>
    2694:	cbz	w0, 265c <bind_engine@@Base+0xd0>
    2698:	adrp	x1, 1000 <EVP_CIPHER_meth_new@plt-0x5d0>
    269c:	mov	x0, x19
    26a0:	add	x1, x1, #0x9f4
    26a4:	bl	17b0 <ENGINE_set_init_function@plt>
    26a8:	cbz	w0, 265c <bind_engine@@Base+0xd0>
    26ac:	adrp	x1, 2000 <ASYNC_WAIT_CTX_get_fd@plt+0x6f0>
    26b0:	mov	x0, x19
    26b4:	add	x1, x1, #0x104
    26b8:	bl	1880 <ENGINE_set_finish_function@plt>
    26bc:	cbz	w0, 265c <bind_engine@@Base+0xd0>
    26c0:	adrp	x20, 14000 <bind_engine@@Base+0x11a74>
    26c4:	add	x20, x20, #0x1b0
    26c8:	add	x20, x20, #0x30
    26cc:	mov	x21, #0x0                   	// #0
    26d0:	ldr	w0, [x20, x21, lsl #2]
    26d4:	bl	1a88 <ASYNC_WAIT_CTX_get_fd@plt+0x178>
    26d8:	cbnz	x0, 26e4 <bind_engine@@Base+0x158>
    26dc:	mov	w2, #0x2dd                 	// #733
    26e0:	b	2660 <bind_engine@@Base+0xd4>
    26e4:	add	x21, x21, #0x1
    26e8:	cmp	x21, #0x3
    26ec:	b.ne	26d0 <bind_engine@@Base+0x144>  // b.any
    26f0:	mov	x0, x19
    26f4:	adrp	x1, 1000 <EVP_CIPHER_meth_new@plt-0x5d0>
    26f8:	add	x1, x1, #0xb7c
    26fc:	bl	1850 <ENGINE_set_ciphers@plt>
    2700:	mov	w19, w0
    2704:	cbnz	w0, 271c <bind_engine@@Base+0x190>
    2708:	mov	w2, #0x2e3                 	// #739
    270c:	mov	w1, #0x64                  	// #100
    2710:	mov	w0, #0x69                  	// #105
    2714:	bl	1c70 <ASYNC_WAIT_CTX_get_fd@plt+0x360>
    2718:	b	25e0 <bind_engine@@Base+0x54>
    271c:	mov	w19, #0x1                   	// #1
    2720:	b	25e0 <bind_engine@@Base+0x54>

Disassembly of section .fini:

0000000000002724 <.fini>:
    2724:	stp	x29, x30, [sp, #-16]!
    2728:	mov	x29, sp
    272c:	ldp	x29, x30, [sp], #16
    2730:	ret
