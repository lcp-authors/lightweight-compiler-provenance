
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libgcc_s.so.1_clang_-O1:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000002a68 <.init>:
    2a68:	stp	x29, x30, [sp, #-16]!
    2a6c:	mov	x29, sp
    2a70:	bl	2db0 <_Unwind_GetDataRelBase@plt+0x10>
    2a74:	ldp	x29, x30, [sp], #16
    2a78:	ret

Disassembly of section .plt:

0000000000002a80 <memcpy@plt-0x20>:
    2a80:	stp	x16, x30, [sp, #-16]!
    2a84:	adrp	x16, 23000 <__emutls_register_common@@GCC_4.3.0+0x127e0>
    2a88:	ldr	x17, [x16, #4088]
    2a8c:	add	x16, x16, #0xff8
    2a90:	br	x17
    2a94:	nop
    2a98:	nop
    2a9c:	nop

0000000000002aa0 <memcpy@plt>:
    2aa0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2aa4:	ldr	x17, [x16]
    2aa8:	add	x16, x16, #0x0
    2aac:	br	x17

0000000000002ab0 <_Unwind_GetRegionStart@plt>:
    2ab0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2ab4:	ldr	x17, [x16, #8]
    2ab8:	add	x16, x16, #0x8
    2abc:	br	x17

0000000000002ac0 <strlen@plt>:
    2ac0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2ac4:	ldr	x17, [x16, #16]
    2ac8:	add	x16, x16, #0x10
    2acc:	br	x17

0000000000002ad0 <_Unwind_RaiseException@plt>:
    2ad0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2ad4:	ldr	x17, [x16, #24]
    2ad8:	add	x16, x16, #0x18
    2adc:	br	x17

0000000000002ae0 <_Unwind_SetIP@plt>:
    2ae0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2ae4:	ldr	x17, [x16, #32]
    2ae8:	add	x16, x16, #0x20
    2aec:	br	x17

0000000000002af0 <_Unwind_GetLanguageSpecificData@plt>:
    2af0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2af4:	ldr	x17, [x16, #40]
    2af8:	add	x16, x16, #0x28
    2afc:	br	x17

0000000000002b00 <__floatunditf@plt>:
    2b00:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2b04:	ldr	x17, [x16, #48]
    2b08:	add	x16, x16, #0x30
    2b0c:	br	x17

0000000000002b10 <__multf3@plt>:
    2b10:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2b14:	ldr	x17, [x16, #56]
    2b18:	add	x16, x16, #0x38
    2b1c:	br	x17

0000000000002b20 <__cxa_finalize@plt>:
    2b20:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2b24:	ldr	x17, [x16, #64]
    2b28:	add	x16, x16, #0x40
    2b2c:	br	x17

0000000000002b30 <__eqtf2@plt>:
    2b30:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2b34:	ldr	x17, [x16, #72]
    2b38:	add	x16, x16, #0x48
    2b3c:	br	x17

0000000000002b40 <__floatditf@plt>:
    2b40:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2b44:	ldr	x17, [x16, #80]
    2b48:	add	x16, x16, #0x50
    2b4c:	br	x17

0000000000002b50 <_Unwind_GetTextRelBase@plt>:
    2b50:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2b54:	ldr	x17, [x16, #88]
    2b58:	add	x16, x16, #0x58
    2b5c:	br	x17

0000000000002b60 <__deregister_frame_info_bases@plt>:
    2b60:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2b64:	ldr	x17, [x16, #96]
    2b68:	add	x16, x16, #0x60
    2b6c:	br	x17

0000000000002b70 <malloc@plt>:
    2b70:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2b74:	ldr	x17, [x16, #104]
    2b78:	add	x16, x16, #0x68
    2b7c:	br	x17

0000000000002b80 <pthread_getspecific@plt>:
    2b80:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2b84:	ldr	x17, [x16, #112]
    2b88:	add	x16, x16, #0x70
    2b8c:	br	x17

0000000000002b90 <_Unwind_GetCFA@plt>:
    2b90:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2b94:	ldr	x17, [x16, #120]
    2b98:	add	x16, x16, #0x78
    2b9c:	br	x17

0000000000002ba0 <memset@plt>:
    2ba0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2ba4:	ldr	x17, [x16, #128]
    2ba8:	add	x16, x16, #0x80
    2bac:	br	x17

0000000000002bb0 <__fixunssfti@plt>:
    2bb0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2bb4:	ldr	x17, [x16, #136]
    2bb8:	add	x16, x16, #0x88
    2bbc:	br	x17

0000000000002bc0 <__letf2@plt>:
    2bc0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2bc4:	ldr	x17, [x16, #144]
    2bc8:	add	x16, x16, #0x90
    2bcc:	br	x17

0000000000002bd0 <__register_frame_info_table_bases@plt>:
    2bd0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2bd4:	ldr	x17, [x16, #152]
    2bd8:	add	x16, x16, #0x98
    2bdc:	br	x17

0000000000002be0 <calloc@plt>:
    2be0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2be4:	ldr	x17, [x16, #160]
    2be8:	add	x16, x16, #0xa0
    2bec:	br	x17

0000000000002bf0 <__gttf2@plt>:
    2bf0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2bf4:	ldr	x17, [x16, #168]
    2bf8:	add	x16, x16, #0xa8
    2bfc:	br	x17

0000000000002c00 <_Unwind_GetIPInfo@plt>:
    2c00:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2c04:	ldr	x17, [x16, #176]
    2c08:	add	x16, x16, #0xb0
    2c0c:	br	x17

0000000000002c10 <realloc@plt>:
    2c10:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2c14:	ldr	x17, [x16, #184]
    2c18:	add	x16, x16, #0xb8
    2c1c:	br	x17

0000000000002c20 <__addtf3@plt>:
    2c20:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2c24:	ldr	x17, [x16, #192]
    2c28:	add	x16, x16, #0xc0
    2c2c:	br	x17

0000000000002c30 <pthread_key_create@plt>:
    2c30:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2c34:	ldr	x17, [x16, #200]
    2c38:	add	x16, x16, #0xc8
    2c3c:	br	x17

0000000000002c40 <__gmon_start__@plt>:
    2c40:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2c44:	ldr	x17, [x16, #208]
    2c48:	add	x16, x16, #0xd0
    2c4c:	br	x17

0000000000002c50 <abort@plt>:
    2c50:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2c54:	ldr	x17, [x16, #216]
    2c58:	add	x16, x16, #0xd8
    2c5c:	br	x17

0000000000002c60 <__divtf3@plt>:
    2c60:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2c64:	ldr	x17, [x16, #224]
    2c68:	add	x16, x16, #0xe0
    2c6c:	br	x17

0000000000002c70 <pthread_once@plt>:
    2c70:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2c74:	ldr	x17, [x16, #232]
    2c78:	add	x16, x16, #0xe8
    2c7c:	br	x17

0000000000002c80 <dl_iterate_phdr@plt>:
    2c80:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2c84:	ldr	x17, [x16, #240]
    2c88:	add	x16, x16, #0xf0
    2c8c:	br	x17

0000000000002c90 <__trunctfdf2@plt>:
    2c90:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2c94:	ldr	x17, [x16, #248]
    2c98:	add	x16, x16, #0xf8
    2c9c:	br	x17

0000000000002ca0 <pthread_setspecific@plt>:
    2ca0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2ca4:	ldr	x17, [x16, #256]
    2ca8:	add	x16, x16, #0x100
    2cac:	br	x17

0000000000002cb0 <_Unwind_Find_FDE@plt>:
    2cb0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2cb4:	ldr	x17, [x16, #264]
    2cb8:	add	x16, x16, #0x108
    2cbc:	br	x17

0000000000002cc0 <free@plt>:
    2cc0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2cc4:	ldr	x17, [x16, #272]
    2cc8:	add	x16, x16, #0x110
    2ccc:	br	x17

0000000000002cd0 <__register_frame_info_table@plt>:
    2cd0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2cd4:	ldr	x17, [x16, #280]
    2cd8:	add	x16, x16, #0x118
    2cdc:	br	x17

0000000000002ce0 <__deregister_frame_info@plt>:
    2ce0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2ce4:	ldr	x17, [x16, #288]
    2ce8:	add	x16, x16, #0x120
    2cec:	br	x17

0000000000002cf0 <__lttf2@plt>:
    2cf0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2cf4:	ldr	x17, [x16, #296]
    2cf8:	add	x16, x16, #0x128
    2cfc:	br	x17

0000000000002d00 <__register_frame_info@plt>:
    2d00:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2d04:	ldr	x17, [x16, #304]
    2d08:	add	x16, x16, #0x130
    2d0c:	br	x17

0000000000002d10 <__register_frame_info_bases@plt>:
    2d10:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2d14:	ldr	x17, [x16, #312]
    2d18:	add	x16, x16, #0x138
    2d1c:	br	x17

0000000000002d20 <__fixunsdfti@plt>:
    2d20:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2d24:	ldr	x17, [x16, #320]
    2d28:	add	x16, x16, #0x140
    2d2c:	br	x17

0000000000002d30 <__unordtf2@plt>:
    2d30:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2d34:	ldr	x17, [x16, #328]
    2d38:	add	x16, x16, #0x148
    2d3c:	br	x17

0000000000002d40 <_Unwind_SetGR@plt>:
    2d40:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2d44:	ldr	x17, [x16, #336]
    2d48:	add	x16, x16, #0x150
    2d4c:	br	x17

0000000000002d50 <pthread_mutex_lock@plt>:
    2d50:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2d54:	ldr	x17, [x16, #344]
    2d58:	add	x16, x16, #0x158
    2d5c:	br	x17

0000000000002d60 <pthread_mutex_unlock@plt>:
    2d60:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2d64:	ldr	x17, [x16, #352]
    2d68:	add	x16, x16, #0x160
    2d6c:	br	x17

0000000000002d70 <__floatsitf@plt>:
    2d70:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2d74:	ldr	x17, [x16, #360]
    2d78:	add	x16, x16, #0x168
    2d7c:	br	x17

0000000000002d80 <__subtf3@plt>:
    2d80:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2d84:	ldr	x17, [x16, #368]
    2d88:	add	x16, x16, #0x170
    2d8c:	br	x17

0000000000002d90 <__trunctfsf2@plt>:
    2d90:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2d94:	ldr	x17, [x16, #376]
    2d98:	add	x16, x16, #0x178
    2d9c:	br	x17

0000000000002da0 <_Unwind_GetDataRelBase@plt>:
    2da0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2da4:	ldr	x17, [x16, #384]
    2da8:	add	x16, x16, #0x180
    2dac:	br	x17

Disassembly of section .text:

0000000000002db0 <__multi3@@GCC_3.0-0x108>:
    2db0:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x127e0>
    2db4:	ldr	x0, [x0, #4056]
    2db8:	cbz	x0, 2dc0 <_Unwind_GetDataRelBase@plt+0x20>
    2dbc:	b	2c40 <__gmon_start__@plt>
    2dc0:	ret
    2dc4:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    2dc8:	add	x0, x0, #0x198
    2dcc:	adrp	x1, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    2dd0:	add	x1, x1, #0x198
    2dd4:	cmp	x0, x1
    2dd8:	b.eq	2e04 <_Unwind_GetDataRelBase@plt+0x64>  // b.none
    2ddc:	adrp	x1, 23000 <__emutls_register_common@@GCC_4.3.0+0x127e0>
    2de0:	ldr	x1, [x1, #4040]
    2de4:	cbz	x1, 2e04 <_Unwind_GetDataRelBase@plt+0x64>
    2de8:	stp	x29, x30, [sp, #-16]!
    2dec:	mov	x29, sp
    2df0:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    2df4:	add	x0, x0, #0x198
    2df8:	blr	x1
    2dfc:	ldp	x29, x30, [sp], #16
    2e00:	ret
    2e04:	ret
    2e08:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    2e0c:	add	x0, x0, #0x198
    2e10:	adrp	x1, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    2e14:	add	x1, x1, #0x198
    2e18:	sub	x0, x0, x1
    2e1c:	lsr	x1, x0, #63
    2e20:	add	x0, x1, x0, asr #3
    2e24:	cmp	xzr, x0, asr #1
    2e28:	b.eq	2e58 <_Unwind_GetDataRelBase@plt+0xb8>  // b.none
    2e2c:	asr	x1, x0, #1
    2e30:	adrp	x2, 23000 <__emutls_register_common@@GCC_4.3.0+0x127e0>
    2e34:	ldr	x2, [x2, #4064]
    2e38:	cbz	x2, 2e58 <_Unwind_GetDataRelBase@plt+0xb8>
    2e3c:	stp	x29, x30, [sp, #-16]!
    2e40:	mov	x29, sp
    2e44:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    2e48:	add	x0, x0, #0x198
    2e4c:	blr	x2
    2e50:	ldp	x29, x30, [sp], #16
    2e54:	ret
    2e58:	ret
    2e5c:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    2e60:	ldrb	w0, [x0, #408]
    2e64:	cbnz	w0, 2ea0 <_Unwind_GetDataRelBase@plt+0x100>
    2e68:	stp	x29, x30, [sp, #-16]!
    2e6c:	mov	x29, sp
    2e70:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x127e0>
    2e74:	ldr	x0, [x0, #4048]
    2e78:	cbz	x0, 2e88 <_Unwind_GetDataRelBase@plt+0xe8>
    2e7c:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    2e80:	ldr	x0, [x0, #392]
    2e84:	bl	2b20 <__cxa_finalize@plt>
    2e88:	bl	2dc4 <_Unwind_GetDataRelBase@plt+0x24>
    2e8c:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    2e90:	mov	w1, #0x1                   	// #1
    2e94:	strb	w1, [x0, #408]
    2e98:	ldp	x29, x30, [sp], #16
    2e9c:	ret
    2ea0:	ret
    2ea4:	stp	x29, x30, [sp, #-16]!
    2ea8:	mov	x29, sp
    2eac:	bl	2e08 <_Unwind_GetDataRelBase@plt+0x68>
    2eb0:	ldp	x29, x30, [sp], #16
    2eb4:	ret

0000000000002eb8 <__multi3@@GCC_3.0>:
    2eb8:	and	x5, x0, #0xffffffff
    2ebc:	lsr	x4, x0, #32
    2ec0:	and	x6, x2, #0xffffffff
    2ec4:	lsr	x8, x2, #32
    2ec8:	mul	x7, x5, x6
    2ecc:	mul	x6, x4, x6
    2ed0:	mul	x4, x4, x8
    2ed4:	madd	x5, x5, x8, x6
    2ed8:	add	x5, x5, x7, lsr #32
    2edc:	mov	x8, #0x100000000           	// #4294967296
    2ee0:	add	x8, x4, x8
    2ee4:	cmp	x6, x5
    2ee8:	csel	x4, x8, x4, hi  // hi = pmore
    2eec:	add	x4, x4, x5, lsr #32
    2ef0:	and	x7, x7, #0xffffffff
    2ef4:	madd	x4, x0, x3, x4
    2ef8:	add	x0, x7, x5, lsl #32
    2efc:	madd	x1, x2, x1, x4
    2f00:	ret

0000000000002f04 <__negti2@@GCC_3.0>:
    2f04:	neg	x1, x1
    2f08:	cmp	x0, #0x0
    2f0c:	cset	x2, ne  // ne = any
    2f10:	neg	x0, x0
    2f14:	sub	x1, x1, x2
    2f18:	ret

0000000000002f1c <__lshrti3@@GCC_3.0>:
    2f1c:	cbz	x2, 2f44 <__lshrti3@@GCC_3.0+0x28>
    2f20:	mov	x3, #0x40                  	// #64
    2f24:	sub	x3, x3, x2
    2f28:	cmp	x3, #0x0
    2f2c:	b.le	2f48 <__lshrti3@@GCC_3.0+0x2c>
    2f30:	lsr	x4, x1, x2
    2f34:	lsr	x0, x0, x2
    2f38:	lsl	x2, x1, x3
    2f3c:	orr	x0, x0, x2
    2f40:	mov	x1, x4
    2f44:	ret
    2f48:	mov	x4, #0x0                   	// #0
    2f4c:	neg	w2, w3
    2f50:	lsr	x0, x1, x2
    2f54:	b	2f40 <__lshrti3@@GCC_3.0+0x24>

0000000000002f58 <__ashlti3@@GCC_3.0>:
    2f58:	cbz	x2, 2f80 <__ashlti3@@GCC_3.0+0x28>
    2f5c:	mov	x3, #0x40                  	// #64
    2f60:	sub	x3, x3, x2
    2f64:	cmp	x3, #0x0
    2f68:	b.le	2f84 <__ashlti3@@GCC_3.0+0x2c>
    2f6c:	lsl	x4, x0, x2
    2f70:	lsl	x1, x1, x2
    2f74:	lsr	x2, x0, x3
    2f78:	orr	x1, x1, x2
    2f7c:	mov	x0, x4
    2f80:	ret
    2f84:	mov	x4, #0x0                   	// #0
    2f88:	neg	w2, w3
    2f8c:	lsl	x1, x0, x2
    2f90:	b	2f7c <__ashlti3@@GCC_3.0+0x24>

0000000000002f94 <__ashrti3@@GCC_3.0>:
    2f94:	cbz	x2, 2fbc <__ashrti3@@GCC_3.0+0x28>
    2f98:	mov	x3, #0x40                  	// #64
    2f9c:	sub	x3, x3, x2
    2fa0:	cmp	x3, #0x0
    2fa4:	b.le	2fc0 <__ashrti3@@GCC_3.0+0x2c>
    2fa8:	asr	x4, x1, x2
    2fac:	lsr	x0, x0, x2
    2fb0:	lsl	x2, x1, x3
    2fb4:	orr	x0, x0, x2
    2fb8:	mov	x1, x4
    2fbc:	ret
    2fc0:	asr	x4, x1, #63
    2fc4:	neg	w2, w3
    2fc8:	asr	x0, x1, x2
    2fcc:	b	2fb8 <__ashrti3@@GCC_3.0+0x24>

0000000000002fd0 <__cmpti2@@GCC_3.0>:
    2fd0:	mov	x4, x0
    2fd4:	mov	w0, #0x0                   	// #0
    2fd8:	cmp	x1, x3
    2fdc:	b.lt	2ffc <__cmpti2@@GCC_3.0+0x2c>  // b.tstop
    2fe0:	mov	w0, #0x2                   	// #2
    2fe4:	b.gt	2ffc <__cmpti2@@GCC_3.0+0x2c>
    2fe8:	mov	w0, #0x0                   	// #0
    2fec:	cmp	x4, x2
    2ff0:	b.cc	2ffc <__cmpti2@@GCC_3.0+0x2c>  // b.lo, b.ul, b.last
    2ff4:	cset	w0, hi  // hi = pmore
    2ff8:	add	w0, w0, #0x1
    2ffc:	ret

0000000000003000 <__ucmpti2@@GCC_3.0>:
    3000:	mov	x4, x0
    3004:	mov	w0, #0x0                   	// #0
    3008:	cmp	x1, x3
    300c:	b.cc	302c <__ucmpti2@@GCC_3.0+0x2c>  // b.lo, b.ul, b.last
    3010:	mov	w0, #0x2                   	// #2
    3014:	b.hi	302c <__ucmpti2@@GCC_3.0+0x2c>  // b.pmore
    3018:	mov	w0, #0x0                   	// #0
    301c:	cmp	x4, x2
    3020:	b.cc	302c <__ucmpti2@@GCC_3.0+0x2c>  // b.lo, b.ul, b.last
    3024:	cset	w0, hi  // hi = pmore
    3028:	add	w0, w0, #0x1
    302c:	ret

0000000000003030 <__clear_cache@@GCC_3.0>:
    3030:	stp	x29, x30, [sp, #-16]!
    3034:	mov	x29, sp
    3038:	bl	6f4c <__udivmodti4@@GCC_3.0+0x40c>
    303c:	ldp	x29, x30, [sp], #16
    3040:	ret

0000000000003044 <__absvdi2@@GCC_3.0>:
    3044:	tbnz	x0, #63, 304c <__absvdi2@@GCC_3.0+0x8>
    3048:	ret
    304c:	negs	x0, x0
    3050:	b.pl	3048 <__absvdi2@@GCC_3.0+0x4>  // b.nfrst
    3054:	stp	x29, x30, [sp, #-16]!
    3058:	mov	x29, sp
    305c:	bl	2c50 <abort@plt>

0000000000003060 <__absvsi2@@GCC_3.0>:
    3060:	tbnz	w0, #31, 3068 <__absvsi2@@GCC_3.0+0x8>
    3064:	ret
    3068:	negs	w0, w0
    306c:	b.pl	3064 <__absvsi2@@GCC_3.0+0x4>  // b.nfrst
    3070:	stp	x29, x30, [sp, #-16]!
    3074:	mov	x29, sp
    3078:	bl	2c50 <abort@plt>

000000000000307c <__absvti2@@GCC_3.4.4>:
    307c:	tbnz	x1, #63, 3084 <__absvti2@@GCC_3.4.4+0x8>
    3080:	ret
    3084:	negs	x0, x0
    3088:	ngc	x2, x1
    308c:	mov	x1, x2
    3090:	tbz	x2, #63, 3080 <__absvti2@@GCC_3.4.4+0x4>
    3094:	stp	x29, x30, [sp, #-16]!
    3098:	mov	x29, sp
    309c:	bl	2c50 <abort@plt>

00000000000030a0 <__addvdi3@@GCC_3.0>:
    30a0:	mov	x2, x0
    30a4:	add	x0, x0, x1
    30a8:	tbnz	x1, #63, 30bc <__addvdi3@@GCC_3.0+0x1c>
    30ac:	cmp	x2, x0
    30b0:	cset	w1, gt
    30b4:	cbnz	w1, 30c8 <__addvdi3@@GCC_3.0+0x28>
    30b8:	ret
    30bc:	cmp	x2, x0
    30c0:	cset	w1, lt  // lt = tstop
    30c4:	b	30b4 <__addvdi3@@GCC_3.0+0x14>
    30c8:	stp	x29, x30, [sp, #-16]!
    30cc:	mov	x29, sp
    30d0:	bl	2c50 <abort@plt>

00000000000030d4 <__addvsi3@@GCC_3.0>:
    30d4:	mov	w2, w0
    30d8:	add	w0, w0, w1
    30dc:	tbnz	w1, #31, 30f0 <__addvsi3@@GCC_3.0+0x1c>
    30e0:	cmp	w2, w0
    30e4:	cset	w1, gt
    30e8:	cbnz	w1, 30fc <__addvsi3@@GCC_3.0+0x28>
    30ec:	ret
    30f0:	cmp	w2, w0
    30f4:	cset	w1, lt  // lt = tstop
    30f8:	b	30e8 <__addvsi3@@GCC_3.0+0x14>
    30fc:	stp	x29, x30, [sp, #-16]!
    3100:	mov	x29, sp
    3104:	bl	2c50 <abort@plt>

0000000000003108 <__addvti3@@GCC_3.4.4>:
    3108:	mov	x4, x0
    310c:	mov	x5, x1
    3110:	adds	x0, x0, x2
    3114:	adc	x1, x1, x3
    3118:	tbnz	x3, #63, 3148 <__addvti3@@GCC_3.4.4+0x40>
    311c:	mov	w2, #0x1                   	// #1
    3120:	cmp	x5, x1
    3124:	b.gt	3130 <__addvti3@@GCC_3.4.4+0x28>
    3128:	b.eq	313c <__addvti3@@GCC_3.4.4+0x34>  // b.none
    312c:	mov	w2, #0x0                   	// #0
    3130:	and	w2, w2, #0xff
    3134:	cbnz	w2, 3170 <__addvti3@@GCC_3.4.4+0x68>
    3138:	ret
    313c:	cmp	x4, x0
    3140:	b.hi	3130 <__addvti3@@GCC_3.4.4+0x28>  // b.pmore
    3144:	b	312c <__addvti3@@GCC_3.4.4+0x24>
    3148:	mov	w2, #0x1                   	// #1
    314c:	cmp	x1, x5
    3150:	b.gt	315c <__addvti3@@GCC_3.4.4+0x54>
    3154:	b.eq	3164 <__addvti3@@GCC_3.4.4+0x5c>  // b.none
    3158:	mov	w2, #0x0                   	// #0
    315c:	and	w2, w2, #0xff
    3160:	b	3134 <__addvti3@@GCC_3.4.4+0x2c>
    3164:	cmp	x0, x4
    3168:	b.hi	315c <__addvti3@@GCC_3.4.4+0x54>  // b.pmore
    316c:	b	3158 <__addvti3@@GCC_3.4.4+0x50>
    3170:	stp	x29, x30, [sp, #-16]!
    3174:	mov	x29, sp
    3178:	bl	2c50 <abort@plt>

000000000000317c <__subvdi3@@GCC_3.0>:
    317c:	mov	x2, x0
    3180:	sub	x0, x0, x1
    3184:	tbnz	x1, #63, 3198 <__subvdi3@@GCC_3.0+0x1c>
    3188:	cmp	x2, x0
    318c:	cset	w1, lt  // lt = tstop
    3190:	cbnz	w1, 31a4 <__subvdi3@@GCC_3.0+0x28>
    3194:	ret
    3198:	cmp	x2, x0
    319c:	cset	w1, gt
    31a0:	b	3190 <__subvdi3@@GCC_3.0+0x14>
    31a4:	stp	x29, x30, [sp, #-16]!
    31a8:	mov	x29, sp
    31ac:	bl	2c50 <abort@plt>

00000000000031b0 <__subvsi3@@GCC_3.0>:
    31b0:	mov	w2, w0
    31b4:	sub	w0, w0, w1
    31b8:	tbnz	w1, #31, 31cc <__subvsi3@@GCC_3.0+0x1c>
    31bc:	cmp	w2, w0
    31c0:	cset	w1, lt  // lt = tstop
    31c4:	cbnz	w1, 31d8 <__subvsi3@@GCC_3.0+0x28>
    31c8:	ret
    31cc:	cmp	w2, w0
    31d0:	cset	w1, gt
    31d4:	b	31c4 <__subvsi3@@GCC_3.0+0x14>
    31d8:	stp	x29, x30, [sp, #-16]!
    31dc:	mov	x29, sp
    31e0:	bl	2c50 <abort@plt>

00000000000031e4 <__subvti3@@GCC_3.4.4>:
    31e4:	mov	x5, x0
    31e8:	mov	x4, x1
    31ec:	subs	x0, x0, x2
    31f0:	sbc	x1, x1, x3
    31f4:	tbnz	x3, #63, 3224 <__subvti3@@GCC_3.4.4+0x40>
    31f8:	mov	w2, #0x1                   	// #1
    31fc:	cmp	x1, x4
    3200:	b.gt	320c <__subvti3@@GCC_3.4.4+0x28>
    3204:	b.eq	3218 <__subvti3@@GCC_3.4.4+0x34>  // b.none
    3208:	mov	w2, #0x0                   	// #0
    320c:	and	w2, w2, #0xff
    3210:	cbnz	w2, 324c <__subvti3@@GCC_3.4.4+0x68>
    3214:	ret
    3218:	cmp	x0, x5
    321c:	b.hi	320c <__subvti3@@GCC_3.4.4+0x28>  // b.pmore
    3220:	b	3208 <__subvti3@@GCC_3.4.4+0x24>
    3224:	mov	w2, #0x1                   	// #1
    3228:	cmp	x4, x1
    322c:	b.gt	3238 <__subvti3@@GCC_3.4.4+0x54>
    3230:	b.eq	3240 <__subvti3@@GCC_3.4.4+0x5c>  // b.none
    3234:	mov	w2, #0x0                   	// #0
    3238:	and	w2, w2, #0xff
    323c:	b	3210 <__subvti3@@GCC_3.4.4+0x2c>
    3240:	cmp	x5, x0
    3244:	b.hi	3238 <__subvti3@@GCC_3.4.4+0x54>  // b.pmore
    3248:	b	3234 <__subvti3@@GCC_3.4.4+0x50>
    324c:	stp	x29, x30, [sp, #-16]!
    3250:	mov	x29, sp
    3254:	bl	2c50 <abort@plt>

0000000000003258 <__mulvdi3@@GCC_3.0>:
    3258:	mov	x2, x0
    325c:	asr	x5, x0, #63
    3260:	asr	x4, x1, #63
    3264:	mul	x0, x0, x1
    3268:	umulh	x3, x2, x1
    326c:	madd	x3, x5, x1, x3
    3270:	madd	x3, x2, x4, x3
    3274:	cmp	x3, x0, asr #63
    3278:	b.ne	3280 <__mulvdi3@@GCC_3.0+0x28>  // b.any
    327c:	ret
    3280:	stp	x29, x30, [sp, #-16]!
    3284:	mov	x29, sp
    3288:	bl	2c50 <abort@plt>

000000000000328c <__mulvsi3@@GCC_3.0>:
    328c:	smull	x0, w1, w0
    3290:	asr	x1, x0, #32
    3294:	cmp	w1, w0, asr #31
    3298:	b.ne	32a0 <__mulvsi3@@GCC_3.0+0x14>  // b.any
    329c:	ret
    32a0:	stp	x29, x30, [sp, #-16]!
    32a4:	mov	x29, sp
    32a8:	bl	2c50 <abort@plt>

00000000000032ac <__mulvti3@@GCC_3.4.4>:
    32ac:	mov	x4, x0
    32b0:	cmp	x1, x0, asr #63
    32b4:	b.ne	3320 <__mulvti3@@GCC_3.4.4+0x74>  // b.any
    32b8:	cmp	x3, x2, asr #63
    32bc:	b.ne	32dc <__mulvti3@@GCC_3.4.4+0x30>  // b.any
    32c0:	asr	x0, x0, #63
    32c4:	asr	x3, x2, #63
    32c8:	umulh	x1, x4, x2
    32cc:	madd	x1, x0, x2, x1
    32d0:	mul	x0, x4, x2
    32d4:	madd	x1, x4, x3, x1
    32d8:	ret
    32dc:	mul	x0, x2, x0
    32e0:	umulh	x1, x2, x4
    32e4:	mov	x6, x1
    32e8:	umulh	x7, x3, x4
    32ec:	mul	x1, x3, x4
    32f0:	sub	x5, x7, x4
    32f4:	cmp	x3, #0x0
    32f8:	csel	x5, x5, x7, lt  // lt = tstop
    32fc:	tbnz	x4, #63, 3314 <__mulvti3@@GCC_3.4.4+0x68>
    3300:	adds	x1, x1, x6
    3304:	cinc	x5, x5, cs  // cs = hs, nlast
    3308:	cmp	x5, x1, asr #63
    330c:	b.ne	3400 <__mulvti3@@GCC_3.4.4+0x154>  // b.any
    3310:	ret
    3314:	subs	x1, x1, x2
    3318:	sbc	x5, x5, x3
    331c:	b	3300 <__mulvti3@@GCC_3.4.4+0x54>
    3320:	cmp	x3, x2, asr #63
    3324:	b.ne	3368 <__mulvti3@@GCC_3.4.4+0xbc>  // b.any
    3328:	mul	x0, x0, x2
    332c:	umulh	x6, x4, x2
    3330:	umulh	x7, x1, x2
    3334:	mul	x5, x1, x2
    3338:	sub	x3, x7, x2
    333c:	cmp	x1, #0x0
    3340:	csel	x3, x3, x7, lt  // lt = tstop
    3344:	tbnz	x2, #63, 335c <__mulvti3@@GCC_3.4.4+0xb0>
    3348:	adds	x1, x5, x6
    334c:	cinc	x3, x3, cs  // cs = hs, nlast
    3350:	cmp	x3, x1, asr #63
    3354:	b.ne	3400 <__mulvti3@@GCC_3.4.4+0x154>  // b.any
    3358:	ret
    335c:	subs	x5, x5, x4
    3360:	sbc	x3, x3, x1
    3364:	b	3348 <__mulvti3@@GCC_3.4.4+0x9c>
    3368:	tbnz	x1, #63, 33b0 <__mulvti3@@GCC_3.4.4+0x104>
    336c:	tbnz	x3, #63, 338c <__mulvti3@@GCC_3.4.4+0xe0>
    3370:	orr	x1, x1, x3
    3374:	cbnz	x1, 3400 <__mulvti3@@GCC_3.4.4+0x154>
    3378:	umulh	x3, x0, x2
    337c:	mul	x0, x0, x2
    3380:	mov	x1, x3
    3384:	tbnz	x3, #63, 3400 <__mulvti3@@GCC_3.4.4+0x154>
    3388:	ret
    338c:	cmp	x1, #0x0
    3390:	ccmn	x3, #0x1, #0x0, eq  // eq = none
    3394:	b.ne	3400 <__mulvti3@@GCC_3.4.4+0x154>  // b.any
    3398:	mul	x0, x0, x2
    339c:	umulh	x1, x4, x2
    33a0:	subs	x4, x1, x4
    33a4:	b.pl	3400 <__mulvti3@@GCC_3.4.4+0x154>  // b.nfrst
    33a8:	mov	x1, x4
    33ac:	ret
    33b0:	tbnz	x3, #63, 33d8 <__mulvti3@@GCC_3.4.4+0x12c>
    33b4:	cmp	x3, #0x0
    33b8:	ccmn	x1, #0x1, #0x0, eq  // eq = none
    33bc:	b.ne	3400 <__mulvti3@@GCC_3.4.4+0x154>  // b.any
    33c0:	mul	x0, x0, x2
    33c4:	umulh	x4, x4, x2
    33c8:	subs	x4, x4, x2
    33cc:	b.pl	3400 <__mulvti3@@GCC_3.4.4+0x154>  // b.nfrst
    33d0:	mov	x1, x4
    33d4:	ret
    33d8:	and	x1, x1, x3
    33dc:	cmn	x1, #0x1
    33e0:	b.ne	3400 <__mulvti3@@GCC_3.4.4+0x154>  // b.any
    33e4:	orr	x0, x0, x2
    33e8:	cbz	x0, 3400 <__mulvti3@@GCC_3.4.4+0x154>
    33ec:	mul	x0, x4, x2
    33f0:	umulh	x1, x4, x2
    33f4:	sub	x1, x1, x4
    33f8:	subs	x1, x1, x2
    33fc:	b.pl	3388 <__mulvti3@@GCC_3.4.4+0xdc>  // b.nfrst
    3400:	stp	x29, x30, [sp, #-16]!
    3404:	mov	x29, sp
    3408:	bl	2c50 <abort@plt>

000000000000340c <__negvdi2@@GCC_3.0>:
    340c:	mov	x1, x0
    3410:	neg	x0, x0
    3414:	tbnz	x1, #63, 3428 <__negvdi2@@GCC_3.0+0x1c>
    3418:	cmp	x0, #0x0
    341c:	cset	w1, gt
    3420:	cbnz	w1, 3434 <__negvdi2@@GCC_3.0+0x28>
    3424:	ret
    3428:	lsr	x1, x0, #63
    342c:	and	w1, w1, #0xff
    3430:	b	3420 <__negvdi2@@GCC_3.0+0x14>
    3434:	stp	x29, x30, [sp, #-16]!
    3438:	mov	x29, sp
    343c:	bl	2c50 <abort@plt>

0000000000003440 <__negvsi2@@GCC_3.0>:
    3440:	mov	w1, w0
    3444:	neg	w0, w0
    3448:	lsr	w2, w0, #31
    344c:	tbnz	w1, #31, 3458 <__negvsi2@@GCC_3.0+0x18>
    3450:	cmp	w0, #0x0
    3454:	cset	w2, gt
    3458:	cbnz	w2, 3460 <__negvsi2@@GCC_3.0+0x20>
    345c:	ret
    3460:	stp	x29, x30, [sp, #-16]!
    3464:	mov	x29, sp
    3468:	bl	2c50 <abort@plt>

000000000000346c <__negvti2@@GCC_3.4.4>:
    346c:	mov	x2, x1
    3470:	negs	x0, x0
    3474:	ngc	x1, x1
    3478:	tbnz	x2, #63, 349c <__negvti2@@GCC_3.4.4+0x30>
    347c:	mov	x3, x0
    3480:	asr	x2, x1, #63
    3484:	subs	x3, x2, x3
    3488:	sbc	x2, x2, x1
    348c:	lsr	x2, x2, #63
    3490:	and	w2, w2, #0xff
    3494:	cbnz	w2, 34a8 <__negvti2@@GCC_3.4.4+0x3c>
    3498:	ret
    349c:	lsr	x2, x1, #63
    34a0:	and	w2, w2, #0xff
    34a4:	b	3494 <__negvti2@@GCC_3.4.4+0x28>
    34a8:	stp	x29, x30, [sp, #-16]!
    34ac:	mov	x29, sp
    34b0:	bl	2c50 <abort@plt>

00000000000034b4 <__ffsdi2@@GCC_3.0>:
    34b4:	rbit	x1, x0
    34b8:	clz	x1, x1
    34bc:	cmp	x0, #0x0
    34c0:	csinc	w0, wzr, w1, eq  // eq = none
    34c4:	ret

00000000000034c8 <__ffsti2@@GCC_3.0>:
    34c8:	cbz	x0, 34e4 <__ffsti2@@GCC_3.0+0x1c>
    34cc:	mov	x1, #0x0                   	// #0
    34d0:	add	w1, w1, #0x1
    34d4:	rbit	x0, x0
    34d8:	clz	x0, x0
    34dc:	add	w0, w1, w0
    34e0:	ret
    34e4:	mov	w0, #0x0                   	// #0
    34e8:	cbz	x1, 34e0 <__ffsti2@@GCC_3.0+0x18>
    34ec:	mov	x0, x1
    34f0:	mov	x1, #0x40                  	// #64
    34f4:	b	34d0 <__ffsti2@@GCC_3.0+0x8>

00000000000034f8 <__clzdi2@@GCC_3.4>:
    34f8:	clz	x0, x0
    34fc:	ret

0000000000003500 <__clzti2@@GCC_3.4>:
    3500:	cbz	x1, 3518 <__clzti2@@GCC_3.4+0x18>
    3504:	mov	x0, x1
    3508:	mov	x1, #0x0                   	// #0
    350c:	clz	x0, x0
    3510:	add	w0, w1, w0
    3514:	ret
    3518:	mov	x1, #0x40                  	// #64
    351c:	b	350c <__clzti2@@GCC_3.4+0xc>

0000000000003520 <__ctzdi2@@GCC_3.4>:
    3520:	rbit	x0, x0
    3524:	clz	x0, x0
    3528:	ret

000000000000352c <__ctzti2@@GCC_3.4>:
    352c:	cbz	x0, 3544 <__ctzti2@@GCC_3.4+0x18>
    3530:	mov	x1, #0x0                   	// #0
    3534:	rbit	x0, x0
    3538:	clz	x0, x0
    353c:	add	w0, w1, w0
    3540:	ret
    3544:	mov	x0, x1
    3548:	mov	x1, #0x40                  	// #64
    354c:	b	3534 <__ctzti2@@GCC_3.4+0x8>

0000000000003550 <__popcountdi2@@GCC_3.4>:
    3550:	lsr	x1, x0, #1
    3554:	and	x1, x1, #0x5555555555555555
    3558:	sub	x0, x0, x1
    355c:	and	x1, x0, #0x3333333333333333
    3560:	lsr	x0, x0, #2
    3564:	and	x0, x0, #0x3333333333333333
    3568:	add	x0, x1, x0
    356c:	add	x0, x0, x0, lsr #4
    3570:	and	x0, x0, #0xf0f0f0f0f0f0f0f
    3574:	mov	x1, #0x101010101010101     	// #72340172838076673
    3578:	mul	x0, x0, x1
    357c:	lsr	x0, x0, #56
    3580:	ret

0000000000003584 <__popcountti2@@GCC_3.4>:
    3584:	lsr	x2, x0, #1
    3588:	and	x2, x2, #0x5555555555555555
    358c:	sub	x0, x0, x2
    3590:	lsr	x2, x1, #1
    3594:	and	x2, x2, #0x5555555555555555
    3598:	sub	x2, x1, x2
    359c:	and	x1, x0, #0x3333333333333333
    35a0:	lsr	x0, x0, #2
    35a4:	and	x0, x0, #0x3333333333333333
    35a8:	add	x0, x1, x0
    35ac:	and	x1, x2, #0x3333333333333333
    35b0:	lsr	x2, x2, #2
    35b4:	and	x2, x2, #0x3333333333333333
    35b8:	add	x1, x1, x2
    35bc:	add	x0, x0, x0, lsr #4
    35c0:	and	x2, x0, #0xf0f0f0f0f0f0f0f
    35c4:	add	x0, x1, x1, lsr #4
    35c8:	and	x0, x0, #0xf0f0f0f0f0f0f0f
    35cc:	add	x0, x0, x2
    35d0:	mov	x1, #0x101010101010101     	// #72340172838076673
    35d4:	mul	x0, x0, x1
    35d8:	lsr	x0, x0, #56
    35dc:	ret

00000000000035e0 <__paritydi2@@GCC_3.4>:
    35e0:	eor	x0, x0, x0, lsr #32
    35e4:	eor	x0, x0, x0, lsr #16
    35e8:	eor	x0, x0, x0, lsr #8
    35ec:	eor	x0, x0, x0, lsr #4
    35f0:	and	x0, x0, #0xf
    35f4:	mov	w1, #0x6996                	// #27030
    35f8:	asr	w0, w1, w0
    35fc:	and	w0, w0, #0x1
    3600:	ret

0000000000003604 <__parityti2@@GCC_3.4>:
    3604:	eor	x0, x0, x1
    3608:	eor	x0, x0, x0, lsr #32
    360c:	eor	x0, x0, x0, lsr #16
    3610:	eor	x0, x0, x0, lsr #8
    3614:	eor	x0, x0, x0, lsr #4
    3618:	and	x0, x0, #0xf
    361c:	mov	w1, #0x6996                	// #27030
    3620:	asr	w0, w1, w0
    3624:	and	w0, w0, #0x1
    3628:	ret

000000000000362c <__powisf2@@GCC_4.0.0>:
    362c:	fmov	s1, s0
    3630:	cmp	w0, #0x0
    3634:	cneg	w2, w0, lt  // lt = tstop
    3638:	tst	x0, #0x1
    363c:	fmov	s0, #1.000000000000000000e+00
    3640:	fcsel	s0, s1, s0, ne  // ne = any
    3644:	lsr	w1, w2, #1
    3648:	cmp	wzr, w2, lsr #1
    364c:	b.ne	3660 <__powisf2@@GCC_4.0.0+0x34>  // b.any
    3650:	tbnz	w0, #31, 3670 <__powisf2@@GCC_4.0.0+0x44>
    3654:	ret
    3658:	lsr	w1, w1, #1
    365c:	cbz	w1, 3650 <__powisf2@@GCC_4.0.0+0x24>
    3660:	fmul	s1, s1, s1
    3664:	tbz	w1, #0, 3658 <__powisf2@@GCC_4.0.0+0x2c>
    3668:	fmul	s0, s0, s1
    366c:	b	3658 <__powisf2@@GCC_4.0.0+0x2c>
    3670:	fmov	s1, #1.000000000000000000e+00
    3674:	fdiv	s0, s1, s0
    3678:	b	3654 <__powisf2@@GCC_4.0.0+0x28>

000000000000367c <__powidf2@@GCC_4.0.0>:
    367c:	fmov	d1, d0
    3680:	cmp	w0, #0x0
    3684:	cneg	w2, w0, lt  // lt = tstop
    3688:	tst	x0, #0x1
    368c:	fmov	d0, #1.000000000000000000e+00
    3690:	fcsel	d0, d1, d0, ne  // ne = any
    3694:	lsr	w1, w2, #1
    3698:	cmp	wzr, w2, lsr #1
    369c:	b.ne	36b0 <__powidf2@@GCC_4.0.0+0x34>  // b.any
    36a0:	tbnz	w0, #31, 36c0 <__powidf2@@GCC_4.0.0+0x44>
    36a4:	ret
    36a8:	lsr	w1, w1, #1
    36ac:	cbz	w1, 36a0 <__powidf2@@GCC_4.0.0+0x24>
    36b0:	fmul	d1, d1, d1
    36b4:	tbz	w1, #0, 36a8 <__powidf2@@GCC_4.0.0+0x2c>
    36b8:	fmul	d0, d0, d1
    36bc:	b	36a8 <__powidf2@@GCC_4.0.0+0x2c>
    36c0:	fmov	d1, #1.000000000000000000e+00
    36c4:	fdiv	d0, d1, d0
    36c8:	b	36a4 <__powidf2@@GCC_4.0.0+0x28>

00000000000036cc <__powitf2@@GCC_4.0.0>:
    36cc:	stp	x29, x30, [sp, #-64]!
    36d0:	mov	x29, sp
    36d4:	stp	x19, x20, [sp, #16]
    36d8:	str	q0, [sp, #32]
    36dc:	mov	w20, w0
    36e0:	cmp	w0, #0x0
    36e4:	cneg	w0, w0, lt  // lt = tstop
    36e8:	str	q0, [sp, #48]
    36ec:	tbnz	w20, #0, 3700 <__powitf2@@GCC_4.0.0+0x34>
    36f0:	adrp	x1, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    36f4:	add	x1, x1, #0xa70
    36f8:	ldr	q0, [x1]
    36fc:	str	q0, [sp, #48]
    3700:	lsr	w19, w0, #1
    3704:	cmp	wzr, w0, lsr #1
    3708:	b.ne	3728 <__powitf2@@GCC_4.0.0+0x5c>  // b.any
    370c:	tbnz	w20, #31, 3750 <__powitf2@@GCC_4.0.0+0x84>
    3710:	ldr	q0, [sp, #48]
    3714:	ldp	x19, x20, [sp, #16]
    3718:	ldp	x29, x30, [sp], #64
    371c:	ret
    3720:	lsr	w19, w19, #1
    3724:	cbz	w19, 370c <__powitf2@@GCC_4.0.0+0x40>
    3728:	ldr	q0, [sp, #32]
    372c:	mov	v1.16b, v0.16b
    3730:	bl	2b10 <__multf3@plt>
    3734:	str	q0, [sp, #32]
    3738:	tbz	w19, #0, 3720 <__powitf2@@GCC_4.0.0+0x54>
    373c:	mov	v1.16b, v0.16b
    3740:	ldr	q0, [sp, #48]
    3744:	bl	2b10 <__multf3@plt>
    3748:	str	q0, [sp, #48]
    374c:	b	3720 <__powitf2@@GCC_4.0.0+0x54>
    3750:	ldr	q1, [sp, #48]
    3754:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    3758:	add	x0, x0, #0xa70
    375c:	ldr	q0, [x0]
    3760:	bl	2c60 <__divtf3@plt>
    3764:	str	q0, [sp, #48]
    3768:	b	3710 <__powitf2@@GCC_4.0.0+0x44>
    376c:	mov	v17.h[0], v0.h[0]
    3770:	mov	v16.h[0], v1.h[0]
    3774:	fcvt	s5, h0
    3778:	fcvt	s4, h2
    377c:	fmul	s6, s5, s4
    3780:	fcvt	h6, s6
    3784:	fcvt	s0, h1
    3788:	fcvt	s1, h3
    378c:	fmul	s18, s0, s1
    3790:	fcvt	h18, s18
    3794:	fmul	s5, s5, s1
    3798:	fcvt	h5, s5
    379c:	fmul	s4, s4, s0
    37a0:	fcvt	h4, s4
    37a4:	fcvt	s1, h6
    37a8:	fcvt	s0, h18
    37ac:	fsub	s1, s1, s0
    37b0:	fcvt	h0, s1
    37b4:	fcvt	s7, h5
    37b8:	fcvt	s1, h4
    37bc:	fadd	s7, s7, s1
    37c0:	fcvt	h1, s7
    37c4:	fcvt	s7, h0
    37c8:	fcmp	s7, s7
    37cc:	cset	w0, vs
    37d0:	fcvt	s7, h1
    37d4:	fcmp	s7, s7
    37d8:	cset	w1, vs
    37dc:	ands	w0, w0, w1
    37e0:	b.eq	398c <__powitf2@@GCC_4.0.0+0x2c0>  // b.none
    37e4:	fcvt	s7, h17
    37e8:	fabs	s7, s7
    37ec:	fcvt	h7, s7
    37f0:	fcvt	s20, h7
    37f4:	mov	w1, #0xe000                	// #57344
    37f8:	movk	w1, #0x477f, lsl #16
    37fc:	fmov	s19, w1
    3800:	fcmp	s20, s19
    3804:	b.gt	3824 <__powitf2@@GCC_4.0.0+0x158>
    3808:	fcvt	s19, h16
    380c:	fabs	s19, s19
    3810:	fcvt	h19, s19
    3814:	fcvt	s19, h19
    3818:	fmov	s20, w1
    381c:	fcmp	s19, s20
    3820:	b.le	39b8 <__powitf2@@GCC_4.0.0+0x2ec>
    3824:	fcvt	s7, h7
    3828:	adrp	x1, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    382c:	ldr	s19, [x1, #2688]
    3830:	fcmp	s7, s19
    3834:	cset	w1, gt
    3838:	scvtf	d7, w1
    383c:	umov	w2, v17.h[0]
    3840:	fcvt	h7, d7
    3844:	umov	w1, v7.h[0]
    3848:	bfxil	w2, w1, #0, #15
    384c:	dup	v17.4h, w2
    3850:	fcvt	s7, h16
    3854:	fabs	s7, s7
    3858:	fcvt	h7, s7
    385c:	fcvt	s7, h7
    3860:	fcmp	s7, s19
    3864:	cset	w1, gt
    3868:	scvtf	d7, w1
    386c:	umov	w2, v16.h[0]
    3870:	fcvt	h7, d7
    3874:	umov	w1, v7.h[0]
    3878:	bfxil	w2, w1, #0, #15
    387c:	dup	v16.4h, w2
    3880:	fcvt	s7, h2
    3884:	fcmp	s7, s7
    3888:	b.vs	3990 <__powitf2@@GCC_4.0.0+0x2c4>
    388c:	fcvt	s7, h3
    3890:	fcmp	s7, s7
    3894:	b.vs	39a4 <__powitf2@@GCC_4.0.0+0x2d8>
    3898:	fcvt	s7, h2
    389c:	fabs	s7, s7
    38a0:	fcvt	h7, s7
    38a4:	fcvt	s20, h7
    38a8:	mov	w1, #0xe000                	// #57344
    38ac:	movk	w1, #0x477f, lsl #16
    38b0:	fmov	s19, w1
    38b4:	fcmp	s20, s19
    38b8:	b.gt	38d8 <__powitf2@@GCC_4.0.0+0x20c>
    38bc:	fcvt	s19, h3
    38c0:	fabs	s19, s19
    38c4:	fcvt	h19, s19
    38c8:	fcvt	s19, h19
    38cc:	fmov	s20, w1
    38d0:	fcmp	s19, s20
    38d4:	b.le	39e8 <__powitf2@@GCC_4.0.0+0x31c>
    38d8:	fcvt	s0, h17
    38dc:	fcmp	s0, s0
    38e0:	b.vs	39c0 <__powitf2@@GCC_4.0.0+0x2f4>
    38e4:	fcvt	s0, h16
    38e8:	fcmp	s0, s0
    38ec:	b.vs	39d4 <__powitf2@@GCC_4.0.0+0x308>
    38f0:	fcvt	s7, h7
    38f4:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    38f8:	ldr	s1, [x0, #2688]
    38fc:	fcmp	s7, s1
    3900:	cset	w0, gt
    3904:	scvtf	d0, w0
    3908:	umov	w1, v2.h[0]
    390c:	fcvt	h0, d0
    3910:	umov	w0, v0.h[0]
    3914:	bfxil	w1, w0, #0, #15
    3918:	dup	v2.4h, w1
    391c:	fcvt	s0, h3
    3920:	fabs	s0, s0
    3924:	fcvt	h0, s0
    3928:	fcvt	s0, h0
    392c:	fcmp	s0, s1
    3930:	cset	w0, gt
    3934:	scvtf	d0, w0
    3938:	umov	w1, v3.h[0]
    393c:	fcvt	h0, d0
    3940:	umov	w0, v0.h[0]
    3944:	bfxil	w1, w0, #0, #15
    3948:	dup	v3.4h, w1
    394c:	fcvt	s17, h17
    3950:	fcvt	s2, h2
    3954:	fcvt	s1, h16
    3958:	fcvt	s3, h3
    395c:	fmul	s0, s17, s2
    3960:	fmul	s4, s1, s3
    3964:	fsub	s0, s0, s4
    3968:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    396c:	ldr	s4, [x0, #2692]
    3970:	fmul	s0, s0, s4
    3974:	fcvt	h0, s0
    3978:	fmul	s17, s17, s3
    397c:	fmul	s2, s2, s1
    3980:	fadd	s1, s17, s2
    3984:	fmul	s1, s1, s4
    3988:	fcvt	h1, s1
    398c:	ret
    3990:	umov	w1, v2.h[0]
    3994:	movi	v2.4h, #0x0
    3998:	tbz	w1, #15, 388c <__powitf2@@GCC_4.0.0+0x1c0>
    399c:	movi	v2.4h, #0x80, lsl #8
    39a0:	b	388c <__powitf2@@GCC_4.0.0+0x1c0>
    39a4:	umov	w1, v3.h[0]
    39a8:	movi	v3.4h, #0x0
    39ac:	tbz	w1, #15, 3898 <__powitf2@@GCC_4.0.0+0x1cc>
    39b0:	movi	v3.4h, #0x80, lsl #8
    39b4:	b	3898 <__powitf2@@GCC_4.0.0+0x1cc>
    39b8:	mov	w0, #0x0                   	// #0
    39bc:	b	3898 <__powitf2@@GCC_4.0.0+0x1cc>
    39c0:	umov	w0, v17.h[0]
    39c4:	movi	v17.4h, #0x0
    39c8:	tbz	w0, #15, 38e4 <__powitf2@@GCC_4.0.0+0x218>
    39cc:	movi	v17.4h, #0x80, lsl #8
    39d0:	b	38e4 <__powitf2@@GCC_4.0.0+0x218>
    39d4:	umov	w0, v16.h[0]
    39d8:	movi	v16.4h, #0x0
    39dc:	tbz	w0, #15, 38f0 <__powitf2@@GCC_4.0.0+0x224>
    39e0:	movi	v16.4h, #0x80, lsl #8
    39e4:	b	38f0 <__powitf2@@GCC_4.0.0+0x224>
    39e8:	cbnz	w0, 394c <__powitf2@@GCC_4.0.0+0x280>
    39ec:	fcvt	s6, h6
    39f0:	fabs	s6, s6
    39f4:	fcvt	h6, s6
    39f8:	fcvt	s6, h6
    39fc:	mov	w0, #0xe000                	// #57344
    3a00:	movk	w0, #0x477f, lsl #16
    3a04:	fmov	s7, w0
    3a08:	fcmp	s6, s7
    3a0c:	b.gt	3a58 <__powitf2@@GCC_4.0.0+0x38c>
    3a10:	fcvt	s6, h18
    3a14:	fabs	s6, s6
    3a18:	fcvt	h6, s6
    3a1c:	fcvt	s6, h6
    3a20:	fcmp	s6, s7
    3a24:	b.gt	3a58 <__powitf2@@GCC_4.0.0+0x38c>
    3a28:	fcvt	s5, h5
    3a2c:	fabs	s5, s5
    3a30:	fcvt	h5, s5
    3a34:	fcvt	s5, h5
    3a38:	fcmp	s5, s7
    3a3c:	b.gt	3a58 <__powitf2@@GCC_4.0.0+0x38c>
    3a40:	fcvt	s4, h4
    3a44:	fabs	s4, s4
    3a48:	fcvt	h4, s4
    3a4c:	fcvt	s4, h4
    3a50:	fcmp	s4, s7
    3a54:	b.le	398c <__powitf2@@GCC_4.0.0+0x2c0>
    3a58:	fcvt	s0, h17
    3a5c:	fcmp	s0, s0
    3a60:	b.vs	3a9c <__powitf2@@GCC_4.0.0+0x3d0>
    3a64:	fcvt	s0, h16
    3a68:	fcmp	s0, s0
    3a6c:	b.vs	3ab0 <__powitf2@@GCC_4.0.0+0x3e4>
    3a70:	fcvt	s0, h2
    3a74:	fcmp	s0, s0
    3a78:	b.vs	3ac4 <__powitf2@@GCC_4.0.0+0x3f8>
    3a7c:	fcvt	s0, h3
    3a80:	fcmp	s0, s0
    3a84:	b.vc	394c <__powitf2@@GCC_4.0.0+0x280>
    3a88:	umov	w0, v3.h[0]
    3a8c:	movi	v3.4h, #0x0
    3a90:	tbz	w0, #15, 394c <__powitf2@@GCC_4.0.0+0x280>
    3a94:	movi	v3.4h, #0x80, lsl #8
    3a98:	b	394c <__powitf2@@GCC_4.0.0+0x280>
    3a9c:	umov	w0, v17.h[0]
    3aa0:	movi	v17.4h, #0x0
    3aa4:	tbz	w0, #15, 3a64 <__powitf2@@GCC_4.0.0+0x398>
    3aa8:	movi	v17.4h, #0x80, lsl #8
    3aac:	b	3a64 <__powitf2@@GCC_4.0.0+0x398>
    3ab0:	umov	w0, v16.h[0]
    3ab4:	movi	v16.4h, #0x0
    3ab8:	tbz	w0, #15, 3a70 <__powitf2@@GCC_4.0.0+0x3a4>
    3abc:	movi	v16.4h, #0x80, lsl #8
    3ac0:	b	3a70 <__powitf2@@GCC_4.0.0+0x3a4>
    3ac4:	umov	w0, v2.h[0]
    3ac8:	movi	v2.4h, #0x0
    3acc:	tbz	w0, #15, 3a7c <__powitf2@@GCC_4.0.0+0x3b0>
    3ad0:	movi	v2.4h, #0x80, lsl #8
    3ad4:	b	3a7c <__powitf2@@GCC_4.0.0+0x3b0>

0000000000003ad8 <__mulsc3@@GCC_4.0.0>:
    3ad8:	fmov	s17, s0
    3adc:	fmov	s16, s1
    3ae0:	fmul	s4, s0, s2
    3ae4:	fmul	s5, s1, s3
    3ae8:	fmul	s6, s0, s3
    3aec:	fmul	s7, s2, s1
    3af0:	fsub	s0, s4, s5
    3af4:	fadd	s1, s6, s7
    3af8:	fcmp	s0, s0
    3afc:	cset	w0, vs
    3b00:	fcmp	s1, s1
    3b04:	cset	w1, vs
    3b08:	ands	w0, w0, w1
    3b0c:	b.eq	3bf8 <__mulsc3@@GCC_4.0.0+0x120>  // b.none
    3b10:	fabs	s18, s17
    3b14:	mov	w1, #0x7f7fffff            	// #2139095039
    3b18:	fmov	s19, w1
    3b1c:	fcmp	s18, s19
    3b20:	b.gt	3b30 <__mulsc3@@GCC_4.0.0+0x58>
    3b24:	fabs	s20, s16
    3b28:	fcmp	s20, s19
    3b2c:	b.le	3c18 <__mulsc3@@GCC_4.0.0+0x140>
    3b30:	adrp	x1, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    3b34:	ldr	s20, [x1, #2696]
    3b38:	fcmp	s18, s20
    3b3c:	cset	w1, gt
    3b40:	scvtf	s18, w1
    3b44:	movi	v19.2s, #0x80, lsl #24
    3b48:	bif	v17.8b, v18.8b, v19.8b
    3b4c:	fabs	s18, s16
    3b50:	fcmp	s18, s20
    3b54:	cset	w1, gt
    3b58:	scvtf	s18, w1
    3b5c:	bif	v16.8b, v18.8b, v19.8b
    3b60:	fcmp	s2, s2
    3b64:	b.vs	3bfc <__mulsc3@@GCC_4.0.0+0x124>
    3b68:	fcmp	s3, s3
    3b6c:	b.vs	3c08 <__mulsc3@@GCC_4.0.0+0x130>
    3b70:	fabs	s18, s2
    3b74:	mov	w1, #0x7f7fffff            	// #2139095039
    3b78:	fmov	s19, w1
    3b7c:	fcmp	s18, s19
    3b80:	b.gt	3b90 <__mulsc3@@GCC_4.0.0+0xb8>
    3b84:	fabs	s20, s3
    3b88:	fcmp	s20, s19
    3b8c:	b.le	3c40 <__mulsc3@@GCC_4.0.0+0x168>
    3b90:	fcmp	s17, s17
    3b94:	b.vs	3c20 <__mulsc3@@GCC_4.0.0+0x148>
    3b98:	fcmp	s16, s16
    3b9c:	b.vs	3c30 <__mulsc3@@GCC_4.0.0+0x158>
    3ba0:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    3ba4:	ldr	s4, [x0, #2696]
    3ba8:	fcmp	s18, s4
    3bac:	cset	w0, gt
    3bb0:	scvtf	s0, w0
    3bb4:	movi	v1.2s, #0x80, lsl #24
    3bb8:	bif	v2.8b, v0.8b, v1.8b
    3bbc:	fabs	s0, s3
    3bc0:	fcmp	s0, s4
    3bc4:	cset	w0, gt
    3bc8:	scvtf	s0, w0
    3bcc:	bif	v3.8b, v0.8b, v1.8b
    3bd0:	fmul	s0, s17, s2
    3bd4:	fmul	s1, s16, s3
    3bd8:	fsub	s0, s0, s1
    3bdc:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    3be0:	ldr	s4, [x0, #2692]
    3be4:	fmul	s0, s0, s4
    3be8:	fmul	s3, s17, s3
    3bec:	fmul	s1, s16, s2
    3bf0:	fadd	s1, s3, s1
    3bf4:	fmul	s1, s1, s4
    3bf8:	ret
    3bfc:	movi	v18.2s, #0x0
    3c00:	bif	v2.8b, v18.8b, v19.8b
    3c04:	b	3b68 <__mulsc3@@GCC_4.0.0+0x90>
    3c08:	movi	v18.2s, #0x0
    3c0c:	movi	v19.2s, #0x80, lsl #24
    3c10:	bif	v3.8b, v18.8b, v19.8b
    3c14:	b	3b70 <__mulsc3@@GCC_4.0.0+0x98>
    3c18:	mov	w0, #0x0                   	// #0
    3c1c:	b	3b70 <__mulsc3@@GCC_4.0.0+0x98>
    3c20:	movi	v0.2s, #0x0
    3c24:	movi	v1.2s, #0x80, lsl #24
    3c28:	bif	v17.8b, v0.8b, v1.8b
    3c2c:	b	3b98 <__mulsc3@@GCC_4.0.0+0xc0>
    3c30:	movi	v0.2s, #0x0
    3c34:	movi	v1.2s, #0x80, lsl #24
    3c38:	bif	v16.8b, v0.8b, v1.8b
    3c3c:	b	3ba0 <__mulsc3@@GCC_4.0.0+0xc8>
    3c40:	cbnz	w0, 3bd0 <__mulsc3@@GCC_4.0.0+0xf8>
    3c44:	fabs	s4, s4
    3c48:	mov	w0, #0x7f7fffff            	// #2139095039
    3c4c:	fmov	s18, w0
    3c50:	fcmp	s4, s18
    3c54:	b.gt	3c7c <__mulsc3@@GCC_4.0.0+0x1a4>
    3c58:	fabs	s5, s5
    3c5c:	fcmp	s5, s18
    3c60:	b.gt	3c7c <__mulsc3@@GCC_4.0.0+0x1a4>
    3c64:	fabs	s6, s6
    3c68:	fcmp	s6, s18
    3c6c:	b.gt	3c7c <__mulsc3@@GCC_4.0.0+0x1a4>
    3c70:	fabs	s7, s7
    3c74:	fcmp	s7, s18
    3c78:	b.le	3bf8 <__mulsc3@@GCC_4.0.0+0x120>
    3c7c:	fcmp	s17, s17
    3c80:	b.vs	3cac <__mulsc3@@GCC_4.0.0+0x1d4>
    3c84:	fcmp	s16, s16
    3c88:	b.vs	3cbc <__mulsc3@@GCC_4.0.0+0x1e4>
    3c8c:	fcmp	s2, s2
    3c90:	b.vs	3ccc <__mulsc3@@GCC_4.0.0+0x1f4>
    3c94:	fcmp	s3, s3
    3c98:	b.vc	3bd0 <__mulsc3@@GCC_4.0.0+0xf8>
    3c9c:	movi	v0.2s, #0x0
    3ca0:	movi	v1.2s, #0x80, lsl #24
    3ca4:	bif	v3.8b, v0.8b, v1.8b
    3ca8:	b	3bd0 <__mulsc3@@GCC_4.0.0+0xf8>
    3cac:	movi	v0.2s, #0x0
    3cb0:	movi	v1.2s, #0x80, lsl #24
    3cb4:	bif	v17.8b, v0.8b, v1.8b
    3cb8:	b	3c84 <__mulsc3@@GCC_4.0.0+0x1ac>
    3cbc:	movi	v0.2s, #0x0
    3cc0:	movi	v1.2s, #0x80, lsl #24
    3cc4:	bif	v16.8b, v0.8b, v1.8b
    3cc8:	b	3c8c <__mulsc3@@GCC_4.0.0+0x1b4>
    3ccc:	movi	v0.2s, #0x0
    3cd0:	movi	v1.2s, #0x80, lsl #24
    3cd4:	bif	v2.8b, v0.8b, v1.8b
    3cd8:	b	3c94 <__mulsc3@@GCC_4.0.0+0x1bc>

0000000000003cdc <__muldc3@@GCC_4.0.0>:
    3cdc:	fmov	d17, d0
    3ce0:	fmov	d16, d1
    3ce4:	fmul	d4, d0, d2
    3ce8:	fmul	d5, d1, d3
    3cec:	fmul	d6, d0, d3
    3cf0:	fmul	d7, d2, d1
    3cf4:	fsub	d0, d4, d5
    3cf8:	fadd	d1, d6, d7
    3cfc:	fcmp	d0, d0
    3d00:	cset	w0, vs
    3d04:	fcmp	d1, d1
    3d08:	cset	w1, vs
    3d0c:	ands	w0, w0, w1
    3d10:	b.eq	3e04 <__muldc3@@GCC_4.0.0+0x128>  // b.none
    3d14:	fabs	d18, d17
    3d18:	mov	x1, #0x7fefffffffffffff    	// #9218868437227405311
    3d1c:	fmov	d19, x1
    3d20:	fcmp	d18, d19
    3d24:	b.gt	3d34 <__muldc3@@GCC_4.0.0+0x58>
    3d28:	fabs	d20, d16
    3d2c:	fcmp	d20, d19
    3d30:	b.le	3e28 <__muldc3@@GCC_4.0.0+0x14c>
    3d34:	adrp	x1, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    3d38:	ldr	d20, [x1, #2704]
    3d3c:	fcmp	d18, d20
    3d40:	cset	w1, gt
    3d44:	scvtf	d18, w1
    3d48:	mov	x1, #0x8000000000000000    	// #-9223372036854775808
    3d4c:	fmov	d19, x1
    3d50:	bif	v17.8b, v18.8b, v19.8b
    3d54:	fabs	d18, d16
    3d58:	fcmp	d18, d20
    3d5c:	cset	w1, gt
    3d60:	scvtf	d18, w1
    3d64:	bif	v16.8b, v18.8b, v19.8b
    3d68:	fcmp	d2, d2
    3d6c:	b.vs	3e08 <__muldc3@@GCC_4.0.0+0x12c>
    3d70:	fcmp	d3, d3
    3d74:	b.vs	3e14 <__muldc3@@GCC_4.0.0+0x138>
    3d78:	fabs	d18, d2
    3d7c:	mov	x1, #0x7fefffffffffffff    	// #9218868437227405311
    3d80:	fmov	d19, x1
    3d84:	fcmp	d18, d19
    3d88:	b.gt	3d98 <__muldc3@@GCC_4.0.0+0xbc>
    3d8c:	fabs	d20, d3
    3d90:	fcmp	d20, d19
    3d94:	b.le	3e58 <__muldc3@@GCC_4.0.0+0x17c>
    3d98:	fcmp	d17, d17
    3d9c:	b.vs	3e30 <__muldc3@@GCC_4.0.0+0x154>
    3da0:	fcmp	d16, d16
    3da4:	b.vs	3e44 <__muldc3@@GCC_4.0.0+0x168>
    3da8:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    3dac:	ldr	d4, [x0, #2704]
    3db0:	fcmp	d18, d4
    3db4:	cset	w0, gt
    3db8:	scvtf	d0, w0
    3dbc:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    3dc0:	fmov	d1, x0
    3dc4:	bif	v2.8b, v0.8b, v1.8b
    3dc8:	fabs	d0, d3
    3dcc:	fcmp	d0, d4
    3dd0:	cset	w0, gt
    3dd4:	scvtf	d0, w0
    3dd8:	bif	v3.8b, v0.8b, v1.8b
    3ddc:	fmul	d0, d17, d2
    3de0:	fmul	d1, d16, d3
    3de4:	fsub	d0, d0, d1
    3de8:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    3dec:	ldr	d4, [x0, #2712]
    3df0:	fmul	d0, d0, d4
    3df4:	fmul	d3, d17, d3
    3df8:	fmul	d1, d16, d2
    3dfc:	fadd	d1, d3, d1
    3e00:	fmul	d1, d1, d4
    3e04:	ret
    3e08:	movi	d18, #0x0
    3e0c:	bif	v2.8b, v18.8b, v19.8b
    3e10:	b	3d70 <__muldc3@@GCC_4.0.0+0x94>
    3e14:	movi	d18, #0x0
    3e18:	mov	x1, #0x8000000000000000    	// #-9223372036854775808
    3e1c:	fmov	d19, x1
    3e20:	bif	v3.8b, v18.8b, v19.8b
    3e24:	b	3d78 <__muldc3@@GCC_4.0.0+0x9c>
    3e28:	mov	w0, #0x0                   	// #0
    3e2c:	b	3d78 <__muldc3@@GCC_4.0.0+0x9c>
    3e30:	movi	d0, #0x0
    3e34:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    3e38:	fmov	d1, x0
    3e3c:	bif	v17.8b, v0.8b, v1.8b
    3e40:	b	3da0 <__muldc3@@GCC_4.0.0+0xc4>
    3e44:	movi	d0, #0x0
    3e48:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    3e4c:	fmov	d1, x0
    3e50:	bif	v16.8b, v0.8b, v1.8b
    3e54:	b	3da8 <__muldc3@@GCC_4.0.0+0xcc>
    3e58:	cbnz	w0, 3ddc <__muldc3@@GCC_4.0.0+0x100>
    3e5c:	fabs	d4, d4
    3e60:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    3e64:	fmov	d18, x0
    3e68:	fcmp	d4, d18
    3e6c:	b.gt	3e94 <__muldc3@@GCC_4.0.0+0x1b8>
    3e70:	fabs	d5, d5
    3e74:	fcmp	d5, d18
    3e78:	b.gt	3e94 <__muldc3@@GCC_4.0.0+0x1b8>
    3e7c:	fabs	d6, d6
    3e80:	fcmp	d6, d18
    3e84:	b.gt	3e94 <__muldc3@@GCC_4.0.0+0x1b8>
    3e88:	fabs	d7, d7
    3e8c:	fcmp	d7, d18
    3e90:	b.le	3e04 <__muldc3@@GCC_4.0.0+0x128>
    3e94:	fcmp	d17, d17
    3e98:	b.vs	3ec8 <__muldc3@@GCC_4.0.0+0x1ec>
    3e9c:	fcmp	d16, d16
    3ea0:	b.vs	3edc <__muldc3@@GCC_4.0.0+0x200>
    3ea4:	fcmp	d2, d2
    3ea8:	b.vs	3ef0 <__muldc3@@GCC_4.0.0+0x214>
    3eac:	fcmp	d3, d3
    3eb0:	b.vc	3ddc <__muldc3@@GCC_4.0.0+0x100>
    3eb4:	movi	d0, #0x0
    3eb8:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    3ebc:	fmov	d1, x0
    3ec0:	bif	v3.8b, v0.8b, v1.8b
    3ec4:	b	3ddc <__muldc3@@GCC_4.0.0+0x100>
    3ec8:	movi	d0, #0x0
    3ecc:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    3ed0:	fmov	d1, x0
    3ed4:	bif	v17.8b, v0.8b, v1.8b
    3ed8:	b	3e9c <__muldc3@@GCC_4.0.0+0x1c0>
    3edc:	movi	d0, #0x0
    3ee0:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    3ee4:	fmov	d1, x0
    3ee8:	bif	v16.8b, v0.8b, v1.8b
    3eec:	b	3ea4 <__muldc3@@GCC_4.0.0+0x1c8>
    3ef0:	movi	d0, #0x0
    3ef4:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    3ef8:	fmov	d1, x0
    3efc:	bif	v2.8b, v0.8b, v1.8b
    3f00:	b	3eac <__muldc3@@GCC_4.0.0+0x1d0>

0000000000003f04 <__multc3@@GCC_4.0.0>:
    3f04:	stp	x29, x30, [sp, #-240]!
    3f08:	mov	x29, sp
    3f0c:	stp	x19, x20, [sp, #16]
    3f10:	stp	x21, x22, [sp, #32]
    3f14:	stp	x23, x24, [sp, #48]
    3f18:	stp	x25, x26, [sp, #64]
    3f1c:	stp	x27, x28, [sp, #80]
    3f20:	str	q0, [sp, #96]
    3f24:	ldr	x19, [sp, #96]
    3f28:	ldr	x24, [sp, #104]
    3f2c:	str	q1, [sp, #96]
    3f30:	ldr	x20, [sp, #96]
    3f34:	ldr	x23, [sp, #104]
    3f38:	str	q2, [sp, #96]
    3f3c:	ldr	x21, [sp, #96]
    3f40:	ldr	x26, [sp, #104]
    3f44:	str	q3, [sp, #96]
    3f48:	ldr	x22, [sp, #96]
    3f4c:	ldr	x25, [sp, #104]
    3f50:	str	x21, [sp, #96]
    3f54:	str	x26, [sp, #104]
    3f58:	ldr	q1, [sp, #96]
    3f5c:	str	x19, [sp, #96]
    3f60:	str	x24, [sp, #104]
    3f64:	ldr	q0, [sp, #96]
    3f68:	bl	2b10 <__multf3@plt>
    3f6c:	str	q0, [sp, #96]
    3f70:	ldr	x1, [sp, #96]
    3f74:	ldr	x0, [sp, #104]
    3f78:	str	x1, [sp, #128]
    3f7c:	str	x0, [sp, #144]
    3f80:	str	x22, [sp, #96]
    3f84:	str	x25, [sp, #104]
    3f88:	ldr	q1, [sp, #96]
    3f8c:	str	x20, [sp, #96]
    3f90:	str	x23, [sp, #104]
    3f94:	ldr	q0, [sp, #96]
    3f98:	bl	2b10 <__multf3@plt>
    3f9c:	str	q0, [sp, #96]
    3fa0:	ldr	x1, [sp, #96]
    3fa4:	ldr	x0, [sp, #104]
    3fa8:	mov	x27, x1
    3fac:	str	x1, [sp, #208]
    3fb0:	mov	x28, x0
    3fb4:	str	x0, [sp, #216]
    3fb8:	str	x22, [sp, #96]
    3fbc:	str	x25, [sp, #104]
    3fc0:	ldr	q1, [sp, #96]
    3fc4:	str	x19, [sp, #96]
    3fc8:	str	x24, [sp, #104]
    3fcc:	ldr	q0, [sp, #96]
    3fd0:	bl	2b10 <__multf3@plt>
    3fd4:	str	q0, [sp, #96]
    3fd8:	ldr	x1, [sp, #96]
    3fdc:	ldr	x0, [sp, #104]
    3fe0:	str	x1, [sp, #160]
    3fe4:	str	x0, [sp, #168]
    3fe8:	str	x20, [sp, #96]
    3fec:	str	x23, [sp, #104]
    3ff0:	ldr	q1, [sp, #96]
    3ff4:	str	x21, [sp, #96]
    3ff8:	str	x26, [sp, #104]
    3ffc:	ldr	q0, [sp, #96]
    4000:	bl	2b10 <__multf3@plt>
    4004:	str	q0, [sp, #96]
    4008:	ldr	x1, [sp, #96]
    400c:	ldr	x0, [sp, #104]
    4010:	str	x1, [sp, #176]
    4014:	str	x0, [sp, #184]
    4018:	str	x27, [sp, #96]
    401c:	str	x28, [sp, #104]
    4020:	ldr	q1, [sp, #96]
    4024:	ldr	x2, [sp, #128]
    4028:	str	x2, [sp, #96]
    402c:	ldr	x2, [sp, #144]
    4030:	str	x2, [sp, #104]
    4034:	ldr	q0, [sp, #96]
    4038:	bl	2d80 <__subtf3@plt>
    403c:	str	q0, [sp, #112]
    4040:	ldr	x2, [sp, #176]
    4044:	str	x2, [sp, #96]
    4048:	ldr	x2, [sp, #184]
    404c:	str	x2, [sp, #104]
    4050:	ldr	q1, [sp, #96]
    4054:	ldr	x1, [sp, #160]
    4058:	str	x1, [sp, #96]
    405c:	ldr	x0, [sp, #168]
    4060:	str	x0, [sp, #104]
    4064:	ldr	q0, [sp, #96]
    4068:	bl	2c20 <__addtf3@plt>
    406c:	str	q0, [sp, #96]
    4070:	ldr	q1, [sp, #112]
    4074:	mov	v0.16b, v1.16b
    4078:	bl	2d30 <__unordtf2@plt>
    407c:	cmp	w0, #0x0
    4080:	cset	w27, ne  // ne = any
    4084:	ldr	q0, [sp, #96]
    4088:	mov	v1.16b, v0.16b
    408c:	bl	2d30 <__unordtf2@plt>
    4090:	cmp	w0, #0x0
    4094:	cset	w0, ne  // ne = any
    4098:	ands	w27, w0, w27
    409c:	b.eq	43fc <__multc3@@GCC_4.0.0+0x4f8>  // b.none
    40a0:	str	x19, [sp, #224]
    40a4:	and	x28, x24, #0x7fffffffffffffff
    40a8:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    40ac:	add	x0, x0, #0xaa0
    40b0:	ldr	q1, [x0]
    40b4:	str	x19, [sp, #192]
    40b8:	str	x28, [sp, #200]
    40bc:	ldr	q0, [sp, #192]
    40c0:	bl	2d30 <__unordtf2@plt>
    40c4:	cbnz	w0, 4420 <__multc3@@GCC_4.0.0+0x51c>
    40c8:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    40cc:	add	x0, x0, #0xaa0
    40d0:	ldr	q1, [x0]
    40d4:	str	x19, [sp, #192]
    40d8:	str	x28, [sp, #200]
    40dc:	ldr	q0, [sp, #192]
    40e0:	bl	2bc0 <__letf2@plt>
    40e4:	cmp	w0, #0x0
    40e8:	b.le	4420 <__multc3@@GCC_4.0.0+0x51c>
    40ec:	mov	w19, #0x1                   	// #1
    40f0:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    40f4:	add	x0, x0, #0xaa0
    40f8:	ldr	q1, [x0]
    40fc:	ldr	x0, [sp, #224]
    4100:	str	x0, [sp, #192]
    4104:	str	x28, [sp, #200]
    4108:	ldr	q0, [sp, #192]
    410c:	bl	2d30 <__unordtf2@plt>
    4110:	cbnz	w0, 413c <__multc3@@GCC_4.0.0+0x238>
    4114:	adrp	x1, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    4118:	add	x1, x1, #0xaa0
    411c:	ldr	q1, [x1]
    4120:	ldr	x0, [sp, #224]
    4124:	str	x0, [sp, #192]
    4128:	str	x28, [sp, #200]
    412c:	ldr	q0, [sp, #192]
    4130:	bl	2bc0 <__letf2@plt>
    4134:	cmp	w0, #0x0
    4138:	csel	w19, w19, wzr, le
    413c:	eor	w0, w19, #0x1
    4140:	and	w0, w0, #0x1
    4144:	bl	2d70 <__floatsitf@plt>
    4148:	str	q0, [sp, #192]
    414c:	ldr	x19, [sp, #192]
    4150:	ldr	x0, [sp, #200]
    4154:	bfxil	x24, x0, #0, #63
    4158:	and	x1, x23, #0x7fffffffffffffff
    415c:	mov	w28, #0x1                   	// #1
    4160:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    4164:	add	x0, x0, #0xaa0
    4168:	ldr	q1, [x0]
    416c:	str	x20, [sp, #192]
    4170:	str	x1, [sp, #224]
    4174:	str	x1, [sp, #200]
    4178:	ldr	q0, [sp, #192]
    417c:	bl	2d30 <__unordtf2@plt>
    4180:	cbnz	w0, 41ac <__multc3@@GCC_4.0.0+0x2a8>
    4184:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    4188:	add	x0, x0, #0xaa0
    418c:	ldr	q1, [x0]
    4190:	str	x20, [sp, #192]
    4194:	ldr	x1, [sp, #224]
    4198:	str	x1, [sp, #200]
    419c:	ldr	q0, [sp, #192]
    41a0:	bl	2bc0 <__letf2@plt>
    41a4:	cmp	w0, #0x0
    41a8:	csel	w28, w28, wzr, le
    41ac:	eor	w0, w28, #0x1
    41b0:	and	w0, w0, #0x1
    41b4:	bl	2d70 <__floatsitf@plt>
    41b8:	str	q0, [sp, #192]
    41bc:	ldr	x20, [sp, #192]
    41c0:	ldr	x0, [sp, #200]
    41c4:	bfxil	x23, x0, #0, #63
    41c8:	str	x21, [sp, #192]
    41cc:	str	x26, [sp, #200]
    41d0:	ldr	q1, [sp, #192]
    41d4:	ldr	q0, [sp, #192]
    41d8:	bl	2d30 <__unordtf2@plt>
    41dc:	cbnz	w0, 4478 <__multc3@@GCC_4.0.0+0x574>
    41e0:	str	x22, [sp, #192]
    41e4:	str	x25, [sp, #200]
    41e8:	ldr	q1, [sp, #192]
    41ec:	ldr	q0, [sp, #192]
    41f0:	bl	2d30 <__unordtf2@plt>
    41f4:	cbnz	w0, 4490 <__multc3@@GCC_4.0.0+0x58c>
    41f8:	str	x21, [sp, #224]
    41fc:	and	x28, x26, #0x7fffffffffffffff
    4200:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    4204:	add	x0, x0, #0xaa0
    4208:	ldr	q1, [x0]
    420c:	str	x21, [sp, #192]
    4210:	str	x28, [sp, #200]
    4214:	ldr	q0, [sp, #192]
    4218:	bl	2d30 <__unordtf2@plt>
    421c:	cbnz	w0, 44a8 <__multc3@@GCC_4.0.0+0x5a4>
    4220:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    4224:	add	x0, x0, #0xaa0
    4228:	ldr	q1, [x0]
    422c:	str	x21, [sp, #192]
    4230:	str	x28, [sp, #200]
    4234:	ldr	q0, [sp, #192]
    4238:	bl	2bc0 <__letf2@plt>
    423c:	cmp	w0, #0x0
    4240:	b.le	44a8 <__multc3@@GCC_4.0.0+0x5a4>
    4244:	str	x19, [sp, #96]
    4248:	str	x24, [sp, #104]
    424c:	ldr	q1, [sp, #96]
    4250:	ldr	q0, [sp, #96]
    4254:	bl	2d30 <__unordtf2@plt>
    4258:	cbnz	w0, 45c4 <__multc3@@GCC_4.0.0+0x6c0>
    425c:	str	x20, [sp, #96]
    4260:	str	x23, [sp, #104]
    4264:	ldr	q1, [sp, #96]
    4268:	ldr	q0, [sp, #96]
    426c:	bl	2d30 <__unordtf2@plt>
    4270:	cbnz	w0, 45dc <__multc3@@GCC_4.0.0+0x6d8>
    4274:	mov	w21, #0x1                   	// #1
    4278:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    427c:	add	x0, x0, #0xaa0
    4280:	ldr	q1, [x0]
    4284:	ldr	x27, [sp, #224]
    4288:	str	x27, [sp, #96]
    428c:	str	x28, [sp, #104]
    4290:	ldr	q0, [sp, #96]
    4294:	bl	2d30 <__unordtf2@plt>
    4298:	cbnz	w0, 42c0 <__multc3@@GCC_4.0.0+0x3bc>
    429c:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    42a0:	add	x0, x0, #0xaa0
    42a4:	ldr	q1, [x0]
    42a8:	str	x27, [sp, #96]
    42ac:	str	x28, [sp, #104]
    42b0:	ldr	q0, [sp, #96]
    42b4:	bl	2bc0 <__letf2@plt>
    42b8:	cmp	w0, #0x0
    42bc:	csel	w21, w21, wzr, le
    42c0:	eor	w0, w21, #0x1
    42c4:	and	w0, w0, #0x1
    42c8:	bl	2d70 <__floatsitf@plt>
    42cc:	str	q0, [sp, #96]
    42d0:	ldr	x21, [sp, #96]
    42d4:	ldr	x0, [sp, #104]
    42d8:	bfxil	x26, x0, #0, #63
    42dc:	and	x28, x25, #0x7fffffffffffffff
    42e0:	mov	w27, #0x1                   	// #1
    42e4:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    42e8:	add	x0, x0, #0xaa0
    42ec:	ldr	q1, [x0]
    42f0:	str	x22, [sp, #96]
    42f4:	str	x28, [sp, #104]
    42f8:	ldr	q0, [sp, #96]
    42fc:	bl	2d30 <__unordtf2@plt>
    4300:	cbnz	w0, 4328 <__multc3@@GCC_4.0.0+0x424>
    4304:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    4308:	add	x0, x0, #0xaa0
    430c:	ldr	q1, [x0]
    4310:	str	x22, [sp, #96]
    4314:	str	x28, [sp, #104]
    4318:	ldr	q0, [sp, #96]
    431c:	bl	2bc0 <__letf2@plt>
    4320:	cmp	w0, #0x0
    4324:	csel	w27, w27, wzr, le
    4328:	eor	w0, w27, #0x1
    432c:	and	w0, w0, #0x1
    4330:	bl	2d70 <__floatsitf@plt>
    4334:	str	q0, [sp, #96]
    4338:	ldr	x22, [sp, #96]
    433c:	ldr	x0, [sp, #104]
    4340:	bfxil	x25, x0, #0, #63
    4344:	str	x21, [sp, #96]
    4348:	str	x26, [sp, #104]
    434c:	ldr	q1, [sp, #96]
    4350:	str	x19, [sp, #96]
    4354:	str	x24, [sp, #104]
    4358:	ldr	q0, [sp, #96]
    435c:	bl	2b10 <__multf3@plt>
    4360:	str	q0, [sp, #112]
    4364:	str	x22, [sp, #96]
    4368:	str	x25, [sp, #104]
    436c:	ldr	q1, [sp, #96]
    4370:	str	x20, [sp, #96]
    4374:	str	x23, [sp, #104]
    4378:	ldr	q0, [sp, #96]
    437c:	bl	2b10 <__multf3@plt>
    4380:	mov	v1.16b, v0.16b
    4384:	ldr	q0, [sp, #112]
    4388:	bl	2d80 <__subtf3@plt>
    438c:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    4390:	add	x0, x0, #0xab0
    4394:	ldr	q1, [x0]
    4398:	bl	2b10 <__multf3@plt>
    439c:	str	q0, [sp, #112]
    43a0:	str	x22, [sp, #96]
    43a4:	str	x25, [sp, #104]
    43a8:	ldr	q1, [sp, #96]
    43ac:	str	x19, [sp, #96]
    43b0:	str	x24, [sp, #104]
    43b4:	ldr	q0, [sp, #96]
    43b8:	bl	2b10 <__multf3@plt>
    43bc:	str	q0, [sp, #128]
    43c0:	str	x21, [sp, #96]
    43c4:	str	x26, [sp, #104]
    43c8:	ldr	q1, [sp, #96]
    43cc:	str	x20, [sp, #96]
    43d0:	str	x23, [sp, #104]
    43d4:	ldr	q0, [sp, #96]
    43d8:	bl	2b10 <__multf3@plt>
    43dc:	mov	v1.16b, v0.16b
    43e0:	ldr	q0, [sp, #128]
    43e4:	bl	2c20 <__addtf3@plt>
    43e8:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    43ec:	add	x0, x0, #0xab0
    43f0:	ldr	q1, [x0]
    43f4:	bl	2b10 <__multf3@plt>
    43f8:	str	q0, [sp, #96]
    43fc:	ldr	q0, [sp, #112]
    4400:	ldr	q1, [sp, #96]
    4404:	ldp	x19, x20, [sp, #16]
    4408:	ldp	x21, x22, [sp, #32]
    440c:	ldp	x23, x24, [sp, #48]
    4410:	ldp	x25, x26, [sp, #64]
    4414:	ldp	x27, x28, [sp, #80]
    4418:	ldp	x29, x30, [sp], #240
    441c:	ret
    4420:	and	x1, x23, #0x7fffffffffffffff
    4424:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    4428:	add	x0, x0, #0xaa0
    442c:	ldr	q1, [x0]
    4430:	str	x20, [sp, #192]
    4434:	str	x1, [sp, #232]
    4438:	str	x1, [sp, #200]
    443c:	ldr	q0, [sp, #192]
    4440:	bl	2d30 <__unordtf2@plt>
    4444:	cbnz	w0, 4470 <__multc3@@GCC_4.0.0+0x56c>
    4448:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    444c:	add	x0, x0, #0xaa0
    4450:	ldr	q1, [x0]
    4454:	str	x20, [sp, #192]
    4458:	ldr	x1, [sp, #232]
    445c:	str	x1, [sp, #200]
    4460:	ldr	q0, [sp, #192]
    4464:	bl	2bc0 <__letf2@plt>
    4468:	cmp	w0, #0x0
    446c:	b.gt	40ec <__multc3@@GCC_4.0.0+0x1e8>
    4470:	mov	w27, #0x0                   	// #0
    4474:	b	41f8 <__multc3@@GCC_4.0.0+0x2f4>
    4478:	mov	x21, #0x0                   	// #0
    447c:	mov	x0, #0x0                   	// #0
    4480:	tbz	x26, #63, 4488 <__multc3@@GCC_4.0.0+0x584>
    4484:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    4488:	mov	x26, x0
    448c:	b	41e0 <__multc3@@GCC_4.0.0+0x2dc>
    4490:	mov	x22, #0x0                   	// #0
    4494:	mov	x0, #0x0                   	// #0
    4498:	tbz	x25, #63, 44a0 <__multc3@@GCC_4.0.0+0x59c>
    449c:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    44a0:	mov	x25, x0
    44a4:	b	41f8 <__multc3@@GCC_4.0.0+0x2f4>
    44a8:	and	x1, x25, #0x7fffffffffffffff
    44ac:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    44b0:	add	x0, x0, #0xaa0
    44b4:	ldr	q1, [x0]
    44b8:	str	x22, [sp, #192]
    44bc:	str	x1, [sp, #232]
    44c0:	str	x1, [sp, #200]
    44c4:	ldr	q0, [sp, #192]
    44c8:	bl	2d30 <__unordtf2@plt>
    44cc:	cbnz	w0, 44f8 <__multc3@@GCC_4.0.0+0x5f4>
    44d0:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    44d4:	add	x0, x0, #0xaa0
    44d8:	ldr	q1, [x0]
    44dc:	str	x22, [sp, #192]
    44e0:	ldr	x1, [sp, #232]
    44e4:	str	x1, [sp, #200]
    44e8:	ldr	q0, [sp, #192]
    44ec:	bl	2bc0 <__letf2@plt>
    44f0:	cmp	w0, #0x0
    44f4:	b.gt	4244 <__multc3@@GCC_4.0.0+0x340>
    44f8:	cbnz	w27, 4344 <__multc3@@GCC_4.0.0+0x440>
    44fc:	ldr	x0, [sp, #144]
    4500:	and	x27, x0, #0x7fffffffffffffff
    4504:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    4508:	add	x0, x0, #0xaa0
    450c:	ldr	q1, [x0]
    4510:	ldr	x28, [sp, #128]
    4514:	str	x28, [sp, #144]
    4518:	str	x27, [sp, #152]
    451c:	ldr	q0, [sp, #144]
    4520:	bl	2d30 <__unordtf2@plt>
    4524:	cbnz	w0, 45f4 <__multc3@@GCC_4.0.0+0x6f0>
    4528:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    452c:	add	x0, x0, #0xaa0
    4530:	ldr	q1, [x0]
    4534:	str	x28, [sp, #128]
    4538:	str	x27, [sp, #136]
    453c:	ldr	q0, [sp, #128]
    4540:	bl	2bc0 <__letf2@plt>
    4544:	cmp	w0, #0x0
    4548:	b.le	45f4 <__multc3@@GCC_4.0.0+0x6f0>
    454c:	str	x19, [sp, #96]
    4550:	str	x24, [sp, #104]
    4554:	ldr	q1, [sp, #96]
    4558:	ldr	q0, [sp, #96]
    455c:	bl	2d30 <__unordtf2@plt>
    4560:	cbnz	w0, 46e8 <__multc3@@GCC_4.0.0+0x7e4>
    4564:	str	x20, [sp, #96]
    4568:	str	x23, [sp, #104]
    456c:	ldr	q1, [sp, #96]
    4570:	ldr	q0, [sp, #96]
    4574:	bl	2d30 <__unordtf2@plt>
    4578:	cbnz	w0, 4700 <__multc3@@GCC_4.0.0+0x7fc>
    457c:	str	x21, [sp, #96]
    4580:	str	x26, [sp, #104]
    4584:	ldr	q1, [sp, #96]
    4588:	ldr	q0, [sp, #96]
    458c:	bl	2d30 <__unordtf2@plt>
    4590:	cbnz	w0, 4718 <__multc3@@GCC_4.0.0+0x814>
    4594:	str	x22, [sp, #96]
    4598:	str	x25, [sp, #104]
    459c:	ldr	q1, [sp, #96]
    45a0:	ldr	q0, [sp, #96]
    45a4:	bl	2d30 <__unordtf2@plt>
    45a8:	cbz	w0, 4344 <__multc3@@GCC_4.0.0+0x440>
    45ac:	mov	x22, #0x0                   	// #0
    45b0:	mov	x0, #0x0                   	// #0
    45b4:	tbz	x25, #63, 45bc <__multc3@@GCC_4.0.0+0x6b8>
    45b8:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    45bc:	mov	x25, x0
    45c0:	b	4344 <__multc3@@GCC_4.0.0+0x440>
    45c4:	mov	x19, #0x0                   	// #0
    45c8:	mov	x0, #0x0                   	// #0
    45cc:	tbz	x24, #63, 45d4 <__multc3@@GCC_4.0.0+0x6d0>
    45d0:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    45d4:	mov	x24, x0
    45d8:	b	425c <__multc3@@GCC_4.0.0+0x358>
    45dc:	mov	x20, #0x0                   	// #0
    45e0:	mov	x0, #0x0                   	// #0
    45e4:	tbz	x23, #63, 45ec <__multc3@@GCC_4.0.0+0x6e8>
    45e8:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    45ec:	mov	x23, x0
    45f0:	b	4274 <__multc3@@GCC_4.0.0+0x370>
    45f4:	ldr	x0, [sp, #216]
    45f8:	and	x27, x0, #0x7fffffffffffffff
    45fc:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    4600:	add	x0, x0, #0xaa0
    4604:	ldr	q1, [x0]
    4608:	ldr	x28, [sp, #208]
    460c:	str	x28, [sp, #128]
    4610:	str	x27, [sp, #136]
    4614:	ldr	q0, [sp, #128]
    4618:	bl	2d30 <__unordtf2@plt>
    461c:	cbnz	w0, 4644 <__multc3@@GCC_4.0.0+0x740>
    4620:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    4624:	add	x0, x0, #0xaa0
    4628:	ldr	q1, [x0]
    462c:	str	x28, [sp, #128]
    4630:	str	x27, [sp, #136]
    4634:	ldr	q0, [sp, #128]
    4638:	bl	2bc0 <__letf2@plt>
    463c:	cmp	w0, #0x0
    4640:	b.gt	454c <__multc3@@GCC_4.0.0+0x648>
    4644:	ldr	x0, [sp, #168]
    4648:	and	x27, x0, #0x7fffffffffffffff
    464c:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    4650:	add	x0, x0, #0xaa0
    4654:	ldr	q1, [x0]
    4658:	ldr	x28, [sp, #160]
    465c:	str	x28, [sp, #128]
    4660:	str	x27, [sp, #136]
    4664:	ldr	q0, [sp, #128]
    4668:	bl	2d30 <__unordtf2@plt>
    466c:	cbnz	w0, 4694 <__multc3@@GCC_4.0.0+0x790>
    4670:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    4674:	add	x0, x0, #0xaa0
    4678:	ldr	q1, [x0]
    467c:	str	x28, [sp, #128]
    4680:	str	x27, [sp, #136]
    4684:	ldr	q0, [sp, #128]
    4688:	bl	2bc0 <__letf2@plt>
    468c:	cmp	w0, #0x0
    4690:	b.gt	454c <__multc3@@GCC_4.0.0+0x648>
    4694:	ldr	x0, [sp, #184]
    4698:	and	x27, x0, #0x7fffffffffffffff
    469c:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    46a0:	add	x0, x0, #0xaa0
    46a4:	ldr	q1, [x0]
    46a8:	ldr	x28, [sp, #176]
    46ac:	str	x28, [sp, #128]
    46b0:	str	x27, [sp, #136]
    46b4:	ldr	q0, [sp, #128]
    46b8:	bl	2d30 <__unordtf2@plt>
    46bc:	cbnz	w0, 43fc <__multc3@@GCC_4.0.0+0x4f8>
    46c0:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    46c4:	add	x0, x0, #0xaa0
    46c8:	ldr	q1, [x0]
    46cc:	str	x28, [sp, #128]
    46d0:	str	x27, [sp, #136]
    46d4:	ldr	q0, [sp, #128]
    46d8:	bl	2bc0 <__letf2@plt>
    46dc:	cmp	w0, #0x0
    46e0:	b.gt	454c <__multc3@@GCC_4.0.0+0x648>
    46e4:	b	43fc <__multc3@@GCC_4.0.0+0x4f8>
    46e8:	mov	x19, #0x0                   	// #0
    46ec:	mov	x0, #0x0                   	// #0
    46f0:	tbz	x24, #63, 46f8 <__multc3@@GCC_4.0.0+0x7f4>
    46f4:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    46f8:	mov	x24, x0
    46fc:	b	4564 <__multc3@@GCC_4.0.0+0x660>
    4700:	mov	x20, #0x0                   	// #0
    4704:	mov	x0, #0x0                   	// #0
    4708:	tbz	x23, #63, 4710 <__multc3@@GCC_4.0.0+0x80c>
    470c:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    4710:	mov	x23, x0
    4714:	b	457c <__multc3@@GCC_4.0.0+0x678>
    4718:	mov	x21, #0x0                   	// #0
    471c:	mov	x0, #0x0                   	// #0
    4720:	tbz	x26, #63, 4728 <__multc3@@GCC_4.0.0+0x824>
    4724:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    4728:	mov	x26, x0
    472c:	b	4594 <__multc3@@GCC_4.0.0+0x690>
    4730:	mov	v7.h[0], v0.h[0]
    4734:	mov	v16.h[0], v1.h[0]
    4738:	fcvt	s17, h2
    473c:	fabs	s17, s17
    4740:	fcvt	h17, s17
    4744:	fcvt	s18, h3
    4748:	fabs	s18, s18
    474c:	fcvt	h18, s18
    4750:	fcvt	s1, h17
    4754:	fcvt	s0, h18
    4758:	fcmpe	s1, s0
    475c:	b.pl	4834 <__multc3@@GCC_4.0.0+0x930>  // b.nfrst
    4760:	fcvt	s5, h2
    4764:	fcvt	s0, h3
    4768:	fdiv	s4, s5, s0
    476c:	fcvt	h4, s4
    4770:	fcvt	s4, h4
    4774:	fcvt	s1, h7
    4778:	fcvt	s6, h16
    477c:	fmul	s5, s5, s4
    4780:	fadd	s5, s5, s0
    4784:	fcvt	h5, s5
    4788:	fcvt	s5, h5
    478c:	fmul	s0, s4, s1
    4790:	fadd	s0, s0, s6
    4794:	fdiv	s0, s0, s5
    4798:	fcvt	h0, s0
    479c:	fmul	s4, s4, s6
    47a0:	fsub	s4, s4, s1
    47a4:	fdiv	s4, s4, s5
    47a8:	fcvt	h1, s4
    47ac:	fcvt	s4, h0
    47b0:	fcmp	s4, s4
    47b4:	cset	w1, vs
    47b8:	fcvt	s4, h1
    47bc:	fcmp	s4, s4
    47c0:	cset	w0, vs
    47c4:	tst	w1, w0
    47c8:	b.eq	4980 <__multc3@@GCC_4.0.0+0xa7c>  // b.none
    47cc:	fcvt	s6, h2
    47d0:	fcmp	s6, #0.0
    47d4:	b.ne	4884 <__multc3@@GCC_4.0.0+0x980>  // b.any
    47d8:	fcvt	s4, h3
    47dc:	fcmp	s4, #0.0
    47e0:	b.ne	4884 <__multc3@@GCC_4.0.0+0x980>  // b.any
    47e4:	fcvt	s4, h7
    47e8:	fcmp	s4, s4
    47ec:	cset	w0, vc
    47f0:	fcvt	s4, h16
    47f4:	fcmp	s4, s4
    47f8:	cset	w1, vc
    47fc:	orr	w0, w0, w1
    4800:	cbz	w0, 4884 <__multc3@@GCC_4.0.0+0x980>
    4804:	umov	w0, v2.h[0]
    4808:	movi	v1.4h, #0x7c, lsl #8
    480c:	tbz	w0, #15, 4814 <__multc3@@GCC_4.0.0+0x910>
    4810:	movi	v1.4h, #0xfc, lsl #8
    4814:	fcvt	s1, h1
    4818:	fcvt	s0, h7
    481c:	fmul	s0, s0, s1
    4820:	fcvt	h0, s0
    4824:	fcvt	s16, h16
    4828:	fmul	s1, s16, s1
    482c:	fcvt	h1, s1
    4830:	b	4980 <__multc3@@GCC_4.0.0+0xa7c>
    4834:	fcvt	s5, h3
    4838:	fcvt	s0, h2
    483c:	fdiv	s6, s5, s0
    4840:	fcvt	h6, s6
    4844:	fcvt	s6, h6
    4848:	fcvt	s1, h16
    484c:	fcvt	s19, h7
    4850:	fmul	s4, s5, s6
    4854:	fadd	s4, s4, s0
    4858:	fcvt	h4, s4
    485c:	fcvt	s4, h4
    4860:	fmul	s0, s6, s1
    4864:	fadd	s0, s0, s19
    4868:	fdiv	s0, s0, s4
    486c:	fcvt	h0, s0
    4870:	fmul	s6, s6, s19
    4874:	fsub	s6, s1, s6
    4878:	fdiv	s4, s6, s4
    487c:	fcvt	h1, s4
    4880:	b	47ac <__multc3@@GCC_4.0.0+0x8a8>
    4884:	fcvt	s4, h7
    4888:	fabs	s4, s4
    488c:	fcvt	h4, s4
    4890:	fcvt	s19, h4
    4894:	mov	w0, #0xe000                	// #57344
    4898:	movk	w0, #0x477f, lsl #16
    489c:	fmov	s5, w0
    48a0:	fcmp	s19, s5
    48a4:	b.gt	48c4 <__multc3@@GCC_4.0.0+0x9c0>
    48a8:	fcvt	s5, h16
    48ac:	fabs	s5, s5
    48b0:	fcvt	h5, s5
    48b4:	fcvt	s5, h5
    48b8:	fmov	s19, w0
    48bc:	fcmp	s5, s19
    48c0:	b.le	4984 <__multc3@@GCC_4.0.0+0xa80>
    48c4:	fcvt	s5, h17
    48c8:	mov	w0, #0xe000                	// #57344
    48cc:	movk	w0, #0x477f, lsl #16
    48d0:	fmov	s19, w0
    48d4:	fcmp	s5, s19
    48d8:	b.hi	4984 <__multc3@@GCC_4.0.0+0xa80>  // b.pmore
    48dc:	fcvt	s5, h18
    48e0:	fcmp	s5, s19
    48e4:	b.hi	4984 <__multc3@@GCC_4.0.0+0xa80>  // b.pmore
    48e8:	fcvt	s4, h4
    48ec:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    48f0:	ldr	s1, [x0, #2688]
    48f4:	fcmp	s4, s1
    48f8:	cset	w0, gt
    48fc:	scvtf	d0, w0
    4900:	umov	w0, v7.h[0]
    4904:	fcvt	h0, d0
    4908:	umov	w1, v0.h[0]
    490c:	bfxil	w0, w1, #0, #15
    4910:	dup	v2.4h, w0
    4914:	fcvt	s0, h16
    4918:	fabs	s0, s0
    491c:	fcvt	h0, s0
    4920:	fcvt	s0, h0
    4924:	fcmp	s0, s1
    4928:	cset	w0, gt
    492c:	scvtf	d0, w0
    4930:	umov	w0, v16.h[0]
    4934:	fcvt	h0, d0
    4938:	umov	w1, v0.h[0]
    493c:	bfxil	w0, w1, #0, #15
    4940:	dup	v1.4h, w0
    4944:	fcvt	s2, h2
    4948:	fcvt	s1, h1
    494c:	fcvt	s3, h3
    4950:	fmul	s0, s6, s2
    4954:	fmul	s4, s1, s3
    4958:	fadd	s0, s0, s4
    495c:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    4960:	ldr	s4, [x0, #2692]
    4964:	fmul	s0, s0, s4
    4968:	fcvt	h0, s0
    496c:	fmul	s6, s6, s1
    4970:	fmul	s1, s2, s3
    4974:	fsub	s1, s6, s1
    4978:	fmul	s1, s1, s4
    497c:	fcvt	h1, s1
    4980:	ret
    4984:	fcvt	s17, h17
    4988:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    498c:	ldr	s5, [x0, #2688]
    4990:	fcmp	s17, s5
    4994:	cset	w0, le
    4998:	fcvt	s18, h18
    499c:	fcmp	s18, s5
    49a0:	cset	w1, le
    49a4:	cmp	w0, #0x0
    49a8:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    49ac:	b.ne	4980 <__multc3@@GCC_4.0.0+0xa7c>  // b.any
    49b0:	fcvt	s4, h4
    49b4:	mov	w2, #0xe000                	// #57344
    49b8:	movk	w2, #0x477f, lsl #16
    49bc:	fmov	s5, w2
    49c0:	fcmp	s4, s5
    49c4:	b.hi	4980 <__multc3@@GCC_4.0.0+0xa7c>  // b.pmore
    49c8:	fcvt	s4, h16
    49cc:	fabs	s4, s4
    49d0:	fcvt	h4, s4
    49d4:	fcvt	s4, h4
    49d8:	fcmp	s4, s5
    49dc:	b.hi	4980 <__multc3@@GCC_4.0.0+0xa7c>  // b.pmore
    49e0:	eor	w0, w0, #0x1
    49e4:	scvtf	d0, w0
    49e8:	umov	w0, v2.h[0]
    49ec:	fcvt	h0, d0
    49f0:	umov	w2, v0.h[0]
    49f4:	bfxil	w0, w2, #0, #15
    49f8:	dup	v4.4h, w0
    49fc:	eor	w1, w1, #0x1
    4a00:	scvtf	d0, w1
    4a04:	umov	w0, v3.h[0]
    4a08:	fcvt	h0, d0
    4a0c:	umov	w1, v0.h[0]
    4a10:	bfxil	w0, w1, #0, #15
    4a14:	dup	v3.4h, w0
    4a18:	fcvt	s7, h7
    4a1c:	fcvt	s2, h4
    4a20:	fcvt	s1, h16
    4a24:	fcvt	s3, h3
    4a28:	fmul	s0, s7, s2
    4a2c:	fmul	s4, s1, s3
    4a30:	fadd	s0, s0, s4
    4a34:	fcvt	d0, s0
    4a38:	movi	d4, #0x0
    4a3c:	fmul	d0, d0, d4
    4a40:	fcvt	h0, d0
    4a44:	fmul	s2, s2, s1
    4a48:	fmul	s1, s7, s3
    4a4c:	fsub	s1, s2, s1
    4a50:	fcvt	d1, s1
    4a54:	fmul	d1, d1, d4
    4a58:	fcvt	h1, d1
    4a5c:	b	4980 <__multc3@@GCC_4.0.0+0xa7c>

0000000000004a60 <__divsc3@@GCC_4.0.0>:
    4a60:	fmov	s18, s0
    4a64:	fmov	s17, s1
    4a68:	fabs	s5, s2
    4a6c:	fabs	s7, s3
    4a70:	fcmpe	s5, s7
    4a74:	b.pl	4ae0 <__divsc3@@GCC_4.0.0+0x80>  // b.nfrst
    4a78:	fdiv	s4, s2, s3
    4a7c:	fmul	s6, s2, s4
    4a80:	fadd	s6, s6, s3
    4a84:	fmul	s16, s0, s4
    4a88:	fadd	s16, s16, s1
    4a8c:	fdiv	s0, s16, s6
    4a90:	fmul	s4, s1, s4
    4a94:	fsub	s4, s4, s18
    4a98:	fdiv	s1, s4, s6
    4a9c:	fcmp	s0, s0
    4aa0:	fccmp	s1, s1, #0x0, vs
    4aa4:	b.vc	4adc <__divsc3@@GCC_4.0.0+0x7c>
    4aa8:	fcmp	s2, #0.0
    4aac:	movi	v4.2s, #0x0
    4ab0:	fccmp	s3, s4, #0x0, eq  // eq = none
    4ab4:	b.ne	4b08 <__divsc3@@GCC_4.0.0+0xa8>  // b.any
    4ab8:	fcmp	s18, s18
    4abc:	fccmp	s17, s17, #0x0, vs
    4ac0:	b.vs	4b08 <__divsc3@@GCC_4.0.0+0xa8>
    4ac4:	mov	w0, #0x7f800000            	// #2139095040
    4ac8:	fmov	s3, w0
    4acc:	movi	v1.2s, #0x80, lsl #24
    4ad0:	bif	v2.8b, v3.8b, v1.8b
    4ad4:	fmul	s0, s2, s18
    4ad8:	fmul	s1, s2, s17
    4adc:	ret
    4ae0:	fdiv	s4, s3, s2
    4ae4:	fmul	s6, s3, s4
    4ae8:	fadd	s6, s6, s2
    4aec:	fmul	s16, s4, s1
    4af0:	fadd	s16, s16, s0
    4af4:	fdiv	s0, s16, s6
    4af8:	fmul	s4, s4, s18
    4afc:	fsub	s4, s1, s4
    4b00:	fdiv	s1, s4, s6
    4b04:	b	4a9c <__divsc3@@GCC_4.0.0+0x3c>
    4b08:	fabs	s4, s18
    4b0c:	mov	w0, #0x7f7fffff            	// #2139095039
    4b10:	fmov	s6, w0
    4b14:	fcmp	s4, s6
    4b18:	b.gt	4b28 <__divsc3@@GCC_4.0.0+0xc8>
    4b1c:	fabs	s16, s17
    4b20:	fcmp	s16, s6
    4b24:	b.le	4b9c <__divsc3@@GCC_4.0.0+0x13c>
    4b28:	mov	w0, #0x7f7fffff            	// #2139095039
    4b2c:	fmov	s6, w0
    4b30:	fcmp	s5, s6
    4b34:	b.hi	4b9c <__divsc3@@GCC_4.0.0+0x13c>  // b.pmore
    4b38:	fcmp	s7, s6
    4b3c:	b.hi	4b9c <__divsc3@@GCC_4.0.0+0x13c>  // b.pmore
    4b40:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    4b44:	ldr	s0, [x0, #2696]
    4b48:	fcmp	s4, s0
    4b4c:	cset	w0, gt
    4b50:	scvtf	s1, w0
    4b54:	movi	v4.2s, #0x80, lsl #24
    4b58:	bit	v1.8b, v18.8b, v4.8b
    4b5c:	fabs	s5, s17
    4b60:	fcmp	s5, s0
    4b64:	cset	w0, gt
    4b68:	scvtf	s0, w0
    4b6c:	bsl	v4.8b, v17.8b, v0.8b
    4b70:	fmul	s0, s2, s1
    4b74:	fmul	s5, s3, s4
    4b78:	fadd	s0, s0, s5
    4b7c:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    4b80:	ldr	s5, [x0, #2692]
    4b84:	fmul	s0, s0, s5
    4b88:	fmul	s4, s2, s4
    4b8c:	fmul	s1, s3, s1
    4b90:	fsub	s1, s4, s1
    4b94:	fmul	s1, s1, s5
    4b98:	b	4adc <__divsc3@@GCC_4.0.0+0x7c>
    4b9c:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    4ba0:	ldr	s6, [x0, #2696]
    4ba4:	fcmp	s5, s6
    4ba8:	cset	w1, le
    4bac:	fcmp	s7, s6
    4bb0:	cset	w0, le
    4bb4:	cmp	w1, #0x0
    4bb8:	ccmp	w0, #0x0, #0x4, ne  // ne = any
    4bbc:	b.ne	4adc <__divsc3@@GCC_4.0.0+0x7c>  // b.any
    4bc0:	mov	w2, #0x7f7fffff            	// #2139095039
    4bc4:	fmov	s5, w2
    4bc8:	fcmp	s4, s5
    4bcc:	b.hi	4adc <__divsc3@@GCC_4.0.0+0x7c>  // b.pmore
    4bd0:	fabs	s5, s17
    4bd4:	fmov	s4, w2
    4bd8:	fcmp	s5, s4
    4bdc:	b.hi	4adc <__divsc3@@GCC_4.0.0+0x7c>  // b.pmore
    4be0:	eor	w1, w1, #0x1
    4be4:	scvtf	s4, w1
    4be8:	movi	v0.2s, #0x80, lsl #24
    4bec:	bit	v4.8b, v2.8b, v0.8b
    4bf0:	eor	w0, w0, #0x1
    4bf4:	scvtf	s1, w0
    4bf8:	bit	v1.8b, v3.8b, v0.8b
    4bfc:	fmul	s0, s18, s4
    4c00:	fmul	s2, s17, s1
    4c04:	fadd	s0, s0, s2
    4c08:	movi	v3.2s, #0x0
    4c0c:	fmul	s0, s0, s3
    4c10:	fmul	s4, s17, s4
    4c14:	fmul	s1, s18, s1
    4c18:	fsub	s1, s4, s1
    4c1c:	fmul	s1, s1, s3
    4c20:	b	4adc <__divsc3@@GCC_4.0.0+0x7c>

0000000000004c24 <__divdc3@@GCC_4.0.0>:
    4c24:	fmov	d18, d0
    4c28:	fmov	d17, d1
    4c2c:	fabs	d5, d2
    4c30:	fabs	d7, d3
    4c34:	fcmpe	d5, d7
    4c38:	b.pl	4ca8 <__divdc3@@GCC_4.0.0+0x84>  // b.nfrst
    4c3c:	fdiv	d4, d2, d3
    4c40:	fmul	d6, d2, d4
    4c44:	fadd	d6, d6, d3
    4c48:	fmul	d16, d0, d4
    4c4c:	fadd	d16, d16, d1
    4c50:	fdiv	d0, d16, d6
    4c54:	fmul	d4, d1, d4
    4c58:	fsub	d4, d4, d18
    4c5c:	fdiv	d1, d4, d6
    4c60:	fcmp	d0, d0
    4c64:	fccmp	d1, d1, #0x0, vs
    4c68:	b.vc	4ca4 <__divdc3@@GCC_4.0.0+0x80>
    4c6c:	fcmp	d2, #0.0
    4c70:	movi	d4, #0x0
    4c74:	fccmp	d3, d4, #0x0, eq  // eq = none
    4c78:	b.ne	4cd0 <__divdc3@@GCC_4.0.0+0xac>  // b.any
    4c7c:	fcmp	d18, d18
    4c80:	fccmp	d17, d17, #0x0, vs
    4c84:	b.vs	4cd0 <__divdc3@@GCC_4.0.0+0xac>
    4c88:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
    4c8c:	fmov	d3, x0
    4c90:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    4c94:	fmov	d1, x0
    4c98:	bif	v2.8b, v3.8b, v1.8b
    4c9c:	fmul	d0, d2, d18
    4ca0:	fmul	d1, d2, d17
    4ca4:	ret
    4ca8:	fdiv	d4, d3, d2
    4cac:	fmul	d6, d3, d4
    4cb0:	fadd	d6, d6, d2
    4cb4:	fmul	d16, d4, d1
    4cb8:	fadd	d16, d16, d0
    4cbc:	fdiv	d0, d16, d6
    4cc0:	fmul	d4, d4, d18
    4cc4:	fsub	d4, d1, d4
    4cc8:	fdiv	d1, d4, d6
    4ccc:	b	4c60 <__divdc3@@GCC_4.0.0+0x3c>
    4cd0:	fabs	d4, d18
    4cd4:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    4cd8:	fmov	d6, x0
    4cdc:	fcmp	d4, d6
    4ce0:	b.gt	4cf0 <__divdc3@@GCC_4.0.0+0xcc>
    4ce4:	fabs	d16, d17
    4ce8:	fcmp	d16, d6
    4cec:	b.le	4d68 <__divdc3@@GCC_4.0.0+0x144>
    4cf0:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    4cf4:	fmov	d6, x0
    4cf8:	fcmp	d5, d6
    4cfc:	b.hi	4d68 <__divdc3@@GCC_4.0.0+0x144>  // b.pmore
    4d00:	fcmp	d7, d6
    4d04:	b.hi	4d68 <__divdc3@@GCC_4.0.0+0x144>  // b.pmore
    4d08:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    4d0c:	ldr	d0, [x0, #2704]
    4d10:	fcmp	d4, d0
    4d14:	cset	w0, gt
    4d18:	scvtf	d1, w0
    4d1c:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    4d20:	fmov	d4, x0
    4d24:	bit	v1.8b, v18.8b, v4.8b
    4d28:	fabs	d5, d17
    4d2c:	fcmp	d5, d0
    4d30:	cset	w0, gt
    4d34:	scvtf	d0, w0
    4d38:	bsl	v4.8b, v17.8b, v0.8b
    4d3c:	fmul	d0, d2, d1
    4d40:	fmul	d5, d3, d4
    4d44:	fadd	d0, d0, d5
    4d48:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    4d4c:	ldr	d5, [x0, #2712]
    4d50:	fmul	d0, d0, d5
    4d54:	fmul	d4, d2, d4
    4d58:	fmul	d1, d3, d1
    4d5c:	fsub	d1, d4, d1
    4d60:	fmul	d1, d1, d5
    4d64:	b	4ca4 <__divdc3@@GCC_4.0.0+0x80>
    4d68:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    4d6c:	ldr	d6, [x0, #2704]
    4d70:	fcmp	d5, d6
    4d74:	cset	w1, le
    4d78:	fcmp	d7, d6
    4d7c:	cset	w0, le
    4d80:	cmp	w1, #0x0
    4d84:	ccmp	w0, #0x0, #0x4, ne  // ne = any
    4d88:	b.ne	4ca4 <__divdc3@@GCC_4.0.0+0x80>  // b.any
    4d8c:	mov	x2, #0x7fefffffffffffff    	// #9218868437227405311
    4d90:	fmov	d5, x2
    4d94:	fcmp	d4, d5
    4d98:	b.hi	4ca4 <__divdc3@@GCC_4.0.0+0x80>  // b.pmore
    4d9c:	fabs	d5, d17
    4da0:	fmov	d4, x2
    4da4:	fcmp	d5, d4
    4da8:	b.hi	4ca4 <__divdc3@@GCC_4.0.0+0x80>  // b.pmore
    4dac:	eor	w1, w1, #0x1
    4db0:	scvtf	d4, w1
    4db4:	mov	x1, #0x8000000000000000    	// #-9223372036854775808
    4db8:	fmov	d0, x1
    4dbc:	bit	v4.8b, v2.8b, v0.8b
    4dc0:	eor	w0, w0, #0x1
    4dc4:	scvtf	d1, w0
    4dc8:	bit	v1.8b, v3.8b, v0.8b
    4dcc:	fmul	d0, d18, d4
    4dd0:	fmul	d2, d17, d1
    4dd4:	fadd	d0, d0, d2
    4dd8:	movi	d3, #0x0
    4ddc:	fmul	d0, d0, d3
    4de0:	fmul	d4, d17, d4
    4de4:	fmul	d1, d18, d1
    4de8:	fsub	d1, d4, d1
    4dec:	fmul	d1, d1, d3
    4df0:	b	4ca4 <__divdc3@@GCC_4.0.0+0x80>

0000000000004df4 <__divtc3@@GCC_4.0.0>:
    4df4:	stp	x29, x30, [sp, #-176]!
    4df8:	mov	x29, sp
    4dfc:	stp	x19, x20, [sp, #16]
    4e00:	stp	x21, x22, [sp, #32]
    4e04:	stp	x23, x24, [sp, #48]
    4e08:	stp	x25, x26, [sp, #64]
    4e0c:	stp	x27, x28, [sp, #80]
    4e10:	str	q0, [sp, #96]
    4e14:	ldr	x21, [sp, #96]
    4e18:	ldr	x24, [sp, #104]
    4e1c:	str	q1, [sp, #96]
    4e20:	ldr	x0, [sp, #96]
    4e24:	ldr	x25, [sp, #104]
    4e28:	mov	x28, x0
    4e2c:	str	x0, [sp, #128]
    4e30:	str	q2, [sp, #96]
    4e34:	ldr	x19, [sp, #96]
    4e38:	ldr	x22, [sp, #104]
    4e3c:	str	q3, [sp, #96]
    4e40:	ldr	x20, [sp, #96]
    4e44:	ldr	x23, [sp, #104]
    4e48:	and	x26, x22, #0x7fffffffffffffff
    4e4c:	and	x27, x23, #0x7fffffffffffffff
    4e50:	str	x27, [sp, #104]
    4e54:	ldr	q1, [sp, #96]
    4e58:	str	x19, [sp, #96]
    4e5c:	str	x26, [sp, #104]
    4e60:	ldr	q0, [sp, #96]
    4e64:	bl	2cf0 <__lttf2@plt>
    4e68:	tbz	w0, #31, 5048 <__divtc3@@GCC_4.0.0+0x254>
    4e6c:	str	x20, [sp, #96]
    4e70:	str	x23, [sp, #104]
    4e74:	ldr	q1, [sp, #96]
    4e78:	str	x19, [sp, #96]
    4e7c:	str	x22, [sp, #104]
    4e80:	ldr	q0, [sp, #96]
    4e84:	bl	2c60 <__divtf3@plt>
    4e88:	str	q0, [sp, #112]
    4e8c:	mov	v1.16b, v0.16b
    4e90:	str	x19, [sp, #96]
    4e94:	str	x22, [sp, #104]
    4e98:	ldr	q0, [sp, #96]
    4e9c:	bl	2b10 <__multf3@plt>
    4ea0:	str	x20, [sp, #96]
    4ea4:	str	x23, [sp, #104]
    4ea8:	ldr	q1, [sp, #96]
    4eac:	bl	2c20 <__addtf3@plt>
    4eb0:	str	q0, [sp, #144]
    4eb4:	ldr	q1, [sp, #112]
    4eb8:	str	x21, [sp, #96]
    4ebc:	str	x24, [sp, #104]
    4ec0:	ldr	q0, [sp, #96]
    4ec4:	bl	2b10 <__multf3@plt>
    4ec8:	str	x28, [sp, #96]
    4ecc:	str	x25, [sp, #104]
    4ed0:	ldr	q1, [sp, #96]
    4ed4:	bl	2c20 <__addtf3@plt>
    4ed8:	ldr	q1, [sp, #144]
    4edc:	bl	2c60 <__divtf3@plt>
    4ee0:	str	q0, [sp, #96]
    4ee4:	ldr	q1, [sp, #112]
    4ee8:	str	x28, [sp, #112]
    4eec:	str	x25, [sp, #120]
    4ef0:	ldr	q0, [sp, #112]
    4ef4:	bl	2b10 <__multf3@plt>
    4ef8:	str	x21, [sp, #112]
    4efc:	str	x24, [sp, #120]
    4f00:	ldr	q1, [sp, #112]
    4f04:	bl	2d80 <__subtf3@plt>
    4f08:	ldr	q1, [sp, #144]
    4f0c:	bl	2c60 <__divtf3@plt>
    4f10:	str	q0, [sp, #112]
    4f14:	ldr	q0, [sp, #96]
    4f18:	mov	v1.16b, v0.16b
    4f1c:	bl	2d30 <__unordtf2@plt>
    4f20:	cmp	w0, #0x0
    4f24:	cset	w28, ne  // ne = any
    4f28:	ldr	q0, [sp, #112]
    4f2c:	mov	v1.16b, v0.16b
    4f30:	bl	2d30 <__unordtf2@plt>
    4f34:	cmp	w0, #0x0
    4f38:	cset	w0, ne  // ne = any
    4f3c:	tst	w0, w28
    4f40:	b.eq	5024 <__divtc3@@GCC_4.0.0+0x230>  // b.none
    4f44:	movi	v1.2d, #0x0
    4f48:	str	x19, [sp, #144]
    4f4c:	str	x22, [sp, #152]
    4f50:	ldr	q0, [sp, #144]
    4f54:	bl	2b30 <__eqtf2@plt>
    4f58:	cmp	w0, #0x0
    4f5c:	cset	w28, eq  // eq = none
    4f60:	movi	v1.2d, #0x0
    4f64:	str	x20, [sp, #144]
    4f68:	str	x23, [sp, #152]
    4f6c:	ldr	q0, [sp, #144]
    4f70:	bl	2b30 <__eqtf2@plt>
    4f74:	cmp	w0, #0x0
    4f78:	cset	w0, eq  // eq = none
    4f7c:	tst	w0, w28
    4f80:	b.eq	50fc <__divtc3@@GCC_4.0.0+0x308>  // b.none
    4f84:	str	x21, [sp, #144]
    4f88:	str	x24, [sp, #152]
    4f8c:	ldr	q1, [sp, #144]
    4f90:	ldr	q0, [sp, #144]
    4f94:	bl	2d30 <__unordtf2@plt>
    4f98:	cmp	w0, #0x0
    4f9c:	cset	w28, eq  // eq = none
    4fa0:	ldr	x0, [sp, #128]
    4fa4:	str	x0, [sp, #144]
    4fa8:	str	x25, [sp, #152]
    4fac:	ldr	q1, [sp, #144]
    4fb0:	ldr	q0, [sp, #144]
    4fb4:	bl	2d30 <__unordtf2@plt>
    4fb8:	cmp	w0, #0x0
    4fbc:	cset	w0, eq  // eq = none
    4fc0:	orr	w28, w28, w0
    4fc4:	tst	w28, #0xff
    4fc8:	b.eq	50fc <__divtc3@@GCC_4.0.0+0x308>  // b.none
    4fcc:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    4fd0:	add	x0, x0, #0xab0
    4fd4:	ldr	q0, [x0]
    4fd8:	str	q0, [sp, #144]
    4fdc:	tbz	x22, #63, 4ff0 <__divtc3@@GCC_4.0.0+0x1fc>
    4fe0:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    4fe4:	add	x0, x0, #0xac0
    4fe8:	ldr	q0, [x0]
    4fec:	str	q0, [sp, #144]
    4ff0:	str	x21, [sp, #96]
    4ff4:	str	x24, [sp, #104]
    4ff8:	ldr	q1, [sp, #96]
    4ffc:	ldr	q0, [sp, #144]
    5000:	bl	2b10 <__multf3@plt>
    5004:	str	q0, [sp, #96]
    5008:	ldr	x0, [sp, #128]
    500c:	str	x0, [sp, #112]
    5010:	str	x25, [sp, #120]
    5014:	ldr	q1, [sp, #112]
    5018:	ldr	q0, [sp, #144]
    501c:	bl	2b10 <__multf3@plt>
    5020:	str	q0, [sp, #112]
    5024:	ldr	q0, [sp, #96]
    5028:	ldr	q1, [sp, #112]
    502c:	ldp	x19, x20, [sp, #16]
    5030:	ldp	x21, x22, [sp, #32]
    5034:	ldp	x23, x24, [sp, #48]
    5038:	ldp	x25, x26, [sp, #64]
    503c:	ldp	x27, x28, [sp, #80]
    5040:	ldp	x29, x30, [sp], #176
    5044:	ret
    5048:	str	x19, [sp, #96]
    504c:	str	x22, [sp, #104]
    5050:	ldr	q1, [sp, #96]
    5054:	str	x20, [sp, #96]
    5058:	str	x23, [sp, #104]
    505c:	ldr	q0, [sp, #96]
    5060:	bl	2c60 <__divtf3@plt>
    5064:	str	q0, [sp, #144]
    5068:	mov	v1.16b, v0.16b
    506c:	str	x20, [sp, #96]
    5070:	str	x23, [sp, #104]
    5074:	ldr	q0, [sp, #96]
    5078:	bl	2b10 <__multf3@plt>
    507c:	str	x19, [sp, #96]
    5080:	str	x22, [sp, #104]
    5084:	ldr	q1, [sp, #96]
    5088:	bl	2c20 <__addtf3@plt>
    508c:	str	q0, [sp, #160]
    5090:	ldr	x28, [sp, #128]
    5094:	str	x28, [sp, #96]
    5098:	str	x25, [sp, #104]
    509c:	ldr	q1, [sp, #96]
    50a0:	ldr	q0, [sp, #144]
    50a4:	bl	2b10 <__multf3@plt>
    50a8:	str	x21, [sp, #96]
    50ac:	str	x24, [sp, #104]
    50b0:	ldr	q1, [sp, #96]
    50b4:	bl	2c20 <__addtf3@plt>
    50b8:	ldr	q1, [sp, #160]
    50bc:	bl	2c60 <__divtf3@plt>
    50c0:	str	q0, [sp, #96]
    50c4:	str	x21, [sp, #112]
    50c8:	str	x24, [sp, #120]
    50cc:	ldr	q1, [sp, #112]
    50d0:	ldr	q0, [sp, #144]
    50d4:	bl	2b10 <__multf3@plt>
    50d8:	mov	v1.16b, v0.16b
    50dc:	str	x28, [sp, #112]
    50e0:	str	x25, [sp, #120]
    50e4:	ldr	q0, [sp, #112]
    50e8:	bl	2d80 <__subtf3@plt>
    50ec:	ldr	q1, [sp, #160]
    50f0:	bl	2c60 <__divtf3@plt>
    50f4:	str	q0, [sp, #112]
    50f8:	b	4f14 <__divtc3@@GCC_4.0.0+0x120>
    50fc:	and	x28, x24, #0x7fffffffffffffff
    5100:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    5104:	add	x0, x0, #0xaa0
    5108:	ldr	q1, [x0]
    510c:	str	x21, [sp, #144]
    5110:	str	x28, [sp, #152]
    5114:	ldr	q0, [sp, #144]
    5118:	bl	2d30 <__unordtf2@plt>
    511c:	cbnz	w0, 5358 <__divtc3@@GCC_4.0.0+0x564>
    5120:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    5124:	add	x0, x0, #0xaa0
    5128:	ldr	q1, [x0]
    512c:	str	x21, [sp, #144]
    5130:	str	x28, [sp, #152]
    5134:	ldr	q0, [sp, #144]
    5138:	bl	2bc0 <__letf2@plt>
    513c:	cmp	w0, #0x0
    5140:	b.le	5358 <__divtc3@@GCC_4.0.0+0x564>
    5144:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    5148:	add	x0, x0, #0xaa0
    514c:	ldr	q1, [x0]
    5150:	str	x19, [sp, #144]
    5154:	str	x26, [sp, #152]
    5158:	ldr	q0, [sp, #144]
    515c:	bl	2d30 <__unordtf2@plt>
    5160:	cbnz	w0, 53b0 <__divtc3@@GCC_4.0.0+0x5bc>
    5164:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    5168:	add	x0, x0, #0xaa0
    516c:	ldr	q1, [x0]
    5170:	str	x19, [sp, #144]
    5174:	str	x26, [sp, #152]
    5178:	ldr	q0, [sp, #144]
    517c:	bl	2bf0 <__gttf2@plt>
    5180:	cmp	w0, #0x0
    5184:	b.gt	53b0 <__divtc3@@GCC_4.0.0+0x5bc>
    5188:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    518c:	add	x0, x0, #0xaa0
    5190:	ldr	q1, [x0]
    5194:	str	x20, [sp, #144]
    5198:	str	x27, [sp, #152]
    519c:	ldr	q0, [sp, #144]
    51a0:	bl	2d30 <__unordtf2@plt>
    51a4:	cbnz	w0, 53b0 <__divtc3@@GCC_4.0.0+0x5bc>
    51a8:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    51ac:	add	x0, x0, #0xaa0
    51b0:	ldr	q1, [x0]
    51b4:	str	x20, [sp, #144]
    51b8:	str	x27, [sp, #152]
    51bc:	ldr	q0, [sp, #144]
    51c0:	bl	2bf0 <__gttf2@plt>
    51c4:	cmp	w0, #0x0
    51c8:	b.gt	53b0 <__divtc3@@GCC_4.0.0+0x5bc>
    51cc:	mov	w26, #0x1                   	// #1
    51d0:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    51d4:	add	x0, x0, #0xaa0
    51d8:	ldr	q1, [x0]
    51dc:	str	x21, [sp, #96]
    51e0:	str	x28, [sp, #104]
    51e4:	ldr	q0, [sp, #96]
    51e8:	bl	2d30 <__unordtf2@plt>
    51ec:	cbnz	w0, 5214 <__divtc3@@GCC_4.0.0+0x420>
    51f0:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    51f4:	add	x0, x0, #0xaa0
    51f8:	ldr	q1, [x0]
    51fc:	str	x21, [sp, #96]
    5200:	str	x28, [sp, #104]
    5204:	ldr	q0, [sp, #96]
    5208:	bl	2bc0 <__letf2@plt>
    520c:	cmp	w0, #0x0
    5210:	csel	w26, w26, wzr, le
    5214:	eor	w0, w26, #0x1
    5218:	and	w0, w0, #0x1
    521c:	bl	2d70 <__floatsitf@plt>
    5220:	str	q0, [sp, #96]
    5224:	ldr	x21, [sp, #96]
    5228:	ldr	x0, [sp, #104]
    522c:	bfxil	x24, x0, #0, #63
    5230:	and	x27, x25, #0x7fffffffffffffff
    5234:	mov	w26, #0x1                   	// #1
    5238:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    523c:	add	x0, x0, #0xaa0
    5240:	ldr	q1, [x0]
    5244:	ldr	x28, [sp, #128]
    5248:	str	x28, [sp, #96]
    524c:	str	x27, [sp, #104]
    5250:	ldr	q0, [sp, #96]
    5254:	bl	2d30 <__unordtf2@plt>
    5258:	cbnz	w0, 5280 <__divtc3@@GCC_4.0.0+0x48c>
    525c:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    5260:	add	x0, x0, #0xaa0
    5264:	ldr	q1, [x0]
    5268:	str	x28, [sp, #96]
    526c:	str	x27, [sp, #104]
    5270:	ldr	q0, [sp, #96]
    5274:	bl	2bc0 <__letf2@plt>
    5278:	cmp	w0, #0x0
    527c:	csel	w26, w26, wzr, le
    5280:	eor	w0, w26, #0x1
    5284:	and	w0, w0, #0x1
    5288:	bl	2d70 <__floatsitf@plt>
    528c:	str	q0, [sp, #96]
    5290:	ldr	x26, [sp, #96]
    5294:	ldr	x0, [sp, #104]
    5298:	bfxil	x25, x0, #0, #63
    529c:	str	x21, [sp, #96]
    52a0:	str	x24, [sp, #104]
    52a4:	ldr	q1, [sp, #96]
    52a8:	str	x19, [sp, #96]
    52ac:	str	x22, [sp, #104]
    52b0:	ldr	q0, [sp, #96]
    52b4:	bl	2b10 <__multf3@plt>
    52b8:	str	q0, [sp, #112]
    52bc:	str	x26, [sp, #96]
    52c0:	str	x25, [sp, #104]
    52c4:	ldr	q1, [sp, #96]
    52c8:	str	x20, [sp, #96]
    52cc:	str	x23, [sp, #104]
    52d0:	ldr	q0, [sp, #96]
    52d4:	bl	2b10 <__multf3@plt>
    52d8:	mov	v1.16b, v0.16b
    52dc:	ldr	q0, [sp, #112]
    52e0:	bl	2c20 <__addtf3@plt>
    52e4:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    52e8:	add	x0, x0, #0xab0
    52ec:	ldr	q1, [x0]
    52f0:	bl	2b10 <__multf3@plt>
    52f4:	str	q0, [sp, #96]
    52f8:	str	x26, [sp, #112]
    52fc:	str	x25, [sp, #120]
    5300:	ldr	q1, [sp, #112]
    5304:	str	x19, [sp, #112]
    5308:	str	x22, [sp, #120]
    530c:	ldr	q0, [sp, #112]
    5310:	bl	2b10 <__multf3@plt>
    5314:	str	q0, [sp, #128]
    5318:	str	x21, [sp, #112]
    531c:	str	x24, [sp, #120]
    5320:	ldr	q1, [sp, #112]
    5324:	str	x20, [sp, #112]
    5328:	str	x23, [sp, #120]
    532c:	ldr	q0, [sp, #112]
    5330:	bl	2b10 <__multf3@plt>
    5334:	mov	v1.16b, v0.16b
    5338:	ldr	q0, [sp, #128]
    533c:	bl	2d80 <__subtf3@plt>
    5340:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    5344:	add	x0, x0, #0xab0
    5348:	ldr	q1, [x0]
    534c:	bl	2b10 <__multf3@plt>
    5350:	str	q0, [sp, #112]
    5354:	b	5024 <__divtc3@@GCC_4.0.0+0x230>
    5358:	and	x1, x25, #0x7fffffffffffffff
    535c:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    5360:	add	x0, x0, #0xaa0
    5364:	ldr	q1, [x0]
    5368:	ldr	x0, [sp, #128]
    536c:	str	x0, [sp, #144]
    5370:	str	x1, [sp, #160]
    5374:	str	x1, [sp, #152]
    5378:	ldr	q0, [sp, #144]
    537c:	bl	2d30 <__unordtf2@plt>
    5380:	cbnz	w0, 53b0 <__divtc3@@GCC_4.0.0+0x5bc>
    5384:	adrp	x2, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    5388:	add	x2, x2, #0xaa0
    538c:	ldr	q1, [x2]
    5390:	ldr	x0, [sp, #128]
    5394:	str	x0, [sp, #144]
    5398:	ldr	x1, [sp, #160]
    539c:	str	x1, [sp, #152]
    53a0:	ldr	q0, [sp, #144]
    53a4:	bl	2bc0 <__letf2@plt>
    53a8:	cmp	w0, #0x0
    53ac:	b.gt	5144 <__divtc3@@GCC_4.0.0+0x350>
    53b0:	mov	w0, #0x1                   	// #1
    53b4:	strb	w0, [sp, #160]
    53b8:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    53bc:	add	x0, x0, #0xaa0
    53c0:	ldr	q1, [x0]
    53c4:	str	x19, [sp, #144]
    53c8:	str	x26, [sp, #152]
    53cc:	ldr	q0, [sp, #144]
    53d0:	bl	2d30 <__unordtf2@plt>
    53d4:	cbnz	w0, 5404 <__divtc3@@GCC_4.0.0+0x610>
    53d8:	adrp	x1, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    53dc:	add	x1, x1, #0xaa0
    53e0:	ldr	q1, [x1]
    53e4:	str	x19, [sp, #144]
    53e8:	str	x26, [sp, #152]
    53ec:	ldr	q0, [sp, #144]
    53f0:	bl	2bc0 <__letf2@plt>
    53f4:	cmp	w0, #0x0
    53f8:	ldrb	w0, [sp, #160]
    53fc:	csel	w0, w0, wzr, le
    5400:	strb	w0, [sp, #160]
    5404:	ldrb	w26, [sp, #160]
    5408:	mov	w19, #0x1                   	// #1
    540c:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    5410:	add	x0, x0, #0xaa0
    5414:	ldr	q1, [x0]
    5418:	str	x20, [sp, #144]
    541c:	str	x27, [sp, #152]
    5420:	ldr	q0, [sp, #144]
    5424:	bl	2d30 <__unordtf2@plt>
    5428:	cbnz	w0, 5450 <__divtc3@@GCC_4.0.0+0x65c>
    542c:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    5430:	add	x0, x0, #0xaa0
    5434:	ldr	q1, [x0]
    5438:	str	x20, [sp, #144]
    543c:	str	x27, [sp, #152]
    5440:	ldr	q0, [sp, #144]
    5444:	bl	2bc0 <__letf2@plt>
    5448:	cmp	w0, #0x0
    544c:	csel	w19, w19, wzr, le
    5450:	and	w19, w19, #0xff
    5454:	cmp	w26, #0x0
    5458:	ccmp	w19, #0x0, #0x4, ne  // ne = any
    545c:	b.ne	5024 <__divtc3@@GCC_4.0.0+0x230>  // b.any
    5460:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    5464:	add	x0, x0, #0xaa0
    5468:	ldr	q1, [x0]
    546c:	str	x21, [sp, #144]
    5470:	str	x28, [sp, #152]
    5474:	ldr	q0, [sp, #144]
    5478:	bl	2d30 <__unordtf2@plt>
    547c:	cbnz	w0, 5024 <__divtc3@@GCC_4.0.0+0x230>
    5480:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    5484:	add	x0, x0, #0xaa0
    5488:	ldr	q1, [x0]
    548c:	str	x21, [sp, #144]
    5490:	str	x28, [sp, #152]
    5494:	ldr	q0, [sp, #144]
    5498:	bl	2bf0 <__gttf2@plt>
    549c:	cmp	w0, #0x0
    54a0:	b.gt	5024 <__divtc3@@GCC_4.0.0+0x230>
    54a4:	and	x20, x25, #0x7fffffffffffffff
    54a8:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    54ac:	add	x0, x0, #0xaa0
    54b0:	ldr	q1, [x0]
    54b4:	ldr	x27, [sp, #128]
    54b8:	str	x27, [sp, #144]
    54bc:	str	x20, [sp, #152]
    54c0:	ldr	q0, [sp, #144]
    54c4:	bl	2d30 <__unordtf2@plt>
    54c8:	cbnz	w0, 5024 <__divtc3@@GCC_4.0.0+0x230>
    54cc:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    54d0:	add	x0, x0, #0xaa0
    54d4:	ldr	q1, [x0]
    54d8:	str	x27, [sp, #128]
    54dc:	str	x20, [sp, #136]
    54e0:	ldr	q0, [sp, #128]
    54e4:	bl	2bf0 <__gttf2@plt>
    54e8:	cmp	w0, #0x0
    54ec:	b.gt	5024 <__divtc3@@GCC_4.0.0+0x230>
    54f0:	eor	w0, w26, #0x1
    54f4:	bl	2d70 <__floatsitf@plt>
    54f8:	str	q0, [sp, #96]
    54fc:	ldr	x20, [sp, #96]
    5500:	ldr	x0, [sp, #104]
    5504:	bfxil	x22, x0, #0, #63
    5508:	eor	w0, w19, #0x1
    550c:	bl	2d70 <__floatsitf@plt>
    5510:	str	q0, [sp, #96]
    5514:	ldr	x19, [sp, #96]
    5518:	ldr	x0, [sp, #104]
    551c:	bfxil	x23, x0, #0, #63
    5520:	str	x20, [sp, #96]
    5524:	str	x22, [sp, #104]
    5528:	ldr	q1, [sp, #96]
    552c:	str	x21, [sp, #96]
    5530:	str	x24, [sp, #104]
    5534:	ldr	q0, [sp, #96]
    5538:	bl	2b10 <__multf3@plt>
    553c:	str	q0, [sp, #112]
    5540:	str	x19, [sp, #96]
    5544:	str	x23, [sp, #104]
    5548:	ldr	q1, [sp, #96]
    554c:	str	x27, [sp, #96]
    5550:	str	x25, [sp, #104]
    5554:	ldr	q0, [sp, #96]
    5558:	bl	2b10 <__multf3@plt>
    555c:	mov	v1.16b, v0.16b
    5560:	ldr	q0, [sp, #112]
    5564:	bl	2c20 <__addtf3@plt>
    5568:	movi	v1.2d, #0x0
    556c:	bl	2b10 <__multf3@plt>
    5570:	str	q0, [sp, #96]
    5574:	str	x20, [sp, #112]
    5578:	str	x22, [sp, #120]
    557c:	ldr	q1, [sp, #112]
    5580:	str	x27, [sp, #112]
    5584:	str	x25, [sp, #120]
    5588:	ldr	q0, [sp, #112]
    558c:	bl	2b10 <__multf3@plt>
    5590:	str	q0, [sp, #128]
    5594:	str	x19, [sp, #112]
    5598:	str	x23, [sp, #120]
    559c:	ldr	q1, [sp, #112]
    55a0:	str	x21, [sp, #112]
    55a4:	str	x24, [sp, #120]
    55a8:	ldr	q0, [sp, #112]
    55ac:	bl	2b10 <__multf3@plt>
    55b0:	mov	v1.16b, v0.16b
    55b4:	ldr	q0, [sp, #128]
    55b8:	bl	2d80 <__subtf3@plt>
    55bc:	movi	v1.2d, #0x0
    55c0:	bl	2b10 <__multf3@plt>
    55c4:	str	q0, [sp, #112]
    55c8:	b	5024 <__divtc3@@GCC_4.0.0+0x230>

00000000000055cc <__bswapsi2@@GCC_4.3.0>:
    55cc:	asr	w1, w0, #8
    55d0:	and	w1, w1, #0xff00
    55d4:	lsl	w2, w0, #8
    55d8:	and	w2, w2, #0xff0000
    55dc:	orr	w1, w1, w2
    55e0:	lsl	w2, w0, #24
    55e4:	orr	w0, w2, w0, lsr #24
    55e8:	orr	w0, w1, w0
    55ec:	ret

00000000000055f0 <__bswapdi2@@GCC_4.3.0>:
    55f0:	lsr	x2, x0, #40
    55f4:	and	x2, x2, #0xff00
    55f8:	lsr	x1, x0, #24
    55fc:	and	x1, x1, #0xff0000
    5600:	orr	x2, x2, x1
    5604:	lsl	x1, x0, #56
    5608:	orr	x1, x1, x0, lsr #56
    560c:	orr	x2, x2, x1
    5610:	lsr	x1, x0, #8
    5614:	and	x1, x1, #0xff000000
    5618:	lsl	x3, x0, #8
    561c:	and	x3, x3, #0xff00000000
    5620:	orr	x1, x1, x3
    5624:	orr	x2, x2, x1
    5628:	lsl	x3, x0, #24
    562c:	and	x3, x3, #0xff0000000000
    5630:	lsl	x1, x0, #40
    5634:	and	x1, x1, #0xff000000000000
    5638:	orr	x0, x3, x1
    563c:	orr	x0, x2, x0
    5640:	ret

0000000000005644 <__clrsbdi2@@GCC_4.7.0>:
    5644:	eor	x1, x0, x0, asr #63
    5648:	clz	x0, x1
    564c:	sub	w0, w0, #0x1
    5650:	cmp	x1, #0x0
    5654:	mov	w1, #0x3f                  	// #63
    5658:	csel	w0, w0, w1, ne  // ne = any
    565c:	ret

0000000000005660 <__clrsbti2@@GCC_4.7.0>:
    5660:	cbz	x1, 5680 <__clrsbti2@@GCC_4.7.0+0x20>
    5664:	mvn	x0, x0
    5668:	cmn	x1, #0x1
    566c:	b.eq	5680 <__clrsbti2@@GCC_4.7.0+0x20>  // b.none
    5670:	eor	x0, x1, x1, asr #63
    5674:	mov	x2, #0x0                   	// #0
    5678:	clz	x1, x0
    567c:	b	568c <__clrsbti2@@GCC_4.7.0+0x2c>
    5680:	mov	x2, #0x40                  	// #64
    5684:	mov	x1, x2
    5688:	cbnz	x0, 5678 <__clrsbti2@@GCC_4.7.0+0x18>
    568c:	add	w0, w1, w2
    5690:	sub	w0, w0, #0x1
    5694:	ret

0000000000005698 <__fixunssfdi@@GCC_3.0>:
    5698:	movi	v1.2s, #0x5f, lsl #24
    569c:	fcmpe	s0, s1
    56a0:	b.ge	56ac <__fixunssfdi@@GCC_3.0+0x14>  // b.tcont
    56a4:	fcvtzs	x0, s0
    56a8:	ret
    56ac:	fsub	s0, s0, s1
    56b0:	fcvtzs	x0, s0
    56b4:	mov	x1, #0x8000000000000000    	// #-9223372036854775808
    56b8:	add	x0, x0, x1
    56bc:	b	56a8 <__fixunssfdi@@GCC_3.0+0x10>

00000000000056c0 <__fixunsdfdi@@GCC_3.0>:
    56c0:	mov	x0, #0x43e0000000000000    	// #4890909195324358656
    56c4:	fmov	d1, x0
    56c8:	fcmpe	d0, d1
    56cc:	b.ge	56d8 <__fixunsdfdi@@GCC_3.0+0x18>  // b.tcont
    56d0:	fcvtzs	x0, d0
    56d4:	ret
    56d8:	fsub	d0, d0, d1
    56dc:	fcvtzs	d0, d0
    56e0:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    56e4:	fmov	x1, d0
    56e8:	add	x0, x1, x0
    56ec:	b	56d4 <__fixunsdfdi@@GCC_3.0+0x14>

00000000000056f0 <__fixsfti@@GCC_3.0>:
    56f0:	stp	x29, x30, [sp, #-16]!
    56f4:	mov	x29, sp
    56f8:	fcmpe	s0, #0.0
    56fc:	b.mi	570c <__fixsfti@@GCC_3.0+0x1c>  // b.first
    5700:	bl	2bb0 <__fixunssfti@plt>
    5704:	ldp	x29, x30, [sp], #16
    5708:	ret
    570c:	fneg	s0, s0
    5710:	bl	2bb0 <__fixunssfti@plt>
    5714:	negs	x0, x0
    5718:	ngc	x1, x1
    571c:	b	5704 <__fixsfti@@GCC_3.0+0x14>

0000000000005720 <__fixdfti@@GCC_3.0>:
    5720:	stp	x29, x30, [sp, #-16]!
    5724:	mov	x29, sp
    5728:	fcmpe	d0, #0.0
    572c:	b.mi	573c <__fixdfti@@GCC_3.0+0x1c>  // b.first
    5730:	bl	2d20 <__fixunsdfti@plt>
    5734:	ldp	x29, x30, [sp], #16
    5738:	ret
    573c:	fneg	d0, d0
    5740:	bl	2d20 <__fixunsdfti@plt>
    5744:	negs	x0, x0
    5748:	ngc	x1, x1
    574c:	b	5734 <__fixdfti@@GCC_3.0+0x14>

0000000000005750 <__fixunssfti@@GCC_3.0>:
    5750:	fcvt	d0, s0
    5754:	mov	x0, #0x3bf0000000000000    	// #4318952042648305664
    5758:	fmov	d1, x0
    575c:	fmul	d1, d0, d1
    5760:	fcvtzu	x1, d1
    5764:	ucvtf	d1, x1
    5768:	mov	x0, #0x43f0000000000000    	// #4895412794951729152
    576c:	fmov	d2, x0
    5770:	fmul	d1, d1, d2
    5774:	fsub	d0, d0, d1
    5778:	fcvtzu	x0, d0
    577c:	ret

0000000000005780 <__fixunsdfti@@GCC_3.0>:
    5780:	mov	x0, #0x3bf0000000000000    	// #4318952042648305664
    5784:	fmov	d1, x0
    5788:	fmul	d1, d0, d1
    578c:	fcvtzu	x1, d1
    5790:	ucvtf	d1, x1
    5794:	mov	x0, #0x43f0000000000000    	// #4895412794951729152
    5798:	fmov	d2, x0
    579c:	fmul	d1, d1, d2
    57a0:	fsub	d0, d0, d1
    57a4:	fcvtzu	x0, d0
    57a8:	ret

00000000000057ac <__floattisf@@GCC_3.0>:
    57ac:	stp	x29, x30, [sp, #-48]!
    57b0:	mov	x29, sp
    57b4:	str	x19, [sp, #16]
    57b8:	mov	x19, x0
    57bc:	mov	x0, x1
    57c0:	mov	x4, x19
    57c4:	mov	x1, #0xffffffffffffffff    	// #-1
    57c8:	adds	x2, x19, x1
    57cc:	mov	x1, #0x1ffffffffffff       	// #562949953421311
    57d0:	adc	x1, x0, x1
    57d4:	mov	x3, #0x3ffffffffffff       	// #1125899906842623
    57d8:	cmp	x1, x3
    57dc:	b.hi	57ec <__floattisf@@GCC_3.0+0x40>  // b.pmore
    57e0:	b.ne	57fc <__floattisf@@GCC_3.0+0x50>  // b.any
    57e4:	cmn	x2, #0x2
    57e8:	b.ls	57fc <__floattisf@@GCC_3.0+0x50>  // b.plast
    57ec:	and	x1, x19, #0xffffffffffff8000
    57f0:	orr	x1, x1, #0x8000
    57f4:	tst	x4, #0x7fff
    57f8:	csel	x19, x1, x19, ne  // ne = any
    57fc:	bl	2b40 <__floatditf@plt>
    5800:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    5804:	add	x0, x0, #0xad0
    5808:	ldr	q1, [x0]
    580c:	bl	2b10 <__multf3@plt>
    5810:	str	q0, [sp, #32]
    5814:	mov	x0, x19
    5818:	bl	2b00 <__floatunditf@plt>
    581c:	ldr	q1, [sp, #32]
    5820:	bl	2c20 <__addtf3@plt>
    5824:	bl	2d90 <__trunctfsf2@plt>
    5828:	ldr	x19, [sp, #16]
    582c:	ldp	x29, x30, [sp], #48
    5830:	ret

0000000000005834 <__floattidf@@GCC_3.0>:
    5834:	stp	x29, x30, [sp, #-48]!
    5838:	mov	x29, sp
    583c:	str	x19, [sp, #16]
    5840:	mov	x19, x0
    5844:	mov	x0, x1
    5848:	mov	x4, x19
    584c:	mov	x1, #0xffffffffffffffff    	// #-1
    5850:	adds	x2, x19, x1
    5854:	mov	x1, #0x1ffffffffffff       	// #562949953421311
    5858:	adc	x1, x0, x1
    585c:	mov	x3, #0x3ffffffffffff       	// #1125899906842623
    5860:	cmp	x1, x3
    5864:	b.hi	5874 <__floattidf@@GCC_3.0+0x40>  // b.pmore
    5868:	b.ne	5884 <__floattidf@@GCC_3.0+0x50>  // b.any
    586c:	cmn	x2, #0x2
    5870:	b.ls	5884 <__floattidf@@GCC_3.0+0x50>  // b.plast
    5874:	and	x1, x19, #0xffffffffffff8000
    5878:	orr	x1, x1, #0x8000
    587c:	tst	x4, #0x7fff
    5880:	csel	x19, x1, x19, ne  // ne = any
    5884:	bl	2b40 <__floatditf@plt>
    5888:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    588c:	add	x0, x0, #0xad0
    5890:	ldr	q1, [x0]
    5894:	bl	2b10 <__multf3@plt>
    5898:	str	q0, [sp, #32]
    589c:	mov	x0, x19
    58a0:	bl	2b00 <__floatunditf@plt>
    58a4:	ldr	q1, [sp, #32]
    58a8:	bl	2c20 <__addtf3@plt>
    58ac:	bl	2c90 <__trunctfdf2@plt>
    58b0:	ldr	x19, [sp, #16]
    58b4:	ldp	x29, x30, [sp], #48
    58b8:	ret

00000000000058bc <__floatuntisf@@GCC_4.2.0>:
    58bc:	stp	x29, x30, [sp, #-48]!
    58c0:	mov	x29, sp
    58c4:	str	x19, [sp, #16]
    58c8:	mov	x19, x0
    58cc:	mov	x0, x1
    58d0:	mov	x1, #0x1ffffffffffff       	// #562949953421311
    58d4:	cmp	x0, x1
    58d8:	b.ls	58ec <__floatuntisf@@GCC_4.2.0+0x30>  // b.plast
    58dc:	and	x1, x19, #0xffffffffffff8000
    58e0:	orr	x1, x1, #0x8000
    58e4:	tst	x19, #0x7fff
    58e8:	csel	x19, x1, x19, ne  // ne = any
    58ec:	bl	2b00 <__floatunditf@plt>
    58f0:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    58f4:	add	x0, x0, #0xad0
    58f8:	ldr	q1, [x0]
    58fc:	bl	2b10 <__multf3@plt>
    5900:	str	q0, [sp, #32]
    5904:	mov	x0, x19
    5908:	bl	2b00 <__floatunditf@plt>
    590c:	ldr	q1, [sp, #32]
    5910:	bl	2c20 <__addtf3@plt>
    5914:	bl	2d90 <__trunctfsf2@plt>
    5918:	ldr	x19, [sp, #16]
    591c:	ldp	x29, x30, [sp], #48
    5920:	ret

0000000000005924 <__floatuntidf@@GCC_4.2.0>:
    5924:	stp	x29, x30, [sp, #-48]!
    5928:	mov	x29, sp
    592c:	str	x19, [sp, #16]
    5930:	mov	x19, x0
    5934:	mov	x0, x1
    5938:	mov	x1, #0x1ffffffffffff       	// #562949953421311
    593c:	cmp	x0, x1
    5940:	b.ls	5954 <__floatuntidf@@GCC_4.2.0+0x30>  // b.plast
    5944:	and	x1, x19, #0xffffffffffff8000
    5948:	orr	x1, x1, #0x8000
    594c:	tst	x19, #0x7fff
    5950:	csel	x19, x1, x19, ne  // ne = any
    5954:	bl	2b00 <__floatunditf@plt>
    5958:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    595c:	add	x0, x0, #0xad0
    5960:	ldr	q1, [x0]
    5964:	bl	2b10 <__multf3@plt>
    5968:	str	q0, [sp, #32]
    596c:	mov	x0, x19
    5970:	bl	2b00 <__floatunditf@plt>
    5974:	ldr	q1, [sp, #32]
    5978:	bl	2c20 <__addtf3@plt>
    597c:	bl	2c90 <__trunctfdf2@plt>
    5980:	ldr	x19, [sp, #16]
    5984:	ldp	x29, x30, [sp], #48
    5988:	ret

000000000000598c <__divti3@@GCC_3.0>:
    598c:	mov	x4, x1
    5990:	mov	x7, #0x0                   	// #0
    5994:	tbnz	x1, #63, 5a4c <__divti3@@GCC_3.0+0xc0>
    5998:	tbnz	x3, #63, 5a5c <__divti3@@GCC_3.0+0xd0>
    599c:	mov	x5, x2
    59a0:	mov	x1, x3
    59a4:	mov	x6, x0
    59a8:	mov	x0, x4
    59ac:	cbnz	x3, 5bc8 <__divti3@@GCC_3.0+0x23c>
    59b0:	cmp	x2, x4
    59b4:	b.ls	5a78 <__divti3@@GCC_3.0+0xec>  // b.plast
    59b8:	clz	x2, x2
    59bc:	cbz	x2, 59d8 <__divti3@@GCC_3.0+0x4c>
    59c0:	lsl	x5, x5, x2
    59c4:	lsl	x0, x4, x2
    59c8:	neg	w3, w2
    59cc:	lsr	x3, x6, x3
    59d0:	orr	x0, x3, x0
    59d4:	lsl	x6, x6, x2
    59d8:	lsr	x3, x5, #32
    59dc:	and	x4, x5, #0xffffffff
    59e0:	udiv	x8, x0, x3
    59e4:	msub	x0, x8, x3, x0
    59e8:	mov	x2, x8
    59ec:	mul	x9, x4, x8
    59f0:	extr	x0, x0, x6, #32
    59f4:	cmp	x9, x0
    59f8:	b.ls	5a10 <__divti3@@GCC_3.0+0x84>  // b.plast
    59fc:	add	x0, x0, x5
    5a00:	cmp	x9, x0
    5a04:	ccmp	x5, x0, #0x2, hi  // hi = pmore
    5a08:	b.ls	5a6c <__divti3@@GCC_3.0+0xe0>  // b.plast
    5a0c:	sub	x2, x8, #0x1
    5a10:	sub	x0, x0, x9
    5a14:	udiv	x8, x0, x3
    5a18:	msub	x0, x8, x3, x0
    5a1c:	mov	x3, x8
    5a20:	mul	x4, x4, x8
    5a24:	bfi	x6, x0, #32, #32
    5a28:	cmp	x4, x6
    5a2c:	b.ls	5a44 <__divti3@@GCC_3.0+0xb8>  // b.plast
    5a30:	add	x0, x5, x6
    5a34:	cmp	x4, x0
    5a38:	ccmp	x5, x0, #0x2, hi  // hi = pmore
    5a3c:	cinc	x3, x8, hi  // hi = pmore
    5a40:	sub	x3, x3, #0x2
    5a44:	orr	x0, x3, x2, lsl #32
    5a48:	b	5d10 <__divti3@@GCC_3.0+0x384>
    5a4c:	negs	x0, x0
    5a50:	ngc	x4, x1
    5a54:	mov	x7, #0xffffffffffffffff    	// #-1
    5a58:	b	5998 <__divti3@@GCC_3.0+0xc>
    5a5c:	mvn	x7, x7
    5a60:	negs	x2, x2
    5a64:	ngc	x3, x3
    5a68:	b	599c <__divti3@@GCC_3.0+0x10>
    5a6c:	sub	x2, x8, #0x2
    5a70:	add	x0, x0, x5
    5a74:	b	5a10 <__divti3@@GCC_3.0+0x84>
    5a78:	cbnz	x2, 5a88 <__divti3@@GCC_3.0+0xfc>
    5a7c:	mov	x5, #0x1                   	// #1
    5a80:	mov	x1, #0x0                   	// #0
    5a84:	udiv	x5, x5, x1
    5a88:	clz	x2, x5
    5a8c:	cbnz	x2, 5b0c <__divti3@@GCC_3.0+0x180>
    5a90:	sub	x0, x0, x5
    5a94:	mov	x1, #0x1                   	// #1
    5a98:	lsr	x3, x5, #32
    5a9c:	and	x4, x5, #0xffffffff
    5aa0:	udiv	x8, x0, x3
    5aa4:	msub	x0, x8, x3, x0
    5aa8:	mov	x2, x8
    5aac:	mul	x9, x4, x8
    5ab0:	extr	x0, x0, x6, #32
    5ab4:	cmp	x9, x0
    5ab8:	b.ls	5ad0 <__divti3@@GCC_3.0+0x144>  // b.plast
    5abc:	add	x0, x0, x5
    5ac0:	cmp	x9, x0
    5ac4:	ccmp	x5, x0, #0x2, hi  // hi = pmore
    5ac8:	b.ls	5bbc <__divti3@@GCC_3.0+0x230>  // b.plast
    5acc:	sub	x2, x8, #0x1
    5ad0:	sub	x0, x0, x9
    5ad4:	udiv	x8, x0, x3
    5ad8:	msub	x0, x8, x3, x0
    5adc:	mov	x3, x8
    5ae0:	mul	x4, x4, x8
    5ae4:	bfi	x6, x0, #32, #32
    5ae8:	cmp	x4, x6
    5aec:	b.ls	5b04 <__divti3@@GCC_3.0+0x178>  // b.plast
    5af0:	add	x0, x5, x6
    5af4:	cmp	x4, x0
    5af8:	ccmp	x5, x0, #0x2, hi  // hi = pmore
    5afc:	cinc	x3, x8, hi  // hi = pmore
    5b00:	sub	x3, x3, #0x2
    5b04:	orr	x0, x3, x2, lsl #32
    5b08:	b	5d10 <__divti3@@GCC_3.0+0x384>
    5b0c:	lsl	x5, x5, x2
    5b10:	mov	x1, #0x40                  	// #64
    5b14:	sub	x1, x1, x2
    5b18:	lsr	x3, x0, x1
    5b1c:	lsl	x0, x0, x2
    5b20:	lsr	x1, x6, x1
    5b24:	orr	x0, x1, x0
    5b28:	lsl	x6, x6, x2
    5b2c:	lsr	x4, x5, #32
    5b30:	and	x8, x5, #0xffffffff
    5b34:	udiv	x9, x3, x4
    5b38:	msub	x3, x9, x4, x3
    5b3c:	mov	x11, x9
    5b40:	mul	x10, x8, x9
    5b44:	extr	x2, x3, x0, #32
    5b48:	cmp	x10, x2
    5b4c:	b.ls	5b64 <__divti3@@GCC_3.0+0x1d8>  // b.plast
    5b50:	add	x2, x2, x5
    5b54:	cmp	x10, x2
    5b58:	ccmp	x5, x2, #0x2, hi  // hi = pmore
    5b5c:	b.ls	5ba4 <__divti3@@GCC_3.0+0x218>  // b.plast
    5b60:	sub	x11, x9, #0x1
    5b64:	sub	x2, x2, x10
    5b68:	udiv	x9, x2, x4
    5b6c:	msub	x2, x9, x4, x2
    5b70:	mov	x1, x9
    5b74:	mul	x3, x8, x9
    5b78:	bfi	x0, x2, #32, #32
    5b7c:	cmp	x3, x0
    5b80:	b.ls	5b98 <__divti3@@GCC_3.0+0x20c>  // b.plast
    5b84:	add	x0, x0, x5
    5b88:	cmp	x3, x0
    5b8c:	ccmp	x5, x0, #0x2, hi  // hi = pmore
    5b90:	b.ls	5bb0 <__divti3@@GCC_3.0+0x224>  // b.plast
    5b94:	sub	x1, x9, #0x1
    5b98:	sub	x0, x0, x3
    5b9c:	orr	x1, x1, x11, lsl #32
    5ba0:	b	5a98 <__divti3@@GCC_3.0+0x10c>
    5ba4:	sub	x11, x9, #0x2
    5ba8:	add	x2, x2, x5
    5bac:	b	5b64 <__divti3@@GCC_3.0+0x1d8>
    5bb0:	sub	x1, x9, #0x2
    5bb4:	add	x0, x0, x5
    5bb8:	b	5b98 <__divti3@@GCC_3.0+0x20c>
    5bbc:	sub	x2, x8, #0x2
    5bc0:	add	x0, x0, x5
    5bc4:	b	5ad0 <__divti3@@GCC_3.0+0x144>
    5bc8:	cmp	x3, x4
    5bcc:	b.hi	5d08 <__divti3@@GCC_3.0+0x37c>  // b.pmore
    5bd0:	clz	x8, x3
    5bd4:	cbnz	x8, 5bec <__divti3@@GCC_3.0+0x260>
    5bd8:	cmp	x3, x4
    5bdc:	ccmp	x2, x6, #0x0, cs  // cs = hs, nlast
    5be0:	cset	x0, ls  // ls = plast
    5be4:	mov	x1, x8
    5be8:	b	5d10 <__divti3@@GCC_3.0+0x384>
    5bec:	lsl	x1, x3, x8
    5bf0:	mov	x2, #0x40                  	// #64
    5bf4:	sub	x2, x2, x8
    5bf8:	lsr	x9, x5, x2
    5bfc:	orr	x9, x9, x1
    5c00:	lsl	x5, x5, x8
    5c04:	lsr	x1, x4, x2
    5c08:	lsl	x0, x4, x8
    5c0c:	lsr	x2, x6, x2
    5c10:	orr	x0, x2, x0
    5c14:	lsr	x4, x9, #32
    5c18:	and	x2, x9, #0xffffffff
    5c1c:	udiv	x10, x1, x4
    5c20:	msub	x3, x10, x4, x1
    5c24:	mov	x1, x10
    5c28:	mul	x11, x2, x10
    5c2c:	extr	x3, x3, x0, #32
    5c30:	cmp	x11, x3
    5c34:	b.ls	5c4c <__divti3@@GCC_3.0+0x2c0>  // b.plast
    5c38:	add	x3, x3, x9
    5c3c:	cmp	x11, x3
    5c40:	ccmp	x9, x3, #0x2, hi  // hi = pmore
    5c44:	b.ls	5cf0 <__divti3@@GCC_3.0+0x364>  // b.plast
    5c48:	sub	x1, x10, #0x1
    5c4c:	sub	x3, x3, x11
    5c50:	udiv	x10, x3, x4
    5c54:	msub	x3, x10, x4, x3
    5c58:	mov	x4, x10
    5c5c:	mul	x2, x2, x10
    5c60:	bfi	x0, x3, #32, #32
    5c64:	cmp	x2, x0
    5c68:	b.ls	5c80 <__divti3@@GCC_3.0+0x2f4>  // b.plast
    5c6c:	add	x0, x0, x9
    5c70:	cmp	x2, x0
    5c74:	ccmp	x9, x0, #0x2, hi  // hi = pmore
    5c78:	b.ls	5cfc <__divti3@@GCC_3.0+0x370>  // b.plast
    5c7c:	sub	x4, x10, #0x1
    5c80:	sub	x2, x0, x2
    5c84:	orr	x0, x4, x1, lsl #32
    5c88:	mov	w4, w4
    5c8c:	lsr	x1, x0, #32
    5c90:	and	x3, x5, #0xffffffff
    5c94:	lsr	x5, x5, #32
    5c98:	mul	x9, x4, x3
    5c9c:	mul	x3, x1, x3
    5ca0:	mul	x1, x1, x5
    5ca4:	madd	x5, x4, x5, x3
    5ca8:	add	x5, x5, x9, lsr #32
    5cac:	mov	x4, #0x100000000           	// #4294967296
    5cb0:	add	x4, x1, x4
    5cb4:	cmp	x3, x5
    5cb8:	csel	x1, x4, x1, hi  // hi = pmore
    5cbc:	add	x3, x1, x5, lsr #32
    5cc0:	cmp	x2, x3
    5cc4:	b.cc	5ce4 <__divti3@@GCC_3.0+0x358>  // b.lo, b.ul, b.last
    5cc8:	lsl	x6, x6, x8
    5ccc:	and	x9, x9, #0xffffffff
    5cd0:	add	x5, x9, x5, lsl #32
    5cd4:	cmp	x6, x5
    5cd8:	mov	x1, #0x0                   	// #0
    5cdc:	ccmp	x2, x3, #0x0, cc  // cc = lo, ul, last
    5ce0:	b.ne	5d10 <__divti3@@GCC_3.0+0x384>  // b.any
    5ce4:	sub	x0, x0, #0x1
    5ce8:	mov	x1, #0x0                   	// #0
    5cec:	b	5d10 <__divti3@@GCC_3.0+0x384>
    5cf0:	sub	x1, x10, #0x2
    5cf4:	add	x3, x3, x9
    5cf8:	b	5c4c <__divti3@@GCC_3.0+0x2c0>
    5cfc:	sub	x4, x10, #0x2
    5d00:	add	x0, x0, x9
    5d04:	b	5c80 <__divti3@@GCC_3.0+0x2f4>
    5d08:	mov	x1, #0x0                   	// #0
    5d0c:	mov	x0, #0x0                   	// #0
    5d10:	cbz	x7, 5d1c <__divti3@@GCC_3.0+0x390>
    5d14:	negs	x0, x0
    5d18:	ngc	x1, x1
    5d1c:	ret

0000000000005d20 <__modti3@@GCC_3.0>:
    5d20:	mov	x7, #0x0                   	// #0
    5d24:	tbnz	x1, #63, 5de8 <__modti3@@GCC_3.0+0xc8>
    5d28:	tbnz	x3, #63, 5df8 <__modti3@@GCC_3.0+0xd8>
    5d2c:	mov	x4, x2
    5d30:	mov	x8, x0
    5d34:	mov	x5, x1
    5d38:	cbnz	x3, 5f1c <__modti3@@GCC_3.0+0x1fc>
    5d3c:	cmp	x2, x1
    5d40:	b.ls	5e04 <__modti3@@GCC_3.0+0xe4>  // b.plast
    5d44:	clz	x2, x2
    5d48:	cbz	x2, 5d64 <__modti3@@GCC_3.0+0x44>
    5d4c:	lsl	x4, x4, x2
    5d50:	lsl	x5, x1, x2
    5d54:	neg	w1, w2
    5d58:	lsr	x1, x0, x1
    5d5c:	orr	x5, x1, x5
    5d60:	lsl	x8, x0, x2
    5d64:	lsr	x1, x4, #32
    5d68:	and	x0, x4, #0xffffffff
    5d6c:	udiv	x3, x5, x1
    5d70:	msub	x5, x3, x1, x5
    5d74:	mul	x3, x0, x3
    5d78:	extr	x5, x5, x8, #32
    5d7c:	cmp	x3, x5
    5d80:	b.ls	5d98 <__modti3@@GCC_3.0+0x78>  // b.plast
    5d84:	add	x5, x5, x4
    5d88:	cmp	x3, x5
    5d8c:	add	x6, x5, x4
    5d90:	ccmp	x4, x5, #0x2, hi  // hi = pmore
    5d94:	csel	x5, x6, x5, ls  // ls = plast
    5d98:	sub	x5, x5, x3
    5d9c:	udiv	x3, x5, x1
    5da0:	msub	x5, x3, x1, x5
    5da4:	mul	x1, x0, x3
    5da8:	mov	x0, x8
    5dac:	bfi	x0, x5, #32, #32
    5db0:	cmp	x1, x0
    5db4:	b.ls	5dcc <__modti3@@GCC_3.0+0xac>  // b.plast
    5db8:	add	x0, x0, x4
    5dbc:	cmp	x1, x0
    5dc0:	add	x3, x0, x4
    5dc4:	ccmp	x4, x0, #0x2, hi  // hi = pmore
    5dc8:	csel	x0, x3, x0, ls  // ls = plast
    5dcc:	sub	x0, x0, x1
    5dd0:	lsr	x0, x0, x2
    5dd4:	mov	x1, #0x0                   	// #0
    5dd8:	cbz	x7, 5de4 <__modti3@@GCC_3.0+0xc4>
    5ddc:	negs	x0, x0
    5de0:	ngc	x1, x1
    5de4:	ret
    5de8:	negs	x0, x0
    5dec:	ngc	x1, x1
    5df0:	mov	x7, #0xffffffffffffffff    	// #-1
    5df4:	b	5d28 <__modti3@@GCC_3.0+0x8>
    5df8:	negs	x2, x2
    5dfc:	ngc	x3, x3
    5e00:	b	5d2c <__modti3@@GCC_3.0+0xc>
    5e04:	cbnz	x2, 5e14 <__modti3@@GCC_3.0+0xf4>
    5e08:	mov	x4, #0x1                   	// #1
    5e0c:	mov	x0, #0x0                   	// #0
    5e10:	udiv	x4, x4, x0
    5e14:	clz	x2, x4
    5e18:	cbnz	x2, 5e90 <__modti3@@GCC_3.0+0x170>
    5e1c:	sub	x5, x5, x4
    5e20:	lsr	x1, x4, #32
    5e24:	and	x0, x4, #0xffffffff
    5e28:	udiv	x3, x5, x1
    5e2c:	msub	x5, x3, x1, x5
    5e30:	mul	x3, x0, x3
    5e34:	extr	x5, x5, x8, #32
    5e38:	cmp	x3, x5
    5e3c:	b.ls	5e54 <__modti3@@GCC_3.0+0x134>  // b.plast
    5e40:	add	x5, x5, x4
    5e44:	cmp	x3, x5
    5e48:	add	x6, x5, x4
    5e4c:	ccmp	x4, x5, #0x2, hi  // hi = pmore
    5e50:	csel	x5, x6, x5, ls  // ls = plast
    5e54:	sub	x5, x5, x3
    5e58:	udiv	x3, x5, x1
    5e5c:	msub	x5, x3, x1, x5
    5e60:	mul	x1, x0, x3
    5e64:	mov	x0, x8
    5e68:	bfi	x0, x5, #32, #32
    5e6c:	cmp	x1, x0
    5e70:	b.ls	5e88 <__modti3@@GCC_3.0+0x168>  // b.plast
    5e74:	add	x0, x0, x4
    5e78:	cmp	x1, x0
    5e7c:	add	x3, x0, x4
    5e80:	ccmp	x4, x0, #0x2, hi  // hi = pmore
    5e84:	csel	x0, x3, x0, ls  // ls = plast
    5e88:	sub	x0, x0, x1
    5e8c:	b	5dd0 <__modti3@@GCC_3.0+0xb0>
    5e90:	lsl	x4, x4, x2
    5e94:	mov	x1, #0x40                  	// #64
    5e98:	sub	x1, x1, x2
    5e9c:	lsr	x3, x5, x1
    5ea0:	lsl	x5, x5, x2
    5ea4:	lsr	x1, x8, x1
    5ea8:	orr	x5, x1, x5
    5eac:	lsl	x8, x8, x2
    5eb0:	lsr	x1, x4, #32
    5eb4:	and	x6, x4, #0xffffffff
    5eb8:	udiv	x0, x3, x1
    5ebc:	msub	x3, x0, x1, x3
    5ec0:	mul	x9, x6, x0
    5ec4:	extr	x0, x3, x5, #32
    5ec8:	cmp	x9, x0
    5ecc:	b.ls	5ee4 <__modti3@@GCC_3.0+0x1c4>  // b.plast
    5ed0:	add	x0, x0, x4
    5ed4:	cmp	x9, x0
    5ed8:	add	x3, x0, x4
    5edc:	ccmp	x4, x0, #0x2, hi  // hi = pmore
    5ee0:	csel	x0, x3, x0, ls  // ls = plast
    5ee4:	sub	x0, x0, x9
    5ee8:	udiv	x3, x0, x1
    5eec:	msub	x0, x3, x1, x0
    5ef0:	mul	x1, x6, x3
    5ef4:	bfi	x5, x0, #32, #32
    5ef8:	cmp	x1, x5
    5efc:	b.ls	5f14 <__modti3@@GCC_3.0+0x1f4>  // b.plast
    5f00:	add	x5, x5, x4
    5f04:	cmp	x1, x5
    5f08:	add	x0, x5, x4
    5f0c:	ccmp	x4, x5, #0x2, hi  // hi = pmore
    5f10:	csel	x5, x0, x5, ls  // ls = plast
    5f14:	sub	x5, x5, x1
    5f18:	b	5e20 <__modti3@@GCC_3.0+0x100>
    5f1c:	cmp	x3, x1
    5f20:	b.hi	5dd8 <__modti3@@GCC_3.0+0xb8>  // b.pmore
    5f24:	clz	x11, x3
    5f28:	cbnz	x11, 5f54 <__modti3@@GCC_3.0+0x234>
    5f2c:	cmp	x3, x1
    5f30:	ccmp	x2, x0, #0x0, cs  // cs = hs, nlast
    5f34:	b.hi	5f48 <__modti3@@GCC_3.0+0x228>  // b.pmore
    5f38:	sub	x4, x0, x2
    5f3c:	cmp	x0, x4
    5f40:	sbc	x5, x1, x3
    5f44:	mov	x8, x4
    5f48:	mov	x0, x8
    5f4c:	mov	x1, x5
    5f50:	b	5dd8 <__modti3@@GCC_3.0+0xb8>
    5f54:	lsl	x9, x3, x11
    5f58:	mov	x2, #0x40                  	// #64
    5f5c:	sub	x2, x2, x11
    5f60:	lsr	x0, x4, x2
    5f64:	orr	x9, x0, x9
    5f68:	lsl	x4, x4, x11
    5f6c:	lsr	x10, x1, x2
    5f70:	lsl	x5, x1, x11
    5f74:	lsr	x3, x8, x2
    5f78:	orr	x5, x3, x5
    5f7c:	lsl	x0, x8, x11
    5f80:	lsr	x1, x9, #32
    5f84:	and	x8, x9, #0xffffffff
    5f88:	udiv	x12, x10, x1
    5f8c:	msub	x10, x12, x1, x10
    5f90:	mov	x3, x12
    5f94:	mul	x13, x8, x12
    5f98:	extr	x6, x10, x5, #32
    5f9c:	cmp	x13, x6
    5fa0:	b.ls	5fb8 <__modti3@@GCC_3.0+0x298>  // b.plast
    5fa4:	add	x6, x6, x9
    5fa8:	cmp	x13, x6
    5fac:	ccmp	x9, x6, #0x2, hi  // hi = pmore
    5fb0:	b.ls	6078 <__modti3@@GCC_3.0+0x358>  // b.plast
    5fb4:	sub	x3, x12, #0x1
    5fb8:	sub	x6, x6, x13
    5fbc:	udiv	x10, x6, x1
    5fc0:	msub	x1, x10, x1, x6
    5fc4:	mov	x6, x10
    5fc8:	mul	x8, x8, x10
    5fcc:	bfi	x5, x1, #32, #32
    5fd0:	cmp	x8, x5
    5fd4:	b.ls	5fec <__modti3@@GCC_3.0+0x2cc>  // b.plast
    5fd8:	add	x5, x5, x9
    5fdc:	cmp	x8, x5
    5fe0:	ccmp	x9, x5, #0x2, hi  // hi = pmore
    5fe4:	b.ls	6084 <__modti3@@GCC_3.0+0x364>  // b.plast
    5fe8:	sub	x6, x10, #0x1
    5fec:	sub	x5, x5, x8
    5ff0:	orr	x3, x6, x3, lsl #32
    5ff4:	mov	w6, w6
    5ff8:	lsr	x3, x3, #32
    5ffc:	and	x1, x4, #0xffffffff
    6000:	lsr	x10, x4, #32
    6004:	mul	x8, x6, x1
    6008:	mul	x1, x3, x1
    600c:	mul	x3, x3, x10
    6010:	madd	x6, x6, x10, x1
    6014:	add	x6, x6, x8, lsr #32
    6018:	mov	x10, #0x100000000           	// #4294967296
    601c:	add	x10, x3, x10
    6020:	cmp	x1, x6
    6024:	csel	x3, x10, x3, hi  // hi = pmore
    6028:	add	x1, x3, x6, lsr #32
    602c:	and	x8, x8, #0xffffffff
    6030:	add	x6, x8, x6, lsl #32
    6034:	cmp	x5, x1
    6038:	b.cc	6048 <__modti3@@GCC_3.0+0x328>  // b.lo, b.ul, b.last
    603c:	mov	x3, x6
    6040:	ccmp	x0, x6, #0x2, eq  // eq = none
    6044:	b.cs	6058 <__modti3@@GCC_3.0+0x338>  // b.hs, b.nlast
    6048:	sub	x3, x6, x4
    604c:	cmp	x6, x3
    6050:	cinc	x9, x9, cc  // cc = lo, ul, last
    6054:	sub	x1, x1, x9
    6058:	sub	x3, x0, x3
    605c:	cmp	x0, x3
    6060:	sbc	x5, x5, x1
    6064:	lsl	x0, x5, x2
    6068:	lsr	x3, x3, x11
    606c:	orr	x0, x0, x3
    6070:	lsr	x1, x5, x11
    6074:	b	5dd8 <__modti3@@GCC_3.0+0xb8>
    6078:	sub	x3, x12, #0x2
    607c:	add	x6, x6, x9
    6080:	b	5fb8 <__modti3@@GCC_3.0+0x298>
    6084:	sub	x6, x10, #0x2
    6088:	add	x5, x5, x9
    608c:	b	5fec <__modti3@@GCC_3.0+0x2cc>

0000000000006090 <__divmodti4@@GCC_7.0.0>:
    6090:	mov	x8, #0x0                   	// #0
    6094:	tbnz	x1, #63, 6184 <__divmodti4@@GCC_7.0.0+0xf4>
    6098:	mov	x9, x8
    609c:	tbnz	x3, #63, 6194 <__divmodti4@@GCC_7.0.0+0x104>
    60a0:	mov	x6, x2
    60a4:	mov	x5, x3
    60a8:	mov	x11, x0
    60ac:	mov	x7, x1
    60b0:	cbnz	x3, 6320 <__divmodti4@@GCC_7.0.0+0x290>
    60b4:	cmp	x2, x1
    60b8:	b.ls	61bc <__divmodti4@@GCC_7.0.0+0x12c>  // b.plast
    60bc:	clz	x3, x2
    60c0:	cbz	x3, 60dc <__divmodti4@@GCC_7.0.0+0x4c>
    60c4:	lsl	x6, x2, x3
    60c8:	lsl	x7, x1, x3
    60cc:	neg	w0, w3
    60d0:	lsr	x0, x11, x0
    60d4:	orr	x7, x0, x7
    60d8:	lsl	x11, x11, x3
    60dc:	lsr	x1, x6, #32
    60e0:	and	x2, x6, #0xffffffff
    60e4:	udiv	x10, x7, x1
    60e8:	msub	x7, x10, x1, x7
    60ec:	mov	x13, x10
    60f0:	mul	x12, x2, x10
    60f4:	extr	x7, x7, x11, #32
    60f8:	cmp	x12, x7
    60fc:	b.ls	6114 <__divmodti4@@GCC_7.0.0+0x84>  // b.plast
    6100:	add	x7, x7, x6
    6104:	cmp	x12, x7
    6108:	ccmp	x6, x7, #0x2, hi  // hi = pmore
    610c:	b.ls	61a4 <__divmodti4@@GCC_7.0.0+0x114>  // b.plast
    6110:	sub	x13, x10, #0x1
    6114:	sub	x7, x7, x12
    6118:	udiv	x10, x7, x1
    611c:	msub	x7, x10, x1, x7
    6120:	mov	x0, x10
    6124:	mul	x1, x2, x10
    6128:	mov	x2, x11
    612c:	bfi	x2, x7, #32, #32
    6130:	cmp	x1, x2
    6134:	b.ls	614c <__divmodti4@@GCC_7.0.0+0xbc>  // b.plast
    6138:	add	x2, x2, x6
    613c:	cmp	x1, x2
    6140:	ccmp	x6, x2, #0x2, hi  // hi = pmore
    6144:	b.ls	61b0 <__divmodti4@@GCC_7.0.0+0x120>  // b.plast
    6148:	sub	x0, x10, #0x1
    614c:	sub	x2, x2, x1
    6150:	orr	x0, x0, x13, lsl #32
    6154:	lsr	x2, x2, x3
    6158:	mov	x7, #0x0                   	// #0
    615c:	mov	x1, x5
    6160:	cbz	x9, 616c <__divmodti4@@GCC_7.0.0+0xdc>
    6164:	negs	x0, x0
    6168:	ngc	x1, x5
    616c:	cbz	x8, 6178 <__divmodti4@@GCC_7.0.0+0xe8>
    6170:	negs	x2, x2
    6174:	ngc	x7, x7
    6178:	str	x2, [x4]
    617c:	str	x7, [x4, #8]
    6180:	ret
    6184:	negs	x0, x0
    6188:	ngc	x1, x1
    618c:	mov	x8, #0xffffffffffffffff    	// #-1
    6190:	b	6098 <__divmodti4@@GCC_7.0.0+0x8>
    6194:	mvn	x9, x8
    6198:	negs	x2, x2
    619c:	ngc	x3, x3
    61a0:	b	60a0 <__divmodti4@@GCC_7.0.0+0x10>
    61a4:	sub	x13, x10, #0x2
    61a8:	add	x7, x7, x6
    61ac:	b	6114 <__divmodti4@@GCC_7.0.0+0x84>
    61b0:	sub	x0, x10, #0x2
    61b4:	add	x2, x2, x6
    61b8:	b	614c <__divmodti4@@GCC_7.0.0+0xbc>
    61bc:	cbnz	x2, 61cc <__divmodti4@@GCC_7.0.0+0x13c>
    61c0:	mov	x6, #0x1                   	// #1
    61c4:	mov	x0, #0x0                   	// #0
    61c8:	udiv	x6, x6, x0
    61cc:	clz	x3, x6
    61d0:	cbnz	x3, 6258 <__divmodti4@@GCC_7.0.0+0x1c8>
    61d4:	sub	x7, x7, x6
    61d8:	mov	x5, #0x1                   	// #1
    61dc:	lsr	x1, x6, #32
    61e0:	and	x2, x6, #0xffffffff
    61e4:	udiv	x10, x7, x1
    61e8:	msub	x7, x10, x1, x7
    61ec:	mov	x13, x10
    61f0:	mul	x12, x2, x10
    61f4:	extr	x7, x7, x11, #32
    61f8:	cmp	x12, x7
    61fc:	b.ls	6214 <__divmodti4@@GCC_7.0.0+0x184>  // b.plast
    6200:	add	x7, x7, x6
    6204:	cmp	x12, x7
    6208:	ccmp	x6, x7, #0x2, hi  // hi = pmore
    620c:	b.ls	6308 <__divmodti4@@GCC_7.0.0+0x278>  // b.plast
    6210:	sub	x13, x10, #0x1
    6214:	sub	x7, x7, x12
    6218:	udiv	x10, x7, x1
    621c:	msub	x7, x10, x1, x7
    6220:	mov	x0, x10
    6224:	mul	x1, x2, x10
    6228:	mov	x2, x11
    622c:	bfi	x2, x7, #32, #32
    6230:	cmp	x1, x2
    6234:	b.ls	624c <__divmodti4@@GCC_7.0.0+0x1bc>  // b.plast
    6238:	add	x2, x2, x6
    623c:	cmp	x1, x2
    6240:	ccmp	x6, x2, #0x2, hi  // hi = pmore
    6244:	b.ls	6314 <__divmodti4@@GCC_7.0.0+0x284>  // b.plast
    6248:	sub	x0, x10, #0x1
    624c:	sub	x2, x2, x1
    6250:	orr	x0, x0, x13, lsl #32
    6254:	b	6154 <__divmodti4@@GCC_7.0.0+0xc4>
    6258:	lsl	x6, x6, x3
    625c:	mov	x1, #0x40                  	// #64
    6260:	sub	x1, x1, x3
    6264:	lsr	x2, x7, x1
    6268:	lsl	x0, x7, x3
    626c:	lsr	x7, x11, x1
    6270:	orr	x7, x7, x0
    6274:	lsl	x11, x11, x3
    6278:	lsr	x10, x6, #32
    627c:	and	x12, x6, #0xffffffff
    6280:	udiv	x13, x2, x10
    6284:	msub	x2, x13, x10, x2
    6288:	mov	x5, x13
    628c:	mul	x14, x12, x13
    6290:	extr	x0, x2, x7, #32
    6294:	cmp	x14, x0
    6298:	b.ls	62b0 <__divmodti4@@GCC_7.0.0+0x220>  // b.plast
    629c:	add	x0, x0, x6
    62a0:	cmp	x14, x0
    62a4:	ccmp	x6, x0, #0x2, hi  // hi = pmore
    62a8:	b.ls	62f0 <__divmodti4@@GCC_7.0.0+0x260>  // b.plast
    62ac:	sub	x5, x13, #0x1
    62b0:	sub	x0, x0, x14
    62b4:	udiv	x13, x0, x10
    62b8:	msub	x0, x13, x10, x0
    62bc:	mov	x1, x13
    62c0:	mul	x2, x12, x13
    62c4:	bfi	x7, x0, #32, #32
    62c8:	cmp	x2, x7
    62cc:	b.ls	62e4 <__divmodti4@@GCC_7.0.0+0x254>  // b.plast
    62d0:	add	x7, x7, x6
    62d4:	cmp	x2, x7
    62d8:	ccmp	x6, x7, #0x2, hi  // hi = pmore
    62dc:	b.ls	62fc <__divmodti4@@GCC_7.0.0+0x26c>  // b.plast
    62e0:	sub	x1, x13, #0x1
    62e4:	sub	x7, x7, x2
    62e8:	orr	x5, x1, x5, lsl #32
    62ec:	b	61dc <__divmodti4@@GCC_7.0.0+0x14c>
    62f0:	sub	x5, x13, #0x2
    62f4:	add	x0, x0, x6
    62f8:	b	62b0 <__divmodti4@@GCC_7.0.0+0x220>
    62fc:	sub	x1, x13, #0x2
    6300:	add	x7, x7, x6
    6304:	b	62e4 <__divmodti4@@GCC_7.0.0+0x254>
    6308:	sub	x13, x10, #0x2
    630c:	add	x7, x7, x6
    6310:	b	6214 <__divmodti4@@GCC_7.0.0+0x184>
    6314:	sub	x0, x10, #0x2
    6318:	add	x2, x2, x6
    631c:	b	624c <__divmodti4@@GCC_7.0.0+0x1bc>
    6320:	cmp	x3, x1
    6324:	b.ls	6338 <__divmodti4@@GCC_7.0.0+0x2a8>  // b.plast
    6328:	mov	x2, x0
    632c:	mov	x5, #0x0                   	// #0
    6330:	mov	x0, #0x0                   	// #0
    6334:	b	615c <__divmodti4@@GCC_7.0.0+0xcc>
    6338:	clz	x10, x3
    633c:	cbnz	x10, 6370 <__divmodti4@@GCC_7.0.0+0x2e0>
    6340:	cmp	x3, x1
    6344:	mov	x0, x10
    6348:	ccmp	x2, x11, #0x0, cs  // cs = hs, nlast
    634c:	b.hi	6364 <__divmodti4@@GCC_7.0.0+0x2d4>  // b.pmore
    6350:	sub	x6, x11, x2
    6354:	cmp	x11, x6
    6358:	sbc	x7, x1, x3
    635c:	mov	x11, x6
    6360:	mov	x0, #0x1                   	// #1
    6364:	mov	x2, x11
    6368:	mov	x5, x10
    636c:	b	615c <__divmodti4@@GCC_7.0.0+0xcc>
    6370:	lsl	x5, x3, x10
    6374:	mov	x1, #0x40                  	// #64
    6378:	sub	x1, x1, x10
    637c:	lsr	x12, x2, x1
    6380:	orr	x12, x12, x5
    6384:	lsl	x6, x2, x10
    6388:	lsr	x0, x7, x1
    638c:	lsl	x7, x7, x10
    6390:	lsr	x2, x11, x1
    6394:	orr	x7, x2, x7
    6398:	lsl	x2, x11, x10
    639c:	lsr	x5, x12, #32
    63a0:	and	x11, x12, #0xffffffff
    63a4:	udiv	x13, x0, x5
    63a8:	msub	x3, x13, x5, x0
    63ac:	mov	x0, x13
    63b0:	mul	x14, x11, x13
    63b4:	extr	x3, x3, x7, #32
    63b8:	cmp	x14, x3
    63bc:	b.ls	63d4 <__divmodti4@@GCC_7.0.0+0x344>  // b.plast
    63c0:	add	x3, x3, x12
    63c4:	cmp	x14, x3
    63c8:	ccmp	x12, x3, #0x2, hi  // hi = pmore
    63cc:	b.ls	649c <__divmodti4@@GCC_7.0.0+0x40c>  // b.plast
    63d0:	sub	x0, x13, #0x1
    63d4:	sub	x3, x3, x14
    63d8:	udiv	x13, x3, x5
    63dc:	msub	x5, x13, x5, x3
    63e0:	mov	x3, x13
    63e4:	mul	x11, x11, x13
    63e8:	bfi	x7, x5, #32, #32
    63ec:	cmp	x11, x7
    63f0:	b.ls	6408 <__divmodti4@@GCC_7.0.0+0x378>  // b.plast
    63f4:	add	x7, x7, x12
    63f8:	cmp	x11, x7
    63fc:	ccmp	x12, x7, #0x2, hi  // hi = pmore
    6400:	b.ls	64a8 <__divmodti4@@GCC_7.0.0+0x418>  // b.plast
    6404:	sub	x3, x13, #0x1
    6408:	sub	x7, x7, x11
    640c:	orr	x0, x3, x0, lsl #32
    6410:	mov	w3, w3
    6414:	lsr	x5, x0, #32
    6418:	and	x13, x6, #0xffffffff
    641c:	lsr	x14, x6, #32
    6420:	mul	x11, x3, x13
    6424:	mul	x13, x5, x13
    6428:	mul	x5, x5, x14
    642c:	madd	x3, x3, x14, x13
    6430:	add	x3, x3, x11, lsr #32
    6434:	mov	x14, #0x100000000           	// #4294967296
    6438:	add	x14, x5, x14
    643c:	cmp	x13, x3
    6440:	csel	x5, x14, x5, hi  // hi = pmore
    6444:	add	x5, x5, x3, lsr #32
    6448:	and	x11, x11, #0xffffffff
    644c:	add	x3, x11, x3, lsl #32
    6450:	cmp	x7, x5
    6454:	b.cc	6464 <__divmodti4@@GCC_7.0.0+0x3d4>  // b.lo, b.ul, b.last
    6458:	mov	x13, x3
    645c:	ccmp	x2, x3, #0x2, eq  // eq = none
    6460:	b.cs	6478 <__divmodti4@@GCC_7.0.0+0x3e8>  // b.hs, b.nlast
    6464:	sub	x0, x0, #0x1
    6468:	sub	x13, x3, x6
    646c:	cmp	x3, x13
    6470:	cinc	x12, x12, cc  // cc = lo, ul, last
    6474:	sub	x5, x5, x12
    6478:	sub	x3, x2, x13
    647c:	cmp	x2, x3
    6480:	sbc	x7, x7, x5
    6484:	lsl	x1, x7, x1
    6488:	lsr	x2, x3, x10
    648c:	orr	x2, x1, x2
    6490:	lsr	x7, x7, x10
    6494:	mov	x5, #0x0                   	// #0
    6498:	b	615c <__divmodti4@@GCC_7.0.0+0xcc>
    649c:	sub	x0, x13, #0x2
    64a0:	add	x3, x3, x12
    64a4:	b	63d4 <__divmodti4@@GCC_7.0.0+0x344>
    64a8:	sub	x3, x13, #0x2
    64ac:	add	x7, x7, x12
    64b0:	b	6408 <__divmodti4@@GCC_7.0.0+0x378>

00000000000064b4 <__udivti3@@GCC_3.0>:
    64b4:	mov	x5, x0
    64b8:	mov	x4, x1
    64bc:	mov	x6, x2
    64c0:	mov	x1, x3
    64c4:	mov	x7, x0
    64c8:	mov	x0, x4
    64cc:	cbnz	x3, 66c8 <__udivti3@@GCC_3.0+0x214>
    64d0:	cmp	x2, x4
    64d4:	b.ls	6578 <__udivti3@@GCC_3.0+0xc4>  // b.plast
    64d8:	clz	x3, x2
    64dc:	cbz	x3, 64f8 <__udivti3@@GCC_3.0+0x44>
    64e0:	lsl	x6, x2, x3
    64e4:	lsl	x4, x4, x3
    64e8:	neg	w0, w3
    64ec:	lsr	x0, x5, x0
    64f0:	orr	x0, x0, x4
    64f4:	lsl	x7, x5, x3
    64f8:	lsr	x2, x6, #32
    64fc:	and	x3, x6, #0xffffffff
    6500:	udiv	x5, x0, x2
    6504:	msub	x4, x5, x2, x0
    6508:	mov	x0, x5
    650c:	mul	x8, x3, x5
    6510:	extr	x4, x4, x7, #32
    6514:	cmp	x8, x4
    6518:	b.ls	6530 <__udivti3@@GCC_3.0+0x7c>  // b.plast
    651c:	add	x4, x4, x6
    6520:	cmp	x8, x4
    6524:	ccmp	x6, x4, #0x2, hi  // hi = pmore
    6528:	b.ls	656c <__udivti3@@GCC_3.0+0xb8>  // b.plast
    652c:	sub	x0, x5, #0x1
    6530:	sub	x4, x4, x8
    6534:	udiv	x5, x4, x2
    6538:	msub	x4, x5, x2, x4
    653c:	mov	x2, x5
    6540:	mul	x3, x3, x5
    6544:	bfi	x7, x4, #32, #32
    6548:	cmp	x3, x7
    654c:	b.ls	6564 <__udivti3@@GCC_3.0+0xb0>  // b.plast
    6550:	add	x7, x6, x7
    6554:	cmp	x3, x7
    6558:	ccmp	x6, x7, #0x2, hi  // hi = pmore
    655c:	cinc	x2, x5, hi  // hi = pmore
    6560:	sub	x2, x2, #0x2
    6564:	orr	x0, x2, x0, lsl #32
    6568:	b	6808 <__udivti3@@GCC_3.0+0x354>
    656c:	sub	x0, x5, #0x2
    6570:	add	x4, x4, x6
    6574:	b	6530 <__udivti3@@GCC_3.0+0x7c>
    6578:	cbnz	x2, 6588 <__udivti3@@GCC_3.0+0xd4>
    657c:	mov	x6, #0x1                   	// #1
    6580:	mov	x0, #0x0                   	// #0
    6584:	udiv	x6, x6, x0
    6588:	clz	x0, x6
    658c:	cbnz	x0, 660c <__udivti3@@GCC_3.0+0x158>
    6590:	sub	x4, x4, x6
    6594:	mov	x1, #0x1                   	// #1
    6598:	lsr	x2, x6, #32
    659c:	and	x3, x6, #0xffffffff
    65a0:	udiv	x5, x4, x2
    65a4:	msub	x4, x5, x2, x4
    65a8:	mov	x0, x5
    65ac:	mul	x8, x3, x5
    65b0:	extr	x4, x4, x7, #32
    65b4:	cmp	x8, x4
    65b8:	b.ls	65d0 <__udivti3@@GCC_3.0+0x11c>  // b.plast
    65bc:	add	x4, x4, x6
    65c0:	cmp	x8, x4
    65c4:	ccmp	x6, x4, #0x2, hi  // hi = pmore
    65c8:	b.ls	66bc <__udivti3@@GCC_3.0+0x208>  // b.plast
    65cc:	sub	x0, x5, #0x1
    65d0:	sub	x4, x4, x8
    65d4:	udiv	x5, x4, x2
    65d8:	msub	x4, x5, x2, x4
    65dc:	mov	x2, x5
    65e0:	mul	x3, x3, x5
    65e4:	bfi	x7, x4, #32, #32
    65e8:	cmp	x3, x7
    65ec:	b.ls	6604 <__udivti3@@GCC_3.0+0x150>  // b.plast
    65f0:	add	x7, x6, x7
    65f4:	cmp	x3, x7
    65f8:	ccmp	x6, x7, #0x2, hi  // hi = pmore
    65fc:	cinc	x2, x5, hi  // hi = pmore
    6600:	sub	x2, x2, #0x2
    6604:	orr	x0, x2, x0, lsl #32
    6608:	b	6808 <__udivti3@@GCC_3.0+0x354>
    660c:	lsl	x6, x6, x0
    6610:	mov	x1, #0x40                  	// #64
    6614:	sub	x1, x1, x0
    6618:	lsr	x2, x4, x1
    661c:	lsl	x4, x4, x0
    6620:	lsr	x1, x5, x1
    6624:	orr	x4, x1, x4
    6628:	lsl	x7, x5, x0
    662c:	lsr	x3, x6, #32
    6630:	and	x5, x6, #0xffffffff
    6634:	udiv	x8, x2, x3
    6638:	msub	x2, x8, x3, x2
    663c:	mov	x10, x8
    6640:	mul	x9, x5, x8
    6644:	extr	x0, x2, x4, #32
    6648:	cmp	x9, x0
    664c:	b.ls	6664 <__udivti3@@GCC_3.0+0x1b0>  // b.plast
    6650:	add	x0, x0, x6
    6654:	cmp	x9, x0
    6658:	ccmp	x6, x0, #0x2, hi  // hi = pmore
    665c:	b.ls	66a4 <__udivti3@@GCC_3.0+0x1f0>  // b.plast
    6660:	sub	x10, x8, #0x1
    6664:	sub	x0, x0, x9
    6668:	udiv	x8, x0, x3
    666c:	msub	x0, x8, x3, x0
    6670:	mov	x1, x8
    6674:	mul	x2, x5, x8
    6678:	bfi	x4, x0, #32, #32
    667c:	cmp	x2, x4
    6680:	b.ls	6698 <__udivti3@@GCC_3.0+0x1e4>  // b.plast
    6684:	add	x4, x4, x6
    6688:	cmp	x2, x4
    668c:	ccmp	x6, x4, #0x2, hi  // hi = pmore
    6690:	b.ls	66b0 <__udivti3@@GCC_3.0+0x1fc>  // b.plast
    6694:	sub	x1, x8, #0x1
    6698:	sub	x4, x4, x2
    669c:	orr	x1, x1, x10, lsl #32
    66a0:	b	6598 <__udivti3@@GCC_3.0+0xe4>
    66a4:	sub	x10, x8, #0x2
    66a8:	add	x0, x0, x6
    66ac:	b	6664 <__udivti3@@GCC_3.0+0x1b0>
    66b0:	sub	x1, x8, #0x2
    66b4:	add	x4, x4, x6
    66b8:	b	6698 <__udivti3@@GCC_3.0+0x1e4>
    66bc:	sub	x0, x5, #0x2
    66c0:	add	x4, x4, x6
    66c4:	b	65d0 <__udivti3@@GCC_3.0+0x11c>
    66c8:	cmp	x3, x4
    66cc:	b.hi	6800 <__udivti3@@GCC_3.0+0x34c>  // b.pmore
    66d0:	clz	x1, x3
    66d4:	cbnz	x1, 66e4 <__udivti3@@GCC_3.0+0x230>
    66d8:	ccmp	x2, x5, #0x0, cs  // cs = hs, nlast
    66dc:	cset	x0, ls  // ls = plast
    66e0:	b	6808 <__udivti3@@GCC_3.0+0x354>
    66e4:	lsl	x3, x3, x1
    66e8:	mov	x0, #0x40                  	// #64
    66ec:	sub	x0, x0, x1
    66f0:	lsr	x6, x2, x0
    66f4:	orr	x3, x6, x3
    66f8:	lsl	x2, x2, x1
    66fc:	lsr	x7, x4, x0
    6700:	lsl	x4, x4, x1
    6704:	lsr	x0, x5, x0
    6708:	orr	x4, x0, x4
    670c:	lsr	x8, x3, #32
    6710:	and	x9, x3, #0xffffffff
    6714:	udiv	x10, x7, x8
    6718:	msub	x7, x10, x8, x7
    671c:	mov	x0, x10
    6720:	mul	x11, x9, x10
    6724:	extr	x6, x7, x4, #32
    6728:	cmp	x11, x6
    672c:	b.ls	6744 <__udivti3@@GCC_3.0+0x290>  // b.plast
    6730:	add	x6, x6, x3
    6734:	cmp	x11, x6
    6738:	ccmp	x3, x6, #0x2, hi  // hi = pmore
    673c:	b.ls	67e8 <__udivti3@@GCC_3.0+0x334>  // b.plast
    6740:	sub	x0, x10, #0x1
    6744:	sub	x6, x6, x11
    6748:	udiv	x10, x6, x8
    674c:	msub	x6, x10, x8, x6
    6750:	mov	x7, x10
    6754:	mul	x8, x9, x10
    6758:	bfi	x4, x6, #32, #32
    675c:	cmp	x8, x4
    6760:	b.ls	6778 <__udivti3@@GCC_3.0+0x2c4>  // b.plast
    6764:	add	x4, x4, x3
    6768:	cmp	x8, x4
    676c:	ccmp	x3, x4, #0x2, hi  // hi = pmore
    6770:	b.ls	67f4 <__udivti3@@GCC_3.0+0x340>  // b.plast
    6774:	sub	x7, x10, #0x1
    6778:	sub	x4, x4, x8
    677c:	orr	x0, x7, x0, lsl #32
    6780:	mov	w7, w7
    6784:	lsr	x3, x0, #32
    6788:	and	x6, x2, #0xffffffff
    678c:	lsr	x2, x2, #32
    6790:	mul	x8, x7, x6
    6794:	mul	x6, x3, x6
    6798:	mul	x3, x3, x2
    679c:	madd	x2, x7, x2, x6
    67a0:	add	x2, x2, x8, lsr #32
    67a4:	mov	x7, #0x100000000           	// #4294967296
    67a8:	add	x7, x3, x7
    67ac:	cmp	x6, x2
    67b0:	csel	x3, x7, x3, hi  // hi = pmore
    67b4:	add	x3, x3, x2, lsr #32
    67b8:	cmp	x4, x3
    67bc:	b.cc	67dc <__udivti3@@GCC_3.0+0x328>  // b.lo, b.ul, b.last
    67c0:	lsl	x5, x5, x1
    67c4:	and	x8, x8, #0xffffffff
    67c8:	add	x2, x8, x2, lsl #32
    67cc:	cmp	x5, x2
    67d0:	mov	x1, #0x0                   	// #0
    67d4:	ccmp	x4, x3, #0x0, cc  // cc = lo, ul, last
    67d8:	b.ne	6808 <__udivti3@@GCC_3.0+0x354>  // b.any
    67dc:	sub	x0, x0, #0x1
    67e0:	mov	x1, #0x0                   	// #0
    67e4:	b	6808 <__udivti3@@GCC_3.0+0x354>
    67e8:	sub	x0, x10, #0x2
    67ec:	add	x6, x6, x3
    67f0:	b	6744 <__udivti3@@GCC_3.0+0x290>
    67f4:	sub	x7, x10, #0x2
    67f8:	add	x4, x4, x3
    67fc:	b	6778 <__udivti3@@GCC_3.0+0x2c4>
    6800:	mov	x1, #0x0                   	// #0
    6804:	mov	x0, #0x0                   	// #0
    6808:	ret

000000000000680c <__umodti3@@GCC_3.0>:
    680c:	mov	x5, x2
    6810:	mov	x6, x0
    6814:	mov	x4, x1
    6818:	cbnz	x3, 69d0 <__umodti3@@GCC_3.0+0x1c4>
    681c:	cmp	x2, x1
    6820:	b.ls	68bc <__umodti3@@GCC_3.0+0xb0>  // b.plast
    6824:	clz	x3, x2
    6828:	cbz	x3, 6844 <__umodti3@@GCC_3.0+0x38>
    682c:	lsl	x5, x2, x3
    6830:	lsl	x1, x1, x3
    6834:	neg	w4, w3
    6838:	lsr	x4, x0, x4
    683c:	orr	x4, x4, x1
    6840:	lsl	x6, x0, x3
    6844:	lsr	x2, x5, #32
    6848:	and	x0, x5, #0xffffffff
    684c:	udiv	x7, x4, x2
    6850:	msub	x1, x7, x2, x4
    6854:	mul	x4, x0, x7
    6858:	extr	x1, x1, x6, #32
    685c:	cmp	x4, x1
    6860:	b.ls	6878 <__umodti3@@GCC_3.0+0x6c>  // b.plast
    6864:	add	x1, x1, x5
    6868:	cmp	x4, x1
    686c:	add	x7, x1, x5
    6870:	ccmp	x5, x1, #0x2, hi  // hi = pmore
    6874:	csel	x1, x7, x1, ls  // ls = plast
    6878:	sub	x1, x1, x4
    687c:	udiv	x4, x1, x2
    6880:	msub	x1, x4, x2, x1
    6884:	mul	x2, x0, x4
    6888:	mov	x0, x6
    688c:	bfi	x0, x1, #32, #32
    6890:	cmp	x2, x0
    6894:	b.ls	68ac <__umodti3@@GCC_3.0+0xa0>  // b.plast
    6898:	add	x0, x0, x5
    689c:	cmp	x2, x0
    68a0:	add	x1, x0, x5
    68a4:	ccmp	x5, x0, #0x2, hi  // hi = pmore
    68a8:	csel	x0, x1, x0, ls  // ls = plast
    68ac:	sub	x0, x0, x2
    68b0:	lsr	x0, x0, x3
    68b4:	mov	x1, #0x0                   	// #0
    68b8:	ret
    68bc:	cbnz	x2, 68c8 <__umodti3@@GCC_3.0+0xbc>
    68c0:	mov	x5, #0x1                   	// #1
    68c4:	udiv	x5, x5, x2
    68c8:	clz	x3, x5
    68cc:	cbnz	x3, 6944 <__umodti3@@GCC_3.0+0x138>
    68d0:	sub	x1, x1, x5
    68d4:	lsr	x2, x5, #32
    68d8:	and	x0, x5, #0xffffffff
    68dc:	udiv	x4, x1, x2
    68e0:	msub	x1, x4, x2, x1
    68e4:	mul	x4, x0, x4
    68e8:	extr	x1, x1, x6, #32
    68ec:	cmp	x4, x1
    68f0:	b.ls	6908 <__umodti3@@GCC_3.0+0xfc>  // b.plast
    68f4:	add	x1, x1, x5
    68f8:	cmp	x4, x1
    68fc:	add	x7, x1, x5
    6900:	ccmp	x5, x1, #0x2, hi  // hi = pmore
    6904:	csel	x1, x7, x1, ls  // ls = plast
    6908:	sub	x1, x1, x4
    690c:	udiv	x4, x1, x2
    6910:	msub	x1, x4, x2, x1
    6914:	mul	x2, x0, x4
    6918:	mov	x0, x6
    691c:	bfi	x0, x1, #32, #32
    6920:	cmp	x2, x0
    6924:	b.ls	693c <__umodti3@@GCC_3.0+0x130>  // b.plast
    6928:	add	x0, x0, x5
    692c:	cmp	x2, x0
    6930:	add	x1, x0, x5
    6934:	ccmp	x5, x0, #0x2, hi  // hi = pmore
    6938:	csel	x0, x1, x0, ls  // ls = plast
    693c:	sub	x0, x0, x2
    6940:	b	68b0 <__umodti3@@GCC_3.0+0xa4>
    6944:	lsl	x5, x5, x3
    6948:	mov	x2, #0x40                  	// #64
    694c:	sub	x2, x2, x3
    6950:	lsr	x4, x1, x2
    6954:	lsl	x1, x1, x3
    6958:	lsr	x2, x0, x2
    695c:	orr	x1, x2, x1
    6960:	lsl	x6, x0, x3
    6964:	lsr	x2, x5, #32
    6968:	and	x7, x5, #0xffffffff
    696c:	udiv	x0, x4, x2
    6970:	msub	x4, x0, x2, x4
    6974:	mul	x8, x7, x0
    6978:	extr	x0, x4, x1, #32
    697c:	cmp	x8, x0
    6980:	b.ls	6998 <__umodti3@@GCC_3.0+0x18c>  // b.plast
    6984:	add	x0, x0, x5
    6988:	cmp	x8, x0
    698c:	add	x4, x0, x5
    6990:	ccmp	x5, x0, #0x2, hi  // hi = pmore
    6994:	csel	x0, x4, x0, ls  // ls = plast
    6998:	sub	x0, x0, x8
    699c:	udiv	x4, x0, x2
    69a0:	msub	x0, x4, x2, x0
    69a4:	mul	x2, x7, x4
    69a8:	bfi	x1, x0, #32, #32
    69ac:	cmp	x2, x1
    69b0:	b.ls	69c8 <__umodti3@@GCC_3.0+0x1bc>  // b.plast
    69b4:	add	x1, x1, x5
    69b8:	cmp	x2, x1
    69bc:	add	x0, x1, x5
    69c0:	ccmp	x5, x1, #0x2, hi  // hi = pmore
    69c4:	csel	x1, x0, x1, ls  // ls = plast
    69c8:	sub	x1, x1, x2
    69cc:	b	68d4 <__umodti3@@GCC_3.0+0xc8>
    69d0:	cmp	x3, x1
    69d4:	b.hi	68b8 <__umodti3@@GCC_3.0+0xac>  // b.pmore
    69d8:	clz	x7, x3
    69dc:	cbnz	x7, 6a04 <__umodti3@@GCC_3.0+0x1f8>
    69e0:	ccmp	x2, x0, #0x0, cs  // cs = hs, nlast
    69e4:	b.hi	69f8 <__umodti3@@GCC_3.0+0x1ec>  // b.pmore
    69e8:	sub	x2, x0, x2
    69ec:	cmp	x0, x2
    69f0:	sbc	x4, x1, x3
    69f4:	mov	x6, x2
    69f8:	mov	x0, x6
    69fc:	mov	x1, x4
    6a00:	b	68b8 <__umodti3@@GCC_3.0+0xac>
    6a04:	lsl	x3, x3, x7
    6a08:	mov	x8, #0x40                  	// #64
    6a0c:	sub	x8, x8, x7
    6a10:	lsr	x6, x2, x8
    6a14:	orr	x6, x6, x3
    6a18:	lsl	x3, x2, x7
    6a1c:	lsr	x2, x1, x8
    6a20:	lsl	x1, x1, x7
    6a24:	lsr	x4, x0, x8
    6a28:	orr	x1, x4, x1
    6a2c:	lsl	x0, x0, x7
    6a30:	lsr	x5, x6, #32
    6a34:	and	x9, x6, #0xffffffff
    6a38:	udiv	x10, x2, x5
    6a3c:	msub	x4, x10, x5, x2
    6a40:	mov	x2, x10
    6a44:	mul	x11, x9, x10
    6a48:	extr	x4, x4, x1, #32
    6a4c:	cmp	x11, x4
    6a50:	b.ls	6a68 <__umodti3@@GCC_3.0+0x25c>  // b.plast
    6a54:	add	x4, x4, x6
    6a58:	cmp	x11, x4
    6a5c:	ccmp	x6, x4, #0x2, hi  // hi = pmore
    6a60:	b.ls	6b28 <__umodti3@@GCC_3.0+0x31c>  // b.plast
    6a64:	sub	x2, x10, #0x1
    6a68:	sub	x4, x4, x11
    6a6c:	udiv	x10, x4, x5
    6a70:	msub	x5, x10, x5, x4
    6a74:	mov	x4, x10
    6a78:	mul	x9, x9, x10
    6a7c:	bfi	x1, x5, #32, #32
    6a80:	cmp	x9, x1
    6a84:	b.ls	6a9c <__umodti3@@GCC_3.0+0x290>  // b.plast
    6a88:	add	x1, x1, x6
    6a8c:	cmp	x9, x1
    6a90:	ccmp	x6, x1, #0x2, hi  // hi = pmore
    6a94:	b.ls	6b34 <__umodti3@@GCC_3.0+0x328>  // b.plast
    6a98:	sub	x4, x10, #0x1
    6a9c:	sub	x1, x1, x9
    6aa0:	orr	x2, x4, x2, lsl #32
    6aa4:	mov	w4, w4
    6aa8:	lsr	x2, x2, #32
    6aac:	and	x9, x3, #0xffffffff
    6ab0:	lsr	x5, x3, #32
    6ab4:	mul	x10, x4, x9
    6ab8:	mul	x9, x2, x9
    6abc:	mul	x2, x2, x5
    6ac0:	madd	x4, x4, x5, x9
    6ac4:	add	x5, x4, x10, lsr #32
    6ac8:	mov	x4, #0x100000000           	// #4294967296
    6acc:	add	x4, x2, x4
    6ad0:	cmp	x9, x5
    6ad4:	csel	x2, x4, x2, hi  // hi = pmore
    6ad8:	add	x4, x2, x5, lsr #32
    6adc:	and	x10, x10, #0xffffffff
    6ae0:	add	x5, x10, x5, lsl #32
    6ae4:	cmp	x1, x4
    6ae8:	b.cc	6af8 <__umodti3@@GCC_3.0+0x2ec>  // b.lo, b.ul, b.last
    6aec:	mov	x2, x5
    6af0:	ccmp	x0, x5, #0x2, eq  // eq = none
    6af4:	b.cs	6b08 <__umodti3@@GCC_3.0+0x2fc>  // b.hs, b.nlast
    6af8:	sub	x2, x5, x3
    6afc:	cmp	x5, x2
    6b00:	cinc	x3, x6, cc  // cc = lo, ul, last
    6b04:	sub	x4, x4, x3
    6b08:	sub	x2, x0, x2
    6b0c:	cmp	x0, x2
    6b10:	sbc	x1, x1, x4
    6b14:	lsl	x8, x1, x8
    6b18:	lsr	x0, x2, x7
    6b1c:	orr	x0, x8, x0
    6b20:	lsr	x1, x1, x7
    6b24:	b	68b8 <__umodti3@@GCC_3.0+0xac>
    6b28:	sub	x2, x10, #0x2
    6b2c:	add	x4, x4, x6
    6b30:	b	6a68 <__umodti3@@GCC_3.0+0x25c>
    6b34:	sub	x4, x10, #0x2
    6b38:	add	x1, x1, x6
    6b3c:	b	6a9c <__umodti3@@GCC_3.0+0x290>

0000000000006b40 <__udivmodti4@@GCC_3.0>:
    6b40:	mov	x8, x0
    6b44:	mov	x5, x1
    6b48:	mov	x9, x2
    6b4c:	mov	x1, x3
    6b50:	mov	x7, x0
    6b54:	mov	x6, x5
    6b58:	cbnz	x3, 6d8c <__udivmodti4@@GCC_3.0+0x24c>
    6b5c:	cmp	x2, x5
    6b60:	b.ls	6c28 <__udivmodti4@@GCC_3.0+0xe8>  // b.plast
    6b64:	clz	x3, x2
    6b68:	cbz	x3, 6b84 <__udivmodti4@@GCC_3.0+0x44>
    6b6c:	lsl	x9, x2, x3
    6b70:	lsl	x5, x5, x3
    6b74:	neg	w6, w3
    6b78:	lsr	x6, x0, x6
    6b7c:	orr	x6, x6, x5
    6b80:	lsl	x7, x0, x3
    6b84:	lsr	x5, x9, #32
    6b88:	and	x2, x9, #0xffffffff
    6b8c:	udiv	x8, x6, x5
    6b90:	msub	x6, x8, x5, x6
    6b94:	mov	x11, x8
    6b98:	mul	x10, x2, x8
    6b9c:	extr	x6, x6, x7, #32
    6ba0:	cmp	x10, x6
    6ba4:	b.ls	6bbc <__udivmodti4@@GCC_3.0+0x7c>  // b.plast
    6ba8:	add	x6, x6, x9
    6bac:	cmp	x10, x6
    6bb0:	ccmp	x9, x6, #0x2, hi  // hi = pmore
    6bb4:	b.ls	6c10 <__udivmodti4@@GCC_3.0+0xd0>  // b.plast
    6bb8:	sub	x11, x8, #0x1
    6bbc:	sub	x6, x6, x10
    6bc0:	udiv	x8, x6, x5
    6bc4:	msub	x6, x8, x5, x6
    6bc8:	mov	x0, x8
    6bcc:	mul	x5, x2, x8
    6bd0:	mov	x2, x7
    6bd4:	bfi	x2, x6, #32, #32
    6bd8:	cmp	x5, x2
    6bdc:	b.ls	6bf4 <__udivmodti4@@GCC_3.0+0xb4>  // b.plast
    6be0:	add	x2, x2, x9
    6be4:	cmp	x5, x2
    6be8:	ccmp	x9, x2, #0x2, hi  // hi = pmore
    6bec:	b.ls	6c1c <__udivmodti4@@GCC_3.0+0xdc>  // b.plast
    6bf0:	sub	x0, x8, #0x1
    6bf4:	sub	x2, x2, x5
    6bf8:	orr	x0, x0, x11, lsl #32
    6bfc:	cbz	x4, 6c0c <__udivmodti4@@GCC_3.0+0xcc>
    6c00:	lsr	x2, x2, x3
    6c04:	str	x2, [x4]
    6c08:	str	xzr, [x4, #8]
    6c0c:	ret
    6c10:	sub	x11, x8, #0x2
    6c14:	add	x6, x6, x9
    6c18:	b	6bbc <__udivmodti4@@GCC_3.0+0x7c>
    6c1c:	sub	x0, x8, #0x2
    6c20:	add	x2, x2, x9
    6c24:	b	6bf4 <__udivmodti4@@GCC_3.0+0xb4>
    6c28:	cbnz	x2, 6c38 <__udivmodti4@@GCC_3.0+0xf8>
    6c2c:	mov	x9, #0x1                   	// #1
    6c30:	mov	x0, #0x0                   	// #0
    6c34:	udiv	x9, x9, x0
    6c38:	clz	x3, x9
    6c3c:	cbnz	x3, 6cc4 <__udivmodti4@@GCC_3.0+0x184>
    6c40:	sub	x5, x5, x9
    6c44:	mov	x1, #0x1                   	// #1
    6c48:	lsr	x6, x9, #32
    6c4c:	and	x2, x9, #0xffffffff
    6c50:	udiv	x8, x5, x6
    6c54:	msub	x5, x8, x6, x5
    6c58:	mov	x11, x8
    6c5c:	mul	x10, x2, x8
    6c60:	extr	x5, x5, x7, #32
    6c64:	cmp	x10, x5
    6c68:	b.ls	6c80 <__udivmodti4@@GCC_3.0+0x140>  // b.plast
    6c6c:	add	x5, x5, x9
    6c70:	cmp	x10, x5
    6c74:	ccmp	x9, x5, #0x2, hi  // hi = pmore
    6c78:	b.ls	6d74 <__udivmodti4@@GCC_3.0+0x234>  // b.plast
    6c7c:	sub	x11, x8, #0x1
    6c80:	sub	x5, x5, x10
    6c84:	udiv	x8, x5, x6
    6c88:	msub	x5, x8, x6, x5
    6c8c:	mov	x0, x8
    6c90:	mul	x6, x2, x8
    6c94:	mov	x2, x7
    6c98:	bfi	x2, x5, #32, #32
    6c9c:	cmp	x6, x2
    6ca0:	b.ls	6cb8 <__udivmodti4@@GCC_3.0+0x178>  // b.plast
    6ca4:	add	x2, x2, x9
    6ca8:	cmp	x6, x2
    6cac:	ccmp	x9, x2, #0x2, hi  // hi = pmore
    6cb0:	b.ls	6d80 <__udivmodti4@@GCC_3.0+0x240>  // b.plast
    6cb4:	sub	x0, x8, #0x1
    6cb8:	sub	x2, x2, x6
    6cbc:	orr	x0, x0, x11, lsl #32
    6cc0:	b	6bfc <__udivmodti4@@GCC_3.0+0xbc>
    6cc4:	lsl	x9, x9, x3
    6cc8:	mov	x2, #0x40                  	// #64
    6ccc:	sub	x2, x2, x3
    6cd0:	lsr	x6, x5, x2
    6cd4:	lsl	x1, x5, x3
    6cd8:	lsr	x5, x8, x2
    6cdc:	orr	x5, x5, x1
    6ce0:	lsl	x7, x8, x3
    6ce4:	lsr	x2, x9, #32
    6ce8:	and	x8, x9, #0xffffffff
    6cec:	udiv	x10, x6, x2
    6cf0:	msub	x6, x10, x2, x6
    6cf4:	mov	x12, x10
    6cf8:	mul	x11, x8, x10
    6cfc:	extr	x0, x6, x5, #32
    6d00:	cmp	x11, x0
    6d04:	b.ls	6d1c <__udivmodti4@@GCC_3.0+0x1dc>  // b.plast
    6d08:	add	x0, x0, x9
    6d0c:	cmp	x11, x0
    6d10:	ccmp	x9, x0, #0x2, hi  // hi = pmore
    6d14:	b.ls	6d5c <__udivmodti4@@GCC_3.0+0x21c>  // b.plast
    6d18:	sub	x12, x10, #0x1
    6d1c:	sub	x0, x0, x11
    6d20:	udiv	x6, x0, x2
    6d24:	msub	x0, x6, x2, x0
    6d28:	mov	x1, x6
    6d2c:	mul	x2, x8, x6
    6d30:	bfi	x5, x0, #32, #32
    6d34:	cmp	x2, x5
    6d38:	b.ls	6d50 <__udivmodti4@@GCC_3.0+0x210>  // b.plast
    6d3c:	add	x5, x5, x9
    6d40:	cmp	x2, x5
    6d44:	ccmp	x9, x5, #0x2, hi  // hi = pmore
    6d48:	b.ls	6d68 <__udivmodti4@@GCC_3.0+0x228>  // b.plast
    6d4c:	sub	x1, x6, #0x1
    6d50:	sub	x5, x5, x2
    6d54:	orr	x1, x1, x12, lsl #32
    6d58:	b	6c48 <__udivmodti4@@GCC_3.0+0x108>
    6d5c:	sub	x12, x10, #0x2
    6d60:	add	x0, x0, x9
    6d64:	b	6d1c <__udivmodti4@@GCC_3.0+0x1dc>
    6d68:	sub	x1, x6, #0x2
    6d6c:	add	x5, x5, x9
    6d70:	b	6d50 <__udivmodti4@@GCC_3.0+0x210>
    6d74:	sub	x11, x8, #0x2
    6d78:	add	x5, x5, x9
    6d7c:	b	6c80 <__udivmodti4@@GCC_3.0+0x140>
    6d80:	sub	x0, x8, #0x2
    6d84:	add	x2, x2, x9
    6d88:	b	6cb8 <__udivmodti4@@GCC_3.0+0x178>
    6d8c:	cmp	x3, x5
    6d90:	b.ls	6dac <__udivmodti4@@GCC_3.0+0x26c>  // b.plast
    6d94:	cbz	x4, 6f38 <__udivmodti4@@GCC_3.0+0x3f8>
    6d98:	str	x0, [x4]
    6d9c:	str	x5, [x4, #8]
    6da0:	mov	x1, #0x0                   	// #0
    6da4:	mov	x0, #0x0                   	// #0
    6da8:	b	6c0c <__udivmodti4@@GCC_3.0+0xcc>
    6dac:	clz	x9, x3
    6db0:	cbnz	x9, 6de8 <__udivmodti4@@GCC_3.0+0x2a8>
    6db4:	mov	x0, x9
    6db8:	ccmp	x2, x8, #0x0, cs  // cs = hs, nlast
    6dbc:	b.hi	6dd4 <__udivmodti4@@GCC_3.0+0x294>  // b.pmore
    6dc0:	sub	x2, x8, x2
    6dc4:	cmp	x8, x2
    6dc8:	sbc	x6, x5, x3
    6dcc:	mov	x7, x2
    6dd0:	mov	x0, #0x1                   	// #1
    6dd4:	mov	x1, x9
    6dd8:	cbz	x4, 6c0c <__udivmodti4@@GCC_3.0+0xcc>
    6ddc:	str	x7, [x4]
    6de0:	str	x6, [x4, #8]
    6de4:	b	6c0c <__udivmodti4@@GCC_3.0+0xcc>
    6de8:	lsl	x3, x3, x9
    6dec:	mov	x7, #0x40                  	// #64
    6df0:	sub	x7, x7, x9
    6df4:	lsr	x0, x2, x7
    6df8:	orr	x3, x0, x3
    6dfc:	lsl	x2, x2, x9
    6e00:	lsr	x6, x5, x7
    6e04:	lsl	x5, x5, x9
    6e08:	lsr	x1, x8, x7
    6e0c:	orr	x5, x1, x5
    6e10:	lsl	x8, x8, x9
    6e14:	lsr	x10, x3, #32
    6e18:	and	x11, x3, #0xffffffff
    6e1c:	udiv	x12, x6, x10
    6e20:	msub	x6, x12, x10, x6
    6e24:	mov	x0, x12
    6e28:	mul	x13, x11, x12
    6e2c:	extr	x1, x6, x5, #32
    6e30:	cmp	x13, x1
    6e34:	b.ls	6e4c <__udivmodti4@@GCC_3.0+0x30c>  // b.plast
    6e38:	add	x1, x1, x3
    6e3c:	cmp	x13, x1
    6e40:	ccmp	x3, x1, #0x2, hi  // hi = pmore
    6e44:	b.ls	6f20 <__udivmodti4@@GCC_3.0+0x3e0>  // b.plast
    6e48:	sub	x0, x12, #0x1
    6e4c:	sub	x1, x1, x13
    6e50:	udiv	x12, x1, x10
    6e54:	msub	x10, x12, x10, x1
    6e58:	mov	x1, x12
    6e5c:	mul	x6, x11, x12
    6e60:	bfi	x5, x10, #32, #32
    6e64:	cmp	x6, x5
    6e68:	b.ls	6e80 <__udivmodti4@@GCC_3.0+0x340>  // b.plast
    6e6c:	add	x5, x5, x3
    6e70:	cmp	x6, x5
    6e74:	ccmp	x3, x5, #0x2, hi  // hi = pmore
    6e78:	b.ls	6f2c <__udivmodti4@@GCC_3.0+0x3ec>  // b.plast
    6e7c:	sub	x1, x12, #0x1
    6e80:	sub	x5, x5, x6
    6e84:	orr	x0, x1, x0, lsl #32
    6e88:	mov	w1, w1
    6e8c:	lsr	x6, x0, #32
    6e90:	and	x10, x2, #0xffffffff
    6e94:	lsr	x12, x2, #32
    6e98:	mul	x11, x1, x10
    6e9c:	mul	x10, x6, x10
    6ea0:	mul	x6, x6, x12
    6ea4:	madd	x1, x1, x12, x10
    6ea8:	add	x1, x1, x11, lsr #32
    6eac:	mov	x12, #0x100000000           	// #4294967296
    6eb0:	add	x12, x6, x12
    6eb4:	cmp	x10, x1
    6eb8:	csel	x6, x12, x6, hi  // hi = pmore
    6ebc:	add	x6, x6, x1, lsr #32
    6ec0:	and	x11, x11, #0xffffffff
    6ec4:	add	x1, x11, x1, lsl #32
    6ec8:	cmp	x5, x6
    6ecc:	b.cc	6edc <__udivmodti4@@GCC_3.0+0x39c>  // b.lo, b.ul, b.last
    6ed0:	mov	x10, x1
    6ed4:	ccmp	x8, x1, #0x2, eq  // eq = none
    6ed8:	b.cs	6ef0 <__udivmodti4@@GCC_3.0+0x3b0>  // b.hs, b.nlast
    6edc:	sub	x0, x0, #0x1
    6ee0:	sub	x10, x1, x2
    6ee4:	cmp	x1, x10
    6ee8:	cinc	x3, x3, cc  // cc = lo, ul, last
    6eec:	sub	x6, x6, x3
    6ef0:	mov	x1, #0x0                   	// #0
    6ef4:	cbz	x4, 6c0c <__udivmodti4@@GCC_3.0+0xcc>
    6ef8:	sub	x10, x8, x10
    6efc:	cmp	x8, x10
    6f00:	sbc	x5, x5, x6
    6f04:	lsl	x7, x5, x7
    6f08:	lsr	x10, x10, x9
    6f0c:	orr	x7, x7, x10
    6f10:	lsr	x5, x5, x9
    6f14:	str	x7, [x4]
    6f18:	str	x5, [x4, #8]
    6f1c:	b	6c0c <__udivmodti4@@GCC_3.0+0xcc>
    6f20:	sub	x0, x12, #0x2
    6f24:	add	x1, x1, x3
    6f28:	b	6e4c <__udivmodti4@@GCC_3.0+0x30c>
    6f2c:	sub	x1, x12, #0x2
    6f30:	add	x5, x5, x3
    6f34:	b	6e80 <__udivmodti4@@GCC_3.0+0x340>
    6f38:	mov	x1, #0x0                   	// #0
    6f3c:	mov	x0, #0x0                   	// #0
    6f40:	b	6c0c <__udivmodti4@@GCC_3.0+0xcc>
    6f44:	mov	x0, #0x0                   	// #0
    6f48:	ret
    6f4c:	adrp	x2, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    6f50:	ldr	w2, [x2, #448]
    6f54:	cbnz	w2, 6f64 <__udivmodti4@@GCC_3.0+0x424>
    6f58:	mrs	x3, ctr_el0
    6f5c:	adrp	x2, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    6f60:	str	w3, [x2, #448]
    6f64:	adrp	x2, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    6f68:	ldr	w5, [x2, #448]
    6f6c:	and	w2, w5, #0xf
    6f70:	mov	w3, #0x4                   	// #4
    6f74:	lsl	w4, w3, w2
    6f78:	ubfx	x5, x5, #16, #4
    6f7c:	lsl	w3, w3, w5
    6f80:	sub	w2, w3, #0x1
    6f84:	bic	x2, x0, x2
    6f88:	cmp	x2, x1
    6f8c:	b.cs	6fa4 <__udivmodti4@@GCC_3.0+0x464>  // b.hs, b.nlast
    6f90:	mov	w3, w3
    6f94:	dc	cvau, x2
    6f98:	add	x2, x2, x3
    6f9c:	cmp	x1, x2
    6fa0:	b.hi	6f94 <__udivmodti4@@GCC_3.0+0x454>  // b.pmore
    6fa4:	dsb	ish
    6fa8:	sub	w2, w4, #0x1
    6fac:	bic	x0, x0, x2
    6fb0:	cmp	x1, x0
    6fb4:	b.ls	6fcc <__udivmodti4@@GCC_3.0+0x48c>  // b.plast
    6fb8:	mov	w2, w4
    6fbc:	ic	ivau, x0
    6fc0:	add	x0, x0, x2
    6fc4:	cmp	x1, x0
    6fc8:	b.hi	6fbc <__udivmodti4@@GCC_3.0+0x47c>  // b.pmore
    6fcc:	dsb	ish
    6fd0:	isb
    6fd4:	ret
    6fd8:	tbz	w0, #0, 6fe8 <__udivmodti4@@GCC_3.0+0x4a8>
    6fdc:	movi	v1.2s, #0x0
    6fe0:	fdiv	s0, s1, s1
    6fe4:	mrs	x1, fpsr
    6fe8:	tbz	w0, #1, 6ffc <__udivmodti4@@GCC_3.0+0x4bc>
    6fec:	fmov	s1, #1.000000000000000000e+00
    6ff0:	movi	v2.2s, #0x0
    6ff4:	fdiv	s0, s1, s2
    6ff8:	mrs	x1, fpsr
    6ffc:	tbz	w0, #2, 701c <__udivmodti4@@GCC_3.0+0x4dc>
    7000:	mov	w1, #0x7f7fffff            	// #2139095039
    7004:	fmov	s1, w1
    7008:	mov	w1, #0xc5ae                	// #50606
    700c:	movk	w1, #0x749d, lsl #16
    7010:	fmov	s2, w1
    7014:	fadd	s0, s1, s2
    7018:	mrs	x1, fpsr
    701c:	tbz	w0, #3, 702c <__udivmodti4@@GCC_3.0+0x4ec>
    7020:	movi	v1.2s, #0x80, lsl #16
    7024:	fmul	s0, s1, s1
    7028:	mrs	x1, fpsr
    702c:	tbz	w0, #4, 7044 <__udivmodti4@@GCC_3.0+0x504>
    7030:	mov	w0, #0x7f7fffff            	// #2139095039
    7034:	fmov	s1, w0
    7038:	fmov	s2, #1.000000000000000000e+00
    703c:	fsub	s0, s1, s2
    7040:	mrs	x0, fpsr
    7044:	ret

0000000000007048 <__addtf3@@GCC_3.0>:
    7048:	stp	x29, x30, [sp, #-32]!
    704c:	mov	x29, sp
    7050:	str	q0, [sp, #16]
    7054:	ldr	x6, [sp, #16]
    7058:	ldr	x4, [sp, #24]
    705c:	str	q1, [sp, #16]
    7060:	ldr	x7, [sp, #16]
    7064:	ldr	x0, [sp, #24]
    7068:	mrs	x11, fpcr
    706c:	ubfx	x5, x4, #48, #15
    7070:	mov	x9, x5
    7074:	lsr	x10, x4, #63
    7078:	ubfiz	x1, x4, #3, #48
    707c:	orr	x1, x1, x6, lsr #61
    7080:	lsl	x3, x6, #3
    7084:	ubfx	x8, x0, #48, #15
    7088:	mov	x13, x8
    708c:	lsr	x14, x0, #63
    7090:	ubfiz	x0, x0, #3, #48
    7094:	orr	x2, x0, x7, lsr #61
    7098:	lsl	x12, x7, #3
    709c:	cmp	x14, x4, lsr #63
    70a0:	b.eq	70e8 <__addtf3@@GCC_3.0+0xa0>  // b.none
    70a4:	sub	w0, w5, w8
    70a8:	cmp	w0, #0x0
    70ac:	b.le	7650 <__addtf3@@GCC_3.0+0x608>
    70b0:	cbnz	x8, 7540 <__addtf3@@GCC_3.0+0x4f8>
    70b4:	orr	x4, x2, x12
    70b8:	cbz	x4, 7508 <__addtf3@@GCC_3.0+0x4c0>
    70bc:	subs	w0, w0, #0x1
    70c0:	b.eq	7530 <__addtf3@@GCC_3.0+0x4e8>  // b.none
    70c4:	mov	x4, #0x7fff                	// #32767
    70c8:	cmp	x5, x4
    70cc:	b.ne	7550 <__addtf3@@GCC_3.0+0x508>  // b.any
    70d0:	orr	x0, x1, x3
    70d4:	cbz	x0, 7c50 <__addtf3@@GCC_3.0+0xc08>
    70d8:	lsr	x0, x1, #50
    70dc:	eor	x0, x0, #0x1
    70e0:	and	w0, w0, #0x1
    70e4:	b	7afc <__addtf3@@GCC_3.0+0xab4>
    70e8:	sub	w0, w5, w8
    70ec:	cmp	w0, #0x0
    70f0:	b.le	722c <__addtf3@@GCC_3.0+0x1e4>
    70f4:	cbnz	x8, 7160 <__addtf3@@GCC_3.0+0x118>
    70f8:	orr	x4, x2, x12
    70fc:	cbz	x4, 712c <__addtf3@@GCC_3.0+0xe4>
    7100:	subs	w0, w0, #0x1
    7104:	b.eq	7154 <__addtf3@@GCC_3.0+0x10c>  // b.none
    7108:	mov	x4, #0x7fff                	// #32767
    710c:	cmp	x5, x4
    7110:	b.ne	7170 <__addtf3@@GCC_3.0+0x128>  // b.any
    7114:	orr	x0, x1, x3
    7118:	cbz	x0, 7b9c <__addtf3@@GCC_3.0+0xb54>
    711c:	lsr	x0, x1, #50
    7120:	eor	x0, x0, #0x1
    7124:	and	w0, w0, #0x1
    7128:	b	7afc <__addtf3@@GCC_3.0+0xab4>
    712c:	mov	x4, x3
    7130:	mov	x0, #0x7fff                	// #32767
    7134:	cmp	x5, x0
    7138:	b.ne	79c0 <__addtf3@@GCC_3.0+0x978>  // b.any
    713c:	orr	x0, x1, x3
    7140:	cbz	x0, 7b8c <__addtf3@@GCC_3.0+0xb44>
    7144:	lsr	x0, x1, #50
    7148:	eor	x0, x0, #0x1
    714c:	and	w0, w0, #0x1
    7150:	b	7afc <__addtf3@@GCC_3.0+0xab4>
    7154:	adds	x4, x3, x12
    7158:	adc	x1, x2, x1
    715c:	b	71b0 <__addtf3@@GCC_3.0+0x168>
    7160:	orr	x2, x2, #0x8000000000000
    7164:	mov	x4, #0x7fff                	// #32767
    7168:	cmp	x5, x4
    716c:	b.eq	71e0 <__addtf3@@GCC_3.0+0x198>  // b.none
    7170:	cmp	w0, #0x74
    7174:	b.gt	7b48 <__addtf3@@GCC_3.0+0xb00>
    7178:	cmp	w0, #0x3f
    717c:	b.gt	71f8 <__addtf3@@GCC_3.0+0x1b0>
    7180:	mov	w5, #0x40                  	// #64
    7184:	sub	w5, w5, w0
    7188:	lsl	x4, x2, x5
    718c:	lsr	x6, x12, x0
    7190:	orr	x4, x4, x6
    7194:	lsl	x5, x12, x5
    7198:	cmp	x5, #0x0
    719c:	cset	x5, ne  // ne = any
    71a0:	orr	x4, x4, x5
    71a4:	lsr	x0, x2, x0
    71a8:	adds	x4, x4, x3
    71ac:	adc	x1, x0, x1
    71b0:	tbz	x1, #51, 79c0 <__addtf3@@GCC_3.0+0x978>
    71b4:	add	x9, x9, #0x1
    71b8:	mov	x0, #0x7fff                	// #32767
    71bc:	cmp	x9, x0
    71c0:	b.eq	74d0 <__addtf3@@GCC_3.0+0x488>  // b.none
    71c4:	and	x0, x1, #0xfff7ffffffffffff
    71c8:	and	x3, x4, #0x1
    71cc:	orr	x3, x3, x4, lsr #1
    71d0:	orr	x3, x3, x1, lsl #63
    71d4:	lsr	x1, x0, #1
    71d8:	mov	w0, #0x0                   	// #0
    71dc:	b	7afc <__addtf3@@GCC_3.0+0xab4>
    71e0:	orr	x0, x1, x3
    71e4:	cbz	x0, 7bac <__addtf3@@GCC_3.0+0xb64>
    71e8:	lsr	x0, x1, #50
    71ec:	eor	x0, x0, #0x1
    71f0:	and	w0, w0, #0x1
    71f4:	b	7afc <__addtf3@@GCC_3.0+0xab4>
    71f8:	sub	w4, w0, #0x40
    71fc:	lsr	x4, x2, x4
    7200:	mov	w5, #0x80                  	// #128
    7204:	sub	w5, w5, w0
    7208:	lsl	x2, x2, x5
    720c:	cmp	w0, #0x40
    7210:	csel	x0, x2, xzr, ne  // ne = any
    7214:	orr	x12, x0, x12
    7218:	cmp	x12, #0x0
    721c:	cset	x0, ne  // ne = any
    7220:	orr	x4, x4, x0
    7224:	mov	x0, #0x0                   	// #0
    7228:	b	71a8 <__addtf3@@GCC_3.0+0x160>
    722c:	tbnz	w0, #31, 7270 <__addtf3@@GCC_3.0+0x228>
    7230:	add	x0, x5, #0x1
    7234:	tst	x0, #0x7ffe
    7238:	b.ne	7470 <__addtf3@@GCC_3.0+0x428>  // b.any
    723c:	cbnz	x5, 73bc <__addtf3@@GCC_3.0+0x374>
    7240:	orr	x0, x1, x3
    7244:	cbz	x0, 7b3c <__addtf3@@GCC_3.0+0xaf4>
    7248:	orr	x0, x2, x12
    724c:	cbz	x0, 7cb0 <__addtf3@@GCC_3.0+0xc68>
    7250:	adds	x4, x3, x12
    7254:	adc	x1, x2, x1
    7258:	tbz	x1, #51, 79c4 <__addtf3@@GCC_3.0+0x97c>
    725c:	and	x1, x1, #0xfff7ffffffffffff
    7260:	mov	x3, x4
    7264:	mov	x9, #0x1                   	// #1
    7268:	mov	w0, #0x0                   	// #0
    726c:	b	7afc <__addtf3@@GCC_3.0+0xab4>
    7270:	cbnz	x5, 7308 <__addtf3@@GCC_3.0+0x2c0>
    7274:	orr	x4, x1, x3
    7278:	cbz	x4, 72b8 <__addtf3@@GCC_3.0+0x270>
    727c:	cmn	w0, #0x1
    7280:	b.eq	72f8 <__addtf3@@GCC_3.0+0x2b0>  // b.none
    7284:	mvn	w0, w0
    7288:	mov	x4, #0x7fff                	// #32767
    728c:	cmp	x8, x4
    7290:	b.ne	731c <__addtf3@@GCC_3.0+0x2d4>  // b.any
    7294:	orr	x3, x2, x12
    7298:	cbz	x3, 7bc8 <__addtf3@@GCC_3.0+0xb80>
    729c:	lsr	x0, x2, #50
    72a0:	eor	x0, x0, #0x1
    72a4:	and	w0, w0, #0x1
    72a8:	mov	x1, x2
    72ac:	mov	x3, x12
    72b0:	mov	x9, x8
    72b4:	b	7afc <__addtf3@@GCC_3.0+0xab4>
    72b8:	mov	x0, #0x7fff                	// #32767
    72bc:	cmp	x8, x0
    72c0:	b.eq	72d4 <__addtf3@@GCC_3.0+0x28c>  // b.none
    72c4:	mov	x1, x2
    72c8:	mov	x4, x12
    72cc:	mov	x9, x8
    72d0:	b	79c0 <__addtf3@@GCC_3.0+0x978>
    72d4:	orr	x3, x2, x12
    72d8:	cbz	x3, 7bbc <__addtf3@@GCC_3.0+0xb74>
    72dc:	lsr	x0, x2, #50
    72e0:	eor	x0, x0, #0x1
    72e4:	and	w0, w0, #0x1
    72e8:	mov	x1, x2
    72ec:	mov	x3, x12
    72f0:	mov	x9, x8
    72f4:	b	7afc <__addtf3@@GCC_3.0+0xab4>
    72f8:	adds	x4, x3, x12
    72fc:	adc	x1, x2, x1
    7300:	mov	x9, x8
    7304:	b	71b0 <__addtf3@@GCC_3.0+0x168>
    7308:	neg	w0, w0
    730c:	orr	x1, x1, #0x8000000000000
    7310:	mov	x4, #0x7fff                	// #32767
    7314:	cmp	x8, x4
    7318:	b.eq	7364 <__addtf3@@GCC_3.0+0x31c>  // b.none
    731c:	cmp	w0, #0x74
    7320:	b.gt	7b54 <__addtf3@@GCC_3.0+0xb0c>
    7324:	cmp	w0, #0x3f
    7328:	b.gt	7388 <__addtf3@@GCC_3.0+0x340>
    732c:	mov	w5, #0x40                  	// #64
    7330:	sub	w5, w5, w0
    7334:	lsl	x4, x1, x5
    7338:	lsr	x6, x3, x0
    733c:	orr	x4, x4, x6
    7340:	lsl	x3, x3, x5
    7344:	cmp	x3, #0x0
    7348:	cset	x3, ne  // ne = any
    734c:	orr	x4, x4, x3
    7350:	lsr	x1, x1, x0
    7354:	adds	x4, x4, x12
    7358:	adc	x1, x1, x2
    735c:	mov	x9, x13
    7360:	b	71b0 <__addtf3@@GCC_3.0+0x168>
    7364:	orr	x3, x2, x12
    7368:	cbz	x3, 7bd4 <__addtf3@@GCC_3.0+0xb8c>
    736c:	lsr	x0, x2, #50
    7370:	eor	x0, x0, #0x1
    7374:	and	w0, w0, #0x1
    7378:	mov	x1, x2
    737c:	mov	x3, x12
    7380:	mov	x9, x8
    7384:	b	7afc <__addtf3@@GCC_3.0+0xab4>
    7388:	sub	w4, w0, #0x40
    738c:	lsr	x4, x1, x4
    7390:	mov	w5, #0x80                  	// #128
    7394:	sub	w5, w5, w0
    7398:	lsl	x1, x1, x5
    739c:	cmp	w0, #0x40
    73a0:	csel	x0, x1, xzr, ne  // ne = any
    73a4:	orr	x3, x0, x3
    73a8:	cmp	x3, #0x0
    73ac:	cset	x0, ne  // ne = any
    73b0:	orr	x4, x4, x0
    73b4:	mov	x1, #0x0                   	// #0
    73b8:	b	7354 <__addtf3@@GCC_3.0+0x30c>
    73bc:	mov	x0, #0x7fff                	// #32767
    73c0:	cmp	x5, x0
    73c4:	b.eq	7420 <__addtf3@@GCC_3.0+0x3d8>  // b.none
    73c8:	mov	w0, #0x0                   	// #0
    73cc:	mov	x4, #0x7fff                	// #32767
    73d0:	cmp	x8, x4
    73d4:	b.eq	7440 <__addtf3@@GCC_3.0+0x3f8>  // b.none
    73d8:	orr	x4, x1, x3
    73dc:	cbz	x4, 7b2c <__addtf3@@GCC_3.0+0xae4>
    73e0:	orr	x12, x2, x12
    73e4:	mov	x9, #0x7fff                	// #32767
    73e8:	cbz	x12, 7afc <__addtf3@@GCC_3.0+0xab4>
    73ec:	bfi	x6, x1, #61, #3
    73f0:	lsr	x3, x1, #3
    73f4:	tbz	x1, #50, 7410 <__addtf3@@GCC_3.0+0x3c8>
    73f8:	lsr	x1, x2, #3
    73fc:	tbnz	x2, #50, 7410 <__addtf3@@GCC_3.0+0x3c8>
    7400:	mov	x6, x7
    7404:	bfi	x6, x2, #61, #3
    7408:	mov	x3, x1
    740c:	mov	x10, x14
    7410:	extr	x1, x3, x6, #61
    7414:	lsl	x3, x6, #3
    7418:	mov	x9, #0x7fff                	// #32767
    741c:	b	7afc <__addtf3@@GCC_3.0+0xab4>
    7420:	orr	x0, x1, x3
    7424:	cbz	x0, 7cdc <__addtf3@@GCC_3.0+0xc94>
    7428:	lsr	x0, x1, #50
    742c:	eor	x0, x0, #0x1
    7430:	and	w0, w0, #0x1
    7434:	mov	x4, #0x7fff                	// #32767
    7438:	cmp	x8, x4
    743c:	b.ne	73e0 <__addtf3@@GCC_3.0+0x398>  // b.any
    7440:	orr	x4, x2, x12
    7444:	cbz	x4, 73d8 <__addtf3@@GCC_3.0+0x390>
    7448:	tst	x2, #0x4000000000000
    744c:	csinc	w0, w0, wzr, ne  // ne = any
    7450:	orr	x3, x1, x3
    7454:	cbnz	x3, 73ec <__addtf3@@GCC_3.0+0x3a4>
    7458:	mov	x1, x2
    745c:	mov	x3, x12
    7460:	mov	x9, #0x7fff                	// #32767
    7464:	b	7afc <__addtf3@@GCC_3.0+0xab4>
    7468:	mov	w0, #0x0                   	// #0
    746c:	b	7440 <__addtf3@@GCC_3.0+0x3f8>
    7470:	mov	x4, #0x7fff                	// #32767
    7474:	cmp	x0, x4
    7478:	b.eq	7498 <__addtf3@@GCC_3.0+0x450>  // b.none
    747c:	adds	x3, x3, x12
    7480:	adc	x1, x2, x1
    7484:	extr	x3, x1, x3, #1
    7488:	lsr	x1, x1, #1
    748c:	mov	x9, x0
    7490:	mov	w0, #0x0                   	// #0
    7494:	b	7afc <__addtf3@@GCC_3.0+0xab4>
    7498:	ands	x3, x11, #0xc00000
    749c:	b.eq	7be0 <__addtf3@@GCC_3.0+0xb98>  // b.none
    74a0:	cmp	x3, #0x400, lsl #12
    74a4:	ccmp	x10, #0x0, #0x0, eq  // eq = none
    74a8:	b.eq	7bec <__addtf3@@GCC_3.0+0xba4>  // b.none
    74ac:	cmp	x3, #0x800, lsl #12
    74b0:	ccmp	x10, #0x0, #0x4, eq  // eq = none
    74b4:	b.ne	7c00 <__addtf3@@GCC_3.0+0xbb8>  // b.any
    74b8:	mov	w4, #0x0                   	// #0
    74bc:	mov	x1, #0xffffffffffffffff    	// #-1
    74c0:	mov	x3, x1
    74c4:	mov	x9, #0x7ffe                	// #32766
    74c8:	mov	w0, #0x14                  	// #20
    74cc:	b	7b08 <__addtf3@@GCC_3.0+0xac0>
    74d0:	ands	x3, x11, #0xc00000
    74d4:	b.eq	7c10 <__addtf3@@GCC_3.0+0xbc8>  // b.none
    74d8:	cmp	x3, #0x400, lsl #12
    74dc:	ccmp	x10, #0x0, #0x0, eq  // eq = none
    74e0:	b.eq	7c1c <__addtf3@@GCC_3.0+0xbd4>  // b.none
    74e4:	cmp	x3, #0x800, lsl #12
    74e8:	ccmp	x10, #0x0, #0x4, eq  // eq = none
    74ec:	b.ne	7c30 <__addtf3@@GCC_3.0+0xbe8>  // b.any
    74f0:	mov	w4, #0x0                   	// #0
    74f4:	mov	x1, #0xffffffffffffffff    	// #-1
    74f8:	mov	x3, x1
    74fc:	mov	x9, #0x7ffe                	// #32766
    7500:	mov	w0, #0x14                  	// #20
    7504:	b	7b08 <__addtf3@@GCC_3.0+0xac0>
    7508:	mov	x4, x3
    750c:	mov	x0, #0x7fff                	// #32767
    7510:	cmp	x5, x0
    7514:	b.ne	79c0 <__addtf3@@GCC_3.0+0x978>  // b.any
    7518:	orr	x0, x1, x3
    751c:	cbz	x0, 7c40 <__addtf3@@GCC_3.0+0xbf8>
    7520:	lsr	x0, x1, #50
    7524:	eor	x0, x0, #0x1
    7528:	and	w0, w0, #0x1
    752c:	b	7afc <__addtf3@@GCC_3.0+0xab4>
    7530:	sub	x4, x3, x12
    7534:	cmp	x3, x4
    7538:	sbc	x1, x1, x2
    753c:	b	7594 <__addtf3@@GCC_3.0+0x54c>
    7540:	orr	x2, x2, #0x8000000000000
    7544:	mov	x4, #0x7fff                	// #32767
    7548:	cmp	x5, x4
    754c:	b.eq	7604 <__addtf3@@GCC_3.0+0x5bc>  // b.none
    7550:	cmp	w0, #0x74
    7554:	b.gt	7b60 <__addtf3@@GCC_3.0+0xb18>
    7558:	cmp	w0, #0x3f
    755c:	b.gt	761c <__addtf3@@GCC_3.0+0x5d4>
    7560:	mov	w5, #0x40                  	// #64
    7564:	sub	w5, w5, w0
    7568:	lsl	x4, x2, x5
    756c:	lsr	x6, x12, x0
    7570:	orr	x4, x4, x6
    7574:	lsl	x12, x12, x5
    7578:	cmp	x12, #0x0
    757c:	cset	x5, ne  // ne = any
    7580:	orr	x4, x4, x5
    7584:	lsr	x0, x2, x0
    7588:	sub	x4, x3, x4
    758c:	cmp	x3, x4
    7590:	sbc	x1, x1, x0
    7594:	tbz	x1, #51, 79c0 <__addtf3@@GCC_3.0+0x978>
    7598:	and	x5, x1, #0x7ffffffffffff
    759c:	cbz	x5, 7964 <__addtf3@@GCC_3.0+0x91c>
    75a0:	clz	x0, x5
    75a4:	sub	w0, w0, #0xc
    75a8:	lsl	x5, x5, x0
    75ac:	neg	w1, w0
    75b0:	lsr	x1, x4, x1
    75b4:	orr	x1, x1, x5
    75b8:	lsl	x5, x4, x0
    75bc:	sxtw	x2, w0
    75c0:	cmp	x9, w0, sxtw
    75c4:	b.gt	79b4 <__addtf3@@GCC_3.0+0x96c>
    75c8:	sub	w9, w0, w9
    75cc:	add	w6, w9, #0x1
    75d0:	cmp	w6, #0x3f
    75d4:	b.gt	7980 <__addtf3@@GCC_3.0+0x938>
    75d8:	mov	w0, #0x40                  	// #64
    75dc:	sub	w0, w0, w6
    75e0:	lsl	x4, x1, x0
    75e4:	lsr	x2, x5, x6
    75e8:	orr	x4, x4, x2
    75ec:	lsl	x5, x5, x0
    75f0:	cmp	x5, #0x0
    75f4:	cset	x3, ne  // ne = any
    75f8:	orr	x4, x4, x3
    75fc:	lsr	x1, x1, x6
    7600:	b	79c4 <__addtf3@@GCC_3.0+0x97c>
    7604:	orr	x0, x1, x3
    7608:	cbz	x0, 7c60 <__addtf3@@GCC_3.0+0xc18>
    760c:	lsr	x0, x1, #50
    7610:	eor	x0, x0, #0x1
    7614:	and	w0, w0, #0x1
    7618:	b	7afc <__addtf3@@GCC_3.0+0xab4>
    761c:	sub	w4, w0, #0x40
    7620:	lsr	x4, x2, x4
    7624:	mov	w5, #0x80                  	// #128
    7628:	sub	w5, w5, w0
    762c:	lsl	x2, x2, x5
    7630:	cmp	w0, #0x40
    7634:	csel	x2, x2, xzr, ne  // ne = any
    7638:	orr	x12, x2, x12
    763c:	cmp	x12, #0x0
    7640:	cset	x0, ne  // ne = any
    7644:	orr	x4, x4, x0
    7648:	mov	x0, #0x0                   	// #0
    764c:	b	7588 <__addtf3@@GCC_3.0+0x540>
    7650:	tbnz	w0, #31, 7698 <__addtf3@@GCC_3.0+0x650>
    7654:	add	x0, x5, #0x1
    7658:	ands	x4, x0, #0x7ffe
    765c:	b.ne	7924 <__addtf3@@GCC_3.0+0x8dc>  // b.any
    7660:	cbnz	x5, 783c <__addtf3@@GCC_3.0+0x7f4>
    7664:	orr	x0, x1, x3
    7668:	cbz	x0, 7804 <__addtf3@@GCC_3.0+0x7bc>
    766c:	orr	x0, x2, x12
    7670:	cbz	x0, 7cb0 <__addtf3@@GCC_3.0+0xc68>
    7674:	sub	x0, x3, x12
    7678:	cmp	x3, x0
    767c:	sbc	x5, x1, x2
    7680:	tbz	x5, #51, 7820 <__addtf3@@GCC_3.0+0x7d8>
    7684:	sub	x4, x12, x3
    7688:	cmp	x12, x4
    768c:	sbc	x1, x2, x1
    7690:	mov	x10, x14
    7694:	b	79c4 <__addtf3@@GCC_3.0+0x97c>
    7698:	cbnz	x5, 7744 <__addtf3@@GCC_3.0+0x6fc>
    769c:	orr	x4, x1, x3
    76a0:	cbz	x4, 76e4 <__addtf3@@GCC_3.0+0x69c>
    76a4:	cmn	w0, #0x1
    76a8:	b.eq	772c <__addtf3@@GCC_3.0+0x6e4>  // b.none
    76ac:	mvn	w0, w0
    76b0:	mov	x4, #0x7fff                	// #32767
    76b4:	cmp	x8, x4
    76b8:	b.ne	7758 <__addtf3@@GCC_3.0+0x710>  // b.any
    76bc:	orr	x3, x2, x12
    76c0:	cbz	x3, 7c84 <__addtf3@@GCC_3.0+0xc3c>
    76c4:	lsr	x0, x2, #50
    76c8:	eor	x0, x0, #0x1
    76cc:	and	w0, w0, #0x1
    76d0:	mov	x1, x2
    76d4:	mov	x3, x12
    76d8:	mov	x9, x8
    76dc:	mov	x10, x14
    76e0:	b	7afc <__addtf3@@GCC_3.0+0xab4>
    76e4:	mov	x0, #0x7fff                	// #32767
    76e8:	cmp	x8, x0
    76ec:	b.eq	7704 <__addtf3@@GCC_3.0+0x6bc>  // b.none
    76f0:	mov	x1, x2
    76f4:	mov	x4, x12
    76f8:	mov	x9, x8
    76fc:	mov	x10, x14
    7700:	b	79c0 <__addtf3@@GCC_3.0+0x978>
    7704:	orr	x3, x2, x12
    7708:	cbz	x3, 7c74 <__addtf3@@GCC_3.0+0xc2c>
    770c:	lsr	x0, x2, #50
    7710:	eor	x0, x0, #0x1
    7714:	and	w0, w0, #0x1
    7718:	mov	x1, x2
    771c:	mov	x3, x12
    7720:	mov	x9, x8
    7724:	mov	x10, x14
    7728:	b	7afc <__addtf3@@GCC_3.0+0xab4>
    772c:	sub	x4, x12, x3
    7730:	cmp	x12, x4
    7734:	sbc	x1, x2, x1
    7738:	mov	x9, x8
    773c:	mov	x10, x14
    7740:	b	7594 <__addtf3@@GCC_3.0+0x54c>
    7744:	neg	w0, w0
    7748:	orr	x1, x1, #0x8000000000000
    774c:	mov	x4, #0x7fff                	// #32767
    7750:	cmp	x8, x4
    7754:	b.eq	77a8 <__addtf3@@GCC_3.0+0x760>  // b.none
    7758:	cmp	w0, #0x74
    775c:	b.gt	7b6c <__addtf3@@GCC_3.0+0xb24>
    7760:	cmp	w0, #0x3f
    7764:	b.gt	77d0 <__addtf3@@GCC_3.0+0x788>
    7768:	mov	w5, #0x40                  	// #64
    776c:	sub	w5, w5, w0
    7770:	lsl	x4, x1, x5
    7774:	lsr	x6, x3, x0
    7778:	orr	x4, x4, x6
    777c:	lsl	x3, x3, x5
    7780:	cmp	x3, #0x0
    7784:	cset	x3, ne  // ne = any
    7788:	orr	x4, x4, x3
    778c:	lsr	x1, x1, x0
    7790:	sub	x4, x12, x4
    7794:	cmp	x12, x4
    7798:	sbc	x1, x2, x1
    779c:	mov	x9, x13
    77a0:	mov	x10, x14
    77a4:	b	7594 <__addtf3@@GCC_3.0+0x54c>
    77a8:	orr	x3, x2, x12
    77ac:	cbz	x3, 7c94 <__addtf3@@GCC_3.0+0xc4c>
    77b0:	lsr	x0, x2, #50
    77b4:	eor	x0, x0, #0x1
    77b8:	and	w0, w0, #0x1
    77bc:	mov	x1, x2
    77c0:	mov	x3, x12
    77c4:	mov	x9, x8
    77c8:	mov	x10, x14
    77cc:	b	7afc <__addtf3@@GCC_3.0+0xab4>
    77d0:	sub	w4, w0, #0x40
    77d4:	lsr	x4, x1, x4
    77d8:	mov	w5, #0x80                  	// #128
    77dc:	sub	w5, w5, w0
    77e0:	lsl	x1, x1, x5
    77e4:	cmp	w0, #0x40
    77e8:	csel	x0, x1, xzr, ne  // ne = any
    77ec:	orr	x3, x0, x3
    77f0:	cmp	x3, #0x0
    77f4:	cset	x0, ne  // ne = any
    77f8:	orr	x4, x4, x0
    77fc:	mov	x1, #0x0                   	// #0
    7800:	b	7790 <__addtf3@@GCC_3.0+0x748>
    7804:	orr	x4, x2, x12
    7808:	cbnz	x4, 7ca4 <__addtf3@@GCC_3.0+0xc5c>
    780c:	and	x0, x11, #0xc00000
    7810:	cmp	x0, #0x800, lsl #12
    7814:	cset	x10, eq  // eq = none
    7818:	mov	x1, x4
    781c:	b	79c4 <__addtf3@@GCC_3.0+0x97c>
    7820:	orr	x4, x0, x5
    7824:	cbnz	x4, 7cd0 <__addtf3@@GCC_3.0+0xc88>
    7828:	and	x0, x11, #0xc00000
    782c:	cmp	x0, #0x800, lsl #12
    7830:	cset	x10, eq  // eq = none
    7834:	mov	x1, x4
    7838:	b	79c4 <__addtf3@@GCC_3.0+0x97c>
    783c:	mov	x0, #0x7fff                	// #32767
    7840:	cmp	x5, x0
    7844:	b.eq	787c <__addtf3@@GCC_3.0+0x834>  // b.none
    7848:	mov	w0, #0x0                   	// #0
    784c:	mov	x5, #0x7fff                	// #32767
    7850:	cmp	x8, x5
    7854:	b.eq	78d0 <__addtf3@@GCC_3.0+0x888>  // b.none
    7858:	orr	x5, x1, x3
    785c:	cbnz	x5, 789c <__addtf3@@GCC_3.0+0x854>
    7860:	orr	x1, x2, x12
    7864:	cbnz	x1, 78fc <__addtf3@@GCC_3.0+0x8b4>
    7868:	mov	x10, x4
    786c:	mov	x1, #0x7ffffffffffff       	// #2251799813685247
    7870:	mov	x3, #0xfffffffffffffff8    	// #-8
    7874:	mov	w0, #0x1                   	// #1
    7878:	b	7c6c <__addtf3@@GCC_3.0+0xc24>
    787c:	orr	x0, x1, x3
    7880:	cbz	x0, 7b78 <__addtf3@@GCC_3.0+0xb30>
    7884:	lsr	x0, x1, #50
    7888:	eor	x0, x0, #0x1
    788c:	and	w0, w0, #0x1
    7890:	mov	x5, #0x7fff                	// #32767
    7894:	cmp	x8, x5
    7898:	b.eq	78d0 <__addtf3@@GCC_3.0+0x888>  // b.none
    789c:	orr	x12, x2, x12
    78a0:	mov	x9, #0x7fff                	// #32767
    78a4:	cbz	x12, 7afc <__addtf3@@GCC_3.0+0xab4>
    78a8:	lsr	x3, x1, #3
    78ac:	tbz	x1, #50, 7910 <__addtf3@@GCC_3.0+0x8c8>
    78b0:	lsr	x4, x2, #3
    78b4:	tbnz	x2, #50, 7910 <__addtf3@@GCC_3.0+0x8c8>
    78b8:	mov	x6, x7
    78bc:	bfi	x6, x2, #61, #3
    78c0:	mov	x3, x4
    78c4:	mov	x10, x14
    78c8:	b	7914 <__addtf3@@GCC_3.0+0x8cc>
    78cc:	mov	w0, #0x0                   	// #0
    78d0:	orr	x5, x2, x12
    78d4:	cbz	x5, 7858 <__addtf3@@GCC_3.0+0x810>
    78d8:	tst	x2, #0x4000000000000
    78dc:	csinc	w0, w0, wzr, ne  // ne = any
    78e0:	orr	x4, x1, x3
    78e4:	cbnz	x4, 789c <__addtf3@@GCC_3.0+0x854>
    78e8:	mov	x1, x2
    78ec:	mov	x3, x12
    78f0:	mov	x10, x14
    78f4:	mov	x9, #0x7fff                	// #32767
    78f8:	b	7afc <__addtf3@@GCC_3.0+0xab4>
    78fc:	mov	x1, x2
    7900:	mov	x3, x12
    7904:	mov	x10, x14
    7908:	mov	x9, #0x7fff                	// #32767
    790c:	b	7afc <__addtf3@@GCC_3.0+0xab4>
    7910:	bfi	x6, x1, #61, #3
    7914:	extr	x1, x3, x6, #61
    7918:	lsl	x3, x6, #3
    791c:	mov	x9, #0x7fff                	// #32767
    7920:	b	7afc <__addtf3@@GCC_3.0+0xab4>
    7924:	sub	x4, x3, x12
    7928:	cmp	x3, x4
    792c:	sbc	x5, x1, x2
    7930:	tbnz	x5, #51, 7950 <__addtf3@@GCC_3.0+0x908>
    7934:	orr	x1, x4, x5
    7938:	cbnz	x1, 759c <__addtf3@@GCC_3.0+0x554>
    793c:	and	x0, x11, #0xc00000
    7940:	cmp	x0, #0x800, lsl #12
    7944:	cset	x10, eq  // eq = none
    7948:	mov	x4, x1
    794c:	b	79c4 <__addtf3@@GCC_3.0+0x97c>
    7950:	sub	x4, x12, x3
    7954:	cmp	x12, x4
    7958:	sbc	x5, x2, x1
    795c:	mov	x10, x14
    7960:	b	759c <__addtf3@@GCC_3.0+0x554>
    7964:	clz	x1, x4
    7968:	add	w0, w1, #0x34
    796c:	cmp	w0, #0x3f
    7970:	b.le	75a8 <__addtf3@@GCC_3.0+0x560>
    7974:	sub	w1, w1, #0xc
    7978:	lsl	x1, x4, x1
    797c:	b	75bc <__addtf3@@GCC_3.0+0x574>
    7980:	sub	w9, w9, #0x3f
    7984:	lsr	x0, x1, x9
    7988:	mov	w2, #0x80                  	// #128
    798c:	sub	w2, w2, w6
    7990:	lsl	x1, x1, x2
    7994:	cmp	w6, #0x40
    7998:	csel	x2, x1, xzr, ne  // ne = any
    799c:	orr	x2, x5, x2
    79a0:	cmp	x2, #0x0
    79a4:	cset	x4, ne  // ne = any
    79a8:	orr	x4, x0, x4
    79ac:	mov	x1, #0x0                   	// #0
    79b0:	b	79c4 <__addtf3@@GCC_3.0+0x97c>
    79b4:	sub	x9, x9, x2
    79b8:	and	x1, x1, #0xfff7ffffffffffff
    79bc:	mov	x4, x5
    79c0:	cbnz	x9, 7af4 <__addtf3@@GCC_3.0+0xaac>
    79c4:	orr	x3, x4, x1
    79c8:	cbnz	x3, 7cb4 <__addtf3@@GCC_3.0+0xc6c>
    79cc:	mov	x1, x3
    79d0:	mov	x9, #0x0                   	// #0
    79d4:	mov	w0, #0x0                   	// #0
    79d8:	b	7a0c <__addtf3@@GCC_3.0+0x9c4>
    79dc:	mov	x3, x4
    79e0:	mov	w4, #0x1                   	// #1
    79e4:	mov	x9, #0x0                   	// #0
    79e8:	mov	w0, #0x0                   	// #0
    79ec:	b	7b08 <__addtf3@@GCC_3.0+0xac0>
    79f0:	and	x2, x3, #0xf
    79f4:	cmp	x2, #0x4
    79f8:	b.eq	7a04 <__addtf3@@GCC_3.0+0x9bc>  // b.none
    79fc:	adds	x3, x3, #0x4
    7a00:	cinc	x1, x1, cs  // cs = hs, nlast
    7a04:	cbz	w4, 7a0c <__addtf3@@GCC_3.0+0x9c4>
    7a08:	orr	w0, w0, #0x8
    7a0c:	tbz	x1, #51, 7ab8 <__addtf3@@GCC_3.0+0xa70>
    7a10:	add	x9, x9, #0x1
    7a14:	mov	x2, #0x7fff                	// #32767
    7a18:	cmp	x9, x2
    7a1c:	b.eq	7a84 <__addtf3@@GCC_3.0+0xa3c>  // b.none
    7a20:	and	x2, x1, #0xfff7ffffffffffff
    7a24:	extr	x4, x1, x3, #3
    7a28:	lsr	x1, x2, #3
    7a2c:	mov	x3, #0x0                   	// #0
    7a30:	mov	x2, x4
    7a34:	bfxil	x3, x1, #0, #48
    7a38:	bfi	x3, x9, #48, #15
    7a3c:	bfi	x3, x10, #63, #1
    7a40:	stp	x2, x3, [sp, #16]
    7a44:	cbnz	w0, 7aec <__addtf3@@GCC_3.0+0xaa4>
    7a48:	ldr	q0, [sp, #16]
    7a4c:	ldp	x29, x30, [sp], #32
    7a50:	ret
    7a54:	cbnz	x10, 7a04 <__addtf3@@GCC_3.0+0x9bc>
    7a58:	adds	x3, x3, #0x8
    7a5c:	cinc	x1, x1, cs  // cs = hs, nlast
    7a60:	b	7a04 <__addtf3@@GCC_3.0+0x9bc>
    7a64:	cbz	x10, 7a04 <__addtf3@@GCC_3.0+0x9bc>
    7a68:	adds	x3, x3, #0x8
    7a6c:	cinc	x1, x1, cs  // cs = hs, nlast
    7a70:	b	7a04 <__addtf3@@GCC_3.0+0x9bc>
    7a74:	mov	x3, x4
    7a78:	mov	x9, #0x0                   	// #0
    7a7c:	mov	w0, #0x0                   	// #0
    7a80:	b	7a08 <__addtf3@@GCC_3.0+0x9c0>
    7a84:	ands	x3, x11, #0xc00000
    7a88:	b.eq	7aac <__addtf3@@GCC_3.0+0xa64>  // b.none
    7a8c:	cmp	x3, #0x400, lsl #12
    7a90:	ccmp	x10, #0x0, #0x0, eq  // eq = none
    7a94:	b.eq	7ae4 <__addtf3@@GCC_3.0+0xa9c>  // b.none
    7a98:	cmp	x3, #0x800, lsl #12
    7a9c:	ccmp	x10, #0x0, #0x4, eq  // eq = none
    7aa0:	csetm	x3, eq  // eq = none
    7aa4:	mov	x1, #0x7ffe                	// #32766
    7aa8:	csel	x9, x9, x1, ne  // ne = any
    7aac:	mov	w1, #0x14                  	// #20
    7ab0:	orr	w0, w0, w1
    7ab4:	mov	x1, x3
    7ab8:	extr	x4, x1, x3, #3
    7abc:	lsr	x1, x1, #3
    7ac0:	mov	x2, #0x7fff                	// #32767
    7ac4:	cmp	x9, x2
    7ac8:	b.ne	7a2c <__addtf3@@GCC_3.0+0x9e4>  // b.any
    7acc:	orr	x2, x4, x1
    7ad0:	orr	x1, x1, #0x800000000000
    7ad4:	cbnz	x2, 7a2c <__addtf3@@GCC_3.0+0x9e4>
    7ad8:	mov	x4, x2
    7adc:	mov	x1, x2
    7ae0:	b	7a2c <__addtf3@@GCC_3.0+0x9e4>
    7ae4:	mov	x3, #0x0                   	// #0
    7ae8:	b	7aac <__addtf3@@GCC_3.0+0xa64>
    7aec:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    7af0:	b	7a48 <__addtf3@@GCC_3.0+0xa00>
    7af4:	mov	x3, x4
    7af8:	mov	w0, #0x0                   	// #0
    7afc:	mov	w4, #0x0                   	// #0
    7b00:	tst	x3, #0x7
    7b04:	b.eq	7a0c <__addtf3@@GCC_3.0+0x9c4>  // b.none
    7b08:	orr	w0, w0, #0x10
    7b0c:	and	x2, x11, #0xc00000
    7b10:	cmp	x2, #0x400, lsl #12
    7b14:	b.eq	7a54 <__addtf3@@GCC_3.0+0xa0c>  // b.none
    7b18:	cmp	x2, #0x800, lsl #12
    7b1c:	b.eq	7a64 <__addtf3@@GCC_3.0+0xa1c>  // b.none
    7b20:	cbz	x2, 79f0 <__addtf3@@GCC_3.0+0x9a8>
    7b24:	cbnz	w4, 7a08 <__addtf3@@GCC_3.0+0x9c0>
    7b28:	b	7a0c <__addtf3@@GCC_3.0+0x9c4>
    7b2c:	mov	x1, x2
    7b30:	mov	x3, x12
    7b34:	mov	x9, #0x7fff                	// #32767
    7b38:	b	7afc <__addtf3@@GCC_3.0+0xab4>
    7b3c:	mov	x1, x2
    7b40:	mov	x4, x12
    7b44:	b	79c4 <__addtf3@@GCC_3.0+0x97c>
    7b48:	mov	x0, #0x0                   	// #0
    7b4c:	mov	x4, #0x1                   	// #1
    7b50:	b	71a8 <__addtf3@@GCC_3.0+0x160>
    7b54:	mov	x1, #0x0                   	// #0
    7b58:	mov	x4, #0x1                   	// #1
    7b5c:	b	7354 <__addtf3@@GCC_3.0+0x30c>
    7b60:	mov	x0, #0x0                   	// #0
    7b64:	mov	x4, #0x1                   	// #1
    7b68:	b	7588 <__addtf3@@GCC_3.0+0x540>
    7b6c:	mov	x1, #0x0                   	// #0
    7b70:	mov	x4, #0x1                   	// #1
    7b74:	b	7790 <__addtf3@@GCC_3.0+0x748>
    7b78:	mov	x0, #0x7fff                	// #32767
    7b7c:	cmp	x8, x0
    7b80:	b.eq	78cc <__addtf3@@GCC_3.0+0x884>  // b.none
    7b84:	mov	w0, #0x0                   	// #0
    7b88:	b	7860 <__addtf3@@GCC_3.0+0x818>
    7b8c:	mov	x1, x0
    7b90:	mov	x3, x0
    7b94:	mov	w0, #0x0                   	// #0
    7b98:	b	7c6c <__addtf3@@GCC_3.0+0xc24>
    7b9c:	mov	x1, x0
    7ba0:	mov	x3, x0
    7ba4:	mov	w0, #0x0                   	// #0
    7ba8:	b	7c6c <__addtf3@@GCC_3.0+0xc24>
    7bac:	mov	x1, x0
    7bb0:	mov	x3, x0
    7bb4:	mov	w0, #0x0                   	// #0
    7bb8:	b	7c6c <__addtf3@@GCC_3.0+0xc24>
    7bbc:	mov	x1, x3
    7bc0:	mov	w0, #0x0                   	// #0
    7bc4:	b	7c6c <__addtf3@@GCC_3.0+0xc24>
    7bc8:	mov	x1, x3
    7bcc:	mov	w0, #0x0                   	// #0
    7bd0:	b	7c6c <__addtf3@@GCC_3.0+0xc24>
    7bd4:	mov	x1, x3
    7bd8:	mov	w0, #0x0                   	// #0
    7bdc:	b	7c6c <__addtf3@@GCC_3.0+0xc24>
    7be0:	mov	x1, x3
    7be4:	mov	w0, #0x14                  	// #20
    7be8:	b	7c6c <__addtf3@@GCC_3.0+0xc24>
    7bec:	mov	x1, #0x0                   	// #0
    7bf0:	mov	x3, #0x0                   	// #0
    7bf4:	mov	x10, #0x0                   	// #0
    7bf8:	mov	w0, #0x14                  	// #20
    7bfc:	b	7c6c <__addtf3@@GCC_3.0+0xc24>
    7c00:	mov	x1, #0x0                   	// #0
    7c04:	mov	x3, #0x0                   	// #0
    7c08:	mov	w0, #0x14                  	// #20
    7c0c:	b	7c6c <__addtf3@@GCC_3.0+0xc24>
    7c10:	mov	x1, x3
    7c14:	mov	w0, #0x14                  	// #20
    7c18:	b	7c6c <__addtf3@@GCC_3.0+0xc24>
    7c1c:	mov	x1, #0x0                   	// #0
    7c20:	mov	x3, #0x0                   	// #0
    7c24:	mov	x10, #0x0                   	// #0
    7c28:	mov	w0, #0x14                  	// #20
    7c2c:	b	7c6c <__addtf3@@GCC_3.0+0xc24>
    7c30:	mov	x1, #0x0                   	// #0
    7c34:	mov	x3, #0x0                   	// #0
    7c38:	mov	w0, #0x14                  	// #20
    7c3c:	b	7c6c <__addtf3@@GCC_3.0+0xc24>
    7c40:	mov	x1, x0
    7c44:	mov	x3, x0
    7c48:	mov	w0, #0x0                   	// #0
    7c4c:	b	7c6c <__addtf3@@GCC_3.0+0xc24>
    7c50:	mov	x1, x0
    7c54:	mov	x3, x0
    7c58:	mov	w0, #0x0                   	// #0
    7c5c:	b	7c6c <__addtf3@@GCC_3.0+0xc24>
    7c60:	mov	x1, x0
    7c64:	mov	x3, x0
    7c68:	mov	w0, #0x0                   	// #0
    7c6c:	mov	x9, #0x7fff                	// #32767
    7c70:	b	7a0c <__addtf3@@GCC_3.0+0x9c4>
    7c74:	mov	x1, x3
    7c78:	mov	x10, x14
    7c7c:	mov	w0, #0x0                   	// #0
    7c80:	b	7c6c <__addtf3@@GCC_3.0+0xc24>
    7c84:	mov	x1, x3
    7c88:	mov	x10, x14
    7c8c:	mov	w0, #0x0                   	// #0
    7c90:	b	7c6c <__addtf3@@GCC_3.0+0xc24>
    7c94:	mov	x1, x3
    7c98:	mov	x10, x14
    7c9c:	mov	w0, #0x0                   	// #0
    7ca0:	b	7c6c <__addtf3@@GCC_3.0+0xc24>
    7ca4:	mov	x1, x2
    7ca8:	mov	x3, x12
    7cac:	mov	x10, x14
    7cb0:	mov	x4, x3
    7cb4:	tst	x4, #0x7
    7cb8:	b.ne	79dc <__addtf3@@GCC_3.0+0x994>  // b.any
    7cbc:	tbnz	w11, #11, 7a74 <__addtf3@@GCC_3.0+0xa2c>
    7cc0:	mov	x3, x4
    7cc4:	mov	x9, #0x0                   	// #0
    7cc8:	mov	w0, #0x0                   	// #0
    7ccc:	b	7a0c <__addtf3@@GCC_3.0+0x9c4>
    7cd0:	mov	x1, x5
    7cd4:	mov	x3, x0
    7cd8:	b	7cb0 <__addtf3@@GCC_3.0+0xc68>
    7cdc:	mov	x0, #0x7fff                	// #32767
    7ce0:	cmp	x8, x0
    7ce4:	b.eq	7468 <__addtf3@@GCC_3.0+0x420>  // b.none
    7ce8:	mov	x1, x2
    7cec:	mov	x3, x12
    7cf0:	mov	w0, #0x0                   	// #0
    7cf4:	b	7afc <__addtf3@@GCC_3.0+0xab4>

0000000000007cf8 <__divtf3@@GCC_3.0>:
    7cf8:	stp	x29, x30, [sp, #-32]!
    7cfc:	mov	x29, sp
    7d00:	str	q0, [sp, #16]
    7d04:	ldr	x2, [sp, #16]
    7d08:	ldr	x0, [sp, #24]
    7d0c:	str	q1, [sp, #16]
    7d10:	ldr	x7, [sp, #16]
    7d14:	ldr	x1, [sp, #24]
    7d18:	mrs	x12, fpcr
    7d1c:	ubfx	x3, x0, #0, #48
    7d20:	ubfx	x6, x0, #48, #15
    7d24:	lsr	x0, x0, #63
    7d28:	and	w9, w0, #0xff
    7d2c:	cbz	w6, 7de0 <__divtf3@@GCC_3.0+0xe8>
    7d30:	mov	x10, x3
    7d34:	mov	w5, #0x7fff                	// #32767
    7d38:	cmp	w6, w5
    7d3c:	b.eq	7e48 <__divtf3@@GCC_3.0+0x150>  // b.none
    7d40:	extr	x3, x3, x2, #61
    7d44:	orr	x10, x3, #0x8000000000000
    7d48:	lsl	x13, x2, #3
    7d4c:	and	x6, x6, #0xffff
    7d50:	sub	x6, x6, #0x3, lsl #12
    7d54:	sub	x6, x6, #0xfff
    7d58:	mov	x14, #0x0                   	// #0
    7d5c:	mov	w3, #0x0                   	// #0
    7d60:	ubfx	x8, x1, #0, #48
    7d64:	mov	x4, x8
    7d68:	ubfx	x11, x1, #48, #15
    7d6c:	lsr	x2, x1, #63
    7d70:	and	w1, w2, #0xff
    7d74:	cbz	w11, 7e90 <__divtf3@@GCC_3.0+0x198>
    7d78:	mov	w15, #0x7fff                	// #32767
    7d7c:	cmp	w11, w15
    7d80:	b.eq	7ef0 <__divtf3@@GCC_3.0+0x1f8>  // b.none
    7d84:	extr	x4, x8, x7, #61
    7d88:	orr	x4, x4, #0x8000000000000
    7d8c:	lsl	x5, x7, #3
    7d90:	and	x11, x11, #0xffff
    7d94:	sub	x11, x11, #0x3, lsl #12
    7d98:	sub	x11, x11, #0xfff
    7d9c:	eor	w9, w9, w1
    7da0:	and	x9, x9, #0xff
    7da4:	sub	x6, x6, x11
    7da8:	lsl	x1, x14, #2
    7dac:	mov	x7, #0x0                   	// #0
    7db0:	cmp	x1, #0x7
    7db4:	b.le	7f48 <__divtf3@@GCC_3.0+0x250>
    7db8:	cmp	x1, #0xe
    7dbc:	b.gt	82b4 <__divtf3@@GCC_3.0+0x5bc>
    7dc0:	cmp	x1, #0xb
    7dc4:	b.gt	82d8 <__divtf3@@GCC_3.0+0x5e0>
    7dc8:	cmp	x1, #0x9
    7dcc:	b.gt	8014 <__divtf3@@GCC_3.0+0x31c>
    7dd0:	mov	x4, #0x0                   	// #0
    7dd4:	mov	x5, #0x0                   	// #0
    7dd8:	mov	x6, #0x7fff                	// #32767
    7ddc:	b	8544 <__divtf3@@GCC_3.0+0x84c>
    7de0:	orr	x13, x3, x2
    7de4:	cbz	x13, 7e68 <__divtf3@@GCC_3.0+0x170>
    7de8:	cbz	x3, 7e24 <__divtf3@@GCC_3.0+0x12c>
    7dec:	clz	x6, x3
    7df0:	sub	x10, x6, #0xf
    7df4:	add	w13, w10, #0x3
    7df8:	lsl	x3, x3, x13
    7dfc:	mov	w4, #0x3d                  	// #61
    7e00:	sub	w10, w4, w10
    7e04:	lsr	x10, x2, x10
    7e08:	orr	x10, x10, x3
    7e0c:	lsl	x13, x2, x13
    7e10:	mov	x2, #0xffffffffffffc011    	// #-16367
    7e14:	sub	x6, x2, x6
    7e18:	mov	x14, #0x0                   	// #0
    7e1c:	mov	w3, #0x0                   	// #0
    7e20:	b	7d60 <__divtf3@@GCC_3.0+0x68>
    7e24:	clz	x10, x2
    7e28:	add	x6, x10, #0x40
    7e2c:	add	x10, x10, #0x31
    7e30:	cmp	x10, #0x3c
    7e34:	b.le	7df4 <__divtf3@@GCC_3.0+0xfc>
    7e38:	sub	w10, w10, #0x3d
    7e3c:	mov	x13, x3
    7e40:	lsl	x10, x2, x10
    7e44:	b	7e10 <__divtf3@@GCC_3.0+0x118>
    7e48:	orr	x13, x3, x2
    7e4c:	cbz	x13, 7e7c <__divtf3@@GCC_3.0+0x184>
    7e50:	lsr	x3, x3, #47
    7e54:	eor	w3, w3, #0x1
    7e58:	mov	x13, x2
    7e5c:	mov	x6, #0x7fff                	// #32767
    7e60:	mov	x14, #0x3                   	// #3
    7e64:	b	7d60 <__divtf3@@GCC_3.0+0x68>
    7e68:	mov	x10, x13
    7e6c:	mov	x6, #0x0                   	// #0
    7e70:	mov	x14, #0x1                   	// #1
    7e74:	mov	w3, #0x0                   	// #0
    7e78:	b	7d60 <__divtf3@@GCC_3.0+0x68>
    7e7c:	mov	x10, x13
    7e80:	mov	x6, #0x7fff                	// #32767
    7e84:	mov	x14, #0x2                   	// #2
    7e88:	mov	w3, #0x0                   	// #0
    7e8c:	b	7d60 <__divtf3@@GCC_3.0+0x68>
    7e90:	orr	x5, x8, x7
    7e94:	cbz	x5, 7f10 <__divtf3@@GCC_3.0+0x218>
    7e98:	cbz	x8, 7ecc <__divtf3@@GCC_3.0+0x1d4>
    7e9c:	clz	x16, x8
    7ea0:	sub	x4, x16, #0xf
    7ea4:	add	w5, w4, #0x3
    7ea8:	lsl	x8, x8, x5
    7eac:	mov	w15, #0x3d                  	// #61
    7eb0:	sub	w4, w15, w4
    7eb4:	lsr	x4, x7, x4
    7eb8:	orr	x4, x4, x8
    7ebc:	lsl	x5, x7, x5
    7ec0:	mov	x11, #0xffffffffffffc011    	// #-16367
    7ec4:	sub	x11, x11, x16
    7ec8:	b	7d9c <__divtf3@@GCC_3.0+0xa4>
    7ecc:	clz	x4, x7
    7ed0:	add	x16, x4, #0x40
    7ed4:	add	x4, x4, #0x31
    7ed8:	cmp	x4, #0x3c
    7edc:	b.le	7ea4 <__divtf3@@GCC_3.0+0x1ac>
    7ee0:	sub	w4, w4, #0x3d
    7ee4:	mov	x5, x8
    7ee8:	lsl	x4, x7, x4
    7eec:	b	7ec0 <__divtf3@@GCC_3.0+0x1c8>
    7ef0:	orr	x5, x8, x7
    7ef4:	cbz	x5, 7f38 <__divtf3@@GCC_3.0+0x240>
    7ef8:	mov	x5, x7
    7efc:	mov	x11, #0x7fff                	// #32767
    7f00:	mov	x7, #0x3                   	// #3
    7f04:	tst	x8, #0x800000000000
    7f08:	csinc	w3, w3, wzr, ne  // ne = any
    7f0c:	b	7f1c <__divtf3@@GCC_3.0+0x224>
    7f10:	mov	x4, x5
    7f14:	mov	x11, #0x0                   	// #0
    7f18:	mov	x7, #0x1                   	// #1
    7f1c:	eor	w9, w9, w1
    7f20:	and	x9, x9, #0xff
    7f24:	sub	x6, x6, x11
    7f28:	orr	x1, x7, x14, lsl #2
    7f2c:	cmp	x1, #0x7
    7f30:	b.ne	7db0 <__divtf3@@GCC_3.0+0xb8>  // b.any
    7f34:	b	7f90 <__divtf3@@GCC_3.0+0x298>
    7f38:	mov	x4, x5
    7f3c:	mov	x11, #0x7fff                	// #32767
    7f40:	mov	x7, #0x2                   	// #2
    7f44:	b	7f1c <__divtf3@@GCC_3.0+0x224>
    7f48:	cmp	x1, #0x1
    7f4c:	b.eq	82d0 <__divtf3@@GCC_3.0+0x5d8>  // b.none
    7f50:	b.le	8030 <__divtf3@@GCC_3.0+0x338>
    7f54:	cmp	x1, #0x4
    7f58:	b.eq	8528 <__divtf3@@GCC_3.0+0x830>  // b.none
    7f5c:	b.le	7f88 <__divtf3@@GCC_3.0+0x290>
    7f60:	cmp	x1, #0x5
    7f64:	b.ne	8004 <__divtf3@@GCC_3.0+0x30c>  // b.any
    7f68:	mov	x4, #0xffffffffffff        	// #281474976710655
    7f6c:	mov	x5, #0xffffffffffffffff    	// #-1
    7f70:	mov	x2, #0x0                   	// #0
    7f74:	mov	w3, #0x1                   	// #1
    7f78:	orr	x4, x4, #0x800000000000
    7f7c:	mov	x9, x2
    7f80:	mov	x6, #0x7fff                	// #32767
    7f84:	b	8544 <__divtf3@@GCC_3.0+0x84c>
    7f88:	cmp	x1, #0x2
    7f8c:	b.eq	8538 <__divtf3@@GCC_3.0+0x840>  // b.none
    7f90:	cmp	x7, #0x1
    7f94:	b.eq	856c <__divtf3@@GCC_3.0+0x874>  // b.none
    7f98:	b.gt	82ec <__divtf3@@GCC_3.0+0x5f4>
    7f9c:	mov	x9, x2
    7fa0:	cbnz	x7, 8544 <__divtf3@@GCC_3.0+0x84c>
    7fa4:	add	x0, x6, #0x3, lsl #12
    7fa8:	add	x0, x0, #0xfff
    7fac:	cmp	x0, #0x0
    7fb0:	b.le	83b8 <__divtf3@@GCC_3.0+0x6c0>
    7fb4:	tst	x5, #0x7
    7fb8:	b.eq	7fd8 <__divtf3@@GCC_3.0+0x2e0>  // b.none
    7fbc:	orr	w3, w3, #0x10
    7fc0:	and	x1, x12, #0xc00000
    7fc4:	cmp	x1, #0x400, lsl #12
    7fc8:	b.eq	8314 <__divtf3@@GCC_3.0+0x61c>  // b.none
    7fcc:	cmp	x1, #0x800, lsl #12
    7fd0:	b.eq	8324 <__divtf3@@GCC_3.0+0x62c>  // b.none
    7fd4:	cbz	x1, 82fc <__divtf3@@GCC_3.0+0x604>
    7fd8:	tbz	x4, #52, 7fe4 <__divtf3@@GCC_3.0+0x2ec>
    7fdc:	and	x4, x4, #0xffefffffffffffff
    7fe0:	add	x0, x6, #0x4, lsl #12
    7fe4:	mov	x1, #0x7ffe                	// #32766
    7fe8:	cmp	x0, x1
    7fec:	b.gt	8334 <__divtf3@@GCC_3.0+0x63c>
    7ff0:	extr	x5, x4, x5, #3
    7ff4:	lsr	x4, x4, #3
    7ff8:	mov	x9, x2
    7ffc:	mov	x6, x0
    8000:	b	8544 <__divtf3@@GCC_3.0+0x84c>
    8004:	mov	x4, #0x0                   	// #0
    8008:	mov	x5, #0x0                   	// #0
    800c:	mov	x6, #0x0                   	// #0
    8010:	b	8544 <__divtf3@@GCC_3.0+0x84c>
    8014:	cmp	x1, #0xa
    8018:	b.ne	7f90 <__divtf3@@GCC_3.0+0x298>  // b.any
    801c:	mov	x4, #0xffffffffffff        	// #281474976710655
    8020:	mov	x5, #0xffffffffffffffff    	// #-1
    8024:	mov	x2, #0x0                   	// #0
    8028:	mov	w3, #0x1                   	// #1
    802c:	b	7f78 <__divtf3@@GCC_3.0+0x280>
    8030:	cmp	x10, x4
    8034:	b.hi	8040 <__divtf3@@GCC_3.0+0x348>  // b.pmore
    8038:	ccmp	x13, x5, #0x0, eq  // eq = none
    803c:	b.cc	8264 <__divtf3@@GCC_3.0+0x56c>  // b.lo, b.ul, b.last
    8040:	lsr	x2, x10, #1
    8044:	extr	x0, x10, x13, #1
    8048:	lsl	x13, x13, #63
    804c:	extr	x7, x4, x5, #52
    8050:	lsl	x8, x5, #12
    8054:	ubfx	x10, x4, #20, #32
    8058:	and	x11, x7, #0xffffffff
    805c:	udiv	x4, x2, x10
    8060:	mul	x5, x11, x4
    8064:	msub	x2, x4, x10, x2
    8068:	extr	x1, x2, x0, #32
    806c:	cmp	x5, x1
    8070:	b.ls	8088 <__divtf3@@GCC_3.0+0x390>  // b.plast
    8074:	add	x1, x1, x7
    8078:	cmp	x5, x1
    807c:	ccmp	x7, x1, #0x2, hi  // hi = pmore
    8080:	b.ls	8278 <__divtf3@@GCC_3.0+0x580>  // b.plast
    8084:	sub	x4, x4, #0x1
    8088:	sub	x1, x1, x5
    808c:	udiv	x15, x1, x10
    8090:	mul	x2, x11, x15
    8094:	msub	x1, x15, x10, x1
    8098:	bfi	x0, x1, #32, #32
    809c:	cmp	x2, x0
    80a0:	b.ls	80b8 <__divtf3@@GCC_3.0+0x3c0>  // b.plast
    80a4:	add	x0, x0, x7
    80a8:	cmp	x2, x0
    80ac:	ccmp	x7, x0, #0x2, hi  // hi = pmore
    80b0:	b.ls	8284 <__divtf3@@GCC_3.0+0x58c>  // b.plast
    80b4:	sub	x15, x15, #0x1
    80b8:	sub	x0, x0, x2
    80bc:	orr	x15, x15, x4, lsl #32
    80c0:	lsr	x1, x15, #32
    80c4:	lsr	x14, x8, #32
    80c8:	and	x2, x15, #0xffffffff
    80cc:	and	x16, x8, #0xffffffff
    80d0:	mul	x4, x2, x16
    80d4:	mul	x17, x1, x16
    80d8:	mul	x1, x1, x14
    80dc:	madd	x2, x14, x2, x17
    80e0:	add	x2, x2, x4, lsr #32
    80e4:	mov	x5, #0x100000000           	// #4294967296
    80e8:	add	x5, x1, x5
    80ec:	cmp	x17, x2
    80f0:	csel	x1, x5, x1, hi  // hi = pmore
    80f4:	add	x1, x1, x2, lsr #32
    80f8:	and	x4, x4, #0xffffffff
    80fc:	add	x2, x4, x2, lsl #32
    8100:	cmp	x0, x1
    8104:	b.cc	8114 <__divtf3@@GCC_3.0+0x41c>  // b.lo, b.ul, b.last
    8108:	mov	x4, x15
    810c:	ccmp	x13, x2, #0x2, eq  // eq = none
    8110:	b.cs	814c <__divtf3@@GCC_3.0+0x454>  // b.hs, b.nlast
    8114:	sub	x4, x15, #0x1
    8118:	adds	x13, x13, x8
    811c:	adc	x0, x0, x7
    8120:	cmp	x7, x0
    8124:	b.cc	8130 <__divtf3@@GCC_3.0+0x438>  // b.lo, b.ul, b.last
    8128:	ccmp	x8, x13, #0x2, eq  // eq = none
    812c:	b.hi	814c <__divtf3@@GCC_3.0+0x454>  // b.pmore
    8130:	cmp	x1, x0
    8134:	b.hi	8140 <__divtf3@@GCC_3.0+0x448>  // b.pmore
    8138:	ccmp	x2, x13, #0x0, eq  // eq = none
    813c:	b.ls	814c <__divtf3@@GCC_3.0+0x454>  // b.plast
    8140:	sub	x4, x15, #0x2
    8144:	adds	x13, x13, x8
    8148:	adc	x0, x0, x7
    814c:	sub	x2, x13, x2
    8150:	cmp	x13, x2
    8154:	sbc	x0, x0, x1
    8158:	mov	x5, #0xffffffffffffffff    	// #-1
    815c:	cmp	x7, x0
    8160:	b.eq	825c <__divtf3@@GCC_3.0+0x564>  // b.none
    8164:	udiv	x1, x0, x10
    8168:	mul	x5, x11, x1
    816c:	msub	x0, x1, x10, x0
    8170:	extr	x0, x0, x2, #32
    8174:	cmp	x5, x0
    8178:	b.ls	8190 <__divtf3@@GCC_3.0+0x498>  // b.plast
    817c:	add	x0, x0, x7
    8180:	cmp	x5, x0
    8184:	ccmp	x7, x0, #0x2, hi  // hi = pmore
    8188:	b.ls	8290 <__divtf3@@GCC_3.0+0x598>  // b.plast
    818c:	sub	x1, x1, #0x1
    8190:	sub	x0, x0, x5
    8194:	udiv	x5, x0, x10
    8198:	mul	x11, x11, x5
    819c:	msub	x0, x5, x10, x0
    81a0:	bfi	x2, x0, #32, #32
    81a4:	mov	x0, x2
    81a8:	cmp	x11, x2
    81ac:	b.ls	81c4 <__divtf3@@GCC_3.0+0x4cc>  // b.plast
    81b0:	add	x0, x2, x7
    81b4:	cmp	x11, x0
    81b8:	ccmp	x7, x0, #0x2, hi  // hi = pmore
    81bc:	b.ls	829c <__divtf3@@GCC_3.0+0x5a4>  // b.plast
    81c0:	sub	x5, x5, #0x1
    81c4:	sub	x0, x0, x11
    81c8:	orr	x2, x5, x1, lsl #32
    81cc:	lsr	x1, x2, #32
    81d0:	and	x10, x2, #0xffffffff
    81d4:	mul	x5, x16, x10
    81d8:	mul	x16, x1, x16
    81dc:	mul	x1, x14, x1
    81e0:	madd	x14, x14, x10, x16
    81e4:	add	x14, x14, x5, lsr #32
    81e8:	mov	x10, #0x100000000           	// #4294967296
    81ec:	add	x10, x1, x10
    81f0:	cmp	x16, x14
    81f4:	csel	x1, x10, x1, hi  // hi = pmore
    81f8:	add	x1, x1, x14, lsr #32
    81fc:	and	x5, x5, #0xffffffff
    8200:	add	x14, x5, x14, lsl #32
    8204:	cmp	x0, x1
    8208:	b.cc	8218 <__divtf3@@GCC_3.0+0x520>  // b.lo, b.ul, b.last
    820c:	cmp	x14, #0x0
    8210:	ccmp	x0, x1, #0x0, ne  // ne = any
    8214:	b.ne	82a8 <__divtf3@@GCC_3.0+0x5b0>  // b.any
    8218:	sub	x5, x2, #0x1
    821c:	adds	x0, x0, x7
    8220:	b.cs	824c <__divtf3@@GCC_3.0+0x554>  // b.hs, b.nlast
    8224:	cmp	x0, x1
    8228:	b.cc	8234 <__divtf3@@GCC_3.0+0x53c>  // b.lo, b.ul, b.last
    822c:	ccmp	x8, x14, #0x2, eq  // eq = none
    8230:	b.cs	824c <__divtf3@@GCC_3.0+0x554>  // b.hs, b.nlast
    8234:	sub	x5, x2, #0x2
    8238:	lsl	x2, x8, #1
    823c:	cmp	x8, x2
    8240:	cinc	x7, x7, hi  // hi = pmore
    8244:	add	x0, x0, x7
    8248:	mov	x8, x2
    824c:	cmp	x0, x1
    8250:	orr	x0, x5, #0x1
    8254:	ccmp	x8, x14, #0x0, eq  // eq = none
    8258:	csel	x5, x0, x5, ne  // ne = any
    825c:	mov	x2, x9
    8260:	b	7fa4 <__divtf3@@GCC_3.0+0x2ac>
    8264:	sub	x6, x6, #0x1
    8268:	mov	x0, x13
    826c:	mov	x2, x10
    8270:	mov	x13, #0x0                   	// #0
    8274:	b	804c <__divtf3@@GCC_3.0+0x354>
    8278:	sub	x4, x4, #0x2
    827c:	add	x1, x1, x7
    8280:	b	8088 <__divtf3@@GCC_3.0+0x390>
    8284:	sub	x15, x15, #0x2
    8288:	add	x0, x0, x7
    828c:	b	80b8 <__divtf3@@GCC_3.0+0x3c0>
    8290:	sub	x1, x1, #0x2
    8294:	add	x0, x0, x7
    8298:	b	8190 <__divtf3@@GCC_3.0+0x498>
    829c:	sub	x5, x5, #0x2
    82a0:	add	x0, x0, x7
    82a4:	b	81c4 <__divtf3@@GCC_3.0+0x4cc>
    82a8:	mov	x5, x2
    82ac:	mov	x8, #0x0                   	// #0
    82b0:	b	824c <__divtf3@@GCC_3.0+0x554>
    82b4:	tbz	x10, #47, 858c <__divtf3@@GCC_3.0+0x894>
    82b8:	ands	x1, x4, #0x800000000000
    82bc:	csel	x4, x10, x4, ne  // ne = any
    82c0:	cmp	x1, #0x0
    82c4:	csel	x5, x13, x5, ne  // ne = any
    82c8:	csel	x2, x0, x2, ne  // ne = any
    82cc:	b	7f78 <__divtf3@@GCC_3.0+0x280>
    82d0:	orr	w3, w3, #0x2
    82d4:	b	7dd0 <__divtf3@@GCC_3.0+0xd8>
    82d8:	mov	x4, x10
    82dc:	mov	x5, x13
    82e0:	mov	x2, x0
    82e4:	mov	x7, x14
    82e8:	b	7f90 <__divtf3@@GCC_3.0+0x298>
    82ec:	cmp	x7, #0x2
    82f0:	b.ne	7f78 <__divtf3@@GCC_3.0+0x280>  // b.any
    82f4:	mov	x9, x2
    82f8:	b	7dd0 <__divtf3@@GCC_3.0+0xd8>
    82fc:	and	x1, x5, #0xf
    8300:	cmp	x1, #0x4
    8304:	b.eq	7fd8 <__divtf3@@GCC_3.0+0x2e0>  // b.none
    8308:	adds	x5, x5, #0x4
    830c:	cinc	x4, x4, cs  // cs = hs, nlast
    8310:	b	7fd8 <__divtf3@@GCC_3.0+0x2e0>
    8314:	cbnz	x2, 7fd8 <__divtf3@@GCC_3.0+0x2e0>
    8318:	adds	x5, x5, #0x8
    831c:	cinc	x4, x4, cs  // cs = hs, nlast
    8320:	b	7fd8 <__divtf3@@GCC_3.0+0x2e0>
    8324:	cbz	x2, 7fd8 <__divtf3@@GCC_3.0+0x2e0>
    8328:	adds	x5, x5, #0x8
    832c:	cinc	x4, x4, cs  // cs = hs, nlast
    8330:	b	7fd8 <__divtf3@@GCC_3.0+0x2e0>
    8334:	and	x5, x12, #0xc00000
    8338:	cmp	x5, #0x400, lsl #12
    833c:	b.eq	8388 <__divtf3@@GCC_3.0+0x690>  // b.none
    8340:	cmp	x5, #0x800, lsl #12
    8344:	b.eq	83a0 <__divtf3@@GCC_3.0+0x6a8>  // b.none
    8348:	mov	x6, #0x7fff                	// #32767
    834c:	cbz	x5, 8358 <__divtf3@@GCC_3.0+0x660>
    8350:	mov	x5, #0xffffffffffffffff    	// #-1
    8354:	mov	x6, #0x7ffe                	// #32766
    8358:	mov	w0, #0x14                  	// #20
    835c:	orr	w3, w3, w0
    8360:	mov	x4, x5
    8364:	mov	x1, #0x0                   	// #0
    8368:	mov	x0, x5
    836c:	bfxil	x1, x4, #0, #48
    8370:	bfi	x1, x6, #48, #15
    8374:	bfi	x1, x2, #63, #1
    8378:	stp	x0, x1, [sp, #16]
    837c:	mov	w0, w3
    8380:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    8384:	b	8560 <__divtf3@@GCC_3.0+0x868>
    8388:	cmp	x2, #0x0
    838c:	csetm	x5, ne  // ne = any
    8390:	mov	x6, #0x7ffe                	// #32766
    8394:	mov	x0, #0x7fff                	// #32767
    8398:	csel	x6, x6, x0, ne  // ne = any
    839c:	b	8358 <__divtf3@@GCC_3.0+0x660>
    83a0:	cmp	x2, #0x0
    83a4:	csetm	x5, eq  // eq = none
    83a8:	mov	x6, #0x7ffe                	// #32766
    83ac:	mov	x0, #0x7fff                	// #32767
    83b0:	csel	x6, x6, x0, eq  // eq = none
    83b4:	b	8358 <__divtf3@@GCC_3.0+0x660>
    83b8:	mov	x1, #0x1                   	// #1
    83bc:	sub	x0, x1, x0
    83c0:	cmp	x0, #0x74
    83c4:	b.gt	84c8 <__divtf3@@GCC_3.0+0x7d0>
    83c8:	cmp	x0, #0x3f
    83cc:	b.gt	8410 <__divtf3@@GCC_3.0+0x718>
    83d0:	mov	w6, #0x40                  	// #64
    83d4:	sub	w6, w6, w0
    83d8:	lsl	x1, x4, x6
    83dc:	lsr	x7, x5, x0
    83e0:	orr	x1, x1, x7
    83e4:	lsl	x5, x5, x6
    83e8:	cmp	x5, #0x0
    83ec:	cset	x5, ne  // ne = any
    83f0:	orr	x1, x1, x5
    83f4:	lsr	x0, x4, x0
    83f8:	tst	x1, #0x7
    83fc:	b.ne	8458 <__divtf3@@GCC_3.0+0x760>  // b.any
    8400:	tbnz	x0, #51, 8478 <__divtf3@@GCC_3.0+0x780>
    8404:	extr	x5, x0, x1, #3
    8408:	lsr	x4, x0, #3
    840c:	b	8448 <__divtf3@@GCC_3.0+0x750>
    8410:	sub	w6, w0, #0x40
    8414:	lsr	x6, x4, x6
    8418:	mov	w1, #0x80                  	// #128
    841c:	sub	w1, w1, w0
    8420:	lsl	x4, x4, x1
    8424:	cmp	x0, #0x40
    8428:	csel	x0, x4, xzr, ne  // ne = any
    842c:	orr	x5, x0, x5
    8430:	cmp	x5, #0x0
    8434:	cset	x1, ne  // ne = any
    8438:	orr	x1, x6, x1
    843c:	lsr	x5, x6, #3
    8440:	ands	x4, x1, #0x7
    8444:	b.ne	8454 <__divtf3@@GCC_3.0+0x75c>  // b.any
    8448:	tbz	w12, #11, 8580 <__divtf3@@GCC_3.0+0x888>
    844c:	mov	x6, #0x0                   	// #0
    8450:	b	8488 <__divtf3@@GCC_3.0+0x790>
    8454:	mov	x0, #0x0                   	// #0
    8458:	orr	w3, w3, #0x10
    845c:	and	x12, x12, #0xc00000
    8460:	cmp	x12, #0x400, lsl #12
    8464:	b.eq	84a8 <__divtf3@@GCC_3.0+0x7b0>  // b.none
    8468:	cmp	x12, #0x800, lsl #12
    846c:	b.eq	84b8 <__divtf3@@GCC_3.0+0x7c0>  // b.none
    8470:	cbz	x12, 8490 <__divtf3@@GCC_3.0+0x798>
    8474:	tbz	x0, #51, 859c <__divtf3@@GCC_3.0+0x8a4>
    8478:	orr	w3, w3, #0x10
    847c:	mov	x4, #0x0                   	// #0
    8480:	mov	x5, #0x0                   	// #0
    8484:	mov	x6, #0x1                   	// #1
    8488:	orr	w3, w3, #0x8
    848c:	b	8364 <__divtf3@@GCC_3.0+0x66c>
    8490:	and	x4, x1, #0xf
    8494:	cmp	x4, #0x4
    8498:	b.eq	8474 <__divtf3@@GCC_3.0+0x77c>  // b.none
    849c:	adds	x1, x1, #0x4
    84a0:	cinc	x0, x0, cs  // cs = hs, nlast
    84a4:	b	8474 <__divtf3@@GCC_3.0+0x77c>
    84a8:	cbnz	x2, 8474 <__divtf3@@GCC_3.0+0x77c>
    84ac:	adds	x1, x1, #0x8
    84b0:	cinc	x0, x0, cs  // cs = hs, nlast
    84b4:	b	8474 <__divtf3@@GCC_3.0+0x77c>
    84b8:	cbz	x2, 8474 <__divtf3@@GCC_3.0+0x77c>
    84bc:	adds	x1, x1, #0x8
    84c0:	cinc	x0, x0, cs  // cs = hs, nlast
    84c4:	b	8474 <__divtf3@@GCC_3.0+0x77c>
    84c8:	orr	x5, x5, x4
    84cc:	cbz	x5, 84f8 <__divtf3@@GCC_3.0+0x800>
    84d0:	orr	w3, w3, #0x10
    84d4:	and	x12, x12, #0xc00000
    84d8:	cmp	x12, #0x400, lsl #12
    84dc:	b.eq	8508 <__divtf3@@GCC_3.0+0x810>  // b.none
    84e0:	cmp	x12, #0x800, lsl #12
    84e4:	b.eq	8518 <__divtf3@@GCC_3.0+0x820>  // b.none
    84e8:	cmp	x12, #0x0
    84ec:	mov	x5, #0x5                   	// #5
    84f0:	csinc	x5, x5, xzr, eq  // eq = none
    84f4:	lsr	x5, x5, #3
    84f8:	orr	w3, w3, #0x8
    84fc:	mov	x4, #0x0                   	// #0
    8500:	mov	x6, #0x0                   	// #0
    8504:	b	8364 <__divtf3@@GCC_3.0+0x66c>
    8508:	cmp	x2, #0x0
    850c:	mov	x5, #0x9                   	// #9
    8510:	csinc	x5, x5, xzr, eq  // eq = none
    8514:	b	84f4 <__divtf3@@GCC_3.0+0x7fc>
    8518:	cmp	x2, #0x0
    851c:	mov	x5, #0x9                   	// #9
    8520:	csinc	x5, x5, xzr, ne  // ne = any
    8524:	b	84f4 <__divtf3@@GCC_3.0+0x7fc>
    8528:	mov	x4, #0x0                   	// #0
    852c:	mov	x5, #0x0                   	// #0
    8530:	mov	x6, #0x0                   	// #0
    8534:	b	8544 <__divtf3@@GCC_3.0+0x84c>
    8538:	mov	x4, #0x0                   	// #0
    853c:	mov	x5, #0x0                   	// #0
    8540:	mov	x6, #0x0                   	// #0
    8544:	mov	x1, #0x0                   	// #0
    8548:	mov	x0, x5
    854c:	bfxil	x1, x4, #0, #48
    8550:	bfi	x1, x6, #48, #15
    8554:	bfi	x1, x9, #63, #1
    8558:	stp	x0, x1, [sp, #16]
    855c:	cbnz	w3, 837c <__divtf3@@GCC_3.0+0x684>
    8560:	ldr	q0, [sp, #16]
    8564:	ldp	x29, x30, [sp], #32
    8568:	ret
    856c:	mov	x9, x2
    8570:	mov	x4, #0x0                   	// #0
    8574:	mov	x5, #0x0                   	// #0
    8578:	mov	x6, #0x0                   	// #0
    857c:	b	8544 <__divtf3@@GCC_3.0+0x84c>
    8580:	mov	x9, x2
    8584:	mov	x6, #0x0                   	// #0
    8588:	b	8544 <__divtf3@@GCC_3.0+0x84c>
    858c:	mov	x4, x10
    8590:	mov	x5, x13
    8594:	mov	x2, x0
    8598:	b	7f78 <__divtf3@@GCC_3.0+0x280>
    859c:	extr	x5, x0, x1, #3
    85a0:	lsr	x4, x0, #3
    85a4:	mov	x6, #0x0                   	// #0
    85a8:	b	8488 <__divtf3@@GCC_3.0+0x790>

00000000000085ac <__eqtf2@@GCC_3.0>:
    85ac:	stp	x29, x30, [sp, #-32]!
    85b0:	mov	x29, sp
    85b4:	str	q0, [sp, #16]
    85b8:	ldr	x5, [sp, #16]
    85bc:	ldr	x0, [sp, #24]
    85c0:	str	q1, [sp, #16]
    85c4:	ldr	x6, [sp, #16]
    85c8:	ldr	x2, [sp, #24]
    85cc:	mrs	x1, fpcr
    85d0:	mov	x10, x5
    85d4:	ubfx	x7, x0, #0, #48
    85d8:	ubfx	x3, x0, #48, #15
    85dc:	lsr	x0, x0, #63
    85e0:	and	w1, w0, #0xff
    85e4:	mov	x9, x6
    85e8:	ubfx	x8, x2, #0, #48
    85ec:	ubfx	x4, x2, #48, #15
    85f0:	lsr	x0, x2, #63
    85f4:	and	w2, w0, #0xff
    85f8:	mov	x0, #0x7fff                	// #32767
    85fc:	cmp	x3, x0
    8600:	b.eq	8624 <__eqtf2@@GCC_3.0+0x78>  // b.none
    8604:	mov	x0, #0x7fff                	// #32767
    8608:	cmp	x4, x0
    860c:	b.eq	8640 <__eqtf2@@GCC_3.0+0x94>  // b.none
    8610:	mov	w0, #0x1                   	// #1
    8614:	cmp	x3, x4
    8618:	b.eq	8670 <__eqtf2@@GCC_3.0+0xc4>  // b.none
    861c:	ldp	x29, x30, [sp], #32
    8620:	ret
    8624:	orr	x0, x7, x5
    8628:	cbnz	x0, 86a8 <__eqtf2@@GCC_3.0+0xfc>
    862c:	mov	x0, #0x7fff                	// #32767
    8630:	cmp	x4, x0
    8634:	b.eq	8640 <__eqtf2@@GCC_3.0+0x94>  // b.none
    8638:	mov	w0, #0x1                   	// #1
    863c:	b	861c <__eqtf2@@GCC_3.0+0x70>
    8640:	orr	x0, x8, x9
    8644:	cbz	x0, 8610 <__eqtf2@@GCC_3.0+0x64>
    8648:	mov	x0, #0x7fff                	// #32767
    864c:	cmp	x3, x0
    8650:	b.eq	86a0 <__eqtf2@@GCC_3.0+0xf4>  // b.none
    8654:	mov	w0, #0x1                   	// #1
    8658:	tst	x8, #0x800000000000
    865c:	b.ne	861c <__eqtf2@@GCC_3.0+0x70>  // b.any
    8660:	mov	w0, #0x1                   	// #1
    8664:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    8668:	mov	w0, #0x1                   	// #1
    866c:	b	861c <__eqtf2@@GCC_3.0+0x70>
    8670:	cmp	x7, x8
    8674:	ccmp	x5, x6, #0x0, eq  // eq = none
    8678:	b.ne	861c <__eqtf2@@GCC_3.0+0x70>  // b.any
    867c:	mov	w0, #0x0                   	// #0
    8680:	cmp	w1, w2
    8684:	b.eq	861c <__eqtf2@@GCC_3.0+0x70>  // b.none
    8688:	mov	w0, #0x1                   	// #1
    868c:	cbnz	x3, 861c <__eqtf2@@GCC_3.0+0x70>
    8690:	orr	x7, x7, x10
    8694:	cmp	x7, #0x0
    8698:	cset	w0, ne  // ne = any
    869c:	b	861c <__eqtf2@@GCC_3.0+0x70>
    86a0:	orr	x10, x7, x10
    86a4:	cbz	x10, 86c0 <__eqtf2@@GCC_3.0+0x114>
    86a8:	tst	x7, #0x800000000000
    86ac:	b.eq	8660 <__eqtf2@@GCC_3.0+0xb4>  // b.none
    86b0:	mov	w0, #0x1                   	// #1
    86b4:	mov	x1, #0x7fff                	// #32767
    86b8:	cmp	x4, x1
    86bc:	b.ne	861c <__eqtf2@@GCC_3.0+0x70>  // b.any
    86c0:	orr	x9, x8, x9
    86c4:	mov	w0, #0x1                   	// #1
    86c8:	cbz	x9, 861c <__eqtf2@@GCC_3.0+0x70>
    86cc:	b	8654 <__eqtf2@@GCC_3.0+0xa8>

00000000000086d0 <__getf2@@GCC_3.0>:
    86d0:	stp	x29, x30, [sp, #-32]!
    86d4:	mov	x29, sp
    86d8:	str	q0, [sp, #16]
    86dc:	ldr	x7, [sp, #16]
    86e0:	ldr	x1, [sp, #24]
    86e4:	str	q1, [sp, #16]
    86e8:	ldr	x8, [sp, #16]
    86ec:	ldr	x0, [sp, #24]
    86f0:	mrs	x2, fpcr
    86f4:	mov	x5, x7
    86f8:	ubfx	x9, x1, #0, #48
    86fc:	ubfx	x4, x1, #48, #15
    8700:	lsr	x1, x1, #63
    8704:	and	w2, w1, #0xff
    8708:	mov	x6, x8
    870c:	ubfx	x10, x0, #0, #48
    8710:	ubfx	x3, x0, #48, #15
    8714:	lsr	x0, x0, #63
    8718:	and	w1, w0, #0xff
    871c:	mov	x0, #0x7fff                	// #32767
    8720:	cmp	x4, x0
    8724:	b.eq	8764 <__getf2@@GCC_3.0+0x94>  // b.none
    8728:	mov	x0, #0x7fff                	// #32767
    872c:	cmp	x3, x0
    8730:	b.eq	8780 <__getf2@@GCC_3.0+0xb0>  // b.none
    8734:	mov	w0, #0x0                   	// #0
    8738:	cbnz	x4, 8748 <__getf2@@GCC_3.0+0x78>
    873c:	orr	x5, x5, x9
    8740:	cmp	x5, #0x0
    8744:	cset	w0, eq  // eq = none
    8748:	cbnz	x3, 8790 <__getf2@@GCC_3.0+0xc0>
    874c:	orr	x6, x10, x6
    8750:	cbnz	x6, 8790 <__getf2@@GCC_3.0+0xc0>
    8754:	cbz	w0, 87a4 <__getf2@@GCC_3.0+0xd4>
    8758:	mov	w0, #0x0                   	// #0
    875c:	ldp	x29, x30, [sp], #32
    8760:	ret
    8764:	orr	x0, x7, x9
    8768:	cbnz	x0, 882c <__getf2@@GCC_3.0+0x15c>
    876c:	mov	x0, #0x7fff                	// #32767
    8770:	cmp	x3, x0
    8774:	b.eq	8780 <__getf2@@GCC_3.0+0xb0>  // b.none
    8778:	mov	w0, #0x0                   	// #0
    877c:	b	8748 <__getf2@@GCC_3.0+0x78>
    8780:	orr	x0, x10, x6
    8784:	cbnz	x0, 882c <__getf2@@GCC_3.0+0x15c>
    8788:	mov	w0, #0x0                   	// #0
    878c:	cbz	x4, 873c <__getf2@@GCC_3.0+0x6c>
    8790:	and	x1, x1, #0xff
    8794:	cbz	w0, 883c <__getf2@@GCC_3.0+0x16c>
    8798:	cmp	x1, #0x0
    879c:	csinv	w0, w0, wzr, ne  // ne = any
    87a0:	b	875c <__getf2@@GCC_3.0+0x8c>
    87a4:	mov	w0, #0x1                   	// #1
    87a8:	cmp	w2, #0x0
    87ac:	cneg	w0, w0, ne  // ne = any
    87b0:	b	875c <__getf2@@GCC_3.0+0x8c>
    87b4:	cmp	x4, x3
    87b8:	b.le	87cc <__getf2@@GCC_3.0+0xfc>
    87bc:	mov	w0, #0x1                   	// #1
    87c0:	cmp	x5, #0x0
    87c4:	cneg	w0, w0, ne  // ne = any
    87c8:	b	875c <__getf2@@GCC_3.0+0x8c>
    87cc:	b.ge	87e0 <__getf2@@GCC_3.0+0x110>  // b.tcont
    87d0:	mov	w0, #0xffffffff            	// #-1
    87d4:	cmp	x5, #0x0
    87d8:	cneg	w0, w0, ne  // ne = any
    87dc:	b	875c <__getf2@@GCC_3.0+0x8c>
    87e0:	cmp	x9, x10
    87e4:	b.hi	87f8 <__getf2@@GCC_3.0+0x128>  // b.pmore
    87e8:	cset	w1, eq  // eq = none
    87ec:	cmp	w1, #0x0
    87f0:	ccmp	x7, x8, #0x0, ne  // ne = any
    87f4:	b.ls	8808 <__getf2@@GCC_3.0+0x138>  // b.plast
    87f8:	mov	w0, #0x1                   	// #1
    87fc:	cmp	x5, #0x0
    8800:	cneg	w0, w0, ne  // ne = any
    8804:	b	875c <__getf2@@GCC_3.0+0x8c>
    8808:	cmp	x9, x10
    880c:	b.cc	881c <__getf2@@GCC_3.0+0x14c>  // b.lo, b.ul, b.last
    8810:	cmp	w1, #0x0
    8814:	ccmp	x7, x8, #0x2, ne  // ne = any
    8818:	b.cs	875c <__getf2@@GCC_3.0+0x8c>  // b.hs, b.nlast
    881c:	mov	w0, #0xffffffff            	// #-1
    8820:	cmp	x5, #0x0
    8824:	cneg	w0, w0, ne  // ne = any
    8828:	b	875c <__getf2@@GCC_3.0+0x8c>
    882c:	mov	w0, #0x1                   	// #1
    8830:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    8834:	mov	w0, #0xfffffffe            	// #-2
    8838:	b	875c <__getf2@@GCC_3.0+0x8c>
    883c:	and	x5, x2, #0xff
    8840:	cmp	x1, w2, uxtb
    8844:	b.eq	87b4 <__getf2@@GCC_3.0+0xe4>  // b.none
    8848:	mov	w0, #0x1                   	// #1
    884c:	cmp	x5, #0x0
    8850:	cneg	w0, w0, ne  // ne = any
    8854:	b	875c <__getf2@@GCC_3.0+0x8c>

0000000000008858 <__letf2@@GCC_3.0>:
    8858:	stp	x29, x30, [sp, #-32]!
    885c:	mov	x29, sp
    8860:	str	q0, [sp, #16]
    8864:	ldr	x7, [sp, #16]
    8868:	ldr	x1, [sp, #24]
    886c:	str	q1, [sp, #16]
    8870:	ldr	x8, [sp, #16]
    8874:	ldr	x0, [sp, #24]
    8878:	mrs	x2, fpcr
    887c:	mov	x5, x7
    8880:	ubfx	x9, x1, #0, #48
    8884:	ubfx	x3, x1, #48, #15
    8888:	lsr	x1, x1, #63
    888c:	and	w2, w1, #0xff
    8890:	mov	x6, x8
    8894:	ubfx	x10, x0, #0, #48
    8898:	ubfx	x4, x0, #48, #15
    889c:	lsr	x0, x0, #63
    88a0:	and	w1, w0, #0xff
    88a4:	mov	x0, #0x7fff                	// #32767
    88a8:	cmp	x3, x0
    88ac:	b.eq	88ec <__letf2@@GCC_3.0+0x94>  // b.none
    88b0:	mov	x0, #0x7fff                	// #32767
    88b4:	cmp	x4, x0
    88b8:	b.eq	8908 <__letf2@@GCC_3.0+0xb0>  // b.none
    88bc:	mov	w0, #0x0                   	// #0
    88c0:	cbnz	x3, 88d0 <__letf2@@GCC_3.0+0x78>
    88c4:	orr	x5, x5, x9
    88c8:	cmp	x5, #0x0
    88cc:	cset	w0, eq  // eq = none
    88d0:	cbnz	x4, 8918 <__letf2@@GCC_3.0+0xc0>
    88d4:	orr	x6, x10, x6
    88d8:	cbnz	x6, 8918 <__letf2@@GCC_3.0+0xc0>
    88dc:	cbz	w0, 892c <__letf2@@GCC_3.0+0xd4>
    88e0:	mov	w0, #0x0                   	// #0
    88e4:	ldp	x29, x30, [sp], #32
    88e8:	ret
    88ec:	orr	x0, x7, x9
    88f0:	cbnz	x0, 89b4 <__letf2@@GCC_3.0+0x15c>
    88f4:	mov	x0, #0x7fff                	// #32767
    88f8:	cmp	x4, x0
    88fc:	b.eq	8908 <__letf2@@GCC_3.0+0xb0>  // b.none
    8900:	mov	w0, #0x0                   	// #0
    8904:	b	88d0 <__letf2@@GCC_3.0+0x78>
    8908:	orr	x0, x10, x6
    890c:	cbnz	x0, 89b4 <__letf2@@GCC_3.0+0x15c>
    8910:	mov	w0, #0x0                   	// #0
    8914:	cbz	x3, 88c4 <__letf2@@GCC_3.0+0x6c>
    8918:	and	x1, x1, #0xff
    891c:	cbz	w0, 89c4 <__letf2@@GCC_3.0+0x16c>
    8920:	cmp	x1, #0x0
    8924:	csinv	w0, w0, wzr, ne  // ne = any
    8928:	b	88e4 <__letf2@@GCC_3.0+0x8c>
    892c:	mov	w0, #0x1                   	// #1
    8930:	cmp	w2, #0x0
    8934:	cneg	w0, w0, ne  // ne = any
    8938:	b	88e4 <__letf2@@GCC_3.0+0x8c>
    893c:	cmp	x3, x4
    8940:	b.le	8954 <__letf2@@GCC_3.0+0xfc>
    8944:	mov	w0, #0x1                   	// #1
    8948:	cmp	x5, #0x0
    894c:	cneg	w0, w0, ne  // ne = any
    8950:	b	88e4 <__letf2@@GCC_3.0+0x8c>
    8954:	b.ge	8968 <__letf2@@GCC_3.0+0x110>  // b.tcont
    8958:	mov	w0, #0xffffffff            	// #-1
    895c:	cmp	x5, #0x0
    8960:	cneg	w0, w0, ne  // ne = any
    8964:	b	88e4 <__letf2@@GCC_3.0+0x8c>
    8968:	cmp	x9, x10
    896c:	b.hi	8980 <__letf2@@GCC_3.0+0x128>  // b.pmore
    8970:	cset	w1, eq  // eq = none
    8974:	cmp	w1, #0x0
    8978:	ccmp	x7, x8, #0x0, ne  // ne = any
    897c:	b.ls	8990 <__letf2@@GCC_3.0+0x138>  // b.plast
    8980:	mov	w0, #0x1                   	// #1
    8984:	cmp	x5, #0x0
    8988:	cneg	w0, w0, ne  // ne = any
    898c:	b	88e4 <__letf2@@GCC_3.0+0x8c>
    8990:	cmp	x9, x10
    8994:	b.cc	89a4 <__letf2@@GCC_3.0+0x14c>  // b.lo, b.ul, b.last
    8998:	cmp	w1, #0x0
    899c:	ccmp	x7, x8, #0x2, ne  // ne = any
    89a0:	b.cs	88e4 <__letf2@@GCC_3.0+0x8c>  // b.hs, b.nlast
    89a4:	mov	w0, #0xffffffff            	// #-1
    89a8:	cmp	x5, #0x0
    89ac:	cneg	w0, w0, ne  // ne = any
    89b0:	b	88e4 <__letf2@@GCC_3.0+0x8c>
    89b4:	mov	w0, #0x1                   	// #1
    89b8:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    89bc:	mov	w0, #0x2                   	// #2
    89c0:	b	88e4 <__letf2@@GCC_3.0+0x8c>
    89c4:	and	x5, x2, #0xff
    89c8:	cmp	x1, w2, uxtb
    89cc:	b.eq	893c <__letf2@@GCC_3.0+0xe4>  // b.none
    89d0:	mov	w0, #0x1                   	// #1
    89d4:	cmp	x5, #0x0
    89d8:	cneg	w0, w0, ne  // ne = any
    89dc:	b	88e4 <__letf2@@GCC_3.0+0x8c>

00000000000089e0 <__multf3@@GCC_3.0>:
    89e0:	stp	x29, x30, [sp, #-32]!
    89e4:	mov	x29, sp
    89e8:	str	q0, [sp, #16]
    89ec:	ldr	x2, [sp, #16]
    89f0:	ldr	x0, [sp, #24]
    89f4:	str	q1, [sp, #16]
    89f8:	ldr	x7, [sp, #16]
    89fc:	ldr	x1, [sp, #24]
    8a00:	mrs	x13, fpcr
    8a04:	ubfx	x8, x0, #0, #48
    8a08:	ubfx	x9, x0, #48, #15
    8a0c:	lsr	x0, x0, #63
    8a10:	and	w11, w0, #0xff
    8a14:	cbz	w9, 8afc <__multf3@@GCC_3.0+0x11c>
    8a18:	mov	x4, x8
    8a1c:	mov	w5, #0x7fff                	// #32767
    8a20:	cmp	w9, w5
    8a24:	b.eq	8b64 <__multf3@@GCC_3.0+0x184>  // b.none
    8a28:	extr	x4, x8, x2, #61
    8a2c:	orr	x4, x4, #0x8000000000000
    8a30:	lsl	x5, x2, #3
    8a34:	and	x9, x9, #0xffff
    8a38:	sub	x9, x9, #0x3, lsl #12
    8a3c:	sub	x9, x9, #0xfff
    8a40:	mov	x6, #0x0                   	// #0
    8a44:	mov	w8, #0x0                   	// #0
    8a48:	ubfx	x14, x1, #0, #48
    8a4c:	ubfx	x12, x1, #48, #15
    8a50:	lsr	x1, x1, #63
    8a54:	and	w3, w1, #0xff
    8a58:	cbz	w12, 8bac <__multf3@@GCC_3.0+0x1cc>
    8a5c:	mov	w10, #0x7fff                	// #32767
    8a60:	cmp	w12, w10
    8a64:	b.eq	8c10 <__multf3@@GCC_3.0+0x230>  // b.none
    8a68:	extr	x10, x14, x7, #61
    8a6c:	orr	x10, x10, #0x8000000000000
    8a70:	lsl	x7, x7, #3
    8a74:	and	x12, x12, #0xffff
    8a78:	sub	x12, x12, #0x3, lsl #12
    8a7c:	sub	x12, x12, #0xfff
    8a80:	mov	x14, #0x0                   	// #0
    8a84:	eor	w11, w11, w3
    8a88:	and	x11, x11, #0xff
    8a8c:	add	x12, x9, x12
    8a90:	add	x9, x12, #0x1
    8a94:	orr	x3, x14, x6, lsl #2
    8a98:	cmp	x3, #0xa
    8a9c:	b.le	8cb0 <__multf3@@GCC_3.0+0x2d0>
    8aa0:	cmp	x3, #0xc
    8aa4:	csel	x1, x1, x0, lt  // lt = tstop
    8aa8:	csel	x4, x10, x4, lt  // lt = tstop
    8aac:	csel	x5, x7, x5, lt  // lt = tstop
    8ab0:	csel	x6, x14, x6, lt  // lt = tstop
    8ab4:	cmp	x6, #0x2
    8ab8:	b.eq	9098 <__multf3@@GCC_3.0+0x6b8>  // b.none
    8abc:	b.gt	8cfc <__multf3@@GCC_3.0+0x31c>
    8ac0:	cbz	x6, 90b8 <__multf3@@GCC_3.0+0x6d8>
    8ac4:	cmp	x6, #0x1
    8ac8:	csel	x4, x4, xzr, ne  // ne = any
    8acc:	csel	x5, x5, xzr, ne  // ne = any
    8ad0:	csel	x9, x9, xzr, ne  // ne = any
    8ad4:	mov	x3, #0x0                   	// #0
    8ad8:	mov	x2, x5
    8adc:	bfxil	x3, x4, #0, #48
    8ae0:	bfi	x3, x9, #48, #15
    8ae4:	bfi	x3, x1, #63, #1
    8ae8:	stp	x2, x3, [sp, #16]
    8aec:	cbnz	w8, 8eec <__multf3@@GCC_3.0+0x50c>
    8af0:	ldr	q0, [sp, #16]
    8af4:	ldp	x29, x30, [sp], #32
    8af8:	ret
    8afc:	orr	x5, x8, x2
    8b00:	cbz	x5, 8b84 <__multf3@@GCC_3.0+0x1a4>
    8b04:	cbz	x8, 8b40 <__multf3@@GCC_3.0+0x160>
    8b08:	clz	x6, x8
    8b0c:	sub	x4, x6, #0xf
    8b10:	add	w5, w4, #0x3
    8b14:	lsl	x8, x8, x5
    8b18:	mov	w3, #0x3d                  	// #61
    8b1c:	sub	w4, w3, w4
    8b20:	lsr	x4, x2, x4
    8b24:	orr	x4, x4, x8
    8b28:	lsl	x5, x2, x5
    8b2c:	mov	x9, #0xffffffffffffc011    	// #-16367
    8b30:	sub	x9, x9, x6
    8b34:	mov	x6, #0x0                   	// #0
    8b38:	mov	w8, #0x0                   	// #0
    8b3c:	b	8a48 <__multf3@@GCC_3.0+0x68>
    8b40:	clz	x4, x2
    8b44:	add	x6, x4, #0x40
    8b48:	add	x4, x4, #0x31
    8b4c:	cmp	x4, #0x3c
    8b50:	b.le	8b10 <__multf3@@GCC_3.0+0x130>
    8b54:	sub	w4, w4, #0x3d
    8b58:	mov	x5, x8
    8b5c:	lsl	x4, x2, x4
    8b60:	b	8b2c <__multf3@@GCC_3.0+0x14c>
    8b64:	orr	x5, x8, x2
    8b68:	cbz	x5, 8b98 <__multf3@@GCC_3.0+0x1b8>
    8b6c:	lsr	x8, x8, #47
    8b70:	eor	w8, w8, #0x1
    8b74:	mov	x5, x2
    8b78:	mov	x9, #0x7fff                	// #32767
    8b7c:	mov	x6, #0x3                   	// #3
    8b80:	b	8a48 <__multf3@@GCC_3.0+0x68>
    8b84:	mov	x4, x5
    8b88:	mov	x9, #0x0                   	// #0
    8b8c:	mov	x6, #0x1                   	// #1
    8b90:	mov	w8, #0x0                   	// #0
    8b94:	b	8a48 <__multf3@@GCC_3.0+0x68>
    8b98:	mov	x4, x5
    8b9c:	mov	x9, #0x7fff                	// #32767
    8ba0:	mov	x6, #0x2                   	// #2
    8ba4:	mov	w8, #0x0                   	// #0
    8ba8:	b	8a48 <__multf3@@GCC_3.0+0x68>
    8bac:	orr	x10, x14, x7
    8bb0:	cbz	x10, 9124 <__multf3@@GCC_3.0+0x744>
    8bb4:	cbz	x14, 8bec <__multf3@@GCC_3.0+0x20c>
    8bb8:	clz	x15, x14
    8bbc:	sub	x10, x15, #0xf
    8bc0:	add	w12, w10, #0x3
    8bc4:	lsl	x14, x14, x12
    8bc8:	mov	w2, #0x3d                  	// #61
    8bcc:	sub	w10, w2, w10
    8bd0:	lsr	x10, x7, x10
    8bd4:	orr	x10, x10, x14
    8bd8:	lsl	x7, x7, x12
    8bdc:	mov	x12, #0xffffffffffffc011    	// #-16367
    8be0:	sub	x12, x12, x15
    8be4:	mov	x14, #0x0                   	// #0
    8be8:	b	8a84 <__multf3@@GCC_3.0+0xa4>
    8bec:	clz	x10, x7
    8bf0:	add	x15, x10, #0x40
    8bf4:	add	x10, x10, #0x31
    8bf8:	cmp	x10, #0x3c
    8bfc:	b.le	8bc0 <__multf3@@GCC_3.0+0x1e0>
    8c00:	sub	w10, w10, #0x3d
    8c04:	lsl	x10, x7, x10
    8c08:	mov	x7, x14
    8c0c:	b	8bdc <__multf3@@GCC_3.0+0x1fc>
    8c10:	orr	x10, x14, x7
    8c14:	cbz	x10, 8c84 <__multf3@@GCC_3.0+0x2a4>
    8c18:	tst	x14, #0x800000000000
    8c1c:	csinc	w8, w8, wzr, ne  // ne = any
    8c20:	eor	w11, w11, w3
    8c24:	and	x11, x11, #0xff
    8c28:	add	x9, x9, #0x8, lsl #12
    8c2c:	lsl	x2, x6, #2
    8c30:	orr	x3, x2, #0x3
    8c34:	cmp	x3, #0xa
    8c38:	b.gt	8d08 <__multf3@@GCC_3.0+0x328>
    8c3c:	mov	x10, x14
    8c40:	mov	x14, #0x3                   	// #3
    8c44:	mov	x2, #0x1                   	// #1
    8c48:	lsl	x2, x2, x3
    8c4c:	mov	x0, #0x530                 	// #1328
    8c50:	tst	x2, x0
    8c54:	b.ne	8e64 <__multf3@@GCC_3.0+0x484>  // b.any
    8c58:	mov	x0, #0x240                 	// #576
    8c5c:	ands	x2, x2, x0
    8c60:	mov	x4, #0xffffffffffff        	// #281474976710655
    8c64:	csel	x4, x10, x4, eq  // eq = none
    8c68:	cmp	x2, #0x0
    8c6c:	csinv	x5, x7, xzr, eq  // eq = none
    8c70:	csel	x1, x1, xzr, eq  // eq = none
    8c74:	mov	x6, #0x3                   	// #3
    8c78:	csel	x6, x14, x6, eq  // eq = none
    8c7c:	csinc	w8, w8, wzr, eq  // eq = none
    8c80:	b	8ab4 <__multf3@@GCC_3.0+0xd4>
    8c84:	eor	w11, w11, w3
    8c88:	and	x11, x11, #0xff
    8c8c:	add	x12, x9, #0x7, lsl #12
    8c90:	add	x12, x12, #0xfff
    8c94:	add	x9, x9, #0x8, lsl #12
    8c98:	lsl	x2, x6, #2
    8c9c:	orr	x3, x2, #0x2
    8ca0:	cmp	x3, #0xa
    8ca4:	b.gt	8cd0 <__multf3@@GCC_3.0+0x2f0>
    8ca8:	mov	x7, x10
    8cac:	mov	x14, #0x2                   	// #2
    8cb0:	cmp	x3, #0x2
    8cb4:	b.gt	8c44 <__multf3@@GCC_3.0+0x264>
    8cb8:	cbz	x3, 8d14 <__multf3@@GCC_3.0+0x334>
    8cbc:	mov	x4, x10
    8cc0:	mov	x5, x7
    8cc4:	mov	x1, x11
    8cc8:	mov	x6, x14
    8ccc:	b	8ab4 <__multf3@@GCC_3.0+0xd4>
    8cd0:	mov	x7, x10
    8cd4:	mov	x14, #0x2                   	// #2
    8cd8:	cmp	x3, #0xe
    8cdc:	b.le	8aa0 <__multf3@@GCC_3.0+0xc0>
    8ce0:	tbz	x4, #47, 8cf8 <__multf3@@GCC_3.0+0x318>
    8ce4:	ands	x2, x10, #0x800000000000
    8ce8:	csel	x4, x4, x10, ne  // ne = any
    8cec:	cmp	x2, #0x0
    8cf0:	csel	x5, x5, x7, ne  // ne = any
    8cf4:	csel	x0, x0, x1, ne  // ne = any
    8cf8:	mov	x1, x0
    8cfc:	orr	x4, x4, #0x800000000000
    8d00:	mov	x9, #0x7fff                	// #32767
    8d04:	b	8ad4 <__multf3@@GCC_3.0+0xf4>
    8d08:	mov	x10, x14
    8d0c:	mov	x14, #0x3                   	// #3
    8d10:	b	8cd8 <__multf3@@GCC_3.0+0x2f8>
    8d14:	lsr	x6, x5, #32
    8d18:	lsr	x1, x7, #32
    8d1c:	and	x2, x5, #0xffffffff
    8d20:	and	x7, x7, #0xffffffff
    8d24:	mul	x14, x7, x2
    8d28:	mul	x3, x6, x7
    8d2c:	mul	x5, x6, x1
    8d30:	madd	x16, x1, x2, x3
    8d34:	add	x16, x16, x14, lsr #32
    8d38:	mov	x0, #0x100000000           	// #4294967296
    8d3c:	add	x0, x5, x0
    8d40:	cmp	x3, x16
    8d44:	csel	x5, x0, x5, hi  // hi = pmore
    8d48:	and	x14, x14, #0xffffffff
    8d4c:	add	x14, x14, x16, lsl #32
    8d50:	lsr	x0, x10, #32
    8d54:	and	x10, x10, #0xffffffff
    8d58:	mul	x3, x2, x10
    8d5c:	mul	x17, x6, x10
    8d60:	mul	x6, x6, x0
    8d64:	madd	x2, x0, x2, x17
    8d68:	add	x2, x2, x3, lsr #32
    8d6c:	mov	x15, #0x100000000           	// #4294967296
    8d70:	add	x15, x6, x15
    8d74:	cmp	x17, x2
    8d78:	csel	x6, x15, x6, hi  // hi = pmore
    8d7c:	add	x15, x6, x2, lsr #32
    8d80:	and	x3, x3, #0xffffffff
    8d84:	add	x3, x3, x2, lsl #32
    8d88:	add	x16, x3, x16, lsr #32
    8d8c:	lsr	x2, x4, #32
    8d90:	and	x4, x4, #0xffffffff
    8d94:	mul	x6, x7, x4
    8d98:	mul	x7, x2, x7
    8d9c:	mul	x17, x1, x2
    8da0:	madd	x1, x1, x4, x7
    8da4:	add	x1, x1, x6, lsr #32
    8da8:	mov	x18, #0x100000000           	// #4294967296
    8dac:	add	x18, x17, x18
    8db0:	cmp	x7, x1
    8db4:	csel	x17, x18, x17, hi  // hi = pmore
    8db8:	add	x7, x17, x1, lsr #32
    8dbc:	and	x6, x6, #0xffffffff
    8dc0:	add	x1, x6, x1, lsl #32
    8dc4:	mul	x6, x4, x10
    8dc8:	mul	x10, x2, x10
    8dcc:	mul	x2, x0, x2
    8dd0:	madd	x0, x0, x4, x10
    8dd4:	add	x0, x0, x6, lsr #32
    8dd8:	mov	x4, #0x100000000           	// #4294967296
    8ddc:	add	x4, x2, x4
    8de0:	cmp	x10, x0
    8de4:	csel	x2, x4, x2, hi  // hi = pmore
    8de8:	add	x5, x5, x16
    8dec:	cmp	x5, x3
    8df0:	cset	x16, cc  // cc = lo, ul, last
    8df4:	and	x3, x6, #0xffffffff
    8df8:	add	x3, x3, x0, lsl #32
    8dfc:	add	x3, x3, x15
    8e00:	cinc	x10, x3, cc  // cc = lo, ul, last
    8e04:	adds	x1, x5, x1
    8e08:	cset	x5, cs  // cs = hs, nlast
    8e0c:	add	x4, x10, x7
    8e10:	cinc	x6, x4, cs  // cs = hs, nlast
    8e14:	cmp	x3, x15
    8e18:	ccmp	x10, x16, #0x0, cs  // cs = hs, nlast
    8e1c:	lsr	x0, x0, #32
    8e20:	cinc	x0, x0, cc  // cc = lo, ul, last
    8e24:	cmp	x4, x7
    8e28:	ccmp	x6, x5, #0x0, cs  // cs = hs, nlast
    8e2c:	cinc	x2, x2, cc  // cc = lo, ul, last
    8e30:	add	x0, x0, x2
    8e34:	extr	x4, x0, x6, #51
    8e38:	orr	x14, x14, x1, lsl #13
    8e3c:	cmp	x14, #0x0
    8e40:	cset	x5, ne  // ne = any
    8e44:	extr	x1, x6, x1, #51
    8e48:	orr	x5, x5, x1
    8e4c:	tbz	x0, #39, 90b0 <__multf3@@GCC_3.0+0x6d0>
    8e50:	and	x0, x5, #0x1
    8e54:	orr	x5, x0, x5, lsr #1
    8e58:	orr	x5, x5, x4, lsl #63
    8e5c:	lsr	x4, x4, #1
    8e60:	b	90b4 <__multf3@@GCC_3.0+0x6d4>
    8e64:	mov	x1, x11
    8e68:	b	8ab4 <__multf3@@GCC_3.0+0xd4>
    8e6c:	and	x2, x5, #0xf
    8e70:	cmp	x2, #0x4
    8e74:	b.eq	90ec <__multf3@@GCC_3.0+0x70c>  // b.none
    8e78:	adds	x5, x5, #0x4
    8e7c:	cinc	x4, x4, cs  // cs = hs, nlast
    8e80:	b	90ec <__multf3@@GCC_3.0+0x70c>
    8e84:	cbnz	x1, 90ec <__multf3@@GCC_3.0+0x70c>
    8e88:	adds	x5, x5, #0x8
    8e8c:	cinc	x4, x4, cs  // cs = hs, nlast
    8e90:	b	90ec <__multf3@@GCC_3.0+0x70c>
    8e94:	cbz	x1, 90ec <__multf3@@GCC_3.0+0x70c>
    8e98:	adds	x5, x5, #0x8
    8e9c:	cinc	x4, x4, cs  // cs = hs, nlast
    8ea0:	b	90ec <__multf3@@GCC_3.0+0x70c>
    8ea4:	and	x5, x13, #0xc00000
    8ea8:	cmp	x5, #0x400, lsl #12
    8eac:	b.eq	8ef8 <__multf3@@GCC_3.0+0x518>  // b.none
    8eb0:	cmp	x5, #0x800, lsl #12
    8eb4:	b.eq	8f10 <__multf3@@GCC_3.0+0x530>  // b.none
    8eb8:	mov	x0, #0x7fff                	// #32767
    8ebc:	cbz	x5, 8ec8 <__multf3@@GCC_3.0+0x4e8>
    8ec0:	mov	x5, #0xffffffffffffffff    	// #-1
    8ec4:	mov	x0, #0x7ffe                	// #32766
    8ec8:	mov	w2, #0x14                  	// #20
    8ecc:	orr	w8, w8, w2
    8ed0:	mov	x4, x5
    8ed4:	mov	x3, #0x0                   	// #0
    8ed8:	mov	x2, x5
    8edc:	bfxil	x3, x4, #0, #48
    8ee0:	bfi	x3, x0, #48, #15
    8ee4:	bfi	x3, x1, #63, #1
    8ee8:	stp	x2, x3, [sp, #16]
    8eec:	mov	w0, w8
    8ef0:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    8ef4:	b	8af0 <__multf3@@GCC_3.0+0x110>
    8ef8:	cmp	x1, #0x0
    8efc:	csetm	x5, ne  // ne = any
    8f00:	mov	x0, #0x7ffe                	// #32766
    8f04:	mov	x2, #0x7fff                	// #32767
    8f08:	csel	x0, x0, x2, ne  // ne = any
    8f0c:	b	8ec8 <__multf3@@GCC_3.0+0x4e8>
    8f10:	cmp	x1, #0x0
    8f14:	csetm	x5, eq  // eq = none
    8f18:	mov	x0, #0x7ffe                	// #32766
    8f1c:	mov	x2, #0x7fff                	// #32767
    8f20:	csel	x0, x0, x2, eq  // eq = none
    8f24:	b	8ec8 <__multf3@@GCC_3.0+0x4e8>
    8f28:	mov	x2, #0x1                   	// #1
    8f2c:	sub	x0, x2, x0
    8f30:	cmp	x0, #0x74
    8f34:	b.gt	9038 <__multf3@@GCC_3.0+0x658>
    8f38:	cmp	x0, #0x3f
    8f3c:	b.gt	8f80 <__multf3@@GCC_3.0+0x5a0>
    8f40:	mov	w3, #0x40                  	// #64
    8f44:	sub	w3, w3, w0
    8f48:	lsl	x2, x4, x3
    8f4c:	lsr	x6, x5, x0
    8f50:	orr	x2, x2, x6
    8f54:	lsl	x3, x5, x3
    8f58:	cmp	x3, #0x0
    8f5c:	cset	x3, ne  // ne = any
    8f60:	orr	x2, x2, x3
    8f64:	lsr	x0, x4, x0
    8f68:	tst	x2, #0x7
    8f6c:	b.ne	8fc8 <__multf3@@GCC_3.0+0x5e8>  // b.any
    8f70:	tbnz	x0, #51, 8fe8 <__multf3@@GCC_3.0+0x608>
    8f74:	extr	x5, x0, x2, #3
    8f78:	lsr	x4, x0, #3
    8f7c:	b	8fb8 <__multf3@@GCC_3.0+0x5d8>
    8f80:	sub	w3, w0, #0x40
    8f84:	lsr	x3, x4, x3
    8f88:	mov	w2, #0x80                  	// #128
    8f8c:	sub	w2, w2, w0
    8f90:	lsl	x4, x4, x2
    8f94:	cmp	x0, #0x40
    8f98:	csel	x0, x4, xzr, ne  // ne = any
    8f9c:	orr	x5, x0, x5
    8fa0:	cmp	x5, #0x0
    8fa4:	cset	x2, ne  // ne = any
    8fa8:	orr	x2, x3, x2
    8fac:	lsr	x5, x3, #3
    8fb0:	ands	x4, x2, #0x7
    8fb4:	b.ne	8fc4 <__multf3@@GCC_3.0+0x5e4>  // b.any
    8fb8:	tbz	w13, #11, 90a8 <__multf3@@GCC_3.0+0x6c8>
    8fbc:	mov	x0, #0x0                   	// #0
    8fc0:	b	8ff8 <__multf3@@GCC_3.0+0x618>
    8fc4:	mov	x0, #0x0                   	// #0
    8fc8:	orr	w8, w8, #0x10
    8fcc:	and	x13, x13, #0xc00000
    8fd0:	cmp	x13, #0x400, lsl #12
    8fd4:	b.eq	9018 <__multf3@@GCC_3.0+0x638>  // b.none
    8fd8:	cmp	x13, #0x800, lsl #12
    8fdc:	b.eq	9028 <__multf3@@GCC_3.0+0x648>  // b.none
    8fe0:	cbz	x13, 9000 <__multf3@@GCC_3.0+0x620>
    8fe4:	tbz	x0, #51, 9114 <__multf3@@GCC_3.0+0x734>
    8fe8:	orr	w8, w8, #0x10
    8fec:	mov	x4, #0x0                   	// #0
    8ff0:	mov	x5, #0x0                   	// #0
    8ff4:	mov	x0, #0x1                   	// #1
    8ff8:	orr	w8, w8, #0x8
    8ffc:	b	8ed4 <__multf3@@GCC_3.0+0x4f4>
    9000:	and	x3, x2, #0xf
    9004:	cmp	x3, #0x4
    9008:	b.eq	8fe4 <__multf3@@GCC_3.0+0x604>  // b.none
    900c:	adds	x2, x2, #0x4
    9010:	cinc	x0, x0, cs  // cs = hs, nlast
    9014:	b	8fe4 <__multf3@@GCC_3.0+0x604>
    9018:	cbnz	x1, 8fe4 <__multf3@@GCC_3.0+0x604>
    901c:	adds	x2, x2, #0x8
    9020:	cinc	x0, x0, cs  // cs = hs, nlast
    9024:	b	8fe4 <__multf3@@GCC_3.0+0x604>
    9028:	cbz	x1, 8fe4 <__multf3@@GCC_3.0+0x604>
    902c:	adds	x2, x2, #0x8
    9030:	cinc	x0, x0, cs  // cs = hs, nlast
    9034:	b	8fe4 <__multf3@@GCC_3.0+0x604>
    9038:	orr	x5, x5, x4
    903c:	cbz	x5, 9068 <__multf3@@GCC_3.0+0x688>
    9040:	orr	w8, w8, #0x10
    9044:	and	x13, x13, #0xc00000
    9048:	cmp	x13, #0x400, lsl #12
    904c:	b.eq	9078 <__multf3@@GCC_3.0+0x698>  // b.none
    9050:	cmp	x13, #0x800, lsl #12
    9054:	b.eq	9088 <__multf3@@GCC_3.0+0x6a8>  // b.none
    9058:	cmp	x13, #0x0
    905c:	mov	x5, #0x5                   	// #5
    9060:	csinc	x5, x5, xzr, eq  // eq = none
    9064:	lsr	x5, x5, #3
    9068:	orr	w8, w8, #0x8
    906c:	mov	x4, #0x0                   	// #0
    9070:	mov	x0, #0x0                   	// #0
    9074:	b	8ed4 <__multf3@@GCC_3.0+0x4f4>
    9078:	cmp	x1, #0x0
    907c:	mov	x5, #0x9                   	// #9
    9080:	csinc	x5, x5, xzr, eq  // eq = none
    9084:	b	9064 <__multf3@@GCC_3.0+0x684>
    9088:	cmp	x1, #0x0
    908c:	mov	x5, #0x9                   	// #9
    9090:	csinc	x5, x5, xzr, ne  // ne = any
    9094:	b	9064 <__multf3@@GCC_3.0+0x684>
    9098:	mov	x4, #0x0                   	// #0
    909c:	mov	x5, #0x0                   	// #0
    90a0:	mov	x9, #0x7fff                	// #32767
    90a4:	b	8ad4 <__multf3@@GCC_3.0+0xf4>
    90a8:	mov	x9, #0x0                   	// #0
    90ac:	b	8ad4 <__multf3@@GCC_3.0+0xf4>
    90b0:	mov	x9, x12
    90b4:	mov	x1, x11
    90b8:	add	x0, x9, #0x3, lsl #12
    90bc:	add	x0, x0, #0xfff
    90c0:	cmp	x0, #0x0
    90c4:	b.le	8f28 <__multf3@@GCC_3.0+0x548>
    90c8:	tst	x5, #0x7
    90cc:	b.eq	90ec <__multf3@@GCC_3.0+0x70c>  // b.none
    90d0:	orr	w8, w8, #0x10
    90d4:	and	x2, x13, #0xc00000
    90d8:	cmp	x2, #0x400, lsl #12
    90dc:	b.eq	8e84 <__multf3@@GCC_3.0+0x4a4>  // b.none
    90e0:	cmp	x2, #0x800, lsl #12
    90e4:	b.eq	8e94 <__multf3@@GCC_3.0+0x4b4>  // b.none
    90e8:	cbz	x2, 8e6c <__multf3@@GCC_3.0+0x48c>
    90ec:	tbz	x4, #52, 90f8 <__multf3@@GCC_3.0+0x718>
    90f0:	and	x4, x4, #0xffefffffffffffff
    90f4:	add	x0, x9, #0x4, lsl #12
    90f8:	mov	x2, #0x7ffe                	// #32766
    90fc:	cmp	x0, x2
    9100:	b.gt	8ea4 <__multf3@@GCC_3.0+0x4c4>
    9104:	extr	x5, x4, x5, #3
    9108:	lsr	x4, x4, #3
    910c:	mov	x9, x0
    9110:	b	8ad4 <__multf3@@GCC_3.0+0xf4>
    9114:	extr	x5, x0, x2, #3
    9118:	lsr	x4, x0, #3
    911c:	mov	x0, #0x0                   	// #0
    9120:	b	8ff8 <__multf3@@GCC_3.0+0x618>
    9124:	mov	x7, x10
    9128:	mov	x12, #0x0                   	// #0
    912c:	mov	x14, #0x1                   	// #1
    9130:	b	8a84 <__multf3@@GCC_3.0+0xa4>

0000000000009134 <__negtf2@@GCC_3.0>:
    9134:	sub	sp, sp, #0x10
    9138:	str	q0, [sp]
    913c:	ldr	x4, [sp]
    9140:	ldr	x2, [sp, #8]
    9144:	lsr	x3, x2, #63
    9148:	and	w3, w3, #0xff
    914c:	mov	x1, #0x0                   	// #0
    9150:	bfxil	x1, x2, #0, #48
    9154:	ubfx	x2, x2, #48, #15
    9158:	bfi	x1, x2, #48, #15
    915c:	eor	w2, w3, #0x1
    9160:	bfi	x1, x2, #63, #1
    9164:	fmov	d0, x4
    9168:	fmov	v0.d[1], x1
    916c:	add	sp, sp, #0x10
    9170:	ret

0000000000009174 <__subtf3@@GCC_3.0>:
    9174:	stp	x29, x30, [sp, #-32]!
    9178:	mov	x29, sp
    917c:	str	q0, [sp, #16]
    9180:	ldr	x3, [sp, #16]
    9184:	ldr	x1, [sp, #24]
    9188:	str	q1, [sp, #16]
    918c:	ldr	x6, [sp, #16]
    9190:	ldr	x0, [sp, #24]
    9194:	mrs	x9, fpcr
    9198:	mov	x14, x3
    919c:	ubfx	x4, x1, #48, #15
    91a0:	mov	x7, x4
    91a4:	lsr	x8, x1, #63
    91a8:	ubfiz	x1, x1, #3, #48
    91ac:	orr	x1, x1, x3, lsr #61
    91b0:	lsl	x3, x3, #3
    91b4:	ubfx	x11, x0, #48, #15
    91b8:	mov	x13, x11
    91bc:	lsr	x5, x0, #63
    91c0:	and	w5, w5, #0xff
    91c4:	ubfiz	x0, x0, #3, #48
    91c8:	orr	x2, x0, x6, lsr #61
    91cc:	lsl	x12, x6, #3
    91d0:	mov	x10, #0x7fff                	// #32767
    91d4:	cmp	x11, x10
    91d8:	b.eq	9230 <__subtf3@@GCC_3.0+0xbc>  // b.none
    91dc:	eor	w5, w5, #0x1
    91e0:	and	x10, x5, #0xff
    91e4:	cmp	x8, w5, uxtb
    91e8:	b.eq	9290 <__subtf3@@GCC_3.0+0x11c>  // b.none
    91ec:	sub	w0, w4, w11
    91f0:	cmp	w0, #0x0
    91f4:	b.le	9248 <__subtf3@@GCC_3.0+0xd4>
    91f8:	cbnz	x13, 96a8 <__subtf3@@GCC_3.0+0x534>
    91fc:	orr	x4, x2, x12
    9200:	cbz	x4, 9670 <__subtf3@@GCC_3.0+0x4fc>
    9204:	subs	w0, w0, #0x1
    9208:	b.eq	9698 <__subtf3@@GCC_3.0+0x524>  // b.none
    920c:	mov	x4, #0x7fff                	// #32767
    9210:	cmp	x7, x4
    9214:	b.ne	96b8 <__subtf3@@GCC_3.0+0x544>  // b.any
    9218:	orr	x0, x1, x3
    921c:	cbz	x0, 9dc0 <__subtf3@@GCC_3.0+0xc4c>
    9220:	lsr	x0, x1, #50
    9224:	eor	x0, x0, #0x1
    9228:	and	w0, w0, #0x1
    922c:	b	9c20 <__subtf3@@GCC_3.0+0xaac>
    9230:	orr	x0, x2, x12
    9234:	cbz	x0, 9e68 <__subtf3@@GCC_3.0+0xcf4>
    9238:	and	x10, x5, #0xff
    923c:	sub	w0, w4, w11
    9240:	cmp	x8, w5, uxtb
    9244:	b.eq	9cb0 <__subtf3@@GCC_3.0+0xb3c>  // b.none
    9248:	tbnz	w0, #31, 97b8 <__subtf3@@GCC_3.0+0x644>
    924c:	add	x0, x7, #0x1
    9250:	ands	x4, x0, #0x7ffe
    9254:	b.ne	9a48 <__subtf3@@GCC_3.0+0x8d4>  // b.any
    9258:	cbnz	x7, 995c <__subtf3@@GCC_3.0+0x7e8>
    925c:	orr	x0, x1, x3
    9260:	cbz	x0, 9924 <__subtf3@@GCC_3.0+0x7b0>
    9264:	orr	x0, x2, x12
    9268:	cbz	x0, 9e20 <__subtf3@@GCC_3.0+0xcac>
    926c:	sub	x0, x3, x12
    9270:	cmp	x3, x0
    9274:	sbc	x5, x1, x2
    9278:	tbz	x5, #51, 9940 <__subtf3@@GCC_3.0+0x7cc>
    927c:	sub	x4, x12, x3
    9280:	cmp	x12, x4
    9284:	sbc	x1, x2, x1
    9288:	mov	x8, x10
    928c:	b	9ae8 <__subtf3@@GCC_3.0+0x974>
    9290:	sub	w0, w4, w11
    9294:	cmp	w0, #0x0
    9298:	b.le	9cb8 <__subtf3@@GCC_3.0+0xb44>
    929c:	cbnz	x11, 9308 <__subtf3@@GCC_3.0+0x194>
    92a0:	orr	x4, x2, x12
    92a4:	cbz	x4, 92d4 <__subtf3@@GCC_3.0+0x160>
    92a8:	subs	w0, w0, #0x1
    92ac:	b.eq	92fc <__subtf3@@GCC_3.0+0x188>  // b.none
    92b0:	mov	x4, #0x7fff                	// #32767
    92b4:	cmp	x7, x4
    92b8:	b.ne	9318 <__subtf3@@GCC_3.0+0x1a4>  // b.any
    92bc:	orr	x0, x1, x3
    92c0:	cbz	x0, 9d0c <__subtf3@@GCC_3.0+0xb98>
    92c4:	lsr	x0, x1, #50
    92c8:	eor	x0, x0, #0x1
    92cc:	and	w0, w0, #0x1
    92d0:	b	9c20 <__subtf3@@GCC_3.0+0xaac>
    92d4:	mov	x4, x3
    92d8:	mov	x0, #0x7fff                	// #32767
    92dc:	cmp	x7, x0
    92e0:	b.ne	9ae4 <__subtf3@@GCC_3.0+0x970>  // b.any
    92e4:	orr	x0, x1, x3
    92e8:	cbz	x0, 9cfc <__subtf3@@GCC_3.0+0xb88>
    92ec:	lsr	x0, x1, #50
    92f0:	eor	x0, x0, #0x1
    92f4:	and	w0, w0, #0x1
    92f8:	b	9c20 <__subtf3@@GCC_3.0+0xaac>
    92fc:	adds	x4, x3, x12
    9300:	adc	x1, x2, x1
    9304:	b	9358 <__subtf3@@GCC_3.0+0x1e4>
    9308:	orr	x2, x2, #0x8000000000000
    930c:	mov	x4, #0x7fff                	// #32767
    9310:	cmp	x7, x4
    9314:	b.eq	9388 <__subtf3@@GCC_3.0+0x214>  // b.none
    9318:	cmp	w0, #0x74
    931c:	b.gt	9c6c <__subtf3@@GCC_3.0+0xaf8>
    9320:	cmp	w0, #0x3f
    9324:	b.gt	93a0 <__subtf3@@GCC_3.0+0x22c>
    9328:	mov	w5, #0x40                  	// #64
    932c:	sub	w5, w5, w0
    9330:	lsl	x4, x2, x5
    9334:	lsr	x6, x12, x0
    9338:	orr	x4, x4, x6
    933c:	lsl	x5, x12, x5
    9340:	cmp	x5, #0x0
    9344:	cset	x5, ne  // ne = any
    9348:	orr	x4, x4, x5
    934c:	lsr	x0, x2, x0
    9350:	adds	x4, x4, x3
    9354:	adc	x1, x0, x1
    9358:	tbz	x1, #51, 9ae4 <__subtf3@@GCC_3.0+0x970>
    935c:	add	x7, x7, #0x1
    9360:	mov	x0, #0x7fff                	// #32767
    9364:	cmp	x7, x0
    9368:	b.eq	9638 <__subtf3@@GCC_3.0+0x4c4>  // b.none
    936c:	and	x0, x1, #0xfff7ffffffffffff
    9370:	and	x3, x4, #0x1
    9374:	orr	x3, x3, x4, lsr #1
    9378:	orr	x3, x3, x1, lsl #63
    937c:	lsr	x1, x0, #1
    9380:	mov	w0, #0x0                   	// #0
    9384:	b	9c20 <__subtf3@@GCC_3.0+0xaac>
    9388:	orr	x0, x1, x3
    938c:	cbz	x0, 9d1c <__subtf3@@GCC_3.0+0xba8>
    9390:	lsr	x0, x1, #50
    9394:	eor	x0, x0, #0x1
    9398:	and	w0, w0, #0x1
    939c:	b	9c20 <__subtf3@@GCC_3.0+0xaac>
    93a0:	sub	w4, w0, #0x40
    93a4:	lsr	x4, x2, x4
    93a8:	mov	w5, #0x80                  	// #128
    93ac:	sub	w5, w5, w0
    93b0:	lsl	x2, x2, x5
    93b4:	cmp	w0, #0x40
    93b8:	csel	x0, x2, xzr, ne  // ne = any
    93bc:	orr	x12, x0, x12
    93c0:	cmp	x12, #0x0
    93c4:	cset	x0, ne  // ne = any
    93c8:	orr	x4, x4, x0
    93cc:	mov	x0, #0x0                   	// #0
    93d0:	b	9350 <__subtf3@@GCC_3.0+0x1dc>
    93d4:	cbnz	x7, 946c <__subtf3@@GCC_3.0+0x2f8>
    93d8:	orr	x4, x1, x3
    93dc:	cbz	x4, 941c <__subtf3@@GCC_3.0+0x2a8>
    93e0:	cmn	w0, #0x1
    93e4:	b.eq	945c <__subtf3@@GCC_3.0+0x2e8>  // b.none
    93e8:	mvn	w0, w0
    93ec:	mov	x4, #0x7fff                	// #32767
    93f0:	cmp	x13, x4
    93f4:	b.ne	9480 <__subtf3@@GCC_3.0+0x30c>  // b.any
    93f8:	orr	x3, x2, x12
    93fc:	cbz	x3, 9d38 <__subtf3@@GCC_3.0+0xbc4>
    9400:	lsr	x0, x2, #50
    9404:	eor	x0, x0, #0x1
    9408:	and	w0, w0, #0x1
    940c:	mov	x1, x2
    9410:	mov	x3, x12
    9414:	mov	x7, x13
    9418:	b	9c20 <__subtf3@@GCC_3.0+0xaac>
    941c:	mov	x0, #0x7fff                	// #32767
    9420:	cmp	x13, x0
    9424:	b.eq	9438 <__subtf3@@GCC_3.0+0x2c4>  // b.none
    9428:	mov	x1, x2
    942c:	mov	x4, x12
    9430:	mov	x7, x13
    9434:	b	9ae4 <__subtf3@@GCC_3.0+0x970>
    9438:	orr	x3, x2, x12
    943c:	cbz	x3, 9d2c <__subtf3@@GCC_3.0+0xbb8>
    9440:	lsr	x0, x2, #50
    9444:	eor	x0, x0, #0x1
    9448:	and	w0, w0, #0x1
    944c:	mov	x1, x2
    9450:	mov	x3, x12
    9454:	mov	x7, x13
    9458:	b	9c20 <__subtf3@@GCC_3.0+0xaac>
    945c:	adds	x4, x3, x12
    9460:	adc	x1, x2, x1
    9464:	mov	x7, x13
    9468:	b	9358 <__subtf3@@GCC_3.0+0x1e4>
    946c:	neg	w0, w0
    9470:	orr	x1, x1, #0x8000000000000
    9474:	mov	x4, #0x7fff                	// #32767
    9478:	cmp	x13, x4
    947c:	b.eq	94c8 <__subtf3@@GCC_3.0+0x354>  // b.none
    9480:	cmp	w0, #0x74
    9484:	b.gt	9c78 <__subtf3@@GCC_3.0+0xb04>
    9488:	cmp	w0, #0x3f
    948c:	b.gt	94ec <__subtf3@@GCC_3.0+0x378>
    9490:	mov	w5, #0x40                  	// #64
    9494:	sub	w5, w5, w0
    9498:	lsl	x4, x1, x5
    949c:	lsr	x6, x3, x0
    94a0:	orr	x4, x4, x6
    94a4:	lsl	x3, x3, x5
    94a8:	cmp	x3, #0x0
    94ac:	cset	x3, ne  // ne = any
    94b0:	orr	x4, x4, x3
    94b4:	lsr	x1, x1, x0
    94b8:	adds	x4, x4, x12
    94bc:	adc	x1, x1, x2
    94c0:	mov	x7, x13
    94c4:	b	9358 <__subtf3@@GCC_3.0+0x1e4>
    94c8:	orr	x3, x2, x12
    94cc:	cbz	x3, 9d44 <__subtf3@@GCC_3.0+0xbd0>
    94d0:	lsr	x0, x2, #50
    94d4:	eor	x0, x0, #0x1
    94d8:	and	w0, w0, #0x1
    94dc:	mov	x1, x2
    94e0:	mov	x3, x12
    94e4:	mov	x7, x13
    94e8:	b	9c20 <__subtf3@@GCC_3.0+0xaac>
    94ec:	sub	w4, w0, #0x40
    94f0:	lsr	x4, x1, x4
    94f4:	mov	w5, #0x80                  	// #128
    94f8:	sub	w5, w5, w0
    94fc:	lsl	x1, x1, x5
    9500:	cmp	w0, #0x40
    9504:	csel	x0, x1, xzr, ne  // ne = any
    9508:	orr	x3, x0, x3
    950c:	cmp	x3, #0x0
    9510:	cset	x0, ne  // ne = any
    9514:	orr	x4, x4, x0
    9518:	mov	x1, #0x0                   	// #0
    951c:	b	94b8 <__subtf3@@GCC_3.0+0x344>
    9520:	mov	x0, #0x7fff                	// #32767
    9524:	cmp	x7, x0
    9528:	b.eq	9588 <__subtf3@@GCC_3.0+0x414>  // b.none
    952c:	mov	w0, #0x0                   	// #0
    9530:	mov	x4, #0x7fff                	// #32767
    9534:	cmp	x13, x4
    9538:	b.eq	95a8 <__subtf3@@GCC_3.0+0x434>  // b.none
    953c:	orr	x4, x1, x3
    9540:	cbz	x4, 9c5c <__subtf3@@GCC_3.0+0xae8>
    9544:	orr	x12, x2, x12
    9548:	mov	x7, #0x7fff                	// #32767
    954c:	cbz	x12, 9c20 <__subtf3@@GCC_3.0+0xaac>
    9550:	mov	x3, x14
    9554:	bfi	x3, x1, #61, #3
    9558:	lsr	x4, x1, #3
    955c:	tbz	x1, #50, 9578 <__subtf3@@GCC_3.0+0x404>
    9560:	lsr	x1, x2, #3
    9564:	tbnz	x2, #50, 9578 <__subtf3@@GCC_3.0+0x404>
    9568:	mov	x3, x6
    956c:	bfi	x3, x2, #61, #3
    9570:	mov	x4, x1
    9574:	mov	x8, x10
    9578:	extr	x1, x4, x3, #61
    957c:	lsl	x3, x3, #3
    9580:	mov	x7, #0x7fff                	// #32767
    9584:	b	9c20 <__subtf3@@GCC_3.0+0xaac>
    9588:	orr	x0, x1, x3
    958c:	cbz	x0, 9e4c <__subtf3@@GCC_3.0+0xcd8>
    9590:	lsr	x0, x1, #50
    9594:	eor	x0, x0, #0x1
    9598:	and	w0, w0, #0x1
    959c:	mov	x4, #0x7fff                	// #32767
    95a0:	cmp	x13, x4
    95a4:	b.ne	9544 <__subtf3@@GCC_3.0+0x3d0>  // b.any
    95a8:	orr	x4, x2, x12
    95ac:	cbz	x4, 953c <__subtf3@@GCC_3.0+0x3c8>
    95b0:	tst	x2, #0x4000000000000
    95b4:	csinc	w0, w0, wzr, ne  // ne = any
    95b8:	orr	x3, x1, x3
    95bc:	cbnz	x3, 9550 <__subtf3@@GCC_3.0+0x3dc>
    95c0:	mov	x1, x2
    95c4:	mov	x3, x12
    95c8:	mov	x7, #0x7fff                	// #32767
    95cc:	b	9c20 <__subtf3@@GCC_3.0+0xaac>
    95d0:	mov	w0, #0x0                   	// #0
    95d4:	b	95a8 <__subtf3@@GCC_3.0+0x434>
    95d8:	mov	x4, #0x7fff                	// #32767
    95dc:	cmp	x0, x4
    95e0:	b.eq	9600 <__subtf3@@GCC_3.0+0x48c>  // b.none
    95e4:	adds	x3, x3, x12
    95e8:	adc	x1, x2, x1
    95ec:	extr	x3, x1, x3, #1
    95f0:	lsr	x1, x1, #1
    95f4:	mov	x7, x0
    95f8:	mov	w0, #0x0                   	// #0
    95fc:	b	9c20 <__subtf3@@GCC_3.0+0xaac>
    9600:	ands	x3, x9, #0xc00000
    9604:	b.eq	9d50 <__subtf3@@GCC_3.0+0xbdc>  // b.none
    9608:	cmp	x3, #0x400, lsl #12
    960c:	ccmp	x8, #0x0, #0x0, eq  // eq = none
    9610:	b.eq	9d5c <__subtf3@@GCC_3.0+0xbe8>  // b.none
    9614:	cmp	x3, #0x800, lsl #12
    9618:	ccmp	x8, #0x0, #0x4, eq  // eq = none
    961c:	b.ne	9d70 <__subtf3@@GCC_3.0+0xbfc>  // b.any
    9620:	mov	w4, #0x0                   	// #0
    9624:	mov	x1, #0xffffffffffffffff    	// #-1
    9628:	mov	x3, x1
    962c:	mov	x7, #0x7ffe                	// #32766
    9630:	mov	w0, #0x14                  	// #20
    9634:	b	9c2c <__subtf3@@GCC_3.0+0xab8>
    9638:	ands	x3, x9, #0xc00000
    963c:	b.eq	9d80 <__subtf3@@GCC_3.0+0xc0c>  // b.none
    9640:	cmp	x3, #0x400, lsl #12
    9644:	ccmp	x8, #0x0, #0x0, eq  // eq = none
    9648:	b.eq	9d8c <__subtf3@@GCC_3.0+0xc18>  // b.none
    964c:	cmp	x3, #0x800, lsl #12
    9650:	ccmp	x8, #0x0, #0x4, eq  // eq = none
    9654:	b.ne	9da0 <__subtf3@@GCC_3.0+0xc2c>  // b.any
    9658:	mov	w4, #0x0                   	// #0
    965c:	mov	x1, #0xffffffffffffffff    	// #-1
    9660:	mov	x3, x1
    9664:	mov	x7, #0x7ffe                	// #32766
    9668:	mov	w0, #0x14                  	// #20
    966c:	b	9c2c <__subtf3@@GCC_3.0+0xab8>
    9670:	mov	x4, x3
    9674:	mov	x0, #0x7fff                	// #32767
    9678:	cmp	x7, x0
    967c:	b.ne	9ae4 <__subtf3@@GCC_3.0+0x970>  // b.any
    9680:	orr	x0, x1, x3
    9684:	cbz	x0, 9db0 <__subtf3@@GCC_3.0+0xc3c>
    9688:	lsr	x0, x1, #50
    968c:	eor	x0, x0, #0x1
    9690:	and	w0, w0, #0x1
    9694:	b	9c20 <__subtf3@@GCC_3.0+0xaac>
    9698:	sub	x4, x3, x12
    969c:	cmp	x3, x4
    96a0:	sbc	x1, x1, x2
    96a4:	b	96fc <__subtf3@@GCC_3.0+0x588>
    96a8:	orr	x2, x2, #0x8000000000000
    96ac:	mov	x4, #0x7fff                	// #32767
    96b0:	cmp	x7, x4
    96b4:	b.eq	976c <__subtf3@@GCC_3.0+0x5f8>  // b.none
    96b8:	cmp	w0, #0x74
    96bc:	b.gt	9c84 <__subtf3@@GCC_3.0+0xb10>
    96c0:	cmp	w0, #0x3f
    96c4:	b.gt	9784 <__subtf3@@GCC_3.0+0x610>
    96c8:	mov	w5, #0x40                  	// #64
    96cc:	sub	w5, w5, w0
    96d0:	lsl	x4, x2, x5
    96d4:	lsr	x6, x12, x0
    96d8:	orr	x4, x4, x6
    96dc:	lsl	x12, x12, x5
    96e0:	cmp	x12, #0x0
    96e4:	cset	x5, ne  // ne = any
    96e8:	orr	x4, x4, x5
    96ec:	lsr	x0, x2, x0
    96f0:	sub	x4, x3, x4
    96f4:	cmp	x3, x4
    96f8:	sbc	x1, x1, x0
    96fc:	tbz	x1, #51, 9ae4 <__subtf3@@GCC_3.0+0x970>
    9700:	and	x5, x1, #0x7ffffffffffff
    9704:	cbz	x5, 9a88 <__subtf3@@GCC_3.0+0x914>
    9708:	clz	x0, x5
    970c:	sub	w0, w0, #0xc
    9710:	lsl	x5, x5, x0
    9714:	neg	w1, w0
    9718:	lsr	x1, x4, x1
    971c:	orr	x1, x1, x5
    9720:	lsl	x5, x4, x0
    9724:	sxtw	x2, w0
    9728:	cmp	x7, w0, sxtw
    972c:	b.gt	9ad8 <__subtf3@@GCC_3.0+0x964>
    9730:	sub	w7, w0, w7
    9734:	add	w6, w7, #0x1
    9738:	cmp	w6, #0x3f
    973c:	b.gt	9aa4 <__subtf3@@GCC_3.0+0x930>
    9740:	mov	w0, #0x40                  	// #64
    9744:	sub	w0, w0, w6
    9748:	lsl	x4, x1, x0
    974c:	lsr	x2, x5, x6
    9750:	orr	x4, x4, x2
    9754:	lsl	x5, x5, x0
    9758:	cmp	x5, #0x0
    975c:	cset	x3, ne  // ne = any
    9760:	orr	x4, x4, x3
    9764:	lsr	x1, x1, x6
    9768:	b	9ae8 <__subtf3@@GCC_3.0+0x974>
    976c:	orr	x0, x1, x3
    9770:	cbz	x0, 9dd0 <__subtf3@@GCC_3.0+0xc5c>
    9774:	lsr	x0, x1, #50
    9778:	eor	x0, x0, #0x1
    977c:	and	w0, w0, #0x1
    9780:	b	9c20 <__subtf3@@GCC_3.0+0xaac>
    9784:	sub	w4, w0, #0x40
    9788:	lsr	x4, x2, x4
    978c:	mov	w5, #0x80                  	// #128
    9790:	sub	w5, w5, w0
    9794:	lsl	x2, x2, x5
    9798:	cmp	w0, #0x40
    979c:	csel	x2, x2, xzr, ne  // ne = any
    97a0:	orr	x12, x2, x12
    97a4:	cmp	x12, #0x0
    97a8:	cset	x0, ne  // ne = any
    97ac:	orr	x4, x4, x0
    97b0:	mov	x0, #0x0                   	// #0
    97b4:	b	96f0 <__subtf3@@GCC_3.0+0x57c>
    97b8:	cbnz	x7, 9864 <__subtf3@@GCC_3.0+0x6f0>
    97bc:	orr	x4, x1, x3
    97c0:	cbz	x4, 9804 <__subtf3@@GCC_3.0+0x690>
    97c4:	cmn	w0, #0x1
    97c8:	b.eq	984c <__subtf3@@GCC_3.0+0x6d8>  // b.none
    97cc:	mvn	w0, w0
    97d0:	mov	x4, #0x7fff                	// #32767
    97d4:	cmp	x13, x4
    97d8:	b.ne	9878 <__subtf3@@GCC_3.0+0x704>  // b.any
    97dc:	orr	x3, x2, x12
    97e0:	cbz	x3, 9df4 <__subtf3@@GCC_3.0+0xc80>
    97e4:	lsr	x0, x2, #50
    97e8:	eor	x0, x0, #0x1
    97ec:	and	w0, w0, #0x1
    97f0:	mov	x1, x2
    97f4:	mov	x3, x12
    97f8:	mov	x7, x13
    97fc:	mov	x8, x10
    9800:	b	9c20 <__subtf3@@GCC_3.0+0xaac>
    9804:	mov	x0, #0x7fff                	// #32767
    9808:	cmp	x13, x0
    980c:	b.eq	9824 <__subtf3@@GCC_3.0+0x6b0>  // b.none
    9810:	mov	x1, x2
    9814:	mov	x4, x12
    9818:	mov	x7, x13
    981c:	mov	x8, x10
    9820:	b	9ae4 <__subtf3@@GCC_3.0+0x970>
    9824:	orr	x3, x2, x12
    9828:	cbz	x3, 9de4 <__subtf3@@GCC_3.0+0xc70>
    982c:	lsr	x0, x2, #50
    9830:	eor	x0, x0, #0x1
    9834:	and	w0, w0, #0x1
    9838:	mov	x1, x2
    983c:	mov	x3, x12
    9840:	mov	x7, x13
    9844:	mov	x8, x10
    9848:	b	9c20 <__subtf3@@GCC_3.0+0xaac>
    984c:	sub	x4, x12, x3
    9850:	cmp	x12, x4
    9854:	sbc	x1, x2, x1
    9858:	mov	x7, x13
    985c:	mov	x8, x10
    9860:	b	96fc <__subtf3@@GCC_3.0+0x588>
    9864:	neg	w0, w0
    9868:	orr	x1, x1, #0x8000000000000
    986c:	mov	x4, #0x7fff                	// #32767
    9870:	cmp	x13, x4
    9874:	b.eq	98c8 <__subtf3@@GCC_3.0+0x754>  // b.none
    9878:	cmp	w0, #0x74
    987c:	b.gt	9c90 <__subtf3@@GCC_3.0+0xb1c>
    9880:	cmp	w0, #0x3f
    9884:	b.gt	98f0 <__subtf3@@GCC_3.0+0x77c>
    9888:	mov	w5, #0x40                  	// #64
    988c:	sub	w5, w5, w0
    9890:	lsl	x4, x1, x5
    9894:	lsr	x6, x3, x0
    9898:	orr	x4, x4, x6
    989c:	lsl	x3, x3, x5
    98a0:	cmp	x3, #0x0
    98a4:	cset	x3, ne  // ne = any
    98a8:	orr	x4, x4, x3
    98ac:	lsr	x1, x1, x0
    98b0:	sub	x4, x12, x4
    98b4:	cmp	x12, x4
    98b8:	sbc	x1, x2, x1
    98bc:	mov	x7, x13
    98c0:	mov	x8, x10
    98c4:	b	96fc <__subtf3@@GCC_3.0+0x588>
    98c8:	orr	x3, x2, x12
    98cc:	cbz	x3, 9e04 <__subtf3@@GCC_3.0+0xc90>
    98d0:	lsr	x0, x2, #50
    98d4:	eor	x0, x0, #0x1
    98d8:	and	w0, w0, #0x1
    98dc:	mov	x1, x2
    98e0:	mov	x3, x12
    98e4:	mov	x7, x13
    98e8:	mov	x8, x10
    98ec:	b	9c20 <__subtf3@@GCC_3.0+0xaac>
    98f0:	sub	w4, w0, #0x40
    98f4:	lsr	x4, x1, x4
    98f8:	mov	w5, #0x80                  	// #128
    98fc:	sub	w5, w5, w0
    9900:	lsl	x1, x1, x5
    9904:	cmp	w0, #0x40
    9908:	csel	x0, x1, xzr, ne  // ne = any
    990c:	orr	x3, x0, x3
    9910:	cmp	x3, #0x0
    9914:	cset	x0, ne  // ne = any
    9918:	orr	x4, x4, x0
    991c:	mov	x1, #0x0                   	// #0
    9920:	b	98b0 <__subtf3@@GCC_3.0+0x73c>
    9924:	orr	x4, x2, x12
    9928:	cbnz	x4, 9e14 <__subtf3@@GCC_3.0+0xca0>
    992c:	and	x0, x9, #0xc00000
    9930:	cmp	x0, #0x800, lsl #12
    9934:	cset	x8, eq  // eq = none
    9938:	mov	x1, x4
    993c:	b	9ae8 <__subtf3@@GCC_3.0+0x974>
    9940:	orr	x4, x0, x5
    9944:	cbnz	x4, 9e40 <__subtf3@@GCC_3.0+0xccc>
    9948:	and	x0, x9, #0xc00000
    994c:	cmp	x0, #0x800, lsl #12
    9950:	cset	x8, eq  // eq = none
    9954:	mov	x1, x4
    9958:	b	9ae8 <__subtf3@@GCC_3.0+0x974>
    995c:	mov	x0, #0x7fff                	// #32767
    9960:	cmp	x7, x0
    9964:	b.eq	999c <__subtf3@@GCC_3.0+0x828>  // b.none
    9968:	mov	w0, #0x0                   	// #0
    996c:	mov	x5, #0x7fff                	// #32767
    9970:	cmp	x13, x5
    9974:	b.eq	99f0 <__subtf3@@GCC_3.0+0x87c>  // b.none
    9978:	orr	x5, x1, x3
    997c:	cbnz	x5, 99bc <__subtf3@@GCC_3.0+0x848>
    9980:	orr	x1, x2, x12
    9984:	cbnz	x1, 9a1c <__subtf3@@GCC_3.0+0x8a8>
    9988:	mov	x8, x4
    998c:	mov	x1, #0x7ffffffffffff       	// #2251799813685247
    9990:	mov	x3, #0xfffffffffffffff8    	// #-8
    9994:	mov	w0, #0x1                   	// #1
    9998:	b	9ddc <__subtf3@@GCC_3.0+0xc68>
    999c:	orr	x0, x1, x3
    99a0:	cbz	x0, 9c9c <__subtf3@@GCC_3.0+0xb28>
    99a4:	lsr	x0, x1, #50
    99a8:	eor	x0, x0, #0x1
    99ac:	and	w0, w0, #0x1
    99b0:	mov	x5, #0x7fff                	// #32767
    99b4:	cmp	x13, x5
    99b8:	b.eq	99f0 <__subtf3@@GCC_3.0+0x87c>  // b.none
    99bc:	orr	x12, x2, x12
    99c0:	mov	x7, #0x7fff                	// #32767
    99c4:	cbz	x12, 9c20 <__subtf3@@GCC_3.0+0xaac>
    99c8:	lsr	x4, x1, #3
    99cc:	tbz	x1, #50, 9a30 <__subtf3@@GCC_3.0+0x8bc>
    99d0:	lsr	x5, x2, #3
    99d4:	tbnz	x2, #50, 9a30 <__subtf3@@GCC_3.0+0x8bc>
    99d8:	mov	x3, x6
    99dc:	bfi	x3, x2, #61, #3
    99e0:	mov	x4, x5
    99e4:	mov	x8, x10
    99e8:	b	9a38 <__subtf3@@GCC_3.0+0x8c4>
    99ec:	mov	w0, #0x0                   	// #0
    99f0:	orr	x5, x2, x12
    99f4:	cbz	x5, 9978 <__subtf3@@GCC_3.0+0x804>
    99f8:	tst	x2, #0x4000000000000
    99fc:	csinc	w0, w0, wzr, ne  // ne = any
    9a00:	orr	x4, x1, x3
    9a04:	cbnz	x4, 99bc <__subtf3@@GCC_3.0+0x848>
    9a08:	mov	x1, x2
    9a0c:	mov	x3, x12
    9a10:	mov	x8, x10
    9a14:	mov	x7, #0x7fff                	// #32767
    9a18:	b	9c20 <__subtf3@@GCC_3.0+0xaac>
    9a1c:	mov	x1, x2
    9a20:	mov	x3, x12
    9a24:	mov	x8, x10
    9a28:	mov	x7, #0x7fff                	// #32767
    9a2c:	b	9c20 <__subtf3@@GCC_3.0+0xaac>
    9a30:	mov	x3, x14
    9a34:	bfi	x3, x1, #61, #3
    9a38:	extr	x1, x4, x3, #61
    9a3c:	lsl	x3, x3, #3
    9a40:	mov	x7, #0x7fff                	// #32767
    9a44:	b	9c20 <__subtf3@@GCC_3.0+0xaac>
    9a48:	sub	x4, x3, x12
    9a4c:	cmp	x3, x4
    9a50:	sbc	x5, x1, x2
    9a54:	tbnz	x5, #51, 9a74 <__subtf3@@GCC_3.0+0x900>
    9a58:	orr	x1, x4, x5
    9a5c:	cbnz	x1, 9704 <__subtf3@@GCC_3.0+0x590>
    9a60:	and	x0, x9, #0xc00000
    9a64:	cmp	x0, #0x800, lsl #12
    9a68:	cset	x8, eq  // eq = none
    9a6c:	mov	x4, x1
    9a70:	b	9ae8 <__subtf3@@GCC_3.0+0x974>
    9a74:	sub	x4, x12, x3
    9a78:	cmp	x12, x4
    9a7c:	sbc	x5, x2, x1
    9a80:	mov	x8, x10
    9a84:	b	9704 <__subtf3@@GCC_3.0+0x590>
    9a88:	clz	x1, x4
    9a8c:	add	w0, w1, #0x34
    9a90:	cmp	w0, #0x3f
    9a94:	b.le	9710 <__subtf3@@GCC_3.0+0x59c>
    9a98:	sub	w1, w1, #0xc
    9a9c:	lsl	x1, x4, x1
    9aa0:	b	9724 <__subtf3@@GCC_3.0+0x5b0>
    9aa4:	sub	w7, w7, #0x3f
    9aa8:	lsr	x0, x1, x7
    9aac:	mov	w2, #0x80                  	// #128
    9ab0:	sub	w2, w2, w6
    9ab4:	lsl	x1, x1, x2
    9ab8:	cmp	w6, #0x40
    9abc:	csel	x2, x1, xzr, ne  // ne = any
    9ac0:	orr	x2, x5, x2
    9ac4:	cmp	x2, #0x0
    9ac8:	cset	x4, ne  // ne = any
    9acc:	orr	x4, x0, x4
    9ad0:	mov	x1, #0x0                   	// #0
    9ad4:	b	9ae8 <__subtf3@@GCC_3.0+0x974>
    9ad8:	sub	x7, x7, x2
    9adc:	and	x1, x1, #0xfff7ffffffffffff
    9ae0:	mov	x4, x5
    9ae4:	cbnz	x7, 9c18 <__subtf3@@GCC_3.0+0xaa4>
    9ae8:	orr	x3, x4, x1
    9aec:	cbnz	x3, 9e24 <__subtf3@@GCC_3.0+0xcb0>
    9af0:	mov	x1, x3
    9af4:	mov	x7, #0x0                   	// #0
    9af8:	mov	w0, #0x0                   	// #0
    9afc:	b	9b30 <__subtf3@@GCC_3.0+0x9bc>
    9b00:	mov	x3, x4
    9b04:	mov	w4, #0x1                   	// #1
    9b08:	mov	x7, #0x0                   	// #0
    9b0c:	mov	w0, #0x0                   	// #0
    9b10:	b	9c2c <__subtf3@@GCC_3.0+0xab8>
    9b14:	and	x2, x3, #0xf
    9b18:	cmp	x2, #0x4
    9b1c:	b.eq	9b28 <__subtf3@@GCC_3.0+0x9b4>  // b.none
    9b20:	adds	x3, x3, #0x4
    9b24:	cinc	x1, x1, cs  // cs = hs, nlast
    9b28:	cbz	w4, 9b30 <__subtf3@@GCC_3.0+0x9bc>
    9b2c:	orr	w0, w0, #0x8
    9b30:	tbz	x1, #51, 9bdc <__subtf3@@GCC_3.0+0xa68>
    9b34:	add	x7, x7, #0x1
    9b38:	mov	x2, #0x7fff                	// #32767
    9b3c:	cmp	x7, x2
    9b40:	b.eq	9ba8 <__subtf3@@GCC_3.0+0xa34>  // b.none
    9b44:	and	x2, x1, #0xfff7ffffffffffff
    9b48:	extr	x4, x1, x3, #3
    9b4c:	lsr	x1, x2, #3
    9b50:	mov	x3, #0x0                   	// #0
    9b54:	mov	x2, x4
    9b58:	bfxil	x3, x1, #0, #48
    9b5c:	bfi	x3, x7, #48, #15
    9b60:	bfi	x3, x8, #63, #1
    9b64:	stp	x2, x3, [sp, #16]
    9b68:	cbnz	w0, 9c10 <__subtf3@@GCC_3.0+0xa9c>
    9b6c:	ldr	q0, [sp, #16]
    9b70:	ldp	x29, x30, [sp], #32
    9b74:	ret
    9b78:	cbnz	x8, 9b28 <__subtf3@@GCC_3.0+0x9b4>
    9b7c:	adds	x3, x3, #0x8
    9b80:	cinc	x1, x1, cs  // cs = hs, nlast
    9b84:	b	9b28 <__subtf3@@GCC_3.0+0x9b4>
    9b88:	cbz	x8, 9b28 <__subtf3@@GCC_3.0+0x9b4>
    9b8c:	adds	x3, x3, #0x8
    9b90:	cinc	x1, x1, cs  // cs = hs, nlast
    9b94:	b	9b28 <__subtf3@@GCC_3.0+0x9b4>
    9b98:	mov	x3, x4
    9b9c:	mov	x7, #0x0                   	// #0
    9ba0:	mov	w0, #0x0                   	// #0
    9ba4:	b	9b2c <__subtf3@@GCC_3.0+0x9b8>
    9ba8:	ands	x3, x9, #0xc00000
    9bac:	b.eq	9bd0 <__subtf3@@GCC_3.0+0xa5c>  // b.none
    9bb0:	cmp	x3, #0x400, lsl #12
    9bb4:	ccmp	x8, #0x0, #0x0, eq  // eq = none
    9bb8:	b.eq	9c08 <__subtf3@@GCC_3.0+0xa94>  // b.none
    9bbc:	cmp	x3, #0x800, lsl #12
    9bc0:	ccmp	x8, #0x0, #0x4, eq  // eq = none
    9bc4:	csetm	x3, eq  // eq = none
    9bc8:	mov	x1, #0x7ffe                	// #32766
    9bcc:	csel	x7, x7, x1, ne  // ne = any
    9bd0:	mov	w1, #0x14                  	// #20
    9bd4:	orr	w0, w0, w1
    9bd8:	mov	x1, x3
    9bdc:	extr	x4, x1, x3, #3
    9be0:	lsr	x1, x1, #3
    9be4:	mov	x2, #0x7fff                	// #32767
    9be8:	cmp	x7, x2
    9bec:	b.ne	9b50 <__subtf3@@GCC_3.0+0x9dc>  // b.any
    9bf0:	orr	x2, x4, x1
    9bf4:	orr	x1, x1, #0x800000000000
    9bf8:	cbnz	x2, 9b50 <__subtf3@@GCC_3.0+0x9dc>
    9bfc:	mov	x4, x2
    9c00:	mov	x1, x2
    9c04:	b	9b50 <__subtf3@@GCC_3.0+0x9dc>
    9c08:	mov	x3, #0x0                   	// #0
    9c0c:	b	9bd0 <__subtf3@@GCC_3.0+0xa5c>
    9c10:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    9c14:	b	9b6c <__subtf3@@GCC_3.0+0x9f8>
    9c18:	mov	x3, x4
    9c1c:	mov	w0, #0x0                   	// #0
    9c20:	mov	w4, #0x0                   	// #0
    9c24:	tst	x3, #0x7
    9c28:	b.eq	9b30 <__subtf3@@GCC_3.0+0x9bc>  // b.none
    9c2c:	orr	w0, w0, #0x10
    9c30:	and	x2, x9, #0xc00000
    9c34:	cmp	x2, #0x400, lsl #12
    9c38:	b.eq	9b78 <__subtf3@@GCC_3.0+0xa04>  // b.none
    9c3c:	cmp	x2, #0x800, lsl #12
    9c40:	b.eq	9b88 <__subtf3@@GCC_3.0+0xa14>  // b.none
    9c44:	cbz	x2, 9b14 <__subtf3@@GCC_3.0+0x9a0>
    9c48:	cbnz	w4, 9b2c <__subtf3@@GCC_3.0+0x9b8>
    9c4c:	b	9b30 <__subtf3@@GCC_3.0+0x9bc>
    9c50:	mov	x1, x2
    9c54:	mov	x4, x12
    9c58:	b	9ae8 <__subtf3@@GCC_3.0+0x974>
    9c5c:	mov	x1, x2
    9c60:	mov	x3, x12
    9c64:	mov	x7, #0x7fff                	// #32767
    9c68:	b	9c20 <__subtf3@@GCC_3.0+0xaac>
    9c6c:	mov	x0, #0x0                   	// #0
    9c70:	mov	x4, #0x1                   	// #1
    9c74:	b	9350 <__subtf3@@GCC_3.0+0x1dc>
    9c78:	mov	x1, #0x0                   	// #0
    9c7c:	mov	x4, #0x1                   	// #1
    9c80:	b	94b8 <__subtf3@@GCC_3.0+0x344>
    9c84:	mov	x0, #0x0                   	// #0
    9c88:	mov	x4, #0x1                   	// #1
    9c8c:	b	96f0 <__subtf3@@GCC_3.0+0x57c>
    9c90:	mov	x1, #0x0                   	// #0
    9c94:	mov	x4, #0x1                   	// #1
    9c98:	b	98b0 <__subtf3@@GCC_3.0+0x73c>
    9c9c:	mov	x0, #0x7fff                	// #32767
    9ca0:	cmp	x13, x0
    9ca4:	b.eq	99ec <__subtf3@@GCC_3.0+0x878>  // b.none
    9ca8:	mov	w0, #0x0                   	// #0
    9cac:	b	9980 <__subtf3@@GCC_3.0+0x80c>
    9cb0:	sub	w0, w4, #0x7, lsl #12
    9cb4:	sub	w0, w0, #0xfff
    9cb8:	tbnz	w0, #31, 93d4 <__subtf3@@GCC_3.0+0x260>
    9cbc:	add	x0, x7, #0x1
    9cc0:	tst	x0, #0x7ffe
    9cc4:	b.ne	95d8 <__subtf3@@GCC_3.0+0x464>  // b.any
    9cc8:	cbnz	x7, 9520 <__subtf3@@GCC_3.0+0x3ac>
    9ccc:	orr	x0, x1, x3
    9cd0:	cbz	x0, 9c50 <__subtf3@@GCC_3.0+0xadc>
    9cd4:	orr	x0, x2, x12
    9cd8:	cbz	x0, 9e20 <__subtf3@@GCC_3.0+0xcac>
    9cdc:	adds	x4, x3, x12
    9ce0:	adc	x1, x2, x1
    9ce4:	tbz	x1, #51, 9ae8 <__subtf3@@GCC_3.0+0x974>
    9ce8:	and	x1, x1, #0xfff7ffffffffffff
    9cec:	mov	x3, x4
    9cf0:	mov	x7, #0x1                   	// #1
    9cf4:	mov	w0, #0x0                   	// #0
    9cf8:	b	9c20 <__subtf3@@GCC_3.0+0xaac>
    9cfc:	mov	x1, x0
    9d00:	mov	x3, x0
    9d04:	mov	w0, #0x0                   	// #0
    9d08:	b	9ddc <__subtf3@@GCC_3.0+0xc68>
    9d0c:	mov	x1, x0
    9d10:	mov	x3, x0
    9d14:	mov	w0, #0x0                   	// #0
    9d18:	b	9ddc <__subtf3@@GCC_3.0+0xc68>
    9d1c:	mov	x1, x0
    9d20:	mov	x3, x0
    9d24:	mov	w0, #0x0                   	// #0
    9d28:	b	9ddc <__subtf3@@GCC_3.0+0xc68>
    9d2c:	mov	x1, x3
    9d30:	mov	w0, #0x0                   	// #0
    9d34:	b	9ddc <__subtf3@@GCC_3.0+0xc68>
    9d38:	mov	x1, x3
    9d3c:	mov	w0, #0x0                   	// #0
    9d40:	b	9ddc <__subtf3@@GCC_3.0+0xc68>
    9d44:	mov	x1, x3
    9d48:	mov	w0, #0x0                   	// #0
    9d4c:	b	9ddc <__subtf3@@GCC_3.0+0xc68>
    9d50:	mov	x1, x3
    9d54:	mov	w0, #0x14                  	// #20
    9d58:	b	9ddc <__subtf3@@GCC_3.0+0xc68>
    9d5c:	mov	x1, #0x0                   	// #0
    9d60:	mov	x3, #0x0                   	// #0
    9d64:	mov	x8, #0x0                   	// #0
    9d68:	mov	w0, #0x14                  	// #20
    9d6c:	b	9ddc <__subtf3@@GCC_3.0+0xc68>
    9d70:	mov	x1, #0x0                   	// #0
    9d74:	mov	x3, #0x0                   	// #0
    9d78:	mov	w0, #0x14                  	// #20
    9d7c:	b	9ddc <__subtf3@@GCC_3.0+0xc68>
    9d80:	mov	x1, x3
    9d84:	mov	w0, #0x14                  	// #20
    9d88:	b	9ddc <__subtf3@@GCC_3.0+0xc68>
    9d8c:	mov	x1, #0x0                   	// #0
    9d90:	mov	x3, #0x0                   	// #0
    9d94:	mov	x8, #0x0                   	// #0
    9d98:	mov	w0, #0x14                  	// #20
    9d9c:	b	9ddc <__subtf3@@GCC_3.0+0xc68>
    9da0:	mov	x1, #0x0                   	// #0
    9da4:	mov	x3, #0x0                   	// #0
    9da8:	mov	w0, #0x14                  	// #20
    9dac:	b	9ddc <__subtf3@@GCC_3.0+0xc68>
    9db0:	mov	x1, x0
    9db4:	mov	x3, x0
    9db8:	mov	w0, #0x0                   	// #0
    9dbc:	b	9ddc <__subtf3@@GCC_3.0+0xc68>
    9dc0:	mov	x1, x0
    9dc4:	mov	x3, x0
    9dc8:	mov	w0, #0x0                   	// #0
    9dcc:	b	9ddc <__subtf3@@GCC_3.0+0xc68>
    9dd0:	mov	x1, x0
    9dd4:	mov	x3, x0
    9dd8:	mov	w0, #0x0                   	// #0
    9ddc:	mov	x7, #0x7fff                	// #32767
    9de0:	b	9b30 <__subtf3@@GCC_3.0+0x9bc>
    9de4:	mov	x1, x3
    9de8:	mov	x8, x10
    9dec:	mov	w0, #0x0                   	// #0
    9df0:	b	9ddc <__subtf3@@GCC_3.0+0xc68>
    9df4:	mov	x1, x3
    9df8:	mov	x8, x10
    9dfc:	mov	w0, #0x0                   	// #0
    9e00:	b	9ddc <__subtf3@@GCC_3.0+0xc68>
    9e04:	mov	x1, x3
    9e08:	mov	x8, x10
    9e0c:	mov	w0, #0x0                   	// #0
    9e10:	b	9ddc <__subtf3@@GCC_3.0+0xc68>
    9e14:	mov	x1, x2
    9e18:	mov	x3, x12
    9e1c:	mov	x8, x10
    9e20:	mov	x4, x3
    9e24:	tst	x4, #0x7
    9e28:	b.ne	9b00 <__subtf3@@GCC_3.0+0x98c>  // b.any
    9e2c:	tbnz	w9, #11, 9b98 <__subtf3@@GCC_3.0+0xa24>
    9e30:	mov	x3, x4
    9e34:	mov	x7, #0x0                   	// #0
    9e38:	mov	w0, #0x0                   	// #0
    9e3c:	b	9b30 <__subtf3@@GCC_3.0+0x9bc>
    9e40:	mov	x1, x5
    9e44:	mov	x3, x0
    9e48:	b	9e20 <__subtf3@@GCC_3.0+0xcac>
    9e4c:	mov	x0, #0x7fff                	// #32767
    9e50:	cmp	x13, x0
    9e54:	b.eq	95d0 <__subtf3@@GCC_3.0+0x45c>  // b.none
    9e58:	mov	x1, x2
    9e5c:	mov	x3, x12
    9e60:	mov	w0, #0x0                   	// #0
    9e64:	b	9c20 <__subtf3@@GCC_3.0+0xaac>
    9e68:	eor	w5, w5, #0x1
    9e6c:	and	x10, x5, #0xff
    9e70:	cmp	x8, w5, uxtb
    9e74:	b.ne	91ec <__subtf3@@GCC_3.0+0x78>  // b.any
    9e78:	sub	w0, w4, w11
    9e7c:	b	9cb8 <__subtf3@@GCC_3.0+0xb44>

0000000000009e80 <__unordtf2@@GCC_4.5.0>:
    9e80:	stp	x29, x30, [sp, #-32]!
    9e84:	mov	x29, sp
    9e88:	str	q0, [sp, #16]
    9e8c:	ldr	x1, [sp, #16]
    9e90:	ldr	x0, [sp, #24]
    9e94:	str	q1, [sp, #16]
    9e98:	ldr	x3, [sp, #16]
    9e9c:	ldr	x2, [sp, #24]
    9ea0:	mrs	x4, fpcr
    9ea4:	mov	x4, x1
    9ea8:	ubfx	x7, x0, #0, #48
    9eac:	ubfx	x1, x0, #48, #15
    9eb0:	ubfx	x6, x2, #0, #48
    9eb4:	ubfx	x2, x2, #48, #15
    9eb8:	mov	x0, #0x7fff                	// #32767
    9ebc:	cmp	x1, x0
    9ec0:	b.eq	9edc <__unordtf2@@GCC_4.5.0+0x5c>  // b.none
    9ec4:	mov	w0, #0x0                   	// #0
    9ec8:	mov	x5, #0x7fff                	// #32767
    9ecc:	cmp	x2, x5
    9ed0:	b.eq	9f0c <__unordtf2@@GCC_4.5.0+0x8c>  // b.none
    9ed4:	ldp	x29, x30, [sp], #32
    9ed8:	ret
    9edc:	orr	x0, x7, x4
    9ee0:	cbz	x0, 9ec4 <__unordtf2@@GCC_4.5.0+0x44>
    9ee4:	tst	x7, #0x800000000000
    9ee8:	b.eq	9f28 <__unordtf2@@GCC_4.5.0+0xa8>  // b.none
    9eec:	mov	w0, #0x1                   	// #1
    9ef0:	mov	x1, #0x7fff                	// #32767
    9ef4:	cmp	x2, x1
    9ef8:	b.ne	9ed4 <__unordtf2@@GCC_4.5.0+0x54>  // b.any
    9efc:	orr	x3, x3, x6
    9f00:	mov	w0, #0x1                   	// #1
    9f04:	cbz	x3, 9ed4 <__unordtf2@@GCC_4.5.0+0x54>
    9f08:	b	9f20 <__unordtf2@@GCC_4.5.0+0xa0>
    9f0c:	orr	x0, x3, x6
    9f10:	cbz	x0, 9ed4 <__unordtf2@@GCC_4.5.0+0x54>
    9f14:	mov	x0, #0x7fff                	// #32767
    9f18:	cmp	x1, x0
    9f1c:	b.eq	9f40 <__unordtf2@@GCC_4.5.0+0xc0>  // b.none
    9f20:	tst	x6, #0x800000000000
    9f24:	b.ne	9f38 <__unordtf2@@GCC_4.5.0+0xb8>  // b.any
    9f28:	mov	w0, #0x1                   	// #1
    9f2c:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    9f30:	mov	w0, #0x1                   	// #1
    9f34:	b	9ed4 <__unordtf2@@GCC_4.5.0+0x54>
    9f38:	mov	w0, #0x1                   	// #1
    9f3c:	b	9ed4 <__unordtf2@@GCC_4.5.0+0x54>
    9f40:	orr	x1, x7, x4
    9f44:	cbz	x1, 9efc <__unordtf2@@GCC_4.5.0+0x7c>
    9f48:	b	9ee4 <__unordtf2@@GCC_4.5.0+0x64>

0000000000009f4c <__fixtfsi@@GCC_3.0>:
    9f4c:	stp	x29, x30, [sp, #-48]!
    9f50:	mov	x29, sp
    9f54:	str	x19, [sp, #16]
    9f58:	str	q0, [sp, #32]
    9f5c:	ldr	x1, [sp, #32]
    9f60:	ldr	x0, [sp, #40]
    9f64:	mrs	x2, fpcr
    9f68:	ubfx	x3, x0, #0, #48
    9f6c:	ubfx	x5, x0, #48, #15
    9f70:	mov	x4, #0x3ffe                	// #16382
    9f74:	cmp	x5, x4
    9f78:	b.gt	9f98 <__fixtfsi@@GCC_3.0+0x4c>
    9f7c:	cbnz	x5, a01c <__fixtfsi@@GCC_3.0+0xd0>
    9f80:	orr	x1, x1, x3
    9f84:	mov	w19, #0x0                   	// #0
    9f88:	cbz	x1, a00c <__fixtfsi@@GCC_3.0+0xc0>
    9f8c:	mov	w19, #0x0                   	// #0
    9f90:	mov	w0, #0x10                  	// #16
    9f94:	b	a024 <__fixtfsi@@GCC_3.0+0xd8>
    9f98:	lsr	x0, x0, #63
    9f9c:	and	w0, w0, #0xff
    9fa0:	and	x4, x0, #0xff
    9fa4:	mov	x6, #0x401d                	// #16413
    9fa8:	cmp	x5, x6
    9fac:	b.le	9fe0 <__fixtfsi@@GCC_3.0+0x94>
    9fb0:	mov	w19, #0x7fffffff            	// #2147483647
    9fb4:	add	w19, w0, w19
    9fb8:	cmp	x4, #0x0
    9fbc:	mov	x0, #0x401e                	// #16414
    9fc0:	ccmp	x5, x0, #0x0, ne  // ne = any
    9fc4:	b.ne	a02c <__fixtfsi@@GCC_3.0+0xe0>  // b.any
    9fc8:	cmp	xzr, x3, lsr #17
    9fcc:	b.ne	a034 <__fixtfsi@@GCC_3.0+0xe8>  // b.any
    9fd0:	orr	x1, x1, x3, lsl #47
    9fd4:	cbz	x1, a00c <__fixtfsi@@GCC_3.0+0xc0>
    9fd8:	mov	w0, #0x10                  	// #16
    9fdc:	b	a024 <__fixtfsi@@GCC_3.0+0xd8>
    9fe0:	orr	x3, x3, #0x1000000000000
    9fe4:	sub	w0, w5, #0x3, lsl #12
    9fe8:	sub	w0, w0, #0xfef
    9fec:	lsl	x0, x3, x0
    9ff0:	orr	x1, x0, x1
    9ff4:	mov	w19, #0x402f                	// #16431
    9ff8:	sub	w19, w19, w5
    9ffc:	lsr	x19, x3, x19
    a000:	cmp	x4, #0x0
    a004:	cneg	w19, w19, ne  // ne = any
    a008:	cbnz	x1, a03c <__fixtfsi@@GCC_3.0+0xf0>
    a00c:	mov	w0, w19
    a010:	ldr	x19, [sp, #16]
    a014:	ldp	x29, x30, [sp], #48
    a018:	ret
    a01c:	mov	w19, #0x0                   	// #0
    a020:	mov	w0, #0x10                  	// #16
    a024:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    a028:	b	a00c <__fixtfsi@@GCC_3.0+0xc0>
    a02c:	mov	w0, #0x1                   	// #1
    a030:	b	a024 <__fixtfsi@@GCC_3.0+0xd8>
    a034:	mov	w0, #0x1                   	// #1
    a038:	b	a024 <__fixtfsi@@GCC_3.0+0xd8>
    a03c:	mov	w0, #0x10                  	// #16
    a040:	b	a024 <__fixtfsi@@GCC_3.0+0xd8>

000000000000a044 <__fixunstfsi@@GCC_3.0>:
    a044:	stp	x29, x30, [sp, #-48]!
    a048:	mov	x29, sp
    a04c:	str	x19, [sp, #16]
    a050:	str	q0, [sp, #32]
    a054:	ldr	x1, [sp, #32]
    a058:	ldr	x0, [sp, #40]
    a05c:	mrs	x2, fpcr
    a060:	ubfx	x3, x0, #0, #48
    a064:	ubfx	x5, x0, #48, #15
    a068:	mov	x4, #0x3ffe                	// #16382
    a06c:	cmp	x5, x4
    a070:	b.gt	a090 <__fixunstfsi@@GCC_3.0+0x4c>
    a074:	cbnz	x5, a0f4 <__fixunstfsi@@GCC_3.0+0xb0>
    a078:	orr	x1, x1, x3
    a07c:	mov	w19, #0x0                   	// #0
    a080:	cbz	x1, a0b8 <__fixunstfsi@@GCC_3.0+0x74>
    a084:	mov	w19, #0x0                   	// #0
    a088:	mov	w0, #0x10                  	// #16
    a08c:	b	a0b4 <__fixunstfsi@@GCC_3.0+0x70>
    a090:	lsr	x0, x0, #63
    a094:	and	w0, w0, #0xff
    a098:	mov	x4, #0x401e                	// #16414
    a09c:	cmp	x5, x4
    a0a0:	cset	w2, gt
    a0a4:	orr	w2, w0, w2
    a0a8:	cbz	w2, a0c8 <__fixunstfsi@@GCC_3.0+0x84>
    a0ac:	sub	w19, w0, #0x1
    a0b0:	mov	w0, #0x1                   	// #1
    a0b4:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    a0b8:	mov	w0, w19
    a0bc:	ldr	x19, [sp, #16]
    a0c0:	ldp	x29, x30, [sp], #48
    a0c4:	ret
    a0c8:	orr	x3, x3, #0x1000000000000
    a0cc:	mov	w19, #0x402f                	// #16431
    a0d0:	sub	w19, w19, w5
    a0d4:	lsr	x19, x3, x19
    a0d8:	sub	w5, w5, #0x3, lsl #12
    a0dc:	sub	w5, w5, #0xfef
    a0e0:	lsl	x3, x3, x5
    a0e4:	orr	x1, x3, x1
    a0e8:	cbz	x1, a0b8 <__fixunstfsi@@GCC_3.0+0x74>
    a0ec:	mov	w0, #0x10                  	// #16
    a0f0:	b	a0b4 <__fixunstfsi@@GCC_3.0+0x70>
    a0f4:	mov	w19, #0x0                   	// #0
    a0f8:	mov	w0, #0x10                  	// #16
    a0fc:	b	a0b4 <__fixunstfsi@@GCC_3.0+0x70>

000000000000a100 <__floatsitf@@GCC_3.0>:
    a100:	cbz	w0, a14c <__floatsitf@@GCC_3.0+0x4c>
    a104:	lsr	w4, w0, #31
    a108:	cmp	w0, #0x0
    a10c:	cneg	w0, w0, lt  // lt = tstop
    a110:	clz	x2, x0
    a114:	mov	w1, #0x403e                	// #16446
    a118:	sub	w1, w1, w2
    a11c:	sxtw	x5, w1
    a120:	mov	w2, #0x402f                	// #16431
    a124:	sub	w1, w2, w1
    a128:	lsl	x0, x0, x1
    a12c:	mov	x2, #0x0                   	// #0
    a130:	mov	x3, #0x0                   	// #0
    a134:	bfxil	x3, x0, #0, #48
    a138:	bfi	x3, x5, #48, #15
    a13c:	bfi	x3, x4, #63, #1
    a140:	fmov	d0, x2
    a144:	fmov	v0.d[1], x3
    a148:	ret
    a14c:	mov	x0, #0x0                   	// #0
    a150:	mov	x5, #0x0                   	// #0
    a154:	mov	x4, #0x0                   	// #0
    a158:	b	a12c <__floatsitf@@GCC_3.0+0x2c>

000000000000a15c <__floatunsitf@@GCC_4.2.0>:
    a15c:	cbz	w0, a1a0 <__floatunsitf@@GCC_4.2.0+0x44>
    a160:	mov	w0, w0
    a164:	clz	x2, x0
    a168:	mov	w1, #0x403e                	// #16446
    a16c:	sub	w1, w1, w2
    a170:	sxtw	x3, w1
    a174:	mov	w2, #0x402f                	// #16431
    a178:	sub	w2, w2, w1
    a17c:	lsl	x2, x0, x2
    a180:	mov	x0, #0x0                   	// #0
    a184:	mov	x1, #0x0                   	// #0
    a188:	bfxil	x1, x2, #0, #48
    a18c:	bfi	x1, x3, #48, #15
    a190:	and	x1, x1, #0x7fffffffffffffff
    a194:	fmov	d0, x0
    a198:	fmov	v0.d[1], x1
    a19c:	ret
    a1a0:	mov	x2, #0x0                   	// #0
    a1a4:	mov	x3, #0x0                   	// #0
    a1a8:	b	a180 <__floatunsitf@@GCC_4.2.0+0x24>

000000000000a1ac <__fixtfdi@@GCC_3.0>:
    a1ac:	stp	x29, x30, [sp, #-48]!
    a1b0:	mov	x29, sp
    a1b4:	str	x19, [sp, #16]
    a1b8:	str	q0, [sp, #32]
    a1bc:	ldr	x19, [sp, #32]
    a1c0:	ldr	x0, [sp, #40]
    a1c4:	mrs	x1, fpcr
    a1c8:	mov	x1, x19
    a1cc:	ubfx	x3, x0, #0, #48
    a1d0:	ubfx	x5, x0, #48, #15
    a1d4:	mov	x4, #0x3ffe                	// #16382
    a1d8:	cmp	x5, x4
    a1dc:	b.gt	a1fc <__fixtfdi@@GCC_3.0+0x50>
    a1e0:	cbnz	x5, a2c4 <__fixtfdi@@GCC_3.0+0x118>
    a1e4:	orr	x19, x19, x3
    a1e8:	cbnz	x19, a2d4 <__fixtfdi@@GCC_3.0+0x128>
    a1ec:	mov	x0, x19
    a1f0:	ldr	x19, [sp, #16]
    a1f4:	ldp	x29, x30, [sp], #48
    a1f8:	ret
    a1fc:	lsr	x0, x0, #63
    a200:	and	w0, w0, #0xff
    a204:	and	x4, x0, #0xff
    a208:	mov	x6, #0x403d                	// #16445
    a20c:	cmp	x5, x6
    a210:	b.le	a244 <__fixtfdi@@GCC_3.0+0x98>
    a214:	mov	x19, #0x7fffffffffffffff    	// #9223372036854775807
    a218:	add	x19, x4, x19
    a21c:	cmp	x4, #0x0
    a220:	mov	x0, #0x403e                	// #16446
    a224:	ccmp	x5, x0, #0x0, ne  // ne = any
    a228:	b.ne	a2e0 <__fixtfdi@@GCC_3.0+0x134>  // b.any
    a22c:	extr	x3, x3, x1, #49
    a230:	cbnz	x3, a2e8 <__fixtfdi@@GCC_3.0+0x13c>
    a234:	cmp	xzr, x1, lsl #15
    a238:	b.eq	a1ec <__fixtfdi@@GCC_3.0+0x40>  // b.none
    a23c:	mov	w0, #0x10                  	// #16
    a240:	b	a2cc <__fixtfdi@@GCC_3.0+0x120>
    a244:	orr	x3, x3, #0x1000000000000
    a248:	mov	x0, #0x406f                	// #16495
    a24c:	sub	x2, x0, x5
    a250:	cmp	x2, #0x3f
    a254:	b.gt	a294 <__fixtfdi@@GCC_3.0+0xe8>
    a258:	sub	w2, w5, #0x4, lsl #12
    a25c:	sub	w2, w2, #0x2f
    a260:	lsl	x0, x19, x2
    a264:	cmp	x0, #0x0
    a268:	cset	w0, ne  // ne = any
    a26c:	mov	w19, #0x406f                	// #16495
    a270:	sub	w19, w19, w5
    a274:	lsr	x19, x1, x19
    a278:	lsl	x3, x3, x2
    a27c:	orr	x19, x19, x3
    a280:	cmp	x4, #0x0
    a284:	cneg	x19, x19, ne  // ne = any
    a288:	cbz	w0, a1ec <__fixtfdi@@GCC_3.0+0x40>
    a28c:	mov	w0, #0x10                  	// #16
    a290:	b	a2cc <__fixtfdi@@GCC_3.0+0x120>
    a294:	sub	w19, w5, #0x3, lsl #12
    a298:	sub	w19, w19, #0xfef
    a29c:	lsl	x19, x3, x19
    a2a0:	cmp	x2, #0x40
    a2a4:	csel	x19, x19, xzr, ne  // ne = any
    a2a8:	orr	x19, x19, x1
    a2ac:	cmp	x19, #0x0
    a2b0:	cset	w0, ne  // ne = any
    a2b4:	mov	w19, #0x402f                	// #16431
    a2b8:	sub	w19, w19, w5
    a2bc:	lsr	x19, x3, x19
    a2c0:	b	a280 <__fixtfdi@@GCC_3.0+0xd4>
    a2c4:	mov	x19, #0x0                   	// #0
    a2c8:	mov	w0, #0x10                  	// #16
    a2cc:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    a2d0:	b	a1ec <__fixtfdi@@GCC_3.0+0x40>
    a2d4:	mov	x19, #0x0                   	// #0
    a2d8:	mov	w0, #0x10                  	// #16
    a2dc:	b	a2cc <__fixtfdi@@GCC_3.0+0x120>
    a2e0:	mov	w0, #0x1                   	// #1
    a2e4:	b	a2cc <__fixtfdi@@GCC_3.0+0x120>
    a2e8:	mov	w0, #0x1                   	// #1
    a2ec:	b	a2cc <__fixtfdi@@GCC_3.0+0x120>

000000000000a2f0 <__fixunstfdi@@GCC_3.0>:
    a2f0:	stp	x29, x30, [sp, #-48]!
    a2f4:	mov	x29, sp
    a2f8:	str	x19, [sp, #16]
    a2fc:	str	q0, [sp, #32]
    a300:	ldr	x19, [sp, #32]
    a304:	ldr	x1, [sp, #40]
    a308:	mrs	x0, fpcr
    a30c:	ubfx	x3, x1, #0, #48
    a310:	ubfx	x4, x1, #48, #15
    a314:	mov	x2, #0x3ffe                	// #16382
    a318:	cmp	x4, x2
    a31c:	b.gt	a33c <__fixunstfdi@@GCC_3.0+0x4c>
    a320:	cbnz	x4, a3e4 <__fixunstfdi@@GCC_3.0+0xf4>
    a324:	orr	x19, x19, x3
    a328:	cbnz	x19, a3f0 <__fixunstfdi@@GCC_3.0+0x100>
    a32c:	mov	x0, x19
    a330:	ldr	x19, [sp, #16]
    a334:	ldp	x29, x30, [sp], #48
    a338:	ret
    a33c:	lsr	x1, x1, #63
    a340:	and	w1, w1, #0xff
    a344:	mov	x2, #0x403e                	// #16446
    a348:	cmp	x4, x2
    a34c:	cset	w2, gt
    a350:	orr	w2, w1, w2
    a354:	cbz	w2, a36c <__fixunstfdi@@GCC_3.0+0x7c>
    a358:	eor	w1, w1, #0x1
    a35c:	sbfx	x19, x1, #0, #1
    a360:	mov	w0, #0x1                   	// #1
    a364:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    a368:	b	a32c <__fixunstfdi@@GCC_3.0+0x3c>
    a36c:	orr	x3, x3, #0x1000000000000
    a370:	mov	x1, #0x406f                	// #16495
    a374:	sub	x0, x1, x4
    a378:	cmp	x0, #0x3f
    a37c:	b.gt	a3b4 <__fixunstfdi@@GCC_3.0+0xc4>
    a380:	sub	w2, w4, #0x4, lsl #12
    a384:	sub	w2, w2, #0x2f
    a388:	lsl	x0, x19, x2
    a38c:	cmp	x0, #0x0
    a390:	cset	w1, ne  // ne = any
    a394:	mov	w0, #0x406f                	// #16495
    a398:	sub	w0, w0, w4
    a39c:	lsr	x19, x19, x0
    a3a0:	lsl	x3, x3, x2
    a3a4:	orr	x19, x19, x3
    a3a8:	cbz	w1, a32c <__fixunstfdi@@GCC_3.0+0x3c>
    a3ac:	mov	w0, #0x10                  	// #16
    a3b0:	b	a364 <__fixunstfdi@@GCC_3.0+0x74>
    a3b4:	sub	w1, w4, #0x3, lsl #12
    a3b8:	sub	w1, w1, #0xfef
    a3bc:	lsl	x1, x3, x1
    a3c0:	cmp	x0, #0x40
    a3c4:	csel	x0, x1, xzr, ne  // ne = any
    a3c8:	orr	x19, x0, x19
    a3cc:	cmp	x19, #0x0
    a3d0:	cset	w1, ne  // ne = any
    a3d4:	mov	w0, #0x402f                	// #16431
    a3d8:	sub	w0, w0, w4
    a3dc:	lsr	x19, x3, x0
    a3e0:	b	a3a8 <__fixunstfdi@@GCC_3.0+0xb8>
    a3e4:	mov	x19, #0x0                   	// #0
    a3e8:	mov	w0, #0x10                  	// #16
    a3ec:	b	a364 <__fixunstfdi@@GCC_3.0+0x74>
    a3f0:	mov	x19, #0x0                   	// #0
    a3f4:	mov	w0, #0x10                  	// #16
    a3f8:	b	a364 <__fixunstfdi@@GCC_3.0+0x74>

000000000000a3fc <__floatditf@@GCC_3.0>:
    a3fc:	cbz	x0, a464 <__floatditf@@GCC_3.0+0x68>
    a400:	lsr	x3, x0, #63
    a404:	cmp	x0, #0x0
    a408:	cneg	x0, x0, lt  // lt = tstop
    a40c:	clz	x2, x0
    a410:	mov	w1, #0x403e                	// #16446
    a414:	sub	w2, w1, w2
    a418:	sxtw	x4, w2
    a41c:	mov	x1, #0x406f                	// #16495
    a420:	sub	x1, x1, x4
    a424:	cmp	x1, #0x3f
    a428:	b.gt	a44c <__floatditf@@GCC_3.0+0x50>
    a42c:	sub	w1, w2, #0x4, lsl #12
    a430:	sub	w1, w1, #0x2f
    a434:	lsr	x1, x0, x1
    a438:	mov	w5, #0x406f                	// #16495
    a43c:	sub	w2, w5, w2
    a440:	lsl	x5, x0, x2
    a444:	mov	x0, x3
    a448:	b	a470 <__floatditf@@GCC_3.0+0x74>
    a44c:	mov	w1, #0x402f                	// #16431
    a450:	sub	w1, w1, w2
    a454:	lsl	x1, x0, x1
    a458:	mov	x0, x3
    a45c:	mov	x5, #0x0                   	// #0
    a460:	b	a470 <__floatditf@@GCC_3.0+0x74>
    a464:	mov	x4, x0
    a468:	mov	x1, #0x0                   	// #0
    a46c:	mov	x5, #0x0                   	// #0
    a470:	mov	x3, #0x0                   	// #0
    a474:	bfxil	x3, x1, #0, #48
    a478:	bfi	x3, x4, #48, #15
    a47c:	bfi	x3, x0, #63, #1
    a480:	fmov	d0, x5
    a484:	fmov	v0.d[1], x3
    a488:	ret

000000000000a48c <__floatunditf@@GCC_4.2.0>:
    a48c:	cbz	x0, a4e0 <__floatunditf@@GCC_4.2.0+0x54>
    a490:	clz	x2, x0
    a494:	mov	w1, #0x403e                	// #16446
    a498:	sub	w2, w1, w2
    a49c:	sxtw	x4, w2
    a4a0:	mov	x1, #0x406f                	// #16495
    a4a4:	sub	x1, x1, x4
    a4a8:	cmp	x1, #0x3f
    a4ac:	b.gt	a4cc <__floatunditf@@GCC_4.2.0+0x40>
    a4b0:	sub	w1, w2, #0x4, lsl #12
    a4b4:	sub	w1, w1, #0x2f
    a4b8:	lsr	x1, x0, x1
    a4bc:	mov	w3, #0x406f                	// #16495
    a4c0:	sub	w2, w3, w2
    a4c4:	lsl	x0, x0, x2
    a4c8:	b	a4e8 <__floatunditf@@GCC_4.2.0+0x5c>
    a4cc:	mov	w1, #0x402f                	// #16431
    a4d0:	sub	w1, w1, w2
    a4d4:	lsl	x1, x0, x1
    a4d8:	mov	x0, #0x0                   	// #0
    a4dc:	b	a4e8 <__floatunditf@@GCC_4.2.0+0x5c>
    a4e0:	mov	x1, x0
    a4e4:	mov	x4, #0x0                   	// #0
    a4e8:	mov	x3, #0x0                   	// #0
    a4ec:	bfxil	x3, x1, #0, #48
    a4f0:	bfi	x3, x4, #48, #15
    a4f4:	and	x3, x3, #0x7fffffffffffffff
    a4f8:	fmov	d0, x0
    a4fc:	fmov	v0.d[1], x3
    a500:	ret

000000000000a504 <__fixtfti@@GCC_3.0>:
    a504:	stp	x29, x30, [sp, #-48]!
    a508:	mov	x29, sp
    a50c:	stp	x19, x20, [sp, #16]
    a510:	str	q0, [sp, #32]
    a514:	ldr	x0, [sp, #32]
    a518:	ldr	x2, [sp, #40]
    a51c:	mrs	x1, fpcr
    a520:	ubfx	x3, x2, #0, #48
    a524:	ubfx	x5, x2, #48, #15
    a528:	mov	x4, x5
    a52c:	mov	x1, #0x3ffe                	// #16382
    a530:	cmp	x5, x1
    a534:	b.gt	a550 <__fixtfti@@GCC_3.0+0x4c>
    a538:	cbnz	x5, a6a4 <__fixtfti@@GCC_3.0+0x1a0>
    a53c:	orr	x0, x0, x3
    a540:	cbnz	x0, a6b8 <__fixtfti@@GCC_3.0+0x1b4>
    a544:	mov	x19, #0x0                   	// #0
    a548:	mov	x20, #0x0                   	// #0
    a54c:	b	a5a4 <__fixtfti@@GCC_3.0+0xa0>
    a550:	lsr	x2, x2, #63
    a554:	and	w2, w2, #0xff
    a558:	and	x2, x2, #0xff
    a55c:	mov	x1, #0x407d                	// #16509
    a560:	cmp	x5, x1
    a564:	b.le	a5b8 <__fixtfti@@GCC_3.0+0xb4>
    a568:	mov	x5, #0x1                   	// #1
    a56c:	sub	x5, x5, x2
    a570:	asr	x1, x5, #63
    a574:	adrp	x6, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    a578:	add	x7, x6, #0xae0
    a57c:	ldr	x19, [x6, #2784]
    a580:	ldr	x20, [x7, #8]
    a584:	subs	x19, x19, x5
    a588:	sbc	x20, x20, x1
    a58c:	cmp	x2, #0x0
    a590:	mov	x1, #0x407e                	// #16510
    a594:	ccmp	x4, x1, #0x0, ne  // ne = any
    a598:	b.ne	a6c8 <__fixtfti@@GCC_3.0+0x1c4>  // b.any
    a59c:	orr	x0, x0, x3
    a5a0:	cbnz	x0, a69c <__fixtfti@@GCC_3.0+0x198>
    a5a4:	mov	x0, x19
    a5a8:	mov	x1, x20
    a5ac:	ldp	x19, x20, [sp, #16]
    a5b0:	ldp	x29, x30, [sp], #48
    a5b4:	ret
    a5b8:	orr	x3, x3, #0x1000000000000
    a5bc:	mov	x1, #0x406e                	// #16494
    a5c0:	cmp	x5, x1
    a5c4:	b.le	a610 <__fixtfti@@GCC_3.0+0x10c>
    a5c8:	sub	w1, w5, #0x4, lsl #12
    a5cc:	sub	w1, w1, #0x6f
    a5d0:	sub	w5, w5, #0x4, lsl #12
    a5d4:	sub	w5, w5, #0xaf
    a5d8:	lsl	x7, x0, x5
    a5dc:	lsr	x4, x0, #1
    a5e0:	mov	w6, #0x3f                  	// #63
    a5e4:	sub	w6, w6, w1
    a5e8:	lsr	x4, x4, x6
    a5ec:	lsl	x20, x3, x1
    a5f0:	orr	x20, x4, x20
    a5f4:	lsl	x19, x0, x1
    a5f8:	cmp	w5, #0x0
    a5fc:	csel	x20, x7, x20, ge  // ge = tcont
    a600:	csel	x19, xzr, x19, ge  // ge = tcont
    a604:	cbz	x2, a5a4 <__fixtfti@@GCC_3.0+0xa0>
    a608:	mov	w1, #0x0                   	// #0
    a60c:	b	a654 <__fixtfti@@GCC_3.0+0x150>
    a610:	mov	x1, #0x406f                	// #16495
    a614:	sub	x4, x1, x5
    a618:	cmp	x4, #0x3f
    a61c:	b.gt	a668 <__fixtfti@@GCC_3.0+0x164>
    a620:	sub	w19, w5, #0x4, lsl #12
    a624:	sub	w19, w19, #0x2f
    a628:	lsl	x1, x0, x19
    a62c:	cmp	x1, #0x0
    a630:	cset	w1, ne  // ne = any
    a634:	mov	w4, #0x406f                	// #16495
    a638:	sub	w5, w4, w5
    a63c:	lsl	x19, x3, x19
    a640:	lsr	x0, x0, x5
    a644:	orr	x19, x19, x0
    a648:	lsr	x3, x3, x5
    a64c:	mov	x20, x3
    a650:	cbz	x2, a65c <__fixtfti@@GCC_3.0+0x158>
    a654:	negs	x19, x19
    a658:	ngc	x20, x20
    a65c:	mov	w0, #0x10                  	// #16
    a660:	cbnz	w1, a6b0 <__fixtfti@@GCC_3.0+0x1ac>
    a664:	b	a5a4 <__fixtfti@@GCC_3.0+0xa0>
    a668:	sub	w1, w5, #0x3, lsl #12
    a66c:	sub	w1, w1, #0xfef
    a670:	lsl	x1, x3, x1
    a674:	cmp	x4, #0x40
    a678:	csel	x1, x1, xzr, ne  // ne = any
    a67c:	orr	x0, x1, x0
    a680:	cmp	x0, #0x0
    a684:	cset	w1, ne  // ne = any
    a688:	mov	w19, #0x402f                	// #16431
    a68c:	sub	w19, w19, w5
    a690:	lsr	x19, x3, x19
    a694:	mov	x3, #0x0                   	// #0
    a698:	b	a64c <__fixtfti@@GCC_3.0+0x148>
    a69c:	mov	w0, #0x1                   	// #1
    a6a0:	b	a6b0 <__fixtfti@@GCC_3.0+0x1ac>
    a6a4:	mov	x19, #0x0                   	// #0
    a6a8:	mov	x20, #0x0                   	// #0
    a6ac:	mov	w0, #0x10                  	// #16
    a6b0:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    a6b4:	b	a5a4 <__fixtfti@@GCC_3.0+0xa0>
    a6b8:	mov	x19, #0x0                   	// #0
    a6bc:	mov	x20, #0x0                   	// #0
    a6c0:	mov	w0, #0x10                  	// #16
    a6c4:	b	a6b0 <__fixtfti@@GCC_3.0+0x1ac>
    a6c8:	mov	w0, #0x1                   	// #1
    a6cc:	b	a6b0 <__fixtfti@@GCC_3.0+0x1ac>

000000000000a6d0 <__fixunstfti@@GCC_3.0>:
    a6d0:	stp	x29, x30, [sp, #-48]!
    a6d4:	mov	x29, sp
    a6d8:	stp	x19, x20, [sp, #16]
    a6dc:	str	q0, [sp, #32]
    a6e0:	ldr	x20, [sp, #32]
    a6e4:	ldr	x0, [sp, #40]
    a6e8:	mrs	x1, fpcr
    a6ec:	ubfx	x19, x0, #0, #48
    a6f0:	ubfx	x3, x0, #48, #15
    a6f4:	mov	x2, #0x3ffe                	// #16382
    a6f8:	cmp	x3, x2
    a6fc:	b.gt	a720 <__fixunstfti@@GCC_3.0+0x50>
    a700:	cbnz	x3, a830 <__fixunstfti@@GCC_3.0+0x160>
    a704:	orr	x20, x20, x19
    a708:	mov	x19, #0x0                   	// #0
    a70c:	cbz	x20, a750 <__fixunstfti@@GCC_3.0+0x80>
    a710:	mov	x20, #0x0                   	// #0
    a714:	mov	x19, #0x0                   	// #0
    a718:	mov	w0, #0x10                  	// #16
    a71c:	b	a74c <__fixunstfti@@GCC_3.0+0x7c>
    a720:	lsr	x0, x0, #63
    a724:	and	w0, w0, #0xff
    a728:	mov	x2, #0x407e                	// #16510
    a72c:	cmp	x3, x2
    a730:	cset	w2, gt
    a734:	orr	w2, w0, w2
    a738:	cbz	w2, a764 <__fixunstfti@@GCC_3.0+0x94>
    a73c:	eor	w0, w0, #0x1
    a740:	sbfx	x20, x0, #0, #1
    a744:	mov	x19, x20
    a748:	mov	w0, #0x1                   	// #1
    a74c:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    a750:	mov	x0, x20
    a754:	mov	x1, x19
    a758:	ldp	x19, x20, [sp, #16]
    a75c:	ldp	x29, x30, [sp], #48
    a760:	ret
    a764:	orr	x2, x19, #0x1000000000000
    a768:	mov	x0, #0x406e                	// #16494
    a76c:	cmp	x3, x0
    a770:	b.le	a7b4 <__fixunstfti@@GCC_3.0+0xe4>
    a774:	sub	w1, w3, #0x4, lsl #12
    a778:	sub	w1, w1, #0x6f
    a77c:	sub	w0, w3, #0x4, lsl #12
    a780:	sub	w0, w0, #0xaf
    a784:	lsl	x5, x20, x0
    a788:	lsr	x3, x20, #1
    a78c:	mov	w4, #0x3f                  	// #63
    a790:	sub	w4, w4, w1
    a794:	lsr	x3, x3, x4
    a798:	lsl	x19, x2, x1
    a79c:	orr	x19, x3, x19
    a7a0:	lsl	x20, x20, x1
    a7a4:	cmp	w0, #0x0
    a7a8:	csel	x19, x5, x19, ge  // ge = tcont
    a7ac:	csel	x20, xzr, x20, ge  // ge = tcont
    a7b0:	b	a750 <__fixunstfti@@GCC_3.0+0x80>
    a7b4:	mov	x0, #0x406f                	// #16495
    a7b8:	sub	x1, x0, x3
    a7bc:	cmp	x1, #0x3f
    a7c0:	b.gt	a7fc <__fixunstfti@@GCC_3.0+0x12c>
    a7c4:	sub	w0, w3, #0x4, lsl #12
    a7c8:	sub	w0, w0, #0x2f
    a7cc:	lsl	x1, x20, x0
    a7d0:	cmp	x1, #0x0
    a7d4:	cset	w1, ne  // ne = any
    a7d8:	mov	w19, #0x406f                	// #16495
    a7dc:	sub	w19, w19, w3
    a7e0:	lsl	x0, x2, x0
    a7e4:	lsr	x20, x20, x19
    a7e8:	orr	x20, x0, x20
    a7ec:	lsr	x19, x2, x19
    a7f0:	cbz	w1, a750 <__fixunstfti@@GCC_3.0+0x80>
    a7f4:	mov	w0, #0x10                  	// #16
    a7f8:	b	a74c <__fixunstfti@@GCC_3.0+0x7c>
    a7fc:	sub	w0, w3, #0x3, lsl #12
    a800:	sub	w0, w0, #0xfef
    a804:	lsl	x0, x2, x0
    a808:	cmp	x1, #0x40
    a80c:	csel	x0, x0, xzr, ne  // ne = any
    a810:	orr	x0, x20, x0
    a814:	cmp	x0, #0x0
    a818:	cset	w1, ne  // ne = any
    a81c:	mov	w0, #0x402f                	// #16431
    a820:	sub	w0, w0, w3
    a824:	lsr	x20, x2, x0
    a828:	mov	x19, #0x0                   	// #0
    a82c:	b	a7f0 <__fixunstfti@@GCC_3.0+0x120>
    a830:	mov	x20, #0x0                   	// #0
    a834:	mov	x19, #0x0                   	// #0
    a838:	mov	w0, #0x10                  	// #16
    a83c:	b	a74c <__fixunstfti@@GCC_3.0+0x7c>

000000000000a840 <__floattitf@@GCC_3.0>:
    a840:	stp	x29, x30, [sp, #-32]!
    a844:	mov	x29, sp
    a848:	mrs	x8, fpcr
    a84c:	orr	x2, x0, x1
    a850:	cbz	x2, aa4c <__floattitf@@GCC_3.0+0x20c>
    a854:	mov	x2, x1
    a858:	lsr	x5, x1, #63
    a85c:	and	w9, w5, #0xff
    a860:	tbnz	x1, #63, a970 <__floattitf@@GCC_3.0+0x130>
    a864:	mov	x4, x2
    a868:	cbz	x2, a97c <__floattitf@@GCC_3.0+0x13c>
    a86c:	clz	x3, x2
    a870:	mov	w6, #0x407e                	// #16510
    a874:	sub	w3, w6, w3
    a878:	sxtw	x7, w3
    a87c:	mov	x6, #0x406f                	// #16495
    a880:	cmp	x6, w3, sxtw
    a884:	b.ge	aa80 <__floattitf@@GCC_3.0+0x240>  // b.tcont
    a888:	mov	x5, #0x4072                	// #16498
    a88c:	cmp	x7, x5
    a890:	b.le	a9d4 <__floattitf@@GCC_3.0+0x194>
    a894:	sub	w4, w3, #0x4, lsl #12
    a898:	sub	w4, w4, #0x72
    a89c:	sub	w6, w3, #0x4, lsl #12
    a8a0:	sub	w6, w6, #0xb2
    a8a4:	lsr	x12, x2, x6
    a8a8:	lsl	x11, x2, #1
    a8ac:	mov	w10, #0x3f                  	// #63
    a8b0:	sub	w5, w10, w4
    a8b4:	lsl	x11, x11, x5
    a8b8:	lsr	x5, x0, x4
    a8bc:	orr	x5, x11, x5
    a8c0:	lsr	x4, x2, x4
    a8c4:	cmp	w6, #0x0
    a8c8:	csel	x5, x12, x5, ge  // ge = tcont
    a8cc:	csel	x4, xzr, x4, ge  // ge = tcont
    a8d0:	mov	w6, #0x40f2                	// #16626
    a8d4:	sub	w3, w6, w3
    a8d8:	subs	w6, w3, #0x40
    a8dc:	lsl	x12, x0, x6
    a8e0:	lsr	x11, x0, #1
    a8e4:	sub	w10, w10, w3
    a8e8:	lsr	x10, x11, x10
    a8ec:	lsl	x2, x2, x3
    a8f0:	orr	x2, x10, x2
    a8f4:	lsl	x0, x0, x3
    a8f8:	csel	x2, x12, x2, pl  // pl = nfrst
    a8fc:	csel	x0, xzr, x0, pl  // pl = nfrst
    a900:	orr	x0, x0, x2
    a904:	cmp	x0, #0x0
    a908:	cset	x0, ne  // ne = any
    a90c:	orr	x5, x5, x0
    a910:	and	x4, x4, #0xfff7ffffffffffff
    a914:	mov	w0, #0x0                   	// #0
    a918:	tst	x5, #0x7
    a91c:	b.eq	a93c <__floattitf@@GCC_3.0+0xfc>  // b.none
    a920:	and	x2, x8, #0xc00000
    a924:	cmp	x2, #0x400, lsl #12
    a928:	b.eq	aa24 <__floattitf@@GCC_3.0+0x1e4>  // b.none
    a92c:	cmp	x2, #0x800, lsl #12
    a930:	b.eq	aa38 <__floattitf@@GCC_3.0+0x1f8>  // b.none
    a934:	mov	w0, #0x10                  	// #16
    a938:	cbz	x2, aa0c <__floattitf@@GCC_3.0+0x1cc>
    a93c:	tbz	x4, #51, a948 <__floattitf@@GCC_3.0+0x108>
    a940:	and	x4, x4, #0xfff7ffffffffffff
    a944:	add	x7, x7, #0x1
    a948:	mov	x3, #0x0                   	// #0
    a94c:	extr	x2, x4, x5, #3
    a950:	lsr	x4, x4, #3
    a954:	bfxil	x3, x4, #0, #48
    a958:	bfi	x3, x7, #48, #15
    a95c:	bfi	x3, x9, #63, #1
    a960:	stp	x2, x3, [sp, #16]
    a964:	cbz	w0, aa74 <__floattitf@@GCC_3.0+0x234>
    a968:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    a96c:	b	aa74 <__floattitf@@GCC_3.0+0x234>
    a970:	negs	x0, x0
    a974:	ngc	x2, x1
    a978:	b	a864 <__floattitf@@GCC_3.0+0x24>
    a97c:	clz	x3, x0
    a980:	mov	w1, #0x403e                	// #16446
    a984:	sub	w3, w1, w3
    a988:	sxtw	x7, w3
    a98c:	mov	x2, x0
    a990:	mov	x1, #0x406f                	// #16495
    a994:	sub	x1, x1, x7
    a998:	cmp	x1, #0x3f
    a99c:	b.gt	a9c4 <__floattitf@@GCC_3.0+0x184>
    a9a0:	mov	w0, #0x406f                	// #16495
    a9a4:	sub	w0, w0, w3
    a9a8:	sub	w1, w3, #0x4, lsl #12
    a9ac:	sub	w1, w1, #0x2f
    a9b0:	lsr	x1, x2, x1
    a9b4:	lsl	x4, x4, x0
    a9b8:	orr	x1, x1, x4
    a9bc:	lsl	x4, x2, x0
    a9c0:	b	aa5c <__floattitf@@GCC_3.0+0x21c>
    a9c4:	mov	w1, #0x402f                	// #16431
    a9c8:	sub	w3, w1, w3
    a9cc:	lsl	x1, x0, x3
    a9d0:	b	aa5c <__floattitf@@GCC_3.0+0x21c>
    a9d4:	mov	x5, x0
    a9d8:	mov	x2, #0x4072                	// #16498
    a9dc:	sub	x2, x2, x7
    a9e0:	cmp	x2, #0x0
    a9e4:	b.le	a910 <__floattitf@@GCC_3.0+0xd0>
    a9e8:	mov	w5, #0x4072                	// #16498
    a9ec:	sub	w5, w5, w3
    a9f0:	sub	w3, w3, #0x4, lsl #12
    a9f4:	sub	w3, w3, #0x32
    a9f8:	lsr	x3, x0, x3
    a9fc:	lsl	x4, x4, x5
    aa00:	orr	x4, x3, x4
    aa04:	lsl	x5, x0, x5
    aa08:	b	a910 <__floattitf@@GCC_3.0+0xd0>
    aa0c:	and	x1, x5, #0xf
    aa10:	cmp	x1, #0x4
    aa14:	b.eq	a93c <__floattitf@@GCC_3.0+0xfc>  // b.none
    aa18:	adds	x5, x5, #0x4
    aa1c:	cinc	x4, x4, cs  // cs = hs, nlast
    aa20:	b	a93c <__floattitf@@GCC_3.0+0xfc>
    aa24:	mov	w0, #0x10                  	// #16
    aa28:	tbnz	x1, #63, a93c <__floattitf@@GCC_3.0+0xfc>
    aa2c:	adds	x5, x5, #0x8
    aa30:	cinc	x4, x4, cs  // cs = hs, nlast
    aa34:	b	a93c <__floattitf@@GCC_3.0+0xfc>
    aa38:	mov	w0, #0x10                  	// #16
    aa3c:	tbz	x1, #63, a93c <__floattitf@@GCC_3.0+0xfc>
    aa40:	adds	x5, x5, #0x8
    aa44:	cinc	x4, x4, cs  // cs = hs, nlast
    aa48:	b	a93c <__floattitf@@GCC_3.0+0xfc>
    aa4c:	mov	x1, #0x0                   	// #0
    aa50:	mov	x4, #0x0                   	// #0
    aa54:	mov	x7, #0x0                   	// #0
    aa58:	mov	x5, #0x0                   	// #0
    aa5c:	mov	x3, #0x0                   	// #0
    aa60:	mov	x2, x4
    aa64:	bfxil	x3, x1, #0, #48
    aa68:	bfi	x3, x7, #48, #15
    aa6c:	bfi	x3, x5, #63, #1
    aa70:	stp	x2, x3, [sp, #16]
    aa74:	ldr	q0, [sp, #16]
    aa78:	ldp	x29, x30, [sp], #32
    aa7c:	ret
    aa80:	mov	x2, x0
    aa84:	mov	x1, #0x406f                	// #16495
    aa88:	sub	x1, x1, x7
    aa8c:	cmp	x1, #0x0
    aa90:	b.gt	a9a0 <__floattitf@@GCC_3.0+0x160>
    aa94:	mov	x1, x4
    aa98:	mov	x4, x0
    aa9c:	b	aa5c <__floattitf@@GCC_3.0+0x21c>

000000000000aaa0 <__floatuntitf@@GCC_4.2.0>:
    aaa0:	stp	x29, x30, [sp, #-32]!
    aaa4:	mov	x29, sp
    aaa8:	mrs	x8, fpcr
    aaac:	orr	x2, x0, x1
    aab0:	cbz	x2, ac74 <__floatuntitf@@GCC_4.2.0+0x1d4>
    aab4:	mov	x4, x1
    aab8:	cbz	x1, abb8 <__floatuntitf@@GCC_4.2.0+0x118>
    aabc:	clz	x2, x1
    aac0:	mov	w3, #0x407e                	// #16510
    aac4:	sub	w2, w3, w2
    aac8:	sxtw	x5, w2
    aacc:	mov	x3, #0x406f                	// #16495
    aad0:	cmp	x3, w2, sxtw
    aad4:	b.ge	aca4 <__floatuntitf@@GCC_4.2.0+0x204>  // b.tcont
    aad8:	mov	x3, #0x4072                	// #16498
    aadc:	cmp	x5, x3
    aae0:	b.le	ac10 <__floatuntitf@@GCC_4.2.0+0x170>
    aae4:	mov	w3, #0x40f2                	// #16626
    aae8:	sub	w3, w3, w2
    aaec:	subs	w6, w3, #0x40
    aaf0:	lsl	x10, x0, x6
    aaf4:	lsr	x9, x0, #1
    aaf8:	mov	w7, #0x3f                  	// #63
    aafc:	sub	w4, w7, w3
    ab00:	lsr	x9, x9, x4
    ab04:	lsl	x4, x1, x3
    ab08:	orr	x4, x9, x4
    ab0c:	lsl	x3, x0, x3
    ab10:	csel	x4, x10, x4, pl  // pl = nfrst
    ab14:	csel	x3, xzr, x3, pl  // pl = nfrst
    ab18:	orr	x3, x3, x4
    ab1c:	cmp	x3, #0x0
    ab20:	cset	x6, ne  // ne = any
    ab24:	sub	w4, w2, #0x4, lsl #12
    ab28:	sub	w4, w4, #0x72
    ab2c:	sub	w2, w2, #0x4, lsl #12
    ab30:	sub	w2, w2, #0xb2
    ab34:	lsr	x9, x1, x2
    ab38:	lsl	x3, x1, #1
    ab3c:	sub	w7, w7, w4
    ab40:	lsl	x7, x3, x7
    ab44:	lsr	x0, x0, x4
    ab48:	orr	x0, x7, x0
    ab4c:	lsr	x4, x1, x4
    ab50:	cmp	w2, #0x0
    ab54:	csel	x0, x9, x0, ge  // ge = tcont
    ab58:	orr	x6, x6, x0
    ab5c:	csel	x4, xzr, x4, ge  // ge = tcont
    ab60:	and	x4, x4, #0xfff7ffffffffffff
    ab64:	mov	w0, #0x0                   	// #0
    ab68:	tst	x6, #0x7
    ab6c:	b.eq	ab84 <__floatuntitf@@GCC_4.2.0+0xe4>  // b.none
    ab70:	ands	x0, x8, #0xc00000
    ab74:	b.eq	ac48 <__floatuntitf@@GCC_4.2.0+0x1a8>  // b.none
    ab78:	cmp	x0, #0x400, lsl #12
    ab7c:	b.eq	ac64 <__floatuntitf@@GCC_4.2.0+0x1c4>  // b.none
    ab80:	mov	w0, #0x10                  	// #16
    ab84:	tbz	x4, #51, ab90 <__floatuntitf@@GCC_4.2.0+0xf0>
    ab88:	and	x4, x4, #0xfff7ffffffffffff
    ab8c:	add	x5, x5, #0x1
    ab90:	mov	x3, #0x0                   	// #0
    ab94:	extr	x2, x4, x6, #3
    ab98:	lsr	x4, x4, #3
    ab9c:	bfxil	x3, x4, #0, #48
    aba0:	bfi	x3, x5, #48, #15
    aba4:	and	x3, x3, #0x7fffffffffffffff
    aba8:	stp	x2, x3, [sp, #16]
    abac:	cbz	w0, ac98 <__floatuntitf@@GCC_4.2.0+0x1f8>
    abb0:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    abb4:	b	ac98 <__floatuntitf@@GCC_4.2.0+0x1f8>
    abb8:	clz	x2, x0
    abbc:	mov	w3, #0x403e                	// #16446
    abc0:	sub	w2, w3, w2
    abc4:	sxtw	x5, w2
    abc8:	mov	x6, x0
    abcc:	mov	x3, #0x406f                	// #16495
    abd0:	sub	x3, x3, x5
    abd4:	cmp	x3, #0x3f
    abd8:	b.gt	ac00 <__floatuntitf@@GCC_4.2.0+0x160>
    abdc:	mov	w4, #0x406f                	// #16495
    abe0:	sub	w4, w4, w2
    abe4:	sub	w2, w2, #0x4, lsl #12
    abe8:	sub	w2, w2, #0x2f
    abec:	lsr	x2, x6, x2
    abf0:	lsl	x1, x1, x4
    abf4:	orr	x1, x2, x1
    abf8:	lsl	x4, x6, x4
    abfc:	b	ac80 <__floatuntitf@@GCC_4.2.0+0x1e0>
    ac00:	mov	w1, #0x402f                	// #16431
    ac04:	sub	w1, w1, w2
    ac08:	lsl	x1, x0, x1
    ac0c:	b	ac80 <__floatuntitf@@GCC_4.2.0+0x1e0>
    ac10:	mov	x6, x0
    ac14:	mov	x3, #0x4072                	// #16498
    ac18:	sub	x3, x3, x5
    ac1c:	cmp	x3, #0x0
    ac20:	b.le	ab60 <__floatuntitf@@GCC_4.2.0+0xc0>
    ac24:	mov	w6, #0x4072                	// #16498
    ac28:	sub	w6, w6, w2
    ac2c:	sub	w4, w2, #0x4, lsl #12
    ac30:	sub	w4, w4, #0x32
    ac34:	lsr	x4, x0, x4
    ac38:	lsl	x1, x1, x6
    ac3c:	orr	x4, x4, x1
    ac40:	lsl	x6, x0, x6
    ac44:	b	ab60 <__floatuntitf@@GCC_4.2.0+0xc0>
    ac48:	and	x1, x6, #0xf
    ac4c:	mov	w0, #0x10                  	// #16
    ac50:	cmp	x1, #0x4
    ac54:	b.eq	ab84 <__floatuntitf@@GCC_4.2.0+0xe4>  // b.none
    ac58:	adds	x6, x6, #0x4
    ac5c:	cinc	x4, x4, cs  // cs = hs, nlast
    ac60:	b	ab84 <__floatuntitf@@GCC_4.2.0+0xe4>
    ac64:	adds	x6, x6, #0x8
    ac68:	cinc	x4, x4, cs  // cs = hs, nlast
    ac6c:	mov	w0, #0x10                  	// #16
    ac70:	b	ab84 <__floatuntitf@@GCC_4.2.0+0xe4>
    ac74:	mov	x1, #0x0                   	// #0
    ac78:	mov	x4, #0x0                   	// #0
    ac7c:	mov	x5, #0x0                   	// #0
    ac80:	mov	x3, #0x0                   	// #0
    ac84:	mov	x2, x4
    ac88:	bfxil	x3, x1, #0, #48
    ac8c:	bfi	x3, x5, #48, #15
    ac90:	and	x3, x3, #0x7fffffffffffffff
    ac94:	stp	x2, x3, [sp, #16]
    ac98:	ldr	q0, [sp, #16]
    ac9c:	ldp	x29, x30, [sp], #32
    aca0:	ret
    aca4:	mov	x6, x0
    aca8:	mov	x3, #0x406f                	// #16495
    acac:	sub	x3, x3, x5
    acb0:	cmp	x3, #0x0
    acb4:	b.gt	abdc <__floatuntitf@@GCC_4.2.0+0x13c>
    acb8:	mov	x4, x0
    acbc:	b	ac80 <__floatuntitf@@GCC_4.2.0+0x1e0>

000000000000acc0 <__extendsftf2@@GCC_3.0>:
    acc0:	stp	x29, x30, [sp, #-32]!
    acc4:	mov	x29, sp
    acc8:	mrs	x0, fpcr
    accc:	fmov	w0, s0
    acd0:	ubfx	x5, x0, #0, #23
    acd4:	and	x4, x0, #0x7fffff
    acd8:	ubfx	x1, x0, #23, #8
    acdc:	lsr	w0, w0, #31
    ace0:	add	x2, x1, #0x1
    ace4:	tst	x2, #0xfe
    ace8:	b.eq	ad1c <__extendsftf2@@GCC_3.0+0x5c>  // b.none
    acec:	add	x1, x1, #0x3, lsl #12
    acf0:	add	x1, x1, #0xf80
    acf4:	lsl	x4, x4, #25
    acf8:	mov	x2, #0x0                   	// #0
    acfc:	mov	x3, #0x0                   	// #0
    ad00:	bfxil	x3, x4, #0, #48
    ad04:	bfi	x3, x1, #48, #15
    ad08:	bfi	x3, x0, #63, #1
    ad0c:	stp	x2, x3, [sp, #16]
    ad10:	ldr	q0, [sp, #16]
    ad14:	ldp	x29, x30, [sp], #32
    ad18:	ret
    ad1c:	cbnz	x1, ad40 <__extendsftf2@@GCC_3.0+0x80>
    ad20:	cbz	x4, acf8 <__extendsftf2@@GCC_3.0+0x38>
    ad24:	clz	x2, x4
    ad28:	sub	w1, w2, #0xf
    ad2c:	lsl	x4, x4, x1
    ad30:	mov	w1, #0x3fa9                	// #16297
    ad34:	sub	w1, w1, w2
    ad38:	sxtw	x1, w1
    ad3c:	b	acf8 <__extendsftf2@@GCC_3.0+0x38>
    ad40:	cbz	x4, ad74 <__extendsftf2@@GCC_3.0+0xb4>
    ad44:	lsl	x4, x4, #25
    ad48:	mov	x2, #0x0                   	// #0
    ad4c:	mov	x3, #0x0                   	// #0
    ad50:	orr	x4, x4, #0x800000000000
    ad54:	bfxil	x3, x4, #0, #48
    ad58:	orr	x3, x3, #0x7fff000000000000
    ad5c:	bfi	x3, x0, #63, #1
    ad60:	stp	x2, x3, [sp, #16]
    ad64:	tbnz	w5, #22, ad10 <__extendsftf2@@GCC_3.0+0x50>
    ad68:	mov	w0, #0x1                   	// #1
    ad6c:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    ad70:	b	ad10 <__extendsftf2@@GCC_3.0+0x50>
    ad74:	mov	x1, #0x7fff                	// #32767
    ad78:	b	acf8 <__extendsftf2@@GCC_3.0+0x38>

000000000000ad7c <__extenddftf2@@GCC_3.0>:
    ad7c:	stp	x29, x30, [sp, #-32]!
    ad80:	mov	x29, sp
    ad84:	mrs	x0, fpcr
    ad88:	fmov	x0, d0
    ad8c:	ubfx	x4, x0, #0, #52
    ad90:	ubfx	x1, x0, #52, #11
    ad94:	lsr	x0, x0, #63
    ad98:	and	w0, w0, #0xff
    ad9c:	add	x2, x1, #0x1
    ada0:	tst	x2, #0x7fe
    ada4:	b.eq	addc <__extenddftf2@@GCC_3.0+0x60>  // b.none
    ada8:	add	x1, x1, #0x3, lsl #12
    adac:	add	x1, x1, #0xc00
    adb0:	lsr	x6, x4, #4
    adb4:	lsl	x5, x4, #60
    adb8:	mov	x3, #0x0                   	// #0
    adbc:	mov	x2, x5
    adc0:	bfxil	x3, x6, #0, #48
    adc4:	bfi	x3, x1, #48, #15
    adc8:	bfi	x3, x0, #63, #1
    adcc:	stp	x2, x3, [sp, #16]
    add0:	ldr	q0, [sp, #16]
    add4:	ldp	x29, x30, [sp], #32
    add8:	ret
    addc:	mov	x5, x4
    ade0:	cbnz	x1, ae2c <__extenddftf2@@GCC_3.0+0xb0>
    ade4:	mov	x6, x4
    ade8:	cbz	x4, adb8 <__extenddftf2@@GCC_3.0+0x3c>
    adec:	clz	x2, x4
    adf0:	cmp	w2, #0xe
    adf4:	b.gt	ae1c <__extenddftf2@@GCC_3.0+0xa0>
    adf8:	mov	w6, #0xf                   	// #15
    adfc:	sub	w6, w6, w2
    ae00:	lsr	x6, x4, x6
    ae04:	add	w5, w2, #0x31
    ae08:	lsl	x5, x4, x5
    ae0c:	mov	w1, #0x3c0c                	// #15372
    ae10:	sub	w1, w1, w2
    ae14:	sxtw	x1, w1
    ae18:	b	adb8 <__extenddftf2@@GCC_3.0+0x3c>
    ae1c:	sub	w6, w2, #0xf
    ae20:	lsl	x6, x4, x6
    ae24:	mov	x5, #0x0                   	// #0
    ae28:	b	ae0c <__extenddftf2@@GCC_3.0+0x90>
    ae2c:	cbz	x4, ae64 <__extenddftf2@@GCC_3.0+0xe8>
    ae30:	mov	x3, #0x0                   	// #0
    ae34:	lsl	x2, x4, #60
    ae38:	lsr	x1, x4, #4
    ae3c:	orr	x1, x1, #0x800000000000
    ae40:	bfxil	x3, x1, #0, #48
    ae44:	orr	x3, x3, #0x7fff000000000000
    ae48:	bfi	x3, x0, #63, #1
    ae4c:	stp	x2, x3, [sp, #16]
    ae50:	tst	x4, #0x8000000000000
    ae54:	b.ne	add0 <__extenddftf2@@GCC_3.0+0x54>  // b.any
    ae58:	mov	w0, #0x1                   	// #1
    ae5c:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    ae60:	b	add0 <__extenddftf2@@GCC_3.0+0x54>
    ae64:	mov	x6, x4
    ae68:	mov	x1, #0x7fff                	// #32767
    ae6c:	b	adb8 <__extenddftf2@@GCC_3.0+0x3c>
    ae70:	stp	x29, x30, [sp, #-32]!
    ae74:	mov	x29, sp
    ae78:	mrs	x0, fpcr
    ae7c:	umov	w1, v0.h[0]
    ae80:	mov	w0, #0x0                   	// #0
    ae84:	bfxil	w0, w1, #0, #16
    ae88:	and	w5, w0, #0x3ff
    ae8c:	and	x4, x0, #0x3ff
    ae90:	ubfx	x1, x0, #10, #5
    ae94:	ubfx	x0, x0, #15, #1
    ae98:	add	x2, x1, #0x1
    ae9c:	tst	x2, #0x1e
    aea0:	b.eq	aed4 <__extenddftf2@@GCC_3.0+0x158>  // b.none
    aea4:	add	x1, x1, #0x3, lsl #12
    aea8:	add	x1, x1, #0xff0
    aeac:	lsl	x4, x4, #38
    aeb0:	mov	x2, #0x0                   	// #0
    aeb4:	mov	x3, #0x0                   	// #0
    aeb8:	bfxil	x3, x4, #0, #48
    aebc:	bfi	x3, x1, #48, #15
    aec0:	bfi	x3, x0, #63, #1
    aec4:	stp	x2, x3, [sp, #16]
    aec8:	ldr	q0, [sp, #16]
    aecc:	ldp	x29, x30, [sp], #32
    aed0:	ret
    aed4:	cbnz	x1, aef8 <__extenddftf2@@GCC_3.0+0x17c>
    aed8:	cbz	x4, aeb0 <__extenddftf2@@GCC_3.0+0x134>
    aedc:	clz	x2, x4
    aee0:	sub	w1, w2, #0xf
    aee4:	lsl	x4, x4, x1
    aee8:	mov	w1, #0x4026                	// #16422
    aeec:	sub	w1, w1, w2
    aef0:	sxtw	x1, w1
    aef4:	b	aeb0 <__extenddftf2@@GCC_3.0+0x134>
    aef8:	cbz	x4, af2c <__extenddftf2@@GCC_3.0+0x1b0>
    aefc:	lsl	x4, x4, #38
    af00:	mov	x2, #0x0                   	// #0
    af04:	mov	x3, #0x0                   	// #0
    af08:	orr	x4, x4, #0x800000000000
    af0c:	bfxil	x3, x4, #0, #48
    af10:	orr	x3, x3, #0x7fff000000000000
    af14:	bfi	x3, x0, #63, #1
    af18:	stp	x2, x3, [sp, #16]
    af1c:	tbnz	w5, #9, aec8 <__extenddftf2@@GCC_3.0+0x14c>
    af20:	mov	w0, #0x1                   	// #1
    af24:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    af28:	b	aec8 <__extenddftf2@@GCC_3.0+0x14c>
    af2c:	mov	x1, #0x7fff                	// #32767
    af30:	b	aeb0 <__extenddftf2@@GCC_3.0+0x134>

000000000000af34 <__trunctfsf2@@GCC_3.0>:
    af34:	stp	x29, x30, [sp, #-48]!
    af38:	mov	x29, sp
    af3c:	str	x19, [sp, #16]
    af40:	str	q0, [sp, #32]
    af44:	ldr	x2, [sp, #32]
    af48:	ldr	x0, [sp, #40]
    af4c:	mrs	x5, fpcr
    af50:	ubfx	x3, x0, #48, #15
    af54:	lsr	x4, x0, #63
    af58:	and	w4, w4, #0xff
    af5c:	ubfiz	x0, x0, #3, #48
    af60:	orr	x1, x0, x2, lsr #61
    af64:	lsl	x2, x2, #3
    af68:	add	x0, x3, #0x1
    af6c:	tst	x0, #0x7ffe
    af70:	b.eq	b034 <__trunctfsf2@@GCC_3.0+0x100>  // b.none
    af74:	sub	x3, x3, #0x3, lsl #12
    af78:	sub	x3, x3, #0xf80
    af7c:	cmp	x3, #0xfe
    af80:	b.le	afbc <__trunctfsf2@@GCC_3.0+0x88>
    af84:	ands	x0, x5, #0xc00000
    af88:	b.eq	b188 <__trunctfsf2@@GCC_3.0+0x254>  // b.none
    af8c:	cmp	x0, #0x400, lsl #12
    af90:	csinc	w1, w4, wzr, eq  // eq = none
    af94:	cbz	w1, b198 <__trunctfsf2@@GCC_3.0+0x264>
    af98:	cmp	x0, #0x800, lsl #12
    af9c:	csel	w0, w4, wzr, eq  // eq = none
    afa0:	cbnz	w0, b1a0 <__trunctfsf2@@GCC_3.0+0x26c>
    afa4:	mov	x2, #0xffffffffffffffff    	// #-1
    afa8:	mov	x3, #0xfe                  	// #254
    afac:	mov	w0, #0x14                  	// #20
    afb0:	cmp	x3, #0x0
    afb4:	cset	w6, eq  // eq = none
    afb8:	b	b050 <__trunctfsf2@@GCC_3.0+0x11c>
    afbc:	cmp	x3, #0x0
    afc0:	b.le	afec <__trunctfsf2@@GCC_3.0+0xb8>
    afc4:	orr	x2, x2, x1, lsl #39
    afc8:	cmp	x2, #0x0
    afcc:	cset	x2, ne  // ne = any
    afd0:	orr	x2, x2, x1, lsr #25
    afd4:	mov	w0, #0x0                   	// #0
    afd8:	tst	x2, #0x7
    afdc:	b.eq	b13c <__trunctfsf2@@GCC_3.0+0x208>  // b.none
    afe0:	cmp	x3, #0x0
    afe4:	cset	w6, eq  // eq = none
    afe8:	b	b050 <__trunctfsf2@@GCC_3.0+0x11c>
    afec:	cmn	x3, #0x17
    aff0:	b.lt	b1b0 <__trunctfsf2@@GCC_3.0+0x27c>  // b.tstop
    aff4:	orr	x0, x1, #0x8000000000000
    aff8:	add	w1, w3, #0x26
    affc:	lsl	x1, x0, x1
    b000:	orr	x2, x1, x2
    b004:	cmp	x2, #0x0
    b008:	cset	x2, ne  // ne = any
    b00c:	mov	w1, #0x1a                  	// #26
    b010:	sub	w1, w1, w3
    b014:	lsr	x1, x0, x1
    b018:	orr	x2, x1, x2
    b01c:	tst	x2, #0x7
    b020:	b.eq	b1c0 <__trunctfsf2@@GCC_3.0+0x28c>  // b.none
    b024:	mov	w0, #0x0                   	// #0
    b028:	mov	w6, #0x1                   	// #1
    b02c:	mov	x3, #0x0                   	// #0
    b030:	b	b050 <__trunctfsf2@@GCC_3.0+0x11c>
    b034:	cbnz	x3, b074 <__trunctfsf2@@GCC_3.0+0x140>
    b038:	orr	x1, x1, x2
    b03c:	cmp	x1, #0x0
    b040:	cset	x2, ne  // ne = any
    b044:	mov	w0, #0x0                   	// #0
    b048:	mov	w6, #0x1                   	// #1
    b04c:	cbz	x1, b0bc <__trunctfsf2@@GCC_3.0+0x188>
    b050:	orr	w0, w0, #0x10
    b054:	and	x1, x5, #0xc00000
    b058:	cmp	x1, #0x400, lsl #12
    b05c:	b.eq	b0dc <__trunctfsf2@@GCC_3.0+0x1a8>  // b.none
    b060:	cmp	x1, #0x800, lsl #12
    b064:	b.eq	b0ec <__trunctfsf2@@GCC_3.0+0x1b8>  // b.none
    b068:	cbz	x1, b0a4 <__trunctfsf2@@GCC_3.0+0x170>
    b06c:	cbnz	w6, b0b8 <__trunctfsf2@@GCC_3.0+0x184>
    b070:	b	b0bc <__trunctfsf2@@GCC_3.0+0x188>
    b074:	orr	x2, x1, x2
    b078:	cbz	x2, b1a8 <__trunctfsf2@@GCC_3.0+0x274>
    b07c:	lsr	x0, x1, #50
    b080:	eor	w0, w0, #0x1
    b084:	mov	x2, #0x7fff                	// #32767
    b088:	cmp	x3, x2
    b08c:	csel	w0, w0, wzr, eq  // eq = none
    b090:	lsr	x1, x1, #25
    b094:	and	x1, x1, #0xfffffffffffffff8
    b098:	orr	x2, x1, #0x2000000
    b09c:	mov	x3, #0xff                  	// #255
    b0a0:	b	afd8 <__trunctfsf2@@GCC_3.0+0xa4>
    b0a4:	and	x7, x2, #0xf
    b0a8:	add	x1, x2, #0x4
    b0ac:	cmp	x7, #0x4
    b0b0:	csel	x2, x1, x2, ne  // ne = any
    b0b4:	cbz	w6, b0bc <__trunctfsf2@@GCC_3.0+0x188>
    b0b8:	orr	w0, w0, #0x8
    b0bc:	tbz	w2, #26, b13c <__trunctfsf2@@GCC_3.0+0x208>
    b0c0:	add	x3, x3, #0x1
    b0c4:	cmp	x3, #0xff
    b0c8:	b.eq	b108 <__trunctfsf2@@GCC_3.0+0x1d4>  // b.none
    b0cc:	mov	x1, #0xffffffffff7fffff    	// #-8388609
    b0d0:	movk	x1, #0x1fff, lsl #48
    b0d4:	and	x1, x1, x2, lsr #3
    b0d8:	b	b150 <__trunctfsf2@@GCC_3.0+0x21c>
    b0dc:	add	x1, x2, #0x8
    b0e0:	cmp	w4, #0x0
    b0e4:	csel	x2, x1, x2, eq  // eq = none
    b0e8:	b	b0b4 <__trunctfsf2@@GCC_3.0+0x180>
    b0ec:	add	x1, x2, #0x8
    b0f0:	cmp	w4, #0x0
    b0f4:	csel	x2, x1, x2, ne  // ne = any
    b0f8:	b	b0b4 <__trunctfsf2@@GCC_3.0+0x180>
    b0fc:	mov	w0, #0x0                   	// #0
    b100:	mov	x3, #0x0                   	// #0
    b104:	b	b0b8 <__trunctfsf2@@GCC_3.0+0x184>
    b108:	ands	x2, x5, #0xc00000
    b10c:	b.eq	b134 <__trunctfsf2@@GCC_3.0+0x200>  // b.none
    b110:	cmp	x2, #0x400, lsl #12
    b114:	csinc	w1, w4, wzr, eq  // eq = none
    b118:	cbz	w1, b178 <__trunctfsf2@@GCC_3.0+0x244>
    b11c:	cmp	x2, #0x800, lsl #12
    b120:	csel	w1, w4, wzr, eq  // eq = none
    b124:	cmp	w1, #0x0
    b128:	csetm	x2, eq  // eq = none
    b12c:	mov	x1, #0xfe                  	// #254
    b130:	csel	x3, x3, x1, ne  // ne = any
    b134:	mov	w1, #0x14                  	// #20
    b138:	orr	w0, w0, w1
    b13c:	lsr	x1, x2, #3
    b140:	cmp	x3, #0xff
    b144:	orr	x2, x1, #0x400000
    b148:	ccmp	x1, #0x0, #0x4, eq  // eq = none
    b14c:	csel	x1, x2, x1, ne  // ne = any
    b150:	mov	w2, #0x0                   	// #0
    b154:	bfxil	w2, w1, #0, #23
    b158:	bfi	w2, w3, #23, #8
    b15c:	bfi	w2, w4, #31, #1
    b160:	mov	w19, w2
    b164:	cbnz	w0, b180 <__trunctfsf2@@GCC_3.0+0x24c>
    b168:	fmov	s0, w19
    b16c:	ldr	x19, [sp, #16]
    b170:	ldp	x29, x30, [sp], #48
    b174:	ret
    b178:	mov	x2, #0x0                   	// #0
    b17c:	b	b134 <__trunctfsf2@@GCC_3.0+0x200>
    b180:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    b184:	b	b168 <__trunctfsf2@@GCC_3.0+0x234>
    b188:	mov	w0, #0x14                  	// #20
    b18c:	mov	x3, #0xff                  	// #255
    b190:	mov	x2, #0x0                   	// #0
    b194:	b	b0bc <__trunctfsf2@@GCC_3.0+0x188>
    b198:	mov	w0, #0x14                  	// #20
    b19c:	b	b18c <__trunctfsf2@@GCC_3.0+0x258>
    b1a0:	mov	w0, #0x14                  	// #20
    b1a4:	b	b18c <__trunctfsf2@@GCC_3.0+0x258>
    b1a8:	mov	w0, #0x0                   	// #0
    b1ac:	b	b18c <__trunctfsf2@@GCC_3.0+0x258>
    b1b0:	mov	x2, #0x1                   	// #1
    b1b4:	mov	x3, #0x0                   	// #0
    b1b8:	mov	w0, #0x0                   	// #0
    b1bc:	b	afb0 <__trunctfsf2@@GCC_3.0+0x7c>
    b1c0:	tbnz	w5, #11, b0fc <__trunctfsf2@@GCC_3.0+0x1c8>
    b1c4:	mov	x3, #0x0                   	// #0
    b1c8:	mov	w0, #0x0                   	// #0
    b1cc:	b	b0bc <__trunctfsf2@@GCC_3.0+0x188>

000000000000b1d0 <__trunctfdf2@@GCC_3.0>:
    b1d0:	stp	x29, x30, [sp, #-48]!
    b1d4:	mov	x29, sp
    b1d8:	str	d8, [sp, #16]
    b1dc:	str	q0, [sp, #32]
    b1e0:	ldr	x0, [sp, #32]
    b1e4:	ldr	x1, [sp, #40]
    b1e8:	mrs	x3, fpcr
    b1ec:	ubfx	x2, x1, #48, #15
    b1f0:	lsr	x4, x1, #63
    b1f4:	and	w4, w4, #0xff
    b1f8:	ubfiz	x1, x1, #3, #48
    b1fc:	orr	x1, x1, x0, lsr #61
    b200:	lsl	x5, x0, #3
    b204:	add	x6, x2, #0x1
    b208:	tst	x6, #0x7ffe
    b20c:	b.eq	b300 <__trunctfdf2@@GCC_3.0+0x130>  // b.none
    b210:	sub	x2, x2, #0x3, lsl #12
    b214:	sub	x2, x2, #0xc00
    b218:	cmp	x2, #0x7fe
    b21c:	b.le	b258 <__trunctfdf2@@GCC_3.0+0x88>
    b220:	ands	x0, x3, #0xc00000
    b224:	b.eq	b45c <__trunctfdf2@@GCC_3.0+0x28c>  // b.none
    b228:	cmp	x0, #0x400, lsl #12
    b22c:	csinc	w1, w4, wzr, eq  // eq = none
    b230:	cbz	w1, b46c <__trunctfdf2@@GCC_3.0+0x29c>
    b234:	cmp	x0, #0x800, lsl #12
    b238:	csel	w0, w4, wzr, eq  // eq = none
    b23c:	cbnz	w0, b474 <__trunctfdf2@@GCC_3.0+0x2a4>
    b240:	mov	x1, #0xffffffffffffffff    	// #-1
    b244:	mov	x2, #0x7fe                 	// #2046
    b248:	mov	w0, #0x14                  	// #20
    b24c:	cmp	x2, #0x0
    b250:	cset	w6, eq  // eq = none
    b254:	b	b328 <__trunctfdf2@@GCC_3.0+0x158>
    b258:	cmp	x2, #0x0
    b25c:	b.le	b288 <__trunctfdf2@@GCC_3.0+0xb8>
    b260:	cmp	xzr, x0, lsl #7
    b264:	cset	x0, ne  // ne = any
    b268:	orr	x0, x0, x5, lsr #60
    b26c:	orr	x1, x0, x1, lsl #4
    b270:	mov	w0, #0x0                   	// #0
    b274:	tst	x1, #0x7
    b278:	b.eq	b410 <__trunctfdf2@@GCC_3.0+0x240>  // b.none
    b27c:	cmp	x2, #0x0
    b280:	cset	w6, eq  // eq = none
    b284:	b	b328 <__trunctfdf2@@GCC_3.0+0x158>
    b288:	cmn	x2, #0x34
    b28c:	b.lt	b484 <__trunctfdf2@@GCC_3.0+0x2b4>  // b.tstop
    b290:	orr	x0, x1, #0x8000000000000
    b294:	mov	x1, #0x3d                  	// #61
    b298:	sub	x1, x1, x2
    b29c:	cmp	x1, #0x3f
    b2a0:	b.gt	b2d0 <__trunctfdf2@@GCC_3.0+0x100>
    b2a4:	add	w6, w2, #0x3
    b2a8:	mov	w1, #0x3d                  	// #61
    b2ac:	sub	w2, w1, w2
    b2b0:	lsr	x2, x5, x2
    b2b4:	lsl	x1, x5, x6
    b2b8:	cmp	x1, #0x0
    b2bc:	cset	x1, ne  // ne = any
    b2c0:	orr	x2, x2, x1
    b2c4:	lsl	x1, x0, x6
    b2c8:	orr	x1, x1, x2
    b2cc:	b	b310 <__trunctfdf2@@GCC_3.0+0x140>
    b2d0:	mov	w6, #0xfffffffd            	// #-3
    b2d4:	sub	w6, w6, w2
    b2d8:	lsr	x6, x0, x6
    b2dc:	add	w2, w2, #0x43
    b2e0:	lsl	x0, x0, x2
    b2e4:	cmp	x1, #0x40
    b2e8:	csel	x0, x0, xzr, ne  // ne = any
    b2ec:	orr	x0, x0, x5
    b2f0:	cmp	x0, #0x0
    b2f4:	cset	x1, ne  // ne = any
    b2f8:	orr	x1, x6, x1
    b2fc:	b	b310 <__trunctfdf2@@GCC_3.0+0x140>
    b300:	cbnz	x2, b34c <__trunctfdf2@@GCC_3.0+0x17c>
    b304:	orr	x1, x1, x5
    b308:	cmp	x1, #0x0
    b30c:	cset	x1, ne  // ne = any
    b310:	cmp	x1, #0x0
    b314:	cset	w6, ne  // ne = any
    b318:	tst	x1, #0x7
    b31c:	b.eq	b4a4 <__trunctfdf2@@GCC_3.0+0x2d4>  // b.none
    b320:	mov	w0, #0x0                   	// #0
    b324:	mov	x2, #0x0                   	// #0
    b328:	orr	w0, w0, #0x10
    b32c:	and	x5, x3, #0xc00000
    b330:	cmp	x5, #0x400, lsl #12
    b334:	b.eq	b3b0 <__trunctfdf2@@GCC_3.0+0x1e0>  // b.none
    b338:	cmp	x5, #0x800, lsl #12
    b33c:	b.eq	b3c0 <__trunctfdf2@@GCC_3.0+0x1f0>  // b.none
    b340:	cbz	x5, b37c <__trunctfdf2@@GCC_3.0+0x1ac>
    b344:	cbnz	w6, b390 <__trunctfdf2@@GCC_3.0+0x1c0>
    b348:	b	b394 <__trunctfdf2@@GCC_3.0+0x1c4>
    b34c:	orr	x0, x1, x5
    b350:	cbz	x0, b47c <__trunctfdf2@@GCC_3.0+0x2ac>
    b354:	lsr	x0, x1, #50
    b358:	eor	w0, w0, #0x1
    b35c:	mov	x6, #0x7fff                	// #32767
    b360:	cmp	x2, x6
    b364:	csel	w0, w0, wzr, eq  // eq = none
    b368:	extr	x1, x1, x5, #60
    b36c:	and	x1, x1, #0xfffffffffffffff8
    b370:	orr	x1, x1, #0x40000000000000
    b374:	mov	x2, #0x7ff                 	// #2047
    b378:	b	b274 <__trunctfdf2@@GCC_3.0+0xa4>
    b37c:	and	x7, x1, #0xf
    b380:	add	x5, x1, #0x4
    b384:	cmp	x7, #0x4
    b388:	csel	x1, x5, x1, ne  // ne = any
    b38c:	cbz	w6, b394 <__trunctfdf2@@GCC_3.0+0x1c4>
    b390:	orr	w0, w0, #0x8
    b394:	tbz	x1, #55, b410 <__trunctfdf2@@GCC_3.0+0x240>
    b398:	add	x2, x2, #0x1
    b39c:	cmp	x2, #0x7ff
    b3a0:	b.eq	b3dc <__trunctfdf2@@GCC_3.0+0x20c>  // b.none
    b3a4:	mov	x3, #0x1fefffffffffffff    	// #2301339409586323455
    b3a8:	and	x1, x3, x1, lsr #3
    b3ac:	b	b424 <__trunctfdf2@@GCC_3.0+0x254>
    b3b0:	add	x5, x1, #0x8
    b3b4:	cmp	w4, #0x0
    b3b8:	csel	x1, x5, x1, eq  // eq = none
    b3bc:	b	b38c <__trunctfdf2@@GCC_3.0+0x1bc>
    b3c0:	add	x5, x1, #0x8
    b3c4:	cmp	w4, #0x0
    b3c8:	csel	x1, x5, x1, ne  // ne = any
    b3cc:	b	b38c <__trunctfdf2@@GCC_3.0+0x1bc>
    b3d0:	mov	w0, #0x0                   	// #0
    b3d4:	mov	x2, #0x0                   	// #0
    b3d8:	b	b390 <__trunctfdf2@@GCC_3.0+0x1c0>
    b3dc:	ands	x1, x3, #0xc00000
    b3e0:	b.eq	b408 <__trunctfdf2@@GCC_3.0+0x238>  // b.none
    b3e4:	cmp	x1, #0x400, lsl #12
    b3e8:	csinc	w3, w4, wzr, eq  // eq = none
    b3ec:	cbz	w3, b44c <__trunctfdf2@@GCC_3.0+0x27c>
    b3f0:	cmp	x1, #0x800, lsl #12
    b3f4:	csel	w3, w4, wzr, eq  // eq = none
    b3f8:	cmp	w3, #0x0
    b3fc:	csetm	x1, eq  // eq = none
    b400:	mov	x3, #0x7fe                 	// #2046
    b404:	csel	x2, x2, x3, ne  // ne = any
    b408:	mov	w3, #0x14                  	// #20
    b40c:	orr	w0, w0, w3
    b410:	lsr	x1, x1, #3
    b414:	cmp	x2, #0x7ff
    b418:	orr	x3, x1, #0x8000000000000
    b41c:	ccmp	x1, #0x0, #0x4, eq  // eq = none
    b420:	csel	x1, x3, x1, ne  // ne = any
    b424:	mov	x3, #0x0                   	// #0
    b428:	bfxil	x3, x1, #0, #52
    b42c:	bfi	x3, x2, #52, #11
    b430:	bfi	x3, x4, #63, #1
    b434:	fmov	d8, x3
    b438:	cbnz	w0, b454 <__trunctfdf2@@GCC_3.0+0x284>
    b43c:	fmov	d0, d8
    b440:	ldr	d8, [sp, #16]
    b444:	ldp	x29, x30, [sp], #48
    b448:	ret
    b44c:	mov	x1, #0x0                   	// #0
    b450:	b	b408 <__trunctfdf2@@GCC_3.0+0x238>
    b454:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    b458:	b	b43c <__trunctfdf2@@GCC_3.0+0x26c>
    b45c:	mov	w0, #0x14                  	// #20
    b460:	mov	x2, #0x7ff                 	// #2047
    b464:	mov	x1, #0x0                   	// #0
    b468:	b	b394 <__trunctfdf2@@GCC_3.0+0x1c4>
    b46c:	mov	w0, #0x14                  	// #20
    b470:	b	b460 <__trunctfdf2@@GCC_3.0+0x290>
    b474:	mov	w0, #0x14                  	// #20
    b478:	b	b460 <__trunctfdf2@@GCC_3.0+0x290>
    b47c:	mov	w0, #0x0                   	// #0
    b480:	b	b460 <__trunctfdf2@@GCC_3.0+0x290>
    b484:	mov	x1, #0x1                   	// #1
    b488:	mov	x2, #0x0                   	// #0
    b48c:	mov	w0, #0x0                   	// #0
    b490:	b	b24c <__trunctfdf2@@GCC_3.0+0x7c>
    b494:	tbnz	w3, #11, b3d0 <__trunctfdf2@@GCC_3.0+0x200>
    b498:	mov	x2, #0x0                   	// #0
    b49c:	mov	w0, #0x0                   	// #0
    b4a0:	b	b394 <__trunctfdf2@@GCC_3.0+0x1c4>
    b4a4:	cbnz	x1, b494 <__trunctfdf2@@GCC_3.0+0x2c4>
    b4a8:	mov	x2, #0x0                   	// #0
    b4ac:	mov	w0, #0x0                   	// #0
    b4b0:	b	b394 <__trunctfdf2@@GCC_3.0+0x1c4>
    b4b4:	stp	x29, x30, [sp, #-48]!
    b4b8:	mov	x29, sp
    b4bc:	str	x19, [sp, #16]
    b4c0:	str	q0, [sp, #32]
    b4c4:	ldr	x2, [sp, #32]
    b4c8:	ldr	x0, [sp, #40]
    b4cc:	mrs	x5, fpcr
    b4d0:	ubfx	x3, x0, #48, #15
    b4d4:	lsr	x4, x0, #63
    b4d8:	and	w4, w4, #0xff
    b4dc:	ubfiz	x0, x0, #3, #48
    b4e0:	orr	x1, x0, x2, lsr #61
    b4e4:	lsl	x2, x2, #3
    b4e8:	add	x0, x3, #0x1
    b4ec:	tst	x0, #0x7ffe
    b4f0:	b.eq	b5b4 <__trunctfdf2@@GCC_3.0+0x3e4>  // b.none
    b4f4:	sub	x3, x3, #0x3, lsl #12
    b4f8:	sub	x3, x3, #0xff0
    b4fc:	cmp	x3, #0x1e
    b500:	b.le	b53c <__trunctfdf2@@GCC_3.0+0x36c>
    b504:	ands	x0, x5, #0xc00000
    b508:	b.eq	b708 <__trunctfdf2@@GCC_3.0+0x538>  // b.none
    b50c:	cmp	x0, #0x400, lsl #12
    b510:	csinc	w1, w4, wzr, eq  // eq = none
    b514:	cbz	w1, b718 <__trunctfdf2@@GCC_3.0+0x548>
    b518:	cmp	x0, #0x800, lsl #12
    b51c:	csel	w0, w4, wzr, eq  // eq = none
    b520:	cbnz	w0, b720 <__trunctfdf2@@GCC_3.0+0x550>
    b524:	mov	x2, #0xffffffffffffffff    	// #-1
    b528:	mov	x3, #0x1e                  	// #30
    b52c:	mov	w0, #0x14                  	// #20
    b530:	cmp	x3, #0x0
    b534:	cset	w6, eq  // eq = none
    b538:	b	b5d0 <__trunctfdf2@@GCC_3.0+0x400>
    b53c:	cmp	x3, #0x0
    b540:	b.le	b56c <__trunctfdf2@@GCC_3.0+0x39c>
    b544:	orr	x2, x2, x1, lsl #26
    b548:	cmp	x2, #0x0
    b54c:	cset	x2, ne  // ne = any
    b550:	orr	x2, x2, x1, lsr #38
    b554:	mov	w0, #0x0                   	// #0
    b558:	tst	x2, #0x7
    b55c:	b.eq	b6bc <__trunctfdf2@@GCC_3.0+0x4ec>  // b.none
    b560:	cmp	x3, #0x0
    b564:	cset	w6, eq  // eq = none
    b568:	b	b5d0 <__trunctfdf2@@GCC_3.0+0x400>
    b56c:	cmn	x3, #0xa
    b570:	b.lt	b730 <__trunctfdf2@@GCC_3.0+0x560>  // b.tstop
    b574:	orr	x0, x1, #0x8000000000000
    b578:	add	w1, w3, #0x19
    b57c:	lsl	x1, x0, x1
    b580:	orr	x2, x1, x2
    b584:	cmp	x2, #0x0
    b588:	cset	x2, ne  // ne = any
    b58c:	mov	w1, #0x27                  	// #39
    b590:	sub	w1, w1, w3
    b594:	lsr	x1, x0, x1
    b598:	orr	x2, x1, x2
    b59c:	tst	x2, #0x7
    b5a0:	b.eq	b740 <__trunctfdf2@@GCC_3.0+0x570>  // b.none
    b5a4:	mov	w0, #0x0                   	// #0
    b5a8:	mov	w6, #0x1                   	// #1
    b5ac:	mov	x3, #0x0                   	// #0
    b5b0:	b	b5d0 <__trunctfdf2@@GCC_3.0+0x400>
    b5b4:	cbnz	x3, b5f4 <__trunctfdf2@@GCC_3.0+0x424>
    b5b8:	orr	x1, x1, x2
    b5bc:	cmp	x1, #0x0
    b5c0:	cset	x2, ne  // ne = any
    b5c4:	mov	w0, #0x0                   	// #0
    b5c8:	mov	w6, #0x1                   	// #1
    b5cc:	cbz	x1, b63c <__trunctfdf2@@GCC_3.0+0x46c>
    b5d0:	orr	w0, w0, #0x10
    b5d4:	and	x1, x5, #0xc00000
    b5d8:	cmp	x1, #0x400, lsl #12
    b5dc:	b.eq	b65c <__trunctfdf2@@GCC_3.0+0x48c>  // b.none
    b5e0:	cmp	x1, #0x800, lsl #12
    b5e4:	b.eq	b66c <__trunctfdf2@@GCC_3.0+0x49c>  // b.none
    b5e8:	cbz	x1, b624 <__trunctfdf2@@GCC_3.0+0x454>
    b5ec:	cbnz	w6, b638 <__trunctfdf2@@GCC_3.0+0x468>
    b5f0:	b	b63c <__trunctfdf2@@GCC_3.0+0x46c>
    b5f4:	orr	x2, x1, x2
    b5f8:	cbz	x2, b728 <__trunctfdf2@@GCC_3.0+0x558>
    b5fc:	lsr	x0, x1, #50
    b600:	eor	w0, w0, #0x1
    b604:	mov	x2, #0x7fff                	// #32767
    b608:	cmp	x3, x2
    b60c:	csel	w0, w0, wzr, eq  // eq = none
    b610:	lsr	x1, x1, #38
    b614:	and	x1, x1, #0xfffffffffffffff8
    b618:	orr	x2, x1, #0x1000
    b61c:	mov	x3, #0x1f                  	// #31
    b620:	b	b558 <__trunctfdf2@@GCC_3.0+0x388>
    b624:	and	x7, x2, #0xf
    b628:	add	x1, x2, #0x4
    b62c:	cmp	x7, #0x4
    b630:	csel	x2, x1, x2, ne  // ne = any
    b634:	cbz	w6, b63c <__trunctfdf2@@GCC_3.0+0x46c>
    b638:	orr	w0, w0, #0x8
    b63c:	tbz	w2, #13, b6bc <__trunctfdf2@@GCC_3.0+0x4ec>
    b640:	add	x3, x3, #0x1
    b644:	cmp	x3, #0x1f
    b648:	b.eq	b688 <__trunctfdf2@@GCC_3.0+0x4b8>  // b.none
    b64c:	mov	x1, #0xfffffffffffffbff    	// #-1025
    b650:	movk	x1, #0x1fff, lsl #48
    b654:	and	x1, x1, x2, lsr #3
    b658:	b	b6d0 <__trunctfdf2@@GCC_3.0+0x500>
    b65c:	add	x1, x2, #0x8
    b660:	cmp	w4, #0x0
    b664:	csel	x2, x1, x2, eq  // eq = none
    b668:	b	b634 <__trunctfdf2@@GCC_3.0+0x464>
    b66c:	add	x1, x2, #0x8
    b670:	cmp	w4, #0x0
    b674:	csel	x2, x1, x2, ne  // ne = any
    b678:	b	b634 <__trunctfdf2@@GCC_3.0+0x464>
    b67c:	mov	w0, #0x0                   	// #0
    b680:	mov	x3, #0x0                   	// #0
    b684:	b	b638 <__trunctfdf2@@GCC_3.0+0x468>
    b688:	ands	x2, x5, #0xc00000
    b68c:	b.eq	b6b4 <__trunctfdf2@@GCC_3.0+0x4e4>  // b.none
    b690:	cmp	x2, #0x400, lsl #12
    b694:	csinc	w1, w4, wzr, eq  // eq = none
    b698:	cbz	w1, b6f8 <__trunctfdf2@@GCC_3.0+0x528>
    b69c:	cmp	x2, #0x800, lsl #12
    b6a0:	csel	w1, w4, wzr, eq  // eq = none
    b6a4:	cmp	w1, #0x0
    b6a8:	csetm	x2, eq  // eq = none
    b6ac:	mov	x1, #0x1e                  	// #30
    b6b0:	csel	x3, x3, x1, ne  // ne = any
    b6b4:	mov	w1, #0x14                  	// #20
    b6b8:	orr	w0, w0, w1
    b6bc:	lsr	x1, x2, #3
    b6c0:	cmp	x1, #0x0
    b6c4:	orr	x2, x1, #0x200
    b6c8:	ccmp	x3, #0x1f, #0x0, ne  // ne = any
    b6cc:	csel	x1, x2, x1, eq  // eq = none
    b6d0:	mov	w2, #0x0                   	// #0
    b6d4:	bfxil	w2, w1, #0, #10
    b6d8:	bfi	w2, w3, #10, #5
    b6dc:	bfi	w2, w4, #15, #1
    b6e0:	sxth	x19, w2
    b6e4:	cbnz	w0, b700 <__trunctfdf2@@GCC_3.0+0x530>
    b6e8:	dup	v0.4h, w19
    b6ec:	ldr	x19, [sp, #16]
    b6f0:	ldp	x29, x30, [sp], #48
    b6f4:	ret
    b6f8:	mov	x2, #0x0                   	// #0
    b6fc:	b	b6b4 <__trunctfdf2@@GCC_3.0+0x4e4>
    b700:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    b704:	b	b6e8 <__trunctfdf2@@GCC_3.0+0x518>
    b708:	mov	w0, #0x14                  	// #20
    b70c:	mov	x3, #0x1f                  	// #31
    b710:	mov	x2, #0x0                   	// #0
    b714:	b	b63c <__trunctfdf2@@GCC_3.0+0x46c>
    b718:	mov	w0, #0x14                  	// #20
    b71c:	b	b70c <__trunctfdf2@@GCC_3.0+0x53c>
    b720:	mov	w0, #0x14                  	// #20
    b724:	b	b70c <__trunctfdf2@@GCC_3.0+0x53c>
    b728:	mov	w0, #0x0                   	// #0
    b72c:	b	b70c <__trunctfdf2@@GCC_3.0+0x53c>
    b730:	mov	x2, #0x1                   	// #1
    b734:	mov	x3, #0x0                   	// #0
    b738:	mov	w0, #0x0                   	// #0
    b73c:	b	b530 <__trunctfdf2@@GCC_3.0+0x360>
    b740:	tbnz	w5, #11, b67c <__trunctfdf2@@GCC_3.0+0x4ac>
    b744:	mov	x3, #0x0                   	// #0
    b748:	mov	w0, #0x0                   	// #0
    b74c:	b	b63c <__trunctfdf2@@GCC_3.0+0x46c>
    b750:	stp	x29, x30, [sp, #-32]!
    b754:	mov	x29, sp
    b758:	stp	x19, x20, [sp, #16]
    b75c:	mrs	x0, fpcr
    b760:	umov	w0, v0.h[0]
    b764:	mov	w1, #0x0                   	// #0
    b768:	bfxil	w1, w0, #0, #16
    b76c:	and	x19, x1, #0x3ff
    b770:	ubfx	x0, x1, #10, #5
    b774:	ubfx	x1, x1, #15, #1
    b778:	cmp	x0, #0xe
    b77c:	b.gt	b7a8 <__trunctfdf2@@GCC_3.0+0x5d8>
    b780:	and	x0, x0, #0xff
    b784:	orr	x0, x0, x19
    b788:	cbnz	x0, b85c <__trunctfdf2@@GCC_3.0+0x68c>
    b78c:	mov	x19, #0x0                   	// #0
    b790:	mov	x20, #0x0                   	// #0
    b794:	mov	x0, x19
    b798:	mov	x1, x20
    b79c:	ldp	x19, x20, [sp, #16]
    b7a0:	ldp	x29, x30, [sp], #32
    b7a4:	ret
    b7a8:	mov	x3, x0
    b7ac:	and	x1, x1, #0xff
    b7b0:	cmp	x0, #0x1e
    b7b4:	b.le	b7e4 <__trunctfdf2@@GCC_3.0+0x614>
    b7b8:	mov	x0, #0x1                   	// #1
    b7bc:	sub	x1, x0, x1
    b7c0:	asr	x3, x1, #63
    b7c4:	adrp	x2, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    b7c8:	add	x4, x2, #0xae0
    b7cc:	ldr	x19, [x2, #2784]
    b7d0:	ldr	x20, [x4, #8]
    b7d4:	subs	x19, x19, x1
    b7d8:	sbc	x20, x20, x3
    b7dc:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    b7e0:	b	b794 <__trunctfdf2@@GCC_3.0+0x5c4>
    b7e4:	orr	x19, x19, #0x400
    b7e8:	cmp	x0, #0x18
    b7ec:	b.le	b824 <__trunctfdf2@@GCC_3.0+0x654>
    b7f0:	sub	w4, w0, #0x19
    b7f4:	subs	w3, w0, #0x59
    b7f8:	lsl	x20, x19, x3
    b7fc:	lsr	x0, x19, #1
    b800:	mov	w2, #0x3f                  	// #63
    b804:	sub	w2, w2, w4
    b808:	lsr	x0, x0, x2
    b80c:	lsl	x19, x19, x4
    b810:	csel	x20, x20, x0, pl  // pl = nfrst
    b814:	csel	x19, xzr, x19, pl  // pl = nfrst
    b818:	cbz	x1, b794 <__trunctfdf2@@GCC_3.0+0x5c4>
    b81c:	mov	w2, #0x0                   	// #0
    b820:	b	b848 <__trunctfdf2@@GCC_3.0+0x678>
    b824:	add	w0, w0, #0x27
    b828:	lsl	x0, x19, x0
    b82c:	cmp	x0, #0x0
    b830:	cset	w2, ne  // ne = any
    b834:	mov	w0, #0x19                  	// #25
    b838:	sub	w3, w0, w3
    b83c:	lsr	x19, x19, x3
    b840:	mov	x20, #0x0                   	// #0
    b844:	cbz	x1, b850 <__trunctfdf2@@GCC_3.0+0x680>
    b848:	negs	x19, x19
    b84c:	ngc	x20, x20
    b850:	mov	w0, #0x10                  	// #16
    b854:	cbnz	w2, b7dc <__trunctfdf2@@GCC_3.0+0x60c>
    b858:	b	b794 <__trunctfdf2@@GCC_3.0+0x5c4>
    b85c:	mov	x19, #0x0                   	// #0
    b860:	mov	x20, #0x0                   	// #0
    b864:	mov	w0, #0x10                  	// #16
    b868:	b	b7dc <__trunctfdf2@@GCC_3.0+0x60c>
    b86c:	stp	x29, x30, [sp, #-32]!
    b870:	mov	x29, sp
    b874:	stp	x19, x20, [sp, #16]
    b878:	mrs	x0, fpcr
    b87c:	umov	w1, v0.h[0]
    b880:	mov	w0, #0x0                   	// #0
    b884:	bfxil	w0, w1, #0, #16
    b888:	and	x2, x0, #0x3ff
    b88c:	ubfx	x1, x0, #10, #5
    b890:	ubfx	x0, x0, #15, #1
    b894:	cmp	x1, #0xe
    b898:	b.gt	b8c4 <__trunctfdf2@@GCC_3.0+0x6f4>
    b89c:	and	x1, x1, #0xff
    b8a0:	orr	x1, x1, x2
    b8a4:	cbnz	x1, b944 <__trunctfdf2@@GCC_3.0+0x774>
    b8a8:	mov	x20, #0x0                   	// #0
    b8ac:	mov	x19, #0x0                   	// #0
    b8b0:	mov	x0, x20
    b8b4:	mov	x1, x19
    b8b8:	ldp	x19, x20, [sp, #16]
    b8bc:	ldp	x29, x30, [sp], #32
    b8c0:	ret
    b8c4:	mov	x4, x1
    b8c8:	ands	x0, x0, #0xff
    b8cc:	ccmp	x1, #0x1e, #0x0, eq  // eq = none
    b8d0:	b.le	b8e8 <__trunctfdf2@@GCC_3.0+0x718>
    b8d4:	sub	x20, x0, #0x1
    b8d8:	mov	x19, x20
    b8dc:	mov	w0, #0x1                   	// #1
    b8e0:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    b8e4:	b	b8b0 <__trunctfdf2@@GCC_3.0+0x6e0>
    b8e8:	orr	x1, x2, #0x400
    b8ec:	cmp	x4, #0x18
    b8f0:	b.le	b920 <__trunctfdf2@@GCC_3.0+0x750>
    b8f4:	sub	w20, w4, #0x19
    b8f8:	subs	w4, w4, #0x59
    b8fc:	lsl	x19, x1, x4
    b900:	lsr	x0, x1, #1
    b904:	mov	w2, #0x3f                  	// #63
    b908:	sub	w2, w2, w20
    b90c:	lsr	x0, x0, x2
    b910:	lsl	x20, x1, x20
    b914:	csel	x19, x19, x0, pl  // pl = nfrst
    b918:	csel	x20, xzr, x20, pl  // pl = nfrst
    b91c:	b	b8b0 <__trunctfdf2@@GCC_3.0+0x6e0>
    b920:	mov	w20, #0x19                  	// #25
    b924:	sub	w20, w20, w4
    b928:	lsr	x20, x1, x20
    b92c:	mov	x19, #0x0                   	// #0
    b930:	add	w4, w4, #0x27
    b934:	lsl	x1, x1, x4
    b938:	cbz	x1, b8b0 <__trunctfdf2@@GCC_3.0+0x6e0>
    b93c:	mov	w0, #0x10                  	// #16
    b940:	b	b8e0 <__trunctfdf2@@GCC_3.0+0x710>
    b944:	mov	x20, #0x0                   	// #0
    b948:	mov	x19, #0x0                   	// #0
    b94c:	mov	w0, #0x10                  	// #16
    b950:	b	b8e0 <__trunctfdf2@@GCC_3.0+0x710>
    b954:	stp	x29, x30, [sp, #-32]!
    b958:	mov	x29, sp
    b95c:	str	x19, [sp, #16]
    b960:	mrs	x8, fpcr
    b964:	orr	x3, x0, x1
    b968:	cbz	x3, bbbc <__trunctfdf2@@GCC_3.0+0x9ec>
    b96c:	mov	x7, x1
    b970:	lsr	x4, x1, #63
    b974:	and	w9, w4, #0xff
    b978:	tbnz	x1, #63, b9c4 <__trunctfdf2@@GCC_3.0+0x7f4>
    b97c:	cbnz	x7, b9d0 <__trunctfdf2@@GCC_3.0+0x800>
    b980:	mov	x3, x0
    b984:	clz	x5, x0
    b988:	mov	w6, #0x4e                  	// #78
    b98c:	sub	w5, w6, w5
    b990:	sxtw	x6, w5
    b994:	cmp	w5, #0x1e
    b998:	b.gt	b9d0 <__trunctfdf2@@GCC_3.0+0x800>
    b99c:	cmp	x6, #0x19
    b9a0:	b.gt	ba0c <__trunctfdf2@@GCC_3.0+0x83c>
    b9a4:	mov	x1, #0x19                  	// #25
    b9a8:	sub	x1, x1, x6
    b9ac:	mov	w0, #0x19                  	// #25
    b9b0:	sub	w5, w0, w5
    b9b4:	lsl	x5, x3, x5
    b9b8:	cmp	x1, #0x0
    b9bc:	csel	x3, x5, x3, gt
    b9c0:	b	bbc8 <__trunctfdf2@@GCC_3.0+0x9f8>
    b9c4:	negs	x0, x0
    b9c8:	ngc	x7, x1
    b9cc:	b	b97c <__trunctfdf2@@GCC_3.0+0x7ac>
    b9d0:	ands	x2, x8, #0xc00000
    b9d4:	b.eq	bb5c <__trunctfdf2@@GCC_3.0+0x98c>  // b.none
    b9d8:	cmp	x2, #0x400, lsl #12
    b9dc:	cset	w3, eq  // eq = none
    b9e0:	mvn	x0, x1
    b9e4:	lsr	x0, x0, #63
    b9e8:	tst	w3, w0
    b9ec:	b.ne	bb9c <__trunctfdf2@@GCC_3.0+0x9cc>  // b.any
    b9f0:	cmp	x2, #0x800, lsl #12
    b9f4:	ccmp	w9, #0x0, #0x4, eq  // eq = none
    b9f8:	b.ne	bbac <__trunctfdf2@@GCC_3.0+0x9dc>  // b.any
    b9fc:	mov	x2, #0xffffffffffffffff    	// #-1
    ba00:	mov	w0, #0x14                  	// #20
    ba04:	mov	x6, #0x1e                  	// #30
    ba08:	b	baac <__trunctfdf2@@GCC_3.0+0x8dc>
    ba0c:	cmp	x6, #0x1c
    ba10:	b.le	ba80 <__trunctfdf2@@GCC_3.0+0x8b0>
    ba14:	sub	w3, w5, #0x1c
    ba18:	subs	w10, w5, #0x5c
    ba1c:	lsr	x11, x7, x10
    ba20:	lsl	x2, x7, #1
    ba24:	mov	w4, #0x3f                  	// #63
    ba28:	sub	w12, w4, w3
    ba2c:	lsl	x2, x2, x12
    ba30:	lsr	x3, x0, x3
    ba34:	orr	x3, x2, x3
    ba38:	csel	x3, x11, x3, pl  // pl = nfrst
    ba3c:	mov	w2, #0x9c                  	// #156
    ba40:	sub	w5, w2, w5
    ba44:	subs	w2, w5, #0x40
    ba48:	lsl	x11, x0, x2
    ba4c:	lsr	x10, x0, #1
    ba50:	sub	w4, w4, w5
    ba54:	lsr	x4, x10, x4
    ba58:	lsl	x7, x7, x5
    ba5c:	orr	x7, x4, x7
    ba60:	lsl	x0, x0, x5
    ba64:	csel	x7, x11, x7, pl  // pl = nfrst
    ba68:	csel	x0, xzr, x0, pl  // pl = nfrst
    ba6c:	orr	x0, x0, x7
    ba70:	cmp	x0, #0x0
    ba74:	cset	x0, ne  // ne = any
    ba78:	orr	x3, x3, x0
    ba7c:	b	ba9c <__trunctfdf2@@GCC_3.0+0x8cc>
    ba80:	mov	x0, #0x1c                  	// #28
    ba84:	sub	x0, x0, x6
    ba88:	cmp	x0, #0x0
    ba8c:	b.le	ba9c <__trunctfdf2@@GCC_3.0+0x8cc>
    ba90:	mov	w0, #0x1c                  	// #28
    ba94:	sub	w5, w0, w5
    ba98:	lsl	x3, x3, x5
    ba9c:	and	x2, x3, #0xffffffffffffdfff
    baa0:	tst	x3, #0x7
    baa4:	b.eq	bbf4 <__trunctfdf2@@GCC_3.0+0xa24>  // b.none
    baa8:	mov	w0, #0x0                   	// #0
    baac:	orr	w0, w0, #0x10
    bab0:	and	x3, x8, #0xc00000
    bab4:	cmp	x3, #0x400, lsl #12
    bab8:	b.eq	bafc <__trunctfdf2@@GCC_3.0+0x92c>  // b.none
    babc:	cmp	x3, #0x800, lsl #12
    bac0:	b.eq	bb0c <__trunctfdf2@@GCC_3.0+0x93c>  // b.none
    bac4:	cbz	x3, bae8 <__trunctfdf2@@GCC_3.0+0x918>
    bac8:	tbz	w2, #13, bb64 <__trunctfdf2@@GCC_3.0+0x994>
    bacc:	add	x6, x6, #0x1
    bad0:	cmp	x6, #0x1f
    bad4:	b.eq	bb1c <__trunctfdf2@@GCC_3.0+0x94c>  // b.none
    bad8:	mov	x1, #0xfffffffffffffbff    	// #-1025
    badc:	movk	x1, #0x1fff, lsl #48
    bae0:	and	x2, x1, x2, lsr #3
    bae4:	b	bb7c <__trunctfdf2@@GCC_3.0+0x9ac>
    bae8:	and	x4, x2, #0xf
    baec:	add	x3, x2, #0x4
    baf0:	cmp	x4, #0x4
    baf4:	csel	x2, x3, x2, ne  // ne = any
    baf8:	b	bac8 <__trunctfdf2@@GCC_3.0+0x8f8>
    bafc:	add	x3, x2, #0x8
    bb00:	cmp	x1, #0x0
    bb04:	csel	x2, x3, x2, ge  // ge = tcont
    bb08:	b	bac8 <__trunctfdf2@@GCC_3.0+0x8f8>
    bb0c:	add	x3, x2, #0x8
    bb10:	cmp	x1, #0x0
    bb14:	csel	x2, x3, x2, lt  // lt = tstop
    bb18:	b	bac8 <__trunctfdf2@@GCC_3.0+0x8f8>
    bb1c:	ands	x2, x8, #0xc00000
    bb20:	b.eq	bb50 <__trunctfdf2@@GCC_3.0+0x980>  // b.none
    bb24:	mvn	x0, x1
    bb28:	lsr	x0, x0, #63
    bb2c:	cmp	x2, #0x400, lsl #12
    bb30:	cset	w1, eq  // eq = none
    bb34:	tst	w1, w0
    bb38:	b.ne	bbec <__trunctfdf2@@GCC_3.0+0xa1c>  // b.any
    bb3c:	cmp	x2, #0x800, lsl #12
    bb40:	ccmp	w9, #0x0, #0x4, eq  // eq = none
    bb44:	csetm	x2, eq  // eq = none
    bb48:	mov	x0, #0x1e                  	// #30
    bb4c:	csel	x6, x6, x0, ne  // ne = any
    bb50:	lsr	x2, x2, #3
    bb54:	mov	w0, #0x14                  	// #20
    bb58:	b	bb7c <__trunctfdf2@@GCC_3.0+0x9ac>
    bb5c:	mov	x6, #0x1f                  	// #31
    bb60:	mov	w0, #0x14                  	// #20
    bb64:	lsr	x2, x2, #3
    bb68:	cmp	x2, #0x0
    bb6c:	ccmp	x6, #0x1f, #0x0, ne  // ne = any
    bb70:	mov	x1, x2
    bb74:	orr	x2, x2, #0x200
    bb78:	csel	x2, x2, x1, eq  // eq = none
    bb7c:	mov	w1, #0x0                   	// #0
    bb80:	bfxil	w1, w2, #0, #10
    bb84:	bfi	w1, w6, #10, #5
    bb88:	bfi	w1, w9, #15, #1
    bb8c:	sxth	x19, w1
    bb90:	cbz	w0, bbdc <__trunctfdf2@@GCC_3.0+0xa0c>
    bb94:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    bb98:	b	bbdc <__trunctfdf2@@GCC_3.0+0xa0c>
    bb9c:	mov	x2, #0x0                   	// #0
    bba0:	mov	x6, #0x1f                  	// #31
    bba4:	mov	w0, #0x14                  	// #20
    bba8:	b	bb64 <__trunctfdf2@@GCC_3.0+0x994>
    bbac:	mov	x2, #0x0                   	// #0
    bbb0:	mov	x6, #0x1f                  	// #31
    bbb4:	mov	w0, #0x14                  	// #20
    bbb8:	b	bb64 <__trunctfdf2@@GCC_3.0+0x994>
    bbbc:	mov	x3, #0x0                   	// #0
    bbc0:	mov	x6, #0x0                   	// #0
    bbc4:	mov	x4, #0x0                   	// #0
    bbc8:	mov	w1, #0x0                   	// #0
    bbcc:	bfxil	w1, w3, #0, #10
    bbd0:	bfi	w1, w6, #10, #5
    bbd4:	bfi	w1, w4, #15, #1
    bbd8:	sxth	x19, w1
    bbdc:	dup	v0.4h, w19
    bbe0:	ldr	x19, [sp, #16]
    bbe4:	ldp	x29, x30, [sp], #32
    bbe8:	ret
    bbec:	mov	x2, #0x0                   	// #0
    bbf0:	b	bb50 <__trunctfdf2@@GCC_3.0+0x980>
    bbf4:	lsr	x2, x2, #3
    bbf8:	mov	w0, #0x0                   	// #0
    bbfc:	b	bb7c <__trunctfdf2@@GCC_3.0+0x9ac>
    bc00:	stp	x29, x30, [sp, #-32]!
    bc04:	mov	x29, sp
    bc08:	str	x19, [sp, #16]
    bc0c:	mrs	x6, fpcr
    bc10:	orr	x2, x0, x1
    bc14:	cbz	x2, bdb0 <__trunctfdf2@@GCC_3.0+0xbe0>
    bc18:	cbnz	x1, bc60 <__trunctfdf2@@GCC_3.0+0xa90>
    bc1c:	mov	x2, x0
    bc20:	clz	x4, x0
    bc24:	mov	w3, #0x4e                  	// #78
    bc28:	sub	w4, w3, w4
    bc2c:	sxtw	x5, w4
    bc30:	cmp	w4, #0x1e
    bc34:	b.gt	bc60 <__trunctfdf2@@GCC_3.0+0xa90>
    bc38:	cmp	x5, #0x19
    bc3c:	b.gt	bca0 <__trunctfdf2@@GCC_3.0+0xad0>
    bc40:	mov	x3, #0x19                  	// #25
    bc44:	sub	x3, x3, x5
    bc48:	mov	w1, #0x19                  	// #25
    bc4c:	sub	w4, w1, w4
    bc50:	lsl	x0, x0, x4
    bc54:	cmp	x3, #0x0
    bc58:	csel	x2, x0, x2, gt
    bc5c:	b	bdb8 <__trunctfdf2@@GCC_3.0+0xbe8>
    bc60:	mov	x5, #0x1f                  	// #31
    bc64:	mov	w0, #0x14                  	// #20
    bc68:	and	x1, x6, #0x800000
    bc6c:	tbnz	w6, #23, bdf0 <__trunctfdf2@@GCC_3.0+0xc20>
    bc70:	lsr	x2, x1, #3
    bc74:	cmp	x2, #0x0
    bc78:	ccmp	x5, #0x1f, #0x0, ne  // ne = any
    bc7c:	orr	x1, x2, #0x200
    bc80:	csel	x2, x1, x2, eq  // eq = none
    bc84:	mov	w1, #0x0                   	// #0
    bc88:	bfxil	w1, w2, #0, #10
    bc8c:	bfi	w1, w5, #10, #5
    bc90:	and	x19, x1, #0x7fff
    bc94:	cbz	w0, bdc8 <__trunctfdf2@@GCC_3.0+0xbf8>
    bc98:	bl	6fd8 <__udivmodti4@@GCC_3.0+0x498>
    bc9c:	b	bdc8 <__trunctfdf2@@GCC_3.0+0xbf8>
    bca0:	cmp	x5, #0x1c
    bca4:	b.le	bd14 <__trunctfdf2@@GCC_3.0+0xb44>
    bca8:	mov	w2, #0x9c                  	// #156
    bcac:	sub	w2, w2, w4
    bcb0:	subs	w7, w2, #0x40
    bcb4:	lsl	x10, x0, x7
    bcb8:	lsr	x9, x0, #1
    bcbc:	mov	w8, #0x3f                  	// #63
    bcc0:	sub	w3, w8, w2
    bcc4:	lsr	x9, x9, x3
    bcc8:	lsl	x3, x1, x2
    bccc:	orr	x3, x9, x3
    bcd0:	lsl	x2, x0, x2
    bcd4:	csel	x3, x10, x3, pl  // pl = nfrst
    bcd8:	csel	x2, xzr, x2, pl  // pl = nfrst
    bcdc:	orr	x2, x2, x3
    bce0:	cmp	x2, #0x0
    bce4:	cset	x3, ne  // ne = any
    bce8:	sub	w7, w4, #0x1c
    bcec:	subs	w2, w4, #0x5c
    bcf0:	lsr	x4, x1, x2
    bcf4:	lsl	x1, x1, #1
    bcf8:	sub	w8, w8, w7
    bcfc:	lsl	x1, x1, x8
    bd00:	lsr	x0, x0, x7
    bd04:	orr	x0, x1, x0
    bd08:	csel	x0, x4, x0, pl  // pl = nfrst
    bd0c:	orr	x2, x3, x0
    bd10:	b	bd30 <__trunctfdf2@@GCC_3.0+0xb60>
    bd14:	mov	x1, #0x1c                  	// #28
    bd18:	sub	x1, x1, x5
    bd1c:	cmp	x1, #0x0
    bd20:	b.le	bd30 <__trunctfdf2@@GCC_3.0+0xb60>
    bd24:	mov	w2, #0x1c                  	// #28
    bd28:	sub	w2, w2, w4
    bd2c:	lsl	x2, x0, x2
    bd30:	and	x1, x2, #0xffffffffffffdfff
    bd34:	tst	x2, #0x7
    bd38:	b.eq	bde4 <__trunctfdf2@@GCC_3.0+0xc14>  // b.none
    bd3c:	ands	x3, x6, #0xc00000
    bd40:	b.eq	bd74 <__trunctfdf2@@GCC_3.0+0xba4>  // b.none
    bd44:	mov	w0, #0x10                  	// #16
    bd48:	add	x2, x1, #0x8
    bd4c:	cmp	x3, #0x400, lsl #12
    bd50:	csel	x1, x2, x1, eq  // eq = none
    bd54:	tbz	w1, #13, bc70 <__trunctfdf2@@GCC_3.0+0xaa0>
    bd58:	add	x5, x5, #0x1
    bd5c:	cmp	x5, #0x1f
    bd60:	b.eq	bd9c <__trunctfdf2@@GCC_3.0+0xbcc>  // b.none
    bd64:	mov	x2, #0xfffffffffffffbff    	// #-1025
    bd68:	movk	x2, #0x1fff, lsl #48
    bd6c:	and	x2, x2, x1, lsr #3
    bd70:	b	bc84 <__trunctfdf2@@GCC_3.0+0xab4>
    bd74:	and	x2, x2, #0xf
    bd78:	mov	w0, #0x10                  	// #16
    bd7c:	cmp	x2, #0x4
    bd80:	b.eq	bd54 <__trunctfdf2@@GCC_3.0+0xb84>  // b.none
    bd84:	b	bd94 <__trunctfdf2@@GCC_3.0+0xbc4>
    bd88:	mov	x1, #0xffffffffffffffff    	// #-1
    bd8c:	mov	x5, #0x1e                  	// #30
    bd90:	mov	w0, #0x14                  	// #20
    bd94:	add	x1, x1, #0x4
    bd98:	b	bd54 <__trunctfdf2@@GCC_3.0+0xb84>
    bd9c:	and	x1, x6, #0x800000
    bda0:	tbnz	w6, #23, bdd8 <__trunctfdf2@@GCC_3.0+0xc08>
    bda4:	lsr	x2, x1, #3
    bda8:	mov	w0, #0x14                  	// #20
    bdac:	b	bc84 <__trunctfdf2@@GCC_3.0+0xab4>
    bdb0:	mov	x2, #0x0                   	// #0
    bdb4:	mov	x5, #0x0                   	// #0
    bdb8:	mov	w1, #0x0                   	// #0
    bdbc:	bfxil	w1, w2, #0, #10
    bdc0:	bfi	w1, w5, #10, #5
    bdc4:	and	x19, x1, #0x7fff
    bdc8:	dup	v0.4h, w19
    bdcc:	ldr	x19, [sp, #16]
    bdd0:	ldp	x29, x30, [sp], #32
    bdd4:	ret
    bdd8:	mov	x1, #0xffffffffffffffff    	// #-1
    bddc:	mov	x5, #0x1e                  	// #30
    bde0:	b	bda4 <__trunctfdf2@@GCC_3.0+0xbd4>
    bde4:	lsr	x2, x1, #3
    bde8:	mov	w0, #0x0                   	// #0
    bdec:	b	bc84 <__trunctfdf2@@GCC_3.0+0xab4>
    bdf0:	ands	x3, x6, #0xc00000
    bdf4:	b.eq	bd88 <__trunctfdf2@@GCC_3.0+0xbb8>  // b.none
    bdf8:	mov	x1, #0xffffffffffffffff    	// #-1
    bdfc:	mov	x5, #0x1e                  	// #30
    be00:	mov	w0, #0x14                  	// #20
    be04:	b	bd48 <__trunctfdf2@@GCC_3.0+0xb78>

000000000000be08 <__enable_execute_stack@@GCC_3.4.2>:
    be08:	ret
    be0c:	mov	x5, #0x0                   	// #0
    be10:	mov	w3, #0x0                   	// #0
    be14:	ldrb	w4, [x0], #1
    be18:	and	x2, x4, #0x7f
    be1c:	lsl	x2, x2, x3
    be20:	orr	x5, x5, x2
    be24:	add	w3, w3, #0x7
    be28:	tbnz	w4, #7, be14 <__enable_execute_stack@@GCC_3.4.2+0xc>
    be2c:	str	x5, [x1]
    be30:	ret
    be34:	mov	x5, #0x0                   	// #0
    be38:	mov	w3, #0x0                   	// #0
    be3c:	ldrb	w4, [x0], #1
    be40:	and	x2, x4, #0x7f
    be44:	lsl	x2, x2, x3
    be48:	orr	x5, x5, x2
    be4c:	add	w3, w3, #0x7
    be50:	tbnz	w4, #7, be3c <__enable_execute_stack@@GCC_3.4.2+0x34>
    be54:	cmp	w3, #0x3f
    be58:	b.hi	be70 <__enable_execute_stack@@GCC_3.4.2+0x68>  // b.pmore
    be5c:	mov	x2, #0xffffffffffffffff    	// #-1
    be60:	lsl	x3, x2, x3
    be64:	orr	x3, x5, x3
    be68:	tst	x4, #0x40
    be6c:	csel	x5, x3, x5, ne  // ne = any
    be70:	str	x5, [x1]
    be74:	ret
    be78:	stp	x29, x30, [sp, #-64]!
    be7c:	mov	x29, sp
    be80:	stp	x19, x20, [sp, #16]
    be84:	stp	x21, x22, [sp, #32]
    be88:	and	w22, w0, #0xff
    be8c:	mov	x19, x2
    be90:	mov	x20, x3
    be94:	cmp	w22, #0x50
    be98:	b.eq	bed8 <__enable_execute_stack@@GCC_3.4.2+0xd0>  // b.none
    be9c:	mov	x21, x1
    bea0:	and	w0, w22, #0xf
    bea4:	cmp	w0, #0x4
    bea8:	b.eq	bfa0 <__enable_execute_stack@@GCC_3.4.2+0x198>  // b.none
    beac:	cmp	w0, #0x4
    beb0:	b.ls	bef8 <__enable_execute_stack@@GCC_3.4.2+0xf0>  // b.plast
    beb4:	cmp	w0, #0xb
    beb8:	b.eq	bfac <__enable_execute_stack@@GCC_3.4.2+0x1a4>  // b.none
    bebc:	cmp	w0, #0xb
    bec0:	b.ls	bf3c <__enable_execute_stack@@GCC_3.4.2+0x134>  // b.plast
    bec4:	cmp	w0, #0xc
    bec8:	b.ne	bfb8 <__enable_execute_stack@@GCC_3.4.2+0x1b0>  // b.any
    becc:	mov	x0, x2
    bed0:	ldr	x2, [x0], #8
    bed4:	b	bf60 <__enable_execute_stack@@GCC_3.4.2+0x158>
    bed8:	add	x0, x2, #0x7
    bedc:	and	x0, x0, #0xfffffffffffffff8
    bee0:	ldr	x2, [x0], #8
    bee4:	str	x2, [x20]
    bee8:	ldp	x19, x20, [sp, #16]
    beec:	ldp	x21, x22, [sp, #32]
    bef0:	ldp	x29, x30, [sp], #64
    bef4:	ret
    bef8:	cmp	w0, #0x2
    befc:	b.eq	bf94 <__enable_execute_stack@@GCC_3.4.2+0x18c>  // b.none
    bf00:	cmp	w0, #0x2
    bf04:	b.ls	bf1c <__enable_execute_stack@@GCC_3.4.2+0x114>  // b.plast
    bf08:	cmp	w0, #0x3
    bf0c:	b.ne	bfb8 <__enable_execute_stack@@GCC_3.4.2+0x1b0>  // b.any
    bf10:	mov	x0, x2
    bf14:	ldr	w2, [x0], #4
    bf18:	b	bf60 <__enable_execute_stack@@GCC_3.4.2+0x158>
    bf1c:	cbz	w0, bf58 <__enable_execute_stack@@GCC_3.4.2+0x150>
    bf20:	cmp	w0, #0x1
    bf24:	b.ne	bfb8 <__enable_execute_stack@@GCC_3.4.2+0x1b0>  // b.any
    bf28:	add	x1, sp, #0x38
    bf2c:	mov	x0, x2
    bf30:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    bf34:	ldr	x2, [sp, #56]
    bf38:	b	bf60 <__enable_execute_stack@@GCC_3.4.2+0x158>
    bf3c:	cmp	w0, #0x9
    bf40:	b.eq	bf80 <__enable_execute_stack@@GCC_3.4.2+0x178>  // b.none
    bf44:	cmp	w0, #0xa
    bf48:	b.ne	bfb8 <__enable_execute_stack@@GCC_3.4.2+0x1b0>  // b.any
    bf4c:	mov	x0, x2
    bf50:	ldrsh	x2, [x0], #2
    bf54:	b	bf60 <__enable_execute_stack@@GCC_3.4.2+0x158>
    bf58:	mov	x0, x2
    bf5c:	ldr	x2, [x0], #8
    bf60:	cbz	x2, bee4 <__enable_execute_stack@@GCC_3.4.2+0xdc>
    bf64:	and	w1, w22, #0x70
    bf68:	cmp	w1, #0x10
    bf6c:	csel	x21, x19, x21, eq  // eq = none
    bf70:	add	x2, x2, x21
    bf74:	tbz	w22, #7, bee4 <__enable_execute_stack@@GCC_3.4.2+0xdc>
    bf78:	ldr	x2, [x2]
    bf7c:	b	bee4 <__enable_execute_stack@@GCC_3.4.2+0xdc>
    bf80:	add	x1, sp, #0x38
    bf84:	mov	x0, x2
    bf88:	bl	be34 <__enable_execute_stack@@GCC_3.4.2+0x2c>
    bf8c:	ldr	x2, [sp, #56]
    bf90:	b	bf60 <__enable_execute_stack@@GCC_3.4.2+0x158>
    bf94:	mov	x0, x2
    bf98:	ldrh	w2, [x0], #2
    bf9c:	b	bf60 <__enable_execute_stack@@GCC_3.4.2+0x158>
    bfa0:	mov	x0, x2
    bfa4:	ldr	x2, [x0], #8
    bfa8:	b	bf60 <__enable_execute_stack@@GCC_3.4.2+0x158>
    bfac:	mov	x0, x2
    bfb0:	ldrsw	x2, [x0], #4
    bfb4:	b	bf60 <__enable_execute_stack@@GCC_3.4.2+0x158>
    bfb8:	bl	2c50 <abort@plt>
    bfbc:	adrp	x2, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    bfc0:	add	x1, x2, #0x1c8
    bfc4:	mov	w0, #0x8                   	// #8
    bfc8:	strb	w0, [x2, #456]
    bfcc:	strb	w0, [x1, #1]
    bfd0:	strb	w0, [x1, #2]
    bfd4:	strb	w0, [x1, #3]
    bfd8:	strb	w0, [x1, #4]
    bfdc:	strb	w0, [x1, #5]
    bfe0:	strb	w0, [x1, #6]
    bfe4:	strb	w0, [x1, #7]
    bfe8:	strb	w0, [x1, #8]
    bfec:	strb	w0, [x1, #9]
    bff0:	strb	w0, [x1, #10]
    bff4:	strb	w0, [x1, #11]
    bff8:	strb	w0, [x1, #12]
    bffc:	strb	w0, [x1, #13]
    c000:	strb	w0, [x1, #14]
    c004:	strb	w0, [x1, #15]
    c008:	strb	w0, [x1, #16]
    c00c:	strb	w0, [x1, #17]
    c010:	strb	w0, [x1, #18]
    c014:	strb	w0, [x1, #19]
    c018:	strb	w0, [x1, #20]
    c01c:	strb	w0, [x1, #21]
    c020:	strb	w0, [x1, #22]
    c024:	strb	w0, [x1, #23]
    c028:	strb	w0, [x1, #24]
    c02c:	strb	w0, [x1, #25]
    c030:	strb	w0, [x1, #26]
    c034:	strb	w0, [x1, #27]
    c038:	strb	w0, [x1, #28]
    c03c:	strb	w0, [x1, #29]
    c040:	strb	w0, [x1, #30]
    c044:	strb	w0, [x1, #31]
    c048:	strb	w0, [x1, #64]
    c04c:	strb	w0, [x1, #65]
    c050:	strb	w0, [x1, #66]
    c054:	strb	w0, [x1, #67]
    c058:	strb	w0, [x1, #68]
    c05c:	strb	w0, [x1, #69]
    c060:	strb	w0, [x1, #70]
    c064:	strb	w0, [x1, #71]
    c068:	strb	w0, [x1, #72]
    c06c:	strb	w0, [x1, #73]
    c070:	strb	w0, [x1, #74]
    c074:	strb	w0, [x1, #75]
    c078:	strb	w0, [x1, #76]
    c07c:	strb	w0, [x1, #77]
    c080:	strb	w0, [x1, #78]
    c084:	strb	w0, [x1, #79]
    c088:	strb	w0, [x1, #80]
    c08c:	strb	w0, [x1, #81]
    c090:	strb	w0, [x1, #82]
    c094:	strb	w0, [x1, #83]
    c098:	strb	w0, [x1, #84]
    c09c:	strb	w0, [x1, #85]
    c0a0:	strb	w0, [x1, #86]
    c0a4:	strb	w0, [x1, #87]
    c0a8:	strb	w0, [x1, #88]
    c0ac:	strb	w0, [x1, #89]
    c0b0:	strb	w0, [x1, #90]
    c0b4:	strb	w0, [x1, #91]
    c0b8:	strb	w0, [x1, #92]
    c0bc:	strb	w0, [x1, #93]
    c0c0:	strb	w0, [x1, #94]
    c0c4:	strb	w0, [x1, #95]
    c0c8:	strb	w0, [x1, #46]
    c0cc:	strb	w0, [x1, #48]
    c0d0:	strb	w0, [x1, #49]
    c0d4:	strb	w0, [x1, #50]
    c0d8:	strb	w0, [x1, #51]
    c0dc:	strb	w0, [x1, #52]
    c0e0:	strb	w0, [x1, #53]
    c0e4:	strb	w0, [x1, #54]
    c0e8:	strb	w0, [x1, #55]
    c0ec:	strb	w0, [x1, #56]
    c0f0:	strb	w0, [x1, #57]
    c0f4:	strb	w0, [x1, #58]
    c0f8:	strb	w0, [x1, #59]
    c0fc:	strb	w0, [x1, #60]
    c100:	strb	w0, [x1, #61]
    c104:	strb	w0, [x1, #62]
    c108:	strb	w0, [x1, #63]
    c10c:	strb	w0, [x1, #96]
    c110:	ret
    c114:	stp	x29, x30, [sp, #-80]!
    c118:	mov	x29, sp
    c11c:	stp	x19, x20, [sp, #16]
    c120:	stp	x21, x22, [sp, #32]
    c124:	stp	x23, x24, [sp, #48]
    c128:	mov	x21, x0
    c12c:	mov	x20, x1
    c130:	ldr	x0, [x1, #832]
    c134:	tbz	x0, #62, c140 <__enable_execute_stack@@GCC_3.4.2+0x338>
    c138:	ldrb	w0, [x1, #887]
    c13c:	cbnz	w0, c148 <__enable_execute_stack@@GCC_3.4.2+0x340>
    c140:	ldr	x0, [x20, #248]
    c144:	cbz	x0, c160 <__enable_execute_stack@@GCC_3.4.2+0x358>
    c148:	mov	x19, #0x0                   	// #0
    c14c:	add	x23, x21, #0x358
    c150:	add	x22, x20, #0x358
    c154:	adrp	x24, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    c158:	add	x24, x24, #0x1c8
    c15c:	b	c1b8 <__enable_execute_stack@@GCC_3.4.2+0x3b0>
    c160:	ldr	x0, [x20, #784]
    c164:	adrp	x1, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    c168:	ldrb	w1, [x1, #487]
    c16c:	cmp	w1, #0x8
    c170:	b.ne	c18c <__enable_execute_stack@@GCC_3.4.2+0x384>  // b.any
    c174:	str	x0, [sp, #72]
    c178:	ldr	x0, [x20, #832]
    c17c:	tbnz	x0, #62, c190 <__enable_execute_stack@@GCC_3.4.2+0x388>
    c180:	add	x0, sp, #0x48
    c184:	str	x0, [x20, #248]
    c188:	b	c148 <__enable_execute_stack@@GCC_3.4.2+0x340>
    c18c:	bl	2c50 <abort@plt>
    c190:	strb	wzr, [x20, #887]
    c194:	b	c180 <__enable_execute_stack@@GCC_3.4.2+0x378>
    c198:	bl	2c50 <abort@plt>
    c19c:	ldrb	w2, [x19, x24]
    c1a0:	cmp	w2, #0x8
    c1a4:	b.ne	c1fc <__enable_execute_stack@@GCC_3.4.2+0x3f4>  // b.any
    c1a8:	str	x1, [x0]
    c1ac:	add	x19, x19, #0x1
    c1b0:	cmp	x19, #0x61
    c1b4:	b.eq	c200 <__enable_execute_stack@@GCC_3.4.2+0x3f8>  // b.none
    c1b8:	ldr	x0, [x21, x19, lsl #3]
    c1bc:	ldr	x1, [x20, x19, lsl #3]
    c1c0:	ldrb	w2, [x23, x19]
    c1c4:	cbnz	w2, c198 <__enable_execute_stack@@GCC_3.4.2+0x390>
    c1c8:	cmp	x0, #0x0
    c1cc:	cset	w2, ne  // ne = any
    c1d0:	ldrb	w3, [x22, x19]
    c1d4:	cmp	w3, #0x0
    c1d8:	ccmp	w2, #0x0, #0x4, ne  // ne = any
    c1dc:	b.ne	c19c <__enable_execute_stack@@GCC_3.4.2+0x394>  // b.any
    c1e0:	cmp	x1, #0x0
    c1e4:	ccmp	w2, #0x0, #0x4, ne  // ne = any
    c1e8:	ccmp	x0, x1, #0x4, ne  // ne = any
    c1ec:	b.eq	c1ac <__enable_execute_stack@@GCC_3.4.2+0x3a4>  // b.none
    c1f0:	ldrb	w2, [x24, x19]
    c1f4:	bl	2aa0 <memcpy@plt>
    c1f8:	b	c1ac <__enable_execute_stack@@GCC_3.4.2+0x3a4>
    c1fc:	bl	2c50 <abort@plt>
    c200:	ldr	x0, [x21, #832]
    c204:	tbz	x0, #62, c210 <__enable_execute_stack@@GCC_3.4.2+0x408>
    c208:	ldrb	w0, [x21, #887]
    c20c:	cbnz	w0, c270 <__enable_execute_stack@@GCC_3.4.2+0x468>
    c210:	ldr	x1, [x21, #248]
    c214:	mov	x0, #0x0                   	// #0
    c218:	cbz	x1, c230 <__enable_execute_stack@@GCC_3.4.2+0x428>
    c21c:	ldp	x19, x20, [sp, #16]
    c220:	ldp	x21, x22, [sp, #32]
    c224:	ldp	x23, x24, [sp, #48]
    c228:	ldp	x29, x30, [sp], #80
    c22c:	ret
    c230:	ldr	x0, [x20, #248]
    c234:	ldr	x1, [x20, #832]
    c238:	tbz	x1, #62, c244 <__enable_execute_stack@@GCC_3.4.2+0x43c>
    c23c:	ldrb	w1, [x20, #887]
    c240:	cbnz	w1, c258 <__enable_execute_stack@@GCC_3.4.2+0x450>
    c244:	adrp	x1, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    c248:	ldrb	w1, [x1, #487]
    c24c:	cmp	w1, #0x8
    c250:	b.ne	c26c <__enable_execute_stack@@GCC_3.4.2+0x464>  // b.any
    c254:	ldr	x0, [x0]
    c258:	ldr	x1, [x21, #784]
    c25c:	sub	x0, x0, x1
    c260:	ldr	x1, [x20, #848]
    c264:	add	x0, x0, x1
    c268:	b	c21c <__enable_execute_stack@@GCC_3.4.2+0x414>
    c26c:	bl	2c50 <abort@plt>
    c270:	mov	x0, #0x0                   	// #0
    c274:	b	c21c <__enable_execute_stack@@GCC_3.4.2+0x414>

000000000000c278 <_Unwind_GetGR@@GCC_3.0>:
    c278:	stp	x29, x30, [sp, #-16]!
    c27c:	mov	x29, sp
    c280:	cmp	w1, #0x61
    c284:	b.gt	c2d0 <_Unwind_GetGR@@GCC_3.0+0x58>
    c288:	ldr	x2, [x0, w1, sxtw #3]
    c28c:	ldr	x3, [x0, #832]
    c290:	tbz	x3, #62, c2a0 <_Unwind_GetGR@@GCC_3.0+0x28>
    c294:	add	x0, x0, w1, sxtw
    c298:	ldrb	w0, [x0, #856]
    c29c:	cbnz	w0, c2d4 <_Unwind_GetGR@@GCC_3.0+0x5c>
    c2a0:	cntd	x0
    c2a4:	sxtw	x0, w0
    c2a8:	cmp	w1, #0x2e
    c2ac:	b.eq	c2c8 <_Unwind_GetGR@@GCC_3.0+0x50>  // b.none
    c2b0:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    c2b4:	add	x0, x0, #0x1c8
    c2b8:	ldrb	w0, [x0, w1, sxtw]
    c2bc:	cmp	w0, #0x8
    c2c0:	b.ne	c2dc <_Unwind_GetGR@@GCC_3.0+0x64>  // b.any
    c2c4:	ldr	x0, [x2]
    c2c8:	ldp	x29, x30, [sp], #16
    c2cc:	ret
    c2d0:	bl	2c50 <abort@plt>
    c2d4:	mov	x0, x2
    c2d8:	b	c2c8 <_Unwind_GetGR@@GCC_3.0+0x50>
    c2dc:	bl	2c50 <abort@plt>

000000000000c2e0 <_Unwind_GetCFA@@GCC_3.3>:
    c2e0:	ldr	x0, [x0, #784]
    c2e4:	ret

000000000000c2e8 <_Unwind_SetGR@@GCC_3.0>:
    c2e8:	stp	x29, x30, [sp, #-16]!
    c2ec:	mov	x29, sp
    c2f0:	cmp	w1, #0x61
    c2f4:	b.gt	c330 <_Unwind_SetGR@@GCC_3.0+0x48>
    c2f8:	adrp	x3, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    c2fc:	add	x3, x3, #0x1c8
    c300:	ldrb	w4, [x3, w1, sxtw]
    c304:	ldr	x3, [x0, #832]
    c308:	tbz	x3, #62, c318 <_Unwind_SetGR@@GCC_3.0+0x30>
    c30c:	add	x3, x0, w1, sxtw
    c310:	ldrb	w3, [x3, #856]
    c314:	cbnz	w3, c334 <_Unwind_SetGR@@GCC_3.0+0x4c>
    c318:	ldr	x0, [x0, w1, sxtw #3]
    c31c:	cmp	w4, #0x8
    c320:	b.ne	c33c <_Unwind_SetGR@@GCC_3.0+0x54>  // b.any
    c324:	str	x2, [x0]
    c328:	ldp	x29, x30, [sp], #16
    c32c:	ret
    c330:	bl	2c50 <abort@plt>
    c334:	str	x2, [x0, w1, sxtw #3]
    c338:	b	c328 <_Unwind_SetGR@@GCC_3.0+0x40>
    c33c:	bl	2c50 <abort@plt>

000000000000c340 <_Unwind_GetIP@@GCC_3.0>:
    c340:	ldr	x0, [x0, #792]
    c344:	ret

000000000000c348 <_Unwind_GetIPInfo@@GCC_4.2.0>:
    c348:	ldr	x2, [x0, #832]
    c34c:	lsr	x2, x2, #63
    c350:	str	w2, [x1]
    c354:	ldr	x0, [x0, #792]
    c358:	ret

000000000000c35c <_Unwind_SetIP@@GCC_3.0>:
    c35c:	str	x1, [x0, #792]
    c360:	ret

000000000000c364 <_Unwind_GetLanguageSpecificData@@GCC_3.0>:
    c364:	ldr	x0, [x0, #800]
    c368:	ret

000000000000c36c <_Unwind_GetRegionStart@@GCC_3.0>:
    c36c:	ldr	x0, [x0, #824]
    c370:	ret

000000000000c374 <_Unwind_FindEnclosingFunction@@GCC_3.3>:
    c374:	stp	x29, x30, [sp, #-48]!
    c378:	mov	x29, sp
    c37c:	add	x1, sp, #0x18
    c380:	sub	x0, x0, #0x1
    c384:	bl	2cb0 <_Unwind_Find_FDE@plt>
    c388:	cmp	x0, #0x0
    c38c:	ldr	x1, [sp, #40]
    c390:	csel	x0, x1, x0, ne  // ne = any
    c394:	ldp	x29, x30, [sp], #48
    c398:	ret

000000000000c39c <_Unwind_GetDataRelBase@@GCC_3.0>:
    c39c:	ldr	x0, [x0, #816]
    c3a0:	ret

000000000000c3a4 <_Unwind_GetTextRelBase@@GCC_3.0>:
    c3a4:	ldr	x0, [x0, #808]
    c3a8:	ret
    c3ac:	and	w3, w0, #0xff
    c3b0:	cmp	w3, #0xff
    c3b4:	b.eq	c420 <_Unwind_GetTextRelBase@@GCC_3.0+0x7c>  // b.none
    c3b8:	stp	x29, x30, [sp, #-16]!
    c3bc:	mov	x29, sp
    c3c0:	mov	x0, x1
    c3c4:	and	w2, w3, #0x70
    c3c8:	cmp	w2, #0x30
    c3cc:	b.eq	c418 <_Unwind_GetTextRelBase@@GCC_3.0+0x74>  // b.none
    c3d0:	b.hi	c3f4 <_Unwind_GetTextRelBase@@GCC_3.0+0x50>  // b.pmore
    c3d4:	cmp	w2, #0x20
    c3d8:	b.ne	c3e4 <_Unwind_GetTextRelBase@@GCC_3.0+0x40>  // b.any
    c3dc:	bl	2b50 <_Unwind_GetTextRelBase@plt>
    c3e0:	b	c410 <_Unwind_GetTextRelBase@@GCC_3.0+0x6c>
    c3e4:	b.hi	c3f0 <_Unwind_GetTextRelBase@@GCC_3.0+0x4c>  // b.pmore
    c3e8:	tst	w3, #0x60
    c3ec:	b.eq	c428 <_Unwind_GetTextRelBase@@GCC_3.0+0x84>  // b.none
    c3f0:	bl	2c50 <abort@plt>
    c3f4:	cmp	w2, #0x40
    c3f8:	b.ne	c404 <_Unwind_GetTextRelBase@@GCC_3.0+0x60>  // b.any
    c3fc:	bl	2ab0 <_Unwind_GetRegionStart@plt>
    c400:	b	c410 <_Unwind_GetTextRelBase@@GCC_3.0+0x6c>
    c404:	mov	x0, #0x0                   	// #0
    c408:	cmp	w2, #0x50
    c40c:	b.ne	c3f0 <_Unwind_GetTextRelBase@@GCC_3.0+0x4c>  // b.any
    c410:	ldp	x29, x30, [sp], #16
    c414:	ret
    c418:	bl	2da0 <_Unwind_GetDataRelBase@plt>
    c41c:	b	c410 <_Unwind_GetTextRelBase@@GCC_3.0+0x6c>
    c420:	mov	x0, #0x0                   	// #0
    c424:	ret
    c428:	mov	x0, #0x0                   	// #0
    c42c:	b	c410 <_Unwind_GetTextRelBase@@GCC_3.0+0x6c>
    c430:	str	xzr, [x3, #1568]
    c434:	cmp	x0, x1
    c438:	b.cs	ca04 <_Unwind_GetTextRelBase@@GCC_3.0+0x660>  // b.hs, b.nlast
    c43c:	stp	x29, x30, [sp, #-128]!
    c440:	mov	x29, sp
    c444:	stp	x19, x20, [sp, #16]
    c448:	stp	x21, x22, [sp, #32]
    c44c:	stp	x23, x24, [sp, #48]
    c450:	stp	x25, x26, [sp, #64]
    c454:	stp	x27, x28, [sp, #80]
    c458:	mov	x22, x1
    c45c:	mov	x21, x2
    c460:	mov	x20, x3
    c464:	mov	x27, #0x0                   	// #0
    c468:	adrp	x23, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    c46c:	add	x23, x23, #0xaf0
    c470:	add	x25, x29, #0x68
    c474:	add	x24, x29, #0x70
    c478:	add	x26, x29, #0x78
    c47c:	b	c49c <_Unwind_GetTextRelBase@@GCC_3.0+0xf8>
    c480:	and	x4, x4, #0x3f
    c484:	ldr	x0, [x20, #1632]
    c488:	madd	x4, x4, x0, x2
    c48c:	str	x4, [x20, #1608]
    c490:	cmp	x19, x22
    c494:	b.cs	c9e4 <_Unwind_GetTextRelBase@@GCC_3.0+0x640>  // b.hs, b.nlast
    c498:	mov	x0, x19
    c49c:	ldr	x2, [x20, #1608]
    c4a0:	ldr	x1, [x21, #832]
    c4a4:	ldr	x3, [x21, #792]
    c4a8:	add	x1, x3, x1, lsr #63
    c4ac:	cmp	x2, x1
    c4b0:	b.cs	c9e4 <_Unwind_GetTextRelBase@@GCC_3.0+0x640>  // b.hs, b.nlast
    c4b4:	mov	x19, x0
    c4b8:	ldrb	w4, [x19], #1
    c4bc:	and	w1, w4, #0xc0
    c4c0:	cmp	w1, #0x40
    c4c4:	b.eq	c480 <_Unwind_GetTextRelBase@@GCC_3.0+0xdc>  // b.none
    c4c8:	cmp	w1, #0x80
    c4cc:	b.eq	c4f0 <_Unwind_GetTextRelBase@@GCC_3.0+0x14c>  // b.none
    c4d0:	cmp	w1, #0xc0
    c4d4:	b.eq	c538 <_Unwind_GetTextRelBase@@GCC_3.0+0x194>  // b.none
    c4d8:	cmp	w4, #0x2f
    c4dc:	b.hi	c9e0 <_Unwind_GetTextRelBase@@GCC_3.0+0x63c>  // b.pmore
    c4e0:	ldrh	w1, [x23, w4, uxtw #1]
    c4e4:	adr	x3, c4f0 <_Unwind_GetTextRelBase@@GCC_3.0+0x14c>
    c4e8:	add	x1, x3, w1, sxth #2
    c4ec:	br	x1
    c4f0:	and	x4, x4, #0x3f
    c4f4:	str	x4, [x29, #104]
    c4f8:	mov	x1, x24
    c4fc:	mov	x0, x19
    c500:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c504:	mov	x19, x0
    c508:	ldr	x0, [x20, #1624]
    c50c:	ldr	x1, [x29, #112]
    c510:	mul	x1, x0, x1
    c514:	ldr	x0, [x29, #104]
    c518:	cmp	x0, #0x61
    c51c:	b.hi	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>  // b.pmore
    c520:	lsl	x0, x0, #4
    c524:	add	x2, x20, x0
    c528:	mov	w3, #0x1                   	// #1
    c52c:	str	w3, [x2, #8]
    c530:	str	x1, [x20, x0]
    c534:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c538:	ubfiz	x4, x4, #4, #6
    c53c:	add	x4, x20, x4
    c540:	str	wzr, [x4, #8]
    c544:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c548:	ldrb	w28, [x20, #1648]
    c54c:	mov	x1, x21
    c550:	mov	w0, w28
    c554:	bl	c3ac <_Unwind_GetTextRelBase@@GCC_3.0+0x8>
    c558:	mov	x3, x26
    c55c:	mov	x2, x19
    c560:	mov	x1, x0
    c564:	mov	w0, w28
    c568:	bl	be78 <__enable_execute_stack@@GCC_3.4.2+0x70>
    c56c:	mov	x19, x0
    c570:	ldr	x0, [x29, #120]
    c574:	str	x0, [x20, #1608]
    c578:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c57c:	ldrb	w1, [x0, #1]
    c580:	ldr	x3, [x20, #1632]
    c584:	madd	x2, x1, x3, x2
    c588:	str	x2, [x20, #1608]
    c58c:	add	x19, x0, #0x2
    c590:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c594:	ldurh	w1, [x0, #1]
    c598:	ldr	x3, [x20, #1632]
    c59c:	madd	x2, x1, x3, x2
    c5a0:	str	x2, [x20, #1608]
    c5a4:	add	x19, x0, #0x3
    c5a8:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c5ac:	ldur	w1, [x0, #1]
    c5b0:	ldr	x3, [x20, #1632]
    c5b4:	madd	x2, x1, x3, x2
    c5b8:	str	x2, [x20, #1608]
    c5bc:	add	x19, x0, #0x5
    c5c0:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c5c4:	mov	x1, x25
    c5c8:	mov	x0, x19
    c5cc:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c5d0:	mov	x1, x24
    c5d4:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c5d8:	mov	x19, x0
    c5dc:	ldr	x0, [x20, #1624]
    c5e0:	ldr	x1, [x29, #112]
    c5e4:	mul	x1, x0, x1
    c5e8:	ldr	x0, [x29, #104]
    c5ec:	cmp	x0, #0x61
    c5f0:	b.hi	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>  // b.pmore
    c5f4:	lsl	x0, x0, #4
    c5f8:	add	x2, x20, x0
    c5fc:	mov	w3, #0x1                   	// #1
    c600:	str	w3, [x2, #8]
    c604:	str	x1, [x20, x0]
    c608:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c60c:	mov	x1, x25
    c610:	mov	x0, x19
    c614:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c618:	mov	x19, x0
    c61c:	ldr	x0, [x29, #104]
    c620:	cmp	x0, #0x61
    c624:	b.hi	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>  // b.pmore
    c628:	add	x0, x20, x0, lsl #4
    c62c:	str	wzr, [x0, #8]
    c630:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c634:	mov	x1, x25
    c638:	mov	x0, x19
    c63c:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c640:	mov	x19, x0
    c644:	ldr	x0, [x29, #104]
    c648:	cmp	x0, #0x61
    c64c:	b.hi	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>  // b.pmore
    c650:	add	x0, x20, x0, lsl #4
    c654:	str	wzr, [x0, #8]
    c658:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c65c:	mov	x1, x25
    c660:	mov	x0, x19
    c664:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c668:	mov	x19, x0
    c66c:	ldr	x0, [x29, #104]
    c670:	cmp	x0, #0x61
    c674:	b.hi	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>  // b.pmore
    c678:	add	x0, x20, x0, lsl #4
    c67c:	mov	w1, #0x6                   	// #6
    c680:	str	w1, [x0, #8]
    c684:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c688:	mov	x1, x25
    c68c:	mov	x0, x19
    c690:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c694:	mov	x1, x26
    c698:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c69c:	mov	x19, x0
    c6a0:	ldr	x0, [x29, #104]
    c6a4:	cmp	x0, #0x61
    c6a8:	b.hi	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>  // b.pmore
    c6ac:	lsl	x0, x0, #4
    c6b0:	add	x1, x20, x0
    c6b4:	mov	w2, #0x2                   	// #2
    c6b8:	str	w2, [x1, #8]
    c6bc:	ldr	x1, [x29, #120]
    c6c0:	str	x1, [x20, x0]
    c6c4:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c6c8:	cbz	x27, c6ec <_Unwind_GetTextRelBase@@GCC_3.0+0x348>
    c6cc:	mov	x28, x27
    c6d0:	ldr	x27, [x27, #1568]
    c6d4:	mov	x2, #0x648                 	// #1608
    c6d8:	mov	x1, x20
    c6dc:	mov	x0, x28
    c6e0:	bl	2aa0 <memcpy@plt>
    c6e4:	str	x28, [x20, #1568]
    c6e8:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c6ec:	sub	sp, sp, #0x650
    c6f0:	mov	x28, sp
    c6f4:	b	c6d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x330>
    c6f8:	ldr	x28, [x20, #1568]
    c6fc:	mov	x2, #0x648                 	// #1608
    c700:	mov	x1, x28
    c704:	mov	x0, x20
    c708:	bl	2aa0 <memcpy@plt>
    c70c:	str	x27, [x28, #1568]
    c710:	mov	x27, x28
    c714:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c718:	mov	x1, x24
    c71c:	mov	x0, x19
    c720:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c724:	ldr	x1, [x29, #112]
    c728:	str	x1, [x20, #1584]
    c72c:	mov	x1, x24
    c730:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c734:	mov	x19, x0
    c738:	ldr	x0, [x29, #112]
    c73c:	str	x0, [x20, #1576]
    c740:	mov	w0, #0x1                   	// #1
    c744:	str	w0, [x20, #1600]
    c748:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c74c:	mov	x1, x24
    c750:	mov	x0, x19
    c754:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c758:	mov	x19, x0
    c75c:	ldr	x0, [x29, #112]
    c760:	str	x0, [x20, #1584]
    c764:	mov	w0, #0x1                   	// #1
    c768:	str	w0, [x20, #1600]
    c76c:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c770:	mov	x1, x24
    c774:	mov	x0, x19
    c778:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c77c:	mov	x19, x0
    c780:	ldr	x0, [x29, #112]
    c784:	str	x0, [x20, #1576]
    c788:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c78c:	str	x19, [x20, #1592]
    c790:	mov	w0, #0x2                   	// #2
    c794:	str	w0, [x20, #1600]
    c798:	mov	x1, x24
    c79c:	mov	x0, x19
    c7a0:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c7a4:	ldr	x1, [x29, #112]
    c7a8:	add	x19, x0, x1
    c7ac:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c7b0:	mov	x1, x25
    c7b4:	mov	x0, x19
    c7b8:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c7bc:	ldr	x1, [x29, #104]
    c7c0:	cmp	x1, #0x61
    c7c4:	b.hi	c7dc <_Unwind_GetTextRelBase@@GCC_3.0+0x438>  // b.pmore
    c7c8:	lsl	x1, x1, #4
    c7cc:	add	x2, x20, x1
    c7d0:	mov	w3, #0x3                   	// #3
    c7d4:	str	w3, [x2, #8]
    c7d8:	str	x0, [x20, x1]
    c7dc:	mov	x1, x24
    c7e0:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c7e4:	ldr	x1, [x29, #112]
    c7e8:	add	x19, x0, x1
    c7ec:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c7f0:	mov	x1, x25
    c7f4:	mov	x0, x19
    c7f8:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c7fc:	mov	x1, x26
    c800:	bl	be34 <__enable_execute_stack@@GCC_3.4.2+0x2c>
    c804:	mov	x19, x0
    c808:	ldr	x0, [x20, #1624]
    c80c:	ldr	x1, [x29, #120]
    c810:	mul	x1, x0, x1
    c814:	ldr	x0, [x29, #104]
    c818:	cmp	x0, #0x61
    c81c:	b.hi	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>  // b.pmore
    c820:	lsl	x0, x0, #4
    c824:	add	x2, x20, x0
    c828:	mov	w3, #0x1                   	// #1
    c82c:	str	w3, [x2, #8]
    c830:	str	x1, [x20, x0]
    c834:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c838:	mov	x1, x24
    c83c:	mov	x0, x19
    c840:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c844:	ldr	x1, [x29, #112]
    c848:	str	x1, [x20, #1584]
    c84c:	mov	x1, x26
    c850:	bl	be34 <__enable_execute_stack@@GCC_3.4.2+0x2c>
    c854:	mov	x19, x0
    c858:	mov	w0, #0x1                   	// #1
    c85c:	str	w0, [x20, #1600]
    c860:	ldr	x0, [x20, #1624]
    c864:	ldr	x1, [x29, #120]
    c868:	mul	x0, x0, x1
    c86c:	str	x0, [x20, #1576]
    c870:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c874:	mov	x1, x26
    c878:	mov	x0, x19
    c87c:	bl	be34 <__enable_execute_stack@@GCC_3.4.2+0x2c>
    c880:	mov	x19, x0
    c884:	ldr	x1, [x20, #1624]
    c888:	ldr	x0, [x29, #120]
    c88c:	mul	x0, x0, x1
    c890:	str	x0, [x20, #1576]
    c894:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c898:	mov	x1, x25
    c89c:	mov	x0, x19
    c8a0:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c8a4:	mov	x1, x24
    c8a8:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c8ac:	mov	x19, x0
    c8b0:	ldr	x0, [x20, #1624]
    c8b4:	ldr	x1, [x29, #112]
    c8b8:	mul	x1, x0, x1
    c8bc:	ldr	x0, [x29, #104]
    c8c0:	cmp	x0, #0x61
    c8c4:	b.hi	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>  // b.pmore
    c8c8:	lsl	x0, x0, #4
    c8cc:	add	x2, x20, x0
    c8d0:	mov	w3, #0x4                   	// #4
    c8d4:	str	w3, [x2, #8]
    c8d8:	str	x1, [x20, x0]
    c8dc:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c8e0:	mov	x1, x25
    c8e4:	mov	x0, x19
    c8e8:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c8ec:	mov	x1, x26
    c8f0:	bl	be34 <__enable_execute_stack@@GCC_3.4.2+0x2c>
    c8f4:	mov	x19, x0
    c8f8:	ldr	x0, [x20, #1624]
    c8fc:	ldr	x1, [x29, #120]
    c900:	mul	x1, x0, x1
    c904:	ldr	x0, [x29, #104]
    c908:	cmp	x0, #0x61
    c90c:	b.hi	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>  // b.pmore
    c910:	lsl	x0, x0, #4
    c914:	add	x2, x20, x0
    c918:	mov	w3, #0x4                   	// #4
    c91c:	str	w3, [x2, #8]
    c920:	str	x1, [x20, x0]
    c924:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c928:	mov	x1, x25
    c92c:	mov	x0, x19
    c930:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c934:	ldr	x1, [x29, #104]
    c938:	cmp	x1, #0x61
    c93c:	b.hi	c954 <_Unwind_GetTextRelBase@@GCC_3.0+0x5b0>  // b.pmore
    c940:	lsl	x1, x1, #4
    c944:	add	x2, x20, x1
    c948:	mov	w3, #0x5                   	// #5
    c94c:	str	w3, [x2, #8]
    c950:	str	x0, [x20, x1]
    c954:	mov	x1, x24
    c958:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c95c:	ldr	x1, [x29, #112]
    c960:	add	x19, x0, x1
    c964:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c968:	ldr	x0, [x20, #544]
    c96c:	eor	x0, x0, #0x1
    c970:	str	x0, [x20, #544]
    c974:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c978:	mov	x1, x24
    c97c:	mov	x0, x19
    c980:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c984:	mov	x19, x0
    c988:	ldr	x0, [x29, #112]
    c98c:	str	x0, [x21, #848]
    c990:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c994:	mov	x1, x25
    c998:	mov	x0, x19
    c99c:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c9a0:	mov	x1, x24
    c9a4:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    c9a8:	mov	x19, x0
    c9ac:	ldr	x0, [x20, #1624]
    c9b0:	ldr	x1, [x29, #112]
    c9b4:	mul	x0, x0, x1
    c9b8:	ldr	x1, [x29, #104]
    c9bc:	cmp	x1, #0x61
    c9c0:	b.hi	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>  // b.pmore
    c9c4:	lsl	x1, x1, #4
    c9c8:	add	x2, x20, x1
    c9cc:	mov	w3, #0x1                   	// #1
    c9d0:	str	w3, [x2, #8]
    c9d4:	neg	x0, x0
    c9d8:	str	x0, [x20, x1]
    c9dc:	b	c490 <_Unwind_GetTextRelBase@@GCC_3.0+0xec>
    c9e0:	bl	2c50 <abort@plt>
    c9e4:	mov	sp, x29
    c9e8:	ldp	x19, x20, [sp, #16]
    c9ec:	ldp	x21, x22, [sp, #32]
    c9f0:	ldp	x23, x24, [sp, #48]
    c9f4:	ldp	x25, x26, [sp, #64]
    c9f8:	ldp	x27, x28, [sp, #80]
    c9fc:	ldp	x29, x30, [sp], #128
    ca00:	ret
    ca04:	ret
    ca08:	stp	x29, x30, [sp, #-128]!
    ca0c:	mov	x29, sp
    ca10:	stp	x19, x20, [sp, #16]
    ca14:	mov	x20, x0
    ca18:	mov	x19, x1
    ca1c:	mov	x2, #0x680                 	// #1664
    ca20:	mov	w1, #0x0                   	// #0
    ca24:	mov	x0, x19
    ca28:	bl	2ba0 <memset@plt>
    ca2c:	str	xzr, [x20, #848]
    ca30:	str	xzr, [x20, #800]
    ca34:	ldr	x2, [x20, #792]
    ca38:	cbz	x2, ce90 <_Unwind_GetTextRelBase@@GCC_3.0+0xaec>
    ca3c:	stp	x23, x24, [sp, #48]
    ca40:	ldr	d0, [x20, #832]
    ca44:	cmge	d0, d0, #0
    ca48:	fmov	x0, d0
    ca4c:	add	x1, x20, #0x328
    ca50:	add	x0, x2, x0
    ca54:	bl	2cb0 <_Unwind_Find_FDE@plt>
    ca58:	mov	x23, x0
    ca5c:	cbz	x0, cb0c <_Unwind_GetTextRelBase@@GCC_3.0+0x768>
    ca60:	stp	x21, x22, [sp, #32]
    ca64:	ldr	x0, [x20, #824]
    ca68:	str	x0, [x19, #1608]
    ca6c:	add	x22, x23, #0x4
    ca70:	ldrsw	x0, [x23, #4]
    ca74:	sub	x22, x22, x0
    ca78:	add	x21, x22, #0x9
    ca7c:	mov	x0, x21
    ca80:	bl	2ac0 <strlen@plt>
    ca84:	add	x0, x0, #0x1
    ca88:	add	x0, x21, x0
    ca8c:	ldrb	w1, [x22, #9]
    ca90:	cmp	w1, #0x65
    ca94:	b.eq	cc24 <_Unwind_GetTextRelBase@@GCC_3.0+0x880>  // b.none
    ca98:	ldrb	w1, [x22, #8]
    ca9c:	cmp	w1, #0x3
    caa0:	b.hi	cc40 <_Unwind_GetTextRelBase@@GCC_3.0+0x89c>  // b.pmore
    caa4:	add	x1, sp, #0x68
    caa8:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    caac:	ldr	x1, [sp, #104]
    cab0:	str	x1, [x19, #1632]
    cab4:	add	x1, sp, #0x70
    cab8:	bl	be34 <__enable_execute_stack@@GCC_3.4.2+0x2c>
    cabc:	ldr	x1, [sp, #112]
    cac0:	str	x1, [x19, #1624]
    cac4:	ldrb	w1, [x22, #8]
    cac8:	cmp	w1, #0x1
    cacc:	b.ne	cc5c <_Unwind_GetTextRelBase@@GCC_3.0+0x8b8>  // b.any
    cad0:	ldrb	w1, [x0], #1
    cad4:	str	x1, [x19, #1640]
    cad8:	mov	w1, #0xffffffff            	// #-1
    cadc:	strb	w1, [x19, #1649]
    cae0:	ldrb	w1, [x21]
    cae4:	cmp	w1, #0x7a
    cae8:	b.eq	cc70 <_Unwind_GetTextRelBase@@GCC_3.0+0x8cc>  // b.none
    caec:	mov	x24, #0x0                   	// #0
    caf0:	cbz	w1, cea8 <_Unwind_GetTextRelBase@@GCC_3.0+0xb04>
    caf4:	stp	x25, x26, [sp, #64]
    caf8:	stp	x27, x28, [sp, #80]
    cafc:	add	x21, x21, #0x1
    cb00:	mov	w25, #0x1                   	// #1
    cb04:	add	x26, sp, #0x78
    cb08:	b	ccbc <_Unwind_GetTextRelBase@@GCC_3.0+0x918>
    cb0c:	ldr	x1, [x20, #792]
    cb10:	ldr	w3, [x1]
    cb14:	mov	w0, #0x5                   	// #5
    cb18:	mov	w2, #0x1168                	// #4456
    cb1c:	movk	w2, #0xd280, lsl #16
    cb20:	cmp	w3, w2
    cb24:	b.ne	ceb0 <_Unwind_GetTextRelBase@@GCC_3.0+0xb0c>  // b.any
    cb28:	ldr	w2, [x1, #4]
    cb2c:	mov	w1, #0x1                   	// #1
    cb30:	movk	w1, #0xd400, lsl #16
    cb34:	cmp	w2, w1
    cb38:	b.ne	ceb8 <_Unwind_GetTextRelBase@@GCC_3.0+0xb14>  // b.any
    cb3c:	ldr	x7, [x20, #784]
    cb40:	add	x9, x7, #0x130
    cb44:	mov	w0, #0x1                   	// #1
    cb48:	str	w0, [x19, #1600]
    cb4c:	mov	x0, #0x1f                  	// #31
    cb50:	str	x0, [x19, #1584]
    cb54:	ldr	x0, [x20, #784]
    cb58:	sub	x0, x9, x0
    cb5c:	str	x0, [x19, #1576]
    cb60:	mov	x3, x19
    cb64:	mov	x1, x19
    cb68:	mov	x0, #0x8                   	// #8
    cb6c:	mov	w2, #0x1                   	// #1
    cb70:	str	w2, [x1, #8]
    cb74:	str	x0, [x1], #16
    cb78:	add	x0, x0, #0x8
    cb7c:	cmp	x0, #0x100
    cb80:	b.ne	cb70 <_Unwind_GetTextRelBase@@GCC_3.0+0x7cc>  // b.any
    cb84:	add	x1, x7, #0x250
    cb88:	ldr	w0, [x7, #592]
    cb8c:	cbz	w0, cbe4 <_Unwind_GetTextRelBase@@GCC_3.0+0x840>
    cb90:	mov	w6, #0x8001                	// #32769
    cb94:	movk	w6, #0x4650, lsl #16
    cb98:	add	x5, x3, #0x600
    cb9c:	mov	w4, #0x1                   	// #1
    cba0:	add	x8, x7, x3
    cba4:	b	cbb8 <_Unwind_GetTextRelBase@@GCC_3.0+0x814>
    cba8:	ldr	w0, [x1, #4]
    cbac:	add	x1, x1, x0
    cbb0:	ldr	w0, [x1]
    cbb4:	cbz	w0, cbe4 <_Unwind_GetTextRelBase@@GCC_3.0+0x840>
    cbb8:	cmp	w0, w6
    cbbc:	b.ne	cba8 <_Unwind_GetTextRelBase@@GCC_3.0+0x804>  // b.any
    cbc0:	add	x0, x19, #0x400
    cbc4:	sub	x3, x1, #0x520
    cbc8:	sub	x3, x3, x8
    cbcc:	str	w4, [x0, #8]
    cbd0:	add	x2, x3, x0
    cbd4:	str	x2, [x0], #16
    cbd8:	cmp	x0, x5
    cbdc:	b.ne	cbcc <_Unwind_GetTextRelBase@@GCC_3.0+0x828>  // b.any
    cbe0:	b	cba8 <_Unwind_GetTextRelBase@@GCC_3.0+0x804>
    cbe4:	mov	w1, #0x1                   	// #1
    cbe8:	str	w1, [x19, #504]
    cbec:	add	x0, x7, #0x230
    cbf0:	sub	x0, x0, x9
    cbf4:	str	x0, [x19, #496]
    cbf8:	strb	w1, [x19, #1651]
    cbfc:	mov	w0, #0x4                   	// #4
    cc00:	str	w0, [x19, #1544]
    cc04:	ldr	x0, [x7, #568]
    cc08:	sub	x0, x0, x9
    cc0c:	str	x0, [x19, #1536]
    cc10:	mov	x0, #0x60                  	// #96
    cc14:	str	x0, [x19, #1640]
    cc18:	mov	w0, #0x0                   	// #0
    cc1c:	ldp	x23, x24, [sp, #48]
    cc20:	b	ce48 <_Unwind_GetTextRelBase@@GCC_3.0+0xaa4>
    cc24:	ldrb	w1, [x22, #10]
    cc28:	cmp	w1, #0x68
    cc2c:	b.ne	ca98 <_Unwind_GetTextRelBase@@GCC_3.0+0x6f4>  // b.any
    cc30:	ldr	x1, [x0], #8
    cc34:	str	x1, [x19, #1656]
    cc38:	add	x21, x22, #0xb
    cc3c:	b	ca98 <_Unwind_GetTextRelBase@@GCC_3.0+0x6f4>
    cc40:	ldrb	w1, [x0]
    cc44:	cmp	w1, #0x8
    cc48:	b.ne	ce98 <_Unwind_GetTextRelBase@@GCC_3.0+0xaf4>  // b.any
    cc4c:	ldrb	w1, [x0, #1]
    cc50:	cbnz	w1, ce98 <_Unwind_GetTextRelBase@@GCC_3.0+0xaf4>
    cc54:	add	x0, x0, #0x2
    cc58:	b	caa4 <_Unwind_GetTextRelBase@@GCC_3.0+0x700>
    cc5c:	add	x1, sp, #0x68
    cc60:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    cc64:	ldr	x1, [sp, #104]
    cc68:	str	x1, [x19, #1640]
    cc6c:	b	cad8 <_Unwind_GetTextRelBase@@GCC_3.0+0x734>
    cc70:	add	x1, sp, #0x68
    cc74:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    cc78:	ldr	x24, [sp, #104]
    cc7c:	add	x24, x0, x24
    cc80:	mov	w1, #0x1                   	// #1
    cc84:	strb	w1, [x19, #1650]
    cc88:	add	x2, x21, #0x1
    cc8c:	ldrb	w1, [x21, #1]
    cc90:	cbz	w1, cd38 <_Unwind_GetTextRelBase@@GCC_3.0+0x994>
    cc94:	stp	x25, x26, [sp, #64]
    cc98:	stp	x27, x28, [sp, #80]
    cc9c:	mov	x21, x2
    cca0:	b	cafc <_Unwind_GetTextRelBase@@GCC_3.0+0x758>
    cca4:	ldrb	w1, [x0], #1
    cca8:	strb	w1, [x19, #1649]
    ccac:	mov	x1, x21
    ccb0:	ldrb	w1, [x1]
    ccb4:	add	x21, x21, #0x1
    ccb8:	cbz	w1, cd30 <_Unwind_GetTextRelBase@@GCC_3.0+0x98c>
    ccbc:	cmp	w1, #0x4c
    ccc0:	b.eq	cca4 <_Unwind_GetTextRelBase@@GCC_3.0+0x900>  // b.none
    ccc4:	cmp	w1, #0x52
    ccc8:	b.eq	cce8 <_Unwind_GetTextRelBase@@GCC_3.0+0x944>  // b.none
    cccc:	cmp	w1, #0x50
    ccd0:	b.eq	ccf8 <_Unwind_GetTextRelBase@@GCC_3.0+0x954>  // b.none
    ccd4:	cmp	w1, #0x53
    ccd8:	b.ne	cda0 <_Unwind_GetTextRelBase@@GCC_3.0+0x9fc>  // b.any
    ccdc:	strb	w25, [x19, #1651]
    cce0:	mov	x1, x21
    cce4:	b	ccb0 <_Unwind_GetTextRelBase@@GCC_3.0+0x90c>
    cce8:	ldrb	w1, [x0], #1
    ccec:	strb	w1, [x19, #1648]
    ccf0:	mov	x1, x21
    ccf4:	b	ccb0 <_Unwind_GetTextRelBase@@GCC_3.0+0x90c>
    ccf8:	mov	x27, x0
    ccfc:	ldrb	w28, [x27], #1
    cd00:	mov	x1, x20
    cd04:	mov	w0, w28
    cd08:	bl	c3ac <_Unwind_GetTextRelBase@@GCC_3.0+0x8>
    cd0c:	mov	x3, x26
    cd10:	mov	x2, x27
    cd14:	mov	x1, x0
    cd18:	mov	w0, w28
    cd1c:	bl	be78 <__enable_execute_stack@@GCC_3.4.2+0x70>
    cd20:	ldr	x1, [sp, #120]
    cd24:	str	x1, [x19, #1616]
    cd28:	mov	x1, x21
    cd2c:	b	ccb0 <_Unwind_GetTextRelBase@@GCC_3.0+0x90c>
    cd30:	ldp	x25, x26, [sp, #64]
    cd34:	ldp	x27, x28, [sp, #80]
    cd38:	cbz	x24, cd98 <_Unwind_GetTextRelBase@@GCC_3.0+0x9f4>
    cd3c:	ldr	w1, [x22]
    cd40:	add	x1, x1, #0x4
    cd44:	mov	x3, x19
    cd48:	mov	x2, x20
    cd4c:	add	x1, x22, x1
    cd50:	mov	x0, x24
    cd54:	bl	c430 <_Unwind_GetTextRelBase@@GCC_3.0+0x8c>
    cd58:	ldrb	w0, [x19, #1648]
    cd5c:	cmp	w0, #0xff
    cd60:	b.eq	ce54 <_Unwind_GetTextRelBase@@GCC_3.0+0xab0>  // b.none
    cd64:	and	w0, w0, #0x7
    cd68:	cmp	w0, #0x2
    cd6c:	b.eq	ce5c <_Unwind_GetTextRelBase@@GCC_3.0+0xab8>  // b.none
    cd70:	b.ls	cdbc <_Unwind_GetTextRelBase@@GCC_3.0+0xa18>  // b.plast
    cd74:	mov	w21, #0x4                   	// #4
    cd78:	cmp	w0, #0x3
    cd7c:	b.eq	cdc4 <_Unwind_GetTextRelBase@@GCC_3.0+0xa20>  // b.none
    cd80:	mov	w21, #0x8                   	// #8
    cd84:	cmp	w0, #0x4
    cd88:	b.eq	cdc4 <_Unwind_GetTextRelBase@@GCC_3.0+0xa20>  // b.none
    cd8c:	stp	x25, x26, [sp, #64]
    cd90:	stp	x27, x28, [sp, #80]
    cd94:	bl	2c50 <abort@plt>
    cd98:	mov	x24, x0
    cd9c:	b	cda8 <_Unwind_GetTextRelBase@@GCC_3.0+0xa04>
    cda0:	ldp	x25, x26, [sp, #64]
    cda4:	ldp	x27, x28, [sp, #80]
    cda8:	cbnz	x24, cd3c <_Unwind_GetTextRelBase@@GCC_3.0+0x998>
    cdac:	mov	w0, #0x3                   	// #3
    cdb0:	ldp	x21, x22, [sp, #32]
    cdb4:	ldp	x23, x24, [sp, #48]
    cdb8:	b	ce48 <_Unwind_GetTextRelBase@@GCC_3.0+0xaa4>
    cdbc:	mov	w21, #0x8                   	// #8
    cdc0:	cbnz	w0, cd8c <_Unwind_GetTextRelBase@@GCC_3.0+0x9e8>
    cdc4:	lsl	w21, w21, #1
    cdc8:	mov	w21, w21
    cdcc:	add	x21, x21, #0x8
    cdd0:	add	x21, x23, x21
    cdd4:	ldrb	w0, [x19, #1650]
    cdd8:	cbnz	w0, ce64 <_Unwind_GetTextRelBase@@GCC_3.0+0xac0>
    cddc:	ldrb	w22, [x19, #1649]
    cde0:	mov	x24, #0x0                   	// #0
    cde4:	cmp	w22, #0xff
    cde8:	b.eq	ce20 <_Unwind_GetTextRelBase@@GCC_3.0+0xa7c>  // b.none
    cdec:	mov	x1, x20
    cdf0:	mov	w0, w22
    cdf4:	bl	c3ac <_Unwind_GetTextRelBase@@GCC_3.0+0x8>
    cdf8:	add	x3, sp, #0x78
    cdfc:	mov	x2, x21
    ce00:	mov	x1, x0
    ce04:	mov	w0, w22
    ce08:	bl	be78 <__enable_execute_stack@@GCC_3.4.2+0x70>
    ce0c:	ldr	x1, [sp, #120]
    ce10:	str	x1, [x20, #800]
    ce14:	mov	x21, x24
    ce18:	cmp	x21, #0x0
    ce1c:	csel	x21, x21, x0, ne  // ne = any
    ce20:	ldr	w1, [x23]
    ce24:	add	x1, x1, #0x4
    ce28:	mov	x3, x19
    ce2c:	mov	x2, x20
    ce30:	add	x1, x23, x1
    ce34:	mov	x0, x21
    ce38:	bl	c430 <_Unwind_GetTextRelBase@@GCC_3.0+0x8c>
    ce3c:	mov	w0, #0x0                   	// #0
    ce40:	ldp	x21, x22, [sp, #32]
    ce44:	ldp	x23, x24, [sp, #48]
    ce48:	ldp	x19, x20, [sp, #16]
    ce4c:	ldp	x29, x30, [sp], #128
    ce50:	ret
    ce54:	mov	w21, #0x0                   	// #0
    ce58:	b	cdc4 <_Unwind_GetTextRelBase@@GCC_3.0+0xa20>
    ce5c:	mov	w21, #0x2                   	// #2
    ce60:	b	cdc4 <_Unwind_GetTextRelBase@@GCC_3.0+0xa20>
    ce64:	add	x1, sp, #0x78
    ce68:	mov	x0, x21
    ce6c:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    ce70:	ldr	x21, [sp, #120]
    ce74:	add	x21, x0, x21
    ce78:	ldrb	w22, [x19, #1649]
    ce7c:	cmp	w22, #0xff
    ce80:	b.eq	ce18 <_Unwind_GetTextRelBase@@GCC_3.0+0xa74>  // b.none
    ce84:	mov	x24, x21
    ce88:	mov	x21, x0
    ce8c:	b	cdec <_Unwind_GetTextRelBase@@GCC_3.0+0xa48>
    ce90:	mov	w0, #0x5                   	// #5
    ce94:	b	ce48 <_Unwind_GetTextRelBase@@GCC_3.0+0xaa4>
    ce98:	mov	w0, #0x3                   	// #3
    ce9c:	ldp	x21, x22, [sp, #32]
    cea0:	ldp	x23, x24, [sp, #48]
    cea4:	b	ce48 <_Unwind_GetTextRelBase@@GCC_3.0+0xaa4>
    cea8:	mov	x24, x0
    ceac:	b	cda8 <_Unwind_GetTextRelBase@@GCC_3.0+0xa04>
    ceb0:	ldp	x23, x24, [sp, #48]
    ceb4:	b	ce48 <_Unwind_GetTextRelBase@@GCC_3.0+0xaa4>
    ceb8:	ldp	x23, x24, [sp, #48]
    cebc:	b	ce48 <_Unwind_GetTextRelBase@@GCC_3.0+0xaa4>
    cec0:	sub	sp, sp, #0x280
    cec4:	stp	x29, x30, [sp]
    cec8:	mov	x29, sp
    cecc:	stp	x21, x22, [sp, #32]
    ced0:	str	x3, [sp, #128]
    ced4:	cmp	x0, x1
    ced8:	b.cs	d5d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x1230>  // b.hs, b.nlast
    cedc:	stp	x19, x20, [sp, #16]
    cee0:	stp	x23, x24, [sp, #48]
    cee4:	stp	x25, x26, [sp, #64]
    cee8:	stp	x27, x28, [sp, #80]
    ceec:	mov	x19, x0
    cef0:	mov	x24, x1
    cef4:	mov	x27, x2
    cef8:	mov	w21, #0x1                   	// #1
    cefc:	adrp	x26, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    cf00:	add	x26, x26, #0xb50
    cf04:	add	x25, sp, #0x80
    cf08:	adrp	x28, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    cf0c:	add	x28, x28, #0xd30
    cf10:	b	cf38 <_Unwind_GetTextRelBase@@GCC_3.0+0xb94>
    cf14:	sub	w23, w22, #0x30
    cf18:	mov	w20, w21
    cf1c:	mov	x19, x2
    cf20:	cmp	w20, #0x3f
    cf24:	b.hi	d58c <_Unwind_GetTextRelBase@@GCC_3.0+0x11e8>  // b.pmore
    cf28:	add	w21, w20, #0x1
    cf2c:	str	x23, [x25, w20, sxtw #3]
    cf30:	cmp	x19, x24
    cf34:	b.cs	d5a0 <_Unwind_GetTextRelBase@@GCC_3.0+0x11fc>  // b.hs, b.nlast
    cf38:	mov	x2, x19
    cf3c:	ldrb	w22, [x2], #1
    cf40:	sub	w0, w22, #0x3
    cf44:	cmp	w0, #0xee
    cf48:	b.hi	d588 <_Unwind_GetTextRelBase@@GCC_3.0+0x11e4>  // b.pmore
    cf4c:	ldrh	w0, [x26, w0, uxtw #1]
    cf50:	adr	x1, cf5c <_Unwind_GetTextRelBase@@GCC_3.0+0xbb8>
    cf54:	add	x0, x1, w0, sxth #2
    cf58:	br	x0
    cf5c:	ldur	x23, [x19, #1]
    cf60:	add	x19, x19, #0x9
    cf64:	mov	w20, w21
    cf68:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    cf6c:	ldrb	w20, [x19, #1]
    cf70:	mov	x1, x27
    cf74:	mov	w0, w20
    cf78:	bl	c3ac <_Unwind_GetTextRelBase@@GCC_3.0+0x8>
    cf7c:	add	x3, sp, #0x78
    cf80:	add	x2, x19, #0x2
    cf84:	mov	x1, x0
    cf88:	mov	w0, w20
    cf8c:	bl	be78 <__enable_execute_stack@@GCC_3.4.2+0x70>
    cf90:	mov	x19, x0
    cf94:	ldr	x23, [sp, #120]
    cf98:	mov	w20, w21
    cf9c:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    cfa0:	ldrb	w23, [x19, #1]
    cfa4:	add	x19, x19, #0x2
    cfa8:	mov	w20, w21
    cfac:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    cfb0:	ldrsb	x23, [x19, #1]
    cfb4:	add	x19, x19, #0x2
    cfb8:	mov	w20, w21
    cfbc:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    cfc0:	ldurh	w23, [x19, #1]
    cfc4:	add	x19, x19, #0x3
    cfc8:	mov	w20, w21
    cfcc:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    cfd0:	ldursh	x23, [x19, #1]
    cfd4:	add	x19, x19, #0x3
    cfd8:	mov	w20, w21
    cfdc:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    cfe0:	ldur	w23, [x19, #1]
    cfe4:	add	x19, x19, #0x5
    cfe8:	mov	w20, w21
    cfec:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    cff0:	ldursw	x23, [x19, #1]
    cff4:	add	x19, x19, #0x5
    cff8:	mov	w20, w21
    cffc:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d000:	ldur	x23, [x19, #1]
    d004:	add	x19, x19, #0x9
    d008:	mov	w20, w21
    d00c:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d010:	ldur	x23, [x19, #1]
    d014:	add	x19, x19, #0x9
    d018:	mov	w20, w21
    d01c:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d020:	add	x1, sp, #0x68
    d024:	mov	x0, x2
    d028:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    d02c:	mov	x19, x0
    d030:	ldr	x23, [sp, #104]
    d034:	mov	w20, w21
    d038:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d03c:	add	x1, sp, #0x78
    d040:	mov	x0, x2
    d044:	bl	be34 <__enable_execute_stack@@GCC_3.4.2+0x2c>
    d048:	mov	x19, x0
    d04c:	ldr	x23, [sp, #120]
    d050:	mov	w20, w21
    d054:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d058:	sub	w22, w22, #0x50
    d05c:	cmp	w22, #0x61
    d060:	b.gt	d0b0 <_Unwind_GetTextRelBase@@GCC_3.0+0xd0c>
    d064:	ldr	x23, [x27, w22, sxtw #3]
    d068:	ldr	x0, [x27, #832]
    d06c:	tbz	x0, #62, d084 <_Unwind_GetTextRelBase@@GCC_3.0+0xce0>
    d070:	add	x0, x27, w22, sxtw
    d074:	ldrb	w0, [x0, #856]
    d078:	mov	w20, w21
    d07c:	mov	x19, x2
    d080:	cbnz	w0, cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d084:	cmp	w22, #0x2e
    d088:	b.eq	d0b4 <_Unwind_GetTextRelBase@@GCC_3.0+0xd10>  // b.none
    d08c:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    d090:	add	x0, x0, #0x1c8
    d094:	ldrb	w0, [x0, w22, sxtw]
    d098:	cmp	w0, #0x8
    d09c:	b.ne	d0c8 <_Unwind_GetTextRelBase@@GCC_3.0+0xd24>  // b.any
    d0a0:	ldr	x23, [x23]
    d0a4:	mov	w20, w21
    d0a8:	mov	x19, x2
    d0ac:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d0b0:	bl	2c50 <abort@plt>
    d0b4:	cntd	x0
    d0b8:	sxtw	x23, w0
    d0bc:	mov	w20, w21
    d0c0:	mov	x19, x2
    d0c4:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d0c8:	bl	2c50 <abort@plt>
    d0cc:	add	x1, sp, #0x60
    d0d0:	mov	x0, x2
    d0d4:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    d0d8:	mov	x19, x0
    d0dc:	ldr	x0, [sp, #96]
    d0e0:	cmp	w0, #0x61
    d0e4:	b.gt	d12c <_Unwind_GetTextRelBase@@GCC_3.0+0xd88>
    d0e8:	ldr	x23, [x27, w0, sxtw #3]
    d0ec:	ldr	x1, [x27, #832]
    d0f0:	tbz	x1, #62, d104 <_Unwind_GetTextRelBase@@GCC_3.0+0xd60>
    d0f4:	add	x1, x27, w0, sxtw
    d0f8:	ldrb	w1, [x1, #856]
    d0fc:	mov	w20, w21
    d100:	cbnz	w1, cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d104:	cmp	w0, #0x2e
    d108:	b.eq	d130 <_Unwind_GetTextRelBase@@GCC_3.0+0xd8c>  // b.none
    d10c:	adrp	x1, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    d110:	add	x1, x1, #0x1c8
    d114:	ldrb	w0, [x1, w0, sxtw]
    d118:	cmp	w0, #0x8
    d11c:	b.ne	d140 <_Unwind_GetTextRelBase@@GCC_3.0+0xd9c>  // b.any
    d120:	ldr	x23, [x23]
    d124:	mov	w20, w21
    d128:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d12c:	bl	2c50 <abort@plt>
    d130:	cntd	x0
    d134:	sxtw	x23, w0
    d138:	mov	w20, w21
    d13c:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d140:	bl	2c50 <abort@plt>
    d144:	add	x1, sp, #0x70
    d148:	mov	x0, x2
    d14c:	bl	be34 <__enable_execute_stack@@GCC_3.4.2+0x2c>
    d150:	mov	x19, x0
    d154:	sub	w22, w22, #0x70
    d158:	cmp	w22, #0x61
    d15c:	b.gt	d1a8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe04>
    d160:	ldr	x23, [x27, w22, sxtw #3]
    d164:	ldr	x0, [x27, #832]
    d168:	tbz	x0, #62, d178 <_Unwind_GetTextRelBase@@GCC_3.0+0xdd4>
    d16c:	add	x0, x27, w22, sxtw
    d170:	ldrb	w0, [x0, #856]
    d174:	cbnz	w0, d198 <_Unwind_GetTextRelBase@@GCC_3.0+0xdf4>
    d178:	cmp	w22, #0x2e
    d17c:	b.eq	d1ac <_Unwind_GetTextRelBase@@GCC_3.0+0xe08>  // b.none
    d180:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    d184:	add	x0, x0, #0x1c8
    d188:	ldrb	w0, [x0, w22, sxtw]
    d18c:	cmp	w0, #0x8
    d190:	b.ne	d1b8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe14>  // b.any
    d194:	ldr	x23, [x23]
    d198:	ldr	x0, [sp, #112]
    d19c:	add	x23, x23, x0
    d1a0:	mov	w20, w21
    d1a4:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d1a8:	bl	2c50 <abort@plt>
    d1ac:	cntd	x0
    d1b0:	sxtw	x23, w0
    d1b4:	b	d198 <_Unwind_GetTextRelBase@@GCC_3.0+0xdf4>
    d1b8:	bl	2c50 <abort@plt>
    d1bc:	add	x1, sp, #0x60
    d1c0:	mov	x0, x2
    d1c4:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    d1c8:	add	x1, sp, #0x70
    d1cc:	bl	be34 <__enable_execute_stack@@GCC_3.4.2+0x2c>
    d1d0:	mov	x19, x0
    d1d4:	ldr	x0, [sp, #96]
    d1d8:	cmp	w0, #0x61
    d1dc:	b.gt	d228 <_Unwind_GetTextRelBase@@GCC_3.0+0xe84>
    d1e0:	ldr	x23, [x27, w0, sxtw #3]
    d1e4:	ldr	x1, [x27, #832]
    d1e8:	tbz	x1, #62, d1f8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe54>
    d1ec:	add	x1, x27, w0, sxtw
    d1f0:	ldrb	w1, [x1, #856]
    d1f4:	cbnz	w1, d218 <_Unwind_GetTextRelBase@@GCC_3.0+0xe74>
    d1f8:	cmp	w0, #0x2e
    d1fc:	b.eq	d22c <_Unwind_GetTextRelBase@@GCC_3.0+0xe88>  // b.none
    d200:	adrp	x1, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    d204:	add	x1, x1, #0x1c8
    d208:	ldrb	w0, [x1, w0, sxtw]
    d20c:	cmp	w0, #0x8
    d210:	b.ne	d238 <_Unwind_GetTextRelBase@@GCC_3.0+0xe94>  // b.any
    d214:	ldr	x23, [x23]
    d218:	ldr	x0, [sp, #112]
    d21c:	add	x23, x23, x0
    d220:	mov	w20, w21
    d224:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d228:	bl	2c50 <abort@plt>
    d22c:	cntd	x0
    d230:	sxtw	x23, w0
    d234:	b	d218 <_Unwind_GetTextRelBase@@GCC_3.0+0xe74>
    d238:	bl	2c50 <abort@plt>
    d23c:	cbz	w21, d254 <_Unwind_GetTextRelBase@@GCC_3.0+0xeb0>
    d240:	sub	w0, w21, #0x1
    d244:	ldr	x23, [x25, w0, sxtw #3]
    d248:	mov	w20, w21
    d24c:	mov	x19, x2
    d250:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d254:	bl	2c50 <abort@plt>
    d258:	cbz	w21, d268 <_Unwind_GetTextRelBase@@GCC_3.0+0xec4>
    d25c:	sub	w21, w21, #0x1
    d260:	mov	x19, x2
    d264:	b	cf30 <_Unwind_GetTextRelBase@@GCC_3.0+0xb8c>
    d268:	bl	2c50 <abort@plt>
    d26c:	add	x3, x19, #0x2
    d270:	ldrb	w1, [x19, #1]
    d274:	str	x1, [sp, #112]
    d278:	sub	w2, w21, #0x1
    d27c:	sxtw	x0, w2
    d280:	cmp	x1, w2, sxtw
    d284:	b.ge	d29c <_Unwind_GetTextRelBase@@GCC_3.0+0xef8>  // b.tcont
    d288:	sub	x0, x0, x1
    d28c:	ldr	x23, [x25, x0, lsl #3]
    d290:	mov	w20, w21
    d294:	mov	x19, x3
    d298:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d29c:	bl	2c50 <abort@plt>
    d2a0:	cmp	w21, #0x1
    d2a4:	b.le	d2bc <_Unwind_GetTextRelBase@@GCC_3.0+0xf18>
    d2a8:	sub	w0, w21, #0x2
    d2ac:	ldr	x23, [x25, w0, sxtw #3]
    d2b0:	mov	w20, w21
    d2b4:	mov	x19, x2
    d2b8:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d2bc:	bl	2c50 <abort@plt>
    d2c0:	cmp	w21, #0x1
    d2c4:	b.le	d2f0 <_Unwind_GetTextRelBase@@GCC_3.0+0xf4c>
    d2c8:	sub	w1, w21, #0x1
    d2cc:	sxtw	x1, w1
    d2d0:	ldr	x3, [x25, x1, lsl #3]
    d2d4:	sub	w0, w21, #0x2
    d2d8:	sxtw	x0, w0
    d2dc:	ldr	x4, [x25, x0, lsl #3]
    d2e0:	str	x4, [x25, x1, lsl #3]
    d2e4:	str	x3, [x25, x0, lsl #3]
    d2e8:	mov	x19, x2
    d2ec:	b	cf30 <_Unwind_GetTextRelBase@@GCC_3.0+0xb8c>
    d2f0:	bl	2c50 <abort@plt>
    d2f4:	cmp	w21, #0x2
    d2f8:	b.le	d334 <_Unwind_GetTextRelBase@@GCC_3.0+0xf90>
    d2fc:	sub	w3, w21, #0x1
    d300:	sxtw	x3, w3
    d304:	ldr	x4, [x25, x3, lsl #3]
    d308:	sub	w1, w21, #0x2
    d30c:	sxtw	x1, w1
    d310:	ldr	x6, [x25, x1, lsl #3]
    d314:	sub	w0, w21, #0x3
    d318:	sxtw	x0, w0
    d31c:	ldr	x5, [x25, x0, lsl #3]
    d320:	str	x6, [x25, x3, lsl #3]
    d324:	str	x5, [x25, x1, lsl #3]
    d328:	str	x4, [x25, x0, lsl #3]
    d32c:	mov	x19, x2
    d330:	b	cf30 <_Unwind_GetTextRelBase@@GCC_3.0+0xb8c>
    d334:	bl	2c50 <abort@plt>
    d338:	cbz	w21, d36c <_Unwind_GetTextRelBase@@GCC_3.0+0xfc8>
    d33c:	sub	w20, w21, #0x1
    d340:	ldr	x23, [x25, w20, sxtw #3]
    d344:	cmp	w22, #0x20
    d348:	b.eq	d404 <_Unwind_GetTextRelBase@@GCC_3.0+0x1060>  // b.none
    d34c:	b.hi	d384 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>  // b.pmore
    d350:	cmp	w22, #0x19
    d354:	b.eq	d3f4 <_Unwind_GetTextRelBase@@GCC_3.0+0x1050>  // b.none
    d358:	cmp	w22, #0x1f
    d35c:	b.ne	d370 <_Unwind_GetTextRelBase@@GCC_3.0+0xfcc>  // b.any
    d360:	neg	x23, x23
    d364:	mov	x19, x2
    d368:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d36c:	bl	2c50 <abort@plt>
    d370:	cmp	w22, #0x6
    d374:	b.ne	d42c <_Unwind_GetTextRelBase@@GCC_3.0+0x1088>  // b.any
    d378:	ldr	x23, [x23]
    d37c:	mov	x19, x2
    d380:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d384:	cmp	w22, #0x23
    d388:	b.eq	d410 <_Unwind_GetTextRelBase@@GCC_3.0+0x106c>  // b.none
    d38c:	cmp	w22, #0x94
    d390:	b.ne	d42c <_Unwind_GetTextRelBase@@GCC_3.0+0x1088>  // b.any
    d394:	add	x1, x19, #0x2
    d398:	ldrb	w0, [x19, #1]
    d39c:	cmp	w0, #0x4
    d3a0:	b.eq	d3e4 <_Unwind_GetTextRelBase@@GCC_3.0+0x1040>  // b.none
    d3a4:	b.hi	d3c4 <_Unwind_GetTextRelBase@@GCC_3.0+0x1020>  // b.pmore
    d3a8:	cmp	w0, #0x1
    d3ac:	b.eq	d3d8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1034>  // b.none
    d3b0:	cmp	w0, #0x2
    d3b4:	b.ne	d3f0 <_Unwind_GetTextRelBase@@GCC_3.0+0x104c>  // b.any
    d3b8:	ldrh	w23, [x23]
    d3bc:	mov	x19, x1
    d3c0:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d3c4:	cmp	w0, #0x8
    d3c8:	b.ne	d3f0 <_Unwind_GetTextRelBase@@GCC_3.0+0x104c>  // b.any
    d3cc:	ldr	x23, [x23]
    d3d0:	mov	x19, x1
    d3d4:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d3d8:	ldrb	w23, [x23]
    d3dc:	mov	x19, x1
    d3e0:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d3e4:	ldr	w23, [x23]
    d3e8:	mov	x19, x1
    d3ec:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d3f0:	bl	2c50 <abort@plt>
    d3f4:	mov	x19, x2
    d3f8:	tbz	x23, #63, cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d3fc:	neg	x23, x23
    d400:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d404:	mvn	x23, x23
    d408:	mov	x19, x2
    d40c:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d410:	add	x1, sp, #0x68
    d414:	mov	x0, x2
    d418:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    d41c:	mov	x19, x0
    d420:	ldr	x0, [sp, #104]
    d424:	add	x23, x23, x0
    d428:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d42c:	bl	2c50 <abort@plt>
    d430:	cmp	w21, #0x1
    d434:	b.le	d464 <_Unwind_GetTextRelBase@@GCC_3.0+0x10c0>
    d438:	sub	w20, w21, #0x2
    d43c:	ldr	x23, [x25, w20, sxtw #3]
    d440:	sub	w21, w21, #0x1
    d444:	ldr	x0, [x25, w21, sxtw #3]
    d448:	sub	w22, w22, #0x1a
    d44c:	cmp	w22, #0x14
    d450:	b.hi	d550 <_Unwind_GetTextRelBase@@GCC_3.0+0x11ac>  // b.pmore
    d454:	ldrb	w1, [x28, w22, uxtw]
    d458:	adr	x3, d464 <_Unwind_GetTextRelBase@@GCC_3.0+0x10c0>
    d45c:	add	x1, x3, w1, sxtb #2
    d460:	br	x1
    d464:	bl	2c50 <abort@plt>
    d468:	and	x23, x23, x0
    d46c:	mov	x19, x2
    d470:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d474:	sdiv	x23, x23, x0
    d478:	mov	x19, x2
    d47c:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d480:	sub	x23, x23, x0
    d484:	mov	x19, x2
    d488:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d48c:	udiv	x1, x23, x0
    d490:	msub	x23, x1, x0, x23
    d494:	mov	x19, x2
    d498:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d49c:	mul	x23, x23, x0
    d4a0:	mov	x19, x2
    d4a4:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d4a8:	orr	x23, x23, x0
    d4ac:	mov	x19, x2
    d4b0:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d4b4:	add	x23, x23, x0
    d4b8:	mov	x19, x2
    d4bc:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d4c0:	lsl	x23, x23, x0
    d4c4:	mov	x19, x2
    d4c8:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d4cc:	lsr	x23, x23, x0
    d4d0:	mov	x19, x2
    d4d4:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d4d8:	asr	x23, x23, x0
    d4dc:	mov	x19, x2
    d4e0:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d4e4:	eor	x23, x23, x0
    d4e8:	mov	x19, x2
    d4ec:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d4f0:	cmp	x23, x0
    d4f4:	cset	x23, le
    d4f8:	mov	x19, x2
    d4fc:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d500:	cmp	x23, x0
    d504:	cset	x23, ge  // ge = tcont
    d508:	mov	x19, x2
    d50c:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d510:	cmp	x23, x0
    d514:	cset	x23, eq  // eq = none
    d518:	mov	x19, x2
    d51c:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d520:	cmp	x23, x0
    d524:	cset	x23, lt  // lt = tstop
    d528:	mov	x19, x2
    d52c:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d530:	cmp	x23, x0
    d534:	cset	x23, gt
    d538:	mov	x19, x2
    d53c:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d540:	cmp	x23, x0
    d544:	cset	x23, ne  // ne = any
    d548:	mov	x19, x2
    d54c:	b	cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xb7c>
    d550:	bl	2c50 <abort@plt>
    d554:	add	x0, x19, #0x3
    d558:	ldursh	x19, [x19, #1]
    d55c:	add	x19, x0, x19
    d560:	b	cf30 <_Unwind_GetTextRelBase@@GCC_3.0+0xb8c>
    d564:	cbz	w21, d584 <_Unwind_GetTextRelBase@@GCC_3.0+0x11e0>
    d568:	sub	w21, w21, #0x1
    d56c:	add	x1, x19, #0x3
    d570:	ldr	x0, [x25, w21, sxtw #3]
    d574:	cbz	x0, d598 <_Unwind_GetTextRelBase@@GCC_3.0+0x11f4>
    d578:	ldursh	x19, [x19, #1]
    d57c:	add	x19, x1, x19
    d580:	b	cf30 <_Unwind_GetTextRelBase@@GCC_3.0+0xb8c>
    d584:	bl	2c50 <abort@plt>
    d588:	bl	2c50 <abort@plt>
    d58c:	bl	2c50 <abort@plt>
    d590:	mov	x19, x2
    d594:	b	cf30 <_Unwind_GetTextRelBase@@GCC_3.0+0xb8c>
    d598:	mov	x19, x1
    d59c:	b	cf30 <_Unwind_GetTextRelBase@@GCC_3.0+0xb8c>
    d5a0:	cbz	w21, d5d0 <_Unwind_GetTextRelBase@@GCC_3.0+0x122c>
    d5a4:	ldp	x19, x20, [sp, #16]
    d5a8:	ldp	x23, x24, [sp, #48]
    d5ac:	ldp	x25, x26, [sp, #64]
    d5b0:	ldp	x27, x28, [sp, #80]
    d5b4:	sub	w21, w21, #0x1
    d5b8:	add	x0, sp, #0x80
    d5bc:	ldr	x0, [x0, w21, sxtw #3]
    d5c0:	ldp	x21, x22, [sp, #32]
    d5c4:	ldp	x29, x30, [sp]
    d5c8:	add	sp, sp, #0x280
    d5cc:	ret
    d5d0:	bl	2c50 <abort@plt>
    d5d4:	mov	w21, #0x1                   	// #1
    d5d8:	b	d5b4 <_Unwind_GetTextRelBase@@GCC_3.0+0x1210>
    d5dc:	sub	sp, sp, #0x430
    d5e0:	stp	x29, x30, [sp]
    d5e4:	mov	x29, sp
    d5e8:	stp	x19, x20, [sp, #16]
    d5ec:	stp	x21, x22, [sp, #32]
    d5f0:	stp	x23, x24, [sp, #48]
    d5f4:	stp	x25, x26, [sp, #64]
    d5f8:	stp	x27, x28, [sp, #80]
    d5fc:	mov	x22, x0
    d600:	mov	x28, x1
    d604:	mov	x2, #0x3c0                 	// #960
    d608:	mov	x1, x0
    d60c:	add	x0, sp, #0x70
    d610:	bl	2aa0 <memcpy@plt>
    d614:	ldr	x0, [sp, #944]
    d618:	tbz	x0, #62, d624 <_Unwind_GetTextRelBase@@GCC_3.0+0x1280>
    d61c:	ldrb	w0, [sp, #999]
    d620:	cbnz	w0, d62c <_Unwind_GetTextRelBase@@GCC_3.0+0x1288>
    d624:	ldr	x0, [sp, #360]
    d628:	cbz	x0, d678 <_Unwind_GetTextRelBase@@GCC_3.0+0x12d4>
    d62c:	ldr	x0, [x22, #832]
    d630:	tbz	x0, #62, d638 <_Unwind_GetTextRelBase@@GCC_3.0+0x1294>
    d634:	strb	wzr, [x22, #887]
    d638:	str	xzr, [x22, #248]
    d63c:	ldr	w0, [x28, #1600]
    d640:	cmp	w0, #0x1
    d644:	b.eq	d6b0 <_Unwind_GetTextRelBase@@GCC_3.0+0x130c>  // b.none
    d648:	cmp	w0, #0x2
    d64c:	b.ne	d73c <_Unwind_GetTextRelBase@@GCC_3.0+0x1398>  // b.any
    d650:	add	x1, sp, #0x60
    d654:	ldr	x0, [x28, #1592]
    d658:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    d65c:	mov	x3, #0x0                   	// #0
    d660:	add	x2, sp, #0x70
    d664:	ldr	x1, [sp, #96]
    d668:	add	x1, x0, x1
    d66c:	bl	cec0 <_Unwind_GetTextRelBase@@GCC_3.0+0xb1c>
    d670:	mov	x23, x0
    d674:	b	d700 <_Unwind_GetTextRelBase@@GCC_3.0+0x135c>
    d678:	ldr	x0, [x22, #784]
    d67c:	adrp	x1, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    d680:	ldrb	w1, [x1, #487]
    d684:	cmp	w1, #0x8
    d688:	b.ne	d6a4 <_Unwind_GetTextRelBase@@GCC_3.0+0x1300>  // b.any
    d68c:	str	x0, [sp, #104]
    d690:	ldr	x0, [sp, #944]
    d694:	tbnz	x0, #62, d6a8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1304>
    d698:	add	x0, sp, #0x68
    d69c:	str	x0, [sp, #360]
    d6a0:	b	d62c <_Unwind_GetTextRelBase@@GCC_3.0+0x1288>
    d6a4:	bl	2c50 <abort@plt>
    d6a8:	strb	wzr, [sp, #999]
    d6ac:	b	d698 <_Unwind_GetTextRelBase@@GCC_3.0+0x12f4>
    d6b0:	ldr	x0, [x28, #1584]
    d6b4:	cmp	w0, #0x61
    d6b8:	b.gt	d728 <_Unwind_GetTextRelBase@@GCC_3.0+0x1384>
    d6bc:	add	x1, sp, #0x70
    d6c0:	ldr	x23, [x1, w0, sxtw #3]
    d6c4:	ldr	x1, [sp, #944]
    d6c8:	tbz	x1, #62, d6d8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1334>
    d6cc:	add	x1, sp, #0x3c8
    d6d0:	ldrb	w1, [x1, w0, sxtw]
    d6d4:	cbnz	w1, d6f8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1354>
    d6d8:	cmp	w0, #0x2e
    d6dc:	b.eq	d72c <_Unwind_GetTextRelBase@@GCC_3.0+0x1388>  // b.none
    d6e0:	adrp	x1, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    d6e4:	add	x1, x1, #0x1c8
    d6e8:	ldrb	w0, [x1, w0, sxtw]
    d6ec:	cmp	w0, #0x8
    d6f0:	b.ne	d738 <_Unwind_GetTextRelBase@@GCC_3.0+0x1394>  // b.any
    d6f4:	ldr	x23, [x23]
    d6f8:	ldr	x0, [x28, #1576]
    d6fc:	add	x23, x23, x0
    d700:	str	x23, [x22, #784]
    d704:	mov	x20, x28
    d708:	add	x21, x22, #0x358
    d70c:	mov	x19, #0x0                   	// #0
    d710:	add	x26, sp, #0x60
    d714:	add	x24, sp, #0x70
    d718:	adrp	x25, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    d71c:	add	x25, x25, #0x1c8
    d720:	add	x27, sp, #0x3c8
    d724:	b	d7a0 <_Unwind_GetTextRelBase@@GCC_3.0+0x13fc>
    d728:	bl	2c50 <abort@plt>
    d72c:	cntd	x0
    d730:	sxtw	x23, w0
    d734:	b	d6f8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1354>
    d738:	bl	2c50 <abort@plt>
    d73c:	bl	2c50 <abort@plt>
    d740:	cmp	w0, #0x1
    d744:	b.eq	d774 <_Unwind_GetTextRelBase@@GCC_3.0+0x13d0>  // b.none
    d748:	cmp	w0, #0x2
    d74c:	b.ne	d78c <_Unwind_GetTextRelBase@@GCC_3.0+0x13e8>  // b.any
    d750:	ldr	x0, [x20]
    d754:	ldrb	w1, [x27, w0, sxtw]
    d758:	cbnz	w1, d7fc <_Unwind_GetTextRelBase@@GCC_3.0+0x1458>
    d75c:	ldr	x0, [x24, w0, sxtw #3]
    d760:	ldr	x1, [x22, #832]
    d764:	tbz	x1, #62, d76c <_Unwind_GetTextRelBase@@GCC_3.0+0x13c8>
    d768:	strb	wzr, [x21]
    d76c:	str	x0, [x22, x19, lsl #3]
    d770:	b	d78c <_Unwind_GetTextRelBase@@GCC_3.0+0x13e8>
    d774:	ldr	x0, [x20]
    d778:	add	x0, x23, x0
    d77c:	ldr	x1, [x22, #832]
    d780:	tbz	x1, #62, d788 <_Unwind_GetTextRelBase@@GCC_3.0+0x13e4>
    d784:	strb	wzr, [x21]
    d788:	str	x0, [x22, x19, lsl #3]
    d78c:	add	x19, x19, #0x1
    d790:	add	x20, x20, #0x10
    d794:	add	x21, x21, #0x1
    d798:	cmp	x19, #0x62
    d79c:	b.eq	d8c4 <_Unwind_GetTextRelBase@@GCC_3.0+0x1520>  // b.none
    d7a0:	ldr	w0, [x20, #8]
    d7a4:	cmp	w0, #0x3
    d7a8:	b.eq	d864 <_Unwind_GetTextRelBase@@GCC_3.0+0x14c0>  // b.none
    d7ac:	b.ls	d740 <_Unwind_GetTextRelBase@@GCC_3.0+0x139c>  // b.plast
    d7b0:	cmp	w0, #0x4
    d7b4:	b.eq	d898 <_Unwind_GetTextRelBase@@GCC_3.0+0x14f4>  // b.none
    d7b8:	cmp	w0, #0x5
    d7bc:	b.ne	d78c <_Unwind_GetTextRelBase@@GCC_3.0+0x13e8>  // b.any
    d7c0:	mov	x1, x26
    d7c4:	ldr	x0, [x20]
    d7c8:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    d7cc:	mov	x3, x23
    d7d0:	mov	x2, x24
    d7d4:	ldr	x1, [sp, #96]
    d7d8:	add	x1, x0, x1
    d7dc:	bl	cec0 <_Unwind_GetTextRelBase@@GCC_3.0+0xb1c>
    d7e0:	ldrb	w1, [x19, x25]
    d7e4:	cmp	w1, #0x8
    d7e8:	b.hi	d8c0 <_Unwind_GetTextRelBase@@GCC_3.0+0x151c>  // b.pmore
    d7ec:	mov	w1, #0x1                   	// #1
    d7f0:	strb	w1, [x21]
    d7f4:	str	x0, [x22, x19, lsl #3]
    d7f8:	b	d78c <_Unwind_GetTextRelBase@@GCC_3.0+0x13e8>
    d7fc:	cmp	w0, #0x61
    d800:	b.gt	d818 <_Unwind_GetTextRelBase@@GCC_3.0+0x1474>
    d804:	ldr	x1, [x24, w0, sxtw #3]
    d808:	ldr	x2, [sp, #944]
    d80c:	tbz	x2, #62, d81c <_Unwind_GetTextRelBase@@GCC_3.0+0x1478>
    d810:	mov	x0, x1
    d814:	b	d834 <_Unwind_GetTextRelBase@@GCC_3.0+0x1490>
    d818:	bl	2c50 <abort@plt>
    d81c:	cmp	w0, #0x2e
    d820:	b.eq	d850 <_Unwind_GetTextRelBase@@GCC_3.0+0x14ac>  // b.none
    d824:	ldrb	w0, [x25, w0, sxtw]
    d828:	cmp	w0, #0x8
    d82c:	b.ne	d85c <_Unwind_GetTextRelBase@@GCC_3.0+0x14b8>  // b.any
    d830:	ldr	x0, [x1]
    d834:	ldrb	w1, [x19, x25]
    d838:	cmp	w1, #0x8
    d83c:	b.hi	d860 <_Unwind_GetTextRelBase@@GCC_3.0+0x14bc>  // b.pmore
    d840:	mov	w1, #0x1                   	// #1
    d844:	strb	w1, [x21]
    d848:	str	x0, [x22, x19, lsl #3]
    d84c:	b	d78c <_Unwind_GetTextRelBase@@GCC_3.0+0x13e8>
    d850:	cntd	x0
    d854:	sxtw	x0, w0
    d858:	b	d834 <_Unwind_GetTextRelBase@@GCC_3.0+0x1490>
    d85c:	bl	2c50 <abort@plt>
    d860:	bl	2c50 <abort@plt>
    d864:	mov	x1, x26
    d868:	ldr	x0, [x20]
    d86c:	bl	be0c <__enable_execute_stack@@GCC_3.4.2+0x4>
    d870:	mov	x3, x23
    d874:	mov	x2, x24
    d878:	ldr	x1, [sp, #96]
    d87c:	add	x1, x0, x1
    d880:	bl	cec0 <_Unwind_GetTextRelBase@@GCC_3.0+0xb1c>
    d884:	ldr	x1, [x22, #832]
    d888:	tbz	x1, #62, d890 <_Unwind_GetTextRelBase@@GCC_3.0+0x14ec>
    d88c:	strb	wzr, [x21]
    d890:	str	x0, [x22, x19, lsl #3]
    d894:	b	d78c <_Unwind_GetTextRelBase@@GCC_3.0+0x13e8>
    d898:	ldr	x0, [x20]
    d89c:	add	x0, x23, x0
    d8a0:	ldrb	w1, [x19, x25]
    d8a4:	cmp	w1, #0x8
    d8a8:	b.hi	d8bc <_Unwind_GetTextRelBase@@GCC_3.0+0x1518>  // b.pmore
    d8ac:	mov	w1, #0x1                   	// #1
    d8b0:	strb	w1, [x21]
    d8b4:	str	x0, [x22, x19, lsl #3]
    d8b8:	b	d78c <_Unwind_GetTextRelBase@@GCC_3.0+0x13e8>
    d8bc:	bl	2c50 <abort@plt>
    d8c0:	bl	2c50 <abort@plt>
    d8c4:	ldrb	w0, [x28, #1651]
    d8c8:	cbz	w0, d90c <_Unwind_GetTextRelBase@@GCC_3.0+0x1568>
    d8cc:	ldr	x0, [x22, #832]
    d8d0:	orr	x0, x0, #0x8000000000000000
    d8d4:	str	x0, [x22, #832]
    d8d8:	ldr	x2, [x28, #544]
    d8dc:	orr	x1, x0, #0x2000000000000000
    d8e0:	tst	x2, #0x1
    d8e4:	csel	x0, x1, x0, ne  // ne = any
    d8e8:	str	x0, [x22, #832]
    d8ec:	ldp	x19, x20, [sp, #16]
    d8f0:	ldp	x21, x22, [sp, #32]
    d8f4:	ldp	x23, x24, [sp, #48]
    d8f8:	ldp	x25, x26, [sp, #64]
    d8fc:	ldp	x27, x28, [sp, #80]
    d900:	ldp	x29, x30, [sp]
    d904:	add	sp, sp, #0x430
    d908:	ret
    d90c:	ldr	x0, [x22, #832]
    d910:	and	x0, x0, #0x7fffffffffffffff
    d914:	b	d8d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x1530>
    d918:	sub	sp, sp, #0x6c0
    d91c:	stp	x29, x30, [sp]
    d920:	mov	x29, sp
    d924:	stp	x19, x20, [sp, #16]
    d928:	stp	x21, x22, [sp, #32]
    d92c:	mov	x19, x0
    d930:	mov	x21, x1
    d934:	mov	x20, x2
    d938:	xpaclri
    d93c:	mov	x22, x30
    d940:	mov	x2, #0x3c0                 	// #960
    d944:	mov	w1, #0x0                   	// #0
    d948:	bl	2ba0 <memset@plt>
    d94c:	str	x22, [x19, #792]
    d950:	mov	x0, #0x4000000000000000    	// #4611686018427387904
    d954:	str	x0, [x19, #832]
    d958:	add	x1, sp, #0x40
    d95c:	mov	x0, x19
    d960:	bl	ca08 <_Unwind_GetTextRelBase@@GCC_3.0+0x664>
    d964:	cbnz	w0, da04 <_Unwind_GetTextRelBase@@GCC_3.0+0x1660>
    d968:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x127e0>
    d96c:	ldr	x0, [x0, #4032]
    d970:	cbz	x0, d990 <_Unwind_GetTextRelBase@@GCC_3.0+0x15ec>
    d974:	adrp	x1, b000 <__trunctfsf2@@GCC_3.0+0xcc>
    d978:	add	x1, x1, #0xfbc
    d97c:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    d980:	add	x0, x0, #0x1c8
    d984:	add	x0, x0, #0x64
    d988:	bl	2c70 <pthread_once@plt>
    d98c:	cbz	w0, d99c <_Unwind_GetTextRelBase@@GCC_3.0+0x15f8>
    d990:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    d994:	ldrb	w0, [x0, #456]
    d998:	cbz	w0, da08 <_Unwind_GetTextRelBase@@GCC_3.0+0x1664>
    d99c:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    d9a0:	ldrb	w0, [x0, #487]
    d9a4:	cmp	w0, #0x8
    d9a8:	b.ne	db60 <_Unwind_GetTextRelBase@@GCC_3.0+0x17bc>  // b.any
    d9ac:	str	x21, [sp, #56]
    d9b0:	ldr	x0, [x19, #832]
    d9b4:	tbz	x0, #62, d9bc <_Unwind_GetTextRelBase@@GCC_3.0+0x1618>
    d9b8:	strb	wzr, [x19, #887]
    d9bc:	add	x0, sp, #0x38
    d9c0:	str	x0, [x19, #248]
    d9c4:	mov	w0, #0x1                   	// #1
    d9c8:	str	w0, [sp, #1664]
    d9cc:	mov	x0, #0x1f                  	// #31
    d9d0:	str	x0, [sp, #1648]
    d9d4:	str	xzr, [sp, #1640]
    d9d8:	add	x1, sp, #0x40
    d9dc:	mov	x0, x19
    d9e0:	bl	d5dc <_Unwind_GetTextRelBase@@GCC_3.0+0x1238>
    d9e4:	mov	x30, x20
    d9e8:	xpaclri
    d9ec:	str	x30, [x19, #792]
    d9f0:	ldp	x19, x20, [sp, #16]
    d9f4:	ldp	x21, x22, [sp, #32]
    d9f8:	ldp	x29, x30, [sp]
    d9fc:	add	sp, sp, #0x6c0
    da00:	ret
    da04:	bl	2c50 <abort@plt>
    da08:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    da0c:	add	x4, x0, #0x1c8
    da10:	mov	w3, #0x8                   	// #8
    da14:	strb	w3, [x0, #456]
    da18:	strb	w3, [x4, #1]
    da1c:	strb	w3, [x4, #2]
    da20:	strb	w3, [x4, #3]
    da24:	strb	w3, [x4, #4]
    da28:	strb	w3, [x4, #5]
    da2c:	strb	w3, [x4, #6]
    da30:	strb	w3, [x4, #7]
    da34:	strb	w3, [x4, #8]
    da38:	strb	w3, [x4, #9]
    da3c:	strb	w3, [x4, #10]
    da40:	strb	w3, [x4, #11]
    da44:	strb	w3, [x4, #12]
    da48:	strb	w3, [x4, #13]
    da4c:	strb	w3, [x4, #14]
    da50:	strb	w3, [x4, #15]
    da54:	strb	w3, [x4, #16]
    da58:	strb	w3, [x4, #17]
    da5c:	strb	w3, [x4, #18]
    da60:	strb	w3, [x4, #19]
    da64:	strb	w3, [x4, #20]
    da68:	strb	w3, [x4, #21]
    da6c:	strb	w3, [x4, #22]
    da70:	strb	w3, [x4, #23]
    da74:	strb	w3, [x4, #24]
    da78:	strb	w3, [x4, #25]
    da7c:	strb	w3, [x4, #26]
    da80:	strb	w3, [x4, #27]
    da84:	strb	w3, [x4, #28]
    da88:	strb	w3, [x4, #29]
    da8c:	strb	w3, [x4, #30]
    da90:	strb	w3, [x4, #31]
    da94:	strb	w3, [x4, #64]
    da98:	strb	w3, [x4, #65]
    da9c:	strb	w3, [x4, #66]
    daa0:	strb	w3, [x4, #67]
    daa4:	strb	w3, [x4, #68]
    daa8:	strb	w3, [x4, #69]
    daac:	strb	w3, [x4, #70]
    dab0:	strb	w3, [x4, #71]
    dab4:	strb	w3, [x4, #72]
    dab8:	strb	w3, [x4, #73]
    dabc:	strb	w3, [x4, #74]
    dac0:	strb	w3, [x4, #75]
    dac4:	strb	w3, [x4, #76]
    dac8:	strb	w3, [x4, #77]
    dacc:	strb	w3, [x4, #78]
    dad0:	strb	w3, [x4, #79]
    dad4:	strb	w3, [x4, #80]
    dad8:	strb	w3, [x4, #81]
    dadc:	strb	w3, [x4, #82]
    dae0:	strb	w3, [x4, #83]
    dae4:	strb	w3, [x4, #84]
    dae8:	strb	w3, [x4, #85]
    daec:	strb	w3, [x4, #86]
    daf0:	strb	w3, [x4, #87]
    daf4:	strb	w3, [x4, #88]
    daf8:	strb	w3, [x4, #89]
    dafc:	strb	w3, [x4, #90]
    db00:	strb	w3, [x4, #91]
    db04:	strb	w3, [x4, #92]
    db08:	strb	w3, [x4, #93]
    db0c:	strb	w3, [x4, #94]
    db10:	strb	w3, [x4, #95]
    db14:	strb	w3, [x4, #46]
    db18:	strb	w3, [x4, #48]
    db1c:	strb	w3, [x4, #49]
    db20:	strb	w3, [x4, #50]
    db24:	strb	w3, [x4, #51]
    db28:	strb	w3, [x4, #52]
    db2c:	strb	w3, [x4, #53]
    db30:	strb	w3, [x4, #54]
    db34:	strb	w3, [x4, #55]
    db38:	strb	w3, [x4, #56]
    db3c:	strb	w3, [x4, #57]
    db40:	strb	w3, [x4, #58]
    db44:	strb	w3, [x4, #59]
    db48:	strb	w3, [x4, #60]
    db4c:	strb	w3, [x4, #61]
    db50:	strb	w3, [x4, #62]
    db54:	strb	w3, [x4, #63]
    db58:	strb	w3, [x4, #96]
    db5c:	b	d99c <_Unwind_GetTextRelBase@@GCC_3.0+0x15f8>
    db60:	bl	2c50 <abort@plt>
    db64:	stp	x29, x30, [sp, #-32]!
    db68:	mov	x29, sp
    db6c:	stp	x19, x20, [sp, #16]
    db70:	mov	x19, x0
    db74:	mov	x20, x1
    db78:	bl	d5dc <_Unwind_GetTextRelBase@@GCC_3.0+0x1238>
    db7c:	ldr	x1, [x20, #1640]
    db80:	add	x0, x20, x1, lsl #4
    db84:	ldr	w0, [x0, #8]
    db88:	cmp	w0, #0x6
    db8c:	b.ne	dba0 <_Unwind_GetTextRelBase@@GCC_3.0+0x17fc>  // b.any
    db90:	str	xzr, [x19, #792]
    db94:	ldp	x19, x20, [sp, #16]
    db98:	ldp	x29, x30, [sp], #32
    db9c:	ret
    dba0:	cmp	w1, #0x61
    dba4:	b.gt	dc04 <_Unwind_GetTextRelBase@@GCC_3.0+0x1860>
    dba8:	ldr	x17, [x19, w1, sxtw #3]
    dbac:	ldr	x0, [x19, #832]
    dbb0:	tbz	x0, #62, dbc0 <_Unwind_GetTextRelBase@@GCC_3.0+0x181c>
    dbb4:	add	x0, x19, w1, sxtw
    dbb8:	ldrb	w0, [x0, #856]
    dbbc:	cbnz	w0, dbe0 <_Unwind_GetTextRelBase@@GCC_3.0+0x183c>
    dbc0:	cmp	w1, #0x2e
    dbc4:	b.eq	dc08 <_Unwind_GetTextRelBase@@GCC_3.0+0x1864>  // b.none
    dbc8:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    dbcc:	add	x0, x0, #0x1c8
    dbd0:	ldrb	w0, [x0, w1, sxtw]
    dbd4:	cmp	w0, #0x8
    dbd8:	b.ne	dc14 <_Unwind_GetTextRelBase@@GCC_3.0+0x1870>  // b.any
    dbdc:	ldr	x17, [x17]
    dbe0:	mov	x0, x17
    dbe4:	str	x17, [x19, #792]
    dbe8:	ldr	x1, [x20, #544]
    dbec:	tbz	w1, #0, dbfc <_Unwind_GetTextRelBase@@GCC_3.0+0x1858>
    dbf0:	ldr	x16, [x19, #784]
    dbf4:	autia1716
    dbf8:	mov	x0, x17
    dbfc:	str	x0, [x19, #792]
    dc00:	b	db94 <_Unwind_GetTextRelBase@@GCC_3.0+0x17f0>
    dc04:	bl	2c50 <abort@plt>
    dc08:	cntd	x0
    dc0c:	sxtw	x17, w0
    dc10:	b	dbe0 <_Unwind_GetTextRelBase@@GCC_3.0+0x183c>
    dc14:	bl	2c50 <abort@plt>
    dc18:	sub	sp, sp, #0x6d0
    dc1c:	stp	x29, x30, [sp]
    dc20:	mov	x29, sp
    dc24:	stp	x19, x20, [sp, #16]
    dc28:	stp	x21, x22, [sp, #32]
    dc2c:	stp	x23, x24, [sp, #48]
    dc30:	stp	x25, x26, [sp, #64]
    dc34:	mov	x22, x0
    dc38:	mov	x19, x1
    dc3c:	mov	x26, x2
    dc40:	mov	x24, #0x1                   	// #1
    dc44:	add	x23, sp, #0x50
    dc48:	mov	w25, #0x1                   	// #1
    dc4c:	b	dc64 <_Unwind_GetTextRelBase@@GCC_3.0+0x18c0>
    dc50:	cbnz	w20, dce8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1944>
    dc54:	mov	x1, x23
    dc58:	mov	x0, x19
    dc5c:	bl	db64 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c0>
    dc60:	add	x24, x24, #0x1
    dc64:	mov	x1, x23
    dc68:	mov	x0, x19
    dc6c:	bl	ca08 <_Unwind_GetTextRelBase@@GCC_3.0+0x664>
    dc70:	mov	w21, w0
    dc74:	mov	x0, x19
    dc78:	bl	2b90 <_Unwind_GetCFA@plt>
    dc7c:	ldr	x1, [x19, #832]
    dc80:	sub	x1, x0, x1, lsr #63
    dc84:	ldr	x0, [x22, #24]
    dc88:	cmp	x0, x1
    dc8c:	cset	w20, eq  // eq = none
    dc90:	lsl	w20, w20, #2
    dc94:	cbnz	w21, dcc8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1924>
    dc98:	ldr	x5, [sp, #1696]
    dc9c:	cbz	x5, dc50 <_Unwind_GetTextRelBase@@GCC_3.0+0x18ac>
    dca0:	mov	x4, x19
    dca4:	mov	x3, x22
    dca8:	ldr	x2, [x22]
    dcac:	orr	w1, w20, #0x2
    dcb0:	mov	w0, w25
    dcb4:	blr	x5
    dcb8:	cmp	w0, #0x7
    dcbc:	b.eq	dcec <_Unwind_GetTextRelBase@@GCC_3.0+0x1948>  // b.none
    dcc0:	cmp	w0, #0x8
    dcc4:	b.eq	dc50 <_Unwind_GetTextRelBase@@GCC_3.0+0x18ac>  // b.none
    dcc8:	mov	w0, #0x2                   	// #2
    dccc:	ldp	x19, x20, [sp, #16]
    dcd0:	ldp	x21, x22, [sp, #32]
    dcd4:	ldp	x23, x24, [sp, #48]
    dcd8:	ldp	x25, x26, [sp, #64]
    dcdc:	ldp	x29, x30, [sp]
    dce0:	add	sp, sp, #0x6d0
    dce4:	ret
    dce8:	bl	2c50 <abort@plt>
    dcec:	str	x24, [x26]
    dcf0:	b	dccc <_Unwind_GetTextRelBase@@GCC_3.0+0x1928>
    dcf4:	sub	sp, sp, #0x6e0
    dcf8:	stp	x29, x30, [sp]
    dcfc:	mov	x29, sp
    dd00:	stp	x19, x20, [sp, #16]
    dd04:	stp	x21, x22, [sp, #32]
    dd08:	stp	x23, x24, [sp, #48]
    dd0c:	stp	x25, x26, [sp, #64]
    dd10:	stp	x27, x28, [sp, #80]
    dd14:	mov	x20, x0
    dd18:	mov	x21, x1
    dd1c:	mov	x28, x2
    dd20:	ldr	x26, [x0, #16]
    dd24:	ldr	x27, [x0, #24]
    dd28:	mov	x23, #0x1                   	// #1
    dd2c:	add	x22, sp, #0x60
    dd30:	mov	w25, #0xa                   	// #10
    dd34:	mov	w24, #0x1                   	// #1
    dd38:	b	dd80 <_Unwind_GetTextRelBase@@GCC_3.0+0x19dc>
    dd3c:	ldr	x5, [sp, #1712]
    dd40:	cbz	x5, dd70 <_Unwind_GetTextRelBase@@GCC_3.0+0x19cc>
    dd44:	mov	x4, x21
    dd48:	mov	x3, x20
    dd4c:	ldr	x2, [x20]
    dd50:	mov	w1, w25
    dd54:	mov	w0, w24
    dd58:	blr	x5
    dd5c:	mov	w19, w0
    dd60:	cmp	w0, #0x7
    dd64:	b.eq	ddc8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1a24>  // b.none
    dd68:	cmp	w0, #0x8
    dd6c:	b.ne	ddf0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1a4c>  // b.any
    dd70:	mov	x1, x22
    dd74:	mov	x0, x21
    dd78:	bl	db64 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c0>
    dd7c:	add	x23, x23, #0x1
    dd80:	mov	x1, x22
    dd84:	mov	x0, x21
    dd88:	bl	ca08 <_Unwind_GetTextRelBase@@GCC_3.0+0x664>
    dd8c:	mov	w19, w0
    dd90:	cmp	w0, #0x0
    dd94:	ccmp	w0, #0x5, #0x4, ne  // ne = any
    dd98:	b.ne	ddf0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1a4c>  // b.any
    dd9c:	cmp	w0, #0x5
    dda0:	b.eq	ddd0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1a2c>  // b.none
    dda4:	mov	x5, x27
    dda8:	mov	x4, x21
    ddac:	mov	x3, x20
    ddb0:	ldr	x2, [x20]
    ddb4:	mov	w1, w25
    ddb8:	mov	w0, w24
    ddbc:	blr	x26
    ddc0:	cbz	w0, dd3c <_Unwind_GetTextRelBase@@GCC_3.0+0x1998>
    ddc4:	b	ddf0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1a4c>
    ddc8:	str	x23, [x28]
    ddcc:	b	ddf4 <_Unwind_GetTextRelBase@@GCC_3.0+0x1a50>
    ddd0:	mov	x5, x27
    ddd4:	mov	x4, x21
    ddd8:	mov	x3, x20
    dddc:	ldr	x2, [x20]
    dde0:	mov	w1, #0x1a                  	// #26
    dde4:	mov	w0, #0x1                   	// #1
    dde8:	blr	x26
    ddec:	cbz	w0, ddc8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1a24>
    ddf0:	mov	w19, #0x2                   	// #2
    ddf4:	mov	w0, w19
    ddf8:	ldp	x19, x20, [sp, #16]
    ddfc:	ldp	x21, x22, [sp, #32]
    de00:	ldp	x23, x24, [sp, #48]
    de04:	ldp	x25, x26, [sp, #64]
    de08:	ldp	x27, x28, [sp, #80]
    de0c:	ldp	x29, x30, [sp]
    de10:	add	sp, sp, #0x6e0
    de14:	ret

000000000000de18 <__frame_state_for@@GLIBC_2.0>:
    de18:	sub	sp, sp, #0xa70
    de1c:	stp	x29, x30, [sp]
    de20:	mov	x29, sp
    de24:	stp	x19, x20, [sp, #16]
    de28:	str	x21, [sp, #32]
    de2c:	mov	x20, x0
    de30:	mov	x19, x1
    de34:	add	x21, sp, #0x6b0
    de38:	mov	x2, #0x3c0                 	// #960
    de3c:	mov	w1, #0x0                   	// #0
    de40:	mov	x0, x21
    de44:	bl	2ba0 <memset@plt>
    de48:	mov	x0, #0x4000000000000000    	// #4611686018427387904
    de4c:	str	x0, [sp, #2544]
    de50:	add	x20, x20, #0x1
    de54:	str	x20, [sp, #2504]
    de58:	add	x1, sp, #0x30
    de5c:	mov	x0, x21
    de60:	bl	ca08 <_Unwind_GetTextRelBase@@GCC_3.0+0x664>
    de64:	cbnz	w0, df14 <__frame_state_for@@GLIBC_2.0+0xfc>
    de68:	ldr	w0, [sp, #1648]
    de6c:	cmp	w0, #0x2
    de70:	b.eq	df1c <__frame_state_for@@GLIBC_2.0+0x104>  // b.none
    de74:	add	x2, sp, #0x30
    de78:	add	x3, x19, #0x334
    de7c:	add	x7, x2, #0x620
    de80:	sub	x6, x19, x19, lsl #3
    de84:	sub	x6, x6, #0x1, lsl #12
    de88:	sub	x6, x6, #0x980
    de8c:	b	dea8 <__frame_state_for@@GLIBC_2.0+0x90>
    de90:	ldr	x4, [x2]
    de94:	str	x4, [x6, x3, lsl #3]
    de98:	add	x2, x2, #0x10
    de9c:	add	x3, x3, #0x1
    dea0:	cmp	x2, x7
    dea4:	b.eq	ded4 <__frame_state_for@@GLIBC_2.0+0xbc>  // b.none
    dea8:	ldrb	w4, [x2, #8]
    deac:	strb	w4, [x3]
    deb0:	cmp	w4, #0x1
    deb4:	b.eq	de90 <__frame_state_for@@GLIBC_2.0+0x78>  // b.none
    deb8:	cmp	w4, #0x2
    debc:	b.ne	decc <__frame_state_for@@GLIBC_2.0+0xb4>  // b.any
    dec0:	ldr	x4, [x2]
    dec4:	str	x4, [x6, x3, lsl #3]
    dec8:	b	de98 <__frame_state_for@@GLIBC_2.0+0x80>
    decc:	str	xzr, [x6, x3, lsl #3]
    ded0:	b	de98 <__frame_state_for@@GLIBC_2.0+0x80>
    ded4:	ldr	x0, [sp, #1624]
    ded8:	str	x0, [x19, #16]
    dedc:	ldr	x0, [sp, #1632]
    dee0:	strh	w0, [x19, #816]
    dee4:	ldr	x0, [sp, #1688]
    dee8:	strh	w0, [x19, #818]
    deec:	ldr	x0, [sp, #2560]
    def0:	str	x0, [x19, #24]
    def4:	ldr	x0, [sp, #1704]
    def8:	str	x0, [x19, #8]
    defc:	mov	x0, x19
    df00:	ldp	x19, x20, [sp, #16]
    df04:	ldr	x21, [sp, #32]
    df08:	ldp	x29, x30, [sp]
    df0c:	add	sp, sp, #0xa70
    df10:	ret
    df14:	mov	x0, #0x0                   	// #0
    df18:	b	df00 <__frame_state_for@@GLIBC_2.0+0xe8>
    df1c:	mov	x0, #0x0                   	// #0
    df20:	b	df00 <__frame_state_for@@GLIBC_2.0+0xe8>
    df24:	ret

000000000000df28 <_Unwind_RaiseException@@GCC_3.0>:
    df28:	sub	sp, sp, #0xed0
    df2c:	stp	x29, x30, [sp]
    df30:	mov	x29, sp
    df34:	stp	x0, x1, [sp, #16]
    df38:	stp	x2, x3, [sp, #32]
    df3c:	stp	x19, x20, [sp, #48]
    df40:	stp	x21, x22, [sp, #64]
    df44:	stp	x23, x24, [sp, #80]
    df48:	stp	x25, x26, [sp, #96]
    df4c:	stp	x27, x28, [sp, #112]
    df50:	stp	d8, d9, [sp, #128]
    df54:	stp	d10, d11, [sp, #144]
    df58:	stp	d12, d13, [sp, #160]
    df5c:	stp	d14, d15, [sp, #176]
    df60:	mov	x2, x30
    df64:	mov	x21, x0
    df68:	add	x19, sp, #0xb10
    df6c:	add	x1, sp, #0xed0
    df70:	mov	x0, x19
    df74:	bl	d918 <_Unwind_GetTextRelBase@@GCC_3.0+0x1574>
    df78:	mov	x2, #0x3c0                 	// #960
    df7c:	mov	x1, x19
    df80:	add	x0, sp, #0x750
    df84:	bl	2aa0 <memcpy@plt>
    df88:	add	x20, sp, #0xc8
    df8c:	add	x19, sp, #0x750
    df90:	mov	w22, #0x1                   	// #1
    df94:	b	dfa4 <_Unwind_RaiseException@@GCC_3.0+0x7c>
    df98:	mov	x1, x20
    df9c:	mov	x0, x19
    dfa0:	bl	db64 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c0>
    dfa4:	mov	x1, x20
    dfa8:	mov	x0, x19
    dfac:	bl	ca08 <_Unwind_GetTextRelBase@@GCC_3.0+0x664>
    dfb0:	cmp	w0, #0x5
    dfb4:	b.eq	dff8 <_Unwind_RaiseException@@GCC_3.0+0xd0>  // b.none
    dfb8:	cbnz	w0, dff4 <_Unwind_RaiseException@@GCC_3.0+0xcc>
    dfbc:	ldr	x5, [sp, #1816]
    dfc0:	cbz	x5, df98 <_Unwind_RaiseException@@GCC_3.0+0x70>
    dfc4:	mov	x4, x19
    dfc8:	mov	x3, x21
    dfcc:	ldr	x2, [x21]
    dfd0:	mov	w1, w22
    dfd4:	mov	w0, w22
    dfd8:	blr	x5
    dfdc:	cmp	w0, #0x6
    dfe0:	b.eq	e038 <_Unwind_RaiseException@@GCC_3.0+0x110>  // b.none
    dfe4:	cmp	w0, #0x8
    dfe8:	b.eq	df98 <_Unwind_RaiseException@@GCC_3.0+0x70>  // b.none
    dfec:	mov	w0, #0x3                   	// #3
    dff0:	b	dff8 <_Unwind_RaiseException@@GCC_3.0+0xd0>
    dff4:	mov	w0, #0x3                   	// #3
    dff8:	mov	x4, #0x0                   	// #0
    dffc:	ldp	x0, x1, [sp, #16]
    e000:	ldp	x2, x3, [sp, #32]
    e004:	ldp	x19, x20, [sp, #48]
    e008:	ldp	x21, x22, [sp, #64]
    e00c:	ldp	x23, x24, [sp, #80]
    e010:	ldp	x25, x26, [sp, #96]
    e014:	ldp	x27, x28, [sp, #112]
    e018:	ldp	x29, x30, [sp]
    e01c:	ldp	d8, d9, [sp, #128]
    e020:	ldp	d10, d11, [sp, #144]
    e024:	ldp	d12, d13, [sp, #160]
    e028:	ldp	d14, d15, [sp, #176]
    e02c:	add	sp, sp, #0xed0
    e030:	add	sp, sp, x4
    e034:	ret
    e038:	str	xzr, [x21, #16]
    e03c:	add	x19, sp, #0x750
    e040:	mov	x0, x19
    e044:	bl	2b90 <_Unwind_GetCFA@plt>
    e048:	ldr	x1, [sp, #2704]
    e04c:	sub	x1, x0, x1, lsr #63
    e050:	str	x1, [x21, #24]
    e054:	mov	x2, #0x3c0                 	// #960
    e058:	add	x1, sp, #0xb10
    e05c:	mov	x0, x19
    e060:	bl	2aa0 <memcpy@plt>
    e064:	add	x2, sp, #0x748
    e068:	mov	x1, x19
    e06c:	mov	x0, x21
    e070:	bl	dc18 <_Unwind_GetTextRelBase@@GCC_3.0+0x1874>
    e074:	cmp	w0, #0x7
    e078:	b.ne	dff8 <_Unwind_RaiseException@@GCC_3.0+0xd0>  // b.any
    e07c:	add	x1, sp, #0x750
    e080:	add	x0, sp, #0xb10
    e084:	bl	c114 <__enable_execute_stack@@GCC_3.4.2+0x30c>
    e088:	mov	x20, x0
    e08c:	ldr	x19, [sp, #2664]
    e090:	ldr	x0, [sp, #3664]
    e094:	tbz	x0, #61, e0a8 <_Unwind_RaiseException@@GCC_3.0+0x180>
    e098:	mov	x17, x19
    e09c:	ldr	x16, [sp, #3616]
    e0a0:	pacia1716
    e0a4:	mov	x19, x17
    e0a8:	mov	x1, x19
    e0ac:	ldr	x0, [sp, #2656]
    e0b0:	bl	df24 <__frame_state_for@@GLIBC_2.0+0x10c>
    e0b4:	mov	x4, x20
    e0b8:	str	x19, [x29, #8]
    e0bc:	b	dffc <_Unwind_RaiseException@@GCC_3.0+0xd4>

000000000000e0c0 <_Unwind_ForcedUnwind@@GCC_3.0>:
    e0c0:	sub	sp, sp, #0x850
    e0c4:	stp	x29, x30, [sp]
    e0c8:	mov	x29, sp
    e0cc:	stp	x0, x1, [sp, #16]
    e0d0:	stp	x2, x3, [sp, #32]
    e0d4:	stp	x19, x20, [sp, #48]
    e0d8:	stp	x21, x22, [sp, #64]
    e0dc:	stp	x23, x24, [sp, #80]
    e0e0:	stp	x25, x26, [sp, #96]
    e0e4:	stp	x27, x28, [sp, #112]
    e0e8:	stp	d8, d9, [sp, #128]
    e0ec:	stp	d10, d11, [sp, #144]
    e0f0:	stp	d12, d13, [sp, #160]
    e0f4:	stp	d14, d15, [sp, #176]
    e0f8:	mov	x19, x0
    e0fc:	mov	x23, x1
    e100:	mov	x22, x2
    e104:	add	x21, sp, #0x490
    e108:	mov	x2, x30
    e10c:	add	x1, sp, #0x850
    e110:	mov	x0, x21
    e114:	bl	d918 <_Unwind_GetTextRelBase@@GCC_3.0+0x1574>
    e118:	add	x20, sp, #0xd0
    e11c:	mov	x2, #0x3c0                 	// #960
    e120:	mov	x1, x21
    e124:	mov	x0, x20
    e128:	bl	2aa0 <memcpy@plt>
    e12c:	str	x23, [x19, #16]
    e130:	str	x22, [x19, #24]
    e134:	add	x2, sp, #0xc8
    e138:	mov	x1, x20
    e13c:	mov	x0, x19
    e140:	bl	dcf4 <_Unwind_GetTextRelBase@@GCC_3.0+0x1950>
    e144:	mov	x4, #0x0                   	// #0
    e148:	cmp	w0, #0x7
    e14c:	b.eq	e18c <_Unwind_ForcedUnwind@@GCC_3.0+0xcc>  // b.none
    e150:	ldp	x0, x1, [sp, #16]
    e154:	ldp	x2, x3, [sp, #32]
    e158:	ldp	x19, x20, [sp, #48]
    e15c:	ldp	x21, x22, [sp, #64]
    e160:	ldp	x23, x24, [sp, #80]
    e164:	ldp	x25, x26, [sp, #96]
    e168:	ldp	x27, x28, [sp, #112]
    e16c:	ldp	x29, x30, [sp]
    e170:	ldp	d8, d9, [sp, #128]
    e174:	ldp	d10, d11, [sp, #144]
    e178:	ldp	d12, d13, [sp, #160]
    e17c:	ldp	d14, d15, [sp, #176]
    e180:	add	sp, sp, #0x850
    e184:	add	sp, sp, x4
    e188:	ret
    e18c:	add	x1, sp, #0xd0
    e190:	add	x0, sp, #0x490
    e194:	bl	c114 <__enable_execute_stack@@GCC_3.4.2+0x30c>
    e198:	mov	x20, x0
    e19c:	ldr	x19, [sp, #1000]
    e1a0:	ldr	x0, [sp, #2000]
    e1a4:	tbz	x0, #61, e1b8 <_Unwind_ForcedUnwind@@GCC_3.0+0xf8>
    e1a8:	mov	x17, x19
    e1ac:	ldr	x16, [sp, #1952]
    e1b0:	pacia1716
    e1b4:	mov	x19, x17
    e1b8:	mov	x1, x19
    e1bc:	ldr	x0, [sp, #992]
    e1c0:	bl	df24 <__frame_state_for@@GLIBC_2.0+0x10c>
    e1c4:	mov	x4, x20
    e1c8:	str	x19, [x29, #8]
    e1cc:	b	e150 <_Unwind_ForcedUnwind@@GCC_3.0+0x90>

000000000000e1d0 <_Unwind_Resume@@GCC_3.0>:
    e1d0:	sub	sp, sp, #0x850
    e1d4:	stp	x29, x30, [sp]
    e1d8:	mov	x29, sp
    e1dc:	stp	x0, x1, [sp, #16]
    e1e0:	stp	x2, x3, [sp, #32]
    e1e4:	stp	x19, x20, [sp, #48]
    e1e8:	stp	x21, x22, [sp, #64]
    e1ec:	stp	x23, x24, [sp, #80]
    e1f0:	stp	x25, x26, [sp, #96]
    e1f4:	stp	x27, x28, [sp, #112]
    e1f8:	stp	d8, d9, [sp, #128]
    e1fc:	stp	d10, d11, [sp, #144]
    e200:	stp	d12, d13, [sp, #160]
    e204:	stp	d14, d15, [sp, #176]
    e208:	mov	x2, x30
    e20c:	mov	x19, x0
    e210:	add	x20, sp, #0x490
    e214:	add	x1, sp, #0x850
    e218:	mov	x0, x20
    e21c:	bl	d918 <_Unwind_GetTextRelBase@@GCC_3.0+0x1574>
    e220:	mov	x2, #0x3c0                 	// #960
    e224:	mov	x1, x20
    e228:	add	x0, sp, #0xd0
    e22c:	bl	2aa0 <memcpy@plt>
    e230:	ldr	x0, [x19, #16]
    e234:	cbnz	x0, e2cc <_Unwind_Resume@@GCC_3.0+0xfc>
    e238:	add	x2, sp, #0xc8
    e23c:	add	x1, sp, #0xd0
    e240:	mov	x0, x19
    e244:	bl	dc18 <_Unwind_GetTextRelBase@@GCC_3.0+0x1874>
    e248:	cmp	w0, #0x7
    e24c:	b.ne	e2e0 <_Unwind_Resume@@GCC_3.0+0x110>  // b.any
    e250:	add	x1, sp, #0xd0
    e254:	add	x0, sp, #0x490
    e258:	bl	c114 <__enable_execute_stack@@GCC_3.4.2+0x30c>
    e25c:	mov	x20, x0
    e260:	ldr	x19, [sp, #1000]
    e264:	ldr	x0, [sp, #2000]
    e268:	tbz	x0, #61, e27c <_Unwind_Resume@@GCC_3.0+0xac>
    e26c:	mov	x17, x19
    e270:	ldr	x16, [sp, #1952]
    e274:	pacia1716
    e278:	mov	x19, x17
    e27c:	mov	x1, x19
    e280:	ldr	x0, [sp, #992]
    e284:	bl	df24 <__frame_state_for@@GLIBC_2.0+0x10c>
    e288:	mov	x4, x20
    e28c:	str	x19, [x29, #8]
    e290:	ldp	x0, x1, [sp, #16]
    e294:	ldp	x2, x3, [sp, #32]
    e298:	ldp	x19, x20, [sp, #48]
    e29c:	ldp	x21, x22, [sp, #64]
    e2a0:	ldp	x23, x24, [sp, #80]
    e2a4:	ldp	x25, x26, [sp, #96]
    e2a8:	ldp	x27, x28, [sp, #112]
    e2ac:	ldp	x29, x30, [sp]
    e2b0:	ldp	d8, d9, [sp, #128]
    e2b4:	ldp	d10, d11, [sp, #144]
    e2b8:	ldp	d12, d13, [sp, #160]
    e2bc:	ldp	d14, d15, [sp, #176]
    e2c0:	add	sp, sp, #0x850
    e2c4:	add	sp, sp, x4
    e2c8:	ret
    e2cc:	add	x2, sp, #0xc8
    e2d0:	add	x1, sp, #0xd0
    e2d4:	mov	x0, x19
    e2d8:	bl	dcf4 <_Unwind_GetTextRelBase@@GCC_3.0+0x1950>
    e2dc:	b	e248 <_Unwind_Resume@@GCC_3.0+0x78>
    e2e0:	bl	2c50 <abort@plt>

000000000000e2e4 <_Unwind_Resume_or_Rethrow@@GCC_3.3>:
    e2e4:	sub	sp, sp, #0x850
    e2e8:	stp	x29, x30, [sp]
    e2ec:	mov	x29, sp
    e2f0:	stp	x0, x1, [sp, #16]
    e2f4:	stp	x2, x3, [sp, #32]
    e2f8:	stp	x19, x20, [sp, #48]
    e2fc:	stp	x21, x22, [sp, #64]
    e300:	stp	x23, x24, [sp, #80]
    e304:	stp	x25, x26, [sp, #96]
    e308:	stp	x27, x28, [sp, #112]
    e30c:	stp	d8, d9, [sp, #128]
    e310:	stp	d10, d11, [sp, #144]
    e314:	stp	d12, d13, [sp, #160]
    e318:	stp	d14, d15, [sp, #176]
    e31c:	mov	x19, x0
    e320:	ldr	x0, [x0, #16]
    e324:	cbnz	x0, e370 <_Unwind_Resume_or_Rethrow@@GCC_3.3+0x8c>
    e328:	mov	x0, x19
    e32c:	bl	2ad0 <_Unwind_RaiseException@plt>
    e330:	mov	x4, #0x0                   	// #0
    e334:	ldp	x0, x1, [sp, #16]
    e338:	ldp	x2, x3, [sp, #32]
    e33c:	ldp	x19, x20, [sp, #48]
    e340:	ldp	x21, x22, [sp, #64]
    e344:	ldp	x23, x24, [sp, #80]
    e348:	ldp	x25, x26, [sp, #96]
    e34c:	ldp	x27, x28, [sp, #112]
    e350:	ldp	x29, x30, [sp]
    e354:	ldp	d8, d9, [sp, #128]
    e358:	ldp	d10, d11, [sp, #144]
    e35c:	ldp	d12, d13, [sp, #160]
    e360:	ldp	d14, d15, [sp, #176]
    e364:	add	sp, sp, #0x850
    e368:	add	sp, sp, x4
    e36c:	ret
    e370:	add	x21, sp, #0x490
    e374:	mov	x2, x30
    e378:	add	x1, sp, #0x850
    e37c:	mov	x0, x21
    e380:	bl	d918 <_Unwind_GetTextRelBase@@GCC_3.0+0x1574>
    e384:	add	x20, sp, #0xd0
    e388:	mov	x2, #0x3c0                 	// #960
    e38c:	mov	x1, x21
    e390:	mov	x0, x20
    e394:	bl	2aa0 <memcpy@plt>
    e398:	add	x2, sp, #0xc8
    e39c:	mov	x1, x20
    e3a0:	mov	x0, x19
    e3a4:	bl	dcf4 <_Unwind_GetTextRelBase@@GCC_3.0+0x1950>
    e3a8:	cmp	w0, #0x7
    e3ac:	b.ne	e3f4 <_Unwind_Resume_or_Rethrow@@GCC_3.3+0x110>  // b.any
    e3b0:	add	x1, sp, #0xd0
    e3b4:	add	x0, sp, #0x490
    e3b8:	bl	c114 <__enable_execute_stack@@GCC_3.4.2+0x30c>
    e3bc:	mov	x20, x0
    e3c0:	ldr	x19, [sp, #1000]
    e3c4:	ldr	x0, [sp, #2000]
    e3c8:	tbz	x0, #61, e3dc <_Unwind_Resume_or_Rethrow@@GCC_3.3+0xf8>
    e3cc:	mov	x17, x19
    e3d0:	ldr	x16, [sp, #1952]
    e3d4:	pacia1716
    e3d8:	mov	x19, x17
    e3dc:	mov	x1, x19
    e3e0:	ldr	x0, [sp, #992]
    e3e4:	bl	df24 <__frame_state_for@@GLIBC_2.0+0x10c>
    e3e8:	mov	x4, x20
    e3ec:	str	x19, [x29, #8]
    e3f0:	b	e334 <_Unwind_Resume_or_Rethrow@@GCC_3.3+0x50>
    e3f4:	bl	2c50 <abort@plt>

000000000000e3f8 <_Unwind_DeleteException@@GCC_3.0>:
    e3f8:	ldr	x2, [x0, #8]
    e3fc:	cbz	x2, e41c <_Unwind_DeleteException@@GCC_3.0+0x24>
    e400:	stp	x29, x30, [sp, #-16]!
    e404:	mov	x29, sp
    e408:	mov	x1, x0
    e40c:	mov	w0, #0x1                   	// #1
    e410:	blr	x2
    e414:	ldp	x29, x30, [sp], #16
    e418:	ret
    e41c:	ret

000000000000e420 <_Unwind_Backtrace@@GCC_3.3>:
    e420:	sub	sp, sp, #0xae0
    e424:	stp	x29, x30, [sp]
    e428:	mov	x29, sp
    e42c:	stp	x19, x20, [sp, #16]
    e430:	stp	x21, x22, [sp, #32]
    e434:	stp	x23, x24, [sp, #48]
    e438:	stp	x25, x26, [sp, #64]
    e43c:	stp	x27, x28, [sp, #80]
    e440:	stp	d8, d9, [sp, #96]
    e444:	stp	d10, d11, [sp, #112]
    e448:	stp	d12, d13, [sp, #128]
    e44c:	stp	d14, d15, [sp, #144]
    e450:	mov	x2, x30
    e454:	mov	x23, x0
    e458:	mov	x22, x1
    e45c:	add	x1, sp, #0xae0
    e460:	add	x0, sp, #0x720
    e464:	bl	d918 <_Unwind_GetTextRelBase@@GCC_3.0+0x1574>
    e468:	add	x21, sp, #0xa0
    e46c:	add	x20, sp, #0x720
    e470:	b	e480 <_Unwind_Backtrace@@GCC_3.3+0x60>
    e474:	mov	x1, x21
    e478:	mov	x0, x20
    e47c:	bl	db64 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c0>
    e480:	mov	x1, x21
    e484:	mov	x0, x20
    e488:	bl	ca08 <_Unwind_GetTextRelBase@@GCC_3.0+0x664>
    e48c:	mov	w19, w0
    e490:	cmp	w0, #0x0
    e494:	ccmp	w0, #0x5, #0x4, ne  // ne = any
    e498:	b.ne	e4b8 <_Unwind_Backtrace@@GCC_3.3+0x98>  // b.any
    e49c:	mov	x1, x22
    e4a0:	mov	x0, x20
    e4a4:	blr	x23
    e4a8:	cbnz	w0, e4b8 <_Unwind_Backtrace@@GCC_3.3+0x98>
    e4ac:	cmp	w19, #0x5
    e4b0:	b.ne	e474 <_Unwind_Backtrace@@GCC_3.3+0x54>  // b.any
    e4b4:	b	e4bc <_Unwind_Backtrace@@GCC_3.3+0x9c>
    e4b8:	mov	w19, #0x3                   	// #3
    e4bc:	mov	w0, w19
    e4c0:	ldp	x19, x20, [sp, #16]
    e4c4:	ldp	x21, x22, [sp, #32]
    e4c8:	ldp	x23, x24, [sp, #48]
    e4cc:	ldp	x25, x26, [sp, #64]
    e4d0:	ldp	x27, x28, [sp, #80]
    e4d4:	ldp	x29, x30, [sp]
    e4d8:	ldp	d8, d9, [sp, #96]
    e4dc:	ldp	d10, d11, [sp, #112]
    e4e0:	ldp	d12, d13, [sp, #128]
    e4e4:	ldp	d14, d15, [sp, #144]
    e4e8:	add	sp, sp, #0xae0
    e4ec:	ret
    e4f0:	mov	x5, #0x0                   	// #0
    e4f4:	mov	w3, #0x0                   	// #0
    e4f8:	ldrb	w4, [x0], #1
    e4fc:	and	x2, x4, #0x7f
    e500:	lsl	x2, x2, x3
    e504:	orr	x5, x5, x2
    e508:	add	w3, w3, #0x7
    e50c:	tbnz	w4, #7, e4f8 <_Unwind_Backtrace@@GCC_3.3+0xd8>
    e510:	str	x5, [x1]
    e514:	ret
    e518:	mov	x5, #0x0                   	// #0
    e51c:	mov	w3, #0x0                   	// #0
    e520:	ldrb	w4, [x0], #1
    e524:	and	x2, x4, #0x7f
    e528:	lsl	x2, x2, x3
    e52c:	orr	x5, x5, x2
    e530:	add	w3, w3, #0x7
    e534:	tbnz	w4, #7, e520 <_Unwind_Backtrace@@GCC_3.3+0x100>
    e538:	cmp	w3, #0x3f
    e53c:	b.hi	e554 <_Unwind_Backtrace@@GCC_3.3+0x134>  // b.pmore
    e540:	mov	x2, #0xffffffffffffffff    	// #-1
    e544:	lsl	x3, x2, x3
    e548:	orr	x3, x5, x3
    e54c:	tst	x4, #0x40
    e550:	csel	x5, x3, x5, ne  // ne = any
    e554:	str	x5, [x1]
    e558:	ret
    e55c:	ldr	x3, [x1, #8]
    e560:	ldr	x1, [x2, #8]
    e564:	mov	w0, #0x1                   	// #1
    e568:	cmp	x3, x1
    e56c:	b.hi	e574 <_Unwind_Backtrace@@GCC_3.3+0x154>  // b.pmore
    e570:	csetm	w0, cc  // cc = lo, ul, last
    e574:	ret
    e578:	stp	x29, x30, [sp, #-80]!
    e57c:	mov	x29, sp
    e580:	stp	x19, x20, [sp, #16]
    e584:	stp	x21, x22, [sp, #32]
    e588:	stp	x23, x24, [sp, #48]
    e58c:	str	x25, [sp, #64]
    e590:	mov	x25, x0
    e594:	mov	x24, x1
    e598:	mov	x20, x2
    e59c:	mov	w22, w3
    e5a0:	mov	w23, w4
    e5a4:	lsl	w19, w3, #1
    e5a8:	add	w19, w19, #0x1
    e5ac:	cmp	w19, w4
    e5b0:	b.lt	e610 <_Unwind_Backtrace@@GCC_3.3+0x1f0>  // b.tstop
    e5b4:	ldp	x19, x20, [sp, #16]
    e5b8:	ldp	x21, x22, [sp, #32]
    e5bc:	ldp	x23, x24, [sp, #48]
    e5c0:	ldr	x25, [sp, #64]
    e5c4:	ldp	x29, x30, [sp], #80
    e5c8:	ret
    e5cc:	mov	w21, w19
    e5d0:	sxtw	x22, w22
    e5d4:	sxtw	x19, w21
    e5d8:	ldr	x2, [x20, x19, lsl #3]
    e5dc:	ldr	x1, [x20, x22, lsl #3]
    e5e0:	mov	x0, x25
    e5e4:	blr	x24
    e5e8:	tbz	w0, #31, e5b4 <_Unwind_Backtrace@@GCC_3.3+0x194>
    e5ec:	ldr	x0, [x20, x22, lsl #3]
    e5f0:	ldr	x1, [x20, x19, lsl #3]
    e5f4:	str	x1, [x20, x22, lsl #3]
    e5f8:	str	x0, [x20, x19, lsl #3]
    e5fc:	lsl	w19, w21, #1
    e600:	add	w19, w19, #0x1
    e604:	cmp	w23, w19
    e608:	b.le	e5b4 <_Unwind_Backtrace@@GCC_3.3+0x194>
    e60c:	mov	w22, w21
    e610:	add	w21, w19, #0x1
    e614:	cmp	w21, w23
    e618:	b.ge	e5cc <_Unwind_Backtrace@@GCC_3.3+0x1ac>  // b.tcont
    e61c:	add	x0, x20, w19, sxtw #3
    e620:	ldr	x2, [x0, #8]
    e624:	ldr	x1, [x20, w19, sxtw #3]
    e628:	mov	x0, x25
    e62c:	blr	x24
    e630:	cmp	w0, #0x0
    e634:	csel	w21, w21, w19, lt  // lt = tstop
    e638:	b	e5d0 <_Unwind_Backtrace@@GCC_3.3+0x1b0>
    e63c:	stp	x29, x30, [sp, #-64]!
    e640:	mov	x29, sp
    e644:	stp	x19, x20, [sp, #16]
    e648:	stp	x21, x22, [sp, #32]
    e64c:	stp	x23, x24, [sp, #48]
    e650:	mov	x22, x0
    e654:	mov	x23, x1
    e658:	mov	x21, x2
    e65c:	add	x24, x2, #0x10
    e660:	ldr	x19, [x2, #8]
    e664:	lsr	x20, x19, #1
    e668:	subs	w20, w20, #0x1
    e66c:	b.mi	e690 <_Unwind_Backtrace@@GCC_3.3+0x270>  // b.first
    e670:	mov	w4, w19
    e674:	mov	w3, w20
    e678:	mov	x2, x24
    e67c:	mov	x1, x23
    e680:	mov	x0, x22
    e684:	bl	e578 <_Unwind_Backtrace@@GCC_3.3+0x158>
    e688:	subs	w20, w20, #0x1
    e68c:	b.pl	e670 <_Unwind_Backtrace@@GCC_3.3+0x250>  // b.nfrst
    e690:	sub	w19, w19, #0x1
    e694:	cmp	w19, #0x0
    e698:	b.le	e6d8 <_Unwind_Backtrace@@GCC_3.3+0x2b8>
    e69c:	sxtw	x19, w19
    e6a0:	add	x20, x21, #0x10
    e6a4:	ldr	x0, [x21, #16]
    e6a8:	ldr	x1, [x20, x19, lsl #3]
    e6ac:	str	x1, [x21, #16]
    e6b0:	str	x0, [x20, x19, lsl #3]
    e6b4:	mov	w4, w19
    e6b8:	mov	w3, #0x0                   	// #0
    e6bc:	mov	x2, x24
    e6c0:	mov	x1, x23
    e6c4:	mov	x0, x22
    e6c8:	bl	e578 <_Unwind_Backtrace@@GCC_3.3+0x158>
    e6cc:	sub	x19, x19, #0x1
    e6d0:	cmp	w19, #0x0
    e6d4:	b.gt	e6a4 <_Unwind_Backtrace@@GCC_3.3+0x284>
    e6d8:	ldp	x19, x20, [sp, #16]
    e6dc:	ldp	x21, x22, [sp, #32]
    e6e0:	ldp	x23, x24, [sp, #48]
    e6e4:	ldp	x29, x30, [sp], #64
    e6e8:	ret
    e6ec:	and	w0, w0, #0xff
    e6f0:	cmp	w0, #0xff
    e6f4:	b.eq	e738 <_Unwind_Backtrace@@GCC_3.3+0x318>  // b.none
    e6f8:	and	w1, w0, #0x7
    e6fc:	cmp	w1, #0x2
    e700:	b.eq	e740 <_Unwind_Backtrace@@GCC_3.3+0x320>  // b.none
    e704:	b.ls	e72c <_Unwind_Backtrace@@GCC_3.3+0x30c>  // b.plast
    e708:	mov	w0, #0x4                   	// #4
    e70c:	cmp	w1, #0x3
    e710:	b.eq	e734 <_Unwind_Backtrace@@GCC_3.3+0x314>  // b.none
    e714:	mov	w0, #0x8                   	// #8
    e718:	cmp	w1, #0x4
    e71c:	b.eq	e734 <_Unwind_Backtrace@@GCC_3.3+0x314>  // b.none
    e720:	stp	x29, x30, [sp, #-16]!
    e724:	mov	x29, sp
    e728:	bl	2c50 <abort@plt>
    e72c:	mov	w0, #0x8                   	// #8
    e730:	cbnz	w1, e720 <_Unwind_Backtrace@@GCC_3.3+0x300>
    e734:	ret
    e738:	mov	w0, #0x0                   	// #0
    e73c:	ret
    e740:	mov	w0, #0x2                   	// #2
    e744:	b	e734 <_Unwind_Backtrace@@GCC_3.3+0x314>
    e748:	and	w0, w0, #0xff
    e74c:	cmp	w0, #0xff
    e750:	b.eq	e7a0 <_Unwind_Backtrace@@GCC_3.3+0x380>  // b.none
    e754:	and	w2, w0, #0x70
    e758:	cmp	w2, #0x20
    e75c:	b.eq	e798 <_Unwind_Backtrace@@GCC_3.3+0x378>  // b.none
    e760:	b.ls	e774 <_Unwind_Backtrace@@GCC_3.3+0x354>  // b.plast
    e764:	cmp	w2, #0x30
    e768:	b.ne	e788 <_Unwind_Backtrace@@GCC_3.3+0x368>  // b.any
    e76c:	ldr	x0, [x1, #16]
    e770:	ret
    e774:	tst	w0, #0x60
    e778:	b.eq	e7a8 <_Unwind_Backtrace@@GCC_3.3+0x388>  // b.none
    e77c:	stp	x29, x30, [sp, #-16]!
    e780:	mov	x29, sp
    e784:	bl	2c50 <abort@plt>
    e788:	mov	x0, #0x0                   	// #0
    e78c:	cmp	w2, #0x50
    e790:	b.ne	e77c <_Unwind_Backtrace@@GCC_3.3+0x35c>  // b.any
    e794:	ret
    e798:	ldr	x0, [x1, #8]
    e79c:	ret
    e7a0:	mov	x0, #0x0                   	// #0
    e7a4:	ret
    e7a8:	mov	x0, #0x0                   	// #0
    e7ac:	b	e794 <_Unwind_Backtrace@@GCC_3.3+0x374>
    e7b0:	and	w0, w0, #0xff
    e7b4:	cmp	w0, #0xff
    e7b8:	b.eq	e808 <_Unwind_Backtrace@@GCC_3.3+0x3e8>  // b.none
    e7bc:	and	w2, w0, #0x70
    e7c0:	cmp	w2, #0x20
    e7c4:	b.eq	e800 <_Unwind_Backtrace@@GCC_3.3+0x3e0>  // b.none
    e7c8:	b.ls	e7dc <_Unwind_Backtrace@@GCC_3.3+0x3bc>  // b.plast
    e7cc:	cmp	w2, #0x30
    e7d0:	b.ne	e7f0 <_Unwind_Backtrace@@GCC_3.3+0x3d0>  // b.any
    e7d4:	ldr	x0, [x1, #16]
    e7d8:	ret
    e7dc:	tst	w0, #0x60
    e7e0:	b.eq	e810 <_Unwind_Backtrace@@GCC_3.3+0x3f0>  // b.none
    e7e4:	stp	x29, x30, [sp, #-16]!
    e7e8:	mov	x29, sp
    e7ec:	bl	2c50 <abort@plt>
    e7f0:	mov	x0, #0x0                   	// #0
    e7f4:	cmp	w2, #0x50
    e7f8:	b.ne	e7e4 <_Unwind_Backtrace@@GCC_3.3+0x3c4>  // b.any
    e7fc:	ret
    e800:	ldr	x0, [x1, #8]
    e804:	ret
    e808:	mov	x0, #0x0                   	// #0
    e80c:	ret
    e810:	mov	x0, #0x0                   	// #0
    e814:	b	e7fc <_Unwind_Backtrace@@GCC_3.3+0x3dc>
    e818:	stp	x29, x30, [sp, #-64]!
    e81c:	mov	x29, sp
    e820:	stp	x19, x20, [sp, #16]
    e824:	stp	x21, x22, [sp, #32]
    e828:	and	w22, w0, #0xff
    e82c:	mov	x19, x2
    e830:	mov	x20, x3
    e834:	cmp	w22, #0x50
    e838:	b.eq	e878 <_Unwind_Backtrace@@GCC_3.3+0x458>  // b.none
    e83c:	mov	x21, x1
    e840:	and	w0, w22, #0xf
    e844:	cmp	w0, #0x4
    e848:	b.eq	e940 <_Unwind_Backtrace@@GCC_3.3+0x520>  // b.none
    e84c:	cmp	w0, #0x4
    e850:	b.ls	e898 <_Unwind_Backtrace@@GCC_3.3+0x478>  // b.plast
    e854:	cmp	w0, #0xb
    e858:	b.eq	e94c <_Unwind_Backtrace@@GCC_3.3+0x52c>  // b.none
    e85c:	cmp	w0, #0xb
    e860:	b.ls	e8dc <_Unwind_Backtrace@@GCC_3.3+0x4bc>  // b.plast
    e864:	cmp	w0, #0xc
    e868:	b.ne	e958 <_Unwind_Backtrace@@GCC_3.3+0x538>  // b.any
    e86c:	mov	x0, x2
    e870:	ldr	x2, [x0], #8
    e874:	b	e900 <_Unwind_Backtrace@@GCC_3.3+0x4e0>
    e878:	add	x0, x2, #0x7
    e87c:	and	x0, x0, #0xfffffffffffffff8
    e880:	ldr	x2, [x0], #8
    e884:	str	x2, [x20]
    e888:	ldp	x19, x20, [sp, #16]
    e88c:	ldp	x21, x22, [sp, #32]
    e890:	ldp	x29, x30, [sp], #64
    e894:	ret
    e898:	cmp	w0, #0x2
    e89c:	b.eq	e934 <_Unwind_Backtrace@@GCC_3.3+0x514>  // b.none
    e8a0:	cmp	w0, #0x2
    e8a4:	b.ls	e8bc <_Unwind_Backtrace@@GCC_3.3+0x49c>  // b.plast
    e8a8:	cmp	w0, #0x3
    e8ac:	b.ne	e958 <_Unwind_Backtrace@@GCC_3.3+0x538>  // b.any
    e8b0:	mov	x0, x2
    e8b4:	ldr	w2, [x0], #4
    e8b8:	b	e900 <_Unwind_Backtrace@@GCC_3.3+0x4e0>
    e8bc:	cbz	w0, e8f8 <_Unwind_Backtrace@@GCC_3.3+0x4d8>
    e8c0:	cmp	w0, #0x1
    e8c4:	b.ne	e958 <_Unwind_Backtrace@@GCC_3.3+0x538>  // b.any
    e8c8:	add	x1, sp, #0x38
    e8cc:	mov	x0, x2
    e8d0:	bl	e4f0 <_Unwind_Backtrace@@GCC_3.3+0xd0>
    e8d4:	ldr	x2, [sp, #56]
    e8d8:	b	e900 <_Unwind_Backtrace@@GCC_3.3+0x4e0>
    e8dc:	cmp	w0, #0x9
    e8e0:	b.eq	e920 <_Unwind_Backtrace@@GCC_3.3+0x500>  // b.none
    e8e4:	cmp	w0, #0xa
    e8e8:	b.ne	e958 <_Unwind_Backtrace@@GCC_3.3+0x538>  // b.any
    e8ec:	mov	x0, x2
    e8f0:	ldrsh	x2, [x0], #2
    e8f4:	b	e900 <_Unwind_Backtrace@@GCC_3.3+0x4e0>
    e8f8:	mov	x0, x2
    e8fc:	ldr	x2, [x0], #8
    e900:	cbz	x2, e884 <_Unwind_Backtrace@@GCC_3.3+0x464>
    e904:	and	w1, w22, #0x70
    e908:	cmp	w1, #0x10
    e90c:	csel	x21, x19, x21, eq  // eq = none
    e910:	add	x2, x2, x21
    e914:	tbz	w22, #7, e884 <_Unwind_Backtrace@@GCC_3.3+0x464>
    e918:	ldr	x2, [x2]
    e91c:	b	e884 <_Unwind_Backtrace@@GCC_3.3+0x464>
    e920:	add	x1, sp, #0x38
    e924:	mov	x0, x2
    e928:	bl	e518 <_Unwind_Backtrace@@GCC_3.3+0xf8>
    e92c:	ldr	x2, [sp, #56]
    e930:	b	e900 <_Unwind_Backtrace@@GCC_3.3+0x4e0>
    e934:	mov	x0, x2
    e938:	ldrh	w2, [x0], #2
    e93c:	b	e900 <_Unwind_Backtrace@@GCC_3.3+0x4e0>
    e940:	mov	x0, x2
    e944:	ldr	x2, [x0], #8
    e948:	b	e900 <_Unwind_Backtrace@@GCC_3.3+0x4e0>
    e94c:	mov	x0, x2
    e950:	ldrsw	x2, [x0], #4
    e954:	b	e900 <_Unwind_Backtrace@@GCC_3.3+0x4e0>
    e958:	bl	2c50 <abort@plt>
    e95c:	stp	x29, x30, [sp, #-80]!
    e960:	mov	x29, sp
    e964:	stp	x19, x20, [sp, #16]
    e968:	stp	x21, x22, [sp, #32]
    e96c:	str	x23, [sp, #48]
    e970:	mov	x19, x0
    e974:	mov	x23, x1
    e978:	mov	x22, x2
    e97c:	ldrh	w21, [x0, #32]
    e980:	ubfx	x21, x21, #3, #8
    e984:	mov	x1, x0
    e988:	mov	w0, w21
    e98c:	bl	e748 <_Unwind_Backtrace@@GCC_3.3+0x328>
    e990:	mov	x20, x0
    e994:	add	x3, sp, #0x48
    e998:	add	x2, x23, #0x8
    e99c:	mov	x1, x0
    e9a0:	mov	w0, w21
    e9a4:	bl	e818 <_Unwind_Backtrace@@GCC_3.3+0x3f8>
    e9a8:	ldrh	w0, [x19, #32]
    e9ac:	add	x3, sp, #0x40
    e9b0:	add	x2, x22, #0x8
    e9b4:	mov	x1, x20
    e9b8:	ubfx	x0, x0, #3, #8
    e9bc:	bl	e818 <_Unwind_Backtrace@@GCC_3.3+0x3f8>
    e9c0:	ldr	x1, [sp, #72]
    e9c4:	ldr	x0, [sp, #64]
    e9c8:	cmp	x1, x0
    e9cc:	b.hi	e9e8 <_Unwind_Backtrace@@GCC_3.3+0x5c8>  // b.pmore
    e9d0:	csetm	w0, cc  // cc = lo, ul, last
    e9d4:	ldp	x19, x20, [sp, #16]
    e9d8:	ldp	x21, x22, [sp, #32]
    e9dc:	ldr	x23, [sp, #48]
    e9e0:	ldp	x29, x30, [sp], #80
    e9e4:	ret
    e9e8:	mov	w0, #0x1                   	// #1
    e9ec:	b	e9d4 <_Unwind_Backtrace@@GCC_3.3+0x5b4>
    e9f0:	stp	x29, x30, [sp, #-64]!
    e9f4:	mov	x29, sp
    e9f8:	stp	x19, x20, [sp, #16]
    e9fc:	mov	x19, x0
    ea00:	add	x20, x0, #0x9
    ea04:	mov	x0, x20
    ea08:	bl	2ac0 <strlen@plt>
    ea0c:	add	x1, x0, #0x1
    ea10:	add	x3, x20, x1
    ea14:	ldrb	w2, [x19, #8]
    ea18:	cmp	w2, #0x3
    ea1c:	b.hi	ea3c <_Unwind_Backtrace@@GCC_3.3+0x61c>  // b.pmore
    ea20:	ldrb	w1, [x19, #9]
    ea24:	mov	w0, #0x0                   	// #0
    ea28:	cmp	w1, #0x7a
    ea2c:	b.eq	ea5c <_Unwind_Backtrace@@GCC_3.3+0x63c>  // b.none
    ea30:	ldp	x19, x20, [sp, #16]
    ea34:	ldp	x29, x30, [sp], #64
    ea38:	ret
    ea3c:	ldrb	w1, [x20, x1]
    ea40:	mov	w0, #0xff                  	// #255
    ea44:	cmp	w1, #0x8
    ea48:	b.ne	ea30 <_Unwind_Backtrace@@GCC_3.3+0x610>  // b.any
    ea4c:	ldrb	w1, [x3, #1]
    ea50:	cbnz	w1, ea30 <_Unwind_Backtrace@@GCC_3.3+0x610>
    ea54:	add	x3, x3, #0x2
    ea58:	b	ea20 <_Unwind_Backtrace@@GCC_3.3+0x600>
    ea5c:	add	x1, sp, #0x30
    ea60:	mov	x0, x3
    ea64:	bl	e4f0 <_Unwind_Backtrace@@GCC_3.3+0xd0>
    ea68:	add	x1, sp, #0x28
    ea6c:	bl	e518 <_Unwind_Backtrace@@GCC_3.3+0xf8>
    ea70:	ldrb	w1, [x19, #8]
    ea74:	cmp	w1, #0x1
    ea78:	b.ne	eaa8 <_Unwind_Backtrace@@GCC_3.3+0x688>  // b.any
    ea7c:	add	x0, x0, #0x1
    ea80:	add	x20, x19, #0xa
    ea84:	add	x1, sp, #0x30
    ea88:	bl	e4f0 <_Unwind_Backtrace@@GCC_3.3+0xd0>
    ea8c:	mov	x2, x0
    ea90:	ldrb	w1, [x19, #10]
    ea94:	add	x19, sp, #0x38
    ea98:	cmp	w1, #0x52
    ea9c:	b.ne	ead8 <_Unwind_Backtrace@@GCC_3.3+0x6b8>  // b.any
    eaa0:	ldrb	w0, [x2]
    eaa4:	b	ea30 <_Unwind_Backtrace@@GCC_3.3+0x610>
    eaa8:	add	x1, sp, #0x30
    eaac:	bl	e4f0 <_Unwind_Backtrace@@GCC_3.3+0xd0>
    eab0:	b	ea80 <_Unwind_Backtrace@@GCC_3.3+0x660>
    eab4:	ldrb	w0, [x2], #1
    eab8:	mov	x3, x19
    eabc:	mov	x1, #0x0                   	// #0
    eac0:	and	w0, w0, #0x7f
    eac4:	bl	e818 <_Unwind_Backtrace@@GCC_3.3+0x3f8>
    eac8:	mov	x2, x0
    eacc:	ldrb	w1, [x20, #1]!
    ead0:	cmp	w1, #0x52
    ead4:	b.eq	eaa0 <_Unwind_Backtrace@@GCC_3.3+0x680>  // b.none
    ead8:	cmp	w1, #0x50
    eadc:	b.eq	eab4 <_Unwind_Backtrace@@GCC_3.3+0x694>  // b.none
    eae0:	cmp	w1, #0x4c
    eae4:	b.ne	eaf0 <_Unwind_Backtrace@@GCC_3.3+0x6d0>  // b.any
    eae8:	add	x2, x2, #0x1
    eaec:	b	eacc <_Unwind_Backtrace@@GCC_3.3+0x6ac>
    eaf0:	mov	w0, #0x0                   	// #0
    eaf4:	b	ea30 <_Unwind_Backtrace@@GCC_3.3+0x610>
    eaf8:	stp	x29, x30, [sp, #-128]!
    eafc:	mov	x29, sp
    eb00:	stp	x19, x20, [sp, #16]
    eb04:	stp	x21, x22, [sp, #32]
    eb08:	stp	x23, x24, [sp, #48]
    eb0c:	mov	x22, x0
    eb10:	mov	x19, x1
    eb14:	mov	x24, x2
    eb18:	ldrh	w0, [x0, #32]
    eb1c:	ubfx	x21, x0, #3, #8
    eb20:	mov	x1, x22
    eb24:	mov	x0, x21
    eb28:	bl	e748 <_Unwind_Backtrace@@GCC_3.3+0x328>
    eb2c:	str	x0, [sp, #104]
    eb30:	ldr	w0, [x19]
    eb34:	cbz	w0, ec64 <_Unwind_Backtrace@@GCC_3.3+0x844>
    eb38:	stp	x25, x26, [sp, #64]
    eb3c:	stp	x27, x28, [sp, #80]
    eb40:	mov	x23, #0x0                   	// #0
    eb44:	add	x28, sp, #0x70
    eb48:	add	x27, sp, #0x78
    eb4c:	mov	x26, #0xffffffffffffffff    	// #-1
    eb50:	mov	x25, #0x1                   	// #1
    eb54:	b	eb9c <_Unwind_Backtrace@@GCC_3.3+0x77c>
    eb58:	mov	x23, x20
    eb5c:	cbnz	w21, ebdc <_Unwind_Backtrace@@GCC_3.3+0x7bc>
    eb60:	ldr	x0, [x19, #8]
    eb64:	str	x0, [sp, #112]
    eb68:	ldr	x1, [x19, #16]
    eb6c:	str	x1, [sp, #120]
    eb70:	cbz	x0, eb88 <_Unwind_Backtrace@@GCC_3.3+0x768>
    eb74:	ldr	x0, [sp, #112]
    eb78:	sub	x0, x24, x0
    eb7c:	ldr	x1, [sp, #120]
    eb80:	cmp	x0, x1
    eb84:	b.cc	ec34 <_Unwind_Backtrace@@GCC_3.3+0x814>  // b.lo, b.ul, b.last
    eb88:	ldr	w0, [x19]
    eb8c:	add	x0, x0, #0x4
    eb90:	add	x19, x19, x0
    eb94:	ldr	w0, [x19]
    eb98:	cbz	w0, ec44 <_Unwind_Backtrace@@GCC_3.3+0x824>
    eb9c:	ldr	w0, [x19, #4]
    eba0:	cbz	w0, eb88 <_Unwind_Backtrace@@GCC_3.3+0x768>
    eba4:	ldrb	w1, [x22, #32]
    eba8:	tbz	w1, #2, eb5c <_Unwind_Backtrace@@GCC_3.3+0x73c>
    ebac:	add	x20, x19, #0x4
    ebb0:	sub	x20, x20, w0, sxtw
    ebb4:	cmp	x20, x23
    ebb8:	b.eq	eb58 <_Unwind_Backtrace@@GCC_3.3+0x738>  // b.none
    ebbc:	mov	x0, x20
    ebc0:	bl	e9f0 <_Unwind_Backtrace@@GCC_3.3+0x5d0>
    ebc4:	mov	w21, w0
    ebc8:	mov	x1, x22
    ebcc:	bl	e748 <_Unwind_Backtrace@@GCC_3.3+0x328>
    ebd0:	str	x0, [sp, #104]
    ebd4:	mov	x23, x20
    ebd8:	b	eb5c <_Unwind_Backtrace@@GCC_3.3+0x73c>
    ebdc:	and	w20, w21, #0xff
    ebe0:	mov	x3, x28
    ebe4:	add	x2, x19, #0x8
    ebe8:	ldr	x1, [sp, #104]
    ebec:	mov	w0, w20
    ebf0:	bl	e818 <_Unwind_Backtrace@@GCC_3.3+0x3f8>
    ebf4:	mov	x3, x27
    ebf8:	mov	x2, x0
    ebfc:	mov	x1, #0x0                   	// #0
    ec00:	and	w0, w20, #0xf
    ec04:	bl	e818 <_Unwind_Backtrace@@GCC_3.3+0x3f8>
    ec08:	mov	w0, w20
    ec0c:	bl	e6ec <_Unwind_Backtrace@@GCC_3.3+0x2cc>
    ec10:	lsl	w1, w0, #3
    ec14:	lsl	x1, x25, x1
    ec18:	sub	x1, x1, #0x1
    ec1c:	cmp	w0, #0x8
    ec20:	csel	x0, x1, x26, cc  // cc = lo, ul, last
    ec24:	ldr	x1, [sp, #112]
    ec28:	tst	x0, x1
    ec2c:	b.ne	eb74 <_Unwind_Backtrace@@GCC_3.3+0x754>  // b.any
    ec30:	b	eb88 <_Unwind_Backtrace@@GCC_3.3+0x768>
    ec34:	mov	x0, x19
    ec38:	ldp	x25, x26, [sp, #64]
    ec3c:	ldp	x27, x28, [sp, #80]
    ec40:	b	ec50 <_Unwind_Backtrace@@GCC_3.3+0x830>
    ec44:	mov	x0, #0x0                   	// #0
    ec48:	ldp	x25, x26, [sp, #64]
    ec4c:	ldp	x27, x28, [sp, #80]
    ec50:	ldp	x19, x20, [sp, #16]
    ec54:	ldp	x21, x22, [sp, #32]
    ec58:	ldp	x23, x24, [sp, #48]
    ec5c:	ldp	x29, x30, [sp], #128
    ec60:	ret
    ec64:	mov	x0, #0x0                   	// #0
    ec68:	b	ec50 <_Unwind_Backtrace@@GCC_3.3+0x830>
    ec6c:	stp	x29, x30, [sp, #-144]!
    ec70:	mov	x29, sp
    ec74:	stp	x19, x20, [sp, #16]
    ec78:	mov	x19, x2
    ec7c:	ldr	x3, [x0, #16]
    ec80:	ldr	x12, [x0]
    ec84:	ldr	w2, [x2, #40]
    ec88:	cmp	x1, #0x2f
    ec8c:	ccmp	w2, #0x0, #0x4, hi  // hi = pmore
    ec90:	b.ne	ecd4 <_Unwind_Backtrace@@GCC_3.3+0x8b4>  // b.any
    ec94:	cmp	x1, #0x19
    ec98:	b.ls	f0bc <_Unwind_Backtrace@@GCC_3.3+0xc9c>  // b.plast
    ec9c:	mov	x13, #0x0                   	// #0
    eca0:	mov	x15, #0x0                   	// #0
    eca4:	ldrh	w0, [x0, #24]
    eca8:	subs	x0, x0, #0x1
    ecac:	b.mi	f0cc <_Unwind_Backtrace@@GCC_3.3+0xcac>  // b.first
    ecb0:	mov	x10, #0x0                   	// #0
    ecb4:	mov	x11, #0x0                   	// #0
    ecb8:	mov	x8, #0x0                   	// #0
    ecbc:	mov	x6, #0x0                   	// #0
    ecc0:	mov	x9, #0x0                   	// #0
    ecc4:	mov	w7, #0xe550                	// #58704
    ecc8:	movk	w7, #0x6474, lsl #16
    eccc:	mov	x14, #0x1                   	// #1
    ecd0:	b	ee18 <_Unwind_Backtrace@@GCC_3.3+0x9f8>
    ecd4:	ldr	x2, [x0, #32]
    ecd8:	adrp	x4, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    ecdc:	ldr	x4, [x4, #400]
    ece0:	cmp	x2, x4
    ece4:	b.eq	ed44 <_Unwind_Backtrace@@GCC_3.3+0x924>  // b.none
    ece8:	adrp	x4, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    ecec:	str	x2, [x4, #400]
    ecf0:	adrp	x4, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    ecf4:	add	x2, x4, #0x230
    ecf8:	ldr	x5, [x0, #40]
    ecfc:	str	x5, [x4, #560]
    ed00:	add	x4, x2, #0x40
    ed04:	add	x2, x2, #0x1c0
    ed08:	stur	xzr, [x4, #-48]
    ed0c:	stur	xzr, [x4, #-40]
    ed10:	stur	x4, [x4, #-8]
    ed14:	add	x4, x4, #0x30
    ed18:	cmp	x4, x2
    ed1c:	b.ne	ed08 <_Unwind_Backtrace@@GCC_3.3+0x8e8>  // b.any
    ed20:	adrp	x2, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    ed24:	add	x2, x2, #0x230
    ed28:	add	x4, x2, #0x10
    ed2c:	str	xzr, [x2, #392]
    ed30:	str	x4, [x2, #8]
    ed34:	str	wzr, [x19, #40]
    ed38:	mov	x13, #0x0                   	// #0
    ed3c:	mov	x15, #0x0                   	// #0
    ed40:	b	eca4 <_Unwind_Backtrace@@GCC_3.3+0x884>
    ed44:	ldr	x5, [x0, #40]
    ed48:	adrp	x4, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    ed4c:	ldr	x4, [x4, #560]
    ed50:	cmp	x5, x4
    ed54:	b.ne	ece8 <_Unwind_Backtrace@@GCC_3.3+0x8c8>  // b.any
    ed58:	adrp	x2, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    ed5c:	ldr	x6, [x2, #568]
    ed60:	cbz	x6, f0e4 <_Unwind_Backtrace@@GCC_3.3+0xcc4>
    ed64:	ldr	x5, [x19]
    ed68:	mov	x13, x6
    ed6c:	mov	x15, #0x0                   	// #0
    ed70:	b	ed90 <_Unwind_Backtrace@@GCC_3.3+0x970>
    ed74:	ldr	x4, [x13, #8]
    ed78:	orr	x2, x2, x4
    ed7c:	cbz	x2, eca4 <_Unwind_Backtrace@@GCC_3.3+0x884>
    ed80:	ldr	x2, [x13, #40]
    ed84:	cbz	x2, eca4 <_Unwind_Backtrace@@GCC_3.3+0x884>
    ed88:	mov	x15, x13
    ed8c:	mov	x13, x2
    ed90:	ldr	x2, [x13]
    ed94:	cmp	x5, x2
    ed98:	b.cc	ed74 <_Unwind_Backtrace@@GCC_3.3+0x954>  // b.lo, b.ul, b.last
    ed9c:	ldr	x4, [x13, #8]
    eda0:	cmp	x5, x4
    eda4:	b.cs	ed74 <_Unwind_Backtrace@@GCC_3.3+0x954>  // b.hs, b.nlast
    eda8:	ldr	x12, [x13, #16]
    edac:	ldr	x9, [x13, #24]
    edb0:	cmp	x6, x13
    edb4:	b.eq	ee84 <_Unwind_Backtrace@@GCC_3.3+0xa64>  // b.none
    edb8:	ldr	x0, [x13, #40]
    edbc:	str	x0, [x15, #40]
    edc0:	str	x6, [x13, #40]
    edc4:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    edc8:	str	x13, [x0, #568]
    edcc:	b	ee84 <_Unwind_Backtrace@@GCC_3.3+0xa64>
    edd0:	ldr	x4, [x3, #16]
    edd4:	add	x4, x12, x4
    edd8:	ldr	x5, [x19]
    eddc:	cmp	x5, x4
    ede0:	b.cc	ee08 <_Unwind_Backtrace@@GCC_3.3+0x9e8>  // b.lo, b.ul, b.last
    ede4:	ldr	x2, [x3, #40]
    ede8:	add	x2, x4, x2
    edec:	cmp	x5, x2
    edf0:	csel	x10, x10, x2, cs  // cs = hs, nlast
    edf4:	csel	x11, x11, x4, cs  // cs = hs, nlast
    edf8:	csel	x8, x8, x14, cs  // cs = hs, nlast
    edfc:	b	ee08 <_Unwind_Backtrace@@GCC_3.3+0x9e8>
    ee00:	cmp	w4, #0x2
    ee04:	csel	x6, x6, x3, ne  // ne = any
    ee08:	add	x3, x3, #0x38
    ee0c:	sub	x0, x0, #0x1
    ee10:	cmn	x0, #0x1
    ee14:	b.eq	ee34 <_Unwind_Backtrace@@GCC_3.3+0xa14>  // b.none
    ee18:	ldr	w4, [x3]
    ee1c:	cmp	w4, #0x1
    ee20:	b.eq	edd0 <_Unwind_Backtrace@@GCC_3.3+0x9b0>  // b.none
    ee24:	cmp	w4, w7
    ee28:	b.ne	ee00 <_Unwind_Backtrace@@GCC_3.3+0x9e0>  // b.any
    ee2c:	mov	x9, x3
    ee30:	b	ee08 <_Unwind_Backtrace@@GCC_3.3+0x9e8>
    ee34:	cbz	x8, f0d4 <_Unwind_Backtrace@@GCC_3.3+0xcb4>
    ee38:	cmp	x1, #0x2f
    ee3c:	b.ls	ee84 <_Unwind_Backtrace@@GCC_3.3+0xa64>  // b.plast
    ee40:	cmp	x13, #0x0
    ee44:	ccmp	x15, #0x0, #0x4, ne  // ne = any
    ee48:	b.eq	ee68 <_Unwind_Backtrace@@GCC_3.3+0xa48>  // b.none
    ee4c:	ldr	x0, [x13, #40]
    ee50:	str	x0, [x15, #40]
    ee54:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    ee58:	add	x0, x0, #0x230
    ee5c:	ldr	x1, [x0, #8]
    ee60:	str	x1, [x13, #40]
    ee64:	str	x13, [x0, #8]
    ee68:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    ee6c:	ldr	x0, [x0, #568]
    ee70:	str	x12, [x0, #16]
    ee74:	str	x9, [x0, #24]
    ee78:	str	x6, [x0, #32]
    ee7c:	str	x11, [x0]
    ee80:	str	x10, [x0, #8]
    ee84:	cbz	x9, f0dc <_Unwind_Backtrace@@GCC_3.3+0xcbc>
    ee88:	ldr	x0, [x9, #16]
    ee8c:	add	x20, x12, x0
    ee90:	ldrb	w1, [x12, x0]
    ee94:	mov	w0, #0x1                   	// #1
    ee98:	cmp	w1, w0
    ee9c:	b.ne	f0c0 <_Unwind_Backtrace@@GCC_3.3+0xca0>  // b.any
    eea0:	stp	x21, x22, [sp, #32]
    eea4:	ldrb	w21, [x20, #1]
    eea8:	mov	x1, x19
    eeac:	mov	w0, w21
    eeb0:	bl	e7b0 <_Unwind_Backtrace@@GCC_3.3+0x390>
    eeb4:	add	x3, sp, #0x88
    eeb8:	add	x2, x20, #0x4
    eebc:	mov	x1, x0
    eec0:	mov	w0, w21
    eec4:	bl	e818 <_Unwind_Backtrace@@GCC_3.3+0x3f8>
    eec8:	mov	x21, x0
    eecc:	ldrb	w22, [x20, #2]
    eed0:	cmp	w22, #0xff
    eed4:	b.eq	eee4 <_Unwind_Backtrace@@GCC_3.3+0xac4>  // b.none
    eed8:	ldrb	w0, [x20, #3]
    eedc:	cmp	w0, #0x3b
    eee0:	b.eq	ef74 <_Unwind_Backtrace@@GCC_3.3+0xb54>  // b.none
    eee4:	str	xzr, [sp, #88]
    eee8:	ldr	x0, [x19, #8]
    eeec:	str	x0, [sp, #96]
    eef0:	ldr	x0, [x19, #16]
    eef4:	str	x0, [sp, #104]
    eef8:	ldr	x1, [sp, #136]
    eefc:	str	x1, [sp, #112]
    ef00:	str	xzr, [sp, #120]
    ef04:	mov	w0, #0x4                   	// #4
    ef08:	strb	w0, [sp, #120]
    ef0c:	ldr	x2, [x19]
    ef10:	add	x0, sp, #0x58
    ef14:	bl	eaf8 <_Unwind_Backtrace@@GCC_3.3+0x6d8>
    ef18:	mov	x1, x0
    ef1c:	str	x0, [x19, #32]
    ef20:	mov	w0, #0x1                   	// #1
    ef24:	cbz	x1, f0f0 <_Unwind_Backtrace@@GCC_3.3+0xcd0>
    ef28:	add	x2, x1, #0x4
    ef2c:	ldrsw	x0, [x1, #4]
    ef30:	sub	x0, x2, x0
    ef34:	bl	e9f0 <_Unwind_Backtrace@@GCC_3.3+0x5d0>
    ef38:	and	w20, w0, #0xff
    ef3c:	mov	x1, x19
    ef40:	mov	w0, w20
    ef44:	bl	e7b0 <_Unwind_Backtrace@@GCC_3.3+0x390>
    ef48:	ldr	x2, [x19, #32]
    ef4c:	add	x3, sp, #0x50
    ef50:	add	x2, x2, #0x8
    ef54:	mov	x1, x0
    ef58:	mov	w0, w20
    ef5c:	bl	e818 <_Unwind_Backtrace@@GCC_3.3+0x3f8>
    ef60:	ldr	x0, [sp, #80]
    ef64:	str	x0, [x19, #24]
    ef68:	mov	w0, #0x1                   	// #1
    ef6c:	ldp	x21, x22, [sp, #32]
    ef70:	b	f0c0 <_Unwind_Backtrace@@GCC_3.3+0xca0>
    ef74:	mov	x1, x19
    ef78:	mov	w0, w22
    ef7c:	bl	e7b0 <_Unwind_Backtrace@@GCC_3.3+0x390>
    ef80:	add	x3, sp, #0x48
    ef84:	mov	x2, x21
    ef88:	mov	x1, x0
    ef8c:	mov	w0, w22
    ef90:	bl	e818 <_Unwind_Backtrace@@GCC_3.3+0x3f8>
    ef94:	mov	x22, x0
    ef98:	ldr	x1, [sp, #72]
    ef9c:	cbz	x1, f0a8 <_Unwind_Backtrace@@GCC_3.3+0xc88>
    efa0:	ands	x4, x0, #0x3
    efa4:	b.ne	eee4 <_Unwind_Backtrace@@GCC_3.3+0xac4>  // b.any
    efa8:	ldr	x5, [x19]
    efac:	ldrsw	x0, [x0]
    efb0:	add	x0, x0, x20
    efb4:	cmp	x5, x0
    efb8:	b.cc	f0a8 <_Unwind_Backtrace@@GCC_3.3+0xc88>  // b.lo, b.ul, b.last
    efbc:	stp	x23, x24, [sp, #48]
    efc0:	sub	x1, x1, #0x1
    efc4:	lsl	x0, x1, #3
    efc8:	ldrsw	x0, [x22, x0]
    efcc:	add	x0, x0, x20
    efd0:	cmp	x5, x0
    efd4:	b.cs	f0b4 <_Unwind_Backtrace@@GCC_3.3+0xc94>  // b.hs, b.nlast
    efd8:	cbnz	x1, efec <_Unwind_Backtrace@@GCC_3.3+0xbcc>
    efdc:	bl	2c50 <abort@plt>
    efe0:	mov	x1, x0
    efe4:	cmp	x1, x4
    efe8:	b.ls	efdc <_Unwind_Backtrace@@GCC_3.3+0xbbc>  // b.plast
    efec:	add	x0, x4, x1
    eff0:	lsr	x0, x0, #1
    eff4:	lsl	x3, x0, #3
    eff8:	ldrsw	x2, [x22, x3]
    effc:	add	x2, x2, x20
    f000:	cmp	x5, x2
    f004:	b.cc	efe0 <_Unwind_Backtrace@@GCC_3.3+0xbc0>  // b.lo, b.ul, b.last
    f008:	add	x6, x0, #0x1
    f00c:	add	x3, x22, x3
    f010:	ldrsw	x2, [x3, #8]
    f014:	add	x2, x2, x20
    f018:	cmp	x5, x2
    f01c:	b.cc	f028 <_Unwind_Backtrace@@GCC_3.3+0xc08>  // b.lo, b.ul, b.last
    f020:	mov	x4, x6
    f024:	b	efe4 <_Unwind_Backtrace@@GCC_3.3+0xbc4>
    f028:	cmp	x4, x1
    f02c:	b.cs	efdc <_Unwind_Backtrace@@GCC_3.3+0xbbc>  // b.hs, b.nlast
    f030:	lsl	x21, x0, #3
    f034:	add	x0, x22, x21
    f038:	ldrsw	x23, [x0, #4]
    f03c:	add	x23, x23, x20
    f040:	add	x1, x23, #0x4
    f044:	ldrsw	x0, [x23, #4]
    f048:	sub	x0, x1, x0
    f04c:	bl	e9f0 <_Unwind_Backtrace@@GCC_3.3+0x5d0>
    f050:	and	w24, w0, #0xff
    f054:	mov	w0, w24
    f058:	bl	e6ec <_Unwind_Backtrace@@GCC_3.3+0x2cc>
    f05c:	mov	w2, w0
    f060:	add	x2, x2, #0x8
    f064:	add	x3, sp, #0x50
    f068:	add	x2, x23, x2
    f06c:	mov	x1, #0x0                   	// #0
    f070:	and	w0, w24, #0xf
    f074:	bl	e818 <_Unwind_Backtrace@@GCC_3.3+0x3f8>
    f078:	ldr	x0, [sp, #80]
    f07c:	add	x0, x20, x0
    f080:	ldrsw	x1, [x22, x21]
    f084:	add	x0, x0, x1
    f088:	ldr	x1, [x19]
    f08c:	cmp	x1, x0
    f090:	b.cs	f098 <_Unwind_Backtrace@@GCC_3.3+0xc78>  // b.hs, b.nlast
    f094:	str	x23, [x19, #32]
    f098:	ldrsw	x0, [x22, x21]
    f09c:	add	x20, x0, x20
    f0a0:	str	x20, [x19, #24]
    f0a4:	ldp	x23, x24, [sp, #48]
    f0a8:	mov	w0, #0x1                   	// #1
    f0ac:	ldp	x21, x22, [sp, #32]
    f0b0:	b	f0c0 <_Unwind_Backtrace@@GCC_3.3+0xca0>
    f0b4:	mov	x0, x1
    f0b8:	b	f030 <_Unwind_Backtrace@@GCC_3.3+0xc10>
    f0bc:	mov	w0, #0xffffffff            	// #-1
    f0c0:	ldp	x19, x20, [sp, #16]
    f0c4:	ldp	x29, x30, [sp], #144
    f0c8:	ret
    f0cc:	mov	w0, #0x0                   	// #0
    f0d0:	b	f0c0 <_Unwind_Backtrace@@GCC_3.3+0xca0>
    f0d4:	mov	w0, #0x0                   	// #0
    f0d8:	b	f0c0 <_Unwind_Backtrace@@GCC_3.3+0xca0>
    f0dc:	mov	w0, #0x0                   	// #0
    f0e0:	b	f0c0 <_Unwind_Backtrace@@GCC_3.3+0xca0>
    f0e4:	mov	x13, x6
    f0e8:	mov	x15, x6
    f0ec:	b	eca4 <_Unwind_Backtrace@@GCC_3.3+0x884>
    f0f0:	ldp	x21, x22, [sp, #32]
    f0f4:	b	f0c0 <_Unwind_Backtrace@@GCC_3.3+0xca0>
    f0f8:	stp	x29, x30, [sp, #-64]!
    f0fc:	mov	x29, sp
    f100:	stp	x19, x20, [sp, #16]
    f104:	stp	x21, x22, [sp, #32]
    f108:	mov	x21, x0
    f10c:	mov	x20, x1
    f110:	mov	x19, x2
    f114:	add	x1, x1, #0x4
    f118:	ldrsw	x0, [x20, #4]
    f11c:	sub	x0, x1, x0
    f120:	bl	e9f0 <_Unwind_Backtrace@@GCC_3.3+0x5d0>
    f124:	and	w22, w0, #0xff
    f128:	mov	x1, x21
    f12c:	mov	w0, w22
    f130:	bl	e748 <_Unwind_Backtrace@@GCC_3.3+0x328>
    f134:	add	x3, sp, #0x38
    f138:	add	x2, x20, #0x8
    f13c:	mov	x1, x0
    f140:	mov	w0, w22
    f144:	bl	e818 <_Unwind_Backtrace@@GCC_3.3+0x3f8>
    f148:	add	x1, x19, #0x4
    f14c:	ldrsw	x0, [x19, #4]
    f150:	sub	x0, x1, x0
    f154:	bl	e9f0 <_Unwind_Backtrace@@GCC_3.3+0x5d0>
    f158:	and	w20, w0, #0xff
    f15c:	mov	x1, x21
    f160:	mov	w0, w20
    f164:	bl	e748 <_Unwind_Backtrace@@GCC_3.3+0x328>
    f168:	add	x3, sp, #0x30
    f16c:	add	x2, x19, #0x8
    f170:	mov	x1, x0
    f174:	mov	w0, w20
    f178:	bl	e818 <_Unwind_Backtrace@@GCC_3.3+0x3f8>
    f17c:	ldr	x1, [sp, #56]
    f180:	ldr	x0, [sp, #48]
    f184:	cmp	x1, x0
    f188:	b.hi	f1a0 <_Unwind_Backtrace@@GCC_3.3+0xd80>  // b.pmore
    f18c:	csetm	w0, cc  // cc = lo, ul, last
    f190:	ldp	x19, x20, [sp, #16]
    f194:	ldp	x21, x22, [sp, #32]
    f198:	ldp	x29, x30, [sp], #64
    f19c:	ret
    f1a0:	mov	w0, #0x1                   	// #1
    f1a4:	b	f190 <_Unwind_Backtrace@@GCC_3.3+0xd70>
    f1a8:	stp	x29, x30, [sp, #-112]!
    f1ac:	mov	x29, sp
    f1b0:	stp	x21, x22, [sp, #32]
    f1b4:	stp	x23, x24, [sp, #48]
    f1b8:	mov	x22, x0
    f1bc:	ldr	w0, [x1]
    f1c0:	cbz	w0, f318 <_Unwind_Backtrace@@GCC_3.3+0xef8>
    f1c4:	stp	x19, x20, [sp, #16]
    f1c8:	stp	x25, x26, [sp, #64]
    f1cc:	stp	x27, x28, [sp, #80]
    f1d0:	mov	x19, x1
    f1d4:	mov	x23, #0x0                   	// #0
    f1d8:	mov	w21, #0x0                   	// #0
    f1dc:	mov	x24, #0x0                   	// #0
    f1e0:	mov	x2, #0x0                   	// #0
    f1e4:	add	x27, sp, #0x68
    f1e8:	mov	x26, #0xffffffffffffffff    	// #-1
    f1ec:	mov	x25, #0x1                   	// #1
    f1f0:	b	f294 <_Unwind_Backtrace@@GCC_3.3+0xe74>
    f1f4:	mov	x24, #0xffffffffffffffff    	// #-1
    f1f8:	ldp	x19, x20, [sp, #16]
    f1fc:	ldp	x25, x26, [sp, #64]
    f200:	ldp	x27, x28, [sp, #80]
    f204:	b	f304 <_Unwind_Backtrace@@GCC_3.3+0xee4>
    f208:	ldrh	w0, [x22, #32]
    f20c:	bfi	w0, w28, #3, #8
    f210:	strh	w0, [x22, #32]
    f214:	b	f224 <_Unwind_Backtrace@@GCC_3.3+0xe04>
    f218:	ldrb	w0, [x22, #32]
    f21c:	orr	w0, w0, #0x4
    f220:	strb	w0, [x22, #32]
    f224:	and	w28, w21, #0xff
    f228:	mov	x3, x27
    f22c:	add	x2, x19, #0x8
    f230:	mov	x1, x23
    f234:	mov	w0, w28
    f238:	bl	e818 <_Unwind_Backtrace@@GCC_3.3+0x3f8>
    f23c:	mov	w0, w28
    f240:	bl	e6ec <_Unwind_Backtrace@@GCC_3.3+0x2cc>
    f244:	lsl	w1, w0, #3
    f248:	lsl	x1, x25, x1
    f24c:	sub	x1, x1, #0x1
    f250:	cmp	w0, #0x8
    f254:	csel	x1, x1, x26, cc  // cc = lo, ul, last
    f258:	ldr	x0, [sp, #104]
    f25c:	mov	x2, x20
    f260:	tst	x0, x1
    f264:	b.eq	f280 <_Unwind_Backtrace@@GCC_3.3+0xe60>  // b.none
    f268:	add	x24, x24, #0x1
    f26c:	ldr	x1, [x22]
    f270:	cmp	x1, x0
    f274:	b.ls	f27c <_Unwind_Backtrace@@GCC_3.3+0xe5c>  // b.plast
    f278:	str	x0, [x22]
    f27c:	mov	x2, x20
    f280:	ldr	w0, [x19]
    f284:	add	x0, x0, #0x4
    f288:	add	x19, x19, x0
    f28c:	ldr	w0, [x19]
    f290:	cbz	w0, f2f8 <_Unwind_Backtrace@@GCC_3.3+0xed8>
    f294:	ldr	w0, [x19, #4]
    f298:	cbz	w0, f280 <_Unwind_Backtrace@@GCC_3.3+0xe60>
    f29c:	add	x20, x19, #0x4
    f2a0:	sub	x20, x20, w0, sxtw
    f2a4:	cmp	x20, x2
    f2a8:	b.eq	f224 <_Unwind_Backtrace@@GCC_3.3+0xe04>  // b.none
    f2ac:	mov	x0, x20
    f2b0:	bl	e9f0 <_Unwind_Backtrace@@GCC_3.3+0x5d0>
    f2b4:	mov	w21, w0
    f2b8:	cmp	w0, #0xff
    f2bc:	b.eq	f1f4 <_Unwind_Backtrace@@GCC_3.3+0xdd4>  // b.none
    f2c0:	and	w28, w0, #0xff
    f2c4:	mov	x1, x22
    f2c8:	mov	w0, w28
    f2cc:	bl	e748 <_Unwind_Backtrace@@GCC_3.3+0x328>
    f2d0:	mov	x23, x0
    f2d4:	ldrh	w0, [x22, #32]
    f2d8:	and	w0, w0, #0x7f8
    f2dc:	cmp	w0, #0x7f8
    f2e0:	b.eq	f208 <_Unwind_Backtrace@@GCC_3.3+0xde8>  // b.none
    f2e4:	ldrh	w0, [x22, #32]
    f2e8:	ubfx	x0, x0, #3, #8
    f2ec:	cmp	w0, w21
    f2f0:	b.ne	f218 <_Unwind_Backtrace@@GCC_3.3+0xdf8>  // b.any
    f2f4:	b	f224 <_Unwind_Backtrace@@GCC_3.3+0xe04>
    f2f8:	ldp	x19, x20, [sp, #16]
    f2fc:	ldp	x25, x26, [sp, #64]
    f300:	ldp	x27, x28, [sp, #80]
    f304:	mov	x0, x24
    f308:	ldp	x21, x22, [sp, #32]
    f30c:	ldp	x23, x24, [sp, #48]
    f310:	ldp	x29, x30, [sp], #112
    f314:	ret
    f318:	mov	x24, #0x0                   	// #0
    f31c:	b	f304 <_Unwind_Backtrace@@GCC_3.3+0xee4>
    f320:	stp	x29, x30, [sp, #-112]!
    f324:	mov	x29, sp
    f328:	stp	x19, x20, [sp, #16]
    f32c:	stp	x21, x22, [sp, #32]
    f330:	stp	x23, x24, [sp, #48]
    f334:	mov	x21, x0
    f338:	mov	x23, x1
    f33c:	mov	x19, x2
    f340:	ldrh	w0, [x0, #32]
    f344:	ubfx	x20, x0, #3, #8
    f348:	mov	x1, x21
    f34c:	mov	x0, x20
    f350:	bl	e748 <_Unwind_Backtrace@@GCC_3.3+0x328>
    f354:	mov	x22, x0
    f358:	ldr	w0, [x19]
    f35c:	cbz	w0, f448 <_Unwind_Backtrace@@GCC_3.3+0x1028>
    f360:	stp	x25, x26, [sp, #64]
    f364:	stp	x27, x28, [sp, #80]
    f368:	mov	x24, #0x0                   	// #0
    f36c:	add	x27, sp, #0x68
    f370:	mov	x26, #0xffffffffffffffff    	// #-1
    f374:	mov	x25, #0x1                   	// #1
    f378:	b	f3bc <_Unwind_Backtrace@@GCC_3.3+0xf9c>
    f37c:	mov	x24, x28
    f380:	cbnz	w20, f3fc <_Unwind_Backtrace@@GCC_3.3+0xfdc>
    f384:	ldr	x0, [x19, #8]
    f388:	cbz	x0, f3a8 <_Unwind_Backtrace@@GCC_3.3+0xf88>
    f38c:	ldr	x0, [x23]
    f390:	cbz	x0, f3a8 <_Unwind_Backtrace@@GCC_3.3+0xf88>
    f394:	ldr	x1, [x0, #8]
    f398:	add	x2, x1, #0x1
    f39c:	str	x2, [x0, #8]
    f3a0:	add	x1, x1, #0x2
    f3a4:	str	x19, [x0, x1, lsl #3]
    f3a8:	ldr	w2, [x19]
    f3ac:	add	x2, x2, #0x4
    f3b0:	add	x19, x19, x2
    f3b4:	ldr	w0, [x19]
    f3b8:	cbz	w0, f440 <_Unwind_Backtrace@@GCC_3.3+0x1020>
    f3bc:	ldr	w0, [x19, #4]
    f3c0:	cbz	w0, f3a8 <_Unwind_Backtrace@@GCC_3.3+0xf88>
    f3c4:	ldrb	w1, [x21, #32]
    f3c8:	tbz	w1, #2, f380 <_Unwind_Backtrace@@GCC_3.3+0xf60>
    f3cc:	add	x28, x19, #0x4
    f3d0:	sub	x28, x28, w0, sxtw
    f3d4:	cmp	x28, x24
    f3d8:	b.eq	f37c <_Unwind_Backtrace@@GCC_3.3+0xf5c>  // b.none
    f3dc:	mov	x0, x28
    f3e0:	bl	e9f0 <_Unwind_Backtrace@@GCC_3.3+0x5d0>
    f3e4:	mov	w20, w0
    f3e8:	mov	x1, x21
    f3ec:	bl	e748 <_Unwind_Backtrace@@GCC_3.3+0x328>
    f3f0:	mov	x22, x0
    f3f4:	mov	x24, x28
    f3f8:	b	f380 <_Unwind_Backtrace@@GCC_3.3+0xf60>
    f3fc:	and	w28, w20, #0xff
    f400:	mov	x3, x27
    f404:	add	x2, x19, #0x8
    f408:	mov	x1, x22
    f40c:	mov	w0, w28
    f410:	bl	e818 <_Unwind_Backtrace@@GCC_3.3+0x3f8>
    f414:	mov	w0, w28
    f418:	bl	e6ec <_Unwind_Backtrace@@GCC_3.3+0x2cc>
    f41c:	lsl	w1, w0, #3
    f420:	lsl	x1, x25, x1
    f424:	sub	x1, x1, #0x1
    f428:	cmp	w0, #0x8
    f42c:	csel	x0, x1, x26, cc  // cc = lo, ul, last
    f430:	ldr	x1, [sp, #104]
    f434:	tst	x0, x1
    f438:	b.ne	f38c <_Unwind_Backtrace@@GCC_3.3+0xf6c>  // b.any
    f43c:	b	f3a8 <_Unwind_Backtrace@@GCC_3.3+0xf88>
    f440:	ldp	x25, x26, [sp, #64]
    f444:	ldp	x27, x28, [sp, #80]
    f448:	ldp	x19, x20, [sp, #16]
    f44c:	ldp	x21, x22, [sp, #32]
    f450:	ldp	x23, x24, [sp, #48]
    f454:	ldp	x29, x30, [sp], #112
    f458:	ret
    f45c:	stp	x29, x30, [sp, #-176]!
    f460:	mov	x29, sp
    f464:	stp	x19, x20, [sp, #16]
    f468:	stp	x21, x22, [sp, #32]
    f46c:	mov	x19, x0
    f470:	mov	x21, x1
    f474:	ldrb	w0, [x0, #32]
    f478:	tbz	w0, #0, f4c4 <_Unwind_Backtrace@@GCC_3.3+0x10a4>
    f47c:	tbnz	w0, #2, f8ac <_Unwind_Backtrace@@GCC_3.3+0x148c>
    f480:	ldrh	w0, [x19, #32]
    f484:	tst	w0, #0x7f8
    f488:	b.ne	f9a0 <_Unwind_Backtrace@@GCC_3.3+0x1580>  // b.any
    f48c:	ldr	x4, [x19, #24]
    f490:	ldr	x1, [x4, #8]
    f494:	mov	x2, #0x0                   	// #0
    f498:	cmp	x1, x2
    f49c:	b.ls	f988 <_Unwind_Backtrace@@GCC_3.3+0x1568>  // b.plast
    f4a0:	add	x0, x1, x2
    f4a4:	lsr	x0, x0, #1
    f4a8:	add	x3, x0, #0x2
    f4ac:	ldr	x20, [x4, x3, lsl #3]
    f4b0:	ldr	x3, [x20, #8]
    f4b4:	cmp	x21, x3
    f4b8:	b.cs	f970 <_Unwind_Backtrace@@GCC_3.3+0x1550>  // b.hs, b.nlast
    f4bc:	mov	x1, x0
    f4c0:	b	f498 <_Unwind_Backtrace@@GCC_3.3+0x1078>
    f4c4:	stp	x27, x28, [sp, #80]
    f4c8:	ldr	w1, [x19, #32]
    f4cc:	lsr	w27, w1, #11
    f4d0:	tst	x1, #0xfffff800
    f4d4:	b.ne	f51c <_Unwind_Backtrace@@GCC_3.3+0x10fc>  // b.any
    f4d8:	tbz	w0, #1, f60c <_Unwind_Backtrace@@GCC_3.3+0x11ec>
    f4dc:	ldr	x20, [x19, #24]
    f4e0:	ldr	x1, [x20]
    f4e4:	cbz	x1, f844 <_Unwind_Backtrace@@GCC_3.3+0x1424>
    f4e8:	mov	x0, x19
    f4ec:	bl	f1a8 <_Unwind_Backtrace@@GCC_3.3+0xd88>
    f4f0:	cmn	x0, #0x1
    f4f4:	b.eq	f624 <_Unwind_Backtrace@@GCC_3.3+0x1204>  // b.none
    f4f8:	add	x27, x27, x0
    f4fc:	ldr	x1, [x20, #8]!
    f500:	cbnz	x1, f4e8 <_Unwind_Backtrace@@GCC_3.3+0x10c8>
    f504:	tst	x27, #0xffffffffffe00000
    f508:	b.eq	f640 <_Unwind_Backtrace@@GCC_3.3+0x1220>  // b.none
    f50c:	ldr	w0, [x19, #32]
    f510:	and	w0, w0, #0x7ff
    f514:	str	w0, [x19, #32]
    f518:	cbz	x27, f844 <_Unwind_Backtrace@@GCC_3.3+0x1424>
    f51c:	add	x20, x27, #0x2
    f520:	lsl	x20, x20, #3
    f524:	mov	x0, x20
    f528:	bl	2b70 <malloc@plt>
    f52c:	str	x0, [sp, #160]
    f530:	cbz	x0, f844 <_Unwind_Backtrace@@GCC_3.3+0x1424>
    f534:	stp	x23, x24, [sp, #48]
    f538:	str	xzr, [x0, #8]
    f53c:	mov	x0, x20
    f540:	bl	2b70 <malloc@plt>
    f544:	str	x0, [sp, #168]
    f548:	cbz	x0, f550 <_Unwind_Backtrace@@GCC_3.3+0x1130>
    f54c:	str	xzr, [x0, #8]
    f550:	ldrb	w0, [x19, #32]
    f554:	tbz	w0, #1, f650 <_Unwind_Backtrace@@GCC_3.3+0x1230>
    f558:	ldr	x20, [x19, #24]
    f55c:	ldr	x2, [x20]
    f560:	cbz	x2, faac <_Unwind_Backtrace@@GCC_3.3+0x168c>
    f564:	add	x22, sp, #0xa0
    f568:	mov	x1, x22
    f56c:	mov	x0, x19
    f570:	bl	f320 <_Unwind_Backtrace@@GCC_3.3+0xf00>
    f574:	ldr	x2, [x20, #8]!
    f578:	cbnz	x2, f568 <_Unwind_Backtrace@@GCC_3.3+0x1148>
    f57c:	ldr	x0, [sp, #160]
    f580:	str	x0, [sp, #112]
    f584:	cbz	x0, f598 <_Unwind_Backtrace@@GCC_3.3+0x1178>
    f588:	ldr	x0, [sp, #112]
    f58c:	ldr	x0, [x0, #8]
    f590:	cmp	x0, x27
    f594:	b.ne	f664 <_Unwind_Backtrace@@GCC_3.3+0x1244>  // b.any
    f598:	ldrb	w0, [x19, #32]
    f59c:	tbnz	w0, #2, f66c <_Unwind_Backtrace@@GCC_3.3+0x124c>
    f5a0:	ldrh	w1, [x19, #32]
    f5a4:	adrp	x0, e000 <_Unwind_RaiseException@@GCC_3.0+0xd8>
    f5a8:	add	x0, x0, #0x95c
    f5ac:	adrp	x22, e000 <_Unwind_RaiseException@@GCC_3.0+0xd8>
    f5b0:	add	x22, x22, #0x55c
    f5b4:	tst	w1, #0x7f8
    f5b8:	csel	x22, x22, x0, eq  // eq = none
    f5bc:	ldr	x24, [sp, #168]
    f5c0:	cbz	x24, f890 <_Unwind_Backtrace@@GCC_3.3+0x1470>
    f5c4:	stp	x25, x26, [sp, #64]
    f5c8:	ldr	x1, [sp, #112]
    f5cc:	ldr	x0, [x1, #8]
    f5d0:	str	x0, [sp, #120]
    f5d4:	cbz	x0, f738 <_Unwind_Backtrace@@GCC_3.3+0x1318>
    f5d8:	add	x2, x1, #0x10
    f5dc:	str	x2, [sp, #136]
    f5e0:	str	x2, [sp, #104]
    f5e4:	add	x0, x0, #0x1
    f5e8:	lsl	x0, x0, #3
    f5ec:	str	x0, [sp, #128]
    f5f0:	mov	x28, #0x10                  	// #16
    f5f4:	adrp	x20, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    f5f8:	add	x20, x20, #0x230
    f5fc:	add	x20, x20, #0x190
    f600:	mov	x25, x20
    f604:	mov	x26, x2
    f608:	b	f688 <_Unwind_Backtrace@@GCC_3.3+0x1268>
    f60c:	ldr	x1, [x19, #24]
    f610:	mov	x0, x19
    f614:	bl	f1a8 <_Unwind_Backtrace@@GCC_3.3+0xd88>
    f618:	mov	x27, x0
    f61c:	cmn	x0, #0x1
    f620:	b.ne	f504 <_Unwind_Backtrace@@GCC_3.3+0x10e4>  // b.any
    f624:	str	xzr, [x19, #32]
    f628:	mov	w0, #0x7f8                 	// #2040
    f62c:	strh	w0, [x19, #32]
    f630:	adrp	x0, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    f634:	add	x0, x0, #0xd48
    f638:	str	x0, [x19, #24]
    f63c:	b	f844 <_Unwind_Backtrace@@GCC_3.3+0x1424>
    f640:	ldr	w0, [x19, #32]
    f644:	bfi	w0, w27, #11, #21
    f648:	str	w0, [x19, #32]
    f64c:	b	f518 <_Unwind_Backtrace@@GCC_3.3+0x10f8>
    f650:	ldr	x2, [x19, #24]
    f654:	add	x1, sp, #0xa0
    f658:	mov	x0, x19
    f65c:	bl	f320 <_Unwind_Backtrace@@GCC_3.3+0xf00>
    f660:	b	f57c <_Unwind_Backtrace@@GCC_3.3+0x115c>
    f664:	stp	x25, x26, [sp, #64]
    f668:	bl	2c50 <abort@plt>
    f66c:	adrp	x22, f000 <_Unwind_Backtrace@@GCC_3.3+0xbe0>
    f670:	add	x22, x22, #0xf8
    f674:	b	f5bc <_Unwind_Backtrace@@GCC_3.3+0x119c>
    f678:	ldr	x0, [sp, #104]
    f67c:	add	x0, x0, #0x8
    f680:	str	x0, [sp, #104]
    f684:	add	x28, x28, #0x8
    f688:	str	x20, [x24, x28]
    f68c:	ldr	x0, [sp, #104]
    f690:	mov	x23, x0
    f694:	ldr	x1, [sp, #128]
    f698:	cmp	x28, x1
    f69c:	b.eq	f6dc <_Unwind_Backtrace@@GCC_3.3+0x12bc>  // b.none
    f6a0:	mov	x20, x0
    f6a4:	cmp	x0, x25
    f6a8:	b.eq	f678 <_Unwind_Backtrace@@GCC_3.3+0x1258>  // b.none
    f6ac:	ldr	x2, [x20]
    f6b0:	ldr	x1, [x23, #8]
    f6b4:	mov	x0, x19
    f6b8:	blr	x22
    f6bc:	tbz	w0, #31, f678 <_Unwind_Backtrace@@GCC_3.3+0x1258>
    f6c0:	sub	x20, x20, x26
    f6c4:	add	x0, x24, x20
    f6c8:	ldr	x20, [x0, #16]
    f6cc:	str	xzr, [x0, #16]
    f6d0:	cmp	x20, x25
    f6d4:	b.ne	f6ac <_Unwind_Backtrace@@GCC_3.3+0x128c>  // b.any
    f6d8:	b	f678 <_Unwind_Backtrace@@GCC_3.3+0x1258>
    f6dc:	mov	x4, #0x0                   	// #0
    f6e0:	mov	x1, #0x0                   	// #0
    f6e4:	mov	x0, #0x0                   	// #0
    f6e8:	add	x5, x24, #0x10
    f6ec:	b	f714 <_Unwind_Backtrace@@GCC_3.3+0x12f4>
    f6f0:	ldr	x2, [sp, #136]
    f6f4:	ldr	x3, [x2, x0, lsl #3]
    f6f8:	add	x2, x4, #0x2
    f6fc:	str	x3, [x24, x2, lsl #3]
    f700:	add	x4, x4, #0x1
    f704:	add	x0, x0, #0x1
    f708:	ldr	x2, [sp, #120]
    f70c:	cmp	x2, x0
    f710:	b.eq	f740 <_Unwind_Backtrace@@GCC_3.3+0x1320>  // b.none
    f714:	ldr	x2, [x5, x0, lsl #3]
    f718:	cbz	x2, f6f0 <_Unwind_Backtrace@@GCC_3.3+0x12d0>
    f71c:	ldr	x2, [sp, #136]
    f720:	ldr	x3, [x2, x0, lsl #3]
    f724:	add	x2, x1, #0x2
    f728:	ldr	x6, [sp, #112]
    f72c:	str	x3, [x6, x2, lsl #3]
    f730:	add	x1, x1, #0x1
    f734:	b	f704 <_Unwind_Backtrace@@GCC_3.3+0x12e4>
    f738:	ldr	x1, [sp, #120]
    f73c:	mov	x4, x1
    f740:	ldr	x0, [sp, #112]
    f744:	str	x1, [x0, #8]
    f748:	str	x4, [x24, #8]
    f74c:	ldr	x2, [sp, #168]
    f750:	ldr	x0, [sp, #160]
    f754:	ldr	x0, [x0, #8]
    f758:	ldr	x1, [x2, #8]
    f75c:	add	x0, x0, x1
    f760:	cmp	x0, x27
    f764:	b.ne	f7a4 <_Unwind_Backtrace@@GCC_3.3+0x1384>  // b.any
    f768:	mov	x1, x22
    f76c:	mov	x0, x19
    f770:	bl	e63c <_Unwind_Backtrace@@GCC_3.3+0x21c>
    f774:	ldr	x0, [sp, #168]
    f778:	str	x0, [sp, #112]
    f77c:	ldr	x27, [x0, #8]
    f780:	cbz	x27, f814 <_Unwind_Backtrace@@GCC_3.3+0x13f4>
    f784:	ldr	x28, [sp, #160]
    f788:	ldr	x20, [x28, #8]
    f78c:	add	x24, x27, #0x2
    f790:	add	x24, x28, x24, lsl #3
    f794:	add	x0, x0, #0x10
    f798:	str	x0, [sp, #104]
    f79c:	add	x23, x28, #0x10
    f7a0:	b	f7c0 <_Unwind_Backtrace@@GCC_3.3+0x13a0>
    f7a4:	bl	2c50 <abort@plt>
    f7a8:	mov	x20, x26
    f7ac:	add	x0, x27, x20
    f7b0:	add	x0, x0, #0x2
    f7b4:	str	x25, [x28, x0, lsl #3]
    f7b8:	sub	x24, x24, #0x8
    f7bc:	cbz	x27, f800 <_Unwind_Backtrace@@GCC_3.3+0x13e0>
    f7c0:	sub	x27, x27, #0x1
    f7c4:	ldr	x0, [sp, #104]
    f7c8:	ldr	x25, [x0, x27, lsl #3]
    f7cc:	cbz	x20, f7ac <_Unwind_Backtrace@@GCC_3.3+0x138c>
    f7d0:	mov	x26, x20
    f7d4:	sub	x20, x20, #0x1
    f7d8:	mov	x2, x25
    f7dc:	ldr	x1, [x23, x20, lsl #3]
    f7e0:	mov	x0, x19
    f7e4:	blr	x22
    f7e8:	cmp	w0, #0x0
    f7ec:	b.le	f7a8 <_Unwind_Backtrace@@GCC_3.3+0x1388>
    f7f0:	ldr	x0, [x23, x20, lsl #3]
    f7f4:	str	x0, [x24, x20, lsl #3]
    f7f8:	cbnz	x20, f7d0 <_Unwind_Backtrace@@GCC_3.3+0x13b0>
    f7fc:	b	f7ac <_Unwind_Backtrace@@GCC_3.3+0x138c>
    f800:	ldr	x0, [x28, #8]
    f804:	ldr	x1, [sp, #112]
    f808:	ldr	x1, [x1, #8]
    f80c:	add	x0, x0, x1
    f810:	str	x0, [x28, #8]
    f814:	ldr	x0, [sp, #168]
    f818:	bl	2cc0 <free@plt>
    f81c:	ldp	x25, x26, [sp, #64]
    f820:	ldr	x1, [x19, #24]
    f824:	ldr	x0, [sp, #160]
    f828:	str	x1, [x0]
    f82c:	ldr	x0, [sp, #160]
    f830:	str	x0, [x19, #24]
    f834:	ldrb	w0, [x19, #32]
    f838:	orr	w0, w0, #0x1
    f83c:	strb	w0, [x19, #32]
    f840:	ldp	x23, x24, [sp, #48]
    f844:	ldr	x0, [x19]
    f848:	cmp	x0, x21
    f84c:	b.hi	fa80 <_Unwind_Backtrace@@GCC_3.3+0x1660>  // b.pmore
    f850:	ldrb	w0, [x19, #32]
    f854:	tbnz	w0, #0, f8a4 <_Unwind_Backtrace@@GCC_3.3+0x1484>
    f858:	tbz	w0, #1, fa64 <_Unwind_Backtrace@@GCC_3.3+0x1644>
    f85c:	ldr	x22, [x19, #24]
    f860:	ldr	x20, [x22]
    f864:	cbz	x20, fad8 <_Unwind_Backtrace@@GCC_3.3+0x16b8>
    f868:	mov	x2, x21
    f86c:	mov	x1, x20
    f870:	mov	x0, x19
    f874:	bl	eaf8 <_Unwind_Backtrace@@GCC_3.3+0x6d8>
    f878:	mov	x20, x0
    f87c:	cbnz	x0, fae0 <_Unwind_Backtrace@@GCC_3.3+0x16c0>
    f880:	ldr	x20, [x22, #8]!
    f884:	cbnz	x20, f868 <_Unwind_Backtrace@@GCC_3.3+0x1448>
    f888:	ldp	x27, x28, [sp, #80]
    f88c:	b	f98c <_Unwind_Backtrace@@GCC_3.3+0x156c>
    f890:	ldr	x2, [sp, #112]
    f894:	mov	x1, x22
    f898:	mov	x0, x19
    f89c:	bl	e63c <_Unwind_Backtrace@@GCC_3.3+0x21c>
    f8a0:	b	f820 <_Unwind_Backtrace@@GCC_3.3+0x1400>
    f8a4:	ldp	x27, x28, [sp, #80]
    f8a8:	b	f47c <_Unwind_Backtrace@@GCC_3.3+0x105c>
    f8ac:	stp	x23, x24, [sp, #48]
    f8b0:	stp	x25, x26, [sp, #64]
    f8b4:	ldr	x26, [x19, #24]
    f8b8:	ldr	x24, [x26, #8]
    f8bc:	cbz	x24, fa8c <_Unwind_Backtrace@@GCC_3.3+0x166c>
    f8c0:	stp	x27, x28, [sp, #80]
    f8c4:	mov	x25, #0x0                   	// #0
    f8c8:	add	x28, sp, #0x98
    f8cc:	add	x27, sp, #0xa0
    f8d0:	b	f8e0 <_Unwind_Backtrace@@GCC_3.3+0x14c0>
    f8d4:	mov	x24, x23
    f8d8:	cmp	x25, x24
    f8dc:	b.cs	f95c <_Unwind_Backtrace@@GCC_3.3+0x153c>  // b.hs, b.nlast
    f8e0:	add	x23, x25, x24
    f8e4:	lsr	x23, x23, #1
    f8e8:	add	x0, x23, #0x2
    f8ec:	ldr	x20, [x26, x0, lsl #3]
    f8f0:	add	x1, x20, #0x4
    f8f4:	ldrsw	x0, [x20, #4]
    f8f8:	sub	x0, x1, x0
    f8fc:	bl	e9f0 <_Unwind_Backtrace@@GCC_3.3+0x5d0>
    f900:	and	w22, w0, #0xff
    f904:	mov	x1, x19
    f908:	mov	w0, w22
    f90c:	bl	e748 <_Unwind_Backtrace@@GCC_3.3+0x328>
    f910:	mov	x3, x28
    f914:	add	x2, x20, #0x8
    f918:	mov	x1, x0
    f91c:	mov	w0, w22
    f920:	bl	e818 <_Unwind_Backtrace@@GCC_3.3+0x3f8>
    f924:	mov	x3, x27
    f928:	mov	x2, x0
    f92c:	mov	x1, #0x0                   	// #0
    f930:	and	w0, w22, #0xf
    f934:	bl	e818 <_Unwind_Backtrace@@GCC_3.3+0x3f8>
    f938:	ldr	x0, [sp, #152]
    f93c:	cmp	x21, x0
    f940:	b.cc	f8d4 <_Unwind_Backtrace@@GCC_3.3+0x14b4>  // b.lo, b.ul, b.last
    f944:	ldr	x1, [sp, #160]
    f948:	add	x0, x0, x1
    f94c:	cmp	x21, x0
    f950:	b.cc	fab8 <_Unwind_Backtrace@@GCC_3.3+0x1698>  // b.lo, b.ul, b.last
    f954:	add	x25, x23, #0x1
    f958:	b	f8d8 <_Unwind_Backtrace@@GCC_3.3+0x14b8>
    f95c:	mov	x20, #0x0                   	// #0
    f960:	ldp	x23, x24, [sp, #48]
    f964:	ldp	x25, x26, [sp, #64]
    f968:	ldp	x27, x28, [sp, #80]
    f96c:	b	f98c <_Unwind_Backtrace@@GCC_3.3+0x156c>
    f970:	ldr	x2, [x20, #16]
    f974:	add	x3, x3, x2
    f978:	cmp	x21, x3
    f97c:	b.cc	f98c <_Unwind_Backtrace@@GCC_3.3+0x156c>  // b.lo, b.ul, b.last
    f980:	add	x2, x0, #0x1
    f984:	b	f498 <_Unwind_Backtrace@@GCC_3.3+0x1078>
    f988:	mov	x20, #0x0                   	// #0
    f98c:	mov	x0, x20
    f990:	ldp	x19, x20, [sp, #16]
    f994:	ldp	x21, x22, [sp, #32]
    f998:	ldp	x29, x30, [sp], #176
    f99c:	ret
    f9a0:	stp	x23, x24, [sp, #48]
    f9a4:	stp	x25, x26, [sp, #64]
    f9a8:	ldr	x25, [x19, #24]
    f9ac:	ldrh	w0, [x19, #32]
    f9b0:	ubfx	x26, x0, #3, #8
    f9b4:	mov	x1, x19
    f9b8:	mov	x0, x26
    f9bc:	bl	e748 <_Unwind_Backtrace@@GCC_3.3+0x328>
    f9c0:	mov	x24, x0
    f9c4:	ldr	x22, [x25, #8]
    f9c8:	cbz	x22, fa9c <_Unwind_Backtrace@@GCC_3.3+0x167c>
    f9cc:	stp	x27, x28, [sp, #80]
    f9d0:	mov	x23, #0x0                   	// #0
    f9d4:	add	x28, sp, #0x98
    f9d8:	add	x27, sp, #0xa0
    f9dc:	and	w0, w26, #0xf
    f9e0:	str	w0, [sp, #104]
    f9e4:	b	f9f4 <_Unwind_Backtrace@@GCC_3.3+0x15d4>
    f9e8:	mov	x22, x19
    f9ec:	cmp	x23, x22
    f9f0:	b.cs	fa50 <_Unwind_Backtrace@@GCC_3.3+0x1630>  // b.hs, b.nlast
    f9f4:	add	x19, x23, x22
    f9f8:	lsr	x19, x19, #1
    f9fc:	add	x0, x19, #0x2
    fa00:	ldr	x20, [x25, x0, lsl #3]
    fa04:	mov	x3, x28
    fa08:	add	x2, x20, #0x8
    fa0c:	mov	x1, x24
    fa10:	mov	w0, w26
    fa14:	bl	e818 <_Unwind_Backtrace@@GCC_3.3+0x3f8>
    fa18:	mov	x3, x27
    fa1c:	mov	x2, x0
    fa20:	mov	x1, #0x0                   	// #0
    fa24:	ldrb	w0, [sp, #104]
    fa28:	bl	e818 <_Unwind_Backtrace@@GCC_3.3+0x3f8>
    fa2c:	ldr	x0, [sp, #152]
    fa30:	cmp	x21, x0
    fa34:	b.cc	f9e8 <_Unwind_Backtrace@@GCC_3.3+0x15c8>  // b.lo, b.ul, b.last
    fa38:	ldr	x1, [sp, #160]
    fa3c:	add	x0, x0, x1
    fa40:	cmp	x21, x0
    fa44:	b.cc	fac8 <_Unwind_Backtrace@@GCC_3.3+0x16a8>  // b.lo, b.ul, b.last
    fa48:	add	x23, x19, #0x1
    fa4c:	b	f9ec <_Unwind_Backtrace@@GCC_3.3+0x15cc>
    fa50:	mov	x20, #0x0                   	// #0
    fa54:	ldp	x23, x24, [sp, #48]
    fa58:	ldp	x25, x26, [sp, #64]
    fa5c:	ldp	x27, x28, [sp, #80]
    fa60:	b	f98c <_Unwind_Backtrace@@GCC_3.3+0x156c>
    fa64:	mov	x2, x21
    fa68:	ldr	x1, [x19, #24]
    fa6c:	mov	x0, x19
    fa70:	bl	eaf8 <_Unwind_Backtrace@@GCC_3.3+0x6d8>
    fa74:	mov	x20, x0
    fa78:	ldp	x27, x28, [sp, #80]
    fa7c:	b	f98c <_Unwind_Backtrace@@GCC_3.3+0x156c>
    fa80:	mov	x20, #0x0                   	// #0
    fa84:	ldp	x27, x28, [sp, #80]
    fa88:	b	f98c <_Unwind_Backtrace@@GCC_3.3+0x156c>
    fa8c:	mov	x20, #0x0                   	// #0
    fa90:	ldp	x23, x24, [sp, #48]
    fa94:	ldp	x25, x26, [sp, #64]
    fa98:	b	f98c <_Unwind_Backtrace@@GCC_3.3+0x156c>
    fa9c:	mov	x20, #0x0                   	// #0
    faa0:	ldp	x23, x24, [sp, #48]
    faa4:	ldp	x25, x26, [sp, #64]
    faa8:	b	f98c <_Unwind_Backtrace@@GCC_3.3+0x156c>
    faac:	ldr	x0, [sp, #160]
    fab0:	str	x0, [sp, #112]
    fab4:	b	f588 <_Unwind_Backtrace@@GCC_3.3+0x1168>
    fab8:	ldp	x23, x24, [sp, #48]
    fabc:	ldp	x25, x26, [sp, #64]
    fac0:	ldp	x27, x28, [sp, #80]
    fac4:	b	f98c <_Unwind_Backtrace@@GCC_3.3+0x156c>
    fac8:	ldp	x23, x24, [sp, #48]
    facc:	ldp	x25, x26, [sp, #64]
    fad0:	ldp	x27, x28, [sp, #80]
    fad4:	b	f98c <_Unwind_Backtrace@@GCC_3.3+0x156c>
    fad8:	ldp	x27, x28, [sp, #80]
    fadc:	b	f98c <_Unwind_Backtrace@@GCC_3.3+0x156c>
    fae0:	ldp	x27, x28, [sp, #80]
    fae4:	b	f98c <_Unwind_Backtrace@@GCC_3.3+0x156c>

000000000000fae8 <__register_frame_info_bases@@GCC_3.0>:
    fae8:	cbz	x0, fb9c <__register_frame_info_bases@@GCC_3.0+0xb4>
    faec:	stp	x29, x30, [sp, #-32]!
    faf0:	mov	x29, sp
    faf4:	str	x19, [sp, #16]
    faf8:	mov	x19, x1
    fafc:	ldr	w1, [x0]
    fb00:	cbz	w1, fb78 <__register_frame_info_bases@@GCC_3.0+0x90>
    fb04:	mov	x1, #0xffffffffffffffff    	// #-1
    fb08:	str	x1, [x19]
    fb0c:	str	x2, [x19, #8]
    fb10:	str	x3, [x19, #16]
    fb14:	str	x0, [x19, #24]
    fb18:	str	xzr, [x19, #32]
    fb1c:	mov	w0, #0x7f8                 	// #2040
    fb20:	strh	w0, [x19, #32]
    fb24:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x127e0>
    fb28:	ldr	x0, [x0, #4032]
    fb2c:	cbz	x0, fb40 <__register_frame_info_bases@@GCC_3.0+0x58>
    fb30:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    fb34:	add	x0, x0, #0x230
    fb38:	add	x0, x0, #0x198
    fb3c:	bl	2d50 <pthread_mutex_lock@plt>
    fb40:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    fb44:	add	x0, x0, #0x230
    fb48:	ldr	x1, [x0, #456]
    fb4c:	str	x1, [x19, #40]
    fb50:	str	x19, [x0, #456]
    fb54:	ldr	w0, [x0, #464]
    fb58:	cbz	w0, fb84 <__register_frame_info_bases@@GCC_3.0+0x9c>
    fb5c:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x127e0>
    fb60:	ldr	x0, [x0, #4032]
    fb64:	cbz	x0, fb78 <__register_frame_info_bases@@GCC_3.0+0x90>
    fb68:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    fb6c:	add	x0, x0, #0x230
    fb70:	add	x0, x0, #0x198
    fb74:	bl	2d60 <pthread_mutex_unlock@plt>
    fb78:	ldr	x19, [sp, #16]
    fb7c:	ldp	x29, x30, [sp], #32
    fb80:	ret
    fb84:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    fb88:	add	x0, x0, #0x230
    fb8c:	add	x0, x0, #0x1d0
    fb90:	mov	w1, #0x1                   	// #1
    fb94:	str	w1, [x0]
    fb98:	b	fb5c <__register_frame_info_bases@@GCC_3.0+0x74>
    fb9c:	ret

000000000000fba0 <__register_frame_info@@GLIBC_2.0>:
    fba0:	stp	x29, x30, [sp, #-16]!
    fba4:	mov	x29, sp
    fba8:	mov	x3, #0x0                   	// #0
    fbac:	mov	x2, #0x0                   	// #0
    fbb0:	bl	2d10 <__register_frame_info_bases@plt>
    fbb4:	ldp	x29, x30, [sp], #16
    fbb8:	ret

000000000000fbbc <__register_frame@@GLIBC_2.0>:
    fbbc:	stp	x29, x30, [sp, #-32]!
    fbc0:	mov	x29, sp
    fbc4:	str	x19, [sp, #16]
    fbc8:	mov	x19, x0
    fbcc:	ldr	w0, [x0]
    fbd0:	cbnz	w0, fbe0 <__register_frame@@GLIBC_2.0+0x24>
    fbd4:	ldr	x19, [sp, #16]
    fbd8:	ldp	x29, x30, [sp], #32
    fbdc:	ret
    fbe0:	mov	x0, #0x30                  	// #48
    fbe4:	bl	2b70 <malloc@plt>
    fbe8:	mov	x1, x0
    fbec:	mov	x0, x19
    fbf0:	bl	2d00 <__register_frame_info@plt>
    fbf4:	b	fbd4 <__register_frame@@GLIBC_2.0+0x18>

000000000000fbf8 <__register_frame_info_table_bases@@GCC_3.0>:
    fbf8:	stp	x29, x30, [sp, #-32]!
    fbfc:	mov	x29, sp
    fc00:	str	x19, [sp, #16]
    fc04:	mov	x19, x1
    fc08:	mov	x1, #0xffffffffffffffff    	// #-1
    fc0c:	str	x1, [x19]
    fc10:	str	x2, [x19, #8]
    fc14:	str	x3, [x19, #16]
    fc18:	str	x0, [x19, #24]
    fc1c:	str	xzr, [x19, #32]
    fc20:	mov	w0, #0x2                   	// #2
    fc24:	strb	w0, [x19, #32]
    fc28:	ldrh	w0, [x19, #32]
    fc2c:	orr	w0, w0, #0x7f8
    fc30:	strh	w0, [x19, #32]
    fc34:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x127e0>
    fc38:	ldr	x0, [x0, #4032]
    fc3c:	cbz	x0, fc50 <__register_frame_info_table_bases@@GCC_3.0+0x58>
    fc40:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    fc44:	add	x0, x0, #0x230
    fc48:	add	x0, x0, #0x198
    fc4c:	bl	2d50 <pthread_mutex_lock@plt>
    fc50:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    fc54:	add	x0, x0, #0x230
    fc58:	ldr	x1, [x0, #456]
    fc5c:	str	x1, [x19, #40]
    fc60:	str	x19, [x0, #456]
    fc64:	ldr	w0, [x0, #464]
    fc68:	cbz	w0, fc94 <__register_frame_info_table_bases@@GCC_3.0+0x9c>
    fc6c:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x127e0>
    fc70:	ldr	x0, [x0, #4032]
    fc74:	cbz	x0, fc88 <__register_frame_info_table_bases@@GCC_3.0+0x90>
    fc78:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    fc7c:	add	x0, x0, #0x230
    fc80:	add	x0, x0, #0x198
    fc84:	bl	2d60 <pthread_mutex_unlock@plt>
    fc88:	ldr	x19, [sp, #16]
    fc8c:	ldp	x29, x30, [sp], #32
    fc90:	ret
    fc94:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    fc98:	add	x0, x0, #0x230
    fc9c:	add	x0, x0, #0x1d0
    fca0:	mov	w1, #0x1                   	// #1
    fca4:	str	w1, [x0]
    fca8:	b	fc6c <__register_frame_info_table_bases@@GCC_3.0+0x74>

000000000000fcac <__register_frame_info_table@@GLIBC_2.0>:
    fcac:	stp	x29, x30, [sp, #-16]!
    fcb0:	mov	x29, sp
    fcb4:	mov	x3, #0x0                   	// #0
    fcb8:	mov	x2, #0x0                   	// #0
    fcbc:	bl	2bd0 <__register_frame_info_table_bases@plt>
    fcc0:	ldp	x29, x30, [sp], #16
    fcc4:	ret

000000000000fcc8 <__register_frame_table@@GLIBC_2.0>:
    fcc8:	stp	x29, x30, [sp, #-32]!
    fccc:	mov	x29, sp
    fcd0:	str	x19, [sp, #16]
    fcd4:	mov	x19, x0
    fcd8:	mov	x0, #0x30                  	// #48
    fcdc:	bl	2b70 <malloc@plt>
    fce0:	mov	x1, x0
    fce4:	mov	x0, x19
    fce8:	bl	2cd0 <__register_frame_info_table@plt>
    fcec:	ldr	x19, [sp, #16]
    fcf0:	ldp	x29, x30, [sp], #32
    fcf4:	ret

000000000000fcf8 <__deregister_frame_info_bases@@GCC_3.0>:
    fcf8:	stp	x29, x30, [sp, #-32]!
    fcfc:	mov	x29, sp
    fd00:	stp	x19, x20, [sp, #16]
    fd04:	mov	x20, x0
    fd08:	cbz	x0, fe04 <__deregister_frame_info_bases@@GCC_3.0+0x10c>
    fd0c:	ldr	w0, [x0]
    fd10:	cbz	w0, fe0c <__deregister_frame_info_bases@@GCC_3.0+0x114>
    fd14:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x127e0>
    fd18:	ldr	x0, [x0, #4032]
    fd1c:	cbz	x0, fd30 <__deregister_frame_info_bases@@GCC_3.0+0x38>
    fd20:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    fd24:	add	x0, x0, #0x230
    fd28:	add	x0, x0, #0x198
    fd2c:	bl	2d50 <pthread_mutex_lock@plt>
    fd30:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    fd34:	ldr	x19, [x0, #1016]
    fd38:	cbz	x19, fd60 <__deregister_frame_info_bases@@GCC_3.0+0x68>
    fd3c:	adrp	x1, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    fd40:	add	x1, x1, #0x230
    fd44:	add	x1, x1, #0x1c8
    fd48:	ldr	x0, [x19, #24]
    fd4c:	cmp	x0, x20
    fd50:	b.eq	fd7c <__deregister_frame_info_bases@@GCC_3.0+0x84>  // b.none
    fd54:	add	x1, x19, #0x28
    fd58:	ldr	x19, [x19, #40]
    fd5c:	cbnz	x19, fd48 <__deregister_frame_info_bases@@GCC_3.0+0x50>
    fd60:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    fd64:	ldr	x19, [x0, #1032]
    fd68:	cbz	x19, fe14 <__deregister_frame_info_bases@@GCC_3.0+0x11c>
    fd6c:	adrp	x1, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    fd70:	add	x1, x1, #0x230
    fd74:	add	x1, x1, #0x1d8
    fd78:	b	fdcc <__deregister_frame_info_bases@@GCC_3.0+0xd4>
    fd7c:	ldr	x0, [x19, #40]
    fd80:	str	x0, [x1]
    fd84:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x127e0>
    fd88:	ldr	x0, [x0, #4032]
    fd8c:	cbz	x0, fda4 <__deregister_frame_info_bases@@GCC_3.0+0xac>
    fd90:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    fd94:	add	x0, x0, #0x230
    fd98:	add	x0, x0, #0x198
    fd9c:	bl	2d60 <pthread_mutex_unlock@plt>
    fda0:	cbz	x19, fe30 <__deregister_frame_info_bases@@GCC_3.0+0x138>
    fda4:	mov	x0, x19
    fda8:	ldp	x19, x20, [sp, #16]
    fdac:	ldp	x29, x30, [sp], #32
    fdb0:	ret
    fdb4:	ldr	x0, [x19, #24]
    fdb8:	cmp	x0, x20
    fdbc:	b.eq	fdf8 <__deregister_frame_info_bases@@GCC_3.0+0x100>  // b.none
    fdc0:	add	x1, x19, #0x28
    fdc4:	ldr	x19, [x19, #40]
    fdc8:	cbz	x19, fe14 <__deregister_frame_info_bases@@GCC_3.0+0x11c>
    fdcc:	ldrb	w0, [x19, #32]
    fdd0:	tbz	w0, #0, fdb4 <__deregister_frame_info_bases@@GCC_3.0+0xbc>
    fdd4:	ldr	x0, [x19, #24]
    fdd8:	ldr	x0, [x0]
    fddc:	cmp	x0, x20
    fde0:	b.ne	fdc0 <__deregister_frame_info_bases@@GCC_3.0+0xc8>  // b.any
    fde4:	ldr	x0, [x19, #40]
    fde8:	str	x0, [x1]
    fdec:	ldr	x0, [x19, #24]
    fdf0:	bl	2cc0 <free@plt>
    fdf4:	b	fd84 <__deregister_frame_info_bases@@GCC_3.0+0x8c>
    fdf8:	ldr	x0, [x19, #40]
    fdfc:	str	x0, [x1]
    fe00:	b	fd84 <__deregister_frame_info_bases@@GCC_3.0+0x8c>
    fe04:	mov	x19, x0
    fe08:	b	fda4 <__deregister_frame_info_bases@@GCC_3.0+0xac>
    fe0c:	mov	x19, #0x0                   	// #0
    fe10:	b	fda4 <__deregister_frame_info_bases@@GCC_3.0+0xac>
    fe14:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x127e0>
    fe18:	ldr	x0, [x0, #4032]
    fe1c:	cbz	x0, fe30 <__deregister_frame_info_bases@@GCC_3.0+0x138>
    fe20:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    fe24:	add	x0, x0, #0x230
    fe28:	add	x0, x0, #0x198
    fe2c:	bl	2d60 <pthread_mutex_unlock@plt>
    fe30:	bl	2c50 <abort@plt>

000000000000fe34 <__deregister_frame_info@@GLIBC_2.0>:
    fe34:	stp	x29, x30, [sp, #-16]!
    fe38:	mov	x29, sp
    fe3c:	bl	2b60 <__deregister_frame_info_bases@plt>
    fe40:	ldp	x29, x30, [sp], #16
    fe44:	ret

000000000000fe48 <__deregister_frame@@GLIBC_2.0>:
    fe48:	ldr	w1, [x0]
    fe4c:	cbnz	w1, fe54 <__deregister_frame@@GLIBC_2.0+0xc>
    fe50:	ret
    fe54:	stp	x29, x30, [sp, #-16]!
    fe58:	mov	x29, sp
    fe5c:	bl	2ce0 <__deregister_frame_info@plt>
    fe60:	bl	2cc0 <free@plt>
    fe64:	ldp	x29, x30, [sp], #16
    fe68:	ret

000000000000fe6c <_Unwind_Find_FDE@@GCC_3.0>:
    fe6c:	stp	x29, x30, [sp, #-128]!
    fe70:	mov	x29, sp
    fe74:	stp	x19, x20, [sp, #16]
    fe78:	stp	x21, x22, [sp, #32]
    fe7c:	mov	x20, x0
    fe80:	mov	x22, x1
    fe84:	adrp	x2, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    fe88:	add	x2, x2, #0x230
    fe8c:	add	x2, x2, #0x1d0
    fe90:	ldr	w0, [x2]
    fe94:	cbnz	w0, fefc <_Unwind_Find_FDE@@GCC_3.0+0x90>
    fe98:	str	x20, [sp, #80]
    fe9c:	str	xzr, [sp, #88]
    fea0:	str	xzr, [sp, #96]
    fea4:	str	xzr, [sp, #104]
    fea8:	str	xzr, [sp, #112]
    feac:	mov	w0, #0x1                   	// #1
    feb0:	str	w0, [sp, #120]
    feb4:	add	x1, sp, #0x50
    feb8:	adrp	x0, e000 <_Unwind_RaiseException@@GCC_3.0+0xd8>
    febc:	add	x0, x0, #0xc6c
    fec0:	bl	2c80 <dl_iterate_phdr@plt>
    fec4:	tbnz	w0, #31, ffe0 <_Unwind_Find_FDE@@GCC_3.0+0x174>
    fec8:	ldr	x21, [sp, #112]
    fecc:	cbz	x21, fee8 <_Unwind_Find_FDE@@GCC_3.0+0x7c>
    fed0:	ldr	x0, [sp, #88]
    fed4:	str	x0, [x22]
    fed8:	ldr	x0, [sp, #96]
    fedc:	str	x0, [x22, #8]
    fee0:	ldr	x0, [sp, #104]
    fee4:	str	x0, [x22, #16]
    fee8:	mov	x0, x21
    feec:	ldp	x19, x20, [sp, #16]
    fef0:	ldp	x21, x22, [sp, #32]
    fef4:	ldp	x29, x30, [sp], #128
    fef8:	ret
    fefc:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x127e0>
    ff00:	ldr	x0, [x0, #4032]
    ff04:	cbz	x0, ff18 <_Unwind_Find_FDE@@GCC_3.0+0xac>
    ff08:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    ff0c:	add	x0, x0, #0x230
    ff10:	add	x0, x0, #0x198
    ff14:	bl	2d50 <pthread_mutex_lock@plt>
    ff18:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    ff1c:	ldr	x19, [x0, #1032]
    ff20:	cbz	x19, ff68 <_Unwind_Find_FDE@@GCC_3.0+0xfc>
    ff24:	ldr	x0, [x19]
    ff28:	cmp	x20, x0
    ff2c:	b.cs	ff4c <_Unwind_Find_FDE@@GCC_3.0+0xe0>  // b.hs, b.nlast
    ff30:	ldr	x19, [x19, #40]
    ff34:	cbnz	x19, ff24 <_Unwind_Find_FDE@@GCC_3.0+0xb8>
    ff38:	stp	x23, x24, [sp, #48]
    ff3c:	adrp	x23, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    ff40:	add	x23, x23, #0x230
    ff44:	add	x24, x23, #0x1d8
    ff48:	b	ff80 <_Unwind_Find_FDE@@GCC_3.0+0x114>
    ff4c:	mov	x1, x20
    ff50:	mov	x0, x19
    ff54:	bl	f45c <_Unwind_Backtrace@@GCC_3.3+0x103c>
    ff58:	mov	x21, x0
    ff5c:	cbnz	x0, ffec <_Unwind_Find_FDE@@GCC_3.0+0x180>
    ff60:	stp	x23, x24, [sp, #48]
    ff64:	b	ff3c <_Unwind_Find_FDE@@GCC_3.0+0xd0>
    ff68:	stp	x23, x24, [sp, #48]
    ff6c:	b	ff3c <_Unwind_Find_FDE@@GCC_3.0+0xd0>
    ff70:	mov	x0, x24
    ff74:	str	x2, [x19, #40]
    ff78:	str	x19, [x0]
    ff7c:	cbnz	x21, ffe8 <_Unwind_Find_FDE@@GCC_3.0+0x17c>
    ff80:	ldr	x19, [x23, #456]
    ff84:	cbz	x19, 1005c <_Unwind_Find_FDE@@GCC_3.0+0x1f0>
    ff88:	ldr	x0, [x19, #40]
    ff8c:	str	x0, [x23, #456]
    ff90:	mov	x1, x20
    ff94:	mov	x0, x19
    ff98:	bl	f45c <_Unwind_Backtrace@@GCC_3.3+0x103c>
    ff9c:	mov	x21, x0
    ffa0:	ldr	x2, [x23, #472]
    ffa4:	cbz	x2, ff70 <_Unwind_Find_FDE@@GCC_3.0+0x104>
    ffa8:	ldr	x3, [x19]
    ffac:	mov	x0, x24
    ffb0:	ldr	x1, [x2]
    ffb4:	cmp	x1, x3
    ffb8:	b.cc	ff74 <_Unwind_Find_FDE@@GCC_3.0+0x108>  // b.lo, b.ul, b.last
    ffbc:	add	x0, x2, #0x28
    ffc0:	ldr	x2, [x2, #40]
    ffc4:	cbnz	x2, ffb0 <_Unwind_Find_FDE@@GCC_3.0+0x144>
    ffc8:	b	ff74 <_Unwind_Find_FDE@@GCC_3.0+0x108>
    ffcc:	add	x0, x21, #0x4
    ffd0:	ldrsw	x1, [x21, #4]
    ffd4:	sub	x0, x0, x1
    ffd8:	bl	e9f0 <_Unwind_Backtrace@@GCC_3.3+0x5d0>
    ffdc:	b	1002c <_Unwind_Find_FDE@@GCC_3.0+0x1c0>
    ffe0:	mov	x21, #0x0                   	// #0
    ffe4:	b	fee8 <_Unwind_Find_FDE@@GCC_3.0+0x7c>
    ffe8:	ldp	x23, x24, [sp, #48]
    ffec:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x127e0>
    fff0:	ldr	x0, [x0, #4032]
    fff4:	cbz	x0, 1000c <_Unwind_Find_FDE@@GCC_3.0+0x1a0>
    fff8:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
    fffc:	add	x0, x0, #0x230
   10000:	add	x0, x0, #0x198
   10004:	bl	2d60 <pthread_mutex_unlock@plt>
   10008:	cbz	x21, fe98 <_Unwind_Find_FDE@@GCC_3.0+0x2c>
   1000c:	ldr	x0, [x19, #8]
   10010:	str	x0, [x22]
   10014:	ldr	x0, [x19, #16]
   10018:	str	x0, [x22, #8]
   1001c:	ldrb	w0, [x19, #32]
   10020:	tbnz	w0, #2, ffcc <_Unwind_Find_FDE@@GCC_3.0+0x160>
   10024:	ldrh	w0, [x19, #32]
   10028:	ubfx	x0, x0, #3, #8
   1002c:	and	w20, w0, #0xff
   10030:	mov	x1, x19
   10034:	mov	w0, w20
   10038:	bl	e748 <_Unwind_Backtrace@@GCC_3.3+0x328>
   1003c:	add	x3, sp, #0x48
   10040:	add	x2, x21, #0x8
   10044:	mov	x1, x0
   10048:	mov	w0, w20
   1004c:	bl	e818 <_Unwind_Backtrace@@GCC_3.3+0x3f8>
   10050:	ldr	x0, [sp, #72]
   10054:	str	x0, [x22, #16]
   10058:	b	fee8 <_Unwind_Find_FDE@@GCC_3.0+0x7c>
   1005c:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x127e0>
   10060:	ldr	x0, [x0, #4032]
   10064:	mov	x21, x19
   10068:	cbz	x0, 10074 <_Unwind_Find_FDE@@GCC_3.0+0x208>
   1006c:	ldp	x23, x24, [sp, #48]
   10070:	b	fff8 <_Unwind_Find_FDE@@GCC_3.0+0x18c>
   10074:	ldp	x23, x24, [sp, #48]
   10078:	b	fe98 <_Unwind_Find_FDE@@GCC_3.0+0x2c>
   1007c:	mov	x5, #0x0                   	// #0
   10080:	mov	w3, #0x0                   	// #0
   10084:	ldrb	w4, [x0], #1
   10088:	and	x2, x4, #0x7f
   1008c:	lsl	x2, x2, x3
   10090:	orr	x5, x5, x2
   10094:	add	w3, w3, #0x7
   10098:	tbnz	w4, #7, 10084 <_Unwind_Find_FDE@@GCC_3.0+0x218>
   1009c:	str	x5, [x1]
   100a0:	ret
   100a4:	and	w3, w0, #0xff
   100a8:	cmp	w3, #0xff
   100ac:	b.eq	10118 <_Unwind_Find_FDE@@GCC_3.0+0x2ac>  // b.none
   100b0:	stp	x29, x30, [sp, #-16]!
   100b4:	mov	x29, sp
   100b8:	mov	x0, x1
   100bc:	and	w2, w3, #0x70
   100c0:	cmp	w2, #0x30
   100c4:	b.eq	10110 <_Unwind_Find_FDE@@GCC_3.0+0x2a4>  // b.none
   100c8:	b.hi	100ec <_Unwind_Find_FDE@@GCC_3.0+0x280>  // b.pmore
   100cc:	cmp	w2, #0x20
   100d0:	b.ne	100dc <_Unwind_Find_FDE@@GCC_3.0+0x270>  // b.any
   100d4:	bl	2b50 <_Unwind_GetTextRelBase@plt>
   100d8:	b	10108 <_Unwind_Find_FDE@@GCC_3.0+0x29c>
   100dc:	b.hi	100e8 <_Unwind_Find_FDE@@GCC_3.0+0x27c>  // b.pmore
   100e0:	tst	w3, #0x60
   100e4:	b.eq	10120 <_Unwind_Find_FDE@@GCC_3.0+0x2b4>  // b.none
   100e8:	bl	2c50 <abort@plt>
   100ec:	cmp	w2, #0x40
   100f0:	b.ne	100fc <_Unwind_Find_FDE@@GCC_3.0+0x290>  // b.any
   100f4:	bl	2ab0 <_Unwind_GetRegionStart@plt>
   100f8:	b	10108 <_Unwind_Find_FDE@@GCC_3.0+0x29c>
   100fc:	mov	x0, #0x0                   	// #0
   10100:	cmp	w2, #0x50
   10104:	b.ne	100e8 <_Unwind_Find_FDE@@GCC_3.0+0x27c>  // b.any
   10108:	ldp	x29, x30, [sp], #16
   1010c:	ret
   10110:	bl	2da0 <_Unwind_GetDataRelBase@plt>
   10114:	b	10108 <_Unwind_Find_FDE@@GCC_3.0+0x29c>
   10118:	mov	x0, #0x0                   	// #0
   1011c:	ret
   10120:	mov	x0, #0x0                   	// #0
   10124:	b	10108 <_Unwind_Find_FDE@@GCC_3.0+0x29c>
   10128:	stp	x29, x30, [sp, #-64]!
   1012c:	mov	x29, sp
   10130:	stp	x19, x20, [sp, #16]
   10134:	stp	x21, x22, [sp, #32]
   10138:	and	w22, w0, #0xff
   1013c:	mov	x19, x2
   10140:	mov	x20, x3
   10144:	cmp	w22, #0x50
   10148:	b.eq	10188 <_Unwind_Find_FDE@@GCC_3.0+0x31c>  // b.none
   1014c:	mov	x21, x1
   10150:	and	w0, w22, #0xf
   10154:	cmp	w0, #0x4
   10158:	b.eq	1027c <_Unwind_Find_FDE@@GCC_3.0+0x410>  // b.none
   1015c:	cmp	w0, #0x4
   10160:	b.ls	101a8 <_Unwind_Find_FDE@@GCC_3.0+0x33c>  // b.plast
   10164:	cmp	w0, #0xb
   10168:	b.eq	10288 <_Unwind_Find_FDE@@GCC_3.0+0x41c>  // b.none
   1016c:	cmp	w0, #0xb
   10170:	b.ls	101ec <_Unwind_Find_FDE@@GCC_3.0+0x380>  // b.plast
   10174:	cmp	w0, #0xc
   10178:	b.ne	10294 <_Unwind_Find_FDE@@GCC_3.0+0x428>  // b.any
   1017c:	mov	x0, x2
   10180:	ldr	x4, [x0], #8
   10184:	b	10210 <_Unwind_Find_FDE@@GCC_3.0+0x3a4>
   10188:	add	x0, x2, #0x7
   1018c:	and	x0, x0, #0xfffffffffffffff8
   10190:	ldr	x4, [x0], #8
   10194:	str	x4, [x20]
   10198:	ldp	x19, x20, [sp, #16]
   1019c:	ldp	x21, x22, [sp, #32]
   101a0:	ldp	x29, x30, [sp], #64
   101a4:	ret
   101a8:	cmp	w0, #0x2
   101ac:	b.eq	10270 <_Unwind_Find_FDE@@GCC_3.0+0x404>  // b.none
   101b0:	cmp	w0, #0x2
   101b4:	b.ls	101cc <_Unwind_Find_FDE@@GCC_3.0+0x360>  // b.plast
   101b8:	cmp	w0, #0x3
   101bc:	b.ne	10294 <_Unwind_Find_FDE@@GCC_3.0+0x428>  // b.any
   101c0:	mov	x0, x2
   101c4:	ldr	w4, [x0], #4
   101c8:	b	10210 <_Unwind_Find_FDE@@GCC_3.0+0x3a4>
   101cc:	cbz	w0, 10208 <_Unwind_Find_FDE@@GCC_3.0+0x39c>
   101d0:	cmp	w0, #0x1
   101d4:	b.ne	10294 <_Unwind_Find_FDE@@GCC_3.0+0x428>  // b.any
   101d8:	add	x1, sp, #0x38
   101dc:	mov	x0, x2
   101e0:	bl	1007c <_Unwind_Find_FDE@@GCC_3.0+0x210>
   101e4:	ldr	x4, [sp, #56]
   101e8:	b	10210 <_Unwind_Find_FDE@@GCC_3.0+0x3a4>
   101ec:	cmp	w0, #0x9
   101f0:	b.eq	10230 <_Unwind_Find_FDE@@GCC_3.0+0x3c4>  // b.none
   101f4:	cmp	w0, #0xa
   101f8:	b.ne	10294 <_Unwind_Find_FDE@@GCC_3.0+0x428>  // b.any
   101fc:	mov	x0, x2
   10200:	ldrsh	x4, [x0], #2
   10204:	b	10210 <_Unwind_Find_FDE@@GCC_3.0+0x3a4>
   10208:	mov	x0, x2
   1020c:	ldr	x4, [x0], #8
   10210:	cbz	x4, 10194 <_Unwind_Find_FDE@@GCC_3.0+0x328>
   10214:	and	w1, w22, #0x70
   10218:	cmp	w1, #0x10
   1021c:	csel	x21, x19, x21, eq  // eq = none
   10220:	add	x4, x4, x21
   10224:	tbz	w22, #7, 10194 <_Unwind_Find_FDE@@GCC_3.0+0x328>
   10228:	ldr	x4, [x4]
   1022c:	b	10194 <_Unwind_Find_FDE@@GCC_3.0+0x328>
   10230:	mov	x0, x2
   10234:	mov	x4, #0x0                   	// #0
   10238:	mov	w2, #0x0                   	// #0
   1023c:	ldrb	w3, [x0], #1
   10240:	and	x1, x3, #0x7f
   10244:	lsl	x1, x1, x2
   10248:	orr	x4, x4, x1
   1024c:	add	w2, w2, #0x7
   10250:	tbnz	w3, #7, 1023c <_Unwind_Find_FDE@@GCC_3.0+0x3d0>
   10254:	cmp	w2, #0x3f
   10258:	b.hi	10210 <_Unwind_Find_FDE@@GCC_3.0+0x3a4>  // b.pmore
   1025c:	tbz	w3, #6, 10210 <_Unwind_Find_FDE@@GCC_3.0+0x3a4>
   10260:	mov	x1, #0xffffffffffffffff    	// #-1
   10264:	lsl	x2, x1, x2
   10268:	orr	x4, x4, x2
   1026c:	b	10214 <_Unwind_Find_FDE@@GCC_3.0+0x3a8>
   10270:	mov	x0, x2
   10274:	ldrh	w4, [x0], #2
   10278:	b	10210 <_Unwind_Find_FDE@@GCC_3.0+0x3a4>
   1027c:	mov	x0, x2
   10280:	ldr	x4, [x0], #8
   10284:	b	10210 <_Unwind_Find_FDE@@GCC_3.0+0x3a4>
   10288:	mov	x0, x2
   1028c:	ldrsw	x4, [x0], #4
   10290:	b	10210 <_Unwind_Find_FDE@@GCC_3.0+0x3a4>
   10294:	bl	2c50 <abort@plt>

0000000000010298 <__gcc_personality_v0@@GCC_3.3.1>:
   10298:	stp	x29, x30, [sp, #-192]!
   1029c:	mov	x29, sp
   102a0:	str	wzr, [sp, #140]
   102a4:	cmp	w0, #0x1
   102a8:	b.ne	10548 <__gcc_personality_v0@@GCC_3.3.1+0x2b0>  // b.any
   102ac:	stp	x19, x20, [sp, #16]
   102b0:	stp	x21, x22, [sp, #32]
   102b4:	mov	x22, x3
   102b8:	mov	x20, x4
   102bc:	mov	w0, #0x8                   	// #8
   102c0:	tbnz	w1, #1, 102d0 <__gcc_personality_v0@@GCC_3.3.1+0x38>
   102c4:	ldp	x19, x20, [sp, #16]
   102c8:	ldp	x21, x22, [sp, #32]
   102cc:	b	10490 <__gcc_personality_v0@@GCC_3.3.1+0x1f8>
   102d0:	mov	x0, x4
   102d4:	bl	2af0 <_Unwind_GetLanguageSpecificData@plt>
   102d8:	mov	x19, x0
   102dc:	mov	w0, #0x8                   	// #8
   102e0:	cbz	x19, 10560 <__gcc_personality_v0@@GCC_3.3.1+0x2c8>
   102e4:	mov	x0, #0x0                   	// #0
   102e8:	cbz	x20, 102f4 <__gcc_personality_v0@@GCC_3.3.1+0x5c>
   102ec:	mov	x0, x20
   102f0:	bl	2ab0 <_Unwind_GetRegionStart@plt>
   102f4:	str	x0, [sp, #144]
   102f8:	ldrb	w21, [x19], #1
   102fc:	cmp	w21, #0xff
   10300:	b.ne	10388 <__gcc_personality_v0@@GCC_3.3.1+0xf0>  // b.any
   10304:	str	x0, [sp, #152]
   10308:	mov	x0, x19
   1030c:	ldrb	w1, [x0], #1
   10310:	strb	w1, [sp, #184]
   10314:	cmp	w1, #0xff
   10318:	b.ne	103b0 <__gcc_personality_v0@@GCC_3.3.1+0x118>  // b.any
   1031c:	str	xzr, [sp, #168]
   10320:	ldrb	w1, [x0], #1
   10324:	strb	w1, [sp, #185]
   10328:	add	x1, sp, #0x80
   1032c:	bl	1007c <_Unwind_Find_FDE@@GCC_3.0+0x210>
   10330:	mov	x19, x0
   10334:	ldr	x0, [sp, #128]
   10338:	add	x0, x19, x0
   1033c:	str	x0, [sp, #176]
   10340:	add	x1, sp, #0x8c
   10344:	mov	x0, x20
   10348:	bl	2c00 <_Unwind_GetIPInfo@plt>
   1034c:	ldr	w1, [sp, #140]
   10350:	cmp	w1, #0x0
   10354:	cset	x1, eq  // eq = none
   10358:	sub	x21, x0, x1
   1035c:	ldr	x0, [sp, #176]
   10360:	cmp	x19, x0
   10364:	b.cs	10550 <__gcc_personality_v0@@GCC_3.3.1+0x2b8>  // b.hs, b.nlast
   10368:	stp	x23, x24, [sp, #48]
   1036c:	stp	x25, x26, [sp, #64]
   10370:	str	x27, [sp, #80]
   10374:	add	x26, sp, #0x68
   10378:	add	x25, sp, #0x70
   1037c:	add	x24, sp, #0x78
   10380:	add	x23, sp, #0x80
   10384:	b	103e4 <__gcc_personality_v0@@GCC_3.3.1+0x14c>
   10388:	mov	x1, x20
   1038c:	mov	w0, w21
   10390:	bl	100a4 <_Unwind_Find_FDE@@GCC_3.0+0x238>
   10394:	add	x3, sp, #0x98
   10398:	mov	x2, x19
   1039c:	mov	x1, x0
   103a0:	mov	w0, w21
   103a4:	bl	10128 <_Unwind_Find_FDE@@GCC_3.0+0x2bc>
   103a8:	mov	x19, x0
   103ac:	b	10308 <__gcc_personality_v0@@GCC_3.3.1+0x70>
   103b0:	add	x1, sp, #0x80
   103b4:	bl	1007c <_Unwind_Find_FDE@@GCC_3.0+0x210>
   103b8:	ldr	x1, [sp, #128]
   103bc:	add	x1, x0, x1
   103c0:	str	x1, [sp, #168]
   103c4:	b	10320 <__gcc_personality_v0@@GCC_3.3.1+0x88>
   103c8:	ldr	x0, [sp, #112]
   103cc:	add	x1, x1, x0
   103d0:	cmp	x1, x21
   103d4:	b.hi	10498 <__gcc_personality_v0@@GCC_3.3.1+0x200>  // b.pmore
   103d8:	ldr	x0, [sp, #176]
   103dc:	cmp	x0, x19
   103e0:	b.ls	104e4 <__gcc_personality_v0@@GCC_3.3.1+0x24c>  // b.plast
   103e4:	ldrb	w27, [sp, #185]
   103e8:	mov	x1, #0x0                   	// #0
   103ec:	mov	w0, w27
   103f0:	bl	100a4 <_Unwind_Find_FDE@@GCC_3.0+0x238>
   103f4:	mov	x3, x26
   103f8:	mov	x2, x19
   103fc:	mov	x1, x0
   10400:	mov	w0, w27
   10404:	bl	10128 <_Unwind_Find_FDE@@GCC_3.0+0x2bc>
   10408:	mov	x19, x0
   1040c:	ldrb	w27, [sp, #185]
   10410:	mov	x1, #0x0                   	// #0
   10414:	mov	w0, w27
   10418:	bl	100a4 <_Unwind_Find_FDE@@GCC_3.0+0x238>
   1041c:	mov	x3, x25
   10420:	mov	x2, x19
   10424:	mov	x1, x0
   10428:	mov	w0, w27
   1042c:	bl	10128 <_Unwind_Find_FDE@@GCC_3.0+0x2bc>
   10430:	mov	x19, x0
   10434:	ldrb	w27, [sp, #185]
   10438:	mov	x1, #0x0                   	// #0
   1043c:	mov	w0, w27
   10440:	bl	100a4 <_Unwind_Find_FDE@@GCC_3.0+0x238>
   10444:	mov	x3, x24
   10448:	mov	x2, x19
   1044c:	mov	x1, x0
   10450:	mov	w0, w27
   10454:	bl	10128 <_Unwind_Find_FDE@@GCC_3.0+0x2bc>
   10458:	mov	x1, x23
   1045c:	bl	1007c <_Unwind_Find_FDE@@GCC_3.0+0x210>
   10460:	mov	x19, x0
   10464:	ldr	x1, [sp, #144]
   10468:	ldr	x0, [sp, #104]
   1046c:	add	x1, x1, x0
   10470:	cmp	x1, x21
   10474:	b.ls	103c8 <__gcc_personality_v0@@GCC_3.3.1+0x130>  // b.plast
   10478:	mov	w0, #0x8                   	// #8
   1047c:	ldp	x19, x20, [sp, #16]
   10480:	ldp	x21, x22, [sp, #32]
   10484:	ldp	x23, x24, [sp, #48]
   10488:	ldp	x25, x26, [sp, #64]
   1048c:	ldr	x27, [sp, #80]
   10490:	ldp	x29, x30, [sp], #192
   10494:	ret
   10498:	ldr	x1, [sp, #120]
   1049c:	cbz	x1, 104c8 <__gcc_personality_v0@@GCC_3.3.1+0x230>
   104a0:	ldr	x19, [sp, #152]
   104a4:	mov	w0, #0x8                   	// #8
   104a8:	adds	x19, x1, x19
   104ac:	b.ne	10500 <__gcc_personality_v0@@GCC_3.3.1+0x268>  // b.any
   104b0:	ldp	x19, x20, [sp, #16]
   104b4:	ldp	x21, x22, [sp, #32]
   104b8:	ldp	x23, x24, [sp, #48]
   104bc:	ldp	x25, x26, [sp, #64]
   104c0:	ldr	x27, [sp, #80]
   104c4:	b	10490 <__gcc_personality_v0@@GCC_3.3.1+0x1f8>
   104c8:	mov	w0, #0x8                   	// #8
   104cc:	ldp	x19, x20, [sp, #16]
   104d0:	ldp	x21, x22, [sp, #32]
   104d4:	ldp	x23, x24, [sp, #48]
   104d8:	ldp	x25, x26, [sp, #64]
   104dc:	ldr	x27, [sp, #80]
   104e0:	b	10490 <__gcc_personality_v0@@GCC_3.3.1+0x1f8>
   104e4:	mov	w0, #0x8                   	// #8
   104e8:	ldp	x19, x20, [sp, #16]
   104ec:	ldp	x21, x22, [sp, #32]
   104f0:	ldp	x23, x24, [sp, #48]
   104f4:	ldp	x25, x26, [sp, #64]
   104f8:	ldr	x27, [sp, #80]
   104fc:	b	10490 <__gcc_personality_v0@@GCC_3.3.1+0x1f8>
   10500:	mov	x2, x22
   10504:	mov	w1, #0x0                   	// #0
   10508:	mov	x0, x20
   1050c:	bl	2d40 <_Unwind_SetGR@plt>
   10510:	mov	x2, #0x0                   	// #0
   10514:	mov	w1, #0x1                   	// #1
   10518:	mov	x0, x20
   1051c:	bl	2d40 <_Unwind_SetGR@plt>
   10520:	mov	x1, x19
   10524:	mov	x0, x20
   10528:	bl	2ae0 <_Unwind_SetIP@plt>
   1052c:	mov	w0, #0x7                   	// #7
   10530:	ldp	x19, x20, [sp, #16]
   10534:	ldp	x21, x22, [sp, #32]
   10538:	ldp	x23, x24, [sp, #48]
   1053c:	ldp	x25, x26, [sp, #64]
   10540:	ldr	x27, [sp, #80]
   10544:	b	10490 <__gcc_personality_v0@@GCC_3.3.1+0x1f8>
   10548:	mov	w0, #0x3                   	// #3
   1054c:	b	10490 <__gcc_personality_v0@@GCC_3.3.1+0x1f8>
   10550:	mov	w0, #0x8                   	// #8
   10554:	ldp	x19, x20, [sp, #16]
   10558:	ldp	x21, x22, [sp, #32]
   1055c:	b	10490 <__gcc_personality_v0@@GCC_3.3.1+0x1f8>
   10560:	ldp	x19, x20, [sp, #16]
   10564:	ldp	x21, x22, [sp, #32]
   10568:	b	10490 <__gcc_personality_v0@@GCC_3.3.1+0x1f8>
   1056c:	stp	x29, x30, [sp, #-16]!
   10570:	mov	x29, sp
   10574:	adrp	x1, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
   10578:	add	x1, x1, #0x598
   1057c:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
   10580:	add	x0, x0, #0x410
   10584:	bl	2c30 <pthread_key_create@plt>
   10588:	cbnz	w0, 10594 <__gcc_personality_v0@@GCC_3.3.1+0x2fc>
   1058c:	ldp	x29, x30, [sp], #16
   10590:	ret
   10594:	bl	2c50 <abort@plt>
   10598:	stp	x29, x30, [sp, #-48]!
   1059c:	mov	x29, sp
   105a0:	stp	x19, x20, [sp, #16]
   105a4:	str	x21, [sp, #32]
   105a8:	mov	x20, x0
   105ac:	ldr	x21, [x0]
   105b0:	cbz	x21, 105e0 <__gcc_personality_v0@@GCC_3.3.1+0x348>
   105b4:	mov	x19, #0x1                   	// #1
   105b8:	b	105d4 <__gcc_personality_v0@@GCC_3.3.1+0x33c>
   105bc:	ldur	x0, [x1, #-8]
   105c0:	bl	2cc0 <free@plt>
   105c4:	add	x1, x19, #0x1
   105c8:	cmp	x19, x21
   105cc:	b.eq	105e0 <__gcc_personality_v0@@GCC_3.3.1+0x348>  // b.none
   105d0:	mov	x19, x1
   105d4:	ldr	x1, [x20, x19, lsl #3]
   105d8:	cbnz	x1, 105bc <__gcc_personality_v0@@GCC_3.3.1+0x324>
   105dc:	b	105c4 <__gcc_personality_v0@@GCC_3.3.1+0x32c>
   105e0:	mov	x0, x20
   105e4:	bl	2cc0 <free@plt>
   105e8:	ldp	x19, x20, [sp, #16]
   105ec:	ldr	x21, [sp, #32]
   105f0:	ldp	x29, x30, [sp], #48
   105f4:	ret
   105f8:	stp	x29, x30, [sp, #-48]!
   105fc:	mov	x29, sp
   10600:	stp	x19, x20, [sp, #16]
   10604:	str	x21, [sp, #32]
   10608:	mov	x20, x0
   1060c:	ldr	x21, [x0, #8]
   10610:	cmp	x21, #0x8
   10614:	b.hi	1065c <__gcc_personality_v0@@GCC_3.3.1+0x3c4>  // b.pmore
   10618:	ldr	x0, [x0]
   1061c:	add	x0, x0, #0x8
   10620:	bl	2b70 <malloc@plt>
   10624:	cbz	x0, 10658 <__gcc_personality_v0@@GCC_3.3.1+0x3c0>
   10628:	str	x0, [x0]
   1062c:	add	x19, x0, #0x8
   10630:	ldr	x1, [x20, #24]
   10634:	cbz	x1, 1068c <__gcc_personality_v0@@GCC_3.3.1+0x3f4>
   10638:	ldr	x2, [x20]
   1063c:	mov	x0, x19
   10640:	bl	2aa0 <memcpy@plt>
   10644:	mov	x0, x19
   10648:	ldp	x19, x20, [sp, #16]
   1064c:	ldr	x21, [sp, #32]
   10650:	ldp	x29, x30, [sp], #48
   10654:	ret
   10658:	bl	2c50 <abort@plt>
   1065c:	ldr	x0, [x0]
   10660:	add	x0, x21, x0
   10664:	add	x0, x0, #0x7
   10668:	bl	2b70 <malloc@plt>
   1066c:	cbz	x0, 10688 <__gcc_personality_v0@@GCC_3.3.1+0x3f0>
   10670:	add	x19, x21, #0x7
   10674:	add	x19, x0, x19
   10678:	neg	x21, x21
   1067c:	and	x19, x19, x21
   10680:	stur	x0, [x19, #-8]
   10684:	b	10630 <__gcc_personality_v0@@GCC_3.3.1+0x398>
   10688:	bl	2c50 <abort@plt>
   1068c:	ldr	x2, [x20]
   10690:	mov	w1, #0x0                   	// #0
   10694:	mov	x0, x19
   10698:	bl	2ba0 <memset@plt>
   1069c:	b	10644 <__gcc_personality_v0@@GCC_3.3.1+0x3ac>

00000000000106a0 <__emutls_get_address@@GCC_4.3.0>:
   106a0:	stp	x29, x30, [sp, #-64]!
   106a4:	mov	x29, sp
   106a8:	stp	x21, x22, [sp, #32]
   106ac:	mov	x21, x0
   106b0:	adrp	x1, 23000 <__emutls_register_common@@GCC_4.3.0+0x127e0>
   106b4:	ldr	x1, [x1, #4032]
   106b8:	cbz	x1, 10704 <__emutls_get_address@@GCC_4.3.0+0x64>
   106bc:	stp	x19, x20, [sp, #16]
   106c0:	add	x19, x0, #0x10
   106c4:	ldar	x22, [x19]
   106c8:	cbz	x22, 10724 <__emutls_get_address@@GCC_4.3.0+0x84>
   106cc:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
   106d0:	ldr	w0, [x0, #1040]
   106d4:	bl	2b80 <pthread_getspecific@plt>
   106d8:	mov	x19, x0
   106dc:	cbz	x0, 10774 <__emutls_get_address@@GCC_4.3.0+0xd4>
   106e0:	ldr	x20, [x0]
   106e4:	cmp	x20, x22
   106e8:	b.cc	107ac <__emutls_get_address@@GCC_4.3.0+0x10c>  // b.lo, b.ul, b.last
   106ec:	ldr	x0, [x19, x22, lsl #3]
   106f0:	cbz	x0, 1080c <__emutls_get_address@@GCC_4.3.0+0x16c>
   106f4:	ldp	x19, x20, [sp, #16]
   106f8:	ldp	x21, x22, [sp, #32]
   106fc:	ldp	x29, x30, [sp], #64
   10700:	ret
   10704:	ldr	x0, [x0, #16]
   10708:	cbz	x0, 10714 <__emutls_get_address@@GCC_4.3.0+0x74>
   1070c:	ldr	x0, [x21, #16]
   10710:	b	106f8 <__emutls_get_address@@GCC_4.3.0+0x58>
   10714:	mov	x0, x21
   10718:	bl	105f8 <__gcc_personality_v0@@GCC_3.3.1+0x360>
   1071c:	str	x0, [x21, #16]
   10720:	b	1070c <__emutls_get_address@@GCC_4.3.0+0x6c>
   10724:	adrp	x20, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
   10728:	add	x20, x20, #0x410
   1072c:	adrp	x1, 10000 <_Unwind_Find_FDE@@GCC_3.0+0x194>
   10730:	add	x1, x1, #0x56c
   10734:	add	x0, x20, #0x4
   10738:	bl	2c70 <pthread_once@plt>
   1073c:	add	x0, x20, #0x8
   10740:	bl	2d50 <pthread_mutex_lock@plt>
   10744:	ldr	x22, [x21, #16]
   10748:	cbz	x22, 10760 <__emutls_get_address@@GCC_4.3.0+0xc0>
   1074c:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
   10750:	add	x0, x0, #0x410
   10754:	add	x0, x0, #0x8
   10758:	bl	2d60 <pthread_mutex_unlock@plt>
   1075c:	b	106cc <__emutls_get_address@@GCC_4.3.0+0x2c>
   10760:	ldr	x22, [x20, #56]
   10764:	add	x22, x22, #0x1
   10768:	str	x22, [x20, #56]
   1076c:	stlr	x22, [x19]
   10770:	b	1074c <__emutls_get_address@@GCC_4.3.0+0xac>
   10774:	add	x20, x22, #0x20
   10778:	mov	x1, #0x8                   	// #8
   1077c:	add	x0, x22, #0x21
   10780:	bl	2be0 <calloc@plt>
   10784:	mov	x19, x0
   10788:	cbz	x0, 107a4 <__emutls_get_address@@GCC_4.3.0+0x104>
   1078c:	str	x20, [x0]
   10790:	mov	x1, x0
   10794:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
   10798:	ldr	w0, [x0, #1040]
   1079c:	bl	2ca0 <pthread_setspecific@plt>
   107a0:	b	106ec <__emutls_get_address@@GCC_4.3.0+0x4c>
   107a4:	str	x23, [sp, #48]
   107a8:	bl	2c50 <abort@plt>
   107ac:	str	x23, [sp, #48]
   107b0:	lsl	x23, x20, #1
   107b4:	add	x0, x22, #0x20
   107b8:	cmp	x22, x23
   107bc:	csel	x23, x0, x23, hi  // hi = pmore
   107c0:	add	x1, x23, #0x1
   107c4:	lsl	x1, x1, #3
   107c8:	mov	x0, x19
   107cc:	bl	2c10 <realloc@plt>
   107d0:	mov	x19, x0
   107d4:	cbz	x0, 10808 <__emutls_get_address@@GCC_4.3.0+0x168>
   107d8:	str	x23, [x0], #8
   107dc:	sub	x2, x23, x20
   107e0:	lsl	x2, x2, #3
   107e4:	mov	w1, #0x0                   	// #0
   107e8:	add	x0, x0, x20, lsl #3
   107ec:	bl	2ba0 <memset@plt>
   107f0:	mov	x1, x19
   107f4:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x137e0>
   107f8:	ldr	w0, [x0, #1040]
   107fc:	bl	2ca0 <pthread_setspecific@plt>
   10800:	ldr	x23, [sp, #48]
   10804:	b	106ec <__emutls_get_address@@GCC_4.3.0+0x4c>
   10808:	bl	2c50 <abort@plt>
   1080c:	mov	x0, x21
   10810:	bl	105f8 <__gcc_personality_v0@@GCC_3.3.1+0x360>
   10814:	str	x0, [x19, x22, lsl #3]
   10818:	ldp	x19, x20, [sp, #16]
   1081c:	b	106f8 <__emutls_get_address@@GCC_4.3.0+0x58>

0000000000010820 <__emutls_register_common@@GCC_4.3.0>:
   10820:	ldr	x4, [x0]
   10824:	cmp	x4, x1
   10828:	b.cs	10834 <__emutls_register_common@@GCC_4.3.0+0x14>  // b.hs, b.nlast
   1082c:	str	x1, [x0]
   10830:	str	xzr, [x0, #24]
   10834:	ldr	x4, [x0, #8]
   10838:	cmp	x4, x2
   1083c:	b.cs	10844 <__emutls_register_common@@GCC_4.3.0+0x24>  // b.hs, b.nlast
   10840:	str	x2, [x0, #8]
   10844:	cbz	x3, 10854 <__emutls_register_common@@GCC_4.3.0+0x34>
   10848:	ldr	x2, [x0]
   1084c:	cmp	x2, x1
   10850:	b.eq	10858 <__emutls_register_common@@GCC_4.3.0+0x38>  // b.none
   10854:	ret
   10858:	str	x3, [x0, #24]
   1085c:	b	10854 <__emutls_register_common@@GCC_4.3.0+0x34>

Disassembly of section .fini:

0000000000010860 <.fini>:
   10860:	stp	x29, x30, [sp, #-16]!
   10864:	mov	x29, sp
   10868:	ldp	x29, x30, [sp], #16
   1086c:	ret
