
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//macho.module_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_swap_bytes32>:
       0:	sub	sp, sp, #0x10
       4:	str	w0, [sp, #12]
       8:	ldr	w0, [sp, #12]
       c:	rev	w0, w0
      10:	add	sp, sp, #0x10
      14:	ret

0000000000000018 <grub_file_size>:
      18:	sub	sp, sp, #0x10
      1c:	str	x0, [sp, #8]
      20:	ldr	x0, [sp, #8]
      24:	ldr	x0, [x0, #64]
      28:	add	sp, sp, #0x10
      2c:	ret

0000000000000030 <grub_macho_close>:
      30:	stp	x29, x30, [sp, #-48]!
      34:	mov	x29, sp
      38:	str	x0, [sp, #24]
      3c:	ldr	x0, [sp, #24]
      40:	ldr	x0, [x0]
      44:	str	x0, [sp, #40]
      48:	ldr	x0, [sp, #24]
      4c:	ldr	x0, [x0, #48]
      50:	cmp	x0, #0x0
      54:	b.ne	64 <grub_macho_close+0x34>  // b.any
      58:	ldr	x0, [sp, #24]
      5c:	ldr	x0, [x0, #40]
      60:	bl	0 <grub_free>
      64:	ldr	x0, [sp, #24]
      68:	ldr	x0, [x0, #48]
      6c:	bl	0 <grub_free>
      70:	ldr	x0, [sp, #24]
      74:	ldr	x0, [x0, #120]
      78:	cmp	x0, #0x0
      7c:	b.ne	8c <grub_macho_close+0x5c>  // b.any
      80:	ldr	x0, [sp, #24]
      84:	ldr	x0, [x0, #112]
      88:	bl	0 <grub_free>
      8c:	ldr	x0, [sp, #24]
      90:	ldr	x0, [x0, #120]
      94:	bl	0 <grub_free>
      98:	ldr	x0, [sp, #24]
      9c:	bl	0 <grub_free>
      a0:	ldr	x0, [sp, #40]
      a4:	cmp	x0, #0x0
      a8:	b.eq	b4 <grub_macho_close+0x84>  // b.none
      ac:	ldr	x0, [sp, #40]
      b0:	bl	0 <grub_file_close>
      b4:	adrp	x0, 0 <grub_swap_bytes32>
      b8:	add	x0, x0, #0x0
      bc:	ldr	x0, [x0]
      c0:	ldr	w0, [x0]
      c4:	ldp	x29, x30, [sp], #48
      c8:	ret
      cc:	nop
	...

00000000000000d8 <grub_macho_file>:
      d8:	stp	x29, x30, [sp, #-128]!
      dc:	mov	x29, sp
      e0:	str	x19, [sp, #16]
      e4:	str	x0, [sp, #56]
      e8:	str	x1, [sp, #48]
      ec:	str	w2, [sp, #44]
      f0:	mov	x0, #0x98                  	// #152
      f4:	bl	0 <grub_malloc>
      f8:	str	x0, [sp, #112]
      fc:	ldr	x0, [sp, #112]
     100:	cmp	x0, #0x0
     104:	b.ne	110 <grub_macho_file+0x38>  // b.any
     108:	mov	x0, #0x0                   	// #0
     10c:	b	674 <grub_macho_file+0x59c>
     110:	ldr	x0, [sp, #112]
     114:	ldr	x1, [sp, #56]
     118:	str	x1, [x0]
     11c:	ldr	x0, [sp, #112]
     120:	mov	x1, #0xffffffffffffffff    	// #-1
     124:	str	x1, [x0, #8]
     128:	ldr	x0, [sp, #112]
     12c:	mov	x1, #0xffffffffffffffff    	// #-1
     130:	str	x1, [x0, #80]
     134:	ldr	x0, [sp, #112]
     138:	mov	x1, #0xffffffffffffffff    	// #-1
     13c:	str	x1, [x0, #16]
     140:	ldr	x0, [sp, #112]
     144:	mov	x1, #0xffffffffffffffff    	// #-1
     148:	str	x1, [x0, #88]
     14c:	ldr	x0, [sp, #112]
     150:	str	xzr, [x0, #40]
     154:	ldr	x0, [sp, #112]
     158:	str	xzr, [x0, #112]
     15c:	ldr	x0, [sp, #112]
     160:	str	xzr, [x0, #48]
     164:	ldr	x0, [sp, #112]
     168:	str	xzr, [x0, #120]
     16c:	ldr	x0, [sp, #112]
     170:	str	wzr, [x0, #56]
     174:	ldr	x0, [sp, #112]
     178:	str	wzr, [x0, #128]
     17c:	ldr	x0, [sp, #112]
     180:	ldr	x0, [x0]
     184:	mov	x1, #0x0                   	// #0
     188:	bl	0 <grub_file_seek>
     18c:	cmn	x0, #0x1
     190:	b.eq	63c <grub_macho_file+0x564>  // b.none
     194:	ldr	x0, [sp, #112]
     198:	ldr	x0, [x0]
     19c:	add	x1, sp, #0x40
     1a0:	mov	x2, #0x20                  	// #32
     1a4:	bl	0 <grub_file_read>
     1a8:	cmp	x0, #0x20
     1ac:	b.eq	1e4 <grub_macho_file+0x10c>  // b.none
     1b0:	adrp	x0, 0 <grub_swap_bytes32>
     1b4:	add	x0, x0, #0x0
     1b8:	ldr	x0, [x0]
     1bc:	ldr	w0, [x0]
     1c0:	cmp	w0, #0x0
     1c4:	b.ne	644 <grub_macho_file+0x56c>  // b.any
     1c8:	ldr	x2, [sp, #48]
     1cc:	adrp	x0, 0 <grub_swap_bytes32>
     1d0:	add	x0, x0, #0x0
     1d4:	ldr	x1, [x0]
     1d8:	mov	w0, #0x15                  	// #21
     1dc:	bl	0 <grub_error>
     1e0:	b	644 <grub_macho_file+0x56c>
     1e4:	ldr	w1, [sp, #64]
     1e8:	mov	w0, #0xfeca                	// #65226
     1ec:	movk	w0, #0xbeba, lsl #16
     1f0:	cmp	w1, w0
     1f4:	b.ne	4a4 <grub_macho_file+0x3cc>  // b.any
     1f8:	ldr	w0, [sp, #68]
     1fc:	bl	0 <grub_swap_bytes32>
     200:	str	w0, [sp, #108]
     204:	ldr	x0, [sp, #112]
     208:	ldr	x0, [x0]
     20c:	mov	x1, #0x8                   	// #8
     210:	bl	0 <grub_file_seek>
     214:	cmn	x0, #0x1
     218:	b.eq	64c <grub_macho_file+0x574>  // b.none
     21c:	ldrsw	x1, [sp, #108]
     220:	mov	x0, x1
     224:	lsl	x0, x0, #2
     228:	add	x0, x0, x1
     22c:	lsl	x0, x0, #2
     230:	bl	0 <grub_malloc>
     234:	str	x0, [sp, #96]
     238:	ldr	x0, [sp, #96]
     23c:	cmp	x0, #0x0
     240:	b.eq	654 <grub_macho_file+0x57c>  // b.none
     244:	ldr	x0, [sp, #112]
     248:	ldr	x3, [x0]
     24c:	ldrsw	x1, [sp, #108]
     250:	mov	x0, x1
     254:	lsl	x0, x0, #2
     258:	add	x0, x0, x1
     25c:	lsl	x0, x0, #2
     260:	mov	x2, x0
     264:	ldr	x1, [sp, #96]
     268:	mov	x0, x3
     26c:	bl	0 <grub_file_read>
     270:	mov	x2, x0
     274:	ldrsw	x1, [sp, #108]
     278:	mov	x0, x1
     27c:	lsl	x0, x0, #2
     280:	add	x0, x0, x1
     284:	lsl	x0, x0, #2
     288:	cmp	x2, x0
     28c:	b.eq	2cc <grub_macho_file+0x1f4>  // b.none
     290:	ldr	x0, [sp, #96]
     294:	bl	0 <grub_free>
     298:	adrp	x0, 0 <grub_swap_bytes32>
     29c:	add	x0, x0, #0x0
     2a0:	ldr	x0, [x0]
     2a4:	ldr	w0, [x0]
     2a8:	cmp	w0, #0x0
     2ac:	b.ne	65c <grub_macho_file+0x584>  // b.any
     2b0:	ldr	x2, [sp, #48]
     2b4:	adrp	x0, 0 <grub_swap_bytes32>
     2b8:	add	x0, x0, #0x0
     2bc:	ldr	x1, [x0]
     2c0:	mov	w0, #0x15                  	// #21
     2c4:	bl	0 <grub_error>
     2c8:	b	65c <grub_macho_file+0x584>
     2cc:	str	wzr, [sp, #124]
     2d0:	b	48c <grub_macho_file+0x3b4>
     2d4:	ldrsw	x1, [sp, #124]
     2d8:	mov	x0, x1
     2dc:	lsl	x0, x0, #2
     2e0:	add	x0, x0, x1
     2e4:	lsl	x0, x0, #2
     2e8:	mov	x1, x0
     2ec:	ldr	x0, [sp, #96]
     2f0:	add	x0, x0, x1
     2f4:	ldr	w1, [x0]
     2f8:	mov	w0, #0x7000000             	// #117440512
     2fc:	cmp	w1, w0
     300:	b.ne	3a8 <grub_macho_file+0x2d0>  // b.any
     304:	ldr	w0, [sp, #44]
     308:	cmp	w0, #0x0
     30c:	b.ne	3a8 <grub_macho_file+0x2d0>  // b.any
     310:	ldrsw	x1, [sp, #124]
     314:	mov	x0, x1
     318:	lsl	x0, x0, #2
     31c:	add	x0, x0, x1
     320:	lsl	x0, x0, #2
     324:	mov	x1, x0
     328:	ldr	x0, [sp, #96]
     32c:	add	x0, x0, x1
     330:	ldr	w0, [x0, #8]
     334:	bl	0 <grub_swap_bytes32>
     338:	mov	w1, w0
     33c:	ldr	x0, [sp, #112]
     340:	str	x1, [x0, #8]
     344:	ldrsw	x1, [sp, #124]
     348:	mov	x0, x1
     34c:	lsl	x0, x0, #2
     350:	add	x0, x0, x1
     354:	lsl	x0, x0, #2
     358:	mov	x1, x0
     35c:	ldr	x0, [sp, #96]
     360:	add	x0, x0, x1
     364:	ldr	w0, [x0, #8]
     368:	bl	0 <grub_swap_bytes32>
     36c:	mov	w19, w0
     370:	ldrsw	x1, [sp, #124]
     374:	mov	x0, x1
     378:	lsl	x0, x0, #2
     37c:	add	x0, x0, x1
     380:	lsl	x0, x0, #2
     384:	mov	x1, x0
     388:	ldr	x0, [sp, #96]
     38c:	add	x0, x0, x1
     390:	ldr	w0, [x0, #12]
     394:	bl	0 <grub_swap_bytes32>
     398:	add	w0, w19, w0
     39c:	mov	w1, w0
     3a0:	ldr	x0, [sp, #112]
     3a4:	str	x1, [x0, #16]
     3a8:	ldrsw	x1, [sp, #124]
     3ac:	mov	x0, x1
     3b0:	lsl	x0, x0, #2
     3b4:	add	x0, x0, x1
     3b8:	lsl	x0, x0, #2
     3bc:	mov	x1, x0
     3c0:	ldr	x0, [sp, #96]
     3c4:	add	x0, x0, x1
     3c8:	ldr	w1, [x0]
     3cc:	mov	w0, #0x1                   	// #1
     3d0:	movk	w0, #0x700, lsl #16
     3d4:	cmp	w1, w0
     3d8:	b.ne	480 <grub_macho_file+0x3a8>  // b.any
     3dc:	ldr	w0, [sp, #44]
     3e0:	cmp	w0, #0x0
     3e4:	b.eq	480 <grub_macho_file+0x3a8>  // b.none
     3e8:	ldrsw	x1, [sp, #124]
     3ec:	mov	x0, x1
     3f0:	lsl	x0, x0, #2
     3f4:	add	x0, x0, x1
     3f8:	lsl	x0, x0, #2
     3fc:	mov	x1, x0
     400:	ldr	x0, [sp, #96]
     404:	add	x0, x0, x1
     408:	ldr	w0, [x0, #8]
     40c:	bl	0 <grub_swap_bytes32>
     410:	mov	w1, w0
     414:	ldr	x0, [sp, #112]
     418:	str	x1, [x0, #80]
     41c:	ldrsw	x1, [sp, #124]
     420:	mov	x0, x1
     424:	lsl	x0, x0, #2
     428:	add	x0, x0, x1
     42c:	lsl	x0, x0, #2
     430:	mov	x1, x0
     434:	ldr	x0, [sp, #96]
     438:	add	x0, x0, x1
     43c:	ldr	w0, [x0, #8]
     440:	bl	0 <grub_swap_bytes32>
     444:	mov	w19, w0
     448:	ldrsw	x1, [sp, #124]
     44c:	mov	x0, x1
     450:	lsl	x0, x0, #2
     454:	add	x0, x0, x1
     458:	lsl	x0, x0, #2
     45c:	mov	x1, x0
     460:	ldr	x0, [sp, #96]
     464:	add	x0, x0, x1
     468:	ldr	w0, [x0, #12]
     46c:	bl	0 <grub_swap_bytes32>
     470:	add	w0, w19, w0
     474:	mov	w1, w0
     478:	ldr	x0, [sp, #112]
     47c:	str	x1, [x0, #88]
     480:	ldr	w0, [sp, #124]
     484:	add	w0, w0, #0x1
     488:	str	w0, [sp, #124]
     48c:	ldr	w1, [sp, #124]
     490:	ldr	w0, [sp, #108]
     494:	cmp	w1, w0
     498:	b.lt	2d4 <grub_macho_file+0x1fc>  // b.tstop
     49c:	ldr	x0, [sp, #96]
     4a0:	bl	0 <grub_free>
     4a4:	ldr	w1, [sp, #64]
     4a8:	mov	w0, #0xface                	// #64206
     4ac:	movk	w0, #0xfeed, lsl #16
     4b0:	cmp	w1, w0
     4b4:	b.ne	4e0 <grub_macho_file+0x408>  // b.any
     4b8:	ldr	w0, [sp, #44]
     4bc:	cmp	w0, #0x0
     4c0:	b.ne	4e0 <grub_macho_file+0x408>  // b.any
     4c4:	ldr	x0, [sp, #112]
     4c8:	str	xzr, [x0, #8]
     4cc:	ldr	x0, [sp, #56]
     4d0:	bl	18 <grub_file_size>
     4d4:	mov	x1, x0
     4d8:	ldr	x0, [sp, #112]
     4dc:	str	x1, [x0, #16]
     4e0:	ldr	w1, [sp, #64]
     4e4:	mov	w0, #0xfacf                	// #64207
     4e8:	movk	w0, #0xfeed, lsl #16
     4ec:	cmp	w1, w0
     4f0:	b.ne	51c <grub_macho_file+0x444>  // b.any
     4f4:	ldr	w0, [sp, #44]
     4f8:	cmp	w0, #0x0
     4fc:	b.eq	51c <grub_macho_file+0x444>  // b.none
     500:	ldr	x0, [sp, #112]
     504:	str	xzr, [x0, #80]
     508:	ldr	x0, [sp, #56]
     50c:	bl	18 <grub_file_size>
     510:	mov	x1, x0
     514:	ldr	x0, [sp, #112]
     518:	str	x1, [x0, #88]
     51c:	add	x3, sp, #0x40
     520:	mov	x2, #0x8                   	// #8
     524:	adrp	x0, 0 <grub_swap_bytes32>
     528:	add	x0, x0, #0x0
     52c:	ldr	x1, [x0]
     530:	mov	x0, x3
     534:	bl	0 <grub_memcmp>
     538:	cmp	w0, #0x0
     53c:	b.ne	568 <grub_macho_file+0x490>  // b.any
     540:	ldr	w0, [sp, #44]
     544:	cmp	w0, #0x0
     548:	b.ne	568 <grub_macho_file+0x490>  // b.any
     54c:	ldr	x0, [sp, #112]
     550:	str	xzr, [x0, #8]
     554:	ldr	x0, [sp, #56]
     558:	bl	18 <grub_file_size>
     55c:	mov	x1, x0
     560:	ldr	x0, [sp, #112]
     564:	str	x1, [x0, #16]
     568:	add	x3, sp, #0x40
     56c:	mov	x2, #0x8                   	// #8
     570:	adrp	x0, 0 <grub_swap_bytes32>
     574:	add	x0, x0, #0x0
     578:	ldr	x1, [x0]
     57c:	mov	x0, x3
     580:	bl	0 <grub_memcmp>
     584:	cmp	w0, #0x0
     588:	b.ne	5b4 <grub_macho_file+0x4dc>  // b.any
     58c:	ldr	w0, [sp, #44]
     590:	cmp	w0, #0x0
     594:	b.eq	5b4 <grub_macho_file+0x4dc>  // b.none
     598:	ldr	x0, [sp, #112]
     59c:	str	xzr, [x0, #80]
     5a0:	ldr	x0, [sp, #56]
     5a4:	bl	18 <grub_file_size>
     5a8:	mov	x1, x0
     5ac:	ldr	x0, [sp, #112]
     5b0:	str	x1, [x0, #88]
     5b4:	ldr	x1, [sp, #48]
     5b8:	ldr	x0, [sp, #112]
     5bc:	bl	7b4 <grub_macho_parse32>
     5c0:	ldr	x1, [sp, #48]
     5c4:	ldr	x0, [sp, #112]
     5c8:	bl	1714 <grub_macho_parse64>
     5cc:	ldr	x0, [sp, #112]
     5d0:	ldr	x0, [x0, #8]
     5d4:	cmn	x0, #0x1
     5d8:	b.ne	600 <grub_macho_file+0x528>  // b.any
     5dc:	ldr	w0, [sp, #44]
     5e0:	cmp	w0, #0x0
     5e4:	b.ne	600 <grub_macho_file+0x528>  // b.any
     5e8:	adrp	x0, 0 <grub_swap_bytes32>
     5ec:	add	x0, x0, #0x0
     5f0:	ldr	x1, [x0]
     5f4:	mov	w0, #0x15                  	// #21
     5f8:	bl	0 <grub_error>
     5fc:	b	660 <grub_macho_file+0x588>
     600:	ldr	x0, [sp, #112]
     604:	ldr	x0, [x0, #80]
     608:	cmn	x0, #0x1
     60c:	b.ne	634 <grub_macho_file+0x55c>  // b.any
     610:	ldr	w0, [sp, #44]
     614:	cmp	w0, #0x0
     618:	b.eq	634 <grub_macho_file+0x55c>  // b.none
     61c:	adrp	x0, 0 <grub_swap_bytes32>
     620:	add	x0, x0, #0x0
     624:	ldr	x1, [x0]
     628:	mov	w0, #0x15                  	// #21
     62c:	bl	0 <grub_error>
     630:	b	660 <grub_macho_file+0x588>
     634:	ldr	x0, [sp, #112]
     638:	b	674 <grub_macho_file+0x59c>
     63c:	nop
     640:	b	660 <grub_macho_file+0x588>
     644:	nop
     648:	b	660 <grub_macho_file+0x588>
     64c:	nop
     650:	b	660 <grub_macho_file+0x588>
     654:	nop
     658:	b	660 <grub_macho_file+0x588>
     65c:	nop
     660:	ldr	x0, [sp, #112]
     664:	str	xzr, [x0]
     668:	ldr	x0, [sp, #112]
     66c:	bl	30 <grub_macho_close>
     670:	mov	x0, #0x0                   	// #0
     674:	ldr	x19, [sp, #16]
     678:	ldp	x29, x30, [sp], #128
     67c:	ret
	...

00000000000006a8 <grub_macho_open>:
     6a8:	stp	x29, x30, [sp, #-48]!
     6ac:	mov	x29, sp
     6b0:	str	x0, [sp, #24]
     6b4:	str	w1, [sp, #20]
     6b8:	str	w2, [sp, #16]
     6bc:	ldr	w1, [sp, #20]
     6c0:	ldr	x0, [sp, #24]
     6c4:	bl	0 <grub_file_open>
     6c8:	str	x0, [sp, #40]
     6cc:	ldr	x0, [sp, #40]
     6d0:	cmp	x0, #0x0
     6d4:	b.ne	6e0 <grub_macho_open+0x38>  // b.any
     6d8:	mov	x0, #0x0                   	// #0
     6dc:	b	70c <grub_macho_open+0x64>
     6e0:	ldr	w2, [sp, #16]
     6e4:	ldr	x1, [sp, #24]
     6e8:	ldr	x0, [sp, #40]
     6ec:	bl	d8 <grub_macho_file>
     6f0:	str	x0, [sp, #32]
     6f4:	ldr	x0, [sp, #32]
     6f8:	cmp	x0, #0x0
     6fc:	b.ne	708 <grub_macho_open+0x60>  // b.any
     700:	ldr	x0, [sp, #40]
     704:	bl	0 <grub_file_close>
     708:	ldr	x0, [sp, #32]
     70c:	ldp	x29, x30, [sp], #48
     710:	ret
     714:	nop

0000000000000718 <grub_swap_bytes32>:
     718:	sub	sp, sp, #0x10
     71c:	str	w0, [sp, #12]
     720:	ldr	w0, [sp, #12]
     724:	rev	w0, w0
     728:	add	sp, sp, #0x10
     72c:	ret

0000000000000730 <grub_memcpy>:
     730:	stp	x29, x30, [sp, #-48]!
     734:	mov	x29, sp
     738:	str	x0, [sp, #40]
     73c:	str	x1, [sp, #32]
     740:	str	x2, [sp, #24]
     744:	ldr	x2, [sp, #24]
     748:	ldr	x1, [sp, #32]
     74c:	ldr	x0, [sp, #40]
     750:	bl	0 <grub_memmove>
     754:	ldp	x29, x30, [sp], #48
     758:	ret

000000000000075c <grub_isdigit>:
     75c:	sub	sp, sp, #0x10
     760:	str	w0, [sp, #12]
     764:	ldr	w0, [sp, #12]
     768:	cmp	w0, #0x2f
     76c:	b.le	784 <grub_isdigit+0x28>
     770:	ldr	w0, [sp, #12]
     774:	cmp	w0, #0x39
     778:	b.gt	784 <grub_isdigit+0x28>
     77c:	mov	w0, #0x1                   	// #1
     780:	b	788 <grub_isdigit+0x2c>
     784:	mov	w0, #0x0                   	// #0
     788:	add	sp, sp, #0x10
     78c:	ret

0000000000000790 <grub_macho_contains_macho32>:
     790:	sub	sp, sp, #0x10
     794:	str	x0, [sp, #8]
     798:	ldr	x0, [sp, #8]
     79c:	ldr	x0, [x0, #8]
     7a0:	cmn	x0, #0x1
     7a4:	cset	w0, ne  // ne = any
     7a8:	and	w0, w0, #0xff
     7ac:	add	sp, sp, #0x10
     7b0:	ret

00000000000007b4 <grub_macho_parse32>:
     7b4:	stp	x29, x30, [sp, #-64]!
     7b8:	mov	x29, sp
     7bc:	str	x0, [sp, #24]
     7c0:	str	x1, [sp, #16]
     7c4:	ldr	x0, [sp, #24]
     7c8:	ldr	x0, [x0, #8]
     7cc:	cmn	x0, #0x1
     7d0:	b.eq	a08 <grub_macho_parse32+0x254>  // b.none
     7d4:	ldr	x0, [sp, #24]
     7d8:	ldr	x2, [x0]
     7dc:	ldr	x0, [sp, #24]
     7e0:	ldr	x0, [x0, #8]
     7e4:	mov	x1, x0
     7e8:	mov	x0, x2
     7ec:	bl	0 <grub_file_seek>
     7f0:	cmn	x0, #0x1
     7f4:	b.eq	814 <grub_macho_parse32+0x60>  // b.none
     7f8:	ldr	x0, [sp, #24]
     7fc:	ldr	x0, [x0]
     800:	add	x1, sp, #0x20
     804:	mov	x2, #0x1c                  	// #28
     808:	bl	0 <grub_file_read>
     80c:	cmp	x0, #0x1c
     810:	b.eq	854 <grub_macho_parse32+0xa0>  // b.none
     814:	adrp	x0, 0 <grub_swap_bytes32>
     818:	add	x0, x0, #0x0
     81c:	ldr	x0, [x0]
     820:	ldr	w0, [x0]
     824:	cmp	w0, #0x0
     828:	b.ne	844 <grub_macho_parse32+0x90>  // b.any
     82c:	ldr	x2, [sp, #16]
     830:	adrp	x0, 0 <grub_swap_bytes32>
     834:	add	x0, x0, #0x0
     838:	ldr	x1, [x0]
     83c:	mov	w0, #0x15                  	// #21
     840:	bl	0 <grub_error>
     844:	ldr	x0, [sp, #24]
     848:	mov	x1, #0xffffffffffffffff    	// #-1
     84c:	str	x1, [x0, #8]
     850:	b	a14 <grub_macho_parse32+0x260>
     854:	add	x3, sp, #0x20
     858:	mov	x2, #0x8                   	// #8
     85c:	adrp	x0, 0 <grub_swap_bytes32>
     860:	add	x0, x0, #0x0
     864:	ldr	x1, [x0]
     868:	mov	x0, x3
     86c:	bl	0 <grub_memcmp>
     870:	cmp	w0, #0x0
     874:	b.ne	8e8 <grub_macho_parse32+0x134>  // b.any
     878:	ldr	w0, [sp, #48]
     87c:	bl	718 <grub_swap_bytes32>
     880:	mov	w1, w0
     884:	ldr	x0, [sp, #24]
     888:	str	x1, [x0, #64]
     88c:	ldr	w0, [sp, #44]
     890:	bl	718 <grub_swap_bytes32>
     894:	mov	w1, w0
     898:	ldr	x0, [sp, #24]
     89c:	str	x1, [x0, #72]
     8a0:	ldr	x0, [sp, #24]
     8a4:	ldr	x0, [x0, #72]
     8a8:	cmp	x0, #0x1b
     8ac:	b.hi	8d8 <grub_macho_parse32+0x124>  // b.pmore
     8b0:	ldr	x2, [sp, #16]
     8b4:	adrp	x0, 0 <grub_swap_bytes32>
     8b8:	add	x0, x0, #0x0
     8bc:	ldr	x1, [x0]
     8c0:	mov	w0, #0x15                  	// #21
     8c4:	bl	0 <grub_error>
     8c8:	ldr	x0, [sp, #24]
     8cc:	mov	x1, #0xffffffffffffffff    	// #-1
     8d0:	str	x1, [x0, #8]
     8d4:	b	a14 <grub_macho_parse32+0x260>
     8d8:	ldr	x0, [sp, #24]
     8dc:	mov	w1, #0x1                   	// #1
     8e0:	str	w1, [x0, #56]
     8e4:	b	a14 <grub_macho_parse32+0x260>
     8e8:	ldr	w1, [sp, #32]
     8ec:	mov	w0, #0xface                	// #64206
     8f0:	movk	w0, #0xfeed, lsl #16
     8f4:	cmp	w1, w0
     8f8:	b.eq	920 <grub_macho_parse32+0x16c>  // b.none
     8fc:	adrp	x0, 0 <grub_swap_bytes32>
     900:	add	x0, x0, #0x0
     904:	ldr	x1, [x0]
     908:	mov	w0, #0x15                  	// #21
     90c:	bl	0 <grub_error>
     910:	ldr	x0, [sp, #24]
     914:	mov	x1, #0xffffffffffffffff    	// #-1
     918:	str	x1, [x0, #8]
     91c:	b	a14 <grub_macho_parse32+0x260>
     920:	ldr	w0, [sp, #48]
     924:	mov	w1, w0
     928:	ldr	x0, [sp, #24]
     92c:	str	w1, [x0, #24]
     930:	ldr	w0, [sp, #52]
     934:	mov	w1, w0
     938:	ldr	x0, [sp, #24]
     93c:	str	x1, [x0, #32]
     940:	ldr	x0, [sp, #24]
     944:	ldr	x0, [x0, #32]
     948:	bl	0 <grub_malloc>
     94c:	mov	x1, x0
     950:	ldr	x0, [sp, #24]
     954:	str	x1, [x0, #40]
     958:	ldr	x0, [sp, #24]
     95c:	ldr	x0, [x0, #40]
     960:	cmp	x0, #0x0
     964:	b.eq	a10 <grub_macho_parse32+0x25c>  // b.none
     968:	ldr	x0, [sp, #24]
     96c:	ldr	x2, [x0]
     970:	ldr	x0, [sp, #24]
     974:	ldr	x0, [x0, #8]
     978:	add	x0, x0, #0x1c
     97c:	mov	x1, x0
     980:	mov	x0, x2
     984:	bl	0 <grub_file_seek>
     988:	cmn	x0, #0x1
     98c:	b.eq	9c8 <grub_macho_parse32+0x214>  // b.none
     990:	ldr	x0, [sp, #24]
     994:	ldr	x3, [x0]
     998:	ldr	x0, [sp, #24]
     99c:	ldr	x1, [x0, #40]
     9a0:	ldr	x0, [sp, #24]
     9a4:	ldr	x0, [x0, #32]
     9a8:	mov	x2, x0
     9ac:	mov	x0, x3
     9b0:	bl	0 <grub_file_read>
     9b4:	mov	x1, x0
     9b8:	ldr	x0, [sp, #24]
     9bc:	ldr	x0, [x0, #32]
     9c0:	cmp	x1, x0
     9c4:	b.eq	a14 <grub_macho_parse32+0x260>  // b.none
     9c8:	adrp	x0, 0 <grub_swap_bytes32>
     9cc:	add	x0, x0, #0x0
     9d0:	ldr	x0, [x0]
     9d4:	ldr	w0, [x0]
     9d8:	cmp	w0, #0x0
     9dc:	b.ne	9f8 <grub_macho_parse32+0x244>  // b.any
     9e0:	ldr	x2, [sp, #16]
     9e4:	adrp	x0, 0 <grub_swap_bytes32>
     9e8:	add	x0, x0, #0x0
     9ec:	ldr	x1, [x0]
     9f0:	mov	w0, #0x15                  	// #21
     9f4:	bl	0 <grub_error>
     9f8:	ldr	x0, [sp, #24]
     9fc:	mov	x1, #0xffffffffffffffff    	// #-1
     a00:	str	x1, [x0, #8]
     a04:	b	a14 <grub_macho_parse32+0x260>
     a08:	nop
     a0c:	b	a14 <grub_macho_parse32+0x260>
     a10:	nop
     a14:	ldp	x29, x30, [sp], #64
     a18:	ret
     a1c:	nop
	...

0000000000000a40 <grub_macho_cmds_iterate>:
     a40:	stp	x29, x30, [sp, #-96]!
     a44:	mov	x29, sp
     a48:	str	x0, [sp, #40]
     a4c:	str	x1, [sp, #32]
     a50:	str	x2, [sp, #24]
     a54:	str	x3, [sp, #16]
     a58:	ldr	x0, [sp, #40]
     a5c:	ldr	w0, [x0, #56]
     a60:	cmp	w0, #0x0
     a64:	b.eq	d38 <grub_macho_cmds_iterate+0x2f8>  // b.none
     a68:	ldr	x0, [sp, #40]
     a6c:	ldr	x0, [x0, #48]
     a70:	cmp	x0, #0x0
     a74:	b.ne	d38 <grub_macho_cmds_iterate+0x2f8>  // b.any
     a78:	ldr	x0, [sp, #40]
     a7c:	ldr	x0, [x0, #72]
     a80:	bl	0 <grub_malloc>
     a84:	mov	x1, x0
     a88:	ldr	x0, [sp, #40]
     a8c:	str	x1, [x0, #48]
     a90:	ldr	x0, [sp, #40]
     a94:	ldr	x0, [x0, #48]
     a98:	cmp	x0, #0x0
     a9c:	b.ne	ab4 <grub_macho_cmds_iterate+0x74>  // b.any
     aa0:	adrp	x0, 0 <grub_swap_bytes32>
     aa4:	add	x0, x0, #0x0
     aa8:	ldr	x0, [x0]
     aac:	ldr	w0, [x0]
     ab0:	b	de8 <grub_macho_cmds_iterate+0x3a8>
     ab4:	ldr	x0, [sp, #40]
     ab8:	ldr	x0, [x0, #64]
     abc:	bl	0 <grub_malloc>
     ac0:	str	x0, [sp, #72]
     ac4:	ldr	x0, [sp, #72]
     ac8:	cmp	x0, #0x0
     acc:	b.ne	af8 <grub_macho_cmds_iterate+0xb8>  // b.any
     ad0:	ldr	x0, [sp, #40]
     ad4:	ldr	x0, [x0, #48]
     ad8:	bl	0 <grub_free>
     adc:	ldr	x0, [sp, #40]
     ae0:	str	xzr, [x0, #48]
     ae4:	adrp	x0, 0 <grub_swap_bytes32>
     ae8:	add	x0, x0, #0x0
     aec:	ldr	x0, [x0]
     af0:	ldr	w0, [x0]
     af4:	b	de8 <grub_macho_cmds_iterate+0x3a8>
     af8:	ldr	x0, [sp, #40]
     afc:	ldr	x2, [x0]
     b00:	ldr	x0, [sp, #40]
     b04:	ldr	x0, [x0, #8]
     b08:	add	x0, x0, #0x180
     b0c:	mov	x1, x0
     b10:	mov	x0, x2
     b14:	bl	0 <grub_file_seek>
     b18:	cmn	x0, #0x1
     b1c:	b.eq	b54 <grub_macho_cmds_iterate+0x114>  // b.none
     b20:	ldr	x0, [sp, #40]
     b24:	ldr	x3, [x0]
     b28:	ldr	x0, [sp, #40]
     b2c:	ldr	x0, [x0, #64]
     b30:	mov	x2, x0
     b34:	ldr	x1, [sp, #72]
     b38:	mov	x0, x3
     b3c:	bl	0 <grub_file_read>
     b40:	mov	x1, x0
     b44:	ldr	x0, [sp, #40]
     b48:	ldr	x0, [x0, #64]
     b4c:	cmp	x1, x0
     b50:	b.eq	bc0 <grub_macho_cmds_iterate+0x180>  // b.none
     b54:	adrp	x0, 0 <grub_swap_bytes32>
     b58:	add	x0, x0, #0x0
     b5c:	ldr	x0, [x0]
     b60:	ldr	w0, [x0]
     b64:	cmp	w0, #0x0
     b68:	b.ne	b84 <grub_macho_cmds_iterate+0x144>  // b.any
     b6c:	ldr	x2, [sp, #16]
     b70:	adrp	x0, 0 <grub_swap_bytes32>
     b74:	add	x0, x0, #0x0
     b78:	ldr	x1, [x0]
     b7c:	mov	w0, #0x15                  	// #21
     b80:	bl	0 <grub_error>
     b84:	ldr	x0, [sp, #72]
     b88:	bl	0 <grub_free>
     b8c:	ldr	x0, [sp, #40]
     b90:	ldr	x0, [x0, #48]
     b94:	bl	0 <grub_free>
     b98:	ldr	x0, [sp, #40]
     b9c:	str	xzr, [x0, #48]
     ba0:	ldr	x0, [sp, #40]
     ba4:	mov	x1, #0xffffffffffffffff    	// #-1
     ba8:	str	x1, [x0, #8]
     bac:	adrp	x0, 0 <grub_swap_bytes32>
     bb0:	add	x0, x0, #0x0
     bb4:	ldr	x0, [x0]
     bb8:	ldr	w0, [x0]
     bbc:	b	de8 <grub_macho_cmds_iterate+0x3a8>
     bc0:	ldr	x0, [sp, #40]
     bc4:	ldr	x4, [x0, #48]
     bc8:	ldr	x0, [sp, #40]
     bcc:	ldr	x1, [x0, #48]
     bd0:	ldr	x0, [sp, #40]
     bd4:	ldr	x0, [x0, #72]
     bd8:	add	x5, x1, x0
     bdc:	ldr	x0, [sp, #40]
     be0:	ldr	x0, [x0, #64]
     be4:	ldr	x1, [sp, #72]
     be8:	add	x0, x1, x0
     bec:	mov	x3, x0
     bf0:	ldr	x2, [sp, #72]
     bf4:	mov	x1, x5
     bf8:	mov	x0, x4
     bfc:	bl	25a8 <grub_decompress_lzss>
     c00:	mov	x1, x0
     c04:	ldr	x0, [sp, #40]
     c08:	ldr	x0, [x0, #72]
     c0c:	cmp	x1, x0
     c10:	b.eq	c80 <grub_macho_cmds_iterate+0x240>  // b.none
     c14:	adrp	x0, 0 <grub_swap_bytes32>
     c18:	add	x0, x0, #0x0
     c1c:	ldr	x0, [x0]
     c20:	ldr	w0, [x0]
     c24:	cmp	w0, #0x0
     c28:	b.ne	c44 <grub_macho_cmds_iterate+0x204>  // b.any
     c2c:	ldr	x2, [sp, #16]
     c30:	adrp	x0, 0 <grub_swap_bytes32>
     c34:	add	x0, x0, #0x0
     c38:	ldr	x1, [x0]
     c3c:	mov	w0, #0x15                  	// #21
     c40:	bl	0 <grub_error>
     c44:	ldr	x0, [sp, #72]
     c48:	bl	0 <grub_free>
     c4c:	ldr	x0, [sp, #40]
     c50:	ldr	x0, [x0, #48]
     c54:	bl	0 <grub_free>
     c58:	ldr	x0, [sp, #40]
     c5c:	str	xzr, [x0, #48]
     c60:	ldr	x0, [sp, #40]
     c64:	mov	x1, #0xffffffffffffffff    	// #-1
     c68:	str	x1, [x0, #8]
     c6c:	adrp	x0, 0 <grub_swap_bytes32>
     c70:	add	x0, x0, #0x0
     c74:	ldr	x0, [x0]
     c78:	ldr	w0, [x0]
     c7c:	b	de8 <grub_macho_cmds_iterate+0x3a8>
     c80:	ldr	x0, [sp, #72]
     c84:	bl	0 <grub_free>
     c88:	ldr	x0, [sp, #40]
     c8c:	ldr	x0, [x0, #48]
     c90:	str	x0, [sp, #64]
     c94:	ldr	x0, [sp, #64]
     c98:	ldr	w0, [x0, #16]
     c9c:	mov	w1, w0
     ca0:	ldr	x0, [sp, #40]
     ca4:	str	w1, [x0, #24]
     ca8:	ldr	x0, [sp, #64]
     cac:	ldr	w0, [x0, #20]
     cb0:	mov	w1, w0
     cb4:	ldr	x0, [sp, #40]
     cb8:	str	x1, [x0, #32]
     cbc:	ldr	x0, [sp, #40]
     cc0:	ldr	x0, [x0, #48]
     cc4:	add	x1, x0, #0x1c
     cc8:	ldr	x0, [sp, #40]
     ccc:	str	x1, [x0, #40]
     cd0:	ldr	x0, [sp, #40]
     cd4:	ldr	x0, [x0, #32]
     cd8:	add	x1, x0, #0x1c
     cdc:	ldr	x0, [sp, #40]
     ce0:	ldr	x0, [x0, #72]
     ce4:	cmp	x1, x0
     ce8:	b.cc	d38 <grub_macho_cmds_iterate+0x2f8>  // b.lo, b.ul, b.last
     cec:	ldr	x2, [sp, #16]
     cf0:	adrp	x0, 0 <grub_swap_bytes32>
     cf4:	add	x0, x0, #0x0
     cf8:	ldr	x1, [x0]
     cfc:	mov	w0, #0x15                  	// #21
     d00:	bl	0 <grub_error>
     d04:	ldr	x0, [sp, #40]
     d08:	ldr	x0, [x0, #48]
     d0c:	bl	0 <grub_free>
     d10:	ldr	x0, [sp, #40]
     d14:	str	xzr, [x0, #48]
     d18:	ldr	x0, [sp, #40]
     d1c:	mov	x1, #0xffffffffffffffff    	// #-1
     d20:	str	x1, [x0, #8]
     d24:	adrp	x0, 0 <grub_swap_bytes32>
     d28:	add	x0, x0, #0x0
     d2c:	ldr	x0, [x0]
     d30:	ldr	w0, [x0]
     d34:	b	de8 <grub_macho_cmds_iterate+0x3a8>
     d38:	ldr	x0, [sp, #40]
     d3c:	ldr	x0, [x0, #40]
     d40:	cmp	x0, #0x0
     d44:	b.ne	d60 <grub_macho_cmds_iterate+0x320>  // b.any
     d48:	adrp	x0, 0 <grub_swap_bytes32>
     d4c:	add	x0, x0, #0x0
     d50:	ldr	x1, [x0]
     d54:	mov	w0, #0x15                  	// #21
     d58:	bl	0 <grub_error>
     d5c:	b	de8 <grub_macho_cmds_iterate+0x3a8>
     d60:	ldr	x0, [sp, #40]
     d64:	ldr	x0, [x0, #40]
     d68:	str	x0, [sp, #88]
     d6c:	str	wzr, [sp, #84]
     d70:	b	dbc <grub_macho_cmds_iterate+0x37c>
     d74:	ldr	x0, [sp, #88]
     d78:	str	x0, [sp, #56]
     d7c:	ldr	x3, [sp, #32]
     d80:	ldr	x2, [sp, #24]
     d84:	ldr	x1, [sp, #56]
     d88:	ldr	x0, [sp, #40]
     d8c:	blr	x3
     d90:	cmp	w0, #0x0
     d94:	b.ne	dd4 <grub_macho_cmds_iterate+0x394>  // b.any
     d98:	ldr	x0, [sp, #56]
     d9c:	ldr	w0, [x0, #4]
     da0:	mov	w0, w0
     da4:	ldr	x1, [sp, #88]
     da8:	add	x0, x1, x0
     dac:	str	x0, [sp, #88]
     db0:	ldr	w0, [sp, #84]
     db4:	add	w0, w0, #0x1
     db8:	str	w0, [sp, #84]
     dbc:	ldr	x0, [sp, #40]
     dc0:	ldr	w0, [x0, #24]
     dc4:	ldr	w1, [sp, #84]
     dc8:	cmp	w1, w0
     dcc:	b.lt	d74 <grub_macho_cmds_iterate+0x334>  // b.tstop
     dd0:	b	dd8 <grub_macho_cmds_iterate+0x398>
     dd4:	nop
     dd8:	adrp	x0, 0 <grub_swap_bytes32>
     ddc:	add	x0, x0, #0x0
     de0:	ldr	x0, [x0]
     de4:	ldr	w0, [x0]
     de8:	ldp	x29, x30, [sp], #96
     dec:	ret
	...

0000000000000e08 <grub_macho_filesize32>:
     e08:	stp	x29, x30, [sp, #-32]!
     e0c:	mov	x29, sp
     e10:	str	x0, [sp, #24]
     e14:	ldr	x0, [sp, #24]
     e18:	bl	790 <grub_macho_contains_macho32>
     e1c:	cmp	w0, #0x0
     e20:	b.eq	e3c <grub_macho_filesize32+0x34>  // b.none
     e24:	ldr	x0, [sp, #24]
     e28:	ldr	x1, [x0, #16]
     e2c:	ldr	x0, [sp, #24]
     e30:	ldr	x0, [x0, #8]
     e34:	sub	x0, x1, x0
     e38:	b	e40 <grub_macho_filesize32+0x38>
     e3c:	mov	x0, #0x0                   	// #0
     e40:	ldp	x29, x30, [sp], #32
     e44:	ret

0000000000000e48 <grub_macho_readfile32>:
     e48:	stp	x29, x30, [sp, #-64]!
     e4c:	mov	x29, sp
     e50:	str	x0, [sp, #40]
     e54:	str	x1, [sp, #32]
     e58:	str	x2, [sp, #24]
     e5c:	ldr	x0, [sp, #40]
     e60:	bl	790 <grub_macho_contains_macho32>
     e64:	cmp	w0, #0x0
     e68:	b.ne	e84 <grub_macho_readfile32+0x3c>  // b.any
     e6c:	adrp	x0, 0 <grub_swap_bytes32>
     e70:	add	x0, x0, #0x0
     e74:	ldr	x1, [x0]
     e78:	mov	w0, #0x15                  	// #21
     e7c:	bl	0 <grub_error>
     e80:	b	f54 <grub_macho_readfile32+0x10c>
     e84:	ldr	x0, [sp, #40]
     e88:	ldr	x2, [x0]
     e8c:	ldr	x0, [sp, #40]
     e90:	ldr	x0, [x0, #8]
     e94:	mov	x1, x0
     e98:	mov	x0, x2
     e9c:	bl	0 <grub_file_seek>
     ea0:	cmn	x0, #0x1
     ea4:	b.ne	ebc <grub_macho_readfile32+0x74>  // b.any
     ea8:	adrp	x0, 0 <grub_swap_bytes32>
     eac:	add	x0, x0, #0x0
     eb0:	ldr	x0, [x0]
     eb4:	ldr	w0, [x0]
     eb8:	b	f54 <grub_macho_readfile32+0x10c>
     ebc:	ldr	x0, [sp, #40]
     ec0:	ldr	x3, [x0]
     ec4:	ldr	x0, [sp, #40]
     ec8:	ldr	x1, [x0, #16]
     ecc:	ldr	x0, [sp, #40]
     ed0:	ldr	x0, [x0, #8]
     ed4:	sub	x0, x1, x0
     ed8:	mov	x2, x0
     edc:	ldr	x1, [sp, #24]
     ee0:	mov	x0, x3
     ee4:	bl	0 <grub_file_read>
     ee8:	str	x0, [sp, #56]
     eec:	ldr	x0, [sp, #40]
     ef0:	ldr	x1, [x0, #16]
     ef4:	ldr	x0, [sp, #40]
     ef8:	ldr	x0, [x0, #8]
     efc:	sub	x0, x1, x0
     f00:	ldr	x1, [sp, #56]
     f04:	cmp	x1, x0
     f08:	b.eq	f50 <grub_macho_readfile32+0x108>  // b.none
     f0c:	adrp	x0, 0 <grub_swap_bytes32>
     f10:	add	x0, x0, #0x0
     f14:	ldr	x0, [x0]
     f18:	ldr	w0, [x0]
     f1c:	cmp	w0, #0x0
     f20:	b.ne	f3c <grub_macho_readfile32+0xf4>  // b.any
     f24:	ldr	x2, [sp, #32]
     f28:	adrp	x0, 0 <grub_swap_bytes32>
     f2c:	add	x0, x0, #0x0
     f30:	ldr	x1, [x0]
     f34:	mov	w0, #0x15                  	// #21
     f38:	bl	0 <grub_error>
     f3c:	adrp	x0, 0 <grub_swap_bytes32>
     f40:	add	x0, x0, #0x0
     f44:	ldr	x0, [x0]
     f48:	ldr	w0, [x0]
     f4c:	b	f54 <grub_macho_readfile32+0x10c>
     f50:	mov	w0, #0x0                   	// #0
     f54:	ldp	x29, x30, [sp], #64
     f58:	ret
     f5c:	nop
	...

0000000000000f78 <calcsize>:
     f78:	sub	sp, sp, #0x30
     f7c:	str	x0, [sp, #24]
     f80:	str	x1, [sp, #16]
     f84:	str	x2, [sp, #8]
     f88:	ldr	x0, [sp, #16]
     f8c:	str	x0, [sp, #40]
     f90:	ldr	x0, [sp, #8]
     f94:	str	x0, [sp, #32]
     f98:	ldr	x0, [sp, #40]
     f9c:	ldr	w0, [x0]
     fa0:	cmp	w0, #0x1
     fa4:	b.eq	fb0 <calcsize+0x38>  // b.none
     fa8:	mov	w0, #0x0                   	// #0
     fac:	b	1084 <calcsize+0x10c>
     fb0:	ldr	x0, [sp, #40]
     fb4:	ldr	w0, [x0, #28]
     fb8:	cmp	w0, #0x0
     fbc:	b.ne	fc8 <calcsize+0x50>  // b.any
     fc0:	mov	w0, #0x0                   	// #0
     fc4:	b	1084 <calcsize+0x10c>
     fc8:	ldr	x0, [sp, #40]
     fcc:	ldr	w0, [x0, #36]
     fd0:	cmp	w0, #0x0
     fd4:	b.ne	ff4 <calcsize+0x7c>  // b.any
     fd8:	ldr	x0, [sp, #32]
     fdc:	ldr	w0, [x0]
     fe0:	and	w0, w0, #0x1
     fe4:	cmp	w0, #0x0
     fe8:	b.eq	ff4 <calcsize+0x7c>  // b.none
     fec:	mov	w0, #0x0                   	// #0
     ff0:	b	1084 <calcsize+0x10c>
     ff4:	ldr	x0, [sp, #32]
     ff8:	ldr	w0, [x0, #4]
     ffc:	add	w1, w0, #0x1
    1000:	ldr	x0, [sp, #32]
    1004:	str	w1, [x0, #4]
    1008:	ldr	x0, [sp, #40]
    100c:	ldr	w1, [x0, #24]
    1010:	ldr	x0, [sp, #32]
    1014:	ldr	x0, [x0, #8]
    1018:	ldr	w0, [x0]
    101c:	cmp	w1, w0
    1020:	b.cs	1038 <calcsize+0xc0>  // b.hs, b.nlast
    1024:	ldr	x0, [sp, #32]
    1028:	ldr	x0, [x0, #8]
    102c:	ldr	x1, [sp, #40]
    1030:	ldr	w1, [x1, #24]
    1034:	str	w1, [x0]
    1038:	ldr	x0, [sp, #40]
    103c:	ldr	w1, [x0, #24]
    1040:	ldr	x0, [sp, #40]
    1044:	ldr	w0, [x0, #28]
    1048:	add	w1, w1, w0
    104c:	ldr	x0, [sp, #32]
    1050:	ldr	x0, [x0, #16]
    1054:	ldr	w0, [x0]
    1058:	cmp	w1, w0
    105c:	b.ls	1080 <calcsize+0x108>  // b.plast
    1060:	ldr	x0, [sp, #40]
    1064:	ldr	w2, [x0, #24]
    1068:	ldr	x0, [sp, #40]
    106c:	ldr	w1, [x0, #28]
    1070:	ldr	x0, [sp, #32]
    1074:	ldr	x0, [x0, #16]
    1078:	add	w1, w2, w1
    107c:	str	w1, [x0]
    1080:	mov	w0, #0x0                   	// #0
    1084:	add	sp, sp, #0x30
    1088:	ret

000000000000108c <grub_macho_size32>:
    108c:	stp	x29, x30, [sp, #-96]!
    1090:	mov	x29, sp
    1094:	str	x0, [sp, #56]
    1098:	str	x1, [sp, #48]
    109c:	str	x2, [sp, #40]
    10a0:	str	w3, [sp, #36]
    10a4:	str	x4, [sp, #24]
    10a8:	ldr	w0, [sp, #36]
    10ac:	str	w0, [sp, #72]
    10b0:	str	wzr, [sp, #76]
    10b4:	ldr	x0, [sp, #48]
    10b8:	str	x0, [sp, #80]
    10bc:	ldr	x0, [sp, #40]
    10c0:	str	x0, [sp, #88]
    10c4:	ldr	x0, [sp, #48]
    10c8:	mov	w1, #0xffffffff            	// #-1
    10cc:	str	w1, [x0]
    10d0:	ldr	x0, [sp, #40]
    10d4:	str	wzr, [x0]
    10d8:	add	x0, sp, #0x48
    10dc:	ldr	x3, [sp, #24]
    10e0:	mov	x2, x0
    10e4:	adrp	x0, 0 <grub_swap_bytes32>
    10e8:	add	x0, x0, #0x0
    10ec:	ldr	x1, [x0]
    10f0:	ldr	x0, [sp, #56]
    10f4:	bl	a40 <grub_macho_cmds_iterate>
    10f8:	ldr	w0, [sp, #76]
    10fc:	cmp	w0, #0x0
    1100:	b.ne	111c <grub_macho_size32+0x90>  // b.any
    1104:	adrp	x0, 0 <grub_swap_bytes32>
    1108:	add	x0, x0, #0x0
    110c:	ldr	x1, [x0]
    1110:	mov	w0, #0x15                  	// #21
    1114:	bl	0 <grub_error>
    1118:	b	1150 <grub_macho_size32+0xc4>
    111c:	ldr	x0, [sp, #40]
    1120:	ldr	w1, [x0]
    1124:	ldr	x0, [sp, #48]
    1128:	ldr	w0, [x0]
    112c:	cmp	w1, w0
    1130:	b.cs	114c <grub_macho_size32+0xc0>  // b.hs, b.nlast
    1134:	adrp	x0, 0 <grub_swap_bytes32>
    1138:	add	x0, x0, #0x0
    113c:	ldr	x1, [x0]
    1140:	mov	w0, #0x15                  	// #21
    1144:	bl	0 <grub_error>
    1148:	b	1150 <grub_macho_size32+0xc4>
    114c:	mov	w0, #0x0                   	// #0
    1150:	ldp	x29, x30, [sp], #96
    1154:	ret
	...

0000000000001170 <do_load>:
    1170:	stp	x29, x30, [sp, #-96]!
    1174:	mov	x29, sp
    1178:	str	x0, [sp, #40]
    117c:	str	x1, [sp, #32]
    1180:	str	x2, [sp, #24]
    1184:	ldr	x0, [sp, #32]
    1188:	str	x0, [sp, #72]
    118c:	ldr	x0, [sp, #24]
    1190:	str	x0, [sp, #64]
    1194:	ldr	x0, [sp, #72]
    1198:	ldr	w0, [x0]
    119c:	cmp	w0, #0x1
    11a0:	b.eq	11ac <do_load+0x3c>  // b.none
    11a4:	mov	w0, #0x0                   	// #0
    11a8:	b	1530 <do_load+0x3c0>
    11ac:	ldr	x0, [sp, #72]
    11b0:	ldr	w0, [x0, #36]
    11b4:	cmp	w0, #0x0
    11b8:	b.ne	11d8 <do_load+0x68>  // b.any
    11bc:	ldr	x0, [sp, #64]
    11c0:	ldr	w0, [x0]
    11c4:	and	w0, w0, #0x1
    11c8:	cmp	w0, #0x0
    11cc:	b.eq	11d8 <do_load+0x68>  // b.none
    11d0:	mov	w0, #0x0                   	// #0
    11d4:	b	1530 <do_load+0x3c0>
    11d8:	ldr	x0, [sp, #72]
    11dc:	ldr	w0, [x0, #28]
    11e0:	cmp	w0, #0x0
    11e4:	b.ne	11f0 <do_load+0x80>  // b.any
    11e8:	mov	w0, #0x0                   	// #0
    11ec:	b	1530 <do_load+0x3c0>
    11f0:	ldr	x0, [sp, #72]
    11f4:	ldr	w0, [x0, #36]
    11f8:	cmp	w0, #0x0
    11fc:	b.eq	14c4 <do_load+0x354>  // b.none
    1200:	ldr	x0, [sp, #72]
    1204:	ldr	w1, [x0, #28]
    1208:	ldr	x0, [sp, #72]
    120c:	ldr	w0, [x0, #36]
    1210:	cmp	w1, w0
    1214:	csel	w0, w1, w0, ls  // ls = plast
    1218:	mov	w0, w0
    121c:	str	x0, [sp, #56]
    1220:	ldr	x0, [sp, #40]
    1224:	ldr	x0, [x0, #48]
    1228:	cmp	x0, #0x0
    122c:	b.eq	12b0 <do_load+0x140>  // b.none
    1230:	ldr	x0, [sp, #72]
    1234:	ldr	w0, [x0, #32]
    1238:	mov	w1, w0
    123c:	ldr	x0, [sp, #56]
    1240:	add	x1, x1, x0
    1244:	ldr	x0, [sp, #40]
    1248:	ldr	x0, [x0, #72]
    124c:	cmp	x1, x0
    1250:	b.ls	1260 <do_load+0xf0>  // b.plast
    1254:	mov	x0, #0xffffffffffffffff    	// #-1
    1258:	str	x0, [sp, #88]
    125c:	b	1324 <do_load+0x1b4>
    1260:	ldr	x0, [sp, #56]
    1264:	str	x0, [sp, #88]
    1268:	ldr	x0, [sp, #64]
    126c:	ldr	x1, [x0, #8]
    1270:	ldr	x0, [sp, #72]
    1274:	ldr	w0, [x0, #24]
    1278:	mov	w0, w0
    127c:	add	x3, x1, x0
    1280:	ldr	x0, [sp, #40]
    1284:	ldr	x1, [x0, #48]
    1288:	ldr	x0, [sp, #72]
    128c:	ldr	w0, [x0, #32]
    1290:	mov	w0, w0
    1294:	add	x0, x1, x0
    1298:	ldr	x1, [sp, #88]
    129c:	mov	x2, x1
    12a0:	mov	x1, x0
    12a4:	mov	x0, x3
    12a8:	bl	730 <grub_memcpy>
    12ac:	b	1324 <do_load+0x1b4>
    12b0:	ldr	x0, [sp, #40]
    12b4:	ldr	x2, [x0]
    12b8:	ldr	x0, [sp, #72]
    12bc:	ldr	w0, [x0, #32]
    12c0:	mov	w1, w0
    12c4:	ldr	x0, [sp, #40]
    12c8:	ldr	x0, [x0, #8]
    12cc:	add	x0, x1, x0
    12d0:	mov	x1, x0
    12d4:	mov	x0, x2
    12d8:	bl	0 <grub_file_seek>
    12dc:	cmn	x0, #0x1
    12e0:	b.ne	12ec <do_load+0x17c>  // b.any
    12e4:	mov	w0, #0x1                   	// #1
    12e8:	b	1530 <do_load+0x3c0>
    12ec:	ldr	x0, [sp, #40]
    12f0:	ldr	x3, [x0]
    12f4:	ldr	x0, [sp, #64]
    12f8:	ldr	x1, [x0, #8]
    12fc:	ldr	x0, [sp, #72]
    1300:	ldr	w0, [x0, #24]
    1304:	mov	w0, w0
    1308:	add	x0, x1, x0
    130c:	ldr	x1, [sp, #56]
    1310:	mov	x2, x1
    1314:	mov	x1, x0
    1318:	mov	x0, x3
    131c:	bl	0 <grub_file_read>
    1320:	str	x0, [sp, #88]
    1324:	ldr	x1, [sp, #88]
    1328:	ldr	x0, [sp, #56]
    132c:	cmp	x1, x0
    1330:	b.eq	1374 <do_load+0x204>  // b.none
    1334:	adrp	x0, 0 <grub_swap_bytes32>
    1338:	add	x0, x0, #0x0
    133c:	ldr	x0, [x0]
    1340:	ldr	w0, [x0]
    1344:	cmp	w0, #0x0
    1348:	b.ne	136c <do_load+0x1fc>  // b.any
    134c:	ldr	x0, [sp, #64]
    1350:	ldr	x0, [x0, #16]
    1354:	mov	x2, x0
    1358:	adrp	x0, 0 <grub_swap_bytes32>
    135c:	add	x0, x0, #0x0
    1360:	ldr	x1, [x0]
    1364:	mov	w0, #0x15                  	// #21
    1368:	bl	0 <grub_error>
    136c:	mov	w0, #0x1                   	// #1
    1370:	b	1530 <do_load+0x3c0>
    1374:	ldr	x0, [sp, #64]
    1378:	ldr	x0, [x0, #24]
    137c:	cmp	x0, #0x0
    1380:	b.eq	14c4 <do_load+0x354>  // b.none
    1384:	ldr	x0, [sp, #64]
    1388:	ldr	x1, [x0, #8]
    138c:	ldr	x0, [sp, #72]
    1390:	ldr	w0, [x0, #24]
    1394:	mov	w0, w0
    1398:	add	x0, x1, x0
    139c:	str	x0, [sp, #80]
    13a0:	ldr	x0, [sp, #72]
    13a4:	ldr	w1, [x0, #36]
    13a8:	ldr	x0, [sp, #72]
    13ac:	ldr	w0, [x0, #28]
    13b0:	cmp	w1, w0
    13b4:	b.cs	13cc <do_load+0x25c>  // b.hs, b.nlast
    13b8:	ldr	x0, [sp, #72]
    13bc:	ldr	w0, [x0, #36]
    13c0:	mov	w0, w0
    13c4:	sub	x0, x0, #0x16
    13c8:	b	13dc <do_load+0x26c>
    13cc:	ldr	x0, [sp, #72]
    13d0:	ldr	w0, [x0, #28]
    13d4:	mov	w0, w0
    13d8:	sub	x0, x0, #0x16
    13dc:	ldr	x1, [sp, #80]
    13e0:	add	x0, x1, x0
    13e4:	str	x0, [sp, #48]
    13e8:	b	14ac <do_load+0x33c>
    13ec:	mov	x2, #0x16                  	// #22
    13f0:	adrp	x0, 0 <grub_swap_bytes32>
    13f4:	add	x0, x0, #0x0
    13f8:	ldr	x1, [x0]
    13fc:	ldr	x0, [sp, #80]
    1400:	bl	0 <grub_memcmp>
    1404:	cmp	w0, #0x0
    1408:	b.ne	14a0 <do_load+0x330>  // b.any
    140c:	ldr	x0, [sp, #80]
    1410:	add	x0, x0, #0x16
    1414:	str	x0, [sp, #80]
    1418:	ldr	x0, [sp, #64]
    141c:	ldr	x0, [x0, #24]
    1420:	str	wzr, [x0]
    1424:	ldr	x0, [sp, #48]
    1428:	add	x0, x0, #0x16
    142c:	str	x0, [sp, #48]
    1430:	b	1478 <do_load+0x308>
    1434:	ldr	x0, [sp, #80]
    1438:	add	x1, x0, #0x1
    143c:	str	x1, [sp, #80]
    1440:	ldrb	w0, [x0]
    1444:	sub	w2, w0, #0x30
    1448:	ldr	x0, [sp, #64]
    144c:	ldr	x0, [x0, #24]
    1450:	ldr	w1, [x0]
    1454:	mov	w0, w1
    1458:	lsl	w0, w0, #2
    145c:	add	w0, w0, w1
    1460:	lsl	w0, w0, #1
    1464:	mov	w1, w0
    1468:	ldr	x0, [sp, #64]
    146c:	ldr	x0, [x0, #24]
    1470:	add	w1, w2, w1
    1474:	str	w1, [x0]
    1478:	ldr	x1, [sp, #80]
    147c:	ldr	x0, [sp, #48]
    1480:	cmp	x1, x0
    1484:	b.cs	14c0 <do_load+0x350>  // b.hs, b.nlast
    1488:	ldr	x0, [sp, #80]
    148c:	ldrb	w0, [x0]
    1490:	bl	75c <grub_isdigit>
    1494:	cmp	w0, #0x0
    1498:	b.ne	1434 <do_load+0x2c4>  // b.any
    149c:	b	14c0 <do_load+0x350>
    14a0:	ldr	x0, [sp, #80]
    14a4:	add	x0, x0, #0x1
    14a8:	str	x0, [sp, #80]
    14ac:	ldr	x1, [sp, #80]
    14b0:	ldr	x0, [sp, #48]
    14b4:	cmp	x1, x0
    14b8:	b.cc	13ec <do_load+0x27c>  // b.lo, b.ul, b.last
    14bc:	b	14c4 <do_load+0x354>
    14c0:	nop
    14c4:	ldr	x0, [sp, #72]
    14c8:	ldr	w1, [x0, #36]
    14cc:	ldr	x0, [sp, #72]
    14d0:	ldr	w0, [x0, #28]
    14d4:	cmp	w1, w0
    14d8:	b.cs	152c <do_load+0x3bc>  // b.hs, b.nlast
    14dc:	ldr	x0, [sp, #64]
    14e0:	ldr	x1, [x0, #8]
    14e4:	ldr	x0, [sp, #72]
    14e8:	ldr	w0, [x0, #24]
    14ec:	mov	w2, w0
    14f0:	ldr	x0, [sp, #72]
    14f4:	ldr	w0, [x0, #36]
    14f8:	mov	w0, w0
    14fc:	add	x0, x2, x0
    1500:	add	x3, x1, x0
    1504:	ldr	x0, [sp, #72]
    1508:	ldr	w1, [x0, #28]
    150c:	ldr	x0, [sp, #72]
    1510:	ldr	w0, [x0, #36]
    1514:	sub	w0, w1, w0
    1518:	mov	w0, w0
    151c:	mov	x2, x0
    1520:	mov	w1, #0x0                   	// #0
    1524:	mov	x0, x3
    1528:	bl	0 <grub_memset>
    152c:	mov	w0, #0x0                   	// #0
    1530:	ldp	x29, x30, [sp], #96
    1534:	ret
	...

0000000000001550 <grub_macho_load32>:
    1550:	stp	x29, x30, [sp, #-96]!
    1554:	mov	x29, sp
    1558:	str	x0, [sp, #56]
    155c:	str	x1, [sp, #48]
    1560:	str	x2, [sp, #40]
    1564:	str	w3, [sp, #36]
    1568:	str	x4, [sp, #24]
    156c:	ldr	w0, [sp, #36]
    1570:	str	w0, [sp, #64]
    1574:	ldr	x0, [sp, #40]
    1578:	str	x0, [sp, #72]
    157c:	ldr	x0, [sp, #48]
    1580:	str	x0, [sp, #80]
    1584:	ldr	x0, [sp, #24]
    1588:	str	x0, [sp, #88]
    158c:	ldr	x0, [sp, #24]
    1590:	cmp	x0, #0x0
    1594:	b.eq	15a0 <grub_macho_load32+0x50>  // b.none
    1598:	ldr	x0, [sp, #24]
    159c:	str	wzr, [x0]
    15a0:	add	x0, sp, #0x40
    15a4:	ldr	x3, [sp, #48]
    15a8:	mov	x2, x0
    15ac:	adrp	x0, 0 <grub_swap_bytes32>
    15b0:	add	x0, x0, #0x0
    15b4:	ldr	x1, [x0]
    15b8:	ldr	x0, [sp, #56]
    15bc:	bl	a40 <grub_macho_cmds_iterate>
    15c0:	adrp	x0, 0 <grub_swap_bytes32>
    15c4:	add	x0, x0, #0x0
    15c8:	ldr	x0, [x0]
    15cc:	ldr	w0, [x0]
    15d0:	ldp	x29, x30, [sp], #96
    15d4:	ret
	...

00000000000015e8 <find_entry_point>:
    15e8:	sub	sp, sp, #0x30
    15ec:	str	x0, [sp, #24]
    15f0:	str	x1, [sp, #16]
    15f4:	str	x2, [sp, #8]
    15f8:	ldr	x0, [sp, #8]
    15fc:	str	x0, [sp, #40]
    1600:	ldr	x0, [sp, #16]
    1604:	ldr	w0, [x0]
    1608:	cmp	w0, #0x5
    160c:	b.ne	1620 <find_entry_point+0x38>  // b.any
    1610:	ldr	x0, [sp, #16]
    1614:	ldr	w1, [x0, #56]
    1618:	ldr	x0, [sp, #40]
    161c:	str	w1, [x0]
    1620:	mov	w0, #0x0                   	// #0
    1624:	add	sp, sp, #0x30
    1628:	ret

000000000000162c <grub_macho_get_entry_point32>:
    162c:	stp	x29, x30, [sp, #-48]!
    1630:	mov	x29, sp
    1634:	str	x0, [sp, #24]
    1638:	str	x1, [sp, #16]
    163c:	str	wzr, [sp, #44]
    1640:	add	x0, sp, #0x2c
    1644:	ldr	x3, [sp, #16]
    1648:	mov	x2, x0
    164c:	adrp	x0, 0 <grub_swap_bytes32>
    1650:	add	x0, x0, #0x0
    1654:	ldr	x1, [x0]
    1658:	ldr	x0, [sp, #24]
    165c:	bl	a40 <grub_macho_cmds_iterate>
    1660:	ldr	w0, [sp, #44]
    1664:	ldp	x29, x30, [sp], #48
    1668:	ret
    166c:	nop
	...

0000000000001678 <grub_swap_bytes32>:
    1678:	sub	sp, sp, #0x10
    167c:	str	w0, [sp, #12]
    1680:	ldr	w0, [sp, #12]
    1684:	rev	w0, w0
    1688:	add	sp, sp, #0x10
    168c:	ret

0000000000001690 <grub_memcpy>:
    1690:	stp	x29, x30, [sp, #-48]!
    1694:	mov	x29, sp
    1698:	str	x0, [sp, #40]
    169c:	str	x1, [sp, #32]
    16a0:	str	x2, [sp, #24]
    16a4:	ldr	x2, [sp, #24]
    16a8:	ldr	x1, [sp, #32]
    16ac:	ldr	x0, [sp, #40]
    16b0:	bl	0 <grub_memmove>
    16b4:	ldp	x29, x30, [sp], #48
    16b8:	ret

00000000000016bc <grub_isdigit>:
    16bc:	sub	sp, sp, #0x10
    16c0:	str	w0, [sp, #12]
    16c4:	ldr	w0, [sp, #12]
    16c8:	cmp	w0, #0x2f
    16cc:	b.le	16e4 <grub_isdigit+0x28>
    16d0:	ldr	w0, [sp, #12]
    16d4:	cmp	w0, #0x39
    16d8:	b.gt	16e4 <grub_isdigit+0x28>
    16dc:	mov	w0, #0x1                   	// #1
    16e0:	b	16e8 <grub_isdigit+0x2c>
    16e4:	mov	w0, #0x0                   	// #0
    16e8:	add	sp, sp, #0x10
    16ec:	ret

00000000000016f0 <grub_macho_contains_macho64>:
    16f0:	sub	sp, sp, #0x10
    16f4:	str	x0, [sp, #8]
    16f8:	ldr	x0, [sp, #8]
    16fc:	ldr	x0, [x0, #80]
    1700:	cmn	x0, #0x1
    1704:	cset	w0, ne  // ne = any
    1708:	and	w0, w0, #0xff
    170c:	add	sp, sp, #0x10
    1710:	ret

0000000000001714 <grub_macho_parse64>:
    1714:	stp	x29, x30, [sp, #-64]!
    1718:	mov	x29, sp
    171c:	str	x0, [sp, #24]
    1720:	str	x1, [sp, #16]
    1724:	ldr	x0, [sp, #24]
    1728:	ldr	x0, [x0, #80]
    172c:	cmn	x0, #0x1
    1730:	b.eq	1968 <grub_macho_parse64+0x254>  // b.none
    1734:	ldr	x0, [sp, #24]
    1738:	ldr	x2, [x0]
    173c:	ldr	x0, [sp, #24]
    1740:	ldr	x0, [x0, #80]
    1744:	mov	x1, x0
    1748:	mov	x0, x2
    174c:	bl	0 <grub_file_seek>
    1750:	cmn	x0, #0x1
    1754:	b.eq	1774 <grub_macho_parse64+0x60>  // b.none
    1758:	ldr	x0, [sp, #24]
    175c:	ldr	x0, [x0]
    1760:	add	x1, sp, #0x20
    1764:	mov	x2, #0x20                  	// #32
    1768:	bl	0 <grub_file_read>
    176c:	cmp	x0, #0x20
    1770:	b.eq	17b4 <grub_macho_parse64+0xa0>  // b.none
    1774:	adrp	x0, 0 <grub_swap_bytes32>
    1778:	add	x0, x0, #0x0
    177c:	ldr	x0, [x0]
    1780:	ldr	w0, [x0]
    1784:	cmp	w0, #0x0
    1788:	b.ne	17a4 <grub_macho_parse64+0x90>  // b.any
    178c:	ldr	x2, [sp, #16]
    1790:	adrp	x0, 0 <grub_swap_bytes32>
    1794:	add	x0, x0, #0x0
    1798:	ldr	x1, [x0]
    179c:	mov	w0, #0x15                  	// #21
    17a0:	bl	0 <grub_error>
    17a4:	ldr	x0, [sp, #24]
    17a8:	mov	x1, #0xffffffffffffffff    	// #-1
    17ac:	str	x1, [x0, #80]
    17b0:	b	1974 <grub_macho_parse64+0x260>
    17b4:	add	x3, sp, #0x20
    17b8:	mov	x2, #0x8                   	// #8
    17bc:	adrp	x0, 0 <grub_swap_bytes32>
    17c0:	add	x0, x0, #0x0
    17c4:	ldr	x1, [x0]
    17c8:	mov	x0, x3
    17cc:	bl	0 <grub_memcmp>
    17d0:	cmp	w0, #0x0
    17d4:	b.ne	1848 <grub_macho_parse64+0x134>  // b.any
    17d8:	ldr	w0, [sp, #48]
    17dc:	bl	1678 <grub_swap_bytes32>
    17e0:	mov	w1, w0
    17e4:	ldr	x0, [sp, #24]
    17e8:	str	x1, [x0, #136]
    17ec:	ldr	w0, [sp, #44]
    17f0:	bl	1678 <grub_swap_bytes32>
    17f4:	mov	w1, w0
    17f8:	ldr	x0, [sp, #24]
    17fc:	str	x1, [x0, #144]
    1800:	ldr	x0, [sp, #24]
    1804:	ldr	x0, [x0, #144]
    1808:	cmp	x0, #0x1f
    180c:	b.hi	1838 <grub_macho_parse64+0x124>  // b.pmore
    1810:	ldr	x2, [sp, #16]
    1814:	adrp	x0, 0 <grub_swap_bytes32>
    1818:	add	x0, x0, #0x0
    181c:	ldr	x1, [x0]
    1820:	mov	w0, #0x15                  	// #21
    1824:	bl	0 <grub_error>
    1828:	ldr	x0, [sp, #24]
    182c:	mov	x1, #0xffffffffffffffff    	// #-1
    1830:	str	x1, [x0, #80]
    1834:	b	1974 <grub_macho_parse64+0x260>
    1838:	ldr	x0, [sp, #24]
    183c:	mov	w1, #0x1                   	// #1
    1840:	str	w1, [x0, #128]
    1844:	b	1974 <grub_macho_parse64+0x260>
    1848:	ldr	w1, [sp, #32]
    184c:	mov	w0, #0xfacf                	// #64207
    1850:	movk	w0, #0xfeed, lsl #16
    1854:	cmp	w1, w0
    1858:	b.eq	1880 <grub_macho_parse64+0x16c>  // b.none
    185c:	adrp	x0, 0 <grub_swap_bytes32>
    1860:	add	x0, x0, #0x0
    1864:	ldr	x1, [x0]
    1868:	mov	w0, #0x15                  	// #21
    186c:	bl	0 <grub_error>
    1870:	ldr	x0, [sp, #24]
    1874:	mov	x1, #0xffffffffffffffff    	// #-1
    1878:	str	x1, [x0, #80]
    187c:	b	1974 <grub_macho_parse64+0x260>
    1880:	ldr	w0, [sp, #48]
    1884:	mov	w1, w0
    1888:	ldr	x0, [sp, #24]
    188c:	str	w1, [x0, #96]
    1890:	ldr	w0, [sp, #52]
    1894:	mov	w1, w0
    1898:	ldr	x0, [sp, #24]
    189c:	str	x1, [x0, #104]
    18a0:	ldr	x0, [sp, #24]
    18a4:	ldr	x0, [x0, #104]
    18a8:	bl	0 <grub_malloc>
    18ac:	mov	x1, x0
    18b0:	ldr	x0, [sp, #24]
    18b4:	str	x1, [x0, #112]
    18b8:	ldr	x0, [sp, #24]
    18bc:	ldr	x0, [x0, #112]
    18c0:	cmp	x0, #0x0
    18c4:	b.eq	1970 <grub_macho_parse64+0x25c>  // b.none
    18c8:	ldr	x0, [sp, #24]
    18cc:	ldr	x2, [x0]
    18d0:	ldr	x0, [sp, #24]
    18d4:	ldr	x0, [x0, #80]
    18d8:	add	x0, x0, #0x20
    18dc:	mov	x1, x0
    18e0:	mov	x0, x2
    18e4:	bl	0 <grub_file_seek>
    18e8:	cmn	x0, #0x1
    18ec:	b.eq	1928 <grub_macho_parse64+0x214>  // b.none
    18f0:	ldr	x0, [sp, #24]
    18f4:	ldr	x3, [x0]
    18f8:	ldr	x0, [sp, #24]
    18fc:	ldr	x1, [x0, #112]
    1900:	ldr	x0, [sp, #24]
    1904:	ldr	x0, [x0, #104]
    1908:	mov	x2, x0
    190c:	mov	x0, x3
    1910:	bl	0 <grub_file_read>
    1914:	mov	x1, x0
    1918:	ldr	x0, [sp, #24]
    191c:	ldr	x0, [x0, #104]
    1920:	cmp	x1, x0
    1924:	b.eq	1974 <grub_macho_parse64+0x260>  // b.none
    1928:	adrp	x0, 0 <grub_swap_bytes32>
    192c:	add	x0, x0, #0x0
    1930:	ldr	x0, [x0]
    1934:	ldr	w0, [x0]
    1938:	cmp	w0, #0x0
    193c:	b.ne	1958 <grub_macho_parse64+0x244>  // b.any
    1940:	ldr	x2, [sp, #16]
    1944:	adrp	x0, 0 <grub_swap_bytes32>
    1948:	add	x0, x0, #0x0
    194c:	ldr	x1, [x0]
    1950:	mov	w0, #0x15                  	// #21
    1954:	bl	0 <grub_error>
    1958:	ldr	x0, [sp, #24]
    195c:	mov	x1, #0xffffffffffffffff    	// #-1
    1960:	str	x1, [x0, #80]
    1964:	b	1974 <grub_macho_parse64+0x260>
    1968:	nop
    196c:	b	1974 <grub_macho_parse64+0x260>
    1970:	nop
    1974:	ldp	x29, x30, [sp], #64
    1978:	ret
    197c:	nop
	...

00000000000019a0 <grub_macho_cmds_iterate>:
    19a0:	stp	x29, x30, [sp, #-96]!
    19a4:	mov	x29, sp
    19a8:	str	x0, [sp, #40]
    19ac:	str	x1, [sp, #32]
    19b0:	str	x2, [sp, #24]
    19b4:	str	x3, [sp, #16]
    19b8:	ldr	x0, [sp, #40]
    19bc:	ldr	w0, [x0, #128]
    19c0:	cmp	w0, #0x0
    19c4:	b.eq	1c98 <grub_macho_cmds_iterate+0x2f8>  // b.none
    19c8:	ldr	x0, [sp, #40]
    19cc:	ldr	x0, [x0, #120]
    19d0:	cmp	x0, #0x0
    19d4:	b.ne	1c98 <grub_macho_cmds_iterate+0x2f8>  // b.any
    19d8:	ldr	x0, [sp, #40]
    19dc:	ldr	x0, [x0, #144]
    19e0:	bl	0 <grub_malloc>
    19e4:	mov	x1, x0
    19e8:	ldr	x0, [sp, #40]
    19ec:	str	x1, [x0, #120]
    19f0:	ldr	x0, [sp, #40]
    19f4:	ldr	x0, [x0, #120]
    19f8:	cmp	x0, #0x0
    19fc:	b.ne	1a14 <grub_macho_cmds_iterate+0x74>  // b.any
    1a00:	adrp	x0, 0 <grub_swap_bytes32>
    1a04:	add	x0, x0, #0x0
    1a08:	ldr	x0, [x0]
    1a0c:	ldr	w0, [x0]
    1a10:	b	1d48 <grub_macho_cmds_iterate+0x3a8>
    1a14:	ldr	x0, [sp, #40]
    1a18:	ldr	x0, [x0, #136]
    1a1c:	bl	0 <grub_malloc>
    1a20:	str	x0, [sp, #72]
    1a24:	ldr	x0, [sp, #72]
    1a28:	cmp	x0, #0x0
    1a2c:	b.ne	1a58 <grub_macho_cmds_iterate+0xb8>  // b.any
    1a30:	ldr	x0, [sp, #40]
    1a34:	ldr	x0, [x0, #120]
    1a38:	bl	0 <grub_free>
    1a3c:	ldr	x0, [sp, #40]
    1a40:	str	xzr, [x0, #120]
    1a44:	adrp	x0, 0 <grub_swap_bytes32>
    1a48:	add	x0, x0, #0x0
    1a4c:	ldr	x0, [x0]
    1a50:	ldr	w0, [x0]
    1a54:	b	1d48 <grub_macho_cmds_iterate+0x3a8>
    1a58:	ldr	x0, [sp, #40]
    1a5c:	ldr	x2, [x0]
    1a60:	ldr	x0, [sp, #40]
    1a64:	ldr	x0, [x0, #80]
    1a68:	add	x0, x0, #0x180
    1a6c:	mov	x1, x0
    1a70:	mov	x0, x2
    1a74:	bl	0 <grub_file_seek>
    1a78:	cmn	x0, #0x1
    1a7c:	b.eq	1ab4 <grub_macho_cmds_iterate+0x114>  // b.none
    1a80:	ldr	x0, [sp, #40]
    1a84:	ldr	x3, [x0]
    1a88:	ldr	x0, [sp, #40]
    1a8c:	ldr	x0, [x0, #136]
    1a90:	mov	x2, x0
    1a94:	ldr	x1, [sp, #72]
    1a98:	mov	x0, x3
    1a9c:	bl	0 <grub_file_read>
    1aa0:	mov	x1, x0
    1aa4:	ldr	x0, [sp, #40]
    1aa8:	ldr	x0, [x0, #136]
    1aac:	cmp	x1, x0
    1ab0:	b.eq	1b20 <grub_macho_cmds_iterate+0x180>  // b.none
    1ab4:	adrp	x0, 0 <grub_swap_bytes32>
    1ab8:	add	x0, x0, #0x0
    1abc:	ldr	x0, [x0]
    1ac0:	ldr	w0, [x0]
    1ac4:	cmp	w0, #0x0
    1ac8:	b.ne	1ae4 <grub_macho_cmds_iterate+0x144>  // b.any
    1acc:	ldr	x2, [sp, #16]
    1ad0:	adrp	x0, 0 <grub_swap_bytes32>
    1ad4:	add	x0, x0, #0x0
    1ad8:	ldr	x1, [x0]
    1adc:	mov	w0, #0x15                  	// #21
    1ae0:	bl	0 <grub_error>
    1ae4:	ldr	x0, [sp, #72]
    1ae8:	bl	0 <grub_free>
    1aec:	ldr	x0, [sp, #40]
    1af0:	ldr	x0, [x0, #120]
    1af4:	bl	0 <grub_free>
    1af8:	ldr	x0, [sp, #40]
    1afc:	str	xzr, [x0, #120]
    1b00:	ldr	x0, [sp, #40]
    1b04:	mov	x1, #0xffffffffffffffff    	// #-1
    1b08:	str	x1, [x0, #80]
    1b0c:	adrp	x0, 0 <grub_swap_bytes32>
    1b10:	add	x0, x0, #0x0
    1b14:	ldr	x0, [x0]
    1b18:	ldr	w0, [x0]
    1b1c:	b	1d48 <grub_macho_cmds_iterate+0x3a8>
    1b20:	ldr	x0, [sp, #40]
    1b24:	ldr	x4, [x0, #120]
    1b28:	ldr	x0, [sp, #40]
    1b2c:	ldr	x1, [x0, #120]
    1b30:	ldr	x0, [sp, #40]
    1b34:	ldr	x0, [x0, #144]
    1b38:	add	x5, x1, x0
    1b3c:	ldr	x0, [sp, #40]
    1b40:	ldr	x0, [x0, #136]
    1b44:	ldr	x1, [sp, #72]
    1b48:	add	x0, x1, x0
    1b4c:	mov	x3, x0
    1b50:	ldr	x2, [sp, #72]
    1b54:	mov	x1, x5
    1b58:	mov	x0, x4
    1b5c:	bl	25a8 <grub_decompress_lzss>
    1b60:	mov	x1, x0
    1b64:	ldr	x0, [sp, #40]
    1b68:	ldr	x0, [x0, #144]
    1b6c:	cmp	x1, x0
    1b70:	b.eq	1be0 <grub_macho_cmds_iterate+0x240>  // b.none
    1b74:	adrp	x0, 0 <grub_swap_bytes32>
    1b78:	add	x0, x0, #0x0
    1b7c:	ldr	x0, [x0]
    1b80:	ldr	w0, [x0]
    1b84:	cmp	w0, #0x0
    1b88:	b.ne	1ba4 <grub_macho_cmds_iterate+0x204>  // b.any
    1b8c:	ldr	x2, [sp, #16]
    1b90:	adrp	x0, 0 <grub_swap_bytes32>
    1b94:	add	x0, x0, #0x0
    1b98:	ldr	x1, [x0]
    1b9c:	mov	w0, #0x15                  	// #21
    1ba0:	bl	0 <grub_error>
    1ba4:	ldr	x0, [sp, #72]
    1ba8:	bl	0 <grub_free>
    1bac:	ldr	x0, [sp, #40]
    1bb0:	ldr	x0, [x0, #120]
    1bb4:	bl	0 <grub_free>
    1bb8:	ldr	x0, [sp, #40]
    1bbc:	str	xzr, [x0, #120]
    1bc0:	ldr	x0, [sp, #40]
    1bc4:	mov	x1, #0xffffffffffffffff    	// #-1
    1bc8:	str	x1, [x0, #80]
    1bcc:	adrp	x0, 0 <grub_swap_bytes32>
    1bd0:	add	x0, x0, #0x0
    1bd4:	ldr	x0, [x0]
    1bd8:	ldr	w0, [x0]
    1bdc:	b	1d48 <grub_macho_cmds_iterate+0x3a8>
    1be0:	ldr	x0, [sp, #72]
    1be4:	bl	0 <grub_free>
    1be8:	ldr	x0, [sp, #40]
    1bec:	ldr	x0, [x0, #120]
    1bf0:	str	x0, [sp, #64]
    1bf4:	ldr	x0, [sp, #64]
    1bf8:	ldr	w0, [x0, #16]
    1bfc:	mov	w1, w0
    1c00:	ldr	x0, [sp, #40]
    1c04:	str	w1, [x0, #96]
    1c08:	ldr	x0, [sp, #64]
    1c0c:	ldr	w0, [x0, #20]
    1c10:	mov	w1, w0
    1c14:	ldr	x0, [sp, #40]
    1c18:	str	x1, [x0, #104]
    1c1c:	ldr	x0, [sp, #40]
    1c20:	ldr	x0, [x0, #120]
    1c24:	add	x1, x0, #0x20
    1c28:	ldr	x0, [sp, #40]
    1c2c:	str	x1, [x0, #112]
    1c30:	ldr	x0, [sp, #40]
    1c34:	ldr	x0, [x0, #104]
    1c38:	add	x1, x0, #0x20
    1c3c:	ldr	x0, [sp, #40]
    1c40:	ldr	x0, [x0, #144]
    1c44:	cmp	x1, x0
    1c48:	b.cc	1c98 <grub_macho_cmds_iterate+0x2f8>  // b.lo, b.ul, b.last
    1c4c:	ldr	x2, [sp, #16]
    1c50:	adrp	x0, 0 <grub_swap_bytes32>
    1c54:	add	x0, x0, #0x0
    1c58:	ldr	x1, [x0]
    1c5c:	mov	w0, #0x15                  	// #21
    1c60:	bl	0 <grub_error>
    1c64:	ldr	x0, [sp, #40]
    1c68:	ldr	x0, [x0, #120]
    1c6c:	bl	0 <grub_free>
    1c70:	ldr	x0, [sp, #40]
    1c74:	str	xzr, [x0, #120]
    1c78:	ldr	x0, [sp, #40]
    1c7c:	mov	x1, #0xffffffffffffffff    	// #-1
    1c80:	str	x1, [x0, #80]
    1c84:	adrp	x0, 0 <grub_swap_bytes32>
    1c88:	add	x0, x0, #0x0
    1c8c:	ldr	x0, [x0]
    1c90:	ldr	w0, [x0]
    1c94:	b	1d48 <grub_macho_cmds_iterate+0x3a8>
    1c98:	ldr	x0, [sp, #40]
    1c9c:	ldr	x0, [x0, #112]
    1ca0:	cmp	x0, #0x0
    1ca4:	b.ne	1cc0 <grub_macho_cmds_iterate+0x320>  // b.any
    1ca8:	adrp	x0, 0 <grub_swap_bytes32>
    1cac:	add	x0, x0, #0x0
    1cb0:	ldr	x1, [x0]
    1cb4:	mov	w0, #0x15                  	// #21
    1cb8:	bl	0 <grub_error>
    1cbc:	b	1d48 <grub_macho_cmds_iterate+0x3a8>
    1cc0:	ldr	x0, [sp, #40]
    1cc4:	ldr	x0, [x0, #112]
    1cc8:	str	x0, [sp, #88]
    1ccc:	str	wzr, [sp, #84]
    1cd0:	b	1d1c <grub_macho_cmds_iterate+0x37c>
    1cd4:	ldr	x0, [sp, #88]
    1cd8:	str	x0, [sp, #56]
    1cdc:	ldr	x3, [sp, #32]
    1ce0:	ldr	x2, [sp, #24]
    1ce4:	ldr	x1, [sp, #56]
    1ce8:	ldr	x0, [sp, #40]
    1cec:	blr	x3
    1cf0:	cmp	w0, #0x0
    1cf4:	b.ne	1d34 <grub_macho_cmds_iterate+0x394>  // b.any
    1cf8:	ldr	x0, [sp, #56]
    1cfc:	ldr	w0, [x0, #4]
    1d00:	mov	w0, w0
    1d04:	ldr	x1, [sp, #88]
    1d08:	add	x0, x1, x0
    1d0c:	str	x0, [sp, #88]
    1d10:	ldr	w0, [sp, #84]
    1d14:	add	w0, w0, #0x1
    1d18:	str	w0, [sp, #84]
    1d1c:	ldr	x0, [sp, #40]
    1d20:	ldr	w0, [x0, #96]
    1d24:	ldr	w1, [sp, #84]
    1d28:	cmp	w1, w0
    1d2c:	b.lt	1cd4 <grub_macho_cmds_iterate+0x334>  // b.tstop
    1d30:	b	1d38 <grub_macho_cmds_iterate+0x398>
    1d34:	nop
    1d38:	adrp	x0, 0 <grub_swap_bytes32>
    1d3c:	add	x0, x0, #0x0
    1d40:	ldr	x0, [x0]
    1d44:	ldr	w0, [x0]
    1d48:	ldp	x29, x30, [sp], #96
    1d4c:	ret
	...

0000000000001d68 <grub_macho_filesize64>:
    1d68:	stp	x29, x30, [sp, #-32]!
    1d6c:	mov	x29, sp
    1d70:	str	x0, [sp, #24]
    1d74:	ldr	x0, [sp, #24]
    1d78:	bl	16f0 <grub_macho_contains_macho64>
    1d7c:	cmp	w0, #0x0
    1d80:	b.eq	1d9c <grub_macho_filesize64+0x34>  // b.none
    1d84:	ldr	x0, [sp, #24]
    1d88:	ldr	x1, [x0, #88]
    1d8c:	ldr	x0, [sp, #24]
    1d90:	ldr	x0, [x0, #80]
    1d94:	sub	x0, x1, x0
    1d98:	b	1da0 <grub_macho_filesize64+0x38>
    1d9c:	mov	x0, #0x0                   	// #0
    1da0:	ldp	x29, x30, [sp], #32
    1da4:	ret

0000000000001da8 <grub_macho_readfile64>:
    1da8:	stp	x29, x30, [sp, #-64]!
    1dac:	mov	x29, sp
    1db0:	str	x0, [sp, #40]
    1db4:	str	x1, [sp, #32]
    1db8:	str	x2, [sp, #24]
    1dbc:	ldr	x0, [sp, #40]
    1dc0:	bl	16f0 <grub_macho_contains_macho64>
    1dc4:	cmp	w0, #0x0
    1dc8:	b.ne	1de4 <grub_macho_readfile64+0x3c>  // b.any
    1dcc:	adrp	x0, 0 <grub_swap_bytes32>
    1dd0:	add	x0, x0, #0x0
    1dd4:	ldr	x1, [x0]
    1dd8:	mov	w0, #0x15                  	// #21
    1ddc:	bl	0 <grub_error>
    1de0:	b	1eb4 <grub_macho_readfile64+0x10c>
    1de4:	ldr	x0, [sp, #40]
    1de8:	ldr	x2, [x0]
    1dec:	ldr	x0, [sp, #40]
    1df0:	ldr	x0, [x0, #80]
    1df4:	mov	x1, x0
    1df8:	mov	x0, x2
    1dfc:	bl	0 <grub_file_seek>
    1e00:	cmn	x0, #0x1
    1e04:	b.ne	1e1c <grub_macho_readfile64+0x74>  // b.any
    1e08:	adrp	x0, 0 <grub_swap_bytes32>
    1e0c:	add	x0, x0, #0x0
    1e10:	ldr	x0, [x0]
    1e14:	ldr	w0, [x0]
    1e18:	b	1eb4 <grub_macho_readfile64+0x10c>
    1e1c:	ldr	x0, [sp, #40]
    1e20:	ldr	x3, [x0]
    1e24:	ldr	x0, [sp, #40]
    1e28:	ldr	x1, [x0, #88]
    1e2c:	ldr	x0, [sp, #40]
    1e30:	ldr	x0, [x0, #80]
    1e34:	sub	x0, x1, x0
    1e38:	mov	x2, x0
    1e3c:	ldr	x1, [sp, #24]
    1e40:	mov	x0, x3
    1e44:	bl	0 <grub_file_read>
    1e48:	str	x0, [sp, #56]
    1e4c:	ldr	x0, [sp, #40]
    1e50:	ldr	x1, [x0, #88]
    1e54:	ldr	x0, [sp, #40]
    1e58:	ldr	x0, [x0, #80]
    1e5c:	sub	x0, x1, x0
    1e60:	ldr	x1, [sp, #56]
    1e64:	cmp	x1, x0
    1e68:	b.eq	1eb0 <grub_macho_readfile64+0x108>  // b.none
    1e6c:	adrp	x0, 0 <grub_swap_bytes32>
    1e70:	add	x0, x0, #0x0
    1e74:	ldr	x0, [x0]
    1e78:	ldr	w0, [x0]
    1e7c:	cmp	w0, #0x0
    1e80:	b.ne	1e9c <grub_macho_readfile64+0xf4>  // b.any
    1e84:	ldr	x2, [sp, #32]
    1e88:	adrp	x0, 0 <grub_swap_bytes32>
    1e8c:	add	x0, x0, #0x0
    1e90:	ldr	x1, [x0]
    1e94:	mov	w0, #0x15                  	// #21
    1e98:	bl	0 <grub_error>
    1e9c:	adrp	x0, 0 <grub_swap_bytes32>
    1ea0:	add	x0, x0, #0x0
    1ea4:	ldr	x0, [x0]
    1ea8:	ldr	w0, [x0]
    1eac:	b	1eb4 <grub_macho_readfile64+0x10c>
    1eb0:	mov	w0, #0x0                   	// #0
    1eb4:	ldp	x29, x30, [sp], #64
    1eb8:	ret
    1ebc:	nop
	...

0000000000001ed8 <calcsize>:
    1ed8:	sub	sp, sp, #0x30
    1edc:	str	x0, [sp, #24]
    1ee0:	str	x1, [sp, #16]
    1ee4:	str	x2, [sp, #8]
    1ee8:	ldr	x0, [sp, #16]
    1eec:	str	x0, [sp, #40]
    1ef0:	ldr	x0, [sp, #8]
    1ef4:	str	x0, [sp, #32]
    1ef8:	ldr	x0, [sp, #40]
    1efc:	ldr	w0, [x0]
    1f00:	cmp	w0, #0x19
    1f04:	b.eq	1f10 <calcsize+0x38>  // b.none
    1f08:	mov	w0, #0x0                   	// #0
    1f0c:	b	1fe4 <calcsize+0x10c>
    1f10:	ldr	x0, [sp, #40]
    1f14:	ldr	x0, [x0, #32]
    1f18:	cmp	x0, #0x0
    1f1c:	b.ne	1f28 <calcsize+0x50>  // b.any
    1f20:	mov	w0, #0x0                   	// #0
    1f24:	b	1fe4 <calcsize+0x10c>
    1f28:	ldr	x0, [sp, #40]
    1f2c:	ldr	x0, [x0, #48]
    1f30:	cmp	x0, #0x0
    1f34:	b.ne	1f54 <calcsize+0x7c>  // b.any
    1f38:	ldr	x0, [sp, #32]
    1f3c:	ldr	w0, [x0]
    1f40:	and	w0, w0, #0x1
    1f44:	cmp	w0, #0x0
    1f48:	b.eq	1f54 <calcsize+0x7c>  // b.none
    1f4c:	mov	w0, #0x0                   	// #0
    1f50:	b	1fe4 <calcsize+0x10c>
    1f54:	ldr	x0, [sp, #32]
    1f58:	ldr	w0, [x0, #4]
    1f5c:	add	w1, w0, #0x1
    1f60:	ldr	x0, [sp, #32]
    1f64:	str	w1, [x0, #4]
    1f68:	ldr	x0, [sp, #40]
    1f6c:	ldr	x1, [x0, #24]
    1f70:	ldr	x0, [sp, #32]
    1f74:	ldr	x0, [x0, #8]
    1f78:	ldr	x0, [x0]
    1f7c:	cmp	x1, x0
    1f80:	b.cs	1f98 <calcsize+0xc0>  // b.hs, b.nlast
    1f84:	ldr	x0, [sp, #32]
    1f88:	ldr	x0, [x0, #8]
    1f8c:	ldr	x1, [sp, #40]
    1f90:	ldr	x1, [x1, #24]
    1f94:	str	x1, [x0]
    1f98:	ldr	x0, [sp, #40]
    1f9c:	ldr	x1, [x0, #24]
    1fa0:	ldr	x0, [sp, #40]
    1fa4:	ldr	x0, [x0, #32]
    1fa8:	add	x1, x1, x0
    1fac:	ldr	x0, [sp, #32]
    1fb0:	ldr	x0, [x0, #16]
    1fb4:	ldr	x0, [x0]
    1fb8:	cmp	x1, x0
    1fbc:	b.ls	1fe0 <calcsize+0x108>  // b.plast
    1fc0:	ldr	x0, [sp, #40]
    1fc4:	ldr	x2, [x0, #24]
    1fc8:	ldr	x0, [sp, #40]
    1fcc:	ldr	x1, [x0, #32]
    1fd0:	ldr	x0, [sp, #32]
    1fd4:	ldr	x0, [x0, #16]
    1fd8:	add	x1, x2, x1
    1fdc:	str	x1, [x0]
    1fe0:	mov	w0, #0x0                   	// #0
    1fe4:	add	sp, sp, #0x30
    1fe8:	ret

0000000000001fec <grub_macho_size64>:
    1fec:	stp	x29, x30, [sp, #-96]!
    1ff0:	mov	x29, sp
    1ff4:	str	x0, [sp, #56]
    1ff8:	str	x1, [sp, #48]
    1ffc:	str	x2, [sp, #40]
    2000:	str	w3, [sp, #36]
    2004:	str	x4, [sp, #24]
    2008:	ldr	w0, [sp, #36]
    200c:	str	w0, [sp, #72]
    2010:	str	wzr, [sp, #76]
    2014:	ldr	x0, [sp, #48]
    2018:	str	x0, [sp, #80]
    201c:	ldr	x0, [sp, #40]
    2020:	str	x0, [sp, #88]
    2024:	ldr	x0, [sp, #48]
    2028:	mov	x1, #0xffffffffffffffff    	// #-1
    202c:	str	x1, [x0]
    2030:	ldr	x0, [sp, #40]
    2034:	str	xzr, [x0]
    2038:	add	x0, sp, #0x48
    203c:	ldr	x3, [sp, #24]
    2040:	mov	x2, x0
    2044:	adrp	x0, 0 <grub_swap_bytes32>
    2048:	add	x0, x0, #0x0
    204c:	ldr	x1, [x0]
    2050:	ldr	x0, [sp, #56]
    2054:	bl	19a0 <grub_macho_cmds_iterate>
    2058:	ldr	w0, [sp, #76]
    205c:	cmp	w0, #0x0
    2060:	b.ne	207c <grub_macho_size64+0x90>  // b.any
    2064:	adrp	x0, 0 <grub_swap_bytes32>
    2068:	add	x0, x0, #0x0
    206c:	ldr	x1, [x0]
    2070:	mov	w0, #0x15                  	// #21
    2074:	bl	0 <grub_error>
    2078:	b	20b0 <grub_macho_size64+0xc4>
    207c:	ldr	x0, [sp, #40]
    2080:	ldr	x1, [x0]
    2084:	ldr	x0, [sp, #48]
    2088:	ldr	x0, [x0]
    208c:	cmp	x1, x0
    2090:	b.cs	20ac <grub_macho_size64+0xc0>  // b.hs, b.nlast
    2094:	adrp	x0, 0 <grub_swap_bytes32>
    2098:	add	x0, x0, #0x0
    209c:	ldr	x1, [x0]
    20a0:	mov	w0, #0x15                  	// #21
    20a4:	bl	0 <grub_error>
    20a8:	b	20b0 <grub_macho_size64+0xc4>
    20ac:	mov	w0, #0x0                   	// #0
    20b0:	ldp	x29, x30, [sp], #96
    20b4:	ret
	...

00000000000020d0 <do_load>:
    20d0:	stp	x29, x30, [sp, #-96]!
    20d4:	mov	x29, sp
    20d8:	str	x0, [sp, #40]
    20dc:	str	x1, [sp, #32]
    20e0:	str	x2, [sp, #24]
    20e4:	ldr	x0, [sp, #32]
    20e8:	str	x0, [sp, #72]
    20ec:	ldr	x0, [sp, #24]
    20f0:	str	x0, [sp, #64]
    20f4:	ldr	x0, [sp, #72]
    20f8:	ldr	w0, [x0]
    20fc:	cmp	w0, #0x19
    2100:	b.eq	210c <do_load+0x3c>  // b.none
    2104:	mov	w0, #0x0                   	// #0
    2108:	b	2460 <do_load+0x390>
    210c:	ldr	x0, [sp, #72]
    2110:	ldr	x0, [x0, #48]
    2114:	cmp	x0, #0x0
    2118:	b.ne	2138 <do_load+0x68>  // b.any
    211c:	ldr	x0, [sp, #64]
    2120:	ldr	w0, [x0]
    2124:	and	w0, w0, #0x1
    2128:	cmp	w0, #0x0
    212c:	b.eq	2138 <do_load+0x68>  // b.none
    2130:	mov	w0, #0x0                   	// #0
    2134:	b	2460 <do_load+0x390>
    2138:	ldr	x0, [sp, #72]
    213c:	ldr	x0, [x0, #32]
    2140:	cmp	x0, #0x0
    2144:	b.ne	2150 <do_load+0x80>  // b.any
    2148:	mov	w0, #0x0                   	// #0
    214c:	b	2460 <do_load+0x390>
    2150:	ldr	x0, [sp, #72]
    2154:	ldr	x0, [x0, #48]
    2158:	cmp	x0, #0x0
    215c:	b.eq	2400 <do_load+0x330>  // b.none
    2160:	ldr	x0, [sp, #72]
    2164:	ldr	x1, [x0, #32]
    2168:	ldr	x0, [sp, #72]
    216c:	ldr	x0, [x0, #48]
    2170:	cmp	x1, x0
    2174:	csel	x0, x1, x0, ls  // ls = plast
    2178:	str	x0, [sp, #56]
    217c:	ldr	x0, [sp, #40]
    2180:	ldr	x0, [x0, #120]
    2184:	cmp	x0, #0x0
    2188:	b.eq	2200 <do_load+0x130>  // b.none
    218c:	ldr	x0, [sp, #72]
    2190:	ldr	x1, [x0, #40]
    2194:	ldr	x0, [sp, #56]
    2198:	add	x1, x1, x0
    219c:	ldr	x0, [sp, #40]
    21a0:	ldr	x0, [x0, #144]
    21a4:	cmp	x1, x0
    21a8:	b.ls	21b8 <do_load+0xe8>  // b.plast
    21ac:	mov	x0, #0xffffffffffffffff    	// #-1
    21b0:	str	x0, [sp, #88]
    21b4:	b	226c <do_load+0x19c>
    21b8:	ldr	x0, [sp, #56]
    21bc:	str	x0, [sp, #88]
    21c0:	ldr	x0, [sp, #64]
    21c4:	ldr	x1, [x0, #8]
    21c8:	ldr	x0, [sp, #72]
    21cc:	ldr	x0, [x0, #24]
    21d0:	add	x3, x1, x0
    21d4:	ldr	x0, [sp, #40]
    21d8:	ldr	x1, [x0, #120]
    21dc:	ldr	x0, [sp, #72]
    21e0:	ldr	x0, [x0, #40]
    21e4:	add	x0, x1, x0
    21e8:	ldr	x1, [sp, #88]
    21ec:	mov	x2, x1
    21f0:	mov	x1, x0
    21f4:	mov	x0, x3
    21f8:	bl	1690 <grub_memcpy>
    21fc:	b	226c <do_load+0x19c>
    2200:	ldr	x0, [sp, #40]
    2204:	ldr	x2, [x0]
    2208:	ldr	x0, [sp, #72]
    220c:	ldr	x0, [x0, #40]
    2210:	ldr	x1, [sp, #40]
    2214:	ldr	x1, [x1, #80]
    2218:	add	x0, x0, x1
    221c:	mov	x1, x0
    2220:	mov	x0, x2
    2224:	bl	0 <grub_file_seek>
    2228:	cmn	x0, #0x1
    222c:	b.ne	2238 <do_load+0x168>  // b.any
    2230:	mov	w0, #0x1                   	// #1
    2234:	b	2460 <do_load+0x390>
    2238:	ldr	x0, [sp, #40]
    223c:	ldr	x3, [x0]
    2240:	ldr	x0, [sp, #64]
    2244:	ldr	x1, [x0, #8]
    2248:	ldr	x0, [sp, #72]
    224c:	ldr	x0, [x0, #24]
    2250:	add	x0, x1, x0
    2254:	ldr	x1, [sp, #56]
    2258:	mov	x2, x1
    225c:	mov	x1, x0
    2260:	mov	x0, x3
    2264:	bl	0 <grub_file_read>
    2268:	str	x0, [sp, #88]
    226c:	ldr	x1, [sp, #88]
    2270:	ldr	x0, [sp, #56]
    2274:	cmp	x1, x0
    2278:	b.eq	22bc <do_load+0x1ec>  // b.none
    227c:	adrp	x0, 0 <grub_swap_bytes32>
    2280:	add	x0, x0, #0x0
    2284:	ldr	x0, [x0]
    2288:	ldr	w0, [x0]
    228c:	cmp	w0, #0x0
    2290:	b.ne	22b4 <do_load+0x1e4>  // b.any
    2294:	ldr	x0, [sp, #64]
    2298:	ldr	x0, [x0, #16]
    229c:	mov	x2, x0
    22a0:	adrp	x0, 0 <grub_swap_bytes32>
    22a4:	add	x0, x0, #0x0
    22a8:	ldr	x1, [x0]
    22ac:	mov	w0, #0x15                  	// #21
    22b0:	bl	0 <grub_error>
    22b4:	mov	w0, #0x1                   	// #1
    22b8:	b	2460 <do_load+0x390>
    22bc:	ldr	x0, [sp, #64]
    22c0:	ldr	x0, [x0, #24]
    22c4:	cmp	x0, #0x0
    22c8:	b.eq	2400 <do_load+0x330>  // b.none
    22cc:	ldr	x0, [sp, #64]
    22d0:	ldr	x1, [x0, #8]
    22d4:	ldr	x0, [sp, #72]
    22d8:	ldr	x0, [x0, #24]
    22dc:	add	x0, x1, x0
    22e0:	str	x0, [sp, #80]
    22e4:	ldr	x0, [sp, #72]
    22e8:	ldr	x1, [x0, #48]
    22ec:	ldr	x0, [sp, #72]
    22f0:	ldr	x0, [x0, #32]
    22f4:	cmp	x1, x0
    22f8:	b.cs	230c <do_load+0x23c>  // b.hs, b.nlast
    22fc:	ldr	x0, [sp, #72]
    2300:	ldr	x0, [x0, #48]
    2304:	sub	x0, x0, #0x16
    2308:	b	2318 <do_load+0x248>
    230c:	ldr	x0, [sp, #72]
    2310:	ldr	x0, [x0, #32]
    2314:	sub	x0, x0, #0x16
    2318:	ldr	x1, [sp, #80]
    231c:	add	x0, x1, x0
    2320:	str	x0, [sp, #48]
    2324:	b	23e8 <do_load+0x318>
    2328:	mov	x2, #0x16                  	// #22
    232c:	adrp	x0, 0 <grub_swap_bytes32>
    2330:	add	x0, x0, #0x0
    2334:	ldr	x1, [x0]
    2338:	ldr	x0, [sp, #80]
    233c:	bl	0 <grub_memcmp>
    2340:	cmp	w0, #0x0
    2344:	b.ne	23dc <do_load+0x30c>  // b.any
    2348:	ldr	x0, [sp, #80]
    234c:	add	x0, x0, #0x16
    2350:	str	x0, [sp, #80]
    2354:	ldr	x0, [sp, #64]
    2358:	ldr	x0, [x0, #24]
    235c:	str	wzr, [x0]
    2360:	ldr	x0, [sp, #48]
    2364:	add	x0, x0, #0x16
    2368:	str	x0, [sp, #48]
    236c:	b	23b4 <do_load+0x2e4>
    2370:	ldr	x0, [sp, #80]
    2374:	add	x1, x0, #0x1
    2378:	str	x1, [sp, #80]
    237c:	ldrb	w0, [x0]
    2380:	sub	w2, w0, #0x30
    2384:	ldr	x0, [sp, #64]
    2388:	ldr	x0, [x0, #24]
    238c:	ldr	w1, [x0]
    2390:	mov	w0, w1
    2394:	lsl	w0, w0, #2
    2398:	add	w0, w0, w1
    239c:	lsl	w0, w0, #1
    23a0:	mov	w1, w0
    23a4:	ldr	x0, [sp, #64]
    23a8:	ldr	x0, [x0, #24]
    23ac:	add	w1, w2, w1
    23b0:	str	w1, [x0]
    23b4:	ldr	x1, [sp, #80]
    23b8:	ldr	x0, [sp, #48]
    23bc:	cmp	x1, x0
    23c0:	b.cs	23fc <do_load+0x32c>  // b.hs, b.nlast
    23c4:	ldr	x0, [sp, #80]
    23c8:	ldrb	w0, [x0]
    23cc:	bl	16bc <grub_isdigit>
    23d0:	cmp	w0, #0x0
    23d4:	b.ne	2370 <do_load+0x2a0>  // b.any
    23d8:	b	23fc <do_load+0x32c>
    23dc:	ldr	x0, [sp, #80]
    23e0:	add	x0, x0, #0x1
    23e4:	str	x0, [sp, #80]
    23e8:	ldr	x1, [sp, #80]
    23ec:	ldr	x0, [sp, #48]
    23f0:	cmp	x1, x0
    23f4:	b.cc	2328 <do_load+0x258>  // b.lo, b.ul, b.last
    23f8:	b	2400 <do_load+0x330>
    23fc:	nop
    2400:	ldr	x0, [sp, #72]
    2404:	ldr	x1, [x0, #48]
    2408:	ldr	x0, [sp, #72]
    240c:	ldr	x0, [x0, #32]
    2410:	cmp	x1, x0
    2414:	b.cs	245c <do_load+0x38c>  // b.hs, b.nlast
    2418:	ldr	x0, [sp, #64]
    241c:	ldr	x1, [x0, #8]
    2420:	ldr	x0, [sp, #72]
    2424:	ldr	x2, [x0, #24]
    2428:	ldr	x0, [sp, #72]
    242c:	ldr	x0, [x0, #48]
    2430:	add	x0, x2, x0
    2434:	add	x3, x1, x0
    2438:	ldr	x0, [sp, #72]
    243c:	ldr	x1, [x0, #32]
    2440:	ldr	x0, [sp, #72]
    2444:	ldr	x0, [x0, #48]
    2448:	sub	x0, x1, x0
    244c:	mov	x2, x0
    2450:	mov	w1, #0x0                   	// #0
    2454:	mov	x0, x3
    2458:	bl	0 <grub_memset>
    245c:	mov	w0, #0x0                   	// #0
    2460:	ldp	x29, x30, [sp], #96
    2464:	ret
	...

0000000000002480 <grub_macho_load64>:
    2480:	stp	x29, x30, [sp, #-96]!
    2484:	mov	x29, sp
    2488:	str	x0, [sp, #56]
    248c:	str	x1, [sp, #48]
    2490:	str	x2, [sp, #40]
    2494:	str	w3, [sp, #36]
    2498:	str	x4, [sp, #24]
    249c:	ldr	w0, [sp, #36]
    24a0:	str	w0, [sp, #64]
    24a4:	ldr	x0, [sp, #40]
    24a8:	str	x0, [sp, #72]
    24ac:	ldr	x0, [sp, #48]
    24b0:	str	x0, [sp, #80]
    24b4:	ldr	x0, [sp, #24]
    24b8:	str	x0, [sp, #88]
    24bc:	ldr	x0, [sp, #24]
    24c0:	cmp	x0, #0x0
    24c4:	b.eq	24d0 <grub_macho_load64+0x50>  // b.none
    24c8:	ldr	x0, [sp, #24]
    24cc:	str	wzr, [x0]
    24d0:	add	x0, sp, #0x40
    24d4:	ldr	x3, [sp, #48]
    24d8:	mov	x2, x0
    24dc:	adrp	x0, 0 <grub_swap_bytes32>
    24e0:	add	x0, x0, #0x0
    24e4:	ldr	x1, [x0]
    24e8:	ldr	x0, [sp, #56]
    24ec:	bl	19a0 <grub_macho_cmds_iterate>
    24f0:	adrp	x0, 0 <grub_swap_bytes32>
    24f4:	add	x0, x0, #0x0
    24f8:	ldr	x0, [x0]
    24fc:	ldr	w0, [x0]
    2500:	ldp	x29, x30, [sp], #96
    2504:	ret
	...

0000000000002518 <find_entry_point>:
    2518:	sub	sp, sp, #0x30
    251c:	str	x0, [sp, #24]
    2520:	str	x1, [sp, #16]
    2524:	str	x2, [sp, #8]
    2528:	ldr	x0, [sp, #8]
    252c:	str	x0, [sp, #40]
    2530:	ldr	x0, [sp, #16]
    2534:	ldr	w0, [x0]
    2538:	cmp	w0, #0x5
    253c:	b.ne	2550 <find_entry_point+0x38>  // b.any
    2540:	ldr	x0, [sp, #16]
    2544:	ldr	x1, [x0, #144]
    2548:	ldr	x0, [sp, #40]
    254c:	str	x1, [x0]
    2550:	mov	w0, #0x0                   	// #0
    2554:	add	sp, sp, #0x30
    2558:	ret

000000000000255c <grub_macho_get_entry_point64>:
    255c:	stp	x29, x30, [sp, #-48]!
    2560:	mov	x29, sp
    2564:	str	x0, [sp, #24]
    2568:	str	x1, [sp, #16]
    256c:	str	xzr, [sp, #40]
    2570:	add	x0, sp, #0x28
    2574:	ldr	x3, [sp, #16]
    2578:	mov	x2, x0
    257c:	adrp	x0, 0 <grub_swap_bytes32>
    2580:	add	x0, x0, #0x0
    2584:	ldr	x1, [x0]
    2588:	ldr	x0, [sp, #24]
    258c:	bl	19a0 <grub_macho_cmds_iterate>
    2590:	ldr	x0, [sp, #40]
    2594:	ldp	x29, x30, [sp], #48
    2598:	ret
    259c:	nop
	...

00000000000025a8 <grub_decompress_lzss>:
    25a8:	sub	sp, sp, #0x40
    25ac:	str	x0, [sp, #24]
    25b0:	str	x1, [sp, #16]
    25b4:	str	x2, [sp, #8]
    25b8:	str	x3, [sp]
    25bc:	ldr	x0, [sp, #24]
    25c0:	str	x0, [sp, #40]
    25c4:	str	wzr, [sp, #60]
    25c8:	b	25f0 <grub_decompress_lzss+0x48>
    25cc:	adrp	x0, 0 <grub_swap_bytes32>
    25d0:	add	x0, x0, #0x0
    25d4:	ldr	x1, [x0]
    25d8:	ldrsw	x0, [sp, #60]
    25dc:	mov	w2, #0x20                  	// #32
    25e0:	strb	w2, [x1, x0]
    25e4:	ldr	w0, [sp, #60]
    25e8:	add	w0, w0, #0x1
    25ec:	str	w0, [sp, #60]
    25f0:	ldr	w0, [sp, #60]
    25f4:	cmp	w0, #0xfed
    25f8:	b.le	25cc <grub_decompress_lzss+0x24>
    25fc:	mov	w0, #0xfee                 	// #4078
    2600:	str	w0, [sp, #52]
    2604:	str	wzr, [sp, #48]
    2608:	ldr	w0, [sp, #48]
    260c:	lsr	w0, w0, #1
    2610:	str	w0, [sp, #48]
    2614:	ldr	w0, [sp, #48]
    2618:	and	w0, w0, #0x100
    261c:	cmp	w0, #0x0
    2620:	b.ne	2668 <grub_decompress_lzss+0xc0>  // b.any
    2624:	ldr	x1, [sp, #8]
    2628:	ldr	x0, [sp]
    262c:	cmp	x1, x0
    2630:	b.cs	2648 <grub_decompress_lzss+0xa0>  // b.hs, b.nlast
    2634:	ldr	x0, [sp, #8]
    2638:	add	x1, x0, #0x1
    263c:	str	x1, [sp, #8]
    2640:	ldrb	w0, [x0]
    2644:	b	264c <grub_decompress_lzss+0xa4>
    2648:	mov	w0, #0xffffffff            	// #-1
    264c:	str	w0, [sp, #36]
    2650:	ldr	w0, [sp, #36]
    2654:	cmn	w0, #0x1
    2658:	b.eq	2854 <grub_decompress_lzss+0x2ac>  // b.none
    265c:	ldr	w0, [sp, #36]
    2660:	orr	w0, w0, #0xff00
    2664:	str	w0, [sp, #48]
    2668:	ldr	w0, [sp, #48]
    266c:	and	w0, w0, #0x1
    2670:	cmp	w0, #0x0
    2674:	b.eq	2710 <grub_decompress_lzss+0x168>  // b.none
    2678:	ldr	x1, [sp, #8]
    267c:	ldr	x0, [sp]
    2680:	cmp	x1, x0
    2684:	b.cs	269c <grub_decompress_lzss+0xf4>  // b.hs, b.nlast
    2688:	ldr	x0, [sp, #8]
    268c:	add	x1, x0, #0x1
    2690:	str	x1, [sp, #8]
    2694:	ldrb	w0, [x0]
    2698:	b	26a0 <grub_decompress_lzss+0xf8>
    269c:	mov	w0, #0xffffffff            	// #-1
    26a0:	str	w0, [sp, #36]
    26a4:	ldr	w0, [sp, #36]
    26a8:	cmn	w0, #0x1
    26ac:	b.eq	285c <grub_decompress_lzss+0x2b4>  // b.none
    26b0:	ldr	x1, [sp, #24]
    26b4:	ldr	x0, [sp, #16]
    26b8:	cmp	x1, x0
    26bc:	b.cs	26d8 <grub_decompress_lzss+0x130>  // b.hs, b.nlast
    26c0:	ldr	x0, [sp, #24]
    26c4:	add	x1, x0, #0x1
    26c8:	str	x1, [sp, #24]
    26cc:	ldr	w1, [sp, #36]
    26d0:	and	w1, w1, #0xff
    26d4:	strb	w1, [x0]
    26d8:	ldr	w0, [sp, #52]
    26dc:	add	w1, w0, #0x1
    26e0:	str	w1, [sp, #52]
    26e4:	ldr	w1, [sp, #36]
    26e8:	and	w2, w1, #0xff
    26ec:	adrp	x1, 0 <grub_swap_bytes32>
    26f0:	add	x1, x1, #0x0
    26f4:	ldr	x1, [x1]
    26f8:	sxtw	x0, w0
    26fc:	strb	w2, [x1, x0]
    2700:	ldr	w0, [sp, #52]
    2704:	and	w0, w0, #0xfff
    2708:	str	w0, [sp, #52]
    270c:	b	2608 <grub_decompress_lzss+0x60>
    2710:	ldr	x1, [sp, #8]
    2714:	ldr	x0, [sp]
    2718:	cmp	x1, x0
    271c:	b.cs	2734 <grub_decompress_lzss+0x18c>  // b.hs, b.nlast
    2720:	ldr	x0, [sp, #8]
    2724:	add	x1, x0, #0x1
    2728:	str	x1, [sp, #8]
    272c:	ldrb	w0, [x0]
    2730:	b	2738 <grub_decompress_lzss+0x190>
    2734:	mov	w0, #0xffffffff            	// #-1
    2738:	str	w0, [sp, #60]
    273c:	ldr	w0, [sp, #60]
    2740:	cmn	w0, #0x1
    2744:	b.eq	2864 <grub_decompress_lzss+0x2bc>  // b.none
    2748:	ldr	x1, [sp, #8]
    274c:	ldr	x0, [sp]
    2750:	cmp	x1, x0
    2754:	b.cs	276c <grub_decompress_lzss+0x1c4>  // b.hs, b.nlast
    2758:	ldr	x0, [sp, #8]
    275c:	add	x1, x0, #0x1
    2760:	str	x1, [sp, #8]
    2764:	ldrb	w0, [x0]
    2768:	b	2770 <grub_decompress_lzss+0x1c8>
    276c:	mov	w0, #0xffffffff            	// #-1
    2770:	str	w0, [sp, #32]
    2774:	ldr	w0, [sp, #32]
    2778:	cmn	w0, #0x1
    277c:	b.eq	286c <grub_decompress_lzss+0x2c4>  // b.none
    2780:	ldr	w0, [sp, #32]
    2784:	lsl	w0, w0, #4
    2788:	and	w0, w0, #0xf00
    278c:	ldr	w1, [sp, #60]
    2790:	orr	w0, w1, w0
    2794:	str	w0, [sp, #60]
    2798:	ldr	w0, [sp, #32]
    279c:	and	w0, w0, #0xf
    27a0:	add	w0, w0, #0x2
    27a4:	str	w0, [sp, #32]
    27a8:	str	wzr, [sp, #56]
    27ac:	b	2840 <grub_decompress_lzss+0x298>
    27b0:	ldr	w1, [sp, #60]
    27b4:	ldr	w0, [sp, #56]
    27b8:	add	w0, w1, w0
    27bc:	and	w2, w0, #0xfff
    27c0:	adrp	x0, 0 <grub_swap_bytes32>
    27c4:	add	x0, x0, #0x0
    27c8:	ldr	x1, [x0]
    27cc:	sxtw	x0, w2
    27d0:	ldrb	w0, [x1, x0]
    27d4:	str	w0, [sp, #36]
    27d8:	ldr	x1, [sp, #24]
    27dc:	ldr	x0, [sp, #16]
    27e0:	cmp	x1, x0
    27e4:	b.cs	2800 <grub_decompress_lzss+0x258>  // b.hs, b.nlast
    27e8:	ldr	x0, [sp, #24]
    27ec:	add	x1, x0, #0x1
    27f0:	str	x1, [sp, #24]
    27f4:	ldr	w1, [sp, #36]
    27f8:	and	w1, w1, #0xff
    27fc:	strb	w1, [x0]
    2800:	ldr	w0, [sp, #52]
    2804:	add	w1, w0, #0x1
    2808:	str	w1, [sp, #52]
    280c:	ldr	w1, [sp, #36]
    2810:	and	w2, w1, #0xff
    2814:	adrp	x1, 0 <grub_swap_bytes32>
    2818:	add	x1, x1, #0x0
    281c:	ldr	x1, [x1]
    2820:	sxtw	x0, w0
    2824:	strb	w2, [x1, x0]
    2828:	ldr	w0, [sp, #52]
    282c:	and	w0, w0, #0xfff
    2830:	str	w0, [sp, #52]
    2834:	ldr	w0, [sp, #56]
    2838:	add	w0, w0, #0x1
    283c:	str	w0, [sp, #56]
    2840:	ldr	w1, [sp, #56]
    2844:	ldr	w0, [sp, #32]
    2848:	cmp	w1, w0
    284c:	b.le	27b0 <grub_decompress_lzss+0x208>
    2850:	b	2608 <grub_decompress_lzss+0x60>
    2854:	nop
    2858:	b	2870 <grub_decompress_lzss+0x2c8>
    285c:	nop
    2860:	b	2870 <grub_decompress_lzss+0x2c8>
    2864:	nop
    2868:	b	2870 <grub_decompress_lzss+0x2c8>
    286c:	nop
    2870:	ldr	x1, [sp, #24]
    2874:	ldr	x0, [sp, #40]
    2878:	sub	x0, x1, x0
    287c:	add	sp, sp, #0x40
    2880:	ret
    2884:	nop
	...
