
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//serial.mod_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_efiserial_init-0x3e8>:
       0:	stp	x29, x30, [sp, #-64]!
       4:	mov	x29, sp
       8:	str	x0, [sp, #24]
       c:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
      10:	add	x0, x0, #0x0
      14:	ldr	x0, [x0]
      18:	add	x2, sp, #0x20
      1c:	mov	x3, x0
      20:	ldp	x0, x1, [x3]
      24:	stp	x0, x1, [x2]
      28:	ldp	x0, x1, [x3, #16]
      2c:	stp	x0, x1, [x2, #16]
      30:	ldr	x0, [sp, #24]
      34:	ldr	x0, [x0, #24]
      38:	ldr	x2, [x0]
      3c:	add	x0, sp, #0x20
      40:	mov	x1, x0
      44:	ldr	x0, [sp, #24]
      48:	blr	x2
      4c:	ldp	x29, x30, [sp], #64
      50:	ret
      54:	nop
	...
      60:	stp	x29, x30, [sp, #-80]!
      64:	mov	x29, sp
      68:	str	x0, [sp, #24]
      6c:	str	xzr, [sp, #72]
      70:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
      74:	add	x0, x0, #0x0
      78:	ldr	x1, [x0]
      7c:	add	x0, sp, #0x38
      80:	ldr	x2, [x1]
      84:	str	x2, [x0]
      88:	ldr	w1, [x1, #8]
      8c:	str	w1, [x0, #8]
      90:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
      94:	add	x0, x0, #0x0
      98:	ldr	x1, [x0]
      9c:	add	x0, sp, #0x28
      a0:	ldr	x2, [x1]
      a4:	str	x2, [x0]
      a8:	ldr	w1, [x1, #8]
      ac:	str	w1, [x0, #8]
      b0:	ldr	x0, [sp, #24]
      b4:	ldr	w0, [x0, #64]
      b8:	cmp	w0, #0x0
      bc:	b.ne	1a8 <grub_efiserial_init-0x240>  // b.any
      c0:	ldr	x0, [sp, #24]
      c4:	ldr	x0, [x0, #72]
      c8:	ldr	x7, [x0, #16]
      cc:	ldr	x0, [sp, #24]
      d0:	ldr	x8, [x0, #72]
      d4:	ldr	x0, [sp, #24]
      d8:	ldr	w0, [x0, #32]
      dc:	mov	w9, w0
      e0:	ldr	x0, [sp, #24]
      e4:	ldr	w0, [x0, #40]
      e8:	mov	w0, w0
      ec:	lsl	x0, x0, #2
      f0:	add	x1, sp, #0x38
      f4:	ldr	w2, [x1, x0]
      f8:	ldr	x0, [sp, #24]
      fc:	ldr	w0, [x0, #36]
     100:	and	w3, w0, #0xff
     104:	ldr	x0, [sp, #24]
     108:	ldr	w0, [x0, #44]
     10c:	mov	w0, w0
     110:	lsl	x0, x0, #2
     114:	add	x1, sp, #0x28
     118:	ldr	w0, [x1, x0]
     11c:	mov	w6, w0
     120:	mov	w5, w3
     124:	mov	w4, w2
     128:	mov	w3, #0x0                   	// #0
     12c:	mov	w2, #0x0                   	// #0
     130:	mov	x1, x9
     134:	mov	x0, x8
     138:	blr	x7
     13c:	str	x0, [sp, #72]
     140:	ldr	x0, [sp, #72]
     144:	cmp	x0, #0x0
     148:	b.eq	158 <grub_efiserial_init-0x290>  // b.none
     14c:	ldr	x0, [sp, #24]
     150:	mov	w1, #0x1                   	// #1
     154:	str	w1, [x0, #68]
     158:	ldr	x0, [sp, #24]
     15c:	ldr	x0, [x0, #72]
     160:	ldr	x2, [x0, #24]
     164:	ldr	x0, [sp, #24]
     168:	ldr	x3, [x0, #72]
     16c:	ldr	x0, [sp, #24]
     170:	ldr	w0, [x0, #56]
     174:	cmp	w0, #0x0
     178:	b.eq	184 <grub_efiserial_init-0x264>  // b.none
     17c:	mov	w0, #0x4002                	// #16386
     180:	b	188 <grub_efiserial_init-0x260>
     184:	mov	w0, #0x2                   	// #2
     188:	mov	w1, w0
     18c:	mov	x0, x3
     190:	blr	x2
     194:	str	x0, [sp, #72]
     198:	ldr	x0, [sp, #24]
     19c:	mov	w1, #0x1                   	// #1
     1a0:	str	w1, [x0, #64]
     1a4:	b	1ac <grub_efiserial_init-0x23c>
     1a8:	nop
     1ac:	ldp	x29, x30, [sp], #80
     1b0:	ret
     1b4:	nop
	...
     1c8:	stp	x29, x30, [sp, #-64]!
     1cc:	mov	x29, sp
     1d0:	str	x0, [sp, #24]
     1d4:	mov	x0, #0x1                   	// #1
     1d8:	str	x0, [sp, #48]
     1dc:	str	xzr, [sp, #56]
     1e0:	ldr	x0, [sp, #24]
     1e4:	bl	60 <grub_efiserial_init-0x388>
     1e8:	ldr	x0, [sp, #24]
     1ec:	ldr	w0, [x0, #68]
     1f0:	cmp	w0, #0x0
     1f4:	b.eq	200 <grub_efiserial_init-0x1e8>  // b.none
     1f8:	mov	w0, #0xffffffff            	// #-1
     1fc:	b	248 <grub_efiserial_init-0x1a0>
     200:	ldr	x0, [sp, #24]
     204:	ldr	x0, [x0, #72]
     208:	ldr	x3, [x0, #48]
     20c:	ldr	x0, [sp, #24]
     210:	ldr	x0, [x0, #72]
     214:	add	x2, sp, #0x2f
     218:	add	x1, sp, #0x30
     21c:	blr	x3
     220:	str	x0, [sp, #56]
     224:	ldr	x0, [sp, #56]
     228:	cmp	x0, #0x0
     22c:	b.ne	23c <grub_efiserial_init-0x1ac>  // b.any
     230:	ldr	x0, [sp, #48]
     234:	cmp	x0, #0x0
     238:	b.ne	244 <grub_efiserial_init-0x1a4>  // b.any
     23c:	mov	w0, #0xffffffff            	// #-1
     240:	b	248 <grub_efiserial_init-0x1a0>
     244:	ldrb	w0, [sp, #47]
     248:	ldp	x29, x30, [sp], #64
     24c:	ret
     250:	stp	x29, x30, [sp, #-48]!
     254:	mov	x29, sp
     258:	str	x0, [sp, #24]
     25c:	str	w1, [sp, #20]
     260:	mov	x0, #0x1                   	// #1
     264:	str	x0, [sp, #40]
     268:	ldr	w0, [sp, #20]
     26c:	and	w0, w0, #0xff
     270:	strb	w0, [sp, #39]
     274:	ldr	x0, [sp, #24]
     278:	bl	60 <grub_efiserial_init-0x388>
     27c:	ldr	x0, [sp, #24]
     280:	ldr	w0, [x0, #68]
     284:	cmp	w0, #0x0
     288:	b.ne	2b0 <grub_efiserial_init-0x138>  // b.any
     28c:	ldr	x0, [sp, #24]
     290:	ldr	x0, [x0, #72]
     294:	ldr	x3, [x0, #40]
     298:	ldr	x0, [sp, #24]
     29c:	ldr	x0, [x0, #72]
     2a0:	add	x2, sp, #0x27
     2a4:	add	x1, sp, #0x28
     2a8:	blr	x3
     2ac:	b	2b4 <grub_efiserial_init-0x134>
     2b0:	nop
     2b4:	ldp	x29, x30, [sp], #48
     2b8:	ret
     2bc:	stp	x29, x30, [sp, #-32]!
     2c0:	mov	x29, sp
     2c4:	str	x0, [sp, #24]
     2c8:	str	x1, [sp, #16]
     2cc:	ldr	x0, [sp, #16]
     2d0:	ldr	w0, [x0, #8]
     2d4:	cmp	w0, #0x0
     2d8:	b.eq	314 <grub_efiserial_init-0xd4>  // b.none
     2dc:	ldr	x0, [sp, #16]
     2e0:	ldr	w0, [x0, #8]
     2e4:	cmp	w0, #0x1
     2e8:	b.eq	314 <grub_efiserial_init-0xd4>  // b.none
     2ec:	ldr	x0, [sp, #16]
     2f0:	ldr	w0, [x0, #8]
     2f4:	cmp	w0, #0x2
     2f8:	b.eq	314 <grub_efiserial_init-0xd4>  // b.none
     2fc:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     300:	add	x0, x0, #0x0
     304:	ldr	x1, [x0]
     308:	mov	w0, #0x12                  	// #18
     30c:	bl	0 <grub_error>
     310:	b	3c4 <grub_efiserial_init-0x24>
     314:	ldr	x0, [sp, #16]
     318:	ldr	w0, [x0, #12]
     31c:	cmp	w0, #0x0
     320:	b.eq	35c <grub_efiserial_init-0x8c>  // b.none
     324:	ldr	x0, [sp, #16]
     328:	ldr	w0, [x0, #12]
     32c:	cmp	w0, #0x1
     330:	b.eq	35c <grub_efiserial_init-0x8c>  // b.none
     334:	ldr	x0, [sp, #16]
     338:	ldr	w0, [x0, #12]
     33c:	cmp	w0, #0x2
     340:	b.eq	35c <grub_efiserial_init-0x8c>  // b.none
     344:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     348:	add	x0, x0, #0x0
     34c:	ldr	x1, [x0]
     350:	mov	w0, #0x12                  	// #18
     354:	bl	0 <grub_error>
     358:	b	3c4 <grub_efiserial_init-0x24>
     35c:	ldr	x0, [sp, #16]
     360:	ldr	w0, [x0, #4]
     364:	cmp	w0, #0x4
     368:	b.le	37c <grub_efiserial_init-0x6c>
     36c:	ldr	x0, [sp, #16]
     370:	ldr	w0, [x0, #4]
     374:	cmp	w0, #0x8
     378:	b.le	394 <grub_efiserial_init-0x54>
     37c:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     380:	add	x0, x0, #0x0
     384:	ldr	x1, [x0]
     388:	mov	w0, #0x12                  	// #18
     38c:	bl	0 <grub_error>
     390:	b	3c4 <grub_efiserial_init-0x24>
     394:	ldr	x0, [sp, #24]
     398:	add	x1, x0, #0x20
     39c:	ldr	x0, [sp, #16]
     3a0:	mov	x2, x1
     3a4:	mov	x3, x0
     3a8:	ldp	x0, x1, [x3]
     3ac:	stp	x0, x1, [x2]
     3b0:	ldp	x0, x1, [x3, #16]
     3b4:	stp	x0, x1, [x2, #16]
     3b8:	ldr	x0, [sp, #24]
     3bc:	str	wzr, [x0, #64]
     3c0:	mov	w0, #0x0                   	// #0
     3c4:	ldp	x29, x30, [sp], #32
     3c8:	ret
     3cc:	nop
	...

00000000000003e8 <grub_efiserial_init>:
     3e8:	stp	x29, x30, [sp, #-80]!
     3ec:	mov	x29, sp
     3f0:	str	wzr, [sp, #68]
     3f4:	add	x0, sp, #0x18
     3f8:	mov	x3, x0
     3fc:	mov	x2, #0x0                   	// #0
     400:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     404:	add	x0, x0, #0x0
     408:	ldr	x1, [x0]
     40c:	mov	w0, #0x2                   	// #2
     410:	bl	0 <grub_efi_locate_handle>
     414:	str	x0, [sp, #56]
     418:	ldr	x0, [sp, #56]
     41c:	cmp	x0, #0x0
     420:	b.eq	550 <grub_efiserial_init+0x168>  // b.none
     424:	ldr	x0, [sp, #56]
     428:	str	x0, [sp, #72]
     42c:	b	530 <grub_efiserial_init+0x148>
     430:	ldr	x0, [sp, #72]
     434:	ldr	x3, [x0]
     438:	mov	w2, #0x2                   	// #2
     43c:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     440:	add	x0, x0, #0x0
     444:	ldr	x1, [x0]
     448:	mov	x0, x3
     44c:	bl	0 <grub_efi_open_protocol>
     450:	str	x0, [sp, #48]
     454:	ldr	x0, [sp, #48]
     458:	cmp	x0, #0x0
     45c:	b.eq	520 <grub_efiserial_init+0x138>  // b.none
     460:	mov	x0, #0xc0                  	// #192
     464:	bl	0 <grub_zalloc>
     468:	str	x0, [sp, #40]
     46c:	ldr	x0, [sp, #40]
     470:	cmp	x0, #0x0
     474:	b.eq	558 <grub_efiserial_init+0x170>  // b.none
     478:	mov	x0, #0x18                  	// #24
     47c:	bl	0 <grub_malloc>
     480:	mov	x1, x0
     484:	ldr	x0, [sp, #40]
     488:	str	x1, [x0, #16]
     48c:	ldr	x0, [sp, #40]
     490:	ldr	x0, [x0, #16]
     494:	cmp	x0, #0x0
     498:	b.ne	4a8 <grub_efiserial_init+0xc0>  // b.any
     49c:	ldr	x0, [sp, #40]
     4a0:	bl	0 <grub_free>
     4a4:	b	55c <grub_efiserial_init+0x174>
     4a8:	ldr	x0, [sp, #40]
     4ac:	ldr	x4, [x0, #16]
     4b0:	ldr	w0, [sp, #68]
     4b4:	add	w1, w0, #0x1
     4b8:	str	w1, [sp, #68]
     4bc:	mov	w3, w0
     4c0:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     4c4:	add	x0, x0, #0x0
     4c8:	ldr	x2, [x0]
     4cc:	mov	x1, #0x18                  	// #24
     4d0:	mov	x0, x4
     4d4:	bl	0 <grub_snprintf>
     4d8:	ldr	x0, [sp, #40]
     4dc:	adrp	x1, 0 <grub_efiserial_init-0x3e8>
     4e0:	add	x1, x1, #0x0
     4e4:	ldr	x1, [x1]
     4e8:	str	x1, [x0, #24]
     4ec:	ldr	x0, [sp, #40]
     4f0:	ldr	x1, [sp, #48]
     4f4:	str	x1, [x0, #72]
     4f8:	ldr	x0, [sp, #40]
     4fc:	bl	0 <grub_efiserial_init-0x3e8>
     500:	str	w0, [sp, #36]
     504:	ldr	w0, [sp, #36]
     508:	cmp	w0, #0x0
     50c:	b.eq	514 <grub_efiserial_init+0x12c>  // b.none
     510:	bl	0 <grub_print_error>
     514:	ldr	x0, [sp, #40]
     518:	bl	dc0 <grub_serial_register>
     51c:	b	524 <grub_efiserial_init+0x13c>
     520:	nop
     524:	ldr	x0, [sp, #72]
     528:	add	x0, x0, #0x8
     52c:	str	x0, [sp, #72]
     530:	ldr	x0, [sp, #24]
     534:	sub	x1, x0, #0x1
     538:	str	x1, [sp, #24]
     53c:	cmp	x0, #0x0
     540:	b.ne	430 <grub_efiserial_init+0x48>  // b.any
     544:	ldr	x0, [sp, #56]
     548:	bl	0 <grub_free>
     54c:	b	55c <grub_efiserial_init+0x174>
     550:	nop
     554:	b	55c <grub_efiserial_init+0x174>
     558:	nop
     55c:	ldp	x29, x30, [sp], #80
     560:	ret
     564:	nop
	...
     580:	stp	x29, x30, [sp, #-48]!
     584:	mov	x29, sp
     588:	str	x0, [sp, #40]
     58c:	str	x1, [sp, #32]
     590:	str	x2, [sp, #24]
     594:	ldr	x2, [sp, #24]
     598:	ldr	x1, [sp, #32]
     59c:	ldr	x0, [sp, #40]
     5a0:	bl	0 <grub_memmove>
     5a4:	ldp	x29, x30, [sp], #48
     5a8:	ret
     5ac:	stp	x29, x30, [sp, #-32]!
     5b0:	mov	x29, sp
     5b4:	str	x0, [sp, #24]
     5b8:	str	x1, [sp, #16]
     5bc:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     5c0:	add	x0, x0, #0x0
     5c4:	ldr	x0, [x0]
     5c8:	ldr	x0, [x0]
     5cc:	cmp	x0, #0x0
     5d0:	b.eq	5ec <grub_efiserial_init+0x204>  // b.none
     5d4:	ldr	x1, [sp, #16]
     5d8:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     5dc:	add	x0, x0, #0x0
     5e0:	ldr	x0, [x0]
     5e4:	bl	0 <grub_list_push>
     5e8:	b	628 <grub_efiserial_init+0x240>
     5ec:	ldr	x0, [sp, #16]
     5f0:	ldr	x0, [x0, #24]
     5f4:	cmp	x0, #0x0
     5f8:	b.eq	614 <grub_efiserial_init+0x22c>  // b.none
     5fc:	ldr	x0, [sp, #16]
     600:	ldr	x1, [x0, #24]
     604:	ldr	x0, [sp, #16]
     608:	blr	x1
     60c:	cmp	w0, #0x0
     610:	b.ne	628 <grub_efiserial_init+0x240>  // b.any
     614:	ldr	x1, [sp, #16]
     618:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     61c:	add	x0, x0, #0x0
     620:	ldr	x0, [x0]
     624:	bl	0 <grub_list_push>
     628:	nop
     62c:	ldp	x29, x30, [sp], #32
     630:	ret
     634:	nop
	...
     648:	stp	x29, x30, [sp, #-32]!
     64c:	mov	x29, sp
     650:	str	x0, [sp, #24]
     654:	str	x1, [sp, #16]
     658:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     65c:	add	x0, x0, #0x0
     660:	ldr	x0, [x0]
     664:	ldr	x0, [x0]
     668:	cmp	x0, #0x0
     66c:	b.eq	688 <grub_efiserial_init+0x2a0>  // b.none
     670:	ldr	x1, [sp, #16]
     674:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     678:	add	x0, x0, #0x0
     67c:	ldr	x0, [x0]
     680:	bl	0 <grub_list_push>
     684:	b	6c4 <grub_efiserial_init+0x2dc>
     688:	ldr	x0, [sp, #16]
     68c:	ldr	x0, [x0, #24]
     690:	cmp	x0, #0x0
     694:	b.eq	6b0 <grub_efiserial_init+0x2c8>  // b.none
     698:	ldr	x0, [sp, #16]
     69c:	ldr	x1, [x0, #24]
     6a0:	ldr	x0, [sp, #16]
     6a4:	blr	x1
     6a8:	cmp	w0, #0x0
     6ac:	b.ne	6c4 <grub_efiserial_init+0x2dc>  // b.any
     6b0:	ldr	x1, [sp, #16]
     6b4:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     6b8:	add	x0, x0, #0x0
     6bc:	ldr	x0, [x0]
     6c0:	bl	0 <grub_list_push>
     6c4:	nop
     6c8:	ldp	x29, x30, [sp], #32
     6cc:	ret
	...
     6e0:	stp	x29, x30, [sp, #-32]!
     6e4:	mov	x29, sp
     6e8:	str	x0, [sp, #24]
     6ec:	ldr	x0, [sp, #24]
     6f0:	bl	0 <grub_list_remove>
     6f4:	ldr	x0, [sp, #24]
     6f8:	bl	0 <grub_list_remove>
     6fc:	nop
     700:	ldp	x29, x30, [sp], #32
     704:	ret
     708:	stp	x29, x30, [sp, #-32]!
     70c:	mov	x29, sp
     710:	str	x0, [sp, #24]
     714:	ldr	x0, [sp, #24]
     718:	bl	0 <grub_list_remove>
     71c:	ldr	x0, [sp, #24]
     720:	bl	0 <grub_list_remove>
     724:	nop
     728:	ldp	x29, x30, [sp], #32
     72c:	ret
     730:	stp	x29, x30, [sp, #-48]!
     734:	mov	x29, sp
     738:	str	x0, [sp, #24]
     73c:	str	w1, [sp, #20]
     740:	ldr	x0, [sp, #24]
     744:	ldr	x0, [x0, #136]
     748:	str	x0, [sp, #40]
     74c:	ldr	x0, [sp, #40]
     750:	ldr	x0, [x0, #88]
     754:	ldr	x0, [x0, #24]
     758:	ldr	x2, [x0, #16]
     75c:	ldr	x0, [sp, #40]
     760:	ldr	x0, [x0, #88]
     764:	ldr	w1, [sp, #20]
     768:	blr	x2
     76c:	nop
     770:	ldp	x29, x30, [sp], #48
     774:	ret
     778:	stp	x29, x30, [sp, #-48]!
     77c:	mov	x29, sp
     780:	str	x0, [sp, #24]
     784:	ldr	x0, [sp, #24]
     788:	ldr	x0, [x0, #56]
     78c:	str	x0, [sp, #40]
     790:	ldr	x0, [sp, #40]
     794:	ldr	x0, [x0, #40]
     798:	ldr	x0, [x0, #24]
     79c:	ldr	x1, [x0, #8]
     7a0:	ldr	x0, [sp, #40]
     7a4:	ldr	x0, [x0, #40]
     7a8:	blr	x1
     7ac:	ldp	x29, x30, [sp], #48
     7b0:	ret

00000000000007b4 <grub_serial_find>:
     7b4:	stp	x29, x30, [sp, #-48]!
     7b8:	mov	x29, sp
     7bc:	str	x0, [sp, #24]
     7c0:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     7c4:	add	x0, x0, #0x0
     7c8:	ldr	x0, [x0]
     7cc:	ldr	x0, [x0]
     7d0:	str	x0, [sp, #40]
     7d4:	b	7fc <grub_serial_find+0x48>
     7d8:	ldr	x0, [sp, #40]
     7dc:	ldr	x0, [x0, #16]
     7e0:	ldr	x1, [sp, #24]
     7e4:	bl	0 <grub_strcmp>
     7e8:	cmp	w0, #0x0
     7ec:	b.eq	80c <grub_serial_find+0x58>  // b.none
     7f0:	ldr	x0, [sp, #40]
     7f4:	ldr	x0, [x0]
     7f8:	str	x0, [sp, #40]
     7fc:	ldr	x0, [sp, #40]
     800:	cmp	x0, #0x0
     804:	b.ne	7d8 <grub_serial_find+0x24>  // b.any
     808:	b	810 <grub_serial_find+0x5c>
     80c:	nop
     810:	ldr	x0, [sp, #40]
     814:	ldp	x29, x30, [sp], #48
     818:	ret
     81c:	nop
	...
     828:	stp	x29, x30, [sp, #-160]!
     82c:	mov	x29, sp
     830:	str	x0, [sp, #40]
     834:	str	w1, [sp, #36]
     838:	str	x2, [sp, #24]
     83c:	ldr	x0, [sp, #40]
     840:	ldr	x0, [x0, #8]
     844:	str	x0, [sp, #144]
     848:	str	xzr, [sp, #152]
     84c:	ldr	x0, [sp, #144]
     850:	ldr	w0, [x0]
     854:	cmp	w0, #0x0
     858:	b.eq	898 <grub_serial_find+0xe4>  // b.none
     85c:	ldr	x0, [sp, #144]
     860:	ldr	x0, [x0, #8]
     864:	mov	w2, #0x0                   	// #0
     868:	mov	x1, #0x0                   	// #0
     86c:	bl	0 <grub_strtoul>
     870:	add	x4, sp, #0x58
     874:	mov	x3, x0
     878:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     87c:	add	x0, x0, #0x0
     880:	ldr	x2, [x0]
     884:	mov	x1, #0x28                  	// #40
     888:	mov	x0, x4
     88c:	bl	0 <grub_snprintf>
     890:	add	x0, sp, #0x58
     894:	str	x0, [sp, #152]
     898:	ldr	x0, [sp, #144]
     89c:	add	x0, x0, #0x10
     8a0:	ldr	w0, [x0]
     8a4:	cmp	w0, #0x0
     8a8:	b.eq	8ec <grub_serial_find+0x138>  // b.none
     8ac:	ldr	x0, [sp, #144]
     8b0:	add	x0, x0, #0x10
     8b4:	ldr	x0, [x0, #8]
     8b8:	mov	w2, #0x0                   	// #0
     8bc:	mov	x1, #0x0                   	// #0
     8c0:	bl	0 <grub_strtoul>
     8c4:	add	x4, sp, #0x58
     8c8:	mov	x3, x0
     8cc:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     8d0:	add	x0, x0, #0x0
     8d4:	ldr	x2, [x0]
     8d8:	mov	x1, #0x28                  	// #40
     8dc:	mov	x0, x4
     8e0:	bl	0 <grub_snprintf>
     8e4:	add	x0, sp, #0x58
     8e8:	str	x0, [sp, #152]
     8ec:	ldr	w0, [sp, #36]
     8f0:	cmp	w0, #0x0
     8f4:	b.le	904 <grub_serial_find+0x150>
     8f8:	ldr	x0, [sp, #24]
     8fc:	ldr	x0, [x0]
     900:	str	x0, [sp, #152]
     904:	ldr	x0, [sp, #152]
     908:	cmp	x0, #0x0
     90c:	b.ne	920 <grub_serial_find+0x16c>  // b.any
     910:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     914:	add	x0, x0, #0x0
     918:	ldr	x0, [x0]
     91c:	str	x0, [sp, #152]
     920:	ldr	x0, [sp, #152]
     924:	bl	7b4 <grub_serial_find>
     928:	str	x0, [sp, #136]
     92c:	ldr	x0, [sp, #136]
     930:	cmp	x0, #0x0
     934:	b.ne	954 <grub_serial_find+0x1a0>  // b.any
     938:	ldr	x2, [sp, #152]
     93c:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     940:	add	x0, x0, #0x0
     944:	ldr	x1, [x0]
     948:	mov	w0, #0x12                  	// #18
     94c:	bl	0 <grub_error>
     950:	b	d34 <grub_serial_find+0x580>
     954:	ldr	x0, [sp, #136]
     958:	add	x0, x0, #0x20
     95c:	add	x2, sp, #0x38
     960:	mov	x3, x0
     964:	ldp	x0, x1, [x3]
     968:	stp	x0, x1, [x2]
     96c:	ldp	x0, x1, [x3, #16]
     970:	stp	x0, x1, [x2, #16]
     974:	ldr	x0, [sp, #144]
     978:	add	x0, x0, #0x20
     97c:	ldr	w0, [x0]
     980:	cmp	w0, #0x0
     984:	b.eq	9c8 <grub_serial_find+0x214>  // b.none
     988:	ldr	x0, [sp, #144]
     98c:	add	x0, x0, #0x20
     990:	ldr	x0, [x0, #8]
     994:	mov	w2, #0x0                   	// #0
     998:	mov	x1, #0x0                   	// #0
     99c:	bl	0 <grub_strtoul>
     9a0:	str	w0, [sp, #56]
     9a4:	ldr	w0, [sp, #56]
     9a8:	cmp	w0, #0x0
     9ac:	b.ne	9c8 <grub_serial_find+0x214>  // b.any
     9b0:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     9b4:	add	x0, x0, #0x0
     9b8:	ldr	x1, [x0]
     9bc:	mov	w0, #0x12                  	// #18
     9c0:	bl	0 <grub_error>
     9c4:	b	d34 <grub_serial_find+0x580>
     9c8:	ldr	x0, [sp, #144]
     9cc:	add	x0, x0, #0x30
     9d0:	ldr	w0, [x0]
     9d4:	cmp	w0, #0x0
     9d8:	b.eq	9f8 <grub_serial_find+0x244>  // b.none
     9dc:	ldr	x0, [sp, #144]
     9e0:	add	x0, x0, #0x30
     9e4:	ldr	x0, [x0, #8]
     9e8:	mov	w2, #0x0                   	// #0
     9ec:	mov	x1, #0x0                   	// #0
     9f0:	bl	0 <grub_strtoul>
     9f4:	str	w0, [sp, #60]
     9f8:	ldr	x0, [sp, #144]
     9fc:	add	x0, x0, #0x40
     a00:	ldr	w0, [x0]
     a04:	cmp	w0, #0x0
     a08:	b.eq	abc <grub_serial_find+0x308>  // b.none
     a0c:	ldr	x0, [sp, #144]
     a10:	add	x0, x0, #0x40
     a14:	ldr	x2, [x0, #8]
     a18:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     a1c:	add	x0, x0, #0x0
     a20:	ldr	x1, [x0]
     a24:	mov	x0, x2
     a28:	bl	0 <grub_strcmp>
     a2c:	cmp	w0, #0x0
     a30:	b.ne	a3c <grub_serial_find+0x288>  // b.any
     a34:	str	wzr, [sp, #64]
     a38:	b	abc <grub_serial_find+0x308>
     a3c:	ldr	x0, [sp, #144]
     a40:	add	x0, x0, #0x40
     a44:	ldr	x2, [x0, #8]
     a48:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     a4c:	add	x0, x0, #0x0
     a50:	ldr	x1, [x0]
     a54:	mov	x0, x2
     a58:	bl	0 <grub_strcmp>
     a5c:	cmp	w0, #0x0
     a60:	b.ne	a70 <grub_serial_find+0x2bc>  // b.any
     a64:	mov	w0, #0x1                   	// #1
     a68:	str	w0, [sp, #64]
     a6c:	b	abc <grub_serial_find+0x308>
     a70:	ldr	x0, [sp, #144]
     a74:	add	x0, x0, #0x40
     a78:	ldr	x2, [x0, #8]
     a7c:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     a80:	add	x0, x0, #0x0
     a84:	ldr	x1, [x0]
     a88:	mov	x0, x2
     a8c:	bl	0 <grub_strcmp>
     a90:	cmp	w0, #0x0
     a94:	b.ne	aa4 <grub_serial_find+0x2f0>  // b.any
     a98:	mov	w0, #0x2                   	// #2
     a9c:	str	w0, [sp, #64]
     aa0:	b	abc <grub_serial_find+0x308>
     aa4:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     aa8:	add	x0, x0, #0x0
     aac:	ldr	x1, [x0]
     ab0:	mov	w0, #0x12                  	// #18
     ab4:	bl	0 <grub_error>
     ab8:	b	d34 <grub_serial_find+0x580>
     abc:	ldr	x0, [sp, #144]
     ac0:	add	x0, x0, #0x70
     ac4:	ldr	w0, [x0]
     ac8:	cmp	w0, #0x0
     acc:	b.eq	b4c <grub_serial_find+0x398>  // b.none
     ad0:	ldr	x0, [sp, #144]
     ad4:	add	x0, x0, #0x70
     ad8:	ldr	x2, [x0, #8]
     adc:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     ae0:	add	x0, x0, #0x0
     ae4:	ldr	x1, [x0]
     ae8:	mov	x0, x2
     aec:	bl	0 <grub_strcmp>
     af0:	cmp	w0, #0x0
     af4:	b.ne	b04 <grub_serial_find+0x350>  // b.any
     af8:	mov	w0, #0x1                   	// #1
     afc:	str	w0, [sp, #80]
     b00:	b	b4c <grub_serial_find+0x398>
     b04:	ldr	x0, [sp, #144]
     b08:	add	x0, x0, #0x70
     b0c:	ldr	x2, [x0, #8]
     b10:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     b14:	add	x0, x0, #0x0
     b18:	ldr	x1, [x0]
     b1c:	mov	x0, x2
     b20:	bl	0 <grub_strcmp>
     b24:	cmp	w0, #0x0
     b28:	b.ne	b34 <grub_serial_find+0x380>  // b.any
     b2c:	str	wzr, [sp, #80]
     b30:	b	b4c <grub_serial_find+0x398>
     b34:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     b38:	add	x0, x0, #0x0
     b3c:	ldr	x1, [x0]
     b40:	mov	w0, #0x12                  	// #18
     b44:	bl	0 <grub_error>
     b48:	b	d34 <grub_serial_find+0x580>
     b4c:	ldr	x0, [sp, #144]
     b50:	add	x0, x0, #0x50
     b54:	ldr	w0, [x0]
     b58:	cmp	w0, #0x0
     b5c:	b.eq	c10 <grub_serial_find+0x45c>  // b.none
     b60:	ldr	x0, [sp, #144]
     b64:	add	x0, x0, #0x50
     b68:	ldr	x2, [x0, #8]
     b6c:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     b70:	add	x0, x0, #0x0
     b74:	ldr	x1, [x0]
     b78:	mov	x0, x2
     b7c:	bl	0 <grub_strcmp>
     b80:	cmp	w0, #0x0
     b84:	b.ne	b90 <grub_serial_find+0x3dc>  // b.any
     b88:	str	wzr, [sp, #68]
     b8c:	b	c10 <grub_serial_find+0x45c>
     b90:	ldr	x0, [sp, #144]
     b94:	add	x0, x0, #0x50
     b98:	ldr	x2, [x0, #8]
     b9c:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     ba0:	add	x0, x0, #0x0
     ba4:	ldr	x1, [x0]
     ba8:	mov	x0, x2
     bac:	bl	0 <grub_strcmp>
     bb0:	cmp	w0, #0x0
     bb4:	b.ne	bc4 <grub_serial_find+0x410>  // b.any
     bb8:	mov	w0, #0x2                   	// #2
     bbc:	str	w0, [sp, #68]
     bc0:	b	c10 <grub_serial_find+0x45c>
     bc4:	ldr	x0, [sp, #144]
     bc8:	add	x0, x0, #0x50
     bcc:	ldr	x2, [x0, #8]
     bd0:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     bd4:	add	x0, x0, #0x0
     bd8:	ldr	x1, [x0]
     bdc:	mov	x0, x2
     be0:	bl	0 <grub_strcmp>
     be4:	cmp	w0, #0x0
     be8:	b.ne	bf8 <grub_serial_find+0x444>  // b.any
     bec:	mov	w0, #0x1                   	// #1
     bf0:	str	w0, [sp, #68]
     bf4:	b	c10 <grub_serial_find+0x45c>
     bf8:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     bfc:	add	x0, x0, #0x0
     c00:	ldr	x1, [x0]
     c04:	mov	w0, #0x12                  	// #18
     c08:	bl	0 <grub_error>
     c0c:	b	d34 <grub_serial_find+0x580>
     c10:	ldr	x0, [sp, #144]
     c14:	add	x0, x0, #0x60
     c18:	ldr	w0, [x0]
     c1c:	cmp	w0, #0x0
     c20:	b.eq	ce8 <grub_serial_find+0x534>  // b.none
     c24:	ldr	x0, [sp, #144]
     c28:	add	x0, x0, #0x60
     c2c:	ldr	x0, [x0, #8]
     c30:	add	x1, sp, #0x30
     c34:	mov	w2, #0x0                   	// #0
     c38:	bl	0 <grub_strtoull>
     c3c:	str	x0, [sp, #72]
     c40:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     c44:	add	x0, x0, #0x0
     c48:	ldr	x0, [x0]
     c4c:	ldr	w0, [x0]
     c50:	cmp	w0, #0x0
     c54:	b.eq	c6c <grub_serial_find+0x4b8>  // b.none
     c58:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     c5c:	add	x0, x0, #0x0
     c60:	ldr	x0, [x0]
     c64:	ldr	w0, [x0]
     c68:	b	d34 <grub_serial_find+0x580>
     c6c:	ldr	x0, [sp, #48]
     c70:	cmp	x0, #0x0
     c74:	b.eq	c9c <grub_serial_find+0x4e8>  // b.none
     c78:	ldr	x0, [sp, #48]
     c7c:	ldrb	w0, [x0]
     c80:	cmp	w0, #0x4d
     c84:	b.ne	c9c <grub_serial_find+0x4e8>  // b.any
     c88:	ldr	x1, [sp, #72]
     c8c:	mov	x0, #0x4240                	// #16960
     c90:	movk	x0, #0xf, lsl #16
     c94:	mul	x0, x1, x0
     c98:	str	x0, [sp, #72]
     c9c:	ldr	x0, [sp, #48]
     ca0:	cmp	x0, #0x0
     ca4:	b.eq	ce8 <grub_serial_find+0x534>  // b.none
     ca8:	ldr	x0, [sp, #48]
     cac:	ldrb	w0, [x0]
     cb0:	cmp	w0, #0x6b
     cb4:	b.eq	cc8 <grub_serial_find+0x514>  // b.none
     cb8:	ldr	x0, [sp, #48]
     cbc:	ldrb	w0, [x0]
     cc0:	cmp	w0, #0x4b
     cc4:	b.ne	ce8 <grub_serial_find+0x534>  // b.any
     cc8:	ldr	x1, [sp, #72]
     ccc:	mov	x0, x1
     cd0:	lsl	x0, x0, #5
     cd4:	sub	x0, x0, x1
     cd8:	lsl	x0, x0, #2
     cdc:	add	x0, x0, x1
     ce0:	lsl	x0, x0, #3
     ce4:	str	x0, [sp, #72]
     ce8:	ldr	w0, [sp, #56]
     cec:	cmp	w0, #0x0
     cf0:	b.ne	cfc <grub_serial_find+0x548>  // b.any
     cf4:	mov	w0, #0x2580                	// #9600
     cf8:	str	w0, [sp, #56]
     cfc:	ldr	x0, [sp, #136]
     d00:	ldr	x0, [x0, #24]
     d04:	ldr	x2, [x0]
     d08:	add	x0, sp, #0x38
     d0c:	mov	x1, x0
     d10:	ldr	x0, [sp, #136]
     d14:	blr	x2
     d18:	str	w0, [sp, #132]
     d1c:	ldr	w0, [sp, #132]
     d20:	cmp	w0, #0x0
     d24:	b.eq	d30 <grub_serial_find+0x57c>  // b.none
     d28:	ldr	w0, [sp, #132]
     d2c:	b	d34 <grub_serial_find+0x580>
     d30:	mov	w0, #0x0                   	// #0
     d34:	ldp	x29, x30, [sp], #160
     d38:	ret
     d3c:	nop
	...

0000000000000dc0 <grub_serial_register>:
     dc0:	stp	x29, x30, [sp, #-64]!
     dc4:	mov	x29, sp
     dc8:	str	x0, [sp, #24]
     dcc:	mov	x0, #0x40                  	// #64
     dd0:	bl	0 <grub_malloc>
     dd4:	str	x0, [sp, #56]
     dd8:	ldr	x0, [sp, #56]
     ddc:	cmp	x0, #0x0
     de0:	b.ne	df8 <grub_serial_register+0x38>  // b.any
     de4:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     de8:	add	x0, x0, #0x0
     dec:	ldr	x0, [x0]
     df0:	ldr	w0, [x0]
     df4:	b	1034 <grub_serial_register+0x274>
     df8:	mov	x0, #0x30                  	// #48
     dfc:	bl	0 <grub_malloc>
     e00:	str	x0, [sp, #48]
     e04:	ldr	x0, [sp, #48]
     e08:	cmp	x0, #0x0
     e0c:	b.ne	e2c <grub_serial_register+0x6c>  // b.any
     e10:	ldr	x0, [sp, #56]
     e14:	bl	0 <grub_free>
     e18:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     e1c:	add	x0, x0, #0x0
     e20:	ldr	x0, [x0]
     e24:	ldr	w0, [x0]
     e28:	b	1034 <grub_serial_register+0x274>
     e2c:	mov	x2, #0x40                  	// #64
     e30:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     e34:	add	x0, x0, #0x0
     e38:	ldr	x1, [x0]
     e3c:	ldr	x0, [sp, #56]
     e40:	bl	580 <grub_efiserial_init+0x198>
     e44:	ldr	x0, [sp, #56]
     e48:	ldr	x1, [sp, #48]
     e4c:	str	x1, [x0, #56]
     e50:	ldr	x0, [sp, #24]
     e54:	ldr	x0, [x0, #16]
     e58:	mov	x1, x0
     e5c:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     e60:	add	x0, x0, #0x0
     e64:	ldr	x0, [x0]
     e68:	bl	0 <grub_xasprintf>
     e6c:	mov	x1, x0
     e70:	ldr	x0, [sp, #56]
     e74:	str	x1, [x0, #16]
     e78:	mov	x2, #0x30                  	// #48
     e7c:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     e80:	add	x0, x0, #0x0
     e84:	ldr	x1, [x0]
     e88:	ldr	x0, [sp, #48]
     e8c:	bl	580 <grub_efiserial_init+0x198>
     e90:	ldr	x0, [sp, #56]
     e94:	ldr	x0, [x0, #16]
     e98:	cmp	x0, #0x0
     e9c:	b.ne	ec4 <grub_serial_register+0x104>  // b.any
     ea0:	ldr	x0, [sp, #56]
     ea4:	bl	0 <grub_free>
     ea8:	ldr	x0, [sp, #48]
     eac:	bl	0 <grub_free>
     eb0:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     eb4:	add	x0, x0, #0x0
     eb8:	ldr	x0, [x0]
     ebc:	ldr	w0, [x0]
     ec0:	b	1034 <grub_serial_register+0x274>
     ec4:	mov	x0, #0x90                  	// #144
     ec8:	bl	0 <grub_zalloc>
     ecc:	str	x0, [sp, #40]
     ed0:	ldr	x0, [sp, #40]
     ed4:	cmp	x0, #0x0
     ed8:	b.ne	f0c <grub_serial_register+0x14c>  // b.any
     edc:	ldr	x0, [sp, #48]
     ee0:	bl	0 <grub_free>
     ee4:	ldr	x0, [sp, #56]
     ee8:	ldr	x0, [x0, #16]
     eec:	bl	0 <grub_free>
     ef0:	ldr	x0, [sp, #56]
     ef4:	bl	0 <grub_free>
     ef8:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     efc:	add	x0, x0, #0x0
     f00:	ldr	x0, [x0]
     f04:	ldr	w0, [x0]
     f08:	b	1034 <grub_serial_register+0x274>
     f0c:	mov	x0, #0x60                  	// #96
     f10:	bl	0 <grub_malloc>
     f14:	str	x0, [sp, #32]
     f18:	ldr	x0, [sp, #32]
     f1c:	cmp	x0, #0x0
     f20:	b.ne	f5c <grub_serial_register+0x19c>  // b.any
     f24:	ldr	x0, [sp, #48]
     f28:	bl	0 <grub_free>
     f2c:	ldr	x0, [sp, #56]
     f30:	ldr	x0, [x0, #16]
     f34:	bl	0 <grub_free>
     f38:	ldr	x0, [sp, #40]
     f3c:	bl	0 <grub_free>
     f40:	ldr	x0, [sp, #56]
     f44:	bl	0 <grub_free>
     f48:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     f4c:	add	x0, x0, #0x0
     f50:	ldr	x0, [x0]
     f54:	ldr	w0, [x0]
     f58:	b	1034 <grub_serial_register+0x274>
     f5c:	mov	x2, #0x90                  	// #144
     f60:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     f64:	add	x0, x0, #0x0
     f68:	ldr	x1, [x0]
     f6c:	ldr	x0, [sp, #40]
     f70:	bl	580 <grub_efiserial_init+0x198>
     f74:	ldr	x0, [sp, #40]
     f78:	ldr	x1, [sp, #32]
     f7c:	str	x1, [x0, #136]
     f80:	ldr	x0, [sp, #56]
     f84:	ldr	x1, [x0, #16]
     f88:	ldr	x0, [sp, #40]
     f8c:	str	x1, [x0, #16]
     f90:	mov	x2, #0x60                  	// #96
     f94:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     f98:	add	x0, x0, #0x0
     f9c:	ldr	x1, [x0]
     fa0:	ldr	x0, [sp, #32]
     fa4:	bl	580 <grub_efiserial_init+0x198>
     fa8:	ldr	x1, [sp, #24]
     fac:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     fb0:	add	x0, x0, #0x0
     fb4:	ldr	x0, [x0]
     fb8:	bl	0 <grub_list_push>
     fbc:	ldr	x0, [sp, #56]
     fc0:	ldr	x0, [x0, #56]
     fc4:	ldr	x1, [sp, #24]
     fc8:	str	x1, [x0, #40]
     fcc:	ldr	x0, [sp, #40]
     fd0:	ldr	x0, [x0, #136]
     fd4:	ldr	x1, [sp, #24]
     fd8:	str	x1, [x0, #88]
     fdc:	ldr	x0, [sp, #24]
     fe0:	ldr	x1, [sp, #56]
     fe4:	str	x1, [x0, #184]
     fe8:	ldr	x0, [sp, #24]
     fec:	ldr	x1, [sp, #40]
     ff0:	str	x1, [x0, #176]
     ff4:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
     ff8:	add	x0, x0, #0x0
     ffc:	ldr	x1, [x0]
    1000:	ldr	x0, [sp, #40]
    1004:	bl	0 <grub_terminfo_output_register>
    1008:	ldr	x1, [sp, #56]
    100c:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
    1010:	add	x0, x0, #0x0
    1014:	ldr	x0, [x0]
    1018:	bl	5ac <grub_efiserial_init+0x1c4>
    101c:	ldr	x1, [sp, #40]
    1020:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
    1024:	add	x0, x0, #0x0
    1028:	ldr	x0, [x0]
    102c:	bl	648 <grub_efiserial_init+0x260>
    1030:	mov	w0, #0x0                   	// #0
    1034:	ldp	x29, x30, [sp], #64
    1038:	ret
    103c:	nop
	...

0000000000001088 <grub_serial_unregister>:
    1088:	stp	x29, x30, [sp, #-32]!
    108c:	mov	x29, sp
    1090:	str	x0, [sp, #24]
    1094:	ldr	x0, [sp, #24]
    1098:	ldr	x0, [x0, #24]
    109c:	ldr	x0, [x0, #24]
    10a0:	cmp	x0, #0x0
    10a4:	b.eq	10bc <grub_serial_unregister+0x34>  // b.none
    10a8:	ldr	x0, [sp, #24]
    10ac:	ldr	x0, [x0, #24]
    10b0:	ldr	x1, [x0, #24]
    10b4:	ldr	x0, [sp, #24]
    10b8:	blr	x1
    10bc:	ldr	x0, [sp, #24]
    10c0:	ldr	x0, [x0, #184]
    10c4:	cmp	x0, #0x0
    10c8:	b.eq	10d8 <grub_serial_unregister+0x50>  // b.none
    10cc:	ldr	x0, [sp, #24]
    10d0:	ldr	x0, [x0, #184]
    10d4:	bl	6e0 <grub_efiserial_init+0x2f8>
    10d8:	ldr	x0, [sp, #24]
    10dc:	ldr	x0, [x0, #176]
    10e0:	cmp	x0, #0x0
    10e4:	b.eq	10f4 <grub_serial_unregister+0x6c>  // b.none
    10e8:	ldr	x0, [sp, #24]
    10ec:	ldr	x0, [x0, #176]
    10f0:	bl	708 <grub_efiserial_init+0x320>
    10f4:	ldr	x0, [sp, #24]
    10f8:	bl	0 <grub_list_remove>
    10fc:	nop
    1100:	ldp	x29, x30, [sp], #32
    1104:	ret

0000000000001108 <grub_serial_unregister_driver>:
    1108:	stp	x29, x30, [sp, #-48]!
    110c:	mov	x29, sp
    1110:	str	x0, [sp, #24]
    1114:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
    1118:	add	x0, x0, #0x0
    111c:	ldr	x0, [x0]
    1120:	ldr	x0, [x0]
    1124:	str	x0, [sp, #40]
    1128:	b	115c <grub_serial_unregister_driver+0x54>
    112c:	ldr	x0, [sp, #40]
    1130:	ldr	x0, [x0]
    1134:	str	x0, [sp, #32]
    1138:	ldr	x0, [sp, #40]
    113c:	ldr	x0, [x0, #24]
    1140:	ldr	x1, [sp, #24]
    1144:	cmp	x1, x0
    1148:	b.ne	1154 <grub_serial_unregister_driver+0x4c>  // b.any
    114c:	ldr	x0, [sp, #40]
    1150:	bl	1088 <grub_serial_unregister>
    1154:	ldr	x0, [sp, #32]
    1158:	str	x0, [sp, #40]
    115c:	ldr	x0, [sp, #40]
    1160:	cmp	x0, #0x0
    1164:	b.ne	112c <grub_serial_unregister_driver+0x24>  // b.any
    1168:	nop
    116c:	nop
    1170:	ldp	x29, x30, [sp], #48
    1174:	ret
	...

0000000000001180 <grub_mod_init>:
    1180:	stp	x29, x30, [sp, #-32]!
    1184:	mov	x29, sp
    1188:	str	x0, [sp, #24]
    118c:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
    1190:	add	x0, x0, #0x0
    1194:	ldr	x5, [x0]
    1198:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
    119c:	add	x0, x0, #0x0
    11a0:	ldr	x4, [x0]
    11a4:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
    11a8:	add	x0, x0, #0x0
    11ac:	ldr	x3, [x0]
    11b0:	mov	w2, #0x0                   	// #0
    11b4:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
    11b8:	add	x0, x0, #0x0
    11bc:	ldr	x1, [x0]
    11c0:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
    11c4:	add	x0, x0, #0x0
    11c8:	ldr	x0, [x0]
    11cc:	bl	0 <grub_register_extcmd>
    11d0:	mov	x1, x0
    11d4:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
    11d8:	add	x0, x0, #0x0
    11dc:	ldr	x0, [x0]
    11e0:	str	x1, [x0]
    11e4:	mov	x2, #0x60                  	// #96
    11e8:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
    11ec:	add	x0, x0, #0x0
    11f0:	ldr	x1, [x0]
    11f4:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
    11f8:	add	x0, x0, #0x0
    11fc:	ldr	x0, [x0]
    1200:	bl	580 <grub_efiserial_init+0x198>
    1204:	mov	x2, #0x30                  	// #48
    1208:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
    120c:	add	x0, x0, #0x0
    1210:	ldr	x1, [x0]
    1214:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
    1218:	add	x0, x0, #0x0
    121c:	ldr	x0, [x0]
    1220:	bl	580 <grub_efiserial_init+0x198>
    1224:	bl	3e8 <grub_efiserial_init>
    1228:	nop
    122c:	ldp	x29, x30, [sp], #32
    1230:	ret
    1234:	nop
	...

0000000000001288 <grub_mod_fini>:
    1288:	stp	x29, x30, [sp, #-16]!
    128c:	mov	x29, sp
    1290:	b	12a8 <grub_mod_fini+0x20>
    1294:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
    1298:	add	x0, x0, #0x0
    129c:	ldr	x0, [x0]
    12a0:	ldr	x0, [x0]
    12a4:	bl	1088 <grub_serial_unregister>
    12a8:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
    12ac:	add	x0, x0, #0x0
    12b0:	ldr	x0, [x0]
    12b4:	ldr	x0, [x0]
    12b8:	cmp	x0, #0x0
    12bc:	b.ne	1294 <grub_mod_fini+0xc>  // b.any
    12c0:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
    12c4:	add	x0, x0, #0x0
    12c8:	ldr	x0, [x0]
    12cc:	ldr	w0, [x0]
    12d0:	cmp	w0, #0x0
    12d4:	b.eq	12f8 <grub_mod_fini+0x70>  // b.none
    12d8:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
    12dc:	add	x0, x0, #0x0
    12e0:	ldr	x0, [x0]
    12e4:	bl	6e0 <grub_efiserial_init+0x2f8>
    12e8:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
    12ec:	add	x0, x0, #0x0
    12f0:	ldr	x0, [x0]
    12f4:	bl	708 <grub_efiserial_init+0x320>
    12f8:	adrp	x0, 0 <grub_efiserial_init-0x3e8>
    12fc:	add	x0, x0, #0x0
    1300:	ldr	x0, [x0]
    1304:	ldr	x0, [x0]
    1308:	bl	0 <grub_unregister_extcmd>
    130c:	nop
    1310:	ldp	x29, x30, [sp], #16
    1314:	ret
	...
