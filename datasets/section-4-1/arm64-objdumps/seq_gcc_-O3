
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//seq_gcc_-O3:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000000fc8 <_init>:
 fc8:	stp	x29, x30, [sp, #-16]!
 fcc:	mov	x29, sp
 fd0:	bl	11f0 <call_weak_fn>
 fd4:	ldp	x29, x30, [sp], #16
 fd8:	ret

Disassembly of section .plt:

0000000000000fe0 <.plt>:
     fe0:	stp	x16, x30, [sp, #-16]!
     fe4:	adrp	x16, 14000 <__FRAME_END__+0xfda4>
     fe8:	ldr	x17, [x16, #4088]
     fec:	add	x16, x16, #0xff8
     ff0:	br	x17
     ff4:	nop
     ff8:	nop
     ffc:	nop

0000000000001000 <memcpy@plt>:
    1000:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1004:	ldr	x17, [x16]
    1008:	add	x16, x16, #0x0
    100c:	br	x17

0000000000001010 <all_digits@plt>:
    1010:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1014:	ldr	x17, [x16, #8]
    1018:	add	x16, x16, #0x8
    101c:	br	x17

0000000000001020 <fputs@plt>:
    1020:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1024:	ldr	x17, [x16, #16]
    1028:	add	x16, x16, #0x10
    102c:	br	x17

0000000000001030 <builtin_error@plt>:
    1030:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1034:	ldr	x17, [x16, #24]
    1038:	add	x16, x16, #0x18
    103c:	br	x17

0000000000001040 <builtin_warning@plt>:
    1040:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1044:	ldr	x17, [x16, #32]
    1048:	add	x16, x16, #0x20
    104c:	br	x17

0000000000001050 <__cxa_finalize@plt>:
    1050:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1054:	ldr	x17, [x16, #40]
    1058:	add	x16, x16, #0x28
    105c:	br	x17

0000000000001060 <sprintf@plt>:
    1060:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1064:	ldr	x17, [x16, #48]
    1068:	add	x16, x16, #0x30
    106c:	br	x17

0000000000001070 <snprintf@plt>:
    1070:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1074:	ldr	x17, [x16, #56]
    1078:	add	x16, x16, #0x38
    107c:	br	x17

0000000000001080 <locale_decpoint@plt>:
    1080:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1084:	ldr	x17, [x16, #64]
    1088:	add	x16, x16, #0x40
    108c:	br	x17

0000000000001090 <print_intseq@plt>:
    1090:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1094:	ldr	x17, [x16, #72]
    1098:	add	x16, x16, #0x48
    109c:	br	x17

00000000000010a0 <builtin_help@plt>:
    10a0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10a4:	ldr	x17, [x16, #80]
    10a8:	add	x16, x16, #0x50
    10ac:	br	x17

00000000000010b0 <xmalloc@plt>:
    10b0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10b4:	ldr	x17, [x16, #88]
    10b8:	add	x16, x16, #0x58
    10bc:	br	x17

00000000000010c0 <builtin_usage@plt>:
    10c0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10c4:	ldr	x17, [x16, #96]
    10c8:	add	x16, x16, #0x60
    10cc:	br	x17

00000000000010d0 <strerror@plt>:
    10d0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10d4:	ldr	x17, [x16, #104]
    10d8:	add	x16, x16, #0x68
    10dc:	br	x17

00000000000010e0 <__gmon_start__@plt>:
    10e0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10e4:	ldr	x17, [x16, #112]
    10e8:	add	x16, x16, #0x70
    10ec:	br	x17

00000000000010f0 <__ctype_b_loc@plt>:
    10f0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10f4:	ldr	x17, [x16, #120]
    10f8:	add	x16, x16, #0x78
    10fc:	br	x17

0000000000001100 <strtold@plt>:
    1100:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1104:	ldr	x17, [x16, #128]
    1108:	add	x16, x16, #0x80
    110c:	br	x17

0000000000001110 <print_fltseq@plt>:
    1110:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1114:	ldr	x17, [x16, #136]
    1118:	add	x16, x16, #0x88
    111c:	br	x17

0000000000001120 <free@plt>:
    1120:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1124:	ldr	x17, [x16, #144]
    1128:	add	x16, x16, #0x90
    112c:	br	x17

0000000000001130 <internal_getopt@plt>:
    1130:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1134:	ldr	x17, [x16, #152]
    1138:	add	x16, x16, #0x98
    113c:	br	x17

0000000000001140 <reset_internal_getopt@plt>:
    1140:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1144:	ldr	x17, [x16, #160]
    1148:	add	x16, x16, #0xa0
    114c:	br	x17

0000000000001150 <strspn@plt>:
    1150:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1154:	ldr	x17, [x16, #168]
    1158:	add	x16, x16, #0xa8
    115c:	br	x17

0000000000001160 <strchr@plt>:
    1160:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1164:	ldr	x17, [x16, #176]
    1168:	add	x16, x16, #0xb0
    116c:	br	x17

0000000000001170 <sh_chkwrite@plt>:
    1170:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1174:	ldr	x17, [x16, #184]
    1178:	add	x16, x16, #0xb8
    117c:	br	x17

0000000000001180 <strcpy@plt>:
    1180:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1184:	ldr	x17, [x16, #192]
    1188:	add	x16, x16, #0xc0
    118c:	br	x17

0000000000001190 <termsig_handler@plt>:
    1190:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1194:	ldr	x17, [x16, #200]
    1198:	add	x16, x16, #0xc8
    119c:	br	x17

00000000000011a0 <width_needed@plt>:
    11a0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11a4:	ldr	x17, [x16, #208]
    11a8:	add	x16, x16, #0xd0
    11ac:	br	x17

00000000000011b0 <throw_to_top_level@plt>:
    11b0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11b4:	ldr	x17, [x16, #216]
    11b8:	add	x16, x16, #0xd8
    11bc:	br	x17

00000000000011c0 <printf@plt>:
    11c0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11c4:	ldr	x17, [x16, #224]
    11c8:	add	x16, x16, #0xe0
    11cc:	br	x17

00000000000011d0 <__errno_location@plt>:
    11d0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11d4:	ldr	x17, [x16, #232]
    11d8:	add	x16, x16, #0xe8
    11dc:	br	x17

00000000000011e0 <sh_invalidnum@plt>:
    11e0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11e4:	ldr	x17, [x16, #240]
    11e8:	add	x16, x16, #0xf0
    11ec:	br	x17

Disassembly of section .text:

00000000000011f0 <call_weak_fn>:
    11f0:	adrp	x0, 14000 <__FRAME_END__+0xfda4>
    11f4:	ldr	x0, [x0, #4032]
    11f8:	cbz	x0, 1200 <call_weak_fn+0x10>
    11fc:	b	10e0 <__gmon_start__@plt>
    1200:	ret
    1204:	nop

0000000000001208 <deregister_tm_clones>:
    1208:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    120c:	add	x0, x0, #0x1b0
    1210:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    1214:	add	x1, x1, #0x1b0
    1218:	cmp	x1, x0
    121c:	b.eq	1234 <deregister_tm_clones+0x2c>  // b.none
    1220:	adrp	x1, 14000 <__FRAME_END__+0xfda4>
    1224:	ldr	x1, [x1, #3992]
    1228:	cbz	x1, 1234 <deregister_tm_clones+0x2c>
    122c:	mov	x16, x1
    1230:	br	x16
    1234:	ret

0000000000001238 <register_tm_clones>:
    1238:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    123c:	add	x0, x0, #0x1b0
    1240:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    1244:	add	x1, x1, #0x1b0
    1248:	sub	x1, x1, x0
    124c:	lsr	x2, x1, #63
    1250:	add	x1, x2, x1, asr #3
    1254:	cmp	xzr, x1, asr #1
    1258:	asr	x1, x1, #1
    125c:	b.eq	1274 <register_tm_clones+0x3c>  // b.none
    1260:	adrp	x2, 14000 <__FRAME_END__+0xfda4>
    1264:	ldr	x2, [x2, #4064]
    1268:	cbz	x2, 1274 <register_tm_clones+0x3c>
    126c:	mov	x16, x2
    1270:	br	x16
    1274:	ret

0000000000001278 <__do_global_dtors_aux>:
    1278:	stp	x29, x30, [sp, #-32]!
    127c:	mov	x29, sp
    1280:	str	x19, [sp, #16]
    1284:	adrp	x19, 15000 <memcpy@GLIBC_2.17>
    1288:	ldrb	w0, [x19, #432]
    128c:	cbnz	w0, 12b4 <__do_global_dtors_aux+0x3c>
    1290:	adrp	x0, 14000 <__FRAME_END__+0xfda4>
    1294:	ldr	x0, [x0, #4000]
    1298:	cbz	x0, 12a8 <__do_global_dtors_aux+0x30>
    129c:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    12a0:	ldr	x0, [x0, #248]
    12a4:	bl	1050 <__cxa_finalize@plt>
    12a8:	bl	1208 <deregister_tm_clones>
    12ac:	mov	w0, #0x1                   	// #1
    12b0:	strb	w0, [x19, #432]
    12b4:	ldr	x19, [sp, #16]
    12b8:	ldp	x29, x30, [sp], #32
    12bc:	ret

00000000000012c0 <frame_dummy>:
    12c0:	b	1238 <register_tm_clones>
    12c4:	nop

00000000000012c8 <print_fltseq>:
    12c8:	mov	v4.16b, v1.16b
    12cc:	stp	x29, x30, [sp, #-128]!
    12d0:	movi	v1.2d, #0x0
    12d4:	mov	x29, sp
    12d8:	stp	x19, x20, [sp, #16]
    12dc:	adrp	x20, 3000 <__multf3+0x78>
    12e0:	stp	x21, x22, [sp, #32]
    12e4:	mov	x21, x0
    12e8:	adrp	x22, 14000 <__FRAME_END__+0xfda4>
    12ec:	stp	x23, x24, [sp, #48]
    12f0:	adrp	x23, 14000 <__FRAME_END__+0xfda4>
    12f4:	str	q4, [sp, #80]
    12f8:	str	q0, [sp, #96]
    12fc:	mov	v0.16b, v2.16b
    1300:	str	q2, [sp, #112]
    1304:	bl	2d00 <__getf2>
    1308:	ldr	q0, [sp, #96]
    130c:	tbnz	w0, #31, 1428 <print_fltseq+0x160>
    1310:	ldr	x22, [x22, #4048]
    1314:	add	x20, x20, #0xb98
    1318:	ldr	x23, [x23, #4024]
    131c:	mov	w19, #0x0                   	// #0
    1320:	adrp	x24, 14000 <__FRAME_END__+0xfda4>
    1324:	b	1388 <print_fltseq+0xc0>
    1328:	ldr	w0, [x23]
    132c:	cbnz	w0, 13c4 <print_fltseq+0xfc>
    1330:	ldrb	w1, [x20]
    1334:	mov	x0, x20
    1338:	cbz	w1, 1358 <print_fltseq+0x90>
    133c:	ldr	x1, [x24, #4016]
    1340:	str	q0, [sp, #64]
    1344:	ldr	x1, [x1]
    1348:	bl	1020 <fputs@plt>
    134c:	cmn	w0, #0x1
    1350:	ldr	q0, [sp, #64]
    1354:	b.eq	13f8 <print_fltseq+0x130>  // b.none
    1358:	mov	x0, x21
    135c:	bl	11c0 <printf@plt>
    1360:	adrp	x2, 15000 <memcpy@GLIBC_2.17>
    1364:	mov	w1, w0
    1368:	mov	w0, w19
    136c:	tbnz	w1, #31, 13f8 <print_fltseq+0x130>
    1370:	ldr	x20, [x2, #448]
    1374:	bl	3770 <__floatsitf>
    1378:	ldr	q1, [sp, #112]
    137c:	bl	2f88 <__multf3>
    1380:	ldr	q1, [sp, #96]
    1384:	bl	20d0 <__addtf3>
    1388:	ldr	q1, [sp, #80]
    138c:	str	q0, [sp, #64]
    1390:	bl	2e48 <__letf2>
    1394:	cmp	w0, #0x0
    1398:	ldr	q0, [sp, #64]
    139c:	b.gt	13d4 <print_fltseq+0x10c>
    13a0:	ldr	w0, [x22]
    13a4:	add	w19, w19, #0x1
    13a8:	cbz	w0, 1328 <print_fltseq+0x60>
    13ac:	ldr	w0, [x22]
    13b0:	str	q0, [sp, #64]
    13b4:	bl	1190 <termsig_handler@plt>
    13b8:	ldr	w0, [x23]
    13bc:	ldr	q0, [sp, #64]
    13c0:	cbz	w0, 1330 <print_fltseq+0x68>
    13c4:	str	q0, [sp, #64]
    13c8:	bl	11b0 <throw_to_top_level@plt>
    13cc:	ldr	q0, [sp, #64]
    13d0:	b	1330 <print_fltseq+0x68>
    13d4:	cbz	w19, 1410 <print_fltseq+0x148>
    13d8:	adrp	x1, 14000 <__FRAME_END__+0xfda4>
    13dc:	adrp	x0, 3000 <__multf3+0x78>
    13e0:	add	x0, x0, #0xeb0
    13e4:	ldr	x1, [x1, #4016]
    13e8:	ldr	x1, [x1]
    13ec:	bl	1020 <fputs@plt>
    13f0:	cmn	w0, #0x1
    13f4:	b.ne	1410 <print_fltseq+0x148>  // b.any
    13f8:	ldp	x19, x20, [sp, #16]
    13fc:	mov	w0, #0x1                   	// #1
    1400:	ldp	x21, x22, [sp, #32]
    1404:	ldp	x23, x24, [sp, #48]
    1408:	ldp	x29, x30, [sp], #128
    140c:	b	1170 <sh_chkwrite@plt>
    1410:	ldp	x19, x20, [sp, #16]
    1414:	mov	w0, #0x0                   	// #0
    1418:	ldp	x21, x22, [sp, #32]
    141c:	ldp	x23, x24, [sp, #48]
    1420:	ldp	x29, x30, [sp], #128
    1424:	b	1170 <sh_chkwrite@plt>
    1428:	ldr	x22, [x22, #4048]
    142c:	add	x20, x20, #0xb98
    1430:	ldr	x23, [x23, #4024]
    1434:	mov	v1.16b, v0.16b
    1438:	mov	w19, #0x0                   	// #0
    143c:	adrp	x24, 14000 <__FRAME_END__+0xfda4>
    1440:	str	q0, [sp, #64]
    1444:	b	14ac <print_fltseq+0x1e4>
    1448:	ldr	w0, [x23]
    144c:	cbnz	w0, 14d8 <print_fltseq+0x210>
    1450:	ldrb	w1, [x20]
    1454:	mov	x0, x20
    1458:	cbz	w1, 1470 <print_fltseq+0x1a8>
    145c:	ldr	x1, [x24, #4016]
    1460:	ldr	x1, [x1]
    1464:	bl	1020 <fputs@plt>
    1468:	cmn	w0, #0x1
    146c:	b.eq	13f8 <print_fltseq+0x130>  // b.none
    1470:	ldr	q0, [sp, #64]
    1474:	mov	x0, x21
    1478:	bl	11c0 <printf@plt>
    147c:	mov	w1, w0
    1480:	adrp	x2, 15000 <memcpy@GLIBC_2.17>
    1484:	mov	w0, w19
    1488:	tbnz	w1, #31, 13f8 <print_fltseq+0x130>
    148c:	ldr	x20, [x2, #448]
    1490:	bl	3770 <__floatsitf>
    1494:	ldr	q1, [sp, #112]
    1498:	bl	2f88 <__multf3>
    149c:	ldr	q1, [sp, #96]
    14a0:	bl	20d0 <__addtf3>
    14a4:	mov	v1.16b, v0.16b
    14a8:	str	q0, [sp, #64]
    14ac:	ldr	q0, [sp, #80]
    14b0:	bl	2e48 <__letf2>
    14b4:	cmp	w0, #0x0
    14b8:	b.gt	13d4 <print_fltseq+0x10c>
    14bc:	ldr	w0, [x22]
    14c0:	add	w19, w19, #0x1
    14c4:	cbz	w0, 1448 <print_fltseq+0x180>
    14c8:	ldr	w0, [x22]
    14cc:	bl	1190 <termsig_handler@plt>
    14d0:	ldr	w0, [x23]
    14d4:	cbz	w0, 1450 <print_fltseq+0x188>
    14d8:	bl	11b0 <throw_to_top_level@plt>
    14dc:	b	1450 <print_fltseq+0x188>

00000000000014e0 <width_needed>:
    14e0:	cmp	x0, #0x0
    14e4:	mov	x2, #0xcccccccccccccccc    	// #-3689348814741910324
    14e8:	cneg	x1, x0, lt  // lt = tstop
    14ec:	lsr	x0, x0, #63
    14f0:	movk	x2, #0xcccd
    14f4:	nop
    14f8:	umulh	x1, x1, x2
    14fc:	add	w0, w0, #0x1
    1500:	cmp	xzr, x1, lsr #3
    1504:	lsr	x1, x1, #3
    1508:	b.ne	14f8 <width_needed+0x18>  // b.any
    150c:	ret

0000000000001510 <print_intseq>:
    1510:	stp	x29, x30, [sp, #-112]!
    1514:	mov	x29, sp
    1518:	stp	x19, x20, [sp, #16]
    151c:	adrp	x20, 15000 <memcpy@GLIBC_2.17>
    1520:	add	x3, x20, #0x1c0
    1524:	stp	x21, x22, [sp, #32]
    1528:	mov	x21, x1
    152c:	mov	x19, x0
    1530:	ldr	w1, [x3, #8]
    1534:	stp	x23, x24, [sp, #48]
    1538:	mov	x23, x2
    153c:	stp	x25, x26, [sp, #64]
    1540:	cbnz	w1, 1690 <print_intseq+0x180>
    1544:	adrp	x24, 14000 <__FRAME_END__+0xfda4>
    1548:	adrp	x26, 14000 <__FRAME_END__+0xfda4>
    154c:	adrp	x22, 3000 <__multf3+0x78>
    1550:	add	x25, sp, #0x58
    1554:	ldr	x24, [x24, #4048]
    1558:	add	x22, x22, #0xb98
    155c:	ldr	x26, [x26, #4024]
    1560:	cmp	x19, x21
    1564:	b.le	161c <print_intseq+0x10c>
    1568:	b	1580 <print_intseq+0x70>
    156c:	add	x0, x4, #0x9c0
    1570:	bl	11c0 <printf@plt>
    1574:	tbnz	w0, #31, 15bc <print_intseq+0xac>
    1578:	ldr	x22, [x20, #448]
    157c:	add	x19, x19, x23
    1580:	cmp	x19, x21
    1584:	b.lt	1650 <print_intseq+0x140>  // b.tstop
    1588:	ldr	w0, [x24]
    158c:	cbnz	w0, 1644 <print_intseq+0x134>
    1590:	ldr	w0, [x26]
    1594:	cbnz	w0, 163c <print_intseq+0x12c>
    1598:	add	x3, x20, #0x1c0
    159c:	mov	x2, x19
    15a0:	mov	x1, x22
    15a4:	mov	x0, x25
    15a8:	adrp	x4, 3000 <__multf3+0x78>
    15ac:	ldr	w3, [x3, #8]
    15b0:	cbz	w3, 156c <print_intseq+0x5c>
    15b4:	bl	11c0 <printf@plt>
    15b8:	tbz	w0, #31, 1578 <print_intseq+0x68>
    15bc:	mov	w0, #0x1                   	// #1
    15c0:	bl	1170 <sh_chkwrite@plt>
    15c4:	ldp	x19, x20, [sp, #16]
    15c8:	ldp	x21, x22, [sp, #32]
    15cc:	ldp	x23, x24, [sp, #48]
    15d0:	ldp	x25, x26, [sp, #64]
    15d4:	ldp	x29, x30, [sp], #112
    15d8:	ret
    15dc:	ldr	w0, [x24]
    15e0:	bl	1190 <termsig_handler@plt>
    15e4:	ldr	w0, [x26]
    15e8:	cbnz	w0, 1634 <print_intseq+0x124>
    15ec:	add	x3, x20, #0x1c0
    15f0:	mov	x2, x19
    15f4:	mov	x1, x22
    15f8:	mov	x0, x25
    15fc:	adrp	x4, 3000 <__multf3+0x78>
    1600:	ldr	w3, [x3, #8]
    1604:	cbnz	w3, 160c <print_intseq+0xfc>
    1608:	add	x0, x4, #0x9c0
    160c:	bl	11c0 <printf@plt>
    1610:	tbnz	w0, #31, 15bc <print_intseq+0xac>
    1614:	ldr	x22, [x20, #448]
    1618:	add	x19, x19, x23
    161c:	cmp	x19, x21
    1620:	b.gt	1650 <print_intseq+0x140>
    1624:	ldr	w0, [x24]
    1628:	cbnz	w0, 15dc <print_intseq+0xcc>
    162c:	ldr	w0, [x26]
    1630:	cbz	w0, 15ec <print_intseq+0xdc>
    1634:	bl	11b0 <throw_to_top_level@plt>
    1638:	b	15ec <print_intseq+0xdc>
    163c:	bl	11b0 <throw_to_top_level@plt>
    1640:	b	1598 <print_intseq+0x88>
    1644:	ldr	w0, [x24]
    1648:	bl	1190 <termsig_handler@plt>
    164c:	b	1590 <print_intseq+0x80>
    1650:	adrp	x1, 14000 <__FRAME_END__+0xfda4>
    1654:	adrp	x0, 3000 <__multf3+0x78>
    1658:	add	x0, x0, #0xeb0
    165c:	ldr	x1, [x1, #4016]
    1660:	ldr	x1, [x1]
    1664:	bl	1020 <fputs@plt>
    1668:	cmn	w0, #0x1
    166c:	b.eq	15bc <print_intseq+0xac>  // b.none
    1670:	mov	w0, #0x0                   	// #0
    1674:	bl	1170 <sh_chkwrite@plt>
    1678:	ldp	x19, x20, [sp, #16]
    167c:	ldp	x21, x22, [sp, #32]
    1680:	ldp	x23, x24, [sp, #48]
    1684:	ldp	x25, x26, [sp, #64]
    1688:	ldp	x29, x30, [sp], #112
    168c:	ret
    1690:	bl	11a0 <width_needed@plt>
    1694:	mov	w22, w0
    1698:	mov	x0, x21
    169c:	bl	11a0 <width_needed@plt>
    16a0:	cmp	w22, w0
    16a4:	adrp	x2, 3000 <__multf3+0x78>
    16a8:	csel	w3, w22, w0, ge  // ge = tcont
    16ac:	add	x2, x2, #0x9b0
    16b0:	add	x0, sp, #0x58
    16b4:	mov	x1, #0x14                  	// #20
    16b8:	bl	1070 <snprintf@plt>
    16bc:	b	1544 <print_intseq+0x34>

00000000000016c0 <seq_builtin>:
    16c0:	stp	x29, x30, [sp, #-160]!
    16c4:	adrp	x1, 3000 <__multf3+0x78>
    16c8:	add	x1, x1, #0x9e0
    16cc:	mov	x29, sp
    16d0:	stp	x21, x22, [sp, #32]
    16d4:	adrp	x21, 15000 <memcpy@GLIBC_2.17>
    16d8:	add	x2, x21, #0x1c0
    16dc:	stp	x19, x20, [sp, #16]
    16e0:	mov	x20, x0
    16e4:	stp	x23, x24, [sp, #48]
    16e8:	stp	x25, x26, [sp, #64]
    16ec:	str	x1, [x21, #448]
    16f0:	str	wzr, [x2, #8]
    16f4:	bl	1140 <reset_internal_getopt@plt>
    16f8:	adrp	x0, 14000 <__FRAME_END__+0xfda4>
    16fc:	cbnz	x20, 17cc <seq_builtin+0x10c>
    1700:	adrp	x24, 14000 <__FRAME_END__+0xfda4>
    1704:	adrp	x23, 3000 <__multf3+0x78>
    1708:	ldr	x22, [x0, #4008]
    170c:	add	x23, x23, #0x9e8
    1710:	ldr	x25, [x24, #4040]
    1714:	ldr	x19, [x22]
    1718:	cbz	x19, 1738 <seq_builtin+0x78>
    171c:	ldr	x0, [x19, #8]
    1720:	cbz	x0, 1738 <seq_builtin+0x78>
    1724:	ldr	x0, [x0]
    1728:	cbz	x0, 1738 <seq_builtin+0x78>
    172c:	ldrb	w1, [x0]
    1730:	cmp	w1, #0x2d
    1734:	b.eq	186c <seq_builtin+0x1ac>  // b.none
    1738:	mov	x1, x23
    173c:	mov	x0, #0x0                   	// #0
    1740:	bl	1130 <internal_getopt@plt>
    1744:	cmn	w0, #0x1
    1748:	b.eq	18c4 <seq_builtin+0x204>  // b.none
    174c:	cmp	w0, #0x73
    1750:	b.eq	1860 <seq_builtin+0x1a0>  // b.none
    1754:	b.gt	1774 <seq_builtin+0xb4>
    1758:	cmn	w0, #0x63
    175c:	b.eq	178c <seq_builtin+0xcc>  // b.none
    1760:	cmp	w0, #0x66
    1764:	b.ne	17ac <seq_builtin+0xec>  // b.any
    1768:	ldr	x0, [x24, #4040]
    176c:	ldr	x20, [x0]
    1770:	b	1714 <seq_builtin+0x54>
    1774:	cmp	w0, #0x77
    1778:	b.ne	17ac <seq_builtin+0xec>  // b.any
    177c:	add	x0, x21, #0x1c0
    1780:	mov	w1, #0x1                   	// #1
    1784:	str	w1, [x0, #8]
    1788:	b	1714 <seq_builtin+0x54>
    178c:	bl	10a0 <builtin_help@plt>
    1790:	mov	w0, #0x102                 	// #258
    1794:	ldp	x19, x20, [sp, #16]
    1798:	ldp	x21, x22, [sp, #32]
    179c:	ldp	x23, x24, [sp, #48]
    17a0:	ldp	x25, x26, [sp, #64]
    17a4:	ldp	x29, x30, [sp], #160
    17a8:	ret
    17ac:	bl	10c0 <builtin_usage@plt>
    17b0:	mov	w0, #0x102                 	// #258
    17b4:	ldp	x19, x20, [sp, #16]
    17b8:	ldp	x21, x22, [sp, #32]
    17bc:	ldp	x23, x24, [sp, #48]
    17c0:	ldp	x25, x26, [sp, #64]
    17c4:	ldp	x29, x30, [sp], #160
    17c8:	ret
    17cc:	adrp	x23, 14000 <__FRAME_END__+0xfda4>
    17d0:	adrp	x26, 3000 <__multf3+0x78>
    17d4:	ldr	x22, [x0, #4008]
    17d8:	add	x26, x26, #0x9e8
    17dc:	ldr	x25, [x23, #4040]
    17e0:	mov	x24, #0x0                   	// #0
    17e4:	ldr	x19, [x22]
    17e8:	cmp	x19, #0x0
    17ec:	csel	x19, x19, x20, ne  // ne = any
    17f0:	ldr	x0, [x19, #8]
    17f4:	cbz	x0, 180c <seq_builtin+0x14c>
    17f8:	ldr	x0, [x0]
    17fc:	cbz	x0, 180c <seq_builtin+0x14c>
    1800:	ldrb	w1, [x0]
    1804:	cmp	w1, #0x2d
    1808:	b.eq	18a0 <seq_builtin+0x1e0>  // b.none
    180c:	mov	x1, x26
    1810:	mov	x0, x20
    1814:	bl	1130 <internal_getopt@plt>
    1818:	cmn	w0, #0x1
    181c:	b.eq	18c0 <seq_builtin+0x200>  // b.none
    1820:	cmp	w0, #0x73
    1824:	b.eq	1894 <seq_builtin+0x1d4>  // b.none
    1828:	b.gt	1848 <seq_builtin+0x188>
    182c:	cmn	w0, #0x63
    1830:	b.eq	178c <seq_builtin+0xcc>  // b.none
    1834:	cmp	w0, #0x66
    1838:	b.ne	17ac <seq_builtin+0xec>  // b.any
    183c:	ldr	x0, [x23, #4040]
    1840:	ldr	x24, [x0]
    1844:	b	17e4 <seq_builtin+0x124>
    1848:	cmp	w0, #0x77
    184c:	b.ne	17ac <seq_builtin+0xec>  // b.any
    1850:	add	x0, x21, #0x1c0
    1854:	mov	w1, #0x1                   	// #1
    1858:	str	w1, [x0, #8]
    185c:	b	17e4 <seq_builtin+0x124>
    1860:	ldr	x0, [x25]
    1864:	str	x0, [x21, #448]
    1868:	b	1714 <seq_builtin+0x54>
    186c:	ldrb	w1, [x0, #1]
    1870:	sub	w0, w1, #0x30
    1874:	cmp	w1, #0x2e
    1878:	and	w0, w0, #0xff
    187c:	ccmp	w0, #0x9, #0x0, ne  // ne = any
    1880:	b.hi	1738 <seq_builtin+0x78>  // b.pmore
    1884:	adrp	x0, 14000 <__FRAME_END__+0xfda4>
    1888:	ldr	x0, [x0, #4056]
    188c:	str	x19, [x0]
    1890:	b	18d4 <seq_builtin+0x214>
    1894:	ldr	x0, [x25]
    1898:	str	x0, [x21, #448]
    189c:	b	17e4 <seq_builtin+0x124>
    18a0:	ldrb	w1, [x0, #1]
    18a4:	sub	w0, w1, #0x30
    18a8:	cmp	w1, #0x2e
    18ac:	and	w0, w0, #0xff
    18b0:	ccmp	w0, #0x9, #0x0, ne  // ne = any
    18b4:	b.hi	180c <seq_builtin+0x14c>  // b.pmore
    18b8:	mov	x20, x24
    18bc:	b	1884 <seq_builtin+0x1c4>
    18c0:	mov	x20, x24
    18c4:	adrp	x0, 14000 <__FRAME_END__+0xfda4>
    18c8:	ldr	x0, [x0, #4056]
    18cc:	ldr	x19, [x0]
    18d0:	cbz	x19, 1a48 <seq_builtin+0x388>
    18d4:	ldr	x0, [x19]
    18d8:	mov	x1, x19
    18dc:	mov	w24, #0x1                   	// #1
    18e0:	cbz	x0, 1900 <seq_builtin+0x240>
    18e4:	nop
    18e8:	mov	x1, x0
    18ec:	add	w24, w24, #0x1
    18f0:	ldr	x0, [x0]
    18f4:	cbnz	x0, 18e8 <seq_builtin+0x228>
    18f8:	cmp	w24, #0x3
    18fc:	b.gt	1a48 <seq_builtin+0x388>
    1900:	ldr	x0, [x1, #8]
    1904:	add	x23, x21, #0x1c0
    1908:	add	x26, sp, #0x98
    190c:	str	wzr, [x23, #44]
    1910:	ldr	x22, [x0]
    1914:	bl	11d0 <__errno_location@plt>
    1918:	mov	x25, x0
    191c:	mov	x1, x26
    1920:	mov	x0, x22
    1924:	str	wzr, [x25]
    1928:	bl	1100 <strtold@plt>
    192c:	str	q0, [sp, #96]
    1930:	ldr	x0, [sp, #152]
    1934:	ldrb	w0, [x0]
    1938:	cbnz	w0, 1a30 <seq_builtin+0x370>
    193c:	ldr	w0, [x25]
    1940:	cmp	w0, #0x22
    1944:	b.eq	1c40 <seq_builtin+0x580>  // b.none
    1948:	movi	v1.2d, #0x0
    194c:	bl	2bf8 <__eqtf2>
    1950:	cbnz	w0, 1958 <seq_builtin+0x298>
    1954:	stp	xzr, xzr, [sp, #96]
    1958:	cmp	w24, #0x1
    195c:	b.eq	1a54 <seq_builtin+0x394>  // b.none
    1960:	ldr	x0, [x19, #8]
    1964:	mov	x1, x26
    1968:	ldr	x23, [x0]
    196c:	str	wzr, [x25]
    1970:	mov	x0, x23
    1974:	bl	1100 <strtold@plt>
    1978:	ldr	x0, [sp, #152]
    197c:	str	q0, [sp, #112]
    1980:	ldrb	w0, [x0]
    1984:	cbnz	w0, 1c94 <seq_builtin+0x5d4>
    1988:	ldr	w0, [x25]
    198c:	cmp	w0, #0x22
    1990:	b.eq	1dc0 <seq_builtin+0x700>  // b.none
    1994:	movi	v1.2d, #0x0
    1998:	bl	2bf8 <__eqtf2>
    199c:	cbnz	w0, 19a4 <seq_builtin+0x2e4>
    19a0:	stp	xzr, xzr, [sp, #112]
    19a4:	cmp	w24, #0x3
    19a8:	b.ne	1a68 <seq_builtin+0x3a8>  // b.any
    19ac:	ldr	x0, [x19]
    19b0:	add	x24, x21, #0x1c0
    19b4:	mov	x1, x26
    19b8:	ldr	x0, [x0, #8]
    19bc:	str	wzr, [x24, #44]
    19c0:	ldr	x19, [x0]
    19c4:	str	wzr, [x25]
    19c8:	mov	x0, x19
    19cc:	bl	1100 <strtold@plt>
    19d0:	ldr	x0, [sp, #152]
    19d4:	str	q0, [sp, #128]
    19d8:	ldrb	w0, [x0]
    19dc:	cbnz	w0, 1dec <seq_builtin+0x72c>
    19e0:	ldr	w0, [x25]
    19e4:	cmp	w0, #0x22
    19e8:	b.eq	1ff4 <seq_builtin+0x934>  // b.none
    19ec:	movi	v1.2d, #0x0
    19f0:	bl	2bf8 <__eqtf2>
    19f4:	cbnz	w0, 1b9c <seq_builtin+0x4dc>
    19f8:	ldr	q1, [sp, #96]
    19fc:	ldr	q0, [sp, #112]
    1a00:	bl	2e48 <__letf2>
    1a04:	cmp	w0, #0x0
    1a08:	adrp	x2, 3000 <__multf3+0x78>
    1a0c:	add	x2, x2, #0x9c8
    1a10:	adrp	x1, 3000 <__multf3+0x78>
    1a14:	add	x1, x1, #0x9d0
    1a18:	csel	x1, x2, x1, lt  // lt = tstop
    1a1c:	adrp	x0, 3000 <__multf3+0x78>
    1a20:	add	x0, x0, #0xa00
    1a24:	bl	1030 <builtin_error@plt>
    1a28:	mov	w0, #0x1                   	// #1
    1a2c:	b	1794 <seq_builtin+0xd4>
    1a30:	mov	x0, x22
    1a34:	bl	11e0 <sh_invalidnum@plt>
    1a38:	mov	w0, #0x1                   	// #1
    1a3c:	str	w0, [x23, #44]
    1a40:	mov	w0, #0x1                   	// #1
    1a44:	b	1794 <seq_builtin+0xd4>
    1a48:	bl	10c0 <builtin_usage@plt>
    1a4c:	mov	w0, #0x1                   	// #1
    1a50:	b	1794 <seq_builtin+0xd4>
    1a54:	adrp	x0, 3000 <__multf3+0x78>
    1a58:	add	x0, x0, #0xe90
    1a5c:	mov	x23, #0x0                   	// #0
    1a60:	ldr	q0, [x0]
    1a64:	str	q0, [sp, #112]
    1a68:	ldr	q0, [sp, #96]
    1a6c:	ldr	q1, [sp, #112]
    1a70:	bl	2d00 <__getf2>
    1a74:	tbnz	w0, #31, 1c68 <seq_builtin+0x5a8>
    1a78:	adrp	x0, 3000 <__multf3+0x78>
    1a7c:	add	x0, x0, #0xe90
    1a80:	mov	x19, #0x0                   	// #0
    1a84:	ldr	q0, [x0]
    1a88:	str	q0, [sp, #128]
    1a8c:	ldr	q1, [sp, #96]
    1a90:	ldr	q0, [sp, #112]
    1a94:	bl	2d00 <__getf2>
    1a98:	cmp	w0, #0x0
    1a9c:	b.gt	1d48 <seq_builtin+0x688>
    1aa0:	mov	x1, #0x0                   	// #0
    1aa4:	cbz	x20, 1bc4 <seq_builtin+0x504>
    1aa8:	ldrb	w0, [x20, x1]
    1aac:	mov	x2, #0x1                   	// #1
    1ab0:	cmp	w0, #0x25
    1ab4:	b.eq	1adc <seq_builtin+0x41c>  // b.none
    1ab8:	cbz	w0, 1ac4 <seq_builtin+0x404>
    1abc:	add	x1, x1, x2
    1ac0:	b	1aa8 <seq_builtin+0x3e8>
    1ac4:	mov	x1, x20
    1ac8:	adrp	x0, 3000 <__multf3+0x78>
    1acc:	add	x0, x0, #0xa28
    1ad0:	bl	1030 <builtin_error@plt>
    1ad4:	mov	w0, #0x1                   	// #1
    1ad8:	b	1794 <seq_builtin+0xd4>
    1adc:	add	x24, x1, x2
    1ae0:	mov	x2, #0x2                   	// #2
    1ae4:	add	x0, x20, x24
    1ae8:	ldrb	w3, [x20, x24]
    1aec:	cmp	w3, #0x25
    1af0:	b.eq	1abc <seq_builtin+0x3fc>  // b.none
    1af4:	adrp	x1, 3000 <__multf3+0x78>
    1af8:	adrp	x26, 3000 <__multf3+0x78>
    1afc:	add	x1, x1, #0xa48
    1b00:	add	x26, x26, #0xa50
    1b04:	bl	1150 <strspn@plt>
    1b08:	add	x24, x24, x0
    1b0c:	add	x0, x20, x24
    1b10:	mov	x1, x26
    1b14:	bl	1150 <strspn@plt>
    1b18:	add	x25, x24, x0
    1b1c:	ldrb	w0, [x20, x25]
    1b20:	cmp	w0, #0x2e
    1b24:	b.ne	1b40 <seq_builtin+0x480>  // b.any
    1b28:	add	x25, x25, #0x1
    1b2c:	mov	x1, x26
    1b30:	add	x0, x20, x25
    1b34:	bl	1150 <strspn@plt>
    1b38:	add	x25, x25, x0
    1b3c:	ldrb	w0, [x20, x25]
    1b40:	cmp	w0, #0x4c
    1b44:	cinc	x4, x25, eq  // eq = none
    1b48:	add	x24, x20, x4
    1b4c:	ldrb	w2, [x20, x4]
    1b50:	cbz	w2, 1f90 <seq_builtin+0x8d0>
    1b54:	sub	w1, w2, #0x41
    1b58:	stp	x27, x28, [sp, #80]
    1b5c:	and	w3, w1, #0xff
    1b60:	cmp	w3, #0x26
    1b64:	b.hi	1b80 <seq_builtin+0x4c0>  // b.pmore
    1b68:	mov	x1, #0x1                   	// #1
    1b6c:	mov	x0, #0x71                  	// #113
    1b70:	movk	x0, #0x71, lsl #32
    1b74:	lsl	x1, x1, x3
    1b78:	tst	x1, x0
    1b7c:	b.ne	1cb0 <seq_builtin+0x5f0>  // b.any
    1b80:	mov	x1, x20
    1b84:	adrp	x0, 3000 <__multf3+0x78>
    1b88:	add	x0, x0, #0xa78
    1b8c:	bl	1030 <builtin_error@plt>
    1b90:	mov	w0, #0x1                   	// #1
    1b94:	ldp	x27, x28, [sp, #80]
    1b98:	b	1794 <seq_builtin+0xd4>
    1b9c:	movi	v1.2d, #0x0
    1ba0:	ldr	q0, [sp, #128]
    1ba4:	bl	2e48 <__letf2>
    1ba8:	tbnz	w0, #31, 1d74 <seq_builtin+0x6b4>
    1bac:	movi	v1.2d, #0x0
    1bb0:	ldr	q0, [sp, #128]
    1bb4:	bl	2d00 <__getf2>
    1bb8:	cmp	w0, #0x0
    1bbc:	b.gt	1a8c <seq_builtin+0x3cc>
    1bc0:	b	1aa0 <seq_builtin+0x3e0>
    1bc4:	mov	x0, x22
    1bc8:	bl	1010 <all_digits@plt>
    1bcc:	mov	w22, w0
    1bd0:	cbz	w0, 1d90 <seq_builtin+0x6d0>
    1bd4:	mov	w22, #0x0                   	// #0
    1bd8:	cbz	x23, 1c1c <seq_builtin+0x55c>
    1bdc:	mov	x0, x23
    1be0:	bl	1010 <all_digits@plt>
    1be4:	cbnz	w0, 1c1c <seq_builtin+0x55c>
    1be8:	bl	1080 <locale_decpoint@plt>
    1bec:	add	x1, x21, #0x1c0
    1bf0:	strb	w0, [x1, #48]
    1bf4:	cbz	x20, 20b8 <seq_builtin+0x9f8>
    1bf8:	ldr	q1, [sp, #96]
    1bfc:	mov	x0, x20
    1c00:	ldr	q0, [sp, #112]
    1c04:	ldr	q2, [sp, #128]
    1c08:	bl	1110 <print_fltseq@plt>
    1c0c:	cbnz	w22, 1d3c <seq_builtin+0x67c>
    1c10:	mov	w0, #0x0                   	// #0
    1c14:	bl	1170 <sh_chkwrite@plt>
    1c18:	b	1794 <seq_builtin+0xd4>
    1c1c:	cbz	x19, 1c2c <seq_builtin+0x56c>
    1c20:	mov	x0, x19
    1c24:	bl	1010 <all_digits@plt>
    1c28:	cbz	w0, 1be8 <seq_builtin+0x528>
    1c2c:	cbz	x20, 2078 <seq_builtin+0x9b8>
    1c30:	add	x21, x21, #0x1c0
    1c34:	bl	1080 <locale_decpoint@plt>
    1c38:	strb	w0, [x21, #48]
    1c3c:	b	1bf8 <seq_builtin+0x538>
    1c40:	bl	10d0 <strerror@plt>
    1c44:	mov	x2, x0
    1c48:	mov	x1, x22
    1c4c:	adrp	x0, 3000 <__multf3+0x78>
    1c50:	add	x0, x0, #0x9f0
    1c54:	bl	1030 <builtin_error@plt>
    1c58:	mov	w0, #0x1                   	// #1
    1c5c:	str	w0, [x23, #44]
    1c60:	mov	w0, #0x1                   	// #1
    1c64:	b	1794 <seq_builtin+0xd4>
    1c68:	ldr	q0, [sp, #96]
    1c6c:	ldr	q1, [sp, #112]
    1c70:	bl	2d00 <__getf2>
    1c74:	cmp	w0, #0x0
    1c78:	b.gt	1d84 <seq_builtin+0x6c4>
    1c7c:	adrp	x0, 3000 <__multf3+0x78>
    1c80:	add	x0, x0, #0xea0
    1c84:	mov	x19, #0x0                   	// #0
    1c88:	ldr	q0, [x0]
    1c8c:	str	q0, [sp, #128]
    1c90:	b	1aa0 <seq_builtin+0x3e0>
    1c94:	add	x21, x21, #0x1c0
    1c98:	mov	x0, x23
    1c9c:	bl	11e0 <sh_invalidnum@plt>
    1ca0:	mov	w0, #0x1                   	// #1
    1ca4:	str	w0, [x21, #44]
    1ca8:	mov	w0, #0x1                   	// #1
    1cac:	b	1794 <seq_builtin+0xd4>
    1cb0:	add	x0, x4, #0x1
    1cb4:	ldrb	w1, [x20, x0]
    1cb8:	mov	x2, #0x1                   	// #1
    1cbc:	cmp	w1, #0x25
    1cc0:	b.eq	1fb0 <seq_builtin+0x8f0>  // b.none
    1cc4:	cbnz	w1, 1fa8 <seq_builtin+0x8e8>
    1cc8:	add	x0, x0, #0x2
    1ccc:	bl	10b0 <xmalloc@plt>
    1cd0:	mov	x26, x0
    1cd4:	mov	x2, x25
    1cd8:	mov	x1, x20
    1cdc:	bl	1000 <memcpy@plt>
    1ce0:	mov	w1, #0x4c                  	// #76
    1ce4:	add	x27, x21, #0x1c0
    1ce8:	strb	w1, [x26, x25]
    1cec:	add	x0, x25, #0x1
    1cf0:	mov	x1, x24
    1cf4:	add	x0, x26, x0
    1cf8:	bl	1180 <strcpy@plt>
    1cfc:	ldr	w0, [x27, #8]
    1d00:	cbnz	w0, 1fe0 <seq_builtin+0x920>
    1d04:	mov	x0, x22
    1d08:	bl	1010 <all_digits@plt>
    1d0c:	cbnz	w0, 20a8 <seq_builtin+0x9e8>
    1d10:	bl	1080 <locale_decpoint@plt>
    1d14:	add	x21, x21, #0x1c0
    1d18:	mov	w1, w0
    1d1c:	ldr	q1, [sp, #96]
    1d20:	ldr	q0, [sp, #112]
    1d24:	mov	x0, x26
    1d28:	ldr	q2, [sp, #128]
    1d2c:	mov	x20, x26
    1d30:	strb	w1, [x21, #48]
    1d34:	bl	1110 <print_fltseq@plt>
    1d38:	ldp	x27, x28, [sp, #80]
    1d3c:	mov	x0, x20
    1d40:	bl	1120 <free@plt>
    1d44:	b	1c10 <seq_builtin+0x550>
    1d48:	ldr	q1, [sp, #96]
    1d4c:	ldr	q0, [sp, #112]
    1d50:	bl	2e48 <__letf2>
    1d54:	adrp	x1, 3000 <__multf3+0x78>
    1d58:	add	x1, x1, #0x9d0
    1d5c:	tbnz	w0, #31, 1d84 <seq_builtin+0x6c4>
    1d60:	adrp	x0, 3000 <__multf3+0x78>
    1d64:	add	x0, x0, #0xa10
    1d68:	bl	1030 <builtin_error@plt>
    1d6c:	mov	w0, #0x1                   	// #1
    1d70:	b	1794 <seq_builtin+0xd4>
    1d74:	ldr	q1, [sp, #96]
    1d78:	ldr	q0, [sp, #112]
    1d7c:	bl	2e48 <__letf2>
    1d80:	tbz	w0, #31, 1bac <seq_builtin+0x4ec>
    1d84:	adrp	x1, 3000 <__multf3+0x78>
    1d88:	add	x1, x1, #0x9c8
    1d8c:	b	1d60 <seq_builtin+0x6a0>
    1d90:	bl	1080 <locale_decpoint@plt>
    1d94:	add	x1, x21, #0x1c0
    1d98:	ldr	w2, [x1, #8]
    1d9c:	strb	w0, [x1, #48]
    1da0:	cbnz	w2, 1e04 <seq_builtin+0x744>
    1da4:	ldr	q1, [sp, #96]
    1da8:	adrp	x0, 3000 <__multf3+0x78>
    1dac:	ldr	q0, [sp, #112]
    1db0:	add	x0, x0, #0x9d8
    1db4:	ldr	q2, [sp, #128]
    1db8:	bl	1110 <print_fltseq@plt>
    1dbc:	b	1c10 <seq_builtin+0x550>
    1dc0:	bl	10d0 <strerror@plt>
    1dc4:	add	x21, x21, #0x1c0
    1dc8:	mov	x2, x0
    1dcc:	mov	x1, x23
    1dd0:	adrp	x0, 3000 <__multf3+0x78>
    1dd4:	add	x0, x0, #0x9f0
    1dd8:	bl	1030 <builtin_error@plt>
    1ddc:	mov	w0, #0x1                   	// #1
    1de0:	str	w0, [x21, #44]
    1de4:	mov	w0, #0x1                   	// #1
    1de8:	b	1794 <seq_builtin+0xd4>
    1dec:	mov	x0, x19
    1df0:	bl	11e0 <sh_invalidnum@plt>
    1df4:	mov	w0, #0x1                   	// #1
    1df8:	str	w0, [x24, #44]
    1dfc:	mov	w0, #0x1                   	// #1
    1e00:	b	1794 <seq_builtin+0xd4>
    1e04:	ldr	q0, [sp, #128]
    1e08:	add	x19, x21, #0x1c0
    1e0c:	add	x20, x19, #0x10
    1e10:	mov	x1, #0x1c                  	// #28
    1e14:	mov	x0, x20
    1e18:	adrp	x23, 3000 <__multf3+0x78>
    1e1c:	add	x2, x23, #0x9d8
    1e20:	stp	x27, x28, [sp, #80]
    1e24:	bl	1070 <snprintf@plt>
    1e28:	ldrb	w1, [x19, #48]
    1e2c:	mov	x0, x20
    1e30:	mov	w20, #0x0                   	// #0
    1e34:	bl	1160 <strchr@plt>
    1e38:	cbz	x0, 1e6c <seq_builtin+0x7ac>
    1e3c:	add	x25, x0, #0x1
    1e40:	mov	x24, #0x0                   	// #0
    1e44:	b	1e5c <seq_builtin+0x79c>
    1e48:	bl	10f0 <__ctype_b_loc@plt>
    1e4c:	ubfiz	x19, x19, #1, #8
    1e50:	ldr	x0, [x0]
    1e54:	ldrh	w0, [x0, x19]
    1e58:	tbz	w0, #11, 1e6c <seq_builtin+0x7ac>
    1e5c:	ldrb	w19, [x25, x24]
    1e60:	mov	w20, w24
    1e64:	add	x24, x24, #0x1
    1e68:	cbnz	w19, 1e48 <seq_builtin+0x788>
    1e6c:	ldr	q0, [sp, #112]
    1e70:	add	x19, x21, #0x1c0
    1e74:	add	x24, x19, #0x10
    1e78:	mov	x1, #0x1c                  	// #28
    1e7c:	mov	x0, x24
    1e80:	add	x2, x23, #0x9d8
    1e84:	bl	1070 <snprintf@plt>
    1e88:	mov	w25, w0
    1e8c:	ldrb	w1, [x19, #48]
    1e90:	mov	x0, x24
    1e94:	mov	w24, #0x0                   	// #0
    1e98:	bl	1160 <strchr@plt>
    1e9c:	cbz	x0, 1ed0 <seq_builtin+0x810>
    1ea0:	add	x27, x0, #0x1
    1ea4:	mov	x26, #0x0                   	// #0
    1ea8:	b	1ec0 <seq_builtin+0x800>
    1eac:	bl	10f0 <__ctype_b_loc@plt>
    1eb0:	ubfiz	x19, x19, #1, #8
    1eb4:	ldr	x0, [x0]
    1eb8:	ldrh	w0, [x0, x19]
    1ebc:	tbz	w0, #11, 1ed0 <seq_builtin+0x810>
    1ec0:	ldrb	w19, [x27, x26]
    1ec4:	mov	w24, w26
    1ec8:	add	x26, x26, #0x1
    1ecc:	cbnz	w19, 1eac <seq_builtin+0x7ec>
    1ed0:	cmp	w20, w24
    1ed4:	ldr	q0, [sp, #96]
    1ed8:	add	x26, x21, #0x1c0
    1edc:	csel	w20, w20, w24, ge  // ge = tcont
    1ee0:	add	x19, x26, #0x10
    1ee4:	add	x2, x23, #0x9d8
    1ee8:	mov	x1, #0x1c                  	// #28
    1eec:	mov	x0, x19
    1ef0:	bl	1070 <snprintf@plt>
    1ef4:	mov	w23, w0
    1ef8:	ldrb	w1, [x26, #48]
    1efc:	mov	x0, x19
    1f00:	mov	x28, #0x0                   	// #0
    1f04:	bl	1160 <strchr@plt>
    1f08:	add	x27, x0, #0x1
    1f0c:	sub	w1, w20, w24
    1f10:	add	w25, w1, w25
    1f14:	cbnz	x0, 1f30 <seq_builtin+0x870>
    1f18:	b	2044 <seq_builtin+0x984>
    1f1c:	bl	10f0 <__ctype_b_loc@plt>
    1f20:	ubfiz	x19, x19, #1, #8
    1f24:	ldr	x0, [x0]
    1f28:	ldrh	w0, [x0, x19]
    1f2c:	tbz	w0, #11, 1f40 <seq_builtin+0x880>
    1f30:	ldrb	w19, [x27, x28]
    1f34:	mov	w26, w28
    1f38:	add	x28, x28, #0x1
    1f3c:	cbnz	w19, 1f1c <seq_builtin+0x85c>
    1f40:	cmp	w26, #0x0
    1f44:	sub	w0, w20, w26
    1f48:	ccmp	w20, #0x0, #0x0, ne  // ne = any
    1f4c:	add	w23, w0, w23
    1f50:	b.ne	204c <seq_builtin+0x98c>  // b.any
    1f54:	sub	w23, w23, #0x1
    1f58:	cmp	w25, w23
    1f5c:	add	x0, x21, #0x1c0
    1f60:	csel	w2, w25, w23, ge  // ge = tcont
    1f64:	cbz	w2, 201c <seq_builtin+0x95c>
    1f68:	add	x0, x0, #0x10
    1f6c:	mov	w3, w20
    1f70:	adrp	x4, 3000 <__multf3+0x78>
    1f74:	mov	x20, x0
    1f78:	add	x4, x4, #0xaf8
    1f7c:	adrp	x1, 3000 <__multf3+0x78>
    1f80:	add	x1, x1, #0xb00
    1f84:	bl	1060 <sprintf@plt>
    1f88:	ldp	x27, x28, [sp, #80]
    1f8c:	b	1bf8 <seq_builtin+0x538>
    1f90:	mov	x1, x20
    1f94:	adrp	x0, 3000 <__multf3+0x78>
    1f98:	add	x0, x0, #0xa60
    1f9c:	bl	1030 <builtin_error@plt>
    1fa0:	mov	w0, #0x1                   	// #1
    1fa4:	b	1794 <seq_builtin+0xd4>
    1fa8:	add	x0, x0, x2
    1fac:	b	1cb4 <seq_builtin+0x5f4>
    1fb0:	add	x1, x20, x0
    1fb4:	mov	x2, #0x2                   	// #2
    1fb8:	ldrb	w1, [x1, #1]
    1fbc:	cmp	w1, #0x25
    1fc0:	b.eq	1fa8 <seq_builtin+0x8e8>  // b.none
    1fc4:	mov	x1, x20
    1fc8:	adrp	x0, 3000 <__multf3+0x78>
    1fcc:	add	x0, x0, #0xaa0
    1fd0:	bl	1030 <builtin_error@plt>
    1fd4:	mov	w0, #0x1                   	// #1
    1fd8:	ldp	x27, x28, [sp, #80]
    1fdc:	b	1794 <seq_builtin+0xd4>
    1fe0:	adrp	x0, 3000 <__multf3+0x78>
    1fe4:	add	x0, x0, #0xac8
    1fe8:	bl	1040 <builtin_warning@plt>
    1fec:	str	wzr, [x27, #8]
    1ff0:	b	1d04 <seq_builtin+0x644>
    1ff4:	bl	10d0 <strerror@plt>
    1ff8:	mov	x2, x0
    1ffc:	mov	x1, x19
    2000:	adrp	x0, 3000 <__multf3+0x78>
    2004:	add	x0, x0, #0x9f0
    2008:	bl	1030 <builtin_error@plt>
    200c:	mov	w0, #0x1                   	// #1
    2010:	str	w0, [x24, #44]
    2014:	mov	w0, #0x1                   	// #1
    2018:	b	1794 <seq_builtin+0xd4>
    201c:	add	x0, x0, #0x10
    2020:	mov	w2, w20
    2024:	adrp	x3, 3000 <__multf3+0x78>
    2028:	mov	x20, x0
    202c:	add	x3, x3, #0xaf8
    2030:	adrp	x1, 3000 <__multf3+0x78>
    2034:	add	x1, x1, #0xb10
    2038:	bl	1060 <sprintf@plt>
    203c:	ldp	x27, x28, [sp, #80]
    2040:	b	1bf8 <seq_builtin+0x538>
    2044:	add	w23, w20, w23
    2048:	mov	w26, #0x0                   	// #0
    204c:	cmp	w20, #0x0
    2050:	cset	w0, ne  // ne = any
    2054:	cmp	w26, #0x0
    2058:	csel	w1, w0, wzr, eq  // eq = none
    205c:	cbz	w1, 2068 <seq_builtin+0x9a8>
    2060:	add	w23, w23, #0x1
    2064:	mov	w0, w1
    2068:	cmp	w24, #0x0
    206c:	ccmp	w0, #0x0, #0x4, eq  // eq = none
    2070:	cinc	w25, w25, ne  // ne = any
    2074:	b	1f58 <seq_builtin+0x898>
    2078:	ldr	q0, [sp, #128]
    207c:	bl	37f0 <__fixtfdi>
    2080:	mov	x20, x0
    2084:	ldr	q0, [sp, #96]
    2088:	bl	37f0 <__fixtfdi>
    208c:	mov	x19, x0
    2090:	ldr	q0, [sp, #112]
    2094:	bl	37f0 <__fixtfdi>
    2098:	mov	x2, x20
    209c:	mov	x1, x19
    20a0:	bl	1090 <print_intseq@plt>
    20a4:	b	1794 <seq_builtin+0xd4>
    20a8:	mov	x20, x26
    20ac:	mov	w22, #0x1                   	// #1
    20b0:	ldp	x27, x28, [sp, #80]
    20b4:	b	1bd8 <seq_builtin+0x518>
    20b8:	ldr	w0, [x1, #8]
    20bc:	cbnz	w0, 1e04 <seq_builtin+0x744>
    20c0:	adrp	x20, 3000 <__multf3+0x78>
    20c4:	add	x20, x20, #0x9d8
    20c8:	b	1bf8 <seq_builtin+0x538>
    20cc:	nop

00000000000020d0 <__addtf3>:
    20d0:	stp	x29, x30, [sp, #-48]!
    20d4:	mov	x29, sp
    20d8:	str	q0, [sp, #16]
    20dc:	str	q1, [sp, #32]
    20e0:	ldp	x4, x1, [sp, #16]
    20e4:	ldp	x0, x3, [sp, #32]
    20e8:	mrs	x15, fpcr
    20ec:	mov	x11, x0
    20f0:	ubfiz	x0, x3, #3, #48
    20f4:	lsr	x6, x1, #63
    20f8:	lsr	x5, x3, #63
    20fc:	ubfiz	x2, x1, #3, #48
    2100:	orr	x9, x0, x11, lsr #61
    2104:	ubfx	x7, x1, #48, #15
    2108:	ubfx	x0, x3, #48, #15
    210c:	mov	x12, x6
    2110:	and	w10, w6, #0xff
    2114:	mov	x16, x6
    2118:	cmp	x6, x5
    211c:	orr	x2, x2, x4, lsr #61
    2120:	and	w6, w5, #0xff
    2124:	mov	x1, x7
    2128:	lsl	x8, x4, #3
    212c:	mov	x3, x0
    2130:	lsl	x13, x11, #3
    2134:	b.eq	22e0 <__addtf3+0x210>  // b.none
    2138:	sub	w0, w7, w0
    213c:	cmp	w0, #0x0
    2140:	b.le	228c <__addtf3+0x1bc>
    2144:	cbz	x3, 2340 <__addtf3+0x270>
    2148:	orr	x9, x9, #0x8000000000000
    214c:	mov	x3, #0x7fff                	// #32767
    2150:	cmp	x1, x3
    2154:	b.eq	2544 <__addtf3+0x474>  // b.none
    2158:	cmp	w0, #0x74
    215c:	b.gt	25c8 <__addtf3+0x4f8>
    2160:	cmp	w0, #0x3f
    2164:	b.gt	2728 <__addtf3+0x658>
    2168:	mov	w3, #0x40                  	// #64
    216c:	sub	w3, w3, w0
    2170:	lsr	x5, x13, x0
    2174:	lsl	x13, x13, x3
    2178:	cmp	x13, #0x0
    217c:	cset	x4, ne  // ne = any
    2180:	lsl	x3, x9, x3
    2184:	orr	x3, x3, x5
    2188:	lsr	x0, x9, x0
    218c:	orr	x3, x3, x4
    2190:	sub	x2, x2, x0
    2194:	subs	x8, x8, x3
    2198:	sbc	x2, x2, xzr
    219c:	and	x3, x2, #0x7ffffffffffff
    21a0:	tbz	x2, #51, 2380 <__addtf3+0x2b0>
    21a4:	cbz	x3, 25ac <__addtf3+0x4dc>
    21a8:	clz	x0, x3
    21ac:	sub	w0, w0, #0xc
    21b0:	neg	w2, w0
    21b4:	lsl	x4, x3, x0
    21b8:	lsl	x3, x8, x0
    21bc:	lsr	x8, x8, x2
    21c0:	orr	x2, x8, x4
    21c4:	cmp	x1, w0, sxtw
    21c8:	sxtw	x4, w0
    21cc:	b.gt	258c <__addtf3+0x4bc>
    21d0:	sub	w1, w0, w1
    21d4:	add	w0, w1, #0x1
    21d8:	cmp	w0, #0x3f
    21dc:	b.gt	26f0 <__addtf3+0x620>
    21e0:	mov	w1, #0x40                  	// #64
    21e4:	sub	w1, w1, w0
    21e8:	lsr	x4, x3, x0
    21ec:	lsl	x3, x3, x1
    21f0:	cmp	x3, #0x0
    21f4:	lsl	x8, x2, x1
    21f8:	cset	x1, ne  // ne = any
    21fc:	orr	x8, x8, x4
    2200:	lsr	x2, x2, x0
    2204:	orr	x8, x8, x1
    2208:	orr	x5, x8, x2
    220c:	cbz	x5, 2394 <__addtf3+0x2c4>
    2210:	and	x3, x8, #0x7
    2214:	mov	x1, #0x0                   	// #0
    2218:	mov	w7, #0x1                   	// #1
    221c:	cbz	x3, 25d8 <__addtf3+0x508>
    2220:	and	x3, x15, #0xc00000
    2224:	cmp	x3, #0x400, lsl #12
    2228:	b.eq	251c <__addtf3+0x44c>  // b.none
    222c:	cmp	x3, #0x800, lsl #12
    2230:	b.eq	24fc <__addtf3+0x42c>  // b.none
    2234:	cbz	x3, 2528 <__addtf3+0x458>
    2238:	and	x3, x2, #0x8000000000000
    223c:	mov	w0, #0x10                  	// #16
    2240:	cbz	w7, 2248 <__addtf3+0x178>
    2244:	orr	w0, w0, #0x8
    2248:	cbz	x3, 2560 <__addtf3+0x490>
    224c:	add	x1, x1, #0x1
    2250:	mov	x3, #0x7fff                	// #32767
    2254:	cmp	x1, x3
    2258:	b.eq	2444 <__addtf3+0x374>  // b.none
    225c:	ubfx	x5, x2, #3, #48
    2260:	extr	x8, x2, x8, #3
    2264:	and	w1, w1, #0x7fff
    2268:	mov	x7, #0x0                   	// #0
    226c:	orr	w1, w1, w10, lsl #15
    2270:	bfxil	x7, x5, #0, #48
    2274:	fmov	d0, x8
    2278:	bfi	x7, x1, #48, #16
    227c:	fmov	v0.d[1], x7
    2280:	cbnz	w0, 24a0 <__addtf3+0x3d0>
    2284:	ldp	x29, x30, [sp], #48
    2288:	ret
    228c:	mov	x14, x5
    2290:	b.eq	23ac <__addtf3+0x2dc>  // b.none
    2294:	cbnz	x7, 2630 <__addtf3+0x560>
    2298:	orr	x1, x2, x8
    229c:	cbz	x1, 235c <__addtf3+0x28c>
    22a0:	cmn	w0, #0x1
    22a4:	b.eq	2a4c <__addtf3+0x97c>  // b.none
    22a8:	mov	x1, #0x7fff                	// #32767
    22ac:	mvn	w0, w0
    22b0:	cmp	x3, x1
    22b4:	b.ne	2644 <__addtf3+0x574>  // b.any
    22b8:	orr	x0, x9, x13
    22bc:	cbnz	x0, 29a4 <__addtf3+0x8d4>
    22c0:	mov	x16, x14
    22c4:	nop
    22c8:	mov	x6, #0x0                   	// #0
    22cc:	fmov	d0, x6
    22d0:	lsl	x16, x16, #63
    22d4:	orr	x7, x16, #0x7fff000000000000
    22d8:	fmov	v0.d[1], x7
    22dc:	b	2284 <__addtf3+0x1b4>
    22e0:	sub	w7, w7, w0
    22e4:	cmp	w7, #0x0
    22e8:	b.le	24b4 <__addtf3+0x3e4>
    22ec:	cbz	x0, 23f4 <__addtf3+0x324>
    22f0:	orr	x9, x9, #0x8000000000000
    22f4:	mov	x0, #0x7fff                	// #32767
    22f8:	cmp	x1, x0
    22fc:	b.eq	2544 <__addtf3+0x474>  // b.none
    2300:	cmp	w7, #0x74
    2304:	b.gt	26d8 <__addtf3+0x608>
    2308:	cmp	w7, #0x3f
    230c:	b.gt	27d8 <__addtf3+0x708>
    2310:	mov	w0, #0x40                  	// #64
    2314:	sub	w0, w0, w7
    2318:	lsr	x5, x13, x7
    231c:	lsl	x13, x13, x0
    2320:	cmp	x13, #0x0
    2324:	lsl	x3, x9, x0
    2328:	cset	x4, ne  // ne = any
    232c:	orr	x3, x3, x5
    2330:	lsr	x0, x9, x7
    2334:	orr	x3, x3, x4
    2338:	add	x2, x2, x0
    233c:	b	26e4 <__addtf3+0x614>
    2340:	orr	x3, x9, x13
    2344:	cbz	x3, 26b4 <__addtf3+0x5e4>
    2348:	subs	w0, w0, #0x1
    234c:	b.ne	214c <__addtf3+0x7c>  // b.any
    2350:	subs	x8, x8, x13
    2354:	sbc	x2, x2, x9
    2358:	b	219c <__addtf3+0xcc>
    235c:	mov	x0, #0x7fff                	// #32767
    2360:	cmp	x3, x0
    2364:	b.eq	2a98 <__addtf3+0x9c8>  // b.none
    2368:	mov	w10, w6
    236c:	mov	x2, x9
    2370:	mov	x8, x13
    2374:	mov	x1, x3
    2378:	mov	x12, x5
    237c:	nop
    2380:	orr	x5, x8, x2
    2384:	and	x3, x8, #0x7
    2388:	mov	w7, #0x0                   	// #0
    238c:	cbnz	x1, 221c <__addtf3+0x14c>
    2390:	cbnz	x5, 2210 <__addtf3+0x140>
    2394:	mov	x8, #0x0                   	// #0
    2398:	mov	x1, #0x0                   	// #0
    239c:	mov	w0, #0x0                   	// #0
    23a0:	and	x5, x5, #0xffffffffffff
    23a4:	and	w1, w1, #0x7fff
    23a8:	b	2268 <__addtf3+0x198>
    23ac:	add	x5, x7, #0x1
    23b0:	tst	x5, #0x7ffe
    23b4:	b.ne	2684 <__addtf3+0x5b4>  // b.any
    23b8:	orr	x7, x2, x8
    23bc:	orr	x5, x9, x13
    23c0:	cbnz	x1, 2844 <__addtf3+0x774>
    23c4:	cbz	x7, 28ec <__addtf3+0x81c>
    23c8:	cbz	x5, 2900 <__addtf3+0x830>
    23cc:	subs	x4, x8, x13
    23d0:	cmp	x8, x13
    23d4:	sbc	x3, x2, x9
    23d8:	tbz	x3, #51, 2acc <__addtf3+0x9fc>
    23dc:	subs	x8, x13, x8
    23e0:	mov	w10, w6
    23e4:	sbc	x2, x9, x2
    23e8:	mov	x12, x14
    23ec:	orr	x5, x8, x2
    23f0:	b	220c <__addtf3+0x13c>
    23f4:	orr	x0, x9, x13
    23f8:	cbz	x0, 28cc <__addtf3+0x7fc>
    23fc:	subs	w7, w7, #0x1
    2400:	b.ne	22f4 <__addtf3+0x224>  // b.any
    2404:	adds	x8, x8, x13
    2408:	adc	x2, x9, x2
    240c:	nop
    2410:	tbz	x2, #51, 2380 <__addtf3+0x2b0>
    2414:	add	x1, x1, #0x1
    2418:	mov	x0, #0x7fff                	// #32767
    241c:	cmp	x1, x0
    2420:	b.eq	290c <__addtf3+0x83c>  // b.none
    2424:	and	x0, x8, #0x1
    2428:	and	x3, x2, #0xfff7ffffffffffff
    242c:	orr	x8, x0, x8, lsr #1
    2430:	mov	w7, #0x0                   	// #0
    2434:	orr	x8, x8, x2, lsl #63
    2438:	lsr	x2, x3, #1
    243c:	and	x3, x8, #0x7
    2440:	b	221c <__addtf3+0x14c>
    2444:	and	x3, x15, #0xc00000
    2448:	cbz	x3, 2480 <__addtf3+0x3b0>
    244c:	cmp	x3, #0x400, lsl #12
    2450:	b.eq	2478 <__addtf3+0x3a8>  // b.none
    2454:	cmp	x3, #0x800, lsl #12
    2458:	csel	w12, w12, wzr, eq  // eq = none
    245c:	cbnz	w12, 2480 <__addtf3+0x3b0>
    2460:	mov	w1, #0x14                  	// #20
    2464:	mov	x8, #0xffffffffffffffff    	// #-1
    2468:	orr	w0, w0, w1
    246c:	mov	x5, #0x1fffffffffffffff    	// #2305843009213693951
    2470:	mov	x1, #0x7ffe                	// #32766
    2474:	b	23a0 <__addtf3+0x2d0>
    2478:	cbnz	x12, 2460 <__addtf3+0x390>
    247c:	nop
    2480:	mov	w1, #0x14                  	// #20
    2484:	and	x16, x10, #0xff
    2488:	orr	w0, w0, w1
    248c:	mov	x6, #0x0                   	// #0
    2490:	fmov	d0, x6
    2494:	lsl	x16, x16, #63
    2498:	orr	x7, x16, #0x7fff000000000000
    249c:	fmov	v0.d[1], x7
    24a0:	str	q0, [sp, #16]
    24a4:	bl	3928 <__sfp_handle_exceptions>
    24a8:	ldr	q0, [sp, #16]
    24ac:	ldp	x29, x30, [sp], #48
    24b0:	ret
    24b4:	b.eq	25f4 <__addtf3+0x524>  // b.none
    24b8:	cbnz	x1, 2778 <__addtf3+0x6a8>
    24bc:	orr	x0, x2, x8
    24c0:	cbz	x0, 29e4 <__addtf3+0x914>
    24c4:	cmn	w7, #0x1
    24c8:	b.eq	2b44 <__addtf3+0xa74>  // b.none
    24cc:	mov	x0, #0x7fff                	// #32767
    24d0:	mvn	w7, w7
    24d4:	cmp	x3, x0
    24d8:	b.ne	278c <__addtf3+0x6bc>  // b.any
    24dc:	orr	x0, x9, x13
    24e0:	cbz	x0, 22c8 <__addtf3+0x1f8>
    24e4:	lsr	x7, x9, #50
    24e8:	mov	x8, x13
    24ec:	eor	x7, x7, #0x1
    24f0:	mov	x2, x9
    24f4:	and	w7, w7, #0x1
    24f8:	b	2558 <__addtf3+0x488>
    24fc:	mov	w0, #0x10                  	// #16
    2500:	cbz	x12, 250c <__addtf3+0x43c>
    2504:	adds	x8, x8, #0x8
    2508:	cinc	x2, x2, cs  // cs = hs, nlast
    250c:	and	x3, x2, #0x8000000000000
    2510:	cbz	w7, 2248 <__addtf3+0x178>
    2514:	orr	w0, w0, #0x8
    2518:	b	2248 <__addtf3+0x178>
    251c:	mov	w0, #0x10                  	// #16
    2520:	cbnz	x12, 250c <__addtf3+0x43c>
    2524:	b	2504 <__addtf3+0x434>
    2528:	and	x3, x8, #0xf
    252c:	mov	w0, #0x10                  	// #16
    2530:	cmp	x3, #0x4
    2534:	b.eq	250c <__addtf3+0x43c>  // b.none
    2538:	adds	x8, x8, #0x4
    253c:	cinc	x2, x2, cs  // cs = hs, nlast
    2540:	b	250c <__addtf3+0x43c>
    2544:	orr	x0, x2, x8
    2548:	cbz	x0, 22c8 <__addtf3+0x1f8>
    254c:	lsr	x7, x2, #50
    2550:	eor	x7, x7, #0x1
    2554:	and	w7, w7, #0x1
    2558:	mov	w0, w7
    255c:	mov	x1, #0x7fff                	// #32767
    2560:	lsr	x5, x2, #3
    2564:	extr	x8, x2, x8, #3
    2568:	mov	x2, #0x7fff                	// #32767
    256c:	cmp	x1, x2
    2570:	b.ne	23a0 <__addtf3+0x2d0>  // b.any
    2574:	orr	x1, x5, x8
    2578:	cbz	x1, 2be4 <__addtf3+0xb14>
    257c:	orr	x5, x5, #0x800000000000
    2580:	mov	w1, #0x7fff                	// #32767
    2584:	and	x5, x5, #0xffffffffffff
    2588:	b	2268 <__addtf3+0x198>
    258c:	mov	x8, x3
    2590:	and	x2, x2, #0xfff7ffffffffffff
    2594:	sub	x1, x1, x4
    2598:	orr	x5, x8, x2
    259c:	and	x3, x8, #0x7
    25a0:	mov	w7, #0x0                   	// #0
    25a4:	cbz	x1, 2390 <__addtf3+0x2c0>
    25a8:	b	221c <__addtf3+0x14c>
    25ac:	clz	x2, x8
    25b0:	add	w0, w2, #0x34
    25b4:	cmp	w0, #0x3f
    25b8:	b.le	21b0 <__addtf3+0xe0>
    25bc:	sub	w2, w2, #0xc
    25c0:	lsl	x2, x8, x2
    25c4:	b	21c4 <__addtf3+0xf4>
    25c8:	orr	x0, x9, x13
    25cc:	cmp	x0, #0x0
    25d0:	cset	x3, ne  // ne = any
    25d4:	b	2194 <__addtf3+0xc4>
    25d8:	and	x3, x2, #0x8000000000000
    25dc:	mov	w0, #0x0                   	// #0
    25e0:	cbz	w7, 2248 <__addtf3+0x178>
    25e4:	mov	w0, #0x0                   	// #0
    25e8:	tbz	w15, #11, 2248 <__addtf3+0x178>
    25ec:	orr	w0, w0, #0x8
    25f0:	b	2248 <__addtf3+0x178>
    25f4:	add	x0, x1, #0x1
    25f8:	tst	x0, #0x7ffe
    25fc:	b.ne	2804 <__addtf3+0x734>  // b.any
    2600:	orr	x14, x2, x8
    2604:	cbnz	x1, 29c0 <__addtf3+0x8f0>
    2608:	orr	x5, x9, x13
    260c:	cbz	x14, 2a14 <__addtf3+0x944>
    2610:	cbz	x5, 2900 <__addtf3+0x830>
    2614:	adds	x8, x8, x13
    2618:	adc	x2, x9, x2
    261c:	tbz	x2, #51, 23ec <__addtf3+0x31c>
    2620:	and	x2, x2, #0xfff7ffffffffffff
    2624:	and	x3, x8, #0x7
    2628:	mov	x1, #0x1                   	// #1
    262c:	b	221c <__addtf3+0x14c>
    2630:	mov	x1, #0x7fff                	// #32767
    2634:	neg	w0, w0
    2638:	orr	x2, x2, #0x8000000000000
    263c:	cmp	x3, x1
    2640:	b.eq	22b8 <__addtf3+0x1e8>  // b.none
    2644:	cmp	w0, #0x74
    2648:	b.gt	2754 <__addtf3+0x684>
    264c:	cmp	w0, #0x3f
    2650:	b.gt	2970 <__addtf3+0x8a0>
    2654:	mov	w1, #0x40                  	// #64
    2658:	sub	w1, w1, w0
    265c:	lsr	x4, x8, x0
    2660:	lsl	x8, x8, x1
    2664:	cmp	x8, #0x0
    2668:	lsl	x8, x2, x1
    266c:	cset	x1, ne  // ne = any
    2670:	orr	x8, x8, x4
    2674:	lsr	x0, x2, x0
    2678:	orr	x8, x8, x1
    267c:	sub	x9, x9, x0
    2680:	b	2760 <__addtf3+0x690>
    2684:	subs	x4, x8, x13
    2688:	cmp	x8, x13
    268c:	sbc	x3, x2, x9
    2690:	tbnz	x3, #51, 282c <__addtf3+0x75c>
    2694:	orr	x5, x4, x3
    2698:	cbnz	x5, 2958 <__addtf3+0x888>
    269c:	and	x15, x15, #0xc00000
    26a0:	mov	x8, #0x0                   	// #0
    26a4:	cmp	x15, #0x800, lsl #12
    26a8:	mov	x1, #0x0                   	// #0
    26ac:	cset	w10, eq  // eq = none
    26b0:	b	23a0 <__addtf3+0x2d0>
    26b4:	mov	x0, #0x7fff                	// #32767
    26b8:	cmp	x7, x0
    26bc:	b.ne	2380 <__addtf3+0x2b0>  // b.any
    26c0:	orr	x0, x2, x8
    26c4:	cbnz	x0, 254c <__addtf3+0x47c>
    26c8:	mov	x8, #0x0                   	// #0
    26cc:	mov	x5, #0x0                   	// #0
    26d0:	mov	w0, #0x0                   	// #0
    26d4:	b	2574 <__addtf3+0x4a4>
    26d8:	orr	x0, x9, x13
    26dc:	cmp	x0, #0x0
    26e0:	cset	x3, ne  // ne = any
    26e4:	adds	x8, x3, x8
    26e8:	cinc	x2, x2, cs  // cs = hs, nlast
    26ec:	b	2410 <__addtf3+0x340>
    26f0:	mov	w4, #0x80                  	// #128
    26f4:	sub	w4, w4, w0
    26f8:	cmp	w0, #0x40
    26fc:	sub	w8, w1, #0x3f
    2700:	lsl	x0, x2, x4
    2704:	orr	x0, x3, x0
    2708:	csel	x3, x0, x3, ne  // ne = any
    270c:	lsr	x8, x2, x8
    2710:	cmp	x3, #0x0
    2714:	mov	x2, #0x0                   	// #0
    2718:	cset	x0, ne  // ne = any
    271c:	orr	x8, x0, x8
    2720:	mov	x5, x8
    2724:	b	220c <__addtf3+0x13c>
    2728:	mov	w4, #0x80                  	// #128
    272c:	sub	w4, w4, w0
    2730:	subs	w0, w0, #0x40
    2734:	lsl	x4, x9, x4
    2738:	orr	x4, x13, x4
    273c:	csel	x13, x4, x13, ne  // ne = any
    2740:	lsr	x0, x9, x0
    2744:	cmp	x13, #0x0
    2748:	cset	x3, ne  // ne = any
    274c:	orr	x3, x3, x0
    2750:	b	2194 <__addtf3+0xc4>
    2754:	orr	x2, x2, x8
    2758:	cmp	x2, #0x0
    275c:	cset	x8, ne  // ne = any
    2760:	subs	x8, x13, x8
    2764:	mov	w10, w6
    2768:	sbc	x2, x9, xzr
    276c:	mov	x1, x3
    2770:	mov	x12, x14
    2774:	b	219c <__addtf3+0xcc>
    2778:	mov	x0, #0x7fff                	// #32767
    277c:	neg	w7, w7
    2780:	orr	x2, x2, #0x8000000000000
    2784:	cmp	x3, x0
    2788:	b.eq	24dc <__addtf3+0x40c>  // b.none
    278c:	cmp	w7, #0x74
    2790:	b.gt	2960 <__addtf3+0x890>
    2794:	cmp	w7, #0x3f
    2798:	b.gt	2a20 <__addtf3+0x950>
    279c:	mov	w1, #0x40                  	// #64
    27a0:	sub	w1, w1, w7
    27a4:	lsr	x4, x8, x7
    27a8:	lsl	x8, x8, x1
    27ac:	cmp	x8, #0x0
    27b0:	cset	x0, ne  // ne = any
    27b4:	lsl	x8, x2, x1
    27b8:	orr	x8, x8, x4
    27bc:	lsr	x7, x2, x7
    27c0:	orr	x8, x8, x0
    27c4:	add	x9, x9, x7
    27c8:	adds	x8, x8, x13
    27cc:	mov	x1, x3
    27d0:	cinc	x2, x9, cs  // cs = hs, nlast
    27d4:	b	2410 <__addtf3+0x340>
    27d8:	mov	w3, #0x80                  	// #128
    27dc:	sub	w3, w3, w7
    27e0:	subs	w0, w7, #0x40
    27e4:	lsl	x3, x9, x3
    27e8:	orr	x3, x13, x3
    27ec:	csel	x13, x3, x13, ne  // ne = any
    27f0:	lsr	x0, x9, x0
    27f4:	cmp	x13, #0x0
    27f8:	cset	x3, ne  // ne = any
    27fc:	orr	x3, x3, x0
    2800:	b	26e4 <__addtf3+0x614>
    2804:	mov	x1, #0x7fff                	// #32767
    2808:	cmp	x0, x1
    280c:	b.eq	2a68 <__addtf3+0x998>  // b.none
    2810:	adds	x8, x8, x13
    2814:	mov	x1, x0
    2818:	adc	x2, x9, x2
    281c:	ubfx	x3, x8, #1, #3
    2820:	extr	x8, x2, x8, #1
    2824:	lsr	x2, x2, #1
    2828:	b	221c <__addtf3+0x14c>
    282c:	cmp	x13, x8
    2830:	mov	w10, w6
    2834:	sbc	x3, x9, x2
    2838:	sub	x8, x13, x8
    283c:	mov	x12, x14
    2840:	b	21a4 <__addtf3+0xd4>
    2844:	mov	x12, #0x7fff                	// #32767
    2848:	cmp	x1, x12
    284c:	b.eq	2878 <__addtf3+0x7a8>  // b.none
    2850:	cmp	x3, x12
    2854:	b.eq	2aa8 <__addtf3+0x9d8>  // b.none
    2858:	cbnz	x7, 2890 <__addtf3+0x7c0>
    285c:	mov	w7, w0
    2860:	cbnz	x5, 2b88 <__addtf3+0xab8>
    2864:	mov	x8, #0xffffffffffffffff    	// #-1
    2868:	mov	x5, #0xffffffffffff        	// #281474976710655
    286c:	mov	w0, #0x1                   	// #1
    2870:	mov	w10, #0x0                   	// #0
    2874:	b	257c <__addtf3+0x4ac>
    2878:	cbz	x7, 2ba4 <__addtf3+0xad4>
    287c:	lsr	x0, x2, #50
    2880:	cmp	x3, x1
    2884:	eor	x0, x0, #0x1
    2888:	and	w0, w0, #0x1
    288c:	b.eq	2aa8 <__addtf3+0x9d8>  // b.none
    2890:	cbz	x5, 2ac4 <__addtf3+0x9f4>
    2894:	bfi	x4, x2, #61, #3
    2898:	lsr	x5, x2, #3
    289c:	mov	x8, x4
    28a0:	tbz	x2, #50, 28bc <__addtf3+0x7ec>
    28a4:	lsr	x1, x9, #3
    28a8:	tbnz	x9, #50, 28bc <__addtf3+0x7ec>
    28ac:	mov	x8, x11
    28b0:	mov	w10, w6
    28b4:	bfi	x8, x9, #61, #3
    28b8:	mov	x5, x1
    28bc:	extr	x5, x5, x8, #61
    28c0:	bfi	x8, x5, #61, #3
    28c4:	lsr	x5, x5, #3
    28c8:	b	2574 <__addtf3+0x4a4>
    28cc:	mov	x0, #0x7fff                	// #32767
    28d0:	cmp	x1, x0
    28d4:	b.ne	2380 <__addtf3+0x2b0>  // b.any
    28d8:	orr	x0, x2, x8
    28dc:	cbz	x0, 26c8 <__addtf3+0x5f8>
    28e0:	lsr	x7, x2, #50
    28e4:	eor	w7, w7, #0x1
    28e8:	b	2558 <__addtf3+0x488>
    28ec:	cbz	x5, 2a00 <__addtf3+0x930>
    28f0:	mov	w10, w6
    28f4:	mov	x2, x9
    28f8:	mov	x8, x13
    28fc:	mov	x12, x14
    2900:	mov	x1, #0x0                   	// #0
    2904:	mov	x3, #0x0                   	// #0
    2908:	b	25e4 <__addtf3+0x514>
    290c:	ands	x3, x15, #0xc00000
    2910:	b.eq	299c <__addtf3+0x8cc>  // b.none
    2914:	cmp	x3, #0x400, lsl #12
    2918:	eor	w0, w10, #0x1
    291c:	cset	w1, eq  // eq = none
    2920:	tst	w1, w0
    2924:	b.ne	2bc0 <__addtf3+0xaf0>  // b.any
    2928:	cmp	x3, #0x800, lsl #12
    292c:	b.eq	2b6c <__addtf3+0xa9c>  // b.none
    2930:	cmp	x3, #0x400, lsl #12
    2934:	mov	w0, #0x14                  	// #20
    2938:	b.ne	2448 <__addtf3+0x378>  // b.any
    293c:	mov	x2, #0xffffffffffffffff    	// #-1
    2940:	mov	x1, #0x7ffe                	// #32766
    2944:	mov	x8, x2
    2948:	mov	w7, #0x0                   	// #0
    294c:	mov	w0, #0x14                  	// #20
    2950:	cbnz	x12, 250c <__addtf3+0x43c>
    2954:	b	2504 <__addtf3+0x434>
    2958:	mov	x8, x4
    295c:	b	21a4 <__addtf3+0xd4>
    2960:	orr	x2, x2, x8
    2964:	cmp	x2, #0x0
    2968:	cset	x8, ne  // ne = any
    296c:	b	27c8 <__addtf3+0x6f8>
    2970:	mov	w1, #0x80                  	// #128
    2974:	sub	w1, w1, w0
    2978:	subs	w0, w0, #0x40
    297c:	lsl	x1, x2, x1
    2980:	orr	x1, x8, x1
    2984:	csel	x8, x1, x8, ne  // ne = any
    2988:	lsr	x2, x2, x0
    298c:	cmp	x8, #0x0
    2990:	cset	x8, ne  // ne = any
    2994:	orr	x8, x8, x2
    2998:	b	2760 <__addtf3+0x690>
    299c:	mov	w0, #0x14                  	// #20
    29a0:	b	248c <__addtf3+0x3bc>
    29a4:	lsr	x7, x9, #50
    29a8:	mov	w10, w6
    29ac:	eor	x7, x7, #0x1
    29b0:	mov	x8, x13
    29b4:	and	w7, w7, #0x1
    29b8:	mov	x2, x9
    29bc:	b	2558 <__addtf3+0x488>
    29c0:	mov	x0, #0x7fff                	// #32767
    29c4:	cmp	x1, x0
    29c8:	b.eq	2ae8 <__addtf3+0xa18>  // b.none
    29cc:	cmp	x3, x0
    29d0:	b.eq	2b5c <__addtf3+0xa8c>  // b.none
    29d4:	cbnz	x14, 2b00 <__addtf3+0xa30>
    29d8:	mov	x2, x9
    29dc:	mov	x8, x13
    29e0:	b	2558 <__addtf3+0x488>
    29e4:	mov	x0, #0x7fff                	// #32767
    29e8:	cmp	x3, x0
    29ec:	b.eq	2b98 <__addtf3+0xac8>  // b.none
    29f0:	mov	x2, x9
    29f4:	mov	x8, x13
    29f8:	mov	x1, x3
    29fc:	b	2380 <__addtf3+0x2b0>
    2a00:	and	x15, x15, #0xc00000
    2a04:	mov	x8, #0x0                   	// #0
    2a08:	cmp	x15, #0x800, lsl #12
    2a0c:	cset	w10, eq  // eq = none
    2a10:	b	23a0 <__addtf3+0x2d0>
    2a14:	mov	x2, x9
    2a18:	mov	x8, x13
    2a1c:	b	220c <__addtf3+0x13c>
    2a20:	mov	w0, #0x80                  	// #128
    2a24:	sub	w0, w0, w7
    2a28:	subs	w7, w7, #0x40
    2a2c:	lsl	x0, x2, x0
    2a30:	orr	x0, x8, x0
    2a34:	csel	x8, x0, x8, ne  // ne = any
    2a38:	lsr	x2, x2, x7
    2a3c:	cmp	x8, #0x0
    2a40:	cset	x8, ne  // ne = any
    2a44:	orr	x8, x8, x2
    2a48:	b	27c8 <__addtf3+0x6f8>
    2a4c:	cmp	x13, x8
    2a50:	mov	w10, w6
    2a54:	sbc	x2, x9, x2
    2a58:	sub	x8, x13, x8
    2a5c:	mov	x1, x3
    2a60:	mov	x12, x5
    2a64:	b	219c <__addtf3+0xcc>
    2a68:	ands	x3, x15, #0xc00000
    2a6c:	b.eq	299c <__addtf3+0x8cc>  // b.none
    2a70:	cmp	x3, #0x400, lsl #12
    2a74:	eor	w0, w10, #0x1
    2a78:	csel	w0, w0, wzr, eq  // eq = none
    2a7c:	cbnz	w0, 2bc0 <__addtf3+0xaf0>
    2a80:	cmp	x3, #0x800, lsl #12
    2a84:	b.ne	2930 <__addtf3+0x860>  // b.any
    2a88:	cbz	x12, 2b70 <__addtf3+0xaa0>
    2a8c:	mov	w0, #0x14                  	// #20
    2a90:	mov	x16, #0x1                   	// #1
    2a94:	b	248c <__addtf3+0x3bc>
    2a98:	orr	x0, x9, x13
    2a9c:	cbnz	x0, 29a4 <__addtf3+0x8d4>
    2aa0:	mov	w10, w6
    2aa4:	b	26c8 <__addtf3+0x5f8>
    2aa8:	cbz	x5, 2bb4 <__addtf3+0xae4>
    2aac:	tst	x9, #0x4000000000000
    2ab0:	csinc	w0, w0, wzr, ne  // ne = any
    2ab4:	cbnz	x7, 2894 <__addtf3+0x7c4>
    2ab8:	mov	w10, w6
    2abc:	mov	x2, x9
    2ac0:	mov	x8, x13
    2ac4:	mov	w7, w0
    2ac8:	b	2558 <__addtf3+0x488>
    2acc:	orr	x5, x4, x3
    2ad0:	cbz	x5, 2a00 <__addtf3+0x930>
    2ad4:	mov	x2, x3
    2ad8:	mov	x8, x4
    2adc:	and	x3, x4, #0x7
    2ae0:	mov	w7, #0x1                   	// #1
    2ae4:	b	221c <__addtf3+0x14c>
    2ae8:	cbz	x14, 2b54 <__addtf3+0xa84>
    2aec:	lsr	x7, x2, #50
    2af0:	cmp	x3, x1
    2af4:	eor	x7, x7, #0x1
    2af8:	and	w7, w7, #0x1
    2afc:	b.eq	2bcc <__addtf3+0xafc>  // b.none
    2b00:	orr	x13, x9, x13
    2b04:	cbz	x13, 2558 <__addtf3+0x488>
    2b08:	bfi	x4, x2, #61, #3
    2b0c:	lsr	x5, x2, #3
    2b10:	mov	x8, x4
    2b14:	tbz	x2, #50, 2b30 <__addtf3+0xa60>
    2b18:	lsr	x0, x9, #3
    2b1c:	tbnz	x9, #50, 2b30 <__addtf3+0xa60>
    2b20:	and	x8, x11, #0x1fffffffffffffff
    2b24:	mov	w10, w6
    2b28:	orr	x8, x8, x9, lsl #61
    2b2c:	mov	x5, x0
    2b30:	mov	w0, w7
    2b34:	extr	x5, x5, x8, #61
    2b38:	bfi	x8, x5, #61, #3
    2b3c:	lsr	x5, x5, #3
    2b40:	b	2574 <__addtf3+0x4a4>
    2b44:	adds	x8, x8, x13
    2b48:	mov	x1, x3
    2b4c:	adc	x2, x9, x2
    2b50:	b	2410 <__addtf3+0x340>
    2b54:	cmp	x3, x1
    2b58:	b.ne	29d8 <__addtf3+0x908>  // b.any
    2b5c:	orr	x0, x9, x13
    2b60:	cbnz	x0, 2bd4 <__addtf3+0xb04>
    2b64:	cbz	x14, 26c8 <__addtf3+0x5f8>
    2b68:	b	2558 <__addtf3+0x488>
    2b6c:	cbnz	x16, 2a8c <__addtf3+0x9bc>
    2b70:	mov	x2, #0xffffffffffffffff    	// #-1
    2b74:	mov	w10, #0x0                   	// #0
    2b78:	mov	x8, x2
    2b7c:	mov	x1, #0x7ffe                	// #32766
    2b80:	mov	w0, #0x14                  	// #20
    2b84:	b	224c <__addtf3+0x17c>
    2b88:	mov	w10, w6
    2b8c:	mov	x2, x9
    2b90:	mov	x8, x13
    2b94:	b	2558 <__addtf3+0x488>
    2b98:	orr	x0, x9, x13
    2b9c:	cbz	x0, 26c8 <__addtf3+0x5f8>
    2ba0:	b	24e4 <__addtf3+0x414>
    2ba4:	cmp	x3, x1
    2ba8:	b.eq	2aa8 <__addtf3+0x9d8>  // b.none
    2bac:	mov	w7, #0x0                   	// #0
    2bb0:	b	2860 <__addtf3+0x790>
    2bb4:	cbnz	x7, 2ac4 <__addtf3+0x9f4>
    2bb8:	mov	w7, w0
    2bbc:	b	2860 <__addtf3+0x790>
    2bc0:	mov	w0, #0x14                  	// #20
    2bc4:	mov	x16, #0x0                   	// #0
    2bc8:	b	248c <__addtf3+0x3bc>
    2bcc:	orr	x0, x9, x13
    2bd0:	cbz	x0, 2558 <__addtf3+0x488>
    2bd4:	tst	x9, #0x4000000000000
    2bd8:	csinc	w7, w7, wzr, ne  // ne = any
    2bdc:	cbnz	x14, 2b08 <__addtf3+0xa38>
    2be0:	b	29d8 <__addtf3+0x908>
    2be4:	mov	x8, #0x0                   	// #0
    2be8:	mov	w1, #0x7fff                	// #32767
    2bec:	mov	x5, #0x0                   	// #0
    2bf0:	b	2268 <__addtf3+0x198>
    2bf4:	nop

0000000000002bf8 <__eqtf2>:
    2bf8:	stp	x29, x30, [sp, #-48]!
    2bfc:	mov	x29, sp
    2c00:	str	q0, [sp, #16]
    2c04:	str	q1, [sp, #32]
    2c08:	ldp	x6, x1, [sp, #16]
    2c0c:	ldp	x7, x0, [sp, #32]
    2c10:	mrs	x2, fpcr
    2c14:	ubfx	x4, x1, #48, #15
    2c18:	lsr	x2, x1, #63
    2c1c:	lsr	x3, x0, #63
    2c20:	ubfx	x9, x0, #0, #48
    2c24:	mov	x5, #0x7fff                	// #32767
    2c28:	mov	x10, x6
    2c2c:	cmp	x4, x5
    2c30:	and	w2, w2, #0xff
    2c34:	ubfx	x1, x1, #0, #48
    2c38:	and	w3, w3, #0xff
    2c3c:	ubfx	x0, x0, #48, #15
    2c40:	b.eq	2c74 <__eqtf2+0x7c>  // b.none
    2c44:	cmp	x0, x5
    2c48:	b.eq	2c60 <__eqtf2+0x68>  // b.none
    2c4c:	cmp	x4, x0
    2c50:	mov	w0, #0x1                   	// #1
    2c54:	b.eq	2c8c <__eqtf2+0x94>  // b.none
    2c58:	ldp	x29, x30, [sp], #48
    2c5c:	ret
    2c60:	orr	x8, x9, x7
    2c64:	cbnz	x8, 2cf0 <__eqtf2+0xf8>
    2c68:	mov	w0, #0x1                   	// #1
    2c6c:	ldp	x29, x30, [sp], #48
    2c70:	ret
    2c74:	orr	x5, x1, x6
    2c78:	cbnz	x5, 2cc0 <__eqtf2+0xc8>
    2c7c:	cmp	x0, x4
    2c80:	b.ne	2c68 <__eqtf2+0x70>  // b.any
    2c84:	orr	x8, x9, x7
    2c88:	cbnz	x8, 2cf0 <__eqtf2+0xf8>
    2c8c:	cmp	x1, x9
    2c90:	mov	w0, #0x1                   	// #1
    2c94:	ccmp	x6, x7, #0x0, eq  // eq = none
    2c98:	b.ne	2c58 <__eqtf2+0x60>  // b.any
    2c9c:	cmp	w2, w3
    2ca0:	mov	w0, #0x0                   	// #0
    2ca4:	b.eq	2c58 <__eqtf2+0x60>  // b.none
    2ca8:	mov	w0, #0x1                   	// #1
    2cac:	cbnz	x4, 2c58 <__eqtf2+0x60>
    2cb0:	orr	x1, x1, x10
    2cb4:	cmp	x1, #0x0
    2cb8:	cset	w0, ne  // ne = any
    2cbc:	b	2c58 <__eqtf2+0x60>
    2cc0:	tst	x1, #0x800000000000
    2cc4:	b.ne	2cdc <__eqtf2+0xe4>  // b.any
    2cc8:	mov	w0, #0x1                   	// #1
    2ccc:	bl	3928 <__sfp_handle_exceptions>
    2cd0:	mov	w0, #0x1                   	// #1
    2cd4:	ldp	x29, x30, [sp], #48
    2cd8:	ret
    2cdc:	cmp	x0, x4
    2ce0:	mov	w0, #0x1                   	// #1
    2ce4:	b.ne	2c58 <__eqtf2+0x60>  // b.any
    2ce8:	orr	x8, x9, x7
    2cec:	cbz	x8, 2c58 <__eqtf2+0x60>
    2cf0:	tst	x9, #0x800000000000
    2cf4:	b.eq	2cc8 <__eqtf2+0xd0>  // b.none
    2cf8:	b	2c68 <__eqtf2+0x70>
    2cfc:	nop

0000000000002d00 <__getf2>:
    2d00:	stp	x29, x30, [sp, #-48]!
    2d04:	mov	x29, sp
    2d08:	str	q0, [sp, #16]
    2d0c:	str	q1, [sp, #32]
    2d10:	ldp	x8, x1, [sp, #16]
    2d14:	ldp	x9, x0, [sp, #32]
    2d18:	mrs	x2, fpcr
    2d1c:	ubfx	x4, x1, #48, #15
    2d20:	ubfx	x10, x1, #0, #48
    2d24:	lsr	x2, x1, #63
    2d28:	mov	x7, #0x7fff                	// #32767
    2d2c:	mov	x5, x8
    2d30:	cmp	x4, x7
    2d34:	ubfx	x11, x0, #0, #48
    2d38:	ubfx	x6, x0, #48, #15
    2d3c:	lsr	x1, x0, #63
    2d40:	mov	x3, x9
    2d44:	b.eq	2d80 <__getf2+0x80>  // b.none
    2d48:	cmp	x6, x7
    2d4c:	b.eq	2d90 <__getf2+0x90>  // b.none
    2d50:	cbnz	x4, 2db8 <__getf2+0xb8>
    2d54:	orr	x5, x10, x8
    2d58:	cmp	x5, #0x0
    2d5c:	cset	w0, eq  // eq = none
    2d60:	cbnz	x6, 2d6c <__getf2+0x6c>
    2d64:	orr	x3, x11, x9
    2d68:	cbz	x3, 2dd8 <__getf2+0xd8>
    2d6c:	cbz	w0, 2d9c <__getf2+0x9c>
    2d70:	cmp	x1, #0x0
    2d74:	csinv	w0, w0, wzr, ne  // ne = any
    2d78:	ldp	x29, x30, [sp], #48
    2d7c:	ret
    2d80:	orr	x0, x10, x8
    2d84:	cbnz	x0, 2de4 <__getf2+0xe4>
    2d88:	cmp	x6, x4
    2d8c:	b.ne	2db8 <__getf2+0xb8>  // b.any
    2d90:	orr	x3, x11, x3
    2d94:	cbnz	x3, 2de4 <__getf2+0xe4>
    2d98:	cbz	x4, 2dc8 <__getf2+0xc8>
    2d9c:	cmp	x2, x1
    2da0:	b.eq	2df8 <__getf2+0xf8>  // b.none
    2da4:	cmp	x2, #0x0
    2da8:	mov	w0, #0xffffffff            	// #-1
    2dac:	cneg	w0, w0, eq  // eq = none
    2db0:	ldp	x29, x30, [sp], #48
    2db4:	ret
    2db8:	cbnz	x6, 2d9c <__getf2+0x9c>
    2dbc:	orr	x3, x11, x3
    2dc0:	cbnz	x3, 2d9c <__getf2+0x9c>
    2dc4:	b	2da4 <__getf2+0xa4>
    2dc8:	orr	x5, x10, x5
    2dcc:	cmp	x5, #0x0
    2dd0:	cset	w0, eq  // eq = none
    2dd4:	b	2d6c <__getf2+0x6c>
    2dd8:	mov	w0, #0x0                   	// #0
    2ddc:	cbz	x5, 2d78 <__getf2+0x78>
    2de0:	b	2da4 <__getf2+0xa4>
    2de4:	mov	w0, #0x1                   	// #1
    2de8:	bl	3928 <__sfp_handle_exceptions>
    2dec:	mov	w0, #0xfffffffe            	// #-2
    2df0:	ldp	x29, x30, [sp], #48
    2df4:	ret
    2df8:	cmp	x4, x6
    2dfc:	b.gt	2da4 <__getf2+0xa4>
    2e00:	b.lt	2e38 <__getf2+0x138>  // b.tstop
    2e04:	cmp	x10, x11
    2e08:	b.hi	2da4 <__getf2+0xa4>  // b.pmore
    2e0c:	cset	w0, eq  // eq = none
    2e10:	cmp	w0, #0x0
    2e14:	ccmp	x8, x9, #0x0, ne  // ne = any
    2e18:	b.hi	2da4 <__getf2+0xa4>  // b.pmore
    2e1c:	cmp	x10, x11
    2e20:	b.cc	2e38 <__getf2+0x138>  // b.lo, b.ul, b.last
    2e24:	cmp	w0, #0x0
    2e28:	mov	w0, #0x0                   	// #0
    2e2c:	ccmp	x8, x9, #0x2, ne  // ne = any
    2e30:	b.cs	2d78 <__getf2+0x78>  // b.hs, b.nlast
    2e34:	nop
    2e38:	cmp	x2, #0x0
    2e3c:	mov	w0, #0x1                   	// #1
    2e40:	cneg	w0, w0, eq  // eq = none
    2e44:	b	2d78 <__getf2+0x78>

0000000000002e48 <__letf2>:
    2e48:	stp	x29, x30, [sp, #-48]!
    2e4c:	mov	x29, sp
    2e50:	str	q0, [sp, #16]
    2e54:	str	q1, [sp, #32]
    2e58:	ldp	x8, x1, [sp, #16]
    2e5c:	ldp	x9, x0, [sp, #32]
    2e60:	mrs	x2, fpcr
    2e64:	ubfx	x4, x1, #48, #15
    2e68:	ubfx	x10, x1, #0, #48
    2e6c:	lsr	x2, x1, #63
    2e70:	mov	x5, #0x7fff                	// #32767
    2e74:	mov	x6, x8
    2e78:	cmp	x4, x5
    2e7c:	ubfx	x11, x0, #0, #48
    2e80:	ubfx	x7, x0, #48, #15
    2e84:	lsr	x1, x0, #63
    2e88:	mov	x3, x9
    2e8c:	b.eq	2ec4 <__letf2+0x7c>  // b.none
    2e90:	cmp	x7, x5
    2e94:	b.eq	2ed4 <__letf2+0x8c>  // b.none
    2e98:	cbnz	x4, 2f00 <__letf2+0xb8>
    2e9c:	orr	x6, x10, x8
    2ea0:	cmp	x6, #0x0
    2ea4:	cset	w0, eq  // eq = none
    2ea8:	cbnz	x7, 2eec <__letf2+0xa4>
    2eac:	orr	x3, x11, x9
    2eb0:	cbnz	x3, 2eec <__letf2+0xa4>
    2eb4:	mov	w0, #0x0                   	// #0
    2eb8:	cbnz	x6, 2f14 <__letf2+0xcc>
    2ebc:	ldp	x29, x30, [sp], #48
    2ec0:	ret
    2ec4:	orr	x0, x10, x8
    2ec8:	cbnz	x0, 2f28 <__letf2+0xe0>
    2ecc:	cmp	x7, x4
    2ed0:	b.ne	2f00 <__letf2+0xb8>  // b.any
    2ed4:	orr	x3, x11, x3
    2ed8:	cbnz	x3, 2f28 <__letf2+0xe0>
    2edc:	cbnz	x4, 2f0c <__letf2+0xc4>
    2ee0:	orr	x6, x10, x6
    2ee4:	cmp	x6, #0x0
    2ee8:	cset	w0, eq  // eq = none
    2eec:	cbz	w0, 2f0c <__letf2+0xc4>
    2ef0:	cmp	x1, #0x0
    2ef4:	csinv	w0, w0, wzr, ne  // ne = any
    2ef8:	ldp	x29, x30, [sp], #48
    2efc:	ret
    2f00:	cbnz	x7, 2f0c <__letf2+0xc4>
    2f04:	orr	x3, x11, x3
    2f08:	cbz	x3, 2f14 <__letf2+0xcc>
    2f0c:	cmp	x2, x1
    2f10:	b.eq	2f3c <__letf2+0xf4>  // b.none
    2f14:	cmp	x2, #0x0
    2f18:	mov	w0, #0xffffffff            	// #-1
    2f1c:	cneg	w0, w0, eq  // eq = none
    2f20:	ldp	x29, x30, [sp], #48
    2f24:	ret
    2f28:	mov	w0, #0x1                   	// #1
    2f2c:	bl	3928 <__sfp_handle_exceptions>
    2f30:	mov	w0, #0x2                   	// #2
    2f34:	ldp	x29, x30, [sp], #48
    2f38:	ret
    2f3c:	cmp	x4, x7
    2f40:	b.gt	2f14 <__letf2+0xcc>
    2f44:	b.lt	2f78 <__letf2+0x130>  // b.tstop
    2f48:	cmp	x10, x11
    2f4c:	b.hi	2f14 <__letf2+0xcc>  // b.pmore
    2f50:	cset	w0, eq  // eq = none
    2f54:	cmp	w0, #0x0
    2f58:	ccmp	x8, x9, #0x0, ne  // ne = any
    2f5c:	b.hi	2f14 <__letf2+0xcc>  // b.pmore
    2f60:	cmp	x10, x11
    2f64:	b.cc	2f78 <__letf2+0x130>  // b.lo, b.ul, b.last
    2f68:	cmp	w0, #0x0
    2f6c:	mov	w0, #0x0                   	// #0
    2f70:	ccmp	x8, x9, #0x2, ne  // ne = any
    2f74:	b.cs	2ebc <__letf2+0x74>  // b.hs, b.nlast
    2f78:	cmp	x2, #0x0
    2f7c:	mov	w0, #0x1                   	// #1
    2f80:	cneg	w0, w0, eq  // eq = none
    2f84:	b	2ebc <__letf2+0x74>

0000000000002f88 <__multf3>:
    2f88:	stp	x29, x30, [sp, #-80]!
    2f8c:	mov	x29, sp
    2f90:	str	q0, [sp, #48]
    2f94:	str	q1, [sp, #64]
    2f98:	ldp	x1, x0, [sp, #48]
    2f9c:	ldp	x3, x2, [sp, #64]
    2fa0:	mrs	x12, fpcr
    2fa4:	lsr	x4, x0, #63
    2fa8:	ubfx	x8, x0, #0, #48
    2fac:	and	w16, w4, #0xff
    2fb0:	mov	x14, x4
    2fb4:	ubfx	x10, x0, #48, #15
    2fb8:	cbz	w10, 333c <__multf3+0x3b4>
    2fbc:	mov	w4, #0x7fff                	// #32767
    2fc0:	cmp	w10, w4
    2fc4:	b.eq	337c <__multf3+0x3f4>  // b.none
    2fc8:	and	x10, x10, #0xffff
    2fcc:	extr	x4, x8, x1, #61
    2fd0:	mov	x5, #0xffffffffffffc001    	// #-16383
    2fd4:	orr	x8, x4, #0x8000000000000
    2fd8:	add	x10, x10, x5
    2fdc:	lsl	x7, x1, #3
    2fe0:	mov	x11, #0x2                   	// #2
    2fe4:	mov	x9, #0x1                   	// #1
    2fe8:	mov	x6, #0x3                   	// #3
    2fec:	mov	x1, #0x0                   	// #0
    2ff0:	mov	x17, #0x0                   	// #0
    2ff4:	mov	w0, #0x0                   	// #0
    2ff8:	lsr	x5, x2, #63
    2ffc:	ubfx	x4, x2, #0, #48
    3000:	and	w15, w5, #0xff
    3004:	mov	x13, x5
    3008:	ubfx	x5, x2, #48, #15
    300c:	cbz	w5, 33c0 <__multf3+0x438>
    3010:	mov	w9, #0x7fff                	// #32767
    3014:	cmp	w5, w9
    3018:	b.eq	30a8 <__multf3+0x120>  // b.none
    301c:	and	x5, x5, #0xffff
    3020:	extr	x2, x4, x3, #61
    3024:	mov	x4, #0xffffffffffffc001    	// #-16383
    3028:	add	x5, x5, x4
    302c:	add	x10, x10, x5
    3030:	orr	x4, x2, #0x8000000000000
    3034:	lsl	x5, x3, #3
    3038:	mov	x6, #0x0                   	// #0
    303c:	eor	w3, w16, w15
    3040:	cmp	x1, #0xa
    3044:	and	w11, w3, #0xff
    3048:	and	x9, x3, #0xff
    304c:	add	x18, x10, #0x1
    3050:	b.gt	3328 <__multf3+0x3a0>
    3054:	cmp	x1, #0x2
    3058:	b.gt	30e8 <__multf3+0x160>
    305c:	sub	x1, x1, #0x1
    3060:	cmp	x1, #0x1
    3064:	b.hi	3148 <__multf3+0x1c0>  // b.pmore
    3068:	cmp	x6, #0x2
    306c:	b.eq	3404 <__multf3+0x47c>  // b.none
    3070:	cmp	x6, #0x1
    3074:	b.ne	32a8 <__multf3+0x320>  // b.any
    3078:	mov	w1, #0x0                   	// #0
    307c:	mov	x4, #0x0                   	// #0
    3080:	mov	x7, #0x0                   	// #0
    3084:	mov	x3, #0x0                   	// #0
    3088:	orr	w1, w1, w11, lsl #15
    308c:	bfxil	x3, x4, #0, #48
    3090:	fmov	d0, x7
    3094:	bfi	x3, x1, #48, #16
    3098:	fmov	v0.d[1], x3
    309c:	cbnz	w0, 35b0 <__multf3+0x628>
    30a0:	ldp	x29, x30, [sp], #80
    30a4:	ret
    30a8:	mov	x2, #0x7fff                	// #32767
    30ac:	orr	x5, x4, x3
    30b0:	add	x2, x10, x2
    30b4:	cbz	x5, 3414 <__multf3+0x48c>
    30b8:	ands	x1, x4, #0x800000000000
    30bc:	eor	w9, w16, w15
    30c0:	csinc	w0, w0, wzr, ne  // ne = any
    30c4:	and	w11, w9, #0xff
    30c8:	add	x18, x10, #0x8, lsl #12
    30cc:	cmp	x6, #0xa
    30d0:	and	x9, x9, #0xff
    30d4:	b.gt	350c <__multf3+0x584>
    30d8:	mov	x10, x2
    30dc:	mov	x5, x3
    30e0:	mov	x1, x6
    30e4:	mov	x6, #0x3                   	// #3
    30e8:	mov	x2, #0x1                   	// #1
    30ec:	mov	x3, #0x530                 	// #1328
    30f0:	lsl	x1, x2, x1
    30f4:	tst	x1, x3
    30f8:	b.ne	331c <__multf3+0x394>  // b.any
    30fc:	mov	x3, #0x240                 	// #576
    3100:	tst	x1, x3
    3104:	b.ne	3304 <__multf3+0x37c>  // b.any
    3108:	mov	x2, #0x88                  	// #136
    310c:	tst	x1, x2
    3110:	b.eq	3148 <__multf3+0x1c0>  // b.none
    3114:	mov	x8, x4
    3118:	mov	x7, x5
    311c:	mov	x17, x6
    3120:	cmp	x17, #0x2
    3124:	b.eq	375c <__multf3+0x7d4>  // b.none
    3128:	mov	x6, x17
    312c:	mov	w11, w15
    3130:	cmp	x17, #0x3
    3134:	mov	x4, x8
    3138:	mov	x5, x7
    313c:	mov	x9, x13
    3140:	b.ne	3070 <__multf3+0xe8>  // b.any
    3144:	b	3554 <__multf3+0x5cc>
    3148:	lsr	x13, x7, #32
    314c:	and	x6, x5, #0xffffffff
    3150:	and	x17, x4, #0xffffffff
    3154:	and	x7, x7, #0xffffffff
    3158:	stp	x21, x22, [sp, #32]
    315c:	lsr	x22, x5, #32
    3160:	lsr	x2, x4, #32
    3164:	stp	x19, x20, [sp, #16]
    3168:	mul	x19, x13, x6
    316c:	lsr	x4, x8, #32
    3170:	mul	x1, x13, x17
    3174:	and	x3, x8, #0xffffffff
    3178:	madd	x5, x22, x7, x19
    317c:	mov	x14, #0x100000000           	// #4294967296
    3180:	mul	x15, x6, x7
    3184:	mul	x16, x7, x17
    3188:	madd	x7, x2, x7, x1
    318c:	and	x30, x15, #0xffffffff
    3190:	mul	x21, x4, x6
    3194:	add	x15, x5, x15, lsr #32
    3198:	mul	x20, x4, x17
    319c:	cmp	x19, x15
    31a0:	mul	x5, x13, x22
    31a4:	add	x30, x30, x15, lsl #32
    31a8:	mul	x19, x13, x2
    31ac:	add	x13, x7, x16, lsr #32
    31b0:	mul	x6, x6, x3
    31b4:	add	x8, x5, x14
    31b8:	mul	x17, x3, x17
    31bc:	csel	x5, x8, x5, hi  // hi = pmore
    31c0:	madd	x7, x22, x3, x21
    31c4:	cmp	x1, x13
    31c8:	madd	x3, x2, x3, x20
    31cc:	and	x16, x16, #0xffffffff
    31d0:	mul	x8, x22, x4
    31d4:	add	x16, x16, x13, lsl #32
    31d8:	add	x7, x7, x6, lsr #32
    31dc:	mul	x2, x2, x4
    31e0:	add	x3, x3, x17, lsr #32
    31e4:	add	x4, x19, x14
    31e8:	csel	x19, x4, x19, hi  // hi = pmore
    31ec:	and	x1, x17, #0xffffffff
    31f0:	cmp	x21, x7
    31f4:	add	x4, x8, x14
    31f8:	csel	x8, x4, x8, hi  // hi = pmore
    31fc:	add	x1, x1, x3, lsl #32
    3200:	cmp	x20, x3
    3204:	add	x15, x16, x15, lsr #32
    3208:	add	x13, x19, x13, lsr #32
    320c:	add	x14, x2, x14
    3210:	add	x15, x5, x15
    3214:	csel	x2, x14, x2, hi  // hi = pmore
    3218:	adds	x1, x1, x13
    321c:	and	x6, x6, #0xffffffff
    3220:	cset	x5, cs  // cs = hs, nlast
    3224:	cmp	x15, x16
    3228:	cset	x4, cc  // cc = lo, ul, last
    322c:	add	x6, x6, x7, lsl #32
    3230:	adds	x1, x1, x4
    3234:	lsr	x3, x3, #32
    3238:	cset	x4, cs  // cs = hs, nlast
    323c:	cmp	x5, #0x0
    3240:	ccmp	x4, #0x0, #0x0, eq  // eq = none
    3244:	add	x7, x8, x7, lsr #32
    3248:	cinc	x3, x3, ne  // ne = any
    324c:	adds	x5, x15, x6
    3250:	cset	x4, cs  // cs = hs, nlast
    3254:	adds	x1, x1, x7
    3258:	cset	x6, cs  // cs = hs, nlast
    325c:	adds	x1, x1, x4
    3260:	cset	x4, cs  // cs = hs, nlast
    3264:	cmp	x6, #0x0
    3268:	ccmp	x4, #0x0, #0x0, eq  // eq = none
    326c:	orr	x30, x30, x5, lsl #13
    3270:	cinc	x2, x2, ne  // ne = any
    3274:	cmp	x30, #0x0
    3278:	add	x2, x2, x3
    327c:	cset	x3, ne  // ne = any
    3280:	orr	x5, x3, x5, lsr #51
    3284:	orr	x5, x5, x1, lsl #13
    3288:	extr	x4, x2, x1, #51
    328c:	tbz	x2, #39, 3638 <__multf3+0x6b0>
    3290:	ldp	x19, x20, [sp, #16]
    3294:	and	x1, x5, #0x1
    3298:	ldp	x21, x22, [sp, #32]
    329c:	orr	x5, x1, x5, lsr #1
    32a0:	orr	x5, x5, x4, lsl #63
    32a4:	lsr	x4, x4, #1
    32a8:	mov	x1, #0x3fff                	// #16383
    32ac:	add	x2, x18, x1
    32b0:	cmp	x2, #0x0
    32b4:	b.le	3488 <__multf3+0x500>
    32b8:	tst	x5, #0x7
    32bc:	b.eq	32dc <__multf3+0x354>  // b.none
    32c0:	and	x1, x12, #0xc00000
    32c4:	orr	w0, w0, #0x10
    32c8:	cmp	x1, #0x400, lsl #12
    32cc:	b.eq	3710 <__multf3+0x788>  // b.none
    32d0:	cmp	x1, #0x800, lsl #12
    32d4:	b.eq	36a0 <__multf3+0x718>  // b.none
    32d8:	cbz	x1, 36cc <__multf3+0x744>
    32dc:	tbz	x4, #52, 32e8 <__multf3+0x360>
    32e0:	and	x4, x4, #0xffefffffffffffff
    32e4:	add	x2, x18, #0x4, lsl #12
    32e8:	mov	x1, #0x7ffe                	// #32766
    32ec:	cmp	x2, x1
    32f0:	b.gt	360c <__multf3+0x684>
    32f4:	and	w1, w2, #0x7fff
    32f8:	extr	x7, x4, x5, #3
    32fc:	ubfx	x4, x4, #3, #48
    3300:	b	3084 <__multf3+0xfc>
    3304:	mov	w0, w2
    3308:	mov	w11, #0x0                   	// #0
    330c:	mov	x4, #0xffffffffffff        	// #281474976710655
    3310:	mov	x7, #0xffffffffffffffff    	// #-1
    3314:	mov	w1, #0x7fff                	// #32767
    3318:	b	3084 <__multf3+0xfc>
    331c:	mov	w15, w11
    3320:	mov	x13, x9
    3324:	b	3120 <__multf3+0x198>
    3328:	cmp	x1, #0xb
    332c:	b.eq	3114 <__multf3+0x18c>  // b.none
    3330:	mov	w15, w16
    3334:	mov	x13, x14
    3338:	b	3120 <__multf3+0x198>
    333c:	orr	x7, x8, x1
    3340:	cbz	x7, 3464 <__multf3+0x4dc>
    3344:	cbz	x8, 35c4 <__multf3+0x63c>
    3348:	clz	x0, x8
    334c:	sub	x4, x0, #0xf
    3350:	add	w7, w4, #0x3
    3354:	mov	w5, #0x3d                  	// #61
    3358:	sub	w5, w5, w4
    335c:	lsl	x4, x8, x7
    3360:	lsr	x5, x1, x5
    3364:	orr	x8, x5, x4
    3368:	lsl	x7, x1, x7
    336c:	mov	x10, #0xffffffffffffc011    	// #-16367
    3370:	mov	x11, #0x2                   	// #2
    3374:	sub	x10, x10, x0
    3378:	b	2fe4 <__multf3+0x5c>
    337c:	orr	x7, x8, x1
    3380:	cbnz	x7, 3438 <__multf3+0x4b0>
    3384:	lsr	x5, x2, #63
    3388:	ubfx	x4, x2, #0, #48
    338c:	and	w15, w5, #0xff
    3390:	mov	x13, x5
    3394:	mov	x8, #0x0                   	// #0
    3398:	ubfx	x5, x2, #48, #15
    339c:	mov	x11, #0xa                   	// #10
    33a0:	mov	x9, #0x9                   	// #9
    33a4:	mov	x6, #0xb                   	// #11
    33a8:	mov	x1, #0x8                   	// #8
    33ac:	mov	x10, #0x7fff                	// #32767
    33b0:	mov	x17, #0x2                   	// #2
    33b4:	mov	w0, #0x0                   	// #0
    33b8:	cbnz	w5, 3010 <__multf3+0x88>
    33bc:	nop
    33c0:	orr	x5, x4, x3
    33c4:	cbz	x5, 3428 <__multf3+0x4a0>
    33c8:	cbz	x4, 35e8 <__multf3+0x660>
    33cc:	clz	x6, x4
    33d0:	sub	x2, x6, #0xf
    33d4:	add	w5, w2, #0x3
    33d8:	mov	w9, #0x3d                  	// #61
    33dc:	sub	w9, w9, w2
    33e0:	lsl	x2, x4, x5
    33e4:	lsr	x9, x3, x9
    33e8:	orr	x4, x9, x2
    33ec:	lsl	x5, x3, x5
    33f0:	sub	x10, x10, x6
    33f4:	mov	x3, #0xffffffffffffc011    	// #-16367
    33f8:	mov	x6, #0x0                   	// #0
    33fc:	add	x10, x10, x3
    3400:	b	303c <__multf3+0xb4>
    3404:	mov	w1, #0x7fff                	// #32767
    3408:	mov	x4, #0x0                   	// #0
    340c:	mov	x7, #0x0                   	// #0
    3410:	b	3084 <__multf3+0xfc>
    3414:	mov	x1, x11
    3418:	mov	x10, x2
    341c:	mov	x4, #0x0                   	// #0
    3420:	mov	x6, #0x2                   	// #2
    3424:	b	303c <__multf3+0xb4>
    3428:	mov	x1, x9
    342c:	mov	x4, #0x0                   	// #0
    3430:	mov	x6, #0x1                   	// #1
    3434:	b	303c <__multf3+0xb4>
    3438:	lsr	x0, x8, #47
    343c:	mov	x7, x1
    3440:	eor	x0, x0, #0x1
    3444:	mov	x11, #0xe                   	// #14
    3448:	and	w0, w0, #0x1
    344c:	mov	x9, #0xd                   	// #13
    3450:	mov	x6, #0xf                   	// #15
    3454:	mov	x1, #0xc                   	// #12
    3458:	mov	x10, #0x7fff                	// #32767
    345c:	mov	x17, #0x3                   	// #3
    3460:	b	2ff8 <__multf3+0x70>
    3464:	mov	x8, #0x0                   	// #0
    3468:	mov	x11, #0x6                   	// #6
    346c:	mov	x9, #0x5                   	// #5
    3470:	mov	x6, #0x7                   	// #7
    3474:	mov	x1, #0x4                   	// #4
    3478:	mov	x10, #0x0                   	// #0
    347c:	mov	x17, #0x1                   	// #1
    3480:	mov	w0, #0x0                   	// #0
    3484:	b	2ff8 <__multf3+0x70>
    3488:	mov	x1, #0x1                   	// #1
    348c:	sub	x2, x1, x2
    3490:	cmp	x2, #0x74
    3494:	b.gt	3568 <__multf3+0x5e0>
    3498:	cmp	x2, #0x3f
    349c:	b.le	3648 <__multf3+0x6c0>
    34a0:	mov	w1, #0x80                  	// #128
    34a4:	sub	w1, w1, w2
    34a8:	cmp	x2, #0x40
    34ac:	sub	w2, w2, #0x40
    34b0:	lsl	x1, x4, x1
    34b4:	orr	x1, x5, x1
    34b8:	csel	x5, x1, x5, ne  // ne = any
    34bc:	lsr	x2, x4, x2
    34c0:	cmp	x5, #0x0
    34c4:	cset	x7, ne  // ne = any
    34c8:	orr	x7, x7, x2
    34cc:	ands	x4, x7, #0x7
    34d0:	b.eq	367c <__multf3+0x6f4>  // b.none
    34d4:	mov	x4, #0x0                   	// #0
    34d8:	and	x12, x12, #0xc00000
    34dc:	orr	w0, w0, #0x10
    34e0:	cmp	x12, #0x400, lsl #12
    34e4:	b.eq	3748 <__multf3+0x7c0>  // b.none
    34e8:	cmp	x12, #0x800, lsl #12
    34ec:	b.eq	3734 <__multf3+0x7ac>  // b.none
    34f0:	cbz	x12, 36e4 <__multf3+0x75c>
    34f4:	tbnz	x4, #51, 36fc <__multf3+0x774>
    34f8:	orr	w0, w0, #0x8
    34fc:	extr	x7, x4, x7, #3
    3500:	mov	w1, #0x0                   	// #0
    3504:	ubfx	x4, x4, #3, #48
    3508:	b	3598 <__multf3+0x610>
    350c:	cmp	x6, #0xf
    3510:	b.ne	3544 <__multf3+0x5bc>  // b.any
    3514:	tbz	x8, #47, 3530 <__multf3+0x5a8>
    3518:	cbnz	x1, 3530 <__multf3+0x5a8>
    351c:	orr	x4, x4, #0x800000000000
    3520:	mov	w11, w15
    3524:	mov	x7, x3
    3528:	mov	w1, #0x7fff                	// #32767
    352c:	b	3084 <__multf3+0xfc>
    3530:	orr	x4, x8, #0x800000000000
    3534:	mov	w11, w16
    3538:	and	x4, x4, #0xffffffffffff
    353c:	mov	w1, #0x7fff                	// #32767
    3540:	b	3084 <__multf3+0xfc>
    3544:	cmp	x6, #0xb
    3548:	b.ne	3330 <__multf3+0x3a8>  // b.any
    354c:	mov	w11, w15
    3550:	mov	x5, x3
    3554:	orr	x4, x4, #0x800000000000
    3558:	mov	x7, x5
    355c:	and	x4, x4, #0xffffffffffff
    3560:	mov	w1, #0x7fff                	// #32767
    3564:	b	3084 <__multf3+0xfc>
    3568:	orr	x7, x5, x4
    356c:	cbz	x7, 358c <__multf3+0x604>
    3570:	and	x12, x12, #0xc00000
    3574:	orr	w0, w0, #0x10
    3578:	cmp	x12, #0x400, lsl #12
    357c:	sub	x7, x1, x9
    3580:	b.eq	358c <__multf3+0x604>  // b.none
    3584:	cmp	x12, #0x800, lsl #12
    3588:	csel	x7, x9, xzr, eq  // eq = none
    358c:	orr	w0, w0, #0x8
    3590:	mov	w1, #0x0                   	// #0
    3594:	mov	x4, #0x0                   	// #0
    3598:	mov	x3, #0x0                   	// #0
    359c:	fmov	d0, x7
    35a0:	bfxil	x3, x4, #0, #48
    35a4:	bfi	x3, x1, #48, #15
    35a8:	bfi	x3, x11, #63, #1
    35ac:	fmov	v0.d[1], x3
    35b0:	str	q0, [sp, #48]
    35b4:	bl	3928 <__sfp_handle_exceptions>
    35b8:	ldr	q0, [sp, #48]
    35bc:	ldp	x29, x30, [sp], #80
    35c0:	ret
    35c4:	clz	x10, x1
    35c8:	add	x4, x10, #0x31
    35cc:	add	x0, x10, #0x40
    35d0:	cmp	x4, #0x3c
    35d4:	b.le	3350 <__multf3+0x3c8>
    35d8:	sub	w4, w4, #0x3d
    35dc:	mov	x7, #0x0                   	// #0
    35e0:	lsl	x8, x1, x4
    35e4:	b	336c <__multf3+0x3e4>
    35e8:	clz	x6, x3
    35ec:	add	x2, x6, #0x31
    35f0:	add	x6, x6, #0x40
    35f4:	cmp	x2, #0x3c
    35f8:	b.le	33d4 <__multf3+0x44c>
    35fc:	sub	w2, w2, #0x3d
    3600:	mov	x5, #0x0                   	// #0
    3604:	lsl	x4, x3, x2
    3608:	b	33f0 <__multf3+0x468>
    360c:	and	x7, x12, #0xc00000
    3610:	cmp	x7, #0x400, lsl #12
    3614:	b.eq	3718 <__multf3+0x790>  // b.none
    3618:	cmp	x7, #0x800, lsl #12
    361c:	b.eq	36b0 <__multf3+0x728>  // b.none
    3620:	cbz	x7, 3694 <__multf3+0x70c>
    3624:	mov	x4, #0xffffffffffff        	// #281474976710655
    3628:	mov	x7, #0xffffffffffffffff    	// #-1
    362c:	mov	w2, #0x14                  	// #20
    3630:	orr	w0, w0, w2
    3634:	b	3598 <__multf3+0x610>
    3638:	mov	x18, x10
    363c:	ldp	x19, x20, [sp, #16]
    3640:	ldp	x21, x22, [sp, #32]
    3644:	b	32a8 <__multf3+0x320>
    3648:	mov	w1, #0x40                  	// #64
    364c:	sub	w1, w1, w2
    3650:	lsr	x3, x5, x2
    3654:	lsl	x5, x5, x1
    3658:	cmp	x5, #0x0
    365c:	lsl	x7, x4, x1
    3660:	cset	x1, ne  // ne = any
    3664:	orr	x7, x7, x3
    3668:	lsr	x4, x4, x2
    366c:	orr	x7, x7, x1
    3670:	tst	x7, #0x7
    3674:	b.ne	34d8 <__multf3+0x550>  // b.any
    3678:	tbnz	x4, #51, 3754 <__multf3+0x7cc>
    367c:	mov	w1, #0x0                   	// #0
    3680:	extr	x7, x4, x7, #3
    3684:	ubfx	x4, x4, #3, #48
    3688:	tbz	w12, #11, 3084 <__multf3+0xfc>
    368c:	orr	w0, w0, #0x8
    3690:	b	3598 <__multf3+0x610>
    3694:	mov	w1, #0x7fff                	// #32767
    3698:	mov	x4, #0x0                   	// #0
    369c:	b	362c <__multf3+0x6a4>
    36a0:	cbz	x9, 32dc <__multf3+0x354>
    36a4:	adds	x5, x5, #0x8
    36a8:	cinc	x4, x4, cs  // cs = hs, nlast
    36ac:	b	32dc <__multf3+0x354>
    36b0:	cmp	x9, #0x0
    36b4:	mov	w2, #0x7fff                	// #32767
    36b8:	mov	x4, #0xffffffffffff        	// #281474976710655
    36bc:	csel	w1, w1, w2, eq  // eq = none
    36c0:	csel	x4, x4, xzr, eq  // eq = none
    36c4:	csetm	x7, eq  // eq = none
    36c8:	b	362c <__multf3+0x6a4>
    36cc:	and	x1, x5, #0xf
    36d0:	cmp	x1, #0x4
    36d4:	b.eq	32dc <__multf3+0x354>  // b.none
    36d8:	adds	x5, x5, #0x4
    36dc:	cinc	x4, x4, cs  // cs = hs, nlast
    36e0:	b	32dc <__multf3+0x354>
    36e4:	and	x1, x7, #0xf
    36e8:	cmp	x1, #0x4
    36ec:	b.eq	36f8 <__multf3+0x770>  // b.none
    36f0:	adds	x7, x7, #0x4
    36f4:	cinc	x4, x4, cs  // cs = hs, nlast
    36f8:	tbz	x4, #51, 34f8 <__multf3+0x570>
    36fc:	orr	w0, w0, #0x8
    3700:	mov	w1, #0x1                   	// #1
    3704:	mov	x4, #0x0                   	// #0
    3708:	mov	x7, #0x0                   	// #0
    370c:	b	3598 <__multf3+0x610>
    3710:	cbnz	x9, 32dc <__multf3+0x354>
    3714:	b	36a4 <__multf3+0x71c>
    3718:	cmp	x9, #0x0
    371c:	mov	w2, #0x7fff                	// #32767
    3720:	mov	x4, #0xffffffffffff        	// #281474976710655
    3724:	csel	w1, w1, w2, ne  // ne = any
    3728:	csel	x4, x4, xzr, ne  // ne = any
    372c:	csetm	x7, ne  // ne = any
    3730:	b	362c <__multf3+0x6a4>
    3734:	cbz	x9, 36f8 <__multf3+0x770>
    3738:	adds	x7, x7, #0x8
    373c:	cinc	x4, x4, cs  // cs = hs, nlast
    3740:	tbnz	x4, #51, 36fc <__multf3+0x774>
    3744:	b	34f8 <__multf3+0x570>
    3748:	cbz	x9, 3738 <__multf3+0x7b0>
    374c:	tbnz	x4, #51, 36fc <__multf3+0x774>
    3750:	b	34f8 <__multf3+0x570>
    3754:	orr	w0, w0, #0x10
    3758:	b	36fc <__multf3+0x774>
    375c:	mov	w11, w15
    3760:	mov	w1, #0x7fff                	// #32767
    3764:	mov	x4, #0x0                   	// #0
    3768:	mov	x7, #0x0                   	// #0
    376c:	b	3084 <__multf3+0xfc>

0000000000003770 <__floatsitf>:
    3770:	cmp	w0, #0x0
    3774:	cbz	w0, 37c0 <__floatsitf+0x50>
    3778:	cneg	w1, w0, lt  // lt = tstop
    377c:	mov	w4, #0x403e                	// #16446
    3780:	clz	x3, x1
    3784:	mov	w2, #0x402f                	// #16431
    3788:	sub	w4, w4, w3
    378c:	lsr	w0, w0, #31
    3790:	sub	w2, w2, w4
    3794:	mov	x3, #0x0                   	// #0
    3798:	and	w4, w4, #0x7fff
    379c:	lsl	x1, x1, x2
    37a0:	and	x1, x1, #0xffffffffffff
    37a4:	orr	w0, w4, w0, lsl #15
    37a8:	mov	x2, #0x0                   	// #0
    37ac:	bfxil	x3, x1, #0, #48
    37b0:	fmov	d0, x2
    37b4:	bfi	x3, x0, #48, #16
    37b8:	fmov	v0.d[1], x3
    37bc:	ret
    37c0:	mov	w4, #0x0                   	// #0
    37c4:	mov	x1, #0x0                   	// #0
    37c8:	mov	w0, #0x0                   	// #0
    37cc:	mov	x3, #0x0                   	// #0
    37d0:	orr	w0, w4, w0, lsl #15
    37d4:	bfxil	x3, x1, #0, #48
    37d8:	mov	x2, #0x0                   	// #0
    37dc:	fmov	d0, x2
    37e0:	bfi	x3, x0, #48, #16
    37e4:	fmov	v0.d[1], x3
    37e8:	ret
    37ec:	nop

00000000000037f0 <__fixtfdi>:
    37f0:	stp	x29, x30, [sp, #-48]!
    37f4:	mov	x29, sp
    37f8:	str	x19, [sp, #16]
    37fc:	str	q0, [sp, #32]
    3800:	ldp	x2, x0, [sp, #32]
    3804:	mrs	x1, fpcr
    3808:	ubfx	x19, x0, #48, #15
    380c:	mov	x3, #0x3ffe                	// #16382
    3810:	ubfx	x4, x0, #0, #48
    3814:	cmp	x19, x3
    3818:	b.gt	3840 <__fixtfdi+0x50>
    381c:	cbnz	x19, 38e0 <__fixtfdi+0xf0>
    3820:	orr	x2, x4, x2
    3824:	cbz	x2, 3830 <__fixtfdi+0x40>
    3828:	mov	w0, #0x10                  	// #16
    382c:	bl	3928 <__sfp_handle_exceptions>
    3830:	mov	x0, x19
    3834:	ldr	x19, [sp, #16]
    3838:	ldp	x29, x30, [sp], #48
    383c:	ret
    3840:	lsr	x1, x0, #63
    3844:	and	w3, w1, #0xff
    3848:	mov	x1, #0x403d                	// #16445
    384c:	cmp	x19, x1
    3850:	b.le	3888 <__fixtfdi+0x98>
    3854:	mov	x0, #0x403e                	// #16446
    3858:	and	x5, x3, #0xff
    385c:	cmp	x19, x0
    3860:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
    3864:	csel	w1, w3, wzr, eq  // eq = none
    3868:	add	x19, x5, x0
    386c:	cbz	w1, 38f0 <__fixtfdi+0x100>
    3870:	extr	x4, x4, x2, #49
    3874:	cbnz	x4, 38f0 <__fixtfdi+0x100>
    3878:	cmp	xzr, x2, lsl #15
    387c:	b.eq	3830 <__fixtfdi+0x40>  // b.none
    3880:	mov	w0, #0x10                  	// #16
    3884:	b	382c <__fixtfdi+0x3c>
    3888:	mov	x5, #0x406f                	// #16495
    388c:	sub	x1, x5, x19
    3890:	mov	x0, x19
    3894:	cmp	x1, #0x3f
    3898:	orr	x19, x4, #0x1000000000000
    389c:	b.le	38fc <__fixtfdi+0x10c>
    38a0:	mov	w4, #0xffffc011            	// #-16367
    38a4:	add	w4, w0, w4
    38a8:	cmp	x1, #0x40
    38ac:	mov	w1, #0x402f                	// #16431
    38b0:	sub	w0, w1, w0
    38b4:	lsl	x1, x19, x4
    38b8:	orr	x1, x2, x1
    38bc:	csel	x2, x1, x2, ne  // ne = any
    38c0:	lsr	x19, x19, x0
    38c4:	cmp	x2, #0x0
    38c8:	cset	w0, ne  // ne = any
    38cc:	cmp	w3, #0x0
    38d0:	cneg	x19, x19, ne  // ne = any
    38d4:	cbz	w0, 3830 <__fixtfdi+0x40>
    38d8:	mov	w0, #0x10                  	// #16
    38dc:	b	382c <__fixtfdi+0x3c>
    38e0:	mov	x19, #0x0                   	// #0
    38e4:	mov	w0, #0x10                  	// #16
    38e8:	bl	3928 <__sfp_handle_exceptions>
    38ec:	b	3830 <__fixtfdi+0x40>
    38f0:	mov	w0, #0x1                   	// #1
    38f4:	bl	3928 <__sfp_handle_exceptions>
    38f8:	b	3830 <__fixtfdi+0x40>
    38fc:	mov	w6, #0xffffbfd1            	// #-16431
    3900:	add	w4, w0, w6
    3904:	sub	w0, w5, w0
    3908:	lsl	x1, x2, x4
    390c:	cmp	x1, #0x0
    3910:	lsr	x2, x2, x0
    3914:	cset	w0, ne  // ne = any
    3918:	lsl	x19, x19, x4
    391c:	orr	x19, x2, x19
    3920:	b	38cc <__fixtfdi+0xdc>
    3924:	nop

0000000000003928 <__sfp_handle_exceptions>:
    3928:	tbz	w0, #0, 3938 <__sfp_handle_exceptions+0x10>
    392c:	movi	v1.2s, #0x0
    3930:	fdiv	s0, s1, s1
    3934:	mrs	x1, fpsr
    3938:	tbz	w0, #1, 394c <__sfp_handle_exceptions+0x24>
    393c:	fmov	s1, #1.000000000000000000e+00
    3940:	movi	v2.2s, #0x0
    3944:	fdiv	s0, s1, s2
    3948:	mrs	x1, fpsr
    394c:	tbz	w0, #2, 396c <__sfp_handle_exceptions+0x44>
    3950:	mov	w2, #0xc5ae                	// #50606
    3954:	mov	w1, #0x7f7fffff            	// #2139095039
    3958:	movk	w2, #0x749d, lsl #16
    395c:	fmov	s1, w1
    3960:	fmov	s2, w2
    3964:	fadd	s0, s1, s2
    3968:	mrs	x1, fpsr
    396c:	tbz	w0, #3, 397c <__sfp_handle_exceptions+0x54>
    3970:	movi	v1.2s, #0x80, lsl #16
    3974:	fmul	s0, s1, s1
    3978:	mrs	x1, fpsr
    397c:	tbz	w0, #4, 3994 <__sfp_handle_exceptions+0x6c>
    3980:	mov	w0, #0x7f7fffff            	// #2139095039
    3984:	fmov	s2, #1.000000000000000000e+00
    3988:	fmov	s1, w0
    398c:	fsub	s0, s1, s2
    3990:	mrs	x0, fpsr
    3994:	ret

Disassembly of section .fini:

0000000000003998 <_fini>:
    3998:	stp	x29, x30, [sp, #-16]!
    399c:	mov	x29, sp
    39a0:	ldp	x29, x30, [sp], #16
    39a4:	ret
