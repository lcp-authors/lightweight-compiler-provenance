
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//test.module_gcc_-O1:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <update_val>:
       0:	ldr	w2, [x1, #8]
       4:	cbz	w2, 18 <update_val+0x18>
       8:	ldr	w2, [x1]
       c:	cbz	w2, 24 <update_val+0x24>
      10:	cmp	w0, #0x0
      14:	cset	w2, eq  // eq = none
      18:	str	w2, [x1, #8]
      1c:	str	wzr, [x1]
      20:	ret
      24:	cmp	w0, #0x0
      28:	cset	w2, ne  // ne = any
      2c:	b	18 <update_val+0x18>

0000000000000030 <find_file>:
      30:	stp	x29, x30, [sp, #-32]!
      34:	mov	x29, sp
      38:	stp	x19, x20, [sp, #16]
      3c:	mov	x20, x1
      40:	mov	x19, x2
      44:	ldrb	w1, [x1]
      48:	tbz	w1, #2, d8 <find_file+0xa8>
      4c:	ldr	x1, [x2, #32]
      50:	ldrb	w3, [x0]
      54:	cbz	w3, 98 <find_file+0x68>
      58:	ldrb	w4, [x1]
      5c:	cbz	w4, 108 <find_file+0xd8>
      60:	mov	w5, w3
      64:	sub	w6, w3, #0x41
      68:	add	w2, w3, #0x20
      6c:	cmp	w6, #0x1a
      70:	csel	w3, w2, w3, cc  // cc = lo, ul, last
      74:	sub	w7, w4, #0x41
      78:	add	w2, w4, #0x20
      7c:	cmp	w7, #0x1a
      80:	csel	w4, w2, w4, cc  // cc = lo, ul, last
      84:	cmp	w4, w3
      88:	b.ne	cc <find_file+0x9c>  // b.any
      8c:	add	x1, x1, #0x1
      90:	ldrb	w3, [x0, #1]!
      94:	cbnz	w3, 58 <find_file+0x28>
      98:	mov	w5, #0x0                   	// #0
      9c:	ldrb	w0, [x1]
      a0:	sub	w2, w0, #0x41
      a4:	add	w1, w0, #0x20
      a8:	cmp	w2, #0x1a
      ac:	csel	w0, w1, w0, cc  // cc = lo, ul, last
      b0:	cmp	w0, w5
      b4:	cset	w1, eq  // eq = none
      b8:	mov	w0, #0x0                   	// #0
      bc:	cbnz	w1, ec <find_file+0xbc>
      c0:	ldp	x19, x20, [sp, #16]
      c4:	ldp	x29, x30, [sp], #32
      c8:	ret
      cc:	cmp	w6, #0x19
      d0:	b.ls	118 <find_file+0xe8>  // b.plast
      d4:	b	9c <find_file+0x6c>
      d8:	ldr	x1, [x2, #32]
      dc:	bl	0 <grub_strcmp>
      e0:	cmp	w0, #0x0
      e4:	cset	w1, eq  // eq = none
      e8:	b	b8 <find_file+0x88>
      ec:	ldp	x0, x1, [x20]
      f0:	stp	x0, x1, [x19, #16]
      f4:	mov	w0, #0x1                   	// #1
      f8:	str	w0, [x19, #12]
      fc:	b	c0 <find_file+0x90>
     100:	ldrb	w0, [x1]
     104:	b	b0 <find_file+0x80>
     108:	mov	w5, w3
     10c:	sub	w3, w3, #0x41
     110:	cmp	w3, #0x19
     114:	b.hi	100 <find_file+0xd0>  // b.pmore
     118:	add	w5, w5, #0x20
     11c:	b	9c <find_file+0x6c>

0000000000000120 <grub_strtosl>:
     120:	stp	x29, x30, [sp, #-16]!
     124:	mov	x29, sp
     128:	ldrb	w3, [x0]
     12c:	cmp	w3, #0x2d
     130:	b.eq	140 <grub_strtosl+0x20>  // b.none
     134:	bl	0 <grub_strtoul>
     138:	ldp	x29, x30, [sp], #16
     13c:	ret
     140:	add	x0, x0, #0x1
     144:	bl	0 <grub_strtoul>
     148:	neg	w0, w0
     14c:	b	138 <grub_strtosl+0x18>

0000000000000150 <get_fileinfo>:
     150:	stp	x29, x30, [sp, #-64]!
     154:	mov	x29, sp
     158:	stp	x19, x20, [sp, #16]
     15c:	stp	x21, x22, [sp, #32]
     160:	mov	x19, x0
     164:	mov	x20, x1
     168:	str	wzr, [x1, #12]
     16c:	bl	0 <grub_file_get_device_name>
     170:	mov	x22, x0
     174:	bl	0 <grub_device_open>
     178:	cbz	x0, 260 <get_fileinfo+0x110>
     17c:	stp	x23, x24, [sp, #48]
     180:	mov	x21, x0
     184:	bl	0 <grub_fs_probe>
     188:	mov	x23, x0
     18c:	cbz	x0, 26c <get_fileinfo+0x11c>
     190:	mov	w1, #0x29                  	// #41
     194:	mov	x0, x19
     198:	bl	0 <grub_strchr>
     19c:	cmp	x0, #0x0
     1a0:	csinc	x19, x19, x0, eq  // eq = none
     1a4:	ldrb	w0, [x19]
     1a8:	cbz	w0, 1dc <get_fileinfo+0x8c>
     1ac:	mov	x0, x19
     1b0:	bl	0 <grub_strlen>
     1b4:	add	x2, x19, x0
     1b8:	ldurb	w2, [x2, #-1]
     1bc:	cmp	w2, #0x2f
     1c0:	b.ne	1dc <get_fileinfo+0x8c>  // b.any
     1c4:	mov	x0, x19
     1c8:	bl	0 <grub_strlen>
     1cc:	add	x2, x19, x0
     1d0:	sturb	wzr, [x2, #-1]
     1d4:	ldrb	w0, [x19]
     1d8:	cbnz	w0, 1ac <get_fileinfo+0x5c>
     1dc:	mov	w1, #0x2f                  	// #47
     1e0:	mov	x0, x19
     1e4:	bl	0 <grub_strrchr>
     1e8:	str	x0, [x20, #32]
     1ec:	cbz	x0, 284 <get_fileinfo+0x134>
     1f0:	add	x0, x0, #0x1
     1f4:	str	x0, [x20, #32]
     1f8:	mov	x0, x19
     1fc:	bl	0 <grub_strdup>
     200:	mov	x24, x0
     204:	ldr	x0, [x20, #32]
     208:	sub	x0, x0, x19
     20c:	strb	wzr, [x24, x0]
     210:	ldrb	w0, [x19]
     214:	cbz	w0, 29c <get_fileinfo+0x14c>
     218:	ldr	x4, [x23, #24]
     21c:	mov	x3, x20
     220:	adrp	x0, 0 <update_val>
     224:	ldr	x2, [x0]
     228:	mov	x1, x24
     22c:	mov	x0, x21
     230:	blr	x4
     234:	mov	x0, x21
     238:	bl	0 <grub_device_close>
     23c:	mov	x0, x24
     240:	bl	0 <grub_free>
     244:	mov	x0, x22
     248:	bl	0 <grub_free>
     24c:	ldp	x23, x24, [sp, #48]
     250:	ldp	x19, x20, [sp, #16]
     254:	ldp	x21, x22, [sp, #32]
     258:	ldp	x29, x30, [sp], #64
     25c:	ret
     260:	mov	x0, x22
     264:	bl	0 <grub_free>
     268:	b	250 <get_fileinfo+0x100>
     26c:	mov	x0, x22
     270:	bl	0 <grub_free>
     274:	mov	x0, x21
     278:	bl	0 <grub_device_close>
     27c:	ldp	x23, x24, [sp, #48]
     280:	b	250 <get_fileinfo+0x100>
     284:	adrp	x0, 0 <update_val>
     288:	ldr	x0, [x0]
     28c:	bl	0 <grub_strdup>
     290:	mov	x24, x0
     294:	str	x19, [x20, #32]
     298:	b	210 <get_fileinfo+0xc0>
     29c:	mov	w0, #0x1                   	// #1
     2a0:	str	w0, [x20, #12]
     2a4:	mov	x2, #0x10                  	// #16
     2a8:	mov	w1, #0x0                   	// #0
     2ac:	add	x0, x20, x2
     2b0:	bl	0 <grub_memset>
     2b4:	ldrb	w0, [x20, #16]
     2b8:	orr	w0, w0, #0x1
     2bc:	and	w0, w0, #0xfffffffd
     2c0:	strb	w0, [x20, #16]
     2c4:	ldr	x2, [x23, #72]
     2c8:	cbz	x2, 234 <get_fileinfo+0xe4>
     2cc:	add	x1, x20, #0x14
     2d0:	mov	x0, x21
     2d4:	blr	x2
     2d8:	cbnz	w0, 2e8 <get_fileinfo+0x198>
     2dc:	ldrb	w0, [x20, #16]
     2e0:	orr	w0, w0, #0x2
     2e4:	strb	w0, [x20, #16]
     2e8:	adrp	x0, 0 <update_val>
     2ec:	ldr	x0, [x0]
     2f0:	str	wzr, [x0]
     2f4:	b	234 <get_fileinfo+0xe4>
	...

0000000000000310 <test_parse>:
     310:	stp	x29, x30, [sp, #-160]!
     314:	mov	x29, sp
     318:	stp	x19, x20, [sp, #16]
     31c:	mov	x20, x0
     320:	stp	xzr, xzr, [sp, #120]
     324:	stp	xzr, xzr, [sp, #136]
     328:	str	xzr, [sp, #152]
     32c:	mov	w0, #0x1                   	// #1
     330:	str	w0, [sp, #128]
     334:	ldr	w0, [x1]
     338:	cmp	w2, w0
     33c:	b.le	e54 <test_parse+0xb44>
     340:	stp	x21, x22, [sp, #32]
     344:	stp	x23, x24, [sp, #48]
     348:	stp	x25, x26, [sp, #64]
     34c:	mov	x19, x1
     350:	mov	w21, w2
     354:	adrp	x22, 0 <update_val>
     358:	adrp	x23, 0 <update_val>
     35c:	adrp	x24, 0 <update_val>
     360:	mov	w25, #0x23                  	// #35
     364:	movk	w25, #0x2, lsl #16
     368:	b	3dc <test_parse+0xcc>
     36c:	add	x0, x20, w0, sxtw #3
     370:	adrp	x1, 0 <update_val>
     374:	ldr	x1, [x1]
     378:	ldr	x0, [x0, #8]
     37c:	bl	0 <grub_strcmp>
     380:	cbz	w0, 3a0 <test_parse+0x90>
     384:	ldrsw	x0, [x19]
     388:	add	x0, x0, #0x1
     38c:	adrp	x1, 0 <update_val>
     390:	ldr	x1, [x1]
     394:	ldr	x0, [x20, x0, lsl #3]
     398:	bl	0 <grub_strcmp>
     39c:	cbnz	w0, 4e0 <test_parse+0x1d0>
     3a0:	ldrsw	x0, [x19]
     3a4:	add	x1, x20, x0, lsl #3
     3a8:	ldr	x1, [x1, #16]
     3ac:	ldr	x0, [x20, x0, lsl #3]
     3b0:	bl	0 <grub_strcmp>
     3b4:	cmp	w0, #0x0
     3b8:	add	x1, sp, #0x78
     3bc:	cset	w0, eq  // eq = none
     3c0:	bl	0 <update_val>
     3c4:	ldr	w0, [x19]
     3c8:	add	w0, w0, #0x3
     3cc:	str	w0, [x19]
     3d0:	ldr	w0, [x19]
     3d4:	cmp	w0, w21
     3d8:	b.ge	e48 <test_parse+0xb38>  // b.tcont
     3dc:	add	w1, w0, #0x2
     3e0:	cmp	w1, w21
     3e4:	b.lt	36c <test_parse+0x5c>  // b.tstop
     3e8:	ldr	w0, [x19]
     3ec:	add	w1, w0, #0x1
     3f0:	cmp	w1, w21
     3f4:	b.ge	484 <test_parse+0x174>  // b.tcont
     3f8:	adrp	x1, 0 <update_val>
     3fc:	ldr	x1, [x1]
     400:	ldr	x0, [x20, w0, sxtw #3]
     404:	bl	0 <grub_strcmp>
     408:	cbz	w0, c04 <test_parse+0x8f4>
     40c:	ldrsw	x0, [x19]
     410:	adrp	x1, 0 <update_val>
     414:	ldr	x1, [x1]
     418:	ldr	x0, [x20, x0, lsl #3]
     41c:	bl	0 <grub_strcmp>
     420:	cbz	w0, c40 <test_parse+0x930>
     424:	ldrsw	x0, [x19]
     428:	adrp	x1, 0 <update_val>
     42c:	ldr	x1, [x1]
     430:	ldr	x0, [x20, x0, lsl #3]
     434:	bl	0 <grub_strcmp>
     438:	cbz	w0, c70 <test_parse+0x960>
     43c:	ldrsw	x0, [x19]
     440:	adrp	x1, 0 <update_val>
     444:	ldr	x1, [x1]
     448:	ldr	x0, [x20, x0, lsl #3]
     44c:	bl	0 <grub_strcmp>
     450:	cbz	w0, cb0 <test_parse+0x9a0>
     454:	ldrsw	x0, [x19]
     458:	adrp	x1, 0 <update_val>
     45c:	ldr	x1, [x1]
     460:	ldr	x0, [x20, x0, lsl #3]
     464:	bl	0 <grub_strcmp>
     468:	cbz	w0, d04 <test_parse+0x9f4>
     46c:	ldrsw	x0, [x19]
     470:	adrp	x1, 0 <update_val>
     474:	ldr	x1, [x1]
     478:	ldr	x0, [x20, x0, lsl #3]
     47c:	bl	0 <grub_strcmp>
     480:	cbz	w0, d2c <test_parse+0xa1c>
     484:	ldrsw	x0, [x19]
     488:	ldr	x1, [x22]
     48c:	ldr	x0, [x20, x0, lsl #3]
     490:	bl	0 <grub_strcmp>
     494:	cbz	w0, d5c <test_parse+0xa4c>
     498:	ldrsw	x0, [x19]
     49c:	ldr	x1, [x23]
     4a0:	ldr	x0, [x20, x0, lsl #3]
     4a4:	bl	0 <grub_strcmp>
     4a8:	cbz	w0, d8c <test_parse+0xa7c>
     4ac:	ldrsw	x0, [x19]
     4b0:	ldr	x1, [x24]
     4b4:	ldr	x0, [x20, x0, lsl #3]
     4b8:	bl	0 <grub_strcmp>
     4bc:	cbnz	w0, db4 <test_parse+0xaa4>
     4c0:	ldr	w0, [sp, #120]
     4c4:	cmp	w0, #0x0
     4c8:	cset	w0, eq  // eq = none
     4cc:	str	w0, [sp, #120]
     4d0:	ldr	w0, [x19]
     4d4:	add	w0, w0, #0x1
     4d8:	str	w0, [x19]
     4dc:	b	3d0 <test_parse+0xc0>
     4e0:	ldrsw	x0, [x19]
     4e4:	add	x0, x0, #0x1
     4e8:	adrp	x1, 0 <update_val>
     4ec:	ldr	x1, [x1]
     4f0:	ldr	x0, [x20, x0, lsl #3]
     4f4:	bl	0 <grub_strcmp>
     4f8:	cbz	w0, 728 <test_parse+0x418>
     4fc:	ldrsw	x0, [x19]
     500:	add	x0, x0, #0x1
     504:	adrp	x1, 0 <update_val>
     508:	ldr	x1, [x1]
     50c:	ldr	x0, [x20, x0, lsl #3]
     510:	bl	0 <grub_strcmp>
     514:	cbz	w0, 75c <test_parse+0x44c>
     518:	ldrsw	x0, [x19]
     51c:	add	x0, x0, #0x1
     520:	adrp	x1, 0 <update_val>
     524:	ldr	x1, [x1]
     528:	ldr	x0, [x20, x0, lsl #3]
     52c:	bl	0 <grub_strcmp>
     530:	cbz	w0, 78c <test_parse+0x47c>
     534:	ldrsw	x0, [x19]
     538:	add	x0, x0, #0x1
     53c:	adrp	x1, 0 <update_val>
     540:	ldr	x1, [x1]
     544:	ldr	x0, [x20, x0, lsl #3]
     548:	bl	0 <grub_strcmp>
     54c:	cbz	w0, 7c0 <test_parse+0x4b0>
     550:	ldrsw	x0, [x19]
     554:	add	x0, x0, #0x1
     558:	adrp	x1, 0 <update_val>
     55c:	ldr	x1, [x1]
     560:	ldr	x0, [x20, x0, lsl #3]
     564:	bl	0 <grub_strcmp>
     568:	cbz	w0, 7f4 <test_parse+0x4e4>
     56c:	ldrsw	x0, [x19]
     570:	add	x0, x0, #0x1
     574:	adrp	x1, 0 <update_val>
     578:	ldr	x1, [x1]
     57c:	ldr	x0, [x20, x0, lsl #3]
     580:	bl	0 <grub_strcmp>
     584:	cbz	w0, 828 <test_parse+0x518>
     588:	ldrsw	x0, [x19]
     58c:	add	x0, x0, #0x1
     590:	adrp	x1, 0 <update_val>
     594:	ldr	x1, [x1]
     598:	ldr	x0, [x20, x0, lsl #3]
     59c:	bl	0 <grub_strcmp>
     5a0:	cbz	w0, 878 <test_parse+0x568>
     5a4:	ldrsw	x0, [x19]
     5a8:	add	x0, x0, #0x1
     5ac:	adrp	x1, 0 <update_val>
     5b0:	ldr	x1, [x1]
     5b4:	ldr	x0, [x20, x0, lsl #3]
     5b8:	bl	0 <grub_strcmp>
     5bc:	cbz	w0, 8c8 <test_parse+0x5b8>
     5c0:	ldrsw	x0, [x19]
     5c4:	add	x0, x0, #0x1
     5c8:	adrp	x1, 0 <update_val>
     5cc:	ldr	x1, [x1]
     5d0:	ldr	x0, [x20, x0, lsl #3]
     5d4:	bl	0 <grub_strcmp>
     5d8:	cbz	w0, 918 <test_parse+0x608>
     5dc:	ldrsw	x0, [x19]
     5e0:	add	x0, x0, #0x1
     5e4:	adrp	x1, 0 <update_val>
     5e8:	ldr	x1, [x1]
     5ec:	ldr	x0, [x20, x0, lsl #3]
     5f0:	bl	0 <grub_strcmp>
     5f4:	cbz	w0, 968 <test_parse+0x658>
     5f8:	ldrsw	x0, [x19]
     5fc:	add	x0, x0, #0x1
     600:	adrp	x1, 0 <update_val>
     604:	ldr	x1, [x1]
     608:	ldr	x0, [x20, x0, lsl #3]
     60c:	bl	0 <grub_strcmp>
     610:	cbz	w0, 9b8 <test_parse+0x6a8>
     614:	ldrsw	x0, [x19]
     618:	add	x0, x0, #0x1
     61c:	adrp	x1, 0 <update_val>
     620:	ldr	x1, [x1]
     624:	ldr	x0, [x20, x0, lsl #3]
     628:	bl	0 <grub_strcmp>
     62c:	cbz	w0, a08 <test_parse+0x6f8>
     630:	ldrsw	x0, [x19]
     634:	add	x0, x0, #0x1
     638:	adrp	x1, 0 <update_val>
     63c:	ldr	x1, [x1]
     640:	ldr	x0, [x20, x0, lsl #3]
     644:	bl	0 <grub_strcmp>
     648:	cbz	w0, a08 <test_parse+0x6f8>
     64c:	ldrsw	x0, [x19]
     650:	add	x0, x0, #0x1
     654:	mov	x2, #0x3                   	// #3
     658:	adrp	x1, 0 <update_val>
     65c:	ldr	x1, [x1]
     660:	ldr	x0, [x20, x0, lsl #3]
     664:	bl	0 <grub_memcmp>
     668:	cbz	w0, 68c <test_parse+0x37c>
     66c:	ldrsw	x0, [x19]
     670:	add	x0, x0, #0x1
     674:	mov	x2, #0x3                   	// #3
     678:	adrp	x1, 0 <update_val>
     67c:	ldr	x1, [x1]
     680:	ldr	x0, [x20, x0, lsl #3]
     684:	bl	0 <grub_memcmp>
     688:	cbnz	w0, 3e8 <test_parse+0xd8>
     68c:	stp	x27, x28, [sp, #80]
     690:	ldrsw	x0, [x19]
     694:	add	x1, sp, #0x78
     698:	ldr	x0, [x20, x0, lsl #3]
     69c:	bl	150 <get_fileinfo>
     6a0:	ldr	x27, [sp, #136]
     6a4:	ldr	w26, [sp, #140]
     6a8:	ldr	w28, [sp, #132]
     6ac:	ldrsw	x0, [x19]
     6b0:	add	x0, x0, #0x2
     6b4:	add	x1, sp, #0x78
     6b8:	ldr	x0, [x20, x0, lsl #3]
     6bc:	bl	150 <get_fileinfo>
     6c0:	ldrsw	x0, [x19]
     6c4:	add	x0, x0, #0x1
     6c8:	ldr	x0, [x20, x0, lsl #3]
     6cc:	ldrb	w1, [x0, #3]
     6d0:	str	wzr, [sp, #108]
     6d4:	cbnz	w1, b7c <test_parse+0x86c>
     6d8:	ldrsw	x0, [x19]
     6dc:	add	x0, x0, #0x1
     6e0:	mov	x2, #0x3                   	// #3
     6e4:	adrp	x1, 0 <update_val>
     6e8:	ldr	x1, [x1]
     6ec:	ldr	x0, [x20, x0, lsl #3]
     6f0:	bl	0 <grub_memcmp>
     6f4:	cbnz	w0, bb4 <test_parse+0x8a4>
     6f8:	cbz	w28, 704 <test_parse+0x3f4>
     6fc:	ldr	w1, [sp, #132]
     700:	cbz	w1, b94 <test_parse+0x884>
     704:	tbz	w27, #1, b98 <test_parse+0x888>
     708:	ldrb	w1, [sp, #136]
     70c:	tbz	w1, #1, b98 <test_parse+0x888>
     710:	ldr	w0, [sp, #108]
     714:	add	w26, w26, w0
     718:	ldr	w0, [sp, #140]
     71c:	cmp	w26, w0
     720:	cset	w0, gt
     724:	b	b98 <test_parse+0x888>
     728:	ldrsw	x0, [x19]
     72c:	add	x1, x20, x0, lsl #3
     730:	ldr	x1, [x1, #16]
     734:	ldr	x0, [x20, x0, lsl #3]
     738:	bl	0 <grub_strcmp>
     73c:	cmp	w0, #0x0
     740:	add	x1, sp, #0x78
     744:	cset	w0, ne  // ne = any
     748:	bl	0 <update_val>
     74c:	ldr	w0, [x19]
     750:	add	w0, w0, #0x3
     754:	str	w0, [x19]
     758:	b	3d0 <test_parse+0xc0>
     75c:	ldrsw	x0, [x19]
     760:	add	x1, x20, x0, lsl #3
     764:	ldr	x1, [x1, #16]
     768:	ldr	x0, [x20, x0, lsl #3]
     76c:	bl	0 <grub_strcmp>
     770:	add	x1, sp, #0x78
     774:	lsr	w0, w0, #31
     778:	bl	0 <update_val>
     77c:	ldr	w0, [x19]
     780:	add	w0, w0, #0x3
     784:	str	w0, [x19]
     788:	b	3d0 <test_parse+0xc0>
     78c:	ldrsw	x0, [x19]
     790:	add	x1, x20, x0, lsl #3
     794:	ldr	x1, [x1, #16]
     798:	ldr	x0, [x20, x0, lsl #3]
     79c:	bl	0 <grub_strcmp>
     7a0:	cmp	w0, #0x0
     7a4:	add	x1, sp, #0x78
     7a8:	cset	w0, le
     7ac:	bl	0 <update_val>
     7b0:	ldr	w0, [x19]
     7b4:	add	w0, w0, #0x3
     7b8:	str	w0, [x19]
     7bc:	b	3d0 <test_parse+0xc0>
     7c0:	ldrsw	x0, [x19]
     7c4:	add	x1, x20, x0, lsl #3
     7c8:	ldr	x1, [x1, #16]
     7cc:	ldr	x0, [x20, x0, lsl #3]
     7d0:	bl	0 <grub_strcmp>
     7d4:	cmp	w0, #0x0
     7d8:	add	x1, sp, #0x78
     7dc:	cset	w0, gt
     7e0:	bl	0 <update_val>
     7e4:	ldr	w0, [x19]
     7e8:	add	w0, w0, #0x3
     7ec:	str	w0, [x19]
     7f0:	b	3d0 <test_parse+0xc0>
     7f4:	ldrsw	x0, [x19]
     7f8:	add	x1, x20, x0, lsl #3
     7fc:	ldr	x1, [x1, #16]
     800:	ldr	x0, [x20, x0, lsl #3]
     804:	bl	0 <grub_strcmp>
     808:	mvn	w0, w0
     80c:	add	x1, sp, #0x78
     810:	lsr	w0, w0, #31
     814:	bl	0 <update_val>
     818:	ldr	w0, [x19]
     81c:	add	w0, w0, #0x3
     820:	str	w0, [x19]
     824:	b	3d0 <test_parse+0xc0>
     828:	ldrsw	x0, [x19]
     82c:	mov	w2, #0x0                   	// #0
     830:	mov	x1, #0x0                   	// #0
     834:	ldr	x0, [x20, x0, lsl #3]
     838:	bl	120 <grub_strtosl>
     83c:	mov	w26, w0
     840:	ldrsw	x3, [x19]
     844:	add	x3, x3, #0x2
     848:	mov	w2, #0x0                   	// #0
     84c:	mov	x1, #0x0                   	// #0
     850:	ldr	x0, [x20, x3, lsl #3]
     854:	bl	120 <grub_strtosl>
     858:	cmp	w26, w0
     85c:	add	x1, sp, #0x78
     860:	cset	w0, eq  // eq = none
     864:	bl	0 <update_val>
     868:	ldr	w0, [x19]
     86c:	add	w0, w0, #0x3
     870:	str	w0, [x19]
     874:	b	3d0 <test_parse+0xc0>
     878:	ldrsw	x0, [x19]
     87c:	mov	w2, #0x0                   	// #0
     880:	mov	x1, #0x0                   	// #0
     884:	ldr	x0, [x20, x0, lsl #3]
     888:	bl	120 <grub_strtosl>
     88c:	mov	w26, w0
     890:	ldrsw	x0, [x19]
     894:	add	x0, x0, #0x2
     898:	mov	w2, #0x0                   	// #0
     89c:	mov	x1, #0x0                   	// #0
     8a0:	ldr	x0, [x20, x0, lsl #3]
     8a4:	bl	120 <grub_strtosl>
     8a8:	cmp	w26, w0
     8ac:	add	x1, sp, #0x78
     8b0:	cset	w0, ge  // ge = tcont
     8b4:	bl	0 <update_val>
     8b8:	ldr	w0, [x19]
     8bc:	add	w0, w0, #0x3
     8c0:	str	w0, [x19]
     8c4:	b	3d0 <test_parse+0xc0>
     8c8:	ldrsw	x0, [x19]
     8cc:	mov	w2, #0x0                   	// #0
     8d0:	mov	x1, #0x0                   	// #0
     8d4:	ldr	x0, [x20, x0, lsl #3]
     8d8:	bl	120 <grub_strtosl>
     8dc:	mov	w26, w0
     8e0:	ldrsw	x0, [x19]
     8e4:	add	x0, x0, #0x2
     8e8:	mov	w2, #0x0                   	// #0
     8ec:	mov	x1, #0x0                   	// #0
     8f0:	ldr	x0, [x20, x0, lsl #3]
     8f4:	bl	120 <grub_strtosl>
     8f8:	cmp	w26, w0
     8fc:	add	x1, sp, #0x78
     900:	cset	w0, gt
     904:	bl	0 <update_val>
     908:	ldr	w0, [x19]
     90c:	add	w0, w0, #0x3
     910:	str	w0, [x19]
     914:	b	3d0 <test_parse+0xc0>
     918:	ldrsw	x0, [x19]
     91c:	mov	w2, #0x0                   	// #0
     920:	mov	x1, #0x0                   	// #0
     924:	ldr	x0, [x20, x0, lsl #3]
     928:	bl	120 <grub_strtosl>
     92c:	mov	w26, w0
     930:	ldrsw	x0, [x19]
     934:	add	x0, x0, #0x2
     938:	mov	w2, #0x0                   	// #0
     93c:	mov	x1, #0x0                   	// #0
     940:	ldr	x0, [x20, x0, lsl #3]
     944:	bl	120 <grub_strtosl>
     948:	cmp	w26, w0
     94c:	add	x1, sp, #0x78
     950:	cset	w0, le
     954:	bl	0 <update_val>
     958:	ldr	w0, [x19]
     95c:	add	w0, w0, #0x3
     960:	str	w0, [x19]
     964:	b	3d0 <test_parse+0xc0>
     968:	ldrsw	x0, [x19]
     96c:	mov	w2, #0x0                   	// #0
     970:	mov	x1, #0x0                   	// #0
     974:	ldr	x0, [x20, x0, lsl #3]
     978:	bl	120 <grub_strtosl>
     97c:	mov	w26, w0
     980:	ldrsw	x0, [x19]
     984:	add	x0, x0, #0x2
     988:	mov	w2, #0x0                   	// #0
     98c:	mov	x1, #0x0                   	// #0
     990:	ldr	x0, [x20, x0, lsl #3]
     994:	bl	120 <grub_strtosl>
     998:	cmp	w26, w0
     99c:	add	x1, sp, #0x78
     9a0:	cset	w0, lt  // lt = tstop
     9a4:	bl	0 <update_val>
     9a8:	ldr	w0, [x19]
     9ac:	add	w0, w0, #0x3
     9b0:	str	w0, [x19]
     9b4:	b	3d0 <test_parse+0xc0>
     9b8:	ldrsw	x0, [x19]
     9bc:	mov	w2, #0x0                   	// #0
     9c0:	mov	x1, #0x0                   	// #0
     9c4:	ldr	x0, [x20, x0, lsl #3]
     9c8:	bl	120 <grub_strtosl>
     9cc:	mov	w26, w0
     9d0:	ldrsw	x0, [x19]
     9d4:	add	x0, x0, #0x2
     9d8:	mov	w2, #0x0                   	// #0
     9dc:	mov	x1, #0x0                   	// #0
     9e0:	ldr	x0, [x20, x0, lsl #3]
     9e4:	bl	120 <grub_strtosl>
     9e8:	cmp	w26, w0
     9ec:	add	x1, sp, #0x78
     9f0:	cset	w0, ne  // ne = any
     9f4:	bl	0 <update_val>
     9f8:	ldr	w0, [x19]
     9fc:	add	w0, w0, #0x3
     a00:	str	w0, [x19]
     a04:	b	3d0 <test_parse+0xc0>
     a08:	stp	x27, x28, [sp, #80]
     a0c:	ldrsw	x0, [x19]
     a10:	lsl	x6, x0, #3
     a14:	ldr	x4, [x20, x0, lsl #3]
     a18:	ldrb	w0, [x4]
     a1c:	add	x1, x20, x6
     a20:	ldr	x5, [x1, #16]
     a24:	ldrb	w1, [x5]
     a28:	cmp	w0, #0x0
     a2c:	ccmp	w1, w0, #0x0, ne  // ne = any
     a30:	b.ne	b24 <test_parse+0x814>  // b.any
     a34:	mov	x0, #0x0                   	// #0
     a38:	add	x7, x4, #0x1
     a3c:	add	x5, x5, #0x1
     a40:	mov	w2, w0
     a44:	ldrb	w3, [x7, x0]
     a48:	ldrb	w1, [x5, x0]
     a4c:	cmp	w1, w3
     a50:	cset	w1, eq  // eq = none
     a54:	cmp	w3, #0x0
     a58:	csel	w1, w1, wzr, ne  // ne = any
     a5c:	add	x0, x0, #0x1
     a60:	cbnz	w1, a40 <test_parse+0x730>
     a64:	ldrb	w0, [x4, w2, sxtw]
     a68:	sub	w0, w0, #0x30
     a6c:	cmp	w2, #0x0
     a70:	ccmp	w0, #0x9, #0x2, gt
     a74:	b.hi	aa8 <test_parse+0x798>  // b.pmore
     a78:	sub	w0, w2, #0x1
     a7c:	sxtw	x0, w0
     a80:	mov	w2, w0
     a84:	ldrb	w1, [x4, x0]
     a88:	sub	w1, w1, #0x30
     a8c:	cmp	w1, #0x9
     a90:	cset	w3, ls  // ls = plast
     a94:	cmp	w0, #0x0
     a98:	cset	w1, gt
     a9c:	sub	x0, x0, #0x1
     aa0:	tst	w3, w1
     aa4:	b.ne	a80 <test_parse+0x770>  // b.any
     aa8:	add	w26, w2, #0x1
     aac:	add	x6, x20, x6
     ab0:	adrp	x0, 0 <update_val>
     ab4:	ldr	x1, [x0]
     ab8:	ldr	x0, [x6, #8]
     abc:	bl	0 <grub_strcmp>
     ac0:	cbnz	w0, b2c <test_parse+0x81c>
     ac4:	sxtw	x26, w26
     ac8:	ldrsw	x0, [x19]
     acc:	ldr	x0, [x20, x0, lsl #3]
     ad0:	mov	w2, #0x0                   	// #0
     ad4:	mov	x1, #0x0                   	// #0
     ad8:	add	x0, x0, x26
     adc:	bl	0 <grub_strtoul>
     ae0:	mov	x27, x0
     ae4:	ldrsw	x0, [x19]
     ae8:	add	x0, x0, #0x2
     aec:	ldr	x0, [x20, x0, lsl #3]
     af0:	mov	w2, #0x0                   	// #0
     af4:	mov	x1, #0x0                   	// #0
     af8:	add	x0, x0, x26
     afc:	bl	0 <grub_strtoul>
     b00:	cmp	x27, x0
     b04:	add	x1, sp, #0x78
     b08:	cset	w0, hi  // hi = pmore
     b0c:	bl	0 <update_val>
     b10:	ldr	w0, [x19]
     b14:	add	w0, w0, #0x3
     b18:	str	w0, [x19]
     b1c:	ldp	x27, x28, [sp, #80]
     b20:	b	3d0 <test_parse+0xc0>
     b24:	mov	w2, #0xffffffff            	// #-1
     b28:	b	aa8 <test_parse+0x798>
     b2c:	sxtw	x26, w26
     b30:	ldrsw	x0, [x19]
     b34:	ldr	x0, [x20, x0, lsl #3]
     b38:	mov	w2, #0x0                   	// #0
     b3c:	mov	x1, #0x0                   	// #0
     b40:	add	x0, x0, x26
     b44:	bl	0 <grub_strtoul>
     b48:	mov	x27, x0
     b4c:	ldrsw	x0, [x19]
     b50:	add	x0, x0, #0x2
     b54:	ldr	x0, [x20, x0, lsl #3]
     b58:	mov	w2, #0x0                   	// #0
     b5c:	mov	x1, #0x0                   	// #0
     b60:	add	x0, x0, x26
     b64:	bl	0 <grub_strtoul>
     b68:	cmp	x27, x0
     b6c:	add	x1, sp, #0x78
     b70:	cset	w0, cc  // cc = lo, ul, last
     b74:	bl	0 <update_val>
     b78:	b	b10 <test_parse+0x800>
     b7c:	mov	w2, #0x0                   	// #0
     b80:	mov	x1, #0x0                   	// #0
     b84:	add	x0, x0, #0x3
     b88:	bl	120 <grub_strtosl>
     b8c:	str	w0, [sp, #108]
     b90:	b	6d8 <test_parse+0x3c8>
     b94:	mov	w0, #0x1                   	// #1
     b98:	add	x1, sp, #0x78
     b9c:	bl	0 <update_val>
     ba0:	ldr	w0, [x19]
     ba4:	add	w0, w0, #0x3
     ba8:	str	w0, [x19]
     bac:	ldp	x27, x28, [sp, #80]
     bb0:	b	3d0 <test_parse+0xc0>
     bb4:	cbnz	w28, bc0 <test_parse+0x8b0>
     bb8:	ldr	w0, [sp, #132]
     bbc:	cbnz	w0, be4 <test_parse+0x8d4>
     bc0:	tbz	w27, #1, bec <test_parse+0x8dc>
     bc4:	ldrb	w0, [sp, #136]
     bc8:	tbz	w0, #1, bfc <test_parse+0x8ec>
     bcc:	ldr	w0, [sp, #108]
     bd0:	add	w26, w26, w0
     bd4:	ldr	w0, [sp, #140]
     bd8:	cmp	w26, w0
     bdc:	cset	w0, lt  // lt = tstop
     be0:	b	bf0 <test_parse+0x8e0>
     be4:	mov	w0, #0x1                   	// #1
     be8:	b	bf0 <test_parse+0x8e0>
     bec:	mov	w0, #0x0                   	// #0
     bf0:	add	x1, sp, #0x78
     bf4:	bl	0 <update_val>
     bf8:	b	ba0 <test_parse+0x890>
     bfc:	mov	w0, #0x0                   	// #0
     c00:	b	bf0 <test_parse+0x8e0>
     c04:	ldrsw	x0, [x19]
     c08:	add	x0, x0, #0x1
     c0c:	add	x1, sp, #0x78
     c10:	ldr	x0, [x20, x0, lsl #3]
     c14:	bl	150 <get_fileinfo>
     c18:	ldr	w0, [sp, #132]
     c1c:	cbz	w0, c28 <test_parse+0x918>
     c20:	ldrb	w0, [sp, #136]
     c24:	and	w0, w0, #0x1
     c28:	add	x1, sp, #0x78
     c2c:	bl	0 <update_val>
     c30:	ldr	w0, [x19]
     c34:	add	w0, w0, #0x2
     c38:	str	w0, [x19]
     c3c:	b	3d0 <test_parse+0xc0>
     c40:	ldrsw	x0, [x19]
     c44:	add	x0, x0, #0x1
     c48:	add	x1, sp, #0x78
     c4c:	ldr	x0, [x20, x0, lsl #3]
     c50:	bl	150 <get_fileinfo>
     c54:	add	x1, sp, #0x78
     c58:	ldr	w0, [sp, #132]
     c5c:	bl	0 <update_val>
     c60:	ldr	w0, [x19]
     c64:	add	w0, w0, #0x2
     c68:	str	w0, [x19]
     c6c:	b	3d0 <test_parse+0xc0>
     c70:	ldrsw	x0, [x19]
     c74:	add	x0, x0, #0x1
     c78:	add	x1, sp, #0x78
     c7c:	ldr	x0, [x20, x0, lsl #3]
     c80:	bl	150 <get_fileinfo>
     c84:	ldr	w0, [sp, #132]
     c88:	cbz	w0, c98 <test_parse+0x988>
     c8c:	ldrb	w0, [sp, #136]
     c90:	mvn	w0, w0
     c94:	and	w0, w0, #0x1
     c98:	add	x1, sp, #0x78
     c9c:	bl	0 <update_val>
     ca0:	ldr	w0, [x19]
     ca4:	add	w0, w0, #0x2
     ca8:	str	w0, [x19]
     cac:	b	3d0 <test_parse+0xc0>
     cb0:	ldrsw	x0, [x19]
     cb4:	add	x0, x0, #0x1
     cb8:	mov	w1, w25
     cbc:	ldr	x0, [x20, x0, lsl #3]
     cc0:	bl	0 <grub_file_open>
     cc4:	mov	x26, x0
     cc8:	cbz	x0, e74 <test_parse+0xb64>
     ccc:	ldr	x0, [x0, #64]
     cd0:	cmp	x0, #0x0
     cd4:	add	x1, sp, #0x78
     cd8:	cset	w0, ne  // ne = any
     cdc:	bl	0 <update_val>
     ce0:	mov	x0, x26
     ce4:	bl	0 <grub_file_close>
     ce8:	adrp	x0, 0 <update_val>
     cec:	ldr	x0, [x0]
     cf0:	str	wzr, [x0]
     cf4:	ldr	w0, [x19]
     cf8:	add	w0, w0, #0x2
     cfc:	str	w0, [x19]
     d00:	b	3d0 <test_parse+0xc0>
     d04:	ldrsw	x0, [x19]
     d08:	add	x0, x0, #0x1
     d0c:	ldr	x0, [x20, x0, lsl #3]
     d10:	add	x1, sp, #0x78
     d14:	ldrb	w0, [x0]
     d18:	bl	0 <update_val>
     d1c:	ldr	w0, [x19]
     d20:	add	w0, w0, #0x2
     d24:	str	w0, [x19]
     d28:	b	3d0 <test_parse+0xc0>
     d2c:	ldrsw	x0, [x19]
     d30:	add	x0, x0, #0x1
     d34:	ldr	x0, [x20, x0, lsl #3]
     d38:	ldrb	w0, [x0]
     d3c:	cmp	w0, #0x0
     d40:	add	x1, sp, #0x78
     d44:	cset	w0, eq  // eq = none
     d48:	bl	0 <update_val>
     d4c:	ldr	w0, [x19]
     d50:	add	w0, w0, #0x2
     d54:	str	w0, [x19]
     d58:	b	3d0 <test_parse+0xc0>
     d5c:	ldr	w0, [x19]
     d60:	add	w0, w0, #0x1
     d64:	str	w0, [x19]
     d68:	ldr	w0, [sp, #124]
     d6c:	ldr	w1, [sp, #128]
     d70:	orr	w0, w0, w1
     d74:	cmp	w0, #0x0
     d78:	cset	w0, ne  // ne = any
     d7c:	ldp	x21, x22, [sp, #32]
     d80:	ldp	x23, x24, [sp, #48]
     d84:	ldp	x25, x26, [sp, #64]
     d88:	b	e68 <test_parse+0xb58>
     d8c:	ldr	w0, [x19]
     d90:	add	w0, w0, #0x1
     d94:	str	w0, [x19]
     d98:	mov	w2, w21
     d9c:	mov	x1, x19
     da0:	mov	x0, x20
     da4:	bl	310 <test_parse>
     da8:	add	x1, sp, #0x78
     dac:	bl	0 <update_val>
     db0:	b	3d0 <test_parse+0xc0>
     db4:	ldrsw	x0, [x19]
     db8:	adrp	x1, 0 <update_val>
     dbc:	ldr	x1, [x1]
     dc0:	ldr	x0, [x20, x0, lsl #3]
     dc4:	bl	0 <grub_strcmp>
     dc8:	cbnz	w0, ddc <test_parse+0xacc>
     dcc:	ldr	w0, [x19]
     dd0:	add	w0, w0, #0x1
     dd4:	str	w0, [x19]
     dd8:	b	3d0 <test_parse+0xc0>
     ddc:	ldrsw	x0, [x19]
     de0:	adrp	x1, 0 <update_val>
     de4:	ldr	x1, [x1]
     de8:	ldr	x0, [x20, x0, lsl #3]
     dec:	bl	0 <grub_strcmp>
     df0:	cbnz	w0, e24 <test_parse+0xb14>
     df4:	ldr	w0, [sp, #124]
     df8:	ldr	w1, [sp, #128]
     dfc:	orr	w0, w0, w1
     e00:	cmp	w0, #0x0
     e04:	cset	w0, ne  // ne = any
     e08:	str	w0, [sp, #124]
     e0c:	mov	w0, #0x1                   	// #1
     e10:	str	w0, [sp, #128]
     e14:	ldr	w0, [x19]
     e18:	add	w0, w0, #0x1
     e1c:	str	w0, [x19]
     e20:	b	3d0 <test_parse+0xc0>
     e24:	ldrsw	x0, [x19]
     e28:	ldr	x0, [x20, x0, lsl #3]
     e2c:	add	x1, sp, #0x78
     e30:	ldrb	w0, [x0]
     e34:	bl	0 <update_val>
     e38:	ldr	w0, [x19]
     e3c:	add	w0, w0, #0x1
     e40:	str	w0, [x19]
     e44:	b	3d0 <test_parse+0xc0>
     e48:	ldp	x21, x22, [sp, #32]
     e4c:	ldp	x23, x24, [sp, #48]
     e50:	ldp	x25, x26, [sp, #64]
     e54:	ldr	w0, [sp, #124]
     e58:	ldr	w1, [sp, #128]
     e5c:	orr	w0, w0, w1
     e60:	cmp	w0, #0x0
     e64:	cset	w0, ne  // ne = any
     e68:	ldp	x19, x20, [sp, #16]
     e6c:	ldp	x29, x30, [sp], #160
     e70:	ret
     e74:	add	x1, sp, #0x78
     e78:	mov	w0, #0x0                   	// #0
     e7c:	bl	0 <update_val>
     e80:	b	ce8 <test_parse+0x9d8>
     e84:	nop
	...

0000000000000f70 <grub_cmd_test>:
     f70:	stp	x29, x30, [sp, #-48]!
     f74:	mov	x29, sp
     f78:	stp	x19, x20, [sp, #16]
     f7c:	mov	w19, w1
     f80:	mov	x20, x2
     f84:	str	wzr, [sp, #44]
     f88:	cmp	w1, #0x0
     f8c:	b.gt	fb8 <grub_cmd_test+0x48>
     f90:	mov	w2, w19
     f94:	add	x1, sp, #0x2c
     f98:	mov	x0, x20
     f9c:	bl	310 <test_parse>
     fa0:	mov	w1, w0
     fa4:	mov	w0, #0x0                   	// #0
     fa8:	cbz	w1, fdc <grub_cmd_test+0x6c>
     fac:	ldp	x19, x20, [sp, #16]
     fb0:	ldp	x29, x30, [sp], #48
     fb4:	ret
     fb8:	add	x0, x2, w1, sxtw #3
     fbc:	adrp	x1, 0 <update_val>
     fc0:	ldr	x1, [x1]
     fc4:	ldur	x0, [x0, #-8]
     fc8:	bl	0 <grub_strcmp>
     fcc:	cmp	w0, #0x0
     fd0:	cset	w0, eq  // eq = none
     fd4:	sub	w19, w19, w0
     fd8:	b	f90 <grub_cmd_test+0x20>
     fdc:	adrp	x0, 0 <update_val>
     fe0:	ldr	x1, [x0]
     fe4:	mov	w0, #0x1                   	// #1
     fe8:	bl	0 <grub_error>
     fec:	b	fac <grub_cmd_test+0x3c>
	...

0000000000001000 <grub_mod_init>:
    1000:	stp	x29, x30, [sp, #-48]!
    1004:	mov	x29, sp
    1008:	stp	x19, x20, [sp, #16]
    100c:	str	x21, [sp, #32]
    1010:	adrp	x0, 0 <update_val>
    1014:	ldr	x21, [x0]
    1018:	adrp	x0, 0 <update_val>
    101c:	ldr	x20, [x0]
    1020:	mov	w4, #0x0                   	// #0
    1024:	mov	x3, x21
    1028:	adrp	x0, 0 <update_val>
    102c:	ldr	x2, [x0]
    1030:	mov	x1, x20
    1034:	adrp	x0, 0 <update_val>
    1038:	ldr	x0, [x0]
    103c:	bl	0 <grub_register_command_prio>
    1040:	adrp	x1, 0 <update_val>
    1044:	ldr	x19, [x1]
    1048:	str	x0, [x19]
    104c:	ldr	w1, [x0, #40]
    1050:	orr	w1, w1, #0x200
    1054:	str	w1, [x0, #40]
    1058:	mov	w4, #0x0                   	// #0
    105c:	mov	x3, x21
    1060:	adrp	x0, 0 <update_val>
    1064:	ldr	x2, [x0]
    1068:	mov	x1, x20
    106c:	adrp	x0, 0 <update_val>
    1070:	ldr	x0, [x0]
    1074:	bl	0 <grub_register_command_prio>
    1078:	str	x0, [x19, #8]
    107c:	ldr	w1, [x0, #40]
    1080:	orr	w1, w1, #0x200
    1084:	str	w1, [x0, #40]
    1088:	ldp	x19, x20, [sp, #16]
    108c:	ldr	x21, [sp, #32]
    1090:	ldp	x29, x30, [sp], #48
    1094:	ret
	...

00000000000010d0 <grub_mod_fini>:
    10d0:	stp	x29, x30, [sp, #-32]!
    10d4:	mov	x29, sp
    10d8:	str	x19, [sp, #16]
    10dc:	adrp	x0, 0 <update_val>
    10e0:	ldr	x19, [x0]
    10e4:	ldr	x0, [x19]
    10e8:	bl	0 <grub_unregister_command>
    10ec:	ldr	x0, [x19, #8]
    10f0:	bl	0 <grub_unregister_command>
    10f4:	ldr	x19, [sp, #16]
    10f8:	ldp	x29, x30, [sp], #32
    10fc:	ret
	...
