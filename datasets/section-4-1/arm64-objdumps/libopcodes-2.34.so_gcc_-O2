
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libopcodes-2.34.so_gcc_-O2:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000034fe8 <.init>:
   34fe8:	stp	x29, x30, [sp, #-16]!
   34fec:	mov	x29, sp
   34ff0:	bl	35bc0 <aarch64_get_operand_modifier_from_value@plt+0x10>
   34ff4:	ldp	x29, x30, [sp], #16
   34ff8:	ret

Disassembly of section .plt:

0000000000035000 <aarch64_ext_sysins_op@plt-0x20>:
   35000:	stp	x16, x30, [sp, #-16]!
   35004:	adrp	x16, a2000 <aarch64_operands@@Base+0x16bc0>
   35008:	ldr	x17, [x16, #4088]
   3500c:	add	x16, x16, #0xff8
   35010:	br	x17
   35014:	nop
   35018:	nop
   3501c:	nop

0000000000035020 <aarch64_ext_sysins_op@plt>:
   35020:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35024:	ldr	x17, [x16]
   35028:	add	x16, x16, #0x0
   3502c:	br	x17

0000000000035030 <aarch64_ins_sve_float_zero_one@plt>:
   35030:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35034:	ldr	x17, [x16, #8]
   35038:	add	x16, x16, #0x8
   3503c:	br	x17

0000000000035040 <aarch64_ins_simd_addr_post@plt>:
   35040:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35044:	ldr	x17, [x16, #16]
   35048:	add	x16, x16, #0x10
   3504c:	br	x17

0000000000035050 <memcpy@plt>:
   35050:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35054:	ldr	x17, [x16, #24]
   35058:	add	x16, x16, #0x18
   3505c:	br	x17

0000000000035060 <memmove@plt>:
   35060:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35064:	ldr	x17, [x16, #32]
   35068:	add	x16, x16, #0x20
   3506c:	br	x17

0000000000035070 <aarch64_ins_sve_quad_index@plt>:
   35070:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35074:	ldr	x17, [x16, #40]
   35078:	add	x16, x16, #0x28
   3507c:	br	x17

0000000000035080 <aarch64_ins_cond@plt>:
   35080:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35084:	ldr	x17, [x16, #48]
   35088:	add	x16, x16, #0x30
   3508c:	br	x17

0000000000035090 <aarch64_ext_sve_addr_zi_u5@plt>:
   35090:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35094:	ldr	x17, [x16, #56]
   35098:	add	x16, x16, #0x38
   3509c:	br	x17

00000000000350a0 <strlen@plt>:
   350a0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   350a4:	ldr	x17, [x16, #64]
   350a8:	add	x16, x16, #0x40
   350ac:	br	x17

00000000000350b0 <aarch64_ins_sve_addr_rz_xtw@plt>:
   350b0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   350b4:	ldr	x17, [x16, #72]
   350b8:	add	x16, x16, #0x48
   350bc:	br	x17

00000000000350c0 <aarch64_ext_sysreg@plt>:
   350c0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   350c4:	ldr	x17, [x16, #80]
   350c8:	add	x16, x16, #0x50
   350cc:	br	x17

00000000000350d0 <aarch64_ins_sve_reglist@plt>:
   350d0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   350d4:	ldr	x17, [x16, #88]
   350d8:	add	x16, x16, #0x58
   350dc:	br	x17

00000000000350e0 <aarch64_ins_imm_rotate1@plt>:
   350e0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   350e4:	ldr	x17, [x16, #96]
   350e8:	add	x16, x16, #0x60
   350ec:	br	x17

00000000000350f0 <exit@plt>:
   350f0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   350f4:	ldr	x17, [x16, #104]
   350f8:	add	x16, x16, #0x68
   350fc:	br	x17

0000000000035100 <aarch64_operand_index@plt>:
   35100:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35104:	ldr	x17, [x16, #112]
   35108:	add	x16, x16, #0x70
   3510c:	br	x17

0000000000035110 <aarch64_ext_regrt_sysins@plt>:
   35110:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35114:	ldr	x17, [x16, #120]
   35118:	add	x16, x16, #0x78
   3511c:	br	x17

0000000000035120 <aarch64_ext_fbits@plt>:
   35120:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35124:	ldr	x17, [x16, #128]
   35128:	add	x16, x16, #0x80
   3512c:	br	x17

0000000000035130 <aarch64_ins_sve_addr_rr_lsl@plt>:
   35130:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35134:	ldr	x17, [x16, #136]
   35138:	add	x16, x16, #0x88
   3513c:	br	x17

0000000000035140 <aarch64_ins_sve_scale@plt>:
   35140:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35144:	ldr	x17, [x16, #144]
   35148:	add	x16, x16, #0x90
   3514c:	br	x17

0000000000035150 <aarch64_ext_ldst_reglist_r@plt>:
   35150:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35154:	ldr	x17, [x16, #152]
   35158:	add	x16, x16, #0x98
   3515c:	br	x17

0000000000035160 <sbrk@plt>:
   35160:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35164:	ldr	x17, [x16, #160]
   35168:	add	x16, x16, #0xa0
   3516c:	br	x17

0000000000035170 <aarch64_num_of_operands@plt>:
   35170:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35174:	ldr	x17, [x16, #168]
   35178:	add	x16, x16, #0xa8
   3517c:	br	x17

0000000000035180 <aarch64_ext_sve_shrimm@plt>:
   35180:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35184:	ldr	x17, [x16, #176]
   35188:	add	x16, x16, #0xb0
   3518c:	br	x17

0000000000035190 <aarch64_ext_sve_shlimm@plt>:
   35190:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35194:	ldr	x17, [x16, #184]
   35198:	add	x16, x16, #0xb8
   3519c:	br	x17

00000000000351a0 <aarch64_ext_addr_uimm12@plt>:
   351a0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   351a4:	ldr	x17, [x16, #192]
   351a8:	add	x16, x16, #0xc0
   351ac:	br	x17

00000000000351b0 <aarch64_ins_addr_simm10@plt>:
   351b0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   351b4:	ldr	x17, [x16, #200]
   351b8:	add	x16, x16, #0xc8
   351bc:	br	x17

00000000000351c0 <aarch64_ext_aimm@plt>:
   351c0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   351c4:	ldr	x17, [x16, #208]
   351c8:	add	x16, x16, #0xd0
   351cc:	br	x17

00000000000351d0 <ldexp@plt>:
   351d0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   351d4:	ldr	x17, [x16, #216]
   351d8:	add	x16, x16, #0xd8
   351dc:	br	x17

00000000000351e0 <aarch64_ext_sve_asimm@plt>:
   351e0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   351e4:	ldr	x17, [x16, #224]
   351e8:	add	x16, x16, #0xe0
   351ec:	br	x17

00000000000351f0 <aarch64_ins_sve_addr_ri_s4xvl@plt>:
   351f0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   351f4:	ldr	x17, [x16, #232]
   351f8:	add	x16, x16, #0xe8
   351fc:	br	x17

0000000000035200 <aarch64_ins_regno@plt>:
   35200:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35204:	ldr	x17, [x16, #240]
   35208:	add	x16, x16, #0xf0
   3520c:	br	x17

0000000000035210 <__cxa_finalize@plt>:
   35210:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35214:	ldr	x17, [x16, #248]
   35218:	add	x16, x16, #0xf8
   3521c:	br	x17

0000000000035220 <aarch64_ins_aimm@plt>:
   35220:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35224:	ldr	x17, [x16, #256]
   35228:	add	x16, x16, #0x100
   3522c:	br	x17

0000000000035230 <sprintf@plt>:
   35230:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35234:	ldr	x17, [x16, #264]
   35238:	add	x16, x16, #0x108
   3523c:	br	x17

0000000000035240 <aarch64_ins_pstatefield@plt>:
   35240:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35244:	ldr	x17, [x16, #272]
   35248:	add	x16, x16, #0x110
   3524c:	br	x17

0000000000035250 <verify_constraints@plt>:
   35250:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35254:	ldr	x17, [x16, #280]
   35258:	add	x16, x16, #0x118
   3525c:	br	x17

0000000000035260 <aarch64_ext_sve_addr_ri_s9xvl@plt>:
   35260:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35264:	ldr	x17, [x16, #288]
   35268:	add	x16, x16, #0x120
   3526c:	br	x17

0000000000035270 <qsort@plt>:
   35270:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35274:	ldr	x17, [x16, #296]
   35278:	add	x16, x16, #0x128
   3527c:	br	x17

0000000000035280 <aarch64_ext_sve_addr_zz_sxtw@plt>:
   35280:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35284:	ldr	x17, [x16, #304]
   35288:	add	x16, x16, #0x130
   3528c:	br	x17

0000000000035290 <aarch64_ins_sve_addr_zz_lsl@plt>:
   35290:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35294:	ldr	x17, [x16, #312]
   35298:	add	x16, x16, #0x138
   3529c:	br	x17

00000000000352a0 <aarch64_ext_addr_simm@plt>:
   352a0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   352a4:	ldr	x17, [x16, #320]
   352a8:	add	x16, x16, #0x140
   352ac:	br	x17

00000000000352b0 <aarch64_ext_reglane@plt>:
   352b0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   352b4:	ldr	x17, [x16, #328]
   352b8:	add	x16, x16, #0x148
   352bc:	br	x17

00000000000352c0 <aarch64_ins_sve_addr_ri_u6@plt>:
   352c0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   352c4:	ldr	x17, [x16, #336]
   352c8:	add	x16, x16, #0x150
   352cc:	br	x17

00000000000352d0 <aarch64_ins_sve_index@plt>:
   352d0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   352d4:	ldr	x17, [x16, #344]
   352d8:	add	x16, x16, #0x158
   352dc:	br	x17

00000000000352e0 <aarch64_decode_insn@plt>:
   352e0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   352e4:	ldr	x17, [x16, #352]
   352e8:	add	x16, x16, #0x160
   352ec:	br	x17

00000000000352f0 <aarch64_find_real_opcode@plt>:
   352f0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   352f4:	ldr	x17, [x16, #360]
   352f8:	add	x16, x16, #0x168
   352fc:	br	x17

0000000000035300 <aarch64_ins_addr_simm@plt>:
   35300:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35304:	ldr	x17, [x16, #368]
   35308:	add	x16, x16, #0x170
   3530c:	br	x17

0000000000035310 <get_cond_from_value@plt>:
   35310:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35314:	ldr	x17, [x16, #376]
   35318:	add	x16, x16, #0x178
   3531c:	br	x17

0000000000035320 <aarch64_ext_addr_simm10@plt>:
   35320:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35324:	ldr	x17, [x16, #384]
   35328:	add	x16, x16, #0x180
   3532c:	br	x17

0000000000035330 <aarch64_ins_sysins_op@plt>:
   35330:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35334:	ldr	x17, [x16, #392]
   35338:	add	x16, x16, #0x188
   3533c:	br	x17

0000000000035340 <aarch64_ins_ft@plt>:
   35340:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35344:	ldr	x17, [x16, #400]
   35348:	add	x16, x16, #0x190
   3534c:	br	x17

0000000000035350 <aarch64_ext_addr_offset@plt>:
   35350:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35354:	ldr	x17, [x16, #408]
   35358:	add	x16, x16, #0x198
   3535c:	br	x17

0000000000035360 <aarch64_find_best_match@plt>:
   35360:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35364:	ldr	x17, [x16, #416]
   35368:	add	x16, x16, #0x1a0
   3536c:	br	x17

0000000000035370 <aarch64_ext_fpimm@plt>:
   35370:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35374:	ldr	x17, [x16, #424]
   35378:	add	x16, x16, #0x1a8
   3537c:	br	x17

0000000000035380 <snprintf@plt>:
   35380:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35384:	ldr	x17, [x16, #432]
   35388:	add	x16, x16, #0x1b0
   3538c:	br	x17

0000000000035390 <extract_fields@plt>:
   35390:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35394:	ldr	x17, [x16, #440]
   35398:	add	x16, x16, #0x1b8
   3539c:	br	x17

00000000000353a0 <aarch64_ins_limm@plt>:
   353a0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   353a4:	ldr	x17, [x16, #448]
   353a8:	add	x16, x16, #0x1c0
   353ac:	br	x17

00000000000353b0 <aarch64_print_operand@plt>:
   353b0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   353b4:	ldr	x17, [x16, #456]
   353b8:	add	x16, x16, #0x1c8
   353bc:	br	x17

00000000000353c0 <aarch64_ext_reg_extended@plt>:
   353c0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   353c4:	ldr	x17, [x16, #464]
   353c8:	add	x16, x16, #0x1d0
   353cc:	br	x17

00000000000353d0 <aarch64_get_qualifier_standard_value@plt>:
   353d0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   353d4:	ldr	x17, [x16, #472]
   353d8:	add	x16, x16, #0x1d8
   353dc:	br	x17

00000000000353e0 <malloc@plt>:
   353e0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   353e4:	ldr	x17, [x16, #480]
   353e8:	add	x16, x16, #0x1e0
   353ec:	br	x17

00000000000353f0 <aarch64_get_qualifier_name@plt>:
   353f0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   353f4:	ldr	x17, [x16, #488]
   353f8:	add	x16, x16, #0x1e8
   353fc:	br	x17

0000000000035400 <aarch64_logical_immediate_p@plt>:
   35400:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35404:	ldr	x17, [x16, #496]
   35408:	add	x16, x16, #0x1f0
   3540c:	br	x17

0000000000035410 <aarch64_replace_opcode@plt>:
   35410:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35414:	ldr	x17, [x16, #504]
   35418:	add	x16, x16, #0x1f8
   3541c:	br	x17

0000000000035420 <aarch64_ext_limm@plt>:
   35420:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35424:	ldr	x17, [x16, #512]
   35428:	add	x16, x16, #0x200
   3542c:	br	x17

0000000000035430 <aarch64_get_operand_modifier_value@plt>:
   35430:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35434:	ldr	x17, [x16, #520]
   35438:	add	x16, x16, #0x208
   3543c:	br	x17

0000000000035440 <strncmp@plt>:
   35440:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35444:	ldr	x17, [x16, #528]
   35448:	add	x16, x16, #0x210
   3544c:	br	x17

0000000000035450 <aarch64_ins_reg_shifted@plt>:
   35450:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35454:	ldr	x17, [x16, #536]
   35458:	add	x16, x16, #0x218
   3545c:	br	x17

0000000000035460 <aarch64_ext_sve_addr_ri_s4xvl@plt>:
   35460:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35464:	ldr	x17, [x16, #544]
   35468:	add	x16, x16, #0x220
   3546c:	br	x17

0000000000035470 <memset@plt>:
   35470:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35474:	ldr	x17, [x16, #552]
   35478:	add	x16, x16, #0x228
   3547c:	br	x17

0000000000035480 <xmalloc@plt>:
   35480:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35484:	ldr	x17, [x16, #560]
   35488:	add	x16, x16, #0x230
   3548c:	br	x17

0000000000035490 <aarch64_ins_sysreg@plt>:
   35490:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35494:	ldr	x17, [x16, #568]
   35498:	add	x16, x16, #0x238
   3549c:	br	x17

00000000000354a0 <print_arm_disassembler_options@plt>:
   354a0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   354a4:	ldr	x17, [x16, #576]
   354a8:	add	x16, x16, #0x240
   354ac:	br	x17

00000000000354b0 <aarch64_ins_fpimm@plt>:
   354b0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   354b4:	ldr	x17, [x16, #584]
   354b8:	add	x16, x16, #0x248
   354bc:	br	x17

00000000000354c0 <aarch64_ext_sve_reglist@plt>:
   354c0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   354c4:	ldr	x17, [x16, #592]
   354c8:	add	x16, x16, #0x250
   354cc:	br	x17

00000000000354d0 <aarch64_ext_sve_quad_index@plt>:
   354d0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   354d4:	ldr	x17, [x16, #600]
   354d8:	add	x16, x16, #0x258
   354dc:	br	x17

00000000000354e0 <aarch64_match_operands_constraint@plt>:
   354e0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   354e4:	ldr	x17, [x16, #608]
   354e8:	add	x16, x16, #0x260
   354ec:	br	x17

00000000000354f0 <aarch64_ins_sve_limm_mov@plt>:
   354f0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   354f4:	ldr	x17, [x16, #616]
   354f8:	add	x16, x16, #0x268
   354fc:	br	x17

0000000000035500 <aarch64_ext_inv_limm@plt>:
   35500:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35504:	ldr	x17, [x16, #624]
   35508:	add	x16, x16, #0x270
   3550c:	br	x17

0000000000035510 <aarch64_ext_sve_float_half_two@plt>:
   35510:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35514:	ldr	x17, [x16, #632]
   35518:	add	x16, x16, #0x278
   3551c:	br	x17

0000000000035520 <calloc@plt>:
   35520:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35524:	ldr	x17, [x16, #640]
   35528:	add	x16, x16, #0x280
   3552c:	br	x17

0000000000035530 <bfd_get_bits@plt>:
   35530:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35534:	ldr	x17, [x16, #648]
   35538:	add	x16, x16, #0x288
   3553c:	br	x17

0000000000035540 <aarch64_sve_dupm_mov_immediate_p@plt>:
   35540:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35544:	ldr	x17, [x16, #656]
   35548:	add	x16, x16, #0x290
   3554c:	br	x17

0000000000035550 <aarch64_ins_advsimd_imm_modified@plt>:
   35550:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35554:	ldr	x17, [x16, #664]
   35558:	add	x16, x16, #0x298
   3555c:	br	x17

0000000000035560 <aarch64_ins_ldst_reglist_r@plt>:
   35560:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35564:	ldr	x17, [x16, #672]
   35568:	add	x16, x16, #0x2a0
   3556c:	br	x17

0000000000035570 <aarch64_ins_sve_addr_zz_sxtw@plt>:
   35570:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35574:	ldr	x17, [x16, #680]
   35578:	add	x16, x16, #0x2a8
   3557c:	br	x17

0000000000035580 <aarch64_ext_ldst_reglist@plt>:
   35580:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35584:	ldr	x17, [x16, #688]
   35588:	add	x16, x16, #0x2b0
   3558c:	br	x17

0000000000035590 <realloc@plt>:
   35590:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35594:	ldr	x17, [x16, #696]
   35598:	add	x16, x16, #0x2b8
   3559c:	br	x17

00000000000355a0 <aarch64_opcode_lookup@plt>:
   355a0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   355a4:	ldr	x17, [x16, #704]
   355a8:	add	x16, x16, #0x2c0
   355ac:	br	x17

00000000000355b0 <aarch64_ext_sve_index@plt>:
   355b0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   355b4:	ldr	x17, [x16, #712]
   355b8:	add	x16, x16, #0x2c8
   355bc:	br	x17

00000000000355c0 <aarch64_ext_imm_rotate2@plt>:
   355c0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   355c4:	ldr	x17, [x16, #720]
   355c8:	add	x16, x16, #0x2d0
   355cc:	br	x17

00000000000355d0 <aarch64_ext_hint@plt>:
   355d0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   355d4:	ldr	x17, [x16, #728]
   355d8:	add	x16, x16, #0x2d8
   355dc:	br	x17

00000000000355e0 <aarch64_ins_reglist@plt>:
   355e0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   355e4:	ldr	x17, [x16, #736]
   355e8:	add	x16, x16, #0x2e0
   355ec:	br	x17

00000000000355f0 <aarch64_extract_operand@plt>:
   355f0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   355f4:	ldr	x17, [x16, #744]
   355f8:	add	x16, x16, #0x2e8
   355fc:	br	x17

0000000000035600 <aarch64_ins_sve_addr_ri_s4@plt>:
   35600:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35604:	ldr	x17, [x16, #752]
   35608:	add	x16, x16, #0x2f0
   3560c:	br	x17

0000000000035610 <aarch64_is_destructive_by_operands@plt>:
   35610:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35614:	ldr	x17, [x16, #760]
   35618:	add	x16, x16, #0x2f8
   3561c:	br	x17

0000000000035620 <aarch64_ins_prfop@plt>:
   35620:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35624:	ldr	x17, [x16, #768]
   35628:	add	x16, x16, #0x300
   3562c:	br	x17

0000000000035630 <aarch64_ins_hint@plt>:
   35630:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35634:	ldr	x17, [x16, #776]
   35638:	add	x16, x16, #0x308
   3563c:	br	x17

0000000000035640 <__gmon_start__@plt>:
   35640:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35644:	ldr	x17, [x16, #784]
   35648:	add	x16, x16, #0x310
   3564c:	br	x17

0000000000035650 <aarch64_ins_sve_float_half_two@plt>:
   35650:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35654:	ldr	x17, [x16, #792]
   35658:	add	x16, x16, #0x318
   3565c:	br	x17

0000000000035660 <aarch64_ext_sve_addr_zz_lsl@plt>:
   35660:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35664:	ldr	x17, [x16, #800]
   35668:	add	x16, x16, #0x320
   3566c:	br	x17

0000000000035670 <abort@plt>:
   35670:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35674:	ldr	x17, [x16, #808]
   35678:	add	x16, x16, #0x328
   3567c:	br	x17

0000000000035680 <aarch64_get_qualifier_esize@plt>:
   35680:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35684:	ldr	x17, [x16, #816]
   35688:	add	x16, x16, #0x330
   3568c:	br	x17

0000000000035690 <aarch64_ins_reglane@plt>:
   35690:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35694:	ldr	x17, [x16, #824]
   35698:	add	x16, x16, #0x338
   3569c:	br	x17

00000000000356a0 <aarch64_ins_sve_addr_zz_uxtw@plt>:
   356a0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   356a4:	ldr	x17, [x16, #832]
   356a8:	add	x16, x16, #0x340
   356ac:	br	x17

00000000000356b0 <aarch64_ins_imm_rotate2@plt>:
   356b0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   356b4:	ldr	x17, [x16, #840]
   356b8:	add	x16, x16, #0x348
   356bc:	br	x17

00000000000356c0 <aarch64_ext_ldst_elemlist@plt>:
   356c0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   356c4:	ldr	x17, [x16, #848]
   356c8:	add	x16, x16, #0x350
   356cc:	br	x17

00000000000356d0 <aarch64_ins_fbits@plt>:
   356d0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   356d4:	ldr	x17, [x16, #856]
   356d8:	add	x16, x16, #0x358
   356dc:	br	x17

00000000000356e0 <aarch64_ins_imm_half@plt>:
   356e0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   356e4:	ldr	x17, [x16, #864]
   356e8:	add	x16, x16, #0x360
   356ec:	br	x17

00000000000356f0 <aarch64_ext_sve_aimm@plt>:
   356f0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   356f4:	ldr	x17, [x16, #872]
   356f8:	add	x16, x16, #0x368
   356fc:	br	x17

0000000000035700 <aarch64_ins_addr_simple@plt>:
   35700:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35704:	ldr	x17, [x16, #880]
   35708:	add	x16, x16, #0x370
   3570c:	br	x17

0000000000035710 <aarch64_get_operand_class@plt>:
   35710:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35714:	ldr	x17, [x16, #888]
   35718:	add	x16, x16, #0x378
   3571c:	br	x17

0000000000035720 <aarch64_ext_imm@plt>:
   35720:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35724:	ldr	x17, [x16, #896]
   35728:	add	x16, x16, #0x380
   3572c:	br	x17

0000000000035730 <aarch64_ins_addr_uimm12@plt>:
   35730:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35734:	ldr	x17, [x16, #904]
   35738:	add	x16, x16, #0x388
   3573c:	br	x17

0000000000035740 <aarch64_stack_pointer_p@plt>:
   35740:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35744:	ldr	x17, [x16, #912]
   35748:	add	x16, x16, #0x390
   3574c:	br	x17

0000000000035750 <aarch64_ext_reglist@plt>:
   35750:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35754:	ldr	x17, [x16, #920]
   35758:	add	x16, x16, #0x398
   3575c:	br	x17

0000000000035760 <aarch64_shrink_expanded_imm8@plt>:
   35760:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35764:	ldr	x17, [x16, #928]
   35768:	add	x16, x16, #0x3a0
   3576c:	br	x17

0000000000035770 <aarch64_ext_shll_imm@plt>:
   35770:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35774:	ldr	x17, [x16, #936]
   35778:	add	x16, x16, #0x3a8
   3577c:	br	x17

0000000000035780 <aarch64_ins_inv_limm@plt>:
   35780:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35784:	ldr	x17, [x16, #944]
   35788:	add	x16, x16, #0x3b0
   3578c:	br	x17

0000000000035790 <free@plt>:
   35790:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35794:	ldr	x17, [x16, #952]
   35798:	add	x16, x16, #0x3b8
   3579c:	br	x17

00000000000357a0 <aarch64_ext_sve_float_zero_one@plt>:
   357a0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   357a4:	ldr	x17, [x16, #960]
   357a8:	add	x16, x16, #0x3c0
   357ac:	br	x17

00000000000357b0 <aarch64_select_operand_for_sizeq_field_coding@plt>:
   357b0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   357b4:	ldr	x17, [x16, #968]
   357b8:	add	x16, x16, #0x3c8
   357bc:	br	x17

00000000000357c0 <aarch64_ext_addr_regoff@plt>:
   357c0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   357c4:	ldr	x17, [x16, #976]
   357c8:	add	x16, x16, #0x3d0
   357cc:	br	x17

00000000000357d0 <aarch64_ext_sve_addr_zz_uxtw@plt>:
   357d0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   357d4:	ldr	x17, [x16, #984]
   357d8:	add	x16, x16, #0x3d8
   357dc:	br	x17

00000000000357e0 <aarch64_ins_imm@plt>:
   357e0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   357e4:	ldr	x17, [x16, #992]
   357e8:	add	x16, x16, #0x3e0
   357ec:	br	x17

00000000000357f0 <aarch64_ins_addr_offset@plt>:
   357f0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   357f4:	ldr	x17, [x16, #1000]
   357f8:	add	x16, x16, #0x3e8
   357fc:	br	x17

0000000000035800 <aarch64_ext_advsimd_imm_shift@plt>:
   35800:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35804:	ldr	x17, [x16, #1008]
   35808:	add	x16, x16, #0x3f0
   3580c:	br	x17

0000000000035810 <aarch64_ins_sve_shrimm@plt>:
   35810:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35814:	ldr	x17, [x16, #1016]
   35818:	add	x16, x16, #0x3f8
   3581c:	br	x17

0000000000035820 <aarch64_ins_ldst_elemlist@plt>:
   35820:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35824:	ldr	x17, [x16, #1024]
   35828:	add	x16, x16, #0x400
   3582c:	br	x17

0000000000035830 <init_insn_sequence@plt>:
   35830:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35834:	ldr	x17, [x16, #1032]
   35838:	add	x16, x16, #0x408
   3583c:	br	x17

0000000000035840 <strchr@plt>:
   35840:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35844:	ldr	x17, [x16, #1040]
   35848:	add	x16, x16, #0x410
   3584c:	br	x17

0000000000035850 <frexp@plt>:
   35850:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35854:	ldr	x17, [x16, #1048]
   35858:	add	x16, x16, #0x418
   3585c:	br	x17

0000000000035860 <aarch64_ins_barrier@plt>:
   35860:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35864:	ldr	x17, [x16, #1056]
   35868:	add	x16, x16, #0x420
   3586c:	br	x17

0000000000035870 <get_inverted_cond@plt>:
   35870:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35874:	ldr	x17, [x16, #1064]
   35878:	add	x16, x16, #0x428
   3587c:	br	x17

0000000000035880 <aarch64_ext_prfop@plt>:
   35880:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35884:	ldr	x17, [x16, #1072]
   35888:	add	x16, x16, #0x430
   3588c:	br	x17

0000000000035890 <print_aarch64_disassembler_options@plt>:
   35890:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35894:	ldr	x17, [x16, #1080]
   35898:	add	x16, x16, #0x438
   3589c:	br	x17

00000000000358a0 <aarch64_ext_addr_simple@plt>:
   358a0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   358a4:	ldr	x17, [x16, #1088]
   358a8:	add	x16, x16, #0x440
   358ac:	br	x17

00000000000358b0 <aarch64_ins_addr_regoff@plt>:
   358b0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   358b4:	ldr	x17, [x16, #1096]
   358b8:	add	x16, x16, #0x448
   358bc:	br	x17

00000000000358c0 <aarch64_ext_regno@plt>:
   358c0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   358c4:	ldr	x17, [x16, #1104]
   358c8:	add	x16, x16, #0x450
   358cc:	br	x17

00000000000358d0 <floatformat_to_double@plt>:
   358d0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   358d4:	ldr	x17, [x16, #1112]
   358d8:	add	x16, x16, #0x458
   358dc:	br	x17

00000000000358e0 <aarch64_ins_advsimd_imm_shift@plt>:
   358e0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   358e4:	ldr	x17, [x16, #1120]
   358e8:	add	x16, x16, #0x460
   358ec:	br	x17

00000000000358f0 <aarch64_get_qualifier_nelem@plt>:
   358f0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   358f4:	ldr	x17, [x16, #1128]
   358f8:	add	x16, x16, #0x468
   358fc:	br	x17

0000000000035900 <aarch64_ext_sve_addr_rr_lsl@plt>:
   35900:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35904:	ldr	x17, [x16, #1136]
   35908:	add	x16, x16, #0x470
   3590c:	br	x17

0000000000035910 <aarch64_ext_sve_addr_ri_s4@plt>:
   35910:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35914:	ldr	x17, [x16, #1144]
   35918:	add	x16, x16, #0x478
   3591c:	br	x17

0000000000035920 <aarch64_ins_sve_aimm@plt>:
   35920:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35924:	ldr	x17, [x16, #1152]
   35928:	add	x16, x16, #0x480
   3592c:	br	x17

0000000000035930 <aarch64_ext_sve_scale@plt>:
   35930:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35934:	ldr	x17, [x16, #1160]
   35938:	add	x16, x16, #0x488
   3593c:	br	x17

0000000000035940 <aarch64_ins_sve_addr_ri_s6xvl@plt>:
   35940:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35944:	ldr	x17, [x16, #1168]
   35948:	add	x16, x16, #0x490
   3594c:	br	x17

0000000000035950 <xexit@plt>:
   35950:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35954:	ldr	x17, [x16, #1176]
   35958:	add	x16, x16, #0x498
   3595c:	br	x17

0000000000035960 <aarch64_ext_imm_half@plt>:
   35960:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35964:	ldr	x17, [x16, #1184]
   35968:	add	x16, x16, #0x4a0
   3596c:	br	x17

0000000000035970 <disassembler_options_cmp@plt>:
   35970:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35974:	ldr	x17, [x16, #1192]
   35978:	add	x16, x16, #0x4a8
   3597c:	br	x17

0000000000035980 <aarch64_insert_operand@plt>:
   35980:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35984:	ldr	x17, [x16, #1200]
   35988:	add	x16, x16, #0x4b0
   3598c:	br	x17

0000000000035990 <aarch64_ins_sve_asimm@plt>:
   35990:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35994:	ldr	x17, [x16, #1208]
   35998:	add	x16, x16, #0x4b8
   3599c:	br	x17

00000000000359a0 <xmalloc_failed@plt>:
   359a0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   359a4:	ldr	x17, [x16, #1216]
   359a8:	add	x16, x16, #0x4c0
   359ac:	br	x17

00000000000359b0 <aarch64_ins_reg_extended@plt>:
   359b0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   359b4:	ldr	x17, [x16, #1224]
   359b8:	add	x16, x16, #0x4c8
   359bc:	br	x17

00000000000359c0 <aarch64_ext_sve_addr_ri_s6xvl@plt>:
   359c0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   359c4:	ldr	x17, [x16, #1232]
   359c8:	add	x16, x16, #0x4d0
   359cc:	br	x17

00000000000359d0 <aarch64_ext_barrier@plt>:
   359d0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   359d4:	ldr	x17, [x16, #1240]
   359d8:	add	x16, x16, #0x4d8
   359dc:	br	x17

00000000000359e0 <dcgettext@plt>:
   359e0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   359e4:	ldr	x17, [x16, #1248]
   359e8:	add	x16, x16, #0x4e0
   359ec:	br	x17

00000000000359f0 <aarch64_ext_sve_float_half_one@plt>:
   359f0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   359f4:	ldr	x17, [x16, #1256]
   359f8:	add	x16, x16, #0x4e8
   359fc:	br	x17

0000000000035a00 <aarch64_sys_ins_reg_has_xt@plt>:
   35a00:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35a04:	ldr	x17, [x16, #1264]
   35a08:	add	x16, x16, #0x4f0
   35a0c:	br	x17

0000000000035a10 <_bfd_error_handler@plt>:
   35a10:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35a14:	ldr	x17, [x16, #1272]
   35a18:	add	x16, x16, #0x4f8
   35a1c:	br	x17

0000000000035a20 <aarch64_ins_sve_addr_zi_u5@plt>:
   35a20:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35a24:	ldr	x17, [x16, #1280]
   35a28:	add	x16, x16, #0x500
   35a2c:	br	x17

0000000000035a30 <aarch64_ins_sve_shlimm@plt>:
   35a30:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35a34:	ldr	x17, [x16, #1288]
   35a38:	add	x16, x16, #0x508
   35a3c:	br	x17

0000000000035a40 <aarch64_wide_constant_p@plt>:
   35a40:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35a44:	ldr	x17, [x16, #1296]
   35a48:	add	x16, x16, #0x510
   35a4c:	br	x17

0000000000035a50 <aarch64_ext_sve_addr_rz_xtw@plt>:
   35a50:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35a54:	ldr	x17, [x16, #1304]
   35a58:	add	x16, x16, #0x518
   35a5c:	br	x17

0000000000035a60 <aarch64_ext_regno_pair@plt>:
   35a60:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35a64:	ldr	x17, [x16, #1312]
   35a68:	add	x16, x16, #0x520
   35a6c:	br	x17

0000000000035a70 <aarch64_ext_ft@plt>:
   35a70:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35a74:	ldr	x17, [x16, #1320]
   35a78:	add	x16, x16, #0x528
   35a7c:	br	x17

0000000000035a80 <strncpy@plt>:
   35a80:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35a84:	ldr	x17, [x16, #1328]
   35a88:	add	x16, x16, #0x530
   35a8c:	br	x17

0000000000035a90 <aarch64_ext_reg_shifted@plt>:
   35a90:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35a94:	ldr	x17, [x16, #1336]
   35a98:	add	x16, x16, #0x538
   35a9c:	br	x17

0000000000035aa0 <aarch64_ins_ldst_reglist@plt>:
   35aa0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35aa4:	ldr	x17, [x16, #1344]
   35aa8:	add	x16, x16, #0x540
   35aac:	br	x17

0000000000035ab0 <aarch64_ext_sve_limm_mov@plt>:
   35ab0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35ab4:	ldr	x17, [x16, #1352]
   35ab8:	add	x16, x16, #0x548
   35abc:	br	x17

0000000000035ac0 <__assert_fail@plt>:
   35ac0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35ac4:	ldr	x17, [x16, #1360]
   35ac8:	add	x16, x16, #0x550
   35acc:	br	x17

0000000000035ad0 <aarch64_ins_sve_float_half_one@plt>:
   35ad0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35ad4:	ldr	x17, [x16, #1368]
   35ad8:	add	x16, x16, #0x558
   35adc:	br	x17

0000000000035ae0 <aarch64_find_next_alias_opcode@plt>:
   35ae0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35ae4:	ldr	x17, [x16, #1376]
   35ae8:	add	x16, x16, #0x560
   35aec:	br	x17

0000000000035af0 <aarch64_ext_imm_rotate1@plt>:
   35af0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35af4:	ldr	x17, [x16, #1384]
   35af8:	add	x16, x16, #0x568
   35afc:	br	x17

0000000000035b00 <aarch64_sys_reg_deprecated_p@plt>:
   35b00:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35b04:	ldr	x17, [x16, #1392]
   35b08:	add	x16, x16, #0x570
   35b0c:	br	x17

0000000000035b10 <aarch64_ext_advsimd_imm_modified@plt>:
   35b10:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35b14:	ldr	x17, [x16, #1400]
   35b18:	add	x16, x16, #0x578
   35b1c:	br	x17

0000000000035b20 <aarch64_ext_pstatefield@plt>:
   35b20:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35b24:	ldr	x17, [x16, #1408]
   35b28:	add	x16, x16, #0x580
   35b2c:	br	x17

0000000000035b30 <aarch64_ins_sve_addr_ri_s9xvl@plt>:
   35b30:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35b34:	ldr	x17, [x16, #1416]
   35b38:	add	x16, x16, #0x588
   35b3c:	br	x17

0000000000035b40 <aarch64_ext_simd_addr_post@plt>:
   35b40:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35b44:	ldr	x17, [x16, #1424]
   35b48:	add	x16, x16, #0x590
   35b4c:	br	x17

0000000000035b50 <aarch64_find_next_opcode@plt>:
   35b50:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35b54:	ldr	x17, [x16, #1432]
   35b58:	add	x16, x16, #0x598
   35b5c:	br	x17

0000000000035b60 <aarch64_ext_sve_addr_ri_u6@plt>:
   35b60:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35b64:	ldr	x17, [x16, #1440]
   35b68:	add	x16, x16, #0x5a0
   35b6c:	br	x17

0000000000035b70 <aarch64_extend_operator_p@plt>:
   35b70:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35b74:	ldr	x17, [x16, #1448]
   35b78:	add	x16, x16, #0x5a8
   35b7c:	br	x17

0000000000035b80 <fprintf@plt>:
   35b80:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35b84:	ldr	x17, [x16, #1456]
   35b88:	add	x16, x16, #0x5b0
   35b8c:	br	x17

0000000000035b90 <aarch64_ext_cond@plt>:
   35b90:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35b94:	ldr	x17, [x16, #1464]
   35b98:	add	x16, x16, #0x5b8
   35b9c:	br	x17

0000000000035ba0 <aarch64_find_alias_opcode@plt>:
   35ba0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35ba4:	ldr	x17, [x16, #1472]
   35ba8:	add	x16, x16, #0x5c0
   35bac:	br	x17

0000000000035bb0 <aarch64_get_operand_modifier_from_value@plt>:
   35bb0:	adrp	x16, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35bb4:	ldr	x17, [x16, #1480]
   35bb8:	add	x16, x16, #0x5c8
   35bbc:	br	x17

Disassembly of section .text:

0000000000035bc0 <buffer_read_memory@@Base-0xd8>:
   35bc0:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   35bc4:	ldr	x0, [x0, #3928]
   35bc8:	cbz	x0, 35bd0 <aarch64_get_operand_modifier_from_value@plt+0x20>
   35bcc:	b	35640 <__gmon_start__@plt>
   35bd0:	ret
   35bd4:	nop
   35bd8:	adrp	x0, f9000 <aarch64_opcode_table@@Base+0x55a20>
   35bdc:	add	x0, x0, #0x660
   35be0:	adrp	x1, f9000 <aarch64_opcode_table@@Base+0x55a20>
   35be4:	add	x1, x1, #0x660
   35be8:	cmp	x1, x0
   35bec:	b.eq	35c04 <aarch64_get_operand_modifier_from_value@plt+0x54>  // b.none
   35bf0:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   35bf4:	ldr	x1, [x1, #3800]
   35bf8:	cbz	x1, 35c04 <aarch64_get_operand_modifier_from_value@plt+0x54>
   35bfc:	mov	x16, x1
   35c00:	br	x16
   35c04:	ret
   35c08:	adrp	x0, f9000 <aarch64_opcode_table@@Base+0x55a20>
   35c0c:	add	x0, x0, #0x660
   35c10:	adrp	x1, f9000 <aarch64_opcode_table@@Base+0x55a20>
   35c14:	add	x1, x1, #0x660
   35c18:	sub	x1, x1, x0
   35c1c:	lsr	x2, x1, #63
   35c20:	add	x1, x2, x1, asr #3
   35c24:	cmp	xzr, x1, asr #1
   35c28:	asr	x1, x1, #1
   35c2c:	b.eq	35c44 <aarch64_get_operand_modifier_from_value@plt+0x94>  // b.none
   35c30:	adrp	x2, a2000 <aarch64_operands@@Base+0x16bc0>
   35c34:	ldr	x2, [x2, #4048]
   35c38:	cbz	x2, 35c44 <aarch64_get_operand_modifier_from_value@plt+0x94>
   35c3c:	mov	x16, x2
   35c40:	br	x16
   35c44:	ret
   35c48:	stp	x29, x30, [sp, #-32]!
   35c4c:	mov	x29, sp
   35c50:	str	x19, [sp, #16]
   35c54:	adrp	x19, f9000 <aarch64_opcode_table@@Base+0x55a20>
   35c58:	ldrb	w0, [x19, #1632]
   35c5c:	cbnz	w0, 35c84 <aarch64_get_operand_modifier_from_value@plt+0xd4>
   35c60:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   35c64:	ldr	x0, [x0, #3824]
   35c68:	cbz	x0, 35c78 <aarch64_get_operand_modifier_from_value@plt+0xc8>
   35c6c:	adrp	x0, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   35c70:	ldr	x0, [x0, #1488]
   35c74:	bl	35210 <__cxa_finalize@plt>
   35c78:	bl	35bd8 <aarch64_get_operand_modifier_from_value@plt+0x28>
   35c7c:	mov	w0, #0x1                   	// #1
   35c80:	strb	w0, [x19, #1632]
   35c84:	ldr	x19, [sp, #16]
   35c88:	ldp	x29, x30, [sp], #32
   35c8c:	ret
   35c90:	b	35c08 <aarch64_get_operand_modifier_from_value@plt+0x58>
   35c94:	nop

0000000000035c98 <buffer_read_memory@@Base>:
   35c98:	ldp	x4, x6, [x3, #152]
   35c9c:	ldr	w7, [x3, #180]
   35ca0:	mov	w8, w7
   35ca4:	cmp	x4, x0
   35ca8:	sub	x4, x0, x4
   35cac:	udiv	x6, x6, x8
   35cb0:	ccmp	x4, x6, #0x2, ls  // ls = plast
   35cb4:	b.hi	35d18 <buffer_read_memory@@Base+0x80>  // b.pmore
   35cb8:	udiv	w7, w2, w7
   35cbc:	mov	x5, x0
   35cc0:	mov	w0, #0x5                   	// #5
   35cc4:	add	x9, x4, x7
   35cc8:	cmp	x9, x6
   35ccc:	b.hi	35d14 <buffer_read_memory@@Base+0x7c>  // b.pmore
   35cd0:	ldr	x6, [x3, #232]
   35cd4:	cbz	x6, 35cec <buffer_read_memory@@Base+0x54>
   35cd8:	cmp	x6, x5
   35cdc:	b.ls	35d14 <buffer_read_memory@@Base+0x7c>  // b.plast
   35ce0:	add	x7, x7, x5
   35ce4:	cmp	x6, x7
   35ce8:	b.cc	35d14 <buffer_read_memory@@Base+0x7c>  // b.lo, b.ul, b.last
   35cec:	stp	x29, x30, [sp, #-16]!
   35cf0:	mov	x0, x1
   35cf4:	mov	w2, w2
   35cf8:	mov	x29, sp
   35cfc:	ldr	x3, [x3, #144]
   35d00:	madd	x1, x8, x4, x3
   35d04:	bl	35050 <memcpy@plt>
   35d08:	mov	w0, #0x0                   	// #0
   35d0c:	ldp	x29, x30, [sp], #16
   35d10:	ret
   35d14:	ret
   35d18:	mov	w0, #0x5                   	// #5
   35d1c:	ret

0000000000035d20 <perror_memory@@Base>:
   35d20:	stp	x29, x30, [sp, #-80]!
   35d24:	cmp	w0, #0x5
   35d28:	mov	x29, sp
   35d2c:	stp	x19, x20, [sp, #16]
   35d30:	mov	w20, w0
   35d34:	mov	x19, x2
   35d38:	stp	x21, x22, [sp, #32]
   35d3c:	b.eq	35d7c <perror_memory@@Base+0x5c>  // b.none
   35d40:	ldp	x21, x19, [x19]
   35d44:	mov	w2, #0x5                   	// #5
   35d48:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   35d4c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   35d50:	add	x1, x1, #0x238
   35d54:	add	x0, x0, #0x250
   35d58:	bl	359e0 <dcgettext@plt>
   35d5c:	mov	x1, x0
   35d60:	mov	w2, w20
   35d64:	mov	x0, x19
   35d68:	blr	x21
   35d6c:	ldp	x19, x20, [sp, #16]
   35d70:	ldp	x21, x22, [sp, #32]
   35d74:	ldp	x29, x30, [sp], #80
   35d78:	ret
   35d7c:	add	x21, sp, #0x30
   35d80:	mov	x2, x1
   35d84:	mov	x0, x21
   35d88:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   35d8c:	add	x1, x1, #0x258
   35d90:	bl	35230 <sprintf@plt>
   35d94:	ldp	x22, x19, [x19]
   35d98:	mov	w2, w20
   35d9c:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   35da0:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   35da4:	add	x1, x1, #0x260
   35da8:	add	x0, x0, #0x250
   35dac:	bl	359e0 <dcgettext@plt>
   35db0:	mov	x1, x0
   35db4:	mov	x2, x21
   35db8:	mov	x0, x19
   35dbc:	blr	x22
   35dc0:	ldp	x19, x20, [sp, #16]
   35dc4:	ldp	x21, x22, [sp, #32]
   35dc8:	ldp	x29, x30, [sp], #80
   35dcc:	ret

0000000000035dd0 <generic_print_address@@Base>:
   35dd0:	stp	x29, x30, [sp, #-64]!
   35dd4:	mov	x2, x0
   35dd8:	mov	x29, sp
   35ddc:	stp	x19, x20, [sp, #16]
   35de0:	mov	x19, x1
   35de4:	add	x20, sp, #0x20
   35de8:	mov	x0, x20
   35dec:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   35df0:	add	x1, x1, #0x258
   35df4:	bl	35230 <sprintf@plt>
   35df8:	ldp	x3, x0, [x19]
   35dfc:	mov	x2, x20
   35e00:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   35e04:	add	x1, x1, #0x280
   35e08:	blr	x3
   35e0c:	ldp	x19, x20, [sp, #16]
   35e10:	ldp	x29, x30, [sp], #64
   35e14:	ret

0000000000035e18 <generic_symbol_at_address@@Base>:
   35e18:	mov	w0, #0x1                   	// #1
   35e1c:	ret

0000000000035e20 <generic_symbol_is_valid@@Base>:
   35e20:	mov	w0, #0x1                   	// #1
   35e24:	ret

0000000000035e28 <disassembler@@Base>:
   35e28:	mov	w2, w0
   35e2c:	cmp	w0, #0x21
   35e30:	b.eq	35e48 <disassembler@@Base+0x20>  // b.none
   35e34:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   35e38:	cmp	w2, #0x52
   35e3c:	ldr	x0, [x0, #4024]
   35e40:	csel	x0, x0, xzr, eq  // eq = none
   35e44:	ret
   35e48:	adrp	x2, a2000 <aarch64_operands@@Base+0x16bc0>
   35e4c:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   35e50:	cmp	w1, #0x0
   35e54:	ldr	x0, [x0, #3808]
   35e58:	ldr	x1, [x2, #3952]
   35e5c:	csel	x0, x0, x1, ne  // ne = any
   35e60:	ret
   35e64:	nop

0000000000035e68 <disassembler_usage@@Base>:
   35e68:	stp	x29, x30, [sp, #-32]!
   35e6c:	mov	x29, sp
   35e70:	str	x19, [sp, #16]
   35e74:	mov	x19, x0
   35e78:	bl	35890 <print_aarch64_disassembler_options@plt>
   35e7c:	mov	x0, x19
   35e80:	ldr	x19, [sp, #16]
   35e84:	ldp	x29, x30, [sp], #32
   35e88:	b	354a0 <print_arm_disassembler_options@plt>
   35e8c:	nop

0000000000035e90 <disassemble_init_for_target@@Base>:
   35e90:	cbz	x0, 35ea8 <disassemble_init_for_target@@Base+0x18>
   35e94:	ldr	w1, [x0, #28]
   35e98:	cmp	w1, #0x21
   35e9c:	b.eq	35ec4 <disassemble_init_for_target@@Base+0x34>  // b.none
   35ea0:	cmp	w1, #0x52
   35ea4:	b.eq	35eac <disassemble_init_for_target@@Base+0x1c>  // b.none
   35ea8:	ret
   35eac:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   35eb0:	mov	w2, #0x1                   	// #1
   35eb4:	str	w2, [x0, #192]
   35eb8:	ldr	x1, [x1, #3856]
   35ebc:	str	x1, [x0, #136]
   35ec0:	ret
   35ec4:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   35ec8:	mov	w2, #0x1                   	// #1
   35ecc:	str	w2, [x0, #192]
   35ed0:	ldr	x1, [x1, #3912]
   35ed4:	str	x1, [x0, #136]
   35ed8:	ret
   35edc:	nop

0000000000035ee0 <disassemble_free_target@@Base>:
   35ee0:	ret
   35ee4:	nop

0000000000035ee8 <remove_whitespace_and_extra_commas@@Base>:
   35ee8:	stp	x29, x30, [sp, #-64]!
   35eec:	mov	x29, sp
   35ef0:	stp	x19, x20, [sp, #16]
   35ef4:	cbz	x0, 3602c <remove_whitespace_and_extra_commas@@Base+0x144>
   35ef8:	mov	x19, x0
   35efc:	bl	350a0 <strlen@plt>
   35f00:	adrp	x2, a2000 <aarch64_operands@@Base+0x16bc0>
   35f04:	ldr	x2, [x2, #3880]
   35f08:	cbz	x0, 35f34 <remove_whitespace_and_extra_commas@@Base+0x4c>
   35f0c:	nop
   35f10:	sub	x0, x0, #0x1
   35f14:	ldrb	w1, [x19, x0]
   35f18:	cmp	w1, #0x2c
   35f1c:	ldrh	w1, [x2, w1, sxtw #1]
   35f20:	and	w1, w1, #0x40
   35f24:	ccmp	w1, #0x0, #0x0, ne  // ne = any
   35f28:	b.eq	35f34 <remove_whitespace_and_extra_commas@@Base+0x4c>  // b.none
   35f2c:	strb	wzr, [x19, x0]
   35f30:	cbnz	x0, 35f10 <remove_whitespace_and_extra_commas@@Base+0x28>
   35f34:	ldrb	w0, [x19]
   35f38:	adrp	x2, a2000 <aarch64_operands@@Base+0x16bc0>
   35f3c:	mov	x1, x19
   35f40:	mov	w3, #0x2c                  	// #44
   35f44:	ldr	x2, [x2, #3880]
   35f48:	cbz	w0, 3602c <remove_whitespace_and_extra_commas@@Base+0x144>
   35f4c:	nop
   35f50:	ldrh	w0, [x2, w0, sxtw #1]
   35f54:	tbz	w0, #6, 35f5c <remove_whitespace_and_extra_commas@@Base+0x74>
   35f58:	strb	w3, [x1]
   35f5c:	ldrb	w0, [x1, #1]!
   35f60:	cbnz	w0, 35f50 <remove_whitespace_and_extra_commas@@Base+0x68>
   35f64:	ldrb	w1, [x19]
   35f68:	cbz	w1, 3602c <remove_whitespace_and_extra_commas@@Base+0x144>
   35f6c:	stp	x21, x22, [sp, #32]
   35f70:	mov	x21, x19
   35f74:	mov	x20, x21
   35f78:	cmp	w1, #0x2c
   35f7c:	ldrb	w1, [x20, #1]!
   35f80:	b.eq	35fa0 <remove_whitespace_and_extra_commas@@Base+0xb8>  // b.none
   35f84:	nop
   35f88:	cbz	w1, 36010 <remove_whitespace_and_extra_commas@@Base+0x128>
   35f8c:	mov	x21, x20
   35f90:	cmp	w1, #0x2c
   35f94:	mov	x20, x21
   35f98:	ldrb	w1, [x20, #1]!
   35f9c:	b.ne	35f88 <remove_whitespace_and_extra_commas@@Base+0xa0>  // b.any
   35fa0:	cmp	w1, #0x2c
   35fa4:	ccmp	x19, x21, #0x4, ne  // ne = any
   35fa8:	b.ne	35f88 <remove_whitespace_and_extra_commas@@Base+0xa0>  // b.any
   35fac:	str	x23, [sp, #48]
   35fb0:	mov	x22, x20
   35fb4:	cmp	w1, #0x2c
   35fb8:	b.ne	35fcc <remove_whitespace_and_extra_commas@@Base+0xe4>  // b.any
   35fbc:	nop
   35fc0:	ldrb	w0, [x22, #1]!
   35fc4:	cmp	w0, #0x2c
   35fc8:	b.eq	35fc0 <remove_whitespace_and_extra_commas@@Base+0xd8>  // b.none
   35fcc:	mov	x0, x22
   35fd0:	bl	350a0 <strlen@plt>
   35fd4:	cmp	x19, x21
   35fd8:	mov	x23, x0
   35fdc:	b.eq	35fec <remove_whitespace_and_extra_commas@@Base+0x104>  // b.none
   35fe0:	add	x0, x21, #0x2
   35fe4:	mov	x21, x20
   35fe8:	mov	x20, x0
   35fec:	mov	x1, x22
   35ff0:	mov	x2, x23
   35ff4:	mov	x0, x21
   35ff8:	bl	35060 <memmove@plt>
   35ffc:	strb	wzr, [x21, x23]
   36000:	ldrb	w1, [x21, #1]
   36004:	ldr	x23, [sp, #48]
   36008:	cbnz	w1, 35f8c <remove_whitespace_and_extra_commas@@Base+0xa4>
   3600c:	nop
   36010:	ldrb	w0, [x19]
   36014:	ldp	x21, x22, [sp, #32]
   36018:	cbz	w0, 3602c <remove_whitespace_and_extra_commas@@Base+0x144>
   3601c:	mov	x0, x19
   36020:	ldp	x19, x20, [sp, #16]
   36024:	ldp	x29, x30, [sp], #64
   36028:	ret
   3602c:	mov	x19, #0x0                   	// #0
   36030:	mov	x0, x19
   36034:	ldp	x19, x20, [sp, #16]
   36038:	ldp	x29, x30, [sp], #64
   3603c:	ret

0000000000036040 <disassembler_options_cmp@@Base>:
   36040:	mov	x4, #0x0                   	// #0
   36044:	ldrb	w2, [x0, x4]
   36048:	ldrb	w3, [x1, x4]
   3604c:	cmp	w2, #0x2c
   36050:	b.eq	36074 <disassembler_options_cmp@@Base+0x34>  // b.none
   36054:	add	x4, x4, #0x1
   36058:	cmp	w3, #0x2c
   3605c:	b.eq	36088 <disassembler_options_cmp@@Base+0x48>  // b.none
   36060:	cmp	w2, w3
   36064:	cbz	w2, 36080 <disassembler_options_cmp@@Base+0x40>
   36068:	b.eq	36044 <disassembler_options_cmp@@Base+0x4>  // b.none
   3606c:	sub	w0, w2, w3
   36070:	ret
   36074:	cmp	w3, #0x2c
   36078:	mov	w0, #0x0                   	// #0
   3607c:	b.eq	36070 <disassembler_options_cmp@@Base+0x30>  // b.none
   36080:	neg	w0, w3
   36084:	ret
   36088:	cbz	w2, 36098 <disassembler_options_cmp@@Base+0x58>
   3608c:	mov	w3, #0x0                   	// #0
   36090:	sub	w0, w2, w3
   36094:	b	36070 <disassembler_options_cmp@@Base+0x30>
   36098:	mov	w0, #0x0                   	// #0
   3609c:	ret

00000000000360a0 <init_disassemble_info@@Base>:
   360a0:	stp	x29, x30, [sp, #-48]!
   360a4:	mov	x29, sp
   360a8:	stp	x19, x20, [sp, #16]
   360ac:	mov	x19, x0
   360b0:	mov	x20, x1
   360b4:	add	x0, x0, #0x10
   360b8:	mov	w1, #0x0                   	// #0
   360bc:	str	x21, [sp, #32]
   360c0:	mov	x21, x2
   360c4:	mov	x2, #0xe8                  	// #232
   360c8:	bl	35470 <memset@plt>
   360cc:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   360d0:	adrp	x3, a2000 <aarch64_operands@@Base+0x16bc0>
   360d4:	adrp	x6, a2000 <aarch64_operands@@Base+0x16bc0>
   360d8:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   360dc:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   360e0:	mov	x7, #0x2                   	// #2
   360e4:	ldr	x6, [x6, #3976]
   360e8:	mov	x8, #0x200000002           	// #8589934594
   360ec:	ldr	x5, [x5, #3816]
   360f0:	movk	x7, #0x1, lsl #32
   360f4:	ldr	x2, [x4, #3784]
   360f8:	stp	x21, x20, [x19]
   360fc:	ldr	x1, [x3, #3936]
   36100:	str	x8, [x19, #40]
   36104:	ldr	x0, [x0, #3872]
   36108:	stp	x6, x5, [x19, #104]
   3610c:	stp	x2, x1, [x19, #120]
   36110:	str	x0, [x19, #136]
   36114:	str	x7, [x19, #176]
   36118:	ldp	x19, x20, [sp, #16]
   3611c:	ldr	x21, [sp, #32]
   36120:	ldp	x29, x30, [sp], #48
   36124:	ret
   36128:	stp	x29, x30, [sp, #-32]!
   3612c:	mov	x29, sp
   36130:	str	x19, [sp, #16]
   36134:	mov	x19, x0
   36138:	ldr	x0, [x0, #8]
   3613c:	bl	35170 <aarch64_num_of_operands@plt>
   36140:	sub	w6, w0, #0x1
   36144:	add	x6, x6, #0x2
   36148:	mov	w8, w0
   3614c:	mov	x7, #0x0                   	// #0
   36150:	mov	w0, #0x0                   	// #0
   36154:	nop
   36158:	cmp	w8, #0x0
   3615c:	mov	w3, #0x0                   	// #0
   36160:	b.le	361b4 <init_disassemble_info@@Base+0x114>
   36164:	ldr	x3, [x19, #8]
   36168:	add	x5, x7, #0x37
   3616c:	add	x2, x19, #0x1c
   36170:	mov	x1, #0x1                   	// #1
   36174:	add	x5, x3, x5
   36178:	b	36190 <init_disassemble_info@@Base+0xf0>
   3617c:	mov	w3, w1
   36180:	add	x1, x1, #0x1
   36184:	add	x2, x2, #0x38
   36188:	cmp	x1, x6
   3618c:	b.eq	361b4 <init_disassemble_info@@Base+0x114>  // b.none
   36190:	ldrb	w4, [x5, x1]
   36194:	ldrb	w3, [x2]
   36198:	cmp	w4, w3
   3619c:	b.eq	3617c <init_disassemble_info@@Base+0xdc>  // b.none
   361a0:	add	w0, w0, #0x1
   361a4:	add	x7, x7, #0x6
   361a8:	cmp	w0, #0xa
   361ac:	b.ne	36158 <init_disassemble_info@@Base+0xb8>  // b.any
   361b0:	bl	35670 <abort@plt>
   361b4:	cmp	w8, w3
   361b8:	b.ne	361a0 <init_disassemble_info@@Base+0x100>  // b.any
   361bc:	ldr	x19, [sp, #16]
   361c0:	ldp	x29, x30, [sp], #32
   361c4:	ret
   361c8:	stp	x29, x30, [sp, #-16]!
   361cc:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   361d0:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   361d4:	mov	x29, sp
   361d8:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   361dc:	add	x3, x3, #0x960
   361e0:	add	x1, x1, #0x288
   361e4:	add	x0, x0, #0x2a8
   361e8:	mov	w2, #0x169                 	// #361
   361ec:	bl	35ac0 <__assert_fail@plt>
   361f0:	stp	x29, x30, [sp, #-16]!
   361f4:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   361f8:	add	x3, x3, #0x960
   361fc:	mov	x29, sp
   36200:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   36204:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   36208:	add	x3, x3, #0x10
   3620c:	add	x1, x1, #0x288
   36210:	add	x0, x0, #0x308
   36214:	mov	w2, #0x203                 	// #515
   36218:	bl	35ac0 <__assert_fail@plt>
   3621c:	nop
   36220:	stp	x29, x30, [sp, #-16]!
   36224:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   36228:	add	x3, x3, #0x960
   3622c:	mov	x29, sp
   36230:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   36234:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   36238:	add	x3, x3, #0x20
   3623c:	add	x1, x1, #0x288
   36240:	add	x0, x0, #0x4b0
   36244:	mov	w2, #0x1ab                 	// #427
   36248:	bl	35ac0 <__assert_fail@plt>
   3624c:	nop
   36250:	stp	x29, x30, [sp, #-96]!
   36254:	mov	w8, #0xffffffe0            	// #-32
   36258:	cmp	w3, #0x5
   3625c:	mov	x29, sp
   36260:	add	x9, sp, #0x30
   36264:	str	x9, [sp, #32]
   36268:	stp	w8, wzr, [sp, #40]
   3626c:	stp	x3, x4, [sp, #56]
   36270:	add	x4, sp, #0x60
   36274:	stp	x4, x4, [sp, #16]
   36278:	stp	x5, x6, [sp, #72]
   3627c:	str	x7, [sp, #88]
   36280:	b.hi	3635c <init_disassemble_info@@Base+0x2bc>  // b.pmore
   36284:	sub	w5, w3, #0x1
   36288:	cbz	w3, 36314 <init_disassemble_info@@Base+0x274>
   3628c:	adrp	x9, a2000 <aarch64_operands@@Base+0x16bc0>
   36290:	mov	w7, w8
   36294:	add	x8, sp, #0x60
   36298:	mvn	w10, w2
   3629c:	ldr	x9, [x9, #3944]
   362a0:	mov	x12, x8
   362a4:	mov	w11, #0xffffffff            	// #-1
   362a8:	tbnz	w7, #31, 3631c <init_disassemble_info@@Base+0x27c>
   362ac:	mov	x2, x8
   362b0:	add	x8, x8, #0x8
   362b4:	ldr	w2, [x2]
   362b8:	lsl	x2, x2, #3
   362bc:	add	x6, x2, x9
   362c0:	ldr	w3, [x2, x9]
   362c4:	ldr	w2, [x6, #4]
   362c8:	cmp	w3, #0x0
   362cc:	sub	w4, w2, #0x1
   362d0:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   362d4:	b.hi	3633c <init_disassemble_info@@Base+0x29c>  // b.pmore
   362d8:	add	w4, w3, w2
   362dc:	cmp	w4, #0x20
   362e0:	b.gt	3633c <init_disassemble_info@@Base+0x29c>
   362e4:	lsl	w2, w11, w2
   362e8:	bic	w2, w1, w2
   362ec:	ldr	w4, [x0]
   362f0:	sub	w5, w5, #0x1
   362f4:	lsl	w2, w2, w3
   362f8:	ldr	w3, [x6, #4]
   362fc:	and	w2, w10, w2
   36300:	cmn	w5, #0x1
   36304:	orr	w2, w4, w2
   36308:	str	w2, [x0]
   3630c:	lsr	w1, w1, w3
   36310:	b.ne	362a8 <init_disassemble_info@@Base+0x208>  // b.any
   36314:	ldp	x29, x30, [sp], #96
   36318:	ret
   3631c:	add	w3, w7, #0x8
   36320:	cmp	w3, #0x0
   36324:	b.le	36330 <init_disassemble_info@@Base+0x290>
   36328:	mov	w7, w3
   3632c:	b	362ac <init_disassemble_info@@Base+0x20c>
   36330:	add	x2, x12, w7, sxtw
   36334:	mov	w7, w3
   36338:	b	362b4 <init_disassemble_info@@Base+0x214>
   3633c:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   36340:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   36344:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   36348:	add	x3, x3, #0x960
   3634c:	add	x1, x1, #0x288
   36350:	add	x0, x0, #0x2a8
   36354:	mov	w2, #0x169                 	// #361
   36358:	bl	35ac0 <__assert_fail@plt>
   3635c:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   36360:	add	x3, x3, #0x960
   36364:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   36368:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3636c:	add	x3, x3, #0x48
   36370:	add	x1, x1, #0x330
   36374:	add	x0, x0, #0x350
   36378:	mov	w2, #0x31                  	// #49
   3637c:	bl	35ac0 <__assert_fail@plt>
   36380:	stp	x29, x30, [sp, #-64]!
   36384:	mov	x29, sp
   36388:	stp	x19, x20, [sp, #16]
   3638c:	mov	x20, x1
   36390:	mov	x19, x0
   36394:	mov	w0, w3
   36398:	stp	x21, x22, [sp, #32]
   3639c:	mov	x22, x2
   363a0:	mov	w21, w4
   363a4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   363a8:	cmp	w21, #0x0
   363ac:	and	w1, w0, #0xff
   363b0:	add	x2, sp, #0x3c
   363b4:	cinv	x0, x20, ne  // ne = any
   363b8:	bl	35400 <aarch64_logical_immediate_p@plt>
   363bc:	cbz	w0, 363f0 <init_disassemble_info@@Base+0x350>
   363c0:	ldp	w6, w5, [x19, #20]
   363c4:	mov	x0, x22
   363c8:	ldr	w4, [x19, #28]
   363cc:	mov	w3, #0x3                   	// #3
   363d0:	ldr	w1, [sp, #60]
   363d4:	mov	w2, #0x0                   	// #0
   363d8:	bl	36250 <init_disassemble_info@@Base+0x1b0>
   363dc:	mov	w0, #0x1                   	// #1
   363e0:	ldp	x19, x20, [sp, #16]
   363e4:	ldp	x21, x22, [sp, #32]
   363e8:	ldp	x29, x30, [sp], #64
   363ec:	ret
   363f0:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   363f4:	add	x3, x3, #0x960
   363f8:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   363fc:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   36400:	add	x3, x3, #0x58
   36404:	add	x1, x1, #0x330
   36408:	add	x0, x0, #0x360
   3640c:	mov	w2, #0x220                 	// #544
   36410:	bl	35ac0 <__assert_fail@plt>
   36414:	nop
   36418:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   3641c:	add	x3, x0, #0x20
   36420:	add	x4, x0, #0x10
   36424:	mov	w9, #0xffffffff            	// #-1
   36428:	ldr	x5, [x5, #3944]
   3642c:	ldr	w0, [x3]
   36430:	cbnz	w0, 36444 <init_disassemble_info@@Base+0x3a4>
   36434:	sub	x3, x3, #0x4
   36438:	cmp	x3, x4
   3643c:	b.ne	3642c <init_disassemble_info@@Base+0x38c>  // b.any
   36440:	ret
   36444:	ubfiz	x0, x0, #3, #32
   36448:	add	x6, x0, x5
   3644c:	ldr	w7, [x0, x5]
   36450:	ldr	w0, [x6, #4]
   36454:	cmp	w7, #0x0
   36458:	sub	w8, w0, #0x1
   3645c:	ccmp	w8, #0x1e, #0x2, ge  // ge = tcont
   36460:	b.hi	36494 <init_disassemble_info@@Base+0x3f4>  // b.pmore
   36464:	add	w8, w7, w0
   36468:	cmp	w8, #0x20
   3646c:	b.gt	36494 <init_disassemble_info@@Base+0x3f4>
   36470:	ldr	w8, [x6, #4]
   36474:	lsl	w0, w9, w0
   36478:	ldr	w6, [x1]
   3647c:	bic	w0, w2, w0
   36480:	lsr	w2, w2, w8
   36484:	lsl	w0, w0, w7
   36488:	orr	w0, w6, w0
   3648c:	str	w0, [x1]
   36490:	b	36434 <init_disassemble_info@@Base+0x394>
   36494:	stp	x29, x30, [sp, #-16]!
   36498:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   3649c:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   364a0:	mov	x29, sp
   364a4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   364a8:	add	x3, x3, #0x960
   364ac:	add	x1, x1, #0x288
   364b0:	add	x0, x0, #0x2a8
   364b4:	mov	w2, #0x169                 	// #361
   364b8:	bl	35ac0 <__assert_fail@plt>
   364bc:	nop
   364c0:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   364c4:	ubfiz	x0, x0, #3, #32
   364c8:	ldr	w7, [x2, #16]
   364cc:	ldr	x5, [x5, #3944]
   364d0:	add	x4, x0, x5
   364d4:	ldr	w6, [x0, x5]
   364d8:	ldr	w0, [x4, #4]
   364dc:	cmp	w6, #0x0
   364e0:	sub	w4, w0, #0x1
   364e4:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   364e8:	b.hi	365a0 <init_disassemble_info@@Base+0x500>  // b.pmore
   364ec:	add	w4, w6, w0
   364f0:	cmp	w4, #0x20
   364f4:	b.gt	365a0 <init_disassemble_info@@Base+0x500>
   364f8:	mov	w4, #0xffffffff            	// #-1
   364fc:	ldr	w8, [x3]
   36500:	lsl	w0, w4, w0
   36504:	bic	w0, w7, w0
   36508:	lsl	w0, w0, w6
   3650c:	orr	w0, w0, w8
   36510:	str	w0, [x3]
   36514:	ldr	w6, [x1]
   36518:	ldr	w8, [x2, #20]
   3651c:	lsl	x6, x6, #3
   36520:	add	x7, x6, x5
   36524:	ldr	w6, [x6, x5]
   36528:	ldr	w1, [x7, #4]
   3652c:	cmp	w6, #0x0
   36530:	add	w7, w1, w4
   36534:	ccmp	w7, #0x1e, #0x2, ge  // ge = tcont
   36538:	b.hi	365a0 <init_disassemble_info@@Base+0x500>  // b.pmore
   3653c:	add	w7, w6, w1
   36540:	cmp	w7, #0x20
   36544:	b.gt	365a0 <init_disassemble_info@@Base+0x500>
   36548:	ldr	w7, [x5, #848]
   3654c:	lsl	w1, w4, w1
   36550:	ldr	w5, [x5, #852]
   36554:	bic	w1, w8, w1
   36558:	cmp	w7, #0x0
   3655c:	lsl	w1, w1, w6
   36560:	orr	w1, w1, w0
   36564:	add	w0, w5, w4
   36568:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   3656c:	ldr	x0, [x2, #40]
   36570:	str	w1, [x3]
   36574:	b.hi	365a0 <init_disassemble_info@@Base+0x500>  // b.pmore
   36578:	add	w2, w7, w5
   3657c:	cmp	w2, #0x20
   36580:	b.gt	365a0 <init_disassemble_info@@Base+0x500>
   36584:	lsl	w4, w4, w5
   36588:	bic	w4, w0, w4
   3658c:	mov	w0, #0x1                   	// #1
   36590:	lsl	w4, w4, w7
   36594:	orr	w1, w4, w1
   36598:	str	w1, [x3]
   3659c:	ret
   365a0:	stp	x29, x30, [sp, #-16]!
   365a4:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   365a8:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   365ac:	mov	x29, sp
   365b0:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   365b4:	add	x3, x3, #0x960
   365b8:	add	x1, x1, #0x288
   365bc:	add	x0, x0, #0x2a8
   365c0:	mov	w2, #0x169                 	// #361
   365c4:	bl	35ac0 <__assert_fail@plt>

00000000000365c8 <aarch64_ins_regno@@Base>:
   365c8:	adrp	x3, a2000 <aarch64_operands@@Base+0x16bc0>
   365cc:	ldr	w0, [x0, #20]
   365d0:	ldr	w5, [x1, #16]
   365d4:	ldr	x3, [x3, #3944]
   365d8:	lsl	x0, x0, #3
   365dc:	add	x4, x0, x3
   365e0:	ldr	w3, [x0, x3]
   365e4:	ldr	w0, [x4, #4]
   365e8:	cmp	w3, #0x0
   365ec:	sub	w4, w0, #0x1
   365f0:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   365f4:	b.hi	36628 <aarch64_ins_regno@@Base+0x60>  // b.pmore
   365f8:	add	w1, w3, w0
   365fc:	cmp	w1, #0x20
   36600:	b.gt	36628 <aarch64_ins_regno@@Base+0x60>
   36604:	mov	w1, #0xffffffff            	// #-1
   36608:	ldr	w4, [x2]
   3660c:	lsl	w1, w1, w0
   36610:	bic	w1, w5, w1
   36614:	mov	w0, #0x1                   	// #1
   36618:	lsl	w1, w1, w3
   3661c:	orr	w1, w4, w1
   36620:	str	w1, [x2]
   36624:	ret
   36628:	stp	x29, x30, [sp, #-16]!
   3662c:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   36630:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   36634:	mov	x29, sp
   36638:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3663c:	add	x3, x3, #0x960
   36640:	add	x1, x1, #0x288
   36644:	add	x0, x0, #0x2a8
   36648:	mov	w2, #0x169                 	// #361
   3664c:	bl	35ac0 <__assert_fail@plt>

0000000000036650 <aarch64_ins_reglane@@Base>:
   36650:	stp	x29, x30, [sp, #-16]!
   36654:	adrp	x8, a2000 <aarch64_operands@@Base+0x16bc0>
   36658:	mov	x29, sp
   3665c:	ldr	w4, [x0, #20]
   36660:	mov	x0, x2
   36664:	ldr	x9, [x8, #3944]
   36668:	lsl	x4, x4, #3
   3666c:	ldr	w10, [x1, #16]
   36670:	add	x2, x4, x9
   36674:	ldr	x6, [x3, #8]
   36678:	ldr	w4, [x4, x9]
   3667c:	ldr	w3, [x2, #4]
   36680:	cmp	w4, #0x0
   36684:	ldr	w5, [x6, #12]
   36688:	sub	w2, w3, #0x1
   3668c:	ccmp	w2, #0x1e, #0x2, ge  // ge = tcont
   36690:	b.hi	36928 <aarch64_ins_reglane@@Base+0x2d8>  // b.pmore
   36694:	add	w2, w4, w3
   36698:	cmp	w2, #0x20
   3669c:	b.gt	36928 <aarch64_ins_reglane@@Base+0x2d8>
   366a0:	mov	w7, #0xffffffff            	// #-1
   366a4:	ldr	w2, [x0]
   366a8:	lsl	w3, w7, w3
   366ac:	bic	w3, w10, w3
   366b0:	lsl	w3, w3, w4
   366b4:	bic	w3, w3, w5
   366b8:	orr	w3, w3, w2
   366bc:	str	w3, [x0]
   366c0:	ldr	w2, [x6, #16]
   366c4:	cmp	w2, #0x17
   366c8:	ccmp	w2, #0xa, #0x4, ne  // ne = any
   366cc:	b.eq	36734 <aarch64_ins_reglane@@Base+0xe4>  // b.none
   366d0:	cmp	w2, #0x5d
   366d4:	ldr	x4, [x1, #24]
   366d8:	b.eq	3689c <aarch64_ins_reglane@@Base+0x24c>  // b.none
   366dc:	cmp	w2, #0x5b
   366e0:	b.eq	368dc <aarch64_ins_reglane@@Base+0x28c>  // b.none
   366e4:	ldr	w2, [x6, #20]
   366e8:	lsl	w7, w4, #1
   366ec:	ldrb	w1, [x1, #4]
   366f0:	cmp	w2, #0x50
   366f4:	csel	w5, w7, w4, eq  // eq = none
   366f8:	cmp	w1, #0x7
   366fc:	b.eq	36870 <aarch64_ins_reglane@@Base+0x220>  // b.none
   36700:	cmp	w1, #0x8
   36704:	b.eq	367d8 <aarch64_ins_reglane@@Base+0x188>  // b.none
   36708:	cmp	w1, #0x6
   3670c:	b.eq	367b0 <aarch64_ins_reglane@@Base+0x160>  // b.none
   36710:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   36714:	add	x3, x3, #0x960
   36718:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3671c:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   36720:	add	x3, x3, #0x70
   36724:	add	x1, x1, #0x330
   36728:	add	x0, x0, #0x4b0
   3672c:	mov	w2, #0xb1                  	// #177
   36730:	bl	35ac0 <__assert_fail@plt>
   36734:	ldrb	w2, [x1, #4]
   36738:	ldr	w4, [x1]
   3673c:	sub	w5, w2, #0x5
   36740:	cmp	w4, #0x20
   36744:	b.ne	36754 <aarch64_ins_reglane@@Base+0x104>  // b.any
   36748:	ldr	w2, [x6, #32]
   3674c:	cmp	w2, #0x1f
   36750:	b.eq	36820 <aarch64_ins_reglane@@Base+0x1d0>  // b.none
   36754:	ldr	x2, [x8, #3944]
   36758:	ldr	x4, [x1, #24]
   3675c:	ldr	w6, [x2, #344]
   36760:	ldr	w7, [x2, #348]
   36764:	lsl	x2, x4, #1
   36768:	cmp	w6, #0x0
   3676c:	orr	x2, x2, #0x1
   36770:	sub	w1, w7, #0x1
   36774:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   36778:	lsl	x2, x2, x5
   3677c:	b.hi	36948 <aarch64_ins_reglane@@Base+0x2f8>  // b.pmore
   36780:	add	w1, w6, w7
   36784:	cmp	w1, #0x20
   36788:	b.gt	36948 <aarch64_ins_reglane@@Base+0x2f8>
   3678c:	mov	w1, #0xffffffff            	// #-1
   36790:	lsl	w1, w1, w7
   36794:	bic	w1, w2, w1
   36798:	lsl	w1, w1, w6
   3679c:	orr	w3, w1, w3
   367a0:	str	w3, [x0]
   367a4:	mov	w0, #0x1                   	// #1
   367a8:	ldp	x29, x30, [sp], #16
   367ac:	ret
   367b0:	cmp	w5, #0x7
   367b4:	b.hi	369b8 <aarch64_ins_reglane@@Base+0x368>  // b.pmore
   367b8:	mov	w1, w5
   367bc:	mov	w6, #0x3d                  	// #61
   367c0:	mov	w5, #0x3e                  	// #62
   367c4:	mov	w4, #0x3f                  	// #63
   367c8:	mov	w3, #0x3                   	// #3
   367cc:	mov	w2, #0x0                   	// #0
   367d0:	bl	36250 <init_disassemble_info@@Base+0x1b0>
   367d4:	b	367a4 <aarch64_ins_reglane@@Base+0x154>
   367d8:	cmp	w5, #0x1
   367dc:	b.hi	36970 <aarch64_ins_reglane@@Base+0x320>  // b.pmore
   367e0:	ldr	w2, [x9, #488]
   367e4:	ldr	w4, [x9, #492]
   367e8:	cmp	w2, #0x0
   367ec:	sub	w1, w4, #0x1
   367f0:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   367f4:	b.hi	36948 <aarch64_ins_reglane@@Base+0x2f8>  // b.pmore
   367f8:	add	w1, w2, w4
   367fc:	cmp	w1, #0x20
   36800:	b.gt	36948 <aarch64_ins_reglane@@Base+0x2f8>
   36804:	mov	w1, #0xffffffff            	// #-1
   36808:	lsl	w1, w1, w4
   3680c:	bic	w1, w5, w1
   36810:	lsl	w1, w1, w2
   36814:	orr	w3, w1, w3
   36818:	str	w3, [x0]
   3681c:	b	367a4 <aarch64_ins_reglane@@Base+0x154>
   36820:	ldr	w2, [x1, #8]
   36824:	cmp	w2, #0x1
   36828:	b.ne	36a00 <aarch64_ins_reglane@@Base+0x3b0>  // b.any
   3682c:	ldr	x2, [x1, #24]
   36830:	ldr	w4, [x9, #320]
   36834:	ldr	w1, [x9, #324]
   36838:	cmp	w4, #0x0
   3683c:	lsl	x2, x2, x5
   36840:	sub	w5, w1, #0x1
   36844:	ccmp	w5, #0x1e, #0x2, ge  // ge = tcont
   36848:	b.hi	36948 <aarch64_ins_reglane@@Base+0x2f8>  // b.pmore
   3684c:	add	w5, w4, w1
   36850:	cmp	w5, #0x20
   36854:	b.gt	36948 <aarch64_ins_reglane@@Base+0x2f8>
   36858:	lsl	w1, w7, w1
   3685c:	bic	w1, w2, w1
   36860:	lsl	w1, w1, w4
   36864:	orr	w3, w1, w3
   36868:	str	w3, [x0]
   3686c:	b	367a4 <aarch64_ins_reglane@@Base+0x154>
   36870:	mov	w1, w5
   36874:	cmp	w5, #0x3
   36878:	b.hi	369dc <aarch64_ins_reglane@@Base+0x38c>  // b.pmore
   3687c:	mov	w5, #0x3d                  	// #61
   36880:	mov	w4, #0x3e                  	// #62
   36884:	mov	w3, #0x2                   	// #2
   36888:	mov	w2, #0x0                   	// #0
   3688c:	bl	36250 <init_disassemble_info@@Base+0x1b0>
   36890:	mov	w0, #0x1                   	// #1
   36894:	ldp	x29, x30, [sp], #16
   36898:	ret
   3689c:	ldrb	w1, [x1, #4]
   368a0:	sub	w1, w1, #0xa
   368a4:	cmp	w1, #0x1
   368a8:	b.hi	3694c <aarch64_ins_reglane@@Base+0x2fc>  // b.pmore
   368ac:	mov	w1, w4
   368b0:	cmp	w4, #0x3
   368b4:	b.ls	3687c <aarch64_ins_reglane@@Base+0x22c>  // b.plast
   368b8:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   368bc:	add	x3, x3, #0x960
   368c0:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   368c4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   368c8:	add	x3, x3, #0x70
   368cc:	add	x1, x1, #0x330
   368d0:	add	x0, x0, #0x3a8
   368d4:	mov	w2, #0x87                  	// #135
   368d8:	bl	35ac0 <__assert_fail@plt>
   368dc:	cmp	w4, #0x3
   368e0:	b.hi	36994 <aarch64_ins_reglane@@Base+0x344>  // b.pmore
   368e4:	ldr	w1, [x9, #992]
   368e8:	ldr	w2, [x9, #996]
   368ec:	cmp	w1, #0x0
   368f0:	sub	w5, w2, #0x1
   368f4:	ccmp	w5, #0x1e, #0x2, ge  // ge = tcont
   368f8:	b.hi	36948 <aarch64_ins_reglane@@Base+0x2f8>  // b.pmore
   368fc:	add	w5, w1, w2
   36900:	cmp	w5, #0x20
   36904:	b.gt	36948 <aarch64_ins_reglane@@Base+0x2f8>
   36908:	lsl	w7, w7, w2
   3690c:	bic	w7, w4, w7
   36910:	lsl	w7, w7, w1
   36914:	orr	w3, w7, w3
   36918:	str	w3, [x0]
   3691c:	mov	w0, #0x1                   	// #1
   36920:	ldp	x29, x30, [sp], #16
   36924:	ret
   36928:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   3692c:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   36930:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   36934:	add	x3, x3, #0x960
   36938:	add	x1, x1, #0x288
   3693c:	add	x0, x0, #0x2a8
   36940:	mov	w2, #0x169                 	// #361
   36944:	bl	35ac0 <__assert_fail@plt>
   36948:	bl	361c8 <init_disassemble_info@@Base+0x128>
   3694c:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   36950:	add	x3, x3, #0x960
   36954:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   36958:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   3695c:	add	x3, x3, #0x70
   36960:	add	x1, x1, #0x330
   36964:	add	x0, x0, #0x4b0
   36968:	mov	w2, #0x8b                  	// #139
   3696c:	bl	35ac0 <__assert_fail@plt>
   36970:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   36974:	add	x3, x3, #0x960
   36978:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3697c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   36980:	add	x3, x3, #0x70
   36984:	add	x1, x1, #0x330
   36988:	add	x0, x0, #0x3d8
   3698c:	mov	w2, #0xad                  	// #173
   36990:	bl	35ac0 <__assert_fail@plt>
   36994:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   36998:	add	x3, x3, #0x960
   3699c:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   369a0:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   369a4:	add	x3, x3, #0x70
   369a8:	add	x1, x1, #0x330
   369ac:	add	x0, x0, #0x3a8
   369b0:	mov	w2, #0x92                  	// #146
   369b4:	bl	35ac0 <__assert_fail@plt>
   369b8:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   369bc:	add	x3, x3, #0x960
   369c0:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   369c4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   369c8:	add	x3, x3, #0x70
   369cc:	add	x1, x1, #0x330
   369d0:	add	x0, x0, #0x3c0
   369d4:	mov	w2, #0xa3                  	// #163
   369d8:	bl	35ac0 <__assert_fail@plt>
   369dc:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   369e0:	add	x3, x3, #0x960
   369e4:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   369e8:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   369ec:	add	x3, x3, #0x70
   369f0:	add	x1, x1, #0x330
   369f4:	add	x0, x0, #0x3a8
   369f8:	mov	w2, #0xa8                  	// #168
   369fc:	bl	35ac0 <__assert_fail@plt>
   36a00:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   36a04:	add	x3, x3, #0x960
   36a08:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   36a0c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   36a10:	add	x3, x3, #0x70
   36a14:	add	x1, x1, #0x330
   36a18:	add	x0, x0, #0x398
   36a1c:	mov	w2, #0x6e                  	// #110
   36a20:	bl	35ac0 <__assert_fail@plt>
   36a24:	nop

0000000000036a28 <aarch64_ins_reglist@@Base>:
   36a28:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   36a2c:	ldr	w4, [x0, #20]
   36a30:	ldrb	w3, [x1, #16]
   36a34:	ldr	x5, [x5, #3944]
   36a38:	lsl	x4, x4, #3
   36a3c:	and	w6, w3, #0x1f
   36a40:	add	x0, x4, x5
   36a44:	ldr	w7, [x4, x5]
   36a48:	ldr	w0, [x0, #4]
   36a4c:	cmp	w7, #0x0
   36a50:	sub	w3, w0, #0x1
   36a54:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   36a58:	b.hi	36acc <aarch64_ins_reglist@@Base+0xa4>  // b.pmore
   36a5c:	add	w3, w7, w0
   36a60:	cmp	w3, #0x20
   36a64:	b.gt	36acc <aarch64_ins_reglist@@Base+0xa4>
   36a68:	mov	w4, #0xffffffff            	// #-1
   36a6c:	ldr	w8, [x2]
   36a70:	lsl	w3, w4, w0
   36a74:	bic	w3, w6, w3
   36a78:	ldp	w6, w5, [x5, #216]
   36a7c:	lsl	w3, w3, w7
   36a80:	orr	w3, w3, w8
   36a84:	str	w3, [x2]
   36a88:	cmp	w6, #0x0
   36a8c:	ldrb	w0, [x1, #16]
   36a90:	add	w1, w5, w4
   36a94:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   36a98:	ubfx	x0, x0, #5, #3
   36a9c:	add	w0, w0, w4
   36aa0:	b.hi	36acc <aarch64_ins_reglist@@Base+0xa4>  // b.pmore
   36aa4:	add	w1, w6, w5
   36aa8:	cmp	w1, #0x20
   36aac:	b.gt	36acc <aarch64_ins_reglist@@Base+0xa4>
   36ab0:	lsl	w4, w4, w5
   36ab4:	bic	w4, w0, w4
   36ab8:	mov	w0, #0x1                   	// #1
   36abc:	lsl	w4, w4, w6
   36ac0:	orr	w3, w4, w3
   36ac4:	str	w3, [x2]
   36ac8:	ret
   36acc:	stp	x29, x30, [sp, #-16]!
   36ad0:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   36ad4:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   36ad8:	mov	x29, sp
   36adc:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   36ae0:	add	x3, x3, #0x960
   36ae4:	add	x1, x1, #0x288
   36ae8:	add	x0, x0, #0x2a8
   36aec:	mov	w2, #0x169                 	// #361
   36af0:	bl	35ac0 <__assert_fail@plt>
   36af4:	nop

0000000000036af8 <aarch64_ins_ldst_reglist@@Base>:
   36af8:	stp	x29, x30, [sp, #-16]!
   36afc:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   36b00:	mov	x29, sp
   36b04:	ldr	x0, [x4, #3944]
   36b08:	ldr	x3, [x3, #8]
   36b0c:	ldp	w6, w7, [x0, #96]
   36b10:	ldr	x0, [x3, #120]
   36b14:	cmp	w6, #0x0
   36b18:	sub	w3, w7, #0x1
   36b1c:	ldrb	w5, [x1, #16]
   36b20:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   36b24:	lsr	x8, x0, #24
   36b28:	ubfx	w0, w0, #24, #3
   36b2c:	b.hi	36c3c <aarch64_ins_ldst_reglist@@Base+0x144>  // b.pmore
   36b30:	add	w3, w6, w7
   36b34:	cmp	w3, #0x20
   36b38:	b.gt	36c3c <aarch64_ins_ldst_reglist@@Base+0x144>
   36b3c:	and	w5, w5, #0x1f
   36b40:	mov	w3, #0xffffffff            	// #-1
   36b44:	ldr	w9, [x2]
   36b48:	lsl	w3, w3, w7
   36b4c:	bic	w3, w5, w3
   36b50:	cmp	w0, #0x3
   36b54:	lsl	w3, w3, w6
   36b58:	orr	w3, w3, w9
   36b5c:	str	w3, [x2]
   36b60:	b.eq	36c34 <aarch64_ins_ldst_reglist@@Base+0x13c>  // b.none
   36b64:	tbnz	w8, #2, 36bd8 <aarch64_ins_ldst_reglist@@Base+0xe0>
   36b68:	cmp	w0, #0x1
   36b6c:	b.eq	36c08 <aarch64_ins_ldst_reglist@@Base+0x110>  // b.none
   36b70:	cmp	w0, #0x2
   36b74:	b.ne	36be4 <aarch64_ins_ldst_reglist@@Base+0xec>  // b.any
   36b78:	ldrb	w0, [x1, #16]
   36b7c:	mov	w6, #0x8                   	// #8
   36b80:	mov	w1, #0x3                   	// #3
   36b84:	and	w0, w0, #0xe0
   36b88:	cmp	w0, #0x80
   36b8c:	csel	w6, w1, w6, eq  // eq = none
   36b90:	ldr	x4, [x4, #3944]
   36b94:	ldp	w5, w4, [x4, #192]
   36b98:	cmp	w5, #0x0
   36b9c:	sub	w0, w4, #0x1
   36ba0:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   36ba4:	b.hi	36c3c <aarch64_ins_ldst_reglist@@Base+0x144>  // b.pmore
   36ba8:	add	w0, w5, w4
   36bac:	cmp	w0, #0x20
   36bb0:	b.gt	36c3c <aarch64_ins_ldst_reglist@@Base+0x144>
   36bb4:	mov	w1, #0xffffffff            	// #-1
   36bb8:	mov	w0, #0x1                   	// #1
   36bbc:	lsl	w1, w1, w4
   36bc0:	bic	w1, w6, w1
   36bc4:	lsl	w1, w1, w5
   36bc8:	orr	w3, w1, w3
   36bcc:	str	w3, [x2]
   36bd0:	ldp	x29, x30, [sp], #16
   36bd4:	ret
   36bd8:	cmp	w0, #0x4
   36bdc:	mov	w6, #0x0                   	// #0
   36be0:	b.eq	36b90 <aarch64_ins_ldst_reglist@@Base+0x98>  // b.none
   36be4:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   36be8:	add	x3, x3, #0x960
   36bec:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   36bf0:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   36bf4:	add	x3, x3, #0x98
   36bf8:	add	x1, x1, #0x330
   36bfc:	add	x0, x0, #0x4b0
   36c00:	mov	w2, #0xea                  	// #234
   36c04:	bl	35ac0 <__assert_fail@plt>
   36c08:	ldrb	w0, [x1, #16]
   36c0c:	ubfx	x0, x0, #5, #3
   36c10:	sub	w0, w0, #0x1
   36c14:	and	w0, w0, #0xff
   36c18:	cmp	w0, #0x3
   36c1c:	b.hi	36c5c <aarch64_ins_ldst_reglist@@Base+0x164>  // b.pmore
   36c20:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   36c24:	add	x1, x1, #0x960
   36c28:	add	x0, x1, w0, uxtb #2
   36c2c:	ldr	w6, [x0, #136]
   36c30:	b	36b90 <aarch64_ins_ldst_reglist@@Base+0x98>
   36c34:	mov	w6, #0x4                   	// #4
   36c38:	b	36b90 <aarch64_ins_ldst_reglist@@Base+0x98>
   36c3c:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   36c40:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   36c44:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   36c48:	add	x3, x3, #0x960
   36c4c:	add	x1, x1, #0x288
   36c50:	add	x0, x0, #0x2a8
   36c54:	mov	w2, #0x169                 	// #361
   36c58:	bl	35ac0 <__assert_fail@plt>
   36c5c:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   36c60:	add	x3, x3, #0x960
   36c64:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   36c68:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   36c6c:	add	x3, x3, #0x98
   36c70:	add	x1, x1, #0x330
   36c74:	add	x0, x0, #0x4b0
   36c78:	mov	w2, #0xdd                  	// #221
   36c7c:	bl	35ac0 <__assert_fail@plt>

0000000000036c80 <aarch64_ins_ldst_reglist_r@@Base>:
   36c80:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   36c84:	ldrb	w5, [x1, #16]
   36c88:	ldr	x3, [x3, #8]
   36c8c:	ldr	x4, [x0, #3944]
   36c90:	ldp	w6, w7, [x4, #96]
   36c94:	ldr	x4, [x3, #120]
   36c98:	cmp	w6, #0x0
   36c9c:	sub	w3, w7, #0x1
   36ca0:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   36ca4:	ubfx	w4, w4, #24, #3
   36ca8:	b.hi	36d38 <aarch64_ins_ldst_reglist_r@@Base+0xb8>  // b.pmore
   36cac:	add	w3, w6, w7
   36cb0:	cmp	w3, #0x20
   36cb4:	b.gt	36d38 <aarch64_ins_ldst_reglist_r@@Base+0xb8>
   36cb8:	and	w5, w5, #0x1f
   36cbc:	mov	w3, #0xffffffff            	// #-1
   36cc0:	ldr	w8, [x2]
   36cc4:	lsl	w3, w3, w7
   36cc8:	bic	w3, w5, w3
   36ccc:	cmp	w4, #0x1
   36cd0:	mov	w7, #0x0                   	// #0
   36cd4:	lsl	w3, w3, w6
   36cd8:	orr	w3, w3, w8
   36cdc:	str	w3, [x2]
   36ce0:	b.ne	36cf4 <aarch64_ins_ldst_reglist_r@@Base+0x74>  // b.any
   36ce4:	ldrb	w1, [x1, #16]
   36ce8:	and	w1, w1, #0xe0
   36cec:	cmp	w1, #0x40
   36cf0:	cset	w7, eq  // eq = none
   36cf4:	ldr	x0, [x0, #3944]
   36cf8:	ldp	w4, w5, [x0, #248]
   36cfc:	cmp	w4, #0x0
   36d00:	sub	w0, w5, #0x1
   36d04:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   36d08:	b.hi	36d38 <aarch64_ins_ldst_reglist_r@@Base+0xb8>  // b.pmore
   36d0c:	add	w0, w4, w5
   36d10:	cmp	w0, #0x20
   36d14:	b.gt	36d38 <aarch64_ins_ldst_reglist_r@@Base+0xb8>
   36d18:	mov	w1, #0xffffffff            	// #-1
   36d1c:	mov	w0, #0x1                   	// #1
   36d20:	lsl	w1, w1, w5
   36d24:	bic	w1, w7, w1
   36d28:	lsl	w1, w1, w4
   36d2c:	orr	w3, w1, w3
   36d30:	str	w3, [x2]
   36d34:	ret
   36d38:	stp	x29, x30, [sp, #-16]!
   36d3c:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   36d40:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   36d44:	mov	x29, sp
   36d48:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   36d4c:	add	x3, x3, #0x960
   36d50:	add	x1, x1, #0x288
   36d54:	add	x0, x0, #0x2a8
   36d58:	mov	w2, #0x169                 	// #361
   36d5c:	bl	35ac0 <__assert_fail@plt>

0000000000036d60 <aarch64_ins_ldst_elemlist@@Base>:
   36d60:	stp	x29, x30, [sp, #-48]!
   36d64:	mov	x29, sp
   36d68:	ldrb	w0, [x1, #17]
   36d6c:	stp	x19, x20, [sp, #16]
   36d70:	str	x21, [sp, #32]
   36d74:	tbz	w0, #0, 36ef0 <aarch64_ins_ldst_elemlist@@Base+0x190>
   36d78:	adrp	x20, a2000 <aarch64_operands@@Base+0x16bc0>
   36d7c:	ldrb	w0, [x1, #16]
   36d80:	mov	x19, x2
   36d84:	ldr	x21, [x20, #3944]
   36d88:	and	w2, w0, #0x1f
   36d8c:	ldp	w3, w4, [x21, #96]
   36d90:	cmp	w3, #0x0
   36d94:	sub	w0, w4, #0x1
   36d98:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   36d9c:	b.hi	36e9c <aarch64_ins_ldst_elemlist@@Base+0x13c>  // b.pmore
   36da0:	add	w0, w3, w4
   36da4:	cmp	w0, #0x20
   36da8:	b.gt	36e9c <aarch64_ins_ldst_elemlist@@Base+0x13c>
   36dac:	mov	w0, #0xffffffff            	// #-1
   36db0:	ldr	w5, [x19]
   36db4:	lsl	w0, w0, w4
   36db8:	bic	w0, w2, w0
   36dbc:	lsl	w0, w0, w3
   36dc0:	orr	w0, w5, w0
   36dc4:	str	w0, [x19]
   36dc8:	ldrb	w0, [x1, #4]
   36dcc:	cmp	w0, #0x7
   36dd0:	b.eq	36ebc <aarch64_ins_ldst_elemlist@@Base+0x15c>  // b.none
   36dd4:	b.hi	36e54 <aarch64_ins_ldst_elemlist@@Base+0xf4>  // b.pmore
   36dd8:	cmp	w0, #0x5
   36ddc:	b.eq	36e70 <aarch64_ins_ldst_elemlist@@Base+0x110>  // b.none
   36de0:	cmp	w0, #0x6
   36de4:	b.ne	36ecc <aarch64_ins_ldst_elemlist@@Base+0x16c>  // b.any
   36de8:	ldr	x1, [x1, #24]
   36dec:	mov	w21, #0x1                   	// #1
   36df0:	lsl	w1, w1, #1
   36df4:	mov	x0, x19
   36df8:	mov	w6, #0xb                   	// #11
   36dfc:	mov	w5, #0x1f                  	// #31
   36e00:	mov	w4, #0x9                   	// #9
   36e04:	mov	w3, #0x3                   	// #3
   36e08:	mov	w2, #0x0                   	// #0
   36e0c:	bl	36250 <init_disassemble_info@@Base+0x1b0>
   36e10:	ldr	x20, [x20, #3944]
   36e14:	ldr	w0, [x20, #212]
   36e18:	cmp	w0, #0x2
   36e1c:	b.le	36e9c <aarch64_ins_ldst_elemlist@@Base+0x13c>
   36e20:	ldr	w1, [x20, #208]
   36e24:	add	w1, w1, #0x1
   36e28:	cmp	w1, #0x1e
   36e2c:	b.hi	36e9c <aarch64_ins_ldst_elemlist@@Base+0x13c>  // b.pmore
   36e30:	ldr	w0, [x19]
   36e34:	lsl	w1, w21, w1
   36e38:	ldr	x21, [sp, #32]
   36e3c:	orr	w0, w0, w1
   36e40:	str	w0, [x19]
   36e44:	mov	w0, #0x1                   	// #1
   36e48:	ldp	x19, x20, [sp, #16]
   36e4c:	ldp	x29, x30, [sp], #48
   36e50:	ret
   36e54:	cmp	w0, #0x8
   36e58:	b.ne	36ecc <aarch64_ins_ldst_elemlist@@Base+0x16c>  // b.any
   36e5c:	ldr	x1, [x1, #24]
   36e60:	mov	w21, #0x2                   	// #2
   36e64:	lsl	x1, x1, #3
   36e68:	orr	w1, w1, #0x1
   36e6c:	b	36df4 <aarch64_ins_ldst_elemlist@@Base+0x94>
   36e70:	ldr	w1, [x1, #24]
   36e74:	mov	x0, x19
   36e78:	mov	w6, #0xb                   	// #11
   36e7c:	mov	w5, #0x1f                  	// #31
   36e80:	mov	w4, #0x9                   	// #9
   36e84:	mov	w3, #0x3                   	// #3
   36e88:	mov	w2, #0x0                   	// #0
   36e8c:	bl	36250 <init_disassemble_info@@Base+0x1b0>
   36e90:	ldr	w0, [x21, #212]
   36e94:	cmp	w0, #0x2
   36e98:	b.gt	36f14 <aarch64_ins_ldst_elemlist@@Base+0x1b4>
   36e9c:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   36ea0:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   36ea4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   36ea8:	add	x3, x3, #0x960
   36eac:	add	x1, x1, #0x288
   36eb0:	add	x0, x0, #0x2a8
   36eb4:	mov	w2, #0x169                 	// #361
   36eb8:	bl	35ac0 <__assert_fail@plt>
   36ebc:	ldr	x1, [x1, #24]
   36ec0:	mov	w21, #0x2                   	// #2
   36ec4:	lsl	w1, w1, #2
   36ec8:	b	36df4 <aarch64_ins_ldst_elemlist@@Base+0x94>
   36ecc:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   36ed0:	add	x3, x3, #0x960
   36ed4:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   36ed8:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   36edc:	add	x3, x3, #0xb8
   36ee0:	add	x1, x1, #0x330
   36ee4:	add	x0, x0, #0x4b0
   36ee8:	mov	w2, #0x133                 	// #307
   36eec:	bl	35ac0 <__assert_fail@plt>
   36ef0:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   36ef4:	add	x3, x3, #0x960
   36ef8:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   36efc:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   36f00:	add	x3, x3, #0xb8
   36f04:	add	x1, x1, #0x330
   36f08:	add	x0, x0, #0x3f0
   36f0c:	mov	w2, #0x117                 	// #279
   36f10:	bl	35ac0 <__assert_fail@plt>
   36f14:	ldr	w1, [x21, #208]
   36f18:	mov	w21, #0x0                   	// #0
   36f1c:	add	w1, w1, #0x1
   36f20:	b	36e28 <aarch64_ins_ldst_elemlist@@Base+0xc8>
   36f24:	nop

0000000000036f28 <aarch64_ins_advsimd_imm_shift@@Base>:
   36f28:	stp	x29, x30, [sp, #-48]!
   36f2c:	mov	x29, sp
   36f30:	stp	x19, x20, [sp, #16]
   36f34:	mov	x20, x3
   36f38:	mov	x19, x1
   36f3c:	str	x21, [sp, #32]
   36f40:	mov	x21, x2
   36f44:	ldrb	w0, [x1, #4]
   36f48:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   36f4c:	ldr	x1, [x20, #8]
   36f50:	ldr	w3, [x1, #16]
   36f54:	cmp	w3, #0xe
   36f58:	b.eq	36fc0 <aarch64_ins_advsimd_imm_shift@@Base+0x98>  // b.none
   36f5c:	ldr	w1, [x19]
   36f60:	sub	w2, w1, #0x2b
   36f64:	cmp	w2, #0x1
   36f68:	b.hi	37018 <aarch64_ins_advsimd_imm_shift@@Base+0xf0>  // b.pmore
   36f6c:	cmp	w1, #0x2c
   36f70:	ldr	x1, [x19, #16]
   36f74:	b.eq	36fb0 <aarch64_ins_advsimd_imm_shift@@Base+0x88>  // b.none
   36f78:	mov	w3, #0x8                   	// #8
   36f7c:	lsl	w0, w3, w0
   36f80:	add	w1, w0, w1
   36f84:	mov	x0, x21
   36f88:	mov	w5, #0x36                  	// #54
   36f8c:	mov	w4, #0x35                  	// #53
   36f90:	mov	w3, #0x2                   	// #2
   36f94:	mov	w2, #0x0                   	// #0
   36f98:	bl	36250 <init_disassemble_info@@Base+0x1b0>
   36f9c:	mov	w0, #0x1                   	// #1
   36fa0:	ldp	x19, x20, [sp, #16]
   36fa4:	ldr	x21, [sp, #32]
   36fa8:	ldp	x29, x30, [sp], #48
   36fac:	ret
   36fb0:	mov	w2, #0x10                  	// #16
   36fb4:	lsl	w0, w2, w0
   36fb8:	sub	w1, w0, w1
   36fbc:	b	36f84 <aarch64_ins_advsimd_imm_shift@@Base+0x5c>
   36fc0:	adrp	x2, a2000 <aarch64_operands@@Base+0x16bc0>
   36fc4:	ldr	w3, [x1, #12]
   36fc8:	ldr	x2, [x2, #3944]
   36fcc:	ldp	w4, w5, [x2, #88]
   36fd0:	cmp	w4, #0x0
   36fd4:	sub	w1, w5, #0x1
   36fd8:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   36fdc:	b.hi	3703c <aarch64_ins_advsimd_imm_shift@@Base+0x114>  // b.pmore
   36fe0:	add	w1, w4, w5
   36fe4:	cmp	w1, #0x20
   36fe8:	b.gt	3703c <aarch64_ins_advsimd_imm_shift@@Base+0x114>
   36fec:	mov	w1, #0xffffffff            	// #-1
   36ff0:	ldr	w2, [x21]
   36ff4:	lsl	w1, w1, w5
   36ff8:	bic	w1, w0, w1
   36ffc:	and	w1, w1, #0x1
   37000:	lsr	w0, w0, #1
   37004:	lsl	w1, w1, w4
   37008:	bic	w1, w1, w3
   3700c:	orr	w1, w2, w1
   37010:	str	w1, [x21]
   37014:	b	36f5c <aarch64_ins_advsimd_imm_shift@@Base+0x34>
   37018:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   3701c:	add	x3, x3, #0x960
   37020:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   37024:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   37028:	add	x3, x3, #0xd8
   3702c:	add	x1, x1, #0x330
   37030:	add	x0, x0, #0x408
   37034:	mov	w2, #0x15a                 	// #346
   37038:	bl	35ac0 <__assert_fail@plt>
   3703c:	bl	361c8 <init_disassemble_info@@Base+0x128>

0000000000037040 <aarch64_ins_imm@@Base>:
   37040:	mov	x3, x1
   37044:	stp	x29, x30, [sp, #-16]!
   37048:	mov	x1, x2
   3704c:	mov	x29, sp
   37050:	ldr	x2, [x3, #16]
   37054:	ldr	w3, [x0, #16]
   37058:	asr	x4, x2, #2
   3705c:	tst	x3, #0x8
   37060:	csel	x2, x4, x2, ne  // ne = any
   37064:	tst	x3, #0x200
   37068:	asr	x3, x2, #4
   3706c:	csel	x2, x3, x2, ne  // ne = any
   37070:	bl	36418 <init_disassemble_info@@Base+0x378>
   37074:	mov	w0, #0x1                   	// #1
   37078:	ldp	x29, x30, [sp], #16
   3707c:	ret

0000000000037080 <aarch64_ins_imm_half@@Base>:
   37080:	stp	x29, x30, [sp, #-32]!
   37084:	mov	x29, sp
   37088:	stp	x19, x20, [sp, #16]
   3708c:	mov	x20, x1
   37090:	mov	x19, x2
   37094:	bl	357e0 <aarch64_ins_imm@plt>
   37098:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   3709c:	ldr	x2, [x20, #40]
   370a0:	ldr	x0, [x0, #3944]
   370a4:	ldr	w3, [x0, #256]
   370a8:	ldr	w0, [x0, #260]
   370ac:	cmp	w3, #0x0
   370b0:	sub	w1, w0, #0x1
   370b4:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   370b8:	b.hi	370f8 <aarch64_ins_imm_half@@Base+0x78>  // b.pmore
   370bc:	add	w1, w3, w0
   370c0:	cmp	w1, #0x20
   370c4:	b.gt	370f8 <aarch64_ins_imm_half@@Base+0x78>
   370c8:	asr	x2, x2, #4
   370cc:	mov	w1, #0xffffffff            	// #-1
   370d0:	ldr	w4, [x19]
   370d4:	lsl	w1, w1, w0
   370d8:	bic	w1, w2, w1
   370dc:	mov	w0, #0x1                   	// #1
   370e0:	lsl	w1, w1, w3
   370e4:	orr	w1, w4, w1
   370e8:	str	w1, [x19]
   370ec:	ldp	x19, x20, [sp, #16]
   370f0:	ldp	x29, x30, [sp], #32
   370f4:	ret
   370f8:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   370fc:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   37100:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   37104:	add	x3, x3, #0x960
   37108:	add	x1, x1, #0x288
   3710c:	add	x0, x0, #0x2a8
   37110:	mov	w2, #0x169                 	// #361
   37114:	bl	35ac0 <__assert_fail@plt>

0000000000037118 <aarch64_ins_advsimd_imm_modified@@Base>:
   37118:	stp	x29, x30, [sp, #-64]!
   3711c:	mov	x29, sp
   37120:	ldrb	w0, [x1, #24]
   37124:	stp	x19, x20, [sp, #16]
   37128:	mov	x19, x2
   3712c:	ldr	w20, [x1, #32]
   37130:	stp	x21, x22, [sp, #32]
   37134:	ldr	x21, [x1, #16]
   37138:	ldr	x22, [x1, #40]
   3713c:	str	x23, [sp, #48]
   37140:	ldrb	w23, [x3, #28]
   37144:	tbnz	w0, #0, 3715c <aarch64_ins_advsimd_imm_modified@@Base+0x44>
   37148:	mov	w0, w23
   3714c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   37150:	and	w0, w0, #0xff
   37154:	cmp	w0, #0x8
   37158:	b.eq	3723c <aarch64_ins_advsimd_imm_modified@@Base+0x124>  // b.none
   3715c:	mov	w1, w21
   37160:	mov	x0, x19
   37164:	mov	w5, #0x4                   	// #4
   37168:	mov	w4, #0x3                   	// #3
   3716c:	mov	w3, #0x2                   	// #2
   37170:	mov	w2, #0x0                   	// #0
   37174:	bl	36250 <init_disassemble_info@@Base+0x1b0>
   37178:	cbz	w20, 371d8 <aarch64_ins_advsimd_imm_modified@@Base+0xc0>
   3717c:	and	w21, w20, #0xfffffffb
   37180:	cmp	w21, #0x1
   37184:	b.ne	37294 <aarch64_ins_advsimd_imm_modified@@Base+0x17c>  // b.any
   37188:	cmp	w20, #0x5
   3718c:	b.eq	371f0 <aarch64_ins_advsimd_imm_modified@@Base+0xd8>  // b.none
   37190:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   37194:	ldr	x0, [x0, #3944]
   37198:	ldr	w1, [x0, #204]
   3719c:	cmp	w1, #0x0
   371a0:	b.le	37238 <aarch64_ins_advsimd_imm_modified@@Base+0x120>
   371a4:	ldr	w2, [x0, #200]
   371a8:	asr	w22, w22, #4
   371ac:	tbnz	w2, #31, 37238 <aarch64_ins_advsimd_imm_modified@@Base+0x120>
   371b0:	add	w0, w2, w21
   371b4:	cmp	w0, #0x20
   371b8:	b.gt	37238 <aarch64_ins_advsimd_imm_modified@@Base+0x120>
   371bc:	mov	w0, #0xffffffff            	// #-1
   371c0:	ldr	w1, [x19]
   371c4:	lsl	w0, w0, w21
   371c8:	bic	w0, w22, w0
   371cc:	lsl	w0, w0, w2
   371d0:	orr	w0, w1, w0
   371d4:	str	w0, [x19]
   371d8:	mov	w0, #0x1                   	// #1
   371dc:	ldp	x19, x20, [sp, #16]
   371e0:	ldp	x21, x22, [sp, #32]
   371e4:	ldr	x23, [sp, #48]
   371e8:	ldp	x29, x30, [sp], #64
   371ec:	ret
   371f0:	mov	w0, w23
   371f4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   371f8:	and	w0, w0, #0xff
   371fc:	sub	w1, w0, #0x1
   37200:	and	w1, w1, #0xff
   37204:	cmp	w1, #0x1
   37208:	ccmp	w0, #0x4, #0x4, hi  // hi = pmore
   3720c:	b.ne	372b8 <aarch64_ins_advsimd_imm_modified@@Base+0x1a0>  // b.any
   37210:	cmp	w0, #0x1
   37214:	b.eq	371d8 <aarch64_ins_advsimd_imm_modified@@Base+0xc0>  // b.none
   37218:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3721c:	cmp	w0, #0x4
   37220:	asr	w22, w22, #3
   37224:	ldr	x0, [x1, #3944]
   37228:	ldr	w1, [x0, #204]
   3722c:	b.eq	3727c <aarch64_ins_advsimd_imm_modified@@Base+0x164>  // b.none
   37230:	cmp	w1, #0x1
   37234:	b.gt	37270 <aarch64_ins_advsimd_imm_modified@@Base+0x158>
   37238:	bl	361c8 <init_disassemble_info@@Base+0x128>
   3723c:	mov	x0, x21
   37240:	bl	35760 <aarch64_shrink_expanded_imm8@plt>
   37244:	sxtw	x21, w0
   37248:	tbz	w0, #31, 3715c <aarch64_ins_advsimd_imm_modified@@Base+0x44>
   3724c:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   37250:	add	x3, x3, #0x960
   37254:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   37258:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3725c:	add	x3, x3, #0xf8
   37260:	add	x1, x1, #0x330
   37264:	add	x0, x0, #0x458
   37268:	mov	w2, #0x1ae                 	// #430
   3726c:	bl	35ac0 <__assert_fail@plt>
   37270:	ldr	w0, [x0, #200]
   37274:	add	w2, w0, #0x1
   37278:	b	371ac <aarch64_ins_advsimd_imm_modified@@Base+0x94>
   3727c:	cmp	w1, #0x2
   37280:	b.le	37238 <aarch64_ins_advsimd_imm_modified@@Base+0x120>
   37284:	ldr	w0, [x0, #200]
   37288:	mov	w21, #0x2                   	// #2
   3728c:	add	w2, w0, #0x1
   37290:	b	371ac <aarch64_ins_advsimd_imm_modified@@Base+0x94>
   37294:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   37298:	add	x3, x3, #0x960
   3729c:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   372a0:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   372a4:	add	x3, x3, #0xf8
   372a8:	add	x1, x1, #0x330
   372ac:	add	x0, x0, #0x468
   372b0:	mov	w2, #0x1b6                 	// #438
   372b4:	bl	35ac0 <__assert_fail@plt>
   372b8:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   372bc:	add	x3, x3, #0x960
   372c0:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   372c4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   372c8:	add	x3, x3, #0xf8
   372cc:	add	x1, x1, #0x330
   372d0:	add	x0, x0, #0x4a0
   372d4:	mov	w2, #0x1bb                 	// #443
   372d8:	bl	35ac0 <__assert_fail@plt>
   372dc:	nop

00000000000372e0 <aarch64_ins_fpimm@@Base>:
   372e0:	mov	x3, x1
   372e4:	stp	x29, x30, [sp, #-16]!
   372e8:	mov	x1, x2
   372ec:	mov	x29, sp
   372f0:	ldr	w2, [x3, #16]
   372f4:	bl	36418 <init_disassemble_info@@Base+0x378>
   372f8:	mov	w0, #0x1                   	// #1
   372fc:	ldp	x29, x30, [sp], #16
   37300:	ret
   37304:	nop

0000000000037308 <aarch64_ins_imm_rotate1@@Base>:
   37308:	stp	x29, x30, [sp, #-16]!
   3730c:	mov	x4, #0x2d83                	// #11651
   37310:	movk	x4, #0x82d8, lsl #16
   37314:	mov	x29, sp
   37318:	ldr	x1, [x1, #16]
   3731c:	movk	x4, #0xd82d, lsl #32
   37320:	movk	x4, #0x2d82, lsl #48
   37324:	sub	x1, x1, #0x5a
   37328:	smulh	x4, x1, x4
   3732c:	asr	x4, x4, #5
   37330:	sub	x1, x4, x1, asr #63
   37334:	cmp	x1, #0x1
   37338:	b.hi	373c8 <aarch64_ins_imm_rotate1@@Base+0xc0>  // b.pmore
   3733c:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   37340:	ldr	w5, [x0, #20]
   37344:	ldr	x6, [x3, #8]
   37348:	ldr	x0, [x4, #3944]
   3734c:	lsl	x3, x5, #3
   37350:	ldr	w5, [x6, #12]
   37354:	add	x4, x3, x0
   37358:	ldr	w3, [x3, x0]
   3735c:	ldr	w4, [x4, #4]
   37360:	cmp	w3, #0x0
   37364:	sub	w0, w4, #0x1
   37368:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   3736c:	b.hi	373a8 <aarch64_ins_imm_rotate1@@Base+0xa0>  // b.pmore
   37370:	add	w0, w3, w4
   37374:	cmp	w0, #0x20
   37378:	b.gt	373a8 <aarch64_ins_imm_rotate1@@Base+0xa0>
   3737c:	mov	w0, #0xffffffff            	// #-1
   37380:	ldr	w6, [x2]
   37384:	lsl	w0, w0, w4
   37388:	bic	w1, w1, w0
   3738c:	mov	w0, #0x1                   	// #1
   37390:	lsl	w1, w1, w3
   37394:	bic	w1, w1, w5
   37398:	orr	w1, w6, w1
   3739c:	str	w1, [x2]
   373a0:	ldp	x29, x30, [sp], #16
   373a4:	ret
   373a8:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   373ac:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   373b0:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   373b4:	add	x3, x3, #0x960
   373b8:	add	x1, x1, #0x288
   373bc:	add	x0, x0, #0x2a8
   373c0:	mov	w2, #0x169                 	// #361
   373c4:	bl	35ac0 <__assert_fail@plt>
   373c8:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   373cc:	add	x3, x3, #0x960
   373d0:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   373d4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   373d8:	add	x3, x3, #0x120
   373dc:	add	x1, x1, #0x330
   373e0:	add	x0, x0, #0x4c8
   373e4:	mov	w2, #0x1e4                 	// #484
   373e8:	bl	35ac0 <__assert_fail@plt>
   373ec:	nop

00000000000373f0 <aarch64_ins_imm_rotate2@@Base>:
   373f0:	stp	x29, x30, [sp, #-16]!
   373f4:	mov	x4, #0x2d83                	// #11651
   373f8:	movk	x4, #0x82d8, lsl #16
   373fc:	mov	x29, sp
   37400:	ldr	x1, [x1, #16]
   37404:	movk	x4, #0xd82d, lsl #32
   37408:	movk	x4, #0x2d82, lsl #48
   3740c:	smulh	x4, x1, x4
   37410:	asr	x4, x4, #4
   37414:	sub	x4, x4, x1, asr #63
   37418:	cmp	x4, #0x3
   3741c:	b.hi	374ac <aarch64_ins_imm_rotate2@@Base+0xbc>  // b.pmore
   37420:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   37424:	ldr	w5, [x0, #20]
   37428:	ldr	x6, [x3, #8]
   3742c:	ldr	x0, [x1, #3944]
   37430:	lsl	x3, x5, #3
   37434:	ldr	w5, [x6, #12]
   37438:	add	x1, x3, x0
   3743c:	ldr	w3, [x3, x0]
   37440:	ldr	w0, [x1, #4]
   37444:	cmp	w3, #0x0
   37448:	sub	w1, w0, #0x1
   3744c:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   37450:	b.hi	3748c <aarch64_ins_imm_rotate2@@Base+0x9c>  // b.pmore
   37454:	add	w1, w3, w0
   37458:	cmp	w1, #0x20
   3745c:	b.gt	3748c <aarch64_ins_imm_rotate2@@Base+0x9c>
   37460:	mov	w1, #0xffffffff            	// #-1
   37464:	ldr	w6, [x2]
   37468:	lsl	w1, w1, w0
   3746c:	bic	w1, w4, w1
   37470:	mov	w0, #0x1                   	// #1
   37474:	lsl	w1, w1, w3
   37478:	bic	w1, w1, w5
   3747c:	orr	w1, w6, w1
   37480:	str	w1, [x2]
   37484:	ldp	x29, x30, [sp], #16
   37488:	ret
   3748c:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   37490:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   37494:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   37498:	add	x3, x3, #0x960
   3749c:	add	x1, x1, #0x288
   374a0:	add	x0, x0, #0x2a8
   374a4:	mov	w2, #0x169                 	// #361
   374a8:	bl	35ac0 <__assert_fail@plt>
   374ac:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   374b0:	add	x3, x3, #0x960
   374b4:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   374b8:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   374bc:	add	x3, x3, #0x138
   374c0:	add	x1, x1, #0x330
   374c4:	add	x0, x0, #0x4d8
   374c8:	mov	w2, #0x1f1                 	// #497
   374cc:	bl	35ac0 <__assert_fail@plt>

00000000000374d0 <aarch64_ins_fbits@@Base>:
   374d0:	adrp	x3, a2000 <aarch64_operands@@Base+0x16bc0>
   374d4:	ldr	w0, [x0, #20]
   374d8:	ldr	x1, [x1, #16]
   374dc:	mov	w4, #0x40                  	// #64
   374e0:	ldr	x3, [x3, #3944]
   374e4:	lsl	x0, x0, #3
   374e8:	sub	w4, w4, w1
   374ec:	add	x5, x0, x3
   374f0:	ldr	w3, [x0, x3]
   374f4:	ldr	w0, [x5, #4]
   374f8:	cmp	w3, #0x0
   374fc:	sub	w1, w0, #0x1
   37500:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   37504:	b.hi	37538 <aarch64_ins_fbits@@Base+0x68>  // b.pmore
   37508:	add	w1, w3, w0
   3750c:	cmp	w1, #0x20
   37510:	b.gt	37538 <aarch64_ins_fbits@@Base+0x68>
   37514:	mov	w1, #0xffffffff            	// #-1
   37518:	ldr	w5, [x2]
   3751c:	lsl	w1, w1, w0
   37520:	bic	w1, w4, w1
   37524:	mov	w0, #0x1                   	// #1
   37528:	lsl	w1, w1, w3
   3752c:	orr	w1, w5, w1
   37530:	str	w1, [x2]
   37534:	ret
   37538:	stp	x29, x30, [sp, #-16]!
   3753c:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   37540:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   37544:	mov	x29, sp
   37548:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3754c:	add	x3, x3, #0x960
   37550:	add	x1, x1, #0x288
   37554:	add	x0, x0, #0x2a8
   37558:	mov	w2, #0x169                 	// #361
   3755c:	bl	35ac0 <__assert_fail@plt>

0000000000037560 <aarch64_ins_aimm@@Base>:
   37560:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   37564:	ldr	w3, [x0, #20]
   37568:	ldr	x6, [x1, #40]
   3756c:	ldr	x5, [x5, #3944]
   37570:	lsl	x3, x3, #3
   37574:	cmp	x6, #0x0
   37578:	add	x4, x3, x5
   3757c:	cset	w7, ne  // ne = any
   37580:	ldr	w6, [x3, x5]
   37584:	ldr	w3, [x4, #4]
   37588:	cmp	w6, #0x0
   3758c:	sub	w4, w3, #0x1
   37590:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   37594:	b.hi	37610 <aarch64_ins_aimm@@Base+0xb0>  // b.pmore
   37598:	add	w4, w6, w3
   3759c:	cmp	w4, #0x20
   375a0:	b.gt	37610 <aarch64_ins_aimm@@Base+0xb0>
   375a4:	mov	w4, #0xffffffff            	// #-1
   375a8:	ldr	w8, [x2]
   375ac:	lsl	w3, w4, w3
   375b0:	bic	w3, w7, w3
   375b4:	lsl	w3, w3, w6
   375b8:	orr	w3, w3, w8
   375bc:	str	w3, [x2]
   375c0:	ldr	w0, [x0, #24]
   375c4:	ldr	x7, [x1, #16]
   375c8:	lsl	x0, x0, #3
   375cc:	add	x6, x0, x5
   375d0:	ldr	w1, [x0, x5]
   375d4:	ldr	w0, [x6, #4]
   375d8:	cmp	w1, #0x0
   375dc:	add	w5, w0, w4
   375e0:	ccmp	w5, #0x1e, #0x2, ge  // ge = tcont
   375e4:	b.hi	37610 <aarch64_ins_aimm@@Base+0xb0>  // b.pmore
   375e8:	add	w5, w1, w0
   375ec:	cmp	w5, #0x20
   375f0:	b.gt	37610 <aarch64_ins_aimm@@Base+0xb0>
   375f4:	lsl	w4, w4, w0
   375f8:	bic	w4, w7, w4
   375fc:	mov	w0, #0x1                   	// #1
   37600:	lsl	w4, w4, w1
   37604:	orr	w3, w4, w3
   37608:	str	w3, [x2]
   3760c:	ret
   37610:	stp	x29, x30, [sp, #-16]!
   37614:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   37618:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3761c:	mov	x29, sp
   37620:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   37624:	add	x3, x3, #0x960
   37628:	add	x1, x1, #0x288
   3762c:	add	x0, x0, #0x2a8
   37630:	mov	w2, #0x169                 	// #361
   37634:	bl	35ac0 <__assert_fail@plt>

0000000000037638 <aarch64_ins_limm@@Base>:
   37638:	ldr	x4, [x3, #8]
   3763c:	ldrb	w3, [x3, #28]
   37640:	ldr	x1, [x1, #16]
   37644:	ldr	w4, [x4, #20]
   37648:	cmp	w4, #0x2a
   3764c:	cset	w4, eq  // eq = none
   37650:	b	36380 <init_disassemble_info@@Base+0x2e0>
   37654:	nop

0000000000037658 <aarch64_ins_inv_limm@@Base>:
   37658:	ldrb	w3, [x3, #28]
   3765c:	mov	w4, #0x1                   	// #1
   37660:	ldr	x1, [x1, #16]
   37664:	b	36380 <init_disassemble_info@@Base+0x2e0>

0000000000037668 <aarch64_ins_ft@@Base>:
   37668:	stp	x29, x30, [sp, #-48]!
   3766c:	mov	x29, sp
   37670:	ldr	w5, [x1, #8]
   37674:	stp	x19, x20, [sp, #16]
   37678:	str	x21, [sp, #32]
   3767c:	cbnz	w5, 3776c <aarch64_ins_ft@@Base+0x104>
   37680:	mov	x21, x3
   37684:	mov	x19, x1
   37688:	mov	x20, x2
   3768c:	bl	35200 <aarch64_ins_regno@plt>
   37690:	ldr	x0, [x21, #8]
   37694:	ldr	w0, [x0, #16]
   37698:	sub	w0, w0, #0x3d
   3769c:	cmp	w0, #0x3
   376a0:	b.hi	37714 <aarch64_ins_ft@@Base+0xac>  // b.pmore
   376a4:	ldrb	w0, [x19, #4]
   376a8:	sub	w2, w0, #0x7
   376ac:	and	w0, w2, #0xff
   376b0:	cmp	w0, #0x2
   376b4:	b.hi	37790 <aarch64_ins_ft@@Base+0x128>  // b.pmore
   376b8:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   376bc:	ldr	x1, [x1, #3944]
   376c0:	ldr	w3, [x1, #296]
   376c4:	ldr	w1, [x1, #300]
   376c8:	cmp	w3, #0x0
   376cc:	sub	w0, w1, #0x1
   376d0:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   376d4:	b.hi	3774c <aarch64_ins_ft@@Base+0xe4>  // b.pmore
   376d8:	add	w0, w3, w1
   376dc:	cmp	w0, #0x20
   376e0:	b.gt	3774c <aarch64_ins_ft@@Base+0xe4>
   376e4:	mov	w0, #0xffffffff            	// #-1
   376e8:	ldr	w4, [x20]
   376ec:	lsl	w0, w0, w1
   376f0:	bic	w0, w2, w0
   376f4:	ldr	x21, [sp, #32]
   376f8:	lsl	w0, w0, w3
   376fc:	orr	w0, w4, w0
   37700:	str	w0, [x20]
   37704:	mov	w0, #0x1                   	// #1
   37708:	ldp	x19, x20, [sp, #16]
   3770c:	ldp	x29, x30, [sp], #48
   37710:	ret
   37714:	ldrb	w0, [x19, #4]
   37718:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3771c:	mov	w1, w0
   37720:	mov	w5, #0x22                  	// #34
   37724:	mov	x0, x20
   37728:	mov	w4, #0x25                  	// #37
   3772c:	mov	w3, #0x2                   	// #2
   37730:	mov	w2, #0x0                   	// #0
   37734:	bl	36250 <init_disassemble_info@@Base+0x1b0>
   37738:	mov	w0, #0x1                   	// #1
   3773c:	ldp	x19, x20, [sp, #16]
   37740:	ldr	x21, [sp, #32]
   37744:	ldp	x29, x30, [sp], #48
   37748:	ret
   3774c:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   37750:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   37754:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   37758:	add	x3, x3, #0x960
   3775c:	add	x1, x1, #0x288
   37760:	add	x0, x0, #0x2a8
   37764:	mov	w2, #0x169                 	// #361
   37768:	bl	35ac0 <__assert_fail@plt>
   3776c:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   37770:	add	x3, x3, #0x960
   37774:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   37778:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3777c:	add	x3, x3, #0x150
   37780:	add	x1, x1, #0x330
   37784:	add	x0, x0, #0x4e8
   37788:	mov	w2, #0x245                 	// #581
   3778c:	bl	35ac0 <__assert_fail@plt>
   37790:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   37794:	add	x3, x3, #0x960
   37798:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3779c:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   377a0:	add	x3, x3, #0x150
   377a4:	add	x1, x1, #0x330
   377a8:	add	x0, x0, #0x4b0
   377ac:	mov	w2, #0x254                 	// #596
   377b0:	bl	35ac0 <__assert_fail@plt>
   377b4:	nop

00000000000377b8 <aarch64_ins_addr_simple@@Base>:
   377b8:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   377bc:	ldr	w5, [x1, #16]
   377c0:	ldr	x0, [x0, #3944]
   377c4:	ldp	w3, w0, [x0, #112]
   377c8:	cmp	w3, #0x0
   377cc:	sub	w4, w0, #0x1
   377d0:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   377d4:	b.hi	37808 <aarch64_ins_addr_simple@@Base+0x50>  // b.pmore
   377d8:	add	w1, w3, w0
   377dc:	cmp	w1, #0x20
   377e0:	b.gt	37808 <aarch64_ins_addr_simple@@Base+0x50>
   377e4:	mov	w1, #0xffffffff            	// #-1
   377e8:	ldr	w4, [x2]
   377ec:	lsl	w1, w1, w0
   377f0:	bic	w1, w5, w1
   377f4:	mov	w0, #0x1                   	// #1
   377f8:	lsl	w1, w1, w3
   377fc:	orr	w1, w4, w1
   37800:	str	w1, [x2]
   37804:	ret
   37808:	stp	x29, x30, [sp, #-16]!
   3780c:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   37810:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   37814:	mov	x29, sp
   37818:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3781c:	add	x3, x3, #0x960
   37820:	add	x1, x1, #0x288
   37824:	add	x0, x0, #0x2a8
   37828:	mov	w2, #0x169                 	// #361
   3782c:	bl	35ac0 <__assert_fail@plt>

0000000000037830 <aarch64_ins_addr_regoff@@Base>:
   37830:	stp	x29, x30, [sp, #-64]!
   37834:	mov	x29, sp
   37838:	ldr	w4, [x1, #16]
   3783c:	ldr	w0, [x1, #32]
   37840:	str	x23, [sp, #48]
   37844:	adrp	x23, a2000 <aarch64_operands@@Base+0x16bc0>
   37848:	stp	x21, x22, [sp, #32]
   3784c:	mov	x21, x1
   37850:	ldr	x22, [x23, #3944]
   37854:	stp	x19, x20, [sp, #16]
   37858:	mov	x20, x2
   3785c:	ldp	w1, w3, [x22, #112]
   37860:	cmp	w1, #0x0
   37864:	sub	w2, w3, #0x1
   37868:	ccmp	w2, #0x1e, #0x2, ge  // ge = tcont
   3786c:	b.hi	37998 <aarch64_ins_addr_regoff@@Base+0x168>  // b.pmore
   37870:	add	w2, w1, w3
   37874:	cmp	w2, #0x20
   37878:	b.gt	37998 <aarch64_ins_addr_regoff@@Base+0x168>
   3787c:	mov	w19, #0xffffffff            	// #-1
   37880:	ldr	w5, [x20]
   37884:	lsl	w3, w19, w3
   37888:	bic	w3, w4, w3
   3788c:	ldp	w2, w4, [x22, #224]
   37890:	lsl	w3, w3, w1
   37894:	orr	w3, w3, w5
   37898:	str	w3, [x20]
   3789c:	cmp	w2, #0x0
   378a0:	add	w1, w4, w19
   378a4:	ldr	w5, [x21, #20]
   378a8:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   378ac:	b.hi	37998 <aarch64_ins_addr_regoff@@Base+0x168>  // b.pmore
   378b0:	add	w1, w2, w4
   378b4:	cmp	w1, #0x20
   378b8:	b.gt	37998 <aarch64_ins_addr_regoff@@Base+0x168>
   378bc:	lsl	w4, w19, w4
   378c0:	bic	w4, w5, w4
   378c4:	cmp	w0, #0x5
   378c8:	mov	w1, #0x9                   	// #9
   378cc:	lsl	w4, w4, w2
   378d0:	orr	w3, w4, w3
   378d4:	str	w3, [x20]
   378d8:	csel	w0, w0, w1, ne  // ne = any
   378dc:	bl	35430 <aarch64_get_operand_modifier_value@plt>
   378e0:	ldp	w1, w2, [x22, #240]
   378e4:	cmp	w1, #0x0
   378e8:	add	w3, w2, w19
   378ec:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   378f0:	b.hi	37998 <aarch64_ins_addr_regoff@@Base+0x168>  // b.pmore
   378f4:	add	w3, w1, w2
   378f8:	cmp	w3, #0x20
   378fc:	b.gt	37998 <aarch64_ins_addr_regoff@@Base+0x168>
   37900:	lsl	w19, w19, w2
   37904:	bic	w19, w0, w19
   37908:	ldr	w0, [x20]
   3790c:	lsl	w19, w19, w1
   37910:	orr	w19, w19, w0
   37914:	str	w19, [x20]
   37918:	ldrb	w0, [x21, #4]
   3791c:	cmp	w0, #0x5
   37920:	b.eq	37984 <aarch64_ins_addr_regoff@@Base+0x154>  // b.none
   37924:	ldr	x0, [x21, #40]
   37928:	cmp	x0, #0x0
   3792c:	cset	w4, ne  // ne = any
   37930:	ldr	x23, [x23, #3944]
   37934:	ldp	w2, w3, [x23, #248]
   37938:	cmp	w2, #0x0
   3793c:	sub	w0, w3, #0x1
   37940:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   37944:	b.hi	37998 <aarch64_ins_addr_regoff@@Base+0x168>  // b.pmore
   37948:	add	w0, w2, w3
   3794c:	cmp	w0, #0x20
   37950:	b.gt	37998 <aarch64_ins_addr_regoff@@Base+0x168>
   37954:	mov	w1, #0xffffffff            	// #-1
   37958:	mov	w0, #0x1                   	// #1
   3795c:	lsl	w1, w1, w3
   37960:	bic	w1, w4, w1
   37964:	ldp	x21, x22, [sp, #32]
   37968:	lsl	w1, w1, w2
   3796c:	orr	w19, w1, w19
   37970:	ldr	x23, [sp, #48]
   37974:	str	w19, [x20]
   37978:	ldp	x19, x20, [sp, #16]
   3797c:	ldp	x29, x30, [sp], #64
   37980:	ret
   37984:	ldrb	w0, [x21, #36]
   37988:	and	w0, w0, #0x3
   3798c:	cmp	w0, #0x3
   37990:	cset	w4, eq  // eq = none
   37994:	b	37930 <aarch64_ins_addr_regoff@@Base+0x100>
   37998:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   3799c:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   379a0:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   379a4:	add	x3, x3, #0x960
   379a8:	add	x1, x1, #0x288
   379ac:	add	x0, x0, #0x2a8
   379b0:	mov	w2, #0x169                 	// #361
   379b4:	bl	35ac0 <__assert_fail@plt>

00000000000379b8 <aarch64_ins_addr_offset@@Base>:
   379b8:	stp	x29, x30, [sp, #-16]!
   379bc:	adrp	x6, a2000 <aarch64_operands@@Base+0x16bc0>
   379c0:	mov	x29, sp
   379c4:	ldr	w4, [x0, #20]
   379c8:	ldr	x6, [x6, #3944]
   379cc:	lsl	x4, x4, #3
   379d0:	ldr	w7, [x1, #16]
   379d4:	add	x5, x4, x6
   379d8:	ldr	w4, [x4, x6]
   379dc:	ldr	w3, [x5, #4]
   379e0:	cmp	w4, #0x0
   379e4:	sub	w5, w3, #0x1
   379e8:	ccmp	w5, #0x1e, #0x2, ge  // ge = tcont
   379ec:	b.hi	37ac8 <aarch64_ins_addr_offset@@Base+0x110>  // b.pmore
   379f0:	add	w5, w4, w3
   379f4:	cmp	w5, #0x20
   379f8:	b.gt	37ac8 <aarch64_ins_addr_offset@@Base+0x110>
   379fc:	mov	w5, #0xffffffff            	// #-1
   37a00:	ldr	w8, [x2]
   37a04:	lsl	w3, w5, w3
   37a08:	bic	w3, w7, w3
   37a0c:	lsl	w3, w3, w4
   37a10:	orr	w3, w3, w8
   37a14:	str	w3, [x2]
   37a18:	ldr	w7, [x0, #24]
   37a1c:	ldr	w9, [x1, #20]
   37a20:	lsl	x7, x7, #3
   37a24:	add	x8, x7, x6
   37a28:	ldr	w7, [x7, x6]
   37a2c:	ldr	w4, [x8, #4]
   37a30:	cmp	w7, #0x0
   37a34:	add	w8, w4, w5
   37a38:	ccmp	w8, #0x1e, #0x2, ge  // ge = tcont
   37a3c:	b.hi	37ac8 <aarch64_ins_addr_offset@@Base+0x110>  // b.pmore
   37a40:	add	w8, w7, w4
   37a44:	cmp	w8, #0x20
   37a48:	b.gt	37ac8 <aarch64_ins_addr_offset@@Base+0x110>
   37a4c:	lsl	w4, w5, w4
   37a50:	bic	w4, w9, w4
   37a54:	lsl	w4, w4, w7
   37a58:	orr	w3, w4, w3
   37a5c:	str	w3, [x2]
   37a60:	ldrb	w1, [x1, #28]
   37a64:	tbz	w1, #1, 37abc <aarch64_ins_addr_offset@@Base+0x104>
   37a68:	and	w1, w1, #0xc
   37a6c:	cmp	w1, #0x4
   37a70:	b.ne	37aec <aarch64_ins_addr_offset@@Base+0x134>  // b.any
   37a74:	ldr	w0, [x0, #28]
   37a78:	lsl	x0, x0, #3
   37a7c:	add	x4, x0, x6
   37a80:	ldr	w1, [x0, x6]
   37a84:	ldr	w0, [x4, #4]
   37a88:	cmp	w1, #0x0
   37a8c:	sub	w4, w0, #0x1
   37a90:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   37a94:	b.hi	37ae8 <aarch64_ins_addr_offset@@Base+0x130>  // b.pmore
   37a98:	add	w4, w1, w0
   37a9c:	cmp	w4, #0x20
   37aa0:	b.gt	37ae8 <aarch64_ins_addr_offset@@Base+0x130>
   37aa4:	lsl	w0, w5, w0
   37aa8:	mvn	w0, w0
   37aac:	and	w0, w0, #0x1
   37ab0:	lsl	w0, w0, w1
   37ab4:	orr	w3, w0, w3
   37ab8:	str	w3, [x2]
   37abc:	mov	w0, #0x1                   	// #1
   37ac0:	ldp	x29, x30, [sp], #16
   37ac4:	ret
   37ac8:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   37acc:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   37ad0:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   37ad4:	add	x3, x3, #0x960
   37ad8:	add	x1, x1, #0x288
   37adc:	add	x0, x0, #0x2a8
   37ae0:	mov	w2, #0x169                 	// #361
   37ae4:	bl	35ac0 <__assert_fail@plt>
   37ae8:	bl	361c8 <init_disassemble_info@@Base+0x128>
   37aec:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   37af0:	add	x3, x3, #0x960
   37af4:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   37af8:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   37afc:	add	x3, x3, #0x160
   37b00:	add	x1, x1, #0x330
   37b04:	add	x0, x0, #0x4f8
   37b08:	mov	w2, #0x2a2                 	// #674
   37b0c:	bl	35ac0 <__assert_fail@plt>

0000000000037b10 <aarch64_ins_addr_simm@@Base>:
   37b10:	stp	x29, x30, [sp, #-80]!
   37b14:	mov	x29, sp
   37b18:	stp	x21, x22, [sp, #32]
   37b1c:	adrp	x21, a2000 <aarch64_operands@@Base+0x16bc0>
   37b20:	mov	x22, x0
   37b24:	stp	x19, x20, [sp, #16]
   37b28:	mov	x20, x1
   37b2c:	mov	x19, x2
   37b30:	ldr	x1, [x21, #3944]
   37b34:	stp	x23, x24, [sp, #48]
   37b38:	mov	x23, x3
   37b3c:	ldr	w3, [x20, #16]
   37b40:	ldp	w0, w1, [x1, #112]
   37b44:	cmp	w0, #0x0
   37b48:	sub	w2, w1, #0x1
   37b4c:	ccmp	w2, #0x1e, #0x2, ge  // ge = tcont
   37b50:	b.hi	37cdc <aarch64_ins_addr_simm@@Base+0x1cc>  // b.pmore
   37b54:	add	w2, w0, w1
   37b58:	cmp	w2, #0x20
   37b5c:	b.gt	37cdc <aarch64_ins_addr_simm@@Base+0x1cc>
   37b60:	mov	w4, #0xffffffff            	// #-1
   37b64:	ldr	w2, [x19]
   37b68:	lsl	w4, w4, w1
   37b6c:	bic	w4, w3, w4
   37b70:	lsl	w4, w4, w0
   37b74:	orr	w4, w2, w4
   37b78:	str	w4, [x19]
   37b7c:	ldr	w1, [x22, #20]
   37b80:	ldrb	w0, [x20, #4]
   37b84:	ldr	w24, [x20, #20]
   37b88:	cmp	w1, #0x2c
   37b8c:	b.eq	37c38 <aarch64_ins_addr_simm@@Base+0x128>  // b.none
   37b90:	cmp	w0, #0x19
   37b94:	b.eq	37c38 <aarch64_ins_addr_simm@@Base+0x128>  // b.none
   37b98:	ldr	x2, [x21, #3944]
   37b9c:	ubfiz	x1, x1, #3, #32
   37ba0:	add	x3, x1, x2
   37ba4:	ldr	w0, [x1, x2]
   37ba8:	ldr	w4, [x3, #4]
   37bac:	cmp	w0, #0x0
   37bb0:	sub	w1, w4, #0x1
   37bb4:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   37bb8:	b.hi	37cdc <aarch64_ins_addr_simm@@Base+0x1cc>  // b.pmore
   37bbc:	add	w1, w0, w4
   37bc0:	cmp	w1, #0x20
   37bc4:	b.gt	37cdc <aarch64_ins_addr_simm@@Base+0x1cc>
   37bc8:	mov	w1, #0xffffffff            	// #-1
   37bcc:	ldr	w3, [x19]
   37bd0:	lsl	w4, w1, w4
   37bd4:	bic	w4, w24, w4
   37bd8:	lsl	w4, w4, w0
   37bdc:	orr	w4, w4, w3
   37be0:	str	w4, [x19]
   37be4:	ldrb	w0, [x20, #28]
   37be8:	tbz	w0, #1, 37c20 <aarch64_ins_addr_simm@@Base+0x110>
   37bec:	ldr	x3, [x23, #8]
   37bf0:	ldr	w3, [x3, #16]
   37bf4:	sub	w5, w3, #0x3a
   37bf8:	sub	w3, w3, #0x3d
   37bfc:	cmp	w5, #0x1
   37c00:	ccmp	w3, #0x1, #0x0, hi  // hi = pmore
   37c04:	b.ls	37cfc <aarch64_ins_addr_simm@@Base+0x1ec>  // b.plast
   37c08:	mov	w3, w0
   37c0c:	ubfx	x5, x3, #2, #1
   37c10:	ubfx	x3, x3, #3, #1
   37c14:	cmp	w5, w3
   37c18:	b.eq	37d24 <aarch64_ins_addr_simm@@Base+0x214>  // b.none
   37c1c:	tbnz	w0, #2, 37c7c <aarch64_ins_addr_simm@@Base+0x16c>
   37c20:	mov	w0, #0x1                   	// #1
   37c24:	ldp	x19, x20, [sp, #16]
   37c28:	ldp	x21, x22, [sp, #32]
   37c2c:	ldp	x23, x24, [sp, #48]
   37c30:	ldp	x29, x30, [sp], #80
   37c34:	ret
   37c38:	bl	35680 <aarch64_get_qualifier_esize@plt>
   37c3c:	and	w0, w0, #0xff
   37c40:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   37c44:	add	x1, x1, #0x960
   37c48:	add	x2, x1, #0x200
   37c4c:	cmp	w0, #0x10
   37c50:	ldp	x2, x3, [x2, #-136]
   37c54:	stp	x2, x3, [sp, #64]
   37c58:	b.hi	37d48 <aarch64_ins_addr_simm@@Base+0x238>  // b.pmore
   37c5c:	sub	w0, w0, #0x1
   37c60:	add	x1, sp, #0x40
   37c64:	ldrb	w0, [x1, w0, uxtw]
   37c68:	cmp	w0, #0xff
   37c6c:	b.eq	37d64 <aarch64_ins_addr_simm@@Base+0x254>  // b.none
   37c70:	ldr	w1, [x22, #20]
   37c74:	asr	w24, w24, w0
   37c78:	b	37b98 <aarch64_ins_addr_simm@@Base+0x88>
   37c7c:	ldr	w0, [x22, #24]
   37c80:	lsl	x0, x0, #3
   37c84:	add	x3, x0, x2
   37c88:	ldr	w2, [x0, x2]
   37c8c:	ldr	w0, [x3, #4]
   37c90:	cmp	w2, #0x0
   37c94:	sub	w3, w0, #0x1
   37c98:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   37c9c:	b.hi	37d20 <aarch64_ins_addr_simm@@Base+0x210>  // b.pmore
   37ca0:	add	w3, w2, w0
   37ca4:	cmp	w3, #0x20
   37ca8:	b.gt	37d20 <aarch64_ins_addr_simm@@Base+0x210>
   37cac:	lsl	w0, w1, w0
   37cb0:	mvn	w0, w0
   37cb4:	and	w0, w0, #0x1
   37cb8:	ldp	x21, x22, [sp, #32]
   37cbc:	lsl	w0, w0, w2
   37cc0:	orr	w4, w0, w4
   37cc4:	str	w4, [x19]
   37cc8:	mov	w0, #0x1                   	// #1
   37ccc:	ldp	x19, x20, [sp, #16]
   37cd0:	ldp	x23, x24, [sp, #48]
   37cd4:	ldp	x29, x30, [sp], #80
   37cd8:	ret
   37cdc:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   37ce0:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   37ce4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   37ce8:	add	x3, x3, #0x960
   37cec:	add	x1, x1, #0x288
   37cf0:	add	x0, x0, #0x2a8
   37cf4:	mov	w2, #0x169                 	// #361
   37cf8:	bl	35ac0 <__assert_fail@plt>
   37cfc:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   37d00:	add	x3, x3, #0x960
   37d04:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   37d08:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   37d0c:	add	x3, x3, #0x188
   37d10:	add	x1, x1, #0x330
   37d14:	add	x0, x0, #0x530
   37d18:	mov	w2, #0x2be                 	// #702
   37d1c:	bl	35ac0 <__assert_fail@plt>
   37d20:	bl	361c8 <init_disassemble_info@@Base+0x128>
   37d24:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   37d28:	add	x3, x3, #0x960
   37d2c:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   37d30:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   37d34:	add	x3, x3, #0x188
   37d38:	add	x1, x1, #0x330
   37d3c:	add	x0, x0, #0x5d0
   37d40:	mov	w2, #0x2c2                 	// #706
   37d44:	bl	35ac0 <__assert_fail@plt>
   37d48:	add	x3, x1, #0x10
   37d4c:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   37d50:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   37d54:	add	x0, x0, #0x4b0
   37d58:	add	x1, x1, #0x288
   37d5c:	mov	w2, #0x200                 	// #512
   37d60:	bl	35ac0 <__assert_fail@plt>
   37d64:	bl	361f0 <init_disassemble_info@@Base+0x150>

0000000000037d68 <aarch64_ins_addr_simm10@@Base>:
   37d68:	stp	x29, x30, [sp, #-16]!
   37d6c:	adrp	x6, a2000 <aarch64_operands@@Base+0x16bc0>
   37d70:	mov	x29, sp
   37d74:	ldr	w4, [x0, #20]
   37d78:	ldr	x6, [x6, #3944]
   37d7c:	lsl	x4, x4, #3
   37d80:	ldr	w7, [x1, #16]
   37d84:	add	x5, x4, x6
   37d88:	ldr	w4, [x4, x6]
   37d8c:	ldr	w3, [x5, #4]
   37d90:	cmp	w4, #0x0
   37d94:	sub	w5, w3, #0x1
   37d98:	ccmp	w5, #0x1e, #0x2, ge  // ge = tcont
   37d9c:	b.hi	37ec8 <aarch64_ins_addr_simm10@@Base+0x160>  // b.pmore
   37da0:	add	w5, w4, w3
   37da4:	cmp	w5, #0x20
   37da8:	b.gt	37ec8 <aarch64_ins_addr_simm10@@Base+0x160>
   37dac:	mov	w5, #0xffffffff            	// #-1
   37db0:	ldr	w8, [x2]
   37db4:	lsl	w3, w5, w3
   37db8:	bic	w3, w7, w3
   37dbc:	lsl	w3, w3, w4
   37dc0:	orr	w3, w3, w8
   37dc4:	str	w3, [x2]
   37dc8:	ldr	w7, [x0, #24]
   37dcc:	ldr	w4, [x1, #20]
   37dd0:	lsl	x7, x7, #3
   37dd4:	add	x9, x7, x6
   37dd8:	asr	w10, w4, #3
   37ddc:	asr	w8, w4, #12
   37de0:	ldr	w7, [x7, x6]
   37de4:	ldr	w4, [x9, #4]
   37de8:	cmp	w7, #0x0
   37dec:	add	w9, w4, w5
   37df0:	ccmp	w9, #0x1e, #0x2, ge  // ge = tcont
   37df4:	b.hi	37ec8 <aarch64_ins_addr_simm10@@Base+0x160>  // b.pmore
   37df8:	add	w9, w7, w4
   37dfc:	cmp	w9, #0x20
   37e00:	b.gt	37ec8 <aarch64_ins_addr_simm10@@Base+0x160>
   37e04:	lsl	w4, w5, w4
   37e08:	bic	w4, w8, w4
   37e0c:	lsl	w4, w4, w7
   37e10:	orr	w3, w4, w3
   37e14:	str	w3, [x2]
   37e18:	ldr	w4, [x0, #28]
   37e1c:	lsl	x4, x4, #3
   37e20:	add	x7, x4, x6
   37e24:	ldr	w4, [x4, x6]
   37e28:	ldr	w7, [x7, #4]
   37e2c:	cmp	w4, #0x0
   37e30:	add	w8, w7, w5
   37e34:	ccmp	w8, #0x1e, #0x2, ge  // ge = tcont
   37e38:	b.hi	37ec8 <aarch64_ins_addr_simm10@@Base+0x160>  // b.pmore
   37e3c:	add	w8, w4, w7
   37e40:	cmp	w8, #0x20
   37e44:	b.gt	37ec8 <aarch64_ins_addr_simm10@@Base+0x160>
   37e48:	lsl	w5, w5, w7
   37e4c:	bic	w5, w10, w5
   37e50:	lsl	w5, w5, w4
   37e54:	orr	w3, w5, w3
   37e58:	str	w3, [x2]
   37e5c:	ldrb	w1, [x1, #28]
   37e60:	tbz	w1, #1, 37ebc <aarch64_ins_addr_simm10@@Base+0x154>
   37e64:	and	w1, w1, #0xc
   37e68:	cmp	w1, #0x4
   37e6c:	b.ne	37eec <aarch64_ins_addr_simm10@@Base+0x184>  // b.any
   37e70:	ldr	w0, [x0, #32]
   37e74:	lsl	x0, x0, #3
   37e78:	add	x4, x0, x6
   37e7c:	ldr	w1, [x0, x6]
   37e80:	ldr	w4, [x4, #4]
   37e84:	cmp	w1, #0x0
   37e88:	sub	w0, w4, #0x1
   37e8c:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   37e90:	b.hi	37ee8 <aarch64_ins_addr_simm10@@Base+0x180>  // b.pmore
   37e94:	add	w0, w1, w4
   37e98:	cmp	w0, #0x20
   37e9c:	b.gt	37ee8 <aarch64_ins_addr_simm10@@Base+0x180>
   37ea0:	mov	w0, #0xffffffff            	// #-1
   37ea4:	lsl	w0, w0, w4
   37ea8:	mvn	w0, w0
   37eac:	and	w0, w0, #0x1
   37eb0:	lsl	w0, w0, w1
   37eb4:	orr	w3, w0, w3
   37eb8:	str	w3, [x2]
   37ebc:	mov	w0, #0x1                   	// #1
   37ec0:	ldp	x29, x30, [sp], #16
   37ec4:	ret
   37ec8:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   37ecc:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   37ed0:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   37ed4:	add	x3, x3, #0x960
   37ed8:	add	x1, x1, #0x288
   37edc:	add	x0, x0, #0x2a8
   37ee0:	mov	w2, #0x169                 	// #361
   37ee4:	bl	35ac0 <__assert_fail@plt>
   37ee8:	bl	361c8 <init_disassemble_info@@Base+0x128>
   37eec:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   37ef0:	add	x3, x3, #0x960
   37ef4:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   37ef8:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   37efc:	add	x3, x3, #0x1a0
   37f00:	add	x1, x1, #0x330
   37f04:	add	x0, x0, #0x4f8
   37f08:	mov	w2, #0x2dd                 	// #733
   37f0c:	bl	35ac0 <__assert_fail@plt>

0000000000037f10 <aarch64_ins_addr_uimm12@@Base>:
   37f10:	stp	x29, x30, [sp, #-64]!
   37f14:	mov	x29, sp
   37f18:	stp	x19, x20, [sp, #16]
   37f1c:	mov	x19, x1
   37f20:	mov	x20, x2
   37f24:	str	x21, [sp, #32]
   37f28:	mov	x21, x0
   37f2c:	ldrb	w0, [x1, #4]
   37f30:	bl	35680 <aarch64_get_qualifier_esize@plt>
   37f34:	and	w4, w0, #0xff
   37f38:	adrp	x7, 57000 <floatformat_from_double@@Base+0x210>
   37f3c:	add	x3, x7, #0x960
   37f40:	add	x2, x3, #0x200
   37f44:	cmp	w4, #0x10
   37f48:	ldp	x0, x1, [x2, #-136]
   37f4c:	stp	x0, x1, [sp, #48]
   37f50:	b.hi	38040 <aarch64_ins_addr_uimm12@@Base+0x130>  // b.pmore
   37f54:	sub	w4, w4, #0x1
   37f58:	add	x0, sp, #0x30
   37f5c:	ldrb	w2, [x0, w4, uxtw]
   37f60:	cmp	w2, #0xff
   37f64:	b.eq	3803c <aarch64_ins_addr_uimm12@@Base+0x12c>  // b.none
   37f68:	adrp	x6, a2000 <aarch64_operands@@Base+0x16bc0>
   37f6c:	ldr	w0, [x21, #20]
   37f70:	ldr	w3, [x19, #16]
   37f74:	ldr	x6, [x6, #3944]
   37f78:	lsl	x0, x0, #3
   37f7c:	add	x1, x0, x6
   37f80:	ldr	w0, [x0, x6]
   37f84:	ldr	w4, [x1, #4]
   37f88:	cmp	w0, #0x0
   37f8c:	sub	w1, w4, #0x1
   37f90:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   37f94:	b.hi	38020 <aarch64_ins_addr_uimm12@@Base+0x110>  // b.pmore
   37f98:	add	w1, w0, w4
   37f9c:	cmp	w1, #0x20
   37fa0:	b.gt	38020 <aarch64_ins_addr_uimm12@@Base+0x110>
   37fa4:	mov	w5, #0xffffffff            	// #-1
   37fa8:	ldr	w1, [x20]
   37fac:	lsl	w4, w5, w4
   37fb0:	bic	w4, w3, w4
   37fb4:	lsl	w4, w4, w0
   37fb8:	orr	w4, w4, w1
   37fbc:	str	w4, [x20]
   37fc0:	ldr	w0, [x21, #24]
   37fc4:	ldr	w1, [x19, #20]
   37fc8:	lsl	x0, x0, #3
   37fcc:	add	x3, x0, x6
   37fd0:	asr	w1, w1, w2
   37fd4:	ldr	w2, [x0, x6]
   37fd8:	ldr	w0, [x3, #4]
   37fdc:	cmp	w2, #0x0
   37fe0:	add	w3, w0, w5
   37fe4:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   37fe8:	b.hi	38020 <aarch64_ins_addr_uimm12@@Base+0x110>  // b.pmore
   37fec:	add	w3, w2, w0
   37ff0:	cmp	w3, #0x20
   37ff4:	b.gt	38020 <aarch64_ins_addr_uimm12@@Base+0x110>
   37ff8:	lsl	w5, w5, w0
   37ffc:	bic	w5, w1, w5
   38000:	ldr	x21, [sp, #32]
   38004:	lsl	w5, w5, w2
   38008:	orr	w4, w5, w4
   3800c:	str	w4, [x20]
   38010:	mov	w0, #0x1                   	// #1
   38014:	ldp	x19, x20, [sp, #16]
   38018:	ldp	x29, x30, [sp], #64
   3801c:	ret
   38020:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   38024:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   38028:	add	x3, x7, #0x960
   3802c:	add	x1, x1, #0x288
   38030:	add	x0, x0, #0x2a8
   38034:	mov	w2, #0x169                 	// #361
   38038:	bl	35ac0 <__assert_fail@plt>
   3803c:	bl	361f0 <init_disassemble_info@@Base+0x150>
   38040:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   38044:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   38048:	add	x3, x3, #0x10
   3804c:	add	x1, x1, #0x288
   38050:	add	x0, x0, #0x4b0
   38054:	mov	w2, #0x200                 	// #512
   38058:	bl	35ac0 <__assert_fail@plt>
   3805c:	nop

0000000000038060 <aarch64_ins_simd_addr_post@@Base>:
   38060:	stp	x29, x30, [sp, #-16]!
   38064:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   38068:	mov	x29, sp
   3806c:	ldr	x4, [x4, #3944]
   38070:	ldr	w6, [x1, #16]
   38074:	ldp	w5, w0, [x4, #112]
   38078:	cmp	w5, #0x0
   3807c:	sub	w3, w0, #0x1
   38080:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   38084:	b.hi	3813c <aarch64_ins_simd_addr_post@@Base+0xdc>  // b.pmore
   38088:	add	w3, w5, w0
   3808c:	cmp	w3, #0x20
   38090:	b.gt	3813c <aarch64_ins_simd_addr_post@@Base+0xdc>
   38094:	mov	w3, #0xffffffff            	// #-1
   38098:	ldr	w7, [x2]
   3809c:	lsl	w0, w3, w0
   380a0:	bic	w0, w6, w0
   380a4:	lsl	w0, w0, w5
   380a8:	orr	w0, w0, w7
   380ac:	ldp	w5, w6, [x4, #224]
   380b0:	str	w0, [x2]
   380b4:	add	w7, w6, w3
   380b8:	mvn	w4, w5
   380bc:	cmp	w7, #0x1e
   380c0:	ldr	w7, [x1, #24]
   380c4:	cset	w8, ls  // ls = plast
   380c8:	and	w4, w8, w4, lsr #31
   380cc:	cbnz	w7, 38104 <aarch64_ins_simd_addr_post@@Base+0xa4>
   380d0:	cbz	w4, 38138 <aarch64_ins_simd_addr_post@@Base+0xd8>
   380d4:	add	w1, w6, w5
   380d8:	cmp	w1, #0x20
   380dc:	b.gt	38138 <aarch64_ins_simd_addr_post@@Base+0xd8>
   380e0:	lsl	w1, w3, w6
   380e4:	mvn	w1, w1
   380e8:	and	w1, w1, #0x1f
   380ec:	lsl	w1, w1, w5
   380f0:	orr	w0, w1, w0
   380f4:	str	w0, [x2]
   380f8:	mov	w0, #0x1                   	// #1
   380fc:	ldp	x29, x30, [sp], #16
   38100:	ret
   38104:	ldr	w7, [x1, #20]
   38108:	cbz	w4, 38138 <aarch64_ins_simd_addr_post@@Base+0xd8>
   3810c:	add	w4, w6, w5
   38110:	cmp	w4, #0x20
   38114:	b.gt	38138 <aarch64_ins_simd_addr_post@@Base+0xd8>
   38118:	lsl	w1, w3, w6
   3811c:	bic	w1, w7, w1
   38120:	lsl	w1, w1, w5
   38124:	orr	w0, w1, w0
   38128:	str	w0, [x2]
   3812c:	mov	w0, #0x1                   	// #1
   38130:	ldp	x29, x30, [sp], #16
   38134:	ret
   38138:	bl	361c8 <init_disassemble_info@@Base+0x128>
   3813c:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   38140:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   38144:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   38148:	add	x3, x3, #0x960
   3814c:	add	x1, x1, #0x288
   38150:	add	x0, x0, #0x2a8
   38154:	mov	w2, #0x169                 	// #361
   38158:	bl	35ac0 <__assert_fail@plt>
   3815c:	nop

0000000000038160 <aarch64_ins_cond@@Base>:
   38160:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   38164:	ldr	x1, [x1, #16]
   38168:	ldr	x0, [x0, #3944]
   3816c:	ldr	w5, [x1, #32]
   38170:	ldp	w3, w0, [x0, #184]
   38174:	cmp	w3, #0x0
   38178:	sub	w4, w0, #0x1
   3817c:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   38180:	b.hi	381b4 <aarch64_ins_cond@@Base+0x54>  // b.pmore
   38184:	add	w1, w3, w0
   38188:	cmp	w1, #0x20
   3818c:	b.gt	381b4 <aarch64_ins_cond@@Base+0x54>
   38190:	mov	w1, #0xffffffff            	// #-1
   38194:	ldr	w4, [x2]
   38198:	lsl	w1, w1, w0
   3819c:	bic	w1, w5, w1
   381a0:	mov	w0, #0x1                   	// #1
   381a4:	lsl	w1, w1, w3
   381a8:	orr	w1, w4, w1
   381ac:	str	w1, [x2]
   381b0:	ret
   381b4:	stp	x29, x30, [sp, #-16]!
   381b8:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   381bc:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   381c0:	mov	x29, sp
   381c4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   381c8:	add	x3, x3, #0x960
   381cc:	add	x1, x1, #0x288
   381d0:	add	x0, x0, #0x2a8
   381d4:	mov	w2, #0x169                 	// #361
   381d8:	bl	35ac0 <__assert_fail@plt>
   381dc:	nop

00000000000381e0 <aarch64_ins_sysreg@@Base>:
   381e0:	sub	sp, sp, #0x40
   381e4:	stp	x29, x30, [sp, #16]
   381e8:	add	x29, sp, #0x10
   381ec:	ldr	x5, [x3, #8]
   381f0:	stp	x19, x20, [sp, #32]
   381f4:	mov	x19, x1
   381f8:	stp	x21, x22, [sp, #48]
   381fc:	mov	x21, x2
   38200:	ldr	w0, [x5, #16]
   38204:	cmp	w0, #0x46
   38208:	b.eq	38250 <aarch64_ins_sysreg@@Base+0x70>  // b.none
   3820c:	ldr	w2, [x5, #12]
   38210:	mov	w3, #0x15                  	// #21
   38214:	ldr	w1, [x19, #16]
   38218:	mov	x0, x21
   3821c:	str	w3, [sp]
   38220:	mov	w7, #0x14                  	// #20
   38224:	mov	w6, #0x13                  	// #19
   38228:	mov	w4, #0x11                  	// #17
   3822c:	mov	w5, #0x12                  	// #18
   38230:	mov	w3, #0x5                   	// #5
   38234:	bl	36250 <init_disassemble_info@@Base+0x1b0>
   38238:	mov	w0, #0x1                   	// #1
   3823c:	ldp	x29, x30, [sp, #16]
   38240:	ldp	x19, x20, [sp, #32]
   38244:	ldp	x21, x22, [sp, #48]
   38248:	add	sp, sp, #0x40
   3824c:	ret
   38250:	ldr	x0, [x5, #120]
   38254:	mov	x20, x3
   38258:	ldr	w1, [x1, #20]
   3825c:	mov	x2, #0x20000000            	// #536870912
   38260:	and	x0, x0, #0x60000000
   38264:	mov	x22, x4
   38268:	ands	w3, w1, #0x18
   3826c:	ccmp	x0, x2, #0x0, ne  // ne = any
   38270:	b.ne	382b8 <aarch64_ins_sysreg@@Base+0xd8>  // b.any
   38274:	cmp	w3, #0x8
   38278:	b.eq	3820c <aarch64_ins_sysreg@@Base+0x2c>  // b.none
   3827c:	mov	w0, #0x2                   	// #2
   38280:	str	w0, [x4]
   38284:	mov	w2, #0x5                   	// #5
   38288:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3828c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   38290:	add	x1, x1, #0x5f8
   38294:	add	x0, x0, #0x250
   38298:	bl	359e0 <dcgettext@plt>
   3829c:	ldr	w2, [x19, #8]
   382a0:	mov	w1, #0x1                   	// #1
   382a4:	ldr	x5, [x20, #8]
   382a8:	str	w2, [x22, #4]
   382ac:	str	x0, [x22, #8]
   382b0:	str	w1, [x22, #28]
   382b4:	b	3820c <aarch64_ins_sysreg@@Base+0x2c>
   382b8:	tst	x1, #0x8
   382bc:	mov	x1, #0x40000000            	// #1073741824
   382c0:	ccmp	x0, x1, #0x0, ne  // ne = any
   382c4:	b.ne	3820c <aarch64_ins_sysreg@@Base+0x2c>  // b.any
   382c8:	mov	w0, #0x2                   	// #2
   382cc:	str	w0, [x4]
   382d0:	mov	w2, #0x5                   	// #5
   382d4:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   382d8:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   382dc:	add	x1, x1, #0x620
   382e0:	add	x0, x0, #0x250
   382e4:	bl	359e0 <dcgettext@plt>
   382e8:	ldr	w2, [x19, #8]
   382ec:	mov	w1, #0x1                   	// #1
   382f0:	ldr	x5, [x20, #8]
   382f4:	str	w2, [x22, #4]
   382f8:	str	x0, [x22, #8]
   382fc:	str	w1, [x22, #28]
   38300:	b	3820c <aarch64_ins_sysreg@@Base+0x2c>
   38304:	nop

0000000000038308 <aarch64_ins_pstatefield@@Base>:
   38308:	stp	x29, x30, [sp, #-16]!
   3830c:	mov	x0, x2
   38310:	mov	w5, #0x14                  	// #20
   38314:	mov	x29, sp
   38318:	ldr	x2, [x3, #8]
   3831c:	mov	w4, #0x11                  	// #17
   38320:	ldr	w1, [x1, #16]
   38324:	mov	w3, #0x2                   	// #2
   38328:	ldr	w2, [x2, #12]
   3832c:	bl	36250 <init_disassemble_info@@Base+0x1b0>
   38330:	mov	w0, #0x1                   	// #1
   38334:	ldp	x29, x30, [sp], #16
   38338:	ret
   3833c:	nop

0000000000038340 <aarch64_ins_sysins_op@@Base>:
   38340:	stp	x29, x30, [sp, #-16]!
   38344:	mov	x0, x2
   38348:	mov	w7, #0x14                  	// #20
   3834c:	mov	x29, sp
   38350:	ldr	x2, [x3, #8]
   38354:	mov	w6, #0x13                  	// #19
   38358:	ldr	x1, [x1, #16]
   3835c:	mov	w5, #0x12                  	// #18
   38360:	ldr	w2, [x2, #12]
   38364:	mov	w4, #0x11                  	// #17
   38368:	mov	w3, #0x4                   	// #4
   3836c:	ldr	w1, [x1, #8]
   38370:	bl	36250 <init_disassemble_info@@Base+0x1b0>
   38374:	mov	w0, #0x1                   	// #1
   38378:	ldp	x29, x30, [sp], #16
   3837c:	ret

0000000000038380 <aarch64_ins_barrier@@Base>:
   38380:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   38384:	ldr	x1, [x1, #16]
   38388:	ldr	x0, [x0, #3944]
   3838c:	ldr	w5, [x1, #8]
   38390:	ldp	w3, w0, [x0, #144]
   38394:	cmp	w3, #0x0
   38398:	sub	w4, w0, #0x1
   3839c:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   383a0:	b.hi	383d4 <aarch64_ins_barrier@@Base+0x54>  // b.pmore
   383a4:	add	w1, w3, w0
   383a8:	cmp	w1, #0x20
   383ac:	b.gt	383d4 <aarch64_ins_barrier@@Base+0x54>
   383b0:	mov	w1, #0xffffffff            	// #-1
   383b4:	ldr	w4, [x2]
   383b8:	lsl	w1, w1, w0
   383bc:	bic	w1, w5, w1
   383c0:	mov	w0, #0x1                   	// #1
   383c4:	lsl	w1, w1, w3
   383c8:	orr	w1, w4, w1
   383cc:	str	w1, [x2]
   383d0:	ret
   383d4:	stp	x29, x30, [sp, #-16]!
   383d8:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   383dc:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   383e0:	mov	x29, sp
   383e4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   383e8:	add	x3, x3, #0x960
   383ec:	add	x1, x1, #0x288
   383f0:	add	x0, x0, #0x2a8
   383f4:	mov	w2, #0x169                 	// #361
   383f8:	bl	35ac0 <__assert_fail@plt>
   383fc:	nop

0000000000038400 <aarch64_ins_prfop@@Base>:
   38400:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   38404:	ldr	x1, [x1, #16]
   38408:	ldr	x0, [x0, #3944]
   3840c:	ldr	w5, [x1, #8]
   38410:	ldp	w3, w0, [x0, #96]
   38414:	cmp	w3, #0x0
   38418:	sub	w4, w0, #0x1
   3841c:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   38420:	b.hi	38454 <aarch64_ins_prfop@@Base+0x54>  // b.pmore
   38424:	add	w1, w3, w0
   38428:	cmp	w1, #0x20
   3842c:	b.gt	38454 <aarch64_ins_prfop@@Base+0x54>
   38430:	mov	w1, #0xffffffff            	// #-1
   38434:	ldr	w4, [x2]
   38438:	lsl	w1, w1, w0
   3843c:	bic	w1, w5, w1
   38440:	mov	w0, #0x1                   	// #1
   38444:	lsl	w1, w1, w3
   38448:	orr	w1, w4, w1
   3844c:	str	w1, [x2]
   38450:	ret
   38454:	stp	x29, x30, [sp, #-16]!
   38458:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   3845c:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   38460:	mov	x29, sp
   38464:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   38468:	add	x3, x3, #0x960
   3846c:	add	x1, x1, #0x288
   38470:	add	x0, x0, #0x2a8
   38474:	mov	w2, #0x169                 	// #361
   38478:	bl	35ac0 <__assert_fail@plt>
   3847c:	nop

0000000000038480 <aarch64_ins_hint@@Base>:
   38480:	stp	x29, x30, [sp, #-16]!
   38484:	mov	x0, x2
   38488:	mov	w5, #0x12                  	// #18
   3848c:	mov	x29, sp
   38490:	ldr	x1, [x1, #16]
   38494:	mov	w4, #0x11                  	// #17
   38498:	mov	w3, #0x2                   	// #2
   3849c:	mov	w2, #0x0                   	// #0
   384a0:	ldr	w1, [x1, #8]
   384a4:	bl	36250 <init_disassemble_info@@Base+0x1b0>
   384a8:	mov	w0, #0x1                   	// #1
   384ac:	ldp	x29, x30, [sp], #16
   384b0:	ret
   384b4:	nop

00000000000384b8 <aarch64_ins_reg_extended@@Base>:
   384b8:	stp	x29, x30, [sp, #-48]!
   384bc:	mov	x29, sp
   384c0:	stp	x19, x20, [sp, #16]
   384c4:	adrp	x20, a2000 <aarch64_operands@@Base+0x16bc0>
   384c8:	ldr	w4, [x1, #16]
   384cc:	ldr	x3, [x20, #3944]
   384d0:	mov	x19, x2
   384d4:	str	x21, [sp, #32]
   384d8:	mov	x21, x1
   384dc:	ldr	w2, [x3, #228]
   384e0:	ldr	w1, [x3, #224]
   384e4:	sub	w3, w2, #0x1
   384e8:	cmp	w1, #0x0
   384ec:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   384f0:	b.hi	385c8 <aarch64_ins_reg_extended@@Base+0x110>  // b.pmore
   384f4:	add	w0, w1, w2
   384f8:	cmp	w0, #0x20
   384fc:	b.gt	385c8 <aarch64_ins_reg_extended@@Base+0x110>
   38500:	mov	w0, #0xffffffff            	// #-1
   38504:	ldr	w3, [x19]
   38508:	lsl	w0, w0, w2
   3850c:	bic	w0, w4, w0
   38510:	lsl	w0, w0, w1
   38514:	orr	w0, w3, w0
   38518:	str	w0, [x19]
   3851c:	ldr	w0, [x21, #32]
   38520:	cmp	w0, #0x5
   38524:	b.ne	38538 <aarch64_ins_reg_extended@@Base+0x80>  // b.any
   38528:	ldrb	w0, [x21, #4]
   3852c:	cmp	w0, #0x1
   38530:	cset	w0, ne  // ne = any
   38534:	add	w0, w0, #0x8
   38538:	bl	35430 <aarch64_get_operand_modifier_value@plt>
   3853c:	ldr	x2, [x20, #3944]
   38540:	ldp	w1, w3, [x2, #240]
   38544:	cmp	w1, #0x0
   38548:	sub	w4, w3, #0x1
   3854c:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   38550:	b.hi	385c8 <aarch64_ins_reg_extended@@Base+0x110>  // b.pmore
   38554:	add	w4, w1, w3
   38558:	cmp	w4, #0x20
   3855c:	b.gt	385c8 <aarch64_ins_reg_extended@@Base+0x110>
   38560:	mov	w4, #0xffffffff            	// #-1
   38564:	ldr	w6, [x19]
   38568:	lsl	w3, w4, w3
   3856c:	bic	w3, w0, w3
   38570:	ldp	w5, w0, [x2, #176]
   38574:	lsl	w3, w3, w1
   38578:	orr	w3, w3, w6
   3857c:	add	w1, w0, w4
   38580:	cmp	w5, #0x0
   38584:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   38588:	ldr	x1, [x21, #40]
   3858c:	str	w3, [x19]
   38590:	b.hi	385c8 <aarch64_ins_reg_extended@@Base+0x110>  // b.pmore
   38594:	add	w2, w5, w0
   38598:	cmp	w2, #0x20
   3859c:	b.gt	385c8 <aarch64_ins_reg_extended@@Base+0x110>
   385a0:	lsl	w4, w4, w0
   385a4:	bic	w4, w1, w4
   385a8:	ldr	x21, [sp, #32]
   385ac:	lsl	w4, w4, w5
   385b0:	orr	w3, w4, w3
   385b4:	str	w3, [x19]
   385b8:	mov	w0, #0x1                   	// #1
   385bc:	ldp	x19, x20, [sp, #16]
   385c0:	ldp	x29, x30, [sp], #48
   385c4:	ret
   385c8:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   385cc:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   385d0:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   385d4:	add	x3, x3, #0x960
   385d8:	add	x1, x1, #0x288
   385dc:	add	x0, x0, #0x2a8
   385e0:	mov	w2, #0x169                 	// #361
   385e4:	bl	35ac0 <__assert_fail@plt>

00000000000385e8 <aarch64_ins_reg_shifted@@Base>:
   385e8:	stp	x29, x30, [sp, #-48]!
   385ec:	mov	x29, sp
   385f0:	stp	x19, x20, [sp, #16]
   385f4:	adrp	x20, a2000 <aarch64_operands@@Base+0x16bc0>
   385f8:	ldr	w3, [x1, #16]
   385fc:	ldr	x20, [x20, #3944]
   38600:	stp	x21, x22, [sp, #32]
   38604:	mov	x22, x1
   38608:	mov	x21, x2
   3860c:	ldp	w1, w0, [x20, #224]
   38610:	cmp	w1, #0x0
   38614:	sub	w2, w0, #0x1
   38618:	ccmp	w2, #0x1e, #0x2, ge  // ge = tcont
   3861c:	b.hi	386dc <aarch64_ins_reg_shifted@@Base+0xf4>  // b.pmore
   38620:	add	w2, w1, w0
   38624:	cmp	w2, #0x20
   38628:	b.gt	386dc <aarch64_ins_reg_shifted@@Base+0xf4>
   3862c:	mov	w19, #0xffffffff            	// #-1
   38630:	ldr	w2, [x21]
   38634:	lsl	w0, w19, w0
   38638:	bic	w0, w3, w0
   3863c:	lsl	w0, w0, w1
   38640:	orr	w0, w2, w0
   38644:	str	w0, [x21]
   38648:	ldr	w0, [x22, #32]
   3864c:	bl	35430 <aarch64_get_operand_modifier_value@plt>
   38650:	ldr	w1, [x20, #280]
   38654:	ldr	w3, [x20, #284]
   38658:	cmp	w1, #0x0
   3865c:	add	w2, w3, w19
   38660:	ccmp	w2, #0x1e, #0x2, ge  // ge = tcont
   38664:	b.hi	386dc <aarch64_ins_reg_shifted@@Base+0xf4>  // b.pmore
   38668:	add	w2, w1, w3
   3866c:	cmp	w2, #0x20
   38670:	b.gt	386dc <aarch64_ins_reg_shifted@@Base+0xf4>
   38674:	ldr	w2, [x20, #304]
   38678:	lsl	w3, w19, w3
   3867c:	bic	w3, w0, w3
   38680:	ldr	w0, [x20, #308]
   38684:	ldr	w4, [x21]
   38688:	cmp	w2, #0x0
   3868c:	lsl	w3, w3, w1
   38690:	add	w1, w0, w19
   38694:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   38698:	orr	w3, w3, w4
   3869c:	ldr	x1, [x22, #40]
   386a0:	str	w3, [x21]
   386a4:	b.hi	386dc <aarch64_ins_reg_shifted@@Base+0xf4>  // b.pmore
   386a8:	add	w4, w2, w0
   386ac:	cmp	w4, #0x20
   386b0:	b.gt	386dc <aarch64_ins_reg_shifted@@Base+0xf4>
   386b4:	lsl	w19, w19, w0
   386b8:	bic	w19, w1, w19
   386bc:	mov	w0, #0x1                   	// #1
   386c0:	lsl	w19, w19, w2
   386c4:	orr	w3, w19, w3
   386c8:	ldp	x19, x20, [sp, #16]
   386cc:	str	w3, [x21]
   386d0:	ldp	x21, x22, [sp, #32]
   386d4:	ldp	x29, x30, [sp], #48
   386d8:	ret
   386dc:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   386e0:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   386e4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   386e8:	add	x3, x3, #0x960
   386ec:	add	x1, x1, #0x288
   386f0:	add	x0, x0, #0x2a8
   386f4:	mov	w2, #0x169                 	// #361
   386f8:	bl	35ac0 <__assert_fail@plt>
   386fc:	nop

0000000000038700 <aarch64_ins_sve_addr_ri_s4xvl@@Base>:
   38700:	ldp	w4, w7, [x0, #16]
   38704:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   38708:	ldr	w9, [x1, #16]
   3870c:	ldr	x5, [x5, #3944]
   38710:	lsl	x7, x7, #3
   38714:	ubfx	x4, x4, #5, #3
   38718:	add	x8, x7, x5
   3871c:	add	w6, w4, #0x1
   38720:	ldr	w7, [x7, x5]
   38724:	ldr	w0, [x8, #4]
   38728:	cmp	w7, #0x0
   3872c:	sub	w4, w0, #0x1
   38730:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   38734:	b.hi	387a8 <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xa8>  // b.pmore
   38738:	add	w3, w7, w0
   3873c:	cmp	w3, #0x20
   38740:	b.gt	387a8 <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xa8>
   38744:	mov	w4, #0xffffffff            	// #-1
   38748:	ldr	w10, [x2]
   3874c:	lsl	w3, w4, w0
   38750:	bic	w3, w9, w3
   38754:	ldr	w8, [x5, #776]
   38758:	lsl	w3, w3, w7
   3875c:	orr	w3, w3, w10
   38760:	str	w3, [x2]
   38764:	cmp	w8, #0x0
   38768:	ldr	w5, [x5, #780]
   3876c:	ldr	w0, [x1, #20]
   38770:	add	w1, w5, w4
   38774:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   38778:	sdiv	w6, w0, w6
   3877c:	b.hi	387a8 <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xa8>  // b.pmore
   38780:	add	w0, w8, w5
   38784:	cmp	w0, #0x20
   38788:	b.gt	387a8 <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xa8>
   3878c:	lsl	w4, w4, w5
   38790:	bic	w4, w6, w4
   38794:	mov	w0, #0x1                   	// #1
   38798:	lsl	w4, w4, w8
   3879c:	orr	w3, w4, w3
   387a0:	str	w3, [x2]
   387a4:	ret
   387a8:	stp	x29, x30, [sp, #-16]!
   387ac:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   387b0:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   387b4:	mov	x29, sp
   387b8:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   387bc:	add	x3, x3, #0x960
   387c0:	add	x1, x1, #0x288
   387c4:	add	x0, x0, #0x2a8
   387c8:	mov	w2, #0x169                 	// #361
   387cc:	bl	35ac0 <__assert_fail@plt>

00000000000387d0 <aarch64_ins_sve_addr_ri_s6xvl@@Base>:
   387d0:	ldp	w4, w7, [x0, #16]
   387d4:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   387d8:	ldr	w9, [x1, #16]
   387dc:	ldr	x5, [x5, #3944]
   387e0:	lsl	x7, x7, #3
   387e4:	ubfx	x4, x4, #5, #3
   387e8:	add	x8, x7, x5
   387ec:	add	w6, w4, #0x1
   387f0:	ldr	w7, [x7, x5]
   387f4:	ldr	w0, [x8, #4]
   387f8:	cmp	w7, #0x0
   387fc:	sub	w4, w0, #0x1
   38800:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   38804:	b.hi	38878 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xa8>  // b.pmore
   38808:	add	w3, w7, w0
   3880c:	cmp	w3, #0x20
   38810:	b.gt	38878 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xa8>
   38814:	mov	w4, #0xffffffff            	// #-1
   38818:	ldr	w10, [x2]
   3881c:	lsl	w3, w4, w0
   38820:	bic	w3, w9, w3
   38824:	ldr	w8, [x5, #800]
   38828:	lsl	w3, w3, w7
   3882c:	orr	w3, w3, w10
   38830:	str	w3, [x2]
   38834:	cmp	w8, #0x0
   38838:	ldr	w5, [x5, #804]
   3883c:	ldr	w0, [x1, #20]
   38840:	add	w1, w5, w4
   38844:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   38848:	sdiv	w6, w0, w6
   3884c:	b.hi	38878 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xa8>  // b.pmore
   38850:	add	w0, w8, w5
   38854:	cmp	w0, #0x20
   38858:	b.gt	38878 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xa8>
   3885c:	lsl	w4, w4, w5
   38860:	bic	w4, w6, w4
   38864:	mov	w0, #0x1                   	// #1
   38868:	lsl	w4, w4, w8
   3886c:	orr	w3, w4, w3
   38870:	str	w3, [x2]
   38874:	ret
   38878:	stp	x29, x30, [sp, #-16]!
   3887c:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   38880:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   38884:	mov	x29, sp
   38888:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3888c:	add	x3, x3, #0x960
   38890:	add	x1, x1, #0x288
   38894:	add	x0, x0, #0x2a8
   38898:	mov	w2, #0x169                 	// #361
   3889c:	bl	35ac0 <__assert_fail@plt>

00000000000388a0 <aarch64_ins_sve_addr_ri_s9xvl@@Base>:
   388a0:	stp	x29, x30, [sp, #-16]!
   388a4:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   388a8:	mov	x29, sp
   388ac:	ldp	w4, w6, [x0, #16]
   388b0:	mov	x0, x2
   388b4:	ldr	x5, [x5, #3944]
   388b8:	lsl	x2, x6, #3
   388bc:	ubfx	x4, x4, #5, #3
   388c0:	add	x7, x2, x5
   388c4:	add	w6, w4, #0x1
   388c8:	ldr	w8, [x1, #16]
   388cc:	ldr	w2, [x2, x5]
   388d0:	ldr	w4, [x7, #4]
   388d4:	cmp	w2, #0x0
   388d8:	sub	w5, w4, #0x1
   388dc:	ccmp	w5, #0x1e, #0x2, ge  // ge = tcont
   388e0:	b.hi	38934 <aarch64_ins_sve_addr_ri_s9xvl@@Base+0x94>  // b.pmore
   388e4:	add	w3, w2, w4
   388e8:	cmp	w3, #0x20
   388ec:	b.gt	38934 <aarch64_ins_sve_addr_ri_s9xvl@@Base+0x94>
   388f0:	mov	w3, #0xffffffff            	// #-1
   388f4:	ldr	w7, [x0]
   388f8:	lsl	w3, w3, w4
   388fc:	bic	w3, w8, w3
   38900:	mov	w5, #0x64                  	// #100
   38904:	mov	w4, #0x16                  	// #22
   38908:	lsl	w3, w3, w2
   3890c:	orr	w3, w7, w3
   38910:	str	w3, [x0]
   38914:	mov	w2, #0x0                   	// #0
   38918:	mov	w3, #0x2                   	// #2
   3891c:	ldr	w1, [x1, #20]
   38920:	sdiv	w1, w1, w6
   38924:	bl	36250 <init_disassemble_info@@Base+0x1b0>
   38928:	mov	w0, #0x1                   	// #1
   3892c:	ldp	x29, x30, [sp], #16
   38930:	ret
   38934:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   38938:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3893c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   38940:	add	x3, x3, #0x960
   38944:	add	x1, x1, #0x288
   38948:	add	x0, x0, #0x2a8
   3894c:	mov	w2, #0x169                 	// #361
   38950:	bl	35ac0 <__assert_fail@plt>
   38954:	nop

0000000000038958 <aarch64_ins_sve_addr_ri_s4@@Base>:
   38958:	ldp	w4, w6, [x0, #16]
   3895c:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   38960:	mov	w0, #0x1                   	// #1
   38964:	ldr	w9, [x1, #16]
   38968:	ldr	x5, [x5, #3944]
   3896c:	lsl	x6, x6, #3
   38970:	ubfx	x4, x4, #5, #3
   38974:	add	x8, x6, x5
   38978:	ldr	w7, [x6, x5]
   3897c:	lsl	w6, w0, w4
   38980:	ldr	w3, [x8, #4]
   38984:	cmp	w7, #0x0
   38988:	sub	w4, w3, #0x1
   3898c:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   38990:	b.hi	38a00 <aarch64_ins_sve_addr_ri_s4@@Base+0xa8>  // b.pmore
   38994:	add	w4, w7, w3
   38998:	cmp	w4, #0x20
   3899c:	b.gt	38a00 <aarch64_ins_sve_addr_ri_s4@@Base+0xa8>
   389a0:	mov	w4, #0xffffffff            	// #-1
   389a4:	ldr	w10, [x2]
   389a8:	lsl	w3, w4, w3
   389ac:	bic	w3, w9, w3
   389b0:	ldr	w8, [x5, #776]
   389b4:	lsl	w3, w3, w7
   389b8:	orr	w3, w3, w10
   389bc:	str	w3, [x2]
   389c0:	cmp	w8, #0x0
   389c4:	ldr	w5, [x5, #780]
   389c8:	ldr	w1, [x1, #20]
   389cc:	add	w7, w5, w4
   389d0:	ccmp	w7, #0x1e, #0x2, ge  // ge = tcont
   389d4:	sdiv	w6, w1, w6
   389d8:	b.hi	38a00 <aarch64_ins_sve_addr_ri_s4@@Base+0xa8>  // b.pmore
   389dc:	add	w1, w8, w5
   389e0:	cmp	w1, #0x20
   389e4:	b.gt	38a00 <aarch64_ins_sve_addr_ri_s4@@Base+0xa8>
   389e8:	lsl	w4, w4, w5
   389ec:	bic	w4, w6, w4
   389f0:	lsl	w4, w4, w8
   389f4:	orr	w3, w4, w3
   389f8:	str	w3, [x2]
   389fc:	ret
   38a00:	stp	x29, x30, [sp, #-16]!
   38a04:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   38a08:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   38a0c:	mov	x29, sp
   38a10:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   38a14:	add	x3, x3, #0x960
   38a18:	add	x1, x1, #0x288
   38a1c:	add	x0, x0, #0x2a8
   38a20:	mov	w2, #0x169                 	// #361
   38a24:	bl	35ac0 <__assert_fail@plt>

0000000000038a28 <aarch64_ins_sve_addr_ri_u6@@Base>:
   38a28:	ldp	w4, w6, [x0, #16]
   38a2c:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   38a30:	mov	w0, #0x1                   	// #1
   38a34:	ldr	w9, [x1, #16]
   38a38:	ldr	x5, [x5, #3944]
   38a3c:	lsl	x6, x6, #3
   38a40:	ubfx	x4, x4, #5, #3
   38a44:	add	x8, x6, x5
   38a48:	ldr	w7, [x6, x5]
   38a4c:	lsl	w6, w0, w4
   38a50:	ldr	w3, [x8, #4]
   38a54:	cmp	w7, #0x0
   38a58:	sub	w4, w3, #0x1
   38a5c:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   38a60:	b.hi	38ad0 <aarch64_ins_sve_addr_ri_u6@@Base+0xa8>  // b.pmore
   38a64:	add	w4, w7, w3
   38a68:	cmp	w4, #0x20
   38a6c:	b.gt	38ad0 <aarch64_ins_sve_addr_ri_u6@@Base+0xa8>
   38a70:	mov	w4, #0xffffffff            	// #-1
   38a74:	ldr	w10, [x2]
   38a78:	lsl	w3, w4, w3
   38a7c:	bic	w3, w9, w3
   38a80:	ldr	w8, [x5, #800]
   38a84:	lsl	w3, w3, w7
   38a88:	orr	w3, w3, w10
   38a8c:	str	w3, [x2]
   38a90:	cmp	w8, #0x0
   38a94:	ldr	w5, [x5, #804]
   38a98:	ldr	w1, [x1, #20]
   38a9c:	add	w7, w5, w4
   38aa0:	ccmp	w7, #0x1e, #0x2, ge  // ge = tcont
   38aa4:	sdiv	w6, w1, w6
   38aa8:	b.hi	38ad0 <aarch64_ins_sve_addr_ri_u6@@Base+0xa8>  // b.pmore
   38aac:	add	w1, w8, w5
   38ab0:	cmp	w1, #0x20
   38ab4:	b.gt	38ad0 <aarch64_ins_sve_addr_ri_u6@@Base+0xa8>
   38ab8:	lsl	w4, w4, w5
   38abc:	bic	w4, w6, w4
   38ac0:	lsl	w4, w4, w8
   38ac4:	orr	w3, w4, w3
   38ac8:	str	w3, [x2]
   38acc:	ret
   38ad0:	stp	x29, x30, [sp, #-16]!
   38ad4:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   38ad8:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   38adc:	mov	x29, sp
   38ae0:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   38ae4:	add	x3, x3, #0x960
   38ae8:	add	x1, x1, #0x288
   38aec:	add	x0, x0, #0x2a8
   38af0:	mov	w2, #0x169                 	// #361
   38af4:	bl	35ac0 <__assert_fail@plt>

0000000000038af8 <aarch64_ins_sve_addr_rr_lsl@@Base>:
   38af8:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   38afc:	ldr	w4, [x0, #20]
   38b00:	ldr	w8, [x1, #16]
   38b04:	ldr	x5, [x5, #3944]
   38b08:	lsl	x4, x4, #3
   38b0c:	add	x7, x4, x5
   38b10:	ldr	w6, [x4, x5]
   38b14:	ldr	w3, [x7, #4]
   38b18:	cmp	w6, #0x0
   38b1c:	sub	w4, w3, #0x1
   38b20:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   38b24:	b.hi	38ba0 <aarch64_ins_sve_addr_rr_lsl@@Base+0xa8>  // b.pmore
   38b28:	add	w4, w6, w3
   38b2c:	cmp	w4, #0x20
   38b30:	b.gt	38ba0 <aarch64_ins_sve_addr_rr_lsl@@Base+0xa8>
   38b34:	mov	w4, #0xffffffff            	// #-1
   38b38:	ldr	w7, [x2]
   38b3c:	lsl	w3, w4, w3
   38b40:	bic	w3, w8, w3
   38b44:	lsl	w3, w3, w6
   38b48:	orr	w3, w3, w7
   38b4c:	str	w3, [x2]
   38b50:	ldr	w0, [x0, #24]
   38b54:	ldr	w7, [x1, #20]
   38b58:	lsl	x0, x0, #3
   38b5c:	add	x6, x0, x5
   38b60:	ldr	w1, [x0, x5]
   38b64:	ldr	w0, [x6, #4]
   38b68:	cmp	w1, #0x0
   38b6c:	add	w5, w0, w4
   38b70:	ccmp	w5, #0x1e, #0x2, ge  // ge = tcont
   38b74:	b.hi	38ba0 <aarch64_ins_sve_addr_rr_lsl@@Base+0xa8>  // b.pmore
   38b78:	add	w5, w1, w0
   38b7c:	cmp	w5, #0x20
   38b80:	b.gt	38ba0 <aarch64_ins_sve_addr_rr_lsl@@Base+0xa8>
   38b84:	lsl	w4, w4, w0
   38b88:	bic	w4, w7, w4
   38b8c:	mov	w0, #0x1                   	// #1
   38b90:	lsl	w4, w4, w1
   38b94:	orr	w3, w4, w3
   38b98:	str	w3, [x2]
   38b9c:	ret
   38ba0:	stp	x29, x30, [sp, #-16]!
   38ba4:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   38ba8:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   38bac:	mov	x29, sp
   38bb0:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   38bb4:	add	x3, x3, #0x960
   38bb8:	add	x1, x1, #0x288
   38bbc:	add	x0, x0, #0x2a8
   38bc0:	mov	w2, #0x169                 	// #361
   38bc4:	bl	35ac0 <__assert_fail@plt>

0000000000038bc8 <aarch64_ins_sve_addr_rz_xtw@@Base>:
   38bc8:	stp	x29, x30, [sp, #-16]!
   38bcc:	adrp	x6, a2000 <aarch64_operands@@Base+0x16bc0>
   38bd0:	mov	x29, sp
   38bd4:	ldr	w4, [x0, #20]
   38bd8:	ldr	x6, [x6, #3944]
   38bdc:	lsl	x4, x4, #3
   38be0:	ldr	w7, [x1, #16]
   38be4:	add	x5, x4, x6
   38be8:	ldr	w4, [x4, x6]
   38bec:	ldr	w3, [x5, #4]
   38bf0:	cmp	w4, #0x0
   38bf4:	sub	w5, w3, #0x1
   38bf8:	ccmp	w5, #0x1e, #0x2, ge  // ge = tcont
   38bfc:	b.hi	38cf0 <aarch64_ins_sve_addr_rz_xtw@@Base+0x128>  // b.pmore
   38c00:	add	w5, w4, w3
   38c04:	cmp	w5, #0x20
   38c08:	b.gt	38cf0 <aarch64_ins_sve_addr_rz_xtw@@Base+0x128>
   38c0c:	mov	w5, #0xffffffff            	// #-1
   38c10:	ldr	w8, [x2]
   38c14:	lsl	w3, w5, w3
   38c18:	bic	w3, w7, w3
   38c1c:	lsl	w3, w3, w4
   38c20:	orr	w3, w3, w8
   38c24:	str	w3, [x2]
   38c28:	ldr	w7, [x0, #24]
   38c2c:	ldr	w9, [x1, #20]
   38c30:	lsl	x7, x7, #3
   38c34:	add	x8, x7, x6
   38c38:	ldr	w7, [x7, x6]
   38c3c:	ldr	w4, [x8, #4]
   38c40:	cmp	w7, #0x0
   38c44:	add	w8, w4, w5
   38c48:	ccmp	w8, #0x1e, #0x2, ge  // ge = tcont
   38c4c:	b.hi	38cf0 <aarch64_ins_sve_addr_rz_xtw@@Base+0x128>  // b.pmore
   38c50:	add	w8, w7, w4
   38c54:	cmp	w8, #0x20
   38c58:	b.gt	38cf0 <aarch64_ins_sve_addr_rz_xtw@@Base+0x128>
   38c5c:	lsl	w4, w5, w4
   38c60:	bic	w4, w9, w4
   38c64:	lsl	w4, w4, w7
   38c68:	orr	w3, w4, w3
   38c6c:	str	w3, [x2]
   38c70:	ldr	w0, [x0, #28]
   38c74:	ldr	w1, [x1, #32]
   38c78:	lsl	x0, x0, #3
   38c7c:	cmp	w1, #0x8
   38c80:	add	x1, x0, x6
   38c84:	ldr	w0, [x0, x6]
   38c88:	ldr	w1, [x1, #4]
   38c8c:	b.eq	38cd0 <aarch64_ins_sve_addr_rz_xtw@@Base+0x108>  // b.none
   38c90:	cmp	w0, #0x0
   38c94:	sub	w4, w1, #0x1
   38c98:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   38c9c:	b.hi	38cec <aarch64_ins_sve_addr_rz_xtw@@Base+0x124>  // b.pmore
   38ca0:	add	w4, w0, w1
   38ca4:	cmp	w4, #0x20
   38ca8:	b.gt	38cec <aarch64_ins_sve_addr_rz_xtw@@Base+0x124>
   38cac:	lsl	w5, w5, w1
   38cb0:	mvn	w5, w5
   38cb4:	and	w5, w5, #0x1
   38cb8:	lsl	w5, w5, w0
   38cbc:	orr	w3, w5, w3
   38cc0:	str	w3, [x2]
   38cc4:	mov	w0, #0x1                   	// #1
   38cc8:	ldp	x29, x30, [sp], #16
   38ccc:	ret
   38cd0:	cmp	w0, #0x0
   38cd4:	add	w2, w1, w5
   38cd8:	ccmp	w2, #0x1e, #0x2, ge  // ge = tcont
   38cdc:	b.hi	38cec <aarch64_ins_sve_addr_rz_xtw@@Base+0x124>  // b.pmore
   38ce0:	add	w0, w0, w1
   38ce4:	cmp	w0, #0x20
   38ce8:	b.le	38cc4 <aarch64_ins_sve_addr_rz_xtw@@Base+0xfc>
   38cec:	bl	361c8 <init_disassemble_info@@Base+0x128>
   38cf0:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   38cf4:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   38cf8:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   38cfc:	add	x3, x3, #0x960
   38d00:	add	x1, x1, #0x288
   38d04:	add	x0, x0, #0x2a8
   38d08:	mov	w2, #0x169                 	// #361
   38d0c:	bl	35ac0 <__assert_fail@plt>

0000000000038d10 <aarch64_ins_sve_addr_zi_u5@@Base>:
   38d10:	ldp	w4, w6, [x0, #16]
   38d14:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   38d18:	mov	w0, #0x1                   	// #1
   38d1c:	ldr	w9, [x1, #16]
   38d20:	ldr	x5, [x5, #3944]
   38d24:	lsl	x6, x6, #3
   38d28:	ubfx	x4, x4, #5, #3
   38d2c:	add	x8, x6, x5
   38d30:	ldr	w7, [x6, x5]
   38d34:	lsl	w6, w0, w4
   38d38:	ldr	w3, [x8, #4]
   38d3c:	cmp	w7, #0x0
   38d40:	sub	w4, w3, #0x1
   38d44:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   38d48:	b.hi	38db8 <aarch64_ins_sve_addr_zi_u5@@Base+0xa8>  // b.pmore
   38d4c:	add	w4, w7, w3
   38d50:	cmp	w4, #0x20
   38d54:	b.gt	38db8 <aarch64_ins_sve_addr_zi_u5@@Base+0xa8>
   38d58:	mov	w4, #0xffffffff            	// #-1
   38d5c:	ldr	w10, [x2]
   38d60:	lsl	w3, w4, w3
   38d64:	bic	w3, w9, w3
   38d68:	ldr	w8, [x5, #344]
   38d6c:	lsl	w3, w3, w7
   38d70:	orr	w3, w3, w10
   38d74:	str	w3, [x2]
   38d78:	cmp	w8, #0x0
   38d7c:	ldr	w5, [x5, #348]
   38d80:	ldr	w1, [x1, #20]
   38d84:	add	w7, w5, w4
   38d88:	ccmp	w7, #0x1e, #0x2, ge  // ge = tcont
   38d8c:	sdiv	w6, w1, w6
   38d90:	b.hi	38db8 <aarch64_ins_sve_addr_zi_u5@@Base+0xa8>  // b.pmore
   38d94:	add	w1, w8, w5
   38d98:	cmp	w1, #0x20
   38d9c:	b.gt	38db8 <aarch64_ins_sve_addr_zi_u5@@Base+0xa8>
   38da0:	lsl	w4, w4, w5
   38da4:	bic	w4, w6, w4
   38da8:	lsl	w4, w4, w8
   38dac:	orr	w3, w4, w3
   38db0:	str	w3, [x2]
   38db4:	ret
   38db8:	stp	x29, x30, [sp, #-16]!
   38dbc:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   38dc0:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   38dc4:	mov	x29, sp
   38dc8:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   38dcc:	add	x3, x3, #0x960
   38dd0:	add	x1, x1, #0x288
   38dd4:	add	x0, x0, #0x2a8
   38dd8:	mov	w2, #0x169                 	// #361
   38ddc:	bl	35ac0 <__assert_fail@plt>

0000000000038de0 <aarch64_ins_sve_addr_zz_lsl@@Base>:
   38de0:	mov	x3, x2
   38de4:	mov	x2, x1
   38de8:	add	x1, x0, #0x18
   38dec:	ldr	w0, [x0, #20]
   38df0:	b	364c0 <init_disassemble_info@@Base+0x420>
   38df4:	nop

0000000000038df8 <aarch64_ins_sve_addr_zz_sxtw@@Base>:
   38df8:	mov	x3, x2
   38dfc:	mov	x2, x1
   38e00:	add	x1, x0, #0x18
   38e04:	ldr	w0, [x0, #20]
   38e08:	b	364c0 <init_disassemble_info@@Base+0x420>
   38e0c:	nop

0000000000038e10 <aarch64_ins_sve_addr_zz_uxtw@@Base>:
   38e10:	mov	x3, x2
   38e14:	mov	x2, x1
   38e18:	add	x1, x0, #0x18
   38e1c:	ldr	w0, [x0, #20]
   38e20:	b	364c0 <init_disassemble_info@@Base+0x420>
   38e24:	nop

0000000000038e28 <aarch64_ins_sve_aimm@@Base>:
   38e28:	mov	x3, x1
   38e2c:	stp	x29, x30, [sp, #-16]!
   38e30:	mov	x1, x2
   38e34:	mov	x29, sp
   38e38:	ldr	x2, [x3, #40]
   38e3c:	ldr	x3, [x3, #16]
   38e40:	cmp	x2, #0x8
   38e44:	b.eq	38e70 <aarch64_ins_sve_aimm@@Base+0x48>  // b.none
   38e48:	mov	x4, x0
   38e4c:	cbz	x3, 38e58 <aarch64_ins_sve_aimm@@Base+0x30>
   38e50:	tst	w3, #0xff
   38e54:	b.eq	38e88 <aarch64_ins_sve_aimm@@Base+0x60>  // b.none
   38e58:	mov	x0, x4
   38e5c:	and	w2, w3, #0xff
   38e60:	bl	36418 <init_disassemble_info@@Base+0x378>
   38e64:	mov	w0, #0x1                   	// #1
   38e68:	ldp	x29, x30, [sp], #16
   38e6c:	ret
   38e70:	and	w3, w3, #0xff
   38e74:	orr	w2, w3, #0x100
   38e78:	bl	36418 <init_disassemble_info@@Base+0x378>
   38e7c:	mov	w0, #0x1                   	// #1
   38e80:	ldp	x29, x30, [sp], #16
   38e84:	ret
   38e88:	cmp	x3, #0x0
   38e8c:	add	x2, x3, #0xff
   38e90:	csel	x3, x2, x3, lt  // lt = tstop
   38e94:	ubfx	w3, w3, #8, #8
   38e98:	orr	w2, w3, #0x100
   38e9c:	bl	36418 <init_disassemble_info@@Base+0x378>
   38ea0:	mov	w0, #0x1                   	// #1
   38ea4:	ldp	x29, x30, [sp], #16
   38ea8:	ret
   38eac:	nop

0000000000038eb0 <aarch64_ins_sve_asimm@@Base>:
   38eb0:	b	35920 <aarch64_ins_sve_aimm@plt>
   38eb4:	nop

0000000000038eb8 <aarch64_ins_sve_index@@Base>:
   38eb8:	stp	x29, x30, [sp, #-48]!
   38ebc:	mov	x29, sp
   38ec0:	stp	x19, x20, [sp, #16]
   38ec4:	mov	x19, x1
   38ec8:	mov	x20, x2
   38ecc:	str	x21, [sp, #32]
   38ed0:	mov	x21, x0
   38ed4:	ldrb	w0, [x1, #4]
   38ed8:	bl	35680 <aarch64_get_qualifier_esize@plt>
   38edc:	and	w1, w0, #0xff
   38ee0:	adrp	x2, a2000 <aarch64_operands@@Base+0x16bc0>
   38ee4:	ldr	w4, [x21, #20]
   38ee8:	ldr	w5, [x19, #16]
   38eec:	ldr	x2, [x2, #3944]
   38ef0:	lsl	x4, x4, #3
   38ef4:	add	x0, x4, x2
   38ef8:	ldr	w2, [x4, x2]
   38efc:	ldr	w0, [x0, #4]
   38f00:	cmp	w2, #0x0
   38f04:	sub	w4, w0, #0x1
   38f08:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   38f0c:	b.hi	38f70 <aarch64_ins_sve_index@@Base+0xb8>  // b.pmore
   38f10:	add	w3, w2, w0
   38f14:	cmp	w3, #0x20
   38f18:	b.gt	38f70 <aarch64_ins_sve_index@@Base+0xb8>
   38f1c:	mov	w3, #0xffffffff            	// #-1
   38f20:	ldr	w4, [x20]
   38f24:	lsl	w3, w3, w0
   38f28:	bic	w3, w5, w3
   38f2c:	mov	x0, x20
   38f30:	mov	w5, #0x74                  	// #116
   38f34:	lsl	w3, w3, w2
   38f38:	orr	w3, w4, w3
   38f3c:	str	w3, [x20]
   38f40:	mov	w2, #0x0                   	// #0
   38f44:	mov	w4, #0x2b                  	// #43
   38f48:	mov	w3, #0x2                   	// #2
   38f4c:	ldr	x6, [x19, #24]
   38f50:	lsl	x6, x6, #1
   38f54:	madd	w1, w1, w6, w1
   38f58:	bl	36250 <init_disassemble_info@@Base+0x1b0>
   38f5c:	mov	w0, #0x1                   	// #1
   38f60:	ldp	x19, x20, [sp, #16]
   38f64:	ldr	x21, [sp, #32]
   38f68:	ldp	x29, x30, [sp], #48
   38f6c:	ret
   38f70:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   38f74:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   38f78:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   38f7c:	add	x3, x3, #0x960
   38f80:	add	x1, x1, #0x288
   38f84:	add	x0, x0, #0x2a8
   38f88:	mov	w2, #0x169                 	// #361
   38f8c:	bl	35ac0 <__assert_fail@plt>

0000000000038f90 <aarch64_ins_sve_limm_mov@@Base>:
   38f90:	b	353a0 <aarch64_ins_limm@plt>
   38f94:	nop

0000000000038f98 <aarch64_ins_sve_quad_index@@Base>:
   38f98:	stp	x29, x30, [sp, #-16]!
   38f9c:	mov	x4, x1
   38fa0:	mov	x1, x2
   38fa4:	mov	x29, sp
   38fa8:	ldr	w3, [x0, #16]
   38fac:	ldr	w2, [x4, #16]
   38fb0:	ubfx	x3, x3, #5, #3
   38fb4:	lsr	w5, w2, w3
   38fb8:	cbnz	w5, 38fd8 <aarch64_ins_sve_quad_index@@Base+0x40>
   38fbc:	ldr	x4, [x4, #24]
   38fc0:	lsl	x3, x4, x3
   38fc4:	add	w2, w2, w3
   38fc8:	bl	36418 <init_disassemble_info@@Base+0x378>
   38fcc:	mov	w0, #0x1                   	// #1
   38fd0:	ldp	x29, x30, [sp], #16
   38fd4:	ret
   38fd8:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   38fdc:	add	x3, x3, #0x960
   38fe0:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   38fe4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   38fe8:	add	x3, x3, #0x1b8
   38fec:	add	x1, x1, #0x330
   38ff0:	add	x0, x0, #0x648
   38ff4:	mov	w2, #0x4a2                 	// #1186
   38ff8:	bl	35ac0 <__assert_fail@plt>
   38ffc:	nop

0000000000039000 <aarch64_ins_sve_reglist@@Base>:
   39000:	adrp	x3, a2000 <aarch64_operands@@Base+0x16bc0>
   39004:	ldr	w0, [x0, #20]
   39008:	ldrb	w1, [x1, #16]
   3900c:	ldr	x3, [x3, #3944]
   39010:	lsl	x0, x0, #3
   39014:	and	w4, w1, #0x1f
   39018:	add	x1, x0, x3
   3901c:	ldr	w3, [x0, x3]
   39020:	ldr	w0, [x1, #4]
   39024:	cmp	w3, #0x0
   39028:	sub	w1, w0, #0x1
   3902c:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   39030:	b.hi	39064 <aarch64_ins_sve_reglist@@Base+0x64>  // b.pmore
   39034:	add	w1, w3, w0
   39038:	cmp	w1, #0x20
   3903c:	b.gt	39064 <aarch64_ins_sve_reglist@@Base+0x64>
   39040:	mov	w1, #0xffffffff            	// #-1
   39044:	ldr	w5, [x2]
   39048:	lsl	w1, w1, w0
   3904c:	bic	w1, w4, w1
   39050:	mov	w0, #0x1                   	// #1
   39054:	lsl	w1, w1, w3
   39058:	orr	w1, w5, w1
   3905c:	str	w1, [x2]
   39060:	ret
   39064:	stp	x29, x30, [sp, #-16]!
   39068:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   3906c:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   39070:	mov	x29, sp
   39074:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   39078:	add	x3, x3, #0x960
   3907c:	add	x1, x1, #0x288
   39080:	add	x0, x0, #0x2a8
   39084:	mov	w2, #0x169                 	// #361
   39088:	bl	35ac0 <__assert_fail@plt>
   3908c:	nop

0000000000039090 <aarch64_ins_sve_scale@@Base>:
   39090:	stp	x29, x30, [sp, #-32]!
   39094:	mov	x29, sp
   39098:	stp	x19, x20, [sp, #16]
   3909c:	mov	x20, x1
   390a0:	mov	x19, x2
   390a4:	mov	x1, x2
   390a8:	ldr	w2, [x20, #16]
   390ac:	bl	36418 <init_disassemble_info@@Base+0x378>
   390b0:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   390b4:	ldr	x3, [x20, #40]
   390b8:	ldr	x0, [x0, #3944]
   390bc:	sub	w1, w3, #0x1
   390c0:	ldr	w2, [x0, #776]
   390c4:	ldr	w0, [x0, #780]
   390c8:	cmp	w2, #0x0
   390cc:	sub	w3, w0, #0x1
   390d0:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   390d4:	b.hi	39110 <aarch64_ins_sve_scale@@Base+0x80>  // b.pmore
   390d8:	add	w3, w2, w0
   390dc:	cmp	w3, #0x20
   390e0:	b.gt	39110 <aarch64_ins_sve_scale@@Base+0x80>
   390e4:	mov	w3, #0xffffffff            	// #-1
   390e8:	ldr	w4, [x19]
   390ec:	lsl	w3, w3, w0
   390f0:	bic	w3, w1, w3
   390f4:	mov	w0, #0x1                   	// #1
   390f8:	lsl	w3, w3, w2
   390fc:	orr	w3, w4, w3
   39100:	str	w3, [x19]
   39104:	ldp	x19, x20, [sp, #16]
   39108:	ldp	x29, x30, [sp], #32
   3910c:	ret
   39110:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   39114:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   39118:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3911c:	add	x3, x3, #0x960
   39120:	add	x1, x1, #0x288
   39124:	add	x0, x0, #0x2a8
   39128:	mov	w2, #0x169                 	// #361
   3912c:	bl	35ac0 <__assert_fail@plt>

0000000000039130 <aarch64_ins_sve_shlimm@@Base>:
   39130:	stp	x29, x30, [sp, #-48]!
   39134:	mov	x29, sp
   39138:	ldr	w4, [x1, #8]
   3913c:	stp	x19, x20, [sp, #16]
   39140:	cmp	w4, #0x0
   39144:	str	x21, [sp, #32]
   39148:	b.le	3919c <aarch64_ins_sve_shlimm@@Base+0x6c>
   3914c:	sub	w4, w4, #0x1
   39150:	mov	x20, x0
   39154:	mov	x19, x1
   39158:	mov	x21, x2
   3915c:	sbfiz	x5, x4, #3, #32
   39160:	sub	x4, x5, w4, sxtw
   39164:	add	x4, x3, x4, lsl #3
   39168:	ldrb	w0, [x4, #28]
   3916c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   39170:	mov	w3, w0
   39174:	ldr	x2, [x19, #16]
   39178:	mov	x1, x21
   3917c:	mov	x0, x20
   39180:	add	w2, w2, w3, uxtb #3
   39184:	bl	36418 <init_disassemble_info@@Base+0x378>
   39188:	mov	w0, #0x1                   	// #1
   3918c:	ldp	x19, x20, [sp, #16]
   39190:	ldr	x21, [sp, #32]
   39194:	ldp	x29, x30, [sp], #48
   39198:	ret
   3919c:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   391a0:	add	x3, x3, #0x960
   391a4:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   391a8:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   391ac:	add	x3, x3, #0x1d8
   391b0:	add	x1, x1, #0x330
   391b4:	add	x0, x0, #0x670
   391b8:	mov	w2, #0x4cc                 	// #1228
   391bc:	bl	35ac0 <__assert_fail@plt>

00000000000391c0 <aarch64_ins_sve_shrimm@@Base>:
   391c0:	stp	x29, x30, [sp, #-48]!
   391c4:	mov	x29, sp
   391c8:	stp	x19, x20, [sp, #16]
   391cc:	mov	x19, x0
   391d0:	ldr	w0, [x0, #16]
   391d4:	ldr	w4, [x1, #8]
   391d8:	str	x21, [sp, #32]
   391dc:	ubfx	x0, x0, #5, #3
   391e0:	cmp	w4, w0
   391e4:	b.lt	39234 <aarch64_ins_sve_shrimm@@Base+0x74>  // b.tstop
   391e8:	sub	w4, w4, w0
   391ec:	mov	x20, x1
   391f0:	mov	x21, x2
   391f4:	lsl	x5, x4, #3
   391f8:	sub	x4, x5, x4
   391fc:	add	x4, x3, x4, lsl #3
   39200:	ldrb	w0, [x4, #28]
   39204:	bl	35680 <aarch64_get_qualifier_esize@plt>
   39208:	ubfiz	w2, w0, #4, #8
   3920c:	ldr	x3, [x20, #16]
   39210:	mov	x1, x21
   39214:	mov	x0, x19
   39218:	sub	w2, w2, w3
   3921c:	bl	36418 <init_disassemble_info@@Base+0x378>
   39220:	mov	w0, #0x1                   	// #1
   39224:	ldp	x19, x20, [sp, #16]
   39228:	ldr	x21, [sp, #32]
   3922c:	ldp	x29, x30, [sp], #48
   39230:	ret
   39234:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   39238:	add	x3, x3, #0x960
   3923c:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   39240:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   39244:	add	x3, x3, #0x1f0
   39248:	add	x1, x1, #0x330
   3924c:	add	x0, x0, #0x680
   39250:	mov	w2, #0x4de                 	// #1246
   39254:	bl	35ac0 <__assert_fail@plt>

0000000000039258 <aarch64_ins_sve_float_half_one@@Base>:
   39258:	adrp	x3, a2000 <aarch64_operands@@Base+0x16bc0>
   3925c:	ldr	w0, [x0, #20]
   39260:	ldr	x6, [x1, #16]
   39264:	mov	x5, #0x3f000000            	// #1056964608
   39268:	ldr	x3, [x3, #3944]
   3926c:	lsl	x0, x0, #3
   39270:	add	x1, x0, x3
   39274:	ldr	w4, [x0, x3]
   39278:	ldr	w1, [x1, #4]
   3927c:	mvn	w3, w4
   39280:	sub	w0, w1, #0x1
   39284:	cmp	w0, #0x1e
   39288:	cset	w0, ls  // ls = plast
   3928c:	cmp	x6, x5
   39290:	and	w3, w0, w3, lsr #31
   39294:	b.eq	392d0 <aarch64_ins_sve_float_half_one@@Base+0x78>  // b.none
   39298:	cbz	w3, 392e0 <aarch64_ins_sve_float_half_one@@Base+0x88>
   3929c:	add	w0, w1, w4
   392a0:	cmp	w0, #0x20
   392a4:	b.gt	392e0 <aarch64_ins_sve_float_half_one@@Base+0x88>
   392a8:	mov	w0, #0xffffffff            	// #-1
   392ac:	ldr	w3, [x2]
   392b0:	lsl	w0, w0, w1
   392b4:	mvn	w0, w0
   392b8:	and	w0, w0, #0x1
   392bc:	lsl	w0, w0, w4
   392c0:	orr	w0, w3, w0
   392c4:	str	w0, [x2]
   392c8:	mov	w0, #0x1                   	// #1
   392cc:	ret
   392d0:	cbz	w3, 392e0 <aarch64_ins_sve_float_half_one@@Base+0x88>
   392d4:	add	w0, w1, w4
   392d8:	cmp	w0, #0x20
   392dc:	b.le	392c8 <aarch64_ins_sve_float_half_one@@Base+0x70>
   392e0:	stp	x29, x30, [sp, #-16]!
   392e4:	mov	x29, sp
   392e8:	bl	361c8 <init_disassemble_info@@Base+0x128>
   392ec:	nop

00000000000392f0 <aarch64_ins_sve_float_half_two@@Base>:
   392f0:	b	39258 <aarch64_ins_sve_float_half_one@@Base>
   392f4:	nop

00000000000392f8 <aarch64_ins_sve_float_zero_one@@Base>:
   392f8:	adrp	x3, a2000 <aarch64_operands@@Base+0x16bc0>
   392fc:	ldr	w0, [x0, #20]
   39300:	ldr	x5, [x1, #16]
   39304:	ldr	x3, [x3, #3944]
   39308:	lsl	x0, x0, #3
   3930c:	add	x1, x0, x3
   39310:	ldr	w4, [x0, x3]
   39314:	ldr	w1, [x1, #4]
   39318:	mvn	w3, w4
   3931c:	sub	w0, w1, #0x1
   39320:	cmp	w0, #0x1e
   39324:	cset	w0, ls  // ls = plast
   39328:	and	w3, w0, w3, lsr #31
   3932c:	cbnz	x5, 3934c <aarch64_ins_sve_float_zero_one@@Base+0x54>
   39330:	cbz	w3, 39340 <aarch64_ins_sve_float_zero_one@@Base+0x48>
   39334:	add	w0, w1, w4
   39338:	cmp	w0, #0x20
   3933c:	b.le	3937c <aarch64_ins_sve_float_zero_one@@Base+0x84>
   39340:	stp	x29, x30, [sp, #-16]!
   39344:	mov	x29, sp
   39348:	bl	361c8 <init_disassemble_info@@Base+0x128>
   3934c:	cbz	w3, 39340 <aarch64_ins_sve_float_zero_one@@Base+0x48>
   39350:	add	w0, w1, w4
   39354:	cmp	w0, #0x20
   39358:	b.gt	39340 <aarch64_ins_sve_float_zero_one@@Base+0x48>
   3935c:	mov	w0, #0xffffffff            	// #-1
   39360:	ldr	w3, [x2]
   39364:	lsl	w0, w0, w1
   39368:	mvn	w0, w0
   3936c:	and	w0, w0, #0x1
   39370:	lsl	w0, w0, w4
   39374:	orr	w0, w3, w0
   39378:	str	w0, [x2]
   3937c:	mov	w0, #0x1                   	// #1
   39380:	ret
   39384:	nop

0000000000039388 <aarch64_opcode_encode@@Base>:
   39388:	stp	x29, x30, [sp, #-464]!
   3938c:	mov	x29, sp
   39390:	stp	x19, x20, [sp, #16]
   39394:	add	x20, sp, #0x68
   39398:	mov	x19, x0
   3939c:	mov	x0, x20
   393a0:	stp	x21, x22, [sp, #32]
   393a4:	mov	x22, x2
   393a8:	mov	x21, x4
   393ac:	mov	x2, #0x168                 	// #360
   393b0:	stp	x23, x24, [sp, #48]
   393b4:	mov	x23, x5
   393b8:	stp	x25, x26, [sp, #64]
   393bc:	mov	x25, x3
   393c0:	bl	35050 <memcpy@plt>
   393c4:	ldr	x0, [sp, #112]
   393c8:	cbz	x0, 396f0 <aarch64_opcode_encode@@Base+0x368>
   393cc:	cmp	x0, x19
   393d0:	b.ne	3a60c <aarch64_opcode_encode@@Base+0x1284>  // b.any
   393d4:	mov	x1, x21
   393d8:	mov	x0, x20
   393dc:	bl	354e0 <aarch64_match_operands_constraint@plt>
   393e0:	cbnz	w0, 39400 <aarch64_opcode_encode@@Base+0x78>
   393e4:	mov	w0, #0x0                   	// #0
   393e8:	ldp	x19, x20, [sp, #16]
   393ec:	ldp	x21, x22, [sp, #32]
   393f0:	ldp	x23, x24, [sp, #48]
   393f4:	ldp	x25, x26, [sp, #64]
   393f8:	ldp	x29, x30, [sp], #464
   393fc:	ret
   39400:	ldr	w1, [x19, #8]
   39404:	mov	x0, x19
   39408:	str	w1, [sp, #104]
   3940c:	bl	35170 <aarch64_num_of_operands@plt>
   39410:	cbz	w0, 3959c <aarch64_opcode_encode@@Base+0x214>
   39414:	add	x6, x20, #0x18
   39418:	add	x24, x19, #0x20
   3941c:	mov	x1, #0x0                   	// #0
   39420:	str	x27, [sp, #80]
   39424:	nop
   39428:	ldr	w2, [x24, x1, lsl #2]
   3942c:	ldr	w0, [x6]
   39430:	cmp	w2, w0
   39434:	b.ne	3a5e8 <aarch64_opcode_encode@@Base+0x1260>  // b.any
   39438:	str	w1, [x6, #8]
   3943c:	cbz	x25, 39448 <aarch64_opcode_encode@@Base+0xc0>
   39440:	ldrb	w0, [x6, #4]
   39444:	strb	w0, [x25]
   39448:	add	x1, x1, #0x1
   3944c:	add	x6, x6, #0x38
   39450:	cmp	x1, #0x6
   39454:	b.ne	39428 <aarch64_opcode_encode@@Base+0xa0>  // b.any
   39458:	mov	x0, x19
   3945c:	bl	352f0 <aarch64_find_real_opcode@plt>
   39460:	mov	x25, x0
   39464:	cbz	x0, 39470 <aarch64_opcode_encode@@Base+0xe8>
   39468:	ldr	x0, [x19, #120]
   3946c:	tbnz	w0, #20, 396f8 <aarch64_opcode_encode@@Base+0x370>
   39470:	adrp	x26, a2000 <aarch64_operands@@Base+0x16bc0>
   39474:	add	x27, x19, #0x38
   39478:	add	x25, x20, #0x18
   3947c:	ldr	x26, [x26, #4032]
   39480:	ldr	w3, [x24]
   39484:	cbz	w3, 394b4 <aarch64_opcode_encode@@Base+0x12c>
   39488:	ldrb	w0, [x25, #48]
   3948c:	tbnz	w0, #0, 394a4 <aarch64_opcode_encode@@Base+0x11c>
   39490:	ubfiz	x0, x3, #1, #32
   39494:	add	x3, x0, w3, uxtw
   39498:	add	x0, x26, x3, lsl #4
   3949c:	ldr	w1, [x0, #16]
   394a0:	tbnz	w1, #0, 396cc <aarch64_opcode_encode@@Base+0x344>
   394a4:	add	x24, x24, #0x4
   394a8:	add	x25, x25, #0x38
   394ac:	cmp	x27, x24
   394b0:	b.ne	39480 <aarch64_opcode_encode@@Base+0xf8>  // b.any
   394b4:	ldr	x1, [x19, #120]
   394b8:	mov	x0, #0xff0                 	// #4080
   394bc:	movk	x0, #0x8c0, lsl #16
   394c0:	tst	x1, x0
   394c4:	ldr	x24, [sp, #112]
   394c8:	b.ne	39790 <aarch64_opcode_encode@@Base+0x408>  // b.any
   394cc:	ldr	w0, [x24, #16]
   394d0:	cmp	w0, #0x52
   394d4:	b.eq	3a1a0 <aarch64_opcode_encode@@Base+0xe18>  // b.none
   394d8:	b.hi	39618 <aarch64_opcode_encode@@Base+0x290>  // b.pmore
   394dc:	cmp	w0, #0x4c
   394e0:	b.eq	3a1d0 <aarch64_opcode_encode@@Base+0xe48>  // b.none
   394e4:	b.ls	39694 <aarch64_opcode_encode@@Base+0x30c>  // b.plast
   394e8:	cmp	w0, #0x51
   394ec:	b.ne	395c0 <aarch64_opcode_encode@@Base+0x238>  // b.any
   394f0:	mov	x0, x20
   394f4:	bl	36128 <init_disassemble_info@@Base+0x88>
   394f8:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   394fc:	add	w3, w0, #0x1
   39500:	ldr	x0, [x1, #3944]
   39504:	ldp	w2, w4, [x0, #64]
   39508:	cmp	w2, #0x0
   3950c:	sub	w0, w4, #0x1
   39510:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   39514:	b.hi	3986c <aarch64_opcode_encode@@Base+0x4e4>  // b.pmore
   39518:	add	w0, w2, w4
   3951c:	cmp	w0, #0x20
   39520:	b.gt	3986c <aarch64_opcode_encode@@Base+0x4e4>
   39524:	mov	w0, #0xffffffff            	// #-1
   39528:	ldr	w1, [sp, #104]
   3952c:	lsl	w0, w0, w4
   39530:	bic	w0, w3, w0
   39534:	lsl	w0, w0, w2
   39538:	orr	w0, w1, w0
   3953c:	str	w0, [sp, #104]
   39540:	ldr	x6, [x19, #136]
   39544:	ldr	w1, [x22]
   39548:	cbz	x6, 39574 <aarch64_opcode_encode@@Base+0x1ec>
   3954c:	mov	x5, x23
   39550:	mov	x4, x21
   39554:	mov	x0, x20
   39558:	mov	w3, #0x1                   	// #1
   3955c:	mov	x2, #0x0                   	// #0
   39560:	blr	x6
   39564:	sub	w0, w0, #0x1
   39568:	cmp	w0, #0x2
   3956c:	b.ls	396e8 <aarch64_opcode_encode@@Base+0x360>  // b.plast
   39570:	ldr	w1, [x22]
   39574:	mov	x5, x23
   39578:	mov	x4, x21
   3957c:	mov	x0, x20
   39580:	mov	w3, #0x1                   	// #1
   39584:	mov	x2, #0x0                   	// #0
   39588:	bl	35250 <verify_constraints@plt>
   3958c:	sub	w0, w0, #0x1
   39590:	cmp	w0, #0x2
   39594:	b.ls	396e8 <aarch64_opcode_encode@@Base+0x360>  // b.plast
   39598:	ldr	x27, [sp, #80]
   3959c:	mov	w0, #0x1                   	// #1
   395a0:	ldr	w1, [sp, #104]
   395a4:	str	w1, [x22]
   395a8:	ldp	x19, x20, [sp, #16]
   395ac:	ldp	x21, x22, [sp, #32]
   395b0:	ldp	x23, x24, [sp, #48]
   395b4:	ldp	x25, x26, [sp, #64]
   395b8:	ldp	x29, x30, [sp], #464
   395bc:	ret
   395c0:	cmp	w0, #0x4e
   395c4:	b.ls	39540 <aarch64_opcode_encode@@Base+0x1b8>  // b.plast
   395c8:	mov	x0, x20
   395cc:	bl	36128 <init_disassemble_info@@Base+0x88>
   395d0:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   395d4:	ldr	x1, [x1, #3944]
   395d8:	ldp	w3, w4, [x1, #64]
   395dc:	cmp	w3, #0x0
   395e0:	sub	w1, w4, #0x1
   395e4:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   395e8:	b.hi	3986c <aarch64_opcode_encode@@Base+0x4e4>  // b.pmore
   395ec:	add	w1, w3, w4
   395f0:	cmp	w1, #0x20
   395f4:	b.gt	3986c <aarch64_opcode_encode@@Base+0x4e4>
   395f8:	mov	w1, #0xffffffff            	// #-1
   395fc:	ldr	w2, [sp, #104]
   39600:	lsl	w1, w1, w4
   39604:	bic	w0, w0, w1
   39608:	lsl	w0, w0, w3
   3960c:	orr	w0, w2, w0
   39610:	str	w0, [sp, #104]
   39614:	b	39540 <aarch64_opcode_encode@@Base+0x1b8>
   39618:	cmp	w0, #0x56
   3961c:	b.eq	3a1fc <aarch64_opcode_encode@@Base+0xe74>  // b.none
   39620:	b.ls	39658 <aarch64_opcode_encode@@Base+0x2d0>  // b.plast
   39624:	cmp	w0, #0x59
   39628:	b.ne	39540 <aarch64_opcode_encode@@Base+0x1b8>  // b.any
   3962c:	mov	x0, x20
   39630:	bl	36128 <init_disassemble_info@@Base+0x88>
   39634:	mov	w1, #0x1                   	// #1
   39638:	mov	w5, #0x70                  	// #112
   3963c:	lsl	w1, w1, w0
   39640:	mov	w4, #0x76                  	// #118
   39644:	mov	x0, x20
   39648:	mov	w3, #0x2                   	// #2
   3964c:	mov	w2, #0x0                   	// #0
   39650:	bl	36250 <init_disassemble_info@@Base+0x1b0>
   39654:	b	39540 <aarch64_opcode_encode@@Base+0x1b8>
   39658:	cmp	w0, #0x54
   3965c:	b.ls	39844 <aarch64_opcode_encode@@Base+0x4bc>  // b.plast
   39660:	cmp	w0, #0x55
   39664:	b.ne	39540 <aarch64_opcode_encode@@Base+0x1b8>  // b.any
   39668:	mov	x0, x20
   3966c:	bl	36128 <init_disassemble_info@@Base+0x88>
   39670:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   39674:	ldr	x1, [x1, #3944]
   39678:	ldr	w3, [x1, #912]
   3967c:	ldr	w4, [x1, #916]
   39680:	cmp	w3, #0x0
   39684:	sub	w1, w4, #0x1
   39688:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   3968c:	b.ls	395ec <aarch64_opcode_encode@@Base+0x264>  // b.plast
   39690:	b	3986c <aarch64_opcode_encode@@Base+0x4e4>
   39694:	cmp	w0, #0x47
   39698:	b.eq	3988c <aarch64_opcode_encode@@Base+0x504>  // b.none
   3969c:	cmp	w0, #0x4b
   396a0:	b.ne	39540 <aarch64_opcode_encode@@Base+0x1b8>  // b.any
   396a4:	mov	x0, x20
   396a8:	bl	36128 <init_disassemble_info@@Base+0x88>
   396ac:	mov	w5, #0x8                   	// #8
   396b0:	mov	w1, w0
   396b4:	mov	w4, #0x45                  	// #69
   396b8:	mov	x0, x20
   396bc:	mov	w3, #0x2                   	// #2
   396c0:	mov	w2, #0x0                   	// #0
   396c4:	bl	36250 <init_disassemble_info@@Base+0x1b0>
   396c8:	b	39540 <aarch64_opcode_encode@@Base+0x1b8>
   396cc:	mov	x4, x21
   396d0:	mov	x3, x20
   396d4:	mov	x2, x20
   396d8:	mov	x1, x25
   396dc:	bl	35980 <aarch64_insert_operand@plt>
   396e0:	cbnz	w0, 394a4 <aarch64_opcode_encode@@Base+0x11c>
   396e4:	nop
   396e8:	ldr	x27, [sp, #80]
   396ec:	b	393e4 <aarch64_opcode_encode@@Base+0x5c>
   396f0:	str	x19, [sp, #112]
   396f4:	b	393d4 <aarch64_opcode_encode@@Base+0x4c>
   396f8:	ldr	x0, [sp, #112]
   396fc:	ldr	x1, [x0, #120]
   39700:	tbz	w1, #20, 39778 <aarch64_opcode_encode@@Base+0x3f0>
   39704:	ldr	w0, [x0, #20]
   39708:	cmp	w0, #0x2f
   3970c:	b.hi	39f18 <aarch64_opcode_encode@@Base+0xb90>  // b.pmore
   39710:	cmp	w0, #0x2d
   39714:	b.hi	3a408 <aarch64_opcode_encode@@Base+0x1080>  // b.pmore
   39718:	cmp	w0, #0x28
   3971c:	b.hi	39eec <aarch64_opcode_encode@@Base+0xb64>  // b.pmore
   39720:	cmp	w0, #0x26
   39724:	b.hi	3a288 <aarch64_opcode_encode@@Base+0xf00>  // b.pmore
   39728:	b.eq	3a3dc <aarch64_opcode_encode@@Base+0x1054>  // b.none
   3972c:	cmp	w0, #0x23
   39730:	b.hi	3a388 <aarch64_opcode_encode@@Base+0x1000>  // b.pmore
   39734:	b.ne	39778 <aarch64_opcode_encode@@Base+0x3f0>  // b.any
   39738:	ldp	x0, x1, [sp, #184]
   3973c:	stp	x0, x1, [sp, #240]
   39740:	ldrb	w0, [sp, #232]
   39744:	ldp	x4, x5, [sp, #200]
   39748:	and	w0, w0, #0xfffffffe
   3974c:	ldp	x2, x3, [sp, #216]
   39750:	mov	w6, #0x2                   	// #2
   39754:	ldr	x1, [sp, #232]
   39758:	mov	w7, #0x1f                  	// #31
   3975c:	str	w7, [sp, #200]
   39760:	strb	w0, [sp, #232]
   39764:	str	w6, [sp, #248]
   39768:	stp	x4, x5, [sp, #256]
   3976c:	stp	x2, x3, [sp, #272]
   39770:	str	x1, [sp, #288]
   39774:	nop
   39778:	mov	x19, x25
   3977c:	mov	x1, x25
   39780:	add	x24, x25, #0x20
   39784:	mov	x0, x20
   39788:	bl	35410 <aarch64_replace_opcode@plt>
   3978c:	b	39470 <aarch64_opcode_encode@@Base+0xe8>
   39790:	ldr	x0, [x24, #120]
   39794:	tbnz	w0, #4, 39be0 <aarch64_opcode_encode@@Base+0x858>
   39798:	tbnz	w0, #5, 39af4 <aarch64_opcode_encode@@Base+0x76c>
   3979c:	tbnz	w0, #27, 39998 <aarch64_opcode_encode@@Base+0x610>
   397a0:	tbnz	w0, #6, 398b4 <aarch64_opcode_encode@@Base+0x52c>
   397a4:	tbnz	w0, #7, 39a3c <aarch64_opcode_encode@@Base+0x6b4>
   397a8:	tbnz	w0, #8, 39c34 <aarch64_opcode_encode@@Base+0x8ac>
   397ac:	tbnz	w0, #9, 39dac <aarch64_opcode_encode@@Base+0xa24>
   397b0:	tbnz	w0, #10, 39d08 <aarch64_opcode_encode@@Base+0x980>
   397b4:	tbnz	w0, #11, 39e88 <aarch64_opcode_encode@@Base+0xb00>
   397b8:	tbz	w0, #22, 394cc <aarch64_opcode_encode@@Base+0x144>
   397bc:	ldr	w0, [x24, #20]
   397c0:	cmp	w0, #0x47
   397c4:	b.eq	3a55c <aarch64_opcode_encode@@Base+0x11d4>  // b.none
   397c8:	b.hi	3a0f8 <aarch64_opcode_encode@@Base+0xd70>  // b.pmore
   397cc:	cmp	w0, #0x3f
   397d0:	b.eq	3a460 <aarch64_opcode_encode@@Base+0x10d8>  // b.none
   397d4:	b.ls	3a08c <aarch64_opcode_encode@@Base+0xd04>  // b.plast
   397d8:	cmp	w0, #0x45
   397dc:	b.eq	3a4a4 <aarch64_opcode_encode@@Base+0x111c>  // b.none
   397e0:	cmp	w0, #0x46
   397e4:	b.ne	394cc <aarch64_opcode_encode@@Base+0x144>  // b.any
   397e8:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   397ec:	ldr	w6, [sp, #104]
   397f0:	mov	w0, #0xffffffff            	// #-1
   397f4:	ldr	x1, [x1, #3944]
   397f8:	add	x8, x1, #0x2bc
   397fc:	ldp	w3, w4, [x8, #-12]
   39800:	ldp	w2, w5, [x8, #4]
   39804:	cmp	w2, #0x0
   39808:	lsr	w1, w6, w3
   3980c:	lsl	w3, w0, w4
   39810:	add	w4, w5, w0
   39814:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   39818:	b.hi	3a140 <aarch64_opcode_encode@@Base+0xdb8>  // b.pmore
   3981c:	add	w4, w2, w5
   39820:	cmp	w4, #0x20
   39824:	b.gt	3a140 <aarch64_opcode_encode@@Base+0xdb8>
   39828:	lsl	w0, w0, w5
   3982c:	orr	w0, w0, w3
   39830:	bic	w0, w1, w0
   39834:	lsl	w0, w0, w2
   39838:	orr	w0, w0, w6
   3983c:	str	w0, [sp, #104]
   39840:	b	394cc <aarch64_opcode_encode@@Base+0x144>
   39844:	mov	x0, x20
   39848:	bl	36128 <init_disassemble_info@@Base+0x88>
   3984c:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   39850:	ldr	x1, [x1, #3944]
   39854:	ldr	w3, [x1, #896]
   39858:	ldr	w4, [x1, #900]
   3985c:	cmp	w3, #0x0
   39860:	sub	w1, w4, #0x1
   39864:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   39868:	b.ls	395ec <aarch64_opcode_encode@@Base+0x264>  // b.plast
   3986c:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   39870:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   39874:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   39878:	add	x3, x3, #0x960
   3987c:	add	x1, x1, #0x288
   39880:	add	x0, x0, #0x2a8
   39884:	mov	w2, #0x169                 	// #361
   39888:	bl	35ac0 <__assert_fail@plt>
   3988c:	mov	x0, x20
   39890:	bl	36128 <init_disassemble_info@@Base+0x88>
   39894:	mov	w5, #0x8                   	// #8
   39898:	mov	w1, w0
   3989c:	mov	w4, #0x44                  	// #68
   398a0:	mov	x0, x20
   398a4:	mov	w3, #0x2                   	// #2
   398a8:	mov	w2, #0x0                   	// #0
   398ac:	bl	36250 <init_disassemble_info@@Base+0x1b0>
   398b0:	b	39540 <aarch64_opcode_encode@@Base+0x1b8>
   398b4:	mov	x0, x24
   398b8:	bl	357b0 <aarch64_select_operand_for_sizeq_field_coding@plt>
   398bc:	sbfiz	x1, x0, #3, #32
   398c0:	add	x2, sp, #0x84
   398c4:	sub	x0, x1, w0, sxtw
   398c8:	lsl	x0, x0, #3
   398cc:	ldrb	w0, [x2, x0]
   398d0:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   398d4:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   398d8:	ldr	x24, [sp, #112]
   398dc:	ldr	x4, [x4, #3944]
   398e0:	ldr	w3, [x24, #12]
   398e4:	ldp	w6, w1, [x4, #88]
   398e8:	cmp	w6, #0x0
   398ec:	sub	w2, w1, #0x1
   398f0:	ccmp	w2, #0x1e, #0x2, ge  // ge = tcont
   398f4:	b.hi	3a140 <aarch64_opcode_encode@@Base+0xdb8>  // b.pmore
   398f8:	add	w2, w6, w1
   398fc:	cmp	w2, #0x20
   39900:	b.gt	3a140 <aarch64_opcode_encode@@Base+0xdb8>
   39904:	ldr	w7, [x24, #16]
   39908:	mov	x8, #0x40                  	// #64
   3990c:	mov	w2, #0xffffffff            	// #-1
   39910:	mov	x5, #0x48                  	// #72
   39914:	sub	w7, w7, #0x12
   39918:	lsl	w1, w2, w1
   3991c:	cmp	w7, #0x4
   39920:	bic	w1, w0, w1
   39924:	csel	x5, x5, x8, cc  // cc = lo, ul, last
   39928:	and	w1, w1, #0x1
   3992c:	add	x7, x5, x4
   39930:	ldr	w8, [sp, #104]
   39934:	lsl	w1, w1, w6
   39938:	bic	w1, w1, w3
   3993c:	ldr	w4, [x5, x4]
   39940:	orr	w1, w1, w8
   39944:	ldr	w5, [x7, #4]
   39948:	mvn	w3, w3
   3994c:	str	w1, [sp, #104]
   39950:	cmp	w4, #0x0
   39954:	add	w6, w5, w2
   39958:	lsr	w0, w0, #1
   3995c:	ccmp	w6, #0x1e, #0x2, ge  // ge = tcont
   39960:	b.hi	3a140 <aarch64_opcode_encode@@Base+0xdb8>  // b.pmore
   39964:	add	w6, w4, w5
   39968:	cmp	w6, #0x20
   3996c:	b.gt	3a140 <aarch64_opcode_encode@@Base+0xdb8>
   39970:	lsl	w2, w2, w5
   39974:	bic	w2, w0, w2
   39978:	and	w2, w2, #0x3
   3997c:	ldr	x0, [x24, #120]
   39980:	lsl	w2, w2, w4
   39984:	and	w2, w3, w2
   39988:	orr	w1, w2, w1
   3998c:	str	w1, [sp, #104]
   39990:	tbz	w0, #7, 397a8 <aarch64_opcode_encode@@Base+0x420>
   39994:	b	39a3c <aarch64_opcode_encode@@Base+0x6b4>
   39998:	ldr	w0, [x24, #32]
   3999c:	bl	35710 <aarch64_get_operand_class@plt>
   399a0:	cmp	w0, #0x1
   399a4:	mov	w0, #0x0                   	// #0
   399a8:	b.eq	399bc <aarch64_opcode_encode@@Base+0x634>  // b.none
   399ac:	ldr	w0, [x24, #36]
   399b0:	bl	35710 <aarch64_get_operand_class@plt>
   399b4:	cmp	w0, #0x1
   399b8:	b.ne	3a634 <aarch64_opcode_encode@@Base+0x12ac>  // b.any
   399bc:	sxtw	x0, w0
   399c0:	adrp	x2, a2000 <aarch64_operands@@Base+0x16bc0>
   399c4:	add	x3, sp, #0x84
   399c8:	mov	w4, #0xfd                  	// #253
   399cc:	lsl	x1, x0, #3
   399d0:	sub	x0, x1, x0
   399d4:	ldr	x1, [x2, #3944]
   399d8:	lsl	x0, x0, #3
   399dc:	ldrb	w2, [x3, x0]
   399e0:	ldr	w3, [x1, #480]
   399e4:	sub	w2, w2, #0x2
   399e8:	ldr	w0, [x1, #484]
   399ec:	tst	w2, w4
   399f0:	cset	w2, eq  // eq = none
   399f4:	sub	w1, w0, #0x1
   399f8:	cmp	w3, #0x0
   399fc:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   39a00:	b.hi	3a140 <aarch64_opcode_encode@@Base+0xdb8>  // b.pmore
   39a04:	add	w1, w3, w0
   39a08:	cmp	w1, #0x20
   39a0c:	b.gt	3a140 <aarch64_opcode_encode@@Base+0xdb8>
   39a10:	ldr	x24, [sp, #112]
   39a14:	mov	w1, #0xffffffff            	// #-1
   39a18:	lsl	w1, w1, w0
   39a1c:	bic	w1, w2, w1
   39a20:	ldr	w2, [sp, #104]
   39a24:	ldr	x0, [x24, #120]
   39a28:	lsl	w1, w1, w3
   39a2c:	orr	w1, w2, w1
   39a30:	str	w1, [sp, #104]
   39a34:	tbz	w0, #6, 397a4 <aarch64_opcode_encode@@Base+0x41c>
   39a38:	b	398b4 <aarch64_opcode_encode@@Base+0x52c>
   39a3c:	ldr	w0, [x24, #36]
   39a40:	bl	35710 <aarch64_get_operand_class@plt>
   39a44:	cmp	w0, #0x3
   39a48:	mov	w0, #0x1                   	// #1
   39a4c:	b.eq	39a64 <aarch64_opcode_encode@@Base+0x6dc>  // b.none
   39a50:	ldr	w0, [x24, #32]
   39a54:	bl	35710 <aarch64_get_operand_class@plt>
   39a58:	cmp	w0, #0x3
   39a5c:	mov	w0, #0x0                   	// #0
   39a60:	b.ne	3a7cc <aarch64_opcode_encode@@Base+0x1444>  // b.any
   39a64:	sxtw	x1, w0
   39a68:	add	x2, sp, #0x84
   39a6c:	lsl	x0, x1, #3
   39a70:	sub	x0, x0, x1
   39a74:	lsl	x0, x0, #3
   39a78:	ldrb	w0, [x2, x0]
   39a7c:	sub	w0, w0, #0x6
   39a80:	and	w0, w0, #0xff
   39a84:	cmp	w0, #0x2
   39a88:	b.hi	3a7a8 <aarch64_opcode_encode@@Base+0x1420>  // b.pmore
   39a8c:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   39a90:	and	x0, x0, #0xff
   39a94:	adrp	x2, 57000 <floatformat_from_double@@Base+0x210>
   39a98:	add	x2, x2, #0xc08
   39a9c:	ldr	x1, [x1, #3944]
   39aa0:	ldr	w3, [x2, x0, lsl #2]
   39aa4:	ldr	w2, [x1, #288]
   39aa8:	ldr	w1, [x1, #292]
   39aac:	cmp	w2, #0x0
   39ab0:	sub	w0, w1, #0x1
   39ab4:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   39ab8:	b.hi	3a140 <aarch64_opcode_encode@@Base+0xdb8>  // b.pmore
   39abc:	add	w0, w2, w1
   39ac0:	cmp	w0, #0x20
   39ac4:	b.gt	3a140 <aarch64_opcode_encode@@Base+0xdb8>
   39ac8:	mov	w0, #0xffffffff            	// #-1
   39acc:	ldr	x24, [sp, #112]
   39ad0:	lsl	w0, w0, w1
   39ad4:	ldr	w1, [sp, #104]
   39ad8:	bic	w0, w3, w0
   39adc:	lsl	w0, w0, w2
   39ae0:	orr	w0, w1, w0
   39ae4:	str	w0, [sp, #104]
   39ae8:	ldr	x0, [x24, #120]
   39aec:	tbz	w0, #8, 397ac <aarch64_opcode_encode@@Base+0x424>
   39af0:	b	39c34 <aarch64_opcode_encode@@Base+0x8ac>
   39af4:	ldr	w0, [x24, #32]
   39af8:	bl	35710 <aarch64_get_operand_class@plt>
   39afc:	cmp	w0, #0x1
   39b00:	mov	w0, #0x0                   	// #0
   39b04:	b.eq	39b1c <aarch64_opcode_encode@@Base+0x794>  // b.none
   39b08:	ldr	w0, [x24, #36]
   39b0c:	bl	35710 <aarch64_get_operand_class@plt>
   39b10:	cmp	w0, #0x1
   39b14:	mov	w0, #0x1                   	// #1
   39b18:	b.ne	3a634 <aarch64_opcode_encode@@Base+0x12ac>  // b.any
   39b1c:	sxtw	x1, w0
   39b20:	adrp	x2, a2000 <aarch64_operands@@Base+0x16bc0>
   39b24:	add	x3, sp, #0x84
   39b28:	mov	w4, #0xfd                  	// #253
   39b2c:	lsl	x0, x1, #3
   39b30:	sub	x0, x0, x1
   39b34:	ldr	x2, [x2, #3944]
   39b38:	lsl	x0, x0, #3
   39b3c:	ldrb	w1, [x3, x0]
   39b40:	ldr	w3, [x2, #472]
   39b44:	sub	w1, w1, #0x2
   39b48:	ldr	w0, [x2, #476]
   39b4c:	tst	w1, w4
   39b50:	cset	w5, eq  // eq = none
   39b54:	sub	w1, w0, #0x1
   39b58:	cmp	w3, #0x0
   39b5c:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   39b60:	b.hi	3a140 <aarch64_opcode_encode@@Base+0xdb8>  // b.pmore
   39b64:	add	w1, w3, w0
   39b68:	cmp	w1, #0x20
   39b6c:	b.gt	3a140 <aarch64_opcode_encode@@Base+0xdb8>
   39b70:	ldr	x24, [sp, #112]
   39b74:	mov	w4, #0xffffffff            	// #-1
   39b78:	ldr	w6, [sp, #104]
   39b7c:	lsl	w1, w4, w0
   39b80:	bic	w1, w5, w1
   39b84:	ldr	x0, [x24, #120]
   39b88:	lsl	w1, w1, w3
   39b8c:	orr	w1, w1, w6
   39b90:	str	w1, [sp, #104]
   39b94:	tbz	w0, #23, 3979c <aarch64_opcode_encode@@Base+0x414>
   39b98:	ldr	w6, [x2, #448]
   39b9c:	ldr	w2, [x2, #452]
   39ba0:	cmp	w6, #0x0
   39ba4:	ldr	w3, [x24, #12]
   39ba8:	add	w7, w2, w4
   39bac:	ccmp	w7, #0x1e, #0x2, ge  // ge = tcont
   39bb0:	b.hi	3a140 <aarch64_opcode_encode@@Base+0xdb8>  // b.pmore
   39bb4:	add	w7, w6, w2
   39bb8:	cmp	w7, #0x20
   39bbc:	b.gt	3a140 <aarch64_opcode_encode@@Base+0xdb8>
   39bc0:	lsl	w2, w4, w2
   39bc4:	bic	w2, w5, w2
   39bc8:	lsl	w2, w2, w6
   39bcc:	bic	w2, w2, w3
   39bd0:	orr	w1, w2, w1
   39bd4:	str	w1, [sp, #104]
   39bd8:	tbz	w0, #27, 397a0 <aarch64_opcode_encode@@Base+0x418>
   39bdc:	b	39998 <aarch64_opcode_encode@@Base+0x610>
   39be0:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   39be4:	ldr	x2, [sp, #120]
   39be8:	ldr	x1, [x1, #3944]
   39bec:	ldr	w5, [x2, #32]
   39bf0:	ldp	w3, w4, [x1, #8]
   39bf4:	cmp	w3, #0x0
   39bf8:	sub	w1, w4, #0x1
   39bfc:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   39c00:	b.hi	3a140 <aarch64_opcode_encode@@Base+0xdb8>  // b.pmore
   39c04:	add	w1, w3, w4
   39c08:	cmp	w1, #0x20
   39c0c:	b.gt	3a140 <aarch64_opcode_encode@@Base+0xdb8>
   39c10:	mov	w1, #0xffffffff            	// #-1
   39c14:	ldr	w2, [sp, #104]
   39c18:	lsl	w1, w1, w4
   39c1c:	bic	w1, w5, w1
   39c20:	lsl	w1, w1, w3
   39c24:	orr	w1, w2, w1
   39c28:	str	w1, [sp, #104]
   39c2c:	tbz	w0, #5, 3979c <aarch64_opcode_encode@@Base+0x414>
   39c30:	b	39af4 <aarch64_opcode_encode@@Base+0x76c>
   39c34:	ldr	w0, [x24, #32]
   39c38:	bl	35710 <aarch64_get_operand_class@plt>
   39c3c:	cmp	w0, #0x6
   39c40:	b.eq	3a260 <aarch64_opcode_encode@@Base+0xed8>  // b.none
   39c44:	ldr	w0, [x24, #36]
   39c48:	mov	w25, #0x0                   	// #0
   39c4c:	bl	35710 <aarch64_get_operand_class@plt>
   39c50:	cmp	w0, #0x6
   39c54:	b.ne	3a760 <aarch64_opcode_encode@@Base+0x13d8>  // b.any
   39c58:	ldrb	w0, [x24, #57]
   39c5c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   39c60:	ands	w1, w0, #0xff
   39c64:	cset	w0, eq  // eq = none
   39c68:	cmp	w0, #0x0
   39c6c:	ccmp	w1, w25, #0x0, ne  // ne = any
   39c70:	b.eq	3a760 <aarch64_opcode_encode@@Base+0x13d8>  // b.none
   39c74:	mov	w0, #0x1                   	// #1
   39c78:	cbz	w25, 39c84 <aarch64_opcode_encode@@Base+0x8fc>
   39c7c:	cmp	w25, w1, lsl #1
   39c80:	cset	w0, eq  // eq = none
   39c84:	sxtw	x1, w0
   39c88:	add	x2, sp, #0x84
   39c8c:	lsl	x0, x1, #3
   39c90:	sub	x0, x0, x1
   39c94:	lsl	x0, x0, #3
   39c98:	ldrb	w0, [x2, x0]
   39c9c:	sub	w1, w0, #0x5
   39ca0:	cmp	w1, #0x4
   39ca4:	b.hi	3a638 <aarch64_opcode_encode@@Base+0x12b0>  // b.pmore
   39ca8:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   39cac:	adrp	x2, a2000 <aarch64_operands@@Base+0x16bc0>
   39cb0:	ldr	x24, [sp, #112]
   39cb4:	ldr	x1, [x2, #3944]
   39cb8:	ldr	w3, [x24, #12]
   39cbc:	ldp	w4, w5, [x1, #64]
   39cc0:	cmp	w4, #0x0
   39cc4:	sub	w1, w5, #0x1
   39cc8:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   39ccc:	b.hi	3a140 <aarch64_opcode_encode@@Base+0xdb8>  // b.pmore
   39cd0:	add	w1, w4, w5
   39cd4:	cmp	w1, #0x20
   39cd8:	b.gt	3a140 <aarch64_opcode_encode@@Base+0xdb8>
   39cdc:	mov	w1, #0xffffffff            	// #-1
   39ce0:	ldr	w2, [sp, #104]
   39ce4:	lsl	w1, w1, w5
   39ce8:	bic	w1, w0, w1
   39cec:	ldr	x0, [x24, #120]
   39cf0:	lsl	w1, w1, w4
   39cf4:	bic	w1, w1, w3
   39cf8:	orr	w1, w2, w1
   39cfc:	str	w1, [sp, #104]
   39d00:	tbz	w0, #9, 397b0 <aarch64_opcode_encode@@Base+0x428>
   39d04:	b	39dac <aarch64_opcode_encode@@Base+0xa24>
   39d08:	add	x0, x24, #0x20
   39d0c:	mov	w1, #0x4                   	// #4
   39d10:	bl	35100 <aarch64_operand_index@plt>
   39d14:	cmn	w0, #0x1
   39d18:	b.eq	3a258 <aarch64_opcode_encode@@Base+0xed0>  // b.none
   39d1c:	cmp	w0, #0x1
   39d20:	b.hi	3a680 <aarch64_opcode_encode@@Base+0x12f8>  // b.pmore
   39d24:	sxtw	x24, w0
   39d28:	ldr	x0, [sp, #112]
   39d2c:	add	x1, x24, #0x8
   39d30:	ldr	w0, [x0, x1, lsl #2]
   39d34:	bl	35710 <aarch64_get_operand_class@plt>
   39d38:	cmp	w0, #0x1
   39d3c:	b.ne	3a784 <aarch64_opcode_encode@@Base+0x13fc>  // b.any
   39d40:	lsl	x0, x24, #3
   39d44:	add	x1, sp, #0x84
   39d48:	sub	x0, x0, x24
   39d4c:	lsl	x0, x0, #3
   39d50:	ldrb	w0, [x1, x0]
   39d54:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   39d58:	adrp	x2, a2000 <aarch64_operands@@Base+0x16bc0>
   39d5c:	ldr	x1, [x2, #3944]
   39d60:	ldp	w3, w2, [x1, #88]
   39d64:	cmp	w3, #0x0
   39d68:	sub	w1, w2, #0x1
   39d6c:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   39d70:	b.hi	3a140 <aarch64_opcode_encode@@Base+0xdb8>  // b.pmore
   39d74:	add	w1, w3, w2
   39d78:	cmp	w1, #0x20
   39d7c:	b.gt	3a140 <aarch64_opcode_encode@@Base+0xdb8>
   39d80:	ldr	x24, [sp, #112]
   39d84:	mov	w1, #0xffffffff            	// #-1
   39d88:	lsl	w1, w1, w2
   39d8c:	ldr	w2, [sp, #104]
   39d90:	bic	w1, w0, w1
   39d94:	ldr	x0, [x24, #120]
   39d98:	lsl	w1, w1, w3
   39d9c:	orr	w1, w2, w1
   39da0:	str	w1, [sp, #104]
   39da4:	tbz	w0, #11, 397b8 <aarch64_opcode_encode@@Base+0x430>
   39da8:	b	39e88 <aarch64_opcode_encode@@Base+0xb00>
   39dac:	ldr	w0, [x24, #32]
   39db0:	ldrb	w24, [sp, #132]
   39db4:	bl	35710 <aarch64_get_operand_class@plt>
   39db8:	cmp	w0, #0x4
   39dbc:	b.ne	3a73c <aarch64_opcode_encode@@Base+0x13b4>  // b.any
   39dc0:	sub	w0, w24, #0xd
   39dc4:	cmp	w0, #0x8
   39dc8:	b.hi	3a73c <aarch64_opcode_encode@@Base+0x13b4>  // b.pmore
   39dcc:	mov	w0, w24
   39dd0:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   39dd4:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   39dd8:	ldr	x24, [sp, #112]
   39ddc:	ldr	x5, [x5, #3944]
   39de0:	ldr	w4, [x24, #12]
   39de4:	ldp	w7, w1, [x5, #88]
   39de8:	cmp	w7, #0x0
   39dec:	sub	w2, w1, #0x1
   39df0:	ccmp	w2, #0x1e, #0x2, ge  // ge = tcont
   39df4:	b.hi	3a140 <aarch64_opcode_encode@@Base+0xdb8>  // b.pmore
   39df8:	add	w2, w7, w1
   39dfc:	cmp	w2, #0x20
   39e00:	b.gt	3a140 <aarch64_opcode_encode@@Base+0xdb8>
   39e04:	mov	w2, #0xffffffff            	// #-1
   39e08:	ldr	w8, [sp, #104]
   39e0c:	lsl	w1, w2, w1
   39e10:	bic	w1, w0, w1
   39e14:	and	w1, w1, #0x1
   39e18:	cmp	w0, #0x7
   39e1c:	mvn	w6, w4
   39e20:	asr	w3, w0, #1
   39e24:	lsl	w0, w1, w7
   39e28:	bic	w4, w0, w4
   39e2c:	orr	w4, w4, w8
   39e30:	str	w4, [sp, #104]
   39e34:	b.hi	3a718 <aarch64_opcode_encode@@Base+0x1390>  // b.pmore
   39e38:	ldr	w0, [x5, #348]
   39e3c:	add	w1, w3, #0x1
   39e40:	cmp	w1, w0
   39e44:	b.gt	3a140 <aarch64_opcode_encode@@Base+0xdb8>
   39e48:	ldr	w5, [x5, #344]
   39e4c:	mov	w0, #0x1                   	// #1
   39e50:	lsl	w0, w0, w3
   39e54:	tbnz	w5, #31, 3a140 <aarch64_opcode_encode@@Base+0xdb8>
   39e58:	add	w3, w1, w5
   39e5c:	cmp	w3, #0x20
   39e60:	b.gt	3a140 <aarch64_opcode_encode@@Base+0xdb8>
   39e64:	lsl	w1, w2, w1
   39e68:	bic	w1, w0, w1
   39e6c:	ldr	x0, [x24, #120]
   39e70:	lsl	w1, w1, w5
   39e74:	and	w1, w6, w1
   39e78:	orr	w4, w1, w4
   39e7c:	str	w4, [sp, #104]
   39e80:	tbz	w0, #10, 397b4 <aarch64_opcode_encode@@Base+0x42c>
   39e84:	b	39d08 <aarch64_opcode_encode@@Base+0x980>
   39e88:	ldr	w0, [x24, #32]
   39e8c:	bl	35710 <aarch64_get_operand_class@plt>
   39e90:	mov	w24, w0
   39e94:	cmp	w0, #0x1
   39e98:	b.ne	3a6f4 <aarch64_opcode_encode@@Base+0x136c>  // b.any
   39e9c:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   39ea0:	ldrb	w0, [sp, #132]
   39ea4:	ldr	x1, [x1, #3944]
   39ea8:	ldr	w2, [x1, #268]
   39eac:	cmp	w2, #0x0
   39eb0:	b.le	3a6ec <aarch64_opcode_encode@@Base+0x1364>
   39eb4:	ldr	w25, [x1, #264]
   39eb8:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   39ebc:	sub	w1, w24, w0
   39ec0:	cmp	w25, #0x1f
   39ec4:	b.hi	3a140 <aarch64_opcode_encode@@Base+0xdb8>  // b.pmore
   39ec8:	ldr	x24, [sp, #112]
   39ecc:	and	w1, w1, #0x1
   39ed0:	ldr	w2, [sp, #104]
   39ed4:	lsl	w1, w1, w25
   39ed8:	ldr	x0, [x24, #120]
   39edc:	orr	w1, w2, w1
   39ee0:	str	w1, [sp, #104]
   39ee4:	tbz	w0, #22, 394cc <aarch64_opcode_encode@@Base+0x144>
   39ee8:	b	397bc <aarch64_opcode_encode@@Base+0x434>
   39eec:	cmp	w0, #0x29
   39ef0:	b.eq	3a434 <aarch64_opcode_encode@@Base+0x10ac>  // b.none
   39ef4:	sub	w0, w0, #0x2b
   39ef8:	cmp	w0, #0x2
   39efc:	b.hi	39778 <aarch64_opcode_encode@@Base+0x3f0>  // b.pmore
   39f00:	ldr	x0, [sp, #256]
   39f04:	ldr	x1, [sp, #312]
   39f08:	add	x0, x0, x1
   39f0c:	sub	x0, x0, #0x1
   39f10:	str	x0, [sp, #312]
   39f14:	b	39778 <aarch64_opcode_encode@@Base+0x3f0>
   39f18:	cmp	w0, #0x39
   39f1c:	b.hi	39fa8 <aarch64_opcode_encode@@Base+0xc20>  // b.pmore
   39f20:	cmp	w0, #0x37
   39f24:	b.hi	3a2a4 <aarch64_opcode_encode@@Base+0xf1c>  // b.pmore
   39f28:	cmp	w0, #0x31
   39f2c:	b.eq	3a408 <aarch64_opcode_encode@@Base+0x1080>  // b.none
   39f30:	b.ls	39fcc <aarch64_opcode_encode@@Base+0xc44>  // b.plast
   39f34:	sub	w0, w0, #0x35
   39f38:	cmp	w0, #0x2
   39f3c:	b.hi	39778 <aarch64_opcode_encode@@Base+0x3f0>  // b.pmore
   39f40:	ldp	x2, x3, [sp, #184]
   39f44:	mov	w4, #0x2                   	// #2
   39f48:	ldp	x6, x7, [sp, #240]
   39f4c:	stp	x2, x3, [sp, #240]
   39f50:	add	x2, sp, #0x200
   39f54:	str	w4, [sp, #248]
   39f58:	mov	w1, #0x3                   	// #3
   39f5c:	ldp	x4, x5, [sp, #216]
   39f60:	ldr	x0, [sp, #256]
   39f64:	stp	x6, x7, [x2, #-216]
   39f68:	ldp	x2, x3, [sp, #200]
   39f6c:	str	w1, [sp, #304]
   39f70:	ldr	x6, [sp, #264]
   39f74:	stp	x2, x3, [sp, #256]
   39f78:	ldp	x2, x3, [sp, #272]
   39f7c:	stp	x4, x5, [sp, #272]
   39f80:	add	x4, sp, #0x200
   39f84:	ldr	x7, [sp, #232]
   39f88:	stp	x0, x6, [sp, #312]
   39f8c:	ldr	x1, [sp, #288]
   39f90:	str	x7, [sp, #288]
   39f94:	stp	x2, x3, [x4, #-184]
   39f98:	str	x1, [sp, #344]
   39f9c:	bl	35870 <get_inverted_cond@plt>
   39fa0:	str	x0, [sp, #312]
   39fa4:	b	39778 <aarch64_opcode_encode@@Base+0x3f0>
   39fa8:	cmp	w0, #0x40
   39fac:	b.eq	3a32c <aarch64_opcode_encode@@Base+0xfa4>  // b.none
   39fb0:	sub	w0, w0, #0x41
   39fb4:	cmp	w0, #0x3
   39fb8:	b.hi	39778 <aarch64_opcode_encode@@Base+0x3f0>  // b.pmore
   39fbc:	ldrb	w0, [sp, #188]
   39fc0:	strb	w0, [sp, #244]
   39fc4:	str	xzr, [sp, #256]
   39fc8:	b	39778 <aarch64_opcode_encode@@Base+0x3f0>
   39fcc:	cmp	w0, #0x30
   39fd0:	b.ne	39778 <aarch64_opcode_encode@@Base+0x3f0>  // b.any
   39fd4:	ldp	x10, x0, [sp, #176]
   39fd8:	mov	w9, #0x2                   	// #2
   39fdc:	ldr	x4, [sp, #192]
   39fe0:	mov	w1, #0x3                   	// #3
   39fe4:	ldp	x2, x3, [sp, #240]
   39fe8:	str	x4, [sp, #248]
   39fec:	add	x4, sp, #0x200
   39ff0:	ubfx	x8, x0, #32, #8
   39ff4:	cmp	w8, #0x1d
   39ff8:	str	w9, [sp, #248]
   39ffc:	ldp	x8, x9, [sp, #216]
   3a000:	stp	x2, x3, [x4, #-216]
   3a004:	mov	w7, #0x1                   	// #1
   3a008:	ldp	x2, x3, [sp, #128]
   3a00c:	stp	x2, x3, [sp, #184]
   3a010:	mov	w6, #0x1f                  	// #31
   3a014:	ldp	x2, x3, [sp, #160]
   3a018:	stp	x2, x3, [sp, #216]
   3a01c:	ldr	x11, [sp, #232]
   3a020:	stp	x10, x0, [sp, #232]
   3a024:	ldp	x2, x10, [sp, #256]
   3a028:	str	w1, [sp, #304]
   3a02c:	ldr	x1, [sp, #200]
   3a030:	str	x1, [sp, #256]
   3a034:	stp	x2, x10, [sp, #312]
   3a038:	neg	x0, x1
   3a03c:	mov	x1, x2
   3a040:	add	x2, sp, #0x200
   3a044:	ldp	x4, x5, [sp, #144]
   3a048:	sub	x1, x1, #0x1
   3a04c:	ldr	x12, [sp, #208]
   3a050:	stp	x4, x5, [sp, #200]
   3a054:	ldp	x4, x5, [sp, #272]
   3a058:	str	x12, [sp, #264]
   3a05c:	ldr	x3, [sp, #288]
   3a060:	str	x11, [sp, #288]
   3a064:	stp	x4, x5, [x2, #-184]
   3a068:	stp	x8, x9, [sp, #272]
   3a06c:	str	x3, [sp, #344]
   3a070:	str	w7, [sp, #192]
   3a074:	str	w6, [sp, #200]
   3a078:	b.eq	3a424 <aarch64_opcode_encode@@Base+0x109c>  // b.none
   3a07c:	and	x0, x0, #0x3f
   3a080:	str	x0, [sp, #256]
   3a084:	str	x1, [sp, #312]
   3a088:	b	39778 <aarch64_opcode_encode@@Base+0x3f0>
   3a08c:	cmp	w0, #0x3a
   3a090:	b.eq	3a58c <aarch64_opcode_encode@@Base+0x1204>  // b.none
   3a094:	sub	w1, w0, #0x3b
   3a098:	cmp	w1, #0x3
   3a09c:	b.hi	394cc <aarch64_opcode_encode@@Base+0x144>  // b.pmore
   3a0a0:	sub	w0, w0, #0x3d
   3a0a4:	cmp	w0, #0x1
   3a0a8:	b.hi	3a5c8 <aarch64_opcode_encode@@Base+0x1240>  // b.pmore
   3a0ac:	ldrb	w1, [sp, #132]
   3a0b0:	sub	w0, w1, #0x13
   3a0b4:	tst	w0, #0xfffffffd
   3a0b8:	b.ne	3a6a4 <aarch64_opcode_encode@@Base+0x131c>  // b.any
   3a0bc:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   3a0c0:	cmp	w1, #0x13
   3a0c4:	cset	w1, ne  // ne = any
   3a0c8:	ldr	x0, [x0, #3944]
   3a0cc:	ldr	w2, [x0, #68]
   3a0d0:	cmp	w2, #0x0
   3a0d4:	b.le	3a140 <aarch64_opcode_encode@@Base+0xdb8>
   3a0d8:	ldr	w2, [x0, #64]
   3a0dc:	cmp	w2, #0x1f
   3a0e0:	b.hi	3a140 <aarch64_opcode_encode@@Base+0xdb8>  // b.pmore
   3a0e4:	ldr	w0, [sp, #104]
   3a0e8:	lsl	w1, w1, w2
   3a0ec:	orr	w0, w0, w1
   3a0f0:	str	w0, [sp, #104]
   3a0f4:	b	394cc <aarch64_opcode_encode@@Base+0x144>
   3a0f8:	cmp	w0, #0x4b
   3a0fc:	b.eq	3a4a4 <aarch64_opcode_encode@@Base+0x111c>  // b.none
   3a100:	b.ls	3a144 <aarch64_opcode_encode@@Base+0xdbc>  // b.plast
   3a104:	cmp	w0, #0x4d
   3a108:	b.hi	3a178 <aarch64_opcode_encode@@Base+0xdf0>  // b.pmore
   3a10c:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3a110:	mov	w0, #0xffffffff            	// #-1
   3a114:	ldr	x1, [x1, #3944]
   3a118:	add	x6, x1, #0x268
   3a11c:	ldp	w2, w5, [x6, #-8]
   3a120:	ldp	w3, w4, [x6]
   3a124:	cmp	w2, #0x0
   3a128:	ldr	w6, [sp, #104]
   3a12c:	add	w1, w5, w0
   3a130:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   3a134:	lsr	w1, w6, w3
   3a138:	lsl	w3, w0, w4
   3a13c:	b.ls	3981c <aarch64_opcode_encode@@Base+0x494>  // b.plast
   3a140:	bl	361c8 <init_disassemble_info@@Base+0x128>
   3a144:	cmp	w0, #0x48
   3a148:	b.eq	3a538 <aarch64_opcode_encode@@Base+0x11b0>  // b.none
   3a14c:	cmp	w0, #0x4a
   3a150:	b.ne	394cc <aarch64_opcode_encode@@Base+0x144>  // b.any
   3a154:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3a158:	ldr	w6, [sp, #104]
   3a15c:	mov	w0, #0xffffffff            	// #-1
   3a160:	ldr	x1, [x1, #3944]
   3a164:	ldr	w3, [x1, #568]
   3a168:	ldr	w4, [x1, #572]
   3a16c:	ldr	w2, [x1, #608]
   3a170:	ldr	w5, [x1, #612]
   3a174:	b	39804 <aarch64_opcode_encode@@Base+0x47c>
   3a178:	sub	w0, w0, #0x4e
   3a17c:	cmp	w0, #0x1
   3a180:	b.hi	394cc <aarch64_opcode_encode@@Base+0x144>  // b.pmore
   3a184:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3a188:	ldr	w6, [sp, #104]
   3a18c:	mov	w0, #0xffffffff            	// #-1
   3a190:	ldr	x1, [x1, #3944]
   3a194:	ldr	w3, [x1, #592]
   3a198:	ldr	w4, [x1, #596]
   3a19c:	b	3a16c <aarch64_opcode_encode@@Base+0xde4>
   3a1a0:	mov	x0, x20
   3a1a4:	bl	36128 <init_disassemble_info@@Base+0x88>
   3a1a8:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3a1ac:	add	w3, w0, #0x1
   3a1b0:	ldr	x0, [x1, #3944]
   3a1b4:	ldr	w2, [x0, #904]
   3a1b8:	ldr	w4, [x0, #908]
   3a1bc:	cmp	w2, #0x0
   3a1c0:	sub	w0, w4, #0x1
   3a1c4:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   3a1c8:	b.ls	39518 <aarch64_opcode_encode@@Base+0x190>  // b.plast
   3a1cc:	b	3986c <aarch64_opcode_encode@@Base+0x4e4>
   3a1d0:	mov	x0, x20
   3a1d4:	bl	36128 <init_disassemble_info@@Base+0x88>
   3a1d8:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3a1dc:	ldr	x1, [x1, #3944]
   3a1e0:	ldr	w3, [x1, #536]
   3a1e4:	ldr	w4, [x1, #540]
   3a1e8:	cmp	w3, #0x0
   3a1ec:	sub	w1, w4, #0x1
   3a1f0:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   3a1f4:	b.ls	395ec <aarch64_opcode_encode@@Base+0x264>  // b.plast
   3a1f8:	b	3986c <aarch64_opcode_encode@@Base+0x4e4>
   3a1fc:	mov	x0, x20
   3a200:	bl	36128 <init_disassemble_info@@Base+0x88>
   3a204:	adrp	x2, a2000 <aarch64_operands@@Base+0x16bc0>
   3a208:	cmp	w0, #0x1
   3a20c:	mov	w1, #0x3                   	// #3
   3a210:	csinc	w1, w1, w0, eq  // eq = none
   3a214:	ldr	x2, [x2, #3944]
   3a218:	ldp	w3, w4, [x2, #64]
   3a21c:	cmp	w3, #0x0
   3a220:	sub	w0, w4, #0x1
   3a224:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   3a228:	b.hi	3986c <aarch64_opcode_encode@@Base+0x4e4>  // b.pmore
   3a22c:	add	w0, w3, w4
   3a230:	cmp	w0, #0x20
   3a234:	b.gt	3986c <aarch64_opcode_encode@@Base+0x4e4>
   3a238:	mov	w0, #0xffffffff            	// #-1
   3a23c:	ldr	w2, [sp, #104]
   3a240:	lsl	w0, w0, w4
   3a244:	bic	w0, w1, w0
   3a248:	lsl	w0, w0, w3
   3a24c:	orr	w0, w2, w0
   3a250:	str	w0, [sp, #104]
   3a254:	b	39540 <aarch64_opcode_encode@@Base+0x1b8>
   3a258:	mov	w0, #0x0                   	// #0
   3a25c:	b	39d24 <aarch64_opcode_encode@@Base+0x99c>
   3a260:	ldrb	w0, [x24, #56]
   3a264:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3a268:	and	w25, w0, #0xff
   3a26c:	ldr	w0, [x24, #36]
   3a270:	bl	35710 <aarch64_get_operand_class@plt>
   3a274:	cmp	w0, #0x6
   3a278:	b.eq	39c58 <aarch64_opcode_encode@@Base+0x8d0>  // b.none
   3a27c:	mov	w0, #0x1                   	// #1
   3a280:	mov	w1, #0x0                   	// #0
   3a284:	b	39c68 <aarch64_opcode_encode@@Base+0x8e0>
   3a288:	ldrb	w2, [sp, #244]
   3a28c:	mov	x0, #0x1f                  	// #31
   3a290:	mov	x1, #0x3f                  	// #63
   3a294:	cmp	w2, #0x1d
   3a298:	csel	x0, x0, x1, eq  // eq = none
   3a29c:	str	x0, [sp, #312]
   3a2a0:	b	39778 <aarch64_opcode_encode@@Base+0x3f0>
   3a2a4:	ldp	x2, x3, [sp, #128]
   3a2a8:	stp	x2, x3, [sp, #240]
   3a2ac:	mov	w1, #0x1                   	// #1
   3a2b0:	ldp	x10, x11, [sp, #184]
   3a2b4:	stp	x2, x3, [sp, #184]
   3a2b8:	add	x2, sp, #0x200
   3a2bc:	ldp	x6, x7, [sp, #144]
   3a2c0:	stp	x6, x7, [sp, #256]
   3a2c4:	mov	w5, #0x2                   	// #2
   3a2c8:	stp	x10, x11, [x2, #-216]
   3a2cc:	mov	w4, #0x1f                  	// #31
   3a2d0:	mov	w9, #0x3                   	// #3
   3a2d4:	str	w1, [sp, #192]
   3a2d8:	ldp	x2, x3, [sp, #160]
   3a2dc:	str	w5, [sp, #248]
   3a2e0:	ldr	x1, [sp, #176]
   3a2e4:	str	x1, [sp, #288]
   3a2e8:	ldp	x0, x8, [sp, #200]
   3a2ec:	stp	x6, x7, [sp, #200]
   3a2f0:	ldp	x6, x7, [sp, #216]
   3a2f4:	stp	x0, x8, [sp, #312]
   3a2f8:	ldr	x5, [sp, #232]
   3a2fc:	str	x1, [sp, #232]
   3a300:	add	x1, sp, #0x200
   3a304:	str	w4, [sp, #200]
   3a308:	stp	x2, x3, [sp, #216]
   3a30c:	stp	x6, x7, [x1, #-184]
   3a310:	str	w4, [sp, #256]
   3a314:	stp	x2, x3, [sp, #272]
   3a318:	str	w9, [sp, #304]
   3a31c:	str	x5, [sp, #344]
   3a320:	bl	35870 <get_inverted_cond@plt>
   3a324:	str	x0, [sp, #312]
   3a328:	b	39778 <aarch64_opcode_encode@@Base+0x3f0>
   3a32c:	ldp	x0, x1, [sp, #184]
   3a330:	mov	w4, #0x3                   	// #3
   3a334:	ldp	x2, x3, [sp, #240]
   3a338:	stp	x0, x1, [sp, #240]
   3a33c:	add	x1, sp, #0x200
   3a340:	mov	w0, #0x2                   	// #2
   3a344:	str	w0, [sp, #248]
   3a348:	ldr	x6, [sp, #232]
   3a34c:	stp	x2, x3, [x1, #-216]
   3a350:	ldp	x0, x1, [sp, #216]
   3a354:	str	w4, [sp, #304]
   3a358:	ldp	x2, x3, [sp, #200]
   3a35c:	ldp	x4, x5, [sp, #256]
   3a360:	stp	x2, x3, [sp, #256]
   3a364:	ldp	x2, x3, [sp, #272]
   3a368:	stp	x0, x1, [sp, #272]
   3a36c:	add	x1, sp, #0x200
   3a370:	ldr	x0, [sp, #288]
   3a374:	str	x6, [sp, #288]
   3a378:	stp	x4, x5, [x1, #-200]
   3a37c:	stp	x2, x3, [x1, #-184]
   3a380:	str	x0, [sp, #344]
   3a384:	b	39778 <aarch64_opcode_encode@@Base+0x3f0>
   3a388:	ldr	x19, [sp, #200]
   3a38c:	cmp	w0, #0x25
   3a390:	ldrb	w0, [sp, #132]
   3a394:	mov	w3, #0x46                  	// #70
   3a398:	cinv	x19, x19, eq  // eq = none
   3a39c:	add	x2, sp, #0x64
   3a3a0:	cmp	w0, #0x1
   3a3a4:	mov	x0, x19
   3a3a8:	cset	w1, eq  // eq = none
   3a3ac:	str	w3, [sp, #184]
   3a3b0:	bl	35a40 <aarch64_wide_constant_p@plt>
   3a3b4:	cbz	w0, 3a6c8 <aarch64_opcode_encode@@Base+0x1340>
   3a3b8:	ldr	w0, [sp, #100]
   3a3bc:	mov	w1, #0x5                   	// #5
   3a3c0:	str	w1, [sp, #216]
   3a3c4:	mov	w1, w0
   3a3c8:	str	x1, [sp, #224]
   3a3cc:	lsr	x0, x19, x0
   3a3d0:	and	x0, x0, #0xffff
   3a3d4:	str	x0, [sp, #200]
   3a3d8:	b	39778 <aarch64_opcode_encode@@Base+0x3f0>
   3a3dc:	ldp	x0, x1, [sp, #184]
   3a3e0:	stp	x0, x1, [sp, #240]
   3a3e4:	mov	w2, #0x2                   	// #2
   3a3e8:	ldp	x0, x1, [sp, #200]
   3a3ec:	str	w2, [sp, #248]
   3a3f0:	stp	x0, x1, [sp, #256]
   3a3f4:	ldp	x2, x3, [sp, #216]
   3a3f8:	stp	x2, x3, [sp, #272]
   3a3fc:	ldr	x0, [sp, #232]
   3a400:	str	x0, [sp, #288]
   3a404:	b	39778 <aarch64_opcode_encode@@Base+0x3f0>
   3a408:	ldr	x0, [sp, #256]
   3a40c:	ldr	x1, [sp, #312]
   3a410:	neg	x0, x0
   3a414:	ldrb	w2, [sp, #244]
   3a418:	sub	x1, x1, #0x1
   3a41c:	cmp	w2, #0x1d
   3a420:	b.ne	3a07c <aarch64_opcode_encode@@Base+0xcf4>  // b.any
   3a424:	and	x0, x0, #0x1f
   3a428:	str	x0, [sp, #256]
   3a42c:	str	x1, [sp, #312]
   3a430:	b	39778 <aarch64_opcode_encode@@Base+0x3f0>
   3a434:	ldr	x2, [sp, #256]
   3a438:	ldrb	w1, [sp, #244]
   3a43c:	neg	x0, x2
   3a440:	cmp	w1, #0x1d
   3a444:	b.eq	3a5d0 <aarch64_opcode_encode@@Base+0x1248>  // b.none
   3a448:	and	x0, x0, #0x3f
   3a44c:	mov	x1, #0x3f                  	// #63
   3a450:	sub	x1, x1, x2
   3a454:	str	x0, [sp, #256]
   3a458:	str	x1, [sp, #312]
   3a45c:	b	39778 <aarch64_opcode_encode@@Base+0x3f0>
   3a460:	ldrb	w0, [sp, #132]
   3a464:	cmp	w0, #0x7
   3a468:	b.ne	3a65c <aarch64_opcode_encode@@Base+0x12d4>  // b.any
   3a46c:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   3a470:	ldr	x0, [x0, #3944]
   3a474:	ldr	w1, [x0, #68]
   3a478:	cmp	w1, #0x0
   3a47c:	b.le	3a140 <aarch64_opcode_encode@@Base+0xdb8>
   3a480:	ldr	w2, [x0, #64]
   3a484:	cmp	w2, #0x1f
   3a488:	b.hi	3a140 <aarch64_opcode_encode@@Base+0xdb8>  // b.pmore
   3a48c:	ldr	w0, [sp, #104]
   3a490:	mov	w1, #0x1                   	// #1
   3a494:	lsl	w1, w1, w2
   3a498:	orr	w0, w0, w1
   3a49c:	str	w0, [sp, #104]
   3a4a0:	b	394cc <aarch64_opcode_encode@@Base+0x144>
   3a4a4:	adrp	x2, a2000 <aarch64_operands@@Base+0x16bc0>
   3a4a8:	ldr	w6, [sp, #104]
   3a4ac:	mov	w1, #0xffffffff            	// #-1
   3a4b0:	ldr	x2, [x2, #3944]
   3a4b4:	add	x9, x2, #0x268
   3a4b8:	ldp	w5, w0, [x9, #-8]
   3a4bc:	ldp	w4, w3, [x9]
   3a4c0:	cmp	w5, #0x0
   3a4c4:	add	w7, w0, w1
   3a4c8:	ccmp	w7, #0x1e, #0x2, ge  // ge = tcont
   3a4cc:	lsl	w3, w1, w3
   3a4d0:	lsr	w4, w6, w4
   3a4d4:	bic	w3, w4, w3
   3a4d8:	b.hi	3a140 <aarch64_opcode_encode@@Base+0xdb8>  // b.pmore
   3a4dc:	add	w4, w5, w0
   3a4e0:	cmp	w4, #0x20
   3a4e4:	b.gt	3a140 <aarch64_opcode_encode@@Base+0xdb8>
   3a4e8:	lsl	w0, w1, w0
   3a4ec:	bic	w0, w3, w0
   3a4f0:	ldr	w4, [x2, #592]
   3a4f4:	ldr	w2, [x2, #596]
   3a4f8:	lsl	w0, w0, w5
   3a4fc:	orr	w0, w0, w6
   3a500:	str	w0, [sp, #104]
   3a504:	cmp	w4, #0x0
   3a508:	add	w5, w2, w1
   3a50c:	ccmp	w5, #0x1e, #0x2, ge  // ge = tcont
   3a510:	b.hi	3a140 <aarch64_opcode_encode@@Base+0xdb8>  // b.pmore
   3a514:	add	w5, w4, w2
   3a518:	cmp	w5, #0x20
   3a51c:	b.gt	3a140 <aarch64_opcode_encode@@Base+0xdb8>
   3a520:	lsl	w1, w1, w2
   3a524:	bic	w1, w3, w1
   3a528:	lsl	w1, w1, w4
   3a52c:	orr	w0, w1, w0
   3a530:	str	w0, [sp, #104]
   3a534:	b	394cc <aarch64_opcode_encode@@Base+0x144>
   3a538:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3a53c:	ldr	w6, [sp, #104]
   3a540:	mov	w0, #0xffffffff            	// #-1
   3a544:	ldr	x1, [x1, #3944]
   3a548:	add	x7, x1, #0x2c8
   3a54c:	ldp	w2, w5, [x7, #-8]
   3a550:	ldp	w3, w4, [x7]
   3a554:	cmp	w2, #0x0
   3a558:	b	3a12c <aarch64_opcode_encode@@Base+0xda4>
   3a55c:	mov	x0, x20
   3a560:	bl	36128 <init_disassemble_info@@Base+0x88>
   3a564:	mov	w1, #0x1                   	// #1
   3a568:	mov	w5, #0x74                  	// #116
   3a56c:	lsl	w1, w1, w0
   3a570:	mov	w4, #0x2b                  	// #43
   3a574:	mov	x0, x20
   3a578:	mov	w3, #0x2                   	// #2
   3a57c:	mov	w2, #0x0                   	// #0
   3a580:	bl	36250 <init_disassemble_info@@Base+0x1b0>
   3a584:	ldr	x24, [sp, #112]
   3a588:	b	394cc <aarch64_opcode_encode@@Base+0x144>
   3a58c:	ldrb	w0, [sp, #132]
   3a590:	sub	w0, w0, #0x6
   3a594:	and	w0, w0, #0xff
   3a598:	cmp	w0, #0x2
   3a59c:	b.hi	3a7f0 <aarch64_opcode_encode@@Base+0x1468>  // b.pmore
   3a5a0:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3a5a4:	add	x1, x1, #0x960
   3a5a8:	and	x0, x0, #0xff
   3a5ac:	add	x1, x1, #0x2a8
   3a5b0:	ldr	w2, [sp, #104]
   3a5b4:	ldr	w0, [x1, x0, lsl #2]
   3a5b8:	ubfiz	w0, w0, #15, #2
   3a5bc:	orr	w0, w2, w0
   3a5c0:	str	w0, [sp, #104]
   3a5c4:	b	394cc <aarch64_opcode_encode@@Base+0x144>
   3a5c8:	ldrb	w1, [sp, #188]
   3a5cc:	b	3a0b0 <aarch64_opcode_encode@@Base+0xd28>
   3a5d0:	and	x0, x0, #0x1f
   3a5d4:	mov	x1, #0x1f                  	// #31
   3a5d8:	sub	x1, x1, x2
   3a5dc:	str	x0, [sp, #256]
   3a5e0:	str	x1, [sp, #312]
   3a5e4:	b	39778 <aarch64_opcode_encode@@Base+0x3f0>
   3a5e8:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   3a5ec:	add	x3, x3, #0x960
   3a5f0:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3a5f4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3a5f8:	add	x3, x3, #0x208
   3a5fc:	add	x1, x1, #0x330
   3a600:	add	x0, x0, #0x6d8
   3a604:	mov	w2, #0x7e5                 	// #2021
   3a608:	bl	35ac0 <__assert_fail@plt>
   3a60c:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   3a610:	add	x3, x3, #0x960
   3a614:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3a618:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3a61c:	add	x3, x3, #0x208
   3a620:	add	x1, x1, #0x330
   3a624:	add	x0, x0, #0x6a8
   3a628:	mov	w2, #0x7cb                 	// #1995
   3a62c:	str	x27, [sp, #80]
   3a630:	bl	35ac0 <__assert_fail@plt>
   3a634:	bl	36220 <init_disassemble_info@@Base+0x180>
   3a638:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   3a63c:	add	x3, x3, #0x960
   3a640:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3a644:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3a648:	add	x3, x3, #0x260
   3a64c:	add	x1, x1, #0x330
   3a650:	add	x0, x0, #0x708
   3a654:	mov	w2, #0x604                 	// #1540
   3a658:	bl	35ac0 <__assert_fail@plt>
   3a65c:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   3a660:	add	x3, x3, #0x960
   3a664:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3a668:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3a66c:	add	x3, x3, #0x2d0
   3a670:	add	x1, x1, #0x330
   3a674:	add	x0, x0, #0x928
   3a678:	mov	w2, #0x53f                 	// #1343
   3a67c:	bl	35ac0 <__assert_fail@plt>
   3a680:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   3a684:	add	x3, x3, #0x960
   3a688:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3a68c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3a690:	add	x3, x3, #0x260
   3a694:	add	x1, x1, #0x330
   3a698:	add	x0, x0, #0x810
   3a69c:	mov	w2, #0x630                 	// #1584
   3a6a0:	bl	35ac0 <__assert_fail@plt>
   3a6a4:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   3a6a8:	add	x3, x3, #0x960
   3a6ac:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3a6b0:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3a6b4:	add	x3, x3, #0x2b8
   3a6b8:	add	x1, x1, #0x330
   3a6bc:	add	x0, x0, #0x8d8
   3a6c0:	mov	w2, #0x530                 	// #1328
   3a6c4:	bl	35ac0 <__assert_fail@plt>
   3a6c8:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   3a6cc:	add	x3, x3, #0x960
   3a6d0:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3a6d4:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   3a6d8:	add	x3, x3, #0x220
   3a6dc:	add	x1, x1, #0x330
   3a6e0:	add	x0, x0, #0x4b0
   3a6e4:	mov	w2, #0x75e                 	// #1886
   3a6e8:	bl	35ac0 <__assert_fail@plt>
   3a6ec:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3a6f0:	bl	361c8 <init_disassemble_info@@Base+0x128>
   3a6f4:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   3a6f8:	add	x3, x3, #0x960
   3a6fc:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3a700:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3a704:	add	x3, x3, #0x260
   3a708:	add	x1, x1, #0x330
   3a70c:	add	x0, x0, #0x880
   3a710:	mov	w2, #0x63c                 	// #1596
   3a714:	bl	35ac0 <__assert_fail@plt>
   3a718:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   3a71c:	add	x3, x3, #0x960
   3a720:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3a724:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3a728:	add	x3, x3, #0x260
   3a72c:	add	x1, x1, #0x330
   3a730:	add	x0, x0, #0x7f8
   3a734:	mov	w2, #0x622                 	// #1570
   3a738:	bl	35ac0 <__assert_fail@plt>
   3a73c:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   3a740:	add	x3, x3, #0x960
   3a744:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3a748:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3a74c:	add	x3, x3, #0x260
   3a750:	add	x1, x1, #0x330
   3a754:	add	x0, x0, #0x750
   3a758:	mov	w2, #0x611                 	// #1553
   3a75c:	bl	35ac0 <__assert_fail@plt>
   3a760:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   3a764:	add	x3, x3, #0x960
   3a768:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3a76c:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   3a770:	add	x3, x3, #0x278
   3a774:	add	x1, x1, #0x288
   3a778:	add	x0, x0, #0x4b0
   3a77c:	mov	w2, #0x1d4                 	// #468
   3a780:	bl	35ac0 <__assert_fail@plt>
   3a784:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   3a788:	add	x3, x3, #0x960
   3a78c:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3a790:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3a794:	add	x3, x3, #0x260
   3a798:	add	x1, x1, #0x330
   3a79c:	add	x0, x0, #0x828
   3a7a0:	mov	w2, #0x631                 	// #1585
   3a7a4:	bl	35ac0 <__assert_fail@plt>
   3a7a8:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   3a7ac:	add	x3, x3, #0x960
   3a7b0:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3a7b4:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   3a7b8:	add	x3, x3, #0x260
   3a7bc:	add	x1, x1, #0x330
   3a7c0:	add	x0, x0, #0x4b0
   3a7c4:	mov	w2, #0x5fb                 	// #1531
   3a7c8:	bl	35ac0 <__assert_fail@plt>
   3a7cc:	adrp	x3, 57000 <floatformat_from_double@@Base+0x210>
   3a7d0:	add	x3, x3, #0x960
   3a7d4:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3a7d8:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   3a7dc:	add	x3, x3, #0x238
   3a7e0:	add	x1, x1, #0x288
   3a7e4:	add	x0, x0, #0x4b0
   3a7e8:	mov	w2, #0x1c0                 	// #448
   3a7ec:	bl	35ac0 <__assert_fail@plt>
   3a7f0:	bl	35670 <abort@plt>
   3a7f4:	nop
   3a7f8:	stp	x29, x30, [sp, #-48]!
   3a7fc:	mov	x29, sp
   3a800:	stp	x19, x20, [sp, #16]
   3a804:	mov	x19, x1
   3a808:	mov	w20, w2
   3a80c:	stp	x21, x22, [sp, #32]
   3a810:	mov	w21, w0
   3a814:	add	x22, x1, #0x28
   3a818:	ldr	w1, [x19]
   3a81c:	mov	w0, w1
   3a820:	cbz	w1, 3a840 <aarch64_opcode_encode@@Base+0x14b8>
   3a824:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3a828:	eor	w0, w0, w21
   3a82c:	tst	w0, w20
   3a830:	b.eq	3a854 <aarch64_opcode_encode@@Base+0x14cc>  // b.none
   3a834:	add	x19, x19, #0x4
   3a838:	cmp	x19, x22
   3a83c:	b.ne	3a818 <aarch64_opcode_encode@@Base+0x1490>  // b.any
   3a840:	mov	w0, #0x0                   	// #0
   3a844:	ldp	x19, x20, [sp, #16]
   3a848:	ldp	x21, x22, [sp, #32]
   3a84c:	ldp	x29, x30, [sp], #48
   3a850:	ret
   3a854:	ldr	w0, [x19]
   3a858:	ldp	x19, x20, [sp, #16]
   3a85c:	ldp	x21, x22, [sp, #32]
   3a860:	ldp	x29, x30, [sp], #48
   3a864:	ret
   3a868:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   3a86c:	ubfiz	x0, x0, #3, #32
   3a870:	ubfiz	x8, x1, #3, #32
   3a874:	mov	w7, #0xffffffff            	// #-1
   3a878:	ldr	x5, [x5, #3944]
   3a87c:	add	x11, x0, x5
   3a880:	add	x12, x8, x5
   3a884:	ldr	w10, [x0, x5]
   3a888:	ldr	w9, [x5, #848]
   3a88c:	ldr	w0, [x11, #4]
   3a890:	ldr	w6, [x5, #852]
   3a894:	lsr	w10, w3, w10
   3a898:	lsr	w1, w3, w9
   3a89c:	lsl	w0, w7, w0
   3a8a0:	bic	w0, w10, w0
   3a8a4:	lsl	w6, w7, w6
   3a8a8:	bics	wzr, w1, w6
   3a8ac:	str	w0, [x2, #16]
   3a8b0:	bic	w6, w1, w6
   3a8b4:	ccmp	w4, #0x5, #0x0, eq  // eq = none
   3a8b8:	mov	w0, #0x1                   	// #1
   3a8bc:	ldr	w10, [x8, x5]
   3a8c0:	cset	w11, ne  // ne = any
   3a8c4:	cmp	x6, #0x0
   3a8c8:	ldr	w9, [x12, #4]
   3a8cc:	ldrb	w5, [x2, #28]
   3a8d0:	cset	w1, ne  // ne = any
   3a8d4:	ldrb	w8, [x2, #36]
   3a8d8:	lsr	w3, w3, w10
   3a8dc:	orr	w1, w11, w1, lsl #1
   3a8e0:	and	w5, w5, #0xfffffff9
   3a8e4:	and	w8, w8, #0xfffffffc
   3a8e8:	lsl	w7, w7, w9
   3a8ec:	orr	w1, w1, w8
   3a8f0:	bic	w7, w3, w7
   3a8f4:	orr	w3, w5, #0x4
   3a8f8:	stp	w7, w0, [x2, #20]
   3a8fc:	strb	w3, [x2, #28]
   3a900:	str	w4, [x2, #32]
   3a904:	strb	w1, [x2, #36]
   3a908:	str	x6, [x2, #40]
   3a90c:	ret
   3a910:	ldr	x1, [x0, w1, sxtw #3]
   3a914:	ldrb	w0, [x1, #72]
   3a918:	and	w0, w0, #0xf
   3a91c:	cmp	w0, #0x2
   3a920:	b.eq	3a974 <aarch64_opcode_encode@@Base+0x15ec>  // b.none
   3a924:	ldr	x1, [x1, #8]
   3a928:	mov	w0, #0x0                   	// #0
   3a92c:	ldrb	w3, [x1]
   3a930:	cmp	w3, #0x24
   3a934:	b.eq	3a93c <aarch64_opcode_encode@@Base+0x15b4>  // b.none
   3a938:	ret
   3a93c:	ldrb	w3, [x1, #1]
   3a940:	mov	w4, #0x64                  	// #100
   3a944:	cmp	w3, #0x78
   3a948:	ccmp	w3, w4, #0x4, ne  // ne = any
   3a94c:	b.ne	3a938 <aarch64_opcode_encode@@Base+0x15b0>  // b.any
   3a950:	ldrb	w1, [x1, #2]
   3a954:	cmp	w1, #0x2e
   3a958:	ccmp	w1, #0x0, #0x4, ne  // ne = any
   3a95c:	b.ne	3a938 <aarch64_opcode_encode@@Base+0x15b0>  // b.any
   3a960:	cmp	w3, #0x78
   3a964:	mov	w0, #0x1                   	// #1
   3a968:	cset	w1, ne  // ne = any
   3a96c:	str	w1, [x2]
   3a970:	ret
   3a974:	mov	w0, #0x1                   	// #1
   3a978:	str	wzr, [x2]
   3a97c:	ret
   3a980:	stp	x29, x30, [sp, #-16]!
   3a984:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3a988:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3a98c:	mov	x29, sp
   3a990:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3a994:	add	x3, x3, #0x388
   3a998:	add	x1, x1, #0x288
   3a99c:	add	x0, x0, #0x308
   3a9a0:	mov	w2, #0x203                 	// #515
   3a9a4:	bl	35ac0 <__assert_fail@plt>
   3a9a8:	stp	x29, x30, [sp, #-16]!
   3a9ac:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3a9b0:	add	x3, x3, #0x388
   3a9b4:	mov	x29, sp
   3a9b8:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3a9bc:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3a9c0:	add	x3, x3, #0x10
   3a9c4:	add	x1, x1, #0xc48
   3a9c8:	add	x0, x0, #0xc68
   3a9cc:	mov	w2, #0xba                  	// #186
   3a9d0:	bl	35ac0 <__assert_fail@plt>
   3a9d4:	nop
   3a9d8:	stp	x29, x30, [sp, #-16]!
   3a9dc:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3a9e0:	add	x3, x3, #0x388
   3a9e4:	mov	x29, sp
   3a9e8:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3a9ec:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   3a9f0:	add	x3, x3, #0x20
   3a9f4:	add	x1, x1, #0x288
   3a9f8:	add	x0, x0, #0x4b0
   3a9fc:	mov	w2, #0x1ab                 	// #427
   3aa00:	bl	35ac0 <__assert_fail@plt>
   3aa04:	nop
   3aa08:	stp	x29, x30, [sp, #-16]!
   3aa0c:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3aa10:	add	x3, x3, #0x388
   3aa14:	mov	x29, sp
   3aa18:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3aa1c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3aa20:	add	x3, x3, #0x48
   3aa24:	add	x1, x1, #0xc48
   3aa28:	add	x0, x0, #0xc70
   3aa2c:	mov	w2, #0xe5                  	// #229
   3aa30:	bl	35ac0 <__assert_fail@plt>
   3aa34:	nop
   3aa38:	stp	x29, x30, [sp, #-16]!
   3aa3c:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3aa40:	add	x3, x3, #0x388
   3aa44:	mov	x29, sp
   3aa48:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3aa4c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3aa50:	add	x3, x3, #0x68
   3aa54:	add	x1, x1, #0xc48
   3aa58:	add	x0, x0, #0xcc0
   3aa5c:	mov	w2, #0xda                  	// #218
   3aa60:	bl	35ac0 <__assert_fail@plt>
   3aa64:	nop
   3aa68:	stp	x29, x30, [sp, #-16]!
   3aa6c:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3aa70:	add	x3, x3, #0x388
   3aa74:	mov	x29, sp
   3aa78:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3aa7c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3aa80:	add	x3, x3, #0x88
   3aa84:	add	x1, x1, #0xc48
   3aa88:	add	x0, x0, #0xd10
   3aa8c:	mov	w2, #0xc8                  	// #200
   3aa90:	bl	35ac0 <__assert_fail@plt>
   3aa94:	nop
   3aa98:	stp	x29, x30, [sp, #-64]!
   3aa9c:	mov	x29, sp
   3aaa0:	stp	x19, x20, [sp, #16]
   3aaa4:	mov	w19, w1
   3aaa8:	sbfiz	x1, x1, #3, #32
   3aaac:	sub	x1, x1, w19, sxtw
   3aab0:	str	x21, [sp, #32]
   3aab4:	add	x1, x0, x1, lsl #3
   3aab8:	ldrb	w20, [x1, #28]
   3aabc:	cbnz	w20, 3aaf4 <aarch64_opcode_encode@@Base+0x176c>
   3aac0:	ldr	x1, [x0, #8]
   3aac4:	add	x21, sp, #0x38
   3aac8:	mov	x3, x21
   3aacc:	mov	w2, w19
   3aad0:	add	x1, x1, #0x38
   3aad4:	bl	35360 <aarch64_find_best_match@plt>
   3aad8:	cbz	w0, 3aae0 <aarch64_opcode_encode@@Base+0x1758>
   3aadc:	ldrb	w20, [x21, w19, sxtw]
   3aae0:	mov	w0, w20
   3aae4:	ldp	x19, x20, [sp, #16]
   3aae8:	ldr	x21, [sp, #32]
   3aaec:	ldp	x29, x30, [sp], #64
   3aaf0:	ret
   3aaf4:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3aaf8:	add	x3, x3, #0x388
   3aafc:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3ab00:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3ab04:	add	x3, x3, #0xa8
   3ab08:	add	x1, x1, #0xc48
   3ab0c:	add	x0, x0, #0xd60
   3ab10:	mov	w2, #0xf4                  	// #244
   3ab14:	bl	35ac0 <__assert_fail@plt>
   3ab18:	stp	x29, x30, [sp, #-16]!
   3ab1c:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3ab20:	add	x3, x3, #0x388
   3ab24:	mov	x29, sp
   3ab28:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3ab2c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3ab30:	add	x3, x3, #0xc0
   3ab34:	add	x1, x1, #0x288
   3ab38:	add	x0, x0, #0xd98
   3ab3c:	mov	w2, #0x148                 	// #328
   3ab40:	bl	35ac0 <__assert_fail@plt>
   3ab44:	nop
   3ab48:	mov	x0, x2
   3ab4c:	mov	w2, w1
   3ab50:	ldr	w3, [x0, #172]
   3ab54:	cmp	w3, #0x2
   3ab58:	b.eq	3ab94 <aarch64_opcode_encode@@Base+0x180c>  // b.none
   3ab5c:	cmp	w3, #0x4
   3ab60:	b.ne	3ab78 <aarch64_opcode_encode@@Base+0x17f0>  // b.any
   3ab64:	ldp	x3, x0, [x0]
   3ab68:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3ab6c:	add	x1, x1, #0xdf0
   3ab70:	mov	x16, x3
   3ab74:	br	x16
   3ab78:	cmp	w3, #0x1
   3ab7c:	b.ne	3aba8 <aarch64_opcode_encode@@Base+0x1820>  // b.any
   3ab80:	ldp	x3, x0, [x0]
   3ab84:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3ab88:	add	x1, x1, #0xdd0
   3ab8c:	mov	x16, x3
   3ab90:	br	x16
   3ab94:	ldp	x3, x0, [x0]
   3ab98:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3ab9c:	add	x1, x1, #0xde0
   3aba0:	mov	x16, x3
   3aba4:	br	x16
   3aba8:	stp	x29, x30, [sp, #-16]!
   3abac:	mov	x29, sp
   3abb0:	bl	35670 <abort@plt>
   3abb4:	nop
   3abb8:	stp	x29, x30, [sp, #-48]!
   3abbc:	mov	x3, x1
   3abc0:	mov	w1, #0x2e                  	// #46
   3abc4:	mov	x29, sp
   3abc8:	str	x21, [sp, #32]
   3abcc:	ldr	x21, [x3]
   3abd0:	stp	x19, x20, [sp, #16]
   3abd4:	mov	x20, x0
   3abd8:	mov	x19, x2
   3abdc:	mov	x0, x21
   3abe0:	bl	35840 <strchr@plt>
   3abe4:	cbz	x0, 3ac20 <aarch64_opcode_encode@@Base+0x1898>
   3abe8:	ldr	x1, [x19]
   3abec:	cbz	x1, 3ac20 <aarch64_opcode_encode@@Base+0x1898>
   3abf0:	sub	x19, x0, x21
   3abf4:	cmp	x19, #0x7
   3abf8:	b.hi	3ac44 <aarch64_opcode_encode@@Base+0x18bc>  // b.pmore
   3abfc:	mov	x1, x21
   3ac00:	mov	x2, x19
   3ac04:	mov	x0, x20
   3ac08:	bl	35a80 <strncpy@plt>
   3ac0c:	strb	wzr, [x20, x19]
   3ac10:	ldp	x19, x20, [sp, #16]
   3ac14:	ldr	x21, [sp, #32]
   3ac18:	ldp	x29, x30, [sp], #48
   3ac1c:	ret
   3ac20:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3ac24:	add	x3, x3, #0x388
   3ac28:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3ac2c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3ac30:	add	x3, x3, #0xd8
   3ac34:	add	x1, x1, #0xc48
   3ac38:	add	x0, x0, #0xe00
   3ac3c:	mov	w2, #0xc19                 	// #3097
   3ac40:	bl	35ac0 <__assert_fail@plt>
   3ac44:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3ac48:	add	x3, x3, #0x388
   3ac4c:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3ac50:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3ac54:	add	x3, x3, #0xd8
   3ac58:	add	x1, x1, #0xc48
   3ac5c:	add	x0, x0, #0xe18
   3ac60:	mov	w2, #0xc1b                 	// #3099
   3ac64:	bl	35ac0 <__assert_fail@plt>

000000000003ac68 <extract_fields@@Base>:
   3ac68:	stp	x29, x30, [sp, #-96]!
   3ac6c:	mov	w8, #0xffffffd8            	// #-40
   3ac70:	cmp	w2, #0x5
   3ac74:	mov	x29, sp
   3ac78:	add	x9, sp, #0x30
   3ac7c:	str	x9, [sp, #32]
   3ac80:	stp	w8, wzr, [sp, #40]
   3ac84:	stp	x2, x3, [sp, #48]
   3ac88:	add	x3, sp, #0x60
   3ac8c:	stp	x3, x3, [sp, #16]
   3ac90:	stp	x4, x5, [sp, #64]
   3ac94:	stp	x6, x7, [sp, #80]
   3ac98:	b.hi	3ad34 <extract_fields@@Base+0xcc>  // b.pmore
   3ac9c:	sub	w4, w2, #0x1
   3aca0:	cbz	w2, 3ad08 <extract_fields@@Base+0xa0>
   3aca4:	adrp	x7, a2000 <aarch64_operands@@Base+0x16bc0>
   3aca8:	add	x6, sp, #0x60
   3acac:	bic	w9, w0, w1
   3acb0:	mov	x10, x6
   3acb4:	ldr	x7, [x7, #3944]
   3acb8:	mov	w5, w8
   3acbc:	mov	w2, #0x0                   	// #0
   3acc0:	mov	w8, #0xffffffff            	// #-1
   3acc4:	nop
   3acc8:	tbnz	w5, #31, 3ad14 <extract_fields@@Base+0xac>
   3accc:	mov	x0, x6
   3acd0:	add	x6, x6, #0x8
   3acd4:	ldr	w0, [x0]
   3acd8:	sub	w4, w4, #0x1
   3acdc:	cmn	w4, #0x1
   3ace0:	lsl	x0, x0, #3
   3ace4:	add	x3, x7, x0
   3ace8:	ldr	w1, [x7, x0]
   3acec:	ldr	w0, [x3, #4]
   3acf0:	lsr	w3, w9, w1
   3acf4:	lsl	w1, w8, w0
   3acf8:	bic	w1, w3, w1
   3acfc:	lsl	w2, w2, w0
   3ad00:	orr	w2, w1, w2
   3ad04:	b.ne	3acc8 <extract_fields@@Base+0x60>  // b.any
   3ad08:	mov	w0, w2
   3ad0c:	ldp	x29, x30, [sp], #96
   3ad10:	ret
   3ad14:	add	w1, w5, #0x8
   3ad18:	cmp	w1, #0x0
   3ad1c:	b.le	3ad28 <extract_fields@@Base+0xc0>
   3ad20:	mov	w5, w1
   3ad24:	b	3accc <extract_fields@@Base+0x64>
   3ad28:	add	x0, x10, w5, sxtw
   3ad2c:	mov	w5, w1
   3ad30:	b	3acd4 <extract_fields@@Base+0x6c>
   3ad34:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3ad38:	add	x3, x3, #0x388
   3ad3c:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3ad40:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3ad44:	add	x3, x3, #0xf0
   3ad48:	add	x1, x1, #0xc48
   3ad4c:	add	x0, x0, #0x350
   3ad50:	mov	w2, #0x94                  	// #148
   3ad54:	bl	35ac0 <__assert_fail@plt>
   3ad58:	stp	x29, x30, [sp, #-176]!
   3ad5c:	cmp	x0, #0x0
   3ad60:	mov	x29, sp
   3ad64:	stp	x19, x20, [sp, #16]
   3ad68:	stp	x21, x22, [sp, #32]
   3ad6c:	stp	x23, x24, [sp, #48]
   3ad70:	stp	x25, x26, [sp, #64]
   3ad74:	stp	x27, x28, [sp, #80]
   3ad78:	cset	w27, ne  // ne = any
   3ad7c:	cmp	x2, #0x0
   3ad80:	csel	w27, w27, wzr, ne  // ne = any
   3ad84:	cbz	w27, 3bc28 <extract_fields@@Base+0xfc0>
   3ad88:	mov	x23, x0
   3ad8c:	mov	x22, x2
   3ad90:	mov	w19, w1
   3ad94:	mov	w21, w3
   3ad98:	mov	x20, x4
   3ad9c:	mov	x0, x22
   3ada0:	mov	x2, #0x168                 	// #360
   3ada4:	mov	w1, #0x0                   	// #0
   3ada8:	bl	35470 <memset@plt>
   3adac:	ldp	w26, w0, [x23, #8]
   3adb0:	eor	w26, w19, w26
   3adb4:	ands	w26, w26, w0
   3adb8:	b.ne	3aec0 <extract_fields@@Base+0x258>  // b.any
   3adbc:	mov	x24, x22
   3adc0:	str	x23, [x22, #8]
   3adc4:	add	x25, x23, #0x20
   3adc8:	mov	x5, #0x0                   	// #0
   3adcc:	str	w19, [x24], #24
   3add0:	mov	x0, x24
   3add4:	ldr	w1, [x25, x5, lsl #2]
   3add8:	cbz	w1, 3adf4 <extract_fields@@Base+0x18c>
   3addc:	str	w1, [x0]
   3ade0:	add	x0, x0, #0x38
   3ade4:	stur	w5, [x0, #-48]
   3ade8:	add	x5, x5, #0x1
   3adec:	cmp	x5, #0x6
   3adf0:	b.ne	3add4 <extract_fields@@Base+0x16c>  // b.any
   3adf4:	ldr	x0, [x23, #120]
   3adf8:	mov	x1, #0xff0                 	// #4080
   3adfc:	movk	x1, #0x8c0, lsl #16
   3ae00:	mov	x28, x23
   3ae04:	tst	x0, x1
   3ae08:	b.eq	3ae38 <extract_fields@@Base+0x1d0>  // b.none
   3ae0c:	tbnz	w0, #4, 3afe8 <extract_fields@@Base+0x380>
   3ae10:	tbnz	w0, #5, 3af18 <extract_fields@@Base+0x2b0>
   3ae14:	tbnz	w0, #27, 3b01c <extract_fields@@Base+0x3b4>
   3ae18:	tbnz	w0, #6, 3b3b8 <extract_fields@@Base+0x750>
   3ae1c:	tbnz	w0, #7, 3b09c <extract_fields@@Base+0x434>
   3ae20:	tbnz	w0, #8, 3b1c8 <extract_fields@@Base+0x560>
   3ae24:	tbnz	w0, #9, 3b10c <extract_fields@@Base+0x4a4>
   3ae28:	tbnz	w0, #10, 3b31c <extract_fields@@Base+0x6b4>
   3ae2c:	tbnz	w0, #11, 3b2c4 <extract_fields@@Base+0x65c>
   3ae30:	tbnz	w0, #22, 3b478 <extract_fields@@Base+0x810>
   3ae34:	nop
   3ae38:	ldr	w0, [x28, #16]
   3ae3c:	sub	w0, w0, #0x47
   3ae40:	cmp	w0, #0x12
   3ae44:	b.ls	3aee4 <extract_fields@@Base+0x27c>  // b.plast
   3ae48:	adrp	x26, a2000 <aarch64_operands@@Base+0x16bc0>
   3ae4c:	add	x27, x22, #0x168
   3ae50:	ldr	x26, [x26, #4032]
   3ae54:	ldr	w5, [x25]
   3ae58:	cbz	w5, 3ae80 <extract_fields@@Base+0x218>
   3ae5c:	ubfiz	x0, x5, #1, #32
   3ae60:	add	x5, x0, w5, uxtw
   3ae64:	add	x0, x26, x5, lsl #4
   3ae68:	ldr	w1, [x0, #16]
   3ae6c:	tbnz	w1, #1, 3aefc <extract_fields@@Base+0x294>
   3ae70:	add	x24, x24, #0x38
   3ae74:	add	x25, x25, #0x4
   3ae78:	cmp	x27, x24
   3ae7c:	b.ne	3ae54 <extract_fields@@Base+0x1ec>  // b.any
   3ae80:	ldr	x6, [x23, #136]
   3ae84:	cbz	x6, 3aea8 <extract_fields@@Base+0x240>
   3ae88:	mov	w1, w19
   3ae8c:	mov	x4, x20
   3ae90:	mov	x0, x22
   3ae94:	mov	x5, #0x0                   	// #0
   3ae98:	mov	w3, #0x0                   	// #0
   3ae9c:	mov	x2, #0x0                   	// #0
   3aea0:	blr	x6
   3aea4:	cbnz	w0, 3aec0 <extract_fields@@Base+0x258>
   3aea8:	mov	x0, x22
   3aeac:	mov	x1, #0x0                   	// #0
   3aeb0:	bl	354e0 <aarch64_match_operands_constraint@plt>
   3aeb4:	mov	w26, w0
   3aeb8:	cmp	w0, #0x1
   3aebc:	b.eq	3b3a4 <extract_fields@@Base+0x73c>  // b.none
   3aec0:	mov	w26, #0x0                   	// #0
   3aec4:	mov	w0, w26
   3aec8:	ldp	x19, x20, [sp, #16]
   3aecc:	ldp	x21, x22, [sp, #32]
   3aed0:	ldp	x23, x24, [sp, #48]
   3aed4:	ldp	x25, x26, [sp, #64]
   3aed8:	ldp	x27, x28, [sp, #80]
   3aedc:	ldp	x29, x30, [sp], #176
   3aee0:	ret
   3aee4:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3aee8:	add	x1, x1, #0x360
   3aeec:	ldrh	w0, [x1, w0, uxtw #1]
   3aef0:	adr	x1, 3aefc <extract_fields@@Base+0x294>
   3aef4:	add	x0, x1, w0, sxth #2
   3aef8:	br	x0
   3aefc:	mov	x4, x20
   3af00:	mov	x3, x22
   3af04:	mov	w2, w19
   3af08:	mov	x1, x24
   3af0c:	bl	355f0 <aarch64_extract_operand@plt>
   3af10:	cbnz	w0, 3ae70 <extract_fields@@Base+0x208>
   3af14:	b	3aec0 <extract_fields@@Base+0x258>
   3af18:	ldr	w0, [x28, #32]
   3af1c:	str	wzr, [sp, #108]
   3af20:	bl	35710 <aarch64_get_operand_class@plt>
   3af24:	cmp	w0, #0x1
   3af28:	b.eq	3af44 <extract_fields@@Base+0x2dc>  // b.none
   3af2c:	ldr	w0, [x28, #36]
   3af30:	mov	w1, #0x1                   	// #1
   3af34:	str	w1, [sp, #108]
   3af38:	bl	35710 <aarch64_get_operand_class@plt>
   3af3c:	cmp	w0, #0x1
   3af40:	b.ne	3bc54 <extract_fields@@Base+0xfec>  // b.any
   3af44:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   3af48:	ldr	w0, [x22]
   3af4c:	mov	w5, #0xffffffff            	// #-1
   3af50:	ldr	x4, [x4, #3944]
   3af54:	ldr	w2, [x4, #472]
   3af58:	ldr	w1, [x4, #476]
   3af5c:	lsr	w0, w0, w2
   3af60:	lsl	w1, w5, w1
   3af64:	bic	w1, w0, w1
   3af68:	cmp	w1, #0x1
   3af6c:	add	w2, w1, #0x1
   3af70:	b.hi	3bc24 <extract_fields@@Base+0xfbc>  // b.pmore
   3af74:	and	w2, w2, #0xff
   3af78:	stp	w2, w1, [sp, #112]
   3af7c:	mov	w0, w2
   3af80:	str	x4, [sp, #120]
   3af84:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3af88:	ldr	w1, [sp, #116]
   3af8c:	cmp	w1, w0
   3af90:	b.ne	3bc24 <extract_fields@@Base+0xfbc>  // b.any
   3af94:	ldrsw	x28, [sp, #108]
   3af98:	ldr	w2, [sp, #112]
   3af9c:	lsl	x0, x28, #3
   3afa0:	sub	x0, x0, x28
   3afa4:	add	x0, x22, x0, lsl #3
   3afa8:	strb	w2, [x0, #28]
   3afac:	ldr	x28, [x22, #8]
   3afb0:	ldr	x0, [x28, #120]
   3afb4:	tbz	w0, #23, 3ae14 <extract_fields@@Base+0x1ac>
   3afb8:	ldr	x4, [sp, #120]
   3afbc:	mov	w5, #0xffffffff            	// #-1
   3afc0:	ldr	w2, [x22]
   3afc4:	ldr	w6, [x4, #452]
   3afc8:	ldr	w7, [x4, #448]
   3afcc:	lsr	w4, w2, w7
   3afd0:	lsl	w2, w5, w6
   3afd4:	bic	w2, w4, w2
   3afd8:	cmp	w1, w2
   3afdc:	b.ne	3aec0 <extract_fields@@Base+0x258>  // b.any
   3afe0:	tbz	w0, #27, 3ae18 <extract_fields@@Base+0x1b0>
   3afe4:	b	3b01c <extract_fields@@Base+0x3b4>
   3afe8:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   3afec:	mov	w2, #0xffffffff            	// #-1
   3aff0:	ldr	x0, [x0, #3944]
   3aff4:	ldp	w1, w3, [x0, #8]
   3aff8:	lsl	w2, w2, w3
   3affc:	lsr	w0, w19, w1
   3b000:	bic	w0, w0, w2
   3b004:	bl	35310 <get_cond_from_value@plt>
   3b008:	str	x0, [x22, #16]
   3b00c:	ldr	x28, [x22, #8]
   3b010:	ldr	x0, [x28, #120]
   3b014:	tbz	w0, #5, 3ae14 <extract_fields@@Base+0x1ac>
   3b018:	b	3af18 <extract_fields@@Base+0x2b0>
   3b01c:	ldr	w0, [x28, #32]
   3b020:	str	wzr, [sp, #108]
   3b024:	bl	35710 <aarch64_get_operand_class@plt>
   3b028:	cmp	w0, #0x1
   3b02c:	b.ne	3b870 <extract_fields@@Base+0xc08>  // b.any
   3b030:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   3b034:	ldr	w2, [x22]
   3b038:	mov	w1, #0xffffffff            	// #-1
   3b03c:	ldr	x0, [x0, #3944]
   3b040:	ldr	w3, [x0, #484]
   3b044:	ldr	w4, [x0, #480]
   3b048:	lsl	w1, w1, w3
   3b04c:	lsr	w0, w2, w4
   3b050:	bic	w28, w0, w1
   3b054:	cmp	w28, #0x1
   3b058:	add	w2, w28, #0x1
   3b05c:	b.hi	3bc24 <extract_fields@@Base+0xfbc>  // b.pmore
   3b060:	and	w2, w2, #0xff
   3b064:	str	w2, [sp, #112]
   3b068:	mov	w0, w2
   3b06c:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3b070:	cmp	w28, w0
   3b074:	b.ne	3bc24 <extract_fields@@Base+0xfbc>  // b.any
   3b078:	ldrsw	x28, [sp, #108]
   3b07c:	ldr	w2, [sp, #112]
   3b080:	lsl	x0, x28, #3
   3b084:	sub	x0, x0, x28
   3b088:	add	x0, x22, x0, lsl #3
   3b08c:	strb	w2, [x0, #28]
   3b090:	ldr	x28, [x22, #8]
   3b094:	ldr	x0, [x28, #120]
   3b098:	b	3ae18 <extract_fields@@Base+0x1b0>
   3b09c:	ldr	w0, [x28, #36]
   3b0a0:	bl	35710 <aarch64_get_operand_class@plt>
   3b0a4:	cmp	w0, #0x3
   3b0a8:	mov	x2, #0x1                   	// #1
   3b0ac:	b.ne	3b4dc <extract_fields@@Base+0x874>  // b.any
   3b0b0:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3b0b4:	ldr	w3, [x22]
   3b0b8:	mov	w0, #0xffffffff            	// #-1
   3b0bc:	ldr	x1, [x1, #3944]
   3b0c0:	ldr	w4, [x1, #292]
   3b0c4:	ldr	w5, [x1, #288]
   3b0c8:	lsl	w0, w0, w4
   3b0cc:	lsr	w1, w3, w5
   3b0d0:	bic	w0, w1, w0
   3b0d4:	cmp	w0, #0x1
   3b0d8:	b.eq	3ba24 <extract_fields@@Base+0xdbc>  // b.none
   3b0dc:	cmp	w0, #0x3
   3b0e0:	b.eq	3ba1c <extract_fields@@Base+0xdb4>  // b.none
   3b0e4:	cbnz	w0, 3aec0 <extract_fields@@Base+0x258>
   3b0e8:	mov	w1, #0x7                   	// #7
   3b0ec:	lsl	x0, x2, #3
   3b0f0:	sub	x2, x0, x2
   3b0f4:	add	x0, x22, x2, lsl #3
   3b0f8:	strb	w1, [x0, #28]
   3b0fc:	ldr	x28, [x22, #8]
   3b100:	ldr	x0, [x28, #120]
   3b104:	tbz	w0, #8, 3ae24 <extract_fields@@Base+0x1bc>
   3b108:	b	3b1c8 <extract_fields@@Base+0x560>
   3b10c:	ldr	w0, [x28, #32]
   3b110:	bl	35710 <aarch64_get_operand_class@plt>
   3b114:	cmp	w0, #0x4
   3b118:	b.ne	3bc7c <extract_fields@@Base+0x1014>  // b.any
   3b11c:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3b120:	ldr	w4, [x22]
   3b124:	mov	w0, #0xffffffff            	// #-1
   3b128:	ldr	x3, [x1, #3944]
   3b12c:	ldr	w2, [x3, #344]
   3b130:	ldr	w3, [x3, #348]
   3b134:	lsr	w2, w4, w2
   3b138:	lsl	w0, w0, w3
   3b13c:	bic	w0, w2, w0
   3b140:	tbnz	w0, #0, 3bb18 <extract_fields@@Base+0xeb0>
   3b144:	tbnz	w0, #1, 3bb20 <extract_fields@@Base+0xeb8>
   3b148:	tbnz	w0, #2, 3bb28 <extract_fields@@Base+0xec0>
   3b14c:	mov	w3, #0x3                   	// #3
   3b150:	tbz	w0, #3, 3aec0 <extract_fields@@Base+0x258>
   3b154:	lsl	w3, w3, #1
   3b158:	ldr	x1, [x1, #3944]
   3b15c:	mov	w27, #0xffffffff            	// #-1
   3b160:	ldr	x0, [x22, #8]
   3b164:	ldp	w2, w1, [x1, #88]
   3b168:	ldr	w0, [x0, #12]
   3b16c:	bic	w0, w4, w0
   3b170:	lsl	w27, w27, w1
   3b174:	lsr	w0, w0, w2
   3b178:	bic	w27, w0, w27
   3b17c:	orr	w27, w27, w3
   3b180:	add	w0, w27, #0xd
   3b184:	add	w1, w27, #0xe
   3b188:	cmp	w0, #0xe
   3b18c:	csel	w0, w1, w0, hi  // hi = pmore
   3b190:	cmp	w27, #0x8
   3b194:	b.hi	3bc50 <extract_fields@@Base+0xfe8>  // b.pmore
   3b198:	and	w1, w0, #0xff
   3b19c:	str	w1, [sp, #108]
   3b1a0:	mov	w0, w1
   3b1a4:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3b1a8:	cmp	w27, w0
   3b1ac:	b.ne	3bc50 <extract_fields@@Base+0xfe8>  // b.any
   3b1b0:	ldr	x28, [x22, #8]
   3b1b4:	ldr	w1, [sp, #108]
   3b1b8:	strb	w1, [x22, #28]
   3b1bc:	ldr	x0, [x28, #120]
   3b1c0:	tbz	w0, #10, 3ae2c <extract_fields@@Base+0x1c4>
   3b1c4:	b	3b31c <extract_fields@@Base+0x6b4>
   3b1c8:	ldr	w0, [x28, #32]
   3b1cc:	bl	35710 <aarch64_get_operand_class@plt>
   3b1d0:	cmp	w0, #0x6
   3b1d4:	b.eq	3ba2c <extract_fields@@Base+0xdc4>  // b.none
   3b1d8:	ldr	w0, [x28, #36]
   3b1dc:	mov	w1, #0x0                   	// #0
   3b1e0:	str	w1, [sp, #108]
   3b1e4:	bl	35710 <aarch64_get_operand_class@plt>
   3b1e8:	cmp	w0, #0x6
   3b1ec:	ldr	w1, [sp, #108]
   3b1f0:	b.ne	3bcc4 <extract_fields@@Base+0x105c>  // b.any
   3b1f4:	ldrb	w0, [x28, #57]
   3b1f8:	str	w1, [sp, #108]
   3b1fc:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3b200:	ands	w0, w0, #0xff
   3b204:	ldr	w1, [sp, #108]
   3b208:	cset	w27, eq  // eq = none
   3b20c:	cmp	w27, #0x0
   3b210:	ccmp	w0, w1, #0x0, ne  // ne = any
   3b214:	b.eq	3bcc4 <extract_fields@@Base+0x105c>  // b.none
   3b218:	mov	w28, #0x1                   	// #1
   3b21c:	cbz	w1, 3b228 <extract_fields@@Base+0x5c0>
   3b220:	cmp	w1, w0, lsl #1
   3b224:	cset	w28, eq  // eq = none
   3b228:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   3b22c:	ldr	w27, [x22]
   3b230:	ldr	x3, [x22, #8]
   3b234:	mov	w0, #0xffffffff            	// #-1
   3b238:	ldr	x4, [x4, #3944]
   3b23c:	ldr	w1, [x3, #12]
   3b240:	ldp	w5, w4, [x4, #64]
   3b244:	mvn	w2, w1
   3b248:	bic	w27, w27, w1
   3b24c:	lsl	w0, w0, w4
   3b250:	lsr	w2, w2, w5
   3b254:	bic	w2, w2, w0
   3b258:	lsr	w27, w27, w5
   3b25c:	cmp	w2, #0x3
   3b260:	bic	w27, w27, w0
   3b264:	b.eq	3ba58 <extract_fields@@Base+0xdf0>  // b.none
   3b268:	sxtw	x28, w28
   3b26c:	add	x1, sp, #0x88
   3b270:	add	x3, x3, x28
   3b274:	mov	x0, x1
   3b278:	add	x5, sp, #0xb0
   3b27c:	nop
   3b280:	ldrb	w4, [x3, #56]
   3b284:	str	w4, [x0]
   3b288:	cbz	w4, 3b29c <extract_fields@@Base+0x634>
   3b28c:	add	x0, x0, #0x4
   3b290:	add	x3, x3, #0x6
   3b294:	cmp	x5, x0
   3b298:	b.ne	3b280 <extract_fields@@Base+0x618>  // b.any
   3b29c:	mov	w0, w27
   3b2a0:	bl	3a7f8 <aarch64_opcode_encode@@Base+0x1470>
   3b2a4:	lsl	x1, x28, #3
   3b2a8:	sub	x1, x1, x28
   3b2ac:	add	x1, x22, x1, lsl #3
   3b2b0:	strb	w0, [x1, #28]
   3b2b4:	ldr	x28, [x22, #8]
   3b2b8:	ldr	x0, [x28, #120]
   3b2bc:	tbz	w0, #9, 3ae28 <extract_fields@@Base+0x1c0>
   3b2c0:	b	3b10c <extract_fields@@Base+0x4a4>
   3b2c4:	ldr	w0, [x28, #32]
   3b2c8:	bl	35710 <aarch64_get_operand_class@plt>
   3b2cc:	cmp	w0, #0x1
   3b2d0:	b.ne	3bca0 <extract_fields@@Base+0x1038>  // b.any
   3b2d4:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3b2d8:	mov	w2, #0x0                   	// #0
   3b2dc:	ldr	x1, [x1, #3944]
   3b2e0:	ldr	w3, [x1, #268]
   3b2e4:	cmp	w3, #0x0
   3b2e8:	b.le	3b2f4 <extract_fields@@Base+0x68c>
   3b2ec:	ldr	w2, [x1, #264]
   3b2f0:	mov	w26, w0
   3b2f4:	ldr	w0, [x22]
   3b2f8:	mov	w1, #0x2                   	// #2
   3b2fc:	ldr	x28, [x22, #8]
   3b300:	lsr	w0, w0, w2
   3b304:	and	w26, w0, w26
   3b308:	sub	w26, w1, w26
   3b30c:	strb	w26, [x22, #28]
   3b310:	ldr	x0, [x28, #120]
   3b314:	tbz	w0, #22, 3ae38 <extract_fields@@Base+0x1d0>
   3b318:	b	3b478 <extract_fields@@Base+0x810>
   3b31c:	add	x0, x28, #0x20
   3b320:	mov	w1, #0x4                   	// #4
   3b324:	bl	35100 <aarch64_operand_index@plt>
   3b328:	mov	w28, w0
   3b32c:	cmn	w0, #0x1
   3b330:	b.eq	3ba98 <extract_fields@@Base+0xe30>  // b.none
   3b334:	cmp	w0, #0x1
   3b338:	b.hi	3bc58 <extract_fields@@Base+0xff0>  // b.pmore
   3b33c:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   3b340:	ldr	w1, [x22]
   3b344:	mov	w27, #0xffffffff            	// #-1
   3b348:	ldr	x0, [x0, #3944]
   3b34c:	ldp	w3, w2, [x0, #88]
   3b350:	lsr	w0, w1, w3
   3b354:	lsl	w27, w27, w2
   3b358:	bic	w27, w0, w27
   3b35c:	cmp	w27, #0x1
   3b360:	add	w1, w27, #0x1
   3b364:	b.hi	3bc24 <extract_fields@@Base+0xfbc>  // b.pmore
   3b368:	and	w1, w1, #0xff
   3b36c:	str	w1, [sp, #108]
   3b370:	mov	w0, w1
   3b374:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3b378:	cmp	w27, w0
   3b37c:	b.ne	3bc24 <extract_fields@@Base+0xfbc>  // b.any
   3b380:	sbfiz	x0, x28, #3, #32
   3b384:	ldr	w1, [sp, #108]
   3b388:	sub	x0, x0, w28, sxtw
   3b38c:	add	x0, x22, x0, lsl #3
   3b390:	strb	w1, [x0, #28]
   3b394:	ldr	x28, [x22, #8]
   3b398:	ldr	x0, [x28, #120]
   3b39c:	tbz	w0, #11, 3ae30 <extract_fields@@Base+0x1c8>
   3b3a0:	b	3b2c4 <extract_fields@@Base+0x65c>
   3b3a4:	cbnz	w21, 3aec4 <extract_fields@@Base+0x25c>
   3b3a8:	mov	x1, x20
   3b3ac:	mov	x0, x22
   3b3b0:	bl	3bce8 <extract_fields@@Base+0x1080>
   3b3b4:	b	3aec4 <extract_fields@@Base+0x25c>
   3b3b8:	ldp	w1, w5, [x28, #12]
   3b3bc:	mov	w4, #0xb                   	// #11
   3b3c0:	ldr	w0, [x22]
   3b3c4:	mov	w2, #0x2                   	// #2
   3b3c8:	sub	w5, w5, #0x12
   3b3cc:	cmp	w5, #0x4
   3b3d0:	cset	w26, cc  // cc = lo, ul, last
   3b3d4:	add	w26, w26, #0x8
   3b3d8:	mov	w3, w26
   3b3dc:	bl	35390 <extract_fields@plt>
   3b3e0:	ldr	x5, [x22, #8]
   3b3e4:	mov	w28, w0
   3b3e8:	mov	w3, w26
   3b3ec:	mov	w4, #0xb                   	// #11
   3b3f0:	mov	w2, #0x2                   	// #2
   3b3f4:	mov	w1, #0x0                   	// #0
   3b3f8:	ldr	w0, [x5, #12]
   3b3fc:	mvn	w0, w0
   3b400:	bl	35390 <extract_fields@plt>
   3b404:	mov	w26, w0
   3b408:	ldr	x0, [x22, #8]
   3b40c:	bl	357b0 <aarch64_select_operand_for_sizeq_field_coding@plt>
   3b410:	sxtw	x27, w0
   3b414:	cmp	w26, #0x7
   3b418:	b.eq	3bad4 <extract_fields@@Base+0xe6c>  // b.none
   3b41c:	ldr	x4, [x22, #8]
   3b420:	add	x1, sp, #0x88
   3b424:	add	x6, sp, #0xb0
   3b428:	mov	x3, x1
   3b42c:	add	x4, x4, x27
   3b430:	ldrb	w5, [x4, #56]
   3b434:	str	w5, [x3]
   3b438:	cbz	w5, 3b44c <extract_fields@@Base+0x7e4>
   3b43c:	add	x3, x3, #0x4
   3b440:	add	x4, x4, #0x6
   3b444:	cmp	x6, x3
   3b448:	b.ne	3b430 <extract_fields@@Base+0x7c8>  // b.any
   3b44c:	mov	w2, w26
   3b450:	mov	w0, w28
   3b454:	mov	w26, #0x0                   	// #0
   3b458:	bl	3a7f8 <aarch64_opcode_encode@@Base+0x1470>
   3b45c:	cbz	w0, 3aec4 <extract_fields@@Base+0x25c>
   3b460:	lsl	x1, x27, #3
   3b464:	sub	x1, x1, x27
   3b468:	add	x1, x22, x1, lsl #3
   3b46c:	strb	w0, [x1, #28]
   3b470:	ldr	x28, [x22, #8]
   3b474:	b	3ae38 <extract_fields@@Base+0x1d0>
   3b478:	ldr	w0, [x28, #20]
   3b47c:	cmp	w0, #0x48
   3b480:	b.eq	3bbd8 <extract_fields@@Base+0xf70>  // b.none
   3b484:	b.hi	3b944 <extract_fields@@Base+0xcdc>  // b.pmore
   3b488:	cmp	w0, #0x3f
   3b48c:	b.eq	3bba8 <extract_fields@@Base+0xf40>  // b.none
   3b490:	b.ls	3b8ec <extract_fields@@Base+0xc84>  // b.plast
   3b494:	cmp	w0, #0x46
   3b498:	b.eq	3bb88 <extract_fields@@Base+0xf20>  // b.none
   3b49c:	cmp	w0, #0x47
   3b4a0:	b.ne	3b888 <extract_fields@@Base+0xc20>  // b.any
   3b4a4:	ldr	w0, [x22]
   3b4a8:	mov	w1, #0x0                   	// #0
   3b4ac:	mov	w4, #0x2b                  	// #43
   3b4b0:	mov	w3, #0x74                  	// #116
   3b4b4:	mov	w2, #0x2                   	// #2
   3b4b8:	bl	35390 <extract_fields@plt>
   3b4bc:	sub	w1, w0, #0x1
   3b4c0:	cmp	w1, #0xf
   3b4c4:	b.hi	3aec0 <extract_fields@@Base+0x258>  // b.pmore
   3b4c8:	neg	w1, w0
   3b4cc:	bics	wzr, w0, w1
   3b4d0:	b.ne	3aec0 <extract_fields@@Base+0x258>  // b.any
   3b4d4:	ldr	x28, [x22, #8]
   3b4d8:	b	3ae38 <extract_fields@@Base+0x1d0>
   3b4dc:	ldr	w0, [x28, #32]
   3b4e0:	bl	35710 <aarch64_get_operand_class@plt>
   3b4e4:	cmp	w0, #0x3
   3b4e8:	mov	x2, #0x0                   	// #0
   3b4ec:	b.eq	3b0b0 <extract_fields@@Base+0x448>  // b.none
   3b4f0:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3b4f4:	add	x3, x3, #0x388
   3b4f8:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3b4fc:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   3b500:	add	x3, x3, #0x118
   3b504:	add	x1, x1, #0x288
   3b508:	add	x0, x0, #0x4b0
   3b50c:	mov	w2, #0x1c0                 	// #448
   3b510:	bl	35ac0 <__assert_fail@plt>
   3b514:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   3b518:	ldr	w5, [x22]
   3b51c:	mov	w1, #0xffffffff            	// #-1
   3b520:	ldr	x0, [x0, #3944]
   3b524:	ldr	w2, [x0, #896]
   3b528:	ldr	w0, [x0, #900]
   3b52c:	lsr	w5, w5, w2
   3b530:	lsl	w1, w1, w0
   3b534:	bic	w5, w5, w1
   3b538:	mov	w1, #0x6                   	// #6
   3b53c:	add	x0, x22, #0x1c
   3b540:	add	x2, x22, #0x16c
   3b544:	smaddl	x5, w5, w1, x28
   3b548:	ldrb	w1, [x5, #56]
   3b54c:	add	x5, x5, #0x1
   3b550:	strb	w1, [x0], #56
   3b554:	cmp	x2, x0
   3b558:	b.ne	3b548 <extract_fields@@Base+0x8e0>  // b.any
   3b55c:	b	3ae48 <extract_fields@@Base+0x1e0>
   3b560:	mov	w5, #0x0                   	// #0
   3b564:	b	3b538 <extract_fields@@Base+0x8d0>
   3b568:	ldr	w0, [x22]
   3b56c:	mov	w4, #0x76                  	// #118
   3b570:	mov	w3, #0x70                  	// #112
   3b574:	mov	w2, #0x2                   	// #2
   3b578:	mov	w1, #0x0                   	// #0
   3b57c:	bl	35390 <extract_fields@plt>
   3b580:	cbz	w0, 3aec0 <extract_fields@@Base+0x258>
   3b584:	cmp	w0, #0x1
   3b588:	b.eq	3bc0c <extract_fields@@Base+0xfa4>  // b.none
   3b58c:	and	w5, w0, #0x1
   3b590:	tbz	w0, #0, 3b59c <extract_fields@@Base+0x934>
   3b594:	b	3aec0 <extract_fields@@Base+0x258>
   3b598:	tbnz	w0, #0, 3aec0 <extract_fields@@Base+0x258>
   3b59c:	asr	w0, w0, #1
   3b5a0:	add	w5, w5, #0x1
   3b5a4:	cmp	w0, #0x1
   3b5a8:	b.ne	3b598 <extract_fields@@Base+0x930>  // b.any
   3b5ac:	ldr	x28, [x22, #8]
   3b5b0:	b	3b538 <extract_fields@@Base+0x8d0>
   3b5b4:	ldr	w0, [x22]
   3b5b8:	mov	w4, #0x44                  	// #68
   3b5bc:	mov	w3, #0x8                   	// #8
   3b5c0:	mov	w2, #0x2                   	// #2
   3b5c4:	mov	w1, #0x0                   	// #0
   3b5c8:	bl	35390 <extract_fields@plt>
   3b5cc:	mov	w5, w0
   3b5d0:	ldr	x28, [x22, #8]
   3b5d4:	b	3b538 <extract_fields@@Base+0x8d0>
   3b5d8:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   3b5dc:	ldr	w1, [x22]
   3b5e0:	mov	w5, #0xffffffff            	// #-1
   3b5e4:	ldr	x0, [x0, #3944]
   3b5e8:	ldr	w2, [x0, #540]
   3b5ec:	ldr	w4, [x0, #536]
   3b5f0:	lsl	w5, w5, w2
   3b5f4:	lsr	w0, w1, w4
   3b5f8:	bic	w5, w0, w5
   3b5fc:	b	3b538 <extract_fields@@Base+0x8d0>
   3b600:	ldr	w0, [x22]
   3b604:	mov	w4, #0x75                  	// #117
   3b608:	mov	w3, #0x74                  	// #116
   3b60c:	mov	w2, #0x2                   	// #2
   3b610:	mov	w1, #0x0                   	// #0
   3b614:	bl	35390 <extract_fields@plt>
   3b618:	cbz	w0, 3aec0 <extract_fields@@Base+0x258>
   3b61c:	cmp	w0, #0x1
   3b620:	mov	w5, #0x0                   	// #0
   3b624:	ldr	x28, [x22, #8]
   3b628:	b.eq	3b538 <extract_fields@@Base+0x8d0>  // b.none
   3b62c:	nop
   3b630:	asr	w0, w0, #1
   3b634:	add	w5, w5, #0x1
   3b638:	cmp	w0, #0x1
   3b63c:	b.ne	3b630 <extract_fields@@Base+0x9c8>  // b.any
   3b640:	b	3b538 <extract_fields@@Base+0x8d0>
   3b644:	ldr	w0, [x22]
   3b648:	mov	w4, #0x76                  	// #118
   3b64c:	mov	w3, #0x74                  	// #116
   3b650:	mov	w2, #0x2                   	// #2
   3b654:	mov	w1, #0x0                   	// #0
   3b658:	bl	35390 <extract_fields@plt>
   3b65c:	b	3b618 <extract_fields@@Base+0x9b0>
   3b660:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   3b664:	ldr	w1, [x22]
   3b668:	mov	w5, #0xffffffff            	// #-1
   3b66c:	ldr	x0, [x0, #3944]
   3b670:	ldp	w4, w2, [x0, #64]
   3b674:	lsl	w5, w5, w2
   3b678:	lsr	w0, w1, w4
   3b67c:	bic	w5, w0, w5
   3b680:	cmp	w5, #0x2
   3b684:	b.le	3b538 <extract_fields@@Base+0x8d0>
   3b688:	b	3aec0 <extract_fields@@Base+0x258>
   3b68c:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   3b690:	ldr	w1, [x22]
   3b694:	mov	w5, #0xffffffff            	// #-1
   3b698:	ldr	x0, [x0, #3944]
   3b69c:	ldp	w4, w2, [x0, #64]
   3b6a0:	lsl	w5, w5, w2
   3b6a4:	lsr	w0, w1, w4
   3b6a8:	bic	w5, w0, w5
   3b6ac:	b	3b538 <extract_fields@@Base+0x8d0>
   3b6b0:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   3b6b4:	ldr	w5, [x22]
   3b6b8:	mov	w1, #0xffffffff            	// #-1
   3b6bc:	ldr	x0, [x0, #3944]
   3b6c0:	ldp	w2, w0, [x0, #64]
   3b6c4:	lsl	w1, w1, w0
   3b6c8:	lsr	w5, w5, w2
   3b6cc:	bic	w1, w5, w1
   3b6d0:	cmp	w1, #0x0
   3b6d4:	b.le	3aec0 <extract_fields@@Base+0x258>
   3b6d8:	sub	w5, w1, #0x1
   3b6dc:	b	3b538 <extract_fields@@Base+0x8d0>
   3b6e0:	ldr	w0, [x22]
   3b6e4:	mov	w4, #0x76                  	// #118
   3b6e8:	mov	w3, #0x74                  	// #116
   3b6ec:	mov	w2, #0x2                   	// #2
   3b6f0:	mov	w1, #0x0                   	// #0
   3b6f4:	bl	35390 <extract_fields@plt>
   3b6f8:	cbz	w0, 3aec0 <extract_fields@@Base+0x258>
   3b6fc:	cmp	w0, #0x1
   3b700:	mov	w5, #0x0                   	// #0
   3b704:	ldr	x28, [x22, #8]
   3b708:	b.eq	3b538 <extract_fields@@Base+0x8d0>  // b.none
   3b70c:	nop
   3b710:	asr	w0, w0, #1
   3b714:	add	w5, w5, #0x1
   3b718:	cmp	w0, #0x1
   3b71c:	b.ne	3b710 <extract_fields@@Base+0xaa8>  // b.any
   3b720:	b	3b538 <extract_fields@@Base+0x8d0>
   3b724:	ldr	w0, [x22]
   3b728:	mov	w1, #0x0                   	// #0
   3b72c:	mov	w4, #0x2b                  	// #43
   3b730:	mov	w3, #0x74                  	// #116
   3b734:	mov	w2, #0x2                   	// #2
   3b738:	bl	35390 <extract_fields@plt>
   3b73c:	mov	w1, w0
   3b740:	tst	x0, #0x1f
   3b744:	b.eq	3aec0 <extract_fields@@Base+0x258>  // b.none
   3b748:	and	w5, w0, #0x1
   3b74c:	ldr	x28, [x22, #8]
   3b750:	tbnz	w0, #0, 3b560 <extract_fields@@Base+0x8f8>
   3b754:	nop
   3b758:	asr	w1, w1, #1
   3b75c:	add	w5, w5, #0x1
   3b760:	tbz	w1, #0, 3b758 <extract_fields@@Base+0xaf0>
   3b764:	b	3b538 <extract_fields@@Base+0x8d0>
   3b768:	ldr	w1, [x22]
   3b76c:	mov	w5, #0x0                   	// #0
   3b770:	and	w0, w1, #0x3fe00
   3b774:	and	w0, w0, #0xfffe07ff
   3b778:	cmp	w0, #0x600
   3b77c:	b.eq	3b538 <extract_fields@@Base+0x8d0>  // b.none
   3b780:	and	w0, w1, #0x3fc00
   3b784:	mov	w5, #0x1                   	// #1
   3b788:	and	w0, w0, #0xfffe07ff
   3b78c:	cmp	w0, #0x400
   3b790:	b.eq	3b538 <extract_fields@@Base+0x8d0>  // b.none
   3b794:	ubfx	x5, x1, #17, #1
   3b798:	add	w5, w5, #0x2
   3b79c:	b	3b538 <extract_fields@@Base+0x8d0>
   3b7a0:	ldr	w0, [x22]
   3b7a4:	mov	w4, #0x45                  	// #69
   3b7a8:	b	3b5bc <extract_fields@@Base+0x954>
   3b7ac:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   3b7b0:	ldr	w5, [x22]
   3b7b4:	mov	w6, #0xffffffff            	// #-1
   3b7b8:	ldr	x0, [x0, #3944]
   3b7bc:	ldr	w1, [x0, #904]
   3b7c0:	ldr	w0, [x0, #908]
   3b7c4:	lsr	w5, w5, w1
   3b7c8:	lsl	w6, w6, w0
   3b7cc:	bic	w6, w5, w6
   3b7d0:	cmp	w6, #0x0
   3b7d4:	b.le	3aec0 <extract_fields@@Base+0x258>
   3b7d8:	sub	w5, w6, #0x1
   3b7dc:	b	3b538 <extract_fields@@Base+0x8d0>
   3b7e0:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   3b7e4:	ldr	w5, [x22]
   3b7e8:	mov	w1, #0xffffffff            	// #-1
   3b7ec:	ldr	x0, [x0, #3944]
   3b7f0:	ldr	w2, [x0, #912]
   3b7f4:	ldr	w0, [x0, #916]
   3b7f8:	lsr	w5, w5, w2
   3b7fc:	lsl	w1, w1, w0
   3b800:	bic	w5, w5, w1
   3b804:	b	3b538 <extract_fields@@Base+0x8d0>
   3b808:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   3b80c:	ldr	w5, [x22]
   3b810:	mov	w1, #0xffffffff            	// #-1
   3b814:	ldr	x0, [x0, #3944]
   3b818:	ldp	w2, w0, [x0, #64]
   3b81c:	lsr	w5, w5, w2
   3b820:	lsl	w1, w1, w0
   3b824:	bic	w1, w5, w1
   3b828:	ubfx	x5, x1, #1, #1
   3b82c:	b	3b538 <extract_fields@@Base+0x8d0>
   3b830:	ldr	w0, [x22]
   3b834:	mov	w4, #0x76                  	// #118
   3b838:	mov	w3, #0x70                  	// #112
   3b83c:	mov	w2, #0x2                   	// #2
   3b840:	mov	w1, #0x0                   	// #0
   3b844:	bl	35390 <extract_fields@plt>
   3b848:	cbz	w0, 3aec0 <extract_fields@@Base+0x258>
   3b84c:	cmp	w0, #0x1
   3b850:	mov	w5, #0x0                   	// #0
   3b854:	b.eq	3b5ac <extract_fields@@Base+0x944>  // b.none
   3b858:	asr	w0, w0, #1
   3b85c:	add	w5, w5, #0x1
   3b860:	cmp	w0, #0x1
   3b864:	b.ne	3b858 <extract_fields@@Base+0xbf0>  // b.any
   3b868:	ldr	x28, [x22, #8]
   3b86c:	b	3b538 <extract_fields@@Base+0x8d0>
   3b870:	ldr	w0, [x28, #36]
   3b874:	bl	35710 <aarch64_get_operand_class@plt>
   3b878:	cmp	w0, #0x1
   3b87c:	b.ne	3bc54 <extract_fields@@Base+0xfec>  // b.any
   3b880:	str	w0, [sp, #108]
   3b884:	b	3b030 <extract_fields@@Base+0x3c8>
   3b888:	cmp	w0, #0x45
   3b88c:	b.ne	3aec0 <extract_fields@@Base+0x258>  // b.any
   3b890:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   3b894:	ldr	w4, [x22]
   3b898:	mov	w1, #0xffffffff            	// #-1
   3b89c:	ldr	x0, [x0, #3944]
   3b8a0:	add	x11, x0, #0x268
   3b8a4:	ldp	w7, w5, [x11, #-8]
   3b8a8:	ldp	w6, w2, [x11]
   3b8ac:	lsl	w5, w1, w5
   3b8b0:	lsr	w7, w4, w7
   3b8b4:	bic	w5, w7, w5
   3b8b8:	lsl	w2, w1, w2
   3b8bc:	lsr	w6, w4, w6
   3b8c0:	bic	w2, w6, w2
   3b8c4:	cmp	w2, w5
   3b8c8:	b.ne	3aec0 <extract_fields@@Base+0x258>  // b.any
   3b8cc:	ldr	w5, [x0, #592]
   3b8d0:	ldr	w0, [x0, #596]
   3b8d4:	lsr	w4, w4, w5
   3b8d8:	lsl	w0, w1, w0
   3b8dc:	bic	w0, w4, w0
   3b8e0:	cmp	w2, w0
   3b8e4:	b.ne	3aec0 <extract_fields@@Base+0x258>  // b.any
   3b8e8:	b	3ae38 <extract_fields@@Base+0x1d0>
   3b8ec:	cmp	w0, #0x3a
   3b8f0:	b.eq	3bb30 <extract_fields@@Base+0xec8>  // b.none
   3b8f4:	sub	w1, w0, #0x3b
   3b8f8:	cmp	w1, #0x3
   3b8fc:	b.hi	3aec0 <extract_fields@@Base+0x258>  // b.pmore
   3b900:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3b904:	mov	w4, #0x13                  	// #19
   3b908:	ldr	x1, [x1, #3944]
   3b90c:	ldr	w2, [x1, #68]
   3b910:	cmp	w2, #0x0
   3b914:	b.le	3b930 <extract_fields@@Base+0xcc8>
   3b918:	ldr	w1, [x1, #64]
   3b91c:	mov	w5, #0x15                  	// #21
   3b920:	ldr	w2, [x22]
   3b924:	lsr	w1, w2, w1
   3b928:	tst	x1, #0x1
   3b92c:	csel	w4, w4, w5, eq  // eq = none
   3b930:	sub	w0, w0, #0x3d
   3b934:	cmp	w0, #0x1
   3b938:	b.ls	3bbf8 <extract_fields@@Base+0xf90>  // b.plast
   3b93c:	strb	w4, [x22, #84]
   3b940:	b	3ae38 <extract_fields@@Base+0x1d0>
   3b944:	cmp	w0, #0x4b
   3b948:	b.eq	3b890 <extract_fields@@Base+0xc28>  // b.none
   3b94c:	b.ls	3b9c8 <extract_fields@@Base+0xd60>  // b.plast
   3b950:	cmp	w0, #0x4d
   3b954:	b.hi	3b99c <extract_fields@@Base+0xd34>  // b.pmore
   3b958:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3b95c:	mov	w0, #0xffffffff            	// #-1
   3b960:	ldr	x1, [x1, #3944]
   3b964:	add	x4, x1, #0x268
   3b968:	ldp	w5, w2, [x4, #-8]
   3b96c:	ldp	w7, w6, [x4]
   3b970:	ldr	w4, [x22]
   3b974:	lsr	w5, w4, w5
   3b978:	lsl	w1, w0, w2
   3b97c:	bic	w1, w5, w1
   3b980:	lsr	w4, w4, w7
   3b984:	lsl	w0, w0, w6
   3b988:	bic	w0, w4, w0
   3b98c:	cmp	w0, w1
   3b990:	cset	w0, eq  // eq = none
   3b994:	cbnz	w0, 3ae38 <extract_fields@@Base+0x1d0>
   3b998:	b	3aec0 <extract_fields@@Base+0x258>
   3b99c:	sub	w0, w0, #0x4e
   3b9a0:	cmp	w0, #0x1
   3b9a4:	b.hi	3aec0 <extract_fields@@Base+0x258>  // b.pmore
   3b9a8:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3b9ac:	ldr	w4, [x22]
   3b9b0:	mov	w0, #0xffffffff            	// #-1
   3b9b4:	ldr	x1, [x1, #3944]
   3b9b8:	add	x3, x1, #0x25c
   3b9bc:	ldp	w5, w2, [x3, #-12]
   3b9c0:	ldp	w7, w6, [x3, #4]
   3b9c4:	b	3b974 <extract_fields@@Base+0xd0c>
   3b9c8:	cmp	w0, #0x49
   3b9cc:	b.eq	3bb58 <extract_fields@@Base+0xef0>  // b.none
   3b9d0:	cmp	w0, #0x4a
   3b9d4:	b.ne	3aec0 <extract_fields@@Base+0x258>  // b.any
   3b9d8:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3b9dc:	ldr	w4, [x22]
   3b9e0:	mov	w0, #0xffffffff            	// #-1
   3b9e4:	ldr	x1, [x1, #3944]
   3b9e8:	add	x8, x1, #0x250
   3b9ec:	ldp	w5, w2, [x8, #-24]
   3b9f0:	ldp	w7, w6, [x8, #16]
   3b9f4:	lsr	w5, w4, w5
   3b9f8:	lsl	w1, w0, w2
   3b9fc:	bic	w1, w5, w1
   3ba00:	lsr	w4, w4, w7
   3ba04:	lsl	w0, w0, w6
   3ba08:	bic	w0, w4, w0
   3ba0c:	cmp	w1, w0
   3ba10:	cset	w0, eq  // eq = none
   3ba14:	cbnz	w0, 3ae38 <extract_fields@@Base+0x1d0>
   3ba18:	b	3aec0 <extract_fields@@Base+0x258>
   3ba1c:	mov	w1, #0x6                   	// #6
   3ba20:	b	3b0ec <extract_fields@@Base+0x484>
   3ba24:	mov	w1, #0x8                   	// #8
   3ba28:	b	3b0ec <extract_fields@@Base+0x484>
   3ba2c:	ldrb	w0, [x28, #56]
   3ba30:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3ba34:	and	w1, w0, #0xff
   3ba38:	ldr	w0, [x28, #36]
   3ba3c:	str	w1, [sp, #108]
   3ba40:	bl	35710 <aarch64_get_operand_class@plt>
   3ba44:	cmp	w0, #0x6
   3ba48:	ldr	w1, [sp, #108]
   3ba4c:	mov	w0, #0x0                   	// #0
   3ba50:	b.ne	3b20c <extract_fields@@Base+0x5a4>  // b.any
   3ba54:	b	3b1f4 <extract_fields@@Base+0x58c>
   3ba58:	cmp	w27, #0x4
   3ba5c:	add	w1, w27, #0x5
   3ba60:	b.hi	3bc4c <extract_fields@@Base+0xfe4>  // b.pmore
   3ba64:	and	w1, w1, #0xff
   3ba68:	str	w1, [sp, #108]
   3ba6c:	mov	w0, w1
   3ba70:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3ba74:	cmp	w27, w0
   3ba78:	b.ne	3bc4c <extract_fields@@Base+0xfe4>  // b.any
   3ba7c:	sxtw	x28, w28
   3ba80:	ldr	w1, [sp, #108]
   3ba84:	lsl	x0, x28, #3
   3ba88:	sub	x0, x0, x28
   3ba8c:	add	x0, x22, x0, lsl #3
   3ba90:	strb	w1, [x0, #28]
   3ba94:	b	3b2b4 <extract_fields@@Base+0x64c>
   3ba98:	ldr	x0, [x22, #8]
   3ba9c:	mov	w28, #0x0                   	// #0
   3baa0:	ldr	w0, [x0, #32]
   3baa4:	bl	35710 <aarch64_get_operand_class@plt>
   3baa8:	cmp	w0, #0x1
   3baac:	b.eq	3b33c <extract_fields@@Base+0x6d4>  // b.none
   3bab0:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3bab4:	add	x3, x3, #0x388
   3bab8:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3babc:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3bac0:	add	x3, x3, #0x170
   3bac4:	add	x1, x1, #0xc48
   3bac8:	add	x0, x0, #0x880
   3bacc:	mov	w2, #0x8a3                 	// #2211
   3bad0:	bl	35ac0 <__assert_fail@plt>
   3bad4:	add	w0, w28, #0xd
   3bad8:	add	w1, w28, #0xe
   3badc:	cmp	w0, #0xe
   3bae0:	csel	w0, w1, w0, hi  // hi = pmore
   3bae4:	cmp	w28, #0x8
   3bae8:	b.hi	3bc50 <extract_fields@@Base+0xfe8>  // b.pmore
   3baec:	and	w26, w0, #0xff
   3baf0:	mov	w0, w26
   3baf4:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3baf8:	cmp	w28, w0
   3bafc:	b.ne	3bc50 <extract_fields@@Base+0xfe8>  // b.any
   3bb00:	sbfiz	x0, x27, #3, #32
   3bb04:	sub	x27, x0, w27, sxtw
   3bb08:	add	x0, x22, x27, lsl #3
   3bb0c:	strb	w26, [x0, #28]
   3bb10:	ldr	x28, [x22, #8]
   3bb14:	b	3ae38 <extract_fields@@Base+0x1d0>
   3bb18:	mov	w3, #0x0                   	// #0
   3bb1c:	b	3b158 <extract_fields@@Base+0x4f0>
   3bb20:	mov	w3, #0x1                   	// #1
   3bb24:	b	3b154 <extract_fields@@Base+0x4ec>
   3bb28:	mov	w3, #0x2                   	// #2
   3bb2c:	b	3b154 <extract_fields@@Base+0x4ec>
   3bb30:	ldr	w0, [x22]
   3bb34:	ubfx	x0, x0, #15, #2
   3bb38:	cmp	w0, #0x1
   3bb3c:	b.eq	3bc18 <extract_fields@@Base+0xfb0>  // b.none
   3bb40:	cmp	w0, #0x3
   3bb44:	b.eq	3bc00 <extract_fields@@Base+0xf98>  // b.none
   3bb48:	cbnz	w0, 3aec0 <extract_fields@@Base+0x258>
   3bb4c:	mov	w0, #0x7                   	// #7
   3bb50:	strb	w0, [x22, #28]
   3bb54:	b	3ae38 <extract_fields@@Base+0x1d0>
   3bb58:	ldr	w0, [x22]
   3bb5c:	mov	w4, #0x2b                  	// #43
   3bb60:	mov	w3, #0x74                  	// #116
   3bb64:	mov	w2, #0x2                   	// #2
   3bb68:	mov	w1, #0x0                   	// #0
   3bb6c:	bl	35390 <extract_fields@plt>
   3bb70:	cbz	w0, 3aec0 <extract_fields@@Base+0x258>
   3bb74:	neg	w1, w0
   3bb78:	bics	wzr, w0, w1
   3bb7c:	b.eq	3aec0 <extract_fields@@Base+0x258>  // b.none
   3bb80:	ldr	x28, [x22, #8]
   3bb84:	b	3ae38 <extract_fields@@Base+0x1d0>
   3bb88:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3bb8c:	ldr	w4, [x22]
   3bb90:	mov	w0, #0xffffffff            	// #-1
   3bb94:	ldr	x1, [x1, #3944]
   3bb98:	add	x10, x1, #0x2bc
   3bb9c:	ldp	w5, w2, [x10, #-12]
   3bba0:	ldp	w7, w6, [x10, #4]
   3bba4:	b	3b9f4 <extract_fields@@Base+0xd8c>
   3bba8:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   3bbac:	ldr	x0, [x0, #3944]
   3bbb0:	ldr	w1, [x0, #68]
   3bbb4:	cmp	w1, #0x0
   3bbb8:	b.le	3aec0 <extract_fields@@Base+0x258>
   3bbbc:	ldr	w0, [x0, #64]
   3bbc0:	ldr	w1, [x22]
   3bbc4:	lsr	w0, w1, w0
   3bbc8:	tbz	w0, #0, 3aec0 <extract_fields@@Base+0x258>
   3bbcc:	mov	w0, #0x7                   	// #7
   3bbd0:	strb	w0, [x22, #28]
   3bbd4:	b	3ae38 <extract_fields@@Base+0x1d0>
   3bbd8:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3bbdc:	ldr	w4, [x22]
   3bbe0:	mov	w0, #0xffffffff            	// #-1
   3bbe4:	ldr	x1, [x1, #3944]
   3bbe8:	add	x9, x1, #0x2c8
   3bbec:	ldp	w5, w2, [x9, #-8]
   3bbf0:	ldp	w7, w6, [x9]
   3bbf4:	b	3b974 <extract_fields@@Base+0xd0c>
   3bbf8:	strb	w4, [x22, #28]
   3bbfc:	b	3ae38 <extract_fields@@Base+0x1d0>
   3bc00:	mov	w0, #0x6                   	// #6
   3bc04:	strb	w0, [x22, #28]
   3bc08:	b	3ae38 <extract_fields@@Base+0x1d0>
   3bc0c:	mov	w5, #0x0                   	// #0
   3bc10:	ldr	x28, [x22, #8]
   3bc14:	b	3b538 <extract_fields@@Base+0x8d0>
   3bc18:	mov	w0, #0x8                   	// #8
   3bc1c:	strb	w0, [x22, #28]
   3bc20:	b	3ae38 <extract_fields@@Base+0x1d0>
   3bc24:	bl	3aa68 <aarch64_opcode_encode@@Base+0x16e0>
   3bc28:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3bc2c:	add	x3, x3, #0x388
   3bc30:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3bc34:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3bc38:	add	x3, x3, #0x100
   3bc3c:	add	x1, x1, #0xc48
   3bc40:	add	x0, x0, #0xe20
   3bc44:	mov	w2, #0xb4b                 	// #2891
   3bc48:	bl	35ac0 <__assert_fail@plt>
   3bc4c:	bl	3aa08 <aarch64_opcode_encode@@Base+0x1680>
   3bc50:	bl	3aa38 <aarch64_opcode_encode@@Base+0x16b0>
   3bc54:	bl	3a9d8 <aarch64_opcode_encode@@Base+0x1650>
   3bc58:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3bc5c:	add	x3, x3, #0x388
   3bc60:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3bc64:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3bc68:	add	x3, x3, #0x170
   3bc6c:	add	x1, x1, #0xc48
   3bc70:	add	x0, x0, #0x810
   3bc74:	mov	w2, #0x8a7                 	// #2215
   3bc78:	bl	35ac0 <__assert_fail@plt>
   3bc7c:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3bc80:	add	x3, x3, #0x388
   3bc84:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3bc88:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3bc8c:	add	x3, x3, #0x170
   3bc90:	add	x1, x1, #0xc48
   3bc94:	add	x0, x0, #0xe30
   3bc98:	mov	w2, #0x884                 	// #2180
   3bc9c:	bl	35ac0 <__assert_fail@plt>
   3bca0:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3bca4:	add	x3, x3, #0x388
   3bca8:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3bcac:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3bcb0:	add	x3, x3, #0x170
   3bcb4:	add	x1, x1, #0xc48
   3bcb8:	add	x0, x0, #0x880
   3bcbc:	mov	w2, #0x8af                 	// #2223
   3bcc0:	bl	35ac0 <__assert_fail@plt>
   3bcc4:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3bcc8:	add	x3, x3, #0x388
   3bccc:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3bcd0:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   3bcd4:	add	x3, x3, #0x140
   3bcd8:	add	x1, x1, #0x288
   3bcdc:	add	x0, x0, #0x4b0
   3bce0:	mov	w2, #0x1d4                 	// #468
   3bce4:	bl	35ac0 <__assert_fail@plt>
   3bce8:	stp	x29, x30, [sp, #-464]!
   3bcec:	mov	x29, sp
   3bcf0:	stp	x21, x22, [sp, #32]
   3bcf4:	ldr	x21, [x0, #8]
   3bcf8:	stp	x19, x20, [sp, #16]
   3bcfc:	mov	x20, x0
   3bd00:	ldr	x0, [x21, #120]
   3bd04:	tst	w0, #0x2
   3bd08:	b.ne	3bd1c <extract_fields@@Base+0x10b4>  // b.any
   3bd0c:	ldp	x19, x20, [sp, #16]
   3bd10:	ldp	x21, x22, [sp, #32]
   3bd14:	ldp	x29, x30, [sp], #464
   3bd18:	ret
   3bd1c:	mov	x0, x21
   3bd20:	stp	x23, x24, [sp, #48]
   3bd24:	mov	x23, x1
   3bd28:	bl	35ba0 <aarch64_find_alias_opcode@plt>
   3bd2c:	stp	x25, x26, [sp, #64]
   3bd30:	mov	x19, x0
   3bd34:	cbz	x0, 3c350 <extract_fields@@Base+0x16e8>
   3bd38:	add	x22, sp, #0x68
   3bd3c:	mov	w26, #0x1                   	// #1
   3bd40:	mov	x25, #0x20                  	// #32
   3bd44:	mov	x24, #0x40                  	// #64
   3bd48:	ldr	x2, [x19, #120]
   3bd4c:	tbnz	w2, #0, 3bd58 <extract_fields@@Base+0x10f0>
   3bd50:	ldr	x0, [x21, #120]
   3bd54:	tbz	w0, #1, 3c2c0 <extract_fields@@Base+0x1658>
   3bd58:	tbnz	w2, #21, 3bd70 <extract_fields@@Base+0x1108>
   3bd5c:	ldp	w0, w1, [x19, #8]
   3bd60:	ldr	w2, [x20]
   3bd64:	and	w2, w2, w1
   3bd68:	cmp	w2, w0
   3bd6c:	b.eq	3bd98 <extract_fields@@Base+0x1130>  // b.none
   3bd70:	mov	x0, x19
   3bd74:	bl	35ae0 <aarch64_find_next_alias_opcode@plt>
   3bd78:	mov	x19, x0
   3bd7c:	cbnz	x0, 3bd48 <extract_fields@@Base+0x10e0>
   3bd80:	ldp	x19, x20, [sp, #16]
   3bd84:	ldp	x21, x22, [sp, #32]
   3bd88:	ldp	x23, x24, [sp, #48]
   3bd8c:	ldp	x25, x26, [sp, #64]
   3bd90:	ldp	x29, x30, [sp], #464
   3bd94:	ret
   3bd98:	mov	x0, x19
   3bd9c:	bl	35170 <aarch64_num_of_operands@plt>
   3bda0:	cbnz	w0, 3bdb4 <extract_fields@@Base+0x114c>
   3bda4:	ldr	w1, [x19, #8]
   3bda8:	ldr	w0, [x20]
   3bdac:	cmp	w1, w0
   3bdb0:	b.eq	3c2e8 <extract_fields@@Base+0x1680>  // b.none
   3bdb4:	ldr	x0, [x19, #120]
   3bdb8:	mov	x2, #0x168                 	// #360
   3bdbc:	tbz	w0, #20, 3be74 <extract_fields@@Base+0x120c>
   3bdc0:	mov	x1, x20
   3bdc4:	mov	x0, x22
   3bdc8:	bl	35050 <memcpy@plt>
   3bdcc:	ldr	w0, [x19, #20]
   3bdd0:	cmp	w0, #0x2f
   3bdd4:	b.hi	3bf18 <extract_fields@@Base+0x12b0>  // b.pmore
   3bdd8:	cmp	w0, #0x2d
   3bddc:	b.hi	3c174 <extract_fields@@Base+0x150c>  // b.pmore
   3bde0:	cmp	w0, #0x28
   3bde4:	b.hi	3bebc <extract_fields@@Base+0x1254>  // b.pmore
   3bde8:	cmp	w0, #0x26
   3bdec:	b.hi	3c0dc <extract_fields@@Base+0x1474>  // b.pmore
   3bdf0:	b.eq	3c1bc <extract_fields@@Base+0x1554>  // b.none
   3bdf4:	cmp	w0, #0x23
   3bdf8:	b.hi	3c1d0 <extract_fields@@Base+0x1568>  // b.pmore
   3bdfc:	b.ne	3bd70 <extract_fields@@Base+0x1108>  // b.any
   3be00:	ldr	w0, [sp, #200]
   3be04:	cmp	w0, #0x1f
   3be08:	b.ne	3c328 <extract_fields@@Base+0x16c0>  // b.any
   3be0c:	ldp	x0, x1, [sp, #240]
   3be10:	stp	x0, x1, [sp, #184]
   3be14:	ldr	w1, [sp, #144]
   3be18:	ldp	x4, x5, [sp, #256]
   3be1c:	mov	w0, #0x48                  	// #72
   3be20:	str	w0, [sp, #184]
   3be24:	cmp	w1, #0x1f
   3be28:	ldp	x2, x3, [sp, #272]
   3be2c:	str	w26, [sp, #192]
   3be30:	ldr	x0, [sp, #288]
   3be34:	stp	x4, x5, [sp, #200]
   3be38:	stp	x2, x3, [sp, #216]
   3be3c:	str	x0, [sp, #232]
   3be40:	ldrb	w0, [sp, #132]
   3be44:	b.eq	3bfc0 <extract_fields@@Base+0x1358>  // b.none
   3be48:	cmp	w0, #0x1
   3be4c:	stp	x27, x28, [sp, #80]
   3be50:	cset	w28, eq  // eq = none
   3be54:	ldr	x27, [sp, #200]
   3be58:	mov	w1, w28
   3be5c:	mov	x2, #0x0                   	// #0
   3be60:	mov	x0, x27
   3be64:	bl	35a40 <aarch64_wide_constant_p@plt>
   3be68:	cbz	w0, 3c2a4 <extract_fields@@Base+0x163c>
   3be6c:	ldp	x27, x28, [sp, #80]
   3be70:	b	3bd70 <extract_fields@@Base+0x1108>
   3be74:	mov	w1, #0x0                   	// #0
   3be78:	mov	x0, x22
   3be7c:	bl	35470 <memset@plt>
   3be80:	ldr	w1, [x20]
   3be84:	mov	x4, x23
   3be88:	mov	x2, x22
   3be8c:	mov	x0, x19
   3be90:	mov	w3, #0x1                   	// #1
   3be94:	bl	3ad58 <extract_fields@@Base+0xf0>
   3be98:	cmp	w0, #0x1
   3be9c:	b.ne	3bd70 <extract_fields@@Base+0x1108>  // b.any
   3bea0:	mov	x1, x22
   3bea4:	mov	x0, x20
   3bea8:	mov	x2, #0x168                 	// #360
   3beac:	bl	35050 <memcpy@plt>
   3beb0:	ldp	x23, x24, [sp, #48]
   3beb4:	ldp	x25, x26, [sp, #64]
   3beb8:	b	3bd0c <extract_fields@@Base+0x10a4>
   3bebc:	cmp	w0, #0x29
   3bec0:	b.eq	3c214 <extract_fields@@Base+0x15ac>  // b.none
   3bec4:	sub	w0, w0, #0x2b
   3bec8:	cmp	w0, #0x2
   3becc:	b.hi	3bd70 <extract_fields@@Base+0x1108>  // b.pmore
   3bed0:	ldr	x2, [sp, #256]
   3bed4:	ldr	x1, [sp, #312]
   3bed8:	cmp	x2, x1
   3bedc:	b.gt	3bd70 <extract_fields@@Base+0x1108>
   3bee0:	add	x1, x1, #0x1
   3bee4:	ldr	x0, [sp, #112]
   3bee8:	sub	x1, x1, x2
   3beec:	str	x1, [sp, #312]
   3bef0:	bl	35170 <aarch64_num_of_operands@plt>
   3bef4:	cmp	w0, #0x2
   3bef8:	b.le	3c0d4 <extract_fields@@Base+0x146c>
   3befc:	ldr	x0, [sp, #112]
   3bf00:	strb	wzr, [sp, #244]
   3bf04:	bl	35170 <aarch64_num_of_operands@plt>
   3bf08:	cmp	w0, #0x3
   3bf0c:	b.le	3c0d4 <extract_fields@@Base+0x146c>
   3bf10:	strb	wzr, [sp, #300]
   3bf14:	b	3bfc4 <extract_fields@@Base+0x135c>
   3bf18:	cmp	w0, #0x39
   3bf1c:	b.hi	3bfa4 <extract_fields@@Base+0x133c>  // b.pmore
   3bf20:	cmp	w0, #0x37
   3bf24:	b.hi	3c104 <extract_fields@@Base+0x149c>  // b.pmore
   3bf28:	cmp	w0, #0x31
   3bf2c:	b.eq	3c174 <extract_fields@@Base+0x150c>  // b.none
   3bf30:	b.ls	3c008 <extract_fields@@Base+0x13a0>  // b.plast
   3bf34:	sub	w0, w0, #0x35
   3bf38:	cmp	w0, #0x2
   3bf3c:	b.hi	3bd70 <extract_fields@@Base+0x1108>  // b.pmore
   3bf40:	ldr	w1, [sp, #200]
   3bf44:	ldr	w0, [sp, #256]
   3bf48:	cmp	w1, w0
   3bf4c:	b.ne	3bd70 <extract_fields@@Base+0x1108>  // b.any
   3bf50:	ldr	x0, [sp, #312]
   3bf54:	ldr	w1, [x0, #32]
   3bf58:	and	w1, w1, #0xe
   3bf5c:	cmp	w1, #0xe
   3bf60:	b.eq	3bd70 <extract_fields@@Base+0x1108>  // b.none
   3bf64:	add	x1, sp, #0x200
   3bf68:	ldp	x2, x3, [x1, #-216]
   3bf6c:	stp	x2, x3, [sp, #240]
   3bf70:	add	x2, sp, #0x200
   3bf74:	ldp	x4, x5, [x1, #-200]
   3bf78:	mov	w1, #0x2                   	// #2
   3bf7c:	ldp	x2, x3, [x2, #-184]
   3bf80:	str	w1, [sp, #248]
   3bf84:	ldr	x1, [sp, #344]
   3bf88:	stp	x4, x5, [sp, #256]
   3bf8c:	stp	x2, x3, [sp, #272]
   3bf90:	str	x1, [sp, #288]
   3bf94:	bl	35870 <get_inverted_cond@plt>
   3bf98:	str	x0, [sp, #256]
   3bf9c:	str	wzr, [sp, #296]
   3bfa0:	b	3bfc4 <extract_fields@@Base+0x135c>
   3bfa4:	cmp	w0, #0x40
   3bfa8:	b.eq	3c258 <extract_fields@@Base+0x15f0>  // b.none
   3bfac:	sub	w0, w0, #0x41
   3bfb0:	cmp	w0, #0x3
   3bfb4:	b.hi	3bd70 <extract_fields@@Base+0x1108>  // b.pmore
   3bfb8:	ldr	x0, [sp, #256]
   3bfbc:	cbnz	x0, 3bd70 <extract_fields@@Base+0x1108>
   3bfc0:	str	wzr, [sp, #240]
   3bfc4:	mov	x1, x19
   3bfc8:	mov	x0, x22
   3bfcc:	bl	35410 <aarch64_replace_opcode@plt>
   3bfd0:	mov	x0, x22
   3bfd4:	mov	x1, #0x0                   	// #0
   3bfd8:	bl	354e0 <aarch64_match_operands_constraint@plt>
   3bfdc:	cbnz	w0, 3bea0 <extract_fields@@Base+0x1238>
   3bfe0:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3bfe4:	add	x3, x3, #0x388
   3bfe8:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3bfec:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3bff0:	add	x3, x3, #0x188
   3bff4:	add	x1, x1, #0xc48
   3bff8:	add	x0, x0, #0xef0
   3bffc:	mov	w2, #0xa8c                 	// #2700
   3c000:	stp	x27, x28, [sp, #80]
   3c004:	bl	35ac0 <__assert_fail@plt>
   3c008:	cmp	w0, #0x30
   3c00c:	b.ne	3bd70 <extract_fields@@Base+0x1108>  // b.any
   3c010:	ldr	w0, [sp, #200]
   3c014:	cmp	w0, #0x1f
   3c018:	b.ne	3c378 <extract_fields@@Base+0x1710>  // b.any
   3c01c:	ldrb	w0, [sp, #244]
   3c020:	ldr	x1, [sp, #256]
   3c024:	cmp	w0, #0x1d
   3c028:	ldr	x6, [sp, #312]
   3c02c:	csel	x2, x25, x24, eq  // eq = none
   3c030:	cmp	x1, x6
   3c034:	b.le	3bd70 <extract_fields@@Base+0x1108>
   3c038:	ldp	x4, x5, [sp, #240]
   3c03c:	sub	x7, x2, #0x1
   3c040:	sub	x1, x2, x1
   3c044:	stp	x4, x5, [sp, #184]
   3c048:	add	x4, sp, #0x200
   3c04c:	ldp	x2, x3, [sp, #256]
   3c050:	and	x1, x1, x7
   3c054:	ldp	x4, x5, [x4, #-216]
   3c058:	stp	x2, x3, [sp, #200]
   3c05c:	add	x2, sp, #0x200
   3c060:	ldr	x0, [sp, #112]
   3c064:	add	x6, x6, #0x1
   3c068:	ldp	x2, x3, [x2, #-200]
   3c06c:	str	x1, [sp, #200]
   3c070:	add	x1, sp, #0x200
   3c074:	stp	x4, x5, [sp, #240]
   3c078:	mov	w4, #0x1                   	// #1
   3c07c:	str	w4, [sp, #192]
   3c080:	mov	w7, #0x2                   	// #2
   3c084:	stp	x2, x3, [sp, #256]
   3c088:	ldp	x4, x5, [x1, #-184]
   3c08c:	str	w7, [sp, #248]
   3c090:	ldp	x2, x3, [sp, #272]
   3c094:	stp	x2, x3, [sp, #216]
   3c098:	ldr	x8, [sp, #288]
   3c09c:	str	x8, [sp, #232]
   3c0a0:	ldr	x1, [sp, #344]
   3c0a4:	str	x6, [sp, #256]
   3c0a8:	stp	x4, x5, [sp, #272]
   3c0ac:	str	x1, [sp, #288]
   3c0b0:	str	wzr, [sp, #296]
   3c0b4:	bl	35170 <aarch64_num_of_operands@plt>
   3c0b8:	cmp	w0, #0x1
   3c0bc:	b.le	3c0d4 <extract_fields@@Base+0x146c>
   3c0c0:	ldr	x0, [sp, #112]
   3c0c4:	strb	wzr, [sp, #188]
   3c0c8:	bl	35170 <aarch64_num_of_operands@plt>
   3c0cc:	cmp	w0, #0x2
   3c0d0:	b.gt	3befc <extract_fields@@Base+0x1294>
   3c0d4:	stp	x27, x28, [sp, #80]
   3c0d8:	bl	3ab18 <aarch64_opcode_encode@@Base+0x1790>
   3c0dc:	ldrb	w2, [sp, #244]
   3c0e0:	mov	x0, #0x1f                  	// #31
   3c0e4:	ldr	x1, [sp, #312]
   3c0e8:	cmp	w2, #0x1d
   3c0ec:	mov	x2, #0x3f                  	// #63
   3c0f0:	csel	x0, x0, x2, eq  // eq = none
   3c0f4:	cmp	x1, x0
   3c0f8:	b.ne	3bd70 <extract_fields@@Base+0x1108>  // b.any
   3c0fc:	str	wzr, [sp, #296]
   3c100:	b	3bfc4 <extract_fields@@Base+0x135c>
   3c104:	ldr	w0, [sp, #200]
   3c108:	cmp	w0, #0x1f
   3c10c:	b.ne	3bd70 <extract_fields@@Base+0x1108>  // b.any
   3c110:	ldr	w0, [sp, #256]
   3c114:	cmp	w0, #0x1f
   3c118:	b.ne	3bd70 <extract_fields@@Base+0x1108>  // b.any
   3c11c:	ldr	x0, [sp, #312]
   3c120:	ldr	w1, [x0, #32]
   3c124:	and	w1, w1, #0xe
   3c128:	cmp	w1, #0xe
   3c12c:	b.eq	3bd70 <extract_fields@@Base+0x1108>  // b.none
   3c130:	add	x1, sp, #0x200
   3c134:	ldp	x2, x3, [x1, #-216]
   3c138:	stp	x2, x3, [sp, #184]
   3c13c:	add	x2, sp, #0x200
   3c140:	ldp	x4, x5, [x1, #-200]
   3c144:	mov	w1, #0x1                   	// #1
   3c148:	ldp	x2, x3, [x2, #-184]
   3c14c:	str	w1, [sp, #192]
   3c150:	ldr	x1, [sp, #344]
   3c154:	stp	x4, x5, [sp, #200]
   3c158:	stp	x2, x3, [sp, #216]
   3c15c:	str	x1, [sp, #232]
   3c160:	bl	35870 <get_inverted_cond@plt>
   3c164:	str	x0, [sp, #200]
   3c168:	str	wzr, [sp, #240]
   3c16c:	str	wzr, [sp, #296]
   3c170:	b	3bfc4 <extract_fields@@Base+0x135c>
   3c174:	ldrb	w0, [sp, #244]
   3c178:	ldr	x1, [sp, #256]
   3c17c:	cmp	w0, #0x1d
   3c180:	ldr	x2, [sp, #312]
   3c184:	csel	x3, x25, x24, eq  // eq = none
   3c188:	cmp	x1, x2
   3c18c:	b.le	3bd70 <extract_fields@@Base+0x1108>
   3c190:	sub	x1, x3, x1
   3c194:	sub	x3, x3, #0x1
   3c198:	ldr	x0, [sp, #112]
   3c19c:	add	x2, x2, #0x1
   3c1a0:	and	x1, x1, x3
   3c1a4:	str	x1, [sp, #256]
   3c1a8:	str	x2, [sp, #312]
   3c1ac:	bl	35170 <aarch64_num_of_operands@plt>
   3c1b0:	cmp	w0, #0x2
   3c1b4:	b.gt	3befc <extract_fields@@Base+0x1294>
   3c1b8:	b	3c0d4 <extract_fields@@Base+0x146c>
   3c1bc:	ldr	w1, [sp, #200]
   3c1c0:	ldr	w0, [sp, #256]
   3c1c4:	cmp	w1, w0
   3c1c8:	b.ne	3bd70 <extract_fields@@Base+0x1108>  // b.any
   3c1cc:	b	3bfc0 <extract_fields@@Base+0x1358>
   3c1d0:	ldr	x0, [sp, #200]
   3c1d4:	stp	x27, x28, [sp, #80]
   3c1d8:	ldr	x27, [sp, #224]
   3c1dc:	cbnz	x0, 3c1e4 <extract_fields@@Base+0x157c>
   3c1e0:	cbnz	x27, 3be6c <extract_fields@@Base+0x1204>
   3c1e4:	ldr	x1, [sp, #112]
   3c1e8:	mov	w2, #0x48                  	// #72
   3c1ec:	lsl	x27, x0, x27
   3c1f0:	ldr	w0, [x1, #20]
   3c1f4:	str	w2, [sp, #184]
   3c1f8:	str	wzr, [sp, #216]
   3c1fc:	cmp	w0, #0x20
   3c200:	b.eq	3c300 <extract_fields@@Base+0x1698>  // b.none
   3c204:	str	x27, [sp, #200]
   3c208:	str	xzr, [sp, #224]
   3c20c:	ldp	x27, x28, [sp, #80]
   3c210:	b	3bfc4 <extract_fields@@Base+0x135c>
   3c214:	ldrb	w1, [sp, #244]
   3c218:	mov	x0, #0x1f                  	// #31
   3c21c:	ldr	x2, [sp, #256]
   3c220:	cmp	w1, #0x1d
   3c224:	ldr	x1, [sp, #312]
   3c228:	mov	x3, #0x3f                  	// #63
   3c22c:	csel	x0, x0, x3, eq  // eq = none
   3c230:	cmp	x2, #0x0
   3c234:	ccmp	x1, x0, #0x0, eq  // eq = none
   3c238:	b.eq	3c248 <extract_fields@@Base+0x15e0>  // b.none
   3c23c:	add	x3, x1, #0x1
   3c240:	cmp	x2, x3
   3c244:	b.ne	3bd70 <extract_fields@@Base+0x1108>  // b.any
   3c248:	sub	x0, x0, x1
   3c24c:	str	x0, [sp, #256]
   3c250:	str	wzr, [sp, #296]
   3c254:	b	3bfc4 <extract_fields@@Base+0x135c>
   3c258:	ldr	w1, [sp, #200]
   3c25c:	ldr	w0, [sp, #256]
   3c260:	cmp	w1, w0
   3c264:	b.ne	3bd70 <extract_fields@@Base+0x1108>  // b.any
   3c268:	add	x0, sp, #0x200
   3c26c:	mov	w2, #0x2                   	// #2
   3c270:	ldp	x0, x1, [x0, #-216]
   3c274:	stp	x0, x1, [sp, #240]
   3c278:	add	x0, sp, #0x200
   3c27c:	ldp	x0, x1, [x0, #-200]
   3c280:	str	w2, [sp, #248]
   3c284:	add	x2, sp, #0x200
   3c288:	ldp	x2, x3, [x2, #-184]
   3c28c:	stp	x0, x1, [sp, #256]
   3c290:	ldr	x0, [sp, #344]
   3c294:	stp	x2, x3, [sp, #272]
   3c298:	str	x0, [sp, #288]
   3c29c:	str	wzr, [sp, #296]
   3c2a0:	b	3bfc4 <extract_fields@@Base+0x135c>
   3c2a4:	mov	w1, w28
   3c2a8:	mvn	x0, x27
   3c2ac:	mov	x2, #0x0                   	// #0
   3c2b0:	bl	35a40 <aarch64_wide_constant_p@plt>
   3c2b4:	ldp	x27, x28, [sp, #80]
   3c2b8:	cbz	w0, 3bfc0 <extract_fields@@Base+0x1358>
   3c2bc:	b	3bd70 <extract_fields@@Base+0x1108>
   3c2c0:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3c2c4:	add	x3, x3, #0x388
   3c2c8:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3c2cc:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3c2d0:	add	x3, x3, #0x188
   3c2d4:	add	x1, x1, #0xc48
   3c2d8:	add	x0, x0, #0xe90
   3c2dc:	mov	w2, #0xa6b                 	// #2667
   3c2e0:	stp	x27, x28, [sp, #80]
   3c2e4:	bl	35ac0 <__assert_fail@plt>
   3c2e8:	mov	x1, x19
   3c2ec:	mov	x0, x20
   3c2f0:	bl	35410 <aarch64_replace_opcode@plt>
   3c2f4:	ldp	x23, x24, [sp, #48]
   3c2f8:	ldp	x25, x26, [sp, #64]
   3c2fc:	b	3bd0c <extract_fields@@Base+0x10a4>
   3c300:	ldrb	w1, [sp, #132]
   3c304:	mvn	x27, x27
   3c308:	mov	x0, x27
   3c30c:	mov	x2, #0x0                   	// #0
   3c310:	cmp	w1, #0x1
   3c314:	cset	w1, eq  // eq = none
   3c318:	bl	35a40 <aarch64_wide_constant_p@plt>
   3c31c:	cbz	w0, 3c204 <extract_fields@@Base+0x159c>
   3c320:	ldp	x27, x28, [sp, #80]
   3c324:	b	3bd70 <extract_fields@@Base+0x1108>
   3c328:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3c32c:	add	x3, x3, #0x388
   3c330:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3c334:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3c338:	add	x3, x3, #0x1c8
   3c33c:	add	x1, x1, #0xc48
   3c340:	add	x0, x0, #0xec8
   3c344:	mov	w2, #0x9d0                 	// #2512
   3c348:	stp	x27, x28, [sp, #80]
   3c34c:	bl	35ac0 <__assert_fail@plt>
   3c350:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3c354:	add	x3, x3, #0x388
   3c358:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3c35c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3c360:	add	x3, x3, #0x188
   3c364:	add	x1, x1, #0xc48
   3c368:	add	x0, x0, #0xe88
   3c36c:	mov	w2, #0xa58                 	// #2648
   3c370:	stp	x27, x28, [sp, #80]
   3c374:	bl	35ac0 <__assert_fail@plt>
   3c378:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3c37c:	add	x3, x3, #0x388
   3c380:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3c384:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3c388:	add	x3, x3, #0x1b0
   3c38c:	add	x1, x1, #0xc48
   3c390:	add	x0, x0, #0xec8
   3c394:	mov	w2, #0x941                 	// #2369
   3c398:	stp	x27, x28, [sp, #80]
   3c39c:	bl	35ac0 <__assert_fail@plt>

000000000003c3a0 <aarch64_ext_regno@@Base>:
   3c3a0:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   3c3a4:	ldr	w5, [x0, #20]
   3c3a8:	mov	w3, #0xffffffff            	// #-1
   3c3ac:	mov	w0, #0x1                   	// #1
   3c3b0:	ldr	x4, [x4, #3944]
   3c3b4:	lsl	x5, x5, #3
   3c3b8:	add	x6, x5, x4
   3c3bc:	ldr	w5, [x5, x4]
   3c3c0:	ldr	w4, [x6, #4]
   3c3c4:	lsr	w2, w2, w5
   3c3c8:	lsl	w3, w3, w4
   3c3cc:	bic	w3, w2, w3
   3c3d0:	str	w3, [x1, #16]
   3c3d4:	ret

000000000003c3d8 <aarch64_ext_regno_pair@@Base>:
   3c3d8:	ldr	w2, [x1, #8]
   3c3dc:	and	w0, w2, #0xfffffffd
   3c3e0:	cmp	w0, #0x1
   3c3e4:	b.ne	3c408 <aarch64_ext_regno_pair@@Base+0x30>  // b.any
   3c3e8:	sub	w2, w2, #0x1
   3c3ec:	sbfiz	x4, x2, #3, #32
   3c3f0:	sub	x2, x4, w2, sxtw
   3c3f4:	add	x2, x3, x2, lsl #3
   3c3f8:	ldr	w2, [x2, #40]
   3c3fc:	add	w2, w2, #0x1
   3c400:	str	w2, [x1, #16]
   3c404:	ret
   3c408:	stp	x29, x30, [sp, #-16]!
   3c40c:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3c410:	add	x3, x3, #0x388
   3c414:	mov	x29, sp
   3c418:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3c41c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3c420:	add	x3, x3, #0x1e8
   3c424:	add	x1, x1, #0xc48
   3c428:	add	x0, x0, #0xf20
   3c42c:	mov	w2, #0x10e                 	// #270
   3c430:	bl	35ac0 <__assert_fail@plt>
   3c434:	nop

000000000003c438 <aarch64_ext_regrt_sysins@@Base>:
   3c438:	stp	x29, x30, [sp, #-48]!
   3c43c:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   3c440:	mov	x29, sp
   3c444:	stp	x19, x20, [sp, #16]
   3c448:	mov	x19, x1
   3c44c:	ldr	w1, [x0, #20]
   3c450:	ldr	x4, [x4, #3944]
   3c454:	mov	x20, x3
   3c458:	lsl	x1, x1, #3
   3c45c:	mov	w0, #0xffffffff            	// #-1
   3c460:	add	x5, x1, x4
   3c464:	ldr	w3, [x1, x4]
   3c468:	ldr	w1, [x5, #4]
   3c46c:	str	x21, [sp, #32]
   3c470:	lsr	w2, w2, w3
   3c474:	ldr	w21, [x19, #8]
   3c478:	lsl	w0, w0, w1
   3c47c:	bic	w0, w2, w0
   3c480:	str	w0, [x19, #16]
   3c484:	cmp	w21, #0x1
   3c488:	b.ne	3c4c8 <aarch64_ext_regrt_sysins@@Base+0x90>  // b.any
   3c48c:	ldr	w0, [x20, #24]
   3c490:	bl	35710 <aarch64_get_operand_class@plt>
   3c494:	cmp	w0, #0xc
   3c498:	b.ne	3c4c8 <aarch64_ext_regrt_sysins@@Base+0x90>  // b.any
   3c49c:	ldr	x0, [x20, #40]
   3c4a0:	bl	35a00 <aarch64_sys_ins_reg_has_xt@plt>
   3c4a4:	mov	w2, w0
   3c4a8:	ldrb	w1, [x19, #48]
   3c4ac:	mov	w0, w21
   3c4b0:	ldr	x21, [sp, #32]
   3c4b4:	bfi	w1, w2, #1, #1
   3c4b8:	strb	w1, [x19, #48]
   3c4bc:	ldp	x19, x20, [sp, #16]
   3c4c0:	ldp	x29, x30, [sp], #48
   3c4c4:	ret
   3c4c8:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3c4cc:	add	x3, x3, #0x388
   3c4d0:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3c4d4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3c4d8:	add	x3, x3, #0x200
   3c4dc:	add	x1, x1, #0xc48
   3c4e0:	add	x0, x0, #0xf40
   3c4e4:	mov	w2, #0x11c                 	// #284
   3c4e8:	bl	35ac0 <__assert_fail@plt>
   3c4ec:	nop

000000000003c4f0 <aarch64_ext_reglane@@Base>:
   3c4f0:	stp	x29, x30, [sp, #-80]!
   3c4f4:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   3c4f8:	mov	x29, sp
   3c4fc:	ldr	w0, [x0, #20]
   3c500:	stp	x19, x20, [sp, #16]
   3c504:	mov	x19, x1
   3c508:	ldr	x20, [x4, #3944]
   3c50c:	lsl	x0, x0, #3
   3c510:	ldr	x5, [x3, #8]
   3c514:	stp	x21, x22, [sp, #32]
   3c518:	mov	w21, w2
   3c51c:	add	x2, x0, x20
   3c520:	ldr	w6, [x0, x20]
   3c524:	mov	w22, #0xffffffff            	// #-1
   3c528:	stp	x23, x24, [sp, #48]
   3c52c:	mov	x24, x3
   3c530:	ldr	w0, [x2, #4]
   3c534:	ldp	w1, w2, [x5, #12]
   3c538:	lsl	w0, w22, w0
   3c53c:	bic	w1, w21, w1
   3c540:	cmp	w2, #0x17
   3c544:	ccmp	w2, #0xa, #0x4, ne  // ne = any
   3c548:	lsr	w1, w1, w6
   3c54c:	bic	w0, w1, w0
   3c550:	str	w0, [x19, #16]
   3c554:	b.ne	3c5c8 <aarch64_ext_reglane@@Base+0xd8>  // b.any
   3c558:	ldr	w0, [x19]
   3c55c:	cmp	w0, #0x20
   3c560:	b.eq	3c654 <aarch64_ext_reglane@@Base+0x164>  // b.none
   3c564:	ldr	x4, [x4, #3944]
   3c568:	mov	w20, #0xffffffff            	// #-1
   3c56c:	mov	w22, #0x0                   	// #0
   3c570:	ldr	w2, [x4, #344]
   3c574:	ldr	w0, [x4, #348]
   3c578:	lsr	w21, w21, w2
   3c57c:	lsl	w20, w20, w0
   3c580:	bic	w20, w21, w20
   3c584:	mov	w21, #0x5                   	// #5
   3c588:	tbnz	w20, #0, 3c61c <aarch64_ext_reglane@@Base+0x12c>
   3c58c:	lsr	w0, w20, #1
   3c590:	tbnz	w20, #1, 3c60c <aarch64_ext_reglane@@Base+0x11c>
   3c594:	lsr	w0, w20, #2
   3c598:	tbnz	w20, #2, 3c840 <aarch64_ext_reglane@@Base+0x350>
   3c59c:	lsr	w20, w20, #3
   3c5a0:	mov	w22, #0x3                   	// #3
   3c5a4:	mov	w21, #0x2                   	// #2
   3c5a8:	tbnz	w20, #0, 3c618 <aarch64_ext_reglane@@Base+0x128>
   3c5ac:	mov	w23, #0x0                   	// #0
   3c5b0:	mov	w0, w23
   3c5b4:	ldp	x19, x20, [sp, #16]
   3c5b8:	ldp	x21, x22, [sp, #32]
   3c5bc:	ldp	x23, x24, [sp, #48]
   3c5c0:	ldp	x29, x30, [sp], #80
   3c5c4:	ret
   3c5c8:	cmp	w2, #0x5d
   3c5cc:	b.eq	3c75c <aarch64_ext_reglane@@Base+0x26c>  // b.none
   3c5d0:	cmp	w2, #0x5b
   3c5d4:	b.ne	3c6d4 <aarch64_ext_reglane@@Base+0x1e4>  // b.any
   3c5d8:	ldr	w0, [x20, #996]
   3c5dc:	mov	w23, #0x1                   	// #1
   3c5e0:	ldr	w1, [x20, #992]
   3c5e4:	lsl	w22, w22, w0
   3c5e8:	mov	w0, w23
   3c5ec:	lsr	w21, w21, w1
   3c5f0:	bic	w21, w21, w22
   3c5f4:	str	x21, [x19, #24]
   3c5f8:	ldp	x19, x20, [sp, #16]
   3c5fc:	ldp	x21, x22, [sp, #32]
   3c600:	ldp	x23, x24, [sp, #48]
   3c604:	ldp	x29, x30, [sp], #80
   3c608:	ret
   3c60c:	mov	w20, w0
   3c610:	mov	w22, #0x1                   	// #1
   3c614:	mov	w21, #0x0                   	// #0
   3c618:	add	w21, w21, #0x6
   3c61c:	mov	w0, w21
   3c620:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3c624:	cmp	w22, w0
   3c628:	b.ne	3c854 <aarch64_ext_reglane@@Base+0x364>  // b.any
   3c62c:	lsr	w20, w20, #1
   3c630:	strb	w21, [x19, #4]
   3c634:	str	x20, [x19, #24]
   3c638:	mov	w23, #0x1                   	// #1
   3c63c:	mov	w0, w23
   3c640:	ldp	x19, x20, [sp, #16]
   3c644:	ldp	x21, x22, [sp, #32]
   3c648:	ldp	x23, x24, [sp, #48]
   3c64c:	ldp	x29, x30, [sp], #80
   3c650:	ret
   3c654:	ldr	w0, [x5, #32]
   3c658:	cmp	w0, #0x1f
   3c65c:	b.ne	3c564 <aarch64_ext_reglane@@Base+0x74>  // b.any
   3c660:	ldr	w23, [x19, #8]
   3c664:	cmp	w23, #0x1
   3c668:	b.ne	3c874 <aarch64_ext_reglane@@Base+0x384>  // b.any
   3c66c:	ldr	w2, [x20, #320]
   3c670:	mov	w1, w23
   3c674:	mov	x0, x3
   3c678:	ldr	w20, [x20, #324]
   3c67c:	lsr	w21, w21, w2
   3c680:	bl	3aa98 <aarch64_opcode_encode@@Base+0x1710>
   3c684:	strb	w0, [x19, #4]
   3c688:	lsl	w20, w22, w20
   3c68c:	bic	w20, w21, w20
   3c690:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3c694:	and	w0, w0, #0xff
   3c698:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3c69c:	add	x3, x3, #0x388
   3c6a0:	add	x1, x3, #0x200
   3c6a4:	cmp	w0, #0x10
   3c6a8:	ldp	x4, x5, [x1, #56]
   3c6ac:	stp	x4, x5, [sp, #64]
   3c6b0:	b.hi	3c85c <aarch64_ext_reglane@@Base+0x36c>  // b.pmore
   3c6b4:	sub	w0, w0, #0x1
   3c6b8:	add	x1, sp, #0x40
   3c6bc:	ldrb	w0, [x1, w0, uxtw]
   3c6c0:	cmp	w0, #0xff
   3c6c4:	b.eq	3c858 <aarch64_ext_reglane@@Base+0x368>  // b.none
   3c6c8:	lsr	w20, w20, w0
   3c6cc:	str	x20, [x19, #24]
   3c6d0:	b	3c5b0 <aarch64_ext_reglane@@Base+0xc0>
   3c6d4:	ldr	w1, [x19, #8]
   3c6d8:	mov	x0, x3
   3c6dc:	bl	3aa98 <aarch64_opcode_encode@@Base+0x1710>
   3c6e0:	strb	w0, [x19, #4]
   3c6e4:	and	w0, w0, #0xff
   3c6e8:	cmp	w0, #0x7
   3c6ec:	b.eq	3c808 <aarch64_ext_reglane@@Base+0x318>  // b.none
   3c6f0:	cmp	w0, #0x8
   3c6f4:	b.eq	3c810 <aarch64_ext_reglane@@Base+0x320>  // b.none
   3c6f8:	cmp	w0, #0x6
   3c6fc:	mov	w23, #0x0                   	// #0
   3c700:	b.ne	3c5b0 <aarch64_ext_reglane@@Base+0xc0>  // b.any
   3c704:	ldr	w0, [x19]
   3c708:	cmp	w0, #0x22
   3c70c:	mov	w0, w21
   3c710:	b.eq	3c7d8 <aarch64_ext_reglane@@Base+0x2e8>  // b.none
   3c714:	mov	w4, #0x3e                  	// #62
   3c718:	mov	w3, #0x3d                  	// #61
   3c71c:	mov	w2, #0x2                   	// #2
   3c720:	mov	w1, #0x0                   	// #0
   3c724:	bl	35390 <extract_fields@plt>
   3c728:	mov	w0, w0
   3c72c:	str	x0, [x19, #24]
   3c730:	ldr	x0, [x24, #8]
   3c734:	ldr	w0, [x0, #20]
   3c738:	cmp	w0, #0x50
   3c73c:	b.eq	3c7b0 <aarch64_ext_reglane@@Base+0x2c0>  // b.none
   3c740:	mov	w23, #0x1                   	// #1
   3c744:	mov	w0, w23
   3c748:	ldp	x19, x20, [sp, #16]
   3c74c:	ldp	x21, x22, [sp, #32]
   3c750:	ldp	x23, x24, [sp, #48]
   3c754:	ldp	x29, x30, [sp], #80
   3c758:	ret
   3c75c:	ldr	w1, [x19, #8]
   3c760:	mov	x0, x3
   3c764:	bl	3aa98 <aarch64_opcode_encode@@Base+0x1710>
   3c768:	strb	w0, [x19, #4]
   3c76c:	and	w0, w0, #0xff
   3c770:	sub	w0, w0, #0xa
   3c774:	cmp	w0, #0x1
   3c778:	b.hi	3c5ac <aarch64_ext_reglane@@Base+0xbc>  // b.pmore
   3c77c:	mov	w1, #0x0                   	// #0
   3c780:	mov	w0, w21
   3c784:	mov	w4, #0x3e                  	// #62
   3c788:	mov	w3, #0x3d                  	// #61
   3c78c:	mov	w2, #0x2                   	// #2
   3c790:	bl	35390 <extract_fields@plt>
   3c794:	ldr	w1, [x19, #16]
   3c798:	mov	w0, w0
   3c79c:	mov	w23, #0x1                   	// #1
   3c7a0:	str	x0, [x19, #24]
   3c7a4:	and	w1, w1, #0x1f
   3c7a8:	str	w1, [x19, #16]
   3c7ac:	b	3c5b0 <aarch64_ext_reglane@@Base+0xc0>
   3c7b0:	ldrb	w0, [x19, #4]
   3c7b4:	cmp	w0, #0x6
   3c7b8:	b.eq	3c740 <aarch64_ext_reglane@@Base+0x250>  // b.none
   3c7bc:	ldr	x21, [x19, #24]
   3c7c0:	tbnz	w21, #0, 3c5ac <aarch64_ext_reglane@@Base+0xbc>
   3c7c4:	add	x21, x21, x21, lsr #63
   3c7c8:	mov	w23, #0x1                   	// #1
   3c7cc:	asr	x0, x21, #1
   3c7d0:	str	x0, [x19, #24]
   3c7d4:	b	3c5b0 <aarch64_ext_reglane@@Base+0xc0>
   3c7d8:	mov	w1, #0x0                   	// #0
   3c7dc:	mov	w5, #0x3f                  	// #63
   3c7e0:	mov	w4, #0x3e                  	// #62
   3c7e4:	mov	w3, #0x3d                  	// #61
   3c7e8:	mov	w2, #0x3                   	// #3
   3c7ec:	bl	35390 <extract_fields@plt>
   3c7f0:	ldr	w1, [x19, #16]
   3c7f4:	mov	w0, w0
   3c7f8:	str	x0, [x19, #24]
   3c7fc:	and	w1, w1, #0xf
   3c800:	str	w1, [x19, #16]
   3c804:	b	3c730 <aarch64_ext_reglane@@Base+0x240>
   3c808:	mov	w0, w21
   3c80c:	b	3c714 <aarch64_ext_reglane@@Base+0x224>
   3c810:	ldr	x0, [x24, #8]
   3c814:	ldr	w2, [x20, #488]
   3c818:	ldr	w1, [x20, #492]
   3c81c:	ldr	w0, [x0, #20]
   3c820:	lsr	w21, w21, w2
   3c824:	lsl	w22, w22, w1
   3c828:	bic	w21, w21, w22
   3c82c:	str	x21, [x19, #24]
   3c830:	cmp	w0, #0x50
   3c834:	b.eq	3c7c0 <aarch64_ext_reglane@@Base+0x2d0>  // b.none
   3c838:	mov	w23, #0x1                   	// #1
   3c83c:	b	3c744 <aarch64_ext_reglane@@Base+0x254>
   3c840:	mov	w21, #0x1                   	// #1
   3c844:	mov	w20, w0
   3c848:	add	w21, w21, #0x6
   3c84c:	mov	w22, #0x2                   	// #2
   3c850:	b	3c61c <aarch64_ext_reglane@@Base+0x12c>
   3c854:	bl	3aa08 <aarch64_opcode_encode@@Base+0x1680>
   3c858:	bl	3a980 <aarch64_opcode_encode@@Base+0x15f8>
   3c85c:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3c860:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   3c864:	add	x1, x1, #0x288
   3c868:	add	x0, x0, #0x4b0
   3c86c:	mov	w2, #0x200                 	// #512
   3c870:	bl	35ac0 <__assert_fail@plt>
   3c874:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3c878:	add	x3, x3, #0x388
   3c87c:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3c880:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3c884:	add	x3, x3, #0x220
   3c888:	add	x1, x1, #0xc48
   3c88c:	add	x0, x0, #0x398
   3c890:	mov	w2, #0x13b                 	// #315
   3c894:	bl	35ac0 <__assert_fail@plt>

000000000003c898 <aarch64_ext_reglist@@Base>:
   3c898:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   3c89c:	ldr	w6, [x0, #20]
   3c8a0:	mov	w3, #0xffffffff            	// #-1
   3c8a4:	mov	w0, #0x1                   	// #1
   3c8a8:	ldr	x5, [x5, #3944]
   3c8ac:	lsl	x6, x6, #3
   3c8b0:	add	x8, x6, x5
   3c8b4:	ldp	w7, w4, [x5, #216]
   3c8b8:	ldr	w6, [x6, x5]
   3c8bc:	ldr	w5, [x8, #4]
   3c8c0:	lsr	w7, w2, w7
   3c8c4:	lsl	w4, w3, w4
   3c8c8:	bic	w4, w7, w4
   3c8cc:	add	w4, w4, w0
   3c8d0:	lsr	w2, w2, w6
   3c8d4:	lsl	w3, w3, w5
   3c8d8:	bic	w3, w2, w3
   3c8dc:	bfi	w3, w4, #5, #27
   3c8e0:	strb	w3, [x1, #16]
   3c8e4:	ret

000000000003c8e8 <aarch64_ext_ldst_reglist@@Base>:
   3c8e8:	stp	x29, x30, [sp, #-192]!
   3c8ec:	adrp	x0, 58000 <xexit@@Base+0xe08>
   3c8f0:	add	x0, x0, #0x388
   3c8f4:	mov	x29, sp
   3c8f8:	ldr	x3, [x3, #8]
   3c8fc:	add	x7, sp, #0x38
   3c900:	stp	x19, x20, [sp, #16]
   3c904:	mov	w19, w2
   3c908:	mov	x2, #0x84                  	// #132
   3c90c:	ldr	x20, [x3, #120]
   3c910:	str	x21, [sp, #32]
   3c914:	mov	x21, x1
   3c918:	add	x1, x0, #0x248
   3c91c:	mov	x0, x7
   3c920:	bl	35050 <memcpy@plt>
   3c924:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   3c928:	mov	w3, #0xffffffff            	// #-1
   3c92c:	ldrb	w6, [x21, #16]
   3c930:	mov	x7, x0
   3c934:	ldr	x4, [x4, #3944]
   3c938:	mov	w0, #0x0                   	// #0
   3c93c:	ldp	w1, w5, [x4, #96]
   3c940:	ldp	w8, w2, [x4, #192]
   3c944:	lsr	w1, w19, w1
   3c948:	lsl	w4, w3, w5
   3c94c:	bic	w4, w1, w4
   3c950:	lsr	w19, w19, w8
   3c954:	bfxil	w6, w4, #0, #5
   3c958:	strb	w6, [x21, #16]
   3c95c:	lsl	w2, w3, w2
   3c960:	bic	w2, w19, w2
   3c964:	cmp	w2, #0xa
   3c968:	b.hi	3c9a8 <aarch64_ext_ldst_reglist@@Base+0xc0>  // b.pmore
   3c96c:	ubfiz	x3, x2, #1, #32
   3c970:	add	x1, sp, #0x40
   3c974:	add	x2, x3, w2, uxtw
   3c978:	ubfx	w20, w20, #24, #3
   3c97c:	lsl	x2, x2, #2
   3c980:	ldr	w1, [x1, x2]
   3c984:	cmp	w1, w20
   3c988:	b.ne	3c9a8 <aarch64_ext_ldst_reglist@@Base+0xc0>  // b.any
   3c98c:	ldr	w1, [x7, x2]
   3c990:	cbnz	w1, 3c9a8 <aarch64_ext_ldst_reglist@@Base+0xc0>
   3c994:	add	x1, sp, #0x3c
   3c998:	mov	w0, #0x1                   	// #1
   3c99c:	ldr	w1, [x1, x2]
   3c9a0:	bfi	w6, w1, #5, #3
   3c9a4:	strb	w6, [x21, #16]
   3c9a8:	ldp	x19, x20, [sp, #16]
   3c9ac:	ldr	x21, [sp, #32]
   3c9b0:	ldp	x29, x30, [sp], #192
   3c9b4:	ret

000000000003c9b8 <aarch64_ext_ldst_reglist_r@@Base>:
   3c9b8:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   3c9bc:	ldrb	w0, [x1, #16]
   3c9c0:	mov	w5, #0xffffffff            	// #-1
   3c9c4:	ldr	x4, [x4, #3944]
   3c9c8:	ldr	x3, [x3, #8]
   3c9cc:	ldp	w7, w6, [x4, #96]
   3c9d0:	lsr	w7, w2, w7
   3c9d4:	lsl	w6, w5, w6
   3c9d8:	bic	w6, w7, w6
   3c9dc:	ldp	w7, w4, [x4, #248]
   3c9e0:	bfxil	w0, w6, #0, #5
   3c9e4:	strb	w0, [x1, #16]
   3c9e8:	ldr	x3, [x3, #120]
   3c9ec:	lsl	w5, w5, w4
   3c9f0:	lsr	w2, w2, w7
   3c9f4:	bic	w2, w2, w5
   3c9f8:	ubfx	w3, w3, #24, #3
   3c9fc:	bfi	w0, w3, #5, #3
   3ca00:	strb	w0, [x1, #16]
   3ca04:	ands	w4, w0, #0xe0
   3ca08:	ccmp	w3, #0x4, #0x2, ne  // ne = any
   3ca0c:	b.hi	3ca38 <aarch64_ext_ldst_reglist_r@@Base+0x80>  // b.pmore
   3ca10:	cmp	w4, #0x20
   3ca14:	ccmp	w2, #0x1, #0x0, eq  // eq = none
   3ca18:	b.eq	3ca24 <aarch64_ext_ldst_reglist_r@@Base+0x6c>  // b.none
   3ca1c:	mov	w0, #0x1                   	// #1
   3ca20:	ret
   3ca24:	mov	w2, #0x2                   	// #2
   3ca28:	bfi	w0, w2, #5, #3
   3ca2c:	strb	w0, [x1, #16]
   3ca30:	mov	w0, #0x1                   	// #1
   3ca34:	ret
   3ca38:	stp	x29, x30, [sp, #-16]!
   3ca3c:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3ca40:	add	x3, x3, #0x388
   3ca44:	mov	x29, sp
   3ca48:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3ca4c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3ca50:	add	x3, x3, #0x2d0
   3ca54:	add	x1, x1, #0xc48
   3ca58:	add	x0, x0, #0xfa8
   3ca5c:	mov	w2, #0x1e5                 	// #485
   3ca60:	bl	35ac0 <__assert_fail@plt>
   3ca64:	nop

000000000003ca68 <aarch64_ext_ldst_elemlist@@Base>:
   3ca68:	stp	x29, x30, [sp, #-64]!
   3ca6c:	mov	x29, sp
   3ca70:	stp	x21, x22, [sp, #32]
   3ca74:	adrp	x21, a2000 <aarch64_operands@@Base+0x16bc0>
   3ca78:	mov	x22, x3
   3ca7c:	ldr	x21, [x21, #3944]
   3ca80:	stp	x19, x20, [sp, #16]
   3ca84:	mov	x19, x1
   3ca88:	stp	x23, x24, [sp, #48]
   3ca8c:	mov	w23, w2
   3ca90:	ldrb	w2, [x1, #16]
   3ca94:	ldp	w1, w0, [x21, #96]
   3ca98:	mov	w24, #0xffffffff            	// #-1
   3ca9c:	ldr	w3, [x21, #212]
   3caa0:	lsr	w1, w23, w1
   3caa4:	cmp	w3, #0x2
   3caa8:	lsl	w0, w24, w0
   3caac:	bic	w0, w1, w0
   3cab0:	bfxil	w2, w0, #0, #5
   3cab4:	strb	w2, [x19, #16]
   3cab8:	b.le	3cb38 <aarch64_ext_ldst_elemlist@@Base+0xd0>
   3cabc:	ldr	w20, [x21, #208]
   3cac0:	mov	w2, #0x3                   	// #3
   3cac4:	mov	w0, w23
   3cac8:	mov	w5, #0x9                   	// #9
   3cacc:	add	w20, w20, #0x1
   3cad0:	mov	w4, #0x1f                  	// #31
   3cad4:	mov	w3, #0xb                   	// #11
   3cad8:	mov	w1, #0x0                   	// #0
   3cadc:	lsr	w20, w23, w20
   3cae0:	and	w20, w20, w2
   3cae4:	bl	35390 <extract_fields@plt>
   3cae8:	cmp	w20, #0x2
   3caec:	b.eq	3cb1c <aarch64_ext_ldst_elemlist@@Base+0xb4>  // b.none
   3caf0:	cmp	w20, #0x3
   3caf4:	b.eq	3cb20 <aarch64_ext_ldst_elemlist@@Base+0xb8>  // b.none
   3caf8:	cbz	w20, 3cb54 <aarch64_ext_ldst_elemlist@@Base+0xec>
   3cafc:	cmp	w20, #0x1
   3cb00:	b.ne	3cb20 <aarch64_ext_ldst_elemlist@@Base+0xb8>  // b.any
   3cb04:	tbnz	w0, #0, 3cb20 <aarch64_ext_ldst_elemlist@@Base+0xb8>
   3cb08:	lsr	w0, w0, #1
   3cb0c:	mov	w1, #0x6                   	// #6
   3cb10:	strb	w1, [x19, #4]
   3cb14:	str	x0, [x19, #24]
   3cb18:	b	3cb64 <aarch64_ext_ldst_elemlist@@Base+0xfc>
   3cb1c:	tbz	w0, #1, 3cbc0 <aarch64_ext_ldst_elemlist@@Base+0x158>
   3cb20:	mov	w0, #0x0                   	// #0
   3cb24:	ldp	x19, x20, [sp, #16]
   3cb28:	ldp	x21, x22, [sp, #32]
   3cb2c:	ldp	x23, x24, [sp, #48]
   3cb30:	ldp	x29, x30, [sp], #64
   3cb34:	ret
   3cb38:	mov	w0, w23
   3cb3c:	mov	w5, #0x9                   	// #9
   3cb40:	mov	w4, #0x1f                  	// #31
   3cb44:	mov	w3, #0xb                   	// #11
   3cb48:	mov	w2, #0x3                   	// #3
   3cb4c:	mov	w1, #0x0                   	// #0
   3cb50:	bl	35390 <extract_fields@plt>
   3cb54:	mov	w0, w0
   3cb58:	mov	w1, #0x5                   	// #5
   3cb5c:	strb	w1, [x19, #4]
   3cb60:	str	x0, [x19, #24]
   3cb64:	ldrh	w1, [x19, #16]
   3cb68:	mov	w0, #0x1                   	// #1
   3cb6c:	ldr	x2, [x22, #8]
   3cb70:	and	w1, w1, #0xfffffe1f
   3cb74:	orr	w1, w1, #0x100
   3cb78:	strh	w1, [x19, #16]
   3cb7c:	ldr	x1, [x2, #120]
   3cb80:	ldrb	w2, [x19, #16]
   3cb84:	ubfx	w1, w1, #24, #3
   3cb88:	bfi	w2, w1, #5, #3
   3cb8c:	strb	w2, [x19, #16]
   3cb90:	tst	w2, #0xe0
   3cb94:	ccmp	w1, #0x4, #0x2, ne  // ne = any
   3cb98:	b.ls	3cb24 <aarch64_ext_ldst_elemlist@@Base+0xbc>  // b.plast
   3cb9c:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3cba0:	add	x3, x3, #0x388
   3cba4:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3cba8:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3cbac:	add	x3, x3, #0x2f0
   3cbb0:	add	x1, x1, #0xc48
   3cbb4:	add	x0, x0, #0xfa8
   3cbb8:	mov	w2, #0x22d                 	// #557
   3cbbc:	bl	35ac0 <__assert_fail@plt>
   3cbc0:	tbnz	w0, #0, 3cbd8 <aarch64_ext_ldst_elemlist@@Base+0x170>
   3cbc4:	lsr	w0, w0, #2
   3cbc8:	mov	w1, #0x7                   	// #7
   3cbcc:	strb	w1, [x19, #4]
   3cbd0:	str	x0, [x19, #24]
   3cbd4:	b	3cb64 <aarch64_ext_ldst_elemlist@@Base+0xfc>
   3cbd8:	ldp	w2, w1, [x21, #248]
   3cbdc:	lsr	w23, w23, w2
   3cbe0:	lsl	w24, w24, w1
   3cbe4:	bics	wzr, w23, w24
   3cbe8:	b.ne	3cb20 <aarch64_ext_ldst_elemlist@@Base+0xb8>  // b.any
   3cbec:	lsr	w0, w0, #3
   3cbf0:	mov	w1, #0x8                   	// #8
   3cbf4:	strb	w1, [x19, #4]
   3cbf8:	str	x0, [x19, #24]
   3cbfc:	b	3cb64 <aarch64_ext_ldst_elemlist@@Base+0xfc>

000000000003cc00 <aarch64_ext_advsimd_imm_shift@@Base>:
   3cc00:	stp	x29, x30, [sp, #-80]!
   3cc04:	mov	w0, #0x0                   	// #0
   3cc08:	mov	x29, sp
   3cc0c:	stp	x23, x24, [sp, #48]
   3cc10:	adrp	x23, a2000 <aarch64_operands@@Base+0x16bc0>
   3cc14:	stp	x21, x22, [sp, #32]
   3cc18:	mov	w21, w2
   3cc1c:	mov	w22, #0xffffffff            	// #-1
   3cc20:	ldr	x2, [x23, #3944]
   3cc24:	stp	x19, x20, [sp, #16]
   3cc28:	ldr	w4, [x2, #436]
   3cc2c:	ldr	w19, [x2, #432]
   3cc30:	lsl	w4, w22, w4
   3cc34:	lsr	w19, w21, w19
   3cc38:	bics	w19, w19, w4
   3cc3c:	b.ne	3cc54 <aarch64_ext_advsimd_imm_shift@@Base+0x54>  // b.any
   3cc40:	ldp	x19, x20, [sp, #16]
   3cc44:	ldp	x21, x22, [sp, #32]
   3cc48:	ldp	x23, x24, [sp, #48]
   3cc4c:	ldp	x29, x30, [sp], #80
   3cc50:	ret
   3cc54:	ldr	x5, [x3, #8]
   3cc58:	mov	x20, x1
   3cc5c:	mov	w0, w21
   3cc60:	mov	w4, #0x35                  	// #53
   3cc64:	mov	w2, #0x2                   	// #2
   3cc68:	mov	w1, #0x0                   	// #0
   3cc6c:	ldr	w24, [x5, #16]
   3cc70:	mov	w3, #0x36                  	// #54
   3cc74:	str	x25, [sp, #64]
   3cc78:	bl	35390 <extract_fields@plt>
   3cc7c:	mov	w25, w0
   3cc80:	tbnz	w19, #3, 3cda0 <aarch64_ext_advsimd_imm_shift@@Base+0x1a0>
   3cc84:	tbnz	w19, #2, 3cdac <aarch64_ext_advsimd_imm_shift@@Base+0x1ac>
   3cc88:	tbnz	w19, #1, 3cdb8 <aarch64_ext_advsimd_imm_shift@@Base+0x1b8>
   3cc8c:	ubfiz	w4, w19, #3, #1
   3cc90:	cmp	w4, #0x0
   3cc94:	csel	w22, w22, wzr, eq  // eq = none
   3cc98:	cset	w19, ne  // ne = any
   3cc9c:	cmp	w24, #0xe
   3cca0:	ccmp	w24, #0x1a, #0x4, ne  // ne = any
   3cca4:	b.ne	3cdc4 <aarch64_ext_advsimd_imm_shift@@Base+0x1c4>  // b.any
   3cca8:	ldr	w1, [x20]
   3ccac:	sub	w1, w1, #0x2b
   3ccb0:	cmp	w1, #0x1
   3ccb4:	b.hi	3cdc4 <aarch64_ext_advsimd_imm_shift@@Base+0x1c4>  // b.pmore
   3ccb8:	cmp	w24, #0xe
   3ccbc:	b.eq	3cd1c <aarch64_ext_advsimd_imm_shift@@Base+0x11c>  // b.none
   3ccc0:	add	w19, w19, #0x4
   3ccc4:	cmp	w22, #0x4
   3ccc8:	b.hi	3cdec <aarch64_ext_advsimd_imm_shift@@Base+0x1ec>  // b.pmore
   3cccc:	and	w19, w19, #0xff
   3ccd0:	mov	w0, w19
   3ccd4:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3ccd8:	cmp	w22, w0
   3ccdc:	b.ne	3cdec <aarch64_ext_advsimd_imm_shift@@Base+0x1ec>  // b.any
   3cce0:	ldr	w0, [x20]
   3cce4:	strb	w19, [x20, #4]
   3cce8:	cmp	w0, #0x2c
   3ccec:	b.eq	3cd74 <aarch64_ext_advsimd_imm_shift@@Base+0x174>  // b.none
   3ccf0:	mov	w1, #0x8                   	// #8
   3ccf4:	mov	w0, #0x1                   	// #1
   3ccf8:	lsl	w22, w1, w22
   3ccfc:	sub	w22, w25, w22
   3cd00:	ldr	x25, [sp, #64]
   3cd04:	str	x22, [x20, #16]
   3cd08:	ldp	x19, x20, [sp, #16]
   3cd0c:	ldp	x21, x22, [sp, #32]
   3cd10:	ldp	x23, x24, [sp, #48]
   3cd14:	ldp	x29, x30, [sp], #80
   3cd18:	ret
   3cd1c:	ldr	x23, [x23, #3944]
   3cd20:	mov	w19, #0xffffffff            	// #-1
   3cd24:	ldp	w0, w1, [x23, #88]
   3cd28:	lsr	w21, w21, w0
   3cd2c:	lsl	w19, w19, w1
   3cd30:	bic	w19, w21, w19
   3cd34:	orr	w19, w19, w22, lsl #1
   3cd38:	add	w1, w19, #0xd
   3cd3c:	add	w0, w19, #0xe
   3cd40:	cmp	w1, #0xe
   3cd44:	csel	w1, w0, w1, hi  // hi = pmore
   3cd48:	cmp	w19, #0x8
   3cd4c:	b.hi	3cde8 <aarch64_ext_advsimd_imm_shift@@Base+0x1e8>  // b.pmore
   3cd50:	and	w21, w1, #0xff
   3cd54:	mov	w0, w21
   3cd58:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3cd5c:	cmp	w19, w0
   3cd60:	b.ne	3cde8 <aarch64_ext_advsimd_imm_shift@@Base+0x1e8>  // b.any
   3cd64:	ldr	w0, [x20]
   3cd68:	strb	w21, [x20, #4]
   3cd6c:	cmp	w0, #0x2c
   3cd70:	b.ne	3ccf0 <aarch64_ext_advsimd_imm_shift@@Base+0xf0>  // b.any
   3cd74:	mov	w1, #0x10                  	// #16
   3cd78:	mov	w0, #0x1                   	// #1
   3cd7c:	lsl	w22, w1, w22
   3cd80:	sub	w22, w22, w25
   3cd84:	ldr	x25, [sp, #64]
   3cd88:	str	x22, [x20, #16]
   3cd8c:	ldp	x19, x20, [sp, #16]
   3cd90:	ldp	x21, x22, [sp, #32]
   3cd94:	ldp	x23, x24, [sp, #48]
   3cd98:	ldp	x29, x30, [sp], #80
   3cd9c:	ret
   3cda0:	mov	w22, #0x3                   	// #3
   3cda4:	mov	w19, #0x4                   	// #4
   3cda8:	b	3cc9c <aarch64_ext_advsimd_imm_shift@@Base+0x9c>
   3cdac:	mov	w22, #0x2                   	// #2
   3cdb0:	mov	w19, #0x3                   	// #3
   3cdb4:	b	3cc9c <aarch64_ext_advsimd_imm_shift@@Base+0x9c>
   3cdb8:	mov	w22, #0x1                   	// #1
   3cdbc:	mov	w19, #0x2                   	// #2
   3cdc0:	b	3cc9c <aarch64_ext_advsimd_imm_shift@@Base+0x9c>
   3cdc4:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3cdc8:	add	x3, x3, #0x388
   3cdcc:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3cdd0:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3cdd4:	add	x3, x3, #0x310
   3cdd8:	add	x1, x1, #0xc48
   3cddc:	add	x0, x0, #0xfe8
   3cde0:	mov	w2, #0x249                 	// #585
   3cde4:	bl	35ac0 <__assert_fail@plt>
   3cde8:	bl	3aa38 <aarch64_opcode_encode@@Base+0x16b0>
   3cdec:	bl	3aa08 <aarch64_opcode_encode@@Base+0x1680>

000000000003cdf0 <aarch64_ext_shll_imm@@Base>:
   3cdf0:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   3cdf4:	mov	w3, #0xffffffff            	// #-1
   3cdf8:	mov	w0, #0x0                   	// #0
   3cdfc:	ldr	x4, [x4, #3944]
   3ce00:	ldp	w5, w4, [x4, #64]
   3ce04:	lsr	w2, w2, w5
   3ce08:	lsl	w3, w3, w4
   3ce0c:	bic	w2, w2, w3
   3ce10:	cmp	w2, #0x2
   3ce14:	b.hi	3ce30 <aarch64_ext_shll_imm@@Base+0x40>  // b.pmore
   3ce18:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3ce1c:	add	x3, x3, #0x388
   3ce20:	add	x3, x3, #0x330
   3ce24:	mov	w0, #0x1                   	// #1
   3ce28:	ldr	x2, [x3, w2, uxtw #3]
   3ce2c:	str	x2, [x1, #16]
   3ce30:	ret
   3ce34:	nop

000000000003ce38 <aarch64_ext_imm@@Base>:
   3ce38:	adrp	x8, a2000 <aarch64_operands@@Base+0x16bc0>
   3ce3c:	add	x5, x0, #0x14
   3ce40:	add	x10, x0, #0x24
   3ce44:	mov	x3, #0x0                   	// #0
   3ce48:	ldr	x8, [x8, #3944]
   3ce4c:	mov	w9, #0xffffffff            	// #-1
   3ce50:	ldr	w4, [x5]
   3ce54:	cbz	w4, 3ce88 <aarch64_ext_imm@@Base+0x50>
   3ce58:	ubfiz	x4, x4, #3, #32
   3ce5c:	add	x5, x5, #0x4
   3ce60:	add	x6, x8, x4
   3ce64:	cmp	x5, x10
   3ce68:	ldr	w4, [x8, x4]
   3ce6c:	ldr	w7, [x6, #4]
   3ce70:	lsr	w6, w2, w4
   3ce74:	lsl	w4, w9, w7
   3ce78:	bic	w4, w6, w4
   3ce7c:	lsl	w3, w3, w7
   3ce80:	orr	w3, w4, w3
   3ce84:	b.ne	3ce50 <aarch64_ext_imm@@Base+0x18>  // b.any
   3ce88:	ldr	w5, [x0, #16]
   3ce8c:	tbnz	w5, #2, 3cedc <aarch64_ext_imm@@Base+0xa4>
   3ce90:	tbnz	w5, #3, 3cebc <aarch64_ext_imm@@Base+0x84>
   3ce94:	tst	x5, #0x200
   3ce98:	lsl	x0, x3, #4
   3ce9c:	csel	x3, x0, x3, ne  // ne = any
   3cea0:	ldr	w4, [x1]
   3cea4:	mov	w0, #0x1                   	// #1
   3cea8:	lsl	x2, x3, #12
   3ceac:	cmp	w4, #0x4e
   3ceb0:	csel	x3, x2, x3, eq  // eq = none
   3ceb4:	str	x3, [x1, #16]
   3ceb8:	ret
   3cebc:	ldr	w4, [x1]
   3cec0:	lsl	x3, x3, #2
   3cec4:	mov	w0, #0x1                   	// #1
   3cec8:	lsl	x2, x3, #12
   3cecc:	cmp	w4, #0x4e
   3ced0:	csel	x3, x2, x3, eq  // eq = none
   3ced4:	str	x3, [x1, #16]
   3ced8:	ret
   3cedc:	ldr	w4, [x0, #20]
   3cee0:	cbz	w4, 3cf3c <aarch64_ext_imm@@Base+0x104>
   3cee4:	adrp	x7, a2000 <aarch64_operands@@Base+0x16bc0>
   3cee8:	add	x0, x0, #0x18
   3ceec:	mov	w2, #0x0                   	// #0
   3cef0:	ldr	x7, [x7, #3944]
   3cef4:	add	x6, x7, w4, uxtw #3
   3cef8:	ldr	w4, [x0], #4
   3cefc:	ldr	w6, [x6, #4]
   3cf00:	add	w2, w2, w6
   3cf04:	cbnz	w4, 3cef4 <aarch64_ext_imm@@Base+0xbc>
   3cf08:	sub	w2, w2, #0x1
   3cf0c:	cmp	w2, #0x1e
   3cf10:	b.hi	3cf3c <aarch64_ext_imm@@Base+0x104>  // b.pmore
   3cf14:	mov	x0, #0x2                   	// #2
   3cf18:	mov	x4, #0x1                   	// #1
   3cf1c:	lsl	x0, x0, x2
   3cf20:	sub	x0, x0, #0x1
   3cf24:	and	x3, x0, x3
   3cf28:	lsl	x2, x4, x2
   3cf2c:	eor	x3, x3, x2
   3cf30:	sub	x3, x3, x2
   3cf34:	tbz	w5, #3, 3ce94 <aarch64_ext_imm@@Base+0x5c>
   3cf38:	b	3cebc <aarch64_ext_imm@@Base+0x84>
   3cf3c:	stp	x29, x30, [sp, #-16]!
   3cf40:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3cf44:	add	x3, x3, #0x388
   3cf48:	mov	x29, sp
   3cf4c:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3cf50:	adrp	x0, 58000 <xexit@@Base+0xe08>
   3cf54:	add	x3, x3, #0x348
   3cf58:	add	x1, x1, #0x288
   3cf5c:	add	x0, x0, #0x68
   3cf60:	mov	w2, #0x12e                 	// #302
   3cf64:	bl	35ac0 <__assert_fail@plt>

000000000003cf68 <aarch64_ext_imm_half@@Base>:
   3cf68:	stp	x29, x30, [sp, #-32]!
   3cf6c:	mov	x29, sp
   3cf70:	stp	x19, x20, [sp, #16]
   3cf74:	mov	x20, x1
   3cf78:	mov	w19, w2
   3cf7c:	bl	35720 <aarch64_ext_imm@plt>
   3cf80:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3cf84:	mov	w3, #0x5                   	// #5
   3cf88:	str	w3, [x20, #32]
   3cf8c:	mov	w2, #0xffffffff            	// #-1
   3cf90:	ldr	x1, [x1, #3944]
   3cf94:	mov	w0, #0x1                   	// #1
   3cf98:	ldr	w3, [x1, #256]
   3cf9c:	ldr	w1, [x1, #260]
   3cfa0:	lsr	w19, w19, w3
   3cfa4:	lsl	w2, w2, w1
   3cfa8:	bic	w2, w19, w2
   3cfac:	lsl	w2, w2, #4
   3cfb0:	str	x2, [x20, #40]
   3cfb4:	ldp	x19, x20, [sp, #16]
   3cfb8:	ldp	x29, x30, [sp], #32
   3cfbc:	ret

000000000003cfc0 <aarch64_ext_advsimd_imm_modified@@Base>:
   3cfc0:	stp	x29, x30, [sp, #-64]!
   3cfc4:	mov	x29, sp
   3cfc8:	ldr	w0, [x1, #8]
   3cfcc:	stp	x19, x20, [sp, #16]
   3cfd0:	cmp	w0, #0x1
   3cfd4:	stp	x21, x22, [sp, #32]
   3cfd8:	stp	x23, x24, [sp, #48]
   3cfdc:	ldrb	w22, [x3, #28]
   3cfe0:	b.ne	3d20c <aarch64_ext_advsimd_imm_modified@@Base+0x24c>  // b.any
   3cfe4:	ldr	w0, [x1]
   3cfe8:	mov	x19, x1
   3cfec:	mov	x20, x3
   3cff0:	mov	w21, w2
   3cff4:	cmp	w0, #0x2f
   3cff8:	b.ne	3d008 <aarch64_ext_advsimd_imm_modified@@Base+0x48>  // b.any
   3cffc:	ldrb	w0, [x1, #24]
   3d000:	orr	w0, w0, #0x1
   3d004:	strb	w0, [x1, #24]
   3d008:	mov	w1, #0x0                   	// #0
   3d00c:	mov	w0, w21
   3d010:	mov	w4, #0x3                   	// #3
   3d014:	mov	w3, #0x4                   	// #4
   3d018:	mov	w2, #0x2                   	// #2
   3d01c:	bl	35390 <extract_fields@plt>
   3d020:	ldrb	w1, [x19, #24]
   3d024:	mov	w24, w0
   3d028:	mov	x23, x24
   3d02c:	tbz	w1, #0, 3d13c <aarch64_ext_advsimd_imm_modified@@Base+0x17c>
   3d030:	ldr	w1, [x19, #8]
   3d034:	mov	x0, x20
   3d038:	str	x24, [x19, #16]
   3d03c:	bl	3aa98 <aarch64_opcode_encode@@Base+0x1710>
   3d040:	strb	w0, [x19, #4]
   3d044:	and	w0, w0, #0xff
   3d048:	cmp	w0, #0x21
   3d04c:	b.eq	3d080 <aarch64_ext_advsimd_imm_modified@@Base+0xc0>  // b.none
   3d050:	cmp	w0, #0x22
   3d054:	b.eq	3d0ec <aarch64_ext_advsimd_imm_modified@@Base+0x12c>  // b.none
   3d058:	cbz	w0, 3d0d0 <aarch64_ext_advsimd_imm_modified@@Base+0x110>
   3d05c:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3d060:	add	x3, x3, #0x388
   3d064:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3d068:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   3d06c:	add	x3, x3, #0x368
   3d070:	add	x1, x1, #0xc48
   3d074:	add	x0, x0, #0x4b0
   3d078:	mov	w2, #0x2f1                 	// #753
   3d07c:	bl	35ac0 <__assert_fail@plt>
   3d080:	mov	w0, #0x5                   	// #5
   3d084:	str	w0, [x19, #32]
   3d088:	mov	w0, w22
   3d08c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3d090:	and	w0, w0, #0xff
   3d094:	cmp	w0, #0x2
   3d098:	b.eq	3d1d8 <aarch64_ext_advsimd_imm_modified@@Base+0x218>  // b.none
   3d09c:	cmp	w0, #0x4
   3d0a0:	b.eq	3d1a8 <aarch64_ext_advsimd_imm_modified@@Base+0x1e8>  // b.none
   3d0a4:	cmp	w0, #0x1
   3d0a8:	b.eq	3d188 <aarch64_ext_advsimd_imm_modified@@Base+0x1c8>  // b.none
   3d0ac:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3d0b0:	add	x3, x3, #0x388
   3d0b4:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3d0b8:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   3d0bc:	add	x3, x3, #0x368
   3d0c0:	add	x1, x1, #0xc48
   3d0c4:	add	x0, x0, #0x4b0
   3d0c8:	mov	w2, #0x2e5                 	// #741
   3d0cc:	bl	35ac0 <__assert_fail@plt>
   3d0d0:	str	wzr, [x19, #32]
   3d0d4:	mov	w0, #0x1                   	// #1
   3d0d8:	ldp	x19, x20, [sp, #16]
   3d0dc:	ldp	x21, x22, [sp, #32]
   3d0e0:	ldp	x23, x24, [sp, #48]
   3d0e4:	ldp	x29, x30, [sp], #64
   3d0e8:	ret
   3d0ec:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   3d0f0:	mov	w1, #0x1                   	// #1
   3d0f4:	str	w1, [x19, #32]
   3d0f8:	mov	x1, #0x8                   	// #8
   3d0fc:	ldr	x0, [x0, #3944]
   3d100:	ldr	w2, [x0, #204]
   3d104:	cmp	w2, #0x0
   3d108:	b.le	3d120 <aarch64_ext_advsimd_imm_modified@@Base+0x160>
   3d10c:	ldr	w2, [x0, #200]
   3d110:	mov	x0, #0x10                  	// #16
   3d114:	lsr	w21, w21, w2
   3d118:	tst	x21, #0x1
   3d11c:	csel	x1, x1, x0, eq  // eq = none
   3d120:	str	x1, [x19, #40]
   3d124:	mov	w0, #0x1                   	// #1
   3d128:	ldp	x19, x20, [sp, #16]
   3d12c:	ldp	x21, x22, [sp, #32]
   3d130:	ldp	x23, x24, [sp, #48]
   3d134:	ldp	x29, x30, [sp], #64
   3d138:	ret
   3d13c:	mov	w0, w22
   3d140:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3d144:	and	w0, w0, #0xff
   3d148:	cmp	w0, #0x8
   3d14c:	b.ne	3d030 <aarch64_ext_advsimd_imm_modified@@Base+0x70>  // b.any
   3d150:	mov	w0, #0x0                   	// #0
   3d154:	mov	x24, #0x0                   	// #0
   3d158:	mov	x3, #0xff                  	// #255
   3d15c:	nop
   3d160:	lsl	w1, w0, #3
   3d164:	lsr	w2, w23, w0
   3d168:	tst	x2, #0x1
   3d16c:	add	w0, w0, #0x1
   3d170:	lsl	x1, x3, x1
   3d174:	orr	x1, x24, x1
   3d178:	csel	x24, x1, x24, ne  // ne = any
   3d17c:	cmp	w0, #0x8
   3d180:	b.ne	3d160 <aarch64_ext_advsimd_imm_modified@@Base+0x1a0>  // b.any
   3d184:	b	3d030 <aarch64_ext_advsimd_imm_modified@@Base+0x70>
   3d188:	mov	x0, #0x0                   	// #0
   3d18c:	str	x0, [x19, #40]
   3d190:	mov	w0, #0x1                   	// #1
   3d194:	ldp	x19, x20, [sp, #16]
   3d198:	ldp	x21, x22, [sp, #32]
   3d19c:	ldp	x23, x24, [sp, #48]
   3d1a0:	ldp	x29, x30, [sp], #64
   3d1a4:	ret
   3d1a8:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3d1ac:	mov	x0, #0x0                   	// #0
   3d1b0:	ldr	x1, [x1, #3944]
   3d1b4:	ldr	w2, [x1, #204]
   3d1b8:	cmp	w2, #0x2
   3d1bc:	b.le	3d18c <aarch64_ext_advsimd_imm_modified@@Base+0x1cc>
   3d1c0:	ldr	w0, [x1, #200]
   3d1c4:	add	w0, w0, #0x1
   3d1c8:	lsr	w21, w21, w0
   3d1cc:	ubfiz	x0, x21, #3, #2
   3d1d0:	str	x0, [x19, #40]
   3d1d4:	b	3d190 <aarch64_ext_advsimd_imm_modified@@Base+0x1d0>
   3d1d8:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3d1dc:	mov	x0, #0x0                   	// #0
   3d1e0:	ldr	x1, [x1, #3944]
   3d1e4:	ldr	w2, [x1, #204]
   3d1e8:	cmp	w2, #0x1
   3d1ec:	b.le	3d18c <aarch64_ext_advsimd_imm_modified@@Base+0x1cc>
   3d1f0:	ldr	w0, [x1, #200]
   3d1f4:	add	w0, w0, #0x1
   3d1f8:	lsr	w0, w21, w0
   3d1fc:	ubfiz	w0, w0, #3, #1
   3d200:	mov	w0, w0
   3d204:	str	x0, [x19, #40]
   3d208:	b	3d190 <aarch64_ext_advsimd_imm_modified@@Base+0x1d0>
   3d20c:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3d210:	add	x3, x3, #0x388
   3d214:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3d218:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3d21c:	add	x3, x3, #0x368
   3d220:	add	x1, x1, #0xc48
   3d224:	add	x0, x0, #0x398
   3d228:	mov	w2, #0x2bf                 	// #703
   3d22c:	bl	35ac0 <__assert_fail@plt>

000000000003d230 <aarch64_ext_fpimm@@Base>:
   3d230:	adrp	x6, a2000 <aarch64_operands@@Base+0x16bc0>
   3d234:	add	x3, x0, #0x14
   3d238:	add	x8, x0, #0x24
   3d23c:	mov	w9, #0xffffffff            	// #-1
   3d240:	ldr	x6, [x6, #3944]
   3d244:	mov	w0, #0x0                   	// #0
   3d248:	ldr	w4, [x3]
   3d24c:	add	x3, x3, #0x4
   3d250:	cmp	x3, x8
   3d254:	ubfiz	x5, x4, #3, #32
   3d258:	add	x7, x6, x5
   3d25c:	cbz	w4, 3d280 <aarch64_ext_fpimm@@Base+0x50>
   3d260:	ldr	w4, [x6, x5]
   3d264:	ldr	w7, [x7, #4]
   3d268:	lsr	w5, w2, w4
   3d26c:	lsl	w4, w9, w7
   3d270:	bic	w4, w5, w4
   3d274:	lsl	w0, w0, w7
   3d278:	orr	w0, w4, w0
   3d27c:	b.ne	3d248 <aarch64_ext_fpimm@@Base+0x18>  // b.any
   3d280:	ldrb	w3, [x1, #24]
   3d284:	mov	w2, w0
   3d288:	mov	w0, #0x1                   	// #1
   3d28c:	str	x2, [x1, #16]
   3d290:	orr	w2, w3, w0
   3d294:	strb	w2, [x1, #24]
   3d298:	ret
   3d29c:	nop

000000000003d2a0 <aarch64_ext_imm_rotate1@@Base>:
   3d2a0:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   3d2a4:	ldr	w0, [x0, #20]
   3d2a8:	mov	w3, #0xffffffff            	// #-1
   3d2ac:	ldr	x4, [x4, #3944]
   3d2b0:	lsl	x0, x0, #3
   3d2b4:	add	x5, x0, x4
   3d2b8:	ldr	w4, [x0, x4]
   3d2bc:	ldr	w0, [x5, #4]
   3d2c0:	lsr	w2, w2, w4
   3d2c4:	lsl	w3, w3, w0
   3d2c8:	bic	w2, w2, w3
   3d2cc:	cmp	w2, #0x1
   3d2d0:	b.hi	3d2ec <aarch64_ext_imm_rotate1@@Base+0x4c>  // b.pmore
   3d2d4:	mov	w4, #0xb4                  	// #180
   3d2d8:	mov	x3, #0x5a                  	// #90
   3d2dc:	mov	w0, #0x1                   	// #1
   3d2e0:	umaddl	x2, w2, w4, x3
   3d2e4:	str	x2, [x1, #16]
   3d2e8:	ret
   3d2ec:	stp	x29, x30, [sp, #-16]!
   3d2f0:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3d2f4:	add	x3, x3, #0x388
   3d2f8:	mov	x29, sp
   3d2fc:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3d300:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3d304:	add	x3, x3, #0x390
   3d308:	add	x1, x1, #0xc48
   3d30c:	add	x0, x0, #0x4c8
   3d310:	mov	w2, #0x30c                 	// #780
   3d314:	bl	35ac0 <__assert_fail@plt>

000000000003d318 <aarch64_ext_imm_rotate2@@Base>:
   3d318:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   3d31c:	ldr	w0, [x0, #20]
   3d320:	mov	w3, #0xffffffff            	// #-1
   3d324:	ldr	x4, [x4, #3944]
   3d328:	lsl	x0, x0, #3
   3d32c:	add	x5, x0, x4
   3d330:	ldr	w4, [x0, x4]
   3d334:	ldr	w0, [x5, #4]
   3d338:	lsr	w2, w2, w4
   3d33c:	lsl	w3, w3, w0
   3d340:	bic	w2, w2, w3
   3d344:	cmp	w2, #0x3
   3d348:	b.hi	3d360 <aarch64_ext_imm_rotate2@@Base+0x48>  // b.pmore
   3d34c:	mov	w3, #0x5a                  	// #90
   3d350:	mov	w0, #0x1                   	// #1
   3d354:	umull	x2, w2, w3
   3d358:	str	x2, [x1, #16]
   3d35c:	ret
   3d360:	stp	x29, x30, [sp, #-16]!
   3d364:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3d368:	add	x3, x3, #0x388
   3d36c:	mov	x29, sp
   3d370:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3d374:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3d378:	add	x3, x3, #0x3a8
   3d37c:	add	x1, x1, #0xc48
   3d380:	add	x0, x0, #0x4d8
   3d384:	mov	w2, #0x319                 	// #793
   3d388:	bl	35ac0 <__assert_fail@plt>
   3d38c:	nop

000000000003d390 <aarch64_ext_fbits@@Base>:
   3d390:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   3d394:	mov	w3, #0xffffffff            	// #-1
   3d398:	mov	w5, #0x40                  	// #64
   3d39c:	mov	w0, #0x1                   	// #1
   3d3a0:	ldr	x4, [x4, #3944]
   3d3a4:	ldr	w6, [x4, #528]
   3d3a8:	ldr	w4, [x4, #532]
   3d3ac:	lsr	w2, w2, w6
   3d3b0:	lsl	w3, w3, w4
   3d3b4:	bic	w3, w2, w3
   3d3b8:	sub	w3, w5, w3
   3d3bc:	str	x3, [x1, #16]
   3d3c0:	ret
   3d3c4:	nop

000000000003d3c8 <aarch64_ext_aimm@@Base>:
   3d3c8:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   3d3cc:	mov	w0, #0x5                   	// #5
   3d3d0:	mov	w5, #0xffffffff            	// #-1
   3d3d4:	str	w0, [x1, #32]
   3d3d8:	ldr	x4, [x4, #3944]
   3d3dc:	mov	w0, #0x0                   	// #0
   3d3e0:	ldr	w6, [x4, #280]
   3d3e4:	ldr	w3, [x4, #284]
   3d3e8:	lsr	w6, w2, w6
   3d3ec:	lsl	w3, w5, w3
   3d3f0:	bic	w3, w6, w3
   3d3f4:	cmp	w3, #0x1
   3d3f8:	b.hi	3d428 <aarch64_ext_aimm@@Base+0x60>  // b.pmore
   3d3fc:	ldr	w6, [x4, #376]
   3d400:	cmp	w3, #0x0
   3d404:	ldr	w4, [x4, #380]
   3d408:	mov	x3, #0xc                   	// #12
   3d40c:	mov	w0, #0x1                   	// #1
   3d410:	csel	x3, x3, xzr, ne  // ne = any
   3d414:	lsr	w2, w2, w6
   3d418:	str	x3, [x1, #40]
   3d41c:	lsl	w5, w5, w4
   3d420:	bic	w2, w2, w5
   3d424:	str	x2, [x1, #16]
   3d428:	ret
   3d42c:	nop

000000000003d430 <aarch64_ext_limm@@Base>:
   3d430:	stp	x29, x30, [sp, #-48]!
   3d434:	mov	x5, x0
   3d438:	mov	w0, w2
   3d43c:	mov	x29, sp
   3d440:	ldr	w4, [x5, #24]
   3d444:	mov	w2, #0x3                   	// #3
   3d448:	str	x21, [sp, #32]
   3d44c:	mov	x21, x3
   3d450:	ldr	w3, [x5, #20]
   3d454:	ldr	w5, [x5, #28]
   3d458:	stp	x19, x20, [sp, #16]
   3d45c:	mov	x20, x1
   3d460:	mov	w1, #0x0                   	// #0
   3d464:	bl	35390 <extract_fields@plt>
   3d468:	mov	w19, w0
   3d46c:	ldrb	w0, [x21, #28]
   3d470:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3d474:	and	w0, w0, #0xff
   3d478:	and	w2, w19, #0x3f
   3d47c:	ubfx	x4, x19, #6, #6
   3d480:	tbnz	w19, #12, 3d4f4 <aarch64_ext_limm@@Base+0xc4>
   3d484:	cmp	w2, #0x37
   3d488:	b.hi	3d4c8 <aarch64_ext_limm@@Base+0x98>  // b.pmore
   3d48c:	cmp	w2, #0x2f
   3d490:	b.hi	3d604 <aarch64_ext_limm@@Base+0x1d4>  // b.pmore
   3d494:	tbz	w19, #5, 3d58c <aarch64_ext_limm@@Base+0x15c>
   3d498:	mov	w1, #0xf                   	// #15
   3d49c:	and	w2, w19, #0xf
   3d4a0:	and	w4, w4, w1
   3d4a4:	mov	x5, #0xffff                	// #65535
   3d4a8:	mov	w3, #0x10                  	// #16
   3d4ac:	cmp	w3, w0, lsl #3
   3d4b0:	b.ls	3d504 <aarch64_ext_limm@@Base+0xd4>  // b.plast
   3d4b4:	mov	w0, #0x0                   	// #0
   3d4b8:	ldp	x19, x20, [sp, #16]
   3d4bc:	ldr	x21, [sp, #32]
   3d4c0:	ldp	x29, x30, [sp], #48
   3d4c4:	ret
   3d4c8:	cmp	w2, #0x3b
   3d4cc:	b.ls	3d5ec <aarch64_ext_limm@@Base+0x1bc>  // b.plast
   3d4d0:	sub	w2, w2, #0x3c
   3d4d4:	cmp	w2, #0x1
   3d4d8:	b.hi	3d4b4 <aarch64_ext_limm@@Base+0x84>  // b.pmore
   3d4dc:	mov	w1, #0x1                   	// #1
   3d4e0:	and	w2, w19, #0x1
   3d4e4:	and	w4, w4, w1
   3d4e8:	mov	x5, #0x3                   	// #3
   3d4ec:	mov	w3, #0x2                   	// #2
   3d4f0:	b	3d4ac <aarch64_ext_limm@@Base+0x7c>
   3d4f4:	mov	w3, #0x40                  	// #64
   3d4f8:	mov	x5, #0xffffffffffffffff    	// #-1
   3d4fc:	cmp	w3, w0, lsl #3
   3d500:	b.hi	3d4b4 <aarch64_ext_limm@@Base+0x84>  // b.pmore
   3d504:	sub	w1, w3, #0x1
   3d508:	cmp	w1, w2
   3d50c:	b.eq	3d4b4 <aarch64_ext_limm@@Base+0x84>  // b.none
   3d510:	add	w1, w2, #0x1
   3d514:	mov	x2, #0x1                   	// #1
   3d518:	lsl	x2, x2, x1
   3d51c:	sub	x2, x2, #0x1
   3d520:	cbz	w4, 3d538 <aarch64_ext_limm@@Base+0x108>
   3d524:	sub	w1, w3, w4
   3d528:	lsr	x4, x2, x4
   3d52c:	lsl	x2, x2, x1
   3d530:	and	x2, x2, x5
   3d534:	orr	x2, x2, x4
   3d538:	cmp	w3, #0x10
   3d53c:	b.eq	3d558 <aarch64_ext_limm@@Base+0x128>  // b.none
   3d540:	b.hi	3d5b8 <aarch64_ext_limm@@Base+0x188>  // b.pmore
   3d544:	cmp	w3, #0x4
   3d548:	b.eq	3d5ac <aarch64_ext_limm@@Base+0x17c>  // b.none
   3d54c:	cmp	w3, #0x8
   3d550:	b.ne	3d5a0 <aarch64_ext_limm@@Base+0x170>  // b.any
   3d554:	orr	x2, x2, x2, lsl #8
   3d558:	orr	x2, x2, x2, lsl #16
   3d55c:	orr	x2, x2, x2, lsl #32
   3d560:	lsl	w1, w0, #2
   3d564:	mov	x3, #0xffffffffffffffff    	// #-1
   3d568:	mov	w0, #0x1                   	// #1
   3d56c:	lsl	x3, x3, x1
   3d570:	lsl	x1, x3, x1
   3d574:	bic	x2, x2, x1
   3d578:	str	x2, [x20, #16]
   3d57c:	ldp	x19, x20, [sp, #16]
   3d580:	ldr	x21, [sp, #32]
   3d584:	ldp	x29, x30, [sp], #48
   3d588:	ret
   3d58c:	mov	w1, #0x1f                  	// #31
   3d590:	mov	x5, #0xffffffff            	// #4294967295
   3d594:	and	w4, w4, w1
   3d598:	mov	w3, #0x20                  	// #32
   3d59c:	b	3d4ac <aarch64_ext_limm@@Base+0x7c>
   3d5a0:	cmp	w3, #0x2
   3d5a4:	b.ne	3d5c8 <aarch64_ext_limm@@Base+0x198>  // b.any
   3d5a8:	orr	x2, x2, x2, lsl #2
   3d5ac:	orr	x2, x2, x2, lsl #4
   3d5b0:	orr	x2, x2, x2, lsl #8
   3d5b4:	b	3d558 <aarch64_ext_limm@@Base+0x128>
   3d5b8:	cmp	w3, #0x20
   3d5bc:	b.eq	3d55c <aarch64_ext_limm@@Base+0x12c>  // b.none
   3d5c0:	cmp	w3, #0x40
   3d5c4:	b.eq	3d560 <aarch64_ext_limm@@Base+0x130>  // b.none
   3d5c8:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3d5cc:	add	x3, x3, #0x388
   3d5d0:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3d5d4:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   3d5d8:	add	x3, x3, #0x3c0
   3d5dc:	add	x1, x1, #0xc48
   3d5e0:	add	x0, x0, #0x4b0
   3d5e4:	mov	w2, #0x37f                 	// #895
   3d5e8:	bl	35ac0 <__assert_fail@plt>
   3d5ec:	mov	w1, #0x3                   	// #3
   3d5f0:	and	w2, w19, #0x3
   3d5f4:	and	w4, w4, w1
   3d5f8:	mov	x5, #0xf                   	// #15
   3d5fc:	mov	w3, #0x4                   	// #4
   3d600:	b	3d4ac <aarch64_ext_limm@@Base+0x7c>
   3d604:	mov	w1, #0x7                   	// #7
   3d608:	and	w2, w19, #0x7
   3d60c:	and	w4, w4, w1
   3d610:	mov	x5, #0xff                  	// #255
   3d614:	mov	w3, #0x8                   	// #8
   3d618:	b	3d4ac <aarch64_ext_limm@@Base+0x7c>
   3d61c:	nop

000000000003d620 <aarch64_ext_inv_limm@@Base>:
   3d620:	stp	x29, x30, [sp, #-32]!
   3d624:	mov	x29, sp
   3d628:	str	x19, [sp, #16]
   3d62c:	mov	x19, x1
   3d630:	bl	35420 <aarch64_ext_limm@plt>
   3d634:	cbz	w0, 3d648 <aarch64_ext_inv_limm@@Base+0x28>
   3d638:	ldr	x1, [x19, #16]
   3d63c:	mov	w0, #0x1                   	// #1
   3d640:	mvn	x1, x1
   3d644:	str	x1, [x19, #16]
   3d648:	ldr	x19, [sp, #16]
   3d64c:	ldp	x29, x30, [sp], #32
   3d650:	ret
   3d654:	nop

000000000003d658 <aarch64_ext_ft@@Base>:
   3d658:	stp	x29, x30, [sp, #-48]!
   3d65c:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   3d660:	mov	x29, sp
   3d664:	ldr	x4, [x4, #3944]
   3d668:	stp	x19, x20, [sp, #16]
   3d66c:	mov	x19, x1
   3d670:	ldr	x0, [x3, #8]
   3d674:	mov	w3, #0xffffffff            	// #-1
   3d678:	ldp	w6, w5, [x4, #96]
   3d67c:	ldr	w1, [x0, #16]
   3d680:	ldr	w7, [x4, #300]
   3d684:	ldr	w0, [x4, #296]
   3d688:	lsr	w6, w2, w6
   3d68c:	lsl	w4, w3, w5
   3d690:	bic	w4, w6, w4
   3d694:	str	w4, [x19, #16]
   3d698:	sub	w1, w1, #0x3d
   3d69c:	lsr	w0, w2, w0
   3d6a0:	cmp	w1, #0x3
   3d6a4:	lsl	w3, w3, w7
   3d6a8:	bic	w3, w0, w3
   3d6ac:	b.hi	3d6e0 <aarch64_ext_ft@@Base+0x88>  // b.pmore
   3d6b0:	cmp	w3, #0x2
   3d6b4:	b.hi	3d6d0 <aarch64_ext_ft@@Base+0x78>  // b.pmore
   3d6b8:	add	w3, w3, #0x7
   3d6bc:	mov	w0, #0x1                   	// #1
   3d6c0:	strb	w3, [x19, #4]
   3d6c4:	ldp	x19, x20, [sp, #16]
   3d6c8:	ldp	x29, x30, [sp], #48
   3d6cc:	ret
   3d6d0:	mov	w0, #0x0                   	// #0
   3d6d4:	ldp	x19, x20, [sp, #16]
   3d6d8:	ldp	x29, x30, [sp], #48
   3d6dc:	ret
   3d6e0:	mov	w0, w2
   3d6e4:	mov	w4, #0x25                  	// #37
   3d6e8:	mov	w3, #0x22                  	// #34
   3d6ec:	mov	w2, #0x2                   	// #2
   3d6f0:	mov	w1, #0x0                   	// #0
   3d6f4:	bl	35390 <extract_fields@plt>
   3d6f8:	mov	w20, w0
   3d6fc:	cmp	w0, #0x4
   3d700:	b.hi	3d6d0 <aarch64_ext_ft@@Base+0x78>  // b.pmore
   3d704:	str	x21, [sp, #32]
   3d708:	add	w21, w0, #0x5
   3d70c:	and	w21, w21, #0xff
   3d710:	mov	w0, w21
   3d714:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3d718:	cmp	w20, w0
   3d71c:	b.ne	3d730 <aarch64_ext_ft@@Base+0xd8>  // b.any
   3d720:	strb	w21, [x19, #4]
   3d724:	mov	w0, #0x1                   	// #1
   3d728:	ldr	x21, [sp, #32]
   3d72c:	b	3d6c4 <aarch64_ext_ft@@Base+0x6c>
   3d730:	bl	3aa08 <aarch64_opcode_encode@@Base+0x1680>
   3d734:	nop

000000000003d738 <aarch64_ext_addr_simple@@Base>:
   3d738:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   3d73c:	mov	w3, #0xffffffff            	// #-1
   3d740:	mov	w0, #0x1                   	// #1
   3d744:	ldr	x4, [x4, #3944]
   3d748:	ldp	w5, w4, [x4, #112]
   3d74c:	lsr	w2, w2, w5
   3d750:	lsl	w3, w3, w4
   3d754:	bic	w3, w2, w3
   3d758:	str	w3, [x1, #16]
   3d75c:	ret

000000000003d760 <aarch64_ext_addr_offset@@Base>:
   3d760:	stp	x29, x30, [sp, #-64]!
   3d764:	mov	x29, sp
   3d768:	stp	x19, x20, [sp, #16]
   3d76c:	mov	x20, x1
   3d770:	ldr	w1, [x1, #8]
   3d774:	str	x23, [sp, #48]
   3d778:	mov	x23, x0
   3d77c:	mov	w19, w2
   3d780:	mov	x0, x3
   3d784:	stp	x21, x22, [sp, #32]
   3d788:	adrp	x22, a2000 <aarch64_operands@@Base+0x16bc0>
   3d78c:	bl	3aa98 <aarch64_opcode_encode@@Base+0x1710>
   3d790:	strb	w0, [x20, #4]
   3d794:	mov	w21, #0xffffffff            	// #-1
   3d798:	ldr	x22, [x22, #3944]
   3d79c:	mov	w0, w19
   3d7a0:	ldp	w4, w3, [x23, #20]
   3d7a4:	mov	w2, #0x1                   	// #1
   3d7a8:	mov	w1, #0x0                   	// #0
   3d7ac:	lsl	x4, x4, #3
   3d7b0:	add	x6, x4, x22
   3d7b4:	ldr	w5, [x4, x22]
   3d7b8:	ldr	w4, [x6, #4]
   3d7bc:	lsr	w5, w19, w5
   3d7c0:	lsl	w4, w21, w4
   3d7c4:	bic	w4, w5, w4
   3d7c8:	str	w4, [x20, #16]
   3d7cc:	bl	35390 <extract_fields@plt>
   3d7d0:	sbfx	x0, x0, #0, #9
   3d7d4:	ldr	w1, [x23, #28]
   3d7d8:	str	w0, [x20, #20]
   3d7dc:	lsl	x0, x1, #3
   3d7e0:	add	x1, x0, x22
   3d7e4:	ldr	w2, [x0, x22]
   3d7e8:	ldr	w0, [x1, #4]
   3d7ec:	lsr	w19, w19, w2
   3d7f0:	lsl	w21, w21, w0
   3d7f4:	bic	w19, w19, w21
   3d7f8:	cmp	w19, #0x1
   3d7fc:	b.ne	3d80c <aarch64_ext_addr_offset@@Base+0xac>  // b.any
   3d800:	ldrb	w0, [x20, #28]
   3d804:	orr	w0, w0, #0x6
   3d808:	strb	w0, [x20, #28]
   3d80c:	mov	w0, #0x1                   	// #1
   3d810:	ldp	x19, x20, [sp, #16]
   3d814:	ldp	x21, x22, [sp, #32]
   3d818:	ldr	x23, [sp, #48]
   3d81c:	ldp	x29, x30, [sp], #64
   3d820:	ret
   3d824:	nop

000000000003d828 <aarch64_ext_addr_regoff@@Base>:
   3d828:	stp	x29, x30, [sp, #-80]!
   3d82c:	mov	x29, sp
   3d830:	stp	x19, x20, [sp, #16]
   3d834:	adrp	x19, a2000 <aarch64_operands@@Base+0x16bc0>
   3d838:	mov	x20, x1
   3d83c:	ldr	x19, [x19, #3944]
   3d840:	stp	x21, x22, [sp, #32]
   3d844:	mov	w21, w2
   3d848:	str	x23, [sp, #48]
   3d84c:	mov	x23, x3
   3d850:	ldp	w5, w2, [x19, #224]
   3d854:	mov	w22, #0xffffffff            	// #-1
   3d858:	ldp	w0, w4, [x19, #240]
   3d85c:	mov	w1, #0x1                   	// #1
   3d860:	ldr	w6, [x19, #112]
   3d864:	lsr	w5, w21, w5
   3d868:	ldr	w3, [x19, #116]
   3d86c:	lsl	w2, w22, w2
   3d870:	bic	w2, w5, w2
   3d874:	lsl	w4, w22, w4
   3d878:	lsr	w6, w21, w6
   3d87c:	lsl	w3, w22, w3
   3d880:	bic	w3, w6, w3
   3d884:	stp	w3, w2, [x20, #16]
   3d888:	lsr	w0, w21, w0
   3d88c:	bic	w0, w0, w4
   3d890:	bl	35bb0 <aarch64_get_operand_modifier_from_value@plt>
   3d894:	cmp	w0, #0x9
   3d898:	ldp	w2, w1, [x19, #248]
   3d89c:	mov	w3, #0x5                   	// #5
   3d8a0:	csel	w0, w0, w3, ne  // ne = any
   3d8a4:	str	w0, [x20, #32]
   3d8a8:	lsr	w21, w21, w2
   3d8ac:	lsl	w22, w22, w1
   3d8b0:	bics	wzr, w21, w22
   3d8b4:	b.ne	3d8e0 <aarch64_ext_addr_regoff@@Base+0xb8>  // b.any
   3d8b8:	ldrb	w0, [x20, #36]
   3d8bc:	str	xzr, [x20, #40]
   3d8c0:	and	w0, w0, #0xfffffffd
   3d8c4:	strb	w0, [x20, #36]
   3d8c8:	mov	w0, #0x1                   	// #1
   3d8cc:	ldp	x19, x20, [sp, #16]
   3d8d0:	ldp	x21, x22, [sp, #32]
   3d8d4:	ldr	x23, [sp, #48]
   3d8d8:	ldp	x29, x30, [sp], #80
   3d8dc:	ret
   3d8e0:	ldr	w1, [x20, #8]
   3d8e4:	mov	x0, x23
   3d8e8:	bl	3aa98 <aarch64_opcode_encode@@Base+0x1710>
   3d8ec:	strb	w0, [x20, #4]
   3d8f0:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3d8f4:	and	w0, w0, #0xff
   3d8f8:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3d8fc:	add	x3, x3, #0x388
   3d900:	add	x1, x3, #0x200
   3d904:	cmp	w0, #0x10
   3d908:	ldp	x4, x5, [x1, #56]
   3d90c:	stp	x4, x5, [sp, #64]
   3d910:	b.hi	3d954 <aarch64_ext_addr_regoff@@Base+0x12c>  // b.pmore
   3d914:	sub	w0, w0, #0x1
   3d918:	add	x1, sp, #0x40
   3d91c:	ldrb	w0, [x1, w0, uxtw]
   3d920:	cmp	w0, #0xff
   3d924:	b.eq	3d96c <aarch64_ext_addr_regoff@@Base+0x144>  // b.none
   3d928:	ldrb	w1, [x20, #36]
   3d92c:	and	x0, x0, #0xff
   3d930:	str	x0, [x20, #40]
   3d934:	orr	w0, w1, #0x2
   3d938:	strb	w0, [x20, #36]
   3d93c:	mov	w0, #0x1                   	// #1
   3d940:	ldp	x19, x20, [sp, #16]
   3d944:	ldp	x21, x22, [sp, #32]
   3d948:	ldr	x23, [sp, #48]
   3d94c:	ldp	x29, x30, [sp], #80
   3d950:	ret
   3d954:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3d958:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   3d95c:	add	x1, x1, #0x288
   3d960:	add	x0, x0, #0x4b0
   3d964:	mov	w2, #0x200                 	// #512
   3d968:	bl	35ac0 <__assert_fail@plt>
   3d96c:	bl	3a980 <aarch64_opcode_encode@@Base+0x15f8>

000000000003d970 <aarch64_ext_addr_simm@@Base>:
   3d970:	stp	x29, x30, [sp, #-64]!
   3d974:	mov	x29, sp
   3d978:	stp	x19, x20, [sp, #16]
   3d97c:	mov	x19, x1
   3d980:	ldr	w1, [x1, #8]
   3d984:	stp	x21, x22, [sp, #32]
   3d988:	adrp	x21, a2000 <aarch64_operands@@Base+0x16bc0>
   3d98c:	mov	w22, w2
   3d990:	mov	x20, x0
   3d994:	mov	x0, x3
   3d998:	str	x23, [sp, #48]
   3d99c:	mov	x23, x3
   3d9a0:	bl	3aa98 <aarch64_opcode_encode@@Base+0x1710>
   3d9a4:	and	w6, w0, #0xff
   3d9a8:	ldr	x5, [x21, #3944]
   3d9ac:	strb	w6, [x19, #4]
   3d9b0:	mov	w4, #0xffffffff            	// #-1
   3d9b4:	ldr	w7, [x20, #20]
   3d9b8:	ldp	w2, w1, [x5, #112]
   3d9bc:	ubfiz	x3, x7, #3, #32
   3d9c0:	add	x8, x3, x5
   3d9c4:	lsr	w2, w22, w2
   3d9c8:	lsl	w1, w4, w1
   3d9cc:	bic	w1, w2, w1
   3d9d0:	str	w1, [x19, #16]
   3d9d4:	ldr	w2, [x3, x5]
   3d9d8:	ldr	w1, [x8, #4]
   3d9dc:	add	w3, w1, w4
   3d9e0:	lsr	w2, w22, w2
   3d9e4:	lsl	w4, w4, w1
   3d9e8:	cmp	w3, #0x1f
   3d9ec:	bic	w4, w2, w4
   3d9f0:	b.hi	3dae0 <aarch64_ext_addr_simm@@Base+0x170>  // b.pmore
   3d9f4:	mov	x1, #0x2                   	// #2
   3d9f8:	mov	x2, #0x1                   	// #1
   3d9fc:	lsl	x1, x1, x3
   3da00:	sub	x1, x1, #0x1
   3da04:	and	w4, w4, w1
   3da08:	lsl	x1, x2, x3
   3da0c:	eor	x4, x4, x1
   3da10:	cmp	w7, #0x2c
   3da14:	sub	x4, x4, x1
   3da18:	str	w4, [x19, #20]
   3da1c:	ccmp	w6, #0x19, #0x4, ne  // ne = any
   3da20:	b.ne	3da38 <aarch64_ext_addr_simm@@Base+0xc8>  // b.any
   3da24:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3da28:	and	w0, w0, #0xff
   3da2c:	ldr	w1, [x19, #20]
   3da30:	mul	w1, w1, w0
   3da34:	str	w1, [x19, #20]
   3da38:	ldr	x0, [x23, #8]
   3da3c:	ldr	w0, [x0, #16]
   3da40:	sub	w1, w0, #0x3a
   3da44:	sub	w0, w0, #0x3d
   3da48:	cmp	w1, #0x1
   3da4c:	ccmp	w0, #0x1, #0x0, hi  // hi = pmore
   3da50:	b.hi	3da78 <aarch64_ext_addr_simm@@Base+0x108>  // b.pmore
   3da54:	ldrb	w0, [x19, #28]
   3da58:	and	w0, w0, #0xfffffffd
   3da5c:	strb	w0, [x19, #28]
   3da60:	mov	w0, #0x1                   	// #1
   3da64:	ldp	x19, x20, [sp, #16]
   3da68:	ldp	x21, x22, [sp, #32]
   3da6c:	ldr	x23, [sp, #48]
   3da70:	ldp	x29, x30, [sp], #64
   3da74:	ret
   3da78:	ldrb	w3, [x19, #28]
   3da7c:	mov	w0, #0xffffffff            	// #-1
   3da80:	ldr	x21, [x21, #3944]
   3da84:	orr	w2, w3, #0x2
   3da88:	strb	w2, [x19, #28]
   3da8c:	ldr	w1, [x20, #24]
   3da90:	lsl	x1, x1, #3
   3da94:	add	x5, x1, x21
   3da98:	ldr	w4, [x1, x21]
   3da9c:	ldr	w1, [x5, #4]
   3daa0:	lsr	w22, w22, w4
   3daa4:	lsl	w0, w0, w1
   3daa8:	bic	w22, w22, w0
   3daac:	cmp	w22, #0x1
   3dab0:	b.eq	3dad4 <aarch64_ext_addr_simm@@Base+0x164>  // b.none
   3dab4:	orr	w2, w2, #0x8
   3dab8:	strb	w2, [x19, #28]
   3dabc:	mov	w0, #0x1                   	// #1
   3dac0:	ldp	x19, x20, [sp, #16]
   3dac4:	ldp	x21, x22, [sp, #32]
   3dac8:	ldr	x23, [sp, #48]
   3dacc:	ldp	x29, x30, [sp], #64
   3dad0:	ret
   3dad4:	orr	w3, w3, #0x6
   3dad8:	strb	w3, [x19, #28]
   3dadc:	b	3da60 <aarch64_ext_addr_simm@@Base+0xf0>
   3dae0:	bl	3a9a8 <aarch64_opcode_encode@@Base+0x1620>
   3dae4:	nop

000000000003dae8 <aarch64_ext_addr_uimm12@@Base>:
   3dae8:	stp	x29, x30, [sp, #-64]!
   3daec:	mov	x29, sp
   3daf0:	stp	x19, x20, [sp, #16]
   3daf4:	mov	x19, x1
   3daf8:	ldr	w1, [x1, #8]
   3dafc:	mov	w20, w2
   3db00:	str	x21, [sp, #32]
   3db04:	mov	x21, x0
   3db08:	mov	x0, x3
   3db0c:	bl	3aa98 <aarch64_opcode_encode@@Base+0x1710>
   3db10:	strb	w0, [x19, #4]
   3db14:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3db18:	and	w1, w0, #0xff
   3db1c:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3db20:	add	x3, x3, #0x388
   3db24:	add	x2, x3, #0x200
   3db28:	cmp	w1, #0x10
   3db2c:	ldp	x4, x5, [x2, #56]
   3db30:	stp	x4, x5, [sp, #48]
   3db34:	b.hi	3dbb4 <aarch64_ext_addr_uimm12@@Base+0xcc>  // b.pmore
   3db38:	sub	w1, w1, #0x1
   3db3c:	add	x0, sp, #0x30
   3db40:	ldrb	w6, [x0, w1, uxtw]
   3db44:	cmp	w6, #0xff
   3db48:	b.eq	3dbcc <aarch64_ext_addr_uimm12@@Base+0xe4>  // b.none
   3db4c:	ldp	w2, w4, [x21, #20]
   3db50:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3db54:	mov	w3, #0xffffffff            	// #-1
   3db58:	mov	w0, #0x1                   	// #1
   3db5c:	ldr	x1, [x1, #3944]
   3db60:	lsl	x2, x2, #3
   3db64:	lsl	x4, x4, #3
   3db68:	add	x8, x2, x1
   3db6c:	add	x7, x4, x1
   3db70:	ldr	w5, [x2, x1]
   3db74:	ldr	x21, [sp, #32]
   3db78:	ldr	w2, [x8, #4]
   3db7c:	lsr	w5, w20, w5
   3db80:	lsl	w2, w3, w2
   3db84:	bic	w2, w5, w2
   3db88:	str	w2, [x19, #16]
   3db8c:	ldr	w2, [x4, x1]
   3db90:	ldr	w1, [x7, #4]
   3db94:	lsr	w20, w20, w2
   3db98:	lsl	w3, w3, w1
   3db9c:	bic	w3, w20, w3
   3dba0:	lsl	w3, w3, w6
   3dba4:	str	w3, [x19, #20]
   3dba8:	ldp	x19, x20, [sp, #16]
   3dbac:	ldp	x29, x30, [sp], #64
   3dbb0:	ret
   3dbb4:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3dbb8:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   3dbbc:	add	x1, x1, #0x288
   3dbc0:	add	x0, x0, #0x4b0
   3dbc4:	mov	w2, #0x200                 	// #512
   3dbc8:	bl	35ac0 <__assert_fail@plt>
   3dbcc:	bl	3a980 <aarch64_opcode_encode@@Base+0x15f8>

000000000003dbd0 <aarch64_ext_addr_simm10@@Base>:
   3dbd0:	stp	x29, x30, [sp, #-64]!
   3dbd4:	mov	x29, sp
   3dbd8:	stp	x21, x22, [sp, #32]
   3dbdc:	mov	x22, x1
   3dbe0:	ldr	w1, [x1, #8]
   3dbe4:	mov	x21, x0
   3dbe8:	mov	x0, x3
   3dbec:	stp	x19, x20, [sp, #16]
   3dbf0:	mov	w19, w2
   3dbf4:	adrp	x20, a2000 <aarch64_operands@@Base+0x16bc0>
   3dbf8:	str	x23, [sp, #48]
   3dbfc:	bl	3aa98 <aarch64_opcode_encode@@Base+0x1710>
   3dc00:	strb	w0, [x22, #4]
   3dc04:	mov	w23, #0xffffffff            	// #-1
   3dc08:	ldr	x20, [x20, #3944]
   3dc0c:	mov	w0, w19
   3dc10:	ldp	w5, w3, [x21, #20]
   3dc14:	mov	w2, #0x2                   	// #2
   3dc18:	ldr	w4, [x21, #28]
   3dc1c:	mov	w1, #0x0                   	// #0
   3dc20:	lsl	x5, x5, #3
   3dc24:	add	x7, x5, x20
   3dc28:	ldr	w6, [x5, x20]
   3dc2c:	ldr	w5, [x7, #4]
   3dc30:	lsr	w6, w19, w6
   3dc34:	lsl	w5, w23, w5
   3dc38:	bic	w5, w6, w5
   3dc3c:	str	w5, [x22, #16]
   3dc40:	bl	35390 <extract_fields@plt>
   3dc44:	sbfiz	x0, x0, #3, #10
   3dc48:	ldr	w1, [x21, #32]
   3dc4c:	str	w0, [x22, #20]
   3dc50:	lsl	x0, x1, #3
   3dc54:	add	x1, x0, x20
   3dc58:	ldr	w2, [x0, x20]
   3dc5c:	ldr	w0, [x1, #4]
   3dc60:	lsr	w19, w19, w2
   3dc64:	lsl	w0, w23, w0
   3dc68:	bic	w19, w19, w0
   3dc6c:	cmp	w19, #0x1
   3dc70:	b.ne	3dc80 <aarch64_ext_addr_simm10@@Base+0xb0>  // b.any
   3dc74:	ldrb	w0, [x22, #28]
   3dc78:	orr	w0, w0, #0x6
   3dc7c:	strb	w0, [x22, #28]
   3dc80:	mov	w0, #0x1                   	// #1
   3dc84:	ldp	x19, x20, [sp, #16]
   3dc88:	ldp	x21, x22, [sp, #32]
   3dc8c:	ldr	x23, [sp, #48]
   3dc90:	ldp	x29, x30, [sp], #64
   3dc94:	ret

000000000003dc98 <aarch64_ext_simd_addr_post@@Base>:
   3dc98:	stp	x29, x30, [sp, #-48]!
   3dc9c:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   3dca0:	mov	w0, #0xffffffff            	// #-1
   3dca4:	mov	x29, sp
   3dca8:	ldr	x4, [x4, #3944]
   3dcac:	stp	x19, x20, [sp, #16]
   3dcb0:	mov	x19, x1
   3dcb4:	mov	x20, x3
   3dcb8:	ldr	w1, [x4, #116]
   3dcbc:	ldr	w6, [x4, #224]
   3dcc0:	ldr	x5, [x3, #8]
   3dcc4:	lsl	w1, w0, w1
   3dcc8:	ldr	w3, [x4, #112]
   3dccc:	ldr	w4, [x4, #228]
   3dcd0:	lsr	w3, w2, w3
   3dcd4:	bic	w1, w3, w1
   3dcd8:	lsl	w0, w0, w4
   3dcdc:	lsr	w2, w2, w6
   3dce0:	bic	w2, w2, w0
   3dce4:	ldr	x0, [x5, #120]
   3dce8:	stp	w1, w2, [x19, #16]
   3dcec:	cmp	w2, #0x1f
   3dcf0:	b.eq	3dd18 <aarch64_ext_simd_addr_post@@Base+0x80>  // b.none
   3dcf4:	ldrb	w1, [x19, #28]
   3dcf8:	mov	w0, #0x1                   	// #1
   3dcfc:	str	w0, [x19, #24]
   3dd00:	mov	w0, #0x1                   	// #1
   3dd04:	orr	w1, w1, #0x2
   3dd08:	strb	w1, [x19, #28]
   3dd0c:	ldp	x19, x20, [sp, #16]
   3dd10:	ldp	x29, x30, [sp], #48
   3dd14:	ret
   3dd18:	ldr	w1, [x5, #32]
   3dd1c:	str	x21, [sp, #32]
   3dd20:	cmp	w1, #0x25
   3dd24:	b.ne	3dd74 <aarch64_ext_simd_addr_post@@Base+0xdc>  // b.any
   3dd28:	ubfx	w0, w0, #24, #3
   3dd2c:	mov	w21, #0x1                   	// #1
   3dd30:	cmp	w0, w21
   3dd34:	b.eq	3dd40 <aarch64_ext_simd_addr_post@@Base+0xa8>  // b.none
   3dd38:	ldrb	w0, [x20, #40]
   3dd3c:	ubfx	x21, x0, #5, #3
   3dd40:	ldrb	w0, [x20, #28]
   3dd44:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3dd48:	and	w0, w0, #0xff
   3dd4c:	ldrb	w1, [x19, #28]
   3dd50:	mul	w0, w0, w21
   3dd54:	orr	w1, w1, #0x2
   3dd58:	ldr	x21, [sp, #32]
   3dd5c:	str	w0, [x19, #20]
   3dd60:	strb	w1, [x19, #28]
   3dd64:	mov	w0, #0x1                   	// #1
   3dd68:	ldp	x19, x20, [sp, #16]
   3dd6c:	ldp	x29, x30, [sp], #48
   3dd70:	ret
   3dd74:	ldrb	w0, [x20, #28]
   3dd78:	ldrb	w21, [x20, #40]
   3dd7c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3dd80:	mov	w1, w0
   3dd84:	ubfx	x21, x21, #5, #3
   3dd88:	ldrb	w0, [x20, #28]
   3dd8c:	and	w20, w1, #0xff
   3dd90:	mul	w20, w20, w21
   3dd94:	bl	358f0 <aarch64_get_qualifier_nelem@plt>
   3dd98:	and	w0, w0, #0xff
   3dd9c:	ldrb	w1, [x19, #28]
   3dda0:	ldr	x21, [sp, #32]
   3dda4:	orr	w1, w1, #0x2
   3dda8:	mul	w0, w0, w20
   3ddac:	strb	w1, [x19, #28]
   3ddb0:	str	w0, [x19, #20]
   3ddb4:	mov	w0, #0x1                   	// #1
   3ddb8:	ldp	x19, x20, [sp, #16]
   3ddbc:	ldp	x29, x30, [sp], #48
   3ddc0:	ret
   3ddc4:	nop

000000000003ddc8 <aarch64_ext_cond@@Base>:
   3ddc8:	stp	x29, x30, [sp, #-32]!
   3ddcc:	adrp	x3, a2000 <aarch64_operands@@Base+0x16bc0>
   3ddd0:	mov	w0, #0xffffffff            	// #-1
   3ddd4:	mov	x29, sp
   3ddd8:	ldr	x3, [x3, #3944]
   3dddc:	str	x19, [sp, #16]
   3dde0:	mov	x19, x1
   3dde4:	ldr	w4, [x3, #184]
   3dde8:	ldr	w1, [x3, #188]
   3ddec:	lsr	w2, w2, w4
   3ddf0:	lsl	w0, w0, w1
   3ddf4:	bic	w0, w2, w0
   3ddf8:	bl	35310 <get_cond_from_value@plt>
   3ddfc:	mov	x1, x0
   3de00:	str	x1, [x19, #16]
   3de04:	mov	w0, #0x1                   	// #1
   3de08:	ldr	x19, [sp, #16]
   3de0c:	ldp	x29, x30, [sp], #32
   3de10:	ret
   3de14:	nop

000000000003de18 <aarch64_ext_sysreg@@Base>:
   3de18:	stp	x29, x30, [sp, #-32]!
   3de1c:	mov	w0, w2
   3de20:	mov	w7, #0x11                  	// #17
   3de24:	mov	x29, sp
   3de28:	stp	x19, x20, [sp, #16]
   3de2c:	mov	x19, x1
   3de30:	mov	x20, x3
   3de34:	mov	w1, #0x0                   	// #0
   3de38:	mov	w6, #0x12                  	// #18
   3de3c:	mov	w5, #0x13                  	// #19
   3de40:	mov	w4, #0x14                  	// #20
   3de44:	mov	w3, #0x15                  	// #21
   3de48:	mov	w2, #0x5                   	// #5
   3de4c:	bl	35390 <extract_fields@plt>
   3de50:	str	w0, [x19, #16]
   3de54:	ldr	x0, [x20, #8]
   3de58:	ldr	w1, [x0, #16]
   3de5c:	str	wzr, [x19, #20]
   3de60:	cmp	w1, #0x46
   3de64:	b.eq	3de78 <aarch64_ext_sysreg@@Base+0x60>  // b.none
   3de68:	mov	w0, #0x1                   	// #1
   3de6c:	ldp	x19, x20, [sp, #16]
   3de70:	ldp	x29, x30, [sp], #32
   3de74:	ret
   3de78:	ldr	x0, [x0, #120]
   3de7c:	mov	x1, #0x20000000            	// #536870912
   3de80:	and	x0, x0, #0x60000000
   3de84:	cmp	x0, x1
   3de88:	b.eq	3dea4 <aarch64_ext_sysreg@@Base+0x8c>  // b.none
   3de8c:	mov	x1, #0x40000000            	// #1073741824
   3de90:	cmp	x0, x1
   3de94:	b.ne	3de68 <aarch64_ext_sysreg@@Base+0x50>  // b.any
   3de98:	mov	w0, #0x10                  	// #16
   3de9c:	str	w0, [x19, #20]
   3dea0:	b	3de68 <aarch64_ext_sysreg@@Base+0x50>
   3dea4:	mov	w0, #0x8                   	// #8
   3dea8:	str	w0, [x19, #20]
   3deac:	mov	w0, #0x1                   	// #1
   3deb0:	ldp	x19, x20, [sp, #16]
   3deb4:	ldp	x29, x30, [sp], #32
   3deb8:	ret
   3debc:	nop

000000000003dec0 <aarch64_ext_pstatefield@@Base>:
   3dec0:	stp	x29, x30, [sp, #-32]!
   3dec4:	mov	w0, w2
   3dec8:	mov	w4, #0x11                  	// #17
   3decc:	mov	x29, sp
   3ded0:	mov	w2, #0x2                   	// #2
   3ded4:	mov	w3, #0x14                  	// #20
   3ded8:	str	x19, [sp, #16]
   3dedc:	mov	x19, x1
   3dee0:	mov	w1, #0x0                   	// #0
   3dee4:	bl	35390 <extract_fields@plt>
   3dee8:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3deec:	str	w0, [x19, #16]
   3def0:	ldr	x1, [x1, #3832]
   3def4:	ldr	x2, [x1]
   3def8:	cbz	x2, 3df2c <aarch64_ext_pstatefield@@Base+0x6c>
   3defc:	add	x1, x1, #0x8
   3df00:	b	3df0c <aarch64_ext_pstatefield@@Base+0x4c>
   3df04:	ldur	x2, [x1, #-8]
   3df08:	cbz	x2, 3df2c <aarch64_ext_pstatefield@@Base+0x6c>
   3df0c:	ldr	w2, [x1]
   3df10:	add	x1, x1, #0x10
   3df14:	cmp	w0, w2
   3df18:	b.ne	3df04 <aarch64_ext_pstatefield@@Base+0x44>  // b.any
   3df1c:	mov	w0, #0x1                   	// #1
   3df20:	ldr	x19, [sp, #16]
   3df24:	ldp	x29, x30, [sp], #32
   3df28:	ret
   3df2c:	mov	w0, #0x0                   	// #0
   3df30:	ldr	x19, [sp, #16]
   3df34:	ldp	x29, x30, [sp], #32
   3df38:	ret
   3df3c:	nop

000000000003df40 <aarch64_ext_sysins_op@@Base>:
   3df40:	stp	x29, x30, [sp, #-32]!
   3df44:	mov	w0, w2
   3df48:	mov	w7, #0x11                  	// #17
   3df4c:	mov	x29, sp
   3df50:	str	x19, [sp, #16]
   3df54:	mov	x19, x1
   3df58:	mov	w2, #0x5                   	// #5
   3df5c:	mov	w6, #0x12                  	// #18
   3df60:	mov	w5, #0x13                  	// #19
   3df64:	mov	w4, #0x14                  	// #20
   3df68:	mov	w3, #0x15                  	// #21
   3df6c:	mov	w1, #0x0                   	// #0
   3df70:	bl	35390 <extract_fields@plt>
   3df74:	ldr	w2, [x19]
   3df78:	cmp	w2, #0x63
   3df7c:	b.eq	3e018 <aarch64_ext_sysins_op@@Base+0xd8>  // b.none
   3df80:	b.hi	3dfd0 <aarch64_ext_sysins_op@@Base+0x90>  // b.pmore
   3df84:	cmp	w2, #0x61
   3df88:	b.eq	3e000 <aarch64_ext_sysins_op@@Base+0xc0>  // b.none
   3df8c:	cmp	w2, #0x62
   3df90:	b.ne	3e024 <aarch64_ext_sysins_op@@Base+0xe4>  // b.any
   3df94:	adrp	x2, a2000 <aarch64_operands@@Base+0x16bc0>
   3df98:	ldr	x2, [x2, #3920]
   3df9c:	ldr	x1, [x2]
   3dfa0:	cbnz	x1, 3dfb0 <aarch64_ext_sysins_op@@Base+0x70>
   3dfa4:	b	3dff0 <aarch64_ext_sysins_op@@Base+0xb0>
   3dfa8:	ldr	x3, [x2, #16]!
   3dfac:	cbz	x3, 3dff0 <aarch64_ext_sysins_op@@Base+0xb0>
   3dfb0:	ldr	w3, [x2, #8]
   3dfb4:	cmp	w3, w0
   3dfb8:	b.ne	3dfa8 <aarch64_ext_sysins_op@@Base+0x68>  // b.any
   3dfbc:	str	x2, [x19, #16]
   3dfc0:	mov	w0, #0x1                   	// #1
   3dfc4:	ldr	x19, [sp, #16]
   3dfc8:	ldp	x29, x30, [sp], #32
   3dfcc:	ret
   3dfd0:	cmp	w2, #0x64
   3dfd4:	b.eq	3e00c <aarch64_ext_sysins_op@@Base+0xcc>  // b.none
   3dfd8:	cmp	w2, #0x65
   3dfdc:	b.ne	3e024 <aarch64_ext_sysins_op@@Base+0xe4>  // b.any
   3dfe0:	adrp	x2, a2000 <aarch64_operands@@Base+0x16bc0>
   3dfe4:	and	w0, w0, #0xfffffff8
   3dfe8:	ldr	x2, [x2, #4064]
   3dfec:	b	3df9c <aarch64_ext_sysins_op@@Base+0x5c>
   3dff0:	mov	w0, #0x0                   	// #0
   3dff4:	ldr	x19, [sp, #16]
   3dff8:	ldp	x29, x30, [sp], #32
   3dffc:	ret
   3e000:	adrp	x2, a2000 <aarch64_operands@@Base+0x16bc0>
   3e004:	ldr	x2, [x2, #3992]
   3e008:	b	3df9c <aarch64_ext_sysins_op@@Base+0x5c>
   3e00c:	adrp	x2, a2000 <aarch64_operands@@Base+0x16bc0>
   3e010:	ldr	x2, [x2, #3896]
   3e014:	b	3df9c <aarch64_ext_sysins_op@@Base+0x5c>
   3e018:	adrp	x2, a2000 <aarch64_operands@@Base+0x16bc0>
   3e01c:	ldr	x2, [x2, #3888]
   3e020:	b	3df9c <aarch64_ext_sysins_op@@Base+0x5c>
   3e024:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3e028:	add	x3, x3, #0x388
   3e02c:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3e030:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   3e034:	add	x3, x3, #0x3d0
   3e038:	add	x1, x1, #0xc48
   3e03c:	add	x0, x0, #0x4b0
   3e040:	mov	w2, #0x4e6                 	// #1254
   3e044:	bl	35ac0 <__assert_fail@plt>

000000000003e048 <aarch64_ext_barrier@@Base>:
   3e048:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   3e04c:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   3e050:	mov	w3, #0xffffffff            	// #-1
   3e054:	ldr	x4, [x4, #3944]
   3e058:	ldr	x5, [x0, #4040]
   3e05c:	mov	w0, #0x1                   	// #1
   3e060:	ldp	w6, w4, [x4, #144]
   3e064:	lsr	w2, w2, w6
   3e068:	lsl	w3, w3, w4
   3e06c:	bic	w3, w2, w3
   3e070:	add	x3, x5, x3, lsl #4
   3e074:	str	x3, [x1, #16]
   3e078:	ret
   3e07c:	nop

000000000003e080 <aarch64_ext_prfop@@Base>:
   3e080:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   3e084:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   3e088:	mov	w3, #0xffffffff            	// #-1
   3e08c:	ldr	x4, [x4, #3944]
   3e090:	ldr	x5, [x0, #3960]
   3e094:	mov	w0, #0x1                   	// #1
   3e098:	ldp	w6, w4, [x4, #96]
   3e09c:	lsr	w2, w2, w6
   3e0a0:	lsl	w3, w3, w4
   3e0a4:	bic	w3, w2, w3
   3e0a8:	add	x3, x5, x3, lsl #4
   3e0ac:	str	x3, [x1, #16]
   3e0b0:	ret
   3e0b4:	nop

000000000003e0b8 <aarch64_ext_hint@@Base>:
   3e0b8:	stp	x29, x30, [sp, #-32]!
   3e0bc:	mov	w0, w2
   3e0c0:	mov	w3, #0x12                  	// #18
   3e0c4:	mov	x29, sp
   3e0c8:	mov	w2, #0x2                   	// #2
   3e0cc:	mov	w4, #0x11                  	// #17
   3e0d0:	str	x19, [sp, #16]
   3e0d4:	mov	x19, x1
   3e0d8:	mov	w1, #0x0                   	// #0
   3e0dc:	bl	35390 <extract_fields@plt>
   3e0e0:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3e0e4:	ldr	x2, [x1, #4016]
   3e0e8:	ldr	x3, [x2]
   3e0ec:	cbz	x3, 3e134 <aarch64_ext_hint@@Base+0x7c>
   3e0f0:	add	x2, x2, #0x8
   3e0f4:	mov	w3, #0x0                   	// #0
   3e0f8:	b	3e108 <aarch64_ext_hint@@Base+0x50>
   3e0fc:	ldur	x4, [x2, #-8]
   3e100:	add	w3, w3, #0x1
   3e104:	cbz	x4, 3e134 <aarch64_ext_hint@@Base+0x7c>
   3e108:	ldrb	w4, [x2]
   3e10c:	add	x2, x2, #0x10
   3e110:	cmp	w4, w0
   3e114:	b.ne	3e0fc <aarch64_ext_hint@@Base+0x44>  // b.any
   3e118:	ldr	x1, [x1, #4016]
   3e11c:	mov	w0, #0x1                   	// #1
   3e120:	add	x3, x1, w3, sxtw #4
   3e124:	str	x3, [x19, #16]
   3e128:	ldr	x19, [sp, #16]
   3e12c:	ldp	x29, x30, [sp], #32
   3e130:	ret
   3e134:	mov	w0, #0x0                   	// #0
   3e138:	ldr	x19, [sp, #16]
   3e13c:	ldp	x29, x30, [sp], #32
   3e140:	ret
   3e144:	nop

000000000003e148 <aarch64_ext_reg_extended@@Base>:
   3e148:	stp	x29, x30, [sp, #-64]!
   3e14c:	mov	x29, sp
   3e150:	stp	x19, x20, [sp, #16]
   3e154:	adrp	x20, a2000 <aarch64_operands@@Base+0x16bc0>
   3e158:	mov	x19, x1
   3e15c:	ldr	x20, [x20, #3944]
   3e160:	stp	x21, x22, [sp, #32]
   3e164:	mov	w22, w2
   3e168:	mov	w21, #0xffffffff            	// #-1
   3e16c:	str	x23, [sp, #48]
   3e170:	ldp	w4, w2, [x20, #224]
   3e174:	mov	x23, x3
   3e178:	ldr	w0, [x20, #240]
   3e17c:	mov	w1, #0x1                   	// #1
   3e180:	ldr	w3, [x20, #244]
   3e184:	lsr	w4, w22, w4
   3e188:	lsl	w2, w21, w2
   3e18c:	bic	w2, w4, w2
   3e190:	str	w2, [x19, #16]
   3e194:	lsr	w2, w22, w0
   3e198:	lsl	w0, w21, w3
   3e19c:	bic	w0, w2, w0
   3e1a0:	bl	35bb0 <aarch64_get_operand_modifier_from_value@plt>
   3e1a4:	str	w0, [x19, #32]
   3e1a8:	ldp	w2, w3, [x20, #176]
   3e1ac:	ldrb	w1, [x19, #36]
   3e1b0:	lsr	w22, w22, w2
   3e1b4:	orr	w1, w1, #0x1
   3e1b8:	lsl	w21, w21, w3
   3e1bc:	bic	w21, w22, w21
   3e1c0:	strb	w1, [x19, #36]
   3e1c4:	str	x21, [x19, #40]
   3e1c8:	ldrb	w1, [x23, #28]
   3e1cc:	cbz	w1, 3e224 <aarch64_ext_reg_extended@@Base+0xdc>
   3e1d0:	mov	w1, #0x1                   	// #1
   3e1d4:	strb	w1, [x19, #4]
   3e1d8:	ldrb	w1, [x23, #28]
   3e1dc:	cmp	w1, #0x2
   3e1e0:	b.eq	3e1fc <aarch64_ext_reg_extended@@Base+0xb4>  // b.none
   3e1e4:	mov	w0, #0x1                   	// #1
   3e1e8:	ldp	x19, x20, [sp, #16]
   3e1ec:	ldp	x21, x22, [sp, #32]
   3e1f0:	ldr	x23, [sp, #48]
   3e1f4:	ldp	x29, x30, [sp], #64
   3e1f8:	ret
   3e1fc:	and	w0, w0, #0xfffffffb
   3e200:	cmp	w0, #0x9
   3e204:	b.ne	3e1e4 <aarch64_ext_reg_extended@@Base+0x9c>  // b.any
   3e208:	strb	w1, [x19, #4]
   3e20c:	mov	w0, #0x1                   	// #1
   3e210:	ldp	x19, x20, [sp, #16]
   3e214:	ldp	x21, x22, [sp, #32]
   3e218:	ldr	x23, [sp, #48]
   3e21c:	ldp	x29, x30, [sp], #64
   3e220:	ret
   3e224:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3e228:	add	x3, x3, #0x388
   3e22c:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3e230:	adrp	x0, 58000 <xexit@@Base+0xe08>
   3e234:	add	x3, x3, #0x3e8
   3e238:	add	x1, x1, #0xc48
   3e23c:	add	x0, x0, #0x80
   3e240:	mov	w2, #0x547                 	// #1351
   3e244:	bl	35ac0 <__assert_fail@plt>

000000000003e248 <aarch64_ext_reg_shifted@@Base>:
   3e248:	stp	x29, x30, [sp, #-48]!
   3e24c:	mov	w4, #0xffffffff            	// #-1
   3e250:	mov	x29, sp
   3e254:	stp	x21, x22, [sp, #32]
   3e258:	adrp	x21, a2000 <aarch64_operands@@Base+0x16bc0>
   3e25c:	mov	x22, x3
   3e260:	ldr	x5, [x21, #3944]
   3e264:	stp	x19, x20, [sp, #16]
   3e268:	mov	w20, w2
   3e26c:	mov	x19, x1
   3e270:	mov	w1, #0x0                   	// #0
   3e274:	ldp	w3, w2, [x5, #224]
   3e278:	ldr	w0, [x5, #280]
   3e27c:	ldr	w5, [x5, #284]
   3e280:	lsr	w3, w20, w3
   3e284:	lsl	w2, w4, w2
   3e288:	bic	w2, w3, w2
   3e28c:	lsl	w4, w4, w5
   3e290:	str	w2, [x19, #16]
   3e294:	lsr	w0, w20, w0
   3e298:	bic	w0, w0, w4
   3e29c:	bl	35bb0 <aarch64_get_operand_modifier_from_value@plt>
   3e2a0:	str	w0, [x19, #32]
   3e2a4:	cmp	w0, #0x2
   3e2a8:	b.eq	3e2ec <aarch64_ext_reg_shifted@@Base+0xa4>  // b.none
   3e2ac:	ldr	x21, [x21, #3944]
   3e2b0:	mov	w2, #0xffffffff            	// #-1
   3e2b4:	ldrb	w1, [x19, #36]
   3e2b8:	mov	w0, #0x1                   	// #1
   3e2bc:	ldr	w4, [x21, #304]
   3e2c0:	orr	w1, w1, w0
   3e2c4:	ldr	w3, [x21, #308]
   3e2c8:	strb	w1, [x19, #36]
   3e2cc:	lsr	w20, w20, w4
   3e2d0:	lsl	w2, w2, w3
   3e2d4:	bic	w20, w20, w2
   3e2d8:	str	x20, [x19, #40]
   3e2dc:	ldp	x19, x20, [sp, #16]
   3e2e0:	ldp	x21, x22, [sp, #32]
   3e2e4:	ldp	x29, x30, [sp], #48
   3e2e8:	ret
   3e2ec:	ldr	x1, [x22, #8]
   3e2f0:	mov	w0, #0x0                   	// #0
   3e2f4:	ldr	w1, [x1, #16]
   3e2f8:	cmp	w1, #0x42
   3e2fc:	b.eq	3e2ac <aarch64_ext_reg_shifted@@Base+0x64>  // b.none
   3e300:	ldp	x19, x20, [sp, #16]
   3e304:	ldp	x21, x22, [sp, #32]
   3e308:	ldp	x29, x30, [sp], #48
   3e30c:	ret

000000000003e310 <aarch64_ext_sve_addr_ri_s4xvl@@Base>:
   3e310:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   3e314:	ldr	w7, [x0, #20]
   3e318:	mov	w4, #0xffffffff            	// #-1
   3e31c:	ldrb	w6, [x1, #28]
   3e320:	ldr	x5, [x5, #3944]
   3e324:	lsl	x7, x7, #3
   3e328:	and	w6, w6, #0xfffffff9
   3e32c:	add	x9, x7, x5
   3e330:	ldr	w8, [x5, #776]
   3e334:	ldr	w3, [x5, #780]
   3e338:	ldr	w5, [x7, x5]
   3e33c:	ldr	w7, [x9, #4]
   3e340:	lsr	w8, w2, w8
   3e344:	lsl	w3, w4, w3
   3e348:	bic	w3, w8, w3
   3e34c:	lsr	w5, w2, w5
   3e350:	add	w3, w3, #0x8
   3e354:	lsl	w4, w4, w7
   3e358:	bic	w4, w5, w4
   3e35c:	str	w4, [x1, #16]
   3e360:	and	w2, w3, #0xf
   3e364:	sub	w2, w2, #0x8
   3e368:	orr	w3, w6, #0x4
   3e36c:	ldr	w0, [x0, #16]
   3e370:	strb	w3, [x1, #28]
   3e374:	ubfx	x0, x0, #5, #3
   3e378:	madd	w0, w0, w2, w2
   3e37c:	stp	w0, wzr, [x1, #20]
   3e380:	cbz	w2, 3e38c <aarch64_ext_sve_addr_ri_s4xvl@@Base+0x7c>
   3e384:	mov	w2, #0xf                   	// #15
   3e388:	str	w2, [x1, #32]
   3e38c:	ldrb	w2, [x1, #36]
   3e390:	cmp	w0, #0x0
   3e394:	cset	w4, ne  // ne = any
   3e398:	mov	x3, #0x1                   	// #1
   3e39c:	and	w2, w2, #0xfffffffc
   3e3a0:	mov	w0, w3
   3e3a4:	orr	w2, w2, w4
   3e3a8:	strb	w2, [x1, #36]
   3e3ac:	str	x3, [x1, #40]
   3e3b0:	ret
   3e3b4:	nop

000000000003e3b8 <aarch64_ext_sve_addr_ri_s6xvl@@Base>:
   3e3b8:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   3e3bc:	ldr	w7, [x0, #20]
   3e3c0:	mov	w4, #0xffffffff            	// #-1
   3e3c4:	ldrb	w6, [x1, #28]
   3e3c8:	ldr	x5, [x5, #3944]
   3e3cc:	lsl	x7, x7, #3
   3e3d0:	and	w6, w6, #0xfffffff9
   3e3d4:	add	x9, x7, x5
   3e3d8:	ldr	w8, [x5, #800]
   3e3dc:	ldr	w3, [x5, #804]
   3e3e0:	ldr	w5, [x7, x5]
   3e3e4:	ldr	w7, [x9, #4]
   3e3e8:	lsr	w8, w2, w8
   3e3ec:	lsl	w3, w4, w3
   3e3f0:	bic	w3, w8, w3
   3e3f4:	lsr	w5, w2, w5
   3e3f8:	add	w3, w3, #0x20
   3e3fc:	lsl	w4, w4, w7
   3e400:	bic	w4, w5, w4
   3e404:	str	w4, [x1, #16]
   3e408:	and	w2, w3, #0x3f
   3e40c:	sub	w2, w2, #0x20
   3e410:	orr	w3, w6, #0x4
   3e414:	ldr	w0, [x0, #16]
   3e418:	strb	w3, [x1, #28]
   3e41c:	ubfx	x0, x0, #5, #3
   3e420:	madd	w0, w0, w2, w2
   3e424:	stp	w0, wzr, [x1, #20]
   3e428:	cbz	w2, 3e434 <aarch64_ext_sve_addr_ri_s6xvl@@Base+0x7c>
   3e42c:	mov	w2, #0xf                   	// #15
   3e430:	str	w2, [x1, #32]
   3e434:	ldrb	w2, [x1, #36]
   3e438:	cmp	w0, #0x0
   3e43c:	cset	w4, ne  // ne = any
   3e440:	mov	x3, #0x1                   	// #1
   3e444:	and	w2, w2, #0xfffffffc
   3e448:	mov	w0, w3
   3e44c:	orr	w2, w2, w4
   3e450:	strb	w2, [x1, #36]
   3e454:	str	x3, [x1, #40]
   3e458:	ret
   3e45c:	nop

000000000003e460 <aarch64_ext_sve_addr_ri_s9xvl@@Base>:
   3e460:	stp	x29, x30, [sp, #-48]!
   3e464:	mov	w4, #0x16                  	// #22
   3e468:	mov	w3, #0x64                  	// #100
   3e46c:	mov	x29, sp
   3e470:	str	x21, [sp, #32]
   3e474:	mov	x21, x0
   3e478:	mov	w0, w2
   3e47c:	stp	x19, x20, [sp, #16]
   3e480:	mov	x19, x1
   3e484:	mov	w20, w2
   3e488:	mov	w1, #0x0                   	// #0
   3e48c:	mov	w2, #0x2                   	// #2
   3e490:	bl	35390 <extract_fields@plt>
   3e494:	adrp	x2, a2000 <aarch64_operands@@Base+0x16bc0>
   3e498:	ldr	w3, [x21, #20]
   3e49c:	add	w1, w0, #0x100
   3e4a0:	mov	w4, #0xffffffff            	// #-1
   3e4a4:	ldr	x2, [x2, #3944]
   3e4a8:	lsl	x0, x3, #3
   3e4ac:	and	w1, w1, #0x1ff
   3e4b0:	ldrb	w3, [x19, #28]
   3e4b4:	add	x5, x0, x2
   3e4b8:	sub	w1, w1, #0x100
   3e4bc:	ldr	w2, [x0, x2]
   3e4c0:	and	w3, w3, #0xfffffff9
   3e4c4:	orr	w3, w3, #0x4
   3e4c8:	ldr	w0, [x5, #4]
   3e4cc:	lsr	w20, w20, w2
   3e4d0:	lsl	w4, w4, w0
   3e4d4:	bic	w20, w20, w4
   3e4d8:	str	w20, [x19, #16]
   3e4dc:	ldr	w0, [x21, #16]
   3e4e0:	strb	w3, [x19, #28]
   3e4e4:	ubfx	x0, x0, #5, #3
   3e4e8:	madd	w0, w0, w1, w1
   3e4ec:	stp	w0, wzr, [x19, #20]
   3e4f0:	cbz	w1, 3e4fc <aarch64_ext_sve_addr_ri_s9xvl@@Base+0x9c>
   3e4f4:	mov	w1, #0xf                   	// #15
   3e4f8:	str	w1, [x19, #32]
   3e4fc:	ldrb	w1, [x19, #36]
   3e500:	cmp	w0, #0x0
   3e504:	cset	w3, ne  // ne = any
   3e508:	mov	x2, #0x1                   	// #1
   3e50c:	and	w1, w1, #0xfffffffc
   3e510:	mov	w0, w2
   3e514:	orr	w1, w1, w3
   3e518:	strb	w1, [x19, #36]
   3e51c:	ldr	x21, [sp, #32]
   3e520:	str	x2, [x19, #40]
   3e524:	ldp	x19, x20, [sp, #16]
   3e528:	ldp	x29, x30, [sp], #48
   3e52c:	ret

000000000003e530 <aarch64_ext_sve_addr_ri_s4@@Base>:
   3e530:	mov	x7, x0
   3e534:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   3e538:	mov	w4, #0xffffffff            	// #-1
   3e53c:	ldrb	w6, [x1, #28]
   3e540:	ldr	x5, [x5, #3944]
   3e544:	and	w6, w6, #0xfffffff9
   3e548:	ldr	w8, [x7, #20]
   3e54c:	mov	w0, #0x1                   	// #1
   3e550:	ldrb	w9, [x1, #36]
   3e554:	ldr	w10, [x5, #776]
   3e558:	lsl	x8, x8, #3
   3e55c:	ldr	w3, [x5, #780]
   3e560:	add	x11, x8, x5
   3e564:	lsr	w10, w2, w10
   3e568:	ldr	w5, [x8, x5]
   3e56c:	lsl	w3, w4, w3
   3e570:	ldr	w11, [x11, #4]
   3e574:	bic	w3, w10, w3
   3e578:	and	w8, w9, #0xfffffffc
   3e57c:	lsr	w5, w2, w5
   3e580:	sbfx	x2, x3, #0, #4
   3e584:	lsl	w4, w4, w11
   3e588:	bic	w4, w5, w4
   3e58c:	str	w4, [x1, #16]
   3e590:	orr	w3, w6, #0x4
   3e594:	ldr	w4, [x7, #16]
   3e598:	strb	w3, [x1, #28]
   3e59c:	strb	w8, [x1, #36]
   3e5a0:	ubfx	x3, x4, #5, #3
   3e5a4:	lsl	w2, w2, w3
   3e5a8:	stp	w2, wzr, [x1, #20]
   3e5ac:	ret

000000000003e5b0 <aarch64_ext_sve_addr_ri_u6@@Base>:
   3e5b0:	mov	x7, x0
   3e5b4:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   3e5b8:	mov	w4, #0xffffffff            	// #-1
   3e5bc:	ldrb	w6, [x1, #28]
   3e5c0:	ldr	x5, [x5, #3944]
   3e5c4:	mov	w0, #0x1                   	// #1
   3e5c8:	ldr	w8, [x7, #20]
   3e5cc:	ldrb	w9, [x1, #36]
   3e5d0:	ldr	w10, [x5, #800]
   3e5d4:	lsl	x8, x8, #3
   3e5d8:	ldr	w3, [x5, #804]
   3e5dc:	add	x12, x8, x5
   3e5e0:	lsr	w10, w2, w10
   3e5e4:	ldr	w11, [x8, x5]
   3e5e8:	lsl	w3, w4, w3
   3e5ec:	ldr	w8, [x12, #4]
   3e5f0:	bic	w3, w10, w3
   3e5f4:	and	w5, w6, #0xfffffff9
   3e5f8:	and	w6, w9, #0xfffffffc
   3e5fc:	lsr	w2, w2, w11
   3e600:	orr	w5, w5, #0x4
   3e604:	lsl	w4, w4, w8
   3e608:	bic	w4, w2, w4
   3e60c:	str	w4, [x1, #16]
   3e610:	ldr	w2, [x7, #16]
   3e614:	strb	w5, [x1, #28]
   3e618:	strb	w6, [x1, #36]
   3e61c:	ubfx	x2, x2, #5, #3
   3e620:	lsl	w2, w3, w2
   3e624:	stp	w2, wzr, [x1, #20]
   3e628:	ret
   3e62c:	nop

000000000003e630 <aarch64_ext_sve_addr_rr_lsl@@Base>:
   3e630:	mov	x8, x0
   3e634:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   3e638:	mov	w4, #0xffffffff            	// #-1
   3e63c:	ldr	x0, [x5, #3944]
   3e640:	ldr	w3, [x8, #24]
   3e644:	lsl	x3, x3, #3
   3e648:	add	x6, x3, x0
   3e64c:	ldr	w0, [x3, x0]
   3e650:	ldr	w3, [x6, #4]
   3e654:	lsr	w0, w2, w0
   3e658:	lsl	w3, w4, w3
   3e65c:	bic	w3, w0, w3
   3e660:	cmp	w3, #0x1f
   3e664:	b.eq	3e6e4 <aarch64_ext_sve_addr_rr_lsl@@Base+0xb4>  // b.none
   3e668:	ldr	w0, [x8, #20]
   3e66c:	mov	w7, #0xffffffff            	// #-1
   3e670:	ldr	x5, [x5, #3944]
   3e674:	mov	w9, #0x1                   	// #1
   3e678:	lsl	x0, x0, #3
   3e67c:	ldrb	w6, [x1, #28]
   3e680:	add	x12, x0, x5
   3e684:	mov	w10, #0x5                   	// #5
   3e688:	and	w6, w6, #0xfffffff9
   3e68c:	ldrb	w4, [x1, #36]
   3e690:	ldr	w11, [x0, x5]
   3e694:	orr	w5, w6, #0x4
   3e698:	ldr	w6, [x12, #4]
   3e69c:	mov	w0, w9
   3e6a0:	stp	w3, w9, [x1, #20]
   3e6a4:	lsr	w2, w2, w11
   3e6a8:	strb	w5, [x1, #28]
   3e6ac:	lsl	w3, w7, w6
   3e6b0:	bic	w2, w2, w3
   3e6b4:	str	w2, [x1, #16]
   3e6b8:	str	w10, [x1, #32]
   3e6bc:	ldr	w2, [x8, #16]
   3e6c0:	ubfx	x2, x2, #5, #3
   3e6c4:	str	x2, [x1, #40]
   3e6c8:	cmp	x2, #0x0
   3e6cc:	cset	w3, ne  // ne = any
   3e6d0:	bfxil	w4, w3, #0, #1
   3e6d4:	mov	w2, w4
   3e6d8:	bfi	w2, w3, #1, #1
   3e6dc:	strb	w2, [x1, #36]
   3e6e0:	ret
   3e6e4:	ldr	w4, [x8, #16]
   3e6e8:	mov	w0, #0x0                   	// #0
   3e6ec:	tbz	w4, #8, 3e668 <aarch64_ext_sve_addr_rr_lsl@@Base+0x38>
   3e6f0:	ret
   3e6f4:	nop

000000000003e6f8 <aarch64_ext_sve_addr_rz_xtw@@Base>:
   3e6f8:	mov	x4, x0
   3e6fc:	adrp	x3, a2000 <aarch64_operands@@Base+0x16bc0>
   3e700:	ldp	w0, w9, [x0, #20]
   3e704:	mov	w5, #0xffffffff            	// #-1
   3e708:	ldr	x3, [x3, #3944]
   3e70c:	mov	w12, #0x8                   	// #8
   3e710:	lsl	x0, x0, #3
   3e714:	lsl	x9, x9, #3
   3e718:	add	x6, x0, x3
   3e71c:	add	x14, x9, x3
   3e720:	ldr	w8, [x4, #28]
   3e724:	mov	w11, #0xc                   	// #12
   3e728:	ldr	w10, [x0, x3]
   3e72c:	mov	w0, #0x1                   	// #1
   3e730:	ldr	w6, [x6, #4]
   3e734:	ldrb	w7, [x1, #28]
   3e738:	lsl	x8, x8, #3
   3e73c:	lsr	w10, w2, w10
   3e740:	add	x13, x8, x3
   3e744:	lsl	w6, w5, w6
   3e748:	bic	w6, w10, w6
   3e74c:	str	w6, [x1, #16]
   3e750:	and	w7, w7, #0xfffffff9
   3e754:	orr	w7, w7, #0x4
   3e758:	ldrb	w10, [x1, #36]
   3e75c:	ldr	w9, [x9, x3]
   3e760:	ldr	w6, [x14, #4]
   3e764:	strb	w7, [x1, #28]
   3e768:	lsr	w9, w2, w9
   3e76c:	lsl	w6, w5, w6
   3e770:	bic	w6, w9, w6
   3e774:	stp	w6, w0, [x1, #20]
   3e778:	ldr	w6, [x8, x3]
   3e77c:	ldr	w3, [x13, #4]
   3e780:	lsr	w2, w2, w6
   3e784:	lsl	w5, w5, w3
   3e788:	bics	wzr, w2, w5
   3e78c:	csel	w11, w11, w12, ne  // ne = any
   3e790:	str	w11, [x1, #32]
   3e794:	ldr	w2, [x4, #16]
   3e798:	ubfx	x2, x2, #5, #3
   3e79c:	str	x2, [x1, #40]
   3e7a0:	cmp	x2, #0x0
   3e7a4:	cset	w2, ne  // ne = any
   3e7a8:	ubfiz	w2, w2, #1, #7
   3e7ac:	orr	w2, w2, w0
   3e7b0:	bfxil	w10, w2, #0, #2
   3e7b4:	strb	w10, [x1, #36]
   3e7b8:	ret
   3e7bc:	nop

000000000003e7c0 <aarch64_ext_sve_addr_zi_u5@@Base>:
   3e7c0:	mov	x7, x0
   3e7c4:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   3e7c8:	mov	w4, #0xffffffff            	// #-1
   3e7cc:	ldrb	w6, [x1, #28]
   3e7d0:	ldr	x5, [x5, #3944]
   3e7d4:	mov	w0, #0x1                   	// #1
   3e7d8:	ldr	w8, [x7, #20]
   3e7dc:	ldrb	w9, [x1, #36]
   3e7e0:	ldr	w10, [x5, #344]
   3e7e4:	lsl	x8, x8, #3
   3e7e8:	ldr	w3, [x5, #348]
   3e7ec:	add	x12, x8, x5
   3e7f0:	lsr	w10, w2, w10
   3e7f4:	ldr	w11, [x8, x5]
   3e7f8:	lsl	w3, w4, w3
   3e7fc:	ldr	w8, [x12, #4]
   3e800:	bic	w3, w10, w3
   3e804:	and	w5, w6, #0xfffffff9
   3e808:	and	w6, w9, #0xfffffffc
   3e80c:	lsr	w2, w2, w11
   3e810:	orr	w5, w5, #0x4
   3e814:	lsl	w4, w4, w8
   3e818:	bic	w4, w2, w4
   3e81c:	str	w4, [x1, #16]
   3e820:	ldr	w2, [x7, #16]
   3e824:	strb	w5, [x1, #28]
   3e828:	strb	w6, [x1, #36]
   3e82c:	ubfx	x2, x2, #5, #3
   3e830:	lsl	w2, w3, w2
   3e834:	stp	w2, wzr, [x1, #20]
   3e838:	ret
   3e83c:	nop

000000000003e840 <aarch64_ext_sve_addr_zz_lsl@@Base>:
   3e840:	mov	w3, w2
   3e844:	mov	x2, x1
   3e848:	ldp	w0, w1, [x0, #20]
   3e84c:	mov	w4, #0x5                   	// #5
   3e850:	b	3a868 <aarch64_opcode_encode@@Base+0x14e0>
   3e854:	nop

000000000003e858 <aarch64_ext_sve_addr_zz_sxtw@@Base>:
   3e858:	mov	w3, w2
   3e85c:	mov	x2, x1
   3e860:	ldp	w0, w1, [x0, #20]
   3e864:	mov	w4, #0xc                   	// #12
   3e868:	b	3a868 <aarch64_opcode_encode@@Base+0x14e0>
   3e86c:	nop

000000000003e870 <aarch64_ext_sve_addr_zz_uxtw@@Base>:
   3e870:	mov	w3, w2
   3e874:	mov	x2, x1
   3e878:	ldp	w0, w1, [x0, #20]
   3e87c:	mov	w4, #0x8                   	// #8
   3e880:	b	3a868 <aarch64_opcode_encode@@Base+0x14e0>
   3e884:	nop

000000000003e888 <aarch64_ext_sve_aimm@@Base>:
   3e888:	stp	x29, x30, [sp, #-32]!
   3e88c:	mov	x29, sp
   3e890:	str	x19, [sp, #16]
   3e894:	mov	x19, x1
   3e898:	bl	35720 <aarch64_ext_imm@plt>
   3e89c:	cbz	w0, 3e8d4 <aarch64_ext_sve_aimm@@Base+0x4c>
   3e8a0:	ldr	x0, [x19, #16]
   3e8a4:	mov	w1, #0x5                   	// #5
   3e8a8:	str	w1, [x19, #32]
   3e8ac:	mov	w2, #0x0                   	// #0
   3e8b0:	str	xzr, [x19, #40]
   3e8b4:	and	x3, x0, #0xff
   3e8b8:	tbnz	w0, #8, 3e8e0 <aarch64_ext_sve_aimm@@Base+0x58>
   3e8bc:	ldrb	w1, [x19, #36]
   3e8c0:	mov	w0, #0x1                   	// #1
   3e8c4:	str	x3, [x19, #16]
   3e8c8:	bfxil	w1, w2, #0, #1
   3e8cc:	bfi	w1, w2, #1, #1
   3e8d0:	strb	w1, [x19, #36]
   3e8d4:	ldr	x19, [sp, #16]
   3e8d8:	ldp	x29, x30, [sp], #32
   3e8dc:	ret
   3e8e0:	cbnz	x3, 3e8f4 <aarch64_ext_sve_aimm@@Base+0x6c>
   3e8e4:	mov	x0, #0x8                   	// #8
   3e8e8:	mov	w2, #0x1                   	// #1
   3e8ec:	str	x0, [x19, #40]
   3e8f0:	b	3e8bc <aarch64_ext_sve_aimm@@Base+0x34>
   3e8f4:	lsl	x3, x3, #8
   3e8f8:	b	3e8bc <aarch64_ext_sve_aimm@@Base+0x34>
   3e8fc:	nop

000000000003e900 <aarch64_ext_sve_asimm@@Base>:
   3e900:	stp	x29, x30, [sp, #-32]!
   3e904:	mov	x29, sp
   3e908:	str	x19, [sp, #16]
   3e90c:	mov	x19, x1
   3e910:	bl	35720 <aarch64_ext_imm@plt>
   3e914:	cbz	w0, 3e94c <aarch64_ext_sve_asimm@@Base+0x4c>
   3e918:	ldr	x0, [x19, #16]
   3e91c:	mov	w1, #0x5                   	// #5
   3e920:	str	w1, [x19, #32]
   3e924:	mov	w2, #0x0                   	// #0
   3e928:	str	xzr, [x19, #40]
   3e92c:	sxtb	x3, w0
   3e930:	tbnz	w0, #8, 3e958 <aarch64_ext_sve_asimm@@Base+0x58>
   3e934:	ldrb	w1, [x19, #36]
   3e938:	mov	w0, #0x1                   	// #1
   3e93c:	str	x3, [x19, #16]
   3e940:	bfxil	w1, w2, #0, #1
   3e944:	bfi	w1, w2, #1, #1
   3e948:	strb	w1, [x19, #36]
   3e94c:	ldr	x19, [sp, #16]
   3e950:	ldp	x29, x30, [sp], #32
   3e954:	ret
   3e958:	cbnz	x3, 3e96c <aarch64_ext_sve_asimm@@Base+0x6c>
   3e95c:	mov	x0, #0x8                   	// #8
   3e960:	mov	w2, #0x1                   	// #1
   3e964:	str	x0, [x19, #40]
   3e968:	b	3e934 <aarch64_ext_sve_asimm@@Base+0x34>
   3e96c:	lsl	x3, x3, #8
   3e970:	b	3e934 <aarch64_ext_sve_asimm@@Base+0x34>
   3e974:	nop

000000000003e978 <aarch64_ext_sve_float_half_one@@Base>:
   3e978:	adrp	x3, a2000 <aarch64_operands@@Base+0x16bc0>
   3e97c:	ldr	w4, [x0, #20]
   3e980:	ldrb	w7, [x1, #24]
   3e984:	mov	w6, #0xffffffff            	// #-1
   3e988:	ldr	x3, [x3, #3944]
   3e98c:	lsl	x4, x4, #3
   3e990:	mov	x8, #0x3f000000            	// #1056964608
   3e994:	mov	w0, #0x1                   	// #1
   3e998:	add	x9, x4, x3
   3e99c:	orr	w7, w7, w0
   3e9a0:	ldr	w4, [x4, x3]
   3e9a4:	mov	x5, #0x3f800000            	// #1065353216
   3e9a8:	ldr	w3, [x9, #4]
   3e9ac:	lsr	w2, w2, w4
   3e9b0:	strb	w7, [x1, #24]
   3e9b4:	lsl	w6, w6, w3
   3e9b8:	bics	wzr, w2, w6
   3e9bc:	csel	x5, x5, x8, ne  // ne = any
   3e9c0:	str	x5, [x1, #16]
   3e9c4:	ret

000000000003e9c8 <aarch64_ext_sve_float_half_two@@Base>:
   3e9c8:	adrp	x3, a2000 <aarch64_operands@@Base+0x16bc0>
   3e9cc:	ldr	w4, [x0, #20]
   3e9d0:	ldrb	w7, [x1, #24]
   3e9d4:	mov	w6, #0xffffffff            	// #-1
   3e9d8:	ldr	x3, [x3, #3944]
   3e9dc:	lsl	x4, x4, #3
   3e9e0:	mov	x8, #0x3f000000            	// #1056964608
   3e9e4:	mov	w0, #0x1                   	// #1
   3e9e8:	add	x9, x4, x3
   3e9ec:	orr	w7, w7, w0
   3e9f0:	ldr	w4, [x4, x3]
   3e9f4:	mov	x5, #0x40000000            	// #1073741824
   3e9f8:	ldr	w3, [x9, #4]
   3e9fc:	lsr	w2, w2, w4
   3ea00:	strb	w7, [x1, #24]
   3ea04:	lsl	w6, w6, w3
   3ea08:	bics	wzr, w2, w6
   3ea0c:	csel	x5, x5, x8, ne  // ne = any
   3ea10:	str	x5, [x1, #16]
   3ea14:	ret

000000000003ea18 <aarch64_ext_sve_float_zero_one@@Base>:
   3ea18:	adrp	x3, a2000 <aarch64_operands@@Base+0x16bc0>
   3ea1c:	ldr	w4, [x0, #20]
   3ea20:	ldrb	w7, [x1, #24]
   3ea24:	mov	w6, #0xffffffff            	// #-1
   3ea28:	ldr	x3, [x3, #3944]
   3ea2c:	lsl	x4, x4, #3
   3ea30:	mov	w0, #0x1                   	// #1
   3ea34:	mov	x5, #0x3f800000            	// #1065353216
   3ea38:	add	x8, x4, x3
   3ea3c:	orr	w7, w7, w0
   3ea40:	ldr	w4, [x4, x3]
   3ea44:	ldr	w3, [x8, #4]
   3ea48:	lsr	w2, w2, w4
   3ea4c:	strb	w7, [x1, #24]
   3ea50:	lsl	w6, w6, w3
   3ea54:	bics	wzr, w2, w6
   3ea58:	csel	x5, x5, xzr, ne  // ne = any
   3ea5c:	str	x5, [x1, #16]
   3ea60:	ret
   3ea64:	nop

000000000003ea68 <aarch64_ext_sve_index@@Base>:
   3ea68:	stp	x29, x30, [sp, #-32]!
   3ea6c:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   3ea70:	mov	w6, #0xffffffff            	// #-1
   3ea74:	mov	x29, sp
   3ea78:	ldr	w7, [x0, #20]
   3ea7c:	mov	w0, w2
   3ea80:	ldr	x5, [x5, #3944]
   3ea84:	mov	w2, #0x2                   	// #2
   3ea88:	lsl	x7, x7, #3
   3ea8c:	mov	w4, #0x2b                  	// #43
   3ea90:	add	x8, x7, x5
   3ea94:	mov	w3, #0x74                  	// #116
   3ea98:	ldr	w5, [x7, x5]
   3ea9c:	ldr	w7, [x8, #4]
   3eaa0:	str	x19, [sp, #16]
   3eaa4:	mov	x19, x1
   3eaa8:	lsr	w5, w0, w5
   3eaac:	mov	w1, #0x0                   	// #0
   3eab0:	lsl	w6, w6, w7
   3eab4:	bic	w5, w5, w6
   3eab8:	str	w5, [x19, #16]
   3eabc:	bl	35390 <extract_fields@plt>
   3eac0:	mov	w2, w0
   3eac4:	ands	w0, w0, #0x1f
   3eac8:	b.eq	3eaf0 <aarch64_ext_sve_index@@Base+0x88>  // b.none
   3eacc:	tbnz	w2, #0, 3eadc <aarch64_ext_sve_index@@Base+0x74>
   3ead0:	add	w0, w2, w2, lsr #31
   3ead4:	asr	w2, w0, #1
   3ead8:	tbz	w0, #1, 3ead0 <aarch64_ext_sve_index@@Base+0x68>
   3eadc:	add	w2, w2, w2, lsr #31
   3eae0:	mov	w0, #0x1                   	// #1
   3eae4:	asr	w2, w2, #1
   3eae8:	sxtw	x2, w2
   3eaec:	str	x2, [x19, #24]
   3eaf0:	ldr	x19, [sp, #16]
   3eaf4:	ldp	x29, x30, [sp], #32
   3eaf8:	ret
   3eafc:	nop

000000000003eb00 <aarch64_ext_sve_limm_mov@@Base>:
   3eb00:	stp	x29, x30, [sp, #-64]!
   3eb04:	mov	x29, sp
   3eb08:	stp	x19, x20, [sp, #16]
   3eb0c:	mov	x19, x3
   3eb10:	mov	x20, x1
   3eb14:	stp	x21, x22, [sp, #32]
   3eb18:	mov	x21, x0
   3eb1c:	mov	w22, w2
   3eb20:	str	x23, [sp, #48]
   3eb24:	mov	x23, x4
   3eb28:	ldrb	w0, [x3, #28]
   3eb2c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3eb30:	mov	w1, w0
   3eb34:	mov	x3, x19
   3eb38:	mov	x4, x23
   3eb3c:	and	w19, w1, #0xff
   3eb40:	mov	w2, w22
   3eb44:	mov	x0, x21
   3eb48:	mov	x1, x20
   3eb4c:	bl	35420 <aarch64_ext_limm@plt>
   3eb50:	cbnz	w0, 3eb68 <aarch64_ext_sve_limm_mov@@Base+0x68>
   3eb54:	ldp	x19, x20, [sp, #16]
   3eb58:	ldp	x21, x22, [sp, #32]
   3eb5c:	ldr	x23, [sp, #48]
   3eb60:	ldp	x29, x30, [sp], #64
   3eb64:	ret
   3eb68:	ldr	x0, [x20, #16]
   3eb6c:	mov	w1, w19
   3eb70:	bl	35540 <aarch64_sve_dupm_mov_immediate_p@plt>
   3eb74:	cmp	w0, #0x0
   3eb78:	cset	w0, ne  // ne = any
   3eb7c:	ldp	x19, x20, [sp, #16]
   3eb80:	ldp	x21, x22, [sp, #32]
   3eb84:	ldr	x23, [sp, #48]
   3eb88:	ldp	x29, x30, [sp], #64
   3eb8c:	ret

000000000003eb90 <aarch64_ext_sve_quad_index@@Base>:
   3eb90:	ldr	w6, [x0, #16]
   3eb94:	adrp	x8, a2000 <aarch64_operands@@Base+0x16bc0>
   3eb98:	add	x4, x0, #0x14
   3eb9c:	add	x7, x0, #0x24
   3eba0:	ldr	x8, [x8, #3944]
   3eba4:	ubfx	x6, x6, #5, #3
   3eba8:	mov	w3, #0x0                   	// #0
   3ebac:	mov	w10, #0xffffffff            	// #-1
   3ebb0:	ldr	w0, [x4]
   3ebb4:	add	x4, x4, #0x4
   3ebb8:	cmp	x4, x7
   3ebbc:	ubfiz	x5, x0, #3, #32
   3ebc0:	add	x9, x8, x5
   3ebc4:	cbz	w0, 3ebe8 <aarch64_ext_sve_quad_index@@Base+0x58>
   3ebc8:	ldr	w0, [x8, x5]
   3ebcc:	ldr	w9, [x9, #4]
   3ebd0:	lsr	w5, w2, w0
   3ebd4:	lsl	w0, w10, w9
   3ebd8:	bic	w0, w5, w0
   3ebdc:	lsl	w3, w3, w9
   3ebe0:	orr	w3, w0, w3
   3ebe4:	b.ne	3ebb0 <aarch64_ext_sve_quad_index@@Base+0x20>  // b.any
   3ebe8:	mov	w0, #0x1                   	// #1
   3ebec:	lsr	w2, w3, w6
   3ebf0:	lsl	w6, w0, w6
   3ebf4:	sub	w6, w6, #0x1
   3ebf8:	and	w3, w6, w3
   3ebfc:	str	w3, [x1, #16]
   3ec00:	str	x2, [x1, #24]
   3ec04:	ret

000000000003ec08 <aarch64_ext_sve_reglist@@Base>:
   3ec08:	adrp	x6, a2000 <aarch64_operands@@Base+0x16bc0>
   3ec0c:	ldr	w7, [x0, #20]
   3ec10:	ldrb	w4, [x1, #16]
   3ec14:	mov	w5, #0xffffffff            	// #-1
   3ec18:	ldr	x6, [x6, #3944]
   3ec1c:	lsl	x7, x7, #3
   3ec20:	ldr	x3, [x3, #8]
   3ec24:	add	x8, x7, x6
   3ec28:	ldr	w7, [x7, x6]
   3ec2c:	mov	w0, #0x1                   	// #1
   3ec30:	ldr	w6, [x8, #4]
   3ec34:	lsr	w2, w2, w7
   3ec38:	lsl	w5, w5, w6
   3ec3c:	bic	w5, w2, w5
   3ec40:	bfxil	w4, w5, #0, #5
   3ec44:	strb	w4, [x1, #16]
   3ec48:	ldr	x2, [x3, #120]
   3ec4c:	lsr	x2, x2, #24
   3ec50:	bfi	w4, w2, #5, #3
   3ec54:	strb	w4, [x1, #16]
   3ec58:	ret
   3ec5c:	nop

000000000003ec60 <aarch64_ext_sve_scale@@Base>:
   3ec60:	stp	x29, x30, [sp, #-32]!
   3ec64:	mov	x29, sp
   3ec68:	stp	x19, x20, [sp, #16]
   3ec6c:	mov	x19, x1
   3ec70:	mov	w20, w2
   3ec74:	bl	35720 <aarch64_ext_imm@plt>
   3ec78:	cbz	w0, 3ecc8 <aarch64_ext_sve_scale@@Base+0x68>
   3ec7c:	adrp	x4, a2000 <aarch64_operands@@Base+0x16bc0>
   3ec80:	mov	w2, #0xe                   	// #14
   3ec84:	str	w2, [x19, #32]
   3ec88:	mov	w3, #0xffffffff            	// #-1
   3ec8c:	ldr	x4, [x4, #3944]
   3ec90:	mov	w0, #0x1                   	// #1
   3ec94:	ldrb	w1, [x19, #36]
   3ec98:	ldr	w2, [x4, #780]
   3ec9c:	ldr	w5, [x4, #776]
   3eca0:	lsl	w2, w3, w2
   3eca4:	lsr	w4, w20, w5
   3eca8:	bics	w2, w4, w2
   3ecac:	cset	w3, ne  // ne = any
   3ecb0:	add	w2, w2, w0
   3ecb4:	bfxil	w1, w3, #0, #1
   3ecb8:	sxtw	x2, w2
   3ecbc:	str	x2, [x19, #40]
   3ecc0:	bfi	w1, w3, #1, #1
   3ecc4:	strb	w1, [x19, #36]
   3ecc8:	ldp	x19, x20, [sp, #16]
   3eccc:	ldp	x29, x30, [sp], #32
   3ecd0:	ret
   3ecd4:	nop

000000000003ecd8 <aarch64_ext_sve_shlimm@@Base>:
   3ecd8:	stp	x29, x30, [sp, #-32]!
   3ecdc:	mov	x29, sp
   3ece0:	str	x19, [sp, #16]
   3ece4:	mov	x19, x1
   3ece8:	bl	35720 <aarch64_ext_imm@plt>
   3ecec:	cbz	w0, 3ed34 <aarch64_ext_sve_shlimm@@Base+0x5c>
   3ecf0:	ldr	x4, [x19, #16]
   3ecf4:	mov	w0, #0x0                   	// #0
   3ecf8:	cbz	x4, 3ed34 <aarch64_ext_sve_shlimm@@Base+0x5c>
   3ecfc:	neg	x2, x4
   3ed00:	bics	xzr, x4, x2
   3ed04:	and	x2, x2, x4
   3ed08:	b.eq	3ed28 <aarch64_ext_sve_shlimm@@Base+0x50>  // b.none
   3ed0c:	mov	x0, x4
   3ed10:	sub	x3, x0, #0x1
   3ed14:	and	x0, x0, x3
   3ed18:	neg	x2, x0
   3ed1c:	bics	xzr, x0, x2
   3ed20:	and	x2, x2, x0
   3ed24:	b.ne	3ed10 <aarch64_ext_sve_shlimm@@Base+0x38>  // b.any
   3ed28:	sub	x2, x4, x2
   3ed2c:	mov	w0, #0x1                   	// #1
   3ed30:	str	x2, [x19, #16]
   3ed34:	ldr	x19, [sp, #16]
   3ed38:	ldp	x29, x30, [sp], #32
   3ed3c:	ret

000000000003ed40 <aarch64_ext_sve_shrimm@@Base>:
   3ed40:	stp	x29, x30, [sp, #-32]!
   3ed44:	mov	x29, sp
   3ed48:	str	x19, [sp, #16]
   3ed4c:	mov	x19, x1
   3ed50:	bl	35720 <aarch64_ext_imm@plt>
   3ed54:	cbz	w0, 3eda0 <aarch64_ext_sve_shrimm@@Base+0x60>
   3ed58:	ldr	x1, [x19, #16]
   3ed5c:	mov	w0, #0x0                   	// #0
   3ed60:	cbz	x1, 3eda0 <aarch64_ext_sve_shrimm@@Base+0x60>
   3ed64:	neg	x2, x1
   3ed68:	bics	xzr, x1, x2
   3ed6c:	and	x2, x2, x1
   3ed70:	b.eq	3ed90 <aarch64_ext_sve_shrimm@@Base+0x50>  // b.none
   3ed74:	mov	x0, x1
   3ed78:	sub	x3, x0, #0x1
   3ed7c:	and	x0, x0, x3
   3ed80:	neg	x2, x0
   3ed84:	bics	xzr, x0, x2
   3ed88:	and	x2, x2, x0
   3ed8c:	b.ne	3ed78 <aarch64_ext_sve_shrimm@@Base+0x38>  // b.any
   3ed90:	lsl	x2, x2, #1
   3ed94:	mov	w0, #0x1                   	// #1
   3ed98:	sub	x2, x2, x1
   3ed9c:	str	x2, [x19, #16]
   3eda0:	ldr	x19, [sp, #16]
   3eda4:	ldp	x29, x30, [sp], #32
   3eda8:	ret
   3edac:	nop

000000000003edb0 <aarch64_decode_insn@@Base>:
   3edb0:	stp	x29, x30, [sp, #-64]!
   3edb4:	mov	x29, sp
   3edb8:	stp	x19, x20, [sp, #16]
   3edbc:	mov	w20, w0
   3edc0:	stp	x21, x22, [sp, #32]
   3edc4:	mov	w22, w2
   3edc8:	mov	x21, x3
   3edcc:	str	x23, [sp, #48]
   3edd0:	mov	x23, x1
   3edd4:	bl	355a0 <aarch64_opcode_lookup@plt>
   3edd8:	cbz	x0, 3ee30 <aarch64_decode_insn@@Base+0x80>
   3eddc:	mov	x19, x0
   3ede0:	b	3edf0 <aarch64_decode_insn@@Base+0x40>
   3ede4:	bl	35b50 <aarch64_find_next_opcode@plt>
   3ede8:	mov	x19, x0
   3edec:	cbz	x0, 3ee30 <aarch64_decode_insn@@Base+0x80>
   3edf0:	mov	x4, x21
   3edf4:	mov	w3, w22
   3edf8:	mov	x2, x23
   3edfc:	mov	w1, w20
   3ee00:	mov	x0, x19
   3ee04:	bl	3ad58 <extract_fields@@Base+0xf0>
   3ee08:	mov	w4, w0
   3ee0c:	mov	x0, x19
   3ee10:	cmp	w4, #0x1
   3ee14:	b.ne	3ede4 <aarch64_decode_insn@@Base+0x34>  // b.any
   3ee18:	mov	w0, #0x0                   	// #0
   3ee1c:	ldp	x19, x20, [sp, #16]
   3ee20:	ldp	x21, x22, [sp, #32]
   3ee24:	ldr	x23, [sp, #48]
   3ee28:	ldp	x29, x30, [sp], #64
   3ee2c:	ret
   3ee30:	mov	w0, #0x1                   	// #1
   3ee34:	ldp	x19, x20, [sp, #16]
   3ee38:	ldp	x21, x22, [sp, #32]
   3ee3c:	ldr	x23, [sp, #48]
   3ee40:	ldp	x29, x30, [sp], #64
   3ee44:	ret
   3ee48:	sub	sp, sp, #0x290
   3ee4c:	stp	x29, x30, [sp, #16]
   3ee50:	add	x29, sp, #0x10
   3ee54:	stp	x23, x24, [sp, #64]
   3ee58:	mov	x24, x2
   3ee5c:	adrp	x2, f9000 <aarch64_opcode_table@@Base+0x55a20>
   3ee60:	stp	x19, x20, [sp, #32]
   3ee64:	mov	w19, w1
   3ee68:	ldr	w2, [x2, #1640]
   3ee6c:	ldr	x1, [x24, #88]
   3ee70:	stp	x21, x22, [sp, #48]
   3ee74:	mov	w20, #0x1                   	// #1
   3ee78:	stp	x25, x26, [sp, #80]
   3ee7c:	add	x21, sp, #0x128
   3ee80:	tst	x1, #0x80000000
   3ee84:	strh	w20, [x24, #196]
   3ee88:	csel	x26, x0, xzr, eq  // eq = none
   3ee8c:	strb	wzr, [x24, #198]
   3ee90:	mov	x1, x21
   3ee94:	stp	xzr, xzr, [x24, #208]
   3ee98:	mov	w0, w19
   3ee9c:	str	x3, [sp, #128]
   3eea0:	bl	352e0 <aarch64_decode_insn@plt>
   3eea4:	ubfx	x1, x19, #21, #10
   3eea8:	cmp	w1, #0x1
   3eeac:	b.eq	3f16c <aarch64_decode_insn@@Base+0x3bc>  // b.none
   3eeb0:	cbnz	w0, 3f048 <aarch64_decode_insn@@Base+0x298>
   3eeb4:	ldr	x1, [sp, #304]
   3eeb8:	stp	x27, x28, [sp, #96]
   3eebc:	ldr	w0, [x1, #16]
   3eec0:	cmp	w0, #0x5a
   3eec4:	b.eq	3f190 <aarch64_decode_insn@@Base+0x3e0>  // b.none
   3eec8:	ldr	x0, [x1, #120]
   3eecc:	tbnz	w0, #4, 3f1a4 <aarch64_decode_insn@@Base+0x3f4>
   3eed0:	ldp	x3, x0, [x24]
   3eed4:	ldr	x2, [x1]
   3eed8:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   3eedc:	add	x1, x1, #0xa78
   3eee0:	blr	x3
   3eee4:	ldr	x27, [sp, #304]
   3eee8:	adrp	x0, 58000 <xexit@@Base+0xe08>
   3eeec:	add	x0, x0, #0xc8
   3eef0:	add	x22, x21, #0x18
   3eef4:	add	x25, sp, #0xa8
   3eef8:	add	x28, x27, #0x20
   3eefc:	str	x0, [sp, #136]
   3ef00:	add	x0, sp, #0x9c
   3ef04:	mov	x20, #0x0                   	// #0
   3ef08:	mov	w23, #0x0                   	// #0
   3ef0c:	str	x0, [sp, #112]
   3ef10:	add	x0, sp, #0xa0
   3ef14:	str	x0, [sp, #120]
   3ef18:	str	xzr, [sp, #160]
   3ef1c:	ldr	w0, [x28, x20, lsl #2]
   3ef20:	cbz	w0, 3efb0 <aarch64_decode_insn@@Base+0x200>
   3ef24:	ldr	w0, [x22]
   3ef28:	cbz	w0, 3efb0 <aarch64_decode_insn@@Base+0x200>
   3ef2c:	ldp	x6, x0, [sp, #112]
   3ef30:	str	x0, [sp]
   3ef34:	add	x7, x24, #0xd0
   3ef38:	mov	w5, w20
   3ef3c:	mov	x0, x25
   3ef40:	add	x4, x21, #0x18
   3ef44:	mov	x3, x27
   3ef48:	mov	x2, x26
   3ef4c:	mov	x1, #0x80                  	// #128
   3ef50:	bl	353b0 <aarch64_print_operand@plt>
   3ef54:	ldrb	w0, [sp, #168]
   3ef58:	cbz	w0, 3ef88 <aarch64_decode_insn@@Base+0x1d8>
   3ef5c:	add	w0, w23, #0x1
   3ef60:	cmp	w23, #0x0
   3ef64:	mov	w23, w0
   3ef68:	adrp	x2, 58000 <xexit@@Base+0xe08>
   3ef6c:	ldp	x3, x0, [x24]
   3ef70:	add	x2, x2, #0xc0
   3ef74:	ldr	x4, [sp, #136]
   3ef78:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   3ef7c:	add	x1, x1, #0xa78
   3ef80:	csel	x2, x2, x4, eq  // eq = none
   3ef84:	blr	x3
   3ef88:	ldr	w0, [sp, #156]
   3ef8c:	cbz	w0, 3f154 <aarch64_decode_insn@@Base+0x3a4>
   3ef90:	ldr	x2, [x24, #120]
   3ef94:	mov	x1, x24
   3ef98:	ldr	x0, [x24, #208]
   3ef9c:	blr	x2
   3efa0:	add	x20, x20, #0x1
   3efa4:	add	x22, x22, #0x38
   3efa8:	cmp	x20, #0x6
   3efac:	b.ne	3ef1c <aarch64_decode_insn@@Base+0x16c>  // b.any
   3efb0:	ldr	x2, [sp, #160]
   3efb4:	cbz	x2, 3f094 <aarch64_decode_insn@@Base+0x2e4>
   3efb8:	adrp	x0, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   3efbc:	ldr	w0, [x0, #1496]
   3efc0:	cbnz	w0, 3f094 <aarch64_decode_insn@@Base+0x2e4>
   3efc4:	ldp	x3, x0, [x24]
   3efc8:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3efcc:	add	x1, x1, #0x100
   3efd0:	blr	x3
   3efd4:	ldr	x1, [sp, #304]
   3efd8:	ldr	x0, [x1, #120]
   3efdc:	tbz	w0, #4, 3f134 <aarch64_decode_insn@@Base+0x384>
   3efe0:	mov	w23, #0x1                   	// #1
   3efe4:	add	x28, sp, #0xa8
   3efe8:	add	x2, x21, #0x10
   3efec:	mov	x0, x28
   3eff0:	adrp	x20, 58000 <xexit@@Base+0xe08>
   3eff4:	adrp	x27, 58000 <xexit@@Base+0xe08>
   3eff8:	bl	3abb8 <aarch64_opcode_encode@@Base+0x1830>
   3effc:	add	x20, x20, #0x160
   3f000:	add	x27, x27, #0x118
   3f004:	adrp	x22, 58000 <xexit@@Base+0xe08>
   3f008:	mov	w0, #0x1                   	// #1
   3f00c:	ldr	x1, [sp, #312]
   3f010:	ldr	x4, [x1, w0, uxtw #3]
   3f014:	cbz	x4, 3f17c <aarch64_decode_insn@@Base+0x3cc>
   3f018:	cmp	w0, #0x1
   3f01c:	add	w25, w0, #0x1
   3f020:	mov	x3, x28
   3f024:	ldp	x5, x0, [x24]
   3f028:	b.eq	3f1d8 <aarch64_decode_insn@@Base+0x428>  // b.none
   3f02c:	add	x2, x22, #0x110
   3f030:	mov	x1, x27
   3f034:	blr	x5
   3f038:	cmp	w25, #0x4
   3f03c:	b.eq	3f17c <aarch64_decode_insn@@Base+0x3cc>  // b.none
   3f040:	mov	w0, w25
   3f044:	b	3f00c <aarch64_decode_insn@@Base+0x25c>
   3f048:	sub	w1, w0, #0x1
   3f04c:	cmp	w1, #0x2
   3f050:	b.hi	3f280 <aarch64_decode_insn@@Base+0x4d0>  // b.pmore
   3f054:	adrp	x1, 88000 <_sch_istable@@Base+0x145d8>
   3f058:	add	x1, x1, #0x3a0
   3f05c:	ldr	x3, [x1, w0, uxtw #3]
   3f060:	str	wzr, [x24, #200]
   3f064:	ldp	x4, x0, [x24]
   3f068:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3f06c:	mov	w2, w19
   3f070:	add	x1, x1, #0xe0
   3f074:	blr	x4
   3f078:	ldp	x29, x30, [sp, #16]
   3f07c:	ldp	x19, x20, [sp, #32]
   3f080:	ldp	x21, x22, [sp, #48]
   3f084:	ldp	x23, x24, [sp, #64]
   3f088:	ldp	x25, x26, [sp, #80]
   3f08c:	add	sp, sp, #0x290
   3f090:	ret
   3f094:	ldr	x1, [sp, #304]
   3f098:	ldr	x0, [x1, #120]
   3f09c:	tbnz	w0, #4, 3f188 <aarch64_decode_insn@@Base+0x3d8>
   3f0a0:	ldr	x4, [sp, #128]
   3f0a4:	adrp	x0, f9000 <aarch64_opcode_table@@Base+0x55a20>
   3f0a8:	add	x5, x0, #0x668
   3f0ac:	mov	x2, x26
   3f0b0:	add	x5, x5, #0x8
   3f0b4:	mov	w1, w19
   3f0b8:	mov	x0, x21
   3f0bc:	mov	w3, #0x0                   	// #0
   3f0c0:	bl	35250 <verify_constraints@plt>
   3f0c4:	cmp	w0, #0x3
   3f0c8:	b.ls	3f130 <aarch64_decode_insn@@Base+0x380>  // b.plast
   3f0cc:	cmp	w0, #0x4
   3f0d0:	b.ne	3f134 <aarch64_decode_insn@@Base+0x384>  // b.any
   3f0d4:	adrp	x0, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   3f0d8:	ldr	w0, [x0, #1496]
   3f0dc:	cbnz	w0, 3f134 <aarch64_decode_insn@@Base+0x384>
   3f0e0:	ldr	x0, [sp, #128]
   3f0e4:	ldr	w0, [x0, #28]
   3f0e8:	cbz	w0, 3f25c <aarch64_decode_insn@@Base+0x4ac>
   3f0ec:	ldr	x0, [sp, #128]
   3f0f0:	ldr	x2, [x0, #8]
   3f0f4:	cbz	x2, 3f238 <aarch64_decode_insn@@Base+0x488>
   3f0f8:	ldp	x3, x0, [x24]
   3f0fc:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3f100:	add	x1, x1, #0x100
   3f104:	blr	x3
   3f108:	ldr	x0, [sp, #128]
   3f10c:	ldr	w2, [x0, #4]
   3f110:	tbnz	w2, #31, 3f134 <aarch64_decode_insn@@Base+0x384>
   3f114:	ldp	x3, x0, [x24]
   3f118:	add	w2, w2, #0x1
   3f11c:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3f120:	add	x1, x1, #0x150
   3f124:	blr	x3
   3f128:	ldp	x27, x28, [sp, #96]
   3f12c:	b	3f078 <aarch64_decode_insn@@Base+0x2c8>
   3f130:	cbnz	w0, 3f1ec <aarch64_decode_insn@@Base+0x43c>
   3f134:	ldp	x27, x28, [sp, #96]
   3f138:	ldp	x29, x30, [sp, #16]
   3f13c:	ldp	x19, x20, [sp, #32]
   3f140:	ldp	x21, x22, [sp, #48]
   3f144:	ldp	x23, x24, [sp, #64]
   3f148:	ldp	x25, x26, [sp, #80]
   3f14c:	add	sp, sp, #0x290
   3f150:	ret
   3f154:	ldp	x3, x0, [x24]
   3f158:	mov	x2, x25
   3f15c:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   3f160:	add	x1, x1, #0xa78
   3f164:	blr	x3
   3f168:	b	3efa0 <aarch64_decode_insn@@Base+0x1f0>
   3f16c:	cbz	w0, 3f210 <aarch64_decode_insn@@Base+0x460>
   3f170:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3f174:	add	x3, x3, #0xb8
   3f178:	b	3f060 <aarch64_decode_insn@@Base+0x2b0>
   3f17c:	cbz	w23, 3f0a0 <aarch64_decode_insn@@Base+0x2f0>
   3f180:	ldp	x27, x28, [sp, #96]
   3f184:	b	3f138 <aarch64_decode_insn@@Base+0x388>
   3f188:	mov	w23, #0x0                   	// #0
   3f18c:	b	3efe4 <aarch64_decode_insn@@Base+0x234>
   3f190:	ldr	x0, [sp, #392]
   3f194:	cmp	x0, #0x1f
   3f198:	b.gt	3eec8 <aarch64_decode_insn@@Base+0x118>
   3f19c:	strb	w20, [sp, #324]
   3f1a0:	b	3eec8 <aarch64_decode_insn@@Base+0x118>
   3f1a4:	add	x20, sp, #0xa8
   3f1a8:	add	x2, x21, #0x10
   3f1ac:	mov	x0, x20
   3f1b0:	bl	3abb8 <aarch64_opcode_encode@@Base+0x1830>
   3f1b4:	ldr	x0, [sp, #312]
   3f1b8:	mov	x2, x20
   3f1bc:	ldr	x4, [x24]
   3f1c0:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3f1c4:	ldr	x3, [x0]
   3f1c8:	add	x1, x1, #0xf8
   3f1cc:	ldr	x0, [x24, #8]
   3f1d0:	blr	x4
   3f1d4:	b	3eee4 <aarch64_decode_insn@@Base+0x134>
   3f1d8:	mov	x2, x20
   3f1dc:	mov	x1, x27
   3f1e0:	blr	x5
   3f1e4:	mov	w0, w25
   3f1e8:	b	3f00c <aarch64_decode_insn@@Base+0x25c>
   3f1ec:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3f1f0:	add	x3, x3, #0x388
   3f1f4:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3f1f8:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   3f1fc:	add	x3, x3, #0x420
   3f200:	add	x1, x1, #0xc48
   3f204:	add	x0, x0, #0x4b0
   3f208:	mov	w2, #0xc79                 	// #3193
   3f20c:	bl	35ac0 <__assert_fail@plt>
   3f210:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3f214:	add	x3, x3, #0x388
   3f218:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3f21c:	adrp	x0, 58000 <xexit@@Base+0xe08>
   3f220:	add	x3, x3, #0x408
   3f224:	add	x1, x1, #0xc48
   3f228:	add	x0, x0, #0xd0
   3f22c:	mov	w2, #0xca8                 	// #3240
   3f230:	stp	x27, x28, [sp, #96]
   3f234:	bl	35ac0 <__assert_fail@plt>
   3f238:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3f23c:	add	x3, x3, #0x388
   3f240:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3f244:	adrp	x0, 58000 <xexit@@Base+0xe08>
   3f248:	add	x3, x3, #0x438
   3f24c:	add	x1, x1, #0xc48
   3f250:	add	x0, x0, #0x140
   3f254:	mov	w2, #0xc53                 	// #3155
   3f258:	bl	35ac0 <__assert_fail@plt>
   3f25c:	adrp	x3, 58000 <xexit@@Base+0xe08>
   3f260:	add	x3, x3, #0x388
   3f264:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3f268:	adrp	x0, 58000 <xexit@@Base+0xe08>
   3f26c:	add	x3, x3, #0x438
   3f270:	add	x1, x1, #0xc48
   3f274:	add	x0, x0, #0x128
   3f278:	mov	w2, #0xc52                 	// #3154
   3f27c:	bl	35ac0 <__assert_fail@plt>
   3f280:	stp	x27, x28, [sp, #96]
   3f284:	bl	35670 <abort@plt>

000000000003f288 <aarch64_symbol_is_valid@@Base>:
   3f288:	cbz	x0, 3f2d4 <aarch64_symbol_is_valid@@Base+0x4c>
   3f28c:	ldr	x1, [x0, #8]
   3f290:	mov	w0, #0x0                   	// #0
   3f294:	cbz	x1, 3f2a8 <aarch64_symbol_is_valid@@Base+0x20>
   3f298:	ldrb	w2, [x1]
   3f29c:	mov	w0, #0x1                   	// #1
   3f2a0:	cmp	w2, #0x24
   3f2a4:	b.eq	3f2ac <aarch64_symbol_is_valid@@Base+0x24>  // b.none
   3f2a8:	ret
   3f2ac:	ldrb	w2, [x1, #1]
   3f2b0:	mov	w3, #0x64                  	// #100
   3f2b4:	cmp	w2, #0x78
   3f2b8:	ccmp	w2, w3, #0x4, ne  // ne = any
   3f2bc:	b.ne	3f2a8 <aarch64_symbol_is_valid@@Base+0x20>  // b.any
   3f2c0:	ldrb	w0, [x1, #2]
   3f2c4:	cmp	w0, #0x2e
   3f2c8:	ccmp	w0, #0x0, #0x4, ne  // ne = any
   3f2cc:	cset	w0, ne  // ne = any
   3f2d0:	ret
   3f2d4:	mov	w0, #0x0                   	// #0
   3f2d8:	ret
   3f2dc:	nop

000000000003f2e0 <print_insn_aarch64@@Base>:
   3f2e0:	stp	x29, x30, [sp, #-128]!
   3f2e4:	mov	x29, sp
   3f2e8:	stp	x19, x20, [sp, #16]
   3f2ec:	mov	x19, x1
   3f2f0:	ldr	x20, [x1, #224]
   3f2f4:	stp	x21, x22, [sp, #32]
   3f2f8:	mov	x21, x0
   3f2fc:	stp	x23, x24, [sp, #48]
   3f300:	adrp	x23, f9000 <aarch64_opcode_table@@Base+0x55a20>
   3f304:	cbz	x20, 3f3d4 <print_insn_aarch64@@Base+0xf4>
   3f308:	ldrb	w2, [x20]
   3f30c:	cbz	w2, 3f3d0 <print_insn_aarch64@@Base+0xf0>
   3f310:	adrp	x24, 58000 <xexit@@Base+0xe08>
   3f314:	add	x24, x24, #0x178
   3f318:	str	x25, [sp, #64]
   3f31c:	adrp	x25, 58000 <xexit@@Base+0xe08>
   3f320:	add	x25, x25, #0x168
   3f324:	nop
   3f328:	cmp	w2, #0x2c
   3f32c:	add	x22, x20, #0x1
   3f330:	ldrb	w2, [x20, #1]
   3f334:	b.eq	3f3c0 <print_insn_aarch64@@Base+0xe0>  // b.none
   3f338:	cmp	w2, #0x2c
   3f33c:	ccmp	w2, #0x0, #0x4, ne  // ne = any
   3f340:	b.eq	3f358 <print_insn_aarch64@@Base+0x78>  // b.none
   3f344:	nop
   3f348:	ldrb	w0, [x22, #1]!
   3f34c:	cmp	w0, #0x2c
   3f350:	ccmp	w0, #0x0, #0x4, ne  // ne = any
   3f354:	b.ne	3f348 <print_insn_aarch64@@Base+0x68>  // b.any
   3f358:	mov	x1, x25
   3f35c:	mov	x0, x20
   3f360:	mov	x2, #0xa                   	// #10
   3f364:	bl	35440 <strncmp@plt>
   3f368:	cbz	w0, 3f4f0 <print_insn_aarch64@@Base+0x210>
   3f36c:	mov	x1, x24
   3f370:	mov	x0, x20
   3f374:	mov	x2, #0x7                   	// #7
   3f378:	bl	35440 <strncmp@plt>
   3f37c:	cbz	w0, 3f500 <print_insn_aarch64@@Base+0x220>
   3f380:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3f384:	mov	x0, x20
   3f388:	add	x1, x1, #0x180
   3f38c:	mov	x2, #0x8                   	// #8
   3f390:	bl	35440 <strncmp@plt>
   3f394:	cbz	w0, 3f50c <print_insn_aarch64@@Base+0x22c>
   3f398:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3f39c:	mov	x0, x20
   3f3a0:	add	x1, x1, #0x190
   3f3a4:	mov	x2, #0x5                   	// #5
   3f3a8:	bl	35440 <strncmp@plt>
   3f3ac:	cbnz	w0, 3f520 <print_insn_aarch64@@Base+0x240>
   3f3b0:	adrp	x0, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   3f3b4:	ldrb	w2, [x22]
   3f3b8:	str	wzr, [x0, #1496]
   3f3bc:	nop
   3f3c0:	cbz	w2, 3f3cc <print_insn_aarch64@@Base+0xec>
   3f3c4:	mov	x20, x22
   3f3c8:	b	3f328 <print_insn_aarch64@@Base+0x48>
   3f3cc:	ldr	x25, [sp, #64]
   3f3d0:	str	xzr, [x19, #224]
   3f3d4:	ldr	x1, [x19, #48]
   3f3d8:	mov	w0, #0x1                   	// #1
   3f3dc:	str	w0, [x19, #44]
   3f3e0:	str	w0, [sp, #92]
   3f3e4:	cbz	x1, 3f3f0 <print_insn_aarch64@@Base+0x110>
   3f3e8:	ldr	w2, [x1, #32]
   3f3ec:	tbz	w2, #4, 3f4b0 <print_insn_aarch64@@Base+0x1d0>
   3f3f0:	ldr	w4, [x19, #84]
   3f3f4:	str	wzr, [sp, #92]
   3f3f8:	cbz	w4, 3f4e0 <print_insn_aarch64@@Base+0x200>
   3f3fc:	ldr	x0, [x19, #72]
   3f400:	ldr	x2, [x0]
   3f404:	ldr	w3, [x2, #24]
   3f408:	tbnz	w3, #21, 3f420 <print_insn_aarch64@@Base+0x140>
   3f40c:	ldr	x2, [x2]
   3f410:	ldr	x2, [x2, #8]
   3f414:	ldr	w2, [x2, #8]
   3f418:	cmp	w2, #0x5
   3f41c:	b.eq	3f548 <print_insn_aarch64@@Base+0x268>  // b.none
   3f420:	add	x23, x23, #0x668
   3f424:	ldr	w0, [sp, #92]
   3f428:	mov	w1, #0x1                   	// #1
   3f42c:	cmp	w0, w1
   3f430:	str	w0, [x23, #48]
   3f434:	b.eq	3f618 <print_insn_aarch64@@Base+0x338>  // b.none
   3f438:	mov	w0, #0x4                   	// #4
   3f43c:	adrp	x22, 3e000 <aarch64_ext_sysins_op@@Base+0xc0>
   3f440:	mov	w20, w0
   3f444:	add	x22, x22, #0xe48
   3f448:	stp	w0, w1, [x19, #172]
   3f44c:	ldr	x4, [x19, #104]
   3f450:	add	x23, sp, #0x58
   3f454:	mov	x1, x23
   3f458:	mov	x3, x19
   3f45c:	mov	w2, w20
   3f460:	mov	x0, x21
   3f464:	blr	x4
   3f468:	cbnz	w0, 3f760 <print_insn_aarch64@@Base+0x480>
   3f46c:	ldr	w2, [x19, #176]
   3f470:	lsl	w1, w20, #3
   3f474:	mov	x0, x23
   3f478:	cmp	w2, #0x0
   3f47c:	cset	w2, eq  // eq = none
   3f480:	bl	35530 <bfd_get_bits@plt>
   3f484:	mov	w1, w0
   3f488:	mov	x2, x19
   3f48c:	mov	x0, x21
   3f490:	add	x3, sp, #0x60
   3f494:	blr	x22
   3f498:	mov	w0, w20
   3f49c:	ldp	x19, x20, [sp, #16]
   3f4a0:	ldp	x21, x22, [sp, #32]
   3f4a4:	ldp	x23, x24, [sp, #48]
   3f4a8:	ldp	x29, x30, [sp], #128
   3f4ac:	ret
   3f4b0:	ldr	w4, [x19, #84]
   3f4b4:	cbnz	w4, 3f3fc <print_insn_aarch64@@Base+0x11c>
   3f4b8:	add	x23, x23, #0x668
   3f4bc:	mov	w20, #0x4                   	// #4
   3f4c0:	str	w0, [x23, #48]
   3f4c4:	ldr	x0, [x19, #88]
   3f4c8:	tbnz	w0, #30, 3f610 <print_insn_aarch64@@Base+0x330>
   3f4cc:	ldr	w0, [x19, #40]
   3f4d0:	adrp	x22, 3a000 <aarch64_opcode_encode@@Base+0xc78>
   3f4d4:	add	x22, x22, #0xb48
   3f4d8:	stp	w20, w0, [x19, #172]
   3f4dc:	b	3f44c <print_insn_aarch64@@Base+0x16c>
   3f4e0:	add	x23, x23, #0x668
   3f4e4:	mov	w1, #0x1                   	// #1
   3f4e8:	str	wzr, [x23, #48]
   3f4ec:	b	3f438 <print_insn_aarch64@@Base+0x158>
   3f4f0:	mov	w0, #0x1                   	// #1
   3f4f4:	ldrb	w2, [x22]
   3f4f8:	str	w0, [x23, #1640]
   3f4fc:	b	3f3c0 <print_insn_aarch64@@Base+0xe0>
   3f500:	ldrb	w2, [x22]
   3f504:	str	wzr, [x23, #1640]
   3f508:	b	3f3c0 <print_insn_aarch64@@Base+0xe0>
   3f50c:	adrp	x0, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   3f510:	mov	w1, #0x1                   	// #1
   3f514:	ldrb	w2, [x22]
   3f518:	str	w1, [x0, #1496]
   3f51c:	b	3f3c0 <print_insn_aarch64@@Base+0xe0>
   3f520:	mov	w2, #0x5                   	// #5
   3f524:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3f528:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   3f52c:	add	x1, x1, #0x198
   3f530:	add	x0, x0, #0x250
   3f534:	bl	359e0 <dcgettext@plt>
   3f538:	mov	x1, x20
   3f53c:	bl	35a10 <_bfd_error_handler@plt>
   3f540:	ldrb	w2, [x22]
   3f544:	b	3f3c0 <print_insn_aarch64@@Base+0xe0>
   3f548:	ldr	w6, [x19, #80]
   3f54c:	adrp	x10, a3000 <aarch64_ext_sysins_op@@Base+0x650c0>
   3f550:	add	w5, w6, #0x1
   3f554:	cbnz	x21, 3f620 <print_insn_aarch64@@Base+0x340>
   3f558:	add	x3, x10, #0x5d8
   3f55c:	mov	w2, #0xffffffff            	// #-1
   3f560:	mov	w13, w2
   3f564:	str	w2, [x3, #4]
   3f568:	cmp	w4, w5
   3f56c:	mov	w8, #0xffffffff            	// #-1
   3f570:	mov	w14, #0x0                   	// #0
   3f574:	b.le	3f668 <print_insn_aarch64@@Base+0x388>
   3f578:	sbfiz	x6, x5, #3, #32
   3f57c:	add	x11, sp, #0x5c
   3f580:	mov	w8, #0xffffffff            	// #-1
   3f584:	mov	w12, #0x0                   	// #0
   3f588:	b	3f5c4 <print_insn_aarch64@@Base+0x2e4>
   3f58c:	ldr	x3, [x19, #48]
   3f590:	cmp	x3, #0x0
   3f594:	ccmp	x7, x3, #0x4, ne  // ne = any
   3f598:	b.ne	3f5b0 <print_insn_aarch64@@Base+0x2d0>  // b.any
   3f59c:	bl	3a910 <aarch64_opcode_encode@@Base+0x1588>
   3f5a0:	ldr	w4, [x19, #84]
   3f5a4:	cbz	w0, 3f5b0 <print_insn_aarch64@@Base+0x2d0>
   3f5a8:	mov	w8, w5
   3f5ac:	mov	w12, #0x1                   	// #1
   3f5b0:	add	w5, w5, #0x1
   3f5b4:	add	x6, x6, #0x8
   3f5b8:	cmp	w4, w5
   3f5bc:	b.le	3f5e8 <print_insn_aarch64@@Base+0x308>
   3f5c0:	ldr	x0, [x19, #72]
   3f5c4:	mov	w1, w5
   3f5c8:	ldr	x3, [x0, x6]
   3f5cc:	mov	x2, x11
   3f5d0:	ldr	x7, [x3, #32]
   3f5d4:	ldr	x3, [x3, #16]
   3f5d8:	ldr	x9, [x7, #40]
   3f5dc:	add	x3, x3, x9
   3f5e0:	cmp	x21, x3
   3f5e4:	b.cs	3f58c <print_insn_aarch64@@Base+0x2ac>  // b.hs, b.nlast
   3f5e8:	cbz	w12, 3f754 <print_insn_aarch64@@Base+0x474>
   3f5ec:	add	x23, x23, #0x668
   3f5f0:	add	x10, x10, #0x5d8
   3f5f4:	ldr	w0, [sp, #92]
   3f5f8:	ldr	x1, [x19, #240]
   3f5fc:	str	w8, [x10, #4]
   3f600:	str	x1, [x23, #40]
   3f604:	cmp	w0, #0x1
   3f608:	str	w0, [x23, #48]
   3f60c:	b.eq	3f6dc <print_insn_aarch64@@Base+0x3fc>  // b.none
   3f610:	ldr	w1, [x19, #44]
   3f614:	b	3f438 <print_insn_aarch64@@Base+0x158>
   3f618:	mov	w20, #0x4                   	// #4
   3f61c:	b	3f4c4 <print_insn_aarch64@@Base+0x1e4>
   3f620:	add	x2, x10, #0x5d8
   3f624:	ldr	w13, [x2, #4]
   3f628:	tbnz	w13, #31, 3f568 <print_insn_aarch64@@Base+0x288>
   3f62c:	add	x2, x23, #0x668
   3f630:	ldr	x3, [x19, #240]
   3f634:	ldr	x2, [x2, #40]
   3f638:	cmp	x3, x2
   3f63c:	b.ne	3f568 <print_insn_aarch64@@Base+0x288>  // b.any
   3f640:	cmp	w5, w13
   3f644:	mov	w14, #0x1                   	// #1
   3f648:	csel	w5, w5, w13, le
   3f64c:	cmp	w5, w4
   3f650:	b.lt	3f578 <print_insn_aarch64@@Base+0x298>  // b.tstop
   3f654:	mov	w8, #0xffffffff            	// #-1
   3f658:	cmp	w13, w6
   3f65c:	cset	w0, le
   3f660:	tst	w0, w14
   3f664:	csel	w6, w6, w13, eq  // eq = none
   3f668:	mov	x9, #0x0                   	// #0
   3f66c:	cbz	x1, 3f674 <print_insn_aarch64@@Base+0x394>
   3f670:	ldr	x9, [x1, #40]
   3f674:	sbfiz	x5, x6, #3, #32
   3f678:	add	x11, sp, #0x5c
   3f67c:	tbz	w6, #31, 3f690 <print_insn_aarch64@@Base+0x3b0>
   3f680:	b	3f5ec <print_insn_aarch64@@Base+0x30c>
   3f684:	sub	w6, w6, #0x1
   3f688:	cmn	w6, #0x1
   3f68c:	b.eq	3f5ec <print_insn_aarch64@@Base+0x30c>  // b.none
   3f690:	ldr	x0, [x19, #72]
   3f694:	mov	w1, w6
   3f698:	mov	x2, x11
   3f69c:	ldr	x3, [x0, x5]
   3f6a0:	sub	x5, x5, #0x8
   3f6a4:	ldr	x4, [x3, #32]
   3f6a8:	ldr	x3, [x3, #16]
   3f6ac:	ldr	x7, [x4, #40]
   3f6b0:	add	x3, x3, x7
   3f6b4:	cmp	x9, x3
   3f6b8:	b.hi	3f5ec <print_insn_aarch64@@Base+0x30c>  // b.pmore
   3f6bc:	ldr	x3, [x19, #48]
   3f6c0:	cmp	x3, #0x0
   3f6c4:	ccmp	x4, x3, #0x4, ne  // ne = any
   3f6c8:	b.ne	3f684 <print_insn_aarch64@@Base+0x3a4>  // b.any
   3f6cc:	bl	3a910 <aarch64_opcode_encode@@Base+0x1588>
   3f6d0:	cbz	w0, 3f684 <print_insn_aarch64@@Base+0x3a4>
   3f6d4:	mov	w8, w6
   3f6d8:	b	3f5ec <print_insn_aarch64@@Base+0x30c>
   3f6dc:	ldr	w3, [x19, #84]
   3f6e0:	add	w8, w8, #0x1
   3f6e4:	and	w0, w21, #0x3
   3f6e8:	mov	w20, #0x4                   	// #4
   3f6ec:	cmp	w8, w3
   3f6f0:	sub	w20, w20, w0
   3f6f4:	b.ge	3f73c <print_insn_aarch64@@Base+0x45c>  // b.tcont
   3f6f8:	sxtw	x8, w8
   3f6fc:	ldr	x4, [x19, #72]
   3f700:	b	3f70c <print_insn_aarch64@@Base+0x42c>
   3f704:	cmp	w3, w8
   3f708:	b.le	3f73c <print_insn_aarch64@@Base+0x45c>
   3f70c:	ldr	x0, [x4, x8, lsl #3]
   3f710:	add	x8, x8, #0x1
   3f714:	ldr	x2, [x0, #32]
   3f718:	ldr	x1, [x0, #16]
   3f71c:	ldr	x0, [x2, #40]
   3f720:	add	x0, x0, x1
   3f724:	cmp	x21, x0
   3f728:	b.cs	3f704 <print_insn_aarch64@@Base+0x424>  // b.hs, b.nlast
   3f72c:	sub	x1, x0, x21
   3f730:	sub	w0, w0, w21
   3f734:	cmp	x1, w20, uxtw
   3f738:	csel	w20, w0, w20, cc  // cc = lo, ul, last
   3f73c:	and	x0, x21, #0x1
   3f740:	cmp	w20, #0x3
   3f744:	mov	x1, #0x2                   	// #2
   3f748:	sub	x0, x1, x0
   3f74c:	csel	w20, w20, w0, ne  // ne = any
   3f750:	b	3f4c4 <print_insn_aarch64@@Base+0x1e4>
   3f754:	ldr	w6, [x19, #80]
   3f758:	ldr	x1, [x19, #48]
   3f75c:	b	3f658 <print_insn_aarch64@@Base+0x378>
   3f760:	ldr	x3, [x19, #112]
   3f764:	mov	x1, x21
   3f768:	mov	x2, x19
   3f76c:	blr	x3
   3f770:	mov	w0, #0xffffffff            	// #-1
   3f774:	b	3f49c <print_insn_aarch64@@Base+0x1bc>

000000000003f778 <print_aarch64_disassembler_options@@Base>:
   3f778:	stp	x29, x30, [sp, #-32]!
   3f77c:	mov	w2, #0x5                   	// #5
   3f780:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3f784:	mov	x29, sp
   3f788:	stp	x19, x20, [sp, #16]
   3f78c:	adrp	x20, 57000 <floatformat_from_double@@Base+0x210>
   3f790:	add	x20, x20, #0x250
   3f794:	mov	x19, x0
   3f798:	add	x1, x1, #0x1c0
   3f79c:	mov	x0, x20
   3f7a0:	bl	359e0 <dcgettext@plt>
   3f7a4:	mov	x1, x0
   3f7a8:	mov	x0, x19
   3f7ac:	bl	35b80 <fprintf@plt>
   3f7b0:	mov	w2, #0x5                   	// #5
   3f7b4:	mov	x0, x20
   3f7b8:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3f7bc:	add	x1, x1, #0x258
   3f7c0:	bl	359e0 <dcgettext@plt>
   3f7c4:	mov	x1, x0
   3f7c8:	mov	x0, x19
   3f7cc:	bl	35b80 <fprintf@plt>
   3f7d0:	mov	w2, #0x5                   	// #5
   3f7d4:	mov	x0, x20
   3f7d8:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3f7dc:	add	x1, x1, #0x290
   3f7e0:	bl	359e0 <dcgettext@plt>
   3f7e4:	mov	x1, x0
   3f7e8:	mov	x0, x19
   3f7ec:	bl	35b80 <fprintf@plt>
   3f7f0:	mov	w2, #0x5                   	// #5
   3f7f4:	mov	x0, x20
   3f7f8:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3f7fc:	add	x1, x1, #0x2c8
   3f800:	bl	359e0 <dcgettext@plt>
   3f804:	mov	x1, x0
   3f808:	mov	x0, x19
   3f80c:	bl	35b80 <fprintf@plt>
   3f810:	mov	w2, #0x5                   	// #5
   3f814:	mov	x0, x20
   3f818:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3f81c:	add	x1, x1, #0x300
   3f820:	bl	359e0 <dcgettext@plt>
   3f824:	mov	x1, x0
   3f828:	mov	x0, x19
   3f82c:	bl	35b80 <fprintf@plt>
   3f830:	mov	x0, x20
   3f834:	mov	w2, #0x5                   	// #5
   3f838:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3f83c:	add	x1, x1, #0x248
   3f840:	bl	359e0 <dcgettext@plt>
   3f844:	mov	x1, x0
   3f848:	mov	x0, x19
   3f84c:	ldp	x19, x20, [sp, #16]
   3f850:	ldp	x29, x30, [sp], #32
   3f854:	b	35b80 <fprintf@plt>
   3f858:	ldr	x2, [x0]
   3f85c:	mov	w3, #0xffffffff            	// #-1
   3f860:	ldr	x1, [x1]
   3f864:	cmp	x2, x1
   3f868:	cset	w0, hi  // hi = pmore
   3f86c:	csel	w0, w0, w3, cs  // cs = hs, nlast
   3f870:	ret
   3f874:	nop
   3f878:	and	w3, w1, #0x1f
   3f87c:	ubfx	x2, x1, #10, #5
   3f880:	ubfx	x0, x1, #23, #1
   3f884:	tbz	w1, #23, 3f89c <print_aarch64_disassembler_options@@Base+0x124>
   3f888:	ubfx	x4, x1, #5, #5
   3f88c:	cmp	w3, w4
   3f890:	ccmp	w4, w2, #0x4, ne  // ne = any
   3f894:	ccmp	w4, #0x1f, #0x4, eq  // eq = none
   3f898:	b.ne	3f8a8 <print_aarch64_disassembler_options@@Base+0x130>  // b.any
   3f89c:	cmp	w3, w2
   3f8a0:	ubfx	x1, x1, #22, #1
   3f8a4:	csel	w0, w1, wzr, eq  // eq = none
   3f8a8:	ret
   3f8ac:	nop
   3f8b0:	ubfx	x3, x1, #6, #1
   3f8b4:	and	w5, w1, #0x7f
   3f8b8:	cmp	w0, #0x8
   3f8bc:	ubfx	x1, x1, #7, #1
   3f8c0:	lsl	w2, w3, #2
   3f8c4:	lsl	w4, w3, #1
   3f8c8:	orr	w2, w2, w3, lsl #3
   3f8cc:	orr	w4, w4, w3
   3f8d0:	orr	w2, w2, w4
   3f8d4:	b.eq	3f900 <print_aarch64_disassembler_options@@Base+0x188>  // b.none
   3f8d8:	sub	w0, w0, #0x2
   3f8dc:	tst	w0, #0xfffffffd
   3f8e0:	b.ne	3f930 <print_aarch64_disassembler_options@@Base+0x1b8>  // b.any
   3f8e4:	lsl	w0, w3, #30
   3f8e8:	lsl	w5, w5, #19
   3f8ec:	eor	w0, w0, #0x40000000
   3f8f0:	orr	w1, w5, w1, lsl #31
   3f8f4:	orr	w2, w0, w2, lsl #26
   3f8f8:	orr	w0, w2, w1
   3f8fc:	ret
   3f900:	lsl	w6, w3, #25
   3f904:	lsl	w0, w3, #23
   3f908:	lsl	w4, w3, #30
   3f90c:	orr	w1, w6, w1, lsl #31
   3f910:	orr	w0, w0, w3, lsl #24
   3f914:	eor	w3, w4, #0x40000000
   3f918:	orr	w0, w1, w0
   3f91c:	orr	w5, w3, w5, lsl #16
   3f920:	orr	w0, w0, w5
   3f924:	orr	w0, w0, w2, lsl #26
   3f928:	lsl	x0, x0, #32
   3f92c:	ret
   3f930:	stp	x29, x30, [sp, #-16]!
   3f934:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   3f938:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3f93c:	mov	x29, sp
   3f940:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   3f944:	add	x3, x3, #0x9c8
   3f948:	add	x1, x1, #0x7d8
   3f94c:	add	x0, x0, #0x4b0
   3f950:	mov	w2, #0xbac                 	// #2988
   3f954:	bl	35ac0 <__assert_fail@plt>
   3f958:	stp	x29, x30, [sp, #-80]!
   3f95c:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   3f960:	mov	x29, sp
   3f964:	ldr	w6, [x2, #32]
   3f968:	ldr	x5, [x5, #3904]
   3f96c:	stp	x19, x20, [sp, #16]
   3f970:	ubfiz	x8, x6, #4, #32
   3f974:	ldr	x7, [x2, #40]
   3f978:	stp	x21, x22, [sp, #32]
   3f97c:	mov	x19, x0
   3f980:	str	x23, [sp, #48]
   3f984:	mov	x21, x3
   3f988:	mov	x20, x1
   3f98c:	mov	x22, x4
   3f990:	ldr	x3, [x5, x8]
   3f994:	cbz	x7, 3fa10 <print_aarch64_disassembler_options@@Base+0x298>
   3f998:	mov	x6, #0xd70b                	// #55051
   3f99c:	add	x23, sp, #0x40
   3f9a0:	movk	x6, #0x70a3, lsl #16
   3f9a4:	adrp	x2, 58000 <xexit@@Base+0xe08>
   3f9a8:	movk	x6, #0xa3d, lsl #32
   3f9ac:	mov	x0, x23
   3f9b0:	movk	x6, #0xa3d7, lsl #48
   3f9b4:	add	x2, x2, #0x800
   3f9b8:	mov	x1, #0x10                  	// #16
   3f9bc:	smulh	x6, x7, x6
   3f9c0:	add	x6, x6, x7
   3f9c4:	asr	x6, x6, #6
   3f9c8:	sub	x6, x6, x7, asr #63
   3f9cc:	add	x4, x6, x6, lsl #1
   3f9d0:	add	x4, x6, x4, lsl #3
   3f9d4:	sub	x4, x7, x4, lsl #2
   3f9d8:	bl	35380 <snprintf@plt>
   3f9dc:	mov	x5, x23
   3f9e0:	mov	x4, x22
   3f9e4:	mov	x3, x21
   3f9e8:	mov	x1, x20
   3f9ec:	mov	x0, x19
   3f9f0:	adrp	x2, 58000 <xexit@@Base+0xe08>
   3f9f4:	add	x2, x2, #0x810
   3f9f8:	bl	35380 <snprintf@plt>
   3f9fc:	ldp	x19, x20, [sp, #16]
   3fa00:	ldp	x21, x22, [sp, #32]
   3fa04:	ldr	x23, [sp, #48]
   3fa08:	ldp	x29, x30, [sp], #80
   3fa0c:	ret
   3fa10:	ldrb	w0, [x2, #4]
   3fa14:	cmp	w0, #0x5
   3fa18:	b.eq	3fa40 <print_aarch64_disassembler_options@@Base+0x2c8>  // b.none
   3fa1c:	add	x23, sp, #0x40
   3fa20:	cmp	w6, #0x5
   3fa24:	b.eq	3fa4c <print_aarch64_disassembler_options@@Base+0x2d4>  // b.none
   3fa28:	mov	x0, x23
   3fa2c:	adrp	x2, 58000 <xexit@@Base+0xe08>
   3fa30:	mov	x1, #0x10                  	// #16
   3fa34:	add	x2, x2, #0x7f8
   3fa38:	bl	35380 <snprintf@plt>
   3fa3c:	b	3f9dc <print_aarch64_disassembler_options@@Base+0x264>
   3fa40:	ldrb	w0, [x2, #36]
   3fa44:	tbnz	w0, #1, 3f998 <print_aarch64_disassembler_options@@Base+0x220>
   3fa48:	b	3fa1c <print_aarch64_disassembler_options@@Base+0x2a4>
   3fa4c:	strb	wzr, [sp, #64]
   3fa50:	b	3f9dc <print_aarch64_disassembler_options@@Base+0x264>
   3fa54:	nop
   3fa58:	stp	x29, x30, [sp, #-16]!
   3fa5c:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   3fa60:	add	x3, x3, #0x9c8
   3fa64:	mov	x29, sp
   3fa68:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   3fa6c:	adrp	x0, 58000 <xexit@@Base+0xe08>
   3fa70:	add	x3, x3, #0x10
   3fa74:	add	x1, x1, #0x288
   3fa78:	add	x0, x0, #0x68
   3fa7c:	mov	w2, #0x12e                 	// #302
   3fa80:	bl	35ac0 <__assert_fail@plt>
   3fa84:	nop
   3fa88:	stp	x29, x30, [sp, #-16]!
   3fa8c:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   3fa90:	add	x3, x3, #0x9c8
   3fa94:	mov	x29, sp
   3fa98:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3fa9c:	adrp	x0, 58000 <xexit@@Base+0xe08>
   3faa0:	add	x3, x3, #0x30
   3faa4:	add	x1, x1, #0x7d8
   3faa8:	add	x0, x0, #0x820
   3faac:	mov	w2, #0x222                 	// #546
   3fab0:	bl	35ac0 <__assert_fail@plt>
   3fab4:	nop
   3fab8:	stp	x29, x30, [sp, #-16]!
   3fabc:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   3fac0:	add	x3, x3, #0x9c8
   3fac4:	mov	x29, sp
   3fac8:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3facc:	adrp	x0, 58000 <xexit@@Base+0xe08>
   3fad0:	add	x3, x3, #0x50
   3fad4:	add	x1, x1, #0x7d8
   3fad8:	add	x0, x0, #0x830
   3fadc:	mov	w2, #0xb6d                 	// #2925
   3fae0:	bl	35ac0 <__assert_fail@plt>
   3fae4:	nop
   3fae8:	ldrb	w8, [x2, #28]
   3faec:	tbz	w8, #1, 3fb20 <print_aarch64_disassembler_options@@Base+0x3a8>
   3faf0:	ldr	w4, [x2, #20]
   3faf4:	tbz	w8, #2, 3fb70 <print_aarch64_disassembler_options@@Base+0x3f8>
   3faf8:	ldr	w2, [x2]
   3fafc:	mov	x5, x0
   3fb00:	mov	x6, x1
   3fb04:	mov	x7, x3
   3fb08:	cmp	w2, #0x58
   3fb0c:	b.ne	3fb58 <print_aarch64_disassembler_options@@Base+0x3e0>  // b.any
   3fb10:	cbnz	w4, 3fb58 <print_aarch64_disassembler_options@@Base+0x3e0>
   3fb14:	adrp	x2, 58000 <xexit@@Base+0xe08>
   3fb18:	add	x2, x2, #0x878
   3fb1c:	b	35380 <snprintf@plt>
   3fb20:	ldrb	w4, [x2, #36]
   3fb24:	tbz	w4, #0, 3fb44 <print_aarch64_disassembler_options@@Base+0x3cc>
   3fb28:	ldr	w4, [x2, #32]
   3fb2c:	cmp	w4, #0xf
   3fb30:	b.ne	3fb88 <print_aarch64_disassembler_options@@Base+0x410>  // b.any
   3fb34:	ldr	w4, [x2, #20]
   3fb38:	adrp	x2, 58000 <xexit@@Base+0xe08>
   3fb3c:	add	x2, x2, #0x8d0
   3fb40:	b	35380 <snprintf@plt>
   3fb44:	ldr	w4, [x2, #20]
   3fb48:	cbz	w4, 3fb7c <print_aarch64_disassembler_options@@Base+0x404>
   3fb4c:	adrp	x2, 58000 <xexit@@Base+0xe08>
   3fb50:	add	x2, x2, #0x8e8
   3fb54:	b	35380 <snprintf@plt>
   3fb58:	adrp	x2, 58000 <xexit@@Base+0xe08>
   3fb5c:	mov	x3, x7
   3fb60:	mov	x1, x6
   3fb64:	mov	x0, x5
   3fb68:	add	x2, x2, #0x880
   3fb6c:	b	35380 <snprintf@plt>
   3fb70:	adrp	x2, 58000 <xexit@@Base+0xe08>
   3fb74:	add	x2, x2, #0x890
   3fb78:	b	35380 <snprintf@plt>
   3fb7c:	adrp	x2, 58000 <xexit@@Base+0xe08>
   3fb80:	add	x2, x2, #0x8f8
   3fb84:	b	35380 <snprintf@plt>
   3fb88:	stp	x29, x30, [sp, #-16]!
   3fb8c:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   3fb90:	add	x3, x3, #0x9c8
   3fb94:	mov	x29, sp
   3fb98:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3fb9c:	adrp	x0, 58000 <xexit@@Base+0xe08>
   3fba0:	add	x3, x3, #0x68
   3fba4:	add	x1, x1, #0x7d8
   3fba8:	add	x0, x0, #0x8a0
   3fbac:	mov	w2, #0xc05                 	// #3077
   3fbb0:	bl	35ac0 <__assert_fail@plt>
   3fbb4:	nop
   3fbb8:	mov	x2, x0
   3fbbc:	stp	x29, x30, [sp, #-16]!
   3fbc0:	mov	w0, w1
   3fbc4:	mov	x29, sp
   3fbc8:	ldr	x1, [x2, #8]
   3fbcc:	cbz	x1, 3fc34 <print_aarch64_disassembler_options@@Base+0x4bc>
   3fbd0:	ldr	w1, [x1, #40]
   3fbd4:	cmp	w1, #0x21
   3fbd8:	b.ne	3fc10 <print_aarch64_disassembler_options@@Base+0x498>  // b.any
   3fbdc:	cbnz	w3, 3fc08 <print_aarch64_disassembler_options@@Base+0x490>
   3fbe0:	cbz	w0, 3fc58 <print_aarch64_disassembler_options@@Base+0x4e0>
   3fbe4:	mov	w4, #0x3e                  	// #62
   3fbe8:	mov	w3, #0x7d                  	// #125
   3fbec:	mov	w2, #0x2                   	// #2
   3fbf0:	mov	w1, #0x0                   	// #0
   3fbf4:	bl	35390 <extract_fields@plt>
   3fbf8:	cmp	w0, #0x3
   3fbfc:	cset	w0, eq  // eq = none
   3fc00:	ldp	x29, x30, [sp], #16
   3fc04:	ret
   3fc08:	ldr	w0, [x2]
   3fc0c:	b	3fbe0 <print_aarch64_disassembler_options@@Base+0x468>
   3fc10:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   3fc14:	add	x3, x3, #0x9c8
   3fc18:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3fc1c:	adrp	x0, 58000 <xexit@@Base+0xe08>
   3fc20:	add	x3, x3, #0x88
   3fc24:	add	x1, x1, #0x7d8
   3fc28:	add	x0, x0, #0x910
   3fc2c:	mov	w2, #0x12b8                	// #4792
   3fc30:	bl	35ac0 <__assert_fail@plt>
   3fc34:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   3fc38:	add	x3, x3, #0x9c8
   3fc3c:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3fc40:	adrp	x0, 58000 <xexit@@Base+0xe08>
   3fc44:	add	x3, x3, #0x88
   3fc48:	add	x1, x1, #0x7d8
   3fc4c:	add	x0, x0, #0x900
   3fc50:	mov	w2, #0x12b7                	// #4791
   3fc54:	bl	35ac0 <__assert_fail@plt>
   3fc58:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   3fc5c:	add	x3, x3, #0x9c8
   3fc60:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3fc64:	adrp	x0, 58000 <xexit@@Base+0xe08>
   3fc68:	add	x3, x3, #0x88
   3fc6c:	add	x1, x1, #0x7d8
   3fc70:	add	x0, x0, #0x940
   3fc74:	mov	w2, #0x12ba                	// #4794
   3fc78:	bl	35ac0 <__assert_fail@plt>
   3fc7c:	nop

000000000003fc80 <aarch64_get_operand_class@@Base>:
   3fc80:	ubfiz	x2, x0, #1, #32
   3fc84:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3fc88:	add	x0, x2, w0, uxtw
   3fc8c:	ldr	x1, [x1, #4032]
   3fc90:	lsl	x0, x0, #4
   3fc94:	ldr	w0, [x1, x0]
   3fc98:	ret
   3fc9c:	nop

000000000003fca0 <aarch64_get_operand_name@@Base>:
   3fca0:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3fca4:	ubfiz	x2, x0, #1, #32
   3fca8:	add	x0, x2, w0, uxtw
   3fcac:	ldr	x1, [x1, #4032]
   3fcb0:	add	x0, x1, x0, lsl #4
   3fcb4:	ldr	x0, [x0, #8]
   3fcb8:	ret
   3fcbc:	nop

000000000003fcc0 <aarch64_get_operand_desc@@Base>:
   3fcc0:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3fcc4:	ubfiz	x2, x0, #1, #32
   3fcc8:	add	x0, x2, w0, uxtw
   3fccc:	ldr	x1, [x1, #4032]
   3fcd0:	add	x0, x1, x0, lsl #4
   3fcd4:	ldr	x0, [x0, #40]
   3fcd8:	ret
   3fcdc:	nop

000000000003fce0 <get_cond_from_value@@Base>:
   3fce0:	cmp	w0, #0xf
   3fce4:	b.hi	3fcfc <get_cond_from_value@@Base+0x1c>  // b.pmore
   3fce8:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3fcec:	mov	w2, #0x28                  	// #40
   3fcf0:	ldr	x1, [x1, #4000]
   3fcf4:	umaddl	x0, w0, w2, x1
   3fcf8:	ret
   3fcfc:	stp	x29, x30, [sp, #-16]!
   3fd00:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   3fd04:	add	x3, x3, #0x9c8
   3fd08:	mov	x29, sp
   3fd0c:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3fd10:	adrp	x0, 58000 <xexit@@Base+0xe08>
   3fd14:	add	x3, x3, #0x98
   3fd18:	add	x1, x1, #0x7d8
   3fd1c:	add	x0, x0, #0x948
   3fd20:	mov	w2, #0x178                 	// #376
   3fd24:	bl	35ac0 <__assert_fail@plt>

000000000003fd28 <get_inverted_cond@@Base>:
   3fd28:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3fd2c:	ldr	w0, [x0, #32]
   3fd30:	mov	w2, #0x28                  	// #40
   3fd34:	ldr	x1, [x1, #4000]
   3fd38:	eor	w0, w0, #0x1
   3fd3c:	umaddl	x0, w0, w2, x1
   3fd40:	ret
   3fd44:	nop

000000000003fd48 <aarch64_get_operand_modifier@@Base>:
   3fd48:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3fd4c:	ldr	x1, [x1, #3904]
   3fd50:	sub	x0, x0, x1
   3fd54:	ubfx	x0, x0, #4, #32
   3fd58:	ret
   3fd5c:	nop

000000000003fd60 <aarch64_get_operand_modifier_value@@Base>:
   3fd60:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3fd64:	ubfiz	x0, x0, #4, #32
   3fd68:	ldr	x1, [x1, #3904]
   3fd6c:	add	x1, x1, x0
   3fd70:	ldr	w0, [x1, #8]
   3fd74:	ret

000000000003fd78 <aarch64_get_operand_modifier_from_value@@Base>:
   3fd78:	cmp	w1, #0x1
   3fd7c:	add	w2, w0, #0x6
   3fd80:	mov	w1, #0x5                   	// #5
   3fd84:	sub	w0, w1, w0
   3fd88:	csel	w0, w0, w2, ne  // ne = any
   3fd8c:	ret

000000000003fd90 <aarch64_extend_operator_p@@Base>:
   3fd90:	sub	w0, w0, #0x6
   3fd94:	cmp	w0, #0x7
   3fd98:	cset	w0, ls  // ls = plast
   3fd9c:	ret

000000000003fda0 <aarch64_stack_pointer_p@@Base>:
   3fda0:	stp	x29, x30, [sp, #-32]!
   3fda4:	mov	x29, sp
   3fda8:	str	x19, [sp, #16]
   3fdac:	mov	x19, x0
   3fdb0:	ldr	w0, [x0]
   3fdb4:	bl	35710 <aarch64_get_operand_class@plt>
   3fdb8:	cmp	w0, #0x1
   3fdbc:	b.eq	3fdd0 <aarch64_stack_pointer_p@@Base+0x30>  // b.none
   3fdc0:	mov	w0, #0x0                   	// #0
   3fdc4:	ldr	x19, [sp, #16]
   3fdc8:	ldp	x29, x30, [sp], #32
   3fdcc:	ret
   3fdd0:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3fdd4:	ldr	w0, [x19]
   3fdd8:	ldr	x1, [x1, #4032]
   3fddc:	add	x0, x0, x0, lsl #1
   3fde0:	add	x0, x1, x0, lsl #4
   3fde4:	ldr	w1, [x0, #16]
   3fde8:	ubfx	x0, x1, #4, #1
   3fdec:	tbz	w1, #4, 3fdc4 <aarch64_stack_pointer_p@@Base+0x24>
   3fdf0:	ldr	w0, [x19, #16]
   3fdf4:	ldr	x19, [sp, #16]
   3fdf8:	cmp	w0, #0x1f
   3fdfc:	cset	w0, eq  // eq = none
   3fe00:	ldp	x29, x30, [sp], #32
   3fe04:	ret

000000000003fe08 <aarch64_zero_register_p@@Base>:
   3fe08:	stp	x29, x30, [sp, #-32]!
   3fe0c:	mov	x29, sp
   3fe10:	str	x19, [sp, #16]
   3fe14:	mov	x19, x0
   3fe18:	ldr	w0, [x0]
   3fe1c:	bl	35710 <aarch64_get_operand_class@plt>
   3fe20:	cmp	w0, #0x1
   3fe24:	b.eq	3fe38 <aarch64_zero_register_p@@Base+0x30>  // b.none
   3fe28:	mov	w0, #0x0                   	// #0
   3fe2c:	ldr	x19, [sp, #16]
   3fe30:	ldp	x29, x30, [sp], #32
   3fe34:	ret
   3fe38:	adrp	x2, a2000 <aarch64_operands@@Base+0x16bc0>
   3fe3c:	ldr	w1, [x19]
   3fe40:	mov	w0, #0x0                   	// #0
   3fe44:	ldr	x2, [x2, #4032]
   3fe48:	add	x1, x1, x1, lsl #1
   3fe4c:	add	x1, x2, x1, lsl #4
   3fe50:	ldr	w1, [x1, #16]
   3fe54:	tbnz	w1, #4, 3fe2c <aarch64_zero_register_p@@Base+0x24>
   3fe58:	ldr	w0, [x19, #16]
   3fe5c:	ldr	x19, [sp, #16]
   3fe60:	cmp	w0, #0x1f
   3fe64:	cset	w0, eq  // eq = none
   3fe68:	ldp	x29, x30, [sp], #32
   3fe6c:	ret

000000000003fe70 <aarch64_get_expected_qualifier@@Base>:
   3fe70:	ldrb	w5, [x0, w3, sxtw]
   3fe74:	ands	w2, w2, #0xff
   3fe78:	b.eq	3fed8 <aarch64_get_expected_qualifier@@Base+0x68>  // b.none
   3fe7c:	sxtw	x4, w3
   3fe80:	mov	w6, #0xffffffff            	// #-1
   3fe84:	add	x4, x0, x4
   3fe88:	mov	w3, #0x0                   	// #0
   3fe8c:	b	3fea4 <aarch64_get_expected_qualifier@@Base+0x34>
   3fe90:	add	w3, w3, #0x1
   3fe94:	add	x4, x4, #0x6
   3fe98:	cmp	w3, #0xa
   3fe9c:	b.eq	3fec8 <aarch64_get_expected_qualifier@@Base+0x58>  // b.none
   3fea0:	ldrb	w5, [x4]
   3fea4:	cmp	w2, w5
   3fea8:	b.ne	3fe90 <aarch64_get_expected_qualifier@@Base+0x20>  // b.any
   3feac:	cmn	w6, #0x1
   3feb0:	b.ne	3ff08 <aarch64_get_expected_qualifier@@Base+0x98>  // b.any
   3feb4:	mov	w6, w3
   3feb8:	add	w3, w3, #0x1
   3febc:	add	x4, x4, #0x6
   3fec0:	cmp	w3, #0xa
   3fec4:	b.ne	3fea0 <aarch64_get_expected_qualifier@@Base+0x30>  // b.any
   3fec8:	mov	w2, #0x6                   	// #6
   3fecc:	smaddl	x0, w6, w2, x0
   3fed0:	ldrb	w0, [x0, w1, sxtw]
   3fed4:	ret
   3fed8:	cbz	w5, 3fed0 <aarch64_get_expected_qualifier@@Base+0x60>
   3fedc:	stp	x29, x30, [sp, #-16]!
   3fee0:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   3fee4:	add	x3, x3, #0x9c8
   3fee8:	mov	x29, sp
   3feec:	adrp	x1, 58000 <xexit@@Base+0xe08>
   3fef0:	adrp	x0, 58000 <xexit@@Base+0xe08>
   3fef4:	add	x3, x3, #0xb0
   3fef8:	add	x1, x1, #0x7d8
   3fefc:	add	x0, x0, #0x958
   3ff00:	mov	w2, #0x28f                 	// #655
   3ff04:	bl	35ac0 <__assert_fail@plt>
   3ff08:	mov	w0, #0x0                   	// #0
   3ff0c:	ret

000000000003ff10 <aarch64_get_qualifier_name@@Base>:
   3ff10:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   3ff14:	ubfiz	x0, x0, #5, #8
   3ff18:	ldr	x1, [x1, #3776]
   3ff1c:	add	x1, x1, x0
   3ff20:	ldr	x0, [x1, #16]
   3ff24:	ret
   3ff28:	sub	sp, sp, #0xa0
   3ff2c:	stp	x29, x30, [sp, #64]
   3ff30:	add	x29, sp, #0x40
   3ff34:	stp	x19, x20, [sp, #80]
   3ff38:	mov	x20, x2
   3ff3c:	ldrb	w19, [x2, #16]
   3ff40:	stp	x21, x22, [sp, #96]
   3ff44:	and	w22, w19, #0x1f
   3ff48:	stp	x23, x24, [sp, #112]
   3ff4c:	ubfx	x19, x19, #5, #3
   3ff50:	mov	x24, x3
   3ff54:	stp	x25, x26, [sp, #128]
   3ff58:	mov	x25, x0
   3ff5c:	mov	x26, x1
   3ff60:	ldrb	w0, [x2, #4]
   3ff64:	add	w21, w19, w22
   3ff68:	sub	w21, w21, #0x1
   3ff6c:	and	w21, w21, #0x1f
   3ff70:	bl	353f0 <aarch64_get_qualifier_name@plt>
   3ff74:	mov	x23, x0
   3ff78:	ldr	w1, [x20]
   3ff7c:	cmp	w1, #0x26
   3ff80:	b.eq	40084 <aarch64_get_qualifier_name@@Base+0x174>  // b.none
   3ff84:	sub	w0, w19, #0x1
   3ff88:	cmp	w0, #0x3
   3ff8c:	b.hi	401c4 <aarch64_get_qualifier_name@@Base+0x2b4>  // b.pmore
   3ff90:	ldrb	w0, [x20, #17]
   3ff94:	tbnz	w0, #0, 40098 <aarch64_get_qualifier_name@@Base+0x188>
   3ff98:	strb	wzr, [sp, #152]
   3ff9c:	cmp	w19, #0x2
   3ffa0:	ccmp	w22, w21, #0x0, gt
   3ffa4:	b.lt	400e8 <aarch64_get_qualifier_name@@Base+0x1d8>  // b.tstop
   3ffa8:	add	w7, w22, #0x1
   3ffac:	add	w0, w22, #0x2
   3ffb0:	cmp	w19, #0x3
   3ffb4:	and	w7, w7, #0x1f
   3ffb8:	and	w0, w0, #0x1f
   3ffbc:	b.eq	40174 <aarch64_get_qualifier_name@@Base+0x264>  // b.none
   3ffc0:	b.hi	4001c <aarch64_get_qualifier_name@@Base+0x10c>  // b.pmore
   3ffc4:	cmp	w19, #0x1
   3ffc8:	b.eq	40134 <aarch64_get_qualifier_name@@Base+0x224>  // b.none
   3ffcc:	cmp	w19, #0x2
   3ffd0:	b.ne	40000 <aarch64_get_qualifier_name@@Base+0xf0>  // b.any
   3ffd4:	add	x0, sp, #0x98
   3ffd8:	stp	x23, x0, [sp]
   3ffdc:	adrp	x2, 58000 <xexit@@Base+0xe08>
   3ffe0:	mov	x5, x23
   3ffe4:	mov	w4, w22
   3ffe8:	mov	x1, x26
   3ffec:	mov	x6, x24
   3fff0:	add	x2, x2, #0xa18
   3fff4:	mov	x3, x24
   3fff8:	mov	x0, x25
   3fffc:	bl	35380 <snprintf@plt>
   40000:	ldp	x29, x30, [sp, #64]
   40004:	ldp	x19, x20, [sp, #80]
   40008:	ldp	x21, x22, [sp, #96]
   4000c:	ldp	x23, x24, [sp, #112]
   40010:	ldp	x25, x26, [sp, #128]
   40014:	add	sp, sp, #0xa0
   40018:	ret
   4001c:	cmp	w19, #0x4
   40020:	b.ne	40000 <aarch64_get_qualifier_name@@Base+0xf0>  // b.any
   40024:	add	w2, w22, #0x3
   40028:	add	x3, sp, #0x98
   4002c:	and	w2, w2, #0x1f
   40030:	stp	x23, x24, [sp]
   40034:	mov	x5, x23
   40038:	str	w0, [sp, #16]
   4003c:	mov	x1, x26
   40040:	stp	x23, x24, [sp, #24]
   40044:	mov	w4, w22
   40048:	mov	x6, x24
   4004c:	str	w2, [sp, #40]
   40050:	mov	x0, x25
   40054:	stp	x23, x3, [sp, #48]
   40058:	adrp	x2, 58000 <xexit@@Base+0xe08>
   4005c:	mov	x3, x24
   40060:	add	x2, x2, #0xa50
   40064:	bl	35380 <snprintf@plt>
   40068:	ldp	x29, x30, [sp, #64]
   4006c:	ldp	x19, x20, [sp, #80]
   40070:	ldp	x21, x22, [sp, #96]
   40074:	ldp	x23, x24, [sp, #112]
   40078:	ldp	x25, x26, [sp, #128]
   4007c:	add	sp, sp, #0xa0
   40080:	ret
   40084:	ldrb	w0, [x20, #17]
   40088:	tbz	w0, #0, 401e8 <aarch64_get_qualifier_name@@Base+0x2d8>
   4008c:	sub	w0, w19, #0x1
   40090:	cmp	w0, #0x3
   40094:	b.hi	401c4 <aarch64_get_qualifier_name@@Base+0x2b4>  // b.pmore
   40098:	mov	x4, #0xd70b                	// #55051
   4009c:	add	x0, sp, #0x98
   400a0:	movk	x4, #0x70a3, lsl #16
   400a4:	adrp	x2, 58000 <xexit@@Base+0xe08>
   400a8:	ldr	x5, [x20, #24]
   400ac:	movk	x4, #0xa3d, lsl #32
   400b0:	movk	x4, #0xa3d7, lsl #48
   400b4:	add	x2, x2, #0x9e8
   400b8:	mov	x1, #0x8                   	// #8
   400bc:	smulh	x4, x5, x4
   400c0:	add	x4, x4, x5
   400c4:	asr	x4, x4, #6
   400c8:	sub	x4, x4, x5, asr #63
   400cc:	add	x3, x4, x4, lsl #1
   400d0:	add	x3, x4, x3, lsl #3
   400d4:	sub	x3, x5, x3, lsl #2
   400d8:	bl	35380 <snprintf@plt>
   400dc:	cmp	w19, #0x2
   400e0:	ccmp	w22, w21, #0x0, gt
   400e4:	b.ge	3ffa8 <aarch64_get_qualifier_name@@Base+0x98>  // b.tcont
   400e8:	add	x0, sp, #0x98
   400ec:	stp	x23, x0, [sp]
   400f0:	mov	w7, w21
   400f4:	mov	x5, x23
   400f8:	mov	w4, w22
   400fc:	mov	x1, x26
   40100:	mov	x6, x24
   40104:	mov	x3, x24
   40108:	mov	x0, x25
   4010c:	adrp	x2, 58000 <xexit@@Base+0xe08>
   40110:	add	x2, x2, #0x9f0
   40114:	bl	35380 <snprintf@plt>
   40118:	ldp	x29, x30, [sp, #64]
   4011c:	ldp	x19, x20, [sp, #80]
   40120:	ldp	x21, x22, [sp, #96]
   40124:	ldp	x23, x24, [sp, #112]
   40128:	ldp	x25, x26, [sp, #128]
   4012c:	add	sp, sp, #0xa0
   40130:	ret
   40134:	mov	x5, x23
   40138:	mov	w4, w22
   4013c:	mov	x3, x24
   40140:	mov	x1, x26
   40144:	add	x6, sp, #0x98
   40148:	mov	x0, x25
   4014c:	adrp	x2, 58000 <xexit@@Base+0xe08>
   40150:	add	x2, x2, #0xa08
   40154:	bl	35380 <snprintf@plt>
   40158:	ldp	x29, x30, [sp, #64]
   4015c:	ldp	x19, x20, [sp, #80]
   40160:	ldp	x21, x22, [sp, #96]
   40164:	ldp	x23, x24, [sp, #112]
   40168:	ldp	x25, x26, [sp, #128]
   4016c:	add	sp, sp, #0xa0
   40170:	ret
   40174:	add	x1, sp, #0x98
   40178:	stp	x23, x24, [sp]
   4017c:	mov	x5, x23
   40180:	str	w0, [sp, #16]
   40184:	mov	w4, w22
   40188:	stp	x23, x1, [sp, #24]
   4018c:	mov	x6, x24
   40190:	mov	x3, x24
   40194:	mov	x1, x26
   40198:	mov	x0, x25
   4019c:	adrp	x2, 58000 <xexit@@Base+0xe08>
   401a0:	add	x2, x2, #0xa30
   401a4:	bl	35380 <snprintf@plt>
   401a8:	ldp	x29, x30, [sp, #64]
   401ac:	ldp	x19, x20, [sp, #80]
   401b0:	ldp	x21, x22, [sp, #96]
   401b4:	ldp	x23, x24, [sp, #112]
   401b8:	ldp	x25, x26, [sp, #128]
   401bc:	add	sp, sp, #0xa0
   401c0:	ret
   401c4:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   401c8:	add	x3, x3, #0x9c8
   401cc:	adrp	x1, 58000 <xexit@@Base+0xe08>
   401d0:	adrp	x0, 58000 <xexit@@Base+0xe08>
   401d4:	add	x3, x3, #0xd0
   401d8:	add	x1, x1, #0x7d8
   401dc:	add	x0, x0, #0x9c8
   401e0:	mov	w2, #0xbc0                 	// #3008
   401e4:	bl	35ac0 <__assert_fail@plt>
   401e8:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   401ec:	add	x3, x3, #0x9c8
   401f0:	adrp	x1, 58000 <xexit@@Base+0xe08>
   401f4:	adrp	x0, 58000 <xexit@@Base+0xe08>
   401f8:	add	x3, x3, #0xd0
   401fc:	add	x1, x1, #0x7d8
   40200:	add	x0, x0, #0x988
   40204:	mov	w2, #0xbbf                 	// #3007
   40208:	bl	35ac0 <__assert_fail@plt>
   4020c:	nop

0000000000040210 <aarch64_get_qualifier_esize@@Base>:
   40210:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   40214:	ubfiz	x0, x0, #5, #8
   40218:	ldr	x1, [x1, #3776]
   4021c:	add	x2, x1, x0
   40220:	ldr	w2, [x2, #24]
   40224:	cmp	w2, #0x1
   40228:	b.ne	40234 <aarch64_get_qualifier_esize@@Base+0x24>  // b.any
   4022c:	ldrb	w0, [x1, x0]
   40230:	ret
   40234:	stp	x29, x30, [sp, #-16]!
   40238:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   4023c:	add	x3, x3, #0x9c8
   40240:	mov	x29, sp
   40244:	adrp	x1, 58000 <xexit@@Base+0xe08>
   40248:	adrp	x0, 58000 <xexit@@Base+0xe08>
   4024c:	add	x3, x3, #0xe8
   40250:	add	x1, x1, #0x7d8
   40254:	add	x0, x0, #0xa78
   40258:	mov	w2, #0x30e                 	// #782
   4025c:	bl	35ac0 <__assert_fail@plt>

0000000000040260 <aarch64_select_operand_for_sizeq_field_coding@@Base>:
   40260:	stp	x29, x30, [sp, #-32]!
   40264:	mov	x29, sp
   40268:	stp	x19, x20, [sp, #16]
   4026c:	mov	x19, x0
   40270:	ldrb	w0, [x0, #56]
   40274:	sub	w1, w0, #0xd
   40278:	cmp	w1, #0x9
   4027c:	b.hi	402a8 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x48>  // b.pmore
   40280:	ldrb	w1, [x19, #57]
   40284:	cmp	w0, w1
   40288:	b.eq	402d4 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x74>  // b.none
   4028c:	sub	w1, w1, #0xd
   40290:	cmp	w1, #0x9
   40294:	b.ls	402e4 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x84>  // b.plast
   40298:	mov	w0, #0x0                   	// #0
   4029c:	ldp	x19, x20, [sp, #16]
   402a0:	ldp	x29, x30, [sp], #32
   402a4:	ret
   402a8:	sub	w0, w0, #0x5
   402ac:	cmp	w0, #0x4
   402b0:	b.hi	40298 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x38>  // b.pmore
   402b4:	ldrb	w0, [x19, #57]
   402b8:	sub	w0, w0, #0xd
   402bc:	cmp	w0, #0x9
   402c0:	b.hi	40298 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x38>  // b.pmore
   402c4:	ldrb	w0, [x19, #58]
   402c8:	cbnz	w0, 40298 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x38>
   402cc:	mov	w0, #0x1                   	// #1
   402d0:	b	4029c <aarch64_select_operand_for_sizeq_field_coding@@Base+0x3c>
   402d4:	ldrb	w1, [x19, #58]
   402d8:	sub	w1, w1, #0xd
   402dc:	cmp	w1, #0x9
   402e0:	b.ls	40368 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x108>  // b.plast
   402e4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   402e8:	tst	w0, #0xff
   402ec:	b.ne	40398 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x138>  // b.any
   402f0:	ldrb	w1, [x19, #57]
   402f4:	ldrb	w0, [x19, #56]
   402f8:	cmp	w1, w0
   402fc:	b.ne	40298 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x38>  // b.any
   40300:	ldrb	w0, [x19, #58]
   40304:	sub	w0, w0, #0xd
   40308:	cmp	w0, #0x9
   4030c:	b.hi	40298 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x38>  // b.pmore
   40310:	mov	w0, w1
   40314:	bl	35680 <aarch64_get_qualifier_esize@plt>
   40318:	tst	w0, #0xff
   4031c:	b.eq	40298 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x38>  // b.none
   40320:	ldrb	w0, [x19, #56]
   40324:	bl	35680 <aarch64_get_qualifier_esize@plt>
   40328:	and	w20, w0, #0xff
   4032c:	ldrb	w0, [x19, #58]
   40330:	bl	35680 <aarch64_get_qualifier_esize@plt>
   40334:	ubfiz	w0, w0, #1, #8
   40338:	cmp	w20, w0
   4033c:	b.ne	40298 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x38>  // b.any
   40340:	ldrb	w0, [x19, #56]
   40344:	bl	35680 <aarch64_get_qualifier_esize@plt>
   40348:	mov	w1, w0
   4034c:	ldrb	w0, [x19, #57]
   40350:	and	w19, w1, #0xff
   40354:	bl	35680 <aarch64_get_qualifier_esize@plt>
   40358:	cmp	w19, w0, uxtb
   4035c:	b.ne	40298 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x38>  // b.any
   40360:	mov	w0, #0x2                   	// #2
   40364:	b	4029c <aarch64_select_operand_for_sizeq_field_coding@@Base+0x3c>
   40368:	bl	35680 <aarch64_get_qualifier_esize@plt>
   4036c:	and	w20, w0, #0xff
   40370:	ldrb	w0, [x19, #57]
   40374:	bl	35680 <aarch64_get_qualifier_esize@plt>
   40378:	cmp	w20, w0, uxtb
   4037c:	b.eq	403c0 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x160>  // b.none
   40380:	ldrb	w1, [x19, #57]
   40384:	ldrb	w0, [x19, #56]
   40388:	sub	w2, w1, #0xd
   4038c:	cmp	w2, #0x9
   40390:	b.hi	402f8 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x98>  // b.pmore
   40394:	b	402e4 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x84>
   40398:	ldrb	w0, [x19, #56]
   4039c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   403a0:	and	w20, w0, #0xff
   403a4:	ldrb	w0, [x19, #57]
   403a8:	bl	35680 <aarch64_get_qualifier_esize@plt>
   403ac:	ubfiz	w0, w0, #1, #8
   403b0:	cmp	w20, w0
   403b4:	b.ne	402f0 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x90>  // b.any
   403b8:	mov	w0, #0x1                   	// #1
   403bc:	b	4029c <aarch64_select_operand_for_sizeq_field_coding@@Base+0x3c>
   403c0:	ldrb	w0, [x19, #56]
   403c4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   403c8:	and	w20, w0, #0xff
   403cc:	ldrb	w0, [x19, #58]
   403d0:	bl	35680 <aarch64_get_qualifier_esize@plt>
   403d4:	mov	w1, w0
   403d8:	mov	w0, #0x0                   	// #0
   403dc:	cmp	w20, w1, uxtb
   403e0:	b.ne	40380 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x120>  // b.any
   403e4:	b	4029c <aarch64_select_operand_for_sizeq_field_coding@@Base+0x3c>

00000000000403e8 <aarch64_get_qualifier_nelem@@Base>:
   403e8:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   403ec:	ubfiz	x0, x0, #5, #8
   403f0:	ldr	x1, [x1, #3776]
   403f4:	add	x0, x1, x0
   403f8:	ldr	w1, [x0, #24]
   403fc:	cmp	w1, #0x1
   40400:	b.ne	4040c <aarch64_get_qualifier_nelem@@Base+0x24>  // b.any
   40404:	ldrb	w0, [x0, #4]
   40408:	ret
   4040c:	stp	x29, x30, [sp, #-16]!
   40410:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   40414:	add	x3, x3, #0x9c8
   40418:	mov	x29, sp
   4041c:	adrp	x1, 58000 <xexit@@Base+0xe08>
   40420:	adrp	x0, 58000 <xexit@@Base+0xe08>
   40424:	add	x3, x3, #0x108
   40428:	add	x1, x1, #0x7d8
   4042c:	add	x0, x0, #0xa78
   40430:	mov	w2, #0x315                 	// #789
   40434:	bl	35ac0 <__assert_fail@plt>

0000000000040438 <aarch64_get_qualifier_standard_value@@Base>:
   40438:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   4043c:	ubfiz	x0, x0, #5, #8
   40440:	ldr	x1, [x1, #3776]
   40444:	add	x0, x1, x0
   40448:	ldr	w1, [x0, #24]
   4044c:	cmp	w1, #0x1
   40450:	b.ne	4045c <aarch64_get_qualifier_standard_value@@Base+0x24>  // b.any
   40454:	ldr	w0, [x0, #8]
   40458:	ret
   4045c:	stp	x29, x30, [sp, #-16]!
   40460:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   40464:	add	x3, x3, #0x9c8
   40468:	mov	x29, sp
   4046c:	adrp	x1, 58000 <xexit@@Base+0xe08>
   40470:	adrp	x0, 58000 <xexit@@Base+0xe08>
   40474:	add	x3, x3, #0x128
   40478:	add	x1, x1, #0x7d8
   4047c:	add	x0, x0, #0xa78
   40480:	mov	w2, #0x31c                 	// #796
   40484:	bl	35ac0 <__assert_fail@plt>

0000000000040488 <aarch64_is_destructive_by_operands@@Base>:
   40488:	ldr	w2, [x0, #32]
   4048c:	add	x0, x0, #0x24
   40490:	cbnz	w2, 4049c <aarch64_is_destructive_by_operands@@Base+0x14>
   40494:	b	404ac <aarch64_is_destructive_by_operands@@Base+0x24>
   40498:	b.eq	404b4 <aarch64_is_destructive_by_operands@@Base+0x2c>  // b.none
   4049c:	ldr	w1, [x0]
   404a0:	add	x0, x0, #0x4
   404a4:	cmp	w2, w1
   404a8:	cbnz	w1, 40498 <aarch64_is_destructive_by_operands@@Base+0x10>
   404ac:	mov	w0, #0x0                   	// #0
   404b0:	ret
   404b4:	mov	w0, #0x1                   	// #1
   404b8:	ret
   404bc:	nop

00000000000404c0 <aarch64_num_of_operands@@Base>:
   404c0:	add	x3, x0, #0x1c
   404c4:	mov	x1, #0x0                   	// #0
   404c8:	mov	w0, w1
   404cc:	add	x1, x1, #0x1
   404d0:	ldr	w2, [x3, x1, lsl #2]
   404d4:	cbnz	w2, 404c8 <aarch64_num_of_operands@@Base+0x8>
   404d8:	cmp	w0, #0x6
   404dc:	b.gt	404e4 <aarch64_num_of_operands@@Base+0x24>
   404e0:	ret
   404e4:	stp	x29, x30, [sp, #-16]!
   404e8:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   404ec:	add	x3, x3, #0x9c8
   404f0:	mov	x29, sp
   404f4:	adrp	x1, 58000 <xexit@@Base+0xe08>
   404f8:	adrp	x0, 58000 <xexit@@Base+0xe08>
   404fc:	add	x3, x3, #0x150
   40500:	add	x1, x1, #0x7d8
   40504:	add	x0, x0, #0xaa8
   40508:	mov	w2, #0x372                 	// #882
   4050c:	bl	35ac0 <__assert_fail@plt>

0000000000040510 <aarch64_find_best_match@@Base>:
   40510:	stp	x29, x30, [sp, #-112]!
   40514:	mov	x29, sp
   40518:	stp	x27, x28, [sp, #80]
   4051c:	mov	x27, x0
   40520:	ldr	x0, [x0, #8]
   40524:	stp	x21, x22, [sp, #32]
   40528:	mov	x22, x1
   4052c:	stp	x23, x24, [sp, #48]
   40530:	mov	w23, w2
   40534:	stp	x25, x26, [sp, #64]
   40538:	mov	x26, x3
   4053c:	bl	35170 <aarch64_num_of_operands@plt>
   40540:	cbz	w0, 40694 <aarch64_find_best_match@@Base+0x184>
   40544:	adrp	x28, a2000 <aarch64_operands@@Base+0x16bc0>
   40548:	cmp	w23, #0x0
   4054c:	ccmp	w0, w23, #0x4, ge  // ge = tcont
   40550:	mov	w24, w0
   40554:	ldr	x28, [x28, #4032]
   40558:	sub	w0, w0, #0x1
   4055c:	csel	w23, w0, w23, le
   40560:	add	x21, x22, #0x6
   40564:	mov	x2, x28
   40568:	mov	w25, #0x0                   	// #0
   4056c:	stp	x19, x20, [sp, #16]
   40570:	mov	x4, x22
   40574:	ldrb	w5, [x4]
   40578:	add	x4, x4, #0x1
   4057c:	cmp	x21, x4
   40580:	cbnz	w5, 405ac <aarch64_find_best_match@@Base+0x9c>
   40584:	b.ne	40574 <aarch64_find_best_match@@Base+0x64>  // b.any
   40588:	cbz	w25, 40718 <aarch64_find_best_match@@Base+0x208>
   4058c:	mov	w0, #0x0                   	// #0
   40590:	ldp	x19, x20, [sp, #16]
   40594:	ldp	x21, x22, [sp, #32]
   40598:	ldp	x23, x24, [sp, #48]
   4059c:	ldp	x25, x26, [sp, #64]
   405a0:	ldp	x27, x28, [sp, #80]
   405a4:	ldp	x29, x30, [sp], #112
   405a8:	ret
   405ac:	cmp	w23, #0x0
   405b0:	ccmp	w24, #0x0, #0x4, ge  // ge = tcont
   405b4:	b.le	4070c <aarch64_find_best_match@@Base+0x1fc>
   405b8:	add	x20, x27, #0x18
   405bc:	mov	x19, #0x0                   	// #0
   405c0:	ldrb	w4, [x20, #4]
   405c4:	cbz	w4, 40638 <aarch64_find_best_match@@Base+0x128>
   405c8:	ldrb	w1, [x22, x19]
   405cc:	cmp	w4, w1
   405d0:	b.eq	40638 <aarch64_find_best_match@@Base+0x128>  // b.none
   405d4:	cmp	w4, #0x3
   405d8:	b.eq	406b0 <aarch64_find_best_match@@Base+0x1a0>  // b.none
   405dc:	b.hi	40610 <aarch64_find_best_match@@Base+0x100>  // b.pmore
   405e0:	cmp	w4, #0x1
   405e4:	b.eq	406d4 <aarch64_find_best_match@@Base+0x1c4>  // b.none
   405e8:	cmp	w4, #0x2
   405ec:	b.ne	405f8 <aarch64_find_best_match@@Base+0xe8>  // b.any
   405f0:	cmp	w1, #0x4
   405f4:	b.eq	406dc <aarch64_find_best_match@@Base+0x1cc>  // b.none
   405f8:	add	w25, w25, #0x1
   405fc:	add	x22, x22, #0x6
   40600:	cmp	w25, #0xa
   40604:	add	x21, x21, #0x6
   40608:	b.ne	40570 <aarch64_find_best_match@@Base+0x60>  // b.any
   4060c:	b	4058c <aarch64_find_best_match@@Base+0x7c>
   40610:	cmp	w4, #0x4
   40614:	b.ne	405f8 <aarch64_find_best_match@@Base+0xe8>  // b.any
   40618:	cmp	w1, #0x2
   4061c:	b.ne	405f8 <aarch64_find_best_match@@Base+0xe8>  // b.any
   40620:	ldr	w0, [x20]
   40624:	add	x0, x0, x0, lsl #1
   40628:	add	x0, x2, x0, lsl #4
   4062c:	ldr	w0, [x0, #16]
   40630:	ubfx	x0, x0, #4, #1
   40634:	cbz	w0, 405f8 <aarch64_find_best_match@@Base+0xe8>
   40638:	add	w4, w19, #0x1
   4063c:	add	x20, x20, #0x38
   40640:	cmp	w24, w4
   40644:	add	x19, x19, #0x1
   40648:	ccmp	w23, w4, #0x1, gt
   4064c:	b.ge	405c0 <aarch64_find_best_match@@Base+0xb0>  // b.tcont
   40650:	mov	x0, #0x0                   	// #0
   40654:	ldrb	w1, [x22, x0]
   40658:	strb	w1, [x26, x0]
   4065c:	add	x0, x0, #0x1
   40660:	cmp	w23, w0
   40664:	b.ge	40654 <aarch64_find_best_match@@Base+0x144>  // b.tcont
   40668:	cmp	w23, #0x0
   4066c:	csel	w23, w23, wzr, ge  // ge = tcont
   40670:	add	w25, w23, #0x1
   40674:	cmp	w25, #0x5
   40678:	b.gt	40690 <aarch64_find_best_match@@Base+0x180>
   4067c:	sxtw	x25, w25
   40680:	strb	wzr, [x26, x25]
   40684:	add	x25, x25, #0x1
   40688:	cmp	w25, #0x5
   4068c:	b.le	40680 <aarch64_find_best_match@@Base+0x170>
   40690:	ldp	x19, x20, [sp, #16]
   40694:	mov	w0, #0x1                   	// #1
   40698:	ldp	x21, x22, [sp, #32]
   4069c:	ldp	x23, x24, [sp, #48]
   406a0:	ldp	x25, x26, [sp, #64]
   406a4:	ldp	x27, x28, [sp, #80]
   406a8:	ldp	x29, x30, [sp], #112
   406ac:	ret
   406b0:	cmp	w1, #0x1
   406b4:	b.ne	405f8 <aarch64_find_best_match@@Base+0xe8>  // b.any
   406b8:	ldr	w0, [x20]
   406bc:	add	x0, x0, x0, lsl #1
   406c0:	add	x0, x28, x0, lsl #4
   406c4:	ldr	w0, [x0, #16]
   406c8:	ubfx	x0, x0, #4, #1
   406cc:	cbnz	w0, 40638 <aarch64_find_best_match@@Base+0x128>
   406d0:	b	405f8 <aarch64_find_best_match@@Base+0xe8>
   406d4:	cmp	w1, #0x3
   406d8:	b.ne	405f8 <aarch64_find_best_match@@Base+0xe8>  // b.any
   406dc:	mov	x0, x20
   406e0:	str	x2, [sp, #104]
   406e4:	bl	35740 <aarch64_stack_pointer_p@plt>
   406e8:	ldr	x2, [sp, #104]
   406ec:	cbz	w0, 405f8 <aarch64_find_best_match@@Base+0xe8>
   406f0:	add	w4, w19, #0x1
   406f4:	add	x20, x20, #0x38
   406f8:	cmp	w24, w4
   406fc:	add	x19, x19, #0x1
   40700:	ccmp	w23, w4, #0x1, gt
   40704:	b.ge	405c0 <aarch64_find_best_match@@Base+0xb0>  // b.tcont
   40708:	b	40650 <aarch64_find_best_match@@Base+0x140>
   4070c:	tbz	w23, #31, 40650 <aarch64_find_best_match@@Base+0x140>
   40710:	mov	w25, #0x0                   	// #0
   40714:	b	4067c <aarch64_find_best_match@@Base+0x16c>
   40718:	tbz	w23, #31, 40650 <aarch64_find_best_match@@Base+0x140>
   4071c:	b	4067c <aarch64_find_best_match@@Base+0x16c>

0000000000040720 <aarch64_wide_constant_p@@Base>:
   40720:	mov	x3, x0
   40724:	cbz	w1, 40744 <aarch64_wide_constant_p@@Base+0x24>
   40728:	lsr	x4, x0, #32
   4072c:	mov	x5, #0xffffffff            	// #4294967295
   40730:	cmp	x4, #0x0
   40734:	mov	w0, #0x0                   	// #0
   40738:	ccmp	x4, x5, #0x4, ne  // ne = any
   4073c:	b.ne	40774 <aarch64_wide_constant_p@@Base+0x54>  // b.any
   40740:	and	x3, x3, x5
   40744:	tst	x3, #0xffffffffffff0000
   40748:	b.eq	40778 <aarch64_wide_constant_p@@Base+0x58>  // b.none
   4074c:	tst	x3, #0xffffffff0000ffff
   40750:	b.eq	4078c <aarch64_wide_constant_p@@Base+0x6c>  // b.none
   40754:	mov	w0, #0x0                   	// #0
   40758:	cbnz	w1, 40774 <aarch64_wide_constant_p@@Base+0x54>
   4075c:	tst	x3, #0xffff0000ffffffff
   40760:	b.eq	40794 <aarch64_wide_constant_p@@Base+0x74>  // b.none
   40764:	mov	w0, w1
   40768:	tst	x3, #0xffffffffffff
   4076c:	mov	w1, #0x30                  	// #48
   40770:	b.eq	4077c <aarch64_wide_constant_p@@Base+0x5c>  // b.none
   40774:	ret
   40778:	mov	w1, #0x0                   	// #0
   4077c:	mov	w0, #0x1                   	// #1
   40780:	cbz	x2, 40774 <aarch64_wide_constant_p@@Base+0x54>
   40784:	str	w1, [x2]
   40788:	ret
   4078c:	mov	w1, #0x10                  	// #16
   40790:	b	4077c <aarch64_wide_constant_p@@Base+0x5c>
   40794:	mov	w1, #0x20                  	// #32
   40798:	b	4077c <aarch64_wide_constant_p@@Base+0x5c>
   4079c:	nop

00000000000407a0 <aarch64_logical_immediate_p@@Base>:
   407a0:	stp	x29, x30, [sp, #-64]!
   407a4:	mov	x29, sp
   407a8:	stp	x21, x22, [sp, #32]
   407ac:	adrp	x22, f9000 <aarch64_opcode_table@@Base+0x55a20>
   407b0:	mov	x21, x0
   407b4:	ldr	w3, [x22, #1696]
   407b8:	stp	x19, x20, [sp, #16]
   407bc:	mov	w19, w1
   407c0:	mov	x20, x2
   407c4:	cbz	w3, 40898 <aarch64_logical_immediate_p@@Base+0xf8>
   407c8:	lsl	w1, w19, #2
   407cc:	mov	x0, #0xffffffffffffffff    	// #-1
   407d0:	lsl	x0, x0, x1
   407d4:	lsl	x0, x0, x1
   407d8:	tst	x0, x21
   407dc:	bic	x1, x21, x0
   407e0:	b.eq	407f0 <aarch64_logical_immediate_p@@Base+0x50>  // b.none
   407e4:	bics	xzr, x0, x21
   407e8:	mov	w0, #0x0                   	// #0
   407ec:	b.ne	40860 <aarch64_logical_immediate_p@@Base+0xc0>  // b.any
   407f0:	lsl	w0, w19, #3
   407f4:	cmp	w0, #0x3f
   407f8:	b.gt	40814 <aarch64_logical_immediate_p@@Base+0x74>
   407fc:	nop
   40800:	lsl	x2, x1, x0
   40804:	lsl	w0, w0, #1
   40808:	orr	x1, x1, x2
   4080c:	cmp	w0, #0x3f
   40810:	b.le	40800 <aarch64_logical_immediate_p@@Base+0x60>
   40814:	adrp	x5, f9000 <aarch64_opcode_table@@Base+0x55a20>
   40818:	add	x5, x5, #0x6a8
   4081c:	mov	x4, #0x14d6                	// #5334
   40820:	mov	x3, #0x0                   	// #0
   40824:	cmp	x4, x3
   40828:	b.ls	4087c <aarch64_logical_immediate_p@@Base+0xdc>  // b.plast
   4082c:	add	x0, x4, x3
   40830:	lsr	x0, x0, #1
   40834:	lsl	x2, x0, #4
   40838:	add	x6, x2, x5
   4083c:	ldr	x2, [x2, x5]
   40840:	cmp	x1, x2
   40844:	b.cc	40890 <aarch64_logical_immediate_p@@Base+0xf0>  // b.lo, b.ul, b.last
   40848:	b.hi	40870 <aarch64_logical_immediate_p@@Base+0xd0>  // b.pmore
   4084c:	mov	w0, #0x1                   	// #1
   40850:	cbz	x20, 40860 <aarch64_logical_immediate_p@@Base+0xc0>
   40854:	ldr	w1, [x6, #8]
   40858:	mov	w0, #0x1                   	// #1
   4085c:	str	w1, [x20]
   40860:	ldp	x19, x20, [sp, #16]
   40864:	ldp	x21, x22, [sp, #32]
   40868:	ldp	x29, x30, [sp], #64
   4086c:	ret
   40870:	add	x3, x0, #0x1
   40874:	cmp	x4, x3
   40878:	b.hi	4082c <aarch64_logical_immediate_p@@Base+0x8c>  // b.pmore
   4087c:	mov	w0, #0x0                   	// #0
   40880:	ldp	x19, x20, [sp, #16]
   40884:	ldp	x21, x22, [sp, #32]
   40888:	ldp	x29, x30, [sp], #64
   4088c:	ret
   40890:	mov	x4, x0
   40894:	b	40824 <aarch64_logical_immediate_p@@Base+0x84>
   40898:	mov	w14, #0x1                   	// #1
   4089c:	mov	w30, w14
   408a0:	str	x23, [sp, #48]
   408a4:	adrp	x23, f9000 <aarch64_opcode_table@@Base+0x55a20>
   408a8:	add	x18, x23, #0x6a8
   408ac:	mov	x17, #0x1                   	// #1
   408b0:	mov	w0, #0x6                   	// #6
   408b4:	nop
   408b8:	mov	w5, w14
   408bc:	cmp	w14, #0x6
   408c0:	lsl	w1, w30, w14
   408c4:	add	w14, w14, #0x1
   408c8:	b.eq	40a58 <aarch64_logical_immediate_p@@Base+0x2b8>  // b.none
   408cc:	sub	w2, w0, w14
   408d0:	lsl	x15, x17, x1
   408d4:	sub	x15, x15, #0x1
   408d8:	lsl	w2, w30, w2
   408dc:	sub	w2, w2, #0x1
   408e0:	lsl	w2, w2, w14
   408e4:	sub	w16, w1, #0x1
   408e8:	mov	w9, #0x0                   	// #0
   408ec:	nop
   408f0:	mov	w11, w9
   408f4:	add	w9, w9, #0x1
   408f8:	orr	w11, w11, w2
   408fc:	add	w12, w3, #0x1
   40900:	lsl	x4, x17, x9
   40904:	add	x7, x18, w3, sxtw #4
   40908:	sub	x4, x4, #0x1
   4090c:	mov	w10, #0x0                   	// #0
   40910:	mov	w13, #0x1                   	// #1
   40914:	mov	w8, #0x0                   	// #0
   40918:	cbz	w8, 4098c <aarch64_logical_immediate_p@@Base+0x1ec>
   4091c:	nop
   40920:	sub	w6, w1, w8
   40924:	lsr	x3, x4, x8
   40928:	cmp	w5, #0x4
   4092c:	lsl	x6, x4, x6
   40930:	and	x6, x6, x15
   40934:	orr	x3, x3, x6
   40938:	b.eq	40954 <aarch64_logical_immediate_p@@Base+0x1b4>  // b.none
   4093c:	b.hi	409bc <aarch64_logical_immediate_p@@Base+0x21c>  // b.pmore
   40940:	cmp	w5, #0x2
   40944:	b.eq	409b0 <aarch64_logical_immediate_p@@Base+0x210>  // b.none
   40948:	cmp	w5, #0x3
   4094c:	b.ne	409ac <aarch64_logical_immediate_p@@Base+0x20c>  // b.any
   40950:	orr	x3, x3, x3, lsl #8
   40954:	orr	x3, x3, x3, lsl #16
   40958:	orr	x3, x3, x3, lsl #32
   4095c:	orr	w6, w11, w10
   40960:	str	x3, [x7]
   40964:	cmp	w1, w13
   40968:	str	w6, [x7, #8]
   4096c:	mov	w3, w12
   40970:	b.ls	409dc <aarch64_logical_immediate_p@@Base+0x23c>  // b.plast
   40974:	add	w8, w8, #0x1
   40978:	add	w12, w12, #0x1
   4097c:	add	w13, w13, #0x1
   40980:	add	x7, x7, #0x10
   40984:	add	w10, w10, #0x40
   40988:	cbnz	w8, 40920 <aarch64_logical_immediate_p@@Base+0x180>
   4098c:	cmp	w5, #0x4
   40990:	b.eq	40a20 <aarch64_logical_immediate_p@@Base+0x280>  // b.none
   40994:	b.hi	40a38 <aarch64_logical_immediate_p@@Base+0x298>  // b.pmore
   40998:	cmp	w5, #0x2
   4099c:	b.eq	40a2c <aarch64_logical_immediate_p@@Base+0x28c>  // b.none
   409a0:	cmp	w5, #0x3
   409a4:	mov	x3, x4
   409a8:	b.eq	40950 <aarch64_logical_immediate_p@@Base+0x1b0>  // b.none
   409ac:	orr	x3, x3, x3, lsl #2
   409b0:	orr	x3, x3, x3, lsl #4
   409b4:	orr	x3, x3, x3, lsl #8
   409b8:	b	40954 <aarch64_logical_immediate_p@@Base+0x1b4>
   409bc:	cmp	w5, #0x5
   409c0:	b.eq	40958 <aarch64_logical_immediate_p@@Base+0x1b8>  // b.none
   409c4:	orr	w6, w11, w10
   409c8:	str	x3, [x7]
   409cc:	str	w6, [x7, #8]
   409d0:	cmp	w1, w13
   409d4:	mov	w3, w12
   409d8:	b.hi	40974 <aarch64_logical_immediate_p@@Base+0x1d4>  // b.pmore
   409dc:	cmp	w9, w16
   409e0:	b.ne	408f0 <aarch64_logical_immediate_p@@Base+0x150>  // b.any
   409e4:	cmp	w14, #0x7
   409e8:	b.ne	408b8 <aarch64_logical_immediate_p@@Base+0x118>  // b.any
   409ec:	mov	w0, #0x14d6                	// #5334
   409f0:	cmp	w12, w0
   409f4:	b.ne	40a64 <aarch64_logical_immediate_p@@Base+0x2c4>  // b.any
   409f8:	add	x0, x23, #0x6a8
   409fc:	adrp	x3, 3f000 <aarch64_decode_insn@@Base+0x250>
   40a00:	mov	x2, #0x10                  	// #16
   40a04:	add	x3, x3, #0x858
   40a08:	mov	x1, #0x14d6                	// #5334
   40a0c:	bl	35270 <qsort@plt>
   40a10:	mov	w0, #0x1                   	// #1
   40a14:	str	w0, [x22, #1696]
   40a18:	ldr	x23, [sp, #48]
   40a1c:	b	407c8 <aarch64_logical_immediate_p@@Base+0x28>
   40a20:	mov	x3, x4
   40a24:	orr	x3, x3, x3, lsl #16
   40a28:	b	40958 <aarch64_logical_immediate_p@@Base+0x1b8>
   40a2c:	mov	x3, x4
   40a30:	orr	x3, x3, x3, lsl #4
   40a34:	b	409b4 <aarch64_logical_immediate_p@@Base+0x214>
   40a38:	cmp	w5, #0x5
   40a3c:	b.eq	40a50 <aarch64_logical_immediate_p@@Base+0x2b0>  // b.none
   40a40:	orr	w3, w11, w10
   40a44:	str	x4, [x7]
   40a48:	str	w3, [x7, #8]
   40a4c:	b	40974 <aarch64_logical_immediate_p@@Base+0x1d4>
   40a50:	mov	x3, x4
   40a54:	b	40958 <aarch64_logical_immediate_p@@Base+0x1b8>
   40a58:	mov	w2, #0x1000                	// #4096
   40a5c:	mov	x15, #0xffffffffffffffff    	// #-1
   40a60:	b	408e4 <aarch64_logical_immediate_p@@Base+0x144>
   40a64:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   40a68:	add	x3, x3, #0x9c8
   40a6c:	adrp	x1, 58000 <xexit@@Base+0xe08>
   40a70:	adrp	x0, 58000 <xexit@@Base+0xe08>
   40a74:	add	x3, x3, #0x168
   40a78:	add	x1, x1, #0x7d8
   40a7c:	add	x0, x0, #0xad0
   40a80:	mov	w2, #0x4c9                 	// #1225
   40a84:	bl	35ac0 <__assert_fail@plt>

0000000000040a88 <aarch64_shrink_expanded_imm8@@Base>:
   40a88:	mov	x3, x0
   40a8c:	mov	w2, #0x0                   	// #0
   40a90:	mov	w0, #0x0                   	// #0
   40a94:	mov	w4, #0x1                   	// #1
   40a98:	b	40aac <aarch64_shrink_expanded_imm8@@Base+0x24>
   40a9c:	cbnz	w1, 40ad8 <aarch64_shrink_expanded_imm8@@Base+0x50>
   40aa0:	add	w2, w2, #0x1
   40aa4:	cmp	w2, #0x8
   40aa8:	b.eq	40ad4 <aarch64_shrink_expanded_imm8@@Base+0x4c>  // b.none
   40aac:	lsl	w1, w2, #3
   40ab0:	lsr	x1, x3, x1
   40ab4:	and	w1, w1, #0xff
   40ab8:	cmp	w1, #0xff
   40abc:	b.ne	40a9c <aarch64_shrink_expanded_imm8@@Base+0x14>  // b.any
   40ac0:	lsl	w1, w4, w2
   40ac4:	add	w2, w2, #0x1
   40ac8:	orr	w0, w0, w1
   40acc:	cmp	w2, #0x8
   40ad0:	b.ne	40aac <aarch64_shrink_expanded_imm8@@Base+0x24>  // b.any
   40ad4:	ret
   40ad8:	mov	w0, #0xffffffff            	// #-1
   40adc:	ret

0000000000040ae0 <aarch64_replace_opcode@@Base>:
   40ae0:	mov	x4, x0
   40ae4:	add	x3, x1, #0x20
   40ae8:	add	x2, x0, #0x18
   40aec:	add	x5, x0, #0x168
   40af0:	ldr	x0, [x0, #8]
   40af4:	str	x1, [x4, #8]
   40af8:	ldr	w1, [x3]
   40afc:	add	x2, x2, #0x38
   40b00:	stur	w1, [x2, #-56]
   40b04:	add	x3, x3, #0x4
   40b08:	cmp	x2, x5
   40b0c:	cbz	w1, 40b14 <aarch64_replace_opcode@@Base+0x34>
   40b10:	b.ne	40af8 <aarch64_replace_opcode@@Base+0x18>  // b.any
   40b14:	ret

0000000000040b18 <aarch64_operand_index@@Base>:
   40b18:	mov	x4, x0
   40b1c:	mov	x2, #0x0                   	// #0
   40b20:	ldr	w3, [x4, x2, lsl #2]
   40b24:	mov	w0, w2
   40b28:	add	x2, x2, #0x1
   40b2c:	cmp	w3, w1
   40b30:	b.eq	40b44 <aarch64_operand_index@@Base+0x2c>  // b.none
   40b34:	cmp	x2, #0x6
   40b38:	cbz	w3, 40b40 <aarch64_operand_index@@Base+0x28>
   40b3c:	b.ne	40b20 <aarch64_operand_index@@Base+0x8>  // b.any
   40b40:	mov	w0, #0xffffffff            	// #-1
   40b44:	ret

0000000000040b48 <aarch64_sys_reg_deprecated_p@@Base>:
   40b48:	ldr	w0, [x0, #12]
   40b4c:	and	w0, w0, #0x1
   40b50:	ret
   40b54:	nop

0000000000040b58 <aarch64_print_operand@@Base>:
   40b58:	stp	x29, x30, [sp, #-112]!
   40b5c:	mov	x29, sp
   40b60:	stp	x19, x20, [sp, #16]
   40b64:	mov	x19, x0
   40b68:	mov	w0, #0x38                  	// #56
   40b6c:	stp	x21, x22, [sp, #32]
   40b70:	mov	x20, x1
   40b74:	smull	x0, w5, w0
   40b78:	stp	x23, x24, [sp, #48]
   40b7c:	add	x21, x4, x0
   40b80:	strb	wzr, [x19]
   40b84:	ldr	x23, [sp, #112]
   40b88:	cbz	x6, 40b90 <aarch64_print_operand@@Base+0x38>
   40b8c:	str	wzr, [x6]
   40b90:	ldr	w8, [x4, x0]
   40b94:	sub	w0, w8, #0x1
   40b98:	cmp	w0, #0xce
   40b9c:	b.ls	40bcc <aarch64_print_operand@@Base+0x74>  // b.plast
   40ba0:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   40ba4:	add	x3, x3, #0x9c8
   40ba8:	adrp	x1, 58000 <xexit@@Base+0xe08>
   40bac:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   40bb0:	add	x3, x3, #0x180
   40bb4:	add	x1, x1, #0x7d8
   40bb8:	add	x0, x0, #0x4b0
   40bbc:	mov	w2, #0xebb                 	// #3771
   40bc0:	stp	x25, x26, [sp, #64]
   40bc4:	stp	x27, x28, [sp, #80]
   40bc8:	bl	35ac0 <__assert_fail@plt>
   40bcc:	adrp	x9, 5e000 <xexit@@Base+0x6e08>
   40bd0:	add	x9, x9, #0x650
   40bd4:	ldrh	w0, [x9, w0, uxtw #1]
   40bd8:	adr	x1, 40be4 <aarch64_print_operand@@Base+0x8c>
   40bdc:	add	x0, x1, w0, sxth #2
   40be0:	br	x0
   40be4:	ldr	x3, [x21, #16]
   40be8:	adrp	x2, 58000 <xexit@@Base+0xe08>
   40bec:	mov	x1, x20
   40bf0:	mov	x0, x19
   40bf4:	add	x2, x2, #0xca8
   40bf8:	ldp	x19, x20, [sp, #16]
   40bfc:	ldp	x21, x22, [sp, #32]
   40c00:	ldp	x23, x24, [sp, #48]
   40c04:	ldp	x29, x30, [sp], #112
   40c08:	b	35380 <snprintf@plt>
   40c0c:	ldrsw	x4, [x21, #16]
   40c10:	adrp	x3, 88000 <_sch_istable@@Base+0x145d8>
   40c14:	mov	x1, x20
   40c18:	add	x3, x3, #0x3d0
   40c1c:	mov	x0, x19
   40c20:	mov	x2, x21
   40c24:	add	x4, x4, #0x20
   40c28:	ldr	x3, [x3, x4, lsl #3]
   40c2c:	ldp	x19, x20, [sp, #16]
   40c30:	ldp	x21, x22, [sp, #32]
   40c34:	ldp	x23, x24, [sp, #48]
   40c38:	ldp	x29, x30, [sp], #112
   40c3c:	b	3fae8 <print_aarch64_disassembler_options@@Base+0x370>
   40c40:	ldrb	w0, [x21, #4]
   40c44:	bl	353f0 <aarch64_get_qualifier_name@plt>
   40c48:	mov	x3, x0
   40c4c:	ldr	w4, [x21, #16]
   40c50:	adrp	x2, 58000 <xexit@@Base+0xe08>
   40c54:	mov	x1, x20
   40c58:	mov	x0, x19
   40c5c:	add	x2, x2, #0xc28
   40c60:	ldp	x19, x20, [sp, #16]
   40c64:	ldp	x21, x22, [sp, #32]
   40c68:	ldp	x23, x24, [sp, #48]
   40c6c:	ldp	x29, x30, [sp], #112
   40c70:	b	35380 <snprintf@plt>
   40c74:	ldrsw	x1, [x21, #16]
   40c78:	adrp	x0, 88000 <_sch_istable@@Base+0x145d8>
   40c7c:	ldrb	w4, [x21, #4]
   40c80:	add	x0, x0, #0x3d0
   40c84:	add	x1, x1, #0x20
   40c88:	ldr	w5, [x21, #20]
   40c8c:	sub	w2, w4, #0x7
   40c90:	and	w2, w2, #0xff
   40c94:	cmp	w2, #0x1
   40c98:	ldr	x3, [x0, x1, lsl #3]
   40c9c:	b.hi	41b58 <aarch64_print_operand@@Base+0x1000>  // b.pmore
   40ca0:	cmp	w4, #0x8
   40ca4:	add	x4, x0, #0x400
   40ca8:	cset	x6, eq  // eq = none
   40cac:	mov	x2, x21
   40cb0:	mov	x1, x20
   40cb4:	mov	x0, x19
   40cb8:	lsl	x6, x6, #5
   40cbc:	add	x5, x6, w5, sxtw
   40cc0:	ldr	x4, [x4, x5, lsl #3]
   40cc4:	ldp	x19, x20, [sp, #16]
   40cc8:	ldp	x21, x22, [sp, #32]
   40ccc:	ldp	x23, x24, [sp, #48]
   40cd0:	ldp	x29, x30, [sp], #112
   40cd4:	b	3f958 <print_aarch64_disassembler_options@@Base+0x1e0>
   40cd8:	ldrsw	x1, [x21, #16]
   40cdc:	adrp	x23, 88000 <_sch_istable@@Base+0x145d8>
   40ce0:	add	x2, x23, #0x3d0
   40ce4:	ldr	w0, [x21, #32]
   40ce8:	add	x1, x1, #0x20
   40cec:	ldr	w22, [x21, #20]
   40cf0:	cmp	w0, #0xc
   40cf4:	ldr	x24, [x2, x1, lsl #3]
   40cf8:	b.eq	40d10 <aarch64_print_operand@@Base+0x1b8>  // b.none
   40cfc:	b.hi	40f78 <aarch64_print_operand@@Base+0x420>  // b.pmore
   40d00:	cmp	w0, #0x5
   40d04:	b.eq	40f80 <aarch64_print_operand@@Base+0x428>  // b.none
   40d08:	cmp	w0, #0x8
   40d0c:	b.ne	41b90 <aarch64_print_operand@@Base+0x1038>  // b.any
   40d10:	mov	w0, #0x1                   	// #1
   40d14:	bl	35680 <aarch64_get_qualifier_esize@plt>
   40d18:	and	w0, w0, #0xff
   40d1c:	cmp	w0, #0x4
   40d20:	add	x23, x23, #0x3d0
   40d24:	cset	x0, ne  // ne = any
   40d28:	mov	x3, x24
   40d2c:	mov	x2, x21
   40d30:	mov	x1, x20
   40d34:	lsl	x0, x0, #5
   40d38:	add	x0, x0, w22, sxtw
   40d3c:	add	x0, x0, #0x40
   40d40:	ldr	x4, [x23, x0, lsl #3]
   40d44:	mov	x0, x19
   40d48:	b	40cc4 <aarch64_print_operand@@Base+0x16c>
   40d4c:	cmp	w8, #0x9
   40d50:	b.eq	41888 <aarch64_print_operand@@Base+0xd30>  // b.none
   40d54:	ldr	x1, [x3, #120]
   40d58:	add	w0, w5, #0x1
   40d5c:	ubfx	x2, x1, #12, #3
   40d60:	cmp	x0, x2
   40d64:	b.eq	41978 <aarch64_print_operand@@Base+0xe20>  // b.none
   40d68:	ldrb	w0, [x21, #4]
   40d6c:	sub	w1, w0, #0x1
   40d70:	and	w1, w1, #0xff
   40d74:	cmp	w1, #0x1
   40d78:	b.hi	41b64 <aarch64_print_operand@@Base+0x100c>  // b.pmore
   40d7c:	ldr	w21, [x21, #16]
   40d80:	bl	35680 <aarch64_get_qualifier_esize@plt>
   40d84:	and	w0, w0, #0xff
   40d88:	adrp	x4, 88000 <_sch_istable@@Base+0x145d8>
   40d8c:	cmp	w0, #0x4
   40d90:	add	x4, x4, #0x3d0
   40d94:	cset	x3, ne  // ne = any
   40d98:	adrp	x2, 69000 <fields@@Base+0xa2d8>
   40d9c:	mov	x1, x20
   40da0:	mov	x0, x19
   40da4:	lsl	x3, x3, #5
   40da8:	add	x2, x2, #0xa78
   40dac:	add	x3, x3, w21, sxtw
   40db0:	add	x3, x3, #0x40
   40db4:	ldr	x3, [x4, x3, lsl #3]
   40db8:	b	40bf8 <aarch64_print_operand@@Base+0xa0>
   40dbc:	ldrb	w0, [x21, #4]
   40dc0:	ldr	w21, [x21, #16]
   40dc4:	cbz	w0, 4189c <aarch64_print_operand@@Base+0xd44>
   40dc8:	sub	w1, w0, #0x17
   40dcc:	and	w1, w1, #0xff
   40dd0:	cmp	w1, #0x1
   40dd4:	b.ls	4192c <aarch64_print_operand@@Base+0xdd4>  // b.plast
   40dd8:	bl	353f0 <aarch64_get_qualifier_name@plt>
   40ddc:	mov	x4, x0
   40de0:	adrp	x2, 58000 <xexit@@Base+0xe08>
   40de4:	mov	w3, w21
   40de8:	mov	x1, x20
   40dec:	mov	x0, x19
   40df0:	add	x2, x2, #0xc70
   40df4:	ldp	x19, x20, [sp, #16]
   40df8:	ldp	x21, x22, [sp, #32]
   40dfc:	ldp	x23, x24, [sp, #48]
   40e00:	ldp	x29, x30, [sp], #112
   40e04:	b	35380 <snprintf@plt>
   40e08:	ldrb	w0, [x21, #4]
   40e0c:	ldr	w21, [x21, #16]
   40e10:	cbnz	w0, 4182c <aarch64_print_operand@@Base+0xcd4>
   40e14:	adrp	x2, 58000 <xexit@@Base+0xe08>
   40e18:	mov	w3, w21
   40e1c:	mov	x1, x20
   40e20:	mov	x0, x19
   40e24:	add	x2, x2, #0xc78
   40e28:	ldp	x19, x20, [sp, #16]
   40e2c:	ldp	x21, x22, [sp, #32]
   40e30:	ldp	x23, x24, [sp, #48]
   40e34:	ldp	x29, x30, [sp], #112
   40e38:	b	35380 <snprintf@plt>
   40e3c:	ldr	x1, [x3, #120]
   40e40:	add	w0, w5, #0x1
   40e44:	ldr	x3, [x21, #16]
   40e48:	ubfx	x2, x1, #12, #3
   40e4c:	cmp	x2, x0
   40e50:	b.ne	40e60 <aarch64_print_operand@@Base+0x308>  // b.any
   40e54:	ubfx	x1, x1, #15, #5
   40e58:	cmp	x1, x3
   40e5c:	b.eq	4116c <aarch64_print_operand@@Base+0x614>  // b.none
   40e60:	adrp	x2, 58000 <xexit@@Base+0xe08>
   40e64:	mov	x1, x20
   40e68:	mov	x0, x19
   40e6c:	add	x2, x2, #0xda0
   40e70:	b	40e28 <aarch64_print_operand@@Base+0x2d0>
   40e74:	ldr	x3, [x21, #16]
   40e78:	adrp	x2, 69000 <fields@@Base+0xa2d8>
   40e7c:	mov	x1, x20
   40e80:	mov	x0, x19
   40e84:	add	x2, x2, #0xa78
   40e88:	ldr	x3, [x3]
   40e8c:	b	40bf8 <aarch64_print_operand@@Base+0xa0>
   40e90:	ldr	x4, [x21, #40]
   40e94:	mov	x1, x20
   40e98:	mov	x0, x19
   40e9c:	ldr	x3, [x21, #16]
   40ea0:	cbz	x4, 40fac <aarch64_print_operand@@Base+0x454>
   40ea4:	adrp	x2, 58000 <xexit@@Base+0xe08>
   40ea8:	add	x2, x2, #0xd58
   40eac:	ldp	x19, x20, [sp, #16]
   40eb0:	ldp	x21, x22, [sp, #32]
   40eb4:	ldp	x23, x24, [sp, #48]
   40eb8:	ldp	x29, x30, [sp], #112
   40ebc:	b	35380 <snprintf@plt>
   40ec0:	ldrb	w0, [x21, #4]
   40ec4:	ldr	w22, [x21, #16]
   40ec8:	bl	353f0 <aarch64_get_qualifier_name@plt>
   40ecc:	mov	x4, x0
   40ed0:	ldr	x5, [x21, #24]
   40ed4:	adrp	x2, 58000 <xexit@@Base+0xe08>
   40ed8:	mov	w3, w22
   40edc:	mov	x1, x20
   40ee0:	mov	x0, x19
   40ee4:	add	x2, x2, #0xc90
   40ee8:	ldp	x19, x20, [sp, #16]
   40eec:	ldp	x21, x22, [sp, #32]
   40ef0:	ldp	x23, x24, [sp, #48]
   40ef4:	ldp	x29, x30, [sp], #112
   40ef8:	b	35380 <snprintf@plt>
   40efc:	ldrb	w0, [x21, #4]
   40f00:	ldr	w22, [x21, #16]
   40f04:	bl	353f0 <aarch64_get_qualifier_name@plt>
   40f08:	mov	x4, x0
   40f0c:	adrp	x2, 58000 <xexit@@Base+0xe08>
   40f10:	mov	w3, w22
   40f14:	mov	x1, x20
   40f18:	mov	x0, x19
   40f1c:	add	x2, x2, #0xc38
   40f20:	ldr	x5, [x21, #24]
   40f24:	b	40ee8 <aarch64_print_operand@@Base+0x390>
   40f28:	ldrb	w0, [x21, #4]
   40f2c:	sub	w1, w0, #0x1
   40f30:	and	w1, w1, #0xff
   40f34:	cmp	w1, #0x3
   40f38:	b.hi	41aa8 <aarch64_print_operand@@Base+0xf50>  // b.pmore
   40f3c:	ldr	w21, [x21, #16]
   40f40:	bl	35680 <aarch64_get_qualifier_esize@plt>
   40f44:	and	w0, w0, #0xff
   40f48:	adrp	x3, 88000 <_sch_istable@@Base+0x145d8>
   40f4c:	cmp	w0, #0x4
   40f50:	add	x3, x3, #0x3d0
   40f54:	cset	x4, ne  // ne = any
   40f58:	adrp	x2, 69000 <fields@@Base+0xa2d8>
   40f5c:	mov	x1, x20
   40f60:	mov	x0, x19
   40f64:	lsl	x4, x4, #5
   40f68:	add	x2, x2, #0xa78
   40f6c:	add	x21, x4, w21, sxtw
   40f70:	ldr	x3, [x3, x21, lsl #3]
   40f74:	b	40bf8 <aarch64_print_operand@@Base+0xa0>
   40f78:	cmp	w0, #0xd
   40f7c:	b.ne	41b90 <aarch64_print_operand@@Base+0x1038>  // b.any
   40f80:	mov	w0, #0x2                   	// #2
   40f84:	b	40d14 <aarch64_print_operand@@Base+0x1bc>
   40f88:	ldr	x3, [x21, #16]
   40f8c:	add	x3, x2, x3
   40f90:	cbz	x6, 40f9c <aarch64_print_operand@@Base+0x444>
   40f94:	mov	w0, #0x1                   	// #1
   40f98:	str	w0, [x6]
   40f9c:	cbz	x7, 40fa4 <aarch64_print_operand@@Base+0x44c>
   40fa0:	str	x3, [x7]
   40fa4:	mov	x1, x20
   40fa8:	mov	x0, x19
   40fac:	adrp	x2, 58000 <xexit@@Base+0xe08>
   40fb0:	add	x2, x2, #0xd70
   40fb4:	b	40bf8 <aarch64_print_operand@@Base+0xa0>
   40fb8:	ldrb	w0, [x21, #4]
   40fbc:	ldr	w21, [x21, #16]
   40fc0:	bl	353f0 <aarch64_get_qualifier_name@plt>
   40fc4:	mov	x4, x0
   40fc8:	adrp	x2, 58000 <xexit@@Base+0xe08>
   40fcc:	mov	w3, w21
   40fd0:	mov	x1, x20
   40fd4:	mov	x0, x19
   40fd8:	add	x2, x2, #0xc30
   40fdc:	b	40df4 <aarch64_print_operand@@Base+0x29c>
   40fe0:	adrp	x3, 58000 <xexit@@Base+0xe08>
   40fe4:	mov	x2, x21
   40fe8:	mov	x1, x20
   40fec:	mov	x0, x19
   40ff0:	add	x3, x3, #0xc58
   40ff4:	ldp	x19, x20, [sp, #16]
   40ff8:	ldp	x21, x22, [sp, #32]
   40ffc:	ldp	x23, x24, [sp, #48]
   41000:	ldp	x29, x30, [sp], #112
   41004:	b	3ff28 <aarch64_get_qualifier_name@@Base+0x18>
   41008:	ldrb	w1, [x21, #4]
   4100c:	ldr	w4, [x21, #16]
   41010:	sub	w0, w1, #0x7
   41014:	and	w0, w0, #0xff
   41018:	cmp	w0, #0x1
   4101c:	b.hi	41b58 <aarch64_print_operand@@Base+0x1000>  // b.pmore
   41020:	cmp	w1, #0x8
   41024:	adrp	x3, 88000 <_sch_istable@@Base+0x145d8>
   41028:	cset	x0, eq  // eq = none
   4102c:	add	x3, x3, #0x3d0
   41030:	add	x3, x3, #0x400
   41034:	mov	x2, x21
   41038:	lsl	x0, x0, #5
   4103c:	mov	x1, x20
   41040:	add	x4, x0, w4, sxtw
   41044:	mov	x0, x19
   41048:	b	40c28 <aarch64_print_operand@@Base+0xd0>
   4104c:	ldrb	w1, [x21, #4]
   41050:	ldr	w5, [x21, #16]
   41054:	sub	w0, w1, #0x7
   41058:	and	w0, w0, #0xff
   4105c:	cmp	w0, #0x1
   41060:	b.hi	41b58 <aarch64_print_operand@@Base+0x1000>  // b.pmore
   41064:	cmp	w1, #0x8
   41068:	ldrsw	x4, [x21, #20]
   4106c:	cset	x0, eq  // eq = none
   41070:	adrp	x3, 88000 <_sch_istable@@Base+0x145d8>
   41074:	add	x3, x3, #0x3d0
   41078:	mov	x1, x20
   4107c:	lsl	x0, x0, #5
   41080:	add	x3, x3, #0x400
   41084:	add	x5, x0, w5, sxtw
   41088:	add	x4, x0, x4
   4108c:	mov	x2, x21
   41090:	mov	x0, x19
   41094:	ldr	x4, [x3, x4, lsl #3]
   41098:	ldr	x3, [x3, x5, lsl #3]
   4109c:	b	40cc4 <aarch64_print_operand@@Base+0x16c>
   410a0:	ldrb	w0, [x4, #4]
   410a4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   410a8:	and	w0, w0, #0xff
   410ac:	cmp	w0, #0x4
   410b0:	b.eq	417dc <aarch64_print_operand@@Base+0xc84>  // b.none
   410b4:	cmp	w0, #0x8
   410b8:	b.ne	41784 <aarch64_print_operand@@Base+0xc2c>  // b.any
   410bc:	ldr	w1, [x21, #16]
   410c0:	bl	3f8b0 <print_aarch64_disassembler_options@@Base+0x138>
   410c4:	fmov	d0, x0
   410c8:	adrp	x2, 58000 <xexit@@Base+0xe08>
   410cc:	mov	x1, x20
   410d0:	mov	x0, x19
   410d4:	add	x2, x2, #0xd98
   410d8:	ldp	x19, x20, [sp, #16]
   410dc:	ldp	x21, x22, [sp, #32]
   410e0:	ldp	x23, x24, [sp, #48]
   410e4:	ldp	x29, x30, [sp], #112
   410e8:	b	35380 <snprintf@plt>
   410ec:	ldrsw	x1, [x21, #16]
   410f0:	adrp	x0, 88000 <_sch_istable@@Base+0x145d8>
   410f4:	add	x0, x0, #0x3d0
   410f8:	cmp	w8, #0x5e
   410fc:	add	x1, x1, #0x20
   41100:	ldr	x3, [x0, x1, lsl #3]
   41104:	b.ne	4184c <aarch64_print_operand@@Base+0xcf4>  // b.any
   41108:	ldp	w4, w0, [x21, #20]
   4110c:	mov	x1, x20
   41110:	cbz	w0, 41968 <aarch64_print_operand@@Base+0xe10>
   41114:	adrp	x2, 58000 <xexit@@Base+0xe08>
   41118:	mov	x0, x19
   4111c:	add	x2, x2, #0xdb8
   41120:	b	40c60 <aarch64_print_operand@@Base+0x108>
   41124:	ldr	s0, [x21, #16]
   41128:	adrp	x2, 58000 <xexit@@Base+0xe08>
   4112c:	mov	x1, x20
   41130:	mov	x0, x19
   41134:	add	x2, x2, #0xcb0
   41138:	fcvt	d0, s0
   4113c:	b	410d8 <aarch64_print_operand@@Base+0x580>
   41140:	ldr	x4, [x21, #40]
   41144:	mov	x1, x20
   41148:	mov	x0, x19
   4114c:	ldr	x3, [x21, #16]
   41150:	cbz	x4, 41814 <aarch64_print_operand@@Base+0xcbc>
   41154:	adrp	x2, 58000 <xexit@@Base+0xe08>
   41158:	add	x2, x2, #0xd88
   4115c:	b	40eac <aarch64_print_operand@@Base+0x354>
   41160:	ldr	x0, [x21, #16]
   41164:	ldr	w1, [x0, #8]
   41168:	tbz	w1, #8, 41894 <aarch64_print_operand@@Base+0xd3c>
   4116c:	ldp	x19, x20, [sp, #16]
   41170:	ldp	x21, x22, [sp, #32]
   41174:	ldp	x23, x24, [sp, #48]
   41178:	ldp	x29, x30, [sp], #112
   4117c:	ret
   41180:	ldr	x3, [x21, #16]
   41184:	adrp	x2, 69000 <fields@@Base+0xa2d8>
   41188:	adrp	x23, 58000 <xexit@@Base+0xe08>
   4118c:	adrp	x24, 58000 <xexit@@Base+0xe08>
   41190:	mov	x1, x20
   41194:	add	x2, x2, #0xa78
   41198:	ldr	x3, [x3]
   4119c:	mov	x0, x19
   411a0:	add	x23, x23, #0x7f8
   411a4:	add	x24, x24, #0xda8
   411a8:	mov	w22, #0x1                   	// #1
   411ac:	stp	x25, x26, [sp, #64]
   411b0:	bl	35380 <snprintf@plt>
   411b4:	ldr	x26, [x21, #16]
   411b8:	ldr	x25, [x26, w22, uxtw #3]
   411bc:	cbz	x25, 411f4 <aarch64_print_operand@@Base+0x69c>
   411c0:	mov	x0, x19
   411c4:	bl	350a0 <strlen@plt>
   411c8:	mov	x1, x0
   411cc:	cmp	w22, #0x1
   411d0:	add	x0, x19, x0
   411d4:	add	w22, w22, #0x1
   411d8:	sub	x1, x20, x1
   411dc:	b.eq	41800 <aarch64_print_operand@@Base+0xca8>  // b.none
   411e0:	mov	x3, x25
   411e4:	mov	x2, x23
   411e8:	bl	35380 <snprintf@plt>
   411ec:	cmp	w22, #0x4
   411f0:	b.ne	411b4 <aarch64_print_operand@@Base+0x65c>  // b.any
   411f4:	ldp	x25, x26, [sp, #64]
   411f8:	b	4116c <aarch64_print_operand@@Base+0x614>
   411fc:	adrp	x3, 58000 <xexit@@Base+0xe08>
   41200:	mov	x2, x21
   41204:	mov	x1, x20
   41208:	mov	x0, x19
   4120c:	add	x3, x3, #0xc88
   41210:	b	40ff4 <aarch64_print_operand@@Base+0x49c>
   41214:	adrp	x2, 58000 <xexit@@Base+0xe08>
   41218:	ldr	w3, [x21, #16]
   4121c:	mov	x1, x20
   41220:	mov	x0, x19
   41224:	add	x2, x2, #0xc48
   41228:	b	40e28 <aarch64_print_operand@@Base+0x2d0>
   4122c:	adrp	x2, 58000 <xexit@@Base+0xe08>
   41230:	mov	x1, x20
   41234:	mov	x0, x19
   41238:	add	x2, x2, #0xca0
   4123c:	ldr	x3, [x21, #16]
   41240:	b	40bf8 <aarch64_print_operand@@Base+0xa0>
   41244:	ldr	x5, [x21, #40]
   41248:	ldr	w0, [x21, #32]
   4124c:	ldr	x3, [x21, #16]
   41250:	cbnz	x5, 4125c <aarch64_print_operand@@Base+0x704>
   41254:	cmp	w0, #0x5
   41258:	b.eq	40fa4 <aarch64_print_operand@@Base+0x44c>  // b.none
   4125c:	cbz	w0, 40fa4 <aarch64_print_operand@@Base+0x44c>
   41260:	adrp	x6, a2000 <aarch64_operands@@Base+0x16bc0>
   41264:	ubfiz	x4, x0, #4, #32
   41268:	adrp	x2, 58000 <xexit@@Base+0xe08>
   4126c:	mov	x1, x20
   41270:	ldr	x6, [x6, #3904]
   41274:	mov	x0, x19
   41278:	add	x2, x2, #0xd78
   4127c:	ldr	x4, [x6, x4]
   41280:	ldp	x19, x20, [sp, #16]
   41284:	ldp	x21, x22, [sp, #32]
   41288:	ldp	x23, x24, [sp, #48]
   4128c:	ldp	x29, x30, [sp], #112
   41290:	b	35380 <snprintf@plt>
   41294:	ldr	x0, [x21, #16]
   41298:	ldr	x3, [x0]
   4129c:	cbz	x3, 418f8 <aarch64_print_operand@@Base+0xda0>
   412a0:	adrp	x2, 69000 <fields@@Base+0xa2d8>
   412a4:	mov	x1, x20
   412a8:	mov	x0, x19
   412ac:	add	x2, x2, #0xa78
   412b0:	b	40bf8 <aarch64_print_operand@@Base+0xa0>
   412b4:	ldrb	w1, [x21, #4]
   412b8:	ldr	w2, [x21, #16]
   412bc:	sub	w0, w1, #0x7
   412c0:	and	w0, w0, #0xff
   412c4:	cmp	w0, #0x1
   412c8:	b.hi	41b58 <aarch64_print_operand@@Base+0x1000>  // b.pmore
   412cc:	cmp	w1, #0x8
   412d0:	ldrsw	x3, [x21, #20]
   412d4:	cset	x1, eq  // eq = none
   412d8:	adrp	x0, 88000 <_sch_istable@@Base+0x145d8>
   412dc:	add	x0, x0, #0x3d0
   412e0:	add	x3, x3, #0x60
   412e4:	lsl	x1, x1, #5
   412e8:	add	x5, x0, #0x400
   412ec:	add	x2, x1, w2, sxtw
   412f0:	mov	x1, x20
   412f4:	ldr	x4, [x0, x3, lsl #3]
   412f8:	mov	x0, x19
   412fc:	ldr	x3, [x5, x2, lsl #3]
   41300:	mov	x2, x21
   41304:	b	40cc4 <aarch64_print_operand@@Base+0x16c>
   41308:	adrp	x22, a2000 <aarch64_operands@@Base+0x16bc0>
   4130c:	stp	x25, x26, [sp, #64]
   41310:	adrp	x26, 58000 <xexit@@Base+0xe08>
   41314:	ldr	x22, [x22, #3968]
   41318:	add	x0, x26, #0xdf0
   4131c:	adrp	x24, 58000 <xexit@@Base+0xe08>
   41320:	mov	x25, #0x0                   	// #0
   41324:	add	x24, x24, #0xae8
   41328:	add	x22, x22, #0x10
   4132c:	stp	x27, x28, [sp, #80]
   41330:	adrp	x27, 57000 <floatformat_from_double@@Base+0x210>
   41334:	mov	w28, #0x0                   	// #0
   41338:	add	x27, x27, #0x250
   4133c:	str	x0, [sp, #96]
   41340:	mov	w0, #0xc200                	// #49664
   41344:	b	41354 <aarch64_print_operand@@Base+0x7fc>
   41348:	ldr	x24, [x22], #16
   4134c:	cbz	x24, 417b8 <aarch64_print_operand@@Base+0xc60>
   41350:	ldp	w0, w28, [x22, #-8]
   41354:	ldr	w1, [x21, #16]
   41358:	cmp	w1, w0
   4135c:	b.ne	41348 <aarch64_print_operand@@Base+0x7f0>  // b.any
   41360:	ldr	w26, [x21, #20]
   41364:	sub	x0, x22, #0x10
   41368:	bl	35b00 <aarch64_sys_reg_deprecated_p@plt>
   4136c:	cbnz	w0, 41348 <aarch64_print_operand@@Base+0x7f0>
   41370:	cmp	x25, #0x0
   41374:	and	w0, w26, w28
   41378:	ccmp	w26, w0, #0x4, ne  // ne = any
   4137c:	b.ne	41348 <aarch64_print_operand@@Base+0x7f0>  // b.any
   41380:	mov	x25, x24
   41384:	cmp	w26, w0
   41388:	b.eq	419dc <aarch64_print_operand@@Base+0xe84>  // b.none
   4138c:	tbnz	w28, #4, 4194c <aarch64_print_operand@@Base+0xdf4>
   41390:	tbz	w28, #3, 41348 <aarch64_print_operand@@Base+0x7f0>
   41394:	ldr	x1, [sp, #96]
   41398:	mov	x0, x27
   4139c:	mov	w2, #0x5                   	// #5
   413a0:	bl	359e0 <dcgettext@plt>
   413a4:	str	x0, [x23]
   413a8:	b	41348 <aarch64_print_operand@@Base+0x7f0>
   413ac:	ldrsw	x1, [x21, #16]
   413b0:	adrp	x0, 88000 <_sch_istable@@Base+0x145d8>
   413b4:	ldr	w4, [x21, #20]
   413b8:	add	x0, x0, #0x3d0
   413bc:	add	x1, x1, #0x20
   413c0:	ldr	x3, [x0, x1, lsl #3]
   413c4:	mov	x1, x20
   413c8:	mov	x0, x19
   413cc:	cbz	w4, 41820 <aarch64_print_operand@@Base+0xcc8>
   413d0:	adrp	x2, 58000 <xexit@@Base+0xe08>
   413d4:	add	x2, x2, #0x8e8
   413d8:	b	40c60 <aarch64_print_operand@@Base+0x108>
   413dc:	ldr	x2, [x3, #120]
   413e0:	add	w0, w5, #0x1
   413e4:	ldr	x1, [x21, #16]
   413e8:	ubfx	x3, x2, #12, #3
   413ec:	cmp	x3, x0
   413f0:	b.eq	41870 <aarch64_print_operand@@Base+0xd18>  // b.none
   413f4:	cmp	x1, #0x1f
   413f8:	b.hi	41b2c <aarch64_print_operand@@Base+0xfd4>  // b.pmore
   413fc:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   41400:	ldr	x0, [x0, #3792]
   41404:	ldr	x3, [x0, x1, lsl #3]
   41408:	cbz	x3, 41910 <aarch64_print_operand@@Base+0xdb8>
   4140c:	adrp	x2, 69000 <fields@@Base+0xa2d8>
   41410:	mov	x1, x20
   41414:	add	x2, x2, #0xa78
   41418:	mov	x0, x19
   4141c:	bl	35380 <snprintf@plt>
   41420:	ldrb	w0, [x21, #36]
   41424:	tbz	w0, #0, 4116c <aarch64_print_operand@@Base+0x614>
   41428:	mov	x0, x19
   4142c:	bl	350a0 <strlen@plt>
   41430:	ldr	w3, [x21, #32]
   41434:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   41438:	sub	x1, x20, x0
   4143c:	adrp	x2, 58000 <xexit@@Base+0xe08>
   41440:	ldr	x5, [x5, #3904]
   41444:	lsl	x3, x3, #4
   41448:	add	x0, x19, x0
   4144c:	add	x2, x2, #0x800
   41450:	ldr	x4, [x21, #40]
   41454:	ldr	x3, [x5, x3]
   41458:	b	40eac <aarch64_print_operand@@Base+0x354>
   4145c:	ldr	x1, [x3, #120]
   41460:	add	w0, w5, #0x1
   41464:	ubfx	x2, x1, #12, #3
   41468:	cmp	x2, x0
   4146c:	ldr	x0, [x21, #16]
   41470:	b.ne	41484 <aarch64_print_operand@@Base+0x92c>  // b.any
   41474:	ldr	w2, [x0, #8]
   41478:	ubfx	w1, w1, #15, #5
   4147c:	cmp	w2, w1
   41480:	b.eq	4116c <aarch64_print_operand@@Base+0x614>  // b.none
   41484:	ldr	w3, [x0, #8]
   41488:	b	40e60 <aarch64_print_operand@@Base+0x308>
   4148c:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   41490:	adrp	x3, 58000 <xexit@@Base+0xe08>
   41494:	ldr	w2, [x21, #16]
   41498:	add	x3, x3, #0xaf8
   4149c:	ldr	x0, [x0, #3832]
   414a0:	mov	w1, #0x5                   	// #5
   414a4:	b	414ac <aarch64_print_operand@@Base+0x954>
   414a8:	ldr	w1, [x0, #8]
   414ac:	cmp	w2, w1
   414b0:	b.eq	412a0 <aarch64_print_operand@@Base+0x748>  // b.none
   414b4:	ldr	x3, [x0, #16]!
   414b8:	cbnz	x3, 414a8 <aarch64_print_operand@@Base+0x950>
   414bc:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   414c0:	add	x3, x3, #0x9c8
   414c4:	adrp	x1, 58000 <xexit@@Base+0xe08>
   414c8:	adrp	x0, 58000 <xexit@@Base+0xe08>
   414cc:	add	x3, x3, #0x180
   414d0:	add	x1, x1, #0x7d8
   414d4:	add	x0, x0, #0xe30
   414d8:	mov	w2, #0xe95                 	// #3733
   414dc:	stp	x25, x26, [sp, #64]
   414e0:	stp	x27, x28, [sp, #80]
   414e4:	bl	35ac0 <__assert_fail@plt>
   414e8:	ldr	x1, [x21, #16]
   414ec:	cmp	x1, #0xf
   414f0:	b.hi	41a7c <aarch64_print_operand@@Base+0xf24>  // b.pmore
   414f4:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   414f8:	ldr	x0, [x0, #4056]
   414fc:	ldr	x3, [x0, x1, lsl #3]
   41500:	cbnz	x3, 412a0 <aarch64_print_operand@@Base+0x748>
   41504:	mov	x3, x1
   41508:	adrp	x2, 58000 <xexit@@Base+0xe08>
   4150c:	mov	x1, x20
   41510:	mov	x0, x19
   41514:	add	x2, x2, #0xca8
   41518:	b	40bf8 <aarch64_print_operand@@Base+0xa0>
   4151c:	ldr	x2, [x3, #120]
   41520:	add	w0, w5, #0x1
   41524:	ldr	x1, [x21, #16]
   41528:	ubfx	x3, x2, #12, #3
   4152c:	cmp	x3, x0
   41530:	b.eq	41860 <aarch64_print_operand@@Base+0xd08>  // b.none
   41534:	cmp	x1, #0x1f
   41538:	b.hi	41b00 <aarch64_print_operand@@Base+0xfa8>  // b.pmore
   4153c:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   41540:	ldr	x0, [x0, #3792]
   41544:	ldr	x3, [x0, x1, lsl #3]
   41548:	cbnz	x3, 412a0 <aarch64_print_operand@@Base+0x748>
   4154c:	b	41504 <aarch64_print_operand@@Base+0x9ac>
   41550:	ldr	x3, [x21, #16]
   41554:	and	x2, x2, #0xfffffffffffff000
   41558:	add	x3, x2, x3
   4155c:	cbnz	x6, 40f94 <aarch64_print_operand@@Base+0x43c>
   41560:	b	40f9c <aarch64_print_operand@@Base+0x444>
   41564:	mov	x1, x20
   41568:	mov	x0, x19
   4156c:	ldp	x19, x20, [sp, #16]
   41570:	adrp	x2, 58000 <xexit@@Base+0xe08>
   41574:	ldp	x21, x22, [sp, #32]
   41578:	add	x2, x2, #0xd50
   4157c:	ldp	x23, x24, [sp, #48]
   41580:	ldp	x29, x30, [sp], #112
   41584:	b	35380 <snprintf@plt>
   41588:	ldrb	w0, [x4, #4]
   4158c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   41590:	and	w0, w0, #0xff
   41594:	cmp	w0, #0x4
   41598:	b.ne	41760 <aarch64_print_operand@@Base+0xc08>  // b.any
   4159c:	mov	x1, x20
   415a0:	mov	x0, x19
   415a4:	ldr	x3, [x21, #16]
   415a8:	adrp	x2, 58000 <xexit@@Base+0xe08>
   415ac:	ldp	x19, x20, [sp, #16]
   415b0:	add	x2, x2, #0xd28
   415b4:	ldp	x21, x22, [sp, #32]
   415b8:	mov	w4, w3
   415bc:	ldp	x23, x24, [sp, #48]
   415c0:	ldp	x29, x30, [sp], #112
   415c4:	b	35380 <snprintf@plt>
   415c8:	ldrb	w0, [x21, #4]
   415cc:	sub	w1, w0, #0x1
   415d0:	and	w1, w1, #0xff
   415d4:	cmp	w1, #0x1
   415d8:	b.hi	41a50 <aarch64_print_operand@@Base+0xef8>  // b.pmore
   415dc:	ldr	x1, [x21, #40]
   415e0:	ldr	w22, [x21, #16]
   415e4:	cbnz	x1, 415f4 <aarch64_print_operand@@Base+0xa9c>
   415e8:	ldr	w1, [x21, #32]
   415ec:	cmp	w1, #0x5
   415f0:	b.eq	419a0 <aarch64_print_operand@@Base+0xe48>  // b.none
   415f4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   415f8:	and	w0, w0, #0xff
   415fc:	cmp	w0, #0x4
   41600:	ldr	w4, [x21, #32]
   41604:	cset	x2, ne  // ne = any
   41608:	adrp	x6, a2000 <aarch64_operands@@Base+0x16bc0>
   4160c:	adrp	x3, 88000 <_sch_istable@@Base+0x145d8>
   41610:	add	x3, x3, #0x3d0
   41614:	lsl	x2, x2, #5
   41618:	lsl	x4, x4, #4
   4161c:	ldr	x6, [x6, #3904]
   41620:	add	x2, x2, w22, sxtw
   41624:	add	x2, x2, #0x40
   41628:	mov	x1, x20
   4162c:	mov	x0, x19
   41630:	ldr	x4, [x6, x4]
   41634:	ldr	x3, [x3, x2, lsl #3]
   41638:	adrp	x2, 58000 <xexit@@Base+0xe08>
   4163c:	add	x2, x2, #0xc10
   41640:	ldr	x5, [x21, #40]
   41644:	b	41280 <aarch64_print_operand@@Base+0x728>
   41648:	sub	w0, w5, #0x1
   4164c:	ldr	w22, [x21, #32]
   41650:	cmp	w0, #0x1
   41654:	b.hi	41a24 <aarch64_print_operand@@Base+0xecc>  // b.pmore
   41658:	mov	x0, x4
   4165c:	str	x4, [sp, #96]
   41660:	str	w5, [sp, #108]
   41664:	bl	35740 <aarch64_stack_pointer_p@plt>
   41668:	ldr	x4, [sp, #96]
   4166c:	cbnz	w0, 416e8 <aarch64_print_operand@@Base+0xb90>
   41670:	ldr	w5, [sp, #108]
   41674:	cmp	w5, #0x2
   41678:	b.eq	416d8 <aarch64_print_operand@@Base+0xb80>  // b.none
   4167c:	ldrb	w0, [x21, #4]
   41680:	ldr	x1, [x21, #40]
   41684:	ldr	w23, [x21, #16]
   41688:	cbnz	x1, 41710 <aarch64_print_operand@@Base+0xbb8>
   4168c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   41690:	and	w0, w0, #0xff
   41694:	cmp	w0, #0x4
   41698:	adrp	x2, a2000 <aarch64_operands@@Base+0x16bc0>
   4169c:	cset	x3, ne  // ne = any
   416a0:	ubfiz	x22, x22, #4, #32
   416a4:	ldr	x2, [x2, #3904]
   416a8:	lsl	x3, x3, #5
   416ac:	add	x3, x3, w23, sxtw
   416b0:	adrp	x5, 88000 <_sch_istable@@Base+0x145d8>
   416b4:	add	x3, x3, #0x40
   416b8:	add	x5, x5, #0x3d0
   416bc:	mov	x1, x20
   416c0:	mov	x0, x19
   416c4:	ldr	x4, [x2, x22]
   416c8:	adrp	x2, 58000 <xexit@@Base+0xe08>
   416cc:	add	x2, x2, #0xc20
   416d0:	ldr	x3, [x5, x3, lsl #3]
   416d4:	b	40eac <aarch64_print_operand@@Base+0x354>
   416d8:	add	x0, x4, #0x38
   416dc:	bl	35740 <aarch64_stack_pointer_p@plt>
   416e0:	ldr	x4, [sp, #96]
   416e4:	cbz	w0, 4167c <aarch64_print_operand@@Base+0xb24>
   416e8:	ldrb	w0, [x21, #4]
   416ec:	cmp	w0, #0x1
   416f0:	b.eq	4198c <aarch64_print_operand@@Base+0xe34>  // b.none
   416f4:	cmp	w22, #0x9
   416f8:	ccmp	w0, #0x2, #0x0, eq  // eq = none
   416fc:	b.ne	41680 <aarch64_print_operand@@Base+0xb28>  // b.any
   41700:	ldr	x1, [x21, #40]
   41704:	mov	w22, #0x5                   	// #5
   41708:	ldr	w23, [x21, #16]
   4170c:	cbz	x1, 419e8 <aarch64_print_operand@@Base+0xe90>
   41710:	bl	35680 <aarch64_get_qualifier_esize@plt>
   41714:	and	w0, w0, #0xff
   41718:	cmp	w0, #0x4
   4171c:	adrp	x2, a2000 <aarch64_operands@@Base+0x16bc0>
   41720:	cset	x3, ne  // ne = any
   41724:	ubfiz	x22, x22, #4, #32
   41728:	ldr	x2, [x2, #3904]
   4172c:	lsl	x3, x3, #5
   41730:	add	x3, x3, w23, sxtw
   41734:	adrp	x5, 88000 <_sch_istable@@Base+0x145d8>
   41738:	add	x3, x3, #0x40
   4173c:	add	x5, x5, #0x3d0
   41740:	mov	x1, x20
   41744:	mov	x0, x19
   41748:	ldr	x4, [x2, x22]
   4174c:	adrp	x2, 58000 <xexit@@Base+0xe08>
   41750:	add	x2, x2, #0xc10
   41754:	ldr	x3, [x5, x3, lsl #3]
   41758:	ldr	x5, [x21, #40]
   4175c:	b	41280 <aarch64_print_operand@@Base+0x728>
   41760:	cmp	w0, #0x8
   41764:	b.ne	41ad4 <aarch64_print_operand@@Base+0xf7c>  // b.any
   41768:	ldr	x4, [x21, #16]
   4176c:	adrp	x2, 58000 <xexit@@Base+0xe08>
   41770:	mov	x1, x20
   41774:	mov	x0, x19
   41778:	add	x2, x2, #0xd38
   4177c:	mov	x3, x4
   41780:	b	40eac <aarch64_print_operand@@Base+0x354>
   41784:	cmp	w0, #0x2
   41788:	b.eq	417dc <aarch64_print_operand@@Base+0xc84>  // b.none
   4178c:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   41790:	add	x3, x3, #0x9c8
   41794:	adrp	x1, 58000 <xexit@@Base+0xe08>
   41798:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   4179c:	add	x3, x3, #0x180
   417a0:	add	x1, x1, #0x7d8
   417a4:	add	x0, x0, #0x4b0
   417a8:	mov	w2, #0xdbd                 	// #3517
   417ac:	stp	x25, x26, [sp, #64]
   417b0:	stp	x27, x28, [sp, #80]
   417b4:	bl	35ac0 <__assert_fail@plt>
   417b8:	cbz	x25, 418b4 <aarch64_print_operand@@Base+0xd5c>
   417bc:	mov	x3, x25
   417c0:	adrp	x2, 69000 <fields@@Base+0xa2d8>
   417c4:	mov	x1, x20
   417c8:	mov	x0, x19
   417cc:	add	x2, x2, #0xa78
   417d0:	ldp	x25, x26, [sp, #64]
   417d4:	ldp	x27, x28, [sp, #80]
   417d8:	b	40bf8 <aarch64_print_operand@@Base+0xa0>
   417dc:	ldr	w1, [x21, #16]
   417e0:	bl	3f8b0 <print_aarch64_disassembler_options@@Base+0x138>
   417e4:	fmov	s0, w0
   417e8:	adrp	x2, 58000 <xexit@@Base+0xe08>
   417ec:	mov	x1, x20
   417f0:	fcvt	d0, s0
   417f4:	mov	x0, x19
   417f8:	add	x2, x2, #0xd98
   417fc:	b	410d8 <aarch64_print_operand@@Base+0x580>
   41800:	ldr	x3, [x26]
   41804:	mov	x4, x25
   41808:	mov	x2, x24
   4180c:	bl	35380 <snprintf@plt>
   41810:	b	411b4 <aarch64_print_operand@@Base+0x65c>
   41814:	adrp	x2, 58000 <xexit@@Base+0xe08>
   41818:	add	x2, x2, #0xca8
   4181c:	b	40bf8 <aarch64_print_operand@@Base+0xa0>
   41820:	adrp	x2, 58000 <xexit@@Base+0xe08>
   41824:	add	x2, x2, #0x8f8
   41828:	b	40bf8 <aarch64_print_operand@@Base+0xa0>
   4182c:	bl	353f0 <aarch64_get_qualifier_name@plt>
   41830:	mov	x4, x0
   41834:	adrp	x2, 58000 <xexit@@Base+0xe08>
   41838:	mov	w3, w21
   4183c:	mov	x1, x20
   41840:	mov	x0, x19
   41844:	add	x2, x2, #0xc80
   41848:	b	40df4 <aarch64_print_operand@@Base+0x29c>
   4184c:	adrp	x2, 58000 <xexit@@Base+0xe08>
   41850:	mov	x1, x20
   41854:	mov	x0, x19
   41858:	add	x2, x2, #0x8f8
   4185c:	b	40bf8 <aarch64_print_operand@@Base+0xa0>
   41860:	ubfx	x2, x2, #15, #5
   41864:	cmp	x2, x1
   41868:	b.ne	41534 <aarch64_print_operand@@Base+0x9dc>  // b.any
   4186c:	b	4116c <aarch64_print_operand@@Base+0x614>
   41870:	ldrb	w0, [x21, #36]
   41874:	tbnz	w0, #0, 413f4 <aarch64_print_operand@@Base+0x89c>
   41878:	ubfx	x2, x2, #15, #5
   4187c:	cmp	x2, x1
   41880:	b.ne	413f4 <aarch64_print_operand@@Base+0x89c>  // b.any
   41884:	b	4116c <aarch64_print_operand@@Base+0x614>
   41888:	ldrb	w0, [x21, #48]
   4188c:	tbz	w0, #1, 4116c <aarch64_print_operand@@Base+0x614>
   41890:	b	40d68 <aarch64_print_operand@@Base+0x210>
   41894:	ldr	x3, [x0]
   41898:	b	412a0 <aarch64_print_operand@@Base+0x748>
   4189c:	adrp	x2, 58000 <xexit@@Base+0xe08>
   418a0:	mov	w3, w21
   418a4:	mov	x1, x20
   418a8:	mov	x0, x19
   418ac:	add	x2, x2, #0xc60
   418b0:	b	40e28 <aarch64_print_operand@@Base+0x2d0>
   418b4:	ldr	w3, [x21, #16]
   418b8:	mov	x1, x20
   418bc:	mov	x0, x19
   418c0:	adrp	x2, 58000 <xexit@@Base+0xe08>
   418c4:	ldp	x19, x20, [sp, #16]
   418c8:	and	w7, w3, #0x7
   418cc:	ldp	x21, x22, [sp, #32]
   418d0:	ubfx	x6, x3, #3, #4
   418d4:	ldp	x23, x24, [sp, #48]
   418d8:	ubfx	x5, x3, #7, #4
   418dc:	ldp	x25, x26, [sp, #64]
   418e0:	ubfx	x4, x3, #11, #3
   418e4:	ldp	x27, x28, [sp, #80]
   418e8:	add	x2, x2, #0xe10
   418ec:	ldp	x29, x30, [sp], #112
   418f0:	ubfx	x3, x3, #14, #2
   418f4:	b	35380 <snprintf@plt>
   418f8:	ldr	w3, [x0, #8]
   418fc:	adrp	x2, 58000 <xexit@@Base+0xe08>
   41900:	mov	x1, x20
   41904:	add	x2, x2, #0xe28
   41908:	mov	x0, x19
   4190c:	b	40e28 <aarch64_print_operand@@Base+0x2d0>
   41910:	mov	x3, x1
   41914:	mov	x0, x19
   41918:	mov	x1, x20
   4191c:	adrp	x2, 58000 <xexit@@Base+0xe08>
   41920:	add	x2, x2, #0xca8
   41924:	bl	35380 <snprintf@plt>
   41928:	b	41420 <aarch64_print_operand@@Base+0x8c8>
   4192c:	bl	353f0 <aarch64_get_qualifier_name@plt>
   41930:	mov	x4, x0
   41934:	adrp	x2, 58000 <xexit@@Base+0xe08>
   41938:	mov	w3, w21
   4193c:	mov	x1, x20
   41940:	mov	x0, x19
   41944:	add	x2, x2, #0xc68
   41948:	b	40df4 <aarch64_print_operand@@Base+0x29c>
   4194c:	mov	x0, x27
   41950:	adrp	x1, 58000 <xexit@@Base+0xe08>
   41954:	mov	w2, #0x5                   	// #5
   41958:	add	x1, x1, #0xdc8
   4195c:	bl	359e0 <dcgettext@plt>
   41960:	str	x0, [x23]
   41964:	b	41348 <aarch64_print_operand@@Base+0x7f0>
   41968:	adrp	x2, 58000 <xexit@@Base+0xe08>
   4196c:	mov	x0, x19
   41970:	add	x2, x2, #0x890
   41974:	b	40c60 <aarch64_print_operand@@Base+0x108>
   41978:	ldr	w0, [x21, #16]
   4197c:	ubfx	w1, w1, #15, #5
   41980:	cmp	w0, w1
   41984:	b.ne	40d68 <aarch64_print_operand@@Base+0x210>  // b.any
   41988:	b	4116c <aarch64_print_operand@@Base+0x614>
   4198c:	ldrb	w1, [x4, #4]
   41990:	cmp	w1, #0x1
   41994:	ccmp	w22, #0x8, #0x0, eq  // eq = none
   41998:	b.ne	41680 <aarch64_print_operand@@Base+0xb28>  // b.any
   4199c:	b	41700 <aarch64_print_operand@@Base+0xba8>
   419a0:	bl	35680 <aarch64_get_qualifier_esize@plt>
   419a4:	and	w0, w0, #0xff
   419a8:	cmp	w0, #0x4
   419ac:	adrp	x4, 88000 <_sch_istable@@Base+0x145d8>
   419b0:	cset	x3, ne  // ne = any
   419b4:	add	x4, x4, #0x3d0
   419b8:	adrp	x2, 69000 <fields@@Base+0xa2d8>
   419bc:	mov	x1, x20
   419c0:	lsl	x3, x3, #5
   419c4:	mov	x0, x19
   419c8:	add	x3, x3, w22, sxtw
   419cc:	add	x2, x2, #0xa78
   419d0:	add	x3, x3, #0x40
   419d4:	ldr	x3, [x4, x3, lsl #3]
   419d8:	b	40bf8 <aarch64_print_operand@@Base+0xa0>
   419dc:	cbz	x23, 417bc <aarch64_print_operand@@Base+0xc64>
   419e0:	str	xzr, [x23]
   419e4:	b	417bc <aarch64_print_operand@@Base+0xc64>
   419e8:	bl	35680 <aarch64_get_qualifier_esize@plt>
   419ec:	and	w0, w0, #0xff
   419f0:	cmp	w0, #0x4
   419f4:	adrp	x4, 88000 <_sch_istable@@Base+0x145d8>
   419f8:	cset	x3, ne  // ne = any
   419fc:	add	x4, x4, #0x3d0
   41a00:	adrp	x2, 69000 <fields@@Base+0xa2d8>
   41a04:	mov	x1, x20
   41a08:	lsl	x3, x3, #5
   41a0c:	mov	x0, x19
   41a10:	add	x3, x3, w23, sxtw
   41a14:	add	x2, x2, #0xa78
   41a18:	add	x3, x3, #0x40
   41a1c:	ldr	x3, [x4, x3, lsl #3]
   41a20:	b	40bf8 <aarch64_print_operand@@Base+0xa0>
   41a24:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   41a28:	add	x3, x3, #0x9c8
   41a2c:	adrp	x1, 58000 <xexit@@Base+0xe08>
   41a30:	adrp	x0, 58000 <xexit@@Base+0xe08>
   41a34:	add	x3, x3, #0x180
   41a38:	add	x1, x1, #0x7d8
   41a3c:	add	x0, x0, #0xbf8
   41a40:	mov	w2, #0xc82                 	// #3202
   41a44:	stp	x25, x26, [sp, #64]
   41a48:	stp	x27, x28, [sp, #80]
   41a4c:	bl	35ac0 <__assert_fail@plt>
   41a50:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   41a54:	add	x3, x3, #0x9c8
   41a58:	adrp	x1, 58000 <xexit@@Base+0xe08>
   41a5c:	adrp	x0, 58000 <xexit@@Base+0xe08>
   41a60:	add	x3, x3, #0x180
   41a64:	add	x1, x1, #0x7d8
   41a68:	add	x0, x0, #0xb00
   41a6c:	mov	w2, #0xca1                 	// #3233
   41a70:	stp	x25, x26, [sp, #64]
   41a74:	stp	x27, x28, [sp, #80]
   41a78:	bl	35ac0 <__assert_fail@plt>
   41a7c:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   41a80:	add	x3, x3, #0x9c8
   41a84:	adrp	x1, 58000 <xexit@@Base+0xe08>
   41a88:	adrp	x0, 58000 <xexit@@Base+0xe08>
   41a8c:	add	x3, x3, #0x180
   41a90:	add	x1, x1, #0x7d8
   41a94:	add	x0, x0, #0xcf0
   41a98:	mov	w2, #0xd66                 	// #3430
   41a9c:	stp	x25, x26, [sp, #64]
   41aa0:	stp	x27, x28, [sp, #80]
   41aa4:	bl	35ac0 <__assert_fail@plt>
   41aa8:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   41aac:	add	x3, x3, #0x9c8
   41ab0:	adrp	x1, 58000 <xexit@@Base+0xe08>
   41ab4:	adrp	x0, 58000 <xexit@@Base+0xe08>
   41ab8:	add	x3, x3, #0x180
   41abc:	add	x1, x1, #0x7d8
   41ac0:	add	x0, x0, #0xb50
   41ac4:	mov	w2, #0xc78                 	// #3192
   41ac8:	stp	x25, x26, [sp, #64]
   41acc:	stp	x27, x28, [sp, #80]
   41ad0:	bl	35ac0 <__assert_fail@plt>
   41ad4:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   41ad8:	add	x3, x3, #0x9c8
   41adc:	adrp	x1, 58000 <xexit@@Base+0xe08>
   41ae0:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   41ae4:	add	x3, x3, #0x180
   41ae8:	add	x1, x1, #0x7d8
   41aec:	add	x0, x0, #0x4b0
   41af0:	mov	w2, #0xd7a                 	// #3450
   41af4:	stp	x25, x26, [sp, #64]
   41af8:	stp	x27, x28, [sp, #80]
   41afc:	bl	35ac0 <__assert_fail@plt>
   41b00:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   41b04:	add	x3, x3, #0x9c8
   41b08:	adrp	x1, 58000 <xexit@@Base+0xe08>
   41b0c:	adrp	x0, 58000 <xexit@@Base+0xe08>
   41b10:	add	x3, x3, #0x180
   41b14:	add	x1, x1, #0x7d8
   41b18:	add	x0, x0, #0xcb8
   41b1c:	mov	w2, #0xd49                 	// #3401
   41b20:	stp	x25, x26, [sp, #64]
   41b24:	stp	x27, x28, [sp, #80]
   41b28:	bl	35ac0 <__assert_fail@plt>
   41b2c:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   41b30:	add	x3, x3, #0x9c8
   41b34:	adrp	x1, 58000 <xexit@@Base+0xe08>
   41b38:	adrp	x0, 58000 <xexit@@Base+0xe08>
   41b3c:	add	x3, x3, #0x180
   41b40:	add	x1, x1, #0x7d8
   41b44:	add	x0, x0, #0xcb8
   41b48:	mov	w2, #0xd56                 	// #3414
   41b4c:	stp	x25, x26, [sp, #64]
   41b50:	stp	x27, x28, [sp, #80]
   41b54:	bl	35ac0 <__assert_fail@plt>
   41b58:	stp	x25, x26, [sp, #64]
   41b5c:	stp	x27, x28, [sp, #80]
   41b60:	bl	3fab8 <print_aarch64_disassembler_options@@Base+0x340>
   41b64:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   41b68:	add	x3, x3, #0x9c8
   41b6c:	adrp	x1, 58000 <xexit@@Base+0xe08>
   41b70:	adrp	x0, 58000 <xexit@@Base+0xe08>
   41b74:	add	x3, x3, #0x180
   41b78:	add	x1, x1, #0x7d8
   41b7c:	add	x0, x0, #0xb00
   41b80:	mov	w2, #0xc6d                 	// #3181
   41b84:	stp	x25, x26, [sp, #64]
   41b88:	stp	x27, x28, [sp, #80]
   41b8c:	bl	35ac0 <__assert_fail@plt>
   41b90:	stp	x25, x26, [sp, #64]
   41b94:	stp	x27, x28, [sp, #80]
   41b98:	bl	35670 <abort@plt>
   41b9c:	nop

0000000000041ba0 <aarch64_sys_reg_supported_p@@Base>:
   41ba0:	mov	x2, x0
   41ba4:	ldr	w0, [x1, #12]
   41ba8:	tbz	w0, #1, 41df8 <aarch64_sys_reg_supported_p@@Base+0x258>
   41bac:	ldr	w1, [x1, #8]
   41bb0:	mov	w0, #0xc213                	// #49683
   41bb4:	cmp	w1, w0
   41bb8:	b.eq	41bf4 <aarch64_sys_reg_supported_p@@Base+0x54>  // b.none
   41bbc:	mov	w8, #0xffff2179            	// #-56967
   41bc0:	add	w3, w1, w8
   41bc4:	tst	w3, #0xffffefff
   41bc8:	and	w0, w1, #0xffffdfff
   41bcc:	mov	w3, #0xc687                	// #50823
   41bd0:	ccmp	w0, w3, #0x4, ne  // ne = any
   41bd4:	b.ne	41e00 <aarch64_sys_reg_supported_p@@Base+0x260>  // b.any
   41bd8:	tbz	x2, #45, 41e5c <aarch64_sys_reg_supported_p@@Base+0x2bc>
   41bdc:	mov	w0, #0xc01c                	// #49180
   41be0:	cmp	w1, w0
   41be4:	b.ne	41e18 <aarch64_sys_reg_supported_p@@Base+0x278>  // b.any
   41be8:	mov	w0, #0x0                   	// #0
   41bec:	tbnz	x2, #46, 41c14 <aarch64_sys_reg_supported_p@@Base+0x74>
   41bf0:	ret
   41bf4:	mov	w0, #0x0                   	// #0
   41bf8:	tbz	w2, #21, 41bf0 <aarch64_sys_reg_supported_p@@Base+0x50>
   41bfc:	mov	w7, #0xffff18e8            	// #-59160
   41c00:	add	w0, w1, w7
   41c04:	cmp	w0, #0x2
   41c08:	b.hi	41c14 <aarch64_sys_reg_supported_p@@Base+0x74>  // b.pmore
   41c0c:	mov	w0, #0x0                   	// #0
   41c10:	tbz	w2, #24, 41bf0 <aarch64_sys_reg_supported_p@@Base+0x50>
   41c14:	mov	w0, #0xeb00                	// #60160
   41c18:	cmp	w1, w0
   41c1c:	mov	w0, #0xea90                	// #60048
   41c20:	ccmp	w1, w0, #0x4, ne  // ne = any
   41c24:	cset	w0, eq  // eq = none
   41c28:	mov	w3, #0xee81                	// #61057
   41c2c:	cmp	w1, w3
   41c30:	mov	w4, #0xee00                	// #60928
   41c34:	mov	w3, #0xffff1600            	// #-59904
   41c38:	ccmp	w1, w4, #0x4, ne  // ne = any
   41c3c:	add	w3, w1, w3
   41c40:	csinc	w0, w0, wzr, ne  // ne = any
   41c44:	and	w5, w1, #0xfffffffd
   41c48:	cmp	w3, #0x1
   41c4c:	mov	w4, #0xffff1700            	// #-59648
   41c50:	mov	w3, #0xe880                	// #59520
   41c54:	add	w4, w1, w4
   41c58:	ccmp	w5, w3, #0x4, hi  // hi = pmore
   41c5c:	csinc	w3, w0, wzr, ne  // ne = any
   41c60:	mov	w6, #0xffff1578            	// #-60040
   41c64:	cmp	w4, #0x2
   41c68:	add	w0, w1, w6
   41c6c:	ccmp	w0, #0x1, #0x0, hi  // hi = pmore
   41c70:	and	w4, w1, #0xfffffff7
   41c74:	cset	w0, ls  // ls = plast
   41c78:	mov	w6, #0xef08                	// #61192
   41c7c:	cmp	w1, w6
   41c80:	orr	w0, w0, w3
   41c84:	mov	w3, #0xed10                	// #60688
   41c88:	ccmp	w4, w3, #0x4, ne  // ne = any
   41c8c:	csinc	w0, w0, wzr, ne  // ne = any
   41c90:	cbz	w0, 41f9c <aarch64_sys_reg_supported_p@@Base+0x3fc>
   41c94:	mov	w0, #0x0                   	// #0
   41c98:	tbz	w2, #24, 41bf0 <aarch64_sys_reg_supported_p@@Base+0x50>
   41c9c:	mov	w0, #0xc03a                	// #49210
   41ca0:	cmp	w1, w0
   41ca4:	b.eq	41e38 <aarch64_sys_reg_supported_p@@Base+0x298>  // b.none
   41ca8:	mov	w0, #0xc214                	// #49684
   41cac:	cmp	w1, w0
   41cb0:	b.eq	41e38 <aarch64_sys_reg_supported_p@@Base+0x298>  // b.none
   41cb4:	mov	w16, #0xffff3d68            	// #-49816
   41cb8:	add	w3, w1, w16
   41cbc:	mov	w6, #0xfffffff4            	// #-12
   41cc0:	mov	w17, #0xffff3d58            	// #-49832
   41cc4:	tst	w3, w6
   41cc8:	add	w0, w1, w17
   41ccc:	ccmp	w0, #0x1, #0x0, ne  // ne = any
   41cd0:	b.hi	41f68 <aarch64_sys_reg_supported_p@@Base+0x3c8>  // b.pmore
   41cd4:	mov	w0, #0x0                   	// #0
   41cd8:	tbz	w2, #26, 41bf0 <aarch64_sys_reg_supported_p@@Base+0x50>
   41cdc:	and	w3, w1, #0xffffdfff
   41ce0:	mov	w15, #0xffff3b36            	// #-50378
   41ce4:	add	w0, w1, w15
   41ce8:	cmp	w0, #0x7
   41cec:	and	w7, w1, #0xfffffffb
   41cf0:	mov	w0, #0xc4d3                	// #50387
   41cf4:	ccmp	w7, w0, #0x4, hi  // hi = pmore
   41cf8:	cset	w0, eq  // eq = none
   41cfc:	mov	w6, #0xecc8                	// #60616
   41d00:	cmp	w1, w6
   41d04:	mov	w6, #0xc4c8                	// #50376
   41d08:	ccmp	w3, w6, #0x4, ne  // ne = any
   41d0c:	csinc	w0, w0, wzr, ne  // ne = any
   41d10:	cbz	w0, 41d1c <aarch64_sys_reg_supported_p@@Base+0x17c>
   41d14:	mov	w0, #0x0                   	// #0
   41d18:	tbz	w2, #27, 41bf0 <aarch64_sys_reg_supported_p@@Base+0x50>
   41d1c:	mov	w13, #0xffff3ef8            	// #-49416
   41d20:	add	w6, w1, w13
   41d24:	mov	w8, #0xfffffff4            	// #-12
   41d28:	mov	w14, #0xffff3ee8            	// #-49432
   41d2c:	tst	w6, w8
   41d30:	add	w0, w1, w14
   41d34:	ccmp	w0, #0x1, #0x0, ne  // ne = any
   41d38:	b.hi	41d44 <aarch64_sys_reg_supported_p@@Base+0x1a4>  // b.pmore
   41d3c:	mov	w0, #0x0                   	// #0
   41d40:	tbz	w2, #6, 41bf0 <aarch64_sys_reg_supported_p@@Base+0x50>
   41d44:	mov	w12, #0xffff1770            	// #-59536
   41d48:	add	w0, w1, w12
   41d4c:	tst	w0, #0xfffff7ff
   41d50:	mov	w8, #0xc090                	// #49296
   41d54:	ccmp	w3, w8, #0x4, ne  // ne = any
   41d58:	mov	w6, #0xc024                	// #49188
   41d5c:	cset	w0, eq  // eq = none
   41d60:	cmp	w1, w6
   41d64:	mov	w3, #0xc007                	// #49159
   41d68:	ccmp	w1, w3, #0x4, ne  // ne = any
   41d6c:	csinc	w0, w0, wzr, ne  // ne = any
   41d70:	cbz	w0, 41d7c <aarch64_sys_reg_supported_p@@Base+0x1dc>
   41d74:	mov	w0, #0x0                   	// #0
   41d78:	tbz	w2, #28, 41bf0 <aarch64_sys_reg_supported_p@@Base+0x50>
   41d7c:	mov	w0, #0xda15                	// #55829
   41d80:	cmp	w1, w0
   41d84:	b.eq	41e88 <aarch64_sys_reg_supported_p@@Base+0x2e8>  // b.none
   41d88:	mov	w0, #0xe132                	// #57650
   41d8c:	cmp	w1, w0
   41d90:	b.ne	41e64 <aarch64_sys_reg_supported_p@@Base+0x2c4>  // b.any
   41d94:	mov	w0, #0x0                   	// #0
   41d98:	tbz	w2, #11, 41bf0 <aarch64_sys_reg_supported_p@@Base+0x50>
   41d9c:	mov	w5, #0xffff26e0            	// #-55584
   41da0:	add	w0, w1, w5
   41da4:	cmp	w0, #0x1
   41da8:	b.ls	41f8c <aarch64_sys_reg_supported_p@@Base+0x3ec>  // b.plast
   41dac:	mov	w0, #0xda17                	// #55831
   41db0:	cmp	w1, w0
   41db4:	b.ne	41dc0 <aarch64_sys_reg_supported_p@@Base+0x220>  // b.any
   41db8:	ubfx	x0, x2, #48, #1
   41dbc:	ret
   41dc0:	mov	w0, #0xffff3d50            	// #-49840
   41dc4:	add	w0, w1, w0
   41dc8:	and	w3, w1, #0xfffff7ff
   41dcc:	cmp	w0, #0x1
   41dd0:	mov	w0, #0xe2b0                	// #58032
   41dd4:	ccmp	w3, w0, #0x4, hi  // hi = pmore
   41dd8:	mov	w4, #0xffff3f7b            	// #-49285
   41ddc:	mov	w3, #0xf2b0                	// #62128
   41de0:	add	w0, w1, w4
   41de4:	ccmp	w1, w3, #0x4, ne  // ne = any
   41de8:	ccmp	w0, #0x1, #0x0, ne  // ne = any
   41dec:	mov	w0, #0xc804                	// #51204
   41df0:	ccmp	w1, w0, #0x4, hi  // hi = pmore
   41df4:	b.eq	41db8 <aarch64_sys_reg_supported_p@@Base+0x218>  // b.none
   41df8:	mov	w0, #0x1                   	// #1
   41dfc:	ret
   41e00:	mov	w0, #0xf687                	// #63111
   41e04:	cmp	w1, w0
   41e08:	b.ne	41bdc <aarch64_sys_reg_supported_p@@Base+0x3c>  // b.any
   41e0c:	mov	w0, #0x0                   	// #0
   41e10:	tbnz	x2, #45, 41bfc <aarch64_sys_reg_supported_p@@Base+0x5c>
   41e14:	ret
   41e18:	mov	w0, #0xda16                	// #55830
   41e1c:	cmp	w1, w0
   41e20:	b.ne	41e44 <aarch64_sys_reg_supported_p@@Base+0x2a4>  // b.any
   41e24:	mov	w0, #0x0                   	// #0
   41e28:	tbz	x2, #47, 41bf0 <aarch64_sys_reg_supported_p@@Base+0x50>
   41e2c:	mov	w4, w1
   41e30:	mov	w5, #0xda14                	// #55828
   41e34:	b	41c9c <aarch64_sys_reg_supported_p@@Base+0xfc>
   41e38:	mov	w0, #0x0                   	// #0
   41e3c:	tbnz	w2, #5, 41cdc <aarch64_sys_reg_supported_p@@Base+0x13c>
   41e40:	ret
   41e44:	mov	w0, #0xe101                	// #57601
   41e48:	cmp	w1, w0
   41e4c:	mov	w0, #0xe681                	// #59009
   41e50:	ccmp	w1, w0, #0x4, ne  // ne = any
   41e54:	b.eq	41c0c <aarch64_sys_reg_supported_p@@Base+0x6c>  // b.none
   41e58:	b	41bfc <aarch64_sys_reg_supported_p@@Base+0x5c>
   41e5c:	mov	w0, #0x0                   	// #0
   41e60:	ret
   41e64:	mov	w11, #0xffff18e0            	// #-59168
   41e68:	add	w4, w4, w11
   41e6c:	cmp	w4, #0x2
   41e70:	mov	w0, #0xe099                	// #57497
   41e74:	and	w4, w1, #0xffffffdf
   41e78:	ccmp	w1, w0, #0x4, hi  // hi = pmore
   41e7c:	mov	w0, #0xe110                	// #57616
   41e80:	ccmp	w4, w0, #0x4, ne  // ne = any
   41e84:	b.ne	41e90 <aarch64_sys_reg_supported_p@@Base+0x2f0>  // b.any
   41e88:	tbz	w2, #11, 41e5c <aarch64_sys_reg_supported_p@@Base+0x2bc>
   41e8c:	and	w4, w1, #0xffffffdf
   41e90:	mov	w6, #0xffffbbf8            	// #-17416
   41e94:	add	w0, w1, w6
   41e98:	and	w3, w5, #0xffffffdf
   41e9c:	cmp	w0, #0x3
   41ea0:	mov	w0, #0x440d                	// #17421
   41ea4:	ccmp	w3, w0, #0x4, hi  // hi = pmore
   41ea8:	cset	w0, eq  // eq = none
   41eac:	mov	w3, #0x7429                	// #29737
   41eb0:	cmp	w1, w3
   41eb4:	mov	w6, #0x6420                	// #25632
   41eb8:	mov	w3, #0xffffeffe            	// #-4098
   41ebc:	ccmp	w1, w6, #0x4, ne  // ne = any
   41ec0:	and	w3, w1, w3
   41ec4:	csinc	w0, w0, wzr, ne  // ne = any
   41ec8:	mov	w6, #0x6408                	// #25608
   41ecc:	cmp	w3, w6
   41ed0:	mov	w8, #0xffff9bf4            	// #-25612
   41ed4:	mov	w6, #0x740d                	// #29709
   41ed8:	add	w3, w1, w8
   41edc:	ccmp	w4, w6, #0x4, ne  // ne = any
   41ee0:	csinc	w0, w0, wzr, ne  // ne = any
   41ee4:	and	w4, w5, #0xfffffffb
   41ee8:	cmp	w3, #0x2
   41eec:	mov	w3, #0x4431                	// #17457
   41ef0:	ccmp	w4, w3, #0x4, hi  // hi = pmore
   41ef4:	mov	w3, #0x4429                	// #17449
   41ef8:	csinc	w0, w0, wzr, ne  // ne = any
   41efc:	cmp	w5, w3
   41f00:	mov	w9, #0xffff9bde            	// #-25634
   41f04:	mov	w5, #0x4411                	// #17425
   41f08:	add	w3, w1, w9
   41f0c:	ccmp	w4, w5, #0x4, ne  // ne = any
   41f10:	csinc	w0, w0, wzr, ne  // ne = any
   41f14:	mov	w4, #0x6402                	// #25602
   41f18:	cmp	w3, #0x2
   41f1c:	mov	w10, #0xffff9bda            	// #-25638
   41f20:	ccmp	w7, w4, #0x4, hi  // hi = pmore
   41f24:	add	w4, w1, w10
   41f28:	csinc	w0, w0, wzr, ne  // ne = any
   41f2c:	mov	w3, #0xffffffdb            	// #-37
   41f30:	cmp	w4, #0x1
   41f34:	and	w3, w1, w3
   41f38:	mov	w4, #0x6411                	// #25617
   41f3c:	ccmp	w3, w4, #0x4, hi  // hi = pmore
   41f40:	csinc	w0, w0, wzr, ne  // ne = any
   41f44:	mov	w4, #0x7411                	// #29713
   41f48:	cmp	w3, w4
   41f4c:	mov	w3, #0x6429                	// #25641
   41f50:	ccmp	w7, w3, #0x4, ne  // ne = any
   41f54:	csinc	w0, w0, wzr, ne  // ne = any
   41f58:	cbz	w0, 41d9c <aarch64_sys_reg_supported_p@@Base+0x1fc>
   41f5c:	mov	w0, #0x0                   	// #0
   41f60:	tbnz	w2, #11, 41d9c <aarch64_sys_reg_supported_p@@Base+0x1fc>
   41f64:	ret
   41f68:	mov	w0, #0xe293                	// #58003
   41f6c:	and	w3, w1, #0xffffdfff
   41f70:	cmp	w1, w0
   41f74:	mov	w0, #0xc609                	// #50697
   41f78:	ccmp	w3, w0, #0x4, ne  // ne = any
   41f7c:	b.ne	41ce0 <aarch64_sys_reg_supported_p@@Base+0x140>  // b.any
   41f80:	mov	w0, #0x0                   	// #0
   41f84:	tbnz	w2, #26, 41ce0 <aarch64_sys_reg_supported_p@@Base+0x140>
   41f88:	ret
   41f8c:	mov	x0, #0x82000000000         	// #8933531975680
   41f90:	bics	xzr, x0, x2
   41f94:	cset	w0, eq  // eq = none
   41f98:	ret
   41f9c:	mov	w18, #0xffff10f0            	// #-61200
   41fa0:	add	w0, w4, w18
   41fa4:	cmp	w0, #0x2
   41fa8:	b.hi	41c9c <aarch64_sys_reg_supported_p@@Base+0xfc>  // b.pmore
   41fac:	mov	w0, #0x0                   	// #0
   41fb0:	tbnz	w2, #24, 41c9c <aarch64_sys_reg_supported_p@@Base+0xfc>
   41fb4:	ret

0000000000041fb8 <aarch64_pstatefield_supported_p@@Base>:
   41fb8:	ldr	w2, [x1, #12]
   41fbc:	tbz	w2, #1, 41ff4 <aarch64_pstatefield_supported_p@@Base+0x3c>
   41fc0:	ldr	w1, [x1, #8]
   41fc4:	cmp	w1, #0x4
   41fc8:	b.eq	41fec <aarch64_pstatefield_supported_p@@Base+0x34>  // b.none
   41fcc:	cmp	w1, #0x3
   41fd0:	b.eq	4200c <aarch64_pstatefield_supported_p@@Base+0x54>  // b.none
   41fd4:	cmp	w1, #0x19
   41fd8:	b.eq	42014 <aarch64_pstatefield_supported_p@@Base+0x5c>  // b.none
   41fdc:	cmp	w1, #0x1a
   41fe0:	b.ne	41ffc <aarch64_pstatefield_supported_p@@Base+0x44>  // b.any
   41fe4:	ubfx	w0, w0, #11, #1
   41fe8:	ret
   41fec:	ubfx	w0, w0, #21, #1
   41ff0:	ret
   41ff4:	mov	w0, #0x1                   	// #1
   41ff8:	ret
   41ffc:	cmp	w1, #0x1c
   42000:	b.ne	41ff4 <aarch64_pstatefield_supported_p@@Base+0x3c>  // b.any
   42004:	ubfx	x0, x0, #48, #1
   42008:	ret
   4200c:	ubfx	w0, w0, #5, #1
   42010:	ret
   42014:	ubfx	x0, x0, #47, #1
   42018:	ret
   4201c:	nop

0000000000042020 <aarch64_sys_ins_reg_has_xt@@Base>:
   42020:	ldr	w0, [x0, #12]
   42024:	ubfx	x0, x0, #2, #1
   42028:	ret
   4202c:	nop

0000000000042030 <aarch64_sys_ins_reg_supported_p@@Base>:
   42030:	mov	x2, x0
   42034:	ldr	w0, [x1, #12]
   42038:	tbz	w0, #1, 420dc <aarch64_sys_ins_reg_supported_p@@Base+0xac>
   4203c:	ldr	w1, [x1, #8]
   42040:	mov	w0, #0x5be1                	// #23521
   42044:	cmp	w1, w0
   42048:	b.eq	420d4 <aarch64_sys_ins_reg_supported_p@@Base+0xa4>  // b.none
   4204c:	mov	w0, #0x5be9                	// #23529
   42050:	cmp	w1, w0
   42054:	b.eq	420f8 <aarch64_sys_ins_reg_supported_p@@Base+0xc8>  // b.none
   42058:	and	w3, w1, #0xffffffdf
   4205c:	and	w0, w1, #0xfffffff7
   42060:	mov	w4, #0xffffa42d            	// #-23507
   42064:	mov	w5, #0xffffa41d            	// #-23523
   42068:	add	w3, w3, w4
   4206c:	add	w0, w0, w5
   42070:	tst	w3, #0xfffffffd
   42074:	and	w0, w0, #0xfffffffd
   42078:	ccmp	w0, #0x0, #0x4, ne  // ne = any
   4207c:	mov	w4, #0xffffffdd            	// #-35
   42080:	and	w4, w1, w4
   42084:	cset	w0, eq  // eq = none
   42088:	mov	w5, #0x43d4                	// #17364
   4208c:	mov	w6, #0xffffbc4d            	// #-17331
   42090:	cmp	w4, w5
   42094:	add	w3, w1, w6
   42098:	ccmp	w3, #0x3, #0x0, ne  // ne = any
   4209c:	mov	w7, #0xffffa45d            	// #-23459
   420a0:	add	w4, w1, w7
   420a4:	cset	w3, ls  // ls = plast
   420a8:	cmp	w4, #0x1
   420ac:	orr	w3, w0, w3
   420b0:	cset	w0, ls  // ls = plast
   420b4:	orr	w0, w0, w3
   420b8:	cbz	w0, 420c4 <aarch64_sys_ins_reg_supported_p@@Base+0x94>
   420bc:	mov	w0, #0x0                   	// #0
   420c0:	tbz	x2, #48, 420d8 <aarch64_sys_ins_reg_supported_p@@Base+0xa8>
   420c4:	mov	w0, #0xffffbc38            	// #-17352
   420c8:	add	w0, w1, w0
   420cc:	cmp	w0, #0x1
   420d0:	b.hi	420e4 <aarch64_sys_ins_reg_supported_p@@Base+0xb4>  // b.pmore
   420d4:	ubfx	w0, w2, #5, #1
   420d8:	ret
   420dc:	mov	w0, #0x1                   	// #1
   420e0:	ret
   420e4:	mov	w0, #0x5b98                	// #23448
   420e8:	cmp	w1, w0
   420ec:	b.ne	420dc <aarch64_sys_ins_reg_supported_p@@Base+0xac>  // b.any
   420f0:	ubfx	x0, x2, #41, #1
   420f4:	ret
   420f8:	ubfx	x0, x2, #42, #1
   420fc:	ret

0000000000042100 <init_insn_sequence@@Base>:
   42100:	stp	x29, x30, [sp, #-32]!
   42104:	mov	x29, sp
   42108:	stp	x19, x20, [sp, #16]
   4210c:	mov	x20, x0
   42110:	mov	x19, x1
   42114:	ldr	x0, [x1]
   42118:	str	wzr, [x1, #8]
   4211c:	str	wzr, [x1, #24]
   42120:	cbz	x0, 42128 <init_insn_sequence@@Base+0x28>
   42124:	bl	35790 <free@plt>
   42128:	str	xzr, [x19]
   4212c:	cbz	x20, 42194 <init_insn_sequence@@Base+0x94>
   42130:	mov	x0, #0x168                 	// #360
   42134:	bl	35480 <xmalloc@plt>
   42138:	str	x0, [x19]
   4213c:	mov	x1, x20
   42140:	mov	x2, #0x168                 	// #360
   42144:	bl	35050 <memcpy@plt>
   42148:	ldr	x1, [x20, #8]
   4214c:	ldr	x0, [x19, #16]
   42150:	ldr	w20, [x1, #128]
   42154:	and	w20, w20, #0x1
   42158:	cbz	x0, 42160 <init_insn_sequence@@Base+0x60>
   4215c:	bl	35790 <free@plt>
   42160:	str	xzr, [x19, #16]
   42164:	cbnz	w20, 42174 <init_insn_sequence@@Base+0x74>
   42168:	ldp	x19, x20, [sp, #16]
   4216c:	ldp	x29, x30, [sp], #32
   42170:	ret
   42174:	mov	x0, #0x168                 	// #360
   42178:	bl	35480 <xmalloc@plt>
   4217c:	str	x0, [x19, #16]
   42180:	mov	x2, #0x168                 	// #360
   42184:	ldp	x19, x20, [sp, #16]
   42188:	mov	w1, #0x0                   	// #0
   4218c:	ldp	x29, x30, [sp], #32
   42190:	b	35470 <memset@plt>
   42194:	ldr	x0, [x19, #16]
   42198:	cbz	x0, 42168 <init_insn_sequence@@Base+0x68>
   4219c:	bl	35790 <free@plt>
   421a0:	str	xzr, [x19, #16]
   421a4:	ldp	x19, x20, [sp, #16]
   421a8:	ldp	x29, x30, [sp], #32
   421ac:	ret

00000000000421b0 <verify_constraints@@Base>:
   421b0:	stp	x29, x30, [sp, #-304]!
   421b4:	mov	x29, sp
   421b8:	stp	x19, x20, [sp, #16]
   421bc:	cbz	x0, 42760 <verify_constraints@@Base+0x5b0>
   421c0:	stp	x25, x26, [sp, #64]
   421c4:	mov	x20, x0
   421c8:	ldr	x26, [x0, #8]
   421cc:	stp	x21, x22, [sp, #32]
   421d0:	cbz	x26, 427bc <verify_constraints@@Base+0x60c>
   421d4:	ldr	w1, [x26, #128]
   421d8:	mov	x19, x5
   421dc:	stp	x27, x28, [sp, #80]
   421e0:	mov	x27, x4
   421e4:	cbnz	w1, 423a0 <verify_constraints@@Base+0x1f0>
   421e8:	ldr	x0, [x5]
   421ec:	cbz	x0, 42554 <verify_constraints@@Base+0x3a4>
   421f0:	ldr	x6, [x26, #120]
   421f4:	tbnz	w6, #31, 42518 <verify_constraints@@Base+0x368>
   421f8:	cmp	w3, #0x0
   421fc:	ccmp	x2, #0x0, #0x0, eq  // eq = none
   42200:	ldr	x2, [x0, #8]
   42204:	b.eq	425e0 <verify_constraints@@Base+0x430>  // b.none
   42208:	ldr	w2, [x2, #128]
   4220c:	and	w21, w2, #0x1
   42210:	tbz	w2, #0, 42420 <verify_constraints@@Base+0x270>
   42214:	ldr	x2, [x26, #24]
   42218:	cbz	x2, 42478 <verify_constraints@@Base+0x2c8>
   4221c:	ldr	x2, [x2]
   42220:	and	x2, x2, #0x1ffffff0
   42224:	and	x2, x2, #0xfffffffff000001f
   42228:	cbz	x2, 42478 <verify_constraints@@Base+0x2c8>
   4222c:	tbz	w1, #0, 42628 <verify_constraints@@Base+0x478>
   42230:	ldr	w1, [x0, #24]
   42234:	add	x2, sp, #0x88
   42238:	stp	x23, x24, [sp, #48]
   4223c:	cmp	w1, #0xc1
   42240:	ldrb	w1, [x0, #28]
   42244:	str	w1, [sp, #124]
   42248:	ldr	w1, [x0, #40]
   4224c:	str	w1, [sp, #108]
   42250:	stp	xzr, xzr, [sp, #136]
   42254:	stp	xzr, xzr, [sp, #152]
   42258:	stp	xzr, xzr, [sp, #168]
   4225c:	str	xzr, [sp, #184]
   42260:	stp	xzr, xzr, [sp, #192]
   42264:	stp	xzr, xzr, [sp, #208]
   42268:	stp	xzr, xzr, [sp, #224]
   4226c:	str	xzr, [sp, #240]
   42270:	b.ne	427e8 <verify_constraints@@Base+0x638>  // b.any
   42274:	ldr	w1, [x0, #80]
   42278:	str	wzr, [sp, #116]
   4227c:	cmp	w1, #0xa4
   42280:	b.ne	422b0 <verify_constraints@@Base+0x100>  // b.any
   42284:	add	x3, x0, #0x50
   42288:	mov	w1, #0x1                   	// #1
   4228c:	str	w1, [sp, #116]
   42290:	ldp	x0, x1, [x0, #80]
   42294:	stp	x0, x1, [x2]
   42298:	ldp	x0, x1, [x3, #16]
   4229c:	stp	x0, x1, [x2, #16]
   422a0:	ldp	x0, x1, [x3, #32]
   422a4:	stp	x0, x1, [x2, #32]
   422a8:	ldr	x0, [x3, #48]
   422ac:	str	x0, [x2, #48]
   422b0:	mov	x0, x26
   422b4:	bl	35170 <aarch64_num_of_operands@plt>
   422b8:	mov	w12, w0
   422bc:	cmp	w0, #0x0
   422c0:	b.le	426bc <verify_constraints@@Base+0x50c>
   422c4:	mov	x24, #0xcc000000            	// #3422552064
   422c8:	mov	w0, #0xffffffff            	// #-1
   422cc:	add	x21, x20, #0x18
   422d0:	add	x28, sp, #0xf8
   422d4:	mov	w22, #0x0                   	// #0
   422d8:	mov	w25, #0x0                   	// #0
   422dc:	mov	x23, #0x1                   	// #1
   422e0:	movk	x24, #0x241, lsl #32
   422e4:	str	w0, [sp, #104]
   422e8:	str	wzr, [sp, #112]
   422ec:	str	wzr, [sp, #120]
   422f0:	b	4231c <verify_constraints@@Base+0x16c>
   422f4:	sub	w1, w1, #0xa3
   422f8:	lsl	x1, x23, x1
   422fc:	tst	w1, #0xff
   42300:	b.ne	424c4 <verify_constraints@@Base+0x314>  // b.any
   42304:	tst	x1, x24
   42308:	b.ne	42368 <verify_constraints@@Base+0x1b8>  // b.any
   4230c:	add	w22, w22, #0x1
   42310:	add	x21, x21, #0x38
   42314:	cmp	w12, w22
   42318:	b.eq	4255c <verify_constraints@@Base+0x3ac>  // b.none
   4231c:	ldp	x0, x1, [x21]
   42320:	stp	x0, x1, [x28]
   42324:	ldr	w1, [x21]
   42328:	ldp	x2, x3, [x21, #16]
   4232c:	stp	x2, x3, [x28, #16]
   42330:	ldrb	w0, [x21, #4]
   42334:	ldp	x6, x7, [x21, #32]
   42338:	stp	x6, x7, [x28, #32]
   4233c:	ldr	w2, [x21, #16]
   42340:	ldr	x13, [x21, #48]
   42344:	str	x13, [x28, #48]
   42348:	cmp	w1, #0xcc
   4234c:	b.hi	4230c <verify_constraints@@Base+0x15c>  // b.pmore
   42350:	cmp	w1, #0xa2
   42354:	b.hi	422f4 <verify_constraints@@Base+0x144>  // b.pmore
   42358:	cmp	w1, #0x19
   4235c:	b.hi	424b4 <verify_constraints@@Base+0x304>  // b.pmore
   42360:	cmp	w1, #0x16
   42364:	b.ls	4230c <verify_constraints@@Base+0x15c>  // b.plast
   42368:	ldr	w1, [sp, #108]
   4236c:	cmp	w2, w1
   42370:	b.ne	42384 <verify_constraints@@Base+0x1d4>  // b.any
   42374:	ldr	w1, [sp, #112]
   42378:	str	w22, [sp, #120]
   4237c:	add	w1, w1, #0x1
   42380:	str	w1, [sp, #112]
   42384:	str	w12, [sp, #100]
   42388:	bl	35680 <aarch64_get_qualifier_esize@plt>
   4238c:	cmp	w25, w0, uxtb
   42390:	ldr	w12, [sp, #100]
   42394:	csel	w10, w25, w0, hi  // hi = pmore
   42398:	and	w25, w10, #0xff
   4239c:	b	4230c <verify_constraints@@Base+0x15c>
   423a0:	cbz	x5, 42794 <verify_constraints@@Base+0x5e4>
   423a4:	ldr	x6, [x26, #120]
   423a8:	mov	w21, #0x0                   	// #0
   423ac:	ldr	x0, [x5]
   423b0:	tbnz	w6, #31, 424ec <verify_constraints@@Base+0x33c>
   423b4:	cbnz	x0, 421f8 <verify_constraints@@Base+0x48>
   423b8:	mov	w0, w21
   423bc:	ldp	x19, x20, [sp, #16]
   423c0:	ldp	x21, x22, [sp, #32]
   423c4:	ldp	x25, x26, [sp, #64]
   423c8:	ldp	x27, x28, [sp, #80]
   423cc:	ldp	x29, x30, [sp], #304
   423d0:	ret
   423d4:	mov	x0, x26
   423d8:	bl	35610 <aarch64_is_destructive_by_operands@plt>
   423dc:	ldr	w1, [sp, #112]
   423e0:	cmp	w0, #0x0
   423e4:	cset	w0, ne  // ne = any
   423e8:	add	w0, w0, #0x1
   423ec:	cbz	w1, 42658 <verify_constraints@@Base+0x4a8>
   423f0:	ldr	w1, [sp, #108]
   423f4:	cmp	w1, w28
   423f8:	b.ne	426a4 <verify_constraints@@Base+0x4f4>  // b.any
   423fc:	ldr	w1, [sp, #112]
   42400:	cmp	w1, w0
   42404:	b.gt	426f8 <verify_constraints@@Base+0x548>
   42408:	ldr	w0, [sp, #124]
   4240c:	cmp	w21, #0x0
   42410:	ccmp	w0, #0x0, #0x4, ne  // ne = any
   42414:	b.ne	42738 <verify_constraints@@Base+0x588>  // b.any
   42418:	ldp	x23, x24, [sp, #48]
   4241c:	mov	w21, #0x0                   	// #0
   42420:	ldr	w0, [x19, #24]
   42424:	mov	x1, x20
   42428:	ldr	x3, [x19, #16]
   4242c:	add	w4, w0, #0x1
   42430:	str	w4, [x19, #24]
   42434:	mov	x2, #0x168                 	// #360
   42438:	add	x0, x3, w0, sxtw #3
   4243c:	bl	35050 <memcpy@plt>
   42440:	ldr	w0, [x19, #8]
   42444:	ldr	w1, [x19, #24]
   42448:	cmp	w1, w0
   4244c:	b.lt	423b8 <verify_constraints@@Base+0x208>  // b.tstop
   42450:	mov	x1, x19
   42454:	mov	x0, #0x0                   	// #0
   42458:	bl	35830 <init_insn_sequence@plt>
   4245c:	mov	w0, w21
   42460:	ldp	x19, x20, [sp, #16]
   42464:	ldp	x21, x22, [sp, #32]
   42468:	ldp	x25, x26, [sp, #64]
   4246c:	ldp	x27, x28, [sp, #80]
   42470:	ldp	x29, x30, [sp], #304
   42474:	ret
   42478:	mov	w0, #0x2                   	// #2
   4247c:	adrp	x1, 58000 <xexit@@Base+0xe08>
   42480:	add	x1, x1, #0xed8
   42484:	str	w0, [x27]
   42488:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   4248c:	mov	w2, #0x5                   	// #5
   42490:	add	x0, x0, #0x250
   42494:	bl	359e0 <dcgettext@plt>
   42498:	mov	w21, #0x4                   	// #4
   4249c:	mov	w2, #0xffffffff            	// #-1
   424a0:	mov	w1, #0x1                   	// #1
   424a4:	str	w2, [x27, #4]
   424a8:	str	x0, [x27, #8]
   424ac:	str	w1, [x27, #28]
   424b0:	b	42420 <verify_constraints@@Base+0x270>
   424b4:	sub	w1, w1, #0x1b
   424b8:	cmp	w1, #0x1
   424bc:	b.hi	4230c <verify_constraints@@Base+0x15c>  // b.pmore
   424c0:	b	42368 <verify_constraints@@Base+0x1b8>
   424c4:	strb	w0, [sp, #252]
   424c8:	str	w2, [sp, #264]
   424cc:	str	w22, [sp, #104]
   424d0:	ldp	x2, x3, [x28]
   424d4:	stp	x2, x3, [sp, #192]
   424d8:	ldp	x2, x3, [x28, #16]
   424dc:	stp	x2, x3, [sp, #208]
   424e0:	stp	x6, x7, [sp, #224]
   424e4:	str	x13, [sp, #240]
   424e8:	b	4230c <verify_constraints@@Base+0x15c>
   424ec:	cbnz	x0, 42518 <verify_constraints@@Base+0x368>
   424f0:	mov	x1, x19
   424f4:	mov	x0, x20
   424f8:	bl	35830 <init_insn_sequence@plt>
   424fc:	mov	w0, w21
   42500:	ldp	x19, x20, [sp, #16]
   42504:	ldp	x21, x22, [sp, #32]
   42508:	ldp	x25, x26, [sp, #64]
   4250c:	ldp	x27, x28, [sp, #80]
   42510:	ldp	x29, x30, [sp], #304
   42514:	ret
   42518:	mov	w0, #0x2                   	// #2
   4251c:	str	w0, [x27]
   42520:	mov	w2, #0x5                   	// #5
   42524:	adrp	x1, 58000 <xexit@@Base+0xe08>
   42528:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   4252c:	add	x1, x1, #0xe68
   42530:	add	x0, x0, #0x250
   42534:	bl	359e0 <dcgettext@plt>
   42538:	mov	w2, #0xffffffff            	// #-1
   4253c:	mov	w1, #0x1                   	// #1
   42540:	mov	w21, #0x4                   	// #4
   42544:	str	w2, [x27, #4]
   42548:	str	x0, [x27, #8]
   4254c:	str	w1, [x27, #28]
   42550:	b	424f0 <verify_constraints@@Base+0x340>
   42554:	mov	w21, #0x0                   	// #0
   42558:	b	423b8 <verify_constraints@@Base+0x208>
   4255c:	cbz	w25, 426bc <verify_constraints@@Base+0x50c>
   42560:	ldr	w0, [x26, #128]
   42564:	ldrb	w21, [x20, #28]
   42568:	ldr	w28, [x20, #40]
   4256c:	tbz	w0, #1, 42694 <verify_constraints@@Base+0x4e4>
   42570:	ldr	w0, [sp, #116]
   42574:	cbz	w0, 423d4 <verify_constraints@@Base+0x224>
   42578:	ldr	w0, [sp, #104]
   4257c:	cmn	w0, #0x1
   42580:	b.eq	426e0 <verify_constraints@@Base+0x530>  // b.none
   42584:	ldrb	w0, [sp, #196]
   42588:	cmp	w0, #0x18
   4258c:	b.ne	42640 <verify_constraints@@Base+0x490>  // b.any
   42590:	ldr	w1, [sp, #152]
   42594:	ldr	w0, [sp, #208]
   42598:	cmp	w1, w0
   4259c:	b.eq	423d4 <verify_constraints@@Base+0x224>  // b.none
   425a0:	mov	w0, #0x2                   	// #2
   425a4:	adrp	x1, 58000 <xexit@@Base+0xe08>
   425a8:	add	x1, x1, #0xfe0
   425ac:	str	w0, [x27]
   425b0:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   425b4:	mov	w2, #0x5                   	// #5
   425b8:	add	x0, x0, #0x250
   425bc:	bl	359e0 <dcgettext@plt>
   425c0:	mov	w21, #0x4                   	// #4
   425c4:	ldr	w2, [sp, #104]
   425c8:	mov	w1, #0x1                   	// #1
   425cc:	ldp	x23, x24, [sp, #48]
   425d0:	str	w2, [x27, #4]
   425d4:	str	x0, [x27, #8]
   425d8:	str	w1, [x27, #28]
   425dc:	b	42420 <verify_constraints@@Base+0x270>
   425e0:	mov	w0, #0x2                   	// #2
   425e4:	str	w0, [x27]
   425e8:	mov	w2, #0x5                   	// #5
   425ec:	adrp	x1, 58000 <xexit@@Base+0xe08>
   425f0:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   425f4:	add	x1, x1, #0xeb0
   425f8:	add	x0, x0, #0x250
   425fc:	bl	359e0 <dcgettext@plt>
   42600:	mov	w1, #0xffffffff            	// #-1
   42604:	mov	w2, #0x1                   	// #1
   42608:	str	w1, [x27, #4]
   4260c:	mov	w21, #0x4                   	// #4
   42610:	str	x0, [x27, #8]
   42614:	mov	x1, x19
   42618:	str	w2, [x27, #28]
   4261c:	mov	x0, #0x0                   	// #0
   42620:	bl	35830 <init_insn_sequence@plt>
   42624:	b	423b8 <verify_constraints@@Base+0x208>
   42628:	mov	w0, #0x2                   	// #2
   4262c:	adrp	x1, 58000 <xexit@@Base+0xe08>
   42630:	add	x1, x1, #0xf08
   42634:	str	w0, [x27]
   42638:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   4263c:	b	4248c <verify_constraints@@Base+0x2dc>
   42640:	mov	w0, #0x2                   	// #2
   42644:	adrp	x1, 58000 <xexit@@Base+0xe08>
   42648:	add	x1, x1, #0xfa8
   4264c:	str	w0, [x27]
   42650:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   42654:	b	425b4 <verify_constraints@@Base+0x404>
   42658:	mov	w0, #0x2                   	// #2
   4265c:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   42660:	add	x1, x1, #0x20
   42664:	str	w0, [x27]
   42668:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   4266c:	add	x0, x0, #0x250
   42670:	mov	w2, #0x5                   	// #5
   42674:	bl	359e0 <dcgettext@plt>
   42678:	mov	w21, #0x4                   	// #4
   4267c:	mov	w1, #0x1                   	// #1
   42680:	ldp	x23, x24, [sp, #48]
   42684:	str	wzr, [x27, #4]
   42688:	str	x0, [x27, #8]
   4268c:	str	w1, [x27, #28]
   42690:	b	42420 <verify_constraints@@Base+0x270>
   42694:	mov	w0, w21
   42698:	bl	35680 <aarch64_get_qualifier_esize@plt>
   4269c:	and	w25, w0, #0xff
   426a0:	b	42570 <verify_constraints@@Base+0x3c0>
   426a4:	mov	w0, #0x2                   	// #2
   426a8:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   426ac:	add	x1, x1, #0x68
   426b0:	str	w0, [x27]
   426b4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   426b8:	b	4266c <verify_constraints@@Base+0x4bc>
   426bc:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   426c0:	add	x3, x3, #0x9c8
   426c4:	adrp	x1, 58000 <xexit@@Base+0xe08>
   426c8:	adrp	x0, 58000 <xexit@@Base+0xe08>
   426cc:	add	x3, x3, #0x198
   426d0:	add	x1, x1, #0x7d8
   426d4:	add	x0, x0, #0xf60
   426d8:	mov	w2, #0x138b                	// #5003
   426dc:	bl	35ac0 <__assert_fail@plt>
   426e0:	mov	w0, #0x2                   	// #2
   426e4:	adrp	x1, 58000 <xexit@@Base+0xe08>
   426e8:	add	x1, x1, #0xf78
   426ec:	str	w0, [x27]
   426f0:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   426f4:	b	425b4 <verify_constraints@@Base+0x404>
   426f8:	mov	w0, #0x2                   	// #2
   426fc:	str	w0, [x27]
   42700:	mov	w2, #0x5                   	// #5
   42704:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   42708:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   4270c:	add	x1, x1, #0xa8
   42710:	add	x0, x0, #0x250
   42714:	bl	359e0 <dcgettext@plt>
   42718:	ldr	w2, [sp, #120]
   4271c:	mov	w1, #0x1                   	// #1
   42720:	mov	w21, #0x4                   	// #4
   42724:	ldp	x23, x24, [sp, #48]
   42728:	str	w2, [x27, #4]
   4272c:	str	x0, [x27, #8]
   42730:	str	w1, [x27, #28]
   42734:	b	42420 <verify_constraints@@Base+0x270>
   42738:	ldrb	w0, [sp, #124]
   4273c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   42740:	cmp	w25, w0, uxtb
   42744:	b.eq	42418 <verify_constraints@@Base+0x268>  // b.none
   42748:	mov	w0, #0x2                   	// #2
   4274c:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   42750:	add	x1, x1, #0xe0
   42754:	str	w0, [x27]
   42758:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   4275c:	b	4266c <verify_constraints@@Base+0x4bc>
   42760:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   42764:	add	x3, x3, #0x9c8
   42768:	adrp	x1, 58000 <xexit@@Base+0xe08>
   4276c:	adrp	x0, 58000 <xexit@@Base+0xe08>
   42770:	add	x3, x3, #0x198
   42774:	add	x1, x1, #0x7d8
   42778:	add	x0, x0, #0xe50
   4277c:	mov	w2, #0x12ff                	// #4863
   42780:	stp	x21, x22, [sp, #32]
   42784:	stp	x23, x24, [sp, #48]
   42788:	stp	x25, x26, [sp, #64]
   4278c:	stp	x27, x28, [sp, #80]
   42790:	bl	35ac0 <__assert_fail@plt>
   42794:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   42798:	add	x3, x3, #0x9c8
   4279c:	adrp	x1, 58000 <xexit@@Base+0xe08>
   427a0:	adrp	x0, 58000 <xexit@@Base+0xe08>
   427a4:	add	x3, x3, #0x198
   427a8:	add	x1, x1, #0x7d8
   427ac:	add	x0, x0, #0xe58
   427b0:	mov	w2, #0x1306                	// #4870
   427b4:	stp	x23, x24, [sp, #48]
   427b8:	bl	35ac0 <__assert_fail@plt>
   427bc:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   427c0:	add	x3, x3, #0x9c8
   427c4:	adrp	x1, 58000 <xexit@@Base+0xe08>
   427c8:	adrp	x0, 58000 <xexit@@Base+0xe08>
   427cc:	add	x3, x3, #0x198
   427d0:	add	x1, x1, #0x7d8
   427d4:	add	x0, x0, #0x900
   427d8:	mov	w2, #0x1300                	// #4864
   427dc:	stp	x23, x24, [sp, #48]
   427e0:	stp	x27, x28, [sp, #80]
   427e4:	bl	35ac0 <__assert_fail@plt>
   427e8:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   427ec:	add	x3, x3, #0x9c8
   427f0:	adrp	x1, 58000 <xexit@@Base+0xe08>
   427f4:	adrp	x0, 58000 <xexit@@Base+0xe08>
   427f8:	add	x3, x3, #0x198
   427fc:	add	x1, x1, #0x7d8
   42800:	add	x0, x0, #0xf38
   42804:	mov	w2, #0x1352                	// #4946
   42808:	bl	35ac0 <__assert_fail@plt>
   4280c:	nop

0000000000042810 <aarch64_sve_dupm_mov_immediate_p@@Base>:
   42810:	lsl	w4, w1, #2
   42814:	mov	x3, #0xffffffffffffffff    	// #-1
   42818:	mov	x2, x0
   4281c:	lsl	x0, x3, x4
   42820:	lsl	x0, x0, x4
   42824:	tst	x0, x2
   42828:	b.eq	4283c <aarch64_sve_dupm_mov_immediate_p@@Base+0x2c>  // b.none
   4282c:	bics	xzr, x0, x2
   42830:	mov	w0, #0x0                   	// #0
   42834:	b.eq	4283c <aarch64_sve_dupm_mov_immediate_p@@Base+0x2c>  // b.none
   42838:	ret
   4283c:	cmp	w1, #0x4
   42840:	b.le	4287c <aarch64_sve_dupm_mov_immediate_p@@Base+0x6c>
   42844:	lsr	x0, x2, #32
   42848:	mov	x1, x2
   4284c:	cmp	w2, w0
   42850:	b.eq	428a8 <aarch64_sve_dupm_mov_immediate_p@@Base+0x98>  // b.none
   42854:	tst	w1, #0xff
   42858:	b.ne	4286c <aarch64_sve_dupm_mov_immediate_p@@Base+0x5c>  // b.any
   4285c:	cmp	x1, #0x0
   42860:	add	x0, x1, #0xff
   42864:	csel	x1, x0, x1, lt  // lt = tstop
   42868:	asr	x1, x1, #8
   4286c:	add	x1, x1, #0x80
   42870:	cmp	x1, #0xff
   42874:	cset	w0, hi  // hi = pmore
   42878:	ret
   4287c:	cmp	w1, #0x2
   42880:	b.gt	428a8 <aarch64_sve_dupm_mov_immediate_p@@Base+0x98>
   42884:	cmp	w1, #0x1
   42888:	mov	w0, #0x0                   	// #0
   4288c:	b.eq	42838 <aarch64_sve_dupm_mov_immediate_p@@Base+0x28>  // b.none
   42890:	ubfx	w3, w2, #8, #8
   42894:	sxth	x1, w2
   42898:	cmp	w3, w2, uxtb
   4289c:	mov	w0, #0x0                   	// #0
   428a0:	b.ne	42854 <aarch64_sve_dupm_mov_immediate_p@@Base+0x44>  // b.any
   428a4:	ret
   428a8:	lsr	w0, w2, #16
   428ac:	sxtw	x1, w2
   428b0:	cmp	w0, w2, uxth
   428b4:	b.ne	42854 <aarch64_sve_dupm_mov_immediate_p@@Base+0x44>  // b.any
   428b8:	b	42890 <aarch64_sve_dupm_mov_immediate_p@@Base+0x80>
   428bc:	nop

00000000000428c0 <aarch64_match_operands_constraint@@Base>:
   428c0:	stp	x29, x30, [sp, #-160]!
   428c4:	mov	x29, sp
   428c8:	stp	x23, x24, [sp, #48]
   428cc:	mov	x24, x1
   428d0:	ldr	x1, [x0, #8]
   428d4:	stp	x19, x20, [sp, #16]
   428d8:	mov	x20, x0
   428dc:	stp	x27, x28, [sp, #80]
   428e0:	ldrb	w2, [x1, #132]
   428e4:	cbz	w2, 42930 <aarch64_match_operands_constraint@@Base+0x70>
   428e8:	sbfiz	x0, x2, #3, #32
   428ec:	ldr	w3, [x20, #40]
   428f0:	sub	x0, x0, w2, sxtw
   428f4:	add	x0, x20, x0, lsl #3
   428f8:	ldr	w0, [x0, #40]
   428fc:	cmp	w3, w0
   42900:	b.eq	42930 <aarch64_match_operands_constraint@@Base+0x70>  // b.none
   42904:	cbz	x24, 42da8 <aarch64_match_operands_constraint@@Base+0x4e8>
   42908:	mov	w0, #0x5                   	// #5
   4290c:	mov	w28, #0x0                   	// #0
   42910:	stp	w0, w2, [x24]
   42914:	str	xzr, [x24, #8]
   42918:	mov	w0, w28
   4291c:	ldp	x19, x20, [sp, #16]
   42920:	ldp	x23, x24, [sp, #48]
   42924:	ldp	x27, x28, [sp, #80]
   42928:	ldp	x29, x30, [sp], #160
   4292c:	ret
   42930:	stp	x25, x26, [sp, #64]
   42934:	add	x26, sp, #0x90
   42938:	add	x1, x1, #0x38
   4293c:	mov	x3, x26
   42940:	mov	x0, x20
   42944:	mov	w2, #0xffffffff            	// #-1
   42948:	bl	35360 <aarch64_find_best_match@plt>
   4294c:	cbz	w0, 42b44 <aarch64_match_operands_constraint@@Base+0x284>
   42950:	ldr	x28, [x20, #8]
   42954:	add	x19, x20, #0x1c
   42958:	ldr	x0, [x28, #120]
   4295c:	tbnz	w0, #28, 42af8 <aarch64_match_operands_constraint@@Base+0x238>
   42960:	stp	x21, x22, [sp, #32]
   42964:	mov	x1, x19
   42968:	add	x3, x28, #0x1c
   4296c:	mov	x0, #0x1                   	// #1
   42970:	ldr	w2, [x3, x0, lsl #2]
   42974:	cbz	w2, 42990 <aarch64_match_operands_constraint@@Base+0xd0>
   42978:	add	x2, x26, x0
   4297c:	add	x0, x0, #0x1
   42980:	cmp	x0, #0x7
   42984:	ldurb	w2, [x2, #-1]
   42988:	strb	w2, [x1], #56
   4298c:	b.ne	42970 <aarch64_match_operands_constraint@@Base+0xb0>  // b.any
   42990:	adrp	x21, a2000 <aarch64_operands@@Base+0x16bc0>
   42994:	add	x4, x20, #0x18
   42998:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   4299c:	mov	x23, x4
   429a0:	ldr	x27, [x21, #4032]
   429a4:	add	x3, x3, #0x9c8
   429a8:	add	x0, x3, #0x200
   429ac:	mov	w22, #0x1                   	// #1
   429b0:	str	x0, [sp, #104]
   429b4:	nop
   429b8:	sub	w25, w22, #0x1
   429bc:	sxtw	x0, w25
   429c0:	add	x1, x0, #0x8
   429c4:	ldr	w19, [x28, x1, lsl #2]
   429c8:	cbz	w19, 43164 <aarch64_match_operands_constraint@@Base+0x8a4>
   429cc:	lsl	x2, x0, #3
   429d0:	sub	x2, x2, x0
   429d4:	add	x2, x20, x2, lsl #3
   429d8:	ldrb	w0, [x2, #72]
   429dc:	tbnz	w0, #0, 42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   429e0:	ldr	w0, [x23]
   429e4:	ldrb	w6, [x23, #4]
   429e8:	cmp	w19, w0
   429ec:	b.ne	450b0 <aarch64_match_operands_constraint@@Base+0x27f0>  // b.any
   429f0:	mov	w7, w19
   429f4:	add	x0, x7, w19, uxtw #1
   429f8:	lsl	x0, x0, #4
   429fc:	add	x1, x27, x0
   42a00:	ldr	w0, [x27, x0]
   42a04:	cmp	w0, #0x9
   42a08:	b.eq	42fd4 <aarch64_match_operands_constraint@@Base+0x714>  // b.none
   42a0c:	b.hi	42b74 <aarch64_match_operands_constraint@@Base+0x2b4>  // b.pmore
   42a10:	cmp	w0, #0x5
   42a14:	b.eq	43058 <aarch64_match_operands_constraint@@Base+0x798>  // b.none
   42a18:	b.ls	42bf0 <aarch64_match_operands_constraint@@Base+0x330>  // b.plast
   42a1c:	cmp	w0, #0x7
   42a20:	b.eq	42e2c <aarch64_match_operands_constraint@@Base+0x56c>  // b.none
   42a24:	cmp	w0, #0x8
   42a28:	b.ne	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.any
   42a2c:	cmp	w19, #0xca
   42a30:	b.eq	442b4 <aarch64_match_operands_constraint@@Base+0x19f4>  // b.none
   42a34:	b.hi	42dd0 <aarch64_match_operands_constraint@@Base+0x510>  // b.pmore
   42a38:	sub	w19, w19, #0xc4
   42a3c:	cmp	w19, #0x4
   42a40:	b.hi	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.pmore
   42a44:	ldr	x8, [x21, #4032]
   42a48:	add	x7, x7, x7, lsl #1
   42a4c:	add	x8, x8, x7, lsl #4
   42a50:	ldr	w0, [x8, #20]
   42a54:	cbz	w0, 44398 <aarch64_match_operands_constraint@@Base+0x1ad8>
   42a58:	adrp	x7, a2000 <aarch64_operands@@Base+0x16bc0>
   42a5c:	add	x2, x8, #0x18
   42a60:	mov	w1, #0x0                   	// #0
   42a64:	ldr	x7, [x7, #3944]
   42a68:	add	x6, x7, w0, uxtw #3
   42a6c:	ldr	w0, [x2], #4
   42a70:	ldr	w6, [x6, #4]
   42a74:	add	w1, w1, w6
   42a78:	cbnz	w0, 42a68 <aarch64_match_operands_constraint@@Base+0x1a8>
   42a7c:	sub	w0, w1, #0x1
   42a80:	cmp	w0, #0x1e
   42a84:	b.hi	44398 <aarch64_match_operands_constraint@@Base+0x1ad8>  // b.pmore
   42a88:	ldr	w2, [x8, #16]
   42a8c:	mov	w6, #0x1                   	// #1
   42a90:	ldr	w8, [x23, #16]
   42a94:	ubfx	x2, x2, #5, #3
   42a98:	lsl	w7, w6, w2
   42a9c:	sub	w0, w7, #0x1
   42aa0:	cmp	x8, w0, sxtw
   42aa4:	sxtw	x0, w0
   42aa8:	b.ls	44634 <aarch64_match_operands_constraint@@Base+0x1d74>  // b.plast
   42aac:	sub	w7, w7, #0x8
   42ab0:	tst	w7, #0xfffffff7
   42ab4:	b.ne	45a00 <aarch64_match_operands_constraint@@Base+0x3140>  // b.any
   42ab8:	cmp	x0, #0xf
   42abc:	b.eq	448a8 <aarch64_match_operands_constraint@@Base+0x1fe8>  // b.none
   42ac0:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   42ac4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   42ac8:	add	x1, x1, #0x288
   42acc:	add	x0, x0, #0x250
   42ad0:	mov	w2, #0x5                   	// #5
   42ad4:	bl	359e0 <dcgettext@plt>
   42ad8:	cbz	x24, 44a70 <aarch64_match_operands_constraint@@Base+0x21b0>
   42adc:	mov	w1, #0x9                   	// #9
   42ae0:	mov	w28, #0x0                   	// #0
   42ae4:	ldp	x21, x22, [sp, #32]
   42ae8:	stp	w1, w25, [x24]
   42aec:	str	x0, [x24, #8]
   42af0:	ldp	x25, x26, [sp, #64]
   42af4:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   42af8:	mov	x0, x28
   42afc:	bl	35170 <aarch64_num_of_operands@plt>
   42b00:	cmp	w0, #0x0
   42b04:	b.le	43158 <aarch64_match_operands_constraint@@Base+0x898>
   42b08:	sub	w4, w0, #0x1
   42b0c:	add	x2, x20, #0x54
   42b10:	mov	w3, #0x38                  	// #56
   42b14:	mov	x0, x19
   42b18:	mov	x1, x26
   42b1c:	umaddl	x4, w4, w3, x2
   42b20:	b	42b34 <aarch64_match_operands_constraint@@Base+0x274>
   42b24:	add	x0, x0, #0x38
   42b28:	add	x1, x1, #0x1
   42b2c:	cmp	x4, x0
   42b30:	b.eq	43158 <aarch64_match_operands_constraint@@Base+0x898>  // b.none
   42b34:	ldrb	w3, [x0]
   42b38:	ldrb	w2, [x1]
   42b3c:	cmp	w3, w2
   42b40:	b.eq	42b24 <aarch64_match_operands_constraint@@Base+0x264>  // b.none
   42b44:	cbz	x24, 42dc4 <aarch64_match_operands_constraint@@Base+0x504>
   42b48:	mov	x0, #0xffffffffffff0004    	// #-65532
   42b4c:	mov	w28, #0x0                   	// #0
   42b50:	movk	x0, #0x0, lsl #16
   42b54:	stp	x0, xzr, [x24]
   42b58:	mov	w0, w28
   42b5c:	ldp	x19, x20, [sp, #16]
   42b60:	ldp	x23, x24, [sp, #48]
   42b64:	ldp	x25, x26, [sp, #64]
   42b68:	ldp	x27, x28, [sp, #80]
   42b6c:	ldp	x29, x30, [sp], #160
   42b70:	ret
   42b74:	cmp	w0, #0xc
   42b78:	b.eq	42f58 <aarch64_match_operands_constraint@@Base+0x698>  // b.none
   42b7c:	b.ls	42c8c <aarch64_match_operands_constraint@@Base+0x3cc>  // b.plast
   42b80:	cmp	w0, #0xd
   42b84:	b.ne	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.any
   42b88:	cmp	w19, #0x4d
   42b8c:	b.ne	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.any
   42b90:	ldr	x0, [x23, #16]
   42b94:	cmp	x24, #0x0
   42b98:	ldr	w0, [x0, #32]
   42b9c:	and	w0, w0, #0xe
   42ba0:	ccmp	w0, #0xe, #0x0, ne  // ne = any
   42ba4:	b.ne	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.any
   42ba8:	mov	w0, #0x2                   	// #2
   42bac:	stp	w0, w25, [x24]
   42bb0:	str	xzr, [x24, #8]
   42bb4:	cmp	w22, #0x6
   42bb8:	b.eq	42bcc <aarch64_match_operands_constraint@@Base+0x30c>  // b.none
   42bbc:	ldr	x28, [x20, #8]
   42bc0:	add	w22, w22, #0x1
   42bc4:	add	x23, x23, #0x38
   42bc8:	b	429b8 <aarch64_match_operands_constraint@@Base+0xf8>
   42bcc:	mov	w28, #0x1                   	// #1
   42bd0:	mov	w0, w28
   42bd4:	ldp	x19, x20, [sp, #16]
   42bd8:	ldp	x21, x22, [sp, #32]
   42bdc:	ldp	x23, x24, [sp, #48]
   42be0:	ldp	x25, x26, [sp, #64]
   42be4:	ldp	x27, x28, [sp, #80]
   42be8:	ldp	x29, x30, [sp], #160
   42bec:	ret
   42bf0:	cmp	w0, #0x1
   42bf4:	b.eq	42ef0 <aarch64_match_operands_constraint@@Base+0x630>  // b.none
   42bf8:	cmp	w0, #0x2
   42bfc:	b.ne	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.any
   42c00:	sub	w0, w22, #0x2
   42c04:	cmp	w0, #0x1
   42c08:	b.hi	45c40 <aarch64_match_operands_constraint@@Base+0x3380>  // b.pmore
   42c0c:	cmp	w19, #0xe
   42c10:	b.eq	443f8 <aarch64_match_operands_constraint@@Base+0x1b38>  // b.none
   42c14:	cmp	w19, #0xf
   42c18:	b.ne	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.any
   42c1c:	ldr	w0, [x23, #32]
   42c20:	sub	w1, w0, #0x2
   42c24:	cmp	w1, #0x3
   42c28:	b.hi	44794 <aarch64_match_operands_constraint@@Base+0x1ed4>  // b.pmore
   42c2c:	cmp	w0, #0x2
   42c30:	b.eq	44698 <aarch64_match_operands_constraint@@Base+0x1dd8>  // b.none
   42c34:	cmp	w6, #0x1
   42c38:	b.eq	446dc <aarch64_match_operands_constraint@@Base+0x1e1c>  // b.none
   42c3c:	mov	x0, #0x3f                  	// #63
   42c40:	mov	w19, w0
   42c44:	ldr	x1, [x23, #40]
   42c48:	cmp	x1, x0
   42c4c:	b.ls	42bc0 <aarch64_match_operands_constraint@@Base+0x300>  // b.plast
   42c50:	cbz	x24, 44878 <aarch64_match_operands_constraint@@Base+0x1fb8>
   42c54:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   42c58:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   42c5c:	add	x1, x1, #0x3c8
   42c60:	add	x0, x0, #0x250
   42c64:	mov	w2, #0x5                   	// #5
   42c68:	bl	359e0 <dcgettext@plt>
   42c6c:	mov	w1, #0x6                   	// #6
   42c70:	mov	w28, #0x0                   	// #0
   42c74:	ldp	x21, x22, [sp, #32]
   42c78:	stp	w1, w25, [x24]
   42c7c:	str	x0, [x24, #8]
   42c80:	stp	wzr, w19, [x24, #16]
   42c84:	ldp	x25, x26, [sp, #64]
   42c88:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   42c8c:	cmp	w0, #0xa
   42c90:	b.eq	42e90 <aarch64_match_operands_constraint@@Base+0x5d0>  // b.none
   42c94:	cmp	w0, #0xb
   42c98:	b.ne	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.any
   42c9c:	adrp	x8, a2000 <aarch64_operands@@Base+0x16bc0>
   42ca0:	sbfiz	x0, x6, #5, #32
   42ca4:	sxtw	x10, w6
   42ca8:	ldr	x1, [x8, #3776]
   42cac:	ldr	x9, [x23, #16]
   42cb0:	add	x0, x1, x0
   42cb4:	ldr	w2, [x0, #24]
   42cb8:	cmp	w2, #0x2
   42cbc:	b.eq	441fc <aarch64_match_operands_constraint@@Base+0x193c>  // b.none
   42cc0:	sub	w1, w19, #0x2b
   42cc4:	cmp	w1, #0xa3
   42cc8:	b.hi	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.pmore
   42ccc:	adrp	x0, 5e000 <xexit@@Base+0x6e08>
   42cd0:	add	x0, x0, #0x7f0
   42cd4:	ldrh	w0, [x0, w1, uxtw #1]
   42cd8:	adr	x1, 42ce4 <aarch64_match_operands_constraint@@Base+0x424>
   42cdc:	add	x0, x1, w0, sxth #2
   42ce0:	br	x0
   42ce4:	mov	x19, #0xffffffffffffff80    	// #-128
   42ce8:	ldr	w28, [x23, #32]
   42cec:	cmp	w28, #0x5
   42cf0:	b.ne	45ba0 <aarch64_match_operands_constraint@@Base+0x32e0>  // b.any
   42cf4:	ldrb	w0, [x4, #4]
   42cf8:	stp	x4, x3, [sp, #112]
   42cfc:	bl	35680 <aarch64_get_qualifier_esize@plt>
   42d00:	ubfiz	w7, w0, #2, #8
   42d04:	mov	x1, #0xffffffffffffffff    	// #-1
   42d08:	and	w2, w0, #0xff
   42d0c:	lsl	x0, x1, x7
   42d10:	cmp	w2, #0x1
   42d14:	lsl	x0, x0, x7
   42d18:	mvn	x0, x0
   42d1c:	ldr	x6, [x23, #16]
   42d20:	ldr	x1, [x23, #40]
   42d24:	ldp	x4, x3, [sp, #112]
   42d28:	b.eq	44b5c <aarch64_match_operands_constraint@@Base+0x229c>  // b.none
   42d2c:	tst	w1, #0xfffffff7
   42d30:	b.ne	450d4 <aarch64_match_operands_constraint@@Base+0x2814>  // b.any
   42d34:	cbz	w1, 44d20 <aarch64_match_operands_constraint@@Base+0x2460>
   42d38:	lsr	x0, x0, x1
   42d3c:	bics	xzr, x6, x0
   42d40:	b.eq	42d50 <aarch64_match_operands_constraint@@Base+0x490>  // b.none
   42d44:	orn	x1, x6, x0
   42d48:	cmp	x6, x1
   42d4c:	b.ne	44de4 <aarch64_match_operands_constraint@@Base+0x2524>  // b.any
   42d50:	sub	x6, x6, x19
   42d54:	and	x0, x6, x0
   42d58:	cmp	x0, #0xff
   42d5c:	b.ls	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.plast
   42d60:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   42d64:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   42d68:	add	x1, x1, #0x810
   42d6c:	add	x0, x0, #0x250
   42d70:	mov	w2, #0x5                   	// #5
   42d74:	bl	359e0 <dcgettext@plt>
   42d78:	cbz	x24, 45de0 <aarch64_match_operands_constraint@@Base+0x3520>
   42d7c:	mov	w1, #0x9                   	// #9
   42d80:	mov	w28, #0x0                   	// #0
   42d84:	ldp	x21, x22, [sp, #32]
   42d88:	stp	w1, w25, [x24]
   42d8c:	str	x0, [x24, #8]
   42d90:	ldp	x25, x26, [sp, #64]
   42d94:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   42d98:	mov	x19, #0x0                   	// #0
   42d9c:	b	42ce8 <aarch64_match_operands_constraint@@Base+0x428>
   42da0:	ldp	x21, x22, [sp, #32]
   42da4:	ldp	x25, x26, [sp, #64]
   42da8:	mov	w28, #0x0                   	// #0
   42dac:	mov	w0, w28
   42db0:	ldp	x19, x20, [sp, #16]
   42db4:	ldp	x23, x24, [sp, #48]
   42db8:	ldp	x27, x28, [sp, #80]
   42dbc:	ldp	x29, x30, [sp], #160
   42dc0:	ret
   42dc4:	mov	w28, #0x0                   	// #0
   42dc8:	ldp	x25, x26, [sp, #64]
   42dcc:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   42dd0:	sub	w19, w19, #0xcb
   42dd4:	tst	w19, #0xfffffffd
   42dd8:	b.ne	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.any
   42ddc:	ldr	x0, [x28, #120]
   42de0:	ldrb	w1, [x23, #16]
   42de4:	ubfx	w0, w0, #24, #3
   42de8:	ubfx	x1, x1, #5, #3
   42dec:	cmp	w1, w0
   42df0:	b.eq	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.none
   42df4:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   42df8:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   42dfc:	add	x1, x1, #0x2b0
   42e00:	add	x0, x0, #0x250
   42e04:	mov	w2, #0x5                   	// #5
   42e08:	bl	359e0 <dcgettext@plt>
   42e0c:	cbz	x24, 44b98 <aarch64_match_operands_constraint@@Base+0x22d8>
   42e10:	mov	w1, #0x9                   	// #9
   42e14:	mov	w28, #0x0                   	// #0
   42e18:	ldp	x21, x22, [sp, #32]
   42e1c:	stp	w1, w25, [x24]
   42e20:	str	x0, [x24, #8]
   42e24:	ldp	x25, x26, [sp, #64]
   42e28:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   42e2c:	cmp	w19, #0x26
   42e30:	b.eq	44528 <aarch64_match_operands_constraint@@Base+0x1c68>  // b.none
   42e34:	ldr	x0, [x28, #120]
   42e38:	cmp	w19, #0x24
   42e3c:	ubfx	w0, w0, #24, #3
   42e40:	b.eq	4426c <aarch64_match_operands_constraint@@Base+0x19ac>  // b.none
   42e44:	sub	w19, w19, #0x25
   42e48:	cmp	w19, #0x1
   42e4c:	b.hi	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.pmore
   42e50:	sub	w1, w0, #0x1
   42e54:	cmp	w1, #0x3
   42e58:	b.hi	45894 <aarch64_match_operands_constraint@@Base+0x2fd4>  // b.pmore
   42e5c:	ldrb	w1, [x23, #16]
   42e60:	ubfx	x1, x1, #5, #3
   42e64:	cmp	w1, w0
   42e68:	b.eq	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.none
   42e6c:	cbz	x24, 449f4 <aarch64_match_operands_constraint@@Base+0x2134>
   42e70:	mov	w1, #0x8                   	// #8
   42e74:	mov	w28, #0x0                   	// #0
   42e78:	ldp	x21, x22, [sp, #32]
   42e7c:	stp	w1, w25, [x24]
   42e80:	str	xzr, [x24, #8]
   42e84:	str	w0, [x24, #16]
   42e88:	ldp	x25, x26, [sp, #64]
   42e8c:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   42e90:	ldr	w1, [x28, #16]
   42e94:	ldrb	w8, [x23, #28]
   42e98:	cmp	w1, #0x3f
   42e9c:	b.hi	42ec8 <aarch64_match_operands_constraint@@Base+0x608>  // b.pmore
   42ea0:	mov	x2, #0x1                   	// #1
   42ea4:	mov	x0, #0x6d00000000000000    	// #7854277750134145024
   42ea8:	lsl	x2, x2, x1
   42eac:	tst	x2, x0
   42eb0:	b.ne	444b0 <aarch64_match_operands_constraint@@Base+0x1bf0>  // b.any
   42eb4:	mov	x0, #0x280000              	// #2621440
   42eb8:	movk	x0, #0x8040, lsl #48
   42ebc:	tst	x2, x0
   42ec0:	b.ne	444ec <aarch64_match_operands_constraint@@Base+0x1c2c>  // b.any
   42ec4:	tbnz	x2, #55, 43174 <aarch64_match_operands_constraint@@Base+0x8b4>
   42ec8:	tbz	w8, #1, 43180 <aarch64_match_operands_constraint@@Base+0x8c0>
   42ecc:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   42ed0:	add	x3, x3, #0x9c8
   42ed4:	adrp	x1, 58000 <xexit@@Base+0xe08>
   42ed8:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   42edc:	add	x3, x3, #0x1b0
   42ee0:	add	x1, x1, #0x7d8
   42ee4:	add	x0, x0, #0x318
   42ee8:	mov	w2, #0x658                 	// #1624
   42eec:	bl	35ac0 <__assert_fail@plt>
   42ef0:	cmp	w19, #0xd
   42ef4:	b.eq	4439c <aarch64_match_operands_constraint@@Base+0x1adc>  // b.none
   42ef8:	cmp	w19, #0x9
   42efc:	b.eq	44330 <aarch64_match_operands_constraint@@Base+0x1a70>  // b.none
   42f00:	sub	w6, w6, #0x3
   42f04:	cmp	w6, #0x1
   42f08:	b.hi	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.pmore
   42f0c:	mov	x0, x23
   42f10:	stp	x4, x3, [sp, #112]
   42f14:	bl	35740 <aarch64_stack_pointer_p@plt>
   42f18:	mov	w28, w0
   42f1c:	ldp	x4, x3, [sp, #112]
   42f20:	cbnz	w0, 42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   42f24:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   42f28:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   42f2c:	add	x1, x1, #0x240
   42f30:	add	x0, x0, #0x250
   42f34:	mov	w2, #0x5                   	// #5
   42f38:	bl	359e0 <dcgettext@plt>
   42f3c:	cbz	x24, 453ac <aarch64_match_operands_constraint@@Base+0x2aec>
   42f40:	mov	w1, #0x9                   	// #9
   42f44:	ldp	x21, x22, [sp, #32]
   42f48:	stp	w1, w25, [x24]
   42f4c:	str	x0, [x24, #8]
   42f50:	ldp	x25, x26, [sp, #64]
   42f54:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   42f58:	cmp	w19, #0x60
   42f5c:	b.ne	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.any
   42f60:	cbnz	w25, 45cc8 <aarch64_match_operands_constraint@@Base+0x3408>
   42f64:	ldr	w0, [x20, #80]
   42f68:	add	x6, x20, #0x50
   42f6c:	cmp	w0, #0x3b
   42f70:	b.ne	45cc8 <aarch64_match_operands_constraint@@Base+0x3408>  // b.any
   42f74:	ldr	w0, [x23, #16]
   42f78:	sub	w2, w0, #0x19
   42f7c:	sub	w1, w0, #0x3
   42f80:	cmp	w2, #0x1
   42f84:	ccmp	w1, #0x1, #0x0, hi  // hi = pmore
   42f88:	b.hi	4468c <aarch64_match_operands_constraint@@Base+0x1dcc>  // b.pmore
   42f8c:	ldr	x0, [x6, #16]
   42f90:	cmp	x0, #0x1
   42f94:	b.le	42bc0 <aarch64_match_operands_constraint@@Base+0x300>
   42f98:	cbz	x24, 448c4 <aarch64_match_operands_constraint@@Base+0x2004>
   42f9c:	mov	w2, #0x5                   	// #5
   42fa0:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   42fa4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   42fa8:	add	x1, x1, #0x548
   42fac:	add	x0, x0, #0x250
   42fb0:	bl	359e0 <dcgettext@plt>
   42fb4:	mov	x2, #0x6                   	// #6
   42fb8:	stp	x2, x0, [x24]
   42fbc:	mov	x1, #0x100000000           	// #4294967296
   42fc0:	mov	w28, #0x0                   	// #0
   42fc4:	str	x1, [x24, #16]
   42fc8:	ldp	x21, x22, [sp, #32]
   42fcc:	ldp	x25, x26, [sp, #64]
   42fd0:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   42fd4:	ldr	w0, [x23, #16]
   42fd8:	cmp	w0, #0x7
   42fdc:	b.ls	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.plast
   42fe0:	ldr	w0, [x1, #20]
   42fe4:	cbz	w0, 44398 <aarch64_match_operands_constraint@@Base+0x1ad8>
   42fe8:	adrp	x7, a2000 <aarch64_operands@@Base+0x16bc0>
   42fec:	add	x1, x1, #0x18
   42ff0:	mov	w2, #0x0                   	// #0
   42ff4:	ldr	x7, [x7, #3944]
   42ff8:	add	x6, x7, w0, uxtw #3
   42ffc:	ldr	w0, [x1], #4
   43000:	ldr	w6, [x6, #4]
   43004:	add	w2, w2, w6
   43008:	cbnz	w0, 42ff8 <aarch64_match_operands_constraint@@Base+0x738>
   4300c:	sub	w0, w2, #0x1
   43010:	cmp	w0, #0x1e
   43014:	b.hi	44398 <aarch64_match_operands_constraint@@Base+0x1ad8>  // b.pmore
   43018:	cmp	w2, #0x3
   4301c:	b.ne	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.any
   43020:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43024:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43028:	add	x1, x1, #0x2c8
   4302c:	add	x0, x0, #0x250
   43030:	mov	w2, #0x5                   	// #5
   43034:	bl	359e0 <dcgettext@plt>
   43038:	cbz	x24, 44e1c <aarch64_match_operands_constraint@@Base+0x255c>
   4303c:	mov	w1, #0x9                   	// #9
   43040:	mov	w28, #0x0                   	// #0
   43044:	ldp	x21, x22, [sp, #32]
   43048:	stp	w1, w25, [x24]
   4304c:	str	x0, [x24, #8]
   43050:	ldp	x25, x26, [sp, #64]
   43054:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43058:	ldr	w0, [x28, #20]
   4305c:	mov	w28, #0x10                  	// #16
   43060:	cmp	w0, #0x50
   43064:	b.eq	44564 <aarch64_match_operands_constraint@@Base+0x1ca4>  // b.none
   43068:	mov	w0, w6
   4306c:	str	w6, [sp, #112]
   43070:	stp	x4, x3, [sp, #128]
   43074:	bl	35680 <aarch64_get_qualifier_esize@plt>
   43078:	and	w1, w0, #0xff
   4307c:	ldr	w6, [sp, #112]
   43080:	str	w6, [sp, #120]
   43084:	udiv	w28, w28, w1
   43088:	mov	w0, w6
   4308c:	sub	w1, w28, #0x1
   43090:	str	w1, [sp, #112]
   43094:	bl	358f0 <aarch64_get_qualifier_nelem@plt>
   43098:	and	w0, w0, #0xff
   4309c:	ldr	w6, [sp, #120]
   430a0:	cmp	w0, #0x1
   430a4:	ldp	x4, x3, [sp, #128]
   430a8:	b.ne	459bc <aarch64_match_operands_constraint@@Base+0x30fc>  // b.any
   430ac:	ldr	x0, [x23, #24]
   430b0:	tbnz	x0, #63, 43114 <aarch64_match_operands_constraint@@Base+0x854>
   430b4:	ldr	w1, [sp, #112]
   430b8:	cmp	x0, w1, sxtw
   430bc:	b.gt	43114 <aarch64_match_operands_constraint@@Base+0x854>
   430c0:	cmp	w19, #0x22
   430c4:	ccmp	w6, #0x6, #0x0, eq  // eq = none
   430c8:	b.ne	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.any
   430cc:	ldr	w0, [x23, #16]
   430d0:	cmp	w0, #0xf
   430d4:	b.ls	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.plast
   430d8:	cbz	x24, 44b4c <aarch64_match_operands_constraint@@Base+0x228c>
   430dc:	mov	w2, #0x5                   	// #5
   430e0:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   430e4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   430e8:	add	x1, x1, #0x978
   430ec:	add	x0, x0, #0x250
   430f0:	bl	359e0 <dcgettext@plt>
   430f4:	mov	w2, #0x6                   	// #6
   430f8:	mov	x1, #0xf00000000           	// #64424509440
   430fc:	mov	w28, #0x0                   	// #0
   43100:	ldp	x21, x22, [sp, #32]
   43104:	stp	w2, w25, [x24]
   43108:	stp	x0, x1, [x24, #8]
   4310c:	ldp	x25, x26, [sp, #64]
   43110:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43114:	cbz	x24, 44320 <aarch64_match_operands_constraint@@Base+0x1a60>
   43118:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   4311c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43120:	add	x1, x1, #0x298
   43124:	add	x0, x0, #0x250
   43128:	mov	w2, #0x5                   	// #5
   4312c:	bl	359e0 <dcgettext@plt>
   43130:	ldp	x21, x22, [sp, #32]
   43134:	str	x0, [x24, #8]
   43138:	ldr	w0, [sp, #112]
   4313c:	mov	w1, #0x6                   	// #6
   43140:	mov	w28, #0x0                   	// #0
   43144:	stp	w1, w25, [x24]
   43148:	str	wzr, [x24, #16]
   4314c:	ldp	x25, x26, [sp, #64]
   43150:	str	w0, [x24, #20]
   43154:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43158:	stp	x21, x22, [sp, #32]
   4315c:	ldr	x28, [x20, #8]
   43160:	b	42964 <aarch64_match_operands_constraint@@Base+0xa4>
   43164:	mov	w28, #0x1                   	// #1
   43168:	ldp	x21, x22, [sp, #32]
   4316c:	ldp	x25, x26, [sp, #64]
   43170:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43174:	and	w9, w8, #0x6
   43178:	cmp	w9, #0x2
   4317c:	b.eq	44928 <aarch64_match_operands_constraint@@Base+0x2068>  // b.none
   43180:	sub	w19, w19, #0x4f
   43184:	cmp	w19, #0x44
   43188:	b.hi	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.pmore
   4318c:	adrp	x0, 5e000 <xexit@@Base+0x6e08>
   43190:	add	x0, x0, #0x938
   43194:	ldrh	w0, [x0, w19, uxtw #1]
   43198:	adr	x1, 431a4 <aarch64_match_operands_constraint@@Base+0x8e4>
   4319c:	add	x0, x1, w0, sxth #2
   431a0:	br	x0
   431a4:	mov	w0, #0x100                 	// #256
   431a8:	ldr	w1, [x23, #24]
   431ac:	cbz	w1, 45774 <aarch64_match_operands_constraint@@Base+0x2eb4>
   431b0:	tbz	w8, #2, 45b34 <aarch64_match_operands_constraint@@Base+0x3274>
   431b4:	ldr	w2, [x23, #32]
   431b8:	mov	w1, #0x1                   	// #1
   431bc:	lsl	w1, w1, w2
   431c0:	tst	w1, w0
   431c4:	b.eq	431d4 <aarch64_match_operands_constraint@@Base+0x914>  // b.none
   431c8:	ldr	x0, [x23, #40]
   431cc:	cmp	x0, #0x3
   431d0:	b.ls	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.plast
   431d4:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   431d8:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   431dc:	add	x1, x1, #0x448
   431e0:	add	x0, x0, #0x250
   431e4:	mov	w2, #0x5                   	// #5
   431e8:	bl	359e0 <dcgettext@plt>
   431ec:	cbz	x24, 44cac <aarch64_match_operands_constraint@@Base+0x23ec>
   431f0:	mov	w1, #0x9                   	// #9
   431f4:	mov	w28, #0x0                   	// #0
   431f8:	ldp	x21, x22, [sp, #32]
   431fc:	stp	w1, w25, [x24]
   43200:	str	x0, [x24, #8]
   43204:	ldp	x25, x26, [sp, #64]
   43208:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   4320c:	mov	w0, #0x20                  	// #32
   43210:	b	431a8 <aarch64_match_operands_constraint@@Base+0x8e8>
   43214:	mov	x0, #0x1f                  	// #31
   43218:	mov	x1, #0x0                   	// #0
   4321c:	ldr	w2, [x23, #24]
   43220:	cbnz	w2, 45d9c <aarch64_match_operands_constraint@@Base+0x34dc>
   43224:	tbz	w8, #2, 45d78 <aarch64_match_operands_constraint@@Base+0x34b8>
   43228:	ldr	x6, [x21, #4032]
   4322c:	add	x7, x7, x7, lsl #1
   43230:	mov	w2, #0x1                   	// #1
   43234:	ldrb	w8, [x23, #36]
   43238:	add	x6, x6, x7, lsl #4
   4323c:	tst	x8, #0x3
   43240:	ldr	w6, [x6, #16]
   43244:	ubfx	x6, x6, #5, #3
   43248:	lsl	w2, w2, w6
   4324c:	sxtw	x6, w2
   43250:	mul	x5, x6, x1
   43254:	mul	x19, x6, x0
   43258:	b.ne	44a38 <aarch64_match_operands_constraint@@Base+0x2178>  // b.any
   4325c:	ldrsw	x0, [x23, #20]
   43260:	cmp	x5, x0
   43264:	ccmp	x19, x0, #0x1, le
   43268:	b.ge	44a90 <aarch64_match_operands_constraint@@Base+0x21d0>  // b.tcont
   4326c:	cbz	x24, 44a80 <aarch64_match_operands_constraint@@Base+0x21c0>
   43270:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43274:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43278:	add	x1, x1, #0x338
   4327c:	add	x0, x0, #0x250
   43280:	mov	w2, #0x5                   	// #5
   43284:	str	x5, [sp, #104]
   43288:	bl	359e0 <dcgettext@plt>
   4328c:	mov	w28, #0x0                   	// #0
   43290:	ldr	x5, [sp, #104]
   43294:	mov	w1, #0x6                   	// #6
   43298:	ldp	x21, x22, [sp, #32]
   4329c:	stp	w1, w25, [x24]
   432a0:	str	x0, [x24, #8]
   432a4:	stp	w5, w19, [x24, #16]
   432a8:	ldp	x25, x26, [sp, #64]
   432ac:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   432b0:	mov	w0, #0x1100                	// #4352
   432b4:	ldr	w1, [x23, #24]
   432b8:	cbz	w1, 45af0 <aarch64_match_operands_constraint@@Base+0x3230>
   432bc:	tbz	w8, #2, 45c0c <aarch64_match_operands_constraint@@Base+0x334c>
   432c0:	ldr	x2, [x21, #4032]
   432c4:	add	x1, x7, x7, lsl #1
   432c8:	add	x1, x2, x1, lsl #4
   432cc:	ldr	w1, [x1, #16]
   432d0:	tbz	w1, #8, 432e0 <aarch64_match_operands_constraint@@Base+0xa20>
   432d4:	ldr	w1, [x23, #20]
   432d8:	cmp	w1, #0x1f
   432dc:	b.eq	4527c <aarch64_match_operands_constraint@@Base+0x29bc>  // b.none
   432e0:	ldr	w2, [x23, #32]
   432e4:	mov	w1, #0x1                   	// #1
   432e8:	lsl	w1, w1, w2
   432ec:	tst	w1, w0
   432f0:	b.eq	43314 <aarch64_match_operands_constraint@@Base+0xa54>  // b.none
   432f4:	ldr	x0, [x21, #4032]
   432f8:	add	x7, x7, x7, lsl #1
   432fc:	ldr	x1, [x23, #40]
   43300:	add	x0, x0, x7, lsl #4
   43304:	ldr	w0, [x0, #16]
   43308:	ubfx	x0, x0, #5, #3
   4330c:	cmp	x1, x0
   43310:	b.eq	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.none
   43314:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43318:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   4331c:	add	x1, x1, #0x448
   43320:	add	x0, x0, #0x250
   43324:	mov	w2, #0x5                   	// #5
   43328:	bl	359e0 <dcgettext@plt>
   4332c:	cbz	x24, 4511c <aarch64_match_operands_constraint@@Base+0x285c>
   43330:	mov	w1, #0x9                   	// #9
   43334:	mov	w28, #0x0                   	// #0
   43338:	ldp	x21, x22, [sp, #32]
   4333c:	stp	w1, w25, [x24]
   43340:	str	x0, [x24, #8]
   43344:	ldp	x25, x26, [sp, #64]
   43348:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   4334c:	mov	x0, #0xff                  	// #255
   43350:	mov	x1, #0xffffffffffffff00    	// #-256
   43354:	ldr	w2, [x23, #24]
   43358:	cbnz	w2, 45b7c <aarch64_match_operands_constraint@@Base+0x32bc>
   4335c:	tbz	w8, #2, 45b58 <aarch64_match_operands_constraint@@Base+0x3298>
   43360:	ldr	x8, [x21, #4032]
   43364:	add	x7, x7, x7, lsl #1
   43368:	ldrb	w2, [x23, #36]
   4336c:	ldr	w6, [x23, #20]
   43370:	add	x8, x8, x7, lsl #4
   43374:	and	w7, w2, #0x1
   43378:	ldr	w2, [x8, #16]
   4337c:	ubfx	x2, x2, #5, #3
   43380:	add	w8, w2, #0x1
   43384:	cbz	w6, 447dc <aarch64_match_operands_constraint@@Base+0x1f1c>
   43388:	cbz	w7, 447ec <aarch64_match_operands_constraint@@Base+0x1f2c>
   4338c:	ldr	w7, [x23, #32]
   43390:	cmp	w7, #0xf
   43394:	b.ne	447ec <aarch64_match_operands_constraint@@Base+0x1f2c>  // b.any
   43398:	mul	x5, x8, x1
   4339c:	sxtw	x6, w6
   433a0:	mul	x19, x8, x0
   433a4:	cmp	x5, x6
   433a8:	ccmp	x19, x6, #0x1, le
   433ac:	b.ge	451e4 <aarch64_match_operands_constraint@@Base+0x2924>  // b.tcont
   433b0:	cbz	x24, 44bfc <aarch64_match_operands_constraint@@Base+0x233c>
   433b4:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   433b8:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   433bc:	add	x1, x1, #0x338
   433c0:	add	x0, x0, #0x250
   433c4:	mov	w2, #0x5                   	// #5
   433c8:	str	x5, [sp, #104]
   433cc:	bl	359e0 <dcgettext@plt>
   433d0:	mov	w28, #0x0                   	// #0
   433d4:	ldr	x5, [sp, #104]
   433d8:	mov	w1, #0x6                   	// #6
   433dc:	ldp	x21, x22, [sp, #32]
   433e0:	stp	w1, w25, [x24]
   433e4:	str	x0, [x24, #8]
   433e8:	stp	w5, w19, [x24, #16]
   433ec:	ldp	x25, x26, [sp, #64]
   433f0:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   433f4:	mov	w0, #0x20                  	// #32
   433f8:	b	432b4 <aarch64_match_operands_constraint@@Base+0x9f4>
   433fc:	mov	x0, #0x3f                  	// #63
   43400:	mov	x1, #0x0                   	// #0
   43404:	b	4321c <aarch64_match_operands_constraint@@Base+0x95c>
   43408:	mov	x0, #0x7                   	// #7
   4340c:	mov	x1, #0xfffffffffffffff8    	// #-8
   43410:	b	43354 <aarch64_match_operands_constraint@@Base+0xa94>
   43414:	mov	x0, #0x7                   	// #7
   43418:	mov	x1, #0xfffffffffffffff8    	// #-8
   4341c:	b	4321c <aarch64_match_operands_constraint@@Base+0x95c>
   43420:	mov	x0, #0x1f                  	// #31
   43424:	mov	x1, #0xffffffffffffffe0    	// #-32
   43428:	b	43354 <aarch64_match_operands_constraint@@Base+0xa94>
   4342c:	mov	w0, #0x1000                	// #4096
   43430:	b	431a8 <aarch64_match_operands_constraint@@Base+0x8e8>
   43434:	ldr	w0, [x23, #24]
   43438:	cbz	w0, 45934 <aarch64_match_operands_constraint@@Base+0x3074>
   4343c:	tbz	w8, #2, 45910 <aarch64_match_operands_constraint@@Base+0x3050>
   43440:	ldr	x0, [x21, #4032]
   43444:	ldr	w0, [x0, #6160]
   43448:	tbnz	w0, #8, 458ec <aarch64_match_operands_constraint@@Base+0x302c>
   4344c:	ldr	w0, [x23, #32]
   43450:	cmp	w0, #0x5
   43454:	b.ne	458c8 <aarch64_match_operands_constraint@@Base+0x3008>  // b.any
   43458:	ldrb	w0, [x23, #36]
   4345c:	tbz	w0, #0, 42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   43460:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   43464:	add	x3, x3, #0x9c8
   43468:	adrp	x1, 58000 <xexit@@Base+0xe08>
   4346c:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   43470:	add	x3, x3, #0x1b0
   43474:	add	x1, x1, #0x7d8
   43478:	add	x0, x0, #0x4e0
   4347c:	mov	w2, #0x77a                 	// #1914
   43480:	bl	35ac0 <__assert_fail@plt>
   43484:	mov	w0, w6
   43488:	stp	x4, x3, [sp, #112]
   4348c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   43490:	ldr	x6, [x23, #40]
   43494:	and	w2, w0, #0xff
   43498:	ldp	x4, x3, [sp, #112]
   4349c:	cbnz	x6, 44cbc <aarch64_match_operands_constraint@@Base+0x23fc>
   434a0:	ldr	w2, [x23, #32]
   434a4:	cmp	w2, #0xd
   434a8:	b.hi	434c0 <aarch64_match_operands_constraint@@Base+0xc00>  // b.pmore
   434ac:	mov	x0, #0x1                   	// #1
   434b0:	mov	x1, #0x3120                	// #12576
   434b4:	lsl	x0, x0, x2
   434b8:	tst	x0, x1
   434bc:	b.ne	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.any
   434c0:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   434c4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   434c8:	add	x1, x1, #0x3d8
   434cc:	add	x0, x0, #0x250
   434d0:	mov	w2, #0x5                   	// #5
   434d4:	bl	359e0 <dcgettext@plt>
   434d8:	cbz	x24, 45660 <aarch64_match_operands_constraint@@Base+0x2da0>
   434dc:	mov	w1, #0x9                   	// #9
   434e0:	mov	w28, #0x0                   	// #0
   434e4:	ldp	x21, x22, [sp, #32]
   434e8:	stp	w1, w25, [x24]
   434ec:	str	x0, [x24, #8]
   434f0:	ldp	x25, x26, [sp, #64]
   434f4:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   434f8:	ldr	x1, [x21, #4032]
   434fc:	add	x0, x7, x7, lsl #1
   43500:	ldr	x6, [x23, #16]
   43504:	add	x0, x1, x0, lsl #4
   43508:	ldr	w1, [x0, #16]
   4350c:	tbz	w1, #3, 4351c <aarch64_match_operands_constraint@@Base+0xc5c>
   43510:	tst	x6, #0x3
   43514:	b.ne	45254 <aarch64_match_operands_constraint@@Base+0x2994>  // b.any
   43518:	asr	x6, x6, #2
   4351c:	ldr	w2, [x0, #20]
   43520:	cbz	w2, 44398 <aarch64_match_operands_constraint@@Base+0x1ad8>
   43524:	adrp	x7, a2000 <aarch64_operands@@Base+0x16bc0>
   43528:	add	x0, x0, #0x18
   4352c:	mov	w1, #0x0                   	// #0
   43530:	ldr	x7, [x7, #3944]
   43534:	add	x8, x7, w2, uxtw #3
   43538:	ldr	w2, [x0], #4
   4353c:	ldr	w8, [x8, #4]
   43540:	add	w1, w1, w8
   43544:	cbnz	w2, 43534 <aarch64_match_operands_constraint@@Base+0xc74>
   43548:	sub	w1, w1, #0x1
   4354c:	cmp	w1, #0x1e
   43550:	b.hi	44398 <aarch64_match_operands_constraint@@Base+0x1ad8>  // b.pmore
   43554:	mov	x0, #0x1                   	// #1
   43558:	lsl	x1, x0, x1
   4355c:	neg	x0, x1
   43560:	cmp	x0, x6
   43564:	ccmp	x1, x6, #0x4, le
   43568:	b.gt	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   4356c:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43570:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43574:	add	x1, x1, #0x3f8
   43578:	add	x0, x0, #0x250
   4357c:	mov	w2, #0x5                   	// #5
   43580:	bl	359e0 <dcgettext@plt>
   43584:	cbz	x24, 452f4 <aarch64_match_operands_constraint@@Base+0x2a34>
   43588:	mov	w1, #0x9                   	// #9
   4358c:	mov	w28, #0x0                   	// #0
   43590:	ldp	x21, x22, [sp, #32]
   43594:	stp	w1, w25, [x24]
   43598:	str	x0, [x24, #8]
   4359c:	ldp	x25, x26, [sp, #64]
   435a0:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   435a4:	cmp	w25, #0x1
   435a8:	b.ne	45690 <aarch64_match_operands_constraint@@Base+0x2dd0>  // b.any
   435ac:	ldr	w0, [x23, #24]
   435b0:	cbz	w0, 44ac0 <aarch64_match_operands_constraint@@Base+0x2200>
   435b4:	ldr	w0, [x23, #20]
   435b8:	cmp	w0, #0x1e
   435bc:	b.ls	42bc0 <aarch64_match_operands_constraint@@Base+0x300>  // b.plast
   435c0:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   435c4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   435c8:	add	x1, x1, #0x388
   435cc:	add	x0, x0, #0x250
   435d0:	mov	w2, #0x5                   	// #5
   435d4:	bl	359e0 <dcgettext@plt>
   435d8:	cbz	x24, 454bc <aarch64_match_operands_constraint@@Base+0x2bfc>
   435dc:	mov	x1, #0x9                   	// #9
   435e0:	mov	w28, #0x0                   	// #0
   435e4:	movk	x1, #0x1, lsl #32
   435e8:	stp	x1, x0, [x24]
   435ec:	ldp	x21, x22, [sp, #32]
   435f0:	ldp	x25, x26, [sp, #64]
   435f4:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   435f8:	ldr	w1, [x23, #20]
   435fc:	mov	x2, #0x1ff8                	// #8184
   43600:	sxtw	x0, w1
   43604:	add	x0, x0, #0x1, lsl #12
   43608:	cmp	x0, x2
   4360c:	b.ls	44e2c <aarch64_match_operands_constraint@@Base+0x256c>  // b.plast
   43610:	cbz	x24, 44ebc <aarch64_match_operands_constraint@@Base+0x25fc>
   43614:	mov	w2, #0x5                   	// #5
   43618:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   4361c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43620:	add	x1, x1, #0x338
   43624:	add	x0, x0, #0x250
   43628:	bl	359e0 <dcgettext@plt>
   4362c:	mov	x1, #0xfffff000            	// #4294963200
   43630:	mov	w2, #0x6                   	// #6
   43634:	movk	x1, #0xff8, lsl #32
   43638:	mov	w28, #0x0                   	// #0
   4363c:	ldp	x21, x22, [sp, #32]
   43640:	stp	w2, w25, [x24]
   43644:	stp	x0, x1, [x24, #8]
   43648:	ldp	x25, x26, [sp, #64]
   4364c:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43650:	ldrsw	x0, [x23, #20]
   43654:	add	x0, x0, #0x100
   43658:	cmp	x0, #0x1ff
   4365c:	b.ls	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.plast
   43660:	cbz	x24, 4512c <aarch64_match_operands_constraint@@Base+0x286c>
   43664:	mov	w2, #0x5                   	// #5
   43668:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   4366c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43670:	add	x1, x1, #0x338
   43674:	add	x0, x0, #0x250
   43678:	bl	359e0 <dcgettext@plt>
   4367c:	mov	w2, #0x6                   	// #6
   43680:	mov	x1, #0xffffffff00          	// #1099511627520
   43684:	mov	w28, #0x0                   	// #0
   43688:	ldp	x21, x22, [sp, #32]
   4368c:	stp	w2, w25, [x24]
   43690:	stp	x0, x1, [x24, #8]
   43694:	ldp	x25, x26, [sp, #64]
   43698:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   4369c:	mov	w0, w6
   436a0:	stp	x4, x3, [sp, #112]
   436a4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   436a8:	and	w1, w0, #0xff
   436ac:	ldrsw	x2, [x23, #20]
   436b0:	neg	w5, w1, lsl #6
   436b4:	lsl	w19, w1, #6
   436b8:	sub	w19, w19, w1
   436bc:	cmp	x2, w5, sxtw
   436c0:	b.lt	448e4 <aarch64_match_operands_constraint@@Base+0x2024>  // b.tstop
   436c4:	cmp	x2, w19, sxtw
   436c8:	ldp	x4, x3, [sp, #112]
   436cc:	b.gt	448e4 <aarch64_match_operands_constraint@@Base+0x2024>
   436d0:	and	x0, x0, #0xff
   436d4:	sdiv	x6, x2, x0
   436d8:	msub	x0, x6, x0, x2
   436dc:	cbz	x0, 42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   436e0:	cbz	x24, 45c74 <aarch64_match_operands_constraint@@Base+0x33b4>
   436e4:	mov	w0, #0x7                   	// #7
   436e8:	mov	w28, #0x0                   	// #0
   436ec:	ldp	x21, x22, [sp, #32]
   436f0:	stp	w0, w25, [x24]
   436f4:	str	xzr, [x24, #8]
   436f8:	str	w1, [x24, #16]
   436fc:	ldp	x25, x26, [sp, #64]
   43700:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43704:	mov	w0, w6
   43708:	stp	x4, x3, [sp, #112]
   4370c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   43710:	ldrsw	x1, [x23, #20]
   43714:	and	w6, w0, #0xff
   43718:	ubfiz	w19, w0, #12, #8
   4371c:	sub	w19, w19, w6
   43720:	tbnz	x1, #63, 44964 <aarch64_match_operands_constraint@@Base+0x20a4>
   43724:	cmp	x1, w19, sxtw
   43728:	ldp	x4, x3, [sp, #112]
   4372c:	b.gt	44964 <aarch64_match_operands_constraint@@Base+0x20a4>
   43730:	and	x0, x0, #0xff
   43734:	sdiv	x2, x1, x0
   43738:	msub	x0, x2, x0, x1
   4373c:	cbz	x0, 42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   43740:	cbz	x24, 45b24 <aarch64_match_operands_constraint@@Base+0x3264>
   43744:	mov	w0, #0x7                   	// #7
   43748:	mov	w28, #0x0                   	// #0
   4374c:	ldp	x21, x22, [sp, #32]
   43750:	stp	w0, w25, [x24]
   43754:	str	xzr, [x24, #8]
   43758:	str	w6, [x24, #16]
   4375c:	ldp	x25, x26, [sp, #64]
   43760:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43764:	ldr	w1, [x23, #20]
   43768:	sxtw	x0, w1
   4376c:	add	x0, x0, #0x400
   43770:	cmp	x0, #0x7f0
   43774:	b.ls	44db4 <aarch64_match_operands_constraint@@Base+0x24f4>  // b.plast
   43778:	cbz	x24, 450a0 <aarch64_match_operands_constraint@@Base+0x27e0>
   4377c:	mov	w2, #0x5                   	// #5
   43780:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43784:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43788:	add	x1, x1, #0x338
   4378c:	add	x0, x0, #0x250
   43790:	bl	359e0 <dcgettext@plt>
   43794:	mov	x1, #0xfffffc00            	// #4294966272
   43798:	mov	w2, #0x6                   	// #6
   4379c:	movk	x1, #0x3f0, lsl #32
   437a0:	mov	w28, #0x0                   	// #0
   437a4:	ldp	x21, x22, [sp, #32]
   437a8:	stp	w2, w25, [x24]
   437ac:	stp	x0, x1, [x24, #8]
   437b0:	ldp	x25, x26, [sp, #64]
   437b4:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   437b8:	mov	w0, w6
   437bc:	stp	x4, x3, [sp, #112]
   437c0:	bl	35680 <aarch64_get_qualifier_esize@plt>
   437c4:	ldrsw	x1, [x23, #20]
   437c8:	ldp	x4, x3, [sp, #112]
   437cc:	tbnz	x1, #63, 44b40 <aarch64_match_operands_constraint@@Base+0x2280>
   437d0:	cmp	x1, #0xff
   437d4:	b.gt	437e8 <aarch64_match_operands_constraint@@Base+0xf28>
   437d8:	and	x0, x0, #0xff
   437dc:	sdiv	x2, x1, x0
   437e0:	msub	x0, x2, x0, x1
   437e4:	cbnz	x0, 42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   437e8:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   437ec:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   437f0:	add	x1, x1, #0x350
   437f4:	add	x0, x0, #0x250
   437f8:	mov	w2, #0x5                   	// #5
   437fc:	bl	359e0 <dcgettext@plt>
   43800:	cbz	x24, 4538c <aarch64_match_operands_constraint@@Base+0x2acc>
   43804:	mov	w1, #0x9                   	// #9
   43808:	mov	w28, #0x0                   	// #0
   4380c:	ldp	x21, x22, [sp, #32]
   43810:	stp	w1, w25, [x24]
   43814:	str	x0, [x24, #8]
   43818:	ldp	x25, x26, [sp, #64]
   4381c:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43820:	ldr	w1, [x23, #20]
   43824:	mov	x2, #0x1ff0                	// #8176
   43828:	sxtw	x0, w1
   4382c:	add	x0, x0, #0x1, lsl #12
   43830:	cmp	x0, x2
   43834:	b.ls	44e8c <aarch64_match_operands_constraint@@Base+0x25cc>  // b.plast
   43838:	cbz	x24, 451c4 <aarch64_match_operands_constraint@@Base+0x2904>
   4383c:	mov	w2, #0x5                   	// #5
   43840:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43844:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43848:	add	x1, x1, #0x338
   4384c:	add	x0, x0, #0x250
   43850:	bl	359e0 <dcgettext@plt>
   43854:	mov	x1, #0xfffff000            	// #4294963200
   43858:	mov	w2, #0x6                   	// #6
   4385c:	movk	x1, #0xff0, lsl #32
   43860:	mov	w28, #0x0                   	// #0
   43864:	ldp	x21, x22, [sp, #32]
   43868:	stp	w2, w25, [x24]
   4386c:	stp	x0, x1, [x24, #8]
   43870:	ldp	x25, x26, [sp, #64]
   43874:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43878:	ldr	x1, [x21, #4032]
   4387c:	add	x0, x7, x7, lsl #1
   43880:	add	x0, x1, x0, lsl #4
   43884:	ldr	w1, [x0, #20]
   43888:	cbz	w1, 44398 <aarch64_match_operands_constraint@@Base+0x1ad8>
   4388c:	adrp	x7, a2000 <aarch64_operands@@Base+0x16bc0>
   43890:	add	x0, x0, #0x18
   43894:	mov	w19, #0x0                   	// #0
   43898:	ldr	x7, [x7, #3944]
   4389c:	add	x2, x7, w1, uxtw #3
   438a0:	ldr	w1, [x0], #4
   438a4:	ldr	w2, [x2, #4]
   438a8:	add	w19, w19, w2
   438ac:	cbnz	w1, 4389c <aarch64_match_operands_constraint@@Base+0xfdc>
   438b0:	sub	w0, w19, #0x1
   438b4:	cmp	w0, #0x1e
   438b8:	b.hi	44398 <aarch64_match_operands_constraint@@Base+0x1ad8>  // b.pmore
   438bc:	mov	x5, #0x1                   	// #1
   438c0:	lsl	x0, x5, x19
   438c4:	cmp	x0, x9
   438c8:	b.hi	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.pmore
   438cc:	cbz	x24, 452c4 <aarch64_match_operands_constraint@@Base+0x2a04>
   438d0:	mov	w2, #0x5                   	// #5
   438d4:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   438d8:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   438dc:	add	x1, x1, #0x548
   438e0:	add	x0, x0, #0x250
   438e4:	bl	359e0 <dcgettext@plt>
   438e8:	mov	x5, #0x1                   	// #1
   438ec:	mov	w2, #0x6                   	// #6
   438f0:	lsl	w1, w5, w19
   438f4:	mov	w28, #0x0                   	// #0
   438f8:	sub	w1, w1, #0x1
   438fc:	ldp	x21, x22, [sp, #32]
   43900:	stp	w2, w25, [x24]
   43904:	str	x0, [x24, #8]
   43908:	stp	wzr, w1, [x24, #16]
   4390c:	ldp	x25, x26, [sp, #64]
   43910:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43914:	cmp	x9, #0x3f0
   43918:	b.ls	45070 <aarch64_match_operands_constraint@@Base+0x27b0>  // b.plast
   4391c:	cbz	x24, 45224 <aarch64_match_operands_constraint@@Base+0x2964>
   43920:	mov	w2, #0x5                   	// #5
   43924:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43928:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   4392c:	add	x1, x1, #0x548
   43930:	add	x0, x0, #0x250
   43934:	bl	359e0 <dcgettext@plt>
   43938:	mov	w2, #0x6                   	// #6
   4393c:	mov	x1, #0x3f000000000         	// #4329327034368
   43940:	mov	w28, #0x0                   	// #0
   43944:	ldp	x21, x22, [sp, #32]
   43948:	stp	w2, w25, [x24]
   4394c:	stp	x0, x1, [x24, #8]
   43950:	ldp	x25, x26, [sp, #64]
   43954:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43958:	mov	w0, w6
   4395c:	stp	x4, x3, [sp, #112]
   43960:	bl	35680 <aarch64_get_qualifier_esize@plt>
   43964:	ldr	x1, [x23, #16]
   43968:	ubfiz	w19, w0, #3, #8
   4396c:	sub	w19, w19, #0x1
   43970:	tbnz	x1, #63, 43980 <aarch64_match_operands_constraint@@Base+0x10c0>
   43974:	cmp	x1, w19, sxtw
   43978:	ldp	x4, x3, [sp, #112]
   4397c:	b.le	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   43980:	cbz	x24, 452d4 <aarch64_match_operands_constraint@@Base+0x2a14>
   43984:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43988:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   4398c:	add	x1, x1, #0x548
   43990:	add	x0, x0, #0x250
   43994:	mov	w2, #0x5                   	// #5
   43998:	bl	359e0 <dcgettext@plt>
   4399c:	mov	w1, #0x6                   	// #6
   439a0:	mov	w28, #0x0                   	// #0
   439a4:	ldp	x21, x22, [sp, #32]
   439a8:	stp	w1, w25, [x24]
   439ac:	str	x0, [x24, #8]
   439b0:	stp	wzr, w19, [x24, #16]
   439b4:	ldp	x25, x26, [sp, #64]
   439b8:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   439bc:	cmp	w19, #0xb2
   439c0:	mov	w1, #0x38                  	// #56
   439c4:	cset	w0, eq  // eq = none
   439c8:	stp	x4, x3, [sp, #112]
   439cc:	add	w0, w0, #0x1
   439d0:	sub	w0, w25, w0
   439d4:	umaddl	x0, w0, w1, x4
   439d8:	ldrb	w0, [x0, #4]
   439dc:	bl	35680 <aarch64_get_qualifier_esize@plt>
   439e0:	ubfiz	w19, w0, #3, #8
   439e4:	ldr	x1, [x23, #16]
   439e8:	cmp	x1, #0x0
   439ec:	b.le	439fc <aarch64_match_operands_constraint@@Base+0x113c>
   439f0:	cmp	x1, w19, sxtw
   439f4:	ldp	x4, x3, [sp, #112]
   439f8:	b.le	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   439fc:	cbz	x24, 4539c <aarch64_match_operands_constraint@@Base+0x2adc>
   43a00:	mov	w2, #0x5                   	// #5
   43a04:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43a08:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43a0c:	add	x1, x1, #0x548
   43a10:	add	x0, x0, #0x250
   43a14:	bl	359e0 <dcgettext@plt>
   43a18:	mov	w2, #0x6                   	// #6
   43a1c:	mov	w1, #0x1                   	// #1
   43a20:	mov	w28, #0x0                   	// #0
   43a24:	ldp	x21, x22, [sp, #32]
   43a28:	stp	w2, w25, [x24]
   43a2c:	str	x0, [x24, #8]
   43a30:	stp	w1, w19, [x24, #16]
   43a34:	ldp	x25, x26, [sp, #64]
   43a38:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43a3c:	ldrb	w0, [x23, #24]
   43a40:	tbz	w0, #0, 45354 <aarch64_match_operands_constraint@@Base+0x2a94>
   43a44:	cmp	x9, #0xff
   43a48:	b.ls	45314 <aarch64_match_operands_constraint@@Base+0x2a54>  // b.plast
   43a4c:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43a50:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43a54:	add	x1, x1, #0x3f8
   43a58:	add	x0, x0, #0x250
   43a5c:	mov	w2, #0x5                   	// #5
   43a60:	bl	359e0 <dcgettext@plt>
   43a64:	cbz	x24, 454cc <aarch64_match_operands_constraint@@Base+0x2c0c>
   43a68:	mov	w1, #0x9                   	// #9
   43a6c:	mov	w28, #0x0                   	// #0
   43a70:	ldp	x21, x22, [sp, #32]
   43a74:	stp	w1, w25, [x24]
   43a78:	str	x0, [x24, #8]
   43a7c:	ldp	x25, x26, [sp, #64]
   43a80:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43a84:	cmp	x9, #0x5a
   43a88:	mov	x0, #0x10e                 	// #270
   43a8c:	ccmp	x9, x0, #0x4, ne  // ne = any
   43a90:	b.eq	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.none
   43a94:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43a98:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43a9c:	add	x1, x1, #0x6e8
   43aa0:	add	x0, x0, #0x250
   43aa4:	mov	w2, #0x5                   	// #5
   43aa8:	bl	359e0 <dcgettext@plt>
   43aac:	cbz	x24, 45d34 <aarch64_match_operands_constraint@@Base+0x3474>
   43ab0:	mov	w1, #0x9                   	// #9
   43ab4:	mov	w28, #0x0                   	// #0
   43ab8:	ldp	x21, x22, [sp, #32]
   43abc:	stp	w1, w25, [x24]
   43ac0:	str	x0, [x24, #8]
   43ac4:	ldp	x25, x26, [sp, #64]
   43ac8:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43acc:	ldrb	w0, [x23, #24]
   43ad0:	tbz	w0, #0, 45d54 <aarch64_match_operands_constraint@@Base+0x3494>
   43ad4:	mov	x0, #0xffffffffffff0000    	// #-65536
   43ad8:	movk	x0, #0xc100, lsl #16
   43adc:	add	x9, x9, x0
   43ae0:	tst	x9, #0xfffffffffeffffff
   43ae4:	b.eq	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.none
   43ae8:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43aec:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43af0:	add	x1, x1, #0x868
   43af4:	add	x0, x0, #0x250
   43af8:	mov	w2, #0x5                   	// #5
   43afc:	bl	359e0 <dcgettext@plt>
   43b00:	cbz	x24, 45d44 <aarch64_match_operands_constraint@@Base+0x3484>
   43b04:	mov	w1, #0x9                   	// #9
   43b08:	mov	w28, #0x0                   	// #0
   43b0c:	ldp	x21, x22, [sp, #32]
   43b10:	stp	w1, w25, [x24]
   43b14:	str	x0, [x24, #8]
   43b18:	ldp	x25, x26, [sp, #64]
   43b1c:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43b20:	ldrb	w0, [x23, #24]
   43b24:	tbz	w0, #0, 45a44 <aarch64_match_operands_constraint@@Base+0x3184>
   43b28:	cmp	x9, #0x0
   43b2c:	mov	x0, #0x3f800000            	// #1065353216
   43b30:	ccmp	x9, x0, #0x4, ne  // ne = any
   43b34:	b.eq	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.none
   43b38:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43b3c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43b40:	add	x1, x1, #0x890
   43b44:	add	x0, x0, #0x250
   43b48:	mov	w2, #0x5                   	// #5
   43b4c:	bl	359e0 <dcgettext@plt>
   43b50:	cbz	x24, 45a34 <aarch64_match_operands_constraint@@Base+0x3174>
   43b54:	mov	w1, #0x9                   	// #9
   43b58:	mov	w28, #0x0                   	// #0
   43b5c:	ldp	x21, x22, [sp, #32]
   43b60:	stp	w1, w25, [x24]
   43b64:	str	x0, [x24, #8]
   43b68:	ldp	x25, x26, [sp, #64]
   43b6c:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43b70:	mov	w0, w6
   43b74:	stp	x4, x3, [sp, #112]
   43b78:	bl	35680 <aarch64_get_qualifier_esize@plt>
   43b7c:	ldr	x1, [x23, #16]
   43b80:	ubfiz	w19, w0, #3, #8
   43b84:	cmp	x1, #0x0
   43b88:	b.le	43b98 <aarch64_match_operands_constraint@@Base+0x12d8>
   43b8c:	cmp	x1, w19, sxtw
   43b90:	ldp	x4, x3, [sp, #112]
   43b94:	b.le	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   43b98:	cbz	x24, 451d4 <aarch64_match_operands_constraint@@Base+0x2914>
   43b9c:	mov	w2, #0x5                   	// #5
   43ba0:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43ba4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43ba8:	add	x1, x1, #0x548
   43bac:	add	x0, x0, #0x250
   43bb0:	bl	359e0 <dcgettext@plt>
   43bb4:	mov	w2, #0x6                   	// #6
   43bb8:	mov	w1, #0x1                   	// #1
   43bbc:	mov	w28, #0x0                   	// #0
   43bc0:	ldp	x21, x22, [sp, #32]
   43bc4:	stp	w2, w25, [x24]
   43bc8:	str	x0, [x24, #8]
   43bcc:	stp	w1, w19, [x24, #16]
   43bd0:	ldp	x25, x26, [sp, #64]
   43bd4:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43bd8:	cmp	w6, #0x21
   43bdc:	b.eq	44f38 <aarch64_match_operands_constraint@@Base+0x2678>  // b.none
   43be0:	cmp	w6, #0x22
   43be4:	b.ne	449cc <aarch64_match_operands_constraint@@Base+0x210c>  // b.any
   43be8:	ldr	w0, [x23, #32]
   43bec:	cmp	w0, #0x1
   43bf0:	b.ne	45618 <aarch64_match_operands_constraint@@Base+0x2d58>  // b.any
   43bf4:	cmp	w25, #0x1
   43bf8:	b.ne	45abc <aarch64_match_operands_constraint@@Base+0x31fc>  // b.any
   43bfc:	ldrb	w0, [x4, #4]
   43c00:	stp	x4, x3, [sp, #112]
   43c04:	bl	35680 <aarch64_get_qualifier_esize@plt>
   43c08:	and	w0, w0, #0xff
   43c0c:	cmp	w0, #0x8
   43c10:	ldp	x4, x3, [sp, #112]
   43c14:	b.eq	454ec <aarch64_match_operands_constraint@@Base+0x2c2c>  // b.none
   43c18:	ldr	x0, [x23, #16]
   43c1c:	add	x0, x0, #0x80
   43c20:	cmp	x0, #0x17f
   43c24:	b.ls	44ecc <aarch64_match_operands_constraint@@Base+0x260c>  // b.plast
   43c28:	cbz	x24, 453cc <aarch64_match_operands_constraint@@Base+0x2b0c>
   43c2c:	mov	w2, #0x5                   	// #5
   43c30:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43c34:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43c38:	add	x1, x1, #0x548
   43c3c:	add	x0, x0, #0x250
   43c40:	bl	359e0 <dcgettext@plt>
   43c44:	mov	x2, #0x6                   	// #6
   43c48:	mov	x1, #0xffffffff80          	// #1099511627648
   43c4c:	movk	x2, #0x1, lsl #32
   43c50:	stp	x2, x0, [x24]
   43c54:	mov	w28, #0x0                   	// #0
   43c58:	str	x1, [x24, #16]
   43c5c:	ldp	x21, x22, [sp, #32]
   43c60:	ldp	x25, x26, [sp, #64]
   43c64:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43c68:	ldr	w2, [x23, #32]
   43c6c:	cmp	w2, #0x5
   43c70:	b.ne	4518c <aarch64_match_operands_constraint@@Base+0x28cc>  // b.any
   43c74:	ldr	x0, [x23, #40]
   43c78:	cmp	x0, #0x0
   43c7c:	ccmp	x0, #0xc, #0x4, ne  // ne = any
   43c80:	b.ne	45420 <aarch64_match_operands_constraint@@Base+0x2b60>  // b.any
   43c84:	cmp	x9, #0xfff
   43c88:	b.ls	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.plast
   43c8c:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43c90:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43c94:	add	x1, x1, #0x3f8
   43c98:	add	x0, x0, #0x250
   43c9c:	bl	359e0 <dcgettext@plt>
   43ca0:	cbz	x24, 45454 <aarch64_match_operands_constraint@@Base+0x2b94>
   43ca4:	mov	w1, #0x9                   	// #9
   43ca8:	mov	w28, #0x0                   	// #0
   43cac:	ldp	x21, x22, [sp, #32]
   43cb0:	stp	w1, w25, [x24]
   43cb4:	str	x0, [x24, #8]
   43cb8:	ldp	x25, x26, [sp, #64]
   43cbc:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43cc0:	ldrb	w0, [x4, #4]
   43cc4:	stp	x4, x3, [sp, #112]
   43cc8:	bl	35680 <aarch64_get_qualifier_esize@plt>
   43ccc:	and	w1, w0, #0xff
   43cd0:	cmp	w25, #0x1
   43cd4:	ldr	x0, [x23, #16]
   43cd8:	ldp	x4, x3, [sp, #112]
   43cdc:	b.ne	45c84 <aarch64_match_operands_constraint@@Base+0x33c4>  // b.any
   43ce0:	ldr	w2, [x28, #20]
   43ce4:	cmp	w2, #0x24
   43ce8:	b.eq	43cf8 <aarch64_match_operands_constraint@@Base+0x1438>  // b.none
   43cec:	cmp	w2, #0x25
   43cf0:	b.ne	449a0 <aarch64_match_operands_constraint@@Base+0x20e0>  // b.any
   43cf4:	mvn	x0, x0
   43cf8:	cmp	w1, #0x4
   43cfc:	mov	x2, #0x0                   	// #0
   43d00:	cset	w1, eq  // eq = none
   43d04:	stp	x4, x3, [sp, #112]
   43d08:	bl	35a40 <aarch64_wide_constant_p@plt>
   43d0c:	mov	w28, w0
   43d10:	cbz	w0, 453dc <aarch64_match_operands_constraint@@Base+0x2b1c>
   43d14:	ldr	x28, [x20, #8]
   43d18:	ldp	x4, x3, [sp, #112]
   43d1c:	b	42bc0 <aarch64_match_operands_constraint@@Base+0x300>
   43d20:	ldr	x0, [x21, #4032]
   43d24:	add	x1, x7, x7, lsl #1
   43d28:	add	x1, x0, x1, lsl #4
   43d2c:	ldr	w2, [x1, #20]
   43d30:	cbz	w2, 44398 <aarch64_match_operands_constraint@@Base+0x1ad8>
   43d34:	adrp	x7, a2000 <aarch64_operands@@Base+0x16bc0>
   43d38:	add	x1, x1, #0x18
   43d3c:	mov	w0, #0x0                   	// #0
   43d40:	ldr	x7, [x7, #3944]
   43d44:	add	x6, x7, w2, uxtw #3
   43d48:	ldr	w2, [x1], #4
   43d4c:	ldr	w6, [x6, #4]
   43d50:	add	w0, w0, w6
   43d54:	cbnz	w2, 43d44 <aarch64_match_operands_constraint@@Base+0x1484>
   43d58:	sub	w0, w0, #0x1
   43d5c:	cmp	w0, #0x1e
   43d60:	b.hi	44398 <aarch64_match_operands_constraint@@Base+0x1ad8>  // b.pmore
   43d64:	mov	x19, #0x1                   	// #1
   43d68:	lsl	x1, x19, x0
   43d6c:	neg	x2, x1
   43d70:	cmp	x9, x2
   43d74:	ccmp	x9, x1, #0x0, ge  // ge = tcont
   43d78:	b.lt	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.tstop
   43d7c:	cbz	x24, 4513c <aarch64_match_operands_constraint@@Base+0x287c>
   43d80:	lsl	w19, w19, w0
   43d84:	mov	w2, #0x5                   	// #5
   43d88:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43d8c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43d90:	add	x1, x1, #0x548
   43d94:	add	x0, x0, #0x250
   43d98:	bl	359e0 <dcgettext@plt>
   43d9c:	mov	w28, #0x0                   	// #0
   43da0:	neg	w1, w19
   43da4:	mov	w2, #0x6                   	// #6
   43da8:	sub	w19, w19, #0x1
   43dac:	ldp	x21, x22, [sp, #32]
   43db0:	stp	w2, w25, [x24]
   43db4:	str	x0, [x24, #8]
   43db8:	stp	w1, w19, [x24, #16]
   43dbc:	ldp	x25, x26, [sp, #64]
   43dc0:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43dc4:	cmp	x9, #0x5a
   43dc8:	mov	x1, #0x10e                 	// #270
   43dcc:	ccmp	x9, #0x0, #0x4, ne  // ne = any
   43dd0:	cset	w0, ne  // ne = any
   43dd4:	cmp	x9, #0xb4
   43dd8:	ccmp	x9, x1, #0x4, ne  // ne = any
   43ddc:	csel	w0, w0, wzr, ne  // ne = any
   43de0:	cbz	w0, 42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   43de4:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43de8:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43dec:	add	x1, x1, #0x6c0
   43df0:	add	x0, x0, #0x250
   43df4:	mov	w2, #0x5                   	// #5
   43df8:	bl	359e0 <dcgettext@plt>
   43dfc:	cbz	x24, 45958 <aarch64_match_operands_constraint@@Base+0x3098>
   43e00:	mov	w1, #0x9                   	// #9
   43e04:	mov	w28, #0x0                   	// #0
   43e08:	ldp	x21, x22, [sp, #32]
   43e0c:	stp	w1, w25, [x24]
   43e10:	str	x0, [x24, #8]
   43e14:	ldp	x25, x26, [sp, #64]
   43e18:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43e1c:	ldrb	w0, [x4, #4]
   43e20:	stp	x4, x3, [sp, #112]
   43e24:	bl	35680 <aarch64_get_qualifier_esize@plt>
   43e28:	and	w1, w0, #0xff
   43e2c:	ldr	w2, [x28, #20]
   43e30:	ldr	x0, [x23, #16]
   43e34:	cmp	w2, #0x2a
   43e38:	mov	x2, #0x0                   	// #0
   43e3c:	cinv	x0, x0, eq  // eq = none
   43e40:	bl	35400 <aarch64_logical_immediate_p@plt>
   43e44:	mov	w28, w0
   43e48:	ldp	x4, x3, [sp, #112]
   43e4c:	cbnz	w0, 42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   43e50:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43e54:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43e58:	add	x1, x1, #0x3f8
   43e5c:	add	x0, x0, #0x250
   43e60:	mov	w2, #0x5                   	// #5
   43e64:	bl	359e0 <dcgettext@plt>
   43e68:	cbz	x24, 45a9c <aarch64_match_operands_constraint@@Base+0x31dc>
   43e6c:	mov	w1, #0x9                   	// #9
   43e70:	ldp	x21, x22, [sp, #32]
   43e74:	stp	w1, w25, [x24]
   43e78:	str	x0, [x24, #8]
   43e7c:	ldp	x25, x26, [sp, #64]
   43e80:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43e84:	cbz	x9, 42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   43e88:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43e8c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43e90:	add	x1, x1, #0x6a8
   43e94:	add	x0, x0, #0x250
   43e98:	mov	w2, #0x5                   	// #5
   43e9c:	bl	359e0 <dcgettext@plt>
   43ea0:	cbz	x24, 45ca8 <aarch64_match_operands_constraint@@Base+0x33e8>
   43ea4:	mov	w1, #0x9                   	// #9
   43ea8:	mov	w28, #0x0                   	// #0
   43eac:	ldp	x21, x22, [sp, #32]
   43eb0:	stp	w1, w25, [x24]
   43eb4:	str	x0, [x24, #8]
   43eb8:	ldp	x25, x26, [sp, #64]
   43ebc:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43ec0:	ldrb	w0, [x4, #4]
   43ec4:	stp	x4, x3, [sp, #112]
   43ec8:	bl	35680 <aarch64_get_qualifier_esize@plt>
   43ecc:	and	w1, w0, #0xff
   43ed0:	ldr	x6, [x23, #16]
   43ed4:	mov	x2, #0x0                   	// #0
   43ed8:	mvn	x0, x6
   43edc:	bl	35400 <aarch64_logical_immediate_p@plt>
   43ee0:	mov	w28, w0
   43ee4:	ldp	x4, x3, [sp, #112]
   43ee8:	cbnz	w0, 42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   43eec:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43ef0:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43ef4:	add	x1, x1, #0x3f8
   43ef8:	add	x0, x0, #0x250
   43efc:	mov	w2, #0x5                   	// #5
   43f00:	bl	359e0 <dcgettext@plt>
   43f04:	cbz	x24, 45cb8 <aarch64_match_operands_constraint@@Base+0x33f8>
   43f08:	mov	w1, #0x9                   	// #9
   43f0c:	ldp	x21, x22, [sp, #32]
   43f10:	stp	w1, w25, [x24]
   43f14:	str	x0, [x24, #8]
   43f18:	ldp	x25, x26, [sp, #64]
   43f1c:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43f20:	cmp	w25, #0x2
   43f24:	b.ne	45860 <aarch64_match_operands_constraint@@Base+0x2fa0>  // b.any
   43f28:	ldurb	w0, [x23, #-52]
   43f2c:	stp	x4, x3, [sp, #112]
   43f30:	bl	35680 <aarch64_get_qualifier_esize@plt>
   43f34:	ubfiz	x0, x0, #3, #5
   43f38:	ldr	x1, [x23, #16]
   43f3c:	cmp	x1, x0
   43f40:	b.eq	43d14 <aarch64_match_operands_constraint@@Base+0x1454>  // b.none
   43f44:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43f48:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43f4c:	add	x1, x1, #0x3c0
   43f50:	add	x0, x0, #0x250
   43f54:	mov	w2, #0x5                   	// #5
   43f58:	bl	359e0 <dcgettext@plt>
   43f5c:	cbz	x24, 45538 <aarch64_match_operands_constraint@@Base+0x2c78>
   43f60:	mov	x1, #0x9                   	// #9
   43f64:	mov	w28, #0x0                   	// #0
   43f68:	movk	x1, #0x2, lsl #32
   43f6c:	stp	x1, x0, [x24]
   43f70:	ldp	x21, x22, [sp, #32]
   43f74:	ldp	x25, x26, [sp, #64]
   43f78:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43f7c:	cmp	w25, #0x1
   43f80:	b.ne	45a68 <aarch64_match_operands_constraint@@Base+0x31a8>  // b.any
   43f84:	ldr	w0, [x4]
   43f88:	cmp	w0, #0x1
   43f8c:	b.ne	45a68 <aarch64_match_operands_constraint@@Base+0x31a8>  // b.any
   43f90:	ldr	w25, [x23, #32]
   43f94:	cmp	w25, #0x5
   43f98:	b.eq	44c0c <aarch64_match_operands_constraint@@Base+0x234c>  // b.none
   43f9c:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   43fa0:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   43fa4:	add	x1, x1, #0x558
   43fa8:	add	x0, x0, #0x250
   43fac:	mov	w2, #0x5                   	// #5
   43fb0:	bl	359e0 <dcgettext@plt>
   43fb4:	cbz	x24, 454ac <aarch64_match_operands_constraint@@Base+0x2bec>
   43fb8:	mov	x1, #0x9                   	// #9
   43fbc:	mov	w28, #0x0                   	// #0
   43fc0:	movk	x1, #0x1, lsl #32
   43fc4:	stp	x1, x0, [x24]
   43fc8:	ldp	x21, x22, [sp, #32]
   43fcc:	ldp	x25, x26, [sp, #64]
   43fd0:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   43fd4:	cmp	w25, #0x1
   43fd8:	b.ls	45730 <aarch64_match_operands_constraint@@Base+0x2e70>  // b.plast
   43fdc:	ldur	w0, [x23, #-56]
   43fe0:	cmp	w0, #0x37
   43fe4:	b.ne	45730 <aarch64_match_operands_constraint@@Base+0x2e70>  // b.any
   43fe8:	ldr	w5, [x4]
   43fec:	cmp	w5, #0x1
   43ff0:	b.ne	45730 <aarch64_match_operands_constraint@@Base+0x2e70>  // b.any
   43ff4:	cmp	w2, #0x2
   43ff8:	b.ne	4570c <aarch64_match_operands_constraint@@Base+0x2e4c>  // b.any
   43ffc:	ldr	x8, [x8, #3776]
   44000:	ldur	x28, [x23, #-40]
   44004:	add	x10, x8, x10, lsl #5
   44008:	add	x9, x9, x28
   4400c:	ldr	w19, [x10, #4]
   44010:	cmp	x9, w19, uxtb
   44014:	b.le	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   44018:	str	w5, [sp, #104]
   4401c:	cbz	x24, 454dc <aarch64_match_operands_constraint@@Base+0x2c1c>
   44020:	mov	w2, #0x5                   	// #5
   44024:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44028:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   4402c:	add	x1, x1, #0x548
   44030:	add	x0, x0, #0x250
   44034:	bl	359e0 <dcgettext@plt>
   44038:	ldr	w5, [sp, #104]
   4403c:	and	w1, w19, #0xff
   44040:	sub	w1, w1, w28
   44044:	mov	w2, #0x6                   	// #6
   44048:	mov	w28, #0x0                   	// #0
   4404c:	ldp	x21, x22, [sp, #32]
   44050:	stp	w2, w25, [x24]
   44054:	str	x0, [x24, #8]
   44058:	stp	w5, w1, [x24, #16]
   4405c:	ldp	x25, x26, [sp, #64]
   44060:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44064:	ldrb	w0, [x23, #24]
   44068:	tbz	w0, #0, 457a8 <aarch64_match_operands_constraint@@Base+0x2ee8>
   4406c:	and	x9, x9, #0xffffffffff7fffff
   44070:	mov	x0, #0x3f000000            	// #1056964608
   44074:	cmp	x9, x0
   44078:	b.eq	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.none
   4407c:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44080:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   44084:	add	x1, x1, #0x840
   44088:	add	x0, x0, #0x250
   4408c:	mov	w2, #0x5                   	// #5
   44090:	bl	359e0 <dcgettext@plt>
   44094:	cbz	x24, 45798 <aarch64_match_operands_constraint@@Base+0x2ed8>
   44098:	mov	w1, #0x9                   	// #9
   4409c:	mov	w28, #0x0                   	// #0
   440a0:	ldp	x21, x22, [sp, #32]
   440a4:	stp	w1, w25, [x24]
   440a8:	str	x0, [x24, #8]
   440ac:	ldp	x25, x26, [sp, #64]
   440b0:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   440b4:	ldr	w0, [x23, #32]
   440b8:	cmp	w0, #0xe
   440bc:	b.ne	45978 <aarch64_match_operands_constraint@@Base+0x30b8>  // b.any
   440c0:	ldr	x0, [x23, #40]
   440c4:	sub	x0, x0, #0x1
   440c8:	cmp	x0, #0xf
   440cc:	b.ls	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.plast
   440d0:	cbz	x24, 45304 <aarch64_match_operands_constraint@@Base+0x2a44>
   440d4:	mov	w2, #0x5                   	// #5
   440d8:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   440dc:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   440e0:	add	x1, x1, #0x908
   440e4:	add	x0, x0, #0x250
   440e8:	bl	359e0 <dcgettext@plt>
   440ec:	mov	x1, #0x1                   	// #1
   440f0:	mov	w2, #0x6                   	// #6
   440f4:	movk	x1, #0x10, lsl #32
   440f8:	mov	w28, #0x0                   	// #0
   440fc:	ldp	x21, x22, [sp, #32]
   44100:	stp	w2, w25, [x24]
   44104:	stp	x0, x1, [x24, #8]
   44108:	ldp	x25, x26, [sp, #64]
   4410c:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44110:	ldurb	w0, [x23, #-52]
   44114:	stp	x4, x3, [sp, #112]
   44118:	bl	35680 <aarch64_get_qualifier_esize@plt>
   4411c:	ubfiz	w19, w0, #3, #8
   44120:	ldr	x1, [x23, #16]
   44124:	sub	w19, w19, #0x1
   44128:	tbnz	x1, #63, 44138 <aarch64_match_operands_constraint@@Base+0x1878>
   4412c:	cmp	x1, w19, sxtw
   44130:	ldp	x4, x3, [sp, #112]
   44134:	b.le	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   44138:	cbz	x24, 452b4 <aarch64_match_operands_constraint@@Base+0x29f4>
   4413c:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44140:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   44144:	add	x1, x1, #0x548
   44148:	add	x0, x0, #0x250
   4414c:	mov	w2, #0x5                   	// #5
   44150:	bl	359e0 <dcgettext@plt>
   44154:	mov	w1, #0x6                   	// #6
   44158:	mov	w28, #0x0                   	// #0
   4415c:	ldp	x21, x22, [sp, #32]
   44160:	stp	w1, w25, [x24]
   44164:	str	x0, [x24, #8]
   44168:	stp	wzr, w19, [x24, #16]
   4416c:	ldp	x25, x26, [sp, #64]
   44170:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44174:	ldrb	w0, [x4, #4]
   44178:	stp	x4, x3, [sp, #120]
   4417c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   44180:	and	w19, w0, #0xff
   44184:	ldr	x5, [x23, #16]
   44188:	mov	w1, w19
   4418c:	mov	x2, #0x0                   	// #0
   44190:	str	x5, [sp, #112]
   44194:	mov	x0, x5
   44198:	bl	35400 <aarch64_logical_immediate_p@plt>
   4419c:	mov	w28, w0
   441a0:	ldp	x5, x4, [sp, #112]
   441a4:	ldr	x3, [sp, #128]
   441a8:	cbz	w0, 44d80 <aarch64_match_operands_constraint@@Base+0x24c0>
   441ac:	mov	w1, w19
   441b0:	mov	x0, x5
   441b4:	stp	x4, x3, [sp, #112]
   441b8:	bl	35540 <aarch64_sve_dupm_mov_immediate_p@plt>
   441bc:	mov	w28, w0
   441c0:	ldp	x4, x3, [sp, #112]
   441c4:	cbnz	w0, 42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   441c8:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   441cc:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   441d0:	add	x1, x1, #0x8b8
   441d4:	add	x0, x0, #0x250
   441d8:	mov	w2, #0x5                   	// #5
   441dc:	bl	359e0 <dcgettext@plt>
   441e0:	cbz	x24, 45840 <aarch64_match_operands_constraint@@Base+0x2f80>
   441e4:	mov	w1, #0x9                   	// #9
   441e8:	ldp	x21, x22, [sp, #32]
   441ec:	stp	w1, w25, [x24]
   441f0:	str	x0, [x24, #8]
   441f4:	ldp	x25, x26, [sp, #64]
   441f8:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   441fc:	mov	x0, x1
   44200:	lsl	x1, x10, #5
   44204:	add	x12, x0, x1
   44208:	ldr	w11, [x0, x1]
   4420c:	ldr	w12, [x12, #4]
   44210:	cmp	x9, w11, sxtw
   44214:	b.lt	44220 <aarch64_match_operands_constraint@@Base+0x1960>  // b.tstop
   44218:	cmp	x9, w12, sxtw
   4421c:	b.le	42cc0 <aarch64_match_operands_constraint@@Base+0x400>
   44220:	str	w11, [sp, #104]
   44224:	str	w12, [sp, #112]
   44228:	cbz	x24, 446e8 <aarch64_match_operands_constraint@@Base+0x1e28>
   4422c:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44230:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   44234:	add	x1, x1, #0x548
   44238:	add	x0, x0, #0x250
   4423c:	mov	w2, #0x5                   	// #5
   44240:	bl	359e0 <dcgettext@plt>
   44244:	ldr	w11, [sp, #104]
   44248:	mov	w1, #0x6                   	// #6
   4424c:	ldr	w12, [sp, #112]
   44250:	mov	w28, #0x0                   	// #0
   44254:	ldp	x21, x22, [sp, #32]
   44258:	stp	w1, w25, [x24]
   4425c:	str	x0, [x24, #8]
   44260:	stp	w11, w12, [x24, #16]
   44264:	ldp	x25, x26, [sp, #64]
   44268:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   4426c:	sub	w1, w0, #0x1
   44270:	cmp	w1, #0x3
   44274:	b.hi	45d10 <aarch64_match_operands_constraint@@Base+0x3450>  // b.pmore
   44278:	cmp	w0, #0x1
   4427c:	b.eq	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.none
   44280:	ldrb	w1, [x23, #16]
   44284:	ubfx	x1, x1, #5, #3
   44288:	cmp	w1, w0
   4428c:	b.eq	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.none
   44290:	cbz	x24, 44ba8 <aarch64_match_operands_constraint@@Base+0x22e8>
   44294:	mov	w1, #0x8                   	// #8
   44298:	mov	w28, #0x0                   	// #0
   4429c:	ldp	x21, x22, [sp, #32]
   442a0:	stp	w1, w25, [x24]
   442a4:	str	xzr, [x24, #8]
   442a8:	str	w0, [x24, #16]
   442ac:	ldp	x25, x26, [sp, #64]
   442b0:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   442b4:	mov	w0, w6
   442b8:	stp	x4, x3, [sp, #112]
   442bc:	bl	35680 <aarch64_get_qualifier_esize@plt>
   442c0:	and	w0, w0, #0xff
   442c4:	mov	w1, #0x40                  	// #64
   442c8:	ldr	x2, [x23, #24]
   442cc:	udiv	w1, w1, w0
   442d0:	sub	w19, w1, #0x1
   442d4:	tbnz	x2, #63, 442e4 <aarch64_match_operands_constraint@@Base+0x1a24>
   442d8:	cmp	x2, w19, sxtw
   442dc:	ldp	x4, x3, [sp, #112]
   442e0:	b.le	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   442e4:	cbz	x24, 447cc <aarch64_match_operands_constraint@@Base+0x1f0c>
   442e8:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   442ec:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   442f0:	add	x1, x1, #0x298
   442f4:	add	x0, x0, #0x250
   442f8:	mov	w2, #0x5                   	// #5
   442fc:	bl	359e0 <dcgettext@plt>
   44300:	mov	w1, #0x6                   	// #6
   44304:	mov	w28, #0x0                   	// #0
   44308:	ldp	x21, x22, [sp, #32]
   4430c:	stp	w1, w25, [x24]
   44310:	str	x0, [x24, #8]
   44314:	stp	wzr, w19, [x24, #16]
   44318:	ldp	x25, x26, [sp, #64]
   4431c:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44320:	mov	w28, #0x0                   	// #0
   44324:	ldp	x21, x22, [sp, #32]
   44328:	ldp	x25, x26, [sp, #64]
   4432c:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   44330:	cmp	w25, #0x1
   44334:	b.ne	4580c <aarch64_match_operands_constraint@@Base+0x2f4c>  // b.any
   44338:	ldr	w0, [x4]
   4433c:	str	x4, [sp, #112]
   44340:	str	w6, [sp, #120]
   44344:	str	x3, [sp, #128]
   44348:	bl	35710 <aarch64_get_operand_class@plt>
   4434c:	cmp	w0, #0xc
   44350:	b.ne	4580c <aarch64_match_operands_constraint@@Base+0x2f4c>  // b.any
   44354:	ldrb	w1, [x20, #128]
   44358:	add	x19, x20, #0x50
   4435c:	ldr	x4, [sp, #112]
   44360:	ldr	w6, [sp, #120]
   44364:	ldr	x3, [sp, #128]
   44368:	ldr	x0, [x4, #16]
   4436c:	tbnz	w1, #1, 446f8 <aarch64_match_operands_constraint@@Base+0x1e38>
   44370:	str	w6, [sp, #112]
   44374:	stp	x4, x3, [sp, #120]
   44378:	bl	35a00 <aarch64_sys_ins_reg_has_xt@plt>
   4437c:	ldr	w6, [sp, #112]
   44380:	ldp	x4, x3, [sp, #120]
   44384:	cbnz	w0, 44d38 <aarch64_match_operands_constraint@@Base+0x2478>
   44388:	sub	w6, w6, #0x3
   4438c:	cmp	w6, #0x1
   44390:	b.hi	42bbc <aarch64_match_operands_constraint@@Base+0x2fc>  // b.pmore
   44394:	b	42f0c <aarch64_match_operands_constraint@@Base+0x64c>
   44398:	bl	3fa58 <print_aarch64_disassembler_options@@Base+0x2e0>
   4439c:	and	w0, w25, #0xfffffffd
   443a0:	cmp	w0, #0x1
   443a4:	b.ne	45cec <aarch64_match_operands_constraint@@Base+0x342c>  // b.any
   443a8:	ldur	w0, [x23, #-40]
   443ac:	tbnz	w0, #0, 44758 <aarch64_match_operands_constraint@@Base+0x1e98>
   443b0:	ldr	w1, [x23, #16]
   443b4:	add	w0, w0, #0x1
   443b8:	cmp	w1, w0
   443bc:	b.eq	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.none
   443c0:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   443c4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   443c8:	add	x1, x1, #0x198
   443cc:	add	x0, x0, #0x250
   443d0:	mov	w2, #0x5                   	// #5
   443d4:	bl	359e0 <dcgettext@plt>
   443d8:	cbz	x24, 44bb8 <aarch64_match_operands_constraint@@Base+0x22f8>
   443dc:	mov	w1, #0x2                   	// #2
   443e0:	mov	w28, #0x0                   	// #0
   443e4:	ldp	x21, x22, [sp, #32]
   443e8:	stp	w1, w25, [x24]
   443ec:	str	x0, [x24, #8]
   443f0:	ldp	x25, x26, [sp, #64]
   443f4:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   443f8:	ldr	w0, [x23, #32]
   443fc:	str	w6, [sp, #112]
   44400:	stp	x4, x3, [sp, #120]
   44404:	bl	35b70 <aarch64_extend_operator_p@plt>
   44408:	mov	w28, w0
   4440c:	ldr	w6, [sp, #112]
   44410:	ldp	x4, x3, [sp, #120]
   44414:	cbnz	w0, 44424 <aarch64_match_operands_constraint@@Base+0x1b64>
   44418:	ldr	w0, [x23, #32]
   4441c:	cmp	w0, #0x5
   44420:	b.ne	44724 <aarch64_match_operands_constraint@@Base+0x1e64>  // b.any
   44424:	mov	x0, x4
   44428:	str	x4, [sp, #112]
   4442c:	str	w6, [sp, #120]
   44430:	str	x3, [sp, #128]
   44434:	bl	35740 <aarch64_stack_pointer_p@plt>
   44438:	ldr	w6, [sp, #120]
   4443c:	mov	w28, w0
   44440:	ldr	x4, [sp, #112]
   44444:	ldr	x3, [sp, #128]
   44448:	cbnz	w0, 445fc <aarch64_match_operands_constraint@@Base+0x1d3c>
   4444c:	cmp	w25, #0x2
   44450:	b.eq	445e0 <aarch64_match_operands_constraint@@Base+0x1d20>  // b.none
   44454:	ldrb	w0, [x23, #36]
   44458:	tbz	w0, #0, 44a04 <aarch64_match_operands_constraint@@Base+0x2144>
   4445c:	ldr	w2, [x23, #32]
   44460:	cmp	w2, #0x5
   44464:	b.eq	44e5c <aarch64_match_operands_constraint@@Base+0x259c>  // b.none
   44468:	ldr	x0, [x23, #40]
   4446c:	cmp	x0, #0x4
   44470:	b.ls	44824 <aarch64_match_operands_constraint@@Base+0x1f64>  // b.plast
   44474:	cbz	x24, 44888 <aarch64_match_operands_constraint@@Base+0x1fc8>
   44478:	mov	w2, #0x5                   	// #5
   4447c:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44480:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   44484:	add	x1, x1, #0x3c8
   44488:	add	x0, x0, #0x250
   4448c:	bl	359e0 <dcgettext@plt>
   44490:	mov	w2, #0x6                   	// #6
   44494:	mov	x1, #0x400000000           	// #17179869184
   44498:	mov	w28, #0x0                   	// #0
   4449c:	ldp	x21, x22, [sp, #32]
   444a0:	stp	w2, w25, [x24]
   444a4:	stp	x0, x1, [x24, #8]
   444a8:	ldp	x25, x26, [sp, #64]
   444ac:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   444b0:	tbz	w8, #1, 43180 <aarch64_match_operands_constraint@@Base+0x8c0>
   444b4:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   444b8:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   444bc:	add	x1, x1, #0x2d8
   444c0:	add	x0, x0, #0x250
   444c4:	mov	w2, #0x5                   	// #5
   444c8:	bl	359e0 <dcgettext@plt>
   444cc:	cbz	x24, 44fc4 <aarch64_match_operands_constraint@@Base+0x2704>
   444d0:	mov	w1, #0x2                   	// #2
   444d4:	mov	w28, #0x0                   	// #0
   444d8:	ldp	x21, x22, [sp, #32]
   444dc:	stp	w1, w25, [x24]
   444e0:	str	x0, [x24, #8]
   444e4:	ldp	x25, x26, [sp, #64]
   444e8:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   444ec:	tbnz	w8, #1, 43180 <aarch64_match_operands_constraint@@Base+0x8c0>
   444f0:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   444f4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   444f8:	add	x1, x1, #0x2f8
   444fc:	add	x0, x0, #0x250
   44500:	mov	w2, #0x5                   	// #5
   44504:	bl	359e0 <dcgettext@plt>
   44508:	cbz	x24, 44fd4 <aarch64_match_operands_constraint@@Base+0x2714>
   4450c:	mov	w1, #0x2                   	// #2
   44510:	mov	w28, #0x0                   	// #0
   44514:	ldp	x21, x22, [sp, #32]
   44518:	stp	w1, w25, [x24]
   4451c:	str	x0, [x24, #8]
   44520:	ldp	x25, x26, [sp, #64]
   44524:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44528:	mov	w0, w6
   4452c:	stp	x4, x3, [sp, #112]
   44530:	bl	35680 <aarch64_get_qualifier_esize@plt>
   44534:	and	w0, w0, #0xff
   44538:	mov	w1, #0x10                  	// #16
   4453c:	ldr	x2, [x23, #24]
   44540:	udiv	w1, w1, w0
   44544:	sub	w19, w1, #0x1
   44548:	tbnz	x2, #63, 445a4 <aarch64_match_operands_constraint@@Base+0x1ce4>
   4454c:	cmp	x2, w19, sxtw
   44550:	ldp	x4, x3, [sp, #112]
   44554:	b.gt	445a4 <aarch64_match_operands_constraint@@Base+0x1ce4>
   44558:	ldr	x0, [x28, #120]
   4455c:	ubfx	w0, w0, #24, #3
   44560:	b	42e50 <aarch64_match_operands_constraint@@Base+0x590>
   44564:	ldrb	w0, [x4, #4]
   44568:	str	x4, [sp, #112]
   4456c:	str	w6, [sp, #120]
   44570:	str	x3, [sp, #128]
   44574:	bl	358f0 <aarch64_get_qualifier_nelem@plt>
   44578:	and	w28, w0, #0xff
   4457c:	ldr	x4, [sp, #112]
   44580:	ldrb	w0, [x4, #4]
   44584:	bl	35680 <aarch64_get_qualifier_esize@plt>
   44588:	and	w0, w0, #0xff
   4458c:	ldr	w6, [sp, #120]
   44590:	ldr	x4, [sp, #112]
   44594:	mul	w28, w28, w0
   44598:	ldr	x3, [sp, #128]
   4459c:	asr	w28, w28, #1
   445a0:	b	43068 <aarch64_match_operands_constraint@@Base+0x7a8>
   445a4:	cbz	x24, 44898 <aarch64_match_operands_constraint@@Base+0x1fd8>
   445a8:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   445ac:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   445b0:	add	x1, x1, #0x298
   445b4:	add	x0, x0, #0x250
   445b8:	mov	w2, #0x5                   	// #5
   445bc:	bl	359e0 <dcgettext@plt>
   445c0:	mov	w1, #0x6                   	// #6
   445c4:	mov	w28, #0x0                   	// #0
   445c8:	ldp	x21, x22, [sp, #32]
   445cc:	stp	w1, w25, [x24]
   445d0:	str	x0, [x24, #8]
   445d4:	stp	wzr, w19, [x24, #16]
   445d8:	ldp	x25, x26, [sp, #64]
   445dc:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   445e0:	add	x0, x20, #0x50
   445e4:	str	w6, [sp, #112]
   445e8:	stp	x4, x3, [sp, #120]
   445ec:	bl	35740 <aarch64_stack_pointer_p@plt>
   445f0:	ldr	w6, [sp, #112]
   445f4:	ldp	x4, x3, [sp, #120]
   445f8:	cbz	w0, 44454 <aarch64_match_operands_constraint@@Base+0x1b94>
   445fc:	ldrb	w0, [x23, #36]
   44600:	tbnz	w0, #0, 44468 <aarch64_match_operands_constraint@@Base+0x1ba8>
   44604:	ldr	w0, [x23, #32]
   44608:	cmp	w0, #0x5
   4460c:	b.eq	44468 <aarch64_match_operands_constraint@@Base+0x1ba8>  // b.none
   44610:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   44614:	add	x3, x3, #0x9c8
   44618:	adrp	x1, 58000 <xexit@@Base+0xe08>
   4461c:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   44620:	add	x3, x3, #0x1b0
   44624:	add	x1, x1, #0x7d8
   44628:	add	x0, x0, #0x9e0
   4462c:	mov	w2, #0xa66                 	// #2662
   44630:	bl	35ac0 <__assert_fail@plt>
   44634:	ldr	x0, [x23, #24]
   44638:	sub	w1, w1, w2
   4463c:	lsl	w1, w6, w1
   44640:	sub	w19, w1, #0x1
   44644:	tbnz	x0, #63, 44650 <aarch64_match_operands_constraint@@Base+0x1d90>
   44648:	cmp	x0, w19, sxtw
   4464c:	b.le	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   44650:	cbz	x24, 448d4 <aarch64_match_operands_constraint@@Base+0x2014>
   44654:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44658:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   4465c:	add	x1, x1, #0x298
   44660:	add	x0, x0, #0x250
   44664:	mov	w2, #0x5                   	// #5
   44668:	bl	359e0 <dcgettext@plt>
   4466c:	mov	w1, #0x6                   	// #6
   44670:	mov	w28, #0x0                   	// #0
   44674:	ldp	x21, x22, [sp, #32]
   44678:	stp	w1, w25, [x24]
   4467c:	str	x0, [x24, #8]
   44680:	stp	wzr, w19, [x24, #16]
   44684:	ldp	x25, x26, [sp, #64]
   44688:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   4468c:	cmp	w0, #0x5
   44690:	b.ne	42bc0 <aarch64_match_operands_constraint@@Base+0x300>  // b.any
   44694:	b	42f8c <aarch64_match_operands_constraint@@Base+0x6cc>
   44698:	ldr	w0, [x28, #16]
   4469c:	cmp	w0, #0x42
   446a0:	b.eq	42c34 <aarch64_match_operands_constraint@@Base+0x374>  // b.none
   446a4:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   446a8:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   446ac:	add	x1, x1, #0xa58
   446b0:	add	x0, x0, #0x250
   446b4:	mov	w2, #0x5                   	// #5
   446b8:	bl	359e0 <dcgettext@plt>
   446bc:	cbz	x24, 45214 <aarch64_match_operands_constraint@@Base+0x2954>
   446c0:	mov	w1, #0x9                   	// #9
   446c4:	mov	w28, #0x0                   	// #0
   446c8:	ldp	x21, x22, [sp, #32]
   446cc:	stp	w1, w25, [x24]
   446d0:	str	x0, [x24, #8]
   446d4:	ldp	x25, x26, [sp, #64]
   446d8:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   446dc:	mov	x0, #0x1f                  	// #31
   446e0:	mov	w19, w0
   446e4:	b	42c44 <aarch64_match_operands_constraint@@Base+0x384>
   446e8:	mov	w28, #0x0                   	// #0
   446ec:	ldp	x21, x22, [sp, #32]
   446f0:	ldp	x25, x26, [sp, #64]
   446f4:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   446f8:	str	w6, [sp, #112]
   446fc:	str	x4, [sp, #120]
   44700:	bl	35a00 <aarch64_sys_ins_reg_has_xt@plt>
   44704:	ldr	w6, [sp, #112]
   44708:	mov	w28, w0
   4470c:	ldp	x4, x3, [sp, #120]
   44710:	cbz	w0, 44bc8 <aarch64_match_operands_constraint@@Base+0x2308>
   44714:	ldrb	w0, [x19, #48]
   44718:	tbnz	w0, #1, 44388 <aarch64_match_operands_constraint@@Base+0x1ac8>
   4471c:	ldr	x0, [x4, #16]
   44720:	b	44370 <aarch64_match_operands_constraint@@Base+0x1ab0>
   44724:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44728:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   4472c:	add	x1, x1, #0x988
   44730:	add	x0, x0, #0x250
   44734:	mov	w2, #0x5                   	// #5
   44738:	bl	359e0 <dcgettext@plt>
   4473c:	cbz	x24, 44c9c <aarch64_match_operands_constraint@@Base+0x23dc>
   44740:	mov	w1, #0x9                   	// #9
   44744:	ldp	x21, x22, [sp, #32]
   44748:	stp	w1, w25, [x24]
   4474c:	str	x0, [x24, #8]
   44750:	ldp	x25, x26, [sp, #64]
   44754:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44758:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   4475c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   44760:	add	x1, x1, #0x170
   44764:	add	x0, x0, #0x250
   44768:	mov	w2, #0x5                   	// #5
   4476c:	sub	w22, w22, #0x2
   44770:	bl	359e0 <dcgettext@plt>
   44774:	cbz	x24, 44c8c <aarch64_match_operands_constraint@@Base+0x23cc>
   44778:	mov	w1, #0x2                   	// #2
   4477c:	mov	w28, #0x0                   	// #0
   44780:	ldp	x25, x26, [sp, #64]
   44784:	stp	w1, w22, [x24]
   44788:	str	x0, [x24, #8]
   4478c:	ldp	x21, x22, [sp, #32]
   44790:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44794:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44798:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   4479c:	add	x1, x1, #0xa40
   447a0:	add	x0, x0, #0x250
   447a4:	mov	w2, #0x5                   	// #5
   447a8:	bl	359e0 <dcgettext@plt>
   447ac:	cbz	x24, 44d70 <aarch64_match_operands_constraint@@Base+0x24b0>
   447b0:	mov	w1, #0x9                   	// #9
   447b4:	mov	w28, #0x0                   	// #0
   447b8:	ldp	x21, x22, [sp, #32]
   447bc:	stp	w1, w25, [x24]
   447c0:	str	x0, [x24, #8]
   447c4:	ldp	x25, x26, [sp, #64]
   447c8:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   447cc:	mov	w28, #0x0                   	// #0
   447d0:	ldp	x21, x22, [sp, #32]
   447d4:	ldp	x25, x26, [sp, #64]
   447d8:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   447dc:	cbz	w7, 42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   447e0:	ldr	w0, [x23, #32]
   447e4:	cmp	w0, #0xf
   447e8:	b.eq	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.none
   447ec:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   447f0:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   447f4:	add	x1, x1, #0x448
   447f8:	add	x0, x0, #0x250
   447fc:	mov	w2, #0x5                   	// #5
   44800:	bl	359e0 <dcgettext@plt>
   44804:	cbz	x24, 45024 <aarch64_match_operands_constraint@@Base+0x2764>
   44808:	mov	w1, #0x9                   	// #9
   4480c:	mov	w28, #0x0                   	// #0
   44810:	ldp	x21, x22, [sp, #32]
   44814:	stp	w1, w25, [x24]
   44818:	str	x0, [x24, #8]
   4481c:	ldp	x25, x26, [sp, #64]
   44820:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44824:	cmp	w6, #0x2
   44828:	b.ne	42bbc <aarch64_match_operands_constraint@@Base+0x2fc>  // b.any
   4482c:	ldr	w0, [x23, #32]
   44830:	and	w1, w0, #0xfffffff7
   44834:	cmp	w1, #0x5
   44838:	ccmp	w0, #0x9, #0x4, ne  // ne = any
   4483c:	b.eq	42bbc <aarch64_match_operands_constraint@@Base+0x2fc>  // b.none
   44840:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44844:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   44848:	add	x1, x1, #0xa28
   4484c:	add	x0, x0, #0x250
   44850:	mov	w2, #0x5                   	// #5
   44854:	bl	359e0 <dcgettext@plt>
   44858:	cbz	x24, 459e0 <aarch64_match_operands_constraint@@Base+0x3120>
   4485c:	mov	w1, #0x9                   	// #9
   44860:	mov	w28, #0x0                   	// #0
   44864:	ldp	x21, x22, [sp, #32]
   44868:	stp	w1, w25, [x24]
   4486c:	str	x0, [x24, #8]
   44870:	ldp	x25, x26, [sp, #64]
   44874:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44878:	mov	w28, #0x0                   	// #0
   4487c:	ldp	x21, x22, [sp, #32]
   44880:	ldp	x25, x26, [sp, #64]
   44884:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   44888:	mov	w28, #0x0                   	// #0
   4488c:	ldp	x21, x22, [sp, #32]
   44890:	ldp	x25, x26, [sp, #64]
   44894:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   44898:	mov	w28, #0x0                   	// #0
   4489c:	ldp	x21, x22, [sp, #32]
   448a0:	ldp	x25, x26, [sp, #64]
   448a4:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   448a8:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   448ac:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   448b0:	add	x1, x1, #0x278
   448b4:	mov	w2, #0x5                   	// #5
   448b8:	add	x0, x0, #0x250
   448bc:	bl	359e0 <dcgettext@plt>
   448c0:	b	42ad8 <aarch64_match_operands_constraint@@Base+0x218>
   448c4:	mov	w28, #0x0                   	// #0
   448c8:	ldp	x21, x22, [sp, #32]
   448cc:	ldp	x25, x26, [sp, #64]
   448d0:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   448d4:	mov	w28, #0x0                   	// #0
   448d8:	ldp	x21, x22, [sp, #32]
   448dc:	ldp	x25, x26, [sp, #64]
   448e0:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   448e4:	cbz	x24, 4510c <aarch64_match_operands_constraint@@Base+0x284c>
   448e8:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   448ec:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   448f0:	add	x1, x1, #0x338
   448f4:	add	x0, x0, #0x250
   448f8:	mov	w2, #0x5                   	// #5
   448fc:	str	w5, [sp, #104]
   44900:	bl	359e0 <dcgettext@plt>
   44904:	mov	w28, #0x0                   	// #0
   44908:	ldr	w5, [sp, #104]
   4490c:	mov	w1, #0x6                   	// #6
   44910:	ldp	x21, x22, [sp, #32]
   44914:	stp	w1, w25, [x24]
   44918:	str	x0, [x24, #8]
   4491c:	stp	w5, w19, [x24, #16]
   44920:	ldp	x25, x26, [sp, #64]
   44924:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44928:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   4492c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   44930:	add	x1, x1, #0x2d8
   44934:	add	x0, x0, #0x250
   44938:	mov	w2, #0x5                   	// #5
   4493c:	str	w9, [sp, #104]
   44940:	bl	359e0 <dcgettext@plt>
   44944:	cbz	x24, 45244 <aarch64_match_operands_constraint@@Base+0x2984>
   44948:	ldr	w9, [sp, #104]
   4494c:	mov	w28, #0x0                   	// #0
   44950:	ldp	x21, x22, [sp, #32]
   44954:	stp	w9, w25, [x24]
   44958:	str	x0, [x24, #8]
   4495c:	ldp	x25, x26, [sp, #64]
   44960:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44964:	cbz	x24, 4514c <aarch64_match_operands_constraint@@Base+0x288c>
   44968:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   4496c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   44970:	add	x1, x1, #0x338
   44974:	add	x0, x0, #0x250
   44978:	mov	w2, #0x5                   	// #5
   4497c:	bl	359e0 <dcgettext@plt>
   44980:	mov	w1, #0x6                   	// #6
   44984:	mov	w28, #0x0                   	// #0
   44988:	ldp	x21, x22, [sp, #32]
   4498c:	stp	w1, w25, [x24]
   44990:	str	x0, [x24, #8]
   44994:	stp	wzr, w19, [x24, #16]
   44998:	ldp	x25, x26, [sp, #64]
   4499c:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   449a0:	cmp	w2, #0x23
   449a4:	b.eq	44f7c <aarch64_match_operands_constraint@@Base+0x26bc>  // b.none
   449a8:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   449ac:	add	x3, x3, #0x9c8
   449b0:	adrp	x1, 58000 <xexit@@Base+0xe08>
   449b4:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   449b8:	add	x3, x3, #0x1b0
   449bc:	add	x1, x1, #0x7d8
   449c0:	add	x0, x0, #0x4b0
   449c4:	mov	w2, #0x85b                 	// #2139
   449c8:	bl	35ac0 <__assert_fail@plt>
   449cc:	cbz	w6, 44fe4 <aarch64_match_operands_constraint@@Base+0x2724>
   449d0:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   449d4:	add	x3, x3, #0x9c8
   449d8:	adrp	x1, 58000 <xexit@@Base+0xe08>
   449dc:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   449e0:	add	x3, x3, #0x1b0
   449e4:	add	x1, x1, #0x7d8
   449e8:	add	x0, x0, #0x4b0
   449ec:	mov	w2, #0x913                 	// #2323
   449f0:	bl	35ac0 <__assert_fail@plt>
   449f4:	mov	w28, #0x0                   	// #0
   449f8:	ldp	x21, x22, [sp, #32]
   449fc:	ldp	x25, x26, [sp, #64]
   44a00:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   44a04:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44a08:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   44a0c:	add	x1, x1, #0x9a8
   44a10:	add	x0, x0, #0x250
   44a14:	mov	w2, #0x5                   	// #5
   44a18:	bl	359e0 <dcgettext@plt>
   44a1c:	cbz	x24, 452e4 <aarch64_match_operands_constraint@@Base+0x2a24>
   44a20:	mov	w1, #0x9                   	// #9
   44a24:	ldp	x21, x22, [sp, #32]
   44a28:	stp	w1, w25, [x24]
   44a2c:	str	x0, [x24, #8]
   44a30:	ldp	x25, x26, [sp, #64]
   44a34:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44a38:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44a3c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   44a40:	add	x1, x1, #0x448
   44a44:	add	x0, x0, #0x250
   44a48:	mov	w2, #0x5                   	// #5
   44a4c:	bl	359e0 <dcgettext@plt>
   44a50:	cbz	x24, 45234 <aarch64_match_operands_constraint@@Base+0x2974>
   44a54:	mov	w1, #0x9                   	// #9
   44a58:	mov	w28, #0x0                   	// #0
   44a5c:	ldp	x21, x22, [sp, #32]
   44a60:	stp	w1, w25, [x24]
   44a64:	str	x0, [x24, #8]
   44a68:	ldp	x25, x26, [sp, #64]
   44a6c:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44a70:	mov	w28, #0x0                   	// #0
   44a74:	ldp	x21, x22, [sp, #32]
   44a78:	ldp	x25, x26, [sp, #64]
   44a7c:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   44a80:	mov	w28, #0x0                   	// #0
   44a84:	ldp	x21, x22, [sp, #32]
   44a88:	ldp	x25, x26, [sp, #64]
   44a8c:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   44a90:	sdiv	x1, x0, x6
   44a94:	msub	x0, x1, x6, x0
   44a98:	cbz	x0, 42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   44a9c:	cbz	x24, 45670 <aarch64_match_operands_constraint@@Base+0x2db0>
   44aa0:	mov	w0, #0x7                   	// #7
   44aa4:	mov	w28, #0x0                   	// #0
   44aa8:	ldp	x21, x22, [sp, #32]
   44aac:	stp	w0, w25, [x24]
   44ab0:	str	xzr, [x24, #8]
   44ab4:	str	w2, [x24, #16]
   44ab8:	ldp	x25, x26, [sp, #64]
   44abc:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44ac0:	ldr	w1, [x28, #32]
   44ac4:	ldurb	w0, [x23, #-52]
   44ac8:	cmp	w1, #0x25
   44acc:	b.ne	4515c <aarch64_match_operands_constraint@@Base+0x289c>  // b.any
   44ad0:	ldr	x1, [x28, #120]
   44ad4:	ubfx	w1, w1, #24, #3
   44ad8:	cmp	w1, #0x1
   44adc:	b.eq	44ae8 <aarch64_match_operands_constraint@@Base+0x2228>  // b.none
   44ae0:	ldurb	w25, [x23, #-40]
   44ae4:	ubfx	x25, x25, #5, #3
   44ae8:	stp	x4, x3, [sp, #112]
   44aec:	bl	35680 <aarch64_get_qualifier_esize@plt>
   44af0:	and	w0, w0, #0xff
   44af4:	ldp	x4, x3, [sp, #112]
   44af8:	mul	w0, w0, w25
   44afc:	ldr	w1, [x23, #20]
   44b00:	cmp	w1, w0
   44b04:	b.eq	42bbc <aarch64_match_operands_constraint@@Base+0x2fc>  // b.none
   44b08:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44b0c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   44b10:	add	x1, x1, #0x3a0
   44b14:	add	x0, x0, #0x250
   44b18:	mov	w2, #0x5                   	// #5
   44b1c:	bl	359e0 <dcgettext@plt>
   44b20:	cbz	x24, 45dc0 <aarch64_match_operands_constraint@@Base+0x3500>
   44b24:	mov	x1, #0x9                   	// #9
   44b28:	mov	w28, #0x0                   	// #0
   44b2c:	movk	x1, #0x1, lsl #32
   44b30:	stp	x1, x0, [x24]
   44b34:	ldp	x21, x22, [sp, #32]
   44b38:	ldp	x25, x26, [sp, #64]
   44b3c:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44b40:	cmn	x1, #0x100
   44b44:	b.lt	437e8 <aarch64_match_operands_constraint@@Base+0xf28>  // b.tstop
   44b48:	b	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   44b4c:	mov	w28, #0x0                   	// #0
   44b50:	ldp	x21, x22, [sp, #32]
   44b54:	ldp	x25, x26, [sp, #64]
   44b58:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   44b5c:	cbz	w1, 42d3c <aarch64_match_operands_constraint@@Base+0x47c>
   44b60:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44b64:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   44b68:	mov	w2, w28
   44b6c:	add	x1, x1, #0x798
   44b70:	add	x0, x0, #0x250
   44b74:	bl	359e0 <dcgettext@plt>
   44b78:	cbz	x24, 458b8 <aarch64_match_operands_constraint@@Base+0x2ff8>
   44b7c:	mov	w1, #0x9                   	// #9
   44b80:	mov	w28, #0x0                   	// #0
   44b84:	ldp	x21, x22, [sp, #32]
   44b88:	stp	w1, w25, [x24]
   44b8c:	str	x0, [x24, #8]
   44b90:	ldp	x25, x26, [sp, #64]
   44b94:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44b98:	mov	w28, #0x0                   	// #0
   44b9c:	ldp	x21, x22, [sp, #32]
   44ba0:	ldp	x25, x26, [sp, #64]
   44ba4:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   44ba8:	mov	w28, #0x0                   	// #0
   44bac:	ldp	x21, x22, [sp, #32]
   44bb0:	ldp	x25, x26, [sp, #64]
   44bb4:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   44bb8:	mov	w28, #0x0                   	// #0
   44bbc:	ldp	x21, x22, [sp, #32]
   44bc0:	ldp	x25, x26, [sp, #64]
   44bc4:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   44bc8:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44bcc:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   44bd0:	add	x1, x1, #0x210
   44bd4:	add	x0, x0, #0x250
   44bd8:	mov	w2, #0x5                   	// #5
   44bdc:	bl	359e0 <dcgettext@plt>
   44be0:	cbz	x24, 45608 <aarch64_match_operands_constraint@@Base+0x2d48>
   44be4:	mov	x1, #0x9                   	// #9
   44be8:	movk	x1, #0x1, lsl #32
   44bec:	stp	x1, x0, [x24]
   44bf0:	ldp	x21, x22, [sp, #32]
   44bf4:	ldp	x25, x26, [sp, #64]
   44bf8:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44bfc:	mov	w28, #0x0                   	// #0
   44c00:	ldp	x21, x22, [sp, #32]
   44c04:	ldp	x25, x26, [sp, #64]
   44c08:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   44c0c:	ldrb	w0, [x4, #4]
   44c10:	stp	x4, x3, [sp, #112]
   44c14:	bl	35680 <aarch64_get_qualifier_esize@plt>
   44c18:	and	w19, w0, #0xff
   44c1c:	ldr	x1, [x23, #40]
   44c20:	ldp	x4, x3, [sp, #112]
   44c24:	tst	x1, #0xf
   44c28:	b.ne	45474 <aarch64_match_operands_constraint@@Base+0x2bb4>  // b.any
   44c2c:	sub	w19, w19, #0x2
   44c30:	lsl	w19, w19, #3
   44c34:	tbnz	x1, #63, 45034 <aarch64_match_operands_constraint@@Base+0x2774>
   44c38:	cmp	x1, w19, sxtw
   44c3c:	b.gt	45034 <aarch64_match_operands_constraint@@Base+0x2774>
   44c40:	ldr	x0, [x23, #16]
   44c44:	tbnz	x0, #63, 456d4 <aarch64_match_operands_constraint@@Base+0x2e14>
   44c48:	mov	x1, #0xffff                	// #65535
   44c4c:	cmp	x0, x1
   44c50:	b.le	42bbc <aarch64_match_operands_constraint@@Base+0x2fc>
   44c54:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44c58:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   44c5c:	mov	w2, w25
   44c60:	add	x1, x1, #0x3f8
   44c64:	add	x0, x0, #0x250
   44c68:	bl	359e0 <dcgettext@plt>
   44c6c:	cbz	x24, 456c4 <aarch64_match_operands_constraint@@Base+0x2e04>
   44c70:	mov	x1, #0x9                   	// #9
   44c74:	mov	w28, #0x0                   	// #0
   44c78:	movk	x1, #0x1, lsl #32
   44c7c:	stp	x1, x0, [x24]
   44c80:	ldp	x21, x22, [sp, #32]
   44c84:	ldp	x25, x26, [sp, #64]
   44c88:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44c8c:	mov	w28, #0x0                   	// #0
   44c90:	ldp	x21, x22, [sp, #32]
   44c94:	ldp	x25, x26, [sp, #64]
   44c98:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   44c9c:	mov	w28, #0x0                   	// #0
   44ca0:	ldp	x21, x22, [sp, #32]
   44ca4:	ldp	x25, x26, [sp, #64]
   44ca8:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   44cac:	mov	w28, #0x0                   	// #0
   44cb0:	ldp	x21, x22, [sp, #32]
   44cb4:	ldp	x25, x26, [sp, #64]
   44cb8:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   44cbc:	ldr	x0, [sp, #104]
   44cc0:	cmp	w2, #0x10
   44cc4:	ldp	x0, x1, [x0, #-40]
   44cc8:	stp	x0, x1, [sp, #144]
   44ccc:	b.hi	45bf0 <aarch64_match_operands_constraint@@Base+0x3330>  // b.pmore
   44cd0:	sub	w2, w2, #0x1
   44cd4:	ldrb	w0, [x26, w2, uxtw]
   44cd8:	cmp	w0, #0xff
   44cdc:	b.eq	45bd4 <aarch64_match_operands_constraint@@Base+0x3314>  // b.none
   44ce0:	cmp	x6, w0, uxtb
   44ce4:	b.eq	434a0 <aarch64_match_operands_constraint@@Base+0xbe0>  // b.none
   44ce8:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44cec:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   44cf0:	add	x1, x1, #0x3c0
   44cf4:	add	x0, x0, #0x250
   44cf8:	mov	w2, #0x5                   	// #5
   44cfc:	bl	359e0 <dcgettext@plt>
   44d00:	cbz	x24, 45bc4 <aarch64_match_operands_constraint@@Base+0x3304>
   44d04:	mov	w1, #0x9                   	// #9
   44d08:	mov	w28, #0x0                   	// #0
   44d0c:	ldp	x21, x22, [sp, #32]
   44d10:	stp	w1, w25, [x24]
   44d14:	str	x0, [x24, #8]
   44d18:	ldp	x25, x26, [sp, #64]
   44d1c:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44d20:	tst	w6, #0xff
   44d24:	b.ne	42d3c <aarch64_match_operands_constraint@@Base+0x47c>  // b.any
   44d28:	mov	x1, #0x100                 	// #256
   44d2c:	lsr	x0, x0, #8
   44d30:	sdiv	x6, x6, x1
   44d34:	b	42d3c <aarch64_match_operands_constraint@@Base+0x47c>
   44d38:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44d3c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   44d40:	add	x1, x1, #0x228
   44d44:	add	x0, x0, #0x250
   44d48:	mov	w2, #0x5                   	// #5
   44d4c:	bl	359e0 <dcgettext@plt>
   44d50:	cbz	x24, 45650 <aarch64_match_operands_constraint@@Base+0x2d90>
   44d54:	mov	x1, #0x9                   	// #9
   44d58:	mov	w28, #0x0                   	// #0
   44d5c:	movk	x1, #0x1, lsl #32
   44d60:	stp	x1, x0, [x24]
   44d64:	ldp	x21, x22, [sp, #32]
   44d68:	ldp	x25, x26, [sp, #64]
   44d6c:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44d70:	mov	w28, #0x0                   	// #0
   44d74:	ldp	x21, x22, [sp, #32]
   44d78:	ldp	x25, x26, [sp, #64]
   44d7c:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   44d80:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44d84:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   44d88:	add	x1, x1, #0x3f8
   44d8c:	add	x0, x0, #0x250
   44d90:	mov	w2, #0x5                   	// #5
   44d94:	bl	359e0 <dcgettext@plt>
   44d98:	cbz	x24, 45680 <aarch64_match_operands_constraint@@Base+0x2dc0>
   44d9c:	mov	w1, #0x9                   	// #9
   44da0:	ldp	x21, x22, [sp, #32]
   44da4:	stp	w1, w25, [x24]
   44da8:	str	x0, [x24, #8]
   44dac:	ldp	x25, x26, [sp, #64]
   44db0:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44db4:	tst	x1, #0xf
   44db8:	b.eq	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.none
   44dbc:	cbz	x24, 45a24 <aarch64_match_operands_constraint@@Base+0x3164>
   44dc0:	mov	w1, #0x7                   	// #7
   44dc4:	mov	w0, #0x10                  	// #16
   44dc8:	mov	w28, #0x0                   	// #0
   44dcc:	ldp	x21, x22, [sp, #32]
   44dd0:	stp	w1, w25, [x24]
   44dd4:	str	xzr, [x24, #8]
   44dd8:	str	w0, [x24, #16]
   44ddc:	ldp	x25, x26, [sp, #64]
   44de0:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44de4:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44de8:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   44dec:	add	x1, x1, #0x7e8
   44df0:	add	x0, x0, #0x250
   44df4:	mov	w2, #0x5                   	// #5
   44df8:	bl	359e0 <dcgettext@plt>
   44dfc:	cbz	x24, 453bc <aarch64_match_operands_constraint@@Base+0x2afc>
   44e00:	mov	w1, #0x9                   	// #9
   44e04:	mov	w28, #0x0                   	// #0
   44e08:	ldp	x21, x22, [sp, #32]
   44e0c:	stp	w1, w25, [x24]
   44e10:	str	x0, [x24, #8]
   44e14:	ldp	x25, x26, [sp, #64]
   44e18:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44e1c:	mov	w28, #0x0                   	// #0
   44e20:	ldp	x21, x22, [sp, #32]
   44e24:	ldp	x25, x26, [sp, #64]
   44e28:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   44e2c:	tst	x1, #0x7
   44e30:	b.eq	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.none
   44e34:	cbz	x24, 45ae0 <aarch64_match_operands_constraint@@Base+0x3220>
   44e38:	mov	w1, #0x7                   	// #7
   44e3c:	mov	w0, #0x8                   	// #8
   44e40:	mov	w28, #0x0                   	// #0
   44e44:	ldp	x21, x22, [sp, #32]
   44e48:	stp	w1, w25, [x24]
   44e4c:	str	xzr, [x24, #8]
   44e50:	str	w0, [x24, #16]
   44e54:	ldp	x25, x26, [sp, #64]
   44e58:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44e5c:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44e60:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   44e64:	add	x1, x1, #0x9c0
   44e68:	add	x0, x0, #0x250
   44e6c:	bl	359e0 <dcgettext@plt>
   44e70:	cbz	x24, 42da0 <aarch64_match_operands_constraint@@Base+0x4e0>
   44e74:	mov	w1, #0x9                   	// #9
   44e78:	ldp	x21, x22, [sp, #32]
   44e7c:	stp	w1, w25, [x24]
   44e80:	str	x0, [x24, #8]
   44e84:	ldp	x25, x26, [sp, #64]
   44e88:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44e8c:	tst	x1, #0xf
   44e90:	b.eq	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.none
   44e94:	cbz	x24, 457cc <aarch64_match_operands_constraint@@Base+0x2f0c>
   44e98:	mov	w1, #0x7                   	// #7
   44e9c:	mov	w0, #0x10                  	// #16
   44ea0:	mov	w28, #0x0                   	// #0
   44ea4:	ldp	x21, x22, [sp, #32]
   44ea8:	stp	w1, w25, [x24]
   44eac:	str	xzr, [x24, #8]
   44eb0:	str	w0, [x24, #16]
   44eb4:	ldp	x25, x26, [sp, #64]
   44eb8:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44ebc:	mov	w28, #0x0                   	// #0
   44ec0:	ldp	x21, x22, [sp, #32]
   44ec4:	ldp	x25, x26, [sp, #64]
   44ec8:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   44ecc:	ldr	w0, [x23, #32]
   44ed0:	cmp	w0, #0x1
   44ed4:	b.eq	455c0 <aarch64_match_operands_constraint@@Base+0x2d00>  // b.none
   44ed8:	cmp	w0, #0x5
   44edc:	b.ne	45584 <aarch64_match_operands_constraint@@Base+0x2cc4>  // b.any
   44ee0:	ldrb	w0, [x4, #4]
   44ee4:	stp	x4, x3, [sp, #112]
   44ee8:	bl	35680 <aarch64_get_qualifier_esize@plt>
   44eec:	ubfiz	w19, w0, #3, #8
   44ef0:	ldr	x1, [x23, #40]
   44ef4:	sub	w19, w19, #0x8
   44ef8:	tbnz	x1, #63, 45548 <aarch64_match_operands_constraint@@Base+0x2c88>
   44efc:	cmp	x1, w19, sxtw
   44f00:	ldp	x4, x3, [sp, #112]
   44f04:	b.gt	45548 <aarch64_match_operands_constraint@@Base+0x2c88>
   44f08:	tst	x1, #0x7
   44f0c:	b.eq	42bbc <aarch64_match_operands_constraint@@Base+0x2fc>  // b.none
   44f10:	cbz	x24, 457dc <aarch64_match_operands_constraint@@Base+0x2f1c>
   44f14:	mov	x1, #0x7                   	// #7
   44f18:	mov	w0, #0x8                   	// #8
   44f1c:	movk	x1, #0x1, lsl #32
   44f20:	stp	x1, xzr, [x24]
   44f24:	mov	w28, #0x0                   	// #0
   44f28:	str	w0, [x24, #16]
   44f2c:	ldp	x21, x22, [sp, #32]
   44f30:	ldp	x25, x26, [sp, #64]
   44f34:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44f38:	ldr	w0, [x23, #32]
   44f3c:	cmp	w0, #0x5
   44f40:	b.eq	43bf4 <aarch64_match_operands_constraint@@Base+0x1334>  // b.none
   44f44:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44f48:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   44f4c:	add	x1, x1, #0x558
   44f50:	add	x0, x0, #0x250
   44f54:	mov	w2, #0x5                   	// #5
   44f58:	bl	359e0 <dcgettext@plt>
   44f5c:	cbz	x24, 45764 <aarch64_match_operands_constraint@@Base+0x2ea4>
   44f60:	mov	w1, #0x9                   	// #9
   44f64:	mov	w28, #0x0                   	// #0
   44f68:	ldp	x21, x22, [sp, #32]
   44f6c:	stp	w1, w25, [x24]
   44f70:	str	x0, [x24, #8]
   44f74:	ldp	x25, x26, [sp, #64]
   44f78:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44f7c:	mov	x2, #0x0                   	// #0
   44f80:	stp	x4, x3, [sp, #112]
   44f84:	bl	35400 <aarch64_logical_immediate_p@plt>
   44f88:	mov	w28, w0
   44f8c:	cbnz	w0, 43d14 <aarch64_match_operands_constraint@@Base+0x1454>
   44f90:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44f94:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   44f98:	add	x1, x1, #0x3f8
   44f9c:	add	x0, x0, #0x250
   44fa0:	mov	w2, #0x5                   	// #5
   44fa4:	bl	359e0 <dcgettext@plt>
   44fa8:	cbz	x24, 45a8c <aarch64_match_operands_constraint@@Base+0x31cc>
   44fac:	mov	x1, #0x9                   	// #9
   44fb0:	movk	x1, #0x1, lsl #32
   44fb4:	stp	x1, x0, [x24]
   44fb8:	ldp	x21, x22, [sp, #32]
   44fbc:	ldp	x25, x26, [sp, #64]
   44fc0:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   44fc4:	mov	w28, #0x0                   	// #0
   44fc8:	ldp	x21, x22, [sp, #32]
   44fcc:	ldp	x25, x26, [sp, #64]
   44fd0:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   44fd4:	mov	w28, #0x0                   	// #0
   44fd8:	ldp	x21, x22, [sp, #32]
   44fdc:	ldp	x25, x26, [sp, #64]
   44fe0:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   44fe4:	ldr	w0, [x23, #32]
   44fe8:	cbz	w0, 43bf4 <aarch64_match_operands_constraint@@Base+0x1334>
   44fec:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   44ff0:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   44ff4:	add	x1, x1, #0x718
   44ff8:	add	x0, x0, #0x250
   44ffc:	mov	w2, #0x5                   	// #5
   45000:	bl	359e0 <dcgettext@plt>
   45004:	cbz	x24, 45830 <aarch64_match_operands_constraint@@Base+0x2f70>
   45008:	mov	w1, #0x9                   	// #9
   4500c:	mov	w28, #0x0                   	// #0
   45010:	ldp	x21, x22, [sp, #32]
   45014:	stp	w1, w25, [x24]
   45018:	str	x0, [x24, #8]
   4501c:	ldp	x25, x26, [sp, #64]
   45020:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   45024:	mov	w28, #0x0                   	// #0
   45028:	ldp	x21, x22, [sp, #32]
   4502c:	ldp	x25, x26, [sp, #64]
   45030:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45034:	cbz	x24, 45464 <aarch64_match_operands_constraint@@Base+0x2ba4>
   45038:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   4503c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   45040:	add	x1, x1, #0x3c8
   45044:	add	x0, x0, #0x250
   45048:	mov	w2, #0x5                   	// #5
   4504c:	bl	359e0 <dcgettext@plt>
   45050:	mov	x1, #0x6                   	// #6
   45054:	mov	w28, #0x0                   	// #0
   45058:	movk	x1, #0x1, lsl #32
   4505c:	stp	x1, x0, [x24]
   45060:	stp	wzr, w19, [x24, #16]
   45064:	ldp	x21, x22, [sp, #32]
   45068:	ldp	x25, x26, [sp, #64]
   4506c:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   45070:	tst	x9, #0xf
   45074:	b.eq	42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>  // b.none
   45078:	cbz	x24, 456b4 <aarch64_match_operands_constraint@@Base+0x2df4>
   4507c:	mov	w1, #0x7                   	// #7
   45080:	mov	w0, #0x10                  	// #16
   45084:	mov	w28, #0x0                   	// #0
   45088:	ldp	x21, x22, [sp, #32]
   4508c:	stp	w1, w25, [x24]
   45090:	str	xzr, [x24, #8]
   45094:	str	w0, [x24, #16]
   45098:	ldp	x25, x26, [sp, #64]
   4509c:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   450a0:	mov	w28, #0x0                   	// #0
   450a4:	ldp	x21, x22, [sp, #32]
   450a8:	ldp	x25, x26, [sp, #64]
   450ac:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   450b0:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   450b4:	add	x3, x3, #0x9c8
   450b8:	adrp	x1, 58000 <xexit@@Base+0xe08>
   450bc:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   450c0:	add	x3, x3, #0x1b0
   450c4:	add	x1, x1, #0x7d8
   450c8:	add	x0, x0, #0x118
   450cc:	mov	w2, #0x5b3                 	// #1459
   450d0:	bl	35ac0 <__assert_fail@plt>
   450d4:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   450d8:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   450dc:	mov	w2, w28
   450e0:	add	x1, x1, #0x7c8
   450e4:	add	x0, x0, #0x250
   450e8:	bl	359e0 <dcgettext@plt>
   450ec:	cbz	x24, 45c30 <aarch64_match_operands_constraint@@Base+0x3370>
   450f0:	mov	w1, #0x9                   	// #9
   450f4:	mov	w28, #0x0                   	// #0
   450f8:	ldp	x21, x22, [sp, #32]
   450fc:	stp	w1, w25, [x24]
   45100:	str	x0, [x24, #8]
   45104:	ldp	x25, x26, [sp, #64]
   45108:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   4510c:	mov	w28, #0x0                   	// #0
   45110:	ldp	x21, x22, [sp, #32]
   45114:	ldp	x25, x26, [sp, #64]
   45118:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   4511c:	mov	w28, #0x0                   	// #0
   45120:	ldp	x21, x22, [sp, #32]
   45124:	ldp	x25, x26, [sp, #64]
   45128:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   4512c:	mov	w28, #0x0                   	// #0
   45130:	ldp	x21, x22, [sp, #32]
   45134:	ldp	x25, x26, [sp, #64]
   45138:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   4513c:	mov	w28, #0x0                   	// #0
   45140:	ldp	x21, x22, [sp, #32]
   45144:	ldp	x25, x26, [sp, #64]
   45148:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   4514c:	mov	w28, #0x0                   	// #0
   45150:	ldp	x21, x22, [sp, #32]
   45154:	ldp	x25, x26, [sp, #64]
   45158:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   4515c:	ldurb	w19, [x23, #-40]
   45160:	stp	x4, x3, [sp, #112]
   45164:	bl	35680 <aarch64_get_qualifier_esize@plt>
   45168:	ubfx	x25, x19, #5, #3
   4516c:	and	w19, w0, #0xff
   45170:	ldurb	w0, [x23, #-52]
   45174:	mul	w19, w19, w25
   45178:	bl	358f0 <aarch64_get_qualifier_nelem@plt>
   4517c:	and	w0, w0, #0xff
   45180:	ldp	x4, x3, [sp, #112]
   45184:	mul	w0, w0, w19
   45188:	b	44afc <aarch64_match_operands_constraint@@Base+0x223c>
   4518c:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   45190:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   45194:	add	x1, x1, #0x558
   45198:	add	x0, x0, #0x250
   4519c:	mov	w2, #0x5                   	// #5
   451a0:	bl	359e0 <dcgettext@plt>
   451a4:	cbz	x24, 45410 <aarch64_match_operands_constraint@@Base+0x2b50>
   451a8:	mov	w1, #0x9                   	// #9
   451ac:	mov	w28, #0x0                   	// #0
   451b0:	ldp	x21, x22, [sp, #32]
   451b4:	stp	w1, w25, [x24]
   451b8:	str	x0, [x24, #8]
   451bc:	ldp	x25, x26, [sp, #64]
   451c0:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   451c4:	mov	w28, #0x0                   	// #0
   451c8:	ldp	x21, x22, [sp, #32]
   451cc:	ldp	x25, x26, [sp, #64]
   451d0:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   451d4:	mov	w28, #0x0                   	// #0
   451d8:	ldp	x21, x22, [sp, #32]
   451dc:	ldp	x25, x26, [sp, #64]
   451e0:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   451e4:	sdiv	x0, x6, x8
   451e8:	msub	x6, x0, x8, x6
   451ec:	cbz	x6, 42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   451f0:	cbz	x24, 459f0 <aarch64_match_operands_constraint@@Base+0x3130>
   451f4:	mov	w0, #0x7                   	// #7
   451f8:	mov	w28, #0x0                   	// #0
   451fc:	ldp	x21, x22, [sp, #32]
   45200:	stp	w0, w25, [x24]
   45204:	str	xzr, [x24, #8]
   45208:	str	w8, [x24, #16]
   4520c:	ldp	x25, x26, [sp, #64]
   45210:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   45214:	mov	w28, #0x0                   	// #0
   45218:	ldp	x21, x22, [sp, #32]
   4521c:	ldp	x25, x26, [sp, #64]
   45220:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45224:	mov	w28, #0x0                   	// #0
   45228:	ldp	x21, x22, [sp, #32]
   4522c:	ldp	x25, x26, [sp, #64]
   45230:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45234:	mov	w28, #0x0                   	// #0
   45238:	ldp	x21, x22, [sp, #32]
   4523c:	ldp	x25, x26, [sp, #64]
   45240:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45244:	mov	w28, #0x0                   	// #0
   45248:	ldp	x21, x22, [sp, #32]
   4524c:	ldp	x25, x26, [sp, #64]
   45250:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45254:	cbz	x24, 45b14 <aarch64_match_operands_constraint@@Base+0x3254>
   45258:	mov	w1, #0x7                   	// #7
   4525c:	mov	w0, #0x4                   	// #4
   45260:	mov	w28, #0x0                   	// #0
   45264:	ldp	x21, x22, [sp, #32]
   45268:	stp	w1, w25, [x24]
   4526c:	str	xzr, [x24, #8]
   45270:	str	w0, [x24, #16]
   45274:	ldp	x25, x26, [sp, #64]
   45278:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   4527c:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   45280:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   45284:	add	x1, x1, #0x508
   45288:	add	x0, x0, #0x250
   4528c:	mov	w2, #0x5                   	// #5
   45290:	bl	359e0 <dcgettext@plt>
   45294:	cbz	x24, 45dd0 <aarch64_match_operands_constraint@@Base+0x3510>
   45298:	mov	w1, #0x9                   	// #9
   4529c:	mov	w28, #0x0                   	// #0
   452a0:	ldp	x21, x22, [sp, #32]
   452a4:	stp	w1, w25, [x24]
   452a8:	str	x0, [x24, #8]
   452ac:	ldp	x25, x26, [sp, #64]
   452b0:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   452b4:	mov	w28, #0x0                   	// #0
   452b8:	ldp	x21, x22, [sp, #32]
   452bc:	ldp	x25, x26, [sp, #64]
   452c0:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   452c4:	mov	w28, #0x0                   	// #0
   452c8:	ldp	x21, x22, [sp, #32]
   452cc:	ldp	x25, x26, [sp, #64]
   452d0:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   452d4:	mov	w28, #0x0                   	// #0
   452d8:	ldp	x21, x22, [sp, #32]
   452dc:	ldp	x25, x26, [sp, #64]
   452e0:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   452e4:	mov	w28, #0x0                   	// #0
   452e8:	ldp	x21, x22, [sp, #32]
   452ec:	ldp	x25, x26, [sp, #64]
   452f0:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   452f4:	mov	w28, #0x0                   	// #0
   452f8:	ldp	x21, x22, [sp, #32]
   452fc:	ldp	x25, x26, [sp, #64]
   45300:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45304:	mov	w28, #0x0                   	// #0
   45308:	ldp	x21, x22, [sp, #32]
   4530c:	ldp	x25, x26, [sp, #64]
   45310:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45314:	ldr	w0, [x23, #32]
   45318:	cbz	w0, 42bb4 <aarch64_match_operands_constraint@@Base+0x2f4>
   4531c:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   45320:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   45324:	add	x1, x1, #0x558
   45328:	add	x0, x0, #0x250
   4532c:	mov	w2, #0x5                   	// #5
   45330:	bl	359e0 <dcgettext@plt>
   45334:	cbz	x24, 4599c <aarch64_match_operands_constraint@@Base+0x30dc>
   45338:	mov	w1, #0x9                   	// #9
   4533c:	mov	w28, #0x0                   	// #0
   45340:	ldp	x21, x22, [sp, #32]
   45344:	stp	w1, w25, [x24]
   45348:	str	x0, [x24, #8]
   4534c:	ldp	x25, x26, [sp, #64]
   45350:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   45354:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   45358:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   4535c:	add	x1, x1, #0x770
   45360:	add	x0, x0, #0x250
   45364:	mov	w2, #0x5                   	// #5
   45368:	bl	359e0 <dcgettext@plt>
   4536c:	cbz	x24, 45df0 <aarch64_match_operands_constraint@@Base+0x3530>
   45370:	mov	w1, #0x9                   	// #9
   45374:	mov	w28, #0x0                   	// #0
   45378:	ldp	x21, x22, [sp, #32]
   4537c:	stp	w1, w25, [x24]
   45380:	str	x0, [x24, #8]
   45384:	ldp	x25, x26, [sp, #64]
   45388:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   4538c:	mov	w28, #0x0                   	// #0
   45390:	ldp	x21, x22, [sp, #32]
   45394:	ldp	x25, x26, [sp, #64]
   45398:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   4539c:	mov	w28, #0x0                   	// #0
   453a0:	ldp	x21, x22, [sp, #32]
   453a4:	ldp	x25, x26, [sp, #64]
   453a8:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   453ac:	mov	w28, #0x0                   	// #0
   453b0:	ldp	x21, x22, [sp, #32]
   453b4:	ldp	x25, x26, [sp, #64]
   453b8:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   453bc:	mov	w28, #0x0                   	// #0
   453c0:	ldp	x21, x22, [sp, #32]
   453c4:	ldp	x25, x26, [sp, #64]
   453c8:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   453cc:	mov	w28, #0x0                   	// #0
   453d0:	ldp	x21, x22, [sp, #32]
   453d4:	ldp	x25, x26, [sp, #64]
   453d8:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   453dc:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   453e0:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   453e4:	add	x1, x1, #0x3f8
   453e8:	add	x0, x0, #0x250
   453ec:	mov	w2, #0x5                   	// #5
   453f0:	bl	359e0 <dcgettext@plt>
   453f4:	cbz	x24, 45968 <aarch64_match_operands_constraint@@Base+0x30a8>
   453f8:	mov	x1, #0x9                   	// #9
   453fc:	movk	x1, #0x1, lsl #32
   45400:	stp	x1, x0, [x24]
   45404:	ldp	x21, x22, [sp, #32]
   45408:	ldp	x25, x26, [sp, #64]
   4540c:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   45410:	mov	w28, #0x0                   	// #0
   45414:	ldp	x21, x22, [sp, #32]
   45418:	ldp	x25, x26, [sp, #64]
   4541c:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45420:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   45424:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   45428:	add	x1, x1, #0x570
   4542c:	add	x0, x0, #0x250
   45430:	bl	359e0 <dcgettext@plt>
   45434:	cbz	x24, 459ac <aarch64_match_operands_constraint@@Base+0x30ec>
   45438:	mov	w1, #0x9                   	// #9
   4543c:	mov	w28, #0x0                   	// #0
   45440:	ldp	x21, x22, [sp, #32]
   45444:	stp	w1, w25, [x24]
   45448:	str	x0, [x24, #8]
   4544c:	ldp	x25, x26, [sp, #64]
   45450:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   45454:	mov	w28, #0x0                   	// #0
   45458:	ldp	x21, x22, [sp, #32]
   4545c:	ldp	x25, x26, [sp, #64]
   45460:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45464:	mov	w28, #0x0                   	// #0
   45468:	ldp	x21, x22, [sp, #32]
   4546c:	ldp	x25, x26, [sp, #64]
   45470:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45474:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   45478:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   4547c:	mov	w2, w25
   45480:	add	x1, x1, #0x5c0
   45484:	add	x0, x0, #0x250
   45488:	bl	359e0 <dcgettext@plt>
   4548c:	cbz	x24, 45aac <aarch64_match_operands_constraint@@Base+0x31ec>
   45490:	mov	x1, #0x9                   	// #9
   45494:	mov	w28, #0x0                   	// #0
   45498:	movk	x1, #0x1, lsl #32
   4549c:	stp	x1, x0, [x24]
   454a0:	ldp	x21, x22, [sp, #32]
   454a4:	ldp	x25, x26, [sp, #64]
   454a8:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   454ac:	mov	w28, #0x0                   	// #0
   454b0:	ldp	x21, x22, [sp, #32]
   454b4:	ldp	x25, x26, [sp, #64]
   454b8:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   454bc:	mov	w28, #0x0                   	// #0
   454c0:	ldp	x21, x22, [sp, #32]
   454c4:	ldp	x25, x26, [sp, #64]
   454c8:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   454cc:	mov	w28, #0x0                   	// #0
   454d0:	ldp	x21, x22, [sp, #32]
   454d4:	ldp	x25, x26, [sp, #64]
   454d8:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   454dc:	mov	w28, #0x0                   	// #0
   454e0:	ldp	x21, x22, [sp, #32]
   454e4:	ldp	x25, x26, [sp, #64]
   454e8:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   454ec:	ldr	x0, [x23, #16]
   454f0:	stp	x4, x3, [sp, #112]
   454f4:	bl	35760 <aarch64_shrink_expanded_imm8@plt>
   454f8:	ldp	x4, x3, [sp, #112]
   454fc:	tbz	w0, #31, 44ecc <aarch64_match_operands_constraint@@Base+0x260c>
   45500:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   45504:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   45508:	add	x1, x1, #0x730
   4550c:	add	x0, x0, #0x250
   45510:	mov	w2, #0x5                   	// #5
   45514:	bl	359e0 <dcgettext@plt>
   45518:	cbz	x24, 45884 <aarch64_match_operands_constraint@@Base+0x2fc4>
   4551c:	mov	x1, #0x9                   	// #9
   45520:	mov	w28, #0x0                   	// #0
   45524:	movk	x1, #0x1, lsl #32
   45528:	stp	x1, x0, [x24]
   4552c:	ldp	x21, x22, [sp, #32]
   45530:	ldp	x25, x26, [sp, #64]
   45534:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   45538:	mov	w28, #0x0                   	// #0
   4553c:	ldp	x21, x22, [sp, #32]
   45540:	ldp	x25, x26, [sp, #64]
   45544:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45548:	cbz	x24, 457ec <aarch64_match_operands_constraint@@Base+0x2f2c>
   4554c:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   45550:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   45554:	add	x1, x1, #0x3c8
   45558:	add	x0, x0, #0x250
   4555c:	mov	w2, #0x5                   	// #5
   45560:	bl	359e0 <dcgettext@plt>
   45564:	mov	x1, #0x6                   	// #6
   45568:	mov	w28, #0x0                   	// #0
   4556c:	movk	x1, #0x1, lsl #32
   45570:	stp	x1, x0, [x24]
   45574:	stp	wzr, w19, [x24, #16]
   45578:	ldp	x21, x22, [sp, #32]
   4557c:	ldp	x25, x26, [sp, #64]
   45580:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   45584:	cbz	w0, 42bbc <aarch64_match_operands_constraint@@Base+0x2fc>
   45588:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   4558c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   45590:	add	x1, x1, #0x558
   45594:	add	x0, x0, #0x250
   45598:	mov	w2, #0x5                   	// #5
   4559c:	bl	359e0 <dcgettext@plt>
   455a0:	cbz	x24, 457fc <aarch64_match_operands_constraint@@Base+0x2f3c>
   455a4:	mov	x1, #0x9                   	// #9
   455a8:	mov	w28, #0x0                   	// #0
   455ac:	movk	x1, #0x1, lsl #32
   455b0:	stp	x1, x0, [x24]
   455b4:	ldp	x21, x22, [sp, #32]
   455b8:	ldp	x25, x26, [sp, #64]
   455bc:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   455c0:	ldr	x0, [x23, #40]
   455c4:	sub	x0, x0, #0x8
   455c8:	tst	x0, #0xfffffffffffffff7
   455cc:	b.eq	42bbc <aarch64_match_operands_constraint@@Base+0x2fc>  // b.none
   455d0:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   455d4:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   455d8:	add	x1, x1, #0x750
   455dc:	add	x0, x0, #0x250
   455e0:	mov	w2, #0x5                   	// #5
   455e4:	bl	359e0 <dcgettext@plt>
   455e8:	cbz	x24, 45c64 <aarch64_match_operands_constraint@@Base+0x33a4>
   455ec:	mov	x1, #0x9                   	// #9
   455f0:	mov	w28, #0x0                   	// #0
   455f4:	movk	x1, #0x1, lsl #32
   455f8:	stp	x1, x0, [x24]
   455fc:	ldp	x21, x22, [sp, #32]
   45600:	ldp	x25, x26, [sp, #64]
   45604:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   45608:	mov	w28, #0x0                   	// #0
   4560c:	ldp	x21, x22, [sp, #32]
   45610:	ldp	x25, x26, [sp, #64]
   45614:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45618:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   4561c:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   45620:	add	x1, x1, #0x558
   45624:	add	x0, x0, #0x250
   45628:	mov	w2, #0x5                   	// #5
   4562c:	bl	359e0 <dcgettext@plt>
   45630:	cbz	x24, 45850 <aarch64_match_operands_constraint@@Base+0x2f90>
   45634:	mov	w1, #0x9                   	// #9
   45638:	mov	w28, #0x0                   	// #0
   4563c:	ldp	x21, x22, [sp, #32]
   45640:	stp	w1, w25, [x24]
   45644:	str	x0, [x24, #8]
   45648:	ldp	x25, x26, [sp, #64]
   4564c:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   45650:	mov	w28, #0x0                   	// #0
   45654:	ldp	x21, x22, [sp, #32]
   45658:	ldp	x25, x26, [sp, #64]
   4565c:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45660:	mov	w28, #0x0                   	// #0
   45664:	ldp	x21, x22, [sp, #32]
   45668:	ldp	x25, x26, [sp, #64]
   4566c:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45670:	mov	w28, #0x0                   	// #0
   45674:	ldp	x21, x22, [sp, #32]
   45678:	ldp	x25, x26, [sp, #64]
   4567c:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45680:	mov	w28, #0x0                   	// #0
   45684:	ldp	x21, x22, [sp, #32]
   45688:	ldp	x25, x26, [sp, #64]
   4568c:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45690:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45694:	add	x3, x3, #0x9c8
   45698:	adrp	x1, 58000 <xexit@@Base+0xe08>
   4569c:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   456a0:	add	x3, x3, #0x1b0
   456a4:	add	x1, x1, #0x7d8
   456a8:	add	x0, x0, #0x378
   456ac:	mov	w2, #0x6b3                 	// #1715
   456b0:	bl	35ac0 <__assert_fail@plt>
   456b4:	mov	w28, #0x0                   	// #0
   456b8:	ldp	x21, x22, [sp, #32]
   456bc:	ldp	x25, x26, [sp, #64]
   456c0:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   456c4:	mov	w28, #0x0                   	// #0
   456c8:	ldp	x21, x22, [sp, #32]
   456cc:	ldp	x25, x26, [sp, #64]
   456d0:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   456d4:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   456d8:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   456dc:	mov	w2, w25
   456e0:	add	x1, x1, #0x5e8
   456e4:	add	x0, x0, #0x250
   456e8:	bl	359e0 <dcgettext@plt>
   456ec:	cbz	x24, 45754 <aarch64_match_operands_constraint@@Base+0x2e94>
   456f0:	mov	x1, #0x9                   	// #9
   456f4:	mov	w28, #0x0                   	// #0
   456f8:	movk	x1, #0x1, lsl #32
   456fc:	stp	x1, x0, [x24]
   45700:	ldp	x21, x22, [sp, #32]
   45704:	ldp	x25, x26, [sp, #64]
   45708:	b	42918 <aarch64_match_operands_constraint@@Base+0x58>
   4570c:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45710:	add	x3, x3, #0x9c8
   45714:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45718:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   4571c:	add	x3, x3, #0x1f8
   45720:	add	x1, x1, #0x7d8
   45724:	add	x0, x0, #0x668
   45728:	mov	w2, #0x32a                 	// #810
   4572c:	bl	35ac0 <__assert_fail@plt>
   45730:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45734:	add	x3, x3, #0x9c8
   45738:	adrp	x1, 58000 <xexit@@Base+0xe08>
   4573c:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45740:	add	x3, x3, #0x1b0
   45744:	add	x1, x1, #0x7d8
   45748:	add	x0, x0, #0x610
   4574c:	mov	w2, #0x898                 	// #2200
   45750:	bl	35ac0 <__assert_fail@plt>
   45754:	mov	w28, #0x0                   	// #0
   45758:	ldp	x21, x22, [sp, #32]
   4575c:	ldp	x25, x26, [sp, #64]
   45760:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45764:	mov	w28, #0x0                   	// #0
   45768:	ldp	x21, x22, [sp, #32]
   4576c:	ldp	x25, x26, [sp, #64]
   45770:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45774:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45778:	add	x3, x3, #0x9c8
   4577c:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45780:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45784:	add	x3, x3, #0x1b0
   45788:	add	x1, x1, #0x7d8
   4578c:	add	x0, x0, #0x460
   45790:	mov	w2, #0x7b5                 	// #1973
   45794:	bl	35ac0 <__assert_fail@plt>
   45798:	mov	w28, #0x0                   	// #0
   4579c:	ldp	x21, x22, [sp, #32]
   457a0:	ldp	x25, x26, [sp, #64]
   457a4:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   457a8:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   457ac:	add	x3, x3, #0x9c8
   457b0:	adrp	x1, 58000 <xexit@@Base+0xe08>
   457b4:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   457b8:	add	x3, x3, #0x1b0
   457bc:	add	x1, x1, #0x7d8
   457c0:	add	x0, x0, #0x830
   457c4:	mov	w2, #0x99f                 	// #2463
   457c8:	bl	35ac0 <__assert_fail@plt>
   457cc:	mov	w28, #0x0                   	// #0
   457d0:	ldp	x21, x22, [sp, #32]
   457d4:	ldp	x25, x26, [sp, #64]
   457d8:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   457dc:	mov	w28, #0x0                   	// #0
   457e0:	ldp	x21, x22, [sp, #32]
   457e4:	ldp	x25, x26, [sp, #64]
   457e8:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   457ec:	mov	w28, #0x0                   	// #0
   457f0:	ldp	x21, x22, [sp, #32]
   457f4:	ldp	x25, x26, [sp, #64]
   457f8:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   457fc:	mov	w28, #0x0                   	// #0
   45800:	ldp	x21, x22, [sp, #32]
   45804:	ldp	x25, x26, [sp, #64]
   45808:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   4580c:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45810:	add	x3, x3, #0x9c8
   45814:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45818:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   4581c:	add	x3, x3, #0x1b0
   45820:	add	x1, x1, #0x7d8
   45824:	add	x0, x0, #0x1b8
   45828:	mov	w2, #0x5ce                 	// #1486
   4582c:	bl	35ac0 <__assert_fail@plt>
   45830:	mov	w28, #0x0                   	// #0
   45834:	ldp	x21, x22, [sp, #32]
   45838:	ldp	x25, x26, [sp, #64]
   4583c:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45840:	mov	w28, #0x0                   	// #0
   45844:	ldp	x21, x22, [sp, #32]
   45848:	ldp	x25, x26, [sp, #64]
   4584c:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45850:	mov	w28, #0x0                   	// #0
   45854:	ldp	x21, x22, [sp, #32]
   45858:	ldp	x25, x26, [sp, #64]
   4585c:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45860:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45864:	add	x3, x3, #0x9c8
   45868:	adrp	x1, 58000 <xexit@@Base+0xe08>
   4586c:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45870:	add	x3, x3, #0x1b0
   45874:	add	x1, x1, #0x7d8
   45878:	add	x0, x0, #0x708
   4587c:	mov	w2, #0x8d8                 	// #2264
   45880:	bl	35ac0 <__assert_fail@plt>
   45884:	mov	w28, #0x0                   	// #0
   45888:	ldp	x21, x22, [sp, #32]
   4588c:	ldp	x25, x26, [sp, #64]
   45890:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45894:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45898:	add	x3, x3, #0x9c8
   4589c:	adrp	x1, 58000 <xexit@@Base+0xe08>
   458a0:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   458a4:	add	x3, x3, #0x1b0
   458a8:	add	x1, x1, #0x7d8
   458ac:	add	x0, x0, #0x530
   458b0:	mov	w2, #0x7ea                 	// #2026
   458b4:	bl	35ac0 <__assert_fail@plt>
   458b8:	mov	w28, #0x0                   	// #0
   458bc:	ldp	x21, x22, [sp, #32]
   458c0:	ldp	x25, x26, [sp, #64]
   458c4:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   458c8:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   458cc:	add	x3, x3, #0x9c8
   458d0:	adrp	x1, 58000 <xexit@@Base+0xe08>
   458d4:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   458d8:	add	x3, x3, #0x1b0
   458dc:	add	x1, x1, #0x7d8
   458e0:	add	x0, x0, #0x4b8
   458e4:	mov	w2, #0x779                 	// #1913
   458e8:	bl	35ac0 <__assert_fail@plt>
   458ec:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   458f0:	add	x3, x3, #0x9c8
   458f4:	adrp	x1, 58000 <xexit@@Base+0xe08>
   458f8:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   458fc:	add	x3, x3, #0x1b0
   45900:	add	x1, x1, #0x7d8
   45904:	add	x0, x0, #0x480
   45908:	mov	w2, #0x778                 	// #1912
   4590c:	bl	35ac0 <__assert_fail@plt>
   45910:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45914:	add	x3, x3, #0x9c8
   45918:	adrp	x1, 58000 <xexit@@Base+0xe08>
   4591c:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45920:	add	x3, x3, #0x1b0
   45924:	add	x1, x1, #0x7d8
   45928:	add	x0, x0, #0x430
   4592c:	mov	w2, #0x777                 	// #1911
   45930:	bl	35ac0 <__assert_fail@plt>
   45934:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45938:	add	x3, x3, #0x9c8
   4593c:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45940:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45944:	add	x3, x3, #0x1b0
   45948:	add	x1, x1, #0x7d8
   4594c:	add	x0, x0, #0x460
   45950:	mov	w2, #0x776                 	// #1910
   45954:	bl	35ac0 <__assert_fail@plt>
   45958:	mov	w28, #0x0                   	// #0
   4595c:	ldp	x21, x22, [sp, #32]
   45960:	ldp	x25, x26, [sp, #64]
   45964:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45968:	mov	w28, #0x0                   	// #0
   4596c:	ldp	x21, x22, [sp, #32]
   45970:	ldp	x25, x26, [sp, #64]
   45974:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45978:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   4597c:	add	x3, x3, #0x9c8
   45980:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45984:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45988:	add	x3, x3, #0x1b0
   4598c:	add	x1, x1, #0x7d8
   45990:	add	x0, x0, #0x8e0
   45994:	mov	w2, #0x9dd                 	// #2525
   45998:	bl	35ac0 <__assert_fail@plt>
   4599c:	mov	w28, #0x0                   	// #0
   459a0:	ldp	x21, x22, [sp, #32]
   459a4:	ldp	x25, x26, [sp, #64]
   459a8:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   459ac:	mov	w28, #0x0                   	// #0
   459b0:	ldp	x21, x22, [sp, #32]
   459b4:	ldp	x25, x26, [sp, #64]
   459b8:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   459bc:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   459c0:	add	x3, x3, #0x9c8
   459c4:	adrp	x1, 58000 <xexit@@Base+0xe08>
   459c8:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   459cc:	add	x3, x3, #0x1b0
   459d0:	add	x1, x1, #0x7d8
   459d4:	add	x0, x0, #0x948
   459d8:	mov	w2, #0xa2e                 	// #2606
   459dc:	bl	35ac0 <__assert_fail@plt>
   459e0:	mov	w28, #0x0                   	// #0
   459e4:	ldp	x21, x22, [sp, #32]
   459e8:	ldp	x25, x26, [sp, #64]
   459ec:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   459f0:	mov	w28, #0x0                   	// #0
   459f4:	ldp	x21, x22, [sp, #32]
   459f8:	ldp	x25, x26, [sp, #64]
   459fc:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45a00:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45a04:	add	x3, x3, #0x9c8
   45a08:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45a0c:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45a10:	add	x3, x3, #0x1b0
   45a14:	add	x1, x1, #0x7d8
   45a18:	add	x0, x0, #0x260
   45a1c:	mov	w2, #0x5fa                 	// #1530
   45a20:	bl	35ac0 <__assert_fail@plt>
   45a24:	mov	w28, #0x0                   	// #0
   45a28:	ldp	x21, x22, [sp, #32]
   45a2c:	ldp	x25, x26, [sp, #64]
   45a30:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45a34:	mov	w28, #0x0                   	// #0
   45a38:	ldp	x21, x22, [sp, #32]
   45a3c:	ldp	x25, x26, [sp, #64]
   45a40:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45a44:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45a48:	add	x3, x3, #0x9c8
   45a4c:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45a50:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45a54:	add	x3, x3, #0x1b0
   45a58:	add	x1, x1, #0x7d8
   45a5c:	add	x0, x0, #0x830
   45a60:	mov	w2, #0x9b3                 	// #2483
   45a64:	bl	35ac0 <__assert_fail@plt>
   45a68:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45a6c:	add	x3, x3, #0x9c8
   45a70:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45a74:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45a78:	add	x3, x3, #0x1b0
   45a7c:	add	x1, x1, #0x7d8
   45a80:	add	x0, x0, #0x590
   45a84:	mov	w2, #0x81e                 	// #2078
   45a88:	bl	35ac0 <__assert_fail@plt>
   45a8c:	mov	w28, #0x0                   	// #0
   45a90:	ldp	x21, x22, [sp, #32]
   45a94:	ldp	x25, x26, [sp, #64]
   45a98:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45a9c:	mov	w28, #0x0                   	// #0
   45aa0:	ldp	x21, x22, [sp, #32]
   45aa4:	ldp	x25, x26, [sp, #64]
   45aa8:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45aac:	mov	w28, #0x0                   	// #0
   45ab0:	ldp	x21, x22, [sp, #32]
   45ab4:	ldp	x25, x26, [sp, #64]
   45ab8:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45abc:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45ac0:	add	x3, x3, #0x9c8
   45ac4:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45ac8:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45acc:	add	x3, x3, #0x1b0
   45ad0:	add	x1, x1, #0x7d8
   45ad4:	add	x0, x0, #0x378
   45ad8:	mov	w2, #0x917                 	// #2327
   45adc:	bl	35ac0 <__assert_fail@plt>
   45ae0:	mov	w28, #0x0                   	// #0
   45ae4:	ldp	x21, x22, [sp, #32]
   45ae8:	ldp	x25, x26, [sp, #64]
   45aec:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45af0:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45af4:	add	x3, x3, #0x9c8
   45af8:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45afc:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45b00:	add	x3, x3, #0x1b0
   45b04:	add	x1, x1, #0x7d8
   45b08:	add	x0, x0, #0x460
   45b0c:	mov	w2, #0x78c                 	// #1932
   45b10:	bl	35ac0 <__assert_fail@plt>
   45b14:	mov	w28, #0x0                   	// #0
   45b18:	ldp	x21, x22, [sp, #32]
   45b1c:	ldp	x25, x26, [sp, #64]
   45b20:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45b24:	mov	w28, #0x0                   	// #0
   45b28:	ldp	x21, x22, [sp, #32]
   45b2c:	ldp	x25, x26, [sp, #64]
   45b30:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45b34:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45b38:	add	x3, x3, #0x9c8
   45b3c:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45b40:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45b44:	add	x3, x3, #0x1b0
   45b48:	add	x1, x1, #0x7d8
   45b4c:	add	x0, x0, #0x430
   45b50:	mov	w2, #0x7b6                 	// #1974
   45b54:	bl	35ac0 <__assert_fail@plt>
   45b58:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45b5c:	add	x3, x3, #0x9c8
   45b60:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45b64:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45b68:	add	x3, x3, #0x1b0
   45b6c:	add	x1, x1, #0x7d8
   45b70:	add	x0, x0, #0x430
   45b74:	mov	w2, #0x729                 	// #1833
   45b78:	bl	35ac0 <__assert_fail@plt>
   45b7c:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45b80:	add	x3, x3, #0x9c8
   45b84:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45b88:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45b8c:	add	x3, x3, #0x1b0
   45b90:	add	x1, x1, #0x7d8
   45b94:	add	x0, x0, #0x410
   45b98:	mov	w2, #0x728                 	// #1832
   45b9c:	bl	35ac0 <__assert_fail@plt>
   45ba0:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45ba4:	add	x3, x3, #0x9c8
   45ba8:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45bac:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45bb0:	add	x3, x3, #0x1b0
   45bb4:	add	x1, x1, #0x7d8
   45bb8:	add	x0, x0, #0x4b8
   45bbc:	mov	w2, #0x96d                 	// #2413
   45bc0:	bl	35ac0 <__assert_fail@plt>
   45bc4:	mov	w28, #0x0                   	// #0
   45bc8:	ldp	x21, x22, [sp, #32]
   45bcc:	ldp	x25, x26, [sp, #64]
   45bd0:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45bd4:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   45bd8:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   45bdc:	add	x3, x3, #0x1e8
   45be0:	add	x1, x1, #0x288
   45be4:	add	x0, x0, #0x308
   45be8:	mov	w2, #0x203                 	// #515
   45bec:	bl	35ac0 <__assert_fail@plt>
   45bf0:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   45bf4:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45bf8:	add	x3, x3, #0x1e8
   45bfc:	add	x1, x1, #0x288
   45c00:	add	x0, x0, #0x4b0
   45c04:	mov	w2, #0x200                 	// #512
   45c08:	bl	35ac0 <__assert_fail@plt>
   45c0c:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45c10:	add	x3, x3, #0x9c8
   45c14:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45c18:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45c1c:	add	x3, x3, #0x1b0
   45c20:	add	x1, x1, #0x7d8
   45c24:	add	x0, x0, #0x430
   45c28:	mov	w2, #0x78d                 	// #1933
   45c2c:	bl	35ac0 <__assert_fail@plt>
   45c30:	mov	w28, #0x0                   	// #0
   45c34:	ldp	x21, x22, [sp, #32]
   45c38:	ldp	x25, x26, [sp, #64]
   45c3c:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45c40:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45c44:	add	x3, x3, #0x9c8
   45c48:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45c4c:	adrp	x0, 58000 <xexit@@Base+0xe08>
   45c50:	add	x3, x3, #0x1b0
   45c54:	add	x1, x1, #0x7d8
   45c58:	add	x0, x0, #0xbf8
   45c5c:	mov	w2, #0xa47                 	// #2631
   45c60:	bl	35ac0 <__assert_fail@plt>
   45c64:	mov	w28, #0x0                   	// #0
   45c68:	ldp	x21, x22, [sp, #32]
   45c6c:	ldp	x25, x26, [sp, #64]
   45c70:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45c74:	mov	w28, #0x0                   	// #0
   45c78:	ldp	x21, x22, [sp, #32]
   45c7c:	ldp	x25, x26, [sp, #64]
   45c80:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45c84:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45c88:	add	x3, x3, #0x9c8
   45c8c:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45c90:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45c94:	add	x3, x3, #0x1b0
   45c98:	add	x1, x1, #0x7d8
   45c9c:	add	x0, x0, #0x378
   45ca0:	mov	w2, #0x844                 	// #2116
   45ca4:	bl	35ac0 <__assert_fail@plt>
   45ca8:	mov	w28, #0x0                   	// #0
   45cac:	ldp	x21, x22, [sp, #32]
   45cb0:	ldp	x25, x26, [sp, #64]
   45cb4:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45cb8:	mov	w28, #0x0                   	// #0
   45cbc:	ldp	x21, x22, [sp, #32]
   45cc0:	ldp	x25, x26, [sp, #64]
   45cc4:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45cc8:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45ccc:	add	x3, x3, #0x9c8
   45cd0:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45cd4:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45cd8:	add	x3, x3, #0x1b0
   45cdc:	add	x1, x1, #0x7d8
   45ce0:	add	x0, x0, #0x918
   45ce4:	mov	w2, #0xa06                 	// #2566
   45ce8:	bl	35ac0 <__assert_fail@plt>
   45cec:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45cf0:	add	x3, x3, #0x9c8
   45cf4:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45cf8:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45cfc:	add	x3, x3, #0x1b0
   45d00:	add	x1, x1, #0x7d8
   45d04:	add	x0, x0, #0x158
   45d08:	mov	w2, #0x5bb                 	// #1467
   45d0c:	bl	35ac0 <__assert_fail@plt>
   45d10:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45d14:	add	x3, x3, #0x9c8
   45d18:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45d1c:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45d20:	add	x3, x3, #0x1b0
   45d24:	add	x1, x1, #0x7d8
   45d28:	add	x0, x0, #0x530
   45d2c:	mov	w2, #0x7df                 	// #2015
   45d30:	bl	35ac0 <__assert_fail@plt>
   45d34:	mov	w28, #0x0                   	// #0
   45d38:	ldp	x21, x22, [sp, #32]
   45d3c:	ldp	x25, x26, [sp, #64]
   45d40:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45d44:	mov	w28, #0x0                   	// #0
   45d48:	ldp	x21, x22, [sp, #32]
   45d4c:	ldp	x25, x26, [sp, #64]
   45d50:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45d54:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45d58:	add	x3, x3, #0x9c8
   45d5c:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45d60:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45d64:	add	x3, x3, #0x1b0
   45d68:	add	x1, x1, #0x7d8
   45d6c:	add	x0, x0, #0x830
   45d70:	mov	w2, #0x9a9                 	// #2473
   45d74:	bl	35ac0 <__assert_fail@plt>
   45d78:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45d7c:	add	x3, x3, #0x9c8
   45d80:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45d84:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45d88:	add	x3, x3, #0x1b0
   45d8c:	add	x1, x1, #0x7d8
   45d90:	add	x0, x0, #0x430
   45d94:	mov	w2, #0x754                 	// #1876
   45d98:	bl	35ac0 <__assert_fail@plt>
   45d9c:	adrp	x3, 5e000 <xexit@@Base+0x6e08>
   45da0:	add	x3, x3, #0x9c8
   45da4:	adrp	x1, 58000 <xexit@@Base+0xe08>
   45da8:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   45dac:	add	x3, x3, #0x1b0
   45db0:	add	x1, x1, #0x7d8
   45db4:	add	x0, x0, #0x410
   45db8:	mov	w2, #0x753                 	// #1875
   45dbc:	bl	35ac0 <__assert_fail@plt>
   45dc0:	mov	w28, #0x0                   	// #0
   45dc4:	ldp	x21, x22, [sp, #32]
   45dc8:	ldp	x25, x26, [sp, #64]
   45dcc:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45dd0:	mov	w28, #0x0                   	// #0
   45dd4:	ldp	x21, x22, [sp, #32]
   45dd8:	ldp	x25, x26, [sp, #64]
   45ddc:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45de0:	mov	w28, #0x0                   	// #0
   45de4:	ldp	x21, x22, [sp, #32]
   45de8:	ldp	x25, x26, [sp, #64]
   45dec:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>
   45df0:	mov	w28, #0x0                   	// #0
   45df4:	ldp	x21, x22, [sp, #32]
   45df8:	ldp	x25, x26, [sp, #64]
   45dfc:	b	42dac <aarch64_match_operands_constraint@@Base+0x4ec>

0000000000045e00 <aarch64_find_real_opcode@@Base>:
   45e00:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   45e04:	mov	x2, #0x8e39                	// #36409
   45e08:	movk	x2, #0x38e3, lsl #16
   45e0c:	ldr	x3, [x1, #3848]
   45e10:	movk	x2, #0xe38e, lsl #32
   45e14:	movk	x2, #0x8e38, lsl #48
   45e18:	sub	x0, x0, x3
   45e1c:	asr	x0, x0, #4
   45e20:	mul	x0, x0, x2
   45e24:	sub	w0, w0, #0x2
   45e28:	cmp	w0, #0x7fb
   45e2c:	b.hi	45e48 <aarch64_find_real_opcode@@Base+0x48>  // b.pmore
   45e30:	adrp	x2, 5f000 <fields@@Base+0x2d8>
   45e34:	add	x2, x2, #0x118
   45e38:	ldrh	w0, [x2, w0, uxtw #1]
   45e3c:	adr	x2, 45e48 <aarch64_find_real_opcode@@Base+0x48>
   45e40:	add	x0, x2, w0, sxth #2
   45e44:	br	x0
   45e48:	mov	x0, #0x0                   	// #0
   45e4c:	ret
   45e50:	mov	x0, #0x9f10                	// #40720
   45e54:	movk	x0, #0x2, lsl #16
   45e58:	ldr	x1, [x1, #3848]
   45e5c:	add	x0, x0, x1
   45e60:	ret
   45e64:	mov	x0, #0xac00                	// #44032
   45e68:	movk	x0, #0x2, lsl #16
   45e6c:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45e70:	mov	x0, #0x61d0                	// #25040
   45e74:	movk	x0, #0x1, lsl #16
   45e78:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45e7c:	mov	x0, #0x5ba0                	// #23456
   45e80:	movk	x0, #0x1, lsl #16
   45e84:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45e88:	mov	x0, #0x5f90                	// #24464
   45e8c:	movk	x0, #0x1, lsl #16
   45e90:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45e94:	mov	x0, #0x31f0                	// #12784
   45e98:	movk	x0, #0x2, lsl #16
   45e9c:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45ea0:	mov	x0, #0xa8a0                	// #43168
   45ea4:	movk	x0, #0x2, lsl #16
   45ea8:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45eac:	mov	x0, #0x76a0                	// #30368
   45eb0:	movk	x0, #0x1, lsl #16
   45eb4:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45eb8:	mov	x0, #0x74f0                	// #29936
   45ebc:	movk	x0, #0x1, lsl #16
   45ec0:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45ec4:	mov	x0, #0xea0                 	// #3744
   45ec8:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45ecc:	mov	x0, #0x60                  	// #96
   45ed0:	movk	x0, #0x3, lsl #16
   45ed4:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45ed8:	mov	x0, #0xf910                	// #63760
   45edc:	movk	x0, #0x2, lsl #16
   45ee0:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45ee4:	mov	x0, #0xf0                  	// #240
   45ee8:	movk	x0, #0x3, lsl #16
   45eec:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45ef0:	mov	x0, #0x9fb0                	// #40880
   45ef4:	movk	x0, #0x1, lsl #16
   45ef8:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45efc:	mov	x0, #0x9e90                	// #40592
   45f00:	movk	x0, #0x1, lsl #16
   45f04:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45f08:	mov	x0, #0x5c20                	// #23584
   45f0c:	movk	x0, #0x2, lsl #16
   45f10:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45f14:	mov	x0, #0x5b90                	// #23440
   45f18:	movk	x0, #0x2, lsl #16
   45f1c:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45f20:	mov	x0, #0x5a70                	// #23152
   45f24:	movk	x0, #0x2, lsl #16
   45f28:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45f2c:	mov	x0, #0x58c0                	// #22720
   45f30:	movk	x0, #0x2, lsl #16
   45f34:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45f38:	mov	x0, #0x5710                	// #22288
   45f3c:	movk	x0, #0x2, lsl #16
   45f40:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45f44:	mov	x0, #0x55f0                	// #22000
   45f48:	movk	x0, #0x2, lsl #16
   45f4c:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45f50:	mov	x0, #0x5560                	// #21856
   45f54:	movk	x0, #0x2, lsl #16
   45f58:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45f5c:	mov	x0, #0x54d0                	// #21712
   45f60:	movk	x0, #0x2, lsl #16
   45f64:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45f68:	mov	x0, #0x53b0                	// #21424
   45f6c:	movk	x0, #0x2, lsl #16
   45f70:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45f74:	mov	x0, #0x5200                	// #20992
   45f78:	movk	x0, #0x2, lsl #16
   45f7c:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45f80:	mov	x0, #0x5050                	// #20560
   45f84:	movk	x0, #0x2, lsl #16
   45f88:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45f8c:	mov	x0, #0x4f30                	// #20272
   45f90:	movk	x0, #0x2, lsl #16
   45f94:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45f98:	mov	x0, #0x4ea0                	// #20128
   45f9c:	movk	x0, #0x2, lsl #16
   45fa0:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45fa4:	mov	x0, #0x4e10                	// #19984
   45fa8:	movk	x0, #0x2, lsl #16
   45fac:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45fb0:	mov	x0, #0x4cf0                	// #19696
   45fb4:	movk	x0, #0x2, lsl #16
   45fb8:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45fbc:	mov	x0, #0x4b40                	// #19264
   45fc0:	movk	x0, #0x2, lsl #16
   45fc4:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45fc8:	mov	x0, #0x50                  	// #80
   45fcc:	movk	x0, #0x4, lsl #16
   45fd0:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45fd4:	mov	x0, #0x180                 	// #384
   45fd8:	movk	x0, #0x3, lsl #16
   45fdc:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45fe0:	mov	x0, #0x6b50                	// #27472
   45fe4:	movk	x0, #0x2, lsl #16
   45fe8:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45fec:	mov	x0, #0x6a30                	// #27184
   45ff0:	movk	x0, #0x2, lsl #16
   45ff4:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   45ff8:	mov	x0, #0x69a0                	// #27040
   45ffc:	movk	x0, #0x2, lsl #16
   46000:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46004:	mov	x0, #0x6910                	// #26896
   46008:	movk	x0, #0x2, lsl #16
   4600c:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46010:	mov	x0, #0x67f0                	// #26608
   46014:	movk	x0, #0x2, lsl #16
   46018:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   4601c:	mov	x0, #0x6640                	// #26176
   46020:	movk	x0, #0x2, lsl #16
   46024:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46028:	mov	x0, #0x6490                	// #25744
   4602c:	movk	x0, #0x2, lsl #16
   46030:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46034:	mov	x0, #0x6370                	// #25456
   46038:	movk	x0, #0x2, lsl #16
   4603c:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46040:	mov	x0, #0x62e0                	// #25312
   46044:	movk	x0, #0x2, lsl #16
   46048:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   4604c:	mov	x0, #0x6250                	// #25168
   46050:	movk	x0, #0x2, lsl #16
   46054:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46058:	mov	x0, #0x6130                	// #24880
   4605c:	movk	x0, #0x2, lsl #16
   46060:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46064:	mov	x0, #0x5f80                	// #24448
   46068:	movk	x0, #0x2, lsl #16
   4606c:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46070:	mov	x0, #0x5dd0                	// #24016
   46074:	movk	x0, #0x2, lsl #16
   46078:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   4607c:	mov	x0, #0x5cb0                	// #23728
   46080:	movk	x0, #0x2, lsl #16
   46084:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46088:	mov	x0, #0xe8e0                	// #59616
   4608c:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46090:	mov	x0, #0xe7c0                	// #59328
   46094:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46098:	mov	x0, #0x7210                	// #29200
   4609c:	movk	x0, #0x2, lsl #16
   460a0:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   460a4:	mov	x0, #0x70f0                	// #28912
   460a8:	movk	x0, #0x2, lsl #16
   460ac:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   460b0:	mov	x0, #0x7060                	// #28768
   460b4:	movk	x0, #0x2, lsl #16
   460b8:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   460bc:	mov	x0, #0x6fd0                	// #28624
   460c0:	movk	x0, #0x2, lsl #16
   460c4:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   460c8:	mov	x0, #0x9d70                	// #40304
   460cc:	movk	x0, #0x1, lsl #16
   460d0:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   460d4:	mov	x0, #0x9620                	// #38432
   460d8:	movk	x0, #0x1, lsl #16
   460dc:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   460e0:	mov	x0, #0x9470                	// #38000
   460e4:	movk	x0, #0x1, lsl #16
   460e8:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   460ec:	mov	x0, #0x9350                	// #37712
   460f0:	movk	x0, #0x1, lsl #16
   460f4:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   460f8:	mov	x0, #0xd2d0                	// #53968
   460fc:	movk	x0, #0x2, lsl #16
   46100:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46104:	mov	x0, #0xf880                	// #63616
   46108:	movk	x0, #0x2, lsl #16
   4610c:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46110:	mov	x0, #0x6eb0                	// #28336
   46114:	movk	x0, #0x2, lsl #16
   46118:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   4611c:	mov	x0, #0x6d00                	// #27904
   46120:	movk	x0, #0x2, lsl #16
   46124:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46128:	mov	x0, #0x35e0                	// #13792
   4612c:	movk	x0, #0x2, lsl #16
   46130:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46134:	mov	x0, #0x33a0                	// #13216
   46138:	movk	x0, #0x2, lsl #16
   4613c:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46140:	mov	x0, #0x4990                	// #18832
   46144:	movk	x0, #0x2, lsl #16
   46148:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   4614c:	mov	x0, #0x4870                	// #18544
   46150:	movk	x0, #0x2, lsl #16
   46154:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46158:	mov	x0, #0x7720                	// #30496
   4615c:	movk	x0, #0x2, lsl #16
   46160:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46164:	mov	x0, #0x7690                	// #30352
   46168:	movk	x0, #0x2, lsl #16
   4616c:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46170:	mov	x0, #0x7570                	// #30064
   46174:	movk	x0, #0x2, lsl #16
   46178:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   4617c:	mov	x0, #0x73c0                	// #29632
   46180:	movk	x0, #0x2, lsl #16
   46184:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46188:	mov	x0, #0x47e0                	// #18400
   4618c:	movk	x0, #0x2, lsl #16
   46190:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46194:	mov	x0, #0x4750                	// #18256
   46198:	movk	x0, #0x2, lsl #16
   4619c:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   461a0:	mov	x0, #0x2e00                	// #11776
   461a4:	movk	x0, #0x2, lsl #16
   461a8:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   461ac:	mov	x0, #0x2ce0                	// #11488
   461b0:	movk	x0, #0x2, lsl #16
   461b4:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   461b8:	mov	x0, #0xa9d0                	// #43472
   461bc:	movk	x0, #0x1, lsl #16
   461c0:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   461c4:	mov	x0, #0xa3a0                	// #41888
   461c8:	movk	x0, #0x1, lsl #16
   461cc:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   461d0:	mov	x0, #0xa280                	// #41600
   461d4:	movk	x0, #0x1, lsl #16
   461d8:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   461dc:	mov	x0, #0xa0d0                	// #41168
   461e0:	movk	x0, #0x1, lsl #16
   461e4:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   461e8:	mov	x0, #0xdce0                	// #56544
   461ec:	movk	x0, #0x3, lsl #16
   461f0:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   461f4:	mov	x0, #0x2fb0                	// #12208
   461f8:	movk	x0, #0x2, lsl #16
   461fc:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46200:	mov	x0, #0x2cf0                	// #11504
   46204:	movk	x0, #0x1, lsl #16
   46208:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   4620c:	mov	x0, #0x57c0                	// #22464
   46210:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46214:	mov	x0, #0x56a0                	// #22176
   46218:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   4621c:	mov	x0, #0xdb60                	// #56160
   46220:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46224:	mov	x0, #0xda40                	// #55872
   46228:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   4622c:	mov	x0, #0xb250                	// #45648
   46230:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46234:	mov	x0, #0x8820                	// #34848
   46238:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   4623c:	mov	x0, #0xd80                 	// #3456
   46240:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46244:	mov	x0, #0xc60                 	// #3168
   46248:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   4624c:	mov	x0, #0x990                 	// #2448
   46250:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46254:	mov	x0, #0x7e0                 	// #2016
   46258:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   4625c:	mov	x0, #0x6c0                 	// #1728
   46260:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46264:	mov	x0, #0x5a0                 	// #1440
   46268:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   4626c:	mov	x0, #0x3f0                 	// #1008
   46270:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46274:	mov	x0, #0x9230                	// #37424
   46278:	movk	x0, #0x1, lsl #16
   4627c:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46280:	mov	x0, #0x9110                	// #37136
   46284:	movk	x0, #0x1, lsl #16
   46288:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   4628c:	mov	x0, #0x8300                	// #33536
   46290:	movk	x0, #0x1, lsl #16
   46294:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46298:	mov	x0, #0x7850                	// #30800
   4629c:	movk	x0, #0x1, lsl #16
   462a0:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   462a4:	mov	x0, #0x3ffc0               	// #262080
   462a8:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   462ac:	mov	x0, #0xf7f0                	// #63472
   462b0:	movk	x0, #0x2, lsl #16
   462b4:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   462b8:	mov	x0, #0x7c30                	// #31792
   462bc:	movk	x0, #0x2, lsl #16
   462c0:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   462c4:	mov	x0, #0x7a80                	// #31360
   462c8:	movk	x0, #0x2, lsl #16
   462cc:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   462d0:	mov	x0, #0x78d0                	// #30928
   462d4:	movk	x0, #0x2, lsl #16
   462d8:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   462dc:	mov	x0, #0x77b0                	// #30640
   462e0:	movk	x0, #0x2, lsl #16
   462e4:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   462e8:	mov	x0, #0x5580                	// #21888
   462ec:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   462f0:	mov	x0, #0xdaa0                	// #55968
   462f4:	movk	x0, #0x3, lsl #16
   462f8:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   462fc:	mov	x0, #0xdc50                	// #56400
   46300:	movk	x0, #0x3, lsl #16
   46304:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46308:	mov	x0, #0xffd0                	// #65488
   4630c:	movk	x0, #0x2, lsl #16
   46310:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46314:	mov	x0, #0x9970                	// #39280
   46318:	movk	x0, #0x2, lsl #16
   4631c:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46320:	mov	x0, #0x9850                	// #38992
   46324:	movk	x0, #0x2, lsl #16
   46328:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   4632c:	mov	x0, #0x1380                	// #4992
   46330:	movk	x0, #0x3, lsl #16
   46334:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46338:	mov	x0, #0x2070                	// #8304
   4633c:	movk	x0, #0x3, lsl #16
   46340:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46344:	mov	x0, #0xdb30                	// #56112
   46348:	movk	x0, #0x3, lsl #16
   4634c:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46350:	mov	x0, #0x1020                	// #4128
   46354:	movk	x0, #0x3, lsl #16
   46358:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   4635c:	mov	x0, #0xf00                 	// #3840
   46360:	movk	x0, #0x3, lsl #16
   46364:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46368:	mov	x0, #0x7b0                 	// #1968
   4636c:	movk	x0, #0x3, lsl #16
   46370:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46374:	mov	x0, #0x720                 	// #1824
   46378:	movk	x0, #0x3, lsl #16
   4637c:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46380:	mov	x0, #0x2a0                 	// #672
   46384:	movk	x0, #0x3, lsl #16
   46388:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   4638c:	mov	x0, #0xeb90                	// #60304
   46390:	movk	x0, #0x2, lsl #16
   46394:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   46398:	mov	x0, #0xe9e0                	// #59872
   4639c:	movk	x0, #0x2, lsl #16
   463a0:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   463a4:	mov	x0, #0xe8c0                	// #59584
   463a8:	movk	x0, #0x2, lsl #16
   463ac:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   463b0:	mov	x0, #0xe710                	// #59152
   463b4:	movk	x0, #0x2, lsl #16
   463b8:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   463bc:	mov	x0, #0xd1b0                	// #53680
   463c0:	movk	x0, #0x2, lsl #16
   463c4:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   463c8:	mov	x0, #0x450                 	// #1104
   463cc:	movk	x0, #0x3, lsl #16
   463d0:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   463d4:	mov	x0, #0x3c0                 	// #960
   463d8:	movk	x0, #0x3, lsl #16
   463dc:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   463e0:	mov	x0, #0xd360                	// #54112
   463e4:	movk	x0, #0x2, lsl #16
   463e8:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   463ec:	mov	x0, #0x120                 	// #288
   463f0:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   463f4:	mov	x0, #0x240                 	// #576
   463f8:	b	45e58 <aarch64_find_real_opcode@@Base+0x58>
   463fc:	nop

0000000000046400 <aarch64_insert_operand@@Base>:
   46400:	adrp	x6, a2000 <aarch64_operands@@Base+0x16bc0>
   46404:	mov	x5, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
   46408:	movk	x5, #0xaaab
   4640c:	ldr	x6, [x6, #4032]
   46410:	sub	x6, x0, x6
   46414:	asr	x6, x6, #4
   46418:	mul	x6, x6, x5
   4641c:	sub	w5, w6, #0x1
   46420:	cmp	w5, #0xce
   46424:	b.ls	46450 <aarch64_insert_operand@@Base+0x50>  // b.plast
   46428:	stp	x29, x30, [sp, #-16]!
   4642c:	adrp	x3, 60000 <fields@@Base+0x12d8>
   46430:	adrp	x1, 60000 <fields@@Base+0x12d8>
   46434:	mov	x29, sp
   46438:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   4643c:	add	x3, x3, #0x1e0
   46440:	add	x1, x1, #0x1f8
   46444:	add	x0, x0, #0x4b0
   46448:	mov	w2, #0x35f                 	// #863
   4644c:	bl	35ac0 <__assert_fail@plt>
   46450:	adrp	x6, 60000 <fields@@Base+0x12d8>
   46454:	add	x6, x6, #0x110
   46458:	ldrb	w5, [x6, w5, uxtw]
   4645c:	adr	x6, 46468 <aarch64_insert_operand@@Base+0x68>
   46460:	add	x5, x6, w5, sxtb #2
   46464:	br	x5
   46468:	b	35200 <aarch64_ins_regno@plt>
   4646c:	b	357e0 <aarch64_ins_imm@plt>
   46470:	b	35130 <aarch64_ins_sve_addr_rr_lsl@plt>
   46474:	b	350b0 <aarch64_ins_sve_addr_rz_xtw@plt>
   46478:	b	35070 <aarch64_ins_sve_quad_index@plt>
   4647c:	b	35690 <aarch64_ins_reglane@plt>
   46480:	b	35330 <aarch64_ins_sysins_op@plt>
   46484:	b	35300 <aarch64_ins_addr_simm@plt>
   46488:	b	352c0 <aarch64_ins_sve_addr_ri_u6@plt>
   4648c:	b	351f0 <aarch64_ins_sve_addr_ri_s4xvl@plt>
   46490:	b	35a20 <aarch64_ins_sve_addr_zi_u5@plt>
   46494:	b	35550 <aarch64_ins_advsimd_imm_modified@plt>
   46498:	b	35810 <aarch64_ins_sve_shrimm@plt>
   4649c:	b	35a30 <aarch64_ins_sve_shlimm@plt>
   464a0:	b	350e0 <aarch64_ins_imm_rotate1@plt>
   464a4:	b	356b0 <aarch64_ins_imm_rotate2@plt>
   464a8:	b	35700 <aarch64_ins_addr_simple@plt>
   464ac:	b	35080 <aarch64_ins_cond@plt>
   464b0:	b	35860 <aarch64_ins_barrier@plt>
   464b4:	b	35630 <aarch64_ins_hint@plt>
   464b8:	b	358e0 <aarch64_ins_advsimd_imm_shift@plt>
   464bc:	b	354b0 <aarch64_ins_fpimm@plt>
   464c0:	b	35600 <aarch64_ins_sve_addr_ri_s4@plt>
   464c4:	b	350d0 <aarch64_ins_sve_reglist@plt>
   464c8:	b	353a0 <aarch64_ins_limm@plt>
   464cc:	b	35450 <aarch64_ins_reg_shifted@plt>
   464d0:	b	359b0 <aarch64_ins_reg_extended@plt>
   464d4:	b	35730 <aarch64_ins_addr_uimm12@plt>
   464d8:	b	351b0 <aarch64_ins_addr_simm10@plt>
   464dc:	b	35620 <aarch64_ins_prfop@plt>
   464e0:	b	358b0 <aarch64_ins_addr_regoff@plt>
   464e4:	b	35b30 <aarch64_ins_sve_addr_ri_s9xvl@plt>
   464e8:	b	35940 <aarch64_ins_sve_addr_ri_s6xvl@plt>
   464ec:	b	35030 <aarch64_ins_sve_float_zero_one@plt>
   464f0:	b	35650 <aarch64_ins_sve_float_half_two@plt>
   464f4:	b	35ad0 <aarch64_ins_sve_float_half_one@plt>
   464f8:	b	35990 <aarch64_ins_sve_asimm@plt>
   464fc:	b	35920 <aarch64_ins_sve_aimm@plt>
   46500:	b	356a0 <aarch64_ins_sve_addr_zz_uxtw@plt>
   46504:	b	35570 <aarch64_ins_sve_addr_zz_sxtw@plt>
   46508:	b	35290 <aarch64_ins_sve_addr_zz_lsl@plt>
   4650c:	b	354f0 <aarch64_ins_sve_limm_mov@plt>
   46510:	b	35780 <aarch64_ins_inv_limm@plt>
   46514:	b	35140 <aarch64_ins_sve_scale@plt>
   46518:	b	35340 <aarch64_ins_ft@plt>
   4651c:	b	35240 <aarch64_ins_pstatefield@plt>
   46520:	b	35490 <aarch64_ins_sysreg@plt>
   46524:	b	35040 <aarch64_ins_simd_addr_post@plt>
   46528:	b	357f0 <aarch64_ins_addr_offset@plt>
   4652c:	b	352d0 <aarch64_ins_sve_index@plt>
   46530:	b	35220 <aarch64_ins_aimm@plt>
   46534:	b	356d0 <aarch64_ins_fbits@plt>
   46538:	b	356e0 <aarch64_ins_imm_half@plt>
   4653c:	b	35820 <aarch64_ins_ldst_elemlist@plt>
   46540:	b	35560 <aarch64_ins_ldst_reglist_r@plt>
   46544:	b	35aa0 <aarch64_ins_ldst_reglist@plt>
   46548:	b	355e0 <aarch64_ins_reglist@plt>
   4654c:	nop

0000000000046550 <aarch64_opcode_lookup@@Base>:
   46550:	tbnz	w0, #26, 4657c <aarch64_opcode_lookup@@Base+0x2c>
   46554:	tbnz	w0, #25, 465f0 <aarch64_opcode_lookup@@Base+0xa0>
   46558:	tbnz	w0, #27, 46614 <aarch64_opcode_lookup@@Base+0xc4>
   4655c:	tbnz	w0, #24, 46740 <aarch64_opcode_lookup@@Base+0x1f0>
   46560:	lsr	w1, w0, #31
   46564:	add	w1, w1, #0x4a2
   46568:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   4656c:	mov	w2, #0x90                  	// #144
   46570:	ldr	x0, [x0, #3848]
   46574:	smaddl	x0, w1, w2, x0
   46578:	ret
   4657c:	tbnz	w0, #27, 465c8 <aarch64_opcode_lookup@@Base+0x78>
   46580:	tbnz	w0, #28, 4666c <aarch64_opcode_lookup@@Base+0x11c>
   46584:	tbnz	w0, #24, 467e4 <aarch64_opcode_lookup@@Base+0x294>
   46588:	tbnz	w0, #29, 468c0 <aarch64_opcode_lookup@@Base+0x370>
   4658c:	tbnz	w0, #13, 46b38 <aarch64_opcode_lookup@@Base+0x5e8>
   46590:	tbnz	w0, #14, 46fd0 <aarch64_opcode_lookup@@Base+0xa80>
   46594:	tbnz	w0, #15, 47514 <aarch64_opcode_lookup@@Base+0xfc4>
   46598:	tbnz	w0, #21, 47818 <aarch64_opcode_lookup@@Base+0x12c8>
   4659c:	tbnz	w0, #30, 4827c <aarch64_opcode_lookup@@Base+0x1d2c>
   465a0:	tbnz	w0, #31, 495d4 <aarch64_opcode_lookup@@Base+0x3084>
   465a4:	tbnz	w0, #16, 49878 <aarch64_opcode_lookup@@Base+0x3328>
   465a8:	tbnz	w0, #17, 4adc8 <aarch64_opcode_lookup@@Base+0x4878>
   465ac:	tbnz	w0, #18, 4ae20 <aarch64_opcode_lookup@@Base+0x48d0>
   465b0:	tbnz	w0, #19, 4bae0 <aarch64_opcode_lookup@@Base+0x5590>
   465b4:	tst	x0, #0x100000
   465b8:	mov	w1, #0x6d1                 	// #1745
   465bc:	mov	w0, #0x4fc                 	// #1276
   465c0:	csel	w1, w0, w1, eq  // eq = none
   465c4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   465c8:	tbnz	w0, #25, 466a8 <aarch64_opcode_lookup@@Base+0x158>
   465cc:	tbnz	w0, #28, 46720 <aarch64_opcode_lookup@@Base+0x1d0>
   465d0:	tbnz	w0, #22, 46890 <aarch64_opcode_lookup@@Base+0x340>
   465d4:	tbnz	w0, #23, 46bc0 <aarch64_opcode_lookup@@Base+0x670>
   465d8:	tbnz	w0, #24, 46f64 <aarch64_opcode_lookup@@Base+0xa14>
   465dc:	tst	x0, #0x20000000
   465e0:	mov	w1, #0x3cc                 	// #972
   465e4:	mov	w0, #0x1b8                 	// #440
   465e8:	csel	w1, w0, w1, eq  // eq = none
   465ec:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   465f0:	tbnz	w0, #24, 46644 <aarch64_opcode_lookup@@Base+0xf4>
   465f4:	tbnz	w0, #27, 4677c <aarch64_opcode_lookup@@Base+0x22c>
   465f8:	tbnz	w0, #23, 468f8 <aarch64_opcode_lookup@@Base+0x3a8>
   465fc:	tbnz	w0, #29, 46bac <aarch64_opcode_lookup@@Base+0x65c>
   46600:	tst	x0, #0x40000000
   46604:	mov	w1, #0x3e2                 	// #994
   46608:	mov	w0, #0x3de                 	// #990
   4660c:	csel	w1, w0, w1, eq  // eq = none
   46610:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46614:	tbnz	w0, #28, 466e0 <aarch64_opcode_lookup@@Base+0x190>
   46618:	tbnz	w0, #22, 46814 <aarch64_opcode_lookup@@Base+0x2c4>
   4661c:	tbnz	w0, #23, 46b90 <aarch64_opcode_lookup@@Base+0x640>
   46620:	tbnz	w0, #29, 46ce8 <aarch64_opcode_lookup@@Base+0x798>
   46624:	tbnz	w0, #15, 47560 <aarch64_opcode_lookup@@Base+0x1010>
   46628:	tbnz	w0, #21, 479bc <aarch64_opcode_lookup@@Base+0x146c>
   4662c:	tbnz	w0, #31, 49a04 <aarch64_opcode_lookup@@Base+0x34b4>
   46630:	tst	x0, #0x40000000
   46634:	mov	w1, #0x3ae                 	// #942
   46638:	mov	w0, #0x3a8                 	// #936
   4663c:	csel	w1, w0, w1, eq  // eq = none
   46640:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46644:	tbnz	w0, #27, 46758 <aarch64_opcode_lookup@@Base+0x208>
   46648:	mov	w1, #0x2f5                 	// #757
   4664c:	tbnz	w0, #23, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46650:	mov	w1, #0x271                 	// #625
   46654:	tbnz	w0, #29, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46658:	tst	x0, #0x40000000
   4665c:	mov	w1, #0x275                 	// #629
   46660:	mov	w0, #0x26a                 	// #618
   46664:	csel	w1, w0, w1, eq  // eq = none
   46668:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4666c:	tbnz	w0, #29, 467cc <aarch64_opcode_lookup@@Base+0x27c>
   46670:	tbz	w0, #30, 468ec <aarch64_opcode_lookup@@Base+0x39c>
   46674:	tbnz	w0, #24, 46b04 <aarch64_opcode_lookup@@Base+0x5b4>
   46678:	tbnz	w0, #4, 46dcc <aarch64_opcode_lookup@@Base+0x87c>
   4667c:	tbnz	w0, #25, 47478 <aarch64_opcode_lookup@@Base+0xf28>
   46680:	mov	w1, #0x291                 	// #657
   46684:	tbz	w0, #31, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46688:	tbnz	w0, #0, 47e84 <aarch64_opcode_lookup@@Base+0x1934>
   4668c:	tbnz	w0, #1, 48988 <aarch64_opcode_lookup@@Base+0x2438>
   46690:	tbz	w0, #21, 4a3cc <aarch64_opcode_lookup@@Base+0x3e7c>
   46694:	tst	x0, #0x400000
   46698:	mov	w1, #0x4a7                 	// #1191
   4669c:	mov	w0, #0x2f0                 	// #752
   466a0:	csel	w1, w0, w1, eq  // eq = none
   466a4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   466a8:	tbnz	w0, #24, 4679c <aarch64_opcode_lookup@@Base+0x24c>
   466ac:	tbz	w0, #21, 46980 <aarch64_opcode_lookup@@Base+0x430>
   466b0:	tbnz	w0, #28, 46a04 <aarch64_opcode_lookup@@Base+0x4b4>
   466b4:	tbnz	w0, #15, 46e40 <aarch64_opcode_lookup@@Base+0x8f0>
   466b8:	tbnz	w0, #29, 47260 <aarch64_opcode_lookup@@Base+0xd10>
   466bc:	tbnz	w0, #31, 48afc <aarch64_opcode_lookup@@Base+0x25ac>
   466c0:	tbnz	w0, #10, 47df8 <aarch64_opcode_lookup@@Base+0x18a8>
   466c4:	tbnz	w0, #11, 48758 <aarch64_opcode_lookup@@Base+0x2208>
   466c8:	tbnz	w0, #12, 4962c <aarch64_opcode_lookup@@Base+0x30dc>
   466cc:	tbnz	w0, #13, 49c0c <aarch64_opcode_lookup@@Base+0x36bc>
   466d0:	tbnz	w0, #14, 4af98 <aarch64_opcode_lookup@@Base+0x4a48>
   466d4:	ubfx	x0, x0, #30, #1
   466d8:	add	w1, w0, #0x2c
   466dc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   466e0:	tbz	w0, #24, 46878 <aarch64_opcode_lookup@@Base+0x328>
   466e4:	tbnz	w0, #23, 46a3c <aarch64_opcode_lookup@@Base+0x4ec>
   466e8:	tbnz	w0, #22, 46ca0 <aarch64_opcode_lookup@@Base+0x750>
   466ec:	tbnz	w0, #29, 473cc <aarch64_opcode_lookup@@Base+0xe7c>
   466f0:	mov	w1, #0x374                 	// #884
   466f4:	tbnz	w0, #10, 46568 <aarch64_opcode_lookup@@Base+0x18>
   466f8:	mov	w1, #0x370                 	// #880
   466fc:	tbnz	w0, #11, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46700:	mov	w1, #0x3c3                 	// #963
   46704:	tbnz	w0, #21, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46708:	tbnz	w0, #30, 4871c <aarch64_opcode_lookup@@Base+0x21cc>
   4670c:	cmp	w0, #0x0
   46710:	mov	w1, #0x951                 	// #2385
   46714:	mov	w0, #0x949                 	// #2377
   46718:	csel	w1, w0, w1, ge  // ge = tcont
   4671c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46720:	tbnz	w0, #24, 4692c <aarch64_opcode_lookup@@Base+0x3dc>
   46724:	mov	w1, #0x3db                 	// #987
   46728:	tbz	w0, #29, 46568 <aarch64_opcode_lookup@@Base+0x18>
   4672c:	tbnz	w0, #10, 46c40 <aarch64_opcode_lookup@@Base+0x6f0>
   46730:	tbnz	w0, #11, 4705c <aarch64_opcode_lookup@@Base+0xb0c>
   46734:	ubfx	x0, x0, #22, #1
   46738:	add	w1, w0, #0x39c
   4673c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46740:	tbnz	w0, #29, 46864 <aarch64_opcode_lookup@@Base+0x314>
   46744:	tst	x0, #0x40000000
   46748:	mov	w1, #0x10                  	// #16
   4674c:	mov	w0, #0xc                   	// #12
   46750:	csel	w1, w0, w1, eq  // eq = none
   46754:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46758:	tbz	w0, #21, 46964 <aarch64_opcode_lookup@@Base+0x414>
   4675c:	tbnz	w0, #23, 46ab4 <aarch64_opcode_lookup@@Base+0x564>
   46760:	tbnz	w0, #28, 46ef4 <aarch64_opcode_lookup@@Base+0x9a4>
   46764:	tbnz	w0, #29, 47594 <aarch64_opcode_lookup@@Base+0x1044>
   46768:	tst	x0, #0x40000000
   4676c:	mov	w1, #0x9                   	// #9
   46770:	mov	w0, #0x6                   	// #6
   46774:	csel	w1, w0, w1, eq  // eq = none
   46778:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4677c:	tbnz	w0, #21, 46914 <aarch64_opcode_lookup@@Base+0x3c4>
   46780:	tbnz	w0, #28, 469b4 <aarch64_opcode_lookup@@Base+0x464>
   46784:	tbnz	w0, #29, 46d54 <aarch64_opcode_lookup@@Base+0x804>
   46788:	tst	x0, #0x40000000
   4678c:	mov	w1, #0x3ec                 	// #1004
   46790:	mov	w0, #0x3e5                 	// #997
   46794:	csel	w1, w0, w1, eq  // eq = none
   46798:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4679c:	tbnz	w0, #15, 46938 <aarch64_opcode_lookup@@Base+0x3e8>
   467a0:	tbnz	w0, #28, 46ac8 <aarch64_opcode_lookup@@Base+0x578>
   467a4:	tbnz	w0, #10, 46f2c <aarch64_opcode_lookup@@Base+0x9dc>
   467a8:	tbnz	w0, #12, 4722c <aarch64_opcode_lookup@@Base+0xcdc>
   467ac:	tbnz	w0, #13, 47b3c <aarch64_opcode_lookup@@Base+0x15ec>
   467b0:	tbnz	w0, #14, 48698 <aarch64_opcode_lookup@@Base+0x2148>
   467b4:	tbnz	w0, #29, 49fe8 <aarch64_opcode_lookup@@Base+0x3a98>
   467b8:	tst	x0, #0x40000000
   467bc:	mov	w1, #0x942                 	// #2370
   467c0:	mov	w0, #0x93e                 	// #2366
   467c4:	csel	w1, w0, w1, eq  // eq = none
   467c8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   467cc:	tbnz	w0, #24, 468ac <aarch64_opcode_lookup@@Base+0x35c>
   467d0:	tst	x0, #0x2000000
   467d4:	mov	w1, #0x4d4                 	// #1236
   467d8:	mov	w0, #0x28f                 	// #655
   467dc:	csel	w1, w0, w1, eq  // eq = none
   467e0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   467e4:	tbz	w0, #29, 4683c <aarch64_opcode_lookup@@Base+0x2ec>
   467e8:	tbnz	w0, #15, 46bfc <aarch64_opcode_lookup@@Base+0x6ac>
   467ec:	tbnz	w0, #14, 46ff4 <aarch64_opcode_lookup@@Base+0xaa4>
   467f0:	tbnz	w0, #13, 47498 <aarch64_opcode_lookup@@Base+0xf48>
   467f4:	tbnz	w0, #30, 47914 <aarch64_opcode_lookup@@Base+0x13c4>
   467f8:	tbnz	w0, #21, 4847c <aarch64_opcode_lookup@@Base+0x1f2c>
   467fc:	tbnz	w0, #31, 49568 <aarch64_opcode_lookup@@Base+0x3018>
   46800:	tst	x0, #0x10
   46804:	mov	w1, #0x52d                 	// #1325
   46808:	mov	w0, #0x52a                 	// #1322
   4680c:	csel	w1, w0, w1, eq  // eq = none
   46810:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46814:	tbnz	w0, #23, 46b1c <aarch64_opcode_lookup@@Base+0x5cc>
   46818:	tbnz	w0, #29, 46e18 <aarch64_opcode_lookup@@Base+0x8c8>
   4681c:	tbnz	w0, #15, 473e4 <aarch64_opcode_lookup@@Base+0xe94>
   46820:	tbnz	w0, #21, 47bf8 <aarch64_opcode_lookup@@Base+0x16a8>
   46824:	tbnz	w0, #31, 499fc <aarch64_opcode_lookup@@Base+0x34ac>
   46828:	tst	x0, #0x40000000
   4682c:	mov	w1, #0x3b0                 	// #944
   46830:	mov	w0, #0x3aa                 	// #938
   46834:	csel	w1, w0, w1, eq  // eq = none
   46838:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4683c:	tbnz	w0, #30, 469d4 <aarch64_opcode_lookup@@Base+0x484>
   46840:	tbnz	w0, #31, 47024 <aarch64_opcode_lookup@@Base+0xad4>
   46844:	tbnz	w0, #21, 47068 <aarch64_opcode_lookup@@Base+0xb18>
   46848:	tbnz	w0, #20, 476e0 <aarch64_opcode_lookup@@Base+0x1190>
   4684c:	tbnz	w0, #22, 47ee4 <aarch64_opcode_lookup@@Base+0x1994>
   46850:	tst	x0, #0x800000
   46854:	mov	w1, #0x503                 	// #1283
   46858:	mov	w0, #0x6db                 	// #1755
   4685c:	csel	w1, w0, w1, eq  // eq = none
   46860:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46864:	tst	x0, #0x40000000
   46868:	mov	w1, #0x11                  	// #17
   4686c:	mov	w0, #0xe                   	// #14
   46870:	csel	w1, w0, w1, eq  // eq = none
   46874:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46878:	tbnz	w0, #29, 46a68 <aarch64_opcode_lookup@@Base+0x518>
   4687c:	mov	w1, #0x3da                 	// #986
   46880:	tbz	w0, #31, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46884:	ubfx	x0, x0, #30, #1
   46888:	add	w1, w0, #0x3dc
   4688c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46890:	tbnz	w0, #23, 46a94 <aarch64_opcode_lookup@@Base+0x544>
   46894:	tbnz	w0, #24, 46d34 <aarch64_opcode_lookup@@Base+0x7e4>
   46898:	tst	x0, #0x20000000
   4689c:	mov	w1, #0x3cd                 	// #973
   468a0:	mov	w0, #0x1bc                 	// #444
   468a4:	csel	w1, w0, w1, eq  // eq = none
   468a8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   468ac:	tst	x0, #0x2000000
   468b0:	mov	w1, #0x4d5                 	// #1237
   468b4:	mov	w0, #0x290                 	// #656
   468b8:	csel	w1, w0, w1, eq  // eq = none
   468bc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   468c0:	tbnz	w0, #21, 46ae4 <aarch64_opcode_lookup@@Base+0x594>
   468c4:	tbnz	w0, #15, 46f44 <aarch64_opcode_lookup@@Base+0x9f4>
   468c8:	tbnz	w0, #30, 471b0 <aarch64_opcode_lookup@@Base+0xc60>
   468cc:	tbnz	w0, #13, 478ac <aarch64_opcode_lookup@@Base+0x135c>
   468d0:	tbnz	w0, #14, 482e4 <aarch64_opcode_lookup@@Base+0x1d94>
   468d4:	tbnz	w0, #31, 491ec <aarch64_opcode_lookup@@Base+0x2c9c>
   468d8:	tst	x0, #0x10
   468dc:	mov	w1, #0x52e                 	// #1326
   468e0:	mov	w0, #0x531                 	// #1329
   468e4:	csel	w1, w0, w1, eq  // eq = none
   468e8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   468ec:	lsr	w1, w0, #31
   468f0:	add	w1, w1, #0x27c
   468f4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   468f8:	mov	w1, #0x4a1                 	// #1185
   468fc:	tbnz	w0, #29, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46900:	tst	x0, #0x40000000
   46904:	mov	w1, #0x49f                 	// #1183
   46908:	mov	w0, #0x49d                 	// #1181
   4690c:	csel	w1, w0, w1, eq  // eq = none
   46910:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46914:	tbnz	w0, #29, 469a0 <aarch64_opcode_lookup@@Base+0x450>
   46918:	tst	x0, #0x40000000
   4691c:	mov	w1, #0x3ed                 	// #1005
   46920:	mov	w0, #0x3e6                 	// #998
   46924:	csel	w1, w0, w1, eq  // eq = none
   46928:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4692c:	ubfx	x0, x0, #22, #1
   46930:	add	w1, w0, #0x37b
   46934:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46938:	tbnz	w0, #28, 46be0 <aarch64_opcode_lookup@@Base+0x690>
   4693c:	tbnz	w0, #10, 46c80 <aarch64_opcode_lookup@@Base+0x730>
   46940:	tbnz	w0, #12, 472a4 <aarch64_opcode_lookup@@Base+0xd54>
   46944:	tbnz	w0, #13, 479f4 <aarch64_opcode_lookup@@Base+0x14a4>
   46948:	tbnz	w0, #14, 4817c <aarch64_opcode_lookup@@Base+0x1c2c>
   4694c:	tbz	w0, #29, 49c30 <aarch64_opcode_lookup@@Base+0x36e0>
   46950:	tst	x0, #0x40000000
   46954:	mov	w1, #0x944                 	// #2372
   46958:	mov	w0, #0x940                 	// #2368
   4695c:	csel	w1, w0, w1, eq  // eq = none
   46960:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46964:	tbnz	w0, #28, 46b6c <aarch64_opcode_lookup@@Base+0x61c>
   46968:	tbnz	w0, #29, 46cd4 <aarch64_opcode_lookup@@Base+0x784>
   4696c:	tst	x0, #0x40000000
   46970:	mov	w1, #0x18                  	// #24
   46974:	mov	w0, #0x15                  	// #21
   46978:	csel	w1, w0, w1, eq  // eq = none
   4697c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46980:	tbnz	w0, #28, 46c20 <aarch64_opcode_lookup@@Base+0x6d0>
   46984:	tbnz	w0, #29, 46c4c <aarch64_opcode_lookup@@Base+0x6fc>
   46988:	tbnz	w0, #31, 47620 <aarch64_opcode_lookup@@Base+0x10d0>
   4698c:	tbnz	w0, #10, 476bc <aarch64_opcode_lookup@@Base+0x116c>
   46990:	tbnz	w0, #11, 47eb4 <aarch64_opcode_lookup@@Base+0x1964>
   46994:	ubfx	x0, x0, #12, #1
   46998:	add	w1, w0, #0x1a4
   4699c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   469a0:	tst	x0, #0x40000000
   469a4:	mov	w1, #0x3f0                 	// #1008
   469a8:	mov	w0, #0x3ea                 	// #1002
   469ac:	csel	w1, w0, w1, eq  // eq = none
   469b0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   469b4:	tbnz	w0, #10, 46df4 <aarch64_opcode_lookup@@Base+0x8a4>
   469b8:	tbnz	w0, #11, 470d8 <aarch64_opcode_lookup@@Base+0xb88>
   469bc:	tbnz	w0, #22, 47b84 <aarch64_opcode_lookup@@Base+0x1634>
   469c0:	tbnz	w0, #23, 48140 <aarch64_opcode_lookup@@Base+0x1bf0>
   469c4:	tbnz	w0, #29, 48f38 <aarch64_opcode_lookup@@Base+0x29e8>
   469c8:	ubfx	x0, x0, #30, #1
   469cc:	lsl	w1, w0, #1
   469d0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   469d4:	tbnz	w0, #13, 46e70 <aarch64_opcode_lookup@@Base+0x920>
   469d8:	tbnz	w0, #14, 4710c <aarch64_opcode_lookup@@Base+0xbbc>
   469dc:	tbnz	w0, #15, 47d3c <aarch64_opcode_lookup@@Base+0x17ec>
   469e0:	tbnz	w0, #21, 485d0 <aarch64_opcode_lookup@@Base+0x2080>
   469e4:	tbnz	w0, #31, 4a214 <aarch64_opcode_lookup@@Base+0x3cc4>
   469e8:	tbnz	w0, #10, 49390 <aarch64_opcode_lookup@@Base+0x2e40>
   469ec:	tbnz	w0, #11, 4a090 <aarch64_opcode_lookup@@Base+0x3b40>
   469f0:	tst	x0, #0x1000
   469f4:	mov	w1, #0x8b9                 	// #2233
   469f8:	mov	w0, #0x84e                 	// #2126
   469fc:	csel	w1, w0, w1, eq  // eq = none
   46a00:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46a04:	tbnz	w0, #10, 46cfc <aarch64_opcode_lookup@@Base+0x7ac>
   46a08:	tbnz	w0, #11, 47304 <aarch64_opcode_lookup@@Base+0xdb4>
   46a0c:	tbnz	w0, #12, 47c50 <aarch64_opcode_lookup@@Base+0x1700>
   46a10:	tbnz	w0, #13, 482cc <aarch64_opcode_lookup@@Base+0x1d7c>
   46a14:	tbnz	w0, #14, 48f48 <aarch64_opcode_lookup@@Base+0x29f8>
   46a18:	tbnz	w0, #16, 4a4a4 <aarch64_opcode_lookup@@Base+0x3f54>
   46a1c:	tbnz	w0, #17, 4b710 <aarch64_opcode_lookup@@Base+0x51c0>
   46a20:	tbnz	w0, #18, 4bc68 <aarch64_opcode_lookup@@Base+0x5718>
   46a24:	tbnz	w0, #19, 4bf7c <aarch64_opcode_lookup@@Base+0x5a2c>
   46a28:	tst	x0, #0x100000
   46a2c:	mov	w1, #0x313                 	// #787
   46a30:	mov	w0, #0x2ff                 	// #767
   46a34:	csel	w1, w0, w1, eq  // eq = none
   46a38:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46a3c:	tbnz	w0, #29, 46d1c <aarch64_opcode_lookup@@Base+0x7cc>
   46a40:	tbnz	w0, #10, 473a8 <aarch64_opcode_lookup@@Base+0xe58>
   46a44:	tbnz	w0, #11, 47a28 <aarch64_opcode_lookup@@Base+0x14d8>
   46a48:	tbnz	w0, #21, 4829c <aarch64_opcode_lookup@@Base+0x1d4c>
   46a4c:	tbnz	w0, #22, 48e1c <aarch64_opcode_lookup@@Base+0x28cc>
   46a50:	tbnz	w0, #30, 4ac78 <aarch64_opcode_lookup@@Base+0x4728>
   46a54:	cmp	w0, #0x0
   46a58:	mov	w1, #0x953                 	// #2387
   46a5c:	mov	w0, #0x94c                 	// #2380
   46a60:	csel	w1, w0, w1, ge  // ge = tcont
   46a64:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46a68:	tbnz	w0, #10, 46e98 <aarch64_opcode_lookup@@Base+0x948>
   46a6c:	tbnz	w0, #11, 47170 <aarch64_opcode_lookup@@Base+0xc20>
   46a70:	tbnz	w0, #21, 47ad0 <aarch64_opcode_lookup@@Base+0x1580>
   46a74:	tbnz	w0, #23, 480f8 <aarch64_opcode_lookup@@Base+0x1ba8>
   46a78:	tbnz	w0, #22, 48ea4 <aarch64_opcode_lookup@@Base+0x2954>
   46a7c:	tbnz	w0, #31, 4b00c <aarch64_opcode_lookup@@Base+0x4abc>
   46a80:	tst	x0, #0x40000000
   46a84:	mov	w1, #0x39e                 	// #926
   46a88:	mov	w0, #0x399                 	// #921
   46a8c:	csel	w1, w0, w1, eq  // eq = none
   46a90:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46a94:	mov	w1, #0x3d7                 	// #983
   46a98:	tbnz	w0, #29, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46a9c:	tbnz	w0, #21, 47044 <aarch64_opcode_lookup@@Base+0xaf4>
   46aa0:	mov	w1, #0x1c4                 	// #452
   46aa4:	tbz	w0, #24, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46aa8:	ubfx	x0, x0, #13, #1
   46aac:	add	w1, w0, #0x1d8
   46ab0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46ab4:	tst	x0, #0x8000
   46ab8:	mov	w1, #0x2ea                 	// #746
   46abc:	mov	w0, #0x2e8                 	// #744
   46ac0:	csel	w1, w0, w1, eq  // eq = none
   46ac4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46ac8:	tbnz	w0, #29, 46ebc <aarch64_opcode_lookup@@Base+0x96c>
   46acc:	tbnz	w0, #30, 47194 <aarch64_opcode_lookup@@Base+0xc44>
   46ad0:	tst	x0, #0x200000
   46ad4:	mov	w1, #0x35d                 	// #861
   46ad8:	mov	w0, #0x359                 	// #857
   46adc:	csel	w1, w0, w1, eq  // eq = none
   46ae0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46ae4:	tbnz	w0, #13, 46ed8 <aarch64_opcode_lookup@@Base+0x988>
   46ae8:	tbnz	w0, #30, 47388 <aarch64_opcode_lookup@@Base+0xe38>
   46aec:	tbnz	w0, #31, 47d9c <aarch64_opcode_lookup@@Base+0x184c>
   46af0:	tst	x0, #0x10
   46af4:	mov	w1, #0x530                 	// #1328
   46af8:	mov	w0, #0x533                 	// #1331
   46afc:	csel	w1, w0, w1, eq  // eq = none
   46b00:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46b04:	tbnz	w0, #21, 46e2c <aarch64_opcode_lookup@@Base+0x8dc>
   46b08:	mov	w1, #0x32a                 	// #810
   46b0c:	tbz	w0, #25, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46b10:	ubfx	x0, x0, #10, #1
   46b14:	add	w1, w0, #0x283
   46b18:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46b1c:	tbnz	w0, #29, 46d68 <aarch64_opcode_lookup@@Base+0x818>
   46b20:	tbnz	w0, #15, 472c4 <aarch64_opcode_lookup@@Base+0xd74>
   46b24:	tbnz	w0, #21, 47a34 <aarch64_opcode_lookup@@Base+0x14e4>
   46b28:	tbnz	w0, #31, 49700 <aarch64_opcode_lookup@@Base+0x31b0>
   46b2c:	ubfx	x0, x0, #30, #1
   46b30:	add	w1, w0, #0x3c5
   46b34:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46b38:	tbnz	w0, #14, 46f08 <aarch64_opcode_lookup@@Base+0x9b8>
   46b3c:	tbnz	w0, #15, 47200 <aarch64_opcode_lookup@@Base+0xcb0>
   46b40:	tbnz	w0, #21, 47708 <aarch64_opcode_lookup@@Base+0x11b8>
   46b44:	tbnz	w0, #30, 48574 <aarch64_opcode_lookup@@Base+0x2024>
   46b48:	tbnz	w0, #31, 495ac <aarch64_opcode_lookup@@Base+0x305c>
   46b4c:	tbnz	w0, #17, 49a40 <aarch64_opcode_lookup@@Base+0x34f0>
   46b50:	tbnz	w0, #19, 4acb4 <aarch64_opcode_lookup@@Base+0x4764>
   46b54:	tbnz	w0, #20, 4ba3c <aarch64_opcode_lookup@@Base+0x54ec>
   46b58:	tst	x0, #0x10000
   46b5c:	mov	w1, #0x7a7                 	// #1959
   46b60:	mov	w0, #0x70f                 	// #1807
   46b64:	csel	w1, w0, w1, eq  // eq = none
   46b68:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46b6c:	mov	w1, #0x2e1                 	// #737
   46b70:	tbnz	w0, #15, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46b74:	mov	w1, #0x2df                 	// #735
   46b78:	tbz	w0, #22, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46b7c:	tst	x0, #0x800000
   46b80:	mov	w1, #0x2ec                 	// #748
   46b84:	mov	w0, #0x2e7                 	// #743
   46b88:	csel	w1, w0, w1, eq  // eq = none
   46b8c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46b90:	tbnz	w0, #29, 46d7c <aarch64_opcode_lookup@@Base+0x82c>
   46b94:	tbnz	w0, #15, 475a8 <aarch64_opcode_lookup@@Base+0x1058>
   46b98:	tbnz	w0, #21, 47b50 <aarch64_opcode_lookup@@Base+0x1600>
   46b9c:	mvn	w0, w0
   46ba0:	lsr	w1, w0, #31
   46ba4:	add	w1, w1, #0x3c7
   46ba8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46bac:	tst	x0, #0x40000000
   46bb0:	mov	w1, #0x3e3                 	// #995
   46bb4:	mov	w0, #0x3e0                 	// #992
   46bb8:	csel	w1, w0, w1, eq  // eq = none
   46bbc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46bc0:	mov	w1, #0x3d6                 	// #982
   46bc4:	tbnz	w0, #29, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46bc8:	tbnz	w0, #21, 47050 <aarch64_opcode_lookup@@Base+0xb00>
   46bcc:	mov	w1, #0x1c0                 	// #448
   46bd0:	tbz	w0, #24, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46bd4:	ubfx	x0, x0, #13, #1
   46bd8:	add	w1, w0, #0x1d4
   46bdc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46be0:	tbnz	w0, #29, 46fac <aarch64_opcode_lookup@@Base+0xa5c>
   46be4:	tbnz	w0, #30, 474e8 <aarch64_opcode_lookup@@Base+0xf98>
   46be8:	tst	x0, #0x200000
   46bec:	mov	w1, #0x35f                 	// #863
   46bf0:	mov	w0, #0x35b                 	// #859
   46bf4:	csel	w1, w0, w1, eq  // eq = none
   46bf8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46bfc:	tbnz	w0, #21, 46d90 <aarch64_opcode_lookup@@Base+0x840>
   46c00:	tbnz	w0, #30, 474b8 <aarch64_opcode_lookup@@Base+0xf68>
   46c04:	tbnz	w0, #14, 478fc <aarch64_opcode_lookup@@Base+0x13ac>
   46c08:	tbnz	w0, #13, 48700 <aarch64_opcode_lookup@@Base+0x21b0>
   46c0c:	tst	x0, #0x10
   46c10:	mov	w1, #0x53e                 	// #1342
   46c14:	mov	w0, #0x527                 	// #1319
   46c18:	csel	w1, w0, w1, eq  // eq = none
   46c1c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46c20:	tbnz	w0, #29, 46f84 <aarch64_opcode_lookup@@Base+0xa34>
   46c24:	tbnz	w0, #30, 47098 <aarch64_opcode_lookup@@Base+0xb48>
   46c28:	tbnz	w0, #16, 476f4 <aarch64_opcode_lookup@@Base+0x11a4>
   46c2c:	tst	x0, #0x20000
   46c30:	mov	w1, #0x2f7                 	// #759
   46c34:	mov	w0, #0x2fb                 	// #763
   46c38:	csel	w1, w0, w1, eq  // eq = none
   46c3c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46c40:	ubfx	x0, x0, #22, #1
   46c44:	add	w1, w0, #0x368
   46c48:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46c4c:	mov	w1, #0x84                  	// #132
   46c50:	tbz	w0, #10, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46c54:	tbnz	w0, #15, 47660 <aarch64_opcode_lookup@@Base+0x1110>
   46c58:	mov	w1, #0x9c                  	// #156
   46c5c:	tbz	w0, #22, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46c60:	tbnz	w0, #11, 47ecc <aarch64_opcode_lookup@@Base+0x197c>
   46c64:	tbnz	w0, #12, 48a50 <aarch64_opcode_lookup@@Base+0x2500>
   46c68:	tbnz	w0, #13, 49824 <aarch64_opcode_lookup@@Base+0x32d4>
   46c6c:	tst	x0, #0x800000
   46c70:	mov	w1, #0x167                 	// #359
   46c74:	mov	w0, #0x157                 	// #343
   46c78:	csel	w1, w0, w1, eq  // eq = none
   46c7c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46c80:	tbnz	w0, #11, 4715c <aarch64_opcode_lookup@@Base+0xc0c>
   46c84:	tbnz	w0, #14, 47958 <aarch64_opcode_lookup@@Base+0x1408>
   46c88:	tbnz	w0, #12, 47f50 <aarch64_opcode_lookup@@Base+0x1a00>
   46c8c:	tst	x0, #0x20000000
   46c90:	mov	w1, #0x8f                  	// #143
   46c94:	mov	w0, #0x87                  	// #135
   46c98:	csel	w1, w0, w1, eq  // eq = none
   46c9c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46ca0:	tbnz	w0, #29, 4757c <aarch64_opcode_lookup@@Base+0x102c>
   46ca4:	mov	w1, #0x375                 	// #885
   46ca8:	tbnz	w0, #10, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46cac:	mov	w1, #0x371                 	// #881
   46cb0:	tbnz	w0, #11, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46cb4:	mov	w1, #0x3a5                 	// #933
   46cb8:	tbnz	w0, #21, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46cbc:	tbnz	w0, #30, 48730 <aarch64_opcode_lookup@@Base+0x21e0>
   46cc0:	cmp	w0, #0x0
   46cc4:	mov	w1, #0x952                 	// #2386
   46cc8:	mov	w0, #0x94a                 	// #2378
   46ccc:	csel	w1, w0, w1, ge  // ge = tcont
   46cd0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46cd4:	tst	x0, #0x40000000
   46cd8:	mov	w1, #0x1a                  	// #26
   46cdc:	mov	w0, #0x16                  	// #22
   46ce0:	csel	w1, w0, w1, eq  // eq = none
   46ce4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46ce8:	tst	x0, #0x40000000
   46cec:	mov	w1, #0x3d3                 	// #979
   46cf0:	mov	w0, #0x3ca                 	// #970
   46cf4:	csel	w1, w0, w1, eq  // eq = none
   46cf8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46cfc:	tbnz	w0, #11, 47434 <aarch64_opcode_lookup@@Base+0xee4>
   46d00:	tbnz	w0, #29, 4777c <aarch64_opcode_lookup@@Base+0x122c>
   46d04:	tbnz	w0, #30, 48498 <aarch64_opcode_lookup@@Base+0x1f48>
   46d08:	tst	x0, #0x10
   46d0c:	mov	w1, #0x320                 	// #800
   46d10:	mov	w0, #0x31e                 	// #798
   46d14:	csel	w1, w0, w1, eq  // eq = none
   46d18:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46d1c:	tbnz	w0, #30, 4724c <aarch64_opcode_lookup@@Base+0xcfc>
   46d20:	cmp	w0, #0x0
   46d24:	mov	w1, #0x382                 	// #898
   46d28:	mov	w0, #0x37a                 	// #890
   46d2c:	csel	w1, w0, w1, ge  // ge = tcont
   46d30:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46d34:	mov	w1, #0x3d1                 	// #977
   46d38:	tbnz	w0, #29, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46d3c:	tbnz	w0, #13, 4764c <aarch64_opcode_lookup@@Base+0x10fc>
   46d40:	tst	x0, #0x200000
   46d44:	mov	w1, #0x1d0                 	// #464
   46d48:	mov	w0, #0x1cc                 	// #460
   46d4c:	csel	w1, w0, w1, eq  // eq = none
   46d50:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46d54:	tst	x0, #0x40000000
   46d58:	mov	w1, #0x3ee                 	// #1006
   46d5c:	mov	w0, #0x3e7                 	// #999
   46d60:	csel	w1, w0, w1, eq  // eq = none
   46d64:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46d68:	tst	x0, #0x40000000
   46d6c:	mov	w1, #0x3d8                 	// #984
   46d70:	mov	w0, #0x3d5                 	// #981
   46d74:	csel	w1, w0, w1, eq  // eq = none
   46d78:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46d7c:	tst	x0, #0x40000000
   46d80:	mov	w1, #0x3d9                 	// #985
   46d84:	mov	w0, #0x3d4                 	// #980
   46d88:	csel	w1, w0, w1, eq  // eq = none
   46d8c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46d90:	tbnz	w0, #30, 47328 <aarch64_opcode_lookup@@Base+0xdd8>
   46d94:	tbnz	w0, #14, 47c28 <aarch64_opcode_lookup@@Base+0x16d8>
   46d98:	tbnz	w0, #20, 48000 <aarch64_opcode_lookup@@Base+0x1ab0>
   46d9c:	tbnz	w0, #31, 49298 <aarch64_opcode_lookup@@Base+0x2d48>
   46da0:	tbnz	w0, #16, 49aac <aarch64_opcode_lookup@@Base+0x355c>
   46da4:	tbnz	w0, #17, 4b540 <aarch64_opcode_lookup@@Base+0x4ff0>
   46da8:	tbnz	w0, #18, 4b388 <aarch64_opcode_lookup@@Base+0x4e38>
   46dac:	tbz	w0, #19, 4be8c <aarch64_opcode_lookup@@Base+0x593c>
   46db0:	tbnz	w0, #10, 4c11c <aarch64_opcode_lookup@@Base+0x5bcc>
   46db4:	tbnz	w0, #11, 4c114 <aarch64_opcode_lookup@@Base+0x5bc4>
   46db8:	tst	x0, #0x1000
   46dbc:	mov	w1, #0x7ec                 	// #2028
   46dc0:	mov	w0, #0x73f                 	// #1855
   46dc4:	csel	w1, w0, w1, eq  // eq = none
   46dc8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46dcc:	tbnz	w0, #10, 470e8 <aarch64_opcode_lookup@@Base+0xb98>
   46dd0:	mov	w1, #0x289                 	// #649
   46dd4:	tbnz	w0, #21, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46dd8:	mov	w1, #0x28b                 	// #651
   46ddc:	tbnz	w0, #22, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46de0:	tst	x0, #0x800000
   46de4:	mov	w1, #0x28d                 	// #653
   46de8:	mov	w0, #0x287                 	// #647
   46dec:	csel	w1, w0, w1, eq  // eq = none
   46df0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46df4:	tbnz	w0, #11, 472e0 <aarch64_opcode_lookup@@Base+0xd90>
   46df8:	tbnz	w0, #22, 47a08 <aarch64_opcode_lookup@@Base+0x14b8>
   46dfc:	mov	w1, #0x946                 	// #2374
   46e00:	tbz	w0, #23, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46e04:	tst	x0, #0x40000000
   46e08:	mov	w1, #0x29d                 	// #669
   46e0c:	mov	w0, #0x297                 	// #663
   46e10:	csel	w1, w0, w1, eq  // eq = none
   46e14:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46e18:	tst	x0, #0x40000000
   46e1c:	mov	w1, #0x3d2                 	// #978
   46e20:	mov	w0, #0x3cb                 	// #971
   46e24:	csel	w1, w0, w1, eq  // eq = none
   46e28:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46e2c:	mov	w1, #0x4a4                 	// #1188
   46e30:	tbz	w0, #25, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46e34:	ubfx	x0, x0, #10, #1
   46e38:	add	w1, w0, #0x285
   46e3c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46e40:	tbnz	w0, #10, 47134 <aarch64_opcode_lookup@@Base+0xbe4>
   46e44:	tbnz	w0, #11, 477ac <aarch64_opcode_lookup@@Base+0x125c>
   46e48:	tbnz	w0, #12, 48098 <aarch64_opcode_lookup@@Base+0x1b48>
   46e4c:	tbnz	w0, #13, 48d08 <aarch64_opcode_lookup@@Base+0x27b8>
   46e50:	tbnz	w0, #14, 4a330 <aarch64_opcode_lookup@@Base+0x3de0>
   46e54:	tbnz	w0, #29, 4ab84 <aarch64_opcode_lookup@@Base+0x4634>
   46e58:	tbz	w0, #30, 4c1e8 <aarch64_opcode_lookup@@Base+0x5c98>
   46e5c:	cmp	w0, #0x0
   46e60:	mov	w1, #0x925                 	// #2341
   46e64:	mov	w0, #0x3d                  	// #61
   46e68:	csel	w1, w0, w1, ge  // ge = tcont
   46e6c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46e70:	tbnz	w0, #14, 471d8 <aarch64_opcode_lookup@@Base+0xc88>
   46e74:	tbnz	w0, #15, 47af8 <aarch64_opcode_lookup@@Base+0x15a8>
   46e78:	tbnz	w0, #21, 480ac <aarch64_opcode_lookup@@Base+0x1b5c>
   46e7c:	tbnz	w0, #31, 49ca4 <aarch64_opcode_lookup@@Base+0x3754>
   46e80:	tbnz	w0, #10, 49240 <aarch64_opcode_lookup@@Base+0x2cf0>
   46e84:	tst	x0, #0x800
   46e88:	mov	w1, #0x8ce                 	// #2254
   46e8c:	mov	w0, #0x84b                 	// #2123
   46e90:	csel	w1, w0, w1, eq  // eq = none
   46e94:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46e98:	tbnz	w0, #21, 47344 <aarch64_opcode_lookup@@Base+0xdf4>
   46e9c:	tbnz	w0, #23, 4793c <aarch64_opcode_lookup@@Base+0x13ec>
   46ea0:	tbnz	w0, #22, 48164 <aarch64_opcode_lookup@@Base+0x1c14>
   46ea4:	tbnz	w0, #31, 49cf8 <aarch64_opcode_lookup@@Base+0x37a8>
   46ea8:	tst	x0, #0x40000000
   46eac:	mov	w1, #0x36a                 	// #874
   46eb0:	mov	w0, #0x365                 	// #869
   46eb4:	csel	w1, w0, w1, eq  // eq = none
   46eb8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46ebc:	tbnz	w0, #12, 47460 <aarch64_opcode_lookup@@Base+0xf10>
   46ec0:	tbnz	w0, #13, 47798 <aarch64_opcode_lookup@@Base+0x1248>
   46ec4:	tst	x0, #0x4000
   46ec8:	mov	w1, #0x25e                 	// #606
   46ecc:	mov	w0, #0x25a                 	// #602
   46ed0:	csel	w1, w0, w1, eq  // eq = none
   46ed4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46ed8:	tbnz	w0, #30, 473b4 <aarch64_opcode_lookup@@Base+0xe64>
   46edc:	tbnz	w0, #31, 47dac <aarch64_opcode_lookup@@Base+0x185c>
   46ee0:	tst	x0, #0x10
   46ee4:	mov	w1, #0x539                 	// #1337
   46ee8:	mov	w0, #0x537                 	// #1335
   46eec:	csel	w1, w0, w1, eq  // eq = none
   46ef0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46ef4:	tst	x0, #0x8000
   46ef8:	mov	w1, #0x2e5                 	// #741
   46efc:	mov	w0, #0x2e3                 	// #739
   46f00:	csel	w1, w0, w1, eq  // eq = none
   46f04:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46f08:	tbnz	w0, #15, 47350 <aarch64_opcode_lookup@@Base+0xe00>
   46f0c:	tbnz	w0, #21, 47c94 <aarch64_opcode_lookup@@Base+0x1744>
   46f10:	tbnz	w0, #30, 486e0 <aarch64_opcode_lookup@@Base+0x2190>
   46f14:	tbz	w0, #31, 49898 <aarch64_opcode_lookup@@Base+0x3348>
   46f18:	tst	x0, #0x800000
   46f1c:	mov	w1, #0x66c                 	// #1644
   46f20:	mov	w0, #0x658                 	// #1624
   46f24:	csel	w1, w0, w1, eq  // eq = none
   46f28:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46f2c:	tbnz	w0, #12, 475c4 <aarch64_opcode_lookup@@Base+0x1074>
   46f30:	tst	x0, #0x20000000
   46f34:	mov	w1, #0x8d                  	// #141
   46f38:	mov	w0, #0x85                  	// #133
   46f3c:	csel	w1, w0, w1, eq  // eq = none
   46f40:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46f44:	tbnz	w0, #13, 470b8 <aarch64_opcode_lookup@@Base+0xb68>
   46f48:	tbnz	w0, #30, 47a4c <aarch64_opcode_lookup@@Base+0x14fc>
   46f4c:	tbnz	w0, #14, 48194 <aarch64_opcode_lookup@@Base+0x1c44>
   46f50:	tst	x0, #0x10
   46f54:	mov	w1, #0x52c                 	// #1324
   46f58:	mov	w0, #0x529                 	// #1321
   46f5c:	csel	w1, w0, w1, eq  // eq = none
   46f60:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46f64:	mov	w1, #0x3d0                 	// #976
   46f68:	tbnz	w0, #29, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46f6c:	tbnz	w0, #13, 47638 <aarch64_opcode_lookup@@Base+0x10e8>
   46f70:	tst	x0, #0x200000
   46f74:	mov	w1, #0x1ca                 	// #458
   46f78:	mov	w0, #0x1c8                 	// #456
   46f7c:	csel	w1, w0, w1, eq  // eq = none
   46f80:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46f84:	tbnz	w0, #11, 47544 <aarch64_opcode_lookup@@Base+0xff4>
   46f88:	mov	w1, #0x241                 	// #577
   46f8c:	tbnz	w0, #12, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46f90:	mov	w1, #0x24c                 	// #588
   46f94:	tbz	w0, #13, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46f98:	tst	x0, #0x800000
   46f9c:	mov	w1, #0x243                 	// #579
   46fa0:	mov	w0, #0x23d                 	// #573
   46fa4:	csel	w1, w0, w1, eq  // eq = none
   46fa8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46fac:	tbnz	w0, #10, 475d8 <aarch64_opcode_lookup@@Base+0x1088>
   46fb0:	mov	w1, #0x1b7                 	// #439
   46fb4:	tbnz	w0, #13, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46fb8:	mov	w1, #0x1b6                 	// #438
   46fbc:	tbnz	w0, #14, 46568 <aarch64_opcode_lookup@@Base+0x18>
   46fc0:	tst	x0, #0x800000
   46fc4:	cset	w0, eq  // eq = none
   46fc8:	add	w1, w0, #0x1b4
   46fcc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46fd0:	tbnz	w0, #15, 47400 <aarch64_opcode_lookup@@Base+0xeb0>
   46fd4:	tbnz	w0, #21, 47760 <aarch64_opcode_lookup@@Base+0x1210>
   46fd8:	tbnz	w0, #30, 48328 <aarch64_opcode_lookup@@Base+0x1dd8>
   46fdc:	tbz	w0, #31, 49808 <aarch64_opcode_lookup@@Base+0x32b8>
   46fe0:	tst	x0, #0x800000
   46fe4:	mov	w1, #0x5f0                 	// #1520
   46fe8:	mov	w0, #0x5dc                 	// #1500
   46fec:	csel	w1, w0, w1, eq  // eq = none
   46ff0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   46ff4:	tbnz	w0, #30, 47280 <aarch64_opcode_lookup@@Base+0xd30>
   46ff8:	tbnz	w0, #21, 47a6c <aarch64_opcode_lookup@@Base+0x151c>
   46ffc:	tbnz	w0, #22, 47f98 <aarch64_opcode_lookup@@Base+0x1a48>
   47000:	tbnz	w0, #23, 48c74 <aarch64_opcode_lookup@@Base+0x2724>
   47004:	tbnz	w0, #31, 49bb0 <aarch64_opcode_lookup@@Base+0x3660>
   47008:	tbnz	w0, #9, 4ad14 <aarch64_opcode_lookup@@Base+0x47c4>
   4700c:	tbnz	w0, #20, 4aa14 <aarch64_opcode_lookup@@Base+0x44c4>
   47010:	tst	x0, #0x10
   47014:	mov	w1, #0x511                 	// #1297
   47018:	mov	w0, #0x505                 	// #1285
   4701c:	csel	w1, w0, w1, eq  // eq = none
   47020:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47024:	tbnz	w0, #13, 475f8 <aarch64_opcode_lookup@@Base+0x10a8>
   47028:	tbnz	w0, #14, 47e2c <aarch64_opcode_lookup@@Base+0x18dc>
   4702c:	tbnz	w0, #15, 48880 <aarch64_opcode_lookup@@Base+0x2330>
   47030:	tst	x0, #0x400000
   47034:	mov	w1, #0x6e8                 	// #1768
   47038:	mov	w0, #0x6bc                 	// #1724
   4703c:	csel	w1, w0, w1, eq  // eq = none
   47040:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47044:	ubfx	x0, x0, #13, #1
   47048:	add	w1, w0, #0x1dc
   4704c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47050:	ubfx	x0, x0, #13, #1
   47054:	add	w1, w0, #0x1d6
   47058:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4705c:	ubfx	x0, x0, #22, #1
   47060:	add	w1, w0, #0x387
   47064:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47068:	tbnz	w0, #14, 47688 <aarch64_opcode_lookup@@Base+0x1138>
   4706c:	tbnz	w0, #13, 47ef8 <aarch64_opcode_lookup@@Base+0x19a8>
   47070:	tbnz	w0, #15, 48ac8 <aarch64_opcode_lookup@@Base+0x2578>
   47074:	tbnz	w0, #22, 4b5e0 <aarch64_opcode_lookup@@Base+0x5090>
   47078:	tbz	w0, #23, 4b144 <aarch64_opcode_lookup@@Base+0x4bf4>
   4707c:	tbnz	w0, #10, 49c40 <aarch64_opcode_lookup@@Base+0x36f0>
   47080:	tbz	w0, #11, 4be94 <aarch64_opcode_lookup@@Base+0x5944>
   47084:	tst	x0, #0x1000
   47088:	mov	w1, #0x96b                 	// #2411
   4708c:	mov	w0, #0x969                 	// #2409
   47090:	csel	w1, w0, w1, eq  // eq = none
   47094:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47098:	tbnz	w0, #10, 47d60 <aarch64_opcode_lookup@@Base+0x1810>
   4709c:	tbnz	w0, #12, 47f38 <aarch64_opcode_lookup@@Base+0x19e8>
   470a0:	tbnz	w0, #13, 48d4c <aarch64_opcode_lookup@@Base+0x27fc>
   470a4:	tst	x0, #0x4000
   470a8:	mov	w1, #0x2aa                 	// #682
   470ac:	mov	w0, #0x2a6                 	// #678
   470b0:	csel	w1, w0, w1, eq  // eq = none
   470b4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   470b8:	tbnz	w0, #14, 47cb8 <aarch64_opcode_lookup@@Base+0x1768>
   470bc:	tbnz	w0, #30, 481c8 <aarch64_opcode_lookup@@Base+0x1c78>
   470c0:	tbnz	w0, #31, 4927c <aarch64_opcode_lookup@@Base+0x2d2c>
   470c4:	tst	x0, #0x10
   470c8:	mov	w1, #0x53d                 	// #1341
   470cc:	mov	w0, #0x526                 	// #1318
   470d0:	csel	w1, w0, w1, eq  // eq = none
   470d4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   470d8:	tbnz	w0, #22, 47cd4 <aarch64_opcode_lookup@@Base+0x1784>
   470dc:	ubfx	x0, x0, #14, #1
   470e0:	add	w1, w0, #0x947
   470e4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   470e8:	mov	w1, #0x28a                 	// #650
   470ec:	tbnz	w0, #21, 46568 <aarch64_opcode_lookup@@Base+0x18>
   470f0:	mov	w1, #0x28c                 	// #652
   470f4:	tbnz	w0, #22, 46568 <aarch64_opcode_lookup@@Base+0x18>
   470f8:	tst	x0, #0x800000
   470fc:	mov	w1, #0x28e                 	// #654
   47100:	mov	w0, #0x288                 	// #648
   47104:	csel	w1, w0, w1, eq  // eq = none
   47108:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4710c:	tbnz	w0, #15, 477dc <aarch64_opcode_lookup@@Base+0x128c>
   47110:	tbnz	w0, #21, 481e4 <aarch64_opcode_lookup@@Base+0x1c94>
   47114:	tbnz	w0, #31, 4930c <aarch64_opcode_lookup@@Base+0x2dbc>
   47118:	tbnz	w0, #10, 49764 <aarch64_opcode_lookup@@Base+0x3214>
   4711c:	tbnz	w0, #11, 4ad40 <aarch64_opcode_lookup@@Base+0x47f0>
   47120:	tst	x0, #0x1000
   47124:	mov	w1, #0x8bd                 	// #2237
   47128:	mov	w0, #0x851                 	// #2129
   4712c:	csel	w1, w0, w1, eq  // eq = none
   47130:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47134:	tbnz	w0, #11, 47970 <aarch64_opcode_lookup@@Base+0x1420>
   47138:	tbnz	w0, #12, 47f64 <aarch64_opcode_lookup@@Base+0x1a14>
   4713c:	tbnz	w0, #13, 48d84 <aarch64_opcode_lookup@@Base+0x2834>
   47140:	tbnz	w0, #14, 49f1c <aarch64_opcode_lookup@@Base+0x39cc>
   47144:	tbnz	w0, #29, 4aebc <aarch64_opcode_lookup@@Base+0x496c>
   47148:	cmp	w0, #0x0
   4714c:	mov	w1, #0x926                 	// #2342
   47150:	mov	w0, #0x11b                 	// #283
   47154:	csel	w1, w0, w1, ge  // ge = tcont
   47158:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4715c:	tbnz	w0, #12, 47be4 <aarch64_opcode_lookup@@Base+0x1694>
   47160:	tbnz	w0, #29, 47ff4 <aarch64_opcode_lookup@@Base+0x1aa4>
   47164:	ubfx	x0, x0, #30, #1
   47168:	add	w1, w0, #0x17e
   4716c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47170:	tbnz	w0, #21, 4786c <aarch64_opcode_lookup@@Base+0x131c>
   47174:	tbnz	w0, #23, 483f8 <aarch64_opcode_lookup@@Base+0x1ea8>
   47178:	tbnz	w0, #22, 48ec8 <aarch64_opcode_lookup@@Base+0x2978>
   4717c:	tbnz	w0, #31, 4b014 <aarch64_opcode_lookup@@Base+0x4ac4>
   47180:	tst	x0, #0x40000000
   47184:	mov	w1, #0x393                 	// #915
   47188:	mov	w0, #0x390                 	// #912
   4718c:	csel	w1, w0, w1, eq  // eq = none
   47190:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47194:	tbnz	w0, #10, 478c8 <aarch64_opcode_lookup@@Base+0x1378>
   47198:	tbnz	w0, #13, 486b0 <aarch64_opcode_lookup@@Base+0x2160>
   4719c:	tbnz	w0, #14, 48e48 <aarch64_opcode_lookup@@Base+0x28f8>
   471a0:	tst	x0, #0x800000
   471a4:	cset	w0, eq  // eq = none
   471a8:	add	w1, w0, #0x1ae
   471ac:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   471b0:	mov	w1, #0x56a                 	// #1386
   471b4:	tbz	w0, #31, 46568 <aarch64_opcode_lookup@@Base+0x18>
   471b8:	tbnz	w0, #13, 47e68 <aarch64_opcode_lookup@@Base+0x1918>
   471bc:	mov	w1, #0x747                 	// #1863
   471c0:	tbz	w0, #22, 46568 <aarch64_opcode_lookup@@Base+0x18>
   471c4:	tst	x0, #0x800000
   471c8:	mov	w1, #0x760                 	// #1888
   471cc:	mov	w0, #0x74b                 	// #1867
   471d0:	csel	w1, w0, w1, eq  // eq = none
   471d4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   471d8:	tbnz	w0, #15, 47d78 <aarch64_opcode_lookup@@Base+0x1828>
   471dc:	tbnz	w0, #21, 484f0 <aarch64_opcode_lookup@@Base+0x1fa0>
   471e0:	tbnz	w0, #31, 4952c <aarch64_opcode_lookup@@Base+0x2fdc>
   471e4:	tbnz	w0, #10, 4997c <aarch64_opcode_lookup@@Base+0x342c>
   471e8:	tbnz	w0, #11, 4a688 <aarch64_opcode_lookup@@Base+0x4138>
   471ec:	tst	x0, #0x1000
   471f0:	mov	w1, #0x86c                 	// #2156
   471f4:	mov	w0, #0x888                 	// #2184
   471f8:	csel	w1, w0, w1, eq  // eq = none
   471fc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47200:	tbnz	w0, #30, 47994 <aarch64_opcode_lookup@@Base+0x1444>
   47204:	tbnz	w0, #31, 4877c <aarch64_opcode_lookup@@Base+0x222c>
   47208:	tbnz	w0, #21, 48b54 <aarch64_opcode_lookup@@Base+0x2604>
   4720c:	tbnz	w0, #16, 49b4c <aarch64_opcode_lookup@@Base+0x35fc>
   47210:	tbnz	w0, #17, 4ac48 <aarch64_opcode_lookup@@Base+0x46f8>
   47214:	tbnz	w0, #18, 4ac34 <aarch64_opcode_lookup@@Base+0x46e4>
   47218:	tst	x0, #0x80000
   4721c:	mov	w1, #0x523                 	// #1315
   47220:	mov	w0, #0x79e                 	// #1950
   47224:	csel	w1, w0, w1, eq  // eq = none
   47228:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4722c:	mov	w1, #0x83                  	// #131
   47230:	tbnz	w0, #29, 46568 <aarch64_opcode_lookup@@Base+0x18>
   47234:	tbnz	w0, #13, 47e40 <aarch64_opcode_lookup@@Base+0x18f0>
   47238:	tbnz	w0, #14, 487ec <aarch64_opcode_lookup@@Base+0x229c>
   4723c:	tst	x0, #0x800000
   47240:	cset	w0, eq  // eq = none
   47244:	add	w1, w0, #0x71
   47248:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4724c:	cmp	w0, #0x0
   47250:	mov	w1, #0x383                 	// #899
   47254:	mov	w0, #0x37f                 	// #895
   47258:	csel	w1, w0, w1, ge  // ge = tcont
   4725c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47260:	tbnz	w0, #10, 47ce4 <aarch64_opcode_lookup@@Base+0x1794>
   47264:	tbnz	w0, #11, 48364 <aarch64_opcode_lookup@@Base+0x1e14>
   47268:	tbnz	w0, #12, 48e08 <aarch64_opcode_lookup@@Base+0x28b8>
   4726c:	tbnz	w0, #13, 49d74 <aarch64_opcode_lookup@@Base+0x3824>
   47270:	tbnz	w0, #14, 4a618 <aarch64_opcode_lookup@@Base+0x40c8>
   47274:	ubfx	x0, x0, #30, #1
   47278:	add	w1, w0, #0x4c
   4727c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47280:	tbnz	w0, #13, 47744 <aarch64_opcode_lookup@@Base+0x11f4>
   47284:	tbnz	w0, #31, 48920 <aarch64_opcode_lookup@@Base+0x23d0>
   47288:	mov	w1, #0x5b0                 	// #1456
   4728c:	tbnz	w0, #21, 46568 <aarch64_opcode_lookup@@Base+0x18>
   47290:	tst	x0, #0x10
   47294:	mov	w1, #0x572                 	// #1394
   47298:	mov	w0, #0x570                 	// #1392
   4729c:	csel	w1, w0, w1, eq  // eq = none
   472a0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   472a4:	tbnz	w0, #13, 47d18 <aarch64_opcode_lookup@@Base+0x17c8>
   472a8:	tbnz	w0, #14, 48268 <aarch64_opcode_lookup@@Base+0x1d18>
   472ac:	tbnz	w0, #23, 4907c <aarch64_opcode_lookup@@Base+0x2b2c>
   472b0:	tst	x0, #0x20000000
   472b4:	mov	w1, #0x80                  	// #128
   472b8:	mov	w0, #0x76                  	// #118
   472bc:	csel	w1, w0, w1, eq  // eq = none
   472c0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   472c4:	tbnz	w0, #21, 47bb0 <aarch64_opcode_lookup@@Base+0x1660>
   472c8:	tbnz	w0, #31, 497a8 <aarch64_opcode_lookup@@Base+0x3258>
   472cc:	tst	x0, #0x40000000
   472d0:	mov	w1, #0x3b3                 	// #947
   472d4:	mov	w0, #0x3ad                 	// #941
   472d8:	csel	w1, w0, w1, eq  // eq = none
   472dc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   472e0:	tbnz	w0, #12, 478e0 <aarch64_opcode_lookup@@Base+0x1390>
   472e4:	tbnz	w0, #13, 4823c <aarch64_opcode_lookup@@Base+0x1cec>
   472e8:	tbnz	w0, #14, 4a1d8 <aarch64_opcode_lookup@@Base+0x3c88>
   472ec:	tbz	w0, #30, 4a1d0 <aarch64_opcode_lookup@@Base+0x3c80>
   472f0:	tst	x0, #0x10000
   472f4:	mov	w1, #0x2b8                 	// #696
   472f8:	mov	w0, #0x2b0                 	// #688
   472fc:	csel	w1, w0, w1, eq  // eq = none
   47300:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47304:	tbnz	w0, #12, 4788c <aarch64_opcode_lookup@@Base+0x133c>
   47308:	tbnz	w0, #13, 483d8 <aarch64_opcode_lookup@@Base+0x1e88>
   4730c:	tbnz	w0, #14, 49018 <aarch64_opcode_lookup@@Base+0x2ac8>
   47310:	tbnz	w0, #15, 4a420 <aarch64_opcode_lookup@@Base+0x3ed0>
   47314:	tst	x0, #0x40000000
   47318:	mov	w1, #0x2a3                 	// #675
   4731c:	mov	w0, #0x347                 	// #839
   47320:	csel	w1, w0, w1, eq  // eq = none
   47324:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47328:	tbnz	w0, #13, 47b1c <aarch64_opcode_lookup@@Base+0x15cc>
   4732c:	tbnz	w0, #31, 487b0 <aarch64_opcode_lookup@@Base+0x2260>
   47330:	tst	x0, #0x4000
   47334:	mov	w1, #0x5af                 	// #1455
   47338:	mov	w0, #0x591                 	// #1425
   4733c:	csel	w1, w0, w1, eq  // eq = none
   47340:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47344:	ubfx	x0, x0, #23, #1
   47348:	add	w1, w0, #0x3a6
   4734c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47350:	tbnz	w0, #30, 47bc8 <aarch64_opcode_lookup@@Base+0x1678>
   47354:	tbnz	w0, #31, 48958 <aarch64_opcode_lookup@@Base+0x2408>
   47358:	mov	w1, #0x6cf                 	// #1743
   4735c:	tbz	w0, #21, 46568 <aarch64_opcode_lookup@@Base+0x18>
   47360:	tbnz	w0, #10, 48f18 <aarch64_opcode_lookup@@Base+0x29c8>
   47364:	tbnz	w0, #11, 4a39c <aarch64_opcode_lookup@@Base+0x3e4c>
   47368:	tbnz	w0, #12, 4a744 <aarch64_opcode_lookup@@Base+0x41f4>
   4736c:	tbnz	w0, #20, 4a72c <aarch64_opcode_lookup@@Base+0x41dc>
   47370:	tbnz	w0, #22, 4c008 <aarch64_opcode_lookup@@Base+0x5ab8>
   47374:	tst	x0, #0x800000
   47378:	mov	w1, #0x545                 	// #1349
   4737c:	mov	w0, #0x541                 	// #1345
   47380:	csel	w1, w0, w1, eq  // eq = none
   47384:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47388:	tbnz	w0, #15, 47a88 <aarch64_opcode_lookup@@Base+0x1538>
   4738c:	tbnz	w0, #14, 48110 <aarch64_opcode_lookup@@Base+0x1bc0>
   47390:	tbnz	w0, #12, 48bec <aarch64_opcode_lookup@@Base+0x269c>
   47394:	tbnz	w0, #10, 4a2d4 <aarch64_opcode_lookup@@Base+0x3d84>
   47398:	tbz	w0, #23, 4a774 <aarch64_opcode_lookup@@Base+0x4224>
   4739c:	ubfx	x0, x0, #22, #1
   473a0:	add	w1, w0, #0x5a0
   473a4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   473a8:	ubfx	x0, x0, #22, #1
   473ac:	add	w1, w0, #0x376
   473b0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   473b4:	tbnz	w0, #14, 47b60 <aarch64_opcode_lookup@@Base+0x1610>
   473b8:	tbnz	w0, #15, 484d4 <aarch64_opcode_lookup@@Base+0x1f84>
   473bc:	tbz	w0, #23, 49c6c <aarch64_opcode_lookup@@Base+0x371c>
   473c0:	ubfx	x0, x0, #22, #1
   473c4:	add	w1, w0, #0x5ab
   473c8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   473cc:	tbnz	w0, #31, 48a88 <aarch64_opcode_lookup@@Base+0x2538>
   473d0:	tst	x0, #0x40000000
   473d4:	mov	w1, #0x37d                 	// #893
   473d8:	mov	w0, #0x378                 	// #888
   473dc:	csel	w1, w0, w1, eq  // eq = none
   473e0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   473e4:	tbnz	w0, #21, 47730 <aarch64_opcode_lookup@@Base+0x11e0>
   473e8:	tbnz	w0, #31, 49800 <aarch64_opcode_lookup@@Base+0x32b0>
   473ec:	tst	x0, #0x40000000
   473f0:	mov	w1, #0x3b1                 	// #945
   473f4:	mov	w0, #0x3ab                 	// #939
   473f8:	csel	w1, w0, w1, eq  // eq = none
   473fc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47400:	tbnz	w0, #30, 47b94 <aarch64_opcode_lookup@@Base+0x1644>
   47404:	tbnz	w0, #31, 4893c <aarch64_opcode_lookup@@Base+0x23ec>
   47408:	mov	w1, #0x6ca                 	// #1738
   4740c:	tbz	w0, #21, 46568 <aarch64_opcode_lookup@@Base+0x18>
   47410:	tbnz	w0, #10, 48f6c <aarch64_opcode_lookup@@Base+0x2a1c>
   47414:	tbnz	w0, #11, 4a4c4 <aarch64_opcode_lookup@@Base+0x3f74>
   47418:	tbnz	w0, #20, 4b560 <aarch64_opcode_lookup@@Base+0x5010>
   4741c:	tbz	w0, #22, 4bf24 <aarch64_opcode_lookup@@Base+0x59d4>
   47420:	tst	x0, #0x800000
   47424:	mov	w1, #0x739                 	// #1849
   47428:	mov	w0, #0x73c                 	// #1852
   4742c:	csel	w1, w0, w1, eq  // eq = none
   47430:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47434:	tbnz	w0, #29, 47c74 <aarch64_opcode_lookup@@Base+0x1724>
   47438:	mov	w1, #0x363                 	// #867
   4743c:	tbz	w0, #30, 46568 <aarch64_opcode_lookup@@Base+0x18>
   47440:	tbnz	w0, #12, 48818 <aarch64_opcode_lookup@@Base+0x22c8>
   47444:	tbnz	w0, #13, 4a438 <aarch64_opcode_lookup@@Base+0x3ee8>
   47448:	tbnz	w0, #14, 4b0b8 <aarch64_opcode_lookup@@Base+0x4b68>
   4744c:	tst	x0, #0x8000
   47450:	mov	w1, #0x236                 	// #566
   47454:	mov	w0, #0x224                 	// #548
   47458:	csel	w1, w0, w1, eq  // eq = none
   4745c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47460:	tbnz	w0, #13, 47804 <aarch64_opcode_lookup@@Base+0x12b4>
   47464:	tst	x0, #0x4000
   47468:	mov	w1, #0x25f                 	// #607
   4746c:	mov	w0, #0x25b                 	// #603
   47470:	csel	w1, w0, w1, eq  // eq = none
   47474:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47478:	tbnz	w0, #21, 47d04 <aarch64_opcode_lookup@@Base+0x17b4>
   4747c:	mov	w1, #0x280                 	// #640
   47480:	tbnz	w0, #22, 46568 <aarch64_opcode_lookup@@Base+0x18>
   47484:	tst	x0, #0x800000
   47488:	mov	w1, #0x281                 	// #641
   4748c:	mov	w0, #0x27e                 	// #638
   47490:	csel	w1, w0, w1, eq  // eq = none
   47494:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47498:	tbnz	w0, #21, 479d0 <aarch64_opcode_lookup@@Base+0x1480>
   4749c:	tbnz	w0, #30, 48034 <aarch64_opcode_lookup@@Base+0x1ae4>
   474a0:	tbnz	w0, #31, 492cc <aarch64_opcode_lookup@@Base+0x2d7c>
   474a4:	tst	x0, #0x10
   474a8:	mov	w1, #0x535                 	// #1333
   474ac:	mov	w0, #0x53b                 	// #1339
   474b0:	csel	w1, w0, w1, eq  // eq = none
   474b4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   474b8:	tbnz	w0, #13, 47aa4 <aarch64_opcode_lookup@@Base+0x1554>
   474bc:	tbnz	w0, #31, 48798 <aarch64_opcode_lookup@@Base+0x2248>
   474c0:	tbnz	w0, #14, 489e0 <aarch64_opcode_lookup@@Base+0x2490>
   474c4:	tbnz	w0, #19, 498b8 <aarch64_opcode_lookup@@Base+0x3368>
   474c8:	tbnz	w0, #20, 4a64c <aarch64_opcode_lookup@@Base+0x40fc>
   474cc:	tbnz	w0, #16, 4a634 <aarch64_opcode_lookup@@Base+0x40e4>
   474d0:	tbnz	w0, #17, 4b248 <aarch64_opcode_lookup@@Base+0x4cf8>
   474d4:	tst	x0, #0x40000
   474d8:	mov	w1, #0x594                 	// #1428
   474dc:	mov	w0, #0x565                 	// #1381
   474e0:	csel	w1, w0, w1, eq  // eq = none
   474e4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   474e8:	tbnz	w0, #10, 4783c <aarch64_opcode_lookup@@Base+0x12ec>
   474ec:	mov	w1, #0x1ac                 	// #428
   474f0:	tbz	w0, #12, 46568 <aarch64_opcode_lookup@@Base+0x18>
   474f4:	mov	w1, #0x1ab                 	// #427
   474f8:	tbnz	w0, #13, 46568 <aarch64_opcode_lookup@@Base+0x18>
   474fc:	mov	w1, #0x1ad                 	// #429
   47500:	tbnz	w0, #14, 46568 <aarch64_opcode_lookup@@Base+0x18>
   47504:	tst	x0, #0x800000
   47508:	cset	w0, eq  // eq = none
   4750c:	add	w1, w0, #0x1b2
   47510:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47514:	tbnz	w0, #31, 47dc0 <aarch64_opcode_lookup@@Base+0x1870>
   47518:	tbnz	w0, #21, 47e9c <aarch64_opcode_lookup@@Base+0x194c>
   4751c:	tbnz	w0, #16, 48a90 <aarch64_opcode_lookup@@Base+0x2540>
   47520:	tbnz	w0, #17, 499cc <aarch64_opcode_lookup@@Base+0x347c>
   47524:	tbnz	w0, #18, 4b274 <aarch64_opcode_lookup@@Base+0x4d24>
   47528:	tbnz	w0, #19, 4b25c <aarch64_opcode_lookup@@Base+0x4d0c>
   4752c:	tbz	w0, #20, 4becc <aarch64_opcode_lookup@@Base+0x597c>
   47530:	tst	x0, #0x40000000
   47534:	mov	w1, #0x855                 	// #2133
   47538:	mov	w0, #0x50a                 	// #1290
   4753c:	csel	w1, w0, w1, eq  // eq = none
   47540:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47544:	mov	w1, #0x24d                 	// #589
   47548:	tbz	w0, #13, 46568 <aarch64_opcode_lookup@@Base+0x18>
   4754c:	tst	x0, #0x800000
   47550:	mov	w1, #0x245                 	// #581
   47554:	mov	w0, #0x23f                 	// #575
   47558:	csel	w1, w0, w1, eq  // eq = none
   4755c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47560:	tbnz	w0, #21, 47d28 <aarch64_opcode_lookup@@Base+0x17d8>
   47564:	tbnz	w0, #31, 498d8 <aarch64_opcode_lookup@@Base+0x3388>
   47568:	tst	x0, #0x40000000
   4756c:	mov	w1, #0x3af                 	// #943
   47570:	mov	w0, #0x3a9                 	// #937
   47574:	csel	w1, w0, w1, eq  // eq = none
   47578:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4757c:	tbnz	w0, #31, 48a68 <aarch64_opcode_lookup@@Base+0x2518>
   47580:	tst	x0, #0x40000000
   47584:	mov	w1, #0x37e                 	// #894
   47588:	mov	w0, #0x379                 	// #889
   4758c:	csel	w1, w0, w1, eq  // eq = none
   47590:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47594:	tst	x0, #0x40000000
   47598:	mov	w1, #0xa                   	// #10
   4759c:	mov	w0, #0x7                   	// #7
   475a0:	csel	w1, w0, w1, eq  // eq = none
   475a4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   475a8:	tbnz	w0, #21, 47854 <aarch64_opcode_lookup@@Base+0x1304>
   475ac:	tbnz	w0, #31, 49708 <aarch64_opcode_lookup@@Base+0x31b8>
   475b0:	tst	x0, #0x40000000
   475b4:	mov	w1, #0x3b2                 	// #946
   475b8:	mov	w0, #0x3ac                 	// #940
   475bc:	csel	w1, w0, w1, eq  // eq = none
   475c0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   475c4:	tst	x0, #0x20000000
   475c8:	mov	w1, #0x8e                  	// #142
   475cc:	mov	w0, #0x86                  	// #134
   475d0:	csel	w1, w0, w1, eq  // eq = none
   475d4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   475d8:	tbnz	w0, #11, 47c0c <aarch64_opcode_lookup@@Base+0x16bc>
   475dc:	mov	w1, #0x264                 	// #612
   475e0:	tbnz	w0, #12, 46568 <aarch64_opcode_lookup@@Base+0x18>
   475e4:	tst	x0, #0x2000
   475e8:	mov	w1, #0x266                 	// #614
   475ec:	mov	w0, #0x262                 	// #610
   475f0:	csel	w1, w0, w1, eq  // eq = none
   475f4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   475f8:	tbnz	w0, #14, 47e18 <aarch64_opcode_lookup@@Base+0x18c8>
   475fc:	mov	w1, #0x6f6                 	// #1782
   47600:	tbz	w0, #15, 46568 <aarch64_opcode_lookup@@Base+0x18>
   47604:	mov	w1, #0x830                 	// #2096
   47608:	tbz	w0, #22, 46568 <aarch64_opcode_lookup@@Base+0x18>
   4760c:	tst	x0, #0x800000
   47610:	mov	w1, #0x60f                 	// #1551
   47614:	mov	w0, #0x612                 	// #1554
   47618:	csel	w1, w0, w1, eq  // eq = none
   4761c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47620:	tbnz	w0, #22, 47dd4 <aarch64_opcode_lookup@@Base+0x1884>
   47624:	tst	x0, #0x800000
   47628:	mov	w1, #0x92b                 	// #2347
   4762c:	mov	w0, #0x929                 	// #2345
   47630:	csel	w1, w0, w1, eq  // eq = none
   47634:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47638:	tst	x0, #0x200000
   4763c:	mov	w1, #0x1cb                 	// #459
   47640:	mov	w0, #0x1c9                 	// #457
   47644:	csel	w1, w0, w1, eq  // eq = none
   47648:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4764c:	tst	x0, #0x200000
   47650:	mov	w1, #0x1d1                 	// #465
   47654:	mov	w0, #0x1cd                 	// #461
   47658:	csel	w1, w0, w1, eq  // eq = none
   4765c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47660:	tbnz	w0, #13, 47e50 <aarch64_opcode_lookup@@Base+0x1900>
   47664:	mov	w1, #0x174                 	// #372
   47668:	tbnz	w0, #14, 46568 <aarch64_opcode_lookup@@Base+0x18>
   4766c:	mov	w1, #0x173                 	// #371
   47670:	tbnz	w0, #11, 46568 <aarch64_opcode_lookup@@Base+0x18>
   47674:	tst	x0, #0x1000
   47678:	mov	w1, #0x921                 	// #2337
   4767c:	mov	w0, #0x172                 	// #370
   47680:	csel	w1, w0, w1, eq  // eq = none
   47684:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47688:	mov	w1, #0x71c                 	// #1820
   4768c:	tbnz	w0, #15, 46568 <aarch64_opcode_lookup@@Base+0x18>
   47690:	tbnz	w0, #10, 48744 <aarch64_opcode_lookup@@Base+0x21f4>
   47694:	tbnz	w0, #11, 49070 <aarch64_opcode_lookup@@Base+0x2b20>
   47698:	tbnz	w0, #12, 4a048 <aarch64_opcode_lookup@@Base+0x3af8>
   4769c:	tbnz	w0, #13, 4be28 <aarch64_opcode_lookup@@Base+0x58d8>
   476a0:	tbz	w0, #20, 4ba00 <aarch64_opcode_lookup@@Base+0x54b0>
   476a4:	tbnz	w0, #16, 4b9f8 <aarch64_opcode_lookup@@Base+0x54a8>
   476a8:	tst	x0, #0x40000
   476ac:	mov	w1, #0x709                 	// #1801
   476b0:	mov	w0, #0x703                 	// #1795
   476b4:	csel	w1, w0, w1, eq  // eq = none
   476b8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   476bc:	tbnz	w0, #11, 47f18 <aarch64_opcode_lookup@@Base+0x19c8>
   476c0:	tbnz	w0, #12, 48b1c <aarch64_opcode_lookup@@Base+0x25cc>
   476c4:	tbnz	w0, #13, 49710 <aarch64_opcode_lookup@@Base+0x31c0>
   476c8:	tbz	w0, #22, 4ae98 <aarch64_opcode_lookup@@Base+0x4948>
   476cc:	tst	x0, #0x800000
   476d0:	mov	w1, #0x134                 	// #308
   476d4:	mov	w0, #0x124                 	// #292
   476d8:	csel	w1, w0, w1, eq  // eq = none
   476dc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   476e0:	tst	x0, #0x8000
   476e4:	mov	w1, #0x578                 	// #1400
   476e8:	mov	w0, #0x549                 	// #1353
   476ec:	csel	w1, w0, w1, eq  // eq = none
   476f0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   476f4:	tst	x0, #0x20000
   476f8:	mov	w1, #0x2f9                 	// #761
   476fc:	mov	w0, #0x2fd                 	// #765
   47700:	csel	w1, w0, w1, eq  // eq = none
   47704:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47708:	tbnz	w0, #30, 48348 <aarch64_opcode_lookup@@Base+0x1df8>
   4770c:	tbnz	w0, #31, 494b0 <aarch64_opcode_lookup@@Base+0x2f60>
   47710:	tbnz	w0, #10, 497c4 <aarch64_opcode_lookup@@Base+0x3274>
   47714:	tbnz	w0, #11, 4a968 <aarch64_opcode_lookup@@Base+0x4418>
   47718:	tbnz	w0, #22, 4b428 <aarch64_opcode_lookup@@Base+0x4ed8>
   4771c:	tst	x0, #0x800000
   47720:	mov	w1, #0x559                 	// #1369
   47724:	mov	w0, #0x502                 	// #1282
   47728:	csel	w1, w0, w1, eq  // eq = none
   4772c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47730:	cmp	w0, #0x0
   47734:	mov	w1, #0x3bb                 	// #955
   47738:	mov	w0, #0x400                 	// #1024
   4773c:	csel	w1, w0, w1, ge  // ge = tcont
   47740:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47744:	tbnz	w0, #21, 48220 <aarch64_opcode_lookup@@Base+0x1cd0>
   47748:	tbnz	w0, #31, 49458 <aarch64_opcode_lookup@@Base+0x2f08>
   4774c:	tst	x0, #0x10
   47750:	mov	w1, #0x576                 	// #1398
   47754:	mov	w0, #0x56e                 	// #1390
   47758:	csel	w1, w0, w1, eq  // eq = none
   4775c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47760:	tbnz	w0, #30, 48208 <aarch64_opcode_lookup@@Base+0x1cb8>
   47764:	tbnz	w0, #31, 49268 <aarch64_opcode_lookup@@Base+0x2d18>
   47768:	tbnz	w0, #11, 4977c <aarch64_opcode_lookup@@Base+0x322c>
   4776c:	tbnz	w0, #12, 4a7f8 <aarch64_opcode_lookup@@Base+0x42a8>
   47770:	ubfx	x0, x0, #10, #1
   47774:	add	w1, w0, #0x5d3
   47778:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4777c:	tbnz	w0, #12, 48080 <aarch64_opcode_lookup@@Base+0x1b30>
   47780:	tbnz	w0, #13, 48c2c <aarch64_opcode_lookup@@Base+0x26dc>
   47784:	tst	x0, #0x4000
   47788:	mov	w1, #0x248                 	// #584
   4778c:	mov	w0, #0x24a                 	// #586
   47790:	csel	w1, w0, w1, eq  // eq = none
   47794:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47798:	tst	x0, #0x4000
   4779c:	mov	w1, #0x260                 	// #608
   477a0:	mov	w0, #0x25c                 	// #604
   477a4:	csel	w1, w0, w1, eq  // eq = none
   477a8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   477ac:	tbnz	w0, #12, 48644 <aarch64_opcode_lookup@@Base+0x20f4>
   477b0:	tbnz	w0, #13, 4910c <aarch64_opcode_lookup@@Base+0x2bbc>
   477b4:	tbnz	w0, #14, 4a264 <aarch64_opcode_lookup@@Base+0x3d14>
   477b8:	tbnz	w0, #29, 4a7a4 <aarch64_opcode_lookup@@Base+0x4254>
   477bc:	tbnz	w0, #31, 4ba5c <aarch64_opcode_lookup@@Base+0x550c>
   477c0:	tbz	w0, #16, 4ba54 <aarch64_opcode_lookup@@Base+0x5504>
   477c4:	tbnz	w0, #19, 4c0a0 <aarch64_opcode_lookup@@Base+0x5b50>
   477c8:	tst	x0, #0x800000
   477cc:	mov	w1, #0xca                  	// #202
   477d0:	mov	w0, #0xb6                  	// #182
   477d4:	csel	w1, w0, w1, eq  // eq = none
   477d8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   477dc:	tbnz	w0, #21, 48528 <aarch64_opcode_lookup@@Base+0x1fd8>
   477e0:	tbnz	w0, #31, 495fc <aarch64_opcode_lookup@@Base+0x30ac>
   477e4:	tbnz	w0, #11, 49a58 <aarch64_opcode_lookup@@Base+0x3508>
   477e8:	tbnz	w0, #10, 4b628 <aarch64_opcode_lookup@@Base+0x50d8>
   477ec:	tbz	w0, #12, 4c0c4 <aarch64_opcode_lookup@@Base+0x5b74>
   477f0:	tst	x0, #0x800000
   477f4:	mov	w1, #0x853                 	// #2131
   477f8:	mov	w0, #0x7fe                 	// #2046
   477fc:	csel	w1, w0, w1, eq  // eq = none
   47800:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47804:	tst	x0, #0x4000
   47808:	mov	w1, #0x261                 	// #609
   4780c:	mov	w0, #0x25d                 	// #605
   47810:	csel	w1, w0, w1, eq  // eq = none
   47814:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47818:	tbnz	w0, #30, 47fc0 <aarch64_opcode_lookup@@Base+0x1a70>
   4781c:	tbnz	w0, #31, 49334 <aarch64_opcode_lookup@@Base+0x2de4>
   47820:	tbnz	w0, #10, 496c4 <aarch64_opcode_lookup@@Base+0x3174>
   47824:	tbnz	w0, #11, 4b748 <aarch64_opcode_lookup@@Base+0x51f8>
   47828:	tst	x0, #0x1000
   4782c:	mov	w1, #0x727                 	// #1831
   47830:	mov	w0, #0x4fa                 	// #1274
   47834:	csel	w1, w0, w1, eq  // eq = none
   47838:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4783c:	tbnz	w0, #11, 47fe0 <aarch64_opcode_lookup@@Base+0x1a90>
   47840:	tst	x0, #0x1000
   47844:	mov	w1, #0x254                 	// #596
   47848:	mov	w0, #0x256                 	// #598
   4784c:	csel	w1, w0, w1, eq  // eq = none
   47850:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47854:	tbnz	w0, #31, 49ad4 <aarch64_opcode_lookup@@Base+0x3584>
   47858:	tst	x0, #0x40000000
   4785c:	mov	w1, #0x3f8                 	// #1016
   47860:	mov	w0, #0x3f5                 	// #1013
   47864:	csel	w1, w0, w1, eq  // eq = none
   47868:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4786c:	tbnz	w0, #23, 4855c <aarch64_opcode_lookup@@Base+0x200c>
   47870:	tbnz	w0, #22, 48b84 <aarch64_opcode_lookup@@Base+0x2634>
   47874:	tbnz	w0, #31, 4b3a8 <aarch64_opcode_lookup@@Base+0x4e58>
   47878:	tst	x0, #0x40000000
   4787c:	mov	w1, #0x389                 	// #905
   47880:	mov	w0, #0x384                 	// #900
   47884:	csel	w1, w0, w1, eq  // eq = none
   47888:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4788c:	tbnz	w0, #13, 484b4 <aarch64_opcode_lookup@@Base+0x1f64>
   47890:	tbnz	w0, #14, 48bb0 <aarch64_opcode_lookup@@Base+0x2660>
   47894:	tbnz	w0, #15, 4a280 <aarch64_opcode_lookup@@Base+0x3d30>
   47898:	tst	x0, #0x40000000
   4789c:	mov	w1, #0x2a4                 	// #676
   478a0:	mov	w0, #0x349                 	// #841
   478a4:	csel	w1, w0, w1, eq  // eq = none
   478a8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   478ac:	tbnz	w0, #14, 482fc <aarch64_opcode_lookup@@Base+0x1dac>
   478b0:	tbnz	w0, #31, 491c0 <aarch64_opcode_lookup@@Base+0x2c70>
   478b4:	tst	x0, #0x10
   478b8:	mov	w1, #0x53c                 	// #1340
   478bc:	mov	w0, #0x525                 	// #1317
   478c0:	csel	w1, w0, w1, eq  // eq = none
   478c4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   478c8:	tbnz	w0, #12, 48250 <aarch64_opcode_lookup@@Base+0x1d00>
   478cc:	tst	x0, #0x2000
   478d0:	mov	w1, #0x250                 	// #592
   478d4:	mov	w0, #0x24e                 	// #590
   478d8:	csel	w1, w0, w1, eq  // eq = none
   478dc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   478e0:	mov	w1, #0x2c4                 	// #708
   478e4:	tbnz	w0, #13, 46568 <aarch64_opcode_lookup@@Base+0x18>
   478e8:	tst	x0, #0x4000
   478ec:	mov	w1, #0x2de                 	// #734
   478f0:	mov	w0, #0x2bc                 	// #700
   478f4:	csel	w1, w0, w1, eq  // eq = none
   478f8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   478fc:	tbnz	w0, #31, 488cc <aarch64_opcode_lookup@@Base+0x237c>
   47900:	tbnz	w0, #4, 489b4 <aarch64_opcode_lookup@@Base+0x2464>
   47904:	tbnz	w0, #20, 49840 <aarch64_opcode_lookup@@Base+0x32f0>
   47908:	ubfx	x0, x0, #22, #1
   4790c:	add	w1, w0, #0x519
   47910:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47914:	tbnz	w0, #31, 4973c <aarch64_opcode_lookup@@Base+0x31ec>
   47918:	mov	w1, #0x59e                 	// #1438
   4791c:	tbnz	w0, #21, 46568 <aarch64_opcode_lookup@@Base+0x18>
   47920:	tbnz	w0, #10, 48a10 <aarch64_opcode_lookup@@Base+0x24c0>
   47924:	tbz	w0, #11, 4b15c <aarch64_opcode_lookup@@Base+0x4c0c>
   47928:	tst	x0, #0x1000
   4792c:	mov	w1, #0x5b4                 	// #1460
   47930:	mov	w0, #0x5a7                 	// #1447
   47934:	csel	w1, w0, w1, eq  // eq = none
   47938:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4793c:	mov	w1, #0x36c                 	// #876
   47940:	tbnz	w0, #30, 46568 <aarch64_opcode_lookup@@Base+0x18>
   47944:	cmp	w0, #0x0
   47948:	mov	w1, #0x36f                 	// #879
   4794c:	mov	w0, #0x367                 	// #871
   47950:	csel	w1, w0, w1, ge  // ge = tcont
   47954:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47958:	tbnz	w0, #13, 47f80 <aarch64_opcode_lookup@@Base+0x1a30>
   4795c:	tst	x0, #0x20000000
   47960:	mov	w1, #0x91                  	// #145
   47964:	mov	w0, #0x89                  	// #137
   47968:	csel	w1, w0, w1, eq  // eq = none
   4796c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47970:	tbnz	w0, #12, 48540 <aarch64_opcode_lookup@@Base+0x1ff0>
   47974:	tbnz	w0, #13, 49178 <aarch64_opcode_lookup@@Base+0x2c28>
   47978:	tbnz	w0, #14, 49d08 <aarch64_opcode_lookup@@Base+0x37b8>
   4797c:	tbnz	w0, #29, 4ac60 <aarch64_opcode_lookup@@Base+0x4710>
   47980:	cmp	w0, #0x0
   47984:	mov	w1, #0x92a                 	// #2346
   47988:	mov	w0, #0x11c                 	// #284
   4798c:	csel	w1, w0, w1, ge  // ge = tcont
   47990:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47994:	tbnz	w0, #21, 485f0 <aarch64_opcode_lookup@@Base+0x20a0>
   47998:	tbnz	w0, #31, 49488 <aarch64_opcode_lookup@@Base+0x2f38>
   4799c:	tbnz	w0, #16, 499ac <aarch64_opcode_lookup@@Base+0x345c>
   479a0:	tbnz	w0, #17, 4a654 <aarch64_opcode_lookup@@Base+0x4104>
   479a4:	tbnz	w0, #18, 4b87c <aarch64_opcode_lookup@@Base+0x532c>
   479a8:	tst	x0, #0x80000
   479ac:	mov	w1, #0x871                 	// #2161
   479b0:	mov	w0, #0x8fb                 	// #2299
   479b4:	csel	w1, w0, w1, eq  // eq = none
   479b8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   479bc:	cmp	w0, #0x0
   479c0:	mov	w1, #0x3b6                 	// #950
   479c4:	mov	w0, #0x3fd                 	// #1021
   479c8:	csel	w1, w0, w1, ge  // ge = tcont
   479cc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   479d0:	mov	w1, #0x5a2                 	// #1442
   479d4:	tbnz	w0, #30, 46568 <aarch64_opcode_lookup@@Base+0x18>
   479d8:	tbnz	w0, #31, 48a28 <aarch64_opcode_lookup@@Base+0x24d8>
   479dc:	tbnz	w0, #4, 48df4 <aarch64_opcode_lookup@@Base+0x28a4>
   479e0:	tst	x0, #0x1000
   479e4:	mov	w1, #0x913                 	// #2323
   479e8:	mov	w0, #0x54a                 	// #1354
   479ec:	csel	w1, w0, w1, eq  // eq = none
   479f0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   479f4:	tbnz	w0, #14, 48130 <aarch64_opcode_lookup@@Base+0x1be0>
   479f8:	tbnz	w0, #29, 48d60 <aarch64_opcode_lookup@@Base+0x2810>
   479fc:	ubfx	x0, x0, #30, #1
   47a00:	add	w1, w0, #0x6b
   47a04:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47a08:	tbnz	w0, #12, 482ac <aarch64_opcode_lookup@@Base+0x1d5c>
   47a0c:	tbnz	w0, #13, 490dc <aarch64_opcode_lookup@@Base+0x2b8c>
   47a10:	tbnz	w0, #14, 4a4f8 <aarch64_opcode_lookup@@Base+0x3fa8>
   47a14:	tst	x0, #0x10000
   47a18:	mov	w1, #0x2b6                 	// #694
   47a1c:	mov	w0, #0x2ae                 	// #686
   47a20:	csel	w1, w0, w1, eq  // eq = none
   47a24:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47a28:	ubfx	x0, x0, #22, #1
   47a2c:	add	w1, w0, #0x372
   47a30:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47a34:	tbnz	w0, #31, 49744 <aarch64_opcode_lookup@@Base+0x31f4>
   47a38:	tst	x0, #0x40000000
   47a3c:	mov	w1, #0x3f7                 	// #1015
   47a40:	mov	w0, #0x3f4                 	// #1012
   47a44:	csel	w1, w0, w1, eq  // eq = none
   47a48:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47a4c:	tbnz	w0, #31, 4884c <aarch64_opcode_lookup@@Base+0x22fc>
   47a50:	tbnz	w0, #17, 48ae8 <aarch64_opcode_lookup@@Base+0x2598>
   47a54:	tbnz	w0, #18, 49b24 <aarch64_opcode_lookup@@Base+0x35d4>
   47a58:	tst	x0, #0x100000
   47a5c:	mov	w1, #0x812                 	// #2066
   47a60:	mov	w0, #0x569                 	// #1385
   47a64:	csel	w1, w0, w1, eq  // eq = none
   47a68:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47a6c:	tbnz	w0, #13, 48614 <aarch64_opcode_lookup@@Base+0x20c4>
   47a70:	tbnz	w0, #22, 48bf8 <aarch64_opcode_lookup@@Base+0x26a8>
   47a74:	tst	x0, #0x800000
   47a78:	mov	w1, #0x618                 	// #1560
   47a7c:	mov	w0, #0x624                 	// #1572
   47a80:	csel	w1, w0, w1, eq  // eq = none
   47a84:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47a88:	tbnz	w0, #22, 48464 <aarch64_opcode_lookup@@Base+0x1f14>
   47a8c:	tbnz	w0, #31, 4a46c <aarch64_opcode_lookup@@Base+0x3f1c>
   47a90:	tst	x0, #0x400
   47a94:	mov	w1, #0x821                 	// #2081
   47a98:	mov	w0, #0x81f                 	// #2079
   47a9c:	csel	w1, w0, w1, eq  // eq = none
   47aa0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47aa4:	tbnz	w0, #14, 48424 <aarch64_opcode_lookup@@Base+0x1ed4>
   47aa8:	tbnz	w0, #31, 49470 <aarch64_opcode_lookup@@Base+0x2f20>
   47aac:	tbnz	w0, #16, 49948 <aarch64_opcode_lookup@@Base+0x33f8>
   47ab0:	tbnz	w0, #19, 4a824 <aarch64_opcode_lookup@@Base+0x42d4>
   47ab4:	tbnz	w0, #17, 4b12c <aarch64_opcode_lookup@@Base+0x4bdc>
   47ab8:	tbnz	w0, #18, 4b958 <aarch64_opcode_lookup@@Base+0x5408>
   47abc:	tst	x0, #0x100000
   47ac0:	mov	w1, #0x713                 	// #1811
   47ac4:	mov	w0, #0x5b9                 	// #1465
   47ac8:	csel	w1, w0, w1, eq  // eq = none
   47acc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47ad0:	tbnz	w0, #12, 48060 <aarch64_opcode_lookup@@Base+0x1b10>
   47ad4:	tbnz	w0, #13, 48c58 <aarch64_opcode_lookup@@Base+0x2708>
   47ad8:	tbnz	w0, #14, 49cdc <aarch64_opcode_lookup@@Base+0x378c>
   47adc:	tbnz	w0, #15, 4b650 <aarch64_opcode_lookup@@Base+0x5100>
   47ae0:	tbnz	w0, #22, 4aec4 <aarch64_opcode_lookup@@Base+0x4974>
   47ae4:	tbnz	w0, #23, 4bb28 <aarch64_opcode_lookup@@Base+0x55d8>
   47ae8:	tbnz	w0, #31, 4bb14 <aarch64_opcode_lookup@@Base+0x55c4>
   47aec:	ubfx	x0, x0, #30, #1
   47af0:	add	w1, w0, #0x40d
   47af4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47af8:	tbnz	w0, #21, 4862c <aarch64_opcode_lookup@@Base+0x20dc>
   47afc:	tbnz	w0, #31, 4a474 <aarch64_opcode_lookup@@Base+0x3f24>
   47b00:	tbnz	w0, #10, 493a8 <aarch64_opcode_lookup@@Base+0x2e58>
   47b04:	tbnz	w0, #11, 4a47c <aarch64_opcode_lookup@@Base+0x3f2c>
   47b08:	tst	x0, #0x1000
   47b0c:	mov	w1, #0x91f                 	// #2335
   47b10:	mov	w0, #0x8b6                 	// #2230
   47b14:	csel	w1, w0, w1, eq  // eq = none
   47b18:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47b1c:	tbnz	w0, #14, 481ac <aarch64_opcode_lookup@@Base+0x1c5c>
   47b20:	tbz	w0, #31, 49838 <aarch64_opcode_lookup@@Base+0x32e8>
   47b24:	tbnz	w0, #22, 4a0a4 <aarch64_opcode_lookup@@Base+0x3b54>
   47b28:	tst	x0, #0x800000
   47b2c:	mov	w1, #0x757                 	// #1879
   47b30:	mov	w0, #0x76c                 	// #1900
   47b34:	csel	w1, w0, w1, eq  // eq = none
   47b38:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47b3c:	tbnz	w0, #14, 48154 <aarch64_opcode_lookup@@Base+0x1c04>
   47b40:	tbnz	w0, #29, 48c4c <aarch64_opcode_lookup@@Base+0x26fc>
   47b44:	ubfx	x0, x0, #30, #1
   47b48:	add	w1, w0, #0x62
   47b4c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47b50:	tbnz	w0, #31, 49acc <aarch64_opcode_lookup@@Base+0x357c>
   47b54:	ubfx	x0, x0, #30, #1
   47b58:	add	w1, w0, #0x3f1
   47b5c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47b60:	tbnz	w0, #15, 485b4 <aarch64_opcode_lookup@@Base+0x2064>
   47b64:	tbnz	w0, #22, 48f8c <aarch64_opcode_lookup@@Base+0x2a3c>
   47b68:	tbz	w0, #23, 4b154 <aarch64_opcode_lookup@@Base+0x4c04>
   47b6c:	tbnz	w0, #31, 4b14c <aarch64_opcode_lookup@@Base+0x4bfc>
   47b70:	tst	x0, #0x400
   47b74:	mov	w1, #0x824                 	// #2084
   47b78:	mov	w0, #0x822                 	// #2082
   47b7c:	csel	w1, w0, w1, eq  // eq = none
   47b80:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47b84:	tbnz	w0, #23, 4858c <aarch64_opcode_lookup@@Base+0x203c>
   47b88:	ubfx	x0, x0, #30, #1
   47b8c:	add	w1, w0, #0x294
   47b90:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47b94:	tbnz	w0, #21, 486bc <aarch64_opcode_lookup@@Base+0x216c>
   47b98:	tbnz	w0, #22, 48e58 <aarch64_opcode_lookup@@Base+0x2908>
   47b9c:	tst	x0, #0x800000
   47ba0:	mov	w1, #0x82c                 	// #2092
   47ba4:	mov	w0, #0x829                 	// #2089
   47ba8:	csel	w1, w0, w1, eq  // eq = none
   47bac:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47bb0:	tbnz	w0, #31, 497e0 <aarch64_opcode_lookup@@Base+0x3290>
   47bb4:	tst	x0, #0x40000000
   47bb8:	mov	w1, #0x3f9                 	// #1017
   47bbc:	mov	w0, #0x3f6                 	// #1014
   47bc0:	csel	w1, w0, w1, eq  // eq = none
   47bc4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47bc8:	tbnz	w0, #21, 48444 <aarch64_opcode_lookup@@Base+0x1ef4>
   47bcc:	tbnz	w0, #22, 48ee0 <aarch64_opcode_lookup@@Base+0x2990>
   47bd0:	tst	x0, #0x800000
   47bd4:	mov	w1, #0x6f7                 	// #1783
   47bd8:	mov	w0, #0x6e9                 	// #1769
   47bdc:	csel	w1, w0, w1, eq  // eq = none
   47be0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47be4:	tbnz	w0, #13, 48410 <aarch64_opcode_lookup@@Base+0x1ec0>
   47be8:	tbnz	w0, #29, 48ebc <aarch64_opcode_lookup@@Base+0x296c>
   47bec:	ubfx	x0, x0, #30, #1
   47bf0:	add	w1, w0, #0x182
   47bf4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47bf8:	cmp	w0, #0x0
   47bfc:	mov	w1, #0x3ba                 	// #954
   47c00:	mov	w0, #0x3fe                 	// #1022
   47c04:	csel	w1, w0, w1, ge  // ge = tcont
   47c08:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47c0c:	mov	w1, #0x263                 	// #611
   47c10:	tbz	w0, #12, 46568 <aarch64_opcode_lookup@@Base+0x18>
   47c14:	tst	x0, #0x2000
   47c18:	mov	w1, #0x268                 	// #616
   47c1c:	mov	w0, #0x265                 	// #613
   47c20:	csel	w1, w0, w1, eq  // eq = none
   47c24:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47c28:	tbnz	w0, #31, 488b0 <aarch64_opcode_lookup@@Base+0x2360>
   47c2c:	tbnz	w0, #16, 489c0 <aarch64_opcode_lookup@@Base+0x2470>
   47c30:	tbnz	w0, #17, 49864 <aarch64_opcode_lookup@@Base+0x3314>
   47c34:	tbnz	w0, #18, 4adc0 <aarch64_opcode_lookup@@Base+0x4870>
   47c38:	tbnz	w0, #19, 4ab5c <aarch64_opcode_lookup@@Base+0x460c>
   47c3c:	tst	x0, #0x100000
   47c40:	mov	w1, #0x6d0                 	// #1744
   47c44:	mov	w0, #0x4fb                 	// #1275
   47c48:	csel	w1, w0, w1, eq  // eq = none
   47c4c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47c50:	mov	w1, #0x361                 	// #865
   47c54:	tbz	w0, #30, 46568 <aarch64_opcode_lookup@@Base+0x18>
   47c58:	mov	w1, #0x1a7                 	// #423
   47c5c:	tbnz	w0, #13, 46568 <aarch64_opcode_lookup@@Base+0x18>
   47c60:	tst	x0, #0x4000
   47c64:	mov	w1, #0x1a8                 	// #424
   47c68:	mov	w0, #0x1a6                 	// #422
   47c6c:	csel	w1, w0, w1, eq  // eq = none
   47c70:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47c74:	tbnz	w0, #12, 48314 <aarch64_opcode_lookup@@Base+0x1dc4>
   47c78:	tbnz	w0, #13, 48fa0 <aarch64_opcode_lookup@@Base+0x2a50>
   47c7c:	tbnz	w0, #14, 4b164 <aarch64_opcode_lookup@@Base+0x4c14>
   47c80:	tst	x0, #0x8000
   47c84:	mov	w1, #0x24b                 	// #587
   47c88:	mov	w0, #0x237                 	// #567
   47c8c:	csel	w1, w0, w1, eq  // eq = none
   47c90:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47c94:	tbnz	w0, #30, 483a8 <aarch64_opcode_lookup@@Base+0x1e58>
   47c98:	tbnz	w0, #31, 49200 <aarch64_opcode_lookup@@Base+0x2cb0>
   47c9c:	tbnz	w0, #10, 4969c <aarch64_opcode_lookup@@Base+0x314c>
   47ca0:	tbnz	w0, #11, 4b648 <aarch64_opcode_lookup@@Base+0x50f8>
   47ca4:	tst	x0, #0x1000
   47ca8:	mov	w1, #0x885                 	// #2181
   47cac:	mov	w0, #0x83c                 	// #2108
   47cb0:	csel	w1, w0, w1, eq  // eq = none
   47cb4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47cb8:	tbnz	w0, #30, 48018 <aarch64_opcode_lookup@@Base+0x1ac8>
   47cbc:	tbnz	w0, #31, 49378 <aarch64_opcode_lookup@@Base+0x2e28>
   47cc0:	tst	x0, #0x10
   47cc4:	mov	w1, #0x538                 	// #1336
   47cc8:	mov	w0, #0x536                 	// #1334
   47ccc:	csel	w1, w0, w1, eq  // eq = none
   47cd0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47cd4:	tbnz	w0, #23, 48380 <aarch64_opcode_lookup@@Base+0x1e30>
   47cd8:	ubfx	x0, x0, #30, #1
   47cdc:	add	w1, w0, #0x292
   47ce0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47ce4:	tbnz	w0, #11, 4867c <aarch64_opcode_lookup@@Base+0x212c>
   47ce8:	tbnz	w0, #12, 48fec <aarch64_opcode_lookup@@Base+0x2a9c>
   47cec:	tbnz	w0, #13, 4a3f8 <aarch64_opcode_lookup@@Base+0x3ea8>
   47cf0:	tst	x0, #0x4000
   47cf4:	mov	w1, #0x147                 	// #327
   47cf8:	mov	w0, #0x140                 	// #320
   47cfc:	csel	w1, w0, w1, eq  // eq = none
   47d00:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47d04:	tst	x0, #0x800000
   47d08:	mov	w1, #0x282                 	// #642
   47d0c:	mov	w0, #0x27f                 	// #639
   47d10:	csel	w1, w0, w1, eq  // eq = none
   47d14:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47d18:	tbnz	w0, #14, 48664 <aarch64_opcode_lookup@@Base+0x2114>
   47d1c:	ubfx	x0, x0, #30, #1
   47d20:	add	w1, w0, #0x6d
   47d24:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47d28:	cmp	w0, #0x0
   47d2c:	mov	w1, #0x3b7                 	// #951
   47d30:	mov	w0, #0x3ff                 	// #1023
   47d34:	csel	w1, w0, w1, ge  // ge = tcont
   47d38:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47d3c:	tbnz	w0, #21, 483c0 <aarch64_opcode_lookup@@Base+0x1e70>
   47d40:	tbnz	w0, #31, 49254 <aarch64_opcode_lookup@@Base+0x2d04>
   47d44:	tbnz	w0, #10, 497b0 <aarch64_opcode_lookup@@Base+0x3260>
   47d48:	tbnz	w0, #11, 4a90c <aarch64_opcode_lookup@@Base+0x43bc>
   47d4c:	tst	x0, #0x1000
   47d50:	mov	w1, #0x80f                 	// #2063
   47d54:	mov	w0, #0x84f                 	// #2127
   47d58:	csel	w1, w0, w1, eq  // eq = none
   47d5c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47d60:	tbnz	w0, #11, 48510 <aarch64_opcode_lookup@@Base+0x1fc0>
   47d64:	tst	x0, #0x2000
   47d68:	mov	w1, #0x22c                 	// #556
   47d6c:	mov	w0, #0x217                 	// #535
   47d70:	csel	w1, w0, w1, eq  // eq = none
   47d74:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47d78:	tbnz	w0, #21, 480cc <aarch64_opcode_lookup@@Base+0x1b7c>
   47d7c:	tbnz	w0, #31, 49348 <aarch64_opcode_lookup@@Base+0x2df8>
   47d80:	tbnz	w0, #10, 49724 <aarch64_opcode_lookup@@Base+0x31d4>
   47d84:	tbnz	w0, #11, 4aea0 <aarch64_opcode_lookup@@Base+0x4950>
   47d88:	tst	x0, #0x1000
   47d8c:	mov	w1, #0x8b1                 	// #2225
   47d90:	mov	w0, #0x8b8                 	// #2232
   47d94:	csel	w1, w0, w1, eq  // eq = none
   47d98:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47d9c:	tbnz	w0, #14, 487fc <aarch64_opcode_lookup@@Base+0x22ac>
   47da0:	ubfx	x0, x0, #23, #1
   47da4:	add	w1, w0, #0x95f
   47da8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47dac:	tbnz	w0, #14, 48904 <aarch64_opcode_lookup@@Base+0x23b4>
   47db0:	tbnz	w0, #15, 4966c <aarch64_opcode_lookup@@Base+0x311c>
   47db4:	ubfx	x0, x0, #23, #1
   47db8:	add	w1, w0, #0x963
   47dbc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47dc0:	tbnz	w0, #22, 48864 <aarch64_opcode_lookup@@Base+0x2314>
   47dc4:	tbnz	w0, #21, 49214 <aarch64_opcode_lookup@@Base+0x2cc4>
   47dc8:	ubfx	x0, x0, #23, #1
   47dcc:	add	w1, w0, #0x82d
   47dd0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47dd4:	mov	w1, #0x92d                 	// #2349
   47dd8:	tbz	w0, #15, 46568 <aarch64_opcode_lookup@@Base+0x18>
   47ddc:	tbnz	w0, #10, 48b04 <aarch64_opcode_lookup@@Base+0x25b4>
   47de0:	tbnz	w0, #11, 4a6a0 <aarch64_opcode_lookup@@Base+0x4150>
   47de4:	tst	x0, #0x800000
   47de8:	mov	w1, #0x927                 	// #2343
   47dec:	mov	w0, #0x92e                 	// #2350
   47df0:	csel	w1, w0, w1, eq  // eq = none
   47df4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47df8:	tbnz	w0, #11, 48830 <aarch64_opcode_lookup@@Base+0x22e0>
   47dfc:	tbnz	w0, #12, 49440 <aarch64_opcode_lookup@@Base+0x2ef0>
   47e00:	tbnz	w0, #13, 4a3b8 <aarch64_opcode_lookup@@Base+0x3e68>
   47e04:	tst	x0, #0x4000
   47e08:	mov	w1, #0x113                 	// #275
   47e0c:	mov	w0, #0x10c                 	// #268
   47e10:	csel	w1, w0, w1, eq  // eq = none
   47e14:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47e18:	tbnz	w0, #15, 48894 <aarch64_opcode_lookup@@Base+0x2344>
   47e1c:	tbnz	w0, #23, 4a114 <aarch64_opcode_lookup@@Base+0x3bc4>
   47e20:	ubfx	x0, x0, #21, #1
   47e24:	add	w1, w0, #0x698
   47e28:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47e2c:	tbnz	w0, #15, 488e8 <aarch64_opcode_lookup@@Base+0x2398>
   47e30:	tbnz	w0, #23, 49658 <aarch64_opcode_lookup@@Base+0x3108>
   47e34:	ubfx	x0, x0, #21, #1
   47e38:	add	w1, w0, #0x634
   47e3c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47e40:	tbnz	w0, #14, 487e0 <aarch64_opcode_lookup@@Base+0x2290>
   47e44:	ubfx	x0, x0, #30, #1
   47e48:	add	w1, w0, #0x64
   47e4c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47e50:	tbnz	w0, #11, 487c8 <aarch64_opcode_lookup@@Base+0x2278>
   47e54:	tst	x0, #0x4000
   47e58:	mov	w1, #0x175                 	// #373
   47e5c:	mov	w0, #0x96e                 	// #2414
   47e60:	csel	w1, w0, w1, eq  // eq = none
   47e64:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47e68:	tbnz	w0, #14, 4899c <aarch64_opcode_lookup@@Base+0x244c>
   47e6c:	tbnz	w0, #22, 49a2c <aarch64_opcode_lookup@@Base+0x34dc>
   47e70:	tst	x0, #0x800000
   47e74:	mov	w1, #0x8c3                 	// #2243
   47e78:	mov	w0, #0x8c0                 	// #2240
   47e7c:	csel	w1, w0, w1, eq  // eq = none
   47e80:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47e84:	tbnz	w0, #1, 48974 <aarch64_opcode_lookup@@Base+0x2424>
   47e88:	tst	x0, #0x200000
   47e8c:	mov	w1, #0x2f2                 	// #754
   47e90:	mov	w0, #0x2ed                 	// #749
   47e94:	csel	w1, w0, w1, eq  // eq = none
   47e98:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47e9c:	tbnz	w0, #10, 489f4 <aarch64_opcode_lookup@@Base+0x24a4>
   47ea0:	tbnz	w0, #12, 496b4 <aarch64_opcode_lookup@@Base+0x3164>
   47ea4:	tbz	w0, #30, 4b124 <aarch64_opcode_lookup@@Base+0x4bd4>
   47ea8:	ubfx	x0, x0, #22, #1
   47eac:	add	w1, w0, #0x85d
   47eb0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47eb4:	tbnz	w0, #12, 48a70 <aarch64_opcode_lookup@@Base+0x2520>
   47eb8:	tst	x0, #0x4000
   47ebc:	mov	w1, #0x10a                 	// #266
   47ec0:	mov	w0, #0x107                 	// #263
   47ec4:	csel	w1, w0, w1, eq  // eq = none
   47ec8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47ecc:	tbnz	w0, #12, 48ab4 <aarch64_opcode_lookup@@Base+0x2564>
   47ed0:	tst	x0, #0x800000
   47ed4:	mov	w1, #0x16d                 	// #365
   47ed8:	mov	w0, #0x15f                 	// #351
   47edc:	csel	w1, w0, w1, eq  // eq = none
   47ee0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47ee4:	tst	x0, #0x800000
   47ee8:	mov	w1, #0x558                 	// #1368
   47eec:	mov	w0, #0x55a                 	// #1370
   47ef0:	csel	w1, w0, w1, eq  // eq = none
   47ef4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47ef8:	tbnz	w0, #15, 48b38 <aarch64_opcode_lookup@@Base+0x25e8>
   47efc:	tbnz	w0, #10, 4a680 <aarch64_opcode_lookup@@Base+0x4130>
   47f00:	tbnz	w0, #11, 49fac <aarch64_opcode_lookup@@Base+0x3a5c>
   47f04:	tst	x0, #0x1000
   47f08:	mov	w1, #0x7a1                 	// #1953
   47f0c:	mov	w0, #0x556                 	// #1366
   47f10:	csel	w1, w0, w1, eq  // eq = none
   47f14:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47f18:	tbnz	w0, #12, 48a34 <aarch64_opcode_lookup@@Base+0x24e4>
   47f1c:	tbnz	w0, #13, 49810 <aarch64_opcode_lookup@@Base+0x32c0>
   47f20:	tbz	w0, #22, 4b840 <aarch64_opcode_lookup@@Base+0x52f0>
   47f24:	tst	x0, #0x800000
   47f28:	mov	w1, #0x136                 	// #310
   47f2c:	mov	w0, #0x126                 	// #294
   47f30:	csel	w1, w0, w1, eq  // eq = none
   47f34:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47f38:	tbnz	w0, #13, 49d24 <aarch64_opcode_lookup@@Base+0x37d4>
   47f3c:	tst	x0, #0x4000
   47f40:	mov	w1, #0x2ab                 	// #683
   47f44:	mov	w0, #0x2a7                 	// #679
   47f48:	csel	w1, w0, w1, eq  // eq = none
   47f4c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47f50:	tst	x0, #0x20000000
   47f54:	mov	w1, #0x90                  	// #144
   47f58:	mov	w0, #0x88                  	// #136
   47f5c:	csel	w1, w0, w1, eq  // eq = none
   47f60:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47f64:	tbnz	w0, #13, 48ddc <aarch64_opcode_lookup@@Base+0x288c>
   47f68:	tbnz	w0, #14, 49f4c <aarch64_opcode_lookup@@Base+0x39fc>
   47f6c:	tst	x0, #0x20000000
   47f70:	mov	w1, #0x151                 	// #337
   47f74:	mov	w0, #0x11d                 	// #285
   47f78:	csel	w1, w0, w1, eq  // eq = none
   47f7c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47f80:	tbnz	w0, #12, 48c94 <aarch64_opcode_lookup@@Base+0x2744>
   47f84:	tst	x0, #0x20000000
   47f88:	mov	w1, #0x92                  	// #146
   47f8c:	mov	w0, #0x8a                  	// #138
   47f90:	csel	w1, w0, w1, eq  // eq = none
   47f94:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47f98:	tbnz	w0, #23, 48c0c <aarch64_opcode_lookup@@Base+0x26bc>
   47f9c:	tbnz	w0, #31, 49f08 <aarch64_opcode_lookup@@Base+0x39b8>
   47fa0:	tbnz	w0, #4, 4b640 <aarch64_opcode_lookup@@Base+0x50f0>
   47fa4:	tbnz	w0, #9, 4bd18 <aarch64_opcode_lookup@@Base+0x57c8>
   47fa8:	tbz	w0, #20, 4bd38 <aarch64_opcode_lookup@@Base+0x57e8>
   47fac:	tst	x0, #0x80000
   47fb0:	mov	w1, #0x518                 	// #1304
   47fb4:	mov	w0, #0x514                 	// #1300
   47fb8:	csel	w1, w0, w1, eq  // eq = none
   47fbc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47fc0:	tbnz	w0, #23, 48d30 <aarch64_opcode_lookup@@Base+0x27e0>
   47fc4:	tbnz	w0, #31, 4ac80 <aarch64_opcode_lookup@@Base+0x4730>
   47fc8:	tbnz	w0, #10, 49ec4 <aarch64_opcode_lookup@@Base+0x3974>
   47fcc:	tst	x0, #0x800
   47fd0:	mov	w1, #0x833                 	// #2099
   47fd4:	mov	w0, #0x890                 	// #2192
   47fd8:	csel	w1, w0, w1, eq  // eq = none
   47fdc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47fe0:	tst	x0, #0x2000
   47fe4:	mov	w1, #0x258                 	// #600
   47fe8:	mov	w0, #0x255                 	// #597
   47fec:	csel	w1, w0, w1, eq  // eq = none
   47ff0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   47ff4:	ubfx	x0, x0, #30, #1
   47ff8:	add	w1, w0, #0x196
   47ffc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48000:	tbnz	w0, #22, 48ce0 <aarch64_opcode_lookup@@Base+0x2790>
   48004:	tst	x0, #0x800000
   48008:	mov	w1, #0x6ad                 	// #1709
   4800c:	mov	w0, #0x6b0                 	// #1712
   48010:	csel	w1, w0, w1, eq  // eq = none
   48014:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48018:	tbnz	w0, #20, 48cc8 <aarch64_opcode_lookup@@Base+0x2778>
   4801c:	tbz	w0, #22, 4aeb4 <aarch64_opcode_lookup@@Base+0x4964>
   48020:	tst	x0, #0x800000
   48024:	mov	w1, #0x766                 	// #1894
   48028:	mov	w0, #0x751                 	// #1873
   4802c:	csel	w1, w0, w1, eq  // eq = none
   48030:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48034:	tbnz	w0, #31, 492f4 <aarch64_opcode_lookup@@Base+0x2da4>
   48038:	tbnz	w0, #16, 496e8 <aarch64_opcode_lookup@@Base+0x3198>
   4803c:	tbnz	w0, #17, 4b670 <aarch64_opcode_lookup@@Base+0x5120>
   48040:	tbnz	w0, #18, 4bc3c <aarch64_opcode_lookup@@Base+0x56ec>
   48044:	tbnz	w0, #19, 4bc4c <aarch64_opcode_lookup@@Base+0x56fc>
   48048:	tbz	w0, #20, 4bc44 <aarch64_opcode_lookup@@Base+0x56f4>
   4804c:	tst	x0, #0x10
   48050:	mov	w1, #0x571                 	// #1393
   48054:	mov	w0, #0x56f                 	// #1391
   48058:	csel	w1, w0, w1, eq  // eq = none
   4805c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48060:	tbnz	w0, #13, 48db4 <aarch64_opcode_lookup@@Base+0x2864>
   48064:	tbnz	w0, #14, 49f64 <aarch64_opcode_lookup@@Base+0x3a14>
   48068:	tbnz	w0, #22, 4aa80 <aarch64_opcode_lookup@@Base+0x4530>
   4806c:	tbnz	w0, #23, 4aa54 <aarch64_opcode_lookup@@Base+0x4504>
   48070:	tbnz	w0, #31, 4bda8 <aarch64_opcode_lookup@@Base+0x5858>
   48074:	ubfx	x0, x0, #30, #1
   48078:	add	w1, w0, #0x419
   4807c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48080:	tbnz	w0, #13, 48d1c <aarch64_opcode_lookup@@Base+0x27cc>
   48084:	tst	x0, #0x8000
   48088:	mov	w1, #0x240                 	// #576
   4808c:	mov	w0, #0x249                 	// #585
   48090:	csel	w1, w0, w1, eq  // eq = none
   48094:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48098:	tbnz	w0, #13, 48c40 <aarch64_opcode_lookup@@Base+0x26f0>
   4809c:	tbnz	w0, #14, 4a01c <aarch64_opcode_lookup@@Base+0x3acc>
   480a0:	ubfx	x0, x0, #30, #1
   480a4:	add	w1, w0, #0x3e
   480a8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   480ac:	tbnz	w0, #31, 49d2c <aarch64_opcode_lookup@@Base+0x37dc>
   480b0:	tbnz	w0, #10, 49360 <aarch64_opcode_lookup@@Base+0x2e10>
   480b4:	tbnz	w0, #11, 4a40c <aarch64_opcode_lookup@@Base+0x3ebc>
   480b8:	tst	x0, #0x1000
   480bc:	mov	w1, #0x8f5                 	// #2293
   480c0:	mov	w0, #0x8a6                 	// #2214
   480c4:	csel	w1, w0, w1, eq  // eq = none
   480c8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   480cc:	tbnz	w0, #22, 48ca8 <aarch64_opcode_lookup@@Base+0x2758>
   480d0:	tbnz	w0, #23, 4ae90 <aarch64_opcode_lookup@@Base+0x4940>
   480d4:	tbnz	w0, #31, 4ad9c <aarch64_opcode_lookup@@Base+0x484c>
   480d8:	tbnz	w0, #10, 49de4 <aarch64_opcode_lookup@@Base+0x3894>
   480dc:	tbnz	w0, #12, 4bafc <aarch64_opcode_lookup@@Base+0x55ac>
   480e0:	tbnz	w0, #16, 4baf4 <aarch64_opcode_lookup@@Base+0x55a4>
   480e4:	tst	x0, #0x20000
   480e8:	mov	w1, #0x918                 	// #2328
   480ec:	mov	w0, #0x91a                 	// #2330
   480f0:	csel	w1, w0, w1, eq  // eq = none
   480f4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   480f8:	tbnz	w0, #30, 48cf4 <aarch64_opcode_lookup@@Base+0x27a4>
   480fc:	cmp	w0, #0x0
   48100:	mov	w1, #0x3a3                 	// #931
   48104:	mov	w0, #0x39b                 	// #923
   48108:	csel	w1, w0, w1, ge  // ge = tcont
   4810c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48110:	tbnz	w0, #22, 48d6c <aarch64_opcode_lookup@@Base+0x281c>
   48114:	tbz	w0, #23, 4a938 <aarch64_opcode_lookup@@Base+0x43e8>
   48118:	tbnz	w0, #31, 4a930 <aarch64_opcode_lookup@@Base+0x43e0>
   4811c:	tst	x0, #0x400
   48120:	mov	w1, #0x820                 	// #2080
   48124:	mov	w0, #0x81e                 	// #2078
   48128:	csel	w1, w0, w1, eq  // eq = none
   4812c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48130:	tst	x0, #0x20000000
   48134:	cset	w0, eq  // eq = none
   48138:	add	w1, w0, #0x923
   4813c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48140:	tst	x0, #0x40000000
   48144:	mov	w1, #0x29a                 	// #666
   48148:	mov	w0, #0x296                 	// #662
   4814c:	csel	w1, w0, w1, eq  // eq = none
   48150:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48154:	tbnz	w0, #29, 48cbc <aarch64_opcode_lookup@@Base+0x276c>
   48158:	ubfx	x0, x0, #30, #1
   4815c:	add	w1, w0, #0x66
   48160:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48164:	tbnz	w0, #31, 49c38 <aarch64_opcode_lookup@@Base+0x36e8>
   48168:	tst	x0, #0x40000000
   4816c:	mov	w1, #0x36b                 	// #875
   48170:	mov	w0, #0x366                 	// #870
   48174:	csel	w1, w0, w1, eq  // eq = none
   48178:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4817c:	tbz	w0, #29, 49c04 <aarch64_opcode_lookup@@Base+0x36b4>
   48180:	tst	x0, #0x40000000
   48184:	mov	w1, #0x945                 	// #2373
   48188:	mov	w0, #0x941                 	// #2369
   4818c:	csel	w1, w0, w1, eq  // eq = none
   48190:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48194:	tbnz	w0, #31, 49428 <aarch64_opcode_lookup@@Base+0x2ed8>
   48198:	tst	x0, #0x10
   4819c:	mov	w1, #0x52f                 	// #1327
   481a0:	mov	w0, #0x532                 	// #1330
   481a4:	csel	w1, w0, w1, eq  // eq = none
   481a8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   481ac:	tbz	w0, #31, 49a24 <aarch64_opcode_lookup@@Base+0x34d4>
   481b0:	tbnz	w0, #20, 49a0c <aarch64_opcode_lookup@@Base+0x34bc>
   481b4:	tst	x0, #0x800000
   481b8:	mov	w1, #0x75a                 	// #1882
   481bc:	mov	w0, #0x774                 	// #1908
   481c0:	csel	w1, w0, w1, eq  // eq = none
   481c4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   481c8:	tbnz	w0, #22, 490f0 <aarch64_opcode_lookup@@Base+0x2ba0>
   481cc:	tbnz	w0, #23, 4a144 <aarch64_opcode_lookup@@Base+0x3bf4>
   481d0:	cmp	w0, #0x0
   481d4:	mov	w1, #0x749                 	// #1865
   481d8:	mov	w0, #0x818                 	// #2072
   481dc:	csel	w1, w0, w1, ge  // ge = tcont
   481e0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   481e4:	tbnz	w0, #23, 4a040 <aarch64_opcode_lookup@@Base+0x3af0>
   481e8:	tbnz	w0, #31, 4b290 <aarch64_opcode_lookup@@Base+0x4d40>
   481ec:	tbnz	w0, #10, 49910 <aarch64_opcode_lookup@@Base+0x33c0>
   481f0:	tbnz	w0, #11, 4ac10 <aarch64_opcode_lookup@@Base+0x46c0>
   481f4:	tst	x0, #0x1000
   481f8:	mov	w1, #0x8ae                 	// #2222
   481fc:	mov	w0, #0x8ac                 	// #2220
   48200:	csel	w1, w0, w1, eq  // eq = none
   48204:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48208:	tbz	w0, #23, 4a3d4 <aarch64_opcode_lookup@@Base+0x3e84>
   4820c:	tbnz	w0, #31, 4b3c4 <aarch64_opcode_lookup@@Base+0x4e74>
   48210:	tst	x0, #0x400000
   48214:	cset	w0, eq  // eq = none
   48218:	add	w1, w0, #0x809
   4821c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48220:	tbz	w0, #31, 49aa4 <aarch64_opcode_lookup@@Base+0x3554>
   48224:	tbnz	w0, #22, 49968 <aarch64_opcode_lookup@@Base+0x3418>
   48228:	tst	x0, #0x800000
   4822c:	mov	w1, #0x777                 	// #1911
   48230:	mov	w0, #0x77b                 	// #1915
   48234:	csel	w1, w0, w1, eq  // eq = none
   48238:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4823c:	tst	x0, #0x40000000
   48240:	mov	w1, #0x2c0                 	// #704
   48244:	mov	w0, #0x2cf                 	// #719
   48248:	csel	w1, w0, w1, eq  // eq = none
   4824c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48250:	tbnz	w0, #13, 48b9c <aarch64_opcode_lookup@@Base+0x264c>
   48254:	tst	x0, #0x4000
   48258:	mov	w1, #0x252                 	// #594
   4825c:	mov	w0, #0x24f                 	// #591
   48260:	csel	w1, w0, w1, eq  // eq = none
   48264:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48268:	tst	x0, #0x20000000
   4826c:	mov	w1, #0x81                  	// #129
   48270:	mov	w0, #0x70                  	// #112
   48274:	csel	w1, w0, w1, eq  // eq = none
   48278:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4827c:	tbnz	w0, #31, 49504 <aarch64_opcode_lookup@@Base+0x2fb4>
   48280:	tbnz	w0, #12, 4abcc <aarch64_opcode_lookup@@Base+0x467c>
   48284:	tbnz	w0, #10, 4a50c <aarch64_opcode_lookup@@Base+0x3fbc>
   48288:	tst	x0, #0x800
   4828c:	mov	w1, #0x877                 	// #2167
   48290:	mov	w0, #0x719                 	// #1817
   48294:	csel	w1, w0, w1, eq  // eq = none
   48298:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4829c:	tst	x0, #0x400000
   482a0:	cset	w0, eq  // eq = none
   482a4:	add	w1, w0, #0x3c1
   482a8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   482ac:	tbnz	w0, #13, 4a34c <aarch64_opcode_lookup@@Base+0x3dfc>
   482b0:	tbnz	w0, #14, 4a2cc <aarch64_opcode_lookup@@Base+0x3d7c>
   482b4:	tbz	w0, #30, 4ab70 <aarch64_opcode_lookup@@Base+0x4620>
   482b8:	tst	x0, #0x10000
   482bc:	mov	w1, #0x2ba                 	// #698
   482c0:	mov	w0, #0x2b3                 	// #691
   482c4:	csel	w1, w0, w1, eq  // eq = none
   482c8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   482cc:	tbnz	w0, #3, 49090 <aarch64_opcode_lookup@@Base+0x2b40>
   482d0:	tst	x0, #0x10
   482d4:	mov	w1, #0x324                 	// #804
   482d8:	mov	w0, #0x322                 	// #802
   482dc:	csel	w1, w0, w1, eq  // eq = none
   482e0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   482e4:	tbnz	w0, #31, 491d4 <aarch64_opcode_lookup@@Base+0x2c84>
   482e8:	tst	x0, #0x10
   482ec:	mov	w1, #0x52b                 	// #1323
   482f0:	mov	w0, #0x528                 	// #1320
   482f4:	csel	w1, w0, w1, eq  // eq = none
   482f8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   482fc:	tbnz	w0, #31, 493c0 <aarch64_opcode_lookup@@Base+0x2e70>
   48300:	tst	x0, #0x10
   48304:	mov	w1, #0x534                 	// #1332
   48308:	mov	w0, #0x53a                 	// #1338
   4830c:	csel	w1, w0, w1, eq  // eq = none
   48310:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48314:	tst	x0, #0x2000
   48318:	mov	w1, #0x247                 	// #583
   4831c:	mov	w0, #0x23a                 	// #570
   48320:	csel	w1, w0, w1, eq  // eq = none
   48324:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48328:	tbnz	w0, #31, 495c0 <aarch64_opcode_lookup@@Base+0x3070>
   4832c:	tbnz	w0, #10, 497e8 <aarch64_opcode_lookup@@Base+0x3298>
   48330:	tbnz	w0, #11, 4a94c <aarch64_opcode_lookup@@Base+0x43fc>
   48334:	tst	x0, #0x1000
   48338:	mov	w1, #0x865                 	// #2149
   4833c:	mov	w0, #0x85f                 	// #2143
   48340:	csel	w1, w0, w1, eq  // eq = none
   48344:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48348:	tbz	w0, #23, 4a23c <aarch64_opcode_lookup@@Base+0x3cec>
   4834c:	tbnz	w0, #31, 4a62c <aarch64_opcode_lookup@@Base+0x40dc>
   48350:	tbnz	w0, #10, 49b14 <aarch64_opcode_lookup@@Base+0x35c4>
   48354:	tbnz	w0, #12, 4a230 <aarch64_opcode_lookup@@Base+0x3ce0>
   48358:	ubfx	x0, x0, #22, #1
   4835c:	add	w1, w0, #0x874
   48360:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48364:	tbnz	w0, #12, 48d9c <aarch64_opcode_lookup@@Base+0x284c>
   48368:	tbnz	w0, #13, 49d48 <aarch64_opcode_lookup@@Base+0x37f8>
   4836c:	tbz	w0, #14, 4a928 <aarch64_opcode_lookup@@Base+0x43d8>
   48370:	tbz	w0, #16, 4c0bc <aarch64_opcode_lookup@@Base+0x5b6c>
   48374:	ubfx	x0, x0, #30, #1
   48378:	add	w1, w0, #0xe2
   4837c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48380:	tbnz	w0, #12, 48e30 <aarch64_opcode_lookup@@Base+0x28e0>
   48384:	tbnz	w0, #13, 4a4e4 <aarch64_opcode_lookup@@Base+0x3f94>
   48388:	tbnz	w0, #14, 4b3a0 <aarch64_opcode_lookup@@Base+0x4e50>
   4838c:	tbz	w0, #30, 4be7c <aarch64_opcode_lookup@@Base+0x592c>
   48390:	tbnz	w0, #16, 4be5c <aarch64_opcode_lookup@@Base+0x590c>
   48394:	cmp	w0, #0x0
   48398:	mov	w1, #0x2b4                 	// #692
   4839c:	mov	w0, #0x2af                 	// #687
   483a0:	csel	w1, w0, w1, ge  // ge = tcont
   483a4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   483a8:	tbz	w0, #23, 4a168 <aarch64_opcode_lookup@@Base+0x3c18>
   483ac:	tbnz	w0, #31, 4a8f0 <aarch64_opcode_lookup@@Base+0x43a0>
   483b0:	tbnz	w0, #12, 496dc <aarch64_opcode_lookup@@Base+0x318c>
   483b4:	ubfx	x0, x0, #22, #1
   483b8:	add	w1, w0, #0x80c
   483bc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   483c0:	tbnz	w0, #31, 494d8 <aarch64_opcode_lookup@@Base+0x2f88>
   483c4:	tst	x0, #0x10
   483c8:	mov	w1, #0x83e                 	// #2110
   483cc:	mov	w0, #0x832                 	// #2098
   483d0:	csel	w1, w0, w1, eq  // eq = none
   483d4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   483d8:	tbnz	w0, #14, 4912c <aarch64_opcode_lookup@@Base+0x2bdc>
   483dc:	tbnz	w0, #15, 4a0c8 <aarch64_opcode_lookup@@Base+0x3b78>
   483e0:	tbnz	w0, #29, 4b558 <aarch64_opcode_lookup@@Base+0x5008>
   483e4:	tst	x0, #0x40000000
   483e8:	mov	w1, #0x2a5                 	// #677
   483ec:	mov	w0, #0x34b                 	// #843
   483f0:	csel	w1, w0, w1, eq  // eq = none
   483f4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   483f8:	tbnz	w0, #30, 4a088 <aarch64_opcode_lookup@@Base+0x3b38>
   483fc:	cmp	w0, #0x0
   48400:	mov	w1, #0x398                 	// #920
   48404:	mov	w0, #0x392                 	// #914
   48408:	csel	w1, w0, w1, ge  // ge = tcont
   4840c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48410:	tst	x0, #0x20000000
   48414:	mov	w1, #0x1a2                 	// #418
   48418:	mov	w0, #0x8c                  	// #140
   4841c:	csel	w1, w0, w1, eq  // eq = none
   48420:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48424:	tbz	w0, #31, 49b0c <aarch64_opcode_lookup@@Base+0x35bc>
   48428:	tbz	w0, #20, 49b68 <aarch64_opcode_lookup@@Base+0x3618>
   4842c:	tbnz	w0, #22, 49b38 <aarch64_opcode_lookup@@Base+0x35e8>
   48430:	tst	x0, #0x800000
   48434:	mov	w1, #0x790                 	// #1936
   48438:	mov	w0, #0x794                 	// #1940
   4843c:	csel	w1, w0, w1, eq  // eq = none
   48440:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48444:	tbnz	w0, #23, 48ef4 <aarch64_opcode_lookup@@Base+0x29a4>
   48448:	tbnz	w0, #31, 4a388 <aarch64_opcode_lookup@@Base+0x3e38>
   4844c:	tbnz	w0, #10, 4afe4 <aarch64_opcode_lookup@@Base+0x4a94>
   48450:	tst	x0, #0x800
   48454:	mov	w1, #0x839                 	// #2105
   48458:	mov	w0, #0x882                 	// #2178
   4845c:	csel	w1, w0, w1, eq  // eq = none
   48460:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48464:	tbz	w0, #23, 49e40 <aarch64_opcode_lookup@@Base+0x38f0>
   48468:	tbnz	w0, #31, 4af2c <aarch64_opcode_lookup@@Base+0x49dc>
   4846c:	tst	x0, #0x400
   48470:	cset	w0, eq  // eq = none
   48474:	add	w1, w0, #0x978
   48478:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4847c:	tbnz	w0, #31, 49408 <aarch64_opcode_lookup@@Base+0x2eb8>
   48480:	tbnz	w0, #4, 49a90 <aarch64_opcode_lookup@@Base+0x3540>
   48484:	tbnz	w0, #10, 4adb0 <aarch64_opcode_lookup@@Base+0x4860>
   48488:	tbnz	w0, #11, 4ada4 <aarch64_opcode_lookup@@Base+0x4854>
   4848c:	ubfx	x0, x0, #12, #1
   48490:	add	w1, w0, #0x90a
   48494:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48498:	tbnz	w0, #12, 490c4 <aarch64_opcode_lookup@@Base+0x2b74>
   4849c:	tbnz	w0, #13, 4af10 <aarch64_opcode_lookup@@Base+0x49c0>
   484a0:	tst	x0, #0x4000
   484a4:	mov	w1, #0x233                 	// #563
   484a8:	mov	w0, #0x235                 	// #565
   484ac:	csel	w1, w0, w1, eq  // eq = none
   484b0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   484b4:	tbnz	w0, #14, 48e88 <aarch64_opcode_lookup@@Base+0x2938>
   484b8:	tbnz	w0, #15, 4a534 <aarch64_opcode_lookup@@Base+0x3fe4>
   484bc:	tbnz	w0, #29, 4b304 <aarch64_opcode_lookup@@Base+0x4db4>
   484c0:	tst	x0, #0x40000000
   484c4:	mov	w1, #0x1e0                 	// #480
   484c8:	mov	w0, #0x34d                 	// #845
   484cc:	csel	w1, w0, w1, eq  // eq = none
   484d0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   484d4:	tbnz	w0, #22, 49164 <aarch64_opcode_lookup@@Base+0x2c14>
   484d8:	tbnz	w0, #31, 4aafc <aarch64_opcode_lookup@@Base+0x45ac>
   484dc:	tst	x0, #0x400
   484e0:	mov	w1, #0x825                 	// #2085
   484e4:	mov	w0, #0x823                 	// #2083
   484e8:	csel	w1, w0, w1, eq  // eq = none
   484ec:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   484f0:	tbnz	w0, #31, 49554 <aarch64_opcode_lookup@@Base+0x3004>
   484f4:	tbnz	w0, #10, 498a0 <aarch64_opcode_lookup@@Base+0x3350>
   484f8:	tbnz	w0, #11, 4a700 <aarch64_opcode_lookup@@Base+0x41b0>
   484fc:	tst	x0, #0x1000
   48500:	mov	w1, #0x8c6                 	// #2246
   48504:	mov	w0, #0x800                 	// #2048
   48508:	csel	w1, w0, w1, eq  // eq = none
   4850c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48510:	tbz	w0, #13, 49b70 <aarch64_opcode_lookup@@Base+0x3620>
   48514:	tst	x0, #0x800000
   48518:	mov	w1, #0x230                 	// #560
   4851c:	mov	w0, #0x22e                 	// #558
   48520:	csel	w1, w0, w1, eq  // eq = none
   48524:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48528:	tbnz	w0, #23, 49190 <aarch64_opcode_lookup@@Base+0x2c40>
   4852c:	tst	x0, #0x400000
   48530:	mov	w1, #0x63b                 	// #1595
   48534:	mov	w0, #0x63f                 	// #1599
   48538:	csel	w1, w0, w1, eq  // eq = none
   4853c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48540:	tbnz	w0, #13, 48e6c <aarch64_opcode_lookup@@Base+0x291c>
   48544:	tbnz	w0, #14, 4a458 <aarch64_opcode_lookup@@Base+0x3f08>
   48548:	tst	x0, #0x20000000
   4854c:	mov	w1, #0x152                 	// #338
   48550:	mov	w0, #0x11e                 	// #286
   48554:	csel	w1, w0, w1, eq  // eq = none
   48558:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4855c:	tbnz	w0, #30, 49004 <aarch64_opcode_lookup@@Base+0x2ab4>
   48560:	cmp	w0, #0x0
   48564:	mov	w1, #0x38e                 	// #910
   48568:	mov	w0, #0x386                 	// #902
   4856c:	csel	w1, w0, w1, ge  // ge = tcont
   48570:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48574:	tbnz	w0, #31, 495e8 <aarch64_opcode_lookup@@Base+0x3098>
   48578:	tst	x0, #0x1000
   4857c:	mov	w1, #0x88f                 	// #2191
   48580:	mov	w0, #0x80b                 	// #2059
   48584:	csel	w1, w0, w1, eq  // eq = none
   48588:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4858c:	tbnz	w0, #12, 49144 <aarch64_opcode_lookup@@Base+0x2bf4>
   48590:	tbnz	w0, #13, 49dd0 <aarch64_opcode_lookup@@Base+0x3880>
   48594:	tbnz	w0, #14, 4ac20 <aarch64_opcode_lookup@@Base+0x46d0>
   48598:	tbnz	w0, #29, 4bf98 <aarch64_opcode_lookup@@Base+0x5a48>
   4859c:	tbz	w0, #30, 4bfb8 <aarch64_opcode_lookup@@Base+0x5a68>
   485a0:	tst	x0, #0x10000
   485a4:	mov	w1, #0x2b5                 	// #693
   485a8:	mov	w0, #0x2ad                 	// #685
   485ac:	csel	w1, w0, w1, eq  // eq = none
   485b0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   485b4:	tbnz	w0, #22, 48b68 <aarch64_opcode_lookup@@Base+0x2618>
   485b8:	tbnz	w0, #23, 4a1fc <aarch64_opcode_lookup@@Base+0x3cac>
   485bc:	tst	x0, #0x100000
   485c0:	mov	w1, #0x776                 	// #1910
   485c4:	mov	w0, #0x74f                 	// #1871
   485c8:	csel	w1, w0, w1, eq  // eq = none
   485cc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   485d0:	tbnz	w0, #31, 49b78 <aarch64_opcode_lookup@@Base+0x3628>
   485d4:	tbnz	w0, #10, 49640 <aarch64_opcode_lookup@@Base+0x30f0>
   485d8:	tbnz	w0, #11, 4a54c <aarch64_opcode_lookup@@Base+0x3ffc>
   485dc:	tst	x0, #0x1000
   485e0:	mov	w1, #0x856                 	// #2134
   485e4:	mov	w0, #0x8a8                 	// #2216
   485e8:	csel	w1, w0, w1, eq  // eq = none
   485ec:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   485f0:	tbnz	w0, #22, 48fcc <aarch64_opcode_lookup@@Base+0x2a7c>
   485f4:	tbz	w0, #23, 4b3cc <aarch64_opcode_lookup@@Base+0x4e7c>
   485f8:	tbnz	w0, #31, 4affc <aarch64_opcode_lookup@@Base+0x4aac>
   485fc:	tbnz	w0, #10, 4a3dc <aarch64_opcode_lookup@@Base+0x3e8c>
   48600:	tst	x0, #0x1000
   48604:	mov	w1, #0x8e0                 	// #2272
   48608:	mov	w0, #0x863                 	// #2147
   4860c:	csel	w1, w0, w1, eq  // eq = none
   48610:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48614:	tbnz	w0, #22, 48fb8 <aarch64_opcode_lookup@@Base+0x2a68>
   48618:	tst	x0, #0x800000
   4861c:	mov	w1, #0x67d                 	// #1661
   48620:	mov	w0, #0x689                 	// #1673
   48624:	csel	w1, w0, w1, eq  // eq = none
   48628:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4862c:	tbnz	w0, #22, 4a160 <aarch64_opcode_lookup@@Base+0x3c10>
   48630:	cmp	w0, #0x0
   48634:	mov	w1, #0x697                 	// #1687
   48638:	mov	w0, #0x827                 	// #2087
   4863c:	csel	w1, w0, w1, ge  // ge = tcont
   48640:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48644:	tbnz	w0, #13, 49054 <aarch64_opcode_lookup@@Base+0x2b04>
   48648:	tbnz	w0, #14, 4a574 <aarch64_opcode_lookup@@Base+0x4024>
   4864c:	tbnz	w0, #16, 4b01c <aarch64_opcode_lookup@@Base+0x4acc>
   48650:	tst	x0, #0x20000000
   48654:	mov	w1, #0xdc                  	// #220
   48658:	mov	w0, #0xab                  	// #171
   4865c:	csel	w1, w0, w1, eq  // eq = none
   48660:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48664:	tbnz	w0, #29, 4a3f0 <aarch64_opcode_lookup@@Base+0x3ea0>
   48668:	tbnz	w0, #22, 4949c <aarch64_opcode_lookup@@Base+0x2f4c>
   4866c:	tst	x0, #0x800000
   48670:	cset	w0, eq  // eq = none
   48674:	add	w1, w0, #0x971
   48678:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4867c:	tbnz	w0, #12, 490a4 <aarch64_opcode_lookup@@Base+0x2b54>
   48680:	tbnz	w0, #13, 4a294 <aarch64_opcode_lookup@@Base+0x3d44>
   48684:	tst	x0, #0x4000
   48688:	mov	w1, #0x148                 	// #328
   4868c:	mov	w0, #0x141                 	// #321
   48690:	csel	w1, w0, w1, eq  // eq = none
   48694:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48698:	tbnz	w0, #29, 4a1e0 <aarch64_opcode_lookup@@Base+0x3c90>
   4869c:	tst	x0, #0x40000000
   486a0:	mov	w1, #0x943                 	// #2371
   486a4:	mov	w0, #0x93f                 	// #2367
   486a8:	csel	w1, w0, w1, eq  // eq = none
   486ac:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   486b0:	ubfx	x0, x0, #14, #1
   486b4:	add	w1, w0, #0x1a9
   486b8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   486bc:	tbnz	w0, #22, 49034 <aarch64_opcode_lookup@@Base+0x2ae4>
   486c0:	tbz	w0, #23, 4b1f4 <aarch64_opcode_lookup@@Base+0x4ca4>
   486c4:	tbnz	w0, #31, 4af34 <aarch64_opcode_lookup@@Base+0x49e4>
   486c8:	tbnz	w0, #10, 49e48 <aarch64_opcode_lookup@@Base+0x38f8>
   486cc:	tst	x0, #0x1000
   486d0:	mov	w1, #0x8e7                 	// #2279
   486d4:	mov	w0, #0x86a                 	// #2154
   486d8:	csel	w1, w0, w1, eq  // eq = none
   486dc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   486e0:	tbnz	w0, #31, 49540 <aarch64_opcode_lookup@@Base+0x2ff0>
   486e4:	tbnz	w0, #10, 49994 <aarch64_opcode_lookup@@Base+0x3444>
   486e8:	tbnz	w0, #11, 4a760 <aarch64_opcode_lookup@@Base+0x4210>
   486ec:	tst	x0, #0x1000
   486f0:	mov	w1, #0x893                 	// #2195
   486f4:	mov	w0, #0x876                 	// #2166
   486f8:	csel	w1, w0, w1, eq  // eq = none
   486fc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48700:	tbnz	w0, #20, 48bd4 <aarch64_opcode_lookup@@Base+0x2684>
   48704:	tbnz	w0, #22, 4a1e8 <aarch64_opcode_lookup@@Base+0x3c98>
   48708:	tst	x0, #0x800000
   4870c:	mov	w1, #0x61d                 	// #1565
   48710:	mov	w0, #0x62a                 	// #1578
   48714:	csel	w1, w0, w1, eq  // eq = none
   48718:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4871c:	cmp	w0, #0x0
   48720:	mov	w1, #0x954                 	// #2388
   48724:	mov	w0, #0x94d                 	// #2381
   48728:	csel	w1, w0, w1, ge  // ge = tcont
   4872c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48730:	cmp	w0, #0x0
   48734:	mov	w1, #0x955                 	// #2389
   48738:	mov	w0, #0x94e                 	// #2382
   4873c:	csel	w1, w0, w1, ge  // ge = tcont
   48740:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48744:	tbnz	w0, #11, 48dd0 <aarch64_opcode_lookup@@Base+0x2880>
   48748:	tbnz	w0, #12, 49d84 <aarch64_opcode_lookup@@Base+0x3834>
   4874c:	ubfx	x0, x0, #13, #1
   48750:	add	w1, w0, #0x7ef
   48754:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48758:	tbnz	w0, #12, 492b0 <aarch64_opcode_lookup@@Base+0x2d60>
   4875c:	tbnz	w0, #13, 49e90 <aarch64_opcode_lookup@@Base+0x3940>
   48760:	tbz	w0, #14, 4b928 <aarch64_opcode_lookup@@Base+0x53d8>
   48764:	tbnz	w0, #16, 4b688 <aarch64_opcode_lookup@@Base+0x5138>
   48768:	tst	x0, #0x80000
   4876c:	mov	w1, #0x29f                 	// #671
   48770:	mov	w0, #0xa6                  	// #166
   48774:	csel	w1, w0, w1, eq  // eq = none
   48778:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4877c:	tbnz	w0, #22, 492e0 <aarch64_opcode_lookup@@Base+0x2d90>
   48780:	tbnz	w0, #21, 49cc8 <aarch64_opcode_lookup@@Base+0x3778>
   48784:	tst	x0, #0x800000
   48788:	mov	w1, #0x82b                 	// #2091
   4878c:	mov	w0, #0x828                 	// #2088
   48790:	csel	w1, w0, w1, eq  // eq = none
   48794:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48798:	tbnz	w0, #22, 49cc0 <aarch64_opcode_lookup@@Base+0x3770>
   4879c:	tst	x0, #0x800000
   487a0:	mov	w1, #0x754                 	// #1876
   487a4:	mov	w0, #0x769                 	// #1897
   487a8:	csel	w1, w0, w1, eq  // eq = none
   487ac:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   487b0:	tbnz	w0, #22, 49d00 <aarch64_opcode_lookup@@Base+0x37b0>
   487b4:	tst	x0, #0x800000
   487b8:	mov	w1, #0x756                 	// #1878
   487bc:	mov	w0, #0x76b                 	// #1899
   487c0:	csel	w1, w0, w1, eq  // eq = none
   487c4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   487c8:	tbz	w0, #12, 49c9c <aarch64_opcode_lookup@@Base+0x374c>
   487cc:	tbz	w0, #23, 4b668 <aarch64_opcode_lookup@@Base+0x5118>
   487d0:	tst	x0, #0x40000000
   487d4:	cset	w0, eq  // eq = none
   487d8:	add	w1, w0, #0x982
   487dc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   487e0:	ubfx	x0, x0, #30, #1
   487e4:	add	w1, w0, #0x68
   487e8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   487ec:	tst	x0, #0x800000
   487f0:	cset	w0, eq  // eq = none
   487f4:	add	w1, w0, #0x73
   487f8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   487fc:	tbnz	w0, #15, 494ec <aarch64_opcode_lookup@@Base+0x2f9c>
   48800:	tbnz	w0, #22, 4a374 <aarch64_opcode_lookup@@Base+0x3e24>
   48804:	tst	x0, #0x800000
   48808:	mov	w1, #0x5f2                 	// #1522
   4880c:	mov	w0, #0x5de                 	// #1502
   48810:	csel	w1, w0, w1, eq  // eq = none
   48814:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48818:	tbnz	w0, #13, 49594 <aarch64_opcode_lookup@@Base+0x3044>
   4881c:	tst	x0, #0x8000
   48820:	mov	w1, #0x229                 	// #553
   48824:	mov	w0, #0x227                 	// #551
   48828:	csel	w1, w0, w1, eq  // eq = none
   4882c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48830:	tbnz	w0, #12, 493e8 <aarch64_opcode_lookup@@Base+0x2e98>
   48834:	tbnz	w0, #13, 4a244 <aarch64_opcode_lookup@@Base+0x3cf4>
   48838:	tst	x0, #0x4000
   4883c:	mov	w1, #0x114                 	// #276
   48840:	mov	w0, #0x10d                 	// #269
   48844:	csel	w1, w0, w1, eq  // eq = none
   48848:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4884c:	tbnz	w0, #22, 4922c <aarch64_opcode_lookup@@Base+0x2cdc>
   48850:	tst	x0, #0x800000
   48854:	mov	w1, #0x75b                 	// #1883
   48858:	mov	w0, #0x748                 	// #1864
   4885c:	csel	w1, w0, w1, eq  // eq = none
   48860:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48864:	tbnz	w0, #23, 493d8 <aarch64_opcode_lookup@@Base+0x2e88>
   48868:	tbz	w0, #30, 4b1c4 <aarch64_opcode_lookup@@Base+0x4c74>
   4886c:	tst	x0, #0x200000
   48870:	mov	w1, #0x6e6                 	// #1766
   48874:	mov	w0, #0x61b                 	// #1563
   48878:	csel	w1, w0, w1, eq  // eq = none
   4887c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48880:	tst	x0, #0x800000
   48884:	mov	w1, #0x60e                 	// #1550
   48888:	mov	w0, #0x611                 	// #1553
   4888c:	csel	w1, w0, w1, eq  // eq = none
   48890:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48894:	tbnz	w0, #22, 49414 <aarch64_opcode_lookup@@Base+0x2ec4>
   48898:	tbnz	w0, #21, 4b004 <aarch64_opcode_lookup@@Base+0x4ab4>
   4889c:	tst	x0, #0x800000
   488a0:	mov	w1, #0x6ee                 	// #1774
   488a4:	mov	w0, #0x6fc                 	// #1788
   488a8:	csel	w1, w0, w1, eq  // eq = none
   488ac:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   488b0:	tbnz	w0, #13, 49614 <aarch64_opcode_lookup@@Base+0x30c4>
   488b4:	tbnz	w0, #22, 4a5a4 <aarch64_opcode_lookup@@Base+0x4054>
   488b8:	tst	x0, #0x800000
   488bc:	mov	w1, #0x642                 	// #1602
   488c0:	mov	w0, #0x646                 	// #1606
   488c4:	csel	w1, w0, w1, eq  // eq = none
   488c8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   488cc:	tbnz	w0, #13, 491a8 <aarch64_opcode_lookup@@Base+0x2c58>
   488d0:	tbnz	w0, #22, 49d90 <aarch64_opcode_lookup@@Base+0x3840>
   488d4:	tst	x0, #0x800000
   488d8:	mov	w1, #0x6b6                 	// #1718
   488dc:	mov	w0, #0x6ba                 	// #1722
   488e0:	csel	w1, w0, w1, eq  // eq = none
   488e4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   488e8:	tbnz	w0, #22, 494c4 <aarch64_opcode_lookup@@Base+0x2f74>
   488ec:	tbnz	w0, #21, 4b380 <aarch64_opcode_lookup@@Base+0x4e30>
   488f0:	tst	x0, #0x800000
   488f4:	mov	w1, #0x6eb                 	// #1771
   488f8:	mov	w0, #0x6f9                 	// #1785
   488fc:	csel	w1, w0, w1, eq  // eq = none
   48900:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48904:	tbnz	w0, #15, 4957c <aarch64_opcode_lookup@@Base+0x302c>
   48908:	tbnz	w0, #22, 49fd4 <aarch64_opcode_lookup@@Base+0x3a84>
   4890c:	tst	x0, #0x800000
   48910:	mov	w1, #0x66e                 	// #1646
   48914:	mov	w0, #0x65b                 	// #1627
   48918:	csel	w1, w0, w1, eq  // eq = none
   4891c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48920:	tbz	w0, #22, 4a4dc <aarch64_opcode_lookup@@Base+0x3f8c>
   48924:	tbz	w0, #21, 4aff4 <aarch64_opcode_lookup@@Base+0x4aa4>
   48928:	tst	x0, #0x800000
   4892c:	mov	w1, #0x758                 	// #1880
   48930:	mov	w0, #0x76f                 	// #1903
   48934:	csel	w1, w0, w1, eq  // eq = none
   48938:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4893c:	tbnz	w0, #22, 49518 <aarch64_opcode_lookup@@Base+0x2fc8>
   48940:	tbnz	w0, #21, 4a560 <aarch64_opcode_lookup@@Base+0x4010>
   48944:	tst	x0, #0x800000
   48948:	mov	w1, #0x6f2                 	// #1778
   4894c:	mov	w0, #0x6e3                 	// #1763
   48950:	csel	w1, w0, w1, eq  // eq = none
   48954:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48958:	tbnz	w0, #22, 49320 <aarch64_opcode_lookup@@Base+0x2dd0>
   4895c:	tbnz	w0, #21, 49f7c <aarch64_opcode_lookup@@Base+0x3a2c>
   48960:	tst	x0, #0x800000
   48964:	mov	w1, #0x6f5                 	// #1781
   48968:	mov	w0, #0x6e7                 	// #1767
   4896c:	csel	w1, w0, w1, eq  // eq = none
   48970:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48974:	tst	x0, #0x200000
   48978:	mov	w1, #0x2f4                 	// #756
   4897c:	mov	w0, #0x2ef                 	// #751
   48980:	csel	w1, w0, w1, eq  // eq = none
   48984:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48988:	tst	x0, #0x200000
   4898c:	mov	w1, #0x2f3                 	// #755
   48990:	mov	w0, #0x2ee                 	// #750
   48994:	csel	w1, w0, w1, eq  // eq = none
   48998:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4899c:	tbnz	w0, #22, 49688 <aarch64_opcode_lookup@@Base+0x3138>
   489a0:	tst	x0, #0x800000
   489a4:	mov	w1, #0x791                 	// #1937
   489a8:	mov	w0, #0x78d                 	// #1933
   489ac:	csel	w1, w0, w1, eq  // eq = none
   489b0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   489b4:	ubfx	x0, x0, #22, #1
   489b8:	add	w1, w0, #0x51b
   489bc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   489c0:	tbnz	w0, #17, 49adc <aarch64_opcode_lookup@@Base+0x358c>
   489c4:	tbnz	w0, #18, 4a624 <aarch64_opcode_lookup@@Base+0x40d4>
   489c8:	tbz	w0, #19, 4bf40 <aarch64_opcode_lookup@@Base+0x59f0>
   489cc:	tst	x0, #0x100000
   489d0:	mov	w1, #0x58f                 	// #1423
   489d4:	mov	w0, #0x7b4                 	// #1972
   489d8:	csel	w1, w0, w1, eq  // eq = none
   489dc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   489e0:	tst	x0, #0x10
   489e4:	mov	w1, #0x562                 	// #1378
   489e8:	mov	w0, #0x577                 	// #1399
   489ec:	csel	w1, w0, w1, eq  // eq = none
   489f0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   489f4:	tbnz	w0, #12, 49790 <aarch64_opcode_lookup@@Base+0x3240>
   489f8:	tbnz	w0, #30, 4a900 <aarch64_opcode_lookup@@Base+0x43b0>
   489fc:	tst	x0, #0x800
   48a00:	mov	w1, #0x6be                 	// #1726
   48a04:	mov	w0, #0x6c4                 	// #1732
   48a08:	csel	w1, w0, w1, eq  // eq = none
   48a0c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48a10:	tbz	w0, #11, 4b1bc <aarch64_opcode_lookup@@Base+0x4c6c>
   48a14:	tst	x0, #0x1000
   48a18:	mov	w1, #0x5be                 	// #1470
   48a1c:	mov	w0, #0x5c7                 	// #1479
   48a20:	csel	w1, w0, w1, eq  // eq = none
   48a24:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48a28:	ubfx	x0, x0, #23, #1
   48a2c:	add	w1, w0, #0x965
   48a30:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48a34:	tbnz	w0, #13, 4974c <aarch64_opcode_lookup@@Base+0x31fc>
   48a38:	tbnz	w0, #15, 4ac88 <aarch64_opcode_lookup@@Base+0x4738>
   48a3c:	tst	x0, #0x400000
   48a40:	mov	w1, #0x12a                 	// #298
   48a44:	mov	w0, #0x9a                  	// #154
   48a48:	csel	w1, w0, w1, eq  // eq = none
   48a4c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48a50:	tbnz	w0, #13, 49a7c <aarch64_opcode_lookup@@Base+0x352c>
   48a54:	tst	x0, #0x800000
   48a58:	mov	w1, #0x169                 	// #361
   48a5c:	mov	w0, #0x159                 	// #345
   48a60:	csel	w1, w0, w1, eq  // eq = none
   48a64:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48a68:	mov	w1, #0x381                 	// #897
   48a6c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48a70:	tbnz	w0, #13, 49a68 <aarch64_opcode_lookup@@Base+0x3518>
   48a74:	tst	x0, #0x4000
   48a78:	mov	w1, #0x109                 	// #265
   48a7c:	mov	w0, #0x106                 	// #262
   48a80:	csel	w1, w0, w1, eq  // eq = none
   48a84:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48a88:	mov	w1, #0x380                 	// #896
   48a8c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48a90:	tbnz	w0, #17, 49928 <aarch64_opcode_lookup@@Base+0x33d8>
   48a94:	tbnz	w0, #18, 4b184 <aarch64_opcode_lookup@@Base+0x4c34>
   48a98:	tbnz	w0, #19, 4b16c <aarch64_opcode_lookup@@Base+0x4c1c>
   48a9c:	tbz	w0, #20, 4b974 <aarch64_opcode_lookup@@Base+0x5424>
   48aa0:	tst	x0, #0x40000000
   48aa4:	mov	w1, #0x8d5                 	// #2261
   48aa8:	mov	w0, #0x6c6                 	// #1734
   48aac:	csel	w1, w0, w1, eq  // eq = none
   48ab0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48ab4:	tst	x0, #0x2000
   48ab8:	mov	w1, #0x163                 	// #355
   48abc:	mov	w0, #0x15b                 	// #347
   48ac0:	csel	w1, w0, w1, eq  // eq = none
   48ac4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48ac8:	tbnz	w0, #16, 498e0 <aarch64_opcode_lookup@@Base+0x3390>
   48acc:	tbnz	w0, #17, 4ab38 <aarch64_opcode_lookup@@Base+0x45e8>
   48ad0:	tbnz	w0, #18, 4ab24 <aarch64_opcode_lookup@@Base+0x45d4>
   48ad4:	tst	x0, #0x80000
   48ad8:	mov	w1, #0x51d                 	// #1309
   48adc:	mov	w0, #0x547                 	// #1351
   48ae0:	csel	w1, w0, w1, eq  // eq = none
   48ae4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48ae8:	tst	x0, #0x10000
   48aec:	mov	w1, #0x81d                 	// #2077
   48af0:	mov	w0, #0x81b                 	// #2075
   48af4:	csel	w1, w0, w1, eq  // eq = none
   48af8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48afc:	mov	w1, #0x92c                 	// #2348
   48b00:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48b04:	tbnz	w0, #11, 4aa9c <aarch64_opcode_lookup@@Base+0x454c>
   48b08:	tst	x0, #0x800000
   48b0c:	mov	w1, #0x934                 	// #2356
   48b10:	mov	w0, #0x92f                 	// #2351
   48b14:	csel	w1, w0, w1, eq  // eq = none
   48b18:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48b1c:	tbnz	w0, #13, 499e8 <aarch64_opcode_lookup@@Base+0x3498>
   48b20:	tbnz	w0, #15, 4b0b0 <aarch64_opcode_lookup@@Base+0x4b60>
   48b24:	tst	x0, #0x800000
   48b28:	mov	w1, #0x138                 	// #312
   48b2c:	mov	w0, #0x128                 	// #296
   48b30:	csel	w1, w0, w1, eq  // eq = none
   48b34:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48b38:	tbnz	w0, #16, 498fc <aarch64_opcode_lookup@@Base+0x33ac>
   48b3c:	tbnz	w0, #19, 4ac08 <aarch64_opcode_lookup@@Base+0x46b8>
   48b40:	tst	x0, #0x100000
   48b44:	mov	w1, #0x51f                 	// #1311
   48b48:	mov	w0, #0x5d8                 	// #1496
   48b4c:	csel	w1, w0, w1, eq  // eq = none
   48b50:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48b54:	tbnz	w0, #12, 49af4 <aarch64_opcode_lookup@@Base+0x35a4>
   48b58:	tbnz	w0, #23, 4a71c <aarch64_opcode_lookup@@Base+0x41cc>
   48b5c:	ubfx	x0, x0, #22, #1
   48b60:	add	w1, w0, #0x4ff
   48b64:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48b68:	tbnz	w0, #23, 4a054 <aarch64_opcode_lookup@@Base+0x3b04>
   48b6c:	tbz	w0, #31, 4b4ac <aarch64_opcode_lookup@@Base+0x4f5c>
   48b70:	tst	x0, #0x100000
   48b74:	mov	w1, #0x786                 	// #1926
   48b78:	mov	w0, #0x753                 	// #1875
   48b7c:	csel	w1, w0, w1, eq  // eq = none
   48b80:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48b84:	tbnz	w0, #31, 4b828 <aarch64_opcode_lookup@@Base+0x52d8>
   48b88:	tst	x0, #0x40000000
   48b8c:	mov	w1, #0x38a                 	// #906
   48b90:	mov	w0, #0x385                 	// #901
   48b94:	csel	w1, w0, w1, eq  // eq = none
   48b98:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48b9c:	tst	x0, #0x4000
   48ba0:	mov	w1, #0x253                 	// #595
   48ba4:	mov	w0, #0x251                 	// #593
   48ba8:	csel	w1, w0, w1, eq  // eq = none
   48bac:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48bb0:	tbz	w0, #15, 4b530 <aarch64_opcode_lookup@@Base+0x4fe0>
   48bb4:	tbnz	w0, #16, 4a06c <aarch64_opcode_lookup@@Base+0x3b1c>
   48bb8:	tbnz	w0, #19, 4b51c <aarch64_opcode_lookup@@Base+0x4fcc>
   48bbc:	tbnz	w0, #20, 4be44 <aarch64_opcode_lookup@@Base+0x58f4>
   48bc0:	tst	x0, #0x20000000
   48bc4:	mov	w1, #0x20f                 	// #527
   48bc8:	mov	w0, #0x1f1                 	// #497
   48bcc:	csel	w1, w0, w1, eq  // eq = none
   48bd0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48bd4:	tbnz	w0, #22, 4a2e4 <aarch64_opcode_lookup@@Base+0x3d94>
   48bd8:	tst	x0, #0x800000
   48bdc:	mov	w1, #0x6ac                 	// #1708
   48be0:	mov	w0, #0x6af                 	// #1711
   48be4:	csel	w1, w0, w1, eq  // eq = none
   48be8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48bec:	ubfx	x0, x0, #22, #1
   48bf0:	add	w1, w0, #0x56b
   48bf4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48bf8:	tst	x0, #0x800000
   48bfc:	mov	w1, #0x5e9                 	// #1513
   48c00:	mov	w0, #0x637                 	// #1591
   48c04:	csel	w1, w0, w1, eq  // eq = none
   48c08:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48c0c:	tbnz	w0, #31, 49dfc <aarch64_opcode_lookup@@Base+0x38ac>
   48c10:	tbnz	w0, #4, 4b734 <aarch64_opcode_lookup@@Base+0x51e4>
   48c14:	tbnz	w0, #9, 4bdb0 <aarch64_opcode_lookup@@Base+0x5860>
   48c18:	tst	x0, #0x100000
   48c1c:	mov	w1, #0x516                 	// #1302
   48c20:	mov	w0, #0x6de                 	// #1758
   48c24:	csel	w1, w0, w1, eq  // eq = none
   48c28:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48c2c:	tst	x0, #0x800000
   48c30:	mov	w1, #0x242                 	// #578
   48c34:	mov	w0, #0x23c                 	// #572
   48c38:	csel	w1, w0, w1, eq  // eq = none
   48c3c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48c40:	ubfx	x0, x0, #30, #1
   48c44:	add	w1, w0, #0x42
   48c48:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48c4c:	ubfx	x0, x0, #30, #1
   48c50:	add	w1, w0, #0x78
   48c54:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48c58:	tbnz	w0, #14, 4a004 <aarch64_opcode_lookup@@Base+0x3ab4>
   48c5c:	tbnz	w0, #22, 4ad54 <aarch64_opcode_lookup@@Base+0x4804>
   48c60:	tbnz	w0, #23, 4a9a0 <aarch64_opcode_lookup@@Base+0x4450>
   48c64:	tbnz	w0, #31, 4c074 <aarch64_opcode_lookup@@Base+0x5b24>
   48c68:	ubfx	x0, x0, #30, #1
   48c6c:	add	w1, w0, #0x425
   48c70:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48c74:	tbnz	w0, #31, 49cac <aarch64_opcode_lookup@@Base+0x375c>
   48c78:	tbnz	w0, #9, 4b110 <aarch64_opcode_lookup@@Base+0x4bc0>
   48c7c:	tbnz	w0, #20, 4bdb8 <aarch64_opcode_lookup@@Base+0x5868>
   48c80:	tst	x0, #0x10
   48c84:	mov	w1, #0x6d8                 	// #1752
   48c88:	mov	w0, #0x6dd                 	// #1757
   48c8c:	csel	w1, w0, w1, eq  // eq = none
   48c90:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48c94:	tst	x0, #0x20000000
   48c98:	mov	w1, #0x94                  	// #148
   48c9c:	mov	w0, #0x8b                  	// #139
   48ca0:	csel	w1, w0, w1, eq  // eq = none
   48ca4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48ca8:	tst	x0, #0x800000
   48cac:	mov	w1, #0x66a                 	// #1642
   48cb0:	mov	w0, #0x6a1                 	// #1697
   48cb4:	csel	w1, w0, w1, eq  // eq = none
   48cb8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48cbc:	ubfx	x0, x0, #30, #1
   48cc0:	add	w1, w0, #0x7b
   48cc4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48cc8:	tbnz	w0, #22, 49c74 <aarch64_opcode_lookup@@Base+0x3724>
   48ccc:	tst	x0, #0x800000
   48cd0:	mov	w1, #0x792                 	// #1938
   48cd4:	mov	w0, #0x78e                 	// #1934
   48cd8:	csel	w1, w0, w1, eq  // eq = none
   48cdc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48ce0:	tst	x0, #0x800000
   48ce4:	mov	w1, #0x6a8                 	// #1704
   48ce8:	mov	w0, #0x6b3                 	// #1715
   48cec:	csel	w1, w0, w1, eq  // eq = none
   48cf0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48cf4:	cmp	w0, #0x0
   48cf8:	mov	w1, #0x3a4                 	// #932
   48cfc:	mov	w0, #0x3a0                 	// #928
   48d00:	csel	w1, w0, w1, ge  // ge = tcont
   48d04:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48d08:	tbnz	w0, #14, 49ed8 <aarch64_opcode_lookup@@Base+0x3988>
   48d0c:	tbnz	w0, #29, 4b8cc <aarch64_opcode_lookup@@Base+0x537c>
   48d10:	ubfx	x0, x0, #30, #1
   48d14:	add	w1, w0, #0x40
   48d18:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48d1c:	tst	x0, #0x8000
   48d20:	mov	w1, #0x23b                 	// #571
   48d24:	mov	w0, #0x246                 	// #582
   48d28:	csel	w1, w0, w1, eq  // eq = none
   48d2c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48d30:	tbnz	w0, #31, 4aef8 <aarch64_opcode_lookup@@Base+0x49a8>
   48d34:	tbnz	w0, #10, 49e7c <aarch64_opcode_lookup@@Base+0x392c>
   48d38:	tbnz	w0, #11, 4ae40 <aarch64_opcode_lookup@@Base+0x48f0>
   48d3c:	tbnz	w0, #12, 4ae34 <aarch64_opcode_lookup@@Base+0x48e4>
   48d40:	ubfx	x0, x0, #22, #1
   48d44:	add	w1, w0, #0x71a
   48d48:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48d4c:	tst	x0, #0x4000
   48d50:	mov	w1, #0x2ac                 	// #684
   48d54:	mov	w0, #0x2a8                 	// #680
   48d58:	csel	w1, w0, w1, eq  // eq = none
   48d5c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48d60:	ubfx	x0, x0, #30, #1
   48d64:	add	w1, w0, #0x7d
   48d68:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48d6c:	tbnz	w0, #23, 49f38 <aarch64_opcode_lookup@@Base+0x39e8>
   48d70:	cmp	w0, #0x0
   48d74:	mov	w1, #0x74d                 	// #1869
   48d78:	mov	w0, #0x974                 	// #2420
   48d7c:	csel	w1, w0, w1, ge  // ge = tcont
   48d80:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48d84:	tbnz	w0, #14, 49d5c <aarch64_opcode_lookup@@Base+0x380c>
   48d88:	tst	x0, #0x20000000
   48d8c:	mov	w1, #0x153                 	// #339
   48d90:	mov	w0, #0x11f                 	// #287
   48d94:	csel	w1, w0, w1, eq  // eq = none
   48d98:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48d9c:	tbnz	w0, #13, 49f90 <aarch64_opcode_lookup@@Base+0x3a40>
   48da0:	tst	x0, #0x400000
   48da4:	mov	w1, #0xf4                  	// #244
   48da8:	mov	w0, #0xf2                  	// #242
   48dac:	csel	w1, w0, w1, eq  // eq = none
   48db0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48db4:	tbnz	w0, #14, 4a440 <aarch64_opcode_lookup@@Base+0x3ef0>
   48db8:	tbnz	w0, #22, 4b1fc <aarch64_opcode_lookup@@Base+0x4cac>
   48dbc:	tbnz	w0, #23, 4b218 <aarch64_opcode_lookup@@Base+0x4cc8>
   48dc0:	tbnz	w0, #31, 4bedc <aarch64_opcode_lookup@@Base+0x598c>
   48dc4:	ubfx	x0, x0, #30, #1
   48dc8:	add	w1, w0, #0x431
   48dcc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48dd0:	ubfx	x0, x0, #13, #1
   48dd4:	add	w1, w0, #0x7e2
   48dd8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48ddc:	tbnz	w0, #14, 4a170 <aarch64_opcode_lookup@@Base+0x3c20>
   48de0:	tst	x0, #0x20000000
   48de4:	mov	w1, #0x155                 	// #341
   48de8:	mov	w0, #0x121                 	// #289
   48dec:	csel	w1, w0, w1, eq  // eq = none
   48df0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48df4:	tst	x0, #0x1000
   48df8:	mov	w1, #0x912                 	// #2322
   48dfc:	mov	w0, #0x54b                 	// #1355
   48e00:	csel	w1, w0, w1, eq  // eq = none
   48e04:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48e08:	tbnz	w0, #13, 4a2bc <aarch64_opcode_lookup@@Base+0x3d6c>
   48e0c:	tbnz	w0, #14, 4a8a8 <aarch64_opcode_lookup@@Base+0x4358>
   48e10:	ubfx	x0, x0, #30, #1
   48e14:	add	w1, w0, #0x4e
   48e18:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48e1c:	tst	x0, #0x40000000
   48e20:	mov	w1, #0x94f                 	// #2383
   48e24:	mov	w0, #0x94b                 	// #2379
   48e28:	csel	w1, w0, w1, eq  // eq = none
   48e2c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48e30:	tbnz	w0, #13, 4a7dc <aarch64_opcode_lookup@@Base+0x428c>
   48e34:	tst	x0, #0x4000
   48e38:	mov	w1, #0x2dd                 	// #733
   48e3c:	mov	w0, #0x2bb                 	// #699
   48e40:	csel	w1, w0, w1, eq  // eq = none
   48e44:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48e48:	tst	x0, #0x800000
   48e4c:	cset	w0, eq  // eq = none
   48e50:	add	w1, w0, #0x1b0
   48e54:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48e58:	tst	x0, #0x800000
   48e5c:	mov	w1, #0x5f7                 	// #1527
   48e60:	mov	w0, #0x5e2                 	// #1506
   48e64:	csel	w1, w0, w1, eq  // eq = none
   48e68:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48e6c:	tbz	w0, #14, 4b5a4 <aarch64_opcode_lookup@@Base+0x5054>
   48e70:	tbnz	w0, #23, 4b514 <aarch64_opcode_lookup@@Base+0x4fc4>
   48e74:	tst	x0, #0x20000000
   48e78:	mov	w1, #0x162                 	// #354
   48e7c:	mov	w0, #0x12f                 	// #303
   48e80:	csel	w1, w0, w1, eq  // eq = none
   48e84:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48e88:	tbnz	w0, #15, 4a0e8 <aarch64_opcode_lookup@@Base+0x3b98>
   48e8c:	tbnz	w0, #29, 4b108 <aarch64_opcode_lookup@@Base+0x4bb8>
   48e90:	tst	x0, #0x40000000
   48e94:	mov	w1, #0x1e1                 	// #481
   48e98:	mov	w0, #0x355                 	// #853
   48e9c:	csel	w1, w0, w1, eq  // eq = none
   48ea0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48ea4:	tbnz	w0, #31, 4a9f0 <aarch64_opcode_lookup@@Base+0x44a0>
   48ea8:	tst	x0, #0x40000000
   48eac:	mov	w1, #0x39f                 	// #927
   48eb0:	mov	w0, #0x39a                 	// #922
   48eb4:	csel	w1, w0, w1, eq  // eq = none
   48eb8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48ebc:	ubfx	x0, x0, #30, #1
   48ec0:	add	w1, w0, #0x19a
   48ec4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48ec8:	tbnz	w0, #31, 4a678 <aarch64_opcode_lookup@@Base+0x4128>
   48ecc:	tst	x0, #0x40000000
   48ed0:	mov	w1, #0x394                 	// #916
   48ed4:	mov	w0, #0x391                 	// #913
   48ed8:	csel	w1, w0, w1, eq  // eq = none
   48edc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48ee0:	tst	x0, #0x800000
   48ee4:	mov	w1, #0x676                 	// #1654
   48ee8:	mov	w0, #0x662                 	// #1634
   48eec:	csel	w1, w0, w1, eq  // eq = none
   48ef0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48ef4:	tbnz	w0, #22, 4a19c <aarch64_opcode_lookup@@Base+0x3c4c>
   48ef8:	tbnz	w0, #31, 4b948 <aarch64_opcode_lookup@@Base+0x53f8>
   48efc:	tbnz	w0, #10, 4b1e0 <aarch64_opcode_lookup@@Base+0x4c90>
   48f00:	tbz	w0, #12, 4b940 <aarch64_opcode_lookup@@Base+0x53f0>
   48f04:	tst	x0, #0x800
   48f08:	mov	w1, #0x83a                 	// #2106
   48f0c:	mov	w0, #0x883                 	// #2179
   48f10:	csel	w1, w0, w1, eq  // eq = none
   48f14:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48f18:	tbnz	w0, #11, 4a0ac <aarch64_opcode_lookup@@Base+0x3b5c>
   48f1c:	tbnz	w0, #12, 4a9f8 <aarch64_opcode_lookup@@Base+0x44a8>
   48f20:	tbnz	w0, #22, 4aa28 <aarch64_opcode_lookup@@Base+0x44d8>
   48f24:	tst	x0, #0x800000
   48f28:	mov	w1, #0x554                 	// #1364
   48f2c:	mov	w0, #0x54c                 	// #1356
   48f30:	csel	w1, w0, w1, eq  // eq = none
   48f34:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48f38:	tst	x0, #0x40000000
   48f3c:	mov	w0, #0x4                   	// #4
   48f40:	csinc	w1, w0, wzr, ne  // ne = any
   48f44:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48f48:	tbnz	w0, #17, 49b94 <aarch64_opcode_lookup@@Base+0x3644>
   48f4c:	tbnz	w0, #15, 4ace4 <aarch64_opcode_lookup@@Base+0x4794>
   48f50:	tbnz	w0, #16, 4accc <aarch64_opcode_lookup@@Base+0x477c>
   48f54:	tbnz	w0, #18, 4ba44 <aarch64_opcode_lookup@@Base+0x54f4>
   48f58:	tst	x0, #0x80000
   48f5c:	mov	w1, #0x32c                 	// #812
   48f60:	mov	w0, #0x330                 	// #816
   48f64:	csel	w1, w0, w1, eq  // eq = none
   48f68:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48f6c:	tbnz	w0, #11, 49db8 <aarch64_opcode_lookup@@Base+0x3868>
   48f70:	tbnz	w0, #20, 4ad84 <aarch64_opcode_lookup@@Base+0x4834>
   48f74:	tbz	w0, #22, 4bfc0 <aarch64_opcode_lookup@@Base+0x5a70>
   48f78:	tst	x0, #0x800000
   48f7c:	mov	w1, #0x7cd                 	// #1997
   48f80:	mov	w0, #0x7d0                 	// #2000
   48f84:	csel	w1, w0, w1, eq  // eq = none
   48f88:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48f8c:	tst	x0, #0x800000
   48f90:	mov	w1, #0x789                 	// #1929
   48f94:	mov	w0, #0x785                 	// #1925
   48f98:	csel	w1, w0, w1, eq  // eq = none
   48f9c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48fa0:	tbz	w0, #14, 4afec <aarch64_opcode_lookup@@Base+0x4a9c>
   48fa4:	tst	x0, #0x800000
   48fa8:	mov	w1, #0x244                 	// #580
   48fac:	mov	w0, #0x23e                 	// #574
   48fb0:	csel	w1, w0, w1, eq  // eq = none
   48fb4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48fb8:	tst	x0, #0x800000
   48fbc:	mov	w1, #0x665                 	// #1637
   48fc0:	mov	w0, #0x69c                 	// #1692
   48fc4:	csel	w1, w0, w1, eq  // eq = none
   48fc8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48fcc:	tbz	w0, #23, 4a998 <aarch64_opcode_lookup@@Base+0x4448>
   48fd0:	tbnz	w0, #31, 4a990 <aarch64_opcode_lookup@@Base+0x4440>
   48fd4:	tbnz	w0, #10, 49ff0 <aarch64_opcode_lookup@@Base+0x3aa0>
   48fd8:	tst	x0, #0x1000
   48fdc:	mov	w1, #0x8e1                 	// #2273
   48fe0:	mov	w0, #0x864                 	// #2148
   48fe4:	csel	w1, w0, w1, eq  // eq = none
   48fe8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   48fec:	tbnz	w0, #13, 49bc4 <aarch64_opcode_lookup@@Base+0x3674>
   48ff0:	tst	x0, #0x4000
   48ff4:	mov	w1, #0x149                 	// #329
   48ff8:	mov	w0, #0x142                 	// #322
   48ffc:	csel	w1, w0, w1, eq  // eq = none
   49000:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49004:	cmp	w0, #0x0
   49008:	mov	w1, #0x38f                 	// #911
   4900c:	mov	w0, #0x38b                 	// #907
   49010:	csel	w1, w0, w1, ge  // ge = tcont
   49014:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49018:	tbnz	w0, #15, 49e5c <aarch64_opcode_lookup@@Base+0x390c>
   4901c:	tbnz	w0, #29, 4ac18 <aarch64_opcode_lookup@@Base+0x46c8>
   49020:	tst	x0, #0x40000000
   49024:	mov	w1, #0x1e6                 	// #486
   49028:	mov	w0, #0x34f                 	// #847
   4902c:	csel	w1, w0, w1, eq  // eq = none
   49030:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49034:	tbz	w0, #23, 4b0d0 <aarch64_opcode_lookup@@Base+0x4b80>
   49038:	tbnz	w0, #31, 4b0c8 <aarch64_opcode_lookup@@Base+0x4b78>
   4903c:	tbnz	w0, #10, 4a590 <aarch64_opcode_lookup@@Base+0x4040>
   49040:	tst	x0, #0x1000
   49044:	mov	w1, #0x8e8                 	// #2280
   49048:	mov	w0, #0x86b                 	// #2155
   4904c:	csel	w1, w0, w1, eq  // eq = none
   49050:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49054:	tbnz	w0, #14, 4a354 <aarch64_opcode_lookup@@Base+0x3e04>
   49058:	tbnz	w0, #16, 4b408 <aarch64_opcode_lookup@@Base+0x4eb8>
   4905c:	tst	x0, #0x20000000
   49060:	mov	w1, #0xdd                  	// #221
   49064:	mov	w0, #0xad                  	// #173
   49068:	csel	w1, w0, w1, eq  // eq = none
   4906c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49070:	ubfx	x0, x0, #13, #1
   49074:	add	w1, w0, #0x7e0
   49078:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4907c:	tst	x0, #0x20000000
   49080:	mov	w1, #0x7f                  	// #127
   49084:	mov	w0, #0x75                  	// #117
   49088:	csel	w1, w0, w1, eq  // eq = none
   4908c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49090:	tst	x0, #0x10
   49094:	mov	w1, #0x328                 	// #808
   49098:	mov	w0, #0x326                 	// #806
   4909c:	csel	w1, w0, w1, eq  // eq = none
   490a0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   490a4:	tbnz	w0, #13, 49da4 <aarch64_opcode_lookup@@Base+0x3854>
   490a8:	tbnz	w0, #14, 4af08 <aarch64_opcode_lookup@@Base+0x49b8>
   490ac:	tbnz	w0, #22, 4af18 <aarch64_opcode_lookup@@Base+0x49c8>
   490b0:	tst	x0, #0x800000
   490b4:	mov	w1, #0x170                 	// #368
   490b8:	mov	w0, #0x164                 	// #356
   490bc:	csel	w1, w0, w1, eq  // eq = none
   490c0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   490c4:	tbz	w0, #13, 4b43c <aarch64_opcode_lookup@@Base+0x4eec>
   490c8:	tst	x0, #0x8000
   490cc:	mov	w1, #0x228                 	// #552
   490d0:	mov	w0, #0x231                 	// #561
   490d4:	csel	w1, w0, w1, eq  // eq = none
   490d8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   490dc:	tst	x0, #0x40000000
   490e0:	mov	w1, #0x2be                 	// #702
   490e4:	mov	w0, #0x2cb                 	// #715
   490e8:	csel	w1, w0, w1, eq  // eq = none
   490ec:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   490f0:	tbz	w0, #23, 4a7d4 <aarch64_opcode_lookup@@Base+0x4284>
   490f4:	tbnz	w0, #31, 4a608 <aarch64_opcode_lookup@@Base+0x40b8>
   490f8:	tst	x0, #0x10000
   490fc:	mov	w1, #0x814                 	// #2068
   49100:	mov	w0, #0x816                 	// #2070
   49104:	csel	w1, w0, w1, eq  // eq = none
   49108:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4910c:	tbnz	w0, #14, 4a30c <aarch64_opcode_lookup@@Base+0x3dbc>
   49110:	tbnz	w0, #16, 4a8bc <aarch64_opcode_lookup@@Base+0x436c>
   49114:	tbz	w0, #20, 4c1e0 <aarch64_opcode_lookup@@Base+0x5c90>
   49118:	tst	x0, #0x20000000
   4911c:	mov	w1, #0x22                  	// #34
   49120:	mov	w0, #0x1e                  	// #30
   49124:	csel	w1, w0, w1, eq  // eq = none
   49128:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4912c:	tbnz	w0, #15, 49eb8 <aarch64_opcode_lookup@@Base+0x3968>
   49130:	tst	x0, #0x20000000
   49134:	mov	w1, #0x204                 	// #516
   49138:	mov	w0, #0x353                 	// #851
   4913c:	csel	w1, w0, w1, eq  // eq = none
   49140:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49144:	tbnz	w0, #13, 4a2f8 <aarch64_opcode_lookup@@Base+0x3da8>
   49148:	tbnz	w0, #14, 4a8b4 <aarch64_opcode_lookup@@Base+0x4364>
   4914c:	tbz	w0, #30, 4c03c <aarch64_opcode_lookup@@Base+0x5aec>
   49150:	tst	x0, #0x10000
   49154:	mov	w1, #0x2b9                 	// #697
   49158:	mov	w0, #0x2b2                 	// #690
   4915c:	csel	w1, w0, w1, eq  // eq = none
   49160:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49164:	tst	x0, #0x800000
   49168:	mov	w1, #0x767                 	// #1895
   4916c:	mov	w0, #0x752                 	// #1874
   49170:	csel	w1, w0, w1, eq  // eq = none
   49174:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49178:	tbnz	w0, #14, 49e10 <aarch64_opcode_lookup@@Base+0x38c0>
   4917c:	tst	x0, #0x20000000
   49180:	mov	w1, #0x154                 	// #340
   49184:	mov	w0, #0x120                 	// #288
   49188:	csel	w1, w0, w1, eq  // eq = none
   4918c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49190:	tbz	w0, #31, 4af00 <aarch64_opcode_lookup@@Base+0x49b0>
   49194:	tst	x0, #0x400000
   49198:	mov	w1, #0x5ed                 	// #1517
   4919c:	mov	w0, #0x5ef                 	// #1519
   491a0:	csel	w1, w0, w1, eq  // eq = none
   491a4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   491a8:	tbnz	w0, #22, 49e2c <aarch64_opcode_lookup@@Base+0x38dc>
   491ac:	tst	x0, #0x800000
   491b0:	mov	w1, #0x6b7                 	// #1719
   491b4:	mov	w0, #0x6bb                 	// #1723
   491b8:	csel	w1, w0, w1, eq  // eq = none
   491bc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   491c0:	tst	x0, #0x800000
   491c4:	mov	w1, #0x60a                 	// #1546
   491c8:	mov	w0, #0x606                 	// #1542
   491cc:	csel	w1, w0, w1, eq  // eq = none
   491d0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   491d4:	tbnz	w0, #22, 4a2a8 <aarch64_opcode_lookup@@Base+0x3d58>
   491d8:	tst	x0, #0x800000
   491dc:	mov	w1, #0x62d                 	// #1581
   491e0:	mov	w0, #0x5dd                 	// #1501
   491e4:	csel	w1, w0, w1, eq  // eq = none
   491e8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   491ec:	tst	x0, #0x800000
   491f0:	mov	w1, #0x60b                 	// #1547
   491f4:	mov	w0, #0x607                 	// #1543
   491f8:	csel	w1, w0, w1, eq  // eq = none
   491fc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49200:	tst	x0, #0x800000
   49204:	mov	w1, #0x66d                 	// #1645
   49208:	mov	w0, #0x6ea                 	// #1770
   4920c:	csel	w1, w0, w1, eq  // eq = none
   49210:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49214:	tbnz	w0, #23, 49c58 <aarch64_opcode_lookup@@Base+0x3708>
   49218:	tst	x0, #0x40000000
   4921c:	mov	w1, #0x620                 	// #1568
   49220:	mov	w0, #0x61c                 	// #1564
   49224:	csel	w1, w0, w1, eq  // eq = none
   49228:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4922c:	tst	x0, #0x800000
   49230:	mov	w1, #0x761                 	// #1889
   49234:	mov	w0, #0x74c                 	// #1868
   49238:	csel	w1, w0, w1, eq  // eq = none
   4923c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49240:	tst	x0, #0x800
   49244:	mov	w1, #0x8cf                 	// #2255
   49248:	mov	w0, #0x84c                 	// #2124
   4924c:	csel	w1, w0, w1, eq  // eq = none
   49250:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49254:	tst	x0, #0x400000
   49258:	mov	w1, #0x630                 	// #1584
   4925c:	mov	w0, #0x82f                 	// #2095
   49260:	csel	w1, w0, w1, eq  // eq = none
   49264:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49268:	tst	x0, #0x800000
   4926c:	mov	w1, #0x5f1                 	// #1521
   49270:	mov	w0, #0x6f8                 	// #1784
   49274:	csel	w1, w0, w1, eq  // eq = none
   49278:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4927c:	tbnz	w0, #20, 4a028 <aarch64_opcode_lookup@@Base+0x3ad8>
   49280:	tbnz	w0, #22, 4ad70 <aarch64_opcode_lookup@@Base+0x4820>
   49284:	tst	x0, #0x800000
   49288:	mov	w1, #0x632                 	// #1586
   4928c:	mov	w0, #0x5e4                 	// #1508
   49290:	csel	w1, w0, w1, eq  // eq = none
   49294:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49298:	tbnz	w0, #22, 49ea4 <aarch64_opcode_lookup@@Base+0x3954>
   4929c:	tst	x0, #0x800000
   492a0:	mov	w1, #0x61e                 	// #1566
   492a4:	mov	w0, #0x62b                 	// #1579
   492a8:	csel	w1, w0, w1, eq  // eq = none
   492ac:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   492b0:	tbnz	w0, #13, 49ef0 <aarch64_opcode_lookup@@Base+0x39a0>
   492b4:	tbz	w0, #14, 4ba7c <aarch64_opcode_lookup@@Base+0x552c>
   492b8:	tst	x0, #0x80000
   492bc:	mov	w1, #0x2a0                 	// #672
   492c0:	mov	w0, #0xa7                  	// #167
   492c4:	csel	w1, w0, w1, eq  // eq = none
   492c8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   492cc:	tst	x0, #0x800000
   492d0:	mov	w1, #0x608                 	// #1544
   492d4:	mov	w0, #0x60c                 	// #1548
   492d8:	csel	w1, w0, w1, eq  // eq = none
   492dc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   492e0:	tst	x0, #0x800000
   492e4:	mov	w1, #0x603                 	// #1539
   492e8:	mov	w0, #0x5ff                 	// #1535
   492ec:	csel	w1, w0, w1, eq  // eq = none
   492f0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   492f4:	tbnz	w0, #22, 4b7a4 <aarch64_opcode_lookup@@Base+0x5254>
   492f8:	tst	x0, #0x800000
   492fc:	mov	w1, #0x8c1                 	// #2241
   49300:	mov	w0, #0x8c5                 	// #2245
   49304:	csel	w1, w0, w1, eq  // eq = none
   49308:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4930c:	tst	x0, #0x800000
   49310:	mov	w1, #0x5ea                 	// #1514
   49314:	mov	w0, #0x638                 	// #1592
   49318:	csel	w1, w0, w1, eq  // eq = none
   4931c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49320:	tst	x0, #0x800000
   49324:	mov	w1, #0x605                 	// #1541
   49328:	mov	w0, #0x601                 	// #1537
   4932c:	csel	w1, w0, w1, eq  // eq = none
   49330:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49334:	tst	x0, #0x800000
   49338:	mov	w1, #0x622                 	// #1570
   4933c:	mov	w0, #0x6e4                 	// #1764
   49340:	csel	w1, w0, w1, eq  // eq = none
   49344:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49348:	tbnz	w0, #22, 49d34 <aarch64_opcode_lookup@@Base+0x37e4>
   4934c:	tst	x0, #0x800000
   49350:	mov	w1, #0x6f0                 	// #1776
   49354:	mov	w0, #0x6fe                 	// #1790
   49358:	csel	w1, w0, w1, eq  // eq = none
   4935c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49360:	tbnz	w0, #11, 49c88 <aarch64_opcode_lookup@@Base+0x3738>
   49364:	tst	x0, #0x1000
   49368:	mov	w1, #0x8f6                 	// #2294
   4936c:	mov	w0, #0x8a7                 	// #2215
   49370:	csel	w1, w0, w1, eq  // eq = none
   49374:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49378:	tbnz	w0, #22, 4a21c <aarch64_opcode_lookup@@Base+0x3ccc>
   4937c:	tst	x0, #0x800000
   49380:	mov	w1, #0x6b9                 	// #1721
   49384:	mov	w0, #0x6b5                 	// #1717
   49388:	csel	w1, w0, w1, eq  // eq = none
   4938c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49390:	tbnz	w0, #11, 4a490 <aarch64_opcode_lookup@@Base+0x3f40>
   49394:	tst	x0, #0x1000
   49398:	mov	w1, #0x8bb                 	// #2235
   4939c:	mov	w0, #0x850                 	// #2128
   493a0:	csel	w1, w0, w1, eq  // eq = none
   493a4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   493a8:	tbnz	w0, #11, 4b3d4 <aarch64_opcode_lookup@@Base+0x4e84>
   493ac:	tst	x0, #0x1000
   493b0:	mov	w1, #0x91e                 	// #2334
   493b4:	mov	w0, #0x8b7                 	// #2231
   493b8:	csel	w1, w0, w1, eq  // eq = none
   493bc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   493c0:	tbnz	w0, #22, 4a1bc <aarch64_opcode_lookup@@Base+0x3c6c>
   493c4:	tst	x0, #0x800000
   493c8:	mov	w1, #0x691                 	// #1681
   493cc:	mov	w0, #0x659                 	// #1625
   493d0:	csel	w1, w0, w1, eq  // eq = none
   493d4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   493d8:	tbz	w0, #30, 4a610 <aarch64_opcode_lookup@@Base+0x40c0>
   493dc:	ubfx	x0, x0, #21, #1
   493e0:	add	w1, w0, #0x627
   493e4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   493e8:	tbnz	w0, #13, 49b80 <aarch64_opcode_lookup@@Base+0x3630>
   493ec:	tbnz	w0, #14, 4ba34 <aarch64_opcode_lookup@@Base+0x54e4>
   493f0:	tbnz	w0, #22, 4b2dc <aarch64_opcode_lookup@@Base+0x4d8c>
   493f4:	tst	x0, #0x800000
   493f8:	mov	w1, #0x13d                 	// #317
   493fc:	mov	w0, #0x131                 	// #305
   49400:	csel	w1, w0, w1, eq  // eq = none
   49404:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49408:	ubfx	x0, x0, #23, #1
   4940c:	add	w1, w0, #0x961
   49410:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49414:	tst	x0, #0x800000
   49418:	mov	w1, #0x602                 	// #1538
   4941c:	mov	w0, #0x615                 	// #1557
   49420:	csel	w1, w0, w1, eq  // eq = none
   49424:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49428:	tbnz	w0, #22, 4a11c <aarch64_opcode_lookup@@Base+0x3bcc>
   4942c:	tst	x0, #0x800000
   49430:	mov	w1, #0x6b8                 	// #1720
   49434:	mov	w0, #0x6b4                 	// #1716
   49438:	csel	w1, w0, w1, eq  // eq = none
   4943c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49440:	tbnz	w0, #13, 4a188 <aarch64_opcode_lookup@@Base+0x3c38>
   49444:	tst	x0, #0x4000
   49448:	mov	w1, #0x115                 	// #277
   4944c:	mov	w0, #0x10e                 	// #270
   49450:	csel	w1, w0, w1, eq  // eq = none
   49454:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49458:	tbnz	w0, #22, 4a31c <aarch64_opcode_lookup@@Base+0x3dcc>
   4945c:	tst	x0, #0x800000
   49460:	mov	w1, #0x78f                 	// #1935
   49464:	mov	w0, #0x793                 	// #1939
   49468:	csel	w1, w0, w1, eq  // eq = none
   4946c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49470:	tbnz	w0, #22, 4a5dc <aarch64_opcode_lookup@@Base+0x408c>
   49474:	tst	x0, #0x800000
   49478:	mov	w1, #0x755                 	// #1877
   4947c:	mov	w0, #0x76a                 	// #1898
   49480:	csel	w1, w0, w1, eq  // eq = none
   49484:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49488:	tst	x0, #0x800000
   4948c:	mov	w1, #0x68d                 	// #1677
   49490:	mov	w0, #0x682                 	// #1666
   49494:	csel	w1, w0, w1, eq  // eq = none
   49498:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4949c:	tbz	w0, #23, 4a960 <aarch64_opcode_lookup@@Base+0x4410>
   494a0:	tst	x0, #0x40000000
   494a4:	cset	w0, eq  // eq = none
   494a8:	add	w1, w0, #0x984
   494ac:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   494b0:	tst	x0, #0x800000
   494b4:	mov	w1, #0x686                 	// #1670
   494b8:	mov	w0, #0x6f1                 	// #1777
   494bc:	csel	w1, w0, w1, eq  // eq = none
   494c0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   494c4:	tst	x0, #0x800000
   494c8:	mov	w1, #0x610                 	// #1552
   494cc:	mov	w0, #0x614                 	// #1556
   494d0:	csel	w1, w0, w1, eq  // eq = none
   494d4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   494d8:	tst	x0, #0x400000
   494dc:	mov	w1, #0x631                 	// #1585
   494e0:	mov	w0, #0x633                 	// #1587
   494e4:	csel	w1, w0, w1, eq  // eq = none
   494e8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   494ec:	tbnz	w0, #22, 4a520 <aarch64_opcode_lookup@@Base+0x3fd0>
   494f0:	tst	x0, #0x800000
   494f4:	mov	w1, #0x644                 	// #1604
   494f8:	mov	w0, #0x640                 	// #1600
   494fc:	csel	w1, w0, w1, eq  // eq = none
   49500:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49504:	tst	x0, #0x800000
   49508:	mov	w1, #0x625                 	// #1573
   4950c:	mov	w0, #0x61a                 	// #1562
   49510:	csel	w1, w0, w1, eq  // eq = none
   49514:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49518:	tst	x0, #0x800000
   4951c:	mov	w1, #0x604                 	// #1540
   49520:	mov	w0, #0x600                 	// #1536
   49524:	csel	w1, w0, w1, eq  // eq = none
   49528:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4952c:	tst	x0, #0x800000
   49530:	mov	w1, #0x667                 	// #1639
   49534:	mov	w0, #0x69e                 	// #1694
   49538:	csel	w1, w0, w1, eq  // eq = none
   4953c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49540:	tst	x0, #0x800000
   49544:	mov	w1, #0x674                 	// #1652
   49548:	mov	w0, #0x661                 	// #1633
   4954c:	csel	w1, w0, w1, eq  // eq = none
   49550:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49554:	tst	x0, #0x800000
   49558:	mov	w1, #0x668                 	// #1640
   4955c:	mov	w0, #0x69f                 	// #1695
   49560:	csel	w1, w0, w1, eq  // eq = none
   49564:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49568:	tst	x0, #0x800000
   4956c:	mov	w1, #0x609                 	// #1545
   49570:	mov	w0, #0x60d                 	// #1549
   49574:	csel	w1, w0, w1, eq  // eq = none
   49578:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4957c:	tbnz	w0, #22, 4a130 <aarch64_opcode_lookup@@Base+0x3be0>
   49580:	tst	x0, #0x800000
   49584:	mov	w1, #0x645                 	// #1605
   49588:	mov	w0, #0x641                 	// #1601
   4958c:	csel	w1, w0, w1, eq  // eq = none
   49590:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49594:	tbz	w0, #14, 4b7b4 <aarch64_opcode_lookup@@Base+0x5264>
   49598:	tst	x0, #0x800000
   4959c:	mov	w1, #0x22f                 	// #559
   495a0:	mov	w0, #0x22d                 	// #557
   495a4:	csel	w1, w0, w1, eq  // eq = none
   495a8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   495ac:	tst	x0, #0x800000
   495b0:	mov	w1, #0x685                 	// #1669
   495b4:	mov	w0, #0x67a                 	// #1658
   495b8:	csel	w1, w0, w1, eq  // eq = none
   495bc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   495c0:	tst	x0, #0x800000
   495c4:	mov	w1, #0x5f5                 	// #1525
   495c8:	mov	w0, #0x5e1                 	// #1505
   495cc:	csel	w1, w0, w1, eq  // eq = none
   495d0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   495d4:	tst	x0, #0x800000
   495d8:	mov	w1, #0x621                 	// #1569
   495dc:	mov	w0, #0x616                 	// #1558
   495e0:	csel	w1, w0, w1, eq  // eq = none
   495e4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   495e8:	tst	x0, #0x800000
   495ec:	mov	w1, #0x68b                 	// #1675
   495f0:	mov	w0, #0x681                 	// #1665
   495f4:	csel	w1, w0, w1, eq  // eq = none
   495f8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   495fc:	tbnz	w0, #22, 4a5b8 <aarch64_opcode_lookup@@Base+0x4068>
   49600:	tst	x0, #0x800000
   49604:	mov	w1, #0x82a                 	// #2090
   49608:	mov	w0, #0x831                 	// #2097
   4960c:	csel	w1, w0, w1, eq  // eq = none
   49610:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49614:	tbnz	w0, #22, 49c1c <aarch64_opcode_lookup@@Base+0x36cc>
   49618:	tst	x0, #0x800000
   4961c:	mov	w1, #0x643                 	// #1603
   49620:	mov	w0, #0x647                 	// #1607
   49624:	csel	w1, w0, w1, eq  // eq = none
   49628:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4962c:	tbnz	w0, #13, 4a5cc <aarch64_opcode_lookup@@Base+0x407c>
   49630:	tbnz	w0, #14, 4b444 <aarch64_opcode_lookup@@Base+0x4ef4>
   49634:	ubfx	x0, x0, #30, #1
   49638:	add	w1, w0, #0x2e
   4963c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49640:	tbnz	w0, #11, 49bd8 <aarch64_opcode_lookup@@Base+0x3688>
   49644:	tst	x0, #0x1000
   49648:	mov	w1, #0x857                 	// #2135
   4964c:	mov	w0, #0x8a9                 	// #2217
   49650:	csel	w1, w0, w1, eq  // eq = none
   49654:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49658:	tst	x0, #0x400000
   4965c:	mov	w1, #0x6fd                 	// #1789
   49660:	mov	w0, #0x6bd                 	// #1725
   49664:	csel	w1, w0, w1, eq  // eq = none
   49668:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4966c:	tbnz	w0, #20, 49bec <aarch64_opcode_lookup@@Base+0x369c>
   49670:	tbnz	w0, #22, 4b5ac <aarch64_opcode_lookup@@Base+0x505c>
   49674:	tst	x0, #0x800000
   49678:	mov	w1, #0x5fa                 	// #1530
   4967c:	mov	w0, #0x5e5                 	// #1509
   49680:	csel	w1, w0, w1, eq  // eq = none
   49684:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49688:	tst	x0, #0x800000
   4968c:	mov	w1, #0x781                 	// #1921
   49690:	mov	w0, #0x77d                 	// #1917
   49694:	csel	w1, w0, w1, eq  // eq = none
   49698:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4969c:	tbnz	w0, #11, 4af3c <aarch64_opcode_lookup@@Base+0x49ec>
   496a0:	tst	x0, #0x1000
   496a4:	mov	w1, #0x89b                 	// #2203
   496a8:	mov	w0, #0x83f                 	// #2111
   496ac:	csel	w1, w0, w1, eq  // eq = none
   496b0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   496b4:	tbz	w0, #30, 4b750 <aarch64_opcode_lookup@@Base+0x5200>
   496b8:	ubfx	x0, x0, #22, #1
   496bc:	add	w1, w0, #0x8da
   496c0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   496c4:	tbnz	w0, #11, 4a8f8 <aarch64_opcode_lookup@@Base+0x43a8>
   496c8:	tst	x0, #0x1000
   496cc:	mov	w1, #0x7bb                 	// #1979
   496d0:	mov	w0, #0x797                 	// #1943
   496d4:	csel	w1, w0, w1, eq  // eq = none
   496d8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   496dc:	ubfx	x0, x0, #22, #1
   496e0:	add	w1, w0, #0x88d
   496e4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   496e8:	tbnz	w0, #17, 4b810 <aarch64_opcode_lookup@@Base+0x52c0>
   496ec:	tbnz	w0, #18, 4bde0 <aarch64_opcode_lookup@@Base+0x5890>
   496f0:	tst	x0, #0x10
   496f4:	cset	w0, eq  // eq = none
   496f8:	add	w1, w0, #0x573
   496fc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49700:	mov	w1, #0x3c4                 	// #964
   49704:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49708:	mov	w1, #0x3bc                 	// #956
   4970c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49710:	tst	x0, #0x8000
   49714:	mov	w1, #0x96d                 	// #2413
   49718:	mov	w0, #0x12c                 	// #300
   4971c:	csel	w1, w0, w1, eq  // eq = none
   49720:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49724:	tbnz	w0, #11, 4af44 <aarch64_opcode_lookup@@Base+0x49f4>
   49728:	tst	x0, #0x1000
   4972c:	mov	w1, #0x85a                 	// #2138
   49730:	mov	w0, #0x905                 	// #2309
   49734:	csel	w1, w0, w1, eq  // eq = none
   49738:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4973c:	mov	w1, #0x795                 	// #1941
   49740:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49744:	mov	w1, #0x3fa                 	// #1018
   49748:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4974c:	tbz	w0, #22, 4b7ac <aarch64_opcode_lookup@@Base+0x525c>
   49750:	tst	x0, #0x800000
   49754:	mov	w1, #0x13c                 	// #316
   49758:	mov	w0, #0x130                 	// #304
   4975c:	csel	w1, w0, w1, eq  // eq = none
   49760:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49764:	tbnz	w0, #11, 4a810 <aarch64_opcode_lookup@@Base+0x42c0>
   49768:	tst	x0, #0x1000
   4976c:	mov	w1, #0x8be                 	// #2238
   49770:	mov	w0, #0x852                 	// #2130
   49774:	csel	w1, w0, w1, eq  // eq = none
   49778:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4977c:	tst	x0, #0x400
   49780:	mov	w1, #0x5d2                 	// #1490
   49784:	mov	w0, #0x5d5                 	// #1493
   49788:	csel	w1, w0, w1, eq  // eq = none
   4978c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49790:	tbnz	w0, #30, 4a940 <aarch64_opcode_lookup@@Base+0x43f0>
   49794:	tst	x0, #0x800
   49798:	mov	w1, #0x6bf                 	// #1727
   4979c:	mov	w0, #0x6c5                 	// #1733
   497a0:	csel	w1, w0, w1, eq  // eq = none
   497a4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   497a8:	mov	w1, #0x3bd                 	// #957
   497ac:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   497b0:	tst	x0, #0x800
   497b4:	mov	w1, #0x8bc                 	// #2236
   497b8:	mov	w0, #0x810                 	// #2064
   497bc:	csel	w1, w0, w1, eq  // eq = none
   497c0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   497c4:	tbz	w0, #11, 4b7e4 <aarch64_opcode_lookup@@Base+0x5294>
   497c8:	tbnz	w0, #22, 4b7d0 <aarch64_opcode_lookup@@Base+0x5280>
   497cc:	tst	x0, #0x800000
   497d0:	mov	w1, #0x806                 	// #2054
   497d4:	mov	w0, #0x804                 	// #2052
   497d8:	csel	w1, w0, w1, eq  // eq = none
   497dc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   497e0:	mov	w1, #0x3fc                 	// #1020
   497e4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   497e8:	tbnz	w0, #11, 4b4e8 <aarch64_opcode_lookup@@Base+0x4f98>
   497ec:	tst	x0, #0x1000
   497f0:	mov	w1, #0x868                 	// #2152
   497f4:	mov	w0, #0x862                 	// #2146
   497f8:	csel	w1, w0, w1, eq  // eq = none
   497fc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49800:	mov	w1, #0x3b9                 	// #953
   49804:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49808:	mov	w1, #0x6cb                 	// #1739
   4980c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49810:	tst	x0, #0x8000
   49814:	mov	w1, #0x96f                 	// #2415
   49818:	mov	w0, #0x97                  	// #151
   4981c:	csel	w1, w0, w1, eq  // eq = none
   49820:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49824:	tst	x0, #0x800000
   49828:	mov	w1, #0x16b                 	// #363
   4982c:	mov	w0, #0x15d                 	// #349
   49830:	csel	w1, w0, w1, eq  // eq = none
   49834:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49838:	mov	w1, #0x5a6                 	// #1446
   4983c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49840:	tbnz	w0, #16, 4a9d0 <aarch64_opcode_lookup@@Base+0x4480>
   49844:	tbz	w0, #19, 4bfdc <aarch64_opcode_lookup@@Base+0x5a8c>
   49848:	tbnz	w0, #10, 4bfd4 <aarch64_opcode_lookup@@Base+0x5a84>
   4984c:	tbnz	w0, #12, 4bfc8 <aarch64_opcode_lookup@@Base+0x5a78>
   49850:	tst	x0, #0x2000
   49854:	mov	w1, #0x700                 	// #1792
   49858:	mov	w0, #0x6e1                 	// #1761
   4985c:	csel	w1, w0, w1, eq  // eq = none
   49860:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49864:	tst	x0, #0x40000
   49868:	mov	w1, #0x746                 	// #1862
   4986c:	mov	w0, #0x722                 	// #1826
   49870:	csel	w1, w0, w1, eq  // eq = none
   49874:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49878:	tbnz	w0, #17, 4ae04 <aarch64_opcode_lookup@@Base+0x48b4>
   4987c:	tbnz	w0, #18, 4adf0 <aarch64_opcode_lookup@@Base+0x48a0>
   49880:	tbz	w0, #19, 4ba2c <aarch64_opcode_lookup@@Base+0x54dc>
   49884:	tst	x0, #0x100000
   49888:	mov	w1, #0x55b                 	// #1371
   4988c:	mov	w0, #0x7b5                 	// #1973
   49890:	csel	w1, w0, w1, eq  // eq = none
   49894:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49898:	mov	w1, #0x6cc                 	// #1740
   4989c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   498a0:	tbnz	w0, #11, 4b590 <aarch64_opcode_lookup@@Base+0x5040>
   498a4:	tst	x0, #0x1000
   498a8:	mov	w1, #0x8c7                 	// #2247
   498ac:	mov	w0, #0x801                 	// #2049
   498b0:	csel	w1, w0, w1, eq  // eq = none
   498b4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   498b8:	tbnz	w0, #16, 4b050 <aarch64_opcode_lookup@@Base+0x4b00>
   498bc:	tbnz	w0, #17, 4b038 <aarch64_opcode_lookup@@Base+0x4ae8>
   498c0:	tbnz	w0, #18, 4bb78 <aarch64_opcode_lookup@@Base+0x5628>
   498c4:	tst	x0, #0x100000
   498c8:	mov	w1, #0x566                 	// #1382
   498cc:	mov	w0, #0x560                 	// #1376
   498d0:	csel	w1, w0, w1, eq  // eq = none
   498d4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   498d8:	mov	w1, #0x3b5                 	// #949
   498dc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   498e0:	tbnz	w0, #17, 4b3f0 <aarch64_opcode_lookup@@Base+0x4ea0>
   498e4:	tbnz	w0, #18, 4b3dc <aarch64_opcode_lookup@@Base+0x4e8c>
   498e8:	tst	x0, #0x80000
   498ec:	mov	w1, #0x520                 	// #1312
   498f0:	mov	w0, #0x546                 	// #1350
   498f4:	csel	w1, w0, w1, eq  // eq = none
   498f8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   498fc:	tst	x0, #0x100000
   49900:	mov	w1, #0x522                 	// #1314
   49904:	mov	w0, #0x5da                 	// #1498
   49908:	csel	w1, w0, w1, eq  // eq = none
   4990c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49910:	tbnz	w0, #11, 4b19c <aarch64_opcode_lookup@@Base+0x4c4c>
   49914:	tst	x0, #0x1000
   49918:	mov	w1, #0x8af                 	// #2223
   4991c:	mov	w0, #0x8ad                 	// #2221
   49920:	csel	w1, w0, w1, eq  // eq = none
   49924:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49928:	tbnz	w0, #18, 4a85c <aarch64_opcode_lookup@@Base+0x430c>
   4992c:	tbnz	w0, #19, 4a844 <aarch64_opcode_lookup@@Base+0x42f4>
   49930:	tbnz	w0, #20, 4c1f0 <aarch64_opcode_lookup@@Base+0x5ca0>
   49934:	tst	x0, #0x40000000
   49938:	mov	w1, #0x8fd                 	// #2301
   4993c:	mov	w0, #0x6c2                 	// #1730
   49940:	csel	w1, w0, w1, eq  // eq = none
   49944:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49948:	tbnz	w0, #17, 4b6b0 <aarch64_opcode_lookup@@Base+0x5160>
   4994c:	tbnz	w0, #18, 4b694 <aarch64_opcode_lookup@@Base+0x5144>
   49950:	tbnz	w0, #19, 4befc <aarch64_opcode_lookup@@Base+0x59ac>
   49954:	tst	x0, #0x100000
   49958:	mov	w1, #0x7ab                 	// #1963
   4995c:	mov	w0, #0x5ba                 	// #1466
   49960:	csel	w1, w0, w1, eq  // eq = none
   49964:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49968:	tst	x0, #0x800000
   4996c:	mov	w1, #0x787                 	// #1927
   49970:	mov	w0, #0x78b                 	// #1931
   49974:	csel	w1, w0, w1, eq  // eq = none
   49978:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4997c:	tbnz	w0, #11, 4b098 <aarch64_opcode_lookup@@Base+0x4b48>
   49980:	tst	x0, #0x1000
   49984:	mov	w1, #0x86f                 	// #2159
   49988:	mov	w0, #0x88b                 	// #2187
   4998c:	csel	w1, w0, w1, eq  // eq = none
   49990:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49994:	tbnz	w0, #11, 4a65c <aarch64_opcode_lookup@@Base+0x410c>
   49998:	tst	x0, #0x1000
   4999c:	mov	w1, #0x897                 	// #2199
   499a0:	mov	w0, #0x87a                 	// #2170
   499a4:	csel	w1, w0, w1, eq  // eq = none
   499a8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   499ac:	tbnz	w0, #17, 4b34c <aarch64_opcode_lookup@@Base+0x4dfc>
   499b0:	tbnz	w0, #18, 4b338 <aarch64_opcode_lookup@@Base+0x4de8>
   499b4:	tbnz	w0, #19, 4bbb4 <aarch64_opcode_lookup@@Base+0x5664>
   499b8:	tst	x0, #0x100000
   499bc:	mov	w1, #0x802                 	// #2050
   499c0:	mov	w0, #0x900                 	// #2304
   499c4:	csel	w1, w0, w1, eq  // eq = none
   499c8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   499cc:	tbnz	w0, #18, 4a6bc <aarch64_opcode_lookup@@Base+0x416c>
   499d0:	tbnz	w0, #19, 4a6a8 <aarch64_opcode_lookup@@Base+0x4158>
   499d4:	tst	x0, #0x100000
   499d8:	mov	w1, #0x858                 	// #2136
   499dc:	mov	w0, #0x8b2                 	// #2226
   499e0:	csel	w1, w0, w1, eq  // eq = none
   499e4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   499e8:	tst	x0, #0x800000
   499ec:	mov	w1, #0x13a                 	// #314
   499f0:	mov	w0, #0x12e                 	// #302
   499f4:	csel	w1, w0, w1, eq  // eq = none
   499f8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   499fc:	mov	w1, #0x3b8                 	// #952
   49a00:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49a04:	mov	w1, #0x3b4                 	// #948
   49a08:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49a0c:	tbnz	w0, #22, 4a100 <aarch64_opcode_lookup@@Base+0x3bb0>
   49a10:	tst	x0, #0x800000
   49a14:	mov	w1, #0x778                 	// #1912
   49a18:	mov	w0, #0x77c                 	// #1916
   49a1c:	csel	w1, w0, w1, eq  // eq = none
   49a20:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49a24:	mov	w1, #0x5b2                 	// #1458
   49a28:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49a2c:	tst	x0, #0x800000
   49a30:	mov	w1, #0x8c2                 	// #2242
   49a34:	mov	w0, #0x8bf                 	// #2239
   49a38:	csel	w1, w0, w1, eq  // eq = none
   49a3c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49a40:	tbnz	w0, #16, 4b7ec <aarch64_opcode_lookup@@Base+0x529c>
   49a44:	tst	x0, #0x100000
   49a48:	mov	w1, #0x507                 	// #1287
   49a4c:	mov	w0, #0x724                 	// #1828
   49a50:	csel	w1, w0, w1, eq  // eq = none
   49a54:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49a58:	tbnz	w0, #12, 4b7bc <aarch64_opcode_lookup@@Base+0x526c>
   49a5c:	ubfx	x0, x0, #10, #1
   49a60:	add	w1, w0, #0x8cc
   49a64:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49a68:	tst	x0, #0x4000
   49a6c:	mov	w1, #0x10b                 	// #267
   49a70:	mov	w0, #0x108                 	// #264
   49a74:	csel	w1, w0, w1, eq  // eq = none
   49a78:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49a7c:	tst	x0, #0x800000
   49a80:	mov	w1, #0x16f                 	// #367
   49a84:	mov	w0, #0x161                 	// #353
   49a88:	csel	w1, w0, w1, eq  // eq = none
   49a8c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49a90:	tbnz	w0, #10, 4b6d8 <aarch64_opcode_lookup@@Base+0x5188>
   49a94:	tbnz	w0, #11, 4b6cc <aarch64_opcode_lookup@@Base+0x517c>
   49a98:	ubfx	x0, x0, #12, #1
   49a9c:	add	w1, w0, #0x90c
   49aa0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49aa4:	mov	w1, #0x5b1                 	// #1457
   49aa8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49aac:	tbnz	w0, #10, 4b324 <aarch64_opcode_lookup@@Base+0x4dd4>
   49ab0:	tbnz	w0, #11, 4b30c <aarch64_opcode_lookup@@Base+0x4dbc>
   49ab4:	tbnz	w0, #17, 4beec <aarch64_opcode_lookup@@Base+0x599c>
   49ab8:	tst	x0, #0x40000
   49abc:	mov	w1, #0x551                 	// #1361
   49ac0:	mov	w0, #0x7d3                 	// #2003
   49ac4:	csel	w1, w0, w1, eq  // eq = none
   49ac8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49acc:	mov	w1, #0x3f3                 	// #1011
   49ad0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49ad4:	mov	w1, #0x3fb                 	// #1019
   49ad8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49adc:	tbnz	w0, #18, 4a724 <aarch64_opcode_lookup@@Base+0x41d4>
   49ae0:	tst	x0, #0x80000
   49ae4:	mov	w1, #0x7b7                 	// #1975
   49ae8:	mov	w0, #0x79a                 	// #1946
   49aec:	csel	w1, w0, w1, eq  // eq = none
   49af0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49af4:	tbnz	w0, #10, 4acac <aarch64_opcode_lookup@@Base+0x475c>
   49af8:	tst	x0, #0x800
   49afc:	mov	w1, #0x590                 	// #1424
   49b00:	mov	w0, #0x5c8                 	// #1480
   49b04:	csel	w1, w0, w1, eq  // eq = none
   49b08:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49b0c:	mov	w1, #0x563                 	// #1379
   49b10:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49b14:	tbnz	w0, #12, 4a258 <aarch64_opcode_lookup@@Base+0x3d08>
   49b18:	ubfx	x0, x0, #22, #1
   49b1c:	add	w1, w0, #0x878
   49b20:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49b24:	tst	x0, #0x10000
   49b28:	mov	w1, #0x81c                 	// #2076
   49b2c:	mov	w0, #0x81a                 	// #2074
   49b30:	csel	w1, w0, w1, eq  // eq = none
   49b34:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49b38:	tst	x0, #0x800000
   49b3c:	mov	w1, #0x780                 	// #1920
   49b40:	mov	w0, #0x784                 	// #1924
   49b44:	csel	w1, w0, w1, eq  // eq = none
   49b48:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49b4c:	tbnz	w0, #17, 4b610 <aarch64_opcode_lookup@@Base+0x50c0>
   49b50:	tbnz	w0, #18, 4b5fc <aarch64_opcode_lookup@@Base+0x50ac>
   49b54:	tst	x0, #0x80000
   49b58:	mov	w1, #0x524                 	// #1316
   49b5c:	mov	w0, #0x7dd                 	// #2013
   49b60:	csel	w1, w0, w1, eq  // eq = none
   49b64:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49b68:	mov	w1, #0x772                 	// #1906
   49b6c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49b70:	mov	w1, #0x22a                 	// #554
   49b74:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49b78:	mov	w1, #0x62f                 	// #1583
   49b7c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49b80:	tst	x0, #0x4000
   49b84:	mov	w1, #0x11a                 	// #282
   49b88:	mov	w0, #0x112                 	// #274
   49b8c:	csel	w1, w0, w1, eq  // eq = none
   49b90:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49b94:	tbz	w0, #18, 4b72c <aarch64_opcode_lookup@@Base+0x51dc>
   49b98:	tbnz	w0, #15, 4bd98 <aarch64_opcode_lookup@@Base+0x5848>
   49b9c:	tst	x0, #0x10000
   49ba0:	mov	w1, #0x343                 	// #835
   49ba4:	mov	w0, #0x341                 	// #833
   49ba8:	csel	w1, w0, w1, eq  // eq = none
   49bac:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49bb0:	tst	x0, #0x2000
   49bb4:	mov	w1, #0x687                 	// #1671
   49bb8:	mov	w0, #0x623                 	// #1571
   49bbc:	csel	w1, w0, w1, eq  // eq = none
   49bc0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49bc4:	tst	x0, #0x4000
   49bc8:	mov	w1, #0x14d                 	// #333
   49bcc:	mov	w0, #0x145                 	// #325
   49bd0:	csel	w1, w0, w1, eq  // eq = none
   49bd4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49bd8:	tst	x0, #0x1000
   49bdc:	mov	w1, #0x845                 	// #2117
   49be0:	mov	w0, #0x8a1                 	// #2209
   49be4:	csel	w1, w0, w1, eq  // eq = none
   49be8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49bec:	tbnz	w0, #22, 4b5cc <aarch64_opcode_lookup@@Base+0x507c>
   49bf0:	tst	x0, #0x800000
   49bf4:	mov	w1, #0x6a9                 	// #1705
   49bf8:	mov	w0, #0x6a5                 	// #1701
   49bfc:	csel	w1, w0, w1, eq  // eq = none
   49c00:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49c04:	mov	w1, #0x6f                  	// #111
   49c08:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49c0c:	tbnz	w0, #14, 4b5c0 <aarch64_opcode_lookup@@Base+0x5070>
   49c10:	ubfx	x0, x0, #30, #1
   49c14:	add	w1, w0, #0x30
   49c18:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49c1c:	tst	x0, #0x800000
   49c20:	mov	w1, #0x653                 	// #1619
   49c24:	mov	w0, #0x657                 	// #1623
   49c28:	csel	w1, w0, w1, eq  // eq = none
   49c2c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49c30:	mov	w1, #0x6a                  	// #106
   49c34:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49c38:	mov	w1, #0x36e                 	// #878
   49c3c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49c40:	tbz	w0, #11, 4be64 <aarch64_opcode_lookup@@Base+0x5914>
   49c44:	tst	x0, #0x1000
   49c48:	mov	w1, #0x96c                 	// #2412
   49c4c:	mov	w0, #0x96a                 	// #2410
   49c50:	csel	w1, w0, w1, eq  // eq = none
   49c54:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49c58:	tst	x0, #0x40000000
   49c5c:	mov	w1, #0x62c                 	// #1580
   49c60:	mov	w0, #0x629                 	// #1577
   49c64:	csel	w1, w0, w1, eq  // eq = none
   49c68:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49c6c:	mov	w1, #0x5aa                 	// #1450
   49c70:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49c74:	tst	x0, #0x800000
   49c78:	mov	w1, #0x782                 	// #1922
   49c7c:	mov	w0, #0x77e                 	// #1918
   49c80:	csel	w1, w0, w1, eq  // eq = none
   49c84:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49c88:	tst	x0, #0x1000
   49c8c:	mov	w1, #0x8f1                 	// #2289
   49c90:	mov	w0, #0x89f                 	// #2207
   49c94:	csel	w1, w0, w1, eq  // eq = none
   49c98:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49c9c:	mov	w1, #0x97e                 	// #2430
   49ca0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49ca4:	mov	w1, #0x693                 	// #1683
   49ca8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49cac:	tst	x0, #0x2000
   49cb0:	mov	w1, #0x67b                 	// #1659
   49cb4:	mov	w0, #0x617                 	// #1559
   49cb8:	csel	w1, w0, w1, eq  // eq = none
   49cbc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49cc0:	mov	w1, #0x76e                 	// #1902
   49cc4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49cc8:	tst	x0, #0x800000
   49ccc:	mov	w1, #0x68f                 	// #1679
   49cd0:	mov	w0, #0x683                 	// #1667
   49cd4:	csel	w1, w0, w1, eq  // eq = none
   49cd8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49cdc:	tbnz	w0, #15, 4b830 <aarch64_opcode_lookup@@Base+0x52e0>
   49ce0:	tbnz	w0, #22, 4b788 <aarch64_opcode_lookup@@Base+0x5238>
   49ce4:	tbnz	w0, #23, 4bc88 <aarch64_opcode_lookup@@Base+0x5738>
   49ce8:	tbnz	w0, #31, 4bc80 <aarch64_opcode_lookup@@Base+0x5730>
   49cec:	ubfx	x0, x0, #30, #1
   49cf0:	add	w1, w0, #0x43d
   49cf4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49cf8:	mov	w1, #0x36d                 	// #877
   49cfc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49d00:	mov	w1, #0x770                 	// #1904
   49d04:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49d08:	tbnz	w0, #23, 4ae68 <aarch64_opcode_lookup@@Base+0x4918>
   49d0c:	tbz	w0, #29, 4bb04 <aarch64_opcode_lookup@@Base+0x55b4>
   49d10:	tst	x0, #0x40000000
   49d14:	mov	w1, #0x93c                 	// #2364
   49d18:	mov	w0, #0x938                 	// #2360
   49d1c:	csel	w1, w0, w1, eq  // eq = none
   49d20:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49d24:	mov	w1, #0x2a9                 	// #681
   49d28:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49d2c:	mov	w1, #0x694                 	// #1684
   49d30:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49d34:	tst	x0, #0x800000
   49d38:	mov	w1, #0x669                 	// #1641
   49d3c:	mov	w0, #0x6a0                 	// #1696
   49d40:	csel	w1, w0, w1, eq  // eq = none
   49d44:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49d48:	tbnz	w0, #14, 4ac68 <aarch64_opcode_lookup@@Base+0x4718>
   49d4c:	tbz	w0, #16, 4bfa0 <aarch64_opcode_lookup@@Base+0x5a50>
   49d50:	ubfx	x0, x0, #30, #1
   49d54:	add	w1, w0, #0xde
   49d58:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49d5c:	tbnz	w0, #23, 4aca4 <aarch64_opcode_lookup@@Base+0x4754>
   49d60:	tst	x0, #0x20000000
   49d64:	mov	w1, #0x15c                 	// #348
   49d68:	mov	w0, #0x12b                 	// #299
   49d6c:	csel	w1, w0, w1, eq  // eq = none
   49d70:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49d74:	tbnz	w0, #14, 4b8c0 <aarch64_opcode_lookup@@Base+0x5370>
   49d78:	ubfx	x0, x0, #30, #1
   49d7c:	add	w1, w0, #0x50
   49d80:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49d84:	ubfx	x0, x0, #13, #1
   49d88:	add	w1, w0, #0x7a4
   49d8c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49d90:	tst	x0, #0x800000
   49d94:	mov	w1, #0x64a                 	// #1610
   49d98:	mov	w0, #0x64e                 	// #1614
   49d9c:	csel	w1, w0, w1, eq  // eq = none
   49da0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49da4:	tst	x0, #0x4000
   49da8:	mov	w1, #0x14e                 	// #334
   49dac:	mov	w0, #0x146                 	// #326
   49db0:	csel	w1, w0, w1, eq  // eq = none
   49db4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49db8:	tbz	w0, #22, 4bfb0 <aarch64_opcode_lookup@@Base+0x5a60>
   49dbc:	tst	x0, #0x800000
   49dc0:	mov	w1, #0x7bf                 	// #1983
   49dc4:	mov	w0, #0x7c2                 	// #1986
   49dc8:	csel	w1, w0, w1, eq  // eq = none
   49dcc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49dd0:	tst	x0, #0x40000000
   49dd4:	mov	w1, #0x2bd                 	// #701
   49dd8:	mov	w0, #0x2c9                 	// #713
   49ddc:	csel	w1, w0, w1, eq  // eq = none
   49de0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49de4:	tbnz	w0, #12, 4bda0 <aarch64_opcode_lookup@@Base+0x5850>
   49de8:	tst	x0, #0x20000
   49dec:	mov	w1, #0x917                 	// #2327
   49df0:	mov	w0, #0x919                 	// #2329
   49df4:	csel	w1, w0, w1, eq  // eq = none
   49df8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49dfc:	tst	x0, #0x2000
   49e00:	mov	w1, #0x67f                 	// #1663
   49e04:	mov	w0, #0x619                 	// #1561
   49e08:	csel	w1, w0, w1, eq  // eq = none
   49e0c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49e10:	tbnz	w0, #23, 4aee0 <aarch64_opcode_lookup@@Base+0x4990>
   49e14:	tbnz	w0, #29, 4ba74 <aarch64_opcode_lookup@@Base+0x5524>
   49e18:	tst	x0, #0x40000000
   49e1c:	mov	w1, #0x93a                 	// #2362
   49e20:	mov	w0, #0x936                 	// #2358
   49e24:	csel	w1, w0, w1, eq  // eq = none
   49e28:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49e2c:	tst	x0, #0x800000
   49e30:	mov	w1, #0x64b                 	// #1611
   49e34:	mov	w0, #0x64f                 	// #1615
   49e38:	csel	w1, w0, w1, eq  // eq = none
   49e3c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49e40:	mov	w1, #0x973                 	// #2419
   49e44:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49e48:	tst	x0, #0x1000
   49e4c:	mov	w1, #0x8ea                 	// #2282
   49e50:	mov	w0, #0x86d                 	// #2157
   49e54:	csel	w1, w0, w1, eq  // eq = none
   49e58:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49e5c:	tbnz	w0, #16, 4af80 <aarch64_opcode_lookup@@Base+0x4a30>
   49e60:	tbnz	w0, #19, 4af6c <aarch64_opcode_lookup@@Base+0x4a1c>
   49e64:	tbnz	w0, #20, 4ba84 <aarch64_opcode_lookup@@Base+0x5534>
   49e68:	tst	x0, #0x20000000
   49e6c:	mov	w1, #0x20d                 	// #525
   49e70:	mov	w0, #0x1ef                 	// #495
   49e74:	csel	w1, w0, w1, eq  // eq = none
   49e78:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49e7c:	tbnz	w0, #11, 4b8d8 <aarch64_opcode_lookup@@Base+0x5388>
   49e80:	tbnz	w0, #12, 4b8a8 <aarch64_opcode_lookup@@Base+0x5358>
   49e84:	ubfx	x0, x0, #22, #1
   49e88:	add	w1, w0, #0x7b2
   49e8c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49e90:	tbnz	w0, #14, 4ae50 <aarch64_opcode_lookup@@Base+0x4900>
   49e94:	tbz	w0, #16, 4bab0 <aarch64_opcode_lookup@@Base+0x5560>
   49e98:	ubfx	x0, x0, #30, #1
   49e9c:	add	w1, w0, #0xae
   49ea0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49ea4:	tst	x0, #0x800000
   49ea8:	mov	w1, #0x5ee                 	// #1518
   49eac:	mov	w0, #0x63e                 	// #1598
   49eb0:	csel	w1, w0, w1, eq  // eq = none
   49eb4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49eb8:	ubfx	x0, x0, #19, #1
   49ebc:	add	w1, w0, #0x1f3
   49ec0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49ec4:	tst	x0, #0x800
   49ec8:	mov	w1, #0x836                 	// #2102
   49ecc:	mov	w0, #0x894                 	// #2196
   49ed0:	csel	w1, w0, w1, eq  // eq = none
   49ed4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49ed8:	tbnz	w0, #22, 4af58 <aarch64_opcode_lookup@@Base+0x4a08>
   49edc:	tst	x0, #0x40000000
   49ee0:	mov	w1, #0x4a                  	// #74
   49ee4:	mov	w0, #0x48                  	// #72
   49ee8:	csel	w1, w0, w1, eq  // eq = none
   49eec:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49ef0:	tbnz	w0, #14, 4b864 <aarch64_opcode_lookup@@Base+0x5314>
   49ef4:	tst	x0, #0x100000
   49ef8:	mov	w1, #0x1d                  	// #29
   49efc:	mov	w0, #0xa5                  	// #165
   49f00:	csel	w1, w0, w1, eq  // eq = none
   49f04:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49f08:	tst	x0, #0x2000
   49f0c:	mov	w1, #0x69a                 	// #1690
   49f10:	mov	w0, #0x636                 	// #1590
   49f14:	csel	w1, w0, w1, eq  // eq = none
   49f18:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49f1c:	tbnz	w0, #23, 4abb8 <aarch64_opcode_lookup@@Base+0x4668>
   49f20:	tbnz	w0, #29, 4b9b8 <aarch64_opcode_lookup@@Base+0x5468>
   49f24:	cmp	w0, #0x0
   49f28:	mov	w1, #0x933                 	// #2355
   49f2c:	mov	w0, #0x123                 	// #291
   49f30:	csel	w1, w0, w1, ge  // ge = tcont
   49f34:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49f38:	tbnz	w0, #31, 4b900 <aarch64_opcode_lookup@@Base+0x53b0>
   49f3c:	tst	x0, #0x400
   49f40:	cset	w0, eq  // eq = none
   49f44:	add	w1, w0, #0x97a
   49f48:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49f4c:	tbnz	w0, #23, 4aa6c <aarch64_opcode_lookup@@Base+0x451c>
   49f50:	tst	x0, #0x20000000
   49f54:	mov	w1, #0x158                 	// #344
   49f58:	mov	w0, #0x127                 	// #295
   49f5c:	csel	w1, w0, w1, eq  // eq = none
   49f60:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49f64:	tbnz	w0, #22, 4b848 <aarch64_opcode_lookup@@Base+0x52f8>
   49f68:	tbnz	w0, #23, 4b770 <aarch64_opcode_lookup@@Base+0x5220>
   49f6c:	tbnz	w0, #31, 4bd40 <aarch64_opcode_lookup@@Base+0x57f0>
   49f70:	ubfx	x0, x0, #30, #1
   49f74:	add	w1, w0, #0x449
   49f78:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49f7c:	tst	x0, #0x800000
   49f80:	mov	w1, #0x678                 	// #1656
   49f84:	mov	w0, #0x663                 	// #1635
   49f88:	csel	w1, w0, w1, eq  // eq = none
   49f8c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49f90:	tbnz	w0, #14, 4a6e4 <aarch64_opcode_lookup@@Base+0x4194>
   49f94:	tbnz	w0, #16, 4a6d8 <aarch64_opcode_lookup@@Base+0x4188>
   49f98:	tst	x0, #0x100000
   49f9c:	mov	w1, #0x21                  	// #33
   49fa0:	mov	w0, #0xd7                  	// #215
   49fa4:	csel	w1, w0, w1, eq  // eq = none
   49fa8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49fac:	tbz	w0, #12, 4beb0 <aarch64_opcode_lookup@@Base+0x5960>
   49fb0:	tbnz	w0, #16, 4b4d4 <aarch64_opcode_lookup@@Base+0x4f84>
   49fb4:	tbnz	w0, #17, 4bec4 <aarch64_opcode_lookup@@Base+0x5974>
   49fb8:	tbnz	w0, #18, 4beb8 <aarch64_opcode_lookup@@Base+0x5968>
   49fbc:	tbnz	w0, #19, 4bbc4 <aarch64_opcode_lookup@@Base+0x5674>
   49fc0:	tst	x0, #0x100000
   49fc4:	mov	w1, #0x79d                 	// #1949
   49fc8:	mov	w0, #0x555                 	// #1365
   49fcc:	csel	w1, w0, w1, eq  // eq = none
   49fd0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49fd4:	tst	x0, #0x800000
   49fd8:	mov	w1, #0x672                 	// #1650
   49fdc:	mov	w0, #0x65f                 	// #1631
   49fe0:	csel	w1, w0, w1, eq  // eq = none
   49fe4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49fe8:	mov	w1, #0x77                  	// #119
   49fec:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   49ff0:	tst	x0, #0x1000
   49ff4:	mov	w1, #0x8e4                 	// #2276
   49ff8:	mov	w0, #0x867                 	// #2151
   49ffc:	csel	w1, w0, w1, eq  // eq = none
   4a000:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a004:	tbnz	w0, #22, 4ab9c <aarch64_opcode_lookup@@Base+0x464c>
   4a008:	tbnz	w0, #23, 4a9b8 <aarch64_opcode_lookup@@Base+0x4468>
   4a00c:	tbnz	w0, #31, 4c0b4 <aarch64_opcode_lookup@@Base+0x5b64>
   4a010:	ubfx	x0, x0, #30, #1
   4a014:	add	w1, w0, #0x455
   4a018:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a01c:	ubfx	x0, x0, #30, #1
   4a020:	add	w1, w0, #0x46
   4a024:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a028:	tbnz	w0, #22, 4b298 <aarch64_opcode_lookup@@Base+0x4d48>
   4a02c:	tst	x0, #0x800000
   4a030:	mov	w1, #0x6b1                 	// #1713
   4a034:	mov	w0, #0x6a4                 	// #1700
   4a038:	csel	w1, w0, w1, eq  // eq = none
   4a03c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a040:	mov	w1, #0x5eb                 	// #1515
   4a044:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a048:	ubfx	x0, x0, #13, #1
   4a04c:	add	w1, w0, #0x7a2
   4a050:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a054:	tbz	w0, #31, 4b538 <aarch64_opcode_lookup@@Base+0x4fe8>
   4a058:	tst	x0, #0x100000
   4a05c:	mov	w1, #0x78a                 	// #1930
   4a060:	mov	w0, #0x768                 	// #1896
   4a064:	csel	w1, w0, w1, eq  // eq = none
   4a068:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a06c:	tbnz	w0, #19, 4a5f0 <aarch64_opcode_lookup@@Base+0x40a0>
   4a070:	tbnz	w0, #23, 4c0dc <aarch64_opcode_lookup@@Base+0x5b8c>
   4a074:	tst	x0, #0x20000000
   4a078:	mov	w1, #0x20b                 	// #523
   4a07c:	mov	w0, #0x1ed                 	// #493
   4a080:	csel	w1, w0, w1, eq  // eq = none
   4a084:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a088:	mov	w1, #0x395                 	// #917
   4a08c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a090:	tst	x0, #0x1000
   4a094:	mov	w1, #0x906                 	// #2310
   4a098:	mov	w0, #0x8d1                 	// #2257
   4a09c:	csel	w1, w0, w1, eq  // eq = none
   4a0a0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a0a4:	mov	w1, #0x773                 	// #1907
   4a0a8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a0ac:	tbnz	w0, #20, 4aacc <aarch64_opcode_lookup@@Base+0x457c>
   4a0b0:	tbnz	w0, #22, 4a8dc <aarch64_opcode_lookup@@Base+0x438c>
   4a0b4:	tst	x0, #0x800000
   4a0b8:	mov	w1, #0x7c9                 	// #1993
   4a0bc:	mov	w0, #0x7bd                 	// #1981
   4a0c0:	csel	w1, w0, w1, eq  // eq = none
   4a0c4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a0c8:	tbz	w0, #16, 4b4cc <aarch64_opcode_lookup@@Base+0x4f7c>
   4a0cc:	tbnz	w0, #19, 4b494 <aarch64_opcode_lookup@@Base+0x4f44>
   4a0d0:	tbnz	w0, #23, 4bcf4 <aarch64_opcode_lookup@@Base+0x57a4>
   4a0d4:	tst	x0, #0x20000000
   4a0d8:	mov	w1, #0x205                 	// #517
   4a0dc:	mov	w0, #0x1e7                 	// #487
   4a0e0:	csel	w1, w0, w1, eq  // eq = none
   4a0e4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a0e8:	tbnz	w0, #16, 4ab18 <aarch64_opcode_lookup@@Base+0x45c8>
   4a0ec:	tbnz	w0, #23, 4aabc <aarch64_opcode_lookup@@Base+0x456c>
   4a0f0:	tst	x0, #0x20000000
   4a0f4:	cset	w0, eq  // eq = none
   4a0f8:	add	w1, w0, #0x21e
   4a0fc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a100:	tst	x0, #0x800000
   4a104:	mov	w1, #0x788                 	// #1928
   4a108:	mov	w0, #0x78c                 	// #1932
   4a10c:	csel	w1, w0, w1, eq  // eq = none
   4a110:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a114:	mov	w1, #0x6ef                 	// #1775
   4a118:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a11c:	tst	x0, #0x800000
   4a120:	mov	w1, #0x64c                 	// #1612
   4a124:	mov	w0, #0x648                 	// #1608
   4a128:	csel	w1, w0, w1, eq  // eq = none
   4a12c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a130:	tst	x0, #0x800000
   4a134:	mov	w1, #0x655                 	// #1621
   4a138:	mov	w0, #0x651                 	// #1617
   4a13c:	csel	w1, w0, w1, eq  // eq = none
   4a140:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a144:	tbnz	w0, #31, 4ba6c <aarch64_opcode_lookup@@Base+0x551c>
   4a148:	tbnz	w0, #16, 4ba64 <aarch64_opcode_lookup@@Base+0x5514>
   4a14c:	tst	x0, #0x20000
   4a150:	mov	w1, #0x977                 	// #2423
   4a154:	mov	w0, #0x815                 	// #2069
   4a158:	csel	w1, w0, w1, eq  // eq = none
   4a15c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a160:	mov	w1, #0x696                 	// #1686
   4a164:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a168:	mov	w1, #0x6ec                 	// #1772
   4a16c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a170:	tbnz	w0, #23, 4a97c <aarch64_opcode_lookup@@Base+0x442c>
   4a174:	tst	x0, #0x20000000
   4a178:	mov	w1, #0x160                 	// #352
   4a17c:	mov	w0, #0x12d                 	// #301
   4a180:	csel	w1, w0, w1, eq  // eq = none
   4a184:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a188:	tst	x0, #0x4000
   4a18c:	mov	w1, #0x119                 	// #281
   4a190:	mov	w0, #0x111                 	// #273
   4a194:	csel	w1, w0, w1, eq  // eq = none
   4a198:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a19c:	tbnz	w0, #31, 4b938 <aarch64_opcode_lookup@@Base+0x53e8>
   4a1a0:	tbnz	w0, #10, 4b1cc <aarch64_opcode_lookup@@Base+0x4c7c>
   4a1a4:	tbz	w0, #12, 4b994 <aarch64_opcode_lookup@@Base+0x5444>
   4a1a8:	tst	x0, #0x800
   4a1ac:	mov	w1, #0x83b                 	// #2107
   4a1b0:	mov	w0, #0x884                 	// #2180
   4a1b4:	csel	w1, w0, w1, eq  // eq = none
   4a1b8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a1bc:	tst	x0, #0x800000
   4a1c0:	mov	w1, #0x670                 	// #1648
   4a1c4:	mov	w0, #0x65d                 	// #1629
   4a1c8:	csel	w1, w0, w1, eq  // eq = none
   4a1cc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a1d0:	mov	w1, #0x2c8                 	// #712
   4a1d4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a1d8:	mov	w1, #0x2da                 	// #730
   4a1dc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a1e0:	mov	w1, #0x7a                  	// #122
   4a1e4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a1e8:	tst	x0, #0x800000
   4a1ec:	mov	w1, #0x61f                 	// #1567
   4a1f0:	mov	w0, #0x63d                 	// #1597
   4a1f4:	csel	w1, w0, w1, eq  // eq = none
   4a1f8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a1fc:	tbz	w0, #31, 4a714 <aarch64_opcode_lookup@@Base+0x41c4>
   4a200:	tst	x0, #0x100000
   4a204:	mov	w1, #0x77a                 	// #1914
   4a208:	mov	w0, #0x764                 	// #1892
   4a20c:	csel	w1, w0, w1, eq  // eq = none
   4a210:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a214:	mov	w1, #0x62e                 	// #1582
   4a218:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a21c:	tst	x0, #0x800000
   4a220:	mov	w1, #0x64d                 	// #1613
   4a224:	mov	w0, #0x649                 	// #1609
   4a228:	csel	w1, w0, w1, eq  // eq = none
   4a22c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a230:	ubfx	x0, x0, #22, #1
   4a234:	add	w1, w0, #0x87b
   4a238:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a23c:	mov	w1, #0x6f3                 	// #1779
   4a240:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a244:	tst	x0, #0x4000
   4a248:	mov	w1, #0x118                 	// #280
   4a24c:	mov	w0, #0x110                 	// #272
   4a250:	csel	w1, w0, w1, eq  // eq = none
   4a254:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a258:	ubfx	x0, x0, #22, #1
   4a25c:	add	w1, w0, #0x87f
   4a260:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a264:	tbnz	w0, #23, 4a7b4 <aarch64_opcode_lookup@@Base+0x4264>
   4a268:	tbnz	w0, #29, 4a794 <aarch64_opcode_lookup@@Base+0x4244>
   4a26c:	tbnz	w0, #31, 4c17c <aarch64_opcode_lookup@@Base+0x5c2c>
   4a270:	tbz	w0, #16, 4c174 <aarch64_opcode_lookup@@Base+0x5c24>
   4a274:	ubfx	x0, x0, #19, #1
   4a278:	add	w1, w0, #0xbe
   4a27c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a280:	tst	x0, #0x20000000
   4a284:	mov	w1, #0x200                 	// #512
   4a288:	mov	w0, #0x1e3                 	// #483
   4a28c:	csel	w1, w0, w1, eq  // eq = none
   4a290:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a294:	tst	x0, #0x4000
   4a298:	mov	w1, #0x14c                 	// #332
   4a29c:	mov	w0, #0x144                 	// #324
   4a2a0:	csel	w1, w0, w1, eq  // eq = none
   4a2a4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a2a8:	tst	x0, #0x800000
   4a2ac:	mov	w1, #0x5f3                 	// #1523
   4a2b0:	mov	w0, #0x5df                 	// #1503
   4a2b4:	csel	w1, w0, w1, eq  // eq = none
   4a2b8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a2bc:	tbnz	w0, #14, 4ab90 <aarch64_opcode_lookup@@Base+0x4640>
   4a2c0:	ubfx	x0, x0, #30, #1
   4a2c4:	add	w1, w0, #0x52
   4a2c8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a2cc:	mov	w1, #0x2dc                 	// #732
   4a2d0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a2d4:	tbz	w0, #23, 4a9e8 <aarch64_opcode_lookup@@Base+0x4498>
   4a2d8:	ubfx	x0, x0, #22, #1
   4a2dc:	add	w1, w0, #0x5a4
   4a2e0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a2e4:	tst	x0, #0x800000
   4a2e8:	mov	w1, #0x6ae                 	// #1710
   4a2ec:	mov	w0, #0x6b2                 	// #1714
   4a2f0:	csel	w1, w0, w1, eq  // eq = none
   4a2f4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a2f8:	tst	x0, #0x40000000
   4a2fc:	mov	w1, #0x2c1                 	// #705
   4a300:	mov	w0, #0x2d6                 	// #726
   4a304:	csel	w1, w0, w1, eq  // eq = none
   4a308:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a30c:	tbnz	w0, #16, 4ab50 <aarch64_opcode_lookup@@Base+0x4600>
   4a310:	ubfx	x0, x0, #19, #1
   4a314:	add	w1, w0, #0xc6
   4a318:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a31c:	tst	x0, #0x800000
   4a320:	mov	w1, #0x77f                 	// #1919
   4a324:	mov	w0, #0x783                 	// #1923
   4a328:	csel	w1, w0, w1, eq  // eq = none
   4a32c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a330:	tbnz	w0, #29, 4ab78 <aarch64_opcode_lookup@@Base+0x4628>
   4a334:	tbz	w0, #30, 4c090 <aarch64_opcode_lookup@@Base+0x5b40>
   4a338:	cmp	w0, #0x0
   4a33c:	mov	w1, #0x932                 	// #2354
   4a340:	mov	w0, #0x45                  	// #69
   4a344:	csel	w1, w0, w1, ge  // ge = tcont
   4a348:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a34c:	mov	w1, #0x2c2                 	// #706
   4a350:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a354:	tbnz	w0, #16, 4afd0 <aarch64_opcode_lookup@@Base+0x4a80>
   4a358:	tbnz	w0, #19, 4afbc <aarch64_opcode_lookup@@Base+0x4a6c>
   4a35c:	tbnz	w0, #20, 4bbcc <aarch64_opcode_lookup@@Base+0x567c>
   4a360:	tst	x0, #0x20000000
   4a364:	mov	w1, #0xf9                  	// #249
   4a368:	mov	w0, #0xc8                  	// #200
   4a36c:	csel	w1, w0, w1, eq  // eq = none
   4a370:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a374:	tst	x0, #0x800000
   4a378:	mov	w1, #0x5f4                 	// #1524
   4a37c:	mov	w0, #0x5e0                 	// #1504
   4a380:	csel	w1, w0, w1, eq  // eq = none
   4a384:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a388:	tst	x0, #0x400000
   4a38c:	mov	w1, #0x6ed                 	// #1773
   4a390:	mov	w0, #0x664                 	// #1636
   4a394:	csel	w1, w0, w1, eq  // eq = none
   4a398:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a39c:	tbnz	w0, #20, 4b368 <aarch64_opcode_lookup@@Base+0x4e18>
   4a3a0:	tbnz	w0, #22, 4b354 <aarch64_opcode_lookup@@Base+0x4e04>
   4a3a4:	tst	x0, #0x800000
   4a3a8:	mov	w1, #0x736                 	// #1846
   4a3ac:	mov	w0, #0x72a                 	// #1834
   4a3b0:	csel	w1, w0, w1, eq  // eq = none
   4a3b4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a3b8:	tst	x0, #0x4000
   4a3bc:	mov	w1, #0x117                 	// #279
   4a3c0:	mov	w0, #0x10f                 	// #271
   4a3c4:	csel	w1, w0, w1, eq  // eq = none
   4a3c8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a3cc:	mov	w1, #0x2f1                 	// #753
   4a3d0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a3d4:	mov	w1, #0x6fa                 	// #1786
   4a3d8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a3dc:	tst	x0, #0x1000
   4a3e0:	mov	w1, #0x8e3                 	// #2275
   4a3e4:	mov	w0, #0x866                 	// #2150
   4a3e8:	csel	w1, w0, w1, eq  // eq = none
   4a3ec:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a3f0:	mov	w1, #0x82                  	// #130
   4a3f4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a3f8:	tst	x0, #0x4000
   4a3fc:	mov	w1, #0x14b                 	// #331
   4a400:	mov	w0, #0x143                 	// #323
   4a404:	csel	w1, w0, w1, eq  // eq = none
   4a408:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a40c:	tst	x0, #0x1000
   4a410:	mov	w1, #0x8f0                 	// #2288
   4a414:	mov	w0, #0x89e                 	// #2206
   4a418:	csel	w1, w0, w1, eq  // eq = none
   4a41c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a420:	tbnz	w0, #29, 4b0c0 <aarch64_opcode_lookup@@Base+0x4b70>
   4a424:	tst	x0, #0x40000000
   4a428:	mov	w1, #0x1e2                 	// #482
   4a42c:	mov	w0, #0x357                 	// #855
   4a430:	csel	w1, w0, w1, eq  // eq = none
   4a434:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a438:	mov	w1, #0x225                 	// #549
   4a43c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a440:	tbnz	w0, #22, 4abec <aarch64_opcode_lookup@@Base+0x469c>
   4a444:	tbnz	w0, #23, 4abd4 <aarch64_opcode_lookup@@Base+0x4684>
   4a448:	tbnz	w0, #31, 4b9c0 <aarch64_opcode_lookup@@Base+0x5470>
   4a44c:	ubfx	x0, x0, #30, #1
   4a450:	add	w1, w0, #0x461
   4a454:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a458:	tst	x0, #0x20000000
   4a45c:	mov	w1, #0x15a                 	// #346
   4a460:	mov	w0, #0x129                 	// #297
   4a464:	csel	w1, w0, w1, eq  // eq = none
   4a468:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a46c:	mov	w1, #0x75e                 	// #1886
   4a470:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a474:	mov	w1, #0x695                 	// #1685
   4a478:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a47c:	tst	x0, #0x1000
   4a480:	mov	w1, #0x920                 	// #2336
   4a484:	mov	w0, #0x902                 	// #2306
   4a488:	csel	w1, w0, w1, eq  // eq = none
   4a48c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a490:	tst	x0, #0x1000
   4a494:	mov	w1, #0x907                 	// #2311
   4a498:	mov	w0, #0x8d2                 	// #2258
   4a49c:	csel	w1, w0, w1, eq  // eq = none
   4a4a0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a4a4:	tbnz	w0, #17, 4afa4 <aarch64_opcode_lookup@@Base+0x4a54>
   4a4a8:	tbnz	w0, #18, 4bb50 <aarch64_opcode_lookup@@Base+0x5600>
   4a4ac:	tbnz	w0, #19, 4ba18 <aarch64_opcode_lookup@@Base+0x54c8>
   4a4b0:	tst	x0, #0x100000
   4a4b4:	mov	w1, #0x315                 	// #789
   4a4b8:	mov	w0, #0x301                 	// #769
   4a4bc:	csel	w1, w0, w1, eq  // eq = none
   4a4c0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a4c4:	tbz	w0, #22, 4bb70 <aarch64_opcode_lookup@@Base+0x5620>
   4a4c8:	tst	x0, #0x800000
   4a4cc:	mov	w1, #0x72b                 	// #1835
   4a4d0:	mov	w0, #0x72e                 	// #1838
   4a4d4:	csel	w1, w0, w1, eq  // eq = none
   4a4d8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a4dc:	mov	w1, #0x796                 	// #1942
   4a4e0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a4e4:	tst	x0, #0x40000000
   4a4e8:	mov	w1, #0x2bf                 	// #703
   4a4ec:	mov	w0, #0x2cd                 	// #717
   4a4f0:	csel	w1, w0, w1, eq  // eq = none
   4a4f4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a4f8:	tst	x0, #0x40000000
   4a4fc:	mov	w1, #0x2c6                 	// #710
   4a500:	mov	w0, #0x2d8                 	// #728
   4a504:	csel	w1, w0, w1, eq  // eq = none
   4a508:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a50c:	tst	x0, #0x800
   4a510:	mov	w1, #0x87e                 	// #2174
   4a514:	mov	w0, #0x7b1                 	// #1969
   4a518:	csel	w1, w0, w1, eq  // eq = none
   4a51c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a520:	tst	x0, #0x800000
   4a524:	mov	w1, #0x654                 	// #1620
   4a528:	mov	w0, #0x650                 	// #1616
   4a52c:	csel	w1, w0, w1, eq  // eq = none
   4a530:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a534:	tbnz	w0, #16, 4b450 <aarch64_opcode_lookup@@Base+0x4f00>
   4a538:	tst	x0, #0x20000000
   4a53c:	mov	w1, #0x201                 	// #513
   4a540:	mov	w0, #0x1e5                 	// #485
   4a544:	csel	w1, w0, w1, eq  // eq = none
   4a548:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a54c:	tst	x0, #0x1000
   4a550:	mov	w1, #0x844                 	// #2116
   4a554:	mov	w0, #0x8a0                 	// #2208
   4a558:	csel	w1, w0, w1, eq  // eq = none
   4a55c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a560:	tst	x0, #0x800000
   4a564:	mov	w1, #0x5f9                 	// #1529
   4a568:	mov	w0, #0x5e3                 	// #1507
   4a56c:	csel	w1, w0, w1, eq  // eq = none
   4a570:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a574:	tbnz	w0, #16, 4b0ec <aarch64_opcode_lookup@@Base+0x4b9c>
   4a578:	tbnz	w0, #19, 4b0d8 <aarch64_opcode_lookup@@Base+0x4b88>
   4a57c:	tst	x0, #0x20000000
   4a580:	mov	w1, #0xf7                  	// #247
   4a584:	mov	w0, #0xc4                  	// #196
   4a588:	csel	w1, w0, w1, eq  // eq = none
   4a58c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a590:	tst	x0, #0x1000
   4a594:	mov	w1, #0x8eb                 	// #2283
   4a598:	mov	w0, #0x86e                 	// #2158
   4a59c:	csel	w1, w0, w1, eq  // eq = none
   4a5a0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a5a4:	tst	x0, #0x800000
   4a5a8:	mov	w1, #0x652                 	// #1618
   4a5ac:	mov	w0, #0x656                 	// #1622
   4a5b0:	csel	w1, w0, w1, eq  // eq = none
   4a5b4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a5b8:	tst	x0, #0x800000
   4a5bc:	mov	w1, #0x5ec                 	// #1516
   4a5c0:	mov	w0, #0x63a                 	// #1594
   4a5c4:	csel	w1, w0, w1, eq  // eq = none
   4a5c8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a5cc:	tbnz	w0, #14, 4b470 <aarch64_opcode_lookup@@Base+0x4f20>
   4a5d0:	ubfx	x0, x0, #30, #1
   4a5d4:	add	w1, w0, #0x32
   4a5d8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a5dc:	tst	x0, #0x800000
   4a5e0:	mov	w1, #0x759                 	// #1881
   4a5e4:	mov	w0, #0x771                 	// #1905
   4a5e8:	csel	w1, w0, w1, eq  // eq = none
   4a5ec:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a5f0:	tbnz	w0, #23, 4c150 <aarch64_opcode_lookup@@Base+0x5c00>
   4a5f4:	tst	x0, #0x20000000
   4a5f8:	mov	w1, #0x20c                 	// #524
   4a5fc:	mov	w0, #0x1ee                 	// #494
   4a600:	csel	w1, w0, w1, eq  // eq = none
   4a604:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a608:	mov	w1, #0x765                 	// #1893
   4a60c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a610:	mov	w1, #0x613                 	// #1555
   4a614:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a618:	ubfx	x0, x0, #30, #1
   4a61c:	add	w1, w0, #0x54
   4a620:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a624:	mov	w1, #0x7bc                 	// #1980
   4a628:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a62c:	mov	w1, #0x68c                 	// #1676
   4a630:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a634:	tbnz	w0, #17, 4a664 <aarch64_opcode_lookup@@Base+0x4114>
   4a638:	tst	x0, #0x40000
   4a63c:	mov	w1, #0x59a                 	// #1434
   4a640:	mov	w0, #0x5c2                 	// #1474
   4a644:	csel	w1, w0, w1, eq  // eq = none
   4a648:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a64c:	mov	w1, #0x5c6                 	// #1478
   4a650:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a654:	mov	w1, #0x85c                 	// #2140
   4a658:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a65c:	mov	w1, #0x881                 	// #2177
   4a660:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a664:	tst	x0, #0x40000
   4a668:	mov	w1, #0x598                 	// #1432
   4a66c:	mov	w0, #0x5c4                 	// #1476
   4a670:	csel	w1, w0, w1, eq  // eq = none
   4a674:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a678:	mov	w1, #0x397                 	// #919
   4a67c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a680:	mov	w1, #0x8ca                 	// #2250
   4a684:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a688:	tbnz	w0, #12, 4c0f0 <aarch64_opcode_lookup@@Base+0x5ba0>
   4a68c:	tst	x0, #0x400000
   4a690:	mov	w1, #0x840                 	// #2112
   4a694:	mov	w0, #0x91b                 	// #2331
   4a698:	csel	w1, w0, w1, eq  // eq = none
   4a69c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a6a0:	mov	w1, #0x930                 	// #2352
   4a6a4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a6a8:	tst	x0, #0x100000
   4a6ac:	mov	w1, #0x8aa                 	// #2218
   4a6b0:	mov	w0, #0x89c                 	// #2204
   4a6b4:	csel	w1, w0, w1, eq  // eq = none
   4a6b8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a6bc:	tbnz	w0, #19, 4a6ec <aarch64_opcode_lookup@@Base+0x419c>
   4a6c0:	tbnz	w0, #20, 4c0f8 <aarch64_opcode_lookup@@Base+0x5ba8>
   4a6c4:	tst	x0, #0x40000000
   4a6c8:	mov	w1, #0x8b3                 	// #2227
   4a6cc:	mov	w0, #0x8a2                 	// #2210
   4a6d0:	csel	w1, w0, w1, eq  // eq = none
   4a6d4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a6d8:	ubfx	x0, x0, #30, #1
   4a6dc:	add	w1, w0, #0xe0
   4a6e0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a6e4:	mov	w1, #0xda                  	// #218
   4a6e8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a6ec:	tst	x0, #0x100000
   4a6f0:	mov	w1, #0x8ab                 	// #2219
   4a6f4:	mov	w0, #0x89d                 	// #2205
   4a6f8:	csel	w1, w0, w1, eq  // eq = none
   4a6fc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a700:	tst	x0, #0x1000
   4a704:	mov	w1, #0x846                 	// #2118
   4a708:	mov	w0, #0x842                 	// #2114
   4a70c:	csel	w1, w0, w1, eq  // eq = none
   4a710:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a714:	mov	w1, #0x95d                 	// #2397
   4a718:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a71c:	mov	w1, #0x501                 	// #1281
   4a720:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a724:	mov	w1, #0x7da                 	// #2010
   4a728:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a72c:	tbnz	w0, #22, 4c100 <aarch64_opcode_lookup@@Base+0x5bb0>
   4a730:	tst	x0, #0x800000
   4a734:	mov	w1, #0x5d1                 	// #1489
   4a738:	mov	w0, #0x5c9                 	// #1481
   4a73c:	csel	w1, w0, w1, eq  // eq = none
   4a740:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a744:	tbnz	w0, #20, 4a77c <aarch64_opcode_lookup@@Base+0x422c>
   4a748:	tbnz	w0, #22, 4c134 <aarch64_opcode_lookup@@Base+0x5be4>
   4a74c:	tst	x0, #0x800000
   4a750:	mov	w1, #0x744                 	// #1860
   4a754:	mov	w0, #0x738                 	// #1848
   4a758:	csel	w1, w0, w1, eq  // eq = none
   4a75c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a760:	tst	x0, #0x1000
   4a764:	mov	w1, #0x95a                 	// #2394
   4a768:	mov	w0, #0x87d                 	// #2173
   4a76c:	csel	w1, w0, w1, eq  // eq = none
   4a770:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a774:	mov	w1, #0x59f                 	// #1439
   4a778:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a77c:	tbnz	w0, #22, 4c184 <aarch64_opcode_lookup@@Base+0x5c34>
   4a780:	tst	x0, #0x800000
   4a784:	mov	w1, #0x743                 	// #1859
   4a788:	mov	w0, #0x737                 	// #1847
   4a78c:	csel	w1, w0, w1, eq  // eq = none
   4a790:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a794:	tbz	w0, #16, 4c148 <aarch64_opcode_lookup@@Base+0x5bf8>
   4a798:	ubfx	x0, x0, #19, #1
   4a79c:	add	w1, w0, #0xee
   4a7a0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a7a4:	tbz	w0, #16, 4c198 <aarch64_opcode_lookup@@Base+0x5c48>
   4a7a8:	ubfx	x0, x0, #19, #1
   4a7ac:	add	w1, w0, #0xe6
   4a7b0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a7b4:	tbnz	w0, #16, 4a7e4 <aarch64_opcode_lookup@@Base+0x4294>
   4a7b8:	tbnz	w0, #19, 4b99c <aarch64_opcode_lookup@@Base+0x544c>
   4a7bc:	tbnz	w0, #20, 4c164 <aarch64_opcode_lookup@@Base+0x5c14>
   4a7c0:	tst	x0, #0x20000000
   4a7c4:	mov	w1, #0xf5                  	// #245
   4a7c8:	mov	w0, #0xc2                  	// #194
   4a7cc:	csel	w1, w0, w1, eq  // eq = none
   4a7d0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a7d4:	mov	w1, #0x750                 	// #1872
   4a7d8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a7dc:	mov	w1, #0x2c3                 	// #707
   4a7e0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a7e4:	tst	x0, #0x20000000
   4a7e8:	mov	w1, #0x101                 	// #257
   4a7ec:	mov	w0, #0xd2                  	// #210
   4a7f0:	csel	w1, w0, w1, eq  // eq = none
   4a7f4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a7f8:	tbnz	w0, #22, 4b9b0 <aarch64_opcode_lookup@@Base+0x5460>
   4a7fc:	tst	x0, #0x800000
   4a800:	mov	w1, #0x708                 	// #1800
   4a804:	mov	w0, #0x4fe                 	// #1278
   4a808:	csel	w1, w0, w1, eq  // eq = none
   4a80c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a810:	tst	x0, #0x1000
   4a814:	mov	w1, #0x909                 	// #2313
   4a818:	mov	w0, #0x8d4                 	// #2260
   4a81c:	csel	w1, w0, w1, eq  // eq = none
   4a820:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a824:	tbnz	w0, #20, 4a878 <aarch64_opcode_lookup@@Base+0x4328>
   4a828:	tbnz	w0, #17, 4c204 <aarch64_opcode_lookup@@Base+0x5cb4>
   4a82c:	tbnz	w0, #18, 4c1a0 <aarch64_opcode_lookup@@Base+0x5c50>
   4a830:	tst	x0, #0x400000
   4a834:	mov	w1, #0x57b                 	// #1403
   4a838:	mov	w0, #0x579                 	// #1401
   4a83c:	csel	w1, w0, w1, eq  // eq = none
   4a840:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a844:	tbz	w0, #20, 4c1a8 <aarch64_opcode_lookup@@Base+0x5c58>
   4a848:	tst	x0, #0x40000000
   4a84c:	mov	w1, #0x8f7                 	// #2295
   4a850:	mov	w0, #0x6c1                 	// #1729
   4a854:	csel	w1, w0, w1, eq  // eq = none
   4a858:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a85c:	tbnz	w0, #19, 4a890 <aarch64_opcode_lookup@@Base+0x4340>
   4a860:	tbnz	w0, #20, 4c1b0 <aarch64_opcode_lookup@@Base+0x5c60>
   4a864:	tst	x0, #0x40000000
   4a868:	mov	w1, #0x8fe                 	// #2302
   4a86c:	mov	w0, #0x8f2                 	// #2290
   4a870:	csel	w1, w0, w1, eq  // eq = none
   4a874:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a878:	tbnz	w0, #22, 4c1c4 <aarch64_opcode_lookup@@Base+0x5c74>
   4a87c:	tst	x0, #0x800000
   4a880:	mov	w1, #0x582                 	// #1410
   4a884:	mov	w0, #0x819                 	// #2073
   4a888:	csel	w1, w0, w1, eq  // eq = none
   4a88c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a890:	tbnz	w0, #20, 4c124 <aarch64_opcode_lookup@@Base+0x5bd4>
   4a894:	tst	x0, #0x40000000
   4a898:	mov	w1, #0x8ef                 	// #2287
   4a89c:	mov	w0, #0x8a5                 	// #2213
   4a8a0:	csel	w1, w0, w1, eq  // eq = none
   4a8a4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a8a8:	ubfx	x0, x0, #30, #1
   4a8ac:	add	w1, w0, #0x56
   4a8b0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a8b4:	mov	w1, #0x2db                 	// #731
   4a8b8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a8bc:	tbnz	w0, #19, 4aae4 <aarch64_opcode_lookup@@Base+0x4594>
   4a8c0:	tbnz	w0, #20, 4c020 <aarch64_opcode_lookup@@Base+0x5ad0>
   4a8c4:	tbnz	w0, #23, 4bff4 <aarch64_opcode_lookup@@Base+0x5aa4>
   4a8c8:	tst	x0, #0x20000000
   4a8cc:	mov	w1, #0xea                  	// #234
   4a8d0:	mov	w0, #0xba                  	// #186
   4a8d4:	csel	w1, w0, w1, eq  // eq = none
   4a8d8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a8dc:	tst	x0, #0x800000
   4a8e0:	mov	w1, #0x7c0                 	// #1984
   4a8e4:	mov	w0, #0x7c3                 	// #1987
   4a8e8:	csel	w1, w0, w1, eq  // eq = none
   4a8ec:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a8f0:	mov	w1, #0x675                 	// #1653
   4a8f4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a8f8:	mov	w1, #0x7d9                 	// #2009
   4a8fc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a900:	ubfx	x0, x0, #22, #1
   4a904:	add	w1, w0, #0x860
   4a908:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a90c:	tbz	w0, #12, 4c0d4 <aarch64_opcode_lookup@@Base+0x5b84>
   4a910:	tbnz	w0, #22, 4c0cc <aarch64_opcode_lookup@@Base+0x5b7c>
   4a914:	tst	x0, #0x800000
   4a918:	mov	w1, #0x959                 	// #2393
   4a91c:	mov	w0, #0x957                 	// #2391
   4a920:	csel	w1, w0, w1, eq  // eq = none
   4a924:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a928:	mov	w1, #0xd5                  	// #213
   4a92c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a930:	mov	w1, #0x75d                 	// #1885
   4a934:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a938:	mov	w1, #0x74a                 	// #1866
   4a93c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a940:	ubfx	x0, x0, #22, #1
   4a944:	add	w1, w0, #0x8dd
   4a948:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a94c:	tst	x0, #0x1000
   4a950:	mov	w1, #0x8e2                 	// #2274
   4a954:	mov	w0, #0x8dc                 	// #2268
   4a958:	csel	w1, w0, w1, eq  // eq = none
   4a95c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a960:	mov	w1, #0x97d                 	// #2429
   4a964:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a968:	tst	x0, #0x400000
   4a96c:	mov	w1, #0x803                 	// #2051
   4a970:	mov	w0, #0x80e                 	// #2062
   4a974:	csel	w1, w0, w1, eq  // eq = none
   4a978:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a97c:	tst	x0, #0x20000000
   4a980:	mov	w1, #0x16e                 	// #366
   4a984:	mov	w0, #0x139                 	// #313
   4a988:	csel	w1, w0, w1, eq  // eq = none
   4a98c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a990:	mov	w1, #0x68e                 	// #1678
   4a994:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a998:	mov	w1, #0x6f4                 	// #1780
   4a99c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a9a0:	tbnz	w0, #31, 4c098 <aarch64_opcode_lookup@@Base+0x5b48>
   4a9a4:	tst	x0, #0x40000000
   4a9a8:	mov	w1, #0x42b                 	// #1067
   4a9ac:	mov	w0, #0x428                 	// #1064
   4a9b0:	csel	w1, w0, w1, eq  // eq = none
   4a9b4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a9b8:	tbnz	w0, #31, 4bfe4 <aarch64_opcode_lookup@@Base+0x5a94>
   4a9bc:	tst	x0, #0x40000000
   4a9c0:	mov	w1, #0x45b                 	// #1115
   4a9c4:	mov	w0, #0x458                 	// #1112
   4a9c8:	csel	w1, w0, w1, eq  // eq = none
   4a9cc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a9d0:	tbnz	w0, #10, 4c12c <aarch64_opcode_lookup@@Base+0x5bdc>
   4a9d4:	tst	x0, #0x1000
   4a9d8:	mov	w1, #0x705                 	// #1797
   4a9dc:	mov	w0, #0x701                 	// #1793
   4a9e0:	csel	w1, w0, w1, eq  // eq = none
   4a9e4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a9e8:	mov	w1, #0x5a3                 	// #1443
   4a9ec:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a9f0:	mov	w1, #0x3a2                 	// #930
   4a9f4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4a9f8:	tbnz	w0, #20, 4aa3c <aarch64_opcode_lookup@@Base+0x44ec>
   4a9fc:	tbnz	w0, #22, 4c07c <aarch64_opcode_lookup@@Base+0x5b2c>
   4aa00:	tst	x0, #0x800000
   4aa04:	mov	w1, #0x7d7                 	// #2007
   4aa08:	mov	w0, #0x7cb                 	// #1995
   4aa0c:	csel	w1, w0, w1, eq  // eq = none
   4aa10:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4aa14:	tst	x0, #0x80000
   4aa18:	mov	w1, #0x517                 	// #1303
   4aa1c:	mov	w0, #0x513                 	// #1299
   4aa20:	csel	w1, w0, w1, eq  // eq = none
   4aa24:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4aa28:	tst	x0, #0x800000
   4aa2c:	mov	w1, #0x54e                 	// #1358
   4aa30:	mov	w0, #0x550                 	// #1360
   4aa34:	csel	w1, w0, w1, eq  // eq = none
   4aa38:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4aa3c:	tbnz	w0, #22, 4c058 <aarch64_opcode_lookup@@Base+0x5b08>
   4aa40:	tst	x0, #0x800000
   4aa44:	mov	w1, #0x7d8                 	// #2008
   4aa48:	mov	w0, #0x7cc                 	// #1996
   4aa4c:	csel	w1, w0, w1, eq  // eq = none
   4aa50:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4aa54:	tbnz	w0, #31, 4c06c <aarch64_opcode_lookup@@Base+0x5b1c>
   4aa58:	tst	x0, #0x40000000
   4aa5c:	mov	w1, #0x41f                 	// #1055
   4aa60:	mov	w0, #0x41c                 	// #1052
   4aa64:	csel	w1, w0, w1, eq  // eq = none
   4aa68:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4aa6c:	tst	x0, #0x20000000
   4aa70:	mov	w1, #0x168                 	// #360
   4aa74:	mov	w0, #0x137                 	// #311
   4aa78:	csel	w1, w0, w1, eq  // eq = none
   4aa7c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4aa80:	tbnz	w0, #23, 4aaa4 <aarch64_opcode_lookup@@Base+0x4554>
   4aa84:	tbnz	w0, #31, 4bfec <aarch64_opcode_lookup@@Base+0x5a9c>
   4aa88:	tst	x0, #0x40000000
   4aa8c:	mov	w1, #0x420                 	// #1056
   4aa90:	mov	w0, #0x41d                 	// #1053
   4aa94:	csel	w1, w0, w1, eq  // eq = none
   4aa98:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4aa9c:	mov	w1, #0x931                 	// #2353
   4aaa0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4aaa4:	tbnz	w0, #31, 4c034 <aarch64_opcode_lookup@@Base+0x5ae4>
   4aaa8:	tst	x0, #0x40000000
   4aaac:	mov	w1, #0x421                 	// #1057
   4aab0:	mov	w0, #0x41e                 	// #1054
   4aab4:	csel	w1, w0, w1, eq  // eq = none
   4aab8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4aabc:	tst	x0, #0x20000000
   4aac0:	cset	w0, eq  // eq = none
   4aac4:	add	w1, w0, #0x222
   4aac8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4aacc:	tbnz	w0, #22, 4ab04 <aarch64_opcode_lookup@@Base+0x45b4>
   4aad0:	tst	x0, #0x800000
   4aad4:	mov	w1, #0x7ca                 	// #1994
   4aad8:	mov	w0, #0x7be                 	// #1982
   4aadc:	csel	w1, w0, w1, eq  // eq = none
   4aae0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4aae4:	tbnz	w0, #23, 4c044 <aarch64_opcode_lookup@@Base+0x5af4>
   4aae8:	tst	x0, #0x20000000
   4aaec:	mov	w1, #0xeb                  	// #235
   4aaf0:	mov	w0, #0xbb                  	// #187
   4aaf4:	csel	w1, w0, w1, eq  // eq = none
   4aaf8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4aafc:	mov	w1, #0x75f                 	// #1887
   4ab00:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ab04:	tst	x0, #0x800000
   4ab08:	mov	w1, #0x7c1                 	// #1985
   4ab0c:	mov	w0, #0x7c4                 	// #1988
   4ab10:	csel	w1, w0, w1, eq  // eq = none
   4ab14:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ab18:	ubfx	x0, x0, #19, #1
   4ab1c:	add	w1, w0, #0x1fb
   4ab20:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ab24:	tst	x0, #0x80000
   4ab28:	mov	w1, #0x726                 	// #1830
   4ab2c:	mov	w0, #0x70b                 	// #1803
   4ab30:	csel	w1, w0, w1, eq  // eq = none
   4ab34:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ab38:	tbnz	w0, #18, 4c018 <aarch64_opcode_lookup@@Base+0x5ac8>
   4ab3c:	tst	x0, #0x80000
   4ab40:	mov	w1, #0x51e                 	// #1310
   4ab44:	mov	w0, #0x5d9                 	// #1497
   4ab48:	csel	w1, w0, w1, eq  // eq = none
   4ab4c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ab50:	ubfx	x0, x0, #29, #1
   4ab54:	add	w1, w0, #0x9e
   4ab58:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ab5c:	tst	x0, #0x100000
   4ab60:	mov	w1, #0x557                 	// #1367
   4ab64:	mov	w0, #0x71f                 	// #1823
   4ab68:	csel	w1, w0, w1, eq  // eq = none
   4ab6c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ab70:	mov	w1, #0x2d5                 	// #725
   4ab74:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ab78:	ubfx	x0, x0, #30, #1
   4ab7c:	add	w1, w0, #0x60
   4ab80:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ab84:	ubfx	x0, x0, #30, #1
   4ab88:	add	w1, w0, #0x5c
   4ab8c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ab90:	ubfx	x0, x0, #30, #1
   4ab94:	add	w1, w0, #0x5a
   4ab98:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ab9c:	tbnz	w0, #23, 4b758 <aarch64_opcode_lookup@@Base+0x5208>
   4aba0:	tbnz	w0, #31, 4be20 <aarch64_opcode_lookup@@Base+0x58d0>
   4aba4:	tst	x0, #0x40000000
   4aba8:	mov	w1, #0x45c                 	// #1116
   4abac:	mov	w0, #0x459                 	// #1113
   4abb0:	csel	w1, w0, w1, eq  // eq = none
   4abb4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4abb8:	tst	x0, #0x20000000
   4abbc:	mov	w1, #0x166                 	// #358
   4abc0:	mov	w0, #0x133                 	// #307
   4abc4:	csel	w1, w0, w1, eq  // eq = none
   4abc8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4abcc:	mov	w1, #0x808                 	// #2056
   4abd0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4abd4:	tbnz	w0, #31, 4bfa8 <aarch64_opcode_lookup@@Base+0x5a58>
   4abd8:	tst	x0, #0x40000000
   4abdc:	mov	w1, #0x467                 	// #1127
   4abe0:	mov	w0, #0x464                 	// #1124
   4abe4:	csel	w1, w0, w1, eq  // eq = none
   4abe8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4abec:	tbnz	w0, #23, 4b2ac <aarch64_opcode_lookup@@Base+0x4d5c>
   4abf0:	tbnz	w0, #31, 4b9e8 <aarch64_opcode_lookup@@Base+0x5498>
   4abf4:	tst	x0, #0x40000000
   4abf8:	mov	w1, #0x468                 	// #1128
   4abfc:	mov	w0, #0x465                 	// #1125
   4ac00:	csel	w1, w0, w1, eq  // eq = none
   4ac04:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ac08:	mov	w1, #0x548                 	// #1352
   4ac0c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ac10:	mov	w1, #0x8f9                 	// #2297
   4ac14:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ac18:	mov	w1, #0x203                 	// #515
   4ac1c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ac20:	tst	x0, #0x40000000
   4ac24:	mov	w1, #0x2c5                 	// #709
   4ac28:	mov	w0, #0x2d7                 	// #727
   4ac2c:	csel	w1, w0, w1, eq  // eq = none
   4ac30:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ac34:	tst	x0, #0x80000
   4ac38:	mov	w1, #0x561                 	// #1377
   4ac3c:	mov	w0, #0x7a0                 	// #1952
   4ac40:	csel	w1, w0, w1, eq  // eq = none
   4ac44:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ac48:	tbnz	w0, #18, 4ac90 <aarch64_opcode_lookup@@Base+0x4740>
   4ac4c:	tst	x0, #0x80000
   4ac50:	mov	w1, #0x540                 	// #1344
   4ac54:	mov	w0, #0x79f                 	// #1951
   4ac58:	csel	w1, w0, w1, eq  // eq = none
   4ac5c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ac60:	mov	w1, #0x150                 	// #336
   4ac64:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ac68:	tbz	w0, #16, 4bf90 <aarch64_opcode_lookup@@Base+0x5a40>
   4ac6c:	ubfx	x0, x0, #30, #1
   4ac70:	add	w1, w0, #0xe4
   4ac74:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ac78:	mov	w1, #0x950                 	// #2384
   4ac7c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ac80:	mov	w1, #0x6e5                 	// #1765
   4ac84:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ac88:	mov	w1, #0x970                 	// #2416
   4ac8c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ac90:	tst	x0, #0x80000
   4ac94:	mov	w1, #0x6d7                 	// #1751
   4ac98:	mov	w0, #0x4f9                 	// #1273
   4ac9c:	csel	w1, w0, w1, eq  // eq = none
   4aca0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4aca4:	mov	w1, #0x16a                 	// #362
   4aca8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4acac:	mov	w1, #0x6cd                 	// #1741
   4acb0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4acb4:	tbnz	w0, #16, 4ad00 <aarch64_opcode_lookup@@Base+0x47b0>
   4acb8:	tst	x0, #0x100000
   4acbc:	mov	w1, #0x6df                 	// #1759
   4acc0:	mov	w0, #0x721                 	// #1825
   4acc4:	csel	w1, w0, w1, eq  // eq = none
   4acc8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4accc:	tbnz	w0, #18, 4ba4c <aarch64_opcode_lookup@@Base+0x54fc>
   4acd0:	tst	x0, #0x80000
   4acd4:	mov	w1, #0x32e                 	// #814
   4acd8:	mov	w0, #0x334                 	// #820
   4acdc:	csel	w1, w0, w1, eq  // eq = none
   4ace0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ace4:	tbnz	w0, #16, 4ad28 <aarch64_opcode_lookup@@Base+0x47d8>
   4ace8:	tbnz	w0, #18, 4bdf0 <aarch64_opcode_lookup@@Base+0x58a0>
   4acec:	tst	x0, #0x80000
   4acf0:	mov	w1, #0x32d                 	// #813
   4acf4:	mov	w0, #0x332                 	// #818
   4acf8:	csel	w1, w0, w1, eq  // eq = none
   4acfc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ad00:	tst	x0, #0x100000
   4ad04:	mov	w1, #0x55e                 	// #1374
   4ad08:	mov	w0, #0x7b6                 	// #1974
   4ad0c:	csel	w1, w0, w1, eq  // eq = none
   4ad10:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ad14:	tst	x0, #0x10
   4ad18:	mov	w1, #0x71d                 	// #1821
   4ad1c:	mov	w0, #0x55c                 	// #1372
   4ad20:	csel	w1, w0, w1, eq  // eq = none
   4ad24:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ad28:	tbnz	w0, #18, 4bc34 <aarch64_opcode_lookup@@Base+0x56e4>
   4ad2c:	tst	x0, #0x80000
   4ad30:	mov	w1, #0x32f                 	// #815
   4ad34:	mov	w0, #0x336                 	// #822
   4ad38:	csel	w1, w0, w1, eq  // eq = none
   4ad3c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ad40:	tst	x0, #0x1000
   4ad44:	mov	w1, #0x908                 	// #2312
   4ad48:	mov	w0, #0x8d3                 	// #2259
   4ad4c:	csel	w1, w0, w1, eq  // eq = none
   4ad50:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ad54:	tbnz	w0, #23, 4b578 <aarch64_opcode_lookup@@Base+0x5028>
   4ad58:	tbnz	w0, #31, 4bf6c <aarch64_opcode_lookup@@Base+0x5a1c>
   4ad5c:	tst	x0, #0x40000000
   4ad60:	mov	w1, #0x42c                 	// #1068
   4ad64:	mov	w0, #0x429                 	// #1065
   4ad68:	csel	w1, w0, w1, eq  // eq = none
   4ad6c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ad70:	tst	x0, #0x800000
   4ad74:	mov	w1, #0x5fb                 	// #1531
   4ad78:	mov	w0, #0x5e6                 	// #1510
   4ad7c:	csel	w1, w0, w1, eq  // eq = none
   4ad80:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ad84:	tbz	w0, #22, 4bdf8 <aarch64_opcode_lookup@@Base+0x58a8>
   4ad88:	tst	x0, #0x800000
   4ad8c:	mov	w1, #0x54d                 	// #1357
   4ad90:	mov	w0, #0x54f                 	// #1359
   4ad94:	csel	w1, w0, w1, eq  // eq = none
   4ad98:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ad9c:	mov	w1, #0x6a3                 	// #1699
   4ada0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ada4:	ubfx	x0, x0, #12, #1
   4ada8:	add	w1, w0, #0x910
   4adac:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4adb0:	tbnz	w0, #11, 4ade4 <aarch64_opcode_lookup@@Base+0x4894>
   4adb4:	ubfx	x0, x0, #12, #1
   4adb8:	add	w1, w0, #0x7ea
   4adbc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4adc0:	mov	w1, #0x728                 	// #1832
   4adc4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4adc8:	tbnz	w0, #18, 4ba10 <aarch64_opcode_lookup@@Base+0x54c0>
   4adcc:	tbz	w0, #19, 4ba08 <aarch64_opcode_lookup@@Base+0x54b8>
   4add0:	tst	x0, #0x100000
   4add4:	mov	w1, #0x504                 	// #1284
   4add8:	mov	w0, #0x723                 	// #1827
   4addc:	csel	w1, w0, w1, eq  // eq = none
   4ade0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ade4:	ubfx	x0, x0, #12, #1
   4ade8:	add	w1, w0, #0x7e6
   4adec:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4adf0:	tst	x0, #0x80000
   4adf4:	mov	w1, #0x7a6                 	// #1958
   4adf8:	mov	w0, #0x7af                 	// #1967
   4adfc:	csel	w1, w0, w1, eq  // eq = none
   4ae00:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ae04:	tbnz	w0, #18, 4b9f0 <aarch64_opcode_lookup@@Base+0x54a0>
   4ae08:	tbnz	w0, #19, 4b2f0 <aarch64_opcode_lookup@@Base+0x4da0>
   4ae0c:	tst	x0, #0x100000
   4ae10:	mov	w1, #0x7ba                 	// #1978
   4ae14:	mov	w0, #0x79b                 	// #1947
   4ae18:	csel	w1, w0, w1, eq  // eq = none
   4ae1c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ae20:	tst	x0, #0x80000
   4ae24:	mov	w1, #0x70e                 	// #1806
   4ae28:	mov	w0, #0x717                 	// #1815
   4ae2c:	csel	w1, w0, w1, eq  // eq = none
   4ae30:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ae34:	ubfx	x0, x0, #22, #1
   4ae38:	add	w1, w0, #0x891
   4ae3c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ae40:	tbnz	w0, #12, 4bab8 <aarch64_opcode_lookup@@Base+0x5568>
   4ae44:	ubfx	x0, x0, #22, #1
   4ae48:	add	w1, w0, #0x834
   4ae4c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ae50:	tbnz	w0, #16, 4ae80 <aarch64_opcode_lookup@@Base+0x4930>
   4ae54:	tst	x0, #0x80000
   4ae58:	mov	w1, #0x2a1                 	// #673
   4ae5c:	mov	w0, #0xa8                  	// #168
   4ae60:	csel	w1, w0, w1, eq  // eq = none
   4ae64:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ae68:	tbz	w0, #29, 4bb0c <aarch64_opcode_lookup@@Base+0x55bc>
   4ae6c:	tst	x0, #0x40000000
   4ae70:	mov	w1, #0x93d                 	// #2365
   4ae74:	mov	w0, #0x939                 	// #2361
   4ae78:	csel	w1, w0, w1, eq  // eq = none
   4ae7c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ae80:	tbnz	w0, #23, 4bb1c <aarch64_opcode_lookup@@Base+0x55cc>
   4ae84:	ubfx	x0, x0, #30, #1
   4ae88:	add	w1, w0, #0xb2
   4ae8c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ae90:	mov	w1, #0x66b                 	// #1643
   4ae94:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ae98:	mov	w1, #0x95                  	// #149
   4ae9c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4aea0:	tst	x0, #0x1000
   4aea4:	mov	w1, #0x848                 	// #2120
   4aea8:	mov	w0, #0x8b5                 	// #2229
   4aeac:	csel	w1, w0, w1, eq  // eq = none
   4aeb0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4aeb4:	mov	w1, #0x74e                 	// #1870
   4aeb8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4aebc:	mov	w1, #0x14f                 	// #335
   4aec0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4aec4:	tbnz	w0, #23, 4bac8 <aarch64_opcode_lookup@@Base+0x5578>
   4aec8:	tbnz	w0, #31, 4bac0 <aarch64_opcode_lookup@@Base+0x5570>
   4aecc:	tst	x0, #0x40000000
   4aed0:	mov	w1, #0x414                 	// #1044
   4aed4:	mov	w0, #0x411                 	// #1041
   4aed8:	csel	w1, w0, w1, eq  // eq = none
   4aedc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4aee0:	tbnz	w0, #29, 4ba98 <aarch64_opcode_lookup@@Base+0x5548>
   4aee4:	tst	x0, #0x40000000
   4aee8:	mov	w1, #0x93b                 	// #2363
   4aeec:	mov	w0, #0x937                 	// #2359
   4aef0:	csel	w1, w0, w1, eq  // eq = none
   4aef4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4aef8:	mov	w1, #0x626                 	// #1574
   4aefc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4af00:	mov	w1, #0x826                 	// #2086
   4af04:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4af08:	mov	w1, #0x14a                 	// #330
   4af0c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4af10:	mov	w1, #0x22b                 	// #555
   4af14:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4af18:	tst	x0, #0x800000
   4af1c:	mov	w1, #0x171                 	// #369
   4af20:	mov	w0, #0x165                 	// #357
   4af24:	csel	w1, w0, w1, eq  // eq = none
   4af28:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4af2c:	mov	w1, #0x763                 	// #1891
   4af30:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4af34:	mov	w1, #0x5fd                 	// #1533
   4af38:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4af3c:	mov	w1, #0x8e6                 	// #2278
   4af40:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4af44:	tst	x0, #0x1000
   4af48:	mov	w1, #0x8cb                 	// #2251
   4af4c:	mov	w0, #0x901                 	// #2305
   4af50:	csel	w1, w0, w1, eq  // eq = none
   4af54:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4af58:	tst	x0, #0x40000000
   4af5c:	mov	w1, #0x4b                  	// #75
   4af60:	mov	w0, #0x49                  	// #73
   4af64:	csel	w1, w0, w1, eq  // eq = none
   4af68:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4af6c:	tst	x0, #0x20000000
   4af70:	mov	w1, #0x20e                 	// #526
   4af74:	mov	w0, #0x1f0                 	// #496
   4af78:	csel	w1, w0, w1, eq  // eq = none
   4af7c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4af80:	tbnz	w0, #19, 4b5e8 <aarch64_opcode_lookup@@Base+0x5098>
   4af84:	tst	x0, #0x20000000
   4af88:	mov	w1, #0x209                 	// #521
   4af8c:	mov	w0, #0x1eb                 	// #491
   4af90:	csel	w1, w0, w1, eq  // eq = none
   4af94:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4af98:	ubfx	x0, x0, #30, #1
   4af9c:	add	w1, w0, #0x34
   4afa0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4afa4:	tbz	w0, #18, 4bb58 <aarch64_opcode_lookup@@Base+0x5608>
   4afa8:	tst	x0, #0x80000
   4afac:	mov	w1, #0x31c                 	// #796
   4afb0:	mov	w0, #0x30d                 	// #781
   4afb4:	csel	w1, w0, w1, eq  // eq = none
   4afb8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4afbc:	tst	x0, #0x20000000
   4afc0:	mov	w1, #0xfa                  	// #250
   4afc4:	mov	w0, #0xc9                  	// #201
   4afc8:	csel	w1, w0, w1, eq  // eq = none
   4afcc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4afd0:	tbnz	w0, #19, 4bb68 <aarch64_opcode_lookup@@Base+0x5618>
   4afd4:	tbnz	w0, #23, 4bb60 <aarch64_opcode_lookup@@Base+0x5610>
   4afd8:	ubfx	x0, x0, #29, #1
   4afdc:	add	w1, w0, #0xa0
   4afe0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4afe4:	mov	w1, #0x898                 	// #2200
   4afe8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4afec:	mov	w1, #0x238                 	// #568
   4aff0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4aff4:	mov	w1, #0x76d                 	// #1901
   4aff8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4affc:	mov	w1, #0x690                 	// #1680
   4b000:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b004:	mov	w1, #0x6a2                 	// #1698
   4b008:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b00c:	mov	w1, #0x3a1                 	// #929
   4b010:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b014:	mov	w1, #0x396                 	// #918
   4b018:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b01c:	tbnz	w0, #19, 4b06c <aarch64_opcode_lookup@@Base+0x4b1c>
   4b020:	tbnz	w0, #23, 4bcd8 <aarch64_opcode_lookup@@Base+0x5788>
   4b024:	tst	x0, #0x20000000
   4b028:	mov	w1, #0xe8                  	// #232
   4b02c:	mov	w0, #0xb8                  	// #184
   4b030:	csel	w1, w0, w1, eq  // eq = none
   4b034:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b038:	tbnz	w0, #18, 4bcd0 <aarch64_opcode_lookup@@Base+0x5780>
   4b03c:	tst	x0, #0x100000
   4b040:	mov	w1, #0x5a9                 	// #1449
   4b044:	mov	w0, #0x5ad                 	// #1453
   4b048:	csel	w1, w0, w1, eq  // eq = none
   4b04c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b050:	tbnz	w0, #17, 4b084 <aarch64_opcode_lookup@@Base+0x4b34>
   4b054:	tbnz	w0, #18, 4bb8c <aarch64_opcode_lookup@@Base+0x563c>
   4b058:	tst	x0, #0x100000
   4b05c:	mov	w1, #0x5c3                 	// #1475
   4b060:	mov	w0, #0x5bf                 	// #1471
   4b064:	csel	w1, w0, w1, eq  // eq = none
   4b068:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b06c:	tbnz	w0, #23, 4bba0 <aarch64_opcode_lookup@@Base+0x5650>
   4b070:	tst	x0, #0x20000000
   4b074:	mov	w1, #0xe9                  	// #233
   4b078:	mov	w0, #0xb9                  	// #185
   4b07c:	csel	w1, w0, w1, eq  // eq = none
   4b080:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b084:	tst	x0, #0x40000
   4b088:	mov	w1, #0x599                 	// #1433
   4b08c:	mov	w0, #0x5c5                 	// #1477
   4b090:	csel	w1, w0, w1, eq  // eq = none
   4b094:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b098:	tbnz	w0, #12, 4bcec <aarch64_opcode_lookup@@Base+0x579c>
   4b09c:	tst	x0, #0x400000
   4b0a0:	mov	w1, #0x841                 	// #2113
   4b0a4:	mov	w0, #0x91c                 	// #2332
   4b0a8:	csel	w1, w0, w1, eq  // eq = none
   4b0ac:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b0b0:	mov	w1, #0x922                 	// #2338
   4b0b4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b0b8:	mov	w1, #0x226                 	// #550
   4b0bc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b0c0:	mov	w1, #0x1ff                 	// #511
   4b0c4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b0c8:	mov	w1, #0x5f8                 	// #1528
   4b0cc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b0d0:	mov	w1, #0x6fb                 	// #1787
   4b0d4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b0d8:	tst	x0, #0x20000000
   4b0dc:	mov	w1, #0xf8                  	// #248
   4b0e0:	mov	w0, #0xc5                  	// #197
   4b0e4:	csel	w1, w0, w1, eq  // eq = none
   4b0e8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b0ec:	tbnz	w0, #19, 4b4b4 <aarch64_opcode_lookup@@Base+0x4f64>
   4b0f0:	tbnz	w0, #23, 4be9c <aarch64_opcode_lookup@@Base+0x594c>
   4b0f4:	tst	x0, #0x20000000
   4b0f8:	mov	w1, #0xf0                  	// #240
   4b0fc:	mov	w0, #0xc0                  	// #192
   4b100:	csel	w1, w0, w1, eq  // eq = none
   4b104:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b108:	mov	w1, #0x1fe                 	// #510
   4b10c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b110:	tst	x0, #0x10
   4b114:	mov	w1, #0x6d2                 	// #1746
   4b118:	mov	w0, #0x6d5                 	// #1749
   4b11c:	csel	w1, w0, w1, eq  // eq = none
   4b120:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b124:	mov	w1, #0x508                 	// #1288
   4b128:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b12c:	tbnz	w0, #18, 4b8e8 <aarch64_opcode_lookup@@Base+0x5398>
   4b130:	tst	x0, #0x100000
   4b134:	mov	w1, #0x710                 	// #1808
   4b138:	mov	w0, #0x5b8                 	// #1464
   4b13c:	csel	w1, w0, w1, eq  // eq = none
   4b140:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b144:	mov	w1, #0x55f                 	// #1375
   4b148:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b14c:	mov	w1, #0x779                 	// #1913
   4b150:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b154:	mov	w1, #0x775                 	// #1909
   4b158:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b15c:	mov	w1, #0x564                 	// #1380
   4b160:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b164:	mov	w1, #0x239                 	// #569
   4b168:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b16c:	tbz	w0, #20, 4b98c <aarch64_opcode_lookup@@Base+0x543c>
   4b170:	tst	x0, #0x40000000
   4b174:	mov	w1, #0x8ed                 	// #2285
   4b178:	mov	w0, #0x6c7                 	// #1735
   4b17c:	csel	w1, w0, w1, eq  // eq = none
   4b180:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b184:	tbnz	w0, #19, 4b1a4 <aarch64_opcode_lookup@@Base+0x4c54>
   4b188:	tst	x0, #0x40000000
   4b18c:	mov	w1, #0x8fc                 	// #2300
   4b190:	mov	w0, #0x6c9                 	// #1737
   4b194:	csel	w1, w0, w1, eq  // eq = none
   4b198:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b19c:	mov	w1, #0x8fa                 	// #2298
   4b1a0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b1a4:	tbnz	w0, #20, 4b950 <aarch64_opcode_lookup@@Base+0x5400>
   4b1a8:	tst	x0, #0x40000000
   4b1ac:	mov	w1, #0x8f4                 	// #2292
   4b1b0:	mov	w0, #0x8ff                 	// #2303
   4b1b4:	csel	w1, w0, w1, eq  // eq = none
   4b1b8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b1bc:	mov	w1, #0x5c1                 	// #1473
   4b1c0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b1c4:	mov	w1, #0x5fe                 	// #1534
   4b1c8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b1cc:	tst	x0, #0x1000
   4b1d0:	mov	w1, #0x89a                 	// #2202
   4b1d4:	mov	w0, #0x88a                 	// #2186
   4b1d8:	csel	w1, w0, w1, eq  // eq = none
   4b1dc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b1e0:	tst	x0, #0x1000
   4b1e4:	mov	w1, #0x899                 	// #2201
   4b1e8:	mov	w0, #0x889                 	// #2185
   4b1ec:	csel	w1, w0, w1, eq  // eq = none
   4b1f0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b1f4:	mov	w1, #0x5e8                 	// #1512
   4b1f8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b1fc:	tbnz	w0, #23, 4b230 <aarch64_opcode_lookup@@Base+0x4ce0>
   4b200:	tbnz	w0, #31, 4b9c8 <aarch64_opcode_lookup@@Base+0x5478>
   4b204:	tst	x0, #0x40000000
   4b208:	mov	w1, #0x438                 	// #1080
   4b20c:	mov	w0, #0x435                 	// #1077
   4b210:	csel	w1, w0, w1, eq  // eq = none
   4b214:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b218:	tbnz	w0, #31, 4b9d0 <aarch64_opcode_lookup@@Base+0x5480>
   4b21c:	tst	x0, #0x40000000
   4b220:	mov	w1, #0x437                 	// #1079
   4b224:	mov	w0, #0x434                 	// #1076
   4b228:	csel	w1, w0, w1, eq  // eq = none
   4b22c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b230:	tbnz	w0, #31, 4bed4 <aarch64_opcode_lookup@@Base+0x5984>
   4b234:	tst	x0, #0x40000000
   4b238:	mov	w1, #0x439                 	// #1081
   4b23c:	mov	w0, #0x436                 	// #1078
   4b240:	csel	w1, w0, w1, eq  // eq = none
   4b244:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b248:	tst	x0, #0x40000
   4b24c:	mov	w1, #0x592                 	// #1426
   4b250:	mov	w0, #0x5a8                 	// #1448
   4b254:	csel	w1, w0, w1, eq  // eq = none
   4b258:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b25c:	tbz	w0, #20, 4bee4 <aarch64_opcode_lookup@@Base+0x5994>
   4b260:	tst	x0, #0x40000000
   4b264:	mov	w1, #0x872                 	// #2162
   4b268:	mov	w0, #0x50b                 	// #1291
   4b26c:	csel	w1, w0, w1, eq  // eq = none
   4b270:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b274:	tbnz	w0, #19, 4b2c4 <aarch64_opcode_lookup@@Base+0x4d74>
   4b278:	tbz	w0, #20, 4b9d8 <aarch64_opcode_lookup@@Base+0x5488>
   4b27c:	tst	x0, #0x40000000
   4b280:	mov	w1, #0x8b0                 	// #2224
   4b284:	mov	w0, #0x50e                 	// #1294
   4b288:	csel	w1, w0, w1, eq  // eq = none
   4b28c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b290:	mov	w1, #0x639                 	// #1593
   4b294:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b298:	tst	x0, #0x800000
   4b29c:	mov	w1, #0x6aa                 	// #1706
   4b2a0:	mov	w0, #0x6a6                 	// #1702
   4b2a4:	csel	w1, w0, w1, eq  // eq = none
   4b2a8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b2ac:	tbnz	w0, #31, 4b9e0 <aarch64_opcode_lookup@@Base+0x5490>
   4b2b0:	tst	x0, #0x40000000
   4b2b4:	mov	w1, #0x469                 	// #1129
   4b2b8:	mov	w0, #0x466                 	// #1126
   4b2bc:	csel	w1, w0, w1, eq  // eq = none
   4b2c0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b2c4:	tbnz	w0, #20, 4bf14 <aarch64_opcode_lookup@@Base+0x59c4>
   4b2c8:	tst	x0, #0x40000000
   4b2cc:	mov	w1, #0x8a4                 	// #2212
   4b2d0:	mov	w0, #0x8b4                 	// #2228
   4b2d4:	csel	w1, w0, w1, eq  // eq = none
   4b2d8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b2dc:	tst	x0, #0x800000
   4b2e0:	mov	w1, #0x13f                 	// #319
   4b2e4:	mov	w0, #0x132                 	// #306
   4b2e8:	csel	w1, w0, w1, eq  // eq = none
   4b2ec:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b2f0:	tst	x0, #0x100000
   4b2f4:	mov	w1, #0x510                 	// #1296
   4b2f8:	mov	w0, #0x7b8                 	// #1976
   4b2fc:	csel	w1, w0, w1, eq  // eq = none
   4b300:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b304:	mov	w1, #0x1fd                 	// #509
   4b308:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b30c:	tbnz	w0, #17, 4bef4 <aarch64_opcode_lookup@@Base+0x59a4>
   4b310:	tst	x0, #0x40000
   4b314:	mov	w1, #0x552                 	// #1362
   4b318:	mov	w0, #0x7d4                 	// #2004
   4b31c:	csel	w1, w0, w1, eq  // eq = none
   4b320:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b324:	tst	x0, #0x20000
   4b328:	mov	w1, #0x7c7                 	// #1991
   4b32c:	mov	w0, #0x7d5                 	// #2005
   4b330:	csel	w1, w0, w1, eq  // eq = none
   4b334:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b338:	tst	x0, #0x100000
   4b33c:	mov	w1, #0x8d8                 	// #2264
   4b340:	mov	w0, #0x8d0                 	// #2256
   4b344:	csel	w1, w0, w1, eq  // eq = none
   4b348:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b34c:	mov	w1, #0x8d9                 	// #2265
   4b350:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b354:	tst	x0, #0x800000
   4b358:	mov	w1, #0x72d                 	// #1837
   4b35c:	mov	w0, #0x730                 	// #1840
   4b360:	csel	w1, w0, w1, eq  // eq = none
   4b364:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b368:	tbnz	w0, #22, 4b3b0 <aarch64_opcode_lookup@@Base+0x4e60>
   4b36c:	tst	x0, #0x800000
   4b370:	mov	w1, #0x735                 	// #1845
   4b374:	mov	w0, #0x729                 	// #1833
   4b378:	csel	w1, w0, w1, eq  // eq = none
   4b37c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b380:	mov	w1, #0x63c                 	// #1596
   4b384:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b388:	tbnz	w0, #11, 4be84 <aarch64_opcode_lookup@@Base+0x5934>
   4b38c:	tst	x0, #0x1000
   4b390:	mov	w1, #0x71e                 	// #1822
   4b394:	mov	w0, #0x5ce                 	// #1486
   4b398:	csel	w1, w0, w1, eq  // eq = none
   4b39c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b3a0:	mov	w1, #0x2d9                 	// #729
   4b3a4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b3a8:	mov	w1, #0x38c                 	// #908
   4b3ac:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b3b0:	tst	x0, #0x800000
   4b3b4:	mov	w1, #0x72c                 	// #1836
   4b3b8:	mov	w0, #0x72f                 	// #1839
   4b3bc:	csel	w1, w0, w1, eq  // eq = none
   4b3c0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b3c4:	mov	w1, #0x5f6                 	// #1526
   4b3c8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b3cc:	mov	w1, #0x684                 	// #1668
   4b3d0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b3d4:	mov	w1, #0x903                 	// #2307
   4b3d8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b3dc:	tst	x0, #0x80000
   4b3e0:	mov	w1, #0x870                 	// #2160
   4b3e4:	mov	w0, #0x70c                 	// #1804
   4b3e8:	csel	w1, w0, w1, eq  // eq = none
   4b3ec:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b3f0:	tbnz	w0, #18, 4bbbc <aarch64_opcode_lookup@@Base+0x566c>
   4b3f4:	tst	x0, #0x80000
   4b3f8:	mov	w1, #0x521                 	// #1313
   4b3fc:	mov	w0, #0x5db                 	// #1499
   4b400:	csel	w1, w0, w1, eq  // eq = none
   4b404:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b408:	tbnz	w0, #19, 4b4fc <aarch64_opcode_lookup@@Base+0x4fac>
   4b40c:	tbnz	w0, #20, 4bf64 <aarch64_opcode_lookup@@Base+0x5a14>
   4b410:	tbnz	w0, #23, 4bf50 <aarch64_opcode_lookup@@Base+0x5a00>
   4b414:	tst	x0, #0x20000000
   4b418:	mov	w1, #0xec                  	// #236
   4b41c:	mov	w0, #0xbc                  	// #188
   4b420:	csel	w1, w0, w1, eq  // eq = none
   4b424:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b428:	tst	x0, #0x800000
   4b42c:	mov	w1, #0x50f                 	// #1295
   4b430:	mov	w0, #0x6da                 	// #1754
   4b434:	csel	w1, w0, w1, eq  // eq = none
   4b438:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b43c:	mov	w1, #0x234                 	// #564
   4b440:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b444:	ubfx	x0, x0, #30, #1
   4b448:	add	w1, w0, #0x36
   4b44c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b450:	tbnz	w0, #19, 4b47c <aarch64_opcode_lookup@@Base+0x4f2c>
   4b454:	tbnz	w0, #20, 4bc1c <aarch64_opcode_lookup@@Base+0x56cc>
   4b458:	tbnz	w0, #23, 4bbe0 <aarch64_opcode_lookup@@Base+0x5690>
   4b45c:	tst	x0, #0x20000000
   4b460:	mov	w1, #0x207                 	// #519
   4b464:	mov	w0, #0x1e9                 	// #489
   4b468:	csel	w1, w0, w1, eq  // eq = none
   4b46c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b470:	ubfx	x0, x0, #30, #1
   4b474:	add	w1, w0, #0x3a
   4b478:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b47c:	tbnz	w0, #23, 4bbf4 <aarch64_opcode_lookup@@Base+0x56a4>
   4b480:	tst	x0, #0x20000000
   4b484:	mov	w1, #0x208                 	// #520
   4b488:	mov	w0, #0x1ea                 	// #490
   4b48c:	csel	w1, w0, w1, eq  // eq = none
   4b490:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b494:	tbnz	w0, #23, 4be30 <aarch64_opcode_lookup@@Base+0x58e0>
   4b498:	tst	x0, #0x20000000
   4b49c:	mov	w1, #0x206                 	// #518
   4b4a0:	mov	w0, #0x1e8                 	// #488
   4b4a4:	csel	w1, w0, w1, eq  // eq = none
   4b4a8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b4ac:	mov	w1, #0x975                 	// #2421
   4b4b0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b4b4:	tbnz	w0, #23, 4bc08 <aarch64_opcode_lookup@@Base+0x56b8>
   4b4b8:	tst	x0, #0x20000000
   4b4bc:	mov	w1, #0xf1                  	// #241
   4b4c0:	mov	w0, #0xc1                  	// #193
   4b4c4:	csel	w1, w0, w1, eq  // eq = none
   4b4c8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b4cc:	mov	w1, #0x1e4                 	// #484
   4b4d0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b4d4:	tst	x0, #0x20000
   4b4d8:	mov	w1, #0x7db                 	// #2011
   4b4dc:	mov	w0, #0x79c                 	// #1948
   4b4e0:	csel	w1, w0, w1, eq  // eq = none
   4b4e4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b4e8:	tst	x0, #0x1000
   4b4ec:	mov	w1, #0x8e5                 	// #2277
   4b4f0:	mov	w0, #0x8df                 	// #2271
   4b4f4:	csel	w1, w0, w1, eq  // eq = none
   4b4f8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b4fc:	tbnz	w0, #23, 4bf2c <aarch64_opcode_lookup@@Base+0x59dc>
   4b500:	tst	x0, #0x20000000
   4b504:	mov	w1, #0xed                  	// #237
   4b508:	mov	w0, #0xbd                  	// #189
   4b50c:	csel	w1, w0, w1, eq  // eq = none
   4b510:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b514:	mov	w1, #0x13b                 	// #315
   4b518:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b51c:	tst	x0, #0x20000000
   4b520:	mov	w1, #0x210                 	// #528
   4b524:	mov	w0, #0x1f2                 	// #498
   4b528:	csel	w1, w0, w1, eq  // eq = none
   4b52c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b530:	mov	w1, #0x351                 	// #849
   4b534:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b538:	mov	w1, #0x95e                 	// #2398
   4b53c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b540:	tbnz	w0, #10, 4be54 <aarch64_opcode_lookup@@Base+0x5904>
   4b544:	tst	x0, #0x800
   4b548:	mov	w1, #0x733                 	// #1843
   4b54c:	mov	w0, #0x731                 	// #1841
   4b550:	csel	w1, w0, w1, eq  // eq = none
   4b554:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b558:	mov	w1, #0x202                 	// #514
   4b55c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b560:	tbz	w0, #22, 4bf74 <aarch64_opcode_lookup@@Base+0x5a24>
   4b564:	tst	x0, #0x800000
   4b568:	mov	w1, #0x5ca                 	// #1482
   4b56c:	mov	w0, #0x5cc                 	// #1484
   4b570:	csel	w1, w0, w1, eq  // eq = none
   4b574:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b578:	tbnz	w0, #31, 4bf48 <aarch64_opcode_lookup@@Base+0x59f8>
   4b57c:	tst	x0, #0x40000000
   4b580:	mov	w1, #0x42d                 	// #1069
   4b584:	mov	w0, #0x42a                 	// #1066
   4b588:	csel	w1, w0, w1, eq  // eq = none
   4b58c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b590:	tst	x0, #0x1000
   4b594:	mov	w1, #0x847                 	// #2119
   4b598:	mov	w0, #0x843                 	// #2115
   4b59c:	csel	w1, w0, w1, eq  // eq = none
   4b5a0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b5a4:	mov	w1, #0x122                 	// #290
   4b5a8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b5ac:	tst	x0, #0x800000
   4b5b0:	mov	w1, #0x5fc                 	// #1532
   4b5b4:	mov	w0, #0x5e7                 	// #1511
   4b5b8:	csel	w1, w0, w1, eq  // eq = none
   4b5bc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b5c0:	ubfx	x0, x0, #30, #1
   4b5c4:	add	w1, w0, #0x38
   4b5c8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b5cc:	tst	x0, #0x800000
   4b5d0:	mov	w1, #0x6ab                 	// #1707
   4b5d4:	mov	w0, #0x6a7                 	// #1703
   4b5d8:	csel	w1, w0, w1, eq  // eq = none
   4b5dc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b5e0:	mov	w1, #0x811                 	// #2065
   4b5e4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b5e8:	tst	x0, #0x20000000
   4b5ec:	mov	w1, #0x20a                 	// #522
   4b5f0:	mov	w0, #0x1ec                 	// #492
   4b5f4:	csel	w1, w0, w1, eq  // eq = none
   4b5f8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b5fc:	tst	x0, #0x80000
   4b600:	mov	w1, #0x5ae                 	// #1454
   4b604:	mov	w0, #0x7df                 	// #2015
   4b608:	csel	w1, w0, w1, eq  // eq = none
   4b60c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b610:	tbnz	w0, #18, 4be6c <aarch64_opcode_lookup@@Base+0x591c>
   4b614:	tst	x0, #0x80000
   4b618:	mov	w1, #0x53f                 	// #1343
   4b61c:	mov	w0, #0x7de                 	// #2014
   4b620:	csel	w1, w0, w1, eq  // eq = none
   4b624:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b628:	tbz	w0, #12, 4bd20 <aarch64_opcode_lookup@@Base+0x57d0>
   4b62c:	tst	x0, #0x800000
   4b630:	mov	w1, #0x854                 	// #2132
   4b634:	mov	w0, #0x7ff                 	// #2047
   4b638:	csel	w1, w0, w1, eq  // eq = none
   4b63c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b640:	mov	w1, #0x512                 	// #1298
   4b644:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b648:	mov	w1, #0x869                 	// #2153
   4b64c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b650:	tbnz	w0, #22, 4b7f4 <aarch64_opcode_lookup@@Base+0x52a4>
   4b654:	tbnz	w0, #23, 4bdc8 <aarch64_opcode_lookup@@Base+0x5878>
   4b658:	tbnz	w0, #31, 4bdc0 <aarch64_opcode_lookup@@Base+0x5870>
   4b65c:	ubfx	x0, x0, #30, #1
   4b660:	add	w1, w0, #0x401
   4b664:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b668:	mov	w1, #0x97c                 	// #2428
   4b66c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b670:	tbz	w0, #18, 4b930 <aarch64_opcode_lookup@@Base+0x53e0>
   4b674:	tst	x0, #0x80000
   4b678:	mov	w1, #0x5b3                 	// #1459
   4b67c:	mov	w0, #0x597                 	// #1431
   4b680:	csel	w1, w0, w1, eq  // eq = none
   4b684:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b688:	ubfx	x0, x0, #30, #1
   4b68c:	add	w1, w0, #0xb0
   4b690:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b694:	tbnz	w0, #19, 4bd50 <aarch64_opcode_lookup@@Base+0x5800>
   4b698:	tbz	w0, #22, 4bd48 <aarch64_opcode_lookup@@Base+0x57f8>
   4b69c:	tst	x0, #0x800000
   4b6a0:	mov	w1, #0x7ad                 	// #1965
   4b6a4:	mov	w0, #0x7a9                 	// #1961
   4b6a8:	csel	w1, w0, w1, eq  // eq = none
   4b6ac:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b6b0:	tbnz	w0, #18, 4b6e8 <aarch64_opcode_lookup@@Base+0x5198>
   4b6b4:	tbnz	w0, #19, 4bc54 <aarch64_opcode_lookup@@Base+0x5704>
   4b6b8:	tst	x0, #0x100000
   4b6bc:	mov	w1, #0x7a8                 	// #1960
   4b6c0:	mov	w0, #0x5bc                 	// #1468
   4b6c4:	csel	w1, w0, w1, eq  // eq = none
   4b6c8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b6cc:	ubfx	x0, x0, #12, #1
   4b6d0:	add	w1, w0, #0x90e
   4b6d4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b6d8:	tbnz	w0, #11, 4b704 <aarch64_opcode_lookup@@Base+0x51b4>
   4b6dc:	ubfx	x0, x0, #12, #1
   4b6e0:	add	w1, w0, #0x7e4
   4b6e4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b6e8:	tbnz	w0, #19, 4bd74 <aarch64_opcode_lookup@@Base+0x5824>
   4b6ec:	tbz	w0, #20, 4bd6c <aarch64_opcode_lookup@@Base+0x581c>
   4b6f0:	tst	x0, #0x800000
   4b6f4:	mov	w1, #0x7ae                 	// #1966
   4b6f8:	mov	w0, #0x7ac                 	// #1964
   4b6fc:	csel	w1, w0, w1, eq  // eq = none
   4b700:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b704:	ubfx	x0, x0, #12, #1
   4b708:	add	w1, w0, #0x7e8
   4b70c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b710:	tbz	w0, #18, 4bc78 <aarch64_opcode_lookup@@Base+0x5728>
   4b714:	tbz	w0, #19, 4bc70 <aarch64_opcode_lookup@@Base+0x5720>
   4b718:	tst	x0, #0x100000
   4b71c:	mov	w1, #0x31d                 	// #797
   4b720:	mov	w0, #0x31b                 	// #795
   4b724:	csel	w1, w0, w1, eq  // eq = none
   4b728:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b72c:	mov	w1, #0x338                 	// #824
   4b730:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b734:	tst	x0, #0x200
   4b738:	mov	w1, #0x6d3                 	// #1747
   4b73c:	mov	w0, #0x6d9                 	// #1753
   4b740:	csel	w1, w0, w1, eq  // eq = none
   4b744:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b748:	mov	w1, #0x745                 	// #1861
   4b74c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b750:	mov	w1, #0x509                 	// #1289
   4b754:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b758:	tbnz	w0, #31, 4bd30 <aarch64_opcode_lookup@@Base+0x57e0>
   4b75c:	tst	x0, #0x40000000
   4b760:	mov	w1, #0x45d                 	// #1117
   4b764:	mov	w0, #0x45a                 	// #1114
   4b768:	csel	w1, w0, w1, eq  // eq = none
   4b76c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b770:	tbnz	w0, #31, 4bd28 <aarch64_opcode_lookup@@Base+0x57d8>
   4b774:	tst	x0, #0x40000000
   4b778:	mov	w1, #0x44f                 	// #1103
   4b77c:	mov	w0, #0x44c                 	// #1100
   4b780:	csel	w1, w0, w1, eq  // eq = none
   4b784:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b788:	tbnz	w0, #23, 4bca8 <aarch64_opcode_lookup@@Base+0x5758>
   4b78c:	tbnz	w0, #31, 4bca0 <aarch64_opcode_lookup@@Base+0x5750>
   4b790:	tst	x0, #0x40000000
   4b794:	mov	w1, #0x444                 	// #1092
   4b798:	mov	w0, #0x441                 	// #1089
   4b79c:	csel	w1, w0, w1, eq  // eq = none
   4b7a0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b7a4:	mov	w1, #0x8c4                 	// #2244
   4b7a8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b7ac:	mov	w1, #0x98                  	// #152
   4b7b0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b7b4:	mov	w1, #0x232                 	// #562
   4b7b8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b7bc:	tst	x0, #0x10000
   4b7c0:	mov	w1, #0x873                 	// #2163
   4b7c4:	mov	w0, #0x807                 	// #2055
   4b7c8:	csel	w1, w0, w1, eq  // eq = none
   4b7cc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b7d0:	tst	x0, #0x800000
   4b7d4:	mov	w1, #0x83d                 	// #2109
   4b7d8:	mov	w0, #0x805                 	// #2053
   4b7dc:	csel	w1, w0, w1, eq  // eq = none
   4b7e0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b7e4:	mov	w1, #0x914                 	// #2324
   4b7e8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b7ec:	mov	w1, #0x7b9                 	// #1977
   4b7f0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b7f4:	tbnz	w0, #23, 4be08 <aarch64_opcode_lookup@@Base+0x58b8>
   4b7f8:	tbnz	w0, #31, 4be00 <aarch64_opcode_lookup@@Base+0x58b0>
   4b7fc:	tst	x0, #0x40000000
   4b800:	mov	w1, #0x408                 	// #1032
   4b804:	mov	w0, #0x405                 	// #1029
   4b808:	csel	w1, w0, w1, eq  // eq = none
   4b80c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b810:	tbz	w0, #18, 4bd08 <aarch64_opcode_lookup@@Base+0x57b8>
   4b814:	tst	x0, #0x80000
   4b818:	mov	w1, #0x5bd                 	// #1469
   4b81c:	mov	w0, #0x59d                 	// #1437
   4b820:	csel	w1, w0, w1, eq  // eq = none
   4b824:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b828:	mov	w1, #0x38d                 	// #909
   4b82c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b830:	tbnz	w0, #31, 4b918 <aarch64_opcode_lookup@@Base+0x53c8>
   4b834:	ubfx	x0, x0, #30, #1
   4b838:	add	w1, w0, #0x3be
   4b83c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b840:	mov	w1, #0x96                  	// #150
   4b844:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b848:	tbnz	w0, #23, 4b890 <aarch64_opcode_lookup@@Base+0x5340>
   4b84c:	tbnz	w0, #31, 4bd10 <aarch64_opcode_lookup@@Base+0x57c0>
   4b850:	tst	x0, #0x40000000
   4b854:	mov	w1, #0x450                 	// #1104
   4b858:	mov	w0, #0x44d                 	// #1101
   4b85c:	csel	w1, w0, w1, eq  // eq = none
   4b860:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b864:	tbnz	w0, #16, 4b8b4 <aarch64_opcode_lookup@@Base+0x5364>
   4b868:	tst	x0, #0x80000
   4b86c:	mov	w1, #0x2a2                 	// #674
   4b870:	mov	w0, #0xa9                  	// #169
   4b874:	csel	w1, w0, w1, eq  // eq = none
   4b878:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b87c:	tst	x0, #0x100000
   4b880:	mov	w1, #0x85b                 	// #2139
   4b884:	mov	w0, #0x84d                 	// #2125
   4b888:	csel	w1, w0, w1, eq  // eq = none
   4b88c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b890:	tbnz	w0, #31, 4b920 <aarch64_opcode_lookup@@Base+0x53d0>
   4b894:	tst	x0, #0x40000000
   4b898:	mov	w1, #0x451                 	// #1105
   4b89c:	mov	w0, #0x44e                 	// #1102
   4b8a0:	csel	w1, w0, w1, eq  // eq = none
   4b8a4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b8a8:	ubfx	x0, x0, #22, #1
   4b8ac:	add	w1, w0, #0x895
   4b8b0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b8b4:	ubfx	x0, x0, #30, #1
   4b8b8:	add	w1, w0, #0xb4
   4b8bc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b8c0:	ubfx	x0, x0, #30, #1
   4b8c4:	add	w1, w0, #0x58
   4b8c8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b8cc:	ubfx	x0, x0, #30, #1
   4b8d0:	add	w1, w0, #0x5e
   4b8d4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b8d8:	tbnz	w0, #12, 4b908 <aarch64_opcode_lookup@@Base+0x53b8>
   4b8dc:	ubfx	x0, x0, #22, #1
   4b8e0:	add	w1, w0, #0x837
   4b8e4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b8e8:	tbz	w0, #20, 4b910 <aarch64_opcode_lookup@@Base+0x53c0>
   4b8ec:	tst	x0, #0x800000
   4b8f0:	mov	w1, #0x716                 	// #1814
   4b8f4:	mov	w0, #0x714                 	// #1812
   4b8f8:	csel	w1, w0, w1, eq  // eq = none
   4b8fc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b900:	mov	w1, #0x762                 	// #1890
   4b904:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b908:	mov	w1, #0x95c                 	// #2396
   4b90c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b910:	mov	w1, #0x5bb                 	// #1467
   4b914:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b918:	mov	w1, #0x3c0                 	// #960
   4b91c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b920:	mov	w1, #0x454                 	// #1108
   4b924:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b928:	mov	w1, #0xa2                  	// #162
   4b92c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b930:	mov	w1, #0x56d                 	// #1389
   4b934:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b938:	mov	w1, #0x677                 	// #1655
   4b93c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b940:	mov	w1, #0x886                 	// #2182
   4b944:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b948:	mov	w1, #0x679                 	// #1657
   4b94c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b950:	mov	w1, #0x904                 	// #2308
   4b954:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b958:	tbz	w0, #20, 4b984 <aarch64_opcode_lookup@@Base+0x5434>
   4b95c:	tbz	w0, #22, 4b97c <aarch64_opcode_lookup@@Base+0x542c>
   4b960:	tst	x0, #0x800000
   4b964:	mov	w1, #0x715                 	// #1813
   4b968:	mov	w0, #0x711                 	// #1809
   4b96c:	csel	w1, w0, w1, eq  // eq = none
   4b970:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b974:	mov	w1, #0x6c8                 	// #1736
   4b978:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b97c:	mov	w1, #0x712                 	// #1810
   4b980:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b984:	mov	w1, #0x5b6                 	// #1462
   4b988:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b98c:	mov	w1, #0x8f3                 	// #2291
   4b990:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b994:	mov	w1, #0x887                 	// #2183
   4b998:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b99c:	tst	x0, #0x20000000
   4b9a0:	mov	w1, #0xf6                  	// #246
   4b9a4:	mov	w0, #0xc3                  	// #195
   4b9a8:	csel	w1, w0, w1, eq  // eq = none
   4b9ac:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b9b0:	mov	w1, #0x4fd                 	// #1277
   4b9b4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b9b8:	mov	w1, #0x156                 	// #342
   4b9bc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b9c0:	mov	w1, #0x463                 	// #1123
   4b9c4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b9c8:	mov	w1, #0x43b                 	// #1083
   4b9cc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b9d0:	mov	w1, #0x43a                 	// #1082
   4b9d4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b9d8:	mov	w1, #0x50d                 	// #1293
   4b9dc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b9e0:	mov	w1, #0x46c                 	// #1132
   4b9e4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b9e8:	mov	w1, #0x46b                 	// #1131
   4b9ec:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b9f0:	mov	w1, #0x7b0                 	// #1968
   4b9f4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4b9f8:	mov	w1, #0x702                 	// #1794
   4b9fc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ba00:	mov	w1, #0x7ed                 	// #2029
   4ba04:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ba08:	mov	w1, #0x725                 	// #1829
   4ba0c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ba10:	mov	w1, #0x718                 	// #1816
   4ba14:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ba18:	tst	x0, #0x100000
   4ba1c:	mov	w1, #0x319                 	// #793
   4ba20:	mov	w0, #0x311                 	// #785
   4ba24:	csel	w1, w0, w1, eq  // eq = none
   4ba28:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ba2c:	mov	w1, #0x799                 	// #1945
   4ba30:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ba34:	mov	w1, #0x116                 	// #278
   4ba38:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ba3c:	mov	w1, #0x6ce                 	// #1742
   4ba40:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ba44:	mov	w1, #0x339                 	// #825
   4ba48:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ba4c:	mov	w1, #0x33d                 	// #829
   4ba50:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ba54:	mov	w1, #0xaa                  	// #170
   4ba58:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ba5c:	mov	w1, #0x928                 	// #2344
   4ba60:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ba64:	mov	w1, #0x813                 	// #2067
   4ba68:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ba6c:	mov	w1, #0x75c                 	// #1884
   4ba70:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ba74:	mov	w1, #0x15e                 	// #350
   4ba78:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ba7c:	mov	w1, #0xa3                  	// #163
   4ba80:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ba84:	tbnz	w0, #23, 4baa0 <aarch64_opcode_lookup@@Base+0x5550>
   4ba88:	tst	x0, #0x20000000
   4ba8c:	cset	w0, eq  // eq = none
   4ba90:	add	w1, w0, #0x21a
   4ba94:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4ba98:	mov	w1, #0x16c                 	// #364
   4ba9c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4baa0:	tst	x0, #0x20000000
   4baa4:	cset	w0, eq  // eq = none
   4baa8:	add	w1, w0, #0x220
   4baac:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bab0:	mov	w1, #0xa4                  	// #164
   4bab4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bab8:	mov	w1, #0x95b                 	// #2395
   4babc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bac0:	mov	w1, #0x417                 	// #1047
   4bac4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bac8:	tbnz	w0, #31, 4bb40 <aarch64_opcode_lookup@@Base+0x55f0>
   4bacc:	tst	x0, #0x40000000
   4bad0:	mov	w1, #0x415                 	// #1045
   4bad4:	mov	w0, #0x412                 	// #1042
   4bad8:	csel	w1, w0, w1, eq  // eq = none
   4badc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bae0:	tst	x0, #0x100000
   4bae4:	mov	w1, #0x6dc                 	// #1756
   4bae8:	mov	w0, #0x720                 	// #1824
   4baec:	csel	w1, w0, w1, eq  // eq = none
   4baf0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4baf4:	mov	w1, #0x915                 	// #2325
   4baf8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bafc:	mov	w1, #0x916                 	// #2326
   4bb00:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bb04:	mov	w1, #0x125                 	// #293
   4bb08:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bb0c:	mov	w1, #0x135                 	// #309
   4bb10:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bb14:	mov	w1, #0x40f                 	// #1039
   4bb18:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bb1c:	ubfx	x0, x0, #30, #1
   4bb20:	add	w1, w0, #0x97f
   4bb24:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bb28:	tbnz	w0, #31, 4bb48 <aarch64_opcode_lookup@@Base+0x55f8>
   4bb2c:	tst	x0, #0x40000000
   4bb30:	mov	w1, #0x413                 	// #1043
   4bb34:	mov	w0, #0x410                 	// #1040
   4bb38:	csel	w1, w0, w1, eq  // eq = none
   4bb3c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bb40:	mov	w1, #0x418                 	// #1048
   4bb44:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bb48:	mov	w1, #0x416                 	// #1046
   4bb4c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bb50:	mov	w1, #0x309                 	// #777
   4bb54:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bb58:	mov	w1, #0x305                 	// #773
   4bb5c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bb60:	mov	w1, #0x104                 	// #260
   4bb64:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bb68:	mov	w1, #0x105                 	// #261
   4bb6c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bb70:	mov	w1, #0x734                 	// #1844
   4bb74:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bb78:	tst	x0, #0x100000
   4bb7c:	mov	w1, #0x595                 	// #1429
   4bb80:	mov	w0, #0x58e                 	// #1422
   4bb84:	csel	w1, w0, w1, eq  // eq = none
   4bb88:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bb8c:	tst	x0, #0x100000
   4bb90:	mov	w1, #0x59b                 	// #1435
   4bb94:	mov	w0, #0x58d                 	// #1421
   4bb98:	csel	w1, w0, w1, eq  // eq = none
   4bb9c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bba0:	tst	x0, #0x20000000
   4bba4:	mov	w1, #0xfc                  	// #252
   4bba8:	mov	w0, #0xcd                  	// #205
   4bbac:	csel	w1, w0, w1, eq  // eq = none
   4bbb0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bbb4:	mov	w1, #0x88c                 	// #2188
   4bbb8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bbbc:	mov	w1, #0x704                 	// #1796
   4bbc0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bbc4:	mov	w1, #0x70a                 	// #1802
   4bbc8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bbcc:	tbnz	w0, #23, 4bc24 <aarch64_opcode_lookup@@Base+0x56d4>
   4bbd0:	tst	x0, #0x20000000
   4bbd4:	cset	w0, eq  // eq = none
   4bbd8:	add	w1, w0, #0x26
   4bbdc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bbe0:	tst	x0, #0x20000000
   4bbe4:	mov	w1, #0x213                 	// #531
   4bbe8:	mov	w0, #0x1f7                 	// #503
   4bbec:	csel	w1, w0, w1, eq  // eq = none
   4bbf0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bbf4:	tst	x0, #0x20000000
   4bbf8:	mov	w1, #0x214                 	// #532
   4bbfc:	mov	w0, #0x1f8                 	// #504
   4bc00:	csel	w1, w0, w1, eq  // eq = none
   4bc04:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bc08:	tst	x0, #0x20000000
   4bc0c:	mov	w1, #0x103                 	// #259
   4bc10:	mov	w0, #0xd4                  	// #212
   4bc14:	csel	w1, w0, w1, eq  // eq = none
   4bc18:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bc1c:	mov	w1, #0x219                 	// #537
   4bc20:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bc24:	tst	x0, #0x20000000
   4bc28:	cset	w0, eq  // eq = none
   4bc2c:	add	w1, w0, #0x2a
   4bc30:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bc34:	mov	w1, #0x33f                 	// #831
   4bc38:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bc3c:	mov	w1, #0x596                 	// #1430
   4bc40:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bc44:	mov	w1, #0x568                 	// #1384
   4bc48:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bc4c:	mov	w1, #0x567                 	// #1383
   4bc50:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bc54:	tst	x0, #0x100000
   4bc58:	mov	w1, #0x586                 	// #1414
   4bc5c:	mov	w0, #0x57e                 	// #1406
   4bc60:	csel	w1, w0, w1, eq  // eq = none
   4bc64:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bc68:	mov	w1, #0x307                 	// #775
   4bc6c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bc70:	mov	w1, #0x30b                 	// #779
   4bc74:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bc78:	mov	w1, #0x303                 	// #771
   4bc7c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bc80:	mov	w1, #0x43f                 	// #1087
   4bc84:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bc88:	tbnz	w0, #31, 4bcc0 <aarch64_opcode_lookup@@Base+0x5770>
   4bc8c:	tst	x0, #0x40000000
   4bc90:	mov	w1, #0x443                 	// #1091
   4bc94:	mov	w0, #0x440                 	// #1088
   4bc98:	csel	w1, w0, w1, eq  // eq = none
   4bc9c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bca0:	mov	w1, #0x447                 	// #1095
   4bca4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bca8:	tbnz	w0, #31, 4bcc8 <aarch64_opcode_lookup@@Base+0x5778>
   4bcac:	tst	x0, #0x40000000
   4bcb0:	mov	w1, #0x445                 	// #1093
   4bcb4:	mov	w0, #0x442                 	// #1090
   4bcb8:	csel	w1, w0, w1, eq  // eq = none
   4bcbc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bcc0:	mov	w1, #0x446                 	// #1094
   4bcc4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bcc8:	mov	w1, #0x448                 	// #1096
   4bccc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bcd0:	mov	w1, #0x593                 	// #1427
   4bcd4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bcd8:	tst	x0, #0x20000000
   4bcdc:	mov	w1, #0xfb                  	// #251
   4bce0:	mov	w0, #0xcc                  	// #204
   4bce4:	csel	w1, w0, w1, eq  // eq = none
   4bce8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bcec:	mov	w1, #0x8ec                 	// #2284
   4bcf0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bcf4:	tst	x0, #0x20000000
   4bcf8:	mov	w1, #0x211                 	// #529
   4bcfc:	mov	w0, #0x1f5                 	// #501
   4bd00:	csel	w1, w0, w1, eq  // eq = none
   4bd04:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bd08:	mov	w1, #0x575                 	// #1397
   4bd0c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bd10:	mov	w1, #0x453                 	// #1107
   4bd14:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bd18:	mov	w1, #0x55d                 	// #1373
   4bd1c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bd20:	mov	w1, #0x84a                 	// #2122
   4bd24:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bd28:	mov	w1, #0x452                 	// #1106
   4bd2c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bd30:	mov	w1, #0x460                 	// #1120
   4bd34:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bd38:	mov	w1, #0x506                 	// #1286
   4bd3c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bd40:	mov	w1, #0x44b                 	// #1099
   4bd44:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bd48:	mov	w1, #0x7aa                 	// #1962
   4bd4c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bd50:	tbz	w0, #20, 4bd90 <aarch64_opcode_lookup@@Base+0x5840>
   4bd54:	tbz	w0, #22, 4bd88 <aarch64_opcode_lookup@@Base+0x5838>
   4bd58:	tst	x0, #0x800000
   4bd5c:	mov	w1, #0x58b                 	// #1419
   4bd60:	mov	w0, #0x587                 	// #1415
   4bd64:	csel	w1, w0, w1, eq  // eq = none
   4bd68:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bd6c:	mov	w1, #0x5b7                 	// #1463
   4bd70:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bd74:	tst	x0, #0x800000
   4bd78:	mov	w1, #0x58c                 	// #1420
   4bd7c:	mov	w0, #0x588                 	// #1416
   4bd80:	csel	w1, w0, w1, eq  // eq = none
   4bd84:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bd88:	mov	w1, #0x589                 	// #1417
   4bd8c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bd90:	mov	w1, #0x5c0                 	// #1472
   4bd94:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bd98:	mov	w1, #0x345                 	// #837
   4bd9c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bda0:	mov	w1, #0x91d                 	// #2333
   4bda4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bda8:	mov	w1, #0x41b                 	// #1051
   4bdac:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bdb0:	mov	w1, #0x6d6                 	// #1750
   4bdb4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bdb8:	mov	w1, #0x515                 	// #1301
   4bdbc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bdc0:	mov	w1, #0x403                 	// #1027
   4bdc4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bdc8:	tbnz	w0, #31, 4bde8 <aarch64_opcode_lookup@@Base+0x5898>
   4bdcc:	tst	x0, #0x40000000
   4bdd0:	mov	w1, #0x407                 	// #1031
   4bdd4:	mov	w0, #0x404                 	// #1028
   4bdd8:	csel	w1, w0, w1, eq  // eq = none
   4bddc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bde0:	mov	w1, #0x59c                 	// #1436
   4bde4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bde8:	mov	w1, #0x40a                 	// #1034
   4bdec:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bdf0:	mov	w1, #0x33b                 	// #827
   4bdf4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bdf8:	mov	w1, #0x553                 	// #1363
   4bdfc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4be00:	mov	w1, #0x40b                 	// #1035
   4be04:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4be08:	tbnz	w0, #31, 4be74 <aarch64_opcode_lookup@@Base+0x5924>
   4be0c:	tst	x0, #0x40000000
   4be10:	mov	w1, #0x409                 	// #1033
   4be14:	mov	w0, #0x406                 	// #1030
   4be18:	csel	w1, w0, w1, eq  // eq = none
   4be1c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4be20:	mov	w1, #0x45f                 	// #1119
   4be24:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4be28:	mov	w1, #0x7ee                 	// #2030
   4be2c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4be30:	tst	x0, #0x20000000
   4be34:	mov	w1, #0x212                 	// #530
   4be38:	mov	w0, #0x1f6                 	// #502
   4be3c:	csel	w1, w0, w1, eq  // eq = none
   4be40:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4be44:	tst	x0, #0x20000000
   4be48:	cset	w0, eq  // eq = none
   4be4c:	add	w1, w0, #0x21c
   4be50:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4be54:	mov	w1, #0x732                 	// #1842
   4be58:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4be5c:	mov	w1, #0x2b7                 	// #695
   4be60:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4be64:	mov	w1, #0x968                 	// #2408
   4be68:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4be6c:	mov	w1, #0x6d4                 	// #1748
   4be70:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4be74:	mov	w1, #0x40c                 	// #1036
   4be78:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4be7c:	mov	w1, #0x2c7                 	// #711
   4be80:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4be84:	mov	w1, #0x5cf                 	// #1487
   4be88:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4be8c:	mov	w1, #0x544                 	// #1348
   4be90:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4be94:	mov	w1, #0x967                 	// #2407
   4be98:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4be9c:	tst	x0, #0x20000000
   4bea0:	mov	w1, #0x102                 	// #258
   4bea4:	mov	w0, #0xd3                  	// #211
   4bea8:	csel	w1, w0, w1, eq  // eq = none
   4beac:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4beb0:	mov	w1, #0x8c9                 	// #2249
   4beb4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4beb8:	ubfx	x0, x0, #20, #1
   4bebc:	add	w1, w0, #0x5d6
   4bec0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bec4:	mov	w1, #0x7dc                 	// #2012
   4bec8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4becc:	mov	w1, #0x50c                 	// #1292
   4bed0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bed4:	mov	w1, #0x43c                 	// #1084
   4bed8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bedc:	mov	w1, #0x433                 	// #1075
   4bee0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bee4:	mov	w1, #0x8a3                 	// #2211
   4bee8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4beec:	mov	w1, #0x7c5                 	// #1989
   4bef0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bef4:	mov	w1, #0x7c6                 	// #1990
   4bef8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4befc:	tbnz	w0, #20, 4bf1c <aarch64_opcode_lookup@@Base+0x59cc>
   4bf00:	tst	x0, #0x400000
   4bf04:	mov	w1, #0x57c                 	// #1404
   4bf08:	mov	w0, #0x57a                 	// #1402
   4bf0c:	csel	w1, w0, w1, eq  // eq = none
   4bf10:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bf14:	mov	w1, #0x8c8                 	// #2248
   4bf18:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bf1c:	mov	w1, #0x58a                 	// #1418
   4bf20:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bf24:	mov	w1, #0x742                 	// #1858
   4bf28:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bf2c:	tst	x0, #0x20000000
   4bf30:	mov	w1, #0x100                 	// #256
   4bf34:	mov	w0, #0xd1                  	// #209
   4bf38:	csel	w1, w0, w1, eq  // eq = none
   4bf3c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bf40:	mov	w1, #0x798                 	// #1944
   4bf44:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bf48:	mov	w1, #0x430                 	// #1072
   4bf4c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bf50:	tst	x0, #0x20000000
   4bf54:	mov	w1, #0xff                  	// #255
   4bf58:	mov	w0, #0xd0                  	// #208
   4bf5c:	csel	w1, w0, w1, eq  // eq = none
   4bf60:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bf64:	mov	w1, #0x20                  	// #32
   4bf68:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bf6c:	mov	w1, #0x42f                 	// #1071
   4bf70:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bf74:	mov	w1, #0x5d0                 	// #1488
   4bf78:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bf7c:	tst	x0, #0x100000
   4bf80:	mov	w1, #0x317                 	// #791
   4bf84:	mov	w0, #0x30f                 	// #783
   4bf88:	csel	w1, w0, w1, eq  // eq = none
   4bf8c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bf90:	mov	w1, #0xd9                  	// #217
   4bf94:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bf98:	mov	w1, #0x2d2                 	// #722
   4bf9c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bfa0:	mov	w1, #0xd6                  	// #214
   4bfa4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bfa8:	mov	w1, #0x46a                 	// #1130
   4bfac:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bfb0:	mov	w1, #0x7c8                 	// #1992
   4bfb4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bfb8:	mov	w1, #0x2d1                 	// #721
   4bfbc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bfc0:	mov	w1, #0x7d6                 	// #2006
   4bfc4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bfc8:	ubfx	x0, x0, #22, #1
   4bfcc:	add	w1, w0, #0x706
   4bfd0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bfd4:	mov	w1, #0x6e0                 	// #1760
   4bfd8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bfdc:	mov	w1, #0x6ff                 	// #1791
   4bfe0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bfe4:	mov	w1, #0x45e                 	// #1118
   4bfe8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bfec:	mov	w1, #0x423                 	// #1059
   4bff0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4bff4:	tst	x0, #0x20000000
   4bff8:	mov	w1, #0xfd                  	// #253
   4bffc:	mov	w0, #0xce                  	// #206
   4c000:	csel	w1, w0, w1, eq  // eq = none
   4c004:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c008:	tst	x0, #0x800000
   4c00c:	cset	w0, eq  // eq = none
   4c010:	add	w1, w0, #0x542
   4c014:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c018:	mov	w1, #0x70d                 	// #1805
   4c01c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c020:	tst	x0, #0x20000000
   4c024:	mov	w1, #0x23                  	// #35
   4c028:	mov	w0, #0x1f                  	// #31
   4c02c:	csel	w1, w0, w1, eq  // eq = none
   4c030:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c034:	mov	w1, #0x424                 	// #1060
   4c038:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c03c:	mov	w1, #0x2d4                 	// #724
   4c040:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c044:	tst	x0, #0x20000000
   4c048:	mov	w1, #0xfe                  	// #254
   4c04c:	mov	w0, #0xcf                  	// #207
   4c050:	csel	w1, w0, w1, eq  // eq = none
   4c054:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c058:	tst	x0, #0x800000
   4c05c:	mov	w1, #0x7cf                 	// #1999
   4c060:	mov	w0, #0x7d2                 	// #2002
   4c064:	csel	w1, w0, w1, eq  // eq = none
   4c068:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c06c:	mov	w1, #0x422                 	// #1058
   4c070:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c074:	mov	w1, #0x427                 	// #1063
   4c078:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c07c:	tst	x0, #0x800000
   4c080:	mov	w1, #0x7ce                 	// #1998
   4c084:	mov	w0, #0x7d1                 	// #2001
   4c088:	csel	w1, w0, w1, eq  // eq = none
   4c08c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c090:	mov	w1, #0x44                  	// #68
   4c094:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c098:	mov	w1, #0x42e                 	// #1070
   4c09c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c0a0:	tst	x0, #0x800000
   4c0a4:	mov	w1, #0xcb                  	// #203
   4c0a8:	mov	w0, #0xb7                  	// #183
   4c0ac:	csel	w1, w0, w1, eq  // eq = none
   4c0b0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c0b4:	mov	w1, #0x457                 	// #1111
   4c0b8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c0bc:	mov	w1, #0xd8                  	// #216
   4c0c0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c0c4:	mov	w1, #0x849                 	// #2121
   4c0c8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c0cc:	mov	w1, #0x958                 	// #2392
   4c0d0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c0d4:	mov	w1, #0x8ba                 	// #2234
   4c0d8:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c0dc:	tst	x0, #0x20000000
   4c0e0:	mov	w1, #0x215                 	// #533
   4c0e4:	mov	w0, #0x1f9                 	// #505
   4c0e8:	csel	w1, w0, w1, eq  // eq = none
   4c0ec:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c0f0:	mov	w1, #0x8e9                 	// #2281
   4c0f4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c0f8:	mov	w1, #0x859                 	// #2137
   4c0fc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c100:	tst	x0, #0x800000
   4c104:	mov	w1, #0x5cb                 	// #1483
   4c108:	mov	w0, #0x5cd                 	// #1485
   4c10c:	csel	w1, w0, w1, eq  // eq = none
   4c110:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c114:	mov	w1, #0x741                 	// #1857
   4c118:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c11c:	mov	w1, #0x740                 	// #1856
   4c120:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c124:	mov	w1, #0x8f8                 	// #2296
   4c128:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c12c:	mov	w1, #0x6e2                 	// #1762
   4c130:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c134:	tst	x0, #0x800000
   4c138:	mov	w1, #0x73b                 	// #1851
   4c13c:	mov	w0, #0x73e                 	// #1854
   4c140:	csel	w1, w0, w1, eq  // eq = none
   4c144:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c148:	mov	w1, #0x24                  	// #36
   4c14c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c150:	tst	x0, #0x20000000
   4c154:	mov	w1, #0x216                 	// #534
   4c158:	mov	w0, #0x1fa                 	// #506
   4c15c:	csel	w1, w0, w1, eq  // eq = none
   4c160:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c164:	tst	x0, #0x20000000
   4c168:	cset	w0, eq  // eq = none
   4c16c:	add	w1, w0, #0x28
   4c170:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c174:	mov	w1, #0x25                  	// #37
   4c178:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c17c:	mov	w1, #0x935                 	// #2357
   4c180:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c184:	tst	x0, #0x800000
   4c188:	mov	w1, #0x73a                 	// #1850
   4c18c:	mov	w0, #0x73d                 	// #1853
   4c190:	csel	w1, w0, w1, eq  // eq = none
   4c194:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c198:	mov	w1, #0xdb                  	// #219
   4c19c:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c1a0:	mov	w1, #0x5b5                 	// #1461
   4c1a4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c1a8:	mov	w1, #0x8ee                 	// #2286
   4c1ac:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c1b0:	tst	x0, #0x40000000
   4c1b4:	mov	w1, #0x8d7                 	// #2263
   4c1b8:	mov	w0, #0x6c3                 	// #1731
   4c1bc:	csel	w1, w0, w1, eq  // eq = none
   4c1c0:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c1c4:	tbnz	w0, #17, 4c224 <aarch64_opcode_lookup@@Base+0x5cd4>
   4c1c8:	tbz	w0, #18, 4c21c <aarch64_opcode_lookup@@Base+0x5ccc>
   4c1cc:	tst	x0, #0x800000
   4c1d0:	mov	w1, #0x584                 	// #1412
   4c1d4:	mov	w0, #0x580                 	// #1408
   4c1d8:	csel	w1, w0, w1, eq  // eq = none
   4c1dc:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c1e0:	mov	w1, #0xac                  	// #172
   4c1e4:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c1e8:	mov	w1, #0x3c                  	// #60
   4c1ec:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c1f0:	tst	x0, #0x40000000
   4c1f4:	mov	w1, #0x8d6                 	// #2262
   4c1f8:	mov	w0, #0x6c0                 	// #1728
   4c1fc:	csel	w1, w0, w1, eq  // eq = none
   4c200:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c204:	tbnz	w0, #22, 4c23c <aarch64_opcode_lookup@@Base+0x5cec>
   4c208:	tst	x0, #0x800000
   4c20c:	mov	w1, #0x976                 	// #2422
   4c210:	mov	w0, #0x817                 	// #2071
   4c214:	csel	w1, w0, w1, eq  // eq = none
   4c218:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c21c:	mov	w1, #0x583                 	// #1411
   4c220:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c224:	tbz	w0, #18, 4c244 <aarch64_opcode_lookup@@Base+0x5cf4>
   4c228:	tst	x0, #0x800000
   4c22c:	mov	w1, #0x585                 	// #1413
   4c230:	mov	w0, #0x581                 	// #1409
   4c234:	csel	w1, w0, w1, eq  // eq = none
   4c238:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c23c:	mov	w1, #0x57d                 	// #1405
   4c240:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c244:	mov	w1, #0x57f                 	// #1407
   4c248:	b	46568 <aarch64_opcode_lookup@@Base+0x18>
   4c24c:	nop

000000000004c250 <aarch64_find_next_opcode@@Base>:
   4c250:	adrp	x2, a2000 <aarch64_operands@@Base+0x16bc0>
   4c254:	mov	x3, #0x8e39                	// #36409
   4c258:	movk	x3, #0x38e3, lsl #16
   4c25c:	ldr	x1, [x2, #3848]
   4c260:	movk	x3, #0xe38e, lsl #32
   4c264:	movk	x3, #0x8e38, lsl #48
   4c268:	sub	x1, x0, x1
   4c26c:	asr	x1, x1, #4
   4c270:	mul	x1, x1, x3
   4c274:	cmp	w1, #0x4ca
   4c278:	b.gt	4c320 <aarch64_find_next_opcode@@Base+0xd0>
   4c27c:	cmp	w1, #0x175
   4c280:	b.le	4c2ec <aarch64_find_next_opcode@@Base+0x9c>
   4c284:	sub	w1, w1, #0x176
   4c288:	cmp	w1, #0x354
   4c28c:	b.hi	4c2e4 <aarch64_find_next_opcode@@Base+0x94>  // b.pmore
   4c290:	adrp	x0, 60000 <fields@@Base+0x12d8>
   4c294:	add	x0, x0, #0x218
   4c298:	ldrh	w0, [x0, w1, uxtw #1]
   4c29c:	adr	x1, 4c2a8 <aarch64_find_next_opcode@@Base+0x58>
   4c2a0:	add	x0, x1, w0, sxth #2
   4c2a4:	br	x0
   4c2a8:	mov	x0, #0x23e0                	// #9184
   4c2ac:	movk	x0, #0x2, lsl #16
   4c2b0:	ldr	x2, [x2, #3848]
   4c2b4:	add	x0, x0, x2
   4c2b8:	ret
   4c2bc:	mov	x0, #0x2110                	// #8464
   4c2c0:	movk	x0, #0x2, lsl #16
   4c2c4:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c2c8:	cmp	w1, #0x65d
   4c2cc:	b.eq	4c4c4 <aarch64_find_next_opcode@@Base+0x274>  // b.none
   4c2d0:	b.le	4c458 <aarch64_find_next_opcode@@Base+0x208>
   4c2d4:	mov	x0, #0x9600                	// #38400
   4c2d8:	cmp	w1, #0x65f
   4c2dc:	movk	x0, #0x3, lsl #16
   4c2e0:	b.eq	4c2b0 <aarch64_find_next_opcode@@Base+0x60>  // b.none
   4c2e4:	mov	x0, #0x0                   	// #0
   4c2e8:	ret
   4c2ec:	cmp	w1, #0x8c
   4c2f0:	b.eq	4c4f8 <aarch64_find_next_opcode@@Base+0x2a8>  // b.none
   4c2f4:	b.le	4c37c <aarch64_find_next_opcode@@Base+0x12c>
   4c2f8:	cmp	w1, #0x90
   4c2fc:	b.eq	4c4d0 <aarch64_find_next_opcode@@Base+0x280>  // b.none
   4c300:	b.le	4c354 <aarch64_find_next_opcode@@Base+0x104>
   4c304:	cmp	w1, #0x92
   4c308:	b.eq	4c480 <aarch64_find_next_opcode@@Base+0x230>  // b.none
   4c30c:	cmp	w1, #0x93
   4c310:	mov	x0, #0xea00                	// #59904
   4c314:	b.eq	4c2b0 <aarch64_find_next_opcode@@Base+0x60>  // b.none
   4c318:	mov	x0, #0x0                   	// #0
   4c31c:	b	4c2e8 <aarch64_find_next_opcode@@Base+0x98>
   4c320:	cmp	w1, #0x67b
   4c324:	b.eq	4c500 <aarch64_find_next_opcode@@Base+0x2b0>  // b.none
   4c328:	b.le	4c3cc <aarch64_find_next_opcode@@Base+0x17c>
   4c32c:	cmp	w1, #0x689
   4c330:	b.eq	4c4e0 <aarch64_find_next_opcode@@Base+0x290>  // b.none
   4c334:	b.le	4c3b0 <aarch64_find_next_opcode@@Base+0x160>
   4c338:	cmp	w1, #0x69a
   4c33c:	b.eq	4c4b8 <aarch64_find_next_opcode@@Base+0x268>  // b.none
   4c340:	cmp	w1, #0x69c
   4c344:	b.ne	4c41c <aarch64_find_next_opcode@@Base+0x1cc>  // b.any
   4c348:	mov	x0, #0xb850                	// #47184
   4c34c:	movk	x0, #0x3, lsl #16
   4c350:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c354:	cmp	w1, #0x8e
   4c358:	b.eq	4c4b0 <aarch64_find_next_opcode@@Base+0x260>  // b.none
   4c35c:	cmp	w1, #0x8f
   4c360:	mov	x0, #0xe340                	// #58176
   4c364:	b.eq	4c2b0 <aarch64_find_next_opcode@@Base+0x60>  // b.none
   4c368:	cmp	w1, #0x8d
   4c36c:	mov	x0, #0xdec0                	// #57024
   4c370:	b.eq	4c2b0 <aarch64_find_next_opcode@@Base+0x60>  // b.none
   4c374:	mov	x0, #0x0                   	// #0
   4c378:	b	4c2e8 <aarch64_find_next_opcode@@Base+0x98>
   4c37c:	cmp	w1, #0x86
   4c380:	b.eq	4c4d8 <aarch64_find_next_opcode@@Base+0x288>  // b.none
   4c384:	b.le	4c430 <aarch64_find_next_opcode@@Base+0x1e0>
   4c388:	cmp	w1, #0x88
   4c38c:	b.eq	4c4a0 <aarch64_find_next_opcode@@Base+0x250>  // b.none
   4c390:	cmp	w1, #0x8a
   4c394:	mov	x0, #0xdc80                	// #56448
   4c398:	b.eq	4c2b0 <aarch64_find_next_opcode@@Base+0x60>  // b.none
   4c39c:	cmp	w1, #0x87
   4c3a0:	mov	x0, #0xd5c0                	// #54720
   4c3a4:	b.eq	4c2b0 <aarch64_find_next_opcode@@Base+0x60>  // b.none
   4c3a8:	mov	x0, #0x0                   	// #0
   4c3ac:	b	4c2e8 <aarch64_find_next_opcode@@Base+0x98>
   4c3b0:	cmp	w1, #0x67f
   4c3b4:	b.eq	4c494 <aarch64_find_next_opcode@@Base+0x244>  // b.none
   4c3b8:	cmp	w1, #0x687
   4c3bc:	b.ne	4c3f4 <aarch64_find_next_opcode@@Base+0x1a4>  // b.any
   4c3c0:	mov	x0, #0xac80                	// #44160
   4c3c4:	movk	x0, #0x3, lsl #16
   4c3c8:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c3cc:	cmp	w1, #0x665
   4c3d0:	b.eq	4c4ec <aarch64_find_next_opcode@@Base+0x29c>  // b.none
   4c3d4:	b.le	4c2c8 <aarch64_find_next_opcode@@Base+0x78>
   4c3d8:	cmp	w1, #0x670
   4c3dc:	b.eq	4c488 <aarch64_find_next_opcode@@Base+0x238>  // b.none
   4c3e0:	cmp	w1, #0x672
   4c3e4:	b.ne	4c408 <aarch64_find_next_opcode@@Base+0x1b8>  // b.any
   4c3e8:	mov	x0, #0xa0b0                	// #41136
   4c3ec:	movk	x0, #0x3, lsl #16
   4c3f0:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c3f4:	cmp	w1, #0x67d
   4c3f8:	b.ne	4c2e4 <aarch64_find_next_opcode@@Base+0x94>  // b.any
   4c3fc:	mov	x0, #0xa6e0                	// #42720
   4c400:	movk	x0, #0x3, lsl #16
   4c404:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c408:	cmp	w1, #0x66e
   4c40c:	b.ne	4c2e4 <aarch64_find_next_opcode@@Base+0x94>  // b.any
   4c410:	mov	x0, #0x9e70                	// #40560
   4c414:	movk	x0, #0x3, lsl #16
   4c418:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c41c:	cmp	w1, #0x691
   4c420:	b.ne	4c2e4 <aarch64_find_next_opcode@@Base+0x94>  // b.any
   4c424:	mov	x0, #0xb220                	// #45600
   4c428:	movk	x0, #0x3, lsl #16
   4c42c:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c430:	cmp	w1, #0x10
   4c434:	b.eq	4c4a8 <aarch64_find_next_opcode@@Base+0x258>  // b.none
   4c438:	cmp	w1, #0x85
   4c43c:	mov	x0, #0xd260                	// #53856
   4c440:	b.eq	4c2b0 <aarch64_find_next_opcode@@Base+0x60>  // b.none
   4c444:	cmp	w1, #0xc
   4c448:	mov	x0, #0xab0                 	// #2736
   4c44c:	b.eq	4c2b0 <aarch64_find_next_opcode@@Base+0x60>  // b.none
   4c450:	mov	x0, #0x0                   	// #0
   4c454:	b	4c2e8 <aarch64_find_next_opcode@@Base+0x98>
   4c458:	cmp	w1, #0x659
   4c45c:	b.eq	4c474 <aarch64_find_next_opcode@@Base+0x224>  // b.none
   4c460:	cmp	w1, #0x65b
   4c464:	b.ne	4c2e4 <aarch64_find_next_opcode@@Base+0x94>  // b.any
   4c468:	mov	x0, #0x93c0                	// #37824
   4c46c:	movk	x0, #0x3, lsl #16
   4c470:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c474:	mov	x0, #0x92a0                	// #37536
   4c478:	movk	x0, #0x3, lsl #16
   4c47c:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c480:	mov	x0, #0x52b0                	// #21168
   4c484:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c488:	mov	x0, #0x9f90                	// #40848
   4c48c:	movk	x0, #0x3, lsl #16
   4c490:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c494:	mov	x0, #0xa800                	// #43008
   4c498:	movk	x0, #0x3, lsl #16
   4c49c:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c4a0:	mov	x0, #0xd800                	// #55296
   4c4a4:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c4a8:	mov	x0, #0xb40                 	// #2880
   4c4ac:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c4b0:	mov	x0, #0xdf50                	// #57168
   4c4b4:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c4b8:	mov	x0, #0xb730                	// #46896
   4c4bc:	movk	x0, #0x3, lsl #16
   4c4c0:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c4c4:	mov	x0, #0x94e0                	// #38112
   4c4c8:	movk	x0, #0x3, lsl #16
   4c4cc:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c4d0:	mov	x0, #0xe580                	// #58752
   4c4d4:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c4d8:	mov	x0, #0xd2f0                	// #54000
   4c4dc:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c4e0:	mov	x0, #0xada0                	// #44448
   4c4e4:	movk	x0, #0x3, lsl #16
   4c4e8:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c4ec:	mov	x0, #0x9960                	// #39264
   4c4f0:	movk	x0, #0x3, lsl #16
   4c4f4:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c4f8:	mov	x0, #0xdda0                	// #56736
   4c4fc:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c500:	mov	x0, #0xa5c0                	// #42432
   4c504:	movk	x0, #0x3, lsl #16
   4c508:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c50c:	mov	x0, #0xb230                	// #45616
   4c510:	movk	x0, #0x2, lsl #16
   4c514:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c518:	mov	x0, #0x4060                	// #16480
   4c51c:	movk	x0, #0x5, lsl #16
   4c520:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c524:	mov	x0, #0xb110                	// #45328
   4c528:	movk	x0, #0x2, lsl #16
   4c52c:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c530:	mov	x0, #0xb080                	// #45184
   4c534:	movk	x0, #0x2, lsl #16
   4c538:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c53c:	mov	x0, #0xac00                	// #44032
   4c540:	movk	x0, #0x2, lsl #16
   4c544:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c548:	mov	x0, #0xab70                	// #43888
   4c54c:	movk	x0, #0x2, lsl #16
   4c550:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c554:	mov	x0, #0xaae0                	// #43744
   4c558:	movk	x0, #0x2, lsl #16
   4c55c:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c560:	mov	x0, #0xaa50                	// #43600
   4c564:	movk	x0, #0x2, lsl #16
   4c568:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c56c:	mov	x0, #0xa8a0                	// #43168
   4c570:	movk	x0, #0x2, lsl #16
   4c574:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c578:	mov	x0, #0xa810                	// #43024
   4c57c:	movk	x0, #0x2, lsl #16
   4c580:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c584:	mov	x0, #0x9f10                	// #40720
   4c588:	movk	x0, #0x2, lsl #16
   4c58c:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c590:	mov	x0, #0xb1a0                	// #45472
   4c594:	movk	x0, #0x2, lsl #16
   4c598:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c59c:	mov	x0, #0x9e80                	// #40576
   4c5a0:	movk	x0, #0x2, lsl #16
   4c5a4:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c5a8:	mov	x0, #0x9d60                	// #40288
   4c5ac:	movk	x0, #0x2, lsl #16
   4c5b0:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c5b4:	mov	x0, #0x2470                	// #9328
   4c5b8:	movk	x0, #0x2, lsl #16
   4c5bc:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c5c0:	mov	x0, #0xe840                	// #59456
   4c5c4:	movk	x0, #0x1, lsl #16
   4c5c8:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c5cc:	mov	x0, #0xe720                	// #59168
   4c5d0:	movk	x0, #0x1, lsl #16
   4c5d4:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c5d8:	mov	x0, #0xe600                	// #58880
   4c5dc:	movk	x0, #0x1, lsl #16
   4c5e0:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c5e4:	mov	x0, #0xe4e0                	// #58592
   4c5e8:	movk	x0, #0x1, lsl #16
   4c5ec:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c5f0:	mov	x0, #0xe3c0                	// #58304
   4c5f4:	movk	x0, #0x1, lsl #16
   4c5f8:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c5fc:	mov	x0, #0xe2a0                	// #58016
   4c600:	movk	x0, #0x1, lsl #16
   4c604:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c608:	mov	x0, #0xe180                	// #57728
   4c60c:	movk	x0, #0x1, lsl #16
   4c610:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c614:	mov	x0, #0xe060                	// #57440
   4c618:	movk	x0, #0x1, lsl #16
   4c61c:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c620:	mov	x0, #0xdf40                	// #57152
   4c624:	movk	x0, #0x1, lsl #16
   4c628:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c62c:	mov	x0, #0xde20                	// #56864
   4c630:	movk	x0, #0x1, lsl #16
   4c634:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c638:	mov	x0, #0xdd00                	// #56576
   4c63c:	movk	x0, #0x1, lsl #16
   4c640:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c644:	mov	x0, #0xdbe0                	// #56288
   4c648:	movk	x0, #0x1, lsl #16
   4c64c:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c650:	mov	x0, #0xdac0                	// #56000
   4c654:	movk	x0, #0x1, lsl #16
   4c658:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c65c:	mov	x0, #0xd9a0                	// #55712
   4c660:	movk	x0, #0x1, lsl #16
   4c664:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c668:	mov	x0, #0xd880                	// #55424
   4c66c:	movk	x0, #0x1, lsl #16
   4c670:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c674:	mov	x0, #0xd760                	// #55136
   4c678:	movk	x0, #0x1, lsl #16
   4c67c:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c680:	mov	x0, #0xd640                	// #54848
   4c684:	movk	x0, #0x1, lsl #16
   4c688:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c68c:	mov	x0, #0xd520                	// #54560
   4c690:	movk	x0, #0x1, lsl #16
   4c694:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c698:	mov	x0, #0xd400                	// #54272
   4c69c:	movk	x0, #0x1, lsl #16
   4c6a0:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c6a4:	mov	x0, #0xd2e0                	// #53984
   4c6a8:	movk	x0, #0x1, lsl #16
   4c6ac:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c6b0:	mov	x0, #0xd1c0                	// #53696
   4c6b4:	movk	x0, #0x1, lsl #16
   4c6b8:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c6bc:	mov	x0, #0xd0a0                	// #53408
   4c6c0:	movk	x0, #0x1, lsl #16
   4c6c4:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c6c8:	mov	x0, #0x5890                	// #22672
   4c6cc:	movk	x0, #0x5, lsl #16
   4c6d0:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c6d4:	mov	x0, #0xcef0                	// #52976
   4c6d8:	movk	x0, #0x1, lsl #16
   4c6dc:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c6e0:	mov	x0, #0xcdd0                	// #52688
   4c6e4:	movk	x0, #0x1, lsl #16
   4c6e8:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c6ec:	mov	x0, #0xccb0                	// #52400
   4c6f0:	movk	x0, #0x1, lsl #16
   4c6f4:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c6f8:	mov	x0, #0xcb90                	// #52112
   4c6fc:	movk	x0, #0x1, lsl #16
   4c700:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c704:	mov	x0, #0x9cd0                	// #40144
   4c708:	movk	x0, #0x2, lsl #16
   4c70c:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c710:	mov	x0, #0xc830                	// #51248
   4c714:	movk	x0, #0x1, lsl #16
   4c718:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c71c:	mov	x0, #0xc710                	// #50960
   4c720:	movk	x0, #0x1, lsl #16
   4c724:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c728:	mov	x0, #0xc5f0                	// #50672
   4c72c:	movk	x0, #0x1, lsl #16
   4c730:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c734:	mov	x0, #0xc4d0                	// #50384
   4c738:	movk	x0, #0x1, lsl #16
   4c73c:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c740:	mov	x0, #0xc3b0                	// #50096
   4c744:	movk	x0, #0x1, lsl #16
   4c748:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c74c:	mov	x0, #0xc290                	// #49808
   4c750:	movk	x0, #0x1, lsl #16
   4c754:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c758:	mov	x0, #0xc170                	// #49520
   4c75c:	movk	x0, #0x1, lsl #16
   4c760:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c764:	mov	x0, #0xbea0                	// #48800
   4c768:	movk	x0, #0x1, lsl #16
   4c76c:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c770:	mov	x0, #0xbd80                	// #48512
   4c774:	movk	x0, #0x1, lsl #16
   4c778:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c77c:	mov	x0, #0xbc60                	// #48224
   4c780:	movk	x0, #0x1, lsl #16
   4c784:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c788:	mov	x0, #0xbb40                	// #47936
   4c78c:	movk	x0, #0x1, lsl #16
   4c790:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c794:	mov	x0, #0xba20                	// #47648
   4c798:	movk	x0, #0x1, lsl #16
   4c79c:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c7a0:	mov	x0, #0xb900                	// #47360
   4c7a4:	movk	x0, #0x1, lsl #16
   4c7a8:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c7ac:	mov	x0, #0xb7e0                	// #47072
   4c7b0:	movk	x0, #0x1, lsl #16
   4c7b4:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c7b8:	mov	x0, #0xb6c0                	// #46784
   4c7bc:	movk	x0, #0x1, lsl #16
   4c7c0:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c7c4:	mov	x0, #0xb5a0                	// #46496
   4c7c8:	movk	x0, #0x1, lsl #16
   4c7cc:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c7d0:	mov	x0, #0xb480                	// #46208
   4c7d4:	movk	x0, #0x1, lsl #16
   4c7d8:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c7dc:	mov	x0, #0xb360                	// #45920
   4c7e0:	movk	x0, #0x1, lsl #16
   4c7e4:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c7e8:	mov	x0, #0xb240                	// #45632
   4c7ec:	movk	x0, #0x1, lsl #16
   4c7f0:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c7f4:	mov	x0, #0xb120                	// #45344
   4c7f8:	movk	x0, #0x1, lsl #16
   4c7fc:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c800:	mov	x0, #0xb000                	// #45056
   4c804:	movk	x0, #0x1, lsl #16
   4c808:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c80c:	mov	x0, #0xaee0                	// #44768
   4c810:	movk	x0, #0x1, lsl #16
   4c814:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c818:	mov	x0, #0xadc0                	// #44480
   4c81c:	movk	x0, #0x1, lsl #16
   4c820:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c824:	mov	x0, #0xaca0                	// #44192
   4c828:	movk	x0, #0x1, lsl #16
   4c82c:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c830:	mov	x0, #0xab80                	// #43904
   4c834:	movk	x0, #0x1, lsl #16
   4c838:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c83c:	mov	x0, #0x5b10                	// #23312
   4c840:	movk	x0, #0x1, lsl #16
   4c844:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c848:	mov	x0, #0x59f0                	// #23024
   4c84c:	movk	x0, #0x1, lsl #16
   4c850:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c854:	mov	x0, #0x5210                	// #21008
   4c858:	movk	x0, #0x1, lsl #16
   4c85c:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c860:	mov	x0, #0x50f0                	// #20720
   4c864:	movk	x0, #0x1, lsl #16
   4c868:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c86c:	mov	x0, #0xd70                 	// #3440
   4c870:	movk	x0, #0x1, lsl #16
   4c874:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c878:	mov	x0, #0xce0                 	// #3296
   4c87c:	movk	x0, #0x1, lsl #16
   4c880:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c884:	mov	x0, #0xb30                 	// #2864
   4c888:	movk	x0, #0x1, lsl #16
   4c88c:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c890:	mov	x0, #0xaa0                 	// #2720
   4c894:	movk	x0, #0x1, lsl #16
   4c898:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c89c:	mov	x0, #0x6b0                 	// #1712
   4c8a0:	movk	x0, #0x1, lsl #16
   4c8a4:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c8a8:	mov	x0, #0x620                 	// #1568
   4c8ac:	movk	x0, #0x1, lsl #16
   4c8b0:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c8b4:	mov	x0, #0x470                 	// #1136
   4c8b8:	movk	x0, #0x1, lsl #16
   4c8bc:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c8c0:	mov	x0, #0x3e0                 	// #992
   4c8c4:	movk	x0, #0x1, lsl #16
   4c8c8:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c8cc:	mov	x0, #0xfff0                	// #65520
   4c8d0:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c8d4:	mov	x0, #0xff60                	// #65376
   4c8d8:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c8dc:	mov	x0, #0xfed0                	// #65232
   4c8e0:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c8e4:	mov	x0, #0xfdb0                	// #64944
   4c8e8:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c8ec:	mov	x0, #0xfd20                	// #64800
   4c8f0:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c8f4:	mov	x0, #0xfc90                	// #64656
   4c8f8:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c8fc:	mov	x0, #0xfb70                	// #64368
   4c900:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c904:	mov	x0, #0xfae0                	// #64224
   4c908:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c90c:	mov	x0, #0xfa50                	// #64080
   4c910:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c914:	mov	x0, #0xf930                	// #63792
   4c918:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c91c:	mov	x0, #0xf8a0                	// #63648
   4c920:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c924:	mov	x0, #0xf810                	// #63504
   4c928:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c92c:	mov	x0, #0xebb0                	// #60336
   4c930:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c934:	mov	x0, #0xea90                	// #60048
   4c938:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c93c:	mov	x0, #0xe8e0                	// #59616
   4c940:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c944:	mov	x0, #0xe610                	// #58896
   4c948:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c94c:	mov	x0, #0xe7c0                	// #59328
   4c950:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c954:	mov	x0, #0xe3d0                	// #58320
   4c958:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c95c:	mov	x0, #0xe2b0                	// #58032
   4c960:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c964:	mov	x0, #0xe220                	// #57888
   4c968:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c96c:	mov	x0, #0xe190                	// #57744
   4c970:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c974:	mov	x0, #0xe100                	// #57600
   4c978:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c97c:	mov	x0, #0xe070                	// #57456
   4c980:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c984:	mov	x0, #0xdfe0                	// #57312
   4c988:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c98c:	mov	x0, #0xde30                	// #56880
   4c990:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c994:	mov	x0, #0xdd10                	// #56592
   4c998:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c99c:	mov	x0, #0xdb60                	// #56160
   4c9a0:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c9a4:	mov	x0, #0xd890                	// #55440
   4c9a8:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c9ac:	mov	x0, #0xda40                	// #55872
   4c9b0:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c9b4:	mov	x0, #0xd650                	// #54864
   4c9b8:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c9bc:	mov	x0, #0xd530                	// #54576
   4c9c0:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c9c4:	mov	x0, #0xd4a0                	// #54432
   4c9c8:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c9cc:	mov	x0, #0xd410                	// #54288
   4c9d0:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c9d4:	mov	x0, #0xd380                	// #54144
   4c9d8:	b	4c2b0 <aarch64_find_next_opcode@@Base+0x60>
   4c9dc:	nop

000000000004c9e0 <aarch64_find_alias_opcode@@Base>:
   4c9e0:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   4c9e4:	mov	x2, #0x8e39                	// #36409
   4c9e8:	movk	x2, #0x38e3, lsl #16
   4c9ec:	ldr	x3, [x1, #3848]
   4c9f0:	movk	x2, #0xe38e, lsl #32
   4c9f4:	movk	x2, #0x8e38, lsl #48
   4c9f8:	sub	x0, x0, x3
   4c9fc:	asr	x0, x0, #4
   4ca00:	mul	x0, x0, x2
   4ca04:	cmp	w0, #0x58f
   4ca08:	b.gt	4ca94 <aarch64_find_alias_opcode@@Base+0xb4>
   4ca0c:	cmp	w0, #0x269
   4ca10:	b.le	4ca58 <aarch64_find_alias_opcode@@Base+0x78>
   4ca14:	sub	w0, w0, #0x26a
   4ca18:	cmp	w0, #0x325
   4ca1c:	b.hi	4ca8c <aarch64_find_alias_opcode@@Base+0xac>  // b.pmore
   4ca20:	adrp	x2, 60000 <fields@@Base+0x12d8>
   4ca24:	add	x2, x2, #0x8c4
   4ca28:	ldrh	w0, [x2, w0, uxtw #1]
   4ca2c:	adr	x2, 4ca38 <aarch64_find_alias_opcode@@Base+0x58>
   4ca30:	add	x0, x2, w0, sxth #2
   4ca34:	br	x0
   4ca38:	mov	x0, #0x60b0                	// #24752
   4ca3c:	movk	x0, #0x1, lsl #16
   4ca40:	ldr	x1, [x1, #3848]
   4ca44:	add	x0, x0, x1
   4ca48:	ret
   4ca4c:	mov	x0, #0x5e70                	// #24176
   4ca50:	movk	x0, #0x1, lsl #16
   4ca54:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ca58:	cmp	w0, #0x98
   4ca5c:	b.eq	4d0f0 <aarch64_find_alias_opcode@@Base+0x710>  // b.none
   4ca60:	b.le	4cb14 <aarch64_find_alias_opcode@@Base+0x134>
   4ca64:	cmp	w0, #0x184
   4ca68:	b.eq	4cc3c <aarch64_find_alias_opcode@@Base+0x25c>  // b.none
   4ca6c:	b.le	4caf4 <aarch64_find_alias_opcode@@Base+0x114>
   4ca70:	cmp	w0, #0x19e
   4ca74:	b.eq	4cc20 <aarch64_find_alias_opcode@@Base+0x240>  // b.none
   4ca78:	b.le	4cabc <aarch64_find_alias_opcode@@Base+0xdc>
   4ca7c:	cmp	w0, #0x217
   4ca80:	mov	x0, #0x2d80                	// #11648
   4ca84:	movk	x0, #0x1, lsl #16
   4ca88:	b.eq	4ca40 <aarch64_find_alias_opcode@@Base+0x60>  // b.none
   4ca8c:	mov	x0, #0x0                   	// #0
   4ca90:	ret
   4ca94:	cmp	w0, #0x6de
   4ca98:	b.eq	4cc30 <aarch64_find_alias_opcode@@Base+0x250>  // b.none
   4ca9c:	b.le	4cad8 <aarch64_find_alias_opcode@@Base+0xf8>
   4caa0:	cmp	w0, #0x71c
   4caa4:	b.eq	4cbf8 <aarch64_find_alias_opcode@@Base+0x218>  // b.none
   4caa8:	cmp	w0, #0x71d
   4caac:	b.ne	4ca8c <aarch64_find_alias_opcode@@Base+0xac>  // b.any
   4cab0:	mov	x0, #0xc8b0                	// #51376
   4cab4:	movk	x0, #0x2, lsl #16
   4cab8:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cabc:	cmp	w0, #0x186
   4cac0:	b.eq	4cbf0 <aarch64_find_alias_opcode@@Base+0x210>  // b.none
   4cac4:	cmp	w0, #0x19c
   4cac8:	mov	x0, #0xe850                	// #59472
   4cacc:	b.eq	4ca40 <aarch64_find_alias_opcode@@Base+0x60>  // b.none
   4cad0:	mov	x0, #0x0                   	// #0
   4cad4:	b	4ca90 <aarch64_find_alias_opcode@@Base+0xb0>
   4cad8:	cmp	w0, #0x6db
   4cadc:	b.eq	4cc04 <aarch64_find_alias_opcode@@Base+0x224>  // b.none
   4cae0:	cmp	w0, #0x6dd
   4cae4:	b.ne	4cb40 <aarch64_find_alias_opcode@@Base+0x160>  // b.any
   4cae8:	mov	x0, #0xc430                	// #50224
   4caec:	movk	x0, #0x2, lsl #16
   4caf0:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4caf4:	cmp	w0, #0xf2
   4caf8:	b.eq	4cc10 <aarch64_find_alias_opcode@@Base+0x230>  // b.none
   4cafc:	b.le	4cb54 <aarch64_find_alias_opcode@@Base+0x174>
   4cb00:	cmp	w0, #0x13d
   4cb04:	mov	x0, #0xb2e0                	// #45792
   4cb08:	b.eq	4ca40 <aarch64_find_alias_opcode@@Base+0x60>  // b.none
   4cb0c:	mov	x0, #0x0                   	// #0
   4cb10:	b	4ca90 <aarch64_find_alias_opcode@@Base+0xb0>
   4cb14:	cmp	w0, #0xe
   4cb18:	b.eq	4cc44 <aarch64_find_alias_opcode@@Base+0x264>  // b.none
   4cb1c:	b.le	4cb8c <aarch64_find_alias_opcode@@Base+0x1ac>
   4cb20:	cmp	w0, #0x18
   4cb24:	b.eq	4cc18 <aarch64_find_alias_opcode@@Base+0x238>  // b.none
   4cb28:	b.le	4cb70 <aarch64_find_alias_opcode@@Base+0x190>
   4cb2c:	cmp	w0, #0x1a
   4cb30:	mov	x0, #0xf30                 	// #3888
   4cb34:	b.eq	4ca40 <aarch64_find_alias_opcode@@Base+0x60>  // b.none
   4cb38:	mov	x0, #0x0                   	// #0
   4cb3c:	b	4ca90 <aarch64_find_alias_opcode@@Base+0xb0>
   4cb40:	cmp	w0, #0x6da
   4cb44:	b.ne	4ca8c <aarch64_find_alias_opcode@@Base+0xac>  // b.any
   4cb48:	mov	x0, #0xc280                	// #49792
   4cb4c:	movk	x0, #0x2, lsl #16
   4cb50:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cb54:	cmp	w0, #0x9a
   4cb58:	b.eq	4cbe8 <aarch64_find_alias_opcode@@Base+0x208>  // b.none
   4cb5c:	cmp	w0, #0x9c
   4cb60:	mov	x0, #0x5850                	// #22608
   4cb64:	b.eq	4ca40 <aarch64_find_alias_opcode@@Base+0x60>  // b.none
   4cb68:	mov	x0, #0x0                   	// #0
   4cb6c:	b	4ca90 <aarch64_find_alias_opcode@@Base+0xb0>
   4cb70:	cmp	w0, #0x11
   4cb74:	b.eq	4cbe0 <aarch64_find_alias_opcode@@Base+0x200>  // b.none
   4cb78:	cmp	w0, #0x16
   4cb7c:	mov	x0, #0xcf0                 	// #3312
   4cb80:	b.eq	4ca40 <aarch64_find_alias_opcode@@Base+0x60>  // b.none
   4cb84:	mov	x0, #0x0                   	// #0
   4cb88:	b	4ca90 <aarch64_find_alias_opcode@@Base+0xb0>
   4cb8c:	cmp	w0, #0x7
   4cb90:	b.eq	4cc28 <aarch64_find_alias_opcode@@Base+0x248>  // b.none
   4cb94:	b.le	4cbb4 <aarch64_find_alias_opcode@@Base+0x1d4>
   4cb98:	cmp	w0, #0xa
   4cb9c:	b.eq	4cbd8 <aarch64_find_alias_opcode@@Base+0x1f8>  // b.none
   4cba0:	cmp	w0, #0xc
   4cba4:	mov	x0, #0x750                 	// #1872
   4cba8:	b.eq	4ca40 <aarch64_find_alias_opcode@@Base+0x60>  // b.none
   4cbac:	mov	x0, #0x0                   	// #0
   4cbb0:	b	4ca90 <aarch64_find_alias_opcode@@Base+0xb0>
   4cbb4:	cmp	w0, #0x2
   4cbb8:	b.eq	4cbd0 <aarch64_find_alias_opcode@@Base+0x1f0>  // b.none
   4cbbc:	cmp	w0, #0x4
   4cbc0:	mov	x0, #0x2d0                 	// #720
   4cbc4:	b.eq	4ca40 <aarch64_find_alias_opcode@@Base+0x60>  // b.none
   4cbc8:	mov	x0, #0x0                   	// #0
   4cbcc:	b	4ca90 <aarch64_find_alias_opcode@@Base+0xb0>
   4cbd0:	mov	x0, #0x1b0                 	// #432
   4cbd4:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cbd8:	mov	x0, #0x630                 	// #1584
   4cbdc:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cbe0:	mov	x0, #0xa20                 	// #2592
   4cbe4:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cbe8:	mov	x0, #0x5730                	// #22320
   4cbec:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cbf0:	mov	x0, #0xdbf0                	// #56304
   4cbf4:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cbf8:	mov	x0, #0xc700                	// #50944
   4cbfc:	movk	x0, #0x2, lsl #16
   4cc00:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cc04:	mov	x0, #0x7e50                	// #32336
   4cc08:	movk	x0, #0x4, lsl #16
   4cc0c:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cc10:	mov	x0, #0x88b0                	// #34992
   4cc14:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cc18:	mov	x0, #0xe10                 	// #3600
   4cc1c:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cc20:	mov	x0, #0xe970                	// #59760
   4cc24:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cc28:	mov	x0, #0x480                 	// #1152
   4cc2c:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cc30:	mov	x0, #0xc9d0                	// #51664
   4cc34:	movk	x0, #0x2, lsl #16
   4cc38:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cc3c:	mov	x0, #0xdad0                	// #56016
   4cc40:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cc44:	mov	x0, #0x870                 	// #2160
   4cc48:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cc4c:	mov	x0, #0xc160                	// #49504
   4cc50:	movk	x0, #0x2, lsl #16
   4cc54:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cc58:	mov	x0, #0xc1f0                	// #49648
   4cc5c:	movk	x0, #0x2, lsl #16
   4cc60:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cc64:	mov	x0, #0x7ca0                	// #31904
   4cc68:	movk	x0, #0x4, lsl #16
   4cc6c:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cc70:	mov	x0, #0x7c10                	// #31760
   4cc74:	movk	x0, #0x4, lsl #16
   4cc78:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cc7c:	mov	x0, #0x7b80                	// #31616
   4cc80:	movk	x0, #0x4, lsl #16
   4cc84:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cc88:	mov	x0, #0x7af0                	// #31472
   4cc8c:	movk	x0, #0x4, lsl #16
   4cc90:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cc94:	mov	x0, #0xcb80                	// #52096
   4cc98:	movk	x0, #0x2, lsl #16
   4cc9c:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cca0:	mov	x0, #0xcaf0                	// #51952
   4cca4:	movk	x0, #0x2, lsl #16
   4cca8:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ccac:	mov	x0, #0x7a60                	// #31328
   4ccb0:	movk	x0, #0x4, lsl #16
   4ccb4:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ccb8:	mov	x0, #0xc550                	// #50512
   4ccbc:	movk	x0, #0x2, lsl #16
   4ccc0:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ccc4:	mov	x0, #0x7d30                	// #32048
   4ccc8:	movk	x0, #0x4, lsl #16
   4cccc:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ccd0:	mov	x0, #0xc4c0                	// #50368
   4ccd4:	movk	x0, #0x2, lsl #16
   4ccd8:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ccdc:	mov	x0, #0xc3a0                	// #50080
   4cce0:	movk	x0, #0x2, lsl #16
   4cce4:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cce8:	mov	x0, #0x7dc0                	// #32192
   4ccec:	movk	x0, #0x4, lsl #16
   4ccf0:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ccf4:	mov	x0, #0xc790                	// #51088
   4ccf8:	movk	x0, #0x2, lsl #16
   4ccfc:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cd00:	mov	x0, #0xc670                	// #50800
   4cd04:	movk	x0, #0x2, lsl #16
   4cd08:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cd0c:	mov	x0, #0x7940                	// #31040
   4cd10:	movk	x0, #0x4, lsl #16
   4cd14:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cd18:	mov	x0, #0x78b0                	// #30896
   4cd1c:	movk	x0, #0x4, lsl #16
   4cd20:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cd24:	mov	x0, #0x79d0                	// #31184
   4cd28:	movk	x0, #0x4, lsl #16
   4cd2c:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cd30:	mov	x0, #0x7820                	// #30752
   4cd34:	movk	x0, #0x4, lsl #16
   4cd38:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cd3c:	mov	x0, #0xca60                	// #51808
   4cd40:	movk	x0, #0x2, lsl #16
   4cd44:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cd48:	mov	x0, #0xc820                	// #51232
   4cd4c:	movk	x0, #0x2, lsl #16
   4cd50:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cd54:	mov	x0, #0x7790                	// #30608
   4cd58:	movk	x0, #0x4, lsl #16
   4cd5c:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cd60:	mov	x0, #0xaff0                	// #45040
   4cd64:	movk	x0, #0x2, lsl #16
   4cd68:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cd6c:	mov	x0, #0xa9c0                	// #43456
   4cd70:	movk	x0, #0x2, lsl #16
   4cd74:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cd78:	mov	x0, #0xb6b0                	// #46768
   4cd7c:	movk	x0, #0x2, lsl #16
   4cd80:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cd84:	mov	x0, #0x9a00                	// #39424
   4cd88:	movk	x0, #0x2, lsl #16
   4cd8c:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cd90:	mov	x0, #0x98e0                	// #39136
   4cd94:	movk	x0, #0x2, lsl #16
   4cd98:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cd9c:	mov	x0, #0x97c0                	// #38848
   4cda0:	movk	x0, #0x2, lsl #16
   4cda4:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cda8:	mov	x0, #0x9730                	// #38704
   4cdac:	movk	x0, #0x2, lsl #16
   4cdb0:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cdb4:	mov	x0, #0x96a0                	// #38560
   4cdb8:	movk	x0, #0x2, lsl #16
   4cdbc:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cdc0:	mov	x0, #0x9610                	// #38416
   4cdc4:	movk	x0, #0x2, lsl #16
   4cdc8:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cdcc:	mov	x0, #0x9580                	// #38272
   4cdd0:	movk	x0, #0x2, lsl #16
   4cdd4:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cdd8:	mov	x0, #0x94f0                	// #38128
   4cddc:	movk	x0, #0x2, lsl #16
   4cde0:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cde4:	mov	x0, #0x9460                	// #37984
   4cde8:	movk	x0, #0x2, lsl #16
   4cdec:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cdf0:	mov	x0, #0x93d0                	// #37840
   4cdf4:	movk	x0, #0x2, lsl #16
   4cdf8:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cdfc:	mov	x0, #0x9340                	// #37696
   4ce00:	movk	x0, #0x2, lsl #16
   4ce04:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ce08:	mov	x0, #0x92b0                	// #37552
   4ce0c:	movk	x0, #0x2, lsl #16
   4ce10:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ce14:	mov	x0, #0x9220                	// #37408
   4ce18:	movk	x0, #0x2, lsl #16
   4ce1c:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ce20:	mov	x0, #0x9190                	// #37264
   4ce24:	movk	x0, #0x2, lsl #16
   4ce28:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ce2c:	mov	x0, #0x9100                	// #37120
   4ce30:	movk	x0, #0x2, lsl #16
   4ce34:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ce38:	mov	x0, #0x9070                	// #36976
   4ce3c:	movk	x0, #0x2, lsl #16
   4ce40:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ce44:	mov	x0, #0x8fe0                	// #36832
   4ce48:	movk	x0, #0x2, lsl #16
   4ce4c:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ce50:	mov	x0, #0x8f50                	// #36688
   4ce54:	movk	x0, #0x2, lsl #16
   4ce58:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ce5c:	mov	x0, #0x8ec0                	// #36544
   4ce60:	movk	x0, #0x2, lsl #16
   4ce64:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ce68:	mov	x0, #0x8e30                	// #36400
   4ce6c:	movk	x0, #0x2, lsl #16
   4ce70:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ce74:	mov	x0, #0x8da0                	// #36256
   4ce78:	movk	x0, #0x2, lsl #16
   4ce7c:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ce80:	mov	x0, #0x8d10                	// #36112
   4ce84:	movk	x0, #0x2, lsl #16
   4ce88:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ce8c:	mov	x0, #0x8c80                	// #35968
   4ce90:	movk	x0, #0x2, lsl #16
   4ce94:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ce98:	mov	x0, #0x8bf0                	// #35824
   4ce9c:	movk	x0, #0x2, lsl #16
   4cea0:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cea4:	mov	x0, #0x8b60                	// #35680
   4cea8:	movk	x0, #0x2, lsl #16
   4ceac:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ceb0:	mov	x0, #0x8ad0                	// #35536
   4ceb4:	movk	x0, #0x2, lsl #16
   4ceb8:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cebc:	mov	x0, #0x8a40                	// #35392
   4cec0:	movk	x0, #0x2, lsl #16
   4cec4:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cec8:	mov	x0, #0x89b0                	// #35248
   4cecc:	movk	x0, #0x2, lsl #16
   4ced0:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ced4:	mov	x0, #0x8920                	// #35104
   4ced8:	movk	x0, #0x2, lsl #16
   4cedc:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cee0:	mov	x0, #0x8890                	// #34960
   4cee4:	movk	x0, #0x2, lsl #16
   4cee8:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4ceec:	mov	x0, #0x8800                	// #34816
   4cef0:	movk	x0, #0x2, lsl #16
   4cef4:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cef8:	mov	x0, #0x8770                	// #34672
   4cefc:	movk	x0, #0x2, lsl #16
   4cf00:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cf04:	mov	x0, #0x86e0                	// #34528
   4cf08:	movk	x0, #0x2, lsl #16
   4cf0c:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cf10:	mov	x0, #0x8650                	// #34384
   4cf14:	movk	x0, #0x2, lsl #16
   4cf18:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cf1c:	mov	x0, #0x85c0                	// #34240
   4cf20:	movk	x0, #0x2, lsl #16
   4cf24:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cf28:	mov	x0, #0x8530                	// #34096
   4cf2c:	movk	x0, #0x2, lsl #16
   4cf30:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cf34:	mov	x0, #0x84a0                	// #33952
   4cf38:	movk	x0, #0x2, lsl #16
   4cf3c:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cf40:	mov	x0, #0x8410                	// #33808
   4cf44:	movk	x0, #0x2, lsl #16
   4cf48:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cf4c:	mov	x0, #0x8380                	// #33664
   4cf50:	movk	x0, #0x2, lsl #16
   4cf54:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cf58:	mov	x0, #0x82f0                	// #33520
   4cf5c:	movk	x0, #0x2, lsl #16
   4cf60:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cf64:	mov	x0, #0x8260                	// #33376
   4cf68:	movk	x0, #0x2, lsl #16
   4cf6c:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cf70:	mov	x0, #0x81d0                	// #33232
   4cf74:	movk	x0, #0x2, lsl #16
   4cf78:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cf7c:	mov	x0, #0x8140                	// #33088
   4cf80:	movk	x0, #0x2, lsl #16
   4cf84:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cf88:	mov	x0, #0x80b0                	// #32944
   4cf8c:	movk	x0, #0x2, lsl #16
   4cf90:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cf94:	mov	x0, #0x8020                	// #32800
   4cf98:	movk	x0, #0x2, lsl #16
   4cf9c:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cfa0:	mov	x0, #0x7f90                	// #32656
   4cfa4:	movk	x0, #0x2, lsl #16
   4cfa8:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cfac:	mov	x0, #0x7f00                	// #32512
   4cfb0:	movk	x0, #0x2, lsl #16
   4cfb4:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cfb8:	mov	x0, #0x7e70                	// #32368
   4cfbc:	movk	x0, #0x2, lsl #16
   4cfc0:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cfc4:	mov	x0, #0x7de0                	// #32224
   4cfc8:	movk	x0, #0x2, lsl #16
   4cfcc:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cfd0:	mov	x0, #0x7d50                	// #32080
   4cfd4:	movk	x0, #0x2, lsl #16
   4cfd8:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cfdc:	mov	x0, #0x3670                	// #13936
   4cfe0:	movk	x0, #0x2, lsl #16
   4cfe4:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cfe8:	mov	x0, #0x3430                	// #13360
   4cfec:	movk	x0, #0x2, lsl #16
   4cff0:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4cff4:	mov	x0, #0x3310                	// #13072
   4cff8:	movk	x0, #0x2, lsl #16
   4cffc:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4d000:	mov	x0, #0x3040                	// #12352
   4d004:	movk	x0, #0x2, lsl #16
   4d008:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4d00c:	mov	x0, #0x2e90                	// #11920
   4d010:	movk	x0, #0x2, lsl #16
   4d014:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4d018:	mov	x0, #0x2d70                	// #11632
   4d01c:	movk	x0, #0x2, lsl #16
   4d020:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4d024:	mov	x0, #0xaa60                	// #43616
   4d028:	movk	x0, #0x1, lsl #16
   4d02c:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4d030:	mov	x0, #0xa430                	// #42032
   4d034:	movk	x0, #0x1, lsl #16
   4d038:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4d03c:	mov	x0, #0xa310                	// #41744
   4d040:	movk	x0, #0x1, lsl #16
   4d044:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4d048:	mov	x0, #0xa160                	// #41312
   4d04c:	movk	x0, #0x1, lsl #16
   4d050:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4d054:	mov	x0, #0xa040                	// #41024
   4d058:	movk	x0, #0x1, lsl #16
   4d05c:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4d060:	mov	x0, #0x9f20                	// #40736
   4d064:	movk	x0, #0x1, lsl #16
   4d068:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4d06c:	mov	x0, #0x9e00                	// #40448
   4d070:	movk	x0, #0x1, lsl #16
   4d074:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4d078:	mov	x0, #0x96b0                	// #38576
   4d07c:	movk	x0, #0x1, lsl #16
   4d080:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4d084:	mov	x0, #0x9500                	// #38144
   4d088:	movk	x0, #0x1, lsl #16
   4d08c:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4d090:	mov	x0, #0x93e0                	// #37856
   4d094:	movk	x0, #0x1, lsl #16
   4d098:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4d09c:	mov	x0, #0x92c0                	// #37568
   4d0a0:	movk	x0, #0x1, lsl #16
   4d0a4:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4d0a8:	mov	x0, #0x91a0                	// #37280
   4d0ac:	movk	x0, #0x1, lsl #16
   4d0b0:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4d0b4:	mov	x0, #0x8300                	// #33536
   4d0b8:	movk	x0, #0x1, lsl #16
   4d0bc:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4d0c0:	mov	x0, #0x78e0                	// #30944
   4d0c4:	movk	x0, #0x1, lsl #16
   4d0c8:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4d0cc:	mov	x0, #0x77c0                	// #30656
   4d0d0:	movk	x0, #0x1, lsl #16
   4d0d4:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4d0d8:	mov	x0, #0x7610                	// #30224
   4d0dc:	movk	x0, #0x1, lsl #16
   4d0e0:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4d0e4:	mov	x0, #0x6410                	// #25616
   4d0e8:	movk	x0, #0x1, lsl #16
   4d0ec:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>
   4d0f0:	mov	x0, #0x5610                	// #22032
   4d0f4:	b	4ca40 <aarch64_find_alias_opcode@@Base+0x60>

000000000004d0f8 <aarch64_find_next_alias_opcode@@Base>:
   4d0f8:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   4d0fc:	mov	x2, #0x8e39                	// #36409
   4d100:	movk	x2, #0x38e3, lsl #16
   4d104:	ldr	x3, [x1, #3848]
   4d108:	movk	x2, #0xe38e, lsl #32
   4d10c:	movk	x2, #0x8e38, lsl #48
   4d110:	sub	x0, x0, x3
   4d114:	asr	x0, x0, #4
   4d118:	mul	x0, x0, x2
   4d11c:	cmp	w0, #0x4f8
   4d120:	b.gt	4d170 <aarch64_find_next_alias_opcode@@Base+0x78>
   4d124:	cmp	w0, #0x2
   4d128:	b.le	4d168 <aarch64_find_next_alias_opcode@@Base+0x70>
   4d12c:	sub	w0, w0, #0x3
   4d130:	cmp	w0, #0x4f5
   4d134:	b.hi	4d168 <aarch64_find_next_alias_opcode@@Base+0x70>  // b.pmore
   4d138:	adrp	x2, 60000 <fields@@Base+0x12d8>
   4d13c:	add	x2, x2, #0xf10
   4d140:	ldrh	w0, [x2, w0, uxtw #1]
   4d144:	adr	x2, 4d150 <aarch64_find_next_alias_opcode@@Base+0x58>
   4d148:	add	x0, x2, w0, sxth #2
   4d14c:	br	x0
   4d150:	mov	x0, #0x240                 	// #576
   4d154:	ldr	x1, [x1, #3848]
   4d158:	add	x0, x0, x1
   4d15c:	ret
   4d160:	mov	x0, #0x120                 	// #288
   4d164:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d168:	mov	x0, #0x0                   	// #0
   4d16c:	ret
   4d170:	cmp	w0, #0x7f7
   4d174:	b.eq	4d274 <aarch64_find_next_alias_opcode@@Base+0x17c>  // b.none
   4d178:	b.le	4d1a4 <aarch64_find_next_alias_opcode@@Base+0xac>
   4d17c:	cmp	w0, #0x7fb
   4d180:	b.eq	4d268 <aarch64_find_next_alias_opcode@@Base+0x170>  // b.none
   4d184:	b.le	4d1cc <aarch64_find_next_alias_opcode@@Base+0xd4>
   4d188:	cmp	w0, #0x7fc
   4d18c:	b.eq	4d238 <aarch64_find_next_alias_opcode@@Base+0x140>  // b.none
   4d190:	cmp	w0, #0x7fd
   4d194:	b.ne	4d168 <aarch64_find_next_alias_opcode@@Base+0x70>  // b.any
   4d198:	mov	x0, #0xdb30                	// #56112
   4d19c:	movk	x0, #0x3, lsl #16
   4d1a0:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d1a4:	cmp	w0, #0x7f4
   4d1a8:	b.eq	4d25c <aarch64_find_next_alias_opcode@@Base+0x164>  // b.none
   4d1ac:	b.le	4d1e8 <aarch64_find_next_alias_opcode@@Base+0xf0>
   4d1b0:	cmp	w0, #0x7f5
   4d1b4:	b.eq	4d22c <aarch64_find_next_alias_opcode@@Base+0x134>  // b.none
   4d1b8:	cmp	w0, #0x7f6
   4d1bc:	b.ne	4d168 <aarch64_find_next_alias_opcode@@Base+0x70>  // b.any
   4d1c0:	mov	x0, #0x2a0                 	// #672
   4d1c4:	movk	x0, #0x3, lsl #16
   4d1c8:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d1cc:	cmp	w0, #0x7f9
   4d1d0:	b.eq	4d250 <aarch64_find_next_alias_opcode@@Base+0x158>  // b.none
   4d1d4:	cmp	w0, #0x7fa
   4d1d8:	b.ne	4d204 <aarch64_find_next_alias_opcode@@Base+0x10c>  // b.any
   4d1dc:	mov	x0, #0x1020                	// #4128
   4d1e0:	movk	x0, #0x3, lsl #16
   4d1e4:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d1e8:	cmp	w0, #0x7f2
   4d1ec:	b.eq	4d244 <aarch64_find_next_alias_opcode@@Base+0x14c>  // b.none
   4d1f0:	cmp	w0, #0x7f3
   4d1f4:	b.ne	4d218 <aarch64_find_next_alias_opcode@@Base+0x120>  // b.any
   4d1f8:	mov	x0, #0xe9e0                	// #59872
   4d1fc:	movk	x0, #0x2, lsl #16
   4d200:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d204:	cmp	w0, #0x7f8
   4d208:	b.ne	4d168 <aarch64_find_next_alias_opcode@@Base+0x70>  // b.any
   4d20c:	mov	x0, #0x7b0                 	// #1968
   4d210:	movk	x0, #0x3, lsl #16
   4d214:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d218:	cmp	w0, #0x7f1
   4d21c:	b.ne	4d168 <aarch64_find_next_alias_opcode@@Base+0x70>  // b.any
   4d220:	mov	x0, #0xd1b0                	// #53680
   4d224:	movk	x0, #0x2, lsl #16
   4d228:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d22c:	mov	x0, #0xe8c0                	// #59584
   4d230:	movk	x0, #0x2, lsl #16
   4d234:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d238:	mov	x0, #0xc940                	// #51520
   4d23c:	movk	x0, #0x2, lsl #16
   4d240:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d244:	mov	x0, #0xe710                	// #59152
   4d248:	movk	x0, #0x2, lsl #16
   4d24c:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d250:	mov	x0, #0xf00                 	// #3840
   4d254:	movk	x0, #0x3, lsl #16
   4d258:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d25c:	mov	x0, #0xeb90                	// #60304
   4d260:	movk	x0, #0x2, lsl #16
   4d264:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d268:	mov	x0, #0xc5e0                	// #50656
   4d26c:	movk	x0, #0x2, lsl #16
   4d270:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d274:	mov	x0, #0x720                 	// #1824
   4d278:	movk	x0, #0x3, lsl #16
   4d27c:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d280:	mov	x0, #0x450                 	// #1104
   4d284:	movk	x0, #0x3, lsl #16
   4d288:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d28c:	mov	x0, #0x3c0                 	// #960
   4d290:	movk	x0, #0x3, lsl #16
   4d294:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d298:	mov	x0, #0xd360                	// #54112
   4d29c:	movk	x0, #0x2, lsl #16
   4d2a0:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d2a4:	mov	x0, #0xdce0                	// #56544
   4d2a8:	movk	x0, #0x3, lsl #16
   4d2ac:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d2b0:	mov	x0, #0xf910                	// #63760
   4d2b4:	movk	x0, #0x2, lsl #16
   4d2b8:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d2bc:	mov	x0, #0x50                  	// #80
   4d2c0:	movk	x0, #0x4, lsl #16
   4d2c4:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d2c8:	mov	x0, #0xd2d0                	// #53968
   4d2cc:	movk	x0, #0x2, lsl #16
   4d2d0:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d2d4:	mov	x0, #0xf880                	// #63616
   4d2d8:	movk	x0, #0x2, lsl #16
   4d2dc:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d2e0:	mov	x0, #0x3ffc0               	// #262080
   4d2e4:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d2e8:	mov	x0, #0xf7f0                	// #63472
   4d2ec:	movk	x0, #0x2, lsl #16
   4d2f0:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d2f4:	mov	x0, #0xf0                  	// #240
   4d2f8:	movk	x0, #0x3, lsl #16
   4d2fc:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d300:	mov	x0, #0x180                 	// #384
   4d304:	movk	x0, #0x3, lsl #16
   4d308:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d30c:	mov	x0, #0xc310                	// #49936
   4d310:	movk	x0, #0x2, lsl #16
   4d314:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d318:	mov	x0, #0xdc50                	// #56400
   4d31c:	movk	x0, #0x3, lsl #16
   4d320:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d324:	mov	x0, #0xffd0                	// #65488
   4d328:	movk	x0, #0x2, lsl #16
   4d32c:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d330:	mov	x0, #0x60                  	// #96
   4d334:	movk	x0, #0x3, lsl #16
   4d338:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d33c:	mov	x0, #0xdaa0                	// #55968
   4d340:	movk	x0, #0x3, lsl #16
   4d344:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d348:	mov	x0, #0x1380                	// #4992
   4d34c:	movk	x0, #0x3, lsl #16
   4d350:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d354:	mov	x0, #0x2070                	// #8304
   4d358:	movk	x0, #0x3, lsl #16
   4d35c:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d360:	mov	x0, #0xb620                	// #46624
   4d364:	movk	x0, #0x2, lsl #16
   4d368:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d36c:	mov	x0, #0xb590                	// #46480
   4d370:	movk	x0, #0x2, lsl #16
   4d374:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d378:	mov	x0, #0xb500                	// #46336
   4d37c:	movk	x0, #0x2, lsl #16
   4d380:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d384:	mov	x0, #0xb470                	// #46192
   4d388:	movk	x0, #0x2, lsl #16
   4d38c:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d390:	mov	x0, #0xb3e0                	// #46048
   4d394:	movk	x0, #0x2, lsl #16
   4d398:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d39c:	mov	x0, #0xb350                	// #45904
   4d3a0:	movk	x0, #0x2, lsl #16
   4d3a4:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d3a8:	mov	x0, #0xb2c0                	// #45760
   4d3ac:	movk	x0, #0x2, lsl #16
   4d3b0:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d3b4:	mov	x0, #0xa780                	// #42880
   4d3b8:	movk	x0, #0x2, lsl #16
   4d3bc:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d3c0:	mov	x0, #0xaf60                	// #44896
   4d3c4:	movk	x0, #0x2, lsl #16
   4d3c8:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d3cc:	mov	x0, #0xaed0                	// #44752
   4d3d0:	movk	x0, #0x2, lsl #16
   4d3d4:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d3d8:	mov	x0, #0xae40                	// #44608
   4d3dc:	movk	x0, #0x2, lsl #16
   4d3e0:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d3e4:	mov	x0, #0xadb0                	// #44464
   4d3e8:	movk	x0, #0x2, lsl #16
   4d3ec:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d3f0:	mov	x0, #0xad20                	// #44320
   4d3f4:	movk	x0, #0x2, lsl #16
   4d3f8:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d3fc:	mov	x0, #0xac90                	// #44176
   4d400:	movk	x0, #0x2, lsl #16
   4d404:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d408:	mov	x0, #0xac00                	// #44032
   4d40c:	movk	x0, #0x2, lsl #16
   4d410:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d414:	mov	x0, #0xa930                	// #43312
   4d418:	movk	x0, #0x2, lsl #16
   4d41c:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d420:	mov	x0, #0xa8a0                	// #43168
   4d424:	movk	x0, #0x2, lsl #16
   4d428:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d42c:	mov	x0, #0xa6f0                	// #42736
   4d430:	movk	x0, #0x2, lsl #16
   4d434:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d438:	mov	x0, #0xa660                	// #42592
   4d43c:	movk	x0, #0x2, lsl #16
   4d440:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d444:	mov	x0, #0xa5d0                	// #42448
   4d448:	movk	x0, #0x2, lsl #16
   4d44c:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d450:	mov	x0, #0xa540                	// #42304
   4d454:	movk	x0, #0x2, lsl #16
   4d458:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d45c:	mov	x0, #0xa4b0                	// #42160
   4d460:	movk	x0, #0x2, lsl #16
   4d464:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d468:	mov	x0, #0xa420                	// #42016
   4d46c:	movk	x0, #0x2, lsl #16
   4d470:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d474:	mov	x0, #0xa390                	// #41872
   4d478:	movk	x0, #0x2, lsl #16
   4d47c:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d480:	mov	x0, #0xa300                	// #41728
   4d484:	movk	x0, #0x2, lsl #16
   4d488:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d48c:	mov	x0, #0xa270                	// #41584
   4d490:	movk	x0, #0x2, lsl #16
   4d494:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d498:	mov	x0, #0xa1e0                	// #41440
   4d49c:	movk	x0, #0x2, lsl #16
   4d4a0:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d4a4:	mov	x0, #0xa150                	// #41296
   4d4a8:	movk	x0, #0x2, lsl #16
   4d4ac:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d4b0:	mov	x0, #0xa0c0                	// #41152
   4d4b4:	movk	x0, #0x2, lsl #16
   4d4b8:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d4bc:	mov	x0, #0xa030                	// #41008
   4d4c0:	movk	x0, #0x2, lsl #16
   4d4c4:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d4c8:	mov	x0, #0x9fa0                	// #40864
   4d4cc:	movk	x0, #0x2, lsl #16
   4d4d0:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d4d4:	mov	x0, #0x9f10                	// #40720
   4d4d8:	movk	x0, #0x2, lsl #16
   4d4dc:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d4e0:	mov	x0, #0x9970                	// #39280
   4d4e4:	movk	x0, #0x2, lsl #16
   4d4e8:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d4ec:	mov	x0, #0x9850                	// #38992
   4d4f0:	movk	x0, #0x2, lsl #16
   4d4f4:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d4f8:	mov	x0, #0x7c30                	// #31792
   4d4fc:	movk	x0, #0x2, lsl #16
   4d500:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d504:	mov	x0, #0x7a80                	// #31360
   4d508:	movk	x0, #0x2, lsl #16
   4d50c:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d510:	mov	x0, #0x78d0                	// #30928
   4d514:	movk	x0, #0x2, lsl #16
   4d518:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d51c:	mov	x0, #0x77b0                	// #30640
   4d520:	movk	x0, #0x2, lsl #16
   4d524:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d528:	mov	x0, #0x7720                	// #30496
   4d52c:	movk	x0, #0x2, lsl #16
   4d530:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d534:	mov	x0, #0x7690                	// #30352
   4d538:	movk	x0, #0x2, lsl #16
   4d53c:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d540:	mov	x0, #0x7570                	// #30064
   4d544:	movk	x0, #0x2, lsl #16
   4d548:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d54c:	mov	x0, #0x73c0                	// #29632
   4d550:	movk	x0, #0x2, lsl #16
   4d554:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d558:	mov	x0, #0x7210                	// #29200
   4d55c:	movk	x0, #0x2, lsl #16
   4d560:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d564:	mov	x0, #0x70f0                	// #28912
   4d568:	movk	x0, #0x2, lsl #16
   4d56c:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d570:	mov	x0, #0x7060                	// #28768
   4d574:	movk	x0, #0x2, lsl #16
   4d578:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d57c:	mov	x0, #0x6fd0                	// #28624
   4d580:	movk	x0, #0x2, lsl #16
   4d584:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d588:	mov	x0, #0x6eb0                	// #28336
   4d58c:	movk	x0, #0x2, lsl #16
   4d590:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d594:	mov	x0, #0x6d00                	// #27904
   4d598:	movk	x0, #0x2, lsl #16
   4d59c:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d5a0:	mov	x0, #0x6b50                	// #27472
   4d5a4:	movk	x0, #0x2, lsl #16
   4d5a8:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d5ac:	mov	x0, #0x6a30                	// #27184
   4d5b0:	movk	x0, #0x2, lsl #16
   4d5b4:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d5b8:	mov	x0, #0x69a0                	// #27040
   4d5bc:	movk	x0, #0x2, lsl #16
   4d5c0:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d5c4:	mov	x0, #0x6910                	// #26896
   4d5c8:	movk	x0, #0x2, lsl #16
   4d5cc:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d5d0:	mov	x0, #0x67f0                	// #26608
   4d5d4:	movk	x0, #0x2, lsl #16
   4d5d8:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d5dc:	mov	x0, #0x6640                	// #26176
   4d5e0:	movk	x0, #0x2, lsl #16
   4d5e4:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d5e8:	mov	x0, #0x6490                	// #25744
   4d5ec:	movk	x0, #0x2, lsl #16
   4d5f0:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d5f4:	mov	x0, #0x6370                	// #25456
   4d5f8:	movk	x0, #0x2, lsl #16
   4d5fc:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d600:	mov	x0, #0x62e0                	// #25312
   4d604:	movk	x0, #0x2, lsl #16
   4d608:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d60c:	mov	x0, #0x6250                	// #25168
   4d610:	movk	x0, #0x2, lsl #16
   4d614:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d618:	mov	x0, #0x6130                	// #24880
   4d61c:	movk	x0, #0x2, lsl #16
   4d620:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d624:	mov	x0, #0x5f80                	// #24448
   4d628:	movk	x0, #0x2, lsl #16
   4d62c:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d630:	mov	x0, #0x5dd0                	// #24016
   4d634:	movk	x0, #0x2, lsl #16
   4d638:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d63c:	mov	x0, #0x5cb0                	// #23728
   4d640:	movk	x0, #0x2, lsl #16
   4d644:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d648:	mov	x0, #0x5c20                	// #23584
   4d64c:	movk	x0, #0x2, lsl #16
   4d650:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d654:	mov	x0, #0x5b90                	// #23440
   4d658:	movk	x0, #0x2, lsl #16
   4d65c:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d660:	mov	x0, #0x5a70                	// #23152
   4d664:	movk	x0, #0x2, lsl #16
   4d668:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d66c:	mov	x0, #0x58c0                	// #22720
   4d670:	movk	x0, #0x2, lsl #16
   4d674:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d678:	mov	x0, #0x5710                	// #22288
   4d67c:	movk	x0, #0x2, lsl #16
   4d680:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d684:	mov	x0, #0x55f0                	// #22000
   4d688:	movk	x0, #0x2, lsl #16
   4d68c:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d690:	mov	x0, #0x5560                	// #21856
   4d694:	movk	x0, #0x2, lsl #16
   4d698:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d69c:	mov	x0, #0x54d0                	// #21712
   4d6a0:	movk	x0, #0x2, lsl #16
   4d6a4:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d6a8:	mov	x0, #0x53b0                	// #21424
   4d6ac:	movk	x0, #0x2, lsl #16
   4d6b0:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d6b4:	mov	x0, #0x5200                	// #20992
   4d6b8:	movk	x0, #0x2, lsl #16
   4d6bc:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d6c0:	mov	x0, #0x5050                	// #20560
   4d6c4:	movk	x0, #0x2, lsl #16
   4d6c8:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d6cc:	mov	x0, #0x4f30                	// #20272
   4d6d0:	movk	x0, #0x2, lsl #16
   4d6d4:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d6d8:	mov	x0, #0x4ea0                	// #20128
   4d6dc:	movk	x0, #0x2, lsl #16
   4d6e0:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d6e4:	mov	x0, #0x4e10                	// #19984
   4d6e8:	movk	x0, #0x2, lsl #16
   4d6ec:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d6f0:	mov	x0, #0x4cf0                	// #19696
   4d6f4:	movk	x0, #0x2, lsl #16
   4d6f8:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d6fc:	mov	x0, #0x4b40                	// #19264
   4d700:	movk	x0, #0x2, lsl #16
   4d704:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d708:	mov	x0, #0x4990                	// #18832
   4d70c:	movk	x0, #0x2, lsl #16
   4d710:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d714:	mov	x0, #0x4870                	// #18544
   4d718:	movk	x0, #0x2, lsl #16
   4d71c:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d720:	mov	x0, #0x47e0                	// #18400
   4d724:	movk	x0, #0x2, lsl #16
   4d728:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d72c:	mov	x0, #0x4750                	// #18256
   4d730:	movk	x0, #0x2, lsl #16
   4d734:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d738:	mov	x0, #0x35e0                	// #13792
   4d73c:	movk	x0, #0x2, lsl #16
   4d740:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d744:	mov	x0, #0x33a0                	// #13216
   4d748:	movk	x0, #0x2, lsl #16
   4d74c:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d750:	mov	x0, #0x3280                	// #12928
   4d754:	movk	x0, #0x2, lsl #16
   4d758:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d75c:	mov	x0, #0x31f0                	// #12784
   4d760:	movk	x0, #0x2, lsl #16
   4d764:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d768:	mov	x0, #0x2fb0                	// #12208
   4d76c:	movk	x0, #0x2, lsl #16
   4d770:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d774:	mov	x0, #0x2e00                	// #11776
   4d778:	movk	x0, #0x2, lsl #16
   4d77c:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d780:	mov	x0, #0x2ce0                	// #11488
   4d784:	movk	x0, #0x2, lsl #16
   4d788:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d78c:	mov	x0, #0xa9d0                	// #43472
   4d790:	movk	x0, #0x1, lsl #16
   4d794:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d798:	mov	x0, #0xa3a0                	// #41888
   4d79c:	movk	x0, #0x1, lsl #16
   4d7a0:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d7a4:	mov	x0, #0xa280                	// #41600
   4d7a8:	movk	x0, #0x1, lsl #16
   4d7ac:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d7b0:	mov	x0, #0xa0d0                	// #41168
   4d7b4:	movk	x0, #0x1, lsl #16
   4d7b8:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d7bc:	mov	x0, #0x9fb0                	// #40880
   4d7c0:	movk	x0, #0x1, lsl #16
   4d7c4:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d7c8:	mov	x0, #0x9e90                	// #40592
   4d7cc:	movk	x0, #0x1, lsl #16
   4d7d0:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d7d4:	mov	x0, #0x9d70                	// #40304
   4d7d8:	movk	x0, #0x1, lsl #16
   4d7dc:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d7e0:	mov	x0, #0x9620                	// #38432
   4d7e4:	movk	x0, #0x1, lsl #16
   4d7e8:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d7ec:	mov	x0, #0x9470                	// #38000
   4d7f0:	movk	x0, #0x1, lsl #16
   4d7f4:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d7f8:	mov	x0, #0x9350                	// #37712
   4d7fc:	movk	x0, #0x1, lsl #16
   4d800:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d804:	mov	x0, #0x9230                	// #37424
   4d808:	movk	x0, #0x1, lsl #16
   4d80c:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d810:	mov	x0, #0x9110                	// #37136
   4d814:	movk	x0, #0x1, lsl #16
   4d818:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d81c:	mov	x0, #0x8390                	// #33680
   4d820:	movk	x0, #0x1, lsl #16
   4d824:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d828:	mov	x0, #0x7850                	// #30800
   4d82c:	movk	x0, #0x1, lsl #16
   4d830:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d834:	mov	x0, #0x7730                	// #30512
   4d838:	movk	x0, #0x1, lsl #16
   4d83c:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d840:	mov	x0, #0x76a0                	// #30368
   4d844:	movk	x0, #0x1, lsl #16
   4d848:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d84c:	mov	x0, #0x7580                	// #30080
   4d850:	movk	x0, #0x1, lsl #16
   4d854:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d858:	mov	x0, #0x74f0                	// #29936
   4d85c:	movk	x0, #0x1, lsl #16
   4d860:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d864:	mov	x0, #0x64a0                	// #25760
   4d868:	movk	x0, #0x1, lsl #16
   4d86c:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d870:	mov	x0, #0x62f0                	// #25328
   4d874:	movk	x0, #0x1, lsl #16
   4d878:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d87c:	mov	x0, #0x6380                	// #25472
   4d880:	movk	x0, #0x1, lsl #16
   4d884:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d888:	mov	x0, #0x6530                	// #25904
   4d88c:	movk	x0, #0x1, lsl #16
   4d890:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d894:	mov	x0, #0x6260                	// #25184
   4d898:	movk	x0, #0x1, lsl #16
   4d89c:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d8a0:	mov	x0, #0x61d0                	// #25040
   4d8a4:	movk	x0, #0x1, lsl #16
   4d8a8:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d8ac:	mov	x0, #0x6020                	// #24608
   4d8b0:	movk	x0, #0x1, lsl #16
   4d8b4:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d8b8:	mov	x0, #0x6140                	// #24896
   4d8bc:	movk	x0, #0x1, lsl #16
   4d8c0:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d8c4:	mov	x0, #0x5f90                	// #24464
   4d8c8:	movk	x0, #0x1, lsl #16
   4d8cc:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d8d0:	mov	x0, #0x5cc0                	// #23744
   4d8d4:	movk	x0, #0x1, lsl #16
   4d8d8:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d8dc:	mov	x0, #0x5de0                	// #24032
   4d8e0:	movk	x0, #0x1, lsl #16
   4d8e4:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d8e8:	mov	x0, #0x5d50                	// #23888
   4d8ec:	movk	x0, #0x1, lsl #16
   4d8f0:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d8f4:	mov	x0, #0x5f00                	// #24320
   4d8f8:	movk	x0, #0x1, lsl #16
   4d8fc:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d900:	mov	x0, #0x5c30                	// #23600
   4d904:	movk	x0, #0x1, lsl #16
   4d908:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d90c:	mov	x0, #0x5ba0                	// #23456
   4d910:	movk	x0, #0x1, lsl #16
   4d914:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d918:	mov	x0, #0x2cf0                	// #11504
   4d91c:	movk	x0, #0x1, lsl #16
   4d920:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d924:	mov	x0, #0xe8e0                	// #59616
   4d928:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d92c:	mov	x0, #0xe7c0                	// #59328
   4d930:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d934:	mov	x0, #0xdb60                	// #56160
   4d938:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d93c:	mov	x0, #0xda40                	// #55872
   4d940:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d944:	mov	x0, #0xb250                	// #45648
   4d948:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d94c:	mov	x0, #0x8820                	// #34848
   4d950:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d954:	mov	x0, #0x57c0                	// #22464
   4d958:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d95c:	mov	x0, #0x56a0                	// #22176
   4d960:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d964:	mov	x0, #0x5580                	// #21888
   4d968:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d96c:	mov	x0, #0xea0                 	// #3744
   4d970:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d974:	mov	x0, #0xfc0                 	// #4032
   4d978:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d97c:	mov	x0, #0xd80                 	// #3456
   4d980:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d984:	mov	x0, #0xc60                 	// #3168
   4d988:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d98c:	mov	x0, #0x990                 	// #2448
   4d990:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d994:	mov	x0, #0x7e0                 	// #2016
   4d998:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d99c:	mov	x0, #0x6c0                 	// #1728
   4d9a0:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d9a4:	mov	x0, #0x5a0                 	// #1440
   4d9a8:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d9ac:	mov	x0, #0x3f0                 	// #1008
   4d9b0:	b	4d154 <aarch64_find_next_alias_opcode@@Base+0x5c>
   4d9b4:	nop

000000000004d9b8 <aarch64_extract_operand@@Base>:
   4d9b8:	adrp	x6, a2000 <aarch64_operands@@Base+0x16bc0>
   4d9bc:	mov	x5, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
   4d9c0:	movk	x5, #0xaaab
   4d9c4:	ldr	x6, [x6, #4032]
   4d9c8:	sub	x6, x0, x6
   4d9cc:	asr	x6, x6, #4
   4d9d0:	mul	x6, x6, x5
   4d9d4:	sub	w5, w6, #0x1
   4d9d8:	cmp	w5, #0xce
   4d9dc:	b.ls	4da08 <aarch64_extract_operand@@Base+0x50>  // b.plast
   4d9e0:	stp	x29, x30, [sp, #-16]!
   4d9e4:	adrp	x3, 61000 <fields@@Base+0x22d8>
   4d9e8:	adrp	x1, 61000 <fields@@Base+0x22d8>
   4d9ec:	mov	x29, sp
   4d9f0:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   4d9f4:	add	x3, x3, #0x9d0
   4d9f8:	add	x1, x1, #0x9e8
   4d9fc:	add	x0, x0, #0x4b0
   4da00:	mov	w2, #0x5dcb                	// #24011
   4da04:	bl	35ac0 <__assert_fail@plt>
   4da08:	adrp	x6, 61000 <fields@@Base+0x22d8>
   4da0c:	add	x6, x6, #0x8fc
   4da10:	ldrb	w5, [x6, w5, uxtw]
   4da14:	adr	x6, 4da20 <aarch64_extract_operand@@Base+0x68>
   4da18:	add	x5, x6, w5, sxtb #2
   4da1c:	br	x5
   4da20:	b	358c0 <aarch64_ext_regno@plt>
   4da24:	b	35720 <aarch64_ext_imm@plt>
   4da28:	b	35900 <aarch64_ext_sve_addr_rr_lsl@plt>
   4da2c:	b	35a50 <aarch64_ext_sve_addr_rz_xtw@plt>
   4da30:	b	354d0 <aarch64_ext_sve_quad_index@plt>
   4da34:	b	352b0 <aarch64_ext_reglane@plt>
   4da38:	b	35020 <aarch64_ext_sysins_op@plt>
   4da3c:	b	352a0 <aarch64_ext_addr_simm@plt>
   4da40:	b	35b60 <aarch64_ext_sve_addr_ri_u6@plt>
   4da44:	b	35460 <aarch64_ext_sve_addr_ri_s4xvl@plt>
   4da48:	b	35090 <aarch64_ext_sve_addr_zi_u5@plt>
   4da4c:	b	35180 <aarch64_ext_sve_shrimm@plt>
   4da50:	b	35190 <aarch64_ext_sve_shlimm@plt>
   4da54:	b	35af0 <aarch64_ext_imm_rotate1@plt>
   4da58:	b	355c0 <aarch64_ext_imm_rotate2@plt>
   4da5c:	b	35b10 <aarch64_ext_advsimd_imm_modified@plt>
   4da60:	b	35910 <aarch64_ext_sve_addr_ri_s4@plt>
   4da64:	b	355d0 <aarch64_ext_hint@plt>
   4da68:	b	359d0 <aarch64_ext_barrier@plt>
   4da6c:	b	35420 <aarch64_ext_limm@plt>
   4da70:	b	35370 <aarch64_ext_fpimm@plt>
   4da74:	b	354c0 <aarch64_ext_sve_reglist@plt>
   4da78:	b	35800 <aarch64_ext_advsimd_imm_shift@plt>
   4da7c:	b	35b90 <aarch64_ext_cond@plt>
   4da80:	b	358a0 <aarch64_ext_addr_simple@plt>
   4da84:	b	35ab0 <aarch64_ext_sve_limm_mov@plt>
   4da88:	b	35960 <aarch64_ext_imm_half@plt>
   4da8c:	b	351c0 <aarch64_ext_aimm@plt>
   4da90:	b	35260 <aarch64_ext_sve_addr_ri_s9xvl@plt>
   4da94:	b	359c0 <aarch64_ext_sve_addr_ri_s6xvl@plt>
   4da98:	b	350c0 <aarch64_ext_sysreg@plt>
   4da9c:	b	35b40 <aarch64_ext_simd_addr_post@plt>
   4daa0:	b	35b20 <aarch64_ext_pstatefield@plt>
   4daa4:	b	35320 <aarch64_ext_addr_simm10@plt>
   4daa8:	b	35350 <aarch64_ext_addr_offset@plt>
   4daac:	b	351a0 <aarch64_ext_addr_uimm12@plt>
   4dab0:	b	355b0 <aarch64_ext_sve_index@plt>
   4dab4:	b	35a70 <aarch64_ext_ft@plt>
   4dab8:	b	35580 <aarch64_ext_ldst_reglist@plt>
   4dabc:	b	35750 <aarch64_ext_reglist@plt>
   4dac0:	b	35a90 <aarch64_ext_reg_shifted@plt>
   4dac4:	b	353c0 <aarch64_ext_reg_extended@plt>
   4dac8:	b	35a60 <aarch64_ext_regno_pair@plt>
   4dacc:	b	35110 <aarch64_ext_regrt_sysins@plt>
   4dad0:	b	35500 <aarch64_ext_inv_limm@plt>
   4dad4:	b	357a0 <aarch64_ext_sve_float_zero_one@plt>
   4dad8:	b	35510 <aarch64_ext_sve_float_half_two@plt>
   4dadc:	b	359f0 <aarch64_ext_sve_float_half_one@plt>
   4dae0:	b	351e0 <aarch64_ext_sve_asimm@plt>
   4dae4:	b	357c0 <aarch64_ext_addr_regoff@plt>
   4dae8:	b	35880 <aarch64_ext_prfop@plt>
   4daec:	b	35660 <aarch64_ext_sve_addr_zz_lsl@plt>
   4daf0:	b	35120 <aarch64_ext_fbits@plt>
   4daf4:	b	35770 <aarch64_ext_shll_imm@plt>
   4daf8:	b	356c0 <aarch64_ext_ldst_elemlist@plt>
   4dafc:	b	35150 <aarch64_ext_ldst_reglist_r@plt>
   4db00:	b	35930 <aarch64_ext_sve_scale@plt>
   4db04:	b	356f0 <aarch64_ext_sve_aimm@plt>
   4db08:	b	357d0 <aarch64_ext_sve_addr_zz_uxtw@plt>
   4db0c:	b	35280 <aarch64_ext_sve_addr_zz_sxtw@plt>

000000000004db10 <aarch64_get_opcode@@Base>:
   4db10:	adrp	x2, 63000 <fields@@Base+0x42d8>
   4db14:	add	x2, x2, #0x910
   4db18:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   4db1c:	mov	w3, #0x90                  	// #144
   4db20:	ldr	x1, [x1, #3848]
   4db24:	ldr	w0, [x2, w0, uxtw #2]
   4db28:	umaddl	x0, w0, w3, x1
   4db2c:	ret
   4db30:	mov	x2, x0
   4db34:	cmp	w1, #0xdb
   4db38:	b.ls	4db44 <aarch64_get_opcode@@Base+0x34>  // b.plast
   4db3c:	mov	w0, #0x0                   	// #0
   4db40:	ret
   4db44:	adrp	x0, 63000 <fields@@Base+0x42d8>
   4db48:	add	x0, x0, #0xa58
   4db4c:	ldrh	w0, [x0, w1, uxtw #1]
   4db50:	adr	x3, 4db5c <aarch64_get_opcode@@Base+0x4c>
   4db54:	add	x0, x3, w0, sxth #2
   4db58:	br	x0
   4db5c:	lsr	x3, x2, #22
   4db60:	ubfx	x1, x2, #13, #3
   4db64:	mov	w0, #0x1                   	// #1
   4db68:	ubfiz	x3, x3, #3, #1
   4db6c:	orr	x1, x3, x1
   4db70:	cbz	x1, 4db40 <aarch64_get_opcode@@Base+0x30>
   4db74:	ubfx	x2, x2, #20, #2
   4db78:	cmp	x2, #0x3
   4db7c:	cset	w0, eq  // eq = none
   4db80:	ret
   4db84:	ubfx	x2, x2, #7, #2
   4db88:	cmp	x2, #0x3
   4db8c:	cset	w0, eq  // eq = none
   4db90:	ret
   4db94:	lsr	x3, x2, #22
   4db98:	ubfx	x1, x2, #13, #3
   4db9c:	mov	w0, #0x1                   	// #1
   4dba0:	ubfiz	x3, x3, #3, #1
   4dba4:	orr	x1, x3, x1
   4dba8:	cbz	x1, 4db40 <aarch64_get_opcode@@Base+0x30>
   4dbac:	tst	x2, #0x1000
   4dbb0:	and	x0, x2, #0x1
   4dbb4:	csel	w0, wzr, w0, ne  // ne = any
   4dbb8:	ret
   4dbbc:	lsr	x3, x2, #22
   4dbc0:	ubfx	x1, x2, #13, #3
   4dbc4:	mov	w0, #0x1                   	// #1
   4dbc8:	ubfiz	x3, x3, #3, #1
   4dbcc:	orr	x1, x3, x1
   4dbd0:	cbz	x1, 4db40 <aarch64_get_opcode@@Base+0x30>
   4dbd4:	and	x2, x2, #0xf
   4dbd8:	cmp	x2, #0xd
   4dbdc:	cset	w0, eq  // eq = none
   4dbe0:	ret
   4dbe4:	ubfx	x2, x2, #18, #2
   4dbe8:	cmp	x2, #0x3
   4dbec:	cset	w0, eq  // eq = none
   4dbf0:	ret
   4dbf4:	ubfx	x2, x2, #9, #3
   4dbf8:	cmp	x2, #0x7
   4dbfc:	cset	w0, eq  // eq = none
   4dc00:	ret
   4dc04:	tst	x2, #0x380000
   4dc08:	cset	w0, eq  // eq = none
   4dc0c:	ret
   4dc10:	ubfx	x2, x2, #20, #3
   4dc14:	cmp	x2, #0x7
   4dc18:	cset	w0, eq  // eq = none
   4dc1c:	ret
   4dc20:	lsr	x0, x2, #21
   4dc24:	orr	x0, x0, x2, lsr #24
   4dc28:	mvn	x0, x0
   4dc2c:	and	w0, w0, #0x1
   4dc30:	ret
   4dc34:	lsr	x0, x2, #21
   4dc38:	orr	x0, x0, x2, lsr #24
   4dc3c:	tbnz	w0, #0, 4db84 <aarch64_get_opcode@@Base+0x74>
   4dc40:	mov	w0, #0x1                   	// #1
   4dc44:	ret
   4dc48:	lsr	x1, x2, #8
   4dc4c:	mov	w0, #0x1                   	// #1
   4dc50:	tbz	w2, #8, 4db40 <aarch64_get_opcode@@Base+0x30>
   4dc54:	and	x1, x1, #0xc
   4dc58:	cmp	x1, #0xc
   4dc5c:	cset	w0, eq  // eq = none
   4dc60:	ret
   4dc64:	and	x3, x2, #0xf
   4dc68:	ubfx	x4, x2, #16, #4
   4dc6c:	cmp	x3, #0xf
   4dc70:	mov	w0, #0x1                   	// #1
   4dc74:	ccmp	x4, #0xf, #0x0, eq  // eq = none
   4dc78:	b.eq	4db40 <aarch64_get_opcode@@Base+0x30>  // b.none
   4dc7c:	cmp	x4, x3
   4dc80:	ccmp	x4, #0xf, #0x4, eq  // eq = none
   4dc84:	b.ne	4db40 <aarch64_get_opcode@@Base+0x30>  // b.any
   4dc88:	cmp	x3, #0xd
   4dc8c:	mov	w0, #0x1                   	// #1
   4dc90:	b.eq	4db40 <aarch64_get_opcode@@Base+0x30>  // b.none
   4dc94:	cmp	w1, #0xda
   4dc98:	mov	w0, #0x0                   	// #0
   4dc9c:	b.ne	4db40 <aarch64_get_opcode@@Base+0x30>  // b.any
   4dca0:	ubfx	x2, x2, #16, #4
   4dca4:	cmp	x2, x3
   4dca8:	cset	w0, eq  // eq = none
   4dcac:	ret
   4dcb0:	ubfx	x1, x2, #20, #2
   4dcb4:	mov	w0, #0x1                   	// #1
   4dcb8:	cmp	x1, #0x3
   4dcbc:	b.eq	4db40 <aarch64_get_opcode@@Base+0x30>  // b.none
   4dcc0:	ubfx	x2, x2, #1, #3
   4dcc4:	cmp	x2, #0x7
   4dcc8:	cset	w0, eq  // eq = none
   4dccc:	ret
   4dcd0:	and	x3, x2, #0xf
   4dcd4:	b	4dc88 <aarch64_get_opcode@@Base+0x178>
   4dcd8:	mov	w0, #0x0                   	// #0
   4dcdc:	tbz	w2, #5, 4db40 <aarch64_get_opcode@@Base+0x30>
   4dce0:	ubfx	x2, x2, #8, #4
   4dce4:	cmp	x2, #0xe
   4dce8:	cset	w0, ne  // ne = any
   4dcec:	ret
   4dcf0:	lsr	x2, x2, #16
   4dcf4:	tst	x2, #0x38
   4dcf8:	cset	w0, eq  // eq = none
   4dcfc:	ret
   4dd00:	tst	x2, #0x180000
   4dd04:	ubfx	x2, x2, #19, #2
   4dd08:	ccmp	x2, #0x3, #0x4, ne  // ne = any
   4dd0c:	cset	w0, eq  // eq = none
   4dd10:	ret
   4dd14:	lsr	x2, x2, #20
   4dd18:	and	x2, x2, #0x6
   4dd1c:	cmp	x2, #0x6
   4dd20:	cset	w0, eq  // eq = none
   4dd24:	ret
   4dd28:	ubfx	x0, x2, #8, #4
   4dd2c:	lsr	x2, x2, #8
   4dd30:	cmp	x0, #0xe
   4dd34:	mov	w0, #0x1                   	// #1
   4dd38:	b.eq	4db40 <aarch64_get_opcode@@Base+0x30>  // b.none
   4dd3c:	mov	x1, #0x9                   	// #9
   4dd40:	and	x1, x2, x1
   4dd44:	cmp	x1, #0x1
   4dd48:	b.eq	4db40 <aarch64_get_opcode@@Base+0x30>  // b.none
   4dd4c:	mov	x0, #0xd                   	// #13
   4dd50:	and	x2, x2, x0
   4dd54:	cmp	x2, #0x9
   4dd58:	cset	w0, eq  // eq = none
   4dd5c:	ret
   4dd60:	lsr	x1, x2, #22
   4dd64:	ubfx	x2, x2, #13, #3
   4dd68:	ubfiz	x1, x1, #3, #1
   4dd6c:	orr	x2, x1, x2
   4dd70:	cmp	x2, #0x0
   4dd74:	cset	w0, eq  // eq = none
   4dd78:	ret
   4dd7c:	ubfx	x2, x2, #16, #4
   4dd80:	cmp	x2, #0xf
   4dd84:	cset	w0, eq  // eq = none
   4dd88:	ret
   4dd8c:	tst	x2, #0x70000
   4dd90:	mov	w0, #0x0                   	// #0
   4dd94:	b.ne	4db40 <aarch64_get_opcode@@Base+0x30>  // b.any
   4dd98:	ubfx	x0, x2, #19, #2
   4dd9c:	sub	x0, x0, #0x1
   4dda0:	cmp	x0, #0x1
   4dda4:	cset	w0, ls  // ls = plast
   4dda8:	ret
   4ddac:	nop
   4ddb0:	mov	w4, #0x11                  	// #17
   4ddb4:	str	w4, [x2]
   4ddb8:	sub	w1, w1, #0x11
   4ddbc:	mov	x3, x0
   4ddc0:	cmp	w1, #0xb0
   4ddc4:	b.hi	4ddf0 <aarch64_get_opcode@@Base+0x2e0>  // b.pmore
   4ddc8:	adrp	x0, 63000 <fields@@Base+0x42d8>
   4ddcc:	add	x0, x0, #0xc10
   4ddd0:	ldrh	w0, [x0, w1, uxtw #1]
   4ddd4:	adr	x1, 4dde0 <aarch64_get_opcode@@Base+0x2d0>
   4ddd8:	add	x0, x1, w0, sxth #2
   4dddc:	br	x0
   4dde0:	ubfx	x3, x3, #18, #2
   4dde4:	cmp	x3, #0x3
   4dde8:	b.eq	4de14 <aarch64_get_opcode@@Base+0x304>  // b.none
   4ddec:	nop
   4ddf0:	mov	w0, #0x0                   	// #0
   4ddf4:	ret
   4ddf8:	lsr	x1, x3, #22
   4ddfc:	ubfx	x3, x3, #5, #1
   4de00:	mov	w0, #0x0                   	// #0
   4de04:	ubfiz	x1, x1, #1, #1
   4de08:	orr	x3, x1, x3
   4de0c:	cmp	x3, #0x3
   4de10:	b.ne	4ddf4 <aarch64_get_opcode@@Base+0x2e4>  // b.any
   4de14:	mov	w1, #0x3                   	// #3
   4de18:	mov	w0, #0x1                   	// #1
   4de1c:	str	w1, [x2]
   4de20:	ret
   4de24:	mov	w0, #0x0                   	// #0
   4de28:	tbnz	w3, #8, 4ddf4 <aarch64_get_opcode@@Base+0x2e4>
   4de2c:	mov	w1, #0x4                   	// #4
   4de30:	mov	w0, #0x1                   	// #1
   4de34:	str	w1, [x2]
   4de38:	ret
   4de3c:	ubfx	x3, x3, #7, #2
   4de40:	cmp	x3, #0x3
   4de44:	b.eq	4de14 <aarch64_get_opcode@@Base+0x304>  // b.none
   4de48:	mov	w0, #0x0                   	// #0
   4de4c:	b	4ddf4 <aarch64_get_opcode@@Base+0x2e4>
   4de50:	ubfx	x3, x3, #20, #2
   4de54:	cmp	x3, #0x3
   4de58:	b.eq	4de14 <aarch64_get_opcode@@Base+0x304>  // b.none
   4de5c:	mov	w0, #0x0                   	// #0
   4de60:	b	4ddf4 <aarch64_get_opcode@@Base+0x2e4>
   4de64:	ubfx	x0, x3, #19, #3
   4de68:	lsr	x3, x3, #19
   4de6c:	cmp	x0, #0x1
   4de70:	mov	w0, #0x0                   	// #0
   4de74:	b.eq	4ddf4 <aarch64_get_opcode@@Base+0x2e4>  // b.none
   4de78:	and	x1, x3, #0x6
   4de7c:	cmp	x1, #0x2
   4de80:	b.eq	4ddf4 <aarch64_get_opcode@@Base+0x2e4>  // b.none
   4de84:	tbnz	w3, #2, 4ddf4 <aarch64_get_opcode@@Base+0x2e4>
   4de88:	mov	w0, #0x1                   	// #1
   4de8c:	str	wzr, [x2]
   4de90:	ret
   4de94:	ubfx	x0, x3, #19, #2
   4de98:	lsr	x3, x3, #19
   4de9c:	cmp	x0, #0x1
   4dea0:	mov	w0, #0x0                   	// #0
   4dea4:	b.eq	4ddf4 <aarch64_get_opcode@@Base+0x2e4>  // b.none
   4dea8:	tbz	w3, #1, 4de88 <aarch64_get_opcode@@Base+0x378>
   4deac:	ret
   4deb0:	tst	x3, #0xc0000
   4deb4:	ubfx	x3, x3, #18, #2
   4deb8:	b.ne	4dde4 <aarch64_get_opcode@@Base+0x2d4>  // b.any
   4debc:	mov	w1, #0x1                   	// #1
   4dec0:	mov	w0, w1
   4dec4:	str	w1, [x2]
   4dec8:	ret
   4decc:	mov	w1, #0x10001000            	// #268439552
   4ded0:	mov	w0, #0x0                   	// #0
   4ded4:	bics	xzr, x1, x3
   4ded8:	b.ne	4ddf4 <aarch64_get_opcode@@Base+0x2e4>  // b.any
   4dedc:	mov	w1, #0x10                  	// #16
   4dee0:	mov	w0, #0x1                   	// #1
   4dee4:	str	w1, [x2]
   4dee8:	ret
   4deec:	tst	x3, #0x180000
   4def0:	b.eq	4debc <aarch64_get_opcode@@Base+0x3ac>  // b.none
   4def4:	mov	w0, #0x0                   	// #0
   4def8:	b	4ddf4 <aarch64_get_opcode@@Base+0x2e4>
   4defc:	ubfx	x3, x3, #18, #2
   4df00:	mov	w0, #0x0                   	// #0
   4df04:	cmp	x3, #0x2
   4df08:	b.ne	4ddf4 <aarch64_get_opcode@@Base+0x2e4>  // b.any
   4df0c:	mov	w1, #0x2                   	// #2
   4df10:	mov	w0, #0x1                   	// #1
   4df14:	str	w1, [x2]
   4df18:	ret
   4df1c:	ubfx	x0, x3, #7, #2
   4df20:	cmp	x0, #0x3
   4df24:	b.eq	4de14 <aarch64_get_opcode@@Base+0x304>  // b.none
   4df28:	cmp	x0, #0x1
   4df2c:	mvn	x3, x3, lsr #28
   4df30:	cset	w1, eq  // eq = none
   4df34:	tst	w1, w3
   4df38:	b.ne	4e120 <aarch64_get_opcode@@Base+0x610>  // b.any
   4df3c:	cbz	x0, 4debc <aarch64_get_opcode@@Base+0x3ac>
   4df40:	mov	w0, #0x0                   	// #0
   4df44:	b	4ddf4 <aarch64_get_opcode@@Base+0x2e4>
   4df48:	ubfx	x1, x3, #5, #2
   4df4c:	mov	w0, #0x0                   	// #0
   4df50:	cmp	x1, #0x2
   4df54:	b.ne	4ddf4 <aarch64_get_opcode@@Base+0x2e4>  // b.any
   4df58:	tbnz	w3, #22, 4ddf4 <aarch64_get_opcode@@Base+0x2e4>
   4df5c:	mov	w1, #0xd                   	// #13
   4df60:	mov	w0, #0x1                   	// #1
   4df64:	str	w1, [x2]
   4df68:	ret
   4df6c:	lsr	x1, x3, #16
   4df70:	tbz	w3, #21, 4e110 <aarch64_get_opcode@@Base+0x600>
   4df74:	mov	w0, #0x0                   	// #0
   4df78:	tbnz	w3, #9, 4ddf4 <aarch64_get_opcode@@Base+0x2e4>
   4df7c:	and	x1, x1, #0x30
   4df80:	cmp	x1, #0x20
   4df84:	b.ne	4ddf4 <aarch64_get_opcode@@Base+0x2e4>  // b.any
   4df88:	mov	w1, #0xc                   	// #12
   4df8c:	mov	w0, #0x1                   	// #1
   4df90:	str	w1, [x2]
   4df94:	ret
   4df98:	ubfx	x3, x3, #7, #2
   4df9c:	cmp	x3, #0x3
   4dfa0:	b.eq	4ddf0 <aarch64_get_opcode@@Base+0x2e0>  // b.none
   4dfa4:	mov	w1, #0x7                   	// #7
   4dfa8:	mov	w0, #0x1                   	// #1
   4dfac:	str	w1, [x2]
   4dfb0:	ret
   4dfb4:	tst	x3, #0x60
   4dfb8:	ubfx	w0, w3, #23, #1
   4dfbc:	lsr	x1, x3, #21
   4dfc0:	csel	w0, w0, wzr, eq  // eq = none
   4dfc4:	ubfx	x3, x3, #5, #2
   4dfc8:	cbz	w0, 4e0fc <aarch64_get_opcode@@Base+0x5ec>
   4dfcc:	mov	w0, #0x0                   	// #0
   4dfd0:	tbnz	w1, #1, 4ddf4 <aarch64_get_opcode@@Base+0x2e4>
   4dfd4:	mov	w1, #0xe                   	// #14
   4dfd8:	mov	w0, #0x1                   	// #1
   4dfdc:	str	w1, [x2]
   4dfe0:	ret
   4dfe4:	lsr	x0, x3, #22
   4dfe8:	orr	x3, x0, x3, lsr #5
   4dfec:	and	w0, w3, #0x1
   4dff0:	ret
   4dff4:	ubfx	x3, x3, #7, #2
   4dff8:	cmp	x3, #0x2
   4dffc:	b.eq	4ddf0 <aarch64_get_opcode@@Base+0x2e0>  // b.none
   4e000:	mov	w1, #0x6                   	// #6
   4e004:	mov	w0, #0x1                   	// #1
   4e008:	str	w1, [x2]
   4e00c:	ret
   4e010:	mov	w0, #0x0                   	// #0
   4e014:	tbnz	w3, #5, 4ddf4 <aarch64_get_opcode@@Base+0x2e4>
   4e018:	lsr	x1, x3, #8
   4e01c:	mov	x3, #0x9                   	// #9
   4e020:	and	x3, x1, x3
   4e024:	cmp	x3, #0x1
   4e028:	b.eq	4e03c <aarch64_get_opcode@@Base+0x52c>  // b.none
   4e02c:	mov	x3, #0x5                   	// #5
   4e030:	and	x1, x1, x3
   4e034:	cmp	x1, #0x1
   4e038:	b.ne	4ddf4 <aarch64_get_opcode@@Base+0x2e4>  // b.any
   4e03c:	mov	w1, #0xf                   	// #15
   4e040:	mov	w0, #0x1                   	// #1
   4e044:	str	w1, [x2]
   4e048:	ret
   4e04c:	tst	x3, #0xc0000
   4e050:	mov	w0, #0x0                   	// #0
   4e054:	b.eq	4ddf4 <aarch64_get_opcode@@Base+0x2e4>  // b.none
   4e058:	mov	w1, #0x5                   	// #5
   4e05c:	mov	w0, #0x1                   	// #1
   4e060:	str	w1, [x2]
   4e064:	ret
   4e068:	ubfx	x3, x3, #7, #2
   4e06c:	cmp	x3, #0x3
   4e070:	b.eq	4de14 <aarch64_get_opcode@@Base+0x304>  // b.none
   4e074:	cbz	x3, 4debc <aarch64_get_opcode@@Base+0x3ac>
   4e078:	mov	w0, #0x0                   	// #0
   4e07c:	b	4ddf4 <aarch64_get_opcode@@Base+0x2e4>
   4e080:	ubfx	x0, x3, #7, #2
   4e084:	cmp	x0, #0x3
   4e088:	b.ne	4dfa4 <aarch64_get_opcode@@Base+0x494>  // b.any
   4e08c:	mov	w0, #0x0                   	// #0
   4e090:	tbnz	w3, #28, 4ddf4 <aarch64_get_opcode@@Base+0x2e4>
   4e094:	mov	w1, #0xa                   	// #10
   4e098:	mov	w0, #0x1                   	// #1
   4e09c:	str	w1, [x2]
   4e0a0:	ret
   4e0a4:	ubfx	x0, x3, #7, #2
   4e0a8:	cmp	x0, #0x2
   4e0ac:	b.eq	4e08c <aarch64_get_opcode@@Base+0x57c>  // b.none
   4e0b0:	b	4e000 <aarch64_get_opcode@@Base+0x4f0>
   4e0b4:	tst	x3, #0x180
   4e0b8:	mov	w0, #0x0                   	// #0
   4e0bc:	b.eq	4debc <aarch64_get_opcode@@Base+0x3ac>  // b.none
   4e0c0:	ret
   4e0c4:	tbnz	w3, #19, 4df0c <aarch64_get_opcode@@Base+0x3fc>
   4e0c8:	mov	w0, #0x0                   	// #0
   4e0cc:	b	4ddf4 <aarch64_get_opcode@@Base+0x2e4>
   4e0d0:	ubfx	x4, x3, #7, #2
   4e0d4:	cmp	x4, #0x3
   4e0d8:	b.eq	4de14 <aarch64_get_opcode@@Base+0x304>  // b.none
   4e0dc:	ubfx	x1, x3, #28, #1
   4e0e0:	mov	w0, #0x0                   	// #0
   4e0e4:	orr	x1, x1, x4
   4e0e8:	cbnz	x1, 4ddf4 <aarch64_get_opcode@@Base+0x2e4>
   4e0ec:	mov	w1, #0x8                   	// #8
   4e0f0:	mov	w0, #0x1                   	// #1
   4e0f4:	str	w1, [x2]
   4e0f8:	ret
   4e0fc:	cmp	x3, #0x2
   4e100:	mov	w0, #0x0                   	// #0
   4e104:	b.ne	4ddf4 <aarch64_get_opcode@@Base+0x2e4>  // b.any
   4e108:	tbz	w1, #1, 4df5c <aarch64_get_opcode@@Base+0x44c>
   4e10c:	ret
   4e110:	mov	w1, #0xb                   	// #11
   4e114:	mov	w0, #0x1                   	// #1
   4e118:	str	w1, [x2]
   4e11c:	ret
   4e120:	mov	w1, #0x9                   	// #9
   4e124:	mov	w0, #0x1                   	// #1
   4e128:	str	w1, [x2]
   4e12c:	ret
   4e130:	sub	w0, w0, #0xf
   4e134:	cmp	w0, #0x6f
   4e138:	b.ls	4e144 <aarch64_get_opcode@@Base+0x634>  // b.plast
   4e13c:	mov	x0, #0x0                   	// #0
   4e140:	ret
   4e144:	adrp	x1, 63000 <fields@@Base+0x42d8>
   4e148:	add	x1, x1, #0xd74
   4e14c:	ldrb	w0, [x1, w0, uxtw]
   4e150:	adr	x1, 4e15c <aarch64_get_opcode@@Base+0x64c>
   4e154:	add	x0, x1, w0, sxtb #2
   4e158:	br	x0
   4e15c:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e160:	add	x0, x0, #0x720
   4e164:	ret
   4e168:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e16c:	add	x0, x0, #0x710
   4e170:	ret
   4e174:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e178:	add	x0, x0, #0x700
   4e17c:	ret
   4e180:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e184:	add	x0, x0, #0x6f0
   4e188:	ret
   4e18c:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e190:	add	x0, x0, #0x6e0
   4e194:	ret
   4e198:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e19c:	add	x0, x0, #0x6d0
   4e1a0:	ret
   4e1a4:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e1a8:	add	x0, x0, #0x6c0
   4e1ac:	ret
   4e1b0:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e1b4:	add	x0, x0, #0x6b8
   4e1b8:	ret
   4e1bc:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e1c0:	add	x0, x0, #0x6b0
   4e1c4:	ret
   4e1c8:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e1cc:	add	x0, x0, #0x6a8
   4e1d0:	ret
   4e1d4:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e1d8:	add	x0, x0, #0x6a0
   4e1dc:	ret
   4e1e0:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e1e4:	add	x0, x0, #0x698
   4e1e8:	ret
   4e1ec:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e1f0:	add	x0, x0, #0x690
   4e1f4:	ret
   4e1f8:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e1fc:	add	x0, x0, #0x688
   4e200:	ret
   4e204:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e208:	add	x0, x0, #0x680
   4e20c:	ret
   4e210:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e214:	add	x0, x0, #0x678
   4e218:	ret
   4e21c:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e220:	add	x0, x0, #0x670
   4e224:	ret
   4e228:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e22c:	add	x0, x0, #0x668
   4e230:	ret
   4e234:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e238:	add	x0, x0, #0x660
   4e23c:	ret
   4e240:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e244:	add	x0, x0, #0x658
   4e248:	ret
   4e24c:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e250:	add	x0, x0, #0x650
   4e254:	ret
   4e258:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e25c:	add	x0, x0, #0x648
   4e260:	ret
   4e264:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e268:	add	x0, x0, #0x640
   4e26c:	ret
   4e270:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e274:	add	x0, x0, #0x638
   4e278:	ret
   4e27c:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e280:	add	x0, x0, #0x630
   4e284:	ret
   4e288:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e28c:	add	x0, x0, #0x628
   4e290:	ret
   4e294:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e298:	add	x0, x0, #0x620
   4e29c:	ret
   4e2a0:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e2a4:	add	x0, x0, #0x618
   4e2a8:	ret
   4e2ac:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e2b0:	add	x0, x0, #0x610
   4e2b4:	ret
   4e2b8:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e2bc:	add	x0, x0, #0x608
   4e2c0:	ret
   4e2c4:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e2c8:	add	x0, x0, #0x600
   4e2cc:	ret
   4e2d0:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e2d4:	add	x0, x0, #0x5f8
   4e2d8:	ret
   4e2dc:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e2e0:	add	x0, x0, #0x5f0
   4e2e4:	ret
   4e2e8:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e2ec:	add	x0, x0, #0x5e8
   4e2f0:	ret
   4e2f4:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e2f8:	add	x0, x0, #0x730
   4e2fc:	ret
   4e300:	cmp	w0, #0x9
   4e304:	b.eq	4e3e4 <aarch64_get_opcode@@Base+0x8d4>  // b.none
   4e308:	b.hi	4e364 <aarch64_get_opcode@@Base+0x854>  // b.pmore
   4e30c:	cmp	w0, #0x5
   4e310:	b.eq	4e3d8 <aarch64_get_opcode@@Base+0x8c8>  // b.none
   4e314:	b.hi	4e348 <aarch64_get_opcode@@Base+0x838>  // b.pmore
   4e318:	cmp	w0, #0x2
   4e31c:	b.eq	4e3c0 <aarch64_get_opcode@@Base+0x8b0>  // b.none
   4e320:	cmp	w0, #0x3
   4e324:	b.ne	4e334 <aarch64_get_opcode@@Base+0x824>  // b.any
   4e328:	adrp	x0, 5e000 <xexit@@Base+0x6e08>
   4e32c:	add	x0, x0, #0x478
   4e330:	ret
   4e334:	cmp	w0, #0x1
   4e338:	b.ne	4e3f0 <aarch64_get_opcode@@Base+0x8e0>  // b.any
   4e33c:	adrp	x0, 5e000 <xexit@@Base+0x6e08>
   4e340:	add	x0, x0, #0x468
   4e344:	ret
   4e348:	cmp	w0, #0x6
   4e34c:	b.eq	4e3a8 <aarch64_get_opcode@@Base+0x898>  // b.none
   4e350:	cmp	w0, #0x7
   4e354:	b.ne	4e3f0 <aarch64_get_opcode@@Base+0x8e0>  // b.any
   4e358:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e35c:	add	x0, x0, #0x738
   4e360:	ret
   4e364:	cmp	w0, #0xd
   4e368:	b.eq	4e3cc <aarch64_get_opcode@@Base+0x8bc>  // b.none
   4e36c:	b.ls	4e38c <aarch64_get_opcode@@Base+0x87c>  // b.plast
   4e370:	cmp	w0, #0xe
   4e374:	adrp	x1, 61000 <fields@@Base+0x22d8>
   4e378:	adrp	x0, 5e000 <xexit@@Base+0x6e08>
   4e37c:	add	x1, x1, #0xcf0
   4e380:	add	x0, x0, #0x4c8
   4e384:	csel	x0, x0, x1, ne  // ne = any
   4e388:	ret
   4e38c:	cmp	w0, #0xa
   4e390:	b.eq	4e3b4 <aarch64_get_opcode@@Base+0x8a4>  // b.none
   4e394:	cmp	w0, #0xb
   4e398:	b.ne	4e3f0 <aarch64_get_opcode@@Base+0x8e0>  // b.any
   4e39c:	adrp	x0, 5e000 <xexit@@Base+0x6e08>
   4e3a0:	add	x0, x0, #0x4b8
   4e3a4:	ret
   4e3a8:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e3ac:	add	x0, x0, #0x740
   4e3b0:	ret
   4e3b4:	adrp	x0, 5e000 <xexit@@Base+0x6e08>
   4e3b8:	add	x0, x0, #0x4b0
   4e3bc:	ret
   4e3c0:	adrp	x0, 5e000 <xexit@@Base+0x6e08>
   4e3c4:	add	x0, x0, #0x470
   4e3c8:	ret
   4e3cc:	adrp	x0, 61000 <fields@@Base+0x22d8>
   4e3d0:	add	x0, x0, #0xf88
   4e3d4:	ret
   4e3d8:	adrp	x0, 5e000 <xexit@@Base+0x6e08>
   4e3dc:	add	x0, x0, #0x488
   4e3e0:	ret
   4e3e4:	adrp	x0, 5e000 <xexit@@Base+0x6e08>
   4e3e8:	add	x0, x0, #0x4a8
   4e3ec:	ret
   4e3f0:	mov	x0, #0x0                   	// #0
   4e3f4:	ret
   4e3f8:	cmp	w0, #0x98
   4e3fc:	b.ls	4e40c <aarch64_get_opcode@@Base+0x8fc>  // b.plast
   4e400:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e404:	add	x0, x0, #0x748
   4e408:	ret
   4e40c:	adrp	x1, 63000 <fields@@Base+0x42d8>
   4e410:	add	x1, x1, #0xde4
   4e414:	ldrb	w0, [x1, w0, uxtw]
   4e418:	adr	x1, 4e424 <aarch64_get_opcode@@Base+0x914>
   4e41c:	add	x0, x1, w0, sxtb #2
   4e420:	br	x0
   4e424:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e428:	add	x0, x0, #0x850
   4e42c:	ret
   4e430:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e434:	add	x0, x0, #0x840
   4e438:	ret
   4e43c:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e440:	add	x0, x0, #0x830
   4e444:	ret
   4e448:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e44c:	add	x0, x0, #0x820
   4e450:	ret
   4e454:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e458:	add	x0, x0, #0x810
   4e45c:	ret
   4e460:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e464:	add	x0, x0, #0x800
   4e468:	ret
   4e46c:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e470:	add	x0, x0, #0x7f0
   4e474:	ret
   4e478:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e47c:	add	x0, x0, #0x7e8
   4e480:	ret
   4e484:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e488:	add	x0, x0, #0x7e0
   4e48c:	ret
   4e490:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e494:	add	x0, x0, #0x7d8
   4e498:	ret
   4e49c:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e4a0:	add	x0, x0, #0x7c8
   4e4a4:	ret
   4e4a8:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e4ac:	add	x0, x0, #0x7b8
   4e4b0:	ret
   4e4b4:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e4b8:	add	x0, x0, #0x7b0
   4e4bc:	ret
   4e4c0:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e4c4:	add	x0, x0, #0x7a8
   4e4c8:	ret
   4e4cc:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e4d0:	add	x0, x0, #0x7a0
   4e4d4:	ret
   4e4d8:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e4dc:	add	x0, x0, #0x798
   4e4e0:	ret
   4e4e4:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e4e8:	add	x0, x0, #0x790
   4e4ec:	ret
   4e4f0:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e4f4:	add	x0, x0, #0x788
   4e4f8:	ret
   4e4fc:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e500:	add	x0, x0, #0x780
   4e504:	ret
   4e508:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e50c:	add	x0, x0, #0x778
   4e510:	ret
   4e514:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e518:	add	x0, x0, #0x770
   4e51c:	ret
   4e520:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e524:	add	x0, x0, #0x768
   4e528:	ret
   4e52c:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e530:	add	x0, x0, #0x760
   4e534:	ret
   4e538:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e53c:	add	x0, x0, #0x758
   4e540:	ret
   4e544:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4e548:	add	x0, x0, #0x858
   4e54c:	ret
   4e550:	mov	x7, x0
   4e554:	mov	w8, #0x0                   	// #0
   4e558:	mov	x9, #0x0                   	// #0
   4e55c:	mov	x11, #0x2                   	// #2
   4e560:	ldrb	w6, [x7]
   4e564:	mov	w4, #0x0                   	// #0
   4e568:	sub	w0, w6, #0x30
   4e56c:	and	w0, w0, #0xff
   4e570:	cmp	w0, #0x9
   4e574:	b.hi	4e598 <aarch64_get_opcode@@Base+0xa88>  // b.pmore
   4e578:	add	w4, w4, w4, lsl #2
   4e57c:	add	w4, w6, w4, lsl #1
   4e580:	ldrb	w6, [x7, #1]!
   4e584:	sub	w4, w4, #0x30
   4e588:	sub	w5, w6, #0x30
   4e58c:	and	w5, w5, #0xff
   4e590:	cmp	w5, #0x9
   4e594:	b.ls	4e578 <aarch64_get_opcode@@Base+0xa68>  // b.plast
   4e598:	cmp	w6, #0x2d
   4e59c:	add	x0, x7, #0x1
   4e5a0:	b.eq	4e5e4 <aarch64_get_opcode@@Base+0xad4>  // b.none
   4e5a4:	mov	x5, x0
   4e5a8:	mov	x6, #0x1                   	// #1
   4e5ac:	mov	x0, x7
   4e5b0:	mov	x7, x5
   4e5b4:	mov	w5, #0x1                   	// #1
   4e5b8:	ldrb	w10, [x0]
   4e5bc:	lsr	x4, x1, x4
   4e5c0:	and	x4, x4, x6
   4e5c4:	cmp	w10, #0x2c
   4e5c8:	lsl	x4, x4, x8
   4e5cc:	add	w8, w8, w5
   4e5d0:	orr	x9, x9, x4
   4e5d4:	b.eq	4e560 <aarch64_get_opcode@@Base+0xa50>  // b.none
   4e5d8:	str	x9, [x2]
   4e5dc:	str	w8, [x3]
   4e5e0:	ret
   4e5e4:	ldrb	w7, [x7, #1]
   4e5e8:	sub	w5, w7, #0x30
   4e5ec:	and	w5, w5, #0xff
   4e5f0:	cmp	w5, #0x9
   4e5f4:	mov	w5, #0x0                   	// #0
   4e5f8:	b.hi	4e620 <aarch64_get_opcode@@Base+0xb10>  // b.pmore
   4e5fc:	nop
   4e600:	add	w5, w5, w5, lsl #2
   4e604:	add	w5, w7, w5, lsl #1
   4e608:	ldrb	w7, [x0, #1]!
   4e60c:	sub	w5, w5, #0x30
   4e610:	sub	w6, w7, #0x30
   4e614:	and	w6, w6, #0xff
   4e618:	cmp	w6, #0x9
   4e61c:	b.ls	4e600 <aarch64_get_opcode@@Base+0xaf0>  // b.plast
   4e620:	subs	w5, w5, w4
   4e624:	b.mi	4e63c <aarch64_get_opcode@@Base+0xb2c>  // b.first
   4e628:	lsl	x6, x11, x5
   4e62c:	add	x7, x0, #0x1
   4e630:	add	w5, w5, #0x1
   4e634:	sub	x6, x6, #0x1
   4e638:	b	4e5b8 <aarch64_get_opcode@@Base+0xaa8>
   4e63c:	stp	x29, x30, [sp, #-16]!
   4e640:	mov	x29, sp
   4e644:	bl	35670 <abort@plt>
   4e648:	stp	x29, x30, [sp, #-192]!
   4e64c:	adrp	x4, 64000 <fields@@Base+0x52d8>
   4e650:	mov	x29, sp
   4e654:	stp	x21, x22, [sp, #32]
   4e658:	mov	x21, x1
   4e65c:	adrp	x22, 8d000 <aarch64_operands@@Base+0x1bc0>
   4e660:	mov	w1, #0xff87                	// #65415
   4e664:	add	x3, x22, #0xb70
   4e668:	stp	x19, x20, [sp, #16]
   4e66c:	stp	x25, x26, [sp, #64]
   4e670:	add	x25, x4, #0x860
   4e674:	stp	x27, x28, [sp, #80]
   4e678:	mov	x28, x2
   4e67c:	mov	w2, #0x4784                	// #18308
   4e680:	ldp	x20, x27, [x21]
   4e684:	b	4e69c <aarch64_get_opcode@@Base+0xb8c>
   4e688:	ldr	x25, [x3, #72]
   4e68c:	add	x3, x3, #0x28
   4e690:	cbz	x25, 4e928 <aarch64_get_opcode@@Base+0xe18>
   4e694:	ldrh	w1, [x3, #26]
   4e698:	ldrh	w2, [x3, #24]
   4e69c:	and	x1, x1, #0xffff
   4e6a0:	and	x1, x1, x28
   4e6a4:	cmp	x1, w2, uxth
   4e6a8:	b.ne	4e688 <aarch64_get_opcode@@Base+0xb78>  // b.any
   4e6ac:	ldrb	w2, [x25]
   4e6b0:	cbz	w2, 4eb24 <aarch64_get_opcode@@Base+0x1014>
   4e6b4:	asr	x3, x28, #3
   4e6b8:	tst	x28, #0x7c0
   4e6bc:	and	x9, x3, #0x7
   4e6c0:	ubfx	x8, x28, #6, #5
   4e6c4:	mov	x10, #0x20                  	// #32
   4e6c8:	ubfx	w11, w28, #8, #3
   4e6cc:	asr	x1, x28, #2
   4e6d0:	csel	x4, x8, x10, ne  // ne = any
   4e6d4:	and	x1, x1, #0x3e
   4e6d8:	tst	x28, #0x40
   4e6dc:	and	x3, x3, #0x40
   4e6e0:	add	x10, x9, #0x8
   4e6e4:	mov	w7, #0x1                   	// #1
   4e6e8:	str	x4, [sp, #160]
   4e6ec:	lsl	w7, w7, w11
   4e6f0:	add	x4, x0, #0x4
   4e6f4:	orr	x0, x1, x3
   4e6f8:	csel	x1, x9, x10, eq  // eq = none
   4e6fc:	and	x8, x28, #0x7
   4e700:	add	x0, x0, x4
   4e704:	str	x1, [sp, #144]
   4e708:	sxtw	x1, w7
   4e70c:	tst	x28, #0x80
   4e710:	add	x7, x8, #0x8
   4e714:	str	x0, [sp, #168]
   4e718:	and	x0, x1, x28
   4e71c:	str	x0, [sp, #136]
   4e720:	csel	x0, x8, x7, eq  // eq = none
   4e724:	str	x0, [sp, #152]
   4e728:	lsl	w0, w28, #1
   4e72c:	str	w0, [sp, #176]
   4e730:	ubfiz	w0, w28, #1, #3
   4e734:	add	x5, x22, #0xb70
   4e738:	str	w0, [sp, #180]
   4e73c:	ubfx	x0, x28, #4, #4
   4e740:	mov	x22, #0x0                   	// #0
   4e744:	add	x26, x5, #0xe70
   4e748:	stp	x23, x24, [sp, #48]
   4e74c:	stp	x22, x5, [sp, #104]
   4e750:	str	w28, [sp, #124]
   4e754:	str	x0, [sp, #128]
   4e758:	ubfx	w0, w28, #8, #1
   4e75c:	str	w0, [sp, #120]
   4e760:	str	x4, [sp, #184]
   4e764:	b	4e78c <aarch64_get_opcode@@Base+0xc7c>
   4e768:	mov	x0, x27
   4e76c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4e770:	add	x1, x1, #0x870
   4e774:	blr	x20
   4e778:	mov	x0, x19
   4e77c:	mov	x19, x25
   4e780:	mov	x25, x0
   4e784:	ldrb	w2, [x19, #1]
   4e788:	cbz	w2, 4e8e8 <aarch64_get_opcode@@Base+0xdd8>
   4e78c:	cmp	w2, #0x25
   4e790:	add	x19, x25, #0x1
   4e794:	b.ne	4e768 <aarch64_get_opcode@@Base+0xc58>  // b.any
   4e798:	ldrb	w0, [x25, #1]
   4e79c:	cmp	w0, #0x4f
   4e7a0:	b.eq	4ecc8 <aarch64_get_opcode@@Base+0x11b8>  // b.none
   4e7a4:	b.hi	4ea00 <aarch64_get_opcode@@Base+0xef0>  // b.pmore
   4e7a8:	cmp	w0, #0x44
   4e7ac:	b.eq	4eb68 <aarch64_get_opcode@@Base+0x1058>  // b.none
   4e7b0:	b.ls	4e9d0 <aarch64_get_opcode@@Base+0xec0>  // b.plast
   4e7b4:	cmp	w0, #0x4d
   4e7b8:	b.eq	4eb18 <aarch64_get_opcode@@Base+0x1008>  // b.none
   4e7bc:	cmp	w0, #0x4e
   4e7c0:	b.ne	4e954 <aarch64_get_opcode@@Base+0xe44>  // b.any
   4e7c4:	ldr	w0, [sp, #120]
   4e7c8:	stp	w0, wzr, [sp, #96]
   4e7cc:	nop
   4e7d0:	mov	x0, x27
   4e7d4:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4e7d8:	adrp	x24, f9000 <aarch64_opcode_table@@Base+0x55a20>
   4e7dc:	add	x1, x1, #0x8d0
   4e7e0:	add	x24, x24, #0x650
   4e7e4:	blr	x20
   4e7e8:	mov	w22, #0x0                   	// #0
   4e7ec:	mov	w1, #0x0                   	// #0
   4e7f0:	mov	w23, #0x1                   	// #1
   4e7f4:	nop
   4e7f8:	lsl	w0, w23, w22
   4e7fc:	sxtw	x0, w0
   4e800:	tst	x0, x28
   4e804:	b.eq	4e848 <aarch64_get_opcode@@Base+0xd38>  // b.none
   4e808:	cbz	w1, 4e81c <aarch64_get_opcode@@Base+0xd0c>
   4e80c:	adrp	x1, 58000 <xexit@@Base+0xe08>
   4e810:	mov	x0, x27
   4e814:	add	x1, x1, #0xc8
   4e818:	blr	x20
   4e81c:	ldr	w2, [x24]
   4e820:	mov	x0, x27
   4e824:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   4e828:	add	x1, x1, #0xa78
   4e82c:	add	x2, x2, x2, lsl #3
   4e830:	lsl	x2, x2, #1
   4e834:	add	x2, x2, w22, sxtw
   4e838:	add	x2, x2, #0x2
   4e83c:	ldr	x2, [x26, x2, lsl #3]
   4e840:	blr	x20
   4e844:	mov	w1, #0x1                   	// #1
   4e848:	add	w22, w22, #0x1
   4e84c:	cmp	w22, #0x8
   4e850:	b.ne	4e7f8 <aarch64_get_opcode@@Base+0xce8>  // b.any
   4e854:	ldr	w0, [sp, #96]
   4e858:	cbz	w0, 4eb3c <aarch64_get_opcode@@Base+0x102c>
   4e85c:	cbz	w1, 4e870 <aarch64_get_opcode@@Base+0xd60>
   4e860:	adrp	x1, 58000 <xexit@@Base+0xe08>
   4e864:	mov	x0, x27
   4e868:	add	x1, x1, #0xc8
   4e86c:	blr	x20
   4e870:	adrp	x24, f9000 <aarch64_opcode_table@@Base+0x55a20>
   4e874:	mov	x0, x27
   4e878:	adrp	x23, 69000 <fields@@Base+0xa2d8>
   4e87c:	add	x1, x23, #0xa78
   4e880:	ldr	w2, [x24, #1616]
   4e884:	add	x2, x2, x2, lsl #3
   4e888:	add	x2, x26, x2, lsl #4
   4e88c:	ldr	x2, [x2, #128]
   4e890:	blr	x20
   4e894:	ldr	w0, [sp, #100]
   4e898:	cbz	w0, 4e8c8 <aarch64_get_opcode@@Base+0xdb8>
   4e89c:	adrp	x1, 58000 <xexit@@Base+0xe08>
   4e8a0:	mov	x0, x27
   4e8a4:	add	x1, x1, #0xc8
   4e8a8:	blr	x20
   4e8ac:	ldr	w2, [x24, #1616]
   4e8b0:	add	x1, x23, #0xa78
   4e8b4:	mov	x0, x27
   4e8b8:	add	x2, x2, x2, lsl #3
   4e8bc:	add	x2, x26, x2, lsl #4
   4e8c0:	ldr	x2, [x2, #136]
   4e8c4:	blr	x20
   4e8c8:	mov	x0, x27
   4e8cc:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4e8d0:	add	x1, x1, #0x9b0
   4e8d4:	blr	x20
   4e8d8:	ldrb	w2, [x19, #1]
   4e8dc:	add	x25, x25, #0x2
   4e8e0:	cbnz	w2, 4e78c <aarch64_get_opcode@@Base+0xc7c>
   4e8e4:	nop
   4e8e8:	ldr	x22, [sp, #104]
   4e8ec:	add	x0, x22, #0x10
   4e8f0:	cmp	x0, #0x30
   4e8f4:	b.ls	4eb20 <aarch64_get_opcode@@Base+0x1010>  // b.plast
   4e8f8:	mov	x2, x22
   4e8fc:	mov	x0, x27
   4e900:	mov	x16, x20
   4e904:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4e908:	ldp	x19, x20, [sp, #16]
   4e90c:	add	x1, x1, #0x8f8
   4e910:	ldp	x21, x22, [sp, #32]
   4e914:	ldp	x23, x24, [sp, #48]
   4e918:	ldp	x25, x26, [sp, #64]
   4e91c:	ldp	x27, x28, [sp, #80]
   4e920:	ldp	x29, x30, [sp], #192
   4e924:	br	x16
   4e928:	mov	w2, w28
   4e92c:	mov	x0, x27
   4e930:	mov	x16, x20
   4e934:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4e938:	ldp	x19, x20, [sp, #16]
   4e93c:	add	x1, x1, #0x908
   4e940:	ldp	x21, x22, [sp, #32]
   4e944:	ldp	x25, x26, [sp, #64]
   4e948:	ldp	x27, x28, [sp, #80]
   4e94c:	ldp	x29, x30, [sp], #192
   4e950:	br	x16
   4e954:	cmp	w0, #0x49
   4e958:	b.ne	4ee1c <aarch64_get_opcode@@Base+0x130c>  // b.any
   4e95c:	adrp	x0, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   4e960:	ldr	w1, [sp, #124]
   4e964:	ldr	w22, [sp, #176]
   4e968:	and	w1, w1, #0xff
   4e96c:	str	w1, [x0, #1036]
   4e970:	ldr	w0, [sp, #180]
   4e974:	cbz	w0, 4e9a8 <aarch64_get_opcode@@Base+0xe98>
   4e978:	adrp	x24, 5b000 <xexit@@Base+0x3e08>
   4e97c:	adrp	x23, 6e000 <fields@@Base+0xf2d8>
   4e980:	add	x24, x24, #0xca0
   4e984:	add	x23, x23, #0xa08
   4e988:	eor	x1, x28, x22
   4e98c:	mov	x0, x27
   4e990:	lsl	w22, w22, #1
   4e994:	tst	x1, #0x10
   4e998:	csel	x1, x23, x24, ne  // ne = any
   4e99c:	blr	x20
   4e9a0:	tst	w22, #0xe
   4e9a4:	b.ne	4e988 <aarch64_get_opcode@@Base+0xe78>  // b.any
   4e9a8:	ldr	x0, [sp, #112]
   4e9ac:	add	x25, x25, #0x2
   4e9b0:	ldr	x3, [sp, #128]
   4e9b4:	add	x2, x0, #0xde8
   4e9b8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4e9bc:	mov	x0, x27
   4e9c0:	add	x1, x1, #0x880
   4e9c4:	ldr	x2, [x2, x3, lsl #3]
   4e9c8:	blr	x20
   4e9cc:	b	4e784 <aarch64_get_opcode@@Base+0xc74>
   4e9d0:	cmp	w0, #0x39
   4e9d4:	b.hi	4ea40 <aarch64_get_opcode@@Base+0xf30>  // b.pmore
   4e9d8:	cmp	w0, #0x2f
   4e9dc:	b.hi	4ebe8 <aarch64_get_opcode@@Base+0x10d8>  // b.pmore
   4e9e0:	cmp	w0, #0x25
   4e9e4:	b.ne	4ee1c <aarch64_get_opcode@@Base+0x130c>  // b.any
   4e9e8:	add	x25, x25, #0x2
   4e9ec:	mov	x0, x27
   4e9f0:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4e9f4:	add	x1, x1, #0x878
   4e9f8:	blr	x20
   4e9fc:	b	4e784 <aarch64_get_opcode@@Base+0xc74>
   4ea00:	cmp	w0, #0x62
   4ea04:	b.eq	4eb9c <aarch64_get_opcode@@Base+0x108c>  // b.none
   4ea08:	b.ls	4ea98 <aarch64_get_opcode@@Base+0xf88>  // b.plast
   4ea0c:	cmp	w0, #0x73
   4ea10:	b.eq	4ebcc <aarch64_get_opcode@@Base+0x10bc>  // b.none
   4ea14:	cmp	w0, #0x78
   4ea18:	b.ne	4ea7c <aarch64_get_opcode@@Base+0xf6c>  // b.any
   4ea1c:	adrp	x0, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   4ea20:	add	x25, x25, #0x2
   4ea24:	ldr	w0, [x0, #1036]
   4ea28:	cbz	w0, 4e784 <aarch64_get_opcode@@Base+0xc74>
   4ea2c:	mov	x0, x27
   4ea30:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4ea34:	add	x1, x1, #0x888
   4ea38:	blr	x20
   4ea3c:	b	4e784 <aarch64_get_opcode@@Base+0xc74>
   4ea40:	cmp	w0, #0x43
   4ea44:	b.ne	4ee1c <aarch64_get_opcode@@Base+0x130c>  // b.any
   4ea48:	adrp	x0, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   4ea4c:	add	x25, x25, #0x2
   4ea50:	ldr	w0, [x0, #1032]
   4ea54:	cbz	w0, 4eb54 <aarch64_get_opcode@@Base+0x1044>
   4ea58:	ubfx	x2, x0, #4, #4
   4ea5c:	ldr	x0, [sp, #112]
   4ea60:	add	x3, x0, #0xde8
   4ea64:	ldr	x2, [x3, x2, lsl #3]
   4ea68:	adrp	x23, 69000 <fields@@Base+0xa2d8>
   4ea6c:	mov	x0, x27
   4ea70:	add	x1, x23, #0xa78
   4ea74:	blr	x20
   4ea78:	b	4e784 <aarch64_get_opcode@@Base+0xc74>
   4ea7c:	cmp	w0, #0x63
   4ea80:	b.ne	4ee1c <aarch64_get_opcode@@Base+0x130c>  // b.any
   4ea84:	adrp	x0, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   4ea88:	add	x25, x25, #0x2
   4ea8c:	ldr	w0, [x0, #1032]
   4ea90:	cbz	w0, 4e784 <aarch64_get_opcode@@Base+0xc74>
   4ea94:	b	4ea58 <aarch64_get_opcode@@Base+0xf48>
   4ea98:	cmp	w0, #0x57
   4ea9c:	b.eq	4ec6c <aarch64_get_opcode@@Base+0x115c>  // b.none
   4eaa0:	cmp	w0, #0x58
   4eaa4:	b.ne	4eadc <aarch64_get_opcode@@Base+0xfcc>  // b.any
   4eaa8:	adrp	x0, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   4eaac:	add	x25, x25, #0x2
   4eab0:	ldr	w0, [x0, #1032]
   4eab4:	cbz	w0, 4e784 <aarch64_get_opcode@@Base+0xc74>
   4eab8:	ubfx	x2, x0, #4, #4
   4eabc:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4eac0:	ldr	x0, [sp, #112]
   4eac4:	add	x1, x1, #0x8b0
   4eac8:	add	x3, x0, #0xde8
   4eacc:	mov	x0, x27
   4ead0:	ldr	x2, [x3, x2, lsl #3]
   4ead4:	blr	x20
   4ead8:	b	4e784 <aarch64_get_opcode@@Base+0xc74>
   4eadc:	cmp	w0, #0x53
   4eae0:	b.ne	4ee1c <aarch64_get_opcode@@Base+0x130c>  // b.any
   4eae4:	adrp	x24, f9000 <aarch64_opcode_table@@Base+0x55a20>
   4eae8:	adrp	x23, 69000 <fields@@Base+0xa2d8>
   4eaec:	ldr	x3, [sp, #144]
   4eaf0:	add	x25, x25, #0x2
   4eaf4:	ldr	w2, [x24, #1616]
   4eaf8:	mov	x0, x27
   4eafc:	add	x1, x23, #0xa78
   4eb00:	add	x2, x2, x2, lsl #3
   4eb04:	add	x2, x3, x2, lsl #1
   4eb08:	add	x2, x2, #0x2
   4eb0c:	ldr	x2, [x26, x2, lsl #3]
   4eb10:	blr	x20
   4eb14:	b	4e784 <aarch64_get_opcode@@Base+0xc74>
   4eb18:	stp	wzr, wzr, [sp, #96]
   4eb1c:	b	4e7d0 <aarch64_get_opcode@@Base+0xcc0>
   4eb20:	ldp	x23, x24, [sp, #48]
   4eb24:	ldp	x19, x20, [sp, #16]
   4eb28:	ldp	x21, x22, [sp, #32]
   4eb2c:	ldp	x25, x26, [sp, #64]
   4eb30:	ldp	x27, x28, [sp, #80]
   4eb34:	ldp	x29, x30, [sp], #192
   4eb38:	ret
   4eb3c:	ldr	w0, [sp, #100]
   4eb40:	cbz	w0, 4e8c8 <aarch64_get_opcode@@Base+0xdb8>
   4eb44:	adrp	x23, 69000 <fields@@Base+0xa2d8>
   4eb48:	adrp	x24, f9000 <aarch64_opcode_table@@Base+0x55a20>
   4eb4c:	cbz	w1, 4e8ac <aarch64_get_opcode@@Base+0xd9c>
   4eb50:	b	4e89c <aarch64_get_opcode@@Base+0xd8c>
   4eb54:	mov	x0, x27
   4eb58:	adrp	x1, 58000 <xexit@@Base+0xe08>
   4eb5c:	add	x1, x1, #0xf0
   4eb60:	blr	x20
   4eb64:	b	4e784 <aarch64_get_opcode@@Base+0xc74>
   4eb68:	adrp	x24, f9000 <aarch64_opcode_table@@Base+0x55a20>
   4eb6c:	adrp	x23, 69000 <fields@@Base+0xa2d8>
   4eb70:	ldr	x3, [sp, #152]
   4eb74:	add	x25, x25, #0x2
   4eb78:	ldr	w2, [x24, #1616]
   4eb7c:	mov	x0, x27
   4eb80:	add	x1, x23, #0xa78
   4eb84:	add	x2, x2, x2, lsl #3
   4eb88:	add	x2, x3, x2, lsl #1
   4eb8c:	add	x2, x2, #0x2
   4eb90:	ldr	x2, [x26, x2, lsl #3]
   4eb94:	blr	x20
   4eb98:	b	4e784 <aarch64_get_opcode@@Base+0xc74>
   4eb9c:	ldr	x2, [x21, #120]
   4eba0:	mov	x1, x21
   4eba4:	ldr	x22, [sp, #168]
   4eba8:	add	x25, x25, #0x2
   4ebac:	mov	x0, x22
   4ebb0:	blr	x2
   4ebb4:	mov	w1, #0x1                   	// #1
   4ebb8:	mov	w0, #0x2                   	// #2
   4ebbc:	strb	w1, [x21, #196]
   4ebc0:	str	w0, [x21, #200]
   4ebc4:	str	x22, [x21, #208]
   4ebc8:	b	4e784 <aarch64_get_opcode@@Base+0xc74>
   4ebcc:	ldr	x2, [sp, #160]
   4ebd0:	add	x25, x25, #0x2
   4ebd4:	mov	x0, x27
   4ebd8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4ebdc:	add	x1, x1, #0x8e0
   4ebe0:	blr	x20
   4ebe4:	b	4e784 <aarch64_get_opcode@@Base+0xc74>
   4ebe8:	ldrb	w2, [x25, #2]
   4ebec:	sub	w0, w0, #0x30
   4ebf0:	add	x3, x25, #0x2
   4ebf4:	sub	w1, w2, #0x30
   4ebf8:	and	w1, w1, #0xff
   4ebfc:	cmp	w1, #0x9
   4ec00:	b.hi	4ec28 <aarch64_get_opcode@@Base+0x1118>  // b.pmore
   4ec04:	nop
   4ec08:	add	w0, w0, w0, lsl #2
   4ec0c:	add	w0, w2, w0, lsl #1
   4ec10:	ldrb	w2, [x3, #1]!
   4ec14:	sub	w0, w0, #0x30
   4ec18:	sub	w1, w2, #0x30
   4ec1c:	and	w1, w1, #0xff
   4ec20:	cmp	w1, #0x9
   4ec24:	b.ls	4ec08 <aarch64_get_opcode@@Base+0x10f8>  // b.plast
   4ec28:	cmp	w2, #0x2d
   4ec2c:	b.eq	4ecd4 <aarch64_get_opcode@@Base+0x11c4>  // b.none
   4ec30:	cmp	w2, #0x3f
   4ec34:	b.ne	4ec8c <aarch64_get_opcode@@Base+0x117c>  // b.any
   4ec38:	mov	w1, #0x1                   	// #1
   4ec3c:	add	x19, x3, #0x2
   4ec40:	lsl	w0, w1, w0
   4ec44:	add	x25, x3, #0x3
   4ec48:	sxtw	x0, w0
   4ec4c:	tst	x0, x28
   4ec50:	b.ne	4ecb0 <aarch64_get_opcode@@Base+0x11a0>  // b.any
   4ec54:	ldrb	w2, [x3, #2]
   4ec58:	mov	x0, x27
   4ec5c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4ec60:	add	x1, x1, #0x870
   4ec64:	blr	x20
   4ec68:	b	4e784 <aarch64_get_opcode@@Base+0xc74>
   4ec6c:	ldr	x0, [sp, #136]
   4ec70:	add	x25, x25, #0x2
   4ec74:	cbnz	x0, 4e784 <aarch64_get_opcode@@Base+0xc74>
   4ec78:	mov	x0, x27
   4ec7c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4ec80:	add	x1, x1, #0x8d8
   4ec84:	blr	x20
   4ec88:	b	4e784 <aarch64_get_opcode@@Base+0xc74>
   4ec8c:	cmp	w2, #0x27
   4ec90:	b.ne	4ee1c <aarch64_get_opcode@@Base+0x130c>  // b.any
   4ec94:	mov	w1, #0x1                   	// #1
   4ec98:	add	x19, x3, #0x1
   4ec9c:	lsl	w0, w1, w0
   4eca0:	add	x25, x3, #0x2
   4eca4:	sxtw	x0, w0
   4eca8:	tst	x0, x28
   4ecac:	b.eq	4e784 <aarch64_get_opcode@@Base+0xc74>  // b.none
   4ecb0:	ldrb	w2, [x3, #1]
   4ecb4:	mov	x0, x27
   4ecb8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4ecbc:	add	x1, x1, #0x870
   4ecc0:	blr	x20
   4ecc4:	b	4e784 <aarch64_get_opcode@@Base+0xc74>
   4ecc8:	ldr	w0, [sp, #120]
   4eccc:	stp	wzr, w0, [sp, #96]
   4ecd0:	b	4e7d0 <aarch64_get_opcode@@Base+0xcc0>
   4ecd4:	ldrb	w4, [x3, #1]
   4ecd8:	add	x19, x3, #0x1
   4ecdc:	sub	w1, w4, #0x30
   4ece0:	and	w1, w1, #0xff
   4ece4:	cmp	w1, #0x9
   4ece8:	b.hi	4ee1c <aarch64_get_opcode@@Base+0x130c>  // b.pmore
   4ecec:	mov	w1, #0x0                   	// #0
   4ecf0:	add	w1, w1, w1, lsl #2
   4ecf4:	mov	x25, x19
   4ecf8:	add	w1, w4, w1, lsl #1
   4ecfc:	ldrb	w4, [x19, #1]!
   4ed00:	sub	w1, w1, #0x30
   4ed04:	sub	w2, w4, #0x30
   4ed08:	and	w2, w2, #0xff
   4ed0c:	cmp	w2, #0x9
   4ed10:	b.ls	4ecf0 <aarch64_get_opcode@@Base+0x11e0>  // b.plast
   4ed14:	cbz	w1, 4ee1c <aarch64_get_opcode@@Base+0x130c>
   4ed18:	sub	w2, w1, w0
   4ed1c:	mov	w24, #0x2                   	// #2
   4ed20:	asr	x0, x28, x0
   4ed24:	cmp	w4, #0x63
   4ed28:	lsl	w2, w24, w2
   4ed2c:	sub	w2, w2, #0x1
   4ed30:	sxtw	x2, w2
   4ed34:	and	x2, x2, x0
   4ed38:	b.eq	4ee58 <aarch64_get_opcode@@Base+0x1348>  // b.none
   4ed3c:	b.hi	4ed98 <aarch64_get_opcode@@Base+0x1288>  // b.pmore
   4ed40:	cmp	w4, #0x57
   4ed44:	b.eq	4ee20 <aarch64_get_opcode@@Base+0x1310>  // b.none
   4ed48:	b.hi	4ede8 <aarch64_get_opcode@@Base+0x12d8>  // b.pmore
   4ed4c:	cmp	w4, #0x42
   4ed50:	b.ne	4edc0 <aarch64_get_opcode@@Base+0x12b0>  // b.any
   4ed54:	mov	w22, #0x1                   	// #1
   4ed58:	add	x25, x25, #0x2
   4ed5c:	lsl	w0, w22, w1
   4ed60:	mov	x1, x21
   4ed64:	sxtw	x0, w0
   4ed68:	str	xzr, [sp, #104]
   4ed6c:	eor	x2, x0, x2
   4ed70:	sub	x0, x2, x0
   4ed74:	ldr	x2, [sp, #184]
   4ed78:	ldr	x4, [x21, #120]
   4ed7c:	add	x23, x2, x0, lsl #1
   4ed80:	mov	x0, x23
   4ed84:	blr	x4
   4ed88:	strb	w22, [x21, #196]
   4ed8c:	str	w24, [x21, #200]
   4ed90:	str	x23, [x21, #208]
   4ed94:	b	4e784 <aarch64_get_opcode@@Base+0xc74>
   4ed98:	cmp	w4, #0x72
   4ed9c:	b.eq	4ee28 <aarch64_get_opcode@@Base+0x1318>  // b.none
   4eda0:	cmp	w4, #0x78
   4eda4:	b.ne	4ee14 <aarch64_get_opcode@@Base+0x1304>  // b.any
   4eda8:	add	x25, x25, #0x2
   4edac:	mov	x0, x27
   4edb0:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4edb4:	add	x1, x1, #0x8f0
   4edb8:	blr	x20
   4edbc:	b	4e784 <aarch64_get_opcode@@Base+0xc74>
   4edc0:	cmp	w4, #0x48
   4edc4:	b.ne	4ee1c <aarch64_get_opcode@@Base+0x130c>  // b.any
   4edc8:	lsl	x2, x2, #1
   4edcc:	str	x2, [sp, #104]
   4edd0:	add	x25, x25, #0x2
   4edd4:	mov	x0, x27
   4edd8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4eddc:	add	x1, x1, #0x8e8
   4ede0:	blr	x20
   4ede4:	b	4e784 <aarch64_get_opcode@@Base+0xc74>
   4ede8:	cmp	w4, #0x61
   4edec:	b.ne	4ee1c <aarch64_get_opcode@@Base+0x130c>  // b.any
   4edf0:	ldr	x3, [x21, #120]
   4edf4:	add	x25, x25, #0x2
   4edf8:	ldr	x0, [sp, #184]
   4edfc:	mov	x1, x21
   4ee00:	str	xzr, [sp, #104]
   4ee04:	and	x0, x0, #0xfffffffffffffffc
   4ee08:	add	x0, x0, x2, lsl #2
   4ee0c:	blr	x3
   4ee10:	b	4e784 <aarch64_get_opcode@@Base+0xc74>
   4ee14:	cmp	w4, #0x64
   4ee18:	b.eq	4edcc <aarch64_get_opcode@@Base+0x12bc>  // b.none
   4ee1c:	bl	35670 <abort@plt>
   4ee20:	lsl	x2, x2, #2
   4ee24:	b	4edcc <aarch64_get_opcode@@Base+0x12bc>
   4ee28:	adrp	x24, f9000 <aarch64_opcode_table@@Base+0x55a20>
   4ee2c:	adrp	x23, 69000 <fields@@Base+0xa2d8>
   4ee30:	add	x25, x25, #0x2
   4ee34:	add	x1, x23, #0xa78
   4ee38:	ldr	w3, [x24, #1616]
   4ee3c:	mov	x0, x27
   4ee40:	add	x3, x3, x3, lsl #3
   4ee44:	add	x2, x2, x3, lsl #1
   4ee48:	add	x2, x2, #0x2
   4ee4c:	ldr	x2, [x26, x2, lsl #3]
   4ee50:	blr	x20
   4ee54:	b	4e784 <aarch64_get_opcode@@Base+0xc74>
   4ee58:	ldr	x0, [sp, #112]
   4ee5c:	add	x25, x25, #0x2
   4ee60:	add	x3, x0, #0xde8
   4ee64:	b	4ea64 <aarch64_get_opcode@@Base+0xf54>
   4ee68:	stp	x29, x30, [sp, #-368]!
   4ee6c:	mov	x29, sp
   4ee70:	stp	x19, x20, [sp, #16]
   4ee74:	str	x1, [sp, #152]
   4ee78:	ldr	x19, [x0, #48]
   4ee7c:	stp	x21, x22, [sp, #32]
   4ee80:	ldr	x1, [x2, #96]
   4ee84:	stp	x23, x24, [sp, #48]
   4ee88:	stp	x25, x26, [sp, #64]
   4ee8c:	str	xzr, [sp, #360]
   4ee90:	ldp	x23, x21, [x2]
   4ee94:	ldp	x11, x10, [x1]
   4ee98:	ldr	x25, [x1, #16]
   4ee9c:	cbz	x19, 50008 <aarch64_get_opcode@@Base+0x24f8>
   4eea0:	mov	x20, x3
   4eea4:	adrp	x1, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   4eea8:	ubfx	w3, w3, #8, #4
   4eeac:	mov	x24, x2
   4eeb0:	sub	w2, w3, #0xe
   4eeb4:	ldr	w1, [x1, #1032]
   4eeb8:	cmp	w2, #0x1
   4eebc:	sub	w30, w3, #0x9
   4eec0:	cset	w9, ls  // ls = plast
   4eec4:	cmp	w3, #0x8
   4eec8:	csinc	w9, w9, wzr, ne  // ne = any
   4eecc:	lsr	x6, x20, #21
   4eed0:	cmp	w30, #0x2
   4eed4:	ubfx	x12, x1, #4, #4
   4eed8:	cset	w2, ls  // ls = plast
   4eedc:	orr	x6, x6, x20, lsr #24
   4eee0:	cmp	w1, #0x0
   4eee4:	mov	w7, #0x10                  	// #16
   4eee8:	and	x1, x6, #0x1
   4eeec:	mov	x16, #0x10                  	// #16
   4eef0:	csel	w12, w12, w7, ne  // ne = any
   4eef4:	lsr	w8, w20, #28
   4eef8:	and	x17, x10, #0x8000
   4eefc:	and	x14, x20, #0xf0000000
   4ef00:	stp	x27, x28, [sp, #80]
   4ef04:	mov	x27, #0x10                  	// #16
   4ef08:	mov	x5, #0x0                   	// #0
   4ef0c:	movk	x16, #0xfe00, lsl #16
   4ef10:	mov	x15, #0xfc000000            	// #4227858432
   4ef14:	mov	x26, #0xe000000             	// #234881024
   4ef18:	mov	x6, #0xfe000000            	// #4261412864
   4ef1c:	movk	x27, #0xe10, lsl #16
   4ef20:	mov	x18, #0xffffffffffcfffff    	// #-3145729
   4ef24:	mov	x13, #0xf0000000            	// #4026531840
   4ef28:	str	x1, [sp, #104]
   4ef2c:	mov	w1, #0x0                   	// #0
   4ef30:	stp	w2, w3, [sp, #112]
   4ef34:	nop
   4ef38:	ldr	x28, [x0, #8]
   4ef3c:	ldr	x3, [x0, #32]
   4ef40:	cbnz	x28, 4ef80 <aarch64_get_opcode@@Base+0x1470>
   4ef44:	ldr	x2, [x0, #16]
   4ef48:	cbnz	x2, 4ef80 <aarch64_get_opcode@@Base+0x1470>
   4ef4c:	ldr	x2, [x0, #24]
   4ef50:	cbnz	x2, 4ef80 <aarch64_get_opcode@@Base+0x1470>
   4ef54:	cmp	x3, #0x1
   4ef58:	b.eq	4f390 <aarch64_get_opcode@@Base+0x1880>  // b.none
   4ef5c:	sub	x3, x3, #0x2
   4ef60:	cmp	x3, #0x1
   4ef64:	b.hi	50220 <aarch64_get_opcode@@Base+0x2710>  // b.pmore
   4ef68:	ldr	x19, [x0, #104]
   4ef6c:	add	x0, x0, #0x38
   4ef70:	cbnz	x19, 4ef38 <aarch64_get_opcode@@Base+0x1428>
   4ef74:	str	wzr, [sp, #112]
   4ef78:	ldp	x27, x28, [sp, #80]
   4ef7c:	b	4f2c0 <aarch64_get_opcode@@Base+0x17b0>
   4ef80:	ldr	x2, [x0, #40]
   4ef84:	cbz	w4, 4f254 <aarch64_get_opcode@@Base+0x1744>
   4ef88:	ldr	w1, [x0]
   4ef8c:	orr	x2, x2, #0xf0000000
   4ef90:	orr	x5, x3, #0xe0000000
   4ef94:	cmp	w1, #0x2
   4ef98:	b.ne	4efa4 <aarch64_get_opcode@@Base+0x1494>  // b.any
   4ef9c:	mov	w1, #0x1                   	// #1
   4efa0:	b	4ef68 <aarch64_get_opcode@@Base+0x1458>
   4efa4:	mov	w22, w12
   4efa8:	and	x2, x20, x2
   4efac:	cmp	x2, x5
   4efb0:	b.ne	4ef9c <aarch64_get_opcode@@Base+0x148c>  // b.any
   4efb4:	tst	x28, x11
   4efb8:	b.ne	4efc8 <aarch64_get_opcode@@Base+0x14b8>  // b.any
   4efbc:	ldr	x1, [x0, #16]
   4efc0:	tst	x10, x1
   4efc4:	b.eq	4f328 <aarch64_get_opcode@@Base+0x1818>  // b.none
   4efc8:	and	x2, x3, #0xffffffffffefffff
   4efcc:	cmp	x2, x16
   4efd0:	ccmp	x2, x15, #0x4, ne  // ne = any
   4efd4:	b.ne	4f2dc <aarch64_get_opcode@@Base+0x17cc>  // b.any
   4efd8:	cbz	x17, 4efec <aarch64_get_opcode@@Base+0x14dc>
   4efdc:	cmp	x10, x18
   4efe0:	ccmn	x11, #0x1, #0x0, eq  // eq = none
   4efe4:	b.eq	4efec <aarch64_get_opcode@@Base+0x14dc>  // b.none
   4efe8:	cbnz	w9, 4f320 <aarch64_get_opcode@@Base+0x1810>
   4efec:	str	x5, [sp, #360]
   4eff0:	ldrb	w2, [x19]
   4eff4:	cbz	w2, 4f2a4 <aarch64_get_opcode@@Base+0x1794>
   4eff8:	ands	x4, x20, #0x800000
   4effc:	mov	w3, #0x2b                  	// #43
   4f000:	mov	w1, #0x2d                  	// #45
   4f004:	csel	w1, w3, w1, ne  // ne = any
   4f008:	str	w1, [sp, #172]
   4f00c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f010:	cmp	x4, #0x0
   4f014:	add	x3, x1, #0x930
   4f018:	adrp	x1, 58000 <xexit@@Base+0xe08>
   4f01c:	add	x1, x1, #0x330
   4f020:	csel	x3, x3, x1, eq  // eq = none
   4f024:	asr	x0, x20, #4
   4f028:	str	x3, [sp, #272]
   4f02c:	ands	x3, x20, #0x200000
   4f030:	and	x11, x20, #0xf
   4f034:	asr	x5, x20, #1
   4f038:	and	x0, x0, #0x10
   4f03c:	str	x3, [sp, #240]
   4f040:	adrp	x3, 64000 <fields@@Base+0x52d8>
   4f044:	add	x6, x3, #0x8d8
   4f048:	csel	x1, x6, x1, ne  // ne = any
   4f04c:	and	w3, w5, #0x70
   4f050:	orr	x0, x0, x11
   4f054:	str	x4, [sp, #160]
   4f058:	and	w4, w20, #0xf
   4f05c:	cmp	x0, #0x0
   4f060:	str	x1, [sp, #264]
   4f064:	orr	w1, w3, w4
   4f068:	ubfx	w28, w20, #16, #4
   4f06c:	sub	w6, w1, #0x80
   4f070:	mov	x8, #0x20                  	// #32
   4f074:	csel	x0, x0, x8, ne  // ne = any
   4f078:	tst	x3, #0x40
   4f07c:	str	x0, [sp, #216]
   4f080:	csel	w0, w1, w6, eq  // eq = none
   4f084:	cmp	w28, #0xf
   4f088:	cset	w1, eq  // eq = none
   4f08c:	str	w0, [sp, #208]
   4f090:	mov	x0, #0x1200000             	// #18874368
   4f094:	ands	x0, x20, x0
   4f098:	asr	x27, x20, #18
   4f09c:	str	x0, [sp, #176]
   4f0a0:	csel	w0, w1, wzr, ne  // ne = any
   4f0a4:	ubfx	w7, w20, #12, #4
   4f0a8:	and	w27, w27, #0x10
   4f0ac:	str	w0, [sp, #212]
   4f0b0:	asr	x0, x20, #5
   4f0b4:	and	w14, w5, #0x3f
   4f0b8:	asr	x1, x20, #22
   4f0bc:	orr	w13, w27, w7
   4f0c0:	mov	w10, #0x10                  	// #16
   4f0c4:	lsr	x3, x20, #22
   4f0c8:	tst	x20, #0x80
   4f0cc:	add	w15, w13, w14
   4f0d0:	csel	w8, w8, w10, ne  // ne = any
   4f0d4:	asr	x12, x20, #12
   4f0d8:	and	w10, w1, #0x6
   4f0dc:	ubfx	w26, w20, #21, #1
   4f0e0:	asr	x6, x20, #16
   4f0e4:	stp	w13, w14, [sp, #224]
   4f0e8:	ubfiz	w14, w0, #4, #1
   4f0ec:	and	w0, w0, #0x1
   4f0f0:	asr	x9, x20, #7
   4f0f4:	and	x6, x6, #0xf0
   4f0f8:	orr	w26, w26, w10
   4f0fc:	add	w0, w0, w4, lsl #1
   4f100:	and	w10, w1, #0x1
   4f104:	ubfx	x13, x20, #13, #3
   4f108:	ubfiz	x3, x3, #3, #1
   4f10c:	orr	x16, x6, x11
   4f110:	ubfiz	w12, w12, #1, #4
   4f114:	adrp	x25, 8d000 <aarch64_operands@@Base+0x1bc0>
   4f118:	add	x25, x25, #0xb70
   4f11c:	str	x11, [sp, #200]
   4f120:	ubfiz	w11, w1, #4, #1
   4f124:	add	w1, w10, w7, lsl #1
   4f128:	str	w0, [sp, #340]
   4f12c:	orr	x0, x3, x13
   4f130:	ubfiz	x17, x20, #2, #8
   4f134:	and	w5, w5, #0x7f
   4f138:	mov	x6, x9
   4f13c:	ubfiz	w9, w9, #4, #1
   4f140:	str	x0, [sp, #120]
   4f144:	add	x0, x25, #0xe70
   4f148:	str	w1, [sp, #316]
   4f14c:	orr	w1, w12, w10
   4f150:	and	w6, w6, #0x1
   4f154:	str	x0, [sp, #128]
   4f158:	neg	x0, x17
   4f15c:	str	w1, [sp, #256]
   4f160:	orr	w1, w9, w28
   4f164:	str	w5, [sp, #260]
   4f168:	sub	w5, w15, #0x1
   4f16c:	str	w5, [sp, #236]
   4f170:	and	w5, w26, #0xfffffffd
   4f174:	str	x0, [sp, #288]
   4f178:	mov	x0, #0x100                 	// #256
   4f17c:	str	w1, [sp, #320]
   4f180:	add	w1, w6, w28, lsl #1
   4f184:	sxtw	x8, w8
   4f188:	movk	x0, #0x40, lsl #16
   4f18c:	and	x0, x20, x0
   4f190:	str	x16, [sp, #184]
   4f194:	str	w16, [sp, #196]
   4f198:	str	w15, [sp, #232]
   4f19c:	str	w20, [sp, #248]
   4f1a0:	str	x17, [sp, #280]
   4f1a4:	str	w5, [sp, #296]
   4f1a8:	orr	w5, w11, w7
   4f1ac:	str	w5, [sp, #252]
   4f1b0:	str	w5, [sp, #300]
   4f1b4:	str	x8, [sp, #328]
   4f1b8:	str	w1, [sp, #336]
   4f1bc:	orr	w1, w14, w4
   4f1c0:	str	w1, [sp, #324]
   4f1c4:	str	x0, [sp, #144]
   4f1c8:	ubfx	w0, w20, #1, #7
   4f1cc:	str	w0, [sp, #312]
   4f1d0:	ubfx	w0, w20, #4, #4
   4f1d4:	str	w0, [sp, #168]
   4f1d8:	ubfx	x0, x20, #16, #4
   4f1dc:	str	x0, [sp, #136]
   4f1e0:	and	w0, w20, #0xff
   4f1e4:	str	xzr, [sp, #104]
   4f1e8:	str	w0, [sp, #192]
   4f1ec:	mov	x0, #0x10                  	// #16
   4f1f0:	str	x0, [sp, #304]
   4f1f4:	b	4f21c <aarch64_get_opcode@@Base+0x170c>
   4f1f8:	mov	x0, x21
   4f1fc:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f200:	add	x1, x1, #0x870
   4f204:	blr	x23
   4f208:	mov	x0, x27
   4f20c:	mov	x27, x19
   4f210:	mov	x19, x0
   4f214:	ldrb	w2, [x27, #1]
   4f218:	cbz	w2, 4f280 <aarch64_get_opcode@@Base+0x1770>
   4f21c:	cmp	w2, #0x25
   4f220:	add	x27, x19, #0x1
   4f224:	b.ne	4f1f8 <aarch64_get_opcode@@Base+0x16e8>  // b.any
   4f228:	ldrb	w2, [x19, #1]
   4f22c:	sub	w0, w2, #0x25
   4f230:	cmp	w0, #0x55
   4f234:	b.ls	4f23c <aarch64_get_opcode@@Base+0x172c>  // b.plast
   4f238:	bl	35670 <abort@plt>
   4f23c:	adrp	x1, 63000 <fields@@Base+0x42d8>
   4f240:	add	x1, x1, #0xe80
   4f244:	ldrh	w0, [x1, w0, uxtw #1]
   4f248:	adr	x1, 4f254 <aarch64_get_opcode@@Base+0x1744>
   4f24c:	add	x0, x1, w0, sxth #2
   4f250:	br	x0
   4f254:	cmp	w8, #0xe
   4f258:	csel	w22, w8, w7, ne  // ne = any
   4f25c:	cmp	x14, x13
   4f260:	b.ne	4f26c <aarch64_get_opcode@@Base+0x175c>  // b.any
   4f264:	orr	x2, x2, #0xf0000000
   4f268:	mov	w22, #0x10                  	// #16
   4f26c:	ldr	w1, [x0]
   4f270:	mov	x5, x3
   4f274:	cmp	w1, #0x1
   4f278:	b.ne	4efa8 <aarch64_get_opcode@@Base+0x1498>  // b.any
   4f27c:	b	4ef68 <aarch64_get_opcode@@Base+0x1458>
   4f280:	ldr	x1, [sp, #104]
   4f284:	add	x0, x1, #0x10
   4f288:	cmp	x0, #0x30
   4f28c:	b.ls	4f2a4 <aarch64_get_opcode@@Base+0x1794>  // b.plast
   4f290:	mov	w2, w1
   4f294:	mov	x0, x21
   4f298:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f29c:	add	x1, x1, #0x8f8
   4f2a0:	blr	x23
   4f2a4:	ldr	w0, [sp, #112]
   4f2a8:	cbz	w0, 4f368 <aarch64_get_opcode@@Base+0x1858>
   4f2ac:	mov	x0, x21
   4f2b0:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f2b4:	add	x1, x1, #0xb68
   4f2b8:	blr	x23
   4f2bc:	ldp	x27, x28, [sp, #80]
   4f2c0:	ldr	w0, [sp, #112]
   4f2c4:	ldp	x19, x20, [sp, #16]
   4f2c8:	ldp	x21, x22, [sp, #32]
   4f2cc:	ldp	x23, x24, [sp, #48]
   4f2d0:	ldp	x25, x26, [sp, #64]
   4f2d4:	ldp	x29, x30, [sp], #368
   4f2d8:	ret
   4f2dc:	and	x1, x3, #0xffffffffffffffef
   4f2e0:	cmp	x1, x26
   4f2e4:	mov	x1, #0xc000000             	// #201326592
   4f2e8:	ccmp	x2, x1, #0x4, ne  // ne = any
   4f2ec:	cset	w1, eq  // eq = none
   4f2f0:	cmp	x3, x6
   4f2f4:	ccmp	x3, x27, #0x4, ne  // ne = any
   4f2f8:	csinc	w1, w1, wzr, ne  // ne = any
   4f2fc:	cbz	w1, 4f33c <aarch64_get_opcode@@Base+0x182c>
   4f300:	cmp	w30, #0x2
   4f304:	b.ls	4ef68 <aarch64_get_opcode@@Base+0x1458>  // b.plast
   4f308:	cbz	x17, 4f358 <aarch64_get_opcode@@Base+0x1848>
   4f30c:	cmp	x10, x18
   4f310:	ccmn	x11, #0x1, #0x0, eq  // eq = none
   4f314:	b.eq	4f358 <aarch64_get_opcode@@Base+0x1848>  // b.none
   4f318:	cbz	w9, 4f358 <aarch64_get_opcode@@Base+0x1848>
   4f31c:	nop
   4f320:	mov	w1, w9
   4f324:	b	4ef68 <aarch64_get_opcode@@Base+0x1458>
   4f328:	ldr	x1, [x0, #24]
   4f32c:	tst	x25, x1
   4f330:	b.ne	4efc8 <aarch64_get_opcode@@Base+0x14b8>  // b.any
   4f334:	mov	w1, #0x1                   	// #1
   4f338:	b	4ef68 <aarch64_get_opcode@@Base+0x1458>
   4f33c:	mov	x1, #0xf80                 	// #3968
   4f340:	movk	x1, #0xec00, lsl #16
   4f344:	cmp	x2, x1
   4f348:	b.ne	4f358 <aarch64_get_opcode@@Base+0x1848>  // b.any
   4f34c:	ldr	x1, [sp, #104]
   4f350:	cbz	x1, 4ef9c <aarch64_get_opcode@@Base+0x148c>
   4f354:	nop
   4f358:	str	x5, [sp, #360]
   4f35c:	str	wzr, [sp, #112]
   4f360:	ldrb	w2, [x19]
   4f364:	cbnz	w2, 4eff8 <aarch64_get_opcode@@Base+0x14e8>
   4f368:	mov	w0, #0x1                   	// #1
   4f36c:	str	w0, [sp, #112]
   4f370:	ldp	x19, x20, [sp, #16]
   4f374:	ldr	w0, [sp, #112]
   4f378:	ldp	x21, x22, [sp, #32]
   4f37c:	ldp	x23, x24, [sp, #48]
   4f380:	ldp	x25, x26, [sp, #64]
   4f384:	ldp	x27, x28, [sp, #80]
   4f388:	ldp	x29, x30, [sp], #368
   4f38c:	ret
   4f390:	ldr	x2, [x24, #32]
   4f394:	sub	x3, x2, #0xc
   4f398:	cmp	x3, #0x1
   4f39c:	ccmp	x2, #0xa, #0x4, hi  // hi = pmore
   4f3a0:	b.eq	4ef68 <aarch64_get_opcode@@Base+0x1458>  // b.none
   4f3a4:	nop
   4f3a8:	ldr	x2, [x0, #64]
   4f3ac:	add	x0, x0, #0x38
   4f3b0:	cbnz	x2, 4f3bc <aarch64_get_opcode@@Base+0x18ac>
   4f3b4:	ldr	x2, [x0, #16]
   4f3b8:	cbz	x2, 4f454 <aarch64_get_opcode@@Base+0x1944>
   4f3bc:	ldr	x2, [x0, #32]
   4f3c0:	cmp	x2, #0x2
   4f3c4:	b.ne	4f3a8 <aarch64_get_opcode@@Base+0x1898>  // b.any
   4f3c8:	b	4ef68 <aarch64_get_opcode@@Base+0x1458>
   4f3cc:	cmp	w22, #0x10
   4f3d0:	b.eq	4f3f4 <aarch64_get_opcode@@Base+0x18e4>  // b.none
   4f3d4:	mov	w0, #0x1                   	// #1
   4f3d8:	str	w0, [sp, #112]
   4f3dc:	ldr	w0, [sp, #116]
   4f3e0:	cmp	w22, #0x10
   4f3e4:	ccmp	w0, #0x9, #0x0, ne  // ne = any
   4f3e8:	ldr	w0, [sp, #112]
   4f3ec:	csinc	w0, w0, wzr, ne  // ne = any
   4f3f0:	str	w0, [sp, #112]
   4f3f4:	add	x2, x25, #0xde8
   4f3f8:	add	x19, x19, #0x2
   4f3fc:	mov	x0, x21
   4f400:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   4f404:	add	x1, x1, #0xa78
   4f408:	ldr	x2, [x2, w22, sxtw #3]
   4f40c:	blr	x23
   4f410:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4f414:	mov	x0, x27
   4f418:	add	x3, sp, #0x164
   4f41c:	add	x2, sp, #0x168
   4f420:	mov	x1, x20
   4f424:	bl	4e550 <aarch64_get_opcode@@Base+0xa40>
   4f428:	mov	x27, x0
   4f42c:	ldrb	w0, [x0]
   4f430:	sub	w0, w0, #0x27
   4f434:	cmp	w0, #0x51
   4f438:	b.hi	4f238 <aarch64_get_opcode@@Base+0x1728>  // b.pmore
   4f43c:	adrp	x1, 63000 <fields@@Base+0x42d8>
   4f440:	add	x1, x1, #0xf2c
   4f444:	ldrh	w0, [x1, w0, uxtw #1]
   4f448:	adr	x1, 4f454 <aarch64_get_opcode@@Base+0x1944>
   4f44c:	add	x0, x1, w0, sxth #2
   4f450:	br	x0
   4f454:	ldr	x2, [x0, #24]
   4f458:	cbz	x2, 4ef68 <aarch64_get_opcode@@Base+0x1458>
   4f45c:	ldr	x2, [x0, #32]
   4f460:	cmp	x2, #0x2
   4f464:	b.ne	4f3a8 <aarch64_get_opcode@@Base+0x1898>  // b.any
   4f468:	b	4ef68 <aarch64_get_opcode@@Base+0x1458>
   4f46c:	ldrb	w0, [x19, #2]
   4f470:	add	x27, x19, #0x2
   4f474:	cmp	w0, #0x32
   4f478:	b.eq	4ff74 <aarch64_get_opcode@@Base+0x2464>  // b.none
   4f47c:	b.hi	4f918 <aarch64_get_opcode@@Base+0x1e08>  // b.pmore
   4f480:	cmp	w0, #0x30
   4f484:	b.eq	4f9c4 <aarch64_get_opcode@@Base+0x1eb4>  // b.none
   4f488:	cmp	w0, #0x31
   4f48c:	b.ne	4f238 <aarch64_get_opcode@@Base+0x1728>  // b.any
   4f490:	cmp	w2, #0x79
   4f494:	b.eq	4fb74 <aarch64_get_opcode@@Base+0x2064>  // b.none
   4f498:	ldr	w3, [sp, #300]
   4f49c:	str	w3, [sp, #344]
   4f4a0:	mov	w2, #0x64                  	// #100
   4f4a4:	mov	x0, x21
   4f4a8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f4ac:	add	x1, x1, #0xb80
   4f4b0:	blr	x23
   4f4b4:	ldrb	w0, [x19, #2]
   4f4b8:	mov	w2, #0x64                  	// #100
   4f4bc:	ldr	w3, [sp, #344]
   4f4c0:	cmp	w0, #0x33
   4f4c4:	b.eq	4ffd4 <aarch64_get_opcode@@Base+0x24c4>  // b.none
   4f4c8:	add	x19, x19, #0x3
   4f4cc:	cmp	w0, #0x34
   4f4d0:	b.ne	4f214 <aarch64_get_opcode@@Base+0x1704>  // b.any
   4f4d4:	add	w3, w3, #0x1
   4f4d8:	mov	x0, x21
   4f4dc:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f4e0:	add	x1, x1, #0xb08
   4f4e4:	blr	x23
   4f4e8:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4f4ec:	adrp	x1, f9000 <aarch64_opcode_table@@Base+0x55a20>
   4f4f0:	cmp	w2, #0x4b
   4f4f4:	ldr	x3, [sp, #136]
   4f4f8:	and	x0, x20, #0xff
   4f4fc:	ldr	w2, [x1, #1616]
   4f500:	and	x4, x20, #0x7f
   4f504:	csel	x4, x4, x0, eq  // eq = none
   4f508:	str	x4, [sp, #344]
   4f50c:	mov	x0, x21
   4f510:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f514:	add	x2, x2, x2, lsl #3
   4f518:	add	x1, x1, #0x938
   4f51c:	add	x2, x3, x2, lsl #1
   4f520:	ldr	x3, [sp, #128]
   4f524:	add	x2, x2, #0x2
   4f528:	ldr	x2, [x3, x2, lsl #3]
   4f52c:	blr	x23
   4f530:	ldr	x0, [sp, #176]
   4f534:	ldr	x4, [sp, #344]
   4f538:	cbz	x0, 4f56c <aarch64_get_opcode@@Base+0x1a5c>
   4f53c:	ldr	w0, [sp, #116]
   4f540:	cmp	w0, #0x9
   4f544:	lsl	x0, x4, #1
   4f548:	lsl	x4, x4, #2
   4f54c:	csel	x4, x4, x0, ne  // ne = any
   4f550:	ldr	x0, [sp, #160]
   4f554:	cmp	x0, #0x0
   4f558:	ldr	x0, [sp, #104]
   4f55c:	cneg	x4, x4, eq  // eq = none
   4f560:	cmp	w28, #0xf
   4f564:	csel	x0, x0, x4, eq  // eq = none
   4f568:	str	x0, [sp, #104]
   4f56c:	tbz	w20, #24, 4fa74 <aarch64_get_opcode@@Base+0x1f64>
   4f570:	cbnz	x4, 4faf4 <aarch64_get_opcode@@Base+0x1fe4>
   4f574:	ldr	x0, [sp, #160]
   4f578:	str	x4, [sp, #344]
   4f57c:	cbnz	x0, 5007c <aarch64_get_opcode@@Base+0x256c>
   4f580:	mov	x0, x21
   4f584:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f588:	add	x1, x1, #0x950
   4f58c:	blr	x23
   4f590:	ldr	x4, [sp, #344]
   4f594:	nop
   4f598:	add	x19, x19, #0x2
   4f59c:	ldr	w0, [sp, #212]
   4f5a0:	cbz	w0, 4f214 <aarch64_get_opcode@@Base+0x1704>
   4f5a4:	str	x4, [sp, #344]
   4f5a8:	mov	x0, x21
   4f5ac:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f5b0:	add	x1, x1, #0x978
   4f5b4:	blr	x23
   4f5b8:	ldr	w0, [x24, #172]
   4f5bc:	ldr	x1, [sp, #152]
   4f5c0:	ldr	x3, [x24, #120]
   4f5c4:	and	x2, x1, #0xfffffffffffffffc
   4f5c8:	ldr	x4, [sp, #344]
   4f5cc:	lsl	w0, w0, #1
   4f5d0:	mov	x1, x24
   4f5d4:	add	x0, x2, w0, sxtw
   4f5d8:	add	x0, x0, x4
   4f5dc:	blr	x3
   4f5e0:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4f5e4:	ldr	w0, [sp, #228]
   4f5e8:	add	x19, x19, #0x2
   4f5ec:	cmp	w0, #0x1
   4f5f0:	b.eq	4ff2c <aarch64_get_opcode@@Base+0x241c>  // b.none
   4f5f4:	ldr	w0, [sp, #232]
   4f5f8:	cmp	w0, #0x20
   4f5fc:	b.ls	4fad8 <aarch64_get_opcode@@Base+0x1fc8>  // b.plast
   4f600:	ldr	w2, [sp, #224]
   4f604:	mov	x0, x21
   4f608:	ldr	w3, [sp, #236]
   4f60c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f610:	add	x1, x1, #0x988
   4f614:	blr	x23
   4f618:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4f61c:	and	x4, x20, #0x100
   4f620:	tbz	w20, #8, 4fa5c <aarch64_get_opcode@@Base+0x1f4c>
   4f624:	ldr	w3, [sp, #252]
   4f628:	mov	w2, #0x64                  	// #100
   4f62c:	ldr	w0, [sp, #260]
   4f630:	mov	w1, #0xf                   	// #15
   4f634:	add	x19, x19, #0x2
   4f638:	cbnz	w0, 4fa24 <aarch64_get_opcode@@Base+0x1f14>
   4f63c:	mov	x0, x21
   4f640:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f644:	add	x1, x1, #0x9b8
   4f648:	blr	x23
   4f64c:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4f650:	and	x0, x20, #0x7f8000
   4f654:	add	x19, x19, #0x2
   4f658:	and	x0, x0, #0xffffffffffc0ffff
   4f65c:	cmp	x0, #0x8, lsl #12
   4f660:	b.eq	4ff98 <aarch64_get_opcode@@Base+0x2488>  // b.none
   4f664:	cmp	x0, #0x400, lsl #12
   4f668:	b.eq	4ffc0 <aarch64_get_opcode@@Base+0x24b0>  // b.none
   4f66c:	cbz	x0, 4ffac <aarch64_get_opcode@@Base+0x249c>
   4f670:	mov	x0, x21
   4f674:	adrp	x1, 63000 <fields@@Base+0x42d8>
   4f678:	add	x1, x1, #0x6c8
   4f67c:	blr	x23
   4f680:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4f684:	ldr	w2, [sp, #208]
   4f688:	add	x19, x19, #0x2
   4f68c:	mov	x0, x21
   4f690:	adrp	x1, 6a000 <fields@@Base+0xb2d8>
   4f694:	add	x1, x1, #0xcc0
   4f698:	blr	x23
   4f69c:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4f6a0:	adrp	x0, f9000 <aarch64_opcode_table@@Base+0x55a20>
   4f6a4:	ldr	x1, [sp, #136]
   4f6a8:	ldr	w0, [x0, #1616]
   4f6ac:	add	x0, x0, x0, lsl #3
   4f6b0:	add	x0, x1, x0, lsl #1
   4f6b4:	ldr	x1, [sp, #128]
   4f6b8:	add	x0, x0, #0x2
   4f6bc:	ldr	x2, [x1, x0, lsl #3]
   4f6c0:	tbnz	w20, #8, 4f9d4 <aarch64_get_opcode@@Base+0x1ec4>
   4f6c4:	mov	x0, x21
   4f6c8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f6cc:	add	x1, x1, #0x938
   4f6d0:	blr	x23
   4f6d4:	mov	w0, #0x1                   	// #1
   4f6d8:	ldr	w1, [sp, #192]
   4f6dc:	add	x19, x19, #0x2
   4f6e0:	cbz	w1, 4fab4 <aarch64_get_opcode@@Base+0x1fa4>
   4f6e4:	mul	w3, w1, w0
   4f6e8:	tbz	w20, #24, 4fb18 <aarch64_get_opcode@@Base+0x2008>
   4f6ec:	ldp	x4, x2, [sp, #264]
   4f6f0:	mov	x0, x21
   4f6f4:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f6f8:	add	x1, x1, #0xb10
   4f6fc:	blr	x23
   4f700:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4f704:	adrp	x0, f9000 <aarch64_opcode_table@@Base+0x55a20>
   4f708:	add	x19, x19, #0x2
   4f70c:	ldr	x2, [sp, #136]
   4f710:	cmp	w26, #0x3
   4f714:	ldr	w0, [x0, #1616]
   4f718:	ldr	x1, [sp, #200]
   4f71c:	add	x0, x0, x0, lsl #3
   4f720:	lsl	x0, x0, #1
   4f724:	add	x1, x0, x1
   4f728:	add	x0, x0, x2
   4f72c:	ldr	x2, [sp, #128]
   4f730:	add	x1, x1, #0x2
   4f734:	add	x0, x0, #0x2
   4f738:	ldr	x4, [x2, x1, lsl #3]
   4f73c:	ldr	x2, [x2, x0, lsl #3]
   4f740:	b.eq	4ff44 <aarch64_get_opcode@@Base+0x2434>  // b.none
   4f744:	b.le	4f980 <aarch64_get_opcode@@Base+0x1e70>
   4f748:	ldr	w3, [sp, #172]
   4f74c:	mov	x0, x21
   4f750:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f754:	add	x1, x1, #0xb30
   4f758:	blr	x23
   4f75c:	ldr	w0, [sp, #168]
   4f760:	cbz	w0, 4f778 <aarch64_get_opcode@@Base+0x1c68>
   4f764:	ldr	w2, [sp, #168]
   4f768:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f76c:	mov	x0, x21
   4f770:	add	x1, x1, #0xb50
   4f774:	blr	x23
   4f778:	mov	x0, x21
   4f77c:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   4f780:	add	x1, x1, #0x4f0
   4f784:	blr	x23
   4f788:	ldr	w0, [sp, #296]
   4f78c:	cmp	w0, #0x5
   4f790:	b.ne	4f214 <aarch64_get_opcode@@Base+0x1704>  // b.any
   4f794:	adrp	x0, 64000 <fields@@Base+0x52d8>
   4f798:	add	x1, x0, #0x8d8
   4f79c:	mov	x0, x21
   4f7a0:	blr	x23
   4f7a4:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4f7a8:	ldr	x0, [sp, #144]
   4f7ac:	add	x19, x19, #0x2
   4f7b0:	cmp	x0, #0x400, lsl #12
   4f7b4:	b.eq	4fff4 <aarch64_get_opcode@@Base+0x24e4>  // b.none
   4f7b8:	b.gt	4f958 <aarch64_get_opcode@@Base+0x1e48>
   4f7bc:	cbz	x0, 4ffe0 <aarch64_get_opcode@@Base+0x24d0>
   4f7c0:	cmp	x0, #0x100
   4f7c4:	b.ne	4f214 <aarch64_get_opcode@@Base+0x1704>  // b.any
   4f7c8:	mov	x0, x21
   4f7cc:	adrp	x1, 65000 <fields@@Base+0x62d8>
   4f7d0:	add	x1, x1, #0xef8
   4f7d4:	blr	x23
   4f7d8:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4f7dc:	and	x0, x20, #0xfff80
   4f7e0:	add	x19, x19, #0x2
   4f7e4:	and	x0, x0, #0xfffffffffff800ff
   4f7e8:	cmp	x0, #0x80
   4f7ec:	b.eq	4f96c <aarch64_get_opcode@@Base+0x1e5c>  // b.none
   4f7f0:	cmp	x0, #0x80, lsl #12
   4f7f4:	b.eq	4fa10 <aarch64_get_opcode@@Base+0x1f00>  // b.none
   4f7f8:	cbz	x0, 4f9fc <aarch64_get_opcode@@Base+0x1eec>
   4f7fc:	mov	w2, #0x5                   	// #5
   4f800:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f804:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   4f808:	add	x1, x1, #0xa58
   4f80c:	add	x0, x0, #0x250
   4f810:	bl	359e0 <dcgettext@plt>
   4f814:	mov	x1, x0
   4f818:	mov	x0, x21
   4f81c:	blr	x23
   4f820:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4f824:	and	x0, x20, #0x7f8000
   4f828:	add	x19, x19, #0x2
   4f82c:	and	x0, x0, #0xffffffffffc0ffff
   4f830:	cmp	x0, #0x8, lsl #12
   4f834:	b.eq	4f96c <aarch64_get_opcode@@Base+0x1e5c>  // b.none
   4f838:	cmp	x0, #0x400, lsl #12
   4f83c:	b.eq	4fa10 <aarch64_get_opcode@@Base+0x1f00>  // b.none
   4f840:	cbz	x0, 4f9fc <aarch64_get_opcode@@Base+0x1eec>
   4f844:	mov	x0, x21
   4f848:	adrp	x1, 5e000 <xexit@@Base+0x6e08>
   4f84c:	add	x1, x1, #0x330
   4f850:	blr	x23
   4f854:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4f858:	ldr	x2, [sp, #216]
   4f85c:	add	x19, x19, #0x2
   4f860:	mov	x0, x21
   4f864:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f868:	add	x1, x1, #0x8e8
   4f86c:	blr	x23
   4f870:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4f874:	add	x19, x19, #0x2
   4f878:	mov	x0, x21
   4f87c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f880:	add	x1, x1, #0x878
   4f884:	blr	x23
   4f888:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4f88c:	ldr	x0, [sp, #120]
   4f890:	add	x19, x19, #0x2
   4f894:	cmp	x0, #0xd
   4f898:	b.eq	50050 <aarch64_get_opcode@@Base+0x2540>  // b.none
   4f89c:	b.hi	4f99c <aarch64_get_opcode@@Base+0x1e8c>  // b.pmore
   4f8a0:	cmp	x0, #0x2
   4f8a4:	b.eq	5003c <aarch64_get_opcode@@Base+0x252c>  // b.none
   4f8a8:	cmp	x0, #0xc
   4f8ac:	b.ne	4f93c <aarch64_get_opcode@@Base+0x1e2c>  // b.any
   4f8b0:	mov	x0, x21
   4f8b4:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f8b8:	add	x1, x1, #0xa20
   4f8bc:	blr	x23
   4f8c0:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4f8c4:	ldr	w2, [sp, #196]
   4f8c8:	add	x19, x19, #0x2
   4f8cc:	ldr	x0, [sp, #184]
   4f8d0:	str	x0, [sp, #360]
   4f8d4:	adrp	x1, 6a000 <fields@@Base+0xb2d8>
   4f8d8:	mov	x0, x21
   4f8dc:	add	x1, x1, #0xcc0
   4f8e0:	blr	x23
   4f8e4:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4f8e8:	and	x0, x20, #0x60
   4f8ec:	add	x19, x19, #0x2
   4f8f0:	cmp	x0, #0x20
   4f8f4:	b.eq	4f844 <aarch64_get_opcode@@Base+0x1d34>  // b.none
   4f8f8:	cmp	x0, #0x40
   4f8fc:	b.eq	4ff84 <aarch64_get_opcode@@Base+0x2474>  // b.none
   4f900:	cbz	x0, 4f214 <aarch64_get_opcode@@Base+0x1704>
   4f904:	mov	x0, x21
   4f908:	adrp	x1, 58000 <xexit@@Base+0xe08>
   4f90c:	add	x1, x1, #0xc88
   4f910:	blr	x23
   4f914:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4f918:	cmp	w0, #0x33
   4f91c:	b.ne	4f9bc <aarch64_get_opcode@@Base+0x1eac>  // b.any
   4f920:	str	w2, [sp, #344]
   4f924:	mov	x0, x21
   4f928:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f92c:	add	x1, x1, #0x8d0
   4f930:	blr	x23
   4f934:	ldr	w2, [sp, #344]
   4f938:	b	4f490 <aarch64_get_opcode@@Base+0x1980>
   4f93c:	cmp	x0, #0x1
   4f940:	b.ne	50064 <aarch64_get_opcode@@Base+0x2554>  // b.any
   4f944:	mov	x0, x21
   4f948:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f94c:	add	x1, x1, #0xa08
   4f950:	blr	x23
   4f954:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4f958:	ldr	x0, [sp, #144]
   4f95c:	mov	x1, #0x100                 	// #256
   4f960:	movk	x1, #0x40, lsl #16
   4f964:	cmp	x0, x1
   4f968:	b.ne	4f214 <aarch64_get_opcode@@Base+0x1704>  // b.any
   4f96c:	mov	x0, x21
   4f970:	adrp	x1, 6c000 <fields@@Base+0xd2d8>
   4f974:	add	x1, x1, #0x350
   4f978:	blr	x23
   4f97c:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4f980:	cmp	w26, #0x1
   4f984:	b.eq	4ff44 <aarch64_get_opcode@@Base+0x2434>  // b.none
   4f988:	mov	x0, x21
   4f98c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f990:	add	x1, x1, #0xb60
   4f994:	blr	x23
   4f998:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4f99c:	ldr	x0, [sp, #120]
   4f9a0:	cmp	x0, #0xe
   4f9a4:	b.eq	50028 <aarch64_get_opcode@@Base+0x2518>  // b.none
   4f9a8:	mov	x0, x21
   4f9ac:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f9b0:	add	x1, x1, #0xa38
   4f9b4:	blr	x23
   4f9b8:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4f9bc:	cmp	w0, #0x34
   4f9c0:	b.ne	4f238 <aarch64_get_opcode@@Base+0x1728>  // b.any
   4f9c4:	cmp	w2, #0x79
   4f9c8:	b.eq	4fbf4 <aarch64_get_opcode@@Base+0x20e4>  // b.none
   4f9cc:	ldr	w3, [sp, #324]
   4f9d0:	b	4f49c <aarch64_get_opcode@@Base+0x198c>
   4f9d4:	mov	x0, x21
   4f9d8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4f9dc:	add	x1, x1, #0x938
   4f9e0:	blr	x23
   4f9e4:	ldr	x0, [sp, #160]
   4f9e8:	cbnz	x0, 4fac8 <aarch64_get_opcode@@Base+0x1fb8>
   4f9ec:	ldr	x0, [sp, #288]
   4f9f0:	str	x0, [sp, #104]
   4f9f4:	mov	w0, #0x4                   	// #4
   4f9f8:	b	4f6d8 <aarch64_get_opcode@@Base+0x1bc8>
   4f9fc:	mov	x0, x21
   4fa00:	adrp	x1, 58000 <xexit@@Base+0xe08>
   4fa04:	add	x1, x1, #0xf0
   4fa08:	blr	x23
   4fa0c:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4fa10:	mov	x0, x21
   4fa14:	adrp	x1, 6e000 <fields@@Base+0xf2d8>
   4fa18:	add	x1, x1, #0xa08
   4fa1c:	blr	x23
   4fa20:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4fa24:	cmp	w0, #0x1
   4fa28:	b.eq	4fbe0 <aarch64_get_opcode@@Base+0x20d0>  // b.none
   4fa2c:	add	w0, w3, w0
   4fa30:	sub	w5, w0, #0x1
   4fa34:	cmp	w1, w5
   4fa38:	b.ge	50010 <aarch64_get_opcode@@Base+0x2500>  // b.tcont
   4fa3c:	cmp	x4, #0x0
   4fa40:	asr	w4, w5, #1
   4fa44:	csel	w4, w4, w5, eq  // eq = none
   4fa48:	mov	x0, x21
   4fa4c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4fa50:	add	x1, x1, #0x9d0
   4fa54:	blr	x23
   4fa58:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4fa5c:	ldr	w0, [sp, #248]
   4fa60:	mov	w2, #0x73                  	// #115
   4fa64:	ldr	w3, [sp, #256]
   4fa68:	mov	w1, #0x1f                  	// #31
   4fa6c:	and	w0, w0, #0x7f
   4fa70:	b	4f634 <aarch64_get_opcode@@Base+0x1b24>
   4fa74:	str	x4, [sp, #344]
   4fa78:	mov	x0, x21
   4fa7c:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   4fa80:	add	x1, x1, #0x4f0
   4fa84:	blr	x23
   4fa88:	ldr	x0, [sp, #240]
   4fa8c:	ldr	x4, [sp, #344]
   4fa90:	cbz	x0, 4fb30 <aarch64_get_opcode@@Base+0x2020>
   4fa94:	cbz	x4, 50094 <aarch64_get_opcode@@Base+0x2584>
   4fa98:	mov	w2, w4
   4fa9c:	mov	x0, x21
   4faa0:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4faa4:	add	x1, x1, #0x958
   4faa8:	blr	x23
   4faac:	ldr	x4, [sp, #344]
   4fab0:	b	4f598 <aarch64_get_opcode@@Base+0x1a88>
   4fab4:	mov	x0, x21
   4fab8:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   4fabc:	add	x1, x1, #0x4f0
   4fac0:	blr	x23
   4fac4:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4fac8:	ldr	x0, [sp, #280]
   4facc:	str	x0, [sp, #104]
   4fad0:	mov	w0, #0x4                   	// #4
   4fad4:	b	4f6d8 <aarch64_get_opcode@@Base+0x1bc8>
   4fad8:	ldr	w2, [sp, #224]
   4fadc:	mov	x0, x21
   4fae0:	ldr	w3, [sp, #236]
   4fae4:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4fae8:	add	x1, x1, #0x9a8
   4faec:	blr	x23
   4faf0:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4faf4:	ldr	x3, [sp, #264]
   4faf8:	str	x4, [sp, #344]
   4fafc:	mov	w2, w4
   4fb00:	mov	x0, x21
   4fb04:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4fb08:	add	x1, x1, #0x940
   4fb0c:	blr	x23
   4fb10:	ldr	x4, [sp, #344]
   4fb14:	b	4f598 <aarch64_get_opcode@@Base+0x1a88>
   4fb18:	ldr	x2, [sp, #272]
   4fb1c:	mov	x0, x21
   4fb20:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4fb24:	add	x1, x1, #0xb20
   4fb28:	blr	x23
   4fb2c:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4fb30:	ldr	x0, [sp, #160]
   4fb34:	str	x4, [sp, #104]
   4fb38:	str	x4, [sp, #344]
   4fb3c:	mov	w3, w4
   4fb40:	orr	x1, x4, x0
   4fb44:	adrp	x0, 58000 <xexit@@Base+0xe08>
   4fb48:	cmp	x1, #0x0
   4fb4c:	add	x0, x0, #0x330
   4fb50:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4fb54:	add	x2, x1, #0x930
   4fb58:	csel	x2, x2, x0, eq  // eq = none
   4fb5c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4fb60:	mov	x0, x21
   4fb64:	add	x1, x1, #0x968
   4fb68:	blr	x23
   4fb6c:	ldr	x4, [sp, #344]
   4fb70:	b	4f598 <aarch64_get_opcode@@Base+0x1a88>
   4fb74:	ldr	w3, [sp, #316]
   4fb78:	str	w3, [sp, #344]
   4fb7c:	mov	w2, #0x73                  	// #115
   4fb80:	mov	x0, x21
   4fb84:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4fb88:	add	x1, x1, #0xb80
   4fb8c:	blr	x23
   4fb90:	ldrb	w0, [x19, #2]
   4fb94:	mov	w2, #0x73                  	// #115
   4fb98:	ldr	w3, [sp, #344]
   4fb9c:	cmp	w0, #0x33
   4fba0:	b.ne	4f4c8 <aarch64_get_opcode@@Base+0x19b8>  // b.any
   4fba4:	ldr	w0, [sp, #192]
   4fba8:	mov	w2, #0x73                  	// #115
   4fbac:	subs	w0, w0, #0x1
   4fbb0:	b.eq	4fbc8 <aarch64_get_opcode@@Base+0x20b8>  // b.none
   4fbb4:	add	w3, w0, w3
   4fbb8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4fbbc:	mov	x0, x21
   4fbc0:	add	x1, x1, #0xb00
   4fbc4:	blr	x23
   4fbc8:	add	x19, x19, #0x3
   4fbcc:	mov	x0, x21
   4fbd0:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4fbd4:	add	x1, x1, #0x9b0
   4fbd8:	blr	x23
   4fbdc:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4fbe0:	mov	x0, x21
   4fbe4:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4fbe8:	add	x1, x1, #0x9c0
   4fbec:	blr	x23
   4fbf0:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4fbf4:	ldr	w3, [sp, #340]
   4fbf8:	b	4fb78 <aarch64_get_opcode@@Base+0x2068>
   4fbfc:	tbnz	w20, #6, 4fc1c <aarch64_get_opcode@@Base+0x210c>
   4fc00:	ldr	x2, [sp, #360]
   4fc04:	mov	x0, x21
   4fc08:	add	x19, x27, #0x1
   4fc0c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4fc10:	add	x1, x1, #0xa70
   4fc14:	blr	x23
   4fc18:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4fc1c:	ldr	x0, [sp, #360]
   4fc20:	add	x19, x27, #0x1
   4fc24:	lsr	x2, x0, #1
   4fc28:	tbz	w0, #0, 500fc <aarch64_get_opcode@@Base+0x25ec>
   4fc2c:	mov	x0, x21
   4fc30:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4fc34:	add	x1, x1, #0xa78
   4fc38:	blr	x23
   4fc3c:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4fc40:	ldr	w2, [sp, #356]
   4fc44:	mov	w19, #0x1                   	// #1
   4fc48:	ldr	x0, [sp, #360]
   4fc4c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4fc50:	lsl	w2, w19, w2
   4fc54:	add	x1, x1, #0x870
   4fc58:	sub	w2, w2, w0
   4fc5c:	mov	x0, x21
   4fc60:	ldrb	w2, [x27, w2, sxtw]
   4fc64:	blr	x23
   4fc68:	ldr	w0, [sp, #356]
   4fc6c:	lsl	w19, w19, w0
   4fc70:	add	x27, x27, w19, sxtw
   4fc74:	add	x19, x27, #0x1
   4fc78:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4fc7c:	ldr	x3, [sp, #360]
   4fc80:	add	x19, x27, #0x1
   4fc84:	ldrb	w0, [x27, #1]
   4fc88:	cmp	w0, #0x75
   4fc8c:	b.eq	500dc <aarch64_get_opcode@@Base+0x25cc>  // b.none
   4fc90:	adrp	x2, f9000 <aarch64_opcode_table@@Base+0x55a20>
   4fc94:	mov	x0, x21
   4fc98:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   4fc9c:	add	x1, x1, #0xa78
   4fca0:	ldr	w2, [x2, #1616]
   4fca4:	add	x2, x2, x2, lsl #3
   4fca8:	add	x2, x3, x2, lsl #1
   4fcac:	ldr	x3, [sp, #128]
   4fcb0:	add	x2, x2, #0x2
   4fcb4:	ldr	x2, [x3, x2, lsl #3]
   4fcb8:	blr	x23
   4fcbc:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4fcc0:	ldr	x3, [sp, #328]
   4fcc4:	mov	x0, x21
   4fcc8:	ldr	x2, [sp, #360]
   4fccc:	add	x19, x27, #0x1
   4fcd0:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4fcd4:	add	x1, x1, #0x8e8
   4fcd8:	sub	x2, x3, x2
   4fcdc:	blr	x23
   4fce0:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4fce4:	adrp	x2, 8e000 <aarch64_operands@@Base+0x2bc0>
   4fce8:	add	x2, x2, #0xc70
   4fcec:	ldr	x3, [sp, #360]
   4fcf0:	add	x2, x2, #0x2d0
   4fcf4:	ldr	x2, [x2, x3, lsl #3]
   4fcf8:	mov	x0, x21
   4fcfc:	add	x19, x27, #0x1
   4fd00:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   4fd04:	add	x1, x1, #0xa78
   4fd08:	blr	x23
   4fd0c:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4fd10:	ldr	x2, [sp, #360]
   4fd14:	add	x19, x27, #0x1
   4fd18:	cmp	x2, #0x7
   4fd1c:	b.ls	50110 <aarch64_get_opcode@@Base+0x2600>  // b.plast
   4fd20:	adrp	x3, 8e000 <aarch64_operands@@Base+0x2bc0>
   4fd24:	add	x3, x3, #0xc70
   4fd28:	add	x3, x3, #0x1f0
   4fd2c:	and	x2, x2, #0x7
   4fd30:	mov	x0, x21
   4fd34:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4fd38:	add	x1, x1, #0xae0
   4fd3c:	ldr	x2, [x3, x2, lsl #3]
   4fd40:	blr	x23
   4fd44:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4fd48:	ldr	w2, [sp, #360]
   4fd4c:	mov	x0, x21
   4fd50:	add	x19, x27, #0x1
   4fd54:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4fd58:	add	x1, x1, #0xaf0
   4fd5c:	blr	x23
   4fd60:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4fd64:	ldr	w2, [sp, #356]
   4fd68:	mov	x0, #0x1                   	// #1
   4fd6c:	ldr	x1, [sp, #360]
   4fd70:	add	x19, x27, #0x2
   4fd74:	lsl	x0, x0, x2
   4fd78:	sub	x0, x0, #0x1
   4fd7c:	cmp	x0, x1
   4fd80:	add	x0, x27, #0x1
   4fd84:	b.eq	4fda0 <aarch64_get_opcode@@Base+0x2290>  // b.none
   4fd88:	mov	x27, x0
   4fd8c:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4fd90:	ldr	x1, [sp, #360]
   4fd94:	add	x0, x27, #0x1
   4fd98:	add	x19, x27, #0x2
   4fd9c:	cbnz	x1, 4fd88 <aarch64_get_opcode@@Base+0x2278>
   4fda0:	ldrb	w2, [x27, #1]
   4fda4:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4fda8:	mov	x27, x0
   4fdac:	add	x1, x1, #0x870
   4fdb0:	mov	x0, x21
   4fdb4:	blr	x23
   4fdb8:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4fdbc:	ldr	x2, [sp, #360]
   4fdc0:	mov	x0, x21
   4fdc4:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4fdc8:	add	x1, x1, #0x8e8
   4fdcc:	add	x19, x27, #0x1
   4fdd0:	blr	x23
   4fdd4:	ldr	x0, [sp, #360]
   4fdd8:	str	x0, [sp, #104]
   4fddc:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4fde0:	ldr	x0, [sp, #360]
   4fde4:	add	x19, x27, #0x1
   4fde8:	cmp	x0, #0x2
   4fdec:	b.eq	501f8 <aarch64_get_opcode@@Base+0x26e8>  // b.none
   4fdf0:	b.hi	500c0 <aarch64_get_opcode@@Base+0x25b0>  // b.pmore
   4fdf4:	cbz	x0, 5020c <aarch64_get_opcode@@Base+0x26fc>
   4fdf8:	mov	x0, x21
   4fdfc:	adrp	x1, 5e000 <xexit@@Base+0x6e08>
   4fe00:	add	x1, x1, #0x560
   4fe04:	blr	x23
   4fe08:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4fe0c:	adrp	x2, 8e000 <aarch64_operands@@Base+0x2bc0>
   4fe10:	add	x2, x2, #0xc70
   4fe14:	add	x2, x2, #0x350
   4fe18:	ldr	x3, [sp, #360]
   4fe1c:	b	4fcf4 <aarch64_get_opcode@@Base+0x21e4>
   4fe20:	ldr	x2, [sp, #360]
   4fe24:	mov	w0, #0x40000000            	// #1073741824
   4fe28:	mov	w1, #0x3e000000            	// #1040187392
   4fe2c:	mov	w7, #0x312d                	// #12589
   4fe30:	and	x4, x2, #0xf
   4fe34:	movk	w7, #0x1, lsl #16
   4fe38:	tst	x2, #0x40
   4fe3c:	lsl	w3, w2, #24
   4fe40:	csel	w1, w1, w0, ne  // ne = any
   4fe44:	and	w3, w3, #0x80000000
   4fe48:	ubfiz	w0, w2, #19, #6
   4fe4c:	add	x4, x4, #0x10
   4fe50:	orr	w3, w3, w0
   4fe54:	mov	w0, #0x6139                	// #24889
   4fe58:	orr	w3, w3, w1
   4fe5c:	movk	w0, #0x68c2, lsl #16
   4fe60:	mov	w5, #0x10c6                	// #4294
   4fe64:	ubfx	x1, x3, #23, #8
   4fe68:	sub	w1, w1, #0x7c
   4fe6c:	lsl	w7, w7, w1
   4fe70:	and	x1, x2, #0x80
   4fe74:	mul	w7, w7, w4
   4fe78:	mul	w0, w7, w0
   4fe7c:	ror	w0, w0, #6
   4fe80:	cmp	w0, w5
   4fe84:	b.hi	50124 <aarch64_get_opcode@@Base+0x2614>  // b.pmore
   4fe88:	mov	w5, #0xca6b                	// #51819
   4fe8c:	mov	w6, #0x9680                	// #38528
   4fe90:	movk	w5, #0x6b5f, lsl #16
   4fe94:	movk	w6, #0x98, lsl #16
   4fe98:	mov	w8, #0xde83                	// #56963
   4fe9c:	cmp	x1, #0x0
   4fea0:	umull	x5, w7, w5
   4fea4:	movk	w8, #0x431b, lsl #16
   4fea8:	mov	w0, #0x20                  	// #32
   4feac:	add	x19, x27, #0x1
   4feb0:	mov	w4, #0x2d                  	// #45
   4feb4:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4feb8:	lsr	x5, x5, #54
   4febc:	csel	w4, w4, w0, ne  // ne = any
   4fec0:	add	x1, x1, #0xa98
   4fec4:	mov	x0, x21
   4fec8:	msub	w6, w5, w6, w7
   4fecc:	umull	x6, w6, w8
   4fed0:	lsr	x6, x6, #50
   4fed4:	blr	x23
   4fed8:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4fedc:	ldr	x3, [sp, #360]
   4fee0:	ldr	w0, [sp, #112]
   4fee4:	cmp	x3, #0xf
   4fee8:	csinc	w0, w0, wzr, ne  // ne = any
   4feec:	str	w0, [sp, #112]
   4fef0:	b	4fc80 <aarch64_get_opcode@@Base+0x2170>
   4fef4:	ldr	w0, [sp, #356]
   4fef8:	adrp	x2, 8e000 <aarch64_operands@@Base+0x2bc0>
   4fefc:	add	x19, x27, #0x1
   4ff00:	add	x2, x2, #0xc70
   4ff04:	cmp	w0, #0x2
   4ff08:	ldr	x3, [sp, #360]
   4ff0c:	b.eq	50198 <aarch64_get_opcode@@Base+0x2688>  // b.none
   4ff10:	add	x2, x2, #0x250
   4ff14:	ldr	x2, [x2, x3, lsl #3]
   4ff18:	mov	x0, x21
   4ff1c:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   4ff20:	add	x1, x1, #0xa78
   4ff24:	blr	x23
   4ff28:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4ff2c:	ldr	w2, [sp, #224]
   4ff30:	mov	x0, x21
   4ff34:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4ff38:	add	x1, x1, #0x980
   4ff3c:	blr	x23
   4ff40:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4ff44:	ldr	w3, [sp, #172]
   4ff48:	mov	x0, x21
   4ff4c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4ff50:	add	x1, x1, #0xb40
   4ff54:	blr	x23
   4ff58:	ldr	w2, [sp, #168]
   4ff5c:	cbz	w2, 4f214 <aarch64_get_opcode@@Base+0x1704>
   4ff60:	mov	x0, x21
   4ff64:	adrp	x1, 64000 <fields@@Base+0x52d8>
   4ff68:	add	x1, x1, #0xb50
   4ff6c:	blr	x23
   4ff70:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4ff74:	cmp	w2, #0x79
   4ff78:	b.eq	500b8 <aarch64_get_opcode@@Base+0x25a8>  // b.none
   4ff7c:	ldr	w3, [sp, #320]
   4ff80:	b	4f49c <aarch64_get_opcode@@Base+0x198c>
   4ff84:	mov	x0, x21
   4ff88:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   4ff8c:	add	x1, x1, #0xf70
   4ff90:	blr	x23
   4ff94:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4ff98:	mov	x0, x21
   4ff9c:	adrp	x1, 65000 <fields@@Base+0x62d8>
   4ffa0:	add	x1, x1, #0x238
   4ffa4:	blr	x23
   4ffa8:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4ffac:	mov	x0, x21
   4ffb0:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   4ffb4:	add	x1, x1, #0x3b8
   4ffb8:	blr	x23
   4ffbc:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4ffc0:	mov	x0, x21
   4ffc4:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   4ffc8:	add	x1, x1, #0x3e8
   4ffcc:	blr	x23
   4ffd0:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4ffd4:	ldr	w0, [sp, #312]
   4ffd8:	mov	w2, #0x64                  	// #100
   4ffdc:	b	4fbac <aarch64_get_opcode@@Base+0x209c>
   4ffe0:	mov	x0, x21
   4ffe4:	adrp	x1, 5a000 <xexit@@Base+0x2e08>
   4ffe8:	add	x1, x1, #0xe68
   4ffec:	blr	x23
   4fff0:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   4fff4:	mov	x0, x21
   4fff8:	adrp	x1, 5b000 <xexit@@Base+0x3e08>
   4fffc:	add	x1, x1, #0xd10
   50000:	blr	x23
   50004:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   50008:	str	wzr, [sp, #112]
   5000c:	b	4f2c0 <aarch64_get_opcode@@Base+0x17b0>
   50010:	mov	w4, w2
   50014:	mov	x0, x21
   50018:	adrp	x1, 64000 <fields@@Base+0x52d8>
   5001c:	add	x1, x1, #0x9f0
   50020:	blr	x23
   50024:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   50028:	mov	x0, x21
   5002c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50030:	add	x1, x1, #0xa30
   50034:	blr	x23
   50038:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   5003c:	mov	x0, x21
   50040:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50044:	add	x1, x1, #0xa10
   50048:	blr	x23
   5004c:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   50050:	mov	x0, x21
   50054:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50058:	add	x1, x1, #0xa28
   5005c:	blr	x23
   50060:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   50064:	ldr	x2, [sp, #120]
   50068:	mov	x0, x21
   5006c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50070:	add	x1, x1, #0xa40
   50074:	blr	x23
   50078:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   5007c:	mov	x0, x21
   50080:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   50084:	add	x1, x1, #0x4f0
   50088:	blr	x23
   5008c:	ldr	x4, [sp, #344]
   50090:	b	4f598 <aarch64_get_opcode@@Base+0x1a88>
   50094:	ldr	x0, [sp, #160]
   50098:	cbnz	x0, 4f598 <aarch64_get_opcode@@Base+0x1a88>
   5009c:	str	x4, [sp, #344]
   500a0:	mov	x0, x21
   500a4:	adrp	x1, 64000 <fields@@Base+0x52d8>
   500a8:	add	x1, x1, #0x960
   500ac:	blr	x23
   500b0:	ldr	x4, [sp, #344]
   500b4:	b	4f598 <aarch64_get_opcode@@Base+0x1a88>
   500b8:	ldr	w3, [sp, #336]
   500bc:	b	4fb78 <aarch64_get_opcode@@Base+0x2068>
   500c0:	cmp	x0, #0x3
   500c4:	b.ne	501b0 <aarch64_get_opcode@@Base+0x26a0>  // b.any
   500c8:	mov	x0, x21
   500cc:	adrp	x1, 5e000 <xexit@@Base+0x6e08>
   500d0:	add	x1, x1, #0x5b0
   500d4:	blr	x23
   500d8:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   500dc:	ldr	x1, [sp, #304]
   500e0:	add	x0, x27, #0x2
   500e4:	mov	x27, x19
   500e8:	cmp	x1, x3
   500ec:	b.eq	501a0 <aarch64_get_opcode@@Base+0x2690>  // b.none
   500f0:	mov	x19, x0
   500f4:	str	x3, [sp, #304]
   500f8:	b	4fc90 <aarch64_get_opcode@@Base+0x2180>
   500fc:	mov	x0, x21
   50100:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50104:	add	x1, x1, #0xa90
   50108:	blr	x23
   5010c:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   50110:	mov	x0, x21
   50114:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50118:	add	x1, x1, #0xae8
   5011c:	blr	x23
   50120:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   50124:	mov	w0, #0x7e91                	// #32401
   50128:	mov	w4, #0x8db8                	// #36280
   5012c:	movk	w0, #0x3afb, lsl #16
   50130:	mov	w5, #0xca6b                	// #51819
   50134:	mov	w6, #0x9680                	// #38528
   50138:	movk	w4, #0x6, lsl #16
   5013c:	mul	w0, w7, w0
   50140:	movk	w5, #0x6b5f, lsl #16
   50144:	movk	w6, #0x98, lsl #16
   50148:	ror	w0, w0, #4
   5014c:	cmp	w0, w4
   50150:	b.hi	501c4 <aarch64_get_opcode@@Base+0x26b4>  // b.pmore
   50154:	umull	x5, w7, w5
   50158:	mov	w8, #0x1759                	// #5977
   5015c:	movk	w8, #0xd1b7, lsl #16
   50160:	cmp	x1, #0x0
   50164:	mov	w0, #0x20                  	// #32
   50168:	add	x19, x27, #0x1
   5016c:	lsr	x5, x5, #54
   50170:	mov	w4, #0x2d                  	// #45
   50174:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50178:	csel	w4, w4, w0, ne  // ne = any
   5017c:	add	x1, x1, #0xab0
   50180:	mov	x0, x21
   50184:	msub	w6, w5, w6, w7
   50188:	umull	x6, w6, w8
   5018c:	lsr	x6, x6, #45
   50190:	blr	x23
   50194:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   50198:	add	x2, x2, #0x230
   5019c:	b	4ff14 <aarch64_get_opcode@@Base+0x2404>
   501a0:	mov	w1, #0x1                   	// #1
   501a4:	mov	x19, x0
   501a8:	str	w1, [sp, #112]
   501ac:	b	4fc90 <aarch64_get_opcode@@Base+0x2180>
   501b0:	mov	x0, x21
   501b4:	adrp	x1, 64000 <fields@@Base+0x52d8>
   501b8:	add	x1, x1, #0xaf8
   501bc:	blr	x23
   501c0:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   501c4:	umull	x5, w7, w5
   501c8:	cmp	x1, #0x0
   501cc:	mov	w0, #0x20                  	// #32
   501d0:	add	x19, x27, #0x1
   501d4:	mov	w4, #0x2d                  	// #45
   501d8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   501dc:	lsr	x5, x5, #54
   501e0:	csel	w4, w4, w0, ne  // ne = any
   501e4:	add	x1, x1, #0xac8
   501e8:	mov	x0, x21
   501ec:	msub	w6, w5, w6, w7
   501f0:	blr	x23
   501f4:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   501f8:	mov	x0, x21
   501fc:	adrp	x1, 5e000 <xexit@@Base+0x6e08>
   50200:	add	x1, x1, #0x590
   50204:	blr	x23
   50208:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   5020c:	mov	x0, x21
   50210:	adrp	x1, 5e000 <xexit@@Base+0x6e08>
   50214:	add	x1, x1, #0x4f0
   50218:	blr	x23
   5021c:	b	4f214 <aarch64_get_opcode@@Base+0x1704>
   50220:	cbz	w1, 4f238 <aarch64_get_opcode@@Base+0x1728>
   50224:	str	x5, [sp, #360]
   50228:	bl	35670 <abort@plt>
   5022c:	nop
   50230:	stp	x29, x30, [sp, #-64]!
   50234:	and	x5, x0, #0xf
   50238:	mov	x29, sp
   5023c:	stp	x21, x22, [sp, #32]
   50240:	adrp	x22, f9000 <aarch64_opcode_table@@Base+0x55a20>
   50244:	mov	x21, x1
   50248:	ldr	w4, [x22, #1616]
   5024c:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   50250:	stp	x19, x20, [sp, #16]
   50254:	adrp	x20, 8d000 <aarch64_operands@@Base+0x1bc0>
   50258:	add	x20, x20, #0xb70
   5025c:	add	x4, x4, x4, lsl #3
   50260:	add	x20, x20, #0xe70
   50264:	mov	x19, x0
   50268:	mov	x0, x2
   5026c:	add	x4, x5, x4, lsl #1
   50270:	stp	x23, x24, [sp, #48]
   50274:	add	x4, x4, #0x2
   50278:	mov	x23, x2
   5027c:	mov	w24, w3
   50280:	add	x1, x1, #0xa78
   50284:	ldr	x2, [x20, x4, lsl #3]
   50288:	blr	x21
   5028c:	tst	x19, #0xff0
   50290:	b.eq	502f0 <aarch64_get_opcode@@Base+0x27e0>  // b.none
   50294:	tbnz	w19, #4, 50304 <aarch64_get_opcode@@Base+0x27f4>
   50298:	tst	w19, #0xf80
   5029c:	ubfx	w2, w19, #7, #5
   502a0:	ubfx	w19, w19, #5, #2
   502a4:	b.ne	502b4 <aarch64_get_opcode@@Base+0x27a4>  // b.any
   502a8:	cmp	w19, #0x3
   502ac:	mov	w2, #0x20                  	// #32
   502b0:	b.eq	503cc <aarch64_get_opcode@@Base+0x28bc>  // b.none
   502b4:	cbz	w24, 50384 <aarch64_get_opcode@@Base+0x2874>
   502b8:	adrp	x4, 8e000 <aarch64_operands@@Base+0x2bc0>
   502bc:	add	x4, x4, #0xc70
   502c0:	add	x4, x4, #0x3d0
   502c4:	mov	w3, w2
   502c8:	mov	x0, x23
   502cc:	mov	x16, x21
   502d0:	ldp	x21, x22, [sp, #32]
   502d4:	adrp	x1, 64000 <fields@@Base+0x52d8>
   502d8:	ldr	x2, [x4, w19, sxtw #3]
   502dc:	add	x1, x1, #0xb90
   502e0:	ldp	x19, x20, [sp, #16]
   502e4:	ldp	x23, x24, [sp, #48]
   502e8:	ldp	x29, x30, [sp], #64
   502ec:	br	x16
   502f0:	ldp	x19, x20, [sp, #16]
   502f4:	ldp	x21, x22, [sp, #32]
   502f8:	ldp	x23, x24, [sp, #48]
   502fc:	ldp	x29, x30, [sp], #64
   50300:	ret
   50304:	tbz	w19, #7, 5032c <aarch64_get_opcode@@Base+0x281c>
   50308:	adrp	x1, 64000 <fields@@Base+0x52d8>
   5030c:	mov	x0, x23
   50310:	add	x1, x1, #0xba0
   50314:	mov	x16, x21
   50318:	ldp	x19, x20, [sp, #16]
   5031c:	ldp	x21, x22, [sp, #32]
   50320:	ldp	x23, x24, [sp, #48]
   50324:	ldp	x29, x30, [sp], #64
   50328:	br	x16
   5032c:	ldr	w0, [x22, #1616]
   50330:	ubfx	x2, x19, #8, #4
   50334:	add	x1, x0, x0, lsl #3
   50338:	add	x0, x2, x1, lsl #1
   5033c:	add	x0, x0, #0x2
   50340:	ldr	x2, [x20, x0, lsl #3]
   50344:	cbz	w24, 503a8 <aarch64_get_opcode@@Base+0x2898>
   50348:	adrp	x4, 8e000 <aarch64_operands@@Base+0x2bc0>
   5034c:	add	x4, x4, #0xc70
   50350:	ubfx	x19, x19, #5, #2
   50354:	add	x4, x4, #0x3d0
   50358:	mov	x3, x2
   5035c:	mov	x0, x23
   50360:	mov	x16, x21
   50364:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50368:	ldr	x2, [x4, x19, lsl #3]
   5036c:	add	x1, x1, #0xbc0
   50370:	ldp	x19, x20, [sp, #16]
   50374:	ldp	x21, x22, [sp, #32]
   50378:	ldp	x23, x24, [sp, #48]
   5037c:	ldp	x29, x30, [sp], #64
   50380:	br	x16
   50384:	mov	x0, x23
   50388:	mov	x16, x21
   5038c:	ldp	x19, x20, [sp, #16]
   50390:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50394:	ldp	x21, x22, [sp, #32]
   50398:	add	x1, x1, #0x958
   5039c:	ldp	x23, x24, [sp, #48]
   503a0:	ldp	x29, x30, [sp], #64
   503a4:	br	x16
   503a8:	mov	x0, x23
   503ac:	mov	x16, x21
   503b0:	ldp	x19, x20, [sp, #16]
   503b4:	adrp	x1, 58000 <xexit@@Base+0xe08>
   503b8:	ldp	x21, x22, [sp, #32]
   503bc:	add	x1, x1, #0x7f8
   503c0:	ldp	x23, x24, [sp, #48]
   503c4:	ldp	x29, x30, [sp], #64
   503c8:	br	x16
   503cc:	adrp	x1, 64000 <fields@@Base+0x52d8>
   503d0:	mov	x0, x23
   503d4:	add	x1, x1, #0xb88
   503d8:	b	50314 <aarch64_get_opcode@@Base+0x2804>
   503dc:	nop
   503e0:	stp	x29, x30, [sp, #-80]!
   503e4:	mov	x29, sp
   503e8:	stp	x19, x20, [sp, #16]
   503ec:	mov	x20, x1
   503f0:	mov	x1, #0x20f0000             	// #34537472
   503f4:	stp	x21, x22, [sp, #32]
   503f8:	and	x1, x2, x1
   503fc:	mov	x19, x2
   50400:	stp	x23, x24, [sp, #48]
   50404:	cmp	x1, #0xf0, lsl #12
   50408:	and	x23, x2, #0x1000000
   5040c:	stp	x25, x26, [sp, #64]
   50410:	and	x22, x2, #0x800000
   50414:	ldp	x24, x25, [x20]
   50418:	b.eq	5051c <aarch64_get_opcode@@Base+0x2a0c>  // b.none
   5041c:	adrp	x0, f9000 <aarch64_opcode_table@@Base+0x55a20>
   50420:	ubfx	x5, x2, #16, #4
   50424:	adrp	x4, 8d000 <aarch64_operands@@Base+0x1bc0>
   50428:	add	x4, x4, #0xb70
   5042c:	ldr	w2, [x0, #1616]
   50430:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50434:	mov	x0, x25
   50438:	add	x1, x1, #0x938
   5043c:	add	x3, x2, x2, lsl #3
   50440:	add	x2, x5, x3, lsl #1
   50444:	add	x2, x4, x2, lsl #3
   50448:	ldr	x2, [x2, #3712]
   5044c:	blr	x24
   50450:	and	x0, x19, #0x2000000
   50454:	cbz	x23, 504e4 <aarch64_get_opcode@@Base+0x29d4>
   50458:	cbz	x0, 50620 <aarch64_get_opcode@@Base+0x2b10>
   5045c:	cmp	x22, #0x0
   50460:	adrp	x0, 58000 <xexit@@Base+0xe08>
   50464:	adrp	x2, 64000 <fields@@Base+0x52d8>
   50468:	add	x0, x0, #0x330
   5046c:	add	x2, x2, #0x930
   50470:	adrp	x1, 58000 <xexit@@Base+0xe08>
   50474:	csel	x2, x2, x0, eq  // eq = none
   50478:	add	x1, x1, #0x7f8
   5047c:	mov	x0, x25
   50480:	blr	x24
   50484:	mov	x2, x25
   50488:	mov	x1, x24
   5048c:	mov	x0, x19
   50490:	mov	w3, #0x1                   	// #1
   50494:	mov	x20, #0x0                   	// #0
   50498:	bl	50230 <aarch64_get_opcode@@Base+0x2720>
   5049c:	tst	x19, #0x200000
   504a0:	adrp	x1, 64000 <fields@@Base+0x52d8>
   504a4:	adrp	x2, 58000 <xexit@@Base+0xe08>
   504a8:	add	x1, x1, #0x8d8
   504ac:	add	x2, x2, #0x330
   504b0:	mov	x0, x25
   504b4:	csel	x2, x2, x1, eq  // eq = none
   504b8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   504bc:	add	x1, x1, #0xbd8
   504c0:	blr	x24
   504c4:	cmp	x22, #0x0
   504c8:	cneg	x0, x20, eq  // eq = none
   504cc:	ldp	x19, x20, [sp, #16]
   504d0:	ldp	x21, x22, [sp, #32]
   504d4:	ldp	x23, x24, [sp, #48]
   504d8:	ldp	x25, x26, [sp, #64]
   504dc:	ldp	x29, x30, [sp], #80
   504e0:	ret
   504e4:	cmp	x22, #0x0
   504e8:	cbnz	x0, 50668 <aarch64_get_opcode@@Base+0x2b58>
   504ec:	and	x20, x19, #0xfff
   504f0:	adrp	x1, 58000 <xexit@@Base+0xe08>
   504f4:	adrp	x2, 64000 <fields@@Base+0x52d8>
   504f8:	add	x1, x1, #0x330
   504fc:	add	x2, x2, #0x930
   50500:	mov	x0, x25
   50504:	csel	x2, x2, x1, eq  // eq = none
   50508:	mov	w3, w20
   5050c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50510:	add	x1, x1, #0xb20
   50514:	blr	x24
   50518:	b	504c4 <aarch64_get_opcode@@Base+0x29b4>
   5051c:	mov	x21, x0
   50520:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50524:	and	x26, x2, #0xfff
   50528:	add	x1, x1, #0xbc8
   5052c:	mov	x0, x25
   50530:	blr	x24
   50534:	cbz	x23, 505b4 <aarch64_get_opcode@@Base+0x2aa4>
   50538:	mov	x0, #0xa00000              	// #10485760
   5053c:	and	x0, x19, x0
   50540:	cmp	x0, #0x800, lsl #12
   50544:	ccmp	x26, #0x0, #0x0, eq  // eq = none
   50548:	b.eq	50578 <aarch64_get_opcode@@Base+0x2a68>  // b.none
   5054c:	cmp	x22, #0x0
   50550:	adrp	x0, 58000 <xexit@@Base+0xe08>
   50554:	adrp	x2, 64000 <fields@@Base+0x52d8>
   50558:	add	x0, x0, #0x330
   5055c:	add	x2, x2, #0x930
   50560:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50564:	csel	x2, x2, x0, eq  // eq = none
   50568:	add	x1, x1, #0xbd0
   5056c:	mov	w3, w26
   50570:	mov	x0, x25
   50574:	blr	x24
   50578:	cmp	x22, #0x0
   5057c:	add	x0, x21, #0x8
   50580:	cneg	x26, x26, eq  // eq = none
   50584:	tst	x19, #0x200000
   50588:	adrp	x1, 58000 <xexit@@Base+0xe08>
   5058c:	adrp	x2, 64000 <fields@@Base+0x52d8>
   50590:	add	x1, x1, #0x330
   50594:	add	x2, x2, #0x8d8
   50598:	add	x21, x0, x26
   5059c:	csel	x2, x2, x1, ne  // ne = any
   505a0:	mov	x0, x25
   505a4:	adrp	x1, 64000 <fields@@Base+0x52d8>
   505a8:	add	x1, x1, #0xbd8
   505ac:	blr	x24
   505b0:	b	505e4 <aarch64_get_opcode@@Base+0x2ad4>
   505b4:	cmp	x22, #0x0
   505b8:	adrp	x0, 58000 <xexit@@Base+0xe08>
   505bc:	adrp	x2, 64000 <fields@@Base+0x52d8>
   505c0:	add	x0, x0, #0x330
   505c4:	add	x2, x2, #0x930
   505c8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   505cc:	csel	x2, x2, x0, eq  // eq = none
   505d0:	add	x21, x21, #0x8
   505d4:	mov	w3, w26
   505d8:	mov	x0, x25
   505dc:	add	x1, x1, #0xb20
   505e0:	blr	x24
   505e4:	mov	x0, x25
   505e8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   505ec:	add	x1, x1, #0x978
   505f0:	blr	x24
   505f4:	ldr	x2, [x20, #120]
   505f8:	mov	x0, x21
   505fc:	mov	x1, x20
   50600:	blr	x2
   50604:	mov	x0, #0x0                   	// #0
   50608:	ldp	x19, x20, [sp, #16]
   5060c:	ldp	x21, x22, [sp, #32]
   50610:	ldp	x23, x24, [sp, #48]
   50614:	ldp	x25, x26, [sp, #64]
   50618:	ldp	x29, x30, [sp], #80
   5061c:	ret
   50620:	mov	x0, #0xa00000              	// #10485760
   50624:	and	x0, x19, x0
   50628:	cmp	x0, #0x800, lsl #12
   5062c:	and	x20, x19, #0xfff
   50630:	ccmp	x20, #0x0, #0x0, eq  // eq = none
   50634:	b.eq	506a8 <aarch64_get_opcode@@Base+0x2b98>  // b.none
   50638:	cmp	x22, #0x0
   5063c:	adrp	x0, 58000 <xexit@@Base+0xe08>
   50640:	adrp	x2, 64000 <fields@@Base+0x52d8>
   50644:	add	x0, x0, #0x330
   50648:	add	x2, x2, #0x930
   5064c:	mov	w3, w20
   50650:	csel	x2, x2, x0, eq  // eq = none
   50654:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50658:	mov	x0, x25
   5065c:	add	x1, x1, #0xbd0
   50660:	blr	x24
   50664:	b	5049c <aarch64_get_opcode@@Base+0x298c>
   50668:	adrp	x0, 58000 <xexit@@Base+0xe08>
   5066c:	adrp	x2, 64000 <fields@@Base+0x52d8>
   50670:	add	x0, x0, #0x330
   50674:	add	x2, x2, #0x930
   50678:	csel	x2, x2, x0, eq  // eq = none
   5067c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50680:	mov	x0, x25
   50684:	add	x1, x1, #0xbe0
   50688:	blr	x24
   5068c:	mov	x20, #0x0                   	// #0
   50690:	mov	x2, x25
   50694:	mov	x1, x24
   50698:	mov	x0, x19
   5069c:	mov	w3, #0x1                   	// #1
   506a0:	bl	50230 <aarch64_get_opcode@@Base+0x2720>
   506a4:	b	504c4 <aarch64_get_opcode@@Base+0x29b4>
   506a8:	mov	x20, #0x0                   	// #0
   506ac:	b	5049c <aarch64_get_opcode@@Base+0x298c>
   506b0:	ldr	x3, [x0, #48]
   506b4:	ldr	x0, [x0, #72]
   506b8:	ldr	x1, [x0, w1, sxtw #3]
   506bc:	cbz	x3, 506d4 <aarch64_get_opcode@@Base+0x2bc4>
   506c0:	ldr	x4, [x1, #32]
   506c4:	mov	w0, #0x0                   	// #0
   506c8:	cmp	x3, x4
   506cc:	b.eq	506d4 <aarch64_get_opcode@@Base+0x2bc4>  // b.none
   506d0:	ret
   506d4:	ldr	x1, [x1, #8]
   506d8:	mov	w0, #0x0                   	// #0
   506dc:	ldrb	w3, [x1]
   506e0:	cmp	w3, #0x24
   506e4:	b.ne	506d0 <aarch64_get_opcode@@Base+0x2bc0>  // b.any
   506e8:	ldrb	w3, [x1, #1]
   506ec:	mov	w4, #0x74                  	// #116
   506f0:	cmp	w3, #0x61
   506f4:	ccmp	w3, w4, #0x4, ne  // ne = any
   506f8:	b.eq	5071c <aarch64_get_opcode@@Base+0x2c0c>  // b.none
   506fc:	cmp	w3, #0x64
   50700:	b.ne	506d0 <aarch64_get_opcode@@Base+0x2bc0>  // b.any
   50704:	ldrb	w1, [x1, #2]
   50708:	cmp	w1, #0x2e
   5070c:	ccmp	w1, #0x0, #0x4, ne  // ne = any
   50710:	b.ne	506d0 <aarch64_get_opcode@@Base+0x2bc0>  // b.any
   50714:	mov	w1, #0x2                   	// #2
   50718:	b	50744 <aarch64_get_opcode@@Base+0x2c34>
   5071c:	ldrb	w1, [x1, #2]
   50720:	cmp	w1, #0x2e
   50724:	ccmp	w1, #0x0, #0x4, ne  // ne = any
   50728:	b.ne	506d0 <aarch64_get_opcode@@Base+0x2bc0>  // b.any
   5072c:	cmp	w3, #0x61
   50730:	mov	w1, #0x0                   	// #0
   50734:	b.eq	50744 <aarch64_get_opcode@@Base+0x2c34>  // b.none
   50738:	cmp	w3, #0x74
   5073c:	cset	w1, ne  // ne = any
   50740:	add	w1, w1, #0x1
   50744:	mov	w0, #0x1                   	// #1
   50748:	str	w1, [x2]
   5074c:	ret
   50750:	ldr	w0, [x1, #172]
   50754:	cmp	w0, #0x2
   50758:	b.eq	50794 <aarch64_get_opcode@@Base+0x2c84>  // b.none
   5075c:	cmp	w0, #0x4
   50760:	b.ne	50778 <aarch64_get_opcode@@Base+0x2c68>  // b.any
   50764:	ldp	x3, x0, [x1]
   50768:	adrp	x4, 64000 <fields@@Base+0x52d8>
   5076c:	add	x1, x4, #0xc08
   50770:	mov	x16, x3
   50774:	br	x16
   50778:	cmp	w0, #0x1
   5077c:	b.ne	507a8 <aarch64_get_opcode@@Base+0x2c98>  // b.any
   50780:	ldp	x3, x0, [x1]
   50784:	adrp	x4, 64000 <fields@@Base+0x52d8>
   50788:	add	x1, x4, #0xbe8
   5078c:	mov	x16, x3
   50790:	br	x16
   50794:	ldp	x3, x0, [x1]
   50798:	adrp	x4, 64000 <fields@@Base+0x52d8>
   5079c:	add	x1, x4, #0xbf8
   507a0:	mov	x16, x3
   507a4:	br	x16
   507a8:	stp	x29, x30, [sp, #-16]!
   507ac:	mov	x29, sp
   507b0:	bl	35670 <abort@plt>
   507b4:	nop
   507b8:	stp	x29, x30, [sp, #-368]!
   507bc:	mov	x29, sp
   507c0:	stp	x19, x20, [sp, #16]
   507c4:	mov	x19, x0
   507c8:	mov	x20, x1
   507cc:	stp	x21, x22, [sp, #32]
   507d0:	mov	x21, x2
   507d4:	str	w3, [sp, #112]
   507d8:	cbz	w3, 50810 <aarch64_get_opcode@@Base+0x2d00>
   507dc:	mov	x0, #0xef000000            	// #4009754624
   507e0:	bics	xzr, x0, x2
   507e4:	b.eq	51408 <aarch64_get_opcode@@Base+0x38f8>  // b.none
   507e8:	and	x1, x2, #0xff000000
   507ec:	mov	x0, #0xf9000000            	// #4177526784
   507f0:	cmp	x1, x0
   507f4:	b.eq	515a4 <aarch64_get_opcode@@Base+0x3a94>  // b.none
   507f8:	mov	x0, #0xfd000000            	// #4244635648
   507fc:	and	x0, x2, x0
   50800:	mov	x1, #0xfc000000            	// #4227858432
   50804:	cmp	x0, x1
   50808:	b.ne	5145c <aarch64_get_opcode@@Base+0x394c>  // b.any
   5080c:	nop
   50810:	stp	x27, x28, [sp, #80]
   50814:	mov	x2, #0x840                 	// #2112
   50818:	mov	x1, #0x850                 	// #2128
   5081c:	adrp	x6, 64000 <fields@@Base+0x52d8>
   50820:	adrp	x0, 99000 <aarch64_operands@@Base+0xdbc0>
   50824:	add	x27, x6, #0xc18
   50828:	add	x0, x0, #0x570
   5082c:	movk	x2, #0xf2b0, lsl #16
   50830:	movk	x1, #0xffb0, lsl #16
   50834:	b	50848 <aarch64_get_opcode@@Base+0x2d38>
   50838:	ldr	x27, [x0, #88]
   5083c:	add	x0, x0, #0x30
   50840:	cbz	x27, 511f8 <aarch64_get_opcode@@Base+0x36e8>
   50844:	ldp	x2, x1, [x0, #24]
   50848:	and	x1, x21, x1
   5084c:	cmp	x1, x2
   50850:	b.ne	50838 <aarch64_get_opcode@@Base+0x2d28>  // b.any
   50854:	ldrb	w2, [x27]
   50858:	cbz	w2, 516a8 <aarch64_get_opcode@@Base+0x3b98>
   5085c:	asr	x3, x21, #16
   50860:	asr	x1, x21, #24
   50864:	and	w11, w21, #0xf
   50868:	ubfx	w0, w21, #8, #1
   5086c:	ubfiz	w3, w3, #4, #3
   50870:	ubfiz	w1, w1, #7, #1
   50874:	orr	w1, w1, w3
   50878:	add	w0, w0, #0x1
   5087c:	orr	w6, w1, w11
   50880:	ubfx	w3, w21, #9, #2
   50884:	mov	x1, x6
   50888:	lsl	w0, w0, #3
   5088c:	sxtw	x17, w6
   50890:	mov	x9, #0x1                   	// #1
   50894:	tst	x1, #0x40
   50898:	lsl	w3, w3, #3
   5089c:	asr	x4, x21, #8
   508a0:	sbfiz	x8, x6, #24, #32
   508a4:	lsl	x1, x9, x0
   508a8:	mov	w5, #0x40                  	// #64
   508ac:	lsl	x0, x17, x0
   508b0:	sub	x1, x1, #0x1
   508b4:	mov	w7, #0x3c                  	// #60
   508b8:	csel	w7, w7, w5, ne  // ne = any
   508bc:	ubfx	w18, w21, #8, #2
   508c0:	ubfiz	x10, x6, #19, #7
   508c4:	orr	x1, x1, x0
   508c8:	asr	x5, x21, #22
   508cc:	ands	w0, w4, #0x8
   508d0:	and	x8, x8, #0x80000000
   508d4:	orr	x8, x8, x10
   508d8:	sbfiz	x7, x7, #24, #32
   508dc:	str	w0, [sp, #184]
   508e0:	lsl	x0, x17, x3
   508e4:	ubfx	w3, w21, #5, #1
   508e8:	csel	x1, x0, x1, eq  // eq = none
   508ec:	cmp	w18, #0x0
   508f0:	ubfiz	w5, w5, #4, #1
   508f4:	ubfx	w14, w21, #12, #4
   508f8:	stp	x23, x24, [sp, #48]
   508fc:	orr	x24, x7, x8
   50900:	stp	x25, x26, [sp, #64]
   50904:	add	w25, w18, #0x1
   50908:	orr	w22, w5, w14
   5090c:	str	x1, [sp, #200]
   50910:	asr	x1, x21, #1
   50914:	str	w3, [sp, #224]
   50918:	csel	w3, w3, wzr, eq  // eq = none
   5091c:	cmp	w3, #0x0
   50920:	ubfx	w8, w8, #16, #8
   50924:	and	w1, w1, #0x10
   50928:	lsl	w13, w25, #3
   5092c:	orr	w1, w1, w11
   50930:	ubfx	w12, w21, #6, #2
   50934:	sub	w14, w22, #0x1
   50938:	str	w11, [sp, #104]
   5093c:	mov	w11, #0x2                   	// #2
   50940:	csel	w11, w25, w11, eq  // eq = none
   50944:	str	w8, [sp, #340]
   50948:	ubfx	x8, x24, #24, #32
   5094c:	ubfx	w15, w21, #20, #2
   50950:	str	x8, [sp, #344]
   50954:	add	w8, w14, w11
   50958:	lsl	w30, w13, w12
   5095c:	str	w8, [sp, #228]
   50960:	and	x8, x0, #0x80000000
   50964:	orr	x0, x0, #0xffffffff00000000
   50968:	asr	w13, w1, w15
   5096c:	mov	w5, #0x4                   	// #4
   50970:	stp	x8, x0, [sp, #240]
   50974:	asr	w0, w30, #1
   50978:	str	w6, [sp, #336]
   5097c:	mov	w6, w3
   50980:	ubfx	w26, w21, #4, #4
   50984:	lsl	w5, w5, w15
   50988:	ubfx	w3, w21, #9, #1
   5098c:	sub	w5, w5, #0x1
   50990:	str	w6, [sp, #172]
   50994:	ubfx	w6, w21, #10, #2
   50998:	str	w0, [sp, #308]
   5099c:	asr	w0, w13, #2
   509a0:	asr	x10, x21, #3
   509a4:	cmp	w6, #0x0
   509a8:	str	w0, [sp, #180]
   509ac:	and	w0, w5, w1
   509b0:	and	w10, w10, #0x10
   509b4:	ubfx	w28, w21, #16, #4
   509b8:	lsl	w3, w3, #3
   509bc:	ccmp	w25, #0x1, #0x4, gt
   509c0:	asr	w16, w26, w6
   509c4:	and	w16, w16, #0x1
   509c8:	str	w0, [sp, #176]
   509cc:	add	w0, w22, w25, lsl #1
   509d0:	ubfx	w23, w21, #4, #2
   509d4:	lsl	w15, w9, w6
   509d8:	sub	w15, w15, #0x1
   509dc:	str	w3, [sp, #108]
   509e0:	adrp	x3, 8d000 <aarch64_operands@@Base+0x1bc0>
   509e4:	add	x3, x3, #0xb70
   509e8:	stp	w28, w22, [sp, #116]
   509ec:	orr	w28, w10, w28
   509f0:	str	w18, [sp, #132]
   509f4:	asr	x7, x21, #6
   509f8:	str	w23, [sp, #168]
   509fc:	orr	w4, w4, w7
   50a00:	str	w6, [sp, #188]
   50a04:	asr	x10, x21, #4
   50a08:	str	w28, [sp, #196]
   50a0c:	add	w12, w6, #0x1
   50a10:	str	w30, [sp, #232]
   50a14:	mov	w5, #0x10                  	// #16
   50a18:	str	x3, [sp, #256]
   50a1c:	mov	w1, #0x20                  	// #32
   50a20:	str	w16, [sp, #268]
   50a24:	adrp	x22, 64000 <fields@@Base+0x52d8>
   50a28:	str	x17, [sp, #288]
   50a2c:	add	x22, x22, #0x870
   50a30:	str	w15, [sp, #296]
   50a34:	str	w0, [sp, #312]
   50a38:	csinc	w0, w9, w16, le
   50a3c:	str	x24, [sp, #328]
   50a40:	str	w0, [sp, #208]
   50a44:	and	w0, w26, w15
   50a48:	str	w0, [sp, #300]
   50a4c:	add	w0, w28, w18
   50a50:	str	w0, [sp, #212]
   50a54:	and	w0, w4, #0x3
   50a58:	str	w0, [sp, #264]
   50a5c:	and	w0, w7, #0x2
   50a60:	str	w0, [sp, #304]
   50a64:	add	x0, x3, #0xe70
   50a68:	str	x0, [sp, #96]
   50a6c:	lsl	w0, w23, #6
   50a70:	str	w0, [sp, #324]
   50a74:	and	w0, w10, #0x2
   50a78:	str	w0, [sp, #320]
   50a7c:	ubfx	w0, w21, #8, #4
   50a80:	str	w0, [sp, #124]
   50a84:	ubfx	w0, w21, #4, #1
   50a88:	str	w0, [sp, #128]
   50a8c:	mov	w4, #0x8                   	// #8
   50a90:	ldrb	w0, [sp, #108]
   50a94:	mov	x28, x27
   50a98:	str	wzr, [sp, #108]
   50a9c:	str	xzr, [sp, #216]
   50aa0:	lsl	x0, x17, x0
   50aa4:	str	x0, [sp, #280]
   50aa8:	asr	w0, w26, w12
   50aac:	str	w0, [sp, #192]
   50ab0:	lsl	w0, w5, w6
   50ab4:	str	w0, [sp, #272]
   50ab8:	lsl	w0, w4, w6
   50abc:	str	w0, [sp, #316]
   50ac0:	lsl	w0, w1, w6
   50ac4:	str	w0, [sp, #276]
   50ac8:	lsl	w0, w1, w23
   50acc:	str	w0, [sp, #236]
   50ad0:	b	50af4 <aarch64_get_opcode@@Base+0x2fe4>
   50ad4:	mov	x1, x22
   50ad8:	mov	x0, x20
   50adc:	blr	x19
   50ae0:	mov	x0, x27
   50ae4:	mov	x27, x28
   50ae8:	mov	x28, x0
   50aec:	ldrb	w2, [x27, #1]
   50af0:	cbz	w2, 50b68 <aarch64_get_opcode@@Base+0x3058>
   50af4:	cmp	w2, #0x25
   50af8:	add	x27, x28, #0x1
   50afc:	b.ne	50ad4 <aarch64_get_opcode@@Base+0x2fc4>  // b.any
   50b00:	ldrb	w1, [x28, #1]
   50b04:	cmp	w1, #0x43
   50b08:	b.eq	510dc <aarch64_get_opcode@@Base+0x35cc>  // b.none
   50b0c:	b.ls	50c30 <aarch64_get_opcode@@Base+0x3120>  // b.plast
   50b10:	cmp	w1, #0x46
   50b14:	b.eq	50fa8 <aarch64_get_opcode@@Base+0x3498>  // b.none
   50b18:	b.ls	50c0c <aarch64_get_opcode@@Base+0x30fc>  // b.plast
   50b1c:	cmp	w1, #0x63
   50b20:	b.ne	50bc0 <aarch64_get_opcode@@Base+0x30b0>  // b.any
   50b24:	ldr	w0, [sp, #112]
   50b28:	add	x28, x28, #0x2
   50b2c:	cbz	w0, 50aec <aarch64_get_opcode@@Base+0x2fdc>
   50b30:	adrp	x0, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   50b34:	ldr	w0, [x0, #1032]
   50b38:	cbz	w0, 50aec <aarch64_get_opcode@@Base+0x2fdc>
   50b3c:	ubfx	x2, x0, #4, #4
   50b40:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   50b44:	ldr	x0, [sp, #256]
   50b48:	add	x1, x1, #0xa78
   50b4c:	add	x3, x0, #0xde8
   50b50:	mov	x0, x20
   50b54:	ldr	x2, [x3, x2, lsl #3]
   50b58:	blr	x19
   50b5c:	ldrb	w2, [x27, #1]
   50b60:	cbnz	w2, 50af4 <aarch64_get_opcode@@Base+0x2fe4>
   50b64:	nop
   50b68:	ldr	x2, [sp, #216]
   50b6c:	add	x0, x2, #0x10
   50b70:	cmp	x0, #0x30
   50b74:	b.ls	50b88 <aarch64_get_opcode@@Base+0x3078>  // b.plast
   50b78:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50b7c:	mov	x0, x20
   50b80:	add	x1, x1, #0x8f8
   50b84:	blr	x19
   50b88:	ldr	w0, [sp, #108]
   50b8c:	cbz	w0, 513a8 <aarch64_get_opcode@@Base+0x3898>
   50b90:	mov	x0, x20
   50b94:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50b98:	add	x1, x1, #0xb68
   50b9c:	blr	x19
   50ba0:	ldp	x23, x24, [sp, #48]
   50ba4:	ldp	x25, x26, [sp, #64]
   50ba8:	ldp	x27, x28, [sp, #80]
   50bac:	ldr	w0, [sp, #108]
   50bb0:	ldp	x19, x20, [sp, #16]
   50bb4:	ldp	x21, x22, [sp, #32]
   50bb8:	ldp	x29, x30, [sp], #368
   50bbc:	ret
   50bc0:	cmp	w1, #0x75
   50bc4:	b.ne	51710 <aarch64_get_opcode@@Base+0x3c00>  // b.any
   50bc8:	ldr	w0, [sp, #112]
   50bcc:	add	x28, x28, #0x2
   50bd0:	cbz	w0, 50aec <aarch64_get_opcode@@Base+0x2fdc>
   50bd4:	adrp	x0, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   50bd8:	ldr	w0, [x0, #1032]
   50bdc:	cbz	w0, 50aec <aarch64_get_opcode@@Base+0x2fdc>
   50be0:	ubfx	x2, x0, #4, #4
   50be4:	ldr	w1, [sp, #112]
   50be8:	ldr	x0, [sp, #256]
   50bec:	str	w1, [sp, #108]
   50bf0:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   50bf4:	add	x1, x1, #0xa78
   50bf8:	add	x3, x0, #0xde8
   50bfc:	mov	x0, x20
   50c00:	ldr	x2, [x3, x2, lsl #3]
   50c04:	blr	x19
   50c08:	b	50b5c <aarch64_get_opcode@@Base+0x304c>
   50c0c:	cmp	w1, #0x44
   50c10:	b.ne	50d8c <aarch64_get_opcode@@Base+0x327c>  // b.any
   50c14:	ldp	w2, w3, [sp, #176]
   50c18:	add	x28, x28, #0x2
   50c1c:	mov	x0, x20
   50c20:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50c24:	add	x1, x1, #0xcc0
   50c28:	blr	x19
   50c2c:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   50c30:	cmp	w1, #0x41
   50c34:	b.eq	50fcc <aarch64_get_opcode@@Base+0x34bc>  // b.none
   50c38:	cmp	w1, #0x42
   50c3c:	b.ne	50dc8 <aarch64_get_opcode@@Base+0x32b8>  // b.any
   50c40:	cmp	w25, #0x3
   50c44:	b.eq	514e4 <aarch64_get_opcode@@Base+0x39d4>  // b.none
   50c48:	cmp	w25, #0x4
   50c4c:	b.eq	51488 <aarch64_get_opcode@@Base+0x3978>  // b.none
   50c50:	cmp	w25, #0x2
   50c54:	b.eq	514c0 <aarch64_get_opcode@@Base+0x39b0>  // b.none
   50c58:	ldr	w0, [sp, #268]
   50c5c:	cbnz	w0, 51504 <aarch64_get_opcode@@Base+0x39f4>
   50c60:	ldr	w0, [sp, #188]
   50c64:	cbz	w0, 50c7c <aarch64_get_opcode@@Base+0x316c>
   50c68:	ldr	w1, [sp, #296]
   50c6c:	ldr	w0, [sp, #300]
   50c70:	cmp	w1, w0
   50c74:	b.eq	51604 <aarch64_get_opcode@@Base+0x3af4>  // b.none
   50c78:	cbnz	w0, 51504 <aarch64_get_opcode@@Base+0x39f4>
   50c7c:	str	wzr, [sp, #136]
   50c80:	ldr	w24, [sp, #120]
   50c84:	mov	x0, x20
   50c88:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50c8c:	adrp	x23, 58000 <xexit@@Base+0xe08>
   50c90:	add	x1, x1, #0x8d0
   50c94:	add	x23, x23, #0x110
   50c98:	blr	x19
   50c9c:	stp	x27, x21, [sp, #144]
   50ca0:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50ca4:	mov	w21, w24
   50ca8:	add	x1, x1, #0xc78
   50cac:	ldr	w24, [sp, #208]
   50cb0:	adrp	x2, 58000 <xexit@@Base+0xe08>
   50cb4:	str	x22, [sp, #160]
   50cb8:	mov	x22, x20
   50cbc:	mov	x20, x23
   50cc0:	ldr	w23, [sp, #192]
   50cc4:	add	x2, x2, #0x330
   50cc8:	mov	x27, x1
   50ccc:	mov	w26, #0x0                   	// #0
   50cd0:	mov	w3, w21
   50cd4:	add	w26, w26, #0x1
   50cd8:	mov	w4, w23
   50cdc:	mov	x1, x27
   50ce0:	mov	x0, x22
   50ce4:	blr	x19
   50ce8:	add	w21, w21, w24
   50cec:	cmp	w25, w26
   50cf0:	mov	x2, x20
   50cf4:	b.gt	50cd0 <aarch64_get_opcode@@Base+0x31c0>
   50cf8:	adrp	x23, f9000 <aarch64_opcode_table@@Base+0x55a20>
   50cfc:	ldr	w3, [sp, #116]
   50d00:	mov	x0, x22
   50d04:	mov	x20, x22
   50d08:	ldr	w2, [x23, #1616]
   50d0c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50d10:	add	x1, x1, #0xc68
   50d14:	ldp	x27, x21, [sp, #144]
   50d18:	add	x2, x2, x2, lsl #3
   50d1c:	ldr	x22, [sp, #160]
   50d20:	lsl	x2, x2, #1
   50d24:	add	x2, x2, w3, sxtw
   50d28:	ldr	x3, [sp, #96]
   50d2c:	add	x2, x2, #0x2
   50d30:	ldr	x2, [x3, x2, lsl #3]
   50d34:	blr	x19
   50d38:	ldr	w0, [sp, #136]
   50d3c:	cbz	w0, 51080 <aarch64_get_opcode@@Base+0x3570>
   50d40:	mov	w2, w0
   50d44:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50d48:	mov	x0, x20
   50d4c:	add	x1, x1, #0xc70
   50d50:	blr	x19
   50d54:	add	x28, x28, #0x2
   50d58:	mov	x0, x20
   50d5c:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   50d60:	add	x1, x1, #0x4f0
   50d64:	blr	x19
   50d68:	ldr	w0, [sp, #104]
   50d6c:	cmp	w0, #0xd
   50d70:	b.ne	510a0 <aarch64_get_opcode@@Base+0x3590>  // b.any
   50d74:	nop
   50d78:	mov	x0, x20
   50d7c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50d80:	add	x1, x1, #0x8d8
   50d84:	blr	x19
   50d88:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   50d8c:	cmp	w1, #0x45
   50d90:	b.ne	51710 <aarch64_get_opcode@@Base+0x3c00>  // b.any
   50d94:	ldr	w0, [sp, #184]
   50d98:	add	x28, x28, #0x2
   50d9c:	cbnz	w0, 512a4 <aarch64_get_opcode@@Base+0x3794>
   50da0:	ldp	x0, x1, [sp, #240]
   50da4:	cmp	x0, #0x0
   50da8:	ldr	x0, [sp, #200]
   50dac:	csel	x2, x0, x1, eq  // eq = none
   50db0:	ldr	x3, [sp, #200]
   50db4:	mov	x0, x20
   50db8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50dbc:	add	x1, x1, #0xd28
   50dc0:	blr	x19
   50dc4:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   50dc8:	cmp	w1, #0x25
   50dcc:	b.ne	50de8 <aarch64_get_opcode@@Base+0x32d8>  // b.any
   50dd0:	add	x28, x28, #0x2
   50dd4:	mov	x0, x20
   50dd8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50ddc:	add	x1, x1, #0x878
   50de0:	blr	x19
   50de4:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   50de8:	sub	w1, w1, #0x30
   50dec:	and	w1, w1, #0xff
   50df0:	cmp	w1, #0x9
   50df4:	b.hi	51710 <aarch64_get_opcode@@Base+0x3c00>  // b.pmore
   50df8:	mov	x0, x27
   50dfc:	add	x3, sp, #0x160
   50e00:	add	x2, sp, #0x168
   50e04:	mov	x1, x21
   50e08:	bl	4e550 <aarch64_get_opcode@@Base+0xa40>
   50e0c:	mov	x27, x0
   50e10:	ldrb	w0, [x0]
   50e14:	cmp	w0, #0x52
   50e18:	b.eq	51530 <aarch64_get_opcode@@Base+0x3a20>  // b.none
   50e1c:	b.ls	50f0c <aarch64_get_opcode@@Base+0x33fc>  // b.plast
   50e20:	cmp	w0, #0x64
   50e24:	b.eq	515bc <aarch64_get_opcode@@Base+0x3aac>  // b.none
   50e28:	b.ls	50ea0 <aarch64_get_opcode@@Base+0x3390>  // b.plast
   50e2c:	cmp	w0, #0x65
   50e30:	b.ne	50e60 <aarch64_get_opcode@@Base+0x3350>  // b.any
   50e34:	ldr	w3, [sp, #352]
   50e38:	mov	x0, #0x1                   	// #1
   50e3c:	ldr	x2, [sp, #360]
   50e40:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50e44:	lsl	x0, x0, x3
   50e48:	add	x1, x1, #0x8e8
   50e4c:	sub	x2, x0, x2
   50e50:	add	x28, x27, #0x1
   50e54:	mov	x0, x20
   50e58:	blr	x19
   50e5c:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   50e60:	cmp	w0, #0x72
   50e64:	b.ne	51710 <aarch64_get_opcode@@Base+0x3c00>  // b.any
   50e68:	adrp	x0, f9000 <aarch64_opcode_table@@Base+0x55a20>
   50e6c:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   50e70:	ldr	x3, [sp, #360]
   50e74:	add	x1, x1, #0xa78
   50e78:	ldr	w2, [x0, #1616]
   50e7c:	add	x28, x27, #0x1
   50e80:	mov	x0, x20
   50e84:	add	x2, x2, x2, lsl #3
   50e88:	add	x2, x3, x2, lsl #1
   50e8c:	ldr	x3, [sp, #96]
   50e90:	add	x2, x2, #0x2
   50e94:	ldr	x2, [x3, x2, lsl #3]
   50e98:	blr	x19
   50e9c:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   50ea0:	cmp	w0, #0x55
   50ea4:	b.hi	50f44 <aarch64_get_opcode@@Base+0x3434>  // b.pmore
   50ea8:	ldrb	w1, [x27, #1]
   50eac:	sub	w0, w0, #0x53
   50eb0:	mov	w2, #0x8                   	// #8
   50eb4:	add	x5, x27, #0x1
   50eb8:	sub	w3, w1, #0x30
   50ebc:	lsl	w0, w2, w0
   50ec0:	and	w2, w3, #0xff
   50ec4:	cmp	w2, #0x9
   50ec8:	b.hi	5161c <aarch64_get_opcode@@Base+0x3b0c>  // b.pmore
   50ecc:	mov	w1, w3
   50ed0:	ldr	x4, [sp, #360]
   50ed4:	asr	w3, w1, #2
   50ed8:	mov	x27, x5
   50edc:	cmp	x4, w3, sxtw
   50ee0:	lsl	w2, w0, w4
   50ee4:	b.cc	51670 <aarch64_get_opcode@@Base+0x3b60>  // b.lo, b.ul, b.last
   50ee8:	and	x1, x1, #0x3
   50eec:	cmp	x4, x1
   50ef0:	b.hi	51670 <aarch64_get_opcode@@Base+0x3b60>  // b.pmore
   50ef4:	mov	x0, x20
   50ef8:	adrp	x1, 6a000 <fields@@Base+0xb2d8>
   50efc:	add	x28, x27, #0x1
   50f00:	add	x1, x1, #0xcc0
   50f04:	blr	x19
   50f08:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   50f0c:	cmp	w0, #0x44
   50f10:	b.eq	51534 <aarch64_get_opcode@@Base+0x3a24>  // b.none
   50f14:	b.ls	50f74 <aarch64_get_opcode@@Base+0x3464>  // b.plast
   50f18:	cmp	w0, #0x51
   50f1c:	b.ne	51710 <aarch64_get_opcode@@Base+0x3c00>  // b.any
   50f20:	ldr	x0, [sp, #360]
   50f24:	lsr	x2, x0, #1
   50f28:	tbz	w0, #0, 515ec <aarch64_get_opcode@@Base+0x3adc>
   50f2c:	mov	x0, x20
   50f30:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50f34:	add	x28, x27, #0x1
   50f38:	add	x1, x1, #0xa78
   50f3c:	blr	x19
   50f40:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   50f44:	cmp	w0, #0x60
   50f48:	b.ne	51710 <aarch64_get_opcode@@Base+0x3c00>  // b.any
   50f4c:	ldr	x0, [sp, #360]
   50f50:	add	x3, x27, #0x1
   50f54:	cbnz	x0, 51610 <aarch64_get_opcode@@Base+0x3b00>
   50f58:	ldrb	w2, [x27, #1]
   50f5c:	mov	x27, x3
   50f60:	mov	x1, x22
   50f64:	mov	x0, x20
   50f68:	add	x28, x27, #0x1
   50f6c:	blr	x19
   50f70:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   50f74:	cmp	w0, #0x27
   50f78:	b.ne	511b8 <aarch64_get_opcode@@Base+0x36a8>  // b.any
   50f7c:	ldr	w2, [sp, #352]
   50f80:	mov	x0, #0x1                   	// #1
   50f84:	ldr	x1, [sp, #360]
   50f88:	lsl	x0, x0, x2
   50f8c:	sub	x0, x0, #0x1
   50f90:	cmp	x0, x1
   50f94:	add	x0, x27, #0x1
   50f98:	b.eq	51654 <aarch64_get_opcode@@Base+0x3b44>  // b.none
   50f9c:	mov	x27, x0
   50fa0:	add	x28, x27, #0x1
   50fa4:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   50fa8:	ldr	w0, [sp, #132]
   50fac:	add	x28, x28, #0x2
   50fb0:	cbnz	w0, 51310 <aarch64_get_opcode@@Base+0x3800>
   50fb4:	ldr	w2, [sp, #196]
   50fb8:	mov	x0, x20
   50fbc:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50fc0:	add	x1, x1, #0x980
   50fc4:	blr	x19
   50fc8:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   50fcc:	ldr	w3, [sp, #124]
   50fd0:	adrp	x2, 64000 <fields@@Base+0x52d8>
   50fd4:	add	x2, x2, #0x5b0
   50fd8:	mov	x0, x20
   50fdc:	adrp	x1, 64000 <fields@@Base+0x52d8>
   50fe0:	add	x1, x1, #0x8d0
   50fe4:	ldrb	w24, [x2, w3, sxtw]
   50fe8:	and	w23, w24, #0xf
   50fec:	lsr	w24, w24, #4
   50ff0:	add	w3, w24, #0x1
   50ff4:	mov	w24, w3
   50ff8:	blr	x19
   50ffc:	mov	w3, w24
   51000:	mov	w0, w23
   51004:	cmp	w24, #0x1
   51008:	b.ne	51334 <aarch64_get_opcode@@Base+0x3824>  // b.any
   5100c:	cmp	w23, #0x1
   51010:	b.eq	51518 <aarch64_get_opcode@@Base+0x3a08>  // b.none
   51014:	ldr	w2, [sp, #120]
   51018:	adrp	x1, 64000 <fields@@Base+0x52d8>
   5101c:	mov	x0, x20
   51020:	add	x1, x1, #0xc60
   51024:	add	w3, w23, w2
   51028:	sub	w3, w3, #0x1
   5102c:	blr	x19
   51030:	adrp	x23, f9000 <aarch64_opcode_table@@Base+0x55a20>
   51034:	ldr	w3, [sp, #116]
   51038:	mov	x0, x20
   5103c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51040:	ldr	w2, [x23, #1616]
   51044:	add	x1, x1, #0xc68
   51048:	add	x2, x2, x2, lsl #3
   5104c:	lsl	x2, x2, #1
   51050:	add	x2, x2, w3, sxtw
   51054:	ldr	x3, [sp, #96]
   51058:	add	x2, x2, #0x2
   5105c:	ldr	x2, [x3, x2, lsl #3]
   51060:	blr	x19
   51064:	ldr	w0, [sp, #168]
   51068:	cbz	w0, 51080 <aarch64_get_opcode@@Base+0x3570>
   5106c:	ldr	w2, [sp, #236]
   51070:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51074:	mov	x0, x20
   51078:	add	x1, x1, #0xc70
   5107c:	blr	x19
   51080:	mov	x0, x20
   51084:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   51088:	add	x1, x1, #0x4f0
   5108c:	blr	x19
   51090:	ldr	w0, [sp, #104]
   51094:	add	x28, x28, #0x2
   51098:	cmp	w0, #0xd
   5109c:	b.eq	50d78 <aarch64_get_opcode@@Base+0x3268>  // b.none
   510a0:	ldr	w3, [sp, #104]
   510a4:	cmp	w3, #0xf
   510a8:	b.eq	50aec <aarch64_get_opcode@@Base+0x2fdc>  // b.none
   510ac:	ldr	w2, [x23, #1616]
   510b0:	mov	x0, x20
   510b4:	adrp	x1, 58000 <xexit@@Base+0xe08>
   510b8:	add	x1, x1, #0x7f8
   510bc:	add	x2, x2, x2, lsl #3
   510c0:	lsl	x2, x2, #1
   510c4:	add	x2, x2, w3, sxtw
   510c8:	ldr	x3, [sp, #96]
   510cc:	add	x2, x2, #0x2
   510d0:	ldr	x2, [x3, x2, lsl #3]
   510d4:	blr	x19
   510d8:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   510dc:	ldr	w0, [sp, #172]
   510e0:	adrp	x1, 64000 <fields@@Base+0x52d8>
   510e4:	cbnz	w0, 51214 <aarch64_get_opcode@@Base+0x3704>
   510e8:	mov	x0, x20
   510ec:	add	x1, x1, #0x8d0
   510f0:	blr	x19
   510f4:	ldr	w0, [sp, #224]
   510f8:	cbnz	w0, 51550 <aarch64_get_opcode@@Base+0x3a40>
   510fc:	cmp	w25, #0x1
   51100:	b.ne	51220 <aarch64_get_opcode@@Base+0x3710>  // b.any
   51104:	ldr	w2, [sp, #120]
   51108:	adrp	x23, f9000 <aarch64_opcode_table@@Base+0x55a20>
   5110c:	mov	x0, x20
   51110:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51114:	add	x1, x1, #0xc90
   51118:	blr	x19
   5111c:	ldr	w2, [x23, #1616]
   51120:	mov	x0, x20
   51124:	ldr	w3, [sp, #116]
   51128:	adrp	x1, 64000 <fields@@Base+0x52d8>
   5112c:	add	x1, x1, #0xc68
   51130:	add	x2, x2, x2, lsl #3
   51134:	lsl	x2, x2, #1
   51138:	add	x2, x2, w3, sxtw
   5113c:	ldr	x3, [sp, #96]
   51140:	add	x2, x2, #0x2
   51144:	ldr	x2, [x3, x2, lsl #3]
   51148:	blr	x19
   5114c:	ldr	w0, [sp, #128]
   51150:	cbnz	w0, 51480 <aarch64_get_opcode@@Base+0x3970>
   51154:	nop
   51158:	mov	x0, x20
   5115c:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   51160:	add	x1, x1, #0x4f0
   51164:	blr	x19
   51168:	ldr	w0, [sp, #104]
   5116c:	add	x28, x28, #0x2
   51170:	cmp	w0, #0xd
   51174:	b.eq	50d78 <aarch64_get_opcode@@Base+0x3268>  // b.none
   51178:	ldr	w5, [sp, #104]
   5117c:	cmp	w5, #0xf
   51180:	b.eq	50aec <aarch64_get_opcode@@Base+0x2fdc>  // b.none
   51184:	ldr	w2, [x23, #1616]
   51188:	adrp	x0, 8d000 <aarch64_operands@@Base+0x1bc0>
   5118c:	add	x4, x0, #0xb70
   51190:	adrp	x1, 58000 <xexit@@Base+0xe08>
   51194:	mov	x0, x20
   51198:	add	x1, x1, #0x7f8
   5119c:	add	x3, x2, x2, lsl #3
   511a0:	lsl	x3, x3, #1
   511a4:	add	x3, x3, w5, sxtw
   511a8:	add	x2, x4, x3, lsl #3
   511ac:	ldr	x2, [x2, #3712]
   511b0:	blr	x19
   511b4:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   511b8:	cmp	w0, #0x3f
   511bc:	b.ne	51710 <aarch64_get_opcode@@Base+0x3c00>  // b.any
   511c0:	ldr	w2, [sp, #352]
   511c4:	mov	w23, #0x1                   	// #1
   511c8:	ldr	x3, [sp, #360]
   511cc:	mov	x1, x22
   511d0:	lsl	w2, w23, w2
   511d4:	mov	x0, x20
   511d8:	sub	w2, w2, w3
   511dc:	ldrb	w2, [x27, w2, sxtw]
   511e0:	blr	x19
   511e4:	ldr	w0, [sp, #352]
   511e8:	lsl	w23, w23, w0
   511ec:	add	x27, x27, w23, sxtw
   511f0:	add	x28, x27, #0x1
   511f4:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   511f8:	ldp	x27, x28, [sp, #80]
   511fc:	str	wzr, [sp, #108]
   51200:	ldr	w0, [sp, #108]
   51204:	ldp	x19, x20, [sp, #16]
   51208:	ldp	x21, x22, [sp, #32]
   5120c:	ldp	x29, x30, [sp], #368
   51210:	ret
   51214:	mov	x0, x20
   51218:	add	x1, x1, #0x8d0
   5121c:	blr	x19
   51220:	ldr	w2, [sp, #120]
   51224:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51228:	ldr	w3, [sp, #228]
   5122c:	add	x1, x1, #0xc98
   51230:	mov	x0, x20
   51234:	blr	x19
   51238:	adrp	x23, f9000 <aarch64_opcode_table@@Base+0x55a20>
   5123c:	ldr	w3, [sp, #116]
   51240:	mov	x0, x20
   51244:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51248:	ldr	w2, [x23, #1616]
   5124c:	add	x1, x1, #0xc68
   51250:	add	x2, x2, x2, lsl #3
   51254:	lsl	x2, x2, #1
   51258:	add	x2, x2, w3, sxtw
   5125c:	ldr	x3, [sp, #96]
   51260:	add	x2, x2, #0x2
   51264:	ldr	x2, [x3, x2, lsl #3]
   51268:	blr	x19
   5126c:	ldr	w0, [sp, #128]
   51270:	cbz	w0, 51158 <aarch64_get_opcode@@Base+0x3648>
   51274:	ldr	w0, [sp, #132]
   51278:	cmp	w0, #0x3
   5127c:	b.eq	5142c <aarch64_get_opcode@@Base+0x391c>  // b.none
   51280:	ldr	w0, [sp, #132]
   51284:	ldr	w2, [sp, #232]
   51288:	cmp	w0, #0x2
   5128c:	b.ne	51440 <aarch64_get_opcode@@Base+0x3930>  // b.any
   51290:	mov	x0, x20
   51294:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51298:	add	x1, x1, #0xca8
   5129c:	blr	x19
   512a0:	b	51158 <aarch64_get_opcode@@Base+0x3648>
   512a4:	ldr	w0, [sp, #124]
   512a8:	cmp	w0, #0xb
   512ac:	b.le	513ec <aarch64_get_opcode@@Base+0x38dc>
   512b0:	ldr	w0, [sp, #124]
   512b4:	cmp	w0, #0xd
   512b8:	b.le	515b4 <aarch64_get_opcode@@Base+0x3aa4>
   512bc:	cmp	w0, #0xe
   512c0:	ldr	w0, [sp, #224]
   512c4:	b.eq	51688 <aarch64_get_opcode@@Base+0x3b78>  // b.none
   512c8:	cbnz	w0, 51634 <aarch64_get_opcode@@Base+0x3b24>
   512cc:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   512d0:	ldrb	w3, [sp, #340]
   512d4:	strb	w3, [sp, #354]
   512d8:	add	x2, sp, #0x168
   512dc:	ldrb	w3, [sp, #344]
   512e0:	add	x1, sp, #0x160
   512e4:	ldr	x0, [x0, #3864]
   512e8:	strh	wzr, [sp, #352]
   512ec:	strb	w3, [sp, #355]
   512f0:	bl	358d0 <floatformat_to_double@plt>
   512f4:	ldr	x2, [sp, #328]
   512f8:	mov	x0, x20
   512fc:	ldr	d0, [sp, #360]
   51300:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51304:	add	x1, x1, #0xce8
   51308:	blr	x19
   5130c:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   51310:	ldr	w3, [sp, #212]
   51314:	cmp	w3, #0x1f
   51318:	b.ls	513d0 <aarch64_get_opcode@@Base+0x38c0>  // b.plast
   5131c:	ldr	w2, [sp, #196]
   51320:	mov	x0, x20
   51324:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51328:	add	x1, x1, #0xd38
   5132c:	blr	x19
   51330:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   51334:	cbz	w23, 51030 <aarch64_get_opcode@@Base+0x3520>
   51338:	ldr	w24, [sp, #120]
   5133c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51340:	adrp	x23, 58000 <xexit@@Base+0xe08>
   51344:	add	x26, x1, #0xc50
   51348:	add	x1, x23, #0x110
   5134c:	mov	w23, #0x0                   	// #0
   51350:	adrp	x2, 58000 <xexit@@Base+0xe08>
   51354:	add	x2, x2, #0x330
   51358:	str	w25, [sp, #136]
   5135c:	mov	x25, x26
   51360:	mov	x26, x1
   51364:	stp	x21, x22, [sp, #144]
   51368:	mov	w21, w23
   5136c:	mov	w22, w24
   51370:	mov	w23, w0
   51374:	mov	w24, w3
   51378:	mov	w3, w22
   5137c:	add	w21, w21, #0x1
   51380:	mov	x1, x25
   51384:	mov	x0, x20
   51388:	blr	x19
   5138c:	add	w22, w22, w24
   51390:	cmp	w23, w21
   51394:	mov	x2, x26
   51398:	b.ne	51378 <aarch64_get_opcode@@Base+0x3868>  // b.any
   5139c:	ldr	w25, [sp, #136]
   513a0:	ldp	x21, x22, [sp, #144]
   513a4:	b	51030 <aarch64_get_opcode@@Base+0x3520>
   513a8:	mov	w0, #0x1                   	// #1
   513ac:	str	w0, [sp, #108]
   513b0:	ldp	x19, x20, [sp, #16]
   513b4:	ldr	w0, [sp, #108]
   513b8:	ldp	x21, x22, [sp, #32]
   513bc:	ldp	x23, x24, [sp, #48]
   513c0:	ldp	x25, x26, [sp, #64]
   513c4:	ldp	x27, x28, [sp, #80]
   513c8:	ldp	x29, x30, [sp], #368
   513cc:	ret
   513d0:	ldr	w2, [sp, #196]
   513d4:	mov	x0, x20
   513d8:	ldr	w3, [sp, #212]
   513dc:	adrp	x1, 64000 <fields@@Base+0x52d8>
   513e0:	add	x1, x1, #0x9a8
   513e4:	blr	x19
   513e8:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   513ec:	ldr	x2, [sp, #280]
   513f0:	mov	x0, x20
   513f4:	adrp	x1, 64000 <fields@@Base+0x52d8>
   513f8:	add	x1, x1, #0xcc8
   513fc:	mov	x3, x2
   51400:	blr	x19
   51404:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   51408:	and	x0, x2, #0xffffff
   5140c:	tst	x2, #0x10000000
   51410:	mov	x21, #0xf3000000            	// #4076863488
   51414:	mov	x1, #0xf2000000            	// #4060086272
   51418:	orr	x21, x0, x21
   5141c:	orr	x0, x0, x1
   51420:	csel	x21, x0, x21, eq  // eq = none
   51424:	stp	x27, x28, [sp, #80]
   51428:	b	50814 <aarch64_get_opcode@@Base+0x2d04>
   5142c:	ldr	w0, [sp, #304]
   51430:	ldr	w1, [sp, #308]
   51434:	cmp	w0, #0x0
   51438:	ldr	w0, [sp, #232]
   5143c:	csel	w2, w0, w1, eq  // eq = none
   51440:	ldr	w0, [sp, #264]
   51444:	cbz	w0, 51290 <aarch64_get_opcode@@Base+0x3780>
   51448:	mov	x0, x20
   5144c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51450:	add	x1, x1, #0xc70
   51454:	blr	x19
   51458:	b	51158 <aarch64_get_opcode@@Base+0x3648>
   5145c:	mov	x0, #0xf5f                 	// #3935
   51460:	mov	x1, #0xb10                 	// #2832
   51464:	movk	x0, #0xff91, lsl #16
   51468:	and	x0, x2, x0
   5146c:	movk	x1, #0xee80, lsl #16
   51470:	cmp	x0, x1
   51474:	b.eq	50810 <aarch64_get_opcode@@Base+0x2d00>  // b.none
   51478:	str	wzr, [sp, #108]
   5147c:	b	51200 <aarch64_get_opcode@@Base+0x36f0>
   51480:	ldr	w2, [sp, #232]
   51484:	b	51440 <aarch64_get_opcode@@Base+0x3930>
   51488:	ldr	w0, [sp, #128]
   5148c:	cmp	w0, #0x0
   51490:	ldr	w0, [sp, #276]
   51494:	csel	w0, w0, wzr, ne  // ne = any
   51498:	str	w0, [sp, #136]
   5149c:	ldr	w0, [sp, #188]
   514a0:	cmp	w0, #0x2
   514a4:	b.ne	50c80 <aarch64_get_opcode@@Base+0x3170>  // b.any
   514a8:	ldr	w0, [sp, #168]
   514ac:	cmp	w0, #0x3
   514b0:	b.eq	51504 <aarch64_get_opcode@@Base+0x39f4>  // b.none
   514b4:	ldr	w0, [sp, #324]
   514b8:	str	w0, [sp, #136]
   514bc:	b	50c80 <aarch64_get_opcode@@Base+0x3170>
   514c0:	ldr	w0, [sp, #188]
   514c4:	cmp	w0, #0x2
   514c8:	b.eq	515e0 <aarch64_get_opcode@@Base+0x3ad0>  // b.none
   514cc:	ldr	w0, [sp, #128]
   514d0:	cmp	w0, #0x0
   514d4:	ldr	w0, [sp, #272]
   514d8:	csel	w0, w0, wzr, ne  // ne = any
   514dc:	str	w0, [sp, #136]
   514e0:	b	50c80 <aarch64_get_opcode@@Base+0x3170>
   514e4:	ldr	w0, [sp, #188]
   514e8:	cmp	w0, #0x2
   514ec:	b.eq	514fc <aarch64_get_opcode@@Base+0x39ec>  // b.none
   514f0:	ldr	w0, [sp, #128]
   514f4:	cbz	w0, 50c7c <aarch64_get_opcode@@Base+0x316c>
   514f8:	b	51504 <aarch64_get_opcode@@Base+0x39f4>
   514fc:	ldr	w0, [sp, #168]
   51500:	cbz	w0, 514f0 <aarch64_get_opcode@@Base+0x39e0>
   51504:	str	wzr, [sp, #108]
   51508:	ldp	x23, x24, [sp, #48]
   5150c:	ldp	x25, x26, [sp, #64]
   51510:	ldp	x27, x28, [sp, #80]
   51514:	b	51200 <aarch64_get_opcode@@Base+0x36f0>
   51518:	ldr	w2, [sp, #120]
   5151c:	mov	x0, x20
   51520:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51524:	add	x1, x1, #0xc58
   51528:	blr	x19
   5152c:	b	51030 <aarch64_get_opcode@@Base+0x3520>
   51530:	tbnz	w21, #6, 50f20 <aarch64_get_opcode@@Base+0x3410>
   51534:	ldr	x2, [sp, #360]
   51538:	mov	x0, x20
   5153c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51540:	add	x28, x27, #0x1
   51544:	add	x1, x1, #0xa70
   51548:	blr	x19
   5154c:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   51550:	adrp	x23, 58000 <xexit@@Base+0xe08>
   51554:	adrp	x26, 64000 <fields@@Base+0x52d8>
   51558:	add	x23, x23, #0x110
   5155c:	add	x26, x26, #0xc88
   51560:	ldr	w24, [sp, #120]
   51564:	adrp	x2, 58000 <xexit@@Base+0xe08>
   51568:	str	x21, [sp, #136]
   5156c:	mov	x21, x26
   51570:	mov	x26, x23
   51574:	ldr	w23, [sp, #312]
   51578:	add	x2, x2, #0x330
   5157c:	mov	w3, w24
   51580:	mov	x1, x21
   51584:	add	w24, w24, #0x2
   51588:	mov	x0, x20
   5158c:	blr	x19
   51590:	cmp	w23, w24
   51594:	mov	x2, x26
   51598:	b.ne	5157c <aarch64_get_opcode@@Base+0x3a6c>  // b.any
   5159c:	ldr	x21, [sp, #136]
   515a0:	b	51238 <aarch64_get_opcode@@Base+0x3728>
   515a4:	mov	x0, #0xd000000             	// #218103808
   515a8:	eor	x21, x2, x0
   515ac:	stp	x27, x28, [sp, #80]
   515b0:	b	50814 <aarch64_get_opcode@@Base+0x2d04>
   515b4:	ldr	x2, [sp, #200]
   515b8:	b	50db0 <aarch64_get_opcode@@Base+0x32a0>
   515bc:	ldr	x2, [sp, #360]
   515c0:	mov	x0, x20
   515c4:	adrp	x1, 64000 <fields@@Base+0x52d8>
   515c8:	add	x1, x1, #0x8e8
   515cc:	add	x28, x27, #0x1
   515d0:	blr	x19
   515d4:	ldr	x0, [sp, #360]
   515d8:	str	x0, [sp, #216]
   515dc:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   515e0:	ldr	w0, [sp, #320]
   515e4:	cbz	w0, 514cc <aarch64_get_opcode@@Base+0x39bc>
   515e8:	b	51504 <aarch64_get_opcode@@Base+0x39f4>
   515ec:	mov	x0, x20
   515f0:	adrp	x1, 64000 <fields@@Base+0x52d8>
   515f4:	add	x28, x27, #0x1
   515f8:	add	x1, x1, #0xa90
   515fc:	blr	x19
   51600:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   51604:	ldr	w0, [sp, #316]
   51608:	str	w0, [sp, #136]
   5160c:	b	50c80 <aarch64_get_opcode@@Base+0x3170>
   51610:	mov	x27, x3
   51614:	add	x28, x27, #0x1
   51618:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   5161c:	sub	w2, w1, #0x61
   51620:	and	w2, w2, #0xff
   51624:	cmp	w2, #0x5
   51628:	b.hi	51710 <aarch64_get_opcode@@Base+0x3c00>  // b.pmore
   5162c:	sub	w1, w1, #0x57
   51630:	b	50ed0 <aarch64_get_opcode@@Base+0x33c0>
   51634:	ldr	w2, [sp, #336]
   51638:	mov	x0, x20
   5163c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51640:	mov	w4, #0x1                   	// #1
   51644:	add	x1, x1, #0xcf8
   51648:	mov	w3, #0xf                   	// #15
   5164c:	blr	x19
   51650:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   51654:	ldrb	w2, [x27, #1]
   51658:	mov	x27, x0
   5165c:	mov	x1, x22
   51660:	mov	x0, x20
   51664:	add	x28, x27, #0x1
   51668:	blr	x19
   5166c:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   51670:	mov	x0, x20
   51674:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51678:	add	x28, x27, #0x1
   5167c:	add	x1, x1, #0xd50
   51680:	blr	x19
   51684:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   51688:	cbnz	w0, 516b8 <aarch64_get_opcode@@Base+0x3ba8>
   5168c:	ldr	x2, [sp, #288]
   51690:	mov	x0, x20
   51694:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51698:	add	x1, x1, #0xcd8
   5169c:	mov	x3, x2
   516a0:	blr	x19
   516a4:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   516a8:	mov	w0, #0x1                   	// #1
   516ac:	str	w0, [sp, #108]
   516b0:	ldp	x27, x28, [sp, #80]
   516b4:	b	50bac <aarch64_get_opcode@@Base+0x309c>
   516b8:	ldr	w5, [sp, #336]
   516bc:	mov	w0, #0x7                   	// #7
   516c0:	mov	x2, #0x0                   	// #0
   516c4:	mov	x3, #0x0                   	// #0
   516c8:	mov	x4, #0xff                  	// #255
   516cc:	asr	w1, w5, w0
   516d0:	tst	x1, #0x1
   516d4:	csel	x1, x4, xzr, ne  // ne = any
   516d8:	cmp	w0, #0x3
   516dc:	b.gt	51704 <aarch64_get_opcode@@Base+0x3bf4>
   516e0:	orr	x3, x1, x3, lsl #8
   516e4:	cbz	w0, 516f0 <aarch64_get_opcode@@Base+0x3be0>
   516e8:	sub	w0, w0, #0x1
   516ec:	b	516cc <aarch64_get_opcode@@Base+0x3bbc>
   516f0:	mov	x0, x20
   516f4:	adrp	x1, 64000 <fields@@Base+0x52d8>
   516f8:	add	x1, x1, #0xd18
   516fc:	blr	x19
   51700:	b	50aec <aarch64_get_opcode@@Base+0x2fdc>
   51704:	orr	x2, x1, x2, lsl #8
   51708:	sub	w0, w0, #0x1
   5170c:	b	516cc <aarch64_get_opcode@@Base+0x3bbc>
   51710:	bl	35670 <abort@plt>
   51714:	nop
   51718:	stp	x29, x30, [sp, #-432]!
   5171c:	mov	x3, x2
   51720:	mov	w4, #0x0                   	// #0
   51724:	mov	x29, sp
   51728:	stp	x23, x24, [sp, #48]
   5172c:	mov	x24, x1
   51730:	stp	x19, x20, [sp, #16]
   51734:	mov	x19, x0
   51738:	stp	x21, x22, [sp, #32]
   5173c:	stp	x25, x26, [sp, #64]
   51740:	stp	x27, x28, [sp, #80]
   51744:	mov	x28, x2
   51748:	mov	x2, x1
   5174c:	mov	x1, x0
   51750:	adrp	x0, 9c000 <aarch64_operands@@Base+0x10bc0>
   51754:	add	x0, x0, #0xe70
   51758:	ldp	x20, x21, [x24]
   5175c:	ldr	x26, [x24, #96]
   51760:	bl	4ee68 <aarch64_get_opcode@@Base+0x1358>
   51764:	cbz	w0, 51784 <aarch64_get_opcode@@Base+0x3c74>
   51768:	ldp	x19, x20, [sp, #16]
   5176c:	ldp	x21, x22, [sp, #32]
   51770:	ldp	x23, x24, [sp, #48]
   51774:	ldp	x25, x26, [sp, #64]
   51778:	ldp	x27, x28, [sp, #80]
   5177c:	ldp	x29, x30, [sp], #432
   51780:	ret
   51784:	ldp	x0, x1, [x24]
   51788:	mov	x2, x28
   5178c:	mov	w3, #0x0                   	// #0
   51790:	bl	507b8 <aarch64_get_opcode@@Base+0x2ca8>
   51794:	cbnz	w0, 51768 <aarch64_get_opcode@@Base+0x3c58>
   51798:	adrp	x0, 8e000 <aarch64_operands@@Base+0x2bc0>
   5179c:	add	x0, x0, #0xc70
   517a0:	add	x0, x0, #0x3f0
   517a4:	mov	x3, x28
   517a8:	mov	x2, x24
   517ac:	mov	x1, x19
   517b0:	mov	w4, #0x0                   	// #0
   517b4:	bl	4ee68 <aarch64_get_opcode@@Base+0x1358>
   517b8:	cbnz	w0, 51768 <aarch64_get_opcode@@Base+0x3c58>
   517bc:	adrp	x0, 92000 <aarch64_operands@@Base+0x6bc0>
   517c0:	adrp	x4, 64000 <fields@@Base+0x52d8>
   517c4:	add	x0, x0, #0x280
   517c8:	add	x27, x4, #0xd68
   517cc:	and	x9, x28, #0xf0000000
   517d0:	mov	x2, #0xe1a00000            	// #3785359360
   517d4:	mov	x1, #0xffffffff            	// #4294967295
   517d8:	mov	x10, #0xf0000000            	// #4026531840
   517dc:	b	517e4 <aarch64_get_opcode@@Base+0x3cd4>
   517e0:	ldp	x2, x1, [x0, #24]
   517e4:	and	x3, x28, x1
   517e8:	cmp	x3, x2
   517ec:	b.ne	5183c <aarch64_get_opcode@@Base+0x3d2c>  // b.any
   517f0:	ldr	x4, [x0]
   517f4:	ldr	x3, [x26]
   517f8:	tst	x4, x3
   517fc:	b.ne	51820 <aarch64_get_opcode@@Base+0x3d10>  // b.any
   51800:	ldr	x4, [x0, #8]
   51804:	ldr	x3, [x26, #8]
   51808:	tst	x4, x3
   5180c:	b.ne	51820 <aarch64_get_opcode@@Base+0x3d10>  // b.any
   51810:	ldr	x4, [x0, #16]
   51814:	ldr	x3, [x26, #16]
   51818:	tst	x4, x3
   5181c:	b.eq	5183c <aarch64_get_opcode@@Base+0x3d2c>  // b.none
   51820:	cmp	x9, x10
   51824:	b.ne	51860 <aarch64_get_opcode@@Base+0x3d50>  // b.any
   51828:	and	x3, x1, #0xf0000000
   5182c:	cmp	x3, x9
   51830:	b.eq	51860 <aarch64_get_opcode@@Base+0x3d50>  // b.none
   51834:	orr	x2, x2, x1
   51838:	cbz	x2, 51860 <aarch64_get_opcode@@Base+0x3d50>
   5183c:	ldr	x27, [x0, #88]
   51840:	add	x0, x0, #0x30
   51844:	cbnz	x27, 517e0 <aarch64_get_opcode@@Base+0x3cd0>
   51848:	mov	w2, w28
   5184c:	mov	x0, x21
   51850:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51854:	add	x1, x1, #0xe30
   51858:	blr	x20
   5185c:	b	51768 <aarch64_get_opcode@@Base+0x3c58>
   51860:	ldrb	w2, [x27]
   51864:	cbz	w2, 51768 <aarch64_get_opcode@@Base+0x3c58>
   51868:	asr	x1, x28, #4
   5186c:	ands	x25, x28, #0x800000
   51870:	adrp	x3, 58000 <xexit@@Base+0xe08>
   51874:	adrp	x0, 64000 <fields@@Base+0x52d8>
   51878:	add	x9, x3, #0x330
   5187c:	add	x0, x0, #0x930
   51880:	and	w4, w28, #0xf
   51884:	csel	x0, x0, x9, eq  // eq = none
   51888:	and	w22, w1, #0xf0
   5188c:	cmp	x25, #0x0
   51890:	orr	w22, w22, w4
   51894:	str	x0, [sp, #184]
   51898:	mov	x0, #0xa00000              	// #10485760
   5189c:	and	x0, x28, x0
   518a0:	cneg	w10, w22, eq  // eq = none
   518a4:	cmp	x0, #0x800, lsl #12
   518a8:	cset	w0, ne  // ne = any
   518ac:	cmp	w22, #0x0
   518b0:	csinc	w0, w0, wzr, eq  // eq = none
   518b4:	str	w0, [sp, #356]
   518b8:	ands	x0, x28, #0x400000
   518bc:	mov	w3, #0x53                  	// #83
   518c0:	str	x0, [sp, #168]
   518c4:	mov	w0, #0x43                  	// #67
   518c8:	csel	w0, w3, w0, ne  // ne = any
   518cc:	cmp	x25, #0x0
   518d0:	mov	x3, #0xffffffffff000000    	// #-16777216
   518d4:	csel	x3, x3, xzr, ne  // ne = any
   518d8:	str	w0, [sp, #336]
   518dc:	and	x0, x28, #0xffffff
   518e0:	add	x0, x0, x3
   518e4:	ands	x3, x28, #0x1000000
   518e8:	and	w5, w28, #0xff
   518ec:	asr	x12, x28, #16
   518f0:	add	x0, x19, x0, lsl #2
   518f4:	and	w14, w1, #0xfff0
   518f8:	add	x11, x0, #0x8
   518fc:	add	x0, x0, #0xa
   51900:	csel	x0, x11, x0, eq  // eq = none
   51904:	str	x0, [sp, #176]
   51908:	mov	x0, x5
   5190c:	and	w13, w1, #0x30
   51910:	cmp	x25, #0x0
   51914:	mov	w8, #0x4f                  	// #79
   51918:	ubfiz	x11, x0, #2, #8
   5191c:	and	w8, w12, w8
   51920:	orr	w6, w14, w4
   51924:	orr	w7, w13, w8
   51928:	cneg	x14, x11, eq  // eq = none
   5192c:	ands	x8, x28, #0x200000
   51930:	str	x3, [sp, #128]
   51934:	asr	x3, x28, #7
   51938:	str	x8, [sp, #144]
   5193c:	adrp	x8, 64000 <fields@@Base+0x52d8>
   51940:	and	x23, x1, #0xf0
   51944:	and	w13, w3, #0x1e
   51948:	and	x1, x1, #0xf000
   5194c:	str	w4, [sp, #316]
   51950:	and	x4, x12, #0x1f
   51954:	add	x12, x8, #0x8d8
   51958:	and	x8, x28, #0xfff
   5195c:	mov	x0, x3
   51960:	orr	x1, x1, x8
   51964:	and	x3, x28, #0xf
   51968:	add	x11, x4, #0x1
   5196c:	stp	w5, w7, [sp, #152]
   51970:	ror	w5, w5, w13
   51974:	str	x1, [sp, #208]
   51978:	mov	w1, w5
   5197c:	str	x4, [sp, #384]
   51980:	orr	x4, x23, x3
   51984:	and	x15, x0, #0x1f
   51988:	adrp	x0, 8d000 <aarch64_operands@@Base+0x1bc0>
   5198c:	add	x17, x0, #0xb70
   51990:	str	w6, [sp, #240]
   51994:	sxtw	x6, w6
   51998:	str	x1, [sp, #368]
   5199c:	neg	x1, x4
   519a0:	add	x16, x19, #0x8
   519a4:	eor	x0, x28, x28, asr #12
   519a8:	str	x6, [sp, #192]
   519ac:	sxtw	x6, w7
   519b0:	str	x3, [sp, #232]
   519b4:	sbfiz	x3, x28, #2, #24
   519b8:	str	x1, [sp, #376]
   519bc:	add	x1, x17, #0xe70
   519c0:	and	x0, x0, #0xf
   519c4:	sxtw	x10, w10
   519c8:	csel	x9, x12, x9, ne  // ne = any
   519cc:	str	x1, [sp, #120]
   519d0:	add	x1, x3, x16
   519d4:	str	x1, [sp, #200]
   519d8:	str	w4, [sp, #244]
   519dc:	mov	x23, x27
   519e0:	str	x14, [sp, #256]
   519e4:	str	x10, [sp, #264]
   519e8:	str	x15, [sp, #272]
   519ec:	str	x4, [sp, #288]
   519f0:	str	w14, [sp, #312]
   519f4:	str	x6, [sp, #320]
   519f8:	sub	x6, x11, x15
   519fc:	str	x6, [sp, #216]
   51a00:	str	w13, [sp, #340]
   51a04:	str	x17, [sp, #344]
   51a08:	str	w5, [sp, #352]
   51a0c:	str	x9, [sp, #360]
   51a10:	str	x16, [sp, #392]
   51a14:	str	x0, [sp, #296]
   51a18:	mov	x0, #0x10                  	// #16
   51a1c:	str	x0, [sp, #248]
   51a20:	str	x0, [sp, #328]
   51a24:	lsr	w0, w28, #28
   51a28:	str	x0, [sp, #160]
   51a2c:	ubfx	x0, x28, #16, #4
   51a30:	str	xzr, [sp, #104]
   51a34:	str	wzr, [sp, #116]
   51a38:	str	x0, [sp, #136]
   51a3c:	add	x0, sp, #0x1a4
   51a40:	str	x0, [sp, #224]
   51a44:	str	x25, [sp, #280]
   51a48:	str	w22, [sp, #304]
   51a4c:	str	w28, [sp, #308]
   51a50:	str	x26, [sp, #400]
   51a54:	b	51a7c <aarch64_get_opcode@@Base+0x3f6c>
   51a58:	mov	x0, x21
   51a5c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51a60:	add	x1, x1, #0x870
   51a64:	blr	x20
   51a68:	mov	x0, x26
   51a6c:	mov	x26, x23
   51a70:	mov	x23, x0
   51a74:	ldrb	w2, [x26, #1]
   51a78:	cbz	w2, 51ab4 <aarch64_get_opcode@@Base+0x3fa4>
   51a7c:	cmp	w2, #0x25
   51a80:	add	x26, x23, #0x1
   51a84:	b.ne	51a58 <aarch64_get_opcode@@Base+0x3f48>  // b.any
   51a88:	ldrb	w0, [x23, #1]
   51a8c:	sub	w0, w0, #0x25
   51a90:	cmp	w0, #0x4f
   51a94:	b.ls	51a9c <aarch64_get_opcode@@Base+0x3f8c>  // b.plast
   51a98:	bl	35670 <abort@plt>
   51a9c:	adrp	x1, 63000 <fields@@Base+0x42d8>
   51aa0:	add	x1, x1, #0xfd0
   51aa4:	ldrh	w0, [x1, w0, uxtw #1]
   51aa8:	adr	x1, 51ab4 <aarch64_get_opcode@@Base+0x3fa4>
   51aac:	add	x0, x1, w0, sxth #2
   51ab0:	br	x0
   51ab4:	ldr	x1, [sp, #104]
   51ab8:	add	x0, x1, #0x10
   51abc:	cmp	x0, #0x30
   51ac0:	b.ls	51ad8 <aarch64_get_opcode@@Base+0x3fc8>  // b.plast
   51ac4:	mov	w2, w1
   51ac8:	mov	x0, x21
   51acc:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51ad0:	add	x1, x1, #0x8f8
   51ad4:	blr	x20
   51ad8:	ldr	w0, [sp, #116]
   51adc:	cbz	w0, 51768 <aarch64_get_opcode@@Base+0x3c58>
   51ae0:	mov	x0, x21
   51ae4:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51ae8:	add	x1, x1, #0xb68
   51aec:	blr	x20
   51af0:	b	51768 <aarch64_get_opcode@@Base+0x3c58>
   51af4:	ldr	x3, [sp, #224]
   51af8:	mov	x0, x26
   51afc:	add	x2, sp, #0x1a8
   51b00:	mov	x1, x28
   51b04:	bl	4e550 <aarch64_get_opcode@@Base+0xa40>
   51b08:	mov	x26, x0
   51b0c:	ldrb	w0, [x0]
   51b10:	cmp	w0, #0x58
   51b14:	b.eq	52500 <aarch64_get_opcode@@Base+0x49f0>  // b.none
   51b18:	b.hi	52080 <aarch64_get_opcode@@Base+0x4570>  // b.pmore
   51b1c:	cmp	w0, #0x52
   51b20:	b.eq	524c4 <aarch64_get_opcode@@Base+0x49b4>  // b.none
   51b24:	b.ls	51fd4 <aarch64_get_opcode@@Base+0x44c4>  // b.plast
   51b28:	cmp	w0, #0x54
   51b2c:	b.eq	52528 <aarch64_get_opcode@@Base+0x4a18>  // b.none
   51b30:	cmp	w0, #0x57
   51b34:	b.ne	51a98 <aarch64_get_opcode@@Base+0x3f88>  // b.any
   51b38:	ldr	x2, [sp, #424]
   51b3c:	mov	x0, x21
   51b40:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51b44:	add	x1, x1, #0x8e8
   51b48:	add	x2, x2, #0x1
   51b4c:	blr	x20
   51b50:	ldr	x0, [sp, #424]
   51b54:	add	x23, x26, #0x1
   51b58:	add	x0, x0, #0x1
   51b5c:	str	x0, [sp, #104]
   51b60:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   51b64:	adrp	x2, f9000 <aarch64_opcode_table@@Base+0x55a20>
   51b68:	mov	x0, x21
   51b6c:	ldr	x3, [sp, #136]
   51b70:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51b74:	ldr	w2, [x2, #1616]
   51b78:	add	x1, x1, #0x938
   51b7c:	add	x23, x23, #0x2
   51b80:	add	x2, x2, x2, lsl #3
   51b84:	add	x2, x3, x2, lsl #1
   51b88:	ldr	x3, [sp, #120]
   51b8c:	add	x2, x2, #0x2
   51b90:	ldr	x2, [x3, x2, lsl #3]
   51b94:	blr	x20
   51b98:	ldr	x0, [sp, #128]
   51b9c:	cbz	x0, 5219c <aarch64_get_opcode@@Base+0x468c>
   51ba0:	ldr	w0, [sp, #152]
   51ba4:	cbz	w0, 52408 <aarch64_get_opcode@@Base+0x48f8>
   51ba8:	ldr	w2, [sp, #312]
   51bac:	mov	x0, x21
   51bb0:	ldr	x3, [sp, #360]
   51bb4:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51bb8:	add	x1, x1, #0x940
   51bbc:	blr	x20
   51bc0:	ldr	x0, [sp, #256]
   51bc4:	str	x0, [sp, #104]
   51bc8:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   51bcc:	add	x23, x23, #0x2
   51bd0:	mov	x2, x21
   51bd4:	mov	x1, x20
   51bd8:	mov	x0, x28
   51bdc:	mov	w3, #0x0                   	// #0
   51be0:	bl	50230 <aarch64_get_opcode@@Base+0x2720>
   51be4:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   51be8:	and	x0, x28, #0xf000
   51bec:	add	x23, x23, #0x2
   51bf0:	cmp	x0, #0xf, lsl #12
   51bf4:	b.ne	51a74 <aarch64_get_opcode@@Base+0x3f64>  // b.any
   51bf8:	ldr	x0, [sp, #400]
   51bfc:	ldr	x0, [x0]
   51c00:	tbnz	w0, #12, 523d8 <aarch64_get_opcode@@Base+0x48c8>
   51c04:	mov	x0, x21
   51c08:	adrp	x1, 5e000 <xexit@@Base+0x6e08>
   51c0c:	add	x1, x1, #0x330
   51c10:	blr	x20
   51c14:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   51c18:	add	x23, x23, #0x2
   51c1c:	tbnz	w28, #25, 521f8 <aarch64_get_opcode@@Base+0x46e8>
   51c20:	mov	x2, x21
   51c24:	mov	x1, x20
   51c28:	mov	x0, x28
   51c2c:	mov	w3, #0x1                   	// #1
   51c30:	bl	50230 <aarch64_get_opcode@@Base+0x2720>
   51c34:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   51c38:	mov	x0, x21
   51c3c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51c40:	add	x1, x1, #0x8d0
   51c44:	blr	x20
   51c48:	ldr	x22, [sp, #120]
   51c4c:	adrp	x27, f9000 <aarch64_opcode_table@@Base+0x55a20>
   51c50:	mov	w25, #0x0                   	// #0
   51c54:	add	x27, x27, #0x650
   51c58:	str	x19, [sp, #408]
   51c5c:	mov	w19, w25
   51c60:	mov	w0, #0x1                   	// #1
   51c64:	lsl	w0, w0, w25
   51c68:	sxtw	x0, w0
   51c6c:	tst	x0, x28
   51c70:	b.eq	51cb4 <aarch64_get_opcode@@Base+0x41a4>  // b.none
   51c74:	cbz	w19, 51c88 <aarch64_get_opcode@@Base+0x4178>
   51c78:	adrp	x1, 58000 <xexit@@Base+0xe08>
   51c7c:	mov	x0, x21
   51c80:	add	x1, x1, #0xc8
   51c84:	blr	x20
   51c88:	ldr	w2, [x27]
   51c8c:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   51c90:	mov	x0, x21
   51c94:	add	x1, x1, #0xa78
   51c98:	mov	w19, #0x1                   	// #1
   51c9c:	add	x2, x2, x2, lsl #3
   51ca0:	lsl	x2, x2, #1
   51ca4:	add	x2, x2, w25, sxtw
   51ca8:	add	x2, x2, #0x2
   51cac:	ldr	x2, [x22, x2, lsl #3]
   51cb0:	blr	x20
   51cb4:	add	w25, w25, #0x1
   51cb8:	cmp	w25, #0x10
   51cbc:	b.ne	51c60 <aarch64_get_opcode@@Base+0x4150>  // b.any
   51cc0:	mov	w25, w19
   51cc4:	mov	x0, x21
   51cc8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51ccc:	add	x1, x1, #0x9b0
   51cd0:	ldr	x19, [sp, #408]
   51cd4:	blr	x20
   51cd8:	ldr	w0, [sp, #116]
   51cdc:	cmp	w25, #0x0
   51ce0:	add	x23, x23, #0x2
   51ce4:	csinc	w0, w0, wzr, ne  // ne = any
   51ce8:	str	w0, [sp, #116]
   51cec:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   51cf0:	mov	x0, #0x1200000             	// #18874368
   51cf4:	and	x0, x28, x0
   51cf8:	add	x23, x23, #0x2
   51cfc:	cmp	x0, #0x200, lsl #12
   51d00:	b.ne	51a74 <aarch64_get_opcode@@Base+0x3f64>  // b.any
   51d04:	mov	x0, x21
   51d08:	adrp	x1, 5b000 <xexit@@Base+0x3e08>
   51d0c:	add	x1, x1, #0xca0
   51d10:	blr	x20
   51d14:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   51d18:	add	x23, x23, #0x2
   51d1c:	mov	x0, x21
   51d20:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51d24:	add	x1, x1, #0x878
   51d28:	blr	x20
   51d2c:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   51d30:	orr	x2, x28, #0x1000000
   51d34:	mov	x1, x24
   51d38:	mov	x0, x19
   51d3c:	add	x23, x23, #0x2
   51d40:	bl	503e0 <aarch64_get_opcode@@Base+0x28d0>
   51d44:	str	x0, [sp, #104]
   51d48:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   51d4c:	ldr	x3, [sp, #216]
   51d50:	add	x23, x23, #0x2
   51d54:	cmp	x3, #0x0
   51d58:	b.le	52240 <aarch64_get_opcode@@Base+0x4730>
   51d5c:	ldr	x2, [sp, #272]
   51d60:	mov	x0, x21
   51d64:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51d68:	add	x1, x1, #0xe00
   51d6c:	blr	x20
   51d70:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   51d74:	and	x0, x28, #0x3fffe00
   51d78:	add	x23, x23, #0x2
   51d7c:	and	x0, x0, #0xfffffffffe0003ff
   51d80:	cmp	x0, #0x200
   51d84:	b.eq	5227c <aarch64_get_opcode@@Base+0x476c>  // b.none
   51d88:	ldr	w2, [sp, #336]
   51d8c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51d90:	mov	x0, x21
   51d94:	add	x1, x1, #0xdd0
   51d98:	blr	x20
   51d9c:	tbz	w28, #19, 51db0 <aarch64_get_opcode@@Base+0x42a0>
   51da0:	adrp	x1, 70000 <fields@@Base+0x112d8>
   51da4:	mov	x0, x21
   51da8:	add	x1, x1, #0xd28
   51dac:	blr	x20
   51db0:	tbz	w28, #18, 51dc4 <aarch64_get_opcode@@Base+0x42b4>
   51db4:	adrp	x1, 58000 <xexit@@Base+0xe08>
   51db8:	mov	x0, x21
   51dbc:	add	x1, x1, #0xf0
   51dc0:	blr	x20
   51dc4:	tbz	w28, #17, 51dd8 <aarch64_get_opcode@@Base+0x42c8>
   51dc8:	adrp	x1, 67000 <fields@@Base+0x82d8>
   51dcc:	mov	x0, x21
   51dd0:	add	x1, x1, #0x6c8
   51dd4:	blr	x20
   51dd8:	tbz	w28, #16, 51a74 <aarch64_get_opcode@@Base+0x3f64>
   51ddc:	mov	x0, x21
   51de0:	adrp	x1, 5e000 <xexit@@Base+0x6e08>
   51de4:	add	x1, x1, #0x450
   51de8:	blr	x20
   51dec:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   51df0:	ldr	x2, [x24, #120]
   51df4:	add	x23, x23, #0x2
   51df8:	ldr	x22, [sp, #176]
   51dfc:	mov	x1, x24
   51e00:	mov	x0, x22
   51e04:	blr	x2
   51e08:	mov	w1, #0x1                   	// #1
   51e0c:	mov	w0, #0x2                   	// #2
   51e10:	strb	w1, [x24, #196]
   51e14:	str	w0, [x24, #200]
   51e18:	str	x22, [x24, #208]
   51e1c:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   51e20:	ldr	w2, [sp, #240]
   51e24:	mov	x0, x21
   51e28:	adrp	x1, 6a000 <fields@@Base+0xb2d8>
   51e2c:	add	x1, x1, #0xcc0
   51e30:	add	x23, x23, #0x2
   51e34:	blr	x20
   51e38:	ldr	x0, [sp, #192]
   51e3c:	str	x0, [sp, #104]
   51e40:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   51e44:	ldr	x3, [sp, #160]
   51e48:	add	x23, x23, #0x2
   51e4c:	cmp	x3, #0xe
   51e50:	b.eq	51a74 <aarch64_get_opcode@@Base+0x3f64>  // b.none
   51e54:	ldr	x0, [sp, #344]
   51e58:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   51e5c:	add	x1, x1, #0xa78
   51e60:	add	x2, x0, #0xde8
   51e64:	mov	x0, x21
   51e68:	ldr	x2, [x2, x3, lsl #3]
   51e6c:	blr	x20
   51e70:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   51e74:	add	x23, x23, #0x2
   51e78:	mov	x1, x24
   51e7c:	ldr	x2, [x24, #120]
   51e80:	ldr	x22, [sp, #200]
   51e84:	b	51e00 <aarch64_get_opcode@@Base+0x42f0>
   51e88:	mov	x2, x28
   51e8c:	b	51d34 <aarch64_get_opcode@@Base+0x4224>
   51e90:	ldr	x22, [sp, #208]
   51e94:	mov	x0, x21
   51e98:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51e9c:	add	x23, x23, #0x2
   51ea0:	add	x1, x1, #0xe28
   51ea4:	mov	x2, x22
   51ea8:	blr	x20
   51eac:	str	x22, [sp, #104]
   51eb0:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   51eb4:	and	x0, x28, #0xf0
   51eb8:	add	x23, x23, #0x2
   51ebc:	cmp	x0, #0x60
   51ec0:	b.eq	5225c <aarch64_get_opcode@@Base+0x474c>  // b.none
   51ec4:	ldr	w0, [sp, #308]
   51ec8:	and	w0, w0, #0xf
   51ecc:	bl	4e300 <aarch64_get_opcode@@Base+0x7f0>
   51ed0:	mov	x2, x0
   51ed4:	cbz	x0, 521e0 <aarch64_get_opcode@@Base+0x46d0>
   51ed8:	mov	x0, x21
   51edc:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   51ee0:	add	x1, x1, #0xa78
   51ee4:	blr	x20
   51ee8:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   51eec:	ldr	w0, [sp, #156]
   51ef0:	add	x23, x23, #0x2
   51ef4:	bl	4e130 <aarch64_get_opcode@@Base+0x620>
   51ef8:	mov	x2, x0
   51efc:	cbnz	x0, 51ed8 <aarch64_get_opcode@@Base+0x43c8>
   51f00:	ldr	x2, [sp, #320]
   51f04:	mov	x0, x21
   51f08:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51f0c:	add	x1, x1, #0xdc0
   51f10:	blr	x20
   51f14:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   51f18:	mov	w22, #0x0                   	// #0
   51f1c:	mov	x0, #0x4f0000              	// #5177344
   51f20:	and	x0, x28, x0
   51f24:	add	x23, x23, #0x2
   51f28:	cmp	x0, #0x4f0, lsl #12
   51f2c:	b.eq	5211c <aarch64_get_opcode@@Base+0x460c>  // b.none
   51f30:	adrp	x27, f9000 <aarch64_opcode_table@@Base+0x55a20>
   51f34:	mov	x0, x21
   51f38:	ldr	x3, [sp, #136]
   51f3c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51f40:	ldr	w2, [x27, #1616]
   51f44:	add	x1, x1, #0x938
   51f48:	add	x2, x2, x2, lsl #3
   51f4c:	add	x2, x3, x2, lsl #1
   51f50:	ldr	x3, [sp, #120]
   51f54:	add	x2, x2, #0x2
   51f58:	ldr	x2, [x3, x2, lsl #3]
   51f5c:	blr	x20
   51f60:	ldr	x0, [sp, #128]
   51f64:	cbz	x0, 52160 <aarch64_get_opcode@@Base+0x4650>
   51f68:	ldr	x0, [sp, #168]
   51f6c:	cbz	x0, 52328 <aarch64_get_opcode@@Base+0x4818>
   51f70:	ldr	w0, [sp, #356]
   51f74:	cbz	w0, 51f90 <aarch64_get_opcode@@Base+0x4480>
   51f78:	ldr	w3, [sp, #304]
   51f7c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51f80:	ldr	x2, [sp, #184]
   51f84:	add	x1, x1, #0xbd0
   51f88:	mov	x0, x21
   51f8c:	blr	x20
   51f90:	ldr	x0, [sp, #264]
   51f94:	str	x0, [sp, #104]
   51f98:	ldr	x0, [sp, #144]
   51f9c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51fa0:	add	x2, x1, #0x8d8
   51fa4:	cmp	x0, #0x0
   51fa8:	adrp	x0, 58000 <xexit@@Base+0xe08>
   51fac:	add	x0, x0, #0x330
   51fb0:	csel	x2, x2, x0, ne  // ne = any
   51fb4:	mov	x0, x21
   51fb8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   51fbc:	add	x1, x1, #0xbd8
   51fc0:	blr	x20
   51fc4:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   51fc8:	mov	w0, #0x1                   	// #1
   51fcc:	mov	w22, w0
   51fd0:	b	51f1c <aarch64_get_opcode@@Base+0x440c>
   51fd4:	cmp	w0, #0x27
   51fd8:	b.ne	5203c <aarch64_get_opcode@@Base+0x452c>  // b.any
   51fdc:	ldr	w2, [sp, #420]
   51fe0:	mov	x0, #0x1                   	// #1
   51fe4:	ldr	x1, [sp, #424]
   51fe8:	add	x23, x26, #0x2
   51fec:	lsl	x0, x0, x2
   51ff0:	sub	x0, x0, #0x1
   51ff4:	cmp	x0, x1
   51ff8:	add	x0, x26, #0x1
   51ffc:	b.eq	52020 <aarch64_get_opcode@@Base+0x4510>  // b.none
   52000:	mov	x26, x0
   52004:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   52008:	cmp	w0, #0x60
   5200c:	b.ne	520e8 <aarch64_get_opcode@@Base+0x45d8>  // b.any
   52010:	ldr	x1, [sp, #424]
   52014:	add	x0, x26, #0x1
   52018:	add	x23, x26, #0x2
   5201c:	cbnz	x1, 52000 <aarch64_get_opcode@@Base+0x44f0>
   52020:	ldrb	w2, [x26, #1]
   52024:	adrp	x1, 64000 <fields@@Base+0x52d8>
   52028:	mov	x26, x0
   5202c:	add	x1, x1, #0x870
   52030:	mov	x0, x21
   52034:	blr	x20
   52038:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   5203c:	cmp	w0, #0x3f
   52040:	b.ne	51a98 <aarch64_get_opcode@@Base+0x3f88>  // b.any
   52044:	ldr	w2, [sp, #420]
   52048:	mov	w27, #0x1                   	// #1
   5204c:	ldr	x0, [sp, #424]
   52050:	adrp	x1, 64000 <fields@@Base+0x52d8>
   52054:	lsl	w2, w27, w2
   52058:	add	x1, x1, #0x870
   5205c:	sub	w2, w2, w0
   52060:	mov	x0, x21
   52064:	ldrb	w2, [x26, w2, sxtw]
   52068:	blr	x20
   5206c:	ldr	w0, [sp, #420]
   52070:	lsl	w27, w27, w0
   52074:	add	x26, x26, w27, sxtw
   52078:	add	x23, x26, #0x1
   5207c:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   52080:	cmp	w0, #0x64
   52084:	b.eq	524dc <aarch64_get_opcode@@Base+0x49cc>  // b.none
   52088:	b.ls	52008 <aarch64_get_opcode@@Base+0x44f8>  // b.plast
   5208c:	cmp	w0, #0x72
   52090:	b.eq	5238c <aarch64_get_opcode@@Base+0x487c>  // b.none
   52094:	cmp	w0, #0x78
   52098:	b.ne	51a98 <aarch64_get_opcode@@Base+0x3f88>  // b.any
   5209c:	ldr	x2, [sp, #424]
   520a0:	mov	x0, x21
   520a4:	adrp	x1, 64000 <fields@@Base+0x52d8>
   520a8:	add	x1, x1, #0xdd8
   520ac:	add	x23, x26, #0x1
   520b0:	blr	x20
   520b4:	and	x0, x28, #0xfffffff
   520b8:	mov	x1, #0xff00000             	// #267386880
   520bc:	cmp	x0, x1
   520c0:	b.eq	52584 <aarch64_get_opcode@@Base+0x4a74>  // b.none
   520c4:	mov	x1, #0x1                   	// #1
   520c8:	movk	x1, #0xff0, lsl #16
   520cc:	cmp	x0, x1
   520d0:	b.ne	51a74 <aarch64_get_opcode@@Base+0x3f64>  // b.any
   520d4:	mov	x0, x21
   520d8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   520dc:	add	x1, x1, #0xde8
   520e0:	blr	x20
   520e4:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   520e8:	cmp	w0, #0x62
   520ec:	b.ne	51a98 <aarch64_get_opcode@@Base+0x3f88>  // b.any
   520f0:	ldr	x2, [sp, #424]
   520f4:	mov	x0, x21
   520f8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   520fc:	add	x1, x1, #0x8e8
   52100:	add	x23, x26, #0x1
   52104:	lsl	x2, x2, #3
   52108:	blr	x20
   5210c:	ldr	x0, [sp, #424]
   52110:	lsl	x0, x0, #3
   52114:	str	x0, [sp, #104]
   52118:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   5211c:	ldr	x0, [sp, #128]
   52120:	cbz	x0, 52290 <aarch64_get_opcode@@Base+0x4780>
   52124:	ldr	x0, [sp, #288]
   52128:	cbnz	x0, 52474 <aarch64_get_opcode@@Base+0x4964>
   5212c:	ldr	x0, [sp, #280]
   52130:	cbz	x0, 524a0 <aarch64_get_opcode@@Base+0x4990>
   52134:	mov	x0, x21
   52138:	adrp	x1, 64000 <fields@@Base+0x52d8>
   5213c:	add	x1, x1, #0xd80
   52140:	blr	x20
   52144:	mov	x0, #0x0                   	// #0
   52148:	ldr	x2, [x24, #120]
   5214c:	ldr	x1, [sp, #392]
   52150:	add	x0, x0, x1
   52154:	mov	x1, x24
   52158:	blr	x2
   5215c:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   52160:	ldr	x0, [sp, #168]
   52164:	cbz	x0, 522bc <aarch64_get_opcode@@Base+0x47ac>
   52168:	ldr	x0, [sp, #280]
   5216c:	cbnz	x0, 52448 <aarch64_get_opcode@@Base+0x4938>
   52170:	ldr	w3, [sp, #304]
   52174:	adrp	x0, 64000 <fields@@Base+0x52d8>
   52178:	adrp	x1, 64000 <fields@@Base+0x52d8>
   5217c:	add	x2, x0, #0x930
   52180:	add	x1, x1, #0xb20
   52184:	mov	x0, x21
   52188:	blr	x20
   5218c:	cbz	w22, 52468 <aarch64_get_opcode@@Base+0x4958>
   52190:	ldr	x0, [sp, #264]
   52194:	str	x0, [sp, #104]
   52198:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   5219c:	mov	x0, x21
   521a0:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   521a4:	add	x1, x1, #0x4f0
   521a8:	blr	x20
   521ac:	ldr	x0, [sp, #144]
   521b0:	cbz	x0, 523e4 <aarch64_get_opcode@@Base+0x48d4>
   521b4:	ldr	w0, [sp, #152]
   521b8:	ldr	x22, [sp, #256]
   521bc:	str	x22, [sp, #104]
   521c0:	cbz	w0, 51a74 <aarch64_get_opcode@@Base+0x3f64>
   521c4:	ldr	w2, [sp, #312]
   521c8:	mov	x0, x21
   521cc:	adrp	x1, 64000 <fields@@Base+0x52d8>
   521d0:	add	x1, x1, #0x958
   521d4:	blr	x20
   521d8:	str	x22, [sp, #104]
   521dc:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   521e0:	ldr	w2, [sp, #316]
   521e4:	mov	x0, x21
   521e8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   521ec:	add	x1, x1, #0xdb0
   521f0:	blr	x20
   521f4:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   521f8:	ldr	w2, [sp, #352]
   521fc:	mov	w1, #0x0                   	// #0
   52200:	neg	w0, w1
   52204:	ror	w0, w2, w0
   52208:	cmp	w0, #0xff
   5220c:	b.ls	52424 <aarch64_get_opcode@@Base+0x4914>  // b.plast
   52210:	add	w1, w1, #0x2
   52214:	cmp	w1, #0x20
   52218:	b.ne	52200 <aarch64_get_opcode@@Base+0x46f0>  // b.any
   5221c:	ldr	w2, [sp, #152]
   52220:	adrp	x1, 64000 <fields@@Base+0x52d8>
   52224:	ldr	w3, [sp, #340]
   52228:	add	x1, x1, #0xda8
   5222c:	mov	x0, x21
   52230:	blr	x20
   52234:	ldr	x0, [sp, #368]
   52238:	str	x0, [sp, #104]
   5223c:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   52240:	ldr	x2, [sp, #272]
   52244:	mov	x0, x21
   52248:	ldr	x3, [sp, #384]
   5224c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   52250:	add	x1, x1, #0xe10
   52254:	blr	x20
   52258:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   5225c:	ldr	x0, [sp, #232]
   52260:	cmp	x0, #0xf
   52264:	b.ne	521e0 <aarch64_get_opcode@@Base+0x46d0>  // b.any
   52268:	mov	x0, x21
   5226c:	adrp	x1, 5e000 <xexit@@Base+0x6e08>
   52270:	add	x1, x1, #0x4c8
   52274:	blr	x20
   52278:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   5227c:	ldr	w0, [sp, #156]
   52280:	bl	4e130 <aarch64_get_opcode@@Base+0x620>
   52284:	mov	x2, x0
   52288:	cbnz	x0, 51ed8 <aarch64_get_opcode@@Base+0x43c8>
   5228c:	b	51f00 <aarch64_get_opcode@@Base+0x43f0>
   52290:	ldr	w3, [sp, #244]
   52294:	mov	x0, x21
   52298:	ldr	x2, [sp, #184]
   5229c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   522a0:	add	x1, x1, #0xd88
   522a4:	blr	x20
   522a8:	ldr	w0, [sp, #116]
   522ac:	cmp	w22, #0x0
   522b0:	csinc	w0, w0, wzr, ne  // ne = any
   522b4:	str	w0, [sp, #116]
   522b8:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   522bc:	ldr	w3, [x27, #1616]
   522c0:	adrp	x1, 64000 <fields@@Base+0x52d8>
   522c4:	ldr	x4, [sp, #232]
   522c8:	add	x1, x1, #0xda0
   522cc:	add	x3, x3, x3, lsl #3
   522d0:	mov	x0, x21
   522d4:	ldr	x2, [sp, #184]
   522d8:	add	x3, x4, x3, lsl #1
   522dc:	ldr	x4, [sp, #120]
   522e0:	add	x3, x3, #0x2
   522e4:	ldr	x3, [x4, x3, lsl #3]
   522e8:	blr	x20
   522ec:	cbnz	w22, 51a74 <aarch64_get_opcode@@Base+0x3f64>
   522f0:	ldr	x0, [sp, #296]
   522f4:	cmp	x0, #0x0
   522f8:	ldr	w0, [sp, #116]
   522fc:	csinc	w0, w0, wzr, ne  // ne = any
   52300:	str	w0, [sp, #116]
   52304:	ldr	x0, [sp, #144]
   52308:	cbnz	x0, 523d8 <aarch64_get_opcode@@Base+0x48c8>
   5230c:	and	x0, x28, #0x7fffff
   52310:	and	x0, x0, #0xffffffffffc0000f
   52314:	cmp	x0, #0xf
   52318:	ldr	w0, [sp, #116]
   5231c:	csinc	w0, w0, wzr, ne  // ne = any
   52320:	str	w0, [sp, #116]
   52324:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   52328:	ldr	w3, [x27, #1616]
   5232c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   52330:	ldr	x4, [sp, #232]
   52334:	add	x1, x1, #0xd98
   52338:	add	x3, x3, x3, lsl #3
   5233c:	mov	x0, x21
   52340:	ldr	x2, [sp, #184]
   52344:	add	x3, x4, x3, lsl #1
   52348:	ldr	x4, [sp, #120]
   5234c:	add	x3, x3, #0x2
   52350:	ldr	x3, [x4, x3, lsl #3]
   52354:	blr	x20
   52358:	cbnz	w22, 51f98 <aarch64_get_opcode@@Base+0x4488>
   5235c:	adrp	x0, 58000 <xexit@@Base+0xe08>
   52360:	add	x2, x0, #0x330
   52364:	ldr	x0, [sp, #144]
   52368:	cbz	x0, 51fb4 <aarch64_get_opcode@@Base+0x44a4>
   5236c:	ldr	x0, [sp, #296]
   52370:	cmp	x0, #0x0
   52374:	adrp	x0, 64000 <fields@@Base+0x52d8>
   52378:	add	x2, x0, #0x8d8
   5237c:	ldr	w0, [sp, #116]
   52380:	csinc	w0, w0, wzr, ne  // ne = any
   52384:	str	w0, [sp, #116]
   52388:	b	51fb4 <aarch64_get_opcode@@Base+0x44a4>
   5238c:	ldr	x2, [sp, #424]
   52390:	mov	x23, x26
   52394:	ldrb	w0, [x23, #1]!
   52398:	cmp	w0, #0x75
   5239c:	b.eq	52560 <aarch64_get_opcode@@Base+0x4a50>  // b.none
   523a0:	cmp	w0, #0x55
   523a4:	b.eq	52538 <aarch64_get_opcode@@Base+0x4a28>  // b.none
   523a8:	adrp	x3, f9000 <aarch64_opcode_table@@Base+0x55a20>
   523ac:	mov	x0, x21
   523b0:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   523b4:	add	x1, x1, #0xa78
   523b8:	ldr	w3, [x3, #1616]
   523bc:	add	x3, x3, x3, lsl #3
   523c0:	add	x2, x2, x3, lsl #1
   523c4:	ldr	x3, [sp, #120]
   523c8:	add	x2, x2, #0x2
   523cc:	ldr	x2, [x3, x2, lsl #3]
   523d0:	blr	x20
   523d4:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   523d8:	mov	w0, #0x1                   	// #1
   523dc:	str	w0, [sp, #116]
   523e0:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   523e4:	ldr	w22, [sp, #152]
   523e8:	mov	x0, x21
   523ec:	adrp	x1, 64000 <fields@@Base+0x52d8>
   523f0:	add	x1, x1, #0xdb8
   523f4:	mov	w2, w22
   523f8:	blr	x20
   523fc:	sxtw	x0, w22
   52400:	str	x0, [sp, #104]
   52404:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   52408:	mov	x0, x21
   5240c:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   52410:	add	x1, x1, #0x4f0
   52414:	blr	x20
   52418:	ldr	x0, [sp, #256]
   5241c:	str	x0, [sp, #104]
   52420:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   52424:	ldr	w0, [sp, #340]
   52428:	cmp	w0, w1
   5242c:	b.ne	5221c <aarch64_get_opcode@@Base+0x470c>  // b.any
   52430:	ldr	w2, [sp, #352]
   52434:	mov	x0, x21
   52438:	adrp	x1, 64000 <fields@@Base+0x52d8>
   5243c:	add	x1, x1, #0xdb0
   52440:	blr	x20
   52444:	b	52234 <aarch64_get_opcode@@Base+0x4724>
   52448:	ldr	w3, [sp, #304]
   5244c:	adrp	x0, 58000 <xexit@@Base+0xe08>
   52450:	adrp	x1, 64000 <fields@@Base+0x52d8>
   52454:	add	x2, x0, #0x330
   52458:	add	x1, x1, #0xb20
   5245c:	mov	x0, x21
   52460:	blr	x20
   52464:	b	5218c <aarch64_get_opcode@@Base+0x467c>
   52468:	ldr	x0, [sp, #264]
   5246c:	str	x0, [sp, #104]
   52470:	b	52304 <aarch64_get_opcode@@Base+0x47f4>
   52474:	ldr	x0, [sp, #280]
   52478:	cbz	x0, 524a0 <aarch64_get_opcode@@Base+0x4990>
   5247c:	ldr	w3, [sp, #244]
   52480:	adrp	x0, 58000 <xexit@@Base+0xe08>
   52484:	adrp	x1, 64000 <fields@@Base+0x52d8>
   52488:	add	x2, x0, #0x330
   5248c:	add	x1, x1, #0xe58
   52490:	mov	x0, x21
   52494:	blr	x20
   52498:	ldr	x0, [sp, #288]
   5249c:	b	52148 <aarch64_get_opcode@@Base+0x4638>
   524a0:	ldr	w3, [sp, #244]
   524a4:	adrp	x0, 64000 <fields@@Base+0x52d8>
   524a8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   524ac:	add	x2, x0, #0x930
   524b0:	add	x1, x1, #0xe58
   524b4:	mov	x0, x21
   524b8:	blr	x20
   524bc:	ldr	x0, [sp, #376]
   524c0:	b	52148 <aarch64_get_opcode@@Base+0x4638>
   524c4:	ldr	x2, [sp, #424]
   524c8:	ldr	w0, [sp, #116]
   524cc:	cmp	x2, #0xf
   524d0:	csinc	w0, w0, wzr, ne  // ne = any
   524d4:	str	w0, [sp, #116]
   524d8:	b	52390 <aarch64_get_opcode@@Base+0x4880>
   524dc:	ldr	x2, [sp, #424]
   524e0:	mov	x0, x21
   524e4:	adrp	x1, 64000 <fields@@Base+0x52d8>
   524e8:	add	x1, x1, #0x8e8
   524ec:	add	x23, x26, #0x1
   524f0:	blr	x20
   524f4:	ldr	x0, [sp, #424]
   524f8:	str	x0, [sp, #104]
   524fc:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   52500:	ldr	x2, [sp, #424]
   52504:	mov	x0, x21
   52508:	adrp	x1, 64000 <fields@@Base+0x52d8>
   5250c:	add	x1, x1, #0xdf8
   52510:	and	x2, x2, #0xf
   52514:	blr	x20
   52518:	ldr	x0, [sp, #424]
   5251c:	add	x23, x26, #0x1
   52520:	str	x0, [sp, #104]
   52524:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   52528:	ldr	x2, [sp, #424]
   5252c:	add	x2, x2, #0x1
   52530:	str	x2, [sp, #424]
   52534:	b	52390 <aarch64_get_opcode@@Base+0x4880>
   52538:	ldr	x0, [sp, #248]
   5253c:	str	x2, [sp, #248]
   52540:	mov	x26, x23
   52544:	cmp	x2, x0
   52548:	add	x0, x23, #0x1
   5254c:	mov	x23, x0
   52550:	b.ne	523a8 <aarch64_get_opcode@@Base+0x4898>  // b.any
   52554:	mov	w0, #0x1                   	// #1
   52558:	str	w0, [sp, #116]
   5255c:	b	523a8 <aarch64_get_opcode@@Base+0x4898>
   52560:	ldr	x0, [sp, #328]
   52564:	add	x1, x26, #0x2
   52568:	cmp	x0, x2
   5256c:	ldrb	w0, [x26, #2]
   52570:	mov	x26, x23
   52574:	b.eq	52598 <aarch64_get_opcode@@Base+0x4a88>  // b.none
   52578:	mov	x23, x1
   5257c:	str	x2, [sp, #328]
   52580:	b	523a0 <aarch64_get_opcode@@Base+0x4890>
   52584:	mov	x0, x21
   52588:	adrp	x1, 64000 <fields@@Base+0x52d8>
   5258c:	add	x1, x1, #0xde0
   52590:	blr	x20
   52594:	b	51a74 <aarch64_get_opcode@@Base+0x3f64>
   52598:	mov	w3, #0x1                   	// #1
   5259c:	mov	x23, x1
   525a0:	str	w3, [sp, #116]
   525a4:	b	523a0 <aarch64_get_opcode@@Base+0x4890>
   525a8:	stp	x29, x30, [sp, #-32]!
   525ac:	mov	x5, x1
   525b0:	mov	w3, #0x2                   	// #2
   525b4:	mov	x29, sp
   525b8:	ldr	x1, [x1, #48]
   525bc:	str	w3, [sp, #28]
   525c0:	mov	x8, x0
   525c4:	mov	x11, x2
   525c8:	cbz	x1, 52618 <aarch64_get_opcode@@Base+0x4b08>
   525cc:	ldr	w0, [x1, #32]
   525d0:	tbnz	w0, #4, 52618 <aarch64_get_opcode@@Base+0x4b08>
   525d4:	ldr	x12, [x5, #96]
   525d8:	cbz	x12, 52624 <aarch64_get_opcode@@Base+0x4b14>
   525dc:	ldr	x0, [x5, #72]
   525e0:	mov	w7, #0x0                   	// #0
   525e4:	ldr	x4, [x0]
   525e8:	ldr	w3, [x4, #24]
   525ec:	and	w2, w3, #0x200000
   525f0:	tbnz	w3, #21, 5260c <aarch64_get_opcode@@Base+0x4afc>
   525f4:	ldr	x3, [x4]
   525f8:	mov	w7, w2
   525fc:	ldr	x2, [x3, #8]
   52600:	ldr	w2, [x2, #8]
   52604:	cmp	w2, #0x5
   52608:	b.eq	52634 <aarch64_get_opcode@@Base+0x4b24>  // b.none
   5260c:	mov	w0, w7
   52610:	ldp	x29, x30, [sp], #32
   52614:	ret
   52618:	ldr	x12, [x5, #96]
   5261c:	str	wzr, [sp, #28]
   52620:	cbnz	x12, 525dc <aarch64_get_opcode@@Base+0x4acc>
   52624:	mov	w7, #0x0                   	// #0
   52628:	mov	w0, w7
   5262c:	ldp	x29, x30, [sp], #32
   52630:	ret
   52634:	ldp	w7, w2, [x5, #80]
   52638:	cbz	w2, 52774 <aarch64_get_opcode@@Base+0x4c64>
   5263c:	ldr	x3, [x12, #40]
   52640:	add	w6, w7, #0x1
   52644:	cmp	x3, x8
   52648:	b.cc	527c4 <aarch64_get_opcode@@Base+0x4cb4>  // b.lo, b.ul, b.last
   5264c:	mov	w3, #0xffffffff            	// #-1
   52650:	str	w3, [x12, #28]
   52654:	cmp	w2, w6
   52658:	mov	w18, #0x0                   	// #0
   5265c:	b.le	52804 <aarch64_get_opcode@@Base+0x4cf4>
   52660:	sbfiz	x9, x6, #3, #32
   52664:	add	x14, sp, #0x1c
   52668:	mov	w7, #0x0                   	// #0
   5266c:	mov	w13, #0xffffffff            	// #-1
   52670:	mov	w15, #0x1                   	// #1
   52674:	b	5269c <aarch64_get_opcode@@Base+0x4b8c>
   52678:	bl	506b0 <aarch64_get_opcode@@Base+0x2ba0>
   5267c:	cmp	w0, #0x0
   52680:	ldr	w1, [x5, #84]
   52684:	csel	w13, w13, w6, eq  // eq = none
   52688:	add	w6, w6, #0x1
   5268c:	csel	w7, w7, w15, eq  // eq = none
   52690:	cmp	w6, w1
   52694:	b.ge	526c8 <aarch64_get_opcode@@Base+0x4bb8>  // b.tcont
   52698:	ldr	x0, [x5, #72]
   5269c:	mov	w1, w6
   526a0:	ldr	x3, [x0, x9]
   526a4:	mov	x2, x14
   526a8:	mov	x0, x5
   526ac:	add	x9, x9, #0x8
   526b0:	ldr	x10, [x3, #32]
   526b4:	ldr	x4, [x3, #16]
   526b8:	ldr	x3, [x10, #40]
   526bc:	add	x3, x3, x4
   526c0:	cmp	x8, x3
   526c4:	b.cs	52678 <aarch64_get_opcode@@Base+0x4b68>  // b.hs, b.nlast
   526c8:	cbnz	w7, 52754 <aarch64_get_opcode@@Base+0x4c44>
   526cc:	ldr	w0, [x5, #80]
   526d0:	ldr	w3, [x12, #28]
   526d4:	ldr	x1, [x5, #48]
   526d8:	cmp	w3, w0
   526dc:	cset	w2, le
   526e0:	tst	w2, w18
   526e4:	csel	w7, w3, w0, ne  // ne = any
   526e8:	mov	x9, #0x0                   	// #0
   526ec:	cbz	x1, 526f4 <aarch64_get_opcode@@Base+0x4be4>
   526f0:	ldr	x9, [x1, #40]
   526f4:	sbfiz	x6, x7, #3, #32
   526f8:	add	x10, sp, #0x1c
   526fc:	tbz	w7, #31, 52718 <aarch64_get_opcode@@Base+0x4c08>
   52700:	b	52810 <aarch64_get_opcode@@Base+0x4d00>
   52704:	bl	506b0 <aarch64_get_opcode@@Base+0x2ba0>
   52708:	cbnz	w0, 527f4 <aarch64_get_opcode@@Base+0x4ce4>
   5270c:	sub	w7, w7, #0x1
   52710:	cmn	w7, #0x1
   52714:	b.eq	52748 <aarch64_get_opcode@@Base+0x4c38>  // b.none
   52718:	ldr	x3, [x5, #72]
   5271c:	mov	w1, w7
   52720:	mov	x2, x10
   52724:	mov	x0, x5
   52728:	ldr	x3, [x3, x6]
   5272c:	sub	x6, x6, #0x8
   52730:	ldr	x8, [x3, #32]
   52734:	ldr	x4, [x3, #16]
   52738:	ldr	x3, [x8, #40]
   5273c:	add	x3, x3, x4
   52740:	cmp	x3, x9
   52744:	b.cs	52704 <aarch64_get_opcode@@Base+0x4bf4>  // b.hs, b.nlast
   52748:	ldr	w7, [x5, #80]
   5274c:	tbz	w7, #31, 5277c <aarch64_get_opcode@@Base+0x4c6c>
   52750:	mov	w7, #0x0                   	// #0
   52754:	ldr	w0, [sp, #28]
   52758:	ldr	x1, [x5, #240]
   5275c:	stp	w0, w13, [x12, #24]
   52760:	str	x1, [x12, #32]
   52764:	str	w0, [x11]
   52768:	mov	w0, w7
   5276c:	ldp	x29, x30, [sp], #32
   52770:	ret
   52774:	mov	w13, #0xffffffff            	// #-1
   52778:	tbnz	w7, #31, 52750 <aarch64_get_opcode@@Base+0x4c40>
   5277c:	ldr	x1, [x5, #48]
   52780:	ldr	x0, [x5, #72]
   52784:	ldr	x0, [x0, w7, sxtw #3]
   52788:	cbz	x1, 52798 <aarch64_get_opcode@@Base+0x4c88>
   5278c:	ldr	x2, [x0, #32]
   52790:	cmp	x1, x2
   52794:	b.ne	52750 <aarch64_get_opcode@@Base+0x4c40>  // b.any
   52798:	ldrb	w1, [x0, #72]
   5279c:	and	w1, w1, #0x7
   527a0:	cmp	w1, #0x2
   527a4:	b.ne	52750 <aarch64_get_opcode@@Base+0x4c40>  // b.any
   527a8:	ldrb	w0, [x0, #74]
   527ac:	mov	w13, w7
   527b0:	mov	w7, #0x1                   	// #1
   527b4:	and	w0, w0, #0x3
   527b8:	cmp	w0, w7
   527bc:	cset	w0, eq  // eq = none
   527c0:	b	52758 <aarch64_get_opcode@@Base+0x4c48>
   527c4:	ldr	w3, [x12, #28]
   527c8:	tbnz	w3, #31, 52654 <aarch64_get_opcode@@Base+0x4b44>
   527cc:	ldr	x4, [x12, #32]
   527d0:	ldr	x9, [x5, #240]
   527d4:	cmp	x9, x4
   527d8:	b.ne	52654 <aarch64_get_opcode@@Base+0x4b44>  // b.any
   527dc:	cmp	w6, w3
   527e0:	csel	w6, w6, w3, le
   527e4:	cmp	w2, w6
   527e8:	b.le	5281c <aarch64_get_opcode@@Base+0x4d0c>
   527ec:	mov	w18, #0x1                   	// #1
   527f0:	b	52660 <aarch64_get_opcode@@Base+0x4b50>
   527f4:	mov	w13, w7
   527f8:	ldr	w0, [sp, #28]
   527fc:	mov	w7, #0x1                   	// #1
   52800:	b	52758 <aarch64_get_opcode@@Base+0x4c48>
   52804:	mov	w0, w7
   52808:	mov	w13, #0xffffffff            	// #-1
   5280c:	b	526e8 <aarch64_get_opcode@@Base+0x4bd8>
   52810:	mov	w7, w0
   52814:	tbnz	w7, #31, 52750 <aarch64_get_opcode@@Base+0x4c40>
   52818:	b	5277c <aarch64_get_opcode@@Base+0x4c6c>
   5281c:	mov	w0, w7
   52820:	mov	w18, #0x1                   	// #1
   52824:	mov	w13, #0xffffffff            	// #-1
   52828:	b	526d8 <aarch64_get_opcode@@Base+0x4bc8>
   5282c:	nop
   52830:	stp	x29, x30, [sp, #-160]!
   52834:	mov	x29, sp
   52838:	stp	x19, x20, [sp, #16]
   5283c:	ldr	x19, [x1, #224]
   52840:	stp	x21, x22, [sp, #32]
   52844:	mov	x22, x0
   52848:	stp	x23, x24, [sp, #48]
   5284c:	stp	x25, x26, [sp, #64]
   52850:	mov	w25, w2
   52854:	stp	x27, x28, [sp, #80]
   52858:	mov	x28, x1
   5285c:	strh	wzr, [x1, #196]
   52860:	strb	wzr, [x1, #198]
   52864:	str	wzr, [x1, #200]
   52868:	stp	xzr, xzr, [x1, #208]
   5286c:	cbz	x19, 52954 <aarch64_get_opcode@@Base+0x4e44>
   52870:	adrp	x24, 64000 <fields@@Base+0x52d8>
   52874:	add	x24, x24, #0xe78
   52878:	adrp	x23, 64000 <fields@@Base+0x52d8>
   5287c:	adrp	x21, 64000 <fields@@Base+0x52d8>
   52880:	add	x23, x23, #0xe88
   52884:	add	x21, x21, #0xe98
   52888:	mov	x1, x24
   5288c:	mov	x0, x19
   52890:	mov	x2, #0xa                   	// #10
   52894:	bl	35440 <strncmp@plt>
   52898:	cbz	w0, 528e8 <aarch64_get_opcode@@Base+0x4dd8>
   5289c:	nop
   528a0:	mov	x1, x23
   528a4:	mov	x0, x19
   528a8:	mov	x2, #0xb                   	// #11
   528ac:	bl	35440 <strncmp@plt>
   528b0:	cbnz	w0, 52a4c <aarch64_get_opcode@@Base+0x4f3c>
   528b4:	adrp	x0, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   528b8:	mov	w1, #0x1                   	// #1
   528bc:	str	w1, [x0, #1088]
   528c0:	mov	x0, x19
   528c4:	mov	w1, #0x2c                  	// #44
   528c8:	bl	35840 <strchr@plt>
   528cc:	cbz	x0, 52950 <aarch64_get_opcode@@Base+0x4e40>
   528d0:	add	x19, x0, #0x1
   528d4:	mov	x1, x24
   528d8:	mov	x0, x19
   528dc:	mov	x2, #0xa                   	// #10
   528e0:	bl	35440 <strncmp@plt>
   528e4:	cbnz	w0, 528a0 <aarch64_get_opcode@@Base+0x4d90>
   528e8:	adrp	x20, 8d000 <aarch64_operands@@Base+0x1bc0>
   528ec:	add	x20, x20, #0xb70
   528f0:	adrp	x1, 64000 <fields@@Base+0x52d8>
   528f4:	add	x20, x20, #0xf00
   528f8:	add	x1, x1, #0xe68
   528fc:	mov	w26, #0x0                   	// #0
   52900:	b	52908 <aarch64_get_opcode@@Base+0x4df8>
   52904:	ldr	x1, [x20], #144
   52908:	mov	x0, x19
   5290c:	bl	35970 <disassembler_options_cmp@plt>
   52910:	cbz	w0, 52cfc <aarch64_get_opcode@@Base+0x51ec>
   52914:	add	w26, w26, #0x1
   52918:	cmp	w26, #0x8
   5291c:	b.ne	52904 <aarch64_get_opcode@@Base+0x4df4>  // b.any
   52920:	mov	w2, #0x5                   	// #5
   52924:	adrp	x1, 64000 <fields@@Base+0x52d8>
   52928:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   5292c:	add	x1, x1, #0xea8
   52930:	add	x0, x0, #0x250
   52934:	bl	359e0 <dcgettext@plt>
   52938:	mov	x1, x19
   5293c:	bl	35a10 <_bfd_error_handler@plt>
   52940:	mov	x0, x19
   52944:	mov	w1, #0x2c                  	// #44
   52948:	bl	35840 <strchr@plt>
   5294c:	cbnz	x0, 528d0 <aarch64_get_opcode@@Base+0x4dc0>
   52950:	str	xzr, [x28, #224]
   52954:	ldr	x23, [x28, #96]
   52958:	cbz	x23, 52d08 <aarch64_get_opcode@@Base+0x51f8>
   5295c:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   52960:	add	x0, x24, #0x408
   52964:	ldr	w26, [x0, #56]
   52968:	ldr	w21, [x28, #84]
   5296c:	and	w20, w25, #0x1
   52970:	ldr	w0, [x28, #44]
   52974:	cmp	w0, #0x1
   52978:	csinc	w20, w20, wzr, ne  // ne = any
   5297c:	cbnz	w21, 52a90 <aarch64_get_opcode@@Base+0x4f80>
   52980:	mov	w0, #0x0                   	// #0
   52984:	mov	w2, #0x0                   	// #0
   52988:	mov	w19, #0x4                   	// #4
   5298c:	ldr	x1, [x28, #56]
   52990:	cbz	x1, 529d0 <aarch64_get_opcode@@Base+0x4ec0>
   52994:	ldr	x1, [x1]
   52998:	ldr	w4, [x1, #24]
   5299c:	tbnz	w4, #21, 529d0 <aarch64_get_opcode@@Base+0x4ec0>
   529a0:	ldr	x4, [x1]
   529a4:	ldr	x4, [x4, #8]
   529a8:	ldr	w4, [x4, #8]
   529ac:	cmp	w4, #0x2
   529b0:	b.eq	52e60 <aarch64_get_opcode@@Base+0x5350>  // b.none
   529b4:	cmp	w0, #0x0
   529b8:	ccmp	w4, #0x5, #0x0, eq  // eq = none
   529bc:	b.eq	52fa8 <aarch64_get_opcode@@Base+0x5498>  // b.none
   529c0:	cmp	w4, #0x11
   529c4:	b.ne	529d0 <aarch64_get_opcode@@Base+0x4ec0>  // b.any
   529c8:	ldrh	w21, [x1, #50]
   529cc:	and	w21, w21, #0x8
   529d0:	cmp	w26, #0x0
   529d4:	csinc	w21, w21, wzr, eq  // eq = none
   529d8:	ldr	x4, [x28, #104]
   529dc:	cbz	w2, 52ac8 <aarch64_get_opcode@@Base+0x4fb8>
   529e0:	ldr	x0, [x28, #88]
   529e4:	mov	w1, #0x4                   	// #4
   529e8:	str	w1, [x28, #168]
   529ec:	str	w25, [x28, #176]
   529f0:	and	x27, x0, #0x40000000
   529f4:	tbnz	w0, #30, 52ad4 <aarch64_get_opcode@@Base+0x4fc4>
   529f8:	str	w19, [x28, #172]
   529fc:	add	x20, sp, #0x98
   52a00:	mov	x1, x20
   52a04:	mov	x3, x28
   52a08:	mov	w2, w19
   52a0c:	mov	x0, x22
   52a10:	blr	x4
   52a14:	str	w0, [sp, #120]
   52a18:	cbz	w25, 52db4 <aarch64_get_opcode@@Base+0x52a4>
   52a1c:	subs	w0, w19, #0x1
   52a20:	b.mi	52a3c <aarch64_get_opcode@@Base+0x4f2c>  // b.first
   52a24:	add	x1, x20, w0, sxtw
   52a28:	ldrb	w2, [x1], #-1
   52a2c:	sub	w0, w0, #0x1
   52a30:	cmn	w0, #0x1
   52a34:	orr	x27, x2, x27, lsl #8
   52a38:	b.ne	52a28 <aarch64_get_opcode@@Base+0x4f18>  // b.any
   52a3c:	adrp	x26, 50000 <aarch64_get_opcode@@Base+0x24f0>
   52a40:	add	x0, x26, #0x750
   52a44:	str	x0, [sp, #104]
   52a48:	b	52b10 <aarch64_get_opcode@@Base+0x5000>
   52a4c:	mov	x1, x21
   52a50:	mov	x0, x19
   52a54:	mov	x2, #0xe                   	// #14
   52a58:	bl	35440 <strncmp@plt>
   52a5c:	cbnz	w0, 52a6c <aarch64_get_opcode@@Base+0x4f5c>
   52a60:	adrp	x0, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   52a64:	str	wzr, [x0, #1088]
   52a68:	b	528c0 <aarch64_get_opcode@@Base+0x4db0>
   52a6c:	mov	w2, #0x5                   	// #5
   52a70:	adrp	x1, 58000 <xexit@@Base+0xe08>
   52a74:	adrp	x0, 57000 <floatformat_from_double@@Base+0x210>
   52a78:	add	x1, x1, #0x198
   52a7c:	add	x0, x0, #0x250
   52a80:	bl	359e0 <dcgettext@plt>
   52a84:	mov	x1, x19
   52a88:	bl	35a10 <_bfd_error_handler@plt>
   52a8c:	b	528c0 <aarch64_get_opcode@@Base+0x4db0>
   52a90:	ldr	x0, [x28, #72]
   52a94:	ldr	x0, [x0]
   52a98:	ldr	w1, [x0, #24]
   52a9c:	tbnz	w1, #21, 52ab4 <aarch64_get_opcode@@Base+0x4fa4>
   52aa0:	ldr	x0, [x0]
   52aa4:	ldr	x0, [x0, #8]
   52aa8:	ldr	w0, [x0, #8]
   52aac:	cmp	w0, #0x5
   52ab0:	b.eq	52ecc <aarch64_get_opcode@@Base+0x53bc>  // b.none
   52ab4:	mov	w0, #0x0                   	// #0
   52ab8:	mov	w19, #0x4                   	// #4
   52abc:	mov	w2, #0x0                   	// #0
   52ac0:	mov	w21, #0x0                   	// #0
   52ac4:	b	5298c <aarch64_get_opcode@@Base+0x4e7c>
   52ac8:	mov	w0, #0x4                   	// #4
   52acc:	str	w0, [x28, #168]
   52ad0:	str	w20, [x28, #176]
   52ad4:	cbnz	w21, 52b70 <aarch64_get_opcode@@Base+0x5060>
   52ad8:	mov	w19, #0x4                   	// #4
   52adc:	str	w19, [x28, #172]
   52ae0:	mov	w2, w19
   52ae4:	mov	x3, x28
   52ae8:	add	x1, sp, #0x98
   52aec:	mov	x0, x22
   52af0:	blr	x4
   52af4:	str	w0, [sp, #120]
   52af8:	cbnz	w20, 52d88 <aarch64_get_opcode@@Base+0x5278>
   52afc:	ldr	w6, [sp, #152]
   52b00:	adrp	x26, 51000 <aarch64_get_opcode@@Base+0x34f0>
   52b04:	add	x0, x26, #0x718
   52b08:	str	x0, [sp, #104]
   52b0c:	rev	w27, w6
   52b10:	ldr	w0, [sp, #120]
   52b14:	cbnz	w0, 53240 <aarch64_get_opcode@@Base+0x5730>
   52b18:	ldr	x0, [x28, #88]
   52b1c:	mov	x2, x27
   52b20:	ldr	x3, [sp, #104]
   52b24:	mov	x1, x28
   52b28:	tst	x0, #0x80000000
   52b2c:	csel	x0, x22, xzr, eq  // eq = none
   52b30:	blr	x3
   52b34:	cbz	w21, 52b50 <aarch64_get_opcode@@Base+0x5040>
   52b38:	add	x0, x24, #0x408
   52b3c:	ldr	x1, [x0, #64]
   52b40:	ldr	w2, [x0, #4]
   52b44:	str	w2, [x24, #1032]
   52b48:	add	x1, x1, w19, uxtw
   52b4c:	str	x1, [x0, #64]
   52b50:	mov	w0, w19
   52b54:	ldp	x19, x20, [sp, #16]
   52b58:	ldp	x21, x22, [sp, #32]
   52b5c:	ldp	x23, x24, [sp, #48]
   52b60:	ldp	x25, x26, [sp, #64]
   52b64:	ldp	x27, x28, [sp, #80]
   52b68:	ldp	x29, x30, [sp], #160
   52b6c:	ret
   52b70:	mov	w2, #0x2                   	// #2
   52b74:	str	w2, [x28, #172]
   52b78:	add	x19, sp, #0x98
   52b7c:	mov	x3, x28
   52b80:	mov	x1, x19
   52b84:	mov	x0, x22
   52b88:	blr	x4
   52b8c:	str	w0, [sp, #120]
   52b90:	cbnz	w20, 52d68 <aarch64_get_opcode@@Base+0x5258>
   52b94:	ldr	w0, [sp, #120]
   52b98:	ldrh	w6, [sp, #152]
   52b9c:	rev16	w6, w6
   52ba0:	and	x27, x6, #0xffff
   52ba4:	cbnz	w0, 52d74 <aarch64_get_opcode@@Base+0x5264>
   52ba8:	and	x0, x27, #0xf800
   52bac:	mov	x1, #0xe800                	// #59392
   52bb0:	cmp	x0, #0xf, lsl #12
   52bb4:	and	x0, x27, x1
   52bb8:	ccmp	x0, x1, #0x4, ne  // ne = any
   52bbc:	b.ne	52f94 <aarch64_get_opcode@@Base+0x5484>  // b.any
   52bc0:	ldr	x4, [x28, #104]
   52bc4:	mov	x1, x19
   52bc8:	mov	x3, x28
   52bcc:	add	x0, x22, #0x2
   52bd0:	mov	w2, #0x2                   	// #2
   52bd4:	adrp	x26, 55000 <aarch64_get_opcode@@Base+0x74f0>
   52bd8:	blr	x4
   52bdc:	str	w0, [sp, #120]
   52be0:	add	x1, x26, #0x2f8
   52be4:	str	x1, [sp, #104]
   52be8:	ldrh	w0, [sp, #152]
   52bec:	lsl	x6, x27, #16
   52bf0:	mov	w19, #0x4                   	// #4
   52bf4:	cbnz	w20, 52c00 <aarch64_get_opcode@@Base+0x50f0>
   52bf8:	rev16	w0, w0
   52bfc:	and	x0, x0, #0xffff
   52c00:	orr	x27, x0, x6
   52c04:	add	x0, x24, #0x408
   52c08:	ldr	x1, [x0, #64]
   52c0c:	cmp	x1, x22
   52c10:	b.eq	52cd0 <aarch64_get_opcode@@Base+0x51c0>  // b.none
   52c14:	add	x1, sp, #0x90
   52c18:	mov	x23, x22
   52c1c:	str	wzr, [x24, #1032]
   52c20:	mov	w25, #0x0                   	// #0
   52c24:	mov	w26, #0x1                   	// #1
   52c28:	str	x22, [x0, #64]
   52c2c:	str	x1, [sp, #112]
   52c30:	add	x1, sp, #0x9c
   52c34:	str	x1, [sp, #128]
   52c38:	str	wzr, [sp, #140]
   52c3c:	nop
   52c40:	cbz	x23, 52ea0 <aarch64_get_opcode@@Base+0x5390>
   52c44:	ldr	x2, [x28, #128]
   52c48:	mov	x1, x28
   52c4c:	mov	x0, x23
   52c50:	blr	x2
   52c54:	cbnz	w0, 52ea0 <aarch64_get_opcode@@Base+0x5390>
   52c58:	ldr	x4, [x28, #104]
   52c5c:	sub	x23, x23, #0x2
   52c60:	ldr	x1, [sp, #112]
   52c64:	mov	x0, x23
   52c68:	mov	x3, x28
   52c6c:	mov	w2, #0x2                   	// #2
   52c70:	blr	x4
   52c74:	cbnz	w0, 52cd0 <aarch64_get_opcode@@Base+0x51c0>
   52c78:	ldrh	w0, [sp, #144]
   52c7c:	cmp	w20, #0x0
   52c80:	rev16	w4, w0
   52c84:	and	w4, w4, #0xffff
   52c88:	csel	w4, w4, w0, eq  // eq = none
   52c8c:	cbz	w25, 52dd8 <aarch64_get_opcode@@Base+0x52c8>
   52c90:	and	w8, w4, #0xf800
   52c94:	mov	w0, #0xe7ff                	// #59391
   52c98:	cmp	w8, w0
   52c9c:	b.hi	52e54 <aarch64_get_opcode@@Base+0x5344>  // b.pmore
   52ca0:	tbnz	w26, #0, 52ea8 <aarch64_get_opcode@@Base+0x5398>
   52ca4:	and	w1, w4, #0xff00
   52ca8:	mov	w0, #0xbf00                	// #48896
   52cac:	cmp	w1, w0
   52cb0:	b.eq	52e04 <aarch64_get_opcode@@Base+0x52f4>  // b.none
   52cb4:	mov	w0, #0x1                   	// #1
   52cb8:	mov	w25, #0x0                   	// #0
   52cbc:	add	w5, w26, #0x2
   52cc0:	orr	w26, w5, #0x1
   52cc4:	cmp	w0, #0x0
   52cc8:	ccmp	w26, #0x7, #0x4, ne  // ne = any
   52ccc:	b.le	52c40 <aarch64_get_opcode@@Base+0x5130>
   52cd0:	ldr	w25, [x24, #1032]
   52cd4:	cbz	w25, 52b10 <aarch64_get_opcode@@Base+0x5000>
   52cd8:	and	w0, w25, #0xf
   52cdc:	cmp	w0, #0x8
   52ce0:	b.eq	52f88 <aarch64_get_opcode@@Base+0x5478>  // b.none
   52ce4:	add	x1, x24, #0x408
   52ce8:	ubfiz	w0, w25, #1, #4
   52cec:	and	w25, w25, #0xe0
   52cf0:	orr	w25, w0, w25
   52cf4:	str	w25, [x1, #4]
   52cf8:	b	52b10 <aarch64_get_opcode@@Base+0x5000>
   52cfc:	adrp	x0, f9000 <aarch64_opcode_table@@Base+0x55a20>
   52d00:	str	w26, [x0, #1616]
   52d04:	b	528c0 <aarch64_get_opcode@@Base+0x4db0>
   52d08:	ldr	x0, [x28, #88]
   52d0c:	tbnz	w0, #29, 52d50 <aarch64_get_opcode@@Base+0x5240>
   52d10:	str	xzr, [x28, #32]
   52d14:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   52d18:	add	x0, x24, #0x408
   52d1c:	mov	x1, #0xffffffffffcfffff    	// #-3145729
   52d20:	mov	x5, #0xffffffffffffffff    	// #-1
   52d24:	ldr	w26, [x0, #56]
   52d28:	add	x2, x24, #0x408
   52d2c:	mov	x4, #0xffffffffffffffff    	// #-1
   52d30:	add	x0, x2, #0x8
   52d34:	str	x0, [x28, #96]
   52d38:	mov	x23, x0
   52d3c:	stp	x5, x1, [x2, #8]
   52d40:	str	x4, [x2, #24]
   52d44:	str	w4, [x2, #36]
   52d48:	stp	xzr, xzr, [x2, #40]
   52d4c:	b	52968 <aarch64_get_opcode@@Base+0x4e58>
   52d50:	ldr	x1, [x28, #32]
   52d54:	cmp	x1, #0x1b
   52d58:	b.hi	52d64 <aarch64_get_opcode@@Base+0x5254>  // b.pmore
   52d5c:	cmp	w1, #0x1b
   52d60:	b.ls	52d9c <aarch64_get_opcode@@Base+0x528c>  // b.plast
   52d64:	bl	35670 <abort@plt>
   52d68:	ldr	w0, [sp, #120]
   52d6c:	ldrh	w27, [sp, #152]
   52d70:	cbz	w0, 52ba8 <aarch64_get_opcode@@Base+0x5098>
   52d74:	adrp	x26, 4e000 <aarch64_get_opcode@@Base+0x4f0>
   52d78:	mov	w19, #0x2                   	// #2
   52d7c:	add	x0, x26, #0x648
   52d80:	str	x0, [sp, #104]
   52d84:	b	52c04 <aarch64_get_opcode@@Base+0x50f4>
   52d88:	adrp	x26, 51000 <aarch64_get_opcode@@Base+0x34f0>
   52d8c:	ldr	w27, [sp, #152]
   52d90:	add	x0, x26, #0x718
   52d94:	str	x0, [sp, #104]
   52d98:	b	52b10 <aarch64_get_opcode@@Base+0x5000>
   52d9c:	adrp	x0, 64000 <fields@@Base+0x52d8>
   52da0:	add	x0, x0, #0x70
   52da4:	ldrh	w0, [x0, w1, uxtw #1]
   52da8:	adr	x2, 52db4 <aarch64_get_opcode@@Base+0x52a4>
   52dac:	add	x0, x2, w0, sxth #2
   52db0:	br	x0
   52db4:	mov	x1, x20
   52db8:	cmp	w19, #0x0
   52dbc:	b.le	52a3c <aarch64_get_opcode@@Base+0x4f2c>
   52dc0:	ldrb	w0, [x1], #1
   52dc4:	add	w25, w25, #0x1
   52dc8:	cmp	w19, w25
   52dcc:	orr	x27, x0, x27, lsl #8
   52dd0:	b.ne	52dc0 <aarch64_get_opcode@@Base+0x52b0>  // b.any
   52dd4:	b	52a3c <aarch64_get_opcode@@Base+0x4f2c>
   52dd8:	and	w2, w4, #0xff00
   52ddc:	mov	w1, #0xbf00                	// #48896
   52de0:	and	w8, w4, #0xf800
   52de4:	cmp	w2, w1
   52de8:	mov	w0, #0x1                   	// #1
   52dec:	b.eq	52e04 <aarch64_get_opcode@@Base+0x52f4>  // b.none
   52df0:	mov	w1, #0xe7ff                	// #59391
   52df4:	cmp	w8, w1
   52df8:	b.ls	52cbc <aarch64_get_opcode@@Base+0x51ac>  // b.plast
   52dfc:	add	w26, w26, #0x1
   52e00:	b	52cc4 <aarch64_get_opcode@@Base+0x51b4>
   52e04:	ands	w25, w4, #0xf
   52e08:	mov	w0, #0x1                   	// #1
   52e0c:	b.eq	52df0 <aarch64_get_opcode@@Base+0x52e0>  // b.none
   52e10:	ldr	x2, [sp, #128]
   52e14:	mov	x1, x28
   52e18:	mov	x0, x23
   52e1c:	str	w4, [sp, #124]
   52e20:	str	w8, [sp, #136]
   52e24:	str	wzr, [sp, #156]
   52e28:	bl	525a8 <aarch64_get_opcode@@Base+0x4a98>
   52e2c:	ldr	w4, [sp, #124]
   52e30:	ldr	w8, [sp, #136]
   52e34:	cbz	w0, 52e90 <aarch64_get_opcode@@Base+0x5380>
   52e38:	ldr	w0, [sp, #156]
   52e3c:	mov	w25, #0x0                   	// #0
   52e40:	cmp	w0, #0x1
   52e44:	b.eq	52e90 <aarch64_get_opcode@@Base+0x5380>  // b.none
   52e48:	cmp	w25, #0x0
   52e4c:	cset	w0, eq  // eq = none
   52e50:	b	52df0 <aarch64_get_opcode@@Base+0x52e0>
   52e54:	add	w26, w26, #0x1
   52e58:	mov	w0, #0x0                   	// #0
   52e5c:	b	52cc4 <aarch64_get_opcode@@Base+0x51b4>
   52e60:	ldr	x0, [x1, #48]
   52e64:	mov	w5, #0x86                  	// #134
   52e68:	ldrb	w0, [x0, #40]
   52e6c:	add	w4, w0, #0x7e
   52e70:	add	w1, w0, #0x6a
   52e74:	and	w4, w4, #0xff
   52e78:	and	w1, w1, #0xff
   52e7c:	cmp	w4, #0x1
   52e80:	ccmp	w1, #0x1, #0x0, hi  // hi = pmore
   52e84:	ccmp	w0, w5, #0x4, hi  // hi = pmore
   52e88:	cset	w21, eq  // eq = none
   52e8c:	b	529d0 <aarch64_get_opcode@@Base+0x4ec0>
   52e90:	asr	w0, w26, #1
   52e94:	mov	w25, w4
   52e98:	str	w0, [sp, #140]
   52e9c:	b	52e48 <aarch64_get_opcode@@Base+0x5338>
   52ea0:	cbz	w25, 52cd0 <aarch64_get_opcode@@Base+0x51c0>
   52ea4:	tbz	w26, #0, 52cd0 <aarch64_get_opcode@@Base+0x51c0>
   52ea8:	ldrb	w0, [sp, #140]
   52eac:	lsl	w0, w25, w0
   52eb0:	and	w25, w25, #0xe0
   52eb4:	and	w0, w0, #0x1f
   52eb8:	orr	w25, w0, w25
   52ebc:	ands	w0, w0, #0xf
   52ec0:	b.eq	53238 <aarch64_get_opcode@@Base+0x5728>  // b.none
   52ec4:	str	w25, [x24, #1032]
   52ec8:	b	52cdc <aarch64_get_opcode@@Base+0x51cc>
   52ecc:	add	x2, sp, #0x9c
   52ed0:	mov	x1, x28
   52ed4:	mov	x0, x22
   52ed8:	str	wzr, [sp, #156]
   52edc:	bl	525a8 <aarch64_get_opcode@@Base+0x4a98>
   52ee0:	mov	w19, #0x4                   	// #4
   52ee4:	ldr	w1, [x23, #24]
   52ee8:	cmp	w1, #0x1
   52eec:	cset	w21, eq  // eq = none
   52ef0:	cmp	w1, #0x2
   52ef4:	cset	w2, eq  // eq = none
   52ef8:	b.ne	5298c <aarch64_get_opcode@@Base+0x4e7c>  // b.any
   52efc:	ldr	w1, [x23, #28]
   52f00:	and	w4, w22, #0x3
   52f04:	ldr	w7, [x28, #84]
   52f08:	sub	w19, w19, w4
   52f0c:	add	w1, w1, #0x1
   52f10:	mov	w9, w22
   52f14:	cmp	w7, w1
   52f18:	b.le	52f70 <aarch64_get_opcode@@Base+0x5460>
   52f1c:	sxtw	x1, w1
   52f20:	ldr	x8, [x28, #72]
   52f24:	b	52f34 <aarch64_get_opcode@@Base+0x5424>
   52f28:	add	x1, x1, #0x1
   52f2c:	cmp	w7, w1
   52f30:	b.le	52f70 <aarch64_get_opcode@@Base+0x5460>
   52f34:	ldr	x4, [x8, x1, lsl #3]
   52f38:	ldr	x5, [x4, #32]
   52f3c:	ldr	x4, [x4, #16]
   52f40:	ldr	x6, [x5, #40]
   52f44:	add	x4, x4, x6
   52f48:	cmp	x22, x4
   52f4c:	b.cs	52f28 <aarch64_get_opcode@@Base+0x5418>  // b.hs, b.nlast
   52f50:	ldr	x6, [x28, #48]
   52f54:	cmp	x6, #0x0
   52f58:	ccmp	x6, x5, #0x4, ne  // ne = any
   52f5c:	b.ne	52f28 <aarch64_get_opcode@@Base+0x5418>  // b.any
   52f60:	sub	x1, x4, x22
   52f64:	sub	w4, w4, w9
   52f68:	cmp	x1, w19, uxtw
   52f6c:	csel	w19, w4, w19, cc  // cc = lo, ul, last
   52f70:	and	x1, x22, #0x1
   52f74:	cmp	w19, #0x3
   52f78:	mov	x4, #0x2                   	// #2
   52f7c:	sub	x1, x4, x1
   52f80:	csel	w19, w19, w1, ne  // ne = any
   52f84:	b	5298c <aarch64_get_opcode@@Base+0x4e7c>
   52f88:	add	x0, x24, #0x408
   52f8c:	str	wzr, [x0, #4]
   52f90:	b	52b10 <aarch64_get_opcode@@Base+0x5000>
   52f94:	adrp	x26, 4e000 <aarch64_get_opcode@@Base+0x4f0>
   52f98:	mov	w19, #0x2                   	// #2
   52f9c:	add	x0, x26, #0x648
   52fa0:	str	x0, [sp, #104]
   52fa4:	b	52c04 <aarch64_get_opcode@@Base+0x50f4>
   52fa8:	ldrb	w4, [x1, #74]
   52fac:	ldrb	w0, [x1, #72]
   52fb0:	and	w1, w4, #0x3
   52fb4:	cmp	w1, #0x1
   52fb8:	and	w0, w0, #0xf
   52fbc:	ccmp	w0, #0xf, #0x4, ne  // ne = any
   52fc0:	cset	w21, eq  // eq = none
   52fc4:	b	529d0 <aarch64_get_opcode@@Base+0x4ec0>
   52fc8:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   52fcc:	add	x0, x24, #0x408
   52fd0:	mov	x5, #0x7ff                 	// #2047
   52fd4:	mov	x1, #0x0                   	// #0
   52fd8:	movk	x5, #0x2000, lsl #16
   52fdc:	ldr	w26, [x0, #56]
   52fe0:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   52fe4:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   52fe8:	add	x0, x24, #0x408
   52fec:	mov	x5, #0x7f                  	// #127
   52ff0:	mov	x1, #0x0                   	// #0
   52ff4:	movk	x5, #0x2000, lsl #16
   52ff8:	ldr	w26, [x0, #56]
   52ffc:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   53000:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   53004:	add	x0, x24, #0x408
   53008:	mov	w5, #0xff1dffff            	// #-14811137
   5300c:	ldr	w26, [x0, #56]
   53010:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   53014:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   53018:	add	x0, x24, #0x408
   5301c:	mov	x1, #0x7fbb                	// #32699
   53020:	mov	w5, #0xff1dffff            	// #-14811137
   53024:	movk	x1, #0xb, lsl #16
   53028:	ldr	w26, [x0, #56]
   5302c:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   53030:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   53034:	add	x0, x24, #0x408
   53038:	mov	x5, #0xb7c0                	// #47040
   5303c:	mov	x1, #0x10                  	// #16
   53040:	movk	x5, #0x27c9, lsl #16
   53044:	ldr	w26, [x0, #56]
   53048:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   5304c:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   53050:	add	x0, x24, #0x408
   53054:	mov	x5, #0x35c0                	// #13760
   53058:	mov	x1, #0x0                   	// #0
   5305c:	movk	x5, #0x2380, lsl #16
   53060:	ldr	w26, [x0, #56]
   53064:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   53068:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   5306c:	add	x0, x24, #0x408
   53070:	mov	x5, #0x35c0                	// #13760
   53074:	mov	x1, #0x0                   	// #0
   53078:	movk	x5, #0x380, lsl #16
   5307c:	ldr	w26, [x0, #56]
   53080:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   53084:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   53088:	add	x0, x24, #0x408
   5308c:	mov	x5, #0xbfff                	// #49151
   53090:	mov	x1, #0x10                  	// #16
   53094:	movk	x5, #0xff1d, lsl #16
   53098:	ldr	w26, [x0, #56]
   5309c:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   530a0:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   530a4:	add	x0, x24, #0x408
   530a8:	mov	x5, #0x3fff                	// #16383
   530ac:	mov	x1, #0x0                   	// #0
   530b0:	movk	x5, #0x2000, lsl #16
   530b4:	ldr	w26, [x0, #56]
   530b8:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   530bc:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   530c0:	add	x0, x24, #0x408
   530c4:	mov	x5, #0xbfff                	// #49151
   530c8:	mov	x1, #0x10                  	// #16
   530cc:	movk	x5, #0x3604, lsl #16
   530d0:	ldr	w26, [x0, #56]
   530d4:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   530d8:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   530dc:	add	x0, x24, #0x408
   530e0:	mov	x5, #0x3fff                	// #16383
   530e4:	mov	x1, #0x0                   	// #0
   530e8:	movk	x5, #0x3000, lsl #16
   530ec:	ldr	w26, [x0, #56]
   530f0:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   530f4:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   530f8:	add	x0, x24, #0x408
   530fc:	mov	x5, #0x1fff                	// #8191
   53100:	mov	x1, #0x0                   	// #0
   53104:	movk	x5, #0x2000, lsl #16
   53108:	ldr	w26, [x0, #56]
   5310c:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   53110:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   53114:	add	x0, x24, #0x408
   53118:	mov	x5, #0xfff                 	// #4095
   5311c:	mov	x1, #0x0                   	// #0
   53120:	movk	x5, #0x2000, lsl #16
   53124:	ldr	w26, [x0, #56]
   53128:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   5312c:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   53130:	add	x0, x24, #0x408
   53134:	mov	x1, #0x0                   	// #0
   53138:	mov	x5, #0x3f                  	// #63
   5313c:	ldr	w26, [x0, #56]
   53140:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   53144:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   53148:	add	x0, x24, #0x408
   5314c:	mov	x5, #0xb5c0                	// #46528
   53150:	mov	x1, #0x5c                  	// #92
   53154:	movk	x5, #0x23c9, lsl #16
   53158:	ldr	w26, [x0, #56]
   5315c:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   53160:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   53164:	add	x0, x24, #0x408
   53168:	mov	x5, #0x35c0                	// #13760
   5316c:	mov	x1, #0x1c                  	// #28
   53170:	movk	x5, #0x2381, lsl #16
   53174:	ldr	w26, [x0, #56]
   53178:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   5317c:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   53180:	add	x0, x24, #0x408
   53184:	mov	x5, #0x1ff                 	// #511
   53188:	mov	x1, #0x0                   	// #0
   5318c:	movk	x5, #0x2000, lsl #16
   53190:	ldr	w26, [x0, #56]
   53194:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   53198:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   5319c:	add	x0, x24, #0x408
   531a0:	mov	x1, #0x0                   	// #0
   531a4:	mov	x5, #0xbf                  	// #191
   531a8:	ldr	w26, [x0, #56]
   531ac:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   531b0:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   531b4:	add	x0, x24, #0x408
   531b8:	mov	x1, #0x0                   	// #0
   531bc:	mov	x5, #0x1f                  	// #31
   531c0:	ldr	w26, [x0, #56]
   531c4:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   531c8:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   531cc:	add	x0, x24, #0x408
   531d0:	mov	x1, #0x0                   	// #0
   531d4:	mov	x5, #0xf                   	// #15
   531d8:	ldr	w26, [x0, #56]
   531dc:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   531e0:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   531e4:	add	x0, x24, #0x408
   531e8:	mov	x1, #0x0                   	// #0
   531ec:	mov	x5, #0x7                   	// #7
   531f0:	ldr	w26, [x0, #56]
   531f4:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   531f8:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   531fc:	add	x0, x24, #0x408
   53200:	mov	x1, #0x0                   	// #0
   53204:	mov	x5, #0x3                   	// #3
   53208:	ldr	w26, [x0, #56]
   5320c:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   53210:	adrp	x24, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   53214:	add	x2, x24, #0x408
   53218:	mov	x1, #0x807c                	// #32892
   5321c:	mov	x5, #0xb5c0                	// #46528
   53220:	mov	w0, #0x1                   	// #1
   53224:	movk	x1, #0x30, lsl #16
   53228:	mov	w26, w0
   5322c:	movk	x5, #0x23c9, lsl #16
   53230:	str	w0, [x2, #56]
   53234:	b	52d28 <aarch64_get_opcode@@Base+0x5218>
   53238:	str	wzr, [x24, #1032]
   5323c:	b	52b10 <aarch64_get_opcode@@Base+0x5000>
   53240:	ldr	x4, [x28, #112]
   53244:	mov	x1, x22
   53248:	mov	x2, x28
   5324c:	blr	x4
   53250:	mov	w0, #0xffffffff            	// #-1
   53254:	b	52b54 <aarch64_get_opcode@@Base+0x5044>
   53258:	sub	sp, sp, #0x250
   5325c:	lsr	x8, x1, #7
   53260:	lsr	x10, x1, #5
   53264:	and	x11, x1, #0xf
   53268:	ubfiz	x6, x8, #3, #1
   5326c:	adrp	x3, 64000 <fields@@Base+0x52d8>
   53270:	stp	x29, x30, [sp]
   53274:	mov	x29, sp
   53278:	ubfiz	x5, x10, #3, #1
   5327c:	add	x13, sp, #0x23c
   53280:	stp	x19, x20, [sp, #16]
   53284:	mov	x19, x1
   53288:	mov	w14, #0x11                  	// #17
   5328c:	stp	x27, x28, [sp, #80]
   53290:	mov	x28, x0
   53294:	lsr	x0, x1, #22
   53298:	ubfx	x12, x19, #17, #3
   5329c:	ubfx	x1, x1, #13, #3
   532a0:	ubfiz	x0, x0, #3, #1
   532a4:	ubfx	x7, x19, #1, #3
   532a8:	orr	x0, x0, x1
   532ac:	orr	x6, x6, x12
   532b0:	cmp	x6, x0
   532b4:	orr	x5, x5, x7
   532b8:	cset	w20, eq  // eq = none
   532bc:	cmp	x5, x0
   532c0:	ubfx	x2, x19, #16, #4
   532c4:	stp	x0, x2, [sp, #136]
   532c8:	csinc	w0, w20, wzr, ne  // ne = any
   532cc:	cmp	x11, #0xd
   532d0:	lsr	x9, x19, #6
   532d4:	str	w0, [sp, #112]
   532d8:	cset	w0, eq  // eq = none
   532dc:	cmp	x2, #0xd
   532e0:	lsr	x27, x19, #9
   532e4:	csinc	w0, w0, wzr, ne  // ne = any
   532e8:	str	w0, [sp, #168]
   532ec:	ubfiz	x0, x9, #3, #1
   532f0:	cmp	x11, #0xf
   532f4:	orr	x0, x0, x7
   532f8:	str	x0, [sp, #192]
   532fc:	and	x0, x10, #0x1
   53300:	str	x0, [sp, #232]
   53304:	ubfx	x0, x19, #20, #1
   53308:	str	x0, [sp, #160]
   5330c:	ubfx	x0, x19, #20, #2
   53310:	str	x0, [sp, #152]
   53314:	ubfx	x0, x19, #20, #3
   53318:	str	x0, [sp, #184]
   5331c:	ubfx	x0, x19, #28, #1
   53320:	str	x0, [sp, #208]
   53324:	ubfx	x0, x19, #12, #4
   53328:	cset	w1, eq  // eq = none
   5332c:	cmp	x2, #0xf
   53330:	str	x0, [sp, #120]
   53334:	lsr	x0, x19, #21
   53338:	csinc	w1, w1, wzr, ne  // ne = any
   5333c:	ubfiz	x27, x27, #1, #3
   53340:	str	x0, [sp, #104]
   53344:	ubfx	x0, x19, #21, #1
   53348:	str	x0, [sp, #128]
   5334c:	ubfx	x0, x19, #12, #1
   53350:	str	w1, [sp, #176]
   53354:	orr	x1, x27, #0x1
   53358:	str	x0, [sp, #200]
   5335c:	mov	x0, #0x1fff                	// #8191
   53360:	str	x1, [sp, #216]
   53364:	mov	x1, #0xf4d                 	// #3917
   53368:	lsr	x15, x19, #16
   5336c:	lsr	x18, x19, #28
   53370:	movk	x1, #0xfe31, lsl #16
   53374:	movk	x0, #0xffbf, lsl #16
   53378:	stp	x21, x22, [sp, #32]
   5337c:	adrp	x21, 96000 <aarch64_operands@@Base+0xabc0>
   53380:	add	x21, x21, #0x240
   53384:	stp	x23, x24, [sp, #48]
   53388:	stp	x25, x26, [sp, #64]
   5338c:	lsr	x25, x19, #12
   53390:	add	x26, x3, #0x150
   53394:	ldp	x23, x24, [x28]
   53398:	b	533ac <aarch64_get_opcode@@Base+0x589c>
   5339c:	ldr	x0, [x21, #104]
   533a0:	add	x21, x21, #0x38
   533a4:	cbz	x0, 54240 <aarch64_get_opcode@@Base+0x6730>
   533a8:	ldp	x1, x0, [x21, #32]
   533ac:	and	x0, x19, x0
   533b0:	cmp	x0, x1
   533b4:	b.ne	5339c <aarch64_get_opcode@@Base+0x588c>  // b.any
   533b8:	ldr	w20, [x21, #24]
   533bc:	mov	x0, x19
   533c0:	mov	w1, w20
   533c4:	bl	4db30 <aarch64_get_opcode@@Base+0x20>
   533c8:	mov	w27, w0
   533cc:	cbnz	w0, 5339c <aarch64_get_opcode@@Base+0x588c>
   533d0:	adrp	x0, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   533d4:	str	w14, [sp, #572]
   533d8:	ldr	w0, [x0, #1032]
   533dc:	cbz	w0, 53774 <aarch64_get_opcode@@Base+0x5c64>
   533e0:	cmp	w20, #0x41
   533e4:	b.hi	53768 <aarch64_get_opcode@@Base+0x5c58>  // b.pmore
   533e8:	cmp	w20, #0x3e
   533ec:	b.hi	53774 <aarch64_get_opcode@@Base+0x5c64>  // b.pmore
   533f0:	cmp	w20, #0x3c
   533f4:	b.eq	542e4 <aarch64_get_opcode@@Base+0x67d4>  // b.none
   533f8:	mov	w22, #0x0                   	// #0
   533fc:	mov	w27, #0x1                   	// #1
   53400:	mov	w1, w20
   53404:	mov	x2, x13
   53408:	mov	x0, x19
   5340c:	bl	4ddb0 <aarch64_get_opcode@@Base+0x2a0>
   53410:	ldr	w1, [x21, #24]
   53414:	cmp	w1, #0x45
   53418:	b.ne	53424 <aarch64_get_opcode@@Base+0x5914>  // b.any
   5341c:	cmp	x12, x7
   53420:	b.eq	5339c <aarch64_get_opcode@@Base+0x588c>  // b.none
   53424:	ldr	x20, [x21, #48]
   53428:	str	w0, [sp, #160]
   5342c:	ldrb	w0, [x20]
   53430:	str	w0, [sp, #176]
   53434:	cbz	w0, 537b8 <aarch64_get_opcode@@Base+0x5ca8>
   53438:	ubfx	x16, x19, #8, #1
   5343c:	ands	x4, x8, #0x1
   53440:	ubfiz	w18, w18, #7, #1
   53444:	ubfiz	w0, w15, #4, #3
   53448:	add	w3, w16, #0x1
   5344c:	orr	w0, w18, w0
   53450:	and	w1, w19, #0xf
   53454:	mov	w18, #0x40                  	// #64
   53458:	str	x4, [sp, #192]
   5345c:	mov	w4, #0x30                  	// #48
   53460:	csel	w2, w18, w4, eq  // eq = none
   53464:	orr	w30, w0, w1
   53468:	lsl	w3, w3, #3
   5346c:	tst	x19, #0x800000
   53470:	adrp	x5, 58000 <xexit@@Base+0xe08>
   53474:	add	x5, x5, #0x330
   53478:	str	w2, [sp, #272]
   5347c:	adrp	x2, 64000 <fields@@Base+0x52d8>
   53480:	add	x6, x2, #0x930
   53484:	orr	w12, w0, w1
   53488:	csel	x2, x5, x6, ne  // ne = any
   5348c:	mov	x6, #0x1                   	// #1
   53490:	and	x7, x9, #0x3
   53494:	lsl	x6, x6, x3
   53498:	ubfiz	x9, x9, #1, #1
   5349c:	lsl	x3, x30, x3
   534a0:	str	x30, [sp, #120]
   534a4:	ubfx	x30, x19, #4, #1
   534a8:	mov	x0, x12
   534ac:	orr	x9, x9, x30
   534b0:	stp	x2, x9, [sp, #320]
   534b4:	lsl	w26, w12, #24
   534b8:	tst	x0, #0x40
   534bc:	ldr	x2, [sp, #128]
   534c0:	ubfiz	x0, x15, #1, #1
   534c4:	ubfiz	x14, x25, #2, #3
   534c8:	and	x26, x26, #0x80000000
   534cc:	orr	x0, x0, x2
   534d0:	mov	x2, x12
   534d4:	lsr	x1, x19, #27
   534d8:	ubfx	w4, w19, #9, #2
   534dc:	ubfiz	x25, x2, #19, #7
   534e0:	and	x1, x1, #0x2
   534e4:	orr	x25, x26, x25
   534e8:	and	x26, x8, #0x4
   534ec:	orr	x1, x1, x26
   534f0:	lsr	x17, x19, #18
   534f4:	ldr	x26, [sp, #120]
   534f8:	sub	x6, x6, #0x1
   534fc:	lsr	x5, x19, #8
   53500:	lsl	w4, w4, #3
   53504:	ldr	x9, [sp, #192]
   53508:	orr	x3, x6, x3
   5350c:	mov	w13, #0x3c                  	// #60
   53510:	csel	w13, w13, w18, ne  // ne = any
   53514:	ands	w2, w5, #0x8
   53518:	str	x0, [sp, #112]
   5351c:	lsl	x4, x26, x4
   53520:	ubfiz	x30, x17, #1, #2
   53524:	csel	x3, x4, x3, eq  // eq = none
   53528:	str	x3, [sp, #168]
   5352c:	orr	x9, x30, x9
   53530:	str	w2, [sp, #276]
   53534:	ldp	x2, x3, [sp, #104]
   53538:	sbfiz	x13, x13, #24, #32
   5353c:	str	x9, [sp, #352]
   53540:	orr	x13, x13, x25
   53544:	ldr	x9, [sp, #168]
   53548:	orr	w14, w14, w7
   5354c:	str	x13, [sp, #480]
   53550:	orr	x13, x1, x16
   53554:	cmp	w14, #0x0
   53558:	mov	w1, #0x20                  	// #32
   5355c:	str	x13, [sp, #304]
   53560:	and	x13, x9, #0x80000000
   53564:	orr	x9, x9, #0xffffffff00000000
   53568:	str	x13, [sp, #544]
   5356c:	csel	w13, w14, w1, ne  // ne = any
   53570:	and	x1, x10, #0x3
   53574:	and	x5, x10, #0x3
   53578:	lsl	x3, x3, #1
   5357c:	asr	x0, x19, #4
   53580:	str	x9, [sp, #528]
   53584:	and	x9, x15, #0x7
   53588:	ubfx	x4, x19, #7, #1
   5358c:	and	x7, x8, #0x4
   53590:	and	x0, x0, #0x2
   53594:	str	x9, [sp, #216]
   53598:	add	x9, x3, x1, lsr #1
   5359c:	str	x5, [sp, #384]
   535a0:	asr	x5, x19, #16
   535a4:	orr	x0, x0, x4
   535a8:	and	w26, w5, #0x3f
   535ac:	and	x2, x2, #0x2
   535b0:	ubfiz	x6, x19, #1, #1
   535b4:	str	x7, [sp, #376]
   535b8:	asr	x7, x19, #10
   535bc:	str	x9, [sp, #408]
   535c0:	and	w9, w10, #0x1
   535c4:	orr	x6, x6, x4
   535c8:	and	x7, x7, #0x4
   535cc:	and	x17, x17, #0x3
   535d0:	str	x2, [sp, #152]
   535d4:	str	x4, [sp, #184]
   535d8:	ubfx	x4, x19, #13, #3
   535dc:	str	w13, [sp, #260]
   535e0:	ubfx	w11, w19, #9, #1
   535e4:	str	x17, [sp, #368]
   535e8:	adrp	x25, 64000 <fields@@Base+0x52d8>
   535ec:	str	w26, [sp, #432]
   535f0:	adrp	x26, 8d000 <aarch64_operands@@Base+0x1bc0>
   535f4:	add	x2, x26, #0xb70
   535f8:	str	x2, [sp, #312]
   535fc:	str	w9, [sp, #472]
   53600:	orr	x9, x0, #0x4
   53604:	str	w12, [sp, #476]
   53608:	asr	x12, x19, #19
   5360c:	str	x9, [sp, #520]
   53610:	orr	x9, x7, x0
   53614:	orr	x7, x7, x6
   53618:	stp	x7, x9, [sp, #496]
   5361c:	mov	x0, x1
   53620:	ldp	x3, x26, [sp, #112]
   53624:	and	w1, w5, #0x3f
   53628:	sub	w1, w18, w1
   5362c:	and	x12, x12, #0x8
   53630:	str	w1, [sp, #540]
   53634:	add	x1, x2, #0xe70
   53638:	ldr	x2, [sp, #152]
   5363c:	str	x1, [sp, #288]
   53640:	add	x3, x0, x3, lsl #2
   53644:	str	x3, [sp, #336]
   53648:	orr	x3, x12, x4
   5364c:	orr	x0, x0, x2
   53650:	ldr	x4, [sp, #184]
   53654:	str	x0, [sp, #488]
   53658:	ldr	w1, [sp, #104]
   5365c:	lsl	w11, w11, #3
   53660:	orr	x0, x4, #0x2
   53664:	str	x0, [sp, #416]
   53668:	and	w0, w5, #0x20
   5366c:	str	w0, [sp, #536]
   53670:	and	w0, w5, #0x10
   53674:	str	w0, [sp, #436]
   53678:	ubfx	x0, x19, #23, #1
   5367c:	str	x0, [sp, #248]
   53680:	and	x0, x8, #0x3
   53684:	str	x0, [sp, #448]
   53688:	and	x0, x8, #0x7
   5368c:	str	x0, [sp, #280]
   53690:	ubfx	x0, x19, #8, #2
   53694:	str	x0, [sp, #360]
   53698:	and	x0, x19, #0x7f
   5369c:	str	x0, [sp, #240]
   536a0:	ubfiz	x0, x19, #2, #7
   536a4:	str	x0, [sp, #224]
   536a8:	ubfiz	x0, x19, #1, #7
   536ac:	str	x0, [sp, #192]
   536b0:	ubfx	x0, x19, #24, #1
   536b4:	str	x0, [sp, #296]
   536b8:	ubfx	w0, w19, #8, #4
   536bc:	str	w0, [sp, #344]
   536c0:	ldr	x0, [sp, #136]
   536c4:	and	w1, w1, #0x1
   536c8:	str	w1, [sp, #348]
   536cc:	orr	x6, x6, #0x4
   536d0:	add	x1, x0, #0x1
   536d4:	str	x1, [sp, #392]
   536d8:	add	x1, x0, #0x2
   536dc:	add	x0, x0, #0x3
   536e0:	stp	x1, x0, [sp, #456]
   536e4:	ubfiz	x0, x19, #3, #7
   536e8:	add	x25, x25, #0x870
   536ec:	str	x3, [sp, #264]
   536f0:	str	w5, [sp, #400]
   536f4:	str	x0, [sp, #440]
   536f8:	lsl	x0, x26, x11
   536fc:	str	x0, [sp, #424]
   53700:	str	x6, [sp, #512]
   53704:	str	xzr, [sp, #104]
   53708:	ldr	w2, [sp, #176]
   5370c:	b	53730 <aarch64_get_opcode@@Base+0x5c20>
   53710:	mov	x1, x25
   53714:	mov	x0, x24
   53718:	blr	x23
   5371c:	mov	x0, x26
   53720:	mov	x26, x20
   53724:	mov	x20, x0
   53728:	ldrb	w2, [x26, #1]
   5372c:	cbz	w2, 53798 <aarch64_get_opcode@@Base+0x5c88>
   53730:	cmp	w2, #0x25
   53734:	add	x26, x20, #0x1
   53738:	b.ne	53710 <aarch64_get_opcode@@Base+0x5c00>  // b.any
   5373c:	ldrb	w0, [x20, #1]
   53740:	sub	w0, w0, #0x25
   53744:	cmp	w0, #0x52
   53748:	b.ls	53750 <aarch64_get_opcode@@Base+0x5c40>  // b.plast
   5374c:	bl	35670 <abort@plt>
   53750:	adrp	x1, 64000 <fields@@Base+0x52d8>
   53754:	add	x1, x1, #0xa8
   53758:	ldrh	w0, [x1, w0, uxtw #1]
   5375c:	adr	x1, 53768 <aarch64_get_opcode@@Base+0x5c58>
   53760:	add	x0, x1, w0, sxth #2
   53764:	br	x0
   53768:	sub	w0, w20, #0xc2
   5376c:	cmp	w0, #0x10
   53770:	b.hi	533f8 <aarch64_get_opcode@@Base+0x58e8>  // b.pmore
   53774:	sub	w2, w20, #0x2
   53778:	cmp	w2, #0xcf
   5377c:	b.hi	53790 <aarch64_get_opcode@@Base+0x5c80>  // b.pmore
   53780:	ldrh	w0, [x26, w2, uxtw #1]
   53784:	adr	x1, 53790 <aarch64_get_opcode@@Base+0x5c80>
   53788:	add	x0, x1, w0, sxth #2
   5378c:	br	x0
   53790:	mov	w22, #0xc                   	// #12
   53794:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   53798:	ldr	x2, [sp, #104]
   5379c:	add	x0, x2, #0x10
   537a0:	cmp	x0, #0x30
   537a4:	b.ls	537b8 <aarch64_get_opcode@@Base+0x5ca8>  // b.plast
   537a8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   537ac:	mov	x0, x24
   537b0:	add	x1, x1, #0x8f8
   537b4:	blr	x23
   537b8:	cbnz	w27, 53ec8 <aarch64_get_opcode@@Base+0x63b8>
   537bc:	ldr	w0, [sp, #160]
   537c0:	cbnz	w0, 53e90 <aarch64_get_opcode@@Base+0x6380>
   537c4:	adrp	x0, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   537c8:	add	x0, x0, #0x408
   537cc:	add	x2, x0, #0x48
   537d0:	ldr	w1, [x0, #72]
   537d4:	cbnz	w1, 53958 <aarch64_get_opcode@@Base+0x5e48>
   537d8:	adrp	x0, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   537dc:	ldr	w0, [x0, #1032]
   537e0:	cbnz	w0, 53960 <aarch64_get_opcode@@Base+0x5e50>
   537e4:	and	x0, x19, #0x7fe000
   537e8:	and	x0, x0, #0xffffffffffc0ffff
   537ec:	cbz	x0, 53960 <aarch64_get_opcode@@Base+0x5e50>
   537f0:	mov	x0, #0xf50                 	// #3920
   537f4:	mov	x1, #0xf00                 	// #3840
   537f8:	movk	x0, #0xefb1, lsl #16
   537fc:	and	x0, x19, x0
   53800:	movk	x1, #0xee31, lsl #16
   53804:	cmp	x0, x1
   53808:	b.eq	54cfc <aarch64_get_opcode@@Base+0x71ec>  // b.none
   5380c:	mov	x1, #0xf40                 	// #3904
   53810:	movk	x1, #0xee31, lsl #16
   53814:	cmp	x0, x1
   53818:	b.eq	53898 <aarch64_get_opcode@@Base+0x5d88>  // b.none
   5381c:	mov	x0, #0x1f51                	// #8017
   53820:	mov	x1, #0xf00                 	// #3840
   53824:	movk	x0, #0xff81, lsl #16
   53828:	and	x0, x19, x0
   5382c:	movk	x1, #0xfe01, lsl #16
   53830:	cmp	x0, x1
   53834:	b.eq	53898 <aarch64_get_opcode@@Base+0x5d88>  // b.none
   53838:	add	x1, x1, #0x1
   5383c:	cmp	x0, x1
   53840:	b.eq	546c8 <aarch64_get_opcode@@Base+0x6bb8>  // b.none
   53844:	mov	x1, #0x1f10                	// #7952
   53848:	mov	x2, #0x1f00                	// #7936
   5384c:	movk	x1, #0xff81, lsl #16
   53850:	mov	x0, #0x1f50                	// #8016
   53854:	and	x1, x19, x1
   53858:	movk	x2, #0xfe01, lsl #16
   5385c:	movk	x0, #0xff81, lsl #16
   53860:	cmp	x1, x2
   53864:	and	x0, x19, x0
   53868:	b.eq	53898 <aarch64_get_opcode@@Base+0x5d88>  // b.none
   5386c:	mov	x1, #0xf40                 	// #3904
   53870:	movk	x1, #0xfe01, lsl #16
   53874:	cmp	x0, x1
   53878:	b.eq	53898 <aarch64_get_opcode@@Base+0x5d88>  // b.none
   5387c:	mov	x0, #0x1fff                	// #8191
   53880:	mov	x1, #0xf4d                 	// #3917
   53884:	movk	x0, #0xffbf, lsl #16
   53888:	and	x0, x19, x0
   5388c:	movk	x1, #0xfe31, lsl #16
   53890:	cmp	x0, x1
   53894:	b.ne	53960 <aarch64_get_opcode@@Base+0x5e50>  // b.any
   53898:	adrp	x0, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   5389c:	add	x2, x0, #0x408
   538a0:	add	x1, x2, #0x48
   538a4:	asr	x0, x19, #19
   538a8:	and	x0, x0, #0x8
   538ac:	ubfx	x19, x19, #13, #3
   538b0:	orr	x19, x0, x19
   538b4:	mov	x3, #0x100000001           	// #4294967297
   538b8:	stp	x19, xzr, [x1, #8]
   538bc:	str	x3, [x2, #72]
   538c0:	cbz	x19, 538e8 <aarch64_get_opcode@@Base+0x5dd8>
   538c4:	cmp	x19, #0x8
   538c8:	b.eq	54f00 <aarch64_get_opcode@@Base+0x73f0>  // b.none
   538cc:	and	x0, x19, #0x7
   538d0:	cmp	x0, #0x4
   538d4:	b.eq	54f84 <aarch64_get_opcode@@Base+0x7474>  // b.none
   538d8:	and	x0, x19, #0x3
   538dc:	cmp	x0, #0x2
   538e0:	b.eq	54fb4 <aarch64_get_opcode@@Base+0x74a4>  // b.none
   538e4:	tbnz	w19, #0, 54fa8 <aarch64_get_opcode@@Base+0x7498>
   538e8:	adrp	x0, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   538ec:	add	x4, x0, #0x408
   538f0:	adrp	x3, 64000 <fields@@Base+0x52d8>
   538f4:	add	x3, x3, #0x5b0
   538f8:	adrp	x1, 65000 <fields@@Base+0x62d8>
   538fc:	adrp	x0, 65000 <fields@@Base+0x62d8>
   53900:	add	x3, x3, #0x20
   53904:	add	x1, x1, #0x90
   53908:	add	x0, x0, #0x3e0
   5390c:	mov	w2, #0x148f                	// #5263
   53910:	str	xzr, [x4, #96]
   53914:	bl	35ac0 <__assert_fail@plt>
   53918:	mov	x0, x26
   5391c:	add	x3, sp, #0x240
   53920:	add	x2, sp, #0x248
   53924:	mov	x1, x19
   53928:	bl	4e550 <aarch64_get_opcode@@Base+0xa40>
   5392c:	mov	x26, x0
   53930:	ldrb	w0, [x0]
   53934:	sub	w0, w0, #0x41
   53938:	cmp	w0, #0x37
   5393c:	b.hi	5374c <aarch64_get_opcode@@Base+0x5c3c>  // b.pmore
   53940:	adrp	x1, 64000 <fields@@Base+0x52d8>
   53944:	add	x1, x1, #0x2f0
   53948:	ldrh	w0, [x1, w0, uxtw #1]
   5394c:	adr	x1, 53958 <aarch64_get_opcode@@Base+0x5e48>
   53950:	add	x0, x1, w0, sxth #2
   53954:	br	x0
   53958:	cmp	w1, #0x1
   5395c:	b.eq	54030 <aarch64_get_opcode@@Base+0x6520>  // b.none
   53960:	mov	w0, #0x1                   	// #1
   53964:	ldp	x29, x30, [sp]
   53968:	ldp	x19, x20, [sp, #16]
   5396c:	ldp	x21, x22, [sp, #32]
   53970:	ldp	x23, x24, [sp, #48]
   53974:	ldp	x25, x26, [sp, #64]
   53978:	ldp	x27, x28, [sp, #80]
   5397c:	add	sp, sp, #0x250
   53980:	ret
   53984:	ldr	w1, [x21, #24]
   53988:	add	x20, x20, #0x2
   5398c:	ldp	x6, x0, [x28]
   53990:	cmp	w1, #0x1e
   53994:	b.eq	5418c <aarch64_get_opcode@@Base+0x667c>  // b.none
   53998:	b.hi	539d0 <aarch64_get_opcode@@Base+0x5ec0>  // b.pmore
   5399c:	cmp	w1, #0x1c
   539a0:	b.eq	5418c <aarch64_get_opcode@@Base+0x667c>  // b.none
   539a4:	cmp	w1, #0x1d
   539a8:	b.ne	53728 <aarch64_get_opcode@@Base+0x5c18>  // b.any
   539ac:	ldr	x2, [sp, #136]
   539b0:	cmp	x2, #0x4
   539b4:	b.hi	541ec <aarch64_get_opcode@@Base+0x66dc>  // b.pmore
   539b8:	ldp	x4, x5, [sp, #456]
   539bc:	adrp	x1, 64000 <fields@@Base+0x52d8>
   539c0:	ldr	x3, [sp, #392]
   539c4:	add	x1, x1, #0xfb0
   539c8:	blr	x6
   539cc:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   539d0:	cmp	w1, #0x1f
   539d4:	b.eq	539ac <aarch64_get_opcode@@Base+0x5e9c>  // b.none
   539d8:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   539dc:	ldr	x1, [sp, #152]
   539e0:	add	x20, x20, #0x2
   539e4:	ldp	x3, x0, [x28]
   539e8:	cbz	x1, 54098 <aarch64_get_opcode@@Base+0x6588>
   539ec:	ldr	x2, [sp, #336]
   539f0:	adrp	x1, 64000 <fields@@Base+0x52d8>
   539f4:	add	x1, x1, #0xf30
   539f8:	blr	x3
   539fc:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53a00:	ldr	w0, [sp, #276]
   53a04:	add	x20, x20, #0x2
   53a08:	ldp	x5, x4, [x28]
   53a0c:	cbnz	w0, 540bc <aarch64_get_opcode@@Base+0x65ac>
   53a10:	ldr	w0, [x21, #24]
   53a14:	sub	w2, w0, #0x3d
   53a18:	cmp	w2, #0xa
   53a1c:	b.hi	53a34 <aarch64_get_opcode@@Base+0x5f24>  // b.pmore
   53a20:	mov	x0, #0x1                   	// #1
   53a24:	mov	x1, #0x4a1                 	// #1185
   53a28:	lsl	x0, x0, x2
   53a2c:	tst	x0, x1
   53a30:	b.ne	54224 <aarch64_get_opcode@@Base+0x6714>  // b.any
   53a34:	ldr	x0, [sp, #544]
   53a38:	adrp	x1, 64000 <fields@@Base+0x52d8>
   53a3c:	cbz	x0, 54710 <aarch64_get_opcode@@Base+0x6c00>
   53a40:	add	x1, x1, #0xd28
   53a44:	ldr	x2, [sp, #528]
   53a48:	b	54230 <aarch64_get_opcode@@Base+0x6720>
   53a4c:	add	x20, x20, #0x2
   53a50:	mov	x0, x24
   53a54:	adrp	x1, 64000 <fields@@Base+0x52d8>
   53a58:	add	x1, x1, #0x878
   53a5c:	blr	x23
   53a60:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53a64:	ldr	x0, [sp, #128]
   53a68:	add	x20, x20, #0x2
   53a6c:	cbz	x0, 53728 <aarch64_get_opcode@@Base+0x5c18>
   53a70:	mov	x0, x24
   53a74:	adrp	x1, 64000 <fields@@Base+0x52d8>
   53a78:	add	x1, x1, #0x8d8
   53a7c:	blr	x23
   53a80:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53a84:	adrp	x0, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   53a88:	add	x0, x0, #0x408
   53a8c:	add	x20, x20, #0x2
   53a90:	ldr	w1, [x0, #76]
   53a94:	ldp	x2, x0, [x28]
   53a98:	cmp	w1, #0x1
   53a9c:	b.eq	54168 <aarch64_get_opcode@@Base+0x6658>  // b.none
   53aa0:	cmp	w1, #0x2
   53aa4:	b.ne	53728 <aarch64_get_opcode@@Base+0x5c18>  // b.any
   53aa8:	adrp	x1, 6e000 <fields@@Base+0xf2d8>
   53aac:	add	x1, x1, #0xa08
   53ab0:	blr	x2
   53ab4:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53ab8:	ldr	w0, [x21, #24]
   53abc:	add	x20, x20, #0x2
   53ac0:	cmp	w0, #0x41
   53ac4:	b.eq	54178 <aarch64_get_opcode@@Base+0x6668>  // b.none
   53ac8:	ldr	x0, [sp, #208]
   53acc:	cbnz	x0, 541d8 <aarch64_get_opcode@@Base+0x66c8>
   53ad0:	mov	x0, x24
   53ad4:	adrp	x1, 58000 <xexit@@Base+0xe08>
   53ad8:	add	x1, x1, #0xf0
   53adc:	blr	x23
   53ae0:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53ae4:	ldr	w1, [x21, #24]
   53ae8:	add	x20, x20, #0x2
   53aec:	ldp	x2, x0, [x28]
   53af0:	cmp	w1, #0x38
   53af4:	b.eq	54694 <aarch64_get_opcode@@Base+0x6b84>  // b.none
   53af8:	b.hi	53b50 <aarch64_get_opcode@@Base+0x6040>  // b.pmore
   53afc:	cmp	w1, #0x36
   53b00:	b.eq	54634 <aarch64_get_opcode@@Base+0x6b24>  // b.none
   53b04:	cmp	w1, #0x37
   53b08:	b.ne	53728 <aarch64_get_opcode@@Base+0x5c18>  // b.any
   53b0c:	ldr	x1, [sp, #368]
   53b10:	cmp	x1, #0x1
   53b14:	b.eq	546d8 <aarch64_get_opcode@@Base+0x6bc8>  // b.none
   53b18:	ldr	x1, [sp, #368]
   53b1c:	cmp	x1, #0x2
   53b20:	b.ne	53728 <aarch64_get_opcode@@Base+0x5c18>  // b.any
   53b24:	ldr	x1, [sp, #448]
   53b28:	cmp	x1, #0x2
   53b2c:	b.eq	54cec <aarch64_get_opcode@@Base+0x71dc>  // b.none
   53b30:	cmp	x1, #0x3
   53b34:	b.eq	54cc0 <aarch64_get_opcode@@Base+0x71b0>  // b.none
   53b38:	cmp	x1, #0x1
   53b3c:	b.eq	54e88 <aarch64_get_opcode@@Base+0x7378>  // b.none
   53b40:	adrp	x1, 64000 <fields@@Base+0x52d8>
   53b44:	add	x1, x1, #0xf58
   53b48:	blr	x2
   53b4c:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53b50:	cmp	w1, #0x39
   53b54:	b.ne	53728 <aarch64_get_opcode@@Base+0x5c18>  // b.any
   53b58:	ldr	x1, [sp, #352]
   53b5c:	cmp	x1, #0x4
   53b60:	b.eq	54cec <aarch64_get_opcode@@Base+0x71dc>  // b.none
   53b64:	b.hi	54cb4 <aarch64_get_opcode@@Base+0x71a4>  // b.pmore
   53b68:	cmp	x1, #0x2
   53b6c:	b.eq	5465c <aarch64_get_opcode@@Base+0x6b4c>  // b.none
   53b70:	cmp	x1, #0x3
   53b74:	b.ne	53728 <aarch64_get_opcode@@Base+0x5c18>  // b.any
   53b78:	adrp	x1, 64000 <fields@@Base+0x52d8>
   53b7c:	add	x1, x1, #0xf50
   53b80:	blr	x2
   53b84:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53b88:	add	x20, x20, #0x2
   53b8c:	tbz	w19, #0, 53728 <aarch64_get_opcode@@Base+0x5c18>
   53b90:	ldr	x2, [sp, #328]
   53b94:	mov	x0, x24
   53b98:	adrp	x1, 64000 <fields@@Base+0x52d8>
   53b9c:	add	x1, x1, #0xf28
   53ba0:	blr	x23
   53ba4:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53ba8:	ldr	w1, [x21, #24]
   53bac:	add	x20, x20, #0x2
   53bb0:	ldp	x3, x0, [x28]
   53bb4:	cmp	w1, #0x9
   53bb8:	b.eq	54610 <aarch64_get_opcode@@Base+0x6b00>  // b.none
   53bbc:	b.hi	53c18 <aarch64_get_opcode@@Base+0x6108>  // b.pmore
   53bc0:	cmp	w1, #0x5
   53bc4:	b.eq	54d20 <aarch64_get_opcode@@Base+0x7210>  // b.none
   53bc8:	b.hi	53be4 <aarch64_get_opcode@@Base+0x60d4>  // b.pmore
   53bcc:	cmp	w1, #0x3
   53bd0:	b.eq	53ff0 <aarch64_get_opcode@@Base+0x64e0>  // b.none
   53bd4:	b.ls	53fa8 <aarch64_get_opcode@@Base+0x6498>  // b.plast
   53bd8:	cmp	w1, #0x4
   53bdc:	b.eq	53c50 <aarch64_get_opcode@@Base+0x6140>  // b.none
   53be0:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53be4:	cmp	w1, #0x7
   53be8:	b.eq	53c50 <aarch64_get_opcode@@Base+0x6140>  // b.none
   53bec:	cmp	w1, #0x8
   53bf0:	b.ne	53fe8 <aarch64_get_opcode@@Base+0x64d8>  // b.any
   53bf4:	adrp	x2, 8e000 <aarch64_operands@@Base+0x2bc0>
   53bf8:	add	x2, x2, #0xc70
   53bfc:	ldr	x4, [sp, #520]
   53c00:	add	x2, x2, #0x7f0
   53c04:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   53c08:	add	x1, x1, #0xa78
   53c0c:	ldr	x2, [x2, x4, lsl #3]
   53c10:	blr	x3
   53c14:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53c18:	cmp	w1, #0xd
   53c1c:	b.eq	54d20 <aarch64_get_opcode@@Base+0x7210>  // b.none
   53c20:	b.ls	53c40 <aarch64_get_opcode@@Base+0x6130>  // b.plast
   53c24:	cmp	w1, #0xf
   53c28:	b.eq	53c50 <aarch64_get_opcode@@Base+0x6140>  // b.none
   53c2c:	cmp	w1, #0x10
   53c30:	b.eq	53bf4 <aarch64_get_opcode@@Base+0x60e4>  // b.none
   53c34:	cmp	w1, #0xe
   53c38:	b.eq	53ff0 <aarch64_get_opcode@@Base+0x64e0>  // b.none
   53c3c:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53c40:	cmp	w1, #0xb
   53c44:	b.eq	53ff0 <aarch64_get_opcode@@Base+0x64e0>  // b.none
   53c48:	cmp	w1, #0xc
   53c4c:	b.ne	53fdc <aarch64_get_opcode@@Base+0x64cc>  // b.any
   53c50:	adrp	x2, 8e000 <aarch64_operands@@Base+0x2bc0>
   53c54:	add	x2, x2, #0xc70
   53c58:	ldr	x4, [sp, #416]
   53c5c:	add	x2, x2, #0x7f0
   53c60:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   53c64:	add	x1, x1, #0xa78
   53c68:	ldr	x2, [x2, x4, lsl #3]
   53c6c:	blr	x3
   53c70:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53c74:	ldr	w2, [sp, #272]
   53c78:	add	x20, x20, #0x2
   53c7c:	mov	x0, x24
   53c80:	adrp	x1, 64000 <fields@@Base+0x52d8>
   53c84:	add	x1, x1, #0xf20
   53c88:	blr	x23
   53c8c:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53c90:	ldr	w1, [x21, #24]
   53c94:	add	x20, x20, #0x2
   53c98:	ldp	x2, x0, [x28]
   53c9c:	cmp	w1, #0x39
   53ca0:	b.eq	541ac <aarch64_get_opcode@@Base+0x669c>  // b.none
   53ca4:	cmp	w1, #0x3a
   53ca8:	b.ne	53728 <aarch64_get_opcode@@Base+0x5c18>  // b.any
   53cac:	ldr	x1, [sp, #280]
   53cb0:	cmp	x1, #0x3
   53cb4:	b.eq	54df0 <aarch64_get_opcode@@Base+0x72e0>  // b.none
   53cb8:	ldr	x3, [sp, #376]
   53cbc:	cbnz	x3, 54200 <aarch64_get_opcode@@Base+0x66f0>
   53cc0:	cmp	x1, #0x1
   53cc4:	b.eq	54de0 <aarch64_get_opcode@@Base+0x72d0>  // b.none
   53cc8:	cmp	x1, #0x2
   53ccc:	b.eq	541c8 <aarch64_get_opcode@@Base+0x66b8>  // b.none
   53cd0:	cbnz	x1, 53728 <aarch64_get_opcode@@Base+0x5c18>
   53cd4:	adrp	x1, 65000 <fields@@Base+0x62d8>
   53cd8:	add	x1, x1, #0xae8
   53cdc:	blr	x2
   53ce0:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53ce4:	adrp	x0, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   53ce8:	add	x20, x20, #0x2
   53cec:	ldr	w0, [x0, #1032]
   53cf0:	cbz	w0, 53728 <aarch64_get_opcode@@Base+0x5c18>
   53cf4:	ubfx	x2, x0, #4, #4
   53cf8:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   53cfc:	ldr	x0, [sp, #312]
   53d00:	add	x1, x1, #0xa78
   53d04:	add	x3, x0, #0xde8
   53d08:	mov	x0, x24
   53d0c:	ldr	x2, [x3, x2, lsl #3]
   53d10:	blr	x23
   53d14:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53d18:	ldr	x0, [sp, #248]
   53d1c:	add	x20, x20, #0x2
   53d20:	cbnz	x0, 53728 <aarch64_get_opcode@@Base+0x5c18>
   53d24:	adrp	x0, 64000 <fields@@Base+0x52d8>
   53d28:	add	x1, x0, #0x930
   53d2c:	mov	x0, x24
   53d30:	blr	x23
   53d34:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53d38:	ldr	x0, [sp, #200]
   53d3c:	add	x20, x20, #0x2
   53d40:	cbz	x0, 53728 <aarch64_get_opcode@@Base+0x5c18>
   53d44:	mov	x0, x24
   53d48:	adrp	x1, 67000 <fields@@Base+0x82d8>
   53d4c:	add	x1, x1, #0x6c8
   53d50:	blr	x23
   53d54:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53d58:	ldr	x0, [sp, #200]
   53d5c:	add	x20, x20, #0x2
   53d60:	cbnz	x0, 54110 <aarch64_get_opcode@@Base+0x6600>
   53d64:	mov	x0, x24
   53d68:	adrp	x1, 5a000 <xexit@@Base+0x2e08>
   53d6c:	add	x1, x1, #0xe68
   53d70:	blr	x23
   53d74:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53d78:	adrp	x2, 8e000 <aarch64_operands@@Base+0x2bc0>
   53d7c:	add	x2, x2, #0xc70
   53d80:	ldr	x3, [sp, #264]
   53d84:	add	x2, x2, #0x770
   53d88:	add	x20, x20, #0x2
   53d8c:	mov	x0, x24
   53d90:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   53d94:	add	x1, x1, #0xa78
   53d98:	ldr	x2, [x2, x3, lsl #3]
   53d9c:	blr	x23
   53da0:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53da4:	ldr	w1, [x21, #24]
   53da8:	add	x20, x20, #0x2
   53dac:	ldp	x6, x0, [x28]
   53db0:	cmp	w1, #0x25
   53db4:	b.eq	5415c <aarch64_get_opcode@@Base+0x664c>  // b.none
   53db8:	b.hi	53e1c <aarch64_get_opcode@@Base+0x630c>  // b.pmore
   53dbc:	cmp	w1, #0x22
   53dc0:	b.eq	53e4c <aarch64_get_opcode@@Base+0x633c>  // b.none
   53dc4:	b.ls	53e58 <aarch64_get_opcode@@Base+0x6348>  // b.plast
   53dc8:	cmp	w1, #0x23
   53dcc:	ldr	x3, [sp, #192]
   53dd0:	ldr	x1, [sp, #224]
   53dd4:	ldr	x2, [sp, #144]
   53dd8:	csel	x4, x1, x3, ne  // ne = any
   53ddc:	ldr	x1, [sp, #296]
   53de0:	cbz	x1, 54124 <aarch64_get_opcode@@Base+0x6614>
   53de4:	adrp	x1, f9000 <aarch64_opcode_table@@Base+0x55a20>
   53de8:	ldr	w1, [x1, #1616]
   53dec:	add	x1, x1, x1, lsl #3
   53df0:	add	x1, x2, x1, lsl #1
   53df4:	ldr	x2, [sp, #288]
   53df8:	add	x1, x1, #0x2
   53dfc:	ldr	x2, [x2, x1, lsl #3]
   53e00:	ldr	x1, [sp, #128]
   53e04:	cbnz	x1, 54680 <aarch64_get_opcode@@Base+0x6b70>
   53e08:	ldr	x3, [sp, #320]
   53e0c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   53e10:	add	x1, x1, #0xef0
   53e14:	blr	x6
   53e18:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53e1c:	cmp	w1, #0x28
   53e20:	b.eq	546ac <aarch64_get_opcode@@Base+0x6b9c>  // b.none
   53e24:	b.ls	53e3c <aarch64_get_opcode@@Base+0x632c>  // b.plast
   53e28:	cmp	w1, #0x29
   53e2c:	b.ne	53728 <aarch64_get_opcode@@Base+0x5c18>  // b.any
   53e30:	ldr	x2, [sp, #144]
   53e34:	ldr	x4, [sp, #224]
   53e38:	b	53ddc <aarch64_get_opcode@@Base+0x62cc>
   53e3c:	cmp	w1, #0x26
   53e40:	b.eq	53e68 <aarch64_get_opcode@@Base+0x6358>  // b.none
   53e44:	cmp	w1, #0x27
   53e48:	b.ne	53728 <aarch64_get_opcode@@Base+0x5c18>  // b.any
   53e4c:	ldr	x2, [sp, #144]
   53e50:	ldr	x4, [sp, #240]
   53e54:	b	53ddc <aarch64_get_opcode@@Base+0x62cc>
   53e58:	cmp	w1, #0x20
   53e5c:	b.eq	5415c <aarch64_get_opcode@@Base+0x664c>  // b.none
   53e60:	cmp	w1, #0x21
   53e64:	b.ne	53728 <aarch64_get_opcode@@Base+0x5c18>  // b.any
   53e68:	ldr	x4, [sp, #192]
   53e6c:	ldr	x2, [sp, #216]
   53e70:	b	53ddc <aarch64_get_opcode@@Base+0x62cc>
   53e74:	ldr	w2, [sp, #260]
   53e78:	add	x20, x20, #0x2
   53e7c:	mov	x0, x24
   53e80:	adrp	x1, 64000 <fields@@Base+0x52d8>
   53e84:	add	x1, x1, #0xf20
   53e88:	blr	x23
   53e8c:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53e90:	ldp	x20, x21, [x28]
   53e94:	adrp	x1, 65000 <fields@@Base+0x62d8>
   53e98:	ldr	w22, [sp, #572]
   53e9c:	add	x1, x1, #0x50
   53ea0:	mov	x0, x21
   53ea4:	blr	x20
   53ea8:	cmp	w22, #0x10
   53eac:	b.hi	537c4 <aarch64_get_opcode@@Base+0x5cb4>  // b.pmore
   53eb0:	adrp	x0, 64000 <fields@@Base+0x52d8>
   53eb4:	add	x0, x0, #0x360
   53eb8:	ldrh	w0, [x0, w22, uxtw #1]
   53ebc:	adr	x1, 53ec8 <aarch64_get_opcode@@Base+0x63b8>
   53ec0:	add	x0, x1, w0, sxth #2
   53ec4:	br	x0
   53ec8:	ldp	x20, x21, [x28]
   53ecc:	adrp	x2, 64000 <fields@@Base+0x52d8>
   53ed0:	adrp	x1, 65000 <fields@@Base+0x62d8>
   53ed4:	add	x2, x2, #0xb68
   53ed8:	add	x1, x1, #0xb0
   53edc:	mov	x0, x21
   53ee0:	blr	x20
   53ee4:	cmp	w22, #0x6
   53ee8:	b.eq	54d84 <aarch64_get_opcode@@Base+0x7274>  // b.none
   53eec:	b.hi	53f44 <aarch64_get_opcode@@Base+0x6434>  // b.pmore
   53ef0:	cmp	w22, #0x3
   53ef4:	b.eq	54d70 <aarch64_get_opcode@@Base+0x7260>  // b.none
   53ef8:	b.hi	53f20 <aarch64_get_opcode@@Base+0x6410>  // b.pmore
   53efc:	cmp	w22, #0x1
   53f00:	b.eq	5466c <aarch64_get_opcode@@Base+0x6b5c>  // b.none
   53f04:	cmp	w22, #0x2
   53f08:	b.ne	53f90 <aarch64_get_opcode@@Base+0x6480>  // b.any
   53f0c:	mov	x0, x21
   53f10:	adrp	x1, 65000 <fields@@Base+0x62d8>
   53f14:	add	x1, x1, #0x100
   53f18:	blr	x20
   53f1c:	b	537bc <aarch64_get_opcode@@Base+0x5cac>
   53f20:	cmp	w22, #0x4
   53f24:	b.eq	545e8 <aarch64_get_opcode@@Base+0x6ad8>  // b.none
   53f28:	cmp	w22, #0x5
   53f2c:	b.ne	537bc <aarch64_get_opcode@@Base+0x5cac>  // b.any
   53f30:	mov	x0, x21
   53f34:	adrp	x1, 65000 <fields@@Base+0x62d8>
   53f38:	add	x1, x1, #0x140
   53f3c:	blr	x20
   53f40:	b	537bc <aarch64_get_opcode@@Base+0x5cac>
   53f44:	cmp	w22, #0x9
   53f48:	b.eq	54d98 <aarch64_get_opcode@@Base+0x7288>  // b.none
   53f4c:	b.ls	53f6c <aarch64_get_opcode@@Base+0x645c>  // b.plast
   53f50:	cmp	w22, #0xc
   53f54:	b.eq	537bc <aarch64_get_opcode@@Base+0x5cac>  // b.none
   53f58:	mov	x0, x21
   53f5c:	adrp	x1, 65000 <fields@@Base+0x62d8>
   53f60:	add	x1, x1, #0x210
   53f64:	blr	x20
   53f68:	b	537bc <aarch64_get_opcode@@Base+0x5cac>
   53f6c:	cmp	w22, #0x7
   53f70:	b.eq	545fc <aarch64_get_opcode@@Base+0x6aec>  // b.none
   53f74:	cmp	w22, #0x8
   53f78:	b.ne	537bc <aarch64_get_opcode@@Base+0x5cac>  // b.any
   53f7c:	mov	x0, x21
   53f80:	adrp	x1, 65000 <fields@@Base+0x62d8>
   53f84:	add	x1, x1, #0x1c0
   53f88:	blr	x20
   53f8c:	b	537bc <aarch64_get_opcode@@Base+0x5cac>
   53f90:	cbnz	w22, 537bc <aarch64_get_opcode@@Base+0x5cac>
   53f94:	mov	x0, x21
   53f98:	adrp	x1, 65000 <fields@@Base+0x62d8>
   53f9c:	add	x1, x1, #0xb8
   53fa0:	blr	x20
   53fa4:	b	537bc <aarch64_get_opcode@@Base+0x5cac>
   53fa8:	cmp	w1, #0x1
   53fac:	b.eq	54610 <aarch64_get_opcode@@Base+0x6b00>  // b.none
   53fb0:	cmp	w1, #0x2
   53fb4:	b.ne	53728 <aarch64_get_opcode@@Base+0x5c18>  // b.any
   53fb8:	adrp	x2, 8e000 <aarch64_operands@@Base+0x2bc0>
   53fbc:	add	x2, x2, #0xc70
   53fc0:	ldr	x4, [sp, #504]
   53fc4:	add	x2, x2, #0x7f0
   53fc8:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   53fcc:	add	x1, x1, #0xa78
   53fd0:	ldr	x2, [x2, x4, lsl #3]
   53fd4:	blr	x3
   53fd8:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53fdc:	cmp	w1, #0xa
   53fe0:	b.eq	53fb8 <aarch64_get_opcode@@Base+0x64a8>  // b.none
   53fe4:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   53fe8:	cmp	w1, #0x6
   53fec:	b.ne	53728 <aarch64_get_opcode@@Base+0x5c18>  // b.any
   53ff0:	adrp	x2, 8e000 <aarch64_operands@@Base+0x2bc0>
   53ff4:	add	x2, x2, #0xc70
   53ff8:	ldr	x4, [sp, #184]
   53ffc:	add	x2, x2, #0x7f0
   54000:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   54004:	add	x1, x1, #0xa78
   54008:	ldr	x2, [x2, x4, lsl #3]
   5400c:	blr	x3
   54010:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54014:	ldr	x1, [sp, #144]
   54018:	cmp	x1, #0xf
   5401c:	mov	w22, #0xc                   	// #12
   54020:	mov	w0, #0x3                   	// #3
   54024:	cset	w27, eq  // eq = none
   54028:	csel	w22, w22, w0, ne  // ne = any
   5402c:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   54030:	ldp	x1, x3, [x2, #16]
   54034:	add	x1, x1, #0x1
   54038:	str	x1, [x2, #16]
   5403c:	cmp	x1, x3
   54040:	b.eq	54d10 <aarch64_get_opcode@@Base+0x7200>  // b.none
   54044:	cmp	x1, #0x3
   54048:	ldr	x0, [x2, #8]
   5404c:	b.eq	54d58 <aarch64_get_opcode@@Base+0x7248>  // b.none
   54050:	b.gt	54264 <aarch64_get_opcode@@Base+0x6754>
   54054:	cmp	x1, #0x1
   54058:	b.eq	54d50 <aarch64_get_opcode@@Base+0x7240>  // b.none
   5405c:	and	x0, x0, #0x4
   54060:	cmp	x1, #0x2
   54064:	b.ne	54270 <aarch64_get_opcode@@Base+0x6760>  // b.any
   54068:	adrp	x1, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   5406c:	add	x1, x1, #0x408
   54070:	ldr	w1, [x1, #76]
   54074:	cbz	x0, 54088 <aarch64_get_opcode@@Base+0x6578>
   54078:	cmp	w1, #0x1
   5407c:	b.eq	54ed8 <aarch64_get_opcode@@Base+0x73c8>  // b.none
   54080:	cmp	w1, #0x2
   54084:	cset	w1, eq  // eq = none
   54088:	adrp	x0, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   5408c:	add	x0, x0, #0x408
   54090:	str	w1, [x0, #76]
   54094:	b	53960 <aarch64_get_opcode@@Base+0x5e50>
   54098:	ldr	x1, [sp, #232]
   5409c:	cbnz	x1, 542dc <aarch64_get_opcode@@Base+0x67cc>
   540a0:	ldr	x1, [sp, #384]
   540a4:	ldr	x2, [sp, #112]
   540a8:	cbz	x1, 539f0 <aarch64_get_opcode@@Base+0x5ee0>
   540ac:	adrp	x1, 64000 <fields@@Base+0x52d8>
   540b0:	add	x1, x1, #0xfd0
   540b4:	blr	x3
   540b8:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   540bc:	ldr	w0, [sp, #344]
   540c0:	cmp	w0, #0xb
   540c4:	b.gt	54278 <aarch64_get_opcode@@Base+0x6768>
   540c8:	ldr	w0, [x21, #24]
   540cc:	sub	w2, w0, #0x3d
   540d0:	cmp	w2, #0xa
   540d4:	b.hi	54704 <aarch64_get_opcode@@Base+0x6bf4>  // b.pmore
   540d8:	mov	x0, #0x1                   	// #1
   540dc:	mov	x1, #0x4a1                 	// #1185
   540e0:	lsl	x0, x0, x2
   540e4:	tst	x0, x1
   540e8:	adrp	x0, 64000 <fields@@Base+0x52d8>
   540ec:	adrp	x1, 64000 <fields@@Base+0x52d8>
   540f0:	add	x0, x0, #0xed0
   540f4:	add	x1, x1, #0xcc8
   540f8:	csel	x1, x1, x0, eq  // eq = none
   540fc:	ldr	x2, [sp, #424]
   54100:	mov	x0, x4
   54104:	mov	x3, x2
   54108:	blr	x5
   5410c:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54110:	mov	x0, x24
   54114:	adrp	x1, 5b000 <xexit@@Base+0x3e08>
   54118:	add	x1, x1, #0xca0
   5411c:	blr	x23
   54120:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54124:	ldr	w1, [sp, #348]
   54128:	cbz	w1, 53728 <aarch64_get_opcode@@Base+0x5c18>
   5412c:	adrp	x3, f9000 <aarch64_opcode_table@@Base+0x55a20>
   54130:	adrp	x1, 64000 <fields@@Base+0x52d8>
   54134:	add	x1, x1, #0xf10
   54138:	ldr	w5, [x3, #1616]
   5413c:	ldr	x3, [sp, #320]
   54140:	add	x5, x5, x5, lsl #3
   54144:	add	x2, x2, x5, lsl #1
   54148:	ldr	x5, [sp, #288]
   5414c:	add	x2, x2, #0x2
   54150:	ldr	x2, [x5, x2, lsl #3]
   54154:	blr	x6
   54158:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   5415c:	ldr	x2, [sp, #216]
   54160:	ldr	x4, [sp, #240]
   54164:	b	53ddc <aarch64_get_opcode@@Base+0x62cc>
   54168:	adrp	x1, 5b000 <xexit@@Base+0x3e08>
   5416c:	add	x1, x1, #0xca0
   54170:	blr	x2
   54174:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54178:	ldr	x0, [sp, #248]
   5417c:	cbnz	x0, 541d8 <aarch64_get_opcode@@Base+0x66c8>
   54180:	ldr	x0, [sp, #488]
   54184:	cbz	x0, 53728 <aarch64_get_opcode@@Base+0x5c18>
   54188:	b	53ad0 <aarch64_get_opcode@@Base+0x5fc0>
   5418c:	ldr	x2, [sp, #136]
   54190:	cmp	x2, #0x6
   54194:	b.hi	541ec <aarch64_get_opcode@@Base+0x66dc>  // b.pmore
   54198:	ldr	x3, [sp, #392]
   5419c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   541a0:	add	x1, x1, #0xf88
   541a4:	blr	x6
   541a8:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   541ac:	ldr	x1, [sp, #360]
   541b0:	cmp	x1, #0x2
   541b4:	b.eq	54214 <aarch64_get_opcode@@Base+0x6704>  // b.none
   541b8:	cmp	x1, #0x3
   541bc:	b.eq	546b8 <aarch64_get_opcode@@Base+0x6ba8>  // b.none
   541c0:	cmp	x1, #0x1
   541c4:	b.eq	53cd4 <aarch64_get_opcode@@Base+0x61c4>  // b.none
   541c8:	adrp	x1, 65000 <fields@@Base+0x62d8>
   541cc:	add	x1, x1, #0xed0
   541d0:	blr	x2
   541d4:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   541d8:	mov	x0, x24
   541dc:	adrp	x1, 65000 <fields@@Base+0x62d8>
   541e0:	add	x1, x1, #0x420
   541e4:	blr	x23
   541e8:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   541ec:	ldr	x2, [sp, #136]
   541f0:	adrp	x1, 64000 <fields@@Base+0x52d8>
   541f4:	add	x1, x1, #0xf98
   541f8:	blr	x6
   541fc:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54200:	ldr	x1, [sp, #280]
   54204:	cmp	x1, #0x5
   54208:	b.eq	546b8 <aarch64_get_opcode@@Base+0x6ba8>  // b.none
   5420c:	cmp	x1, #0x7
   54210:	b.ne	53728 <aarch64_get_opcode@@Base+0x5c18>  // b.any
   54214:	adrp	x1, 5e000 <xexit@@Base+0x6e08>
   54218:	add	x1, x1, #0x330
   5421c:	blr	x2
   54220:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54224:	adrp	x1, 64000 <fields@@Base+0x52d8>
   54228:	add	x1, x1, #0xee0
   5422c:	ldr	x2, [sp, #168]
   54230:	mov	x0, x4
   54234:	ldr	x3, [sp, #168]
   54238:	blr	x5
   5423c:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54240:	mov	w0, #0x0                   	// #0
   54244:	ldp	x29, x30, [sp]
   54248:	ldp	x19, x20, [sp, #16]
   5424c:	ldp	x21, x22, [sp, #32]
   54250:	ldp	x23, x24, [sp, #48]
   54254:	ldp	x25, x26, [sp, #64]
   54258:	ldp	x27, x28, [sp, #80]
   5425c:	add	sp, sp, #0x250
   54260:	ret
   54264:	cmp	x1, #0x4
   54268:	mov	w1, #0x0                   	// #0
   5426c:	b.eq	54088 <aarch64_get_opcode@@Base+0x6578>  // b.none
   54270:	ldr	w1, [x2, #4]
   54274:	b	54088 <aarch64_get_opcode@@Base+0x6578>
   54278:	ldr	w0, [sp, #344]
   5427c:	cmp	w0, #0xd
   54280:	b.le	53a10 <aarch64_get_opcode@@Base+0x5f00>
   54284:	cmp	w0, #0xe
   54288:	ldr	w0, [sp, #472]
   5428c:	b.eq	54e10 <aarch64_get_opcode@@Base+0x7300>  // b.none
   54290:	cbnz	w0, 54eb8 <aarch64_get_opcode@@Base+0x73a8>
   54294:	adrp	x0, a2000 <aarch64_operands@@Base+0x16bc0>
   54298:	ldr	w3, [sp, #480]
   5429c:	add	x2, sp, #0x248
   542a0:	add	x1, sp, #0x240
   542a4:	ldr	x0, [x0, #3864]
   542a8:	str	x5, [sp, #176]
   542ac:	str	x4, [sp, #552]
   542b0:	str	w3, [sp, #576]
   542b4:	bl	358d0 <floatformat_to_double@plt>
   542b8:	ldr	x5, [sp, #176]
   542bc:	adrp	x1, 64000 <fields@@Base+0x52d8>
   542c0:	ldr	x2, [sp, #480]
   542c4:	add	x1, x1, #0xce8
   542c8:	ldr	x4, [sp, #552]
   542cc:	ldr	d0, [sp, #584]
   542d0:	mov	x0, x4
   542d4:	blr	x5
   542d8:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   542dc:	ldr	x2, [sp, #408]
   542e0:	b	539f0 <aarch64_get_opcode@@Base+0x5ee0>
   542e4:	ldr	x1, [sp, #120]
   542e8:	cmp	x1, #0xd
   542ec:	b.eq	5447c <aarch64_get_opcode@@Base+0x696c>  // b.none
   542f0:	cmp	x1, #0xf
   542f4:	mov	w22, #0x3                   	// #3
   542f8:	mov	w0, #0xc                   	// #12
   542fc:	cset	w27, eq  // eq = none
   54300:	csel	w22, w22, w0, eq  // eq = none
   54304:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   54308:	ldr	x0, [sp, #136]
   5430c:	cmp	x5, x0
   54310:	b.ne	54014 <aarch64_get_opcode@@Base+0x6504>  // b.any
   54314:	mov	w22, #0x7                   	// #7
   54318:	mov	w27, #0x1                   	// #1
   5431c:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   54320:	ldr	x0, [sp, #144]
   54324:	cmp	x0, #0xd
   54328:	b.eq	54eac <aarch64_get_opcode@@Base+0x739c>  // b.none
   5432c:	ldr	x0, [sp, #144]
   54330:	cmp	x0, #0xf
   54334:	b.eq	54d44 <aarch64_get_opcode@@Base+0x7234>  // b.none
   54338:	ldr	x1, [sp, #136]
   5433c:	mov	w22, #0x4                   	// #4
   54340:	mov	w0, #0xc                   	// #12
   54344:	cmp	x1, #0x4
   54348:	csel	w22, w22, w0, hi  // hi = pmore
   5434c:	cset	w27, hi  // hi = pmore
   54350:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   54354:	ldr	x0, [sp, #144]
   54358:	cmp	x0, #0xd
   5435c:	b.eq	54e98 <aarch64_get_opcode@@Base+0x7388>  // b.none
   54360:	ldr	x0, [sp, #144]
   54364:	cmp	x0, #0xf
   54368:	b.eq	54d44 <aarch64_get_opcode@@Base+0x7234>  // b.none
   5436c:	ldr	x1, [sp, #136]
   54370:	mov	w22, #0x5                   	// #5
   54374:	mov	w0, #0xc                   	// #12
   54378:	cmp	x1, #0x6
   5437c:	csel	w22, w22, w0, hi  // hi = pmore
   54380:	cset	w27, hi  // hi = pmore
   54384:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   54388:	ldr	x1, [sp, #136]
   5438c:	mov	w22, #0x7                   	// #7
   54390:	ldr	x2, [sp, #192]
   54394:	mov	w0, #0xc                   	// #12
   54398:	cmp	x1, x2
   5439c:	csel	w22, w22, w0, eq  // eq = none
   543a0:	cset	w27, eq  // eq = none
   543a4:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   543a8:	tbz	w19, #0, 54308 <aarch64_get_opcode@@Base+0x67f8>
   543ac:	mov	w22, #0x8                   	// #8
   543b0:	mov	w27, #0x1                   	// #1
   543b4:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   543b8:	ldr	x0, [sp, #144]
   543bc:	cmp	x0, #0xd
   543c0:	b.ne	54014 <aarch64_get_opcode@@Base+0x6504>  // b.any
   543c4:	ldr	x1, [sp, #128]
   543c8:	mov	w22, #0x6                   	// #6
   543cc:	mov	w0, #0xc                   	// #12
   543d0:	cmp	x1, #0x0
   543d4:	mov	w27, w1
   543d8:	csel	w22, w22, w0, ne  // ne = any
   543dc:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   543e0:	ldr	x1, [sp, #144]
   543e4:	mov	w22, #0xc                   	// #12
   543e8:	mov	w0, #0x2                   	// #2
   543ec:	cmp	x1, #0xd
   543f0:	csel	w22, w22, w0, ne  // ne = any
   543f4:	cset	w27, eq  // eq = none
   543f8:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   543fc:	ldr	x0, [sp, #152]
   54400:	mov	w22, #0xc                   	// #12
   54404:	cmp	x0, #0x2
   54408:	b.ne	53400 <aarch64_get_opcode@@Base+0x58f0>  // b.any
   5440c:	ldr	w1, [sp, #112]
   54410:	mov	w0, #0xb                   	// #11
   54414:	cmp	w1, #0x0
   54418:	csel	w22, w22, w0, eq  // eq = none
   5441c:	cset	w27, ne  // ne = any
   54420:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   54424:	ldr	w0, [sp, #168]
   54428:	cbnz	w0, 5447c <aarch64_get_opcode@@Base+0x696c>
   5442c:	ldr	w0, [sp, #176]
   54430:	cbnz	w0, 54d44 <aarch64_get_opcode@@Base+0x7234>
   54434:	ldr	x1, [sp, #144]
   54438:	mov	w22, #0x9                   	// #9
   5443c:	mov	w0, #0xc                   	// #12
   54440:	cmp	x11, x1
   54444:	csel	w22, w22, w0, eq  // eq = none
   54448:	cset	w27, eq  // eq = none
   5444c:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   54450:	cmp	x11, #0xd
   54454:	b.eq	5447c <aarch64_get_opcode@@Base+0x696c>  // b.none
   54458:	cmp	x11, #0xf
   5445c:	mov	w22, #0xc                   	// #12
   54460:	mov	w0, #0x3                   	// #3
   54464:	cset	w27, eq  // eq = none
   54468:	csel	w22, w22, w0, ne  // ne = any
   5446c:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   54470:	ldr	x1, [sp, #216]
   54474:	cmp	x1, #0xd
   54478:	b.ne	54018 <aarch64_get_opcode@@Base+0x6508>  // b.any
   5447c:	mov	w22, #0x2                   	// #2
   54480:	mov	w27, #0x1                   	// #1
   54484:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   54488:	cmp	x11, #0xd
   5448c:	mov	w22, #0xc                   	// #12
   54490:	mov	w0, #0x2                   	// #2
   54494:	cset	w27, eq  // eq = none
   54498:	csel	w22, w22, w0, ne  // ne = any
   5449c:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   544a0:	ldr	x0, [sp, #200]
   544a4:	mov	w22, #0xc                   	// #12
   544a8:	cbnz	x0, 53400 <aarch64_get_opcode@@Base+0x58f0>
   544ac:	ldr	x0, [sp, #232]
   544b0:	cbz	x0, 53400 <aarch64_get_opcode@@Base+0x58f0>
   544b4:	mov	w27, #0x1                   	// #1
   544b8:	mov	w22, w27
   544bc:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   544c0:	ldr	x0, [sp, #144]
   544c4:	cmp	x0, #0xf
   544c8:	b.eq	54d44 <aarch64_get_opcode@@Base+0x7234>  // b.none
   544cc:	ands	x27, x19, #0x1
   544d0:	mov	w22, #0x8                   	// #8
   544d4:	mov	w0, #0xc                   	// #12
   544d8:	csel	w22, w22, w0, ne  // ne = any
   544dc:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   544e0:	ldr	x1, [sp, #136]
   544e4:	mov	w22, #0xc                   	// #12
   544e8:	mov	w0, #0x7                   	// #7
   544ec:	cmp	x6, x1
   544f0:	csel	w22, w22, w0, ne  // ne = any
   544f4:	cset	w27, eq  // eq = none
   544f8:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   544fc:	ldr	x0, [sp, #160]
   54500:	mov	w22, #0xc                   	// #12
   54504:	cbz	x0, 53400 <aarch64_get_opcode@@Base+0x58f0>
   54508:	ldr	w1, [sp, #112]
   5450c:	mov	w0, #0xa                   	// #10
   54510:	cmp	w1, #0x0
   54514:	csel	w22, w22, w0, eq  // eq = none
   54518:	cset	w27, ne  // ne = any
   5451c:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   54520:	ldr	x0, [sp, #136]
   54524:	mov	w22, #0xc                   	// #12
   54528:	cmp	x5, x0
   5452c:	b.ne	53400 <aarch64_get_opcode@@Base+0x58f0>  // b.any
   54530:	ldr	x1, [sp, #152]
   54534:	mov	w0, #0xb                   	// #11
   54538:	cmp	x1, #0x2
   5453c:	csel	w22, w22, w0, ne  // ne = any
   54540:	cset	w27, eq  // eq = none
   54544:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   54548:	ldr	x0, [sp, #136]
   5454c:	mov	w22, #0xc                   	// #12
   54550:	cmp	x5, x0
   54554:	b.ne	53400 <aarch64_get_opcode@@Base+0x58f0>  // b.any
   54558:	ldr	x1, [sp, #160]
   5455c:	mov	w0, #0xa                   	// #10
   54560:	cmp	x1, #0x0
   54564:	mov	w27, w1
   54568:	csel	w22, w22, w0, eq  // eq = none
   5456c:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   54570:	cmp	x7, #0x6
   54574:	mov	w22, #0x2                   	// #2
   54578:	mov	w0, #0xc                   	// #12
   5457c:	cset	w27, eq  // eq = none
   54580:	csel	w22, w22, w0, eq  // eq = none
   54584:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   54588:	ldr	x1, [sp, #184]
   5458c:	mov	w22, #0xc                   	// #12
   54590:	mov	w0, #0x2                   	// #2
   54594:	cmp	x1, #0x6
   54598:	csel	w22, w22, w0, ne  // ne = any
   5459c:	cset	w27, eq  // eq = none
   545a0:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   545a4:	cmp	x11, #0xd
   545a8:	b.eq	5447c <aarch64_get_opcode@@Base+0x696c>  // b.none
   545ac:	cmp	x11, #0xf
   545b0:	b.eq	54d44 <aarch64_get_opcode@@Base+0x7234>  // b.none
   545b4:	ldr	x0, [sp, #208]
   545b8:	mov	w22, #0xc                   	// #12
   545bc:	cbz	x0, 53400 <aarch64_get_opcode@@Base+0x58f0>
   545c0:	ldr	x1, [sp, #136]
   545c4:	mov	w0, #0xa                   	// #10
   545c8:	cmp	x6, x1
   545cc:	csel	w22, w22, w0, ne  // ne = any
   545d0:	cset	w27, eq  // eq = none
   545d4:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   545d8:	ldr	x0, [sp, #208]
   545dc:	mov	w22, #0xc                   	// #12
   545e0:	cbnz	x0, 54508 <aarch64_get_opcode@@Base+0x69f8>
   545e4:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   545e8:	mov	x0, x21
   545ec:	adrp	x1, 65000 <fields@@Base+0x62d8>
   545f0:	add	x1, x1, #0x120
   545f4:	blr	x20
   545f8:	b	537bc <aarch64_get_opcode@@Base+0x5cac>
   545fc:	mov	x0, x21
   54600:	adrp	x1, 65000 <fields@@Base+0x62d8>
   54604:	add	x1, x1, #0x180
   54608:	blr	x20
   5460c:	b	537bc <aarch64_get_opcode@@Base+0x5cac>
   54610:	adrp	x2, 8e000 <aarch64_operands@@Base+0x2bc0>
   54614:	add	x2, x2, #0xc70
   54618:	ldr	x4, [sp, #496]
   5461c:	add	x2, x2, #0x7f0
   54620:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   54624:	add	x1, x1, #0xa78
   54628:	ldr	x2, [x2, x4, lsl #3]
   5462c:	blr	x3
   54630:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54634:	ldr	x1, [sp, #304]
   54638:	cmp	x1, #0x4
   5463c:	b.eq	53b40 <aarch64_get_opcode@@Base+0x6030>  // b.none
   54640:	b.hi	54cd0 <aarch64_get_opcode@@Base+0x71c0>  // b.pmore
   54644:	cmp	x1, #0x2
   54648:	b.eq	54e00 <aarch64_get_opcode@@Base+0x72f0>  // b.none
   5464c:	cmp	x1, #0x3
   54650:	b.eq	53b78 <aarch64_get_opcode@@Base+0x6068>  // b.none
   54654:	cmp	x1, #0x1
   54658:	b.ne	546f4 <aarch64_get_opcode@@Base+0x6be4>  // b.any
   5465c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   54660:	add	x1, x1, #0xf40
   54664:	blr	x2
   54668:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   5466c:	mov	x0, x21
   54670:	adrp	x1, 65000 <fields@@Base+0x62d8>
   54674:	add	x1, x1, #0xd8
   54678:	blr	x20
   5467c:	b	537bc <aarch64_get_opcode@@Base+0x5cac>
   54680:	ldr	x3, [sp, #320]
   54684:	adrp	x1, 64000 <fields@@Base+0x52d8>
   54688:	add	x1, x1, #0xf00
   5468c:	blr	x6
   54690:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54694:	ldr	x1, [sp, #208]
   54698:	cbnz	x1, 54d60 <aarch64_get_opcode@@Base+0x7250>
   5469c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   546a0:	add	x1, x1, #0xf78
   546a4:	blr	x2
   546a8:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   546ac:	ldr	x2, [sp, #144]
   546b0:	ldr	x4, [sp, #192]
   546b4:	b	53ddc <aarch64_get_opcode@@Base+0x62cc>
   546b8:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   546bc:	add	x1, x1, #0xf70
   546c0:	blr	x2
   546c4:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   546c8:	and	x0, x19, #0x300000
   546cc:	cmp	x0, #0x300, lsl #12
   546d0:	b.ne	53898 <aarch64_get_opcode@@Base+0x5d88>  // b.any
   546d4:	b	53844 <aarch64_get_opcode@@Base+0x5d34>
   546d8:	ldr	x1, [sp, #448]
   546dc:	cmp	x1, #0x2
   546e0:	b.eq	5465c <aarch64_get_opcode@@Base+0x6b4c>  // b.none
   546e4:	cmp	x1, #0x3
   546e8:	b.eq	53b78 <aarch64_get_opcode@@Base+0x6068>  // b.none
   546ec:	cmp	x1, #0x1
   546f0:	b.eq	54e00 <aarch64_get_opcode@@Base+0x72f0>  // b.none
   546f4:	adrp	x1, 64000 <fields@@Base+0x52d8>
   546f8:	add	x1, x1, #0xf38
   546fc:	blr	x2
   54700:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54704:	adrp	x1, 64000 <fields@@Base+0x52d8>
   54708:	add	x1, x1, #0xcc8
   5470c:	b	540fc <aarch64_get_opcode@@Base+0x65ec>
   54710:	add	x1, x1, #0xd28
   54714:	b	5422c <aarch64_get_opcode@@Base+0x671c>
   54718:	mov	x0, x21
   5471c:	adrp	x1, 65000 <fields@@Base+0x62d8>
   54720:	add	x1, x1, #0x3a0
   54724:	blr	x20
   54728:	b	537c4 <aarch64_get_opcode@@Base+0x5cb4>
   5472c:	mov	x0, x21
   54730:	adrp	x1, 65000 <fields@@Base+0x62d8>
   54734:	add	x1, x1, #0x378
   54738:	blr	x20
   5473c:	b	537c4 <aarch64_get_opcode@@Base+0x5cb4>
   54740:	mov	x0, x21
   54744:	adrp	x1, 65000 <fields@@Base+0x62d8>
   54748:	add	x1, x1, #0x350
   5474c:	blr	x20
   54750:	b	537c4 <aarch64_get_opcode@@Base+0x5cb4>
   54754:	mov	x0, x21
   54758:	adrp	x1, 65000 <fields@@Base+0x62d8>
   5475c:	add	x1, x1, #0x330
   54760:	blr	x20
   54764:	b	537c4 <aarch64_get_opcode@@Base+0x5cb4>
   54768:	mov	x0, x21
   5476c:	adrp	x1, 65000 <fields@@Base+0x62d8>
   54770:	add	x1, x1, #0x320
   54774:	blr	x20
   54778:	b	537c4 <aarch64_get_opcode@@Base+0x5cb4>
   5477c:	mov	x0, x21
   54780:	adrp	x1, 65000 <fields@@Base+0x62d8>
   54784:	add	x1, x1, #0x310
   54788:	blr	x20
   5478c:	b	537c4 <aarch64_get_opcode@@Base+0x5cb4>
   54790:	mov	x0, x21
   54794:	adrp	x1, 65000 <fields@@Base+0x62d8>
   54798:	add	x1, x1, #0x2f0
   5479c:	blr	x20
   547a0:	b	537c4 <aarch64_get_opcode@@Base+0x5cb4>
   547a4:	mov	x0, x21
   547a8:	adrp	x1, 65000 <fields@@Base+0x62d8>
   547ac:	add	x1, x1, #0x2d0
   547b0:	blr	x20
   547b4:	b	537c4 <aarch64_get_opcode@@Base+0x5cb4>
   547b8:	mov	x0, x21
   547bc:	adrp	x1, 65000 <fields@@Base+0x62d8>
   547c0:	add	x1, x1, #0x2b8
   547c4:	blr	x20
   547c8:	b	537c4 <aarch64_get_opcode@@Base+0x5cb4>
   547cc:	mov	x0, x21
   547d0:	adrp	x1, 65000 <fields@@Base+0x62d8>
   547d4:	add	x1, x1, #0x2a0
   547d8:	blr	x20
   547dc:	b	537c4 <aarch64_get_opcode@@Base+0x5cb4>
   547e0:	mov	x0, x21
   547e4:	adrp	x1, 65000 <fields@@Base+0x62d8>
   547e8:	add	x1, x1, #0x288
   547ec:	blr	x20
   547f0:	b	537c4 <aarch64_get_opcode@@Base+0x5cb4>
   547f4:	mov	x0, x21
   547f8:	adrp	x1, 65000 <fields@@Base+0x62d8>
   547fc:	add	x1, x1, #0x278
   54800:	blr	x20
   54804:	b	537c4 <aarch64_get_opcode@@Base+0x5cb4>
   54808:	mov	x0, x21
   5480c:	adrp	x1, 65000 <fields@@Base+0x62d8>
   54810:	add	x1, x1, #0x260
   54814:	blr	x20
   54818:	b	537c4 <aarch64_get_opcode@@Base+0x5cb4>
   5481c:	mov	x0, x21
   54820:	adrp	x1, 65000 <fields@@Base+0x62d8>
   54824:	add	x1, x1, #0x250
   54828:	blr	x20
   5482c:	b	537c4 <aarch64_get_opcode@@Base+0x5cb4>
   54830:	mov	x0, x21
   54834:	adrp	x1, 65000 <fields@@Base+0x62d8>
   54838:	add	x1, x1, #0x70
   5483c:	blr	x20
   54840:	b	537c4 <aarch64_get_opcode@@Base+0x5cb4>
   54844:	mov	x0, x21
   54848:	adrp	x1, 65000 <fields@@Base+0x62d8>
   5484c:	add	x1, x1, #0x240
   54850:	blr	x20
   54854:	b	537c4 <aarch64_get_opcode@@Base+0x5cb4>
   54858:	mov	x0, x21
   5485c:	adrp	x1, 65000 <fields@@Base+0x62d8>
   54860:	add	x1, x1, #0x3c0
   54864:	blr	x20
   54868:	b	537c4 <aarch64_get_opcode@@Base+0x5cb4>
   5486c:	ldr	x2, [sp, #584]
   54870:	adrp	x1, 64000 <fields@@Base+0x52d8>
   54874:	mov	x0, x24
   54878:	add	x1, x1, #0xdd8
   5487c:	blr	x23
   54880:	add	x20, x26, #0x1
   54884:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54888:	adrp	x0, f9000 <aarch64_opcode_table@@Base+0x55a20>
   5488c:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   54890:	ldr	x3, [sp, #584]
   54894:	add	x1, x1, #0xa78
   54898:	ldr	w2, [x0, #1616]
   5489c:	mov	x0, x24
   548a0:	add	x2, x2, x2, lsl #3
   548a4:	add	x2, x3, x2, lsl #1
   548a8:	add	x20, x26, #0x1
   548ac:	ldr	x3, [sp, #288]
   548b0:	add	x2, x2, #0x2
   548b4:	ldr	x2, [x3, x2, lsl #3]
   548b8:	blr	x23
   548bc:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   548c0:	ldrsw	x3, [sp, #576]
   548c4:	ldp	x2, x0, [x28]
   548c8:	cmp	x3, #0x1
   548cc:	ldr	x1, [sp, #584]
   548d0:	b.eq	54f24 <aarch64_get_opcode@@Base+0x7414>  // b.none
   548d4:	cmp	x3, #0x2
   548d8:	b.ne	54880 <aarch64_get_opcode@@Base+0x6d70>  // b.any
   548dc:	cmp	x1, #0x2
   548e0:	b.eq	5520c <aarch64_get_opcode@@Base+0x76fc>  // b.none
   548e4:	b.hi	54f74 <aarch64_get_opcode@@Base+0x7464>  // b.pmore
   548e8:	cbz	x1, 55198 <aarch64_get_opcode@@Base+0x7688>
   548ec:	adrp	x1, 65000 <fields@@Base+0x62d8>
   548f0:	add	x20, x26, #0x1
   548f4:	add	x1, x1, #0x38
   548f8:	blr	x2
   548fc:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54900:	ldr	x3, [sp, #584]
   54904:	adrp	x0, f9000 <aarch64_opcode_table@@Base+0x55a20>
   54908:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   5490c:	add	x1, x1, #0xa78
   54910:	ldr	w2, [x0, #1616]
   54914:	mov	x0, x24
   54918:	lsl	w3, w3, #1
   5491c:	b	548a0 <aarch64_get_opcode@@Base+0x6d90>
   54920:	ldr	x0, [sp, #584]
   54924:	mov	x2, #0x40                  	// #64
   54928:	adrp	x1, 64000 <fields@@Base+0x52d8>
   5492c:	add	x20, x26, #0x1
   54930:	sub	x2, x2, x0
   54934:	add	x1, x1, #0xf30
   54938:	mov	x0, x24
   5493c:	blr	x23
   54940:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54944:	ldr	w0, [x21, #24]
   54948:	cmp	w0, #0x34
   5494c:	b.eq	5517c <aarch64_get_opcode@@Base+0x766c>  // b.none
   54950:	b.hi	54dcc <aarch64_get_opcode@@Base+0x72bc>  // b.pmore
   54954:	cmp	w0, #0x2e
   54958:	ldr	x2, [sp, #224]
   5495c:	b.eq	54970 <aarch64_get_opcode@@Base+0x6e60>  // b.none
   54960:	cmp	w0, #0x2f
   54964:	ldr	x0, [sp, #240]
   54968:	ldr	x1, [sp, #440]
   5496c:	csel	x2, x0, x1, ne  // ne = any
   54970:	mov	x0, x24
   54974:	adrp	x1, 64000 <fields@@Base+0x52d8>
   54978:	add	x20, x26, #0x1
   5497c:	add	x1, x1, #0xf30
   54980:	blr	x23
   54984:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54988:	adrp	x0, f9000 <aarch64_opcode_table@@Base+0x55a20>
   5498c:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   54990:	ldr	x3, [sp, #584]
   54994:	add	x1, x1, #0xa78
   54998:	ldr	w2, [x0, #1616]
   5499c:	mov	x0, x24
   549a0:	lsl	w3, w3, #1
   549a4:	add	x2, x2, x2, lsl #3
   549a8:	orr	w3, w3, #0x1
   549ac:	b	548a4 <aarch64_get_opcode@@Base+0x6d94>
   549b0:	ldr	w0, [x21, #24]
   549b4:	sub	w2, w0, #0x77
   549b8:	sub	w1, w0, #0x86
   549bc:	cmp	w2, #0x1
   549c0:	sub	w4, w0, #0x7e
   549c4:	cset	w2, ls  // ls = plast
   549c8:	cmp	w0, #0x80
   549cc:	cset	w3, eq  // eq = none
   549d0:	cmp	w0, #0x84
   549d4:	ccmp	w1, #0x3, #0x0, ne  // ne = any
   549d8:	cset	w1, ls  // ls = plast
   549dc:	cmp	w2, #0x0
   549e0:	ccmp	w4, #0x2, #0x0, eq  // eq = none
   549e4:	cset	w4, ls  // ls = plast
   549e8:	orr	w1, w1, w4
   549ec:	cbz	w1, 551ac <aarch64_get_opcode@@Base+0x769c>
   549f0:	cmp	w2, #0x0
   549f4:	ccmp	w3, #0x0, #0x0, eq  // eq = none
   549f8:	ldp	x20, x3, [x28]
   549fc:	b.eq	54ee0 <aarch64_get_opcode@@Base+0x73d0>  // b.none
   54a00:	cmp	w0, #0x84
   54a04:	b.eq	55090 <aarch64_get_opcode@@Base+0x7580>  // b.none
   54a08:	ldr	w0, [sp, #536]
   54a0c:	cbz	w0, 5507c <aarch64_get_opcode@@Base+0x756c>
   54a10:	ldr	w0, [sp, #432]
   54a14:	sub	w2, w0, #0x20
   54a18:	mov	x0, x3
   54a1c:	adrp	x1, 65000 <fields@@Base+0x62d8>
   54a20:	add	x1, x1, #0x88
   54a24:	blr	x20
   54a28:	add	x20, x26, #0x1
   54a2c:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54a30:	ldr	x0, [sp, #312]
   54a34:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   54a38:	ldr	x3, [sp, #584]
   54a3c:	add	x2, x0, #0xde8
   54a40:	add	x1, x1, #0xa78
   54a44:	mov	x0, x24
   54a48:	add	x20, x26, #0x1
   54a4c:	ldr	x2, [x2, x3, lsl #3]
   54a50:	blr	x23
   54a54:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54a58:	ldr	x3, [sp, #584]
   54a5c:	cmp	x3, #0xd
   54a60:	b.eq	54a94 <aarch64_get_opcode@@Base+0x6f84>  // b.none
   54a64:	cmp	x3, #0xf
   54a68:	b.eq	54f5c <aarch64_get_opcode@@Base+0x744c>  // b.none
   54a6c:	adrp	x2, f9000 <aarch64_opcode_table@@Base+0x55a20>
   54a70:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   54a74:	mov	x0, x24
   54a78:	add	x1, x1, #0xa78
   54a7c:	ldr	w2, [x2, #1616]
   54a80:	b	548a0 <aarch64_get_opcode@@Base+0x6d90>
   54a84:	ldr	x3, [sp, #584]
   54a88:	and	x0, x3, #0xfffffffffffffffd
   54a8c:	cmp	x0, #0xd
   54a90:	b.ne	54a6c <aarch64_get_opcode@@Base+0x6f5c>  // b.any
   54a94:	add	x20, x26, #0x1
   54a98:	mov	w27, #0x1                   	// #1
   54a9c:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54aa0:	ldr	x2, [sp, #584]
   54aa4:	tbz	w2, #3, 54f0c <aarch64_get_opcode@@Base+0x73fc>
   54aa8:	mov	x0, x24
   54aac:	adrp	x1, 64000 <fields@@Base+0x52d8>
   54ab0:	add	x20, x26, #0x1
   54ab4:	add	x1, x1, #0xa78
   54ab8:	blr	x23
   54abc:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54ac0:	ldr	x0, [sp, #584]
   54ac4:	cmp	x0, #0x1
   54ac8:	b.ne	54880 <aarch64_get_opcode@@Base+0x6d70>  // b.any
   54acc:	mov	x0, x24
   54ad0:	adrp	x1, 70000 <fields@@Base+0x112d8>
   54ad4:	add	x20, x26, #0x1
   54ad8:	add	x1, x1, #0x870
   54adc:	blr	x23
   54ae0:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54ae4:	ldr	x0, [sp, #584]
   54ae8:	cmp	x0, #0x2
   54aec:	b.eq	54f44 <aarch64_get_opcode@@Base+0x7434>  // b.none
   54af0:	b.hi	54dac <aarch64_get_opcode@@Base+0x729c>  // b.pmore
   54af4:	cbz	x0, 54f90 <aarch64_get_opcode@@Base+0x7480>
   54af8:	mov	x0, x24
   54afc:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   54b00:	add	x20, x26, #0x1
   54b04:	add	x1, x1, #0x3e8
   54b08:	blr	x23
   54b0c:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54b10:	ldr	w1, [x21, #24]
   54b14:	ldp	x4, x0, [x28]
   54b18:	sub	w1, w1, #0x1
   54b1c:	cmp	w1, #0xc0
   54b20:	ldr	x2, [sp, #584]
   54b24:	b.hi	54880 <aarch64_get_opcode@@Base+0x6d70>  // b.pmore
   54b28:	adrp	x3, 64000 <fields@@Base+0x52d8>
   54b2c:	add	x3, x3, #0x384
   54b30:	ldrh	w1, [x3, w1, uxtw #1]
   54b34:	adr	x3, 54b40 <aarch64_get_opcode@@Base+0x7030>
   54b38:	add	x1, x3, w1, sxth #2
   54b3c:	br	x1
   54b40:	cmp	x2, #0x3
   54b44:	b.hi	55220 <aarch64_get_opcode@@Base+0x7710>  // b.pmore
   54b48:	adrp	x3, 8e000 <aarch64_operands@@Base+0x2bc0>
   54b4c:	add	x3, x3, #0xc70
   54b50:	add	x3, x3, #0x830
   54b54:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   54b58:	add	x20, x26, #0x1
   54b5c:	add	x1, x1, #0xa78
   54b60:	ldr	x2, [x3, x2, lsl #3]
   54b64:	blr	x4
   54b68:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54b6c:	ldr	x0, [sp, #584]
   54b70:	cmp	x0, #0x1
   54b74:	b.ne	54880 <aarch64_get_opcode@@Base+0x6d70>  // b.any
   54b78:	mov	x0, x24
   54b7c:	adrp	x1, 65000 <fields@@Base+0x62d8>
   54b80:	add	x20, x26, #0x1
   54b84:	add	x1, x1, #0xed0
   54b88:	blr	x23
   54b8c:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54b90:	ldr	x2, [sp, #584]
   54b94:	mov	x0, x24
   54b98:	adrp	x1, 65000 <fields@@Base+0x62d8>
   54b9c:	add	x20, x26, #0x1
   54ba0:	add	x1, x1, #0xa8
   54ba4:	blr	x23
   54ba8:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54bac:	ldr	x0, [sp, #312]
   54bb0:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   54bb4:	ldr	x2, [sp, #584]
   54bb8:	add	x3, x0, #0xde8
   54bbc:	add	x1, x1, #0xa78
   54bc0:	mov	x0, x24
   54bc4:	eor	x2, x2, #0x1
   54bc8:	str	x2, [sp, #584]
   54bcc:	add	x20, x26, #0x1
   54bd0:	ldr	x2, [x3, x2, lsl #3]
   54bd4:	blr	x23
   54bd8:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54bdc:	cbz	x2, 54ca0 <aarch64_get_opcode@@Base+0x7190>
   54be0:	cmp	x2, #0x1
   54be4:	b.ne	54880 <aarch64_get_opcode@@Base+0x6d70>  // b.any
   54be8:	adrp	x1, 58000 <xexit@@Base+0xe08>
   54bec:	add	x20, x26, #0x1
   54bf0:	add	x1, x1, #0x950
   54bf4:	blr	x4
   54bf8:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54bfc:	cmp	x2, #0xb
   54c00:	b.hi	54880 <aarch64_get_opcode@@Base+0x6d70>  // b.pmore
   54c04:	mov	x1, #0x1                   	// #1
   54c08:	mov	x3, #0xaa                  	// #170
   54c0c:	lsl	x2, x1, x2
   54c10:	tst	x2, x3
   54c14:	b.ne	54ca0 <aarch64_get_opcode@@Base+0x7190>  // b.any
   54c18:	mov	x1, #0xa00                 	// #2560
   54c1c:	tst	x2, x1
   54c20:	b.ne	54be8 <aarch64_get_opcode@@Base+0x70d8>  // b.any
   54c24:	add	x20, x26, #0x1
   54c28:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54c2c:	cmp	x2, #0xd
   54c30:	b.hi	54880 <aarch64_get_opcode@@Base+0x6d70>  // b.pmore
   54c34:	mov	x1, #0x1                   	// #1
   54c38:	mov	x3, #0x3055                	// #12373
   54c3c:	lsl	x2, x1, x2
   54c40:	tst	x2, x3
   54c44:	b.ne	54ca0 <aarch64_get_opcode@@Base+0x7190>  // b.any
   54c48:	mov	x1, #0x500                 	// #1280
   54c4c:	tst	x2, x1
   54c50:	b.ne	54be8 <aarch64_get_opcode@@Base+0x70d8>  // b.any
   54c54:	add	x20, x26, #0x1
   54c58:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54c5c:	cmp	x2, #0xf
   54c60:	b.hi	54880 <aarch64_get_opcode@@Base+0x6d70>  // b.pmore
   54c64:	mov	x1, #0x1                   	// #1
   54c68:	lsl	x2, x1, x2
   54c6c:	tst	x2, #0xff00
   54c70:	b.eq	54c88 <aarch64_get_opcode@@Base+0x7178>  // b.none
   54c74:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   54c78:	add	x20, x26, #0x1
   54c7c:	add	x1, x1, #0x3d0
   54c80:	blr	x4
   54c84:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54c88:	mov	x1, #0xaa                  	// #170
   54c8c:	tst	x2, x1
   54c90:	b.ne	54be8 <aarch64_get_opcode@@Base+0x70d8>  // b.any
   54c94:	mov	x1, #0x11                  	// #17
   54c98:	tst	x2, x1
   54c9c:	b.eq	54880 <aarch64_get_opcode@@Base+0x6d70>  // b.none
   54ca0:	adrp	x1, 58000 <xexit@@Base+0xe08>
   54ca4:	add	x20, x26, #0x1
   54ca8:	add	x1, x1, #0x828
   54cac:	blr	x4
   54cb0:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54cb4:	ldr	x1, [sp, #352]
   54cb8:	cmp	x1, #0x5
   54cbc:	b.ne	53728 <aarch64_get_opcode@@Base+0x5c18>  // b.any
   54cc0:	adrp	x1, 64000 <fields@@Base+0x52d8>
   54cc4:	add	x1, x1, #0xf70
   54cc8:	blr	x2
   54ccc:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54cd0:	ldr	x1, [sp, #304]
   54cd4:	cmp	x1, #0x6
   54cd8:	b.eq	54e88 <aarch64_get_opcode@@Base+0x7378>  // b.none
   54cdc:	cmp	x1, #0x7
   54ce0:	b.eq	54cc0 <aarch64_get_opcode@@Base+0x71b0>  // b.none
   54ce4:	cmp	x1, #0x5
   54ce8:	b.ne	546f4 <aarch64_get_opcode@@Base+0x6be4>  // b.any
   54cec:	adrp	x1, 64000 <fields@@Base+0x52d8>
   54cf0:	add	x1, x1, #0xf60
   54cf4:	blr	x2
   54cf8:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54cfc:	mov	x0, #0x1001                	// #4097
   54d00:	and	x0, x19, x0
   54d04:	cmp	x0, #0x1
   54d08:	b.ne	53898 <aarch64_get_opcode@@Base+0x5d88>  // b.any
   54d0c:	b	5381c <aarch64_get_opcode@@Base+0x5d0c>
   54d10:	stp	xzr, xzr, [x2, #8]
   54d14:	str	xzr, [x2, #24]
   54d18:	str	xzr, [x0, #72]
   54d1c:	b	53960 <aarch64_get_opcode@@Base+0x5e50>
   54d20:	adrp	x2, 8e000 <aarch64_operands@@Base+0x2bc0>
   54d24:	add	x2, x2, #0xc70
   54d28:	ldr	x4, [sp, #512]
   54d2c:	add	x2, x2, #0x7f0
   54d30:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   54d34:	add	x1, x1, #0xa78
   54d38:	ldr	x2, [x2, x4, lsl #3]
   54d3c:	blr	x3
   54d40:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54d44:	mov	w22, #0x3                   	// #3
   54d48:	mov	w27, #0x1                   	// #1
   54d4c:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   54d50:	and	x0, x0, #0x8
   54d54:	b	54068 <aarch64_get_opcode@@Base+0x6558>
   54d58:	and	x0, x0, #0x2
   54d5c:	b	54068 <aarch64_get_opcode@@Base+0x6558>
   54d60:	adrp	x1, 64000 <fields@@Base+0x52d8>
   54d64:	add	x1, x1, #0xf80
   54d68:	blr	x2
   54d6c:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54d70:	mov	x0, x21
   54d74:	adrp	x1, 65000 <fields@@Base+0x62d8>
   54d78:	add	x1, x1, #0x110
   54d7c:	blr	x20
   54d80:	b	537bc <aarch64_get_opcode@@Base+0x5cac>
   54d84:	mov	x0, x21
   54d88:	adrp	x1, 65000 <fields@@Base+0x62d8>
   54d8c:	add	x1, x1, #0x160
   54d90:	blr	x20
   54d94:	b	537bc <aarch64_get_opcode@@Base+0x5cac>
   54d98:	mov	x0, x21
   54d9c:	adrp	x1, 65000 <fields@@Base+0x62d8>
   54da0:	add	x1, x1, #0x1d8
   54da4:	blr	x20
   54da8:	b	537bc <aarch64_get_opcode@@Base+0x5cac>
   54dac:	cmp	x0, #0x3
   54db0:	b.ne	54880 <aarch64_get_opcode@@Base+0x6d70>  // b.any
   54db4:	mov	x0, x24
   54db8:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   54dbc:	add	x20, x26, #0x1
   54dc0:	add	x1, x1, #0x3d0
   54dc4:	blr	x23
   54dc8:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54dcc:	cmp	w0, #0x35
   54dd0:	ldr	x0, [sp, #240]
   54dd4:	ldr	x1, [sp, #440]
   54dd8:	csel	x2, x0, x1, ne  // ne = any
   54ddc:	b	54970 <aarch64_get_opcode@@Base+0x6e60>
   54de0:	adrp	x1, 67000 <fields@@Base+0x82d8>
   54de4:	add	x1, x1, #0x6c8
   54de8:	blr	x2
   54dec:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54df0:	adrp	x1, 58000 <xexit@@Base+0xe08>
   54df4:	add	x1, x1, #0xc88
   54df8:	blr	x2
   54dfc:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54e00:	adrp	x1, 64000 <fields@@Base+0x52d8>
   54e04:	add	x1, x1, #0xf48
   54e08:	blr	x2
   54e0c:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54e10:	cbz	w0, 54e60 <aarch64_get_opcode@@Base+0x7350>
   54e14:	ldr	w7, [sp, #476]
   54e18:	mov	w0, #0x7                   	// #7
   54e1c:	mov	x2, #0x0                   	// #0
   54e20:	mov	x3, #0x0                   	// #0
   54e24:	mov	x6, #0xff                  	// #255
   54e28:	asr	w1, w7, w0
   54e2c:	tst	x1, #0x1
   54e30:	csel	x1, x6, xzr, ne  // ne = any
   54e34:	cmp	w0, #0x3
   54e38:	b.gt	54e7c <aarch64_get_opcode@@Base+0x736c>
   54e3c:	orr	x3, x1, x3, lsl #8
   54e40:	cbz	w0, 54e4c <aarch64_get_opcode@@Base+0x733c>
   54e44:	sub	w0, w0, #0x1
   54e48:	b	54e28 <aarch64_get_opcode@@Base+0x7318>
   54e4c:	mov	x0, x4
   54e50:	adrp	x1, 64000 <fields@@Base+0x52d8>
   54e54:	add	x1, x1, #0xd18
   54e58:	blr	x5
   54e5c:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54e60:	ldr	x2, [sp, #120]
   54e64:	mov	x0, x4
   54e68:	adrp	x1, 64000 <fields@@Base+0x52d8>
   54e6c:	add	x1, x1, #0xcd8
   54e70:	mov	x3, x2
   54e74:	blr	x5
   54e78:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54e7c:	orr	x2, x1, x2, lsl #8
   54e80:	sub	w0, w0, #0x1
   54e84:	b	54e28 <aarch64_get_opcode@@Base+0x7318>
   54e88:	adrp	x1, 64000 <fields@@Base+0x52d8>
   54e8c:	add	x1, x1, #0xf68
   54e90:	blr	x2
   54e94:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54e98:	ldr	x0, [sp, #128]
   54e9c:	cbz	x0, 5436c <aarch64_get_opcode@@Base+0x685c>
   54ea0:	mov	w22, #0x6                   	// #6
   54ea4:	mov	w27, #0x1                   	// #1
   54ea8:	b	53400 <aarch64_get_opcode@@Base+0x58f0>
   54eac:	ldr	x0, [sp, #128]
   54eb0:	cbz	x0, 54338 <aarch64_get_opcode@@Base+0x6828>
   54eb4:	b	54ea0 <aarch64_get_opcode@@Base+0x7390>
   54eb8:	ldr	w2, [sp, #476]
   54ebc:	mov	x0, x4
   54ec0:	adrp	x1, 64000 <fields@@Base+0x52d8>
   54ec4:	mov	w4, #0x1                   	// #1
   54ec8:	add	x1, x1, #0xcf8
   54ecc:	mov	w3, #0xf                   	// #15
   54ed0:	blr	x5
   54ed4:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54ed8:	mov	w1, #0x2                   	// #2
   54edc:	b	54088 <aarch64_get_opcode@@Base+0x6578>
   54ee0:	subs	w1, w0, #0x84
   54ee4:	and	w1, w1, #0xfffffffb
   54ee8:	b.eq	55048 <aarch64_get_opcode@@Base+0x7538>  // b.none
   54eec:	ldr	w0, [sp, #536]
   54ef0:	cbz	w0, 55028 <aarch64_get_opcode@@Base+0x7518>
   54ef4:	ldr	w2, [sp, #540]
   54ef8:	cbnz	w1, 54a18 <aarch64_get_opcode@@Base+0x6f08>
   54efc:	b	54a10 <aarch64_get_opcode@@Base+0x6f00>
   54f00:	mov	x0, #0x1                   	// #1
   54f04:	str	x0, [x1, #24]
   54f08:	b	53960 <aarch64_get_opcode@@Base+0x5e50>
   54f0c:	mov	x0, x24
   54f10:	adrp	x1, 64000 <fields@@Base+0x52d8>
   54f14:	add	x20, x26, #0x1
   54f18:	add	x1, x1, #0xa90
   54f1c:	blr	x23
   54f20:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54f24:	cbz	x1, 548ec <aarch64_get_opcode@@Base+0x6ddc>
   54f28:	cmp	x1, #0x1
   54f2c:	b.ne	54880 <aarch64_get_opcode@@Base+0x6d70>  // b.any
   54f30:	adrp	x1, 65000 <fields@@Base+0x62d8>
   54f34:	add	x20, x26, #0x1
   54f38:	add	x1, x1, #0x40
   54f3c:	blr	x2
   54f40:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54f44:	mov	x0, x24
   54f48:	adrp	x1, 57000 <floatformat_from_double@@Base+0x210>
   54f4c:	add	x20, x26, #0x1
   54f50:	add	x1, x1, #0x3b8
   54f54:	blr	x23
   54f58:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54f5c:	mov	x0, x24
   54f60:	adrp	x1, 64000 <fields@@Base+0x52d8>
   54f64:	add	x20, x26, #0x1
   54f68:	add	x1, x1, #0xfe8
   54f6c:	blr	x23
   54f70:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54f74:	cmp	x1, #0x3
   54f78:	b.eq	54f30 <aarch64_get_opcode@@Base+0x7420>  // b.none
   54f7c:	add	x20, x26, #0x1
   54f80:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54f84:	mov	x0, #0x2                   	// #2
   54f88:	str	x0, [x1, #24]
   54f8c:	b	53960 <aarch64_get_opcode@@Base+0x5e50>
   54f90:	mov	x0, x24
   54f94:	adrp	x1, 65000 <fields@@Base+0x62d8>
   54f98:	add	x20, x26, #0x1
   54f9c:	add	x1, x1, #0x238
   54fa0:	blr	x23
   54fa4:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   54fa8:	mov	x0, #0x4                   	// #4
   54fac:	str	x0, [x1, #24]
   54fb0:	b	53960 <aarch64_get_opcode@@Base+0x5e50>
   54fb4:	mov	x0, #0x3                   	// #3
   54fb8:	str	x0, [x1, #24]
   54fbc:	b	53960 <aarch64_get_opcode@@Base+0x5e50>
   54fc0:	cmp	x2, #0x1c
   54fc4:	b.eq	551f8 <aarch64_get_opcode@@Base+0x76e8>  // b.none
   54fc8:	b.hi	55158 <aarch64_get_opcode@@Base+0x7648>  // b.pmore
   54fcc:	cmp	x2, #0x1b
   54fd0:	b.eq	54880 <aarch64_get_opcode@@Base+0x6d70>  // b.none
   54fd4:	mov	x1, #0x1                   	// #1
   54fd8:	mov	x3, #0x1111                	// #4369
   54fdc:	movk	x3, #0x500, lsl #16
   54fe0:	lsl	x2, x1, x2
   54fe4:	tst	x2, x3
   54fe8:	b.ne	551e4 <aarch64_get_opcode@@Base+0x76d4>  // b.any
   54fec:	mov	x1, #0x110000              	// #1114112
   54ff0:	tst	x2, x1
   54ff4:	b.eq	54880 <aarch64_get_opcode@@Base+0x6d70>  // b.none
   54ff8:	adrp	x1, 65000 <fields@@Base+0x62d8>
   54ffc:	add	x20, x26, #0x1
   55000:	add	x1, x1, #0x8
   55004:	blr	x4
   55008:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   5500c:	cmp	x2, #0x3
   55010:	b.hi	55054 <aarch64_get_opcode@@Base+0x7544>  // b.pmore
   55014:	cmp	x2, #0x1
   55018:	b.hi	54be8 <aarch64_get_opcode@@Base+0x70d8>  // b.pmore
   5501c:	b.eq	54c74 <aarch64_get_opcode@@Base+0x7164>  // b.none
   55020:	add	x20, x26, #0x1
   55024:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   55028:	ldr	w0, [sp, #432]
   5502c:	ldr	w2, [sp, #436]
   55030:	cbz	w2, 55068 <aarch64_get_opcode@@Base+0x7558>
   55034:	mov	w2, #0x20                  	// #32
   55038:	sub	w2, w2, w0
   5503c:	cbnz	w1, 54a18 <aarch64_get_opcode@@Base+0x6f08>
   55040:	sub	w2, w0, #0x10
   55044:	b	54a18 <aarch64_get_opcode@@Base+0x6f08>
   55048:	ldr	w0, [sp, #400]
   5504c:	and	w0, w0, #0x1f
   55050:	b	5502c <aarch64_get_opcode@@Base+0x751c>
   55054:	sub	x2, x2, #0x4
   55058:	cmp	x2, #0x3
   5505c:	b.ls	54ca0 <aarch64_get_opcode@@Base+0x7190>  // b.plast
   55060:	add	x20, x26, #0x1
   55064:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   55068:	tbz	w0, #3, 550a8 <aarch64_get_opcode@@Base+0x7598>
   5506c:	cbz	w1, 55190 <aarch64_get_opcode@@Base+0x7680>
   55070:	mov	w2, #0x10                  	// #16
   55074:	sub	w2, w2, w0
   55078:	b	54a18 <aarch64_get_opcode@@Base+0x6f08>
   5507c:	ldr	w0, [sp, #436]
   55080:	cbz	w0, 55184 <aarch64_get_opcode@@Base+0x7674>
   55084:	ldr	w0, [sp, #432]
   55088:	sub	w2, w0, #0x10
   5508c:	b	54a18 <aarch64_get_opcode@@Base+0x6f08>
   55090:	ldr	w1, [sp, #436]
   55094:	ldr	w0, [sp, #400]
   55098:	and	w0, w0, #0x1f
   5509c:	cbnz	w1, 55040 <aarch64_get_opcode@@Base+0x7530>
   550a0:	ldr	x1, [sp, #400]
   550a4:	tbnz	w1, #3, 55190 <aarch64_get_opcode@@Base+0x7680>
   550a8:	mov	x0, x3
   550ac:	adrp	x1, 65000 <fields@@Base+0x62d8>
   550b0:	add	x1, x1, #0x50
   550b4:	str	x3, [sp, #176]
   550b8:	blr	x20
   550bc:	ldr	x3, [sp, #176]
   550c0:	adrp	x1, 65000 <fields@@Base+0x62d8>
   550c4:	add	x1, x1, #0x70
   550c8:	mov	x0, x3
   550cc:	blr	x20
   550d0:	mov	w2, #0x0                   	// #0
   550d4:	ldr	x3, [sp, #176]
   550d8:	b	54a18 <aarch64_get_opcode@@Base+0x6f08>
   550dc:	cmp	x2, #0x1
   550e0:	b.eq	54be8 <aarch64_get_opcode@@Base+0x70d8>  // b.none
   550e4:	cmp	x2, #0x2
   550e8:	b.eq	54c74 <aarch64_get_opcode@@Base+0x7164>  // b.none
   550ec:	cbz	x2, 54ca0 <aarch64_get_opcode@@Base+0x7190>
   550f0:	add	x20, x26, #0x1
   550f4:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   550f8:	cmp	x2, #0x1
   550fc:	b.eq	54c74 <aarch64_get_opcode@@Base+0x7164>  // b.none
   55100:	cmp	x2, #0x2
   55104:	b.eq	54be8 <aarch64_get_opcode@@Base+0x70d8>  // b.none
   55108:	add	x20, x26, #0x1
   5510c:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   55110:	cbnz	x2, 55248 <aarch64_get_opcode@@Base+0x7738>
   55114:	adrp	x1, 65000 <fields@@Base+0x62d8>
   55118:	add	x20, x26, #0x1
   5511c:	add	x1, x1, #0x28
   55120:	blr	x4
   55124:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   55128:	cbz	x2, 54be8 <aarch64_get_opcode@@Base+0x70d8>
   5512c:	cmp	x2, #0x1
   55130:	b.eq	54ca0 <aarch64_get_opcode@@Base+0x7190>  // b.none
   55134:	add	x20, x26, #0x1
   55138:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   5513c:	cmp	x2, #0x1
   55140:	b.eq	54be8 <aarch64_get_opcode@@Base+0x70d8>  // b.none
   55144:	sub	x2, x2, #0x2
   55148:	cmp	x2, #0x1
   5514c:	b.ls	54ca0 <aarch64_get_opcode@@Base+0x7190>  // b.plast
   55150:	add	x20, x26, #0x1
   55154:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   55158:	cmp	x2, #0x1d
   5515c:	b.eq	55234 <aarch64_get_opcode@@Base+0x7724>  // b.none
   55160:	cmp	x2, #0x1e
   55164:	b.ne	54880 <aarch64_get_opcode@@Base+0x6d70>  // b.any
   55168:	adrp	x1, 65000 <fields@@Base+0x62d8>
   5516c:	add	x20, x26, #0x1
   55170:	add	x1, x1, #0x20
   55174:	blr	x4
   55178:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   5517c:	ldr	x2, [sp, #224]
   55180:	b	54970 <aarch64_get_opcode@@Base+0x6e60>
   55184:	ldr	x0, [sp, #400]
   55188:	tbz	w0, #3, 550a8 <aarch64_get_opcode@@Base+0x7598>
   5518c:	ldr	w0, [sp, #432]
   55190:	sub	w2, w0, #0x8
   55194:	b	54a18 <aarch64_get_opcode@@Base+0x6f08>
   55198:	adrp	x1, 59000 <xexit@@Base+0x1e08>
   5519c:	add	x20, x26, #0x1
   551a0:	add	x1, x1, #0x4b0
   551a4:	blr	x2
   551a8:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   551ac:	cmp	w0, #0x85
   551b0:	ldr	x1, [sp, #584]
   551b4:	b.eq	55274 <aarch64_get_opcode@@Base+0x7764>  // b.none
   551b8:	cmp	w0, #0x83
   551bc:	b.eq	55264 <aarch64_get_opcode@@Base+0x7754>  // b.none
   551c0:	ldr	x2, [sp, #584]
   551c4:	mov	x0, x24
   551c8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   551cc:	add	x1, x1, #0x8e8
   551d0:	add	x20, x26, #0x1
   551d4:	blr	x23
   551d8:	ldr	x0, [sp, #584]
   551dc:	str	x0, [sp, #104]
   551e0:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   551e4:	adrp	x1, 65000 <fields@@Base+0x62d8>
   551e8:	add	x20, x26, #0x1
   551ec:	add	x1, x1, #0x0
   551f0:	blr	x4
   551f4:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   551f8:	adrp	x1, 65000 <fields@@Base+0x62d8>
   551fc:	add	x20, x26, #0x1
   55200:	add	x1, x1, #0x10
   55204:	blr	x4
   55208:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   5520c:	adrp	x1, 65000 <fields@@Base+0x62d8>
   55210:	add	x20, x26, #0x1
   55214:	add	x1, x1, #0x48
   55218:	blr	x2
   5521c:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   55220:	adrp	x1, 64000 <fields@@Base+0x52d8>
   55224:	add	x20, x26, #0x1
   55228:	add	x1, x1, #0xff0
   5522c:	blr	x4
   55230:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   55234:	adrp	x1, 65000 <fields@@Base+0x62d8>
   55238:	add	x20, x26, #0x1
   5523c:	add	x1, x1, #0x18
   55240:	blr	x4
   55244:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   55248:	cmp	x2, #0x1
   5524c:	b.ne	54880 <aarch64_get_opcode@@Base+0x6d70>  // b.any
   55250:	adrp	x1, 65000 <fields@@Base+0x62d8>
   55254:	add	x20, x26, #0x1
   55258:	add	x1, x1, #0x30
   5525c:	blr	x4
   55260:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   55264:	cbnz	x1, 551c0 <aarch64_get_opcode@@Base+0x76b0>
   55268:	mov	x0, #0x20                  	// #32
   5526c:	str	x0, [sp, #584]
   55270:	b	551c0 <aarch64_get_opcode@@Base+0x76b0>
   55274:	cmp	x1, #0x1
   55278:	b.eq	552b8 <aarch64_get_opcode@@Base+0x77a8>  // b.none
   5527c:	cmp	x1, #0x10
   55280:	b.ne	552d0 <aarch64_get_opcode@@Base+0x77c0>  // b.any
   55284:	ldp	x20, x2, [x28]
   55288:	adrp	x1, 65000 <fields@@Base+0x62d8>
   5528c:	add	x1, x1, #0x50
   55290:	str	x2, [sp, #176]
   55294:	mov	x0, x2
   55298:	blr	x20
   5529c:	ldr	x2, [sp, #176]
   552a0:	adrp	x1, 65000 <fields@@Base+0x62d8>
   552a4:	add	x1, x1, #0x70
   552a8:	mov	x0, x2
   552ac:	blr	x20
   552b0:	add	x20, x26, #0x1
   552b4:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   552b8:	mov	x0, x24
   552bc:	adrp	x1, 58000 <xexit@@Base+0xe08>
   552c0:	add	x20, x26, #0x1
   552c4:	add	x1, x1, #0x950
   552c8:	blr	x23
   552cc:	b	53728 <aarch64_get_opcode@@Base+0x5c18>
   552d0:	cbz	x1, 54db4 <aarch64_get_opcode@@Base+0x72a4>
   552d4:	adrp	x3, 64000 <fields@@Base+0x52d8>
   552d8:	add	x3, x3, #0x5b0
   552dc:	adrp	x1, 65000 <fields@@Base+0x62d8>
   552e0:	adrp	x0, 59000 <xexit@@Base+0x1e08>
   552e4:	add	x3, x3, #0x10
   552e8:	add	x1, x1, #0x90
   552ec:	add	x0, x0, #0x4b0
   552f0:	mov	w2, #0x2570                	// #9584
   552f4:	bl	35ac0 <__assert_fail@plt>
   552f8:	stp	x29, x30, [sp, #-448]!
   552fc:	mov	x29, sp
   55300:	stp	x21, x22, [sp, #32]
   55304:	mov	x21, x1
   55308:	mov	x22, x0
   5530c:	ldr	x1, [x1, #96]
   55310:	stp	x19, x20, [sp, #16]
   55314:	mov	x19, x2
   55318:	stp	x23, x24, [sp, #48]
   5531c:	ldr	x0, [x1, #8]
   55320:	ldp	x24, x23, [x21]
   55324:	tbz	w0, #15, 55818 <aarch64_get_opcode@@Base+0x7d08>
   55328:	ldr	x1, [x1]
   5532c:	mov	x2, #0xffffffffffcfffff    	// #-3145729
   55330:	cmp	x0, x2
   55334:	ccmn	x1, #0x1, #0x0, eq  // eq = none
   55338:	b.eq	55818 <aarch64_get_opcode@@Base+0x7d08>  // b.none
   5533c:	adrp	x0, 9c000 <aarch64_operands@@Base+0x10bc0>
   55340:	mov	x3, x19
   55344:	add	x0, x0, #0xe70
   55348:	mov	x2, x21
   5534c:	mov	x1, x22
   55350:	mov	w4, #0x1                   	// #1
   55354:	bl	4ee68 <aarch64_get_opcode@@Base+0x1358>
   55358:	cbnz	w0, 55804 <aarch64_get_opcode@@Base+0x7cf4>
   5535c:	mov	x1, x19
   55360:	mov	x0, x21
   55364:	bl	53258 <aarch64_get_opcode@@Base+0x5748>
   55368:	cbnz	w0, 55804 <aarch64_get_opcode@@Base+0x7cf4>
   5536c:	adrp	x0, 8e000 <aarch64_operands@@Base+0x2bc0>
   55370:	add	x0, x0, #0xc70
   55374:	add	x0, x0, #0x3f0
   55378:	mov	x3, x19
   5537c:	mov	x2, x21
   55380:	mov	x1, x22
   55384:	mov	w4, #0x1                   	// #1
   55388:	bl	4ee68 <aarch64_get_opcode@@Base+0x1358>
   5538c:	cbnz	w0, 55804 <aarch64_get_opcode@@Base+0x7cf4>
   55390:	mov	x2, #0xe001                	// #57345
   55394:	adrp	x0, 8f000 <aarch64_operands@@Base+0x3bc0>
   55398:	adrp	x20, 65000 <fields@@Base+0x62d8>
   5539c:	add	x0, x0, #0x4c0
   553a0:	add	x20, x20, #0x408
   553a4:	movk	x2, #0xf00f, lsl #16
   553a8:	mov	x1, #0xffffffff            	// #4294967295
   553ac:	b	553c0 <aarch64_get_opcode@@Base+0x78b0>
   553b0:	ldr	x20, [x0, #88]
   553b4:	add	x0, x0, #0x30
   553b8:	cbz	x20, 55868 <aarch64_get_opcode@@Base+0x7d58>
   553bc:	ldp	x2, x1, [x0, #24]
   553c0:	and	x1, x1, x19
   553c4:	cmp	x1, x2
   553c8:	b.ne	553b0 <aarch64_get_opcode@@Base+0x78a0>  // b.any
   553cc:	ldrb	w2, [x20]
   553d0:	cbz	w2, 55804 <aarch64_get_opcode@@Base+0x7cf4>
   553d4:	asr	x12, x19, #16
   553d8:	asr	x0, x19, #1
   553dc:	asr	x1, x19, #11
   553e0:	tst	w19, #0x1000000
   553e4:	adrp	x5, 65000 <fields@@Base+0x62d8>
   553e8:	adrp	x4, 5b000 <xexit@@Base+0x3e08>
   553ec:	add	x5, x5, #0x410
   553f0:	add	x4, x4, #0xd10
   553f4:	csel	x4, x5, x4, ne  // ne = any
   553f8:	ubfiz	w3, w12, #12, #1
   553fc:	ubfiz	w0, w0, #2, #10
   55400:	ubfiz	w8, w1, #1, #1
   55404:	orr	w3, w3, w0
   55408:	tst	w19, #0x1000000
   5540c:	adrp	x5, 5b000 <xexit@@Base+0x3e08>
   55410:	add	x5, x5, #0x2d0
   55414:	str	x4, [sp, #400]
   55418:	adrp	x4, 5a000 <xexit@@Base+0x2e08>
   5541c:	add	x4, x4, #0xe68
   55420:	orr	w0, w0, w8
   55424:	csel	x4, x5, x4, ne  // ne = any
   55428:	orr	w8, w3, w8
   5542c:	ubfiz	w7, w12, #12, #7
   55430:	tst	w19, #0x4000000
   55434:	orr	w9, w7, w0
   55438:	ubfiz	w6, w12, #12, #5
   5543c:	stp	x25, x26, [sp, #64]
   55440:	mov	x26, #0x100000              	// #1048576
   55444:	csel	x26, x26, xzr, eq  // eq = none
   55448:	tst	x3, #0x1000
   5544c:	str	x4, [sp, #392]
   55450:	sub	x4, x8, #0x2, lsl #12
   55454:	orr	w7, w7, w0
   55458:	csel	x8, x8, x4, eq  // eq = none
   5545c:	orr	w4, w6, w0
   55460:	tst	w19, #0x20000
   55464:	orr	w6, w6, w0
   55468:	sub	x5, x7, #0x80, lsl #12
   5546c:	mov	w3, #0x2                   	// #2
   55470:	mov	w15, #0x4                   	// #4
   55474:	csel	w15, w15, w3, ne  // ne = any
   55478:	tst	x9, #0x40000
   5547c:	sub	x3, x6, #0x20, lsl #12
   55480:	csel	x7, x7, x5, eq  // eq = none
   55484:	tst	x4, #0x10000
   55488:	asr	x5, x19, #13
   5548c:	csel	x6, x6, x3, eq  // eq = none
   55490:	ubfiz	x9, x19, #2, #8
   55494:	ands	x17, x19, #0x800000
   55498:	ubfx	w10, w19, #26, #1
   5549c:	and	w3, w5, #0x1
   554a0:	cneg	x9, x9, eq  // eq = none
   554a4:	tst	x19, #0x100000
   554a8:	mov	w11, #0x53                  	// #83
   554ac:	mov	w4, #0x43                  	// #67
   554b0:	csel	w4, w11, w4, ne  // ne = any
   554b4:	cmp	w10, w3
   554b8:	mov	x3, #0x800000              	// #8388608
   554bc:	csel	x3, x3, xzr, eq  // eq = none
   554c0:	cmp	w10, #0x0
   554c4:	str	w4, [sp, #352]
   554c8:	asr	x4, x19, #4
   554cc:	ubfiz	x14, x19, #1, #11
   554d0:	and	w11, w1, #0x1
   554d4:	and	x13, x4, #0x3ff000
   554d8:	mov	x16, #0x1000000             	// #16777216
   554dc:	csel	x16, x16, xzr, eq  // eq = none
   554e0:	orr	x3, x3, x16
   554e4:	cmp	w10, w11
   554e8:	orr	x10, x13, x14
   554ec:	sub	x11, x22, #0xfff, lsl #12
   554f0:	orr	x3, x3, x10
   554f4:	mov	x10, #0x400000              	// #4194304
   554f8:	csel	x10, x10, xzr, eq  // eq = none
   554fc:	sub	x11, x11, #0xffc
   55500:	orr	x3, x3, x10
   55504:	tst	x19, #0x1000
   55508:	add	x11, x11, x3
   5550c:	asr	x3, x19, #15
   55510:	and	x13, x11, #0xffffffff
   55514:	and	w16, w19, #0xff
   55518:	and	x13, x13, #0xfffffffffffffffd
   5551c:	and	w3, w3, #0x800
   55520:	csel	x11, x11, x13, ne  // ne = any
   55524:	ubfiz	w13, w5, #18, #1
   55528:	asr	x5, x19, #14
   5552c:	str	x11, [sp, #272]
   55530:	and	w11, w4, #0x700
   55534:	mov	w25, w16
   55538:	orr	w3, w3, w11
   5553c:	cmp	x17, #0x0
   55540:	and	x11, x4, #0x3f000
   55544:	str	x17, [sp, #208]
   55548:	mov	w17, w16
   5554c:	and	w16, w5, #0x40
   55550:	and	w5, w19, #0x30
   55554:	orr	x11, x11, x14
   55558:	orr	w5, w16, w5
   5555c:	and	w30, w19, #0xfff
   55560:	ubfx	w14, w19, #16, #4
   55564:	ubfiz	w1, w1, #19, #1
   55568:	stp	x27, x28, [sp, #80]
   5556c:	and	w27, w4, #0xf000
   55570:	orr	w28, w17, w27
   55574:	orr	w1, w1, w13
   55578:	orr	w27, w30, w27
   5557c:	orr	w30, w14, w5
   55580:	ubfx	w14, w19, #8, #4
   55584:	orr	w5, w14, w5
   55588:	orr	x1, x1, x26
   5558c:	sub	x14, x22, #0xff, lsl #12
   55590:	and	x26, x22, #0xfffffffffffffffc
   55594:	orr	x1, x1, x11
   55598:	sub	x14, x14, #0xffc
   5559c:	orr	w28, w28, w3
   555a0:	add	x1, x1, x14
   555a4:	add	x26, x26, #0x4
   555a8:	str	w28, [sp, #144]
   555ac:	add	x28, x22, #0x4
   555b0:	str	x1, [sp, #280]
   555b4:	add	x1, x26, x9
   555b8:	and	x12, x12, #0xf
   555bc:	str	x12, [sp, #128]
   555c0:	orr	w18, w17, w3
   555c4:	str	x1, [sp, #360]
   555c8:	add	x1, x8, x28
   555cc:	ubfx	w16, w19, #16, #4
   555d0:	mov	w10, #0xffffffff            	// #-1
   555d4:	csinc	w10, w10, wzr, eq  // eq = none
   555d8:	str	x1, [sp, #240]
   555dc:	add	x1, x7, x28
   555e0:	str	w18, [sp, #120]
   555e4:	ldr	w18, [sp, #128]
   555e8:	asr	x12, x19, #10
   555ec:	str	w16, [sp, #176]
   555f0:	ubfx	w16, w19, #8, #4
   555f4:	str	x1, [sp, #232]
   555f8:	add	x1, x6, x28
   555fc:	ubfiz	w13, w19, #12, #4
   55600:	str	w5, [sp, #168]
   55604:	and	w5, w19, #0x1f
   55608:	str	x1, [sp, #224]
   5560c:	add	x1, x0, x28
   55610:	str	w16, [sp, #340]
   55614:	asr	x16, x19, #23
   55618:	mul	w10, w10, w17
   5561c:	and	w12, w12, #0x1c
   55620:	add	w5, w5, #0x1
   55624:	orr	w13, w13, w18
   55628:	and	w18, w19, #0xff0
   5562c:	str	w17, [sp, #136]
   55630:	ubfx	w17, w19, #6, #2
   55634:	str	x1, [sp, #256]
   55638:	sub	x1, x28, x0
   5563c:	ldr	w11, [sp, #120]
   55640:	ubfiz	w16, w16, #1, #4
   55644:	orr	w13, w13, w18
   55648:	str	w27, [sp, #124]
   5564c:	str	w13, [sp, #140]
   55650:	lsl	w27, w25, #16
   55654:	str	w5, [sp, #148]
   55658:	adrp	x5, 8d000 <aarch64_operands@@Base+0x1bc0>
   5565c:	add	x5, x5, #0xb70
   55660:	str	w30, [sp, #152]
   55664:	orr	w30, w17, w12
   55668:	str	w30, [sp, #172]
   5566c:	str	x5, [sp, #216]
   55670:	lsl	w18, w25, #24
   55674:	str	x1, [sp, #264]
   55678:	lsl	w13, w25, #8
   5567c:	str	w16, [sp, #292]
   55680:	lsr	w12, w11, #7
   55684:	ldrsw	x1, [sp, #120]
   55688:	orr	w22, w18, w27
   5568c:	str	x1, [sp, #320]
   55690:	lsr	w1, w3, #8
   55694:	str	w1, [sp, #180]
   55698:	orr	w11, w13, w25
   5569c:	ldrsw	x1, [sp, #144]
   556a0:	mov	w0, #0x20                  	// #32
   556a4:	str	x1, [sp, #312]
   556a8:	lsl	w1, w10, #2
   556ac:	str	x1, [sp, #368]
   556b0:	cmp	w30, #0x0
   556b4:	ldrsw	x1, [sp, #140]
   556b8:	orr	w17, w25, #0x80
   556bc:	str	x1, [sp, #304]
   556c0:	orr	w1, w27, w25
   556c4:	str	w1, [sp, #300]
   556c8:	orr	w1, w18, w13
   556cc:	str	w1, [sp, #420]
   556d0:	orr	w1, w11, w22
   556d4:	str	w1, [sp, #296]
   556d8:	mov	w22, #0x0                   	// #0
   556dc:	ldrsw	x1, [sp, #152]
   556e0:	str	x1, [sp, #384]
   556e4:	ldrsw	x1, [sp, #168]
   556e8:	str	x1, [sp, #376]
   556ec:	ldrsw	x1, [sp, #124]
   556f0:	str	x1, [sp, #192]
   556f4:	csel	w1, w30, w0, ne  // ne = any
   556f8:	ldr	w0, [sp, #148]
   556fc:	str	w19, [sp, #160]
   55700:	sub	w0, w0, w30
   55704:	str	w0, [sp, #248]
   55708:	add	w0, w15, w16
   5570c:	str	w0, [sp, #252]
   55710:	add	x0, x5, #0xe70
   55714:	mov	w16, w25
   55718:	str	x0, [sp, #104]
   5571c:	and	w0, w4, #0x3
   55720:	str	w0, [sp, #200]
   55724:	ubfiz	w0, w4, #3, #2
   55728:	str	w0, [sp, #348]
   5572c:	lsl	w0, w16, #2
   55730:	str	w0, [sp, #344]
   55734:	ubfx	w0, w19, #24, #1
   55738:	str	w0, [sp, #412]
   5573c:	ubfx	w0, w19, #21, #2
   55740:	str	w0, [sp, #288]
   55744:	ubfx	w0, w19, #4, #2
   55748:	str	w0, [sp, #416]
   5574c:	and	x0, x19, #0xff
   55750:	str	x0, [sp, #184]
   55754:	add	x0, sp, #0x1b4
   55758:	str	x0, [sp, #328]
   5575c:	ror	w0, w17, w12
   55760:	str	w19, [sp, #356]
   55764:	str	w1, [sp, #408]
   55768:	str	w0, [sp, #204]
   5576c:	str	xzr, [sp, #112]
   55770:	str	wzr, [sp, #156]
   55774:	str	w25, [sp, #336]
   55778:	str	x28, [sp, #424]
   5577c:	b	557a4 <aarch64_get_opcode@@Base+0x7c94>
   55780:	mov	x0, x23
   55784:	adrp	x1, 64000 <fields@@Base+0x52d8>
   55788:	add	x1, x1, #0x870
   5578c:	blr	x24
   55790:	mov	x0, x28
   55794:	mov	x28, x20
   55798:	mov	x20, x0
   5579c:	ldrb	w2, [x28, #1]
   557a0:	cbz	w2, 557c4 <aarch64_get_opcode@@Base+0x7cb4>
   557a4:	cmp	w2, #0x25
   557a8:	add	x28, x20, #0x1
   557ac:	b.ne	55780 <aarch64_get_opcode@@Base+0x7c70>  // b.any
   557b0:	ldrb	w0, [x20, #1]
   557b4:	sub	w0, w0, #0x25
   557b8:	cmp	w0, #0x53
   557bc:	b.ls	55850 <aarch64_get_opcode@@Base+0x7d40>  // b.plast
   557c0:	bl	35670 <abort@plt>
   557c4:	ldr	x2, [sp, #112]
   557c8:	add	x0, x2, #0x10
   557cc:	cmp	x0, #0x30
   557d0:	b.ls	557e4 <aarch64_get_opcode@@Base+0x7cd4>  // b.plast
   557d4:	adrp	x1, 64000 <fields@@Base+0x52d8>
   557d8:	mov	x0, x23
   557dc:	add	x1, x1, #0x8f8
   557e0:	blr	x24
   557e4:	ldr	w0, [sp, #156]
   557e8:	cbz	w0, 55890 <aarch64_get_opcode@@Base+0x7d80>
   557ec:	mov	x0, x23
   557f0:	adrp	x1, 64000 <fields@@Base+0x52d8>
   557f4:	add	x1, x1, #0xb68
   557f8:	blr	x24
   557fc:	ldp	x25, x26, [sp, #64]
   55800:	ldp	x27, x28, [sp, #80]
   55804:	ldp	x19, x20, [sp, #16]
   55808:	ldp	x21, x22, [sp, #32]
   5580c:	ldp	x23, x24, [sp, #48]
   55810:	ldp	x29, x30, [sp], #448
   55814:	ret
   55818:	adrp	x0, 9c000 <aarch64_operands@@Base+0x10bc0>
   5581c:	mov	x3, x19
   55820:	add	x0, x0, #0xe70
   55824:	mov	x2, x21
   55828:	mov	x1, x22
   5582c:	mov	w4, #0x1                   	// #1
   55830:	bl	4ee68 <aarch64_get_opcode@@Base+0x1358>
   55834:	cbnz	w0, 55804 <aarch64_get_opcode@@Base+0x7cf4>
   55838:	ldp	x0, x1, [x21]
   5583c:	mov	x2, x19
   55840:	mov	w3, #0x1                   	// #1
   55844:	bl	507b8 <aarch64_get_opcode@@Base+0x2ca8>
   55848:	cbz	w0, 5536c <aarch64_get_opcode@@Base+0x785c>
   5584c:	b	55804 <aarch64_get_opcode@@Base+0x7cf4>
   55850:	adrp	x1, 64000 <fields@@Base+0x52d8>
   55854:	add	x1, x1, #0x508
   55858:	ldrh	w0, [x1, w0, uxtw #1]
   5585c:	adr	x1, 55868 <aarch64_get_opcode@@Base+0x7d58>
   55860:	add	x0, x1, w0, sxth #2
   55864:	br	x0
   55868:	mov	w2, w19
   5586c:	mov	x0, x23
   55870:	adrp	x1, 64000 <fields@@Base+0x52d8>
   55874:	add	x1, x1, #0xe30
   55878:	blr	x24
   5587c:	ldp	x19, x20, [sp, #16]
   55880:	ldp	x21, x22, [sp, #32]
   55884:	ldp	x23, x24, [sp, #48]
   55888:	ldp	x29, x30, [sp], #448
   5588c:	ret
   55890:	ldp	x25, x26, [sp, #64]
   55894:	ldp	x27, x28, [sp, #80]
   55898:	b	55804 <aarch64_get_opcode@@Base+0x7cf4>
   5589c:	ldr	x3, [sp, #328]
   558a0:	mov	x0, x28
   558a4:	add	x2, sp, #0x1b8
   558a8:	mov	x1, x19
   558ac:	bl	4e550 <aarch64_get_opcode@@Base+0xa40>
   558b0:	mov	x28, x0
   558b4:	ldrb	w0, [x0]
   558b8:	cmp	w0, #0x57
   558bc:	b.eq	564f4 <aarch64_get_opcode@@Base+0x89e4>  // b.none
   558c0:	b.ls	560d0 <aarch64_get_opcode@@Base+0x85c0>  // b.plast
   558c4:	cmp	w0, #0x72
   558c8:	b.eq	5654c <aarch64_get_opcode@@Base+0x8a3c>  // b.none
   558cc:	b.hi	56094 <aarch64_get_opcode@@Base+0x8584>  // b.pmore
   558d0:	cmp	w0, #0x63
   558d4:	b.eq	564cc <aarch64_get_opcode@@Base+0x89bc>  // b.none
   558d8:	cmp	w0, #0x64
   558dc:	b.ne	56060 <aarch64_get_opcode@@Base+0x8550>  // b.any
   558e0:	ldr	x2, [sp, #440]
   558e4:	mov	x0, x23
   558e8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   558ec:	add	x1, x1, #0xf30
   558f0:	add	x20, x28, #0x1
   558f4:	blr	x24
   558f8:	ldr	x0, [sp, #440]
   558fc:	str	x0, [sp, #112]
   55900:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55904:	ldr	w2, [sp, #124]
   55908:	mov	x0, x23
   5590c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   55910:	add	x1, x1, #0xf20
   55914:	add	x20, x20, #0x2
   55918:	blr	x24
   5591c:	ldr	x0, [sp, #192]
   55920:	str	x0, [sp, #112]
   55924:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55928:	mov	w22, #0x1                   	// #1
   5592c:	mov	x0, x23
   55930:	mov	x25, x23
   55934:	adrp	x1, 64000 <fields@@Base+0x52d8>
   55938:	adrp	x27, f9000 <aarch64_opcode_table@@Base+0x55a20>
   5593c:	add	x1, x1, #0x8d0
   55940:	add	x27, x27, #0x650
   55944:	blr	x24
   55948:	mov	x23, x19
   5594c:	mov	w1, #0x0                   	// #0
   55950:	mov	w26, #0x0                   	// #0
   55954:	nop
   55958:	mov	w0, #0x1                   	// #1
   5595c:	mov	w19, w26
   55960:	lsl	w0, w0, w26
   55964:	sxtw	x0, w0
   55968:	tst	x0, x23
   5596c:	b.eq	56038 <aarch64_get_opcode@@Base+0x8528>  // b.none
   55970:	cbnz	w1, 559dc <aarch64_get_opcode@@Base+0x7ecc>
   55974:	cmp	w22, #0x0
   55978:	ccmp	w26, #0xd, #0x0, ne  // ne = any
   5597c:	b.ne	559f8 <aarch64_get_opcode@@Base+0x7ee8>  // b.any
   55980:	ldr	w2, [x27]
   55984:	adrp	x1, 65000 <fields@@Base+0x62d8>
   55988:	ldr	x3, [sp, #104]
   5598c:	mov	w26, #0xe                   	// #14
   55990:	add	x2, x2, x2, lsl #3
   55994:	mov	x0, x25
   55998:	add	x1, x1, #0x480
   5599c:	mov	w19, w26
   559a0:	add	x2, x3, x2, lsl #4
   559a4:	ldr	x2, [x2, #120]
   559a8:	blr	x24
   559ac:	tbnz	w23, #14, 559dc <aarch64_get_opcode@@Base+0x7ecc>
   559b0:	mov	w26, #0xf                   	// #15
   559b4:	mov	w19, w26
   559b8:	tbnz	w23, #15, 559dc <aarch64_get_opcode@@Base+0x7ecc>
   559bc:	mov	x19, x23
   559c0:	mov	x23, x25
   559c4:	add	x20, x20, #0x2
   559c8:	mov	x0, x23
   559cc:	adrp	x1, 64000 <fields@@Base+0x52d8>
   559d0:	add	x1, x1, #0x9b0
   559d4:	blr	x24
   559d8:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   559dc:	mov	x0, x25
   559e0:	adrp	x1, 58000 <xexit@@Base+0xe08>
   559e4:	add	x1, x1, #0xc8
   559e8:	blr	x24
   559ec:	cmp	w22, #0x0
   559f0:	ccmp	w26, #0xd, #0x0, ne  // ne = any
   559f4:	b.eq	55980 <aarch64_get_opcode@@Base+0x7e70>  // b.none
   559f8:	cmp	w22, #0x0
   559fc:	ccmp	w26, #0xf, #0x0, ne  // ne = any
   55a00:	b.ne	56008 <aarch64_get_opcode@@Base+0x84f8>  // b.any
   55a04:	mov	x19, x23
   55a08:	mov	x0, x25
   55a0c:	mov	x23, x25
   55a10:	adrp	x2, 64000 <fields@@Base+0x52d8>
   55a14:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   55a18:	add	x2, x2, #0x758
   55a1c:	add	x1, x1, #0xa78
   55a20:	blr	x24
   55a24:	b	559c4 <aarch64_get_opcode@@Base+0x7eb4>
   55a28:	adrp	x27, f9000 <aarch64_opcode_table@@Base+0x55a20>
   55a2c:	ldr	w25, [sp, #176]
   55a30:	ldr	w4, [sp, #160]
   55a34:	mov	x0, x23
   55a38:	ldr	w2, [x27, #1616]
   55a3c:	mov	w3, w25
   55a40:	and	w26, w4, #0xfff
   55a44:	adrp	x1, 64000 <fields@@Base+0x52d8>
   55a48:	add	x1, x1, #0x938
   55a4c:	add	x20, x20, #0x2
   55a50:	add	x2, x2, x2, lsl #3
   55a54:	add	x2, x3, x2, lsl #1
   55a58:	ldr	x3, [sp, #104]
   55a5c:	add	x2, x2, #0x2
   55a60:	ldr	x2, [x3, x2, lsl #3]
   55a64:	blr	x24
   55a68:	ldr	x0, [sp, #208]
   55a6c:	cbz	x0, 5627c <aarch64_get_opcode@@Base+0x876c>
   55a70:	cmp	w25, #0xf
   55a74:	mov	w27, w26
   55a78:	b.eq	563d4 <aarch64_get_opcode@@Base+0x88c4>  // b.none
   55a7c:	str	x27, [sp, #112]
   55a80:	cbz	w26, 562d8 <aarch64_get_opcode@@Base+0x87c8>
   55a84:	mov	w2, w27
   55a88:	mov	x0, x23
   55a8c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   55a90:	add	x1, x1, #0x958
   55a94:	blr	x24
   55a98:	mov	x0, x23
   55a9c:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   55aa0:	add	x1, x1, #0x4f0
   55aa4:	blr	x24
   55aa8:	ldr	w0, [sp, #176]
   55aac:	cmp	w0, #0xf
   55ab0:	b.ne	5579c <aarch64_get_opcode@@Base+0x7c8c>  // b.any
   55ab4:	mov	x0, x23
   55ab8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   55abc:	add	x1, x1, #0x978
   55ac0:	blr	x24
   55ac4:	ldr	x2, [x21, #120]
   55ac8:	mov	x1, x21
   55acc:	ldr	x0, [sp, #424]
   55ad0:	and	x0, x0, #0xfffffffffffffffc
   55ad4:	add	x0, x0, x27
   55ad8:	blr	x2
   55adc:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55ae0:	ldr	x2, [x21, #120]
   55ae4:	mov	x1, x21
   55ae8:	ldr	x0, [sp, #240]
   55aec:	add	x20, x20, #0x2
   55af0:	blr	x2
   55af4:	mov	x0, x23
   55af8:	adrp	x1, 58000 <xexit@@Base+0xe08>
   55afc:	add	x1, x1, #0xc8
   55b00:	blr	x24
   55b04:	ldr	w2, [sp, #252]
   55b08:	mov	x0, x23
   55b0c:	adrp	x1, 67000 <fields@@Base+0x82d8>
   55b10:	add	x1, x1, #0x6b8
   55b14:	blr	x24
   55b18:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55b1c:	ldr	x2, [x21, #120]
   55b20:	add	x20, x20, #0x2
   55b24:	ldr	x0, [sp, #232]
   55b28:	mov	x1, x21
   55b2c:	blr	x2
   55b30:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55b34:	adrp	x0, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   55b38:	add	x20, x20, #0x2
   55b3c:	ldr	w0, [x0, #1032]
   55b40:	cbz	w0, 5579c <aarch64_get_opcode@@Base+0x7c8c>
   55b44:	ubfx	x2, x0, #4, #4
   55b48:	adrp	x1, 64000 <fields@@Base+0x52d8>
   55b4c:	ldr	x0, [sp, #216]
   55b50:	add	x1, x1, #0x8b0
   55b54:	add	x3, x0, #0xde8
   55b58:	mov	x0, x23
   55b5c:	ldr	x2, [x3, x2, lsl #3]
   55b60:	blr	x24
   55b64:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55b68:	and	x0, x19, #0xf0
   55b6c:	add	x20, x20, #0x2
   55b70:	cmp	x0, #0x60
   55b74:	b.eq	56324 <aarch64_get_opcode@@Base+0x8814>  // b.none
   55b78:	ldr	w0, [sp, #160]
   55b7c:	and	w0, w0, #0xf
   55b80:	bl	4e300 <aarch64_get_opcode@@Base+0x7f0>
   55b84:	mov	x2, x0
   55b88:	cbz	x0, 562ec <aarch64_get_opcode@@Base+0x87dc>
   55b8c:	mov	x0, x23
   55b90:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   55b94:	add	x1, x1, #0xa78
   55b98:	blr	x24
   55b9c:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55ba0:	adrp	x0, f9000 <aarch64_opcode_table@@Base+0x55a20>
   55ba4:	add	x20, x20, #0x2
   55ba8:	ldr	x1, [sp, #160]
   55bac:	ldr	w2, [x0, #1616]
   55bb0:	mov	x0, x23
   55bb4:	and	x3, x1, #0xf
   55bb8:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   55bbc:	add	x1, x1, #0xa78
   55bc0:	add	x2, x2, x2, lsl #3
   55bc4:	add	x2, x3, x2, lsl #1
   55bc8:	ldr	x3, [sp, #104]
   55bcc:	add	x2, x2, #0x2
   55bd0:	ldr	x2, [x3, x2, lsl #3]
   55bd4:	blr	x24
   55bd8:	ldr	w0, [sp, #200]
   55bdc:	cmp	w0, #0x2
   55be0:	b.eq	563ac <aarch64_get_opcode@@Base+0x889c>  // b.none
   55be4:	cmp	w0, #0x3
   55be8:	b.eq	56390 <aarch64_get_opcode@@Base+0x8880>  // b.none
   55bec:	cmp	w0, #0x1
   55bf0:	b.eq	56354 <aarch64_get_opcode@@Base+0x8844>  // b.none
   55bf4:	ldr	w2, [sp, #172]
   55bf8:	cbz	w2, 5579c <aarch64_get_opcode@@Base+0x7c8c>
   55bfc:	mov	x0, x23
   55c00:	adrp	x1, 65000 <fields@@Base+0x62d8>
   55c04:	add	x1, x1, #0x418
   55c08:	blr	x24
   55c0c:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55c10:	adrp	x0, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   55c14:	add	x20, x20, #0x2
   55c18:	ldr	w0, [x0, #1032]
   55c1c:	cbz	w0, 5579c <aarch64_get_opcode@@Base+0x7c8c>
   55c20:	ubfx	x2, x0, #4, #4
   55c24:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   55c28:	ldr	x0, [sp, #216]
   55c2c:	add	x1, x1, #0xa78
   55c30:	add	x3, x0, #0xde8
   55c34:	mov	x0, x23
   55c38:	ldr	x2, [x3, x2, lsl #3]
   55c3c:	blr	x24
   55c40:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55c44:	ldr	w0, [sp, #200]
   55c48:	add	x20, x20, #0x2
   55c4c:	cbz	w0, 5579c <aarch64_get_opcode@@Base+0x7c8c>
   55c50:	ldr	w2, [sp, #348]
   55c54:	mov	x0, x23
   55c58:	adrp	x1, 65000 <fields@@Base+0x62d8>
   55c5c:	add	x1, x1, #0x448
   55c60:	blr	x24
   55c64:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55c68:	ldr	x2, [x21, #120]
   55c6c:	add	x20, x20, #0x2
   55c70:	ldr	x0, [sp, #256]
   55c74:	mov	x1, x21
   55c78:	blr	x2
   55c7c:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55c80:	ldr	x2, [x21, #120]
   55c84:	add	x20, x20, #0x2
   55c88:	ldr	x0, [sp, #264]
   55c8c:	mov	x1, x21
   55c90:	blr	x2
   55c94:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55c98:	ldr	w0, [sp, #180]
   55c9c:	cmp	w0, #0x2
   55ca0:	b.eq	563c4 <aarch64_get_opcode@@Base+0x88b4>  // b.none
   55ca4:	b.hi	56048 <aarch64_get_opcode@@Base+0x8538>  // b.pmore
   55ca8:	ldr	w2, [sp, #336]
   55cac:	cbz	w0, 55cc0 <aarch64_get_opcode@@Base+0x81b0>
   55cb0:	cmp	w0, #0x1
   55cb4:	ldr	w1, [sp, #300]
   55cb8:	ldr	w0, [sp, #204]
   55cbc:	csel	w2, w0, w1, ne  // ne = any
   55cc0:	mov	w0, w2
   55cc4:	str	x0, [sp, #112]
   55cc8:	add	x20, x20, #0x2
   55ccc:	mov	x0, x23
   55cd0:	adrp	x1, 64000 <fields@@Base+0x52d8>
   55cd4:	add	x1, x1, #0xf20
   55cd8:	blr	x24
   55cdc:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55ce0:	ldr	x0, [sp, #128]
   55ce4:	add	x20, x20, #0x2
   55ce8:	cmp	x0, #0xf
   55cec:	b.ne	5579c <aarch64_get_opcode@@Base+0x7c8c>  // b.any
   55cf0:	mov	x0, x23
   55cf4:	adrp	x1, 64000 <fields@@Base+0x52d8>
   55cf8:	add	x1, x1, #0x978
   55cfc:	blr	x24
   55d00:	ldr	x2, [x21, #120]
   55d04:	mov	x1, x21
   55d08:	ldr	x0, [sp, #360]
   55d0c:	blr	x2
   55d10:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55d14:	ldr	w2, [sp, #140]
   55d18:	mov	x0, x23
   55d1c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   55d20:	add	x1, x1, #0xf20
   55d24:	add	x20, x20, #0x2
   55d28:	blr	x24
   55d2c:	ldr	x0, [sp, #304]
   55d30:	str	x0, [sp, #112]
   55d34:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55d38:	ldr	w2, [sp, #144]
   55d3c:	mov	x0, x23
   55d40:	adrp	x1, 64000 <fields@@Base+0x52d8>
   55d44:	add	x1, x1, #0xf20
   55d48:	add	x20, x20, #0x2
   55d4c:	blr	x24
   55d50:	ldr	x0, [sp, #312]
   55d54:	str	x0, [sp, #112]
   55d58:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55d5c:	ldr	w2, [sp, #120]
   55d60:	mov	x0, x23
   55d64:	adrp	x1, 64000 <fields@@Base+0x52d8>
   55d68:	add	x1, x1, #0xf20
   55d6c:	add	x20, x20, #0x2
   55d70:	blr	x24
   55d74:	ldr	x0, [sp, #320]
   55d78:	str	x0, [sp, #112]
   55d7c:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55d80:	adrp	x0, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   55d84:	add	x20, x20, #0x2
   55d88:	ldr	w0, [x0, #1036]
   55d8c:	cbz	w0, 5579c <aarch64_get_opcode@@Base+0x7c8c>
   55d90:	mov	x0, x23
   55d94:	adrp	x1, 64000 <fields@@Base+0x52d8>
   55d98:	add	x1, x1, #0x888
   55d9c:	blr	x24
   55da0:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55da4:	ldr	w2, [sp, #292]
   55da8:	add	x20, x20, #0x2
   55dac:	mov	x0, x23
   55db0:	adrp	x1, 67000 <fields@@Base+0x82d8>
   55db4:	add	x1, x1, #0x6b8
   55db8:	blr	x24
   55dbc:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55dc0:	ldr	w3, [sp, #148]
   55dc4:	add	x20, x20, #0x2
   55dc8:	ldr	w2, [sp, #172]
   55dcc:	mov	x0, x23
   55dd0:	adrp	x1, 65000 <fields@@Base+0x62d8>
   55dd4:	add	x1, x1, #0x490
   55dd8:	blr	x24
   55ddc:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55de0:	ldr	w2, [sp, #172]
   55de4:	add	x20, x20, #0x2
   55de8:	ldr	w3, [sp, #248]
   55dec:	mov	x0, x23
   55df0:	adrp	x1, 65000 <fields@@Base+0x62d8>
   55df4:	add	x1, x1, #0x490
   55df8:	blr	x24
   55dfc:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55e00:	ldr	x0, [sp, #184]
   55e04:	add	x20, x20, #0x2
   55e08:	cbz	x0, 561e8 <aarch64_get_opcode@@Base+0x86d8>
   55e0c:	tbnz	w19, #5, 561e8 <aarch64_get_opcode@@Base+0x86d8>
   55e10:	ldr	w0, [sp, #136]
   55e14:	bl	4e3f8 <aarch64_get_opcode@@Base+0x8e8>
   55e18:	mov	x2, x0
   55e1c:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   55e20:	mov	x0, x23
   55e24:	add	x1, x1, #0xa78
   55e28:	blr	x24
   55e2c:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55e30:	ldr	x0, [sp, #184]
   55e34:	add	x20, x20, #0x2
   55e38:	cbnz	x0, 56210 <aarch64_get_opcode@@Base+0x8700>
   55e3c:	ldr	w2, [sp, #352]
   55e40:	adrp	x1, 64000 <fields@@Base+0x52d8>
   55e44:	mov	x0, x23
   55e48:	add	x1, x1, #0xdd0
   55e4c:	blr	x24
   55e50:	tbz	w19, #11, 55e64 <aarch64_get_opcode@@Base+0x8354>
   55e54:	adrp	x1, 70000 <fields@@Base+0x112d8>
   55e58:	mov	x0, x23
   55e5c:	add	x1, x1, #0xd28
   55e60:	blr	x24
   55e64:	tbz	w19, #10, 55e78 <aarch64_get_opcode@@Base+0x8368>
   55e68:	adrp	x1, 58000 <xexit@@Base+0xe08>
   55e6c:	mov	x0, x23
   55e70:	add	x1, x1, #0xf0
   55e74:	blr	x24
   55e78:	tbz	w19, #9, 55e8c <aarch64_get_opcode@@Base+0x837c>
   55e7c:	adrp	x1, 67000 <fields@@Base+0x82d8>
   55e80:	mov	x0, x23
   55e84:	add	x1, x1, #0x6c8
   55e88:	blr	x24
   55e8c:	tbz	w19, #8, 5579c <aarch64_get_opcode@@Base+0x7c8c>
   55e90:	mov	x0, x23
   55e94:	adrp	x1, 5e000 <xexit@@Base+0x6e08>
   55e98:	add	x1, x1, #0x450
   55e9c:	blr	x24
   55ea0:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55ea4:	ldr	x2, [x21, #120]
   55ea8:	add	x20, x20, #0x2
   55eac:	ldr	x25, [sp, #272]
   55eb0:	mov	x1, x21
   55eb4:	mov	x0, x25
   55eb8:	blr	x2
   55ebc:	mov	w1, #0x1                   	// #1
   55ec0:	mov	w0, #0x2                   	// #2
   55ec4:	strb	w1, [x21, #196]
   55ec8:	str	w0, [x21, #200]
   55ecc:	str	x25, [x21, #208]
   55ed0:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55ed4:	adrp	x0, f9000 <aarch64_opcode_table@@Base+0x55a20>
   55ed8:	ldr	w3, [sp, #176]
   55edc:	ldr	w4, [sp, #160]
   55ee0:	adrp	x1, 64000 <fields@@Base+0x52d8>
   55ee4:	ldr	w2, [x0, #1616]
   55ee8:	add	x20, x20, #0x2
   55eec:	add	x1, x1, #0x938
   55ef0:	mov	x0, x23
   55ef4:	and	w27, w4, #0x200000
   55ef8:	add	x2, x2, x2, lsl #3
   55efc:	add	x2, x3, x2, lsl #1
   55f00:	ldr	x3, [sp, #104]
   55f04:	add	x2, x2, #0x2
   55f08:	ldr	x2, [x3, x2, lsl #3]
   55f0c:	blr	x24
   55f10:	tbz	w19, #24, 5623c <aarch64_get_opcode@@Base+0x872c>
   55f14:	ldr	w0, [sp, #136]
   55f18:	cmp	w0, #0x0
   55f1c:	ldr	x0, [sp, #208]
   55f20:	ccmp	x0, #0x0, #0x4, eq  // eq = none
   55f24:	b.ne	55f4c <aarch64_get_opcode@@Base+0x843c>  // b.any
   55f28:	cbz	x0, 5647c <aarch64_get_opcode@@Base+0x896c>
   55f2c:	ldr	w3, [sp, #344]
   55f30:	adrp	x1, 65000 <fields@@Base+0x62d8>
   55f34:	mov	x0, x23
   55f38:	add	x1, x1, #0x4a0
   55f3c:	mov	w2, #0x2b                  	// #43
   55f40:	blr	x24
   55f44:	ldr	x0, [sp, #368]
   55f48:	str	x0, [sp, #112]
   55f4c:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   55f50:	mov	x0, x23
   55f54:	add	x1, x1, #0x4f0
   55f58:	blr	x24
   55f5c:	cbz	w27, 5579c <aarch64_get_opcode@@Base+0x7c8c>
   55f60:	mov	x0, x23
   55f64:	adrp	x1, 64000 <fields@@Base+0x52d8>
   55f68:	add	x1, x1, #0x8d8
   55f6c:	blr	x24
   55f70:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55f74:	ldr	x2, [x21, #120]
   55f78:	add	x20, x20, #0x2
   55f7c:	ldr	x0, [sp, #224]
   55f80:	mov	x1, x21
   55f84:	blr	x2
   55f88:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55f8c:	add	x20, x20, #0x2
   55f90:	mov	x0, x23
   55f94:	adrp	x1, 64000 <fields@@Base+0x52d8>
   55f98:	add	x1, x1, #0x878
   55f9c:	blr	x24
   55fa0:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55fa4:	ldr	w0, [sp, #288]
   55fa8:	add	x20, x20, #0x2
   55fac:	cmp	w0, #0x2
   55fb0:	b.eq	56308 <aarch64_get_opcode@@Base+0x87f8>  // b.none
   55fb4:	cmp	w0, #0x3
   55fb8:	b.eq	56310 <aarch64_get_opcode@@Base+0x8800>  // b.none
   55fbc:	cmp	w0, #0x1
   55fc0:	b.eq	56344 <aarch64_get_opcode@@Base+0x8834>  // b.none
   55fc4:	ldr	x1, [sp, #392]
   55fc8:	mov	x0, x23
   55fcc:	blr	x24
   55fd0:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55fd4:	add	x20, x20, #0x2
   55fd8:	tbz	w19, #21, 55bf4 <aarch64_get_opcode@@Base+0x80e4>
   55fdc:	ldr	w2, [sp, #172]
   55fe0:	mov	x0, x23
   55fe4:	adrp	x1, 65000 <fields@@Base+0x62d8>
   55fe8:	add	x1, x1, #0x438
   55fec:	blr	x24
   55ff0:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   55ff4:	add	x20, x20, #0x2
   55ff8:	mov	x1, x21
   55ffc:	ldr	x2, [x21, #120]
   56000:	ldr	x25, [sp, #280]
   56004:	b	55eb4 <aarch64_get_opcode@@Base+0x83a4>
   56008:	ldr	w2, [x27]
   5600c:	mov	x0, x25
   56010:	ldr	x3, [sp, #104]
   56014:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   56018:	add	x2, x2, x2, lsl #3
   5601c:	add	x1, x1, #0xa78
   56020:	lsl	x2, x2, #1
   56024:	add	x2, x2, w19, sxtw
   56028:	add	x2, x2, #0x2
   5602c:	ldr	x2, [x3, x2, lsl #3]
   56030:	blr	x24
   56034:	mov	w1, #0x1                   	// #1
   56038:	add	w26, w26, #0x1
   5603c:	cmp	w26, #0x10
   56040:	b.ne	55958 <aarch64_get_opcode@@Base+0x7e48>  // b.any
   56044:	b	559bc <aarch64_get_opcode@@Base+0x7eac>
   56048:	ldr	w0, [sp, #180]
   5604c:	ldr	w1, [sp, #296]
   56050:	cmp	w0, #0x3
   56054:	ldr	w0, [sp, #204]
   56058:	csel	w2, w0, w1, ne  // ne = any
   5605c:	b	55cc0 <aarch64_get_opcode@@Base+0x81b0>
   56060:	cmp	w0, #0x60
   56064:	b.ne	557c0 <aarch64_get_opcode@@Base+0x7cb0>  // b.any
   56068:	ldr	x1, [sp, #440]
   5606c:	add	x0, x28, #0x1
   56070:	cbnz	x1, 56198 <aarch64_get_opcode@@Base+0x8688>
   56074:	ldrb	w2, [x28, #1]
   56078:	mov	x28, x0
   5607c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   56080:	mov	x0, x23
   56084:	add	x1, x1, #0x870
   56088:	add	x20, x28, #0x1
   5608c:	blr	x24
   56090:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   56094:	cmp	w0, #0x73
   56098:	b.ne	5612c <aarch64_get_opcode@@Base+0x861c>  // b.any
   5609c:	ldr	x3, [sp, #440]
   560a0:	cmp	x3, #0x3
   560a4:	b.hi	56554 <aarch64_get_opcode@@Base+0x8a44>  // b.pmore
   560a8:	adrp	x0, 8e000 <aarch64_operands@@Base+0x2bc0>
   560ac:	add	x2, x0, #0xc70
   560b0:	add	x2, x2, #0x830
   560b4:	mov	x0, x23
   560b8:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   560bc:	add	x20, x28, #0x1
   560c0:	add	x1, x1, #0xa78
   560c4:	ldr	x2, [x2, x3, lsl #3]
   560c8:	blr	x24
   560cc:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   560d0:	cmp	w0, #0x44
   560d4:	b.eq	56520 <aarch64_get_opcode@@Base+0x8a10>  // b.none
   560d8:	b.ls	56170 <aarch64_get_opcode@@Base+0x8660>  // b.plast
   560dc:	cmp	w0, #0x52
   560e0:	b.ne	56150 <aarch64_get_opcode@@Base+0x8640>  // b.any
   560e4:	ldr	x3, [sp, #440]
   560e8:	cmp	x3, #0xf
   560ec:	ldr	w0, [sp, #156]
   560f0:	csinc	w0, w0, wzr, ne  // ne = any
   560f4:	str	w0, [sp, #156]
   560f8:	adrp	x2, f9000 <aarch64_opcode_table@@Base+0x55a20>
   560fc:	mov	x0, x23
   56100:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   56104:	add	x20, x28, #0x1
   56108:	ldr	w2, [x2, #1616]
   5610c:	add	x1, x1, #0xa78
   56110:	add	x2, x2, x2, lsl #3
   56114:	add	x2, x3, x2, lsl #1
   56118:	ldr	x3, [sp, #104]
   5611c:	add	x2, x2, #0x2
   56120:	ldr	x2, [x3, x2, lsl #3]
   56124:	blr	x24
   56128:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   5612c:	cmp	w0, #0x78
   56130:	b.ne	557c0 <aarch64_get_opcode@@Base+0x7cb0>  // b.any
   56134:	ldr	w2, [sp, #440]
   56138:	mov	x0, x23
   5613c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   56140:	add	x20, x28, #0x1
   56144:	add	x1, x1, #0xaf0
   56148:	blr	x24
   5614c:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   56150:	cmp	w0, #0x53
   56154:	b.ne	557c0 <aarch64_get_opcode@@Base+0x7cb0>  // b.any
   56158:	ldr	x3, [sp, #440]
   5615c:	cmp	x3, #0xd
   56160:	b.ne	560e8 <aarch64_get_opcode@@Base+0x85d8>  // b.any
   56164:	mov	w0, #0x1                   	// #1
   56168:	str	w0, [sp, #156]
   5616c:	b	560f8 <aarch64_get_opcode@@Base+0x85e8>
   56170:	cmp	w0, #0x27
   56174:	b.ne	561a4 <aarch64_get_opcode@@Base+0x8694>  // b.any
   56178:	ldr	w2, [sp, #436]
   5617c:	mov	x0, #0x1                   	// #1
   56180:	ldr	x1, [sp, #440]
   56184:	lsl	x0, x0, x2
   56188:	sub	x0, x0, #0x1
   5618c:	cmp	x0, x1
   56190:	add	x0, x28, #0x1
   56194:	b.eq	56074 <aarch64_get_opcode@@Base+0x8564>  // b.none
   56198:	mov	x28, x0
   5619c:	add	x20, x28, #0x1
   561a0:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   561a4:	cmp	w0, #0x3f
   561a8:	b.ne	557c0 <aarch64_get_opcode@@Base+0x7cb0>  // b.any
   561ac:	ldr	w2, [sp, #436]
   561b0:	mov	w20, #0x1                   	// #1
   561b4:	ldr	x0, [sp, #440]
   561b8:	adrp	x1, 64000 <fields@@Base+0x52d8>
   561bc:	lsl	w2, w20, w2
   561c0:	add	x1, x1, #0x870
   561c4:	sub	w2, w2, w0
   561c8:	mov	x0, x23
   561cc:	ldrb	w2, [x28, w2, sxtw]
   561d0:	blr	x24
   561d4:	ldr	w0, [sp, #436]
   561d8:	lsl	w20, w20, w0
   561dc:	add	x28, x28, w20, sxtw
   561e0:	add	x20, x28, #0x1
   561e4:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   561e8:	ldr	w0, [sp, #152]
   561ec:	bl	4e130 <aarch64_get_opcode@@Base+0x620>
   561f0:	mov	x2, x0
   561f4:	cbnz	x0, 55b8c <aarch64_get_opcode@@Base+0x807c>
   561f8:	ldr	x2, [sp, #384]
   561fc:	mov	x0, x23
   56200:	adrp	x1, 64000 <fields@@Base+0x52d8>
   56204:	add	x1, x1, #0xdc0
   56208:	blr	x24
   5620c:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   56210:	tbz	w19, #5, 55e10 <aarch64_get_opcode@@Base+0x8300>
   56214:	ldr	w0, [sp, #168]
   56218:	bl	4e130 <aarch64_get_opcode@@Base+0x620>
   5621c:	mov	x2, x0
   56220:	cbnz	x0, 55b8c <aarch64_get_opcode@@Base+0x807c>
   56224:	ldr	x2, [sp, #376]
   56228:	mov	x0, x23
   5622c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   56230:	add	x1, x1, #0xdc0
   56234:	blr	x24
   56238:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   5623c:	adrp	x1, 65000 <fields@@Base+0x62d8>
   56240:	mov	x0, x23
   56244:	add	x1, x1, #0x470
   56248:	blr	x24
   5624c:	cbz	w27, 5636c <aarch64_get_opcode@@Base+0x885c>
   56250:	ldr	x0, [sp, #208]
   56254:	cbz	x0, 564b0 <aarch64_get_opcode@@Base+0x89a0>
   56258:	ldr	w3, [sp, #344]
   5625c:	adrp	x1, 65000 <fields@@Base+0x62d8>
   56260:	mov	x0, x23
   56264:	add	x1, x1, #0x4a8
   56268:	mov	w2, #0x2b                  	// #43
   5626c:	blr	x24
   56270:	ldr	x0, [sp, #368]
   56274:	str	x0, [sp, #112]
   56278:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   5627c:	ldr	w0, [sp, #176]
   56280:	cmp	w0, #0xf
   56284:	b.eq	563cc <aarch64_get_opcode@@Base+0x88bc>  // b.none
   56288:	ldr	w0, [sp, #340]
   5628c:	cbnz	w0, 563ec <aarch64_get_opcode@@Base+0x88dc>
   56290:	ldr	w2, [x27, #1616]
   56294:	adrp	x1, 58000 <xexit@@Base+0xe08>
   56298:	ldr	x0, [sp, #160]
   5629c:	add	x1, x1, #0x7f8
   562a0:	add	x2, x2, x2, lsl #3
   562a4:	and	x3, x0, #0xf
   562a8:	mov	x0, x23
   562ac:	add	x2, x3, x2, lsl #1
   562b0:	ldr	x3, [sp, #104]
   562b4:	add	x2, x2, #0x2
   562b8:	ldr	x2, [x3, x2, lsl #3]
   562bc:	blr	x24
   562c0:	ldr	w2, [sp, #416]
   562c4:	cbz	w2, 562d8 <aarch64_get_opcode@@Base+0x87c8>
   562c8:	adrp	x1, 65000 <fields@@Base+0x62d8>
   562cc:	mov	x0, x23
   562d0:	add	x1, x1, #0x418
   562d4:	blr	x24
   562d8:	mov	x0, x23
   562dc:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   562e0:	add	x1, x1, #0x4f0
   562e4:	blr	x24
   562e8:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   562ec:	ldr	w0, [sp, #356]
   562f0:	adrp	x1, 64000 <fields@@Base+0x52d8>
   562f4:	add	x1, x1, #0xdb0
   562f8:	and	w2, w0, #0xf
   562fc:	mov	x0, x23
   56300:	blr	x24
   56304:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   56308:	ldr	w0, [sp, #412]
   5630c:	cbz	w0, 5579c <aarch64_get_opcode@@Base+0x7c8c>
   56310:	mov	x0, x23
   56314:	adrp	x1, 64000 <fields@@Base+0x52d8>
   56318:	add	x1, x1, #0xaf8
   5631c:	blr	x24
   56320:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   56324:	and	x0, x19, #0xf
   56328:	cmp	x0, #0xf
   5632c:	b.ne	562ec <aarch64_get_opcode@@Base+0x87dc>  // b.any
   56330:	mov	x0, x23
   56334:	adrp	x1, 5e000 <xexit@@Base+0x6e08>
   56338:	add	x1, x1, #0x4c8
   5633c:	blr	x24
   56340:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   56344:	ldr	x1, [sp, #400]
   56348:	mov	x0, x23
   5634c:	blr	x24
   56350:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   56354:	ldr	w2, [sp, #408]
   56358:	mov	x0, x23
   5635c:	adrp	x1, 65000 <fields@@Base+0x62d8>
   56360:	add	x1, x1, #0x428
   56364:	blr	x24
   56368:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   5636c:	ldr	w25, [sp, #136]
   56370:	mov	x0, x23
   56374:	adrp	x1, 65000 <fields@@Base+0x62d8>
   56378:	add	x1, x1, #0x478
   5637c:	mov	w2, w25
   56380:	blr	x24
   56384:	mov	w0, w25
   56388:	str	x0, [sp, #112]
   5638c:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   56390:	ldr	w0, [sp, #172]
   56394:	cbnz	w0, 56498 <aarch64_get_opcode@@Base+0x8988>
   56398:	mov	x0, x23
   5639c:	adrp	x1, 64000 <fields@@Base+0x52d8>
   563a0:	add	x1, x1, #0xb88
   563a4:	blr	x24
   563a8:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   563ac:	ldr	w2, [sp, #408]
   563b0:	mov	x0, x23
   563b4:	adrp	x1, 65000 <fields@@Base+0x62d8>
   563b8:	add	x1, x1, #0x438
   563bc:	blr	x24
   563c0:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   563c4:	ldr	w2, [sp, #420]
   563c8:	b	55cc0 <aarch64_get_opcode@@Base+0x81b0>
   563cc:	neg	w5, w26
   563d0:	sxtw	x27, w5
   563d4:	cbnz	x27, 55a84 <aarch64_get_opcode@@Base+0x7f74>
   563d8:	mov	x0, x23
   563dc:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   563e0:	add	x1, x1, #0x4f0
   563e4:	blr	x24
   563e8:	b	55ab4 <aarch64_get_opcode@@Base+0x7fa4>
   563ec:	ldr	w0, [sp, #340]
   563f0:	cmp	w0, #0xd
   563f4:	b.eq	56588 <aarch64_get_opcode@@Base+0x8a78>  // b.none
   563f8:	b.hi	56450 <aarch64_get_opcode@@Base+0x8940>  // b.pmore
   563fc:	cmp	w0, #0xb
   56400:	b.eq	56594 <aarch64_get_opcode@@Base+0x8a84>  // b.none
   56404:	cmp	w0, #0xc
   56408:	ldr	w0, [sp, #136]
   5640c:	neg	w27, w0
   56410:	b.ne	5642c <aarch64_get_opcode@@Base+0x891c>  // b.any
   56414:	cbnz	x27, 55a84 <aarch64_get_opcode@@Base+0x7f74>
   56418:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   5641c:	add	x1, x1, #0x4f0
   56420:	mov	x0, x23
   56424:	blr	x24
   56428:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   5642c:	ldr	w0, [sp, #340]
   56430:	mov	x2, x27
   56434:	cmp	w0, #0x9
   56438:	b.ne	5659c <aarch64_get_opcode@@Base+0x8a8c>  // b.any
   5643c:	mov	x0, x23
   56440:	adrp	x1, 65000 <fields@@Base+0x62d8>
   56444:	add	x1, x1, #0x468
   56448:	blr	x24
   5644c:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   56450:	ldr	w2, [sp, #136]
   56454:	ldr	w0, [sp, #340]
   56458:	mov	x27, x2
   5645c:	cmp	w0, #0xe
   56460:	b.eq	56414 <aarch64_get_opcode@@Base+0x8904>  // b.none
   56464:	cbnz	x2, 5656c <aarch64_get_opcode@@Base+0x8a5c>
   56468:	mov	x0, x23
   5646c:	adrp	x1, 58000 <xexit@@Base+0xe08>
   56470:	add	x1, x1, #0x888
   56474:	blr	x24
   56478:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   5647c:	ldr	w3, [sp, #344]
   56480:	mov	x0, x23
   56484:	adrp	x1, 65000 <fields@@Base+0x62d8>
   56488:	mov	w2, #0x2d                  	// #45
   5648c:	add	x1, x1, #0x4a0
   56490:	blr	x24
   56494:	b	55f44 <aarch64_get_opcode@@Base+0x8434>
   56498:	ldr	w2, [sp, #172]
   5649c:	mov	x0, x23
   564a0:	adrp	x1, 65000 <fields@@Base+0x62d8>
   564a4:	add	x1, x1, #0x448
   564a8:	blr	x24
   564ac:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   564b0:	ldr	w3, [sp, #344]
   564b4:	mov	x0, x23
   564b8:	adrp	x1, 65000 <fields@@Base+0x62d8>
   564bc:	mov	w2, #0x2d                  	// #45
   564c0:	add	x1, x1, #0x4a8
   564c4:	blr	x24
   564c8:	b	56270 <aarch64_get_opcode@@Base+0x8760>
   564cc:	ldr	x0, [sp, #216]
   564d0:	adrp	x1, 69000 <fields@@Base+0xa2d8>
   564d4:	ldr	x3, [sp, #440]
   564d8:	add	x2, x0, #0xde8
   564dc:	add	x1, x1, #0xa78
   564e0:	mov	x0, x23
   564e4:	add	x20, x28, #0x1
   564e8:	ldr	x2, [x2, x3, lsl #3]
   564ec:	blr	x24
   564f0:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   564f4:	ldr	x2, [sp, #440]
   564f8:	mov	x0, x23
   564fc:	adrp	x1, 64000 <fields@@Base+0x52d8>
   56500:	add	x1, x1, #0xf30
   56504:	add	x20, x28, #0x1
   56508:	lsl	x2, x2, #2
   5650c:	blr	x24
   56510:	ldr	x0, [sp, #440]
   56514:	lsl	x0, x0, #2
   56518:	str	x0, [sp, #112]
   5651c:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   56520:	ldr	x2, [sp, #440]
   56524:	mov	x0, x23
   56528:	adrp	x1, 64000 <fields@@Base+0x52d8>
   5652c:	add	x1, x1, #0xf30
   56530:	add	x2, x2, #0x1
   56534:	blr	x24
   56538:	ldr	x0, [sp, #440]
   5653c:	add	x20, x28, #0x1
   56540:	add	x0, x0, #0x1
   56544:	str	x0, [sp, #112]
   56548:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   5654c:	ldr	x3, [sp, #440]
   56550:	b	560f8 <aarch64_get_opcode@@Base+0x85e8>
   56554:	mov	x0, x23
   56558:	adrp	x1, 64000 <fields@@Base+0x52d8>
   5655c:	add	x20, x28, #0x1
   56560:	add	x1, x1, #0xff0
   56564:	blr	x24
   56568:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>
   5656c:	mov	x0, x23
   56570:	adrp	x1, 64000 <fields@@Base+0x52d8>
   56574:	add	x1, x1, #0x958
   56578:	blr	x24
   5657c:	adrp	x1, 58000 <xexit@@Base+0xe08>
   56580:	add	x1, x1, #0x888
   56584:	b	56420 <aarch64_get_opcode@@Base+0x8910>
   56588:	ldr	w0, [sp, #136]
   5658c:	neg	w2, w0
   56590:	b	56464 <aarch64_get_opcode@@Base+0x8954>
   56594:	ldr	w2, [sp, #136]
   56598:	b	5643c <aarch64_get_opcode@@Base+0x892c>
   5659c:	mov	x0, x23
   565a0:	adrp	x1, 65000 <fields@@Base+0x62d8>
   565a4:	add	x1, x1, #0x458
   565a8:	blr	x24
   565ac:	b	5579c <aarch64_get_opcode@@Base+0x7c8c>

00000000000565b0 <arm_symbol_is_valid@@Base>:
   565b0:	cbz	x0, 565fc <arm_symbol_is_valid@@Base+0x4c>
   565b4:	ldr	x1, [x0, #8]
   565b8:	mov	w0, #0x0                   	// #0
   565bc:	cbz	x1, 565f8 <arm_symbol_is_valid@@Base+0x48>
   565c0:	ldrb	w2, [x1]
   565c4:	cmp	w2, #0x24
   565c8:	b.eq	565f8 <arm_symbol_is_valid@@Base+0x48>  // b.none
   565cc:	stp	x29, x30, [sp, #-16]!
   565d0:	mov	x0, x1
   565d4:	mov	x2, #0xa                   	// #10
   565d8:	mov	x29, sp
   565dc:	adrp	x1, 65000 <fields@@Base+0x62d8>
   565e0:	add	x1, x1, #0x4b0
   565e4:	bl	35440 <strncmp@plt>
   565e8:	cmp	w0, #0x0
   565ec:	cset	w0, ne  // ne = any
   565f0:	ldp	x29, x30, [sp], #16
   565f4:	ret
   565f8:	ret
   565fc:	mov	w0, #0x0                   	// #0
   56600:	ret
   56604:	nop

0000000000056608 <print_insn_big_arm@@Base>:
   56608:	ldr	w2, [x1, #24]
   5660c:	cmp	w2, #0x5
   56610:	b.eq	5661c <print_insn_big_arm@@Base+0x14>  // b.none
   56614:	mov	w2, #0x0                   	// #0
   56618:	b	52830 <aarch64_get_opcode@@Base+0x4d20>
   5661c:	ldr	x2, [x1, #48]
   56620:	cbz	x2, 56614 <print_insn_big_arm@@Base+0xc>
   56624:	ldr	x2, [x2, #240]
   56628:	ldr	x2, [x2, #248]
   5662c:	ldr	x2, [x2, #48]
   56630:	tbz	w2, #23, 56614 <print_insn_big_arm@@Base+0xc>
   56634:	mov	w2, #0x1                   	// #1
   56638:	str	w2, [x1, #44]
   5663c:	mov	w2, #0x0                   	// #0
   56640:	b	52830 <aarch64_get_opcode@@Base+0x4d20>
   56644:	nop

0000000000056648 <print_insn_little_arm@@Base>:
   56648:	mov	w2, #0x1                   	// #1
   5664c:	b	52830 <aarch64_get_opcode@@Base+0x4d20>

0000000000056650 <disassembler_options_arm@@Base>:
   56650:	stp	x29, x30, [sp, #-64]!
   56654:	mov	x29, sp
   56658:	stp	x19, x20, [sp, #16]
   5665c:	stp	x23, x24, [sp, #48]
   56660:	adrp	x23, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   56664:	add	x19, x23, #0x408
   56668:	ldr	x0, [x19, #104]
   5666c:	cbz	x0, 56680 <disassembler_options_arm@@Base+0x30>
   56670:	ldp	x19, x20, [sp, #16]
   56674:	ldp	x23, x24, [sp, #48]
   56678:	ldp	x29, x30, [sp], #64
   5667c:	ret
   56680:	mov	x0, #0x20                  	// #32
   56684:	stp	x21, x22, [sp, #32]
   56688:	bl	35480 <xmalloc@plt>
   5668c:	mov	x21, x0
   56690:	mov	x0, #0x48                  	// #72
   56694:	str	x21, [x19, #104]
   56698:	adrp	x20, 8d000 <aarch64_operands@@Base+0x1bc0>
   5669c:	add	x20, x20, #0xb70
   566a0:	adrp	x24, 57000 <floatformat_from_double@@Base+0x210>
   566a4:	str	xzr, [x21, #24]
   566a8:	add	x20, x20, #0xf00
   566ac:	add	x24, x24, #0x250
   566b0:	mov	x19, #0x0                   	// #0
   566b4:	bl	35480 <xmalloc@plt>
   566b8:	mov	x1, x0
   566bc:	str	x1, [x21]
   566c0:	mov	x0, #0x48                  	// #72
   566c4:	bl	35480 <xmalloc@plt>
   566c8:	mov	x22, x0
   566cc:	adrp	x1, 65000 <fields@@Base+0x62d8>
   566d0:	adrp	x2, 64000 <fields@@Base+0x52d8>
   566d4:	add	x1, x1, #0x4c0
   566d8:	add	x2, x2, #0xe68
   566dc:	stp	x0, xzr, [x21, #8]
   566e0:	ldr	x3, [x21]
   566e4:	b	56708 <disassembler_options_arm@@Base+0xb8>
   566e8:	bl	359e0 <dcgettext@plt>
   566ec:	str	x0, [x22, x19]
   566f0:	cmp	x19, #0x38
   566f4:	add	x19, x19, #0x8
   566f8:	ldp	x3, x22, [x21]
   566fc:	b.eq	56728 <disassembler_options_arm@@Base+0xd8>  // b.none
   56700:	ldp	x2, x1, [x20]
   56704:	add	x20, x20, #0x90
   56708:	str	x2, [x3, x19]
   5670c:	mov	x0, x24
   56710:	mov	w2, #0x5                   	// #5
   56714:	cbnz	x1, 566e8 <disassembler_options_arm@@Base+0x98>
   56718:	str	xzr, [x22, x19]
   5671c:	cmp	x19, #0x38
   56720:	add	x19, x19, #0x8
   56724:	b.ne	56700 <disassembler_options_arm@@Base+0xb0>  // b.any
   56728:	add	x23, x23, #0x408
   5672c:	str	xzr, [x3, #64]
   56730:	str	xzr, [x22, #64]
   56734:	ldp	x19, x20, [sp, #16]
   56738:	ldp	x21, x22, [sp, #32]
   5673c:	ldr	x0, [x23, #104]
   56740:	ldp	x23, x24, [sp, #48]
   56744:	ldp	x29, x30, [sp], #64
   56748:	ret
   5674c:	nop

0000000000056750 <print_arm_disassembler_options@@Base>:
   56750:	stp	x29, x30, [sp, #-80]!
   56754:	mov	w2, #0x5                   	// #5
   56758:	adrp	x1, 65000 <fields@@Base+0x62d8>
   5675c:	mov	x29, sp
   56760:	add	x1, x1, #0x4e0
   56764:	stp	x19, x20, [sp, #16]
   56768:	mov	x19, #0x0                   	// #0
   5676c:	stp	x21, x22, [sp, #32]
   56770:	mov	w20, #0x0                   	// #0
   56774:	stp	x23, x24, [sp, #48]
   56778:	mov	x23, x0
   5677c:	adrp	x24, 8d000 <aarch64_operands@@Base+0x1bc0>
   56780:	stp	x25, x26, [sp, #64]
   56784:	adrp	x25, 57000 <floatformat_from_double@@Base+0x210>
   56788:	add	x0, x25, #0x250
   5678c:	bl	359e0 <dcgettext@plt>
   56790:	add	x21, x24, #0xb70
   56794:	mov	x1, x0
   56798:	mov	x0, x23
   5679c:	bl	35b80 <fprintf@plt>
   567a0:	add	x21, x21, #0xe70
   567a4:	mov	x0, #0xd                   	// #13
   567a8:	b	567b4 <print_arm_disassembler_options@@Base+0x64>
   567ac:	ldr	x0, [x21, x19]
   567b0:	bl	350a0 <strlen@plt>
   567b4:	cmp	w20, w0
   567b8:	add	x19, x19, #0x90
   567bc:	csel	w20, w20, w0, cs  // cs = hs, nlast
   567c0:	cmp	x19, #0x480
   567c4:	b.ne	567ac <print_arm_disassembler_options@@Base+0x5c>  // b.any
   567c8:	add	x24, x24, #0xb70
   567cc:	add	w21, w20, #0x1
   567d0:	add	x19, x24, #0xe78
   567d4:	mov	x0, #0x12f8                	// #4856
   567d8:	adrp	x22, 64000 <fields@@Base+0x52d8>
   567dc:	adrp	x26, 65000 <fields@@Base+0x62d8>
   567e0:	add	x25, x25, #0x250
   567e4:	add	x24, x24, x0
   567e8:	add	x22, x22, #0xe68
   567ec:	add	x26, x26, #0x540
   567f0:	mov	x20, #0xd                   	// #13
   567f4:	b	56808 <print_arm_disassembler_options@@Base+0xb8>
   567f8:	ldur	x22, [x19, #-8]
   567fc:	mov	x0, x22
   56800:	bl	350a0 <strlen@plt>
   56804:	mov	x20, x0
   56808:	ldr	x1, [x19], #144
   5680c:	mov	w2, #0x5                   	// #5
   56810:	mov	x0, x25
   56814:	bl	359e0 <dcgettext@plt>
   56818:	mov	x5, x0
   5681c:	sub	w3, w21, w20
   56820:	mov	x2, x22
   56824:	mov	x1, x26
   56828:	mov	x0, x23
   5682c:	mov	w4, #0x20                  	// #32
   56830:	bl	35b80 <fprintf@plt>
   56834:	cmp	x19, x24
   56838:	b.ne	567f8 <print_arm_disassembler_options@@Base+0xa8>  // b.any
   5683c:	ldp	x19, x20, [sp, #16]
   56840:	ldp	x21, x22, [sp, #32]
   56844:	ldp	x23, x24, [sp, #48]
   56848:	ldp	x25, x26, [sp, #64]
   5684c:	ldp	x29, x30, [sp], #80
   56850:	ret
   56854:	nop
   56858:	mov	w0, #0x1                   	// #1
   5685c:	ret
   56860:	mov	x8, x0
   56864:	cbnz	w1, 568e0 <print_arm_disassembler_options@@Base+0x190>
   56868:	sub	w2, w2, w4
   5686c:	mov	w9, #0x1                   	// #1
   56870:	sub	w1, w2, w3
   56874:	lsr	w6, w1, #3
   56878:	and	w2, w1, #0x7
   5687c:	mov	w0, #0x8                   	// #8
   56880:	add	w5, w2, w4
   56884:	mov	w11, w0
   56888:	cmp	w5, w0
   5688c:	mov	w7, #0x0                   	// #0
   56890:	csel	w5, w5, w0, ls  // ls = plast
   56894:	mov	w10, #0x1                   	// #1
   56898:	mov	x0, #0x0                   	// #0
   5689c:	nop
   568a0:	sub	w3, w5, w2
   568a4:	ldrb	w1, [x8, w6, uxtw]
   568a8:	sub	w4, w4, w3
   568ac:	add	w6, w6, w9
   568b0:	lsl	w5, w10, w3
   568b4:	sub	w5, w5, #0x1
   568b8:	asr	w1, w1, w2
   568bc:	and	w1, w1, w5
   568c0:	cmp	w4, #0x8
   568c4:	mov	w2, #0x0                   	// #0
   568c8:	lsl	w1, w1, w7
   568cc:	csel	w5, w4, w11, ls  // ls = plast
   568d0:	orr	x0, x0, x1
   568d4:	add	w7, w7, w3
   568d8:	cbnz	w4, 568a0 <print_arm_disassembler_options@@Base+0x150>
   568dc:	ret
   568e0:	add	w1, w3, w4
   568e4:	mov	w9, #0xffffffff            	// #-1
   568e8:	add	w6, w1, w9
   568ec:	sub	w1, w2, w1
   568f0:	lsr	w6, w6, #3
   568f4:	b	56878 <print_arm_disassembler_options@@Base+0x128>
   568f8:	mov	x12, x0
   568fc:	stp	x29, x30, [sp, #-16]!
   56900:	mov	x13, x1
   56904:	mov	x29, sp
   56908:	ldp	w14, w15, [x12]
   5690c:	mov	x0, x1
   56910:	ldp	w3, w4, [x12, #12]
   56914:	mov	w1, w14
   56918:	mov	w2, w15
   5691c:	bl	56860 <print_arm_disassembler_options@@Base+0x110>
   56920:	ldr	w3, [x12, #28]
   56924:	mov	x4, x0
   56928:	mov	w1, w14
   5692c:	mov	x12, x4
   56930:	mov	w2, w15
   56934:	mov	x0, x13
   56938:	mov	w4, #0x1                   	// #1
   5693c:	bl	56860 <print_arm_disassembler_options@@Base+0x110>
   56940:	cmp	x12, #0x0
   56944:	cset	w1, eq  // eq = none
   56948:	cmp	x0, #0x0
   5694c:	cset	w0, eq  // eq = none
   56950:	cmp	w1, w0
   56954:	cset	w0, eq  // eq = none
   56958:	ldp	x29, x30, [sp], #16
   5695c:	ret
   56960:	ldp	w14, w12, [x0, #28]
   56964:	cmp	w12, #0x0
   56968:	b.le	569cc <print_arm_disassembler_options@@Base+0x27c>
   5696c:	stp	x29, x30, [sp, #-32]!
   56970:	mov	x15, x1
   56974:	mov	x29, sp
   56978:	stp	x19, x20, [sp, #16]
   5697c:	mov	w19, #0x20                  	// #32
   56980:	ldp	w20, w18, [x0]
   56984:	b	56994 <print_arm_disassembler_options@@Base+0x244>
   56988:	add	w14, w14, w13
   5698c:	cmp	w12, #0x0
   56990:	b.le	569c0 <print_arm_disassembler_options@@Base+0x270>
   56994:	cmp	w12, #0x20
   56998:	mov	w3, w14
   5699c:	csel	w13, w12, w19, le
   569a0:	mov	w2, w18
   569a4:	sub	w12, w12, w13
   569a8:	mov	w4, w13
   569ac:	mov	w1, w20
   569b0:	mov	x0, x15
   569b4:	bl	56860 <print_arm_disassembler_options@@Base+0x110>
   569b8:	cbz	x0, 56988 <print_arm_disassembler_options@@Base+0x238>
   569bc:	mov	w0, #0x1                   	// #1
   569c0:	ldp	x19, x20, [sp, #16]
   569c4:	ldp	x29, x30, [sp], #32
   569c8:	ret
   569cc:	mov	w0, #0x0                   	// #0
   569d0:	ret
   569d4:	nop
   569d8:	stp	x29, x30, [sp, #-64]!
   569dc:	mov	x2, x0
   569e0:	mov	x14, x1
   569e4:	mov	x29, sp
   569e8:	stp	x19, x20, [sp, #16]
   569ec:	mov	x0, x1
   569f0:	ldr	x19, [x2, #56]
   569f4:	stp	x21, x22, [sp, #32]
   569f8:	add	x21, x1, #0x8
   569fc:	ldp	w12, w13, [x19, #12]
   56a00:	ldp	w15, w18, [x19]
   56a04:	mov	w4, w13
   56a08:	mov	w3, w12
   56a0c:	mov	w1, w15
   56a10:	mov	w2, w18
   56a14:	bl	56860 <print_arm_disassembler_options@@Base+0x110>
   56a18:	mov	w4, w13
   56a1c:	mov	x13, x0
   56a20:	mov	w1, w15
   56a24:	mov	w3, w12
   56a28:	mov	w2, w18
   56a2c:	mov	x0, x21
   56a30:	bl	56860 <print_arm_disassembler_options@@Base+0x110>
   56a34:	mov	x20, x0
   56a38:	ldr	w1, [x19, #24]
   56a3c:	cmp	x13, x1
   56a40:	b.eq	56b04 <print_arm_disassembler_options@@Base+0x3b4>  // b.none
   56a44:	cbz	x13, 56b1c <print_arm_disassembler_options@@Base+0x3cc>
   56a48:	str	x23, [sp, #48]
   56a4c:	sub	x23, x13, #0x35
   56a50:	cmp	x23, x20
   56a54:	mov	w0, #0x1                   	// #1
   56a58:	b.gt	56af0 <print_arm_disassembler_options@@Base+0x3a0>
   56a5c:	sub	x13, x13, #0x34
   56a60:	cmp	x20, #0x0
   56a64:	ccmp	x13, x20, #0x0, ne  // ne = any
   56a68:	b.le	56b90 <print_arm_disassembler_options@@Base+0x440>
   56a6c:	ldr	w22, [x19, #32]
   56a70:	cbnz	x20, 56b48 <print_arm_disassembler_options@@Base+0x3f8>
   56a74:	cbz	w22, 56af0 <print_arm_disassembler_options@@Base+0x3a0>
   56a78:	ldr	w20, [x19, #28]
   56a7c:	mov	w12, #0x0                   	// #0
   56a80:	mov	w19, #0xffffffff            	// #-1
   56a84:	nop
   56a88:	add	w3, w12, w20
   56a8c:	mov	w2, w18
   56a90:	mov	w1, w15
   56a94:	mov	x0, x21
   56a98:	mov	w4, #0x1                   	// #1
   56a9c:	bl	56860 <print_arm_disassembler_options@@Base+0x110>
   56aa0:	cbz	x0, 56ab0 <print_arm_disassembler_options@@Base+0x360>
   56aa4:	cmn	w19, #0x1
   56aa8:	b.ne	56acc <print_arm_disassembler_options@@Base+0x37c>  // b.any
   56aac:	mov	w19, w12
   56ab0:	add	w12, w12, #0x1
   56ab4:	cmp	w12, w22
   56ab8:	b.ne	56a88 <print_arm_disassembler_options@@Base+0x338>  // b.any
   56abc:	cmn	w19, #0x1
   56ac0:	mov	w0, #0x1                   	// #1
   56ac4:	b.eq	56af0 <print_arm_disassembler_options@@Base+0x3a0>  // b.none
   56ac8:	mov	w12, #0xffffffff            	// #-1
   56acc:	neg	w19, w19
   56ad0:	mov	w0, #0x1                   	// #1
   56ad4:	cmp	x23, w19, sxtw
   56ad8:	sxtw	x19, w19
   56adc:	b.gt	56af0 <print_arm_disassembler_options@@Base+0x3a0>
   56ae0:	cmp	x13, x19
   56ae4:	mov	w0, #0x0                   	// #0
   56ae8:	ccmn	w12, #0x1, #0x0, gt
   56aec:	b.eq	56b9c <print_arm_disassembler_options@@Base+0x44c>  // b.none
   56af0:	ldr	x23, [sp, #48]
   56af4:	ldp	x19, x20, [sp, #16]
   56af8:	ldp	x21, x22, [sp, #32]
   56afc:	ldp	x29, x30, [sp], #64
   56b00:	ret
   56b04:	mov	x1, x14
   56b08:	mov	x0, x19
   56b0c:	bl	56960 <print_arm_disassembler_options@@Base+0x210>
   56b10:	mov	w1, w0
   56b14:	mov	w0, #0x1                   	// #1
   56b18:	cbnz	w1, 56af4 <print_arm_disassembler_options@@Base+0x3a4>
   56b1c:	mov	w0, #0x0                   	// #0
   56b20:	cbnz	x20, 56af4 <print_arm_disassembler_options@@Base+0x3a4>
   56b24:	mov	x1, x21
   56b28:	mov	x0, x19
   56b2c:	bl	56960 <print_arm_disassembler_options@@Base+0x210>
   56b30:	cmp	w0, #0x0
   56b34:	cset	w0, eq  // eq = none
   56b38:	ldp	x19, x20, [sp, #16]
   56b3c:	ldp	x21, x22, [sp, #32]
   56b40:	ldp	x29, x30, [sp], #64
   56b44:	ret
   56b48:	ldr	w3, [x19, #28]
   56b4c:	mov	w4, w0
   56b50:	mov	w1, w15
   56b54:	mov	w2, w18
   56b58:	add	w3, w22, w3
   56b5c:	mov	x0, x14
   56b60:	sub	w3, w3, #0x1
   56b64:	bl	56860 <print_arm_disassembler_options@@Base+0x110>
   56b68:	mov	x1, x0
   56b6c:	mov	w0, #0x0                   	// #0
   56b70:	cbnz	x1, 56af0 <print_arm_disassembler_options@@Base+0x3a0>
   56b74:	mov	x1, x21
   56b78:	mov	x0, x19
   56b7c:	bl	56960 <print_arm_disassembler_options@@Base+0x210>
   56b80:	cmp	w0, #0x0
   56b84:	cset	w0, eq  // eq = none
   56b88:	ldr	x23, [sp, #48]
   56b8c:	b	56af4 <print_arm_disassembler_options@@Base+0x3a4>
   56b90:	mov	w0, #0x0                   	// #0
   56b94:	ldr	x23, [sp, #48]
   56b98:	b	56af4 <print_arm_disassembler_options@@Base+0x3a4>
   56b9c:	add	w3, w20, w22
   56ba0:	mov	w2, w18
   56ba4:	sub	w3, w3, #0x1
   56ba8:	mov	w1, w15
   56bac:	mov	x0, x14
   56bb0:	mov	w4, #0x1                   	// #1
   56bb4:	bl	56860 <print_arm_disassembler_options@@Base+0x110>
   56bb8:	cmp	x0, #0x0
   56bbc:	cset	w0, eq  // eq = none
   56bc0:	ldr	x23, [sp, #48]
   56bc4:	b	56af4 <print_arm_disassembler_options@@Base+0x3a4>
   56bc8:	cbnz	w1, 56c40 <print_arm_disassembler_options@@Base+0x4f0>
   56bcc:	sub	w2, w2, w4
   56bd0:	mov	w9, #0x1                   	// #1
   56bd4:	sub	w1, w2, w3
   56bd8:	lsr	w7, w1, #3
   56bdc:	and	w3, w1, #0x7
   56be0:	mov	w1, #0x8                   	// #8
   56be4:	add	w2, w3, w4
   56be8:	mov	w11, w1
   56bec:	cmp	w2, w1
   56bf0:	mov	w10, #0x1                   	// #1
   56bf4:	csel	w2, w2, w1, ls  // ls = plast
   56bf8:	sub	w2, w2, w3
   56bfc:	ldrb	w6, [x0, w7, uxtw]
   56c00:	lsl	x8, x5, x3
   56c04:	sub	w4, w4, w2
   56c08:	lsl	w1, w10, w2
   56c0c:	sub	w1, w1, #0x1
   56c10:	eor	w8, w6, w8
   56c14:	cmp	w4, #0x8
   56c18:	lsl	w1, w1, w3
   56c1c:	and	w1, w1, w8
   56c20:	eor	w1, w6, w1
   56c24:	strb	w1, [x0, w7, uxtw]
   56c28:	lsr	x5, x5, x2
   56c2c:	add	w7, w7, w9
   56c30:	csel	w2, w4, w11, ls  // ls = plast
   56c34:	mov	w3, #0x0                   	// #0
   56c38:	cbnz	w4, 56bf8 <print_arm_disassembler_options@@Base+0x4a8>
   56c3c:	ret
   56c40:	add	w3, w3, w4
   56c44:	mov	w9, #0xffffffff            	// #-1
   56c48:	add	w7, w3, w9
   56c4c:	sub	w1, w2, w3
   56c50:	lsr	w7, w7, #3
   56c54:	b	56bdc <print_arm_disassembler_options@@Base+0x48c>

0000000000056c58 <floatformat_to_double@@Base>:
   56c58:	stp	x29, x30, [sp, #-112]!
   56c5c:	mov	x29, sp
   56c60:	stp	x21, x22, [sp, #32]
   56c64:	mov	x21, x0
   56c68:	mov	x0, x1
   56c6c:	stp	x23, x24, [sp, #48]
   56c70:	ldp	w3, w4, [x21, #12]
   56c74:	stp	x25, x26, [sp, #64]
   56c78:	mov	x25, x2
   56c7c:	ldp	w23, w2, [x21]
   56c80:	mov	x26, x1
   56c84:	str	w2, [sp, #108]
   56c88:	mov	w1, w23
   56c8c:	bl	56860 <print_arm_disassembler_options@@Base+0x110>
   56c90:	ldr	w1, [x21, #24]
   56c94:	ldr	w2, [sp, #108]
   56c98:	cmp	x0, x1
   56c9c:	b.eq	56d74 <floatformat_to_double@@Base+0x11c>  // b.none
   56ca0:	stp	x19, x20, [sp, #16]
   56ca4:	ldr	w20, [x21, #20]
   56ca8:	ldp	w22, w19, [x21, #28]
   56cac:	str	d8, [sp, #80]
   56cb0:	cbz	x0, 56d60 <floatformat_to_double@@Base+0x108>
   56cb4:	ldr	w1, [x21, #36]
   56cb8:	sub	x20, x0, w20, sxtw
   56cbc:	cmp	w1, #0x1
   56cc0:	b.eq	56dd8 <floatformat_to_double@@Base+0x180>  // b.none
   56cc4:	movi	d8, #0x0
   56cc8:	add	x20, x20, #0x1
   56ccc:	cmp	w19, #0x0
   56cd0:	b.le	56d20 <floatformat_to_double@@Base+0xc8>
   56cd4:	mov	w24, #0x20                  	// #32
   56cd8:	cmp	w19, #0x20
   56cdc:	mov	w3, w22
   56ce0:	csel	w12, w19, w24, le
   56ce4:	mov	w1, w23
   56ce8:	mov	w4, w12
   56cec:	mov	x0, x26
   56cf0:	bl	56860 <print_arm_disassembler_options@@Base+0x110>
   56cf4:	mov	x3, x0
   56cf8:	sub	w19, w19, w12
   56cfc:	sub	w0, w20, w12
   56d00:	ucvtf	d0, x3
   56d04:	add	w22, w22, w12
   56d08:	sub	x20, x20, w12, sxtw
   56d0c:	bl	351d0 <ldexp@plt>
   56d10:	fadd	d8, d8, d0
   56d14:	ldp	w23, w2, [x21]
   56d18:	cmp	w19, #0x0
   56d1c:	b.gt	56cd8 <floatformat_to_double@@Base+0x80>
   56d20:	ldr	w3, [x21, #8]
   56d24:	mov	w1, w23
   56d28:	mov	x0, x26
   56d2c:	mov	w4, #0x1                   	// #1
   56d30:	bl	56860 <print_arm_disassembler_options@@Base+0x110>
   56d34:	fneg	d0, d8
   56d38:	cmp	x0, #0x0
   56d3c:	ldp	x19, x20, [sp, #16]
   56d40:	fcsel	d8, d0, d8, ne  // ne = any
   56d44:	ldp	x21, x22, [sp, #32]
   56d48:	ldp	x23, x24, [sp, #48]
   56d4c:	str	d8, [x25]
   56d50:	ldp	x25, x26, [sp, #64]
   56d54:	ldr	d8, [sp, #80]
   56d58:	ldp	x29, x30, [sp], #112
   56d5c:	ret
   56d60:	mov	w0, #0x1                   	// #1
   56d64:	sub	w20, w0, w20
   56d68:	movi	d8, #0x0
   56d6c:	sxtw	x20, w20
   56d70:	b	56ccc <floatformat_to_double@@Base+0x74>
   56d74:	mov	x1, x26
   56d78:	mov	x0, x21
   56d7c:	str	w2, [sp, #108]
   56d80:	bl	56960 <print_arm_disassembler_options@@Base+0x210>
   56d84:	cmp	w0, #0x0
   56d88:	mov	x1, #0x7ff0000000000000    	// #9218868437227405312
   56d8c:	mov	x0, #0x7ff8000000000000    	// #9221120237041090560
   56d90:	fmov	d1, x1
   56d94:	fmov	d0, x0
   56d98:	ldr	w3, [x21, #8]
   56d9c:	ldr	w2, [sp, #108]
   56da0:	mov	w1, w23
   56da4:	fcsel	d0, d0, d1, ne  // ne = any
   56da8:	mov	x0, x26
   56dac:	mov	w4, #0x1                   	// #1
   56db0:	bl	56860 <print_arm_disassembler_options@@Base+0x110>
   56db4:	fneg	d1, d0
   56db8:	cmp	x0, #0x0
   56dbc:	ldp	x21, x22, [sp, #32]
   56dc0:	fcsel	d0, d1, d0, ne  // ne = any
   56dc4:	ldp	x23, x24, [sp, #48]
   56dc8:	str	d0, [x25]
   56dcc:	ldp	x25, x26, [sp, #64]
   56dd0:	ldp	x29, x30, [sp], #112
   56dd4:	ret
   56dd8:	fmov	d0, #1.000000000000000000e+00
   56ddc:	mov	w0, w20
   56de0:	bl	351d0 <ldexp@plt>
   56de4:	fmov	d8, d0
   56de8:	ldp	w23, w2, [x21]
   56dec:	b	56ccc <floatformat_to_double@@Base+0x74>

0000000000056df0 <floatformat_from_double@@Base>:
   56df0:	stp	x29, x30, [sp, #-96]!
   56df4:	mov	x3, x1
   56df8:	mov	w1, #0x0                   	// #0
   56dfc:	mov	x29, sp
   56e00:	stp	x19, x20, [sp, #16]
   56e04:	mov	x19, x0
   56e08:	mov	x20, x2
   56e0c:	mov	x0, x2
   56e10:	ldr	w2, [x19, #4]
   56e14:	str	d8, [sp, #72]
   56e18:	ldr	d8, [x3]
   56e1c:	lsr	w2, w2, #3
   56e20:	bl	35470 <memset@plt>
   56e24:	fcmpe	d8, #0.0
   56e28:	b.mi	56f7c <floatformat_from_double@@Base+0x18c>  // b.first
   56e2c:	fcmp	d8, #0.0
   56e30:	b.eq	56f64 <floatformat_from_double@@Base+0x174>  // b.none
   56e34:	fcmp	d8, d8
   56e38:	stp	x21, x22, [sp, #32]
   56e3c:	stp	x23, x24, [sp, #48]
   56e40:	ldr	w24, [x19, #12]
   56e44:	ldp	w22, w23, [x19]
   56e48:	str	x25, [sp, #64]
   56e4c:	ldr	w25, [x19, #16]
   56e50:	b.ne	57000 <floatformat_from_double@@Base+0x210>  // b.any
   56e54:	fadd	d0, d8, d8
   56e58:	fcmp	d0, d8
   56e5c:	b.eq	56f9c <floatformat_from_double@@Base+0x1ac>  // b.none
   56e60:	fmov	d0, d8
   56e64:	add	x0, sp, #0x5c
   56e68:	bl	35850 <frexp@plt>
   56e6c:	ldr	w21, [sp, #92]
   56e70:	ldr	w5, [x19, #20]
   56e74:	add	w5, w21, w5
   56e78:	cmp	w5, #0x1
   56e7c:	b.le	56fd0 <floatformat_from_double@@Base+0x1e0>
   56e80:	sub	w5, w5, #0x1
   56e84:	mov	w4, w25
   56e88:	mov	w3, w24
   56e8c:	mov	w2, w23
   56e90:	sxtw	x5, w5
   56e94:	mov	w1, w22
   56e98:	mov	x0, x20
   56e9c:	bl	56bc8 <print_arm_disassembler_options@@Base+0x478>
   56ea0:	ldp	w13, w0, [x19, #28]
   56ea4:	cmp	w0, #0x0
   56ea8:	mov	w12, w0
   56eac:	b.le	56f58 <floatformat_from_double@@Base+0x168>
   56eb0:	mov	x1, #0x41f0000000000000    	// #4751297606875873280
   56eb4:	mov	w14, #0x20                  	// #32
   56eb8:	fmov	d2, x1
   56ebc:	b	56ef0 <floatformat_from_double@@Base+0x100>
   56ec0:	cmp	w12, #0x1f
   56ec4:	b.gt	56f74 <floatformat_from_double@@Base+0x184>
   56ec8:	lsr	x5, x5, x0
   56ecc:	ldp	w1, w2, [x19]
   56ed0:	sub	w12, w12, w4
   56ed4:	mov	w3, w13
   56ed8:	add	w13, w13, w4
   56edc:	mov	x0, x20
   56ee0:	bl	56bc8 <print_arm_disassembler_options@@Base+0x478>
   56ee4:	cmp	w12, #0x0
   56ee8:	b.le	56f58 <floatformat_from_double@@Base+0x168>
   56eec:	ldr	w0, [x19, #32]
   56ef0:	fmul	d0, d0, d2
   56ef4:	cmp	w12, #0x20
   56ef8:	csel	w4, w12, w14, le
   56efc:	cmp	w12, w0
   56f00:	sub	w0, w14, w4
   56f04:	fcvtzu	x5, d0
   56f08:	ucvtf	d1, x5
   56f0c:	fsub	d0, d0, d1
   56f10:	b.ne	56ec0 <floatformat_from_double@@Base+0xd0>  // b.any
   56f14:	ldr	w1, [x19, #36]
   56f18:	cmp	w1, #0x1
   56f1c:	b.ne	56ec0 <floatformat_from_double@@Base+0xd0>  // b.any
   56f20:	ldr	w1, [x19, #20]
   56f24:	add	w1, w21, w1
   56f28:	cmp	w1, #0x1
   56f2c:	b.le	56ec0 <floatformat_from_double@@Base+0xd0>
   56f30:	sub	w4, w4, #0x1
   56f34:	mov	w3, w13
   56f38:	ldp	w1, w2, [x19]
   56f3c:	sub	w12, w12, w4
   56f40:	add	w13, w13, w4
   56f44:	and	x5, x5, #0x7fffffff
   56f48:	mov	x0, x20
   56f4c:	bl	56bc8 <print_arm_disassembler_options@@Base+0x478>
   56f50:	cmp	w12, #0x0
   56f54:	b.gt	56eec <floatformat_from_double@@Base+0xfc>
   56f58:	ldp	x21, x22, [sp, #32]
   56f5c:	ldp	x23, x24, [sp, #48]
   56f60:	ldr	x25, [sp, #64]
   56f64:	ldp	x19, x20, [sp, #16]
   56f68:	ldr	d8, [sp, #72]
   56f6c:	ldp	x29, x30, [sp], #96
   56f70:	ret
   56f74:	mov	w4, #0x20                  	// #32
   56f78:	b	56ecc <floatformat_from_double@@Base+0xdc>
   56f7c:	fneg	d8, d8
   56f80:	ldr	w3, [x19, #8]
   56f84:	ldp	w1, w2, [x19]
   56f88:	mov	x5, #0x1                   	// #1
   56f8c:	mov	x0, x20
   56f90:	mov	w4, w5
   56f94:	bl	56bc8 <print_arm_disassembler_options@@Base+0x478>
   56f98:	b	56e2c <floatformat_from_double@@Base+0x3c>
   56f9c:	ldr	w5, [x19, #24]
   56fa0:	mov	w4, w25
   56fa4:	mov	w3, w24
   56fa8:	mov	w2, w23
   56fac:	mov	w1, w22
   56fb0:	mov	x0, x20
   56fb4:	ldp	x19, x20, [sp, #16]
   56fb8:	ldp	x21, x22, [sp, #32]
   56fbc:	ldp	x23, x24, [sp, #48]
   56fc0:	ldr	x25, [sp, #64]
   56fc4:	ldr	d8, [sp, #72]
   56fc8:	ldp	x29, x30, [sp], #96
   56fcc:	b	56bc8 <print_arm_disassembler_options@@Base+0x478>
   56fd0:	mov	x0, x20
   56fd4:	mov	w4, w25
   56fd8:	mov	w3, w24
   56fdc:	mov	w2, w23
   56fe0:	mov	w1, w22
   56fe4:	mov	x5, #0x0                   	// #0
   56fe8:	bl	56bc8 <print_arm_disassembler_options@@Base+0x478>
   56fec:	ldr	w0, [x19, #20]
   56ff0:	add	w0, w21, w0
   56ff4:	sub	w0, w0, #0x1
   56ff8:	bl	351d0 <ldexp@plt>
   56ffc:	b	56ea0 <floatformat_from_double@@Base+0xb0>
   57000:	ldr	w5, [x19, #24]
   57004:	mov	w4, w25
   57008:	mov	w3, w24
   5700c:	mov	w2, w23
   57010:	mov	w1, w22
   57014:	mov	x0, x20
   57018:	bl	56bc8 <print_arm_disassembler_options@@Base+0x478>
   5701c:	ldp	w1, w2, [x19]
   57020:	mov	x5, #0x1                   	// #1
   57024:	ldr	w3, [x19, #28]
   57028:	mov	w4, #0x20                  	// #32
   5702c:	ldp	x19, x20, [sp, #16]
   57030:	ldp	x21, x22, [sp, #32]
   57034:	ldp	x23, x24, [sp, #48]
   57038:	ldr	x25, [sp, #64]
   5703c:	ldr	d8, [sp, #72]
   57040:	ldp	x29, x30, [sp], #96
   57044:	b	56bc8 <print_arm_disassembler_options@@Base+0x478>

0000000000057048 <floatformat_is_valid@@Base>:
   57048:	ldr	x2, [x0, #48]
   5704c:	mov	x16, x2
   57050:	br	x16
   57054:	nop

0000000000057058 <xmalloc_set_program_name@@Base>:
   57058:	stp	x29, x30, [sp, #-32]!
   5705c:	adrp	x2, f9000 <aarch64_opcode_table@@Base+0x55a20>
   57060:	mov	x29, sp
   57064:	str	x19, [sp, #16]
   57068:	adrp	x19, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   5706c:	str	x0, [x2, #1624]
   57070:	ldr	x1, [x19, #1144]
   57074:	cbz	x1, 57084 <xmalloc_set_program_name@@Base+0x2c>
   57078:	ldr	x19, [sp, #16]
   5707c:	ldp	x29, x30, [sp], #32
   57080:	ret
   57084:	mov	x0, #0x0                   	// #0
   57088:	bl	35160 <sbrk@plt>
   5708c:	str	x0, [x19, #1144]
   57090:	ldr	x19, [sp, #16]
   57094:	ldp	x29, x30, [sp], #32
   57098:	ret
   5709c:	nop

00000000000570a0 <xmalloc_failed@@Base>:
   570a0:	stp	x29, x30, [sp, #-32]!
   570a4:	adrp	x1, 10e000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   570a8:	mov	x29, sp
   570ac:	stp	x19, x20, [sp, #16]
   570b0:	mov	x19, x0
   570b4:	mov	x0, #0x0                   	// #0
   570b8:	ldr	x20, [x1, #1144]
   570bc:	cbz	x20, 57110 <xmalloc_failed@@Base+0x70>
   570c0:	bl	35160 <sbrk@plt>
   570c4:	sub	x5, x0, x20
   570c8:	adrp	x0, f9000 <aarch64_opcode_table@@Base+0x55a20>
   570cc:	adrp	x6, a2000 <aarch64_operands@@Base+0x16bc0>
   570d0:	adrp	x1, 58000 <xexit@@Base+0xe08>
   570d4:	adrp	x3, 73000 <fields@@Base+0x142d8>
   570d8:	ldr	x2, [x0, #1624]
   570dc:	add	x1, x1, #0x330
   570e0:	ldr	x6, [x6, #3840]
   570e4:	add	x3, x3, #0xc28
   570e8:	ldrb	w7, [x2]
   570ec:	mov	x4, x19
   570f0:	ldr	x0, [x6]
   570f4:	cmp	w7, #0x0
   570f8:	csel	x3, x3, x1, ne  // ne = any
   570fc:	adrp	x1, 73000 <fields@@Base+0x142d8>
   57100:	add	x1, x1, #0xc30
   57104:	bl	35b80 <fprintf@plt>
   57108:	mov	w0, #0x1                   	// #1
   5710c:	bl	35950 <xexit@plt>
   57110:	bl	35160 <sbrk@plt>
   57114:	adrp	x5, a2000 <aarch64_operands@@Base+0x16bc0>
   57118:	ldr	x5, [x5, #4008]
   5711c:	sub	x5, x0, x5
   57120:	b	570c8 <xmalloc_failed@@Base+0x28>
   57124:	nop

0000000000057128 <xmalloc@@Base>:
   57128:	stp	x29, x30, [sp, #-32]!
   5712c:	cmp	x0, #0x0
   57130:	mov	x29, sp
   57134:	str	x19, [sp, #16]
   57138:	csinc	x19, x0, xzr, ne  // ne = any
   5713c:	mov	x0, x19
   57140:	bl	353e0 <malloc@plt>
   57144:	cbz	x0, 57154 <xmalloc@@Base+0x2c>
   57148:	ldr	x19, [sp, #16]
   5714c:	ldp	x29, x30, [sp], #32
   57150:	ret
   57154:	mov	x0, x19
   57158:	bl	359a0 <xmalloc_failed@plt>
   5715c:	nop

0000000000057160 <xcalloc@@Base>:
   57160:	stp	x29, x30, [sp, #-32]!
   57164:	cmp	x0, #0x0
   57168:	ccmp	x1, #0x0, #0x4, ne  // ne = any
   5716c:	mov	x29, sp
   57170:	stp	x19, x20, [sp, #16]
   57174:	b.ne	5719c <xcalloc@@Base+0x3c>  // b.any
   57178:	mov	x19, #0x1                   	// #1
   5717c:	mov	x20, x19
   57180:	mov	x1, x19
   57184:	mov	x0, x20
   57188:	bl	35520 <calloc@plt>
   5718c:	cbz	x0, 571a8 <xcalloc@@Base+0x48>
   57190:	ldp	x19, x20, [sp, #16]
   57194:	ldp	x29, x30, [sp], #32
   57198:	ret
   5719c:	mov	x20, x0
   571a0:	mov	x19, x1
   571a4:	b	57180 <xcalloc@@Base+0x20>
   571a8:	mul	x0, x20, x19
   571ac:	bl	359a0 <xmalloc_failed@plt>

00000000000571b0 <xrealloc@@Base>:
   571b0:	stp	x29, x30, [sp, #-32]!
   571b4:	cmp	x1, #0x0
   571b8:	mov	x29, sp
   571bc:	str	x19, [sp, #16]
   571c0:	csinc	x19, x1, xzr, ne  // ne = any
   571c4:	cbz	x0, 571e0 <xrealloc@@Base+0x30>
   571c8:	mov	x1, x19
   571cc:	bl	35590 <realloc@plt>
   571d0:	cbz	x0, 571ec <xrealloc@@Base+0x3c>
   571d4:	ldr	x19, [sp, #16]
   571d8:	ldp	x29, x30, [sp], #32
   571dc:	ret
   571e0:	mov	x0, x19
   571e4:	bl	353e0 <malloc@plt>
   571e8:	b	571d0 <xrealloc@@Base+0x20>
   571ec:	mov	x0, x19
   571f0:	bl	359a0 <xmalloc_failed@plt>
   571f4:	nop

00000000000571f8 <xexit@@Base>:
   571f8:	stp	x29, x30, [sp, #-32]!
   571fc:	adrp	x1, a2000 <aarch64_operands@@Base+0x16bc0>
   57200:	mov	x29, sp
   57204:	ldr	x1, [x1, #3984]
   57208:	str	x19, [sp, #16]
   5720c:	mov	w19, w0
   57210:	ldr	x0, [x1]
   57214:	cbz	x0, 5721c <xexit@@Base+0x24>
   57218:	blr	x0
   5721c:	mov	w0, w19
   57220:	bl	350f0 <exit@plt>

Disassembly of section .fini:

0000000000057224 <.fini>:
   57224:	stp	x29, x30, [sp, #-16]!
   57228:	mov	x29, sp
   5722c:	ldp	x29, x30, [sp], #16
   57230:	ret
