
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libbz2.so.1.0.8_clang_-Os:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000001460 <.init>:
    1460:	stp	x29, x30, [sp, #-16]!
    1464:	mov	x29, sp
    1468:	bl	1720 <ferror@plt+0x10>
    146c:	ldp	x29, x30, [sp], #16
    1470:	ret

Disassembly of section .plt:

0000000000001480 <memcpy@plt-0x20>:
    1480:	stp	x16, x30, [sp, #-16]!
    1484:	adrp	x16, 1d000 <BZ2_bzerror@@Base+0x10c24>
    1488:	ldr	x17, [x16, #4088]
    148c:	add	x16, x16, #0xff8
    1490:	br	x17
    1494:	nop
    1498:	nop
    149c:	nop

00000000000014a0 <memcpy@plt>:
    14a0:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    14a4:	ldr	x17, [x16]
    14a8:	add	x16, x16, #0x0
    14ac:	br	x17

00000000000014b0 <strlen@plt>:
    14b0:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    14b4:	ldr	x17, [x16, #8]
    14b8:	add	x16, x16, #0x8
    14bc:	br	x17

00000000000014c0 <BZ2_hbMakeCodeLengths@plt>:
    14c0:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    14c4:	ldr	x17, [x16, #16]
    14c8:	add	x16, x16, #0x10
    14cc:	br	x17

00000000000014d0 <exit@plt>:
    14d0:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    14d4:	ldr	x17, [x16, #24]
    14d8:	add	x16, x16, #0x18
    14dc:	br	x17

00000000000014e0 <__cxa_finalize@plt>:
    14e0:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    14e4:	ldr	x17, [x16, #32]
    14e8:	add	x16, x16, #0x20
    14ec:	br	x17

00000000000014f0 <fputc@plt>:
    14f0:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    14f4:	ldr	x17, [x16, #40]
    14f8:	add	x16, x16, #0x28
    14fc:	br	x17

0000000000001500 <fclose@plt>:
    1500:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    1504:	ldr	x17, [x16, #48]
    1508:	add	x16, x16, #0x30
    150c:	br	x17

0000000000001510 <malloc@plt>:
    1510:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    1514:	ldr	x17, [x16, #56]
    1518:	add	x16, x16, #0x38
    151c:	br	x17

0000000000001520 <BZ2_bzDecompressInit@plt>:
    1520:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    1524:	ldr	x17, [x16, #64]
    1528:	add	x16, x16, #0x40
    152c:	br	x17

0000000000001530 <BZ2_bzDecompressEnd@plt>:
    1530:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    1534:	ldr	x17, [x16, #72]
    1538:	add	x16, x16, #0x48
    153c:	br	x17

0000000000001540 <BZ2_bzReadClose@plt>:
    1540:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    1544:	ldr	x17, [x16, #80]
    1548:	add	x16, x16, #0x50
    154c:	br	x17

0000000000001550 <fgetc@plt>:
    1550:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    1554:	ldr	x17, [x16, #88]
    1558:	add	x16, x16, #0x58
    155c:	br	x17

0000000000001560 <memset@plt>:
    1560:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    1564:	ldr	x17, [x16, #96]
    1568:	add	x16, x16, #0x60
    156c:	br	x17

0000000000001570 <fdopen@plt>:
    1570:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    1574:	ldr	x17, [x16, #104]
    1578:	add	x16, x16, #0x68
    157c:	br	x17

0000000000001580 <BZ2_bzWriteOpen@plt>:
    1580:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    1584:	ldr	x17, [x16, #112]
    1588:	add	x16, x16, #0x70
    158c:	br	x17

0000000000001590 <BZ2_bzCompressInit@plt>:
    1590:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    1594:	ldr	x17, [x16, #120]
    1598:	add	x16, x16, #0x78
    159c:	br	x17

00000000000015a0 <BZ2_bzCompressEnd@plt>:
    15a0:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    15a4:	ldr	x17, [x16, #128]
    15a8:	add	x16, x16, #0x80
    15ac:	br	x17

00000000000015b0 <BZ2_hbCreateDecodeTables@plt>:
    15b0:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    15b4:	ldr	x17, [x16, #136]
    15b8:	add	x16, x16, #0x88
    15bc:	br	x17

00000000000015c0 <__gmon_start__@plt>:
    15c0:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    15c4:	ldr	x17, [x16, #144]
    15c8:	add	x16, x16, #0x90
    15cc:	br	x17

00000000000015d0 <BZ2_decompress@plt>:
    15d0:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    15d4:	ldr	x17, [x16, #152]
    15d8:	add	x16, x16, #0x98
    15dc:	br	x17

00000000000015e0 <BZ2_bzCompress@plt>:
    15e0:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    15e4:	ldr	x17, [x16, #160]
    15e8:	add	x16, x16, #0xa0
    15ec:	br	x17

00000000000015f0 <BZ2_bzWrite@plt>:
    15f0:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    15f4:	ldr	x17, [x16, #168]
    15f8:	add	x16, x16, #0xa8
    15fc:	br	x17

0000000000001600 <__ctype_b_loc@plt>:
    1600:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    1604:	ldr	x17, [x16, #176]
    1608:	add	x16, x16, #0xb0
    160c:	br	x17

0000000000001610 <BZ2_compressBlock@plt>:
    1610:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    1614:	ldr	x17, [x16, #184]
    1618:	add	x16, x16, #0xb8
    161c:	br	x17

0000000000001620 <fread@plt>:
    1620:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    1624:	ldr	x17, [x16, #192]
    1628:	add	x16, x16, #0xc0
    162c:	br	x17

0000000000001630 <free@plt>:
    1630:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    1634:	ldr	x17, [x16, #200]
    1638:	add	x16, x16, #0xc8
    163c:	br	x17

0000000000001640 <ungetc@plt>:
    1640:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    1644:	ldr	x17, [x16, #208]
    1648:	add	x16, x16, #0xd0
    164c:	br	x17

0000000000001650 <BZ2_bzDecompress@plt>:
    1650:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    1654:	ldr	x17, [x16, #216]
    1658:	add	x16, x16, #0xd8
    165c:	br	x17

0000000000001660 <BZ2_blockSort@plt>:
    1660:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    1664:	ldr	x17, [x16, #224]
    1668:	add	x16, x16, #0xe0
    166c:	br	x17

0000000000001670 <BZ2_bzWriteClose64@plt>:
    1670:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    1674:	ldr	x17, [x16, #232]
    1678:	add	x16, x16, #0xe8
    167c:	br	x17

0000000000001680 <BZ2_indexIntoF@plt>:
    1680:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    1684:	ldr	x17, [x16, #240]
    1688:	add	x16, x16, #0xf0
    168c:	br	x17

0000000000001690 <BZ2_hbAssignCodes@plt>:
    1690:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    1694:	ldr	x17, [x16, #248]
    1698:	add	x16, x16, #0xf8
    169c:	br	x17

00000000000016a0 <fwrite@plt>:
    16a0:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    16a4:	ldr	x17, [x16, #256]
    16a8:	add	x16, x16, #0x100
    16ac:	br	x17

00000000000016b0 <fflush@plt>:
    16b0:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    16b4:	ldr	x17, [x16, #264]
    16b8:	add	x16, x16, #0x108
    16bc:	br	x17

00000000000016c0 <fopen64@plt>:
    16c0:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    16c4:	ldr	x17, [x16, #272]
    16c8:	add	x16, x16, #0x110
    16cc:	br	x17

00000000000016d0 <BZ2_bzReadOpen@plt>:
    16d0:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    16d4:	ldr	x17, [x16, #280]
    16d8:	add	x16, x16, #0x118
    16dc:	br	x17

00000000000016e0 <BZ2_bzRead@plt>:
    16e0:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    16e4:	ldr	x17, [x16, #288]
    16e8:	add	x16, x16, #0x120
    16ec:	br	x17

00000000000016f0 <BZ2_bz__AssertH__fail@plt>:
    16f0:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    16f4:	ldr	x17, [x16, #296]
    16f8:	add	x16, x16, #0x128
    16fc:	br	x17

0000000000001700 <fprintf@plt>:
    1700:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    1704:	ldr	x17, [x16, #304]
    1708:	add	x16, x16, #0x130
    170c:	br	x17

0000000000001710 <ferror@plt>:
    1710:	adrp	x16, 1e000 <memcpy@GLIBC_2.17>
    1714:	ldr	x17, [x16, #312]
    1718:	add	x16, x16, #0x138
    171c:	br	x17

Disassembly of section .text:

0000000000001720 <BZ2_blockSort@@Base-0xd4>:
    1720:	adrp	x0, 1d000 <BZ2_bzerror@@Base+0x10c24>
    1724:	ldr	x0, [x0, #4056]
    1728:	cbz	x0, 1730 <ferror@plt+0x20>
    172c:	b	15c0 <__gmon_start__@plt>
    1730:	ret
    1734:	nop
    1738:	adrp	x0, 1e000 <BZ2_bzerror@@Base+0x11c24>
    173c:	add	x0, x0, #0xd48
    1740:	adrp	x1, 1e000 <BZ2_bzerror@@Base+0x11c24>
    1744:	add	x1, x1, #0xd48
    1748:	cmp	x1, x0
    174c:	b.eq	1764 <ferror@plt+0x54>  // b.none
    1750:	adrp	x1, 1d000 <BZ2_bzerror@@Base+0x10c24>
    1754:	ldr	x1, [x1, #4000]
    1758:	cbz	x1, 1764 <ferror@plt+0x54>
    175c:	mov	x16, x1
    1760:	br	x16
    1764:	ret
    1768:	adrp	x0, 1e000 <BZ2_bzerror@@Base+0x11c24>
    176c:	add	x0, x0, #0xd48
    1770:	adrp	x1, 1e000 <BZ2_bzerror@@Base+0x11c24>
    1774:	add	x1, x1, #0xd48
    1778:	sub	x1, x1, x0
    177c:	lsr	x2, x1, #63
    1780:	add	x1, x2, x1, asr #3
    1784:	cmp	xzr, x1, asr #1
    1788:	asr	x1, x1, #1
    178c:	b.eq	17a4 <ferror@plt+0x94>  // b.none
    1790:	adrp	x2, 1d000 <BZ2_bzerror@@Base+0x10c24>
    1794:	ldr	x2, [x2, #4064]
    1798:	cbz	x2, 17a4 <ferror@plt+0x94>
    179c:	mov	x16, x2
    17a0:	br	x16
    17a4:	ret
    17a8:	stp	x29, x30, [sp, #-32]!
    17ac:	mov	x29, sp
    17b0:	str	x19, [sp, #16]
    17b4:	adrp	x19, 1e000 <BZ2_bzerror@@Base+0x11c24>
    17b8:	ldrb	w0, [x19, #3400]
    17bc:	cbnz	w0, 17e4 <ferror@plt+0xd4>
    17c0:	adrp	x0, 1d000 <BZ2_bzerror@@Base+0x10c24>
    17c4:	ldr	x0, [x0, #4008]
    17c8:	cbz	x0, 17d8 <ferror@plt+0xc8>
    17cc:	adrp	x0, 1e000 <BZ2_bzerror@@Base+0x11c24>
    17d0:	ldr	x0, [x0, #320]
    17d4:	bl	14e0 <__cxa_finalize@plt>
    17d8:	bl	1738 <ferror@plt+0x28>
    17dc:	mov	w0, #0x1                   	// #1
    17e0:	strb	w0, [x19, #3400]
    17e4:	ldr	x19, [sp, #16]
    17e8:	ldp	x29, x30, [sp], #32
    17ec:	ret
    17f0:	b	1768 <ferror@plt+0x58>

00000000000017f4 <BZ2_blockSort@@Base>:
    17f4:	stp	x29, x30, [sp, #-96]!
    17f8:	stp	x28, x27, [sp, #16]
    17fc:	stp	x26, x25, [sp, #32]
    1800:	stp	x24, x23, [sp, #48]
    1804:	stp	x22, x21, [sp, #64]
    1808:	stp	x20, x19, [sp, #80]
    180c:	mov	x29, sp
    1810:	sub	sp, sp, #0x1, lsl #12
    1814:	sub	sp, sp, #0x290
    1818:	ldrsw	x9, [x0, #108]
    181c:	ldr	x19, [x0, #56]
    1820:	ldr	x21, [x0, #40]
    1824:	ldr	w23, [x0, #656]
    1828:	mov	w8, #0x2710                	// #10000
    182c:	mov	x20, x0
    1830:	cmp	w9, w8
    1834:	and	x27, x9, #0xffffffff
    1838:	b.lt	25b0 <BZ2_blockSort@@Base+0xdbc>  // b.tstop
    183c:	ldr	w8, [x20, #88]
    1840:	str	x9, [sp, #16]
    1844:	add	w9, w27, #0x22
    1848:	add	w10, w27, #0x23
    184c:	tst	w9, #0x1
    1850:	csel	w22, w9, w10, eq  // eq = none
    1854:	cmp	w8, #0x1
    1858:	csinc	w8, w8, wzr, gt
    185c:	mov	w11, #0x64                  	// #100
    1860:	cmp	w8, #0x64
    1864:	mov	w9, #0x5556                	// #21846
    1868:	csel	w8, w8, w11, lt  // lt = tstop
    186c:	movk	w9, #0x5555, lsl #16
    1870:	sub	w8, w8, #0x1
    1874:	ldr	x24, [x20, #64]
    1878:	smull	x8, w8, w9
    187c:	lsr	x9, x8, #63
    1880:	lsr	x8, x8, #32
    1884:	add	w8, w8, w9
    1888:	str	x20, [sp]
    188c:	sxtw	x20, w22
    1890:	cmp	w23, #0x4
    1894:	mul	w8, w8, w27
    1898:	str	w8, [sp, #12]
    189c:	str	w8, [sp, #212]
    18a0:	b.ge	2624 <BZ2_blockSort@@Base+0xe30>  // b.tcont
    18a4:	mov	w2, #0x40004               	// #262148
    18a8:	mov	x0, x21
    18ac:	mov	w1, wzr
    18b0:	add	x28, x24, w22, sxtw
    18b4:	bl	1560 <memset@plt>
    18b8:	ldrb	w10, [x24]
    18bc:	sub	w12, w27, #0x4
    18c0:	sub	w13, w27, #0x3
    18c4:	sub	w14, w27, #0x2
    18c8:	sub	w9, w27, #0x1
    18cc:	add	x15, x20, w12, sxtw #1
    18d0:	add	x16, x20, w13, sxtw #1
    18d4:	add	x17, x20, w14, sxtw #1
    18d8:	mov	x8, xzr
    18dc:	str	w9, [sp, #36]
    18e0:	sub	w9, w27, #0x1
    18e4:	add	x11, x24, w12, sxtw
    18e8:	add	x12, x24, w13, sxtw
    18ec:	add	x13, x24, w14, sxtw
    18f0:	add	x14, x24, x15
    18f4:	add	x15, x24, x16
    18f8:	lsl	w10, w10, #8
    18fc:	add	x16, x24, x17
    1900:	add	w17, w9, w8
    1904:	strh	wzr, [x28, w17, uxtw #1]
    1908:	ldrb	w17, [x24, w17, uxtw]
    190c:	lsl	w17, w17, #8
    1910:	orr	w10, w17, w10, asr #8
    1914:	ldr	w17, [x21, w10, sxtw #2]
    1918:	add	w17, w17, #0x1
    191c:	str	w17, [x21, w10, sxtw #2]
    1920:	strh	wzr, [x16, x8, lsl #1]
    1924:	ldrb	w17, [x13, x8]
    1928:	lsl	w17, w17, #8
    192c:	orr	w10, w17, w10, asr #8
    1930:	ldr	w17, [x21, w10, sxtw #2]
    1934:	add	w17, w17, #0x1
    1938:	str	w17, [x21, w10, sxtw #2]
    193c:	strh	wzr, [x15, x8, lsl #1]
    1940:	ldrb	w17, [x12, x8]
    1944:	lsl	w17, w17, #8
    1948:	orr	w10, w17, w10, asr #8
    194c:	ldr	w17, [x21, w10, sxtw #2]
    1950:	add	w17, w17, #0x1
    1954:	str	w17, [x21, w10, sxtw #2]
    1958:	strh	wzr, [x14, x8, lsl #1]
    195c:	ldrb	w17, [x11, x8]
    1960:	sub	x8, x8, #0x4
    1964:	add	w18, w27, w8
    1968:	add	w18, w18, #0x3
    196c:	lsl	w17, w17, #8
    1970:	orr	w10, w17, w10, asr #8
    1974:	ldr	w17, [x21, w10, sxtw #2]
    1978:	cmp	w18, #0x6
    197c:	add	w17, w17, #0x1
    1980:	str	w17, [x21, w10, sxtw #2]
    1984:	b.gt	1900 <BZ2_blockSort@@Base+0x10c>
    1988:	ldr	x12, [sp, #16]
    198c:	add	w9, w27, w8
    1990:	add	w9, w9, #0x3
    1994:	cmp	w9, #0x4
    1998:	b.lt	19d4 <BZ2_blockSort@@Base+0x1e0>  // b.tstop
    199c:	sub	w9, w12, #0x1
    19a0:	add	x8, x9, x8
    19a4:	and	x8, x8, #0xffffffff
    19a8:	add	x9, x24, x20
    19ac:	strh	wzr, [x9, x8, lsl #1]
    19b0:	ldrb	w11, [x24, x8]
    19b4:	cmp	x8, #0x0
    19b8:	sub	x8, x8, #0x1
    19bc:	lsl	w11, w11, #8
    19c0:	orr	w10, w11, w10, asr #8
    19c4:	ldr	w11, [x21, w10, sxtw #2]
    19c8:	add	w11, w11, #0x1
    19cc:	str	w11, [x21, w10, sxtw #2]
    19d0:	b.gt	19ac <BZ2_blockSort@@Base+0x1b8>
    19d4:	add	x9, x20, x12, lsl #1
    19d8:	mov	x8, xzr
    19dc:	add	x9, x24, x9
    19e0:	add	x10, x24, x12
    19e4:	ldrb	w11, [x24, x8]
    19e8:	strb	w11, [x10, x8]
    19ec:	strh	wzr, [x9, x8, lsl #1]
    19f0:	add	x8, x8, #0x1
    19f4:	cmp	x8, #0x22
    19f8:	b.ne	19e4 <BZ2_blockSort@@Base+0x1f0>  // b.any
    19fc:	cmp	w23, #0x4
    1a00:	b.ge	2648 <BZ2_blockSort@@Base+0xe54>  // b.tcont
    1a04:	mov	x8, x21
    1a08:	ldr	w9, [x8], #4
    1a0c:	mov	x10, xzr
    1a10:	ldr	w11, [x8, x10]
    1a14:	add	w9, w11, w9
    1a18:	str	w9, [x8, x10]
    1a1c:	add	x10, x10, #0x4
    1a20:	cmp	x10, #0x40, lsl #12
    1a24:	b.ne	1a10 <BZ2_blockSort@@Base+0x21c>  // b.any
    1a28:	ldrb	w9, [x24]
    1a2c:	sub	w10, w12, #0x1
    1a30:	sub	w11, w27, #0x4
    1a34:	sub	w12, w27, #0x3
    1a38:	sub	w13, w27, #0x2
    1a3c:	mov	x8, xzr
    1a40:	add	x14, x24, w11, sxtw
    1a44:	add	x15, x24, w12, sxtw
    1a48:	lsl	w9, w9, #8
    1a4c:	add	x16, x24, w13, sxtw
    1a50:	add	x17, x10, x8
    1a54:	ldrb	w18, [x24, w17, uxtw]
    1a58:	ubfx	w9, w9, #8, #8
    1a5c:	bfi	w9, w18, #8, #8
    1a60:	ldr	w0, [x21, w9, uxtw #2]
    1a64:	sub	w0, w0, #0x1
    1a68:	str	w0, [x21, w9, uxtw #2]
    1a6c:	str	w17, [x19, w0, sxtw #2]
    1a70:	ldrb	w17, [x16, x8]
    1a74:	lsl	x9, x18, #2
    1a78:	add	w0, w13, w8
    1a7c:	bfi	x9, x17, #10, #8
    1a80:	ldr	w18, [x21, x9]
    1a84:	lsl	x17, x17, #2
    1a88:	sub	w18, w18, #0x1
    1a8c:	str	w18, [x21, x9]
    1a90:	str	w0, [x19, w18, sxtw #2]
    1a94:	ldrb	w9, [x15, x8]
    1a98:	add	w0, w12, w8
    1a9c:	bfi	x17, x9, #10, #8
    1aa0:	ldr	w18, [x21, x17]
    1aa4:	sub	w18, w18, #0x1
    1aa8:	str	w18, [x21, x17]
    1aac:	str	w0, [x19, w18, sxtw #2]
    1ab0:	ldrb	w17, [x14, x8]
    1ab4:	add	w18, w11, w8
    1ab8:	sub	x8, x8, #0x4
    1abc:	add	w1, w27, w8
    1ac0:	bfi	w9, w17, #8, #24
    1ac4:	and	x17, x9, #0xffff
    1ac8:	ldr	w0, [x21, x17, lsl #2]
    1acc:	add	w1, w1, #0x3
    1ad0:	cmp	w1, #0x6
    1ad4:	sub	w0, w0, #0x1
    1ad8:	str	w0, [x21, x17, lsl #2]
    1adc:	str	w18, [x19, w0, sxtw #2]
    1ae0:	b.gt	1a50 <BZ2_blockSort@@Base+0x25c>
    1ae4:	add	w10, w27, w8
    1ae8:	add	w10, w10, #0x3
    1aec:	cmp	w10, #0x4
    1af0:	b.lt	1b30 <BZ2_blockSort@@Base+0x33c>  // b.tstop
    1af4:	sub	w10, w27, #0x1
    1af8:	add	x8, x10, x8
    1afc:	and	x10, x8, #0xffffffff
    1b00:	ldrb	w11, [x24, x10]
    1b04:	ubfx	w9, w9, #8, #8
    1b08:	cmp	x10, #0x0
    1b0c:	sub	x10, x10, #0x1
    1b10:	bfi	w9, w11, #8, #24
    1b14:	and	x11, x9, #0xffff
    1b18:	ldr	w12, [x21, x11, lsl #2]
    1b1c:	sub	w12, w12, #0x1
    1b20:	str	w12, [x21, x11, lsl #2]
    1b24:	str	w8, [x19, w12, sxtw #2]
    1b28:	sub	w8, w8, #0x1
    1b2c:	b.gt	1b00 <BZ2_blockSort@@Base+0x30c>
    1b30:	add	x0, sp, #0x8d8
    1b34:	mov	w2, #0x100                 	// #256
    1b38:	mov	w1, wzr
    1b3c:	bl	1560 <memset@plt>
    1b40:	adrp	x9, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    1b44:	ldr	q0, [x9, #1392]
    1b48:	mov	x8, xzr
    1b4c:	add	x9, sp, #0x9d8
    1b50:	movi	v1.4s, #0x4
    1b54:	str	q0, [x9, x8]
    1b58:	add	x8, x8, #0x10
    1b5c:	cmp	x8, #0x400
    1b60:	add	v0.4s, v0.4s, v1.4s
    1b64:	b.ne	1b54 <BZ2_blockSort@@Base+0x360>  // b.any
    1b68:	mov	w8, #0x5556                	// #21846
    1b6c:	mov	w9, #0x16c                 	// #364
    1b70:	movk	w8, #0x5555, lsl #16
    1b74:	add	x10, sp, #0x9d8
    1b78:	str	w23, [sp, #76]
    1b7c:	smull	x11, w9, w8
    1b80:	lsr	x12, x11, #63
    1b84:	lsr	x11, x11, #32
    1b88:	cmp	w9, #0x2ff
    1b8c:	add	w11, w11, w12
    1b90:	b.gt	1c0c <BZ2_blockSort@@Base+0x418>
    1b94:	mov	w12, wzr
    1b98:	sxtw	x13, w11
    1b9c:	ldr	w14, [x10, x13, lsl #2]
    1ba0:	lsl	w15, w14, #8
    1ba4:	add	w16, w15, #0x100
    1ba8:	ldr	w16, [x21, w16, sxtw #2]
    1bac:	ldr	w15, [x21, w15, sxtw #2]
    1bb0:	sub	w15, w16, w15
    1bb4:	mov	w16, w12
    1bb8:	ldr	w17, [x10, w16, sxtw #2]
    1bbc:	add	w1, w11, w16
    1bc0:	lsl	w18, w17, #8
    1bc4:	add	w0, w18, #0x100
    1bc8:	ldr	w0, [x21, w0, sxtw #2]
    1bcc:	ldr	w18, [x21, w18, sxtw #2]
    1bd0:	sub	w18, w0, w18
    1bd4:	cmp	w18, w15
    1bd8:	sxtw	x0, w1
    1bdc:	b.ls	1bf4 <BZ2_blockSort@@Base+0x400>  // b.plast
    1be0:	sxtw	x18, w16
    1be4:	subs	w16, w18, w11
    1be8:	str	w17, [x10, x0, lsl #2]
    1bec:	b.ge	1bb8 <BZ2_blockSort@@Base+0x3c4>  // b.tcont
    1bf0:	b	1bf8 <BZ2_blockSort@@Base+0x404>
    1bf4:	mov	x18, x0
    1bf8:	cmp	x13, #0xff
    1bfc:	add	x13, x13, #0x1
    1c00:	add	w12, w12, #0x1
    1c04:	str	w14, [x10, x18, lsl #2]
    1c08:	b.lt	1b9c <BZ2_blockSort@@Base+0x3a8>  // b.tstop
    1c0c:	sub	w9, w9, #0x3
    1c10:	cmp	w9, #0x2
    1c14:	mov	w9, w11
    1c18:	b.hi	1b7c <BZ2_blockSort@@Base+0x388>  // b.pmore
    1c1c:	add	x8, x19, #0x4
    1c20:	ldr	w25, [sp, #12]
    1c24:	str	x8, [sp, #80]
    1c28:	add	x8, x21, #0x4
    1c2c:	str	x8, [sp, #40]
    1c30:	sub	x8, x19, #0x4
    1c34:	add	x0, sp, #0x1, lsl #12
    1c38:	mov	w22, wzr
    1c3c:	str	x8, [sp, #24]
    1c40:	add	x23, sp, #0x8d8
    1c44:	add	x26, sp, #0x4d8
    1c48:	add	x20, sp, #0xd8
    1c4c:	mov	w18, #0xfffe                	// #65534
    1c50:	add	x0, x0, #0xf8
    1c54:	add	x1, sp, #0xf68
    1c58:	add	x2, sp, #0xdd8
    1c5c:	mov	x8, xzr
    1c60:	mov	x9, xzr
    1c64:	str	w25, [sp, #200]
    1c68:	str	x21, [sp, #56]
    1c6c:	add	x9, sp, #0x9d8
    1c70:	ldr	w11, [x9, x8, lsl #2]
    1c74:	str	x8, [sp, #48]
    1c78:	mov	x9, xzr
    1c7c:	mov	x10, xzr
    1c80:	sxtw	x8, w11
    1c84:	str	x8, [sp, #120]
    1c88:	lsl	w8, w11, #8
    1c8c:	sxtw	x8, w8
    1c90:	str	x11, [sp, #160]
    1c94:	str	x8, [sp, #128]
    1c98:	ldr	x8, [sp, #160]
    1c9c:	cmp	x9, x8
    1ca0:	b.eq	22e8 <BZ2_blockSort@@Base+0xaf4>  // b.none
    1ca4:	ldr	x8, [sp, #128]
    1ca8:	str	x9, [sp, #152]
    1cac:	add	x8, x9, x8
    1cb0:	ldr	w9, [x21, x8, lsl #2]
    1cb4:	str	x8, [sp, #168]
    1cb8:	tbnz	w9, #21, 2280 <BZ2_blockSort@@Base+0xa8c>
    1cbc:	add	x8, x21, x8, lsl #2
    1cc0:	ldr	w8, [x8, #4]
    1cc4:	and	w10, w9, #0xffdfffff
    1cc8:	and	w8, w8, #0xffdfffff
    1ccc:	sub	w8, w8, #0x1
    1cd0:	stp	w8, w10, [sp, #104]
    1cd4:	subs	w8, w8, w10
    1cd8:	b.le	2280 <BZ2_blockSort@@Base+0xa8c>
    1cdc:	ldr	w9, [sp, #76]
    1ce0:	cmp	w9, #0x4
    1ce4:	b.ge	22f8 <BZ2_blockSort@@Base+0xb04>  // b.tcont
    1ce8:	ldr	w8, [sp, #108]
    1cec:	mov	w3, #0x1                   	// #1
    1cf0:	str	w8, [sp, #4344]
    1cf4:	ldr	w8, [sp, #104]
    1cf8:	str	w8, [sp, #3944]
    1cfc:	mov	w8, #0x2                   	// #2
    1d00:	str	w8, [sp, #3544]
    1d04:	sxtw	x23, w3
    1d08:	sub	x3, x23, #0x1
    1d0c:	cmp	w23, #0x62
    1d10:	b.lt	1d38 <BZ2_blockSort@@Base+0x544>  // b.tstop
    1d14:	mov	w0, #0x3e9                 	// #1001
    1d18:	mov	x26, x3
    1d1c:	bl	16f0 <BZ2_bz__AssertH__fail@plt>
    1d20:	add	x0, sp, #0x1, lsl #12
    1d24:	mov	x3, x26
    1d28:	add	x2, sp, #0xdd8
    1d2c:	add	x1, sp, #0xf68
    1d30:	add	x0, x0, #0xf8
    1d34:	mov	w18, #0xfffe                	// #65534
    1d38:	ldr	w4, [x0, x3, lsl #2]
    1d3c:	ldr	w8, [x1, x3, lsl #2]
    1d40:	ldr	w26, [x2, x3, lsl #2]
    1d44:	sub	w9, w8, w4
    1d48:	cmp	w9, #0x14
    1d4c:	sxtw	x13, w8
    1d50:	b.lt	1eb0 <BZ2_blockSort@@Base+0x6bc>  // b.tstop
    1d54:	cmp	w26, #0xf
    1d58:	b.ge	1eb0 <BZ2_blockSort@@Base+0x6bc>  // b.tcont
    1d5c:	sxtw	x12, w4
    1d60:	ldr	w9, [x19, x13, lsl #2]
    1d64:	add	w10, w8, w4
    1d68:	ldr	w11, [x19, x12, lsl #2]
    1d6c:	asr	w10, w10, #1
    1d70:	ldr	w10, [x19, w10, sxtw #2]
    1d74:	add	w9, w9, w26
    1d78:	add	w11, w11, w26
    1d7c:	ldrb	w9, [x24, w9, uxtw]
    1d80:	ldrb	w11, [x24, w11, uxtw]
    1d84:	add	w10, w10, w26
    1d88:	ldrb	w10, [x24, w10, uxtw]
    1d8c:	cmp	w11, w9
    1d90:	csel	w13, w11, w9, hi  // hi = pmore
    1d94:	csel	w9, w9, w11, hi  // hi = pmore
    1d98:	cmp	w9, w10
    1d9c:	csel	w9, w9, w10, hi  // hi = pmore
    1da0:	cmp	w13, w10
    1da4:	csel	w14, w9, w13, hi  // hi = pmore
    1da8:	mov	w11, w8
    1dac:	mov	w9, w4
    1db0:	mov	w13, w8
    1db4:	mov	w10, w4
    1db8:	cmp	w10, w13
    1dbc:	b.gt	1e24 <BZ2_blockSort@@Base+0x630>
    1dc0:	sxtw	x15, w13
    1dc4:	sxtw	x9, w9
    1dc8:	sxtw	x16, w10
    1dcc:	ldr	w10, [x19, x16, lsl #2]
    1dd0:	add	w17, w10, w26
    1dd4:	ldrb	w17, [x24, w17, uxtw]
    1dd8:	subs	w17, w17, w14
    1ddc:	b.eq	1dfc <BZ2_blockSort@@Base+0x608>  // b.none
    1de0:	cmp	w17, #0x0
    1de4:	b.gt	1e20 <BZ2_blockSort@@Base+0x62c>
    1de8:	add	x10, x16, #0x1
    1dec:	cmp	x16, x15
    1df0:	mov	x16, x10
    1df4:	b.lt	1dcc <BZ2_blockSort@@Base+0x5d8>  // b.tstop
    1df8:	b	1e24 <BZ2_blockSort@@Base+0x630>
    1dfc:	ldr	w17, [x19, x9, lsl #2]
    1e00:	cmp	w13, w16
    1e04:	str	w17, [x19, x16, lsl #2]
    1e08:	str	w10, [x19, x9, lsl #2]
    1e0c:	add	x9, x9, #0x1
    1e10:	add	w10, w16, #0x1
    1e14:	b.gt	1dc8 <BZ2_blockSort@@Base+0x5d4>
    1e18:	add	w10, w16, #0x1
    1e1c:	b	1e24 <BZ2_blockSort@@Base+0x630>
    1e20:	mov	w10, w16
    1e24:	cmp	w10, w13
    1e28:	b.gt	1e9c <BZ2_blockSort@@Base+0x6a8>
    1e2c:	sxtw	x15, w10
    1e30:	sxtw	x11, w11
    1e34:	sxtw	x16, w13
    1e38:	ldr	w13, [x19, x16, lsl #2]
    1e3c:	add	w17, w13, w26
    1e40:	ldrb	w17, [x24, w17, uxtw]
    1e44:	subs	w17, w17, w14
    1e48:	b.eq	1e64 <BZ2_blockSort@@Base+0x670>  // b.none
    1e4c:	tbnz	w17, #31, 1e84 <BZ2_blockSort@@Base+0x690>
    1e50:	sub	x13, x16, #0x1
    1e54:	cmp	x16, x15
    1e58:	mov	x16, x13
    1e5c:	b.gt	1e38 <BZ2_blockSort@@Base+0x644>
    1e60:	b	1e9c <BZ2_blockSort@@Base+0x6a8>
    1e64:	ldr	w17, [x19, x11, lsl #2]
    1e68:	cmp	w10, w16
    1e6c:	str	w17, [x19, x16, lsl #2]
    1e70:	str	w13, [x19, x11, lsl #2]
    1e74:	sub	x11, x11, #0x1
    1e78:	sub	w13, w16, #0x1
    1e7c:	b.lt	1e34 <BZ2_blockSort@@Base+0x640>  // b.tstop
    1e80:	b	1e9c <BZ2_blockSort@@Base+0x6a8>
    1e84:	ldr	w17, [x19, x15, lsl #2]
    1e88:	str	w13, [x19, x15, lsl #2]
    1e8c:	add	w10, w10, #0x1
    1e90:	sub	w13, w16, #0x1
    1e94:	str	w17, [x19, x16, lsl #2]
    1e98:	b	1db8 <BZ2_blockSort@@Base+0x5c4>
    1e9c:	cmp	w11, w9
    1ea0:	b.ge	1eec <BZ2_blockSort@@Base+0x6f8>  // b.tcont
    1ea4:	add	w8, w26, #0x1
    1ea8:	str	w8, [x2, x3, lsl #2]
    1eac:	b	1d0c <BZ2_blockSort@@Base+0x518>
    1eb0:	cmp	w9, #0x1
    1eb4:	b.lt	1edc <BZ2_blockSort@@Base+0x6e8>  // b.tstop
    1eb8:	adrp	x11, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    1ebc:	mov	x8, xzr
    1ec0:	add	x11, x11, #0x6c8
    1ec4:	ldr	w10, [x11, x8, lsl #2]
    1ec8:	add	x8, x8, #0x1
    1ecc:	cmp	w10, w9
    1ed0:	b.le	1ec4 <BZ2_blockSort@@Base+0x6d0>
    1ed4:	cmp	w8, #0x1
    1ed8:	b.ne	2030 <BZ2_blockSort@@Base+0x83c>  // b.any
    1edc:	mov	w8, w25
    1ee0:	mov	w9, w25
    1ee4:	tbz	w25, #31, 2020 <BZ2_blockSort@@Base+0x82c>
    1ee8:	b	22b0 <BZ2_blockSort@@Base+0xabc>
    1eec:	sub	w14, w9, w4
    1ef0:	sub	w15, w10, w9
    1ef4:	cmp	w14, w15
    1ef8:	csel	w15, w14, w15, lt  // lt = tstop
    1efc:	cmp	w15, #0x1
    1f00:	b.lt	1f30 <BZ2_blockSort@@Base+0x73c>  // b.tstop
    1f04:	sub	w14, w10, w15
    1f08:	add	x12, x19, x12, lsl #2
    1f0c:	add	x14, x19, w14, sxtw #2
    1f10:	add	w15, w15, #0x1
    1f14:	ldr	w16, [x14]
    1f18:	ldr	w17, [x12]
    1f1c:	sub	w15, w15, #0x1
    1f20:	cmp	w15, #0x1
    1f24:	str	w16, [x12], #4
    1f28:	str	w17, [x14], #4
    1f2c:	b.gt	1f14 <BZ2_blockSort@@Base+0x720>
    1f30:	sub	w12, w8, w11
    1f34:	sub	w11, w11, w13
    1f38:	cmp	w12, w11
    1f3c:	csel	w14, w12, w11, lt  // lt = tstop
    1f40:	cmp	w14, #0x1
    1f44:	b.lt	1f78 <BZ2_blockSort@@Base+0x784>  // b.tstop
    1f48:	ldr	x15, [sp, #80]
    1f4c:	sub	w13, w8, w14
    1f50:	add	x12, x19, w10, sxtw #2
    1f54:	add	w14, w14, #0x1
    1f58:	add	x13, x15, w13, sxtw #2
    1f5c:	ldr	w15, [x13]
    1f60:	ldr	w16, [x12]
    1f64:	sub	w14, w14, #0x1
    1f68:	cmp	w14, #0x1
    1f6c:	str	w15, [x12], #4
    1f70:	str	w16, [x13], #4
    1f74:	b.gt	1f5c <BZ2_blockSort@@Base+0x768>
    1f78:	sub	w9, w4, w9
    1f7c:	sub	w11, w8, w11
    1f80:	add	w9, w9, w10
    1f84:	add	w10, w11, #0x1
    1f88:	sub	w12, w9, #0x1
    1f8c:	sub	w10, w8, w10
    1f90:	sub	w14, w12, w4
    1f94:	cmp	w14, w10
    1f98:	csinc	w10, w4, w11, lt  // lt = tstop
    1f9c:	csel	w15, w12, w8, lt  // lt = tstop
    1fa0:	sub	w13, w11, w9
    1fa4:	csel	w8, w8, w12, lt  // lt = tstop
    1fa8:	sub	w12, w15, w10
    1fac:	csinc	w14, w4, w11, ge  // ge = tcont
    1fb0:	cmp	w12, w13
    1fb4:	csel	w12, w9, w10, lt  // lt = tstop
    1fb8:	csel	w13, w15, w11, lt  // lt = tstop
    1fbc:	csel	w11, w11, w15, lt  // lt = tstop
    1fc0:	sub	w16, w8, w14
    1fc4:	csel	w9, w10, w9, lt  // lt = tstop
    1fc8:	sub	w10, w11, w12
    1fcc:	cinc	w15, w26, ge  // ge = tcont
    1fd0:	cinc	w17, w26, lt  // lt = tstop
    1fd4:	cmp	w16, w10
    1fd8:	lsl	x10, x23, #2
    1fdc:	add	x10, x10, #0x4
    1fe0:	csel	w16, w14, w12, lt  // lt = tstop
    1fe4:	csel	w12, w12, w14, lt  // lt = tstop
    1fe8:	csel	w14, w8, w11, lt  // lt = tstop
    1fec:	csel	w8, w11, w8, lt  // lt = tstop
    1ff0:	csel	w11, w26, w17, lt  // lt = tstop
    1ff4:	csel	w17, w17, w26, lt  // lt = tstop
    1ff8:	str	w12, [x0, x3, lsl #2]
    1ffc:	str	w8, [x1, x3, lsl #2]
    2000:	str	w17, [x2, x3, lsl #2]
    2004:	str	w16, [x0, x23, lsl #2]
    2008:	str	w14, [x1, x23, lsl #2]
    200c:	str	w11, [x2, x23, lsl #2]
    2010:	str	w9, [x0, x10]
    2014:	str	w13, [x1, x10]
    2018:	str	w15, [x2, x10]
    201c:	add	w3, w23, #0x2
    2020:	ldr	w8, [sp, #200]
    2024:	cmp	w3, #0x0
    2028:	b.gt	1d04 <BZ2_blockSort@@Base+0x510>
    202c:	b	22b0 <BZ2_blockSort@@Base+0xabc>
    2030:	sub	x8, x8, #0x1
    2034:	add	w9, w4, #0x1
    2038:	str	w22, [sp, #92]
    203c:	mov	x22, x27
    2040:	str	w9, [sp, #116]
    2044:	and	x8, x8, #0xffffffff
    2048:	add	w9, w4, #0x2
    204c:	str	x3, [sp, #64]
    2050:	str	w9, [sp, #112]
    2054:	str	x4, [sp, #96]
    2058:	str	x13, [sp, #184]
    205c:	str	x8, [sp, #136]
    2060:	sub	x9, x8, #0x1
    2064:	adrp	x8, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    2068:	add	x8, x8, #0x6c8
    206c:	ldr	w20, [x8, x9, lsl #2]
    2070:	str	x9, [sp, #144]
    2074:	add	w8, w20, w4
    2078:	sxtw	x21, w8
    207c:	ldr	w8, [sp, #112]
    2080:	mov	x10, x21
    2084:	str	w8, [sp, #180]
    2088:	ldr	w8, [sp, #116]
    208c:	stp	w8, w4, [sp, #192]
    2090:	mov	w8, w4
    2094:	cmp	x10, x13
    2098:	b.gt	223c <BZ2_blockSort@@Base+0xa48>
    209c:	ldr	w8, [x19, x10, lsl #2]
    20a0:	ldr	w27, [sp, #196]
    20a4:	str	x10, [sp, #200]
    20a8:	add	w23, w8, w26
    20ac:	str	w8, [sp, #176]
    20b0:	ldr	w8, [x19, w27, sxtw #2]
    20b4:	add	x5, sp, #0xd4
    20b8:	mov	w1, w23
    20bc:	mov	x2, x24
    20c0:	add	w0, w8, w26
    20c4:	mov	x3, x28
    20c8:	mov	w4, w22
    20cc:	sxtw	x25, w27
    20d0:	bl	2f20 <BZ2_blockSort@@Base+0x172c>
    20d4:	tst	w0, #0xff
    20d8:	b.eq	20f8 <BZ2_blockSort@@Base+0x904>  // b.none
    20dc:	ldr	w8, [x19, x25, lsl #2]
    20e0:	add	w9, w20, w27
    20e4:	cmp	w25, w21
    20e8:	sub	w27, w25, w20
    20ec:	str	w8, [x19, w9, sxtw #2]
    20f0:	b.ge	20b0 <BZ2_blockSort@@Base+0x8bc>  // b.tcont
    20f4:	b	2100 <BZ2_blockSort@@Base+0x90c>
    20f8:	add	w8, w20, w25
    20fc:	sxtw	x25, w8
    2100:	ldr	x13, [sp, #184]
    2104:	ldr	x8, [sp, #200]
    2108:	ldr	w9, [sp, #176]
    210c:	cmp	x8, x13
    2110:	str	w9, [x19, x25, lsl #2]
    2114:	b.ge	223c <BZ2_blockSort@@Base+0xa48>  // b.tcont
    2118:	add	x8, x8, #0x1
    211c:	ldr	w8, [x19, x8, lsl #2]
    2120:	ldr	w27, [sp, #192]
    2124:	add	w23, w8, w26
    2128:	str	w8, [sp, #176]
    212c:	ldr	w8, [x19, w27, sxtw #2]
    2130:	add	x5, sp, #0xd4
    2134:	mov	w1, w23
    2138:	mov	x2, x24
    213c:	add	w0, w8, w26
    2140:	mov	x3, x28
    2144:	mov	w4, w22
    2148:	sxtw	x25, w27
    214c:	bl	2f20 <BZ2_blockSort@@Base+0x172c>
    2150:	tst	w0, #0xff
    2154:	b.eq	2174 <BZ2_blockSort@@Base+0x980>  // b.none
    2158:	ldr	w8, [x19, x25, lsl #2]
    215c:	add	w9, w20, w27
    2160:	cmp	w25, w21
    2164:	sub	w27, w25, w20
    2168:	str	w8, [x19, w9, sxtw #2]
    216c:	b.ge	212c <BZ2_blockSort@@Base+0x938>  // b.tcont
    2170:	b	217c <BZ2_blockSort@@Base+0x988>
    2174:	add	w8, w20, w25
    2178:	sxtw	x25, w8
    217c:	ldr	x8, [sp, #200]
    2180:	ldr	x13, [sp, #184]
    2184:	ldr	w9, [sp, #176]
    2188:	add	x8, x8, #0x2
    218c:	cmp	x8, x13
    2190:	str	w9, [x19, x25, lsl #2]
    2194:	b.gt	223c <BZ2_blockSort@@Base+0xa48>
    2198:	ldr	w8, [x19, x8, lsl #2]
    219c:	ldr	w27, [sp, #180]
    21a0:	add	w23, w8, w26
    21a4:	str	w8, [sp, #176]
    21a8:	ldr	w8, [x19, w27, sxtw #2]
    21ac:	add	x5, sp, #0xd4
    21b0:	mov	w1, w23
    21b4:	mov	x2, x24
    21b8:	add	w0, w8, w26
    21bc:	mov	x3, x28
    21c0:	mov	w4, w22
    21c4:	sxtw	x25, w27
    21c8:	bl	2f20 <BZ2_blockSort@@Base+0x172c>
    21cc:	tst	w0, #0xff
    21d0:	b.eq	21f0 <BZ2_blockSort@@Base+0x9fc>  // b.none
    21d4:	ldr	w8, [x19, x25, lsl #2]
    21d8:	add	w9, w20, w27
    21dc:	cmp	w25, w21
    21e0:	sub	w27, w25, w20
    21e4:	str	w8, [x19, w9, sxtw #2]
    21e8:	b.ge	21a8 <BZ2_blockSort@@Base+0x9b4>  // b.tcont
    21ec:	b	21f8 <BZ2_blockSort@@Base+0xa04>
    21f0:	add	w8, w20, w25
    21f4:	sxtw	x25, w8
    21f8:	ldr	w9, [sp, #196]
    21fc:	ldr	w8, [sp, #176]
    2200:	ldr	x10, [sp, #200]
    2204:	ldr	x13, [sp, #184]
    2208:	add	w9, w9, #0x3
    220c:	str	w9, [sp, #196]
    2210:	ldr	w9, [sp, #192]
    2214:	str	w8, [x19, x25, lsl #2]
    2218:	ldr	w8, [sp, #212]
    221c:	add	x10, x10, #0x3
    2220:	add	w9, w9, #0x3
    2224:	str	w9, [sp, #192]
    2228:	ldr	w9, [sp, #180]
    222c:	add	w9, w9, #0x3
    2230:	str	w9, [sp, #180]
    2234:	tbz	w8, #31, 2094 <BZ2_blockSort@@Base+0x8a0>
    2238:	b	2288 <BZ2_blockSort@@Base+0xa94>
    223c:	ldr	x8, [sp, #136]
    2240:	ldr	x4, [sp, #96]
    2244:	cmp	x8, #0x1
    2248:	ldr	x8, [sp, #144]
    224c:	b.gt	205c <BZ2_blockSort@@Base+0x868>
    2250:	ldr	w25, [sp, #212]
    2254:	ldp	x21, x3, [sp, #56]
    2258:	mov	x27, x22
    225c:	ldr	w22, [sp, #92]
    2260:	add	x0, sp, #0x1, lsl #12
    2264:	add	x20, sp, #0xd8
    2268:	mov	w18, #0xfffe                	// #65534
    226c:	add	x0, x0, #0xf8
    2270:	add	x1, sp, #0xf68
    2274:	add	x2, sp, #0xdd8
    2278:	str	w25, [sp, #200]
    227c:	b	1edc <BZ2_blockSort@@Base+0x6e8>
    2280:	mov	w8, w25
    2284:	b	22d4 <BZ2_blockSort@@Base+0xae0>
    2288:	ldr	x21, [sp, #56]
    228c:	mov	x27, x22
    2290:	ldr	w22, [sp, #92]
    2294:	add	x0, sp, #0x1, lsl #12
    2298:	str	w8, [sp, #200]
    229c:	add	x20, sp, #0xd8
    22a0:	mov	w18, #0xfffe                	// #65534
    22a4:	add	x0, x0, #0xf8
    22a8:	add	x1, sp, #0xf68
    22ac:	add	x2, sp, #0xdd8
    22b0:	tbnz	w8, #31, 2590 <BZ2_blockSort@@Base+0xd9c>
    22b4:	ldr	x9, [sp, #168]
    22b8:	ldp	w11, w10, [sp, #104]
    22bc:	add	x23, sp, #0x8d8
    22c0:	add	x26, sp, #0x4d8
    22c4:	ldr	w9, [x21, x9, lsl #2]
    22c8:	sub	w10, w22, w10
    22cc:	add	w10, w10, w11
    22d0:	add	w22, w10, #0x1
    22d4:	ldr	x10, [sp, #168]
    22d8:	orr	w9, w9, #0x200000
    22dc:	mov	w25, w8
    22e0:	str	w9, [x21, x10, lsl #2]
    22e4:	ldr	x9, [sp, #152]
    22e8:	add	x9, x9, #0x1
    22ec:	cmp	x9, #0x100
    22f0:	b.ne	1c98 <BZ2_blockSort@@Base+0x4a4>  // b.any
    22f4:	b	2334 <BZ2_blockSort@@Base+0xb40>
    22f8:	adrp	x9, 1d000 <BZ2_bzerror@@Base+0x10c24>
    22fc:	ldr	x9, [x9, #4016]
    2300:	adrp	x1, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    2304:	add	w5, w8, #0x1
    2308:	add	x1, x1, #0x66b
    230c:	ldr	x0, [x9]
    2310:	ldp	x3, x2, [sp, #152]
    2314:	mov	w4, w22
    2318:	bl	1700 <fprintf@plt>
    231c:	add	x0, sp, #0x1, lsl #12
    2320:	add	x2, sp, #0xdd8
    2324:	add	x1, sp, #0xf68
    2328:	add	x0, x0, #0xf8
    232c:	mov	w18, #0xfffe                	// #65534
    2330:	b	1ce8 <BZ2_blockSort@@Base+0x4f4>
    2334:	ldr	x8, [sp, #120]
    2338:	ldrb	w8, [x23, x8]
    233c:	cbz	w8, 235c <BZ2_blockSort@@Base+0xb68>
    2340:	mov	w0, #0x3ee                 	// #1006
    2344:	bl	16f0 <BZ2_bz__AssertH__fail@plt>
    2348:	add	x0, sp, #0x1, lsl #12
    234c:	add	x2, sp, #0xdd8
    2350:	add	x1, sp, #0xf68
    2354:	add	x0, x0, #0xf8
    2358:	mov	w18, #0xfffe                	// #65534
    235c:	ldr	x9, [sp, #40]
    2360:	ldr	x10, [sp, #120]
    2364:	mov	x8, xzr
    2368:	add	x9, x9, x10, lsl #2
    236c:	ldur	w10, [x9, #-4]
    2370:	and	w10, w10, #0xffdfffff
    2374:	str	w10, [x26, x8]
    2378:	ldr	w10, [x9]
    237c:	add	x9, x9, #0x400
    2380:	and	w10, w10, #0xffdfffff
    2384:	sub	w10, w10, #0x1
    2388:	str	w10, [x20, x8]
    238c:	add	x8, x8, #0x4
    2390:	cmp	x8, #0x400
    2394:	b.ne	236c <BZ2_blockSort@@Base+0xb78>  // b.any
    2398:	ldr	x8, [sp, #128]
    239c:	add	x13, sp, #0xd8
    23a0:	ldrsw	x9, [x21, x8, lsl #2]
    23a4:	ldr	x8, [sp, #120]
    23a8:	and	x9, x9, #0xffffffffffdfffff
    23ac:	ldr	w8, [x26, x8, lsl #2]
    23b0:	cmp	w9, w8
    23b4:	b.ge	23f8 <BZ2_blockSort@@Base+0xc04>  // b.tcont
    23b8:	ldr	w10, [x19, x9, lsl #2]
    23bc:	sub	w10, w10, #0x1
    23c0:	and	w11, w27, w10, asr #31
    23c4:	add	w10, w11, w10
    23c8:	ldrb	w11, [x24, w10, sxtw]
    23cc:	ldrb	w12, [x23, x11]
    23d0:	cbnz	w12, 23ec <BZ2_blockSort@@Base+0xbf8>
    23d4:	ldrsw	x8, [x26, x11, lsl #2]
    23d8:	add	w12, w8, #0x1
    23dc:	str	w12, [x26, x11, lsl #2]
    23e0:	str	w10, [x19, x8, lsl #2]
    23e4:	ldr	x8, [sp, #120]
    23e8:	ldr	w8, [x26, x8, lsl #2]
    23ec:	add	x9, x9, #0x1
    23f0:	cmp	x9, w8, sxtw
    23f4:	b.lt	23b8 <BZ2_blockSort@@Base+0xbc4>  // b.tstop
    23f8:	ldr	x9, [sp, #128]
    23fc:	add	w20, w9, #0x100
    2400:	ldr	x9, [sp, #120]
    2404:	ldr	w10, [x21, w20, sxtw #2]
    2408:	ldr	w9, [x13, x9, lsl #2]
    240c:	and	w10, w10, #0xffdfffff
    2410:	sub	w10, w10, #0x1
    2414:	cmp	w10, w9
    2418:	b.le	2458 <BZ2_blockSort@@Base+0xc64>
    241c:	ldr	w11, [x19, w10, sxtw #2]
    2420:	sub	w11, w11, #0x1
    2424:	and	w12, w27, w11, asr #31
    2428:	add	w11, w12, w11
    242c:	ldrb	w12, [x24, w11, sxtw]
    2430:	ldrb	w13, [x23, x12]
    2434:	cbnz	w13, 2410 <BZ2_blockSort@@Base+0xc1c>
    2438:	add	x14, sp, #0xd8
    243c:	ldrsw	x9, [x14, x12, lsl #2]
    2440:	sub	w13, w9, #0x1
    2444:	str	w13, [x14, x12, lsl #2]
    2448:	str	w11, [x19, x9, lsl #2]
    244c:	ldr	x9, [sp, #120]
    2450:	ldr	w9, [x14, x9, lsl #2]
    2454:	b	2410 <BZ2_blockSort@@Base+0xc1c>
    2458:	sub	w10, w8, #0x1
    245c:	cmp	w10, w9
    2460:	b.eq	2490 <BZ2_blockSort@@Base+0xc9c>  // b.none
    2464:	cbnz	w8, 2474 <BZ2_blockSort@@Base+0xc80>
    2468:	ldr	w8, [sp, #36]
    246c:	cmp	w9, w8
    2470:	b.eq	2490 <BZ2_blockSort@@Base+0xc9c>  // b.none
    2474:	mov	w0, #0x3ef                 	// #1007
    2478:	bl	16f0 <BZ2_bz__AssertH__fail@plt>
    247c:	add	x0, sp, #0x1, lsl #12
    2480:	add	x2, sp, #0xdd8
    2484:	add	x1, sp, #0xf68
    2488:	add	x0, x0, #0xf8
    248c:	mov	w18, #0xfffe                	// #65534
    2490:	ldr	x10, [sp, #120]
    2494:	mov	x9, xzr
    2498:	sxtw	x8, w20
    249c:	add	x10, x21, x10, lsl #2
    24a0:	ldr	w11, [x10, x9]
    24a4:	orr	w11, w11, #0x200000
    24a8:	str	w11, [x10, x9]
    24ac:	add	x9, x9, #0x400
    24b0:	cmp	x9, #0x40, lsl #12
    24b4:	b.ne	24a0 <BZ2_blockSort@@Base+0xcac>  // b.any
    24b8:	ldr	x9, [sp, #48]
    24bc:	ldr	x10, [sp, #120]
    24c0:	add	x20, sp, #0xd8
    24c4:	cmp	x9, #0xfe
    24c8:	mov	w9, #0x1                   	// #1
    24cc:	strb	w9, [x23, x10]
    24d0:	b.hi	2568 <BZ2_blockSort@@Base+0xd74>  // b.pmore
    24d4:	ldr	x9, [sp, #128]
    24d8:	ldr	w8, [x21, x8, lsl #2]
    24dc:	ldrsw	x9, [x21, x9, lsl #2]
    24e0:	and	w8, w8, #0xffdfffff
    24e4:	and	x10, x9, #0xffffffffffdfffff
    24e8:	sub	w11, w8, w10
    24ec:	mov	w8, #0xffffffff            	// #-1
    24f0:	add	w8, w8, #0x1
    24f4:	asr	w9, w11, w8
    24f8:	cmp	w9, w18
    24fc:	b.gt	24f0 <BZ2_blockSort@@Base+0xcfc>
    2500:	subs	w9, w11, #0x1
    2504:	b.lt	2540 <BZ2_blockSort@@Base+0xd4c>  // b.tstop
    2508:	ldr	x12, [sp, #24]
    250c:	mov	w11, w11
    2510:	add	x10, x12, x10, lsl #2
    2514:	ldrsw	x12, [x10, x11, lsl #2]
    2518:	sub	x11, x11, #0x1
    251c:	lsr	w13, w11, w8
    2520:	cmp	w12, #0x21
    2524:	strh	w13, [x28, x12, lsl #1]
    2528:	b.gt	2534 <BZ2_blockSort@@Base+0xd40>
    252c:	add	w12, w12, w27
    2530:	strh	w13, [x28, w12, sxtw #1]
    2534:	add	x12, x11, #0x1
    2538:	cmp	x12, #0x1
    253c:	b.gt	2514 <BZ2_blockSort@@Base+0xd20>
    2540:	asr	w8, w9, w8
    2544:	cmp	w8, #0x10, lsl #12
    2548:	b.lt	2568 <BZ2_blockSort@@Base+0xd74>  // b.tstop
    254c:	mov	w0, #0x3ea                 	// #1002
    2550:	bl	16f0 <BZ2_bz__AssertH__fail@plt>
    2554:	add	x0, sp, #0x1, lsl #12
    2558:	add	x2, sp, #0xdd8
    255c:	add	x1, sp, #0xf68
    2560:	add	x0, x0, #0xf8
    2564:	mov	w18, #0xfffe                	// #65534
    2568:	ldr	x8, [sp, #48]
    256c:	add	x8, x8, #0x1
    2570:	cmp	x8, #0x100
    2574:	b.ne	1c6c <BZ2_blockSort@@Base+0x478>  // b.any
    2578:	ldr	w23, [sp, #76]
    257c:	cmp	w23, #0x3
    2580:	b.gt	26d8 <BZ2_blockSort@@Base+0xee4>
    2584:	ldr	x20, [sp]
    2588:	ldr	w25, [sp, #200]
    258c:	b	259c <BZ2_blockSort@@Base+0xda8>
    2590:	ldr	x20, [sp]
    2594:	ldr	w25, [sp, #200]
    2598:	ldr	w23, [sp, #76]
    259c:	cmp	w23, #0x3
    25a0:	b.ge	2670 <BZ2_blockSort@@Base+0xe7c>  // b.tcont
    25a4:	tbz	w25, #31, 25c4 <BZ2_blockSort@@Base+0xdd0>
    25a8:	cmp	w23, #0x2
    25ac:	b.ge	26b4 <BZ2_blockSort@@Base+0xec0>  // b.tcont
    25b0:	ldp	x0, x1, [x20, #24]
    25b4:	mov	x2, x21
    25b8:	mov	w3, w27
    25bc:	mov	w4, w23
    25c0:	bl	2700 <BZ2_blockSort@@Base+0xf0c>
    25c4:	ldrsw	x8, [x20, #108]
    25c8:	mov	w9, #0xffffffff            	// #-1
    25cc:	str	w9, [x20, #48]
    25d0:	cmp	w8, #0x1
    25d4:	b.lt	25f0 <BZ2_blockSort@@Base+0xdfc>  // b.tstop
    25d8:	mov	x9, xzr
    25dc:	ldr	w10, [x19, x9, lsl #2]
    25e0:	cbz	w10, 25fc <BZ2_blockSort@@Base+0xe08>
    25e4:	add	x9, x9, #0x1
    25e8:	cmp	x9, x8
    25ec:	b.lt	25dc <BZ2_blockSort@@Base+0xde8>  // b.tstop
    25f0:	mov	w0, #0x3eb                 	// #1003
    25f4:	bl	16f0 <BZ2_bz__AssertH__fail@plt>
    25f8:	b	2600 <BZ2_blockSort@@Base+0xe0c>
    25fc:	str	w9, [x20, #48]
    2600:	add	sp, sp, #0x1, lsl #12
    2604:	add	sp, sp, #0x290
    2608:	ldp	x20, x19, [sp, #80]
    260c:	ldp	x22, x21, [sp, #64]
    2610:	ldp	x24, x23, [sp, #48]
    2614:	ldp	x26, x25, [sp, #32]
    2618:	ldp	x28, x27, [sp, #16]
    261c:	ldp	x29, x30, [sp], #96
    2620:	ret
    2624:	adrp	x8, 1d000 <BZ2_bzerror@@Base+0x10c24>
    2628:	ldr	x8, [x8, #4016]
    262c:	adrp	x0, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    2630:	add	x0, x0, #0x649
    2634:	mov	w1, #0x21                  	// #33
    2638:	ldr	x3, [x8]
    263c:	mov	w2, #0x1                   	// #1
    2640:	bl	16a0 <fwrite@plt>
    2644:	b	18a4 <BZ2_blockSort@@Base+0xb0>
    2648:	adrp	x8, 1d000 <BZ2_bzerror@@Base+0x10c24>
    264c:	ldr	x8, [x8, #4016]
    2650:	adrp	x0, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    2654:	add	x0, x0, #0x5dc
    2658:	mov	w1, #0x1b                  	// #27
    265c:	ldr	x3, [x8]
    2660:	mov	w2, #0x1                   	// #1
    2664:	bl	16a0 <fwrite@plt>
    2668:	ldr	x12, [sp, #16]
    266c:	b	1a04 <BZ2_blockSort@@Base+0x210>
    2670:	adrp	x8, 1d000 <BZ2_bzerror@@Base+0x10c24>
    2674:	ldr	x8, [x8, #4016]
    2678:	cmp	w27, #0x0
    267c:	adrp	x1, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    2680:	add	x1, x1, #0x580
    2684:	ldr	x0, [x8]
    2688:	ldr	w8, [sp, #12]
    268c:	ldr	x3, [sp, #16]
    2690:	sub	w2, w8, w25
    2694:	csinc	w8, w27, wzr, ne  // ne = any
    2698:	scvtf	s0, w2
    269c:	scvtf	s1, w8
    26a0:	fdiv	s0, s0, s1
    26a4:	fcvt	d0, s0
    26a8:	bl	1700 <fprintf@plt>
    26ac:	tbz	w25, #31, 25c4 <BZ2_blockSort@@Base+0xdd0>
    26b0:	b	25a8 <BZ2_blockSort@@Base+0xdb4>
    26b4:	adrp	x8, 1d000 <BZ2_bzerror@@Base+0x10c24>
    26b8:	ldr	x8, [x8, #4016]
    26bc:	adrp	x0, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    26c0:	add	x0, x0, #0x5a6
    26c4:	mov	w1, #0x35                  	// #53
    26c8:	ldr	x3, [x8]
    26cc:	mov	w2, #0x1                   	// #1
    26d0:	bl	16a0 <fwrite@plt>
    26d4:	b	25b0 <BZ2_blockSort@@Base+0xdbc>
    26d8:	adrp	x8, 1d000 <BZ2_bzerror@@Base+0x10c24>
    26dc:	ldr	x8, [x8, #4016]
    26e0:	adrp	x1, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    26e4:	sub	w4, w27, w22
    26e8:	add	x1, x1, #0x69b
    26ec:	ldr	x0, [x8]
    26f0:	ldr	x2, [sp, #16]
    26f4:	mov	w3, w22
    26f8:	bl	1700 <fprintf@plt>
    26fc:	b	2584 <BZ2_blockSort@@Base+0xd90>
    2700:	stp	x29, x30, [sp, #-96]!
    2704:	stp	x28, x27, [sp, #16]
    2708:	stp	x26, x25, [sp, #32]
    270c:	stp	x24, x23, [sp, #48]
    2710:	stp	x22, x21, [sp, #64]
    2714:	stp	x20, x19, [sp, #80]
    2718:	mov	x29, sp
    271c:	sub	sp, sp, #0xb50
    2720:	mov	w25, w4
    2724:	mov	w21, w3
    2728:	mov	x23, x2
    272c:	mov	x19, x1
    2730:	mov	x20, x0
    2734:	cmp	w4, #0x4
    2738:	b.ge	2ed8 <BZ2_blockSort@@Base+0x16e4>  // b.tcont
    273c:	add	x0, sp, #0x424
    2740:	mov	w2, #0x404                 	// #1028
    2744:	mov	w1, wzr
    2748:	mov	w28, w21
    274c:	mov	w22, w21
    2750:	add	x21, sp, #0x424
    2754:	bl	1560 <memset@plt>
    2758:	cmp	w22, #0x1
    275c:	str	w22, [sp, #16]
    2760:	b.lt	278c <BZ2_blockSort@@Base+0xf98>  // b.tstop
    2764:	mov	x8, x28
    2768:	mov	x9, x19
    276c:	ldrb	w10, [x9], #1
    2770:	subs	x8, x8, #0x1
    2774:	ldr	w11, [x21, x10, lsl #2]
    2778:	add	w11, w11, #0x1
    277c:	str	w11, [x21, x10, lsl #2]
    2780:	b.ne	276c <BZ2_blockSort@@Base+0xf78>  // b.any
    2784:	ldr	w22, [sp, #1060]
    2788:	b	2790 <BZ2_blockSort@@Base+0xf9c>
    278c:	mov	w22, wzr
    2790:	add	x0, sp, #0x24
    2794:	add	x1, sp, #0x424
    2798:	mov	w2, #0x400                 	// #1024
    279c:	bl	14a0 <memcpy@plt>
    27a0:	mov	x8, xzr
    27a4:	add	x9, x21, #0x4
    27a8:	ldr	w10, [x9, x8]
    27ac:	add	w22, w10, w22
    27b0:	str	w22, [x9, x8]
    27b4:	add	x8, x8, #0x4
    27b8:	cmp	x8, #0x400
    27bc:	b.ne	27a8 <BZ2_blockSort@@Base+0xfb4>  // b.any
    27c0:	ldr	w21, [sp, #16]
    27c4:	cmp	w21, #0x1
    27c8:	b.lt	27f4 <BZ2_blockSort@@Base+0x1000>  // b.tstop
    27cc:	mov	x8, xzr
    27d0:	add	x9, sp, #0x424
    27d4:	ldrb	w10, [x19, x8]
    27d8:	ldrsw	x11, [x9, x10, lsl #2]
    27dc:	sub	x11, x11, #0x1
    27e0:	str	w11, [x9, x10, lsl #2]
    27e4:	str	w8, [x20, x11, lsl #2]
    27e8:	add	x8, x8, #0x1
    27ec:	cmp	x28, x8
    27f0:	b.ne	27d4 <BZ2_blockSort@@Base+0xfe0>  // b.any
    27f4:	cmn	w21, #0x3f
    27f8:	b.lt	2828 <BZ2_blockSort@@Base+0x1034>  // b.tstop
    27fc:	add	w8, w21, #0x1f
    2800:	cmp	w21, #0x0
    2804:	csel	w8, w8, w21, lt  // lt = tstop
    2808:	asr	w8, w8, #5
    280c:	cmn	w21, #0x20
    2810:	csinc	w8, wzr, w8, le
    2814:	lsl	x8, x8, #2
    2818:	add	x2, x8, #0x4
    281c:	mov	x0, x23
    2820:	mov	w1, wzr
    2824:	bl	1560 <memset@plt>
    2828:	mov	x8, xzr
    282c:	add	x9, sp, #0x424
    2830:	mov	w10, #0x1                   	// #1
    2834:	ldr	w11, [x9, x8]
    2838:	add	x8, x8, #0x4
    283c:	cmp	x8, #0x400
    2840:	asr	w12, w11, #5
    2844:	ldr	w13, [x23, w12, sxtw #2]
    2848:	lsl	w11, w10, w11
    284c:	orr	w11, w11, w13
    2850:	str	w11, [x23, w12, sxtw #2]
    2854:	b.ne	2834 <BZ2_blockSort@@Base+0x1040>  // b.any
    2858:	mov	w8, wzr
    285c:	mov	w9, #0x1                   	// #1
    2860:	add	w10, w21, w8
    2864:	asr	w11, w10, #5
    2868:	ldr	w12, [x23, w11, sxtw #2]
    286c:	lsl	w13, w9, w10
    2870:	add	w10, w10, #0x1
    2874:	asr	w14, w10, #5
    2878:	orr	w12, w12, w13
    287c:	str	w12, [x23, w11, sxtw #2]
    2880:	ldr	w11, [x23, w14, sxtw #2]
    2884:	add	w8, w8, #0x2
    2888:	lsl	w10, w9, w10
    288c:	cmp	w8, #0x40
    2890:	bic	w10, w11, w10
    2894:	str	w10, [x23, w14, sxtw #2]
    2898:	b.ne	2860 <BZ2_blockSort@@Base+0x106c>  // b.any
    289c:	add	x8, x20, #0x4
    28a0:	mov	w24, #0x1                   	// #1
    28a4:	add	x2, sp, #0x9b8
    28a8:	add	x3, sp, #0x828
    28ac:	mov	w22, #0x1                   	// #1
    28b0:	str	x8, [sp, #8]
    28b4:	str	w25, [sp, #20]
    28b8:	cmp	w25, #0x4
    28bc:	b.ge	2e00 <BZ2_blockSort@@Base+0x160c>  // b.tcont
    28c0:	cmp	w21, #0x1
    28c4:	b.lt	2904 <BZ2_blockSort@@Base+0x1110>  // b.tstop
    28c8:	mov	x8, xzr
    28cc:	mov	w9, wzr
    28d0:	ubfx	x10, x8, #5, #27
    28d4:	ldr	w10, [x23, x10, lsl #2]
    28d8:	ldr	w11, [x20, x8, lsl #2]
    28dc:	lsr	w10, w10, w8
    28e0:	sub	w11, w11, w22
    28e4:	tst	w10, #0x1
    28e8:	and	w12, w28, w11, asr #31
    28ec:	csel	w9, w9, w8, eq  // eq = none
    28f0:	add	x8, x8, #0x1
    28f4:	add	w10, w12, w11
    28f8:	cmp	x28, x8
    28fc:	str	w9, [x19, w10, sxtw #2]
    2900:	b.ne	28d0 <BZ2_blockSort@@Base+0x10dc>  // b.any
    2904:	stp	w22, wzr, [sp, #28]
    2908:	mov	w22, #0xffffffff            	// #-1
    290c:	add	w27, w22, #0x1
    2910:	asr	w9, w27, #5
    2914:	ldr	w9, [x23, w9, sxtw #2]
    2918:	lsl	w10, w24, w27
    291c:	mov	w8, w22
    2920:	tst	w27, #0x1f
    2924:	and	w9, w10, w9
    2928:	b.eq	2934 <BZ2_blockSort@@Base+0x1140>  // b.none
    292c:	mov	w22, w27
    2930:	cbnz	w9, 290c <BZ2_blockSort@@Base+0x1118>
    2934:	cbz	w9, 296c <BZ2_blockSort@@Base+0x1178>
    2938:	sub	w9, w8, #0x1f
    293c:	add	w9, w9, #0x20
    2940:	asr	w10, w9, #5
    2944:	ldr	w10, [x23, w10, sxtw #2]
    2948:	mov	w27, w8
    294c:	add	w8, w8, #0x20
    2950:	cmn	w10, #0x1
    2954:	b.eq	293c <BZ2_blockSort@@Base+0x1148>  // b.none
    2958:	add	w27, w27, #0x1
    295c:	asr	w8, w27, #5
    2960:	ldr	w8, [x23, w8, sxtw #2]
    2964:	lsr	w8, w8, w27
    2968:	tbnz	w8, #0, 2958 <BZ2_blockSort@@Base+0x1164>
    296c:	cmp	w27, w21
    2970:	b.gt	2dd8 <BZ2_blockSort@@Base+0x15e4>
    2974:	sub	w25, w27, #0x1
    2978:	sub	w11, w27, #0x20
    297c:	mov	w13, w25
    2980:	mov	w10, w27
    2984:	asr	w8, w10, #5
    2988:	ldr	w12, [x23, w8, sxtw #2]
    298c:	mov	w8, w11
    2990:	lsl	w11, w24, w10
    2994:	mov	w9, w13
    2998:	tst	w10, #0x1f
    299c:	and	w12, w11, w12
    29a0:	add	w10, w10, #0x1
    29a4:	b.eq	29b4 <BZ2_blockSort@@Base+0x11c0>  // b.none
    29a8:	add	w11, w8, #0x1
    29ac:	add	w13, w9, #0x1
    29b0:	cbz	w12, 2984 <BZ2_blockSort@@Base+0x1190>
    29b4:	cbz	w12, 29c0 <BZ2_blockSort@@Base+0x11cc>
    29b8:	sub	w26, w10, #0x1
    29bc:	b	29ec <BZ2_blockSort@@Base+0x11f8>
    29c0:	add	w8, w8, #0x20
    29c4:	asr	w10, w8, #5
    29c8:	ldr	w10, [x23, w10, sxtw #2]
    29cc:	mov	w26, w9
    29d0:	add	w9, w9, #0x20
    29d4:	cbz	w10, 29c0 <BZ2_blockSort@@Base+0x11cc>
    29d8:	add	w26, w26, #0x1
    29dc:	asr	w8, w26, #5
    29e0:	ldr	w8, [x23, w8, sxtw #2]
    29e4:	lsr	w8, w8, w26
    29e8:	tbz	w8, #0, 29d8 <BZ2_blockSort@@Base+0x11e4>
    29ec:	cmp	w26, w21
    29f0:	b.gt	2dd8 <BZ2_blockSort@@Base+0x15e4>
    29f4:	cmp	w26, w27
    29f8:	sub	w22, w26, #0x1
    29fc:	b.le	290c <BZ2_blockSort@@Base+0x1118>
    2a00:	ldr	w8, [sp, #32]
    2a04:	str	wzr, [sp, #24]
    2a08:	str	w25, [sp, #2488]
    2a0c:	str	w22, [sp, #2088]
    2a10:	sub	w8, w8, w27
    2a14:	add	w8, w8, w22
    2a18:	add	w8, w8, #0x2
    2a1c:	str	w8, [sp, #32]
    2a20:	mov	w8, #0x1                   	// #1
    2a24:	mov	w8, w8
    2a28:	mov	x21, x8
    2a2c:	cmp	x8, #0x63
    2a30:	b.lt	2a44 <BZ2_blockSort@@Base+0x1250>  // b.tstop
    2a34:	mov	w0, #0x3ec                 	// #1004
    2a38:	bl	16f0 <BZ2_bz__AssertH__fail@plt>
    2a3c:	add	x3, sp, #0x828
    2a40:	add	x2, sp, #0x9b8
    2a44:	sub	x8, x21, #0x1
    2a48:	ldr	w10, [x2, x8, lsl #2]
    2a4c:	ldr	w9, [x3, x8, lsl #2]
    2a50:	sxtw	x11, w10
    2a54:	sub	w12, w9, w10
    2a58:	cmp	w12, #0x9
    2a5c:	b.gt	2b60 <BZ2_blockSort@@Base+0x136c>
    2a60:	cmp	w9, w10
    2a64:	b.eq	2b54 <BZ2_blockSort@@Base+0x1360>  // b.none
    2a68:	cmp	w12, #0x4
    2a6c:	sxtw	x12, w9
    2a70:	b.lt	2ae4 <BZ2_blockSort@@Base+0x12f0>  // b.tstop
    2a74:	sub	w13, w9, #0x4
    2a78:	cmp	w13, w10
    2a7c:	b.lt	2ae4 <BZ2_blockSort@@Base+0x12f0>  // b.tstop
    2a80:	sxtw	x13, w13
    2a84:	mov	w14, w9
    2a88:	ldrsw	x15, [x20, x13, lsl #2]
    2a8c:	add	x16, x13, #0x4
    2a90:	cmp	x16, x12
    2a94:	b.le	2aa0 <BZ2_blockSort@@Base+0x12ac>
    2a98:	mov	w16, w13
    2a9c:	b	2ad0 <BZ2_blockSort@@Base+0x12dc>
    2aa0:	ldr	w17, [x19, x15, lsl #2]
    2aa4:	sxtw	x18, w14
    2aa8:	mov	w16, w13
    2aac:	ldr	w0, [x20, x18, lsl #2]
    2ab0:	ldr	w1, [x19, x0, lsl #2]
    2ab4:	cmp	w17, w1
    2ab8:	b.ls	2ad0 <BZ2_blockSort@@Base+0x12dc>  // b.plast
    2abc:	add	x18, x18, #0x4
    2ac0:	str	w0, [x20, w16, sxtw #2]
    2ac4:	cmp	x18, x12
    2ac8:	add	w16, w16, #0x4
    2acc:	b.le	2aac <BZ2_blockSort@@Base+0x12b8>
    2ad0:	cmp	x13, x11
    2ad4:	sub	x13, x13, #0x1
    2ad8:	sub	w14, w14, #0x1
    2adc:	str	w15, [x20, w16, sxtw #2]
    2ae0:	b.gt	2a88 <BZ2_blockSort@@Base+0x1294>
    2ae4:	cmp	w9, w10
    2ae8:	b.le	2b54 <BZ2_blockSort@@Base+0x1360>
    2aec:	add	x10, x20, x12, lsl #2
    2af0:	mov	x15, x12
    2af4:	sub	x13, x15, #0x1
    2af8:	ldrsw	x14, [x20, x13, lsl #2]
    2afc:	cmp	w15, w9
    2b00:	mov	w16, w13
    2b04:	b.gt	2b40 <BZ2_blockSort@@Base+0x134c>
    2b08:	ldr	w16, [x19, x14, lsl #2]
    2b0c:	mov	x17, x10
    2b10:	ldr	w18, [x17]
    2b14:	ldr	w0, [x19, x18, lsl #2]
    2b18:	cmp	w16, w0
    2b1c:	b.ls	2b3c <BZ2_blockSort@@Base+0x1348>  // b.plast
    2b20:	stur	w18, [x17, #-4]
    2b24:	add	x18, x15, #0x1
    2b28:	cmp	x15, x12
    2b2c:	add	x17, x17, #0x4
    2b30:	mov	x15, x18
    2b34:	b.lt	2b10 <BZ2_blockSort@@Base+0x131c>  // b.tstop
    2b38:	mov	w15, w18
    2b3c:	sub	w16, w15, #0x1
    2b40:	cmp	x13, x11
    2b44:	sub	x10, x10, #0x4
    2b48:	mov	x15, x13
    2b4c:	str	w14, [x20, w16, sxtw #2]
    2b50:	b.gt	2af4 <BZ2_blockSort@@Base+0x1300>
    2b54:	cmp	x21, #0x1
    2b58:	b.gt	2a28 <BZ2_blockSort@@Base+0x1234>
    2b5c:	b	2d88 <BZ2_blockSort@@Base+0x1594>
    2b60:	ldr	w14, [sp, #24]
    2b64:	mov	w12, #0x1dc5                	// #7621
    2b68:	orr	w13, wzr, #0x1
    2b6c:	madd	w12, w14, w12, w13
    2b70:	and	w13, w12, #0x7fff
    2b74:	mov	w12, #0xaaab                	// #43691
    2b78:	movk	w12, #0xaaaa, lsl #16
    2b7c:	umull	x12, w13, w12
    2b80:	lsr	x12, x12, #33
    2b84:	add	w12, w12, w12, lsl #1
    2b88:	str	w13, [sp, #24]
    2b8c:	subs	w13, w13, w12
    2b90:	mov	w12, w10
    2b94:	b.eq	2bb0 <BZ2_blockSort@@Base+0x13bc>  // b.none
    2b98:	cmp	w13, #0x1
    2b9c:	b.ne	2bac <BZ2_blockSort@@Base+0x13b8>  // b.any
    2ba0:	add	w12, w9, w10
    2ba4:	asr	w12, w12, #1
    2ba8:	b	2bb0 <BZ2_blockSort@@Base+0x13bc>
    2bac:	mov	w12, w9
    2bb0:	ldr	w12, [x20, w12, sxtw #2]
    2bb4:	mov	w14, w9
    2bb8:	mov	w15, w9
    2bbc:	mov	w13, w10
    2bc0:	ldr	w16, [x19, x12, lsl #2]
    2bc4:	mov	w12, w10
    2bc8:	cmp	w13, w15
    2bcc:	b.gt	2c30 <BZ2_blockSort@@Base+0x143c>
    2bd0:	sxtw	x17, w15
    2bd4:	sxtw	x12, w12
    2bd8:	sxtw	x18, w13
    2bdc:	ldr	w13, [x20, x18, lsl #2]
    2be0:	ldr	w0, [x19, x13, lsl #2]
    2be4:	subs	w0, w0, w16
    2be8:	b.eq	2c08 <BZ2_blockSort@@Base+0x1414>  // b.none
    2bec:	cmp	w0, #0x0
    2bf0:	b.gt	2c2c <BZ2_blockSort@@Base+0x1438>
    2bf4:	add	x13, x18, #0x1
    2bf8:	cmp	x18, x17
    2bfc:	mov	x18, x13
    2c00:	b.lt	2bdc <BZ2_blockSort@@Base+0x13e8>  // b.tstop
    2c04:	b	2c30 <BZ2_blockSort@@Base+0x143c>
    2c08:	ldr	w0, [x20, x12, lsl #2]
    2c0c:	cmp	w15, w18
    2c10:	str	w0, [x20, x18, lsl #2]
    2c14:	str	w13, [x20, x12, lsl #2]
    2c18:	add	x12, x12, #0x1
    2c1c:	add	w13, w18, #0x1
    2c20:	b.gt	2bd8 <BZ2_blockSort@@Base+0x13e4>
    2c24:	add	w13, w18, #0x1
    2c28:	b	2c30 <BZ2_blockSort@@Base+0x143c>
    2c2c:	mov	w13, w18
    2c30:	cmp	w13, w15
    2c34:	b.gt	2ca4 <BZ2_blockSort@@Base+0x14b0>
    2c38:	sxtw	x17, w13
    2c3c:	sxtw	x14, w14
    2c40:	sxtw	x18, w15
    2c44:	ldr	w15, [x20, x18, lsl #2]
    2c48:	ldr	w0, [x19, x15, lsl #2]
    2c4c:	subs	w0, w0, w16
    2c50:	b.eq	2c6c <BZ2_blockSort@@Base+0x1478>  // b.none
    2c54:	tbnz	w0, #31, 2c8c <BZ2_blockSort@@Base+0x1498>
    2c58:	sub	x15, x18, #0x1
    2c5c:	cmp	x18, x17
    2c60:	mov	x18, x15
    2c64:	b.gt	2c44 <BZ2_blockSort@@Base+0x1450>
    2c68:	b	2ca4 <BZ2_blockSort@@Base+0x14b0>
    2c6c:	ldr	w0, [x20, x14, lsl #2]
    2c70:	cmp	w13, w18
    2c74:	str	w0, [x20, x18, lsl #2]
    2c78:	str	w15, [x20, x14, lsl #2]
    2c7c:	sub	x14, x14, #0x1
    2c80:	sub	w15, w18, #0x1
    2c84:	b.lt	2c40 <BZ2_blockSort@@Base+0x144c>  // b.tstop
    2c88:	b	2ca4 <BZ2_blockSort@@Base+0x14b0>
    2c8c:	ldr	w0, [x20, x17, lsl #2]
    2c90:	str	w15, [x20, x17, lsl #2]
    2c94:	add	w13, w13, #0x1
    2c98:	sub	w15, w18, #0x1
    2c9c:	str	w0, [x20, x18, lsl #2]
    2ca0:	b	2bc8 <BZ2_blockSort@@Base+0x13d4>
    2ca4:	cmp	w14, w12
    2ca8:	b.lt	2d80 <BZ2_blockSort@@Base+0x158c>  // b.tstop
    2cac:	sub	w16, w12, w10
    2cb0:	sub	w17, w13, w12
    2cb4:	cmp	w16, w17
    2cb8:	csel	w17, w16, w17, lt  // lt = tstop
    2cbc:	cmp	w17, #0x1
    2cc0:	b.lt	2cf0 <BZ2_blockSort@@Base+0x14fc>  // b.tstop
    2cc4:	sub	w16, w13, w17
    2cc8:	add	x11, x20, x11, lsl #2
    2ccc:	add	x16, x20, w16, sxtw #2
    2cd0:	add	w17, w17, #0x1
    2cd4:	ldr	w18, [x16]
    2cd8:	ldr	w0, [x11]
    2cdc:	sub	w17, w17, #0x1
    2ce0:	cmp	w17, #0x1
    2ce4:	str	w18, [x11], #4
    2ce8:	str	w0, [x16], #4
    2cec:	b.gt	2cd4 <BZ2_blockSort@@Base+0x14e0>
    2cf0:	sub	w16, w9, w14
    2cf4:	sub	w11, w14, w15
    2cf8:	cmp	w16, w11
    2cfc:	csel	w16, w16, w11, lt  // lt = tstop
    2d00:	cmp	w16, #0x1
    2d04:	b.lt	2d38 <BZ2_blockSort@@Base+0x1544>  // b.tstop
    2d08:	ldr	x17, [sp, #8]
    2d0c:	sub	w15, w9, w16
    2d10:	add	x14, x20, w13, sxtw #2
    2d14:	add	w16, w16, #0x1
    2d18:	add	x15, x17, w15, sxtw #2
    2d1c:	ldr	w17, [x15]
    2d20:	ldr	w18, [x14]
    2d24:	sub	w16, w16, #0x1
    2d28:	cmp	w16, #0x1
    2d2c:	str	w17, [x14], #4
    2d30:	str	w18, [x15], #4
    2d34:	b.gt	2d1c <BZ2_blockSort@@Base+0x1528>
    2d38:	mvn	w12, w12
    2d3c:	sub	w11, w9, w11
    2d40:	add	w12, w10, w12
    2d44:	add	w11, w11, #0x1
    2d48:	add	w12, w12, w13
    2d4c:	sub	w13, w12, w10
    2d50:	sub	w14, w9, w11
    2d54:	cmp	w13, w14
    2d58:	b.le	2d64 <BZ2_blockSort@@Base+0x1570>
    2d5c:	str	w12, [x3, x8, lsl #2]
    2d60:	b	2d70 <BZ2_blockSort@@Base+0x157c>
    2d64:	str	w11, [x2, x8, lsl #2]
    2d68:	mov	w11, w10
    2d6c:	mov	w9, w12
    2d70:	sbfiz	x8, x21, #2, #32
    2d74:	str	w11, [x2, x8]
    2d78:	str	w9, [x3, x8]
    2d7c:	add	w8, w21, #0x1
    2d80:	cmp	w8, #0x0
    2d84:	b.gt	2a24 <BZ2_blockSort@@Base+0x1230>
    2d88:	ldr	w21, [sp, #16]
    2d8c:	cmp	w27, w26
    2d90:	b.gt	290c <BZ2_blockSort@@Base+0x1118>
    2d94:	sxtw	x8, w25
    2d98:	sxtw	x9, w26
    2d9c:	mov	w10, #0xffffffff            	// #-1
    2da0:	ldr	w11, [x20, x8, lsl #2]
    2da4:	ldr	w11, [x19, x11, lsl #2]
    2da8:	cmp	w10, w11
    2dac:	b.eq	2dc8 <BZ2_blockSort@@Base+0x15d4>  // b.none
    2db0:	asr	w10, w8, #5
    2db4:	ldr	w12, [x23, w10, sxtw #2]
    2db8:	lsl	w13, w24, w8
    2dbc:	orr	w12, w12, w13
    2dc0:	str	w12, [x23, w10, sxtw #2]
    2dc4:	mov	w10, w11
    2dc8:	add	x8, x8, #0x1
    2dcc:	cmp	x8, x9
    2dd0:	b.lt	2da0 <BZ2_blockSort@@Base+0x15ac>  // b.tstop
    2dd4:	b	290c <BZ2_blockSort@@Base+0x1118>
    2dd8:	ldr	w25, [sp, #20]
    2ddc:	ldr	w26, [sp, #32]
    2de0:	cmp	w25, #0x4
    2de4:	b.ge	2e28 <BZ2_blockSort@@Base+0x1634>  // b.tcont
    2de8:	ldr	w22, [sp, #28]
    2dec:	lsl	w22, w22, #1
    2df0:	cmp	w22, w21
    2df4:	b.gt	2e50 <BZ2_blockSort@@Base+0x165c>
    2df8:	cbnz	w26, 28b8 <BZ2_blockSort@@Base+0x10c4>
    2dfc:	b	2e50 <BZ2_blockSort@@Base+0x165c>
    2e00:	adrp	x8, 1d000 <BZ2_bzerror@@Base+0x10c24>
    2e04:	ldr	x8, [x8, #4016]
    2e08:	adrp	x1, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    2e0c:	add	x1, x1, #0x5f8
    2e10:	mov	w2, w22
    2e14:	ldr	x0, [x8]
    2e18:	bl	1700 <fprintf@plt>
    2e1c:	add	x3, sp, #0x828
    2e20:	add	x2, sp, #0x9b8
    2e24:	b	28c0 <BZ2_blockSort@@Base+0x10cc>
    2e28:	adrp	x8, 1d000 <BZ2_bzerror@@Base+0x10c24>
    2e2c:	ldr	x8, [x8, #4016]
    2e30:	adrp	x1, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    2e34:	add	x1, x1, #0x60f
    2e38:	mov	w2, w26
    2e3c:	ldr	x0, [x8]
    2e40:	bl	1700 <fprintf@plt>
    2e44:	add	x3, sp, #0x828
    2e48:	add	x2, sp, #0x9b8
    2e4c:	b	2de8 <BZ2_blockSort@@Base+0x15f4>
    2e50:	cmp	w25, #0x4
    2e54:	b.ge	2efc <BZ2_blockSort@@Base+0x1708>  // b.tcont
    2e58:	cmp	w21, #0x1
    2e5c:	b.lt	2eb8 <BZ2_blockSort@@Base+0x16c4>  // b.tstop
    2e60:	mov	x8, xzr
    2e64:	mov	x11, xzr
    2e68:	add	x9, sp, #0x24
    2e6c:	sxtw	x11, w11
    2e70:	sub	w10, w11, #0x1
    2e74:	ldr	w12, [x9, x11, lsl #2]
    2e78:	add	x11, x11, #0x1
    2e7c:	add	w10, w10, #0x1
    2e80:	cbz	w12, 2e74 <BZ2_blockSort@@Base+0x1680>
    2e84:	add	x13, x9, x11, lsl #2
    2e88:	sub	w12, w12, #0x1
    2e8c:	stur	w12, [x13, #-4]
    2e90:	ldr	w12, [x20, x8, lsl #2]
    2e94:	add	x8, x8, #0x1
    2e98:	sub	x11, x11, #0x1
    2e9c:	cmp	x8, x28
    2ea0:	strb	w11, [x19, x12]
    2ea4:	b.ne	2e6c <BZ2_blockSort@@Base+0x1678>  // b.any
    2ea8:	cmp	w10, #0x100
    2eac:	b.lt	2eb8 <BZ2_blockSort@@Base+0x16c4>  // b.tstop
    2eb0:	mov	w0, #0x3ed                 	// #1005
    2eb4:	bl	16f0 <BZ2_bz__AssertH__fail@plt>
    2eb8:	add	sp, sp, #0xb50
    2ebc:	ldp	x20, x19, [sp, #80]
    2ec0:	ldp	x22, x21, [sp, #64]
    2ec4:	ldp	x24, x23, [sp, #48]
    2ec8:	ldp	x26, x25, [sp, #32]
    2ecc:	ldp	x28, x27, [sp, #16]
    2ed0:	ldp	x29, x30, [sp], #96
    2ed4:	ret
    2ed8:	adrp	x8, 1d000 <BZ2_bzerror@@Base+0x10c24>
    2edc:	ldr	x8, [x8, #4016]
    2ee0:	adrp	x0, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    2ee4:	add	x0, x0, #0x5dc
    2ee8:	mov	w1, #0x1b                  	// #27
    2eec:	ldr	x3, [x8]
    2ef0:	mov	w2, #0x1                   	// #1
    2ef4:	bl	16a0 <fwrite@plt>
    2ef8:	b	273c <BZ2_blockSort@@Base+0xf48>
    2efc:	adrp	x8, 1d000 <BZ2_bzerror@@Base+0x10c24>
    2f00:	ldr	x8, [x8, #4016]
    2f04:	adrp	x0, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    2f08:	add	x0, x0, #0x627
    2f0c:	mov	w1, #0x21                  	// #33
    2f10:	ldr	x3, [x8]
    2f14:	mov	w2, #0x1                   	// #1
    2f18:	bl	16a0 <fwrite@plt>
    2f1c:	b	2e58 <BZ2_blockSort@@Base+0x1664>
    2f20:	ldrb	w8, [x2, w0, uxtw]
    2f24:	ldrb	w9, [x2, w1, uxtw]
    2f28:	cmp	w8, w9
    2f2c:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    2f30:	add	w8, w0, #0x1
    2f34:	add	w9, w1, #0x1
    2f38:	ldrb	w8, [x2, w8, uxtw]
    2f3c:	ldrb	w9, [x2, w9, uxtw]
    2f40:	cmp	w8, w9
    2f44:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    2f48:	add	w8, w0, #0x2
    2f4c:	add	w9, w1, #0x2
    2f50:	ldrb	w8, [x2, w8, uxtw]
    2f54:	ldrb	w9, [x2, w9, uxtw]
    2f58:	cmp	w8, w9
    2f5c:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    2f60:	add	w8, w0, #0x3
    2f64:	add	w9, w1, #0x3
    2f68:	ldrb	w8, [x2, w8, uxtw]
    2f6c:	ldrb	w9, [x2, w9, uxtw]
    2f70:	cmp	w8, w9
    2f74:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    2f78:	add	w8, w0, #0x4
    2f7c:	add	w9, w1, #0x4
    2f80:	ldrb	w8, [x2, w8, uxtw]
    2f84:	ldrb	w9, [x2, w9, uxtw]
    2f88:	cmp	w8, w9
    2f8c:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    2f90:	add	w8, w0, #0x5
    2f94:	add	w9, w1, #0x5
    2f98:	ldrb	w8, [x2, w8, uxtw]
    2f9c:	ldrb	w9, [x2, w9, uxtw]
    2fa0:	cmp	w8, w9
    2fa4:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    2fa8:	add	w8, w0, #0x6
    2fac:	add	w9, w1, #0x6
    2fb0:	ldrb	w8, [x2, w8, uxtw]
    2fb4:	ldrb	w9, [x2, w9, uxtw]
    2fb8:	cmp	w8, w9
    2fbc:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    2fc0:	add	w8, w0, #0x7
    2fc4:	add	w9, w1, #0x7
    2fc8:	ldrb	w8, [x2, w8, uxtw]
    2fcc:	ldrb	w9, [x2, w9, uxtw]
    2fd0:	cmp	w8, w9
    2fd4:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    2fd8:	add	w8, w0, #0x8
    2fdc:	add	w9, w1, #0x8
    2fe0:	ldrb	w8, [x2, w8, uxtw]
    2fe4:	ldrb	w9, [x2, w9, uxtw]
    2fe8:	cmp	w8, w9
    2fec:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    2ff0:	add	w8, w0, #0x9
    2ff4:	add	w9, w1, #0x9
    2ff8:	ldrb	w8, [x2, w8, uxtw]
    2ffc:	ldrb	w9, [x2, w9, uxtw]
    3000:	cmp	w8, w9
    3004:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    3008:	add	w8, w0, #0xa
    300c:	add	w9, w1, #0xa
    3010:	ldrb	w8, [x2, w8, uxtw]
    3014:	ldrb	w9, [x2, w9, uxtw]
    3018:	cmp	w8, w9
    301c:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    3020:	add	w8, w0, #0xb
    3024:	add	w9, w1, #0xb
    3028:	ldrb	w8, [x2, w8, uxtw]
    302c:	ldrb	w9, [x2, w9, uxtw]
    3030:	cmp	w8, w9
    3034:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    3038:	add	w9, w0, #0xc
    303c:	add	w10, w1, #0xc
    3040:	add	w8, w4, #0x10
    3044:	ldrb	w11, [x2, w9, uxtw]
    3048:	ldrb	w12, [x2, w10, uxtw]
    304c:	cmp	w11, w12
    3050:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    3054:	mov	w9, w9
    3058:	mov	w10, w10
    305c:	ldrh	w11, [x3, x9, lsl #1]
    3060:	ldrh	w12, [x3, x10, lsl #1]
    3064:	cmp	w11, w12
    3068:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    306c:	add	w11, w9, #0x1
    3070:	add	w12, w10, #0x1
    3074:	ldrb	w13, [x2, w11, uxtw]
    3078:	ldrb	w14, [x2, w12, uxtw]
    307c:	cmp	w13, w14
    3080:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    3084:	ldrh	w11, [x3, x11, lsl #1]
    3088:	ldrh	w12, [x3, x12, lsl #1]
    308c:	cmp	w11, w12
    3090:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    3094:	add	w11, w9, #0x2
    3098:	add	w12, w10, #0x2
    309c:	ldrb	w13, [x2, w11, uxtw]
    30a0:	ldrb	w14, [x2, w12, uxtw]
    30a4:	cmp	w13, w14
    30a8:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    30ac:	ldrh	w11, [x3, x11, lsl #1]
    30b0:	ldrh	w12, [x3, x12, lsl #1]
    30b4:	cmp	w11, w12
    30b8:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    30bc:	add	w11, w9, #0x3
    30c0:	add	w12, w10, #0x3
    30c4:	ldrb	w13, [x2, w11, uxtw]
    30c8:	ldrb	w14, [x2, w12, uxtw]
    30cc:	cmp	w13, w14
    30d0:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    30d4:	ldrh	w11, [x3, x11, lsl #1]
    30d8:	ldrh	w12, [x3, x12, lsl #1]
    30dc:	cmp	w11, w12
    30e0:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    30e4:	add	w11, w9, #0x4
    30e8:	add	w12, w10, #0x4
    30ec:	ldrb	w13, [x2, w11, uxtw]
    30f0:	ldrb	w14, [x2, w12, uxtw]
    30f4:	cmp	w13, w14
    30f8:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    30fc:	ldrh	w11, [x3, x11, lsl #1]
    3100:	ldrh	w12, [x3, x12, lsl #1]
    3104:	cmp	w11, w12
    3108:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    310c:	add	w11, w9, #0x5
    3110:	add	w12, w10, #0x5
    3114:	ldrb	w13, [x2, w11, uxtw]
    3118:	ldrb	w14, [x2, w12, uxtw]
    311c:	cmp	w13, w14
    3120:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    3124:	ldrh	w11, [x3, x11, lsl #1]
    3128:	ldrh	w12, [x3, x12, lsl #1]
    312c:	cmp	w11, w12
    3130:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    3134:	add	w11, w9, #0x6
    3138:	add	w12, w10, #0x6
    313c:	ldrb	w13, [x2, w11, uxtw]
    3140:	ldrb	w14, [x2, w12, uxtw]
    3144:	cmp	w13, w14
    3148:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    314c:	ldrh	w11, [x3, x11, lsl #1]
    3150:	ldrh	w12, [x3, x12, lsl #1]
    3154:	cmp	w11, w12
    3158:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    315c:	add	w11, w9, #0x7
    3160:	add	w12, w10, #0x7
    3164:	ldrb	w13, [x2, w11, uxtw]
    3168:	ldrb	w14, [x2, w12, uxtw]
    316c:	cmp	w13, w14
    3170:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    3174:	ldrh	w11, [x3, x11, lsl #1]
    3178:	ldrh	w12, [x3, x12, lsl #1]
    317c:	cmp	w11, w12
    3180:	b.ne	31c4 <BZ2_blockSort@@Base+0x19d0>  // b.any
    3184:	add	w9, w9, #0x8
    3188:	ldr	w11, [x5]
    318c:	add	w10, w10, #0x8
    3190:	cmp	w9, w4
    3194:	csel	w12, wzr, w4, cc  // cc = lo, ul, last
    3198:	cmp	w10, w4
    319c:	sub	w8, w8, #0x8
    31a0:	sub	w9, w9, w12
    31a4:	csel	w12, wzr, w4, cc  // cc = lo, ul, last
    31a8:	mov	w0, wzr
    31ac:	sub	w10, w10, w12
    31b0:	sub	w11, w11, #0x1
    31b4:	cmp	w8, #0x7
    31b8:	str	w11, [x5]
    31bc:	b.gt	3044 <BZ2_blockSort@@Base+0x1850>
    31c0:	ret
    31c4:	cset	w0, hi  // hi = pmore
    31c8:	ret

00000000000031cc <BZ2_hbMakeCodeLengths@@Base>:
    31cc:	stp	x29, x30, [sp, #-96]!
    31d0:	stp	x28, x27, [sp, #16]
    31d4:	stp	x26, x25, [sp, #32]
    31d8:	stp	x24, x23, [sp, #48]
    31dc:	stp	x22, x21, [sp, #64]
    31e0:	stp	x20, x19, [sp, #80]
    31e4:	mov	x29, sp
    31e8:	sub	sp, sp, #0x1, lsl #12
    31ec:	sub	sp, sp, #0x450
    31f0:	mov	w19, w3
    31f4:	mov	w20, w2
    31f8:	cmp	w2, #0x1
    31fc:	mov	x21, x0
    3200:	b.lt	3230 <BZ2_hbMakeCodeLengths@@Base+0x64>  // b.tstop
    3204:	add	x9, sp, #0x828
    3208:	mov	w8, w20
    320c:	add	x9, x9, #0x4
    3210:	mov	w10, #0x100                 	// #256
    3214:	ldr	w11, [x1], #4
    3218:	lsl	w12, w11, #8
    321c:	cmp	w11, #0x0
    3220:	csel	w11, w10, w12, eq  // eq = none
    3224:	subs	x8, x8, #0x1
    3228:	str	w11, [x9], #4
    322c:	b.ne	3214 <BZ2_hbMakeCodeLengths@@Base+0x48>  // b.any
    3230:	mov	w8, #0xfffffffe            	// #-2
    3234:	cmp	w20, #0x1
    3238:	str	wzr, [sp, #4152]
    323c:	str	wzr, [sp, #2088]
    3240:	str	w8, [sp, #24]
    3244:	b.lt	3570 <BZ2_hbMakeCodeLengths@@Base+0x3a4>  // b.tstop
    3248:	add	x26, sp, #0x828
    324c:	sxtw	x9, w20
    3250:	add	w24, w20, #0x1
    3254:	add	x10, x26, #0x4
    3258:	add	x23, sp, #0x1, lsl #12
    325c:	mov	x8, xzr
    3260:	str	x9, [sp, #8]
    3264:	mov	w25, w20
    3268:	mov	w9, #0x1                   	// #1
    326c:	add	x27, sp, #0x18
    3270:	mov	w28, #0xffffffff            	// #-1
    3274:	str	x10, [sp, #16]
    3278:	sub	x22, x24, #0x1
    327c:	add	x23, x23, #0x38
    3280:	add	x8, x8, #0x1
    3284:	add	x10, x23, x8, lsl #2
    3288:	str	w9, [x10]
    328c:	ubfx	x12, x8, #1, #31
    3290:	ldrsw	x13, [x23, w12, uxtw #2]
    3294:	ldr	w11, [x26, x9, lsl #2]
    3298:	str	w28, [x27, x9, lsl #2]
    329c:	ldr	w14, [x26, x13, lsl #2]
    32a0:	cmp	w11, w14
    32a4:	b.ge	32c8 <BZ2_hbMakeCodeLengths@@Base+0xfc>  // b.tcont
    32a8:	str	w13, [x10]
    32ac:	asr	w14, w12, #1
    32b0:	ldrsw	x13, [x23, w14, sxtw #2]
    32b4:	ldr	w10, [x26, x13, lsl #2]
    32b8:	cmp	w11, w10
    32bc:	add	x10, x23, w12, sxtw #2
    32c0:	mov	w12, w14
    32c4:	b.lt	32a8 <BZ2_hbMakeCodeLengths@@Base+0xdc>  // b.tstop
    32c8:	str	w9, [x10]
    32cc:	cmp	x8, x25
    32d0:	add	x9, x9, #0x1
    32d4:	b.ne	3280 <BZ2_hbMakeCodeLengths@@Base+0xb4>  // b.any
    32d8:	cmp	w20, #0x104
    32dc:	b.cc	32e8 <BZ2_hbMakeCodeLengths@@Base+0x11c>  // b.lo, b.ul, b.last
    32e0:	mov	w0, #0x7d1                 	// #2001
    32e4:	bl	16f0 <BZ2_bz__AssertH__fail@plt>
    32e8:	cmp	w20, #0x2
    32ec:	mov	w8, w20
    32f0:	b.lt	34b0 <BZ2_hbMakeCodeLengths@@Base+0x2e4>  // b.tstop
    32f4:	ldr	x8, [sp, #8]
    32f8:	mov	x9, x25
    32fc:	ldr	w12, [x23, x9, lsl #2]
    3300:	ldrsw	x11, [sp, #4156]
    3304:	cmp	x9, #0x3
    3308:	sub	x10, x9, #0x1
    330c:	str	w12, [sp, #4156]
    3310:	b.lt	3380 <BZ2_hbMakeCodeLengths@@Base+0x1b4>  // b.tstop
    3314:	sxtw	x13, w12
    3318:	ldr	w13, [x26, x13, lsl #2]
    331c:	mov	w14, #0x1                   	// #1
    3320:	mov	w16, #0x2                   	// #2
    3324:	cmp	x10, w16, sxtw
    3328:	sxtw	x17, w16
    332c:	b.le	3354 <BZ2_hbMakeCodeLengths@@Base+0x188>
    3330:	orr	x15, x17, #0x1
    3334:	ldrsw	x18, [x23, x15, lsl #2]
    3338:	ldrsw	x17, [x23, x17, lsl #2]
    333c:	ldr	w18, [x26, x18, lsl #2]
    3340:	ldr	w17, [x26, x17, lsl #2]
    3344:	cmp	w18, w17
    3348:	csel	w15, w15, w16, lt  // lt = tstop
    334c:	sxtw	x17, w15
    3350:	b	3358 <BZ2_hbMakeCodeLengths@@Base+0x18c>
    3354:	mov	w15, w16
    3358:	ldrsw	x17, [x23, x17, lsl #2]
    335c:	ldr	w16, [x26, x17, lsl #2]
    3360:	cmp	w13, w16
    3364:	b.lt	3388 <BZ2_hbMakeCodeLengths@@Base+0x1bc>  // b.tstop
    3368:	lsl	w16, w15, #1
    336c:	cmp	x9, w16, sxtw
    3370:	str	w17, [x23, w14, sxtw #2]
    3374:	mov	w14, w15
    3378:	b.gt	3324 <BZ2_hbMakeCodeLengths@@Base+0x158>
    337c:	b	338c <BZ2_hbMakeCodeLengths@@Base+0x1c0>
    3380:	mov	w15, #0x1                   	// #1
    3384:	b	338c <BZ2_hbMakeCodeLengths@@Base+0x1c0>
    3388:	mov	w15, w14
    338c:	str	w12, [x23, w15, sxtw #2]
    3390:	add	x12, x23, x10, lsl #2
    3394:	ldr	w14, [x12]
    3398:	ldrsw	x13, [sp, #4156]
    339c:	cmp	x9, #0x3
    33a0:	str	w14, [sp, #4156]
    33a4:	b.gt	33b0 <BZ2_hbMakeCodeLengths@@Base+0x1e4>
    33a8:	mov	w18, #0x1                   	// #1
    33ac:	b	3424 <BZ2_hbMakeCodeLengths@@Base+0x258>
    33b0:	sxtw	x15, w14
    33b4:	ldr	w15, [x26, x15, lsl #2]
    33b8:	sub	x16, x9, #0x2
    33bc:	mov	w17, #0x1                   	// #1
    33c0:	mov	w0, #0x2                   	// #2
    33c4:	cmp	x16, w0, sxtw
    33c8:	sxtw	x1, w0
    33cc:	b.le	33f4 <BZ2_hbMakeCodeLengths@@Base+0x228>
    33d0:	orr	x18, x1, #0x1
    33d4:	ldrsw	x2, [x23, x18, lsl #2]
    33d8:	ldrsw	x1, [x23, x1, lsl #2]
    33dc:	ldr	w2, [x26, x2, lsl #2]
    33e0:	ldr	w1, [x26, x1, lsl #2]
    33e4:	cmp	w2, w1
    33e8:	csel	w18, w18, w0, lt  // lt = tstop
    33ec:	sxtw	x1, w18
    33f0:	b	33f8 <BZ2_hbMakeCodeLengths@@Base+0x22c>
    33f4:	mov	w18, w0
    33f8:	ldrsw	x1, [x23, x1, lsl #2]
    33fc:	ldr	w0, [x26, x1, lsl #2]
    3400:	cmp	w15, w0
    3404:	b.lt	3420 <BZ2_hbMakeCodeLengths@@Base+0x254>  // b.tstop
    3408:	lsl	w0, w18, #1
    340c:	cmp	x16, w0, sxtw
    3410:	str	w1, [x23, w17, sxtw #2]
    3414:	mov	w17, w18
    3418:	b.ge	33c4 <BZ2_hbMakeCodeLengths@@Base+0x1f8>  // b.tcont
    341c:	b	3424 <BZ2_hbMakeCodeLengths@@Base+0x258>
    3420:	mov	w18, w17
    3424:	ldr	w15, [x26, x11, lsl #2]
    3428:	ldr	w16, [x26, x13, lsl #2]
    342c:	str	w14, [x23, w18, sxtw #2]
    3430:	add	x8, x8, #0x1
    3434:	and	w14, w15, #0xffffff00
    3438:	and	w17, w16, #0xffffff00
    343c:	and	w15, w15, #0xff
    3440:	add	w17, w17, w14
    3444:	asr	w14, w10, #1
    3448:	str	w8, [x23, x10, lsl #2]
    344c:	cmp	w15, w16, uxtb
    3450:	and	w16, w16, #0xff
    3454:	csel	w15, w15, w16, hi  // hi = pmore
    3458:	ldrsw	x16, [x23, w14, sxtw #2]
    345c:	add	w15, w15, #0x1
    3460:	orr	w15, w15, w17
    3464:	str	w15, [x26, x8, lsl #2]
    3468:	ldr	w17, [x26, x16, lsl #2]
    346c:	str	w8, [x27, x13, lsl #2]
    3470:	str	w8, [x27, x11, lsl #2]
    3474:	str	w28, [x27, x8, lsl #2]
    3478:	cmp	w15, w17
    347c:	b.ge	34a0 <BZ2_hbMakeCodeLengths@@Base+0x2d4>  // b.tcont
    3480:	str	w16, [x12]
    3484:	asr	w11, w14, #1
    3488:	ldrsw	x16, [x23, w11, sxtw #2]
    348c:	ldr	w12, [x26, x16, lsl #2]
    3490:	cmp	w15, w12
    3494:	add	x12, x23, w14, sxtw #2
    3498:	mov	w14, w11
    349c:	b.lt	3480 <BZ2_hbMakeCodeLengths@@Base+0x2b4>  // b.tstop
    34a0:	cmp	x9, #0x2
    34a4:	mov	x9, x10
    34a8:	str	w8, [x12]
    34ac:	b.gt	32fc <BZ2_hbMakeCodeLengths@@Base+0x130>
    34b0:	cmp	w8, #0x204
    34b4:	b.lt	34c0 <BZ2_hbMakeCodeLengths@@Base+0x2f4>  // b.tstop
    34b8:	mov	w0, #0x7d2                 	// #2002
    34bc:	bl	16f0 <BZ2_bz__AssertH__fail@plt>
    34c0:	cmp	w20, #0x1
    34c4:	b.lt	3570 <BZ2_hbMakeCodeLengths@@Base+0x3a4>  // b.tstop
    34c8:	mov	w8, wzr
    34cc:	mov	w9, #0x1                   	// #1
    34d0:	mov	w10, #0xffffffff            	// #-1
    34d4:	mov	w11, w9
    34d8:	ldr	w11, [x27, w11, sxtw #2]
    34dc:	add	w10, w10, #0x1
    34e0:	tbz	w11, #31, 34d8 <BZ2_hbMakeCodeLengths@@Base+0x30c>
    34e4:	add	x11, x9, x21
    34e8:	cmp	w10, w19
    34ec:	add	x9, x9, #0x1
    34f0:	csinc	w8, w8, wzr, le
    34f4:	cmp	x9, x24
    34f8:	sturb	w10, [x11, #-1]
    34fc:	b.ne	34d0 <BZ2_hbMakeCodeLengths@@Base+0x304>  // b.any
    3500:	tst	w8, #0xff
    3504:	b.eq	3570 <BZ2_hbMakeCodeLengths@@Base+0x3a4>  // b.none
    3508:	cmp	w20, #0x1
    350c:	b.lt	3560 <BZ2_hbMakeCodeLengths@@Base+0x394>  // b.tstop
    3510:	ldr	x9, [sp, #16]
    3514:	mov	x8, x22
    3518:	ldr	w10, [x9]
    351c:	asr	w10, w10, #8
    3520:	cmp	w10, #0x0
    3524:	cinc	w10, w10, lt  // lt = tstop
    3528:	lsl	w10, w10, #7
    352c:	and	w10, w10, #0xffffff00
    3530:	add	w10, w10, #0x100
    3534:	subs	x8, x8, #0x1
    3538:	str	w10, [x9], #4
    353c:	b.ne	3518 <BZ2_hbMakeCodeLengths@@Base+0x34c>  // b.any
    3540:	mov	w9, #0xfffffffe            	// #-2
    3544:	str	w9, [sp, #24]
    3548:	cmp	w20, #0x1
    354c:	mov	w9, #0x1                   	// #1
    3550:	str	wzr, [sp, #4152]
    3554:	str	wzr, [sp, #2088]
    3558:	b.ge	3280 <BZ2_hbMakeCodeLengths@@Base+0xb4>  // b.tcont
    355c:	b	3570 <BZ2_hbMakeCodeLengths@@Base+0x3a4>
    3560:	mov	w8, #0xfffffffe            	// #-2
    3564:	str	wzr, [sp, #4152]
    3568:	str	wzr, [sp, #2088]
    356c:	str	w8, [sp, #24]
    3570:	add	sp, sp, #0x1, lsl #12
    3574:	add	sp, sp, #0x450
    3578:	ldp	x20, x19, [sp, #80]
    357c:	ldp	x22, x21, [sp, #64]
    3580:	ldp	x24, x23, [sp, #48]
    3584:	ldp	x26, x25, [sp, #32]
    3588:	ldp	x28, x27, [sp, #16]
    358c:	ldp	x29, x30, [sp], #96
    3590:	ret

0000000000003594 <BZ2_hbAssignCodes@@Base>:
    3594:	cmp	w2, w3
    3598:	b.gt	35ec <BZ2_hbAssignCodes@@Base+0x58>
    359c:	mov	w8, wzr
    35a0:	mov	w9, w4
    35a4:	cmp	w4, #0x1
    35a8:	b.lt	35dc <BZ2_hbAssignCodes@@Base+0x48>  // b.tstop
    35ac:	mov	x10, x9
    35b0:	mov	x11, x1
    35b4:	mov	x12, x0
    35b8:	ldrb	w13, [x11]
    35bc:	cmp	w2, w13
    35c0:	b.ne	35cc <BZ2_hbAssignCodes@@Base+0x38>  // b.any
    35c4:	str	w8, [x12]
    35c8:	add	w8, w8, #0x1
    35cc:	add	x12, x12, #0x4
    35d0:	subs	x10, x10, #0x1
    35d4:	add	x11, x11, #0x1
    35d8:	b.ne	35b8 <BZ2_hbAssignCodes@@Base+0x24>  // b.any
    35dc:	cmp	w2, w3
    35e0:	add	w2, w2, #0x1
    35e4:	lsl	w8, w8, #1
    35e8:	b.lt	35a4 <BZ2_hbAssignCodes@@Base+0x10>  // b.tstop
    35ec:	ret

00000000000035f0 <BZ2_hbCreateDecodeTables@@Base>:
    35f0:	cmp	w4, w5
    35f4:	b.gt	363c <BZ2_hbCreateDecodeTables@@Base+0x4c>
    35f8:	mov	w8, wzr
    35fc:	mov	w9, w6
    3600:	mov	w10, w4
    3604:	cmp	w6, #0x1
    3608:	b.lt	3630 <BZ2_hbCreateDecodeTables@@Base+0x40>  // b.tstop
    360c:	mov	x11, xzr
    3610:	ldrb	w12, [x3, x11]
    3614:	cmp	w10, w12
    3618:	b.ne	3624 <BZ2_hbCreateDecodeTables@@Base+0x34>  // b.any
    361c:	str	w11, [x2, w8, sxtw #2]
    3620:	add	w8, w8, #0x1
    3624:	add	x11, x11, #0x1
    3628:	cmp	x9, x11
    362c:	b.ne	3610 <BZ2_hbCreateDecodeTables@@Base+0x20>  // b.any
    3630:	cmp	w10, w5
    3634:	add	w10, w10, #0x1
    3638:	b.lt	3604 <BZ2_hbCreateDecodeTables@@Base+0x14>  // b.tstop
    363c:	movi	v0.2d, #0x0
    3640:	cmp	w6, #0x0
    3644:	stur	q0, [x1, #76]
    3648:	stp	q0, q0, [x1, #48]
    364c:	stp	q0, q0, [x1, #16]
    3650:	str	q0, [x1]
    3654:	b.le	3678 <BZ2_hbCreateDecodeTables@@Base+0x88>
    3658:	mov	w8, w6
    365c:	ldrb	w9, [x3], #1
    3660:	subs	x8, x8, #0x1
    3664:	add	x9, x1, x9, lsl #2
    3668:	ldr	w10, [x9, #4]
    366c:	add	w10, w10, #0x1
    3670:	str	w10, [x9, #4]
    3674:	b.ne	365c <BZ2_hbCreateDecodeTables@@Base+0x6c>  // b.any
    3678:	mov	w8, wzr
    367c:	mov	w9, #0x4                   	// #4
    3680:	ldr	w10, [x1, x9]
    3684:	add	w8, w10, w8
    3688:	str	w8, [x1, x9]
    368c:	add	x9, x9, #0x4
    3690:	cmp	x9, #0x5c
    3694:	b.ne	3680 <BZ2_hbCreateDecodeTables@@Base+0x90>  // b.any
    3698:	movi	v0.2d, #0x0
    369c:	cmp	w4, w5
    36a0:	stur	q0, [x0, #76]
    36a4:	stp	q0, q0, [x0, #48]
    36a8:	stp	q0, q0, [x0, #16]
    36ac:	str	q0, [x0]
    36b0:	b.gt	36e8 <BZ2_hbCreateDecodeTables@@Base+0xf8>
    36b4:	mov	w9, wzr
    36b8:	sxtw	x8, w4
    36bc:	sxtw	x10, w5
    36c0:	add	x11, x1, x8, lsl #2
    36c4:	ldp	w11, w12, [x11]
    36c8:	cmp	x8, x10
    36cc:	sub	w11, w12, w11
    36d0:	add	w9, w11, w9
    36d4:	sub	w11, w9, #0x1
    36d8:	str	w11, [x0, x8, lsl #2]
    36dc:	add	x8, x8, #0x1
    36e0:	lsl	w9, w9, #1
    36e4:	b.lt	36c0 <BZ2_hbCreateDecodeTables@@Base+0xd0>  // b.tstop
    36e8:	cmp	w4, w5
    36ec:	b.ge	3724 <BZ2_hbCreateDecodeTables@@Base+0x134>  // b.tcont
    36f0:	sxtw	x9, w5
    36f4:	add	x10, x1, w4, sxtw #2
    36f8:	add	x8, x0, w4, sxtw #2
    36fc:	sub	x9, x9, w4, sxtw
    3700:	add	x10, x10, #0x4
    3704:	ldr	w11, [x8], #4
    3708:	ldr	w12, [x10]
    370c:	subs	x9, x9, #0x1
    3710:	lsl	w11, w11, #1
    3714:	sub	w11, w11, w12
    3718:	add	w11, w11, #0x2
    371c:	str	w11, [x10], #4
    3720:	b.ne	3704 <BZ2_hbCreateDecodeTables@@Base+0x114>  // b.any
    3724:	ret

0000000000003728 <BZ2_bsInitWrite@@Base>:
    3728:	movi	v0.2d, #0x0
    372c:	str	d0, [x0, #640]
    3730:	ret

0000000000003734 <BZ2_compressBlock@@Base>:
    3734:	stp	x29, x30, [sp, #-96]!
    3738:	stp	x28, x27, [sp, #16]
    373c:	stp	x26, x25, [sp, #32]
    3740:	stp	x24, x23, [sp, #48]
    3744:	stp	x22, x21, [sp, #64]
    3748:	stp	x20, x19, [sp, #80]
    374c:	mov	x29, sp
    3750:	sub	sp, sp, #0x1a0
    3754:	ldr	w5, [x0, #108]
    3758:	mov	w20, w1
    375c:	str	x0, [sp, #96]
    3760:	cmp	w5, #0x1
    3764:	b.lt	37a8 <BZ2_compressBlock@@Base+0x74>  // b.tstop
    3768:	ldr	w8, [x0, #648]
    376c:	ldr	w9, [x0, #652]
    3770:	ldr	w2, [x0, #660]
    3774:	mvn	w3, w8
    3778:	eon	w4, w8, w9, ror #31
    377c:	cmp	w2, #0x2
    3780:	str	w3, [x0, #648]
    3784:	str	w4, [x0, #652]
    3788:	b.lt	3790 <BZ2_compressBlock@@Base+0x5c>  // b.tstop
    378c:	str	wzr, [x0, #116]
    3790:	ldr	w8, [x0, #656]
    3794:	cmp	w8, #0x2
    3798:	b.ge	705c <BZ2_compressBlock@@Base+0x3928>  // b.tcont
    379c:	bl	1660 <BZ2_blockSort@plt>
    37a0:	ldr	x0, [sp, #96]
    37a4:	ldr	w5, [x0, #108]
    37a8:	ldr	x8, [x0, #32]
    37ac:	mov	x19, x0
    37b0:	add	x8, x8, w5, sxtw
    37b4:	str	x8, [x19, #80]!
    37b8:	ldr	w9, [x19, #580]
    37bc:	cmp	w9, #0x1
    37c0:	b.ne	391c <BZ2_compressBlock@@Base+0x1e8>  // b.any
    37c4:	adrp	x9, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    37c8:	ldr	d0, [x9, #1792]
    37cc:	ldrsw	x9, [x0, #116]
    37d0:	mov	w10, #0x42                  	// #66
    37d4:	str	d0, [x0, #640]
    37d8:	strb	w10, [x8, x9]
    37dc:	ldr	w8, [x0, #116]
    37e0:	ldr	w10, [x0, #640]
    37e4:	ldr	w9, [x0, #644]
    37e8:	add	w8, w8, #0x1
    37ec:	lsl	w10, w10, #8
    37f0:	sub	w11, w9, #0x8
    37f4:	cmp	w9, #0x10
    37f8:	str	w8, [x0, #116]
    37fc:	str	w10, [x0, #640]
    3800:	str	w11, [x0, #644]
    3804:	b.lt	3840 <BZ2_compressBlock@@Base+0x10c>  // b.tstop
    3808:	ldr	x9, [x0, #80]
    380c:	lsr	w10, w10, #24
    3810:	strb	w10, [x9, w8, sxtw]
    3814:	ldr	w8, [x0, #116]
    3818:	ldr	w10, [x0, #640]
    381c:	ldr	w9, [x0, #644]
    3820:	add	w8, w8, #0x1
    3824:	lsl	w10, w10, #8
    3828:	sub	w11, w9, #0x8
    382c:	cmp	w9, #0xf
    3830:	str	w8, [x0, #116]
    3834:	str	w10, [x0, #640]
    3838:	str	w11, [x0, #644]
    383c:	b.gt	3808 <BZ2_compressBlock@@Base+0xd4>
    3840:	neg	w11, w9
    3844:	mov	w12, #0x5a                  	// #90
    3848:	lsl	w11, w12, w11
    384c:	cmp	w9, #0x8
    3850:	orr	w11, w11, w10
    3854:	str	w11, [x0, #640]
    3858:	str	w9, [x0, #644]
    385c:	b.lt	3898 <BZ2_compressBlock@@Base+0x164>  // b.tstop
    3860:	ldr	x9, [x0, #80]
    3864:	lsr	w10, w11, #24
    3868:	strb	w10, [x9, w8, sxtw]
    386c:	ldr	w8, [x0, #116]
    3870:	ldr	w9, [x0, #640]
    3874:	ldr	w10, [x0, #644]
    3878:	add	w8, w8, #0x1
    387c:	lsl	w11, w9, #8
    3880:	sub	w9, w10, #0x8
    3884:	cmp	w10, #0xf
    3888:	str	w8, [x0, #116]
    388c:	str	w11, [x0, #640]
    3890:	str	w9, [x0, #644]
    3894:	b.gt	3860 <BZ2_compressBlock@@Base+0x12c>
    3898:	ldr	w14, [x0, #664]
    389c:	mov	w10, #0x18                  	// #24
    38a0:	mov	w12, #0x68                  	// #104
    38a4:	sub	w15, w10, w9
    38a8:	lsl	w12, w12, w15
    38ac:	orr	w12, w12, w11
    38b0:	add	w11, w14, #0x30
    38b4:	add	w13, w9, #0x8
    38b8:	and	w11, w11, #0xff
    38bc:	str	w13, [x0, #644]
    38c0:	str	w12, [x0, #640]
    38c4:	tbnz	w9, #31, 3900 <BZ2_compressBlock@@Base+0x1cc>
    38c8:	ldr	x9, [x0, #80]
    38cc:	lsr	w12, w12, #24
    38d0:	strb	w12, [x9, w8, sxtw]
    38d4:	ldr	w8, [x0, #116]
    38d8:	ldr	w9, [x0, #640]
    38dc:	ldr	w14, [x0, #644]
    38e0:	add	w8, w8, #0x1
    38e4:	lsl	w12, w9, #8
    38e8:	sub	w13, w14, #0x8
    38ec:	cmp	w14, #0xf
    38f0:	str	w8, [x0, #116]
    38f4:	str	w12, [x0, #640]
    38f8:	str	w13, [x0, #644]
    38fc:	b.gt	38c8 <BZ2_compressBlock@@Base+0x194>
    3900:	ldr	w5, [x0, #108]
    3904:	sub	w8, w10, w13
    3908:	lsl	w8, w11, w8
    390c:	add	w9, w13, #0x8
    3910:	orr	w8, w8, w12
    3914:	str	w8, [x0, #640]
    3918:	str	w9, [x0, #644]
    391c:	cmp	w5, #0x1
    3920:	b.lt	6d8c <BZ2_compressBlock@@Base+0x3658>  // b.tstop
    3924:	ldr	w10, [x0, #644]
    3928:	add	x21, x0, #0x284
    392c:	add	x24, x0, #0x280
    3930:	str	w20, [sp]
    3934:	cmp	w10, #0x7
    3938:	b.le	3980 <BZ2_compressBlock@@Base+0x24c>
    393c:	ldr	w9, [x0, #640]
    3940:	ldr	w8, [x0, #116]
    3944:	ldr	x10, [x0, #80]
    3948:	lsr	w9, w9, #24
    394c:	strb	w9, [x10, w8, sxtw]
    3950:	ldr	w8, [x0, #116]
    3954:	ldr	w9, [x0, #640]
    3958:	ldr	w11, [x0, #644]
    395c:	add	w8, w8, #0x1
    3960:	lsl	w9, w9, #8
    3964:	sub	w10, w11, #0x8
    3968:	cmp	w11, #0xf
    396c:	str	w8, [x0, #116]
    3970:	str	w9, [x0, #640]
    3974:	str	w10, [x0, #644]
    3978:	b.gt	3944 <BZ2_compressBlock@@Base+0x210>
    397c:	b	3984 <BZ2_compressBlock@@Base+0x250>
    3980:	ldr	w9, [x24]
    3984:	mov	w8, #0x18                  	// #24
    3988:	mov	w12, #0x31                  	// #49
    398c:	sub	w13, w8, w10
    3990:	lsl	w12, w12, w13
    3994:	add	w11, w10, #0x8
    3998:	orr	w9, w12, w9
    399c:	str	w9, [x24]
    39a0:	str	w11, [x21]
    39a4:	tbnz	w10, #31, 39e4 <BZ2_compressBlock@@Base+0x2b0>
    39a8:	ldr	w10, [x0, #116]
    39ac:	ldr	x11, [x0, #80]
    39b0:	lsr	w9, w9, #24
    39b4:	strb	w9, [x11, w10, sxtw]
    39b8:	ldr	w9, [x0, #116]
    39bc:	ldr	w11, [x0, #640]
    39c0:	ldr	w12, [x0, #644]
    39c4:	add	w10, w9, #0x1
    39c8:	lsl	w9, w11, #8
    39cc:	sub	w11, w12, #0x8
    39d0:	cmp	w12, #0xf
    39d4:	str	w10, [x0, #116]
    39d8:	str	w9, [x0, #640]
    39dc:	str	w11, [x0, #644]
    39e0:	b.gt	39ac <BZ2_compressBlock@@Base+0x278>
    39e4:	sub	w8, w8, w11
    39e8:	mov	w12, #0x41                  	// #65
    39ec:	lsl	w8, w12, w8
    39f0:	add	w10, w11, #0x8
    39f4:	orr	w9, w8, w9
    39f8:	str	w9, [x24]
    39fc:	str	w10, [x21]
    3a00:	tbnz	w11, #31, 3a40 <BZ2_compressBlock@@Base+0x30c>
    3a04:	ldr	w8, [x0, #116]
    3a08:	ldr	x10, [x0, #80]
    3a0c:	lsr	w9, w9, #24
    3a10:	strb	w9, [x10, w8, sxtw]
    3a14:	ldr	w8, [x0, #116]
    3a18:	ldr	w9, [x0, #640]
    3a1c:	ldr	w11, [x0, #644]
    3a20:	add	w8, w8, #0x1
    3a24:	lsl	w9, w9, #8
    3a28:	sub	w10, w11, #0x8
    3a2c:	cmp	w11, #0xf
    3a30:	str	w8, [x0, #116]
    3a34:	str	w9, [x0, #640]
    3a38:	str	w10, [x0, #644]
    3a3c:	b.gt	3a08 <BZ2_compressBlock@@Base+0x2d4>
    3a40:	mov	w8, #0x18                  	// #24
    3a44:	mov	w12, #0x59                  	// #89
    3a48:	sub	w13, w8, w10
    3a4c:	lsl	w12, w12, w13
    3a50:	add	w11, w10, #0x8
    3a54:	orr	w9, w12, w9
    3a58:	str	w9, [x24]
    3a5c:	str	w11, [x21]
    3a60:	tbnz	w10, #31, 3aa0 <BZ2_compressBlock@@Base+0x36c>
    3a64:	ldr	w10, [x0, #116]
    3a68:	ldr	x11, [x0, #80]
    3a6c:	lsr	w9, w9, #24
    3a70:	strb	w9, [x11, w10, sxtw]
    3a74:	ldr	w9, [x0, #116]
    3a78:	ldr	w11, [x0, #640]
    3a7c:	ldr	w12, [x0, #644]
    3a80:	add	w10, w9, #0x1
    3a84:	lsl	w9, w11, #8
    3a88:	sub	w11, w12, #0x8
    3a8c:	cmp	w12, #0xf
    3a90:	str	w10, [x0, #116]
    3a94:	str	w9, [x0, #640]
    3a98:	str	w11, [x0, #644]
    3a9c:	b.gt	3a68 <BZ2_compressBlock@@Base+0x334>
    3aa0:	sub	w8, w8, w11
    3aa4:	mov	w12, #0x26                  	// #38
    3aa8:	lsl	w8, w12, w8
    3aac:	add	w10, w11, #0x8
    3ab0:	orr	w9, w8, w9
    3ab4:	str	w9, [x24]
    3ab8:	str	w10, [x21]
    3abc:	tbnz	w11, #31, 3afc <BZ2_compressBlock@@Base+0x3c8>
    3ac0:	ldr	w8, [x0, #116]
    3ac4:	ldr	x10, [x0, #80]
    3ac8:	lsr	w9, w9, #24
    3acc:	strb	w9, [x10, w8, sxtw]
    3ad0:	ldr	w8, [x0, #116]
    3ad4:	ldr	w9, [x0, #640]
    3ad8:	ldr	w11, [x0, #644]
    3adc:	add	w8, w8, #0x1
    3ae0:	lsl	w9, w9, #8
    3ae4:	sub	w10, w11, #0x8
    3ae8:	cmp	w11, #0xf
    3aec:	str	w8, [x0, #116]
    3af0:	str	w9, [x0, #640]
    3af4:	str	w10, [x0, #644]
    3af8:	b.gt	3ac4 <BZ2_compressBlock@@Base+0x390>
    3afc:	mov	w8, #0x18                  	// #24
    3b00:	mov	w12, #0x53                  	// #83
    3b04:	sub	w13, w8, w10
    3b08:	lsl	w12, w12, w13
    3b0c:	add	w11, w10, #0x8
    3b10:	orr	w9, w12, w9
    3b14:	str	w9, [x24]
    3b18:	str	w11, [x21]
    3b1c:	tbnz	w10, #31, 3b5c <BZ2_compressBlock@@Base+0x428>
    3b20:	ldr	w10, [x0, #116]
    3b24:	ldr	x11, [x0, #80]
    3b28:	lsr	w9, w9, #24
    3b2c:	strb	w9, [x11, w10, sxtw]
    3b30:	ldr	w9, [x0, #116]
    3b34:	ldr	w11, [x0, #640]
    3b38:	ldr	w12, [x0, #644]
    3b3c:	add	w10, w9, #0x1
    3b40:	lsl	w9, w11, #8
    3b44:	sub	w11, w12, #0x8
    3b48:	cmp	w12, #0xf
    3b4c:	str	w10, [x0, #116]
    3b50:	str	w9, [x0, #640]
    3b54:	str	w11, [x0, #644]
    3b58:	b.gt	3b24 <BZ2_compressBlock@@Base+0x3f0>
    3b5c:	ldr	w1, [x0, #648]
    3b60:	sub	w8, w8, w11
    3b64:	mov	w10, #0x59                  	// #89
    3b68:	lsl	w8, w10, w8
    3b6c:	add	w11, w11, #0x8
    3b70:	orr	w8, w8, w9
    3b74:	str	w8, [x0, #640]
    3b78:	str	w11, [x0, #644]
    3b7c:	bl	7178 <BZ2_compressBlock@@Base+0x3a44>
    3b80:	ldr	x18, [sp, #96]
    3b84:	ldr	w10, [x18, #644]
    3b88:	cmp	w10, #0x7
    3b8c:	b.le	3bd4 <BZ2_compressBlock@@Base+0x4a0>
    3b90:	ldr	w8, [x18, #640]
    3b94:	ldr	w9, [x18, #116]
    3b98:	ldr	x10, [x18, #80]
    3b9c:	lsr	w8, w8, #24
    3ba0:	strb	w8, [x10, w9, sxtw]
    3ba4:	ldr	w8, [x18, #116]
    3ba8:	ldr	w10, [x18, #640]
    3bac:	ldr	w11, [x18, #644]
    3bb0:	add	w9, w8, #0x1
    3bb4:	lsl	w8, w10, #8
    3bb8:	sub	w10, w11, #0x8
    3bbc:	cmp	w11, #0xf
    3bc0:	str	w9, [x18, #116]
    3bc4:	str	w8, [x18, #640]
    3bc8:	str	w10, [x18, #644]
    3bcc:	b.gt	3b98 <BZ2_compressBlock@@Base+0x464>
    3bd0:	b	3bd8 <BZ2_compressBlock@@Base+0x4a4>
    3bd4:	ldr	w8, [x24]
    3bd8:	ldr	w9, [x18, #48]
    3bdc:	add	w11, w10, #0x1
    3be0:	cmp	w10, #0x7
    3be4:	str	w8, [x18, #640]
    3be8:	str	w11, [x18, #644]
    3bec:	b.lt	3c2c <BZ2_compressBlock@@Base+0x4f8>  // b.tstop
    3bf0:	ldr	w10, [x18, #116]
    3bf4:	ldr	x11, [x18, #80]
    3bf8:	lsr	w8, w8, #24
    3bfc:	strb	w8, [x11, w10, sxtw]
    3c00:	ldr	w8, [x18, #116]
    3c04:	ldr	w11, [x18, #640]
    3c08:	ldr	w12, [x18, #644]
    3c0c:	add	w10, w8, #0x1
    3c10:	lsl	w8, w11, #8
    3c14:	sub	w11, w12, #0x8
    3c18:	cmp	w12, #0xf
    3c1c:	str	w10, [x18, #116]
    3c20:	str	w8, [x18, #640]
    3c24:	str	w11, [x18, #644]
    3c28:	b.gt	3bf4 <BZ2_compressBlock@@Base+0x4c0>
    3c2c:	mov	w12, #0x8                   	// #8
    3c30:	ldp	x23, x25, [x18, #56]
    3c34:	ldr	x20, [x18, #72]
    3c38:	add	w13, w11, #0x18
    3c3c:	sub	w11, w12, w11
    3c40:	lsl	w9, w9, w11
    3c44:	mov	w26, wzr
    3c48:	mov	x10, xzr
    3c4c:	orr	w8, w9, w8
    3c50:	str	w13, [x18, #644]
    3c54:	str	w8, [x18, #640]
    3c58:	str	wzr, [x18, #124]
    3c5c:	add	x8, x18, x10
    3c60:	ldrb	w9, [x8, #128]
    3c64:	cbz	w9, 3c74 <BZ2_compressBlock@@Base+0x540>
    3c68:	strb	w26, [x8, #384]
    3c6c:	add	w26, w26, #0x1
    3c70:	str	w26, [x18, #124]
    3c74:	add	x10, x10, #0x1
    3c78:	cmp	x10, #0x100
    3c7c:	b.ne	3c5c <BZ2_compressBlock@@Base+0x528>  // b.any
    3c80:	cmn	w26, #0x1
    3c84:	add	w22, w26, #0x1
    3c88:	b.lt	3ccc <BZ2_compressBlock@@Base+0x598>  // b.tstop
    3c8c:	mov	w8, w22
    3c90:	lsl	x8, x8, #2
    3c94:	add	x0, x18, #0x2a0
    3c98:	add	x2, x8, #0x4
    3c9c:	mov	w1, wzr
    3ca0:	bl	1560 <memset@plt>
    3ca4:	ldr	x18, [sp, #96]
    3ca8:	cmp	w26, #0x1
    3cac:	b.lt	3ccc <BZ2_compressBlock@@Base+0x598>  // b.tstop
    3cb0:	mov	x8, xzr
    3cb4:	mov	w9, w26
    3cb8:	add	x10, sp, #0x98
    3cbc:	strb	w8, [x10, x8]
    3cc0:	add	x8, x8, #0x1
    3cc4:	cmp	x9, x8
    3cc8:	b.ne	3cbc <BZ2_compressBlock@@Base+0x588>  // b.any
    3ccc:	ldr	w15, [x18, #108]
    3cd0:	cmp	w15, #0x1
    3cd4:	b.lt	3e54 <BZ2_compressBlock@@Base+0x720>  // b.tstop
    3cd8:	add	x10, sp, #0x98
    3cdc:	mov	x9, xzr
    3ce0:	mov	w13, wzr
    3ce4:	mov	w8, wzr
    3ce8:	orr	x11, x10, #0x1
    3cec:	mov	w12, #0x1                   	// #1
    3cf0:	ldr	w14, [x23, x9, lsl #2]
    3cf4:	sub	w14, w14, #0x1
    3cf8:	and	w16, w15, w14, asr #31
    3cfc:	add	w14, w16, w14
    3d00:	ldrb	w14, [x25, w14, sxtw]
    3d04:	ldrb	w16, [sp, #152]
    3d08:	add	x14, x18, x14
    3d0c:	ldrb	w14, [x14, #384]
    3d10:	cmp	w16, w14
    3d14:	b.ne	3d20 <BZ2_compressBlock@@Base+0x5ec>  // b.any
    3d18:	add	w13, w13, #0x1
    3d1c:	b	3de4 <BZ2_compressBlock@@Base+0x6b0>
    3d20:	subs	w15, w13, #0x1
    3d24:	b.lt	3d8c <BZ2_compressBlock@@Base+0x658>  // b.tstop
    3d28:	add	w16, w8, #0x1
    3d2c:	add	x13, x20, w8, sxtw #1
    3d30:	mov	w8, w16
    3d34:	tbnz	w15, #0, 3d4c <BZ2_compressBlock@@Base+0x618>
    3d38:	strh	wzr, [x13]
    3d3c:	ldr	w16, [x18, #672]
    3d40:	add	w16, w16, #0x1
    3d44:	str	w16, [x18, #672]
    3d48:	b	3d5c <BZ2_compressBlock@@Base+0x628>
    3d4c:	strh	w12, [x13]
    3d50:	ldr	w16, [x18, #676]
    3d54:	add	w16, w16, #0x1
    3d58:	str	w16, [x18, #676]
    3d5c:	subs	w16, w15, #0x2
    3d60:	b.lt	3d84 <BZ2_compressBlock@@Base+0x650>  // b.tstop
    3d64:	sub	w15, w15, #0x1
    3d68:	cmp	w16, #0x0
    3d6c:	csel	w15, w15, w16, lt  // lt = tstop
    3d70:	add	w8, w8, #0x1
    3d74:	asr	w15, w15, #1
    3d78:	add	x13, x13, #0x2
    3d7c:	tbnz	w15, #0, 3d4c <BZ2_compressBlock@@Base+0x618>
    3d80:	b	3d38 <BZ2_compressBlock@@Base+0x604>
    3d84:	ldrb	w16, [sp, #152]
    3d88:	mov	w13, wzr
    3d8c:	ldrb	w17, [sp, #153]
    3d90:	mov	x15, x11
    3d94:	strb	w16, [sp, #153]
    3d98:	cmp	w14, w17
    3d9c:	b.eq	3db8 <BZ2_compressBlock@@Base+0x684>  // b.none
    3da0:	mov	x15, x11
    3da4:	ldrb	w16, [x15, #1]!
    3da8:	cmp	w14, w16
    3dac:	strb	w17, [x15]
    3db0:	mov	w17, w16
    3db4:	b.ne	3da4 <BZ2_compressBlock@@Base+0x670>  // b.any
    3db8:	strb	w14, [sp, #152]
    3dbc:	sub	w14, w15, w10
    3dc0:	sxtw	x14, w14
    3dc4:	add	x14, x14, #0x1
    3dc8:	strh	w14, [x20, w8, sxtw #1]
    3dcc:	add	x14, x18, x14, lsl #2
    3dd0:	ldr	w15, [x14, #672]
    3dd4:	add	w8, w8, #0x1
    3dd8:	add	w15, w15, #0x1
    3ddc:	str	w15, [x14, #672]
    3de0:	ldr	w15, [x18, #108]
    3de4:	add	x9, x9, #0x1
    3de8:	cmp	x9, w15, sxtw
    3dec:	b.lt	3cf0 <BZ2_compressBlock@@Base+0x5bc>  // b.tstop
    3df0:	subs	w9, w13, #0x1
    3df4:	b.lt	3e58 <BZ2_compressBlock@@Base+0x724>  // b.tstop
    3df8:	add	x10, x20, w8, sxtw #1
    3dfc:	add	w8, w8, #0x1
    3e00:	mov	w11, #0x1                   	// #1
    3e04:	tbnz	w9, #0, 3e1c <BZ2_compressBlock@@Base+0x6e8>
    3e08:	strh	wzr, [x10]
    3e0c:	ldr	w12, [x18, #672]
    3e10:	add	w12, w12, #0x1
    3e14:	str	w12, [x18, #672]
    3e18:	b	3e2c <BZ2_compressBlock@@Base+0x6f8>
    3e1c:	strh	w11, [x10]
    3e20:	ldr	w12, [x18, #676]
    3e24:	add	w12, w12, #0x1
    3e28:	str	w12, [x18, #676]
    3e2c:	subs	w12, w9, #0x2
    3e30:	b.lt	3e58 <BZ2_compressBlock@@Base+0x724>  // b.tstop
    3e34:	sub	w9, w9, #0x1
    3e38:	cmp	w12, #0x0
    3e3c:	csel	w9, w9, w12, lt  // lt = tstop
    3e40:	add	w8, w8, #0x1
    3e44:	asr	w9, w9, #1
    3e48:	add	x10, x10, #0x2
    3e4c:	tbnz	w9, #0, 3e1c <BZ2_compressBlock@@Base+0x6e8>
    3e50:	b	3e08 <BZ2_compressBlock@@Base+0x6d4>
    3e54:	mov	w8, wzr
    3e58:	strh	w22, [x20, w8, sxtw #1]
    3e5c:	add	x9, x18, w22, sxtw #2
    3e60:	ldr	w10, [x9, #672]
    3e64:	add	w3, w8, #0x1
    3e68:	add	w10, w10, #0x1
    3e6c:	str	w10, [x9, #672]
    3e70:	ldr	w9, [x18, #656]
    3e74:	ldr	x25, [x18, #72]
    3e78:	str	w3, [x18, #668]
    3e7c:	cmp	w9, #0x2
    3e80:	b.gt	707c <BZ2_compressBlock@@Base+0x3948>
    3e84:	ldrsw	x13, [x18, #124]
    3e88:	mov	w8, #0x934c                	// #37708
    3e8c:	mov	x20, xzr
    3e90:	add	x22, x18, x8
    3e94:	add	w23, w13, #0x2
    3e98:	cmp	w23, #0x1
    3e9c:	csinc	w26, w23, wzr, gt
    3ea0:	str	x13, [sp, #64]
    3ea4:	cmn	w13, #0x1
    3ea8:	b.lt	3ec4 <BZ2_compressBlock@@Base+0x790>  // b.tstop
    3eac:	add	x0, x22, x20
    3eb0:	mov	w1, #0xf                   	// #15
    3eb4:	mov	x2, x26
    3eb8:	bl	1560 <memset@plt>
    3ebc:	ldr	x13, [sp, #64]
    3ec0:	ldr	x18, [sp, #96]
    3ec4:	add	x20, x20, #0x102
    3ec8:	cmp	x20, #0x60c
    3ecc:	b.ne	3ea4 <BZ2_compressBlock@@Base+0x770>  // b.any
    3ed0:	ldr	w15, [x18, #668]
    3ed4:	cmp	w15, #0x0
    3ed8:	b.gt	3ef0 <BZ2_compressBlock@@Base+0x7bc>
    3edc:	mov	w0, #0xbb9                 	// #3001
    3ee0:	bl	16f0 <BZ2_bz__AssertH__fail@plt>
    3ee4:	ldr	x18, [sp, #96]
    3ee8:	ldr	x13, [sp, #64]
    3eec:	ldr	w15, [x18, #668]
    3ef0:	cmp	w15, #0xc8
    3ef4:	stp	x26, x25, [sp, #72]
    3ef8:	b.ge	3f04 <BZ2_compressBlock@@Base+0x7d0>  // b.tcont
    3efc:	mov	w8, #0x2                   	// #2
    3f00:	b	3f30 <BZ2_compressBlock@@Base+0x7fc>
    3f04:	cmp	w15, #0x258
    3f08:	b.ge	3f14 <BZ2_compressBlock@@Base+0x7e0>  // b.tcont
    3f0c:	mov	w8, #0x3                   	// #3
    3f10:	b	3f30 <BZ2_compressBlock@@Base+0x7fc>
    3f14:	cmp	w15, #0x4b0
    3f18:	b.ge	3f24 <BZ2_compressBlock@@Base+0x7f0>  // b.tcont
    3f1c:	mov	w8, #0x4                   	// #4
    3f20:	b	3f30 <BZ2_compressBlock@@Base+0x7fc>
    3f24:	cmp	w15, #0x960
    3f28:	mov	w8, #0x5                   	// #5
    3f2c:	cinc	w8, w8, ge  // ge = tcont
    3f30:	sxtw	x9, w23
    3f34:	stp	x23, x9, [sp, #32]
    3f38:	mov	w9, #0x102                 	// #258
    3f3c:	mov	w11, w8
    3f40:	mov	w10, #0x924a                	// #37450
    3f44:	umaddl	x8, w8, w9, x18
    3f48:	mov	w25, wzr
    3f4c:	add	x23, x18, #0x2a4
    3f50:	mov	x28, #0x100000000           	// #4294967296
    3f54:	add	x20, x8, x10
    3f58:	mov	w22, #0xf                   	// #15
    3f5c:	mov	x16, x11
    3f60:	str	x11, [sp, #104]
    3f64:	sub	w27, w25, #0x1
    3f68:	cmp	w27, w13
    3f6c:	mov	w26, wzr
    3f70:	b.gt	3fe8 <BZ2_compressBlock@@Base+0x8b4>
    3f74:	sdiv	w9, w15, w16
    3f78:	cmp	w9, #0x1
    3f7c:	b.lt	3fe8 <BZ2_compressBlock@@Base+0x8b4>  // b.tstop
    3f80:	mov	w26, wzr
    3f84:	sxtw	x10, w27
    3f88:	sbfiz	x8, x27, #32, #32
    3f8c:	ldr	w11, [x23, x10, lsl #2]
    3f90:	add	x27, x10, #0x1
    3f94:	cmp	x10, x13
    3f98:	add	x8, x8, x28
    3f9c:	add	w26, w11, w26
    3fa0:	b.ge	3fb0 <BZ2_compressBlock@@Base+0x87c>  // b.tcont
    3fa4:	cmp	w26, w9
    3fa8:	mov	x10, x27
    3fac:	b.lt	3f8c <BZ2_compressBlock@@Base+0x858>  // b.tstop
    3fb0:	cmp	w25, w27
    3fb4:	b.ge	3fe8 <BZ2_compressBlock@@Base+0x8b4>  // b.tcont
    3fb8:	ldr	x9, [sp, #104]
    3fbc:	cmp	x16, x9
    3fc0:	b.eq	3fe8 <BZ2_compressBlock@@Base+0x8b4>  // b.none
    3fc4:	cmp	x16, #0x1
    3fc8:	b.eq	3fe8 <BZ2_compressBlock@@Base+0x8b4>  // b.none
    3fcc:	ldr	x9, [sp, #104]
    3fd0:	sub	w9, w9, w16
    3fd4:	tbz	w9, #0, 3fe8 <BZ2_compressBlock@@Base+0x8b4>
    3fd8:	add	x8, x18, x8, asr #30
    3fdc:	ldr	w8, [x8, #672]
    3fe0:	sub	w27, w27, #0x1
    3fe4:	sub	w26, w26, w8
    3fe8:	ldr	w8, [x18, #656]
    3fec:	cmp	w8, #0x3
    3ff0:	b.ge	4048 <BZ2_compressBlock@@Base+0x914>  // b.tcont
    3ff4:	ldr	x14, [sp, #40]
    3ff8:	cmn	w13, #0x1
    3ffc:	sub	x8, x16, #0x1
    4000:	b.lt	402c <BZ2_compressBlock@@Base+0x8f8>  // b.tstop
    4004:	mov	x9, xzr
    4008:	sxtw	x10, w27
    400c:	sxtw	x11, w25
    4010:	cmp	x9, x10
    4014:	ccmp	x9, x11, #0x8, le
    4018:	csel	w12, w22, wzr, lt  // lt = tstop
    401c:	strb	w12, [x20, x9]
    4020:	add	x9, x9, #0x1
    4024:	cmp	x9, x14
    4028:	b.lt	4010 <BZ2_compressBlock@@Base+0x8dc>  // b.tstop
    402c:	add	w25, w27, #0x1
    4030:	sub	w15, w15, w26
    4034:	cmp	x16, #0x1
    4038:	sub	x20, x20, #0x102
    403c:	mov	x16, x8
    4040:	b.gt	3f64 <BZ2_compressBlock@@Base+0x830>
    4044:	b	40b0 <BZ2_compressBlock@@Base+0x97c>
    4048:	adrp	x8, 1d000 <BZ2_bzerror@@Base+0x10c24>
    404c:	ldr	x8, [x8, #4016]
    4050:	ldr	s0, [x18, #668]
    4054:	scvtf	s1, w26
    4058:	fcvt	d1, s1
    405c:	ldr	x0, [x8]
    4060:	mov	x8, #0x4059000000000000    	// #4636737291354636288
    4064:	fmov	d2, x8
    4068:	scvtf	s0, s0
    406c:	fmul	d1, d1, d2
    4070:	fcvt	d0, s0
    4074:	adrp	x1, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    4078:	fdiv	d0, d1, d0
    407c:	add	x1, x1, #0x7aa
    4080:	mov	x2, x16
    4084:	mov	w3, w25
    4088:	mov	w4, w27
    408c:	mov	w5, w26
    4090:	str	x16, [sp, #112]
    4094:	str	w15, [sp, #88]
    4098:	bl	1700 <fprintf@plt>
    409c:	ldr	x16, [sp, #112]
    40a0:	ldr	w15, [sp, #88]
    40a4:	ldr	x13, [sp, #64]
    40a8:	ldr	x18, [sp, #96]
    40ac:	b	3ff4 <BZ2_compressBlock@@Base+0x8c0>
    40b0:	ldr	x22, [sp, #104]
    40b4:	mov	w9, #0xc9b8                	// #51640
    40b8:	mov	w11, #0xb188                	// #45448
    40bc:	add	x11, x18, x11
    40c0:	lsl	x8, x22, #2
    40c4:	str	x8, [sp, #16]
    40c8:	ldr	x8, [sp, #72]
    40cc:	cmp	w22, #0x6
    40d0:	cset	w10, ne  // ne = any
    40d4:	cmn	w13, #0x1
    40d8:	lsl	x28, x8, #2
    40dc:	lsl	x8, x22, #1
    40e0:	str	x8, [sp, #72]
    40e4:	mov	w8, #0x934c                	// #37708
    40e8:	add	x8, x18, x8
    40ec:	str	x8, [sp, #88]
    40f0:	add	x8, x18, x9
    40f4:	str	x8, [sp, #56]
    40f8:	cset	w8, lt  // lt = tstop
    40fc:	orr	w8, w8, w10
    4100:	str	wzr, [sp, #52]
    4104:	str	x11, [sp, #24]
    4108:	str	w8, [sp, #4]
    410c:	str	x28, [sp, #8]
    4110:	ldr	x2, [sp, #16]
    4114:	add	x0, sp, #0x98
    4118:	mov	w1, wzr
    411c:	bl	1560 <memset@plt>
    4120:	ldr	x27, [sp, #24]
    4124:	ldr	x8, [sp, #64]
    4128:	mov	x25, x22
    412c:	cmn	w8, #0x1
    4130:	b.lt	4148 <BZ2_compressBlock@@Base+0xa14>  // b.tstop
    4134:	mov	x0, x27
    4138:	mov	w1, wzr
    413c:	mov	x2, x28
    4140:	bl	1560 <memset@plt>
    4144:	ldr	x8, [sp, #64]
    4148:	subs	x25, x25, #0x1
    414c:	add	x27, x27, #0x408
    4150:	b.ne	412c <BZ2_compressBlock@@Base+0x9f8>  // b.any
    4154:	ldp	x27, x17, [sp, #88]
    4158:	ldr	x14, [sp, #40]
    415c:	ldr	w8, [sp, #4]
    4160:	tbnz	w8, #0, 41b4 <BZ2_compressBlock@@Base+0xa80>
    4164:	mov	x8, xzr
    4168:	mov	x9, xzr
    416c:	add	x10, x27, x9
    4170:	ldrb	w11, [x10, #258]
    4174:	ldrb	w12, [x10]
    4178:	add	x13, x27, x8
    417c:	add	x9, x9, #0x1
    4180:	cmp	x9, x14
    4184:	bfi	w12, w11, #16, #8
    4188:	str	w12, [x13, #13932]
    418c:	ldrb	w11, [x10, #774]
    4190:	ldrb	w12, [x10, #516]
    4194:	add	x8, x8, #0x10
    4198:	bfi	w12, w11, #16, #8
    419c:	str	w12, [x13, #13936]
    41a0:	ldrb	w11, [x10, #1290]
    41a4:	ldrb	w10, [x10, #1032]
    41a8:	bfi	w10, w11, #16, #8
    41ac:	str	w10, [x13, #13940]
    41b0:	b.lt	416c <BZ2_compressBlock@@Base+0xa38>  // b.tstop
    41b4:	ldr	w28, [x17, #668]
    41b8:	cmp	w28, #0x1
    41bc:	b.lt	4bfc <BZ2_compressBlock@@Base+0x14c8>  // b.tstop
    41c0:	mov	w25, wzr
    41c4:	mov	w20, wzr
    41c8:	str	xzr, [sp, #112]
    41cc:	ldr	x2, [sp, #72]
    41d0:	cmp	w22, #0x6
    41d4:	sxtw	x8, w25
    41d8:	add	x0, sp, #0x8c
    41dc:	mov	w1, wzr
    41e0:	cset	w22, eq  // eq = none
    41e4:	mov	x23, x8
    41e8:	add	x26, x8, #0x31
    41ec:	sub	w27, w28, #0x1
    41f0:	bl	1560 <memset@plt>
    41f4:	cmp	w26, w28
    41f8:	csel	w8, w26, w27, lt  // lt = tstop
    41fc:	sub	w9, w8, w25
    4200:	cmp	w9, #0x31
    4204:	cset	w9, eq  // eq = none
    4208:	and	w9, w22, w9
    420c:	tbz	w9, #0, 47c4 <BZ2_compressBlock@@Base+0x1090>
    4210:	ldr	x18, [sp, #80]
    4214:	ldr	x0, [sp, #56]
    4218:	ldr	x27, [sp, #88]
    421c:	mov	w1, #0xb188                	// #45448
    4220:	add	x10, x18, x23, lsl #1
    4224:	ldrh	w11, [x10]
    4228:	ldrh	w12, [x10, #2]
    422c:	ldrh	w15, [x10, #4]
    4230:	add	x3, sp, #0x8c
    4234:	add	x11, x0, x11, lsl #4
    4238:	add	x12, x0, x12, lsl #4
    423c:	ldp	w13, w17, [x12]
    4240:	ldp	w14, w16, [x11]
    4244:	ldr	w11, [x11, #8]
    4248:	ldr	w12, [x12, #8]
    424c:	add	x15, x0, x15, lsl #4
    4250:	add	w13, w13, w14
    4254:	ldrh	w14, [x10, #6]
    4258:	add	w16, w17, w16
    425c:	add	w11, w12, w11
    4260:	ldp	w17, w12, [x15]
    4264:	ldr	w15, [x15, #8]
    4268:	add	x14, x0, x14, lsl #4
    426c:	add	w13, w13, w17
    4270:	ldrh	w17, [x10, #8]
    4274:	add	w12, w16, w12
    4278:	add	w11, w11, w15
    427c:	ldp	w15, w16, [x14]
    4280:	ldr	w14, [x14, #8]
    4284:	add	x17, x0, x17, lsl #4
    4288:	add	w13, w13, w15
    428c:	add	w12, w12, w16
    4290:	ldrh	w16, [x10, #10]
    4294:	add	w11, w11, w14
    4298:	ldp	w15, w14, [x17]
    429c:	ldr	w17, [x17, #8]
    42a0:	add	x16, x0, x16, lsl #4
    42a4:	add	w13, w13, w15
    42a8:	ldrh	w15, [x10, #12]
    42ac:	add	w12, w12, w14
    42b0:	add	w11, w11, w17
    42b4:	ldp	w14, w17, [x16]
    42b8:	ldr	w16, [x16, #8]
    42bc:	add	x15, x0, x15, lsl #4
    42c0:	add	w13, w13, w14
    42c4:	ldrh	w14, [x10, #14]
    42c8:	add	w12, w12, w17
    42cc:	add	w11, w11, w16
    42d0:	ldp	w16, w17, [x15]
    42d4:	ldr	w15, [x15, #8]
    42d8:	add	x14, x0, x14, lsl #4
    42dc:	add	w12, w12, w17
    42e0:	ldrh	w17, [x10, #16]
    42e4:	add	w13, w13, w16
    42e8:	add	w11, w11, w15
    42ec:	ldp	w16, w15, [x14]
    42f0:	ldr	w14, [x14, #8]
    42f4:	add	x17, x0, x17, lsl #4
    42f8:	add	w13, w13, w16
    42fc:	ldrh	w16, [x10, #18]
    4300:	add	w12, w12, w15
    4304:	add	w11, w11, w14
    4308:	ldp	w15, w14, [x17]
    430c:	ldr	w17, [x17, #8]
    4310:	add	x16, x0, x16, lsl #4
    4314:	add	w13, w13, w15
    4318:	ldrh	w15, [x10, #20]
    431c:	add	w12, w12, w14
    4320:	add	w11, w11, w17
    4324:	ldp	w14, w17, [x16]
    4328:	ldr	w16, [x16, #8]
    432c:	add	x15, x0, x15, lsl #4
    4330:	add	w13, w13, w14
    4334:	add	w12, w12, w17
    4338:	ldrh	w17, [x10, #22]
    433c:	add	w11, w11, w16
    4340:	ldp	w14, w16, [x15]
    4344:	ldr	w15, [x15, #8]
    4348:	add	x17, x0, x17, lsl #4
    434c:	add	w13, w13, w14
    4350:	ldrh	w14, [x10, #24]
    4354:	add	w12, w12, w16
    4358:	add	w11, w11, w15
    435c:	ldp	w16, w15, [x17]
    4360:	ldr	w17, [x17, #8]
    4364:	add	x14, x0, x14, lsl #4
    4368:	add	w13, w13, w16
    436c:	ldrh	w16, [x10, #26]
    4370:	add	w12, w12, w15
    4374:	add	w11, w11, w17
    4378:	ldp	w15, w17, [x14]
    437c:	ldr	w14, [x14, #8]
    4380:	add	x16, x0, x16, lsl #4
    4384:	add	w12, w12, w17
    4388:	ldrh	w17, [x10, #28]
    438c:	add	w13, w13, w15
    4390:	add	w11, w11, w14
    4394:	ldp	w15, w14, [x16]
    4398:	ldr	w16, [x16, #8]
    439c:	add	x17, x0, x17, lsl #4
    43a0:	add	w13, w13, w15
    43a4:	ldrh	w15, [x10, #30]
    43a8:	add	w12, w12, w14
    43ac:	add	w11, w11, w16
    43b0:	ldp	w14, w16, [x17]
    43b4:	ldr	w17, [x17, #8]
    43b8:	add	x15, x0, x15, lsl #4
    43bc:	add	w13, w13, w14
    43c0:	ldrh	w14, [x10, #32]
    43c4:	add	w12, w12, w16
    43c8:	add	w11, w11, w17
    43cc:	ldp	w16, w17, [x15]
    43d0:	ldr	w15, [x15, #8]
    43d4:	add	x14, x0, x14, lsl #4
    43d8:	add	w13, w13, w16
    43dc:	add	w12, w12, w17
    43e0:	ldrh	w17, [x10, #34]
    43e4:	add	w11, w11, w15
    43e8:	ldp	w16, w15, [x14]
    43ec:	ldr	w14, [x14, #8]
    43f0:	add	x17, x0, x17, lsl #4
    43f4:	add	w13, w13, w16
    43f8:	ldrh	w16, [x10, #36]
    43fc:	add	w12, w12, w15
    4400:	add	w11, w11, w14
    4404:	ldp	w15, w14, [x17]
    4408:	ldr	w17, [x17, #8]
    440c:	add	x16, x0, x16, lsl #4
    4410:	add	w13, w13, w15
    4414:	ldrh	w15, [x10, #38]
    4418:	add	w12, w12, w14
    441c:	add	w11, w11, w17
    4420:	ldp	w14, w17, [x16]
    4424:	ldr	w16, [x16, #8]
    4428:	add	x15, x0, x15, lsl #4
    442c:	add	w12, w12, w17
    4430:	ldrh	w17, [x10, #40]
    4434:	add	w13, w13, w14
    4438:	add	w11, w11, w16
    443c:	ldp	w14, w16, [x15]
    4440:	ldr	w15, [x15, #8]
    4444:	add	x17, x0, x17, lsl #4
    4448:	add	w13, w13, w14
    444c:	ldrh	w14, [x10, #42]
    4450:	add	w12, w12, w16
    4454:	add	w11, w11, w15
    4458:	ldp	w16, w15, [x17]
    445c:	ldr	w17, [x17, #8]
    4460:	add	x14, x0, x14, lsl #4
    4464:	add	w13, w13, w16
    4468:	ldrh	w16, [x10, #44]
    446c:	add	w12, w12, w15
    4470:	add	w11, w11, w17
    4474:	ldp	w15, w17, [x14]
    4478:	ldr	w14, [x14, #8]
    447c:	add	x16, x0, x16, lsl #4
    4480:	add	w13, w13, w15
    4484:	add	w12, w12, w17
    4488:	ldrh	w17, [x10, #46]
    448c:	add	w11, w11, w14
    4490:	ldp	w15, w14, [x16]
    4494:	ldr	w16, [x16, #8]
    4498:	add	x17, x0, x17, lsl #4
    449c:	add	w13, w13, w15
    44a0:	ldrh	w15, [x10, #48]
    44a4:	add	w12, w12, w14
    44a8:	add	w11, w11, w16
    44ac:	ldp	w14, w16, [x17]
    44b0:	ldr	w17, [x17, #8]
    44b4:	add	x15, x0, x15, lsl #4
    44b8:	add	w13, w13, w14
    44bc:	ldrh	w14, [x10, #50]
    44c0:	add	w12, w12, w16
    44c4:	add	w11, w11, w17
    44c8:	ldp	w16, w17, [x15]
    44cc:	ldr	w15, [x15, #8]
    44d0:	add	x14, x0, x14, lsl #4
    44d4:	add	w12, w12, w17
    44d8:	ldrh	w17, [x10, #52]
    44dc:	add	w13, w13, w16
    44e0:	add	w11, w11, w15
    44e4:	ldp	w16, w15, [x14]
    44e8:	ldr	w14, [x14, #8]
    44ec:	add	x17, x0, x17, lsl #4
    44f0:	add	w13, w13, w16
    44f4:	ldrh	w16, [x10, #54]
    44f8:	add	w12, w12, w15
    44fc:	add	w11, w11, w14
    4500:	ldp	w15, w14, [x17]
    4504:	ldr	w17, [x17, #8]
    4508:	add	x16, x0, x16, lsl #4
    450c:	add	w13, w13, w15
    4510:	ldrh	w15, [x10, #56]
    4514:	add	w12, w12, w14
    4518:	add	w11, w11, w17
    451c:	ldp	w14, w17, [x16]
    4520:	ldr	w16, [x16, #8]
    4524:	add	x15, x0, x15, lsl #4
    4528:	add	w13, w13, w14
    452c:	add	w12, w12, w17
    4530:	ldrh	w17, [x10, #58]
    4534:	add	w11, w11, w16
    4538:	ldp	w14, w16, [x15]
    453c:	ldr	w15, [x15, #8]
    4540:	add	x17, x0, x17, lsl #4
    4544:	add	w13, w13, w14
    4548:	ldrh	w14, [x10, #60]
    454c:	add	w12, w12, w16
    4550:	add	w11, w11, w15
    4554:	ldp	w16, w15, [x17]
    4558:	ldr	w17, [x17, #8]
    455c:	add	x14, x0, x14, lsl #4
    4560:	add	w13, w13, w16
    4564:	ldrh	w16, [x10, #62]
    4568:	add	w12, w12, w15
    456c:	add	w11, w11, w17
    4570:	ldp	w15, w17, [x14]
    4574:	ldr	w14, [x14, #8]
    4578:	add	x16, x0, x16, lsl #4
    457c:	add	w12, w12, w17
    4580:	ldrh	w17, [x10, #64]
    4584:	add	w13, w13, w15
    4588:	add	w11, w11, w14
    458c:	ldp	w15, w14, [x16]
    4590:	ldr	w16, [x16, #8]
    4594:	add	x17, x0, x17, lsl #4
    4598:	add	w13, w13, w15
    459c:	ldrh	w15, [x10, #66]
    45a0:	add	w12, w12, w14
    45a4:	add	w11, w11, w16
    45a8:	ldp	w14, w16, [x17]
    45ac:	ldr	w17, [x17, #8]
    45b0:	add	x15, x0, x15, lsl #4
    45b4:	add	w13, w13, w14
    45b8:	ldrh	w14, [x10, #68]
    45bc:	add	w12, w12, w16
    45c0:	add	w11, w11, w17
    45c4:	ldp	w16, w17, [x15]
    45c8:	ldr	w15, [x15, #8]
    45cc:	add	x14, x0, x14, lsl #4
    45d0:	add	w13, w13, w16
    45d4:	add	w12, w12, w17
    45d8:	ldrh	w17, [x10, #70]
    45dc:	add	w11, w11, w15
    45e0:	ldp	w16, w15, [x14]
    45e4:	ldr	w14, [x14, #8]
    45e8:	add	x17, x0, x17, lsl #4
    45ec:	add	w13, w13, w16
    45f0:	ldrh	w16, [x10, #72]
    45f4:	add	w12, w12, w15
    45f8:	add	w11, w11, w14
    45fc:	ldp	w15, w14, [x17]
    4600:	ldr	w17, [x17, #8]
    4604:	add	x16, x0, x16, lsl #4
    4608:	add	w13, w13, w15
    460c:	ldrh	w15, [x10, #74]
    4610:	add	w12, w12, w14
    4614:	add	w11, w11, w17
    4618:	ldp	w14, w17, [x16]
    461c:	ldr	w16, [x16, #8]
    4620:	add	x15, x0, x15, lsl #4
    4624:	add	w12, w12, w17
    4628:	ldrh	w17, [x10, #76]
    462c:	add	w13, w13, w14
    4630:	add	w11, w11, w16
    4634:	ldp	w14, w16, [x15]
    4638:	ldr	w15, [x15, #8]
    463c:	add	x17, x0, x17, lsl #4
    4640:	add	w13, w13, w14
    4644:	ldrh	w14, [x10, #78]
    4648:	add	w12, w12, w16
    464c:	add	w11, w11, w15
    4650:	ldp	w16, w15, [x17]
    4654:	ldr	w17, [x17, #8]
    4658:	add	x14, x0, x14, lsl #4
    465c:	add	w13, w13, w16
    4660:	ldrh	w16, [x10, #80]
    4664:	add	w12, w12, w15
    4668:	add	w11, w11, w17
    466c:	ldp	w15, w17, [x14]
    4670:	ldr	w14, [x14, #8]
    4674:	add	x16, x0, x16, lsl #4
    4678:	add	w13, w13, w15
    467c:	add	w12, w12, w17
    4680:	ldrh	w17, [x10, #82]
    4684:	add	w11, w11, w14
    4688:	ldp	w15, w14, [x16]
    468c:	ldr	w16, [x16, #8]
    4690:	add	x17, x0, x17, lsl #4
    4694:	add	w13, w13, w15
    4698:	ldrh	w15, [x10, #84]
    469c:	add	w12, w12, w14
    46a0:	add	w11, w11, w16
    46a4:	ldp	w14, w16, [x17]
    46a8:	ldr	w17, [x17, #8]
    46ac:	add	x15, x0, x15, lsl #4
    46b0:	add	w13, w13, w14
    46b4:	ldrh	w14, [x10, #86]
    46b8:	add	w12, w12, w16
    46bc:	add	w11, w11, w17
    46c0:	ldp	w16, w17, [x15]
    46c4:	ldr	w15, [x15, #8]
    46c8:	add	x14, x0, x14, lsl #4
    46cc:	add	w12, w12, w17
    46d0:	ldrh	w17, [x10, #88]
    46d4:	add	w13, w13, w16
    46d8:	add	w11, w11, w15
    46dc:	ldp	w16, w15, [x14]
    46e0:	ldr	w14, [x14, #8]
    46e4:	add	x17, x0, x17, lsl #4
    46e8:	add	w13, w13, w16
    46ec:	ldrh	w16, [x10, #90]
    46f0:	add	w12, w12, w15
    46f4:	add	w11, w11, w14
    46f8:	ldp	w15, w14, [x17]
    46fc:	ldr	w17, [x17, #8]
    4700:	add	x16, x0, x16, lsl #4
    4704:	add	w13, w13, w15
    4708:	ldrh	w15, [x10, #92]
    470c:	add	w12, w12, w14
    4710:	add	w11, w11, w17
    4714:	ldp	w14, w17, [x16]
    4718:	ldr	w16, [x16, #8]
    471c:	add	x15, x0, x15, lsl #4
    4720:	add	w13, w13, w14
    4724:	add	w11, w11, w16
    4728:	ldp	w14, w16, [x15]
    472c:	add	w12, w12, w17
    4730:	ldrh	w17, [x10, #94]
    4734:	ldrh	w10, [x10, #96]
    4738:	add	w13, w13, w14
    473c:	ldr	w14, [x15, #8]
    4740:	add	x15, x0, x17, lsl #4
    4744:	add	w12, w12, w16
    4748:	add	x10, x0, x10, lsl #4
    474c:	add	w11, w11, w14
    4750:	ldp	w16, w14, [x15]
    4754:	ldr	w15, [x15, #8]
    4758:	ldp	x17, x22, [sp, #96]
    475c:	add	w13, w13, w16
    4760:	ldrh	w16, [x18, x26, lsl #1]
    4764:	add	w12, w12, w14
    4768:	add	w11, w11, w15
    476c:	ldp	w14, w15, [x10]
    4770:	add	x16, x0, x16, lsl #4
    4774:	ldr	w10, [x10, #8]
    4778:	ldr	x0, [sp, #112]
    477c:	add	w13, w13, w14
    4780:	add	w12, w12, w15
    4784:	ldp	w14, w15, [x16]
    4788:	ldr	w16, [x16, #8]
    478c:	add	w10, w11, w10
    4790:	add	w11, w13, w14
    4794:	add	w12, w12, w15
    4798:	add	w10, w10, w16
    479c:	strh	w11, [sp, #140]
    47a0:	lsr	w11, w11, #16
    47a4:	strh	w12, [sp, #144]
    47a8:	lsr	w12, w12, #16
    47ac:	strh	w10, [sp, #148]
    47b0:	lsr	w10, w10, #16
    47b4:	strh	w11, [sp, #142]
    47b8:	strh	w12, [sp, #146]
    47bc:	strh	w10, [sp, #150]
    47c0:	b	4820 <BZ2_compressBlock@@Base+0x10ec>
    47c4:	ldp	x17, x22, [sp, #96]
    47c8:	ldp	x18, x27, [sp, #80]
    47cc:	ldr	x0, [sp, #112]
    47d0:	cmp	w8, w23
    47d4:	mov	w1, #0xb188                	// #45448
    47d8:	add	x3, sp, #0x8c
    47dc:	b.lt	4820 <BZ2_compressBlock@@Base+0x10ec>  // b.tstop
    47e0:	sxtw	x10, w8
    47e4:	mov	x11, x23
    47e8:	ldrh	w12, [x18, x11, lsl #1]
    47ec:	add	x13, sp, #0x8c
    47f0:	mov	x14, x22
    47f4:	add	x12, x27, x12
    47f8:	ldrb	w15, [x12]
    47fc:	ldrh	w16, [x13]
    4800:	subs	x14, x14, #0x1
    4804:	add	x12, x12, #0x102
    4808:	add	w15, w16, w15
    480c:	strh	w15, [x13], #2
    4810:	b.ne	47f8 <BZ2_compressBlock@@Base+0x10c4>  // b.any
    4814:	cmp	x11, x10
    4818:	add	x11, x11, #0x1
    481c:	b.ne	47e8 <BZ2_compressBlock@@Base+0x10b4>  // b.any
    4820:	mov	w11, #0xc9ff                	// #51711
    4824:	mov	x12, xzr
    4828:	movk	w11, #0x3b9a, lsl #16
    482c:	mov	w10, #0xffffffff            	// #-1
    4830:	ldrh	w13, [x3, x12, lsl #1]
    4834:	cmp	w11, w13
    4838:	csel	w10, w12, w10, gt
    483c:	add	x12, x12, #0x1
    4840:	csel	w11, w13, w11, gt
    4844:	cmp	x22, x12
    4848:	b.ne	4830 <BZ2_compressBlock@@Base+0x10fc>  // b.any
    484c:	add	x14, sp, #0x98
    4850:	ldr	w12, [x14, w10, sxtw #2]
    4854:	add	w20, w11, w20
    4858:	sxtw	x11, w10
    485c:	add	x13, x17, x0
    4860:	add	w12, w12, #0x1
    4864:	add	x0, x0, #0x1
    4868:	str	w12, [x14, w10, sxtw #2]
    486c:	strb	w10, [x13, #1704]
    4870:	tbz	w9, #0, 4ba8 <BZ2_compressBlock@@Base+0x1474>
    4874:	add	x10, x18, x23, lsl #1
    4878:	ldrh	w12, [x10]
    487c:	mov	w9, #0x408                 	// #1032
    4880:	madd	x9, x11, x9, x17
    4884:	add	x9, x9, x1
    4888:	ldr	w11, [x9, x12, lsl #2]
    488c:	add	w11, w11, #0x1
    4890:	str	w11, [x9, x12, lsl #2]
    4894:	ldrh	w11, [x10, #2]
    4898:	ldr	w12, [x9, x11, lsl #2]
    489c:	add	w12, w12, #0x1
    48a0:	str	w12, [x9, x11, lsl #2]
    48a4:	ldrh	w11, [x10, #4]
    48a8:	ldr	w12, [x9, x11, lsl #2]
    48ac:	add	w12, w12, #0x1
    48b0:	str	w12, [x9, x11, lsl #2]
    48b4:	ldrh	w11, [x10, #6]
    48b8:	ldr	w12, [x9, x11, lsl #2]
    48bc:	add	w12, w12, #0x1
    48c0:	str	w12, [x9, x11, lsl #2]
    48c4:	ldrh	w11, [x10, #8]
    48c8:	ldr	w12, [x9, x11, lsl #2]
    48cc:	add	w12, w12, #0x1
    48d0:	str	w12, [x9, x11, lsl #2]
    48d4:	ldrh	w11, [x10, #10]
    48d8:	ldr	w12, [x9, x11, lsl #2]
    48dc:	add	w12, w12, #0x1
    48e0:	str	w12, [x9, x11, lsl #2]
    48e4:	ldrh	w11, [x10, #12]
    48e8:	ldr	w12, [x9, x11, lsl #2]
    48ec:	add	w12, w12, #0x1
    48f0:	str	w12, [x9, x11, lsl #2]
    48f4:	ldrh	w11, [x10, #14]
    48f8:	ldr	w12, [x9, x11, lsl #2]
    48fc:	add	w12, w12, #0x1
    4900:	str	w12, [x9, x11, lsl #2]
    4904:	ldrh	w11, [x10, #16]
    4908:	ldr	w12, [x9, x11, lsl #2]
    490c:	add	w12, w12, #0x1
    4910:	str	w12, [x9, x11, lsl #2]
    4914:	ldrh	w11, [x10, #18]
    4918:	ldr	w12, [x9, x11, lsl #2]
    491c:	add	w12, w12, #0x1
    4920:	str	w12, [x9, x11, lsl #2]
    4924:	ldrh	w11, [x10, #20]
    4928:	ldr	w12, [x9, x11, lsl #2]
    492c:	add	w12, w12, #0x1
    4930:	str	w12, [x9, x11, lsl #2]
    4934:	ldrh	w11, [x10, #22]
    4938:	ldr	w12, [x9, x11, lsl #2]
    493c:	add	w12, w12, #0x1
    4940:	str	w12, [x9, x11, lsl #2]
    4944:	ldrh	w11, [x10, #24]
    4948:	ldr	w12, [x9, x11, lsl #2]
    494c:	add	w12, w12, #0x1
    4950:	str	w12, [x9, x11, lsl #2]
    4954:	ldrh	w11, [x10, #26]
    4958:	ldr	w12, [x9, x11, lsl #2]
    495c:	add	w12, w12, #0x1
    4960:	str	w12, [x9, x11, lsl #2]
    4964:	ldrh	w11, [x10, #28]
    4968:	ldr	w12, [x9, x11, lsl #2]
    496c:	add	w12, w12, #0x1
    4970:	str	w12, [x9, x11, lsl #2]
    4974:	ldrh	w11, [x10, #30]
    4978:	ldr	w12, [x9, x11, lsl #2]
    497c:	add	w12, w12, #0x1
    4980:	str	w12, [x9, x11, lsl #2]
    4984:	ldrh	w11, [x10, #32]
    4988:	ldr	w12, [x9, x11, lsl #2]
    498c:	add	w12, w12, #0x1
    4990:	str	w12, [x9, x11, lsl #2]
    4994:	ldrh	w11, [x10, #34]
    4998:	ldr	w12, [x9, x11, lsl #2]
    499c:	add	w12, w12, #0x1
    49a0:	str	w12, [x9, x11, lsl #2]
    49a4:	ldrh	w11, [x10, #36]
    49a8:	ldr	w12, [x9, x11, lsl #2]
    49ac:	add	w12, w12, #0x1
    49b0:	str	w12, [x9, x11, lsl #2]
    49b4:	ldrh	w11, [x10, #38]
    49b8:	ldr	w12, [x9, x11, lsl #2]
    49bc:	add	w12, w12, #0x1
    49c0:	str	w12, [x9, x11, lsl #2]
    49c4:	ldrh	w11, [x10, #40]
    49c8:	ldr	w12, [x9, x11, lsl #2]
    49cc:	add	w12, w12, #0x1
    49d0:	str	w12, [x9, x11, lsl #2]
    49d4:	ldrh	w11, [x10, #42]
    49d8:	ldr	w12, [x9, x11, lsl #2]
    49dc:	add	w12, w12, #0x1
    49e0:	str	w12, [x9, x11, lsl #2]
    49e4:	ldrh	w11, [x10, #44]
    49e8:	ldr	w12, [x9, x11, lsl #2]
    49ec:	add	w12, w12, #0x1
    49f0:	str	w12, [x9, x11, lsl #2]
    49f4:	ldrh	w11, [x10, #46]
    49f8:	ldr	w12, [x9, x11, lsl #2]
    49fc:	add	w12, w12, #0x1
    4a00:	str	w12, [x9, x11, lsl #2]
    4a04:	ldrh	w11, [x10, #48]
    4a08:	ldr	w12, [x9, x11, lsl #2]
    4a0c:	add	w12, w12, #0x1
    4a10:	str	w12, [x9, x11, lsl #2]
    4a14:	ldrh	w11, [x10, #50]
    4a18:	ldr	w12, [x9, x11, lsl #2]
    4a1c:	add	w12, w12, #0x1
    4a20:	str	w12, [x9, x11, lsl #2]
    4a24:	ldrh	w11, [x10, #52]
    4a28:	ldr	w12, [x9, x11, lsl #2]
    4a2c:	add	w12, w12, #0x1
    4a30:	str	w12, [x9, x11, lsl #2]
    4a34:	ldrh	w11, [x10, #54]
    4a38:	ldr	w12, [x9, x11, lsl #2]
    4a3c:	add	w12, w12, #0x1
    4a40:	str	w12, [x9, x11, lsl #2]
    4a44:	ldrh	w11, [x10, #56]
    4a48:	ldr	w12, [x9, x11, lsl #2]
    4a4c:	add	w12, w12, #0x1
    4a50:	str	w12, [x9, x11, lsl #2]
    4a54:	ldrh	w11, [x10, #58]
    4a58:	ldr	w12, [x9, x11, lsl #2]
    4a5c:	add	w12, w12, #0x1
    4a60:	str	w12, [x9, x11, lsl #2]
    4a64:	ldrh	w11, [x10, #60]
    4a68:	ldr	w12, [x9, x11, lsl #2]
    4a6c:	add	w12, w12, #0x1
    4a70:	str	w12, [x9, x11, lsl #2]
    4a74:	ldrh	w11, [x10, #62]
    4a78:	ldr	w12, [x9, x11, lsl #2]
    4a7c:	add	w12, w12, #0x1
    4a80:	str	w12, [x9, x11, lsl #2]
    4a84:	ldrh	w11, [x10, #64]
    4a88:	ldr	w12, [x9, x11, lsl #2]
    4a8c:	add	w12, w12, #0x1
    4a90:	str	w12, [x9, x11, lsl #2]
    4a94:	ldrh	w11, [x10, #66]
    4a98:	ldr	w12, [x9, x11, lsl #2]
    4a9c:	add	w12, w12, #0x1
    4aa0:	str	w12, [x9, x11, lsl #2]
    4aa4:	ldrh	w11, [x10, #68]
    4aa8:	ldr	w12, [x9, x11, lsl #2]
    4aac:	add	w12, w12, #0x1
    4ab0:	str	w12, [x9, x11, lsl #2]
    4ab4:	ldrh	w11, [x10, #70]
    4ab8:	ldr	w12, [x9, x11, lsl #2]
    4abc:	add	w12, w12, #0x1
    4ac0:	str	w12, [x9, x11, lsl #2]
    4ac4:	ldrh	w11, [x10, #72]
    4ac8:	ldr	w12, [x9, x11, lsl #2]
    4acc:	add	w12, w12, #0x1
    4ad0:	str	w12, [x9, x11, lsl #2]
    4ad4:	ldrh	w11, [x10, #74]
    4ad8:	ldr	w12, [x9, x11, lsl #2]
    4adc:	add	w12, w12, #0x1
    4ae0:	str	w12, [x9, x11, lsl #2]
    4ae4:	ldrh	w11, [x10, #76]
    4ae8:	ldr	w12, [x9, x11, lsl #2]
    4aec:	add	w12, w12, #0x1
    4af0:	str	w12, [x9, x11, lsl #2]
    4af4:	ldrh	w11, [x10, #78]
    4af8:	ldr	w12, [x9, x11, lsl #2]
    4afc:	add	w12, w12, #0x1
    4b00:	str	w12, [x9, x11, lsl #2]
    4b04:	ldrh	w11, [x10, #80]
    4b08:	ldr	w12, [x9, x11, lsl #2]
    4b0c:	add	w12, w12, #0x1
    4b10:	str	w12, [x9, x11, lsl #2]
    4b14:	ldrh	w11, [x10, #82]
    4b18:	ldr	w12, [x9, x11, lsl #2]
    4b1c:	add	w12, w12, #0x1
    4b20:	str	w12, [x9, x11, lsl #2]
    4b24:	ldrh	w11, [x10, #84]
    4b28:	ldr	w12, [x9, x11, lsl #2]
    4b2c:	add	w12, w12, #0x1
    4b30:	str	w12, [x9, x11, lsl #2]
    4b34:	ldrh	w11, [x10, #86]
    4b38:	ldr	w12, [x9, x11, lsl #2]
    4b3c:	add	w12, w12, #0x1
    4b40:	str	w12, [x9, x11, lsl #2]
    4b44:	ldrh	w11, [x10, #88]
    4b48:	ldr	w12, [x9, x11, lsl #2]
    4b4c:	add	w12, w12, #0x1
    4b50:	str	w12, [x9, x11, lsl #2]
    4b54:	ldrh	w11, [x10, #90]
    4b58:	ldr	w12, [x9, x11, lsl #2]
    4b5c:	add	w12, w12, #0x1
    4b60:	str	w12, [x9, x11, lsl #2]
    4b64:	ldrh	w11, [x10, #92]
    4b68:	ldr	w12, [x9, x11, lsl #2]
    4b6c:	add	w12, w12, #0x1
    4b70:	str	w12, [x9, x11, lsl #2]
    4b74:	ldrh	w11, [x10, #94]
    4b78:	ldr	w12, [x9, x11, lsl #2]
    4b7c:	add	w12, w12, #0x1
    4b80:	str	w12, [x9, x11, lsl #2]
    4b84:	ldrh	w10, [x10, #96]
    4b88:	ldr	w11, [x9, x10, lsl #2]
    4b8c:	add	w11, w11, #0x1
    4b90:	str	w11, [x9, x10, lsl #2]
    4b94:	ldrh	w10, [x18, w26, sxtw #1]
    4b98:	ldr	w11, [x9, x10, lsl #2]
    4b9c:	add	w11, w11, #0x1
    4ba0:	str	w11, [x9, x10, lsl #2]
    4ba4:	b	4be4 <BZ2_compressBlock@@Base+0x14b0>
    4ba8:	cmp	w8, w23
    4bac:	mov	w14, #0x408                 	// #1032
    4bb0:	b.lt	4be4 <BZ2_compressBlock@@Base+0x14b0>  // b.tstop
    4bb4:	sxtw	x9, w8
    4bb8:	sub	x9, x9, x23
    4bbc:	add	x9, x9, #0x1
    4bc0:	add	x10, x18, x23, lsl #1
    4bc4:	ldrh	w12, [x10], #2
    4bc8:	madd	x13, x11, x14, x17
    4bcc:	subs	x9, x9, #0x1
    4bd0:	add	x12, x13, x12, lsl #2
    4bd4:	ldr	w13, [x12, x1]
    4bd8:	add	w13, w13, #0x1
    4bdc:	str	w13, [x12, x1]
    4be0:	b.ne	4bc4 <BZ2_compressBlock@@Base+0x1490>  // b.any
    4be4:	ldr	w28, [x17, #668]
    4be8:	add	w25, w8, #0x1
    4bec:	str	x0, [sp, #112]
    4bf0:	cmp	w25, w28
    4bf4:	b.lt	41cc <BZ2_compressBlock@@Base+0xa98>  // b.tstop
    4bf8:	b	4c04 <BZ2_compressBlock@@Base+0x14d0>
    4bfc:	str	xzr, [sp, #112]
    4c00:	mov	w20, wzr
    4c04:	ldr	w8, [x17, #656]
    4c08:	adrp	x28, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    4c0c:	add	x28, x28, #0x80e
    4c10:	cmp	w8, #0x3
    4c14:	b.ge	4c60 <BZ2_compressBlock@@Base+0x152c>  // b.tcont
    4c18:	ldp	x28, x20, [sp, #24]
    4c1c:	mov	x25, x22
    4c20:	mov	w3, #0x11                  	// #17
    4c24:	mov	x0, x27
    4c28:	mov	x1, x28
    4c2c:	mov	w2, w20
    4c30:	bl	14c0 <BZ2_hbMakeCodeLengths@plt>
    4c34:	subs	x25, x25, #0x1
    4c38:	add	x28, x28, #0x408
    4c3c:	add	x27, x27, #0x102
    4c40:	b.ne	4c20 <BZ2_compressBlock@@Base+0x14ec>  // b.any
    4c44:	ldr	w8, [sp, #52]
    4c48:	ldr	x28, [sp, #8]
    4c4c:	add	w8, w8, #0x1
    4c50:	cmp	w8, #0x4
    4c54:	str	w8, [sp, #52]
    4c58:	b.ne	4110 <BZ2_compressBlock@@Base+0x9dc>  // b.any
    4c5c:	b	4ccc <BZ2_compressBlock@@Base+0x1598>
    4c60:	mov	x27, x22
    4c64:	adrp	x22, 1d000 <BZ2_bzerror@@Base+0x10c24>
    4c68:	ldr	x22, [x22, #4016]
    4c6c:	ldr	w8, [sp, #52]
    4c70:	cmp	w20, #0x0
    4c74:	adrp	x1, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    4c78:	ldr	x0, [x22]
    4c7c:	add	w2, w8, #0x1
    4c80:	add	w8, w20, #0x7
    4c84:	csel	w8, w8, w20, lt  // lt = tstop
    4c88:	asr	w3, w8, #3
    4c8c:	add	x1, x1, #0x7e5
    4c90:	bl	1700 <fprintf@plt>
    4c94:	ldr	x1, [x22]
    4c98:	add	x25, sp, #0x98
    4c9c:	ldr	w2, [x25], #4
    4ca0:	mov	x0, x1
    4ca4:	mov	x1, x28
    4ca8:	bl	1700 <fprintf@plt>
    4cac:	ldr	x1, [x22]
    4cb0:	subs	x27, x27, #0x1
    4cb4:	b.ne	4c9c <BZ2_compressBlock@@Base+0x1568>  // b.any
    4cb8:	mov	w0, #0xa                   	// #10
    4cbc:	bl	14f0 <fputc@plt>
    4cc0:	ldr	x22, [sp, #104]
    4cc4:	ldr	x27, [sp, #88]
    4cc8:	b	4c18 <BZ2_compressBlock@@Base+0x14e4>
    4ccc:	ldr	x20, [sp, #112]
    4cd0:	mov	w8, #0x4653                	// #18003
    4cd4:	cmp	w20, w8
    4cd8:	b.lt	4ce4 <BZ2_compressBlock@@Base+0x15b0>  // b.tstop
    4cdc:	mov	w0, #0xbbb                 	// #3003
    4ce0:	bl	16f0 <BZ2_bz__AssertH__fail@plt>
    4ce4:	ldr	x25, [sp, #40]
    4ce8:	mov	x8, xzr
    4cec:	add	x9, sp, #0x7c
    4cf0:	strb	w8, [x9, x8]
    4cf4:	add	x8, x8, #0x1
    4cf8:	cmp	x22, x8
    4cfc:	b.ne	4cf0 <BZ2_compressBlock@@Base+0x15bc>  // b.any
    4d00:	ldr	x17, [sp, #96]
    4d04:	ldr	x4, [sp, #64]
    4d08:	cmp	w20, #0x1
    4d0c:	b.lt	4d74 <BZ2_compressBlock@@Base+0x1640>  // b.tstop
    4d10:	ldrb	w11, [sp, #124]
    4d14:	add	x10, sp, #0x7c
    4d18:	mov	x8, xzr
    4d1c:	mov	w9, w20
    4d20:	orr	x10, x10, #0x1
    4d24:	mov	w12, #0x4cfa                	// #19706
    4d28:	add	x13, x17, x8
    4d2c:	ldrb	w14, [x13, #1704]
    4d30:	cmp	w14, w11, uxtb
    4d34:	b.ne	4d40 <BZ2_compressBlock@@Base+0x160c>  // b.any
    4d38:	mov	w15, wzr
    4d3c:	b	4d60 <BZ2_compressBlock@@Base+0x162c>
    4d40:	mov	x15, xzr
    4d44:	ldrb	w16, [x10, x15]
    4d48:	strb	w11, [x10, x15]
    4d4c:	add	x15, x15, #0x1
    4d50:	cmp	w14, w16
    4d54:	mov	w11, w16
    4d58:	b.ne	4d44 <BZ2_compressBlock@@Base+0x1610>  // b.any
    4d5c:	mov	w11, w14
    4d60:	add	x8, x8, #0x1
    4d64:	cmp	x8, x9
    4d68:	strb	w15, [x13, x12]
    4d6c:	b.ne	4d28 <BZ2_compressBlock@@Base+0x15f4>  // b.any
    4d70:	strb	w11, [sp, #124]
    4d74:	mov	w8, #0x934c                	// #37708
    4d78:	mov	x20, xzr
    4d7c:	mov	w28, #0x934c                	// #37708
    4d80:	add	x26, x17, x8
    4d84:	mov	w27, #0x102                 	// #258
    4d88:	cmn	w4, #0x1
    4d8c:	b.lt	4de0 <BZ2_compressBlock@@Base+0x16ac>  // b.tstop
    4d90:	mov	x8, xzr
    4d94:	mov	w22, wzr
    4d98:	mov	w23, #0x20                  	// #32
    4d9c:	ldrb	w9, [x26, x8]
    4da0:	add	x8, x8, #0x1
    4da4:	cmp	w22, w9
    4da8:	csel	w22, w9, w22, cc  // cc = lo, ul, last
    4dac:	cmp	w23, w9
    4db0:	csel	w23, w9, w23, gt
    4db4:	cmp	x8, x25
    4db8:	b.lt	4d9c <BZ2_compressBlock@@Base+0x1668>  // b.tstop
    4dbc:	cmp	w22, #0x12
    4dc0:	b.lt	4dcc <BZ2_compressBlock@@Base+0x1698>  // b.tstop
    4dc4:	mov	w0, #0xbbc                 	// #3004
    4dc8:	bl	16f0 <BZ2_bz__AssertH__fail@plt>
    4dcc:	cmp	w23, #0x0
    4dd0:	b.gt	4de8 <BZ2_compressBlock@@Base+0x16b4>
    4dd4:	mov	w0, #0xbbd                 	// #3005
    4dd8:	bl	16f0 <BZ2_bz__AssertH__fail@plt>
    4ddc:	b	4de8 <BZ2_compressBlock@@Base+0x16b4>
    4de0:	mov	w22, wzr
    4de4:	mov	w23, #0x20                  	// #32
    4de8:	ldr	x9, [sp, #96]
    4dec:	mov	w8, #0x408                 	// #1032
    4df0:	mov	w10, #0x9958                	// #39256
    4df4:	mov	w2, w23
    4df8:	madd	x8, x20, x8, x9
    4dfc:	madd	x9, x20, x27, x9
    4e00:	add	x0, x8, x10
    4e04:	add	x1, x9, x28
    4e08:	mov	w3, w22
    4e0c:	ldr	x4, [sp, #32]
    4e10:	bl	1690 <BZ2_hbAssignCodes@plt>
    4e14:	ldr	x8, [sp, #104]
    4e18:	ldr	x4, [sp, #64]
    4e1c:	add	x20, x20, #0x1
    4e20:	add	x26, x26, #0x102
    4e24:	cmp	x20, x8
    4e28:	b.ne	4d88 <BZ2_compressBlock@@Base+0x1654>  // b.any
    4e2c:	ldr	x0, [sp, #96]
    4e30:	ldr	x20, [sp, #112]
    4e34:	mov	x8, xzr
    4e38:	add	x10, sp, #0x7c
    4e3c:	add	x9, x0, #0x80
    4e40:	mov	w11, #0x1                   	// #1
    4e44:	strb	wzr, [x10, x8]
    4e48:	ldr	q0, [x9, x8, lsl #4]
    4e4c:	cmeq	v0.16b, v0.16b, #0
    4e50:	mvn	v0.16b, v0.16b
    4e54:	umov	w12, v0.b[0]
    4e58:	tbnz	w12, #0, 4ed4 <BZ2_compressBlock@@Base+0x17a0>
    4e5c:	umov	w12, v0.b[1]
    4e60:	tbnz	w12, #0, 4ed4 <BZ2_compressBlock@@Base+0x17a0>
    4e64:	umov	w12, v0.b[2]
    4e68:	tbnz	w12, #0, 4ed4 <BZ2_compressBlock@@Base+0x17a0>
    4e6c:	umov	w12, v0.b[3]
    4e70:	tbnz	w12, #0, 4ed4 <BZ2_compressBlock@@Base+0x17a0>
    4e74:	umov	w12, v0.b[4]
    4e78:	tbnz	w12, #0, 4ed4 <BZ2_compressBlock@@Base+0x17a0>
    4e7c:	umov	w12, v0.b[5]
    4e80:	tbnz	w12, #0, 4ed4 <BZ2_compressBlock@@Base+0x17a0>
    4e84:	umov	w12, v0.b[6]
    4e88:	tbnz	w12, #0, 4ed4 <BZ2_compressBlock@@Base+0x17a0>
    4e8c:	umov	w12, v0.b[7]
    4e90:	tbnz	w12, #0, 4ed4 <BZ2_compressBlock@@Base+0x17a0>
    4e94:	umov	w12, v0.b[8]
    4e98:	tbnz	w12, #0, 4ed4 <BZ2_compressBlock@@Base+0x17a0>
    4e9c:	umov	w12, v0.b[9]
    4ea0:	tbnz	w12, #0, 4ed4 <BZ2_compressBlock@@Base+0x17a0>
    4ea4:	umov	w12, v0.b[10]
    4ea8:	tbnz	w12, #0, 4ed4 <BZ2_compressBlock@@Base+0x17a0>
    4eac:	umov	w12, v0.b[11]
    4eb0:	tbnz	w12, #0, 4ed4 <BZ2_compressBlock@@Base+0x17a0>
    4eb4:	umov	w12, v0.b[12]
    4eb8:	tbnz	w12, #0, 4ed4 <BZ2_compressBlock@@Base+0x17a0>
    4ebc:	umov	w12, v0.b[13]
    4ec0:	tbnz	w12, #0, 4ed4 <BZ2_compressBlock@@Base+0x17a0>
    4ec4:	umov	w12, v0.b[14]
    4ec8:	tbnz	w12, #0, 4ed4 <BZ2_compressBlock@@Base+0x17a0>
    4ecc:	umov	w12, v0.b[15]
    4ed0:	tbz	w12, #0, 4ed8 <BZ2_compressBlock@@Base+0x17a4>
    4ed4:	strb	w11, [x10, x8]
    4ed8:	add	x8, x8, #0x1
    4edc:	cmp	x8, #0x10
    4ee0:	b.ne	4e44 <BZ2_compressBlock@@Base+0x1710>  // b.any
    4ee4:	mov	x22, x0
    4ee8:	ldr	w8, [x22, #116]!
    4eec:	mov	x12, xzr
    4ef0:	add	x13, sp, #0x7c
    4ef4:	mov	w14, #0x80000000            	// #-2147483648
    4ef8:	ldr	w11, [x22, #528]
    4efc:	ldr	w10, [x22, #524]
    4f00:	mov	w9, w8
    4f04:	ldrb	w15, [x13, x12]
    4f08:	cbz	w15, 4f58 <BZ2_compressBlock@@Base+0x1824>
    4f0c:	cmp	w11, #0x8
    4f10:	b.lt	4f4c <BZ2_compressBlock@@Base+0x1818>  // b.tstop
    4f14:	ldr	x11, [x19]
    4f18:	lsr	w10, w10, #24
    4f1c:	strb	w10, [x11, w9, sxtw]
    4f20:	ldr	w9, [x22]
    4f24:	add	w9, w9, #0x1
    4f28:	str	w9, [x22]
    4f2c:	ldr	w10, [x24]
    4f30:	lsl	w10, w10, #8
    4f34:	str	w10, [x24]
    4f38:	ldr	w15, [x21]
    4f3c:	sub	w11, w15, #0x8
    4f40:	cmp	w15, #0xf
    4f44:	str	w11, [x21]
    4f48:	b.gt	4f14 <BZ2_compressBlock@@Base+0x17e0>
    4f4c:	lsr	w15, w14, w11
    4f50:	orr	w10, w15, w10
    4f54:	b	4f98 <BZ2_compressBlock@@Base+0x1864>
    4f58:	cmp	w11, #0x8
    4f5c:	b.lt	4f98 <BZ2_compressBlock@@Base+0x1864>  // b.tstop
    4f60:	ldr	x11, [x19]
    4f64:	lsr	w10, w10, #24
    4f68:	strb	w10, [x11, w9, sxtw]
    4f6c:	ldr	w9, [x22]
    4f70:	add	w9, w9, #0x1
    4f74:	str	w9, [x22]
    4f78:	ldr	w10, [x24]
    4f7c:	lsl	w10, w10, #8
    4f80:	str	w10, [x24]
    4f84:	ldr	w15, [x21]
    4f88:	sub	w11, w15, #0x8
    4f8c:	cmp	w15, #0xf
    4f90:	str	w11, [x21]
    4f94:	b.gt	4f60 <BZ2_compressBlock@@Base+0x182c>
    4f98:	add	x12, x12, #0x1
    4f9c:	add	w11, w11, #0x1
    4fa0:	cmp	x12, #0x10
    4fa4:	str	w10, [x24]
    4fa8:	str	w11, [x21]
    4fac:	b.ne	4f04 <BZ2_compressBlock@@Base+0x17d0>  // b.any
    4fb0:	mov	x12, xzr
    4fb4:	add	x13, sp, #0x7c
    4fb8:	mov	w14, #0x80000000            	// #-2147483648
    4fbc:	ldrb	w15, [x13, x12]
    4fc0:	cbz	w15, 5080 <BZ2_compressBlock@@Base+0x194c>
    4fc4:	mov	x15, xzr
    4fc8:	lsl	x16, x12, #4
    4fcc:	add	x17, x15, x16
    4fd0:	add	x17, x0, x17
    4fd4:	ldrb	w17, [x17, #128]
    4fd8:	cbz	w17, 5028 <BZ2_compressBlock@@Base+0x18f4>
    4fdc:	cmp	w11, #0x8
    4fe0:	b.lt	501c <BZ2_compressBlock@@Base+0x18e8>  // b.tstop
    4fe4:	ldr	x11, [x19]
    4fe8:	lsr	w10, w10, #24
    4fec:	strb	w10, [x11, w9, sxtw]
    4ff0:	ldr	w9, [x22]
    4ff4:	add	w9, w9, #0x1
    4ff8:	str	w9, [x22]
    4ffc:	ldr	w10, [x24]
    5000:	lsl	w10, w10, #8
    5004:	str	w10, [x24]
    5008:	ldr	w17, [x21]
    500c:	sub	w11, w17, #0x8
    5010:	cmp	w17, #0xf
    5014:	str	w11, [x21]
    5018:	b.gt	4fe4 <BZ2_compressBlock@@Base+0x18b0>
    501c:	lsr	w17, w14, w11
    5020:	orr	w10, w17, w10
    5024:	b	5068 <BZ2_compressBlock@@Base+0x1934>
    5028:	cmp	w11, #0x8
    502c:	b.lt	5068 <BZ2_compressBlock@@Base+0x1934>  // b.tstop
    5030:	ldr	x11, [x19]
    5034:	lsr	w10, w10, #24
    5038:	strb	w10, [x11, w9, sxtw]
    503c:	ldr	w9, [x22]
    5040:	add	w9, w9, #0x1
    5044:	str	w9, [x22]
    5048:	ldr	w10, [x24]
    504c:	lsl	w10, w10, #8
    5050:	str	w10, [x24]
    5054:	ldr	w17, [x21]
    5058:	sub	w11, w17, #0x8
    505c:	cmp	w17, #0xf
    5060:	str	w11, [x21]
    5064:	b.gt	5030 <BZ2_compressBlock@@Base+0x18fc>
    5068:	add	x15, x15, #0x1
    506c:	add	w11, w11, #0x1
    5070:	cmp	x15, #0x10
    5074:	str	w10, [x24]
    5078:	str	w11, [x21]
    507c:	b.ne	4fcc <BZ2_compressBlock@@Base+0x1898>  // b.any
    5080:	add	x12, x12, #0x1
    5084:	cmp	x12, #0x10
    5088:	b.ne	4fbc <BZ2_compressBlock@@Base+0x1888>  // b.any
    508c:	ldr	w12, [x0, #656]
    5090:	cmp	w12, #0x3
    5094:	b.ge	70a4 <BZ2_compressBlock@@Base+0x3970>  // b.tcont
    5098:	mov	w8, w9
    509c:	cmp	w11, #0x8
    50a0:	b.lt	50dc <BZ2_compressBlock@@Base+0x19a8>  // b.tstop
    50a4:	ldr	x11, [x19]
    50a8:	lsr	w10, w10, #24
    50ac:	strb	w10, [x11, w8, sxtw]
    50b0:	ldr	w8, [x22]
    50b4:	add	w8, w8, #0x1
    50b8:	str	w8, [x22]
    50bc:	ldr	w10, [x24]
    50c0:	lsl	w10, w10, #8
    50c4:	str	w10, [x24]
    50c8:	ldr	w12, [x21]
    50cc:	sub	w11, w12, #0x8
    50d0:	cmp	w12, #0xf
    50d4:	str	w11, [x21]
    50d8:	b.gt	50a4 <BZ2_compressBlock@@Base+0x1970>
    50dc:	mov	w13, #0x1d                  	// #29
    50e0:	add	w12, w11, #0x3
    50e4:	cmp	w11, #0x5
    50e8:	sub	w11, w13, w11
    50ec:	ldr	x13, [sp, #104]
    50f0:	lsl	w11, w13, w11
    50f4:	orr	w10, w11, w10
    50f8:	str	w10, [x24]
    50fc:	str	w12, [x21]
    5100:	b.lt	513c <BZ2_compressBlock@@Base+0x1a08>  // b.tstop
    5104:	ldr	x11, [x19]
    5108:	lsr	w10, w10, #24
    510c:	strb	w10, [x11, w8, sxtw]
    5110:	ldr	w8, [x22]
    5114:	add	w8, w8, #0x1
    5118:	str	w8, [x22]
    511c:	ldr	w10, [x24]
    5120:	lsl	w10, w10, #8
    5124:	str	w10, [x24]
    5128:	ldr	w11, [x21]
    512c:	sub	w12, w11, #0x8
    5130:	cmp	w11, #0xf
    5134:	str	w12, [x21]
    5138:	b.gt	5104 <BZ2_compressBlock@@Base+0x19d0>
    513c:	mov	w13, #0x11                  	// #17
    5140:	add	w11, w12, #0xf
    5144:	sub	w12, w13, w12
    5148:	lsl	w12, w20, w12
    514c:	cmp	w20, #0x1
    5150:	orr	w10, w12, w10
    5154:	str	w10, [x24]
    5158:	str	w11, [x21]
    515c:	b.lt	5240 <BZ2_compressBlock@@Base+0x1b0c>  // b.tstop
    5160:	mov	x12, xzr
    5164:	mov	w13, w20
    5168:	mov	w14, #0x4cfa                	// #19706
    516c:	mov	w15, #0x80000000            	// #-2147483648
    5170:	add	x16, x0, x12
    5174:	add	x16, x16, x14
    5178:	ldrb	w17, [x16]
    517c:	cbz	w17, 51e8 <BZ2_compressBlock@@Base+0x1ab4>
    5180:	mov	w17, wzr
    5184:	cmp	w11, #0x8
    5188:	b.lt	51c4 <BZ2_compressBlock@@Base+0x1a90>  // b.tstop
    518c:	ldr	x11, [x19]
    5190:	lsr	w10, w10, #24
    5194:	strb	w10, [x11, w8, sxtw]
    5198:	ldr	w8, [x22]
    519c:	add	w8, w8, #0x1
    51a0:	str	w8, [x22]
    51a4:	ldr	w10, [x24]
    51a8:	lsl	w10, w10, #8
    51ac:	str	w10, [x24]
    51b0:	ldr	w18, [x21]
    51b4:	sub	w11, w18, #0x8
    51b8:	cmp	w18, #0xf
    51bc:	str	w11, [x21]
    51c0:	b.gt	518c <BZ2_compressBlock@@Base+0x1a58>
    51c4:	lsr	w18, w15, w11
    51c8:	add	w11, w11, #0x1
    51cc:	orr	w10, w18, w10
    51d0:	str	w10, [x24]
    51d4:	str	w11, [x21]
    51d8:	ldrb	w18, [x16]
    51dc:	add	w17, w17, #0x1
    51e0:	cmp	w17, w18
    51e4:	b.cc	5184 <BZ2_compressBlock@@Base+0x1a50>  // b.lo, b.ul, b.last
    51e8:	cmp	w11, #0x8
    51ec:	b.lt	5228 <BZ2_compressBlock@@Base+0x1af4>  // b.tstop
    51f0:	ldr	x11, [x19]
    51f4:	lsr	w10, w10, #24
    51f8:	strb	w10, [x11, w8, sxtw]
    51fc:	ldr	w8, [x22]
    5200:	add	w8, w8, #0x1
    5204:	str	w8, [x22]
    5208:	ldr	w10, [x24]
    520c:	lsl	w10, w10, #8
    5210:	str	w10, [x24]
    5214:	ldr	w16, [x21]
    5218:	sub	w11, w16, #0x8
    521c:	cmp	w16, #0xf
    5220:	str	w11, [x21]
    5224:	b.gt	51f0 <BZ2_compressBlock@@Base+0x1abc>
    5228:	add	x12, x12, #0x1
    522c:	add	w11, w11, #0x1
    5230:	cmp	x12, x13
    5234:	str	w10, [x24]
    5238:	str	w11, [x21]
    523c:	b.ne	5170 <BZ2_compressBlock@@Base+0x1a3c>  // b.any
    5240:	ldr	w12, [x0, #656]
    5244:	cmp	w12, #0x3
    5248:	b.ge	70d8 <BZ2_compressBlock@@Base+0x39a4>  // b.tcont
    524c:	mov	x9, xzr
    5250:	mov	w12, #0x102                 	// #258
    5254:	mov	w13, #0x934c                	// #37708
    5258:	mov	w14, #0x1b                  	// #27
    525c:	mov	w15, #0x1e                  	// #30
    5260:	mov	w16, #0x2                   	// #2
    5264:	mov	w17, #0x3                   	// #3
    5268:	mov	w23, w8
    526c:	madd	x18, x9, x12, x0
    5270:	ldrb	w18, [x18, x13]
    5274:	cmp	w11, #0x8
    5278:	b.lt	52b4 <BZ2_compressBlock@@Base+0x1b80>  // b.tstop
    527c:	ldr	x11, [x19]
    5280:	lsr	w10, w10, #24
    5284:	strb	w10, [x11, w23, sxtw]
    5288:	ldr	w10, [x22]
    528c:	add	w23, w10, #0x1
    5290:	str	w23, [x22]
    5294:	ldr	w10, [x24]
    5298:	lsl	w10, w10, #8
    529c:	str	w10, [x24]
    52a0:	ldr	w1, [x21]
    52a4:	sub	w11, w1, #0x8
    52a8:	cmp	w1, #0xf
    52ac:	str	w11, [x21]
    52b0:	b.gt	527c <BZ2_compressBlock@@Base+0x1b48>
    52b4:	sub	w1, w14, w11
    52b8:	lsl	w1, w18, w1
    52bc:	add	w11, w11, #0x5
    52c0:	cmn	w4, #0x1
    52c4:	orr	w10, w1, w10
    52c8:	str	w10, [x24]
    52cc:	str	w11, [x21]
    52d0:	b.lt	5414 <BZ2_compressBlock@@Base+0x1ce0>  // b.tstop
    52d4:	mov	x3, xzr
    52d8:	madd	x1, x9, x12, x0
    52dc:	add	x1, x1, x3
    52e0:	add	x1, x1, x13
    52e4:	ldrb	w2, [x1]
    52e8:	cmp	w18, w2
    52ec:	b.ge	53b4 <BZ2_compressBlock@@Base+0x1c80>  // b.tcont
    52f0:	cmp	w11, #0x8
    52f4:	b.lt	5330 <BZ2_compressBlock@@Base+0x1bfc>  // b.tstop
    52f8:	ldr	x11, [x19]
    52fc:	lsr	w10, w10, #24
    5300:	strb	w10, [x11, w23, sxtw]
    5304:	ldr	w10, [x22]
    5308:	add	w23, w10, #0x1
    530c:	str	w23, [x22]
    5310:	ldr	w10, [x24]
    5314:	lsl	w10, w10, #8
    5318:	str	w10, [x24]
    531c:	ldr	w2, [x21]
    5320:	sub	w11, w2, #0x8
    5324:	cmp	w2, #0xf
    5328:	str	w11, [x21]
    532c:	b.gt	52f8 <BZ2_compressBlock@@Base+0x1bc4>
    5330:	sub	w2, w15, w11
    5334:	lsl	w2, w16, w2
    5338:	add	w11, w11, #0x2
    533c:	orr	w10, w2, w10
    5340:	str	w10, [x24]
    5344:	str	w11, [x21]
    5348:	ldrb	w2, [x1]
    534c:	add	w18, w18, #0x1
    5350:	b	52e8 <BZ2_compressBlock@@Base+0x1bb4>
    5354:	cmp	w11, #0x8
    5358:	b.lt	5394 <BZ2_compressBlock@@Base+0x1c60>  // b.tstop
    535c:	ldr	x11, [x19]
    5360:	lsr	w10, w10, #24
    5364:	strb	w10, [x11, w23, sxtw]
    5368:	ldr	w10, [x22]
    536c:	add	w23, w10, #0x1
    5370:	str	w23, [x22]
    5374:	ldr	w10, [x24]
    5378:	lsl	w10, w10, #8
    537c:	str	w10, [x24]
    5380:	ldr	w2, [x21]
    5384:	sub	w11, w2, #0x8
    5388:	cmp	w2, #0xf
    538c:	str	w11, [x21]
    5390:	b.gt	535c <BZ2_compressBlock@@Base+0x1c28>
    5394:	sub	w2, w15, w11
    5398:	lsl	w2, w17, w2
    539c:	add	w11, w11, #0x2
    53a0:	orr	w10, w2, w10
    53a4:	str	w10, [x24]
    53a8:	str	w11, [x21]
    53ac:	ldrb	w2, [x1]
    53b0:	sub	w18, w18, #0x1
    53b4:	cmp	w18, w2
    53b8:	b.gt	5354 <BZ2_compressBlock@@Base+0x1c20>
    53bc:	cmp	w11, #0x8
    53c0:	b.lt	53fc <BZ2_compressBlock@@Base+0x1cc8>  // b.tstop
    53c4:	ldr	x11, [x19]
    53c8:	lsr	w10, w10, #24
    53cc:	strb	w10, [x11, w23, sxtw]
    53d0:	ldr	w10, [x22]
    53d4:	add	w23, w10, #0x1
    53d8:	str	w23, [x22]
    53dc:	ldr	w10, [x24]
    53e0:	lsl	w10, w10, #8
    53e4:	str	w10, [x24]
    53e8:	ldr	w1, [x21]
    53ec:	sub	w11, w1, #0x8
    53f0:	cmp	w1, #0xf
    53f4:	str	w11, [x21]
    53f8:	b.gt	53c4 <BZ2_compressBlock@@Base+0x1c90>
    53fc:	add	x3, x3, #0x1
    5400:	add	w11, w11, #0x1
    5404:	cmp	x3, x25
    5408:	str	w10, [x24]
    540c:	str	w11, [x21]
    5410:	b.lt	52d8 <BZ2_compressBlock@@Base+0x1ba4>  // b.tstop
    5414:	ldr	x18, [sp, #104]
    5418:	add	x9, x9, #0x1
    541c:	cmp	x9, x18
    5420:	b.ne	526c <BZ2_compressBlock@@Base+0x1b38>  // b.any
    5424:	ldr	w9, [x0, #656]
    5428:	cmp	w9, #0x3
    542c:	b.ge	710c <BZ2_compressBlock@@Base+0x39d8>  // b.tcont
    5430:	ldr	w8, [x0, #668]
    5434:	ldr	x16, [sp, #80]
    5438:	cmp	w8, #0x1
    543c:	b.lt	6d58 <BZ2_compressBlock@@Base+0x3624>  // b.tstop
    5440:	ldr	x25, [sp, #104]
    5444:	mov	x26, xzr
    5448:	mov	w9, wzr
    544c:	mov	w18, #0x102                 	// #258
    5450:	mov	w1, #0x934c                	// #37708
    5454:	mov	w2, #0x408                 	// #1032
    5458:	mov	w4, #0x9958                	// #39256
    545c:	add	x20, x0, x26
    5460:	sxtw	x28, w9
    5464:	ldrb	w9, [x20, #1704]
    5468:	add	x5, x28, #0x31
    546c:	sub	w10, w8, #0x1
    5470:	cmp	w5, w8
    5474:	csel	w27, w5, w10, lt  // lt = tstop
    5478:	cmp	w25, w9
    547c:	b.hi	54ac <BZ2_compressBlock@@Base+0x1d78>  // b.pmore
    5480:	mov	w0, #0xbbe                 	// #3006
    5484:	str	x28, [sp, #88]
    5488:	mov	x28, x5
    548c:	bl	16f0 <BZ2_bz__AssertH__fail@plt>
    5490:	mov	x5, x28
    5494:	ldp	x16, x28, [sp, #80]
    5498:	ldr	x0, [sp, #96]
    549c:	mov	w4, #0x9958                	// #39256
    54a0:	mov	w2, #0x408                 	// #1032
    54a4:	mov	w1, #0x934c                	// #37708
    54a8:	mov	w18, #0x102                 	// #258
    54ac:	cmp	w25, #0x6
    54b0:	add	x8, x20, #0x6a8
    54b4:	b.ne	6ca4 <BZ2_compressBlock@@Base+0x3570>  // b.any
    54b8:	sub	w9, w27, w28
    54bc:	cmp	w9, #0x31
    54c0:	b.ne	6ca4 <BZ2_compressBlock@@Base+0x3570>  // b.any
    54c4:	ldrb	w8, [x8]
    54c8:	ldrh	w9, [x16, x28, lsl #1]
    54cc:	ldr	w12, [x0, #644]
    54d0:	madd	x10, x8, x18, x0
    54d4:	madd	x11, x8, x2, x0
    54d8:	add	x10, x10, x9
    54dc:	add	x11, x11, x9, lsl #2
    54e0:	ldrb	w9, [x10, x1]
    54e4:	ldr	w10, [x11, x4]
    54e8:	ldr	w11, [x0, #640]
    54ec:	cmp	w12, #0x8
    54f0:	b.lt	5530 <BZ2_compressBlock@@Base+0x1dfc>  // b.tstop
    54f4:	ldr	w13, [x22]
    54f8:	ldr	x12, [x19]
    54fc:	lsr	w11, w11, #24
    5500:	strb	w11, [x12, w13, sxtw]
    5504:	ldr	w11, [x22]
    5508:	add	w13, w11, #0x1
    550c:	str	w13, [x22]
    5510:	ldr	w11, [x24]
    5514:	lsl	w11, w11, #8
    5518:	str	w11, [x24]
    551c:	ldr	w14, [x21]
    5520:	sub	w12, w14, #0x8
    5524:	cmp	w14, #0xf
    5528:	str	w12, [x21]
    552c:	b.gt	54f8 <BZ2_compressBlock@@Base+0x1dc4>
    5530:	add	w13, w12, w9
    5534:	neg	w12, w13
    5538:	lsl	w10, w10, w12
    553c:	orr	w10, w10, w11
    5540:	add	x9, x16, x28, lsl #1
    5544:	str	w13, [x0, #644]
    5548:	str	w10, [x0, #640]
    554c:	ldrh	w11, [x9, #2]
    5550:	madd	x12, x8, x18, x0
    5554:	madd	x14, x8, x2, x0
    5558:	cmp	w13, #0x8
    555c:	add	x12, x12, x11
    5560:	add	x11, x14, x11, lsl #2
    5564:	ldrb	w12, [x12, x1]
    5568:	ldr	w11, [x11, x4]
    556c:	b.lt	55ac <BZ2_compressBlock@@Base+0x1e78>  // b.tstop
    5570:	ldr	w14, [x22]
    5574:	ldr	x13, [x19]
    5578:	lsr	w10, w10, #24
    557c:	strb	w10, [x13, w14, sxtw]
    5580:	ldr	w10, [x22]
    5584:	add	w14, w10, #0x1
    5588:	str	w14, [x22]
    558c:	ldr	w10, [x24]
    5590:	lsl	w10, w10, #8
    5594:	str	w10, [x24]
    5598:	ldr	w15, [x21]
    559c:	sub	w13, w15, #0x8
    55a0:	cmp	w15, #0xf
    55a4:	str	w13, [x21]
    55a8:	b.gt	5574 <BZ2_compressBlock@@Base+0x1e40>
    55ac:	add	w12, w13, w12
    55b0:	neg	w13, w12
    55b4:	lsl	w11, w11, w13
    55b8:	orr	w10, w11, w10
    55bc:	str	w12, [x0, #644]
    55c0:	str	w10, [x0, #640]
    55c4:	ldrh	w9, [x9, #4]
    55c8:	madd	x11, x8, x18, x0
    55cc:	madd	x13, x8, x2, x0
    55d0:	cmp	w12, #0x8
    55d4:	add	x11, x11, x9
    55d8:	add	x13, x13, x9, lsl #2
    55dc:	ldrb	w9, [x11, x1]
    55e0:	ldr	w11, [x13, x4]
    55e4:	b.lt	5624 <BZ2_compressBlock@@Base+0x1ef0>  // b.tstop
    55e8:	ldr	w13, [x22]
    55ec:	ldr	x12, [x19]
    55f0:	lsr	w10, w10, #24
    55f4:	strb	w10, [x12, w13, sxtw]
    55f8:	ldr	w10, [x22]
    55fc:	add	w13, w10, #0x1
    5600:	str	w13, [x22]
    5604:	ldr	w10, [x24]
    5608:	lsl	w10, w10, #8
    560c:	str	w10, [x24]
    5610:	ldr	w14, [x21]
    5614:	sub	w12, w14, #0x8
    5618:	cmp	w14, #0xf
    561c:	str	w12, [x21]
    5620:	b.gt	55ec <BZ2_compressBlock@@Base+0x1eb8>
    5624:	add	w13, w12, w9
    5628:	neg	w12, w13
    562c:	lsl	w11, w11, w12
    5630:	orr	w10, w11, w10
    5634:	add	x9, x16, x28, lsl #1
    5638:	str	w13, [x0, #644]
    563c:	str	w10, [x0, #640]
    5640:	ldrh	w11, [x9, #6]
    5644:	madd	x12, x8, x18, x0
    5648:	madd	x14, x8, x2, x0
    564c:	cmp	w13, #0x8
    5650:	add	x12, x12, x11
    5654:	add	x11, x14, x11, lsl #2
    5658:	ldrb	w12, [x12, x1]
    565c:	ldr	w11, [x11, x4]
    5660:	b.lt	56a0 <BZ2_compressBlock@@Base+0x1f6c>  // b.tstop
    5664:	ldr	w14, [x22]
    5668:	ldr	x13, [x19]
    566c:	lsr	w10, w10, #24
    5670:	strb	w10, [x13, w14, sxtw]
    5674:	ldr	w10, [x22]
    5678:	add	w14, w10, #0x1
    567c:	str	w14, [x22]
    5680:	ldr	w10, [x24]
    5684:	lsl	w10, w10, #8
    5688:	str	w10, [x24]
    568c:	ldr	w15, [x21]
    5690:	sub	w13, w15, #0x8
    5694:	cmp	w15, #0xf
    5698:	str	w13, [x21]
    569c:	b.gt	5668 <BZ2_compressBlock@@Base+0x1f34>
    56a0:	add	w12, w13, w12
    56a4:	neg	w13, w12
    56a8:	lsl	w11, w11, w13
    56ac:	orr	w10, w11, w10
    56b0:	str	w12, [x0, #644]
    56b4:	str	w10, [x0, #640]
    56b8:	ldrh	w9, [x9, #8]
    56bc:	madd	x11, x8, x18, x0
    56c0:	madd	x13, x8, x2, x0
    56c4:	cmp	w12, #0x8
    56c8:	add	x11, x11, x9
    56cc:	add	x13, x13, x9, lsl #2
    56d0:	ldrb	w9, [x11, x1]
    56d4:	ldr	w11, [x13, x4]
    56d8:	b.lt	5718 <BZ2_compressBlock@@Base+0x1fe4>  // b.tstop
    56dc:	ldr	w13, [x22]
    56e0:	ldr	x12, [x19]
    56e4:	lsr	w10, w10, #24
    56e8:	strb	w10, [x12, w13, sxtw]
    56ec:	ldr	w10, [x22]
    56f0:	add	w13, w10, #0x1
    56f4:	str	w13, [x22]
    56f8:	ldr	w10, [x24]
    56fc:	lsl	w10, w10, #8
    5700:	str	w10, [x24]
    5704:	ldr	w14, [x21]
    5708:	sub	w12, w14, #0x8
    570c:	cmp	w14, #0xf
    5710:	str	w12, [x21]
    5714:	b.gt	56e0 <BZ2_compressBlock@@Base+0x1fac>
    5718:	add	w13, w12, w9
    571c:	neg	w12, w13
    5720:	lsl	w11, w11, w12
    5724:	orr	w10, w11, w10
    5728:	add	x9, x16, x28, lsl #1
    572c:	str	w13, [x0, #644]
    5730:	str	w10, [x0, #640]
    5734:	ldrh	w11, [x9, #10]
    5738:	madd	x12, x8, x18, x0
    573c:	madd	x14, x8, x2, x0
    5740:	cmp	w13, #0x8
    5744:	add	x12, x12, x11
    5748:	add	x11, x14, x11, lsl #2
    574c:	ldrb	w12, [x12, x1]
    5750:	ldr	w11, [x11, x4]
    5754:	b.lt	5794 <BZ2_compressBlock@@Base+0x2060>  // b.tstop
    5758:	ldr	w14, [x22]
    575c:	ldr	x13, [x19]
    5760:	lsr	w10, w10, #24
    5764:	strb	w10, [x13, w14, sxtw]
    5768:	ldr	w10, [x22]
    576c:	add	w14, w10, #0x1
    5770:	str	w14, [x22]
    5774:	ldr	w10, [x24]
    5778:	lsl	w10, w10, #8
    577c:	str	w10, [x24]
    5780:	ldr	w15, [x21]
    5784:	sub	w13, w15, #0x8
    5788:	cmp	w15, #0xf
    578c:	str	w13, [x21]
    5790:	b.gt	575c <BZ2_compressBlock@@Base+0x2028>
    5794:	add	w12, w13, w12
    5798:	neg	w13, w12
    579c:	lsl	w11, w11, w13
    57a0:	orr	w10, w11, w10
    57a4:	str	w12, [x0, #644]
    57a8:	str	w10, [x0, #640]
    57ac:	ldrh	w9, [x9, #12]
    57b0:	madd	x11, x8, x18, x0
    57b4:	madd	x13, x8, x2, x0
    57b8:	cmp	w12, #0x8
    57bc:	add	x11, x11, x9
    57c0:	add	x13, x13, x9, lsl #2
    57c4:	ldrb	w9, [x11, x1]
    57c8:	ldr	w11, [x13, x4]
    57cc:	b.lt	580c <BZ2_compressBlock@@Base+0x20d8>  // b.tstop
    57d0:	ldr	w13, [x22]
    57d4:	ldr	x12, [x19]
    57d8:	lsr	w10, w10, #24
    57dc:	strb	w10, [x12, w13, sxtw]
    57e0:	ldr	w10, [x22]
    57e4:	add	w13, w10, #0x1
    57e8:	str	w13, [x22]
    57ec:	ldr	w10, [x24]
    57f0:	lsl	w10, w10, #8
    57f4:	str	w10, [x24]
    57f8:	ldr	w14, [x21]
    57fc:	sub	w12, w14, #0x8
    5800:	cmp	w14, #0xf
    5804:	str	w12, [x21]
    5808:	b.gt	57d4 <BZ2_compressBlock@@Base+0x20a0>
    580c:	add	w13, w12, w9
    5810:	neg	w12, w13
    5814:	lsl	w11, w11, w12
    5818:	orr	w10, w11, w10
    581c:	add	x9, x16, x28, lsl #1
    5820:	str	w13, [x0, #644]
    5824:	str	w10, [x0, #640]
    5828:	ldrh	w11, [x9, #14]
    582c:	madd	x12, x8, x18, x0
    5830:	madd	x14, x8, x2, x0
    5834:	cmp	w13, #0x8
    5838:	add	x12, x12, x11
    583c:	add	x11, x14, x11, lsl #2
    5840:	ldrb	w12, [x12, x1]
    5844:	ldr	w11, [x11, x4]
    5848:	b.lt	5888 <BZ2_compressBlock@@Base+0x2154>  // b.tstop
    584c:	ldr	w14, [x22]
    5850:	ldr	x13, [x19]
    5854:	lsr	w10, w10, #24
    5858:	strb	w10, [x13, w14, sxtw]
    585c:	ldr	w10, [x22]
    5860:	add	w14, w10, #0x1
    5864:	str	w14, [x22]
    5868:	ldr	w10, [x24]
    586c:	lsl	w10, w10, #8
    5870:	str	w10, [x24]
    5874:	ldr	w15, [x21]
    5878:	sub	w13, w15, #0x8
    587c:	cmp	w15, #0xf
    5880:	str	w13, [x21]
    5884:	b.gt	5850 <BZ2_compressBlock@@Base+0x211c>
    5888:	add	w12, w13, w12
    588c:	neg	w13, w12
    5890:	lsl	w11, w11, w13
    5894:	orr	w10, w11, w10
    5898:	str	w12, [x0, #644]
    589c:	str	w10, [x0, #640]
    58a0:	ldrh	w9, [x9, #16]
    58a4:	madd	x11, x8, x18, x0
    58a8:	madd	x13, x8, x2, x0
    58ac:	cmp	w12, #0x8
    58b0:	add	x11, x11, x9
    58b4:	add	x13, x13, x9, lsl #2
    58b8:	ldrb	w9, [x11, x1]
    58bc:	ldr	w11, [x13, x4]
    58c0:	b.lt	5900 <BZ2_compressBlock@@Base+0x21cc>  // b.tstop
    58c4:	ldr	w13, [x22]
    58c8:	ldr	x12, [x19]
    58cc:	lsr	w10, w10, #24
    58d0:	strb	w10, [x12, w13, sxtw]
    58d4:	ldr	w10, [x22]
    58d8:	add	w13, w10, #0x1
    58dc:	str	w13, [x22]
    58e0:	ldr	w10, [x24]
    58e4:	lsl	w10, w10, #8
    58e8:	str	w10, [x24]
    58ec:	ldr	w14, [x21]
    58f0:	sub	w12, w14, #0x8
    58f4:	cmp	w14, #0xf
    58f8:	str	w12, [x21]
    58fc:	b.gt	58c8 <BZ2_compressBlock@@Base+0x2194>
    5900:	add	w13, w12, w9
    5904:	neg	w12, w13
    5908:	lsl	w11, w11, w12
    590c:	orr	w10, w11, w10
    5910:	add	x9, x16, x28, lsl #1
    5914:	str	w13, [x0, #644]
    5918:	str	w10, [x0, #640]
    591c:	ldrh	w11, [x9, #18]
    5920:	madd	x12, x8, x18, x0
    5924:	madd	x14, x8, x2, x0
    5928:	cmp	w13, #0x8
    592c:	add	x12, x12, x11
    5930:	add	x11, x14, x11, lsl #2
    5934:	ldrb	w12, [x12, x1]
    5938:	ldr	w11, [x11, x4]
    593c:	b.lt	597c <BZ2_compressBlock@@Base+0x2248>  // b.tstop
    5940:	ldr	w14, [x22]
    5944:	ldr	x13, [x19]
    5948:	lsr	w10, w10, #24
    594c:	strb	w10, [x13, w14, sxtw]
    5950:	ldr	w10, [x22]
    5954:	add	w14, w10, #0x1
    5958:	str	w14, [x22]
    595c:	ldr	w10, [x24]
    5960:	lsl	w10, w10, #8
    5964:	str	w10, [x24]
    5968:	ldr	w15, [x21]
    596c:	sub	w13, w15, #0x8
    5970:	cmp	w15, #0xf
    5974:	str	w13, [x21]
    5978:	b.gt	5944 <BZ2_compressBlock@@Base+0x2210>
    597c:	add	w12, w13, w12
    5980:	neg	w13, w12
    5984:	lsl	w11, w11, w13
    5988:	orr	w10, w11, w10
    598c:	str	w12, [x0, #644]
    5990:	str	w10, [x0, #640]
    5994:	ldrh	w9, [x9, #20]
    5998:	madd	x11, x8, x18, x0
    599c:	madd	x13, x8, x2, x0
    59a0:	cmp	w12, #0x8
    59a4:	add	x11, x11, x9
    59a8:	add	x13, x13, x9, lsl #2
    59ac:	ldrb	w9, [x11, x1]
    59b0:	ldr	w11, [x13, x4]
    59b4:	b.lt	59f4 <BZ2_compressBlock@@Base+0x22c0>  // b.tstop
    59b8:	ldr	w13, [x22]
    59bc:	ldr	x12, [x19]
    59c0:	lsr	w10, w10, #24
    59c4:	strb	w10, [x12, w13, sxtw]
    59c8:	ldr	w10, [x22]
    59cc:	add	w13, w10, #0x1
    59d0:	str	w13, [x22]
    59d4:	ldr	w10, [x24]
    59d8:	lsl	w10, w10, #8
    59dc:	str	w10, [x24]
    59e0:	ldr	w14, [x21]
    59e4:	sub	w12, w14, #0x8
    59e8:	cmp	w14, #0xf
    59ec:	str	w12, [x21]
    59f0:	b.gt	59bc <BZ2_compressBlock@@Base+0x2288>
    59f4:	add	w13, w12, w9
    59f8:	neg	w12, w13
    59fc:	lsl	w11, w11, w12
    5a00:	orr	w10, w11, w10
    5a04:	add	x9, x16, x28, lsl #1
    5a08:	str	w13, [x0, #644]
    5a0c:	str	w10, [x0, #640]
    5a10:	ldrh	w11, [x9, #22]
    5a14:	madd	x12, x8, x18, x0
    5a18:	madd	x14, x8, x2, x0
    5a1c:	cmp	w13, #0x8
    5a20:	add	x12, x12, x11
    5a24:	add	x11, x14, x11, lsl #2
    5a28:	ldrb	w12, [x12, x1]
    5a2c:	ldr	w11, [x11, x4]
    5a30:	b.lt	5a70 <BZ2_compressBlock@@Base+0x233c>  // b.tstop
    5a34:	ldr	w14, [x22]
    5a38:	ldr	x13, [x19]
    5a3c:	lsr	w10, w10, #24
    5a40:	strb	w10, [x13, w14, sxtw]
    5a44:	ldr	w10, [x22]
    5a48:	add	w14, w10, #0x1
    5a4c:	str	w14, [x22]
    5a50:	ldr	w10, [x24]
    5a54:	lsl	w10, w10, #8
    5a58:	str	w10, [x24]
    5a5c:	ldr	w15, [x21]
    5a60:	sub	w13, w15, #0x8
    5a64:	cmp	w15, #0xf
    5a68:	str	w13, [x21]
    5a6c:	b.gt	5a38 <BZ2_compressBlock@@Base+0x2304>
    5a70:	add	w12, w13, w12
    5a74:	neg	w13, w12
    5a78:	lsl	w11, w11, w13
    5a7c:	orr	w10, w11, w10
    5a80:	str	w12, [x0, #644]
    5a84:	str	w10, [x0, #640]
    5a88:	ldrh	w9, [x9, #24]
    5a8c:	madd	x11, x8, x18, x0
    5a90:	madd	x13, x8, x2, x0
    5a94:	cmp	w12, #0x8
    5a98:	add	x11, x11, x9
    5a9c:	add	x13, x13, x9, lsl #2
    5aa0:	ldrb	w9, [x11, x1]
    5aa4:	ldr	w11, [x13, x4]
    5aa8:	b.lt	5ae8 <BZ2_compressBlock@@Base+0x23b4>  // b.tstop
    5aac:	ldr	w13, [x22]
    5ab0:	ldr	x12, [x19]
    5ab4:	lsr	w10, w10, #24
    5ab8:	strb	w10, [x12, w13, sxtw]
    5abc:	ldr	w10, [x22]
    5ac0:	add	w13, w10, #0x1
    5ac4:	str	w13, [x22]
    5ac8:	ldr	w10, [x24]
    5acc:	lsl	w10, w10, #8
    5ad0:	str	w10, [x24]
    5ad4:	ldr	w14, [x21]
    5ad8:	sub	w12, w14, #0x8
    5adc:	cmp	w14, #0xf
    5ae0:	str	w12, [x21]
    5ae4:	b.gt	5ab0 <BZ2_compressBlock@@Base+0x237c>
    5ae8:	add	w13, w12, w9
    5aec:	neg	w12, w13
    5af0:	lsl	w11, w11, w12
    5af4:	orr	w10, w11, w10
    5af8:	add	x9, x16, x28, lsl #1
    5afc:	str	w13, [x0, #644]
    5b00:	str	w10, [x0, #640]
    5b04:	ldrh	w11, [x9, #26]
    5b08:	madd	x12, x8, x18, x0
    5b0c:	madd	x14, x8, x2, x0
    5b10:	cmp	w13, #0x8
    5b14:	add	x12, x12, x11
    5b18:	add	x11, x14, x11, lsl #2
    5b1c:	ldrb	w12, [x12, x1]
    5b20:	ldr	w11, [x11, x4]
    5b24:	b.lt	5b64 <BZ2_compressBlock@@Base+0x2430>  // b.tstop
    5b28:	ldr	w14, [x22]
    5b2c:	ldr	x13, [x19]
    5b30:	lsr	w10, w10, #24
    5b34:	strb	w10, [x13, w14, sxtw]
    5b38:	ldr	w10, [x22]
    5b3c:	add	w14, w10, #0x1
    5b40:	str	w14, [x22]
    5b44:	ldr	w10, [x24]
    5b48:	lsl	w10, w10, #8
    5b4c:	str	w10, [x24]
    5b50:	ldr	w15, [x21]
    5b54:	sub	w13, w15, #0x8
    5b58:	cmp	w15, #0xf
    5b5c:	str	w13, [x21]
    5b60:	b.gt	5b2c <BZ2_compressBlock@@Base+0x23f8>
    5b64:	add	w12, w13, w12
    5b68:	neg	w13, w12
    5b6c:	lsl	w11, w11, w13
    5b70:	orr	w10, w11, w10
    5b74:	str	w12, [x0, #644]
    5b78:	str	w10, [x0, #640]
    5b7c:	ldrh	w9, [x9, #28]
    5b80:	madd	x11, x8, x18, x0
    5b84:	madd	x13, x8, x2, x0
    5b88:	cmp	w12, #0x8
    5b8c:	add	x11, x11, x9
    5b90:	add	x13, x13, x9, lsl #2
    5b94:	ldrb	w9, [x11, x1]
    5b98:	ldr	w11, [x13, x4]
    5b9c:	b.lt	5bdc <BZ2_compressBlock@@Base+0x24a8>  // b.tstop
    5ba0:	ldr	w13, [x22]
    5ba4:	ldr	x12, [x19]
    5ba8:	lsr	w10, w10, #24
    5bac:	strb	w10, [x12, w13, sxtw]
    5bb0:	ldr	w10, [x22]
    5bb4:	add	w13, w10, #0x1
    5bb8:	str	w13, [x22]
    5bbc:	ldr	w10, [x24]
    5bc0:	lsl	w10, w10, #8
    5bc4:	str	w10, [x24]
    5bc8:	ldr	w14, [x21]
    5bcc:	sub	w12, w14, #0x8
    5bd0:	cmp	w14, #0xf
    5bd4:	str	w12, [x21]
    5bd8:	b.gt	5ba4 <BZ2_compressBlock@@Base+0x2470>
    5bdc:	add	w13, w12, w9
    5be0:	neg	w12, w13
    5be4:	lsl	w11, w11, w12
    5be8:	orr	w10, w11, w10
    5bec:	add	x9, x16, x28, lsl #1
    5bf0:	str	w13, [x0, #644]
    5bf4:	str	w10, [x0, #640]
    5bf8:	ldrh	w11, [x9, #30]
    5bfc:	madd	x12, x8, x18, x0
    5c00:	madd	x14, x8, x2, x0
    5c04:	cmp	w13, #0x8
    5c08:	add	x12, x12, x11
    5c0c:	add	x11, x14, x11, lsl #2
    5c10:	ldrb	w12, [x12, x1]
    5c14:	ldr	w11, [x11, x4]
    5c18:	b.lt	5c58 <BZ2_compressBlock@@Base+0x2524>  // b.tstop
    5c1c:	ldr	w14, [x22]
    5c20:	ldr	x13, [x19]
    5c24:	lsr	w10, w10, #24
    5c28:	strb	w10, [x13, w14, sxtw]
    5c2c:	ldr	w10, [x22]
    5c30:	add	w14, w10, #0x1
    5c34:	str	w14, [x22]
    5c38:	ldr	w10, [x24]
    5c3c:	lsl	w10, w10, #8
    5c40:	str	w10, [x24]
    5c44:	ldr	w15, [x21]
    5c48:	sub	w13, w15, #0x8
    5c4c:	cmp	w15, #0xf
    5c50:	str	w13, [x21]
    5c54:	b.gt	5c20 <BZ2_compressBlock@@Base+0x24ec>
    5c58:	add	w12, w13, w12
    5c5c:	neg	w13, w12
    5c60:	lsl	w11, w11, w13
    5c64:	orr	w10, w11, w10
    5c68:	str	w12, [x0, #644]
    5c6c:	str	w10, [x0, #640]
    5c70:	ldrh	w9, [x9, #32]
    5c74:	madd	x11, x8, x18, x0
    5c78:	madd	x13, x8, x2, x0
    5c7c:	cmp	w12, #0x8
    5c80:	add	x11, x11, x9
    5c84:	add	x13, x13, x9, lsl #2
    5c88:	ldrb	w9, [x11, x1]
    5c8c:	ldr	w11, [x13, x4]
    5c90:	b.lt	5cd0 <BZ2_compressBlock@@Base+0x259c>  // b.tstop
    5c94:	ldr	w13, [x22]
    5c98:	ldr	x12, [x19]
    5c9c:	lsr	w10, w10, #24
    5ca0:	strb	w10, [x12, w13, sxtw]
    5ca4:	ldr	w10, [x22]
    5ca8:	add	w13, w10, #0x1
    5cac:	str	w13, [x22]
    5cb0:	ldr	w10, [x24]
    5cb4:	lsl	w10, w10, #8
    5cb8:	str	w10, [x24]
    5cbc:	ldr	w14, [x21]
    5cc0:	sub	w12, w14, #0x8
    5cc4:	cmp	w14, #0xf
    5cc8:	str	w12, [x21]
    5ccc:	b.gt	5c98 <BZ2_compressBlock@@Base+0x2564>
    5cd0:	add	w13, w12, w9
    5cd4:	neg	w12, w13
    5cd8:	lsl	w11, w11, w12
    5cdc:	orr	w10, w11, w10
    5ce0:	add	x9, x16, x28, lsl #1
    5ce4:	str	w13, [x0, #644]
    5ce8:	str	w10, [x0, #640]
    5cec:	ldrh	w11, [x9, #34]
    5cf0:	madd	x12, x8, x18, x0
    5cf4:	madd	x14, x8, x2, x0
    5cf8:	cmp	w13, #0x8
    5cfc:	add	x12, x12, x11
    5d00:	add	x11, x14, x11, lsl #2
    5d04:	ldrb	w12, [x12, x1]
    5d08:	ldr	w11, [x11, x4]
    5d0c:	b.lt	5d4c <BZ2_compressBlock@@Base+0x2618>  // b.tstop
    5d10:	ldr	w14, [x22]
    5d14:	ldr	x13, [x19]
    5d18:	lsr	w10, w10, #24
    5d1c:	strb	w10, [x13, w14, sxtw]
    5d20:	ldr	w10, [x22]
    5d24:	add	w14, w10, #0x1
    5d28:	str	w14, [x22]
    5d2c:	ldr	w10, [x24]
    5d30:	lsl	w10, w10, #8
    5d34:	str	w10, [x24]
    5d38:	ldr	w15, [x21]
    5d3c:	sub	w13, w15, #0x8
    5d40:	cmp	w15, #0xf
    5d44:	str	w13, [x21]
    5d48:	b.gt	5d14 <BZ2_compressBlock@@Base+0x25e0>
    5d4c:	add	w12, w13, w12
    5d50:	neg	w13, w12
    5d54:	lsl	w11, w11, w13
    5d58:	orr	w10, w11, w10
    5d5c:	str	w12, [x0, #644]
    5d60:	str	w10, [x0, #640]
    5d64:	ldrh	w9, [x9, #36]
    5d68:	madd	x11, x8, x18, x0
    5d6c:	madd	x13, x8, x2, x0
    5d70:	cmp	w12, #0x8
    5d74:	add	x11, x11, x9
    5d78:	add	x13, x13, x9, lsl #2
    5d7c:	ldrb	w9, [x11, x1]
    5d80:	ldr	w11, [x13, x4]
    5d84:	b.lt	5dc4 <BZ2_compressBlock@@Base+0x2690>  // b.tstop
    5d88:	ldr	w13, [x22]
    5d8c:	ldr	x12, [x19]
    5d90:	lsr	w10, w10, #24
    5d94:	strb	w10, [x12, w13, sxtw]
    5d98:	ldr	w10, [x22]
    5d9c:	add	w13, w10, #0x1
    5da0:	str	w13, [x22]
    5da4:	ldr	w10, [x24]
    5da8:	lsl	w10, w10, #8
    5dac:	str	w10, [x24]
    5db0:	ldr	w14, [x21]
    5db4:	sub	w12, w14, #0x8
    5db8:	cmp	w14, #0xf
    5dbc:	str	w12, [x21]
    5dc0:	b.gt	5d8c <BZ2_compressBlock@@Base+0x2658>
    5dc4:	add	w13, w12, w9
    5dc8:	neg	w12, w13
    5dcc:	lsl	w11, w11, w12
    5dd0:	orr	w10, w11, w10
    5dd4:	add	x9, x16, x28, lsl #1
    5dd8:	str	w13, [x0, #644]
    5ddc:	str	w10, [x0, #640]
    5de0:	ldrh	w11, [x9, #38]
    5de4:	madd	x12, x8, x18, x0
    5de8:	madd	x14, x8, x2, x0
    5dec:	cmp	w13, #0x8
    5df0:	add	x12, x12, x11
    5df4:	add	x11, x14, x11, lsl #2
    5df8:	ldrb	w12, [x12, x1]
    5dfc:	ldr	w11, [x11, x4]
    5e00:	b.lt	5e40 <BZ2_compressBlock@@Base+0x270c>  // b.tstop
    5e04:	ldr	w14, [x22]
    5e08:	ldr	x13, [x19]
    5e0c:	lsr	w10, w10, #24
    5e10:	strb	w10, [x13, w14, sxtw]
    5e14:	ldr	w10, [x22]
    5e18:	add	w14, w10, #0x1
    5e1c:	str	w14, [x22]
    5e20:	ldr	w10, [x24]
    5e24:	lsl	w10, w10, #8
    5e28:	str	w10, [x24]
    5e2c:	ldr	w15, [x21]
    5e30:	sub	w13, w15, #0x8
    5e34:	cmp	w15, #0xf
    5e38:	str	w13, [x21]
    5e3c:	b.gt	5e08 <BZ2_compressBlock@@Base+0x26d4>
    5e40:	add	w12, w13, w12
    5e44:	neg	w13, w12
    5e48:	lsl	w11, w11, w13
    5e4c:	orr	w10, w11, w10
    5e50:	str	w12, [x0, #644]
    5e54:	str	w10, [x0, #640]
    5e58:	ldrh	w9, [x9, #40]
    5e5c:	madd	x11, x8, x18, x0
    5e60:	madd	x13, x8, x2, x0
    5e64:	cmp	w12, #0x8
    5e68:	add	x11, x11, x9
    5e6c:	add	x13, x13, x9, lsl #2
    5e70:	ldrb	w9, [x11, x1]
    5e74:	ldr	w11, [x13, x4]
    5e78:	b.lt	5eb8 <BZ2_compressBlock@@Base+0x2784>  // b.tstop
    5e7c:	ldr	w13, [x22]
    5e80:	ldr	x12, [x19]
    5e84:	lsr	w10, w10, #24
    5e88:	strb	w10, [x12, w13, sxtw]
    5e8c:	ldr	w10, [x22]
    5e90:	add	w13, w10, #0x1
    5e94:	str	w13, [x22]
    5e98:	ldr	w10, [x24]
    5e9c:	lsl	w10, w10, #8
    5ea0:	str	w10, [x24]
    5ea4:	ldr	w14, [x21]
    5ea8:	sub	w12, w14, #0x8
    5eac:	cmp	w14, #0xf
    5eb0:	str	w12, [x21]
    5eb4:	b.gt	5e80 <BZ2_compressBlock@@Base+0x274c>
    5eb8:	add	w13, w12, w9
    5ebc:	neg	w12, w13
    5ec0:	lsl	w11, w11, w12
    5ec4:	orr	w10, w11, w10
    5ec8:	add	x9, x16, x28, lsl #1
    5ecc:	str	w13, [x0, #644]
    5ed0:	str	w10, [x0, #640]
    5ed4:	ldrh	w11, [x9, #42]
    5ed8:	madd	x12, x8, x18, x0
    5edc:	madd	x14, x8, x2, x0
    5ee0:	cmp	w13, #0x8
    5ee4:	add	x12, x12, x11
    5ee8:	add	x11, x14, x11, lsl #2
    5eec:	ldrb	w12, [x12, x1]
    5ef0:	ldr	w11, [x11, x4]
    5ef4:	b.lt	5f34 <BZ2_compressBlock@@Base+0x2800>  // b.tstop
    5ef8:	ldr	w14, [x22]
    5efc:	ldr	x13, [x19]
    5f00:	lsr	w10, w10, #24
    5f04:	strb	w10, [x13, w14, sxtw]
    5f08:	ldr	w10, [x22]
    5f0c:	add	w14, w10, #0x1
    5f10:	str	w14, [x22]
    5f14:	ldr	w10, [x24]
    5f18:	lsl	w10, w10, #8
    5f1c:	str	w10, [x24]
    5f20:	ldr	w15, [x21]
    5f24:	sub	w13, w15, #0x8
    5f28:	cmp	w15, #0xf
    5f2c:	str	w13, [x21]
    5f30:	b.gt	5efc <BZ2_compressBlock@@Base+0x27c8>
    5f34:	add	w12, w13, w12
    5f38:	neg	w13, w12
    5f3c:	lsl	w11, w11, w13
    5f40:	orr	w10, w11, w10
    5f44:	str	w12, [x0, #644]
    5f48:	str	w10, [x0, #640]
    5f4c:	ldrh	w9, [x9, #44]
    5f50:	madd	x11, x8, x18, x0
    5f54:	madd	x13, x8, x2, x0
    5f58:	cmp	w12, #0x8
    5f5c:	add	x11, x11, x9
    5f60:	add	x13, x13, x9, lsl #2
    5f64:	ldrb	w9, [x11, x1]
    5f68:	ldr	w11, [x13, x4]
    5f6c:	b.lt	5fac <BZ2_compressBlock@@Base+0x2878>  // b.tstop
    5f70:	ldr	w13, [x22]
    5f74:	ldr	x12, [x19]
    5f78:	lsr	w10, w10, #24
    5f7c:	strb	w10, [x12, w13, sxtw]
    5f80:	ldr	w10, [x22]
    5f84:	add	w13, w10, #0x1
    5f88:	str	w13, [x22]
    5f8c:	ldr	w10, [x24]
    5f90:	lsl	w10, w10, #8
    5f94:	str	w10, [x24]
    5f98:	ldr	w14, [x21]
    5f9c:	sub	w12, w14, #0x8
    5fa0:	cmp	w14, #0xf
    5fa4:	str	w12, [x21]
    5fa8:	b.gt	5f74 <BZ2_compressBlock@@Base+0x2840>
    5fac:	add	w13, w12, w9
    5fb0:	neg	w12, w13
    5fb4:	lsl	w11, w11, w12
    5fb8:	orr	w10, w11, w10
    5fbc:	add	x9, x16, x28, lsl #1
    5fc0:	str	w13, [x0, #644]
    5fc4:	str	w10, [x0, #640]
    5fc8:	ldrh	w11, [x9, #46]
    5fcc:	madd	x12, x8, x18, x0
    5fd0:	madd	x14, x8, x2, x0
    5fd4:	cmp	w13, #0x8
    5fd8:	add	x12, x12, x11
    5fdc:	add	x11, x14, x11, lsl #2
    5fe0:	ldrb	w12, [x12, x1]
    5fe4:	ldr	w11, [x11, x4]
    5fe8:	b.lt	6028 <BZ2_compressBlock@@Base+0x28f4>  // b.tstop
    5fec:	ldr	w14, [x22]
    5ff0:	ldr	x13, [x19]
    5ff4:	lsr	w10, w10, #24
    5ff8:	strb	w10, [x13, w14, sxtw]
    5ffc:	ldr	w10, [x22]
    6000:	add	w14, w10, #0x1
    6004:	str	w14, [x22]
    6008:	ldr	w10, [x24]
    600c:	lsl	w10, w10, #8
    6010:	str	w10, [x24]
    6014:	ldr	w15, [x21]
    6018:	sub	w13, w15, #0x8
    601c:	cmp	w15, #0xf
    6020:	str	w13, [x21]
    6024:	b.gt	5ff0 <BZ2_compressBlock@@Base+0x28bc>
    6028:	add	w12, w13, w12
    602c:	neg	w13, w12
    6030:	lsl	w11, w11, w13
    6034:	orr	w10, w11, w10
    6038:	str	w12, [x0, #644]
    603c:	str	w10, [x0, #640]
    6040:	ldrh	w9, [x9, #48]
    6044:	madd	x11, x8, x18, x0
    6048:	madd	x13, x8, x2, x0
    604c:	cmp	w12, #0x8
    6050:	add	x11, x11, x9
    6054:	add	x13, x13, x9, lsl #2
    6058:	ldrb	w9, [x11, x1]
    605c:	ldr	w11, [x13, x4]
    6060:	b.lt	60a0 <BZ2_compressBlock@@Base+0x296c>  // b.tstop
    6064:	ldr	w13, [x22]
    6068:	ldr	x12, [x19]
    606c:	lsr	w10, w10, #24
    6070:	strb	w10, [x12, w13, sxtw]
    6074:	ldr	w10, [x22]
    6078:	add	w13, w10, #0x1
    607c:	str	w13, [x22]
    6080:	ldr	w10, [x24]
    6084:	lsl	w10, w10, #8
    6088:	str	w10, [x24]
    608c:	ldr	w14, [x21]
    6090:	sub	w12, w14, #0x8
    6094:	cmp	w14, #0xf
    6098:	str	w12, [x21]
    609c:	b.gt	6068 <BZ2_compressBlock@@Base+0x2934>
    60a0:	add	w13, w12, w9
    60a4:	neg	w12, w13
    60a8:	lsl	w11, w11, w12
    60ac:	orr	w10, w11, w10
    60b0:	add	x9, x16, x28, lsl #1
    60b4:	str	w13, [x0, #644]
    60b8:	str	w10, [x0, #640]
    60bc:	ldrh	w11, [x9, #50]
    60c0:	madd	x12, x8, x18, x0
    60c4:	madd	x14, x8, x2, x0
    60c8:	cmp	w13, #0x8
    60cc:	add	x12, x12, x11
    60d0:	add	x11, x14, x11, lsl #2
    60d4:	ldrb	w12, [x12, x1]
    60d8:	ldr	w11, [x11, x4]
    60dc:	b.lt	611c <BZ2_compressBlock@@Base+0x29e8>  // b.tstop
    60e0:	ldr	w14, [x22]
    60e4:	ldr	x13, [x19]
    60e8:	lsr	w10, w10, #24
    60ec:	strb	w10, [x13, w14, sxtw]
    60f0:	ldr	w10, [x22]
    60f4:	add	w14, w10, #0x1
    60f8:	str	w14, [x22]
    60fc:	ldr	w10, [x24]
    6100:	lsl	w10, w10, #8
    6104:	str	w10, [x24]
    6108:	ldr	w15, [x21]
    610c:	sub	w13, w15, #0x8
    6110:	cmp	w15, #0xf
    6114:	str	w13, [x21]
    6118:	b.gt	60e4 <BZ2_compressBlock@@Base+0x29b0>
    611c:	add	w12, w13, w12
    6120:	neg	w13, w12
    6124:	lsl	w11, w11, w13
    6128:	orr	w10, w11, w10
    612c:	str	w12, [x0, #644]
    6130:	str	w10, [x0, #640]
    6134:	ldrh	w9, [x9, #52]
    6138:	madd	x11, x8, x18, x0
    613c:	madd	x13, x8, x2, x0
    6140:	cmp	w12, #0x8
    6144:	add	x11, x11, x9
    6148:	add	x13, x13, x9, lsl #2
    614c:	ldrb	w9, [x11, x1]
    6150:	ldr	w11, [x13, x4]
    6154:	b.lt	6194 <BZ2_compressBlock@@Base+0x2a60>  // b.tstop
    6158:	ldr	w13, [x22]
    615c:	ldr	x12, [x19]
    6160:	lsr	w10, w10, #24
    6164:	strb	w10, [x12, w13, sxtw]
    6168:	ldr	w10, [x22]
    616c:	add	w13, w10, #0x1
    6170:	str	w13, [x22]
    6174:	ldr	w10, [x24]
    6178:	lsl	w10, w10, #8
    617c:	str	w10, [x24]
    6180:	ldr	w14, [x21]
    6184:	sub	w12, w14, #0x8
    6188:	cmp	w14, #0xf
    618c:	str	w12, [x21]
    6190:	b.gt	615c <BZ2_compressBlock@@Base+0x2a28>
    6194:	add	w13, w12, w9
    6198:	neg	w12, w13
    619c:	lsl	w11, w11, w12
    61a0:	orr	w10, w11, w10
    61a4:	add	x9, x16, x28, lsl #1
    61a8:	str	w13, [x0, #644]
    61ac:	str	w10, [x0, #640]
    61b0:	ldrh	w11, [x9, #54]
    61b4:	madd	x12, x8, x18, x0
    61b8:	madd	x14, x8, x2, x0
    61bc:	cmp	w13, #0x8
    61c0:	add	x12, x12, x11
    61c4:	add	x11, x14, x11, lsl #2
    61c8:	ldrb	w12, [x12, x1]
    61cc:	ldr	w11, [x11, x4]
    61d0:	b.lt	6210 <BZ2_compressBlock@@Base+0x2adc>  // b.tstop
    61d4:	ldr	w14, [x22]
    61d8:	ldr	x13, [x19]
    61dc:	lsr	w10, w10, #24
    61e0:	strb	w10, [x13, w14, sxtw]
    61e4:	ldr	w10, [x22]
    61e8:	add	w14, w10, #0x1
    61ec:	str	w14, [x22]
    61f0:	ldr	w10, [x24]
    61f4:	lsl	w10, w10, #8
    61f8:	str	w10, [x24]
    61fc:	ldr	w15, [x21]
    6200:	sub	w13, w15, #0x8
    6204:	cmp	w15, #0xf
    6208:	str	w13, [x21]
    620c:	b.gt	61d8 <BZ2_compressBlock@@Base+0x2aa4>
    6210:	add	w12, w13, w12
    6214:	neg	w13, w12
    6218:	lsl	w11, w11, w13
    621c:	orr	w10, w11, w10
    6220:	str	w12, [x0, #644]
    6224:	str	w10, [x0, #640]
    6228:	ldrh	w9, [x9, #56]
    622c:	madd	x11, x8, x18, x0
    6230:	madd	x13, x8, x2, x0
    6234:	cmp	w12, #0x8
    6238:	add	x11, x11, x9
    623c:	add	x13, x13, x9, lsl #2
    6240:	ldrb	w9, [x11, x1]
    6244:	ldr	w11, [x13, x4]
    6248:	b.lt	6288 <BZ2_compressBlock@@Base+0x2b54>  // b.tstop
    624c:	ldr	w13, [x22]
    6250:	ldr	x12, [x19]
    6254:	lsr	w10, w10, #24
    6258:	strb	w10, [x12, w13, sxtw]
    625c:	ldr	w10, [x22]
    6260:	add	w13, w10, #0x1
    6264:	str	w13, [x22]
    6268:	ldr	w10, [x24]
    626c:	lsl	w10, w10, #8
    6270:	str	w10, [x24]
    6274:	ldr	w14, [x21]
    6278:	sub	w12, w14, #0x8
    627c:	cmp	w14, #0xf
    6280:	str	w12, [x21]
    6284:	b.gt	6250 <BZ2_compressBlock@@Base+0x2b1c>
    6288:	add	w13, w12, w9
    628c:	neg	w12, w13
    6290:	lsl	w11, w11, w12
    6294:	orr	w10, w11, w10
    6298:	add	x9, x16, x28, lsl #1
    629c:	str	w13, [x0, #644]
    62a0:	str	w10, [x0, #640]
    62a4:	ldrh	w11, [x9, #58]
    62a8:	madd	x12, x8, x18, x0
    62ac:	madd	x14, x8, x2, x0
    62b0:	cmp	w13, #0x8
    62b4:	add	x12, x12, x11
    62b8:	add	x11, x14, x11, lsl #2
    62bc:	ldrb	w12, [x12, x1]
    62c0:	ldr	w11, [x11, x4]
    62c4:	b.lt	6304 <BZ2_compressBlock@@Base+0x2bd0>  // b.tstop
    62c8:	ldr	w14, [x22]
    62cc:	ldr	x13, [x19]
    62d0:	lsr	w10, w10, #24
    62d4:	strb	w10, [x13, w14, sxtw]
    62d8:	ldr	w10, [x22]
    62dc:	add	w14, w10, #0x1
    62e0:	str	w14, [x22]
    62e4:	ldr	w10, [x24]
    62e8:	lsl	w10, w10, #8
    62ec:	str	w10, [x24]
    62f0:	ldr	w15, [x21]
    62f4:	sub	w13, w15, #0x8
    62f8:	cmp	w15, #0xf
    62fc:	str	w13, [x21]
    6300:	b.gt	62cc <BZ2_compressBlock@@Base+0x2b98>
    6304:	add	w12, w13, w12
    6308:	neg	w13, w12
    630c:	lsl	w11, w11, w13
    6310:	orr	w10, w11, w10
    6314:	str	w12, [x0, #644]
    6318:	str	w10, [x0, #640]
    631c:	ldrh	w9, [x9, #60]
    6320:	madd	x11, x8, x18, x0
    6324:	madd	x13, x8, x2, x0
    6328:	cmp	w12, #0x8
    632c:	add	x11, x11, x9
    6330:	add	x13, x13, x9, lsl #2
    6334:	ldrb	w9, [x11, x1]
    6338:	ldr	w11, [x13, x4]
    633c:	b.lt	637c <BZ2_compressBlock@@Base+0x2c48>  // b.tstop
    6340:	ldr	w13, [x22]
    6344:	ldr	x12, [x19]
    6348:	lsr	w10, w10, #24
    634c:	strb	w10, [x12, w13, sxtw]
    6350:	ldr	w10, [x22]
    6354:	add	w13, w10, #0x1
    6358:	str	w13, [x22]
    635c:	ldr	w10, [x24]
    6360:	lsl	w10, w10, #8
    6364:	str	w10, [x24]
    6368:	ldr	w14, [x21]
    636c:	sub	w12, w14, #0x8
    6370:	cmp	w14, #0xf
    6374:	str	w12, [x21]
    6378:	b.gt	6344 <BZ2_compressBlock@@Base+0x2c10>
    637c:	add	w13, w12, w9
    6380:	neg	w12, w13
    6384:	lsl	w11, w11, w12
    6388:	orr	w10, w11, w10
    638c:	add	x9, x16, x28, lsl #1
    6390:	str	w13, [x0, #644]
    6394:	str	w10, [x0, #640]
    6398:	ldrh	w11, [x9, #62]
    639c:	madd	x12, x8, x18, x0
    63a0:	madd	x14, x8, x2, x0
    63a4:	cmp	w13, #0x8
    63a8:	add	x12, x12, x11
    63ac:	add	x11, x14, x11, lsl #2
    63b0:	ldrb	w12, [x12, x1]
    63b4:	ldr	w11, [x11, x4]
    63b8:	b.lt	63f8 <BZ2_compressBlock@@Base+0x2cc4>  // b.tstop
    63bc:	ldr	w14, [x22]
    63c0:	ldr	x13, [x19]
    63c4:	lsr	w10, w10, #24
    63c8:	strb	w10, [x13, w14, sxtw]
    63cc:	ldr	w10, [x22]
    63d0:	add	w14, w10, #0x1
    63d4:	str	w14, [x22]
    63d8:	ldr	w10, [x24]
    63dc:	lsl	w10, w10, #8
    63e0:	str	w10, [x24]
    63e4:	ldr	w15, [x21]
    63e8:	sub	w13, w15, #0x8
    63ec:	cmp	w15, #0xf
    63f0:	str	w13, [x21]
    63f4:	b.gt	63c0 <BZ2_compressBlock@@Base+0x2c8c>
    63f8:	add	w12, w13, w12
    63fc:	neg	w13, w12
    6400:	lsl	w11, w11, w13
    6404:	orr	w10, w11, w10
    6408:	str	w12, [x0, #644]
    640c:	str	w10, [x0, #640]
    6410:	ldrh	w9, [x9, #64]
    6414:	madd	x11, x8, x18, x0
    6418:	madd	x13, x8, x2, x0
    641c:	cmp	w12, #0x8
    6420:	add	x11, x11, x9
    6424:	add	x13, x13, x9, lsl #2
    6428:	ldrb	w9, [x11, x1]
    642c:	ldr	w11, [x13, x4]
    6430:	b.lt	6470 <BZ2_compressBlock@@Base+0x2d3c>  // b.tstop
    6434:	ldr	w13, [x22]
    6438:	ldr	x12, [x19]
    643c:	lsr	w10, w10, #24
    6440:	strb	w10, [x12, w13, sxtw]
    6444:	ldr	w10, [x22]
    6448:	add	w13, w10, #0x1
    644c:	str	w13, [x22]
    6450:	ldr	w10, [x24]
    6454:	lsl	w10, w10, #8
    6458:	str	w10, [x24]
    645c:	ldr	w14, [x21]
    6460:	sub	w12, w14, #0x8
    6464:	cmp	w14, #0xf
    6468:	str	w12, [x21]
    646c:	b.gt	6438 <BZ2_compressBlock@@Base+0x2d04>
    6470:	add	w13, w12, w9
    6474:	neg	w12, w13
    6478:	lsl	w11, w11, w12
    647c:	orr	w10, w11, w10
    6480:	add	x9, x16, x28, lsl #1
    6484:	str	w13, [x0, #644]
    6488:	str	w10, [x0, #640]
    648c:	ldrh	w11, [x9, #66]
    6490:	madd	x12, x8, x18, x0
    6494:	madd	x14, x8, x2, x0
    6498:	cmp	w13, #0x8
    649c:	add	x12, x12, x11
    64a0:	add	x11, x14, x11, lsl #2
    64a4:	ldrb	w12, [x12, x1]
    64a8:	ldr	w11, [x11, x4]
    64ac:	b.lt	64ec <BZ2_compressBlock@@Base+0x2db8>  // b.tstop
    64b0:	ldr	w14, [x22]
    64b4:	ldr	x13, [x19]
    64b8:	lsr	w10, w10, #24
    64bc:	strb	w10, [x13, w14, sxtw]
    64c0:	ldr	w10, [x22]
    64c4:	add	w14, w10, #0x1
    64c8:	str	w14, [x22]
    64cc:	ldr	w10, [x24]
    64d0:	lsl	w10, w10, #8
    64d4:	str	w10, [x24]
    64d8:	ldr	w15, [x21]
    64dc:	sub	w13, w15, #0x8
    64e0:	cmp	w15, #0xf
    64e4:	str	w13, [x21]
    64e8:	b.gt	64b4 <BZ2_compressBlock@@Base+0x2d80>
    64ec:	add	w12, w13, w12
    64f0:	neg	w13, w12
    64f4:	lsl	w11, w11, w13
    64f8:	orr	w10, w11, w10
    64fc:	str	w12, [x0, #644]
    6500:	str	w10, [x0, #640]
    6504:	ldrh	w9, [x9, #68]
    6508:	madd	x11, x8, x18, x0
    650c:	madd	x13, x8, x2, x0
    6510:	cmp	w12, #0x8
    6514:	add	x11, x11, x9
    6518:	add	x13, x13, x9, lsl #2
    651c:	ldrb	w9, [x11, x1]
    6520:	ldr	w11, [x13, x4]
    6524:	b.lt	6564 <BZ2_compressBlock@@Base+0x2e30>  // b.tstop
    6528:	ldr	w13, [x22]
    652c:	ldr	x12, [x19]
    6530:	lsr	w10, w10, #24
    6534:	strb	w10, [x12, w13, sxtw]
    6538:	ldr	w10, [x22]
    653c:	add	w13, w10, #0x1
    6540:	str	w13, [x22]
    6544:	ldr	w10, [x24]
    6548:	lsl	w10, w10, #8
    654c:	str	w10, [x24]
    6550:	ldr	w14, [x21]
    6554:	sub	w12, w14, #0x8
    6558:	cmp	w14, #0xf
    655c:	str	w12, [x21]
    6560:	b.gt	652c <BZ2_compressBlock@@Base+0x2df8>
    6564:	add	w13, w12, w9
    6568:	neg	w12, w13
    656c:	lsl	w11, w11, w12
    6570:	orr	w10, w11, w10
    6574:	add	x9, x16, x28, lsl #1
    6578:	str	w13, [x0, #644]
    657c:	str	w10, [x0, #640]
    6580:	ldrh	w11, [x9, #70]
    6584:	madd	x12, x8, x18, x0
    6588:	madd	x14, x8, x2, x0
    658c:	cmp	w13, #0x8
    6590:	add	x12, x12, x11
    6594:	add	x11, x14, x11, lsl #2
    6598:	ldrb	w12, [x12, x1]
    659c:	ldr	w11, [x11, x4]
    65a0:	b.lt	65e0 <BZ2_compressBlock@@Base+0x2eac>  // b.tstop
    65a4:	ldr	w14, [x22]
    65a8:	ldr	x13, [x19]
    65ac:	lsr	w10, w10, #24
    65b0:	strb	w10, [x13, w14, sxtw]
    65b4:	ldr	w10, [x22]
    65b8:	add	w14, w10, #0x1
    65bc:	str	w14, [x22]
    65c0:	ldr	w10, [x24]
    65c4:	lsl	w10, w10, #8
    65c8:	str	w10, [x24]
    65cc:	ldr	w15, [x21]
    65d0:	sub	w13, w15, #0x8
    65d4:	cmp	w15, #0xf
    65d8:	str	w13, [x21]
    65dc:	b.gt	65a8 <BZ2_compressBlock@@Base+0x2e74>
    65e0:	add	w12, w13, w12
    65e4:	neg	w13, w12
    65e8:	lsl	w11, w11, w13
    65ec:	orr	w10, w11, w10
    65f0:	str	w12, [x0, #644]
    65f4:	str	w10, [x0, #640]
    65f8:	ldrh	w9, [x9, #72]
    65fc:	madd	x11, x8, x18, x0
    6600:	madd	x13, x8, x2, x0
    6604:	cmp	w12, #0x8
    6608:	add	x11, x11, x9
    660c:	add	x13, x13, x9, lsl #2
    6610:	ldrb	w9, [x11, x1]
    6614:	ldr	w11, [x13, x4]
    6618:	b.lt	6658 <BZ2_compressBlock@@Base+0x2f24>  // b.tstop
    661c:	ldr	w13, [x22]
    6620:	ldr	x12, [x19]
    6624:	lsr	w10, w10, #24
    6628:	strb	w10, [x12, w13, sxtw]
    662c:	ldr	w10, [x22]
    6630:	add	w13, w10, #0x1
    6634:	str	w13, [x22]
    6638:	ldr	w10, [x24]
    663c:	lsl	w10, w10, #8
    6640:	str	w10, [x24]
    6644:	ldr	w14, [x21]
    6648:	sub	w12, w14, #0x8
    664c:	cmp	w14, #0xf
    6650:	str	w12, [x21]
    6654:	b.gt	6620 <BZ2_compressBlock@@Base+0x2eec>
    6658:	add	w13, w12, w9
    665c:	neg	w12, w13
    6660:	lsl	w11, w11, w12
    6664:	orr	w10, w11, w10
    6668:	add	x9, x16, x28, lsl #1
    666c:	str	w13, [x0, #644]
    6670:	str	w10, [x0, #640]
    6674:	ldrh	w11, [x9, #74]
    6678:	madd	x12, x8, x18, x0
    667c:	madd	x14, x8, x2, x0
    6680:	cmp	w13, #0x8
    6684:	add	x12, x12, x11
    6688:	add	x11, x14, x11, lsl #2
    668c:	ldrb	w12, [x12, x1]
    6690:	ldr	w11, [x11, x4]
    6694:	b.lt	66d4 <BZ2_compressBlock@@Base+0x2fa0>  // b.tstop
    6698:	ldr	w14, [x22]
    669c:	ldr	x13, [x19]
    66a0:	lsr	w10, w10, #24
    66a4:	strb	w10, [x13, w14, sxtw]
    66a8:	ldr	w10, [x22]
    66ac:	add	w14, w10, #0x1
    66b0:	str	w14, [x22]
    66b4:	ldr	w10, [x24]
    66b8:	lsl	w10, w10, #8
    66bc:	str	w10, [x24]
    66c0:	ldr	w15, [x21]
    66c4:	sub	w13, w15, #0x8
    66c8:	cmp	w15, #0xf
    66cc:	str	w13, [x21]
    66d0:	b.gt	669c <BZ2_compressBlock@@Base+0x2f68>
    66d4:	add	w12, w13, w12
    66d8:	neg	w13, w12
    66dc:	lsl	w11, w11, w13
    66e0:	orr	w10, w11, w10
    66e4:	str	w12, [x0, #644]
    66e8:	str	w10, [x0, #640]
    66ec:	ldrh	w9, [x9, #76]
    66f0:	madd	x11, x8, x18, x0
    66f4:	madd	x13, x8, x2, x0
    66f8:	cmp	w12, #0x8
    66fc:	add	x11, x11, x9
    6700:	add	x13, x13, x9, lsl #2
    6704:	ldrb	w9, [x11, x1]
    6708:	ldr	w11, [x13, x4]
    670c:	b.lt	674c <BZ2_compressBlock@@Base+0x3018>  // b.tstop
    6710:	ldr	w13, [x22]
    6714:	ldr	x12, [x19]
    6718:	lsr	w10, w10, #24
    671c:	strb	w10, [x12, w13, sxtw]
    6720:	ldr	w10, [x22]
    6724:	add	w13, w10, #0x1
    6728:	str	w13, [x22]
    672c:	ldr	w10, [x24]
    6730:	lsl	w10, w10, #8
    6734:	str	w10, [x24]
    6738:	ldr	w14, [x21]
    673c:	sub	w12, w14, #0x8
    6740:	cmp	w14, #0xf
    6744:	str	w12, [x21]
    6748:	b.gt	6714 <BZ2_compressBlock@@Base+0x2fe0>
    674c:	add	w13, w12, w9
    6750:	neg	w12, w13
    6754:	lsl	w11, w11, w12
    6758:	orr	w10, w11, w10
    675c:	add	x9, x16, x28, lsl #1
    6760:	str	w13, [x0, #644]
    6764:	str	w10, [x0, #640]
    6768:	ldrh	w11, [x9, #78]
    676c:	madd	x12, x8, x18, x0
    6770:	madd	x14, x8, x2, x0
    6774:	cmp	w13, #0x8
    6778:	add	x12, x12, x11
    677c:	add	x11, x14, x11, lsl #2
    6780:	ldrb	w12, [x12, x1]
    6784:	ldr	w11, [x11, x4]
    6788:	b.lt	67c8 <BZ2_compressBlock@@Base+0x3094>  // b.tstop
    678c:	ldr	w14, [x22]
    6790:	ldr	x13, [x19]
    6794:	lsr	w10, w10, #24
    6798:	strb	w10, [x13, w14, sxtw]
    679c:	ldr	w10, [x22]
    67a0:	add	w14, w10, #0x1
    67a4:	str	w14, [x22]
    67a8:	ldr	w10, [x24]
    67ac:	lsl	w10, w10, #8
    67b0:	str	w10, [x24]
    67b4:	ldr	w15, [x21]
    67b8:	sub	w13, w15, #0x8
    67bc:	cmp	w15, #0xf
    67c0:	str	w13, [x21]
    67c4:	b.gt	6790 <BZ2_compressBlock@@Base+0x305c>
    67c8:	add	w12, w13, w12
    67cc:	neg	w13, w12
    67d0:	lsl	w11, w11, w13
    67d4:	orr	w10, w11, w10
    67d8:	str	w12, [x0, #644]
    67dc:	str	w10, [x0, #640]
    67e0:	ldrh	w9, [x9, #80]
    67e4:	madd	x11, x8, x18, x0
    67e8:	madd	x13, x8, x2, x0
    67ec:	cmp	w12, #0x8
    67f0:	add	x11, x11, x9
    67f4:	add	x13, x13, x9, lsl #2
    67f8:	ldrb	w9, [x11, x1]
    67fc:	ldr	w11, [x13, x4]
    6800:	b.lt	6840 <BZ2_compressBlock@@Base+0x310c>  // b.tstop
    6804:	ldr	w13, [x22]
    6808:	ldr	x12, [x19]
    680c:	lsr	w10, w10, #24
    6810:	strb	w10, [x12, w13, sxtw]
    6814:	ldr	w10, [x22]
    6818:	add	w13, w10, #0x1
    681c:	str	w13, [x22]
    6820:	ldr	w10, [x24]
    6824:	lsl	w10, w10, #8
    6828:	str	w10, [x24]
    682c:	ldr	w14, [x21]
    6830:	sub	w12, w14, #0x8
    6834:	cmp	w14, #0xf
    6838:	str	w12, [x21]
    683c:	b.gt	6808 <BZ2_compressBlock@@Base+0x30d4>
    6840:	add	w13, w12, w9
    6844:	neg	w12, w13
    6848:	lsl	w11, w11, w12
    684c:	orr	w10, w11, w10
    6850:	add	x9, x16, x28, lsl #1
    6854:	str	w13, [x0, #644]
    6858:	str	w10, [x0, #640]
    685c:	ldrh	w11, [x9, #82]
    6860:	madd	x12, x8, x18, x0
    6864:	madd	x14, x8, x2, x0
    6868:	cmp	w13, #0x8
    686c:	add	x12, x12, x11
    6870:	add	x11, x14, x11, lsl #2
    6874:	ldrb	w12, [x12, x1]
    6878:	ldr	w11, [x11, x4]
    687c:	b.lt	68bc <BZ2_compressBlock@@Base+0x3188>  // b.tstop
    6880:	ldr	w14, [x22]
    6884:	ldr	x13, [x19]
    6888:	lsr	w10, w10, #24
    688c:	strb	w10, [x13, w14, sxtw]
    6890:	ldr	w10, [x22]
    6894:	add	w14, w10, #0x1
    6898:	str	w14, [x22]
    689c:	ldr	w10, [x24]
    68a0:	lsl	w10, w10, #8
    68a4:	str	w10, [x24]
    68a8:	ldr	w15, [x21]
    68ac:	sub	w13, w15, #0x8
    68b0:	cmp	w15, #0xf
    68b4:	str	w13, [x21]
    68b8:	b.gt	6884 <BZ2_compressBlock@@Base+0x3150>
    68bc:	add	w12, w13, w12
    68c0:	neg	w13, w12
    68c4:	lsl	w11, w11, w13
    68c8:	orr	w10, w11, w10
    68cc:	str	w12, [x0, #644]
    68d0:	str	w10, [x0, #640]
    68d4:	ldrh	w9, [x9, #84]
    68d8:	madd	x11, x8, x18, x0
    68dc:	madd	x13, x8, x2, x0
    68e0:	cmp	w12, #0x8
    68e4:	add	x11, x11, x9
    68e8:	add	x13, x13, x9, lsl #2
    68ec:	ldrb	w9, [x11, x1]
    68f0:	ldr	w11, [x13, x4]
    68f4:	b.lt	6934 <BZ2_compressBlock@@Base+0x3200>  // b.tstop
    68f8:	ldr	w13, [x22]
    68fc:	ldr	x12, [x19]
    6900:	lsr	w10, w10, #24
    6904:	strb	w10, [x12, w13, sxtw]
    6908:	ldr	w10, [x22]
    690c:	add	w13, w10, #0x1
    6910:	str	w13, [x22]
    6914:	ldr	w10, [x24]
    6918:	lsl	w10, w10, #8
    691c:	str	w10, [x24]
    6920:	ldr	w14, [x21]
    6924:	sub	w12, w14, #0x8
    6928:	cmp	w14, #0xf
    692c:	str	w12, [x21]
    6930:	b.gt	68fc <BZ2_compressBlock@@Base+0x31c8>
    6934:	add	w13, w12, w9
    6938:	neg	w12, w13
    693c:	lsl	w11, w11, w12
    6940:	orr	w10, w11, w10
    6944:	add	x9, x16, x28, lsl #1
    6948:	str	w13, [x0, #644]
    694c:	str	w10, [x0, #640]
    6950:	ldrh	w11, [x9, #86]
    6954:	madd	x12, x8, x18, x0
    6958:	madd	x14, x8, x2, x0
    695c:	cmp	w13, #0x8
    6960:	add	x12, x12, x11
    6964:	add	x11, x14, x11, lsl #2
    6968:	ldrb	w12, [x12, x1]
    696c:	ldr	w11, [x11, x4]
    6970:	b.lt	69b0 <BZ2_compressBlock@@Base+0x327c>  // b.tstop
    6974:	ldr	w14, [x22]
    6978:	ldr	x13, [x19]
    697c:	lsr	w10, w10, #24
    6980:	strb	w10, [x13, w14, sxtw]
    6984:	ldr	w10, [x22]
    6988:	add	w14, w10, #0x1
    698c:	str	w14, [x22]
    6990:	ldr	w10, [x24]
    6994:	lsl	w10, w10, #8
    6998:	str	w10, [x24]
    699c:	ldr	w15, [x21]
    69a0:	sub	w13, w15, #0x8
    69a4:	cmp	w15, #0xf
    69a8:	str	w13, [x21]
    69ac:	b.gt	6978 <BZ2_compressBlock@@Base+0x3244>
    69b0:	add	w12, w13, w12
    69b4:	neg	w13, w12
    69b8:	lsl	w11, w11, w13
    69bc:	orr	w10, w11, w10
    69c0:	str	w12, [x0, #644]
    69c4:	str	w10, [x0, #640]
    69c8:	ldrh	w9, [x9, #88]
    69cc:	madd	x11, x8, x18, x0
    69d0:	madd	x13, x8, x2, x0
    69d4:	cmp	w12, #0x8
    69d8:	add	x11, x11, x9
    69dc:	add	x13, x13, x9, lsl #2
    69e0:	ldrb	w9, [x11, x1]
    69e4:	ldr	w11, [x13, x4]
    69e8:	b.lt	6a28 <BZ2_compressBlock@@Base+0x32f4>  // b.tstop
    69ec:	ldr	w13, [x22]
    69f0:	ldr	x12, [x19]
    69f4:	lsr	w10, w10, #24
    69f8:	strb	w10, [x12, w13, sxtw]
    69fc:	ldr	w10, [x22]
    6a00:	add	w13, w10, #0x1
    6a04:	str	w13, [x22]
    6a08:	ldr	w10, [x24]
    6a0c:	lsl	w10, w10, #8
    6a10:	str	w10, [x24]
    6a14:	ldr	w14, [x21]
    6a18:	sub	w12, w14, #0x8
    6a1c:	cmp	w14, #0xf
    6a20:	str	w12, [x21]
    6a24:	b.gt	69f0 <BZ2_compressBlock@@Base+0x32bc>
    6a28:	add	w13, w12, w9
    6a2c:	neg	w12, w13
    6a30:	lsl	w11, w11, w12
    6a34:	orr	w10, w11, w10
    6a38:	add	x9, x16, x28, lsl #1
    6a3c:	str	w13, [x0, #644]
    6a40:	str	w10, [x0, #640]
    6a44:	ldrh	w11, [x9, #90]
    6a48:	madd	x12, x8, x18, x0
    6a4c:	madd	x14, x8, x2, x0
    6a50:	cmp	w13, #0x8
    6a54:	add	x12, x12, x11
    6a58:	add	x11, x14, x11, lsl #2
    6a5c:	ldrb	w12, [x12, x1]
    6a60:	ldr	w11, [x11, x4]
    6a64:	b.lt	6aa4 <BZ2_compressBlock@@Base+0x3370>  // b.tstop
    6a68:	ldr	w14, [x22]
    6a6c:	ldr	x13, [x19]
    6a70:	lsr	w10, w10, #24
    6a74:	strb	w10, [x13, w14, sxtw]
    6a78:	ldr	w10, [x22]
    6a7c:	add	w14, w10, #0x1
    6a80:	str	w14, [x22]
    6a84:	ldr	w10, [x24]
    6a88:	lsl	w10, w10, #8
    6a8c:	str	w10, [x24]
    6a90:	ldr	w15, [x21]
    6a94:	sub	w13, w15, #0x8
    6a98:	cmp	w15, #0xf
    6a9c:	str	w13, [x21]
    6aa0:	b.gt	6a6c <BZ2_compressBlock@@Base+0x3338>
    6aa4:	add	w12, w13, w12
    6aa8:	neg	w13, w12
    6aac:	lsl	w11, w11, w13
    6ab0:	orr	w10, w11, w10
    6ab4:	str	w12, [x0, #644]
    6ab8:	str	w10, [x0, #640]
    6abc:	ldrh	w9, [x9, #92]
    6ac0:	madd	x11, x8, x18, x0
    6ac4:	madd	x13, x8, x2, x0
    6ac8:	cmp	w12, #0x8
    6acc:	add	x11, x11, x9
    6ad0:	add	x13, x13, x9, lsl #2
    6ad4:	ldrb	w9, [x11, x1]
    6ad8:	ldr	w11, [x13, x4]
    6adc:	b.lt	6b1c <BZ2_compressBlock@@Base+0x33e8>  // b.tstop
    6ae0:	ldr	w13, [x22]
    6ae4:	ldr	x12, [x19]
    6ae8:	lsr	w10, w10, #24
    6aec:	strb	w10, [x12, w13, sxtw]
    6af0:	ldr	w10, [x22]
    6af4:	add	w13, w10, #0x1
    6af8:	str	w13, [x22]
    6afc:	ldr	w10, [x24]
    6b00:	lsl	w10, w10, #8
    6b04:	str	w10, [x24]
    6b08:	ldr	w14, [x21]
    6b0c:	sub	w12, w14, #0x8
    6b10:	cmp	w14, #0xf
    6b14:	str	w12, [x21]
    6b18:	b.gt	6ae4 <BZ2_compressBlock@@Base+0x33b0>
    6b1c:	add	w13, w12, w9
    6b20:	neg	w12, w13
    6b24:	lsl	w11, w11, w12
    6b28:	orr	w10, w11, w10
    6b2c:	add	x9, x16, x28, lsl #1
    6b30:	str	w13, [x0, #644]
    6b34:	str	w10, [x0, #640]
    6b38:	ldrh	w11, [x9, #94]
    6b3c:	madd	x12, x8, x18, x0
    6b40:	madd	x14, x8, x2, x0
    6b44:	cmp	w13, #0x8
    6b48:	add	x12, x12, x11
    6b4c:	add	x11, x14, x11, lsl #2
    6b50:	ldrb	w12, [x12, x1]
    6b54:	ldr	w11, [x11, x4]
    6b58:	b.lt	6b98 <BZ2_compressBlock@@Base+0x3464>  // b.tstop
    6b5c:	ldr	w14, [x22]
    6b60:	ldr	x13, [x19]
    6b64:	lsr	w10, w10, #24
    6b68:	strb	w10, [x13, w14, sxtw]
    6b6c:	ldr	w10, [x22]
    6b70:	add	w14, w10, #0x1
    6b74:	str	w14, [x22]
    6b78:	ldr	w10, [x24]
    6b7c:	lsl	w10, w10, #8
    6b80:	str	w10, [x24]
    6b84:	ldr	w15, [x21]
    6b88:	sub	w13, w15, #0x8
    6b8c:	cmp	w15, #0xf
    6b90:	str	w13, [x21]
    6b94:	b.gt	6b60 <BZ2_compressBlock@@Base+0x342c>
    6b98:	add	w12, w13, w12
    6b9c:	neg	w13, w12
    6ba0:	lsl	w11, w11, w13
    6ba4:	orr	w10, w11, w10
    6ba8:	str	w12, [x0, #644]
    6bac:	str	w10, [x0, #640]
    6bb0:	ldrh	w9, [x9, #96]
    6bb4:	madd	x11, x8, x18, x0
    6bb8:	madd	x13, x8, x2, x0
    6bbc:	cmp	w12, #0x8
    6bc0:	add	x11, x11, x9
    6bc4:	add	x9, x13, x9, lsl #2
    6bc8:	ldrb	w11, [x11, x1]
    6bcc:	ldr	w9, [x9, x4]
    6bd0:	b.lt	6c10 <BZ2_compressBlock@@Base+0x34dc>  // b.tstop
    6bd4:	ldr	w13, [x22]
    6bd8:	ldr	x12, [x19]
    6bdc:	lsr	w10, w10, #24
    6be0:	strb	w10, [x12, w13, sxtw]
    6be4:	ldr	w10, [x22]
    6be8:	add	w13, w10, #0x1
    6bec:	str	w13, [x22]
    6bf0:	ldr	w10, [x24]
    6bf4:	lsl	w10, w10, #8
    6bf8:	str	w10, [x24]
    6bfc:	ldr	w14, [x21]
    6c00:	sub	w12, w14, #0x8
    6c04:	cmp	w14, #0xf
    6c08:	str	w12, [x21]
    6c0c:	b.gt	6bd8 <BZ2_compressBlock@@Base+0x34a4>
    6c10:	add	w11, w12, w11
    6c14:	neg	w12, w11
    6c18:	lsl	w9, w9, w12
    6c1c:	orr	w9, w9, w10
    6c20:	str	w11, [x0, #644]
    6c24:	str	w9, [x0, #640]
    6c28:	ldrh	w10, [x16, x5, lsl #1]
    6c2c:	madd	x12, x8, x18, x0
    6c30:	madd	x8, x8, x2, x0
    6c34:	cmp	w11, #0x8
    6c38:	add	x12, x12, x10
    6c3c:	add	x8, x8, x10, lsl #2
    6c40:	ldrb	w10, [x12, x1]
    6c44:	ldr	w8, [x8, x4]
    6c48:	b.lt	6c88 <BZ2_compressBlock@@Base+0x3554>  // b.tstop
    6c4c:	ldr	w12, [x22]
    6c50:	ldr	x11, [x19]
    6c54:	lsr	w9, w9, #24
    6c58:	strb	w9, [x11, w12, sxtw]
    6c5c:	ldr	w9, [x22]
    6c60:	add	w12, w9, #0x1
    6c64:	str	w12, [x22]
    6c68:	ldr	w9, [x24]
    6c6c:	lsl	w9, w9, #8
    6c70:	str	w9, [x24]
    6c74:	ldr	w13, [x21]
    6c78:	sub	w11, w13, #0x8
    6c7c:	cmp	w13, #0xf
    6c80:	str	w11, [x21]
    6c84:	b.gt	6c50 <BZ2_compressBlock@@Base+0x351c>
    6c88:	add	w10, w11, w10
    6c8c:	neg	w11, w10
    6c90:	lsl	w8, w8, w11
    6c94:	orr	w8, w8, w9
    6c98:	str	w8, [x24]
    6c9c:	str	w10, [x21]
    6ca0:	b	6d40 <BZ2_compressBlock@@Base+0x360c>
    6ca4:	cmp	w27, w28
    6ca8:	b.lt	6d40 <BZ2_compressBlock@@Base+0x360c>  // b.tstop
    6cac:	ldr	w11, [x21]
    6cb0:	ldr	w10, [x24]
    6cb4:	sxtw	x9, w27
    6cb8:	ldrb	w12, [x8]
    6cbc:	ldrh	w13, [x16, x28, lsl #1]
    6cc0:	cmp	w11, #0x8
    6cc4:	madd	x14, x12, x18, x0
    6cc8:	madd	x12, x12, x2, x0
    6ccc:	add	x14, x14, x13
    6cd0:	add	x12, x12, x13, lsl #2
    6cd4:	ldrb	w13, [x14, x1]
    6cd8:	ldr	w12, [x12, x4]
    6cdc:	b.lt	6d1c <BZ2_compressBlock@@Base+0x35e8>  // b.tstop
    6ce0:	ldr	w14, [x22]
    6ce4:	ldr	x11, [x19]
    6ce8:	lsr	w10, w10, #24
    6cec:	strb	w10, [x11, w14, sxtw]
    6cf0:	ldr	w10, [x22]
    6cf4:	add	w14, w10, #0x1
    6cf8:	str	w14, [x22]
    6cfc:	ldr	w10, [x24]
    6d00:	lsl	w10, w10, #8
    6d04:	str	w10, [x24]
    6d08:	ldr	w15, [x21]
    6d0c:	sub	w11, w15, #0x8
    6d10:	cmp	w15, #0xf
    6d14:	str	w11, [x21]
    6d18:	b.gt	6ce4 <BZ2_compressBlock@@Base+0x35b0>
    6d1c:	add	w11, w11, w13
    6d20:	neg	w13, w11
    6d24:	lsl	w12, w12, w13
    6d28:	cmp	x28, x9
    6d2c:	add	x28, x28, #0x1
    6d30:	orr	w10, w12, w10
    6d34:	str	w10, [x24]
    6d38:	str	w11, [x21]
    6d3c:	b.ne	6cb8 <BZ2_compressBlock@@Base+0x3584>  // b.any
    6d40:	ldr	w8, [x0, #668]
    6d44:	add	w9, w27, #0x1
    6d48:	add	x26, x26, #0x1
    6d4c:	cmp	w9, w8
    6d50:	b.lt	545c <BZ2_compressBlock@@Base+0x1d28>  // b.tstop
    6d54:	b	6d5c <BZ2_compressBlock@@Base+0x3628>
    6d58:	mov	w26, wzr
    6d5c:	adrp	x19, 1d000 <BZ2_bzerror@@Base+0x10c24>
    6d60:	ldr	w20, [sp]
    6d64:	ldr	x19, [x19, #4016]
    6d68:	ldr	x8, [sp, #112]
    6d6c:	cmp	w26, w8
    6d70:	b.eq	6d80 <BZ2_compressBlock@@Base+0x364c>  // b.none
    6d74:	mov	w0, #0xbbf                 	// #3007
    6d78:	bl	16f0 <BZ2_bz__AssertH__fail@plt>
    6d7c:	ldr	x0, [sp, #96]
    6d80:	ldr	w8, [x0, #656]
    6d84:	cmp	w8, #0x3
    6d88:	b.ge	7134 <BZ2_compressBlock@@Base+0x3a00>  // b.tcont
    6d8c:	tst	w20, #0xff
    6d90:	b.eq	703c <BZ2_compressBlock@@Base+0x3908>  // b.none
    6d94:	ldr	w10, [x0, #644]
    6d98:	cmp	w10, #0x7
    6d9c:	b.le	6de4 <BZ2_compressBlock@@Base+0x36b0>
    6da0:	ldr	w9, [x0, #640]
    6da4:	ldr	w8, [x0, #116]
    6da8:	ldr	x10, [x0, #80]
    6dac:	lsr	w9, w9, #24
    6db0:	strb	w9, [x10, w8, sxtw]
    6db4:	ldr	w8, [x0, #116]
    6db8:	ldr	w9, [x0, #640]
    6dbc:	ldr	w11, [x0, #644]
    6dc0:	add	w8, w8, #0x1
    6dc4:	lsl	w9, w9, #8
    6dc8:	sub	w10, w11, #0x8
    6dcc:	cmp	w11, #0xf
    6dd0:	str	w8, [x0, #116]
    6dd4:	str	w9, [x0, #640]
    6dd8:	str	w10, [x0, #644]
    6ddc:	b.gt	6da8 <BZ2_compressBlock@@Base+0x3674>
    6de0:	b	6de8 <BZ2_compressBlock@@Base+0x36b4>
    6de4:	ldr	w9, [x0, #640]
    6de8:	mov	w8, #0x18                  	// #24
    6dec:	mov	w12, #0x17                  	// #23
    6df0:	sub	w13, w8, w10
    6df4:	lsl	w12, w12, w13
    6df8:	add	w11, w10, #0x8
    6dfc:	orr	w9, w12, w9
    6e00:	str	w9, [x0, #640]
    6e04:	str	w11, [x0, #644]
    6e08:	tbnz	w10, #31, 6e48 <BZ2_compressBlock@@Base+0x3714>
    6e0c:	ldr	w10, [x0, #116]
    6e10:	ldr	x11, [x0, #80]
    6e14:	lsr	w9, w9, #24
    6e18:	strb	w9, [x11, w10, sxtw]
    6e1c:	ldr	w9, [x0, #116]
    6e20:	ldr	w11, [x0, #640]
    6e24:	ldr	w12, [x0, #644]
    6e28:	add	w10, w9, #0x1
    6e2c:	lsl	w9, w11, #8
    6e30:	sub	w11, w12, #0x8
    6e34:	cmp	w12, #0xf
    6e38:	str	w10, [x0, #116]
    6e3c:	str	w9, [x0, #640]
    6e40:	str	w11, [x0, #644]
    6e44:	b.gt	6e10 <BZ2_compressBlock@@Base+0x36dc>
    6e48:	sub	w8, w8, w11
    6e4c:	mov	w12, #0x72                  	// #114
    6e50:	lsl	w8, w12, w8
    6e54:	add	w10, w11, #0x8
    6e58:	orr	w9, w8, w9
    6e5c:	str	w9, [x0, #640]
    6e60:	str	w10, [x0, #644]
    6e64:	tbnz	w11, #31, 6ea4 <BZ2_compressBlock@@Base+0x3770>
    6e68:	ldr	w8, [x0, #116]
    6e6c:	ldr	x10, [x0, #80]
    6e70:	lsr	w9, w9, #24
    6e74:	strb	w9, [x10, w8, sxtw]
    6e78:	ldr	w8, [x0, #116]
    6e7c:	ldr	w9, [x0, #640]
    6e80:	ldr	w11, [x0, #644]
    6e84:	add	w8, w8, #0x1
    6e88:	lsl	w9, w9, #8
    6e8c:	sub	w10, w11, #0x8
    6e90:	cmp	w11, #0xf
    6e94:	str	w8, [x0, #116]
    6e98:	str	w9, [x0, #640]
    6e9c:	str	w10, [x0, #644]
    6ea0:	b.gt	6e6c <BZ2_compressBlock@@Base+0x3738>
    6ea4:	mov	w8, #0x18                  	// #24
    6ea8:	mov	w12, #0x45                  	// #69
    6eac:	sub	w13, w8, w10
    6eb0:	lsl	w12, w12, w13
    6eb4:	add	w11, w10, #0x8
    6eb8:	orr	w9, w12, w9
    6ebc:	str	w9, [x0, #640]
    6ec0:	str	w11, [x0, #644]
    6ec4:	tbnz	w10, #31, 6f04 <BZ2_compressBlock@@Base+0x37d0>
    6ec8:	ldr	w10, [x0, #116]
    6ecc:	ldr	x11, [x0, #80]
    6ed0:	lsr	w9, w9, #24
    6ed4:	strb	w9, [x11, w10, sxtw]
    6ed8:	ldr	w9, [x0, #116]
    6edc:	ldr	w11, [x0, #640]
    6ee0:	ldr	w12, [x0, #644]
    6ee4:	add	w10, w9, #0x1
    6ee8:	lsl	w9, w11, #8
    6eec:	sub	w11, w12, #0x8
    6ef0:	cmp	w12, #0xf
    6ef4:	str	w10, [x0, #116]
    6ef8:	str	w9, [x0, #640]
    6efc:	str	w11, [x0, #644]
    6f00:	b.gt	6ecc <BZ2_compressBlock@@Base+0x3798>
    6f04:	sub	w8, w8, w11
    6f08:	mov	w12, #0x38                  	// #56
    6f0c:	lsl	w8, w12, w8
    6f10:	add	w10, w11, #0x8
    6f14:	orr	w9, w8, w9
    6f18:	str	w9, [x0, #640]
    6f1c:	str	w10, [x0, #644]
    6f20:	tbnz	w11, #31, 6f60 <BZ2_compressBlock@@Base+0x382c>
    6f24:	ldr	w8, [x0, #116]
    6f28:	ldr	x10, [x0, #80]
    6f2c:	lsr	w9, w9, #24
    6f30:	strb	w9, [x10, w8, sxtw]
    6f34:	ldr	w8, [x0, #116]
    6f38:	ldr	w9, [x0, #640]
    6f3c:	ldr	w11, [x0, #644]
    6f40:	add	w8, w8, #0x1
    6f44:	lsl	w9, w9, #8
    6f48:	sub	w10, w11, #0x8
    6f4c:	cmp	w11, #0xf
    6f50:	str	w8, [x0, #116]
    6f54:	str	w9, [x0, #640]
    6f58:	str	w10, [x0, #644]
    6f5c:	b.gt	6f28 <BZ2_compressBlock@@Base+0x37f4>
    6f60:	mov	w8, #0x18                  	// #24
    6f64:	mov	w12, #0x50                  	// #80
    6f68:	sub	w13, w8, w10
    6f6c:	lsl	w12, w12, w13
    6f70:	add	w11, w10, #0x8
    6f74:	orr	w9, w12, w9
    6f78:	str	w9, [x0, #640]
    6f7c:	str	w11, [x0, #644]
    6f80:	tbnz	w10, #31, 6fc0 <BZ2_compressBlock@@Base+0x388c>
    6f84:	ldr	w10, [x0, #116]
    6f88:	ldr	x11, [x0, #80]
    6f8c:	lsr	w9, w9, #24
    6f90:	strb	w9, [x11, w10, sxtw]
    6f94:	ldr	w9, [x0, #116]
    6f98:	ldr	w11, [x0, #640]
    6f9c:	ldr	w12, [x0, #644]
    6fa0:	add	w10, w9, #0x1
    6fa4:	lsl	w9, w11, #8
    6fa8:	sub	w11, w12, #0x8
    6fac:	cmp	w12, #0xf
    6fb0:	str	w10, [x0, #116]
    6fb4:	str	w9, [x0, #640]
    6fb8:	str	w11, [x0, #644]
    6fbc:	b.gt	6f88 <BZ2_compressBlock@@Base+0x3854>
    6fc0:	ldr	w1, [x0, #652]
    6fc4:	sub	w8, w8, w11
    6fc8:	mov	w10, #0x90                  	// #144
    6fcc:	lsl	w8, w10, w8
    6fd0:	add	w11, w11, #0x8
    6fd4:	orr	w8, w8, w9
    6fd8:	str	w8, [x0, #640]
    6fdc:	str	w11, [x0, #644]
    6fe0:	bl	7178 <BZ2_compressBlock@@Base+0x3a44>
    6fe4:	ldr	x12, [sp, #96]
    6fe8:	ldr	w8, [x12, #656]
    6fec:	cmp	w8, #0x1
    6ff0:	b.gt	7154 <BZ2_compressBlock@@Base+0x3a20>
    6ff4:	ldr	w8, [x12, #644]
    6ff8:	cmp	w8, #0x1
    6ffc:	b.lt	703c <BZ2_compressBlock@@Base+0x3908>  // b.tstop
    7000:	ldr	w8, [x12, #640]
    7004:	ldr	w9, [x12, #116]
    7008:	ldr	x10, [x12, #80]
    700c:	lsr	w8, w8, #24
    7010:	strb	w8, [x10, w9, sxtw]
    7014:	ldr	w8, [x12, #116]
    7018:	ldr	w10, [x12, #640]
    701c:	ldr	w11, [x12, #644]
    7020:	add	w9, w8, #0x1
    7024:	lsl	w8, w10, #8
    7028:	subs	w10, w11, #0x8
    702c:	str	w9, [x12, #116]
    7030:	str	w8, [x12, #640]
    7034:	str	w10, [x12, #644]
    7038:	b.gt	7008 <BZ2_compressBlock@@Base+0x38d4>
    703c:	add	sp, sp, #0x1a0
    7040:	ldp	x20, x19, [sp, #80]
    7044:	ldp	x22, x21, [sp, #64]
    7048:	ldp	x24, x23, [sp, #48]
    704c:	ldp	x26, x25, [sp, #32]
    7050:	ldp	x28, x27, [sp, #16]
    7054:	ldp	x29, x30, [sp], #96
    7058:	ret
    705c:	adrp	x8, 1d000 <BZ2_bzerror@@Base+0x10c24>
    7060:	ldr	x8, [x8, #4016]
    7064:	adrp	x1, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    7068:	add	x1, x1, #0x708
    706c:	ldr	x0, [x8]
    7070:	bl	1700 <fprintf@plt>
    7074:	ldr	x0, [sp, #96]
    7078:	b	379c <BZ2_compressBlock@@Base+0x68>
    707c:	adrp	x8, 1d000 <BZ2_bzerror@@Base+0x10c24>
    7080:	ldr	x8, [x8, #4016]
    7084:	ldr	w2, [x18, #108]
    7088:	ldr	w4, [x18, #124]
    708c:	adrp	x1, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    7090:	ldr	x0, [x8]
    7094:	add	x1, x1, #0x76a
    7098:	bl	1700 <fprintf@plt>
    709c:	ldr	x18, [sp, #96]
    70a0:	b	3e84 <BZ2_compressBlock@@Base+0x750>
    70a4:	adrp	x10, 1d000 <BZ2_bzerror@@Base+0x10c24>
    70a8:	ldr	x10, [x10, #4016]
    70ac:	adrp	x1, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    70b0:	sub	w2, w9, w8
    70b4:	add	x1, x1, #0x812
    70b8:	ldr	x0, [x10]
    70bc:	bl	1700 <fprintf@plt>
    70c0:	ldr	x4, [sp, #64]
    70c4:	ldr	x0, [sp, #96]
    70c8:	ldr	w9, [x22]
    70cc:	ldr	w11, [x21]
    70d0:	ldr	w10, [x24]
    70d4:	b	5098 <BZ2_compressBlock@@Base+0x1964>
    70d8:	adrp	x10, 1d000 <BZ2_bzerror@@Base+0x10c24>
    70dc:	ldr	x10, [x10, #4016]
    70e0:	adrp	x1, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    70e4:	sub	w2, w8, w9
    70e8:	add	x1, x1, #0x82c
    70ec:	ldr	x0, [x10]
    70f0:	bl	1700 <fprintf@plt>
    70f4:	ldr	x4, [sp, #64]
    70f8:	ldr	x0, [sp, #96]
    70fc:	ldr	w8, [x22]
    7100:	ldr	w11, [x21]
    7104:	ldr	w10, [x24]
    7108:	b	524c <BZ2_compressBlock@@Base+0x1b18>
    710c:	adrp	x9, 1d000 <BZ2_bzerror@@Base+0x10c24>
    7110:	ldr	x9, [x9, #4016]
    7114:	adrp	x1, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    7118:	sub	w2, w23, w8
    711c:	add	x1, x1, #0x83b
    7120:	ldr	x0, [x9]
    7124:	bl	1700 <fprintf@plt>
    7128:	ldr	x0, [sp, #96]
    712c:	ldr	w23, [x22]
    7130:	b	5430 <BZ2_compressBlock@@Base+0x1cfc>
    7134:	ldr	w8, [x22]
    7138:	ldr	x0, [x19]
    713c:	adrp	x1, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    7140:	add	x1, x1, #0x84d
    7144:	sub	w2, w8, w23
    7148:	bl	1700 <fprintf@plt>
    714c:	ldr	x0, [sp, #96]
    7150:	b	6d8c <BZ2_compressBlock@@Base+0x3658>
    7154:	adrp	x8, 1d000 <BZ2_bzerror@@Base+0x10c24>
    7158:	ldr	x8, [x8, #4016]
    715c:	ldr	w2, [x12, #652]
    7160:	adrp	x1, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    7164:	add	x1, x1, #0x746
    7168:	ldr	x0, [x8]
    716c:	bl	1700 <fprintf@plt>
    7170:	ldr	x12, [sp, #96]
    7174:	b	6ff4 <BZ2_compressBlock@@Base+0x38c0>
    7178:	ldr	w11, [x0, #644]
    717c:	lsr	w8, w1, #24
    7180:	cmp	w11, #0x7
    7184:	b.le	71cc <BZ2_compressBlock@@Base+0x3a98>
    7188:	ldr	w10, [x0, #640]
    718c:	ldr	w9, [x0, #116]
    7190:	ldr	x11, [x0, #80]
    7194:	lsr	w10, w10, #24
    7198:	strb	w10, [x11, w9, sxtw]
    719c:	ldr	w9, [x0, #116]
    71a0:	ldr	w10, [x0, #640]
    71a4:	ldr	w12, [x0, #644]
    71a8:	add	w9, w9, #0x1
    71ac:	lsl	w10, w10, #8
    71b0:	sub	w11, w12, #0x8
    71b4:	cmp	w12, #0xf
    71b8:	str	w9, [x0, #116]
    71bc:	str	w10, [x0, #640]
    71c0:	str	w11, [x0, #644]
    71c4:	b.gt	7190 <BZ2_compressBlock@@Base+0x3a5c>
    71c8:	b	71d0 <BZ2_compressBlock@@Base+0x3a9c>
    71cc:	ldr	w10, [x0, #640]
    71d0:	mov	w9, #0x18                  	// #24
    71d4:	sub	w13, w9, w11
    71d8:	lsl	w8, w8, w13
    71dc:	add	w12, w11, #0x8
    71e0:	orr	w10, w8, w10
    71e4:	ubfx	w8, w1, #16, #8
    71e8:	str	w12, [x0, #644]
    71ec:	str	w10, [x0, #640]
    71f0:	tbnz	w11, #31, 7230 <BZ2_compressBlock@@Base+0x3afc>
    71f4:	ldr	w11, [x0, #116]
    71f8:	ldr	x12, [x0, #80]
    71fc:	lsr	w10, w10, #24
    7200:	strb	w10, [x12, w11, sxtw]
    7204:	ldr	w10, [x0, #116]
    7208:	ldr	w12, [x0, #640]
    720c:	ldr	w13, [x0, #644]
    7210:	add	w11, w10, #0x1
    7214:	lsl	w10, w12, #8
    7218:	sub	w12, w13, #0x8
    721c:	cmp	w13, #0xf
    7220:	str	w11, [x0, #116]
    7224:	str	w10, [x0, #640]
    7228:	str	w12, [x0, #644]
    722c:	b.gt	71f8 <BZ2_compressBlock@@Base+0x3ac4>
    7230:	sub	w9, w9, w12
    7234:	lsl	w8, w8, w9
    7238:	add	w11, w12, #0x8
    723c:	orr	w10, w8, w10
    7240:	ubfx	w9, w1, #8, #8
    7244:	str	w11, [x0, #644]
    7248:	str	w10, [x0, #640]
    724c:	tbnz	w12, #31, 728c <BZ2_compressBlock@@Base+0x3b58>
    7250:	ldr	w8, [x0, #116]
    7254:	ldr	x11, [x0, #80]
    7258:	lsr	w10, w10, #24
    725c:	strb	w10, [x11, w8, sxtw]
    7260:	ldr	w8, [x0, #116]
    7264:	ldr	w10, [x0, #640]
    7268:	ldr	w12, [x0, #644]
    726c:	add	w8, w8, #0x1
    7270:	lsl	w10, w10, #8
    7274:	sub	w11, w12, #0x8
    7278:	cmp	w12, #0xf
    727c:	str	w8, [x0, #116]
    7280:	str	w10, [x0, #640]
    7284:	str	w11, [x0, #644]
    7288:	b.gt	7254 <BZ2_compressBlock@@Base+0x3b20>
    728c:	mov	w8, #0x18                  	// #24
    7290:	sub	w13, w8, w11
    7294:	lsl	w9, w9, w13
    7298:	add	w12, w11, #0x8
    729c:	orr	w10, w9, w10
    72a0:	and	w9, w1, #0xff
    72a4:	str	w12, [x0, #644]
    72a8:	str	w10, [x0, #640]
    72ac:	tbnz	w11, #31, 72ec <BZ2_compressBlock@@Base+0x3bb8>
    72b0:	ldr	w11, [x0, #116]
    72b4:	ldr	x12, [x0, #80]
    72b8:	lsr	w10, w10, #24
    72bc:	strb	w10, [x12, w11, sxtw]
    72c0:	ldr	w10, [x0, #116]
    72c4:	ldr	w12, [x0, #640]
    72c8:	ldr	w13, [x0, #644]
    72cc:	add	w11, w10, #0x1
    72d0:	lsl	w10, w12, #8
    72d4:	sub	w12, w13, #0x8
    72d8:	cmp	w13, #0xf
    72dc:	str	w11, [x0, #116]
    72e0:	str	w10, [x0, #640]
    72e4:	str	w12, [x0, #644]
    72e8:	b.gt	72b4 <BZ2_compressBlock@@Base+0x3b80>
    72ec:	sub	w8, w8, w12
    72f0:	lsl	w8, w9, w8
    72f4:	add	w11, w12, #0x8
    72f8:	orr	w8, w8, w10
    72fc:	str	w8, [x0, #640]
    7300:	str	w11, [x0, #644]
    7304:	ret

0000000000007308 <BZ2_decompress@@Base>:
    7308:	sub	sp, sp, #0xf0
    730c:	stp	x29, x30, [sp, #144]
    7310:	stp	x28, x27, [sp, #160]
    7314:	stp	x26, x25, [sp, #176]
    7318:	stp	x24, x23, [sp, #192]
    731c:	stp	x22, x21, [sp, #208]
    7320:	stp	x20, x19, [sp, #224]
    7324:	add	x29, sp, #0x90
    7328:	ldr	w8, [x0, #8]
    732c:	ldr	x27, [x0]
    7330:	mov	w9, #0xfa24                	// #64036
    7334:	mov	x21, x0
    7338:	subs	w8, w8, #0xa
    733c:	add	x22, x0, x9
    7340:	b.ne	73b8 <BZ2_decompress@@Base+0xb0>  // b.any
    7344:	mov	x20, xzr
    7348:	mov	x3, xzr
    734c:	mov	w24, wzr
    7350:	mov	w2, wzr
    7354:	mov	w14, wzr
    7358:	mov	w7, wzr
    735c:	mov	w1, wzr
    7360:	mov	w28, wzr
    7364:	mov	w4, wzr
    7368:	mov	w30, wzr
    736c:	mov	w18, wzr
    7370:	mov	w26, wzr
    7374:	mov	w5, wzr
    7378:	mov	w16, wzr
    737c:	mov	w15, wzr
    7380:	mov	w19, wzr
    7384:	mov	w25, wzr
    7388:	mov	w6, wzr
    738c:	mov	w17, wzr
    7390:	mov	w23, wzr
    7394:	mov	w10, wzr
    7398:	movi	v0.2d, #0x0
    739c:	stur	xzr, [x29, #-24]
    73a0:	stur	xzr, [x29, #-36]
    73a4:	stur	q0, [x22, #92]
    73a8:	stp	q0, q0, [x22, #64]
    73ac:	stp	q0, q0, [x22, #32]
    73b0:	stp	q0, q0, [x22]
    73b4:	b	73fc <BZ2_decompress@@Base+0xf4>
    73b8:	ldp	w9, w15, [x22, #24]
    73bc:	ldp	w10, w23, [x22]
    73c0:	ldp	w17, w6, [x22, #8]
    73c4:	ldp	w25, w19, [x22, #16]
    73c8:	stur	w9, [x29, #-32]
    73cc:	ldp	w28, w9, [x22, #56]
    73d0:	ldp	w16, w5, [x22, #32]
    73d4:	ldp	w26, w18, [x22, #40]
    73d8:	ldp	w30, w4, [x22, #48]
    73dc:	stur	w9, [x29, #-36]
    73e0:	ldur	x9, [x22, #84]
    73e4:	ldp	w1, w7, [x22, #64]
    73e8:	ldp	w14, w2, [x22, #72]
    73ec:	ldr	w24, [x22, #80]
    73f0:	ldur	x3, [x22, #92]
    73f4:	ldur	x20, [x22, #100]
    73f8:	stur	x9, [x29, #-24]
    73fc:	cmp	w8, #0x28
    7400:	stur	x10, [x29, #-16]
    7404:	b.hi	743c <BZ2_decompress@@Base+0x134>  // b.pmore
    7408:	adrp	x10, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    740c:	add	x10, x10, #0x858
    7410:	adr	x9, 7420 <BZ2_decompress@@Base+0x118>
    7414:	ldrh	w11, [x10, x8, lsl #1]
    7418:	add	x9, x9, x11, lsl #2
    741c:	br	x9
    7420:	ldr	w8, [x21, #36]
    7424:	mov	w9, #0xa                   	// #10
    7428:	str	w9, [x21, #8]
    742c:	cmp	w8, #0x8
    7430:	b.lt	766c <BZ2_decompress@@Base+0x364>  // b.tstop
    7434:	ldr	w9, [x21, #32]
    7438:	b	76c0 <BZ2_decompress@@Base+0x3b8>
    743c:	mov	w0, #0xfa1                 	// #4001
    7440:	str	w6, [sp, #28]
    7444:	stur	w4, [x29, #-56]
    7448:	str	x20, [sp, #56]
    744c:	str	w24, [sp, #72]
    7450:	stur	w14, [x29, #-40]
    7454:	stur	w19, [x29, #-60]
    7458:	stur	x2, [x29, #-48]
    745c:	str	w23, [sp, #64]
    7460:	str	w28, [sp, #48]
    7464:	stur	w25, [x29, #-52]
    7468:	mov	w25, w5
    746c:	str	x26, [sp, #40]
    7470:	mov	x26, x3
    7474:	mov	w24, w7
    7478:	mov	w19, w30
    747c:	mov	x20, x1
    7480:	mov	w21, w17
    7484:	mov	x23, x18
    7488:	mov	x28, x15
    748c:	mov	w27, w16
    7490:	bl	16f0 <BZ2_bz__AssertH__fail@plt>
    7494:	mov	w0, #0xfa2                 	// #4002
    7498:	bl	16f0 <BZ2_bz__AssertH__fail@plt>
    749c:	mov	x15, x28
    74a0:	mov	x18, x23
    74a4:	mov	x1, x20
    74a8:	mov	w30, w19
    74ac:	mov	w7, w24
    74b0:	mov	x3, x26
    74b4:	ldr	x26, [sp, #40]
    74b8:	mov	w5, w25
    74bc:	ldp	w4, w25, [x29, #-56]
    74c0:	ldr	w28, [sp, #48]
    74c4:	ldr	w23, [sp, #64]
    74c8:	ldur	x2, [x29, #-48]
    74cc:	ldur	w19, [x29, #-60]
    74d0:	ldur	w14, [x29, #-40]
    74d4:	ldr	w24, [sp, #72]
    74d8:	ldr	x20, [sp, #56]
    74dc:	ldr	w6, [sp, #28]
    74e0:	mov	w16, w27
    74e4:	mov	w17, w21
    74e8:	b	88cc <BZ2_decompress@@Base+0x15c4>
    74ec:	ldr	w8, [x21, #36]
    74f0:	b	76d8 <BZ2_decompress@@Base+0x3d0>
    74f4:	ldr	w8, [x21, #36]
    74f8:	b	775c <BZ2_decompress@@Base+0x454>
    74fc:	ldr	w8, [x21, #36]
    7500:	b	77e0 <BZ2_decompress@@Base+0x4d8>
    7504:	ldr	w8, [x21, #36]
    7508:	b	7a0c <BZ2_decompress@@Base+0x704>
    750c:	ldr	w8, [x21, #36]
    7510:	b	7aac <BZ2_decompress@@Base+0x7a4>
    7514:	ldr	w8, [x21, #36]
    7518:	b	7b34 <BZ2_decompress@@Base+0x82c>
    751c:	ldr	w8, [x21, #36]
    7520:	b	7bbc <BZ2_decompress@@Base+0x8b4>
    7524:	ldr	w8, [x21, #36]
    7528:	b	7c44 <BZ2_decompress@@Base+0x93c>
    752c:	ldr	w8, [x21, #36]
    7530:	b	7d78 <BZ2_decompress@@Base+0xa70>
    7534:	ldr	w8, [x21, #36]
    7538:	b	7e00 <BZ2_decompress@@Base+0xaf8>
    753c:	ldr	w8, [x21, #36]
    7540:	b	7e88 <BZ2_decompress@@Base+0xb80>
    7544:	ldr	w8, [x21, #36]
    7548:	b	7f10 <BZ2_decompress@@Base+0xc08>
    754c:	ldr	w8, [x21, #36]
    7550:	b	7f9c <BZ2_decompress@@Base+0xc94>
    7554:	ldr	w8, [x21, #36]
    7558:	b	8024 <BZ2_decompress@@Base+0xd1c>
    755c:	ldr	w8, [x21, #36]
    7560:	b	80ac <BZ2_decompress@@Base+0xda4>
    7564:	ldr	w8, [x21, #36]
    7568:	mov	w9, #0x1f                  	// #31
    756c:	cmp	w8, #0xf
    7570:	str	w9, [x21, #8]
    7574:	b.lt	75ec <BZ2_decompress@@Base+0x2e4>  // b.tstop
    7578:	ldr	w10, [x21, #32]
    757c:	b	7648 <BZ2_decompress@@Base+0x340>
    7580:	ldr	w8, [x21, #36]
    7584:	ldur	x0, [x29, #-16]
    7588:	b	9288 <BZ2_decompress@@Base+0x1f80>
    758c:	ldr	w8, [x21, #36]
    7590:	b	8700 <BZ2_decompress@@Base+0x13f8>
    7594:	ldr	w8, [x21, #36]
    7598:	b	87ac <BZ2_decompress@@Base+0x14a4>
    759c:	ldr	w8, [x21, #36]
    75a0:	b	883c <BZ2_decompress@@Base+0x1534>
    75a4:	ldr	w8, [x21, #36]
    75a8:	b	7a24 <BZ2_decompress@@Base+0x71c>
    75ac:	ldr	w8, [x21, #36]
    75b0:	b	81d0 <BZ2_decompress@@Base+0xec8>
    75b4:	ldr	w8, [x21, #36]
    75b8:	b	8258 <BZ2_decompress@@Base+0xf50>
    75bc:	ldr	w8, [x21, #36]
    75c0:	b	82e0 <BZ2_decompress@@Base+0xfd8>
    75c4:	ldr	w8, [x21, #36]
    75c8:	b	8368 <BZ2_decompress@@Base+0x1060>
    75cc:	ldr	w8, [x21, #36]
    75d0:	b	83f4 <BZ2_decompress@@Base+0x10ec>
    75d4:	ldr	w8, [x21, #36]
    75d8:	b	847c <BZ2_decompress@@Base+0x1174>
    75dc:	ldr	w8, [x21, #36]
    75e0:	b	8504 <BZ2_decompress@@Base+0x11fc>
    75e4:	ldr	w8, [x21, #36]
    75e8:	b	858c <BZ2_decompress@@Base+0x1284>
    75ec:	ldr	x9, [x21]
    75f0:	ldr	w10, [x9, #8]
    75f4:	sub	w11, w10, #0x1
    75f8:	cmn	w11, #0x1
    75fc:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    7600:	ldr	x12, [x9]
    7604:	ldr	w13, [x21, #32]
    7608:	add	w8, w8, #0x8
    760c:	ldrb	w10, [x12], #1
    7610:	bfi	w10, w13, #8, #24
    7614:	stp	w10, w8, [x21, #32]
    7618:	ldr	w13, [x9, #12]
    761c:	str	x12, [x9]
    7620:	adds	w12, w13, #0x1
    7624:	stp	w11, w12, [x9, #8]
    7628:	b.cc	7638 <BZ2_decompress@@Base+0x330>  // b.lo, b.ul, b.last
    762c:	ldr	w12, [x9, #16]
    7630:	add	w12, w12, #0x1
    7634:	str	w12, [x9, #16]
    7638:	sub	w12, w8, #0x8
    763c:	cmp	w12, #0x6
    7640:	sub	w11, w11, #0x1
    7644:	b.le	75f8 <BZ2_decompress@@Base+0x2f0>
    7648:	sub	w8, w8, #0xf
    764c:	lsr	w10, w10, w8
    7650:	mov	w9, wzr
    7654:	ands	w19, w10, #0x7fff
    7658:	str	w8, [x21, #36]
    765c:	b.ne	8c58 <BZ2_decompress@@Base+0x1950>  // b.any
    7660:	mov	w0, #0xfffffffc            	// #-4
    7664:	mov	w19, w9
    7668:	b	88d8 <BZ2_decompress@@Base+0x15d0>
    766c:	ldr	w9, [x27, #8]
    7670:	sub	w10, w9, #0x1
    7674:	cmn	w10, #0x1
    7678:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    767c:	ldr	x11, [x27]
    7680:	ldr	w12, [x21, #32]
    7684:	add	w8, w8, #0x8
    7688:	ldrb	w9, [x11], #1
    768c:	bfi	w9, w12, #8, #24
    7690:	stp	w9, w8, [x21, #32]
    7694:	ldr	w12, [x27, #12]
    7698:	str	x11, [x27]
    769c:	adds	w11, w12, #0x1
    76a0:	stp	w10, w11, [x27, #8]
    76a4:	b.cc	76b4 <BZ2_decompress@@Base+0x3ac>  // b.lo, b.ul, b.last
    76a8:	ldr	w11, [x27, #16]
    76ac:	add	w11, w11, #0x1
    76b0:	str	w11, [x27, #16]
    76b4:	cmp	w8, #0x8
    76b8:	sub	w10, w10, #0x1
    76bc:	b.mi	7674 <BZ2_decompress@@Base+0x36c>  // b.first
    76c0:	sub	w8, w8, #0x8
    76c4:	lsr	w9, w9, w8
    76c8:	and	w9, w9, #0xff
    76cc:	cmp	w9, #0x42
    76d0:	str	w8, [x21, #36]
    76d4:	b.ne	7868 <BZ2_decompress@@Base+0x560>  // b.any
    76d8:	mov	w9, #0xb                   	// #11
    76dc:	cmp	w8, #0x8
    76e0:	str	w9, [x21, #8]
    76e4:	b.lt	76f0 <BZ2_decompress@@Base+0x3e8>  // b.tstop
    76e8:	ldr	w9, [x21, #32]
    76ec:	b	7744 <BZ2_decompress@@Base+0x43c>
    76f0:	ldr	w9, [x27, #8]
    76f4:	sub	w10, w9, #0x1
    76f8:	cmn	w10, #0x1
    76fc:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    7700:	ldr	x11, [x27]
    7704:	ldr	w12, [x21, #32]
    7708:	add	w8, w8, #0x8
    770c:	ldrb	w9, [x11], #1
    7710:	bfi	w9, w12, #8, #24
    7714:	stp	w9, w8, [x21, #32]
    7718:	ldr	w12, [x27, #12]
    771c:	str	x11, [x27]
    7720:	adds	w11, w12, #0x1
    7724:	stp	w10, w11, [x27, #8]
    7728:	b.cc	7738 <BZ2_decompress@@Base+0x430>  // b.lo, b.ul, b.last
    772c:	ldr	w11, [x27, #16]
    7730:	add	w11, w11, #0x1
    7734:	str	w11, [x27, #16]
    7738:	cmp	w8, #0x8
    773c:	sub	w10, w10, #0x1
    7740:	b.mi	76f8 <BZ2_decompress@@Base+0x3f0>  // b.first
    7744:	sub	w8, w8, #0x8
    7748:	lsr	w9, w9, w8
    774c:	and	w9, w9, #0xff
    7750:	cmp	w9, #0x5a
    7754:	str	w8, [x21, #36]
    7758:	b.ne	7868 <BZ2_decompress@@Base+0x560>  // b.any
    775c:	mov	w9, #0xc                   	// #12
    7760:	cmp	w8, #0x8
    7764:	str	w9, [x21, #8]
    7768:	b.lt	7774 <BZ2_decompress@@Base+0x46c>  // b.tstop
    776c:	ldr	w9, [x21, #32]
    7770:	b	77c8 <BZ2_decompress@@Base+0x4c0>
    7774:	ldr	w9, [x27, #8]
    7778:	sub	w10, w9, #0x1
    777c:	cmn	w10, #0x1
    7780:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    7784:	ldr	x11, [x27]
    7788:	ldr	w12, [x21, #32]
    778c:	add	w8, w8, #0x8
    7790:	ldrb	w9, [x11], #1
    7794:	bfi	w9, w12, #8, #24
    7798:	stp	w9, w8, [x21, #32]
    779c:	ldr	w12, [x27, #12]
    77a0:	str	x11, [x27]
    77a4:	adds	w11, w12, #0x1
    77a8:	stp	w10, w11, [x27, #8]
    77ac:	b.cc	77bc <BZ2_decompress@@Base+0x4b4>  // b.lo, b.ul, b.last
    77b0:	ldr	w11, [x27, #16]
    77b4:	add	w11, w11, #0x1
    77b8:	str	w11, [x27, #16]
    77bc:	cmp	w8, #0x8
    77c0:	sub	w10, w10, #0x1
    77c4:	b.mi	777c <BZ2_decompress@@Base+0x474>  // b.first
    77c8:	sub	w8, w8, #0x8
    77cc:	lsr	w9, w9, w8
    77d0:	and	w9, w9, #0xff
    77d4:	cmp	w9, #0x68
    77d8:	str	w8, [x21, #36]
    77dc:	b.ne	7868 <BZ2_decompress@@Base+0x560>  // b.any
    77e0:	mov	w9, #0xd                   	// #13
    77e4:	cmp	w8, #0x8
    77e8:	str	w9, [x21, #8]
    77ec:	b.lt	77f8 <BZ2_decompress@@Base+0x4f0>  // b.tstop
    77f0:	ldr	w9, [x21, #32]
    77f4:	b	784c <BZ2_decompress@@Base+0x544>
    77f8:	ldr	w9, [x27, #8]
    77fc:	sub	w10, w9, #0x1
    7800:	cmn	w10, #0x1
    7804:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    7808:	ldr	x11, [x27]
    780c:	ldr	w12, [x21, #32]
    7810:	add	w8, w8, #0x8
    7814:	ldrb	w9, [x11], #1
    7818:	bfi	w9, w12, #8, #24
    781c:	stp	w9, w8, [x21, #32]
    7820:	ldr	w12, [x27, #12]
    7824:	str	x11, [x27]
    7828:	adds	w11, w12, #0x1
    782c:	stp	w10, w11, [x27, #8]
    7830:	b.cc	7840 <BZ2_decompress@@Base+0x538>  // b.lo, b.ul, b.last
    7834:	ldr	w11, [x27, #16]
    7838:	add	w11, w11, #0x1
    783c:	str	w11, [x27, #16]
    7840:	cmp	w8, #0x8
    7844:	sub	w10, w10, #0x1
    7848:	b.mi	7800 <BZ2_decompress@@Base+0x4f8>  // b.first
    784c:	sub	w10, w8, #0x8
    7850:	lsr	w8, w9, w10
    7854:	and	w8, w8, #0xff
    7858:	sub	w9, w8, #0x31
    785c:	cmp	w9, #0x8
    7860:	stp	w10, w8, [x21, #36]
    7864:	b.ls	7870 <BZ2_decompress@@Base+0x568>  // b.plast
    7868:	mov	w0, #0xfffffffb            	// #-5
    786c:	b	88d8 <BZ2_decompress@@Base+0x15d0>
    7870:	sub	w9, w8, #0x30
    7874:	stp	w7, w16, [sp, #20]
    7878:	stp	x3, x15, [sp, #64]
    787c:	stp	w30, w17, [sp, #12]
    7880:	str	w9, [x21, #40]
    7884:	ldrb	w10, [x21, #44]
    7888:	ldr	x8, [x27, #56]
    788c:	ldr	x0, [x27, #72]
    7890:	stur	w25, [x29, #-52]
    7894:	mov	w25, w6
    7898:	stur	w14, [x29, #-40]
    789c:	stur	x2, [x29, #-48]
    78a0:	str	x18, [sp, #48]
    78a4:	str	x1, [sp, #32]
    78a8:	str	w5, [sp, #28]
    78ac:	stur	w4, [x29, #-56]
    78b0:	cbz	w10, 7934 <BZ2_decompress@@Base+0x62c>
    78b4:	mov	w10, #0xd40                 	// #3392
    78b8:	movk	w10, #0x3, lsl #16
    78bc:	mul	w1, w9, w10
    78c0:	mov	w2, #0x1                   	// #1
    78c4:	blr	x8
    78c8:	ldr	w8, [x21, #40]
    78cc:	str	x0, [x21, #3160]
    78d0:	ldr	x9, [x27, #56]
    78d4:	ldr	x0, [x27, #72]
    78d8:	mov	w10, #0x86a0                	// #34464
    78dc:	movk	w10, #0x1, lsl #16
    78e0:	mul	w8, w8, w10
    78e4:	asr	w1, w8, #1
    78e8:	mov	w2, #0x1                   	// #1
    78ec:	blr	x9
    78f0:	mov	x8, x0
    78f4:	str	x0, [x21, #3168]
    78f8:	mov	w0, #0xfffffffd            	// #-3
    78fc:	cbz	x8, 8624 <BZ2_decompress@@Base+0x131c>
    7900:	ldr	x8, [x21, #3160]
    7904:	mov	w6, w25
    7908:	ldp	w4, w25, [x29, #-56]
    790c:	ldp	w16, w5, [sp, #24]
    7910:	ldp	x3, x15, [sp, #64]
    7914:	ldp	w17, w7, [sp, #16]
    7918:	ldr	w30, [sp, #12]
    791c:	ldr	x1, [sp, #32]
    7920:	ldr	x18, [sp, #48]
    7924:	ldur	x2, [x29, #-48]
    7928:	ldur	w14, [x29, #-40]
    792c:	cbnz	x8, 7978 <BZ2_decompress@@Base+0x670>
    7930:	b	88d8 <BZ2_decompress@@Base+0x15d0>
    7934:	mov	w10, #0x1a80                	// #6784
    7938:	movk	w10, #0x6, lsl #16
    793c:	mul	w1, w9, w10
    7940:	mov	w2, #0x1                   	// #1
    7944:	blr	x8
    7948:	str	x0, [x21, #3152]
    794c:	mov	w6, w25
    7950:	ldp	w4, w25, [x29, #-56]
    7954:	ldp	w16, w5, [sp, #24]
    7958:	ldp	x3, x15, [sp, #64]
    795c:	ldp	w17, w7, [sp, #16]
    7960:	ldr	w30, [sp, #12]
    7964:	ldr	x1, [sp, #32]
    7968:	ldr	x18, [sp, #48]
    796c:	ldur	x2, [x29, #-48]
    7970:	ldur	w14, [x29, #-40]
    7974:	cbz	x0, 8650 <BZ2_decompress@@Base+0x1348>
    7978:	ldr	w8, [x21, #36]
    797c:	mov	w9, #0xe                   	// #14
    7980:	str	w9, [x21, #8]
    7984:	cmp	w8, #0x8
    7988:	b.lt	7994 <BZ2_decompress@@Base+0x68c>  // b.tstop
    798c:	ldr	w10, [x21, #32]
    7990:	b	79ec <BZ2_decompress@@Base+0x6e4>
    7994:	ldr	x9, [x21]
    7998:	ldr	w10, [x9, #8]
    799c:	sub	w11, w10, #0x1
    79a0:	cmn	w11, #0x1
    79a4:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    79a8:	ldr	x12, [x9]
    79ac:	ldr	w13, [x21, #32]
    79b0:	add	w8, w8, #0x8
    79b4:	ldrb	w10, [x12], #1
    79b8:	bfi	w10, w13, #8, #24
    79bc:	stp	w10, w8, [x21, #32]
    79c0:	ldr	w13, [x9, #12]
    79c4:	str	x12, [x9]
    79c8:	adds	w12, w13, #0x1
    79cc:	stp	w11, w12, [x9, #8]
    79d0:	b.cc	79e0 <BZ2_decompress@@Base+0x6d8>  // b.lo, b.ul, b.last
    79d4:	ldr	w12, [x9, #16]
    79d8:	add	w12, w12, #0x1
    79dc:	str	w12, [x9, #16]
    79e0:	cmp	w8, #0x8
    79e4:	sub	w11, w11, #0x1
    79e8:	b.mi	79a0 <BZ2_decompress@@Base+0x698>  // b.first
    79ec:	sub	w8, w8, #0x8
    79f0:	lsr	w9, w10, w8
    79f4:	and	w9, w9, #0xff
    79f8:	cmp	w9, #0x17
    79fc:	str	w8, [x21, #36]
    7a00:	b.eq	7a24 <BZ2_decompress@@Base+0x71c>  // b.none
    7a04:	cmp	w9, #0x31
    7a08:	b.ne	88d4 <BZ2_decompress@@Base+0x15cc>  // b.any
    7a0c:	mov	w9, #0xf                   	// #15
    7a10:	cmp	w8, #0x8
    7a14:	str	w9, [x21, #8]
    7a18:	b.lt	7a3c <BZ2_decompress@@Base+0x734>  // b.tstop
    7a1c:	ldr	w10, [x21, #32]
    7a20:	b	7a94 <BZ2_decompress@@Base+0x78c>
    7a24:	mov	w9, #0x2a                  	// #42
    7a28:	cmp	w8, #0x8
    7a2c:	str	w9, [x21, #8]
    7a30:	b.lt	8160 <BZ2_decompress@@Base+0xe58>  // b.tstop
    7a34:	ldr	w10, [x21, #32]
    7a38:	b	81b8 <BZ2_decompress@@Base+0xeb0>
    7a3c:	ldr	x9, [x21]
    7a40:	ldr	w10, [x9, #8]
    7a44:	sub	w11, w10, #0x1
    7a48:	cmn	w11, #0x1
    7a4c:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    7a50:	ldr	x12, [x9]
    7a54:	ldr	w13, [x21, #32]
    7a58:	add	w8, w8, #0x8
    7a5c:	ldrb	w10, [x12], #1
    7a60:	bfi	w10, w13, #8, #24
    7a64:	stp	w10, w8, [x21, #32]
    7a68:	ldr	w13, [x9, #12]
    7a6c:	str	x12, [x9]
    7a70:	adds	w12, w13, #0x1
    7a74:	stp	w11, w12, [x9, #8]
    7a78:	b.cc	7a88 <BZ2_decompress@@Base+0x780>  // b.lo, b.ul, b.last
    7a7c:	ldr	w12, [x9, #16]
    7a80:	add	w12, w12, #0x1
    7a84:	str	w12, [x9, #16]
    7a88:	cmp	w8, #0x8
    7a8c:	sub	w11, w11, #0x1
    7a90:	b.mi	7a48 <BZ2_decompress@@Base+0x740>  // b.first
    7a94:	sub	w8, w8, #0x8
    7a98:	lsr	w9, w10, w8
    7a9c:	and	w9, w9, #0xff
    7aa0:	cmp	w9, #0x41
    7aa4:	str	w8, [x21, #36]
    7aa8:	b.ne	88d4 <BZ2_decompress@@Base+0x15cc>  // b.any
    7aac:	mov	w9, #0x10                  	// #16
    7ab0:	cmp	w8, #0x8
    7ab4:	str	w9, [x21, #8]
    7ab8:	b.lt	7ac4 <BZ2_decompress@@Base+0x7bc>  // b.tstop
    7abc:	ldr	w10, [x21, #32]
    7ac0:	b	7b1c <BZ2_decompress@@Base+0x814>
    7ac4:	ldr	x9, [x21]
    7ac8:	ldr	w10, [x9, #8]
    7acc:	sub	w11, w10, #0x1
    7ad0:	cmn	w11, #0x1
    7ad4:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    7ad8:	ldr	x12, [x9]
    7adc:	ldr	w13, [x21, #32]
    7ae0:	add	w8, w8, #0x8
    7ae4:	ldrb	w10, [x12], #1
    7ae8:	bfi	w10, w13, #8, #24
    7aec:	stp	w10, w8, [x21, #32]
    7af0:	ldr	w13, [x9, #12]
    7af4:	str	x12, [x9]
    7af8:	adds	w12, w13, #0x1
    7afc:	stp	w11, w12, [x9, #8]
    7b00:	b.cc	7b10 <BZ2_decompress@@Base+0x808>  // b.lo, b.ul, b.last
    7b04:	ldr	w12, [x9, #16]
    7b08:	add	w12, w12, #0x1
    7b0c:	str	w12, [x9, #16]
    7b10:	cmp	w8, #0x8
    7b14:	sub	w11, w11, #0x1
    7b18:	b.mi	7ad0 <BZ2_decompress@@Base+0x7c8>  // b.first
    7b1c:	sub	w8, w8, #0x8
    7b20:	lsr	w9, w10, w8
    7b24:	and	w9, w9, #0xff
    7b28:	cmp	w9, #0x59
    7b2c:	str	w8, [x21, #36]
    7b30:	b.ne	88d4 <BZ2_decompress@@Base+0x15cc>  // b.any
    7b34:	mov	w9, #0x11                  	// #17
    7b38:	cmp	w8, #0x8
    7b3c:	str	w9, [x21, #8]
    7b40:	b.lt	7b4c <BZ2_decompress@@Base+0x844>  // b.tstop
    7b44:	ldr	w10, [x21, #32]
    7b48:	b	7ba4 <BZ2_decompress@@Base+0x89c>
    7b4c:	ldr	x9, [x21]
    7b50:	ldr	w10, [x9, #8]
    7b54:	sub	w11, w10, #0x1
    7b58:	cmn	w11, #0x1
    7b5c:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    7b60:	ldr	x12, [x9]
    7b64:	ldr	w13, [x21, #32]
    7b68:	add	w8, w8, #0x8
    7b6c:	ldrb	w10, [x12], #1
    7b70:	bfi	w10, w13, #8, #24
    7b74:	stp	w10, w8, [x21, #32]
    7b78:	ldr	w13, [x9, #12]
    7b7c:	str	x12, [x9]
    7b80:	adds	w12, w13, #0x1
    7b84:	stp	w11, w12, [x9, #8]
    7b88:	b.cc	7b98 <BZ2_decompress@@Base+0x890>  // b.lo, b.ul, b.last
    7b8c:	ldr	w12, [x9, #16]
    7b90:	add	w12, w12, #0x1
    7b94:	str	w12, [x9, #16]
    7b98:	cmp	w8, #0x8
    7b9c:	sub	w11, w11, #0x1
    7ba0:	b.mi	7b58 <BZ2_decompress@@Base+0x850>  // b.first
    7ba4:	sub	w8, w8, #0x8
    7ba8:	lsr	w9, w10, w8
    7bac:	and	w9, w9, #0xff
    7bb0:	cmp	w9, #0x26
    7bb4:	str	w8, [x21, #36]
    7bb8:	b.ne	88d4 <BZ2_decompress@@Base+0x15cc>  // b.any
    7bbc:	mov	w9, #0x12                  	// #18
    7bc0:	cmp	w8, #0x8
    7bc4:	str	w9, [x21, #8]
    7bc8:	b.lt	7bd4 <BZ2_decompress@@Base+0x8cc>  // b.tstop
    7bcc:	ldr	w10, [x21, #32]
    7bd0:	b	7c2c <BZ2_decompress@@Base+0x924>
    7bd4:	ldr	x9, [x21]
    7bd8:	ldr	w10, [x9, #8]
    7bdc:	sub	w11, w10, #0x1
    7be0:	cmn	w11, #0x1
    7be4:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    7be8:	ldr	x12, [x9]
    7bec:	ldr	w13, [x21, #32]
    7bf0:	add	w8, w8, #0x8
    7bf4:	ldrb	w10, [x12], #1
    7bf8:	bfi	w10, w13, #8, #24
    7bfc:	stp	w10, w8, [x21, #32]
    7c00:	ldr	w13, [x9, #12]
    7c04:	str	x12, [x9]
    7c08:	adds	w12, w13, #0x1
    7c0c:	stp	w11, w12, [x9, #8]
    7c10:	b.cc	7c20 <BZ2_decompress@@Base+0x918>  // b.lo, b.ul, b.last
    7c14:	ldr	w12, [x9, #16]
    7c18:	add	w12, w12, #0x1
    7c1c:	str	w12, [x9, #16]
    7c20:	cmp	w8, #0x8
    7c24:	sub	w11, w11, #0x1
    7c28:	b.mi	7be0 <BZ2_decompress@@Base+0x8d8>  // b.first
    7c2c:	sub	w8, w8, #0x8
    7c30:	lsr	w9, w10, w8
    7c34:	and	w9, w9, #0xff
    7c38:	cmp	w9, #0x53
    7c3c:	str	w8, [x21, #36]
    7c40:	b.ne	88d4 <BZ2_decompress@@Base+0x15cc>  // b.any
    7c44:	mov	w9, #0x13                  	// #19
    7c48:	cmp	w8, #0x8
    7c4c:	str	w9, [x21, #8]
    7c50:	b.lt	7c5c <BZ2_decompress@@Base+0x954>  // b.tstop
    7c54:	ldr	w10, [x21, #32]
    7c58:	b	7cb4 <BZ2_decompress@@Base+0x9ac>
    7c5c:	ldr	x9, [x21]
    7c60:	ldr	w10, [x9, #8]
    7c64:	sub	w11, w10, #0x1
    7c68:	cmn	w11, #0x1
    7c6c:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    7c70:	ldr	x12, [x9]
    7c74:	ldr	w13, [x21, #32]
    7c78:	add	w8, w8, #0x8
    7c7c:	ldrb	w10, [x12], #1
    7c80:	bfi	w10, w13, #8, #24
    7c84:	stp	w10, w8, [x21, #32]
    7c88:	ldr	w13, [x9, #12]
    7c8c:	str	x12, [x9]
    7c90:	adds	w12, w13, #0x1
    7c94:	stp	w11, w12, [x9, #8]
    7c98:	b.cc	7ca8 <BZ2_decompress@@Base+0x9a0>  // b.lo, b.ul, b.last
    7c9c:	ldr	w12, [x9, #16]
    7ca0:	add	w12, w12, #0x1
    7ca4:	str	w12, [x9, #16]
    7ca8:	cmp	w8, #0x8
    7cac:	sub	w11, w11, #0x1
    7cb0:	b.mi	7c68 <BZ2_decompress@@Base+0x960>  // b.first
    7cb4:	sub	w8, w8, #0x8
    7cb8:	lsr	w9, w10, w8
    7cbc:	and	w9, w9, #0xff
    7cc0:	cmp	w9, #0x59
    7cc4:	str	w8, [x21, #36]
    7cc8:	b.ne	88d4 <BZ2_decompress@@Base+0x15cc>  // b.any
    7ccc:	ldp	w8, w9, [x21, #48]
    7cd0:	mov	x10, x2
    7cd4:	add	w2, w8, #0x1
    7cd8:	cmp	w9, #0x2
    7cdc:	str	w2, [x21, #48]
    7ce0:	b.ge	8658 <BZ2_decompress@@Base+0x1350>  // b.tcont
    7ce4:	mov	x2, x10
    7ce8:	str	wzr, [x21, #3176]
    7cec:	ldr	w8, [x21, #36]
    7cf0:	mov	w9, #0x14                  	// #20
    7cf4:	str	w9, [x21, #8]
    7cf8:	cmp	w8, #0x8
    7cfc:	b.lt	7d08 <BZ2_decompress@@Base+0xa00>  // b.tstop
    7d00:	ldr	w9, [x21, #32]
    7d04:	b	7d60 <BZ2_decompress@@Base+0xa58>
    7d08:	ldr	x10, [x21]
    7d0c:	ldr	w9, [x10, #8]
    7d10:	sub	w11, w9, #0x1
    7d14:	cmn	w11, #0x1
    7d18:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    7d1c:	ldr	x12, [x10]
    7d20:	ldr	w13, [x21, #32]
    7d24:	add	w8, w8, #0x8
    7d28:	ldrb	w9, [x12], #1
    7d2c:	bfi	w9, w13, #8, #24
    7d30:	stp	w9, w8, [x21, #32]
    7d34:	ldr	w13, [x10, #12]
    7d38:	str	x12, [x10]
    7d3c:	adds	w12, w13, #0x1
    7d40:	stp	w11, w12, [x10, #8]
    7d44:	b.cc	7d54 <BZ2_decompress@@Base+0xa4c>  // b.lo, b.ul, b.last
    7d48:	ldr	w12, [x10, #16]
    7d4c:	add	w12, w12, #0x1
    7d50:	str	w12, [x10, #16]
    7d54:	cmp	w8, #0x8
    7d58:	sub	w11, w11, #0x1
    7d5c:	b.mi	7d14 <BZ2_decompress@@Base+0xa0c>  // b.first
    7d60:	ldr	w10, [x21, #3176]
    7d64:	sub	w8, w8, #0x8
    7d68:	lsr	w9, w9, w8
    7d6c:	str	w8, [x21, #36]
    7d70:	bfi	w9, w10, #8, #24
    7d74:	str	w9, [x21, #3176]
    7d78:	mov	w9, #0x15                  	// #21
    7d7c:	cmp	w8, #0x8
    7d80:	str	w9, [x21, #8]
    7d84:	b.lt	7d90 <BZ2_decompress@@Base+0xa88>  // b.tstop
    7d88:	ldr	w9, [x21, #32]
    7d8c:	b	7de8 <BZ2_decompress@@Base+0xae0>
    7d90:	ldr	x10, [x21]
    7d94:	ldr	w9, [x10, #8]
    7d98:	sub	w11, w9, #0x1
    7d9c:	cmn	w11, #0x1
    7da0:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    7da4:	ldr	x12, [x10]
    7da8:	ldr	w13, [x21, #32]
    7dac:	add	w8, w8, #0x8
    7db0:	ldrb	w9, [x12], #1
    7db4:	bfi	w9, w13, #8, #24
    7db8:	stp	w9, w8, [x21, #32]
    7dbc:	ldr	w13, [x10, #12]
    7dc0:	str	x12, [x10]
    7dc4:	adds	w12, w13, #0x1
    7dc8:	stp	w11, w12, [x10, #8]
    7dcc:	b.cc	7ddc <BZ2_decompress@@Base+0xad4>  // b.lo, b.ul, b.last
    7dd0:	ldr	w12, [x10, #16]
    7dd4:	add	w12, w12, #0x1
    7dd8:	str	w12, [x10, #16]
    7ddc:	cmp	w8, #0x8
    7de0:	sub	w11, w11, #0x1
    7de4:	b.mi	7d9c <BZ2_decompress@@Base+0xa94>  // b.first
    7de8:	ldr	w10, [x21, #3176]
    7dec:	sub	w8, w8, #0x8
    7df0:	lsr	w9, w9, w8
    7df4:	str	w8, [x21, #36]
    7df8:	bfi	w9, w10, #8, #24
    7dfc:	str	w9, [x21, #3176]
    7e00:	mov	w9, #0x16                  	// #22
    7e04:	cmp	w8, #0x8
    7e08:	str	w9, [x21, #8]
    7e0c:	b.lt	7e18 <BZ2_decompress@@Base+0xb10>  // b.tstop
    7e10:	ldr	w9, [x21, #32]
    7e14:	b	7e70 <BZ2_decompress@@Base+0xb68>
    7e18:	ldr	x10, [x21]
    7e1c:	ldr	w9, [x10, #8]
    7e20:	sub	w11, w9, #0x1
    7e24:	cmn	w11, #0x1
    7e28:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    7e2c:	ldr	x12, [x10]
    7e30:	ldr	w13, [x21, #32]
    7e34:	add	w8, w8, #0x8
    7e38:	ldrb	w9, [x12], #1
    7e3c:	bfi	w9, w13, #8, #24
    7e40:	stp	w9, w8, [x21, #32]
    7e44:	ldr	w13, [x10, #12]
    7e48:	str	x12, [x10]
    7e4c:	adds	w12, w13, #0x1
    7e50:	stp	w11, w12, [x10, #8]
    7e54:	b.cc	7e64 <BZ2_decompress@@Base+0xb5c>  // b.lo, b.ul, b.last
    7e58:	ldr	w12, [x10, #16]
    7e5c:	add	w12, w12, #0x1
    7e60:	str	w12, [x10, #16]
    7e64:	cmp	w8, #0x8
    7e68:	sub	w11, w11, #0x1
    7e6c:	b.mi	7e24 <BZ2_decompress@@Base+0xb1c>  // b.first
    7e70:	ldr	w10, [x21, #3176]
    7e74:	sub	w8, w8, #0x8
    7e78:	lsr	w9, w9, w8
    7e7c:	str	w8, [x21, #36]
    7e80:	bfi	w9, w10, #8, #24
    7e84:	str	w9, [x21, #3176]
    7e88:	mov	w9, #0x17                  	// #23
    7e8c:	cmp	w8, #0x8
    7e90:	str	w9, [x21, #8]
    7e94:	b.lt	7ea0 <BZ2_decompress@@Base+0xb98>  // b.tstop
    7e98:	ldr	w9, [x21, #32]
    7e9c:	b	7ef8 <BZ2_decompress@@Base+0xbf0>
    7ea0:	ldr	x10, [x21]
    7ea4:	ldr	w9, [x10, #8]
    7ea8:	sub	w11, w9, #0x1
    7eac:	cmn	w11, #0x1
    7eb0:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    7eb4:	ldr	x12, [x10]
    7eb8:	ldr	w13, [x21, #32]
    7ebc:	add	w8, w8, #0x8
    7ec0:	ldrb	w9, [x12], #1
    7ec4:	bfi	w9, w13, #8, #24
    7ec8:	stp	w9, w8, [x21, #32]
    7ecc:	ldr	w13, [x10, #12]
    7ed0:	str	x12, [x10]
    7ed4:	adds	w12, w13, #0x1
    7ed8:	stp	w11, w12, [x10, #8]
    7edc:	b.cc	7eec <BZ2_decompress@@Base+0xbe4>  // b.lo, b.ul, b.last
    7ee0:	ldr	w12, [x10, #16]
    7ee4:	add	w12, w12, #0x1
    7ee8:	str	w12, [x10, #16]
    7eec:	cmp	w8, #0x8
    7ef0:	sub	w11, w11, #0x1
    7ef4:	b.mi	7eac <BZ2_decompress@@Base+0xba4>  // b.first
    7ef8:	ldr	w10, [x21, #3176]
    7efc:	sub	w8, w8, #0x8
    7f00:	lsr	w9, w9, w8
    7f04:	str	w8, [x21, #36]
    7f08:	bfi	w9, w10, #8, #24
    7f0c:	str	w9, [x21, #3176]
    7f10:	mov	w9, #0x18                  	// #24
    7f14:	cmp	w8, #0x1
    7f18:	str	w9, [x21, #8]
    7f1c:	b.lt	7f28 <BZ2_decompress@@Base+0xc20>  // b.tstop
    7f20:	ldr	w10, [x21, #32]
    7f24:	b	7f84 <BZ2_decompress@@Base+0xc7c>
    7f28:	ldr	x9, [x21]
    7f2c:	ldr	w10, [x9, #8]
    7f30:	sub	w11, w10, #0x1
    7f34:	cmn	w11, #0x1
    7f38:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    7f3c:	ldr	x12, [x9]
    7f40:	ldr	w13, [x21, #32]
    7f44:	add	w8, w8, #0x8
    7f48:	ldrb	w10, [x12], #1
    7f4c:	bfi	w10, w13, #8, #24
    7f50:	stp	w10, w8, [x21, #32]
    7f54:	ldr	w13, [x9, #12]
    7f58:	str	x12, [x9]
    7f5c:	adds	w12, w13, #0x1
    7f60:	stp	w11, w12, [x9, #8]
    7f64:	b.cc	7f74 <BZ2_decompress@@Base+0xc6c>  // b.lo, b.ul, b.last
    7f68:	ldr	w12, [x9, #16]
    7f6c:	add	w12, w12, #0x1
    7f70:	str	w12, [x9, #16]
    7f74:	sub	w12, w8, #0x8
    7f78:	cmn	w12, #0x8
    7f7c:	sub	w11, w11, #0x1
    7f80:	b.le	7f34 <BZ2_decompress@@Base+0xc2c>
    7f84:	sub	w8, w8, #0x1
    7f88:	lsr	w9, w10, w8
    7f8c:	and	w9, w9, #0x1
    7f90:	str	w8, [x21, #36]
    7f94:	strb	w9, [x21, #20]
    7f98:	str	wzr, [x21, #56]
    7f9c:	mov	w9, #0x19                  	// #25
    7fa0:	cmp	w8, #0x8
    7fa4:	str	w9, [x21, #8]
    7fa8:	b.lt	7fb4 <BZ2_decompress@@Base+0xcac>  // b.tstop
    7fac:	ldr	w9, [x21, #32]
    7fb0:	b	800c <BZ2_decompress@@Base+0xd04>
    7fb4:	ldr	x10, [x21]
    7fb8:	ldr	w9, [x10, #8]
    7fbc:	sub	w11, w9, #0x1
    7fc0:	cmn	w11, #0x1
    7fc4:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    7fc8:	ldr	x12, [x10]
    7fcc:	ldr	w13, [x21, #32]
    7fd0:	add	w8, w8, #0x8
    7fd4:	ldrb	w9, [x12], #1
    7fd8:	bfi	w9, w13, #8, #24
    7fdc:	stp	w9, w8, [x21, #32]
    7fe0:	ldr	w13, [x10, #12]
    7fe4:	str	x12, [x10]
    7fe8:	adds	w12, w13, #0x1
    7fec:	stp	w11, w12, [x10, #8]
    7ff0:	b.cc	8000 <BZ2_decompress@@Base+0xcf8>  // b.lo, b.ul, b.last
    7ff4:	ldr	w12, [x10, #16]
    7ff8:	add	w12, w12, #0x1
    7ffc:	str	w12, [x10, #16]
    8000:	cmp	w8, #0x8
    8004:	sub	w11, w11, #0x1
    8008:	b.mi	7fc0 <BZ2_decompress@@Base+0xcb8>  // b.first
    800c:	ldr	w10, [x21, #56]
    8010:	sub	w8, w8, #0x8
    8014:	lsr	w9, w9, w8
    8018:	str	w8, [x21, #36]
    801c:	bfi	w9, w10, #8, #24
    8020:	str	w9, [x21, #56]
    8024:	mov	w9, #0x1a                  	// #26
    8028:	cmp	w8, #0x8
    802c:	str	w9, [x21, #8]
    8030:	b.lt	803c <BZ2_decompress@@Base+0xd34>  // b.tstop
    8034:	ldr	w9, [x21, #32]
    8038:	b	8094 <BZ2_decompress@@Base+0xd8c>
    803c:	ldr	x10, [x21]
    8040:	ldr	w9, [x10, #8]
    8044:	sub	w11, w9, #0x1
    8048:	cmn	w11, #0x1
    804c:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    8050:	ldr	x12, [x10]
    8054:	ldr	w13, [x21, #32]
    8058:	add	w8, w8, #0x8
    805c:	ldrb	w9, [x12], #1
    8060:	bfi	w9, w13, #8, #24
    8064:	stp	w9, w8, [x21, #32]
    8068:	ldr	w13, [x10, #12]
    806c:	str	x12, [x10]
    8070:	adds	w12, w13, #0x1
    8074:	stp	w11, w12, [x10, #8]
    8078:	b.cc	8088 <BZ2_decompress@@Base+0xd80>  // b.lo, b.ul, b.last
    807c:	ldr	w12, [x10, #16]
    8080:	add	w12, w12, #0x1
    8084:	str	w12, [x10, #16]
    8088:	cmp	w8, #0x8
    808c:	sub	w11, w11, #0x1
    8090:	b.mi	8048 <BZ2_decompress@@Base+0xd40>  // b.first
    8094:	ldr	w10, [x21, #56]
    8098:	sub	w8, w8, #0x8
    809c:	lsr	w9, w9, w8
    80a0:	str	w8, [x21, #36]
    80a4:	bfi	w9, w10, #8, #24
    80a8:	str	w9, [x21, #56]
    80ac:	mov	w9, #0x1b                  	// #27
    80b0:	cmp	w8, #0x8
    80b4:	str	w9, [x21, #8]
    80b8:	b.lt	80c4 <BZ2_decompress@@Base+0xdbc>  // b.tstop
    80bc:	ldr	w10, [x21, #32]
    80c0:	b	811c <BZ2_decompress@@Base+0xe14>
    80c4:	ldr	x9, [x21]
    80c8:	ldr	w10, [x9, #8]
    80cc:	sub	w11, w10, #0x1
    80d0:	cmn	w11, #0x1
    80d4:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    80d8:	ldr	x12, [x9]
    80dc:	ldr	w13, [x21, #32]
    80e0:	add	w8, w8, #0x8
    80e4:	ldrb	w10, [x12], #1
    80e8:	bfi	w10, w13, #8, #24
    80ec:	stp	w10, w8, [x21, #32]
    80f0:	ldr	w13, [x9, #12]
    80f4:	str	x12, [x9]
    80f8:	adds	w12, w13, #0x1
    80fc:	stp	w11, w12, [x9, #8]
    8100:	b.cc	8110 <BZ2_decompress@@Base+0xe08>  // b.lo, b.ul, b.last
    8104:	ldr	w12, [x9, #16]
    8108:	add	w12, w12, #0x1
    810c:	str	w12, [x9, #16]
    8110:	cmp	w8, #0x8
    8114:	sub	w11, w11, #0x1
    8118:	b.mi	80d0 <BZ2_decompress@@Base+0xdc8>  // b.first
    811c:	ldr	w9, [x21, #56]
    8120:	sub	w11, w8, #0x8
    8124:	lsr	w8, w10, w11
    8128:	str	w11, [x21, #36]
    812c:	bfi	w8, w9, #8, #24
    8130:	str	w8, [x21, #56]
    8134:	tbnz	w8, #31, 88d4 <BZ2_decompress@@Base+0x15cc>
    8138:	ldr	w9, [x21, #40]
    813c:	mov	w10, #0x86a0                	// #34464
    8140:	movk	w10, #0x1, lsl #16
    8144:	mul	w9, w9, w10
    8148:	mov	w10, #0xa                   	// #10
    814c:	orr	w9, w9, w10
    8150:	cmp	w8, w9
    8154:	b.gt	88d4 <BZ2_decompress@@Base+0x15cc>
    8158:	mov	w0, wzr
    815c:	b	8940 <BZ2_decompress@@Base+0x1638>
    8160:	ldr	x9, [x21]
    8164:	ldr	w10, [x9, #8]
    8168:	sub	w11, w10, #0x1
    816c:	cmn	w11, #0x1
    8170:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    8174:	ldr	x12, [x9]
    8178:	ldr	w13, [x21, #32]
    817c:	add	w8, w8, #0x8
    8180:	ldrb	w10, [x12], #1
    8184:	bfi	w10, w13, #8, #24
    8188:	stp	w10, w8, [x21, #32]
    818c:	ldr	w13, [x9, #12]
    8190:	str	x12, [x9]
    8194:	adds	w12, w13, #0x1
    8198:	stp	w11, w12, [x9, #8]
    819c:	b.cc	81ac <BZ2_decompress@@Base+0xea4>  // b.lo, b.ul, b.last
    81a0:	ldr	w12, [x9, #16]
    81a4:	add	w12, w12, #0x1
    81a8:	str	w12, [x9, #16]
    81ac:	cmp	w8, #0x8
    81b0:	sub	w11, w11, #0x1
    81b4:	b.mi	816c <BZ2_decompress@@Base+0xe64>  // b.first
    81b8:	sub	w8, w8, #0x8
    81bc:	lsr	w9, w10, w8
    81c0:	and	w9, w9, #0xff
    81c4:	cmp	w9, #0x72
    81c8:	str	w8, [x21, #36]
    81cc:	b.ne	88d4 <BZ2_decompress@@Base+0x15cc>  // b.any
    81d0:	mov	w9, #0x2b                  	// #43
    81d4:	cmp	w8, #0x8
    81d8:	str	w9, [x21, #8]
    81dc:	b.lt	81e8 <BZ2_decompress@@Base+0xee0>  // b.tstop
    81e0:	ldr	w10, [x21, #32]
    81e4:	b	8240 <BZ2_decompress@@Base+0xf38>
    81e8:	ldr	x9, [x21]
    81ec:	ldr	w10, [x9, #8]
    81f0:	sub	w11, w10, #0x1
    81f4:	cmn	w11, #0x1
    81f8:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    81fc:	ldr	x12, [x9]
    8200:	ldr	w13, [x21, #32]
    8204:	add	w8, w8, #0x8
    8208:	ldrb	w10, [x12], #1
    820c:	bfi	w10, w13, #8, #24
    8210:	stp	w10, w8, [x21, #32]
    8214:	ldr	w13, [x9, #12]
    8218:	str	x12, [x9]
    821c:	adds	w12, w13, #0x1
    8220:	stp	w11, w12, [x9, #8]
    8224:	b.cc	8234 <BZ2_decompress@@Base+0xf2c>  // b.lo, b.ul, b.last
    8228:	ldr	w12, [x9, #16]
    822c:	add	w12, w12, #0x1
    8230:	str	w12, [x9, #16]
    8234:	cmp	w8, #0x8
    8238:	sub	w11, w11, #0x1
    823c:	b.mi	81f4 <BZ2_decompress@@Base+0xeec>  // b.first
    8240:	sub	w8, w8, #0x8
    8244:	lsr	w9, w10, w8
    8248:	and	w9, w9, #0xff
    824c:	cmp	w9, #0x45
    8250:	str	w8, [x21, #36]
    8254:	b.ne	88d4 <BZ2_decompress@@Base+0x15cc>  // b.any
    8258:	mov	w9, #0x2c                  	// #44
    825c:	cmp	w8, #0x8
    8260:	str	w9, [x21, #8]
    8264:	b.lt	8270 <BZ2_decompress@@Base+0xf68>  // b.tstop
    8268:	ldr	w10, [x21, #32]
    826c:	b	82c8 <BZ2_decompress@@Base+0xfc0>
    8270:	ldr	x9, [x21]
    8274:	ldr	w10, [x9, #8]
    8278:	sub	w11, w10, #0x1
    827c:	cmn	w11, #0x1
    8280:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    8284:	ldr	x12, [x9]
    8288:	ldr	w13, [x21, #32]
    828c:	add	w8, w8, #0x8
    8290:	ldrb	w10, [x12], #1
    8294:	bfi	w10, w13, #8, #24
    8298:	stp	w10, w8, [x21, #32]
    829c:	ldr	w13, [x9, #12]
    82a0:	str	x12, [x9]
    82a4:	adds	w12, w13, #0x1
    82a8:	stp	w11, w12, [x9, #8]
    82ac:	b.cc	82bc <BZ2_decompress@@Base+0xfb4>  // b.lo, b.ul, b.last
    82b0:	ldr	w12, [x9, #16]
    82b4:	add	w12, w12, #0x1
    82b8:	str	w12, [x9, #16]
    82bc:	cmp	w8, #0x8
    82c0:	sub	w11, w11, #0x1
    82c4:	b.mi	827c <BZ2_decompress@@Base+0xf74>  // b.first
    82c8:	sub	w8, w8, #0x8
    82cc:	lsr	w9, w10, w8
    82d0:	and	w9, w9, #0xff
    82d4:	cmp	w9, #0x38
    82d8:	str	w8, [x21, #36]
    82dc:	b.ne	88d4 <BZ2_decompress@@Base+0x15cc>  // b.any
    82e0:	mov	w9, #0x2d                  	// #45
    82e4:	cmp	w8, #0x8
    82e8:	str	w9, [x21, #8]
    82ec:	b.lt	82f8 <BZ2_decompress@@Base+0xff0>  // b.tstop
    82f0:	ldr	w10, [x21, #32]
    82f4:	b	8350 <BZ2_decompress@@Base+0x1048>
    82f8:	ldr	x9, [x21]
    82fc:	ldr	w10, [x9, #8]
    8300:	sub	w11, w10, #0x1
    8304:	cmn	w11, #0x1
    8308:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    830c:	ldr	x12, [x9]
    8310:	ldr	w13, [x21, #32]
    8314:	add	w8, w8, #0x8
    8318:	ldrb	w10, [x12], #1
    831c:	bfi	w10, w13, #8, #24
    8320:	stp	w10, w8, [x21, #32]
    8324:	ldr	w13, [x9, #12]
    8328:	str	x12, [x9]
    832c:	adds	w12, w13, #0x1
    8330:	stp	w11, w12, [x9, #8]
    8334:	b.cc	8344 <BZ2_decompress@@Base+0x103c>  // b.lo, b.ul, b.last
    8338:	ldr	w12, [x9, #16]
    833c:	add	w12, w12, #0x1
    8340:	str	w12, [x9, #16]
    8344:	cmp	w8, #0x8
    8348:	sub	w11, w11, #0x1
    834c:	b.mi	8304 <BZ2_decompress@@Base+0xffc>  // b.first
    8350:	sub	w8, w8, #0x8
    8354:	lsr	w9, w10, w8
    8358:	and	w9, w9, #0xff
    835c:	cmp	w9, #0x50
    8360:	str	w8, [x21, #36]
    8364:	b.ne	88d4 <BZ2_decompress@@Base+0x15cc>  // b.any
    8368:	mov	w9, #0x2e                  	// #46
    836c:	cmp	w8, #0x8
    8370:	str	w9, [x21, #8]
    8374:	b.lt	8380 <BZ2_decompress@@Base+0x1078>  // b.tstop
    8378:	ldr	w10, [x21, #32]
    837c:	b	83d8 <BZ2_decompress@@Base+0x10d0>
    8380:	ldr	x9, [x21]
    8384:	ldr	w10, [x9, #8]
    8388:	sub	w11, w10, #0x1
    838c:	cmn	w11, #0x1
    8390:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    8394:	ldr	x12, [x9]
    8398:	ldr	w13, [x21, #32]
    839c:	add	w8, w8, #0x8
    83a0:	ldrb	w10, [x12], #1
    83a4:	bfi	w10, w13, #8, #24
    83a8:	stp	w10, w8, [x21, #32]
    83ac:	ldr	w13, [x9, #12]
    83b0:	str	x12, [x9]
    83b4:	adds	w12, w13, #0x1
    83b8:	stp	w11, w12, [x9, #8]
    83bc:	b.cc	83cc <BZ2_decompress@@Base+0x10c4>  // b.lo, b.ul, b.last
    83c0:	ldr	w12, [x9, #16]
    83c4:	add	w12, w12, #0x1
    83c8:	str	w12, [x9, #16]
    83cc:	cmp	w8, #0x8
    83d0:	sub	w11, w11, #0x1
    83d4:	b.mi	838c <BZ2_decompress@@Base+0x1084>  // b.first
    83d8:	sub	w8, w8, #0x8
    83dc:	lsr	w9, w10, w8
    83e0:	and	w9, w9, #0xff
    83e4:	cmp	w9, #0x90
    83e8:	str	w8, [x21, #36]
    83ec:	b.ne	88d4 <BZ2_decompress@@Base+0x15cc>  // b.any
    83f0:	str	wzr, [x21, #3180]
    83f4:	mov	w9, #0x2f                  	// #47
    83f8:	cmp	w8, #0x8
    83fc:	str	w9, [x21, #8]
    8400:	b.lt	840c <BZ2_decompress@@Base+0x1104>  // b.tstop
    8404:	ldr	w9, [x21, #32]
    8408:	b	8464 <BZ2_decompress@@Base+0x115c>
    840c:	ldr	x10, [x21]
    8410:	ldr	w9, [x10, #8]
    8414:	sub	w11, w9, #0x1
    8418:	cmn	w11, #0x1
    841c:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    8420:	ldr	x12, [x10]
    8424:	ldr	w13, [x21, #32]
    8428:	add	w8, w8, #0x8
    842c:	ldrb	w9, [x12], #1
    8430:	bfi	w9, w13, #8, #24
    8434:	stp	w9, w8, [x21, #32]
    8438:	ldr	w13, [x10, #12]
    843c:	str	x12, [x10]
    8440:	adds	w12, w13, #0x1
    8444:	stp	w11, w12, [x10, #8]
    8448:	b.cc	8458 <BZ2_decompress@@Base+0x1150>  // b.lo, b.ul, b.last
    844c:	ldr	w12, [x10, #16]
    8450:	add	w12, w12, #0x1
    8454:	str	w12, [x10, #16]
    8458:	cmp	w8, #0x8
    845c:	sub	w11, w11, #0x1
    8460:	b.mi	8418 <BZ2_decompress@@Base+0x1110>  // b.first
    8464:	ldr	w10, [x21, #3180]
    8468:	sub	w8, w8, #0x8
    846c:	lsr	w9, w9, w8
    8470:	str	w8, [x21, #36]
    8474:	bfi	w9, w10, #8, #24
    8478:	str	w9, [x21, #3180]
    847c:	mov	w9, #0x30                  	// #48
    8480:	cmp	w8, #0x8
    8484:	str	w9, [x21, #8]
    8488:	b.lt	8494 <BZ2_decompress@@Base+0x118c>  // b.tstop
    848c:	ldr	w9, [x21, #32]
    8490:	b	84ec <BZ2_decompress@@Base+0x11e4>
    8494:	ldr	x10, [x21]
    8498:	ldr	w9, [x10, #8]
    849c:	sub	w11, w9, #0x1
    84a0:	cmn	w11, #0x1
    84a4:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    84a8:	ldr	x12, [x10]
    84ac:	ldr	w13, [x21, #32]
    84b0:	add	w8, w8, #0x8
    84b4:	ldrb	w9, [x12], #1
    84b8:	bfi	w9, w13, #8, #24
    84bc:	stp	w9, w8, [x21, #32]
    84c0:	ldr	w13, [x10, #12]
    84c4:	str	x12, [x10]
    84c8:	adds	w12, w13, #0x1
    84cc:	stp	w11, w12, [x10, #8]
    84d0:	b.cc	84e0 <BZ2_decompress@@Base+0x11d8>  // b.lo, b.ul, b.last
    84d4:	ldr	w12, [x10, #16]
    84d8:	add	w12, w12, #0x1
    84dc:	str	w12, [x10, #16]
    84e0:	cmp	w8, #0x8
    84e4:	sub	w11, w11, #0x1
    84e8:	b.mi	84a0 <BZ2_decompress@@Base+0x1198>  // b.first
    84ec:	ldr	w10, [x21, #3180]
    84f0:	sub	w8, w8, #0x8
    84f4:	lsr	w9, w9, w8
    84f8:	str	w8, [x21, #36]
    84fc:	bfi	w9, w10, #8, #24
    8500:	str	w9, [x21, #3180]
    8504:	mov	w9, #0x31                  	// #49
    8508:	cmp	w8, #0x8
    850c:	str	w9, [x21, #8]
    8510:	b.lt	851c <BZ2_decompress@@Base+0x1214>  // b.tstop
    8514:	ldr	w9, [x21, #32]
    8518:	b	8574 <BZ2_decompress@@Base+0x126c>
    851c:	ldr	x10, [x21]
    8520:	ldr	w9, [x10, #8]
    8524:	sub	w11, w9, #0x1
    8528:	cmn	w11, #0x1
    852c:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    8530:	ldr	x12, [x10]
    8534:	ldr	w13, [x21, #32]
    8538:	add	w8, w8, #0x8
    853c:	ldrb	w9, [x12], #1
    8540:	bfi	w9, w13, #8, #24
    8544:	stp	w9, w8, [x21, #32]
    8548:	ldr	w13, [x10, #12]
    854c:	str	x12, [x10]
    8550:	adds	w12, w13, #0x1
    8554:	stp	w11, w12, [x10, #8]
    8558:	b.cc	8568 <BZ2_decompress@@Base+0x1260>  // b.lo, b.ul, b.last
    855c:	ldr	w12, [x10, #16]
    8560:	add	w12, w12, #0x1
    8564:	str	w12, [x10, #16]
    8568:	cmp	w8, #0x8
    856c:	sub	w11, w11, #0x1
    8570:	b.mi	8528 <BZ2_decompress@@Base+0x1220>  // b.first
    8574:	ldr	w10, [x21, #3180]
    8578:	sub	w8, w8, #0x8
    857c:	lsr	w9, w9, w8
    8580:	str	w8, [x21, #36]
    8584:	bfi	w9, w10, #8, #24
    8588:	str	w9, [x21, #3180]
    858c:	mov	w9, #0x32                  	// #50
    8590:	cmp	w8, #0x8
    8594:	str	w9, [x21, #8]
    8598:	b.lt	85a4 <BZ2_decompress@@Base+0x129c>  // b.tstop
    859c:	ldr	w9, [x21, #32]
    85a0:	b	85fc <BZ2_decompress@@Base+0x12f4>
    85a4:	ldr	x10, [x21]
    85a8:	ldr	w9, [x10, #8]
    85ac:	sub	w11, w9, #0x1
    85b0:	cmn	w11, #0x1
    85b4:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    85b8:	ldr	x12, [x10]
    85bc:	ldr	w13, [x21, #32]
    85c0:	add	w8, w8, #0x8
    85c4:	ldrb	w9, [x12], #1
    85c8:	bfi	w9, w13, #8, #24
    85cc:	stp	w9, w8, [x21, #32]
    85d0:	ldr	w13, [x10, #12]
    85d4:	str	x12, [x10]
    85d8:	adds	w12, w13, #0x1
    85dc:	stp	w11, w12, [x10, #8]
    85e0:	b.cc	85f0 <BZ2_decompress@@Base+0x12e8>  // b.lo, b.ul, b.last
    85e4:	ldr	w12, [x10, #16]
    85e8:	add	w12, w12, #0x1
    85ec:	str	w12, [x10, #16]
    85f0:	cmp	w8, #0x8
    85f4:	sub	w11, w11, #0x1
    85f8:	b.mi	85b0 <BZ2_decompress@@Base+0x12a8>  // b.first
    85fc:	ldr	w10, [x21, #3180]
    8600:	sub	w8, w8, #0x8
    8604:	lsr	w9, w9, w8
    8608:	mov	w11, #0x1                   	// #1
    860c:	bfi	w9, w10, #8, #24
    8610:	str	w8, [x21, #36]
    8614:	str	w11, [x21, #8]
    8618:	str	w9, [x21, #3180]
    861c:	mov	w0, #0x4                   	// #4
    8620:	b	88d8 <BZ2_decompress@@Base+0x15d0>
    8624:	mov	w6, w25
    8628:	ldp	w14, w9, [x29, #-40]
    862c:	ldp	w4, w25, [x29, #-56]
    8630:	ldp	w16, w5, [sp, #24]
    8634:	ldp	x3, x15, [sp, #64]
    8638:	ldp	w17, w7, [sp, #16]
    863c:	ldr	w30, [sp, #12]
    8640:	ldr	x1, [sp, #32]
    8644:	ldr	x18, [sp, #48]
    8648:	ldur	x2, [x29, #-48]
    864c:	b	88dc <BZ2_decompress@@Base+0x15d4>
    8650:	mov	w0, #0xfffffffd            	// #-3
    8654:	b	88d8 <BZ2_decompress@@Base+0x15d0>
    8658:	adrp	x8, 1d000 <BZ2_bzerror@@Base+0x10c24>
    865c:	ldr	x8, [x8, #4016]
    8660:	str	x1, [sp, #32]
    8664:	adrp	x1, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    8668:	add	x1, x1, #0x8aa
    866c:	ldr	x0, [x8]
    8670:	str	w24, [sp, #72]
    8674:	stur	w14, [x29, #-40]
    8678:	stur	x10, [x29, #-48]
    867c:	str	w23, [sp, #64]
    8680:	str	w28, [sp, #48]
    8684:	stur	w25, [x29, #-52]
    8688:	mov	w25, w6
    868c:	mov	w27, w4
    8690:	str	w5, [sp, #28]
    8694:	mov	x24, x3
    8698:	stur	w19, [x29, #-60]
    869c:	stp	w7, w16, [sp, #20]
    86a0:	str	x26, [sp, #40]
    86a4:	mov	w26, w30
    86a8:	mov	w28, w17
    86ac:	mov	x23, x18
    86b0:	mov	x19, x15
    86b4:	bl	1700 <fprintf@plt>
    86b8:	ldp	w7, w16, [sp, #20]
    86bc:	mov	x15, x19
    86c0:	mov	x18, x23
    86c4:	mov	w17, w28
    86c8:	mov	w30, w26
    86cc:	ldp	x1, x26, [sp, #32]
    86d0:	ldur	w19, [x29, #-60]
    86d4:	mov	x3, x24
    86d8:	ldr	w5, [sp, #28]
    86dc:	mov	w6, w25
    86e0:	ldur	w25, [x29, #-52]
    86e4:	ldr	w28, [sp, #48]
    86e8:	ldr	w23, [sp, #64]
    86ec:	ldur	x10, [x29, #-48]
    86f0:	ldur	w14, [x29, #-40]
    86f4:	ldr	w24, [sp, #72]
    86f8:	mov	w4, w27
    86fc:	b	7ce4 <BZ2_decompress@@Base+0x9dc>
    8700:	mov	w9, #0x25                  	// #37
    8704:	cmp	w8, #0x1
    8708:	str	w9, [x21, #8]
    870c:	b.lt	8718 <BZ2_decompress@@Base+0x1410>  // b.tstop
    8710:	ldr	w10, [x21, #32]
    8714:	b	8774 <BZ2_decompress@@Base+0x146c>
    8718:	ldr	x9, [x21]
    871c:	ldr	w10, [x9, #8]
    8720:	sub	w11, w10, #0x1
    8724:	cmn	w11, #0x1
    8728:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    872c:	ldr	x12, [x9]
    8730:	ldr	w13, [x21, #32]
    8734:	add	w8, w8, #0x8
    8738:	ldrb	w10, [x12], #1
    873c:	bfi	w10, w13, #8, #24
    8740:	stp	w10, w8, [x21, #32]
    8744:	ldr	w13, [x9, #12]
    8748:	str	x12, [x9]
    874c:	adds	w12, w13, #0x1
    8750:	stp	w11, w12, [x9, #8]
    8754:	b.cc	8764 <BZ2_decompress@@Base+0x145c>  // b.lo, b.ul, b.last
    8758:	ldr	w12, [x9, #16]
    875c:	add	w12, w12, #0x1
    8760:	str	w12, [x9, #16]
    8764:	sub	w12, w8, #0x8
    8768:	cmn	w12, #0x8
    876c:	sub	w11, w11, #0x1
    8770:	b.le	8724 <BZ2_decompress@@Base+0x141c>
    8774:	sub	w8, w8, #0x1
    8778:	lsr	w9, w10, w8
    877c:	and	w14, w9, #0x1
    8780:	bfi	w9, w7, #1, #31
    8784:	str	w8, [x21, #36]
    8788:	mov	w7, w9
    878c:	cmp	w1, #0x14
    8790:	b.gt	88d4 <BZ2_decompress@@Base+0x15cc>
    8794:	ldur	x9, [x29, #-24]
    8798:	ldr	w9, [x9, w1, sxtw #2]
    879c:	cmp	w7, w9
    87a0:	b.le	932c <BZ2_decompress@@Base+0x2024>
    87a4:	add	w1, w1, #0x1
    87a8:	b	8700 <BZ2_decompress@@Base+0x13f8>
    87ac:	mov	w9, #0x27                  	// #39
    87b0:	cmp	w8, #0x1
    87b4:	str	w9, [x21, #8]
    87b8:	b.lt	87c4 <BZ2_decompress@@Base+0x14bc>  // b.tstop
    87bc:	ldr	w10, [x21, #32]
    87c0:	b	8820 <BZ2_decompress@@Base+0x1518>
    87c4:	ldr	x9, [x21]
    87c8:	ldr	w10, [x9, #8]
    87cc:	sub	w11, w10, #0x1
    87d0:	cmn	w11, #0x1
    87d4:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    87d8:	ldr	x12, [x9]
    87dc:	ldr	w13, [x21, #32]
    87e0:	add	w8, w8, #0x8
    87e4:	ldrb	w10, [x12], #1
    87e8:	bfi	w10, w13, #8, #24
    87ec:	stp	w10, w8, [x21, #32]
    87f0:	ldr	w13, [x9, #12]
    87f4:	str	x12, [x9]
    87f8:	adds	w12, w13, #0x1
    87fc:	stp	w11, w12, [x9, #8]
    8800:	b.cc	8810 <BZ2_decompress@@Base+0x1508>  // b.lo, b.ul, b.last
    8804:	ldr	w12, [x9, #16]
    8808:	add	w12, w12, #0x1
    880c:	str	w12, [x9, #16]
    8810:	sub	w12, w8, #0x8
    8814:	cmn	w12, #0x8
    8818:	sub	w11, w11, #0x1
    881c:	b.le	87d0 <BZ2_decompress@@Base+0x14c8>
    8820:	sub	w8, w8, #0x1
    8824:	lsr	w9, w10, w8
    8828:	and	w14, w9, #0x1
    882c:	bfi	w9, w7, #1, #31
    8830:	str	w8, [x21, #36]
    8834:	mov	w7, w9
    8838:	b	9d18 <BZ2_decompress@@Base+0x2a10>
    883c:	mov	w9, #0x29                  	// #41
    8840:	cmp	w8, #0x1
    8844:	str	w9, [x21, #8]
    8848:	b.lt	8854 <BZ2_decompress@@Base+0x154c>  // b.tstop
    884c:	ldr	w10, [x21, #32]
    8850:	b	88b0 <BZ2_decompress@@Base+0x15a8>
    8854:	ldr	x9, [x21]
    8858:	ldr	w10, [x9, #8]
    885c:	sub	w11, w10, #0x1
    8860:	cmn	w11, #0x1
    8864:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    8868:	ldr	x12, [x9]
    886c:	ldr	w13, [x21, #32]
    8870:	add	w8, w8, #0x8
    8874:	ldrb	w10, [x12], #1
    8878:	bfi	w10, w13, #8, #24
    887c:	stp	w10, w8, [x21, #32]
    8880:	ldr	w13, [x9, #12]
    8884:	str	x12, [x9]
    8888:	adds	w12, w13, #0x1
    888c:	stp	w11, w12, [x9, #8]
    8890:	b.cc	88a0 <BZ2_decompress@@Base+0x1598>  // b.lo, b.ul, b.last
    8894:	ldr	w12, [x9, #16]
    8898:	add	w12, w12, #0x1
    889c:	str	w12, [x9, #16]
    88a0:	sub	w12, w8, #0x8
    88a4:	cmn	w12, #0x8
    88a8:	sub	w11, w11, #0x1
    88ac:	b.le	8860 <BZ2_decompress@@Base+0x1558>
    88b0:	sub	w8, w8, #0x1
    88b4:	lsr	w9, w10, w8
    88b8:	and	w14, w9, #0x1
    88bc:	bfi	w9, w7, #1, #31
    88c0:	str	w8, [x21, #36]
    88c4:	mov	w7, w9
    88c8:	b	965c <BZ2_decompress@@Base+0x2354>
    88cc:	mov	w0, wzr
    88d0:	b	88d8 <BZ2_decompress@@Base+0x15d0>
    88d4:	mov	w0, #0xfffffffc            	// #-4
    88d8:	ldur	w9, [x29, #-36]
    88dc:	ldur	x8, [x29, #-16]
    88e0:	stp	w17, w6, [x22, #8]
    88e4:	stp	w25, w19, [x22, #16]
    88e8:	str	w24, [x22, #80]
    88ec:	stp	w8, w23, [x22]
    88f0:	ldur	w8, [x29, #-32]
    88f4:	stp	w16, w5, [x22, #32]
    88f8:	stp	w26, w18, [x22, #40]
    88fc:	stp	w30, w4, [x22, #48]
    8900:	stp	w8, w15, [x22, #24]
    8904:	stp	w28, w9, [x22, #56]
    8908:	stp	w1, w7, [x22, #64]
    890c:	stp	w14, w2, [x22, #72]
    8910:	ldur	x8, [x29, #-24]
    8914:	stur	x3, [x22, #92]
    8918:	stur	x20, [x22, #100]
    891c:	stur	x8, [x22, #84]
    8920:	ldp	x20, x19, [sp, #224]
    8924:	ldp	x22, x21, [sp, #208]
    8928:	ldp	x24, x23, [sp, #192]
    892c:	ldp	x26, x25, [sp, #176]
    8930:	ldp	x28, x27, [sp, #160]
    8934:	ldp	x29, x30, [sp, #144]
    8938:	add	sp, sp, #0xf0
    893c:	ret
    8940:	cmp	w0, #0x10
    8944:	stur	x0, [x29, #-16]
    8948:	b.ge	89ec <BZ2_decompress@@Base+0x16e4>  // b.tcont
    894c:	ldr	w8, [x21, #36]
    8950:	mov	w9, #0x1c                  	// #28
    8954:	str	w9, [x21, #8]
    8958:	cmp	w8, #0x1
    895c:	b.lt	896c <BZ2_decompress@@Base+0x1664>  // b.tstop
    8960:	ldr	w9, [x21, #32]
    8964:	ldur	x0, [x29, #-16]
    8968:	b	89cc <BZ2_decompress@@Base+0x16c4>
    896c:	ldr	x10, [x21]
    8970:	ldur	x0, [x29, #-16]
    8974:	ldr	w9, [x10, #8]
    8978:	sub	w11, w9, #0x1
    897c:	cmn	w11, #0x1
    8980:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    8984:	ldr	x12, [x10]
    8988:	ldr	w13, [x21, #32]
    898c:	add	w8, w8, #0x8
    8990:	ldrb	w9, [x12], #1
    8994:	bfi	w9, w13, #8, #24
    8998:	stp	w9, w8, [x21, #32]
    899c:	ldr	w13, [x10, #12]
    89a0:	str	x12, [x10]
    89a4:	adds	w12, w13, #0x1
    89a8:	stp	w11, w12, [x10, #8]
    89ac:	b.cc	89bc <BZ2_decompress@@Base+0x16b4>  // b.lo, b.ul, b.last
    89b0:	ldr	w12, [x10, #16]
    89b4:	add	w12, w12, #0x1
    89b8:	str	w12, [x10, #16]
    89bc:	sub	w12, w8, #0x8
    89c0:	cmn	w12, #0x8
    89c4:	sub	w11, w11, #0x1
    89c8:	b.le	897c <BZ2_decompress@@Base+0x1674>
    89cc:	sub	w8, w8, #0x1
    89d0:	str	w8, [x21, #36]
    89d4:	lsr	w8, w9, w8
    89d8:	add	x10, x21, w0, sxtw
    89dc:	and	w8, w8, #0x1
    89e0:	strb	w8, [x10, #3452]
    89e4:	add	w0, w0, #0x1
    89e8:	b	8940 <BZ2_decompress@@Base+0x1638>
    89ec:	add	x0, x21, #0xc7c
    89f0:	mov	x8, x2
    89f4:	mov	w2, #0x100                 	// #256
    89f8:	str	x1, [sp, #32]
    89fc:	mov	w1, wzr
    8a00:	str	x20, [sp, #56]
    8a04:	mov	w20, w6
    8a08:	mov	w27, w4
    8a0c:	str	w24, [sp, #72]
    8a10:	stur	w14, [x29, #-40]
    8a14:	stur	x8, [x29, #-48]
    8a18:	str	w23, [sp, #64]
    8a1c:	str	w28, [sp, #48]
    8a20:	stur	w25, [x29, #-52]
    8a24:	mov	w25, w5
    8a28:	str	x26, [sp, #40]
    8a2c:	mov	x26, x3
    8a30:	stur	w19, [x29, #-60]
    8a34:	stp	w7, w16, [sp, #20]
    8a38:	mov	w23, w30
    8a3c:	mov	w28, w17
    8a40:	mov	x24, x18
    8a44:	mov	x19, x15
    8a48:	bl	1560 <memset@plt>
    8a4c:	ldp	w7, w16, [sp, #20]
    8a50:	mov	x15, x19
    8a54:	mov	x18, x24
    8a58:	mov	w17, w28
    8a5c:	mov	w30, w23
    8a60:	ldur	w19, [x29, #-60]
    8a64:	mov	x3, x26
    8a68:	ldp	x1, x26, [sp, #32]
    8a6c:	mov	w5, w25
    8a70:	ldur	w25, [x29, #-52]
    8a74:	ldr	w28, [sp, #48]
    8a78:	ldr	w23, [sp, #64]
    8a7c:	ldur	x2, [x29, #-48]
    8a80:	ldur	w14, [x29, #-40]
    8a84:	ldr	w24, [sp, #72]
    8a88:	mov	w6, w20
    8a8c:	ldr	x20, [sp, #56]
    8a90:	mov	w4, w27
    8a94:	mov	w12, wzr
    8a98:	b	8aa4 <BZ2_decompress@@Base+0x179c>
    8a9c:	ldur	x12, [x29, #-16]
    8aa0:	add	w12, w12, #0x1
    8aa4:	cmp	w12, #0xf
    8aa8:	stur	x12, [x29, #-16]
    8aac:	b.gt	8ac4 <BZ2_decompress@@Base+0x17bc>
    8ab0:	add	x8, x21, w12, sxtw
    8ab4:	ldrb	w8, [x8, #3452]
    8ab8:	cbz	w8, 8a9c <BZ2_decompress@@Base+0x1794>
    8abc:	mov	w23, wzr
    8ac0:	b	8bac <BZ2_decompress@@Base+0x18a4>
    8ac4:	mov	w9, wzr
    8ac8:	mov	x8, xzr
    8acc:	add	x10, x21, #0xc7c
    8ad0:	str	wzr, [x21, #3192]
    8ad4:	ldrb	w11, [x10, x8]
    8ad8:	cbz	w11, 8af0 <BZ2_decompress@@Base+0x17e8>
    8adc:	add	x9, x21, w9, sxtw
    8ae0:	strb	w8, [x9, #3468]
    8ae4:	ldr	w9, [x21, #3192]
    8ae8:	add	w9, w9, #0x1
    8aec:	str	w9, [x21, #3192]
    8af0:	add	x8, x8, #0x1
    8af4:	cmp	x8, #0x100
    8af8:	b.ne	8ad4 <BZ2_decompress@@Base+0x17cc>  // b.any
    8afc:	cbz	w9, 88d4 <BZ2_decompress@@Base+0x15cc>
    8b00:	add	w6, w9, #0x2
    8b04:	ldr	w8, [x21, #36]
    8b08:	mov	w9, #0x1e                  	// #30
    8b0c:	str	w9, [x21, #8]
    8b10:	cmp	w8, #0x3
    8b14:	b.lt	8b20 <BZ2_decompress@@Base+0x1818>  // b.tstop
    8b18:	ldr	w10, [x21, #32]
    8b1c:	b	8b7c <BZ2_decompress@@Base+0x1874>
    8b20:	ldr	x9, [x21]
    8b24:	ldr	w10, [x9, #8]
    8b28:	sub	w11, w10, #0x1
    8b2c:	cmn	w11, #0x1
    8b30:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    8b34:	ldr	x12, [x9]
    8b38:	ldr	w13, [x21, #32]
    8b3c:	add	w8, w8, #0x8
    8b40:	ldrb	w10, [x12], #1
    8b44:	bfi	w10, w13, #8, #24
    8b48:	stp	w10, w8, [x21, #32]
    8b4c:	ldr	w13, [x9, #12]
    8b50:	str	x12, [x9]
    8b54:	adds	w12, w13, #0x1
    8b58:	stp	w11, w12, [x9, #8]
    8b5c:	b.cc	8b6c <BZ2_decompress@@Base+0x1864>  // b.lo, b.ul, b.last
    8b60:	ldr	w12, [x9, #16]
    8b64:	add	w12, w12, #0x1
    8b68:	str	w12, [x9, #16]
    8b6c:	sub	w12, w8, #0x8
    8b70:	cmn	w12, #0x6
    8b74:	sub	w11, w11, #0x1
    8b78:	b.le	8b2c <BZ2_decompress@@Base+0x1824>
    8b7c:	sub	w8, w8, #0x3
    8b80:	lsr	w9, w10, w8
    8b84:	and	w25, w9, #0x7
    8b88:	cmp	w25, #0x7
    8b8c:	str	w8, [x21, #36]
    8b90:	b.hi	7568 <BZ2_decompress@@Base+0x260>  // b.pmore
    8b94:	mov	w9, #0x1                   	// #1
    8b98:	lsl	w9, w9, w25
    8b9c:	mov	w10, #0x83                  	// #131
    8ba0:	tst	w9, w10
    8ba4:	b.ne	88d4 <BZ2_decompress@@Base+0x15cc>  // b.any
    8ba8:	b	7568 <BZ2_decompress@@Base+0x260>
    8bac:	cmp	w23, #0xf
    8bb0:	b.gt	8a9c <BZ2_decompress@@Base+0x1794>
    8bb4:	ldr	w8, [x21, #36]
    8bb8:	mov	w9, #0x1d                  	// #29
    8bbc:	str	w9, [x21, #8]
    8bc0:	cmp	w8, #0x1
    8bc4:	b.lt	8bd0 <BZ2_decompress@@Base+0x18c8>  // b.tstop
    8bc8:	ldr	w10, [x21, #32]
    8bcc:	b	8c2c <BZ2_decompress@@Base+0x1924>
    8bd0:	ldr	x9, [x21]
    8bd4:	ldr	w10, [x9, #8]
    8bd8:	sub	w11, w10, #0x1
    8bdc:	cmn	w11, #0x1
    8be0:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    8be4:	ldr	x12, [x9]
    8be8:	ldr	w13, [x21, #32]
    8bec:	add	w8, w8, #0x8
    8bf0:	ldrb	w10, [x12], #1
    8bf4:	bfi	w10, w13, #8, #24
    8bf8:	stp	w10, w8, [x21, #32]
    8bfc:	ldr	w13, [x9, #12]
    8c00:	str	x12, [x9]
    8c04:	adds	w12, w13, #0x1
    8c08:	stp	w11, w12, [x9, #8]
    8c0c:	b.cc	8c1c <BZ2_decompress@@Base+0x1914>  // b.lo, b.ul, b.last
    8c10:	ldr	w12, [x9, #16]
    8c14:	add	w12, w12, #0x1
    8c18:	str	w12, [x9, #16]
    8c1c:	sub	w12, w8, #0x8
    8c20:	cmn	w12, #0x8
    8c24:	sub	w11, w11, #0x1
    8c28:	b.le	8bdc <BZ2_decompress@@Base+0x18d4>
    8c2c:	sub	w8, w8, #0x1
    8c30:	lsr	w9, w10, w8
    8c34:	str	w8, [x21, #36]
    8c38:	ldur	x8, [x29, #-16]
    8c3c:	tbz	w9, #0, 8c50 <BZ2_decompress@@Base+0x1948>
    8c40:	add	w8, w23, w8, lsl #4
    8c44:	add	x8, x21, w8, sxtw
    8c48:	mov	w9, #0x1                   	// #1
    8c4c:	strb	w9, [x8, #3196]
    8c50:	add	w23, w23, #0x1
    8c54:	b	8bac <BZ2_decompress@@Base+0x18a4>
    8c58:	cmp	w9, w19
    8c5c:	b.ge	8d44 <BZ2_decompress@@Base+0x1a3c>  // b.tcont
    8c60:	mov	w23, wzr
    8c64:	mov	w8, w9
    8c68:	stur	x8, [x29, #-16]
    8c6c:	mov	w8, #0x20                  	// #32
    8c70:	ldr	w9, [x21, #36]
    8c74:	str	w8, [x21, #8]
    8c78:	cmp	w9, #0x1
    8c7c:	b.lt	8c8c <BZ2_decompress@@Base+0x1984>  // b.tstop
    8c80:	ldr	w11, [x21, #32]
    8c84:	ldur	x0, [x29, #-16]
    8c88:	b	8cf4 <BZ2_decompress@@Base+0x19ec>
    8c8c:	ldr	x10, [x21]
    8c90:	ldur	x0, [x29, #-16]
    8c94:	mov	w27, w14
    8c98:	ldr	w11, [x10, #8]
    8c9c:	sub	w12, w11, #0x1
    8ca0:	cmn	w12, #0x1
    8ca4:	b.eq	8d18 <BZ2_decompress@@Base+0x1a10>  // b.none
    8ca8:	ldr	x13, [x10]
    8cac:	ldr	w14, [x21, #32]
    8cb0:	add	w9, w9, #0x8
    8cb4:	ldrb	w11, [x13], #1
    8cb8:	bfi	w11, w14, #8, #24
    8cbc:	stp	w11, w9, [x21, #32]
    8cc0:	ldr	w14, [x10, #12]
    8cc4:	str	x13, [x10]
    8cc8:	adds	w13, w14, #0x1
    8ccc:	stp	w12, w13, [x10, #8]
    8cd0:	b.cc	8ce0 <BZ2_decompress@@Base+0x19d8>  // b.lo, b.ul, b.last
    8cd4:	ldr	w13, [x10, #16]
    8cd8:	add	w13, w13, #0x1
    8cdc:	str	w13, [x10, #16]
    8ce0:	sub	w13, w9, #0x8
    8ce4:	cmn	w13, #0x8
    8ce8:	sub	w12, w12, #0x1
    8cec:	b.le	8ca0 <BZ2_decompress@@Base+0x1998>
    8cf0:	mov	w14, w27
    8cf4:	sub	w9, w9, #0x1
    8cf8:	lsr	w10, w11, w9
    8cfc:	str	w9, [x21, #36]
    8d00:	tbz	w10, #0, 8d24 <BZ2_decompress@@Base+0x1a1c>
    8d04:	add	w23, w23, #0x1
    8d08:	cmp	w23, w25
    8d0c:	mov	w0, #0xfffffffc            	// #-4
    8d10:	b.lt	8c70 <BZ2_decompress@@Base+0x1968>  // b.tstop
    8d14:	b	88d8 <BZ2_decompress@@Base+0x15d0>
    8d18:	mov	w0, wzr
    8d1c:	mov	w14, w27
    8d20:	b	88d8 <BZ2_decompress@@Base+0x15d0>
    8d24:	mov	w8, #0x4651                	// #18001
    8d28:	cmp	w0, w8
    8d2c:	b.gt	8d3c <BZ2_decompress@@Base+0x1a34>
    8d30:	add	x8, x21, w0, sxtw
    8d34:	mov	w9, #0x651e                	// #25886
    8d38:	strb	w23, [x8, x9]
    8d3c:	add	w9, w0, #0x1
    8d40:	b	8c58 <BZ2_decompress@@Base+0x1950>
    8d44:	mov	w8, #0x4652                	// #18002
    8d48:	cmp	w19, w8
    8d4c:	csel	w8, w19, w8, lt  // lt = tstop
    8d50:	cmp	w25, #0x1
    8d54:	b.lt	8d74 <BZ2_decompress@@Base+0x1a6c>  // b.tstop
    8d58:	mov	w9, wzr
    8d5c:	sub	x10, x29, #0x8
    8d60:	and	x11, x9, #0xff
    8d64:	strb	w9, [x10, x11]
    8d68:	add	w9, w9, #0x1
    8d6c:	cmp	w25, w9, uxtb
    8d70:	b.gt	8d60 <BZ2_decompress@@Base+0x1a58>
    8d74:	cmp	w19, #0x1
    8d78:	b.lt	8e08 <BZ2_decompress@@Base+0x1b00>  // b.tstop
    8d7c:	mov	x27, x2
    8d80:	mov	x2, x15
    8d84:	mov	x0, x18
    8d88:	mov	x15, xzr
    8d8c:	sxtw	x9, w8
    8d90:	mov	w10, #0x651e                	// #25886
    8d94:	sub	x11, x29, #0x8
    8d98:	mov	w12, #0x1ecc                	// #7884
    8d9c:	stur	w14, [x29, #-40]
    8da0:	str	w16, [sp, #24]
    8da4:	add	x13, x21, x15
    8da8:	mov	x19, x15
    8dac:	ldrb	w15, [x13, x10]
    8db0:	ldrb	w14, [x11, x15]
    8db4:	cbz	x15, 8dd4 <BZ2_decompress@@Base+0x1acc>
    8db8:	add	x16, x11, x15
    8dbc:	ldurb	w17, [x16, #-1]
    8dc0:	and	w18, w15, #0xff
    8dc4:	sub	x15, x15, #0x1
    8dc8:	cmp	w18, #0x1
    8dcc:	strb	w17, [x16]
    8dd0:	b.ne	8db8 <BZ2_decompress@@Base+0x1ab0>  // b.any
    8dd4:	mov	x15, x19
    8dd8:	add	x15, x19, #0x1
    8ddc:	cmp	x15, x9
    8de0:	sturb	w14, [x29, #-8]
    8de4:	strb	w14, [x13, x12]
    8de8:	b.lt	8da4 <BZ2_decompress@@Base+0x1a9c>  // b.tstop
    8dec:	ldr	w16, [sp, #24]
    8df0:	ldur	w14, [x29, #-40]
    8df4:	stur	x15, [x29, #-16]
    8df8:	mov	x18, x0
    8dfc:	mov	x15, x2
    8e00:	mov	x2, x27
    8e04:	b	8e0c <BZ2_decompress@@Base+0x1b04>
    8e08:	stur	xzr, [x29, #-16]
    8e0c:	mov	w17, wzr
    8e10:	mov	w19, w8
    8e14:	cmp	w17, w25
    8e18:	b.ge	8eac <BZ2_decompress@@Base+0x1ba4>  // b.tcont
    8e1c:	ldr	w8, [x21, #36]
    8e20:	mov	w9, #0x21                  	// #33
    8e24:	str	w9, [x21, #8]
    8e28:	cmp	w8, #0x5
    8e2c:	b.lt	8e38 <BZ2_decompress@@Base+0x1b30>  // b.tstop
    8e30:	ldr	w10, [x21, #32]
    8e34:	b	8e94 <BZ2_decompress@@Base+0x1b8c>
    8e38:	ldr	x9, [x21]
    8e3c:	ldr	w10, [x9, #8]
    8e40:	sub	w11, w10, #0x1
    8e44:	cmn	w11, #0x1
    8e48:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    8e4c:	ldr	x12, [x9]
    8e50:	ldr	w13, [x21, #32]
    8e54:	add	w8, w8, #0x8
    8e58:	ldrb	w10, [x12], #1
    8e5c:	bfi	w10, w13, #8, #24
    8e60:	stp	w10, w8, [x21, #32]
    8e64:	ldr	w13, [x9, #12]
    8e68:	str	x12, [x9]
    8e6c:	adds	w12, w13, #0x1
    8e70:	stp	w11, w12, [x9, #8]
    8e74:	b.cc	8e84 <BZ2_decompress@@Base+0x1b7c>  // b.lo, b.ul, b.last
    8e78:	ldr	w12, [x9, #16]
    8e7c:	add	w12, w12, #0x1
    8e80:	str	w12, [x9, #16]
    8e84:	sub	w12, w8, #0x8
    8e88:	cmn	w12, #0x4
    8e8c:	sub	w11, w11, #0x1
    8e90:	b.le	8e44 <BZ2_decompress@@Base+0x1b3c>
    8e94:	sub	w8, w8, #0x5
    8e98:	lsr	w9, w10, w8
    8e9c:	mov	w0, wzr
    8ea0:	and	w28, w9, #0x1f
    8ea4:	str	w8, [x21, #36]
    8ea8:	b	91bc <BZ2_decompress@@Base+0x1eb4>
    8eac:	mov	w8, #0x1ecc                	// #7884
    8eb0:	cmp	w25, #0x1
    8eb4:	add	x8, x21, x8
    8eb8:	str	x20, [sp, #56]
    8ebc:	str	w24, [sp, #72]
    8ec0:	str	w5, [sp, #28]
    8ec4:	stur	w4, [x29, #-56]
    8ec8:	str	x8, [sp, #40]
    8ecc:	stur	x2, [x29, #-48]
    8ed0:	stur	w14, [x29, #-40]
    8ed4:	str	w23, [sp, #64]
    8ed8:	stur	w19, [x29, #-60]
    8edc:	str	x1, [sp, #32]
    8ee0:	b.lt	8fe4 <BZ2_decompress@@Base+0x1cdc>  // b.tstop
    8ee4:	mov	w8, w25
    8ee8:	stur	x8, [x29, #-16]
    8eec:	mov	w8, w6
    8ef0:	stur	x8, [x29, #-32]
    8ef4:	mov	w8, #0xab70                	// #43888
    8ef8:	mov	x24, xzr
    8efc:	stur	w25, [x29, #-52]
    8f00:	add	x25, x21, x8
    8f04:	str	w28, [sp, #48]
    8f08:	mov	x28, x1
    8f0c:	mov	w26, w30
    8f10:	mov	w19, w7
    8f14:	mov	x23, x3
    8f18:	cmp	w6, #0x1
    8f1c:	b.lt	8f50 <BZ2_decompress@@Base+0x1c48>  // b.tstop
    8f20:	ldur	x8, [x29, #-32]
    8f24:	mov	w5, wzr
    8f28:	mov	w20, #0x20                  	// #32
    8f2c:	mov	x9, x25
    8f30:	ldrb	w10, [x9], #1
    8f34:	cmp	w5, w10
    8f38:	csel	w5, w10, w5, cc  // cc = lo, ul, last
    8f3c:	cmp	w20, w10
    8f40:	csel	w20, w10, w20, gt
    8f44:	subs	x8, x8, #0x1
    8f48:	b.ne	8f30 <BZ2_decompress@@Base+0x1c28>  // b.any
    8f4c:	b	8f58 <BZ2_decompress@@Base+0x1c50>
    8f50:	mov	w5, wzr
    8f54:	mov	w20, #0x20                  	// #32
    8f58:	mov	w8, #0x408                 	// #1032
    8f5c:	madd	x8, x24, x8, x21
    8f60:	mov	w10, #0xb17c                	// #45436
    8f64:	add	x0, x8, x10
    8f68:	mov	w10, #0xc9ac                	// #51628
    8f6c:	mov	w9, #0x102                 	// #258
    8f70:	add	x1, x8, x10
    8f74:	mov	w10, #0xe1dc                	// #57820
    8f78:	madd	x9, x24, x9, x21
    8f7c:	add	x2, x8, x10
    8f80:	mov	w8, #0xab70                	// #43888
    8f84:	add	x3, x9, x8
    8f88:	mov	w4, w20
    8f8c:	mov	w27, w6
    8f90:	bl	15b0 <BZ2_hbCreateDecodeTables@plt>
    8f94:	add	x8, x21, x24, lsl #2
    8f98:	mov	w9, #0xfa0c                	// #64012
    8f9c:	str	w20, [x8, x9]
    8fa0:	ldur	x8, [x29, #-16]
    8fa4:	add	x24, x24, #0x1
    8fa8:	mov	w6, w27
    8fac:	add	x25, x25, #0x102
    8fb0:	cmp	x24, x8
    8fb4:	mov	x3, x23
    8fb8:	mov	w7, w19
    8fbc:	mov	w30, w26
    8fc0:	mov	x1, x28
    8fc4:	b.ne	8f08 <BZ2_decompress@@Base+0x1c00>  // b.any
    8fc8:	ldur	w25, [x29, #-52]
    8fcc:	ldr	w28, [sp, #48]
    8fd0:	mov	w26, w30
    8fd4:	mov	w19, w7
    8fd8:	mov	x23, x3
    8fdc:	str	w25, [sp, #16]
    8fe0:	b	8ff8 <BZ2_decompress@@Base+0x1cf0>
    8fe4:	mov	w26, w30
    8fe8:	mov	w19, w7
    8fec:	mov	x23, x3
    8ff0:	mov	w27, w6
    8ff4:	str	wzr, [sp, #16]
    8ff8:	ldr	w20, [x21, #3192]
    8ffc:	ldr	w24, [x21, #40]
    9000:	add	x0, x21, #0x44
    9004:	mov	w2, #0x400                 	// #1024
    9008:	mov	w1, wzr
    900c:	bl	1560 <memset@plt>
    9010:	mov	w10, #0x86a0                	// #34464
    9014:	movk	w10, #0x1, lsl #16
    9018:	add	w8, w20, #0x1
    901c:	mul	w16, w24, w10
    9020:	ldr	w5, [sp, #28]
    9024:	ldr	w24, [sp, #72]
    9028:	ldr	x20, [sp, #56]
    902c:	mov	x3, x23
    9030:	ldr	w23, [sp, #64]
    9034:	mov	w7, w19
    9038:	ldp	w19, w4, [x29, #-60]
    903c:	ldr	x1, [sp, #32]
    9040:	ldur	x2, [x29, #-48]
    9044:	stur	w8, [x29, #-32]
    9048:	add	x8, x21, #0xe8c
    904c:	mov	w9, #0xfff                 	// #4095
    9050:	mov	w13, #0xf                   	// #15
    9054:	mov	w10, #0xff                  	// #255
    9058:	mov	w30, w26
    905c:	mov	x12, xzr
    9060:	mov	x11, x13
    9064:	add	x13, x8, w9, sxtw
    9068:	add	w14, w10, w12
    906c:	strb	w14, [x13, x12]
    9070:	sub	x12, x12, #0x1
    9074:	cmn	w12, #0x10
    9078:	b.ne	9068 <BZ2_decompress@@Base+0x1d60>  // b.any
    907c:	add	w14, w9, w12
    9080:	add	x15, x21, x11, lsl #2
    9084:	sub	x13, x11, #0x1
    9088:	add	x9, x12, w9, sxtw
    908c:	add	w12, w14, #0x1
    9090:	sub	x10, x10, #0x10
    9094:	str	w12, [x15, #7820]
    9098:	cbnz	x11, 905c <BZ2_decompress@@Base+0x1d54>
    909c:	cmp	w19, #0x1
    90a0:	mov	w6, w27
    90a4:	mov	w18, wzr
    90a8:	b.lt	9194 <BZ2_decompress@@Base+0x1e8c>  // b.tstop
    90ac:	ldr	x8, [sp, #40]
    90b0:	mov	w9, #0x408                 	// #1032
    90b4:	ldr	w17, [sp, #16]
    90b8:	ldur	w14, [x29, #-40]
    90bc:	ldrb	w2, [x8]
    90c0:	mov	w8, #0xfa0c                	// #64012
    90c4:	mov	w10, #0xc9ac                	// #51628
    90c8:	mov	w11, #0xe1dc                	// #57820
    90cc:	add	x12, x21, w2, uxtw #2
    90d0:	ldr	w24, [x12, x8]
    90d4:	umaddl	x9, w2, w9, x21
    90d8:	mov	w8, #0xb17c                	// #45436
    90dc:	add	x8, x9, x8
    90e0:	mov	w15, wzr
    90e4:	add	x3, x9, x10
    90e8:	add	x20, x9, x11
    90ec:	stur	x8, [x29, #-24]
    90f0:	mov	w8, #0x100                 	// #256
    90f4:	mov	w1, w24
    90f8:	mov	x26, x16
    90fc:	mov	w16, #0x31                  	// #49
    9100:	stur	x8, [x29, #-16]
    9104:	ldr	w8, [x21, #36]
    9108:	mov	w9, #0x24                  	// #36
    910c:	str	w9, [x21, #8]
    9110:	cmp	w8, w1
    9114:	b.ge	9174 <BZ2_decompress@@Base+0x1e6c>  // b.tcont
    9118:	ldr	x9, [x21]
    911c:	ldr	w10, [x9, #8]
    9120:	sub	w11, w10, #0x1
    9124:	cmn	w11, #0x1
    9128:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    912c:	ldr	x12, [x9]
    9130:	ldr	w13, [x21, #32]
    9134:	add	w8, w8, #0x8
    9138:	ldrb	w10, [x12], #1
    913c:	bfi	w10, w13, #8, #24
    9140:	stp	w10, w8, [x21, #32]
    9144:	ldr	w13, [x9, #12]
    9148:	str	x12, [x9]
    914c:	adds	w12, w13, #0x1
    9150:	stp	w11, w12, [x9, #8]
    9154:	b.cc	9164 <BZ2_decompress@@Base+0x1e5c>  // b.lo, b.ul, b.last
    9158:	ldr	w12, [x9, #16]
    915c:	add	w12, w12, #0x1
    9160:	str	w12, [x9, #16]
    9164:	cmp	w8, w1
    9168:	sub	w11, w11, #0x1
    916c:	b.lt	9124 <BZ2_decompress@@Base+0x1e1c>  // b.tstop
    9170:	b	9178 <BZ2_decompress@@Base+0x1e70>
    9174:	ldr	w10, [x21, #32]
    9178:	sub	w8, w8, w1
    917c:	mov	w9, #0xffffffff            	// #-1
    9180:	lsr	w10, w10, w8
    9184:	lsl	w9, w9, w1
    9188:	bic	w7, w10, w9
    918c:	str	w8, [x21, #36]
    9190:	b	878c <BZ2_decompress@@Base+0x1484>
    9194:	ldr	w17, [sp, #16]
    9198:	ldur	w14, [x29, #-40]
    919c:	mov	w9, #0x100                 	// #256
    91a0:	mov	w8, wzr
    91a4:	mov	w15, wzr
    91a8:	mov	w0, #0xfffffffc            	// #-4
    91ac:	stur	x9, [x29, #-16]
    91b0:	mov	x26, x16
    91b4:	mov	w16, wzr
    91b8:	b	88d8 <BZ2_decompress@@Base+0x15d0>
    91bc:	cmp	w0, w6
    91c0:	b.lt	91d0 <BZ2_decompress@@Base+0x1ec8>  // b.tstop
    91c4:	stur	x0, [x29, #-16]
    91c8:	add	w17, w17, #0x1
    91cc:	b	8e14 <BZ2_decompress@@Base+0x1b0c>
    91d0:	sub	w8, w28, #0x1
    91d4:	cmp	w8, #0x13
    91d8:	b.hi	9324 <BZ2_decompress@@Base+0x201c>  // b.pmore
    91dc:	stur	x0, [x29, #-16]
    91e0:	ldr	w8, [x21, #36]
    91e4:	mov	w9, #0x22                  	// #34
    91e8:	str	w9, [x21, #8]
    91ec:	cmp	w8, #0x1
    91f0:	b.lt	91fc <BZ2_decompress@@Base+0x1ef4>  // b.tstop
    91f4:	ldr	w10, [x21, #32]
    91f8:	b	9258 <BZ2_decompress@@Base+0x1f50>
    91fc:	ldr	x9, [x21]
    9200:	ldr	w10, [x9, #8]
    9204:	sub	w11, w10, #0x1
    9208:	cmn	w11, #0x1
    920c:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    9210:	ldr	x12, [x9]
    9214:	ldr	w13, [x21, #32]
    9218:	add	w8, w8, #0x8
    921c:	ldrb	w10, [x12], #1
    9220:	bfi	w10, w13, #8, #24
    9224:	stp	w10, w8, [x21, #32]
    9228:	ldr	w13, [x9, #12]
    922c:	str	x12, [x9]
    9230:	adds	w12, w13, #0x1
    9234:	stp	w11, w12, [x9, #8]
    9238:	b.cc	9248 <BZ2_decompress@@Base+0x1f40>  // b.lo, b.ul, b.last
    923c:	ldr	w12, [x9, #16]
    9240:	add	w12, w12, #0x1
    9244:	str	w12, [x9, #16]
    9248:	sub	w12, w8, #0x8
    924c:	cmn	w12, #0x8
    9250:	sub	w11, w11, #0x1
    9254:	b.le	9208 <BZ2_decompress@@Base+0x1f00>
    9258:	ldur	x0, [x29, #-16]
    925c:	sub	w8, w8, #0x1
    9260:	lsr	w9, w10, w8
    9264:	str	w8, [x21, #36]
    9268:	tbnz	w9, #0, 9288 <BZ2_decompress@@Base+0x1f80>
    926c:	mov	w8, #0x102                 	// #258
    9270:	smaddl	x8, w17, w8, x21
    9274:	mov	w9, #0xab70                	// #43888
    9278:	add	x8, x8, w0, sxtw
    927c:	strb	w28, [x8, x9]
    9280:	add	w0, w0, #0x1
    9284:	b	91bc <BZ2_decompress@@Base+0x1eb4>
    9288:	mov	w9, #0x23                  	// #35
    928c:	cmp	w8, #0x1
    9290:	str	w9, [x21, #8]
    9294:	b.lt	92a0 <BZ2_decompress@@Base+0x1f98>  // b.tstop
    9298:	ldr	w10, [x21, #32]
    929c:	b	92fc <BZ2_decompress@@Base+0x1ff4>
    92a0:	ldr	x9, [x21]
    92a4:	ldr	w10, [x9, #8]
    92a8:	sub	w11, w10, #0x1
    92ac:	cmn	w11, #0x1
    92b0:	b.eq	931c <BZ2_decompress@@Base+0x2014>  // b.none
    92b4:	ldr	x12, [x9]
    92b8:	ldr	w13, [x21, #32]
    92bc:	add	w8, w8, #0x8
    92c0:	ldrb	w10, [x12], #1
    92c4:	bfi	w10, w13, #8, #24
    92c8:	stp	w10, w8, [x21, #32]
    92cc:	ldr	w13, [x9, #12]
    92d0:	str	x12, [x9]
    92d4:	adds	w12, w13, #0x1
    92d8:	stp	w11, w12, [x9, #8]
    92dc:	b.cc	92ec <BZ2_decompress@@Base+0x1fe4>  // b.lo, b.ul, b.last
    92e0:	ldr	w12, [x9, #16]
    92e4:	add	w12, w12, #0x1
    92e8:	str	w12, [x9, #16]
    92ec:	sub	w12, w8, #0x8
    92f0:	cmn	w12, #0x8
    92f4:	sub	w11, w11, #0x1
    92f8:	b.le	92ac <BZ2_decompress@@Base+0x1fa4>
    92fc:	sub	w8, w8, #0x1
    9300:	str	w8, [x21, #36]
    9304:	lsr	w8, w10, w8
    9308:	tst	w8, #0x1
    930c:	mov	w8, #0x1                   	// #1
    9310:	cneg	w8, w8, ne  // ne = any
    9314:	add	w28, w8, w28
    9318:	b	91d0 <BZ2_decompress@@Base+0x1ec8>
    931c:	stur	x0, [x29, #-16]
    9320:	b	88cc <BZ2_decompress@@Base+0x15c4>
    9324:	stur	x0, [x29, #-16]
    9328:	b	88d4 <BZ2_decompress@@Base+0x15cc>
    932c:	sxtw	x8, w1
    9330:	ldr	w8, [x3, x8, lsl #2]
    9334:	sub	w8, w7, w8
    9338:	cmp	w8, #0x101
    933c:	b.hi	88d4 <BZ2_decompress@@Base+0x15cc>  // b.pmore
    9340:	ldr	w5, [x20, w8, uxtw #2]
    9344:	ldur	w8, [x29, #-32]
    9348:	cmp	w5, w8
    934c:	b.eq	967c <BZ2_decompress@@Base+0x2374>  // b.none
    9350:	subs	w11, w5, #0x1
    9354:	b.hi	9364 <BZ2_decompress@@Base+0x205c>  // b.pmore
    9358:	mov	w30, #0xffffffff            	// #-1
    935c:	mov	w4, #0x1                   	// #1
    9360:	b	9c0c <BZ2_decompress@@Base+0x2904>
    9364:	cmp	w18, w26
    9368:	b.ge	88d4 <BZ2_decompress@@Base+0x15cc>  // b.tcont
    936c:	cmp	w11, #0xf
    9370:	b.hi	93fc <BZ2_decompress@@Base+0x20f4>  // b.pmore
    9374:	ldrsw	x9, [x21, #7820]
    9378:	mov	w0, w14
    937c:	cmp	w11, #0x4
    9380:	add	w8, w9, w11
    9384:	add	x8, x21, x8
    9388:	ldrb	w8, [x8, #3724]
    938c:	b.cc	93c8 <BZ2_decompress@@Base+0x20c0>  // b.lo, b.ul, b.last
    9390:	mov	w10, w5
    9394:	add	w11, w9, w10
    9398:	add	x12, x21, #0xe8c
    939c:	sub	w13, w11, #0x4
    93a0:	sub	w11, w11, #0x5
    93a4:	ldr	w14, [x12, w11, sxtw]
    93a8:	sub	w11, w10, #0x4
    93ac:	sub	w10, w10, #0x5
    93b0:	cmp	w10, #0x3
    93b4:	mov	w10, w11
    93b8:	str	w14, [x12, w13, sxtw]
    93bc:	b.hi	9394 <BZ2_decompress@@Base+0x208c>  // b.pmore
    93c0:	subs	w11, w11, #0x1
    93c4:	b.eq	93ec <BZ2_decompress@@Base+0x20e4>  // b.none
    93c8:	neg	w10, w11
    93cc:	add	w11, w11, w9
    93d0:	sub	w12, w11, #0x1
    93d4:	add	x13, x21, #0xe8c
    93d8:	ldrb	w14, [x13, w12, uxtw]
    93dc:	adds	w10, w10, #0x1
    93e0:	strb	w14, [x13, w11, uxtw]
    93e4:	mov	w11, w12
    93e8:	b.cc	93d0 <BZ2_decompress@@Base+0x20c8>  // b.lo, b.ul, b.last
    93ec:	add	x9, x21, x9
    93f0:	strb	w8, [x9, #3724]
    93f4:	mov	w14, w0
    93f8:	b	9538 <BZ2_decompress@@Base+0x2230>
    93fc:	lsr	w10, w11, #4
    9400:	add	x9, x21, w10, uxtw #2
    9404:	ldr	w13, [x9, #7820]
    9408:	ands	w8, w11, #0xf
    940c:	mov	w11, #0x1e8c                	// #7820
    9410:	add	x11, x9, x11
    9414:	add	w12, w13, w8
    9418:	add	x8, x21, w12, sxtw
    941c:	ldrb	w8, [x8, #3724]
    9420:	b.eq	945c <BZ2_decompress@@Base+0x2154>  // b.none
    9424:	mov	w0, w14
    9428:	sxtw	x12, w12
    942c:	add	x13, x21, x12
    9430:	ldrb	w14, [x13, #3723]
    9434:	sub	x12, x12, #0x1
    9438:	strb	w14, [x13, #3724]
    943c:	ldrsw	x13, [x11]
    9440:	cmp	x12, x13
    9444:	b.gt	942c <BZ2_decompress@@Base+0x2124>
    9448:	add	w12, w13, #0x1
    944c:	mov	w14, w0
    9450:	str	w12, [x11]
    9454:	cbnz	w10, 9464 <BZ2_decompress@@Base+0x215c>
    9458:	b	949c <BZ2_decompress@@Base+0x2194>
    945c:	add	w12, w13, #0x1
    9460:	str	w12, [x11]
    9464:	mov	w11, #0x1e8c                	// #7820
    9468:	add	x10, x10, #0x1
    946c:	add	x9, x9, x11
    9470:	ldrsw	x11, [x9]
    9474:	add	x13, x21, #0xe8c
    9478:	sub	x10, x10, #0x1
    947c:	cmp	x10, #0x1
    9480:	sub	x11, x11, #0x1
    9484:	str	w11, [x9], #-4
    9488:	ldrsw	x12, [x9]
    948c:	add	x12, x12, x13
    9490:	ldrb	w12, [x12, #15]
    9494:	strb	w12, [x13, x11]
    9498:	b.gt	9470 <BZ2_decompress@@Base+0x2168>
    949c:	ldrsw	x9, [x21, #7820]
    94a0:	sub	x9, x9, #0x1
    94a4:	str	w9, [x21, #7820]
    94a8:	add	x9, x21, x9
    94ac:	strb	w8, [x9, #3724]
    94b0:	ldr	w9, [x21, #7820]
    94b4:	cbnz	w9, 9538 <BZ2_decompress@@Base+0x2230>
    94b8:	mov	x27, x2
    94bc:	mov	w2, w16
    94c0:	mov	x0, x15
    94c4:	add	x9, x21, #0xe8c
    94c8:	mov	w10, #0xfff                 	// #4095
    94cc:	mov	w15, #0xf                   	// #15
    94d0:	mov	w11, #0x1e8c                	// #7820
    94d4:	stur	w14, [x29, #-40]
    94d8:	add	x14, x21, x15, lsl #2
    94dc:	mov	x13, xzr
    94e0:	mov	x12, x15
    94e4:	add	x14, x14, x11
    94e8:	add	x15, x9, w10, sxtw
    94ec:	ldr	w16, [x14]
    94f0:	add	w16, w13, w16
    94f4:	add	w16, w16, #0xf
    94f8:	add	x16, x21, w16, sxtw
    94fc:	ldrb	w16, [x16, #3724]
    9500:	strb	w16, [x15, x13]
    9504:	sub	x13, x13, #0x1
    9508:	cmn	w13, #0x10
    950c:	b.ne	94ec <BZ2_decompress@@Base+0x21e4>  // b.any
    9510:	add	w16, w10, w13
    9514:	sub	x15, x12, #0x1
    9518:	add	w16, w16, #0x1
    951c:	add	x10, x13, w10, sxtw
    9520:	str	w16, [x14]
    9524:	cbnz	x12, 94d8 <BZ2_decompress@@Base+0x21d0>
    9528:	ldur	w14, [x29, #-40]
    952c:	mov	x15, x0
    9530:	mov	w16, w2
    9534:	mov	x2, x27
    9538:	add	x8, x21, x8
    953c:	ldrb	w9, [x8, #3468]
    9540:	add	x9, x21, x9, lsl #2
    9544:	ldr	w10, [x9, #68]
    9548:	add	w10, w10, #0x1
    954c:	str	w10, [x9, #68]
    9550:	ldrb	w9, [x21, #44]
    9554:	ldrb	w8, [x8, #3468]
    9558:	cbz	w9, 9568 <BZ2_decompress@@Base+0x2260>
    955c:	ldr	x9, [x21, #3160]
    9560:	strh	w8, [x9, w18, sxtw #1]
    9564:	b	9570 <BZ2_decompress@@Base+0x2268>
    9568:	ldr	x9, [x21, #3152]
    956c:	str	w8, [x9, w18, sxtw #2]
    9570:	add	w18, w18, #0x1
    9574:	cbnz	w16, 95c8 <BZ2_decompress@@Base+0x22c0>
    9578:	sxtw	x8, w15
    957c:	add	x15, x8, #0x1
    9580:	cmp	w15, w19
    9584:	b.ge	9df0 <BZ2_decompress@@Base+0x2ae8>  // b.tcont
    9588:	add	x8, x21, x15
    958c:	mov	w9, #0x1ecc                	// #7884
    9590:	ldrb	w2, [x8, x9]
    9594:	mov	w10, #0xfa0c                	// #64012
    9598:	mov	w8, #0x408                 	// #1032
    959c:	mov	w9, #0xb17c                	// #45436
    95a0:	add	x12, x21, x2, lsl #2
    95a4:	madd	x8, x2, x8, x21
    95a8:	ldr	w24, [x12, x10]
    95ac:	add	x9, x8, x9
    95b0:	mov	w11, #0xe1dc                	// #57820
    95b4:	stur	x9, [x29, #-24]
    95b8:	mov	w9, #0xc9ac                	// #51628
    95bc:	add	x20, x8, x11
    95c0:	add	x3, x8, x9
    95c4:	mov	w16, #0x32                  	// #50
    95c8:	sub	w16, w16, #0x1
    95cc:	mov	w1, w24
    95d0:	ldr	w8, [x21, #36]
    95d4:	mov	w9, #0x28                  	// #40
    95d8:	str	w9, [x21, #8]
    95dc:	cmp	w8, w1
    95e0:	b.ge	9640 <BZ2_decompress@@Base+0x2338>  // b.tcont
    95e4:	ldr	x9, [x21]
    95e8:	ldr	w10, [x9, #8]
    95ec:	sub	w11, w10, #0x1
    95f0:	cmn	w11, #0x1
    95f4:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    95f8:	ldr	x12, [x9]
    95fc:	ldr	w13, [x21, #32]
    9600:	add	w8, w8, #0x8
    9604:	ldrb	w10, [x12], #1
    9608:	bfi	w10, w13, #8, #24
    960c:	stp	w10, w8, [x21, #32]
    9610:	ldr	w13, [x9, #12]
    9614:	str	x12, [x9]
    9618:	adds	w12, w13, #0x1
    961c:	stp	w11, w12, [x9, #8]
    9620:	b.cc	9630 <BZ2_decompress@@Base+0x2328>  // b.lo, b.ul, b.last
    9624:	ldr	w12, [x9, #16]
    9628:	add	w12, w12, #0x1
    962c:	str	w12, [x9, #16]
    9630:	cmp	w8, w1
    9634:	sub	w11, w11, #0x1
    9638:	b.lt	95f0 <BZ2_decompress@@Base+0x22e8>  // b.tstop
    963c:	b	9644 <BZ2_decompress@@Base+0x233c>
    9640:	ldr	w10, [x21, #32]
    9644:	sub	w8, w8, w1
    9648:	mov	w9, #0xffffffff            	// #-1
    964c:	lsr	w10, w10, w8
    9650:	lsl	w9, w9, w1
    9654:	bic	w7, w10, w9
    9658:	str	w8, [x21, #36]
    965c:	cmp	w1, #0x14
    9660:	b.gt	88d4 <BZ2_decompress@@Base+0x15cc>
    9664:	ldur	x9, [x29, #-24]
    9668:	ldr	w9, [x9, w1, sxtw #2]
    966c:	cmp	w7, w9
    9670:	b.le	932c <BZ2_decompress@@Base+0x2024>
    9674:	add	w1, w1, #0x1
    9678:	b	883c <BZ2_decompress@@Base+0x1534>
    967c:	ldr	w8, [x21, #56]
    9680:	mov	w0, #0xfffffffc            	// #-4
    9684:	tbnz	w8, #31, 98cc <BZ2_decompress@@Base+0x25c4>
    9688:	cmp	w8, w18
    968c:	b.ge	98cc <BZ2_decompress@@Base+0x25c4>  // b.tcont
    9690:	mov	x10, xzr
    9694:	add	x8, x21, #0x44
    9698:	ldr	w9, [x8, x10, lsl #2]
    969c:	tbnz	w9, #31, 98c4 <BZ2_decompress@@Base+0x25bc>
    96a0:	cmp	w9, w18
    96a4:	b.gt	98c4 <BZ2_decompress@@Base+0x25bc>
    96a8:	add	x10, x10, #0x1
    96ac:	cmp	x10, #0x100
    96b0:	b.ne	9698 <BZ2_decompress@@Base+0x2390>  // b.any
    96b4:	mov	x27, x1
    96b8:	mov	x8, xzr
    96bc:	add	x1, x21, #0x448
    96c0:	str	wzr, [x21, #1096]
    96c4:	add	x9, x21, x8
    96c8:	ldur	q0, [x9, #68]
    96cc:	add	x8, x8, #0x10
    96d0:	add	x9, x9, #0x44c
    96d4:	cmp	x8, #0x400
    96d8:	str	q0, [x9]
    96dc:	b.ne	96c4 <BZ2_decompress@@Base+0x23bc>  // b.any
    96e0:	ldr	w9, [x21, #1096]
    96e4:	mov	x8, xzr
    96e8:	add	x10, x21, #0x44c
    96ec:	ldr	w11, [x10, x8]
    96f0:	add	w9, w11, w9
    96f4:	str	w9, [x10, x8]
    96f8:	add	x8, x8, #0x4
    96fc:	cmp	x8, #0x400
    9700:	b.ne	96ec <BZ2_decompress@@Base+0x23e4>  // b.any
    9704:	mov	x10, xzr
    9708:	add	x8, x21, #0x448
    970c:	ldr	w9, [x8, x10, lsl #2]
    9710:	tbnz	w9, #31, 98d4 <BZ2_decompress@@Base+0x25cc>
    9714:	cmp	w9, w18
    9718:	b.gt	98d4 <BZ2_decompress@@Base+0x25cc>
    971c:	add	x10, x10, #0x1
    9720:	cmp	x10, #0x101
    9724:	b.ne	970c <BZ2_decompress@@Base+0x2404>  // b.any
    9728:	ldr	w10, [x21, #1096]
    972c:	mov	x8, xzr
    9730:	add	x9, x21, #0x44c
    9734:	ldr	w11, [x9, x8, lsl #2]
    9738:	cmp	w10, w11
    973c:	b.gt	98dc <BZ2_decompress@@Base+0x25d4>
    9740:	add	x8, x8, #0x1
    9744:	cmp	x8, #0x100
    9748:	mov	w10, w11
    974c:	b.ne	9734 <BZ2_decompress@@Base+0x242c>  // b.any
    9750:	ldr	w8, [x21, #52]
    9754:	mov	w9, #0xffffffff            	// #-1
    9758:	str	w9, [x21, #3184]
    975c:	mov	w9, #0x2                   	// #2
    9760:	cmp	w8, #0x2
    9764:	str	wzr, [x21, #16]
    9768:	strb	wzr, [x21, #12]
    976c:	str	w9, [x21, #8]
    9770:	stur	w25, [x29, #-52]
    9774:	stur	w19, [x29, #-60]
    9778:	str	x26, [sp, #40]
    977c:	str	w16, [sp, #24]
    9780:	b.ge	9b84 <BZ2_decompress@@Base+0x287c>  // b.tcont
    9784:	ldur	w19, [x29, #-36]
    9788:	ldrb	w8, [x21, #44]
    978c:	str	x15, [sp, #72]
    9790:	cbz	w8, 99b0 <BZ2_decompress@@Base+0x26a8>
    9794:	stp	x20, x3, [sp, #56]
    9798:	mov	w26, w14
    979c:	mov	x20, x2
    97a0:	mov	w25, w5
    97a4:	mov	x8, xzr
    97a8:	stp	w30, w17, [sp, #12]
    97ac:	str	w7, [sp, #20]
    97b0:	stur	w4, [x29, #-56]
    97b4:	str	w6, [sp, #28]
    97b8:	add	x9, x21, x8
    97bc:	ldr	w10, [x9, #1096]
    97c0:	add	x8, x8, #0x4
    97c4:	cmp	x8, #0x404
    97c8:	str	w10, [x9, #2124]
    97cc:	b.ne	97b8 <BZ2_decompress@@Base+0x24b0>  // b.any
    97d0:	cmp	w18, #0x1
    97d4:	b.lt	983c <BZ2_decompress@@Base+0x2534>  // b.tstop
    97d8:	mov	x8, xzr
    97dc:	mov	w9, w18
    97e0:	ldr	x10, [x21, #3160]
    97e4:	lsl	x11, x8, #1
    97e8:	ubfx	x12, x8, #1, #31
    97ec:	ldrb	w11, [x10, x11]
    97f0:	add	x15, x21, x11, lsl #2
    97f4:	ldr	w14, [x15, #2124]
    97f8:	strh	w14, [x10, x8, lsl #1]
    97fc:	ldr	x11, [x21, #3168]
    9800:	add	x10, x15, #0x84c
    9804:	ldrb	w13, [x11, x12]
    9808:	tbnz	w8, #0, 9818 <BZ2_decompress@@Base+0x2510>
    980c:	and	w13, w13, #0xf0
    9810:	orr	w13, w13, w14, asr #16
    9814:	b	9820 <BZ2_decompress@@Base+0x2518>
    9818:	asr	w14, w14, #16
    981c:	bfi	w13, w14, #4, #28
    9820:	strb	w13, [x11, x12]
    9824:	ldr	w11, [x10]
    9828:	add	x8, x8, #0x1
    982c:	cmp	x9, x8
    9830:	add	w11, w11, #0x1
    9834:	str	w11, [x10]
    9838:	b.ne	97e0 <BZ2_decompress@@Base+0x24d8>  // b.any
    983c:	ldrsw	x9, [x21, #56]
    9840:	ldr	x8, [x21, #3168]
    9844:	ldr	x10, [x21, #3160]
    9848:	str	x18, [sp, #48]
    984c:	asr	w11, w9, #1
    9850:	ldrb	w11, [x8, w11, sxtw]
    9854:	ldrh	w23, [x10, x9, lsl #1]
    9858:	ubfiz	w12, w9, #2, #1
    985c:	lsr	w11, w11, w12
    9860:	bfi	w23, w11, #16, #4
    9864:	mov	w14, w23
    9868:	asr	w12, w14, #1
    986c:	ldrb	w13, [x8, w12, sxtw]
    9870:	ldrh	w23, [x10, w23, sxtw #1]
    9874:	strh	w9, [x10, w14, sxtw #1]
    9878:	ldrb	w10, [x8, w12, sxtw]
    987c:	ubfiz	w12, w14, #2, #1
    9880:	lsr	w12, w13, w12
    9884:	sbfx	x11, x14, #1, #31
    9888:	bfi	w23, w12, #16, #4
    988c:	tbnz	w14, #0, 989c <BZ2_decompress@@Base+0x2594>
    9890:	and	w10, w10, #0xf0
    9894:	orr	w10, w10, w9, asr #16
    9898:	b	98a4 <BZ2_decompress@@Base+0x259c>
    989c:	asr	w9, w9, #16
    98a0:	bfi	w10, w9, #4, #28
    98a4:	strb	w10, [x8, x11]
    98a8:	ldr	w8, [x21, #56]
    98ac:	cmp	w14, w8
    98b0:	b.eq	98f4 <BZ2_decompress@@Base+0x25ec>  // b.none
    98b4:	ldr	x10, [x21, #3160]
    98b8:	ldr	x8, [x21, #3168]
    98bc:	mov	w9, w14
    98c0:	b	9864 <BZ2_decompress@@Base+0x255c>
    98c4:	mov	w0, #0xfffffffc            	// #-4
    98c8:	stur	x10, [x29, #-16]
    98cc:	stur	w5, [x29, #-32]
    98d0:	b	88d8 <BZ2_decompress@@Base+0x15d0>
    98d4:	stur	x10, [x29, #-16]
    98d8:	b	98e4 <BZ2_decompress@@Base+0x25dc>
    98dc:	add	w8, w8, #0x1
    98e0:	stur	x8, [x29, #-16]
    98e4:	mov	w0, #0xfffffffc            	// #-4
    98e8:	stur	w5, [x29, #-32]
    98ec:	mov	x1, x27
    98f0:	b	88d8 <BZ2_decompress@@Base+0x15d0>
    98f4:	ldrb	w9, [x21, #20]
    98f8:	mov	w8, #0x86a0                	// #34464
    98fc:	movk	w8, #0x1, lsl #16
    9900:	str	w14, [x21, #60]
    9904:	str	wzr, [x21, #1092]
    9908:	stur	x14, [x29, #-16]
    990c:	cbz	w9, 9a14 <BZ2_decompress@@Base+0x270c>
    9910:	ldr	w9, [x21, #40]
    9914:	str	xzr, [x21, #24]
    9918:	mul	w8, w9, w8
    991c:	cmp	w14, w8
    9920:	b.cs	9aa4 <BZ2_decompress@@Base+0x279c>  // b.hs, b.nlast
    9924:	ldur	x0, [x29, #-16]
    9928:	bl	1680 <BZ2_indexIntoF@plt>
    992c:	ldr	w9, [x21, #60]
    9930:	ldr	x10, [x21, #3168]
    9934:	str	w0, [x21, #64]
    9938:	ldr	x11, [x21, #3160]
    993c:	lsr	x12, x9, #1
    9940:	ldrb	w10, [x10, x12]
    9944:	ldr	w12, [x21, #1092]
    9948:	ldrh	w11, [x11, x9, lsl #1]
    994c:	ubfiz	w9, w9, #2, #1
    9950:	lsr	w10, w10, w9
    9954:	ldr	w9, [x21, #24]
    9958:	mov	w8, w0
    995c:	add	w12, w12, #0x1
    9960:	bfi	w11, w10, #16, #4
    9964:	str	w11, [x21, #60]
    9968:	str	w12, [x21, #1092]
    996c:	cbnz	w9, 9990 <BZ2_decompress@@Base+0x2688>
    9970:	adrp	x9, 1d000 <BZ2_bzerror@@Base+0x10c24>
    9974:	ldrsw	x10, [x21, #28]
    9978:	ldr	x9, [x9, #4048]
    997c:	add	w11, w10, #0x1
    9980:	ldr	w9, [x9, x10, lsl #2]
    9984:	cmp	w11, #0x200
    9988:	csinc	w10, wzr, w10, eq  // eq = none
    998c:	stp	w9, w10, [x21, #24]
    9990:	sub	w9, w9, #0x1
    9994:	cmp	w9, #0x1
    9998:	str	w9, [x21, #24]
    999c:	cset	w9, eq  // eq = none
    99a0:	mov	w0, wzr
    99a4:	eor	w8, w8, w9
    99a8:	str	w8, [x21, #64]
    99ac:	b	9a6c <BZ2_decompress@@Base+0x2764>
    99b0:	ldr	x8, [x21, #3152]
    99b4:	mov	w16, w14
    99b8:	mov	x15, x2
    99bc:	mov	x2, x18
    99c0:	cmp	w18, #0x1
    99c4:	b.lt	9aac <BZ2_decompress@@Base+0x27a4>  // b.tstop
    99c8:	mov	w10, w2
    99cc:	mov	x9, xzr
    99d0:	lsl	x10, x10, #8
    99d4:	mov	x11, x8
    99d8:	ldrb	w12, [x11], #4
    99dc:	add	x12, x21, x12, lsl #2
    99e0:	ldrsw	x13, [x12, #1096]
    99e4:	ldr	w14, [x8, x13, lsl #2]
    99e8:	orr	w14, w14, w9
    99ec:	str	w14, [x8, x13, lsl #2]
    99f0:	ldr	w13, [x12, #1096]
    99f4:	add	x9, x9, #0x100
    99f8:	cmp	x10, x9
    99fc:	add	w13, w13, #0x1
    9a00:	str	w13, [x12, #1096]
    9a04:	b.ne	99d8 <BZ2_decompress@@Base+0x26d0>  // b.any
    9a08:	mov	w9, w2
    9a0c:	stur	x9, [x29, #-16]
    9a10:	b	9ab0 <BZ2_decompress@@Base+0x27a8>
    9a14:	ldr	w9, [x21, #40]
    9a18:	mul	w8, w9, w8
    9a1c:	cmp	w14, w8
    9a20:	b.cs	9aa4 <BZ2_decompress@@Base+0x279c>  // b.hs, b.nlast
    9a24:	ldur	x0, [x29, #-16]
    9a28:	bl	1680 <BZ2_indexIntoF@plt>
    9a2c:	ldr	w9, [x21, #60]
    9a30:	mov	w8, w0
    9a34:	ldr	x10, [x21, #3168]
    9a38:	str	w8, [x21, #64]
    9a3c:	ldr	x8, [x21, #3160]
    9a40:	lsr	x11, x9, #1
    9a44:	ldrb	w10, [x10, x11]
    9a48:	ldr	w11, [x21, #1092]
    9a4c:	ldrh	w8, [x8, x9, lsl #1]
    9a50:	ubfiz	w9, w9, #2, #1
    9a54:	lsr	w9, w10, w9
    9a58:	add	w10, w11, #0x1
    9a5c:	bfi	w8, w9, #16, #4
    9a60:	mov	w0, wzr
    9a64:	str	w8, [x21, #60]
    9a68:	str	w10, [x21, #1092]
    9a6c:	mov	w5, w25
    9a70:	stur	w25, [x29, #-32]
    9a74:	ldr	w6, [sp, #28]
    9a78:	mov	w9, w19
    9a7c:	ldp	w4, w25, [x29, #-56]
    9a80:	mov	x2, x20
    9a84:	mov	w14, w26
    9a88:	ldp	x20, x3, [sp, #56]
    9a8c:	ldp	w17, w7, [sp, #16]
    9a90:	ldur	w19, [x29, #-60]
    9a94:	ldr	w30, [sp, #12]
    9a98:	ldp	x26, x18, [sp, #40]
    9a9c:	mov	x1, x27
    9aa0:	b	9b78 <BZ2_decompress@@Base+0x2870>
    9aa4:	mov	w0, #0x1                   	// #1
    9aa8:	b	8920 <BZ2_decompress@@Base+0x1618>
    9aac:	stur	xzr, [x29, #-16]
    9ab0:	ldrsw	x9, [x21, #56]
    9ab4:	ldrb	w11, [x21, #20]
    9ab8:	mov	w10, #0x86a0                	// #34464
    9abc:	movk	w10, #0x1, lsl #16
    9ac0:	ldr	w9, [x8, x9, lsl #2]
    9ac4:	str	wzr, [x21, #1092]
    9ac8:	lsr	x9, x9, #8
    9acc:	str	w9, [x21, #60]
    9ad0:	cbz	w11, 9b28 <BZ2_decompress@@Base+0x2820>
    9ad4:	ldr	w11, [x21, #40]
    9ad8:	mov	w0, #0x1                   	// #1
    9adc:	str	xzr, [x21, #24]
    9ae0:	mul	w10, w11, w10
    9ae4:	cmp	w9, w10
    9ae8:	b.cs	8920 <BZ2_decompress@@Base+0x1618>  // b.hs, b.nlast
    9aec:	ldr	w8, [x8, x9, lsl #2]
    9af0:	str	w0, [x21, #1092]
    9af4:	lsr	w9, w8, #8
    9af8:	str	w9, [x21, #60]
    9afc:	adrp	x9, 1d000 <BZ2_bzerror@@Base+0x10c24>
    9b00:	ldr	x9, [x9, #4048]
    9b04:	and	w8, w8, #0xff
    9b08:	ldr	w9, [x9]
    9b0c:	sub	w9, w9, #0x1
    9b10:	cmp	w9, #0x1
    9b14:	stp	w9, w0, [x21, #24]
    9b18:	cset	w9, eq  // eq = none
    9b1c:	eor	w8, w8, w9
    9b20:	str	w8, [x21, #64]
    9b24:	b	9b50 <BZ2_decompress@@Base+0x2848>
    9b28:	ldr	w11, [x21, #40]
    9b2c:	mov	w0, #0x1                   	// #1
    9b30:	mul	w10, w11, w10
    9b34:	cmp	w9, w10
    9b38:	b.cs	8920 <BZ2_decompress@@Base+0x1618>  // b.hs, b.nlast
    9b3c:	ldr	w8, [x8, w9, uxtw #2]
    9b40:	str	w0, [x21, #1092]
    9b44:	and	w9, w8, #0xff
    9b48:	lsr	w8, w8, #8
    9b4c:	stp	w8, w9, [x21, #60]
    9b50:	mov	w9, w19
    9b54:	ldur	w25, [x29, #-52]
    9b58:	ldur	w19, [x29, #-60]
    9b5c:	ldr	x26, [sp, #40]
    9b60:	mov	w0, wzr
    9b64:	mov	w14, w16
    9b68:	mov	x1, x27
    9b6c:	mov	x18, x2
    9b70:	mov	x2, x15
    9b74:	stur	w5, [x29, #-32]
    9b78:	ldr	x15, [sp, #72]
    9b7c:	ldr	w16, [sp, #24]
    9b80:	b	88dc <BZ2_decompress@@Base+0x15d4>
    9b84:	adrp	x8, 1d000 <BZ2_bzerror@@Base+0x10c24>
    9b88:	ldr	x8, [x8, #4016]
    9b8c:	str	x3, [sp, #64]
    9b90:	adrp	x0, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    9b94:	add	x0, x0, #0x8be
    9b98:	ldr	x3, [x8]
    9b9c:	stur	x1, [x29, #-16]
    9ba0:	mov	w1, #0x6                   	// #6
    9ba4:	stur	x2, [x29, #-48]
    9ba8:	mov	w2, #0x1                   	// #1
    9bac:	mov	w25, w6
    9bb0:	str	x20, [sp, #56]
    9bb4:	stur	w4, [x29, #-56]
    9bb8:	str	w5, [sp, #28]
    9bbc:	str	w7, [sp, #20]
    9bc0:	mov	w26, w30
    9bc4:	mov	w19, w17
    9bc8:	str	x18, [sp, #48]
    9bcc:	mov	x20, x15
    9bd0:	stur	w14, [x29, #-40]
    9bd4:	bl	16a0 <fwrite@plt>
    9bd8:	ldur	w14, [x29, #-40]
    9bdc:	ldur	x2, [x29, #-48]
    9be0:	mov	x15, x20
    9be4:	ldp	x18, x20, [sp, #48]
    9be8:	ldr	w7, [sp, #20]
    9bec:	ldr	x3, [sp, #64]
    9bf0:	ldr	w5, [sp, #28]
    9bf4:	ldur	w4, [x29, #-56]
    9bf8:	ldur	x1, [x29, #-16]
    9bfc:	mov	w17, w19
    9c00:	mov	w30, w26
    9c04:	mov	w6, w25
    9c08:	b	9784 <BZ2_decompress@@Base+0x247c>
    9c0c:	cmp	w4, #0x200, lsl #12
    9c10:	b.ge	88d4 <BZ2_decompress@@Base+0x15cc>  // b.tcont
    9c14:	cmp	w5, #0x1
    9c18:	b.eq	9c28 <BZ2_decompress@@Base+0x2920>  // b.none
    9c1c:	cbnz	w5, 9c2c <BZ2_decompress@@Base+0x2924>
    9c20:	add	w30, w30, w4
    9c24:	b	9c2c <BZ2_decompress@@Base+0x2924>
    9c28:	add	w30, w30, w4, lsl #1
    9c2c:	lsl	w4, w4, #1
    9c30:	cbnz	w16, 9c84 <BZ2_decompress@@Base+0x297c>
    9c34:	sxtw	x8, w15
    9c38:	add	x15, x8, #0x1
    9c3c:	cmp	w15, w19
    9c40:	b.ge	9df0 <BZ2_decompress@@Base+0x2ae8>  // b.tcont
    9c44:	add	x8, x21, x15
    9c48:	mov	w9, #0x1ecc                	// #7884
    9c4c:	ldrb	w2, [x8, x9]
    9c50:	mov	w10, #0xfa0c                	// #64012
    9c54:	mov	w8, #0x408                 	// #1032
    9c58:	mov	w9, #0xb17c                	// #45436
    9c5c:	add	x12, x21, x2, lsl #2
    9c60:	madd	x8, x2, x8, x21
    9c64:	ldr	w24, [x12, x10]
    9c68:	add	x9, x8, x9
    9c6c:	mov	w11, #0xe1dc                	// #57820
    9c70:	stur	x9, [x29, #-24]
    9c74:	mov	w9, #0xc9ac                	// #51628
    9c78:	add	x20, x8, x11
    9c7c:	add	x3, x8, x9
    9c80:	mov	w16, #0x32                  	// #50
    9c84:	sub	w16, w16, #0x1
    9c88:	mov	w1, w24
    9c8c:	ldr	w8, [x21, #36]
    9c90:	mov	w9, #0x26                  	// #38
    9c94:	str	w9, [x21, #8]
    9c98:	cmp	w8, w1
    9c9c:	b.ge	9cfc <BZ2_decompress@@Base+0x29f4>  // b.tcont
    9ca0:	ldr	x9, [x21]
    9ca4:	ldr	w10, [x9, #8]
    9ca8:	sub	w11, w10, #0x1
    9cac:	cmn	w11, #0x1
    9cb0:	b.eq	88cc <BZ2_decompress@@Base+0x15c4>  // b.none
    9cb4:	ldr	x12, [x9]
    9cb8:	ldr	w13, [x21, #32]
    9cbc:	add	w8, w8, #0x8
    9cc0:	ldrb	w10, [x12], #1
    9cc4:	bfi	w10, w13, #8, #24
    9cc8:	stp	w10, w8, [x21, #32]
    9ccc:	ldr	w13, [x9, #12]
    9cd0:	str	x12, [x9]
    9cd4:	adds	w12, w13, #0x1
    9cd8:	stp	w11, w12, [x9, #8]
    9cdc:	b.cc	9cec <BZ2_decompress@@Base+0x29e4>  // b.lo, b.ul, b.last
    9ce0:	ldr	w12, [x9, #16]
    9ce4:	add	w12, w12, #0x1
    9ce8:	str	w12, [x9, #16]
    9cec:	cmp	w8, w1
    9cf0:	sub	w11, w11, #0x1
    9cf4:	b.lt	9cac <BZ2_decompress@@Base+0x29a4>  // b.tstop
    9cf8:	b	9d00 <BZ2_decompress@@Base+0x29f8>
    9cfc:	ldr	w10, [x21, #32]
    9d00:	sub	w8, w8, w1
    9d04:	mov	w9, #0xffffffff            	// #-1
    9d08:	lsr	w10, w10, w8
    9d0c:	lsl	w9, w9, w1
    9d10:	bic	w7, w10, w9
    9d14:	str	w8, [x21, #36]
    9d18:	cmp	w1, #0x14
    9d1c:	b.gt	88d4 <BZ2_decompress@@Base+0x15cc>
    9d20:	ldur	x9, [x29, #-24]
    9d24:	ldr	w9, [x9, w1, sxtw #2]
    9d28:	cmp	w7, w9
    9d2c:	b.le	9d38 <BZ2_decompress@@Base+0x2a30>
    9d30:	add	w1, w1, #0x1
    9d34:	b	87ac <BZ2_decompress@@Base+0x14a4>
    9d38:	sxtw	x8, w1
    9d3c:	ldr	w8, [x3, x8, lsl #2]
    9d40:	sub	w8, w7, w8
    9d44:	cmp	w8, #0x101
    9d48:	b.hi	88d4 <BZ2_decompress@@Base+0x15cc>  // b.pmore
    9d4c:	ldr	w5, [x20, w8, uxtw #2]
    9d50:	cmp	w5, #0x2
    9d54:	b.cc	9c0c <BZ2_decompress@@Base+0x2904>  // b.lo, b.ul, b.last
    9d58:	ldrsw	x8, [x21, #7820]
    9d5c:	add	x8, x21, x8
    9d60:	ldrb	w8, [x8, #3724]
    9d64:	add	x8, x21, x8
    9d68:	ldrb	w9, [x8, #3468]
    9d6c:	add	w8, w30, #0x1
    9d70:	add	x10, x21, x9, lsl #2
    9d74:	ldr	w11, [x10, #68]
    9d78:	add	w11, w11, w8
    9d7c:	str	w11, [x10, #68]
    9d80:	ldrb	w10, [x21, #44]
    9d84:	cbz	w10, 9db4 <BZ2_decompress@@Base+0x2aac>
    9d88:	tbnz	w30, #31, 9ddc <BZ2_decompress@@Base+0x2ad4>
    9d8c:	sxtw	x18, w18
    9d90:	sxtw	x10, w26
    9d94:	cmp	x18, x10
    9d98:	b.ge	9de4 <BZ2_decompress@@Base+0x2adc>  // b.tcont
    9d9c:	ldr	x11, [x21, #3160]
    9da0:	subs	w8, w8, #0x1
    9da4:	strh	w9, [x11, x18, lsl #1]
    9da8:	add	x18, x18, #0x1
    9dac:	b.gt	9d94 <BZ2_decompress@@Base+0x2a8c>
    9db0:	b	9ddc <BZ2_decompress@@Base+0x2ad4>
    9db4:	tbnz	w30, #31, 9ddc <BZ2_decompress@@Base+0x2ad4>
    9db8:	sxtw	x18, w18
    9dbc:	sxtw	x10, w26
    9dc0:	cmp	x18, x10
    9dc4:	b.ge	9de4 <BZ2_decompress@@Base+0x2adc>  // b.tcont
    9dc8:	ldr	x11, [x21, #3152]
    9dcc:	subs	w8, w8, #0x1
    9dd0:	str	w9, [x11, x18, lsl #2]
    9dd4:	add	x18, x18, #0x1
    9dd8:	b.gt	9dc0 <BZ2_decompress@@Base+0x2ab8>
    9ddc:	mov	w30, w8
    9de0:	b	9344 <BZ2_decompress@@Base+0x203c>
    9de4:	mov	w0, #0xfffffffc            	// #-4
    9de8:	mov	w30, w8
    9dec:	b	88d8 <BZ2_decompress@@Base+0x15d0>
    9df0:	mov	w16, wzr
    9df4:	b	88d4 <BZ2_decompress@@Base+0x15cc>

0000000000009df8 <BZ2_bz__AssertH__fail@@Base>:
    9df8:	stp	x29, x30, [sp, #-32]!
    9dfc:	stp	x20, x19, [sp, #16]
    9e00:	mov	x29, sp
    9e04:	adrp	x20, 1d000 <BZ2_bzerror@@Base+0x10c24>
    9e08:	ldr	x20, [x20, #4016]
    9e0c:	mov	w19, w0
    9e10:	adrp	x1, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    9e14:	adrp	x3, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    9e18:	ldr	x8, [x20]
    9e1c:	add	x1, x1, #0x8d0
    9e20:	add	x3, x3, #0xed7
    9e24:	mov	w2, w19
    9e28:	mov	x0, x8
    9e2c:	bl	1700 <fprintf@plt>
    9e30:	cmp	w19, #0x3ef
    9e34:	b.ne	9e50 <BZ2_bz__AssertH__fail@@Base+0x58>  // b.any
    9e38:	ldr	x3, [x20]
    9e3c:	adrp	x0, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    9e40:	add	x0, x0, #0xa6d
    9e44:	mov	w1, #0x420                 	// #1056
    9e48:	mov	w2, #0x1                   	// #1
    9e4c:	bl	16a0 <fwrite@plt>
    9e50:	mov	w0, #0x3                   	// #3
    9e54:	bl	14d0 <exit@plt>

0000000000009e58 <BZ2_bzlibVersion@@Base>:
    9e58:	adrp	x0, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    9e5c:	add	x0, x0, #0xed7
    9e60:	ret

0000000000009e64 <BZ2_bzCompressInit@@Base>:
    9e64:	stp	x29, x30, [sp, #-64]!
    9e68:	stp	x24, x23, [sp, #16]
    9e6c:	stp	x22, x21, [sp, #32]
    9e70:	stp	x20, x19, [sp, #48]
    9e74:	mov	x29, sp
    9e78:	mov	x19, x0
    9e7c:	cmp	w3, #0xfa
    9e80:	mov	w0, #0xfffffffe            	// #-2
    9e84:	b.hi	a014 <BZ2_bzCompressInit@@Base+0x1b0>  // b.pmore
    9e88:	cbz	x19, a014 <BZ2_bzCompressInit@@Base+0x1b0>
    9e8c:	sub	w8, w1, #0x1
    9e90:	mov	w21, w1
    9e94:	cmp	w8, #0x8
    9e98:	b.hi	a014 <BZ2_bzCompressInit@@Base+0x1b0>  // b.pmore
    9e9c:	ldr	x8, [x19, #56]
    9ea0:	cmp	w3, #0x0
    9ea4:	mov	w9, #0x1e                  	// #30
    9ea8:	mov	w22, w2
    9eac:	csel	w24, w9, w3, eq  // eq = none
    9eb0:	cbnz	x8, 9ec0 <BZ2_bzCompressInit@@Base+0x5c>
    9eb4:	adrp	x8, a000 <BZ2_bzCompressInit@@Base+0x19c>
    9eb8:	add	x8, x8, #0x28
    9ebc:	str	x8, [x19, #56]
    9ec0:	ldr	x9, [x19, #64]
    9ec4:	cbnz	x9, 9ed4 <BZ2_bzCompressInit@@Base+0x70>
    9ec8:	adrp	x9, a000 <BZ2_bzCompressInit@@Base+0x19c>
    9ecc:	add	x9, x9, #0x34
    9ed0:	str	x9, [x19, #64]
    9ed4:	ldr	x0, [x19, #72]
    9ed8:	mov	w1, #0xd9d8                	// #55768
    9edc:	mov	w2, #0x1                   	// #1
    9ee0:	blr	x8
    9ee4:	cbz	x0, a010 <BZ2_bzCompressInit@@Base+0x1ac>
    9ee8:	str	x19, [x0]
    9eec:	stp	xzr, xzr, [x0, #32]
    9ef0:	str	xzr, [x0, #24]
    9ef4:	mov	x20, x0
    9ef8:	ldr	x8, [x19, #56]
    9efc:	ldr	x0, [x19, #72]
    9f00:	mov	w9, #0x1a80                	// #6784
    9f04:	movk	w9, #0x6, lsl #16
    9f08:	mul	w23, w21, w9
    9f0c:	mov	w2, #0x1                   	// #1
    9f10:	mov	w1, w23
    9f14:	blr	x8
    9f18:	str	x0, [x20, #24]
    9f1c:	ldr	x8, [x19, #56]
    9f20:	ldr	x0, [x19, #72]
    9f24:	add	w1, w23, #0x88
    9f28:	mov	w2, #0x1                   	// #1
    9f2c:	blr	x8
    9f30:	str	x0, [x20, #32]
    9f34:	ldr	x8, [x19, #56]
    9f38:	ldr	x0, [x19, #72]
    9f3c:	mov	w1, #0x40004               	// #262148
    9f40:	mov	w2, #0x1                   	// #1
    9f44:	blr	x8
    9f48:	ldr	x1, [x20, #24]
    9f4c:	str	x0, [x20, #40]
    9f50:	cbz	x1, 9fe4 <BZ2_bzCompressInit@@Base+0x180>
    9f54:	cbz	x0, 9fdc <BZ2_bzCompressInit@@Base+0x178>
    9f58:	ldr	x8, [x20, #32]
    9f5c:	cbz	x8, 9fdc <BZ2_bzCompressInit@@Base+0x178>
    9f60:	mov	w9, #0x86a0                	// #34464
    9f64:	movi	v0.2s, #0x2
    9f68:	stp	x1, x8, [x20, #56]
    9f6c:	adrp	x8, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    9f70:	movk	w9, #0x1, lsl #16
    9f74:	str	d0, [x20, #8]
    9f78:	ldr	d0, [x8, #2248]
    9f7c:	mul	w9, w21, w9
    9f80:	movi	v1.2d, #0x0
    9f84:	sub	w8, w9, #0x13
    9f88:	str	w21, [x20, #664]
    9f8c:	str	w22, [x20, #656]
    9f90:	str	w24, [x20, #88]
    9f94:	stp	x1, xzr, [x20, #72]
    9f98:	str	w8, [x20, #112]
    9f9c:	str	x20, [x19, #48]
    9fa0:	stur	d1, [x19, #12]
    9fa4:	stur	d1, [x19, #36]
    9fa8:	stur	d1, [x20, #116]
    9fac:	movi	d1, #0xffffffff
    9fb0:	add	x0, x20, #0x80
    9fb4:	mov	w2, #0x100                 	// #256
    9fb8:	mov	w1, wzr
    9fbc:	str	wzr, [x20, #108]
    9fc0:	str	d1, [x20, #648]
    9fc4:	stur	d0, [x20, #92]
    9fc8:	bl	1560 <memset@plt>
    9fcc:	mov	w0, wzr
    9fd0:	mov	w8, #0x1                   	// #1
    9fd4:	str	w8, [x20, #660]
    9fd8:	b	a014 <BZ2_bzCompressInit@@Base+0x1b0>
    9fdc:	ldp	x8, x0, [x19, #64]
    9fe0:	blr	x8
    9fe4:	ldr	x1, [x20, #32]
    9fe8:	cbz	x1, 9ff4 <BZ2_bzCompressInit@@Base+0x190>
    9fec:	ldp	x8, x0, [x19, #64]
    9ff0:	blr	x8
    9ff4:	ldr	x1, [x20, #40]
    9ff8:	cbz	x1, a004 <BZ2_bzCompressInit@@Base+0x1a0>
    9ffc:	ldp	x8, x0, [x19, #64]
    a000:	blr	x8
    a004:	ldp	x8, x0, [x19, #64]
    a008:	mov	x1, x20
    a00c:	blr	x8
    a010:	mov	w0, #0xfffffffd            	// #-3
    a014:	ldp	x20, x19, [sp, #48]
    a018:	ldp	x22, x21, [sp, #32]
    a01c:	ldp	x24, x23, [sp, #16]
    a020:	ldp	x29, x30, [sp], #64
    a024:	ret
    a028:	mul	w8, w2, w1
    a02c:	sxtw	x0, w8
    a030:	b	1510 <malloc@plt>
    a034:	cbz	x1, a040 <BZ2_bzCompressInit@@Base+0x1dc>
    a038:	mov	x0, x1
    a03c:	b	1630 <free@plt>
    a040:	ret

000000000000a044 <BZ2_bzCompress@@Base>:
    a044:	stp	x29, x30, [sp, #-32]!
    a048:	str	x19, [sp, #16]
    a04c:	mov	x29, sp
    a050:	cbz	x0, a06c <BZ2_bzCompress@@Base+0x28>
    a054:	ldr	x19, [x0, #48]
    a058:	mov	x8, x0
    a05c:	cbz	x19, a06c <BZ2_bzCompress@@Base+0x28>
    a060:	ldr	x9, [x19]
    a064:	cmp	x9, x8
    a068:	b.eq	a07c <BZ2_bzCompress@@Base+0x38>  // b.none
    a06c:	mov	w0, #0xfffffffe            	// #-2
    a070:	ldr	x19, [sp, #16]
    a074:	ldp	x29, x30, [sp], #32
    a078:	ret
    a07c:	ldr	w9, [x19, #8]
    a080:	mov	w0, #0xffffffff            	// #-1
    a084:	cmp	w9, #0x2
    a088:	b.ne	a0b8 <BZ2_bzCompress@@Base+0x74>  // b.any
    a08c:	cmp	w1, #0x1
    a090:	b.eq	a0a4 <BZ2_bzCompress@@Base+0x60>  // b.none
    a094:	cmp	w1, #0x2
    a098:	b.ne	a108 <BZ2_bzCompress@@Base+0xc4>  // b.any
    a09c:	mov	w9, #0x4                   	// #4
    a0a0:	b	a0a8 <BZ2_bzCompress@@Base+0x64>
    a0a4:	mov	w9, #0x3                   	// #3
    a0a8:	ldr	w10, [x8, #8]
    a0ac:	str	w9, [x19, #8]
    a0b0:	str	w10, [x19, #16]
    a0b4:	b	a084 <BZ2_bzCompress@@Base+0x40>
    a0b8:	cmp	w9, #0x1
    a0bc:	b.eq	a070 <BZ2_bzCompress@@Base+0x2c>  // b.none
    a0c0:	cmp	w9, #0x3
    a0c4:	b.eq	a128 <BZ2_bzCompress@@Base+0xe4>  // b.none
    a0c8:	cmp	w9, #0x4
    a0cc:	b.ne	a160 <BZ2_bzCompress@@Base+0x11c>  // b.any
    a0d0:	cmp	w1, #0x2
    a0d4:	b.ne	a158 <BZ2_bzCompress@@Base+0x114>  // b.any
    a0d8:	ldr	w9, [x19, #16]
    a0dc:	ldr	w10, [x8, #8]
    a0e0:	cmp	w9, w10
    a0e4:	b.ne	a158 <BZ2_bzCompress@@Base+0x114>  // b.any
    a0e8:	mov	x0, x8
    a0ec:	bl	a1d0 <BZ2_bzCompress@@Base+0x18c>
    a0f0:	tst	w0, #0xff
    a0f4:	b.eq	a158 <BZ2_bzCompress@@Base+0x114>  // b.none
    a0f8:	ldr	w8, [x19, #16]
    a0fc:	cbz	w8, a19c <BZ2_bzCompress@@Base+0x158>
    a100:	mov	w0, #0x3                   	// #3
    a104:	b	a070 <BZ2_bzCompress@@Base+0x2c>
    a108:	mov	w0, #0xfffffffe            	// #-2
    a10c:	cbnz	w1, a070 <BZ2_bzCompress@@Base+0x2c>
    a110:	mov	x0, x8
    a114:	bl	a1d0 <BZ2_bzCompress@@Base+0x18c>
    a118:	tst	w0, #0xff
    a11c:	mov	w8, #0xfffffffe            	// #-2
    a120:	cinv	w0, w8, ne  // ne = any
    a124:	b	a070 <BZ2_bzCompress@@Base+0x2c>
    a128:	cmp	w1, #0x1
    a12c:	b.ne	a158 <BZ2_bzCompress@@Base+0x114>  // b.any
    a130:	ldr	w9, [x19, #16]
    a134:	ldr	w10, [x8, #8]
    a138:	cmp	w9, w10
    a13c:	b.ne	a158 <BZ2_bzCompress@@Base+0x114>  // b.any
    a140:	mov	x0, x8
    a144:	bl	a1d0 <BZ2_bzCompress@@Base+0x18c>
    a148:	ldr	w8, [x19, #16]
    a14c:	cbz	w8, a168 <BZ2_bzCompress@@Base+0x124>
    a150:	mov	w0, #0x2                   	// #2
    a154:	b	a070 <BZ2_bzCompress@@Base+0x2c>
    a158:	mov	w0, #0xffffffff            	// #-1
    a15c:	b	a070 <BZ2_bzCompress@@Base+0x2c>
    a160:	mov	w0, wzr
    a164:	b	a070 <BZ2_bzCompress@@Base+0x2c>
    a168:	ldr	w8, [x19, #92]
    a16c:	cmp	w8, #0xff
    a170:	b.hi	a180 <BZ2_bzCompress@@Base+0x13c>  // b.pmore
    a174:	ldr	w8, [x19, #96]
    a178:	cmp	w8, #0x0
    a17c:	b.gt	a150 <BZ2_bzCompress@@Base+0x10c>
    a180:	ldp	w9, w8, [x19, #116]
    a184:	mov	w0, #0x2                   	// #2
    a188:	cmp	w8, w9
    a18c:	b.lt	a070 <BZ2_bzCompress@@Base+0x2c>  // b.tstop
    a190:	str	w0, [x19, #8]
    a194:	mov	w0, #0x1                   	// #1
    a198:	b	a070 <BZ2_bzCompress@@Base+0x2c>
    a19c:	ldr	w8, [x19, #92]
    a1a0:	cmp	w8, #0xff
    a1a4:	b.hi	a1b4 <BZ2_bzCompress@@Base+0x170>  // b.pmore
    a1a8:	ldr	w8, [x19, #96]
    a1ac:	cmp	w8, #0x0
    a1b0:	b.gt	a100 <BZ2_bzCompress@@Base+0xbc>
    a1b4:	ldp	w9, w8, [x19, #116]
    a1b8:	cmp	w8, w9
    a1bc:	b.lt	a100 <BZ2_bzCompress@@Base+0xbc>  // b.tstop
    a1c0:	mov	w8, #0x1                   	// #1
    a1c4:	str	w8, [x19, #8]
    a1c8:	mov	w0, #0x4                   	// #4
    a1cc:	b	a070 <BZ2_bzCompress@@Base+0x2c>
    a1d0:	str	d8, [sp, #-96]!
    a1d4:	stp	x29, x30, [sp, #8]
    a1d8:	str	x27, [sp, #24]
    a1dc:	stp	x26, x25, [sp, #32]
    a1e0:	stp	x24, x23, [sp, #48]
    a1e4:	stp	x22, x21, [sp, #64]
    a1e8:	stp	x20, x19, [sp, #80]
    a1ec:	mov	x29, sp
    a1f0:	ldr	x19, [x0, #48]
    a1f4:	adrp	x24, 1d000 <BZ2_bzerror@@Base+0x10c24>
    a1f8:	adrp	x8, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    a1fc:	ldr	x24, [x24, #4024]
    a200:	ldr	d8, [x8, #2248]
    a204:	mov	w21, wzr
    a208:	mov	w22, wzr
    a20c:	mov	w23, #0x1                   	// #1
    a210:	mov	w25, #0xffffffff            	// #-1
    a214:	add	x20, x19, #0x80
    a218:	mov	w26, #0x2                   	// #2
    a21c:	ldr	w8, [x19, #12]
    a220:	cmp	w8, #0x2
    a224:	b.eq	a344 <BZ2_bzCompress@@Base+0x300>  // b.none
    a228:	cmp	w8, #0x1
    a22c:	b.ne	a220 <BZ2_bzCompress@@Base+0x1dc>  // b.any
    a230:	ldr	x9, [x19]
    a234:	ldr	w8, [x19, #120]
    a238:	ldr	w10, [x9, #32]
    a23c:	cbz	w10, a2b0 <BZ2_bzCompress@@Base+0x26c>
    a240:	ldr	w10, [x19, #116]
    a244:	cmp	w8, w10
    a248:	b.ge	a2b0 <BZ2_bzCompress@@Base+0x26c>  // b.tcont
    a24c:	ldr	x9, [x9, #24]
    a250:	ldr	x10, [x19, #80]
    a254:	ldrb	w8, [x10, w8, sxtw]
    a258:	strb	w8, [x9]
    a25c:	ldr	w8, [x19, #120]
    a260:	ldr	x10, [x19]
    a264:	add	w8, w8, #0x1
    a268:	str	w8, [x19, #120]
    a26c:	ldp	w9, w13, [x10, #32]
    a270:	ldr	x12, [x10, #24]
    a274:	sub	w11, w9, #0x1
    a278:	add	x9, x12, #0x1
    a27c:	adds	w12, w13, #0x1
    a280:	stp	w11, w12, [x10, #32]
    a284:	str	x9, [x10, #24]
    a288:	b.cc	a298 <BZ2_bzCompress@@Base+0x254>  // b.lo, b.ul, b.last
    a28c:	ldr	w12, [x10, #40]
    a290:	add	w12, w12, #0x1
    a294:	str	w12, [x10, #40]
    a298:	cbz	w11, a2a8 <BZ2_bzCompress@@Base+0x264>
    a29c:	ldr	w10, [x19, #116]
    a2a0:	cmp	w8, w10
    a2a4:	b.lt	a250 <BZ2_bzCompress@@Base+0x20c>  // b.tstop
    a2a8:	mov	w9, #0x1                   	// #1
    a2ac:	b	a2b4 <BZ2_bzCompress@@Base+0x270>
    a2b0:	mov	w9, wzr
    a2b4:	ldr	w10, [x19, #116]
    a2b8:	orr	w21, w9, w21
    a2bc:	cmp	w8, w10
    a2c0:	b.lt	a59c <BZ2_bzCompress@@Base+0x558>  // b.tstop
    a2c4:	ldr	w27, [x19, #8]
    a2c8:	cmp	w27, #0x4
    a2cc:	b.ne	a2f0 <BZ2_bzCompress@@Base+0x2ac>  // b.any
    a2d0:	ldr	w8, [x19, #16]
    a2d4:	cbnz	w8, a2f0 <BZ2_bzCompress@@Base+0x2ac>
    a2d8:	ldr	w8, [x19, #92]
    a2dc:	cmp	w8, #0xff
    a2e0:	b.hi	a59c <BZ2_bzCompress@@Base+0x558>  // b.pmore
    a2e4:	ldr	w8, [x19, #96]
    a2e8:	cmp	w8, #0x1
    a2ec:	b.lt	a59c <BZ2_bzCompress@@Base+0x558>  // b.tstop
    a2f0:	mov	w2, #0x100                 	// #256
    a2f4:	mov	x0, x20
    a2f8:	mov	w1, wzr
    a2fc:	str	wzr, [x19, #108]
    a300:	stp	wzr, wzr, [x19, #116]
    a304:	str	w25, [x19, #648]
    a308:	bl	1560 <memset@plt>
    a30c:	ldr	w8, [x19, #660]
    a310:	cmp	w27, #0x3
    a314:	str	w26, [x19, #12]
    a318:	add	w8, w8, #0x1
    a31c:	str	w8, [x19, #660]
    a320:	b.ne	a348 <BZ2_bzCompress@@Base+0x304>  // b.any
    a324:	ldr	w8, [x19, #16]
    a328:	cbnz	w8, a344 <BZ2_bzCompress@@Base+0x300>
    a32c:	ldr	w8, [x19, #92]
    a330:	cmp	w8, #0xff
    a334:	b.hi	a59c <BZ2_bzCompress@@Base+0x558>  // b.pmore
    a338:	ldr	w8, [x19, #96]
    a33c:	cmp	w8, #0x0
    a340:	b.le	a59c <BZ2_bzCompress@@Base+0x558>
    a344:	ldr	w27, [x19, #8]
    a348:	ldp	w8, w9, [x19, #108]
    a34c:	cmp	w27, #0x2
    a350:	b.ne	a438 <BZ2_bzCompress@@Base+0x3f4>  // b.any
    a354:	cmp	w8, w9
    a358:	b.ge	a52c <BZ2_bzCompress@@Base+0x4e8>  // b.tcont
    a35c:	ldr	x10, [x19]
    a360:	ldr	w11, [x10, #8]
    a364:	cbz	w11, a52c <BZ2_bzCompress@@Base+0x4e8>
    a368:	ldr	x12, [x10]
    a36c:	ldr	w11, [x19, #92]
    a370:	ldrb	w27, [x12]
    a374:	ldr	w9, [x19, #96]
    a378:	cmp	w11, w27
    a37c:	b.ne	a394 <BZ2_bzCompress@@Base+0x350>  // b.any
    a380:	cmp	w9, #0xff
    a384:	b.eq	a3d8 <BZ2_bzCompress@@Base+0x394>  // b.none
    a388:	add	w8, w9, #0x1
    a38c:	str	w8, [x19, #96]
    a390:	b	a3ec <BZ2_bzCompress@@Base+0x3a8>
    a394:	cmp	w9, #0x1
    a398:	b.ne	a3d8 <BZ2_bzCompress@@Base+0x394>  // b.any
    a39c:	ldr	w9, [x19, #648]
    a3a0:	and	w10, w11, #0xff
    a3a4:	add	x12, x19, w11, uxtw
    a3a8:	eor	w10, w10, w9, lsr #24
    a3ac:	ldr	w10, [x24, w10, uxtw #2]
    a3b0:	eor	w9, w10, w9, lsl #8
    a3b4:	str	w9, [x19, #648]
    a3b8:	strb	w23, [x12, #128]
    a3bc:	ldr	x9, [x19, #64]
    a3c0:	strb	w11, [x9, w8, sxtw]
    a3c4:	ldr	w8, [x19, #108]
    a3c8:	str	w27, [x19, #92]
    a3cc:	add	w8, w8, #0x1
    a3d0:	str	w8, [x19, #108]
    a3d4:	b	a3ec <BZ2_bzCompress@@Base+0x3a8>
    a3d8:	cmp	w11, #0xff
    a3dc:	b.hi	a3e8 <BZ2_bzCompress@@Base+0x3a4>  // b.pmore
    a3e0:	mov	x0, x19
    a3e4:	bl	c3fc <BZ2_bzerror@@Base+0x20>
    a3e8:	stp	w27, w23, [x19, #92]
    a3ec:	ldr	x8, [x19]
    a3f0:	ldr	x9, [x8]
    a3f4:	ldp	w10, w11, [x8, #8]
    a3f8:	add	x12, x9, #0x1
    a3fc:	sub	w13, w10, #0x1
    a400:	adds	w9, w11, #0x1
    a404:	str	x12, [x8]
    a408:	stp	w13, w9, [x8, #8]
    a40c:	b.cc	a41c <BZ2_bzCompress@@Base+0x3d8>  // b.lo, b.ul, b.last
    a410:	ldr	w9, [x8, #16]
    a414:	add	w9, w9, #0x1
    a418:	str	w9, [x8, #16]
    a41c:	ldp	w8, w9, [x19, #108]
    a420:	mov	w10, #0x1                   	// #1
    a424:	cmp	w8, w9
    a428:	b.ge	a530 <BZ2_bzCompress@@Base+0x4ec>  // b.tcont
    a42c:	mov	w11, w27
    a430:	cbnz	w13, a370 <BZ2_bzCompress@@Base+0x32c>
    a434:	b	a530 <BZ2_bzCompress@@Base+0x4ec>
    a438:	cmp	w8, w9
    a43c:	b.ge	a52c <BZ2_bzCompress@@Base+0x4e8>  // b.tcont
    a440:	ldr	x11, [x19]
    a444:	ldr	w10, [x11, #8]
    a448:	cbz	w10, a530 <BZ2_bzCompress@@Base+0x4ec>
    a44c:	ldr	w10, [x19, #16]
    a450:	cbz	w10, a530 <BZ2_bzCompress@@Base+0x4ec>
    a454:	ldr	x9, [x11]
    a458:	ldrb	w27, [x9]
    a45c:	ldp	w9, w10, [x19, #92]
    a460:	cmp	w9, w27
    a464:	b.ne	a47c <BZ2_bzCompress@@Base+0x438>  // b.any
    a468:	cmp	w10, #0xff
    a46c:	b.eq	a4c0 <BZ2_bzCompress@@Base+0x47c>  // b.none
    a470:	add	w8, w10, #0x1
    a474:	str	w8, [x19, #96]
    a478:	b	a4d4 <BZ2_bzCompress@@Base+0x490>
    a47c:	cmp	w10, #0x1
    a480:	b.ne	a4c0 <BZ2_bzCompress@@Base+0x47c>  // b.any
    a484:	ldr	w10, [x19, #648]
    a488:	and	w11, w9, #0xff
    a48c:	add	x12, x19, x9
    a490:	eor	w11, w11, w10, lsr #24
    a494:	ldr	w11, [x24, w11, uxtw #2]
    a498:	eor	w10, w11, w10, lsl #8
    a49c:	str	w10, [x19, #648]
    a4a0:	strb	w23, [x12, #128]
    a4a4:	ldr	x10, [x19, #64]
    a4a8:	strb	w9, [x10, w8, sxtw]
    a4ac:	ldr	w8, [x19, #108]
    a4b0:	str	w27, [x19, #92]
    a4b4:	add	w8, w8, #0x1
    a4b8:	str	w8, [x19, #108]
    a4bc:	b	a4d4 <BZ2_bzCompress@@Base+0x490>
    a4c0:	cmp	w9, #0xff
    a4c4:	b.hi	a4d0 <BZ2_bzCompress@@Base+0x48c>  // b.pmore
    a4c8:	mov	x0, x19
    a4cc:	bl	c3fc <BZ2_bzerror@@Base+0x20>
    a4d0:	stp	w27, w23, [x19, #92]
    a4d4:	ldr	x11, [x19]
    a4d8:	ldr	x8, [x11]
    a4dc:	ldp	w9, w10, [x11, #8]
    a4e0:	add	x8, x8, #0x1
    a4e4:	sub	w12, w9, #0x1
    a4e8:	adds	w9, w10, #0x1
    a4ec:	str	x8, [x11]
    a4f0:	stp	w12, w9, [x11, #8]
    a4f4:	b.cc	a504 <BZ2_bzCompress@@Base+0x4c0>  // b.lo, b.ul, b.last
    a4f8:	ldr	w8, [x11, #16]
    a4fc:	add	w8, w8, #0x1
    a500:	str	w8, [x11, #16]
    a504:	ldr	w10, [x19, #16]
    a508:	ldp	w8, w9, [x19, #108]
    a50c:	sub	w13, w10, #0x1
    a510:	cmp	w8, w9
    a514:	mov	w10, #0x1                   	// #1
    a518:	str	w13, [x19, #16]
    a51c:	b.ge	a530 <BZ2_bzCompress@@Base+0x4ec>  // b.tcont
    a520:	cbz	w12, a530 <BZ2_bzCompress@@Base+0x4ec>
    a524:	cbnz	w13, a454 <BZ2_bzCompress@@Base+0x410>
    a528:	b	a530 <BZ2_bzCompress@@Base+0x4ec>
    a52c:	mov	w10, wzr
    a530:	ldr	w11, [x19, #8]
    a534:	orr	w22, w10, w22
    a538:	cmp	w11, #0x2
    a53c:	b.eq	a548 <BZ2_bzCompress@@Base+0x504>  // b.none
    a540:	ldr	w10, [x19, #16]
    a544:	cbz	w10, a568 <BZ2_bzCompress@@Base+0x524>
    a548:	cmp	w8, w9
    a54c:	b.ge	a560 <BZ2_bzCompress@@Base+0x51c>  // b.tcont
    a550:	ldr	x8, [x19]
    a554:	ldr	w8, [x8, #8]
    a558:	cbnz	w8, a21c <BZ2_bzCompress@@Base+0x1d8>
    a55c:	b	a59c <BZ2_bzCompress@@Base+0x558>
    a560:	mov	w1, wzr
    a564:	b	a58c <BZ2_bzCompress@@Base+0x548>
    a568:	ldr	w8, [x19, #92]
    a56c:	cmp	w8, #0xff
    a570:	b.hi	a580 <BZ2_bzCompress@@Base+0x53c>  // b.pmore
    a574:	mov	x0, x19
    a578:	bl	c3fc <BZ2_bzerror@@Base+0x20>
    a57c:	ldr	w11, [x19, #8]
    a580:	cmp	w11, #0x4
    a584:	cset	w1, eq  // eq = none
    a588:	stur	d8, [x19, #92]
    a58c:	mov	x0, x19
    a590:	bl	1610 <BZ2_compressBlock@plt>
    a594:	str	w23, [x19, #12]
    a598:	b	a21c <BZ2_bzCompress@@Base+0x1d8>
    a59c:	orr	w8, w22, w21
    a5a0:	ldp	x20, x19, [sp, #80]
    a5a4:	ldp	x22, x21, [sp, #64]
    a5a8:	ldp	x24, x23, [sp, #48]
    a5ac:	ldp	x26, x25, [sp, #32]
    a5b0:	ldr	x27, [sp, #24]
    a5b4:	ldp	x29, x30, [sp, #8]
    a5b8:	tst	w8, #0xff
    a5bc:	cset	w0, ne  // ne = any
    a5c0:	ldr	d8, [sp], #96
    a5c4:	ret

000000000000a5c8 <BZ2_bzCompressEnd@@Base>:
    a5c8:	stp	x29, x30, [sp, #-32]!
    a5cc:	stp	x20, x19, [sp, #16]
    a5d0:	mov	x29, sp
    a5d4:	cbz	x0, a5f0 <BZ2_bzCompressEnd@@Base+0x28>
    a5d8:	ldr	x20, [x0, #48]
    a5dc:	mov	x19, x0
    a5e0:	cbz	x20, a5f0 <BZ2_bzCompressEnd@@Base+0x28>
    a5e4:	ldr	x8, [x20]
    a5e8:	cmp	x8, x19
    a5ec:	b.eq	a600 <BZ2_bzCompressEnd@@Base+0x38>  // b.none
    a5f0:	mov	w0, #0xfffffffe            	// #-2
    a5f4:	ldp	x20, x19, [sp, #16]
    a5f8:	ldp	x29, x30, [sp], #32
    a5fc:	ret
    a600:	ldr	x1, [x20, #24]
    a604:	cbz	x1, a610 <BZ2_bzCompressEnd@@Base+0x48>
    a608:	ldp	x8, x0, [x19, #64]
    a60c:	blr	x8
    a610:	ldr	x1, [x20, #32]
    a614:	cbz	x1, a620 <BZ2_bzCompressEnd@@Base+0x58>
    a618:	ldp	x8, x0, [x19, #64]
    a61c:	blr	x8
    a620:	ldr	x1, [x20, #40]
    a624:	cbz	x1, a630 <BZ2_bzCompressEnd@@Base+0x68>
    a628:	ldp	x8, x0, [x19, #64]
    a62c:	blr	x8
    a630:	ldp	x8, x0, [x19, #64]
    a634:	ldr	x1, [x19, #48]
    a638:	blr	x8
    a63c:	mov	w0, wzr
    a640:	str	xzr, [x19, #48]
    a644:	b	a5f4 <BZ2_bzCompressEnd@@Base+0x2c>

000000000000a648 <BZ2_bzDecompressInit@@Base>:
    a648:	stp	x29, x30, [sp, #-48]!
    a64c:	str	x21, [sp, #16]
    a650:	stp	x20, x19, [sp, #32]
    a654:	mov	x29, sp
    a658:	mov	x21, x0
    a65c:	cmp	w1, #0x4
    a660:	mov	w0, #0xfffffffe            	// #-2
    a664:	b.hi	a700 <BZ2_bzDecompressInit@@Base+0xb8>  // b.pmore
    a668:	cbz	x21, a700 <BZ2_bzDecompressInit@@Base+0xb8>
    a66c:	mov	w20, w2
    a670:	cmp	w2, #0x1
    a674:	b.hi	a700 <BZ2_bzDecompressInit@@Base+0xb8>  // b.pmore
    a678:	ldr	x8, [x21, #56]
    a67c:	mov	w19, w1
    a680:	cbnz	x8, a690 <BZ2_bzDecompressInit@@Base+0x48>
    a684:	adrp	x8, a000 <BZ2_bzCompressInit@@Base+0x19c>
    a688:	add	x8, x8, #0x28
    a68c:	str	x8, [x21, #56]
    a690:	ldr	x9, [x21, #64]
    a694:	cbnz	x9, a6a4 <BZ2_bzDecompressInit@@Base+0x5c>
    a698:	adrp	x9, a000 <BZ2_bzCompressInit@@Base+0x19c>
    a69c:	add	x9, x9, #0x34
    a6a0:	str	x9, [x21, #64]
    a6a4:	ldr	x0, [x21, #72]
    a6a8:	mov	w1, #0xfa90                	// #64144
    a6ac:	mov	w2, #0x1                   	// #1
    a6b0:	blr	x8
    a6b4:	cbz	x0, a6fc <BZ2_bzDecompressInit@@Base+0xb4>
    a6b8:	mov	x8, x0
    a6bc:	mov	w0, wzr
    a6c0:	mov	w9, #0xa                   	// #10
    a6c4:	movi	v0.2d, #0x0
    a6c8:	str	x21, [x8]
    a6cc:	str	x8, [x21, #48]
    a6d0:	str	w9, [x8, #8]
    a6d4:	str	wzr, [x8, #3188]
    a6d8:	str	d0, [x8, #32]
    a6dc:	stur	d0, [x21, #12]
    a6e0:	stur	d0, [x21, #36]
    a6e4:	strb	w20, [x8, #44]
    a6e8:	str	xzr, [x8, #3152]
    a6ec:	str	xzr, [x8, #3168]
    a6f0:	str	xzr, [x8, #3160]
    a6f4:	stp	wzr, w19, [x8, #48]
    a6f8:	b	a700 <BZ2_bzDecompressInit@@Base+0xb8>
    a6fc:	mov	w0, #0xfffffffd            	// #-3
    a700:	ldp	x20, x19, [sp, #32]
    a704:	ldr	x21, [sp, #16]
    a708:	ldp	x29, x30, [sp], #48
    a70c:	ret

000000000000a710 <BZ2_indexIntoF@@Base>:
    a710:	mov	w8, w0
    a714:	mov	w0, wzr
    a718:	mov	w9, #0x100                 	// #256
    a71c:	add	w10, w0, w9
    a720:	asr	w10, w10, #1
    a724:	ldr	w11, [x1, w10, sxtw #2]
    a728:	cmp	w11, w8
    a72c:	csel	w9, w10, w9, gt
    a730:	csel	w0, w0, w10, gt
    a734:	sub	w10, w9, w0
    a738:	cmp	w10, #0x1
    a73c:	b.ne	a71c <BZ2_indexIntoF@@Base+0xc>  // b.any
    a740:	ret

000000000000a744 <BZ2_bzDecompress@@Base>:
    a744:	stp	x29, x30, [sp, #-96]!
    a748:	stp	x28, x27, [sp, #16]
    a74c:	stp	x26, x25, [sp, #32]
    a750:	stp	x24, x23, [sp, #48]
    a754:	stp	x22, x21, [sp, #64]
    a758:	stp	x20, x19, [sp, #80]
    a75c:	mov	x29, sp
    a760:	cbz	x0, a778 <BZ2_bzDecompress@@Base+0x34>
    a764:	ldr	x19, [x0, #48]
    a768:	cbz	x19, a778 <BZ2_bzDecompress@@Base+0x34>
    a76c:	ldr	x8, [x19]
    a770:	cmp	x8, x0
    a774:	b.eq	a798 <BZ2_bzDecompress@@Base+0x54>  // b.none
    a778:	mov	w0, #0xfffffffe            	// #-2
    a77c:	ldp	x20, x19, [sp, #80]
    a780:	ldp	x22, x21, [sp, #64]
    a784:	ldp	x24, x23, [sp, #48]
    a788:	ldp	x26, x25, [sp, #32]
    a78c:	ldp	x28, x27, [sp, #16]
    a790:	ldp	x29, x30, [sp], #96
    a794:	ret
    a798:	adrp	x23, 1d000 <BZ2_bzerror@@Base+0x10c24>
    a79c:	adrp	x25, 1d000 <BZ2_bzerror@@Base+0x10c24>
    a7a0:	adrp	x21, 1d000 <BZ2_bzerror@@Base+0x10c24>
    a7a4:	ldr	w8, [x19, #8]
    a7a8:	ldr	x23, [x23, #4024]
    a7ac:	ldr	x25, [x25, #4048]
    a7b0:	ldr	x21, [x21, #4016]
    a7b4:	mov	w9, #0xfa50                	// #64080
    a7b8:	mov	w22, #0x86a0                	// #34464
    a7bc:	movk	w22, #0x1, lsl #16
    a7c0:	mov	w24, #0x1                   	// #1
    a7c4:	mov	w26, #0x2                   	// #2
    a7c8:	mov	w27, #0x3                   	// #3
    a7cc:	add	x28, x19, x9
    a7d0:	mov	w20, #0xe                   	// #14
    a7d4:	cmp	w8, #0x1
    a7d8:	b.eq	b4bc <BZ2_bzDecompress@@Base+0xd78>  // b.none
    a7dc:	cmp	w8, #0x2
    a7e0:	b.eq	a7f0 <BZ2_bzDecompress@@Base+0xac>  // b.none
    a7e4:	cmp	w8, #0xa
    a7e8:	b.lt	a7d4 <BZ2_bzDecompress@@Base+0x90>  // b.tstop
    a7ec:	b	b454 <BZ2_bzDecompress@@Base+0xd10>
    a7f0:	ldrb	w8, [x19, #44]
    a7f4:	ldrb	w9, [x19, #20]
    a7f8:	cbz	w8, ac24 <BZ2_bzDecompress@@Base+0x4e0>
    a7fc:	ldr	x8, [x19]
    a800:	ldr	w10, [x8, #32]
    a804:	cbz	w9, aed8 <BZ2_bzDecompress@@Base+0x794>
    a808:	cbz	w10, b3f8 <BZ2_bzDecompress@@Base+0xcb4>
    a80c:	ldr	w13, [x19, #16]
    a810:	cbnz	w13, abb4 <BZ2_bzDecompress@@Base+0x470>
    a814:	ldr	w13, [x28]
    a818:	ldr	w9, [x19, #1092]
    a81c:	add	w10, w13, #0x1
    a820:	cmp	w9, w10
    a824:	b.eq	b3f8 <BZ2_bzDecompress@@Base+0xcb4>  // b.none
    a828:	b.gt	b4c4 <BZ2_bzDecompress@@Base+0xd80>
    a82c:	ldr	w10, [x19, #40]
    a830:	ldp	w15, w14, [x19, #60]
    a834:	str	w24, [x19, #16]
    a838:	mul	w12, w10, w22
    a83c:	cmp	w15, w12
    a840:	strb	w14, [x19, #12]
    a844:	b.cs	b4c4 <BZ2_bzDecompress@@Base+0xd80>  // b.hs, b.nlast
    a848:	mov	w16, wzr
    a84c:	mov	w10, #0x100                 	// #256
    a850:	add	w11, w16, w10
    a854:	asr	w11, w11, #1
    a858:	add	x17, x19, w11, sxtw #2
    a85c:	ldr	w17, [x17, #1096]
    a860:	cmp	w17, w15
    a864:	csel	w10, w11, w10, gt
    a868:	csel	w16, w16, w11, gt
    a86c:	sub	w11, w10, w16
    a870:	cmp	w11, #0x1
    a874:	b.ne	a850 <BZ2_bzDecompress@@Base+0x10c>  // b.any
    a878:	ldr	x11, [x19, #3168]
    a87c:	ldr	x10, [x19, #3160]
    a880:	lsr	x17, x15, #1
    a884:	ldrb	w18, [x11, x17]
    a888:	lsl	w17, w15, #2
    a88c:	and	x0, x17, #0x4
    a890:	ldrh	w17, [x10, x15, lsl #1]
    a894:	lsr	x18, x18, x0
    a898:	ldr	w15, [x19, #24]
    a89c:	lsl	w18, w18, #16
    a8a0:	and	x18, x18, #0xf0000
    a8a4:	orr	x1, x18, x17
    a8a8:	str	w1, [x19, #60]
    a8ac:	cbnz	w15, a8c8 <BZ2_bzDecompress@@Base+0x184>
    a8b0:	ldrsw	x18, [x19, #28]
    a8b4:	ldr	w15, [x25, x18, lsl #2]
    a8b8:	add	w0, w18, #0x1
    a8bc:	cmp	w0, #0x200
    a8c0:	csinc	w18, wzr, w18, eq  // eq = none
    a8c4:	stp	w15, w18, [x19, #24]
    a8c8:	sub	w18, w15, #0x1
    a8cc:	add	w15, w9, #0x1
    a8d0:	cmp	w9, w13
    a8d4:	str	w18, [x19, #24]
    a8d8:	str	w15, [x19, #1092]
    a8dc:	b.eq	ab98 <BZ2_bzDecompress@@Base+0x454>  // b.none
    a8e0:	cmp	w18, #0x1
    a8e4:	cset	w0, eq  // eq = none
    a8e8:	and	w16, w16, #0xff
    a8ec:	eor	w16, w16, w0
    a8f0:	cmp	w16, w14
    a8f4:	b.ne	ab94 <BZ2_bzDecompress@@Base+0x450>  // b.any
    a8f8:	cmp	w1, w12
    a8fc:	str	w26, [x19, #16]
    a900:	b.cs	b4c4 <BZ2_bzDecompress@@Base+0xd80>  // b.hs, b.nlast
    a904:	mov	w0, wzr
    a908:	mov	w16, #0x100                 	// #256
    a90c:	add	w2, w0, w16
    a910:	asr	w2, w2, #1
    a914:	add	x3, x19, w2, sxtw #2
    a918:	ldr	w3, [x3, #1096]
    a91c:	cmp	w3, w1
    a920:	csel	w16, w2, w16, gt
    a924:	csel	w0, w0, w2, gt
    a928:	sub	w2, w16, w0
    a92c:	cmp	w2, #0x1
    a930:	b.ne	a90c <BZ2_bzDecompress@@Base+0x1c8>  // b.any
    a934:	lsr	x16, x1, #1
    a938:	ldrb	w2, [x11, x16]
    a93c:	lsl	w17, w17, #2
    a940:	ldrh	w16, [x10, x1, lsl #1]
    a944:	and	x17, x17, #0x4
    a948:	lsr	x17, x2, x17
    a94c:	lsl	w17, w17, #16
    a950:	and	x17, x17, #0xf0000
    a954:	orr	x1, x17, x16
    a958:	str	w1, [x19, #60]
    a95c:	cbnz	w18, a978 <BZ2_bzDecompress@@Base+0x234>
    a960:	ldrsw	x17, [x19, #28]
    a964:	ldr	w18, [x25, x17, lsl #2]
    a968:	add	w2, w17, #0x1
    a96c:	cmp	w2, #0x200
    a970:	csinc	w17, wzr, w17, eq  // eq = none
    a974:	stp	w18, w17, [x19, #24]
    a978:	sub	w18, w18, #0x1
    a97c:	add	w17, w9, #0x2
    a980:	cmp	w15, w13
    a984:	str	w18, [x19, #24]
    a988:	str	w17, [x19, #1092]
    a98c:	b.eq	abac <BZ2_bzDecompress@@Base+0x468>  // b.none
    a990:	cmp	w18, #0x1
    a994:	cset	w15, eq  // eq = none
    a998:	and	w0, w0, #0xff
    a99c:	eor	w15, w0, w15
    a9a0:	cmp	w15, w14
    a9a4:	b.ne	aba8 <BZ2_bzDecompress@@Base+0x464>  // b.any
    a9a8:	cmp	w1, w12
    a9ac:	str	w27, [x19, #16]
    a9b0:	b.cs	b4c4 <BZ2_bzDecompress@@Base+0xd80>  // b.hs, b.nlast
    a9b4:	mov	w0, wzr
    a9b8:	mov	w15, #0x100                 	// #256
    a9bc:	add	w2, w0, w15
    a9c0:	asr	w2, w2, #1
    a9c4:	add	x3, x19, w2, sxtw #2
    a9c8:	ldr	w3, [x3, #1096]
    a9cc:	cmp	w3, w1
    a9d0:	csel	w15, w2, w15, gt
    a9d4:	csel	w0, w0, w2, gt
    a9d8:	sub	w2, w15, w0
    a9dc:	cmp	w2, #0x1
    a9e0:	b.ne	a9bc <BZ2_bzDecompress@@Base+0x278>  // b.any
    a9e4:	lsr	x15, x1, #1
    a9e8:	ldrb	w2, [x11, x15]
    a9ec:	lsl	w16, w16, #2
    a9f0:	ldrh	w15, [x10, x1, lsl #1]
    a9f4:	and	x16, x16, #0x4
    a9f8:	lsr	x16, x2, x16
    a9fc:	lsl	w16, w16, #16
    aa00:	and	x16, x16, #0xf0000
    aa04:	orr	x1, x16, x15
    aa08:	str	w1, [x19, #60]
    aa0c:	cbnz	w18, aa28 <BZ2_bzDecompress@@Base+0x2e4>
    aa10:	ldrsw	x16, [x19, #28]
    aa14:	ldr	w18, [x25, x16, lsl #2]
    aa18:	add	w2, w16, #0x1
    aa1c:	cmp	w2, #0x200
    aa20:	csinc	w16, wzr, w16, eq  // eq = none
    aa24:	stp	w18, w16, [x19, #24]
    aa28:	sub	w16, w18, #0x1
    aa2c:	add	w18, w9, #0x3
    aa30:	cmp	w17, w13
    aa34:	str	w16, [x19, #24]
    aa38:	str	w18, [x19, #1092]
    aa3c:	b.eq	ac1c <BZ2_bzDecompress@@Base+0x4d8>  // b.none
    aa40:	cmp	w16, #0x1
    aa44:	cset	w13, eq  // eq = none
    aa48:	and	w17, w0, #0xff
    aa4c:	eor	w13, w17, w13
    aa50:	cmp	w13, w14
    aa54:	b.ne	ac18 <BZ2_bzDecompress@@Base+0x4d4>  // b.any
    aa58:	cmp	w1, w12
    aa5c:	b.cs	b4c4 <BZ2_bzDecompress@@Base+0xd80>  // b.hs, b.nlast
    aa60:	mov	w13, wzr
    aa64:	mov	w14, #0x100                 	// #256
    aa68:	add	w17, w13, w14
    aa6c:	asr	w17, w17, #1
    aa70:	add	x18, x19, w17, sxtw #2
    aa74:	ldr	w18, [x18, #1096]
    aa78:	cmp	w18, w1
    aa7c:	csel	w14, w17, w14, gt
    aa80:	csel	w13, w13, w17, gt
    aa84:	sub	w17, w14, w13
    aa88:	cmp	w17, #0x1
    aa8c:	b.ne	aa68 <BZ2_bzDecompress@@Base+0x324>  // b.any
    aa90:	lsr	x14, x1, #1
    aa94:	ldrb	w17, [x11, x14]
    aa98:	lsl	w15, w15, #2
    aa9c:	ldrh	w14, [x10, x1, lsl #1]
    aaa0:	and	x15, x15, #0x4
    aaa4:	lsr	x15, x17, x15
    aaa8:	lsl	w15, w15, #16
    aaac:	and	x15, x15, #0xf0000
    aab0:	orr	x15, x15, x14
    aab4:	str	w15, [x19, #60]
    aab8:	cbnz	w16, aad4 <BZ2_bzDecompress@@Base+0x390>
    aabc:	ldrsw	x17, [x19, #28]
    aac0:	ldr	w16, [x25, x17, lsl #2]
    aac4:	add	w18, w17, #0x1
    aac8:	cmp	w18, #0x200
    aacc:	csinc	w17, wzr, w17, eq  // eq = none
    aad0:	stp	w16, w17, [x19, #24]
    aad4:	sub	w16, w16, #0x1
    aad8:	add	w17, w9, #0x4
    aadc:	cmp	w16, #0x1
    aae0:	and	w13, w13, #0xff
    aae4:	str	w17, [x19, #1092]
    aae8:	cset	w17, eq  // eq = none
    aaec:	eor	w13, w13, w17
    aaf0:	add	w13, w13, #0x4
    aaf4:	cmp	w15, w12
    aaf8:	str	w16, [x19, #24]
    aafc:	str	w13, [x19, #16]
    ab00:	b.cs	b4c4 <BZ2_bzDecompress@@Base+0xd80>  // b.hs, b.nlast
    ab04:	mov	w12, wzr
    ab08:	mov	w17, #0x100                 	// #256
    ab0c:	add	w18, w12, w17
    ab10:	asr	w18, w18, #1
    ab14:	add	x0, x19, w18, sxtw #2
    ab18:	ldr	w0, [x0, #1096]
    ab1c:	cmp	w0, w15
    ab20:	csel	w17, w18, w17, gt
    ab24:	csel	w12, w12, w18, gt
    ab28:	sub	w18, w17, w12
    ab2c:	cmp	w18, #0x1
    ab30:	b.ne	ab0c <BZ2_bzDecompress@@Base+0x3c8>  // b.any
    ab34:	str	w12, [x19, #64]
    ab38:	lsr	x17, x15, #1
    ab3c:	ldrb	w11, [x11, x17]
    ab40:	ldrh	w10, [x10, x15, lsl #1]
    ab44:	ubfiz	w14, w14, #2, #1
    ab48:	lsr	w11, w11, w14
    ab4c:	bfi	w10, w11, #16, #4
    ab50:	str	w10, [x19, #60]
    ab54:	cbnz	w16, ab70 <BZ2_bzDecompress@@Base+0x42c>
    ab58:	ldrsw	x10, [x19, #28]
    ab5c:	ldr	w16, [x25, x10, lsl #2]
    ab60:	add	w11, w10, #0x1
    ab64:	cmp	w11, #0x200
    ab68:	csinc	w10, wzr, w10, eq  // eq = none
    ab6c:	stp	w16, w10, [x19, #24]
    ab70:	sub	w10, w16, #0x1
    ab74:	cmp	w10, #0x1
    ab78:	str	w10, [x19, #24]
    ab7c:	cset	w10, eq  // eq = none
    ab80:	add	w9, w9, #0x5
    ab84:	eor	w10, w12, w10
    ab88:	str	w10, [x19, #64]
    ab8c:	str	w9, [x19, #1092]
    ab90:	b	ab9c <BZ2_bzDecompress@@Base+0x458>
    ab94:	str	w16, [x19, #64]
    ab98:	mov	w13, #0x1                   	// #1
    ab9c:	ldr	w9, [x8, #32]
    aba0:	cbnz	w9, a810 <BZ2_bzDecompress@@Base+0xcc>
    aba4:	b	b3f8 <BZ2_bzDecompress@@Base+0xcb4>
    aba8:	str	w15, [x19, #64]
    abac:	mov	w13, #0x2                   	// #2
    abb0:	b	ab9c <BZ2_bzDecompress@@Base+0x458>
    abb4:	ldrb	w9, [x19, #12]
    abb8:	ldr	x8, [x8, #24]
    abbc:	strb	w9, [x8]
    abc0:	ldr	w9, [x19, #3184]
    abc4:	ldrb	w8, [x19, #12]
    abc8:	ldr	w10, [x19, #16]
    abcc:	eor	w8, w8, w9, lsr #24
    abd0:	ldr	w11, [x23, w8, uxtw #2]
    abd4:	ldr	x8, [x19]
    abd8:	sub	w13, w10, #0x1
    abdc:	str	w13, [x19, #16]
    abe0:	eor	w9, w11, w9, lsl #8
    abe4:	str	w9, [x19, #3184]
    abe8:	ldr	x9, [x8, #24]
    abec:	ldp	w10, w11, [x8, #32]
    abf0:	add	x9, x9, #0x1
    abf4:	str	x9, [x8, #24]
    abf8:	sub	w9, w10, #0x1
    abfc:	adds	w10, w11, #0x1
    ac00:	stp	w9, w10, [x8, #32]
    ac04:	b.cc	aba0 <BZ2_bzDecompress@@Base+0x45c>  // b.lo, b.ul, b.last
    ac08:	ldr	w10, [x8, #40]
    ac0c:	add	w10, w10, #0x1
    ac10:	str	w10, [x8, #40]
    ac14:	b	aba0 <BZ2_bzDecompress@@Base+0x45c>
    ac18:	str	w13, [x19, #64]
    ac1c:	mov	w13, #0x3                   	// #3
    ac20:	b	ab9c <BZ2_bzDecompress@@Base+0x458>
    ac24:	cbz	w9, b1fc <BZ2_bzDecompress@@Base+0xab8>
    ac28:	ldr	x8, [x19]
    ac2c:	ldr	w9, [x8, #32]
    ac30:	cbz	w9, b3f8 <BZ2_bzDecompress@@Base+0xcb4>
    ac34:	ldr	w12, [x19, #16]
    ac38:	cbnz	w12, ae68 <BZ2_bzDecompress@@Base+0x724>
    ac3c:	ldr	w12, [x28]
    ac40:	ldr	w9, [x19, #1092]
    ac44:	add	w10, w12, #0x1
    ac48:	cmp	w9, w10
    ac4c:	b.eq	b3f8 <BZ2_bzDecompress@@Base+0xcb4>  // b.none
    ac50:	b.gt	b4c4 <BZ2_bzDecompress@@Base+0xd80>
    ac54:	ldr	w10, [x19, #40]
    ac58:	ldp	w14, w13, [x19, #60]
    ac5c:	str	w24, [x19, #16]
    ac60:	mul	w11, w10, w22
    ac64:	cmp	w14, w11
    ac68:	strb	w13, [x19, #12]
    ac6c:	b.cs	b4c4 <BZ2_bzDecompress@@Base+0xd80>  // b.hs, b.nlast
    ac70:	ldr	x10, [x19, #3152]
    ac74:	ldr	w17, [x10, x14, lsl #2]
    ac78:	ldr	w14, [x19, #24]
    ac7c:	lsr	x16, x17, #8
    ac80:	str	w16, [x19, #60]
    ac84:	cbnz	w14, aca0 <BZ2_bzDecompress@@Base+0x55c>
    ac88:	ldrsw	x15, [x19, #28]
    ac8c:	ldr	w14, [x25, x15, lsl #2]
    ac90:	add	w18, w15, #0x1
    ac94:	cmp	w18, #0x200
    ac98:	csinc	w15, wzr, w15, eq  // eq = none
    ac9c:	stp	w14, w15, [x19, #24]
    aca0:	sub	w15, w14, #0x1
    aca4:	add	w14, w9, #0x1
    aca8:	cmp	w9, w12
    acac:	str	w15, [x19, #24]
    acb0:	str	w14, [x19, #1092]
    acb4:	b.eq	ae4c <BZ2_bzDecompress@@Base+0x708>  // b.none
    acb8:	cmp	w15, #0x1
    acbc:	cset	w18, eq  // eq = none
    acc0:	and	w17, w17, #0xff
    acc4:	eor	w17, w17, w18
    acc8:	cmp	w17, w13
    accc:	b.ne	ae48 <BZ2_bzDecompress@@Base+0x704>  // b.any
    acd0:	cmp	w16, w11
    acd4:	str	w26, [x19, #16]
    acd8:	b.cs	b4c4 <BZ2_bzDecompress@@Base+0xd80>  // b.hs, b.nlast
    acdc:	ldr	w18, [x10, x16, lsl #2]
    ace0:	lsr	x16, x18, #8
    ace4:	str	w16, [x19, #60]
    ace8:	cbnz	w15, ad04 <BZ2_bzDecompress@@Base+0x5c0>
    acec:	ldrsw	x17, [x19, #28]
    acf0:	ldr	w15, [x25, x17, lsl #2]
    acf4:	add	w0, w17, #0x1
    acf8:	cmp	w0, #0x200
    acfc:	csinc	w17, wzr, w17, eq  // eq = none
    ad00:	stp	w15, w17, [x19, #24]
    ad04:	sub	w17, w15, #0x1
    ad08:	add	w15, w9, #0x2
    ad0c:	cmp	w14, w12
    ad10:	str	w17, [x19, #24]
    ad14:	str	w15, [x19, #1092]
    ad18:	b.eq	ae60 <BZ2_bzDecompress@@Base+0x71c>  // b.none
    ad1c:	cmp	w17, #0x1
    ad20:	cset	w14, eq  // eq = none
    ad24:	and	w18, w18, #0xff
    ad28:	eor	w14, w18, w14
    ad2c:	cmp	w14, w13
    ad30:	b.ne	ae5c <BZ2_bzDecompress@@Base+0x718>  // b.any
    ad34:	cmp	w16, w11
    ad38:	str	w27, [x19, #16]
    ad3c:	b.cs	b4c4 <BZ2_bzDecompress@@Base+0xd80>  // b.hs, b.nlast
    ad40:	ldr	w18, [x10, x16, lsl #2]
    ad44:	lsr	x14, x18, #8
    ad48:	str	w14, [x19, #60]
    ad4c:	cbnz	w17, ad68 <BZ2_bzDecompress@@Base+0x624>
    ad50:	ldrsw	x16, [x19, #28]
    ad54:	ldr	w17, [x25, x16, lsl #2]
    ad58:	add	w0, w16, #0x1
    ad5c:	cmp	w0, #0x200
    ad60:	csinc	w16, wzr, w16, eq  // eq = none
    ad64:	stp	w17, w16, [x19, #24]
    ad68:	sub	w16, w17, #0x1
    ad6c:	add	w17, w9, #0x3
    ad70:	cmp	w15, w12
    ad74:	str	w16, [x19, #24]
    ad78:	str	w17, [x19, #1092]
    ad7c:	b.eq	aed0 <BZ2_bzDecompress@@Base+0x78c>  // b.none
    ad80:	cmp	w16, #0x1
    ad84:	cset	w12, eq  // eq = none
    ad88:	and	w15, w18, #0xff
    ad8c:	eor	w12, w15, w12
    ad90:	cmp	w12, w13
    ad94:	b.ne	aecc <BZ2_bzDecompress@@Base+0x788>  // b.any
    ad98:	cmp	w14, w11
    ad9c:	b.cs	b4c4 <BZ2_bzDecompress@@Base+0xd80>  // b.hs, b.nlast
    ada0:	ldr	w12, [x10, x14, lsl #2]
    ada4:	lsr	x13, x12, #8
    ada8:	str	w13, [x19, #60]
    adac:	cbnz	w16, adc8 <BZ2_bzDecompress@@Base+0x684>
    adb0:	ldrsw	x14, [x19, #28]
    adb4:	ldr	w16, [x25, x14, lsl #2]
    adb8:	add	w15, w14, #0x1
    adbc:	cmp	w15, #0x200
    adc0:	csinc	w14, wzr, w14, eq  // eq = none
    adc4:	stp	w16, w14, [x19, #24]
    adc8:	sub	w14, w16, #0x1
    adcc:	add	w15, w9, #0x4
    add0:	cmp	w14, #0x1
    add4:	and	w12, w12, #0xff
    add8:	str	w15, [x19, #1092]
    addc:	cset	w15, eq  // eq = none
    ade0:	eor	w12, w12, w15
    ade4:	add	w12, w12, #0x4
    ade8:	cmp	w13, w11
    adec:	str	w14, [x19, #24]
    adf0:	str	w12, [x19, #16]
    adf4:	b.cs	b4c4 <BZ2_bzDecompress@@Base+0xd80>  // b.hs, b.nlast
    adf8:	ldr	w11, [x10, x13, lsl #2]
    adfc:	and	w10, w11, #0xff
    ae00:	lsr	w11, w11, #8
    ae04:	stp	w11, w10, [x19, #60]
    ae08:	cbnz	w14, ae24 <BZ2_bzDecompress@@Base+0x6e0>
    ae0c:	ldrsw	x11, [x19, #28]
    ae10:	ldr	w14, [x25, x11, lsl #2]
    ae14:	add	w13, w11, #0x1
    ae18:	cmp	w13, #0x200
    ae1c:	csinc	w11, wzr, w11, eq  // eq = none
    ae20:	stp	w14, w11, [x19, #24]
    ae24:	sub	w11, w14, #0x1
    ae28:	cmp	w11, #0x1
    ae2c:	str	w11, [x19, #24]
    ae30:	cset	w11, eq  // eq = none
    ae34:	add	w9, w9, #0x5
    ae38:	eor	w10, w10, w11
    ae3c:	str	w10, [x19, #64]
    ae40:	str	w9, [x19, #1092]
    ae44:	b	ae50 <BZ2_bzDecompress@@Base+0x70c>
    ae48:	str	w17, [x19, #64]
    ae4c:	mov	w12, #0x1                   	// #1
    ae50:	ldr	w9, [x8, #32]
    ae54:	cbnz	w9, ac38 <BZ2_bzDecompress@@Base+0x4f4>
    ae58:	b	b3f8 <BZ2_bzDecompress@@Base+0xcb4>
    ae5c:	str	w14, [x19, #64]
    ae60:	mov	w12, #0x2                   	// #2
    ae64:	b	ae50 <BZ2_bzDecompress@@Base+0x70c>
    ae68:	ldrb	w9, [x19, #12]
    ae6c:	ldr	x8, [x8, #24]
    ae70:	strb	w9, [x8]
    ae74:	ldr	w9, [x19, #3184]
    ae78:	ldrb	w8, [x19, #12]
    ae7c:	ldr	w10, [x19, #16]
    ae80:	eor	w8, w8, w9, lsr #24
    ae84:	ldr	w11, [x23, w8, uxtw #2]
    ae88:	ldr	x8, [x19]
    ae8c:	sub	w12, w10, #0x1
    ae90:	str	w12, [x19, #16]
    ae94:	eor	w9, w11, w9, lsl #8
    ae98:	str	w9, [x19, #3184]
    ae9c:	ldr	x9, [x8, #24]
    aea0:	ldp	w10, w11, [x8, #32]
    aea4:	add	x9, x9, #0x1
    aea8:	str	x9, [x8, #24]
    aeac:	sub	w9, w10, #0x1
    aeb0:	adds	w10, w11, #0x1
    aeb4:	stp	w9, w10, [x8, #32]
    aeb8:	b.cc	ae54 <BZ2_bzDecompress@@Base+0x710>  // b.lo, b.ul, b.last
    aebc:	ldr	w10, [x8, #40]
    aec0:	add	w10, w10, #0x1
    aec4:	str	w10, [x8, #40]
    aec8:	b	ae54 <BZ2_bzDecompress@@Base+0x710>
    aecc:	str	w12, [x19, #64]
    aed0:	mov	w12, #0x3                   	// #3
    aed4:	b	ae50 <BZ2_bzDecompress@@Base+0x70c>
    aed8:	cbz	w10, b3f8 <BZ2_bzDecompress@@Base+0xcb4>
    aedc:	ldr	w13, [x19, #16]
    aee0:	cbnz	w13, b18c <BZ2_bzDecompress@@Base+0xa48>
    aee4:	ldr	w13, [x28]
    aee8:	ldr	w9, [x19, #1092]
    aeec:	add	w10, w13, #0x1
    aef0:	cmp	w9, w10
    aef4:	b.eq	b3f8 <BZ2_bzDecompress@@Base+0xcb4>  // b.none
    aef8:	b.gt	b4c4 <BZ2_bzDecompress@@Base+0xd80>
    aefc:	ldr	w10, [x19, #40]
    af00:	ldp	w17, w14, [x19, #60]
    af04:	str	w24, [x19, #16]
    af08:	mul	w12, w10, w22
    af0c:	cmp	w17, w12
    af10:	strb	w14, [x19, #12]
    af14:	b.cs	b4c4 <BZ2_bzDecompress@@Base+0xd80>  // b.hs, b.nlast
    af18:	mov	w16, wzr
    af1c:	mov	w10, #0x100                 	// #256
    af20:	add	w11, w16, w10
    af24:	asr	w11, w11, #1
    af28:	add	x15, x19, w11, sxtw #2
    af2c:	ldr	w15, [x15, #1096]
    af30:	cmp	w15, w17
    af34:	csel	w10, w11, w10, gt
    af38:	csel	w16, w16, w11, gt
    af3c:	sub	w11, w10, w16
    af40:	cmp	w11, #0x1
    af44:	b.ne	af20 <BZ2_bzDecompress@@Base+0x7dc>  // b.any
    af48:	ldr	x11, [x19, #3168]
    af4c:	ldr	x10, [x19, #3160]
    af50:	lsr	x18, x17, #1
    af54:	lsl	w0, w17, #2
    af58:	ldrb	w18, [x11, x18]
    af5c:	and	x0, x0, #0x4
    af60:	ldrh	w17, [x10, x17, lsl #1]
    af64:	add	w15, w9, #0x1
    af68:	lsr	x18, x18, x0
    af6c:	lsl	w18, w18, #16
    af70:	and	x18, x18, #0xf0000
    af74:	cmp	w9, w13
    af78:	orr	x0, x18, x17
    af7c:	str	w0, [x19, #60]
    af80:	str	w15, [x19, #1092]
    af84:	b.eq	b170 <BZ2_bzDecompress@@Base+0xa2c>  // b.none
    af88:	and	w16, w16, #0xff
    af8c:	cmp	w16, w14
    af90:	b.ne	b16c <BZ2_bzDecompress@@Base+0xa28>  // b.any
    af94:	cmp	w0, w12
    af98:	str	w26, [x19, #16]
    af9c:	b.cs	b4c4 <BZ2_bzDecompress@@Base+0xd80>  // b.hs, b.nlast
    afa0:	mov	w18, wzr
    afa4:	mov	w16, #0x100                 	// #256
    afa8:	add	w1, w18, w16
    afac:	asr	w1, w1, #1
    afb0:	add	x2, x19, w1, sxtw #2
    afb4:	ldr	w2, [x2, #1096]
    afb8:	cmp	w2, w0
    afbc:	csel	w16, w1, w16, gt
    afc0:	csel	w18, w18, w1, gt
    afc4:	sub	w1, w16, w18
    afc8:	cmp	w1, #0x1
    afcc:	b.ne	afa8 <BZ2_bzDecompress@@Base+0x864>  // b.any
    afd0:	ldrh	w16, [x10, x0, lsl #1]
    afd4:	lsr	x0, x0, #1
    afd8:	ldrb	w0, [x11, x0]
    afdc:	lsl	w1, w17, #2
    afe0:	cmp	w15, w13
    afe4:	and	x15, x1, #0x4
    afe8:	lsr	x15, x0, x15
    afec:	lsl	w15, w15, #16
    aff0:	and	x15, x15, #0xf0000
    aff4:	add	w17, w9, #0x2
    aff8:	orr	x0, x15, x16
    affc:	str	w0, [x19, #60]
    b000:	str	w17, [x19, #1092]
    b004:	b.eq	b184 <BZ2_bzDecompress@@Base+0xa40>  // b.none
    b008:	and	w15, w18, #0xff
    b00c:	cmp	w15, w14
    b010:	b.ne	b180 <BZ2_bzDecompress@@Base+0xa3c>  // b.any
    b014:	cmp	w0, w12
    b018:	str	w27, [x19, #16]
    b01c:	b.cs	b4c4 <BZ2_bzDecompress@@Base+0xd80>  // b.hs, b.nlast
    b020:	mov	w18, wzr
    b024:	mov	w15, #0x100                 	// #256
    b028:	add	w1, w18, w15
    b02c:	asr	w1, w1, #1
    b030:	add	x2, x19, w1, sxtw #2
    b034:	ldr	w2, [x2, #1096]
    b038:	cmp	w2, w0
    b03c:	csel	w15, w1, w15, gt
    b040:	csel	w18, w18, w1, gt
    b044:	sub	w1, w15, w18
    b048:	cmp	w1, #0x1
    b04c:	b.ne	b028 <BZ2_bzDecompress@@Base+0x8e4>  // b.any
    b050:	ldrh	w15, [x10, x0, lsl #1]
    b054:	lsr	x0, x0, #1
    b058:	ldrb	w0, [x11, x0]
    b05c:	lsl	w16, w16, #2
    b060:	cmp	w17, w13
    b064:	and	x13, x16, #0x4
    b068:	lsr	x13, x0, x13
    b06c:	lsl	w13, w13, #16
    b070:	and	x13, x13, #0xf0000
    b074:	add	w1, w9, #0x3
    b078:	orr	x16, x13, x15
    b07c:	str	w16, [x19, #60]
    b080:	str	w1, [x19, #1092]
    b084:	b.eq	b1f4 <BZ2_bzDecompress@@Base+0xab0>  // b.none
    b088:	and	w13, w18, #0xff
    b08c:	cmp	w13, w14
    b090:	b.ne	b1f0 <BZ2_bzDecompress@@Base+0xaac>  // b.any
    b094:	cmp	w16, w12
    b098:	b.cs	b4c4 <BZ2_bzDecompress@@Base+0xd80>  // b.hs, b.nlast
    b09c:	mov	w13, wzr
    b0a0:	mov	w14, #0x100                 	// #256
    b0a4:	add	w17, w13, w14
    b0a8:	asr	w17, w17, #1
    b0ac:	add	x18, x19, w17, sxtw #2
    b0b0:	ldr	w18, [x18, #1096]
    b0b4:	cmp	w18, w16
    b0b8:	csel	w14, w17, w14, gt
    b0bc:	csel	w13, w13, w17, gt
    b0c0:	sub	w17, w14, w13
    b0c4:	cmp	w17, #0x1
    b0c8:	b.ne	b0a4 <BZ2_bzDecompress@@Base+0x960>  // b.any
    b0cc:	ldrh	w14, [x10, x16, lsl #1]
    b0d0:	lsr	x16, x16, #1
    b0d4:	ldrb	w16, [x11, x16]
    b0d8:	lsl	w15, w15, #2
    b0dc:	and	x15, x15, #0x4
    b0e0:	and	w13, w13, #0xff
    b0e4:	lsr	x15, x16, x15
    b0e8:	lsl	w15, w15, #16
    b0ec:	and	x15, x15, #0xf0000
    b0f0:	orr	x15, x15, x14
    b0f4:	add	w17, w9, #0x4
    b0f8:	add	w13, w13, #0x4
    b0fc:	cmp	w15, w12
    b100:	str	w17, [x19, #1092]
    b104:	str	w15, [x19, #60]
    b108:	str	w13, [x19, #16]
    b10c:	b.cs	b4c4 <BZ2_bzDecompress@@Base+0xd80>  // b.hs, b.nlast
    b110:	mov	w12, wzr
    b114:	mov	w16, #0x100                 	// #256
    b118:	add	w17, w12, w16
    b11c:	asr	w17, w17, #1
    b120:	add	x18, x19, w17, sxtw #2
    b124:	ldr	w18, [x18, #1096]
    b128:	cmp	w18, w15
    b12c:	csel	w16, w17, w16, gt
    b130:	csel	w12, w12, w17, gt
    b134:	sub	w17, w16, w12
    b138:	cmp	w17, #0x1
    b13c:	b.ne	b118 <BZ2_bzDecompress@@Base+0x9d4>  // b.any
    b140:	str	w12, [x19, #64]
    b144:	lsr	x12, x15, #1
    b148:	ldrb	w11, [x11, x12]
    b14c:	ldrh	w10, [x10, x15, lsl #1]
    b150:	ubfiz	w12, w14, #2, #1
    b154:	add	w9, w9, #0x5
    b158:	lsr	w11, w11, w12
    b15c:	bfi	w10, w11, #16, #4
    b160:	str	w10, [x19, #60]
    b164:	str	w9, [x19, #1092]
    b168:	b	b174 <BZ2_bzDecompress@@Base+0xa30>
    b16c:	str	w16, [x19, #64]
    b170:	mov	w13, #0x1                   	// #1
    b174:	ldr	w9, [x8, #32]
    b178:	cbnz	w9, aee0 <BZ2_bzDecompress@@Base+0x79c>
    b17c:	b	b3f8 <BZ2_bzDecompress@@Base+0xcb4>
    b180:	str	w15, [x19, #64]
    b184:	mov	w13, #0x2                   	// #2
    b188:	b	b174 <BZ2_bzDecompress@@Base+0xa30>
    b18c:	ldrb	w9, [x19, #12]
    b190:	ldr	x8, [x8, #24]
    b194:	strb	w9, [x8]
    b198:	ldr	w9, [x19, #3184]
    b19c:	ldrb	w8, [x19, #12]
    b1a0:	ldr	w10, [x19, #16]
    b1a4:	eor	w8, w8, w9, lsr #24
    b1a8:	ldr	w11, [x23, w8, uxtw #2]
    b1ac:	ldr	x8, [x19]
    b1b0:	sub	w13, w10, #0x1
    b1b4:	str	w13, [x19, #16]
    b1b8:	eor	w9, w11, w9, lsl #8
    b1bc:	str	w9, [x19, #3184]
    b1c0:	ldr	x9, [x8, #24]
    b1c4:	ldp	w10, w11, [x8, #32]
    b1c8:	add	x9, x9, #0x1
    b1cc:	str	x9, [x8, #24]
    b1d0:	sub	w9, w10, #0x1
    b1d4:	adds	w10, w11, #0x1
    b1d8:	stp	w9, w10, [x8, #32]
    b1dc:	b.cc	b178 <BZ2_bzDecompress@@Base+0xa34>  // b.lo, b.ul, b.last
    b1e0:	ldr	w10, [x8, #40]
    b1e4:	add	w10, w10, #0x1
    b1e8:	str	w10, [x8, #40]
    b1ec:	b	b178 <BZ2_bzDecompress@@Base+0xa34>
    b1f0:	str	w13, [x19, #64]
    b1f4:	mov	w13, #0x3                   	// #3
    b1f8:	b	b174 <BZ2_bzDecompress@@Base+0xa30>
    b1fc:	ldr	x10, [x19]
    b200:	ldr	w15, [x28]
    b204:	ldr	w12, [x19, #40]
    b208:	ldr	w8, [x19, #3184]
    b20c:	ldr	w11, [x10, #32]
    b210:	ldrb	w17, [x19, #12]
    b214:	ldr	w1, [x19, #16]
    b218:	ldr	w0, [x19, #1092]
    b21c:	ldr	x9, [x19, #3152]
    b220:	ldp	w13, w18, [x19, #60]
    b224:	ldr	x10, [x10, #24]
    b228:	add	w14, w15, #0x1
    b22c:	mul	w16, w12, w22
    b230:	mov	w12, w11
    b234:	cmp	w1, #0x1
    b238:	b.lt	b2a0 <BZ2_bzDecompress@@Base+0xb5c>  // b.tstop
    b23c:	cbz	w12, b3b4 <BZ2_bzDecompress@@Base+0xc70>
    b240:	mov	w5, w1
    b244:	mov	x2, xzr
    b248:	and	w3, w17, #0xff
    b24c:	mov	w4, w12
    b250:	sub	x5, x5, #0x1
    b254:	cmp	w5, w2
    b258:	b.eq	b27c <BZ2_bzDecompress@@Base+0xb38>  // b.none
    b25c:	strb	w17, [x10, x2]
    b260:	eor	w6, w3, w8, lsr #24
    b264:	ldr	w6, [x23, w6, uxtw #2]
    b268:	add	x2, x2, #0x1
    b26c:	cmp	w4, w2
    b270:	eor	w8, w6, w8, lsl #8
    b274:	b.ne	b254 <BZ2_bzDecompress@@Base+0xb10>  // b.any
    b278:	b	b3a8 <BZ2_bzDecompress@@Base+0xc64>
    b27c:	sub	w12, w12, w2
    b280:	add	x10, x10, x2
    b284:	cbz	w12, b4a4 <BZ2_bzDecompress@@Base+0xd60>
    b288:	and	w1, w17, #0xff
    b28c:	strb	w17, [x10], #1
    b290:	eor	w1, w1, w8, lsr #24
    b294:	ldr	w1, [x23, w1, uxtw #2]
    b298:	sub	w12, w12, #0x1
    b29c:	eor	w8, w1, w8, lsl #8
    b2a0:	mov	w3, w0
    b2a4:	mov	w2, w18
    b2a8:	cmp	w0, w14
    b2ac:	b.gt	b4c4 <BZ2_bzDecompress@@Base+0xd80>
    b2b0:	b.eq	b4ac <BZ2_bzDecompress@@Base+0xd68>  // b.none
    b2b4:	cmp	w13, w16
    b2b8:	b.cs	b4c4 <BZ2_bzDecompress@@Base+0xd80>  // b.hs, b.nlast
    b2bc:	ldr	w17, [x9, w13, uxtw #2]
    b2c0:	add	w0, w3, #0x1
    b2c4:	and	w18, w17, #0xff
    b2c8:	lsr	x13, x17, #8
    b2cc:	cmp	w18, w2
    b2d0:	b.ne	b2e0 <BZ2_bzDecompress@@Base+0xb9c>  // b.any
    b2d4:	cmp	w3, w15
    b2d8:	b.ne	b2e8 <BZ2_bzDecompress@@Base+0xba4>  // b.any
    b2dc:	mov	w18, w2
    b2e0:	mov	w17, w2
    b2e4:	b	b284 <BZ2_bzDecompress@@Base+0xb40>
    b2e8:	cmp	w13, w16
    b2ec:	b.cs	b4c4 <BZ2_bzDecompress@@Base+0xd80>  // b.hs, b.nlast
    b2f0:	ldr	w5, [x9, x13, lsl #2]
    b2f4:	add	w4, w3, #0x2
    b2f8:	cmp	w4, w14
    b2fc:	mov	w1, #0x2                   	// #2
    b300:	lsr	x13, x5, #8
    b304:	mov	w0, w14
    b308:	mov	w18, w2
    b30c:	mov	w17, w2
    b310:	b.eq	b234 <BZ2_bzDecompress@@Base+0xaf0>  // b.none
    b314:	and	w18, w5, #0xff
    b318:	cmp	w18, w2
    b31c:	mov	w1, #0x2                   	// #2
    b320:	mov	w0, w4
    b324:	mov	w17, w2
    b328:	b.ne	b234 <BZ2_bzDecompress@@Base+0xaf0>  // b.any
    b32c:	cmp	w13, w16
    b330:	b.cs	b4c4 <BZ2_bzDecompress@@Base+0xd80>  // b.hs, b.nlast
    b334:	ldr	w5, [x9, x13, lsl #2]
    b338:	add	w4, w3, #0x3
    b33c:	cmp	w4, w14
    b340:	mov	w1, #0x3                   	// #3
    b344:	lsr	x13, x5, #8
    b348:	mov	w0, w14
    b34c:	mov	w18, w2
    b350:	mov	w17, w2
    b354:	b.eq	b234 <BZ2_bzDecompress@@Base+0xaf0>  // b.none
    b358:	and	w18, w5, #0xff
    b35c:	cmp	w18, w2
    b360:	mov	w1, #0x3                   	// #3
    b364:	mov	w0, w4
    b368:	mov	w17, w2
    b36c:	b.ne	b234 <BZ2_bzDecompress@@Base+0xaf0>  // b.any
    b370:	cmp	w13, w16
    b374:	b.cs	b4c4 <BZ2_bzDecompress@@Base+0xd80>  // b.hs, b.nlast
    b378:	ldr	w13, [x9, x13, lsl #2]
    b37c:	lsr	x17, x13, #8
    b380:	cmp	w17, w16
    b384:	b.cs	b4c4 <BZ2_bzDecompress@@Base+0xd80>  // b.hs, b.nlast
    b388:	ldr	w17, [x9, x17, lsl #2]
    b38c:	and	w13, w13, #0xff
    b390:	add	w1, w13, #0x4
    b394:	add	w0, w3, #0x5
    b398:	and	w18, w17, #0xff
    b39c:	lsr	w13, w17, #8
    b3a0:	mov	w17, w2
    b3a4:	b	b234 <BZ2_bzDecompress@@Base+0xaf0>
    b3a8:	mov	w12, wzr
    b3ac:	add	x10, x10, x2
    b3b0:	sub	w1, w1, w2
    b3b4:	ldr	x14, [x19]
    b3b8:	sub	w11, w11, w12
    b3bc:	ldr	w15, [x14, #36]
    b3c0:	adds	w11, w15, w11
    b3c4:	str	w11, [x14, #36]
    b3c8:	b.cc	b3d8 <BZ2_bzDecompress@@Base+0xc94>  // b.lo, b.ul, b.last
    b3cc:	ldr	w11, [x14, #40]
    b3d0:	add	w11, w11, #0x1
    b3d4:	str	w11, [x14, #40]
    b3d8:	str	w8, [x19, #3184]
    b3dc:	strb	w17, [x19, #12]
    b3e0:	str	w1, [x19, #16]
    b3e4:	str	w0, [x19, #1092]
    b3e8:	str	x9, [x19, #3152]
    b3ec:	stp	w13, w18, [x19, #60]
    b3f0:	str	x10, [x14, #24]
    b3f4:	str	w12, [x14, #32]
    b3f8:	ldr	w8, [x28]
    b3fc:	ldr	w9, [x19, #1092]
    b400:	add	w8, w8, #0x1
    b404:	cmp	w9, w8
    b408:	b.ne	b4f0 <BZ2_bzDecompress@@Base+0xdac>  // b.any
    b40c:	ldr	w8, [x19, #16]
    b410:	cbnz	w8, b4f0 <BZ2_bzDecompress@@Base+0xdac>
    b414:	ldr	w9, [x19, #3184]
    b418:	ldr	w8, [x19, #52]
    b41c:	mvn	w3, w9
    b420:	cmp	w8, #0x2
    b424:	str	w3, [x19, #3184]
    b428:	b.gt	b478 <BZ2_bzDecompress@@Base+0xd34>
    b42c:	cmp	w8, #0x2
    b430:	b.ge	b494 <BZ2_bzDecompress@@Base+0xd50>  // b.tcont
    b434:	ldr	w8, [x19, #3184]
    b438:	ldr	w9, [x19, #3176]
    b43c:	cmp	w8, w9
    b440:	b.ne	b4c4 <BZ2_bzDecompress@@Base+0xd80>  // b.any
    b444:	ldr	w9, [x19, #3188]
    b448:	str	w20, [x19, #8]
    b44c:	eor	w8, w8, w9, ror #31
    b450:	str	w8, [x19, #3188]
    b454:	mov	x0, x19
    b458:	bl	15d0 <BZ2_decompress@plt>
    b45c:	cmp	w0, #0x4
    b460:	b.eq	b4cc <BZ2_bzDecompress@@Base+0xd88>  // b.none
    b464:	ldr	w8, [x19, #8]
    b468:	cmp	w8, #0x2
    b46c:	mov	w8, #0x2                   	// #2
    b470:	b.eq	a7d4 <BZ2_bzDecompress@@Base+0x90>  // b.none
    b474:	b	a77c <BZ2_bzDecompress@@Base+0x38>
    b478:	ldr	x0, [x21]
    b47c:	ldr	w2, [x19, #3176]
    b480:	adrp	x1, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    b484:	add	x1, x1, #0xe8e
    b488:	bl	1700 <fprintf@plt>
    b48c:	ldr	w8, [x19, #52]
    b490:	b	b42c <BZ2_bzDecompress@@Base+0xce8>
    b494:	ldr	x1, [x21]
    b498:	mov	w0, #0x5d                  	// #93
    b49c:	bl	14f0 <fputc@plt>
    b4a0:	b	b434 <BZ2_bzDecompress@@Base+0xcf0>
    b4a4:	mov	w1, #0x1                   	// #1
    b4a8:	b	b3b4 <BZ2_bzDecompress@@Base+0xc70>
    b4ac:	mov	w1, wzr
    b4b0:	mov	w0, w14
    b4b4:	mov	w18, w2
    b4b8:	b	b3b4 <BZ2_bzDecompress@@Base+0xc70>
    b4bc:	mov	w0, #0xffffffff            	// #-1
    b4c0:	b	a77c <BZ2_bzDecompress@@Base+0x38>
    b4c4:	mov	w0, #0xfffffffc            	// #-4
    b4c8:	b	a77c <BZ2_bzDecompress@@Base+0x38>
    b4cc:	ldr	w8, [x19, #52]
    b4d0:	cmp	w8, #0x3
    b4d4:	b.ge	b4f8 <BZ2_bzDecompress@@Base+0xdb4>  // b.tcont
    b4d8:	ldr	w8, [x19, #3188]
    b4dc:	ldr	w9, [x19, #3180]
    b4e0:	cmp	w8, w9
    b4e4:	mov	w8, #0x4                   	// #4
    b4e8:	cneg	w0, w8, ne  // ne = any
    b4ec:	b	a77c <BZ2_bzDecompress@@Base+0x38>
    b4f0:	mov	w0, wzr
    b4f4:	b	a77c <BZ2_bzDecompress@@Base+0x38>
    b4f8:	ldr	x0, [x21]
    b4fc:	ldr	w2, [x19, #3180]
    b500:	ldr	w3, [x19, #3188]
    b504:	adrp	x1, c000 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    b508:	add	x1, x1, #0xea0
    b50c:	bl	1700 <fprintf@plt>
    b510:	b	b4d8 <BZ2_bzDecompress@@Base+0xd94>

000000000000b514 <BZ2_bzDecompressEnd@@Base>:
    b514:	stp	x29, x30, [sp, #-32]!
    b518:	stp	x20, x19, [sp, #16]
    b51c:	mov	x29, sp
    b520:	cbz	x0, b53c <BZ2_bzDecompressEnd@@Base+0x28>
    b524:	ldr	x20, [x0, #48]
    b528:	mov	x19, x0
    b52c:	cbz	x20, b53c <BZ2_bzDecompressEnd@@Base+0x28>
    b530:	ldr	x8, [x20]
    b534:	cmp	x8, x19
    b538:	b.eq	b54c <BZ2_bzDecompressEnd@@Base+0x38>  // b.none
    b53c:	mov	w0, #0xfffffffe            	// #-2
    b540:	ldp	x20, x19, [sp, #16]
    b544:	ldp	x29, x30, [sp], #32
    b548:	ret
    b54c:	ldr	x1, [x20, #3152]
    b550:	cbz	x1, b55c <BZ2_bzDecompressEnd@@Base+0x48>
    b554:	ldp	x8, x0, [x19, #64]
    b558:	blr	x8
    b55c:	ldr	x1, [x20, #3160]
    b560:	cbz	x1, b56c <BZ2_bzDecompressEnd@@Base+0x58>
    b564:	ldp	x8, x0, [x19, #64]
    b568:	blr	x8
    b56c:	ldr	x1, [x20, #3168]
    b570:	cbz	x1, b57c <BZ2_bzDecompressEnd@@Base+0x68>
    b574:	ldp	x8, x0, [x19, #64]
    b578:	blr	x8
    b57c:	ldp	x8, x0, [x19, #64]
    b580:	ldr	x1, [x19, #48]
    b584:	blr	x8
    b588:	mov	w0, wzr
    b58c:	str	xzr, [x19, #48]
    b590:	b	b540 <BZ2_bzDecompressEnd@@Base+0x2c>

000000000000b594 <BZ2_bzWriteOpen@@Base>:
    b594:	stp	x29, x30, [sp, #-80]!
    b598:	str	x25, [sp, #16]
    b59c:	stp	x24, x23, [sp, #32]
    b5a0:	stp	x22, x21, [sp, #48]
    b5a4:	stp	x20, x19, [sp, #64]
    b5a8:	mov	x29, sp
    b5ac:	mov	w23, w4
    b5b0:	mov	w21, w3
    b5b4:	mov	w22, w2
    b5b8:	mov	x24, x1
    b5bc:	mov	x19, x0
    b5c0:	cbz	x0, b5c8 <BZ2_bzWriteOpen@@Base+0x34>
    b5c4:	str	wzr, [x19]
    b5c8:	cmp	w21, #0x4
    b5cc:	b.hi	b600 <BZ2_bzWriteOpen@@Base+0x6c>  // b.pmore
    b5d0:	cmp	w23, #0xfa
    b5d4:	b.hi	b600 <BZ2_bzWriteOpen@@Base+0x6c>  // b.pmore
    b5d8:	cbz	x24, b600 <BZ2_bzWriteOpen@@Base+0x6c>
    b5dc:	sub	w8, w22, #0x1
    b5e0:	cmp	w8, #0x9
    b5e4:	b.cs	b600 <BZ2_bzWriteOpen@@Base+0x6c>  // b.hs, b.nlast
    b5e8:	mov	x0, x24
    b5ec:	bl	1710 <ferror@plt>
    b5f0:	cbz	w0, b614 <BZ2_bzWriteOpen@@Base+0x80>
    b5f4:	cbz	x19, b69c <BZ2_bzWriteOpen@@Base+0x108>
    b5f8:	mov	w8, #0xfffffffa            	// #-6
    b5fc:	b	b608 <BZ2_bzWriteOpen@@Base+0x74>
    b600:	cbz	x19, b69c <BZ2_bzWriteOpen@@Base+0x108>
    b604:	mov	w8, #0xfffffffe            	// #-2
    b608:	mov	x20, xzr
    b60c:	str	w8, [x19]
    b610:	b	b6a0 <BZ2_bzWriteOpen@@Base+0x10c>
    b614:	mov	w0, #0x13f0                	// #5104
    b618:	bl	1510 <malloc@plt>
    b61c:	cbz	x0, b690 <BZ2_bzWriteOpen@@Base+0xfc>
    b620:	mov	w8, #0x1394                	// #5012
    b624:	mov	x20, x0
    b628:	add	x25, x0, x8
    b62c:	cbz	x19, b634 <BZ2_bzWriteOpen@@Base+0xa0>
    b630:	str	wzr, [x19]
    b634:	mov	w8, #0x1398                	// #5016
    b638:	cmp	w23, #0x0
    b63c:	mov	w9, #0x1e                  	// #30
    b640:	str	wzr, [x20, #5096]
    b644:	strb	wzr, [x25, #88]
    b648:	str	x24, [x20]
    b64c:	mov	w24, #0x1                   	// #1
    b650:	movi	v0.2d, #0x0
    b654:	add	x0, x20, x8
    b658:	csel	w3, w9, w23, eq  // eq = none
    b65c:	mov	w1, w22
    b660:	mov	w2, w21
    b664:	str	wzr, [x20, #5008]
    b668:	strb	w24, [x25]
    b66c:	str	xzr, [x20, #5088]
    b670:	str	q0, [x20, #5072]
    b674:	bl	1590 <BZ2_bzCompressInit@plt>
    b678:	cbz	w0, b6bc <BZ2_bzWriteOpen@@Base+0x128>
    b67c:	cbz	x19, b684 <BZ2_bzWriteOpen@@Base+0xf0>
    b680:	str	w0, [x19]
    b684:	mov	x0, x20
    b688:	bl	1630 <free@plt>
    b68c:	b	b69c <BZ2_bzWriteOpen@@Base+0x108>
    b690:	cbz	x19, b69c <BZ2_bzWriteOpen@@Base+0x108>
    b694:	mov	w8, #0xfffffffd            	// #-3
    b698:	b	b608 <BZ2_bzWriteOpen@@Base+0x74>
    b69c:	mov	x20, xzr
    b6a0:	mov	x0, x20
    b6a4:	ldp	x20, x19, [sp, #64]
    b6a8:	ldp	x22, x21, [sp, #48]
    b6ac:	ldp	x24, x23, [sp, #32]
    b6b0:	ldr	x25, [sp, #16]
    b6b4:	ldp	x29, x30, [sp], #80
    b6b8:	ret
    b6bc:	str	wzr, [x20, #5024]
    b6c0:	strb	w24, [x25, #88]
    b6c4:	b	b6a0 <BZ2_bzWriteOpen@@Base+0x10c>

000000000000b6c8 <BZ2_bzWrite@@Base>:
    b6c8:	stp	x29, x30, [sp, #-64]!
    b6cc:	stp	x24, x23, [sp, #16]
    b6d0:	stp	x22, x21, [sp, #32]
    b6d4:	stp	x20, x19, [sp, #48]
    b6d8:	mov	x29, sp
    b6dc:	mov	w22, w3
    b6e0:	mov	x21, x2
    b6e4:	mov	x19, x1
    b6e8:	mov	x20, x0
    b6ec:	cbz	x0, b6f4 <BZ2_bzWrite@@Base+0x2c>
    b6f0:	str	wzr, [x20]
    b6f4:	cbz	x19, b730 <BZ2_bzWrite@@Base+0x68>
    b6f8:	str	wzr, [x19, #5096]
    b6fc:	cbz	x21, b730 <BZ2_bzWrite@@Base+0x68>
    b700:	tbnz	w22, #31, b730 <BZ2_bzWrite@@Base+0x68>
    b704:	mov	w8, #0x1394                	// #5012
    b708:	ldrb	w8, [x19, x8]
    b70c:	cbz	w8, b748 <BZ2_bzWrite@@Base+0x80>
    b710:	ldr	x0, [x19]
    b714:	bl	1710 <ferror@plt>
    b718:	cbz	w0, b770 <BZ2_bzWrite@@Base+0xa8>
    b71c:	cbz	x20, b728 <BZ2_bzWrite@@Base+0x60>
    b720:	mov	w8, #0xfffffffa            	// #-6
    b724:	str	w8, [x20]
    b728:	mov	w8, #0xfffffffa            	// #-6
    b72c:	b	b758 <BZ2_bzWrite@@Base+0x90>
    b730:	cbz	x20, b73c <BZ2_bzWrite@@Base+0x74>
    b734:	mov	w8, #0xfffffffe            	// #-2
    b738:	str	w8, [x20]
    b73c:	cbz	x19, b75c <BZ2_bzWrite@@Base+0x94>
    b740:	mov	w8, #0xfffffffe            	// #-2
    b744:	b	b758 <BZ2_bzWrite@@Base+0x90>
    b748:	cbz	x20, b754 <BZ2_bzWrite@@Base+0x8c>
    b74c:	mov	w8, #0xffffffff            	// #-1
    b750:	str	w8, [x20]
    b754:	mov	w8, #0xffffffff            	// #-1
    b758:	str	w8, [x19, #5096]
    b75c:	ldp	x20, x19, [sp, #48]
    b760:	ldp	x22, x21, [sp, #32]
    b764:	ldp	x24, x23, [sp, #16]
    b768:	ldp	x29, x30, [sp], #64
    b76c:	ret
    b770:	cbz	w22, b7ec <BZ2_bzWrite@@Base+0x124>
    b774:	mov	w8, #0x1398                	// #5016
    b778:	str	w22, [x19, #5024]
    b77c:	str	x21, [x19, #5016]
    b780:	add	x21, x19, #0x8
    b784:	add	x22, x19, x8
    b788:	mov	w24, #0x1388                	// #5000
    b78c:	mov	x0, x22
    b790:	mov	w1, wzr
    b794:	str	w24, [x19, #5048]
    b798:	str	x21, [x19, #5040]
    b79c:	bl	15e0 <BZ2_bzCompress@plt>
    b7a0:	cmp	w0, #0x1
    b7a4:	b.ne	b7fc <BZ2_bzWrite@@Base+0x134>  // b.any
    b7a8:	ldrsw	x8, [x19, #5048]
    b7ac:	ubfx	x9, x8, #3, #29
    b7b0:	cmp	w9, #0x270
    b7b4:	b.hi	b7e4 <BZ2_bzWrite@@Base+0x11c>  // b.pmore
    b7b8:	ldr	x3, [x19]
    b7bc:	sub	x23, x24, x8
    b7c0:	mov	w1, #0x1                   	// #1
    b7c4:	mov	x0, x21
    b7c8:	mov	x2, x23
    b7cc:	bl	16a0 <fwrite@plt>
    b7d0:	cmp	w23, w0
    b7d4:	b.ne	b71c <BZ2_bzWrite@@Base+0x54>  // b.any
    b7d8:	ldr	x0, [x19]
    b7dc:	bl	1710 <ferror@plt>
    b7e0:	cbnz	w0, b71c <BZ2_bzWrite@@Base+0x54>
    b7e4:	ldr	w8, [x19, #5024]
    b7e8:	cbnz	w8, b78c <BZ2_bzWrite@@Base+0xc4>
    b7ec:	cbz	x20, b7f4 <BZ2_bzWrite@@Base+0x12c>
    b7f0:	str	wzr, [x20]
    b7f4:	str	wzr, [x19, #5096]
    b7f8:	b	b75c <BZ2_bzWrite@@Base+0x94>
    b7fc:	cbz	x20, b804 <BZ2_bzWrite@@Base+0x13c>
    b800:	str	w0, [x20]
    b804:	str	w0, [x19, #5096]
    b808:	b	b75c <BZ2_bzWrite@@Base+0x94>

000000000000b80c <BZ2_bzWriteClose@@Base>:
    b80c:	mov	x5, x4
    b810:	mov	x4, xzr
    b814:	mov	x6, xzr
    b818:	b	1670 <BZ2_bzWriteClose64@plt>

000000000000b81c <BZ2_bzWriteClose64@@Base>:
    b81c:	stp	x29, x30, [sp, #-96]!
    b820:	stp	x28, x27, [sp, #16]
    b824:	stp	x26, x25, [sp, #32]
    b828:	stp	x24, x23, [sp, #48]
    b82c:	stp	x22, x21, [sp, #64]
    b830:	stp	x20, x19, [sp, #80]
    b834:	mov	x29, sp
    b838:	mov	x20, x0
    b83c:	cbz	x1, b888 <BZ2_bzWriteClose64@@Base+0x6c>
    b840:	mov	w8, #0x1394                	// #5012
    b844:	ldrb	w8, [x1, x8]
    b848:	mov	x19, x1
    b84c:	cbz	w8, b894 <BZ2_bzWriteClose64@@Base+0x78>
    b850:	ldr	x25, [x19]
    b854:	mov	x21, x6
    b858:	mov	x22, x5
    b85c:	mov	x23, x4
    b860:	mov	x0, x25
    b864:	mov	x24, x3
    b868:	mov	w26, w2
    b86c:	bl	1710 <ferror@plt>
    b870:	cbz	w0, b8c4 <BZ2_bzWriteClose64@@Base+0xa8>
    b874:	cbz	x20, b880 <BZ2_bzWriteClose64@@Base+0x64>
    b878:	mov	w8, #0xfffffffa            	// #-6
    b87c:	str	w8, [x20]
    b880:	mov	w8, #0xfffffffa            	// #-6
    b884:	b	b8a4 <BZ2_bzWriteClose64@@Base+0x88>
    b888:	cbz	x20, b8a8 <BZ2_bzWriteClose64@@Base+0x8c>
    b88c:	str	wzr, [x20]
    b890:	b	b8a8 <BZ2_bzWriteClose64@@Base+0x8c>
    b894:	cbz	x20, b8a0 <BZ2_bzWriteClose64@@Base+0x84>
    b898:	mov	w8, #0xffffffff            	// #-1
    b89c:	str	w8, [x20]
    b8a0:	mov	w8, #0xffffffff            	// #-1
    b8a4:	str	w8, [x19, #5096]
    b8a8:	ldp	x20, x19, [sp, #80]
    b8ac:	ldp	x22, x21, [sp, #64]
    b8b0:	ldp	x24, x23, [sp, #48]
    b8b4:	ldp	x26, x25, [sp, #32]
    b8b8:	ldp	x28, x27, [sp, #16]
    b8bc:	ldp	x29, x30, [sp], #96
    b8c0:	ret
    b8c4:	cbz	x24, b8cc <BZ2_bzWriteClose64@@Base+0xb0>
    b8c8:	str	wzr, [x24]
    b8cc:	cbz	x23, b8d4 <BZ2_bzWriteClose64@@Base+0xb8>
    b8d0:	str	wzr, [x23]
    b8d4:	cbz	x22, b8dc <BZ2_bzWriteClose64@@Base+0xc0>
    b8d8:	str	wzr, [x22]
    b8dc:	cbz	x21, b8e4 <BZ2_bzWriteClose64@@Base+0xc8>
    b8e0:	str	wzr, [x21]
    b8e4:	cbnz	w26, b8fc <BZ2_bzWriteClose64@@Base+0xe0>
    b8e8:	ldr	w8, [x19, #5096]
    b8ec:	cbz	w8, b964 <BZ2_bzWriteClose64@@Base+0x148>
    b8f0:	mov	x0, x25
    b8f4:	bl	1710 <ferror@plt>
    b8f8:	cbz	w0, b9ec <BZ2_bzWriteClose64@@Base+0x1d0>
    b8fc:	cbz	x24, b908 <BZ2_bzWriteClose64@@Base+0xec>
    b900:	ldr	w8, [x19, #5028]
    b904:	str	w8, [x24]
    b908:	cbz	x23, b914 <BZ2_bzWriteClose64@@Base+0xf8>
    b90c:	ldr	w8, [x19, #5032]
    b910:	str	w8, [x23]
    b914:	cbz	x22, b920 <BZ2_bzWriteClose64@@Base+0x104>
    b918:	ldr	w8, [x19, #5052]
    b91c:	str	w8, [x22]
    b920:	cbz	x21, b92c <BZ2_bzWriteClose64@@Base+0x110>
    b924:	ldr	w8, [x19, #5056]
    b928:	str	w8, [x21]
    b92c:	cbz	x20, b934 <BZ2_bzWriteClose64@@Base+0x118>
    b930:	str	wzr, [x20]
    b934:	mov	w8, #0x1398                	// #5016
    b938:	add	x0, x19, x8
    b93c:	str	wzr, [x19, #5096]
    b940:	bl	15a0 <BZ2_bzCompressEnd@plt>
    b944:	mov	x0, x19
    b948:	ldp	x20, x19, [sp, #80]
    b94c:	ldp	x22, x21, [sp, #64]
    b950:	ldp	x24, x23, [sp, #48]
    b954:	ldp	x26, x25, [sp, #32]
    b958:	ldp	x28, x27, [sp, #16]
    b95c:	ldp	x29, x30, [sp], #96
    b960:	b	1630 <free@plt>
    b964:	mov	w8, #0x1398                	// #5016
    b968:	add	x25, x19, #0x8
    b96c:	add	x26, x19, x8
    b970:	mov	w28, #0x1388                	// #5000
    b974:	mov	w1, #0x2                   	// #2
    b978:	mov	x0, x26
    b97c:	str	w28, [x19, #5048]
    b980:	str	x25, [x19, #5040]
    b984:	bl	15e0 <BZ2_bzCompress@plt>
    b988:	sub	w8, w0, #0x3
    b98c:	mov	w27, w0
    b990:	cmp	w8, #0x2
    b994:	b.cs	ba04 <BZ2_bzWriteClose64@@Base+0x1e8>  // b.hs, b.nlast
    b998:	ldrsw	x8, [x19, #5048]
    b99c:	ubfx	x9, x8, #3, #29
    b9a0:	cmp	w9, #0x270
    b9a4:	b.hi	b9dc <BZ2_bzWriteClose64@@Base+0x1c0>  // b.pmore
    b9a8:	ldr	x3, [x19]
    b9ac:	mov	w9, #0x1388                	// #5000
    b9b0:	sub	x28, x9, x8
    b9b4:	mov	w1, #0x1                   	// #1
    b9b8:	mov	x0, x25
    b9bc:	mov	x2, x28
    b9c0:	bl	16a0 <fwrite@plt>
    b9c4:	cmp	w28, w0
    b9c8:	mov	w28, #0x1388                	// #5000
    b9cc:	b.ne	b874 <BZ2_bzWriteClose64@@Base+0x58>  // b.any
    b9d0:	ldr	x0, [x19]
    b9d4:	bl	1710 <ferror@plt>
    b9d8:	cbnz	w0, b874 <BZ2_bzWriteClose64@@Base+0x58>
    b9dc:	cmp	w27, #0x4
    b9e0:	b.ne	b974 <BZ2_bzWriteClose64@@Base+0x158>  // b.any
    b9e4:	ldr	x25, [x19]
    b9e8:	b	b8f0 <BZ2_bzWriteClose64@@Base+0xd4>
    b9ec:	mov	x0, x25
    b9f0:	bl	16b0 <fflush@plt>
    b9f4:	ldr	x0, [x19]
    b9f8:	bl	1710 <ferror@plt>
    b9fc:	cbnz	w0, b874 <BZ2_bzWriteClose64@@Base+0x58>
    ba00:	b	b8fc <BZ2_bzWriteClose64@@Base+0xe0>
    ba04:	cbz	x20, ba0c <BZ2_bzWriteClose64@@Base+0x1f0>
    ba08:	str	w27, [x20]
    ba0c:	str	w27, [x19, #5096]
    ba10:	b	b8a8 <BZ2_bzWriteClose64@@Base+0x8c>

000000000000ba14 <BZ2_bzReadOpen@@Base>:
    ba14:	stp	x29, x30, [sp, #-80]!
    ba18:	stp	x26, x25, [sp, #16]
    ba1c:	stp	x24, x23, [sp, #32]
    ba20:	stp	x22, x21, [sp, #48]
    ba24:	stp	x20, x19, [sp, #64]
    ba28:	mov	x29, sp
    ba2c:	mov	w24, w5
    ba30:	mov	x23, x4
    ba34:	mov	w21, w3
    ba38:	mov	w22, w2
    ba3c:	mov	x25, x1
    ba40:	mov	x19, x0
    ba44:	cbz	x0, ba4c <BZ2_bzReadOpen@@Base+0x38>
    ba48:	str	wzr, [x19]
    ba4c:	cbz	x25, ba78 <BZ2_bzReadOpen@@Base+0x64>
    ba50:	cmp	w22, #0x4
    ba54:	b.hi	ba78 <BZ2_bzReadOpen@@Base+0x64>  // b.pmore
    ba58:	cmp	w21, #0x1
    ba5c:	b.hi	ba78 <BZ2_bzReadOpen@@Base+0x64>  // b.pmore
    ba60:	cbnz	x23, ba68 <BZ2_bzReadOpen@@Base+0x54>
    ba64:	cbnz	w24, ba78 <BZ2_bzReadOpen@@Base+0x64>
    ba68:	cbz	x23, ba8c <BZ2_bzReadOpen@@Base+0x78>
    ba6c:	mov	w8, #0x1389                	// #5001
    ba70:	cmp	w24, w8
    ba74:	b.cc	ba8c <BZ2_bzReadOpen@@Base+0x78>  // b.lo, b.ul, b.last
    ba78:	cbz	x19, bb50 <BZ2_bzReadOpen@@Base+0x13c>
    ba7c:	mov	w8, #0xfffffffe            	// #-2
    ba80:	mov	x20, xzr
    ba84:	str	w8, [x19]
    ba88:	b	bb54 <BZ2_bzReadOpen@@Base+0x140>
    ba8c:	mov	x0, x25
    ba90:	bl	1710 <ferror@plt>
    ba94:	cbz	w0, baa4 <BZ2_bzReadOpen@@Base+0x90>
    ba98:	cbz	x19, bb50 <BZ2_bzReadOpen@@Base+0x13c>
    ba9c:	mov	w8, #0xfffffffa            	// #-6
    baa0:	b	ba80 <BZ2_bzReadOpen@@Base+0x6c>
    baa4:	mov	w0, #0x13f0                	// #5104
    baa8:	bl	1510 <malloc@plt>
    baac:	cbz	x0, bb44 <BZ2_bzReadOpen@@Base+0x130>
    bab0:	mov	w8, #0x1394                	// #5012
    bab4:	mov	x20, x0
    bab8:	add	x26, x0, x8
    babc:	cbz	x19, bac4 <BZ2_bzReadOpen@@Base+0xb0>
    bac0:	str	wzr, [x19]
    bac4:	mov	w8, #0x1398                	// #5016
    bac8:	movi	v0.2d, #0x0
    bacc:	cmp	w24, #0x1
    bad0:	add	x0, x20, x8
    bad4:	str	wzr, [x20, #5096]
    bad8:	strb	wzr, [x26, #88]
    badc:	str	x25, [x20]
    bae0:	str	wzr, [x20, #5008]
    bae4:	strb	wzr, [x26]
    bae8:	str	xzr, [x20, #5088]
    baec:	str	q0, [x20, #5072]
    baf0:	b.lt	bb20 <BZ2_bzReadOpen@@Base+0x10c>  // b.tstop
    baf4:	mov	w10, wzr
    baf8:	add	x8, x20, #0x8
    bafc:	add	w9, w24, #0x1
    bb00:	ldrb	w11, [x23], #1
    bb04:	sub	w9, w9, #0x1
    bb08:	cmp	w9, #0x1
    bb0c:	strb	w11, [x8, w10, sxtw]
    bb10:	ldr	w10, [x20, #5008]
    bb14:	add	w10, w10, #0x1
    bb18:	str	w10, [x20, #5008]
    bb1c:	b.gt	bb00 <BZ2_bzReadOpen@@Base+0xec>
    bb20:	mov	w1, w22
    bb24:	mov	w2, w21
    bb28:	bl	1520 <BZ2_bzDecompressInit@plt>
    bb2c:	cbz	w0, bb70 <BZ2_bzReadOpen@@Base+0x15c>
    bb30:	cbz	x19, bb38 <BZ2_bzReadOpen@@Base+0x124>
    bb34:	str	w0, [x19]
    bb38:	mov	x0, x20
    bb3c:	bl	1630 <free@plt>
    bb40:	b	bb50 <BZ2_bzReadOpen@@Base+0x13c>
    bb44:	cbz	x19, bb50 <BZ2_bzReadOpen@@Base+0x13c>
    bb48:	mov	w8, #0xfffffffd            	// #-3
    bb4c:	b	ba80 <BZ2_bzReadOpen@@Base+0x6c>
    bb50:	mov	x20, xzr
    bb54:	mov	x0, x20
    bb58:	ldp	x20, x19, [sp, #64]
    bb5c:	ldp	x22, x21, [sp, #48]
    bb60:	ldp	x24, x23, [sp, #32]
    bb64:	ldp	x26, x25, [sp, #16]
    bb68:	ldp	x29, x30, [sp], #80
    bb6c:	ret
    bb70:	ldr	w8, [x20, #5008]
    bb74:	add	x9, x20, #0x8
    bb78:	mov	w10, #0x1                   	// #1
    bb7c:	str	x9, [x20, #5016]
    bb80:	str	w8, [x20, #5024]
    bb84:	strb	w10, [x26, #88]
    bb88:	b	bb54 <BZ2_bzReadOpen@@Base+0x140>

000000000000bb8c <BZ2_bzReadClose@@Base>:
    bb8c:	stp	x29, x30, [sp, #-32]!
    bb90:	str	x19, [sp, #16]
    bb94:	mov	x29, sp
    bb98:	mov	x19, x1
    bb9c:	cbz	x0, bba4 <BZ2_bzReadClose@@Base+0x18>
    bba0:	str	wzr, [x0]
    bba4:	cbz	x19, bbd4 <BZ2_bzReadClose@@Base+0x48>
    bba8:	mov	w8, #0x1394                	// #5012
    bbac:	add	x8, x19, x8
    bbb0:	str	wzr, [x19, #5096]
    bbb4:	ldrb	w9, [x8]
    bbb8:	cbz	w9, bbe8 <BZ2_bzReadClose@@Base+0x5c>
    bbbc:	cbz	x0, bbc8 <BZ2_bzReadClose@@Base+0x3c>
    bbc0:	mov	w8, #0xffffffff            	// #-1
    bbc4:	str	w8, [x0]
    bbc8:	mov	w8, #0xffffffff            	// #-1
    bbcc:	str	w8, [x19, #5096]
    bbd0:	b	bbdc <BZ2_bzReadClose@@Base+0x50>
    bbd4:	cbz	x0, bbdc <BZ2_bzReadClose@@Base+0x50>
    bbd8:	str	wzr, [x0]
    bbdc:	ldr	x19, [sp, #16]
    bbe0:	ldp	x29, x30, [sp], #32
    bbe4:	ret
    bbe8:	ldrb	w8, [x8, #88]
    bbec:	cbz	w8, bbfc <BZ2_bzReadClose@@Base+0x70>
    bbf0:	mov	w8, #0x1398                	// #5016
    bbf4:	add	x0, x19, x8
    bbf8:	bl	1530 <BZ2_bzDecompressEnd@plt>
    bbfc:	mov	x0, x19
    bc00:	ldr	x19, [sp, #16]
    bc04:	ldp	x29, x30, [sp], #32
    bc08:	b	1630 <free@plt>

000000000000bc0c <BZ2_bzRead@@Base>:
    bc0c:	stp	x29, x30, [sp, #-64]!
    bc10:	stp	x24, x23, [sp, #16]
    bc14:	stp	x22, x21, [sp, #32]
    bc18:	stp	x20, x19, [sp, #48]
    bc1c:	mov	x29, sp
    bc20:	mov	w20, w3
    bc24:	mov	x19, x1
    bc28:	mov	x21, x0
    bc2c:	cbz	x0, bc34 <BZ2_bzRead@@Base+0x28>
    bc30:	str	wzr, [x21]
    bc34:	cbz	x19, bc68 <BZ2_bzRead@@Base+0x5c>
    bc38:	str	wzr, [x19, #5096]
    bc3c:	cbz	x2, bc68 <BZ2_bzRead@@Base+0x5c>
    bc40:	tbnz	w20, #31, bc68 <BZ2_bzRead@@Base+0x5c>
    bc44:	mov	w8, #0x1394                	// #5012
    bc48:	ldrb	w8, [x19, x8]
    bc4c:	cbz	w8, bc9c <BZ2_bzRead@@Base+0x90>
    bc50:	cbz	x21, bc5c <BZ2_bzRead@@Base+0x50>
    bc54:	mov	w8, #0xffffffff            	// #-1
    bc58:	str	w8, [x21]
    bc5c:	mov	w8, #0xffffffff            	// #-1
    bc60:	mov	w20, wzr
    bc64:	b	bc80 <BZ2_bzRead@@Base+0x74>
    bc68:	cbz	x21, bc74 <BZ2_bzRead@@Base+0x68>
    bc6c:	mov	w8, #0xfffffffe            	// #-2
    bc70:	str	w8, [x21]
    bc74:	mov	w20, wzr
    bc78:	cbz	x19, bc84 <BZ2_bzRead@@Base+0x78>
    bc7c:	mov	w8, #0xfffffffe            	// #-2
    bc80:	str	w8, [x19, #5096]
    bc84:	mov	w0, w20
    bc88:	ldp	x20, x19, [sp, #48]
    bc8c:	ldp	x22, x21, [sp, #32]
    bc90:	ldp	x24, x23, [sp, #16]
    bc94:	ldp	x29, x30, [sp], #64
    bc98:	ret
    bc9c:	cbz	w20, bd5c <BZ2_bzRead@@Base+0x150>
    bca0:	mov	w8, #0x1398                	// #5016
    bca4:	add	x22, x19, x8
    bca8:	add	x23, x19, #0x8
    bcac:	str	w20, [x19, #5048]
    bcb0:	str	x2, [x19, #5040]
    bcb4:	ldr	x24, [x19]
    bcb8:	mov	x0, x24
    bcbc:	bl	1710 <ferror@plt>
    bcc0:	cbnz	w0, bd70 <BZ2_bzRead@@Base+0x164>
    bcc4:	ldr	w8, [x19, #5024]
    bcc8:	cbnz	w8, bd10 <BZ2_bzRead@@Base+0x104>
    bccc:	mov	x0, x24
    bcd0:	bl	bdd4 <BZ2_bzRead@@Base+0x1c8>
    bcd4:	tst	w0, #0xff
    bcd8:	b.ne	bd10 <BZ2_bzRead@@Base+0x104>  // b.any
    bcdc:	ldr	x3, [x19]
    bce0:	mov	w1, #0x1                   	// #1
    bce4:	mov	w2, #0x1388                	// #5000
    bce8:	mov	x0, x23
    bcec:	bl	1620 <fread@plt>
    bcf0:	ldr	x8, [x19]
    bcf4:	mov	x24, x0
    bcf8:	mov	x0, x8
    bcfc:	bl	1710 <ferror@plt>
    bd00:	cbnz	w0, bd70 <BZ2_bzRead@@Base+0x164>
    bd04:	str	w24, [x19, #5008]
    bd08:	str	w24, [x19, #5024]
    bd0c:	str	x23, [x19, #5016]
    bd10:	mov	x0, x22
    bd14:	bl	1650 <BZ2_bzDecompress@plt>
    bd18:	tst	w0, #0xfffffffb
    bd1c:	b.ne	bd84 <BZ2_bzRead@@Base+0x178>  // b.any
    bd20:	cbz	w0, bd30 <BZ2_bzRead@@Base+0x124>
    bd24:	cmp	w0, #0x4
    bd28:	b.ne	bd48 <BZ2_bzRead@@Base+0x13c>  // b.any
    bd2c:	b	bd98 <BZ2_bzRead@@Base+0x18c>
    bd30:	ldr	x0, [x19]
    bd34:	bl	bdd4 <BZ2_bzRead@@Base+0x1c8>
    bd38:	tst	w0, #0xff
    bd3c:	b.eq	bd48 <BZ2_bzRead@@Base+0x13c>  // b.none
    bd40:	ldr	w8, [x19, #5024]
    bd44:	cbz	w8, bdb8 <BZ2_bzRead@@Base+0x1ac>
    bd48:	ldr	w8, [x19, #5048]
    bd4c:	cbnz	w8, bcb4 <BZ2_bzRead@@Base+0xa8>
    bd50:	cbz	x21, bd68 <BZ2_bzRead@@Base+0x15c>
    bd54:	str	wzr, [x21]
    bd58:	b	bd68 <BZ2_bzRead@@Base+0x15c>
    bd5c:	cbz	x21, bd64 <BZ2_bzRead@@Base+0x158>
    bd60:	str	wzr, [x21]
    bd64:	mov	w20, wzr
    bd68:	str	wzr, [x19, #5096]
    bd6c:	b	bc84 <BZ2_bzRead@@Base+0x78>
    bd70:	cbz	x21, bd7c <BZ2_bzRead@@Base+0x170>
    bd74:	mov	w8, #0xfffffffa            	// #-6
    bd78:	str	w8, [x21]
    bd7c:	mov	w8, #0xfffffffa            	// #-6
    bd80:	b	bc60 <BZ2_bzRead@@Base+0x54>
    bd84:	cbz	x21, bd8c <BZ2_bzRead@@Base+0x180>
    bd88:	str	w0, [x21]
    bd8c:	mov	w20, wzr
    bd90:	str	w0, [x19, #5096]
    bd94:	b	bc84 <BZ2_bzRead@@Base+0x78>
    bd98:	cbz	x21, bda4 <BZ2_bzRead@@Base+0x198>
    bd9c:	mov	w8, #0x4                   	// #4
    bda0:	str	w8, [x21]
    bda4:	ldr	w8, [x19, #5048]
    bda8:	mov	w9, #0x4                   	// #4
    bdac:	str	w9, [x19, #5096]
    bdb0:	sub	w20, w20, w8
    bdb4:	b	bc84 <BZ2_bzRead@@Base+0x78>
    bdb8:	ldr	w8, [x19, #5048]
    bdbc:	cbz	w8, bd50 <BZ2_bzRead@@Base+0x144>
    bdc0:	cbz	x21, bdcc <BZ2_bzRead@@Base+0x1c0>
    bdc4:	mov	w8, #0xfffffff9            	// #-7
    bdc8:	str	w8, [x21]
    bdcc:	mov	w8, #0xfffffff9            	// #-7
    bdd0:	b	bc60 <BZ2_bzRead@@Base+0x54>
    bdd4:	stp	x29, x30, [sp, #-32]!
    bdd8:	str	x19, [sp, #16]
    bddc:	mov	x29, sp
    bde0:	mov	x19, x0
    bde4:	bl	1550 <fgetc@plt>
    bde8:	cmn	w0, #0x1
    bdec:	b.eq	be00 <BZ2_bzRead@@Base+0x1f4>  // b.none
    bdf0:	mov	x1, x19
    bdf4:	bl	1640 <ungetc@plt>
    bdf8:	mov	w0, wzr
    bdfc:	b	be04 <BZ2_bzRead@@Base+0x1f8>
    be00:	mov	w0, #0x1                   	// #1
    be04:	ldr	x19, [sp, #16]
    be08:	ldp	x29, x30, [sp], #32
    be0c:	ret

000000000000be10 <BZ2_bzReadGetUnused@@Base>:
    be10:	cbz	x1, be48 <BZ2_bzReadGetUnused@@Base+0x38>
    be14:	ldr	w8, [x1, #5096]
    be18:	cmp	w8, #0x4
    be1c:	b.ne	be58 <BZ2_bzReadGetUnused@@Base+0x48>  // b.any
    be20:	cbz	x2, be6c <BZ2_bzReadGetUnused@@Base+0x5c>
    be24:	cbz	x3, be6c <BZ2_bzReadGetUnused@@Base+0x5c>
    be28:	cbz	x0, be30 <BZ2_bzReadGetUnused@@Base+0x20>
    be2c:	str	wzr, [x0]
    be30:	ldr	w8, [x1, #5024]
    be34:	str	wzr, [x1, #5096]
    be38:	str	w8, [x3]
    be3c:	ldr	x8, [x1, #5016]
    be40:	str	x8, [x2]
    be44:	ret
    be48:	cbz	x0, be44 <BZ2_bzReadGetUnused@@Base+0x34>
    be4c:	mov	w8, #0xfffffffe            	// #-2
    be50:	str	w8, [x0]
    be54:	ret
    be58:	cbz	x0, be64 <BZ2_bzReadGetUnused@@Base+0x54>
    be5c:	mov	w8, #0xffffffff            	// #-1
    be60:	str	w8, [x0]
    be64:	mov	w8, #0xffffffff            	// #-1
    be68:	b	be7c <BZ2_bzReadGetUnused@@Base+0x6c>
    be6c:	cbz	x0, be78 <BZ2_bzReadGetUnused@@Base+0x68>
    be70:	mov	w8, #0xfffffffe            	// #-2
    be74:	str	w8, [x0]
    be78:	mov	w8, #0xfffffffe            	// #-2
    be7c:	str	w8, [x1, #5096]
    be80:	ret

000000000000be84 <BZ2_bzBuffToBuffCompress@@Base>:
    be84:	sub	sp, sp, #0x90
    be88:	stp	x29, x30, [sp, #80]
    be8c:	str	x23, [sp, #96]
    be90:	stp	x22, x21, [sp, #112]
    be94:	stp	x20, x19, [sp, #128]
    be98:	add	x29, sp, #0x50
    be9c:	cmp	w6, #0xfa
    bea0:	mov	w20, #0xfffffffe            	// #-2
    bea4:	b.hi	bf04 <BZ2_bzBuffToBuffCompress@@Base+0x80>  // b.pmore
    bea8:	cmp	w5, #0x4
    beac:	b.hi	bf04 <BZ2_bzBuffToBuffCompress@@Base+0x80>  // b.pmore
    beb0:	mov	x23, x0
    beb4:	cbz	x0, bf04 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    beb8:	mov	x19, x1
    bebc:	cbz	x1, bf04 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    bec0:	mov	x22, x2
    bec4:	cbz	x2, bf04 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    bec8:	sub	w8, w4, #0x1
    becc:	cmp	w8, #0x8
    bed0:	b.hi	bf04 <BZ2_bzBuffToBuffCompress@@Base+0x80>  // b.pmore
    bed4:	cmp	w6, #0x0
    bed8:	mov	w8, #0x1e                  	// #30
    bedc:	mov	w21, w3
    bee0:	csel	w3, w8, w6, eq  // eq = none
    bee4:	mov	x0, sp
    bee8:	mov	w1, w4
    beec:	mov	w2, w5
    bef0:	stp	xzr, xzr, [sp, #56]
    bef4:	str	xzr, [sp, #72]
    bef8:	bl	1590 <BZ2_bzCompressInit@plt>
    befc:	mov	w20, w0
    bf00:	cbz	w0, bf20 <BZ2_bzBuffToBuffCompress@@Base+0x9c>
    bf04:	mov	w0, w20
    bf08:	ldp	x20, x19, [sp, #128]
    bf0c:	ldp	x22, x21, [sp, #112]
    bf10:	ldr	x23, [sp, #96]
    bf14:	ldp	x29, x30, [sp, #80]
    bf18:	add	sp, sp, #0x90
    bf1c:	ret
    bf20:	str	x22, [sp]
    bf24:	str	x23, [sp, #24]
    bf28:	str	w21, [sp, #8]
    bf2c:	ldr	w8, [x19]
    bf30:	mov	x0, sp
    bf34:	mov	w1, #0x2                   	// #2
    bf38:	str	w8, [sp, #32]
    bf3c:	bl	15e0 <BZ2_bzCompress@plt>
    bf40:	cmp	w0, #0x3
    bf44:	b.eq	bf74 <BZ2_bzBuffToBuffCompress@@Base+0xf0>  // b.none
    bf48:	mov	w20, w0
    bf4c:	cmp	w0, #0x4
    bf50:	b.ne	bf84 <BZ2_bzBuffToBuffCompress@@Base+0x100>  // b.any
    bf54:	ldr	w8, [sp, #32]
    bf58:	ldr	w9, [x19]
    bf5c:	mov	x0, sp
    bf60:	sub	w8, w9, w8
    bf64:	str	w8, [x19]
    bf68:	bl	15a0 <BZ2_bzCompressEnd@plt>
    bf6c:	mov	w20, wzr
    bf70:	b	bf04 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    bf74:	mov	x0, sp
    bf78:	bl	15a0 <BZ2_bzCompressEnd@plt>
    bf7c:	mov	w20, #0xfffffff8            	// #-8
    bf80:	b	bf04 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    bf84:	mov	x0, sp
    bf88:	bl	15a0 <BZ2_bzCompressEnd@plt>
    bf8c:	b	bf04 <BZ2_bzBuffToBuffCompress@@Base+0x80>

000000000000bf90 <BZ2_bzBuffToBuffDecompress@@Base>:
    bf90:	sub	sp, sp, #0x90
    bf94:	stp	x29, x30, [sp, #80]
    bf98:	str	x23, [sp, #96]
    bf9c:	stp	x22, x21, [sp, #112]
    bfa0:	stp	x20, x19, [sp, #128]
    bfa4:	add	x29, sp, #0x50
    bfa8:	mov	w20, #0xfffffffe            	// #-2
    bfac:	cbz	x0, bffc <BZ2_bzBuffToBuffDecompress@@Base+0x6c>
    bfb0:	mov	x19, x1
    bfb4:	cbz	x1, bffc <BZ2_bzBuffToBuffDecompress@@Base+0x6c>
    bfb8:	mov	x22, x2
    bfbc:	cbz	x2, bffc <BZ2_bzBuffToBuffDecompress@@Base+0x6c>
    bfc0:	cmp	w4, #0x1
    bfc4:	mov	w20, #0xfffffffe            	// #-2
    bfc8:	b.hi	bffc <BZ2_bzBuffToBuffDecompress@@Base+0x6c>  // b.pmore
    bfcc:	cmp	w5, #0x4
    bfd0:	b.hi	bffc <BZ2_bzBuffToBuffDecompress@@Base+0x6c>  // b.pmore
    bfd4:	mov	x23, x0
    bfd8:	mov	x0, sp
    bfdc:	mov	w1, w5
    bfe0:	mov	w2, w4
    bfe4:	mov	w21, w3
    bfe8:	stp	xzr, xzr, [sp, #56]
    bfec:	str	xzr, [sp, #72]
    bff0:	bl	1520 <BZ2_bzDecompressInit@plt>
    bff4:	mov	w20, w0
    bff8:	cbz	w0, c018 <BZ2_bzBuffToBuffDecompress@@Base+0x88>
    bffc:	mov	w0, w20
    c000:	ldp	x20, x19, [sp, #128]
    c004:	ldp	x22, x21, [sp, #112]
    c008:	ldr	x23, [sp, #96]
    c00c:	ldp	x29, x30, [sp, #80]
    c010:	add	sp, sp, #0x90
    c014:	ret
    c018:	str	x22, [sp]
    c01c:	str	x23, [sp, #24]
    c020:	str	w21, [sp, #8]
    c024:	ldr	w8, [x19]
    c028:	mov	x0, sp
    c02c:	str	w8, [sp, #32]
    c030:	bl	1650 <BZ2_bzDecompress@plt>
    c034:	cbz	w0, c064 <BZ2_bzBuffToBuffDecompress@@Base+0xd4>
    c038:	mov	w20, w0
    c03c:	cmp	w0, #0x4
    c040:	b.ne	c080 <BZ2_bzBuffToBuffDecompress@@Base+0xf0>  // b.any
    c044:	ldr	w8, [sp, #32]
    c048:	ldr	w9, [x19]
    c04c:	mov	x0, sp
    c050:	sub	w8, w9, w8
    c054:	str	w8, [x19]
    c058:	bl	1530 <BZ2_bzDecompressEnd@plt>
    c05c:	mov	w20, wzr
    c060:	b	bffc <BZ2_bzBuffToBuffDecompress@@Base+0x6c>
    c064:	ldr	w19, [sp, #32]
    c068:	mov	x0, sp
    c06c:	bl	1530 <BZ2_bzDecompressEnd@plt>
    c070:	cmp	w19, #0x0
    c074:	mov	w8, #0xfffffff8            	// #-8
    c078:	cinc	w20, w8, ne  // ne = any
    c07c:	b	bffc <BZ2_bzBuffToBuffDecompress@@Base+0x6c>
    c080:	mov	x0, sp
    c084:	bl	1530 <BZ2_bzDecompressEnd@plt>
    c088:	b	bffc <BZ2_bzBuffToBuffDecompress@@Base+0x6c>

000000000000c08c <BZ2_bzopen@@Base>:
    c08c:	mov	x2, x1
    c090:	mov	w1, #0xffffffff            	// #-1
    c094:	mov	w3, wzr
    c098:	b	c09c <BZ2_bzopen@@Base+0x10>
    c09c:	stp	x29, x30, [sp, #-96]!
    c0a0:	str	x28, [sp, #16]
    c0a4:	stp	x26, x25, [sp, #32]
    c0a8:	stp	x24, x23, [sp, #48]
    c0ac:	stp	x22, x21, [sp, #64]
    c0b0:	stp	x20, x19, [sp, #80]
    c0b4:	mov	x29, sp
    c0b8:	sub	sp, sp, #0x1, lsl #12
    c0bc:	sub	sp, sp, #0x3a0
    c0c0:	strh	wzr, [sp, #16]
    c0c4:	str	xzr, [sp, #8]
    c0c8:	cbz	x2, c250 <BZ2_bzopen@@Base+0x1c4>
    c0cc:	mov	w22, w3
    c0d0:	mov	x23, x2
    c0d4:	mov	w21, w1
    c0d8:	mov	x20, x0
    c0dc:	mov	w25, wzr
    c0e0:	mov	w19, wzr
    c0e4:	mov	w24, #0x9                   	// #9
    c0e8:	ldrb	w26, [x23]
    c0ec:	cmp	w26, #0x72
    c0f0:	b.le	c10c <BZ2_bzopen@@Base+0x80>
    c0f4:	cmp	w26, #0x73
    c0f8:	b.eq	c118 <BZ2_bzopen@@Base+0x8c>  // b.none
    c0fc:	cmp	w26, #0x77
    c100:	b.ne	c124 <BZ2_bzopen@@Base+0x98>  // b.any
    c104:	mov	w25, #0x1                   	// #1
    c108:	b	c13c <BZ2_bzopen@@Base+0xb0>
    c10c:	b.ne	c120 <BZ2_bzopen@@Base+0x94>  // b.any
    c110:	mov	w25, wzr
    c114:	b	c13c <BZ2_bzopen@@Base+0xb0>
    c118:	mov	w19, #0x1                   	// #1
    c11c:	b	c13c <BZ2_bzopen@@Base+0xb0>
    c120:	cbz	w26, c144 <BZ2_bzopen@@Base+0xb8>
    c124:	bl	1600 <__ctype_b_loc@plt>
    c128:	ldr	x8, [x0]
    c12c:	sub	w9, w26, #0x30
    c130:	ldrh	w8, [x8, w26, uxtw #1]
    c134:	tst	w8, #0x800
    c138:	csel	w24, w24, w9, eq  // eq = none
    c13c:	add	x23, x23, #0x1
    c140:	b	c0e8 <BZ2_bzopen@@Base+0x5c>
    c144:	add	x0, sp, #0x8
    c148:	add	x23, sp, #0x8
    c14c:	bl	14b0 <strlen@plt>
    c150:	cmp	w25, #0x0
    c154:	mov	w8, #0x72                  	// #114
    c158:	mov	w9, #0x77                  	// #119
    c15c:	csel	w8, w9, w8, ne  // ne = any
    c160:	strh	w8, [x23, x0]
    c164:	add	x0, sp, #0x8
    c168:	bl	14b0 <strlen@plt>
    c16c:	mov	w8, #0x62                  	// #98
    c170:	strh	w8, [x23, x0]
    c174:	cbz	w22, c190 <BZ2_bzopen@@Base+0x104>
    c178:	add	x1, sp, #0x8
    c17c:	mov	w0, w21
    c180:	bl	1570 <fdopen@plt>
    c184:	mov	x20, x0
    c188:	cbnz	x20, c1cc <BZ2_bzopen@@Base+0x140>
    c18c:	b	c250 <BZ2_bzopen@@Base+0x1c4>
    c190:	cbz	x20, c1ac <BZ2_bzopen@@Base+0x120>
    c194:	ldrb	w8, [x20]
    c198:	cbz	w8, c1ac <BZ2_bzopen@@Base+0x120>
    c19c:	add	x1, sp, #0x8
    c1a0:	mov	x0, x20
    c1a4:	bl	16c0 <fopen64@plt>
    c1a8:	b	c184 <BZ2_bzopen@@Base+0xf8>
    c1ac:	adrp	x8, 1d000 <BZ2_bzerror@@Base+0x10c24>
    c1b0:	adrp	x9, 1d000 <BZ2_bzerror@@Base+0x10c24>
    c1b4:	ldr	x8, [x8, #4032]
    c1b8:	ldr	x9, [x9, #4040]
    c1bc:	cmp	w25, #0x0
    c1c0:	csel	x8, x8, x9, ne  // ne = any
    c1c4:	ldr	x20, [x8]
    c1c8:	cbz	x20, c250 <BZ2_bzopen@@Base+0x1c4>
    c1cc:	cbz	w25, c200 <BZ2_bzopen@@Base+0x174>
    c1d0:	cmp	w24, #0x1
    c1d4:	csinc	w8, w24, wzr, gt
    c1d8:	cmp	w8, #0x9
    c1dc:	mov	w9, #0x9                   	// #9
    c1e0:	csel	w2, w8, w9, lt  // lt = tstop
    c1e4:	add	x0, x29, #0x1c
    c1e8:	mov	w4, #0x1e                  	// #30
    c1ec:	mov	x1, x20
    c1f0:	mov	w3, wzr
    c1f4:	bl	1580 <BZ2_bzWriteOpen@plt>
    c1f8:	cbnz	x0, c254 <BZ2_bzopen@@Base+0x1c8>
    c1fc:	b	c220 <BZ2_bzopen@@Base+0x194>
    c200:	add	x0, x29, #0x1c
    c204:	add	x4, sp, #0x18
    c208:	mov	x1, x20
    c20c:	mov	w2, wzr
    c210:	mov	w3, w19
    c214:	mov	w5, wzr
    c218:	bl	16d0 <BZ2_bzReadOpen@plt>
    c21c:	cbnz	x0, c254 <BZ2_bzopen@@Base+0x1c8>
    c220:	adrp	x8, 1d000 <BZ2_bzerror@@Base+0x10c24>
    c224:	ldr	x8, [x8, #4040]
    c228:	ldr	x8, [x8]
    c22c:	cmp	x20, x8
    c230:	b.eq	c254 <BZ2_bzopen@@Base+0x1c8>  // b.none
    c234:	adrp	x8, 1d000 <BZ2_bzerror@@Base+0x10c24>
    c238:	ldr	x8, [x8, #4032]
    c23c:	ldr	x8, [x8]
    c240:	cmp	x20, x8
    c244:	b.eq	c254 <BZ2_bzopen@@Base+0x1c8>  // b.none
    c248:	mov	x0, x20
    c24c:	bl	1500 <fclose@plt>
    c250:	mov	x0, xzr
    c254:	add	sp, sp, #0x1, lsl #12
    c258:	add	sp, sp, #0x3a0
    c25c:	ldp	x20, x19, [sp, #80]
    c260:	ldp	x22, x21, [sp, #64]
    c264:	ldp	x24, x23, [sp, #48]
    c268:	ldp	x26, x25, [sp, #32]
    c26c:	ldr	x28, [sp, #16]
    c270:	ldp	x29, x30, [sp], #96
    c274:	ret

000000000000c278 <BZ2_bzdopen@@Base>:
    c278:	mov	x2, x1
    c27c:	mov	w3, #0x1                   	// #1
    c280:	mov	w1, w0
    c284:	mov	x0, xzr
    c288:	b	c09c <BZ2_bzopen@@Base+0x10>

000000000000c28c <BZ2_bzread@@Base>:
    c28c:	sub	sp, sp, #0x20
    c290:	stp	x29, x30, [sp, #16]
    c294:	add	x29, sp, #0x10
    c298:	ldr	w9, [x0, #5096]
    c29c:	cmp	w9, #0x4
    c2a0:	b.ne	c2ac <BZ2_bzread@@Base+0x20>  // b.any
    c2a4:	mov	w0, wzr
    c2a8:	b	c2d0 <BZ2_bzread@@Base+0x44>
    c2ac:	mov	x8, x0
    c2b0:	mov	w3, w2
    c2b4:	mov	x2, x1
    c2b8:	sub	x0, x29, #0x4
    c2bc:	mov	x1, x8
    c2c0:	bl	16e0 <BZ2_bzRead@plt>
    c2c4:	ldur	w8, [x29, #-4]
    c2c8:	tst	w8, #0xfffffffb
    c2cc:	csinv	w0, w0, wzr, eq  // eq = none
    c2d0:	ldp	x29, x30, [sp, #16]
    c2d4:	add	sp, sp, #0x20
    c2d8:	ret

000000000000c2dc <BZ2_bzwrite@@Base>:
    c2dc:	stp	x29, x30, [sp, #-32]!
    c2e0:	str	x19, [sp, #16]
    c2e4:	mov	x29, sp
    c2e8:	mov	w19, w2
    c2ec:	mov	x2, x1
    c2f0:	mov	x1, x0
    c2f4:	add	x0, x29, #0x1c
    c2f8:	mov	w3, w19
    c2fc:	bl	15f0 <BZ2_bzWrite@plt>
    c300:	ldr	w8, [x29, #28]
    c304:	cmp	w8, #0x0
    c308:	csinv	w0, w19, wzr, eq  // eq = none
    c30c:	ldr	x19, [sp, #16]
    c310:	ldp	x29, x30, [sp], #32
    c314:	ret

000000000000c318 <BZ2_bzflush@@Base>:
    c318:	mov	w0, wzr
    c31c:	ret

000000000000c320 <BZ2_bzclose@@Base>:
    c320:	sub	sp, sp, #0x30
    c324:	stp	x29, x30, [sp, #16]
    c328:	stp	x20, x19, [sp, #32]
    c32c:	add	x29, sp, #0x10
    c330:	cbz	x0, c3cc <BZ2_bzclose@@Base+0xac>
    c334:	mov	w8, #0x1394                	// #5012
    c338:	ldrb	w8, [x0, x8]
    c33c:	ldr	x19, [x0]
    c340:	mov	x20, x0
    c344:	sub	x0, x29, #0x4
    c348:	cbz	w8, c394 <BZ2_bzclose@@Base+0x74>
    c34c:	mov	x1, x20
    c350:	mov	w2, wzr
    c354:	mov	x3, xzr
    c358:	mov	x4, xzr
    c35c:	mov	x5, xzr
    c360:	mov	x6, xzr
    c364:	bl	1670 <BZ2_bzWriteClose64@plt>
    c368:	ldur	w8, [x29, #-4]
    c36c:	cbz	w8, c39c <BZ2_bzclose@@Base+0x7c>
    c370:	mov	w2, #0x1                   	// #1
    c374:	mov	x0, xzr
    c378:	mov	x1, x20
    c37c:	mov	x3, xzr
    c380:	mov	x4, xzr
    c384:	mov	x5, xzr
    c388:	mov	x6, xzr
    c38c:	bl	1670 <BZ2_bzWriteClose64@plt>
    c390:	b	c39c <BZ2_bzclose@@Base+0x7c>
    c394:	mov	x1, x20
    c398:	bl	1540 <BZ2_bzReadClose@plt>
    c39c:	adrp	x8, 1d000 <BZ2_bzerror@@Base+0x10c24>
    c3a0:	ldr	x8, [x8, #4040]
    c3a4:	ldr	x8, [x8]
    c3a8:	cmp	x19, x8
    c3ac:	b.eq	c3cc <BZ2_bzclose@@Base+0xac>  // b.none
    c3b0:	adrp	x8, 1d000 <BZ2_bzerror@@Base+0x10c24>
    c3b4:	ldr	x8, [x8, #4032]
    c3b8:	ldr	x8, [x8]
    c3bc:	cmp	x19, x8
    c3c0:	b.eq	c3cc <BZ2_bzclose@@Base+0xac>  // b.none
    c3c4:	mov	x0, x19
    c3c8:	bl	1500 <fclose@plt>
    c3cc:	ldp	x20, x19, [sp, #32]
    c3d0:	ldp	x29, x30, [sp, #16]
    c3d4:	add	sp, sp, #0x30
    c3d8:	ret

000000000000c3dc <BZ2_bzerror@@Base>:
    c3dc:	ldr	w8, [x0, #5096]
    c3e0:	adrp	x9, 1d000 <BZ2_bzerror@@Base+0x10c24>
    c3e4:	add	x9, x9, #0xd38
    c3e8:	and	w8, w8, w8, asr #31
    c3ec:	sub	x9, x9, w8, sxtw #3
    c3f0:	ldr	x0, [x9]
    c3f4:	str	w8, [x1]
    c3f8:	ret
    c3fc:	ldp	w8, w9, [x0, #92]
    c400:	sxtw	x9, w9
    c404:	cmp	w9, #0x1
    c408:	b.lt	c43c <BZ2_bzerror@@Base+0x60>  // b.tstop
    c40c:	adrp	x13, 1d000 <BZ2_bzerror@@Base+0x10c24>
    c410:	ldr	w11, [x0, #648]
    c414:	ldr	x13, [x13, #4024]
    c418:	mov	w10, wzr
    c41c:	and	w12, w8, #0xff
    c420:	eor	w14, w12, w11, lsr #24
    c424:	ldr	w14, [x13, w14, uxtw #2]
    c428:	add	w10, w10, #0x1
    c42c:	cmp	w10, w9
    c430:	eor	w11, w14, w11, lsl #8
    c434:	str	w11, [x0, #648]
    c438:	b.lt	c420 <BZ2_bzerror@@Base+0x44>  // b.tstop
    c43c:	add	x10, x0, x8
    c440:	mov	w11, #0x1                   	// #1
    c444:	cmp	w9, #0x3
    c448:	strb	w11, [x10, #128]
    c44c:	b.eq	c46c <BZ2_bzerror@@Base+0x90>  // b.none
    c450:	cmp	w9, #0x2
    c454:	b.eq	c4a8 <BZ2_bzerror@@Base+0xcc>  // b.none
    c458:	cmp	w9, #0x1
    c45c:	b.ne	c4d0 <BZ2_bzerror@@Base+0xf4>  // b.any
    c460:	ldr	w10, [x0, #108]!
    c464:	sub	x9, x0, #0x2c
    c468:	b	c53c <BZ2_bzerror@@Base+0x160>
    c46c:	ldr	x9, [x0, #64]!
    c470:	mov	x11, x0
    c474:	ldrsw	x10, [x11, #44]!
    c478:	strb	w8, [x9, x10]
    c47c:	ldrsw	x9, [x11]
    c480:	add	x9, x9, #0x1
    c484:	str	w9, [x11]
    c488:	ldr	x10, [x0]
    c48c:	strb	w8, [x10, x9]
    c490:	ldr	w9, [x11]
    c494:	add	w10, w9, #0x1
    c498:	str	w10, [x11]
    c49c:	mov	x9, x0
    c4a0:	mov	x0, x11
    c4a4:	b	c53c <BZ2_bzerror@@Base+0x160>
    c4a8:	ldr	x9, [x0, #64]!
    c4ac:	mov	x11, x0
    c4b0:	ldrsw	x10, [x11, #44]!
    c4b4:	strb	w8, [x9, x10]
    c4b8:	ldr	w10, [x11]
    c4bc:	mov	x9, x0
    c4c0:	mov	x0, x11
    c4c4:	add	w10, w10, #0x1
    c4c8:	str	w10, [x11]
    c4cc:	b	c53c <BZ2_bzerror@@Base+0x160>
    c4d0:	add	x9, x9, x0
    c4d4:	mov	w10, #0x1                   	// #1
    c4d8:	strb	w10, [x9, #124]
    c4dc:	ldrsw	x10, [x0, #108]!
    c4e0:	mov	x9, x0
    c4e4:	ldr	x11, [x9, #-44]!
    c4e8:	strb	w8, [x11, x10]
    c4ec:	ldrsw	x10, [x0]
    c4f0:	add	x10, x10, #0x1
    c4f4:	str	w10, [x0]
    c4f8:	ldr	x11, [x9]
    c4fc:	strb	w8, [x11, x10]
    c500:	ldrsw	x10, [x0]
    c504:	add	x10, x10, #0x1
    c508:	str	w10, [x0]
    c50c:	ldr	x11, [x9]
    c510:	strb	w8, [x11, x10]
    c514:	ldrsw	x10, [x0]
    c518:	add	x10, x10, #0x1
    c51c:	str	w10, [x0]
    c520:	ldr	x11, [x9]
    c524:	strb	w8, [x11, x10]
    c528:	ldr	w8, [x0]
    c52c:	ldurb	w11, [x0, #-12]
    c530:	add	w10, w8, #0x1
    c534:	sub	w8, w11, #0x4
    c538:	str	w10, [x0]
    c53c:	ldr	x9, [x9]
    c540:	strb	w8, [x9, w10, sxtw]
    c544:	ldr	w8, [x0]
    c548:	add	w8, w8, #0x1
    c54c:	str	w8, [x0]
    c550:	ret

Disassembly of section .fini:

000000000000c554 <.fini>:
    c554:	stp	x29, x30, [sp, #-16]!
    c558:	mov	x29, sp
    c55c:	ldp	x29, x30, [sp], #16
    c560:	ret
