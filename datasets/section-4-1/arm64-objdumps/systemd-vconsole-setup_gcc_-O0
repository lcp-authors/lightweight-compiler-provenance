
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-vconsole-setup_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000400dc0 <_init>:
  400dc0:	stp	x29, x30, [sp, #-16]!
  400dc4:	mov	x29, sp
  400dc8:	bl	401050 <call_weak_fn>
  400dcc:	ldp	x29, x30, [sp], #16
  400dd0:	ret

Disassembly of section .plt:

0000000000400de0 <.plt>:
  400de0:	stp	x16, x30, [sp, #-16]!
  400de4:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400de8:	ldr	x17, [x16, #3816]
  400dec:	add	x16, x16, #0xee8
  400df0:	br	x17
  400df4:	nop
  400df8:	nop
  400dfc:	nop

0000000000400e00 <__libc_start_main@plt>:
  400e00:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400e04:	ldr	x17, [x16, #3824]
  400e08:	add	x16, x16, #0xef0
  400e0c:	br	x17

0000000000400e10 <__gmon_start__@plt>:
  400e10:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400e14:	ldr	x17, [x16, #3832]
  400e18:	add	x16, x16, #0xef8
  400e1c:	br	x17

0000000000400e20 <write_string_file_ts@plt>:
  400e20:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400e24:	ldr	x17, [x16, #3840]
  400e28:	add	x16, x16, #0xf00
  400e2c:	br	x17

0000000000400e30 <loop_write@plt>:
  400e30:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400e34:	ldr	x17, [x16, #3848]
  400e38:	add	x16, x16, #0xf08
  400e3c:	br	x17

0000000000400e40 <snprintf@plt>:
  400e40:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400e44:	ldr	x17, [x16, #3856]
  400e48:	add	x16, x16, #0xf10
  400e4c:	br	x17

0000000000400e50 <log_setup_service@plt>:
  400e50:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400e54:	ldr	x17, [x16, #3864]
  400e58:	add	x16, x16, #0xf18
  400e5c:	br	x17

0000000000400e60 <safe_close@plt>:
  400e60:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400e64:	ldr	x17, [x16, #3872]
  400e68:	add	x16, x16, #0xf20
  400e6c:	br	x17

0000000000400e70 <log_assert_failed_realm@plt>:
  400e70:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400e74:	ldr	x17, [x16, #3880]
  400e78:	add	x16, x16, #0xf28
  400e7c:	br	x17

0000000000400e80 <_exit@plt>:
  400e80:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400e84:	ldr	x17, [x16, #3888]
  400e88:	add	x16, x16, #0xf30
  400e8c:	br	x17

0000000000400e90 <umask@plt>:
  400e90:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400e94:	ldr	x17, [x16, #3896]
  400e98:	add	x16, x16, #0xf38
  400e9c:	br	x17

0000000000400ea0 <access@plt>:
  400ea0:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400ea4:	ldr	x17, [x16, #3904]
  400ea8:	add	x16, x16, #0xf40
  400eac:	br	x17

0000000000400eb0 <abort@plt>:
  400eb0:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400eb4:	ldr	x17, [x16, #3912]
  400eb8:	add	x16, x16, #0xf48
  400ebc:	br	x17

0000000000400ec0 <proc_cmdline_get_key_many_internal@plt>:
  400ec0:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400ec4:	ldr	x17, [x16, #3920]
  400ec8:	add	x16, x16, #0xf50
  400ecc:	br	x17

0000000000400ed0 <__errno_location@plt>:
  400ed0:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400ed4:	ldr	x17, [x16, #3928]
  400ed8:	add	x16, x16, #0xf58
  400edc:	br	x17

0000000000400ee0 <wait_for_terminate_and_check@plt>:
  400ee0:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400ee4:	ldr	x17, [x16, #3936]
  400ee8:	add	x16, x16, #0xf60
  400eec:	br	x17

0000000000400ef0 <parse_env_file_sentinel@plt>:
  400ef0:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400ef4:	ldr	x17, [x16, #3944]
  400ef8:	add	x16, x16, #0xf68
  400efc:	br	x17

0000000000400f00 <__stack_chk_fail@plt>:
  400f00:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400f04:	ldr	x17, [x16, #3952]
  400f08:	add	x16, x16, #0xf70
  400f0c:	br	x17

0000000000400f10 <malloc@plt>:
  400f10:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400f14:	ldr	x17, [x16, #3960]
  400f18:	add	x16, x16, #0xf78
  400f1c:	br	x17

0000000000400f20 <open_terminal@plt>:
  400f20:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400f24:	ldr	x17, [x16, #3968]
  400f28:	add	x16, x16, #0xf80
  400f2c:	br	x17

0000000000400f30 <log_internal_realm@plt>:
  400f30:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400f34:	ldr	x17, [x16, #3976]
  400f38:	add	x16, x16, #0xf88
  400f3c:	br	x17

0000000000400f40 <strv_join_prefix@plt>:
  400f40:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400f44:	ldr	x17, [x16, #3984]
  400f48:	add	x16, x16, #0xf90
  400f4c:	br	x17

0000000000400f50 <ioctl@plt>:
  400f50:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400f54:	ldr	x17, [x16, #3992]
  400f58:	add	x16, x16, #0xf98
  400f5c:	br	x17

0000000000400f60 <tcgetattr@plt>:
  400f60:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400f64:	ldr	x17, [x16, #4000]
  400f68:	add	x16, x16, #0xfa0
  400f6c:	br	x17

0000000000400f70 <strdup@plt>:
  400f70:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400f74:	ldr	x17, [x16, #4008]
  400f78:	add	x16, x16, #0xfa8
  400f7c:	br	x17

0000000000400f80 <execv@plt>:
  400f80:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400f84:	ldr	x17, [x16, #4016]
  400f88:	add	x16, x16, #0xfb0
  400f8c:	br	x17

0000000000400f90 <safe_fork_full@plt>:
  400f90:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400f94:	ldr	x17, [x16, #4024]
  400f98:	add	x16, x16, #0xfb8
  400f9c:	br	x17

0000000000400fa0 <is_locale_utf8@plt>:
  400fa0:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400fa4:	ldr	x17, [x16, #4032]
  400fa8:	add	x16, x16, #0xfc0
  400fac:	br	x17

0000000000400fb0 <free@plt>:
  400fb0:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400fb4:	ldr	x17, [x16, #4040]
  400fb8:	add	x16, x16, #0xfc8
  400fbc:	br	x17

0000000000400fc0 <tcsetattr@plt>:
  400fc0:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400fc4:	ldr	x17, [x16, #4048]
  400fc8:	add	x16, x16, #0xfd0
  400fcc:	br	x17

0000000000400fd0 <sprintf@plt>:
  400fd0:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400fd4:	ldr	x17, [x16, #4056]
  400fd8:	add	x16, x16, #0xfd8
  400fdc:	br	x17

0000000000400fe0 <log_oom_internal@plt>:
  400fe0:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400fe4:	ldr	x17, [x16, #4064]
  400fe8:	add	x16, x16, #0xfe0
  400fec:	br	x17

0000000000400ff0 <log_get_max_level_realm@plt>:
  400ff0:	adrp	x16, 414000 <__FRAME_END__+0xfaf8>
  400ff4:	ldr	x17, [x16, #4072]
  400ff8:	add	x16, x16, #0xfe8
  400ffc:	br	x17

Disassembly of section .text:

0000000000401000 <_start>:
  401000:	mov	x29, #0x0                   	// #0
  401004:	mov	x30, #0x0                   	// #0
  401008:	mov	x5, x0
  40100c:	ldr	x1, [sp]
  401010:	add	x2, sp, #0x8
  401014:	mov	x6, sp
  401018:	movz	x0, #0x0, lsl #48
  40101c:	movk	x0, #0x0, lsl #32
  401020:	movk	x0, #0x40, lsl #16
  401024:	movk	x0, #0x31e8
  401028:	movz	x3, #0x0, lsl #48
  40102c:	movk	x3, #0x0, lsl #32
  401030:	movk	x3, #0x40, lsl #16
  401034:	movk	x3, #0x3700
  401038:	movz	x4, #0x0, lsl #48
  40103c:	movk	x4, #0x0, lsl #32
  401040:	movk	x4, #0x40, lsl #16
  401044:	movk	x4, #0x3780
  401048:	bl	400e00 <__libc_start_main@plt>
  40104c:	bl	400eb0 <abort@plt>

0000000000401050 <call_weak_fn>:
  401050:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  401054:	ldr	x0, [x0, #4088]
  401058:	cbz	x0, 401060 <call_weak_fn+0x10>
  40105c:	b	400e10 <__gmon_start__@plt>
  401060:	ret

0000000000401064 <deregister_tm_clones>:
  401064:	stp	x29, x30, [sp, #-32]!
  401068:	mov	x29, sp
  40106c:	adrp	x0, 415000 <__TMC_END__>
  401070:	add	x0, x0, #0x0
  401074:	str	x0, [sp, #24]
  401078:	ldr	x0, [sp, #24]
  40107c:	str	x0, [sp, #24]
  401080:	ldr	x1, [sp, #24]
  401084:	adrp	x0, 415000 <__TMC_END__>
  401088:	add	x0, x0, #0x0
  40108c:	cmp	x1, x0
  401090:	b.eq	4010cc <deregister_tm_clones+0x68>  // b.none
  401094:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401098:	add	x0, x0, #0x798
  40109c:	ldr	x0, [x0]
  4010a0:	str	x0, [sp, #16]
  4010a4:	ldr	x0, [sp, #16]
  4010a8:	str	x0, [sp, #16]
  4010ac:	ldr	x0, [sp, #16]
  4010b0:	cmp	x0, #0x0
  4010b4:	b.eq	4010d0 <deregister_tm_clones+0x6c>  // b.none
  4010b8:	ldr	x1, [sp, #16]
  4010bc:	adrp	x0, 415000 <__TMC_END__>
  4010c0:	add	x0, x0, #0x0
  4010c4:	blr	x1
  4010c8:	b	4010d0 <deregister_tm_clones+0x6c>
  4010cc:	nop
  4010d0:	ldp	x29, x30, [sp], #32
  4010d4:	ret

00000000004010d8 <register_tm_clones>:
  4010d8:	stp	x29, x30, [sp, #-48]!
  4010dc:	mov	x29, sp
  4010e0:	adrp	x0, 415000 <__TMC_END__>
  4010e4:	add	x0, x0, #0x0
  4010e8:	str	x0, [sp, #40]
  4010ec:	ldr	x0, [sp, #40]
  4010f0:	str	x0, [sp, #40]
  4010f4:	ldr	x1, [sp, #40]
  4010f8:	adrp	x0, 415000 <__TMC_END__>
  4010fc:	add	x0, x0, #0x0
  401100:	sub	x0, x1, x0
  401104:	asr	x0, x0, #3
  401108:	lsr	x1, x0, #63
  40110c:	add	x0, x1, x0
  401110:	asr	x0, x0, #1
  401114:	str	x0, [sp, #32]
  401118:	ldr	x0, [sp, #32]
  40111c:	cmp	x0, #0x0
  401120:	b.eq	401160 <register_tm_clones+0x88>  // b.none
  401124:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401128:	add	x0, x0, #0x7a0
  40112c:	ldr	x0, [x0]
  401130:	str	x0, [sp, #24]
  401134:	ldr	x0, [sp, #24]
  401138:	str	x0, [sp, #24]
  40113c:	ldr	x0, [sp, #24]
  401140:	cmp	x0, #0x0
  401144:	b.eq	401164 <register_tm_clones+0x8c>  // b.none
  401148:	ldr	x2, [sp, #24]
  40114c:	ldr	x1, [sp, #32]
  401150:	adrp	x0, 415000 <__TMC_END__>
  401154:	add	x0, x0, #0x0
  401158:	blr	x2
  40115c:	b	401164 <register_tm_clones+0x8c>
  401160:	nop
  401164:	ldp	x29, x30, [sp], #48
  401168:	ret

000000000040116c <__do_global_dtors_aux>:
  40116c:	stp	x29, x30, [sp, #-16]!
  401170:	mov	x29, sp
  401174:	adrp	x0, 415000 <__TMC_END__>
  401178:	add	x0, x0, #0x0
  40117c:	ldrb	w0, [x0]
  401180:	and	x0, x0, #0xff
  401184:	cmp	x0, #0x0
  401188:	b.ne	4011a4 <__do_global_dtors_aux+0x38>  // b.any
  40118c:	bl	401064 <deregister_tm_clones>
  401190:	adrp	x0, 415000 <__TMC_END__>
  401194:	add	x0, x0, #0x0
  401198:	mov	w1, #0x1                   	// #1
  40119c:	strb	w1, [x0]
  4011a0:	b	4011a8 <__do_global_dtors_aux+0x3c>
  4011a4:	nop
  4011a8:	ldp	x29, x30, [sp], #16
  4011ac:	ret

00000000004011b0 <frame_dummy>:
  4011b0:	stp	x29, x30, [sp, #-16]!
  4011b4:	mov	x29, sp
  4011b8:	bl	4010d8 <register_tm_clones>
  4011bc:	nop
  4011c0:	ldp	x29, x30, [sp], #16
  4011c4:	ret

00000000004011c8 <freep>:
  4011c8:	stp	x29, x30, [sp, #-32]!
  4011cc:	mov	x29, sp
  4011d0:	str	x0, [sp, #24]
  4011d4:	ldr	x0, [sp, #24]
  4011d8:	ldr	x0, [x0]
  4011dc:	bl	400fb0 <free@plt>
  4011e0:	nop
  4011e4:	ldp	x29, x30, [sp], #32
  4011e8:	ret

00000000004011ec <size_multiply_overflow>:
  4011ec:	sub	sp, sp, #0x10
  4011f0:	str	x0, [sp, #8]
  4011f4:	str	x1, [sp]
  4011f8:	ldr	x0, [sp]
  4011fc:	cmp	x0, #0x0
  401200:	cset	w0, ne  // ne = any
  401204:	and	w0, w0, #0xff
  401208:	and	x0, x0, #0xff
  40120c:	cmp	x0, #0x0
  401210:	b.eq	401254 <size_multiply_overflow+0x68>  // b.none
  401214:	mov	x2, #0x0                   	// #0
  401218:	ldr	x1, [sp, #8]
  40121c:	ldr	x0, [sp]
  401220:	umulh	x0, x1, x0
  401224:	cmp	x0, #0x0
  401228:	b.eq	401230 <size_multiply_overflow+0x44>  // b.none
  40122c:	mov	x2, #0x1                   	// #1
  401230:	mov	x0, x2
  401234:	cmp	x0, #0x0
  401238:	cset	w0, ne  // ne = any
  40123c:	and	w0, w0, #0xff
  401240:	and	x0, x0, #0xff
  401244:	cmp	x0, #0x0
  401248:	b.eq	401254 <size_multiply_overflow+0x68>  // b.none
  40124c:	mov	w0, #0x1                   	// #1
  401250:	b	401258 <size_multiply_overflow+0x6c>
  401254:	mov	w0, #0x0                   	// #0
  401258:	and	w0, w0, #0x1
  40125c:	and	w0, w0, #0xff
  401260:	add	sp, sp, #0x10
  401264:	ret

0000000000401268 <malloc_multiply>:
  401268:	stp	x29, x30, [sp, #-32]!
  40126c:	mov	x29, sp
  401270:	str	x0, [sp, #24]
  401274:	str	x1, [sp, #16]
  401278:	ldr	x1, [sp, #16]
  40127c:	ldr	x0, [sp, #24]
  401280:	bl	4011ec <size_multiply_overflow>
  401284:	and	w0, w0, #0xff
  401288:	cmp	w0, #0x0
  40128c:	b.eq	401298 <malloc_multiply+0x30>  // b.none
  401290:	mov	x0, #0x0                   	// #0
  401294:	b	4012b4 <malloc_multiply+0x4c>
  401298:	ldr	x1, [sp, #24]
  40129c:	ldr	x0, [sp, #16]
  4012a0:	mul	x0, x1, x0
  4012a4:	cmp	x0, #0x0
  4012a8:	b.ne	4012b0 <malloc_multiply+0x48>  // b.any
  4012ac:	mov	x0, #0x1                   	// #1
  4012b0:	bl	400f10 <malloc@plt>
  4012b4:	ldp	x29, x30, [sp], #32
  4012b8:	ret

00000000004012bc <closep>:
  4012bc:	stp	x29, x30, [sp, #-32]!
  4012c0:	mov	x29, sp
  4012c4:	str	x0, [sp, #24]
  4012c8:	ldr	x0, [sp, #24]
  4012cc:	ldr	w0, [x0]
  4012d0:	bl	400e60 <safe_close@plt>
  4012d4:	nop
  4012d8:	ldp	x29, x30, [sp], #32
  4012dc:	ret

00000000004012e0 <write_string_file>:
  4012e0:	stp	x29, x30, [sp, #-48]!
  4012e4:	mov	x29, sp
  4012e8:	str	x0, [sp, #40]
  4012ec:	str	x1, [sp, #32]
  4012f0:	str	w2, [sp, #28]
  4012f4:	mov	x3, #0x0                   	// #0
  4012f8:	ldr	w2, [sp, #28]
  4012fc:	ldr	x1, [sp, #32]
  401300:	ldr	x0, [sp, #40]
  401304:	bl	400e20 <write_string_file_ts@plt>
  401308:	ldp	x29, x30, [sp], #48
  40130c:	ret

0000000000401310 <safe_fork>:
  401310:	stp	x29, x30, [sp, #-48]!
  401314:	mov	x29, sp
  401318:	str	x0, [sp, #40]
  40131c:	str	w1, [sp, #36]
  401320:	str	x2, [sp, #24]
  401324:	ldr	x4, [sp, #24]
  401328:	ldr	w3, [sp, #36]
  40132c:	mov	x2, #0x0                   	// #0
  401330:	mov	x1, #0x0                   	// #0
  401334:	ldr	x0, [sp, #40]
  401338:	bl	400f90 <safe_fork_full@plt>
  40133c:	ldp	x29, x30, [sp], #48
  401340:	ret

0000000000401344 <strnull>:
  401344:	sub	sp, sp, #0x10
  401348:	str	x0, [sp, #8]
  40134c:	ldr	x0, [sp, #8]
  401350:	cmp	x0, #0x0
  401354:	b.ne	401360 <strnull+0x1c>  // b.any
  401358:	adrp	x0, 403000 <verify_source_vc+0x18c>
  40135c:	add	x0, x0, #0x7a8
  401360:	add	sp, sp, #0x10
  401364:	ret

0000000000401368 <one_zero>:
  401368:	sub	sp, sp, #0x10
  40136c:	strb	w0, [sp, #15]
  401370:	ldrb	w0, [sp, #15]
  401374:	cmp	w0, #0x0
  401378:	b.eq	401388 <one_zero+0x20>  // b.none
  40137c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401380:	add	x0, x0, #0x7b0
  401384:	b	401390 <one_zero+0x28>
  401388:	adrp	x0, 403000 <verify_source_vc+0x18c>
  40138c:	add	x0, x0, #0x7b8
  401390:	add	sp, sp, #0x10
  401394:	ret

0000000000401398 <enable_disable>:
  401398:	sub	sp, sp, #0x10
  40139c:	strb	w0, [sp, #15]
  4013a0:	ldrb	w0, [sp, #15]
  4013a4:	cmp	w0, #0x0
  4013a8:	b.eq	4013b8 <enable_disable+0x20>  // b.none
  4013ac:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4013b0:	add	x0, x0, #0x7c0
  4013b4:	b	4013c0 <enable_disable+0x28>
  4013b8:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4013bc:	add	x0, x0, #0x7c8
  4013c0:	add	sp, sp, #0x10
  4013c4:	ret

00000000004013c8 <isempty>:
  4013c8:	sub	sp, sp, #0x10
  4013cc:	str	x0, [sp, #8]
  4013d0:	ldr	x0, [sp, #8]
  4013d4:	cmp	x0, #0x0
  4013d8:	b.eq	4013ec <isempty+0x24>  // b.none
  4013dc:	ldr	x0, [sp, #8]
  4013e0:	ldrb	w0, [x0]
  4013e4:	cmp	w0, #0x0
  4013e8:	b.ne	4013f4 <isempty+0x2c>  // b.any
  4013ec:	mov	w0, #0x1                   	// #1
  4013f0:	b	4013f8 <isempty+0x30>
  4013f4:	mov	w0, #0x0                   	// #0
  4013f8:	and	w0, w0, #0x1
  4013fc:	and	w0, w0, #0xff
  401400:	add	sp, sp, #0x10
  401404:	ret

0000000000401408 <strv_join>:
  401408:	stp	x29, x30, [sp, #-32]!
  40140c:	mov	x29, sp
  401410:	str	x0, [sp, #24]
  401414:	str	x1, [sp, #16]
  401418:	mov	x2, #0x0                   	// #0
  40141c:	ldr	x1, [sp, #16]
  401420:	ldr	x0, [sp, #24]
  401424:	bl	400f40 <strv_join_prefix@plt>
  401428:	ldp	x29, x30, [sp], #32
  40142c:	ret

0000000000401430 <verify_vc_device>:
  401430:	stp	x29, x30, [sp, #-64]!
  401434:	mov	x29, sp
  401438:	str	w0, [sp, #28]
  40143c:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  401440:	add	x0, x0, #0xca0
  401444:	ldr	x1, [x0]
  401448:	str	x1, [sp, #56]
  40144c:	mov	x1, #0x0                   	// #0
  401450:	mov	w0, #0xc                   	// #12
  401454:	strb	w0, [sp, #48]
  401458:	add	x0, sp, #0x30
  40145c:	mov	x2, x0
  401460:	mov	x1, #0x541c                	// #21532
  401464:	ldr	w0, [sp, #28]
  401468:	bl	400f50 <ioctl@plt>
  40146c:	str	w0, [sp, #44]
  401470:	ldr	w0, [sp, #44]
  401474:	cmp	w0, #0x0
  401478:	b.ge	40148c <verify_vc_device+0x5c>  // b.tcont
  40147c:	bl	400ed0 <__errno_location@plt>
  401480:	ldr	w0, [x0]
  401484:	neg	w0, w0
  401488:	b	401490 <verify_vc_device+0x60>
  40148c:	ldr	w0, [sp, #44]
  401490:	mov	w1, w0
  401494:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  401498:	add	x0, x0, #0xca0
  40149c:	ldr	x2, [sp, #56]
  4014a0:	ldr	x0, [x0]
  4014a4:	eor	x0, x2, x0
  4014a8:	cmp	x0, #0x0
  4014ac:	b.eq	4014b4 <verify_vc_device+0x84>  // b.none
  4014b0:	bl	400f00 <__stack_chk_fail@plt>
  4014b4:	mov	w0, w1
  4014b8:	ldp	x29, x30, [sp], #64
  4014bc:	ret

00000000004014c0 <verify_vc_allocation>:
  4014c0:	stp	x29, x30, [sp, #-64]!
  4014c4:	mov	x29, sp
  4014c8:	str	w0, [sp, #28]
  4014cc:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  4014d0:	add	x0, x0, #0xca0
  4014d4:	ldr	x1, [x0]
  4014d8:	str	x1, [sp, #56]
  4014dc:	mov	x1, #0x0                   	// #0
  4014e0:	add	x4, sp, #0x20
  4014e4:	ldr	w3, [sp, #28]
  4014e8:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4014ec:	add	x2, x0, #0x7d0
  4014f0:	mov	x1, #0x13                  	// #19
  4014f4:	mov	x0, x4
  4014f8:	bl	400e40 <snprintf@plt>
  4014fc:	cmp	w0, #0x12
  401500:	cset	w0, hi  // hi = pmore
  401504:	and	w0, w0, #0xff
  401508:	and	x0, x0, #0xff
  40150c:	cmp	x0, #0x0
  401510:	b.eq	40153c <verify_vc_allocation+0x7c>  // b.none
  401514:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401518:	add	x1, x0, #0x7e3
  40151c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401520:	add	x4, x0, #0xf58
  401524:	mov	w3, #0x37                  	// #55
  401528:	mov	x2, x1
  40152c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401530:	add	x1, x0, #0x808
  401534:	mov	w0, #0x0                   	// #0
  401538:	bl	400e70 <log_assert_failed_realm@plt>
  40153c:	add	x0, sp, #0x20
  401540:	mov	w1, #0x0                   	// #0
  401544:	bl	400ea0 <access@plt>
  401548:	cmp	w0, #0x0
  40154c:	b.ge	401560 <verify_vc_allocation+0xa0>  // b.tcont
  401550:	bl	400ed0 <__errno_location@plt>
  401554:	ldr	w0, [x0]
  401558:	neg	w0, w0
  40155c:	b	401564 <verify_vc_allocation+0xa4>
  401560:	mov	w0, #0x0                   	// #0
  401564:	mov	w1, w0
  401568:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  40156c:	add	x0, x0, #0xca0
  401570:	ldr	x2, [sp, #56]
  401574:	ldr	x0, [x0]
  401578:	eor	x0, x2, x0
  40157c:	cmp	x0, #0x0
  401580:	b.eq	401588 <verify_vc_allocation+0xc8>  // b.none
  401584:	bl	400f00 <__stack_chk_fail@plt>
  401588:	mov	w0, w1
  40158c:	ldp	x29, x30, [sp], #64
  401590:	ret

0000000000401594 <verify_vc_allocation_byfd>:
  401594:	stp	x29, x30, [sp, #-48]!
  401598:	mov	x29, sp
  40159c:	str	w0, [sp, #28]
  4015a0:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  4015a4:	add	x0, x0, #0xca0
  4015a8:	ldr	x1, [x0]
  4015ac:	str	x1, [sp, #40]
  4015b0:	mov	x1, #0x0                   	// #0
  4015b4:	str	wzr, [sp, #32]
  4015b8:	strh	wzr, [sp, #36]
  4015bc:	add	x0, sp, #0x20
  4015c0:	mov	x2, x0
  4015c4:	mov	x1, #0x5603                	// #22019
  4015c8:	ldr	w0, [sp, #28]
  4015cc:	bl	400f50 <ioctl@plt>
  4015d0:	cmp	w0, #0x0
  4015d4:	b.ge	4015e8 <verify_vc_allocation_byfd+0x54>  // b.tcont
  4015d8:	bl	400ed0 <__errno_location@plt>
  4015dc:	ldr	w0, [x0]
  4015e0:	neg	w0, w0
  4015e4:	b	4015f0 <verify_vc_allocation_byfd+0x5c>
  4015e8:	ldrh	w0, [sp, #32]
  4015ec:	bl	4014c0 <verify_vc_allocation>
  4015f0:	mov	w1, w0
  4015f4:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  4015f8:	add	x0, x0, #0xca0
  4015fc:	ldr	x2, [sp, #40]
  401600:	ldr	x0, [x0]
  401604:	eor	x0, x2, x0
  401608:	cmp	x0, #0x0
  40160c:	b.eq	401614 <verify_vc_allocation_byfd+0x80>  // b.none
  401610:	bl	400f00 <__stack_chk_fail@plt>
  401614:	mov	w0, w1
  401618:	ldp	x29, x30, [sp], #48
  40161c:	ret

0000000000401620 <verify_vc_kbmode>:
  401620:	stp	x29, x30, [sp, #-48]!
  401624:	mov	x29, sp
  401628:	str	w0, [sp, #28]
  40162c:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  401630:	add	x0, x0, #0xca0
  401634:	ldr	x1, [x0]
  401638:	str	x1, [sp, #40]
  40163c:	mov	x1, #0x0                   	// #0
  401640:	add	x0, sp, #0x24
  401644:	mov	x2, x0
  401648:	mov	x1, #0x4b44                	// #19268
  40164c:	ldr	w0, [sp, #28]
  401650:	bl	400f50 <ioctl@plt>
  401654:	cmp	w0, #0x0
  401658:	b.ge	40166c <verify_vc_kbmode+0x4c>  // b.tcont
  40165c:	bl	400ed0 <__errno_location@plt>
  401660:	ldr	w0, [x0]
  401664:	neg	w0, w0
  401668:	b	4016a8 <verify_vc_kbmode+0x88>
  40166c:	strb	wzr, [sp, #35]
  401670:	ldr	w0, [sp, #36]
  401674:	cmp	w0, #0x1
  401678:	b.eq	401684 <verify_vc_kbmode+0x64>  // b.none
  40167c:	cmp	w0, #0x3
  401680:	b.ne	40168c <verify_vc_kbmode+0x6c>  // b.any
  401684:	mov	w0, #0x1                   	// #1
  401688:	strb	w0, [sp, #35]
  40168c:	nop
  401690:	ldrb	w0, [sp, #35]
  401694:	cmp	w0, #0x0
  401698:	b.eq	4016a4 <verify_vc_kbmode+0x84>  // b.none
  40169c:	mov	w0, #0x0                   	// #0
  4016a0:	b	4016a8 <verify_vc_kbmode+0x88>
  4016a4:	mov	w0, #0xfffffff0            	// #-16
  4016a8:	mov	w1, w0
  4016ac:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  4016b0:	add	x0, x0, #0xca0
  4016b4:	ldr	x2, [sp, #40]
  4016b8:	ldr	x0, [x0]
  4016bc:	eor	x0, x2, x0
  4016c0:	cmp	x0, #0x0
  4016c4:	b.eq	4016cc <verify_vc_kbmode+0xac>  // b.none
  4016c8:	bl	400f00 <__stack_chk_fail@plt>
  4016cc:	mov	w0, w1
  4016d0:	ldp	x29, x30, [sp], #48
  4016d4:	ret

00000000004016d8 <toggle_utf8_vc>:
  4016d8:	stp	x29, x30, [sp, #-176]!
  4016dc:	mov	x29, sp
  4016e0:	stp	x19, x20, [sp, #16]
  4016e4:	str	x0, [sp, #40]
  4016e8:	str	w1, [sp, #36]
  4016ec:	strb	w2, [sp, #35]
  4016f0:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  4016f4:	add	x0, x0, #0xca0
  4016f8:	ldr	x1, [x0]
  4016fc:	str	x1, [sp, #168]
  401700:	mov	x1, #0x0                   	// #0
  401704:	stp	xzr, xzr, [sp, #104]
  401708:	stp	xzr, xzr, [sp, #120]
  40170c:	stp	xzr, xzr, [sp, #136]
  401710:	str	xzr, [sp, #152]
  401714:	str	wzr, [sp, #160]
  401718:	ldr	x0, [sp, #40]
  40171c:	cmp	x0, #0x0
  401720:	cset	w0, eq  // eq = none
  401724:	and	w0, w0, #0xff
  401728:	and	x0, x0, #0xff
  40172c:	cmp	x0, #0x0
  401730:	b.eq	40175c <toggle_utf8_vc+0x84>  // b.none
  401734:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401738:	add	x1, x0, #0x7e3
  40173c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401740:	add	x4, x0, #0xf70
  401744:	mov	w3, #0x5d                  	// #93
  401748:	mov	x2, x1
  40174c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401750:	add	x1, x0, #0x830
  401754:	mov	w0, #0x0                   	// #0
  401758:	bl	400e70 <log_assert_failed_realm@plt>
  40175c:	ldr	w0, [sp, #36]
  401760:	lsr	w0, w0, #31
  401764:	and	w0, w0, #0xff
  401768:	and	x0, x0, #0xff
  40176c:	cmp	x0, #0x0
  401770:	b.eq	40179c <toggle_utf8_vc+0xc4>  // b.none
  401774:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401778:	add	x1, x0, #0x7e3
  40177c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401780:	add	x4, x0, #0xf70
  401784:	mov	w3, #0x5e                  	// #94
  401788:	mov	x2, x1
  40178c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401790:	add	x1, x0, #0x838
  401794:	mov	w0, #0x0                   	// #0
  401798:	bl	400e70 <log_assert_failed_realm@plt>
  40179c:	ldrb	w0, [sp, #35]
  4017a0:	cmp	w0, #0x0
  4017a4:	b.eq	4017b0 <toggle_utf8_vc+0xd8>  // b.none
  4017a8:	mov	w0, #0x3                   	// #3
  4017ac:	b	4017b4 <toggle_utf8_vc+0xdc>
  4017b0:	mov	w0, #0x1                   	// #1
  4017b4:	mov	w2, w0
  4017b8:	mov	x1, #0x4b45                	// #19269
  4017bc:	ldr	w0, [sp, #36]
  4017c0:	bl	400f50 <ioctl@plt>
  4017c4:	str	w0, [sp, #52]
  4017c8:	ldr	w0, [sp, #52]
  4017cc:	cmp	w0, #0x0
  4017d0:	b.ge	401870 <toggle_utf8_vc+0x198>  // b.tcont
  4017d4:	mov	w0, #0x4                   	// #4
  4017d8:	str	w0, [sp, #92]
  4017dc:	bl	400ed0 <__errno_location@plt>
  4017e0:	ldr	w0, [x0]
  4017e4:	str	w0, [sp, #96]
  4017e8:	str	wzr, [sp, #100]
  4017ec:	ldr	w0, [sp, #100]
  4017f0:	bl	400ff0 <log_get_max_level_realm@plt>
  4017f4:	mov	w1, w0
  4017f8:	ldr	w0, [sp, #92]
  4017fc:	and	w0, w0, #0x7
  401800:	cmp	w1, w0
  401804:	b.lt	401858 <toggle_utf8_vc+0x180>  // b.tstop
  401808:	ldr	w0, [sp, #100]
  40180c:	lsl	w1, w0, #10
  401810:	ldr	w0, [sp, #92]
  401814:	orr	w19, w1, w0
  401818:	adrp	x0, 403000 <verify_source_vc+0x18c>
  40181c:	add	x20, x0, #0x7e3
  401820:	ldrb	w0, [sp, #35]
  401824:	bl	401398 <enable_disable>
  401828:	ldr	x7, [sp, #40]
  40182c:	mov	x6, x0
  401830:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401834:	add	x5, x0, #0x840
  401838:	adrp	x0, 403000 <verify_source_vc+0x18c>
  40183c:	add	x4, x0, #0xf80
  401840:	mov	w3, #0x62                  	// #98
  401844:	mov	x2, x20
  401848:	ldr	w1, [sp, #96]
  40184c:	mov	w0, w19
  401850:	bl	400f30 <log_internal_realm@plt>
  401854:	b	401ad8 <toggle_utf8_vc+0x400>
  401858:	ldr	w0, [sp, #96]
  40185c:	cmp	w0, #0x0
  401860:	cneg	w0, w0, lt  // lt = tstop
  401864:	and	w0, w0, #0xff
  401868:	neg	w0, w0
  40186c:	b	401ad8 <toggle_utf8_vc+0x400>
  401870:	ldrb	w0, [sp, #35]
  401874:	cmp	w0, #0x0
  401878:	b.eq	401888 <toggle_utf8_vc+0x1b0>  // b.none
  40187c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401880:	add	x0, x0, #0x868
  401884:	b	401890 <toggle_utf8_vc+0x1b8>
  401888:	adrp	x0, 403000 <verify_source_vc+0x18c>
  40188c:	add	x0, x0, #0x870
  401890:	mov	w3, #0x0                   	// #0
  401894:	mov	x2, #0x3                   	// #3
  401898:	mov	x1, x0
  40189c:	ldr	w0, [sp, #36]
  4018a0:	bl	400e30 <loop_write@plt>
  4018a4:	str	w0, [sp, #52]
  4018a8:	ldr	w0, [sp, #52]
  4018ac:	cmp	w0, #0x0
  4018b0:	b.ge	40194c <toggle_utf8_vc+0x274>  // b.tcont
  4018b4:	mov	w0, #0x4                   	// #4
  4018b8:	str	w0, [sp, #80]
  4018bc:	ldr	w0, [sp, #52]
  4018c0:	str	w0, [sp, #84]
  4018c4:	str	wzr, [sp, #88]
  4018c8:	ldr	w0, [sp, #88]
  4018cc:	bl	400ff0 <log_get_max_level_realm@plt>
  4018d0:	mov	w1, w0
  4018d4:	ldr	w0, [sp, #80]
  4018d8:	and	w0, w0, #0x7
  4018dc:	cmp	w1, w0
  4018e0:	b.lt	401934 <toggle_utf8_vc+0x25c>  // b.tstop
  4018e4:	ldr	w0, [sp, #88]
  4018e8:	lsl	w1, w0, #10
  4018ec:	ldr	w0, [sp, #80]
  4018f0:	orr	w19, w1, w0
  4018f4:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4018f8:	add	x20, x0, #0x7e3
  4018fc:	ldrb	w0, [sp, #35]
  401900:	bl	401398 <enable_disable>
  401904:	ldr	x7, [sp, #40]
  401908:	mov	x6, x0
  40190c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401910:	add	x5, x0, #0x878
  401914:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401918:	add	x4, x0, #0xf80
  40191c:	mov	w3, #0x66                  	// #102
  401920:	mov	x2, x20
  401924:	ldr	w1, [sp, #84]
  401928:	mov	w0, w19
  40192c:	bl	400f30 <log_internal_realm@plt>
  401930:	b	401ad8 <toggle_utf8_vc+0x400>
  401934:	ldr	w0, [sp, #84]
  401938:	cmp	w0, #0x0
  40193c:	cneg	w0, w0, lt  // lt = tstop
  401940:	and	w0, w0, #0xff
  401944:	neg	w0, w0
  401948:	b	401ad8 <toggle_utf8_vc+0x400>
  40194c:	add	x0, sp, #0x68
  401950:	mov	x1, x0
  401954:	ldr	w0, [sp, #36]
  401958:	bl	400f60 <tcgetattr@plt>
  40195c:	str	w0, [sp, #52]
  401960:	ldr	w0, [sp, #52]
  401964:	cmp	w0, #0x0
  401968:	b.lt	4019a8 <toggle_utf8_vc+0x2d0>  // b.tstop
  40196c:	ldrb	w0, [sp, #35]
  401970:	cmp	w0, #0x0
  401974:	b.eq	401984 <toggle_utf8_vc+0x2ac>  // b.none
  401978:	ldr	w0, [sp, #104]
  40197c:	orr	w0, w0, #0x4000
  401980:	b	40198c <toggle_utf8_vc+0x2b4>
  401984:	ldr	w0, [sp, #104]
  401988:	and	w0, w0, #0xffffbfff
  40198c:	str	w0, [sp, #104]
  401990:	add	x0, sp, #0x68
  401994:	mov	x2, x0
  401998:	mov	w1, #0x0                   	// #0
  40199c:	ldr	w0, [sp, #36]
  4019a0:	bl	400fc0 <tcsetattr@plt>
  4019a4:	str	w0, [sp, #52]
  4019a8:	ldr	w0, [sp, #52]
  4019ac:	cmp	w0, #0x0
  4019b0:	b.ge	401a50 <toggle_utf8_vc+0x378>  // b.tcont
  4019b4:	mov	w0, #0x4                   	// #4
  4019b8:	str	w0, [sp, #68]
  4019bc:	bl	400ed0 <__errno_location@plt>
  4019c0:	ldr	w0, [x0]
  4019c4:	str	w0, [sp, #72]
  4019c8:	str	wzr, [sp, #76]
  4019cc:	ldr	w0, [sp, #76]
  4019d0:	bl	400ff0 <log_get_max_level_realm@plt>
  4019d4:	mov	w1, w0
  4019d8:	ldr	w0, [sp, #68]
  4019dc:	and	w0, w0, #0x7
  4019e0:	cmp	w1, w0
  4019e4:	b.lt	401a38 <toggle_utf8_vc+0x360>  // b.tstop
  4019e8:	ldr	w0, [sp, #76]
  4019ec:	lsl	w1, w0, #10
  4019f0:	ldr	w0, [sp, #68]
  4019f4:	orr	w19, w1, w0
  4019f8:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4019fc:	add	x20, x0, #0x7e3
  401a00:	ldrb	w0, [sp, #35]
  401a04:	bl	401398 <enable_disable>
  401a08:	ldr	x7, [sp, #40]
  401a0c:	mov	x6, x0
  401a10:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401a14:	add	x5, x0, #0x8a8
  401a18:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401a1c:	add	x4, x0, #0xf80
  401a20:	mov	w3, #0x6e                  	// #110
  401a24:	mov	x2, x20
  401a28:	ldr	w1, [sp, #72]
  401a2c:	mov	w0, w19
  401a30:	bl	400f30 <log_internal_realm@plt>
  401a34:	b	401ad8 <toggle_utf8_vc+0x400>
  401a38:	ldr	w0, [sp, #72]
  401a3c:	cmp	w0, #0x0
  401a40:	cneg	w0, w0, lt  // lt = tstop
  401a44:	and	w0, w0, #0xff
  401a48:	neg	w0, w0
  401a4c:	b	401ad8 <toggle_utf8_vc+0x400>
  401a50:	mov	w0, #0x7                   	// #7
  401a54:	str	w0, [sp, #56]
  401a58:	str	wzr, [sp, #60]
  401a5c:	str	wzr, [sp, #64]
  401a60:	ldr	w0, [sp, #64]
  401a64:	bl	400ff0 <log_get_max_level_realm@plt>
  401a68:	mov	w1, w0
  401a6c:	ldr	w0, [sp, #56]
  401a70:	and	w0, w0, #0x7
  401a74:	cmp	w1, w0
  401a78:	b.lt	401acc <toggle_utf8_vc+0x3f4>  // b.tstop
  401a7c:	ldr	w0, [sp, #64]
  401a80:	lsl	w1, w0, #10
  401a84:	ldr	w0, [sp, #56]
  401a88:	orr	w19, w1, w0
  401a8c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401a90:	add	x20, x0, #0x7e3
  401a94:	ldrb	w0, [sp, #35]
  401a98:	bl	401398 <enable_disable>
  401a9c:	ldr	x7, [sp, #40]
  401aa0:	mov	x6, x0
  401aa4:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401aa8:	add	x5, x0, #0x8d0
  401aac:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401ab0:	add	x4, x0, #0xf80
  401ab4:	mov	w3, #0x70                  	// #112
  401ab8:	mov	x2, x20
  401abc:	ldr	w1, [sp, #60]
  401ac0:	mov	w0, w19
  401ac4:	bl	400f30 <log_internal_realm@plt>
  401ac8:	b	401ad4 <toggle_utf8_vc+0x3fc>
  401acc:	ldr	w0, [sp, #60]
  401ad0:	cmp	w0, #0x0
  401ad4:	mov	w0, #0x0                   	// #0
  401ad8:	mov	w1, w0
  401adc:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  401ae0:	add	x0, x0, #0xca0
  401ae4:	ldr	x2, [sp, #168]
  401ae8:	ldr	x0, [x0]
  401aec:	eor	x0, x2, x0
  401af0:	cmp	x0, #0x0
  401af4:	b.eq	401afc <toggle_utf8_vc+0x424>  // b.none
  401af8:	bl	400f00 <__stack_chk_fail@plt>
  401afc:	mov	w0, w1
  401b00:	ldp	x19, x20, [sp, #16]
  401b04:	ldp	x29, x30, [sp], #176
  401b08:	ret

0000000000401b0c <toggle_utf8_sysfs>:
  401b0c:	stp	x29, x30, [sp, #-80]!
  401b10:	mov	x29, sp
  401b14:	stp	x19, x20, [sp, #16]
  401b18:	strb	w0, [sp, #47]
  401b1c:	ldrb	w0, [sp, #47]
  401b20:	bl	401368 <one_zero>
  401b24:	mov	w2, #0x20                  	// #32
  401b28:	mov	x1, x0
  401b2c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401b30:	add	x0, x0, #0x8e8
  401b34:	bl	4012e0 <write_string_file>
  401b38:	str	w0, [sp, #52]
  401b3c:	ldr	w0, [sp, #52]
  401b40:	cmp	w0, #0x0
  401b44:	b.ge	401bdc <toggle_utf8_sysfs+0xd0>  // b.tcont
  401b48:	mov	w0, #0x4                   	// #4
  401b4c:	str	w0, [sp, #68]
  401b50:	ldr	w0, [sp, #52]
  401b54:	str	w0, [sp, #72]
  401b58:	str	wzr, [sp, #76]
  401b5c:	ldr	w0, [sp, #76]
  401b60:	bl	400ff0 <log_get_max_level_realm@plt>
  401b64:	mov	w1, w0
  401b68:	ldr	w0, [sp, #68]
  401b6c:	and	w0, w0, #0x7
  401b70:	cmp	w1, w0
  401b74:	b.lt	401bc4 <toggle_utf8_sysfs+0xb8>  // b.tstop
  401b78:	ldr	w0, [sp, #76]
  401b7c:	lsl	w1, w0, #10
  401b80:	ldr	w0, [sp, #68]
  401b84:	orr	w19, w1, w0
  401b88:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401b8c:	add	x20, x0, #0x7e3
  401b90:	ldrb	w0, [sp, #47]
  401b94:	bl	401398 <enable_disable>
  401b98:	mov	x6, x0
  401b9c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401ba0:	add	x5, x0, #0x910
  401ba4:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401ba8:	add	x4, x0, #0xf90
  401bac:	mov	w3, #0x79                  	// #121
  401bb0:	mov	x2, x20
  401bb4:	ldr	w1, [sp, #72]
  401bb8:	mov	w0, w19
  401bbc:	bl	400f30 <log_internal_realm@plt>
  401bc0:	b	401c60 <toggle_utf8_sysfs+0x154>
  401bc4:	ldr	w0, [sp, #72]
  401bc8:	cmp	w0, #0x0
  401bcc:	cneg	w0, w0, lt  // lt = tstop
  401bd0:	and	w0, w0, #0xff
  401bd4:	neg	w0, w0
  401bd8:	b	401c60 <toggle_utf8_sysfs+0x154>
  401bdc:	mov	w0, #0x7                   	// #7
  401be0:	str	w0, [sp, #56]
  401be4:	str	wzr, [sp, #60]
  401be8:	str	wzr, [sp, #64]
  401bec:	ldr	w0, [sp, #64]
  401bf0:	bl	400ff0 <log_get_max_level_realm@plt>
  401bf4:	mov	w1, w0
  401bf8:	ldr	w0, [sp, #56]
  401bfc:	and	w0, w0, #0x7
  401c00:	cmp	w1, w0
  401c04:	b.lt	401c54 <toggle_utf8_sysfs+0x148>  // b.tstop
  401c08:	ldr	w0, [sp, #64]
  401c0c:	lsl	w1, w0, #10
  401c10:	ldr	w0, [sp, #56]
  401c14:	orr	w19, w1, w0
  401c18:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401c1c:	add	x20, x0, #0x7e3
  401c20:	ldrb	w0, [sp, #47]
  401c24:	bl	401398 <enable_disable>
  401c28:	mov	x6, x0
  401c2c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401c30:	add	x5, x0, #0x938
  401c34:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401c38:	add	x4, x0, #0xf90
  401c3c:	mov	w3, #0x7b                  	// #123
  401c40:	mov	x2, x20
  401c44:	ldr	w1, [sp, #60]
  401c48:	mov	w0, w19
  401c4c:	bl	400f30 <log_internal_realm@plt>
  401c50:	b	401c5c <toggle_utf8_sysfs+0x150>
  401c54:	ldr	w0, [sp, #60]
  401c58:	cmp	w0, #0x0
  401c5c:	mov	w0, #0x0                   	// #0
  401c60:	ldp	x19, x20, [sp, #16]
  401c64:	ldp	x29, x30, [sp], #80
  401c68:	ret

0000000000401c6c <keyboard_load_and_wait>:
  401c6c:	stp	x29, x30, [sp, #-176]!
  401c70:	mov	x29, sp
  401c74:	stp	x19, x20, [sp, #16]
  401c78:	str	x0, [sp, #56]
  401c7c:	str	x1, [sp, #48]
  401c80:	str	x2, [sp, #40]
  401c84:	strb	w3, [sp, #39]
  401c88:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  401c8c:	add	x0, x0, #0xca0
  401c90:	ldr	x1, [x0]
  401c94:	str	x1, [sp, #168]
  401c98:	mov	x1, #0x0                   	// #0
  401c9c:	str	wzr, [sp, #76]
  401ca0:	ldr	x0, [sp, #48]
  401ca4:	bl	4013c8 <isempty>
  401ca8:	and	w0, w0, #0xff
  401cac:	cmp	w0, #0x0
  401cb0:	b.eq	401cbc <keyboard_load_and_wait+0x50>  // b.none
  401cb4:	mov	w0, #0x0                   	// #0
  401cb8:	b	401f08 <keyboard_load_and_wait+0x29c>
  401cbc:	ldr	w0, [sp, #76]
  401cc0:	add	w1, w0, #0x1
  401cc4:	str	w1, [sp, #76]
  401cc8:	mov	w0, w0
  401ccc:	lsl	x0, x0, #3
  401cd0:	add	x1, sp, #0x68
  401cd4:	adrp	x2, 403000 <verify_source_vc+0x18c>
  401cd8:	add	x2, x2, #0x950
  401cdc:	str	x2, [x1, x0]
  401ce0:	ldr	w0, [sp, #76]
  401ce4:	add	w1, w0, #0x1
  401ce8:	str	w1, [sp, #76]
  401cec:	mov	w0, w0
  401cf0:	lsl	x0, x0, #3
  401cf4:	add	x1, sp, #0x68
  401cf8:	adrp	x2, 403000 <verify_source_vc+0x18c>
  401cfc:	add	x2, x2, #0x968
  401d00:	str	x2, [x1, x0]
  401d04:	ldr	w0, [sp, #76]
  401d08:	add	w1, w0, #0x1
  401d0c:	str	w1, [sp, #76]
  401d10:	mov	w0, w0
  401d14:	lsl	x0, x0, #3
  401d18:	add	x1, sp, #0x68
  401d1c:	adrp	x2, 403000 <verify_source_vc+0x18c>
  401d20:	add	x2, x2, #0x970
  401d24:	str	x2, [x1, x0]
  401d28:	ldr	w0, [sp, #76]
  401d2c:	add	w1, w0, #0x1
  401d30:	str	w1, [sp, #76]
  401d34:	mov	w0, w0
  401d38:	lsl	x0, x0, #3
  401d3c:	add	x1, sp, #0x68
  401d40:	ldr	x2, [sp, #56]
  401d44:	str	x2, [x1, x0]
  401d48:	ldrb	w0, [sp, #39]
  401d4c:	cmp	w0, #0x0
  401d50:	b.eq	401d78 <keyboard_load_and_wait+0x10c>  // b.none
  401d54:	ldr	w0, [sp, #76]
  401d58:	add	w1, w0, #0x1
  401d5c:	str	w1, [sp, #76]
  401d60:	mov	w0, w0
  401d64:	lsl	x0, x0, #3
  401d68:	add	x1, sp, #0x68
  401d6c:	adrp	x2, 403000 <verify_source_vc+0x18c>
  401d70:	add	x2, x2, #0x978
  401d74:	str	x2, [x1, x0]
  401d78:	ldr	w0, [sp, #76]
  401d7c:	add	w1, w0, #0x1
  401d80:	str	w1, [sp, #76]
  401d84:	mov	w0, w0
  401d88:	lsl	x0, x0, #3
  401d8c:	add	x1, sp, #0x68
  401d90:	ldr	x2, [sp, #48]
  401d94:	str	x2, [x1, x0]
  401d98:	ldr	x0, [sp, #40]
  401d9c:	cmp	x0, #0x0
  401da0:	b.eq	401dc4 <keyboard_load_and_wait+0x158>  // b.none
  401da4:	ldr	w0, [sp, #76]
  401da8:	add	w1, w0, #0x1
  401dac:	str	w1, [sp, #76]
  401db0:	mov	w0, w0
  401db4:	lsl	x0, x0, #3
  401db8:	add	x1, sp, #0x68
  401dbc:	ldr	x2, [sp, #40]
  401dc0:	str	x2, [x1, x0]
  401dc4:	ldr	w0, [sp, #76]
  401dc8:	add	w1, w0, #0x1
  401dcc:	str	w1, [sp, #76]
  401dd0:	mov	w0, w0
  401dd4:	lsl	x0, x0, #3
  401dd8:	add	x1, sp, #0x68
  401ddc:	str	xzr, [x1, x0]
  401de0:	mov	w0, #0x0                   	// #0
  401de4:	bl	400ff0 <log_get_max_level_realm@plt>
  401de8:	cmp	w0, #0x6
  401dec:	cset	w0, gt
  401df0:	and	w0, w0, #0xff
  401df4:	and	x0, x0, #0xff
  401df8:	cmp	x0, #0x0
  401dfc:	b.eq	401ea0 <keyboard_load_and_wait+0x234>  // b.none
  401e00:	add	x2, sp, #0x68
  401e04:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401e08:	add	x1, x0, #0x980
  401e0c:	mov	x0, x2
  401e10:	bl	401408 <strv_join>
  401e14:	str	x0, [sp, #96]
  401e18:	mov	w0, #0x7                   	// #7
  401e1c:	str	w0, [sp, #80]
  401e20:	str	wzr, [sp, #84]
  401e24:	str	wzr, [sp, #88]
  401e28:	ldr	w0, [sp, #88]
  401e2c:	bl	400ff0 <log_get_max_level_realm@plt>
  401e30:	mov	w1, w0
  401e34:	ldr	w0, [sp, #80]
  401e38:	and	w0, w0, #0x7
  401e3c:	cmp	w1, w0
  401e40:	b.lt	401e90 <keyboard_load_and_wait+0x224>  // b.tstop
  401e44:	ldr	w0, [sp, #88]
  401e48:	lsl	w1, w0, #10
  401e4c:	ldr	w0, [sp, #80]
  401e50:	orr	w19, w1, w0
  401e54:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401e58:	add	x20, x0, #0x7e3
  401e5c:	ldr	x0, [sp, #96]
  401e60:	bl	401344 <strnull>
  401e64:	mov	x6, x0
  401e68:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401e6c:	add	x5, x0, #0x988
  401e70:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401e74:	add	x4, x0, #0xfa8
  401e78:	mov	w3, #0x98                  	// #152
  401e7c:	mov	x2, x20
  401e80:	ldr	w1, [sp, #84]
  401e84:	mov	w0, w19
  401e88:	bl	400f30 <log_internal_realm@plt>
  401e8c:	b	401e98 <keyboard_load_and_wait+0x22c>
  401e90:	ldr	w0, [sp, #84]
  401e94:	cmp	w0, #0x0
  401e98:	add	x0, sp, #0x60
  401e9c:	bl	4011c8 <freep>
  401ea0:	add	x0, sp, #0x60
  401ea4:	mov	x2, x0
  401ea8:	mov	w1, #0x223                 	// #547
  401eac:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401eb0:	add	x0, x0, #0x9a0
  401eb4:	bl	401310 <safe_fork>
  401eb8:	str	w0, [sp, #92]
  401ebc:	ldr	w0, [sp, #92]
  401ec0:	cmp	w0, #0x0
  401ec4:	b.ge	401ed0 <keyboard_load_and_wait+0x264>  // b.tcont
  401ec8:	ldr	w0, [sp, #92]
  401ecc:	b	401f08 <keyboard_load_and_wait+0x29c>
  401ed0:	ldr	w0, [sp, #92]
  401ed4:	cmp	w0, #0x0
  401ed8:	b.ne	401ef0 <keyboard_load_and_wait+0x284>  // b.any
  401edc:	ldr	x0, [sp, #104]
  401ee0:	add	x1, sp, #0x68
  401ee4:	bl	400f80 <execv@plt>
  401ee8:	mov	w0, #0x1                   	// #1
  401eec:	bl	400e80 <_exit@plt>
  401ef0:	ldr	w0, [sp, #96]
  401ef4:	mov	w2, #0x3                   	// #3
  401ef8:	mov	w1, w0
  401efc:	adrp	x0, 403000 <verify_source_vc+0x18c>
  401f00:	add	x0, x0, #0x950
  401f04:	bl	400ee0 <wait_for_terminate_and_check@plt>
  401f08:	mov	w1, w0
  401f0c:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  401f10:	add	x0, x0, #0xca0
  401f14:	ldr	x2, [sp, #168]
  401f18:	ldr	x0, [x0]
  401f1c:	eor	x0, x2, x0
  401f20:	cmp	x0, #0x0
  401f24:	b.eq	401f2c <keyboard_load_and_wait+0x2c0>  // b.none
  401f28:	bl	400f00 <__stack_chk_fail@plt>
  401f2c:	mov	w0, w1
  401f30:	ldp	x19, x20, [sp, #16]
  401f34:	ldp	x29, x30, [sp], #176
  401f38:	ret

0000000000401f3c <font_load_and_wait>:
  401f3c:	stp	x29, x30, [sp, #-176]!
  401f40:	mov	x29, sp
  401f44:	stp	x19, x20, [sp, #16]
  401f48:	str	x0, [sp, #56]
  401f4c:	str	x1, [sp, #48]
  401f50:	str	x2, [sp, #40]
  401f54:	str	x3, [sp, #32]
  401f58:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  401f5c:	add	x0, x0, #0xca0
  401f60:	ldr	x1, [x0]
  401f64:	str	x1, [sp, #168]
  401f68:	mov	x1, #0x0                   	// #0
  401f6c:	str	wzr, [sp, #68]
  401f70:	ldr	x0, [sp, #48]
  401f74:	bl	4013c8 <isempty>
  401f78:	and	w0, w0, #0xff
  401f7c:	cmp	w0, #0x0
  401f80:	b.eq	401fb4 <font_load_and_wait+0x78>  // b.none
  401f84:	ldr	x0, [sp, #40]
  401f88:	bl	4013c8 <isempty>
  401f8c:	and	w0, w0, #0xff
  401f90:	cmp	w0, #0x0
  401f94:	b.eq	401fb4 <font_load_and_wait+0x78>  // b.none
  401f98:	ldr	x0, [sp, #32]
  401f9c:	bl	4013c8 <isempty>
  401fa0:	and	w0, w0, #0xff
  401fa4:	cmp	w0, #0x0
  401fa8:	b.eq	401fb4 <font_load_and_wait+0x78>  // b.none
  401fac:	mov	w0, #0x0                   	// #0
  401fb0:	b	40225c <font_load_and_wait+0x320>
  401fb4:	ldr	w0, [sp, #68]
  401fb8:	add	w1, w0, #0x1
  401fbc:	str	w1, [sp, #68]
  401fc0:	mov	w0, w0
  401fc4:	lsl	x0, x0, #3
  401fc8:	add	x1, sp, #0x60
  401fcc:	adrp	x2, 403000 <verify_source_vc+0x18c>
  401fd0:	add	x2, x2, #0x9b0
  401fd4:	str	x2, [x1, x0]
  401fd8:	ldr	w0, [sp, #68]
  401fdc:	add	w1, w0, #0x1
  401fe0:	str	w1, [sp, #68]
  401fe4:	mov	w0, w0
  401fe8:	lsl	x0, x0, #3
  401fec:	add	x1, sp, #0x60
  401ff0:	adrp	x2, 403000 <verify_source_vc+0x18c>
  401ff4:	add	x2, x2, #0x970
  401ff8:	str	x2, [x1, x0]
  401ffc:	ldr	w0, [sp, #68]
  402000:	add	w1, w0, #0x1
  402004:	str	w1, [sp, #68]
  402008:	mov	w0, w0
  40200c:	lsl	x0, x0, #3
  402010:	add	x1, sp, #0x60
  402014:	ldr	x2, [sp, #56]
  402018:	str	x2, [x1, x0]
  40201c:	ldr	x0, [sp, #40]
  402020:	bl	4013c8 <isempty>
  402024:	and	w0, w0, #0xff
  402028:	eor	w0, w0, #0x1
  40202c:	and	w0, w0, #0xff
  402030:	cmp	w0, #0x0
  402034:	b.eq	40207c <font_load_and_wait+0x140>  // b.none
  402038:	ldr	w0, [sp, #68]
  40203c:	add	w1, w0, #0x1
  402040:	str	w1, [sp, #68]
  402044:	mov	w0, w0
  402048:	lsl	x0, x0, #3
  40204c:	add	x1, sp, #0x60
  402050:	adrp	x2, 403000 <verify_source_vc+0x18c>
  402054:	add	x2, x2, #0x9c8
  402058:	str	x2, [x1, x0]
  40205c:	ldr	w0, [sp, #68]
  402060:	add	w1, w0, #0x1
  402064:	str	w1, [sp, #68]
  402068:	mov	w0, w0
  40206c:	lsl	x0, x0, #3
  402070:	add	x1, sp, #0x60
  402074:	ldr	x2, [sp, #40]
  402078:	str	x2, [x1, x0]
  40207c:	ldr	x0, [sp, #32]
  402080:	bl	4013c8 <isempty>
  402084:	and	w0, w0, #0xff
  402088:	eor	w0, w0, #0x1
  40208c:	and	w0, w0, #0xff
  402090:	cmp	w0, #0x0
  402094:	b.eq	4020dc <font_load_and_wait+0x1a0>  // b.none
  402098:	ldr	w0, [sp, #68]
  40209c:	add	w1, w0, #0x1
  4020a0:	str	w1, [sp, #68]
  4020a4:	mov	w0, w0
  4020a8:	lsl	x0, x0, #3
  4020ac:	add	x1, sp, #0x60
  4020b0:	adrp	x2, 403000 <verify_source_vc+0x18c>
  4020b4:	add	x2, x2, #0x978
  4020b8:	str	x2, [x1, x0]
  4020bc:	ldr	w0, [sp, #68]
  4020c0:	add	w1, w0, #0x1
  4020c4:	str	w1, [sp, #68]
  4020c8:	mov	w0, w0
  4020cc:	lsl	x0, x0, #3
  4020d0:	add	x1, sp, #0x60
  4020d4:	ldr	x2, [sp, #32]
  4020d8:	str	x2, [x1, x0]
  4020dc:	ldr	x0, [sp, #48]
  4020e0:	bl	4013c8 <isempty>
  4020e4:	and	w0, w0, #0xff
  4020e8:	eor	w0, w0, #0x1
  4020ec:	and	w0, w0, #0xff
  4020f0:	cmp	w0, #0x0
  4020f4:	b.eq	402118 <font_load_and_wait+0x1dc>  // b.none
  4020f8:	ldr	w0, [sp, #68]
  4020fc:	add	w1, w0, #0x1
  402100:	str	w1, [sp, #68]
  402104:	mov	w0, w0
  402108:	lsl	x0, x0, #3
  40210c:	add	x1, sp, #0x60
  402110:	ldr	x2, [sp, #48]
  402114:	str	x2, [x1, x0]
  402118:	ldr	w0, [sp, #68]
  40211c:	add	w1, w0, #0x1
  402120:	str	w1, [sp, #68]
  402124:	mov	w0, w0
  402128:	lsl	x0, x0, #3
  40212c:	add	x1, sp, #0x60
  402130:	str	xzr, [x1, x0]
  402134:	mov	w0, #0x0                   	// #0
  402138:	bl	400ff0 <log_get_max_level_realm@plt>
  40213c:	cmp	w0, #0x6
  402140:	cset	w0, gt
  402144:	and	w0, w0, #0xff
  402148:	and	x0, x0, #0xff
  40214c:	cmp	x0, #0x0
  402150:	b.eq	4021f4 <font_load_and_wait+0x2b8>  // b.none
  402154:	add	x2, sp, #0x60
  402158:	adrp	x0, 403000 <verify_source_vc+0x18c>
  40215c:	add	x1, x0, #0x980
  402160:	mov	x0, x2
  402164:	bl	401408 <strv_join>
  402168:	str	x0, [sp, #88]
  40216c:	mov	w0, #0x7                   	// #7
  402170:	str	w0, [sp, #72]
  402174:	str	wzr, [sp, #76]
  402178:	str	wzr, [sp, #80]
  40217c:	ldr	w0, [sp, #80]
  402180:	bl	400ff0 <log_get_max_level_realm@plt>
  402184:	mov	w1, w0
  402188:	ldr	w0, [sp, #72]
  40218c:	and	w0, w0, #0x7
  402190:	cmp	w1, w0
  402194:	b.lt	4021e4 <font_load_and_wait+0x2a8>  // b.tstop
  402198:	ldr	w0, [sp, #80]
  40219c:	lsl	w1, w0, #10
  4021a0:	ldr	w0, [sp, #72]
  4021a4:	orr	w19, w1, w0
  4021a8:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4021ac:	add	x20, x0, #0x7e3
  4021b0:	ldr	x0, [sp, #88]
  4021b4:	bl	401344 <strnull>
  4021b8:	mov	x6, x0
  4021bc:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4021c0:	add	x5, x0, #0x988
  4021c4:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4021c8:	add	x4, x0, #0xfc0
  4021cc:	mov	w3, #0xc3                  	// #195
  4021d0:	mov	x2, x20
  4021d4:	ldr	w1, [sp, #76]
  4021d8:	mov	w0, w19
  4021dc:	bl	400f30 <log_internal_realm@plt>
  4021e0:	b	4021ec <font_load_and_wait+0x2b0>
  4021e4:	ldr	w0, [sp, #76]
  4021e8:	cmp	w0, #0x0
  4021ec:	add	x0, sp, #0x58
  4021f0:	bl	4011c8 <freep>
  4021f4:	add	x0, sp, #0x58
  4021f8:	mov	x2, x0
  4021fc:	mov	w1, #0x223                 	// #547
  402200:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402204:	add	x0, x0, #0x9d0
  402208:	bl	401310 <safe_fork>
  40220c:	str	w0, [sp, #84]
  402210:	ldr	w0, [sp, #84]
  402214:	cmp	w0, #0x0
  402218:	b.ge	402224 <font_load_and_wait+0x2e8>  // b.tcont
  40221c:	ldr	w0, [sp, #84]
  402220:	b	40225c <font_load_and_wait+0x320>
  402224:	ldr	w0, [sp, #84]
  402228:	cmp	w0, #0x0
  40222c:	b.ne	402244 <font_load_and_wait+0x308>  // b.any
  402230:	ldr	x0, [sp, #96]
  402234:	add	x1, sp, #0x60
  402238:	bl	400f80 <execv@plt>
  40223c:	mov	w0, #0x1                   	// #1
  402240:	bl	400e80 <_exit@plt>
  402244:	ldr	w0, [sp, #88]
  402248:	mov	w2, #0x3                   	// #3
  40224c:	mov	w1, w0
  402250:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402254:	add	x0, x0, #0x9b0
  402258:	bl	400ee0 <wait_for_terminate_and_check@plt>
  40225c:	mov	w1, w0
  402260:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  402264:	add	x0, x0, #0xca0
  402268:	ldr	x2, [sp, #168]
  40226c:	ldr	x0, [x0]
  402270:	eor	x0, x2, x0
  402274:	cmp	x0, #0x0
  402278:	b.eq	402280 <font_load_and_wait+0x344>  // b.none
  40227c:	bl	400f00 <__stack_chk_fail@plt>
  402280:	mov	w0, w1
  402284:	ldp	x19, x20, [sp, #16]
  402288:	ldp	x29, x30, [sp], #176
  40228c:	ret

0000000000402290 <setup_remaining_vcs>:
  402290:	sub	sp, sp, #0x140
  402294:	stp	x29, x30, [sp, #16]
  402298:	add	x29, sp, #0x10
  40229c:	str	x19, [sp, #32]
  4022a0:	str	w0, [sp, #60]
  4022a4:	str	w1, [sp, #56]
  4022a8:	strb	w2, [sp, #55]
  4022ac:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  4022b0:	add	x0, x0, #0xca0
  4022b4:	ldr	x1, [x0]
  4022b8:	str	x1, [sp, #312]
  4022bc:	mov	x1, #0x0                   	// #0
  4022c0:	add	x0, sp, #0x200
  4022c4:	stp	xzr, xzr, [x0, #-248]
  4022c8:	add	x0, sp, #0x200
  4022cc:	stp	xzr, xzr, [x0, #-232]
  4022d0:	mov	w0, #0x1                   	// #1
  4022d4:	str	w0, [sp, #264]
  4022d8:	mov	w0, #0xffffffff            	// #-1
  4022dc:	str	w0, [sp, #272]
  4022e0:	mov	w0, #0xffffffff            	// #-1
  4022e4:	str	w0, [sp, #276]
  4022e8:	mov	w0, #0xffffffff            	// #-1
  4022ec:	str	w0, [sp, #280]
  4022f0:	str	wzr, [sp, #224]
  4022f4:	strh	wzr, [sp, #228]
  4022f8:	str	xzr, [sp, #232]
  4022fc:	str	xzr, [sp, #240]
  402300:	mov	x1, #0xffff                	// #65535
  402304:	mov	x0, #0x4                   	// #4
  402308:	bl	401268 <malloc_multiply>
  40230c:	str	x0, [sp, #232]
  402310:	ldr	x0, [sp, #232]
  402314:	cmp	x0, #0x0
  402318:	b.ne	402340 <setup_remaining_vcs+0xb0>  // b.any
  40231c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402320:	add	x1, x0, #0x7e3
  402324:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402328:	add	x3, x0, #0xfd8
  40232c:	mov	w2, #0xe9                  	// #233
  402330:	mov	w0, #0x0                   	// #0
  402334:	bl	400fe0 <log_oom_internal@plt>
  402338:	mov	w19, #0x0                   	// #0
  40233c:	b	402ba0 <setup_remaining_vcs+0x910>
  402340:	add	x0, sp, #0x108
  402344:	mov	x2, x0
  402348:	mov	x1, #0x4b72                	// #19314
  40234c:	ldr	w0, [sp, #60]
  402350:	bl	400f50 <ioctl@plt>
  402354:	str	w0, [sp, #84]
  402358:	ldr	w0, [sp, #84]
  40235c:	cmp	w0, #0x0
  402360:	b.ge	4023e4 <setup_remaining_vcs+0x154>  // b.tcont
  402364:	mov	w0, #0x4                   	// #4
  402368:	str	w0, [sp, #124]
  40236c:	bl	400ed0 <__errno_location@plt>
  402370:	ldr	w0, [x0]
  402374:	str	w0, [sp, #128]
  402378:	str	wzr, [sp, #132]
  40237c:	ldr	w0, [sp, #132]
  402380:	bl	400ff0 <log_get_max_level_realm@plt>
  402384:	mov	w1, w0
  402388:	ldr	w0, [sp, #124]
  40238c:	and	w0, w0, #0x7
  402390:	cmp	w1, w0
  402394:	b.lt	4023d8 <setup_remaining_vcs+0x148>  // b.tstop
  402398:	ldr	w0, [sp, #132]
  40239c:	lsl	w1, w0, #10
  4023a0:	ldr	w0, [sp, #124]
  4023a4:	orr	w6, w1, w0
  4023a8:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4023ac:	add	x1, x0, #0x7e3
  4023b0:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4023b4:	add	x5, x0, #0x9e0
  4023b8:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4023bc:	add	x4, x0, #0xfd8
  4023c0:	mov	w3, #0xf0                  	// #240
  4023c4:	mov	x2, x1
  4023c8:	ldr	w1, [sp, #128]
  4023cc:	mov	w0, w6
  4023d0:	bl	400f30 <log_internal_realm@plt>
  4023d4:	b	402650 <setup_remaining_vcs+0x3c0>
  4023d8:	ldr	w0, [sp, #128]
  4023dc:	cmp	w0, #0x0
  4023e0:	b	402650 <setup_remaining_vcs+0x3c0>
  4023e4:	ldr	w0, [sp, #272]
  4023e8:	cmp	w0, #0x20
  4023ec:	b.hi	402408 <setup_remaining_vcs+0x178>  // b.pmore
  4023f0:	ldr	w0, [sp, #276]
  4023f4:	cmp	w0, #0x20
  4023f8:	b.hi	402408 <setup_remaining_vcs+0x178>  // b.pmore
  4023fc:	ldr	w0, [sp, #280]
  402400:	cmp	w0, #0x200
  402404:	b.ls	402498 <setup_remaining_vcs+0x208>  // b.plast
  402408:	mov	w0, #0x4                   	// #4
  40240c:	str	w0, [sp, #112]
  402410:	str	wzr, [sp, #116]
  402414:	str	wzr, [sp, #120]
  402418:	ldr	w0, [sp, #120]
  40241c:	bl	400ff0 <log_get_max_level_realm@plt>
  402420:	mov	w1, w0
  402424:	ldr	w0, [sp, #112]
  402428:	and	w0, w0, #0x7
  40242c:	cmp	w1, w0
  402430:	b.lt	40248c <setup_remaining_vcs+0x1fc>  // b.tstop
  402434:	ldr	w0, [sp, #120]
  402438:	lsl	w1, w0, #10
  40243c:	ldr	w0, [sp, #112]
  402440:	orr	w8, w1, w0
  402444:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402448:	add	x1, x0, #0x7e3
  40244c:	ldr	w2, [sp, #272]
  402450:	ldr	w3, [sp, #276]
  402454:	ldr	w0, [sp, #280]
  402458:	str	w0, [sp]
  40245c:	mov	w7, w3
  402460:	mov	w6, w2
  402464:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402468:	add	x5, x0, #0xa20
  40246c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402470:	add	x4, x0, #0xfd8
  402474:	mov	w3, #0xf4                  	// #244
  402478:	mov	x2, x1
  40247c:	ldr	w1, [sp, #116]
  402480:	mov	w0, w8
  402484:	bl	400f30 <log_internal_realm@plt>
  402488:	b	402650 <setup_remaining_vcs+0x3c0>
  40248c:	ldr	w0, [sp, #116]
  402490:	cmp	w0, #0x0
  402494:	b	402650 <setup_remaining_vcs+0x3c0>
  402498:	ldr	w0, [sp, #272]
  40249c:	add	w0, w0, #0x7
  4024a0:	lsr	w0, w0, #3
  4024a4:	lsl	w0, w0, #5
  4024a8:	mov	w0, w0
  4024ac:	ldr	w1, [sp, #280]
  4024b0:	mov	w1, w1
  4024b4:	bl	401268 <malloc_multiply>
  4024b8:	str	x0, [sp, #240]
  4024bc:	ldr	x0, [sp, #240]
  4024c0:	cmp	x0, #0x0
  4024c4:	b.ne	4024ec <setup_remaining_vcs+0x25c>  // b.any
  4024c8:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4024cc:	add	x1, x0, #0x7e3
  4024d0:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4024d4:	add	x3, x0, #0xfd8
  4024d8:	mov	w2, #0xff                  	// #255
  4024dc:	mov	w0, #0x0                   	// #0
  4024e0:	bl	400fe0 <log_oom_internal@plt>
  4024e4:	mov	w19, #0x0                   	// #0
  4024e8:	b	402ba0 <setup_remaining_vcs+0x910>
  4024ec:	ldr	x0, [sp, #240]
  4024f0:	str	x0, [sp, #288]
  4024f4:	add	x0, sp, #0x108
  4024f8:	mov	x2, x0
  4024fc:	mov	x1, #0x4b72                	// #19314
  402500:	ldr	w0, [sp, #60]
  402504:	bl	400f50 <ioctl@plt>
  402508:	str	w0, [sp, #84]
  40250c:	ldr	w0, [sp, #84]
  402510:	cmp	w0, #0x0
  402514:	b.ge	402598 <setup_remaining_vcs+0x308>  // b.tcont
  402518:	mov	w0, #0x4                   	// #4
  40251c:	str	w0, [sp, #100]
  402520:	bl	400ed0 <__errno_location@plt>
  402524:	ldr	w0, [x0]
  402528:	str	w0, [sp, #104]
  40252c:	str	wzr, [sp, #108]
  402530:	ldr	w0, [sp, #108]
  402534:	bl	400ff0 <log_get_max_level_realm@plt>
  402538:	mov	w1, w0
  40253c:	ldr	w0, [sp, #100]
  402540:	and	w0, w0, #0x7
  402544:	cmp	w1, w0
  402548:	b.lt	40258c <setup_remaining_vcs+0x2fc>  // b.tstop
  40254c:	ldr	w0, [sp, #108]
  402550:	lsl	w1, w0, #10
  402554:	ldr	w0, [sp, #100]
  402558:	orr	w6, w1, w0
  40255c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402560:	add	x1, x0, #0x7e3
  402564:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402568:	add	x5, x0, #0xa78
  40256c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402570:	add	x4, x0, #0xfd8
  402574:	mov	w3, #0x106                 	// #262
  402578:	mov	x2, x1
  40257c:	ldr	w1, [sp, #104]
  402580:	mov	w0, w6
  402584:	bl	400f30 <log_internal_realm@plt>
  402588:	b	402650 <setup_remaining_vcs+0x3c0>
  40258c:	ldr	w0, [sp, #104]
  402590:	cmp	w0, #0x0
  402594:	b	402650 <setup_remaining_vcs+0x3c0>
  402598:	ldr	x0, [sp, #232]
  40259c:	str	x0, [sp, #256]
  4025a0:	mov	w0, #0xffffffff            	// #-1
  4025a4:	strh	w0, [sp, #248]
  4025a8:	add	x0, sp, #0xf8
  4025ac:	mov	x2, x0
  4025b0:	mov	x1, #0x4b66                	// #19302
  4025b4:	ldr	w0, [sp, #60]
  4025b8:	bl	400f50 <ioctl@plt>
  4025bc:	str	w0, [sp, #84]
  4025c0:	ldr	w0, [sp, #84]
  4025c4:	cmp	w0, #0x0
  4025c8:	b.ge	40264c <setup_remaining_vcs+0x3bc>  // b.tcont
  4025cc:	mov	w0, #0x4                   	// #4
  4025d0:	str	w0, [sp, #88]
  4025d4:	bl	400ed0 <__errno_location@plt>
  4025d8:	ldr	w0, [x0]
  4025dc:	str	w0, [sp, #92]
  4025e0:	str	wzr, [sp, #96]
  4025e4:	ldr	w0, [sp, #96]
  4025e8:	bl	400ff0 <log_get_max_level_realm@plt>
  4025ec:	mov	w1, w0
  4025f0:	ldr	w0, [sp, #88]
  4025f4:	and	w0, w0, #0x7
  4025f8:	cmp	w1, w0
  4025fc:	b.lt	402640 <setup_remaining_vcs+0x3b0>  // b.tstop
  402600:	ldr	w0, [sp, #96]
  402604:	lsl	w1, w0, #10
  402608:	ldr	w0, [sp, #88]
  40260c:	orr	w6, w1, w0
  402610:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402614:	add	x1, x0, #0x7e3
  402618:	adrp	x0, 403000 <verify_source_vc+0x18c>
  40261c:	add	x5, x0, #0xab8
  402620:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402624:	add	x4, x0, #0xfd8
  402628:	mov	w3, #0x10c                 	// #268
  40262c:	mov	x2, x1
  402630:	ldr	w1, [sp, #92]
  402634:	mov	w0, w6
  402638:	bl	400f30 <log_internal_realm@plt>
  40263c:	b	402650 <setup_remaining_vcs+0x3c0>
  402640:	ldr	w0, [sp, #92]
  402644:	cmp	w0, #0x0
  402648:	b	402650 <setup_remaining_vcs+0x3c0>
  40264c:	str	wzr, [sp, #264]
  402650:	ldr	w0, [sp, #264]
  402654:	cmp	w0, #0x0
  402658:	b.eq	4026d0 <setup_remaining_vcs+0x440>  // b.none
  40265c:	mov	w0, #0x4                   	// #4
  402660:	str	w0, [sp, #136]
  402664:	str	wzr, [sp, #140]
  402668:	str	wzr, [sp, #144]
  40266c:	ldr	w0, [sp, #144]
  402670:	bl	400ff0 <log_get_max_level_realm@plt>
  402674:	mov	w1, w0
  402678:	ldr	w0, [sp, #136]
  40267c:	and	w0, w0, #0x7
  402680:	cmp	w1, w0
  402684:	b.lt	4026c8 <setup_remaining_vcs+0x438>  // b.tstop
  402688:	ldr	w0, [sp, #144]
  40268c:	lsl	w1, w0, #10
  402690:	ldr	w0, [sp, #136]
  402694:	orr	w6, w1, w0
  402698:	adrp	x0, 403000 <verify_source_vc+0x18c>
  40269c:	add	x1, x0, #0x7e3
  4026a0:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4026a4:	add	x5, x0, #0xaf8
  4026a8:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4026ac:	add	x4, x0, #0xfd8
  4026b0:	mov	w3, #0x114                 	// #276
  4026b4:	mov	x2, x1
  4026b8:	ldr	w1, [sp, #140]
  4026bc:	mov	w0, w6
  4026c0:	bl	400f30 <log_internal_realm@plt>
  4026c4:	b	4026d0 <setup_remaining_vcs+0x440>
  4026c8:	ldr	w0, [sp, #140]
  4026cc:	cmp	w0, #0x0
  4026d0:	mov	w0, #0x1                   	// #1
  4026d4:	str	w0, [sp, #80]
  4026d8:	b	402b90 <setup_remaining_vcs+0x900>
  4026dc:	mov	w0, #0xffffffff            	// #-1
  4026e0:	str	w0, [sp, #72]
  4026e4:	ldr	w1, [sp, #80]
  4026e8:	ldr	w0, [sp, #56]
  4026ec:	cmp	w1, w0
  4026f0:	b.eq	402704 <setup_remaining_vcs+0x474>  // b.none
  4026f4:	ldr	w0, [sp, #80]
  4026f8:	bl	4014c0 <verify_vc_allocation>
  4026fc:	cmp	w0, #0x0
  402700:	b.ge	40270c <setup_remaining_vcs+0x47c>  // b.tcont
  402704:	mov	w19, #0x0                   	// #0
  402708:	b	402b78 <setup_remaining_vcs+0x8e8>
  40270c:	add	x4, sp, #0x128
  402710:	ldr	w3, [sp, #80]
  402714:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402718:	add	x2, x0, #0xb28
  40271c:	mov	x1, #0xb                   	// #11
  402720:	mov	x0, x4
  402724:	bl	400e40 <snprintf@plt>
  402728:	cmp	w0, #0xa
  40272c:	cset	w0, hi  // hi = pmore
  402730:	and	w0, w0, #0xff
  402734:	and	x0, x0, #0xff
  402738:	cmp	x0, #0x0
  40273c:	b.eq	402768 <setup_remaining_vcs+0x4d8>  // b.none
  402740:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402744:	add	x1, x0, #0x7e3
  402748:	adrp	x0, 403000 <verify_source_vc+0x18c>
  40274c:	add	x4, x0, #0xff0
  402750:	mov	w3, #0x11e                 	// #286
  402754:	mov	x2, x1
  402758:	adrp	x0, 403000 <verify_source_vc+0x18c>
  40275c:	add	x1, x0, #0xb38
  402760:	mov	w0, #0x0                   	// #0
  402764:	bl	400e70 <log_assert_failed_realm@plt>
  402768:	add	x0, sp, #0x128
  40276c:	mov	w1, #0x102                 	// #258
  402770:	movk	w1, #0x8, lsl #16
  402774:	bl	400f20 <open_terminal@plt>
  402778:	str	w0, [sp, #72]
  40277c:	ldr	w0, [sp, #72]
  402780:	cmp	w0, #0x0
  402784:	b.ge	40280c <setup_remaining_vcs+0x57c>  // b.tcont
  402788:	mov	w0, #0x4                   	// #4
  40278c:	str	w0, [sp, #212]
  402790:	ldr	w0, [sp, #72]
  402794:	str	w0, [sp, #216]
  402798:	str	wzr, [sp, #220]
  40279c:	ldr	w0, [sp, #220]
  4027a0:	bl	400ff0 <log_get_max_level_realm@plt>
  4027a4:	mov	w1, w0
  4027a8:	ldr	w0, [sp, #212]
  4027ac:	and	w0, w0, #0x7
  4027b0:	cmp	w1, w0
  4027b4:	b.lt	4027fc <setup_remaining_vcs+0x56c>  // b.tstop
  4027b8:	ldr	w0, [sp, #220]
  4027bc:	lsl	w1, w0, #10
  4027c0:	ldr	w0, [sp, #212]
  4027c4:	orr	w7, w1, w0
  4027c8:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4027cc:	add	x1, x0, #0x7e3
  4027d0:	ldr	w6, [sp, #80]
  4027d4:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4027d8:	add	x5, x0, #0xb60
  4027dc:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4027e0:	add	x4, x0, #0xfd8
  4027e4:	mov	w3, #0x121                 	// #289
  4027e8:	mov	x2, x1
  4027ec:	ldr	w1, [sp, #216]
  4027f0:	mov	w0, w7
  4027f4:	bl	400f30 <log_internal_realm@plt>
  4027f8:	b	402804 <setup_remaining_vcs+0x574>
  4027fc:	ldr	w0, [sp, #216]
  402800:	cmp	w0, #0x0
  402804:	mov	w19, #0x0                   	// #0
  402808:	b	402b78 <setup_remaining_vcs+0x8e8>
  40280c:	ldr	w0, [sp, #72]
  402810:	bl	401620 <verify_vc_kbmode>
  402814:	cmp	w0, #0x0
  402818:	b.ge	402824 <setup_remaining_vcs+0x594>  // b.tcont
  40281c:	mov	w19, #0x0                   	// #0
  402820:	b	402b78 <setup_remaining_vcs+0x8e8>
  402824:	ldr	w1, [sp, #72]
  402828:	add	x0, sp, #0x128
  40282c:	ldrb	w2, [sp, #55]
  402830:	bl	4016d8 <toggle_utf8_vc>
  402834:	ldr	w0, [sp, #264]
  402838:	cmp	w0, #0x0
  40283c:	b.eq	402848 <setup_remaining_vcs+0x5b8>  // b.none
  402840:	mov	w19, #0x0                   	// #0
  402844:	b	402b78 <setup_remaining_vcs+0x8e8>
  402848:	ldr	w0, [sp, #72]
  40284c:	add	x1, sp, #0x108
  402850:	mov	x2, x1
  402854:	mov	x1, #0x4b72                	// #19314
  402858:	bl	400f50 <ioctl@plt>
  40285c:	str	w0, [sp, #84]
  402860:	ldr	w0, [sp, #84]
  402864:	cmp	w0, #0x0
  402868:	b.ge	4029a0 <setup_remaining_vcs+0x710>  // b.tcont
  40286c:	bl	400ed0 <__errno_location@plt>
  402870:	ldr	w0, [x0]
  402874:	str	w0, [sp, #184]
  402878:	ldr	w0, [sp, #72]
  40287c:	add	x1, sp, #0x4c
  402880:	mov	x2, x1
  402884:	mov	x1, #0x4b3b                	// #19259
  402888:	bl	400f50 <ioctl@plt>
  40288c:	cmp	w0, #0x0
  402890:	b.lt	40291c <setup_remaining_vcs+0x68c>  // b.tstop
  402894:	ldr	w0, [sp, #76]
  402898:	cmp	w0, #0x0
  40289c:	b.eq	40291c <setup_remaining_vcs+0x68c>  // b.none
  4028a0:	mov	w0, #0x7                   	// #7
  4028a4:	str	w0, [sp, #188]
  4028a8:	str	wzr, [sp, #192]
  4028ac:	str	wzr, [sp, #196]
  4028b0:	ldr	w0, [sp, #196]
  4028b4:	bl	400ff0 <log_get_max_level_realm@plt>
  4028b8:	mov	w1, w0
  4028bc:	ldr	w0, [sp, #188]
  4028c0:	and	w0, w0, #0x7
  4028c4:	cmp	w1, w0
  4028c8:	b.lt	402910 <setup_remaining_vcs+0x680>  // b.tstop
  4028cc:	ldr	w0, [sp, #196]
  4028d0:	lsl	w1, w0, #10
  4028d4:	ldr	w0, [sp, #188]
  4028d8:	orr	w7, w1, w0
  4028dc:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4028e0:	add	x1, x0, #0x7e3
  4028e4:	ldr	w6, [sp, #80]
  4028e8:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4028ec:	add	x5, x0, #0xb98
  4028f0:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4028f4:	add	x4, x0, #0xfd8
  4028f8:	mov	w3, #0x13b                 	// #315
  4028fc:	mov	x2, x1
  402900:	ldr	w1, [sp, #192]
  402904:	mov	w0, w7
  402908:	bl	400f30 <log_internal_realm@plt>
  40290c:	b	402998 <setup_remaining_vcs+0x708>
  402910:	ldr	w0, [sp, #192]
  402914:	cmp	w0, #0x0
  402918:	b	402998 <setup_remaining_vcs+0x708>
  40291c:	mov	w0, #0x4                   	// #4
  402920:	str	w0, [sp, #200]
  402924:	ldr	w0, [sp, #184]
  402928:	str	w0, [sp, #204]
  40292c:	str	wzr, [sp, #208]
  402930:	ldr	w0, [sp, #208]
  402934:	bl	400ff0 <log_get_max_level_realm@plt>
  402938:	mov	w1, w0
  40293c:	ldr	w0, [sp, #200]
  402940:	and	w0, w0, #0x7
  402944:	cmp	w1, w0
  402948:	b.lt	402990 <setup_remaining_vcs+0x700>  // b.tstop
  40294c:	ldr	w0, [sp, #208]
  402950:	lsl	w1, w0, #10
  402954:	ldr	w0, [sp, #200]
  402958:	orr	w7, w1, w0
  40295c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402960:	add	x1, x0, #0x7e3
  402964:	ldr	w6, [sp, #80]
  402968:	adrp	x0, 403000 <verify_source_vc+0x18c>
  40296c:	add	x5, x0, #0xbd0
  402970:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402974:	add	x4, x0, #0xfd8
  402978:	mov	w3, #0x13d                 	// #317
  40297c:	mov	x2, x1
  402980:	ldr	w1, [sp, #204]
  402984:	mov	w0, w7
  402988:	bl	400f30 <log_internal_realm@plt>
  40298c:	b	402998 <setup_remaining_vcs+0x708>
  402990:	ldr	w0, [sp, #204]
  402994:	cmp	w0, #0x0
  402998:	mov	w19, #0x0                   	// #0
  40299c:	b	402b78 <setup_remaining_vcs+0x8e8>
  4029a0:	ldr	w0, [sp, #72]
  4029a4:	add	x1, sp, #0xe0
  4029a8:	mov	x2, x1
  4029ac:	mov	x1, #0x4b68                	// #19304
  4029b0:	bl	400f50 <ioctl@plt>
  4029b4:	str	w0, [sp, #84]
  4029b8:	ldr	w0, [sp, #84]
  4029bc:	cmp	w0, #0x0
  4029c0:	b.ge	402a4c <setup_remaining_vcs+0x7bc>  // b.tcont
  4029c4:	mov	w0, #0x4                   	// #4
  4029c8:	str	w0, [sp, #172]
  4029cc:	bl	400ed0 <__errno_location@plt>
  4029d0:	ldr	w0, [x0]
  4029d4:	str	w0, [sp, #176]
  4029d8:	str	wzr, [sp, #180]
  4029dc:	ldr	w0, [sp, #180]
  4029e0:	bl	400ff0 <log_get_max_level_realm@plt>
  4029e4:	mov	w1, w0
  4029e8:	ldr	w0, [sp, #172]
  4029ec:	and	w0, w0, #0x7
  4029f0:	cmp	w1, w0
  4029f4:	b.lt	402a3c <setup_remaining_vcs+0x7ac>  // b.tstop
  4029f8:	ldr	w0, [sp, #180]
  4029fc:	lsl	w1, w0, #10
  402a00:	ldr	w0, [sp, #172]
  402a04:	orr	w7, w1, w0
  402a08:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402a0c:	add	x1, x0, #0x7e3
  402a10:	ldr	w6, [sp, #80]
  402a14:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402a18:	add	x5, x0, #0xc10
  402a1c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402a20:	add	x4, x0, #0xfd8
  402a24:	mov	w3, #0x148                 	// #328
  402a28:	mov	x2, x1
  402a2c:	ldr	w1, [sp, #176]
  402a30:	mov	w0, w7
  402a34:	bl	400f30 <log_internal_realm@plt>
  402a38:	b	402a44 <setup_remaining_vcs+0x7b4>
  402a3c:	ldr	w0, [sp, #176]
  402a40:	cmp	w0, #0x0
  402a44:	mov	w19, #0x0                   	// #0
  402a48:	b	402b78 <setup_remaining_vcs+0x8e8>
  402a4c:	ldr	w0, [sp, #72]
  402a50:	add	x1, sp, #0xf8
  402a54:	mov	x2, x1
  402a58:	mov	x1, #0x4b67                	// #19303
  402a5c:	bl	400f50 <ioctl@plt>
  402a60:	str	w0, [sp, #84]
  402a64:	ldr	w0, [sp, #84]
  402a68:	cmp	w0, #0x0
  402a6c:	b.ge	402af8 <setup_remaining_vcs+0x868>  // b.tcont
  402a70:	mov	w0, #0x4                   	// #4
  402a74:	str	w0, [sp, #160]
  402a78:	bl	400ed0 <__errno_location@plt>
  402a7c:	ldr	w0, [x0]
  402a80:	str	w0, [sp, #164]
  402a84:	str	wzr, [sp, #168]
  402a88:	ldr	w0, [sp, #168]
  402a8c:	bl	400ff0 <log_get_max_level_realm@plt>
  402a90:	mov	w1, w0
  402a94:	ldr	w0, [sp, #160]
  402a98:	and	w0, w0, #0x7
  402a9c:	cmp	w1, w0
  402aa0:	b.lt	402ae8 <setup_remaining_vcs+0x858>  // b.tstop
  402aa4:	ldr	w0, [sp, #168]
  402aa8:	lsl	w1, w0, #10
  402aac:	ldr	w0, [sp, #160]
  402ab0:	orr	w7, w1, w0
  402ab4:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402ab8:	add	x1, x0, #0x7e3
  402abc:	ldr	w6, [sp, #80]
  402ac0:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402ac4:	add	x5, x0, #0xc50
  402ac8:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402acc:	add	x4, x0, #0xfd8
  402ad0:	mov	w3, #0x14e                 	// #334
  402ad4:	mov	x2, x1
  402ad8:	ldr	w1, [sp, #164]
  402adc:	mov	w0, w7
  402ae0:	bl	400f30 <log_internal_realm@plt>
  402ae4:	b	402af0 <setup_remaining_vcs+0x860>
  402ae8:	ldr	w0, [sp, #164]
  402aec:	cmp	w0, #0x0
  402af0:	mov	w19, #0x0                   	// #0
  402af4:	b	402b78 <setup_remaining_vcs+0x8e8>
  402af8:	mov	w0, #0x7                   	// #7
  402afc:	str	w0, [sp, #148]
  402b00:	str	wzr, [sp, #152]
  402b04:	str	wzr, [sp, #156]
  402b08:	ldr	w0, [sp, #156]
  402b0c:	bl	400ff0 <log_get_max_level_realm@plt>
  402b10:	mov	w1, w0
  402b14:	ldr	w0, [sp, #148]
  402b18:	and	w0, w0, #0x7
  402b1c:	cmp	w1, w0
  402b20:	b.lt	402b6c <setup_remaining_vcs+0x8dc>  // b.tstop
  402b24:	ldr	w0, [sp, #156]
  402b28:	lsl	w1, w0, #10
  402b2c:	ldr	w0, [sp, #148]
  402b30:	orr	w7, w1, w0
  402b34:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402b38:	add	x1, x0, #0x7e3
  402b3c:	add	x0, sp, #0x128
  402b40:	mov	x6, x0
  402b44:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402b48:	add	x5, x0, #0xc90
  402b4c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402b50:	add	x4, x0, #0xfd8
  402b54:	mov	w3, #0x152                 	// #338
  402b58:	mov	x2, x1
  402b5c:	ldr	w1, [sp, #152]
  402b60:	mov	w0, w7
  402b64:	bl	400f30 <log_internal_realm@plt>
  402b68:	b	402b74 <setup_remaining_vcs+0x8e4>
  402b6c:	ldr	w0, [sp, #152]
  402b70:	cmp	w0, #0x0
  402b74:	mov	w19, #0x1                   	// #1
  402b78:	add	x0, sp, #0x48
  402b7c:	bl	4012bc <closep>
  402b80:	cmp	w19, #0x1
  402b84:	ldr	w0, [sp, #80]
  402b88:	add	w0, w0, #0x1
  402b8c:	str	w0, [sp, #80]
  402b90:	ldr	w0, [sp, #80]
  402b94:	cmp	w0, #0x3f
  402b98:	b.ls	4026dc <setup_remaining_vcs+0x44c>  // b.plast
  402b9c:	mov	w19, #0x1                   	// #1
  402ba0:	add	x0, sp, #0xf0
  402ba4:	bl	4011c8 <freep>
  402ba8:	cmp	w19, #0x1
  402bac:	b.eq	402bb8 <setup_remaining_vcs+0x928>  // b.none
  402bb0:	mov	w19, #0x0                   	// #0
  402bb4:	b	402bbc <setup_remaining_vcs+0x92c>
  402bb8:	mov	w19, #0x1                   	// #1
  402bbc:	add	x0, sp, #0xe8
  402bc0:	bl	4011c8 <freep>
  402bc4:	cmp	w19, #0x1
  402bc8:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  402bcc:	add	x0, x0, #0xca0
  402bd0:	ldr	x1, [sp, #312]
  402bd4:	ldr	x0, [x0]
  402bd8:	eor	x0, x1, x0
  402bdc:	cmp	x0, #0x0
  402be0:	b.eq	402be8 <setup_remaining_vcs+0x958>  // b.none
  402be4:	bl	400f00 <__stack_chk_fail@plt>
  402be8:	ldr	x19, [sp, #32]
  402bec:	ldp	x29, x30, [sp, #16]
  402bf0:	add	sp, sp, #0x140
  402bf4:	ret

0000000000402bf8 <find_source_vc>:
  402bf8:	stp	x29, x30, [sp, #-112]!
  402bfc:	mov	x29, sp
  402c00:	stp	x19, x20, [sp, #16]
  402c04:	str	x0, [sp, #40]
  402c08:	str	x1, [sp, #32]
  402c0c:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  402c10:	add	x0, x0, #0xca0
  402c14:	ldr	x1, [x0]
  402c18:	str	x1, [sp, #104]
  402c1c:	mov	x1, #0x0                   	// #0
  402c20:	str	xzr, [sp, #88]
  402c24:	str	wzr, [sp, #60]
  402c28:	mov	x1, #0xb                   	// #11
  402c2c:	mov	x0, #0x1                   	// #1
  402c30:	bl	401268 <malloc_multiply>
  402c34:	str	x0, [sp, #88]
  402c38:	ldr	x0, [sp, #88]
  402c3c:	cmp	x0, #0x0
  402c40:	b.ne	402c68 <find_source_vc+0x70>  // b.any
  402c44:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402c48:	add	x1, x0, #0x7e3
  402c4c:	adrp	x0, 404000 <__PRETTY_FUNCTION__.10001+0x10>
  402c50:	add	x3, x0, #0x8
  402c54:	mov	w2, #0x15d                 	// #349
  402c58:	mov	w0, #0x0                   	// #0
  402c5c:	bl	400fe0 <log_oom_internal@plt>
  402c60:	mov	w19, w0
  402c64:	b	402e38 <find_source_vc+0x240>
  402c68:	mov	w0, #0x1                   	// #1
  402c6c:	str	w0, [sp, #64]
  402c70:	b	402da0 <find_source_vc+0x1a8>
  402c74:	mov	w0, #0xffffffff            	// #-1
  402c78:	str	w0, [sp, #56]
  402c7c:	ldr	w0, [sp, #64]
  402c80:	bl	4014c0 <verify_vc_allocation>
  402c84:	str	w0, [sp, #80]
  402c88:	ldr	w0, [sp, #80]
  402c8c:	cmp	w0, #0x0
  402c90:	b.ge	402cb4 <find_source_vc+0xbc>  // b.tcont
  402c94:	ldr	w0, [sp, #60]
  402c98:	cmp	w0, #0x0
  402c9c:	b.ne	402cac <find_source_vc+0xb4>  // b.any
  402ca0:	ldr	w0, [sp, #80]
  402ca4:	neg	w0, w0
  402ca8:	str	w0, [sp, #60]
  402cac:	mov	w20, #0x0                   	// #0
  402cb0:	b	402d84 <find_source_vc+0x18c>
  402cb4:	ldr	x3, [sp, #88]
  402cb8:	ldr	w2, [sp, #64]
  402cbc:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402cc0:	add	x1, x0, #0xb28
  402cc4:	mov	x0, x3
  402cc8:	bl	400fd0 <sprintf@plt>
  402ccc:	ldr	x0, [sp, #88]
  402cd0:	mov	w1, #0x102                 	// #258
  402cd4:	movk	w1, #0x8, lsl #16
  402cd8:	bl	400f20 <open_terminal@plt>
  402cdc:	str	w0, [sp, #56]
  402ce0:	ldr	w0, [sp, #56]
  402ce4:	cmp	w0, #0x0
  402ce8:	b.ge	402d0c <find_source_vc+0x114>  // b.tcont
  402cec:	ldr	w0, [sp, #60]
  402cf0:	cmp	w0, #0x0
  402cf4:	b.ne	402d04 <find_source_vc+0x10c>  // b.any
  402cf8:	ldr	w0, [sp, #56]
  402cfc:	neg	w0, w0
  402d00:	str	w0, [sp, #60]
  402d04:	mov	w20, #0x0                   	// #0
  402d08:	b	402d84 <find_source_vc+0x18c>
  402d0c:	ldr	w0, [sp, #56]
  402d10:	bl	401620 <verify_vc_kbmode>
  402d14:	str	w0, [sp, #80]
  402d18:	ldr	w0, [sp, #80]
  402d1c:	cmp	w0, #0x0
  402d20:	b.ge	402d44 <find_source_vc+0x14c>  // b.tcont
  402d24:	ldr	w0, [sp, #60]
  402d28:	cmp	w0, #0x0
  402d2c:	b.ne	402d3c <find_source_vc+0x144>  // b.any
  402d30:	ldr	w0, [sp, #80]
  402d34:	neg	w0, w0
  402d38:	str	w0, [sp, #60]
  402d3c:	mov	w20, #0x0                   	// #0
  402d40:	b	402d84 <find_source_vc+0x18c>
  402d44:	ldr	x0, [sp, #32]
  402d48:	ldr	w1, [sp, #64]
  402d4c:	str	w1, [x0]
  402d50:	ldr	x0, [sp, #88]
  402d54:	str	x0, [sp, #96]
  402d58:	str	xzr, [sp, #88]
  402d5c:	ldr	x1, [sp, #96]
  402d60:	ldr	x0, [sp, #40]
  402d64:	str	x1, [x0]
  402d68:	ldr	w0, [sp, #56]
  402d6c:	str	w0, [sp, #84]
  402d70:	mov	w0, #0xffffffff            	// #-1
  402d74:	str	w0, [sp, #56]
  402d78:	ldr	w19, [sp, #84]
  402d7c:	mov	w20, #0x1                   	// #1
  402d80:	nop
  402d84:	add	x0, sp, #0x38
  402d88:	bl	4012bc <closep>
  402d8c:	cmp	w20, #0x0
  402d90:	b.ne	402e38 <find_source_vc+0x240>  // b.any
  402d94:	ldr	w0, [sp, #64]
  402d98:	add	w0, w0, #0x1
  402d9c:	str	w0, [sp, #64]
  402da0:	ldr	w0, [sp, #64]
  402da4:	cmp	w0, #0x3f
  402da8:	b.ls	402c74 <find_source_vc+0x7c>  // b.plast
  402dac:	mov	w0, #0x3                   	// #3
  402db0:	str	w0, [sp, #68]
  402db4:	ldr	w0, [sp, #60]
  402db8:	str	w0, [sp, #72]
  402dbc:	str	wzr, [sp, #76]
  402dc0:	ldr	w0, [sp, #76]
  402dc4:	bl	400ff0 <log_get_max_level_realm@plt>
  402dc8:	mov	w1, w0
  402dcc:	ldr	w0, [sp, #68]
  402dd0:	and	w0, w0, #0x7
  402dd4:	cmp	w1, w0
  402dd8:	b.lt	402e20 <find_source_vc+0x228>  // b.tstop
  402ddc:	ldr	w0, [sp, #76]
  402de0:	lsl	w1, w0, #10
  402de4:	ldr	w0, [sp, #68]
  402de8:	orr	w6, w1, w0
  402dec:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402df0:	add	x1, x0, #0x7e3
  402df4:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402df8:	add	x5, x0, #0xcc0
  402dfc:	adrp	x0, 404000 <__PRETTY_FUNCTION__.10001+0x10>
  402e00:	add	x4, x0, #0x8
  402e04:	mov	w3, #0x17d                 	// #381
  402e08:	mov	x2, x1
  402e0c:	ldr	w1, [sp, #72]
  402e10:	mov	w0, w6
  402e14:	bl	400f30 <log_internal_realm@plt>
  402e18:	mov	w19, w0
  402e1c:	b	402e34 <find_source_vc+0x23c>
  402e20:	ldr	w0, [sp, #72]
  402e24:	cmp	w0, #0x0
  402e28:	cneg	w0, w0, lt  // lt = tstop
  402e2c:	and	w0, w0, #0xff
  402e30:	neg	w19, w0
  402e34:	nop
  402e38:	add	x0, sp, #0x58
  402e3c:	bl	4011c8 <freep>
  402e40:	mov	w1, w19
  402e44:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  402e48:	add	x0, x0, #0xca0
  402e4c:	ldr	x2, [sp, #104]
  402e50:	ldr	x0, [x0]
  402e54:	eor	x0, x2, x0
  402e58:	cmp	x0, #0x0
  402e5c:	b.eq	402e64 <find_source_vc+0x26c>  // b.none
  402e60:	bl	400f00 <__stack_chk_fail@plt>
  402e64:	mov	w0, w1
  402e68:	ldp	x19, x20, [sp, #16]
  402e6c:	ldp	x29, x30, [sp], #112
  402e70:	ret

0000000000402e74 <verify_source_vc>:
  402e74:	stp	x29, x30, [sp, #-128]!
  402e78:	mov	x29, sp
  402e7c:	str	x19, [sp, #16]
  402e80:	str	x0, [sp, #40]
  402e84:	str	x1, [sp, #32]
  402e88:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  402e8c:	add	x0, x0, #0xca0
  402e90:	ldr	x1, [x0]
  402e94:	str	x1, [sp, #120]
  402e98:	mov	x1, #0x0                   	// #0
  402e9c:	mov	w0, #0xffffffff            	// #-1
  402ea0:	str	w0, [sp, #52]
  402ea4:	mov	w1, #0x102                 	// #258
  402ea8:	movk	w1, #0x8, lsl #16
  402eac:	ldr	x0, [sp, #32]
  402eb0:	bl	400f20 <open_terminal@plt>
  402eb4:	str	w0, [sp, #52]
  402eb8:	ldr	w0, [sp, #52]
  402ebc:	cmp	w0, #0x0
  402ec0:	b.ge	402f54 <verify_source_vc+0xe0>  // b.tcont
  402ec4:	mov	w0, #0x3                   	// #3
  402ec8:	str	w0, [sp, #100]
  402ecc:	ldr	w0, [sp, #52]
  402ed0:	str	w0, [sp, #104]
  402ed4:	str	wzr, [sp, #108]
  402ed8:	ldr	w0, [sp, #108]
  402edc:	bl	400ff0 <log_get_max_level_realm@plt>
  402ee0:	mov	w1, w0
  402ee4:	ldr	w0, [sp, #100]
  402ee8:	and	w0, w0, #0x7
  402eec:	cmp	w1, w0
  402ef0:	b.lt	402f3c <verify_source_vc+0xc8>  // b.tstop
  402ef4:	ldr	w0, [sp, #108]
  402ef8:	lsl	w1, w0, #10
  402efc:	ldr	w0, [sp, #100]
  402f00:	orr	w7, w1, w0
  402f04:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402f08:	add	x1, x0, #0x7e3
  402f0c:	ldr	x6, [sp, #32]
  402f10:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402f14:	add	x5, x0, #0xce8
  402f18:	adrp	x0, 404000 <__PRETTY_FUNCTION__.10001+0x10>
  402f1c:	add	x4, x0, #0x18
  402f20:	mov	w3, #0x187                 	// #391
  402f24:	mov	x2, x1
  402f28:	ldr	w1, [sp, #104]
  402f2c:	mov	w0, w7
  402f30:	bl	400f30 <log_internal_realm@plt>
  402f34:	mov	w19, w0
  402f38:	b	4031ac <verify_source_vc+0x338>
  402f3c:	ldr	w0, [sp, #104]
  402f40:	cmp	w0, #0x0
  402f44:	cneg	w0, w0, lt  // lt = tstop
  402f48:	and	w0, w0, #0xff
  402f4c:	neg	w19, w0
  402f50:	b	4031ac <verify_source_vc+0x338>
  402f54:	ldr	w0, [sp, #52]
  402f58:	bl	401430 <verify_vc_device>
  402f5c:	str	w0, [sp, #56]
  402f60:	ldr	w0, [sp, #56]
  402f64:	cmp	w0, #0x0
  402f68:	b.ge	402ffc <verify_source_vc+0x188>  // b.tcont
  402f6c:	mov	w0, #0x3                   	// #3
  402f70:	str	w0, [sp, #88]
  402f74:	ldr	w0, [sp, #56]
  402f78:	str	w0, [sp, #92]
  402f7c:	str	wzr, [sp, #96]
  402f80:	ldr	w0, [sp, #96]
  402f84:	bl	400ff0 <log_get_max_level_realm@plt>
  402f88:	mov	w1, w0
  402f8c:	ldr	w0, [sp, #88]
  402f90:	and	w0, w0, #0x7
  402f94:	cmp	w1, w0
  402f98:	b.lt	402fe4 <verify_source_vc+0x170>  // b.tstop
  402f9c:	ldr	w0, [sp, #96]
  402fa0:	lsl	w1, w0, #10
  402fa4:	ldr	w0, [sp, #88]
  402fa8:	orr	w7, w1, w0
  402fac:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402fb0:	add	x1, x0, #0x7e3
  402fb4:	ldr	x6, [sp, #32]
  402fb8:	adrp	x0, 403000 <verify_source_vc+0x18c>
  402fbc:	add	x5, x0, #0xd00
  402fc0:	adrp	x0, 404000 <__PRETTY_FUNCTION__.10001+0x10>
  402fc4:	add	x4, x0, #0x18
  402fc8:	mov	w3, #0x18b                 	// #395
  402fcc:	mov	x2, x1
  402fd0:	ldr	w1, [sp, #92]
  402fd4:	mov	w0, w7
  402fd8:	bl	400f30 <log_internal_realm@plt>
  402fdc:	mov	w19, w0
  402fe0:	b	4031ac <verify_source_vc+0x338>
  402fe4:	ldr	w0, [sp, #92]
  402fe8:	cmp	w0, #0x0
  402fec:	cneg	w0, w0, lt  // lt = tstop
  402ff0:	and	w0, w0, #0xff
  402ff4:	neg	w19, w0
  402ff8:	b	4031ac <verify_source_vc+0x338>
  402ffc:	ldr	w0, [sp, #52]
  403000:	bl	401594 <verify_vc_allocation_byfd>
  403004:	str	w0, [sp, #56]
  403008:	ldr	w0, [sp, #56]
  40300c:	cmp	w0, #0x0
  403010:	b.ge	4030a4 <verify_source_vc+0x230>  // b.tcont
  403014:	mov	w0, #0x3                   	// #3
  403018:	str	w0, [sp, #76]
  40301c:	ldr	w0, [sp, #56]
  403020:	str	w0, [sp, #80]
  403024:	str	wzr, [sp, #84]
  403028:	ldr	w0, [sp, #84]
  40302c:	bl	400ff0 <log_get_max_level_realm@plt>
  403030:	mov	w1, w0
  403034:	ldr	w0, [sp, #76]
  403038:	and	w0, w0, #0x7
  40303c:	cmp	w1, w0
  403040:	b.lt	40308c <verify_source_vc+0x218>  // b.tstop
  403044:	ldr	w0, [sp, #84]
  403048:	lsl	w1, w0, #10
  40304c:	ldr	w0, [sp, #76]
  403050:	orr	w7, w1, w0
  403054:	adrp	x0, 403000 <verify_source_vc+0x18c>
  403058:	add	x1, x0, #0x7e3
  40305c:	ldr	x6, [sp, #32]
  403060:	adrp	x0, 403000 <verify_source_vc+0x18c>
  403064:	add	x5, x0, #0xd28
  403068:	adrp	x0, 404000 <__PRETTY_FUNCTION__.10001+0x10>
  40306c:	add	x4, x0, #0x18
  403070:	mov	w3, #0x18f                 	// #399
  403074:	mov	x2, x1
  403078:	ldr	w1, [sp, #80]
  40307c:	mov	w0, w7
  403080:	bl	400f30 <log_internal_realm@plt>
  403084:	mov	w19, w0
  403088:	b	4031ac <verify_source_vc+0x338>
  40308c:	ldr	w0, [sp, #80]
  403090:	cmp	w0, #0x0
  403094:	cneg	w0, w0, lt  // lt = tstop
  403098:	and	w0, w0, #0xff
  40309c:	neg	w19, w0
  4030a0:	b	4031ac <verify_source_vc+0x338>
  4030a4:	ldr	w0, [sp, #52]
  4030a8:	bl	401620 <verify_vc_kbmode>
  4030ac:	str	w0, [sp, #56]
  4030b0:	ldr	w0, [sp, #56]
  4030b4:	cmp	w0, #0x0
  4030b8:	b.ge	40314c <verify_source_vc+0x2d8>  // b.tcont
  4030bc:	mov	w0, #0x3                   	// #3
  4030c0:	str	w0, [sp, #64]
  4030c4:	ldr	w0, [sp, #56]
  4030c8:	str	w0, [sp, #68]
  4030cc:	str	wzr, [sp, #72]
  4030d0:	ldr	w0, [sp, #72]
  4030d4:	bl	400ff0 <log_get_max_level_realm@plt>
  4030d8:	mov	w1, w0
  4030dc:	ldr	w0, [sp, #64]
  4030e0:	and	w0, w0, #0x7
  4030e4:	cmp	w1, w0
  4030e8:	b.lt	403134 <verify_source_vc+0x2c0>  // b.tstop
  4030ec:	ldr	w0, [sp, #72]
  4030f0:	lsl	w1, w0, #10
  4030f4:	ldr	w0, [sp, #64]
  4030f8:	orr	w7, w1, w0
  4030fc:	adrp	x0, 403000 <verify_source_vc+0x18c>
  403100:	add	x1, x0, #0x7e3
  403104:	ldr	x6, [sp, #32]
  403108:	adrp	x0, 403000 <verify_source_vc+0x18c>
  40310c:	add	x5, x0, #0xd50
  403110:	adrp	x0, 404000 <__PRETTY_FUNCTION__.10001+0x10>
  403114:	add	x4, x0, #0x18
  403118:	mov	w3, #0x193                 	// #403
  40311c:	mov	x2, x1
  403120:	ldr	w1, [sp, #68]
  403124:	mov	w0, w7
  403128:	bl	400f30 <log_internal_realm@plt>
  40312c:	mov	w19, w0
  403130:	b	4031ac <verify_source_vc+0x338>
  403134:	ldr	w0, [sp, #68]
  403138:	cmp	w0, #0x0
  40313c:	cneg	w0, w0, lt  // lt = tstop
  403140:	and	w0, w0, #0xff
  403144:	neg	w19, w0
  403148:	b	4031ac <verify_source_vc+0x338>
  40314c:	ldr	x0, [sp, #32]
  403150:	bl	400f70 <strdup@plt>
  403154:	str	x0, [sp, #112]
  403158:	ldr	x0, [sp, #112]
  40315c:	cmp	x0, #0x0
  403160:	b.ne	403188 <verify_source_vc+0x314>  // b.any
  403164:	adrp	x0, 403000 <verify_source_vc+0x18c>
  403168:	add	x1, x0, #0x7e3
  40316c:	adrp	x0, 404000 <__PRETTY_FUNCTION__.10001+0x10>
  403170:	add	x3, x0, #0x18
  403174:	mov	w2, #0x197                 	// #407
  403178:	mov	w0, #0x0                   	// #0
  40317c:	bl	400fe0 <log_oom_internal@plt>
  403180:	mov	w19, w0
  403184:	b	4031ac <verify_source_vc+0x338>
  403188:	ldr	x0, [sp, #40]
  40318c:	ldr	x1, [sp, #112]
  403190:	str	x1, [x0]
  403194:	ldr	w0, [sp, #52]
  403198:	str	w0, [sp, #60]
  40319c:	mov	w0, #0xffffffff            	// #-1
  4031a0:	str	w0, [sp, #52]
  4031a4:	ldr	w19, [sp, #60]
  4031a8:	nop
  4031ac:	add	x0, sp, #0x34
  4031b0:	bl	4012bc <closep>
  4031b4:	mov	w1, w19
  4031b8:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  4031bc:	add	x0, x0, #0xca0
  4031c0:	ldr	x2, [sp, #120]
  4031c4:	ldr	x0, [x0]
  4031c8:	eor	x0, x2, x0
  4031cc:	cmp	x0, #0x0
  4031d0:	b.eq	4031d8 <verify_source_vc+0x364>  // b.none
  4031d4:	bl	400f00 <__stack_chk_fail@plt>
  4031d8:	mov	w0, w1
  4031dc:	ldr	x19, [sp, #16]
  4031e0:	ldp	x29, x30, [sp], #128
  4031e4:	ret

00000000004031e8 <main>:
  4031e8:	sub	sp, sp, #0x100
  4031ec:	stp	x29, x30, [sp, #80]
  4031f0:	add	x29, sp, #0x50
  4031f4:	str	x19, [sp, #96]
  4031f8:	str	w0, [sp, #124]
  4031fc:	str	x1, [sp, #112]
  403200:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  403204:	add	x0, x0, #0xca0
  403208:	ldr	x1, [x0]
  40320c:	str	x1, [sp, #248]
  403210:	mov	x1, #0x0                   	// #0
  403214:	str	xzr, [sp, #200]
  403218:	str	xzr, [sp, #208]
  40321c:	str	xzr, [sp, #216]
  403220:	str	xzr, [sp, #224]
  403224:	str	xzr, [sp, #232]
  403228:	str	xzr, [sp, #240]
  40322c:	mov	w0, #0xffffffff            	// #-1
  403230:	str	w0, [sp, #140]
  403234:	str	wzr, [sp, #144]
  403238:	bl	400e50 <log_setup_service@plt>
  40323c:	mov	w0, #0x12                  	// #18
  403240:	bl	400e90 <umask@plt>
  403244:	ldr	x0, [sp, #112]
  403248:	add	x0, x0, #0x8
  40324c:	ldr	x0, [x0]
  403250:	cmp	x0, #0x0
  403254:	b.eq	403274 <main+0x8c>  // b.none
  403258:	ldr	x0, [sp, #112]
  40325c:	add	x0, x0, #0x8
  403260:	ldr	x1, [x0]
  403264:	add	x0, sp, #0xc8
  403268:	bl	402e74 <verify_source_vc>
  40326c:	str	w0, [sp, #140]
  403270:	b	403284 <main+0x9c>
  403274:	add	x1, sp, #0x90
  403278:	add	x0, sp, #0xc8
  40327c:	bl	402bf8 <find_source_vc>
  403280:	str	w0, [sp, #140]
  403284:	ldr	w0, [sp, #140]
  403288:	cmp	w0, #0x0
  40328c:	b.ge	403298 <main+0xb0>  // b.tcont
  403290:	mov	w19, #0x1                   	// #1
  403294:	b	403690 <main+0x4a8>
  403298:	bl	400fa0 <is_locale_utf8@plt>
  40329c:	strb	w0, [sp, #138]
  4032a0:	add	x3, sp, #0xe0
  4032a4:	add	x2, sp, #0xd8
  4032a8:	add	x1, sp, #0xd0
  4032ac:	str	xzr, [sp, #32]
  4032b0:	add	x0, sp, #0xf0
  4032b4:	str	x0, [sp, #24]
  4032b8:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4032bc:	add	x0, x0, #0xdc0
  4032c0:	str	x0, [sp, #16]
  4032c4:	add	x0, sp, #0xe8
  4032c8:	str	x0, [sp, #8]
  4032cc:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4032d0:	add	x0, x0, #0xdd0
  4032d4:	str	x0, [sp]
  4032d8:	mov	x7, x3
  4032dc:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4032e0:	add	x6, x0, #0xd88
  4032e4:	mov	x5, x2
  4032e8:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4032ec:	add	x4, x0, #0xd90
  4032f0:	mov	x3, x1
  4032f4:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4032f8:	add	x2, x0, #0xda0
  4032fc:	adrp	x0, 403000 <verify_source_vc+0x18c>
  403300:	add	x1, x0, #0xda8
  403304:	mov	x0, #0x0                   	// #0
  403308:	bl	400ef0 <parse_env_file_sentinel@plt>
  40330c:	str	w0, [sp, #148]
  403310:	ldr	w0, [sp, #148]
  403314:	cmp	w0, #0x0
  403318:	b.ge	4033a0 <main+0x1b8>  // b.tcont
  40331c:	ldr	w0, [sp, #148]
  403320:	cmn	w0, #0x2
  403324:	b.eq	4033a0 <main+0x1b8>  // b.none
  403328:	mov	w0, #0x4                   	// #4
  40332c:	str	w0, [sp, #152]
  403330:	ldr	w0, [sp, #148]
  403334:	str	w0, [sp, #156]
  403338:	str	wzr, [sp, #160]
  40333c:	ldr	w0, [sp, #160]
  403340:	bl	400ff0 <log_get_max_level_realm@plt>
  403344:	mov	w1, w0
  403348:	ldr	w0, [sp, #152]
  40334c:	and	w0, w0, #0x7
  403350:	cmp	w1, w0
  403354:	b.lt	403398 <main+0x1b0>  // b.tstop
  403358:	ldr	w0, [sp, #160]
  40335c:	lsl	w1, w0, #10
  403360:	ldr	w0, [sp, #152]
  403364:	orr	w6, w1, w0
  403368:	adrp	x0, 403000 <verify_source_vc+0x18c>
  40336c:	add	x1, x0, #0x7e3
  403370:	adrp	x0, 403000 <verify_source_vc+0x18c>
  403374:	add	x5, x0, #0xde0
  403378:	adrp	x0, 404000 <__PRETTY_FUNCTION__.10001+0x10>
  40337c:	add	x4, x0, #0x30
  403380:	mov	w3, #0x1bb                 	// #443
  403384:	mov	x2, x1
  403388:	ldr	w1, [sp, #156]
  40338c:	mov	w0, w6
  403390:	bl	400f30 <log_internal_realm@plt>
  403394:	b	4033a0 <main+0x1b8>
  403398:	ldr	w0, [sp, #156]
  40339c:	cmp	w0, #0x0
  4033a0:	add	x3, sp, #0xe0
  4033a4:	add	x2, sp, #0xd8
  4033a8:	add	x1, sp, #0xd0
  4033ac:	str	xzr, [sp, #72]
  4033b0:	add	x0, sp, #0xf0
  4033b4:	str	x0, [sp, #64]
  4033b8:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4033bc:	add	x0, x0, #0xe58
  4033c0:	str	x0, [sp, #56]
  4033c4:	add	x0, sp, #0xe8
  4033c8:	str	x0, [sp, #48]
  4033cc:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4033d0:	add	x0, x0, #0xe70
  4033d4:	str	x0, [sp, #40]
  4033d8:	add	x0, sp, #0xd8
  4033dc:	str	x0, [sp, #32]
  4033e0:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4033e4:	add	x0, x0, #0xe88
  4033e8:	str	x0, [sp, #24]
  4033ec:	add	x0, sp, #0xf0
  4033f0:	str	x0, [sp, #16]
  4033f4:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4033f8:	add	x0, x0, #0xea0
  4033fc:	str	x0, [sp, #8]
  403400:	add	x0, sp, #0xe8
  403404:	str	x0, [sp]
  403408:	adrp	x0, 403000 <verify_source_vc+0x18c>
  40340c:	add	x7, x0, #0xe08
  403410:	mov	x6, x3
  403414:	adrp	x0, 403000 <verify_source_vc+0x18c>
  403418:	add	x5, x0, #0xe20
  40341c:	mov	x4, x2
  403420:	adrp	x0, 403000 <verify_source_vc+0x18c>
  403424:	add	x3, x0, #0xe30
  403428:	mov	x2, x1
  40342c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  403430:	add	x1, x0, #0xe48
  403434:	mov	w0, #0x1                   	// #1
  403438:	bl	400ec0 <proc_cmdline_get_key_many_internal@plt>
  40343c:	str	w0, [sp, #148]
  403440:	ldr	w0, [sp, #148]
  403444:	cmp	w0, #0x0
  403448:	b.ge	4034d0 <main+0x2e8>  // b.tcont
  40344c:	ldr	w0, [sp, #148]
  403450:	cmn	w0, #0x2
  403454:	b.eq	4034d0 <main+0x2e8>  // b.none
  403458:	mov	w0, #0x4                   	// #4
  40345c:	str	w0, [sp, #164]
  403460:	ldr	w0, [sp, #148]
  403464:	str	w0, [sp, #168]
  403468:	str	wzr, [sp, #172]
  40346c:	ldr	w0, [sp, #172]
  403470:	bl	400ff0 <log_get_max_level_realm@plt>
  403474:	mov	w1, w0
  403478:	ldr	w0, [sp, #164]
  40347c:	and	w0, w0, #0x7
  403480:	cmp	w1, w0
  403484:	b.lt	4034c8 <main+0x2e0>  // b.tstop
  403488:	ldr	w0, [sp, #172]
  40348c:	lsl	w1, w0, #10
  403490:	ldr	w0, [sp, #164]
  403494:	orr	w6, w1, w0
  403498:	adrp	x0, 403000 <verify_source_vc+0x18c>
  40349c:	add	x1, x0, #0x7e3
  4034a0:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4034a4:	add	x5, x0, #0xeb8
  4034a8:	adrp	x0, 404000 <__PRETTY_FUNCTION__.10001+0x10>
  4034ac:	add	x4, x0, #0x30
  4034b0:	mov	w3, #0x1ca                 	// #458
  4034b4:	mov	x2, x1
  4034b8:	ldr	w1, [sp, #168]
  4034bc:	mov	w0, w6
  4034c0:	bl	400f30 <log_internal_realm@plt>
  4034c4:	b	4034d0 <main+0x2e8>
  4034c8:	ldr	w0, [sp, #168]
  4034cc:	cmp	w0, #0x0
  4034d0:	ldrb	w0, [sp, #138]
  4034d4:	bl	401b0c <toggle_utf8_sysfs>
  4034d8:	ldr	x0, [sp, #200]
  4034dc:	ldr	w1, [sp, #140]
  4034e0:	ldrb	w2, [sp, #138]
  4034e4:	bl	4016d8 <toggle_utf8_vc>
  4034e8:	ldr	x0, [sp, #200]
  4034ec:	ldr	x1, [sp, #224]
  4034f0:	ldr	x2, [sp, #232]
  4034f4:	ldr	x3, [sp, #240]
  4034f8:	bl	401f3c <font_load_and_wait>
  4034fc:	str	w0, [sp, #148]
  403500:	ldr	x0, [sp, #200]
  403504:	ldr	x1, [sp, #208]
  403508:	ldr	x2, [sp, #216]
  40350c:	ldrb	w3, [sp, #138]
  403510:	bl	401c6c <keyboard_load_and_wait>
  403514:	cmp	w0, #0x0
  403518:	cset	w0, eq  // eq = none
  40351c:	strb	w0, [sp, #139]
  403520:	ldr	w0, [sp, #144]
  403524:	cmp	w0, #0x0
  403528:	b.eq	403644 <main+0x45c>  // b.none
  40352c:	ldr	w0, [sp, #148]
  403530:	cmp	w0, #0x0
  403534:	b.ne	40354c <main+0x364>  // b.any
  403538:	ldr	w0, [sp, #140]
  40353c:	ldr	w1, [sp, #144]
  403540:	ldrb	w2, [sp, #138]
  403544:	bl	402290 <setup_remaining_vcs>
  403548:	b	403644 <main+0x45c>
  40354c:	ldr	w0, [sp, #148]
  403550:	cmp	w0, #0x47
  403554:	b.ne	4035d0 <main+0x3e8>  // b.any
  403558:	mov	w0, #0x5                   	// #5
  40355c:	str	w0, [sp, #188]
  403560:	str	wzr, [sp, #192]
  403564:	str	wzr, [sp, #196]
  403568:	ldr	w0, [sp, #196]
  40356c:	bl	400ff0 <log_get_max_level_realm@plt>
  403570:	mov	w1, w0
  403574:	ldr	w0, [sp, #188]
  403578:	and	w0, w0, #0x7
  40357c:	cmp	w1, w0
  403580:	b.lt	4035c4 <main+0x3dc>  // b.tstop
  403584:	ldr	w0, [sp, #196]
  403588:	lsl	w1, w0, #10
  40358c:	ldr	w0, [sp, #188]
  403590:	orr	w6, w1, w0
  403594:	adrp	x0, 403000 <verify_source_vc+0x18c>
  403598:	add	x1, x0, #0x7e3
  40359c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  4035a0:	add	x5, x0, #0xee0
  4035a4:	adrp	x0, 404000 <__PRETTY_FUNCTION__.10001+0x10>
  4035a8:	add	x4, x0, #0x30
  4035ac:	mov	w3, #0x1d9                 	// #473
  4035b0:	mov	x2, x1
  4035b4:	ldr	w1, [sp, #192]
  4035b8:	mov	w0, w6
  4035bc:	bl	400f30 <log_internal_realm@plt>
  4035c0:	b	403644 <main+0x45c>
  4035c4:	ldr	w0, [sp, #192]
  4035c8:	cmp	w0, #0x0
  4035cc:	b	403644 <main+0x45c>
  4035d0:	mov	w0, #0x4                   	// #4
  4035d4:	str	w0, [sp, #176]
  4035d8:	str	wzr, [sp, #180]
  4035dc:	str	wzr, [sp, #184]
  4035e0:	ldr	w0, [sp, #184]
  4035e4:	bl	400ff0 <log_get_max_level_realm@plt>
  4035e8:	mov	w1, w0
  4035ec:	ldr	w0, [sp, #176]
  4035f0:	and	w0, w0, #0x7
  4035f4:	cmp	w1, w0
  4035f8:	b.lt	40363c <main+0x454>  // b.tstop
  4035fc:	ldr	w0, [sp, #184]
  403600:	lsl	w1, w0, #10
  403604:	ldr	w0, [sp, #176]
  403608:	orr	w6, w1, w0
  40360c:	adrp	x0, 403000 <verify_source_vc+0x18c>
  403610:	add	x1, x0, #0x7e3
  403614:	adrp	x0, 403000 <verify_source_vc+0x18c>
  403618:	add	x5, x0, #0xf18
  40361c:	adrp	x0, 404000 <__PRETTY_FUNCTION__.10001+0x10>
  403620:	add	x4, x0, #0x30
  403624:	mov	w3, #0x1db                 	// #475
  403628:	mov	x2, x1
  40362c:	ldr	w1, [sp, #180]
  403630:	mov	w0, w6
  403634:	bl	400f30 <log_internal_realm@plt>
  403638:	b	403644 <main+0x45c>
  40363c:	ldr	w0, [sp, #180]
  403640:	cmp	w0, #0x0
  403644:	strb	wzr, [sp, #137]
  403648:	ldr	w0, [sp, #148]
  40364c:	cmp	w0, #0x0
  403650:	b.eq	403660 <main+0x478>  // b.none
  403654:	ldr	w0, [sp, #148]
  403658:	cmp	w0, #0x47
  40365c:	b.ne	403668 <main+0x480>  // b.any
  403660:	mov	w0, #0x1                   	// #1
  403664:	strb	w0, [sp, #137]
  403668:	nop
  40366c:	ldrb	w0, [sp, #137]
  403670:	cmp	w0, #0x0
  403674:	b.eq	403684 <main+0x49c>  // b.none
  403678:	ldrb	w0, [sp, #139]
  40367c:	cmp	w0, #0x0
  403680:	b.ne	40368c <main+0x4a4>  // b.any
  403684:	mov	w19, #0x1                   	// #1
  403688:	b	403690 <main+0x4a8>
  40368c:	mov	w19, #0x0                   	// #0
  403690:	add	x0, sp, #0x8c
  403694:	bl	4012bc <closep>
  403698:	add	x0, sp, #0xf0
  40369c:	bl	4011c8 <freep>
  4036a0:	add	x0, sp, #0xe8
  4036a4:	bl	4011c8 <freep>
  4036a8:	add	x0, sp, #0xe0
  4036ac:	bl	4011c8 <freep>
  4036b0:	add	x0, sp, #0xd8
  4036b4:	bl	4011c8 <freep>
  4036b8:	add	x0, sp, #0xd0
  4036bc:	bl	4011c8 <freep>
  4036c0:	add	x0, sp, #0xc8
  4036c4:	bl	4011c8 <freep>
  4036c8:	mov	w1, w19
  4036cc:	adrp	x0, 414000 <__FRAME_END__+0xfaf8>
  4036d0:	add	x0, x0, #0xca0
  4036d4:	ldr	x2, [sp, #248]
  4036d8:	ldr	x0, [x0]
  4036dc:	eor	x0, x2, x0
  4036e0:	cmp	x0, #0x0
  4036e4:	b.eq	4036ec <main+0x504>  // b.none
  4036e8:	bl	400f00 <__stack_chk_fail@plt>
  4036ec:	mov	w0, w1
  4036f0:	ldr	x19, [sp, #96]
  4036f4:	ldp	x29, x30, [sp, #80]
  4036f8:	add	sp, sp, #0x100
  4036fc:	ret

0000000000403700 <__libc_csu_init>:
  403700:	stp	x29, x30, [sp, #-64]!
  403704:	mov	x29, sp
  403708:	stp	x19, x20, [sp, #16]
  40370c:	adrp	x20, 414000 <__FRAME_END__+0xfaf8>
  403710:	add	x20, x20, #0xc98
  403714:	stp	x21, x22, [sp, #32]
  403718:	adrp	x21, 414000 <__FRAME_END__+0xfaf8>
  40371c:	add	x21, x21, #0xc90
  403720:	sub	x20, x20, x21
  403724:	mov	w22, w0
  403728:	stp	x23, x24, [sp, #48]
  40372c:	mov	x23, x1
  403730:	mov	x24, x2
  403734:	bl	400dc0 <_init>
  403738:	cmp	xzr, x20, asr #3
  40373c:	b.eq	403768 <__libc_csu_init+0x68>  // b.none
  403740:	asr	x20, x20, #3
  403744:	mov	x19, #0x0                   	// #0
  403748:	ldr	x3, [x21, x19, lsl #3]
  40374c:	mov	x2, x24
  403750:	add	x19, x19, #0x1
  403754:	mov	x1, x23
  403758:	mov	w0, w22
  40375c:	blr	x3
  403760:	cmp	x20, x19
  403764:	b.ne	403748 <__libc_csu_init+0x48>  // b.any
  403768:	ldp	x19, x20, [sp, #16]
  40376c:	ldp	x21, x22, [sp, #32]
  403770:	ldp	x23, x24, [sp, #48]
  403774:	ldp	x29, x30, [sp], #64
  403778:	ret
  40377c:	nop

0000000000403780 <__libc_csu_fini>:
  403780:	ret

Disassembly of section .fini:

0000000000403784 <_fini>:
  403784:	stp	x29, x30, [sp, #-16]!
  403788:	mov	x29, sp
  40378c:	ldp	x29, x30, [sp], #16
  403790:	ret
