
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-volatile-root_clang_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000400fe8 <_init>:
  400fe8:	stp	x29, x30, [sp, #-16]!
  400fec:	mov	x29, sp
  400ff0:	bl	4012b0 <call_weak_fn>
  400ff4:	ldp	x29, x30, [sp], #16
  400ff8:	ret

Disassembly of section .plt:

0000000000401000 <__libc_start_main@plt-0x20>:
  401000:	stp	x16, x30, [sp, #-16]!
  401004:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401008:	ldr	x17, [x16, #3800]
  40100c:	add	x16, x16, #0xed8
  401010:	br	x17
  401014:	nop
  401018:	nop
  40101c:	nop

0000000000401020 <__libc_start_main@plt>:
  401020:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401024:	ldr	x17, [x16, #3808]
  401028:	add	x16, x16, #0xee0
  40102c:	br	x17

0000000000401030 <abort@plt>:
  401030:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401034:	ldr	x17, [x16, #3816]
  401038:	add	x16, x16, #0xee8
  40103c:	br	x17

0000000000401040 <__gmon_start__@plt>:
  401040:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401044:	ldr	x17, [x16, #3824]
  401048:	add	x16, x16, #0xef0
  40104c:	br	x17

0000000000401050 <ask_password_agent_close@plt>:
  401050:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401054:	ldr	x17, [x16, #3832]
  401058:	add	x16, x16, #0xef8
  40105c:	br	x17

0000000000401060 <polkit_agent_close@plt>:
  401060:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401064:	ldr	x17, [x16, #3840]
  401068:	add	x16, x16, #0xf00
  40106c:	br	x17

0000000000401070 <pager_close@plt>:
  401070:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401074:	ldr	x17, [x16, #3848]
  401078:	add	x16, x16, #0xf08
  40107c:	br	x17

0000000000401080 <mac_selinux_finish@plt>:
  401080:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401084:	ldr	x17, [x16, #3856]
  401088:	add	x16, x16, #0xf10
  40108c:	br	x17

0000000000401090 <log_setup_service@plt>:
  401090:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401094:	ldr	x17, [x16, #3864]
  401098:	add	x16, x16, #0xf18
  40109c:	br	x17

00000000004010a0 <log_get_max_level_realm@plt>:
  4010a0:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  4010a4:	ldr	x17, [x16, #3872]
  4010a8:	add	x16, x16, #0xf20
  4010ac:	br	x17

00000000004010b0 <log_internal_realm@plt>:
  4010b0:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  4010b4:	ldr	x17, [x16, #3880]
  4010b8:	add	x16, x16, #0xf28
  4010bc:	br	x17

00000000004010c0 <abs@plt>:
  4010c0:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  4010c4:	ldr	x17, [x16, #3888]
  4010c8:	add	x16, x16, #0xf30
  4010cc:	br	x17

00000000004010d0 <query_volatile_mode@plt>:
  4010d0:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  4010d4:	ldr	x17, [x16, #3896]
  4010d8:	add	x16, x16, #0xf38
  4010dc:	br	x17

00000000004010e0 <volatile_mode_from_string@plt>:
  4010e0:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  4010e4:	ldr	x17, [x16, #3904]
  4010e8:	add	x16, x16, #0xf40
  4010ec:	br	x17

00000000004010f0 <path_is_absolute@plt>:
  4010f0:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  4010f4:	ldr	x17, [x16, #3912]
  4010f8:	add	x16, x16, #0xf48
  4010fc:	br	x17

0000000000401100 <path_equal@plt>:
  401100:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401104:	ldr	x17, [x16, #3920]
  401108:	add	x16, x16, #0xf50
  40110c:	br	x17

0000000000401110 <path_is_mount_point@plt>:
  401110:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401114:	ldr	x17, [x16, #3928]
  401118:	add	x16, x16, #0xf58
  40111c:	br	x17

0000000000401120 <path_is_temporary_fs@plt>:
  401120:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401124:	ldr	x17, [x16, #3936]
  401128:	add	x16, x16, #0xf60
  40112c:	br	x17

0000000000401130 <get_block_device_harder@plt>:
  401130:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401134:	ldr	x17, [x16, #3944]
  401138:	add	x16, x16, #0xf68
  40113c:	br	x17

0000000000401140 <device_path_make_major_minor@plt>:
  401140:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401144:	ldr	x17, [x16, #3952]
  401148:	add	x16, x16, #0xf70
  40114c:	br	x17

0000000000401150 <symlink@plt>:
  401150:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401154:	ldr	x17, [x16, #3960]
  401158:	add	x16, x16, #0xf78
  40115c:	br	x17

0000000000401160 <__errno_location@plt>:
  401160:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401164:	ldr	x17, [x16, #3968]
  401168:	add	x16, x16, #0xf80
  40116c:	br	x17

0000000000401170 <log_assert_failed_realm@plt>:
  401170:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401174:	ldr	x17, [x16, #3976]
  401178:	add	x16, x16, #0xf88
  40117c:	br	x17

0000000000401180 <free@plt>:
  401180:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401184:	ldr	x17, [x16, #3984]
  401188:	add	x16, x16, #0xf90
  40118c:	br	x17

0000000000401190 <chase_symlinks@plt>:
  401190:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401194:	ldr	x17, [x16, #3992]
  401198:	add	x16, x16, #0xf98
  40119c:	br	x17

00000000004011a0 <mkdir_p@plt>:
  4011a0:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  4011a4:	ldr	x17, [x16, #4000]
  4011a8:	add	x16, x16, #0xfa0
  4011ac:	br	x17

00000000004011b0 <mount_verbose@plt>:
  4011b0:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  4011b4:	ldr	x17, [x16, #4008]
  4011b8:	add	x16, x16, #0xfa8
  4011bc:	br	x17

00000000004011c0 <mkdir@plt>:
  4011c0:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  4011c4:	ldr	x17, [x16, #4016]
  4011c8:	add	x16, x16, #0xfb0
  4011cc:	br	x17

00000000004011d0 <bind_remount_recursive@plt>:
  4011d0:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  4011d4:	ldr	x17, [x16, #4024]
  4011d8:	add	x16, x16, #0xfb8
  4011dc:	br	x17

00000000004011e0 <umount_recursive@plt>:
  4011e0:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  4011e4:	ldr	x17, [x16, #4032]
  4011e8:	add	x16, x16, #0xfc0
  4011ec:	br	x17

00000000004011f0 <mount@plt>:
  4011f0:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  4011f4:	ldr	x17, [x16, #4040]
  4011f8:	add	x16, x16, #0xfc8
  4011fc:	br	x17

0000000000401200 <rmdir@plt>:
  401200:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401204:	ldr	x17, [x16, #4048]
  401208:	add	x16, x16, #0xfd0
  40120c:	br	x17

0000000000401210 <shell_escape@plt>:
  401210:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401214:	ldr	x17, [x16, #4056]
  401218:	add	x16, x16, #0xfd8
  40121c:	br	x17

0000000000401220 <log_oom_internal@plt>:
  401220:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401224:	ldr	x17, [x16, #4064]
  401228:	add	x16, x16, #0xfe0
  40122c:	br	x17

0000000000401230 <strlen@plt>:
  401230:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401234:	ldr	x17, [x16, #4072]
  401238:	add	x16, x16, #0xfe8
  40123c:	br	x17

0000000000401240 <stpcpy@plt>:
  401240:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401244:	ldr	x17, [x16, #4080]
  401248:	add	x16, x16, #0xff0
  40124c:	br	x17

0000000000401250 <umount_verbose@plt>:
  401250:	adrp	x16, 41f000 <__FRAME_END__+0x1bcd0>
  401254:	ldr	x17, [x16, #4088]
  401258:	add	x16, x16, #0xff8
  40125c:	br	x17

Disassembly of section .text:

0000000000401260 <_start>:
  401260:	mov	x29, #0x0                   	// #0
  401264:	mov	x30, #0x0                   	// #0
  401268:	mov	x5, x0
  40126c:	ldr	x1, [sp]
  401270:	add	x2, sp, #0x8
  401274:	mov	x6, sp
  401278:	movz	x0, #0x0, lsl #48
  40127c:	movk	x0, #0x0, lsl #32
  401280:	movk	x0, #0x40, lsl #16
  401284:	movk	x0, #0x1428
  401288:	movz	x3, #0x0, lsl #48
  40128c:	movk	x3, #0x0, lsl #32
  401290:	movk	x3, #0x40, lsl #16
  401294:	movk	x3, #0x2b88
  401298:	movz	x4, #0x0, lsl #48
  40129c:	movk	x4, #0x0, lsl #32
  4012a0:	movk	x4, #0x40, lsl #16
  4012a4:	movk	x4, #0x2c08
  4012a8:	bl	401020 <__libc_start_main@plt>
  4012ac:	bl	401030 <abort@plt>

00000000004012b0 <call_weak_fn>:
  4012b0:	adrp	x0, 41f000 <__FRAME_END__+0x1bcd0>
  4012b4:	ldr	x0, [x0, #3760]
  4012b8:	cbz	x0, 4012c0 <call_weak_fn+0x10>
  4012bc:	b	401040 <__gmon_start__@plt>
  4012c0:	ret

00000000004012c4 <deregister_tm_clones>:
  4012c4:	stp	x29, x30, [sp, #-32]!
  4012c8:	mov	x29, sp
  4012cc:	adrp	x0, 420000 <completed.8445>
  4012d0:	add	x0, x0, #0x0
  4012d4:	str	x0, [sp, #24]
  4012d8:	ldr	x0, [sp, #24]
  4012dc:	str	x0, [sp, #24]
  4012e0:	ldr	x1, [sp, #24]
  4012e4:	adrp	x0, 420000 <completed.8445>
  4012e8:	add	x0, x0, #0x0
  4012ec:	cmp	x1, x0
  4012f0:	b.eq	40132c <deregister_tm_clones+0x68>  // b.none
  4012f4:	adrp	x0, 402000 <make_volatile+0x48>
  4012f8:	add	x0, x0, #0xc20
  4012fc:	ldr	x0, [x0]
  401300:	str	x0, [sp, #16]
  401304:	ldr	x0, [sp, #16]
  401308:	str	x0, [sp, #16]
  40130c:	ldr	x0, [sp, #16]
  401310:	cmp	x0, #0x0
  401314:	b.eq	401330 <deregister_tm_clones+0x6c>  // b.none
  401318:	ldr	x1, [sp, #16]
  40131c:	adrp	x0, 420000 <completed.8445>
  401320:	add	x0, x0, #0x0
  401324:	blr	x1
  401328:	b	401330 <deregister_tm_clones+0x6c>
  40132c:	nop
  401330:	ldp	x29, x30, [sp], #32
  401334:	ret

0000000000401338 <register_tm_clones>:
  401338:	stp	x29, x30, [sp, #-48]!
  40133c:	mov	x29, sp
  401340:	adrp	x0, 420000 <completed.8445>
  401344:	add	x0, x0, #0x0
  401348:	str	x0, [sp, #40]
  40134c:	ldr	x0, [sp, #40]
  401350:	str	x0, [sp, #40]
  401354:	ldr	x1, [sp, #40]
  401358:	adrp	x0, 420000 <completed.8445>
  40135c:	add	x0, x0, #0x0
  401360:	sub	x0, x1, x0
  401364:	asr	x0, x0, #3
  401368:	lsr	x1, x0, #63
  40136c:	add	x0, x1, x0
  401370:	asr	x0, x0, #1
  401374:	str	x0, [sp, #32]
  401378:	ldr	x0, [sp, #32]
  40137c:	cmp	x0, #0x0
  401380:	b.eq	4013c0 <register_tm_clones+0x88>  // b.none
  401384:	adrp	x0, 402000 <make_volatile+0x48>
  401388:	add	x0, x0, #0xc28
  40138c:	ldr	x0, [x0]
  401390:	str	x0, [sp, #24]
  401394:	ldr	x0, [sp, #24]
  401398:	str	x0, [sp, #24]
  40139c:	ldr	x0, [sp, #24]
  4013a0:	cmp	x0, #0x0
  4013a4:	b.eq	4013c4 <register_tm_clones+0x8c>  // b.none
  4013a8:	ldr	x2, [sp, #24]
  4013ac:	ldr	x1, [sp, #32]
  4013b0:	adrp	x0, 420000 <completed.8445>
  4013b4:	add	x0, x0, #0x0
  4013b8:	blr	x2
  4013bc:	b	4013c4 <register_tm_clones+0x8c>
  4013c0:	nop
  4013c4:	ldp	x29, x30, [sp], #48
  4013c8:	ret

00000000004013cc <__do_global_dtors_aux>:
  4013cc:	stp	x29, x30, [sp, #-16]!
  4013d0:	mov	x29, sp
  4013d4:	adrp	x0, 420000 <completed.8445>
  4013d8:	add	x0, x0, #0x0
  4013dc:	ldrb	w0, [x0]
  4013e0:	and	x0, x0, #0xff
  4013e4:	cmp	x0, #0x0
  4013e8:	b.ne	401404 <__do_global_dtors_aux+0x38>  // b.any
  4013ec:	bl	4012c4 <deregister_tm_clones>
  4013f0:	adrp	x0, 420000 <completed.8445>
  4013f4:	add	x0, x0, #0x0
  4013f8:	mov	w1, #0x1                   	// #1
  4013fc:	strb	w1, [x0]
  401400:	b	401408 <__do_global_dtors_aux+0x3c>
  401404:	nop
  401408:	ldp	x29, x30, [sp], #16
  40140c:	ret

0000000000401410 <frame_dummy>:
  401410:	stp	x29, x30, [sp, #-16]!
  401414:	mov	x29, sp
  401418:	bl	401338 <register_tm_clones>
  40141c:	nop
  401420:	ldp	x29, x30, [sp], #16
  401424:	ret

0000000000401428 <main>:
  401428:	sub	sp, sp, #0x30
  40142c:	stp	x29, x30, [sp, #32]
  401430:	add	x29, sp, #0x20
  401434:	mov	w8, wzr
  401438:	mov	w9, #0x1                   	// #1
  40143c:	stur	wzr, [x29, #-4]
  401440:	stur	w0, [x29, #-8]
  401444:	str	x1, [sp, #16]
  401448:	ldur	w0, [x29, #-8]
  40144c:	ldr	x1, [sp, #16]
  401450:	str	w8, [sp, #8]
  401454:	str	w9, [sp, #4]
  401458:	bl	4014a0 <save_argc_argv>
  40145c:	ldur	w0, [x29, #-8]
  401460:	ldr	x1, [sp, #16]
  401464:	bl	4014d4 <run>
  401468:	str	w0, [sp, #12]
  40146c:	bl	401050 <ask_password_agent_close@plt>
  401470:	bl	401060 <polkit_agent_close@plt>
  401474:	bl	401070 <pager_close@plt>
  401478:	bl	401080 <mac_selinux_finish@plt>
  40147c:	bl	401ed0 <static_destruct>
  401480:	ldr	w8, [sp, #12]
  401484:	cmp	w8, #0x0
  401488:	ldr	w8, [sp, #4]
  40148c:	ldr	w9, [sp, #8]
  401490:	csel	w0, w8, w9, lt  // lt = tstop
  401494:	ldp	x29, x30, [sp, #32]
  401498:	add	sp, sp, #0x30
  40149c:	ret

00000000004014a0 <save_argc_argv>:
  4014a0:	sub	sp, sp, #0x10
  4014a4:	adrp	x8, 420000 <completed.8445>
  4014a8:	add	x8, x8, #0x8
  4014ac:	adrp	x9, 420000 <completed.8445>
  4014b0:	add	x9, x9, #0x10
  4014b4:	str	w0, [sp, #12]
  4014b8:	str	x1, [sp]
  4014bc:	ldr	w10, [sp, #12]
  4014c0:	str	w10, [x8]
  4014c4:	ldr	x8, [sp]
  4014c8:	str	x8, [x9]
  4014cc:	add	sp, sp, #0x10
  4014d0:	ret

00000000004014d4 <run>:
  4014d4:	sub	sp, sp, #0x180
  4014d8:	stp	x29, x30, [sp, #352]
  4014dc:	str	x28, [sp, #368]
  4014e0:	add	x29, sp, #0x160
  4014e4:	sub	x8, x29, #0x28
  4014e8:	mov	w9, #0xffffffff            	// #-1
  4014ec:	adrp	x10, 402000 <make_volatile+0x48>
  4014f0:	add	x10, x10, #0xc30
  4014f4:	add	x10, x10, #0x3
  4014f8:	adrp	x11, 402000 <make_volatile+0x48>
  4014fc:	add	x11, x11, #0xc55
  401500:	stur	w0, [x29, #-8]
  401504:	str	x1, [x8, #24]
  401508:	stur	w9, [x29, #-20]
  40150c:	str	x8, [sp, #72]
  401510:	str	x10, [sp, #64]
  401514:	str	x11, [sp, #56]
  401518:	bl	401090 <log_setup_service@plt>
  40151c:	ldur	w9, [x29, #-8]
  401520:	cmp	w9, #0x3
  401524:	b.le	4015b0 <run+0xdc>
  401528:	mov	w8, #0x3                   	// #3
  40152c:	stur	w8, [x29, #-48]
  401530:	mov	w8, #0x16                  	// #22
  401534:	movk	w8, #0x4000, lsl #16
  401538:	stur	w8, [x29, #-52]
  40153c:	stur	wzr, [x29, #-56]
  401540:	ldur	w0, [x29, #-56]
  401544:	bl	4010a0 <log_get_max_level_realm@plt>
  401548:	ldur	w8, [x29, #-48]
  40154c:	and	w8, w8, #0x7
  401550:	cmp	w0, w8
  401554:	b.lt	401588 <run+0xb4>  // b.tstop
  401558:	ldur	w8, [x29, #-56]
  40155c:	ldur	w9, [x29, #-48]
  401560:	orr	w0, w9, w8, lsl #10
  401564:	ldur	w1, [x29, #-52]
  401568:	ldr	x2, [sp, #64]
  40156c:	mov	w3, #0x7e                  	// #126
  401570:	ldr	x4, [sp, #56]
  401574:	adrp	x5, 402000 <make_volatile+0x48>
  401578:	add	x5, x5, #0xc59
  40157c:	bl	4010b0 <log_internal_realm@plt>
  401580:	str	w0, [sp, #52]
  401584:	b	40159c <run+0xc8>
  401588:	ldur	w0, [x29, #-52]
  40158c:	bl	4010c0 <abs@plt>
  401590:	mov	w8, wzr
  401594:	subs	w8, w8, w0, uxtb
  401598:	str	w8, [sp, #52]
  40159c:	ldr	w8, [sp, #52]
  4015a0:	stur	w8, [x29, #-60]
  4015a4:	ldur	w8, [x29, #-60]
  4015a8:	stur	w8, [x29, #-4]
  4015ac:	b	401ebc <run+0x9e8>
  4015b0:	sub	x0, x29, #0x14
  4015b4:	bl	4010d0 <query_volatile_mode@plt>
  4015b8:	stur	w0, [x29, #-44]
  4015bc:	ldur	w8, [x29, #-44]
  4015c0:	cmp	w8, #0x0
  4015c4:	cset	w8, ge  // ge = tcont
  4015c8:	tbnz	w8, #0, 401650 <run+0x17c>
  4015cc:	mov	w8, #0x3                   	// #3
  4015d0:	stur	w8, [x29, #-64]
  4015d4:	ldur	w8, [x29, #-44]
  4015d8:	stur	w8, [x29, #-68]
  4015dc:	stur	wzr, [x29, #-72]
  4015e0:	ldur	w0, [x29, #-72]
  4015e4:	bl	4010a0 <log_get_max_level_realm@plt>
  4015e8:	ldur	w8, [x29, #-64]
  4015ec:	and	w8, w8, #0x7
  4015f0:	cmp	w0, w8
  4015f4:	b.lt	401628 <run+0x154>  // b.tstop
  4015f8:	ldur	w8, [x29, #-72]
  4015fc:	ldur	w9, [x29, #-64]
  401600:	orr	w0, w9, w8, lsl #10
  401604:	ldur	w1, [x29, #-68]
  401608:	ldr	x2, [sp, #64]
  40160c:	mov	w3, #0x82                  	// #130
  401610:	ldr	x4, [sp, #56]
  401614:	adrp	x5, 402000 <make_volatile+0x48>
  401618:	add	x5, x5, #0xc8a
  40161c:	bl	4010b0 <log_internal_realm@plt>
  401620:	str	w0, [sp, #48]
  401624:	b	40163c <run+0x168>
  401628:	ldur	w0, [x29, #-68]
  40162c:	bl	4010c0 <abs@plt>
  401630:	mov	w8, wzr
  401634:	subs	w8, w8, w0, uxtb
  401638:	str	w8, [sp, #48]
  40163c:	ldr	w8, [sp, #48]
  401640:	stur	w8, [x29, #-76]
  401644:	ldur	w8, [x29, #-76]
  401648:	stur	w8, [x29, #-4]
  40164c:	b	401ebc <run+0x9e8>
  401650:	ldur	w8, [x29, #-44]
  401654:	cbnz	w8, 40171c <run+0x248>
  401658:	ldur	w8, [x29, #-8]
  40165c:	cmp	w8, #0x2
  401660:	b.lt	40171c <run+0x248>  // b.tstop
  401664:	ldr	x8, [sp, #72]
  401668:	ldr	x9, [x8, #24]
  40166c:	ldr	x0, [x9, #8]
  401670:	bl	4010e0 <volatile_mode_from_string@plt>
  401674:	stur	w0, [x29, #-20]
  401678:	ldur	w10, [x29, #-20]
  40167c:	cmp	w10, #0x0
  401680:	cset	w10, ge  // ge = tcont
  401684:	tbnz	w10, #0, 40171c <run+0x248>
  401688:	mov	w8, #0x3                   	// #3
  40168c:	stur	w8, [x29, #-80]
  401690:	mov	w8, #0x16                  	// #22
  401694:	movk	w8, #0x4000, lsl #16
  401698:	stur	w8, [x29, #-84]
  40169c:	stur	wzr, [x29, #-88]
  4016a0:	ldur	w0, [x29, #-88]
  4016a4:	bl	4010a0 <log_get_max_level_realm@plt>
  4016a8:	ldur	w8, [x29, #-80]
  4016ac:	and	w8, w8, #0x7
  4016b0:	cmp	w0, w8
  4016b4:	b.lt	4016f4 <run+0x220>  // b.tstop
  4016b8:	ldur	w8, [x29, #-88]
  4016bc:	ldur	w9, [x29, #-80]
  4016c0:	orr	w0, w9, w8, lsl #10
  4016c4:	ldur	w1, [x29, #-84]
  4016c8:	ldr	x10, [sp, #72]
  4016cc:	ldr	x11, [x10, #24]
  4016d0:	ldr	x6, [x11, #8]
  4016d4:	ldr	x2, [sp, #64]
  4016d8:	mov	w3, #0x87                  	// #135
  4016dc:	ldr	x4, [sp, #56]
  4016e0:	adrp	x5, 402000 <make_volatile+0x48>
  4016e4:	add	x5, x5, #0xcc6
  4016e8:	bl	4010b0 <log_internal_realm@plt>
  4016ec:	str	w0, [sp, #44]
  4016f0:	b	401708 <run+0x234>
  4016f4:	ldur	w0, [x29, #-84]
  4016f8:	bl	4010c0 <abs@plt>
  4016fc:	mov	w8, wzr
  401700:	subs	w8, w8, w0, uxtb
  401704:	str	w8, [sp, #44]
  401708:	ldr	w8, [sp, #44]
  40170c:	stur	w8, [x29, #-92]
  401710:	ldur	w8, [x29, #-92]
  401714:	stur	w8, [x29, #-4]
  401718:	b	401ebc <run+0x9e8>
  40171c:	ldur	w8, [x29, #-8]
  401720:	cmp	w8, #0x3
  401724:	b.ge	40173c <run+0x268>  // b.tcont
  401728:	adrp	x8, 402000 <make_volatile+0x48>
  40172c:	add	x8, x8, #0xce7
  401730:	ldr	x9, [sp, #72]
  401734:	str	x8, [x9, #8]
  401738:	b	401920 <run+0x44c>
  40173c:	ldr	x8, [sp, #72]
  401740:	ldr	x9, [x8, #24]
  401744:	ldr	x9, [x9, #16]
  401748:	str	x9, [x8, #8]
  40174c:	ldr	x0, [x8, #8]
  401750:	bl	401f50 <isempty>
  401754:	tbnz	w0, #0, 40175c <run+0x288>
  401758:	b	4017e4 <run+0x310>
  40175c:	mov	w8, #0x3                   	// #3
  401760:	stur	w8, [x29, #-96]
  401764:	mov	w8, #0x16                  	// #22
  401768:	movk	w8, #0x4000, lsl #16
  40176c:	stur	w8, [x29, #-100]
  401770:	stur	wzr, [x29, #-104]
  401774:	ldur	w0, [x29, #-104]
  401778:	bl	4010a0 <log_get_max_level_realm@plt>
  40177c:	ldur	w8, [x29, #-96]
  401780:	and	w8, w8, #0x7
  401784:	cmp	w0, w8
  401788:	b.lt	4017bc <run+0x2e8>  // b.tstop
  40178c:	ldur	w8, [x29, #-104]
  401790:	ldur	w9, [x29, #-96]
  401794:	orr	w0, w9, w8, lsl #10
  401798:	ldur	w1, [x29, #-100]
  40179c:	ldr	x2, [sp, #64]
  4017a0:	mov	w3, #0x91                  	// #145
  4017a4:	ldr	x4, [sp, #56]
  4017a8:	adrp	x5, 402000 <make_volatile+0x48>
  4017ac:	add	x5, x5, #0xcf0
  4017b0:	bl	4010b0 <log_internal_realm@plt>
  4017b4:	str	w0, [sp, #40]
  4017b8:	b	4017d0 <run+0x2fc>
  4017bc:	ldur	w0, [x29, #-100]
  4017c0:	bl	4010c0 <abs@plt>
  4017c4:	mov	w8, wzr
  4017c8:	subs	w8, w8, w0, uxtb
  4017cc:	str	w8, [sp, #40]
  4017d0:	ldr	w8, [sp, #40]
  4017d4:	stur	w8, [x29, #-108]
  4017d8:	ldur	w8, [x29, #-108]
  4017dc:	stur	w8, [x29, #-4]
  4017e0:	b	401ebc <run+0x9e8>
  4017e4:	ldr	x8, [sp, #72]
  4017e8:	ldr	x0, [x8, #8]
  4017ec:	bl	4010f0 <path_is_absolute@plt>
  4017f0:	tbnz	w0, #0, 40187c <run+0x3a8>
  4017f4:	mov	w8, #0x3                   	// #3
  4017f8:	stur	w8, [x29, #-112]
  4017fc:	mov	w8, #0x16                  	// #22
  401800:	movk	w8, #0x4000, lsl #16
  401804:	stur	w8, [x29, #-116]
  401808:	stur	wzr, [x29, #-120]
  40180c:	ldur	w0, [x29, #-120]
  401810:	bl	4010a0 <log_get_max_level_realm@plt>
  401814:	ldur	w8, [x29, #-112]
  401818:	and	w8, w8, #0x7
  40181c:	cmp	w0, w8
  401820:	b.lt	401854 <run+0x380>  // b.tstop
  401824:	ldur	w8, [x29, #-120]
  401828:	ldur	w9, [x29, #-112]
  40182c:	orr	w0, w9, w8, lsl #10
  401830:	ldur	w1, [x29, #-116]
  401834:	ldr	x2, [sp, #64]
  401838:	mov	w3, #0x94                  	// #148
  40183c:	ldr	x4, [sp, #56]
  401840:	adrp	x5, 402000 <make_volatile+0x48>
  401844:	add	x5, x5, #0xd10
  401848:	bl	4010b0 <log_internal_realm@plt>
  40184c:	str	w0, [sp, #36]
  401850:	b	401868 <run+0x394>
  401854:	ldur	w0, [x29, #-116]
  401858:	bl	4010c0 <abs@plt>
  40185c:	mov	w8, wzr
  401860:	subs	w8, w8, w0, uxtb
  401864:	str	w8, [sp, #36]
  401868:	ldr	w8, [sp, #36]
  40186c:	stur	w8, [x29, #-124]
  401870:	ldur	w8, [x29, #-124]
  401874:	stur	w8, [x29, #-4]
  401878:	b	401ebc <run+0x9e8>
  40187c:	ldr	x8, [sp, #72]
  401880:	ldr	x0, [x8, #8]
  401884:	adrp	x1, 402000 <make_volatile+0x48>
  401888:	add	x1, x1, #0xd3e
  40188c:	bl	401100 <path_equal@plt>
  401890:	tbnz	w0, #0, 401898 <run+0x3c4>
  401894:	b	401920 <run+0x44c>
  401898:	mov	w8, #0x3                   	// #3
  40189c:	stur	w8, [x29, #-128]
  4018a0:	mov	w8, #0x16                  	// #22
  4018a4:	movk	w8, #0x4000, lsl #16
  4018a8:	stur	w8, [x29, #-132]
  4018ac:	stur	wzr, [x29, #-136]
  4018b0:	ldur	w0, [x29, #-136]
  4018b4:	bl	4010a0 <log_get_max_level_realm@plt>
  4018b8:	ldur	w8, [x29, #-128]
  4018bc:	and	w8, w8, #0x7
  4018c0:	cmp	w0, w8
  4018c4:	b.lt	4018f8 <run+0x424>  // b.tstop
  4018c8:	ldur	w8, [x29, #-136]
  4018cc:	ldur	w9, [x29, #-128]
  4018d0:	orr	w0, w9, w8, lsl #10
  4018d4:	ldur	w1, [x29, #-132]
  4018d8:	ldr	x2, [sp, #64]
  4018dc:	mov	w3, #0x97                  	// #151
  4018e0:	ldr	x4, [sp, #56]
  4018e4:	adrp	x5, 402000 <make_volatile+0x48>
  4018e8:	add	x5, x5, #0xd40
  4018ec:	bl	4010b0 <log_internal_realm@plt>
  4018f0:	str	w0, [sp, #32]
  4018f4:	b	40190c <run+0x438>
  4018f8:	ldur	w0, [x29, #-132]
  4018fc:	bl	4010c0 <abs@plt>
  401900:	mov	w8, wzr
  401904:	subs	w8, w8, w0, uxtb
  401908:	str	w8, [sp, #32]
  40190c:	ldr	w8, [sp, #32]
  401910:	stur	w8, [x29, #-140]
  401914:	ldur	w8, [x29, #-140]
  401918:	stur	w8, [x29, #-4]
  40191c:	b	401ebc <run+0x9e8>
  401920:	mov	w8, #0x0                   	// #0
  401924:	sturb	w8, [x29, #-141]
  401928:	ldur	w8, [x29, #-20]
  40192c:	cmp	w8, #0x1
  401930:	str	w8, [sp, #28]
  401934:	b.eq	401954 <run+0x480>  // b.none
  401938:	b	40193c <run+0x468>
  40193c:	ldr	w8, [sp, #28]
  401940:	cmp	w8, #0x3
  401944:	cset	w9, eq  // eq = none
  401948:	eor	w9, w9, #0x1
  40194c:	tbnz	w9, #0, 401960 <run+0x48c>
  401950:	b	401954 <run+0x480>
  401954:	mov	w8, #0x1                   	// #1
  401958:	sturb	w8, [x29, #-141]
  40195c:	b	401960 <run+0x48c>
  401960:	ldurb	w8, [x29, #-141]
  401964:	and	w8, w8, #0x1
  401968:	sturb	w8, [x29, #-142]
  40196c:	ldurb	w8, [x29, #-142]
  401970:	tbnz	w8, #0, 40197c <run+0x4a8>
  401974:	stur	wzr, [x29, #-4]
  401978:	b	401ebc <run+0x9e8>
  40197c:	ldr	x8, [sp, #72]
  401980:	ldr	x0, [x8, #8]
  401984:	mov	x9, xzr
  401988:	mov	x1, x9
  40198c:	mov	w2, #0x400                 	// #1024
  401990:	bl	401110 <path_is_mount_point@plt>
  401994:	stur	w0, [x29, #-44]
  401998:	ldur	w10, [x29, #-44]
  40199c:	cmp	w10, #0x0
  4019a0:	cset	w10, ge  // ge = tcont
  4019a4:	tbnz	w10, #0, 401a34 <run+0x560>
  4019a8:	mov	w8, #0x3                   	// #3
  4019ac:	stur	w8, [x29, #-148]
  4019b0:	ldur	w8, [x29, #-44]
  4019b4:	stur	w8, [x29, #-152]
  4019b8:	stur	wzr, [x29, #-156]
  4019bc:	ldur	w0, [x29, #-156]
  4019c0:	bl	4010a0 <log_get_max_level_realm@plt>
  4019c4:	ldur	w8, [x29, #-148]
  4019c8:	and	w8, w8, #0x7
  4019cc:	cmp	w0, w8
  4019d0:	b.lt	401a0c <run+0x538>  // b.tstop
  4019d4:	ldur	w8, [x29, #-156]
  4019d8:	ldur	w9, [x29, #-148]
  4019dc:	orr	w0, w9, w8, lsl #10
  4019e0:	ldur	w1, [x29, #-152]
  4019e4:	ldr	x10, [sp, #72]
  4019e8:	ldr	x6, [x10, #8]
  4019ec:	ldr	x2, [sp, #64]
  4019f0:	mov	w3, #0x9f                  	// #159
  4019f4:	ldr	x4, [sp, #56]
  4019f8:	adrp	x5, 402000 <make_volatile+0x48>
  4019fc:	add	x5, x5, #0xd68
  401a00:	bl	4010b0 <log_internal_realm@plt>
  401a04:	str	w0, [sp, #24]
  401a08:	b	401a20 <run+0x54c>
  401a0c:	ldur	w0, [x29, #-152]
  401a10:	bl	4010c0 <abs@plt>
  401a14:	mov	w8, wzr
  401a18:	subs	w8, w8, w0, uxtb
  401a1c:	str	w8, [sp, #24]
  401a20:	ldr	w8, [sp, #24]
  401a24:	stur	w8, [x29, #-160]
  401a28:	ldur	w8, [x29, #-160]
  401a2c:	stur	w8, [x29, #-4]
  401a30:	b	401ebc <run+0x9e8>
  401a34:	ldur	w8, [x29, #-44]
  401a38:	cbnz	w8, 401acc <run+0x5f8>
  401a3c:	mov	w8, #0x3                   	// #3
  401a40:	stur	w8, [x29, #-164]
  401a44:	mov	w8, #0x16                  	// #22
  401a48:	movk	w8, #0x4000, lsl #16
  401a4c:	stur	w8, [x29, #-168]
  401a50:	stur	wzr, [x29, #-172]
  401a54:	ldur	w0, [x29, #-172]
  401a58:	bl	4010a0 <log_get_max_level_realm@plt>
  401a5c:	ldur	w8, [x29, #-164]
  401a60:	and	w8, w8, #0x7
  401a64:	cmp	w0, w8
  401a68:	b.lt	401aa4 <run+0x5d0>  // b.tstop
  401a6c:	ldur	w8, [x29, #-172]
  401a70:	ldur	w9, [x29, #-164]
  401a74:	orr	w0, w9, w8, lsl #10
  401a78:	ldur	w1, [x29, #-168]
  401a7c:	ldr	x10, [sp, #72]
  401a80:	ldr	x6, [x10, #8]
  401a84:	ldr	x2, [sp, #64]
  401a88:	mov	w3, #0xa1                  	// #161
  401a8c:	ldr	x4, [sp, #56]
  401a90:	adrp	x5, 402000 <make_volatile+0x48>
  401a94:	add	x5, x5, #0xd9b
  401a98:	bl	4010b0 <log_internal_realm@plt>
  401a9c:	str	w0, [sp, #20]
  401aa0:	b	401ab8 <run+0x5e4>
  401aa4:	ldur	w0, [x29, #-168]
  401aa8:	bl	4010c0 <abs@plt>
  401aac:	mov	w8, wzr
  401ab0:	subs	w8, w8, w0, uxtb
  401ab4:	str	w8, [sp, #20]
  401ab8:	ldr	w8, [sp, #20]
  401abc:	str	w8, [sp, #176]
  401ac0:	ldr	w8, [sp, #176]
  401ac4:	stur	w8, [x29, #-4]
  401ac8:	b	401ebc <run+0x9e8>
  401acc:	ldr	x8, [sp, #72]
  401ad0:	ldr	x0, [x8, #8]
  401ad4:	bl	401120 <path_is_temporary_fs@plt>
  401ad8:	stur	w0, [x29, #-44]
  401adc:	ldur	w9, [x29, #-44]
  401ae0:	cmp	w9, #0x0
  401ae4:	cset	w9, ge  // ge = tcont
  401ae8:	tbnz	w9, #0, 401b78 <run+0x6a4>
  401aec:	mov	w8, #0x3                   	// #3
  401af0:	str	w8, [sp, #172]
  401af4:	ldur	w8, [x29, #-44]
  401af8:	str	w8, [sp, #168]
  401afc:	str	wzr, [sp, #164]
  401b00:	ldr	w0, [sp, #164]
  401b04:	bl	4010a0 <log_get_max_level_realm@plt>
  401b08:	ldr	w8, [sp, #172]
  401b0c:	and	w8, w8, #0x7
  401b10:	cmp	w0, w8
  401b14:	b.lt	401b50 <run+0x67c>  // b.tstop
  401b18:	ldr	w8, [sp, #164]
  401b1c:	ldr	w9, [sp, #172]
  401b20:	orr	w0, w9, w8, lsl #10
  401b24:	ldr	w1, [sp, #168]
  401b28:	ldr	x10, [sp, #72]
  401b2c:	ldr	x6, [x10, #8]
  401b30:	ldr	x2, [sp, #64]
  401b34:	mov	w3, #0xa5                  	// #165
  401b38:	ldr	x4, [sp, #56]
  401b3c:	adrp	x5, 402000 <make_volatile+0x48>
  401b40:	add	x5, x5, #0xdb4
  401b44:	bl	4010b0 <log_internal_realm@plt>
  401b48:	str	w0, [sp, #16]
  401b4c:	b	401b64 <run+0x690>
  401b50:	ldr	w0, [sp, #168]
  401b54:	bl	4010c0 <abs@plt>
  401b58:	mov	w8, wzr
  401b5c:	subs	w8, w8, w0, uxtb
  401b60:	str	w8, [sp, #16]
  401b64:	ldr	w8, [sp, #16]
  401b68:	str	w8, [sp, #160]
  401b6c:	ldr	w8, [sp, #160]
  401b70:	stur	w8, [x29, #-4]
  401b74:	b	401ebc <run+0x9e8>
  401b78:	ldur	w8, [x29, #-44]
  401b7c:	cmp	w8, #0x0
  401b80:	cset	w8, le
  401b84:	tbnz	w8, #0, 401c0c <run+0x738>
  401b88:	mov	w8, #0x6                   	// #6
  401b8c:	str	w8, [sp, #156]
  401b90:	str	wzr, [sp, #152]
  401b94:	str	wzr, [sp, #148]
  401b98:	ldr	w0, [sp, #148]
  401b9c:	bl	4010a0 <log_get_max_level_realm@plt>
  401ba0:	ldr	w8, [sp, #156]
  401ba4:	and	w8, w8, #0x7
  401ba8:	cmp	w0, w8
  401bac:	b.lt	401be8 <run+0x714>  // b.tstop
  401bb0:	ldr	w8, [sp, #148]
  401bb4:	ldr	w9, [sp, #156]
  401bb8:	orr	w0, w9, w8, lsl #10
  401bbc:	ldr	w1, [sp, #152]
  401bc0:	ldr	x10, [sp, #72]
  401bc4:	ldr	x6, [x10, #8]
  401bc8:	ldr	x2, [sp, #64]
  401bcc:	mov	w3, #0xa7                  	// #167
  401bd0:	ldr	x4, [sp, #56]
  401bd4:	adrp	x5, 402000 <make_volatile+0x48>
  401bd8:	add	x5, x5, #0xdf1
  401bdc:	bl	4010b0 <log_internal_realm@plt>
  401be0:	str	w0, [sp, #12]
  401be4:	b	401bfc <run+0x728>
  401be8:	ldr	w0, [sp, #152]
  401bec:	bl	4010c0 <abs@plt>
  401bf0:	mov	w8, wzr
  401bf4:	subs	w8, w8, w0, uxtb
  401bf8:	str	w8, [sp, #12]
  401bfc:	ldr	w8, [sp, #12]
  401c00:	str	w8, [sp, #144]
  401c04:	stur	wzr, [x29, #-4]
  401c08:	b	401ebc <run+0x9e8>
  401c0c:	ldr	x8, [sp, #72]
  401c10:	ldr	x0, [x8, #8]
  401c14:	sub	x1, x29, #0x28
  401c18:	bl	401130 <get_block_device_harder@plt>
  401c1c:	stur	w0, [x29, #-44]
  401c20:	ldur	w9, [x29, #-44]
  401c24:	cmp	w9, #0x0
  401c28:	cset	w9, ge  // ge = tcont
  401c2c:	tbnz	w9, #0, 401cbc <run+0x7e8>
  401c30:	mov	w8, #0x3                   	// #3
  401c34:	str	w8, [sp, #140]
  401c38:	ldur	w8, [x29, #-44]
  401c3c:	str	w8, [sp, #136]
  401c40:	str	wzr, [sp, #132]
  401c44:	ldr	w0, [sp, #132]
  401c48:	bl	4010a0 <log_get_max_level_realm@plt>
  401c4c:	ldr	w8, [sp, #140]
  401c50:	and	w8, w8, #0x7
  401c54:	cmp	w0, w8
  401c58:	b.lt	401c94 <run+0x7c0>  // b.tstop
  401c5c:	ldr	w8, [sp, #132]
  401c60:	ldr	w9, [sp, #140]
  401c64:	orr	w0, w9, w8, lsl #10
  401c68:	ldr	w1, [sp, #136]
  401c6c:	ldr	x10, [sp, #72]
  401c70:	ldr	x6, [x10, #8]
  401c74:	ldr	x2, [sp, #64]
  401c78:	mov	w3, #0xb1                  	// #177
  401c7c:	ldr	x4, [sp, #56]
  401c80:	adrp	x5, 402000 <make_volatile+0x48>
  401c84:	add	x5, x5, #0xe18
  401c88:	bl	4010b0 <log_internal_realm@plt>
  401c8c:	str	w0, [sp, #8]
  401c90:	b	401ca8 <run+0x7d4>
  401c94:	ldr	w0, [sp, #136]
  401c98:	bl	4010c0 <abs@plt>
  401c9c:	mov	w8, wzr
  401ca0:	subs	w8, w8, w0, uxtb
  401ca4:	str	w8, [sp, #8]
  401ca8:	ldr	w8, [sp, #8]
  401cac:	str	w8, [sp, #128]
  401cb0:	ldr	w8, [sp, #128]
  401cb4:	stur	w8, [x29, #-4]
  401cb8:	b	401ebc <run+0x9e8>
  401cbc:	ldur	w8, [x29, #-44]
  401cc0:	cmp	w8, #0x0
  401cc4:	cset	w8, le
  401cc8:	tbnz	w8, #0, 401e3c <run+0x968>
  401ccc:	add	x2, sp, #0x78
  401cd0:	mov	x8, xzr
  401cd4:	str	x8, [sp, #120]
  401cd8:	ldr	x8, [sp, #72]
  401cdc:	ldr	x1, [x8]
  401ce0:	mov	w0, #0x6000                	// #24576
  401ce4:	bl	401140 <device_path_make_major_minor@plt>
  401ce8:	stur	w0, [x29, #-44]
  401cec:	ldur	w9, [x29, #-44]
  401cf0:	cmp	w9, #0x0
  401cf4:	cset	w9, ge  // ge = tcont
  401cf8:	tbnz	w9, #0, 401d88 <run+0x8b4>
  401cfc:	mov	w8, #0x3                   	// #3
  401d00:	str	w8, [sp, #116]
  401d04:	ldur	w8, [x29, #-44]
  401d08:	str	w8, [sp, #112]
  401d0c:	str	wzr, [sp, #108]
  401d10:	ldr	w0, [sp, #108]
  401d14:	bl	4010a0 <log_get_max_level_realm@plt>
  401d18:	ldr	w8, [sp, #116]
  401d1c:	and	w8, w8, #0x7
  401d20:	cmp	w0, w8
  401d24:	b.lt	401d58 <run+0x884>  // b.tstop
  401d28:	ldr	w8, [sp, #108]
  401d2c:	ldr	w9, [sp, #116]
  401d30:	orr	w0, w9, w8, lsl #10
  401d34:	ldr	w1, [sp, #112]
  401d38:	ldr	x2, [sp, #64]
  401d3c:	mov	w3, #0xb7                  	// #183
  401d40:	ldr	x4, [sp, #56]
  401d44:	adrp	x5, 402000 <make_volatile+0x48>
  401d48:	add	x5, x5, #0xe49
  401d4c:	bl	4010b0 <log_internal_realm@plt>
  401d50:	str	w0, [sp, #4]
  401d54:	b	401d6c <run+0x898>
  401d58:	ldr	w0, [sp, #112]
  401d5c:	bl	4010c0 <abs@plt>
  401d60:	mov	w8, wzr
  401d64:	subs	w8, w8, w0, uxtb
  401d68:	str	w8, [sp, #4]
  401d6c:	ldr	w8, [sp, #4]
  401d70:	str	w8, [sp, #104]
  401d74:	ldr	w8, [sp, #104]
  401d78:	stur	w8, [x29, #-4]
  401d7c:	mov	w8, #0x1                   	// #1
  401d80:	str	w8, [sp, #100]
  401d84:	b	401e24 <run+0x950>
  401d88:	ldr	x0, [sp, #120]
  401d8c:	adrp	x1, 402000 <make_volatile+0x48>
  401d90:	add	x1, x1, #0xe6f
  401d94:	bl	401150 <symlink@plt>
  401d98:	cmp	w0, #0x0
  401d9c:	cset	w8, ge  // ge = tcont
  401da0:	tbnz	w8, #0, 401e20 <run+0x94c>
  401da4:	mov	w8, #0x4                   	// #4
  401da8:	str	w8, [sp, #96]
  401dac:	bl	401160 <__errno_location@plt>
  401db0:	ldr	w8, [x0]
  401db4:	str	w8, [sp, #92]
  401db8:	str	wzr, [sp, #88]
  401dbc:	ldr	w0, [sp, #88]
  401dc0:	bl	4010a0 <log_get_max_level_realm@plt>
  401dc4:	ldr	w8, [sp, #96]
  401dc8:	and	w8, w8, #0x7
  401dcc:	cmp	w0, w8
  401dd0:	b.lt	401e04 <run+0x930>  // b.tstop
  401dd4:	ldr	w8, [sp, #88]
  401dd8:	ldr	w9, [sp, #96]
  401ddc:	orr	w0, w9, w8, lsl #10
  401de0:	ldr	w1, [sp, #92]
  401de4:	ldr	x2, [sp, #64]
  401de8:	mov	w3, #0xba                  	// #186
  401dec:	ldr	x4, [sp, #56]
  401df0:	adrp	x5, 402000 <make_volatile+0x48>
  401df4:	add	x5, x5, #0xe8a
  401df8:	bl	4010b0 <log_internal_realm@plt>
  401dfc:	str	w0, [sp]
  401e00:	b	401e18 <run+0x944>
  401e04:	ldr	w0, [sp, #92]
  401e08:	bl	4010c0 <abs@plt>
  401e0c:	mov	w8, wzr
  401e10:	subs	w8, w8, w0, uxtb
  401e14:	str	w8, [sp]
  401e18:	ldr	w8, [sp]
  401e1c:	str	w8, [sp, #84]
  401e20:	str	wzr, [sp, #100]
  401e24:	add	x0, sp, #0x78
  401e28:	bl	401f90 <freep>
  401e2c:	ldr	w8, [sp, #100]
  401e30:	cbz	w8, 401e3c <run+0x968>
  401e34:	b	401e38 <run+0x964>
  401e38:	b	401ebc <run+0x9e8>
  401e3c:	ldur	w8, [x29, #-20]
  401e40:	cmp	w8, #0x1
  401e44:	b.ne	401e5c <run+0x988>  // b.any
  401e48:	ldr	x8, [sp, #72]
  401e4c:	ldr	x0, [x8, #8]
  401e50:	bl	401fb8 <make_volatile>
  401e54:	stur	w0, [x29, #-4]
  401e58:	b	401ebc <run+0x9e8>
  401e5c:	ldur	w8, [x29, #-20]
  401e60:	cmp	w8, #0x3
  401e64:	cset	w8, eq  // eq = none
  401e68:	mov	w9, #0x1                   	// #1
  401e6c:	eor	w8, w8, #0x1
  401e70:	eor	w8, w8, w9
  401e74:	eor	w8, w8, w9
  401e78:	and	w8, w8, #0x1
  401e7c:	mov	w0, w8
  401e80:	sxtw	x10, w0
  401e84:	cbz	x10, 401eac <run+0x9d8>
  401e88:	mov	w8, wzr
  401e8c:	mov	w0, w8
  401e90:	adrp	x1, 402000 <make_volatile+0x48>
  401e94:	add	x1, x1, #0xec2
  401e98:	ldr	x2, [sp, #64]
  401e9c:	mov	w3, #0xc0                  	// #192
  401ea0:	adrp	x4, 402000 <make_volatile+0x48>
  401ea4:	add	x4, x4, #0xed8
  401ea8:	bl	401170 <log_assert_failed_realm@plt>
  401eac:	ldr	x8, [sp, #72]
  401eb0:	ldr	x0, [x8, #8]
  401eb4:	bl	40253c <make_overlay>
  401eb8:	stur	w0, [x29, #-4]
  401ebc:	ldur	w0, [x29, #-4]
  401ec0:	ldr	x28, [sp, #368]
  401ec4:	ldp	x29, x30, [sp, #352]
  401ec8:	add	sp, sp, #0x180
  401ecc:	ret

0000000000401ed0 <static_destruct>:
  401ed0:	sub	sp, sp, #0x20
  401ed4:	stp	x29, x30, [sp, #16]
  401ed8:	add	x29, sp, #0x10
  401edc:	adrp	x8, 41f000 <__FRAME_END__+0x1bcd0>
  401ee0:	ldr	x8, [x8, #3768]
  401ee4:	str	x8, [sp]
  401ee8:	cbnz	x8, 401ef0 <static_destruct+0x20>
  401eec:	b	401f44 <static_destruct+0x74>
  401ef0:	ldr	x0, [sp]
  401ef4:	mov	x1, #0x8                   	// #8
  401ef8:	bl	402b54 <ALIGN_TO>
  401efc:	str	x0, [sp, #8]
  401f00:	ldr	x8, [sp, #8]
  401f04:	adrp	x9, 41f000 <__FRAME_END__+0x1bcd0>
  401f08:	ldr	x9, [x9, #3776]
  401f0c:	cmp	x8, x9
  401f10:	b.cs	401f44 <static_destruct+0x74>  // b.hs, b.nlast
  401f14:	ldr	x8, [sp, #8]
  401f18:	ldr	x8, [x8, #8]
  401f1c:	ldr	x9, [sp, #8]
  401f20:	ldr	x0, [x9]
  401f24:	blr	x8
  401f28:	ldr	x8, [sp, #8]
  401f2c:	add	x8, x8, #0x10
  401f30:	mov	x0, x8
  401f34:	mov	x1, #0x8                   	// #8
  401f38:	bl	402b54 <ALIGN_TO>
  401f3c:	str	x0, [sp, #8]
  401f40:	b	401f00 <static_destruct+0x30>
  401f44:	ldp	x29, x30, [sp, #16]
  401f48:	add	sp, sp, #0x20
  401f4c:	ret

0000000000401f50 <isempty>:
  401f50:	sub	sp, sp, #0x10
  401f54:	str	x0, [sp, #8]
  401f58:	ldr	x8, [sp, #8]
  401f5c:	mov	w9, #0x1                   	// #1
  401f60:	str	w9, [sp, #4]
  401f64:	cbz	x8, 401f80 <isempty+0x30>
  401f68:	ldr	x8, [sp, #8]
  401f6c:	ldrb	w9, [x8]
  401f70:	cmp	w9, #0x0
  401f74:	cset	w9, ne  // ne = any
  401f78:	eor	w9, w9, #0x1
  401f7c:	str	w9, [sp, #4]
  401f80:	ldr	w8, [sp, #4]
  401f84:	and	w0, w8, #0x1
  401f88:	add	sp, sp, #0x10
  401f8c:	ret

0000000000401f90 <freep>:
  401f90:	sub	sp, sp, #0x20
  401f94:	stp	x29, x30, [sp, #16]
  401f98:	add	x29, sp, #0x10
  401f9c:	str	x0, [sp, #8]
  401fa0:	ldr	x8, [sp, #8]
  401fa4:	ldr	x0, [x8]
  401fa8:	bl	401180 <free@plt>
  401fac:	ldp	x29, x30, [sp, #16]
  401fb0:	add	sp, sp, #0x20
  401fb4:	ret

0000000000401fb8 <make_volatile>:
  401fb8:	sub	sp, sp, #0xd0
  401fbc:	stp	x29, x30, [sp, #192]
  401fc0:	add	x29, sp, #0xc0
  401fc4:	mov	x8, xzr
  401fc8:	adrp	x9, 402000 <make_volatile+0x48>
  401fcc:	add	x9, x9, #0xf49
  401fd0:	adrp	x10, 402000 <make_volatile+0x48>
  401fd4:	add	x10, x10, #0xfa7
  401fd8:	adrp	x11, 402000 <make_volatile+0x48>
  401fdc:	add	x11, x11, #0xc30
  401fe0:	add	x11, x11, #0x3
  401fe4:	adrp	x12, 402000 <make_volatile+0x48>
  401fe8:	add	x12, x12, #0xf18
  401fec:	stur	x0, [x29, #-16]
  401ff0:	stur	x8, [x29, #-24]
  401ff4:	str	x9, [sp, #56]
  401ff8:	str	x10, [sp, #48]
  401ffc:	str	x11, [sp, #40]
  402000:	str	x12, [sp, #32]
  402004:	ldur	x8, [x29, #-16]
  402008:	cmp	x8, #0x0
  40200c:	cset	w9, ne  // ne = any
  402010:	mov	w10, #0x1                   	// #1
  402014:	eor	w9, w9, #0x1
  402018:	eor	w9, w9, w10
  40201c:	eor	w9, w9, w10
  402020:	and	w9, w9, #0x1
  402024:	mov	w0, w9
  402028:	sxtw	x8, w0
  40202c:	cbz	x8, 402054 <make_volatile+0x9c>
  402030:	mov	w8, wzr
  402034:	mov	w0, w8
  402038:	adrp	x1, 402000 <make_volatile+0x48>
  40203c:	add	x1, x1, #0xeee
  402040:	ldr	x2, [sp, #40]
  402044:	mov	w3, #0x16                  	// #22
  402048:	adrp	x4, 402000 <make_volatile+0x48>
  40204c:	add	x4, x4, #0xef3
  402050:	bl	401170 <log_assert_failed_realm@plt>
  402054:	ldur	x1, [x29, #-16]
  402058:	adrp	x0, 402000 <make_volatile+0x48>
  40205c:	add	x0, x0, #0xf13
  402060:	mov	w2, #0x1                   	// #1
  402064:	sub	x3, x29, #0x18
  402068:	mov	x8, xzr
  40206c:	mov	x4, x8
  402070:	bl	401190 <chase_symlinks@plt>
  402074:	stur	w0, [x29, #-28]
  402078:	ldur	w9, [x29, #-28]
  40207c:	cmp	w9, #0x0
  402080:	cset	w9, ge  // ge = tcont
  402084:	tbnz	w9, #0, 402114 <make_volatile+0x15c>
  402088:	mov	w8, #0x3                   	// #3
  40208c:	stur	w8, [x29, #-32]
  402090:	ldur	w8, [x29, #-28]
  402094:	stur	w8, [x29, #-36]
  402098:	stur	wzr, [x29, #-40]
  40209c:	ldur	w0, [x29, #-40]
  4020a0:	bl	4010a0 <log_get_max_level_realm@plt>
  4020a4:	ldur	w8, [x29, #-32]
  4020a8:	and	w8, w8, #0x7
  4020ac:	cmp	w0, w8
  4020b0:	b.lt	4020e4 <make_volatile+0x12c>  // b.tstop
  4020b4:	ldur	w8, [x29, #-40]
  4020b8:	ldur	w9, [x29, #-32]
  4020bc:	orr	w0, w9, w8, lsl #10
  4020c0:	ldur	w1, [x29, #-36]
  4020c4:	ldr	x2, [sp, #40]
  4020c8:	mov	w3, #0x1a                  	// #26
  4020cc:	ldr	x4, [sp, #32]
  4020d0:	adrp	x5, 402000 <make_volatile+0x48>
  4020d4:	add	x5, x5, #0xf26
  4020d8:	bl	4010b0 <log_internal_realm@plt>
  4020dc:	str	w0, [sp, #28]
  4020e0:	b	4020f8 <make_volatile+0x140>
  4020e4:	ldur	w0, [x29, #-36]
  4020e8:	bl	4010c0 <abs@plt>
  4020ec:	mov	w8, wzr
  4020f0:	subs	w8, w8, w0, uxtb
  4020f4:	str	w8, [sp, #28]
  4020f8:	ldr	w8, [sp, #28]
  4020fc:	stur	w8, [x29, #-44]
  402100:	ldur	w8, [x29, #-44]
  402104:	stur	w8, [x29, #-4]
  402108:	mov	w8, #0x1                   	// #1
  40210c:	stur	w8, [x29, #-48]
  402110:	b	402524 <make_volatile+0x56c>
  402114:	ldr	x0, [sp, #56]
  402118:	mov	w1, #0x1c0                 	// #448
  40211c:	bl	4011a0 <mkdir_p@plt>
  402120:	stur	w0, [x29, #-28]
  402124:	ldur	w8, [x29, #-28]
  402128:	cmp	w8, #0x0
  40212c:	cset	w8, ge  // ge = tcont
  402130:	tbnz	w8, #0, 4021c0 <make_volatile+0x208>
  402134:	mov	w8, #0x3                   	// #3
  402138:	stur	w8, [x29, #-52]
  40213c:	ldur	w8, [x29, #-28]
  402140:	stur	w8, [x29, #-56]
  402144:	stur	wzr, [x29, #-60]
  402148:	ldur	w0, [x29, #-60]
  40214c:	bl	4010a0 <log_get_max_level_realm@plt>
  402150:	ldur	w8, [x29, #-52]
  402154:	and	w8, w8, #0x7
  402158:	cmp	w0, w8
  40215c:	b.lt	402190 <make_volatile+0x1d8>  // b.tstop
  402160:	ldur	w8, [x29, #-60]
  402164:	ldur	w9, [x29, #-52]
  402168:	orr	w0, w9, w8, lsl #10
  40216c:	ldur	w1, [x29, #-56]
  402170:	ldr	x2, [sp, #40]
  402174:	mov	w3, #0x1e                  	// #30
  402178:	ldr	x4, [sp, #32]
  40217c:	adrp	x5, 402000 <make_volatile+0x48>
  402180:	add	x5, x5, #0xf67
  402184:	bl	4010b0 <log_internal_realm@plt>
  402188:	str	w0, [sp, #24]
  40218c:	b	4021a4 <make_volatile+0x1ec>
  402190:	ldur	w0, [x29, #-56]
  402194:	bl	4010c0 <abs@plt>
  402198:	mov	w8, wzr
  40219c:	subs	w8, w8, w0, uxtb
  4021a0:	str	w8, [sp, #24]
  4021a4:	ldr	w8, [sp, #24]
  4021a8:	stur	w8, [x29, #-64]
  4021ac:	ldur	w8, [x29, #-64]
  4021b0:	stur	w8, [x29, #-4]
  4021b4:	mov	w8, #0x1                   	// #1
  4021b8:	stur	w8, [x29, #-48]
  4021bc:	b	402524 <make_volatile+0x56c>
  4021c0:	mov	w0, #0x3                   	// #3
  4021c4:	adrp	x8, 402000 <make_volatile+0x48>
  4021c8:	add	x8, x8, #0xf98
  4021cc:	mov	x1, x8
  4021d0:	ldr	x2, [sp, #56]
  4021d4:	mov	x3, x8
  4021d8:	mov	x4, #0x1000000             	// #16777216
  4021dc:	adrp	x5, 402000 <make_volatile+0x48>
  4021e0:	add	x5, x5, #0xf9e
  4021e4:	bl	4011b0 <mount_verbose@plt>
  4021e8:	stur	w0, [x29, #-28]
  4021ec:	ldur	w9, [x29, #-28]
  4021f0:	cmp	w9, #0x0
  4021f4:	cset	w9, ge  // ge = tcont
  4021f8:	tbnz	w9, #0, 402200 <make_volatile+0x248>
  4021fc:	b	40250c <make_volatile+0x554>
  402200:	ldr	x0, [sp, #48]
  402204:	mov	w1, #0x1ed                 	// #493
  402208:	bl	4011c0 <mkdir@plt>
  40220c:	cmp	w0, #0x0
  402210:	cset	w8, ge  // ge = tcont
  402214:	tbnz	w8, #0, 4022a0 <make_volatile+0x2e8>
  402218:	mov	w8, #0x3                   	// #3
  40221c:	stur	w8, [x29, #-68]
  402220:	bl	401160 <__errno_location@plt>
  402224:	ldr	w8, [x0]
  402228:	stur	w8, [x29, #-72]
  40222c:	stur	wzr, [x29, #-76]
  402230:	ldur	w0, [x29, #-76]
  402234:	bl	4010a0 <log_get_max_level_realm@plt>
  402238:	ldur	w8, [x29, #-68]
  40223c:	and	w8, w8, #0x7
  402240:	cmp	w0, w8
  402244:	b.lt	402278 <make_volatile+0x2c0>  // b.tstop
  402248:	ldur	w8, [x29, #-76]
  40224c:	ldur	w9, [x29, #-68]
  402250:	orr	w0, w9, w8, lsl #10
  402254:	ldur	w1, [x29, #-72]
  402258:	ldr	x2, [sp, #40]
  40225c:	mov	w3, #0x25                  	// #37
  402260:	ldr	x4, [sp, #32]
  402264:	adrp	x5, 402000 <make_volatile+0x48>
  402268:	add	x5, x5, #0xfc9
  40226c:	bl	4010b0 <log_internal_realm@plt>
  402270:	str	w0, [sp, #20]
  402274:	b	40228c <make_volatile+0x2d4>
  402278:	ldur	w0, [x29, #-72]
  40227c:	bl	4010c0 <abs@plt>
  402280:	mov	w8, wzr
  402284:	subs	w8, w8, w0, uxtb
  402288:	str	w8, [sp, #20]
  40228c:	ldr	w8, [sp, #20]
  402290:	stur	w8, [x29, #-80]
  402294:	ldur	w8, [x29, #-80]
  402298:	stur	w8, [x29, #-28]
  40229c:	b	4024fc <make_volatile+0x544>
  4022a0:	ldur	x1, [x29, #-24]
  4022a4:	mov	w0, #0x3                   	// #3
  4022a8:	ldr	x2, [sp, #48]
  4022ac:	mov	x8, xzr
  4022b0:	mov	x3, x8
  4022b4:	mov	x4, #0x5000                	// #20480
  4022b8:	mov	x5, x8
  4022bc:	bl	4011b0 <mount_verbose@plt>
  4022c0:	stur	w0, [x29, #-28]
  4022c4:	ldur	w9, [x29, #-28]
  4022c8:	cmp	w9, #0x0
  4022cc:	cset	w9, ge  // ge = tcont
  4022d0:	tbnz	w9, #0, 4022d8 <make_volatile+0x320>
  4022d4:	b	4024fc <make_volatile+0x544>
  4022d8:	ldr	x0, [sp, #48]
  4022dc:	mov	x8, #0x1                   	// #1
  4022e0:	mov	x1, x8
  4022e4:	mov	x2, x8
  4022e8:	mov	x8, xzr
  4022ec:	mov	x3, x8
  4022f0:	bl	4011d0 <bind_remount_recursive@plt>
  4022f4:	stur	w0, [x29, #-28]
  4022f8:	ldur	w9, [x29, #-28]
  4022fc:	cmp	w9, #0x0
  402300:	cset	w9, ge  // ge = tcont
  402304:	tbnz	w9, #0, 402384 <make_volatile+0x3cc>
  402308:	mov	w8, #0x3                   	// #3
  40230c:	stur	w8, [x29, #-84]
  402310:	ldur	w8, [x29, #-28]
  402314:	stur	w8, [x29, #-88]
  402318:	stur	wzr, [x29, #-92]
  40231c:	ldur	w0, [x29, #-92]
  402320:	bl	4010a0 <log_get_max_level_realm@plt>
  402324:	ldur	w8, [x29, #-84]
  402328:	and	w8, w8, #0x7
  40232c:	cmp	w0, w8
  402330:	b.lt	402364 <make_volatile+0x3ac>  // b.tstop
  402334:	ldur	w8, [x29, #-92]
  402338:	ldur	w9, [x29, #-84]
  40233c:	orr	w0, w9, w8, lsl #10
  402340:	ldur	w1, [x29, #-88]
  402344:	ldr	x2, [sp, #40]
  402348:	mov	w3, #0x2f                  	// #47
  40234c:	ldr	x4, [sp, #32]
  402350:	adrp	x5, 402000 <make_volatile+0x48>
  402354:	add	x5, x5, #0xfed
  402358:	bl	4010b0 <log_internal_realm@plt>
  40235c:	str	w0, [sp, #16]
  402360:	b	402378 <make_volatile+0x3c0>
  402364:	ldur	w0, [x29, #-88]
  402368:	bl	4010c0 <abs@plt>
  40236c:	mov	w8, wzr
  402370:	subs	w8, w8, w0, uxtb
  402374:	str	w8, [sp, #16]
  402378:	ldr	w8, [sp, #16]
  40237c:	str	w8, [sp, #96]
  402380:	b	4024fc <make_volatile+0x544>
  402384:	ldur	x0, [x29, #-16]
  402388:	mov	w8, wzr
  40238c:	mov	w1, w8
  402390:	bl	4011e0 <umount_recursive@plt>
  402394:	stur	w0, [x29, #-28]
  402398:	ldur	w8, [x29, #-28]
  40239c:	cmp	w8, #0x0
  4023a0:	cset	w8, ge  // ge = tcont
  4023a4:	tbnz	w8, #0, 402428 <make_volatile+0x470>
  4023a8:	mov	w8, #0x3                   	// #3
  4023ac:	str	w8, [sp, #92]
  4023b0:	ldur	w8, [x29, #-28]
  4023b4:	str	w8, [sp, #88]
  4023b8:	str	wzr, [sp, #84]
  4023bc:	ldr	w0, [sp, #84]
  4023c0:	bl	4010a0 <log_get_max_level_realm@plt>
  4023c4:	ldr	w8, [sp, #92]
  4023c8:	and	w8, w8, #0x7
  4023cc:	cmp	w0, w8
  4023d0:	b.lt	402408 <make_volatile+0x450>  // b.tstop
  4023d4:	ldr	w8, [sp, #84]
  4023d8:	ldr	w9, [sp, #92]
  4023dc:	orr	w0, w9, w8, lsl #10
  4023e0:	ldr	w1, [sp, #88]
  4023e4:	ldur	x6, [x29, #-16]
  4023e8:	ldr	x2, [sp, #40]
  4023ec:	mov	w3, #0x35                  	// #53
  4023f0:	ldr	x4, [sp, #32]
  4023f4:	adrp	x5, 403000 <_fini+0x3f4>
  4023f8:	add	x5, x5, #0x12
  4023fc:	bl	4010b0 <log_internal_realm@plt>
  402400:	str	w0, [sp, #12]
  402404:	b	40241c <make_volatile+0x464>
  402408:	ldr	w0, [sp, #88]
  40240c:	bl	4010c0 <abs@plt>
  402410:	mov	w8, wzr
  402414:	subs	w8, w8, w0, uxtb
  402418:	str	w8, [sp, #12]
  40241c:	ldr	w8, [sp, #12]
  402420:	str	w8, [sp, #80]
  402424:	b	4024fc <make_volatile+0x544>
  402428:	mov	x8, xzr
  40242c:	mov	x0, x8
  402430:	adrp	x1, 402000 <make_volatile+0x48>
  402434:	add	x1, x1, #0xd3e
  402438:	mov	x2, x8
  40243c:	mov	x3, #0x4000                	// #16384
  402440:	movk	x3, #0x8, lsl #16
  402444:	mov	x4, x8
  402448:	bl	4011f0 <mount@plt>
  40244c:	cmp	w0, #0x0
  402450:	cset	w9, ge  // ge = tcont
  402454:	tbnz	w9, #0, 4024d8 <make_volatile+0x520>
  402458:	mov	w8, #0x4                   	// #4
  40245c:	str	w8, [sp, #76]
  402460:	bl	401160 <__errno_location@plt>
  402464:	ldr	w8, [x0]
  402468:	str	w8, [sp, #72]
  40246c:	str	wzr, [sp, #68]
  402470:	ldr	w0, [sp, #68]
  402474:	bl	4010a0 <log_get_max_level_realm@plt>
  402478:	ldr	w8, [sp, #76]
  40247c:	and	w8, w8, #0x7
  402480:	cmp	w0, w8
  402484:	b.lt	4024bc <make_volatile+0x504>  // b.tstop
  402488:	ldr	w8, [sp, #68]
  40248c:	ldr	w9, [sp, #76]
  402490:	orr	w0, w9, w8, lsl #10
  402494:	ldr	w1, [sp, #72]
  402498:	ldur	x6, [x29, #-16]
  40249c:	ldr	x2, [sp, #40]
  4024a0:	mov	w3, #0x3a                  	// #58
  4024a4:	ldr	x4, [sp, #32]
  4024a8:	adrp	x5, 403000 <_fini+0x3f4>
  4024ac:	add	x5, x5, #0x2b
  4024b0:	bl	4010b0 <log_internal_realm@plt>
  4024b4:	str	w0, [sp, #8]
  4024b8:	b	4024d0 <make_volatile+0x518>
  4024bc:	ldr	w0, [sp, #72]
  4024c0:	bl	4010c0 <abs@plt>
  4024c4:	mov	w8, wzr
  4024c8:	subs	w8, w8, w0, uxtb
  4024cc:	str	w8, [sp, #8]
  4024d0:	ldr	w8, [sp, #8]
  4024d4:	str	w8, [sp, #64]
  4024d8:	ldur	x2, [x29, #-16]
  4024dc:	mov	w0, #0x3                   	// #3
  4024e0:	ldr	x1, [sp, #56]
  4024e4:	mov	x8, xzr
  4024e8:	mov	x3, x8
  4024ec:	mov	x4, #0x2000                	// #8192
  4024f0:	mov	x5, x8
  4024f4:	bl	4011b0 <mount_verbose@plt>
  4024f8:	stur	w0, [x29, #-28]
  4024fc:	ldr	x0, [sp, #56]
  402500:	mov	w8, wzr
  402504:	mov	w1, w8
  402508:	bl	4011e0 <umount_recursive@plt>
  40250c:	ldr	x0, [sp, #56]
  402510:	bl	401200 <rmdir@plt>
  402514:	ldur	w8, [x29, #-28]
  402518:	stur	w8, [x29, #-4]
  40251c:	mov	w8, #0x1                   	// #1
  402520:	stur	w8, [x29, #-48]
  402524:	sub	x0, x29, #0x18
  402528:	bl	401f90 <freep>
  40252c:	ldur	w0, [x29, #-4]
  402530:	ldp	x29, x30, [sp, #192]
  402534:	add	sp, sp, #0xd0
  402538:	ret

000000000040253c <make_overlay>:
  40253c:	stp	x29, x30, [sp, #-16]!
  402540:	mov	x29, sp
  402544:	sub	sp, sp, #0xf0
  402548:	mov	x8, xzr
  40254c:	mov	w9, #0x0                   	// #0
  402550:	adrp	x10, 403000 <_fini+0x3f4>
  402554:	add	x10, x10, #0x7d
  402558:	adrp	x11, 402000 <make_volatile+0x48>
  40255c:	add	x11, x11, #0xc30
  402560:	add	x11, x11, #0x3
  402564:	adrp	x12, 403000 <_fini+0x3f4>
  402568:	add	x12, x12, #0x9a
  40256c:	adrp	x13, 403000 <_fini+0x3f4>
  402570:	add	x13, x13, #0x5e
  402574:	stur	x0, [x29, #-16]
  402578:	stur	x8, [x29, #-24]
  40257c:	sturb	w9, [x29, #-25]
  402580:	stur	x8, [x29, #-40]
  402584:	stur	x10, [x29, #-184]
  402588:	stur	x11, [x29, #-192]
  40258c:	stur	x12, [x29, #-200]
  402590:	stur	x13, [x29, #-208]
  402594:	ldur	x8, [x29, #-16]
  402598:	cmp	x8, #0x0
  40259c:	cset	w9, ne  // ne = any
  4025a0:	mov	w10, #0x1                   	// #1
  4025a4:	eor	w9, w9, #0x1
  4025a8:	eor	w9, w9, w10
  4025ac:	eor	w9, w9, w10
  4025b0:	and	w9, w9, #0x1
  4025b4:	mov	w0, w9
  4025b8:	sxtw	x8, w0
  4025bc:	cbz	x8, 4025e0 <make_overlay+0xa4>
  4025c0:	mov	w8, wzr
  4025c4:	mov	w0, w8
  4025c8:	adrp	x1, 402000 <make_volatile+0x48>
  4025cc:	add	x1, x1, #0xeee
  4025d0:	ldur	x2, [x29, #-192]
  4025d4:	mov	w3, #0x4d                  	// #77
  4025d8:	ldur	x4, [x29, #-208]
  4025dc:	bl	401170 <log_assert_failed_realm@plt>
  4025e0:	ldur	x0, [x29, #-184]
  4025e4:	mov	w1, #0x1c0                 	// #448
  4025e8:	bl	4011a0 <mkdir_p@plt>
  4025ec:	stur	w0, [x29, #-44]
  4025f0:	ldur	w8, [x29, #-44]
  4025f4:	cmp	w8, #0x0
  4025f8:	cset	w8, ge  // ge = tcont
  4025fc:	tbnz	w8, #0, 40268c <make_overlay+0x150>
  402600:	mov	w8, #0x3                   	// #3
  402604:	stur	w8, [x29, #-48]
  402608:	ldur	w8, [x29, #-44]
  40260c:	stur	w8, [x29, #-52]
  402610:	stur	wzr, [x29, #-56]
  402614:	ldur	w0, [x29, #-56]
  402618:	bl	4010a0 <log_get_max_level_realm@plt>
  40261c:	ldur	w8, [x29, #-48]
  402620:	and	w8, w8, #0x7
  402624:	cmp	w0, w8
  402628:	b.lt	40265c <make_overlay+0x120>  // b.tstop
  40262c:	ldur	w8, [x29, #-56]
  402630:	ldur	w9, [x29, #-48]
  402634:	orr	w0, w9, w8, lsl #10
  402638:	ldur	w1, [x29, #-52]
  40263c:	ldur	x2, [x29, #-192]
  402640:	mov	w3, #0x51                  	// #81
  402644:	ldur	x4, [x29, #-200]
  402648:	adrp	x5, 403000 <_fini+0x3f4>
  40264c:	add	x5, x5, #0xa7
  402650:	bl	4010b0 <log_internal_realm@plt>
  402654:	stur	w0, [x29, #-212]
  402658:	b	402670 <make_overlay+0x134>
  40265c:	ldur	w0, [x29, #-52]
  402660:	bl	4010c0 <abs@plt>
  402664:	mov	w8, wzr
  402668:	subs	w8, w8, w0, uxtb
  40266c:	stur	w8, [x29, #-212]
  402670:	ldur	w8, [x29, #-212]
  402674:	stur	w8, [x29, #-60]
  402678:	ldur	w8, [x29, #-60]
  40267c:	stur	w8, [x29, #-4]
  402680:	mov	w8, #0x1                   	// #1
  402684:	stur	w8, [x29, #-64]
  402688:	b	402ad4 <make_overlay+0x598>
  40268c:	mov	w0, #0x3                   	// #3
  402690:	adrp	x8, 402000 <make_volatile+0x48>
  402694:	add	x8, x8, #0xf98
  402698:	mov	x1, x8
  40269c:	ldur	x2, [x29, #-184]
  4026a0:	mov	x3, x8
  4026a4:	mov	x4, #0x1000000             	// #16777216
  4026a8:	adrp	x5, 402000 <make_volatile+0x48>
  4026ac:	add	x5, x5, #0xf9e
  4026b0:	bl	4011b0 <mount_verbose@plt>
  4026b4:	stur	w0, [x29, #-44]
  4026b8:	ldur	w9, [x29, #-44]
  4026bc:	cmp	w9, #0x0
  4026c0:	cset	w9, ge  // ge = tcont
  4026c4:	tbnz	w9, #0, 4026cc <make_overlay+0x190>
  4026c8:	b	402aa8 <make_overlay+0x56c>
  4026cc:	mov	w8, #0x1                   	// #1
  4026d0:	sturb	w8, [x29, #-25]
  4026d4:	adrp	x0, 403000 <_fini+0x3f4>
  4026d8:	add	x0, x0, #0xd5
  4026dc:	mov	w1, #0x1ed                 	// #493
  4026e0:	bl	4011c0 <mkdir@plt>
  4026e4:	cmp	w0, #0x0
  4026e8:	cset	w8, ge  // ge = tcont
  4026ec:	tbnz	w8, #0, 402778 <make_overlay+0x23c>
  4026f0:	mov	w8, #0x3                   	// #3
  4026f4:	stur	w8, [x29, #-68]
  4026f8:	bl	401160 <__errno_location@plt>
  4026fc:	ldr	w8, [x0]
  402700:	stur	w8, [x29, #-72]
  402704:	stur	wzr, [x29, #-76]
  402708:	ldur	w0, [x29, #-76]
  40270c:	bl	4010a0 <log_get_max_level_realm@plt>
  402710:	ldur	w8, [x29, #-68]
  402714:	and	w8, w8, #0x7
  402718:	cmp	w0, w8
  40271c:	b.lt	402750 <make_overlay+0x214>  // b.tstop
  402720:	ldur	w8, [x29, #-76]
  402724:	ldur	w9, [x29, #-68]
  402728:	orr	w0, w9, w8, lsl #10
  40272c:	ldur	w1, [x29, #-72]
  402730:	ldur	x2, [x29, #-192]
  402734:	mov	w3, #0x5a                  	// #90
  402738:	ldur	x4, [x29, #-200]
  40273c:	adrp	x5, 403000 <_fini+0x3f4>
  402740:	add	x5, x5, #0xf8
  402744:	bl	4010b0 <log_internal_realm@plt>
  402748:	stur	w0, [x29, #-216]
  40274c:	b	402764 <make_overlay+0x228>
  402750:	ldur	w0, [x29, #-72]
  402754:	bl	4010c0 <abs@plt>
  402758:	mov	w8, wzr
  40275c:	subs	w8, w8, w0, uxtb
  402760:	stur	w8, [x29, #-216]
  402764:	ldur	w8, [x29, #-216]
  402768:	stur	w8, [x29, #-80]
  40276c:	ldur	w8, [x29, #-80]
  402770:	stur	w8, [x29, #-44]
  402774:	b	402aa8 <make_overlay+0x56c>
  402778:	adrp	x0, 403000 <_fini+0x3f4>
  40277c:	add	x0, x0, #0x130
  402780:	mov	w1, #0x1ed                 	// #493
  402784:	bl	4011c0 <mkdir@plt>
  402788:	cmp	w0, #0x0
  40278c:	cset	w8, ge  // ge = tcont
  402790:	tbnz	w8, #0, 40281c <make_overlay+0x2e0>
  402794:	mov	w8, #0x3                   	// #3
  402798:	stur	w8, [x29, #-84]
  40279c:	bl	401160 <__errno_location@plt>
  4027a0:	ldr	w8, [x0]
  4027a4:	stur	w8, [x29, #-88]
  4027a8:	stur	wzr, [x29, #-92]
  4027ac:	ldur	w0, [x29, #-92]
  4027b0:	bl	4010a0 <log_get_max_level_realm@plt>
  4027b4:	ldur	w8, [x29, #-84]
  4027b8:	and	w8, w8, #0x7
  4027bc:	cmp	w0, w8
  4027c0:	b.lt	4027f4 <make_overlay+0x2b8>  // b.tstop
  4027c4:	ldur	w8, [x29, #-92]
  4027c8:	ldur	w9, [x29, #-84]
  4027cc:	orr	w0, w9, w8, lsl #10
  4027d0:	ldur	w1, [x29, #-88]
  4027d4:	ldur	x2, [x29, #-192]
  4027d8:	mov	w3, #0x5f                  	// #95
  4027dc:	ldur	x4, [x29, #-200]
  4027e0:	adrp	x5, 403000 <_fini+0x3f4>
  4027e4:	add	x5, x5, #0x152
  4027e8:	bl	4010b0 <log_internal_realm@plt>
  4027ec:	stur	w0, [x29, #-220]
  4027f0:	b	402808 <make_overlay+0x2cc>
  4027f4:	ldur	w0, [x29, #-88]
  4027f8:	bl	4010c0 <abs@plt>
  4027fc:	mov	w8, wzr
  402800:	subs	w8, w8, w0, uxtb
  402804:	stur	w8, [x29, #-220]
  402808:	ldur	w8, [x29, #-220]
  40280c:	stur	w8, [x29, #-96]
  402810:	ldur	w8, [x29, #-96]
  402814:	stur	w8, [x29, #-44]
  402818:	b	402aa8 <make_overlay+0x56c>
  40281c:	ldur	x0, [x29, #-16]
  402820:	adrp	x1, 403000 <_fini+0x3f4>
  402824:	add	x1, x1, #0x189
  402828:	bl	401210 <shell_escape@plt>
  40282c:	stur	x0, [x29, #-24]
  402830:	ldur	x8, [x29, #-24]
  402834:	cbnz	x8, 402858 <make_overlay+0x31c>
  402838:	mov	w8, wzr
  40283c:	mov	w0, w8
  402840:	ldur	x1, [x29, #-192]
  402844:	mov	w2, #0x65                  	// #101
  402848:	ldur	x3, [x29, #-200]
  40284c:	bl	401220 <log_oom_internal@plt>
  402850:	stur	w0, [x29, #-44]
  402854:	b	402aa8 <make_overlay+0x56c>
  402858:	sub	x8, x29, #0x78
  40285c:	adrp	x9, 403000 <_fini+0x3f4>
  402860:	add	x9, x9, #0x18c
  402864:	stur	x9, [x29, #-120]
  402868:	ldur	x9, [x29, #-24]
  40286c:	str	x9, [x8, #8]
  402870:	adrp	x9, 403000 <_fini+0x3f4>
  402874:	add	x9, x9, #0x196
  402878:	str	x9, [x8, #16]
  40287c:	stur	xzr, [x29, #-144]
  402880:	stur	xzr, [x29, #-152]
  402884:	ldur	x8, [x29, #-152]
  402888:	mov	w9, #0x0                   	// #0
  40288c:	cmp	x8, #0x3
  402890:	stur	w9, [x29, #-224]
  402894:	b.cs	4028bc <make_overlay+0x380>  // b.hs, b.nlast
  402898:	ldur	x8, [x29, #-152]
  40289c:	mov	x9, #0x8                   	// #8
  4028a0:	mul	x8, x9, x8
  4028a4:	sub	x9, x29, #0x78
  4028a8:	add	x8, x9, x8
  4028ac:	ldr	x8, [x8]
  4028b0:	cmp	x8, #0x0
  4028b4:	cset	w10, ne  // ne = any
  4028b8:	stur	w10, [x29, #-224]
  4028bc:	ldur	w8, [x29, #-224]
  4028c0:	tbnz	w8, #0, 4028c8 <make_overlay+0x38c>
  4028c4:	b	402900 <make_overlay+0x3c4>
  4028c8:	ldur	x8, [x29, #-152]
  4028cc:	mov	x9, #0x8                   	// #8
  4028d0:	mul	x8, x9, x8
  4028d4:	sub	x9, x29, #0x78
  4028d8:	add	x8, x9, x8
  4028dc:	ldr	x0, [x8]
  4028e0:	bl	401230 <strlen@plt>
  4028e4:	ldur	x8, [x29, #-144]
  4028e8:	add	x8, x8, x0
  4028ec:	stur	x8, [x29, #-144]
  4028f0:	ldur	x8, [x29, #-152]
  4028f4:	add	x8, x8, #0x1
  4028f8:	stur	x8, [x29, #-152]
  4028fc:	b	402884 <make_overlay+0x348>
  402900:	ldur	x8, [x29, #-144]
  402904:	add	x8, x8, #0x1
  402908:	stur	x8, [x29, #-160]
  40290c:	ldur	x1, [x29, #-160]
  402910:	mov	x0, #0x1                   	// #1
  402914:	bl	402aec <size_multiply_overflow>
  402918:	mov	w8, #0x1                   	// #1
  40291c:	eor	w9, w0, #0x1
  402920:	eor	w9, w9, w8
  402924:	eor	w9, w9, w8
  402928:	eor	w8, w9, w8
  40292c:	and	w8, w8, #0x1
  402930:	mov	w1, w8
  402934:	sxtw	x10, w1
  402938:	cbz	x10, 40295c <make_overlay+0x420>
  40293c:	mov	w8, wzr
  402940:	mov	w0, w8
  402944:	adrp	x1, 403000 <_fini+0x3f4>
  402948:	add	x1, x1, #0x1ed
  40294c:	ldur	x2, [x29, #-192]
  402950:	mov	w3, #0x69                  	// #105
  402954:	ldur	x4, [x29, #-208]
  402958:	bl	401170 <log_assert_failed_realm@plt>
  40295c:	ldur	x8, [x29, #-160]
  402960:	mov	x9, #0x1                   	// #1
  402964:	mul	x8, x9, x8
  402968:	cmp	x8, #0x400, lsl #12
  40296c:	cset	w10, ls  // ls = plast
  402970:	mov	w11, #0x1                   	// #1
  402974:	eor	w10, w10, #0x1
  402978:	eor	w10, w10, w11
  40297c:	eor	w10, w10, w11
  402980:	and	w10, w10, #0x1
  402984:	mov	w0, w10
  402988:	sxtw	x8, w0
  40298c:	cbz	x8, 4029b0 <make_overlay+0x474>
  402990:	mov	w8, wzr
  402994:	mov	w0, w8
  402998:	adrp	x1, 403000 <_fini+0x3f4>
  40299c:	add	x1, x1, #0x218
  4029a0:	ldur	x2, [x29, #-192]
  4029a4:	mov	w3, #0x69                  	// #105
  4029a8:	ldur	x4, [x29, #-208]
  4029ac:	bl	401170 <log_assert_failed_realm@plt>
  4029b0:	ldur	x8, [x29, #-160]
  4029b4:	mov	x9, #0x1                   	// #1
  4029b8:	mul	x8, x9, x8
  4029bc:	mul	x8, x8, x9
  4029c0:	add	x8, x8, #0xf
  4029c4:	and	x8, x8, #0xfffffffffffffff0
  4029c8:	mov	x9, sp
  4029cc:	subs	x8, x9, x8
  4029d0:	mov	sp, x8
  4029d4:	stur	x8, [x29, #-168]
  4029d8:	ldur	x8, [x29, #-168]
  4029dc:	stur	x8, [x29, #-128]
  4029e0:	stur	x8, [x29, #-136]
  4029e4:	stur	xzr, [x29, #-152]
  4029e8:	ldur	x8, [x29, #-152]
  4029ec:	mov	w9, #0x0                   	// #0
  4029f0:	cmp	x8, #0x3
  4029f4:	stur	w9, [x29, #-228]
  4029f8:	b.cs	402a20 <make_overlay+0x4e4>  // b.hs, b.nlast
  4029fc:	ldur	x8, [x29, #-152]
  402a00:	mov	x9, #0x8                   	// #8
  402a04:	mul	x8, x9, x8
  402a08:	sub	x9, x29, #0x78
  402a0c:	add	x8, x9, x8
  402a10:	ldr	x8, [x8]
  402a14:	cmp	x8, #0x0
  402a18:	cset	w10, ne  // ne = any
  402a1c:	stur	w10, [x29, #-228]
  402a20:	ldur	w8, [x29, #-228]
  402a24:	tbnz	w8, #0, 402a2c <make_overlay+0x4f0>
  402a28:	b	402a60 <make_overlay+0x524>
  402a2c:	ldur	x0, [x29, #-136]
  402a30:	ldur	x8, [x29, #-152]
  402a34:	mov	x9, #0x8                   	// #8
  402a38:	mul	x8, x9, x8
  402a3c:	sub	x9, x29, #0x78
  402a40:	add	x8, x9, x8
  402a44:	ldr	x1, [x8]
  402a48:	bl	401240 <stpcpy@plt>
  402a4c:	stur	x0, [x29, #-136]
  402a50:	ldur	x8, [x29, #-152]
  402a54:	add	x8, x8, #0x1
  402a58:	stur	x8, [x29, #-152]
  402a5c:	b	4029e8 <make_overlay+0x4ac>
  402a60:	ldur	x8, [x29, #-136]
  402a64:	mov	w9, #0x0                   	// #0
  402a68:	strb	w9, [x8]
  402a6c:	ldur	x8, [x29, #-128]
  402a70:	stur	x8, [x29, #-176]
  402a74:	ldur	x8, [x29, #-176]
  402a78:	stur	x8, [x29, #-40]
  402a7c:	ldur	x2, [x29, #-16]
  402a80:	ldur	x5, [x29, #-40]
  402a84:	mov	w0, #0x3                   	// #3
  402a88:	adrp	x8, 403000 <_fini+0x3f4>
  402a8c:	add	x8, x8, #0x237
  402a90:	mov	x1, x8
  402a94:	mov	x3, x8
  402a98:	mov	x8, xzr
  402a9c:	mov	x4, x8
  402aa0:	bl	4011b0 <mount_verbose@plt>
  402aa4:	stur	w0, [x29, #-44]
  402aa8:	ldurb	w8, [x29, #-25]
  402aac:	tbnz	w8, #0, 402ab4 <make_overlay+0x578>
  402ab0:	b	402abc <make_overlay+0x580>
  402ab4:	ldur	x0, [x29, #-184]
  402ab8:	bl	401250 <umount_verbose@plt>
  402abc:	ldur	x0, [x29, #-184]
  402ac0:	bl	401200 <rmdir@plt>
  402ac4:	ldur	w8, [x29, #-44]
  402ac8:	stur	w8, [x29, #-4]
  402acc:	mov	w8, #0x1                   	// #1
  402ad0:	stur	w8, [x29, #-64]
  402ad4:	sub	x0, x29, #0x18
  402ad8:	bl	401f90 <freep>
  402adc:	ldur	w0, [x29, #-4]
  402ae0:	mov	sp, x29
  402ae4:	ldp	x29, x30, [sp], #16
  402ae8:	ret

0000000000402aec <size_multiply_overflow>:
  402aec:	sub	sp, sp, #0x20
  402af0:	str	x0, [sp, #24]
  402af4:	str	x1, [sp, #16]
  402af8:	ldr	x8, [sp, #16]
  402afc:	mov	w9, #0x0                   	// #0
  402b00:	str	w9, [sp, #12]
  402b04:	cbz	x8, 402b24 <size_multiply_overflow+0x38>
  402b08:	ldr	x8, [sp, #24]
  402b0c:	ldr	x9, [sp, #16]
  402b10:	mov	x10, #0xffffffffffffffff    	// #-1
  402b14:	udiv	x9, x10, x9
  402b18:	cmp	x8, x9
  402b1c:	cset	w11, hi  // hi = pmore
  402b20:	str	w11, [sp, #12]
  402b24:	ldr	w8, [sp, #12]
  402b28:	mov	w9, #0x1                   	// #1
  402b2c:	eor	w8, w8, #0x1
  402b30:	eor	w8, w8, w9
  402b34:	and	w8, w8, #0x1
  402b38:	mov	w0, w8
  402b3c:	sxtw	x10, w0
  402b40:	cmp	x10, #0x0
  402b44:	cset	w8, ne  // ne = any
  402b48:	and	w0, w8, #0x1
  402b4c:	add	sp, sp, #0x20
  402b50:	ret

0000000000402b54 <ALIGN_TO>:
  402b54:	sub	sp, sp, #0x10
  402b58:	str	x0, [sp, #8]
  402b5c:	str	x1, [sp]
  402b60:	ldr	x8, [sp, #8]
  402b64:	ldr	x9, [sp]
  402b68:	add	x8, x8, x9
  402b6c:	subs	x8, x8, #0x1
  402b70:	ldr	x9, [sp]
  402b74:	subs	x9, x9, #0x1
  402b78:	bic	x0, x8, x9
  402b7c:	add	sp, sp, #0x10
  402b80:	ret
  402b84:	udf	#0

0000000000402b88 <__libc_csu_init>:
  402b88:	stp	x29, x30, [sp, #-64]!
  402b8c:	mov	x29, sp
  402b90:	stp	x19, x20, [sp, #16]
  402b94:	adrp	x20, 41f000 <__FRAME_END__+0x1bcd0>
  402b98:	add	x20, x20, #0xc88
  402b9c:	stp	x21, x22, [sp, #32]
  402ba0:	adrp	x21, 41f000 <__FRAME_END__+0x1bcd0>
  402ba4:	add	x21, x21, #0xc80
  402ba8:	sub	x20, x20, x21
  402bac:	mov	w22, w0
  402bb0:	stp	x23, x24, [sp, #48]
  402bb4:	mov	x23, x1
  402bb8:	mov	x24, x2
  402bbc:	bl	400fe8 <_init>
  402bc0:	cmp	xzr, x20, asr #3
  402bc4:	b.eq	402bf0 <__libc_csu_init+0x68>  // b.none
  402bc8:	asr	x20, x20, #3
  402bcc:	mov	x19, #0x0                   	// #0
  402bd0:	ldr	x3, [x21, x19, lsl #3]
  402bd4:	mov	x2, x24
  402bd8:	add	x19, x19, #0x1
  402bdc:	mov	x1, x23
  402be0:	mov	w0, w22
  402be4:	blr	x3
  402be8:	cmp	x20, x19
  402bec:	b.ne	402bd0 <__libc_csu_init+0x48>  // b.any
  402bf0:	ldp	x19, x20, [sp, #16]
  402bf4:	ldp	x21, x22, [sp, #32]
  402bf8:	ldp	x23, x24, [sp, #48]
  402bfc:	ldp	x29, x30, [sp], #64
  402c00:	ret
  402c04:	nop

0000000000402c08 <__libc_csu_fini>:
  402c08:	ret

Disassembly of section .fini:

0000000000402c0c <_fini>:
  402c0c:	stp	x29, x30, [sp, #-16]!
  402c10:	mov	x29, sp
  402c14:	ldp	x29, x30, [sp], #16
  402c18:	ret
