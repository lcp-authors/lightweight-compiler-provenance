In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libcom_err.a_gcc_-O0:

error_message.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <setup_et_lock>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	mov	w2, #0x1                   	// #1
   c:	mov	w1, #0x0                   	// #0
  10:	adrp	x0, 0 <setup_et_lock>
  14:	add	x0, x0, #0x0
  18:	bl	0 <sem_init>
  1c:	adrp	x0, 0 <setup_et_lock>
  20:	add	x0, x0, #0x0
  24:	mov	w1, #0x1                   	// #1
  28:	str	w1, [x0]
  2c:	nop
  30:	ldp	x29, x30, [sp], #16
  34:	ret

0000000000000038 <fini_et_lock>:
  38:	stp	x29, x30, [sp, #-16]!
  3c:	mov	x29, sp
  40:	adrp	x0, 0 <setup_et_lock>
  44:	add	x0, x0, #0x0
  48:	bl	0 <sem_destroy>
  4c:	adrp	x0, 0 <setup_et_lock>
  50:	add	x0, x0, #0x0
  54:	str	wzr, [x0]
  58:	nop
  5c:	ldp	x29, x30, [sp], #16
  60:	ret

0000000000000064 <et_list_lock>:
  64:	stp	x29, x30, [sp, #-16]!
  68:	mov	x29, sp
  6c:	adrp	x0, 0 <setup_et_lock>
  70:	add	x0, x0, #0x0
  74:	ldr	w0, [x0]
  78:	cmp	w0, #0x0
  7c:	b.ne	84 <et_list_lock+0x20>  // b.any
  80:	bl	0 <setup_et_lock>
  84:	adrp	x0, 0 <setup_et_lock>
  88:	add	x0, x0, #0x0
  8c:	bl	0 <sem_wait>
  90:	ldp	x29, x30, [sp], #16
  94:	ret

0000000000000098 <et_list_unlock>:
  98:	stp	x29, x30, [sp, #-16]!
  9c:	mov	x29, sp
  a0:	adrp	x0, 0 <setup_et_lock>
  a4:	add	x0, x0, #0x0
  a8:	ldr	w0, [x0]
  ac:	cmp	w0, #0x0
  b0:	b.eq	c4 <et_list_unlock+0x2c>  // b.none
  b4:	adrp	x0, 0 <setup_et_lock>
  b8:	add	x0, x0, #0x0
  bc:	bl	0 <sem_post>
  c0:	b	c8 <et_list_unlock+0x30>
  c4:	mov	w0, #0x0                   	// #0
  c8:	ldp	x29, x30, [sp], #16
  cc:	ret

00000000000000d0 <set_com_err_gettext>:
  d0:	sub	sp, sp, #0x20
  d4:	str	x0, [sp, #8]
  d8:	adrp	x0, 0 <setup_et_lock>
  dc:	add	x0, x0, #0x0
  e0:	ldr	x0, [x0]
  e4:	str	x0, [sp, #24]
  e8:	adrp	x0, 0 <setup_et_lock>
  ec:	add	x0, x0, #0x0
  f0:	ldr	x1, [sp, #8]
  f4:	str	x1, [x0]
  f8:	ldr	x0, [sp, #24]
  fc:	add	sp, sp, #0x20
 100:	ret

0000000000000104 <error_message>:
 104:	stp	x29, x30, [sp, #-96]!
 108:	mov	x29, sp
 10c:	str	x0, [sp, #24]
 110:	str	wzr, [sp, #76]
 114:	ldr	x0, [sp, #24]
 118:	and	w0, w0, #0xff
 11c:	str	w0, [sp, #92]
 120:	ldrsw	x0, [sp, #92]
 124:	ldr	x1, [sp, #24]
 128:	sub	x0, x1, x0
 12c:	str	x0, [sp, #56]
 130:	ldr	x0, [sp, #56]
 134:	cmp	x0, #0x0
 138:	b.ne	15c <error_message+0x58>  // b.any
 13c:	ldr	w0, [sp, #92]
 140:	bl	0 <strerror>
 144:	str	x0, [sp, #64]
 148:	ldr	x0, [sp, #64]
 14c:	cmp	x0, #0x0
 150:	b.eq	2f0 <error_message+0x1ec>  // b.none
 154:	ldr	x0, [sp, #64]
 158:	b	4e4 <error_message+0x3e0>
 15c:	bl	64 <et_list_lock>
 160:	adrp	x0, 0 <setup_et_lock>
 164:	add	x0, x0, #0x0
 168:	ldr	x0, [x0]
 16c:	str	x0, [sp, #80]
 170:	b	210 <error_message+0x10c>
 174:	ldr	x0, [sp, #80]
 178:	ldr	x0, [x0, #8]
 17c:	ldr	x1, [x0, #8]
 180:	ldr	x0, [sp, #56]
 184:	eor	x0, x1, x0
 188:	and	x0, x0, #0xffffff
 18c:	cmp	x0, #0x0
 190:	b.ne	204 <error_message+0x100>  // b.any
 194:	ldr	x0, [sp, #80]
 198:	ldr	x0, [x0, #8]
 19c:	ldr	w0, [x0, #16]
 1a0:	ldr	w1, [sp, #92]
 1a4:	cmp	w1, w0
 1a8:	b.ge	220 <error_message+0x11c>  // b.tcont
 1ac:	ldr	x0, [sp, #80]
 1b0:	ldr	x0, [x0, #8]
 1b4:	ldr	x1, [x0]
 1b8:	ldrsw	x0, [sp, #92]
 1bc:	lsl	x0, x0, #3
 1c0:	add	x0, x1, x0
 1c4:	ldr	x0, [x0]
 1c8:	str	x0, [sp, #48]
 1cc:	bl	98 <et_list_unlock>
 1d0:	adrp	x0, 0 <setup_et_lock>
 1d4:	add	x0, x0, #0x0
 1d8:	ldr	x0, [x0]
 1dc:	cmp	x0, #0x0
 1e0:	b.eq	1fc <error_message+0xf8>  // b.none
 1e4:	adrp	x0, 0 <setup_et_lock>
 1e8:	add	x0, x0, #0x0
 1ec:	ldr	x1, [x0]
 1f0:	ldr	x0, [sp, #48]
 1f4:	blr	x1
 1f8:	b	4e4 <error_message+0x3e0>
 1fc:	ldr	x0, [sp, #48]
 200:	b	4e4 <error_message+0x3e0>
 204:	ldr	x0, [sp, #80]
 208:	ldr	x0, [x0]
 20c:	str	x0, [sp, #80]
 210:	ldr	x0, [sp, #80]
 214:	cmp	x0, #0x0
 218:	b.ne	174 <error_message+0x70>  // b.any
 21c:	b	224 <error_message+0x120>
 220:	nop
 224:	adrp	x0, 8 <setup_et_lock+0x8>
 228:	add	x0, x0, #0x0
 22c:	ldr	x0, [x0]
 230:	str	x0, [sp, #80]
 234:	b	2d4 <error_message+0x1d0>
 238:	ldr	x0, [sp, #80]
 23c:	ldr	x0, [x0, #8]
 240:	ldr	x1, [x0, #8]
 244:	ldr	x0, [sp, #56]
 248:	eor	x0, x1, x0
 24c:	and	x0, x0, #0xffffff
 250:	cmp	x0, #0x0
 254:	b.ne	2c8 <error_message+0x1c4>  // b.any
 258:	ldr	x0, [sp, #80]
 25c:	ldr	x0, [x0, #8]
 260:	ldr	w0, [x0, #16]
 264:	ldr	w1, [sp, #92]
 268:	cmp	w1, w0
 26c:	b.ge	2e4 <error_message+0x1e0>  // b.tcont
 270:	ldr	x0, [sp, #80]
 274:	ldr	x0, [x0, #8]
 278:	ldr	x1, [x0]
 27c:	ldrsw	x0, [sp, #92]
 280:	lsl	x0, x0, #3
 284:	add	x0, x1, x0
 288:	ldr	x0, [x0]
 28c:	str	x0, [sp, #40]
 290:	bl	98 <et_list_unlock>
 294:	adrp	x0, 0 <setup_et_lock>
 298:	add	x0, x0, #0x0
 29c:	ldr	x0, [x0]
 2a0:	cmp	x0, #0x0
 2a4:	b.eq	2c0 <error_message+0x1bc>  // b.none
 2a8:	adrp	x0, 0 <setup_et_lock>
 2ac:	add	x0, x0, #0x0
 2b0:	ldr	x1, [x0]
 2b4:	ldr	x0, [sp, #40]
 2b8:	blr	x1
 2bc:	b	4e4 <error_message+0x3e0>
 2c0:	ldr	x0, [sp, #40]
 2c4:	b	4e4 <error_message+0x3e0>
 2c8:	ldr	x0, [sp, #80]
 2cc:	ldr	x0, [x0]
 2d0:	str	x0, [sp, #80]
 2d4:	ldr	x0, [sp, #80]
 2d8:	cmp	x0, #0x0
 2dc:	b.ne	238 <error_message+0x134>  // b.any
 2e0:	b	2e8 <error_message+0x1e4>
 2e4:	nop
 2e8:	bl	98 <et_list_unlock>
 2ec:	b	2f4 <error_message+0x1f0>
 2f0:	nop
 2f4:	mrs	x0, tpidr_el0
 2f8:	add	x2, x0, #0x0, lsl #12
 2fc:	add	x2, x2, #0x0
 300:	adrp	x0, 0 <setup_et_lock>
 304:	add	x1, x0, #0x0
 308:	mov	x0, x2
 30c:	ldr	x2, [x1]
 310:	str	x2, [x0]
 314:	ldur	x1, [x1, #6]
 318:	stur	x1, [x0, #6]
 31c:	ldr	x0, [sp, #56]
 320:	cmp	x0, #0x0
 324:	b.eq	370 <error_message+0x26c>  // b.none
 328:	ldr	x0, [sp, #56]
 32c:	bl	0 <error_table_name>
 330:	mov	x1, x0
 334:	mrs	x0, tpidr_el0
 338:	add	x0, x0, #0x0, lsl #12
 33c:	add	x0, x0, #0x0
 340:	bl	0 <strcat>
 344:	mrs	x0, tpidr_el0
 348:	add	x0, x0, #0x0, lsl #12
 34c:	add	x0, x0, #0x0
 350:	bl	0 <strlen>
 354:	mov	x1, x0
 358:	mrs	x0, tpidr_el0
 35c:	add	x0, x0, #0x0, lsl #12
 360:	add	x0, x0, #0x0
 364:	add	x0, x1, x0
 368:	mov	w1, #0x20                  	// #32
 36c:	strh	w1, [x0]
 370:	mrs	x0, tpidr_el0
 374:	add	x0, x0, #0x0, lsl #12
 378:	add	x0, x0, #0x0
 37c:	str	x0, [sp, #64]
 380:	b	390 <error_message+0x28c>
 384:	ldr	x0, [sp, #64]
 388:	add	x0, x0, #0x1
 38c:	str	x0, [sp, #64]
 390:	ldr	x0, [sp, #64]
 394:	ldrb	w0, [x0]
 398:	cmp	w0, #0x0
 39c:	b.ne	384 <error_message+0x280>  // b.any
 3a0:	ldr	w0, [sp, #92]
 3a4:	cmp	w0, #0x63
 3a8:	b.le	424 <error_message+0x320>
 3ac:	ldr	w0, [sp, #92]
 3b0:	mov	w1, #0x851f                	// #34079
 3b4:	movk	w1, #0x51eb, lsl #16
 3b8:	smull	x1, w0, w1
 3bc:	lsr	x1, x1, #32
 3c0:	asr	w1, w1, #5
 3c4:	asr	w0, w0, #31
 3c8:	sub	w0, w1, w0
 3cc:	and	w1, w0, #0xff
 3d0:	ldr	x0, [sp, #64]
 3d4:	add	x2, x0, #0x1
 3d8:	str	x2, [sp, #64]
 3dc:	add	w1, w1, #0x30
 3e0:	and	w1, w1, #0xff
 3e4:	strb	w1, [x0]
 3e8:	ldr	w0, [sp, #92]
 3ec:	mov	w1, #0x851f                	// #34079
 3f0:	movk	w1, #0x51eb, lsl #16
 3f4:	smull	x1, w0, w1
 3f8:	lsr	x1, x1, #32
 3fc:	asr	w2, w1, #5
 400:	asr	w1, w0, #31
 404:	sub	w2, w2, w1
 408:	mov	w1, #0x64                  	// #100
 40c:	mul	w1, w2, w1
 410:	sub	w0, w0, w1
 414:	str	w0, [sp, #92]
 418:	ldr	w0, [sp, #76]
 41c:	add	w0, w0, #0x1
 420:	str	w0, [sp, #76]
 424:	ldr	w0, [sp, #76]
 428:	cmp	w0, #0x0
 42c:	b.ne	43c <error_message+0x338>  // b.any
 430:	ldr	w0, [sp, #92]
 434:	cmp	w0, #0x9
 438:	b.le	4b0 <error_message+0x3ac>
 43c:	ldr	w0, [sp, #92]
 440:	mov	w1, #0x6667                	// #26215
 444:	movk	w1, #0x6666, lsl #16
 448:	smull	x1, w0, w1
 44c:	lsr	x1, x1, #32
 450:	asr	w1, w1, #2
 454:	asr	w0, w0, #31
 458:	sub	w0, w1, w0
 45c:	and	w1, w0, #0xff
 460:	ldr	x0, [sp, #64]
 464:	add	x2, x0, #0x1
 468:	str	x2, [sp, #64]
 46c:	add	w1, w1, #0x30
 470:	and	w1, w1, #0xff
 474:	strb	w1, [x0]
 478:	ldr	w1, [sp, #92]
 47c:	mov	w0, #0x6667                	// #26215
 480:	movk	w0, #0x6666, lsl #16
 484:	smull	x0, w1, w0
 488:	lsr	x0, x0, #32
 48c:	asr	w2, w0, #2
 490:	asr	w0, w1, #31
 494:	sub	w2, w2, w0
 498:	mov	w0, w2
 49c:	lsl	w0, w0, #2
 4a0:	add	w0, w0, w2
 4a4:	lsl	w0, w0, #1
 4a8:	sub	w0, w1, w0
 4ac:	str	w0, [sp, #92]
 4b0:	ldr	w0, [sp, #92]
 4b4:	and	w1, w0, #0xff
 4b8:	ldr	x0, [sp, #64]
 4bc:	add	x2, x0, #0x1
 4c0:	str	x2, [sp, #64]
 4c4:	add	w1, w1, #0x30
 4c8:	and	w1, w1, #0xff
 4cc:	strb	w1, [x0]
 4d0:	ldr	x0, [sp, #64]
 4d4:	strb	wzr, [x0]
 4d8:	mrs	x0, tpidr_el0
 4dc:	add	x0, x0, #0x0, lsl #12
 4e0:	add	x0, x0, #0x0
 4e4:	ldp	x29, x30, [sp], #96
 4e8:	ret

00000000000004ec <safe_getenv>:
 4ec:	stp	x29, x30, [sp, #-48]!
 4f0:	mov	x29, sp
 4f4:	str	x19, [sp, #16]
 4f8:	str	x0, [sp, #40]
 4fc:	bl	0 <getuid>
 500:	mov	w19, w0
 504:	bl	0 <geteuid>
 508:	cmp	w19, w0
 50c:	b.ne	524 <safe_getenv+0x38>  // b.any
 510:	bl	0 <getgid>
 514:	mov	w19, w0
 518:	bl	0 <getegid>
 51c:	cmp	w19, w0
 520:	b.eq	52c <safe_getenv+0x40>  // b.none
 524:	mov	x0, #0x0                   	// #0
 528:	b	55c <safe_getenv+0x70>
 52c:	mov	w4, #0x0                   	// #0
 530:	mov	w3, #0x0                   	// #0
 534:	mov	w2, #0x0                   	// #0
 538:	mov	w1, #0x0                   	// #0
 53c:	mov	w0, #0x3                   	// #3
 540:	bl	0 <prctl>
 544:	cmp	w0, #0x0
 548:	b.ne	554 <safe_getenv+0x68>  // b.any
 54c:	mov	x0, #0x0                   	// #0
 550:	b	55c <safe_getenv+0x70>
 554:	ldr	x0, [sp, #40]
 558:	bl	0 <secure_getenv>
 55c:	ldr	x19, [sp, #16]
 560:	ldp	x29, x30, [sp], #48
 564:	ret

0000000000000568 <init_debug>:
 568:	stp	x29, x30, [sp, #-80]!
 56c:	mov	x29, sp
 570:	str	x19, [sp, #16]
 574:	adrp	x0, 0 <setup_et_lock>
 578:	add	x0, x0, #0x0
 57c:	ldr	w0, [x0]
 580:	and	w0, w0, #0x8000
 584:	cmp	w0, #0x0
 588:	b.ne	784 <init_debug+0x21c>  // b.any
 58c:	adrp	x0, 0 <setup_et_lock>
 590:	add	x0, x0, #0x0
 594:	bl	0 <getenv>
 598:	str	x0, [sp, #64]
 59c:	ldr	x0, [sp, #64]
 5a0:	cmp	x0, #0x0
 5a4:	b.eq	5f8 <init_debug+0x90>  // b.none
 5a8:	add	x0, sp, #0x28
 5ac:	mov	w2, #0x0                   	// #0
 5b0:	mov	x1, x0
 5b4:	ldr	x0, [sp, #64]
 5b8:	bl	0 <strtoul>
 5bc:	mov	w1, w0
 5c0:	adrp	x0, 0 <setup_et_lock>
 5c4:	add	x0, x0, #0x0
 5c8:	str	w1, [x0]
 5cc:	ldr	x0, [sp, #40]
 5d0:	ldrb	w0, [x0]
 5d4:	cmp	w0, #0x0
 5d8:	b.ne	5ec <init_debug+0x84>  // b.any
 5dc:	bl	0 <__errno_location>
 5e0:	ldr	w0, [x0]
 5e4:	cmp	w0, #0x0
 5e8:	b.eq	5f8 <init_debug+0x90>  // b.none
 5ec:	adrp	x0, 0 <setup_et_lock>
 5f0:	add	x0, x0, #0x0
 5f4:	str	wzr, [x0]
 5f8:	adrp	x0, 0 <setup_et_lock>
 5fc:	add	x0, x0, #0x0
 600:	ldr	w0, [x0]
 604:	orr	w1, w0, #0x8000
 608:	adrp	x0, 0 <setup_et_lock>
 60c:	add	x0, x0, #0x0
 610:	str	w1, [x0]
 614:	adrp	x0, 0 <setup_et_lock>
 618:	add	x0, x0, #0x0
 61c:	ldr	w0, [x0]
 620:	cmp	w0, #0x8, lsl #12
 624:	b.eq	78c <init_debug+0x224>  // b.none
 628:	adrp	x0, 0 <setup_et_lock>
 62c:	add	x0, x0, #0x0
 630:	bl	4ec <safe_getenv>
 634:	str	x0, [sp, #56]
 638:	ldr	x0, [sp, #56]
 63c:	cmp	x0, #0x0
 640:	b.eq	664 <init_debug+0xfc>  // b.none
 644:	adrp	x0, 0 <setup_et_lock>
 648:	add	x1, x0, #0x0
 64c:	ldr	x0, [sp, #56]
 650:	bl	0 <fopen>
 654:	mov	x1, x0
 658:	adrp	x0, 0 <setup_et_lock>
 65c:	add	x0, x0, #0x0
 660:	str	x1, [x0]
 664:	adrp	x0, 0 <setup_et_lock>
 668:	add	x0, x0, #0x0
 66c:	ldr	x0, [x0]
 670:	cmp	x0, #0x0
 674:	b.ne	69c <init_debug+0x134>  // b.any
 678:	adrp	x0, 0 <setup_et_lock>
 67c:	add	x1, x0, #0x0
 680:	adrp	x0, 0 <setup_et_lock>
 684:	add	x0, x0, #0x0
 688:	bl	0 <fopen>
 68c:	mov	x1, x0
 690:	adrp	x0, 0 <setup_et_lock>
 694:	add	x0, x0, #0x0
 698:	str	x1, [x0]
 69c:	adrp	x0, 0 <setup_et_lock>
 6a0:	add	x0, x0, #0x0
 6a4:	ldr	x0, [x0]
 6a8:	cmp	x0, #0x0
 6ac:	b.eq	770 <init_debug+0x208>  // b.none
 6b0:	adrp	x0, 0 <setup_et_lock>
 6b4:	add	x0, x0, #0x0
 6b8:	ldr	x0, [x0]
 6bc:	bl	0 <fileno>
 6c0:	str	w0, [sp, #52]
 6c4:	ldr	w0, [sp, #52]
 6c8:	cmp	w0, #0x0
 6cc:	b.lt	790 <init_debug+0x228>  // b.tstop
 6d0:	mov	w1, #0x1                   	// #1
 6d4:	ldr	w0, [sp, #52]
 6d8:	bl	0 <fcntl>
 6dc:	str	w0, [sp, #76]
 6e0:	ldr	w0, [sp, #76]
 6e4:	cmp	w0, #0x0
 6e8:	b.lt	708 <init_debug+0x1a0>  // b.tstop
 6ec:	ldr	w0, [sp, #76]
 6f0:	orr	w0, w0, #0x1
 6f4:	mov	w2, w0
 6f8:	mov	w1, #0x2                   	// #2
 6fc:	ldr	w0, [sp, #52]
 700:	bl	0 <fcntl>
 704:	str	w0, [sp, #76]
 708:	ldr	w0, [sp, #76]
 70c:	cmp	w0, #0x0
 710:	b.ge	790 <init_debug+0x228>  // b.tcont
 714:	adrp	x0, 0 <setup_et_lock>
 718:	add	x0, x0, #0x0
 71c:	ldr	x19, [x0]
 720:	bl	0 <__errno_location>
 724:	ldr	w0, [x0]
 728:	bl	0 <strerror>
 72c:	mov	x2, x0
 730:	adrp	x0, 0 <setup_et_lock>
 734:	add	x1, x0, #0x0
 738:	mov	x0, x19
 73c:	bl	0 <fprintf>
 740:	adrp	x0, 0 <setup_et_lock>
 744:	add	x0, x0, #0x0
 748:	ldr	x0, [x0]
 74c:	bl	0 <fclose>
 750:	adrp	x0, 0 <setup_et_lock>
 754:	add	x0, x0, #0x0
 758:	str	xzr, [x0]
 75c:	adrp	x0, 0 <setup_et_lock>
 760:	add	x0, x0, #0x0
 764:	mov	w1, #0x8000                	// #32768
 768:	str	w1, [x0]
 76c:	b	790 <init_debug+0x228>
 770:	adrp	x0, 0 <setup_et_lock>
 774:	add	x0, x0, #0x0
 778:	mov	w1, #0x8000                	// #32768
 77c:	str	w1, [x0]
 780:	b	790 <init_debug+0x228>
 784:	nop
 788:	b	790 <init_debug+0x228>
 78c:	nop
 790:	ldr	x19, [sp, #16]
 794:	ldp	x29, x30, [sp], #80
 798:	ret

000000000000079c <add_error_table>:
 79c:	stp	x29, x30, [sp, #-64]!
 7a0:	mov	x29, sp
 7a4:	str	x19, [sp, #16]
 7a8:	str	x0, [sp, #40]
 7ac:	mov	x0, #0x10                  	// #16
 7b0:	bl	0 <malloc>
 7b4:	str	x0, [sp, #56]
 7b8:	ldr	x0, [sp, #56]
 7bc:	cmp	x0, #0x0
 7c0:	b.ne	7cc <add_error_table+0x30>  // b.any
 7c4:	mov	x0, #0xc                   	// #12
 7c8:	b	874 <add_error_table+0xd8>
 7cc:	bl	64 <et_list_lock>
 7d0:	cmp	w0, #0x0
 7d4:	b.eq	7f0 <add_error_table+0x54>  // b.none
 7d8:	ldr	x0, [sp, #56]
 7dc:	bl	0 <free>
 7e0:	bl	0 <__errno_location>
 7e4:	ldr	w0, [x0]
 7e8:	sxtw	x0, w0
 7ec:	b	874 <add_error_table+0xd8>
 7f0:	ldr	x0, [sp, #56]
 7f4:	ldr	x1, [sp, #40]
 7f8:	str	x1, [x0, #8]
 7fc:	adrp	x0, 8 <setup_et_lock+0x8>
 800:	add	x0, x0, #0x0
 804:	ldr	x1, [x0]
 808:	ldr	x0, [sp, #56]
 80c:	str	x1, [x0]
 810:	adrp	x0, 8 <setup_et_lock+0x8>
 814:	add	x0, x0, #0x0
 818:	ldr	x1, [sp, #56]
 81c:	str	x1, [x0]
 820:	bl	568 <init_debug>
 824:	adrp	x0, 0 <setup_et_lock>
 828:	add	x0, x0, #0x0
 82c:	ldr	w0, [x0]
 830:	and	w0, w0, #0x1
 834:	cmp	w0, #0x0
 838:	b.eq	86c <add_error_table+0xd0>  // b.none
 83c:	adrp	x0, 0 <setup_et_lock>
 840:	add	x0, x0, #0x0
 844:	ldr	x19, [x0]
 848:	ldr	x0, [sp, #40]
 84c:	ldr	x0, [x0, #8]
 850:	bl	0 <error_table_name>
 854:	ldr	x3, [sp, #40]
 858:	mov	x2, x0
 85c:	adrp	x0, 0 <setup_et_lock>
 860:	add	x1, x0, #0x0
 864:	mov	x0, x19
 868:	bl	0 <fprintf>
 86c:	bl	98 <et_list_unlock>
 870:	mov	x0, #0x0                   	// #0
 874:	ldr	x19, [sp, #16]
 878:	ldp	x29, x30, [sp], #64
 87c:	ret

0000000000000880 <remove_error_table>:
 880:	stp	x29, x30, [sp, #-64]!
 884:	mov	x29, sp
 888:	str	x19, [sp, #16]
 88c:	str	x0, [sp, #40]
 890:	str	xzr, [sp, #48]
 894:	bl	64 <et_list_lock>
 898:	cmp	w0, #0x0
 89c:	b.eq	8a8 <remove_error_table+0x28>  // b.none
 8a0:	mov	x0, #0x2                   	// #2
 8a4:	b	9dc <remove_error_table+0x15c>
 8a8:	adrp	x0, 8 <setup_et_lock+0x8>
 8ac:	add	x0, x0, #0x0
 8b0:	ldr	x0, [x0]
 8b4:	str	x0, [sp, #56]
 8b8:	bl	568 <init_debug>
 8bc:	b	980 <remove_error_table+0x100>
 8c0:	ldr	x0, [sp, #56]
 8c4:	ldr	x0, [x0, #8]
 8c8:	ldr	x1, [x0, #8]
 8cc:	ldr	x0, [sp, #40]
 8d0:	ldr	x0, [x0, #8]
 8d4:	cmp	x1, x0
 8d8:	b.ne	96c <remove_error_table+0xec>  // b.any
 8dc:	ldr	x0, [sp, #48]
 8e0:	cmp	x0, #0x0
 8e4:	b.eq	8fc <remove_error_table+0x7c>  // b.none
 8e8:	ldr	x0, [sp, #56]
 8ec:	ldr	x1, [x0]
 8f0:	ldr	x0, [sp, #48]
 8f4:	str	x1, [x0]
 8f8:	b	910 <remove_error_table+0x90>
 8fc:	ldr	x0, [sp, #56]
 900:	ldr	x1, [x0]
 904:	adrp	x0, 8 <setup_et_lock+0x8>
 908:	add	x0, x0, #0x0
 90c:	str	x1, [x0]
 910:	ldr	x0, [sp, #56]
 914:	bl	0 <free>
 918:	adrp	x0, 0 <setup_et_lock>
 91c:	add	x0, x0, #0x0
 920:	ldr	w0, [x0]
 924:	and	w0, w0, #0x1
 928:	cmp	w0, #0x0
 92c:	b.eq	960 <remove_error_table+0xe0>  // b.none
 930:	adrp	x0, 0 <setup_et_lock>
 934:	add	x0, x0, #0x0
 938:	ldr	x19, [x0]
 93c:	ldr	x0, [sp, #40]
 940:	ldr	x0, [x0, #8]
 944:	bl	0 <error_table_name>
 948:	ldr	x3, [sp, #40]
 94c:	mov	x2, x0
 950:	adrp	x0, 0 <setup_et_lock>
 954:	add	x1, x0, #0x0
 958:	mov	x0, x19
 95c:	bl	0 <fprintf>
 960:	bl	98 <et_list_unlock>
 964:	mov	x0, #0x0                   	// #0
 968:	b	9dc <remove_error_table+0x15c>
 96c:	ldr	x0, [sp, #56]
 970:	str	x0, [sp, #48]
 974:	ldr	x0, [sp, #56]
 978:	ldr	x0, [x0]
 97c:	str	x0, [sp, #56]
 980:	ldr	x0, [sp, #56]
 984:	cmp	x0, #0x0
 988:	b.ne	8c0 <remove_error_table+0x40>  // b.any
 98c:	adrp	x0, 0 <setup_et_lock>
 990:	add	x0, x0, #0x0
 994:	ldr	w0, [x0]
 998:	and	w0, w0, #0x1
 99c:	cmp	w0, #0x0
 9a0:	b.eq	9d4 <remove_error_table+0x154>  // b.none
 9a4:	adrp	x0, 0 <setup_et_lock>
 9a8:	add	x0, x0, #0x0
 9ac:	ldr	x19, [x0]
 9b0:	ldr	x0, [sp, #40]
 9b4:	ldr	x0, [x0, #8]
 9b8:	bl	0 <error_table_name>
 9bc:	ldr	x3, [sp, #40]
 9c0:	mov	x2, x0
 9c4:	adrp	x0, 0 <setup_et_lock>
 9c8:	add	x1, x0, #0x0
 9cc:	mov	x0, x19
 9d0:	bl	0 <fprintf>
 9d4:	bl	98 <et_list_unlock>
 9d8:	mov	x0, #0x2                   	// #2
 9dc:	ldr	x19, [sp, #16]
 9e0:	ldp	x29, x30, [sp], #64
 9e4:	ret

00000000000009e8 <add_to_error_table>:
 9e8:	stp	x29, x30, [sp, #-32]!
 9ec:	mov	x29, sp
 9f0:	str	x0, [sp, #24]
 9f4:	ldr	x0, [sp, #24]
 9f8:	ldr	x0, [x0, #8]
 9fc:	bl	79c <add_error_table>
 a00:	nop
 a04:	ldp	x29, x30, [sp], #32
 a08:	ret

et_name.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <error_table_name>:
   0:	sub	sp, sp, #0x30
   4:	str	x0, [sp, #8]
   8:	adrp	x0, 0 <error_table_name>
   c:	add	x0, x0, #0x0
  10:	str	x0, [sp, #32]
  14:	ldr	x0, [sp, #8]
  18:	asr	x0, x0, #8
  1c:	str	x0, [sp, #8]
  20:	ldr	x0, [sp, #8]
  24:	and	x0, x0, #0xffffff
  28:	str	x0, [sp, #8]
  2c:	mov	w0, #0x4                   	// #4
  30:	str	w0, [sp, #44]
  34:	b	a0 <error_table_name+0xa0>
  38:	ldr	w1, [sp, #44]
  3c:	mov	w0, w1
  40:	lsl	w0, w0, #1
  44:	add	w0, w0, w1
  48:	lsl	w0, w0, #1
  4c:	mov	w1, w0
  50:	ldr	x0, [sp, #8]
  54:	asr	x0, x0, x1
  58:	and	w0, w0, #0x3f
  5c:	str	w0, [sp, #28]
  60:	ldr	w0, [sp, #28]
  64:	cmp	w0, #0x0
  68:	b.eq	94 <error_table_name+0x94>  // b.none
  6c:	ldr	w0, [sp, #28]
  70:	sub	w3, w0, #0x1
  74:	ldr	x0, [sp, #32]
  78:	add	x1, x0, #0x1
  7c:	str	x1, [sp, #32]
  80:	adrp	x1, 0 <error_table_name>
  84:	add	x2, x1, #0x0
  88:	sxtw	x1, w3
  8c:	ldrb	w1, [x2, x1]
  90:	strb	w1, [x0]
  94:	ldr	w0, [sp, #44]
  98:	sub	w0, w0, #0x1
  9c:	str	w0, [sp, #44]
  a0:	ldr	w0, [sp, #44]
  a4:	cmp	w0, #0x0
  a8:	b.ge	38 <error_table_name+0x38>  // b.tcont
  ac:	ldr	x0, [sp, #32]
  b0:	strb	wzr, [x0]
  b4:	adrp	x0, 0 <error_table_name>
  b8:	add	x0, x0, #0x0
  bc:	add	sp, sp, #0x30
  c0:	ret

init_et.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <init_error_table>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	w2, [sp, #28]
  14:	ldr	x0, [sp, #32]
  18:	cmp	x0, #0x0
  1c:	b.eq	38 <init_error_table+0x38>  // b.none
  20:	ldr	w0, [sp, #28]
  24:	cmp	w0, #0x0
  28:	b.eq	38 <init_error_table+0x38>  // b.none
  2c:	ldr	x0, [sp, #40]
  30:	cmp	x0, #0x0
  34:	b.ne	40 <init_error_table+0x40>  // b.any
  38:	mov	w0, #0x0                   	// #0
  3c:	b	bc <init_error_table+0xbc>
  40:	mov	x0, #0x28                  	// #40
  44:	bl	0 <malloc>
  48:	str	x0, [sp, #56]
  4c:	ldr	x0, [sp, #56]
  50:	cmp	x0, #0x0
  54:	b.ne	60 <init_error_table+0x60>  // b.any
  58:	mov	w0, #0xc                   	// #12
  5c:	b	bc <init_error_table+0xbc>
  60:	ldr	x0, [sp, #56]
  64:	add	x1, x0, #0x10
  68:	ldr	x0, [sp, #56]
  6c:	str	x1, [x0, #8]
  70:	ldr	x0, [sp, #56]
  74:	ldr	x1, [sp, #40]
  78:	str	x1, [x0, #16]
  7c:	ldr	x0, [sp, #56]
  80:	ldr	x1, [sp, #32]
  84:	str	x1, [x0, #24]
  88:	ldr	x0, [sp, #56]
  8c:	ldr	w1, [sp, #28]
  90:	str	w1, [x0, #32]
  94:	adrp	x0, 0 <_et_dynamic_list>
  98:	add	x0, x0, #0x0
  9c:	ldr	x1, [x0]
  a0:	ldr	x0, [sp, #56]
  a4:	str	x1, [x0]
  a8:	ldr	x1, [sp, #56]
  ac:	adrp	x0, 0 <_et_dynamic_list>
  b0:	add	x0, x0, #0x0
  b4:	str	x1, [x0]
  b8:	mov	w0, #0x0                   	// #0
  bc:	ldp	x29, x30, [sp], #64
  c0:	ret

com_err.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <default_com_err_proc>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	x0, [sp, #88]
  10:	str	x1, [sp, #80]
  14:	str	x2, [sp, #72]
  18:	mov	x19, x3
  1c:	mov	w0, #0x1                   	// #1
  20:	str	w0, [sp, #172]
  24:	adrp	x0, 0 <stderr>
  28:	add	x0, x0, #0x0
  2c:	ldr	x0, [x0]
  30:	bl	0 <fileno>
  34:	str	w0, [sp, #168]
  38:	ldr	x0, [sp, #88]
  3c:	cmp	x0, #0x0
  40:	b.eq	80 <default_com_err_proc+0x80>  // b.none
  44:	adrp	x0, 0 <stderr>
  48:	add	x0, x0, #0x0
  4c:	ldr	x0, [x0]
  50:	mov	x1, x0
  54:	ldr	x0, [sp, #88]
  58:	bl	0 <fputs>
  5c:	adrp	x0, 0 <stderr>
  60:	add	x0, x0, #0x0
  64:	ldr	x0, [x0]
  68:	mov	x3, x0
  6c:	mov	x2, #0x2                   	// #2
  70:	mov	x1, #0x1                   	// #1
  74:	adrp	x0, 0 <default_com_err_proc>
  78:	add	x0, x0, #0x0
  7c:	bl	0 <fwrite>
  80:	ldr	x0, [sp, #80]
  84:	cmp	x0, #0x0
  88:	b.eq	c8 <default_com_err_proc+0xc8>  // b.none
  8c:	ldr	x0, [sp, #80]
  90:	bl	0 <error_message>
  94:	mov	x2, x0
  98:	adrp	x0, 0 <stderr>
  9c:	add	x0, x0, #0x0
  a0:	ldr	x0, [x0]
  a4:	mov	x1, x0
  a8:	mov	x0, x2
  ac:	bl	0 <fputs>
  b0:	adrp	x0, 0 <stderr>
  b4:	add	x0, x0, #0x0
  b8:	ldr	x0, [x0]
  bc:	mov	x1, x0
  c0:	mov	w0, #0x20                  	// #32
  c4:	bl	0 <fputc>
  c8:	ldr	x0, [sp, #72]
  cc:	cmp	x0, #0x0
  d0:	b.eq	10c <default_com_err_proc+0x10c>  // b.none
  d4:	adrp	x0, 0 <stderr>
  d8:	add	x0, x0, #0x0
  dc:	ldr	x4, [x0]
  e0:	add	x2, sp, #0x20
  e4:	mov	x3, x19
  e8:	ldp	x0, x1, [x3]
  ec:	stp	x0, x1, [x2]
  f0:	ldp	x0, x1, [x3, #16]
  f4:	stp	x0, x1, [x2, #16]
  f8:	add	x0, sp, #0x20
  fc:	mov	x2, x0
 100:	ldr	x1, [sp, #72]
 104:	mov	x0, x4
 108:	bl	0 <vfprintf>
 10c:	ldr	w0, [sp, #168]
 110:	bl	0 <isatty>
 114:	cmp	w0, #0x0
 118:	b.ne	124 <default_com_err_proc+0x124>  // b.any
 11c:	str	wzr, [sp, #172]
 120:	b	160 <default_com_err_proc+0x160>
 124:	add	x0, sp, #0x68
 128:	mov	x1, x0
 12c:	ldr	w0, [sp, #168]
 130:	bl	0 <tcgetattr>
 134:	cmp	w0, #0x0
 138:	b.ne	160 <default_com_err_proc+0x160>  // b.any
 13c:	ldr	w0, [sp, #108]
 140:	and	w0, w0, #0x1
 144:	cmp	w0, #0x0
 148:	b.eq	160 <default_com_err_proc+0x160>  // b.none
 14c:	ldr	w0, [sp, #108]
 150:	and	w0, w0, #0x4
 154:	cmp	w0, #0x0
 158:	b.eq	160 <default_com_err_proc+0x160>  // b.none
 15c:	str	wzr, [sp, #172]
 160:	ldr	w0, [sp, #172]
 164:	cmp	w0, #0x0
 168:	b.eq	184 <default_com_err_proc+0x184>  // b.none
 16c:	adrp	x0, 0 <stderr>
 170:	add	x0, x0, #0x0
 174:	ldr	x0, [x0]
 178:	mov	x1, x0
 17c:	mov	w0, #0xd                   	// #13
 180:	bl	0 <fputc>
 184:	adrp	x0, 0 <stderr>
 188:	add	x0, x0, #0x0
 18c:	ldr	x0, [x0]
 190:	mov	x1, x0
 194:	mov	w0, #0xa                   	// #10
 198:	bl	0 <fputc>
 19c:	adrp	x0, 0 <stderr>
 1a0:	add	x0, x0, #0x0
 1a4:	ldr	x0, [x0]
 1a8:	bl	0 <fflush>
 1ac:	nop
 1b0:	ldr	x19, [sp, #16]
 1b4:	ldp	x29, x30, [sp], #176
 1b8:	ret

00000000000001bc <com_err_va>:
 1bc:	stp	x29, x30, [sp, #-96]!
 1c0:	mov	x29, sp
 1c4:	str	x19, [sp, #16]
 1c8:	str	x0, [sp, #88]
 1cc:	str	x1, [sp, #80]
 1d0:	str	x2, [sp, #72]
 1d4:	mov	x19, x3
 1d8:	adrp	x0, 0 <default_com_err_proc>
 1dc:	add	x0, x0, #0x0
 1e0:	ldr	x4, [x0]
 1e4:	add	x2, sp, #0x20
 1e8:	mov	x3, x19
 1ec:	ldp	x0, x1, [x3]
 1f0:	stp	x0, x1, [x2]
 1f4:	ldp	x0, x1, [x3, #16]
 1f8:	stp	x0, x1, [x2, #16]
 1fc:	add	x0, sp, #0x20
 200:	mov	x3, x0
 204:	ldr	x2, [sp, #72]
 208:	ldr	x1, [sp, #80]
 20c:	ldr	x0, [sp, #88]
 210:	blr	x4
 214:	nop
 218:	ldr	x19, [sp, #16]
 21c:	ldp	x29, x30, [sp], #96
 220:	ret

0000000000000224 <com_err>:
 224:	stp	x29, x30, [sp, #-288]!
 228:	mov	x29, sp
 22c:	str	x0, [sp, #72]
 230:	str	x1, [sp, #64]
 234:	str	x2, [sp, #56]
 238:	str	x3, [sp, #248]
 23c:	str	x4, [sp, #256]
 240:	str	x5, [sp, #264]
 244:	str	x6, [sp, #272]
 248:	str	x7, [sp, #280]
 24c:	str	q0, [sp, #112]
 250:	str	q1, [sp, #128]
 254:	str	q2, [sp, #144]
 258:	str	q3, [sp, #160]
 25c:	str	q4, [sp, #176]
 260:	str	q5, [sp, #192]
 264:	str	q6, [sp, #208]
 268:	str	q7, [sp, #224]
 26c:	adrp	x0, 0 <default_com_err_proc>
 270:	add	x0, x0, #0x0
 274:	ldr	x0, [x0]
 278:	cmp	x0, #0x0
 27c:	b.ne	294 <com_err+0x70>  // b.any
 280:	adrp	x0, 0 <default_com_err_proc>
 284:	add	x0, x0, #0x0
 288:	adrp	x1, 0 <default_com_err_proc>
 28c:	add	x1, x1, #0x0
 290:	str	x1, [x0]
 294:	add	x0, sp, #0x120
 298:	str	x0, [sp, #80]
 29c:	add	x0, sp, #0x120
 2a0:	str	x0, [sp, #88]
 2a4:	add	x0, sp, #0xf0
 2a8:	str	x0, [sp, #96]
 2ac:	mov	w0, #0xffffffd8            	// #-40
 2b0:	str	w0, [sp, #104]
 2b4:	mov	w0, #0xffffff80            	// #-128
 2b8:	str	w0, [sp, #108]
 2bc:	add	x2, sp, #0x10
 2c0:	add	x3, sp, #0x50
 2c4:	ldp	x0, x1, [x3]
 2c8:	stp	x0, x1, [x2]
 2cc:	ldp	x0, x1, [x3, #16]
 2d0:	stp	x0, x1, [x2, #16]
 2d4:	add	x0, sp, #0x10
 2d8:	mov	x3, x0
 2dc:	ldr	x2, [sp, #56]
 2e0:	ldr	x1, [sp, #64]
 2e4:	ldr	x0, [sp, #72]
 2e8:	bl	1bc <com_err_va>
 2ec:	nop
 2f0:	ldp	x29, x30, [sp], #288
 2f4:	ret

00000000000002f8 <set_com_err_hook>:
 2f8:	sub	sp, sp, #0x20
 2fc:	str	x0, [sp, #8]
 300:	adrp	x0, 0 <default_com_err_proc>
 304:	add	x0, x0, #0x0
 308:	ldr	x0, [x0]
 30c:	str	x0, [sp, #24]
 310:	ldr	x0, [sp, #8]
 314:	cmp	x0, #0x0
 318:	b.eq	330 <set_com_err_hook+0x38>  // b.none
 31c:	adrp	x0, 0 <default_com_err_proc>
 320:	add	x0, x0, #0x0
 324:	ldr	x1, [sp, #8]
 328:	str	x1, [x0]
 32c:	b	344 <set_com_err_hook+0x4c>
 330:	adrp	x0, 0 <default_com_err_proc>
 334:	add	x0, x0, #0x0
 338:	adrp	x1, 0 <default_com_err_proc>
 33c:	add	x1, x1, #0x0
 340:	str	x1, [x0]
 344:	ldr	x0, [sp, #24]
 348:	add	sp, sp, #0x20
 34c:	ret

0000000000000350 <reset_com_err_hook>:
 350:	sub	sp, sp, #0x10
 354:	adrp	x0, 0 <default_com_err_proc>
 358:	add	x0, x0, #0x0
 35c:	ldr	x0, [x0]
 360:	str	x0, [sp, #8]
 364:	adrp	x0, 0 <default_com_err_proc>
 368:	add	x0, x0, #0x0
 36c:	adrp	x1, 0 <default_com_err_proc>
 370:	add	x1, x1, #0x0
 374:	str	x1, [x0]
 378:	ldr	x0, [sp, #8]
 37c:	add	sp, sp, #0x10
 380:	ret

com_right.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <com_right>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	ldr	x0, [sp, #8]
  10:	str	x0, [sp, #24]
  14:	b	98 <com_right+0x98>
  18:	ldr	x0, [sp, #24]
  1c:	ldr	x0, [x0, #8]
  20:	ldr	x0, [x0, #8]
  24:	ldr	x1, [sp]
  28:	cmp	x1, x0
  2c:	b.lt	8c <com_right+0x8c>  // b.tstop
  30:	ldr	x0, [sp, #24]
  34:	ldr	x0, [x0, #8]
  38:	ldr	x1, [x0, #8]
  3c:	ldr	x0, [sp, #24]
  40:	ldr	x0, [x0, #8]
  44:	ldr	w0, [x0, #16]
  48:	sxtw	x0, w0
  4c:	add	x0, x1, x0
  50:	ldr	x1, [sp]
  54:	cmp	x1, x0
  58:	b.ge	8c <com_right+0x8c>  // b.tcont
  5c:	ldr	x0, [sp, #24]
  60:	ldr	x0, [x0, #8]
  64:	ldr	x1, [x0]
  68:	ldr	x0, [sp, #24]
  6c:	ldr	x0, [x0, #8]
  70:	ldr	x0, [x0, #8]
  74:	ldr	x2, [sp]
  78:	sub	x0, x2, x0
  7c:	lsl	x0, x0, #3
  80:	add	x0, x1, x0
  84:	ldr	x0, [x0]
  88:	b	a8 <com_right+0xa8>
  8c:	ldr	x0, [sp, #24]
  90:	ldr	x0, [x0]
  94:	str	x0, [sp, #24]
  98:	ldr	x0, [sp, #24]
  9c:	cmp	x0, #0x0
  a0:	b.ne	18 <com_right+0x18>  // b.any
  a4:	mov	x0, #0x0                   	// #0
  a8:	add	sp, sp, #0x20
  ac:	ret

00000000000000b0 <com_right_r>:
  b0:	stp	x29, x30, [sp, #-64]!
  b4:	mov	x29, sp
  b8:	str	x0, [sp, #40]
  bc:	str	x1, [sp, #32]
  c0:	str	x2, [sp, #24]
  c4:	str	x3, [sp, #16]
  c8:	ldr	x0, [sp, #40]
  cc:	str	x0, [sp, #56]
  d0:	b	17c <com_right_r+0xcc>
  d4:	ldr	x0, [sp, #56]
  d8:	ldr	x0, [x0, #8]
  dc:	ldr	x0, [x0, #8]
  e0:	ldr	x1, [sp, #32]
  e4:	cmp	x1, x0
  e8:	b.lt	170 <com_right_r+0xc0>  // b.tstop
  ec:	ldr	x0, [sp, #56]
  f0:	ldr	x0, [x0, #8]
  f4:	ldr	x1, [x0, #8]
  f8:	ldr	x0, [sp, #56]
  fc:	ldr	x0, [x0, #8]
 100:	ldr	w0, [x0, #16]
 104:	sxtw	x0, w0
 108:	add	x0, x1, x0
 10c:	ldr	x1, [sp, #32]
 110:	cmp	x1, x0
 114:	b.ge	170 <com_right_r+0xc0>  // b.tcont
 118:	ldr	x0, [sp, #56]
 11c:	ldr	x0, [x0, #8]
 120:	ldr	x1, [x0]
 124:	ldr	x0, [sp, #56]
 128:	ldr	x0, [x0, #8]
 12c:	ldr	x0, [x0, #8]
 130:	ldr	x2, [sp, #32]
 134:	sub	x0, x2, x0
 138:	lsl	x0, x0, #3
 13c:	add	x0, x1, x0
 140:	ldr	x0, [x0]
 144:	ldr	x2, [sp, #16]
 148:	mov	x1, x0
 14c:	ldr	x0, [sp, #24]
 150:	bl	0 <strncpy>
 154:	ldr	x0, [sp, #16]
 158:	sub	x0, x0, #0x1
 15c:	ldr	x1, [sp, #24]
 160:	add	x0, x1, x0
 164:	strb	wzr, [x0]
 168:	ldr	x0, [sp, #24]
 16c:	b	18c <com_right_r+0xdc>
 170:	ldr	x0, [sp, #56]
 174:	ldr	x0, [x0]
 178:	str	x0, [sp, #56]
 17c:	ldr	x0, [sp, #56]
 180:	cmp	x0, #0x0
 184:	b.ne	d4 <com_right_r+0x24>  // b.any
 188:	mov	x0, #0x0                   	// #0
 18c:	ldp	x29, x30, [sp], #64
 190:	ret

0000000000000194 <initialize_error_table_r>:
 194:	stp	x29, x30, [sp, #-80]!
 198:	mov	x29, sp
 19c:	str	x0, [sp, #40]
 1a0:	str	x1, [sp, #32]
 1a4:	str	w2, [sp, #28]
 1a8:	str	x3, [sp, #16]
 1ac:	ldr	x0, [sp, #40]
 1b0:	str	x0, [sp, #64]
 1b4:	ldr	x0, [sp, #40]
 1b8:	ldr	x0, [x0]
 1bc:	str	x0, [sp, #72]
 1c0:	b	1f0 <initialize_error_table_r+0x5c>
 1c4:	ldr	x0, [sp, #72]
 1c8:	ldr	x0, [x0, #8]
 1cc:	ldr	x0, [x0]
 1d0:	ldr	x1, [sp, #32]
 1d4:	cmp	x1, x0
 1d8:	b.eq	270 <initialize_error_table_r+0xdc>  // b.none
 1dc:	ldr	x0, [sp, #72]
 1e0:	str	x0, [sp, #64]
 1e4:	ldr	x0, [sp, #72]
 1e8:	ldr	x0, [x0]
 1ec:	str	x0, [sp, #72]
 1f0:	ldr	x0, [sp, #72]
 1f4:	cmp	x0, #0x0
 1f8:	b.ne	1c4 <initialize_error_table_r+0x30>  // b.any
 1fc:	mov	x0, #0x28                  	// #40
 200:	bl	0 <malloc>
 204:	str	x0, [sp, #56]
 208:	ldr	x0, [sp, #56]
 20c:	cmp	x0, #0x0
 210:	b.eq	278 <initialize_error_table_r+0xe4>  // b.none
 214:	ldr	x0, [sp, #56]
 218:	str	x0, [sp, #72]
 21c:	ldr	x0, [sp, #56]
 220:	add	x0, x0, #0x10
 224:	str	x0, [sp, #48]
 228:	ldr	x0, [sp, #72]
 22c:	ldr	x1, [sp, #48]
 230:	str	x1, [x0, #8]
 234:	ldr	x0, [sp, #48]
 238:	ldr	x1, [sp, #32]
 23c:	str	x1, [x0]
 240:	ldr	x0, [sp, #48]
 244:	ldr	w1, [sp, #28]
 248:	str	w1, [x0, #16]
 24c:	ldr	x0, [sp, #48]
 250:	ldr	x1, [sp, #16]
 254:	str	x1, [x0, #8]
 258:	ldr	x0, [sp, #72]
 25c:	str	xzr, [x0]
 260:	ldr	x0, [sp, #64]
 264:	ldr	x1, [sp, #72]
 268:	str	x1, [x0]
 26c:	b	27c <initialize_error_table_r+0xe8>
 270:	nop
 274:	b	27c <initialize_error_table_r+0xe8>
 278:	nop
 27c:	ldp	x29, x30, [sp], #80
 280:	ret

0000000000000284 <free_error_table>:
 284:	stp	x29, x30, [sp, #-48]!
 288:	mov	x29, sp
 28c:	str	x0, [sp, #24]
 290:	b	2b0 <free_error_table+0x2c>
 294:	ldr	x0, [sp, #24]
 298:	str	x0, [sp, #40]
 29c:	ldr	x0, [sp, #24]
 2a0:	ldr	x0, [x0]
 2a4:	str	x0, [sp, #24]
 2a8:	ldr	x0, [sp, #40]
 2ac:	bl	0 <free>
 2b0:	ldr	x0, [sp, #24]
 2b4:	cmp	x0, #0x0
 2b8:	b.ne	294 <free_error_table+0x10>  // b.any
 2bc:	nop
 2c0:	nop
 2c4:	ldp	x29, x30, [sp], #48
 2c8:	ret
