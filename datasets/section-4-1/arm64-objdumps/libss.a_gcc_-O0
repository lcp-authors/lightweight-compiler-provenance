In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libss.a_gcc_-O0:

ss_err.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <initialize_ss_error_table>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x0, 0 <_et_list>
   c:	add	x0, x0, #0x0
  10:	bl	20 <initialize_ss_error_table_r>
  14:	nop
  18:	ldp	x29, x30, [sp], #16
  1c:	ret

0000000000000020 <initialize_ss_error_table_r>:
  20:	stp	x29, x30, [sp, #-48]!
  24:	mov	x29, sp
  28:	str	x0, [sp, #24]
  2c:	ldr	x0, [sp, #24]
  30:	str	x0, [sp, #32]
  34:	ldr	x0, [sp, #24]
  38:	ldr	x0, [x0]
  3c:	str	x0, [sp, #40]
  40:	b	74 <initialize_ss_error_table_r+0x54>
  44:	ldr	x0, [sp, #40]
  48:	ldr	x0, [x0, #8]
  4c:	ldr	x1, [x0]
  50:	adrp	x0, 0 <initialize_ss_error_table>
  54:	add	x0, x0, #0x0
  58:	cmp	x1, x0
  5c:	b.eq	e0 <initialize_ss_error_table_r+0xc0>  // b.none
  60:	ldr	x0, [sp, #40]
  64:	str	x0, [sp, #32]
  68:	ldr	x0, [sp, #40]
  6c:	ldr	x0, [x0]
  70:	str	x0, [sp, #40]
  74:	ldr	x0, [sp, #40]
  78:	cmp	x0, #0x0
  7c:	b.ne	44 <initialize_ss_error_table_r+0x24>  // b.any
  80:	mov	x0, #0x10                  	// #16
  84:	bl	0 <malloc>
  88:	str	x0, [sp, #40]
  8c:	ldr	x0, [sp, #40]
  90:	cmp	x0, #0x0
  94:	b.ne	b8 <initialize_ss_error_table_r+0x98>  // b.any
  98:	adrp	x0, 0 <initialize_ss_error_table>
  9c:	add	x0, x0, #0x0
  a0:	ldr	x0, [x0, #8]
  a4:	cmp	x0, #0x0
  a8:	b.ne	e8 <initialize_ss_error_table_r+0xc8>  // b.any
  ac:	adrp	x0, 0 <initialize_ss_error_table>
  b0:	add	x0, x0, #0x0
  b4:	str	x0, [sp, #40]
  b8:	ldr	x0, [sp, #40]
  bc:	adrp	x1, 1a8 <et_ss_error_table>
  c0:	add	x1, x1, #0x0
  c4:	str	x1, [x0, #8]
  c8:	ldr	x0, [sp, #40]
  cc:	str	xzr, [x0]
  d0:	ldr	x0, [sp, #32]
  d4:	ldr	x1, [sp, #40]
  d8:	str	x1, [x0]
  dc:	b	ec <initialize_ss_error_table_r+0xcc>
  e0:	nop
  e4:	b	ec <initialize_ss_error_table_r+0xcc>
  e8:	nop
  ec:	ldp	x29, x30, [sp], #48
  f0:	ret

std_rqs.o:     file format elf64-littleaarch64


invocation.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_create_invocation>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	str	x0, [sp, #88]
  14:	str	x1, [sp, #80]
  18:	str	x2, [sp, #72]
  1c:	str	x3, [sp, #64]
  20:	str	x4, [sp, #56]
  24:	ldr	x0, [sp, #56]
  28:	str	wzr, [x0]
  2c:	adrp	x0, 0 <_ss_table>
  30:	add	x0, x0, #0x0
  34:	ldr	x20, [x0]
  38:	mov	x0, #0x90                  	// #144
  3c:	bl	0 <malloc>
  40:	mov	x19, x0
  44:	cmp	x20, #0x0
  48:	b.ne	68 <ss_create_invocation+0x68>  // b.any
  4c:	mov	x0, #0x10                  	// #16
  50:	bl	0 <malloc>
  54:	mov	x20, x0
  58:	add	x0, x20, #0x8
  5c:	str	xzr, [x0]
  60:	ldr	x0, [x0]
  64:	str	x0, [x20]
  68:	bl	0 <initialize_ss_error_table>
  6c:	mov	w21, #0x1                   	// #1
  70:	b	78 <ss_create_invocation+0x78>
  74:	add	w21, w21, #0x1
  78:	sxtw	x0, w21
  7c:	lsl	x0, x0, #3
  80:	add	x0, x20, x0
  84:	ldr	x0, [x0]
  88:	cmp	x0, #0x0
  8c:	b.ne	74 <ss_create_invocation+0x74>  // b.any
  90:	mov	w0, w21
  94:	add	w0, w0, #0x2
  98:	mov	w0, w0
  9c:	lsl	x0, x0, #3
  a0:	mov	x1, x0
  a4:	mov	x0, x20
  a8:	bl	0 <realloc>
  ac:	mov	x20, x0
  b0:	cmp	x20, #0x0
  b4:	b.ne	d4 <ss_create_invocation+0xd4>  // b.any
  b8:	ldr	x0, [sp, #56]
  bc:	mov	w1, #0xc                   	// #12
  c0:	str	w1, [x0]
  c4:	mov	x0, x19
  c8:	bl	0 <free>
  cc:	mov	w0, #0x0                   	// #0
  d0:	b	1d8 <ss_create_invocation+0x1d8>
  d4:	sxtw	x0, w21
  d8:	add	x0, x0, #0x1
  dc:	lsl	x0, x0, #3
  e0:	add	x0, x20, x0
  e4:	str	xzr, [x0]
  e8:	sxtw	x0, w21
  ec:	lsl	x0, x0, #3
  f0:	add	x0, x20, x0
  f4:	str	x19, [x0]
  f8:	ldr	x0, [sp, #88]
  fc:	str	x0, [x19]
 100:	ldr	x0, [sp, #80]
 104:	str	x0, [x19, #8]
 108:	str	xzr, [x19, #24]
 10c:	str	xzr, [x19, #32]
 110:	mov	x0, #0x8                   	// #8
 114:	bl	0 <malloc>
 118:	str	x0, [x19, #40]
 11c:	ldr	x0, [x19, #40]
 120:	str	xzr, [x0]
 124:	ldr	x0, [sp, #72]
 128:	str	x0, [x19, #48]
 12c:	ldr	x0, [sp, #88]
 130:	bl	0 <strlen>
 134:	add	w0, w0, #0x4
 138:	mov	w0, w0
 13c:	bl	0 <malloc>
 140:	str	x0, [x19, #56]
 144:	ldr	x0, [x19, #56]
 148:	ldr	x1, [sp, #88]
 14c:	bl	0 <strcpy>
 150:	ldr	x22, [x19, #56]
 154:	mov	x0, x22
 158:	bl	0 <strlen>
 15c:	add	x0, x22, x0
 160:	mov	w1, #0x203a                	// #8250
 164:	movk	w1, #0x20, lsl #16
 168:	str	w1, [x0]
 16c:	str	xzr, [x19, #72]
 170:	ldrb	w0, [x19, #80]
 174:	and	w0, w0, #0xfffffffe
 178:	strb	w0, [x19, #80]
 17c:	ldrb	w0, [x19, #80]
 180:	and	w0, w0, #0xfffffffd
 184:	strb	w0, [x19, #80]
 188:	mov	x1, #0x8                   	// #8
 18c:	mov	x0, #0x2                   	// #2
 190:	bl	0 <calloc>
 194:	str	x0, [x19, #64]
 198:	ldr	x0, [x19, #64]
 19c:	ldr	x1, [sp, #64]
 1a0:	str	x1, [x0]
 1a4:	ldr	x0, [x19, #64]
 1a8:	add	x0, x0, #0x8
 1ac:	str	xzr, [x0]
 1b0:	str	xzr, [x19, #88]
 1b4:	str	xzr, [x19, #96]
 1b8:	str	xzr, [x19, #104]
 1bc:	str	xzr, [x19, #112]
 1c0:	str	xzr, [x19, #120]
 1c4:	str	xzr, [x19, #128]
 1c8:	adrp	x0, 0 <_ss_table>
 1cc:	add	x0, x0, #0x0
 1d0:	str	x20, [x0]
 1d4:	mov	w0, w21
 1d8:	ldp	x19, x20, [sp, #16]
 1dc:	ldp	x21, x22, [sp, #32]
 1e0:	ldp	x29, x30, [sp], #96
 1e4:	ret

00000000000001e8 <ss_delete_invocation>:
 1e8:	stp	x29, x30, [sp, #-64]!
 1ec:	mov	x29, sp
 1f0:	str	x19, [sp, #16]
 1f4:	str	w0, [sp, #44]
 1f8:	adrp	x0, 0 <_ss_table>
 1fc:	add	x0, x0, #0x0
 200:	ldr	x1, [x0]
 204:	ldrsw	x0, [sp, #44]
 208:	lsl	x0, x0, #3
 20c:	add	x0, x1, x0
 210:	ldr	x19, [x0]
 214:	ldr	x0, [x19, #56]
 218:	bl	0 <free>
 21c:	ldr	x0, [x19, #64]
 220:	bl	0 <free>
 224:	b	244 <ss_delete_invocation+0x5c>
 228:	ldr	x0, [x19, #40]
 22c:	ldr	x0, [x0]
 230:	add	x1, sp, #0x3c
 234:	mov	x2, x1
 238:	mov	x1, x0
 23c:	ldr	w0, [sp, #44]
 240:	bl	0 <ss_delete_info_dir>
 244:	ldr	x0, [x19, #40]
 248:	ldr	x0, [x0]
 24c:	cmp	x0, #0x0
 250:	b.ne	228 <ss_delete_invocation+0x40>  // b.any
 254:	ldr	x0, [x19, #40]
 258:	bl	0 <free>
 25c:	mov	x0, x19
 260:	bl	0 <free>
 264:	nop
 268:	ldr	x19, [sp, #16]
 26c:	ldp	x29, x30, [sp], #64
 270:	ret

help.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_help>:
   0:	stp	x29, x30, [sp, #-128]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	str	x21, [sp, #32]
  10:	str	w0, [sp, #76]
  14:	str	x1, [sp, #64]
  18:	str	w2, [sp, #72]
  1c:	str	x3, [sp, #56]
  20:	str	wzr, [sp, #84]
  24:	adrp	x0, 0 <_ss_table>
  28:	add	x0, x0, #0x0
  2c:	ldr	x1, [x0]
  30:	ldrsw	x0, [sp, #72]
  34:	lsl	x0, x0, #3
  38:	add	x0, x1, x0
  3c:	ldr	x0, [x0]
  40:	ldr	x0, [x0, #32]
  44:	str	x0, [sp, #112]
  48:	ldr	w0, [sp, #84]
  4c:	cmp	w0, #0x0
  50:	b.eq	70 <ss_help+0x70>  // b.none
  54:	ldr	w0, [sp, #84]
  58:	sxtw	x1, w0
  5c:	adrp	x0, 0 <ss_help>
  60:	add	x2, x0, #0x0
  64:	ldr	w0, [sp, #72]
  68:	bl	0 <ss_perror>
  6c:	b	3c0 <ss_help+0x3c0>
  70:	ldr	w0, [sp, #76]
  74:	cmp	w0, #0x1
  78:	b.ne	94 <ss_help+0x94>  // b.any
  7c:	ldr	x3, [sp, #56]
  80:	ldr	w2, [sp, #72]
  84:	ldr	x1, [sp, #64]
  88:	ldr	w0, [sp, #76]
  8c:	bl	0 <ss_list_requests>
  90:	b	3c0 <ss_help+0x3c0>
  94:	ldr	w0, [sp, #76]
  98:	cmp	w0, #0x2
  9c:	b.eq	110 <ss_help+0x110>  // b.none
  a0:	ldr	x0, [sp, #112]
  a4:	bl	0 <strlen>
  a8:	add	x0, x0, #0x28
  ac:	lsl	x0, x0, #1
  b0:	bl	0 <malloc>
  b4:	str	x0, [sp, #104]
  b8:	ldr	x0, [sp, #104]
  bc:	cmp	x0, #0x0
  c0:	b.ne	dc <ss_help+0xdc>  // b.any
  c4:	adrp	x0, 0 <ss_help>
  c8:	add	x2, x0, #0x0
  cc:	mov	x1, #0x0                   	// #0
  d0:	ldr	w0, [sp, #72]
  d4:	bl	0 <ss_perror>
  d8:	b	3c0 <ss_help+0x3c0>
  dc:	ldr	x3, [sp, #112]
  e0:	ldr	x2, [sp, #112]
  e4:	adrp	x0, 0 <ss_help>
  e8:	add	x1, x0, #0x0
  ec:	ldr	x0, [sp, #104]
  f0:	bl	0 <sprintf>
  f4:	ldr	x2, [sp, #104]
  f8:	mov	x1, #0x0                   	// #0
  fc:	ldr	w0, [sp, #72]
 100:	bl	0 <ss_perror>
 104:	ldr	x0, [sp, #104]
 108:	bl	0 <free>
 10c:	b	3c0 <ss_help+0x3c0>
 110:	adrp	x0, 0 <_ss_table>
 114:	add	x0, x0, #0x0
 118:	ldr	x1, [x0]
 11c:	ldrsw	x0, [sp, #72]
 120:	lsl	x0, x0, #3
 124:	add	x0, x1, x0
 128:	ldr	x19, [x0]
 12c:	ldr	x0, [x19, #40]
 130:	cmp	x0, #0x0
 134:	b.ne	150 <ss_help+0x150>  // b.any
 138:	mov	x2, #0x0                   	// #0
 13c:	mov	x1, #0x6d03                	// #27907
 140:	movk	x1, #0xb, lsl #16
 144:	ldr	w0, [sp, #72]
 148:	bl	0 <ss_perror>
 14c:	b	3c0 <ss_help+0x3c0>
 150:	ldr	x0, [x19, #40]
 154:	ldr	x0, [x0]
 158:	cmp	x0, #0x0
 15c:	b.ne	178 <ss_help+0x178>  // b.any
 160:	mov	x2, #0x0                   	// #0
 164:	mov	x1, #0x6d03                	// #27907
 168:	movk	x1, #0xb, lsl #16
 16c:	ldr	w0, [sp, #72]
 170:	bl	0 <ss_perror>
 174:	b	3c0 <ss_help+0x3c0>
 178:	mov	w0, #0xffffffff            	// #-1
 17c:	str	w0, [sp, #124]
 180:	mov	w20, #0x0                   	// #0
 184:	b	294 <ss_help+0x294>
 188:	ldr	x1, [x19, #40]
 18c:	sxtw	x0, w20
 190:	lsl	x0, x0, #3
 194:	add	x0, x1, x0
 198:	ldr	x0, [x0]
 19c:	bl	0 <strlen>
 1a0:	mov	x21, x0
 1a4:	ldr	x0, [sp, #64]
 1a8:	add	x0, x0, #0x8
 1ac:	ldr	x0, [x0]
 1b0:	bl	0 <strlen>
 1b4:	add	x0, x21, x0
 1b8:	add	x0, x0, #0x7
 1bc:	bl	0 <malloc>
 1c0:	str	x0, [sp, #104]
 1c4:	ldr	x0, [sp, #104]
 1c8:	cmp	x0, #0x0
 1cc:	b.ne	1e8 <ss_help+0x1e8>  // b.any
 1d0:	adrp	x0, 0 <ss_help>
 1d4:	add	x2, x0, #0x0
 1d8:	mov	x1, #0x0                   	// #0
 1dc:	ldr	w0, [sp, #72]
 1e0:	bl	0 <ss_perror>
 1e4:	b	3c0 <ss_help+0x3c0>
 1e8:	ldr	x1, [x19, #40]
 1ec:	sxtw	x0, w20
 1f0:	lsl	x0, x0, #3
 1f4:	add	x0, x1, x0
 1f8:	ldr	x0, [x0]
 1fc:	mov	x1, x0
 200:	ldr	x0, [sp, #104]
 204:	bl	0 <strcpy>
 208:	ldr	x0, [sp, #104]
 20c:	bl	0 <strlen>
 210:	mov	x1, x0
 214:	ldr	x0, [sp, #104]
 218:	add	x0, x0, x1
 21c:	mov	w1, #0x2f                  	// #47
 220:	strh	w1, [x0]
 224:	ldr	x0, [sp, #64]
 228:	add	x0, x0, #0x8
 22c:	ldr	x0, [x0]
 230:	mov	x1, x0
 234:	ldr	x0, [sp, #104]
 238:	bl	0 <strcat>
 23c:	ldr	x0, [sp, #104]
 240:	bl	0 <strlen>
 244:	mov	x1, x0
 248:	ldr	x0, [sp, #104]
 24c:	add	x2, x0, x1
 250:	adrp	x0, 0 <ss_help>
 254:	add	x1, x0, #0x0
 258:	mov	x0, x2
 25c:	ldr	w2, [x1]
 260:	str	w2, [x0]
 264:	ldrh	w1, [x1, #4]
 268:	strh	w1, [x0, #4]
 26c:	mov	w1, #0x0                   	// #0
 270:	ldr	x0, [sp, #104]
 274:	bl	0 <open>
 278:	str	w0, [sp, #124]
 27c:	ldr	x0, [sp, #104]
 280:	bl	0 <free>
 284:	ldr	w0, [sp, #124]
 288:	cmp	w0, #0x0
 28c:	b.ge	2b4 <ss_help+0x2b4>  // b.tcont
 290:	add	w20, w20, #0x1
 294:	ldr	x1, [x19, #40]
 298:	sxtw	x0, w20
 29c:	lsl	x0, x0, #3
 2a0:	add	x0, x1, x0
 2a4:	ldr	x0, [x0]
 2a8:	cmp	x0, #0x0
 2ac:	b.ne	188 <ss_help+0x188>  // b.any
 2b0:	b	2b8 <ss_help+0x2b8>
 2b4:	nop
 2b8:	ldr	w0, [sp, #124]
 2bc:	cmp	w0, #0x0
 2c0:	b.ge	340 <ss_help+0x340>  // b.tcont
 2c4:	ldr	x0, [sp, #64]
 2c8:	add	x0, x0, #0x8
 2cc:	ldr	x0, [x0]
 2d0:	bl	0 <strlen>
 2d4:	add	x0, x0, #0x13
 2d8:	bl	0 <malloc>
 2dc:	str	x0, [sp, #88]
 2e0:	ldr	x1, [sp, #88]
 2e4:	adrp	x0, 0 <ss_help>
 2e8:	add	x0, x0, #0x0
 2ec:	mov	x2, x1
 2f0:	mov	x3, x0
 2f4:	ldp	x0, x1, [x3]
 2f8:	stp	x0, x1, [x2]
 2fc:	add	x1, x3, #0xf
 300:	add	x0, x2, #0xf
 304:	ldr	w1, [x1]
 308:	str	w1, [x0]
 30c:	ldr	x0, [sp, #64]
 310:	add	x0, x0, #0x8
 314:	ldr	x0, [x0]
 318:	mov	x1, x0
 31c:	ldr	x0, [sp, #88]
 320:	bl	0 <strcat>
 324:	ldr	x2, [sp, #88]
 328:	mov	x1, #0x0                   	// #0
 32c:	ldr	w0, [sp, #72]
 330:	bl	0 <ss_perror>
 334:	ldr	x0, [sp, #88]
 338:	bl	0 <free>
 33c:	b	3c0 <ss_help+0x3c0>
 340:	bl	0 <fork>
 344:	str	w0, [sp, #100]
 348:	ldr	w0, [sp, #100]
 34c:	cmn	w0, #0x1
 350:	b.eq	364 <ss_help+0x364>  // b.none
 354:	ldr	w0, [sp, #100]
 358:	cmp	w0, #0x0
 35c:	b.eq	38c <ss_help+0x38c>  // b.none
 360:	b	39c <ss_help+0x39c>
 364:	bl	0 <__errno_location>
 368:	ldr	w0, [x0]
 36c:	sxtw	x1, w0
 370:	adrp	x0, 0 <ss_help>
 374:	add	x2, x0, #0x0
 378:	ldr	w0, [sp, #72]
 37c:	bl	0 <ss_perror>
 380:	ldr	w0, [sp, #124]
 384:	bl	0 <close>
 388:	b	3c0 <ss_help+0x3c0>
 38c:	mov	w1, #0x0                   	// #0
 390:	ldr	w0, [sp, #124]
 394:	bl	0 <dup2>
 398:	bl	0 <ss_page_stdin>
 39c:	ldr	w0, [sp, #124]
 3a0:	bl	0 <close>
 3a4:	nop
 3a8:	mov	x0, #0x0                   	// #0
 3ac:	bl	0 <wait>
 3b0:	mov	w1, w0
 3b4:	ldr	w0, [sp, #100]
 3b8:	cmp	w0, w1
 3bc:	b.ne	3a8 <ss_help+0x3a8>  // b.any
 3c0:	ldp	x19, x20, [sp, #16]
 3c4:	ldr	x21, [sp, #32]
 3c8:	ldp	x29, x30, [sp], #128
 3cc:	ret

00000000000003d0 <ss_add_info_dir>:
 3d0:	stp	x29, x30, [sp, #-80]!
 3d4:	mov	x29, sp
 3d8:	stp	x19, x20, [sp, #16]
 3dc:	str	w0, [sp, #60]
 3e0:	str	x1, [sp, #48]
 3e4:	str	x2, [sp, #40]
 3e8:	adrp	x0, 0 <_ss_table>
 3ec:	add	x0, x0, #0x0
 3f0:	ldr	x1, [x0]
 3f4:	ldrsw	x0, [sp, #60]
 3f8:	lsl	x0, x0, #3
 3fc:	add	x0, x1, x0
 400:	ldr	x20, [x0]
 404:	ldr	x0, [sp, #48]
 408:	cmp	x0, #0x0
 40c:	b.eq	420 <ss_add_info_dir+0x50>  // b.none
 410:	ldr	x0, [sp, #48]
 414:	ldrb	w0, [x0]
 418:	cmp	w0, #0x0
 41c:	b.ne	434 <ss_add_info_dir+0x64>  // b.any
 420:	ldr	x0, [sp, #40]
 424:	mov	w1, #0x6d03                	// #27907
 428:	movk	w1, #0xb, lsl #16
 42c:	str	w1, [x0]
 430:	b	538 <ss_add_info_dir+0x168>
 434:	ldr	x0, [sp, #48]
 438:	bl	0 <opendir>
 43c:	str	x0, [sp, #64]
 440:	ldr	x0, [sp, #64]
 444:	cmp	x0, #0x0
 448:	b.ne	460 <ss_add_info_dir+0x90>  // b.any
 44c:	bl	0 <__errno_location>
 450:	ldr	w1, [x0]
 454:	ldr	x0, [sp, #40]
 458:	str	w1, [x0]
 45c:	b	538 <ss_add_info_dir+0x168>
 460:	ldr	x0, [sp, #64]
 464:	bl	0 <closedir>
 468:	ldr	x19, [x20, #40]
 46c:	str	wzr, [sp, #76]
 470:	b	480 <ss_add_info_dir+0xb0>
 474:	ldr	w0, [sp, #76]
 478:	add	w0, w0, #0x1
 47c:	str	w0, [sp, #76]
 480:	ldrsw	x0, [sp, #76]
 484:	lsl	x0, x0, #3
 488:	add	x0, x19, x0
 48c:	ldr	x0, [x0]
 490:	cmp	x0, #0x0
 494:	b.ne	474 <ss_add_info_dir+0xa4>  // b.any
 498:	ldr	w0, [sp, #76]
 49c:	add	w0, w0, #0x2
 4a0:	mov	w0, w0
 4a4:	lsl	x0, x0, #3
 4a8:	mov	x1, x0
 4ac:	mov	x0, x19
 4b0:	bl	0 <realloc>
 4b4:	mov	x19, x0
 4b8:	cmp	x19, #0x0
 4bc:	b.ne	4d8 <ss_add_info_dir+0x108>  // b.any
 4c0:	str	xzr, [x20, #40]
 4c4:	bl	0 <__errno_location>
 4c8:	ldr	w1, [x0]
 4cc:	ldr	x0, [sp, #40]
 4d0:	str	w1, [x0]
 4d4:	b	538 <ss_add_info_dir+0x168>
 4d8:	str	x19, [x20, #40]
 4dc:	ldrsw	x0, [sp, #76]
 4e0:	add	x0, x0, #0x1
 4e4:	lsl	x0, x0, #3
 4e8:	add	x0, x19, x0
 4ec:	str	xzr, [x0]
 4f0:	ldr	x0, [sp, #48]
 4f4:	bl	0 <strlen>
 4f8:	add	w0, w0, #0x1
 4fc:	mov	w1, w0
 500:	ldrsw	x0, [sp, #76]
 504:	lsl	x0, x0, #3
 508:	add	x20, x19, x0
 50c:	mov	x0, x1
 510:	bl	0 <malloc>
 514:	str	x0, [x20]
 518:	ldrsw	x0, [sp, #76]
 51c:	lsl	x0, x0, #3
 520:	add	x0, x19, x0
 524:	ldr	x0, [x0]
 528:	ldr	x1, [sp, #48]
 52c:	bl	0 <strcpy>
 530:	ldr	x0, [sp, #40]
 534:	str	wzr, [x0]
 538:	ldp	x19, x20, [sp, #16]
 53c:	ldp	x29, x30, [sp], #80
 540:	ret

0000000000000544 <ss_delete_info_dir>:
 544:	stp	x29, x30, [sp, #-64]!
 548:	mov	x29, sp
 54c:	str	x19, [sp, #16]
 550:	str	w0, [sp, #60]
 554:	str	x1, [sp, #48]
 558:	str	x2, [sp, #40]
 55c:	adrp	x0, 0 <_ss_table>
 560:	add	x0, x0, #0x0
 564:	ldr	x1, [x0]
 568:	ldrsw	x0, [sp, #60]
 56c:	lsl	x0, x0, #3
 570:	add	x0, x1, x0
 574:	ldr	x0, [x0]
 578:	ldr	x19, [x0, #40]
 57c:	b	5c0 <ss_delete_info_dir+0x7c>
 580:	ldr	x0, [x19]
 584:	ldr	x1, [sp, #48]
 588:	bl	0 <strcmp>
 58c:	cmp	w0, #0x0
 590:	b.ne	5bc <ss_delete_info_dir+0x78>  // b.any
 594:	b	5a4 <ss_delete_info_dir+0x60>
 598:	ldr	x0, [x19, #8]
 59c:	str	x0, [x19]
 5a0:	add	x19, x19, #0x8
 5a4:	ldr	x0, [x19]
 5a8:	cmp	x0, #0x0
 5ac:	b.ne	598 <ss_delete_info_dir+0x54>  // b.any
 5b0:	ldr	x0, [sp, #40]
 5b4:	str	wzr, [x0]
 5b8:	b	5dc <ss_delete_info_dir+0x98>
 5bc:	add	x19, x19, #0x8
 5c0:	ldr	x0, [x19]
 5c4:	cmp	x0, #0x0
 5c8:	b.ne	580 <ss_delete_info_dir+0x3c>  // b.any
 5cc:	ldr	x0, [sp, #40]
 5d0:	mov	w1, #0x6d03                	// #27907
 5d4:	movk	w1, #0xb, lsl #16
 5d8:	str	w1, [x0]
 5dc:	ldr	x19, [sp, #16]
 5e0:	ldp	x29, x30, [sp], #64
 5e4:	ret

execute_cmd.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <check_request_table>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	mov	x22, x0
  14:	str	w1, [sp, #60]
  18:	str	x2, [sp, #48]
  1c:	str	w3, [sp, #56]
  20:	ldr	x0, [sp, #48]
  24:	ldr	x0, [x0]
  28:	str	x0, [sp, #64]
  2c:	adrp	x0, 0 <_ss_table>
  30:	add	x0, x0, #0x0
  34:	ldr	x1, [x0]
  38:	ldrsw	x0, [sp, #56]
  3c:	lsl	x0, x0, #3
  40:	add	x0, x1, x0
  44:	ldr	x19, [x0]
  48:	ldr	w0, [sp, #60]
  4c:	str	w0, [x19, #16]
  50:	ldr	x0, [sp, #48]
  54:	str	x0, [x19, #24]
  58:	str	wzr, [sp, #76]
  5c:	b	cc <check_request_table+0xcc>
  60:	ldr	x21, [x20]
  64:	b	b4 <check_request_table+0xb4>
  68:	ldr	x0, [x21]
  6c:	ldr	x1, [sp, #64]
  70:	bl	0 <strcmp>
  74:	cmp	w0, #0x0
  78:	b.ne	b0 <check_request_table+0xb0>  // b.any
  7c:	ldr	x0, [x20]
  80:	ldr	x0, [x0]
  84:	str	x0, [x19, #32]
  88:	ldr	x4, [x20, #8]
  8c:	ldr	x0, [x19, #48]
  90:	mov	x3, x0
  94:	ldr	w2, [sp, #56]
  98:	ldr	x1, [sp, #48]
  9c:	ldr	w0, [sp, #60]
  a0:	blr	x4
  a4:	str	xzr, [x19, #32]
  a8:	mov	w0, #0x0                   	// #0
  ac:	b	f0 <check_request_table+0xf0>
  b0:	add	x21, x21, #0x8
  b4:	ldr	x0, [x21]
  b8:	cmp	x0, #0x0
  bc:	b.ne	68 <check_request_table+0x68>  // b.any
  c0:	ldr	w0, [sp, #76]
  c4:	add	w0, w0, #0x1
  c8:	str	w0, [sp, #76]
  cc:	ldr	x1, [x22, #8]
  d0:	ldrsw	x0, [sp, #76]
  d4:	lsl	x0, x0, #5
  d8:	add	x20, x1, x0
  dc:	ldr	x0, [x20]
  e0:	cmp	x0, #0x0
  e4:	b.ne	60 <check_request_table+0x60>  // b.any
  e8:	mov	w0, #0x6d04                	// #27908
  ec:	movk	w0, #0xb, lsl #16
  f0:	ldp	x19, x20, [sp, #16]
  f4:	ldp	x21, x22, [sp, #32]
  f8:	ldp	x29, x30, [sp], #80
  fc:	ret

0000000000000100 <really_execute_command>:
 100:	stp	x29, x30, [sp, #-48]!
 104:	mov	x29, sp
 108:	str	x19, [sp, #16]
 10c:	str	w0, [sp, #44]
 110:	str	w1, [sp, #40]
 114:	str	x2, [sp, #32]
 118:	adrp	x0, 0 <_ss_table>
 11c:	add	x0, x0, #0x0
 120:	ldr	x1, [x0]
 124:	ldrsw	x0, [sp, #44]
 128:	lsl	x0, x0, #3
 12c:	add	x0, x1, x0
 130:	ldr	x19, [x0]
 134:	ldr	x19, [x19, #64]
 138:	b	170 <really_execute_command+0x70>
 13c:	ldr	x4, [x19]
 140:	ldr	x0, [sp, #32]
 144:	ldr	x0, [x0]
 148:	ldr	w3, [sp, #44]
 14c:	mov	x2, x0
 150:	ldr	w1, [sp, #40]
 154:	mov	x0, x4
 158:	bl	0 <check_request_table>
 15c:	cmp	w0, #0x0
 160:	b.ne	16c <really_execute_command+0x6c>  // b.any
 164:	mov	w0, #0x0                   	// #0
 168:	b	184 <really_execute_command+0x84>
 16c:	add	x19, x19, #0x8
 170:	ldr	x0, [x19]
 174:	cmp	x0, #0x0
 178:	b.ne	13c <really_execute_command+0x3c>  // b.any
 17c:	mov	w0, #0x6d04                	// #27908
 180:	movk	w0, #0xb, lsl #16
 184:	ldr	x19, [sp, #16]
 188:	ldp	x29, x30, [sp], #48
 18c:	ret

0000000000000190 <ss_execute_command>:
 190:	stp	x29, x30, [sp, #-80]!
 194:	mov	x29, sp
 198:	stp	x19, x20, [sp, #16]
 19c:	str	x21, [sp, #32]
 1a0:	str	w0, [sp, #60]
 1a4:	mov	x21, x1
 1a8:	mov	w20, #0x0                   	// #0
 1ac:	str	x21, [sp, #72]
 1b0:	b	1c4 <ss_execute_command+0x34>
 1b4:	add	w20, w20, #0x1
 1b8:	ldr	x0, [sp, #72]
 1bc:	add	x0, x0, #0x8
 1c0:	str	x0, [sp, #72]
 1c4:	ldr	x0, [sp, #72]
 1c8:	ldr	x0, [x0]
 1cc:	cmp	x0, #0x0
 1d0:	b.ne	1b4 <ss_execute_command+0x24>  // b.any
 1d4:	add	w0, w20, #0x1
 1d8:	sxtw	x0, w0
 1dc:	lsl	x0, x0, #3
 1e0:	bl	0 <malloc>
 1e4:	str	x0, [sp, #72]
 1e8:	mov	w19, #0x0                   	// #0
 1ec:	b	218 <ss_execute_command+0x88>
 1f0:	sxtw	x0, w19
 1f4:	lsl	x0, x0, #3
 1f8:	add	x1, x21, x0
 1fc:	ldr	x2, [sp, #72]
 200:	sxtw	x0, w19
 204:	lsl	x0, x0, #3
 208:	add	x0, x2, x0
 20c:	ldr	x1, [x1]
 210:	str	x1, [x0]
 214:	add	w19, w19, #0x1
 218:	cmp	w19, w20
 21c:	b.le	1f0 <ss_execute_command+0x60>
 220:	add	x0, sp, #0x48
 224:	mov	x2, x0
 228:	mov	w1, w20
 22c:	ldr	w0, [sp, #60]
 230:	bl	100 <really_execute_command>
 234:	mov	w19, w0
 238:	ldr	x0, [sp, #72]
 23c:	bl	0 <free>
 240:	mov	w0, w19
 244:	ldp	x19, x20, [sp, #16]
 248:	ldr	x21, [sp, #32]
 24c:	ldp	x29, x30, [sp], #80
 250:	ret

0000000000000254 <ss_execute_line>:
 254:	stp	x29, x30, [sp, #-64]!
 258:	mov	x29, sp
 25c:	str	w0, [sp, #28]
 260:	str	x1, [sp, #16]
 264:	b	274 <ss_execute_line+0x20>
 268:	ldr	x0, [sp, #16]
 26c:	add	x0, x0, #0x1
 270:	str	x0, [sp, #16]
 274:	ldr	x0, [sp, #16]
 278:	ldrb	w0, [x0]
 27c:	cmp	w0, #0x20
 280:	b.eq	268 <ss_execute_line+0x14>  // b.none
 284:	ldr	x0, [sp, #16]
 288:	ldrb	w0, [x0]
 28c:	cmp	w0, #0x9
 290:	b.eq	268 <ss_execute_line+0x14>  // b.none
 294:	ldr	x0, [sp, #16]
 298:	ldrb	w0, [x0]
 29c:	cmp	w0, #0x21
 2a0:	b.ne	310 <ss_execute_line+0xbc>  // b.any
 2a4:	adrp	x0, 0 <_ss_table>
 2a8:	add	x0, x0, #0x0
 2ac:	ldr	x1, [x0]
 2b0:	ldrsw	x0, [sp, #28]
 2b4:	lsl	x0, x0, #3
 2b8:	add	x0, x1, x0
 2bc:	ldr	x0, [x0]
 2c0:	ldrb	w0, [x0, #80]
 2c4:	and	w0, w0, #0x1
 2c8:	and	w0, w0, #0xff
 2cc:	cmp	w0, #0x0
 2d0:	b.eq	2e0 <ss_execute_line+0x8c>  // b.none
 2d4:	mov	w0, #0x6d0a                	// #27914
 2d8:	movk	w0, #0xb, lsl #16
 2dc:	b	36c <ss_execute_line+0x118>
 2e0:	ldr	x0, [sp, #16]
 2e4:	add	x0, x0, #0x1
 2e8:	str	x0, [sp, #16]
 2ec:	ldr	x0, [sp, #16]
 2f0:	bl	0 <system>
 2f4:	cmp	w0, #0x0
 2f8:	b.ge	308 <ss_execute_line+0xb4>  // b.tcont
 2fc:	bl	0 <__errno_location>
 300:	ldr	w0, [x0]
 304:	b	36c <ss_execute_line+0x118>
 308:	mov	w0, #0x0                   	// #0
 30c:	b	36c <ss_execute_line+0x118>
 310:	add	x0, sp, #0x2c
 314:	mov	x2, x0
 318:	ldr	x1, [sp, #16]
 31c:	ldr	w0, [sp, #28]
 320:	bl	0 <ss_parse>
 324:	str	x0, [sp, #48]
 328:	ldr	w0, [sp, #44]
 32c:	cmp	w0, #0x0
 330:	b.ne	344 <ss_execute_line+0xf0>  // b.any
 334:	ldr	x0, [sp, #48]
 338:	bl	0 <free>
 33c:	mov	w0, #0x0                   	// #0
 340:	b	36c <ss_execute_line+0x118>
 344:	ldr	w0, [sp, #44]
 348:	add	x1, sp, #0x30
 34c:	mov	x2, x1
 350:	mov	w1, w0
 354:	ldr	w0, [sp, #28]
 358:	bl	100 <really_execute_command>
 35c:	str	w0, [sp, #60]
 360:	ldr	x0, [sp, #48]
 364:	bl	0 <free>
 368:	ldr	w0, [sp, #60]
 36c:	ldp	x29, x30, [sp], #64
 370:	ret

listen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <print_prompt>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	w0, [sp, #28]
   c:	adrp	x0, 0 <print_prompt>
  10:	add	x0, x0, #0x0
  14:	ldr	x0, [x0]
  18:	ldr	x0, [x0, #120]
  1c:	cmp	x0, #0x0
  20:	b.eq	3c <print_prompt+0x3c>  // b.none
  24:	adrp	x0, 0 <print_prompt>
  28:	add	x0, x0, #0x0
  2c:	ldr	x0, [x0]
  30:	ldr	x0, [x0, #120]
  34:	blr	x0
  38:	b	74 <print_prompt+0x74>
  3c:	adrp	x0, 0 <print_prompt>
  40:	add	x0, x0, #0x0
  44:	ldr	x0, [x0]
  48:	ldr	x2, [x0, #56]
  4c:	adrp	x0, 0 <stdout>
  50:	add	x0, x0, #0x0
  54:	ldr	x0, [x0]
  58:	mov	x1, x0
  5c:	mov	x0, x2
  60:	bl	0 <fputs>
  64:	adrp	x0, 0 <stdout>
  68:	add	x0, x0, #0x0
  6c:	ldr	x0, [x0]
  70:	bl	0 <fflush>
  74:	nop
  78:	ldp	x29, x30, [sp], #32
  7c:	ret

0000000000000080 <listen_int_handler>:
  80:	stp	x29, x30, [sp, #-32]!
  84:	mov	x29, sp
  88:	str	w0, [sp, #28]
  8c:	adrp	x0, 0 <stdout>
  90:	add	x0, x0, #0x0
  94:	ldr	x0, [x0]
  98:	mov	x1, x0
  9c:	mov	w0, #0xa                   	// #10
  a0:	bl	0 <putc>
  a4:	adrp	x0, 0 <print_prompt>
  a8:	add	x1, x0, #0x0
  ac:	mov	w0, #0x2                   	// #2
  b0:	bl	0 <signal>
  b4:	mov	w1, #0x1                   	// #1
  b8:	adrp	x0, 0 <print_prompt>
  bc:	add	x0, x0, #0x0
  c0:	bl	0 <longjmp>

00000000000000c4 <ss_listen>:
  c4:	mov	x12, #0x22a0                	// #8864
  c8:	sub	sp, sp, x12
  cc:	stp	x29, x30, [sp]
  d0:	mov	x29, sp
  d4:	str	x19, [sp, #16]
  d8:	str	w0, [sp, #44]
  dc:	adrp	x0, 0 <print_prompt>
  e0:	add	x0, x0, #0x0
  e4:	ldr	x0, [x0]
  e8:	str	x0, [sp, #8840]
  ec:	adrp	x0, 0 <_ss_table>
  f0:	add	x0, x0, #0x0
  f4:	ldr	x1, [x0]
  f8:	ldrsw	x0, [sp, #44]
  fc:	lsl	x0, x0, #3
 100:	add	x0, x1, x0
 104:	ldr	x0, [x0]
 108:	str	x0, [sp, #8832]
 10c:	adrp	x0, 0 <print_prompt>
 110:	add	x0, x0, #0x0
 114:	ldr	x1, [sp, #8832]
 118:	str	x1, [x0]
 11c:	adrp	x0, 0 <print_prompt>
 120:	add	x0, x0, #0x0
 124:	str	xzr, [x0]
 128:	ldr	x0, [sp, #8832]
 12c:	str	wzr, [x0, #136]
 130:	add	x0, sp, #0x168
 134:	bl	0 <sigemptyset>
 138:	add	x0, sp, #0x168
 13c:	mov	w1, #0x2                   	// #2
 140:	bl	0 <sigaddset>
 144:	add	x1, sp, #0x1e8
 148:	add	x0, sp, #0x168
 14c:	mov	x2, x1
 150:	mov	x1, x0
 154:	mov	w0, #0x0                   	// #0
 158:	bl	0 <sigprocmask>
 15c:	adrp	x0, 0 <print_prompt>
 160:	add	x1, x0, #0x0
 164:	add	x0, sp, #0x30
 168:	mov	x3, x1
 16c:	mov	x1, #0x138                 	// #312
 170:	mov	x2, x1
 174:	mov	x1, x3
 178:	bl	0 <memcpy>
 17c:	adrp	x0, 0 <print_prompt>
 180:	add	x1, x0, #0x0
 184:	mov	w0, #0x2                   	// #2
 188:	bl	0 <signal>
 18c:	str	x0, [sp, #8824]
 190:	adrp	x0, 0 <print_prompt>
 194:	add	x0, x0, #0x0
 198:	bl	0 <_setjmp>
 19c:	add	x0, sp, #0x1e8
 1a0:	mov	x2, #0x0                   	// #0
 1a4:	mov	x1, x0
 1a8:	mov	w0, #0x2                   	// #2
 1ac:	bl	0 <sigprocmask>
 1b0:	b	3f4 <ss_listen+0x330>
 1b4:	adrp	x0, 0 <print_prompt>
 1b8:	add	x0, x0, #0x0
 1bc:	ldr	x0, [x0]
 1c0:	str	x0, [sp, #8816]
 1c4:	adrp	x0, 0 <print_prompt>
 1c8:	add	x1, x0, #0x0
 1cc:	mov	w0, #0x12                  	// #18
 1d0:	bl	0 <signal>
 1d4:	mov	x1, x0
 1d8:	adrp	x0, 0 <print_prompt>
 1dc:	add	x0, x0, #0x0
 1e0:	str	x1, [x0]
 1e4:	adrp	x0, 0 <print_prompt>
 1e8:	add	x0, x0, #0x0
 1ec:	ldr	x1, [x0]
 1f0:	adrp	x0, 0 <print_prompt>
 1f4:	add	x0, x0, #0x0
 1f8:	cmp	x1, x0
 1fc:	b.ne	210 <ss_listen+0x14c>  // b.any
 200:	adrp	x0, 0 <print_prompt>
 204:	add	x0, x0, #0x0
 208:	ldr	x1, [sp, #8816]
 20c:	str	x1, [x0]
 210:	ldr	x0, [sp, #8832]
 214:	ldr	x0, [x0, #104]
 218:	cmp	x0, #0x0
 21c:	b.eq	244 <ss_listen+0x180>  // b.none
 220:	ldr	x0, [sp, #8832]
 224:	ldr	x1, [x0, #104]
 228:	adrp	x0, 0 <print_prompt>
 22c:	add	x0, x0, #0x0
 230:	ldr	x0, [x0]
 234:	ldr	x0, [x0, #56]
 238:	blr	x1
 23c:	str	x0, [sp, #8848]
 240:	b	290 <ss_listen+0x1cc>
 244:	mov	w0, #0x0                   	// #0
 248:	bl	0 <print_prompt>
 24c:	adrp	x0, 0 <stdin>
 250:	add	x0, x0, #0x0
 254:	ldr	x1, [x0]
 258:	add	x0, sp, #0x268
 25c:	mov	x2, x1
 260:	mov	w1, #0x2000                	// #8192
 264:	bl	0 <fgets>
 268:	mov	x1, x0
 26c:	add	x0, sp, #0x268
 270:	cmp	x1, x0
 274:	b.ne	284 <ss_listen+0x1c0>  // b.any
 278:	add	x0, sp, #0x268
 27c:	str	x0, [sp, #8848]
 280:	b	288 <ss_listen+0x1c4>
 284:	str	xzr, [sp, #8848]
 288:	add	x0, sp, #0x2, lsl #12
 28c:	strb	wzr, [x0, #615]
 290:	ldr	x0, [sp, #8848]
 294:	cmp	x0, #0x0
 298:	b.ne	2c4 <ss_listen+0x200>  // b.any
 29c:	mov	w0, #0x6d06                	// #27910
 2a0:	movk	w0, #0xb, lsl #16
 2a4:	str	w0, [sp, #8860]
 2a8:	adrp	x0, 0 <print_prompt>
 2ac:	add	x0, x0, #0x0
 2b0:	ldr	x0, [x0]
 2b4:	mov	x1, x0
 2b8:	mov	w0, #0x12                  	// #18
 2bc:	bl	0 <signal>
 2c0:	b	408 <ss_listen+0x344>
 2c4:	mov	w1, #0xa                   	// #10
 2c8:	ldr	x0, [sp, #8848]
 2cc:	bl	0 <strchr>
 2d0:	str	x0, [sp, #8808]
 2d4:	ldr	x0, [sp, #8808]
 2d8:	cmp	x0, #0x0
 2dc:	b.eq	2fc <ss_listen+0x238>  // b.none
 2e0:	ldr	x0, [sp, #8808]
 2e4:	strb	wzr, [x0]
 2e8:	ldr	x1, [sp, #8808]
 2ec:	ldr	x0, [sp, #8848]
 2f0:	cmp	x1, x0
 2f4:	b.ne	2fc <ss_listen+0x238>  // b.any
 2f8:	b	3f4 <ss_listen+0x330>
 2fc:	adrp	x0, 0 <print_prompt>
 300:	add	x0, x0, #0x0
 304:	ldr	x0, [x0]
 308:	mov	x1, x0
 30c:	mov	w0, #0x12                  	// #18
 310:	bl	0 <signal>
 314:	ldr	x0, [sp, #8832]
 318:	ldr	x0, [x0, #112]
 31c:	cmp	x0, #0x0
 320:	b.eq	334 <ss_listen+0x270>  // b.none
 324:	ldr	x0, [sp, #8832]
 328:	ldr	x1, [x0, #112]
 32c:	ldr	x0, [sp, #8848]
 330:	blr	x1
 334:	ldr	x1, [sp, #8848]
 338:	ldr	w0, [sp, #44]
 33c:	bl	0 <ss_execute_line>
 340:	str	w0, [sp, #8860]
 344:	ldr	w1, [sp, #8860]
 348:	mov	w0, #0x6d04                	// #27908
 34c:	movk	w0, #0xb, lsl #16
 350:	cmp	w1, w0
 354:	b.ne	3dc <ss_listen+0x318>  // b.any
 358:	ldr	x19, [sp, #8848]
 35c:	b	364 <ss_listen+0x2a0>
 360:	add	x19, x19, #0x1
 364:	ldrb	w0, [x19]
 368:	cmp	w0, #0x20
 36c:	b.eq	360 <ss_listen+0x29c>  // b.none
 370:	ldrb	w0, [x19]
 374:	cmp	w0, #0x9
 378:	b.eq	360 <ss_listen+0x29c>  // b.none
 37c:	mov	w1, #0x20                  	// #32
 380:	mov	x0, x19
 384:	bl	0 <strchr>
 388:	str	x0, [sp, #8808]
 38c:	ldr	x0, [sp, #8808]
 390:	cmp	x0, #0x0
 394:	b.eq	3a0 <ss_listen+0x2dc>  // b.none
 398:	ldr	x0, [sp, #8808]
 39c:	strb	wzr, [x0]
 3a0:	mov	w1, #0x9                   	// #9
 3a4:	mov	x0, x19
 3a8:	bl	0 <strchr>
 3ac:	str	x0, [sp, #8808]
 3b0:	ldr	x0, [sp, #8808]
 3b4:	cmp	x0, #0x0
 3b8:	b.eq	3c4 <ss_listen+0x300>  // b.none
 3bc:	ldr	x0, [sp, #8808]
 3c0:	strb	wzr, [x0]
 3c4:	mov	x3, x19
 3c8:	adrp	x0, 0 <print_prompt>
 3cc:	add	x2, x0, #0x0
 3d0:	mov	x1, #0x0                   	// #0
 3d4:	ldr	w0, [sp, #44]
 3d8:	bl	0 <ss_error>
 3dc:	ldr	x0, [sp, #8832]
 3e0:	ldr	x0, [x0, #104]
 3e4:	cmp	x0, #0x0
 3e8:	b.eq	3f4 <ss_listen+0x330>  // b.none
 3ec:	ldr	x0, [sp, #8848]
 3f0:	bl	0 <free>
 3f4:	ldr	x0, [sp, #8832]
 3f8:	ldr	w0, [x0, #136]
 3fc:	cmp	w0, #0x0
 400:	b.eq	1b4 <ss_listen+0xf0>  // b.none
 404:	str	wzr, [sp, #8860]
 408:	ldr	x1, [sp, #8824]
 40c:	mov	w0, #0x2                   	// #2
 410:	bl	0 <signal>
 414:	adrp	x0, 0 <print_prompt>
 418:	add	x0, x0, #0x0
 41c:	mov	x3, x0
 420:	add	x0, sp, #0x30
 424:	mov	x1, #0x138                 	// #312
 428:	mov	x2, x1
 42c:	mov	x1, x0
 430:	mov	x0, x3
 434:	bl	0 <memcpy>
 438:	adrp	x0, 0 <print_prompt>
 43c:	add	x0, x0, #0x0
 440:	ldr	x1, [sp, #8840]
 444:	str	x1, [x0]
 448:	ldr	w0, [sp, #8860]
 44c:	ldr	x19, [sp, #16]
 450:	ldp	x29, x30, [sp]
 454:	mov	x12, #0x22a0                	// #8864
 458:	add	sp, sp, x12
 45c:	ret

0000000000000460 <ss_abort_subsystem>:
 460:	sub	sp, sp, #0x10
 464:	str	w0, [sp, #12]
 468:	str	w1, [sp, #8]
 46c:	adrp	x0, 0 <_ss_table>
 470:	add	x0, x0, #0x0
 474:	ldr	x1, [x0]
 478:	ldrsw	x0, [sp, #12]
 47c:	lsl	x0, x0, #3
 480:	add	x0, x1, x0
 484:	ldr	x0, [x0]
 488:	mov	w1, #0x1                   	// #1
 48c:	str	w1, [x0, #136]
 490:	adrp	x0, 0 <_ss_table>
 494:	add	x0, x0, #0x0
 498:	ldr	x1, [x0]
 49c:	ldrsw	x0, [sp, #12]
 4a0:	lsl	x0, x0, #3
 4a4:	add	x0, x1, x0
 4a8:	ldr	x0, [x0]
 4ac:	ldr	w1, [sp, #8]
 4b0:	str	w1, [x0, #140]
 4b4:	nop
 4b8:	add	sp, sp, #0x10
 4bc:	ret

00000000000004c0 <ss_quit>:
 4c0:	stp	x29, x30, [sp, #-48]!
 4c4:	mov	x29, sp
 4c8:	str	w0, [sp, #44]
 4cc:	str	x1, [sp, #32]
 4d0:	str	w2, [sp, #40]
 4d4:	str	x3, [sp, #24]
 4d8:	mov	w1, #0x0                   	// #0
 4dc:	ldr	w0, [sp, #40]
 4e0:	bl	460 <ss_abort_subsystem>
 4e4:	nop
 4e8:	ldp	x29, x30, [sp], #48
 4ec:	ret

00000000000004f0 <cmd_generator>:
 4f0:	stp	x29, x30, [sp, #-48]!
 4f4:	mov	x29, sp
 4f8:	str	x0, [sp, #24]
 4fc:	str	w1, [sp, #20]
 500:	ldr	w0, [sp, #20]
 504:	cmp	w0, #0x0
 508:	b.ne	58c <cmd_generator+0x9c>  // b.any
 50c:	ldr	x0, [sp, #24]
 510:	bl	0 <strlen>
 514:	mov	w1, w0
 518:	adrp	x0, 0 <print_prompt>
 51c:	add	x0, x0, #0x0
 520:	str	w1, [x0]
 524:	adrp	x0, 0 <print_prompt>
 528:	add	x0, x0, #0x0
 52c:	ldr	x0, [x0]
 530:	ldr	x1, [x0, #64]
 534:	adrp	x0, 0 <print_prompt>
 538:	add	x0, x0, #0x0
 53c:	str	x1, [x0]
 540:	adrp	x0, 0 <print_prompt>
 544:	add	x0, x0, #0x0
 548:	ldr	x0, [x0]
 54c:	cmp	x0, #0x0
 550:	b.eq	56c <cmd_generator+0x7c>  // b.none
 554:	adrp	x0, 0 <print_prompt>
 558:	add	x0, x0, #0x0
 55c:	ldr	x0, [x0]
 560:	ldr	x0, [x0]
 564:	cmp	x0, #0x0
 568:	b.ne	574 <cmd_generator+0x84>  // b.any
 56c:	mov	x0, #0x0                   	// #0
 570:	b	730 <cmd_generator+0x240>
 574:	adrp	x0, 0 <print_prompt>
 578:	add	x0, x0, #0x0
 57c:	str	wzr, [x0]
 580:	adrp	x0, 0 <print_prompt>
 584:	add	x0, x0, #0x0
 588:	str	xzr, [x0]
 58c:	adrp	x0, 0 <print_prompt>
 590:	add	x0, x0, #0x0
 594:	ldr	x0, [x0]
 598:	cmp	x0, #0x0
 59c:	b.eq	5b8 <cmd_generator+0xc8>  // b.none
 5a0:	adrp	x0, 0 <print_prompt>
 5a4:	add	x0, x0, #0x0
 5a8:	ldr	x0, [x0]
 5ac:	ldr	x0, [x0]
 5b0:	cmp	x0, #0x0
 5b4:	b.ne	664 <cmd_generator+0x174>  // b.any
 5b8:	adrp	x0, 0 <print_prompt>
 5bc:	add	x0, x0, #0x0
 5c0:	ldr	x0, [x0]
 5c4:	ldr	x0, [x0]
 5c8:	ldr	x1, [x0, #8]
 5cc:	adrp	x0, 0 <print_prompt>
 5d0:	add	x0, x0, #0x0
 5d4:	ldr	w0, [x0]
 5d8:	add	w3, w0, #0x1
 5dc:	adrp	x2, 0 <print_prompt>
 5e0:	add	x2, x2, #0x0
 5e4:	str	w3, [x2]
 5e8:	sxtw	x0, w0
 5ec:	lsl	x0, x0, #5
 5f0:	add	x0, x1, x0
 5f4:	str	x0, [sp, #40]
 5f8:	ldr	x0, [sp, #40]
 5fc:	ldr	x1, [x0]
 600:	adrp	x0, 0 <print_prompt>
 604:	add	x0, x0, #0x0
 608:	str	x1, [x0]
 60c:	adrp	x0, 0 <print_prompt>
 610:	add	x0, x0, #0x0
 614:	ldr	x0, [x0]
 618:	cmp	x0, #0x0
 61c:	b.ne	664 <cmd_generator+0x174>  // b.any
 620:	adrp	x0, 0 <print_prompt>
 624:	add	x0, x0, #0x0
 628:	ldr	x0, [x0]
 62c:	add	x1, x0, #0x8
 630:	adrp	x0, 0 <print_prompt>
 634:	add	x0, x0, #0x0
 638:	str	x1, [x0]
 63c:	adrp	x0, 0 <print_prompt>
 640:	add	x0, x0, #0x0
 644:	ldr	x0, [x0]
 648:	ldr	x0, [x0]
 64c:	cmp	x0, #0x0
 650:	b.eq	728 <cmd_generator+0x238>  // b.none
 654:	adrp	x0, 0 <print_prompt>
 658:	add	x0, x0, #0x0
 65c:	str	wzr, [x0]
 660:	b	724 <cmd_generator+0x234>
 664:	adrp	x0, 0 <print_prompt>
 668:	add	x0, x0, #0x0
 66c:	ldr	x0, [x0]
 670:	ldr	x3, [x0]
 674:	adrp	x0, 0 <print_prompt>
 678:	add	x0, x0, #0x0
 67c:	ldr	w0, [x0]
 680:	sxtw	x0, w0
 684:	mov	x2, x0
 688:	ldr	x1, [sp, #24]
 68c:	mov	x0, x3
 690:	bl	0 <strncmp>
 694:	cmp	w0, #0x0
 698:	b.ne	708 <cmd_generator+0x218>  // b.any
 69c:	adrp	x0, 0 <print_prompt>
 6a0:	add	x0, x0, #0x0
 6a4:	ldr	x0, [x0]
 6a8:	ldr	x0, [x0]
 6ac:	bl	0 <strlen>
 6b0:	add	x0, x0, #0x1
 6b4:	bl	0 <malloc>
 6b8:	str	x0, [sp, #32]
 6bc:	ldr	x0, [sp, #32]
 6c0:	cmp	x0, #0x0
 6c4:	b.eq	6e4 <cmd_generator+0x1f4>  // b.none
 6c8:	adrp	x0, 0 <print_prompt>
 6cc:	add	x0, x0, #0x0
 6d0:	ldr	x0, [x0]
 6d4:	ldr	x0, [x0]
 6d8:	mov	x1, x0
 6dc:	ldr	x0, [sp, #32]
 6e0:	bl	0 <strcpy>
 6e4:	adrp	x0, 0 <print_prompt>
 6e8:	add	x0, x0, #0x0
 6ec:	ldr	x0, [x0]
 6f0:	add	x1, x0, #0x8
 6f4:	adrp	x0, 0 <print_prompt>
 6f8:	add	x0, x0, #0x0
 6fc:	str	x1, [x0]
 700:	ldr	x0, [sp, #32]
 704:	b	730 <cmd_generator+0x240>
 708:	adrp	x0, 0 <print_prompt>
 70c:	add	x0, x0, #0x0
 710:	ldr	x0, [x0]
 714:	add	x1, x0, #0x8
 718:	adrp	x0, 0 <print_prompt>
 71c:	add	x0, x0, #0x0
 720:	str	x1, [x0]
 724:	b	58c <cmd_generator+0x9c>
 728:	nop
 72c:	mov	x0, #0x0                   	// #0
 730:	ldp	x29, x30, [sp], #48
 734:	ret

0000000000000738 <ss_rl_completion>:
 738:	stp	x29, x30, [sp, #-32]!
 73c:	mov	x29, sp
 740:	str	x0, [sp, #24]
 744:	str	w1, [sp, #20]
 748:	str	w2, [sp, #16]
 74c:	ldr	w0, [sp, #20]
 750:	cmp	w0, #0x0
 754:	b.ne	794 <ss_rl_completion+0x5c>  // b.any
 758:	adrp	x0, 0 <print_prompt>
 75c:	add	x0, x0, #0x0
 760:	ldr	x0, [x0]
 764:	ldr	x0, [x0, #128]
 768:	cmp	x0, #0x0
 76c:	b.eq	794 <ss_rl_completion+0x5c>  // b.none
 770:	adrp	x0, 0 <print_prompt>
 774:	add	x0, x0, #0x0
 778:	ldr	x0, [x0]
 77c:	ldr	x2, [x0, #128]
 780:	adrp	x0, 0 <print_prompt>
 784:	add	x1, x0, #0x0
 788:	ldr	x0, [sp, #24]
 78c:	blr	x2
 790:	b	798 <ss_rl_completion+0x60>
 794:	mov	x0, #0x0                   	// #0
 798:	ldp	x29, x30, [sp], #32
 79c:	ret

parse.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_parse>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	str	w0, [sp, #76]
  18:	mov	x19, x1
  1c:	str	x2, [sp, #64]
  20:	mov	x0, #0x8                   	// #8
  24:	bl	0 <malloc>
  28:	mov	x20, x0
  2c:	cmp	x20, #0x0
  30:	b.ne	60 <ss_parse+0x60>  // b.any
  34:	bl	0 <__errno_location>
  38:	ldr	w0, [x0]
  3c:	sxtw	x1, w0
  40:	adrp	x0, 0 <ss_parse>
  44:	add	x2, x0, #0x0
  48:	ldr	w0, [sp, #76]
  4c:	bl	0 <ss_error>
  50:	ldr	x0, [sp, #64]
  54:	str	wzr, [x0]
  58:	mov	x0, x20
  5c:	b	2d4 <ss_parse+0x2d4>
  60:	str	xzr, [x20]
  64:	mov	w23, #0x0                   	// #0
  68:	mov	w22, #0x0                   	// #0
  6c:	mov	x21, x19
  70:	b	198 <ss_parse+0x198>
  74:	ldrb	w0, [x19]
  78:	cmp	w0, #0x0
  7c:	b.eq	2c4 <ss_parse+0x2c4>  // b.none
  80:	ldrb	w0, [x19]
  84:	cmp	w0, #0x20
  88:	b.eq	98 <ss_parse+0x98>  // b.none
  8c:	ldrb	w0, [x19]
  90:	cmp	w0, #0x9
  94:	b.ne	a0 <ss_parse+0xa0>  // b.any
  98:	add	x19, x19, #0x1
  9c:	b	198 <ss_parse+0x198>
  a0:	ldrb	w0, [x19]
  a4:	cmp	w0, #0x22
  a8:	b.ne	128 <ss_parse+0x128>  // b.any
  ac:	mov	w22, #0x2                   	// #2
  b0:	mov	x0, x19
  b4:	add	x19, x0, #0x1
  b8:	mov	x21, x0
  bc:	add	w0, w23, #0x2
  c0:	mov	w0, w0
  c4:	lsl	x0, x0, #3
  c8:	mov	x1, x0
  cc:	mov	x0, x20
  d0:	bl	0 <realloc>
  d4:	mov	x24, x0
  d8:	cmp	x24, #0x0
  dc:	b.ne	f8 <ss_parse+0xf8>  // b.any
  e0:	mov	x0, x20
  e4:	bl	0 <free>
  e8:	ldr	x0, [sp, #64]
  ec:	str	wzr, [x0]
  f0:	mov	x0, #0x0                   	// #0
  f4:	b	2d4 <ss_parse+0x2d4>
  f8:	mov	x20, x24
  fc:	mov	w0, w23
 100:	add	w23, w0, #0x1
 104:	sxtw	x0, w0
 108:	lsl	x0, x0, #3
 10c:	add	x0, x20, x0
 110:	str	x21, [x0]
 114:	sxtw	x0, w23
 118:	lsl	x0, x0, #3
 11c:	add	x0, x20, x0
 120:	str	xzr, [x0]
 124:	b	198 <ss_parse+0x198>
 128:	mov	w22, #0x1                   	// #1
 12c:	mov	x21, x19
 130:	add	w0, w23, #0x2
 134:	mov	w0, w0
 138:	lsl	x0, x0, #3
 13c:	mov	x1, x0
 140:	mov	x0, x20
 144:	bl	0 <realloc>
 148:	mov	x24, x0
 14c:	cmp	x24, #0x0
 150:	b.ne	16c <ss_parse+0x16c>  // b.any
 154:	mov	x0, x20
 158:	bl	0 <free>
 15c:	ldr	x0, [sp, #64]
 160:	str	wzr, [x0]
 164:	mov	x0, #0x0                   	// #0
 168:	b	2d4 <ss_parse+0x2d4>
 16c:	mov	x20, x24
 170:	mov	w0, w23
 174:	add	w23, w0, #0x1
 178:	sxtw	x0, w0
 17c:	lsl	x0, x0, #3
 180:	add	x0, x20, x0
 184:	str	x19, [x0]
 188:	sxtw	x0, w23
 18c:	lsl	x0, x0, #3
 190:	add	x0, x20, x0
 194:	str	xzr, [x0]
 198:	cmp	w22, #0x0
 19c:	b.eq	74 <ss_parse+0x74>  // b.none
 1a0:	b	220 <ss_parse+0x220>
 1a4:	ldrb	w0, [x19]
 1a8:	cmp	w0, #0x0
 1ac:	b.ne	1c0 <ss_parse+0x1c0>  // b.any
 1b0:	mov	x0, x21
 1b4:	add	x21, x0, #0x1
 1b8:	strb	wzr, [x0]
 1bc:	b	2c8 <ss_parse+0x2c8>
 1c0:	ldrb	w0, [x19]
 1c4:	cmp	w0, #0x20
 1c8:	b.eq	1d8 <ss_parse+0x1d8>  // b.none
 1cc:	ldrb	w0, [x19]
 1d0:	cmp	w0, #0x9
 1d4:	b.ne	1f0 <ss_parse+0x1f0>  // b.any
 1d8:	mov	x0, x21
 1dc:	add	x21, x0, #0x1
 1e0:	strb	wzr, [x0]
 1e4:	add	x19, x19, #0x1
 1e8:	mov	w22, #0x0                   	// #0
 1ec:	b	220 <ss_parse+0x220>
 1f0:	ldrb	w0, [x19]
 1f4:	cmp	w0, #0x22
 1f8:	b.ne	208 <ss_parse+0x208>  // b.any
 1fc:	add	x19, x19, #0x1
 200:	mov	w22, #0x2                   	// #2
 204:	b	220 <ss_parse+0x220>
 208:	mov	x1, x19
 20c:	add	x19, x1, #0x1
 210:	mov	x0, x21
 214:	add	x21, x0, #0x1
 218:	ldrb	w1, [x1]
 21c:	strb	w1, [x0]
 220:	cmp	w22, #0x1
 224:	b.eq	1a4 <ss_parse+0x1a4>  // b.none
 228:	b	2b8 <ss_parse+0x2b8>
 22c:	ldrb	w0, [x19]
 230:	cmp	w0, #0x0
 234:	b.ne	264 <ss_parse+0x264>  // b.any
 238:	adrp	x0, 0 <ss_parse>
 23c:	add	x2, x0, #0x0
 240:	mov	x1, #0x0                   	// #0
 244:	ldr	w0, [sp, #76]
 248:	bl	0 <ss_error>
 24c:	mov	x0, x20
 250:	bl	0 <free>
 254:	ldr	x0, [sp, #64]
 258:	str	wzr, [x0]
 25c:	mov	x0, #0x0                   	// #0
 260:	b	2d4 <ss_parse+0x2d4>
 264:	ldrb	w0, [x19]
 268:	cmp	w0, #0x22
 26c:	b.ne	2a0 <ss_parse+0x2a0>  // b.any
 270:	add	x19, x19, #0x1
 274:	ldrb	w0, [x19]
 278:	cmp	w0, #0x22
 27c:	b.ne	298 <ss_parse+0x298>  // b.any
 280:	mov	x0, x21
 284:	add	x21, x0, #0x1
 288:	mov	w1, #0x22                  	// #34
 28c:	strb	w1, [x0]
 290:	add	x19, x19, #0x1
 294:	b	2b8 <ss_parse+0x2b8>
 298:	mov	w22, #0x1                   	// #1
 29c:	b	2b8 <ss_parse+0x2b8>
 2a0:	mov	x1, x19
 2a4:	add	x19, x1, #0x1
 2a8:	mov	x0, x21
 2ac:	add	x21, x0, #0x1
 2b0:	ldrb	w1, [x1]
 2b4:	strb	w1, [x0]
 2b8:	cmp	w22, #0x2
 2bc:	b.eq	22c <ss_parse+0x22c>  // b.none
 2c0:	b	198 <ss_parse+0x198>
 2c4:	nop
 2c8:	ldr	x0, [sp, #64]
 2cc:	str	w23, [x0]
 2d0:	mov	x0, x20
 2d4:	ldp	x19, x20, [sp, #16]
 2d8:	ldp	x21, x22, [sp, #32]
 2dc:	ldp	x23, x24, [sp, #48]
 2e0:	ldp	x29, x30, [sp], #80
 2e4:	ret

error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_name>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	str	w0, [sp, #60]
  14:	adrp	x0, 0 <_ss_table>
  18:	add	x0, x0, #0x0
  1c:	ldr	x1, [x0]
  20:	ldrsw	x0, [sp, #60]
  24:	lsl	x0, x0, #3
  28:	add	x0, x1, x0
  2c:	ldr	x19, [x0]
  30:	ldr	x0, [x19, #32]
  34:	cmp	x0, #0x0
  38:	b.ne	7c <ss_name+0x7c>  // b.any
  3c:	ldr	x0, [x19]
  40:	bl	0 <strlen>
  44:	add	w0, w0, #0x1
  48:	mov	w0, w0
  4c:	bl	0 <malloc>
  50:	mov	x22, x0
  54:	cmp	x22, #0x0
  58:	b.ne	64 <ss_name+0x64>  // b.any
  5c:	mov	x0, #0x0                   	// #0
  60:	b	134 <ss_name+0x134>
  64:	ldr	x0, [x19]
  68:	mov	x1, x0
  6c:	mov	x0, x22
  70:	bl	0 <strcpy>
  74:	mov	x0, x22
  78:	b	134 <ss_name+0x134>
  7c:	ldr	x0, [x19]
  80:	bl	0 <strlen>
  84:	mov	x20, x0
  88:	ldr	x0, [x19, #32]
  8c:	bl	0 <strlen>
  90:	add	x0, x20, x0
  94:	add	x0, x0, #0x4
  98:	bl	0 <malloc>
  9c:	mov	x22, x0
  a0:	mov	x20, x22
  a4:	ldr	x21, [x19]
  a8:	b	c4 <ss_name+0xc4>
  ac:	mov	x1, x21
  b0:	add	x21, x1, #0x1
  b4:	mov	x0, x20
  b8:	add	x20, x0, #0x1
  bc:	ldrb	w1, [x1]
  c0:	strb	w1, [x0]
  c4:	ldrb	w0, [x21]
  c8:	cmp	w0, #0x0
  cc:	b.ne	ac <ss_name+0xac>  // b.any
  d0:	mov	x0, x20
  d4:	add	x20, x0, #0x1
  d8:	mov	w1, #0x20                  	// #32
  dc:	strb	w1, [x0]
  e0:	mov	x0, x20
  e4:	add	x20, x0, #0x1
  e8:	mov	w1, #0x28                  	// #40
  ec:	strb	w1, [x0]
  f0:	ldr	x21, [x19, #32]
  f4:	b	110 <ss_name+0x110>
  f8:	mov	x1, x21
  fc:	add	x21, x1, #0x1
 100:	mov	x0, x20
 104:	add	x20, x0, #0x1
 108:	ldrb	w1, [x1]
 10c:	strb	w1, [x0]
 110:	ldrb	w0, [x21]
 114:	cmp	w0, #0x0
 118:	b.ne	f8 <ss_name+0xf8>  // b.any
 11c:	mov	x0, x20
 120:	add	x20, x0, #0x1
 124:	mov	w1, #0x29                  	// #41
 128:	strb	w1, [x0]
 12c:	strb	wzr, [x20]
 130:	mov	x0, x22
 134:	ldp	x19, x20, [sp, #16]
 138:	ldp	x21, x22, [sp, #32]
 13c:	ldp	x29, x30, [sp], #64
 140:	ret

0000000000000144 <ss_error>:
 144:	stp	x29, x30, [sp, #-304]!
 148:	mov	x29, sp
 14c:	str	x19, [sp, #16]
 150:	str	w0, [sp, #92]
 154:	str	x1, [sp, #80]
 158:	str	x2, [sp, #72]
 15c:	str	x3, [sp, #264]
 160:	str	x4, [sp, #272]
 164:	str	x5, [sp, #280]
 168:	str	x6, [sp, #288]
 16c:	str	x7, [sp, #296]
 170:	str	q0, [sp, #128]
 174:	str	q1, [sp, #144]
 178:	str	q2, [sp, #160]
 17c:	str	q3, [sp, #176]
 180:	str	q4, [sp, #192]
 184:	str	q5, [sp, #208]
 188:	str	q6, [sp, #224]
 18c:	str	q7, [sp, #240]
 190:	add	x0, sp, #0x130
 194:	str	x0, [sp, #96]
 198:	add	x0, sp, #0x130
 19c:	str	x0, [sp, #104]
 1a0:	add	x0, sp, #0x100
 1a4:	str	x0, [sp, #112]
 1a8:	mov	w0, #0xffffffd8            	// #-40
 1ac:	str	w0, [sp, #120]
 1b0:	mov	w0, #0xffffff80            	// #-128
 1b4:	str	w0, [sp, #124]
 1b8:	ldr	w0, [sp, #92]
 1bc:	bl	0 <ss_name>
 1c0:	mov	x19, x0
 1c4:	add	x2, sp, #0x20
 1c8:	add	x3, sp, #0x60
 1cc:	ldp	x0, x1, [x3]
 1d0:	stp	x0, x1, [x2]
 1d4:	ldp	x0, x1, [x3, #16]
 1d8:	stp	x0, x1, [x2, #16]
 1dc:	add	x0, sp, #0x20
 1e0:	mov	x3, x0
 1e4:	ldr	x2, [sp, #72]
 1e8:	ldr	x1, [sp, #80]
 1ec:	mov	x0, x19
 1f0:	bl	0 <com_err_va>
 1f4:	mov	x0, x19
 1f8:	bl	0 <free>
 1fc:	nop
 200:	ldr	x19, [sp, #16]
 204:	ldp	x29, x30, [sp], #304
 208:	ret

000000000000020c <ss_perror>:
 20c:	stp	x29, x30, [sp, #-48]!
 210:	mov	x29, sp
 214:	str	w0, [sp, #44]
 218:	str	x1, [sp, #32]
 21c:	str	x2, [sp, #24]
 220:	ldr	x3, [sp, #24]
 224:	adrp	x0, 0 <ss_name>
 228:	add	x2, x0, #0x0
 22c:	ldr	x1, [sp, #32]
 230:	ldr	w0, [sp, #44]
 234:	bl	144 <ss_error>
 238:	nop
 23c:	ldp	x29, x30, [sp], #48
 240:	ret

prompt.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_set_prompt>:
   0:	sub	sp, sp, #0x10
   4:	str	w0, [sp, #12]
   8:	str	x1, [sp]
   c:	adrp	x0, 0 <_ss_table>
  10:	add	x0, x0, #0x0
  14:	ldr	x1, [x0]
  18:	ldrsw	x0, [sp, #12]
  1c:	lsl	x0, x0, #3
  20:	add	x0, x1, x0
  24:	ldr	x0, [x0]
  28:	ldr	x1, [sp]
  2c:	str	x1, [x0, #56]
  30:	nop
  34:	add	sp, sp, #0x10
  38:	ret

000000000000003c <ss_get_prompt>:
  3c:	sub	sp, sp, #0x10
  40:	str	w0, [sp, #12]
  44:	adrp	x0, 0 <_ss_table>
  48:	add	x0, x0, #0x0
  4c:	ldr	x1, [x0]
  50:	ldrsw	x0, [sp, #12]
  54:	lsl	x0, x0, #3
  58:	add	x0, x1, x0
  5c:	ldr	x0, [x0]
  60:	ldr	x0, [x0, #56]
  64:	add	sp, sp, #0x10
  68:	ret

request_tbl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_add_request_table>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	str	x21, [sp, #32]
  10:	str	w0, [sp, #76]
  14:	str	x1, [sp, #64]
  18:	str	w2, [sp, #72]
  1c:	str	x3, [sp, #56]
  20:	adrp	x0, 0 <_ss_table>
  24:	add	x0, x0, #0x0
  28:	ldr	x1, [x0]
  2c:	ldrsw	x0, [sp, #76]
  30:	lsl	x0, x0, #3
  34:	add	x0, x1, x0
  38:	ldr	x20, [x0]
  3c:	mov	w19, #0x0                   	// #0
  40:	b	48 <ss_add_request_table+0x48>
  44:	add	w19, w19, #0x1
  48:	ldr	x1, [x20, #64]
  4c:	sxtw	x0, w19
  50:	lsl	x0, x0, #3
  54:	add	x0, x1, x0
  58:	ldr	x0, [x0]
  5c:	cmp	x0, #0x0
  60:	b.ne	44 <ss_add_request_table+0x44>  // b.any
  64:	add	w19, w19, #0x2
  68:	ldr	x2, [x20, #64]
  6c:	mov	w0, w19
  70:	mov	w0, w0
  74:	lsl	x0, x0, #3
  78:	mov	x1, x0
  7c:	mov	x0, x2
  80:	bl	0 <realloc>
  84:	str	x0, [sp, #88]
  88:	ldr	x0, [sp, #88]
  8c:	cmp	x0, #0x0
  90:	b.ne	a8 <ss_add_request_table+0xa8>  // b.any
  94:	bl	0 <__errno_location>
  98:	ldr	w1, [x0]
  9c:	ldr	x0, [sp, #56]
  a0:	str	w1, [x0]
  a4:	b	14c <ss_add_request_table+0x14c>
  a8:	ldr	x0, [sp, #88]
  ac:	str	x0, [x20, #64]
  b0:	sub	w0, w19, #0x1
  b4:	ldr	w1, [sp, #72]
  b8:	cmp	w1, w0
  bc:	b.lt	c8 <ss_add_request_table+0xc8>  // b.tstop
  c0:	sub	w0, w19, #0x2
  c4:	str	w0, [sp, #72]
  c8:	cmp	w19, #0x1
  cc:	b.le	114 <ss_add_request_table+0x114>
  d0:	sub	w21, w19, #0x2
  d4:	b	108 <ss_add_request_table+0x108>
  d8:	ldr	x1, [x20, #64]
  dc:	sxtw	x0, w21
  e0:	lsl	x0, x0, #3
  e4:	add	x1, x1, x0
  e8:	ldr	x2, [x20, #64]
  ec:	sxtw	x0, w21
  f0:	add	x0, x0, #0x1
  f4:	lsl	x0, x0, #3
  f8:	add	x0, x2, x0
  fc:	ldr	x1, [x1]
 100:	str	x1, [x0]
 104:	sub	w21, w21, #0x1
 108:	ldr	w0, [sp, #72]
 10c:	cmp	w21, w0
 110:	b.ge	d8 <ss_add_request_table+0xd8>  // b.tcont
 114:	ldr	x1, [x20, #64]
 118:	ldrsw	x0, [sp, #72]
 11c:	lsl	x0, x0, #3
 120:	add	x0, x1, x0
 124:	ldr	x1, [sp, #64]
 128:	str	x1, [x0]
 12c:	ldr	x1, [x20, #64]
 130:	sxtw	x0, w19
 134:	lsl	x0, x0, #3
 138:	sub	x0, x0, #0x8
 13c:	add	x0, x1, x0
 140:	str	xzr, [x0]
 144:	ldr	x0, [sp, #56]
 148:	str	wzr, [x0]
 14c:	ldp	x19, x20, [sp, #16]
 150:	ldr	x21, [sp, #32]
 154:	ldp	x29, x30, [sp], #96
 158:	ret

000000000000015c <ss_delete_request_table>:
 15c:	stp	x19, x20, [sp, #-48]!
 160:	str	w0, [sp, #44]
 164:	str	x1, [sp, #32]
 168:	str	x2, [sp, #24]
 16c:	ldr	x0, [sp, #24]
 170:	mov	w1, #0x6d08                	// #27912
 174:	movk	w1, #0xb, lsl #16
 178:	str	w1, [x0]
 17c:	adrp	x0, 0 <_ss_table>
 180:	add	x0, x0, #0x0
 184:	ldr	x1, [x0]
 188:	ldrsw	x0, [sp, #44]
 18c:	lsl	x0, x0, #3
 190:	add	x0, x1, x0
 194:	ldr	x19, [x0]
 198:	ldr	x19, [x19, #64]
 19c:	mov	x20, x19
 1a0:	b	1d0 <ss_delete_request_table+0x74>
 1a4:	ldr	x0, [x19]
 1a8:	ldr	x1, [sp, #32]
 1ac:	cmp	x1, x0
 1b0:	b.eq	1cc <ss_delete_request_table+0x70>  // b.none
 1b4:	mov	x0, x20
 1b8:	add	x20, x0, #0x8
 1bc:	ldr	x1, [x19]
 1c0:	str	x1, [x0]
 1c4:	ldr	x0, [sp, #24]
 1c8:	str	wzr, [x0]
 1cc:	add	x19, x19, #0x8
 1d0:	ldr	x0, [x19]
 1d4:	cmp	x0, #0x0
 1d8:	b.ne	1a4 <ss_delete_request_table+0x48>  // b.any
 1dc:	str	xzr, [x20]
 1e0:	nop
 1e4:	ldp	x19, x20, [sp], #48
 1e8:	ret

list_rqs.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_list_requests>:
   0:	stp	x29, x30, [sp, #-384]!
   4:	mov	x29, sp
   8:	str	w0, [sp, #44]
   c:	str	x1, [sp, #32]
  10:	str	w2, [sp, #40]
  14:	str	x3, [sp, #24]
  18:	add	x0, sp, #0x40
  1c:	bl	0 <sigemptyset>
  20:	add	x0, sp, #0x40
  24:	mov	w1, #0x2                   	// #2
  28:	bl	0 <sigaddset>
  2c:	add	x1, sp, #0xc0
  30:	add	x0, sp, #0x40
  34:	mov	x2, x1
  38:	mov	x1, x0
  3c:	mov	w0, #0x0                   	// #0
  40:	bl	0 <sigprocmask>
  44:	mov	x1, #0x1                   	// #1
  48:	mov	w0, #0x2                   	// #2
  4c:	bl	0 <signal>
  50:	str	x0, [sp, #344]
  54:	bl	0 <ss_pager_create>
  58:	str	w0, [sp, #340]
  5c:	ldr	w0, [sp, #340]
  60:	cmp	w0, #0x0
  64:	b.ge	84 <ss_list_requests+0x84>  // b.tcont
  68:	adrp	x0, 0 <ss_list_requests>
  6c:	add	x0, x0, #0x0
  70:	bl	0 <perror>
  74:	ldr	x1, [sp, #344]
  78:	mov	w0, #0x2                   	// #2
  7c:	bl	0 <signal>
  80:	b	290 <ss_list_requests+0x290>
  84:	adrp	x0, 0 <ss_list_requests>
  88:	add	x1, x0, #0x0
  8c:	ldr	w0, [sp, #340]
  90:	bl	0 <fdopen>
  94:	str	x0, [sp, #328]
  98:	add	x0, sp, #0xc0
  9c:	mov	x2, #0x0                   	// #0
  a0:	mov	x1, x0
  a4:	mov	w0, #0x2                   	// #2
  a8:	bl	0 <sigprocmask>
  ac:	adrp	x0, 0 <_ss_table>
  b0:	add	x0, x0, #0x0
  b4:	ldr	x1, [x0]
  b8:	ldrsw	x0, [sp, #40]
  bc:	lsl	x0, x0, #3
  c0:	add	x0, x1, x0
  c4:	ldr	x0, [x0]
  c8:	ldr	x0, [x0]
  cc:	mov	x2, x0
  d0:	adrp	x0, 0 <ss_list_requests>
  d4:	add	x1, x0, #0x0
  d8:	ldr	x0, [sp, #328]
  dc:	bl	0 <fprintf>
  e0:	adrp	x0, 0 <_ss_table>
  e4:	add	x0, x0, #0x0
  e8:	ldr	x1, [x0]
  ec:	ldrsw	x0, [sp, #40]
  f0:	lsl	x0, x0, #3
  f4:	add	x0, x1, x0
  f8:	ldr	x0, [x0]
  fc:	ldr	x0, [x0, #64]
 100:	str	x0, [sp, #352]
 104:	b	264 <ss_list_requests+0x264>
 108:	ldr	x0, [sp, #352]
 10c:	ldr	x0, [x0]
 110:	ldr	x0, [x0, #8]
 114:	str	x0, [sp, #376]
 118:	b	248 <ss_list_requests+0x248>
 11c:	mov	w0, #0xfffffffe            	// #-2
 120:	str	w0, [sp, #360]
 124:	ldr	x0, [sp, #376]
 128:	ldr	w0, [x0, #24]
 12c:	and	w0, w0, #0x1
 130:	cmp	w0, #0x0
 134:	b.ne	238 <ss_list_requests+0x238>  // b.any
 138:	ldr	x0, [sp, #376]
 13c:	ldr	x0, [x0]
 140:	str	x0, [sp, #368]
 144:	b	1b4 <ss_list_requests+0x1b4>
 148:	ldr	x0, [sp, #368]
 14c:	ldr	x0, [x0]
 150:	bl	0 <strlen>
 154:	str	w0, [sp, #324]
 158:	ldr	x0, [sp, #368]
 15c:	ldr	x0, [x0]
 160:	ldr	x1, [sp, #328]
 164:	bl	0 <fputs>
 168:	ldr	w0, [sp, #324]
 16c:	add	w0, w0, #0x2
 170:	ldr	w1, [sp, #360]
 174:	add	w0, w1, w0
 178:	str	w0, [sp, #360]
 17c:	ldr	x0, [sp, #368]
 180:	add	x0, x0, #0x8
 184:	ldr	x0, [x0]
 188:	cmp	x0, #0x0
 18c:	b.eq	1a8 <ss_list_requests+0x1a8>  // b.none
 190:	ldr	x3, [sp, #328]
 194:	mov	x2, #0x2                   	// #2
 198:	mov	x1, #0x1                   	// #1
 19c:	adrp	x0, 0 <ss_list_requests>
 1a0:	add	x0, x0, #0x0
 1a4:	bl	0 <fwrite>
 1a8:	ldr	x0, [sp, #368]
 1ac:	add	x0, x0, #0x8
 1b0:	str	x0, [sp, #368]
 1b4:	ldr	x0, [sp, #368]
 1b8:	ldr	x0, [x0]
 1bc:	cmp	x0, #0x0
 1c0:	b.ne	148 <ss_list_requests+0x148>  // b.any
 1c4:	ldr	w0, [sp, #360]
 1c8:	cmp	w0, #0x17
 1cc:	b.le	1e0 <ss_list_requests+0x1e0>
 1d0:	ldr	x1, [sp, #328]
 1d4:	mov	w0, #0xa                   	// #10
 1d8:	bl	0 <fputc>
 1dc:	str	wzr, [sp, #360]
 1e0:	str	wzr, [sp, #364]
 1e4:	b	200 <ss_list_requests+0x200>
 1e8:	ldr	x1, [sp, #328]
 1ec:	mov	w0, #0x20                  	// #32
 1f0:	bl	0 <fputc>
 1f4:	ldr	w0, [sp, #364]
 1f8:	add	w0, w0, #0x1
 1fc:	str	w0, [sp, #364]
 200:	mov	w1, #0x19                  	// #25
 204:	ldr	w0, [sp, #360]
 208:	sub	w0, w1, w0
 20c:	ldr	w1, [sp, #364]
 210:	cmp	w1, w0
 214:	b.lt	1e8 <ss_list_requests+0x1e8>  // b.tstop
 218:	ldr	x0, [sp, #376]
 21c:	ldr	x0, [x0, #16]
 220:	ldr	x1, [sp, #328]
 224:	bl	0 <fputs>
 228:	ldr	x1, [sp, #328]
 22c:	mov	w0, #0xa                   	// #10
 230:	bl	0 <fputc>
 234:	b	23c <ss_list_requests+0x23c>
 238:	nop
 23c:	ldr	x0, [sp, #376]
 240:	add	x0, x0, #0x20
 244:	str	x0, [sp, #376]
 248:	ldr	x0, [sp, #376]
 24c:	ldr	x0, [x0]
 250:	cmp	x0, #0x0
 254:	b.ne	11c <ss_list_requests+0x11c>  // b.any
 258:	ldr	x0, [sp, #352]
 25c:	add	x0, x0, #0x8
 260:	str	x0, [sp, #352]
 264:	ldr	x0, [sp, #352]
 268:	ldr	x0, [x0]
 26c:	cmp	x0, #0x0
 270:	b.ne	108 <ss_list_requests+0x108>  // b.any
 274:	ldr	x0, [sp, #328]
 278:	bl	0 <fclose>
 27c:	add	x0, sp, #0x3c
 280:	bl	0 <wait>
 284:	ldr	x1, [sp, #344]
 288:	mov	w0, #0x2                   	// #2
 28c:	bl	0 <signal>
 290:	ldp	x29, x30, [sp], #384
 294:	ret

pager.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_safe_getenv>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	x0, [sp, #40]
  10:	bl	0 <getuid>
  14:	mov	w19, w0
  18:	bl	0 <geteuid>
  1c:	cmp	w19, w0
  20:	b.ne	38 <ss_safe_getenv+0x38>  // b.any
  24:	bl	0 <getgid>
  28:	mov	w19, w0
  2c:	bl	0 <getegid>
  30:	cmp	w19, w0
  34:	b.eq	40 <ss_safe_getenv+0x40>  // b.none
  38:	mov	x0, #0x0                   	// #0
  3c:	b	70 <ss_safe_getenv+0x70>
  40:	mov	w4, #0x0                   	// #0
  44:	mov	w3, #0x0                   	// #0
  48:	mov	w2, #0x0                   	// #0
  4c:	mov	w1, #0x0                   	// #0
  50:	mov	w0, #0x3                   	// #3
  54:	bl	0 <prctl>
  58:	cmp	w0, #0x0
  5c:	b.ne	68 <ss_safe_getenv+0x68>  // b.any
  60:	mov	x0, #0x0                   	// #0
  64:	b	70 <ss_safe_getenv+0x70>
  68:	ldr	x0, [sp, #40]
  6c:	bl	0 <secure_getenv>
  70:	ldr	x19, [sp, #16]
  74:	ldp	x29, x30, [sp], #48
  78:	ret

000000000000007c <ss_pager_create>:
  7c:	stp	x29, x30, [sp, #-32]!
  80:	mov	x29, sp
  84:	add	x0, sp, #0x18
  88:	bl	0 <pipe>
  8c:	cmp	w0, #0x0
  90:	b.eq	9c <ss_pager_create+0x20>  // b.none
  94:	mov	w0, #0xffffffff            	// #-1
  98:	b	e8 <ss_pager_create+0x6c>
  9c:	bl	0 <fork>
  a0:	cmn	w0, #0x1
  a4:	b.eq	b4 <ss_pager_create+0x38>  // b.none
  a8:	cmp	w0, #0x0
  ac:	b.eq	bc <ss_pager_create+0x40>  // b.none
  b0:	b	dc <ss_pager_create+0x60>
  b4:	mov	w0, #0xffffffff            	// #-1
  b8:	b	e8 <ss_pager_create+0x6c>
  bc:	ldr	w0, [sp, #24]
  c0:	mov	w1, #0x0                   	// #0
  c4:	bl	0 <dup2>
  c8:	cmn	w0, #0x1
  cc:	b.ne	d8 <ss_pager_create+0x5c>  // b.any
  d0:	mov	w0, #0x1                   	// #1
  d4:	bl	0 <exit>
  d8:	bl	1a4 <ss_page_stdin>
  dc:	ldr	w0, [sp, #24]
  e0:	bl	0 <close>
  e4:	ldr	w0, [sp, #28]
  e8:	ldp	x29, x30, [sp], #32
  ec:	ret

00000000000000f0 <write_all>:
  f0:	stp	x29, x30, [sp, #-64]!
  f4:	mov	x29, sp
  f8:	str	w0, [sp, #44]
  fc:	str	x1, [sp, #32]
 100:	str	x2, [sp, #24]
 104:	str	wzr, [sp, #60]
 108:	b	18c <write_all+0x9c>
 10c:	ldr	x2, [sp, #24]
 110:	ldr	x1, [sp, #32]
 114:	ldr	w0, [sp, #44]
 118:	bl	0 <write>
 11c:	str	x0, [sp, #48]
 120:	ldr	x0, [sp, #48]
 124:	cmp	x0, #0x0
 128:	b.ge	158 <write_all+0x68>  // b.tcont
 12c:	bl	0 <__errno_location>
 130:	ldr	w0, [x0]
 134:	cmp	w0, #0xb
 138:	b.eq	18c <write_all+0x9c>  // b.none
 13c:	bl	0 <__errno_location>
 140:	ldr	w0, [x0]
 144:	cmp	w0, #0x4
 148:	b.ne	150 <write_all+0x60>  // b.any
 14c:	b	18c <write_all+0x9c>
 150:	mov	w0, #0xffffffff            	// #-1
 154:	b	19c <write_all+0xac>
 158:	ldr	x0, [sp, #48]
 15c:	ldr	x1, [sp, #24]
 160:	sub	x0, x1, x0
 164:	str	x0, [sp, #24]
 168:	ldr	x0, [sp, #48]
 16c:	ldr	x1, [sp, #32]
 170:	add	x0, x1, x0
 174:	str	x0, [sp, #32]
 178:	ldr	x0, [sp, #48]
 17c:	mov	w1, w0
 180:	ldr	w0, [sp, #60]
 184:	add	w0, w1, w0
 188:	str	w0, [sp, #60]
 18c:	ldr	x0, [sp, #24]
 190:	cmp	x0, #0x0
 194:	b.ne	10c <write_all+0x1c>  // b.any
 198:	ldr	w0, [sp, #60]
 19c:	ldp	x29, x30, [sp], #64
 1a0:	ret

00000000000001a4 <ss_page_stdin>:
 1a4:	stp	x29, x30, [sp, #-256]!
 1a8:	mov	x29, sp
 1ac:	str	x19, [sp, #16]
 1b0:	mov	w0, #0x3                   	// #3
 1b4:	str	w0, [sp, #252]
 1b8:	b	1d0 <ss_page_stdin+0x2c>
 1bc:	ldr	w0, [sp, #252]
 1c0:	bl	0 <close>
 1c4:	ldr	w0, [sp, #252]
 1c8:	add	w0, w0, #0x1
 1cc:	str	w0, [sp, #252]
 1d0:	ldr	w0, [sp, #252]
 1d4:	cmp	w0, #0x1f
 1d8:	b.le	1bc <ss_page_stdin+0x18>
 1dc:	mov	x1, #0x0                   	// #0
 1e0:	mov	w0, #0x2                   	// #2
 1e4:	bl	0 <signal>
 1e8:	add	x0, sp, #0x78
 1ec:	mov	x2, x0
 1f0:	mov	x1, #0x0                   	// #0
 1f4:	mov	w0, #0x0                   	// #0
 1f8:	bl	0 <sigprocmask>
 1fc:	add	x0, sp, #0x78
 200:	mov	w1, #0x2                   	// #2
 204:	bl	0 <sigdelset>
 208:	add	x0, sp, #0x78
 20c:	mov	x2, #0x0                   	// #0
 210:	mov	x1, x0
 214:	mov	w0, #0x2                   	// #2
 218:	bl	0 <sigprocmask>
 21c:	adrp	x0, 0 <_ss_pager_name>
 220:	add	x0, x0, #0x0
 224:	ldr	x0, [x0]
 228:	cmp	x0, #0x0
 22c:	b.ne	274 <ss_page_stdin+0xd0>  // b.any
 230:	adrp	x0, 0 <ss_safe_getenv>
 234:	add	x0, x0, #0x0
 238:	bl	0 <ss_safe_getenv>
 23c:	mov	x1, x0
 240:	adrp	x0, 0 <_ss_pager_name>
 244:	add	x0, x0, #0x0
 248:	str	x1, [x0]
 24c:	adrp	x0, 0 <_ss_pager_name>
 250:	add	x0, x0, #0x0
 254:	ldr	x0, [x0]
 258:	cmp	x0, #0x0
 25c:	b.ne	274 <ss_page_stdin+0xd0>  // b.any
 260:	adrp	x0, 0 <_ss_pager_name>
 264:	add	x0, x0, #0x0
 268:	adrp	x1, 0 <ss_safe_getenv>
 26c:	add	x1, x1, #0x0
 270:	str	x1, [x0]
 274:	adrp	x0, 0 <_ss_pager_name>
 278:	add	x0, x0, #0x0
 27c:	ldr	x3, [x0]
 280:	adrp	x0, 0 <_ss_pager_name>
 284:	add	x0, x0, #0x0
 288:	ldr	x0, [x0]
 28c:	mov	x2, #0x0                   	// #0
 290:	mov	x1, x0
 294:	mov	x0, x3
 298:	bl	0 <execlp>
 29c:	b	2b8 <ss_page_stdin+0x114>
 2a0:	sxtw	x1, w19
 2a4:	add	x0, sp, #0x28
 2a8:	mov	x2, x1
 2ac:	mov	x1, x0
 2b0:	mov	w0, #0x1                   	// #1
 2b4:	bl	f0 <write_all>
 2b8:	add	x0, sp, #0x28
 2bc:	mov	x2, #0x50                  	// #80
 2c0:	mov	x1, x0
 2c4:	mov	w0, #0x0                   	// #0
 2c8:	bl	0 <read>
 2cc:	mov	w19, w0
 2d0:	cmp	w19, #0x0
 2d4:	b.gt	2a0 <ss_page_stdin+0xfc>
 2d8:	bl	0 <__errno_location>
 2dc:	ldr	w0, [x0]
 2e0:	bl	0 <exit>

requests.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_self_identify>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	w0, [sp, #60]
  10:	str	x1, [sp, #48]
  14:	str	w2, [sp, #56]
  18:	str	x3, [sp, #40]
  1c:	adrp	x0, 0 <_ss_table>
  20:	add	x0, x0, #0x0
  24:	ldr	x1, [x0]
  28:	ldrsw	x0, [sp, #56]
  2c:	lsl	x0, x0, #3
  30:	add	x0, x1, x0
  34:	ldr	x19, [x0]
  38:	ldr	x0, [x19]
  3c:	ldr	x1, [x19, #8]
  40:	mov	x2, x1
  44:	mov	x1, x0
  48:	adrp	x0, 0 <ss_self_identify>
  4c:	add	x0, x0, #0x0
  50:	bl	0 <printf>
  54:	nop
  58:	ldr	x19, [sp, #16]
  5c:	ldp	x29, x30, [sp], #64
  60:	ret

0000000000000064 <ss_subsystem_name>:
  64:	stp	x29, x30, [sp, #-48]!
  68:	mov	x29, sp
  6c:	str	w0, [sp, #44]
  70:	str	x1, [sp, #32]
  74:	str	w2, [sp, #40]
  78:	str	x3, [sp, #24]
  7c:	adrp	x0, 0 <_ss_table>
  80:	add	x0, x0, #0x0
  84:	ldr	x1, [x0]
  88:	ldrsw	x0, [sp, #40]
  8c:	lsl	x0, x0, #3
  90:	add	x0, x1, x0
  94:	ldr	x0, [x0]
  98:	ldr	x0, [x0]
  9c:	bl	0 <puts>
  a0:	nop
  a4:	ldp	x29, x30, [sp], #48
  a8:	ret

00000000000000ac <ss_subsystem_version>:
  ac:	stp	x29, x30, [sp, #-48]!
  b0:	mov	x29, sp
  b4:	str	w0, [sp, #44]
  b8:	str	x1, [sp, #32]
  bc:	str	w2, [sp, #40]
  c0:	str	x3, [sp, #24]
  c4:	adrp	x0, 0 <_ss_table>
  c8:	add	x0, x0, #0x0
  cc:	ldr	x1, [x0]
  d0:	ldrsw	x0, [sp, #40]
  d4:	lsl	x0, x0, #3
  d8:	add	x0, x1, x0
  dc:	ldr	x0, [x0]
  e0:	ldr	x0, [x0, #8]
  e4:	bl	0 <puts>
  e8:	nop
  ec:	ldp	x29, x30, [sp], #48
  f0:	ret

00000000000000f4 <ss_unimplemented>:
  f4:	stp	x29, x30, [sp, #-48]!
  f8:	mov	x29, sp
  fc:	str	w0, [sp, #44]
 100:	str	x1, [sp, #32]
 104:	str	w2, [sp, #40]
 108:	str	x3, [sp, #24]
 10c:	adrp	x0, 0 <ss_self_identify>
 110:	add	x2, x0, #0x0
 114:	mov	x1, #0x6d0b                	// #27915
 118:	movk	x1, #0xb, lsl #16
 11c:	ldr	w0, [sp, #40]
 120:	bl	0 <ss_perror>
 124:	nop
 128:	ldp	x29, x30, [sp], #48
 12c:	ret

data.o:     file format elf64-littleaarch64


get_readline.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_release_readline>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	ldr	x0, [x0, #88]
  14:	cmp	x0, #0x0
  18:	b.eq	54 <ss_release_readline+0x54>  // b.none
  1c:	ldr	x0, [sp, #24]
  20:	str	xzr, [x0, #104]
  24:	ldr	x0, [sp, #24]
  28:	str	xzr, [x0, #112]
  2c:	ldr	x0, [sp, #24]
  30:	str	xzr, [x0, #120]
  34:	ldr	x0, [sp, #24]
  38:	str	xzr, [x0, #128]
  3c:	ldr	x0, [sp, #24]
  40:	ldr	x0, [x0, #88]
  44:	bl	0 <dlclose>
  48:	ldr	x0, [sp, #24]
  4c:	str	xzr, [x0, #88]
  50:	b	58 <ss_release_readline+0x58>
  54:	nop
  58:	ldp	x29, x30, [sp], #32
  5c:	ret

0000000000000060 <ss_get_readline>:
  60:	stp	x29, x30, [sp, #-96]!
  64:	mov	x29, sp
  68:	str	w0, [sp, #28]
  6c:	str	xzr, [sp, #88]
  70:	adrp	x0, 0 <_ss_table>
  74:	add	x0, x0, #0x0
  78:	ldr	x1, [x0]
  7c:	ldrsw	x0, [sp, #28]
  80:	lsl	x0, x0, #3
  84:	add	x0, x1, x0
  88:	ldr	x0, [x0]
  8c:	str	x0, [sp, #56]
  90:	str	xzr, [sp, #80]
  94:	ldr	x0, [sp, #56]
  98:	ldr	x0, [x0, #88]
  9c:	cmp	x0, #0x0
  a0:	b.ne	2ac <ss_get_readline+0x24c>  // b.any
  a4:	adrp	x0, 0 <ss_release_readline>
  a8:	add	x0, x0, #0x0
  ac:	bl	0 <ss_safe_getenv>
  b0:	str	x0, [sp, #80]
  b4:	ldr	x0, [sp, #80]
  b8:	cmp	x0, #0x0
  bc:	b.ne	cc <ss_get_readline+0x6c>  // b.any
  c0:	adrp	x0, 0 <ss_release_readline>
  c4:	add	x0, x0, #0x0
  c8:	str	x0, [sp, #80]
  cc:	ldr	x0, [sp, #80]
  d0:	ldrb	w0, [x0]
  d4:	cmp	w0, #0x0
  d8:	b.eq	2b4 <ss_get_readline+0x254>  // b.none
  dc:	adrp	x0, 0 <ss_release_readline>
  e0:	add	x1, x0, #0x0
  e4:	ldr	x0, [sp, #80]
  e8:	bl	0 <strcmp>
  ec:	cmp	w0, #0x0
  f0:	b.eq	2b4 <ss_get_readline+0x254>  // b.none
  f4:	ldr	x0, [sp, #80]
  f8:	bl	0 <strlen>
  fc:	add	x0, x0, #0x1
 100:	bl	0 <malloc>
 104:	str	x0, [sp, #48]
 108:	ldr	x0, [sp, #48]
 10c:	cmp	x0, #0x0
 110:	b.eq	2bc <ss_get_readline+0x25c>  // b.none
 114:	ldr	x1, [sp, #80]
 118:	ldr	x0, [sp, #48]
 11c:	bl	0 <strcpy>
 120:	ldr	x0, [sp, #48]
 124:	str	x0, [sp, #72]
 128:	b	194 <ss_get_readline+0x134>
 12c:	mov	w1, #0x3a                  	// #58
 130:	ldr	x0, [sp, #72]
 134:	bl	0 <strchr>
 138:	str	x0, [sp, #64]
 13c:	ldr	x0, [sp, #64]
 140:	cmp	x0, #0x0
 144:	b.eq	158 <ss_get_readline+0xf8>  // b.none
 148:	ldr	x0, [sp, #64]
 14c:	add	x1, x0, #0x1
 150:	str	x1, [sp, #64]
 154:	strb	wzr, [x0]
 158:	ldr	x0, [sp, #72]
 15c:	ldrb	w0, [x0]
 160:	cmp	w0, #0x0
 164:	b.eq	188 <ss_get_readline+0x128>  // b.none
 168:	mov	w1, #0x2                   	// #2
 16c:	ldr	x0, [sp, #72]
 170:	bl	0 <dlopen>
 174:	str	x0, [sp, #88]
 178:	ldr	x0, [sp, #88]
 17c:	cmp	x0, #0x0
 180:	b.ne	1a4 <ss_get_readline+0x144>  // b.any
 184:	b	18c <ss_get_readline+0x12c>
 188:	nop
 18c:	ldr	x0, [sp, #64]
 190:	str	x0, [sp, #72]
 194:	ldr	x0, [sp, #72]
 198:	cmp	x0, #0x0
 19c:	b.ne	12c <ss_get_readline+0xcc>  // b.any
 1a0:	b	1a8 <ss_get_readline+0x148>
 1a4:	nop
 1a8:	ldr	x0, [sp, #48]
 1ac:	bl	0 <free>
 1b0:	ldr	x0, [sp, #88]
 1b4:	cmp	x0, #0x0
 1b8:	b.eq	2c4 <ss_get_readline+0x264>  // b.none
 1bc:	ldr	x0, [sp, #56]
 1c0:	ldr	x1, [sp, #88]
 1c4:	str	x1, [x0, #88]
 1c8:	adrp	x0, 0 <ss_release_readline>
 1cc:	add	x1, x0, #0x0
 1d0:	ldr	x0, [sp, #88]
 1d4:	bl	0 <dlsym>
 1d8:	mov	x1, x0
 1dc:	ldr	x0, [sp, #56]
 1e0:	str	x1, [x0, #104]
 1e4:	adrp	x0, 0 <ss_release_readline>
 1e8:	add	x1, x0, #0x0
 1ec:	ldr	x0, [sp, #88]
 1f0:	bl	0 <dlsym>
 1f4:	mov	x1, x0
 1f8:	ldr	x0, [sp, #56]
 1fc:	str	x1, [x0, #112]
 200:	adrp	x0, 0 <ss_release_readline>
 204:	add	x1, x0, #0x0
 208:	ldr	x0, [sp, #88]
 20c:	bl	0 <dlsym>
 210:	mov	x1, x0
 214:	ldr	x0, [sp, #56]
 218:	str	x1, [x0, #120]
 21c:	adrp	x0, 0 <ss_release_readline>
 220:	add	x1, x0, #0x0
 224:	ldr	x0, [sp, #88]
 228:	bl	0 <dlsym>
 22c:	mov	x1, x0
 230:	ldr	x0, [sp, #56]
 234:	str	x1, [x0, #128]
 238:	adrp	x0, 0 <ss_release_readline>
 23c:	add	x1, x0, #0x0
 240:	ldr	x0, [sp, #88]
 244:	bl	0 <dlsym>
 248:	str	x0, [sp, #40]
 24c:	ldr	x0, [sp, #40]
 250:	cmp	x0, #0x0
 254:	b.eq	268 <ss_get_readline+0x208>  // b.none
 258:	ldr	x0, [sp, #56]
 25c:	ldr	x1, [x0]
 260:	ldr	x0, [sp, #40]
 264:	str	x1, [x0]
 268:	adrp	x0, 0 <ss_release_readline>
 26c:	add	x1, x0, #0x0
 270:	ldr	x0, [sp, #88]
 274:	bl	0 <dlsym>
 278:	str	x0, [sp, #32]
 27c:	ldr	x0, [sp, #32]
 280:	cmp	x0, #0x0
 284:	b.eq	298 <ss_get_readline+0x238>  // b.none
 288:	ldr	x0, [sp, #32]
 28c:	adrp	x1, 0 <ss_rl_completion>
 290:	add	x1, x1, #0x0
 294:	str	x1, [x0]
 298:	ldr	x0, [sp, #56]
 29c:	adrp	x1, 0 <ss_release_readline>
 2a0:	add	x1, x1, #0x0
 2a4:	str	x1, [x0, #96]
 2a8:	b	2c8 <ss_get_readline+0x268>
 2ac:	nop
 2b0:	b	2c8 <ss_get_readline+0x268>
 2b4:	nop
 2b8:	b	2c8 <ss_get_readline+0x268>
 2bc:	nop
 2c0:	b	2c8 <ss_get_readline+0x268>
 2c4:	nop
 2c8:	ldp	x29, x30, [sp], #96
 2cc:	ret
