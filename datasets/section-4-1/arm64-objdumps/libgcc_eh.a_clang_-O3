In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libgcc_eh.a_clang_-O3:

unwind-dw2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <read_encoded_value_with_base>:
       0:	and	w5, w0, #0xff
       4:	cmp	w5, #0x50
       8:	b.eq	120 <read_encoded_value_with_base+0x120>  // b.none
       c:	and	w4, w5, #0xf
      10:	cmp	w4, #0x4
      14:	b.eq	30 <read_encoded_value_with_base+0x30>  // b.none
      18:	b.ls	44 <read_encoded_value_with_base+0x44>  // b.plast
      1c:	cmp	w4, #0xb
      20:	b.eq	144 <read_encoded_value_with_base+0x144>  // b.none
      24:	b.ls	a0 <read_encoded_value_with_base+0xa0>  // b.plast
      28:	cmp	w4, #0xc
      2c:	b.ne	154 <read_encoded_value_with_base+0x154>  // b.any
      30:	mov	x0, x2
      34:	ldr	x4, [x0], #8
      38:	cbnz	x4, 100 <read_encoded_value_with_base+0x100>
      3c:	str	x4, [x3]
      40:	ret
      44:	cmp	w4, #0x2
      48:	b.eq	134 <read_encoded_value_with_base+0x134>  // b.none
      4c:	b.ls	68 <read_encoded_value_with_base+0x68>  // b.plast
      50:	cmp	w4, #0x3
      54:	b.ne	154 <read_encoded_value_with_base+0x154>  // b.any
      58:	mov	x0, x2
      5c:	ldr	w4, [x0], #4
      60:	cbz	x4, 3c <read_encoded_value_with_base+0x3c>
      64:	b	100 <read_encoded_value_with_base+0x100>
      68:	cbz	w4, 30 <read_encoded_value_with_base+0x30>
      6c:	cmp	w4, #0x1
      70:	b.ne	154 <read_encoded_value_with_base+0x154>  // b.any
      74:	mov	x0, x2
      78:	mov	x4, #0x0                   	// #0
      7c:	mov	w7, #0x0                   	// #0
      80:	ldrb	w8, [x0], #1
      84:	and	x6, x8, #0x7f
      88:	lsl	x6, x6, x7
      8c:	add	w7, w7, #0x7
      90:	orr	x4, x4, x6
      94:	tbnz	w8, #7, 80 <read_encoded_value_with_base+0x80>
      98:	cbz	x4, 3c <read_encoded_value_with_base+0x3c>
      9c:	b	100 <read_encoded_value_with_base+0x100>
      a0:	cmp	w4, #0x9
      a4:	b.eq	c0 <read_encoded_value_with_base+0xc0>  // b.none
      a8:	cmp	w4, #0xa
      ac:	b.ne	154 <read_encoded_value_with_base+0x154>  // b.any
      b0:	mov	x0, x2
      b4:	ldrsh	x4, [x0], #2
      b8:	cbz	x4, 3c <read_encoded_value_with_base+0x3c>
      bc:	b	100 <read_encoded_value_with_base+0x100>
      c0:	mov	x0, x2
      c4:	mov	x4, #0x0                   	// #0
      c8:	mov	w7, #0x0                   	// #0
      cc:	ldrb	w8, [x0], #1
      d0:	and	x6, x8, #0x7f
      d4:	lsl	x6, x6, x7
      d8:	add	w7, w7, #0x7
      dc:	orr	x4, x4, x6
      e0:	tbnz	w8, #7, cc <read_encoded_value_with_base+0xcc>
      e4:	cmp	w7, #0x3f
      e8:	b.hi	38 <read_encoded_value_with_base+0x38>  // b.pmore
      ec:	tbz	w8, #6, 38 <read_encoded_value_with_base+0x38>
      f0:	mov	x6, #0xffffffffffffffff    	// #-1
      f4:	lsl	x7, x6, x7
      f8:	orr	x4, x4, x7
      fc:	nop
     100:	and	w6, w5, #0x70
     104:	cmp	w6, #0x10
     108:	csel	x1, x2, x1, eq  // eq = none
     10c:	add	x4, x4, x1
     110:	tbz	w5, #7, 3c <read_encoded_value_with_base+0x3c>
     114:	ldr	x4, [x4]
     118:	str	x4, [x3]
     11c:	ret
     120:	add	x0, x2, #0x7
     124:	and	x0, x0, #0xfffffffffffffff8
     128:	ldr	x4, [x0], #8
     12c:	str	x4, [x3]
     130:	ret
     134:	mov	x0, x2
     138:	ldrh	w4, [x0], #2
     13c:	cbz	x4, 3c <read_encoded_value_with_base+0x3c>
     140:	b	100 <read_encoded_value_with_base+0x100>
     144:	mov	x0, x2
     148:	ldrsw	x4, [x0], #4
     14c:	cbz	x4, 3c <read_encoded_value_with_base+0x3c>
     150:	b	100 <read_encoded_value_with_base+0x100>
     154:	stp	x29, x30, [sp, #-16]!
     158:	mov	x29, sp
     15c:	bl	0 <abort>

0000000000000160 <execute_cfa_program>:
     160:	str	xzr, [x3, #1568]
     164:	cmp	x0, x1
     168:	b.cs	950 <execute_cfa_program+0x7f0>  // b.hs, b.nlast
     16c:	stp	x29, x30, [sp, #-112]!
     170:	mov	x29, sp
     174:	stp	x21, x22, [sp, #32]
     178:	mov	x21, x2
     17c:	mov	x22, x1
     180:	stp	x19, x20, [sp, #16]
     184:	mov	x20, x3
     188:	ldr	x2, [x21, #792]
     18c:	stp	x23, x24, [sp, #48]
     190:	adrp	x23, 0 <read_encoded_value_with_base>
     194:	ldr	x5, [x21, #832]
     198:	stp	x25, x26, [sp, #64]
     19c:	add	x23, x23, #0x0
     1a0:	ldr	x1, [x20, #1608]
     1a4:	stp	x27, x28, [sp, #80]
     1a8:	add	x5, x2, x5, lsr #63
     1ac:	add	x27, x29, #0x68
     1b0:	cmp	x1, x5
     1b4:	mov	x25, #0x0                   	// #0
     1b8:	mov	w24, #0x1                   	// #1
     1bc:	mov	w26, #0x5                   	// #5
     1c0:	b.cs	290 <execute_cfa_program+0x130>  // b.hs, b.nlast
     1c4:	nop
     1c8:	mov	x19, x0
     1cc:	ldrb	w4, [x19], #1
     1d0:	and	w5, w4, #0xc0
     1d4:	cmp	w5, #0x40
     1d8:	b.eq	78c <execute_cfa_program+0x62c>  // b.none
     1dc:	cmp	w5, #0x80
     1e0:	b.eq	7b0 <execute_cfa_program+0x650>  // b.none
     1e4:	cmp	w5, #0xc0
     1e8:	b.eq	7a0 <execute_cfa_program+0x640>  // b.none
     1ec:	cmp	w4, #0x2f
     1f0:	b.hi	93c <execute_cfa_program+0x7dc>  // b.pmore
     1f4:	ldrh	w2, [x23, w4, uxtw #1]
     1f8:	adr	x3, 204 <execute_cfa_program+0xa4>
     1fc:	add	x2, x3, w2, sxth #2
     200:	br	x2
     204:	mov	x1, #0x0                   	// #0
     208:	mov	w0, #0x0                   	// #0
     20c:	ldrb	w3, [x19], #1
     210:	and	x2, x3, #0x7f
     214:	lsl	x2, x2, x0
     218:	add	w0, w0, #0x7
     21c:	orr	x1, x1, x2
     220:	tbnz	w3, #7, 20c <execute_cfa_program+0xac>
     224:	mov	x4, #0x0                   	// #0
     228:	mov	w2, #0x0                   	// #0
     22c:	nop
     230:	ldrb	w3, [x19], #1
     234:	and	x0, x3, #0x7f
     238:	lsl	x0, x0, x2
     23c:	add	w2, w2, #0x7
     240:	orr	x4, x4, x0
     244:	tbnz	w3, #7, 230 <execute_cfa_program+0xd0>
     248:	ldr	x0, [x20, #1624]
     24c:	cmp	x1, #0x61
     250:	mul	x4, x4, x0
     254:	b.hi	26c <execute_cfa_program+0x10c>  // b.pmore
     258:	lsl	x1, x1, #4
     25c:	neg	x4, x4
     260:	add	x0, x20, x1
     264:	str	w24, [x0, #8]
     268:	str	x4, [x20, x1]
     26c:	cmp	x22, x19
     270:	b.ls	290 <execute_cfa_program+0x130>  // b.plast
     274:	ldr	x2, [x21, #792]
     278:	mov	x0, x19
     27c:	ldr	x5, [x21, #832]
     280:	ldr	x1, [x20, #1608]
     284:	add	x5, x2, x5, lsr #63
     288:	cmp	x1, x5
     28c:	b.cc	1c8 <execute_cfa_program+0x68>  // b.lo, b.ul, b.last
     290:	mov	sp, x29
     294:	ldp	x19, x20, [sp, #16]
     298:	ldp	x21, x22, [sp, #32]
     29c:	ldp	x23, x24, [sp, #48]
     2a0:	ldp	x25, x26, [sp, #64]
     2a4:	ldp	x27, x28, [sp, #80]
     2a8:	ldp	x29, x30, [sp], #112
     2ac:	ret
     2b0:	mov	x1, #0x0                   	// #0
     2b4:	mov	w0, #0x0                   	// #0
     2b8:	ldrb	w3, [x19], #1
     2bc:	and	x2, x3, #0x7f
     2c0:	lsl	x2, x2, x0
     2c4:	add	w0, w0, #0x7
     2c8:	orr	x1, x1, x2
     2cc:	tbnz	w3, #7, 2b8 <execute_cfa_program+0x158>
     2d0:	str	x1, [x21, #848]
     2d4:	b	26c <execute_cfa_program+0x10c>
     2d8:	mov	x1, #0x0                   	// #0
     2dc:	mov	w0, #0x0                   	// #0
     2e0:	ldrb	w3, [x19], #1
     2e4:	and	x2, x3, #0x7f
     2e8:	lsl	x2, x2, x0
     2ec:	add	w0, w0, #0x7
     2f0:	orr	x1, x1, x2
     2f4:	tbnz	w3, #7, 2e0 <execute_cfa_program+0x180>
     2f8:	cmp	x1, #0x61
     2fc:	b.hi	310 <execute_cfa_program+0x1b0>  // b.pmore
     300:	lsl	x1, x1, #4
     304:	add	x0, x20, x1
     308:	str	w26, [x0, #8]
     30c:	str	x19, [x20, x1]
     310:	mov	x3, #0x0                   	// #0
     314:	mov	w1, #0x0                   	// #0
     318:	ldrb	w2, [x19], #1
     31c:	and	x0, x2, #0x7f
     320:	lsl	x0, x0, x1
     324:	add	w1, w1, #0x7
     328:	orr	x3, x3, x0
     32c:	tbnz	w2, #7, 318 <execute_cfa_program+0x1b8>
     330:	add	x19, x19, x3
     334:	b	26c <execute_cfa_program+0x10c>
     338:	mov	x1, #0x0                   	// #0
     33c:	mov	w0, #0x0                   	// #0
     340:	ldrb	w3, [x19], #1
     344:	and	x2, x3, #0x7f
     348:	lsl	x2, x2, x0
     34c:	add	w0, w0, #0x7
     350:	orr	x1, x1, x2
     354:	tbnz	w3, #7, 340 <execute_cfa_program+0x1e0>
     358:	mov	x4, #0x0                   	// #0
     35c:	mov	w2, #0x0                   	// #0
     360:	ldrb	w3, [x19], #1
     364:	and	x0, x3, #0x7f
     368:	lsl	x0, x0, x2
     36c:	add	w2, w2, #0x7
     370:	orr	x4, x4, x0
     374:	tbnz	w3, #7, 360 <execute_cfa_program+0x200>
     378:	cmp	w2, #0x3f
     37c:	b.hi	394 <execute_cfa_program+0x234>  // b.pmore
     380:	mov	x0, #0xffffffffffffffff    	// #-1
     384:	tst	x3, #0x40
     388:	lsl	x0, x0, x2
     38c:	orr	x0, x4, x0
     390:	csel	x4, x0, x4, ne  // ne = any
     394:	ldr	x0, [x20, #1624]
     398:	cmp	x1, #0x61
     39c:	mul	x4, x4, x0
     3a0:	b.hi	26c <execute_cfa_program+0x10c>  // b.pmore
     3a4:	lsl	x1, x1, #4
     3a8:	mov	w2, #0x4                   	// #4
     3ac:	add	x0, x20, x1
     3b0:	str	w2, [x0, #8]
     3b4:	str	x4, [x20, x1]
     3b8:	b	26c <execute_cfa_program+0x10c>
     3bc:	mov	x1, #0x0                   	// #0
     3c0:	mov	w0, #0x0                   	// #0
     3c4:	ldrb	w3, [x19], #1
     3c8:	and	x2, x3, #0x7f
     3cc:	lsl	x2, x2, x0
     3d0:	add	w0, w0, #0x7
     3d4:	orr	x1, x1, x2
     3d8:	tbnz	w3, #7, 3c4 <execute_cfa_program+0x264>
     3dc:	mov	x4, #0x0                   	// #0
     3e0:	mov	w2, #0x0                   	// #0
     3e4:	nop
     3e8:	ldrb	w3, [x19], #1
     3ec:	and	x0, x3, #0x7f
     3f0:	lsl	x0, x0, x2
     3f4:	add	w2, w2, #0x7
     3f8:	orr	x4, x4, x0
     3fc:	tbnz	w3, #7, 3e8 <execute_cfa_program+0x288>
     400:	b	394 <execute_cfa_program+0x234>
     404:	mov	x1, #0x0                   	// #0
     408:	mov	w0, #0x0                   	// #0
     40c:	ldrb	w3, [x19], #1
     410:	and	x2, x3, #0x7f
     414:	lsl	x2, x2, x0
     418:	add	w0, w0, #0x7
     41c:	orr	x1, x1, x2
     420:	tbnz	w3, #7, 40c <execute_cfa_program+0x2ac>
     424:	cmp	w0, #0x3f
     428:	b.hi	440 <execute_cfa_program+0x2e0>  // b.pmore
     42c:	mov	x2, #0xffffffffffffffff    	// #-1
     430:	tst	x3, #0x40
     434:	lsl	x0, x2, x0
     438:	orr	x0, x1, x0
     43c:	csel	x1, x0, x1, ne  // ne = any
     440:	ldr	x0, [x20, #1624]
     444:	mul	x1, x0, x1
     448:	str	x1, [x20, #1576]
     44c:	b	26c <execute_cfa_program+0x10c>
     450:	mov	x1, #0x0                   	// #0
     454:	mov	w0, #0x0                   	// #0
     458:	ldrb	w3, [x19], #1
     45c:	and	x2, x3, #0x7f
     460:	lsl	x2, x2, x0
     464:	add	w0, w0, #0x7
     468:	orr	x1, x1, x2
     46c:	tbnz	w3, #7, 458 <execute_cfa_program+0x2f8>
     470:	mov	x3, #0x0                   	// #0
     474:	mov	w2, #0x0                   	// #0
     478:	str	x1, [x20, #1584]
     47c:	nop
     480:	ldrb	w1, [x19], #1
     484:	and	x0, x1, #0x7f
     488:	lsl	x0, x0, x2
     48c:	add	w2, w2, #0x7
     490:	orr	x3, x3, x0
     494:	tbnz	w1, #7, 480 <execute_cfa_program+0x320>
     498:	cmp	w2, #0x3f
     49c:	b.hi	4b4 <execute_cfa_program+0x354>  // b.pmore
     4a0:	mov	x0, #0xffffffffffffffff    	// #-1
     4a4:	tst	x1, #0x40
     4a8:	lsl	x0, x0, x2
     4ac:	orr	x0, x3, x0
     4b0:	csel	x3, x0, x3, ne  // ne = any
     4b4:	ldr	x0, [x20, #1624]
     4b8:	str	w24, [x20, #1600]
     4bc:	mul	x3, x0, x3
     4c0:	str	x3, [x20, #1576]
     4c4:	b	26c <execute_cfa_program+0x10c>
     4c8:	mov	x1, #0x0                   	// #0
     4cc:	mov	w0, #0x0                   	// #0
     4d0:	ldrb	w3, [x19], #1
     4d4:	and	x2, x3, #0x7f
     4d8:	lsl	x2, x2, x0
     4dc:	add	w0, w0, #0x7
     4e0:	orr	x1, x1, x2
     4e4:	tbnz	w3, #7, 4d0 <execute_cfa_program+0x370>
     4e8:	mov	x4, #0x0                   	// #0
     4ec:	mov	w2, #0x0                   	// #0
     4f0:	ldrb	w3, [x19], #1
     4f4:	and	x0, x3, #0x7f
     4f8:	lsl	x0, x0, x2
     4fc:	add	w2, w2, #0x7
     500:	orr	x4, x4, x0
     504:	tbnz	w3, #7, 4f0 <execute_cfa_program+0x390>
     508:	cmp	w2, #0x3f
     50c:	b.hi	524 <execute_cfa_program+0x3c4>  // b.pmore
     510:	mov	x0, #0xffffffffffffffff    	// #-1
     514:	tst	x3, #0x40
     518:	lsl	x0, x0, x2
     51c:	orr	x0, x4, x0
     520:	csel	x4, x0, x4, ne  // ne = any
     524:	ldr	x0, [x20, #1624]
     528:	cmp	x1, #0x61
     52c:	mul	x4, x4, x0
     530:	b.hi	26c <execute_cfa_program+0x10c>  // b.pmore
     534:	lsl	x1, x1, #4
     538:	add	x0, x20, x1
     53c:	str	w24, [x0, #8]
     540:	str	x4, [x20, x1]
     544:	b	26c <execute_cfa_program+0x10c>
     548:	mov	x1, #0x0                   	// #0
     54c:	mov	w0, #0x0                   	// #0
     550:	ldrb	w3, [x19], #1
     554:	and	x2, x3, #0x7f
     558:	lsl	x2, x2, x0
     55c:	add	w0, w0, #0x7
     560:	orr	x1, x1, x2
     564:	tbnz	w3, #7, 550 <execute_cfa_program+0x3f0>
     568:	cmp	x1, #0x61
     56c:	b.hi	584 <execute_cfa_program+0x424>  // b.pmore
     570:	lsl	x1, x1, #4
     574:	mov	w2, #0x3                   	// #3
     578:	add	x0, x20, x1
     57c:	str	w2, [x0, #8]
     580:	str	x19, [x20, x1]
     584:	mov	x3, #0x0                   	// #0
     588:	mov	w1, #0x0                   	// #0
     58c:	nop
     590:	ldrb	w2, [x19], #1
     594:	and	x0, x2, #0x7f
     598:	lsl	x0, x0, x1
     59c:	add	w1, w1, #0x7
     5a0:	orr	x3, x3, x0
     5a4:	tbnz	w2, #7, 590 <execute_cfa_program+0x430>
     5a8:	add	x19, x19, x3
     5ac:	b	26c <execute_cfa_program+0x10c>
     5b0:	mov	x1, #0x0                   	// #0
     5b4:	mov	w0, #0x0                   	// #0
     5b8:	ldrb	w3, [x19], #1
     5bc:	and	x2, x3, #0x7f
     5c0:	lsl	x2, x2, x0
     5c4:	add	w0, w0, #0x7
     5c8:	orr	x1, x1, x2
     5cc:	tbnz	w3, #7, 5b8 <execute_cfa_program+0x458>
     5d0:	str	x1, [x20, #1576]
     5d4:	b	26c <execute_cfa_program+0x10c>
     5d8:	mov	x1, #0x0                   	// #0
     5dc:	mov	w0, #0x0                   	// #0
     5e0:	ldrb	w3, [x19], #1
     5e4:	and	x2, x3, #0x7f
     5e8:	lsl	x2, x2, x0
     5ec:	add	w0, w0, #0x7
     5f0:	orr	x1, x1, x2
     5f4:	tbnz	w3, #7, 5e0 <execute_cfa_program+0x480>
     5f8:	str	x1, [x20, #1584]
     5fc:	str	w24, [x20, #1600]
     600:	b	26c <execute_cfa_program+0x10c>
     604:	mov	x1, #0x0                   	// #0
     608:	mov	w0, #0x0                   	// #0
     60c:	ldrb	w3, [x19], #1
     610:	and	x2, x3, #0x7f
     614:	lsl	x2, x2, x0
     618:	add	w0, w0, #0x7
     61c:	orr	x1, x1, x2
     620:	tbnz	w3, #7, 60c <execute_cfa_program+0x4ac>
     624:	mov	x3, #0x0                   	// #0
     628:	mov	w2, #0x0                   	// #0
     62c:	str	x1, [x20, #1584]
     630:	ldrb	w1, [x19], #1
     634:	and	x0, x1, #0x7f
     638:	lsl	x0, x0, x2
     63c:	add	w2, w2, #0x7
     640:	orr	x3, x3, x0
     644:	tbnz	w1, #7, 630 <execute_cfa_program+0x4d0>
     648:	str	x3, [x20, #1576]
     64c:	str	w24, [x20, #1600]
     650:	b	26c <execute_cfa_program+0x10c>
     654:	mov	x1, #0x0                   	// #0
     658:	mov	w0, #0x0                   	// #0
     65c:	ldrb	w3, [x19], #1
     660:	and	x2, x3, #0x7f
     664:	lsl	x2, x2, x0
     668:	add	w0, w0, #0x7
     66c:	orr	x1, x1, x2
     670:	tbnz	w3, #7, 65c <execute_cfa_program+0x4fc>
     674:	mov	x4, #0x0                   	// #0
     678:	mov	w2, #0x0                   	// #0
     67c:	nop
     680:	ldrb	w3, [x19], #1
     684:	and	x0, x3, #0x7f
     688:	lsl	x0, x0, x2
     68c:	add	w2, w2, #0x7
     690:	orr	x4, x4, x0
     694:	tbnz	w3, #7, 680 <execute_cfa_program+0x520>
     698:	cmp	x1, #0x61
     69c:	b.hi	26c <execute_cfa_program+0x10c>  // b.pmore
     6a0:	lsl	x1, x1, #4
     6a4:	mov	w2, #0x2                   	// #2
     6a8:	add	x0, x20, x1
     6ac:	str	w2, [x0, #8]
     6b0:	str	x4, [x20, x1]
     6b4:	b	26c <execute_cfa_program+0x10c>
     6b8:	mov	x1, #0x0                   	// #0
     6bc:	mov	w0, #0x0                   	// #0
     6c0:	ldrb	w3, [x19], #1
     6c4:	and	x2, x3, #0x7f
     6c8:	lsl	x2, x2, x0
     6cc:	add	w0, w0, #0x7
     6d0:	orr	x1, x1, x2
     6d4:	tbnz	w3, #7, 6c0 <execute_cfa_program+0x560>
     6d8:	cmp	x1, #0x61
     6dc:	b.hi	26c <execute_cfa_program+0x10c>  // b.pmore
     6e0:	add	x1, x20, x1, lsl #4
     6e4:	str	wzr, [x1, #8]
     6e8:	b	26c <execute_cfa_program+0x10c>
     6ec:	mov	x1, #0x0                   	// #0
     6f0:	mov	w0, #0x0                   	// #0
     6f4:	ldrb	w3, [x19], #1
     6f8:	and	x2, x3, #0x7f
     6fc:	lsl	x2, x2, x0
     700:	add	w0, w0, #0x7
     704:	orr	x1, x1, x2
     708:	tbnz	w3, #7, 6f4 <execute_cfa_program+0x594>
     70c:	cmp	x1, #0x61
     710:	b.hi	26c <execute_cfa_program+0x10c>  // b.pmore
     714:	add	x1, x20, x1, lsl #4
     718:	mov	w0, #0x6                   	// #6
     71c:	str	w0, [x1, #8]
     720:	b	26c <execute_cfa_program+0x10c>
     724:	mov	x1, #0x0                   	// #0
     728:	mov	w0, #0x0                   	// #0
     72c:	ldrb	w3, [x19], #1
     730:	and	x2, x3, #0x7f
     734:	lsl	x2, x2, x0
     738:	add	w0, w0, #0x7
     73c:	orr	x1, x1, x2
     740:	tbnz	w3, #7, 72c <execute_cfa_program+0x5cc>
     744:	b	6d8 <execute_cfa_program+0x578>
     748:	mov	x1, #0x0                   	// #0
     74c:	mov	w0, #0x0                   	// #0
     750:	ldrb	w3, [x19], #1
     754:	and	x2, x3, #0x7f
     758:	lsl	x2, x2, x0
     75c:	add	w0, w0, #0x7
     760:	orr	x1, x1, x2
     764:	tbnz	w3, #7, 750 <execute_cfa_program+0x5f0>
     768:	mov	x4, #0x0                   	// #0
     76c:	mov	w2, #0x0                   	// #0
     770:	ldrb	w3, [x19], #1
     774:	and	x0, x3, #0x7f
     778:	lsl	x0, x0, x2
     77c:	add	w2, w2, #0x7
     780:	orr	x4, x4, x0
     784:	tbnz	w3, #7, 770 <execute_cfa_program+0x610>
     788:	b	524 <execute_cfa_program+0x3c4>
     78c:	ldr	x0, [x20, #1632]
     790:	and	x4, x4, #0x3f
     794:	madd	x4, x4, x0, x1
     798:	str	x4, [x20, #1608]
     79c:	b	26c <execute_cfa_program+0x10c>
     7a0:	ubfiz	x4, x4, #4, #6
     7a4:	add	x4, x20, x4
     7a8:	str	wzr, [x4, #8]
     7ac:	b	26c <execute_cfa_program+0x10c>
     7b0:	and	w4, w4, #0x3f
     7b4:	mov	x1, #0x0                   	// #0
     7b8:	mov	w5, #0x0                   	// #0
     7bc:	nop
     7c0:	ldrb	w6, [x19], #1
     7c4:	and	x0, x6, #0x7f
     7c8:	lsl	x0, x0, x5
     7cc:	add	w5, w5, #0x7
     7d0:	orr	x1, x1, x0
     7d4:	tbnz	w6, #7, 7c0 <execute_cfa_program+0x660>
     7d8:	ubfiz	x4, x4, #4, #6
     7dc:	ldr	x2, [x20, #1624]
     7e0:	add	x0, x20, x4
     7e4:	mul	x1, x1, x2
     7e8:	str	w24, [x0, #8]
     7ec:	str	x1, [x20, x4]
     7f0:	b	26c <execute_cfa_program+0x10c>
     7f4:	ldr	x0, [x20, #544]
     7f8:	eor	x0, x0, #0x1
     7fc:	str	x0, [x20, #544]
     800:	b	26c <execute_cfa_program+0x10c>
     804:	ldrb	w0, [x20, #1648]
     808:	cmp	w0, #0xff
     80c:	b.eq	910 <execute_cfa_program+0x7b0>  // b.none
     810:	and	w1, w0, #0x70
     814:	cmp	w1, #0x30
     818:	b.eq	960 <execute_cfa_program+0x800>  // b.none
     81c:	b.hi	940 <execute_cfa_program+0x7e0>  // b.pmore
     820:	cmp	w1, #0x20
     824:	b.ne	930 <execute_cfa_program+0x7d0>  // b.any
     828:	ldr	x1, [x21, #808]
     82c:	mov	x2, x19
     830:	mov	x3, x27
     834:	bl	0 <read_encoded_value_with_base>
     838:	ldr	x1, [x29, #104]
     83c:	mov	x19, x0
     840:	str	x1, [x20, #1608]
     844:	b	26c <execute_cfa_program+0x10c>
     848:	ldrb	w2, [x0, #1]
     84c:	add	x19, x0, #0x2
     850:	ldr	x0, [x20, #1632]
     854:	madd	x1, x2, x0, x1
     858:	str	x1, [x20, #1608]
     85c:	b	26c <execute_cfa_program+0x10c>
     860:	ldurh	w2, [x0, #1]
     864:	add	x19, x0, #0x3
     868:	ldr	x0, [x20, #1632]
     86c:	madd	x1, x2, x0, x1
     870:	str	x1, [x20, #1608]
     874:	b	26c <execute_cfa_program+0x10c>
     878:	ldur	w2, [x0, #1]
     87c:	add	x19, x0, #0x5
     880:	ldr	x0, [x20, #1632]
     884:	madd	x1, x2, x0, x1
     888:	str	x1, [x20, #1608]
     88c:	b	26c <execute_cfa_program+0x10c>
     890:	cbz	x25, 954 <execute_cfa_program+0x7f4>
     894:	mov	x3, x25
     898:	ldr	x25, [x25, #1568]
     89c:	mov	x1, x20
     8a0:	mov	x0, x3
     8a4:	mov	x2, #0x648                 	// #1608
     8a8:	bl	0 <memcpy>
     8ac:	str	x0, [x20, #1568]
     8b0:	b	26c <execute_cfa_program+0x10c>
     8b4:	ldr	x28, [x20, #1568]
     8b8:	mov	x0, x20
     8bc:	mov	x2, #0x648                 	// #1608
     8c0:	mov	x1, x28
     8c4:	bl	0 <memcpy>
     8c8:	str	x25, [x28, #1568]
     8cc:	mov	x25, x28
     8d0:	b	26c <execute_cfa_program+0x10c>
     8d4:	mov	w0, #0x2                   	// #2
     8d8:	mov	x3, #0x0                   	// #0
     8dc:	mov	w1, #0x0                   	// #0
     8e0:	str	x19, [x20, #1592]
     8e4:	str	w0, [x20, #1600]
     8e8:	ldrb	w2, [x19], #1
     8ec:	and	x0, x2, #0x7f
     8f0:	lsl	x0, x0, x1
     8f4:	add	w1, w1, #0x7
     8f8:	orr	x3, x3, x0
     8fc:	tbnz	w2, #7, 8e8 <execute_cfa_program+0x788>
     900:	add	x19, x19, x3
     904:	b	26c <execute_cfa_program+0x10c>
     908:	cmp	w1, #0x50
     90c:	b.ne	93c <execute_cfa_program+0x7dc>  // b.any
     910:	mov	x2, x19
     914:	mov	x1, #0x0                   	// #0
     918:	mov	x3, x27
     91c:	bl	0 <read_encoded_value_with_base>
     920:	ldr	x1, [x29, #104]
     924:	mov	x19, x0
     928:	str	x1, [x20, #1608]
     92c:	b	26c <execute_cfa_program+0x10c>
     930:	b.hi	93c <execute_cfa_program+0x7dc>  // b.pmore
     934:	tst	w0, #0x60
     938:	b.eq	910 <execute_cfa_program+0x7b0>  // b.none
     93c:	bl	0 <abort>
     940:	cmp	w1, #0x40
     944:	b.ne	908 <execute_cfa_program+0x7a8>  // b.any
     948:	ldr	x1, [x21, #824]
     94c:	b	82c <execute_cfa_program+0x6cc>
     950:	ret
     954:	sub	sp, sp, #0x650
     958:	mov	x3, sp
     95c:	b	89c <execute_cfa_program+0x73c>
     960:	ldr	x1, [x21, #816]
     964:	b	82c <execute_cfa_program+0x6cc>

0000000000000968 <init_dwarf_reg_size_table>:
     968:	adrp	x2, 0 <read_encoded_value_with_base>
     96c:	add	x1, x2, #0x0
     970:	mov	w0, #0x8                   	// #8
     974:	strb	w0, [x2]
     978:	strb	w0, [x1, #1]
     97c:	strb	w0, [x1, #2]
     980:	strb	w0, [x1, #3]
     984:	strb	w0, [x1, #4]
     988:	strb	w0, [x1, #5]
     98c:	strb	w0, [x1, #6]
     990:	strb	w0, [x1, #7]
     994:	strb	w0, [x1, #8]
     998:	strb	w0, [x1, #9]
     99c:	strb	w0, [x1, #10]
     9a0:	strb	w0, [x1, #11]
     9a4:	strb	w0, [x1, #12]
     9a8:	strb	w0, [x1, #13]
     9ac:	strb	w0, [x1, #14]
     9b0:	strb	w0, [x1, #15]
     9b4:	strb	w0, [x1, #16]
     9b8:	strb	w0, [x1, #17]
     9bc:	strb	w0, [x1, #18]
     9c0:	strb	w0, [x1, #19]
     9c4:	strb	w0, [x1, #20]
     9c8:	strb	w0, [x1, #21]
     9cc:	strb	w0, [x1, #22]
     9d0:	strb	w0, [x1, #23]
     9d4:	strb	w0, [x1, #24]
     9d8:	strb	w0, [x1, #25]
     9dc:	strb	w0, [x1, #26]
     9e0:	strb	w0, [x1, #27]
     9e4:	strb	w0, [x1, #28]
     9e8:	strb	w0, [x1, #29]
     9ec:	strb	w0, [x1, #30]
     9f0:	strb	w0, [x1, #31]
     9f4:	strb	w0, [x1, #64]
     9f8:	strb	w0, [x1, #46]
     9fc:	strb	w0, [x1, #65]
     a00:	strb	w0, [x1, #66]
     a04:	strb	w0, [x1, #67]
     a08:	strb	w0, [x1, #68]
     a0c:	strb	w0, [x1, #69]
     a10:	strb	w0, [x1, #70]
     a14:	strb	w0, [x1, #71]
     a18:	strb	w0, [x1, #72]
     a1c:	strb	w0, [x1, #73]
     a20:	strb	w0, [x1, #74]
     a24:	strb	w0, [x1, #75]
     a28:	strb	w0, [x1, #76]
     a2c:	strb	w0, [x1, #77]
     a30:	strb	w0, [x1, #78]
     a34:	strb	w0, [x1, #79]
     a38:	strb	w0, [x1, #80]
     a3c:	strb	w0, [x1, #81]
     a40:	strb	w0, [x1, #82]
     a44:	strb	w0, [x1, #83]
     a48:	strb	w0, [x1, #84]
     a4c:	strb	w0, [x1, #85]
     a50:	strb	w0, [x1, #86]
     a54:	strb	w0, [x1, #87]
     a58:	strb	w0, [x1, #88]
     a5c:	strb	w0, [x1, #89]
     a60:	strb	w0, [x1, #90]
     a64:	strb	w0, [x1, #91]
     a68:	strb	w0, [x1, #92]
     a6c:	strb	w0, [x1, #93]
     a70:	strb	w0, [x1, #94]
     a74:	strb	w0, [x1, #95]
     a78:	strb	w0, [x1, #48]
     a7c:	strb	w0, [x1, #49]
     a80:	strb	w0, [x1, #50]
     a84:	strb	w0, [x1, #51]
     a88:	strb	w0, [x1, #52]
     a8c:	strb	w0, [x1, #53]
     a90:	strb	w0, [x1, #54]
     a94:	strb	w0, [x1, #55]
     a98:	strb	w0, [x1, #56]
     a9c:	strb	w0, [x1, #57]
     aa0:	strb	w0, [x1, #58]
     aa4:	strb	w0, [x1, #59]
     aa8:	strb	w0, [x1, #60]
     aac:	strb	w0, [x1, #61]
     ab0:	strb	w0, [x1, #62]
     ab4:	strb	w0, [x1, #63]
     ab8:	strb	w0, [x1, #96]
     abc:	ret

0000000000000ac0 <uw_frame_state_for>:
     ac0:	stp	x29, x30, [sp, #-96]!
     ac4:	mov	x2, #0x680                 	// #1664
     ac8:	mov	x29, sp
     acc:	stp	x19, x20, [sp, #16]
     ad0:	mov	x20, x0
     ad4:	mov	x19, x1
     ad8:	mov	x0, x1
     adc:	mov	w1, #0x0                   	// #0
     ae0:	bl	0 <memset>
     ae4:	str	xzr, [x20, #800]
     ae8:	ldr	x2, [x20, #792]
     aec:	str	xzr, [x20, #848]
     af0:	cbz	x2, ea4 <uw_frame_state_for+0x3e4>
     af4:	ldr	d0, [x20, #832]
     af8:	add	x1, x20, #0x328
     afc:	stp	x21, x22, [sp, #32]
     b00:	cmge	d0, d0, #0
     b04:	fmov	x0, d0
     b08:	add	x0, x2, x0
     b0c:	bl	0 <_Unwind_Find_FDE>
     b10:	mov	x21, x0
     b14:	cbz	x0, f40 <uw_frame_state_for+0x480>
     b18:	ldrsw	x1, [x0, #4]
     b1c:	stp	x23, x24, [sp, #48]
     b20:	add	x23, x0, #0x4
     b24:	sub	x23, x23, x1
     b28:	ldr	x0, [x20, #824]
     b2c:	str	x0, [x19, #1608]
     b30:	add	x22, x23, #0x9
     b34:	mov	x0, x22
     b38:	bl	0 <strlen>
     b3c:	ldrb	w1, [x23, #9]
     b40:	add	x2, x0, #0x1
     b44:	add	x2, x22, x2
     b48:	cmp	w1, #0x65
     b4c:	b.eq	d24 <uw_frame_state_for+0x264>  // b.none
     b50:	ldrb	w6, [x23, #8]
     b54:	cmp	w6, #0x3
     b58:	b.hi	1058 <uw_frame_state_for+0x598>  // b.pmore
     b5c:	stp	x25, x26, [sp, #64]
     b60:	mov	x4, #0x0                   	// #0
     b64:	mov	w3, #0x0                   	// #0
     b68:	ldrb	w0, [x2], #1
     b6c:	and	x1, x0, #0x7f
     b70:	lsl	x1, x1, x3
     b74:	add	w3, w3, #0x7
     b78:	orr	x4, x4, x1
     b7c:	tbnz	w0, #7, b68 <uw_frame_state_for+0xa8>
     b80:	mov	x0, #0x0                   	// #0
     b84:	mov	w3, #0x0                   	// #0
     b88:	str	x4, [x19, #1632]
     b8c:	nop
     b90:	mov	x5, x2
     b94:	ldrb	w4, [x2], #1
     b98:	and	x1, x4, #0x7f
     b9c:	lsl	x1, x1, x3
     ba0:	add	w3, w3, #0x7
     ba4:	orr	x0, x0, x1
     ba8:	tbnz	w4, #7, b90 <uw_frame_state_for+0xd0>
     bac:	cmp	w3, #0x3f
     bb0:	b.hi	bc8 <uw_frame_state_for+0x108>  // b.pmore
     bb4:	mov	x1, #0xffffffffffffffff    	// #-1
     bb8:	tst	x4, #0x40
     bbc:	lsl	x3, x1, x3
     bc0:	orr	x3, x0, x3
     bc4:	csel	x0, x3, x0, ne  // ne = any
     bc8:	str	x0, [x19, #1624]
     bcc:	cmp	w6, #0x1
     bd0:	mov	x4, #0x0                   	// #0
     bd4:	mov	w3, #0x0                   	// #0
     bd8:	b.eq	d40 <uw_frame_state_for+0x280>  // b.none
     bdc:	nop
     be0:	ldrb	w0, [x2], #1
     be4:	and	x1, x0, #0x7f
     be8:	lsl	x1, x1, x3
     bec:	add	w3, w3, #0x7
     bf0:	orr	x4, x4, x1
     bf4:	tbnz	w0, #7, be0 <uw_frame_state_for+0x120>
     bf8:	mov	w0, #0xffffffff            	// #-1
     bfc:	str	x4, [x19, #1640]
     c00:	strb	w0, [x19, #1649]
     c04:	ldrb	w4, [x22]
     c08:	cmp	w4, #0x7a
     c0c:	b.eq	d60 <uw_frame_state_for+0x2a0>  // b.none
     c10:	mov	x24, #0x0                   	// #0
     c14:	cbz	w4, 10c4 <uw_frame_state_for+0x604>
     c18:	add	x22, x22, #0x1
     c1c:	add	x26, sp, #0x58
     c20:	mov	w25, #0x1                   	// #1
     c24:	b	c4c <uw_frame_state_for+0x18c>
     c28:	cmp	w4, #0x52
     c2c:	b.eq	da0 <uw_frame_state_for+0x2e0>  // b.none
     c30:	cmp	w4, #0x50
     c34:	b.eq	dac <uw_frame_state_for+0x2ec>  // b.none
     c38:	cmp	w4, #0x53
     c3c:	b.ne	eb8 <uw_frame_state_for+0x3f8>  // b.any
     c40:	strb	w25, [x19, #1651]
     c44:	ldrb	w4, [x22], #1
     c48:	cbz	w4, c64 <uw_frame_state_for+0x1a4>
     c4c:	cmp	w4, #0x4c
     c50:	b.ne	c28 <uw_frame_state_for+0x168>  // b.any
     c54:	ldrb	w0, [x2], #1
     c58:	strb	w0, [x19, #1649]
     c5c:	ldrb	w4, [x22], #1
     c60:	cbnz	w4, c4c <uw_frame_state_for+0x18c>
     c64:	cbz	x24, eb4 <uw_frame_state_for+0x3f4>
     c68:	ldr	w1, [x23]
     c6c:	mov	x0, x24
     c70:	mov	x3, x19
     c74:	mov	x2, x20
     c78:	add	x1, x1, #0x4
     c7c:	add	x1, x23, x1
     c80:	bl	160 <execute_cfa_program>
     c84:	ldrb	w0, [x19, #1648]
     c88:	cmp	w0, #0xff
     c8c:	b.eq	1050 <uw_frame_state_for+0x590>  // b.none
     c90:	and	w0, w0, #0x7
     c94:	cmp	w0, #0x2
     c98:	b.eq	1018 <uw_frame_state_for+0x558>  // b.none
     c9c:	b.ls	e94 <uw_frame_state_for+0x3d4>  // b.plast
     ca0:	cmp	w0, #0x3
     ca4:	mov	x2, #0x10                  	// #16
     ca8:	b.ne	e30 <uw_frame_state_for+0x370>  // b.any
     cac:	ldrb	w1, [x19, #1650]
     cb0:	add	x2, x21, x2
     cb4:	ldrb	w0, [x19, #1649]
     cb8:	cbz	w1, e4c <uw_frame_state_for+0x38c>
     cbc:	mov	x4, #0x0                   	// #0
     cc0:	mov	w3, #0x0                   	// #0
     cc4:	nop
     cc8:	ldrb	w5, [x2], #1
     ccc:	and	x1, x5, #0x7f
     cd0:	lsl	x1, x1, x3
     cd4:	add	w3, w3, #0x7
     cd8:	orr	x4, x4, x1
     cdc:	tbnz	w5, #7, cc8 <uw_frame_state_for+0x208>
     ce0:	add	x22, x2, x4
     ce4:	cmp	w0, #0xff
     ce8:	b.ne	ed8 <uw_frame_state_for+0x418>  // b.any
     cec:	ldr	w1, [x21]
     cf0:	mov	x0, x22
     cf4:	mov	x3, x19
     cf8:	mov	x2, x20
     cfc:	add	x1, x1, #0x4
     d00:	add	x1, x21, x1
     d04:	bl	160 <execute_cfa_program>
     d08:	ldp	x21, x22, [sp, #32]
     d0c:	mov	w0, #0x0                   	// #0
     d10:	ldp	x23, x24, [sp, #48]
     d14:	ldp	x25, x26, [sp, #64]
     d18:	ldp	x19, x20, [sp, #16]
     d1c:	ldp	x29, x30, [sp], #96
     d20:	ret
     d24:	ldrb	w0, [x23, #10]
     d28:	cmp	w0, #0x68
     d2c:	b.ne	b50 <uw_frame_state_for+0x90>  // b.any
     d30:	ldr	x0, [x2], #8
     d34:	add	x22, x23, #0xb
     d38:	str	x0, [x19, #1656]
     d3c:	b	b50 <uw_frame_state_for+0x90>
     d40:	ldrb	w0, [x2]
     d44:	add	x2, x5, #0x2
     d48:	str	x0, [x19, #1640]
     d4c:	mov	w0, #0xffffffff            	// #-1
     d50:	strb	w0, [x19, #1649]
     d54:	ldrb	w4, [x22]
     d58:	cmp	w4, #0x7a
     d5c:	b.ne	c10 <uw_frame_state_for+0x150>  // b.any
     d60:	mov	x0, #0x0                   	// #0
     d64:	mov	w3, #0x0                   	// #0
     d68:	ldrb	w4, [x2], #1
     d6c:	and	x1, x4, #0x7f
     d70:	lsl	x1, x1, x3
     d74:	add	w3, w3, #0x7
     d78:	orr	x0, x0, x1
     d7c:	tbnz	w4, #7, d68 <uw_frame_state_for+0x2a8>
     d80:	mov	w1, #0x1                   	// #1
     d84:	strb	w1, [x19, #1650]
     d88:	add	x24, x2, x0
     d8c:	add	x0, x22, #0x1
     d90:	ldrb	w4, [x22, #1]
     d94:	cbz	w4, c68 <uw_frame_state_for+0x1a8>
     d98:	mov	x22, x0
     d9c:	b	c18 <uw_frame_state_for+0x158>
     da0:	ldrb	w0, [x2], #1
     da4:	strb	w0, [x19, #1648]
     da8:	b	c44 <uw_frame_state_for+0x184>
     dac:	ldrb	w0, [x2], #1
     db0:	cmp	w0, #0xff
     db4:	b.eq	df4 <uw_frame_state_for+0x334>  // b.none
     db8:	and	w1, w0, #0x70
     dbc:	cmp	w1, #0x30
     dc0:	b.eq	1010 <uw_frame_state_for+0x550>  // b.none
     dc4:	b.hi	e20 <uw_frame_state_for+0x360>  // b.pmore
     dc8:	cmp	w1, #0x20
     dcc:	b.ne	e10 <uw_frame_state_for+0x350>  // b.any
     dd0:	ldr	x1, [x20, #808]
     dd4:	mov	x3, x26
     dd8:	bl	0 <read_encoded_value_with_base>
     ddc:	mov	x2, x0
     de0:	ldr	x1, [sp, #88]
     de4:	str	x1, [x19, #1616]
     de8:	b	c44 <uw_frame_state_for+0x184>
     dec:	cmp	w1, #0x50
     df0:	b.ne	e1c <uw_frame_state_for+0x35c>  // b.any
     df4:	mov	x1, #0x0                   	// #0
     df8:	mov	x3, x26
     dfc:	bl	0 <read_encoded_value_with_base>
     e00:	mov	x2, x0
     e04:	ldr	x1, [sp, #88]
     e08:	str	x1, [x19, #1616]
     e0c:	b	c44 <uw_frame_state_for+0x184>
     e10:	b.hi	e1c <uw_frame_state_for+0x35c>  // b.pmore
     e14:	tst	w0, #0x60
     e18:	b.eq	df4 <uw_frame_state_for+0x334>  // b.none
     e1c:	bl	0 <abort>
     e20:	cmp	w1, #0x40
     e24:	b.ne	dec <uw_frame_state_for+0x32c>  // b.any
     e28:	ldr	x1, [x20, #824]
     e2c:	b	dd4 <uw_frame_state_for+0x314>
     e30:	cmp	w0, #0x4
     e34:	b.ne	e1c <uw_frame_state_for+0x35c>  // b.any
     e38:	ldrb	w1, [x19, #1650]
     e3c:	mov	x2, #0x18                  	// #24
     e40:	ldrb	w0, [x19, #1649]
     e44:	add	x2, x21, x2
     e48:	cbnz	w1, cbc <uw_frame_state_for+0x1fc>
     e4c:	mov	x22, x2
     e50:	cmp	w0, #0xff
     e54:	b.eq	cec <uw_frame_state_for+0x22c>  // b.none
     e58:	and	w1, w0, #0x70
     e5c:	cmp	w1, #0x30
     e60:	b.eq	10b8 <uw_frame_state_for+0x5f8>  // b.none
     e64:	b.hi	1020 <uw_frame_state_for+0x560>  // b.pmore
     e68:	cmp	w1, #0x20
     e6c:	mov	x22, #0x0                   	// #0
     e70:	b.ne	f00 <uw_frame_state_for+0x440>  // b.any
     e74:	ldr	x1, [x20, #808]
     e78:	add	x3, sp, #0x58
     e7c:	bl	0 <read_encoded_value_with_base>
     e80:	cmp	x22, #0x0
     e84:	csel	x22, x22, x0, ne  // ne = any
     e88:	ldr	x0, [sp, #88]
     e8c:	str	x0, [x20, #800]
     e90:	b	cec <uw_frame_state_for+0x22c>
     e94:	mov	x2, #0x18                  	// #24
     e98:	cbz	w0, cac <uw_frame_state_for+0x1ec>
     e9c:	bl	0 <abort>
     ea0:	ldp	x21, x22, [sp, #32]
     ea4:	mov	w0, #0x5                   	// #5
     ea8:	ldp	x19, x20, [sp, #16]
     eac:	ldp	x29, x30, [sp], #96
     eb0:	ret
     eb4:	mov	x24, x2
     eb8:	cbnz	x24, c68 <uw_frame_state_for+0x1a8>
     ebc:	ldp	x25, x26, [sp, #64]
     ec0:	mov	w0, #0x3                   	// #3
     ec4:	ldp	x19, x20, [sp, #16]
     ec8:	ldp	x21, x22, [sp, #32]
     ecc:	ldp	x23, x24, [sp, #48]
     ed0:	ldp	x29, x30, [sp], #96
     ed4:	ret
     ed8:	and	w1, w0, #0x70
     edc:	cmp	w1, #0x30
     ee0:	b.eq	10bc <uw_frame_state_for+0x5fc>  // b.none
     ee4:	b.hi	f10 <uw_frame_state_for+0x450>  // b.pmore
     ee8:	cmp	w1, #0x10
     eec:	b.eq	f28 <uw_frame_state_for+0x468>  // b.none
     ef0:	cmp	w1, #0x20
     ef4:	b.eq	e74 <uw_frame_state_for+0x3b4>  // b.none
     ef8:	cbz	w1, f28 <uw_frame_state_for+0x468>
     efc:	bl	0 <abort>
     f00:	b.hi	e1c <uw_frame_state_for+0x35c>  // b.pmore
     f04:	tst	w0, #0x60
     f08:	b.eq	1034 <uw_frame_state_for+0x574>  // b.none
     f0c:	bl	0 <abort>
     f10:	cmp	w1, #0x40
     f14:	b.ne	f20 <uw_frame_state_for+0x460>  // b.any
     f18:	ldr	x1, [x20, #824]
     f1c:	b	e78 <uw_frame_state_for+0x3b8>
     f20:	cmp	w1, #0x50
     f24:	b.ne	e1c <uw_frame_state_for+0x35c>  // b.any
     f28:	add	x3, sp, #0x58
     f2c:	mov	x1, #0x0                   	// #0
     f30:	bl	0 <read_encoded_value_with_base>
     f34:	ldr	x0, [sp, #88]
     f38:	str	x0, [x20, #800]
     f3c:	b	cec <uw_frame_state_for+0x22c>
     f40:	ldr	x0, [x20, #792]
     f44:	mov	w1, #0x1168                	// #4456
     f48:	movk	w1, #0xd280, lsl #16
     f4c:	ldr	w2, [x0]
     f50:	cmp	w2, w1
     f54:	b.ne	ea0 <uw_frame_state_for+0x3e0>  // b.any
     f58:	ldr	w1, [x0, #4]
     f5c:	mov	w0, #0x1                   	// #1
     f60:	movk	w0, #0xd400, lsl #16
     f64:	cmp	w1, w0
     f68:	b.ne	ea0 <uw_frame_state_for+0x3e0>  // b.any
     f6c:	ldr	x6, [x20, #784]
     f70:	mov	w3, #0x1                   	// #1
     f74:	mov	x1, x19
     f78:	mov	w2, w3
     f7c:	add	x8, x6, #0x130
     f80:	mov	x4, #0x1f                  	// #31
     f84:	mov	x5, #0x130                 	// #304
     f88:	mov	x0, #0x8                   	// #8
     f8c:	str	x5, [x19, #1576]
     f90:	str	x4, [x19, #1584]
     f94:	str	w3, [x19, #1600]
     f98:	str	w2, [x1, #8]
     f9c:	str	x0, [x1], #16
     fa0:	add	x0, x0, #0x8
     fa4:	cmp	x0, #0x100
     fa8:	b.ne	f98 <uw_frame_state_for+0x4d8>  // b.any
     fac:	ldr	w0, [x6, #592]
     fb0:	add	x5, x6, #0x250
     fb4:	cbz	w0, 1078 <uw_frame_state_for+0x5b8>
     fb8:	mov	w7, #0x8001                	// #32769
     fbc:	add	x4, x19, #0x600
     fc0:	add	x9, x6, x19
     fc4:	movk	w7, #0x4650, lsl #16
     fc8:	mov	w3, #0x1                   	// #1
     fcc:	b	fe0 <uw_frame_state_for+0x520>
     fd0:	ldr	w0, [x5, #4]
     fd4:	add	x5, x5, x0
     fd8:	ldr	w0, [x5]
     fdc:	cbz	w0, 1078 <uw_frame_state_for+0x5b8>
     fe0:	cmp	w0, w7
     fe4:	b.ne	fd0 <uw_frame_state_for+0x510>  // b.any
     fe8:	sub	x2, x5, #0x520
     fec:	add	x0, x19, #0x400
     ff0:	sub	x2, x2, x9
     ff4:	nop
     ff8:	str	w3, [x0, #8]
     ffc:	add	x1, x2, x0
    1000:	str	x1, [x0], #16
    1004:	cmp	x4, x0
    1008:	b.ne	ff8 <uw_frame_state_for+0x538>  // b.any
    100c:	b	fd0 <uw_frame_state_for+0x510>
    1010:	ldr	x1, [x20, #816]
    1014:	b	dd4 <uw_frame_state_for+0x314>
    1018:	mov	x2, #0xc                   	// #12
    101c:	b	cac <uw_frame_state_for+0x1ec>
    1020:	cmp	w1, #0x40
    1024:	mov	x22, #0x0                   	// #0
    1028:	b.eq	f18 <uw_frame_state_for+0x458>  // b.none
    102c:	cmp	w1, #0x50
    1030:	b.ne	e1c <uw_frame_state_for+0x35c>  // b.any
    1034:	mov	x1, #0x0                   	// #0
    1038:	add	x3, sp, #0x58
    103c:	bl	0 <read_encoded_value_with_base>
    1040:	mov	x22, x0
    1044:	ldr	x1, [sp, #88]
    1048:	str	x1, [x20, #800]
    104c:	b	cec <uw_frame_state_for+0x22c>
    1050:	mov	x2, #0x8                   	// #8
    1054:	b	cac <uw_frame_state_for+0x1ec>
    1058:	ldrb	w0, [x2]
    105c:	cmp	w0, #0x8
    1060:	b.ne	ec0 <uw_frame_state_for+0x400>  // b.any
    1064:	ldrb	w0, [x2, #1]
    1068:	cbnz	w0, ec0 <uw_frame_state_for+0x400>
    106c:	add	x2, x2, #0x2
    1070:	stp	x25, x26, [sp, #64]
    1074:	b	b60 <uw_frame_state_for+0xa0>
    1078:	mov	w3, #0x1                   	// #1
    107c:	strb	w3, [x19, #1651]
    1080:	add	x1, x6, #0x230
    1084:	mov	w5, #0x4                   	// #4
    1088:	ldr	x2, [x8, #264]
    108c:	sub	x1, x1, x8
    1090:	mov	x4, #0x60                  	// #96
    1094:	mov	w0, #0x0                   	// #0
    1098:	sub	x8, x2, x8
    109c:	ldp	x21, x22, [sp, #32]
    10a0:	str	x1, [x19, #496]
    10a4:	str	w3, [x19, #504]
    10a8:	str	x8, [x19, #1536]
    10ac:	str	w5, [x19, #1544]
    10b0:	str	x4, [x19, #1640]
    10b4:	b	d18 <uw_frame_state_for+0x258>
    10b8:	mov	x22, #0x0                   	// #0
    10bc:	ldr	x1, [x20, #816]
    10c0:	b	e78 <uw_frame_state_for+0x3b8>
    10c4:	mov	x24, x2
    10c8:	b	c68 <uw_frame_state_for+0x1a8>
    10cc:	nop

00000000000010d0 <uw_install_context_1>:
    10d0:	stp	x29, x30, [sp, #-80]!
    10d4:	mov	x29, sp
    10d8:	stp	x21, x22, [sp, #32]
    10dc:	mov	x21, x0
    10e0:	ldr	x0, [x1, #832]
    10e4:	stp	x19, x20, [sp, #16]
    10e8:	mov	x20, x1
    10ec:	stp	x23, x24, [sp, #48]
    10f0:	tbz	x0, #62, 10fc <uw_install_context_1+0x2c>
    10f4:	ldrb	w1, [x1, #887]
    10f8:	cbnz	w1, 1104 <uw_install_context_1+0x34>
    10fc:	ldr	x1, [x20, #248]
    1100:	cbz	x1, 11c0 <uw_install_context_1+0xf0>
    1104:	adrp	x24, 0 <read_encoded_value_with_base>
    1108:	add	x23, x21, #0x358
    110c:	add	x24, x24, #0x0
    1110:	add	x22, x20, #0x358
    1114:	mov	x19, #0x0                   	// #0
    1118:	b	113c <uw_install_context_1+0x6c>
    111c:	cbz	x0, 1130 <uw_install_context_1+0x60>
    1120:	ldrb	w2, [x19, x24]
    1124:	cmp	w2, #0x8
    1128:	b.ne	122c <uw_install_context_1+0x15c>  // b.any
    112c:	str	x1, [x0]
    1130:	add	x19, x19, #0x1
    1134:	cmp	x19, #0x61
    1138:	b.eq	1178 <uw_install_context_1+0xa8>  // b.none
    113c:	ldrb	w2, [x23, x19]
    1140:	ldr	x0, [x21, x19, lsl #3]
    1144:	ldr	x1, [x20, x19, lsl #3]
    1148:	cbnz	w2, 122c <uw_install_context_1+0x15c>
    114c:	ldrb	w2, [x22, x19]
    1150:	cbnz	w2, 111c <uw_install_context_1+0x4c>
    1154:	cmp	x1, #0x0
    1158:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    115c:	ccmp	x0, x1, #0x4, ne  // ne = any
    1160:	b.eq	1130 <uw_install_context_1+0x60>  // b.none
    1164:	ldrb	w2, [x24, x19]
    1168:	add	x19, x19, #0x1
    116c:	bl	0 <memcpy>
    1170:	cmp	x19, #0x61
    1174:	b.ne	113c <uw_install_context_1+0x6c>  // b.any
    1178:	ldr	x0, [x21, #832]
    117c:	tbz	x0, #62, 1188 <uw_install_context_1+0xb8>
    1180:	ldrb	w0, [x21, #887]
    1184:	cbnz	w0, 11a8 <uw_install_context_1+0xd8>
    1188:	ldr	x1, [x21, #248]
    118c:	mov	x0, #0x0                   	// #0
    1190:	cbz	x1, 11ec <uw_install_context_1+0x11c>
    1194:	ldp	x19, x20, [sp, #16]
    1198:	ldp	x21, x22, [sp, #32]
    119c:	ldp	x23, x24, [sp, #48]
    11a0:	ldp	x29, x30, [sp], #80
    11a4:	ret
    11a8:	mov	x0, #0x0                   	// #0
    11ac:	ldp	x19, x20, [sp, #16]
    11b0:	ldp	x21, x22, [sp, #32]
    11b4:	ldp	x23, x24, [sp, #48]
    11b8:	ldp	x29, x30, [sp], #80
    11bc:	ret
    11c0:	adrp	x1, 0 <read_encoded_value_with_base>
    11c4:	ldr	x2, [x20, #784]
    11c8:	ldrb	w1, [x1]
    11cc:	cmp	w1, #0x8
    11d0:	b.ne	122c <uw_install_context_1+0x15c>  // b.any
    11d4:	str	x2, [sp, #72]
    11d8:	tbz	x0, #62, 11e0 <uw_install_context_1+0x110>
    11dc:	strb	wzr, [x20, #887]
    11e0:	add	x0, sp, #0x48
    11e4:	str	x0, [x20, #248]
    11e8:	b	1104 <uw_install_context_1+0x34>
    11ec:	ldr	x1, [x20, #832]
    11f0:	ldr	x0, [x20, #248]
    11f4:	tbnz	x1, #62, 1220 <uw_install_context_1+0x150>
    11f8:	adrp	x1, 0 <read_encoded_value_with_base>
    11fc:	ldrb	w1, [x1]
    1200:	cmp	w1, #0x8
    1204:	b.ne	122c <uw_install_context_1+0x15c>  // b.any
    1208:	ldr	x0, [x0]
    120c:	ldr	x2, [x21, #784]
    1210:	ldr	x1, [x20, #848]
    1214:	sub	x0, x0, x2
    1218:	add	x0, x0, x1
    121c:	b	1194 <uw_install_context_1+0xc4>
    1220:	ldrb	w1, [x20, #887]
    1224:	cbz	w1, 11f8 <uw_install_context_1+0x128>
    1228:	b	120c <uw_install_context_1+0x13c>
    122c:	bl	0 <abort>

0000000000001230 <execute_stack_op>:
    1230:	sub	sp, sp, #0x250
    1234:	cmp	x0, x1
    1238:	stp	x29, x30, [sp]
    123c:	mov	x29, sp
    1240:	str	x3, [sp, #80]
    1244:	b.cs	16c4 <execute_stack_op+0x494>  // b.hs, b.nlast
    1248:	mov	x4, x0
    124c:	stp	x19, x20, [sp, #16]
    1250:	mov	x20, x1
    1254:	stp	x21, x22, [sp, #32]
    1258:	adrp	x22, 0 <read_encoded_value_with_base>
    125c:	add	x21, sp, #0x50
    1260:	add	x22, x22, #0x0
    1264:	stp	x23, x24, [sp, #48]
    1268:	adrp	x24, 0 <read_encoded_value_with_base>
    126c:	mov	x23, x2
    1270:	add	x24, x24, #0x0
    1274:	mov	w19, #0x1                   	// #1
    1278:	mov	x5, x4
    127c:	ldrb	w6, [x5], #1
    1280:	sub	w0, w6, #0x3
    1284:	cmp	w0, #0xee
    1288:	b.ls	1290 <execute_stack_op+0x60>  // b.plast
    128c:	bl	0 <abort>
    1290:	ldrh	w0, [x22, w0, uxtw #1]
    1294:	adr	x1, 12a0 <execute_stack_op+0x70>
    1298:	add	x0, x1, w0, sxth #2
    129c:	br	x0
    12a0:	mov	x3, #0x0                   	// #0
    12a4:	mov	w1, #0x0                   	// #0
    12a8:	ldrb	w2, [x5], #1
    12ac:	and	x0, x2, #0x7f
    12b0:	lsl	x0, x0, x1
    12b4:	add	w1, w1, #0x7
    12b8:	orr	x3, x3, x0
    12bc:	tbnz	w2, #7, 12a8 <execute_stack_op+0x78>
    12c0:	cmp	w1, #0x3f
    12c4:	b.ls	167c <execute_stack_op+0x44c>  // b.plast
    12c8:	sub	w6, w6, #0x70
    12cc:	cmp	w6, #0x61
    12d0:	b.gt	128c <execute_stack_op+0x5c>
    12d4:	ldr	x2, [x23, #832]
    12d8:	sxtw	x1, w6
    12dc:	ldr	x0, [x23, x1, lsl #3]
    12e0:	tbz	x2, #62, 12f0 <execute_stack_op+0xc0>
    12e4:	add	x1, x23, x1
    12e8:	ldrb	w1, [x1, #856]
    12ec:	cbnz	w1, 1310 <execute_stack_op+0xe0>
    12f0:	cmp	w6, #0x2e
    12f4:	b.eq	169c <execute_stack_op+0x46c>  // b.none
    12f8:	adrp	x1, 0 <read_encoded_value_with_base>
    12fc:	add	x1, x1, #0x0
    1300:	ldrb	w1, [x1, w6, sxtw]
    1304:	cmp	w1, #0x8
    1308:	b.ne	128c <execute_stack_op+0x5c>  // b.any
    130c:	ldr	x0, [x0]
    1310:	add	x0, x3, x0
    1314:	mov	w3, w19
    1318:	mov	x4, x5
    131c:	b	1330 <execute_stack_op+0x100>
    1320:	mov	w3, w19
    1324:	add	x4, x4, #0x9
    1328:	ldur	x0, [x4, #-8]
    132c:	nop
    1330:	cmp	w3, #0x3f
    1334:	b.gt	128c <execute_stack_op+0x5c>
    1338:	add	w19, w3, #0x1
    133c:	str	x0, [x21, w3, sxtw #3]
    1340:	cmp	x20, x4
    1344:	b.hi	1278 <execute_stack_op+0x48>  // b.pmore
    1348:	cbz	w19, 128c <execute_stack_op+0x5c>
    134c:	sub	w19, w19, #0x1
    1350:	add	x0, sp, #0x50
    1354:	ldp	x29, x30, [sp]
    1358:	ldr	x0, [x0, w19, sxtw #3]
    135c:	ldp	x19, x20, [sp, #16]
    1360:	ldp	x21, x22, [sp, #32]
    1364:	ldp	x23, x24, [sp, #48]
    1368:	add	sp, sp, #0x250
    136c:	ret
    1370:	sub	w6, w6, #0x50
    1374:	cmp	w6, #0x61
    1378:	b.gt	128c <execute_stack_op+0x5c>
    137c:	ldr	x2, [x23, #832]
    1380:	sxtw	x1, w6
    1384:	ldr	x0, [x23, x1, lsl #3]
    1388:	tbz	x2, #62, 1398 <execute_stack_op+0x168>
    138c:	add	x1, x23, x1
    1390:	ldrb	w1, [x1, #856]
    1394:	cbnz	w1, 1314 <execute_stack_op+0xe4>
    1398:	cmp	w6, #0x2e
    139c:	b.eq	16a8 <execute_stack_op+0x478>  // b.none
    13a0:	adrp	x1, 0 <read_encoded_value_with_base>
    13a4:	add	x1, x1, #0x0
    13a8:	ldrb	w1, [x1, w6, sxtw]
    13ac:	cmp	w1, #0x8
    13b0:	b.ne	128c <execute_stack_op+0x5c>  // b.any
    13b4:	mov	w3, w19
    13b8:	mov	x4, x5
    13bc:	ldr	x0, [x0]
    13c0:	b	1330 <execute_stack_op+0x100>
    13c4:	sub	w0, w6, #0x30
    13c8:	mov	w3, w19
    13cc:	mov	x4, x5
    13d0:	b	1330 <execute_stack_op+0x100>
    13d4:	cmp	w19, #0x1
    13d8:	b.le	128c <execute_stack_op+0x5c>
    13dc:	sub	w3, w19, #0x2
    13e0:	sub	w19, w19, #0x1
    13e4:	sub	w6, w6, #0x1a
    13e8:	cmp	w6, #0x14
    13ec:	ldr	x1, [x21, w19, sxtw #3]
    13f0:	ldr	x0, [x21, w3, sxtw #3]
    13f4:	b.hi	128c <execute_stack_op+0x5c>  // b.pmore
    13f8:	ldrh	w2, [x24, w6, uxtw #1]
    13fc:	adr	x4, 1408 <execute_stack_op+0x1d8>
    1400:	add	x2, x4, w2, sxth #2
    1404:	br	x2
    1408:	cbz	w19, 128c <execute_stack_op+0x5c>
    140c:	sub	w3, w19, #0x1
    1410:	cmp	w6, #0x20
    1414:	ldr	x0, [x21, w3, sxtw #3]
    1418:	b.eq	19a0 <execute_stack_op+0x770>  // b.none
    141c:	b.hi	143c <execute_stack_op+0x20c>  // b.pmore
    1420:	cmp	w6, #0x19
    1424:	b.eq	16d4 <execute_stack_op+0x4a4>  // b.none
    1428:	cmp	w6, #0x1f
    142c:	b.ne	163c <execute_stack_op+0x40c>  // b.any
    1430:	neg	x0, x0
    1434:	mov	x4, x5
    1438:	b	1330 <execute_stack_op+0x100>
    143c:	cmp	w6, #0x23
    1440:	b.eq	1650 <execute_stack_op+0x420>  // b.none
    1444:	cmp	w6, #0x94
    1448:	b.ne	128c <execute_stack_op+0x5c>  // b.any
    144c:	ldrb	w1, [x4, #1]
    1450:	add	x4, x4, #0x2
    1454:	cmp	w1, #0x4
    1458:	b.eq	1890 <execute_stack_op+0x660>  // b.none
    145c:	b.hi	19bc <execute_stack_op+0x78c>  // b.pmore
    1460:	cmp	w1, #0x1
    1464:	b.ne	19ac <execute_stack_op+0x77c>  // b.any
    1468:	ldrb	w0, [x0]
    146c:	b	1330 <execute_stack_op+0x100>
    1470:	cmp	w19, #0x2
    1474:	b.le	128c <execute_stack_op+0x5c>
    1478:	sub	w1, w19, #0x1
    147c:	sub	w0, w19, #0x3
    1480:	mov	x4, x5
    1484:	add	x3, x21, w1, sxtw #3
    1488:	add	x2, x21, w0, sxtw #3
    148c:	ldr	x6, [x21, w1, sxtw #3]
    1490:	ldp	x5, x1, [x3, #-16]
    1494:	str	x6, [x21, w0, sxtw #3]
    1498:	stp	x5, x1, [x2, #8]
    149c:	b	1340 <execute_stack_op+0x110>
    14a0:	cmp	w19, #0x1
    14a4:	b.le	128c <execute_stack_op+0x5c>
    14a8:	sub	w1, w19, #0x1
    14ac:	sub	w0, w19, #0x2
    14b0:	mov	x4, x5
    14b4:	add	x1, x21, w1, sxtw #3
    14b8:	sbfiz	x0, x0, #3, #32
    14bc:	ldur	q0, [x1, #-8]
    14c0:	ext	v0.16b, v0.16b, v0.16b, #8
    14c4:	str	q0, [x21, x0]
    14c8:	b	1340 <execute_stack_op+0x110>
    14cc:	ldrb	w3, [x4, #1]
    14d0:	sub	w1, w19, #0x1
    14d4:	add	x4, x4, #0x2
    14d8:	sxtw	x2, w1
    14dc:	cmp	x3, w1, sxtw
    14e0:	b.ge	128c <execute_stack_op+0x5c>  // b.tcont
    14e4:	sub	x1, x2, x3
    14e8:	mov	w3, w19
    14ec:	ldr	x0, [x21, x1, lsl #3]
    14f0:	b	1330 <execute_stack_op+0x100>
    14f4:	cmp	w19, #0x1
    14f8:	b.le	128c <execute_stack_op+0x5c>
    14fc:	sub	w0, w19, #0x2
    1500:	mov	x4, x5
    1504:	mov	w3, w19
    1508:	ldr	x0, [x21, w0, sxtw #3]
    150c:	b	1330 <execute_stack_op+0x100>
    1510:	cbz	w19, 128c <execute_stack_op+0x5c>
    1514:	sub	w19, w19, #0x1
    1518:	mov	x4, x5
    151c:	b	1340 <execute_stack_op+0x110>
    1520:	cbz	w19, 128c <execute_stack_op+0x5c>
    1524:	sub	w0, w19, #0x1
    1528:	mov	x4, x5
    152c:	mov	w3, w19
    1530:	ldr	x0, [x21, w0, sxtw #3]
    1534:	b	1330 <execute_stack_op+0x100>
    1538:	ldursh	x1, [x4, #1]
    153c:	add	x4, x4, #0x3
    1540:	add	x4, x4, x1
    1544:	b	1340 <execute_stack_op+0x110>
    1548:	ldrb	w0, [x4, #1]
    154c:	mov	w3, w19
    1550:	add	x4, x4, #0x2
    1554:	b	1330 <execute_stack_op+0x100>
    1558:	ldrb	w0, [x4, #1]
    155c:	add	x2, x4, #0x2
    1560:	cmp	w0, #0xff
    1564:	b.eq	15a4 <execute_stack_op+0x374>  // b.none
    1568:	and	w1, w0, #0x70
    156c:	cmp	w1, #0x30
    1570:	b.eq	16bc <execute_stack_op+0x48c>  // b.none
    1574:	b.hi	1588 <execute_stack_op+0x358>  // b.pmore
    1578:	cmp	w1, #0x20
    157c:	b.ne	1598 <execute_stack_op+0x368>  // b.any
    1580:	ldr	x1, [x23, #808]
    1584:	b	15a8 <execute_stack_op+0x378>
    1588:	cmp	w1, #0x40
    158c:	b.ne	15c0 <execute_stack_op+0x390>  // b.any
    1590:	ldr	x1, [x23, #824]
    1594:	b	15a8 <execute_stack_op+0x378>
    1598:	b.hi	128c <execute_stack_op+0x5c>  // b.pmore
    159c:	tst	w0, #0x60
    15a0:	b.ne	128c <execute_stack_op+0x5c>  // b.any
    15a4:	mov	x1, #0x0                   	// #0
    15a8:	add	x3, sp, #0x48
    15ac:	bl	0 <read_encoded_value_with_base>
    15b0:	mov	w3, w19
    15b4:	mov	x4, x0
    15b8:	ldr	x0, [sp, #72]
    15bc:	b	1330 <execute_stack_op+0x100>
    15c0:	cmp	w1, #0x50
    15c4:	b.eq	15a4 <execute_stack_op+0x374>  // b.none
    15c8:	bl	0 <abort>
    15cc:	cbz	w19, 128c <execute_stack_op+0x5c>
    15d0:	sub	w19, w19, #0x1
    15d4:	add	x1, x4, #0x3
    15d8:	ldr	x0, [x21, w19, sxtw #3]
    15dc:	cbz	x0, 1694 <execute_stack_op+0x464>
    15e0:	ldursh	x4, [x4, #1]
    15e4:	add	x4, x1, x4
    15e8:	b	1340 <execute_stack_op+0x110>
    15ec:	ldursw	x0, [x4, #1]
    15f0:	mov	w3, w19
    15f4:	add	x4, x4, #0x5
    15f8:	b	1330 <execute_stack_op+0x100>
    15fc:	ldur	w0, [x4, #1]
    1600:	mov	w3, w19
    1604:	add	x4, x4, #0x5
    1608:	b	1330 <execute_stack_op+0x100>
    160c:	ldursh	x0, [x4, #1]
    1610:	mov	w3, w19
    1614:	add	x4, x4, #0x3
    1618:	b	1330 <execute_stack_op+0x100>
    161c:	ldurh	w0, [x4, #1]
    1620:	mov	w3, w19
    1624:	add	x4, x4, #0x3
    1628:	b	1330 <execute_stack_op+0x100>
    162c:	ldrsb	x0, [x4, #1]
    1630:	mov	w3, w19
    1634:	add	x4, x4, #0x2
    1638:	b	1330 <execute_stack_op+0x100>
    163c:	cmp	w6, #0x6
    1640:	b.ne	128c <execute_stack_op+0x5c>  // b.any
    1644:	mov	x4, x5
    1648:	ldr	x0, [x0]
    164c:	b	1330 <execute_stack_op+0x100>
    1650:	mov	x6, #0x0                   	// #0
    1654:	mov	w2, #0x0                   	// #0
    1658:	ldrb	w4, [x5], #1
    165c:	and	x1, x4, #0x7f
    1660:	lsl	x1, x1, x2
    1664:	add	w2, w2, #0x7
    1668:	orr	x6, x6, x1
    166c:	tbnz	w4, #7, 1658 <execute_stack_op+0x428>
    1670:	add	x0, x0, x6
    1674:	mov	x4, x5
    1678:	b	1330 <execute_stack_op+0x100>
    167c:	mov	x0, #0xffffffffffffffff    	// #-1
    1680:	tst	x2, #0x40
    1684:	lsl	x0, x0, x1
    1688:	orr	x0, x3, x0
    168c:	csel	x3, x0, x3, ne  // ne = any
    1690:	b	12c8 <execute_stack_op+0x98>
    1694:	mov	x4, x1
    1698:	b	1340 <execute_stack_op+0x110>
    169c:	cntd	x0
    16a0:	sxtw	x0, w0
    16a4:	b	1310 <execute_stack_op+0xe0>
    16a8:	cntd	x0
    16ac:	mov	w3, w19
    16b0:	mov	x4, x5
    16b4:	sxtw	x0, w0
    16b8:	b	1330 <execute_stack_op+0x100>
    16bc:	ldr	x1, [x23, #816]
    16c0:	b	15a8 <execute_stack_op+0x378>
    16c4:	mov	x0, x3
    16c8:	ldp	x29, x30, [sp]
    16cc:	add	sp, sp, #0x250
    16d0:	ret
    16d4:	cmp	x0, #0x0
    16d8:	mov	x4, x5
    16dc:	cneg	x0, x0, lt  // lt = tstop
    16e0:	b	1330 <execute_stack_op+0x100>
    16e4:	mov	x4, x5
    16e8:	mov	x3, #0x0                   	// #0
    16ec:	mov	w1, #0x0                   	// #0
    16f0:	ldrb	w2, [x4], #1
    16f4:	and	x0, x2, #0x7f
    16f8:	lsl	x0, x0, x1
    16fc:	add	w1, w1, #0x7
    1700:	orr	x3, x3, x0
    1704:	tbnz	w2, #7, 16f0 <execute_stack_op+0x4c0>
    1708:	cmp	w3, #0x61
    170c:	mov	w1, w3
    1710:	b.gt	128c <execute_stack_op+0x5c>
    1714:	ldr	x2, [x23, #832]
    1718:	sxtw	x3, w3
    171c:	ldr	x0, [x23, x3, lsl #3]
    1720:	tbz	x2, #62, 1730 <execute_stack_op+0x500>
    1724:	add	x3, x23, x3
    1728:	ldrb	w2, [x3, #856]
    172c:	cbnz	w2, 1780 <execute_stack_op+0x550>
    1730:	cmp	w1, #0x2e
    1734:	b.eq	1990 <execute_stack_op+0x760>  // b.none
    1738:	adrp	x2, 0 <read_encoded_value_with_base>
    173c:	add	x2, x2, #0x0
    1740:	ldrb	w1, [x2, w1, sxtw]
    1744:	cmp	w1, #0x8
    1748:	b.ne	128c <execute_stack_op+0x5c>  // b.any
    174c:	mov	w3, w19
    1750:	ldr	x0, [x0]
    1754:	b	1330 <execute_stack_op+0x100>
    1758:	mov	x4, x5
    175c:	mov	x0, #0x0                   	// #0
    1760:	mov	w2, #0x0                   	// #0
    1764:	nop
    1768:	ldrb	w3, [x4], #1
    176c:	and	x1, x3, #0x7f
    1770:	lsl	x1, x1, x2
    1774:	add	w2, w2, #0x7
    1778:	orr	x0, x0, x1
    177c:	tbnz	w3, #7, 1768 <execute_stack_op+0x538>
    1780:	mov	w3, w19
    1784:	b	1330 <execute_stack_op+0x100>
    1788:	mov	x4, x5
    178c:	b	1340 <execute_stack_op+0x110>
    1790:	mov	x4, x5
    1794:	mov	x0, #0x0                   	// #0
    1798:	mov	w2, #0x0                   	// #0
    179c:	nop
    17a0:	ldrb	w5, [x4], #1
    17a4:	and	x1, x5, #0x7f
    17a8:	lsl	x1, x1, x2
    17ac:	add	w2, w2, #0x7
    17b0:	orr	x0, x0, x1
    17b4:	tbnz	w5, #7, 17a0 <execute_stack_op+0x570>
    17b8:	mov	w3, w19
    17bc:	cmp	w2, #0x3f
    17c0:	b.hi	1330 <execute_stack_op+0x100>  // b.pmore
    17c4:	tbz	w5, #6, 1330 <execute_stack_op+0x100>
    17c8:	mov	x1, #0xffffffffffffffff    	// #-1
    17cc:	lsl	x2, x1, x2
    17d0:	orr	x0, x0, x2
    17d4:	b	1330 <execute_stack_op+0x100>
    17d8:	mov	x4, x5
    17dc:	mov	w1, #0x0                   	// #0
    17e0:	mov	x5, #0x0                   	// #0
    17e4:	nop
    17e8:	ldrb	w2, [x4], #1
    17ec:	and	x0, x2, #0x7f
    17f0:	lsl	x0, x0, x1
    17f4:	add	w1, w1, #0x7
    17f8:	orr	x5, x5, x0
    17fc:	tbnz	w2, #7, 17e8 <execute_stack_op+0x5b8>
    1800:	mov	x3, #0x0                   	// #0
    1804:	mov	w1, #0x0                   	// #0
    1808:	ldrb	w2, [x4], #1
    180c:	and	x0, x2, #0x7f
    1810:	lsl	x0, x0, x1
    1814:	add	w1, w1, #0x7
    1818:	orr	x3, x3, x0
    181c:	tbnz	w2, #7, 1808 <execute_stack_op+0x5d8>
    1820:	cmp	w1, #0x3f
    1824:	b.hi	183c <execute_stack_op+0x60c>  // b.pmore
    1828:	mov	x0, #0xffffffffffffffff    	// #-1
    182c:	tst	x2, #0x40
    1830:	lsl	x0, x0, x1
    1834:	orr	x0, x3, x0
    1838:	csel	x3, x0, x3, ne  // ne = any
    183c:	cmp	w5, #0x61
    1840:	mov	w1, w5
    1844:	b.gt	128c <execute_stack_op+0x5c>
    1848:	ldr	x2, [x23, #832]
    184c:	sxtw	x5, w5
    1850:	ldr	x0, [x23, x5, lsl #3]
    1854:	tbz	x2, #62, 1864 <execute_stack_op+0x634>
    1858:	add	x5, x23, x5
    185c:	ldrb	w2, [x5, #856]
    1860:	cbnz	w2, 1884 <execute_stack_op+0x654>
    1864:	cmp	w1, #0x2e
    1868:	b.eq	1980 <execute_stack_op+0x750>  // b.none
    186c:	adrp	x2, 0 <read_encoded_value_with_base>
    1870:	add	x2, x2, #0x0
    1874:	ldrb	w1, [x2, w1, sxtw]
    1878:	cmp	w1, #0x8
    187c:	b.ne	128c <execute_stack_op+0x5c>  // b.any
    1880:	ldr	x0, [x0]
    1884:	add	x0, x3, x0
    1888:	mov	w3, w19
    188c:	b	1330 <execute_stack_op+0x100>
    1890:	ldr	w0, [x0]
    1894:	b	1330 <execute_stack_op+0x100>
    1898:	cmp	x0, x1
    189c:	mov	x4, x5
    18a0:	cset	x0, lt  // lt = tstop
    18a4:	b	1330 <execute_stack_op+0x100>
    18a8:	cmp	x0, x1
    18ac:	mov	x4, x5
    18b0:	cset	x0, le
    18b4:	b	1330 <execute_stack_op+0x100>
    18b8:	cmp	x0, x1
    18bc:	mov	x4, x5
    18c0:	cset	x0, gt
    18c4:	b	1330 <execute_stack_op+0x100>
    18c8:	cmp	x0, x1
    18cc:	mov	x4, x5
    18d0:	cset	x0, ge  // ge = tcont
    18d4:	b	1330 <execute_stack_op+0x100>
    18d8:	cmp	x0, x1
    18dc:	mov	x4, x5
    18e0:	cset	x0, eq  // eq = none
    18e4:	b	1330 <execute_stack_op+0x100>
    18e8:	eor	x0, x0, x1
    18ec:	mov	x4, x5
    18f0:	b	1330 <execute_stack_op+0x100>
    18f4:	mov	x4, x5
    18f8:	asr	x0, x0, x1
    18fc:	b	1330 <execute_stack_op+0x100>
    1900:	mov	x4, x5
    1904:	lsr	x0, x0, x1
    1908:	b	1330 <execute_stack_op+0x100>
    190c:	mov	x4, x5
    1910:	lsl	x0, x0, x1
    1914:	b	1330 <execute_stack_op+0x100>
    1918:	add	x0, x0, x1
    191c:	mov	x4, x5
    1920:	b	1330 <execute_stack_op+0x100>
    1924:	cmp	x0, x1
    1928:	mov	x4, x5
    192c:	cset	x0, ne  // ne = any
    1930:	b	1330 <execute_stack_op+0x100>
    1934:	sdiv	x0, x0, x1
    1938:	mov	x4, x5
    193c:	b	1330 <execute_stack_op+0x100>
    1940:	and	x0, x0, x1
    1944:	mov	x4, x5
    1948:	b	1330 <execute_stack_op+0x100>
    194c:	orr	x0, x0, x1
    1950:	mov	x4, x5
    1954:	b	1330 <execute_stack_op+0x100>
    1958:	mul	x0, x0, x1
    195c:	mov	x4, x5
    1960:	b	1330 <execute_stack_op+0x100>
    1964:	udiv	x2, x0, x1
    1968:	mov	x4, x5
    196c:	msub	x0, x2, x1, x0
    1970:	b	1330 <execute_stack_op+0x100>
    1974:	sub	x0, x0, x1
    1978:	mov	x4, x5
    197c:	b	1330 <execute_stack_op+0x100>
    1980:	cntd	x0
    1984:	sxtw	x0, w0
    1988:	add	x0, x3, x0
    198c:	b	1888 <execute_stack_op+0x658>
    1990:	cntd	x0
    1994:	mov	w3, w19
    1998:	sxtw	x0, w0
    199c:	b	1330 <execute_stack_op+0x100>
    19a0:	mvn	x0, x0
    19a4:	mov	x4, x5
    19a8:	b	1330 <execute_stack_op+0x100>
    19ac:	cmp	w1, #0x2
    19b0:	b.ne	128c <execute_stack_op+0x5c>  // b.any
    19b4:	ldrh	w0, [x0]
    19b8:	b	1330 <execute_stack_op+0x100>
    19bc:	cmp	w1, #0x8
    19c0:	b.ne	128c <execute_stack_op+0x5c>  // b.any
    19c4:	ldr	x0, [x0]
    19c8:	b	1330 <execute_stack_op+0x100>
    19cc:	nop

00000000000019d0 <uw_update_context_1>:
    19d0:	sub	sp, sp, #0x440
    19d4:	mov	x2, #0x3c0                 	// #960
    19d8:	stp	x29, x30, [sp]
    19dc:	mov	x29, sp
    19e0:	stp	x27, x28, [sp, #80]
    19e4:	add	x28, sp, #0x80
    19e8:	mov	x27, x0
    19ec:	stp	x19, x20, [sp, #16]
    19f0:	stp	x21, x22, [sp, #32]
    19f4:	stp	x23, x24, [sp, #48]
    19f8:	stp	x25, x26, [sp, #64]
    19fc:	str	x1, [sp, #104]
    1a00:	mov	x1, x0
    1a04:	mov	x0, x28
    1a08:	bl	0 <memcpy>
    1a0c:	ldr	x1, [sp, #960]
    1a10:	tbz	x1, #62, 1a1c <uw_update_context_1+0x4c>
    1a14:	ldrb	w0, [sp, #1015]
    1a18:	cbnz	w0, 1a24 <uw_update_context_1+0x54>
    1a1c:	ldr	x0, [x28, #248]
    1a20:	cbz	x0, 1cf0 <uw_update_context_1+0x320>
    1a24:	ldr	x0, [x27, #832]
    1a28:	tbz	x0, #62, 1a30 <uw_update_context_1+0x60>
    1a2c:	strb	wzr, [x27, #887]
    1a30:	ldr	x0, [sp, #104]
    1a34:	ldr	w0, [x0, #1600]
    1a38:	str	xzr, [x27, #248]
    1a3c:	cmp	w0, #0x1
    1a40:	b.ne	1a90 <uw_update_context_1+0xc0>  // b.any
    1a44:	ldr	x0, [sp, #104]
    1a48:	ldr	x0, [x0, #1584]
    1a4c:	cmp	w0, #0x61
    1a50:	b.gt	1c58 <uw_update_context_1+0x288>
    1a54:	sxtw	x2, w0
    1a58:	ldr	x3, [x28, x2, lsl #3]
    1a5c:	tbnz	x1, #62, 1cd0 <uw_update_context_1+0x300>
    1a60:	cmp	w0, #0x2e
    1a64:	b.eq	1ce4 <uw_update_context_1+0x314>  // b.none
    1a68:	adrp	x0, 0 <read_encoded_value_with_base>
    1a6c:	add	x0, x0, #0x0
    1a70:	ldrb	w0, [x0, x2]
    1a74:	cmp	w0, #0x8
    1a78:	b.ne	1c58 <uw_update_context_1+0x288>  // b.any
    1a7c:	ldr	x3, [x3]
    1a80:	ldr	x0, [sp, #104]
    1a84:	ldr	x0, [x0, #1576]
    1a88:	add	x22, x3, x0
    1a8c:	b	1ad4 <uw_update_context_1+0x104>
    1a90:	cmp	w0, #0x2
    1a94:	b.ne	1c58 <uw_update_context_1+0x288>  // b.any
    1a98:	ldr	x0, [sp, #104]
    1a9c:	mov	x1, #0x0                   	// #0
    1aa0:	mov	w3, #0x0                   	// #0
    1aa4:	ldr	x0, [x0, #1592]
    1aa8:	ldrb	w4, [x0], #1
    1aac:	and	x2, x4, #0x7f
    1ab0:	lsl	x2, x2, x3
    1ab4:	add	w3, w3, #0x7
    1ab8:	orr	x1, x1, x2
    1abc:	tbnz	w4, #7, 1aa8 <uw_update_context_1+0xd8>
    1ac0:	add	x1, x0, x1
    1ac4:	mov	x2, x28
    1ac8:	mov	x3, #0x0                   	// #0
    1acc:	bl	1230 <execute_stack_op>
    1ad0:	mov	x22, x0
    1ad4:	ldr	x25, [sp, #104]
    1ad8:	adrp	x23, 0 <read_encoded_value_with_base>
    1adc:	add	x26, x27, #0x358
    1ae0:	add	x20, x23, #0x0
    1ae4:	add	x21, sp, #0x3d8
    1ae8:	mov	x24, #0x0                   	// #0
    1aec:	mov	w19, #0x1                   	// #1
    1af0:	str	x22, [x27, #784]
    1af4:	nop
    1af8:	ldr	w2, [x25, #8]
    1afc:	cmp	w2, #0x3
    1b00:	b.eq	1ba4 <uw_update_context_1+0x1d4>  // b.none
    1b04:	b.hi	1be8 <uw_update_context_1+0x218>  // b.pmore
    1b08:	cmp	w2, #0x1
    1b0c:	b.eq	1c5c <uw_update_context_1+0x28c>  // b.none
    1b10:	cmp	w2, #0x2
    1b14:	b.ne	1b3c <uw_update_context_1+0x16c>  // b.any
    1b18:	ldr	x0, [x25]
    1b1c:	ldrb	w2, [x21, w0, sxtw]
    1b20:	sxtw	x1, w0
    1b24:	cbnz	w2, 1c74 <uw_update_context_1+0x2a4>
    1b28:	ldr	x2, [x27, #832]
    1b2c:	ldr	x0, [x28, x1, lsl #3]
    1b30:	tbnz	x2, #62, 1be0 <uw_update_context_1+0x210>
    1b34:	nop
    1b38:	str	x0, [x27, x24, lsl #3]
    1b3c:	add	x24, x24, #0x1
    1b40:	add	x25, x25, #0x10
    1b44:	cmp	x24, #0x62
    1b48:	add	x26, x26, #0x1
    1b4c:	b.ne	1af8 <uw_update_context_1+0x128>  // b.any
    1b50:	ldr	x3, [sp, #104]
    1b54:	ldr	x0, [x27, #832]
    1b58:	ldrb	w2, [x3, #1651]
    1b5c:	orr	x1, x0, #0x8000000000000000
    1b60:	and	x0, x0, #0x7fffffffffffffff
    1b64:	cmp	w2, #0x0
    1b68:	csel	x0, x0, x1, eq  // eq = none
    1b6c:	ldp	x29, x30, [sp]
    1b70:	orr	x1, x0, #0x2000000000000000
    1b74:	ldp	x19, x20, [sp, #16]
    1b78:	ldp	x21, x22, [sp, #32]
    1b7c:	ldp	x23, x24, [sp, #48]
    1b80:	ldp	x25, x26, [sp, #64]
    1b84:	str	x0, [x27, #832]
    1b88:	ldr	x2, [x3, #544]
    1b8c:	tst	x2, #0x1
    1b90:	csel	x0, x1, x0, ne  // ne = any
    1b94:	str	x0, [x27, #832]
    1b98:	ldp	x27, x28, [sp, #80]
    1b9c:	add	sp, sp, #0x440
    1ba0:	ret
    1ba4:	ldr	x0, [x25]
    1ba8:	mov	x1, #0x0                   	// #0
    1bac:	mov	w4, #0x0                   	// #0
    1bb0:	ldrb	w5, [x0], #1
    1bb4:	and	x2, x5, #0x7f
    1bb8:	lsl	x2, x2, x4
    1bbc:	add	w4, w4, #0x7
    1bc0:	orr	x1, x1, x2
    1bc4:	tbnz	w5, #7, 1bb0 <uw_update_context_1+0x1e0>
    1bc8:	add	x1, x0, x1
    1bcc:	mov	x3, x22
    1bd0:	mov	x2, x28
    1bd4:	bl	1230 <execute_stack_op>
    1bd8:	ldr	x1, [x27, #832]
    1bdc:	tbz	x1, #62, 1b38 <uw_update_context_1+0x168>
    1be0:	strb	wzr, [x26]
    1be4:	b	1b38 <uw_update_context_1+0x168>
    1be8:	cmp	w2, #0x4
    1bec:	b.eq	1c44 <uw_update_context_1+0x274>  // b.none
    1bf0:	cmp	w2, #0x5
    1bf4:	b.ne	1b3c <uw_update_context_1+0x16c>  // b.any
    1bf8:	ldr	x0, [x25]
    1bfc:	mov	x1, #0x0                   	// #0
    1c00:	mov	w4, #0x0                   	// #0
    1c04:	nop
    1c08:	ldrb	w5, [x0], #1
    1c0c:	and	x2, x5, #0x7f
    1c10:	lsl	x2, x2, x4
    1c14:	add	w4, w4, #0x7
    1c18:	orr	x1, x1, x2
    1c1c:	tbnz	w5, #7, 1c08 <uw_update_context_1+0x238>
    1c20:	add	x1, x0, x1
    1c24:	mov	x3, x22
    1c28:	mov	x2, x28
    1c2c:	bl	1230 <execute_stack_op>
    1c30:	ldrb	w1, [x24, x20]
    1c34:	cmp	w1, #0x8
    1c38:	b.hi	1c58 <uw_update_context_1+0x288>  // b.pmore
    1c3c:	strb	w19, [x26]
    1c40:	b	1b38 <uw_update_context_1+0x168>
    1c44:	ldr	x0, [x25]
    1c48:	ldrb	w1, [x24, x20]
    1c4c:	add	x0, x22, x0
    1c50:	cmp	w1, #0x8
    1c54:	b.ls	1c3c <uw_update_context_1+0x26c>  // b.plast
    1c58:	bl	0 <abort>
    1c5c:	ldr	x1, [x27, #832]
    1c60:	ldr	x0, [x25]
    1c64:	add	x0, x22, x0
    1c68:	tbz	x1, #62, 1b38 <uw_update_context_1+0x168>
    1c6c:	strb	wzr, [x26]
    1c70:	b	1b38 <uw_update_context_1+0x168>
    1c74:	cmp	w0, #0x61
    1c78:	b.gt	1c58 <uw_update_context_1+0x288>
    1c7c:	ldr	x4, [sp, #960]
    1c80:	ldr	x2, [x28, x1, lsl #3]
    1c84:	tbz	x4, #62, 1ca8 <uw_update_context_1+0x2d8>
    1c88:	mov	x0, x2
    1c8c:	nop
    1c90:	add	x1, x23, #0x0
    1c94:	ldrb	w1, [x24, x1]
    1c98:	cmp	w1, #0x8
    1c9c:	b.hi	1c58 <uw_update_context_1+0x288>  // b.pmore
    1ca0:	strb	w19, [x26]
    1ca4:	b	1b38 <uw_update_context_1+0x168>
    1ca8:	cmp	w0, #0x2e
    1cac:	b.eq	1cc4 <uw_update_context_1+0x2f4>  // b.none
    1cb0:	ldrb	w0, [x20, x1]
    1cb4:	cmp	w0, #0x8
    1cb8:	b.ne	1c58 <uw_update_context_1+0x288>  // b.any
    1cbc:	ldr	x0, [x2]
    1cc0:	b	1c90 <uw_update_context_1+0x2c0>
    1cc4:	cntd	x0
    1cc8:	sxtw	x0, w0
    1ccc:	b	1c90 <uw_update_context_1+0x2c0>
    1cd0:	add	x1, sp, #0x3d8
    1cd4:	ldrb	w1, [x1, x2]
    1cd8:	cbnz	w1, 1a80 <uw_update_context_1+0xb0>
    1cdc:	cmp	w0, #0x2e
    1ce0:	b.ne	1a68 <uw_update_context_1+0x98>  // b.any
    1ce4:	cntd	x0
    1ce8:	sxtw	x3, w0
    1cec:	b	1a80 <uw_update_context_1+0xb0>
    1cf0:	adrp	x0, 0 <read_encoded_value_with_base>
    1cf4:	ldr	x2, [x27, #784]
    1cf8:	ldrb	w0, [x0]
    1cfc:	cmp	w0, #0x8
    1d00:	b.ne	1c58 <uw_update_context_1+0x288>  // b.any
    1d04:	str	x2, [sp, #120]
    1d08:	tbz	x1, #62, 1d10 <uw_update_context_1+0x340>
    1d0c:	strb	wzr, [sp, #1015]
    1d10:	add	x0, sp, #0x78
    1d14:	str	x0, [x28, #248]
    1d18:	b	1a24 <uw_update_context_1+0x54>
    1d1c:	nop

0000000000001d20 <uw_init_context_1>:
    1d20:	sub	sp, sp, #0x6d0
    1d24:	stp	x29, x30, [sp]
    1d28:	mov	x29, sp
    1d2c:	xpaclri
    1d30:	stp	x19, x20, [sp, #16]
    1d34:	mov	x19, x0
    1d38:	mov	x20, x30
    1d3c:	stp	x21, x22, [sp, #32]
    1d40:	mov	x22, x1
    1d44:	mov	x21, x2
    1d48:	mov	w1, #0x0                   	// #0
    1d4c:	mov	x2, #0x3c0                 	// #960
    1d50:	str	x23, [sp, #48]
    1d54:	bl	0 <memset>
    1d58:	mov	x0, #0x4000000000000000    	// #4611686018427387904
    1d5c:	str	x20, [x19, #792]
    1d60:	str	x0, [x19, #832]
    1d64:	add	x23, sp, #0x50
    1d68:	mov	x1, x23
    1d6c:	mov	x0, x19
    1d70:	bl	ac0 <uw_frame_state_for>
    1d74:	cbnz	w0, 1f68 <uw_init_context_1+0x248>
    1d78:	adrp	x0, 0 <__pthread_key_create>
    1d7c:	adrp	x20, 0 <read_encoded_value_with_base>
    1d80:	ldr	x0, [x0]
    1d84:	cbz	x0, 1e0c <uw_init_context_1+0xec>
    1d88:	add	x0, x20, #0x0
    1d8c:	adrp	x1, 0 <read_encoded_value_with_base>
    1d90:	add	x0, x0, #0x64
    1d94:	add	x1, x1, #0x0
    1d98:	bl	0 <pthread_once>
    1d9c:	cbnz	w0, 1e0c <uw_init_context_1+0xec>
    1da0:	add	x20, x20, #0x0
    1da4:	ldrb	w0, [x20, #31]
    1da8:	cmp	w0, #0x8
    1dac:	b.ne	1f68 <uw_init_context_1+0x248>  // b.any
    1db0:	ldr	x0, [x19, #832]
    1db4:	str	x22, [sp, #72]
    1db8:	tbz	x0, #62, 1dc0 <uw_init_context_1+0xa0>
    1dbc:	strb	wzr, [x19, #887]
    1dc0:	add	x0, sp, #0x48
    1dc4:	mov	x3, #0x1f                  	// #31
    1dc8:	mov	w2, #0x1                   	// #1
    1dcc:	str	x0, [x19, #248]
    1dd0:	mov	x1, x23
    1dd4:	mov	x0, x19
    1dd8:	str	xzr, [sp, #1656]
    1ddc:	str	x3, [sp, #1664]
    1de0:	str	w2, [sp, #1680]
    1de4:	bl	19d0 <uw_update_context_1>
    1de8:	mov	x30, x21
    1dec:	xpaclri
    1df0:	ldp	x21, x22, [sp, #32]
    1df4:	ldr	x23, [sp, #48]
    1df8:	str	x30, [x19, #792]
    1dfc:	ldp	x29, x30, [sp]
    1e00:	ldp	x19, x20, [sp, #16]
    1e04:	add	sp, sp, #0x6d0
    1e08:	ret
    1e0c:	ldrb	w0, [x20]
    1e10:	add	x3, x20, #0x0
    1e14:	cbnz	w0, 1da0 <uw_init_context_1+0x80>
    1e18:	mov	w4, #0x8                   	// #8
    1e1c:	strb	w4, [x20]
    1e20:	strb	w4, [x3, #1]
    1e24:	strb	w4, [x3, #2]
    1e28:	strb	w4, [x3, #3]
    1e2c:	strb	w4, [x3, #4]
    1e30:	strb	w4, [x3, #5]
    1e34:	strb	w4, [x3, #6]
    1e38:	strb	w4, [x3, #7]
    1e3c:	strb	w4, [x3, #8]
    1e40:	strb	w4, [x3, #9]
    1e44:	strb	w4, [x3, #10]
    1e48:	strb	w4, [x3, #11]
    1e4c:	strb	w4, [x3, #12]
    1e50:	strb	w4, [x3, #13]
    1e54:	strb	w4, [x3, #14]
    1e58:	strb	w4, [x3, #15]
    1e5c:	strb	w4, [x3, #16]
    1e60:	strb	w4, [x3, #17]
    1e64:	strb	w4, [x3, #18]
    1e68:	strb	w4, [x3, #19]
    1e6c:	strb	w4, [x3, #20]
    1e70:	strb	w4, [x3, #21]
    1e74:	strb	w4, [x3, #22]
    1e78:	strb	w4, [x3, #23]
    1e7c:	strb	w4, [x3, #24]
    1e80:	strb	w4, [x3, #25]
    1e84:	strb	w4, [x3, #26]
    1e88:	strb	w4, [x3, #27]
    1e8c:	strb	w4, [x3, #28]
    1e90:	strb	w4, [x3, #29]
    1e94:	strb	w4, [x3, #30]
    1e98:	strb	w4, [x3, #31]
    1e9c:	strb	w4, [x3, #64]
    1ea0:	strb	w4, [x3, #46]
    1ea4:	strb	w4, [x3, #65]
    1ea8:	strb	w4, [x3, #66]
    1eac:	strb	w4, [x3, #67]
    1eb0:	strb	w4, [x3, #68]
    1eb4:	strb	w4, [x3, #69]
    1eb8:	strb	w4, [x3, #70]
    1ebc:	strb	w4, [x3, #71]
    1ec0:	strb	w4, [x3, #72]
    1ec4:	strb	w4, [x3, #73]
    1ec8:	strb	w4, [x3, #74]
    1ecc:	strb	w4, [x3, #75]
    1ed0:	strb	w4, [x3, #76]
    1ed4:	strb	w4, [x3, #77]
    1ed8:	strb	w4, [x3, #78]
    1edc:	strb	w4, [x3, #79]
    1ee0:	strb	w4, [x3, #80]
    1ee4:	strb	w4, [x3, #81]
    1ee8:	strb	w4, [x3, #82]
    1eec:	strb	w4, [x3, #83]
    1ef0:	strb	w4, [x3, #84]
    1ef4:	strb	w4, [x3, #85]
    1ef8:	strb	w4, [x3, #86]
    1efc:	strb	w4, [x3, #87]
    1f00:	strb	w4, [x3, #88]
    1f04:	strb	w4, [x3, #89]
    1f08:	strb	w4, [x3, #90]
    1f0c:	strb	w4, [x3, #91]
    1f10:	strb	w4, [x3, #92]
    1f14:	strb	w4, [x3, #93]
    1f18:	strb	w4, [x3, #94]
    1f1c:	strb	w4, [x3, #95]
    1f20:	strb	w4, [x3, #48]
    1f24:	strb	w4, [x3, #49]
    1f28:	strb	w4, [x3, #50]
    1f2c:	strb	w4, [x3, #51]
    1f30:	strb	w4, [x3, #52]
    1f34:	strb	w4, [x3, #53]
    1f38:	strb	w4, [x3, #54]
    1f3c:	strb	w4, [x3, #55]
    1f40:	strb	w4, [x3, #56]
    1f44:	strb	w4, [x3, #57]
    1f48:	strb	w4, [x3, #58]
    1f4c:	strb	w4, [x3, #59]
    1f50:	strb	w4, [x3, #60]
    1f54:	strb	w4, [x3, #61]
    1f58:	strb	w4, [x3, #62]
    1f5c:	strb	w4, [x3, #63]
    1f60:	strb	w4, [x3, #96]
    1f64:	b	1da0 <uw_init_context_1+0x80>
    1f68:	bl	0 <abort>
    1f6c:	nop

0000000000001f70 <_Unwind_RaiseException_Phase2>:
    1f70:	sub	sp, sp, #0x6d0
    1f74:	stp	x29, x30, [sp]
    1f78:	mov	x29, sp
    1f7c:	stp	x19, x20, [sp, #16]
    1f80:	mov	x19, x1
    1f84:	stp	x21, x22, [sp, #32]
    1f88:	mov	x21, x0
    1f8c:	add	x22, sp, #0x50
    1f90:	stp	x23, x24, [sp, #48]
    1f94:	add	x24, sp, #0x58
    1f98:	mov	x23, #0x1                   	// #1
    1f9c:	stp	x25, x26, [sp, #64]
    1fa0:	adrp	x25, 0 <read_encoded_value_with_base>
    1fa4:	mov	x26, x2
    1fa8:	add	x25, x25, #0x0
    1fac:	nop
    1fb0:	mov	x1, x22
    1fb4:	mov	x0, x19
    1fb8:	bl	ac0 <uw_frame_state_for>
    1fbc:	ldr	x3, [x19, #784]
    1fc0:	ldr	x1, [x19, #832]
    1fc4:	ldr	x2, [x21, #24]
    1fc8:	sub	x1, x3, x1, lsr #63
    1fcc:	cmp	x2, x1
    1fd0:	cset	w20, eq  // eq = none
    1fd4:	lsl	w20, w20, #2
    1fd8:	cbnz	w0, 203c <_Unwind_RaiseException_Phase2+0xcc>
    1fdc:	ldr	x5, [sp, #1696]
    1fe0:	cbz	x5, 200c <_Unwind_RaiseException_Phase2+0x9c>
    1fe4:	ldr	x2, [x21]
    1fe8:	mov	x4, x19
    1fec:	mov	x3, x21
    1ff0:	orr	w1, w20, #0x2
    1ff4:	mov	w0, #0x1                   	// #1
    1ff8:	blr	x5
    1ffc:	cmp	w0, #0x7
    2000:	b.eq	20c4 <_Unwind_RaiseException_Phase2+0x154>  // b.none
    2004:	cmp	w0, #0x8
    2008:	b.ne	203c <_Unwind_RaiseException_Phase2+0xcc>  // b.any
    200c:	cbnz	w20, 20e4 <_Unwind_RaiseException_Phase2+0x174>
    2010:	mov	x1, x22
    2014:	mov	x0, x19
    2018:	bl	19d0 <uw_update_context_1>
    201c:	ldr	x0, [sp, #1720]
    2020:	lsl	x1, x0, #4
    2024:	ldr	w1, [x24, x1]
    2028:	cmp	w1, #0x6
    202c:	b.ne	205c <_Unwind_RaiseException_Phase2+0xec>  // b.any
    2030:	add	x23, x23, #0x1
    2034:	str	xzr, [x19, #792]
    2038:	b	1fb0 <_Unwind_RaiseException_Phase2+0x40>
    203c:	mov	w0, #0x2                   	// #2
    2040:	ldp	x29, x30, [sp]
    2044:	ldp	x19, x20, [sp, #16]
    2048:	ldp	x21, x22, [sp, #32]
    204c:	ldp	x23, x24, [sp, #48]
    2050:	ldp	x25, x26, [sp, #64]
    2054:	add	sp, sp, #0x6d0
    2058:	ret
    205c:	cmp	w0, #0x61
    2060:	b.gt	20e4 <_Unwind_RaiseException_Phase2+0x174>
    2064:	ldr	x2, [x19, #832]
    2068:	sxtw	x1, w0
    206c:	ldr	x17, [x19, x1, lsl #3]
    2070:	tbz	x2, #62, 2080 <_Unwind_RaiseException_Phase2+0x110>
    2074:	add	x2, x19, x1
    2078:	ldrb	w2, [x2, #856]
    207c:	cbnz	w2, 2098 <_Unwind_RaiseException_Phase2+0x128>
    2080:	cmp	w0, #0x2e
    2084:	b.eq	20b8 <_Unwind_RaiseException_Phase2+0x148>  // b.none
    2088:	ldrb	w0, [x25, x1]
    208c:	cmp	w0, #0x8
    2090:	b.ne	20e4 <_Unwind_RaiseException_Phase2+0x174>  // b.any
    2094:	ldr	x17, [x17]
    2098:	str	x17, [x19, #792]
    209c:	ldr	x0, [sp, #624]
    20a0:	tbz	w0, #0, 20ac <_Unwind_RaiseException_Phase2+0x13c>
    20a4:	ldr	x16, [x19, #784]
    20a8:	autia1716
    20ac:	add	x23, x23, #0x1
    20b0:	str	x17, [x19, #792]
    20b4:	b	1fb0 <_Unwind_RaiseException_Phase2+0x40>
    20b8:	cntd	x0
    20bc:	sxtw	x17, w0
    20c0:	b	2098 <_Unwind_RaiseException_Phase2+0x128>
    20c4:	str	x23, [x26]
    20c8:	ldp	x29, x30, [sp]
    20cc:	ldp	x19, x20, [sp, #16]
    20d0:	ldp	x21, x22, [sp, #32]
    20d4:	ldp	x23, x24, [sp, #48]
    20d8:	ldp	x25, x26, [sp, #64]
    20dc:	add	sp, sp, #0x6d0
    20e0:	ret
    20e4:	bl	0 <abort>

00000000000020e8 <_Unwind_ForcedUnwind_Phase2>:
    20e8:	sub	sp, sp, #0x6e0
    20ec:	stp	x29, x30, [sp]
    20f0:	mov	x29, sp
    20f4:	stp	x21, x22, [sp, #32]
    20f8:	add	x21, sp, #0x60
    20fc:	mov	x22, #0x1                   	// #1
    2100:	stp	x27, x28, [sp, #80]
    2104:	mov	x28, x1
    2108:	mov	x27, x2
    210c:	mov	x1, x21
    2110:	stp	x19, x20, [sp, #16]
    2114:	mov	x20, x0
    2118:	stp	x23, x24, [sp, #48]
    211c:	stp	x25, x26, [sp, #64]
    2120:	adrp	x26, 0 <read_encoded_value_with_base>
    2124:	add	x25, sp, #0x68
    2128:	ldp	x23, x24, [x0, #16]
    212c:	mov	x0, x28
    2130:	bl	ac0 <uw_frame_state_for>
    2134:	cmp	w0, #0x0
    2138:	add	x26, x26, #0x0
    213c:	mov	w19, w0
    2140:	ccmp	w0, #0x5, #0x4, ne  // ne = any
    2144:	b.ne	21e8 <_Unwind_ForcedUnwind_Phase2+0x100>  // b.any
    2148:	cmp	w0, #0x5
    214c:	ldr	x2, [x20]
    2150:	b.eq	226c <_Unwind_ForcedUnwind_Phase2+0x184>  // b.none
    2154:	mov	x5, x24
    2158:	mov	x4, x28
    215c:	mov	x3, x20
    2160:	mov	w1, #0xa                   	// #10
    2164:	mov	w0, #0x1                   	// #1
    2168:	blr	x23
    216c:	cbnz	w0, 21e8 <_Unwind_ForcedUnwind_Phase2+0x100>
    2170:	ldr	x5, [sp, #1712]
    2174:	cbz	x5, 21a4 <_Unwind_ForcedUnwind_Phase2+0xbc>
    2178:	ldr	x2, [x20]
    217c:	mov	x4, x28
    2180:	mov	x3, x20
    2184:	mov	w1, #0xa                   	// #10
    2188:	mov	w0, #0x1                   	// #1
    218c:	blr	x5
    2190:	mov	w19, w0
    2194:	cmp	w0, #0x7
    2198:	b.eq	2288 <_Unwind_ForcedUnwind_Phase2+0x1a0>  // b.none
    219c:	cmp	w0, #0x8
    21a0:	b.ne	21e8 <_Unwind_ForcedUnwind_Phase2+0x100>  // b.any
    21a4:	mov	x1, x21
    21a8:	mov	x0, x28
    21ac:	bl	19d0 <uw_update_context_1>
    21b0:	ldr	x0, [sp, #1736]
    21b4:	lsl	x1, x0, #4
    21b8:	ldr	w1, [x25, x1]
    21bc:	cmp	w1, #0x6
    21c0:	b.ne	2210 <_Unwind_ForcedUnwind_Phase2+0x128>  // b.any
    21c4:	add	x22, x22, #0x1
    21c8:	str	xzr, [x28, #792]
    21cc:	mov	x1, x21
    21d0:	mov	x0, x28
    21d4:	bl	ac0 <uw_frame_state_for>
    21d8:	cmp	w0, #0x0
    21dc:	mov	w19, w0
    21e0:	ccmp	w0, #0x5, #0x4, ne  // ne = any
    21e4:	b.eq	2148 <_Unwind_ForcedUnwind_Phase2+0x60>  // b.none
    21e8:	mov	w19, #0x2                   	// #2
    21ec:	mov	w0, w19
    21f0:	ldp	x29, x30, [sp]
    21f4:	ldp	x19, x20, [sp, #16]
    21f8:	ldp	x21, x22, [sp, #32]
    21fc:	ldp	x23, x24, [sp, #48]
    2200:	ldp	x25, x26, [sp, #64]
    2204:	ldp	x27, x28, [sp, #80]
    2208:	add	sp, sp, #0x6e0
    220c:	ret
    2210:	cmp	w0, #0x61
    2214:	b.gt	229c <_Unwind_ForcedUnwind_Phase2+0x1b4>
    2218:	ldr	x2, [x28, #832]
    221c:	sxtw	x1, w0
    2220:	ldr	x17, [x28, x1, lsl #3]
    2224:	tbz	x2, #62, 2234 <_Unwind_ForcedUnwind_Phase2+0x14c>
    2228:	add	x2, x28, x1
    222c:	ldrb	w2, [x2, #856]
    2230:	cbnz	w2, 224c <_Unwind_ForcedUnwind_Phase2+0x164>
    2234:	cmp	w0, #0x2e
    2238:	b.eq	2290 <_Unwind_ForcedUnwind_Phase2+0x1a8>  // b.none
    223c:	ldrb	w0, [x26, x1]
    2240:	cmp	w0, #0x8
    2244:	b.ne	229c <_Unwind_ForcedUnwind_Phase2+0x1b4>  // b.any
    2248:	ldr	x17, [x17]
    224c:	str	x17, [x28, #792]
    2250:	ldr	x0, [sp, #640]
    2254:	tbz	w0, #0, 2260 <_Unwind_ForcedUnwind_Phase2+0x178>
    2258:	ldr	x16, [x28, #784]
    225c:	autia1716
    2260:	add	x22, x22, #0x1
    2264:	str	x17, [x28, #792]
    2268:	b	21cc <_Unwind_ForcedUnwind_Phase2+0xe4>
    226c:	mov	x5, x24
    2270:	mov	x4, x28
    2274:	mov	x3, x20
    2278:	mov	w1, #0x1a                  	// #26
    227c:	mov	w0, #0x1                   	// #1
    2280:	blr	x23
    2284:	cbnz	w0, 21e8 <_Unwind_ForcedUnwind_Phase2+0x100>
    2288:	str	x22, [x27]
    228c:	b	21ec <_Unwind_ForcedUnwind_Phase2+0x104>
    2290:	cntd	x0
    2294:	sxtw	x17, w0
    2298:	b	224c <_Unwind_ForcedUnwind_Phase2+0x164>
    229c:	bl	0 <abort>

00000000000022a0 <_Unwind_GetGR>:
    22a0:	cmp	w1, #0x61
    22a4:	b.gt	22fc <_Unwind_GetGR+0x5c>
    22a8:	ldr	x4, [x0, #832]
    22ac:	sxtw	x3, w1
    22b0:	ldr	x2, [x0, x3, lsl #3]
    22b4:	tbz	x4, #62, 22c4 <_Unwind_GetGR+0x24>
    22b8:	add	x0, x0, x3
    22bc:	ldrb	w0, [x0, #856]
    22c0:	cbnz	w0, 22f4 <_Unwind_GetGR+0x54>
    22c4:	cmp	w1, #0x2e
    22c8:	b.eq	22e8 <_Unwind_GetGR+0x48>  // b.none
    22cc:	adrp	x0, 0 <read_encoded_value_with_base>
    22d0:	add	x0, x0, #0x0
    22d4:	ldrb	w0, [x0, w1, sxtw]
    22d8:	cmp	w0, #0x8
    22dc:	b.ne	22fc <_Unwind_GetGR+0x5c>  // b.any
    22e0:	ldr	x0, [x2]
    22e4:	ret
    22e8:	cntd	x0
    22ec:	sxtw	x0, w0
    22f0:	ret
    22f4:	mov	x0, x2
    22f8:	ret
    22fc:	stp	x29, x30, [sp, #-16]!
    2300:	mov	x29, sp
    2304:	bl	0 <abort>

0000000000002308 <_Unwind_GetCFA>:
    2308:	ldr	x0, [x0, #784]
    230c:	ret

0000000000002310 <_Unwind_SetGR>:
    2310:	cmp	w1, #0x61
    2314:	b.gt	2358 <_Unwind_SetGR+0x48>
    2318:	ldr	x5, [x0, #832]
    231c:	adrp	x3, 0 <read_encoded_value_with_base>
    2320:	add	x3, x3, #0x0
    2324:	sxtw	x4, w1
    2328:	ldrb	w1, [x3, w1, sxtw]
    232c:	tbz	x5, #62, 233c <_Unwind_SetGR+0x2c>
    2330:	add	x3, x0, x4
    2334:	ldrb	w3, [x3, #856]
    2338:	cbnz	w3, 2350 <_Unwind_SetGR+0x40>
    233c:	cmp	w1, #0x8
    2340:	ldr	x0, [x0, x4, lsl #3]
    2344:	b.ne	2358 <_Unwind_SetGR+0x48>  // b.any
    2348:	str	x2, [x0]
    234c:	ret
    2350:	str	x2, [x0, x4, lsl #3]
    2354:	ret
    2358:	stp	x29, x30, [sp, #-16]!
    235c:	mov	x29, sp
    2360:	bl	0 <abort>
    2364:	nop

0000000000002368 <_Unwind_GetIP>:
    2368:	ldr	x0, [x0, #792]
    236c:	ret

0000000000002370 <_Unwind_GetIPInfo>:
    2370:	ldr	x2, [x0, #832]
    2374:	ldr	x0, [x0, #792]
    2378:	lsr	x2, x2, #63
    237c:	str	w2, [x1]
    2380:	ret
    2384:	nop

0000000000002388 <_Unwind_SetIP>:
    2388:	str	x1, [x0, #792]
    238c:	ret

0000000000002390 <_Unwind_GetLanguageSpecificData>:
    2390:	ldr	x0, [x0, #800]
    2394:	ret

0000000000002398 <_Unwind_GetRegionStart>:
    2398:	ldr	x0, [x0, #824]
    239c:	ret

00000000000023a0 <_Unwind_FindEnclosingFunction>:
    23a0:	stp	x29, x30, [sp, #-48]!
    23a4:	sub	x0, x0, #0x1
    23a8:	mov	x29, sp
    23ac:	add	x1, sp, #0x18
    23b0:	bl	0 <_Unwind_Find_FDE>
    23b4:	ldr	x1, [sp, #40]
    23b8:	cmp	x0, #0x0
    23bc:	ldp	x29, x30, [sp], #48
    23c0:	csel	x0, x1, x0, ne  // ne = any
    23c4:	ret

00000000000023c8 <_Unwind_GetDataRelBase>:
    23c8:	ldr	x0, [x0, #816]
    23cc:	ret

00000000000023d0 <_Unwind_GetTextRelBase>:
    23d0:	ldr	x0, [x0, #808]
    23d4:	ret

00000000000023d8 <__frame_state_for>:
    23d8:	sub	sp, sp, #0xa70
    23dc:	mov	x2, #0x3c0                 	// #960
    23e0:	add	x3, sp, #0x30
    23e4:	stp	x29, x30, [sp]
    23e8:	mov	x29, sp
    23ec:	stp	x19, x20, [sp, #16]
    23f0:	mov	x20, x1
    23f4:	mov	w1, #0x0                   	// #0
    23f8:	str	x21, [sp, #32]
    23fc:	mov	x21, x0
    2400:	mov	x0, x3
    2404:	bl	0 <memset>
    2408:	mov	x2, #0x4000000000000000    	// #4611686018427387904
    240c:	add	x19, sp, #0x3f0
    2410:	add	x21, x21, #0x1
    2414:	mov	x1, x19
    2418:	str	x21, [sp, #840]
    241c:	str	x2, [sp, #880]
    2420:	bl	ac0 <uw_frame_state_for>
    2424:	cbnz	w0, 24d0 <__frame_state_for+0xf8>
    2428:	ldr	w0, [sp, #2608]
    242c:	cmp	w0, #0x2
    2430:	b.eq	24d0 <__frame_state_for+0xf8>  // b.none
    2434:	sub	x4, x20, x20, lsl #3
    2438:	mov	x1, #0xffffffffffffe680    	// #-6528
    243c:	mov	x0, x19
    2440:	add	x5, x19, #0x620
    2444:	add	x4, x4, x1
    2448:	add	x2, x20, #0x334
    244c:	b	2464 <__frame_state_for+0x8c>
    2450:	str	xzr, [x4, x2, lsl #3]
    2454:	add	x0, x0, #0x10
    2458:	add	x2, x2, #0x1
    245c:	cmp	x0, x5
    2460:	b.eq	2494 <__frame_state_for+0xbc>  // b.none
    2464:	ldrb	w3, [x0, #8]
    2468:	strb	w3, [x2]
    246c:	cmp	w3, #0x1
    2470:	b.eq	247c <__frame_state_for+0xa4>  // b.none
    2474:	cmp	w3, #0x2
    2478:	b.ne	2450 <__frame_state_for+0x78>  // b.any
    247c:	ldr	x3, [x0]
    2480:	str	x3, [x4, x2, lsl #3]
    2484:	add	x0, x0, #0x10
    2488:	add	x2, x2, #0x1
    248c:	cmp	x0, x5
    2490:	b.ne	2464 <__frame_state_for+0x8c>  // b.any
    2494:	ldr	x1, [sp, #896]
    2498:	mov	x0, x20
    249c:	ldr	x2, [sp, #2584]
    24a0:	stp	x2, x1, [x20, #16]
    24a4:	ldr	x2, [sp, #2592]
    24a8:	strh	w2, [x20, #816]
    24ac:	ldr	x1, [sp, #2648]
    24b0:	strh	w1, [x20, #818]
    24b4:	ldr	x2, [sp, #2664]
    24b8:	str	x2, [x20, #8]
    24bc:	ldp	x29, x30, [sp]
    24c0:	ldp	x19, x20, [sp, #16]
    24c4:	ldr	x21, [sp, #32]
    24c8:	add	sp, sp, #0xa70
    24cc:	ret
    24d0:	mov	x0, #0x0                   	// #0
    24d4:	ldp	x29, x30, [sp]
    24d8:	ldp	x19, x20, [sp, #16]
    24dc:	ldr	x21, [sp, #32]
    24e0:	add	sp, sp, #0xa70
    24e4:	ret

00000000000024e8 <_Unwind_DebugHook>:
    24e8:	ret
    24ec:	nop

00000000000024f0 <_Unwind_RaiseException>:
    24f0:	sub	sp, sp, #0xec0
    24f4:	stp	x29, x30, [sp]
    24f8:	mov	x29, sp
    24fc:	stp	x19, x20, [sp, #48]
    2500:	add	x20, sp, #0x840
    2504:	add	x19, sp, #0x480
    2508:	stp	x21, x22, [sp, #64]
    250c:	add	x22, sp, #0x848
    2510:	mov	x21, x0
    2514:	stp	x23, x24, [sp, #80]
    2518:	adrp	x23, 0 <read_encoded_value_with_base>
    251c:	add	x23, x23, #0x0
    2520:	stp	x25, x26, [sp, #96]
    2524:	add	x25, sp, #0x7d8
    2528:	add	x24, sp, #0xc0
    252c:	stp	x0, x1, [sp, #16]
    2530:	mov	x0, x24
    2534:	add	x1, sp, #0xec0
    2538:	stp	x2, x3, [sp, #32]
    253c:	mov	x2, x30
    2540:	stp	x27, x28, [sp, #112]
    2544:	stp	d8, d9, [sp, #128]
    2548:	stp	d10, d11, [sp, #144]
    254c:	stp	d12, d13, [sp, #160]
    2550:	stp	d14, d15, [sp, #176]
    2554:	bl	1d20 <uw_init_context_1>
    2558:	mov	x1, x24
    255c:	mov	x0, x19
    2560:	mov	x2, #0x3c0                 	// #960
    2564:	bl	0 <memcpy>
    2568:	mov	x1, x20
    256c:	mov	x0, x19
    2570:	bl	ac0 <uw_frame_state_for>
    2574:	cmp	w0, #0x5
    2578:	b.eq	25e8 <_Unwind_RaiseException+0xf8>  // b.none
    257c:	cbnz	w0, 2684 <_Unwind_RaiseException+0x194>
    2580:	ldr	x5, [sp, #3728]
    2584:	cbz	x5, 25b0 <_Unwind_RaiseException+0xc0>
    2588:	ldr	x2, [x21]
    258c:	mov	w1, #0x1                   	// #1
    2590:	mov	x4, x19
    2594:	mov	w0, w1
    2598:	mov	x3, x21
    259c:	blr	x5
    25a0:	cmp	w0, #0x6
    25a4:	b.eq	268c <_Unwind_RaiseException+0x19c>  // b.none
    25a8:	cmp	w0, #0x8
    25ac:	b.ne	2684 <_Unwind_RaiseException+0x194>  // b.any
    25b0:	mov	x1, x20
    25b4:	mov	x0, x19
    25b8:	bl	19d0 <uw_update_context_1>
    25bc:	ldr	x0, [sp, #3752]
    25c0:	lsl	x1, x0, #4
    25c4:	ldr	w1, [x22, x1]
    25c8:	cmp	w1, #0x6
    25cc:	b.ne	2628 <_Unwind_RaiseException+0x138>  // b.any
    25d0:	mov	x1, x20
    25d4:	mov	x0, x19
    25d8:	str	xzr, [sp, #1944]
    25dc:	bl	ac0 <uw_frame_state_for>
    25e0:	cmp	w0, #0x5
    25e4:	b.ne	257c <_Unwind_RaiseException+0x8c>  // b.any
    25e8:	mov	x4, #0x0                   	// #0
    25ec:	ldp	x29, x30, [sp]
    25f0:	ldp	x0, x1, [sp, #16]
    25f4:	ldp	x2, x3, [sp, #32]
    25f8:	ldp	x19, x20, [sp, #48]
    25fc:	ldp	x21, x22, [sp, #64]
    2600:	ldp	x23, x24, [sp, #80]
    2604:	ldp	x25, x26, [sp, #96]
    2608:	ldp	x27, x28, [sp, #112]
    260c:	ldp	d8, d9, [sp, #128]
    2610:	ldp	d10, d11, [sp, #144]
    2614:	ldp	d12, d13, [sp, #160]
    2618:	ldp	d14, d15, [sp, #176]
    261c:	add	sp, sp, #0xec0
    2620:	add	sp, sp, x4
    2624:	ret
    2628:	cmp	w0, #0x61
    262c:	b.gt	2700 <_Unwind_RaiseException+0x210>
    2630:	ldr	x2, [sp, #1984]
    2634:	sxtw	x1, w0
    2638:	ldr	x17, [x19, x1, lsl #3]
    263c:	tbz	x2, #62, 2648 <_Unwind_RaiseException+0x158>
    2640:	ldrb	w2, [x25, x1]
    2644:	cbnz	w2, 2660 <_Unwind_RaiseException+0x170>
    2648:	cmp	w0, #0x2e
    264c:	b.eq	2678 <_Unwind_RaiseException+0x188>  // b.none
    2650:	ldrb	w0, [x23, x1]
    2654:	cmp	w0, #0x8
    2658:	b.ne	2700 <_Unwind_RaiseException+0x210>  // b.any
    265c:	ldr	x17, [x17]
    2660:	ldr	x0, [sp, #2656]
    2664:	tbz	w0, #0, 2670 <_Unwind_RaiseException+0x180>
    2668:	ldr	x16, [sp, #1936]
    266c:	autia1716
    2670:	str	x17, [sp, #1944]
    2674:	b	2568 <_Unwind_RaiseException+0x78>
    2678:	cntd	x0
    267c:	sxtw	x17, w0
    2680:	b	2660 <_Unwind_RaiseException+0x170>
    2684:	mov	w0, #0x3                   	// #3
    2688:	b	25e8 <_Unwind_RaiseException+0xf8>
    268c:	ldr	x4, [sp, #1936]
    2690:	mov	x1, x24
    2694:	ldr	x3, [sp, #1984]
    2698:	mov	x2, #0x3c0                 	// #960
    269c:	mov	x0, x19
    26a0:	sub	x3, x4, x3, lsr #63
    26a4:	stp	xzr, x3, [x21, #16]
    26a8:	bl	0 <memcpy>
    26ac:	mov	x2, x20
    26b0:	mov	x1, x19
    26b4:	mov	x0, x21
    26b8:	bl	1f70 <_Unwind_RaiseException_Phase2>
    26bc:	cmp	w0, #0x7
    26c0:	b.ne	25e8 <_Unwind_RaiseException+0xf8>  // b.any
    26c4:	mov	x1, x19
    26c8:	mov	x0, x24
    26cc:	bl	10d0 <uw_install_context_1>
    26d0:	mov	x4, x0
    26d4:	ldr	x2, [sp, #1024]
    26d8:	ldr	x1, [sp, #1944]
    26dc:	tbz	x2, #61, 26f0 <_Unwind_RaiseException+0x200>
    26e0:	mov	x17, x1
    26e4:	ldr	x16, [sp, #976]
    26e8:	pacia1716
    26ec:	mov	x1, x17
    26f0:	ldr	x0, [sp, #1936]
    26f4:	bl	24e8 <_Unwind_DebugHook>
    26f8:	str	x1, [x29, #8]
    26fc:	b	25ec <_Unwind_RaiseException+0xfc>
    2700:	bl	0 <abort>
    2704:	nop

0000000000002708 <_Unwind_ForcedUnwind>:
    2708:	sub	sp, sp, #0x850
    270c:	stp	x29, x30, [sp]
    2710:	mov	x29, sp
    2714:	stp	x19, x20, [sp, #48]
    2718:	mov	x19, x0
    271c:	mov	x20, x2
    2720:	stp	x21, x22, [sp, #64]
    2724:	add	x22, sp, #0xd0
    2728:	mov	x21, x1
    272c:	stp	x0, x1, [sp, #16]
    2730:	mov	x0, x22
    2734:	add	x1, sp, #0x850
    2738:	stp	x2, x3, [sp, #32]
    273c:	mov	x2, x30
    2740:	stp	x23, x24, [sp, #80]
    2744:	add	x23, sp, #0x490
    2748:	stp	x25, x26, [sp, #96]
    274c:	stp	x27, x28, [sp, #112]
    2750:	stp	d8, d9, [sp, #128]
    2754:	stp	d10, d11, [sp, #144]
    2758:	stp	d12, d13, [sp, #160]
    275c:	stp	d14, d15, [sp, #176]
    2760:	bl	1d20 <uw_init_context_1>
    2764:	mov	x1, x22
    2768:	mov	x2, #0x3c0                 	// #960
    276c:	mov	x0, x23
    2770:	bl	0 <memcpy>
    2774:	stp	x21, x20, [x19, #16]
    2778:	mov	x0, x19
    277c:	mov	x1, x23
    2780:	add	x2, sp, #0xc8
    2784:	bl	20e8 <_Unwind_ForcedUnwind_Phase2>
    2788:	cmp	w0, #0x7
    278c:	mov	x4, #0x0                   	// #0
    2790:	b.eq	27d0 <_Unwind_ForcedUnwind+0xc8>  // b.none
    2794:	ldp	x29, x30, [sp]
    2798:	ldp	x0, x1, [sp, #16]
    279c:	ldp	x2, x3, [sp, #32]
    27a0:	ldp	x19, x20, [sp, #48]
    27a4:	ldp	x21, x22, [sp, #64]
    27a8:	ldp	x23, x24, [sp, #80]
    27ac:	ldp	x25, x26, [sp, #96]
    27b0:	ldp	x27, x28, [sp, #112]
    27b4:	ldp	d8, d9, [sp, #128]
    27b8:	ldp	d10, d11, [sp, #144]
    27bc:	ldp	d12, d13, [sp, #160]
    27c0:	ldp	d14, d15, [sp, #176]
    27c4:	add	sp, sp, #0x850
    27c8:	add	sp, sp, x4
    27cc:	ret
    27d0:	mov	x1, x23
    27d4:	mov	x0, x22
    27d8:	bl	10d0 <uw_install_context_1>
    27dc:	mov	x4, x0
    27e0:	ldr	x2, [sp, #1040]
    27e4:	ldr	x1, [sp, #1960]
    27e8:	tbz	x2, #61, 27fc <_Unwind_ForcedUnwind+0xf4>
    27ec:	mov	x17, x1
    27f0:	ldr	x16, [sp, #992]
    27f4:	pacia1716
    27f8:	mov	x1, x17
    27fc:	ldr	x0, [sp, #1952]
    2800:	bl	24e8 <_Unwind_DebugHook>
    2804:	str	x1, [x29, #8]
    2808:	b	2794 <_Unwind_ForcedUnwind+0x8c>
    280c:	nop

0000000000002810 <_Unwind_Resume>:
    2810:	sub	sp, sp, #0x850
    2814:	stp	x29, x30, [sp]
    2818:	mov	x29, sp
    281c:	stp	x19, x20, [sp, #48]
    2820:	mov	x19, x0
    2824:	add	x20, sp, #0xd0
    2828:	stp	x0, x1, [sp, #16]
    282c:	mov	x0, x20
    2830:	add	x1, sp, #0x850
    2834:	stp	x2, x3, [sp, #32]
    2838:	mov	x2, x30
    283c:	stp	x21, x22, [sp, #64]
    2840:	add	x21, sp, #0x490
    2844:	stp	x23, x24, [sp, #80]
    2848:	stp	x25, x26, [sp, #96]
    284c:	stp	x27, x28, [sp, #112]
    2850:	stp	d8, d9, [sp, #128]
    2854:	stp	d10, d11, [sp, #144]
    2858:	stp	d12, d13, [sp, #160]
    285c:	stp	d14, d15, [sp, #176]
    2860:	bl	1d20 <uw_init_context_1>
    2864:	mov	x1, x20
    2868:	mov	x0, x21
    286c:	mov	x2, #0x3c0                 	// #960
    2870:	bl	0 <memcpy>
    2874:	ldr	x0, [x19, #16]
    2878:	cbnz	x0, 2908 <_Unwind_Resume+0xf8>
    287c:	mov	x0, x19
    2880:	add	x2, sp, #0xc8
    2884:	mov	x1, x21
    2888:	bl	1f70 <_Unwind_RaiseException_Phase2>
    288c:	cmp	w0, #0x7
    2890:	b.ne	291c <_Unwind_Resume+0x10c>  // b.any
    2894:	mov	x1, x21
    2898:	mov	x0, x20
    289c:	bl	10d0 <uw_install_context_1>
    28a0:	mov	x4, x0
    28a4:	ldr	x2, [sp, #1040]
    28a8:	ldr	x1, [sp, #1960]
    28ac:	tbz	x2, #61, 28c0 <_Unwind_Resume+0xb0>
    28b0:	mov	x17, x1
    28b4:	ldr	x16, [sp, #992]
    28b8:	pacia1716
    28bc:	mov	x1, x17
    28c0:	ldr	x0, [sp, #1952]
    28c4:	bl	24e8 <_Unwind_DebugHook>
    28c8:	str	x1, [x29, #8]
    28cc:	ldp	x29, x30, [sp]
    28d0:	ldp	x0, x1, [sp, #16]
    28d4:	ldp	x2, x3, [sp, #32]
    28d8:	ldp	x19, x20, [sp, #48]
    28dc:	ldp	x21, x22, [sp, #64]
    28e0:	ldp	x23, x24, [sp, #80]
    28e4:	ldp	x25, x26, [sp, #96]
    28e8:	ldp	x27, x28, [sp, #112]
    28ec:	ldp	d8, d9, [sp, #128]
    28f0:	ldp	d10, d11, [sp, #144]
    28f4:	ldp	d12, d13, [sp, #160]
    28f8:	ldp	d14, d15, [sp, #176]
    28fc:	add	sp, sp, #0x850
    2900:	add	sp, sp, x4
    2904:	ret
    2908:	mov	x0, x19
    290c:	add	x2, sp, #0xc8
    2910:	mov	x1, x21
    2914:	bl	20e8 <_Unwind_ForcedUnwind_Phase2>
    2918:	b	288c <_Unwind_Resume+0x7c>
    291c:	bl	0 <abort>

0000000000002920 <_Unwind_Resume_or_Rethrow>:
    2920:	sub	sp, sp, #0x850
    2924:	stp	x29, x30, [sp]
    2928:	mov	x29, sp
    292c:	stp	x0, x1, [sp, #16]
    2930:	ldr	x1, [x0, #16]
    2934:	stp	x2, x3, [sp, #32]
    2938:	stp	x19, x20, [sp, #48]
    293c:	mov	x19, x0
    2940:	stp	x21, x22, [sp, #64]
    2944:	stp	x23, x24, [sp, #80]
    2948:	stp	x25, x26, [sp, #96]
    294c:	stp	x27, x28, [sp, #112]
    2950:	stp	d8, d9, [sp, #128]
    2954:	stp	d10, d11, [sp, #144]
    2958:	stp	d12, d13, [sp, #160]
    295c:	stp	d14, d15, [sp, #176]
    2960:	cbnz	x1, 29a8 <_Unwind_Resume_or_Rethrow+0x88>
    2964:	bl	24f0 <_Unwind_RaiseException>
    2968:	mov	x4, #0x0                   	// #0
    296c:	ldp	x29, x30, [sp]
    2970:	ldp	x0, x1, [sp, #16]
    2974:	ldp	x2, x3, [sp, #32]
    2978:	ldp	x19, x20, [sp, #48]
    297c:	ldp	x21, x22, [sp, #64]
    2980:	ldp	x23, x24, [sp, #80]
    2984:	ldp	x25, x26, [sp, #96]
    2988:	ldp	x27, x28, [sp, #112]
    298c:	ldp	d8, d9, [sp, #128]
    2990:	ldp	d10, d11, [sp, #144]
    2994:	ldp	d12, d13, [sp, #160]
    2998:	ldp	d14, d15, [sp, #176]
    299c:	add	sp, sp, #0x850
    29a0:	add	sp, sp, x4
    29a4:	ret
    29a8:	add	x20, sp, #0xd0
    29ac:	mov	x2, x30
    29b0:	mov	x0, x20
    29b4:	add	x1, sp, #0x850
    29b8:	add	x21, sp, #0x490
    29bc:	bl	1d20 <uw_init_context_1>
    29c0:	mov	x1, x20
    29c4:	mov	x2, #0x3c0                 	// #960
    29c8:	mov	x0, x21
    29cc:	bl	0 <memcpy>
    29d0:	mov	x0, x19
    29d4:	mov	x1, x21
    29d8:	add	x2, sp, #0xc8
    29dc:	bl	20e8 <_Unwind_ForcedUnwind_Phase2>
    29e0:	cmp	w0, #0x7
    29e4:	b.ne	2a24 <_Unwind_Resume_or_Rethrow+0x104>  // b.any
    29e8:	mov	x1, x21
    29ec:	mov	x0, x20
    29f0:	bl	10d0 <uw_install_context_1>
    29f4:	mov	x4, x0
    29f8:	ldr	x2, [sp, #1040]
    29fc:	ldr	x1, [sp, #1960]
    2a00:	tbz	x2, #61, 2a14 <_Unwind_Resume_or_Rethrow+0xf4>
    2a04:	mov	x17, x1
    2a08:	ldr	x16, [sp, #992]
    2a0c:	pacia1716
    2a10:	mov	x1, x17
    2a14:	ldr	x0, [sp, #1952]
    2a18:	bl	24e8 <_Unwind_DebugHook>
    2a1c:	str	x1, [x29, #8]
    2a20:	b	296c <_Unwind_Resume_or_Rethrow+0x4c>
    2a24:	bl	0 <abort>

0000000000002a28 <_Unwind_DeleteException>:
    2a28:	ldr	x2, [x0, #8]
    2a2c:	mov	x1, x0
    2a30:	cbz	x2, 2a40 <_Unwind_DeleteException+0x18>
    2a34:	mov	x16, x2
    2a38:	mov	w0, #0x1                   	// #1
    2a3c:	br	x16
    2a40:	ret
    2a44:	nop

0000000000002a48 <_Unwind_Backtrace>:
    2a48:	sub	sp, sp, #0xae0
    2a4c:	mov	x2, x30
    2a50:	stp	x29, x30, [sp]
    2a54:	mov	x29, sp
    2a58:	stp	x21, x22, [sp, #32]
    2a5c:	add	x21, sp, #0x460
    2a60:	mov	x22, x1
    2a64:	stp	x23, x24, [sp, #48]
    2a68:	add	x24, sp, #0x468
    2a6c:	mov	x23, x0
    2a70:	stp	x25, x26, [sp, #64]
    2a74:	adrp	x25, 0 <read_encoded_value_with_base>
    2a78:	add	x26, sp, #0x3f8
    2a7c:	add	x25, x25, #0x0
    2a80:	stp	x19, x20, [sp, #16]
    2a84:	add	x20, sp, #0xa0
    2a88:	mov	x0, x20
    2a8c:	add	x1, sp, #0xae0
    2a90:	stp	x27, x28, [sp, #80]
    2a94:	stp	d8, d9, [sp, #96]
    2a98:	stp	d10, d11, [sp, #112]
    2a9c:	stp	d12, d13, [sp, #128]
    2aa0:	stp	d14, d15, [sp, #144]
    2aa4:	bl	1d20 <uw_init_context_1>
    2aa8:	mov	x1, x21
    2aac:	mov	x0, x20
    2ab0:	bl	ac0 <uw_frame_state_for>
    2ab4:	cmp	w0, #0x0
    2ab8:	mov	w19, w0
    2abc:	ccmp	w0, #0x5, #0x4, ne  // ne = any
    2ac0:	b.ne	2b1c <_Unwind_Backtrace+0xd4>  // b.any
    2ac4:	mov	x1, x22
    2ac8:	mov	x0, x20
    2acc:	blr	x23
    2ad0:	cbnz	w0, 2b1c <_Unwind_Backtrace+0xd4>
    2ad4:	cmp	w19, #0x5
    2ad8:	b.eq	2b20 <_Unwind_Backtrace+0xd8>  // b.none
    2adc:	mov	x1, x21
    2ae0:	mov	x0, x20
    2ae4:	bl	19d0 <uw_update_context_1>
    2ae8:	ldr	x0, [sp, #2760]
    2aec:	lsl	x1, x0, #4
    2af0:	ldr	w1, [x24, x1]
    2af4:	cmp	w1, #0x6
    2af8:	b.ne	2b54 <_Unwind_Backtrace+0x10c>  // b.any
    2afc:	mov	x1, x21
    2b00:	mov	x0, x20
    2b04:	str	xzr, [sp, #952]
    2b08:	bl	ac0 <uw_frame_state_for>
    2b0c:	cmp	w0, #0x0
    2b10:	mov	w19, w0
    2b14:	ccmp	w0, #0x5, #0x4, ne  // ne = any
    2b18:	b.eq	2ac4 <_Unwind_Backtrace+0x7c>  // b.none
    2b1c:	mov	w19, #0x3                   	// #3
    2b20:	mov	w0, w19
    2b24:	ldp	x29, x30, [sp]
    2b28:	ldp	x19, x20, [sp, #16]
    2b2c:	ldp	x21, x22, [sp, #32]
    2b30:	ldp	x23, x24, [sp, #48]
    2b34:	ldp	x25, x26, [sp, #64]
    2b38:	ldp	x27, x28, [sp, #80]
    2b3c:	ldp	d8, d9, [sp, #96]
    2b40:	ldp	d10, d11, [sp, #112]
    2b44:	ldp	d12, d13, [sp, #128]
    2b48:	ldp	d14, d15, [sp, #144]
    2b4c:	add	sp, sp, #0xae0
    2b50:	ret
    2b54:	cmp	w0, #0x61
    2b58:	b.gt	2bb0 <_Unwind_Backtrace+0x168>
    2b5c:	ldr	x2, [sp, #992]
    2b60:	sxtw	x1, w0
    2b64:	ldr	x17, [x20, x1, lsl #3]
    2b68:	tbz	x2, #62, 2b74 <_Unwind_Backtrace+0x12c>
    2b6c:	ldrb	w2, [x26, x1]
    2b70:	cbnz	w2, 2b8c <_Unwind_Backtrace+0x144>
    2b74:	cmp	w0, #0x2e
    2b78:	b.eq	2ba4 <_Unwind_Backtrace+0x15c>  // b.none
    2b7c:	ldrb	w0, [x25, x1]
    2b80:	cmp	w0, #0x8
    2b84:	b.ne	2bb0 <_Unwind_Backtrace+0x168>  // b.any
    2b88:	ldr	x17, [x17]
    2b8c:	ldr	x0, [sp, #1664]
    2b90:	tbz	w0, #0, 2b9c <_Unwind_Backtrace+0x154>
    2b94:	ldr	x16, [sp, #944]
    2b98:	autia1716
    2b9c:	str	x17, [sp, #952]
    2ba0:	b	2aa8 <_Unwind_Backtrace+0x60>
    2ba4:	cntd	x0
    2ba8:	sxtw	x17, w0
    2bac:	b	2b8c <_Unwind_Backtrace+0x144>
    2bb0:	bl	0 <abort>

unwind-dw2-fde-dip.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fde_unencoded_compare>:
       0:	ldr	x3, [x1, #8]
       4:	mov	w4, #0x1                   	// #1
       8:	ldr	x1, [x2, #8]
       c:	cmp	x3, x1
      10:	csetm	w0, cc  // cc = lo, ul, last
      14:	csel	w0, w0, w4, ls  // ls = plast
      18:	ret
      1c:	nop

0000000000000020 <read_encoded_value_with_base>:
      20:	and	w5, w0, #0xff
      24:	cmp	w5, #0x50
      28:	b.eq	140 <read_encoded_value_with_base+0x120>  // b.none
      2c:	and	w4, w5, #0xf
      30:	cmp	w4, #0x4
      34:	b.eq	50 <read_encoded_value_with_base+0x30>  // b.none
      38:	b.ls	64 <read_encoded_value_with_base+0x44>  // b.plast
      3c:	cmp	w4, #0xb
      40:	b.eq	164 <read_encoded_value_with_base+0x144>  // b.none
      44:	b.ls	c0 <read_encoded_value_with_base+0xa0>  // b.plast
      48:	cmp	w4, #0xc
      4c:	b.ne	174 <read_encoded_value_with_base+0x154>  // b.any
      50:	mov	x0, x2
      54:	ldr	x4, [x0], #8
      58:	cbnz	x4, 120 <read_encoded_value_with_base+0x100>
      5c:	str	x4, [x3]
      60:	ret
      64:	cmp	w4, #0x2
      68:	b.eq	154 <read_encoded_value_with_base+0x134>  // b.none
      6c:	b.ls	88 <read_encoded_value_with_base+0x68>  // b.plast
      70:	cmp	w4, #0x3
      74:	b.ne	174 <read_encoded_value_with_base+0x154>  // b.any
      78:	mov	x0, x2
      7c:	ldr	w4, [x0], #4
      80:	cbz	x4, 5c <read_encoded_value_with_base+0x3c>
      84:	b	120 <read_encoded_value_with_base+0x100>
      88:	cbz	w4, 50 <read_encoded_value_with_base+0x30>
      8c:	cmp	w4, #0x1
      90:	b.ne	174 <read_encoded_value_with_base+0x154>  // b.any
      94:	mov	x0, x2
      98:	mov	x4, #0x0                   	// #0
      9c:	mov	w7, #0x0                   	// #0
      a0:	ldrb	w8, [x0], #1
      a4:	and	x6, x8, #0x7f
      a8:	lsl	x6, x6, x7
      ac:	add	w7, w7, #0x7
      b0:	orr	x4, x4, x6
      b4:	tbnz	w8, #7, a0 <read_encoded_value_with_base+0x80>
      b8:	cbz	x4, 5c <read_encoded_value_with_base+0x3c>
      bc:	b	120 <read_encoded_value_with_base+0x100>
      c0:	cmp	w4, #0x9
      c4:	b.eq	e0 <read_encoded_value_with_base+0xc0>  // b.none
      c8:	cmp	w4, #0xa
      cc:	b.ne	174 <read_encoded_value_with_base+0x154>  // b.any
      d0:	mov	x0, x2
      d4:	ldrsh	x4, [x0], #2
      d8:	cbz	x4, 5c <read_encoded_value_with_base+0x3c>
      dc:	b	120 <read_encoded_value_with_base+0x100>
      e0:	mov	x0, x2
      e4:	mov	x4, #0x0                   	// #0
      e8:	mov	w7, #0x0                   	// #0
      ec:	ldrb	w8, [x0], #1
      f0:	and	x6, x8, #0x7f
      f4:	lsl	x6, x6, x7
      f8:	add	w7, w7, #0x7
      fc:	orr	x4, x4, x6
     100:	tbnz	w8, #7, ec <read_encoded_value_with_base+0xcc>
     104:	cmp	w7, #0x3f
     108:	b.hi	58 <read_encoded_value_with_base+0x38>  // b.pmore
     10c:	tbz	w8, #6, 58 <read_encoded_value_with_base+0x38>
     110:	mov	x6, #0xffffffffffffffff    	// #-1
     114:	lsl	x7, x6, x7
     118:	orr	x4, x4, x7
     11c:	nop
     120:	and	w6, w5, #0x70
     124:	cmp	w6, #0x10
     128:	csel	x1, x2, x1, eq  // eq = none
     12c:	add	x4, x4, x1
     130:	tbz	w5, #7, 5c <read_encoded_value_with_base+0x3c>
     134:	ldr	x4, [x4]
     138:	str	x4, [x3]
     13c:	ret
     140:	add	x0, x2, #0x7
     144:	and	x0, x0, #0xfffffffffffffff8
     148:	ldr	x4, [x0], #8
     14c:	str	x4, [x3]
     150:	ret
     154:	mov	x0, x2
     158:	ldrh	w4, [x0], #2
     15c:	cbz	x4, 5c <read_encoded_value_with_base+0x3c>
     160:	b	120 <read_encoded_value_with_base+0x100>
     164:	mov	x0, x2
     168:	ldrsw	x4, [x0], #4
     16c:	cbz	x4, 5c <read_encoded_value_with_base+0x3c>
     170:	b	120 <read_encoded_value_with_base+0x100>
     174:	stp	x29, x30, [sp, #-16]!
     178:	mov	x29, sp
     17c:	bl	0 <abort>

0000000000000180 <get_cie_encoding>:
     180:	stp	x29, x30, [sp, #-48]!
     184:	mov	x29, sp
     188:	stp	x19, x20, [sp, #16]
     18c:	mov	x20, x0
     190:	add	x19, x0, #0x9
     194:	mov	x0, x19
     198:	bl	0 <strlen>
     19c:	ldrb	w3, [x20, #8]
     1a0:	add	x0, x0, #0x1
     1a4:	add	x2, x19, x0
     1a8:	cmp	w3, #0x3
     1ac:	b.hi	278 <get_cie_encoding+0xf8>  // b.pmore
     1b0:	ldrb	w0, [x20, #9]
     1b4:	cmp	w0, #0x7a
     1b8:	b.eq	1cc <get_cie_encoding+0x4c>  // b.none
     1bc:	mov	w0, #0x0                   	// #0
     1c0:	ldp	x19, x20, [sp, #16]
     1c4:	ldp	x29, x30, [sp], #48
     1c8:	ret
     1cc:	ldrsb	w1, [x2], #1
     1d0:	tbnz	w1, #31, 1cc <get_cie_encoding+0x4c>
     1d4:	nop
     1d8:	mov	x0, x2
     1dc:	ldrsb	w1, [x2], #1
     1e0:	tbnz	w1, #31, 1d8 <get_cie_encoding+0x58>
     1e4:	cmp	w3, #0x1
     1e8:	b.eq	270 <get_cie_encoding+0xf0>  // b.none
     1ec:	nop
     1f0:	ldrsb	w0, [x2], #1
     1f4:	tbnz	w0, #31, 1f0 <get_cie_encoding+0x70>
     1f8:	add	x19, x20, #0xa
     1fc:	nop
     200:	ldrsb	w1, [x2], #1
     204:	tbnz	w1, #31, 200 <get_cie_encoding+0x80>
     208:	ldrb	w0, [x20, #10]
     20c:	add	x20, sp, #0x28
     210:	cmp	w0, #0x52
     214:	b.ne	234 <get_cie_encoding+0xb4>  // b.any
     218:	b	260 <get_cie_encoding+0xe0>
     21c:	add	x2, x2, #0x1
     220:	cmp	w0, #0x4c
     224:	b.ne	1bc <get_cie_encoding+0x3c>  // b.any
     228:	ldrb	w0, [x19, #1]!
     22c:	cmp	w0, #0x52
     230:	b.eq	260 <get_cie_encoding+0xe0>  // b.none
     234:	cmp	w0, #0x50
     238:	b.ne	21c <get_cie_encoding+0x9c>  // b.any
     23c:	ldrb	w0, [x2], #1
     240:	mov	x3, x20
     244:	mov	x1, #0x0                   	// #0
     248:	and	w0, w0, #0x7f
     24c:	bl	20 <read_encoded_value_with_base>
     250:	mov	x2, x0
     254:	ldrb	w0, [x19, #1]!
     258:	cmp	w0, #0x52
     25c:	b.ne	234 <get_cie_encoding+0xb4>  // b.any
     260:	ldrb	w0, [x2]
     264:	ldp	x19, x20, [sp, #16]
     268:	ldp	x29, x30, [sp], #48
     26c:	ret
     270:	add	x2, x0, #0x2
     274:	b	1f8 <get_cie_encoding+0x78>
     278:	ldrb	w1, [x19, x0]
     27c:	mov	w0, #0xff                  	// #255
     280:	cmp	w1, #0x8
     284:	b.ne	1c0 <get_cie_encoding+0x40>  // b.any
     288:	ldrb	w1, [x2, #1]
     28c:	cbnz	w1, 1c0 <get_cie_encoding+0x40>
     290:	add	x2, x2, #0x2
     294:	b	1b0 <get_cie_encoding+0x30>

0000000000000298 <frame_heapsort>:
     298:	stp	x29, x30, [sp, #-144]!
     29c:	mov	x29, sp
     2a0:	stp	x21, x22, [sp, #32]
     2a4:	mov	x22, x0
     2a8:	ldr	x0, [x2, #8]
     2ac:	stp	x23, x24, [sp, #48]
     2b0:	mov	x23, x1
     2b4:	stp	x19, x20, [sp, #16]
     2b8:	add	x19, x2, #0x10
     2bc:	lsr	x24, x0, #1
     2c0:	sub	w24, w24, #0x1
     2c4:	stp	x25, x26, [sp, #64]
     2c8:	mov	x25, x2
     2cc:	stp	x27, x28, [sp, #80]
     2d0:	lsl	w26, w24, #1
     2d4:	mov	w27, w0
     2d8:	str	x0, [sp, #136]
     2dc:	add	w26, w26, #0x1
     2e0:	tbnz	w24, #31, 3b8 <frame_heapsort+0x120>
     2e4:	nop
     2e8:	cmp	w26, w27
     2ec:	mov	w21, w26
     2f0:	mov	w28, w24
     2f4:	b.lt	34c <frame_heapsort+0xb4>  // b.tstop
     2f8:	b	3a8 <frame_heapsort+0x110>
     2fc:	ldr	x6, [sp, #112]
     300:	ldr	x1, [x19, x6, lsl #3]
     304:	sxtw	x4, w28
     308:	mov	x2, x1
     30c:	str	x4, [sp, #104]
     310:	mov	x0, x22
     314:	mov	w28, w21
     318:	ldr	x1, [x19, x4, lsl #3]
     31c:	blr	x23
     320:	lsl	w3, w21, #1
     324:	tbz	w0, #31, 3a8 <frame_heapsort+0x110>
     328:	ldr	x4, [sp, #104]
     32c:	add	w0, w3, #0x1
     330:	ldr	x2, [x20]
     334:	mov	w21, w0
     338:	ldr	x1, [x19, x4, lsl #3]
     33c:	str	x2, [x19, x4, lsl #3]
     340:	str	x1, [x20]
     344:	cmp	w0, w27
     348:	b.ge	3a8 <frame_heapsort+0x110>  // b.tcont
     34c:	sbfiz	x20, x21, #3, #32
     350:	sxtw	x6, w21
     354:	add	x4, x20, #0x8
     358:	add	w5, w21, #0x1
     35c:	add	x7, x19, x4
     360:	stp	x6, x7, [sp, #112]
     364:	cmp	w5, w27
     368:	str	w5, [sp, #132]
     36c:	add	x20, x19, x20
     370:	mov	x0, x22
     374:	ldr	x1, [x19, x6, lsl #3]
     378:	b.ge	304 <frame_heapsort+0x6c>  // b.tcont
     37c:	ldr	x2, [x19, x4]
     380:	str	x4, [sp, #104]
     384:	blr	x23
     388:	ldr	w5, [sp, #132]
     38c:	ldr	x4, [sp, #104]
     390:	ldr	x7, [sp, #120]
     394:	tbz	w0, #31, 2fc <frame_heapsort+0x64>
     398:	mov	x20, x7
     39c:	mov	w21, w5
     3a0:	ldr	x1, [x19, x4]
     3a4:	b	304 <frame_heapsort+0x6c>
     3a8:	sub	w24, w24, #0x1
     3ac:	sub	w26, w26, #0x2
     3b0:	cmn	w24, #0x1
     3b4:	b.ne	2e8 <frame_heapsort+0x50>  // b.any
     3b8:	ldr	w0, [sp, #136]
     3bc:	sub	w21, w0, #0x1
     3c0:	cmp	w21, #0x0
     3c4:	b.le	4dc <frame_heapsort+0x244>
     3c8:	sxtw	x21, w21
     3cc:	ldr	x0, [x25, #16]
     3d0:	cmp	w21, #0x1
     3d4:	ldr	x1, [x19, x21, lsl #3]
     3d8:	str	x1, [x25, #16]
     3dc:	str	x0, [x19, x21, lsl #3]
     3e0:	mov	w26, w21
     3e4:	b.le	4d0 <frame_heapsort+0x238>
     3e8:	mov	w27, #0x0                   	// #0
     3ec:	mov	w24, #0x1                   	// #1
     3f0:	b	43c <frame_heapsort+0x1a4>
     3f4:	ldr	x4, [sp, #104]
     3f8:	ldr	x1, [x19, x4, lsl #3]
     3fc:	sxtw	x28, w27
     400:	mov	x2, x1
     404:	mov	w27, w24
     408:	mov	x0, x22
     40c:	lsl	w24, w24, #1
     410:	ldr	x1, [x19, x28, lsl #3]
     414:	blr	x23
     418:	tbz	w0, #31, 4b0 <frame_heapsort+0x218>
     41c:	ldr	x2, [x20]
     420:	add	w0, w24, #0x1
     424:	ldr	x1, [x19, x28, lsl #3]
     428:	str	x2, [x19, x28, lsl #3]
     42c:	str	x1, [x20]
     430:	mov	w24, w0
     434:	cmp	w0, w26
     438:	b.ge	4b0 <frame_heapsort+0x218>  // b.tcont
     43c:	sbfiz	x20, x24, #3, #32
     440:	sxtw	x4, w24
     444:	add	x28, x20, #0x8
     448:	add	w3, w24, #0x1
     44c:	add	x5, x19, x28
     450:	stp	x4, x5, [sp, #104]
     454:	cmp	w3, w26
     458:	str	w3, [sp, #120]
     45c:	add	x20, x19, x20
     460:	mov	x0, x22
     464:	ldr	x1, [x19, x4, lsl #3]
     468:	b.ge	3fc <frame_heapsort+0x164>  // b.tcont
     46c:	ldr	x2, [x19, x28]
     470:	blr	x23
     474:	ldr	w3, [sp, #120]
     478:	ldr	x5, [sp, #112]
     47c:	tbz	w0, #31, 3f4 <frame_heapsort+0x15c>
     480:	ldr	x1, [x19, x28]
     484:	sxtw	x28, w27
     488:	mov	w24, w3
     48c:	mov	x20, x5
     490:	mov	x2, x1
     494:	mov	w27, w24
     498:	ldr	x1, [x19, x28, lsl #3]
     49c:	mov	x0, x22
     4a0:	lsl	w24, w24, #1
     4a4:	blr	x23
     4a8:	tbnz	w0, #31, 41c <frame_heapsort+0x184>
     4ac:	nop
     4b0:	sub	x21, x21, #0x1
     4b4:	ldr	x0, [x25, #16]
     4b8:	cmp	w21, #0x1
     4bc:	ldr	x1, [x19, x21, lsl #3]
     4c0:	str	x1, [x25, #16]
     4c4:	str	x0, [x19, x21, lsl #3]
     4c8:	mov	w26, w21
     4cc:	b.gt	3e8 <frame_heapsort+0x150>
     4d0:	sub	w0, w21, #0x1
     4d4:	cmp	w0, #0x0
     4d8:	b.gt	4b0 <frame_heapsort+0x218>
     4dc:	ldp	x19, x20, [sp, #16]
     4e0:	ldp	x21, x22, [sp, #32]
     4e4:	ldp	x23, x24, [sp, #48]
     4e8:	ldp	x25, x26, [sp, #64]
     4ec:	ldp	x27, x28, [sp, #80]
     4f0:	ldp	x29, x30, [sp], #144
     4f4:	ret

00000000000004f8 <add_fdes>:
     4f8:	stp	x29, x30, [sp, #-112]!
     4fc:	mov	x29, sp
     500:	stp	x19, x20, [sp, #16]
     504:	mov	x19, x2
     508:	ldrh	w20, [x0, #32]
     50c:	stp	x21, x22, [sp, #32]
     510:	mov	x22, x1
     514:	stp	x23, x24, [sp, #48]
     518:	ubfx	x20, x20, #3, #8
     51c:	cmp	w20, #0xff
     520:	stp	x25, x26, [sp, #64]
     524:	mov	x25, x0
     528:	str	x27, [sp, #80]
     52c:	b.eq	6e8 <add_fdes+0x1f0>  // b.none
     530:	and	w0, w20, #0x70
     534:	cmp	w0, #0x20
     538:	b.eq	734 <add_fdes+0x23c>  // b.none
     53c:	b.ls	6e0 <add_fdes+0x1e8>  // b.plast
     540:	cmp	w0, #0x30
     544:	b.ne	6d0 <add_fdes+0x1d8>  // b.any
     548:	ldr	x27, [x25, #16]
     54c:	nop
     550:	add	x23, sp, #0x68
     554:	ldr	w3, [x19]
     558:	mov	x26, #0x0                   	// #0
     55c:	cbz	w3, 600 <add_fdes+0x108>
     560:	ldr	w2, [x19, #4]
     564:	cbz	w2, 5ec <add_fdes+0xf4>
     568:	ldrb	w1, [x25, #32]
     56c:	tbz	w1, #2, 61c <add_fdes+0x124>
     570:	add	x21, x19, #0x4
     574:	sub	x21, x21, w2, sxtw
     578:	cmp	x21, x26
     57c:	b.eq	61c <add_fdes+0x124>  // b.none
     580:	mov	x0, x21
     584:	bl	180 <get_cie_encoding>
     588:	mov	w20, w0
     58c:	and	w0, w0, #0xff
     590:	cmp	w0, #0xff
     594:	mov	w24, w0
     598:	b.eq	710 <add_fdes+0x218>  // b.none
     59c:	and	w1, w0, #0x70
     5a0:	cmp	w1, #0x20
     5a4:	b.eq	6f0 <add_fdes+0x1f8>  // b.none
     5a8:	b.ls	6c4 <add_fdes+0x1cc>  // b.plast
     5ac:	cmp	w1, #0x30
     5b0:	b.ne	688 <add_fdes+0x190>  // b.any
     5b4:	mov	x26, x21
     5b8:	ldr	x27, [x25, #16]
     5bc:	cbnz	w20, 6fc <add_fdes+0x204>
     5c0:	ldr	x0, [x19, #8]
     5c4:	mov	w20, #0x0                   	// #0
     5c8:	ldr	w3, [x19]
     5cc:	cbz	x0, 5ec <add_fdes+0xf4>
     5d0:	ldr	x1, [x22]
     5d4:	cbz	x1, 5ec <add_fdes+0xf4>
     5d8:	ldr	x2, [x1, #8]
     5dc:	add	x0, x2, #0x2
     5e0:	add	x2, x2, #0x1
     5e4:	str	x2, [x1, #8]
     5e8:	str	x19, [x1, x0, lsl #3]
     5ec:	mov	w3, w3
     5f0:	add	x3, x3, #0x4
     5f4:	add	x19, x19, x3
     5f8:	ldr	w3, [x19]
     5fc:	cbnz	w3, 560 <add_fdes+0x68>
     600:	ldp	x19, x20, [sp, #16]
     604:	ldp	x21, x22, [sp, #32]
     608:	ldp	x23, x24, [sp, #48]
     60c:	ldp	x25, x26, [sp, #64]
     610:	ldr	x27, [sp, #80]
     614:	ldp	x29, x30, [sp], #112
     618:	ret
     61c:	cbz	w20, 5c0 <add_fdes+0xc8>
     620:	and	w24, w20, #0xff
     624:	mov	x3, x23
     628:	mov	w0, w24
     62c:	add	x2, x19, #0x8
     630:	mov	x1, x27
     634:	bl	20 <read_encoded_value_with_base>
     638:	cmp	w24, #0xff
     63c:	b.eq	72c <add_fdes+0x234>  // b.none
     640:	and	w1, w24, #0x7
     644:	cmp	w1, #0x2
     648:	b.eq	6bc <add_fdes+0x1c4>  // b.none
     64c:	b.ls	670 <add_fdes+0x178>  // b.plast
     650:	cmp	w1, #0x3
     654:	mov	x0, #0xffffffff            	// #4294967295
     658:	b.ne	67c <add_fdes+0x184>  // b.any
     65c:	ldr	x1, [sp, #104]
     660:	ldr	w3, [x19]
     664:	tst	x0, x1
     668:	b.ne	5d0 <add_fdes+0xd8>  // b.any
     66c:	b	5ec <add_fdes+0xf4>
     670:	cbnz	w1, 684 <add_fdes+0x18c>
     674:	mov	x0, #0xffffffffffffffff    	// #-1
     678:	b	65c <add_fdes+0x164>
     67c:	cmp	w1, #0x4
     680:	b.eq	674 <add_fdes+0x17c>  // b.none
     684:	bl	0 <abort>
     688:	cmp	w1, #0x50
     68c:	b.ne	684 <add_fdes+0x18c>  // b.any
     690:	mov	x26, x21
     694:	mov	x27, #0x0                   	// #0
     698:	cbz	w20, 5c0 <add_fdes+0xc8>
     69c:	mov	w24, w0
     6a0:	mov	x1, #0x0                   	// #0
     6a4:	mov	x3, x23
     6a8:	add	x2, x19, #0x8
     6ac:	bl	20 <read_encoded_value_with_base>
     6b0:	and	w1, w24, #0x7
     6b4:	cmp	w1, #0x2
     6b8:	b.ne	64c <add_fdes+0x154>  // b.any
     6bc:	mov	x0, #0xffff                	// #65535
     6c0:	b	65c <add_fdes+0x164>
     6c4:	tst	w0, #0x60
     6c8:	b.eq	690 <add_fdes+0x198>  // b.none
     6cc:	bl	0 <abort>
     6d0:	cmp	w0, #0x50
     6d4:	mov	x27, #0x0                   	// #0
     6d8:	b.eq	550 <add_fdes+0x58>  // b.none
     6dc:	bl	0 <abort>
     6e0:	tst	w20, #0x60
     6e4:	b.ne	684 <add_fdes+0x18c>  // b.any
     6e8:	mov	x27, #0x0                   	// #0
     6ec:	b	550 <add_fdes+0x58>
     6f0:	mov	x26, x21
     6f4:	ldr	x27, [x25, #8]
     6f8:	cbz	w20, 5c0 <add_fdes+0xc8>
     6fc:	mov	x3, x23
     700:	add	x2, x19, #0x8
     704:	mov	x1, x27
     708:	bl	20 <read_encoded_value_with_base>
     70c:	b	640 <add_fdes+0x148>
     710:	mov	x26, x21
     714:	mov	x3, x23
     718:	add	x2, x19, #0x8
     71c:	mov	x1, #0x0                   	// #0
     720:	mov	w0, #0xffffffff            	// #-1
     724:	mov	x27, #0x0                   	// #0
     728:	bl	20 <read_encoded_value_with_base>
     72c:	mov	x0, #0x0                   	// #0
     730:	b	65c <add_fdes+0x164>
     734:	ldr	x27, [x25, #8]
     738:	b	550 <add_fdes+0x58>
     73c:	nop

0000000000000740 <linear_search_fdes>:
     740:	stp	x29, x30, [sp, #-112]!
     744:	mov	x29, sp
     748:	stp	x19, x20, [sp, #16]
     74c:	mov	x19, x1
     750:	ldrh	w20, [x0, #32]
     754:	stp	x21, x22, [sp, #32]
     758:	mov	x21, x2
     75c:	stp	x27, x28, [sp, #80]
     760:	ubfx	x20, x20, #3, #8
     764:	mov	x28, x0
     768:	cmp	w20, #0xff
     76c:	b.eq	948 <linear_search_fdes+0x208>  // b.none
     770:	and	w0, w20, #0x70
     774:	cmp	w0, #0x20
     778:	b.eq	9cc <linear_search_fdes+0x28c>  // b.none
     77c:	b.ls	934 <linear_search_fdes+0x1f4>  // b.plast
     780:	cmp	w0, #0x30
     784:	b.ne	920 <linear_search_fdes+0x1e0>  // b.any
     788:	ldr	x27, [x28, #16]
     78c:	stp	x25, x26, [sp, #64]
     790:	ldr	w3, [x19]
     794:	mov	x26, #0x0                   	// #0
     798:	cbz	w3, 840 <linear_search_fdes+0x100>
     79c:	add	x22, sp, #0x68
     7a0:	stp	x23, x24, [sp, #48]
     7a4:	add	x23, sp, #0x60
     7a8:	ldr	w1, [x19, #4]
     7ac:	cbz	w1, 828 <linear_search_fdes+0xe8>
     7b0:	ldrb	w2, [x28, #32]
     7b4:	tbz	w2, #2, 86c <linear_search_fdes+0x12c>
     7b8:	add	x25, x19, #0x4
     7bc:	sub	x25, x25, w1, sxtw
     7c0:	cmp	x25, x26
     7c4:	b.eq	86c <linear_search_fdes+0x12c>  // b.none
     7c8:	mov	x0, x25
     7cc:	bl	180 <get_cie_encoding>
     7d0:	and	w24, w0, #0xff
     7d4:	mov	w20, w0
     7d8:	cmp	w24, #0xff
     7dc:	b.eq	994 <linear_search_fdes+0x254>  // b.none
     7e0:	and	w1, w24, #0x70
     7e4:	cmp	w1, #0x20
     7e8:	b.eq	95c <linear_search_fdes+0x21c>  // b.none
     7ec:	b.ls	914 <linear_search_fdes+0x1d4>  // b.plast
     7f0:	cmp	w1, #0x30
     7f4:	b.ne	85c <linear_search_fdes+0x11c>  // b.any
     7f8:	mov	x26, x25
     7fc:	ldr	x27, [x28, #16]
     800:	cbnz	w20, 968 <linear_search_fdes+0x228>
     804:	nop
     808:	ldp	x1, x2, [x19, #8]
     80c:	stp	x1, x2, [sp, #96]
     810:	mov	w20, #0x0                   	// #0
     814:	cbz	x1, 824 <linear_search_fdes+0xe4>
     818:	sub	x1, x21, x1
     81c:	cmp	x1, x2
     820:	b.cc	8dc <linear_search_fdes+0x19c>  // b.lo, b.ul, b.last
     824:	ldr	w3, [x19]
     828:	mov	w3, w3
     82c:	add	x3, x3, #0x4
     830:	add	x19, x19, x3
     834:	ldr	w3, [x19]
     838:	cbnz	w3, 7a8 <linear_search_fdes+0x68>
     83c:	ldp	x23, x24, [sp, #48]
     840:	mov	x0, #0x0                   	// #0
     844:	ldp	x19, x20, [sp, #16]
     848:	ldp	x21, x22, [sp, #32]
     84c:	ldp	x25, x26, [sp, #64]
     850:	ldp	x27, x28, [sp, #80]
     854:	ldp	x29, x30, [sp], #112
     858:	ret
     85c:	cmp	w1, #0x50
     860:	b.ne	910 <linear_search_fdes+0x1d0>  // b.any
     864:	mov	x26, x25
     868:	mov	x27, #0x0                   	// #0
     86c:	cbz	w20, 808 <linear_search_fdes+0xc8>
     870:	and	w24, w20, #0xff
     874:	mov	x3, x23
     878:	add	x2, x19, #0x8
     87c:	mov	x1, x27
     880:	mov	w0, w24
     884:	bl	20 <read_encoded_value_with_base>
     888:	mov	x3, x22
     88c:	mov	x2, x0
     890:	mov	x1, #0x0                   	// #0
     894:	and	w0, w24, #0xf
     898:	bl	20 <read_encoded_value_with_base>
     89c:	cmp	w24, #0xff
     8a0:	b.eq	9c4 <linear_search_fdes+0x284>  // b.none
     8a4:	and	w24, w24, #0x7
     8a8:	cmp	w24, #0x2
     8ac:	b.eq	954 <linear_search_fdes+0x214>  // b.none
     8b0:	b.ls	8fc <linear_search_fdes+0x1bc>  // b.plast
     8b4:	cmp	w24, #0x3
     8b8:	mov	x2, #0xffffffff            	// #4294967295
     8bc:	b.ne	908 <linear_search_fdes+0x1c8>  // b.any
     8c0:	ldr	x1, [sp, #96]
     8c4:	tst	x1, x2
     8c8:	b.eq	824 <linear_search_fdes+0xe4>  // b.none
     8cc:	ldr	x2, [sp, #104]
     8d0:	sub	x1, x21, x1
     8d4:	cmp	x1, x2
     8d8:	b.cs	824 <linear_search_fdes+0xe4>  // b.hs, b.nlast
     8dc:	mov	x0, x19
     8e0:	ldp	x19, x20, [sp, #16]
     8e4:	ldp	x21, x22, [sp, #32]
     8e8:	ldp	x23, x24, [sp, #48]
     8ec:	ldp	x25, x26, [sp, #64]
     8f0:	ldp	x27, x28, [sp, #80]
     8f4:	ldp	x29, x30, [sp], #112
     8f8:	ret
     8fc:	cbnz	w24, 910 <linear_search_fdes+0x1d0>
     900:	mov	x2, #0xffffffffffffffff    	// #-1
     904:	b	8c0 <linear_search_fdes+0x180>
     908:	cmp	w24, #0x4
     90c:	b.eq	900 <linear_search_fdes+0x1c0>  // b.none
     910:	bl	0 <abort>
     914:	tst	w24, #0x60
     918:	b.eq	864 <linear_search_fdes+0x124>  // b.none
     91c:	bl	0 <abort>
     920:	cmp	w0, #0x50
     924:	mov	x27, #0x0                   	// #0
     928:	b.ne	93c <linear_search_fdes+0x1fc>  // b.any
     92c:	stp	x25, x26, [sp, #64]
     930:	b	790 <linear_search_fdes+0x50>
     934:	tst	w20, #0x60
     938:	b.eq	948 <linear_search_fdes+0x208>  // b.none
     93c:	stp	x23, x24, [sp, #48]
     940:	stp	x25, x26, [sp, #64]
     944:	bl	0 <abort>
     948:	mov	x27, #0x0                   	// #0
     94c:	stp	x25, x26, [sp, #64]
     950:	b	790 <linear_search_fdes+0x50>
     954:	mov	x2, #0xffff                	// #65535
     958:	b	8c0 <linear_search_fdes+0x180>
     95c:	mov	x26, x25
     960:	ldr	x27, [x28, #8]
     964:	cbz	w20, 808 <linear_search_fdes+0xc8>
     968:	mov	x3, x23
     96c:	add	x2, x19, #0x8
     970:	mov	x1, x27
     974:	mov	w0, w24
     978:	bl	20 <read_encoded_value_with_base>
     97c:	mov	x2, x0
     980:	mov	x3, x22
     984:	and	w0, w24, #0xf
     988:	mov	x1, #0x0                   	// #0
     98c:	bl	20 <read_encoded_value_with_base>
     990:	b	8a4 <linear_search_fdes+0x164>
     994:	mov	x3, x23
     998:	add	x2, x19, #0x8
     99c:	mov	x1, #0x0                   	// #0
     9a0:	mov	w0, #0xffffffff            	// #-1
     9a4:	bl	20 <read_encoded_value_with_base>
     9a8:	mov	x26, x25
     9ac:	mov	x2, x0
     9b0:	mov	x3, x22
     9b4:	mov	x1, #0x0                   	// #0
     9b8:	mov	w0, #0xf                   	// #15
     9bc:	mov	x27, #0x0                   	// #0
     9c0:	bl	20 <read_encoded_value_with_base>
     9c4:	mov	x2, #0x0                   	// #0
     9c8:	b	8c0 <linear_search_fdes+0x180>
     9cc:	stp	x25, x26, [sp, #64]
     9d0:	ldr	x27, [x28, #8]
     9d4:	b	790 <linear_search_fdes+0x50>

00000000000009d8 <classify_object_over_fdes>:
     9d8:	stp	x29, x30, [sp, #-64]!
     9dc:	mov	x29, sp
     9e0:	ldr	w2, [x1]
     9e4:	str	x23, [sp, #48]
     9e8:	cbz	w2, cc4 <classify_object_over_fdes+0x2ec>
     9ec:	stp	x19, x20, [sp, #16]
     9f0:	mov	x19, x1
     9f4:	mov	x6, #0x0                   	// #0
     9f8:	mov	x23, #0x0                   	// #0
     9fc:	mov	x3, #0x0                   	// #0
     a00:	mov	x20, #0x1                   	// #1
     a04:	stp	x21, x22, [sp, #32]
     a08:	mov	x22, x0
     a0c:	mov	w0, #0x0                   	// #0
     a10:	ldr	w1, [x19, #4]
     a14:	cbz	w1, af8 <classify_object_over_fdes+0x120>
     a18:	add	x21, x19, #0x4
     a1c:	and	w2, w0, #0xff
     a20:	sub	x21, x21, w1, sxtw
     a24:	cmp	x21, x3
     a28:	b.eq	a90 <classify_object_over_fdes+0xb8>  // b.none
     a2c:	mov	x0, x21
     a30:	bl	180 <get_cie_encoding>
     a34:	cmp	w0, #0xff
     a38:	b.eq	cbc <classify_object_over_fdes+0x2e4>  // b.none
     a3c:	and	w2, w0, #0xff
     a40:	cmp	w2, #0xff
     a44:	b.eq	b2c <classify_object_over_fdes+0x154>  // b.none
     a48:	and	w1, w2, #0x70
     a4c:	cmp	w1, #0x20
     a50:	b.eq	ca4 <classify_object_over_fdes+0x2cc>  // b.none
     a54:	b.ls	c7c <classify_object_over_fdes+0x2a4>  // b.plast
     a58:	cmp	w1, #0x30
     a5c:	b.ne	b24 <classify_object_over_fdes+0x14c>  // b.any
     a60:	ldr	x6, [x22, #16]
     a64:	ldrh	w3, [x22, #32]
     a68:	and	w1, w3, #0x7f8
     a6c:	cmp	w1, #0x7f8
     a70:	b.eq	b40 <classify_object_over_fdes+0x168>  // b.none
     a74:	nop
     a78:	ubfx	x3, x3, #3, #8
     a7c:	cmp	w3, w0
     a80:	b.eq	a90 <classify_object_over_fdes+0xb8>  // b.none
     a84:	ldrb	w1, [x22, #32]
     a88:	orr	w1, w1, #0x4
     a8c:	strb	w1, [x22, #32]
     a90:	cmp	w2, #0x50
     a94:	add	x8, x19, #0x8
     a98:	b.eq	b54 <classify_object_over_fdes+0x17c>  // b.none
     a9c:	and	w1, w2, #0xf
     aa0:	cmp	w1, #0x4
     aa4:	b.eq	b88 <classify_object_over_fdes+0x1b0>  // b.none
     aa8:	b.hi	b74 <classify_object_over_fdes+0x19c>  // b.pmore
     aac:	cmp	w1, #0x2
     ab0:	b.eq	cb4 <classify_object_over_fdes+0x2dc>  // b.none
     ab4:	b.ls	c48 <classify_object_over_fdes+0x270>  // b.plast
     ab8:	cmp	w1, #0x3
     abc:	b.ne	c84 <classify_object_over_fdes+0x2ac>  // b.any
     ac0:	ldr	w1, [x19, #8]
     ac4:	nop
     ac8:	cbz	x1, b90 <classify_object_over_fdes+0x1b8>
     acc:	and	w3, w2, #0x70
     ad0:	sxtb	w4, w0
     ad4:	cmp	w3, #0x10
     ad8:	b.eq	c28 <classify_object_over_fdes+0x250>  // b.none
     adc:	add	x1, x1, x6
     ae0:	tbnz	w4, #31, c30 <classify_object_over_fdes+0x258>
     ae4:	cmp	w2, #0xff
     ae8:	b.ne	b90 <classify_object_over_fdes+0x1b8>  // b.any
     aec:	ldr	w2, [x19]
     af0:	mov	x3, x21
     af4:	nop
     af8:	mov	w2, w2
     afc:	add	x2, x2, #0x4
     b00:	add	x19, x19, x2
     b04:	ldr	w2, [x19]
     b08:	cbnz	w2, a10 <classify_object_over_fdes+0x38>
     b0c:	ldp	x19, x20, [sp, #16]
     b10:	ldp	x21, x22, [sp, #32]
     b14:	mov	x0, x23
     b18:	ldr	x23, [sp, #48]
     b1c:	ldp	x29, x30, [sp], #64
     b20:	ret
     b24:	cmp	w1, #0x50
     b28:	b.ne	c84 <classify_object_over_fdes+0x2ac>  // b.any
     b2c:	ldrh	w3, [x22, #32]
     b30:	mov	x6, #0x0                   	// #0
     b34:	and	w1, w3, #0x7f8
     b38:	cmp	w1, #0x7f8
     b3c:	b.ne	a78 <classify_object_over_fdes+0xa0>  // b.any
     b40:	bfi	w3, w2, #3, #8
     b44:	strh	w3, [x22, #32]
     b48:	cmp	w2, #0x50
     b4c:	add	x8, x19, #0x8
     b50:	b.ne	a9c <classify_object_over_fdes+0xc4>  // b.any
     b54:	add	x1, x19, #0xf
     b58:	ldr	w2, [x19]
     b5c:	and	x1, x1, #0xfffffffffffffff8
     b60:	ldr	x1, [x1]
     b64:	mov	x3, x1
     b68:	cbnz	x3, bb8 <classify_object_over_fdes+0x1e0>
     b6c:	mov	x3, x21
     b70:	b	af8 <classify_object_over_fdes+0x120>
     b74:	cmp	w1, #0xb
     b78:	b.eq	cac <classify_object_over_fdes+0x2d4>  // b.none
     b7c:	b.ls	bd4 <classify_object_over_fdes+0x1fc>  // b.plast
     b80:	cmp	w1, #0xc
     b84:	b.ne	c84 <classify_object_over_fdes+0x2ac>  // b.any
     b88:	ldr	x1, [x19, #8]
     b8c:	cbnz	x1, acc <classify_object_over_fdes+0xf4>
     b90:	and	w2, w2, #0x7
     b94:	and	x3, x1, #0xffff
     b98:	cmp	w2, #0x2
     b9c:	b.eq	bb0 <classify_object_over_fdes+0x1d8>  // b.none
     ba0:	b.ls	c98 <classify_object_over_fdes+0x2c0>  // b.plast
     ba4:	cmp	w2, #0x3
     ba8:	and	x3, x1, #0xffffffff
     bac:	b.ne	c88 <classify_object_over_fdes+0x2b0>  // b.any
     bb0:	ldr	w2, [x19]
     bb4:	cbz	x3, b6c <classify_object_over_fdes+0x194>
     bb8:	ldr	x4, [x22]
     bbc:	add	x23, x23, #0x1
     bc0:	mov	x3, x21
     bc4:	cmp	x4, x1
     bc8:	b.ls	af8 <classify_object_over_fdes+0x120>  // b.plast
     bcc:	str	x1, [x22]
     bd0:	b	af8 <classify_object_over_fdes+0x120>
     bd4:	cmp	w1, #0x9
     bd8:	b.ne	c38 <classify_object_over_fdes+0x260>  // b.any
     bdc:	mov	x7, x8
     be0:	mov	x1, #0x0                   	// #0
     be4:	mov	w4, #0x0                   	// #0
     be8:	ldrb	w5, [x7], #1
     bec:	and	x3, x5, #0x7f
     bf0:	lsl	x3, x3, x4
     bf4:	add	w4, w4, #0x7
     bf8:	orr	x1, x1, x3
     bfc:	tbnz	w5, #7, be8 <classify_object_over_fdes+0x210>
     c00:	cmp	w4, #0x3f
     c04:	b.hi	ac8 <classify_object_over_fdes+0xf0>  // b.pmore
     c08:	tbz	w5, #6, ac8 <classify_object_over_fdes+0xf0>
     c0c:	lsl	x3, x20, x4
     c10:	neg	x3, x3
     c14:	orr	x1, x1, x3
     c18:	and	w3, w2, #0x70
     c1c:	sxtb	w4, w0
     c20:	cmp	w3, #0x10
     c24:	b.ne	adc <classify_object_over_fdes+0x104>  // b.any
     c28:	add	x1, x8, x1
     c2c:	tbz	w4, #31, b90 <classify_object_over_fdes+0x1b8>
     c30:	ldr	x1, [x1]
     c34:	b	ae4 <classify_object_over_fdes+0x10c>
     c38:	cmp	w1, #0xa
     c3c:	b.ne	c84 <classify_object_over_fdes+0x2ac>  // b.any
     c40:	ldrsh	x1, [x19, #8]
     c44:	b	ac8 <classify_object_over_fdes+0xf0>
     c48:	cbz	w1, b88 <classify_object_over_fdes+0x1b0>
     c4c:	cmp	w1, #0x1
     c50:	b.ne	c84 <classify_object_over_fdes+0x2ac>  // b.any
     c54:	mov	x7, x8
     c58:	mov	x1, #0x0                   	// #0
     c5c:	mov	w4, #0x0                   	// #0
     c60:	ldrb	w5, [x7], #1
     c64:	and	x3, x5, #0x7f
     c68:	lsl	x3, x3, x4
     c6c:	add	w4, w4, #0x7
     c70:	orr	x1, x1, x3
     c74:	tbnz	w5, #7, c60 <classify_object_over_fdes+0x288>
     c78:	b	ac8 <classify_object_over_fdes+0xf0>
     c7c:	tst	w2, #0x60
     c80:	b.eq	b2c <classify_object_over_fdes+0x154>  // b.none
     c84:	bl	0 <abort>
     c88:	cmp	w2, #0x4
     c8c:	b.ne	c84 <classify_object_over_fdes+0x2ac>  // b.any
     c90:	mov	x3, x1
     c94:	b	bb0 <classify_object_over_fdes+0x1d8>
     c98:	cbnz	w2, c84 <classify_object_over_fdes+0x2ac>
     c9c:	mov	x3, x1
     ca0:	b	bb0 <classify_object_over_fdes+0x1d8>
     ca4:	ldr	x6, [x22, #8]
     ca8:	b	a64 <classify_object_over_fdes+0x8c>
     cac:	ldrsw	x1, [x19, #8]
     cb0:	b	ac8 <classify_object_over_fdes+0xf0>
     cb4:	ldrh	w1, [x19, #8]
     cb8:	b	ac8 <classify_object_over_fdes+0xf0>
     cbc:	mov	x23, #0xffffffffffffffff    	// #-1
     cc0:	b	b0c <classify_object_over_fdes+0x134>
     cc4:	mov	x23, #0x0                   	// #0
     cc8:	b	b14 <classify_object_over_fdes+0x13c>
     ccc:	nop

0000000000000cd0 <search_object>:
     cd0:	stp	x29, x30, [sp, #-160]!
     cd4:	mov	x29, sp
     cd8:	stp	x19, x20, [sp, #16]
     cdc:	mov	x20, x1
     ce0:	ldrb	w1, [x0, #32]
     ce4:	stp	x21, x22, [sp, #32]
     ce8:	mov	x19, x0
     cec:	tbz	w1, #0, d58 <search_object+0x88>
     cf0:	stp	x27, x28, [sp, #80]
     cf4:	ldr	x28, [x19, #24]
     cf8:	tbnz	w1, #2, dc8 <search_object+0xf8>
     cfc:	ldrh	w22, [x19, #32]
     d00:	tst	w22, #0x7f8
     d04:	b.ne	f4c <search_object+0x27c>  // b.any
     d08:	mov	x2, #0x0                   	// #0
     d0c:	ldr	x1, [x28, #8]
     d10:	b	d34 <search_object+0x64>
     d14:	add	x0, x1, x2
     d18:	lsr	x0, x0, #1
     d1c:	add	x3, x0, #0x2
     d20:	ldr	x21, [x28, x3, lsl #3]
     d24:	ldr	x3, [x21, #8]
     d28:	cmp	x20, x3
     d2c:	b.cs	db0 <search_object+0xe0>  // b.hs, b.nlast
     d30:	mov	x1, x0
     d34:	cmp	x1, x2
     d38:	b.hi	d14 <search_object+0x44>  // b.pmore
     d3c:	ldp	x27, x28, [sp, #80]
     d40:	mov	x21, #0x0                   	// #0
     d44:	mov	x0, x21
     d48:	ldp	x19, x20, [sp, #16]
     d4c:	ldp	x21, x22, [sp, #32]
     d50:	ldp	x29, x30, [sp], #160
     d54:	ret
     d58:	stp	x25, x26, [sp, #64]
     d5c:	ldr	w26, [x0, #32]
     d60:	tst	x26, #0xfffff800
     d64:	lsr	w26, w26, #11
     d68:	b.ne	1004 <search_object+0x334>  // b.any
     d6c:	ldr	x21, [x0, #24]
     d70:	tbz	w1, #1, e88 <search_object+0x1b8>
     d74:	ldr	x1, [x21]
     d78:	cbnz	x1, d8c <search_object+0xbc>
     d7c:	b	eb4 <search_object+0x1e4>
     d80:	ldr	x1, [x21, #8]!
     d84:	add	x26, x26, x0
     d88:	cbz	x1, e9c <search_object+0x1cc>
     d8c:	mov	x0, x19
     d90:	bl	9d8 <classify_object_over_fdes>
     d94:	cmn	x0, #0x1
     d98:	b.ne	d80 <search_object+0xb0>  // b.any
     d9c:	adrp	x0, 0 <fde_unencoded_compare>
     da0:	mov	x1, #0x7f8                 	// #2040
     da4:	add	x0, x0, #0x0
     da8:	stp	x0, x1, [x19, #24]
     dac:	b	eb4 <search_object+0x1e4>
     db0:	ldr	x2, [x21, #16]
     db4:	add	x3, x3, x2
     db8:	cmp	x20, x3
     dbc:	b.cc	1304 <search_object+0x634>  // b.lo, b.ul, b.last
     dc0:	add	x2, x0, #0x1
     dc4:	b	d34 <search_object+0x64>
     dc8:	stp	x23, x24, [sp, #48]
     dcc:	ldr	x24, [x28, #8]
     dd0:	cbz	x24, 1370 <search_object+0x6a0>
     dd4:	add	x27, sp, #0x88
     dd8:	stp	x25, x26, [sp, #64]
     ddc:	add	x26, sp, #0x90
     de0:	mov	x25, #0x0                   	// #0
     de4:	b	e04 <search_object+0x134>
     de8:	ldr	x1, [sp, #144]
     dec:	add	x0, x0, x1
     df0:	cmp	x20, x0
     df4:	b.cc	12fc <search_object+0x62c>  // b.lo, b.ul, b.last
     df8:	add	x25, x23, #0x1
     dfc:	cmp	x25, x24
     e00:	b.cs	f3c <search_object+0x26c>  // b.hs, b.nlast
     e04:	add	x23, x24, x25
     e08:	lsr	x23, x23, #1
     e0c:	add	x0, x23, #0x2
     e10:	ldr	x21, [x28, x0, lsl #3]
     e14:	add	x1, x21, #0x4
     e18:	ldrsw	x0, [x21, #4]
     e1c:	sub	x0, x1, x0
     e20:	bl	180 <get_cie_encoding>
     e24:	and	w22, w0, #0xff
     e28:	cmp	w22, #0xff
     e2c:	b.eq	f18 <search_object+0x248>  // b.none
     e30:	and	w0, w22, #0x70
     e34:	cmp	w0, #0x20
     e38:	b.eq	f2c <search_object+0x25c>  // b.none
     e3c:	b.ls	f20 <search_object+0x250>  // b.plast
     e40:	cmp	w0, #0x30
     e44:	b.ne	f10 <search_object+0x240>  // b.any
     e48:	ldr	x1, [x19, #16]
     e4c:	nop
     e50:	mov	x3, x27
     e54:	add	x2, x21, #0x8
     e58:	mov	w0, w22
     e5c:	bl	20 <read_encoded_value_with_base>
     e60:	mov	x2, x0
     e64:	mov	x3, x26
     e68:	and	w0, w22, #0xf
     e6c:	mov	x1, #0x0                   	// #0
     e70:	bl	20 <read_encoded_value_with_base>
     e74:	ldr	x0, [sp, #136]
     e78:	cmp	x20, x0
     e7c:	b.cs	de8 <search_object+0x118>  // b.hs, b.nlast
     e80:	mov	x24, x23
     e84:	b	dfc <search_object+0x12c>
     e88:	mov	x1, x21
     e8c:	bl	9d8 <classify_object_over_fdes>
     e90:	mov	x26, x0
     e94:	cmn	x0, #0x1
     e98:	b.eq	d9c <search_object+0xcc>  // b.none
     e9c:	ldr	w0, [x19, #32]
     ea0:	tst	x26, #0xffffffffffe00000
     ea4:	b.eq	133c <search_object+0x66c>  // b.none
     ea8:	and	w0, w0, #0x7ff
     eac:	str	w0, [x19, #32]
     eb0:	cbnz	x26, 1004 <search_object+0x334>
     eb4:	ldr	x0, [x19]
     eb8:	cmp	x0, x20
     ebc:	b.hi	f34 <search_object+0x264>  // b.pmore
     ec0:	ldrb	w1, [x19, #32]
     ec4:	ldr	x22, [x19, #24]
     ec8:	tbnz	w1, #0, 1384 <search_object+0x6b4>
     ecc:	tbz	w1, #1, 12e0 <search_object+0x610>
     ed0:	ldr	x1, [x22]
     ed4:	cbnz	x1, ee4 <search_object+0x214>
     ed8:	b	f34 <search_object+0x264>
     edc:	ldr	x1, [x22, #8]!
     ee0:	cbz	x1, f34 <search_object+0x264>
     ee4:	mov	x2, x20
     ee8:	mov	x0, x19
     eec:	bl	740 <linear_search_fdes>
     ef0:	mov	x21, x0
     ef4:	cbz	x0, edc <search_object+0x20c>
     ef8:	mov	x0, x21
     efc:	ldp	x19, x20, [sp, #16]
     f00:	ldp	x21, x22, [sp, #32]
     f04:	ldp	x25, x26, [sp, #64]
     f08:	ldp	x29, x30, [sp], #160
     f0c:	ret
     f10:	cmp	w0, #0x50
     f14:	b.ne	f28 <search_object+0x258>  // b.any
     f18:	mov	x1, #0x0                   	// #0
     f1c:	b	e50 <search_object+0x180>
     f20:	tst	w22, #0x60
     f24:	b.eq	f18 <search_object+0x248>  // b.none
     f28:	bl	0 <abort>
     f2c:	ldr	x1, [x19, #8]
     f30:	b	e50 <search_object+0x180>
     f34:	ldp	x25, x26, [sp, #64]
     f38:	b	d40 <search_object+0x70>
     f3c:	ldp	x23, x24, [sp, #48]
     f40:	ldp	x25, x26, [sp, #64]
     f44:	ldp	x27, x28, [sp, #80]
     f48:	b	d40 <search_object+0x70>
     f4c:	stp	x23, x24, [sp, #48]
     f50:	ubfx	x22, x22, #3, #8
     f54:	cmp	w22, #0xff
     f58:	b.eq	12d8 <search_object+0x608>  // b.none
     f5c:	and	w0, w22, #0x70
     f60:	cmp	w0, #0x20
     f64:	b.eq	1348 <search_object+0x678>  // b.none
     f68:	b.ls	12d0 <search_object+0x600>  // b.plast
     f6c:	cmp	w0, #0x30
     f70:	b.ne	12bc <search_object+0x5ec>  // b.any
     f74:	ldr	x24, [x19, #16]
     f78:	ldr	x27, [x28, #8]
     f7c:	cbz	x27, 1370 <search_object+0x6a0>
     f80:	and	w0, w22, #0xf
     f84:	add	x23, sp, #0x90
     f88:	stp	x25, x26, [sp, #64]
     f8c:	add	x25, sp, #0x88
     f90:	mov	x26, #0x0                   	// #0
     f94:	str	w0, [sp, #96]
     f98:	b	fb8 <search_object+0x2e8>
     f9c:	ldr	x1, [sp, #144]
     fa0:	add	x0, x0, x1
     fa4:	cmp	x0, x20
     fa8:	b.hi	12fc <search_object+0x62c>  // b.pmore
     fac:	add	x26, x19, #0x1
     fb0:	cmp	x26, x27
     fb4:	b.cs	f3c <search_object+0x26c>  // b.hs, b.nlast
     fb8:	add	x19, x27, x26
     fbc:	mov	x3, x25
     fc0:	mov	x1, x24
     fc4:	mov	w0, w22
     fc8:	lsr	x19, x19, #1
     fcc:	add	x2, x19, #0x2
     fd0:	ldr	x21, [x28, x2, lsl #3]
     fd4:	add	x2, x21, #0x8
     fd8:	bl	20 <read_encoded_value_with_base>
     fdc:	mov	x2, x0
     fe0:	ldrb	w0, [sp, #96]
     fe4:	mov	x3, x23
     fe8:	mov	x1, #0x0                   	// #0
     fec:	bl	20 <read_encoded_value_with_base>
     ff0:	ldr	x0, [sp, #136]
     ff4:	cmp	x0, x20
     ff8:	b.ls	f9c <search_object+0x2cc>  // b.plast
     ffc:	mov	x27, x19
    1000:	b	fb0 <search_object+0x2e0>
    1004:	add	x21, x26, #0x2
    1008:	lsl	x21, x21, #3
    100c:	mov	x0, x21
    1010:	bl	0 <malloc>
    1014:	str	x0, [sp, #144]
    1018:	mov	x1, x0
    101c:	cbz	x0, eb4 <search_object+0x1e4>
    1020:	stp	x23, x24, [sp, #48]
    1024:	mov	x0, x21
    1028:	str	xzr, [x1, #8]
    102c:	bl	0 <malloc>
    1030:	str	x0, [sp, #152]
    1034:	cbz	x0, 103c <search_object+0x36c>
    1038:	str	xzr, [x0, #8]
    103c:	ldrb	w0, [x19, #32]
    1040:	ldr	x21, [x19, #24]
    1044:	tbz	w0, #1, 1318 <search_object+0x648>
    1048:	ldr	x2, [x21]
    104c:	cbz	x2, 137c <search_object+0x6ac>
    1050:	add	x23, sp, #0x90
    1054:	nop
    1058:	mov	x1, x23
    105c:	mov	x0, x19
    1060:	bl	4f8 <add_fdes>
    1064:	ldr	x2, [x21, #8]!
    1068:	cbnz	x2, 1058 <search_object+0x388>
    106c:	ldr	x2, [sp, #144]
    1070:	str	x2, [sp, #112]
    1074:	cbz	x2, 1084 <search_object+0x3b4>
    1078:	ldr	x0, [x2, #8]
    107c:	cmp	x26, x0
    1080:	b.ne	137c <search_object+0x6ac>  // b.any
    1084:	ldrb	w0, [x19, #32]
    1088:	tbnz	w0, #2, 130c <search_object+0x63c>
    108c:	ldrh	w1, [x19, #32]
    1090:	adrp	x0, 0 <fde_unencoded_compare>
    1094:	adrp	x21, 0 <fde_unencoded_compare>
    1098:	add	x0, x0, #0x0
    109c:	tst	w1, #0x7f8
    10a0:	add	x21, x21, #0x0
    10a4:	csel	x21, x21, x0, eq  // eq = none
    10a8:	ldr	x24, [sp, #152]
    10ac:	str	x24, [sp, #120]
    10b0:	cbz	x24, 132c <search_object+0x65c>
    10b4:	ldr	x0, [x2, #8]
    10b8:	stp	x27, x28, [sp, #80]
    10bc:	str	x0, [sp, #96]
    10c0:	cbz	x0, 11a8 <search_object+0x4d8>
    10c4:	adrp	x23, 0 <fde_unencoded_compare>
    10c8:	add	x23, x23, #0x0
    10cc:	str	x23, [x24, #16]
    10d0:	cmp	x0, #0x1
    10d4:	add	x25, x2, #0x10
    10d8:	b.ls	1148 <search_object+0x478>  // b.plast
    10dc:	add	x0, x0, #0x2
    10e0:	mov	x22, x25
    10e4:	mov	x27, #0x18                  	// #24
    10e8:	lsl	x0, x0, #3
    10ec:	str	x0, [sp, #104]
    10f0:	cmp	x22, x23
    10f4:	mov	x28, x22
    10f8:	b.ne	1118 <search_object+0x448>  // b.any
    10fc:	b	11a0 <search_object+0x4d0>
    1100:	sub	x3, x28, x25
    1104:	add	x0, x24, x3
    1108:	ldr	x28, [x0, #16]
    110c:	str	xzr, [x0, #16]
    1110:	cmp	x28, x23
    1114:	b.eq	11a0 <search_object+0x4d0>  // b.none
    1118:	ldr	x2, [x28]
    111c:	mov	x0, x19
    1120:	ldr	x1, [x22, #8]
    1124:	blr	x21
    1128:	tbnz	w0, #31, 1100 <search_object+0x430>
    112c:	ldr	x0, [sp, #104]
    1130:	str	x28, [x24, x27]
    1134:	add	x27, x27, #0x8
    1138:	add	x22, x22, #0x8
    113c:	cmp	x0, x27
    1140:	b.ne	10f0 <search_object+0x420>  // b.any
    1144:	ldp	x2, x24, [sp, #144]
    1148:	mov	x5, #0x0                   	// #0
    114c:	ldr	x0, [sp, #120]
    1150:	mov	x3, #0x0                   	// #0
    1154:	add	x6, x0, #0x10
    1158:	mov	x0, #0x0                   	// #0
    115c:	b	1180 <search_object+0x4b0>
    1160:	ldr	x7, [sp, #112]
    1164:	add	x1, x3, #0x2
    1168:	add	x3, x3, #0x1
    116c:	str	x4, [x7, x1, lsl #3]
    1170:	ldr	x1, [sp, #96]
    1174:	add	x0, x0, #0x1
    1178:	cmp	x1, x0
    117c:	b.eq	11b0 <search_object+0x4e0>  // b.none
    1180:	ldr	x1, [x6, x0, lsl #3]
    1184:	ldr	x4, [x25, x0, lsl #3]
    1188:	cbnz	x1, 1160 <search_object+0x490>
    118c:	ldr	x7, [sp, #120]
    1190:	add	x1, x5, #0x2
    1194:	add	x5, x5, #0x1
    1198:	str	x4, [x7, x1, lsl #3]
    119c:	b	1170 <search_object+0x4a0>
    11a0:	mov	x28, x23
    11a4:	b	112c <search_object+0x45c>
    11a8:	mov	x5, #0x0                   	// #0
    11ac:	mov	x3, #0x0                   	// #0
    11b0:	ldr	x0, [sp, #112]
    11b4:	str	x3, [x0, #8]
    11b8:	ldr	x0, [sp, #120]
    11bc:	str	x5, [x0, #8]
    11c0:	ldr	x0, [x2, #8]
    11c4:	ldr	x1, [x24, #8]
    11c8:	add	x0, x0, x1
    11cc:	cmp	x0, x26
    11d0:	b.ne	f28 <search_object+0x258>  // b.any
    11d4:	mov	x2, x24
    11d8:	mov	x1, x21
    11dc:	mov	x0, x19
    11e0:	bl	298 <frame_heapsort>
    11e4:	ldr	x25, [sp, #152]
    11e8:	ldr	x23, [x25, #8]
    11ec:	cbz	x23, 128c <search_object+0x5bc>
    11f0:	ldr	x0, [sp, #144]
    11f4:	str	x0, [sp, #96]
    11f8:	add	x28, x0, #0x10
    11fc:	ldr	x26, [x0, #8]
    1200:	add	x0, x25, x23, lsl #3
    1204:	sub	x24, x23, #0x1
    1208:	ldr	x27, [x0, #8]
    120c:	cbz	x26, 1350 <search_object+0x680>
    1210:	add	x23, x23, x26
    1214:	mov	x22, x26
    1218:	sub	x23, x23, #0x1
    121c:	b	1230 <search_object+0x560>
    1220:	ldr	x0, [x28, x22, lsl #3]
    1224:	str	x0, [x28, x23, lsl #3]
    1228:	sub	x23, x23, #0x1
    122c:	cbz	x22, 1268 <search_object+0x598>
    1230:	mov	x26, x22
    1234:	sub	x22, x22, #0x1
    1238:	mov	x2, x27
    123c:	mov	x0, x19
    1240:	ldr	x1, [x28, x22, lsl #3]
    1244:	blr	x21
    1248:	cmp	w0, #0x0
    124c:	b.gt	1220 <search_object+0x550>
    1250:	ldr	x0, [sp, #96]
    1254:	add	x23, x23, #0x2
    1258:	str	x27, [x0, x23, lsl #3]
    125c:	cbz	x24, 1274 <search_object+0x5a4>
    1260:	mov	x23, x24
    1264:	b	1200 <search_object+0x530>
    1268:	mov	x23, x24
    126c:	mov	x26, #0x0                   	// #0
    1270:	b	1250 <search_object+0x580>
    1274:	mov	x2, x0
    1278:	ldr	x1, [x25, #8]
    127c:	ldr	x0, [x2, #8]
    1280:	ldr	x25, [sp, #152]
    1284:	add	x0, x0, x1
    1288:	str	x0, [x2, #8]
    128c:	mov	x0, x25
    1290:	bl	0 <free>
    1294:	ldp	x27, x28, [sp, #80]
    1298:	ldr	x1, [sp, #144]
    129c:	ldrb	w0, [x19, #32]
    12a0:	ldr	x2, [x19, #24]
    12a4:	orr	w0, w0, #0x1
    12a8:	ldp	x23, x24, [sp, #48]
    12ac:	str	x2, [x1]
    12b0:	str	x1, [x19, #24]
    12b4:	strb	w0, [x19, #32]
    12b8:	b	eb4 <search_object+0x1e4>
    12bc:	cmp	w0, #0x50
    12c0:	mov	x24, #0x0                   	// #0
    12c4:	b.eq	f78 <search_object+0x2a8>  // b.none
    12c8:	stp	x25, x26, [sp, #64]
    12cc:	bl	0 <abort>
    12d0:	tst	w22, #0x60
    12d4:	b.ne	12c8 <search_object+0x5f8>  // b.any
    12d8:	mov	x24, #0x0                   	// #0
    12dc:	b	f78 <search_object+0x2a8>
    12e0:	mov	x2, x20
    12e4:	mov	x1, x22
    12e8:	mov	x0, x19
    12ec:	bl	740 <linear_search_fdes>
    12f0:	mov	x21, x0
    12f4:	ldp	x25, x26, [sp, #64]
    12f8:	b	d44 <search_object+0x74>
    12fc:	ldp	x23, x24, [sp, #48]
    1300:	ldp	x25, x26, [sp, #64]
    1304:	ldp	x27, x28, [sp, #80]
    1308:	b	d44 <search_object+0x74>
    130c:	adrp	x21, 0 <fde_unencoded_compare>
    1310:	add	x21, x21, #0x0
    1314:	b	10a8 <search_object+0x3d8>
    1318:	mov	x2, x21
    131c:	add	x1, sp, #0x90
    1320:	mov	x0, x19
    1324:	bl	4f8 <add_fdes>
    1328:	b	106c <search_object+0x39c>
    132c:	mov	x1, x21
    1330:	mov	x0, x19
    1334:	bl	298 <frame_heapsort>
    1338:	b	1298 <search_object+0x5c8>
    133c:	bfi	w0, w26, #11, #21
    1340:	str	w0, [x19, #32]
    1344:	b	eb0 <search_object+0x1e0>
    1348:	ldr	x24, [x19, #8]
    134c:	b	f78 <search_object+0x2a8>
    1350:	ldr	x2, [sp, #96]
    1354:	add	x1, x23, #0x1
    1358:	str	x27, [x2, x1, lsl #3]
    135c:	cbz	x24, 1278 <search_object+0x5a8>
    1360:	sub	x24, x23, #0x2
    1364:	mov	x23, x24
    1368:	ldr	x27, [x0]
    136c:	b	1250 <search_object+0x580>
    1370:	ldp	x23, x24, [sp, #48]
    1374:	ldp	x27, x28, [sp, #80]
    1378:	b	d40 <search_object+0x70>
    137c:	stp	x27, x28, [sp, #80]
    1380:	bl	0 <abort>
    1384:	ldp	x25, x26, [sp, #64]
    1388:	b	cf0 <search_object+0x20>
    138c:	nop

0000000000001390 <fde_single_encoding_compare>:
    1390:	ldrh	w4, [x0, #32]
    1394:	ubfx	x3, x4, #3, #8
    1398:	cmp	w3, #0xff
    139c:	b.eq	14c8 <fde_single_encoding_compare+0x138>  // b.none
    13a0:	and	w4, w3, #0x70
    13a4:	mov	x6, x3
    13a8:	cmp	w4, #0x20
    13ac:	b.eq	1604 <fde_single_encoding_compare+0x274>  // b.none
    13b0:	b.ls	1514 <fde_single_encoding_compare+0x184>  // b.plast
    13b4:	cmp	w4, #0x30
    13b8:	b.ne	14f8 <fde_single_encoding_compare+0x168>  // b.any
    13bc:	ldr	x5, [x0, #16]
    13c0:	cmp	w3, #0x50
    13c4:	add	x8, x1, #0x8
    13c8:	b.eq	1524 <fde_single_encoding_compare+0x194>  // b.none
    13cc:	nop
    13d0:	and	w0, w3, #0xf
    13d4:	cmp	w0, #0x4
    13d8:	b.eq	13f4 <fde_single_encoding_compare+0x64>  // b.none
    13dc:	b.ls	1430 <fde_single_encoding_compare+0xa0>  // b.plast
    13e0:	cmp	w0, #0xb
    13e4:	b.eq	1668 <fde_single_encoding_compare+0x2d8>  // b.none
    13e8:	b.ls	14d4 <fde_single_encoding_compare+0x144>  // b.plast
    13ec:	cmp	w0, #0xc
    13f0:	b.ne	14c8 <fde_single_encoding_compare+0x138>  // b.any
    13f4:	ldr	x1, [x1, #8]
    13f8:	add	x10, x2, #0x8
    13fc:	cbnz	x1, 1490 <fde_single_encoding_compare+0x100>
    1400:	ldr	x2, [x2, #8]
    1404:	cbz	x2, 153c <fde_single_encoding_compare+0x1ac>
    1408:	cmp	w4, #0x10
    140c:	csel	x5, x10, x5, eq  // eq = none
    1410:	add	x2, x2, x5
    1414:	tbz	w6, #7, 153c <fde_single_encoding_compare+0x1ac>
    1418:	ldr	x2, [x2]
    141c:	cmp	x2, x1
    1420:	mov	w1, #0x1                   	// #1
    1424:	csetm	w0, hi  // hi = pmore
    1428:	csel	w0, w0, w1, cs  // cs = hs, nlast
    142c:	ret
    1430:	cmp	w0, #0x2
    1434:	b.eq	1680 <fde_single_encoding_compare+0x2f0>  // b.none
    1438:	b.ls	1458 <fde_single_encoding_compare+0xc8>  // b.plast
    143c:	cmp	w0, #0x3
    1440:	b.ne	14c8 <fde_single_encoding_compare+0x138>  // b.any
    1444:	ldr	w1, [x1, #8]
    1448:	add	x10, x2, #0x8
    144c:	cbnz	x1, 1490 <fde_single_encoding_compare+0x100>
    1450:	ldr	w2, [x2, #8]
    1454:	b	1404 <fde_single_encoding_compare+0x74>
    1458:	cbz	w0, 1650 <fde_single_encoding_compare+0x2c0>
    145c:	cmp	w0, #0x1
    1460:	b.ne	14c8 <fde_single_encoding_compare+0x138>  // b.any
    1464:	mov	x10, x8
    1468:	mov	x1, #0x0                   	// #0
    146c:	mov	w7, #0x0                   	// #0
    1470:	ldrb	w9, [x10], #1
    1474:	and	x3, x9, #0x7f
    1478:	lsl	x3, x3, x7
    147c:	add	w7, w7, #0x7
    1480:	orr	x1, x1, x3
    1484:	tbnz	w9, #7, 1470 <fde_single_encoding_compare+0xe0>
    1488:	add	x10, x2, #0x8
    148c:	cbz	x1, 1578 <fde_single_encoding_compare+0x1e8>
    1490:	cmp	w4, #0x10
    1494:	csel	x8, x8, x5, eq  // eq = none
    1498:	add	x1, x1, x8
    149c:	tbnz	w6, #7, 1694 <fde_single_encoding_compare+0x304>
    14a0:	cmp	w0, #0x4
    14a4:	b.eq	1400 <fde_single_encoding_compare+0x70>  // b.none
    14a8:	b.ls	1550 <fde_single_encoding_compare+0x1c0>  // b.plast
    14ac:	cmp	w0, #0xa
    14b0:	b.eq	14f0 <fde_single_encoding_compare+0x160>  // b.none
    14b4:	b.ls	15bc <fde_single_encoding_compare+0x22c>  // b.plast
    14b8:	cmp	w0, #0xb
    14bc:	b.eq	1678 <fde_single_encoding_compare+0x2e8>  // b.none
    14c0:	cmp	w0, #0xc
    14c4:	b.eq	1400 <fde_single_encoding_compare+0x70>  // b.none
    14c8:	stp	x29, x30, [sp, #-16]!
    14cc:	mov	x29, sp
    14d0:	bl	0 <abort>
    14d4:	cmp	w0, #0x9
    14d8:	b.eq	160c <fde_single_encoding_compare+0x27c>  // b.none
    14dc:	cmp	w0, #0xa
    14e0:	b.ne	14c8 <fde_single_encoding_compare+0x138>  // b.any
    14e4:	ldrsh	x1, [x1, #8]
    14e8:	add	x10, x2, #0x8
    14ec:	cbnz	x1, 1490 <fde_single_encoding_compare+0x100>
    14f0:	ldrsh	x2, [x2, #8]
    14f4:	b	1404 <fde_single_encoding_compare+0x74>
    14f8:	cmp	w4, #0x50
    14fc:	mov	x5, #0x0                   	// #0
    1500:	b.ne	14c8 <fde_single_encoding_compare+0x138>  // b.any
    1504:	cmp	w3, #0x50
    1508:	add	x8, x1, #0x8
    150c:	b.ne	13d0 <fde_single_encoding_compare+0x40>  // b.any
    1510:	b	1524 <fde_single_encoding_compare+0x194>
    1514:	tst	w3, #0x60
    1518:	b.ne	14c8 <fde_single_encoding_compare+0x138>  // b.any
    151c:	mov	x5, #0x0                   	// #0
    1520:	b	13c0 <fde_single_encoding_compare+0x30>
    1524:	add	x1, x1, #0xf
    1528:	add	x2, x2, #0xf
    152c:	and	x1, x1, #0xfffffffffffffff8
    1530:	and	x2, x2, #0xfffffffffffffff8
    1534:	ldr	x1, [x1]
    1538:	ldr	x2, [x2]
    153c:	cmp	x2, x1
    1540:	csetm	w0, hi  // hi = pmore
    1544:	mov	w1, #0x1                   	// #1
    1548:	csel	w0, w0, w1, cs  // cs = hs, nlast
    154c:	ret
    1550:	cmp	w0, #0x2
    1554:	b.eq	168c <fde_single_encoding_compare+0x2fc>  // b.none
    1558:	b.ls	156c <fde_single_encoding_compare+0x1dc>  // b.plast
    155c:	cmp	w0, #0x3
    1560:	b.ne	14c8 <fde_single_encoding_compare+0x138>  // b.any
    1564:	ldr	w2, [x2, #8]
    1568:	b	1404 <fde_single_encoding_compare+0x74>
    156c:	cbz	w0, 1400 <fde_single_encoding_compare+0x70>
    1570:	cmp	w0, #0x1
    1574:	b.ne	14c8 <fde_single_encoding_compare+0x138>  // b.any
    1578:	mov	x8, x10
    157c:	mov	x2, #0x0                   	// #0
    1580:	mov	w3, #0x0                   	// #0
    1584:	nop
    1588:	ldrb	w7, [x8], #1
    158c:	and	x0, x7, #0x7f
    1590:	lsl	x0, x0, x3
    1594:	add	w3, w3, #0x7
    1598:	orr	x2, x2, x0
    159c:	tbz	w7, #7, 1404 <fde_single_encoding_compare+0x74>
    15a0:	ldrb	w7, [x8], #1
    15a4:	and	x0, x7, #0x7f
    15a8:	lsl	x0, x0, x3
    15ac:	add	w3, w3, #0x7
    15b0:	orr	x2, x2, x0
    15b4:	tbnz	w7, #7, 1588 <fde_single_encoding_compare+0x1f8>
    15b8:	b	1404 <fde_single_encoding_compare+0x74>
    15bc:	cmp	w0, #0x9
    15c0:	b.ne	14c8 <fde_single_encoding_compare+0x138>  // b.any
    15c4:	mov	x8, x10
    15c8:	mov	x2, #0x0                   	// #0
    15cc:	mov	w3, #0x0                   	// #0
    15d0:	ldrb	w7, [x8], #1
    15d4:	and	x0, x7, #0x7f
    15d8:	lsl	x0, x0, x3
    15dc:	add	w3, w3, #0x7
    15e0:	orr	x2, x2, x0
    15e4:	tbnz	w7, #7, 15d0 <fde_single_encoding_compare+0x240>
    15e8:	cmp	w3, #0x3f
    15ec:	b.hi	1404 <fde_single_encoding_compare+0x74>  // b.pmore
    15f0:	tbz	w7, #6, 1404 <fde_single_encoding_compare+0x74>
    15f4:	mov	x0, #0xffffffffffffffff    	// #-1
    15f8:	lsl	x3, x0, x3
    15fc:	orr	x2, x2, x3
    1600:	b	1408 <fde_single_encoding_compare+0x78>
    1604:	ldr	x5, [x0, #8]
    1608:	b	13c0 <fde_single_encoding_compare+0x30>
    160c:	mov	x10, x8
    1610:	mov	x1, #0x0                   	// #0
    1614:	mov	w7, #0x0                   	// #0
    1618:	ldrb	w9, [x10], #1
    161c:	and	x3, x9, #0x7f
    1620:	lsl	x3, x3, x7
    1624:	add	w7, w7, #0x7
    1628:	orr	x1, x1, x3
    162c:	tbnz	w9, #7, 1618 <fde_single_encoding_compare+0x288>
    1630:	cmp	w7, #0x3f
    1634:	add	x10, x2, #0x8
    1638:	b.hi	169c <fde_single_encoding_compare+0x30c>  // b.pmore
    163c:	tbz	w9, #6, 169c <fde_single_encoding_compare+0x30c>
    1640:	mov	x3, #0xffffffffffffffff    	// #-1
    1644:	lsl	x7, x3, x7
    1648:	orr	x1, x1, x7
    164c:	b	1490 <fde_single_encoding_compare+0x100>
    1650:	ldr	x3, [x1, #8]
    1654:	add	x10, x2, #0x8
    1658:	mov	x1, #0x0                   	// #0
    165c:	cbz	x3, 1400 <fde_single_encoding_compare+0x70>
    1660:	mov	x1, x3
    1664:	b	1490 <fde_single_encoding_compare+0x100>
    1668:	ldrsw	x1, [x1, #8]
    166c:	add	x10, x2, #0x8
    1670:	cbnz	x1, 1490 <fde_single_encoding_compare+0x100>
    1674:	nop
    1678:	ldrsw	x2, [x2, #8]
    167c:	b	1404 <fde_single_encoding_compare+0x74>
    1680:	ldrh	w1, [x1, #8]
    1684:	add	x10, x2, #0x8
    1688:	cbnz	x1, 1490 <fde_single_encoding_compare+0x100>
    168c:	ldrh	w2, [x2, #8]
    1690:	b	1404 <fde_single_encoding_compare+0x74>
    1694:	ldr	x1, [x1]
    1698:	b	14a0 <fde_single_encoding_compare+0x110>
    169c:	cbz	x1, 15c4 <fde_single_encoding_compare+0x234>
    16a0:	b	1490 <fde_single_encoding_compare+0x100>
    16a4:	nop

00000000000016a8 <fde_mixed_encoding_compare>:
    16a8:	stp	x29, x30, [sp, #-64]!
    16ac:	mov	x29, sp
    16b0:	stp	x19, x20, [sp, #16]
    16b4:	mov	x19, x1
    16b8:	add	x1, x1, #0x4
    16bc:	str	x21, [sp, #32]
    16c0:	mov	x21, x0
    16c4:	ldrsw	x0, [x19, #4]
    16c8:	mov	x20, x2
    16cc:	sub	x0, x1, x0
    16d0:	bl	180 <get_cie_encoding>
    16d4:	and	w3, w0, #0xff
    16d8:	cmp	w3, #0xff
    16dc:	b.eq	1818 <fde_mixed_encoding_compare+0x170>  // b.none
    16e0:	and	w4, w3, #0x70
    16e4:	mov	w2, w0
    16e8:	cmp	w4, #0x20
    16ec:	b.eq	194c <fde_mixed_encoding_compare+0x2a4>  // b.none
    16f0:	b.ls	181c <fde_mixed_encoding_compare+0x174>  // b.plast
    16f4:	cmp	w4, #0x30
    16f8:	b.ne	180c <fde_mixed_encoding_compare+0x164>  // b.any
    16fc:	ldr	x5, [x21, #16]
    1700:	cmp	w3, #0x50
    1704:	add	x6, x19, #0x8
    1708:	b.eq	1834 <fde_mixed_encoding_compare+0x18c>  // b.none
    170c:	nop
    1710:	and	w3, w3, #0xf
    1714:	cmp	w3, #0x4
    1718:	b.eq	1734 <fde_mixed_encoding_compare+0x8c>  // b.none
    171c:	b.ls	1774 <fde_mixed_encoding_compare+0xcc>  // b.plast
    1720:	cmp	w3, #0xb
    1724:	b.eq	1978 <fde_mixed_encoding_compare+0x2d0>  // b.none
    1728:	b.ls	17e4 <fde_mixed_encoding_compare+0x13c>  // b.plast
    172c:	cmp	w3, #0xc
    1730:	b.ne	1818 <fde_mixed_encoding_compare+0x170>  // b.any
    1734:	ldrsw	x0, [x20, #4]
    1738:	add	x1, x20, #0x4
    173c:	ldr	x19, [x19, #8]
    1740:	sub	x0, x1, x0
    1744:	cbnz	x19, 18f8 <fde_mixed_encoding_compare+0x250>
    1748:	bl	180 <get_cie_encoding>
    174c:	and	w0, w0, #0xff
    1750:	cmp	w0, #0xff
    1754:	b.ne	185c <fde_mixed_encoding_compare+0x1b4>  // b.any
    1758:	mov	x1, #0x0                   	// #0
    175c:	add	x2, x20, #0x8
    1760:	add	x3, sp, #0x38
    1764:	mov	w0, #0xffffffff            	// #-1
    1768:	bl	20 <read_encoded_value_with_base>
    176c:	ldr	x1, [sp, #56]
    1770:	b	1894 <fde_mixed_encoding_compare+0x1ec>
    1774:	cmp	w3, #0x2
    1778:	b.eq	1960 <fde_mixed_encoding_compare+0x2b8>  // b.none
    177c:	b.ls	17a0 <fde_mixed_encoding_compare+0xf8>  // b.plast
    1780:	cmp	w3, #0x3
    1784:	b.ne	1818 <fde_mixed_encoding_compare+0x170>  // b.any
    1788:	ldr	w19, [x19, #8]
    178c:	add	x1, x20, #0x4
    1790:	ldrsw	x0, [x20, #4]
    1794:	sub	x0, x1, x0
    1798:	cbz	x19, 1748 <fde_mixed_encoding_compare+0xa0>
    179c:	b	18f8 <fde_mixed_encoding_compare+0x250>
    17a0:	cbz	w3, 1734 <fde_mixed_encoding_compare+0x8c>
    17a4:	cmp	w3, #0x1
    17a8:	b.ne	1818 <fde_mixed_encoding_compare+0x170>  // b.any
    17ac:	mov	x7, x6
    17b0:	mov	x19, #0x0                   	// #0
    17b4:	mov	w1, #0x0                   	// #0
    17b8:	ldrb	w3, [x7], #1
    17bc:	and	x0, x3, #0x7f
    17c0:	lsl	x0, x0, x1
    17c4:	add	w1, w1, #0x7
    17c8:	orr	x19, x19, x0
    17cc:	tbnz	w3, #7, 17b8 <fde_mixed_encoding_compare+0x110>
    17d0:	ldrsw	x0, [x20, #4]
    17d4:	add	x1, x20, #0x4
    17d8:	sub	x0, x1, x0
    17dc:	cbz	x19, 1748 <fde_mixed_encoding_compare+0xa0>
    17e0:	b	18f8 <fde_mixed_encoding_compare+0x250>
    17e4:	cmp	w3, #0x9
    17e8:	b.eq	18ac <fde_mixed_encoding_compare+0x204>  // b.none
    17ec:	cmp	w3, #0xa
    17f0:	b.ne	1818 <fde_mixed_encoding_compare+0x170>  // b.any
    17f4:	ldrsh	x19, [x19, #8]
    17f8:	add	x1, x20, #0x4
    17fc:	ldrsw	x0, [x20, #4]
    1800:	sub	x0, x1, x0
    1804:	cbz	x19, 1748 <fde_mixed_encoding_compare+0xa0>
    1808:	b	18f8 <fde_mixed_encoding_compare+0x250>
    180c:	cmp	w4, #0x50
    1810:	mov	x5, #0x0                   	// #0
    1814:	b.eq	1700 <fde_mixed_encoding_compare+0x58>  // b.none
    1818:	bl	0 <abort>
    181c:	tst	w3, #0x60
    1820:	b.ne	1818 <fde_mixed_encoding_compare+0x170>  // b.any
    1824:	cmp	w3, #0x50
    1828:	add	x6, x19, #0x8
    182c:	mov	x5, #0x0                   	// #0
    1830:	b.ne	1710 <fde_mixed_encoding_compare+0x68>  // b.any
    1834:	add	x19, x19, #0xf
    1838:	ldrsw	x1, [x20, #4]
    183c:	and	x19, x19, #0xfffffffffffffff8
    1840:	add	x0, x20, #0x4
    1844:	sub	x0, x0, x1
    1848:	ldr	x19, [x19]
    184c:	bl	180 <get_cie_encoding>
    1850:	and	w0, w0, #0xff
    1854:	cmp	w0, #0xff
    1858:	b.eq	1920 <fde_mixed_encoding_compare+0x278>  // b.none
    185c:	and	w1, w0, #0x70
    1860:	cmp	w1, #0x20
    1864:	b.eq	1944 <fde_mixed_encoding_compare+0x29c>  // b.none
    1868:	b.ls	1938 <fde_mixed_encoding_compare+0x290>  // b.plast
    186c:	cmp	w1, #0x30
    1870:	b.ne	1928 <fde_mixed_encoding_compare+0x280>  // b.any
    1874:	ldr	x1, [x21, #16]
    1878:	add	x2, x20, #0x8
    187c:	add	x3, sp, #0x38
    1880:	bl	20 <read_encoded_value_with_base>
    1884:	ldr	x1, [sp, #56]
    1888:	mov	w0, #0x1                   	// #1
    188c:	cmp	x1, x19
    1890:	b.cc	189c <fde_mixed_encoding_compare+0x1f4>  // b.lo, b.ul, b.last
    1894:	cmp	x1, x19
    1898:	csetm	w0, hi  // hi = pmore
    189c:	ldp	x19, x20, [sp, #16]
    18a0:	ldr	x21, [sp, #32]
    18a4:	ldp	x29, x30, [sp], #64
    18a8:	ret
    18ac:	mov	x1, x6
    18b0:	mov	x19, #0x0                   	// #0
    18b4:	mov	w3, #0x0                   	// #0
    18b8:	ldrb	w7, [x1], #1
    18bc:	and	x0, x7, #0x7f
    18c0:	lsl	x0, x0, x3
    18c4:	add	w3, w3, #0x7
    18c8:	orr	x19, x19, x0
    18cc:	tbnz	w7, #7, 18b8 <fde_mixed_encoding_compare+0x210>
    18d0:	ldrsw	x0, [x20, #4]
    18d4:	add	x1, x20, #0x4
    18d8:	cmp	w3, #0x3f
    18dc:	sub	x0, x1, x0
    18e0:	b.hi	1744 <fde_mixed_encoding_compare+0x9c>  // b.pmore
    18e4:	tbz	w7, #6, 1744 <fde_mixed_encoding_compare+0x9c>
    18e8:	mov	x1, #0xffffffffffffffff    	// #-1
    18ec:	lsl	x3, x1, x3
    18f0:	orr	x19, x19, x3
    18f4:	nop
    18f8:	cmp	w4, #0x10
    18fc:	csel	x5, x6, x5, eq  // eq = none
    1900:	add	x19, x19, x5
    1904:	tbz	w2, #7, 184c <fde_mixed_encoding_compare+0x1a4>
    1908:	ldr	x19, [x19]
    190c:	bl	180 <get_cie_encoding>
    1910:	and	w0, w0, #0xff
    1914:	cmp	w0, #0xff
    1918:	b.ne	185c <fde_mixed_encoding_compare+0x1b4>  // b.any
    191c:	nop
    1920:	mov	x1, #0x0                   	// #0
    1924:	b	1878 <fde_mixed_encoding_compare+0x1d0>
    1928:	cmp	w1, #0x50
    192c:	mov	x1, #0x0                   	// #0
    1930:	b.eq	1878 <fde_mixed_encoding_compare+0x1d0>  // b.none
    1934:	bl	0 <abort>
    1938:	tst	w0, #0x60
    193c:	b.eq	1920 <fde_mixed_encoding_compare+0x278>  // b.none
    1940:	bl	0 <abort>
    1944:	ldr	x1, [x21, #8]
    1948:	b	1878 <fde_mixed_encoding_compare+0x1d0>
    194c:	cmp	w3, #0x50
    1950:	add	x6, x19, #0x8
    1954:	ldr	x5, [x21, #8]
    1958:	b.ne	1710 <fde_mixed_encoding_compare+0x68>  // b.any
    195c:	b	1834 <fde_mixed_encoding_compare+0x18c>
    1960:	ldrh	w19, [x19, #8]
    1964:	add	x1, x20, #0x4
    1968:	ldrsw	x0, [x20, #4]
    196c:	sub	x0, x1, x0
    1970:	cbz	x19, 1748 <fde_mixed_encoding_compare+0xa0>
    1974:	b	18f8 <fde_mixed_encoding_compare+0x250>
    1978:	ldrsw	x19, [x19, #8]
    197c:	add	x1, x20, #0x4
    1980:	ldrsw	x0, [x20, #4]
    1984:	sub	x0, x1, x0
    1988:	cbz	x19, 1748 <fde_mixed_encoding_compare+0xa0>
    198c:	b	18f8 <fde_mixed_encoding_compare+0x250>

0000000000001990 <_Unwind_IteratePhdrCallback>:
    1990:	stp	x29, x30, [sp, #-112]!
    1994:	cmp	x1, #0x2f
    1998:	mov	x29, sp
    199c:	stp	x19, x20, [sp, #16]
    19a0:	mov	x19, x2
    19a4:	ldr	w2, [x2, #40]
    19a8:	ldr	x12, [x0]
    19ac:	ccmp	w2, #0x0, #0x4, hi  // hi = pmore
    19b0:	ldr	x3, [x0, #16]
    19b4:	b.ne	1af4 <_Unwind_IteratePhdrCallback+0x164>  // b.any
    19b8:	cmp	x1, #0x19
    19bc:	b.ls	1acc <_Unwind_IteratePhdrCallback+0x13c>  // b.plast
    19c0:	mov	x13, #0x0                   	// #0
    19c4:	mov	x15, #0x0                   	// #0
    19c8:	ldrh	w4, [x0, #24]
    19cc:	cbz	w4, 1ae4 <_Unwind_IteratePhdrCallback+0x154>
    19d0:	mov	w0, #0x38                  	// #56
    19d4:	mov	w7, #0xe550                	// #58704
    19d8:	mov	x10, #0x0                   	// #0
    19dc:	mov	x11, #0x0                   	// #0
    19e0:	umaddl	x4, w4, w0, x3
    19e4:	mov	x8, #0x0                   	// #0
    19e8:	mov	x6, #0x0                   	// #0
    19ec:	mov	x9, #0x0                   	// #0
    19f0:	movk	w7, #0x6474, lsl #16
    19f4:	mov	x14, #0x1                   	// #1
    19f8:	b	1a18 <_Unwind_IteratePhdrCallback+0x88>
    19fc:	cmp	w0, w7
    1a00:	b.eq	1adc <_Unwind_IteratePhdrCallback+0x14c>  // b.none
    1a04:	cmp	w0, #0x2
    1a08:	csel	x6, x6, x3, ne  // ne = any
    1a0c:	add	x3, x3, #0x38
    1a10:	cmp	x3, x4
    1a14:	b.eq	1a60 <_Unwind_IteratePhdrCallback+0xd0>  // b.none
    1a18:	ldr	w0, [x3]
    1a1c:	cmp	w0, #0x1
    1a20:	b.ne	19fc <_Unwind_IteratePhdrCallback+0x6c>  // b.any
    1a24:	ldr	x0, [x3, #16]
    1a28:	ldr	x5, [x19]
    1a2c:	add	x0, x12, x0
    1a30:	cmp	x5, x0
    1a34:	b.cc	1a0c <_Unwind_IteratePhdrCallback+0x7c>  // b.lo, b.ul, b.last
    1a38:	ldr	x2, [x3, #40]
    1a3c:	add	x3, x3, #0x38
    1a40:	add	x2, x0, x2
    1a44:	cmp	x5, x2
    1a48:	csel	x10, x10, x2, cs  // cs = hs, nlast
    1a4c:	csel	x11, x11, x0, cs  // cs = hs, nlast
    1a50:	csel	x8, x8, x14, cs  // cs = hs, nlast
    1a54:	cmp	x3, x4
    1a58:	b.ne	1a18 <_Unwind_IteratePhdrCallback+0x88>  // b.any
    1a5c:	nop
    1a60:	cbz	x8, 1ae4 <_Unwind_IteratePhdrCallback+0x154>
    1a64:	cmp	x1, #0x2f
    1a68:	b.ls	1aa4 <_Unwind_IteratePhdrCallback+0x114>  // b.plast
    1a6c:	adrp	x1, 0 <fde_unencoded_compare>
    1a70:	add	x1, x1, #0x0
    1a74:	cmp	x13, #0x0
    1a78:	ccmp	x15, #0x0, #0x4, ne  // ne = any
    1a7c:	ldr	x0, [x1, #16]
    1a80:	b.eq	1a98 <_Unwind_IteratePhdrCallback+0x108>  // b.none
    1a84:	ldr	x2, [x13, #40]
    1a88:	str	x2, [x15, #40]
    1a8c:	str	x0, [x13, #40]
    1a90:	mov	x0, x13
    1a94:	str	x13, [x1, #16]
    1a98:	stp	x11, x10, [x0]
    1a9c:	stp	x12, x9, [x0, #16]
    1aa0:	str	x6, [x0, #32]
    1aa4:	cbz	x9, 1ae4 <_Unwind_IteratePhdrCallback+0x154>
    1aa8:	ldr	x0, [x9, #16]
    1aac:	add	x20, x12, x0
    1ab0:	ldrb	w0, [x12, x0]
    1ab4:	cmp	w0, #0x1
    1ab8:	b.eq	1b8c <_Unwind_IteratePhdrCallback+0x1fc>  // b.none
    1abc:	mov	w0, #0x1                   	// #1
    1ac0:	ldp	x19, x20, [sp, #16]
    1ac4:	ldp	x29, x30, [sp], #112
    1ac8:	ret
    1acc:	mov	w0, #0xffffffff            	// #-1
    1ad0:	ldp	x19, x20, [sp, #16]
    1ad4:	ldp	x29, x30, [sp], #112
    1ad8:	ret
    1adc:	mov	x9, x3
    1ae0:	b	1a0c <_Unwind_IteratePhdrCallback+0x7c>
    1ae4:	mov	w0, #0x0                   	// #0
    1ae8:	ldp	x19, x20, [sp, #16]
    1aec:	ldp	x29, x30, [sp], #112
    1af0:	ret
    1af4:	ldp	x5, x6, [x0, #32]
    1af8:	adrp	x2, 0 <fde_unencoded_compare>
    1afc:	adrp	x4, 0 <fde_unencoded_compare>
    1b00:	ldr	x7, [x2]
    1b04:	cmp	x5, x7
    1b08:	b.eq	1c60 <_Unwind_IteratePhdrCallback+0x2d0>  // b.none
    1b0c:	movi	v0.4s, #0x0
    1b10:	add	x4, x4, #0x0
    1b14:	add	x13, x4, #0x50
    1b18:	str	x5, [x2]
    1b1c:	add	x11, x4, #0x80
    1b20:	add	x10, x4, #0xb0
    1b24:	add	x9, x4, #0xe0
    1b28:	add	x8, x4, #0x110
    1b2c:	add	x7, x4, #0x140
    1b30:	add	x5, x4, #0x170
    1b34:	str	x13, [x4, #72]
    1b38:	add	x2, x4, #0x20
    1b3c:	str	q0, [x4, #80]
    1b40:	mov	x15, #0x0                   	// #0
    1b44:	mov	x13, #0x0                   	// #0
    1b48:	str	x11, [x4, #120]
    1b4c:	str	q0, [x4, #128]
    1b50:	str	x10, [x4, #168]
    1b54:	str	q0, [x4, #176]
    1b58:	str	x9, [x4, #216]
    1b5c:	str	q0, [x4, #224]
    1b60:	str	x8, [x4, #264]
    1b64:	str	q0, [x4, #272]
    1b68:	str	x7, [x4, #312]
    1b6c:	str	q0, [x4, #320]
    1b70:	str	x5, [x4, #360]
    1b74:	str	q0, [x4, #368]
    1b78:	str	xzr, [x4, #408]
    1b7c:	stp	x6, x2, [x4, #8]
    1b80:	str	q0, [x4, #32]
    1b84:	str	wzr, [x19, #40]
    1b88:	b	19c8 <_Unwind_IteratePhdrCallback+0x38>
    1b8c:	ldrb	w0, [x20, #1]
    1b90:	cmp	w0, #0xff
    1b94:	b.eq	1ce0 <_Unwind_IteratePhdrCallback+0x350>  // b.none
    1b98:	and	w1, w0, #0x70
    1b9c:	cmp	w1, #0x20
    1ba0:	b.eq	1e40 <_Unwind_IteratePhdrCallback+0x4b0>  // b.none
    1ba4:	b.ls	1cd8 <_Unwind_IteratePhdrCallback+0x348>  // b.plast
    1ba8:	cmp	w1, #0x30
    1bac:	b.ne	1cc0 <_Unwind_IteratePhdrCallback+0x330>  // b.any
    1bb0:	ldr	x1, [x19, #16]
    1bb4:	nop
    1bb8:	add	x3, sp, #0x30
    1bbc:	add	x2, x20, #0x4
    1bc0:	bl	20 <read_encoded_value_with_base>
    1bc4:	ldrb	w3, [x20, #2]
    1bc8:	cmp	w3, #0xff
    1bcc:	b.eq	1bdc <_Unwind_IteratePhdrCallback+0x24c>  // b.none
    1bd0:	ldrb	w1, [x20, #3]
    1bd4:	cmp	w1, #0x3b
    1bd8:	b.eq	1ce8 <_Unwind_IteratePhdrCallback+0x358>  // b.none
    1bdc:	ldr	x2, [x19]
    1be0:	mov	x3, #0x4                   	// #4
    1be4:	ldp	x5, x4, [x19, #8]
    1be8:	add	x0, sp, #0x40
    1bec:	ldr	x1, [sp, #48]
    1bf0:	stp	xzr, x5, [sp, #64]
    1bf4:	stp	x4, x1, [sp, #80]
    1bf8:	str	x3, [sp, #96]
    1bfc:	bl	740 <linear_search_fdes>
    1c00:	str	x0, [x19, #32]
    1c04:	cbz	x0, 1abc <_Unwind_IteratePhdrCallback+0x12c>
    1c08:	ldrsw	x1, [x0, #4]
    1c0c:	add	x0, x0, #0x4
    1c10:	sub	x0, x0, x1
    1c14:	bl	180 <get_cie_encoding>
    1c18:	and	w0, w0, #0xff
    1c1c:	cmp	w0, #0xff
    1c20:	b.eq	1e24 <_Unwind_IteratePhdrCallback+0x494>  // b.none
    1c24:	and	w1, w0, #0x70
    1c28:	cmp	w1, #0x20
    1c2c:	b.eq	1e50 <_Unwind_IteratePhdrCallback+0x4c0>  // b.none
    1c30:	b.ls	1e1c <_Unwind_IteratePhdrCallback+0x48c>  // b.plast
    1c34:	cmp	w1, #0x30
    1c38:	b.ne	1e2c <_Unwind_IteratePhdrCallback+0x49c>  // b.any
    1c3c:	ldr	x1, [x19, #16]
    1c40:	add	x3, sp, #0x38
    1c44:	ldr	x2, [x19, #32]
    1c48:	add	x2, x2, #0x8
    1c4c:	bl	20 <read_encoded_value_with_base>
    1c50:	ldr	x1, [sp, #56]
    1c54:	mov	w0, #0x1                   	// #1
    1c58:	str	x1, [x19, #24]
    1c5c:	b	1ad0 <_Unwind_IteratePhdrCallback+0x140>
    1c60:	add	x7, x4, #0x0
    1c64:	ldr	x8, [x7, #8]
    1c68:	cmp	x8, x6
    1c6c:	b.ne	1b0c <_Unwind_IteratePhdrCallback+0x17c>  // b.any
    1c70:	ldr	x7, [x7, #16]
    1c74:	cbz	x7, 19c0 <_Unwind_IteratePhdrCallback+0x30>
    1c78:	mov	x13, x7
    1c7c:	mov	x15, #0x0                   	// #0
    1c80:	ldr	x6, [x19]
    1c84:	ldp	x2, x5, [x13]
    1c88:	cmp	x6, x2
    1c8c:	b.cc	1c98 <_Unwind_IteratePhdrCallback+0x308>  // b.lo, b.ul, b.last
    1c90:	cmp	x6, x5
    1c94:	b.cc	1e7c <_Unwind_IteratePhdrCallback+0x4ec>  // b.lo, b.ul, b.last
    1c98:	orr	x2, x2, x5
    1c9c:	cbz	x2, 19c8 <_Unwind_IteratePhdrCallback+0x38>
    1ca0:	ldr	x2, [x13, #40]
    1ca4:	cbz	x2, 19c8 <_Unwind_IteratePhdrCallback+0x38>
    1ca8:	mov	x15, x13
    1cac:	mov	x13, x2
    1cb0:	ldp	x2, x5, [x13]
    1cb4:	cmp	x6, x2
    1cb8:	b.cc	1c98 <_Unwind_IteratePhdrCallback+0x308>  // b.lo, b.ul, b.last
    1cbc:	b	1c90 <_Unwind_IteratePhdrCallback+0x300>
    1cc0:	cmp	w1, #0x50
    1cc4:	mov	x1, #0x0                   	// #0
    1cc8:	b.eq	1bb8 <_Unwind_IteratePhdrCallback+0x228>  // b.none
    1ccc:	nop
    1cd0:	stp	x21, x22, [sp, #32]
    1cd4:	bl	0 <abort>
    1cd8:	tst	w0, #0x60
    1cdc:	b.ne	1cd0 <_Unwind_IteratePhdrCallback+0x340>  // b.any
    1ce0:	mov	x1, #0x0                   	// #0
    1ce4:	b	1bb8 <_Unwind_IteratePhdrCallback+0x228>
    1ce8:	and	w1, w3, #0x70
    1cec:	cmp	w1, #0x20
    1cf0:	b.eq	1ea0 <_Unwind_IteratePhdrCallback+0x510>  // b.none
    1cf4:	b.ls	1e6c <_Unwind_IteratePhdrCallback+0x4dc>  // b.plast
    1cf8:	cmp	w1, #0x30
    1cfc:	b.ne	1e58 <_Unwind_IteratePhdrCallback+0x4c8>  // b.any
    1d00:	ldr	x1, [x19, #16]
    1d04:	mov	x2, x0
    1d08:	mov	w0, w3
    1d0c:	add	x3, sp, #0x38
    1d10:	bl	20 <read_encoded_value_with_base>
    1d14:	ldr	x3, [sp, #56]
    1d18:	cbz	x3, 1abc <_Unwind_IteratePhdrCallback+0x12c>
    1d1c:	ands	x5, x0, #0x3
    1d20:	ldr	x2, [x19]
    1d24:	b.ne	1be0 <_Unwind_IteratePhdrCallback+0x250>  // b.any
    1d28:	ldrsw	x1, [x0]
    1d2c:	add	x1, x1, x20
    1d30:	cmp	x1, x2
    1d34:	b.hi	1abc <_Unwind_IteratePhdrCallback+0x12c>  // b.pmore
    1d38:	sub	x3, x3, #0x1
    1d3c:	stp	x21, x22, [sp, #32]
    1d40:	lsl	x1, x3, #3
    1d44:	add	x21, x0, x1
    1d48:	ldrsw	x1, [x0, x1]
    1d4c:	add	x1, x1, x20
    1d50:	cmp	x1, x2
    1d54:	b.ls	1d98 <_Unwind_IteratePhdrCallback+0x408>  // b.plast
    1d58:	cmp	x5, x3
    1d5c:	b.cs	1cd4 <_Unwind_IteratePhdrCallback+0x344>  // b.hs, b.nlast
    1d60:	add	x1, x5, x3
    1d64:	lsr	x1, x1, #1
    1d68:	lsl	x4, x1, #3
    1d6c:	add	x21, x0, x4
    1d70:	ldrsw	x4, [x0, x4]
    1d74:	add	x4, x4, x20
    1d78:	cmp	x4, x2
    1d7c:	b.hi	1e48 <_Unwind_IteratePhdrCallback+0x4b8>  // b.pmore
    1d80:	add	x5, x1, #0x1
    1d84:	lsl	x1, x5, #3
    1d88:	ldrsw	x1, [x0, x1]
    1d8c:	add	x1, x1, x20
    1d90:	cmp	x1, x2
    1d94:	b.ls	1d58 <_Unwind_IteratePhdrCallback+0x3c8>  // b.plast
    1d98:	ldrsw	x22, [x21, #4]
    1d9c:	add	x22, x22, x20
    1da0:	add	x1, x22, #0x4
    1da4:	ldrsw	x0, [x22, #4]
    1da8:	sub	x0, x1, x0
    1dac:	bl	180 <get_cie_encoding>
    1db0:	and	w0, w0, #0xff
    1db4:	cmp	w0, #0xff
    1db8:	b.eq	1ecc <_Unwind_IteratePhdrCallback+0x53c>  // b.none
    1dbc:	and	w1, w0, #0x7
    1dc0:	cmp	w1, #0x2
    1dc4:	b.eq	1ec4 <_Unwind_IteratePhdrCallback+0x534>  // b.none
    1dc8:	b.ls	1eb8 <_Unwind_IteratePhdrCallback+0x528>  // b.plast
    1dcc:	cmp	w1, #0x3
    1dd0:	mov	x2, #0xc                   	// #12
    1dd4:	b.ne	1ea8 <_Unwind_IteratePhdrCallback+0x518>  // b.any
    1dd8:	add	x2, x22, x2
    1ddc:	mov	x1, #0x0                   	// #0
    1de0:	and	w0, w0, #0xf
    1de4:	add	x3, sp, #0x40
    1de8:	bl	20 <read_encoded_value_with_base>
    1dec:	ldrsw	x0, [x21]
    1df0:	ldr	x1, [sp, #64]
    1df4:	add	x20, x0, x20
    1df8:	ldr	x2, [x19]
    1dfc:	add	x0, x20, x1
    1e00:	cmp	x2, x0
    1e04:	b.cs	1e0c <_Unwind_IteratePhdrCallback+0x47c>  // b.hs, b.nlast
    1e08:	str	x22, [x19, #32]
    1e0c:	mov	w0, #0x1                   	// #1
    1e10:	ldp	x21, x22, [sp, #32]
    1e14:	str	x20, [x19, #24]
    1e18:	b	1ac0 <_Unwind_IteratePhdrCallback+0x130>
    1e1c:	tst	w0, #0x60
    1e20:	b.ne	1cd0 <_Unwind_IteratePhdrCallback+0x340>  // b.any
    1e24:	mov	x1, #0x0                   	// #0
    1e28:	b	1c40 <_Unwind_IteratePhdrCallback+0x2b0>
    1e2c:	cmp	w1, #0x50
    1e30:	mov	x1, #0x0                   	// #0
    1e34:	b.eq	1c40 <_Unwind_IteratePhdrCallback+0x2b0>  // b.none
    1e38:	stp	x21, x22, [sp, #32]
    1e3c:	b	1cd4 <_Unwind_IteratePhdrCallback+0x344>
    1e40:	ldr	x1, [x19, #8]
    1e44:	b	1bb8 <_Unwind_IteratePhdrCallback+0x228>
    1e48:	mov	x3, x1
    1e4c:	b	1d58 <_Unwind_IteratePhdrCallback+0x3c8>
    1e50:	ldr	x1, [x19, #8]
    1e54:	b	1c40 <_Unwind_IteratePhdrCallback+0x2b0>
    1e58:	cmp	w1, #0x50
    1e5c:	mov	x1, #0x0                   	// #0
    1e60:	b.eq	1d04 <_Unwind_IteratePhdrCallback+0x374>  // b.none
    1e64:	stp	x21, x22, [sp, #32]
    1e68:	b	1cd4 <_Unwind_IteratePhdrCallback+0x344>
    1e6c:	tst	w3, #0x60
    1e70:	b.ne	1cd0 <_Unwind_IteratePhdrCallback+0x340>  // b.any
    1e74:	mov	x1, #0x0                   	// #0
    1e78:	b	1d04 <_Unwind_IteratePhdrCallback+0x374>
    1e7c:	cmp	x13, x7
    1e80:	ldp	x12, x9, [x13, #16]
    1e84:	b.eq	1aa4 <_Unwind_IteratePhdrCallback+0x114>  // b.none
    1e88:	add	x4, x4, #0x0
    1e8c:	ldr	x0, [x13, #40]
    1e90:	str	x0, [x15, #40]
    1e94:	str	x13, [x4, #16]
    1e98:	str	x7, [x13, #40]
    1e9c:	b	1aa4 <_Unwind_IteratePhdrCallback+0x114>
    1ea0:	ldr	x1, [x19, #8]
    1ea4:	b	1d04 <_Unwind_IteratePhdrCallback+0x374>
    1ea8:	cmp	w1, #0x4
    1eac:	b.ne	1cd4 <_Unwind_IteratePhdrCallback+0x344>  // b.any
    1eb0:	mov	x2, #0x10                  	// #16
    1eb4:	b	1dd8 <_Unwind_IteratePhdrCallback+0x448>
    1eb8:	mov	x2, #0x10                  	// #16
    1ebc:	cbz	w1, 1dd8 <_Unwind_IteratePhdrCallback+0x448>
    1ec0:	bl	0 <abort>
    1ec4:	mov	x2, #0xa                   	// #10
    1ec8:	b	1dd8 <_Unwind_IteratePhdrCallback+0x448>
    1ecc:	mov	x2, #0x8                   	// #8
    1ed0:	b	1dd8 <_Unwind_IteratePhdrCallback+0x448>
    1ed4:	nop

0000000000001ed8 <__register_frame_info_bases>:
    1ed8:	cbz	x0, 1f88 <__register_frame_info_bases+0xb0>
    1edc:	stp	x29, x30, [sp, #-48]!
    1ee0:	mov	x29, sp
    1ee4:	stp	x19, x20, [sp, #16]
    1ee8:	mov	x19, x1
    1eec:	ldr	w1, [x0]
    1ef0:	cbz	w1, 1f64 <__register_frame_info_bases+0x8c>
    1ef4:	adrp	x20, 0 <__pthread_key_create>
    1ef8:	mov	x1, #0xffffffffffffffff    	// #-1
    1efc:	str	x21, [sp, #32]
    1f00:	mov	x4, #0x7f8                 	// #2040
    1f04:	stp	x1, x2, [x19]
    1f08:	adrp	x21, 0 <fde_unencoded_compare>
    1f0c:	ldr	x1, [x20]
    1f10:	stp	x3, x0, [x19, #16]
    1f14:	str	x4, [x19, #32]
    1f18:	cbz	x1, 1f28 <__register_frame_info_bases+0x50>
    1f1c:	add	x0, x21, #0x0
    1f20:	add	x0, x0, #0x1a0
    1f24:	bl	0 <pthread_mutex_lock>
    1f28:	add	x0, x21, #0x0
    1f2c:	ldr	w1, [x0, #472]
    1f30:	ldr	x2, [x0, #464]
    1f34:	str	x2, [x19, #40]
    1f38:	str	x19, [x0, #464]
    1f3c:	cbz	w1, 1f70 <__register_frame_info_bases+0x98>
    1f40:	ldr	x20, [x20]
    1f44:	cbz	x20, 1f60 <__register_frame_info_bases+0x88>
    1f48:	add	x0, x21, #0x0
    1f4c:	ldp	x19, x20, [sp, #16]
    1f50:	add	x0, x0, #0x1a0
    1f54:	ldr	x21, [sp, #32]
    1f58:	ldp	x29, x30, [sp], #48
    1f5c:	b	0 <pthread_mutex_unlock>
    1f60:	ldr	x21, [sp, #32]
    1f64:	ldp	x19, x20, [sp, #16]
    1f68:	ldp	x29, x30, [sp], #48
    1f6c:	ret
    1f70:	add	x0, x0, #0x1d8
    1f74:	mov	w1, #0x1                   	// #1
    1f78:	str	w1, [x0]
    1f7c:	ldr	x20, [x20]
    1f80:	cbnz	x20, 1f48 <__register_frame_info_bases+0x70>
    1f84:	b	1f60 <__register_frame_info_bases+0x88>
    1f88:	ret
    1f8c:	nop

0000000000001f90 <__register_frame_info>:
    1f90:	cbz	x0, 2044 <__register_frame_info+0xb4>
    1f94:	stp	x29, x30, [sp, #-48]!
    1f98:	mov	x29, sp
    1f9c:	stp	x19, x20, [sp, #16]
    1fa0:	mov	x19, x1
    1fa4:	ldr	w1, [x0]
    1fa8:	cbz	w1, 2020 <__register_frame_info+0x90>
    1fac:	adrp	x1, 0 <fde_unencoded_compare>
    1fb0:	adrp	x20, 0 <__pthread_key_create>
    1fb4:	str	x21, [sp, #32]
    1fb8:	mov	x2, #0x7f8                 	// #2040
    1fbc:	ldr	q0, [x1]
    1fc0:	stp	xzr, x0, [x19, #16]
    1fc4:	adrp	x21, 0 <fde_unencoded_compare>
    1fc8:	ldr	x1, [x20]
    1fcc:	str	x2, [x19, #32]
    1fd0:	str	q0, [x19]
    1fd4:	cbz	x1, 1fe4 <__register_frame_info+0x54>
    1fd8:	add	x0, x21, #0x0
    1fdc:	add	x0, x0, #0x1a0
    1fe0:	bl	0 <pthread_mutex_lock>
    1fe4:	add	x0, x21, #0x0
    1fe8:	ldr	w1, [x0, #472]
    1fec:	ldr	x2, [x0, #464]
    1ff0:	str	x2, [x19, #40]
    1ff4:	str	x19, [x0, #464]
    1ff8:	cbz	w1, 202c <__register_frame_info+0x9c>
    1ffc:	ldr	x20, [x20]
    2000:	cbz	x20, 201c <__register_frame_info+0x8c>
    2004:	add	x0, x21, #0x0
    2008:	ldp	x19, x20, [sp, #16]
    200c:	add	x0, x0, #0x1a0
    2010:	ldr	x21, [sp, #32]
    2014:	ldp	x29, x30, [sp], #48
    2018:	b	0 <pthread_mutex_unlock>
    201c:	ldr	x21, [sp, #32]
    2020:	ldp	x19, x20, [sp, #16]
    2024:	ldp	x29, x30, [sp], #48
    2028:	ret
    202c:	add	x0, x0, #0x1d8
    2030:	mov	w1, #0x1                   	// #1
    2034:	str	w1, [x0]
    2038:	ldr	x20, [x20]
    203c:	cbnz	x20, 2004 <__register_frame_info+0x74>
    2040:	b	201c <__register_frame_info+0x8c>
    2044:	ret

0000000000002048 <__register_frame>:
    2048:	stp	x29, x30, [sp, #-48]!
    204c:	mov	x29, sp
    2050:	stp	x19, x20, [sp, #16]
    2054:	mov	x19, x0
    2058:	ldr	w0, [x0]
    205c:	cbnz	w0, 206c <__register_frame+0x24>
    2060:	ldp	x19, x20, [sp, #16]
    2064:	ldp	x29, x30, [sp], #48
    2068:	ret
    206c:	mov	x0, #0x30                  	// #48
    2070:	stp	x21, x22, [sp, #32]
    2074:	bl	0 <malloc>
    2078:	mov	x20, x0
    207c:	adrp	x0, 0 <fde_unencoded_compare>
    2080:	adrp	x21, 0 <__pthread_key_create>
    2084:	mov	x1, #0x7f8                 	// #2040
    2088:	ldr	q0, [x0]
    208c:	stp	xzr, x19, [x20, #16]
    2090:	adrp	x22, 0 <fde_unencoded_compare>
    2094:	ldr	x0, [x21]
    2098:	str	x1, [x20, #32]
    209c:	str	q0, [x20]
    20a0:	cbz	x0, 20b0 <__register_frame+0x68>
    20a4:	add	x0, x22, #0x0
    20a8:	add	x0, x0, #0x1a0
    20ac:	bl	0 <pthread_mutex_lock>
    20b0:	add	x0, x22, #0x0
    20b4:	ldr	w1, [x0, #472]
    20b8:	ldr	x2, [x0, #464]
    20bc:	str	x2, [x20, #40]
    20c0:	str	x20, [x0, #464]
    20c4:	cbz	w1, 20f8 <__register_frame+0xb0>
    20c8:	ldr	x21, [x21]
    20cc:	cbz	x21, 20e8 <__register_frame+0xa0>
    20d0:	add	x0, x22, #0x0
    20d4:	ldp	x19, x20, [sp, #16]
    20d8:	add	x0, x0, #0x1a0
    20dc:	ldp	x21, x22, [sp, #32]
    20e0:	ldp	x29, x30, [sp], #48
    20e4:	b	0 <pthread_mutex_unlock>
    20e8:	ldp	x19, x20, [sp, #16]
    20ec:	ldp	x21, x22, [sp, #32]
    20f0:	ldp	x29, x30, [sp], #48
    20f4:	ret
    20f8:	add	x0, x0, #0x1d8
    20fc:	mov	w1, #0x1                   	// #1
    2100:	str	w1, [x0]
    2104:	b	20c8 <__register_frame+0x80>

0000000000002108 <__register_frame_info_table_bases>:
    2108:	stp	x29, x30, [sp, #-48]!
    210c:	mov	x5, #0xffffffffffffffff    	// #-1
    2110:	mov	x4, #0x7fa                 	// #2042
    2114:	mov	x29, sp
    2118:	stp	x19, x20, [sp, #16]
    211c:	adrp	x20, 0 <__pthread_key_create>
    2120:	mov	x19, x1
    2124:	ldr	x1, [x20]
    2128:	str	x21, [sp, #32]
    212c:	stp	x5, x2, [x19]
    2130:	adrp	x21, 0 <fde_unencoded_compare>
    2134:	stp	x3, x0, [x19, #16]
    2138:	str	x4, [x19, #32]
    213c:	cbz	x1, 214c <__register_frame_info_table_bases+0x44>
    2140:	add	x0, x21, #0x0
    2144:	add	x0, x0, #0x1a0
    2148:	bl	0 <pthread_mutex_lock>
    214c:	add	x1, x21, #0x0
    2150:	ldr	w0, [x1, #472]
    2154:	ldr	x2, [x1, #464]
    2158:	str	x2, [x19, #40]
    215c:	str	x19, [x1, #464]
    2160:	cbz	w0, 2194 <__register_frame_info_table_bases+0x8c>
    2164:	ldr	x20, [x20]
    2168:	cbz	x20, 2184 <__register_frame_info_table_bases+0x7c>
    216c:	add	x0, x21, #0x0
    2170:	ldp	x19, x20, [sp, #16]
    2174:	add	x0, x0, #0x1a0
    2178:	ldr	x21, [sp, #32]
    217c:	ldp	x29, x30, [sp], #48
    2180:	b	0 <pthread_mutex_unlock>
    2184:	ldp	x19, x20, [sp, #16]
    2188:	ldr	x21, [sp, #32]
    218c:	ldp	x29, x30, [sp], #48
    2190:	ret
    2194:	add	x1, x1, #0x1d8
    2198:	mov	w0, #0x1                   	// #1
    219c:	str	w0, [x1]
    21a0:	b	2164 <__register_frame_info_table_bases+0x5c>
    21a4:	nop

00000000000021a8 <__register_frame_info_table>:
    21a8:	stp	x29, x30, [sp, #-48]!
    21ac:	mov	x2, #0x7fa                 	// #2042
    21b0:	mov	x29, sp
    21b4:	stp	x19, x20, [sp, #16]
    21b8:	mov	x19, x1
    21bc:	adrp	x1, 0 <fde_unencoded_compare>
    21c0:	adrp	x20, 0 <__pthread_key_create>
    21c4:	str	x21, [sp, #32]
    21c8:	ldr	q0, [x1]
    21cc:	stp	xzr, x0, [x19, #16]
    21d0:	adrp	x21, 0 <fde_unencoded_compare>
    21d4:	ldr	x1, [x20]
    21d8:	str	x2, [x19, #32]
    21dc:	str	q0, [x19]
    21e0:	cbz	x1, 21f0 <__register_frame_info_table+0x48>
    21e4:	add	x0, x21, #0x0
    21e8:	add	x0, x0, #0x1a0
    21ec:	bl	0 <pthread_mutex_lock>
    21f0:	add	x1, x21, #0x0
    21f4:	ldr	w0, [x1, #472]
    21f8:	ldr	x2, [x1, #464]
    21fc:	str	x2, [x19, #40]
    2200:	str	x19, [x1, #464]
    2204:	cbz	w0, 2238 <__register_frame_info_table+0x90>
    2208:	ldr	x20, [x20]
    220c:	cbz	x20, 2228 <__register_frame_info_table+0x80>
    2210:	add	x0, x21, #0x0
    2214:	ldp	x19, x20, [sp, #16]
    2218:	add	x0, x0, #0x1a0
    221c:	ldr	x21, [sp, #32]
    2220:	ldp	x29, x30, [sp], #48
    2224:	b	0 <pthread_mutex_unlock>
    2228:	ldp	x19, x20, [sp, #16]
    222c:	ldr	x21, [sp, #32]
    2230:	ldp	x29, x30, [sp], #48
    2234:	ret
    2238:	add	x1, x1, #0x1d8
    223c:	mov	w0, #0x1                   	// #1
    2240:	str	w0, [x1]
    2244:	b	2208 <__register_frame_info_table+0x60>

0000000000002248 <__register_frame_table>:
    2248:	stp	x29, x30, [sp, #-48]!
    224c:	mov	x29, sp
    2250:	stp	x19, x20, [sp, #16]
    2254:	adrp	x20, 0 <__pthread_key_create>
    2258:	stp	x21, x22, [sp, #32]
    225c:	mov	x22, x0
    2260:	mov	x0, #0x30                  	// #48
    2264:	bl	0 <malloc>
    2268:	mov	x19, x0
    226c:	adrp	x0, 0 <fde_unencoded_compare>
    2270:	mov	x1, #0x7fa                 	// #2042
    2274:	adrp	x21, 0 <fde_unencoded_compare>
    2278:	ldr	q0, [x0]
    227c:	stp	xzr, x22, [x19, #16]
    2280:	ldr	x0, [x20]
    2284:	str	x1, [x19, #32]
    2288:	str	q0, [x19]
    228c:	cbz	x0, 229c <__register_frame_table+0x54>
    2290:	add	x0, x21, #0x0
    2294:	add	x0, x0, #0x1a0
    2298:	bl	0 <pthread_mutex_lock>
    229c:	add	x1, x21, #0x0
    22a0:	ldr	w0, [x1, #472]
    22a4:	ldr	x2, [x1, #464]
    22a8:	str	x2, [x19, #40]
    22ac:	str	x19, [x1, #464]
    22b0:	cbz	w0, 22e4 <__register_frame_table+0x9c>
    22b4:	ldr	x20, [x20]
    22b8:	cbz	x20, 22d4 <__register_frame_table+0x8c>
    22bc:	add	x0, x21, #0x0
    22c0:	ldp	x19, x20, [sp, #16]
    22c4:	add	x0, x0, #0x1a0
    22c8:	ldp	x21, x22, [sp, #32]
    22cc:	ldp	x29, x30, [sp], #48
    22d0:	b	0 <pthread_mutex_unlock>
    22d4:	ldp	x19, x20, [sp, #16]
    22d8:	ldp	x21, x22, [sp, #32]
    22dc:	ldp	x29, x30, [sp], #48
    22e0:	ret
    22e4:	add	x1, x1, #0x1d8
    22e8:	mov	w0, #0x1                   	// #1
    22ec:	str	w0, [x1]
    22f0:	b	22b4 <__register_frame_table+0x6c>
    22f4:	nop

00000000000022f8 <__deregister_frame_info_bases>:
    22f8:	stp	x29, x30, [sp, #-48]!
    22fc:	mov	x29, sp
    2300:	stp	x19, x20, [sp, #16]
    2304:	cbz	x0, 23d0 <__deregister_frame_info_bases+0xd8>
    2308:	mov	x20, x0
    230c:	ldr	w0, [x0]
    2310:	cbz	w0, 23d0 <__deregister_frame_info_bases+0xd8>
    2314:	stp	x21, x22, [sp, #32]
    2318:	adrp	x21, 0 <__pthread_key_create>
    231c:	adrp	x22, 0 <fde_unencoded_compare>
    2320:	ldr	x0, [x21]
    2324:	cbz	x0, 2334 <__deregister_frame_info_bases+0x3c>
    2328:	add	x0, x22, #0x0
    232c:	add	x0, x0, #0x1a0
    2330:	bl	0 <pthread_mutex_lock>
    2334:	add	x2, x22, #0x0
    2338:	ldr	x1, [x2, #464]
    233c:	cbz	x1, 2384 <__deregister_frame_info_bases+0x8c>
    2340:	add	x2, x2, #0x1d0
    2344:	b	2350 <__deregister_frame_info_bases+0x58>
    2348:	add	x2, x19, #0x28
    234c:	cbz	x1, 2384 <__deregister_frame_info_bases+0x8c>
    2350:	ldr	x0, [x1, #24]
    2354:	mov	x19, x1
    2358:	ldr	x1, [x1, #40]
    235c:	cmp	x20, x0
    2360:	b.ne	2348 <__deregister_frame_info_bases+0x50>  // b.any
    2364:	str	x1, [x2]
    2368:	ldr	x21, [x21]
    236c:	cbnz	x21, 23e4 <__deregister_frame_info_bases+0xec>
    2370:	mov	x0, x19
    2374:	ldp	x19, x20, [sp, #16]
    2378:	ldp	x21, x22, [sp, #32]
    237c:	ldp	x29, x30, [sp], #48
    2380:	ret
    2384:	add	x2, x22, #0x0
    2388:	ldr	x19, [x2, #480]
    238c:	cbz	x19, 2404 <__deregister_frame_info_bases+0x10c>
    2390:	add	x2, x2, #0x1e0
    2394:	b	23b0 <__deregister_frame_info_bases+0xb8>
    2398:	ldr	x1, [x0]
    239c:	cmp	x20, x1
    23a0:	b.eq	241c <__deregister_frame_info_bases+0x124>  // b.none
    23a4:	add	x2, x19, #0x28
    23a8:	ldr	x19, [x19, #40]
    23ac:	cbz	x19, 2404 <__deregister_frame_info_bases+0x10c>
    23b0:	ldrb	w1, [x19, #32]
    23b4:	ldr	x0, [x19, #24]
    23b8:	tbnz	w1, #0, 2398 <__deregister_frame_info_bases+0xa0>
    23bc:	cmp	x20, x0
    23c0:	b.ne	23a4 <__deregister_frame_info_bases+0xac>  // b.any
    23c4:	ldr	x0, [x19, #40]
    23c8:	str	x0, [x2]
    23cc:	b	2368 <__deregister_frame_info_bases+0x70>
    23d0:	mov	x19, #0x0                   	// #0
    23d4:	mov	x0, x19
    23d8:	ldp	x19, x20, [sp, #16]
    23dc:	ldp	x29, x30, [sp], #48
    23e0:	ret
    23e4:	add	x0, x22, #0x0
    23e8:	add	x0, x0, #0x1a0
    23ec:	bl	0 <pthread_mutex_unlock>
    23f0:	mov	x0, x19
    23f4:	ldp	x19, x20, [sp, #16]
    23f8:	ldp	x21, x22, [sp, #32]
    23fc:	ldp	x29, x30, [sp], #48
    2400:	ret
    2404:	ldr	x21, [x21]
    2408:	cbz	x21, 2418 <__deregister_frame_info_bases+0x120>
    240c:	add	x0, x22, #0x0
    2410:	add	x0, x0, #0x1a0
    2414:	bl	0 <pthread_mutex_unlock>
    2418:	bl	0 <abort>
    241c:	ldr	x1, [x19, #40]
    2420:	str	x1, [x2]
    2424:	bl	0 <free>
    2428:	b	2368 <__deregister_frame_info_bases+0x70>
    242c:	nop

0000000000002430 <__deregister_frame_info>:
    2430:	b	22f8 <__deregister_frame_info_bases>
    2434:	nop

0000000000002438 <__deregister_frame>:
    2438:	ldr	w1, [x0]
    243c:	cbnz	w1, 2444 <__deregister_frame+0xc>
    2440:	ret
    2444:	stp	x29, x30, [sp, #-16]!
    2448:	mov	x29, sp
    244c:	bl	22f8 <__deregister_frame_info_bases>
    2450:	ldp	x29, x30, [sp], #16
    2454:	b	0 <free>

0000000000002458 <_Unwind_Find_FDE>:
    2458:	stp	x29, x30, [sp, #-128]!
    245c:	mov	x29, sp
    2460:	stp	x23, x24, [sp, #48]
    2464:	adrp	x23, 0 <fde_unencoded_compare>
    2468:	add	x2, x23, #0x0
    246c:	stp	x19, x20, [sp, #16]
    2470:	mov	x20, x0
    2474:	add	x0, x2, #0x1d8
    2478:	stp	x21, x22, [sp, #32]
    247c:	mov	x22, x1
    2480:	ldr	w0, [x0]
    2484:	cbnz	w0, 24e4 <_Unwind_Find_FDE+0x8c>
    2488:	movi	v0.4s, #0x0
    248c:	mov	w2, #0x1                   	// #1
    2490:	adrp	x0, 0 <fde_unencoded_compare>
    2494:	add	x1, sp, #0x50
    2498:	add	x0, x0, #0x0
    249c:	str	x20, [sp, #80]
    24a0:	str	w2, [sp, #120]
    24a4:	stur	q0, [sp, #88]
    24a8:	stur	q0, [sp, #104]
    24ac:	bl	0 <dl_iterate_phdr>
    24b0:	tbnz	w0, #31, 25fc <_Unwind_Find_FDE+0x1a4>
    24b4:	ldr	x21, [sp, #112]
    24b8:	cbz	x21, 24cc <_Unwind_Find_FDE+0x74>
    24bc:	ldur	q0, [sp, #88]
    24c0:	ldr	x0, [sp, #104]
    24c4:	str	x0, [x22, #16]
    24c8:	str	q0, [x22]
    24cc:	mov	x0, x21
    24d0:	ldp	x19, x20, [sp, #16]
    24d4:	ldp	x21, x22, [sp, #32]
    24d8:	ldp	x23, x24, [sp, #48]
    24dc:	ldp	x29, x30, [sp], #128
    24e0:	ret
    24e4:	stp	x25, x26, [sp, #64]
    24e8:	adrp	x25, 0 <__pthread_key_create>
    24ec:	ldr	x0, [x25]
    24f0:	cbz	x0, 24fc <_Unwind_Find_FDE+0xa4>
    24f4:	add	x0, x2, #0x1a0
    24f8:	bl	0 <pthread_mutex_lock>
    24fc:	add	x0, x23, #0x0
    2500:	ldr	x19, [x0, #480]
    2504:	cbnz	x19, 2514 <_Unwind_Find_FDE+0xbc>
    2508:	b	2594 <_Unwind_Find_FDE+0x13c>
    250c:	ldr	x19, [x19, #40]
    2510:	cbz	x19, 2594 <_Unwind_Find_FDE+0x13c>
    2514:	ldr	x0, [x19]
    2518:	cmp	x20, x0
    251c:	b.cc	250c <_Unwind_Find_FDE+0xb4>  // b.lo, b.ul, b.last
    2520:	mov	x1, x20
    2524:	mov	x0, x19
    2528:	bl	cd0 <search_object>
    252c:	mov	x21, x0
    2530:	cbz	x0, 2594 <_Unwind_Find_FDE+0x13c>
    2534:	ldr	x25, [x25]
    2538:	cbnz	x25, 2604 <_Unwind_Find_FDE+0x1ac>
    253c:	ldur	q0, [x19, #8]
    2540:	str	q0, [x22]
    2544:	ldrb	w0, [x19, #32]
    2548:	tbnz	w0, #2, 2614 <_Unwind_Find_FDE+0x1bc>
    254c:	ldrh	w0, [x19, #32]
    2550:	ubfx	x0, x0, #3, #8
    2554:	cmp	w0, #0xff
    2558:	b.eq	2644 <_Unwind_Find_FDE+0x1ec>  // b.none
    255c:	and	w1, w0, #0x70
    2560:	cmp	w1, #0x20
    2564:	b.eq	266c <_Unwind_Find_FDE+0x214>  // b.none
    2568:	b.ls	263c <_Unwind_Find_FDE+0x1e4>  // b.plast
    256c:	cmp	w1, #0x30
    2570:	b.ne	262c <_Unwind_Find_FDE+0x1d4>  // b.any
    2574:	ldr	x1, [x19, #16]
    2578:	add	x3, sp, #0x50
    257c:	add	x2, x21, #0x8
    2580:	bl	20 <read_encoded_value_with_base>
    2584:	ldr	x0, [sp, #80]
    2588:	ldp	x25, x26, [sp, #64]
    258c:	str	x0, [x22, #16]
    2590:	b	24cc <_Unwind_Find_FDE+0x74>
    2594:	add	x24, x23, #0x0
    2598:	add	x26, x24, #0x1e0
    259c:	nop
    25a0:	ldr	x19, [x24, #464]
    25a4:	cbz	x19, 264c <_Unwind_Find_FDE+0x1f4>
    25a8:	ldr	x2, [x19, #40]
    25ac:	mov	x1, x20
    25b0:	mov	x0, x19
    25b4:	str	x2, [x24, #464]
    25b8:	bl	cd0 <search_object>
    25bc:	mov	x21, x0
    25c0:	ldr	x2, [x24, #480]
    25c4:	cbz	x2, 2664 <_Unwind_Find_FDE+0x20c>
    25c8:	mov	x0, x26
    25cc:	ldr	x3, [x19]
    25d0:	b	25e0 <_Unwind_Find_FDE+0x188>
    25d4:	add	x0, x2, #0x28
    25d8:	ldr	x2, [x2, #40]
    25dc:	cbz	x2, 25ec <_Unwind_Find_FDE+0x194>
    25e0:	ldr	x1, [x2]
    25e4:	cmp	x1, x3
    25e8:	b.cs	25d4 <_Unwind_Find_FDE+0x17c>  // b.hs, b.nlast
    25ec:	str	x2, [x19, #40]
    25f0:	str	x19, [x0]
    25f4:	cbz	x21, 25a0 <_Unwind_Find_FDE+0x148>
    25f8:	b	2534 <_Unwind_Find_FDE+0xdc>
    25fc:	mov	x21, #0x0                   	// #0
    2600:	b	24cc <_Unwind_Find_FDE+0x74>
    2604:	add	x0, x23, #0x0
    2608:	add	x0, x0, #0x1a0
    260c:	bl	0 <pthread_mutex_unlock>
    2610:	b	253c <_Unwind_Find_FDE+0xe4>
    2614:	add	x1, x21, #0x4
    2618:	ldrsw	x0, [x21, #4]
    261c:	sub	x0, x1, x0
    2620:	bl	180 <get_cie_encoding>
    2624:	and	w0, w0, #0xff
    2628:	b	2554 <_Unwind_Find_FDE+0xfc>
    262c:	cmp	w1, #0x50
    2630:	mov	x1, #0x0                   	// #0
    2634:	b.eq	2578 <_Unwind_Find_FDE+0x120>  // b.none
    2638:	bl	0 <abort>
    263c:	tst	w0, #0x60
    2640:	b.ne	2638 <_Unwind_Find_FDE+0x1e0>  // b.any
    2644:	mov	x1, #0x0                   	// #0
    2648:	b	2578 <_Unwind_Find_FDE+0x120>
    264c:	ldr	x25, [x25]
    2650:	cbz	x25, 2674 <_Unwind_Find_FDE+0x21c>
    2654:	add	x0, x24, #0x1a0
    2658:	bl	0 <pthread_mutex_unlock>
    265c:	ldp	x25, x26, [sp, #64]
    2660:	b	2488 <_Unwind_Find_FDE+0x30>
    2664:	mov	x0, x26
    2668:	b	25ec <_Unwind_Find_FDE+0x194>
    266c:	ldr	x1, [x19, #8]
    2670:	b	2578 <_Unwind_Find_FDE+0x120>
    2674:	ldp	x25, x26, [sp, #64]
    2678:	b	2488 <_Unwind_Find_FDE+0x30>

unwind-sjlj.o:     file format elf64-littleaarch64


unwind-c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <read_encoded_value_with_base>:
   0:	and	w5, w0, #0xff
   4:	cmp	w5, #0x50
   8:	b.eq	120 <read_encoded_value_with_base+0x120>  // b.none
   c:	and	w4, w5, #0xf
  10:	cmp	w4, #0x4
  14:	b.eq	30 <read_encoded_value_with_base+0x30>  // b.none
  18:	b.ls	44 <read_encoded_value_with_base+0x44>  // b.plast
  1c:	cmp	w4, #0xb
  20:	b.eq	144 <read_encoded_value_with_base+0x144>  // b.none
  24:	b.ls	a0 <read_encoded_value_with_base+0xa0>  // b.plast
  28:	cmp	w4, #0xc
  2c:	b.ne	154 <read_encoded_value_with_base+0x154>  // b.any
  30:	mov	x0, x2
  34:	ldr	x4, [x0], #8
  38:	cbnz	x4, 100 <read_encoded_value_with_base+0x100>
  3c:	str	x4, [x3]
  40:	ret
  44:	cmp	w4, #0x2
  48:	b.eq	134 <read_encoded_value_with_base+0x134>  // b.none
  4c:	b.ls	68 <read_encoded_value_with_base+0x68>  // b.plast
  50:	cmp	w4, #0x3
  54:	b.ne	154 <read_encoded_value_with_base+0x154>  // b.any
  58:	mov	x0, x2
  5c:	ldr	w4, [x0], #4
  60:	cbz	x4, 3c <read_encoded_value_with_base+0x3c>
  64:	b	100 <read_encoded_value_with_base+0x100>
  68:	cbz	w4, 30 <read_encoded_value_with_base+0x30>
  6c:	cmp	w4, #0x1
  70:	b.ne	154 <read_encoded_value_with_base+0x154>  // b.any
  74:	mov	x0, x2
  78:	mov	x4, #0x0                   	// #0
  7c:	mov	w7, #0x0                   	// #0
  80:	ldrb	w8, [x0], #1
  84:	and	x6, x8, #0x7f
  88:	lsl	x6, x6, x7
  8c:	add	w7, w7, #0x7
  90:	orr	x4, x4, x6
  94:	tbnz	w8, #7, 80 <read_encoded_value_with_base+0x80>
  98:	cbz	x4, 3c <read_encoded_value_with_base+0x3c>
  9c:	b	100 <read_encoded_value_with_base+0x100>
  a0:	cmp	w4, #0x9
  a4:	b.eq	c0 <read_encoded_value_with_base+0xc0>  // b.none
  a8:	cmp	w4, #0xa
  ac:	b.ne	154 <read_encoded_value_with_base+0x154>  // b.any
  b0:	mov	x0, x2
  b4:	ldrsh	x4, [x0], #2
  b8:	cbz	x4, 3c <read_encoded_value_with_base+0x3c>
  bc:	b	100 <read_encoded_value_with_base+0x100>
  c0:	mov	x0, x2
  c4:	mov	x4, #0x0                   	// #0
  c8:	mov	w7, #0x0                   	// #0
  cc:	ldrb	w8, [x0], #1
  d0:	and	x6, x8, #0x7f
  d4:	lsl	x6, x6, x7
  d8:	add	w7, w7, #0x7
  dc:	orr	x4, x4, x6
  e0:	tbnz	w8, #7, cc <read_encoded_value_with_base+0xcc>
  e4:	cmp	w7, #0x3f
  e8:	b.hi	38 <read_encoded_value_with_base+0x38>  // b.pmore
  ec:	tbz	w8, #6, 38 <read_encoded_value_with_base+0x38>
  f0:	mov	x6, #0xffffffffffffffff    	// #-1
  f4:	lsl	x7, x6, x7
  f8:	orr	x4, x4, x7
  fc:	nop
 100:	and	w6, w5, #0x70
 104:	cmp	w6, #0x10
 108:	csel	x1, x2, x1, eq  // eq = none
 10c:	add	x4, x4, x1
 110:	tbz	w5, #7, 3c <read_encoded_value_with_base+0x3c>
 114:	ldr	x4, [x4]
 118:	str	x4, [x3]
 11c:	ret
 120:	add	x0, x2, #0x7
 124:	and	x0, x0, #0xfffffffffffffff8
 128:	ldr	x4, [x0], #8
 12c:	str	x4, [x3]
 130:	ret
 134:	mov	x0, x2
 138:	ldrh	w4, [x0], #2
 13c:	cbz	x4, 3c <read_encoded_value_with_base+0x3c>
 140:	b	100 <read_encoded_value_with_base+0x100>
 144:	mov	x0, x2
 148:	ldrsw	x4, [x0], #4
 14c:	cbz	x4, 3c <read_encoded_value_with_base+0x3c>
 150:	b	100 <read_encoded_value_with_base+0x100>
 154:	stp	x29, x30, [sp, #-16]!
 158:	mov	x29, sp
 15c:	bl	0 <abort>

0000000000000160 <__gcc_personality_v0>:
 160:	stp	x29, x30, [sp, #-160]!
 164:	cmp	w0, #0x1
 168:	mov	x29, sp
 16c:	str	wzr, [sp, #84]
 170:	b.ne	184 <__gcc_personality_v0+0x24>  // b.any
 174:	tbnz	w1, #1, 190 <__gcc_personality_v0+0x30>
 178:	mov	w0, #0x8                   	// #8
 17c:	ldp	x29, x30, [sp], #160
 180:	ret
 184:	mov	w0, #0x3                   	// #3
 188:	ldp	x29, x30, [sp], #160
 18c:	ret
 190:	mov	x0, x4
 194:	stp	x19, x20, [sp, #16]
 198:	mov	x20, x4
 19c:	stp	x21, x22, [sp, #32]
 1a0:	mov	x22, x3
 1a4:	bl	0 <_Unwind_GetLanguageSpecificData>
 1a8:	mov	x19, x0
 1ac:	cbz	x0, 1f8 <__gcc_personality_v0+0x98>
 1b0:	mov	x0, #0x0                   	// #0
 1b4:	cbz	x20, 1c0 <__gcc_personality_v0+0x60>
 1b8:	mov	x0, x20
 1bc:	bl	0 <_Unwind_GetRegionStart>
 1c0:	str	x0, [sp, #112]
 1c4:	ldrb	w21, [x19], #1
 1c8:	cmp	w21, #0xff
 1cc:	b.eq	508 <__gcc_personality_v0+0x3a8>  // b.none
 1d0:	and	w0, w21, #0x70
 1d4:	cmp	w0, #0x30
 1d8:	b.eq	54c <__gcc_personality_v0+0x3ec>  // b.none
 1dc:	b.hi	208 <__gcc_personality_v0+0xa8>  // b.pmore
 1e0:	cmp	w0, #0x20
 1e4:	b.ne	220 <__gcc_personality_v0+0xc0>  // b.any
 1e8:	mov	x0, x20
 1ec:	bl	0 <_Unwind_GetTextRelBase>
 1f0:	mov	x1, x0
 1f4:	b	244 <__gcc_personality_v0+0xe4>
 1f8:	mov	w0, #0x8                   	// #8
 1fc:	ldp	x19, x20, [sp, #16]
 200:	ldp	x21, x22, [sp, #32]
 204:	b	17c <__gcc_personality_v0+0x1c>
 208:	cmp	w0, #0x40
 20c:	b.ne	238 <__gcc_personality_v0+0xd8>  // b.any
 210:	mov	x0, x20
 214:	bl	0 <_Unwind_GetRegionStart>
 218:	mov	x1, x0
 21c:	b	244 <__gcc_personality_v0+0xe4>
 220:	b.hi	22c <__gcc_personality_v0+0xcc>  // b.pmore
 224:	tst	w21, #0x60
 228:	b.eq	544 <__gcc_personality_v0+0x3e4>  // b.none
 22c:	stp	x23, x24, [sp, #48]
 230:	stp	x25, x26, [sp, #64]
 234:	bl	0 <abort>
 238:	cmp	w0, #0x50
 23c:	mov	x1, #0x0                   	// #0
 240:	b.ne	22c <__gcc_personality_v0+0xcc>  // b.any
 244:	mov	x2, x19
 248:	mov	w0, w21
 24c:	add	x3, sp, #0x78
 250:	bl	0 <read_encoded_value_with_base>
 254:	mov	x19, x0
 258:	ldrb	w0, [x19], #1
 25c:	strb	w0, [sp, #152]
 260:	cmp	w0, #0xff
 264:	b.eq	510 <__gcc_personality_v0+0x3b0>  // b.none
 268:	mov	x3, #0x0                   	// #0
 26c:	mov	w1, #0x0                   	// #0
 270:	ldrb	w2, [x19], #1
 274:	and	x0, x2, #0x7f
 278:	lsl	x0, x0, x1
 27c:	add	w1, w1, #0x7
 280:	orr	x3, x3, x0
 284:	tbnz	w2, #7, 270 <__gcc_personality_v0+0x110>
 288:	add	x3, x19, x3
 28c:	str	x3, [sp, #136]
 290:	ldrb	w0, [x19], #1
 294:	mov	x3, #0x0                   	// #0
 298:	mov	w1, #0x0                   	// #0
 29c:	strb	w0, [sp, #153]
 2a0:	ldrb	w2, [x19], #1
 2a4:	and	x0, x2, #0x7f
 2a8:	lsl	x0, x0, x1
 2ac:	add	w1, w1, #0x7
 2b0:	orr	x3, x3, x0
 2b4:	tbnz	w2, #7, 2a0 <__gcc_personality_v0+0x140>
 2b8:	add	x3, x19, x3
 2bc:	add	x1, sp, #0x54
 2c0:	mov	x0, x20
 2c4:	str	x3, [sp, #144]
 2c8:	bl	0 <_Unwind_GetIPInfo>
 2cc:	ldr	w2, [sp, #84]
 2d0:	ldr	x1, [sp, #144]
 2d4:	cmp	w2, #0x0
 2d8:	cset	x2, eq  // eq = none
 2dc:	sub	x21, x0, x2
 2e0:	cmp	x1, x19
 2e4:	b.ls	1f8 <__gcc_personality_v0+0x98>  // b.plast
 2e8:	stp	x23, x24, [sp, #48]
 2ec:	add	x24, sp, #0x60
 2f0:	add	x23, sp, #0x68
 2f4:	stp	x25, x26, [sp, #64]
 2f8:	add	x25, sp, #0x58
 2fc:	nop
 300:	ldrb	w26, [sp, #153]
 304:	cmp	w26, #0xff
 308:	b.eq	438 <__gcc_personality_v0+0x2d8>  // b.none
 30c:	and	w0, w26, #0x70
 310:	cmp	w0, #0x30
 314:	b.eq	4f8 <__gcc_personality_v0+0x398>  // b.none
 318:	b.hi	488 <__gcc_personality_v0+0x328>  // b.pmore
 31c:	cmp	w0, #0x20
 320:	b.ne	478 <__gcc_personality_v0+0x318>  // b.any
 324:	mov	x0, #0x0                   	// #0
 328:	bl	0 <_Unwind_GetTextRelBase>
 32c:	mov	x1, x0
 330:	mov	x2, x19
 334:	mov	w0, w26
 338:	mov	x3, x25
 33c:	bl	0 <read_encoded_value_with_base>
 340:	ldrb	w19, [sp, #153]
 344:	mov	x26, x0
 348:	cmp	w19, #0xff
 34c:	b.eq	428 <__gcc_personality_v0+0x2c8>  // b.none
 350:	and	w0, w19, #0x70
 354:	cmp	w0, #0x30
 358:	b.eq	4e8 <__gcc_personality_v0+0x388>  // b.none
 35c:	b.hi	450 <__gcc_personality_v0+0x2f0>  // b.pmore
 360:	cmp	w0, #0x20
 364:	b.ne	440 <__gcc_personality_v0+0x2e0>  // b.any
 368:	mov	x0, #0x0                   	// #0
 36c:	bl	0 <_Unwind_GetTextRelBase>
 370:	mov	x1, x0
 374:	nop
 378:	mov	x2, x26
 37c:	mov	w0, w19
 380:	mov	x3, x24
 384:	bl	0 <read_encoded_value_with_base>
 388:	ldrb	w19, [sp, #153]
 38c:	mov	x26, x0
 390:	cmp	w19, #0xff
 394:	b.eq	418 <__gcc_personality_v0+0x2b8>  // b.none
 398:	and	w0, w19, #0x70
 39c:	cmp	w0, #0x30
 3a0:	b.eq	4d8 <__gcc_personality_v0+0x378>  // b.none
 3a4:	b.hi	4a0 <__gcc_personality_v0+0x340>  // b.pmore
 3a8:	cmp	w0, #0x20
 3ac:	b.ne	468 <__gcc_personality_v0+0x308>  // b.any
 3b0:	mov	x0, #0x0                   	// #0
 3b4:	bl	0 <_Unwind_GetTextRelBase>
 3b8:	mov	x1, x0
 3bc:	nop
 3c0:	mov	w0, w19
 3c4:	mov	x2, x26
 3c8:	mov	x3, x23
 3cc:	bl	0 <read_encoded_value_with_base>
 3d0:	mov	x19, x0
 3d4:	nop
 3d8:	ldrsb	w0, [x19], #1
 3dc:	tbnz	w0, #31, 3d8 <__gcc_personality_v0+0x278>
 3e0:	ldr	x1, [sp, #88]
 3e4:	ldr	x0, [sp, #112]
 3e8:	add	x0, x0, x1
 3ec:	cmp	x0, x21
 3f0:	b.ls	4b8 <__gcc_personality_v0+0x358>  // b.plast
 3f4:	mov	w0, #0x8                   	// #8
 3f8:	ldp	x19, x20, [sp, #16]
 3fc:	ldp	x21, x22, [sp, #32]
 400:	ldp	x23, x24, [sp, #48]
 404:	ldp	x25, x26, [sp, #64]
 408:	ldp	x29, x30, [sp], #160
 40c:	ret
 410:	cmp	w0, #0x50
 414:	b.ne	234 <__gcc_personality_v0+0xd4>  // b.any
 418:	mov	x1, #0x0                   	// #0
 41c:	b	3c0 <__gcc_personality_v0+0x260>
 420:	cmp	w0, #0x50
 424:	b.ne	234 <__gcc_personality_v0+0xd4>  // b.any
 428:	mov	x1, #0x0                   	// #0
 42c:	b	378 <__gcc_personality_v0+0x218>
 430:	cmp	w0, #0x50
 434:	b.ne	234 <__gcc_personality_v0+0xd4>  // b.any
 438:	mov	x1, #0x0                   	// #0
 43c:	b	330 <__gcc_personality_v0+0x1d0>
 440:	b.hi	234 <__gcc_personality_v0+0xd4>  // b.pmore
 444:	tst	w19, #0x60
 448:	b.eq	428 <__gcc_personality_v0+0x2c8>  // b.none
 44c:	bl	0 <abort>
 450:	cmp	w0, #0x40
 454:	b.ne	420 <__gcc_personality_v0+0x2c0>  // b.any
 458:	mov	x0, #0x0                   	// #0
 45c:	bl	0 <_Unwind_GetRegionStart>
 460:	mov	x1, x0
 464:	b	378 <__gcc_personality_v0+0x218>
 468:	b.hi	234 <__gcc_personality_v0+0xd4>  // b.pmore
 46c:	tst	w19, #0x60
 470:	b.eq	418 <__gcc_personality_v0+0x2b8>  // b.none
 474:	bl	0 <abort>
 478:	b.hi	234 <__gcc_personality_v0+0xd4>  // b.pmore
 47c:	tst	w26, #0x60
 480:	b.eq	438 <__gcc_personality_v0+0x2d8>  // b.none
 484:	bl	0 <abort>
 488:	cmp	w0, #0x40
 48c:	b.ne	430 <__gcc_personality_v0+0x2d0>  // b.any
 490:	mov	x0, #0x0                   	// #0
 494:	bl	0 <_Unwind_GetRegionStart>
 498:	mov	x1, x0
 49c:	b	330 <__gcc_personality_v0+0x1d0>
 4a0:	cmp	w0, #0x40
 4a4:	b.ne	410 <__gcc_personality_v0+0x2b0>  // b.any
 4a8:	mov	x0, #0x0                   	// #0
 4ac:	bl	0 <_Unwind_GetRegionStart>
 4b0:	mov	x1, x0
 4b4:	b	3c0 <__gcc_personality_v0+0x260>
 4b8:	ldr	x1, [sp, #96]
 4bc:	add	x0, x0, x1
 4c0:	cmp	x0, x21
 4c4:	b.hi	518 <__gcc_personality_v0+0x3b8>  // b.pmore
 4c8:	ldr	x0, [sp, #144]
 4cc:	cmp	x0, x19
 4d0:	b.hi	300 <__gcc_personality_v0+0x1a0>  // b.pmore
 4d4:	b	52c <__gcc_personality_v0+0x3cc>
 4d8:	mov	x0, #0x0                   	// #0
 4dc:	bl	0 <_Unwind_GetDataRelBase>
 4e0:	mov	x1, x0
 4e4:	b	3c0 <__gcc_personality_v0+0x260>
 4e8:	mov	x0, #0x0                   	// #0
 4ec:	bl	0 <_Unwind_GetDataRelBase>
 4f0:	mov	x1, x0
 4f4:	b	378 <__gcc_personality_v0+0x218>
 4f8:	mov	x0, #0x0                   	// #0
 4fc:	bl	0 <_Unwind_GetDataRelBase>
 500:	mov	x1, x0
 504:	b	330 <__gcc_personality_v0+0x1d0>
 508:	str	x0, [sp, #120]
 50c:	b	258 <__gcc_personality_v0+0xf8>
 510:	str	xzr, [sp, #136]
 514:	b	290 <__gcc_personality_v0+0x130>
 518:	ldr	x0, [sp, #104]
 51c:	cbz	x0, 3f4 <__gcc_personality_v0+0x294>
 520:	ldr	x19, [sp, #120]
 524:	adds	x19, x0, x19
 528:	b.ne	55c <__gcc_personality_v0+0x3fc>  // b.any
 52c:	mov	w0, #0x8                   	// #8
 530:	ldp	x19, x20, [sp, #16]
 534:	ldp	x21, x22, [sp, #32]
 538:	ldp	x23, x24, [sp, #48]
 53c:	ldp	x25, x26, [sp, #64]
 540:	b	17c <__gcc_personality_v0+0x1c>
 544:	mov	x1, #0x0                   	// #0
 548:	b	244 <__gcc_personality_v0+0xe4>
 54c:	mov	x0, x20
 550:	bl	0 <_Unwind_GetDataRelBase>
 554:	mov	x1, x0
 558:	b	244 <__gcc_personality_v0+0xe4>
 55c:	mov	x2, x22
 560:	mov	x0, x20
 564:	mov	w1, #0x0                   	// #0
 568:	bl	0 <_Unwind_SetGR>
 56c:	mov	x2, #0x0                   	// #0
 570:	mov	x0, x20
 574:	mov	w1, #0x1                   	// #1
 578:	bl	0 <_Unwind_SetGR>
 57c:	mov	x0, x20
 580:	mov	x1, x19
 584:	bl	0 <_Unwind_SetIP>
 588:	mov	w0, #0x7                   	// #7
 58c:	ldp	x19, x20, [sp, #16]
 590:	ldp	x21, x22, [sp, #32]
 594:	ldp	x23, x24, [sp, #48]
 598:	ldp	x25, x26, [sp, #64]
 59c:	b	188 <__gcc_personality_v0+0x28>

emutls.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <emutls_init>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x1, 0 <emutls_init>
   8:	adrp	x0, 0 <emutls_init>
   c:	mov	x29, sp
  10:	add	x1, x1, #0x0
  14:	add	x0, x0, #0x0
  18:	bl	0 <pthread_key_create>
  1c:	cbnz	w0, 28 <emutls_init+0x28>
  20:	ldp	x29, x30, [sp], #16
  24:	ret
  28:	bl	0 <abort>
  2c:	nop

0000000000000030 <emutls_destroy>:
  30:	stp	x29, x30, [sp, #-48]!
  34:	mov	x29, sp
  38:	str	x21, [sp, #32]
  3c:	ldr	x21, [x0]
  40:	stp	x19, x20, [sp, #16]
  44:	mov	x20, x0
  48:	cbz	x21, 6c <emutls_destroy+0x3c>
  4c:	mov	x19, #0x1                   	// #1
  50:	ldr	x1, [x20, x19, lsl #3]
  54:	cbz	x1, 60 <emutls_destroy+0x30>
  58:	ldur	x0, [x1, #-8]
  5c:	bl	0 <free>
  60:	cmp	x21, x19
  64:	add	x19, x19, #0x1
  68:	b.ne	50 <emutls_destroy+0x20>  // b.any
  6c:	mov	x0, x20
  70:	ldp	x19, x20, [sp, #16]
  74:	ldr	x21, [sp, #32]
  78:	ldp	x29, x30, [sp], #48
  7c:	b	0 <free>

0000000000000080 <emutls_alloc>:
  80:	stp	x29, x30, [sp, #-48]!
  84:	mov	x29, sp
  88:	stp	x19, x20, [sp, #16]
  8c:	mov	x19, x0
  90:	ldr	x20, [x0, #8]
  94:	str	x21, [sp, #32]
  98:	ldr	x21, [x0]
  9c:	cmp	x20, #0x8
  a0:	b.hi	e4 <emutls_alloc+0x64>  // b.pmore
  a4:	add	x0, x21, #0x8
  a8:	bl	0 <malloc>
  ac:	cbz	x0, 138 <emutls_alloc+0xb8>
  b0:	ldr	x1, [x19, #24]
  b4:	str	x0, [x0]
  b8:	add	x3, x0, #0x8
  bc:	mov	x2, x21
  c0:	cbz	x1, 114 <emutls_alloc+0x94>
  c4:	mov	x0, x3
  c8:	bl	0 <memcpy>
  cc:	mov	x3, x0
  d0:	mov	x0, x3
  d4:	ldp	x19, x20, [sp, #16]
  d8:	ldr	x21, [sp, #32]
  dc:	ldp	x29, x30, [sp], #48
  e0:	ret
  e4:	add	x0, x20, x21
  e8:	add	x0, x0, #0x7
  ec:	bl	0 <malloc>
  f0:	cbz	x0, 138 <emutls_alloc+0xb8>
  f4:	add	x3, x20, #0x7
  f8:	neg	x20, x20
  fc:	add	x3, x0, x3
 100:	mov	x2, x21
 104:	and	x3, x3, x20
 108:	stur	x0, [x3, #-8]
 10c:	ldr	x1, [x19, #24]
 110:	cbnz	x1, c4 <emutls_alloc+0x44>
 114:	mov	x0, x3
 118:	mov	w1, #0x0                   	// #0
 11c:	bl	0 <memset>
 120:	mov	x3, x0
 124:	mov	x0, x3
 128:	ldp	x19, x20, [sp, #16]
 12c:	ldr	x21, [sp, #32]
 130:	ldp	x29, x30, [sp], #48
 134:	ret
 138:	bl	0 <abort>
 13c:	nop

0000000000000140 <__emutls_get_address>:
 140:	stp	x29, x30, [sp, #-64]!
 144:	adrp	x1, 0 <__pthread_key_create>
 148:	mov	x29, sp
 14c:	ldr	x1, [x1]
 150:	stp	x19, x20, [sp, #16]
 154:	mov	x20, x0
 158:	cbz	x1, 1b0 <__emutls_get_address+0x70>
 15c:	add	x19, x0, #0x10
 160:	stp	x21, x22, [sp, #32]
 164:	ldar	x21, [x19]
 168:	adrp	x22, 0 <emutls_init>
 16c:	cbz	x21, 1c8 <__emutls_get_address+0x88>
 170:	ldr	w0, [x22]
 174:	bl	0 <pthread_getspecific>
 178:	mov	x19, x0
 17c:	cbz	x0, 204 <__emutls_get_address+0xc4>
 180:	stp	x23, x24, [sp, #48]
 184:	ldr	x23, [x0]
 188:	cmp	x23, x21
 18c:	b.cc	248 <__emutls_get_address+0x108>  // b.lo, b.ul, b.last
 190:	ldp	x23, x24, [sp, #48]
 194:	ldr	x1, [x19, x21, lsl #3]
 198:	cbz	x1, 230 <__emutls_get_address+0xf0>
 19c:	ldp	x21, x22, [sp, #32]
 1a0:	mov	x0, x1
 1a4:	ldp	x19, x20, [sp, #16]
 1a8:	ldp	x29, x30, [sp], #64
 1ac:	ret
 1b0:	ldr	x1, [x0, #16]
 1b4:	cbnz	x1, 1a0 <__emutls_get_address+0x60>
 1b8:	bl	80 <emutls_alloc>
 1bc:	mov	x1, x0
 1c0:	str	x0, [x20, #16]
 1c4:	b	1a0 <__emutls_get_address+0x60>
 1c8:	adrp	x1, 0 <emutls_init>
 1cc:	add	x1, x1, #0x0
 1d0:	stp	x23, x24, [sp, #48]
 1d4:	add	x23, x22, #0x0
 1d8:	add	x0, x23, #0x4
 1dc:	bl	0 <pthread_once>
 1e0:	add	x0, x23, #0x8
 1e4:	bl	0 <pthread_mutex_lock>
 1e8:	ldr	x21, [x20, #16]
 1ec:	cbz	x21, 298 <__emutls_get_address+0x158>
 1f0:	add	x0, x22, #0x0
 1f4:	add	x0, x0, #0x8
 1f8:	bl	0 <pthread_mutex_unlock>
 1fc:	ldp	x23, x24, [sp, #48]
 200:	b	170 <__emutls_get_address+0x30>
 204:	add	x0, x21, #0x21
 208:	mov	x1, #0x8                   	// #8
 20c:	bl	0 <calloc>
 210:	mov	x19, x0
 214:	add	x2, x21, #0x20
 218:	cbz	x0, 2ac <__emutls_get_address+0x16c>
 21c:	ldr	w0, [x22]
 220:	mov	x1, x19
 224:	str	x2, [x19]
 228:	bl	0 <pthread_setspecific>
 22c:	b	194 <__emutls_get_address+0x54>
 230:	mov	x0, x20
 234:	bl	80 <emutls_alloc>
 238:	mov	x1, x0
 23c:	str	x0, [x19, x21, lsl #3]
 240:	ldp	x21, x22, [sp, #32]
 244:	b	1a0 <__emutls_get_address+0x60>
 248:	lsl	x24, x23, #1
 24c:	add	x1, x21, #0x20
 250:	cmp	x21, x24
 254:	csel	x24, x1, x24, hi  // hi = pmore
 258:	add	x1, x24, #0x1
 25c:	lsl	x1, x1, #3
 260:	bl	0 <realloc>
 264:	mov	x19, x0
 268:	cbz	x0, 2b0 <__emutls_get_address+0x170>
 26c:	sub	x2, x24, x23
 270:	str	x24, [x0], #8
 274:	mov	w1, #0x0                   	// #0
 278:	lsl	x2, x2, #3
 27c:	add	x0, x0, x23, lsl #3
 280:	bl	0 <memset>
 284:	ldr	w0, [x22]
 288:	mov	x1, x19
 28c:	bl	0 <pthread_setspecific>
 290:	ldp	x23, x24, [sp, #48]
 294:	b	194 <__emutls_get_address+0x54>
 298:	ldr	x21, [x23, #56]
 29c:	add	x21, x21, #0x1
 2a0:	str	x21, [x23, #56]
 2a4:	stlr	x21, [x19]
 2a8:	b	1f0 <__emutls_get_address+0xb0>
 2ac:	stp	x23, x24, [sp, #48]
 2b0:	bl	0 <abort>
 2b4:	nop

00000000000002b8 <__emutls_register_common>:
 2b8:	ldr	x4, [x0]
 2bc:	cmp	x4, x1
 2c0:	b.cs	2d0 <__emutls_register_common+0x18>  // b.hs, b.nlast
 2c4:	mov	x4, x1
 2c8:	str	x1, [x0]
 2cc:	str	xzr, [x0, #24]
 2d0:	ldr	x5, [x0, #8]
 2d4:	cmp	x5, x2
 2d8:	b.cs	2e0 <__emutls_register_common+0x28>  // b.hs, b.nlast
 2dc:	str	x2, [x0, #8]
 2e0:	cbz	x3, 2ec <__emutls_register_common+0x34>
 2e4:	cmp	x1, x4
 2e8:	b.eq	2f0 <__emutls_register_common+0x38>  // b.none
 2ec:	ret
 2f0:	str	x3, [x0, #24]
 2f4:	ret
