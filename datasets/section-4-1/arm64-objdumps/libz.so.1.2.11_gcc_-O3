
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libz.so.1.2.11_gcc_-O3:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000002368 <.init>:
    2368:	stp	x29, x30, [sp, #-16]!
    236c:	mov	x29, sp
    2370:	bl	2670 <adler32_z@plt+0x10>
    2374:	ldp	x29, x30, [sp], #16
    2378:	ret

Disassembly of section .plt:

0000000000002380 <memcpy@plt-0x20>:
    2380:	stp	x16, x30, [sp, #-16]!
    2384:	adrp	x16, 28000 <gzclose_w@@ZLIB_1.2.3.5+0x15c38>
    2388:	ldr	x17, [x16, #4088]
    238c:	add	x16, x16, #0xff8
    2390:	br	x17
    2394:	nop
    2398:	nop
    239c:	nop

00000000000023a0 <memcpy@plt>:
    23a0:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    23a4:	ldr	x17, [x16]
    23a8:	add	x16, x16, #0x0
    23ac:	br	x17

00000000000023b0 <crc32_z@plt>:
    23b0:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    23b4:	ldr	x17, [x16, #8]
    23b8:	add	x16, x16, #0x8
    23bc:	br	x17

00000000000023c0 <gzvprintf@plt>:
    23c0:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    23c4:	ldr	x17, [x16, #16]
    23c8:	add	x16, x16, #0x10
    23cc:	br	x17

00000000000023d0 <gzseek64@plt>:
    23d0:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    23d4:	ldr	x17, [x16, #24]
    23d8:	add	x16, x16, #0x18
    23dc:	br	x17

00000000000023e0 <strlen@plt>:
    23e0:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    23e4:	ldr	x17, [x16, #32]
    23e8:	add	x16, x16, #0x20
    23ec:	br	x17

00000000000023f0 <inflate@plt>:
    23f0:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    23f4:	ldr	x17, [x16, #40]
    23f8:	add	x16, x16, #0x28
    23fc:	br	x17

0000000000002400 <gzclose_r@plt>:
    2400:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2404:	ldr	x17, [x16, #48]
    2408:	add	x16, x16, #0x30
    240c:	br	x17

0000000000002410 <gzgetc@plt>:
    2410:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2414:	ldr	x17, [x16, #56]
    2418:	add	x16, x16, #0x38
    241c:	br	x17

0000000000002420 <__cxa_finalize@plt>:
    2420:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2424:	ldr	x17, [x16, #64]
    2428:	add	x16, x16, #0x40
    242c:	br	x17

0000000000002430 <crc32@plt>:
    2430:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2434:	ldr	x17, [x16, #72]
    2438:	add	x16, x16, #0x48
    243c:	br	x17

0000000000002440 <inflateResetKeep@plt>:
    2440:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2444:	ldr	x17, [x16, #80]
    2448:	add	x16, x16, #0x50
    244c:	br	x17

0000000000002450 <snprintf@plt>:
    2450:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2454:	ldr	x17, [x16, #88]
    2458:	add	x16, x16, #0x58
    245c:	br	x17

0000000000002460 <malloc@plt>:
    2460:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2464:	ldr	x17, [x16, #96]
    2468:	add	x16, x16, #0x60
    246c:	br	x17

0000000000002470 <open@plt>:
    2470:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2474:	ldr	x17, [x16, #104]
    2478:	add	x16, x16, #0x68
    247c:	br	x17

0000000000002480 <deflateReset@plt>:
    2480:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2484:	ldr	x17, [x16, #112]
    2488:	add	x16, x16, #0x70
    248c:	br	x17

0000000000002490 <deflate@plt>:
    2490:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2494:	ldr	x17, [x16, #120]
    2498:	add	x16, x16, #0x78
    249c:	br	x17

00000000000024a0 <memset@plt>:
    24a0:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    24a4:	ldr	x17, [x16, #128]
    24a8:	add	x16, x16, #0x80
    24ac:	br	x17

00000000000024b0 <lseek64@plt>:
    24b0:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    24b4:	ldr	x17, [x16, #136]
    24b8:	add	x16, x16, #0x88
    24bc:	br	x17

00000000000024c0 <gztell64@plt>:
    24c0:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    24c4:	ldr	x17, [x16, #144]
    24c8:	add	x16, x16, #0x90
    24cc:	br	x17

00000000000024d0 <deflateInit2_@plt>:
    24d0:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    24d4:	ldr	x17, [x16, #152]
    24d8:	add	x16, x16, #0x98
    24dc:	br	x17

00000000000024e0 <deflateParams@plt>:
    24e0:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    24e4:	ldr	x17, [x16, #160]
    24e8:	add	x16, x16, #0xa0
    24ec:	br	x17

00000000000024f0 <deflateInit_@plt>:
    24f0:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    24f4:	ldr	x17, [x16, #168]
    24f8:	add	x16, x16, #0xa8
    24fc:	br	x17

0000000000002500 <strerror@plt>:
    2500:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2504:	ldr	x17, [x16, #176]
    2508:	add	x16, x16, #0xb0
    250c:	br	x17

0000000000002510 <close@plt>:
    2510:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2514:	ldr	x17, [x16, #184]
    2518:	add	x16, x16, #0xb8
    251c:	br	x17

0000000000002520 <__gmon_start__@plt>:
    2520:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2524:	ldr	x17, [x16, #192]
    2528:	add	x16, x16, #0xc0
    252c:	br	x17

0000000000002530 <write@plt>:
    2530:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2534:	ldr	x17, [x16, #200]
    2538:	add	x16, x16, #0xc8
    253c:	br	x17

0000000000002540 <uncompress2@plt>:
    2540:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2544:	ldr	x17, [x16, #208]
    2548:	add	x16, x16, #0xd0
    254c:	br	x17

0000000000002550 <inflateEnd@plt>:
    2550:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2554:	ldr	x17, [x16, #216]
    2558:	add	x16, x16, #0xd8
    255c:	br	x17

0000000000002560 <adler32@plt>:
    2560:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2564:	ldr	x17, [x16, #224]
    2568:	add	x16, x16, #0xe0
    256c:	br	x17

0000000000002570 <free@plt>:
    2570:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2574:	ldr	x17, [x16, #232]
    2578:	add	x16, x16, #0xe8
    257c:	br	x17

0000000000002580 <gzclose_w@plt>:
    2580:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2584:	ldr	x17, [x16, #240]
    2588:	add	x16, x16, #0xf0
    258c:	br	x17

0000000000002590 <deflateEnd@plt>:
    2590:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2594:	ldr	x17, [x16, #248]
    2598:	add	x16, x16, #0xf8
    259c:	br	x17

00000000000025a0 <gzrewind@plt>:
    25a0:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    25a4:	ldr	x17, [x16, #256]
    25a8:	add	x16, x16, #0x100
    25ac:	br	x17

00000000000025b0 <gzoffset64@plt>:
    25b0:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    25b4:	ldr	x17, [x16, #264]
    25b8:	add	x16, x16, #0x108
    25bc:	br	x17

00000000000025c0 <inflateInit_@plt>:
    25c0:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    25c4:	ldr	x17, [x16, #272]
    25c8:	add	x16, x16, #0x110
    25cc:	br	x17

00000000000025d0 <compress2@plt>:
    25d0:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    25d4:	ldr	x17, [x16, #280]
    25d8:	add	x16, x16, #0x118
    25dc:	br	x17

00000000000025e0 <read@plt>:
    25e0:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    25e4:	ldr	x17, [x16, #288]
    25e8:	add	x16, x16, #0x120
    25ec:	br	x17

00000000000025f0 <memchr@plt>:
    25f0:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    25f4:	ldr	x17, [x16, #296]
    25f8:	add	x16, x16, #0x128
    25fc:	br	x17

0000000000002600 <inflateInit2_@plt>:
    2600:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2604:	ldr	x17, [x16, #304]
    2608:	add	x16, x16, #0x130
    260c:	br	x17

0000000000002610 <inflateReset@plt>:
    2610:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2614:	ldr	x17, [x16, #312]
    2618:	add	x16, x16, #0x138
    261c:	br	x17

0000000000002620 <vsnprintf@plt>:
    2620:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2624:	ldr	x17, [x16, #320]
    2628:	add	x16, x16, #0x140
    262c:	br	x17

0000000000002630 <deflateResetKeep@plt>:
    2630:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2634:	ldr	x17, [x16, #328]
    2638:	add	x16, x16, #0x148
    263c:	br	x17

0000000000002640 <inflateReset2@plt>:
    2640:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2644:	ldr	x17, [x16, #336]
    2648:	add	x16, x16, #0x150
    264c:	br	x17

0000000000002650 <__errno_location@plt>:
    2650:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2654:	ldr	x17, [x16, #344]
    2658:	add	x16, x16, #0x158
    265c:	br	x17

0000000000002660 <adler32_z@plt>:
    2660:	adrp	x16, 29000 <memcpy@GLIBC_2.17>
    2664:	ldr	x17, [x16, #352]
    2668:	add	x16, x16, #0x160
    266c:	br	x17

Disassembly of section .text:

0000000000002670 <adler32_z@@ZLIB_1.2.9-0xd8>:
    2670:	adrp	x0, 28000 <gzclose_w@@ZLIB_1.2.3.5+0x15c38>
    2674:	ldr	x0, [x0, #4048]
    2678:	cbz	x0, 2680 <adler32_z@plt+0x20>
    267c:	b	2520 <__gmon_start__@plt>
    2680:	ret
    2684:	nop
    2688:	adrp	x0, 29000 <gzclose_w@@ZLIB_1.2.3.5+0x16c38>
    268c:	add	x0, x0, #0x170
    2690:	adrp	x1, 29000 <gzclose_w@@ZLIB_1.2.3.5+0x16c38>
    2694:	add	x1, x1, #0x170
    2698:	cmp	x1, x0
    269c:	b.eq	26b4 <adler32_z@plt+0x54>  // b.none
    26a0:	adrp	x1, 28000 <gzclose_w@@ZLIB_1.2.3.5+0x15c38>
    26a4:	ldr	x1, [x1, #4032]
    26a8:	cbz	x1, 26b4 <adler32_z@plt+0x54>
    26ac:	mov	x16, x1
    26b0:	br	x16
    26b4:	ret
    26b8:	adrp	x0, 29000 <gzclose_w@@ZLIB_1.2.3.5+0x16c38>
    26bc:	add	x0, x0, #0x170
    26c0:	adrp	x1, 29000 <gzclose_w@@ZLIB_1.2.3.5+0x16c38>
    26c4:	add	x1, x1, #0x170
    26c8:	sub	x1, x1, x0
    26cc:	lsr	x2, x1, #63
    26d0:	add	x1, x2, x1, asr #3
    26d4:	cmp	xzr, x1, asr #1
    26d8:	asr	x1, x1, #1
    26dc:	b.eq	26f4 <adler32_z@plt+0x94>  // b.none
    26e0:	adrp	x2, 28000 <gzclose_w@@ZLIB_1.2.3.5+0x15c38>
    26e4:	ldr	x2, [x2, #4064]
    26e8:	cbz	x2, 26f4 <adler32_z@plt+0x94>
    26ec:	mov	x16, x2
    26f0:	br	x16
    26f4:	ret
    26f8:	stp	x29, x30, [sp, #-32]!
    26fc:	mov	x29, sp
    2700:	str	x19, [sp, #16]
    2704:	adrp	x19, 29000 <gzclose_w@@ZLIB_1.2.3.5+0x16c38>
    2708:	ldrb	w0, [x19, #368]
    270c:	cbnz	w0, 2734 <adler32_z@plt+0xd4>
    2710:	adrp	x0, 28000 <gzclose_w@@ZLIB_1.2.3.5+0x15c38>
    2714:	ldr	x0, [x0, #4040]
    2718:	cbz	x0, 2728 <adler32_z@plt+0xc8>
    271c:	adrp	x0, 29000 <gzclose_w@@ZLIB_1.2.3.5+0x16c38>
    2720:	ldr	x0, [x0, #360]
    2724:	bl	2420 <__cxa_finalize@plt>
    2728:	bl	2688 <adler32_z@plt+0x28>
    272c:	mov	w0, #0x1                   	// #1
    2730:	strb	w0, [x19, #368]
    2734:	ldr	x19, [sp, #16]
    2738:	ldp	x29, x30, [sp], #32
    273c:	ret
    2740:	b	26b8 <adler32_z@plt+0x58>
    2744:	nop

0000000000002748 <adler32_z@@ZLIB_1.2.9>:
    2748:	mov	x10, x2
    274c:	cmp	x2, #0x1
    2750:	lsr	w8, w0, #16
    2754:	mov	x2, x1
    2758:	and	x1, x0, #0xffff
    275c:	b.eq	2a50 <adler32_z@@ZLIB_1.2.9+0x308>  // b.none
    2760:	cbz	x2, 2cf8 <adler32_z@@ZLIB_1.2.9+0x5b0>
    2764:	cmp	x10, #0xf
    2768:	b.ls	28dc <adler32_z@@ZLIB_1.2.9+0x194>  // b.plast
    276c:	stp	x29, x30, [sp, #-32]!
    2770:	mov	x14, #0x15af                	// #5551
    2774:	mov	x15, #0x15b0                	// #5552
    2778:	mov	x29, sp
    277c:	cmp	x10, x14
    2780:	add	x9, x2, x15
    2784:	b.ls	2a90 <adler32_z@@ZLIB_1.2.9+0x348>  // b.plast
    2788:	mov	x12, #0xc5cd                	// #50637
    278c:	mov	x13, #0xffffffffffffea50    	// #-5552
    2790:	movk	x12, #0xd2f, lsl #16
    2794:	str	x19, [sp, #16]
    2798:	movk	x12, #0xe1, lsl #32
    279c:	movk	x12, #0xf, lsl #48
    27a0:	mov	x11, x10
    27a4:	add	x2, x9, x13
    27a8:	add	x10, x10, x13
    27ac:	nop
    27b0:	ldrb	w4, [x2]
    27b4:	add	x2, x2, #0x10
    27b8:	ldurb	w16, [x2, #-15]
    27bc:	add	x4, x4, x1
    27c0:	ldurb	w0, [x2, #-14]
    27c4:	add	x16, x16, x4
    27c8:	ldurb	w1, [x2, #-13]
    27cc:	add	x0, x0, x16
    27d0:	ldurb	w7, [x2, #-12]
    27d4:	add	x1, x1, x0
    27d8:	ldurb	w18, [x2, #-11]
    27dc:	add	x7, x7, x1
    27e0:	ldurb	w3, [x2, #-10]
    27e4:	add	x18, x18, x7
    27e8:	ldurb	w19, [x2, #-9]
    27ec:	add	x3, x3, x18
    27f0:	ldurb	w6, [x2, #-8]
    27f4:	add	x19, x19, x3
    27f8:	ldurb	w30, [x2, #-7]
    27fc:	add	x6, x6, x19
    2800:	ldurb	w5, [x2, #-6]
    2804:	add	x30, x30, x6
    2808:	ldurb	w17, [x2, #-5]
    280c:	add	x16, x4, x16
    2810:	add	x1, x0, x1
    2814:	ldurb	w4, [x2, #-4]
    2818:	add	x5, x5, x30
    281c:	add	x1, x1, x16
    2820:	add	x18, x7, x18
    2824:	add	x16, x17, x5
    2828:	ldurb	w7, [x2, #-3]
    282c:	add	x0, x3, x19
    2830:	add	x4, x4, x16
    2834:	ldurb	w3, [x2, #-2]
    2838:	add	x1, x1, x18
    283c:	add	x1, x1, x0
    2840:	add	x7, x7, x4
    2844:	add	x0, x6, x30
    2848:	ldurb	w6, [x2, #-1]
    284c:	add	x0, x1, x0
    2850:	add	x3, x3, x7
    2854:	add	x5, x5, x16
    2858:	add	x4, x4, x7
    285c:	add	x0, x0, x5
    2860:	add	x1, x6, x3
    2864:	add	x0, x0, x4
    2868:	add	x3, x3, x1
    286c:	add	x0, x0, x3
    2870:	cmp	x2, x9
    2874:	add	x8, x8, x0
    2878:	b.ne	27b0 <adler32_z@@ZLIB_1.2.9+0x68>  // b.any
    287c:	umulh	x5, x1, x12
    2880:	cmp	x10, x14
    2884:	umulh	x4, x8, x12
    2888:	add	x9, x2, x15
    288c:	sub	x3, x1, x5
    2890:	sub	x0, x8, x4
    2894:	add	x3, x5, x3, lsr #1
    2898:	add	x0, x4, x0, lsr #1
    289c:	lsr	x3, x3, #15
    28a0:	lsr	x0, x0, #15
    28a4:	lsl	x5, x3, #12
    28a8:	lsl	x4, x0, #12
    28ac:	sub	x5, x5, x3
    28b0:	sub	x4, x4, x0
    28b4:	add	x3, x3, x5, lsl #4
    28b8:	add	x0, x0, x4, lsl #4
    28bc:	sub	x1, x1, x3
    28c0:	sub	x8, x8, x0
    28c4:	b.hi	27a0 <adler32_z@@ZLIB_1.2.9+0x58>  // b.pmore
    28c8:	cbnz	x10, 2a84 <adler32_z@@ZLIB_1.2.9+0x33c>
    28cc:	orr	x0, x1, x8, lsl #16
    28d0:	ldr	x19, [sp, #16]
    28d4:	ldp	x29, x30, [sp], #32
    28d8:	ret
    28dc:	cbz	x10, 2a04 <adler32_z@@ZLIB_1.2.9+0x2bc>
    28e0:	ldrb	w0, [x2]
    28e4:	cmp	x10, #0x1
    28e8:	add	x1, x1, x0
    28ec:	add	x8, x8, x1
    28f0:	b.eq	2a04 <adler32_z@@ZLIB_1.2.9+0x2bc>  // b.none
    28f4:	ldrb	w0, [x2, #1]
    28f8:	cmp	x10, #0x2
    28fc:	add	x1, x1, x0
    2900:	add	x8, x8, x1
    2904:	b.eq	2a04 <adler32_z@@ZLIB_1.2.9+0x2bc>  // b.none
    2908:	ldrb	w0, [x2, #2]
    290c:	cmp	x10, #0x3
    2910:	add	x1, x1, x0
    2914:	add	x8, x8, x1
    2918:	b.eq	2a04 <adler32_z@@ZLIB_1.2.9+0x2bc>  // b.none
    291c:	ldrb	w0, [x2, #3]
    2920:	cmp	x10, #0x4
    2924:	add	x1, x1, x0
    2928:	add	x8, x8, x1
    292c:	b.eq	2a04 <adler32_z@@ZLIB_1.2.9+0x2bc>  // b.none
    2930:	ldrb	w0, [x2, #4]
    2934:	cmp	x10, #0x5
    2938:	add	x1, x1, x0
    293c:	add	x8, x8, x1
    2940:	b.eq	2a04 <adler32_z@@ZLIB_1.2.9+0x2bc>  // b.none
    2944:	ldrb	w0, [x2, #5]
    2948:	cmp	x10, #0x6
    294c:	add	x1, x1, x0
    2950:	add	x8, x8, x1
    2954:	b.eq	2a04 <adler32_z@@ZLIB_1.2.9+0x2bc>  // b.none
    2958:	ldrb	w0, [x2, #6]
    295c:	cmp	x10, #0x7
    2960:	add	x1, x1, x0
    2964:	add	x8, x8, x1
    2968:	b.eq	2a04 <adler32_z@@ZLIB_1.2.9+0x2bc>  // b.none
    296c:	ldrb	w0, [x2, #7]
    2970:	cmp	x10, #0x8
    2974:	add	x1, x1, x0
    2978:	add	x8, x8, x1
    297c:	b.eq	2a04 <adler32_z@@ZLIB_1.2.9+0x2bc>  // b.none
    2980:	ldrb	w0, [x2, #8]
    2984:	cmp	x10, #0x9
    2988:	add	x1, x1, x0
    298c:	add	x8, x8, x1
    2990:	b.eq	2a04 <adler32_z@@ZLIB_1.2.9+0x2bc>  // b.none
    2994:	ldrb	w0, [x2, #9]
    2998:	cmp	x10, #0xa
    299c:	add	x1, x1, x0
    29a0:	add	x8, x8, x1
    29a4:	b.eq	2a04 <adler32_z@@ZLIB_1.2.9+0x2bc>  // b.none
    29a8:	ldrb	w0, [x2, #10]
    29ac:	cmp	x10, #0xb
    29b0:	add	x1, x1, x0
    29b4:	add	x8, x8, x1
    29b8:	b.eq	2a04 <adler32_z@@ZLIB_1.2.9+0x2bc>  // b.none
    29bc:	ldrb	w0, [x2, #11]
    29c0:	cmp	x10, #0xc
    29c4:	add	x1, x1, x0
    29c8:	add	x8, x8, x1
    29cc:	b.eq	2a04 <adler32_z@@ZLIB_1.2.9+0x2bc>  // b.none
    29d0:	ldrb	w0, [x2, #12]
    29d4:	cmp	x10, #0xd
    29d8:	add	x1, x1, x0
    29dc:	add	x8, x8, x1
    29e0:	b.eq	2a04 <adler32_z@@ZLIB_1.2.9+0x2bc>  // b.none
    29e4:	ldrb	w0, [x2, #13]
    29e8:	cmp	x10, #0xe
    29ec:	add	x1, x1, x0
    29f0:	add	x8, x8, x1
    29f4:	b.eq	2a04 <adler32_z@@ZLIB_1.2.9+0x2bc>  // b.none
    29f8:	ldrb	w0, [x2, #14]
    29fc:	add	x1, x1, x0
    2a00:	add	x8, x8, x1
    2a04:	mov	x0, #0xc5cd                	// #50637
    2a08:	mov	x2, #0xfff0                	// #65520
    2a0c:	movk	x0, #0xd2f, lsl #16
    2a10:	cmp	x1, x2
    2a14:	movk	x0, #0xe1, lsl #32
    2a18:	mov	x3, #0xffffffffffff000f    	// #-65521
    2a1c:	movk	x0, #0xf, lsl #48
    2a20:	add	x3, x1, x3
    2a24:	csel	x1, x3, x1, hi  // hi = pmore
    2a28:	umulh	x2, x8, x0
    2a2c:	sub	x0, x8, x2
    2a30:	add	x0, x2, x0, lsr #1
    2a34:	lsr	x2, x0, #15
    2a38:	lsl	x0, x2, #12
    2a3c:	sub	x0, x0, x2
    2a40:	add	x0, x2, x0, lsl #4
    2a44:	sub	x8, x8, x0
    2a48:	orr	x0, x1, x8, lsl #16
    2a4c:	ret
    2a50:	ldrb	w0, [x2]
    2a54:	mov	x3, #0xfff0                	// #65520
    2a58:	mov	x2, #0xffffffffffff000f    	// #-65521
    2a5c:	add	x1, x0, x1
    2a60:	add	x0, x1, x2
    2a64:	cmp	x1, x3
    2a68:	csel	x1, x0, x1, hi  // hi = pmore
    2a6c:	add	x8, x1, x8
    2a70:	add	x2, x8, x2
    2a74:	cmp	x8, x3
    2a78:	csel	x8, x2, x8, hi  // hi = pmore
    2a7c:	orr	x0, x1, x8, lsl #16
    2a80:	ret
    2a84:	cmp	x10, #0xf
    2a88:	b.ls	2d00 <adler32_z@@ZLIB_1.2.9+0x5b8>  // b.plast
    2a8c:	ldr	x19, [sp, #16]
    2a90:	sub	x7, x10, #0x10
    2a94:	lsr	x7, x7, #4
    2a98:	add	x9, x7, #0x1
    2a9c:	add	x9, x2, x9, lsl #4
    2aa0:	ldrb	w5, [x2]
    2aa4:	add	x2, x2, #0x10
    2aa8:	ldurb	w11, [x2, #-15]
    2aac:	add	x5, x5, x1
    2ab0:	ldurb	w0, [x2, #-14]
    2ab4:	add	x11, x11, x5
    2ab8:	ldurb	w16, [x2, #-13]
    2abc:	add	x0, x0, x11
    2ac0:	ldurb	w4, [x2, #-12]
    2ac4:	ldurb	w15, [x2, #-11]
    2ac8:	add	x16, x16, x0
    2acc:	ldurb	w3, [x2, #-10]
    2ad0:	add	x4, x4, x16
    2ad4:	ldurb	w14, [x2, #-9]
    2ad8:	add	x15, x15, x4
    2adc:	add	x3, x3, x15
    2ae0:	ldurb	w1, [x2, #-8]
    2ae4:	add	x14, x14, x3
    2ae8:	ldurb	w13, [x2, #-7]
    2aec:	ldurb	w6, [x2, #-6]
    2af0:	add	x1, x1, x14
    2af4:	ldurb	w12, [x2, #-5]
    2af8:	add	x13, x13, x1
    2afc:	add	x11, x5, x11
    2b00:	add	x6, x6, x13
    2b04:	ldurb	w5, [x2, #-4]
    2b08:	add	x0, x0, x16
    2b0c:	add	x0, x0, x11
    2b10:	add	x4, x4, x15
    2b14:	ldurb	w11, [x2, #-3]
    2b18:	add	x12, x12, x6
    2b1c:	add	x0, x0, x4
    2b20:	add	x5, x5, x12
    2b24:	add	x4, x3, x14
    2b28:	ldurb	w3, [x2, #-2]
    2b2c:	add	x0, x0, x4
    2b30:	add	x1, x1, x13
    2b34:	ldurb	w4, [x2, #-1]
    2b38:	add	x11, x11, x5
    2b3c:	add	x0, x0, x1
    2b40:	add	x3, x3, x11
    2b44:	add	x6, x6, x12
    2b48:	add	x5, x5, x11
    2b4c:	add	x0, x0, x6
    2b50:	add	x1, x4, x3
    2b54:	add	x0, x0, x5
    2b58:	add	x3, x3, x1
    2b5c:	add	x0, x0, x3
    2b60:	cmp	x2, x9
    2b64:	add	x8, x8, x0
    2b68:	b.ne	2aa0 <adler32_z@@ZLIB_1.2.9+0x358>  // b.any
    2b6c:	sub	x11, x10, #0x11
    2b70:	tst	x10, #0xf
    2b74:	sub	x7, x11, x7, lsl #4
    2b78:	b.eq	2c9c <adler32_z@@ZLIB_1.2.9+0x554>  // b.none
    2b7c:	ldrb	w0, [x9]
    2b80:	add	x1, x1, x0
    2b84:	add	x8, x8, x1
    2b88:	cbz	x7, 2c9c <adler32_z@@ZLIB_1.2.9+0x554>
    2b8c:	ldrb	w0, [x9, #1]
    2b90:	cmp	x7, #0x1
    2b94:	add	x1, x1, x0
    2b98:	add	x8, x8, x1
    2b9c:	b.eq	2c9c <adler32_z@@ZLIB_1.2.9+0x554>  // b.none
    2ba0:	ldrb	w0, [x9, #2]
    2ba4:	cmp	x7, #0x2
    2ba8:	add	x1, x1, x0
    2bac:	add	x8, x8, x1
    2bb0:	b.eq	2c9c <adler32_z@@ZLIB_1.2.9+0x554>  // b.none
    2bb4:	ldrb	w0, [x9, #3]
    2bb8:	cmp	x7, #0x3
    2bbc:	add	x1, x1, x0
    2bc0:	add	x8, x8, x1
    2bc4:	b.eq	2c9c <adler32_z@@ZLIB_1.2.9+0x554>  // b.none
    2bc8:	ldrb	w0, [x9, #4]
    2bcc:	cmp	x7, #0x4
    2bd0:	add	x1, x1, x0
    2bd4:	add	x8, x8, x1
    2bd8:	b.eq	2c9c <adler32_z@@ZLIB_1.2.9+0x554>  // b.none
    2bdc:	ldrb	w0, [x9, #5]
    2be0:	cmp	x7, #0x5
    2be4:	add	x1, x1, x0
    2be8:	add	x8, x8, x1
    2bec:	b.eq	2c9c <adler32_z@@ZLIB_1.2.9+0x554>  // b.none
    2bf0:	ldrb	w0, [x9, #6]
    2bf4:	cmp	x7, #0x6
    2bf8:	add	x1, x1, x0
    2bfc:	add	x8, x8, x1
    2c00:	b.eq	2c9c <adler32_z@@ZLIB_1.2.9+0x554>  // b.none
    2c04:	ldrb	w0, [x9, #7]
    2c08:	cmp	x7, #0x7
    2c0c:	add	x1, x1, x0
    2c10:	add	x8, x8, x1
    2c14:	b.eq	2c9c <adler32_z@@ZLIB_1.2.9+0x554>  // b.none
    2c18:	ldrb	w0, [x9, #8]
    2c1c:	cmp	x7, #0x8
    2c20:	add	x1, x1, x0
    2c24:	add	x8, x8, x1
    2c28:	b.eq	2c9c <adler32_z@@ZLIB_1.2.9+0x554>  // b.none
    2c2c:	ldrb	w0, [x9, #9]
    2c30:	cmp	x7, #0x9
    2c34:	add	x1, x1, x0
    2c38:	add	x8, x8, x1
    2c3c:	b.eq	2c9c <adler32_z@@ZLIB_1.2.9+0x554>  // b.none
    2c40:	ldrb	w0, [x9, #10]
    2c44:	cmp	x7, #0xa
    2c48:	add	x1, x1, x0
    2c4c:	add	x8, x8, x1
    2c50:	b.eq	2c9c <adler32_z@@ZLIB_1.2.9+0x554>  // b.none
    2c54:	ldrb	w0, [x9, #11]
    2c58:	cmp	x7, #0xb
    2c5c:	add	x1, x1, x0
    2c60:	add	x8, x8, x1
    2c64:	b.eq	2c9c <adler32_z@@ZLIB_1.2.9+0x554>  // b.none
    2c68:	ldrb	w0, [x9, #12]
    2c6c:	cmp	x7, #0xc
    2c70:	add	x1, x1, x0
    2c74:	add	x8, x8, x1
    2c78:	b.eq	2c9c <adler32_z@@ZLIB_1.2.9+0x554>  // b.none
    2c7c:	ldrb	w0, [x9, #13]
    2c80:	cmp	x7, #0xd
    2c84:	add	x1, x1, x0
    2c88:	add	x8, x8, x1
    2c8c:	b.eq	2c9c <adler32_z@@ZLIB_1.2.9+0x554>  // b.none
    2c90:	ldrb	w0, [x9, #14]
    2c94:	add	x1, x1, x0
    2c98:	add	x8, x8, x1
    2c9c:	mov	x0, #0xc5cd                	// #50637
    2ca0:	movk	x0, #0xd2f, lsl #16
    2ca4:	movk	x0, #0xe1, lsl #32
    2ca8:	movk	x0, #0xf, lsl #48
    2cac:	ldp	x29, x30, [sp], #32
    2cb0:	umulh	x3, x8, x0
    2cb4:	umulh	x4, x1, x0
    2cb8:	sub	x0, x8, x3
    2cbc:	sub	x2, x1, x4
    2cc0:	add	x0, x3, x0, lsr #1
    2cc4:	add	x2, x4, x2, lsr #1
    2cc8:	lsr	x0, x0, #15
    2ccc:	lsr	x2, x2, #15
    2cd0:	lsl	x3, x0, #12
    2cd4:	lsl	x4, x2, #12
    2cd8:	sub	x3, x3, x0
    2cdc:	sub	x4, x4, x2
    2ce0:	add	x0, x0, x3, lsl #4
    2ce4:	add	x2, x2, x4, lsl #4
    2ce8:	sub	x8, x8, x0
    2cec:	sub	x1, x1, x2
    2cf0:	orr	x0, x1, x8, lsl #16
    2cf4:	ret
    2cf8:	mov	x0, #0x1                   	// #1
    2cfc:	ret
    2d00:	mov	x0, #0xffffffffffffea4f    	// #-5553
    2d04:	mov	x9, x2
    2d08:	add	x7, x11, x0
    2d0c:	ldr	x19, [sp, #16]
    2d10:	b	2b7c <adler32_z@@ZLIB_1.2.9+0x434>
    2d14:	nop

0000000000002d18 <adler32@@Base>:
    2d18:	mov	w2, w2
    2d1c:	b	2660 <adler32_z@plt>

0000000000002d20 <adler32_combine@@ZLIB_1.2.2>:
    2d20:	tbnz	x2, #63, 2dfc <adler32_combine@@ZLIB_1.2.2+0xdc>
    2d24:	mov	x3, #0xe2e7                	// #58087
    2d28:	and	x4, x0, #0xffff
    2d2c:	movk	x3, #0x8697, lsl #16
    2d30:	lsr	w7, w1, #16
    2d34:	movk	x3, #0x8070, lsl #32
    2d38:	mov	x5, #0xc5cd                	// #50637
    2d3c:	movk	x3, #0x8007, lsl #48
    2d40:	movk	x5, #0xd2f, lsl #16
    2d44:	movk	x5, #0xe1, lsl #32
    2d48:	adds	x1, x4, w1, uxth
    2d4c:	smulh	x3, x2, x3
    2d50:	movk	x5, #0xf, lsl #48
    2d54:	lsr	w0, w0, #16
    2d58:	mov	x6, #0xfff0                	// #65520
    2d5c:	add	x3, x3, x2
    2d60:	asr	x3, x3, #15
    2d64:	sub	x3, x3, x2, asr #63
    2d68:	lsl	x8, x3, #12
    2d6c:	sub	x8, x8, x3
    2d70:	add	x3, x3, x8, lsl #4
    2d74:	sub	x3, x2, x3
    2d78:	sub	x7, x7, x3
    2d7c:	mul	x3, x4, x3
    2d80:	umulh	x4, x3, x5
    2d84:	sub	x2, x3, x4
    2d88:	add	x2, x4, x2, lsr #1
    2d8c:	lsr	x2, x2, #15
    2d90:	lsl	x4, x2, #12
    2d94:	sub	x4, x4, x2
    2d98:	add	x2, x2, x4, lsl #4
    2d9c:	mov	x4, #0xfff1                	// #65521
    2da0:	sub	x3, x3, x2
    2da4:	add	x3, x0, x3
    2da8:	add	x3, x3, x7
    2dac:	add	x0, x3, x4
    2db0:	b.eq	2dcc <adler32_combine@@ZLIB_1.2.2+0xac>  // b.none
    2db4:	sub	x6, x1, #0x1
    2db8:	mov	x2, #0xffffffffffff000e    	// #-65522
    2dbc:	add	x1, x1, x2
    2dc0:	mov	x2, #0xfff0                	// #65520
    2dc4:	cmp	x6, x2
    2dc8:	csel	x6, x1, x6, hi  // hi = pmore
    2dcc:	mov	x2, #0xffe1                	// #65505
    2dd0:	mov	x1, #0xffffffffffff000f    	// #-65521
    2dd4:	movk	x2, #0x1, lsl #16
    2dd8:	add	x3, x3, x1
    2ddc:	cmp	x0, x2
    2de0:	mov	x2, #0xfff0                	// #65520
    2de4:	csel	x0, x3, x0, hi  // hi = pmore
    2de8:	add	x1, x0, x1
    2dec:	cmp	x0, x2
    2df0:	csel	x0, x1, x0, hi  // hi = pmore
    2df4:	orr	x0, x6, x0, lsl #16
    2df8:	ret
    2dfc:	mov	x0, #0xffffffff            	// #4294967295
    2e00:	ret
    2e04:	nop

0000000000002e08 <adler32_combine64@@ZLIB_1.2.3.3>:
    2e08:	tbnz	x2, #63, 2ee4 <adler32_combine64@@ZLIB_1.2.3.3+0xdc>
    2e0c:	mov	x3, #0xe2e7                	// #58087
    2e10:	and	x4, x0, #0xffff
    2e14:	movk	x3, #0x8697, lsl #16
    2e18:	lsr	w7, w1, #16
    2e1c:	movk	x3, #0x8070, lsl #32
    2e20:	mov	x5, #0xc5cd                	// #50637
    2e24:	movk	x3, #0x8007, lsl #48
    2e28:	movk	x5, #0xd2f, lsl #16
    2e2c:	movk	x5, #0xe1, lsl #32
    2e30:	adds	x1, x4, w1, uxth
    2e34:	smulh	x3, x2, x3
    2e38:	movk	x5, #0xf, lsl #48
    2e3c:	lsr	w0, w0, #16
    2e40:	mov	x6, #0xfff0                	// #65520
    2e44:	add	x3, x3, x2
    2e48:	asr	x3, x3, #15
    2e4c:	sub	x3, x3, x2, asr #63
    2e50:	lsl	x8, x3, #12
    2e54:	sub	x8, x8, x3
    2e58:	add	x3, x3, x8, lsl #4
    2e5c:	sub	x3, x2, x3
    2e60:	sub	x7, x7, x3
    2e64:	mul	x3, x4, x3
    2e68:	umulh	x4, x3, x5
    2e6c:	sub	x2, x3, x4
    2e70:	add	x2, x4, x2, lsr #1
    2e74:	lsr	x2, x2, #15
    2e78:	lsl	x4, x2, #12
    2e7c:	sub	x4, x4, x2
    2e80:	add	x2, x2, x4, lsl #4
    2e84:	mov	x4, #0xfff1                	// #65521
    2e88:	sub	x3, x3, x2
    2e8c:	add	x3, x0, x3
    2e90:	add	x3, x3, x7
    2e94:	add	x0, x3, x4
    2e98:	b.eq	2eb4 <adler32_combine64@@ZLIB_1.2.3.3+0xac>  // b.none
    2e9c:	sub	x6, x1, #0x1
    2ea0:	mov	x2, #0xffffffffffff000e    	// #-65522
    2ea4:	add	x1, x1, x2
    2ea8:	mov	x2, #0xfff0                	// #65520
    2eac:	cmp	x6, x2
    2eb0:	csel	x6, x1, x6, hi  // hi = pmore
    2eb4:	mov	x2, #0xffe1                	// #65505
    2eb8:	mov	x1, #0xffffffffffff000f    	// #-65521
    2ebc:	movk	x2, #0x1, lsl #16
    2ec0:	add	x3, x3, x1
    2ec4:	cmp	x0, x2
    2ec8:	mov	x2, #0xfff0                	// #65520
    2ecc:	csel	x0, x3, x0, hi  // hi = pmore
    2ed0:	add	x1, x0, x1
    2ed4:	cmp	x0, x2
    2ed8:	csel	x0, x1, x0, hi  // hi = pmore
    2edc:	orr	x0, x6, x0, lsl #16
    2ee0:	ret
    2ee4:	mov	x0, #0xffffffff            	// #4294967295
    2ee8:	ret
    2eec:	nop
    2ef0:	cmp	x2, #0x0
    2ef4:	mov	x8, x0
    2ef8:	b.le	314c <adler32_combine64@@ZLIB_1.2.3.3+0x344>
    2efc:	sub	sp, sp, #0x200
    2f00:	mov	x9, x2
    2f04:	add	x6, sp, #0x100
    2f08:	mov	x10, x1
    2f0c:	mov	x3, #0x8320                	// #33568
    2f10:	add	x2, sp, #0x200
    2f14:	add	x1, x6, #0x8
    2f18:	movk	x3, #0xedb8, lsl #16
    2f1c:	mov	x0, #0x1                   	// #1
    2f20:	str	x3, [sp, #256]
    2f24:	nop
    2f28:	str	x0, [x1], #8
    2f2c:	lsl	x0, x0, #1
    2f30:	cmp	x2, x1
    2f34:	b.ne	2f28 <adler32_combine64@@ZLIB_1.2.3.3+0x120>  // b.any
    2f38:	mov	x7, sp
    2f3c:	mov	x5, #0x1                   	// #1
    2f40:	lsl	x4, x5, #3
    2f44:	add	x0, x6, x4
    2f48:	ldur	x0, [x0, #-8]
    2f4c:	cbz	x0, 30d8 <adler32_combine64@@ZLIB_1.2.3.3+0x2d0>
    2f50:	mov	x1, x6
    2f54:	mov	x2, #0x0                   	// #0
    2f58:	tbz	w0, #0, 2f64 <adler32_combine64@@ZLIB_1.2.3.3+0x15c>
    2f5c:	ldr	x3, [x1]
    2f60:	eor	x2, x2, x3
    2f64:	lsr	x0, x0, #1
    2f68:	add	x1, x1, #0x8
    2f6c:	cbnz	x0, 2f58 <adler32_combine64@@ZLIB_1.2.3.3+0x150>
    2f70:	add	x4, x7, x4
    2f74:	add	x5, x5, #0x1
    2f78:	cmp	x5, #0x21
    2f7c:	stur	x2, [x4, #-8]
    2f80:	b.ne	2f40 <adler32_combine64@@ZLIB_1.2.3.3+0x138>  // b.any
    2f84:	mov	x5, #0x1                   	// #1
    2f88:	lsl	x4, x5, #3
    2f8c:	add	x0, x7, x4
    2f90:	ldur	x0, [x0, #-8]
    2f94:	cbz	x0, 30bc <adler32_combine64@@ZLIB_1.2.3.3+0x2b4>
    2f98:	mov	x1, x7
    2f9c:	mov	x2, #0x0                   	// #0
    2fa0:	tbz	w0, #0, 2fac <adler32_combine64@@ZLIB_1.2.3.3+0x1a4>
    2fa4:	ldr	x3, [x1]
    2fa8:	eor	x2, x2, x3
    2fac:	lsr	x0, x0, #1
    2fb0:	add	x1, x1, #0x8
    2fb4:	cbnz	x0, 2fa0 <adler32_combine64@@ZLIB_1.2.3.3+0x198>
    2fb8:	add	x4, x6, x4
    2fbc:	add	x5, x5, #0x1
    2fc0:	cmp	x5, #0x21
    2fc4:	stur	x2, [x4, #-8]
    2fc8:	b.ne	2f88 <adler32_combine64@@ZLIB_1.2.3.3+0x180>  // b.any
    2fcc:	mov	x5, #0x1                   	// #1
    2fd0:	lsl	x4, x5, #3
    2fd4:	add	x0, x6, x4
    2fd8:	ldur	x0, [x0, #-8]
    2fdc:	cbz	x0, 3084 <adler32_combine64@@ZLIB_1.2.3.3+0x27c>
    2fe0:	mov	x1, x6
    2fe4:	mov	x2, #0x0                   	// #0
    2fe8:	tbz	w0, #0, 2ff4 <adler32_combine64@@ZLIB_1.2.3.3+0x1ec>
    2fec:	ldr	x3, [x1]
    2ff0:	eor	x2, x2, x3
    2ff4:	lsr	x0, x0, #1
    2ff8:	add	x1, x1, #0x8
    2ffc:	cbnz	x0, 2fe8 <adler32_combine64@@ZLIB_1.2.3.3+0x1e0>
    3000:	add	x4, x7, x4
    3004:	add	x5, x5, #0x1
    3008:	cmp	x5, #0x21
    300c:	stur	x2, [x4, #-8]
    3010:	b.ne	2fd0 <adler32_combine64@@ZLIB_1.2.3.3+0x1c8>  // b.any
    3014:	tbnz	w9, #0, 30f4 <adler32_combine64@@ZLIB_1.2.3.3+0x2ec>
    3018:	cmp	xzr, x9, asr #1
    301c:	asr	x11, x9, #1
    3020:	b.eq	3078 <adler32_combine64@@ZLIB_1.2.3.3+0x270>  // b.none
    3024:	mov	x5, #0x1                   	// #1
    3028:	lsl	x4, x5, #3
    302c:	add	x0, x7, x4
    3030:	ldur	x0, [x0, #-8]
    3034:	cbz	x0, 30a0 <adler32_combine64@@ZLIB_1.2.3.3+0x298>
    3038:	mov	x1, x7
    303c:	mov	x2, #0x0                   	// #0
    3040:	tbz	w0, #0, 304c <adler32_combine64@@ZLIB_1.2.3.3+0x244>
    3044:	ldr	x3, [x1]
    3048:	eor	x2, x2, x3
    304c:	lsr	x0, x0, #1
    3050:	add	x1, x1, #0x8
    3054:	cbnz	x0, 3040 <adler32_combine64@@ZLIB_1.2.3.3+0x238>
    3058:	add	x4, x6, x4
    305c:	add	x5, x5, #0x1
    3060:	cmp	x5, #0x21
    3064:	stur	x2, [x4, #-8]
    3068:	b.ne	3028 <adler32_combine64@@ZLIB_1.2.3.3+0x220>  // b.any
    306c:	tbnz	w11, #0, 3120 <adler32_combine64@@ZLIB_1.2.3.3+0x318>
    3070:	asr	x9, x9, #2
    3074:	cbnz	x9, 2fcc <adler32_combine64@@ZLIB_1.2.3.3+0x1c4>
    3078:	eor	x0, x8, x10
    307c:	add	sp, sp, #0x200
    3080:	ret
    3084:	add	x4, x7, x4
    3088:	mov	x2, #0x0                   	// #0
    308c:	add	x5, x5, #0x1
    3090:	cmp	x5, #0x21
    3094:	stur	x2, [x4, #-8]
    3098:	b.ne	2fd0 <adler32_combine64@@ZLIB_1.2.3.3+0x1c8>  // b.any
    309c:	b	3014 <adler32_combine64@@ZLIB_1.2.3.3+0x20c>
    30a0:	add	x4, x6, x4
    30a4:	mov	x2, #0x0                   	// #0
    30a8:	add	x5, x5, #0x1
    30ac:	cmp	x5, #0x21
    30b0:	stur	x2, [x4, #-8]
    30b4:	b.ne	3028 <adler32_combine64@@ZLIB_1.2.3.3+0x220>  // b.any
    30b8:	b	306c <adler32_combine64@@ZLIB_1.2.3.3+0x264>
    30bc:	add	x4, x6, x4
    30c0:	mov	x2, #0x0                   	// #0
    30c4:	add	x5, x5, #0x1
    30c8:	cmp	x5, #0x21
    30cc:	stur	x2, [x4, #-8]
    30d0:	b.ne	2f88 <adler32_combine64@@ZLIB_1.2.3.3+0x180>  // b.any
    30d4:	b	2fcc <adler32_combine64@@ZLIB_1.2.3.3+0x1c4>
    30d8:	add	x4, x7, x4
    30dc:	mov	x2, #0x0                   	// #0
    30e0:	add	x5, x5, #0x1
    30e4:	cmp	x5, #0x21
    30e8:	stur	x2, [x4, #-8]
    30ec:	b.ne	2f40 <adler32_combine64@@ZLIB_1.2.3.3+0x138>  // b.any
    30f0:	b	2f84 <adler32_combine64@@ZLIB_1.2.3.3+0x17c>
    30f4:	cbz	x8, 3018 <adler32_combine64@@ZLIB_1.2.3.3+0x210>
    30f8:	mov	x1, x7
    30fc:	mov	x0, x8
    3100:	mov	x8, #0x0                   	// #0
    3104:	tbz	w0, #0, 3110 <adler32_combine64@@ZLIB_1.2.3.3+0x308>
    3108:	ldr	x2, [x1]
    310c:	eor	x8, x8, x2
    3110:	lsr	x0, x0, #1
    3114:	add	x1, x1, #0x8
    3118:	cbnz	x0, 3104 <adler32_combine64@@ZLIB_1.2.3.3+0x2fc>
    311c:	b	3018 <adler32_combine64@@ZLIB_1.2.3.3+0x210>
    3120:	cbz	x8, 3070 <adler32_combine64@@ZLIB_1.2.3.3+0x268>
    3124:	mov	x1, x6
    3128:	mov	x0, x8
    312c:	mov	x8, #0x0                   	// #0
    3130:	tbz	w0, #0, 313c <adler32_combine64@@ZLIB_1.2.3.3+0x334>
    3134:	ldr	x2, [x1]
    3138:	eor	x8, x8, x2
    313c:	lsr	x0, x0, #1
    3140:	add	x1, x1, #0x8
    3144:	cbnz	x0, 3130 <adler32_combine64@@ZLIB_1.2.3.3+0x328>
    3148:	b	3070 <adler32_combine64@@ZLIB_1.2.3.3+0x268>
    314c:	ret

0000000000003150 <get_crc_table@@Base>:
    3150:	adrp	x0, 12000 <gzvprintf@@ZLIB_1.2.7.1+0x1a8>
    3154:	add	x0, x0, #0x550
    3158:	ret
    315c:	nop

0000000000003160 <crc32_z@@ZLIB_1.2.9>:
    3160:	cbz	x1, 3628 <crc32_z@@ZLIB_1.2.9+0x4c8>
    3164:	mov	w3, w0
    3168:	mvn	w4, w0
    316c:	cbz	x2, 31ac <crc32_z@@ZLIB_1.2.9+0x4c>
    3170:	tst	x1, #0x3
    3174:	b.eq	31b4 <crc32_z@@ZLIB_1.2.9+0x54>  // b.none
    3178:	adrp	x3, 12000 <gzvprintf@@ZLIB_1.2.7.1+0x1a8>
    317c:	add	x3, x3, #0x550
    3180:	b	318c <crc32_z@@ZLIB_1.2.9+0x2c>
    3184:	tst	x1, #0x3
    3188:	b.eq	31b4 <crc32_z@@ZLIB_1.2.9+0x54>  // b.none
    318c:	ldrb	w0, [x1], #1
    3190:	subs	x2, x2, #0x1
    3194:	eor	w0, w0, w4
    3198:	and	x0, x0, #0xff
    319c:	ldr	w0, [x3, x0, lsl #2]
    31a0:	eor	w4, w0, w4, lsr #8
    31a4:	b.ne	3184 <crc32_z@@ZLIB_1.2.9+0x24>  // b.any
    31a8:	mvn	w3, w4
    31ac:	mov	w0, w3
    31b0:	ret
    31b4:	cmp	x2, #0x1f
    31b8:	b.ls	33bc <crc32_z@@ZLIB_1.2.9+0x25c>  // b.plast
    31bc:	sub	x7, x2, #0x20
    31c0:	adrp	x3, 12000 <gzvprintf@@ZLIB_1.2.7.1+0x1a8>
    31c4:	and	x7, x7, #0xffffffffffffffe0
    31c8:	add	x3, x3, #0x550
    31cc:	add	x7, x7, #0x20
    31d0:	add	x7, x1, x7
    31d4:	nop
    31d8:	ldp	w0, w8, [x1]
    31dc:	ldp	w13, w5, [x1, #8]
    31e0:	eor	w4, w4, w0
    31e4:	ldp	w12, w11, [x1, #16]
    31e8:	ubfx	x6, x4, #8, #8
    31ec:	ubfx	x0, x4, #16, #8
    31f0:	add	x10, x3, w4, uxtb #2
    31f4:	add	x6, x6, #0x200
    31f8:	add	x0, x0, #0x100
    31fc:	lsr	w4, w4, #24
    3200:	add	x1, x1, #0x20
    3204:	ldr	w9, [x3, x6, lsl #2]
    3208:	ldr	w4, [x3, x4, lsl #2]
    320c:	ldr	w6, [x3, x0, lsl #2]
    3210:	ldr	w0, [x10, #3072]
    3214:	eor	w9, w9, w6
    3218:	ldur	w10, [x1, #-8]
    321c:	eor	w0, w0, w4
    3220:	cmp	x1, x7
    3224:	eor	w9, w9, w0
    3228:	eor	w9, w9, w8
    322c:	ubfx	x4, x9, #8, #8
    3230:	ubfx	x0, x9, #16, #8
    3234:	add	x4, x4, #0x200
    3238:	add	x0, x0, #0x100
    323c:	add	x14, x3, w9, uxtb #2
    3240:	lsr	w9, w9, #24
    3244:	ldr	w6, [x3, x0, lsl #2]
    3248:	ldr	w8, [x3, x4, lsl #2]
    324c:	ldr	w0, [x14, #3072]
    3250:	ldr	w4, [x3, x9, lsl #2]
    3254:	eor	w8, w8, w6
    3258:	eor	w0, w0, w4
    325c:	eor	w8, w8, w0
    3260:	eor	w8, w8, w13
    3264:	ubfx	x4, x8, #8, #8
    3268:	ubfx	x0, x8, #16, #8
    326c:	add	x4, x4, #0x200
    3270:	add	x0, x0, #0x100
    3274:	add	x13, x3, w8, uxtb #2
    3278:	lsr	w8, w8, #24
    327c:	ldr	w9, [x3, x0, lsl #2]
    3280:	ldr	w6, [x3, x4, lsl #2]
    3284:	ldr	w0, [x13, #3072]
    3288:	ldr	w4, [x3, x8, lsl #2]
    328c:	eor	w6, w6, w9
    3290:	eor	w0, w0, w4
    3294:	eor	w6, w6, w0
    3298:	eor	w6, w6, w5
    329c:	ubfx	x4, x6, #8, #8
    32a0:	ubfx	x0, x6, #16, #8
    32a4:	add	x4, x4, #0x200
    32a8:	add	x0, x0, #0x100
    32ac:	add	x9, x3, w6, uxtb #2
    32b0:	lsr	w6, w6, #24
    32b4:	ldr	w8, [x3, x0, lsl #2]
    32b8:	ldr	w5, [x3, x4, lsl #2]
    32bc:	ldr	w0, [x9, #3072]
    32c0:	ldr	w4, [x3, x6, lsl #2]
    32c4:	eor	w5, w5, w8
    32c8:	eor	w0, w0, w4
    32cc:	eor	w5, w5, w0
    32d0:	eor	w5, w5, w12
    32d4:	ubfx	x4, x5, #8, #8
    32d8:	ubfx	x0, x5, #16, #8
    32dc:	add	x8, x3, w5, uxtb #2
    32e0:	add	x0, x0, #0x100
    32e4:	add	x4, x4, #0x200
    32e8:	lsr	w5, w5, #24
    32ec:	ldr	w6, [x3, x0, lsl #2]
    32f0:	ldr	w5, [x3, x5, lsl #2]
    32f4:	ldr	w0, [x8, #3072]
    32f8:	ldr	w4, [x3, x4, lsl #2]
    32fc:	eor	w0, w0, w5
    3300:	eor	w4, w4, w6
    3304:	eor	w4, w4, w0
    3308:	eor	w4, w4, w11
    330c:	ubfx	x0, x4, #8, #8
    3310:	ubfx	x5, x4, #16, #8
    3314:	add	x8, x3, w4, uxtb #2
    3318:	add	x5, x5, #0x100
    331c:	lsr	w4, w4, #24
    3320:	add	x0, x0, #0x200
    3324:	ldr	w6, [x3, x5, lsl #2]
    3328:	ldr	w0, [x3, x0, lsl #2]
    332c:	ldr	w5, [x3, x4, lsl #2]
    3330:	ldr	w4, [x8, #3072]
    3334:	eor	w0, w0, w6
    3338:	eor	w4, w4, w5
    333c:	eor	w0, w0, w4
    3340:	eor	w0, w0, w10
    3344:	ubfx	x6, x0, #8, #8
    3348:	ubfx	x5, x0, #16, #8
    334c:	add	x8, x3, w0, uxtb #2
    3350:	lsr	w4, w0, #24
    3354:	add	x6, x6, #0x200
    3358:	add	x5, x5, #0x100
    335c:	ldr	w0, [x3, x6, lsl #2]
    3360:	ldr	w5, [x3, x5, lsl #2]
    3364:	ldr	w6, [x3, x4, lsl #2]
    3368:	ldr	w4, [x8, #3072]
    336c:	eor	w0, w0, w5
    3370:	ldur	w5, [x1, #-4]
    3374:	eor	w4, w4, w6
    3378:	eor	w0, w0, w4
    337c:	eor	w0, w0, w5
    3380:	ubfx	x4, x0, #8, #8
    3384:	ubfx	x5, x0, #16, #8
    3388:	add	x5, x5, #0x100
    338c:	add	x8, x3, w0, uxtb #2
    3390:	add	x4, x4, #0x200
    3394:	lsr	w0, w0, #24
    3398:	ldr	w6, [x3, x5, lsl #2]
    339c:	ldr	w4, [x3, x4, lsl #2]
    33a0:	ldr	w5, [x3, x0, lsl #2]
    33a4:	ldr	w0, [x8, #3072]
    33a8:	eor	w4, w4, w6
    33ac:	eor	w0, w0, w5
    33b0:	eor	w4, w4, w0
    33b4:	b.ne	31d8 <crc32_z@@ZLIB_1.2.9+0x78>  // b.any
    33b8:	and	x2, x2, #0x1f
    33bc:	cmp	x2, #0x3
    33c0:	b.ls	35c8 <crc32_z@@ZLIB_1.2.9+0x468>  // b.plast
    33c4:	ldr	w0, [x1]
    33c8:	adrp	x6, 12000 <gzvprintf@@ZLIB_1.2.7.1+0x1a8>
    33cc:	add	x6, x6, #0x550
    33d0:	sub	x7, x2, #0x4
    33d4:	eor	w4, w4, w0
    33d8:	cmp	x7, #0x3
    33dc:	ubfx	x3, x4, #16, #8
    33e0:	ubfx	x0, x4, #8, #8
    33e4:	add	x3, x3, #0x100
    33e8:	add	x0, x0, #0x200
    33ec:	add	x9, x6, w4, uxtb #2
    33f0:	lsr	w4, w4, #24
    33f4:	ldr	w5, [x6, x3, lsl #2]
    33f8:	ldr	w8, [x6, x0, lsl #2]
    33fc:	ldr	w3, [x6, x4, lsl #2]
    3400:	ldr	w0, [x9, #3072]
    3404:	eor	w4, w5, w8
    3408:	eor	w3, w3, w0
    340c:	eor	w4, w4, w3
    3410:	b.ls	35b8 <crc32_z@@ZLIB_1.2.9+0x458>  // b.plast
    3414:	ldr	w0, [x1, #4]
    3418:	sub	x3, x2, #0x8
    341c:	cmp	x3, #0x3
    3420:	eor	w4, w4, w0
    3424:	ubfx	x3, x4, #16, #8
    3428:	ubfx	x0, x4, #8, #8
    342c:	lsr	w5, w4, #24
    3430:	add	x0, x0, #0x200
    3434:	add	x4, x6, w4, uxtb #2
    3438:	add	x3, x3, #0x100
    343c:	ldr	w8, [x6, x0, lsl #2]
    3440:	ldr	w3, [x6, x3, lsl #2]
    3444:	ldr	w0, [x6, x5, lsl #2]
    3448:	ldr	w5, [x4, #3072]
    344c:	eor	w4, w3, w8
    3450:	eor	w0, w0, w5
    3454:	eor	w4, w4, w0
    3458:	b.ls	35b8 <crc32_z@@ZLIB_1.2.9+0x458>  // b.plast
    345c:	ldr	w3, [x1, #8]
    3460:	sub	x0, x2, #0xc
    3464:	cmp	x0, #0x3
    3468:	eor	w4, w4, w3
    346c:	ubfx	x3, x4, #16, #8
    3470:	ubfx	x0, x4, #8, #8
    3474:	lsr	w5, w4, #24
    3478:	add	x0, x0, #0x200
    347c:	add	x4, x6, w4, uxtb #2
    3480:	add	x3, x3, #0x100
    3484:	ldr	w8, [x6, x0, lsl #2]
    3488:	ldr	w3, [x6, x3, lsl #2]
    348c:	ldr	w0, [x6, x5, lsl #2]
    3490:	ldr	w5, [x4, #3072]
    3494:	eor	w4, w3, w8
    3498:	eor	w0, w0, w5
    349c:	eor	w4, w4, w0
    34a0:	b.ls	35b8 <crc32_z@@ZLIB_1.2.9+0x458>  // b.plast
    34a4:	ldr	w3, [x1, #12]
    34a8:	sub	x0, x2, #0x10
    34ac:	cmp	x0, #0x3
    34b0:	eor	w4, w4, w3
    34b4:	ubfx	x3, x4, #16, #8
    34b8:	ubfx	x0, x4, #8, #8
    34bc:	lsr	w5, w4, #24
    34c0:	add	x0, x0, #0x200
    34c4:	add	x4, x6, w4, uxtb #2
    34c8:	add	x3, x3, #0x100
    34cc:	ldr	w8, [x6, x0, lsl #2]
    34d0:	ldr	w3, [x6, x3, lsl #2]
    34d4:	ldr	w0, [x6, x5, lsl #2]
    34d8:	ldr	w5, [x4, #3072]
    34dc:	eor	w4, w3, w8
    34e0:	eor	w0, w0, w5
    34e4:	eor	w4, w4, w0
    34e8:	b.ls	35b8 <crc32_z@@ZLIB_1.2.9+0x458>  // b.plast
    34ec:	ldr	w3, [x1, #16]
    34f0:	sub	x0, x2, #0x14
    34f4:	cmp	x0, #0x3
    34f8:	eor	w4, w4, w3
    34fc:	ubfx	x3, x4, #16, #8
    3500:	ubfx	x0, x4, #8, #8
    3504:	lsr	w5, w4, #24
    3508:	add	x0, x0, #0x200
    350c:	add	x4, x6, w4, uxtb #2
    3510:	add	x3, x3, #0x100
    3514:	ldr	w8, [x6, x0, lsl #2]
    3518:	ldr	w3, [x6, x3, lsl #2]
    351c:	ldr	w0, [x6, x5, lsl #2]
    3520:	ldr	w5, [x4, #3072]
    3524:	eor	w4, w3, w8
    3528:	eor	w0, w0, w5
    352c:	eor	w4, w4, w0
    3530:	b.ls	35b8 <crc32_z@@ZLIB_1.2.9+0x458>  // b.plast
    3534:	ldr	w3, [x1, #20]
    3538:	sub	x0, x2, #0x18
    353c:	cmp	x0, #0x3
    3540:	eor	w4, w4, w3
    3544:	ubfx	x3, x4, #16, #8
    3548:	ubfx	x0, x4, #8, #8
    354c:	lsr	w5, w4, #24
    3550:	add	x0, x0, #0x200
    3554:	add	x4, x6, w4, uxtb #2
    3558:	add	x3, x3, #0x100
    355c:	ldr	w8, [x6, x0, lsl #2]
    3560:	ldr	w3, [x6, x3, lsl #2]
    3564:	ldr	w0, [x6, x5, lsl #2]
    3568:	ldr	w5, [x4, #3072]
    356c:	eor	w4, w3, w8
    3570:	eor	w0, w0, w5
    3574:	eor	w4, w4, w0
    3578:	b.ls	35b8 <crc32_z@@ZLIB_1.2.9+0x458>  // b.plast
    357c:	ldr	w3, [x1, #24]
    3580:	eor	w4, w4, w3
    3584:	ubfx	x0, x4, #8, #8
    3588:	ubfx	x3, x4, #16, #8
    358c:	add	x3, x3, #0x100
    3590:	add	x8, x6, w4, uxtb #2
    3594:	add	x0, x0, #0x200
    3598:	lsr	w4, w4, #24
    359c:	ldr	w5, [x6, x3, lsl #2]
    35a0:	ldr	w0, [x6, x0, lsl #2]
    35a4:	ldr	w3, [x6, x4, lsl #2]
    35a8:	ldr	w4, [x8, #3072]
    35ac:	eor	w0, w0, w5
    35b0:	eor	w4, w4, w3
    35b4:	eor	w4, w4, w0
    35b8:	and	x0, x7, #0xfffffffffffffffc
    35bc:	and	x2, x2, #0x3
    35c0:	add	x0, x0, #0x4
    35c4:	add	x1, x1, x0
    35c8:	cbz	x2, 31a8 <crc32_z@@ZLIB_1.2.9+0x48>
    35cc:	ldrb	w0, [x1]
    35d0:	adrp	x5, 12000 <gzvprintf@@ZLIB_1.2.7.1+0x1a8>
    35d4:	add	x5, x5, #0x550
    35d8:	subs	x2, x2, #0x1
    35dc:	eor	w0, w0, w4
    35e0:	and	x0, x0, #0xff
    35e4:	ldr	w3, [x5, x0, lsl #2]
    35e8:	eor	w4, w3, w4, lsr #8
    35ec:	b.eq	31a8 <crc32_z@@ZLIB_1.2.9+0x48>  // b.none
    35f0:	ldrb	w0, [x1, #1]
    35f4:	cmp	x2, #0x1
    35f8:	eor	w0, w0, w4
    35fc:	and	x0, x0, #0xff
    3600:	ldr	w0, [x5, x0, lsl #2]
    3604:	eor	w4, w0, w4, lsr #8
    3608:	b.eq	31a8 <crc32_z@@ZLIB_1.2.9+0x48>  // b.none
    360c:	ldrb	w0, [x1, #2]
    3610:	eor	w0, w0, w4
    3614:	and	x0, x0, #0xff
    3618:	ldr	w0, [x5, x0, lsl #2]
    361c:	eor	w4, w0, w4, lsr #8
    3620:	mvn	w3, w4
    3624:	b	31ac <crc32_z@@ZLIB_1.2.9+0x4c>
    3628:	mov	x0, #0x0                   	// #0
    362c:	ret

0000000000003630 <crc32@@Base>:
    3630:	mov	w2, w2
    3634:	b	23b0 <crc32_z@plt>

0000000000003638 <crc32_combine@@ZLIB_1.2.2>:
    3638:	b	2ef0 <adler32_combine64@@ZLIB_1.2.3.3+0xe8>
    363c:	nop

0000000000003640 <crc32_combine64@@ZLIB_1.2.3.3>:
    3640:	b	2ef0 <adler32_combine64@@ZLIB_1.2.3.3+0xe8>
    3644:	nop
    3648:	ldp	w16, w7, [x0, #180]
    364c:	mov	w18, #0x102                 	// #258
    3650:	ldr	w2, [x0, #172]
    3654:	ldr	x8, [x0, #96]
    3658:	mov	w14, w2
    365c:	ldr	w3, [x0, #80]
    3660:	add	w9, w2, #0x106
    3664:	ldp	w5, w17, [x0, #204]
    3668:	add	x13, x8, x14
    366c:	ldr	w6, [x0, #188]
    3670:	sub	w10, w3, #0x106
    3674:	cmp	w2, w10
    3678:	sub	w9, w9, w3
    367c:	add	x4, x13, w7, sxtw
    3680:	csel	w9, w9, wzr, hi  // hi = pmore
    3684:	lsr	w2, w6, #2
    3688:	cmp	w7, w5
    368c:	csel	w6, w2, w6, cs  // cs = hs, nlast
    3690:	add	x14, x14, #0x102
    3694:	cmp	w16, w17
    3698:	ldr	w12, [x0, #88]
    369c:	ldurb	w15, [x4, #-1]
    36a0:	csel	w17, w17, w16, cs  // cs = hs, nlast
    36a4:	ldrb	w10, [x13, w7, sxtw]
    36a8:	add	x14, x8, x14
    36ac:	ldr	x11, [x0, #112]
    36b0:	b	36cc <crc32_combine64@@ZLIB_1.2.3.3+0x8c>
    36b4:	and	w1, w1, w12
    36b8:	ldrh	w1, [x11, x1, lsl #1]
    36bc:	cmp	w9, w1
    36c0:	b.cs	37e0 <crc32_combine64@@ZLIB_1.2.3.3+0x1a0>  // b.hs, b.nlast
    36c4:	subs	w6, w6, #0x1
    36c8:	b.eq	37e0 <crc32_combine64@@ZLIB_1.2.3.3+0x1a0>  // b.none
    36cc:	mov	w4, w1
    36d0:	sxtw	x3, w7
    36d4:	add	x2, x8, x4
    36d8:	ldrb	w5, [x2, w7, sxtw]
    36dc:	cmp	w5, w10
    36e0:	b.ne	36b4 <crc32_combine64@@ZLIB_1.2.3.3+0x74>  // b.any
    36e4:	add	x3, x2, x3
    36e8:	ldurb	w3, [x3, #-1]
    36ec:	cmp	w3, w15
    36f0:	b.ne	36b4 <crc32_combine64@@ZLIB_1.2.3.3+0x74>  // b.any
    36f4:	ldrb	w4, [x8, x4]
    36f8:	ldrb	w3, [x13]
    36fc:	cmp	w4, w3
    3700:	b.ne	36b4 <crc32_combine64@@ZLIB_1.2.3.3+0x74>  // b.any
    3704:	ldrb	w4, [x2, #1]
    3708:	ldrb	w3, [x13, #1]
    370c:	cmp	w4, w3
    3710:	b.ne	36b4 <crc32_combine64@@ZLIB_1.2.3.3+0x74>  // b.any
    3714:	add	x2, x2, #0x2
    3718:	add	x3, x13, #0x2
    371c:	nop
    3720:	ldrb	w5, [x3, #1]
    3724:	ldrb	w4, [x2, #1]
    3728:	cmp	w5, w4
    372c:	b.ne	37ec <crc32_combine64@@ZLIB_1.2.3.3+0x1ac>  // b.any
    3730:	ldrb	w5, [x3, #2]
    3734:	ldrb	w4, [x2, #2]
    3738:	cmp	w5, w4
    373c:	b.ne	37f4 <crc32_combine64@@ZLIB_1.2.3.3+0x1b4>  // b.any
    3740:	ldrb	w5, [x3, #3]
    3744:	ldrb	w4, [x2, #3]
    3748:	cmp	w5, w4
    374c:	b.ne	37fc <crc32_combine64@@ZLIB_1.2.3.3+0x1bc>  // b.any
    3750:	ldrb	w5, [x3, #4]
    3754:	ldrb	w4, [x2, #4]
    3758:	cmp	w5, w4
    375c:	b.ne	3804 <crc32_combine64@@ZLIB_1.2.3.3+0x1c4>  // b.any
    3760:	ldrb	w5, [x3, #5]
    3764:	ldrb	w4, [x2, #5]
    3768:	cmp	w5, w4
    376c:	b.ne	3814 <crc32_combine64@@ZLIB_1.2.3.3+0x1d4>  // b.any
    3770:	ldrb	w5, [x3, #6]
    3774:	ldrb	w4, [x2, #6]
    3778:	cmp	w5, w4
    377c:	b.ne	380c <crc32_combine64@@ZLIB_1.2.3.3+0x1cc>  // b.any
    3780:	ldrb	w5, [x3, #7]
    3784:	ldrb	w4, [x2, #7]
    3788:	cmp	w5, w4
    378c:	b.ne	381c <crc32_combine64@@ZLIB_1.2.3.3+0x1dc>  // b.any
    3790:	ldrb	w5, [x3, #8]!
    3794:	ldrb	w4, [x2, #8]!
    3798:	cmp	w5, w4
    379c:	ccmp	x14, x3, #0x0, eq  // eq = none
    37a0:	b.hi	3720 <crc32_combine64@@ZLIB_1.2.3.3+0xe0>  // b.pmore
    37a4:	sub	x3, x14, x3
    37a8:	sub	w3, w18, w3
    37ac:	cmp	w7, w3
    37b0:	b.ge	36b4 <crc32_combine64@@ZLIB_1.2.3.3+0x74>  // b.tcont
    37b4:	str	w1, [x0, #176]
    37b8:	cmp	w3, w17
    37bc:	b.ge	3824 <crc32_combine64@@ZLIB_1.2.3.3+0x1e4>  // b.tcont
    37c0:	and	w1, w1, w12
    37c4:	add	x2, x13, w3, sxtw
    37c8:	ldrb	w10, [x13, w3, sxtw]
    37cc:	mov	w7, w3
    37d0:	ldrh	w1, [x11, x1, lsl #1]
    37d4:	ldurb	w15, [x2, #-1]
    37d8:	cmp	w9, w1
    37dc:	b.cc	36c4 <crc32_combine64@@ZLIB_1.2.3.3+0x84>  // b.lo, b.ul, b.last
    37e0:	cmp	w7, w16
    37e4:	csel	w0, w7, w16, ls  // ls = plast
    37e8:	ret
    37ec:	add	x3, x3, #0x1
    37f0:	b	37a4 <crc32_combine64@@ZLIB_1.2.3.3+0x164>
    37f4:	add	x3, x3, #0x2
    37f8:	b	37a4 <crc32_combine64@@ZLIB_1.2.3.3+0x164>
    37fc:	add	x3, x3, #0x3
    3800:	b	37a4 <crc32_combine64@@ZLIB_1.2.3.3+0x164>
    3804:	add	x3, x3, #0x4
    3808:	b	37a4 <crc32_combine64@@ZLIB_1.2.3.3+0x164>
    380c:	add	x3, x3, #0x6
    3810:	b	37a4 <crc32_combine64@@ZLIB_1.2.3.3+0x164>
    3814:	add	x3, x3, #0x5
    3818:	b	37a4 <crc32_combine64@@ZLIB_1.2.3.3+0x164>
    381c:	add	x3, x3, #0x7
    3820:	b	37a4 <crc32_combine64@@ZLIB_1.2.3.3+0x164>
    3824:	mov	w7, w3
    3828:	b	37e0 <crc32_combine64@@ZLIB_1.2.3.3+0x1a0>
    382c:	nop
    3830:	stp	x29, x30, [sp, #-80]!
    3834:	mov	x29, sp
    3838:	stp	x23, x24, [sp, #48]
    383c:	ldr	w23, [x0, #80]
    3840:	ldr	w3, [x0, #180]
    3844:	stp	x19, x20, [sp, #16]
    3848:	mov	x19, x0
    384c:	sub	w20, w23, #0x106
    3850:	mov	w0, w23
    3854:	stp	x21, x22, [sp, #32]
    3858:	mov	w21, w23
    385c:	str	x25, [sp, #64]
    3860:	str	d8, [sp, #72]
    3864:	dup	v8.2s, w23
    3868:	b	391c <crc32_combine64@@ZLIB_1.2.3.3+0x2dc>
    386c:	ldr	x24, [x19]
    3870:	ldr	w4, [x24, #8]
    3874:	cbz	w4, 3c58 <crc32_combine64@@ZLIB_1.2.3.3+0x618>
    3878:	cmp	w22, w4
    387c:	ldr	w3, [x19, #180]
    3880:	csel	w22, w22, w4, ls  // ls = plast
    3884:	cbz	w22, 38f0 <crc32_combine64@@ZLIB_1.2.3.3+0x2b0>
    3888:	ldr	x0, [x19, #96]
    388c:	mov	w3, w3
    3890:	add	x3, x3, w5, uxtw
    3894:	sub	w4, w4, w22
    3898:	ldr	x1, [x24]
    389c:	add	x3, x0, x3
    38a0:	str	w4, [x24, #8]
    38a4:	mov	w25, w22
    38a8:	mov	x0, x3
    38ac:	mov	x2, x25
    38b0:	bl	23a0 <memcpy@plt>
    38b4:	mov	x3, x0
    38b8:	ldr	x0, [x24, #56]
    38bc:	ldr	w0, [x0, #48]
    38c0:	cmp	w0, #0x1
    38c4:	b.eq	3d34 <crc32_combine64@@ZLIB_1.2.3.3+0x6f4>  // b.none
    38c8:	cmp	w0, #0x2
    38cc:	b.eq	3d4c <crc32_combine64@@ZLIB_1.2.3.3+0x70c>  // b.none
    38d0:	ldr	w3, [x19, #180]
    38d4:	ldr	x1, [x24]
    38d8:	add	w3, w22, w3
    38dc:	ldr	x0, [x24, #16]
    38e0:	add	x1, x1, x25
    38e4:	str	x1, [x24]
    38e8:	add	x0, x0, x25
    38ec:	str	x0, [x24, #16]
    38f0:	ldr	w0, [x19, #5932]
    38f4:	str	w3, [x19, #180]
    38f8:	add	w1, w0, w3
    38fc:	cmp	w1, #0x2
    3900:	b.hi	3ca4 <crc32_combine64@@ZLIB_1.2.3.3+0x664>  // b.pmore
    3904:	cmp	w3, #0x105
    3908:	b.hi	3c58 <crc32_combine64@@ZLIB_1.2.3.3+0x618>  // b.pmore
    390c:	ldr	x0, [x19]
    3910:	ldr	w0, [x0, #8]
    3914:	cbz	w0, 3c58 <crc32_combine64@@ZLIB_1.2.3.3+0x618>
    3918:	ldr	w0, [x19, #80]
    391c:	ldr	x1, [x19, #104]
    3920:	add	w0, w20, w0
    3924:	ldr	w5, [x19, #172]
    3928:	sub	w22, w1, w5
    392c:	cmp	w5, w0
    3930:	add	w2, w5, w23
    3934:	sub	w22, w22, w3
    3938:	b.cc	386c <crc32_combine64@@ZLIB_1.2.3.3+0x22c>  // b.lo, b.ul, b.last
    393c:	ldr	x0, [x19, #96]
    3940:	sub	w3, w3, w1
    3944:	add	w2, w3, w2
    3948:	add	x1, x0, x21
    394c:	bl	23a0 <memcpy@plt>
    3950:	ldr	x0, [x19, #152]
    3954:	ldur	d0, [x19, #172]
    3958:	ldr	w6, [x19, #132]
    395c:	sub	x0, x0, x21
    3960:	ldr	w3, [x19, #172]
    3964:	sub	v0.2s, v0.2s, v8.2s
    3968:	str	x0, [x19, #152]
    396c:	ldr	w0, [x19, #80]
    3970:	sub	w5, w6, #0x1
    3974:	cmp	w5, #0x6
    3978:	sub	w5, w3, w23
    397c:	and	w3, w0, #0xffff
    3980:	fmov	s6, w3
    3984:	ldr	x1, [x19, #120]
    3988:	adrp	x3, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    398c:	ubfiz	x2, x6, #1, #32
    3990:	stur	d0, [x19, #172]
    3994:	ldr	q1, [x3, #1360]
    3998:	add	x4, x1, x2
    399c:	b.ls	3d6c <crc32_combine64@@ZLIB_1.2.3.3+0x72c>  // b.plast
    39a0:	sub	w3, w6, #0x8
    39a4:	dup	v4.4s, w0
    39a8:	dup	v7.8h, v6.h[0]
    39ac:	sub	x2, x2, #0x10
    39b0:	lsr	w3, w3, #3
    39b4:	add	x1, x1, x2
    39b8:	add	w3, w3, #0x1
    39bc:	mov	w2, #0x0                   	// #0
    39c0:	ldr	q0, [x1]
    39c4:	add	w2, w2, #0x1
    39c8:	cmp	w2, w3
    39cc:	tbl	v0.16b, {v0.16b}, v1.16b
    39d0:	uxtl	v3.4s, v0.4h
    39d4:	uxtl2	v2.4s, v0.8h
    39d8:	sub	v0.8h, v0.8h, v7.8h
    39dc:	cmhs	v3.4s, v3.4s, v4.4s
    39e0:	cmhs	v2.4s, v2.4s, v4.4s
    39e4:	xtn	v5.4h, v3.4s
    39e8:	xtn2	v5.8h, v2.4s
    39ec:	and	v0.16b, v0.16b, v5.16b
    39f0:	tbl	v0.16b, {v0.16b}, v1.16b
    39f4:	str	q0, [x1], #-16
    39f8:	b.cc	39c0 <crc32_combine64@@ZLIB_1.2.3.3+0x380>  // b.lo, b.ul, b.last
    39fc:	lsl	w1, w3, #3
    3a00:	subs	w3, w6, w1
    3a04:	sub	x4, x4, x1, lsl #1
    3a08:	b.eq	3ae4 <crc32_combine64@@ZLIB_1.2.3.3+0x4a4>  // b.none
    3a0c:	ldurh	w2, [x4, #-2]
    3a10:	sub	w1, w2, w0
    3a14:	cmp	w0, w2
    3a18:	and	w1, w1, #0xffff
    3a1c:	csel	w1, w1, wzr, ls  // ls = plast
    3a20:	sturh	w1, [x4, #-2]
    3a24:	cmp	w3, #0x1
    3a28:	b.eq	3ae4 <crc32_combine64@@ZLIB_1.2.3.3+0x4a4>  // b.none
    3a2c:	ldurh	w2, [x4, #-4]
    3a30:	sub	w1, w2, w0
    3a34:	cmp	w0, w2
    3a38:	and	w1, w1, #0xffff
    3a3c:	csel	w1, w1, wzr, ls  // ls = plast
    3a40:	sturh	w1, [x4, #-4]
    3a44:	cmp	w3, #0x2
    3a48:	b.eq	3ae4 <crc32_combine64@@ZLIB_1.2.3.3+0x4a4>  // b.none
    3a4c:	ldurh	w2, [x4, #-6]
    3a50:	sub	w1, w2, w0
    3a54:	cmp	w0, w2
    3a58:	and	w1, w1, #0xffff
    3a5c:	csel	w1, w1, wzr, ls  // ls = plast
    3a60:	sturh	w1, [x4, #-6]
    3a64:	cmp	w3, #0x3
    3a68:	b.eq	3ae4 <crc32_combine64@@ZLIB_1.2.3.3+0x4a4>  // b.none
    3a6c:	ldurh	w2, [x4, #-8]
    3a70:	sub	w1, w2, w0
    3a74:	cmp	w0, w2
    3a78:	and	w1, w1, #0xffff
    3a7c:	csel	w1, w1, wzr, ls  // ls = plast
    3a80:	sturh	w1, [x4, #-8]
    3a84:	cmp	w3, #0x4
    3a88:	b.eq	3ae4 <crc32_combine64@@ZLIB_1.2.3.3+0x4a4>  // b.none
    3a8c:	ldurh	w2, [x4, #-10]
    3a90:	sub	w1, w2, w0
    3a94:	cmp	w0, w2
    3a98:	and	w1, w1, #0xffff
    3a9c:	csel	w1, w1, wzr, ls  // ls = plast
    3aa0:	sturh	w1, [x4, #-10]
    3aa4:	cmp	w3, #0x5
    3aa8:	b.eq	3ae4 <crc32_combine64@@ZLIB_1.2.3.3+0x4a4>  // b.none
    3aac:	ldurh	w2, [x4, #-12]
    3ab0:	sub	w1, w2, w0
    3ab4:	cmp	w0, w2
    3ab8:	and	w1, w1, #0xffff
    3abc:	csel	w1, w1, wzr, ls  // ls = plast
    3ac0:	sturh	w1, [x4, #-12]
    3ac4:	cmp	w3, #0x6
    3ac8:	b.eq	3ae4 <crc32_combine64@@ZLIB_1.2.3.3+0x4a4>  // b.none
    3acc:	ldurh	w2, [x4, #-14]
    3ad0:	sub	w1, w2, w0
    3ad4:	cmp	w0, w2
    3ad8:	and	w1, w1, #0xffff
    3adc:	csel	w1, w1, wzr, ls  // ls = plast
    3ae0:	sturh	w1, [x4, #-14]
    3ae4:	ldr	x1, [x19, #112]
    3ae8:	ubfiz	x2, x0, #1, #32
    3aec:	sub	w4, w0, #0x1
    3af0:	cmp	w4, #0x6
    3af4:	add	x3, x1, x2
    3af8:	b.ls	3d64 <crc32_combine64@@ZLIB_1.2.3.3+0x724>  // b.plast
    3afc:	sub	w4, w0, #0x8
    3b00:	dup	v4.4s, w0
    3b04:	dup	v6.8h, v6.h[0]
    3b08:	sub	x2, x2, #0x10
    3b0c:	lsr	w4, w4, #3
    3b10:	add	x1, x1, x2
    3b14:	add	w4, w4, #0x1
    3b18:	mov	w2, #0x0                   	// #0
    3b1c:	nop
    3b20:	ldr	q0, [x1]
    3b24:	add	w2, w2, #0x1
    3b28:	cmp	w4, w2
    3b2c:	tbl	v0.16b, {v0.16b}, v1.16b
    3b30:	uxtl	v3.4s, v0.4h
    3b34:	uxtl2	v2.4s, v0.8h
    3b38:	sub	v0.8h, v0.8h, v6.8h
    3b3c:	cmhs	v3.4s, v3.4s, v4.4s
    3b40:	cmhs	v2.4s, v2.4s, v4.4s
    3b44:	xtn	v5.4h, v3.4s
    3b48:	xtn2	v5.8h, v2.4s
    3b4c:	and	v0.16b, v0.16b, v5.16b
    3b50:	tbl	v0.16b, {v0.16b}, v1.16b
    3b54:	str	q0, [x1], #-16
    3b58:	b.hi	3b20 <crc32_combine64@@ZLIB_1.2.3.3+0x4e0>  // b.pmore
    3b5c:	lsl	w1, w4, #3
    3b60:	subs	w4, w0, w1
    3b64:	sub	x3, x3, x1, lsl #1
    3b68:	b.eq	3c44 <crc32_combine64@@ZLIB_1.2.3.3+0x604>  // b.none
    3b6c:	ldurh	w2, [x3, #-2]
    3b70:	sub	w1, w2, w0
    3b74:	cmp	w0, w2
    3b78:	and	w1, w1, #0xffff
    3b7c:	csel	w1, w1, wzr, ls  // ls = plast
    3b80:	sturh	w1, [x3, #-2]
    3b84:	cmp	w4, #0x1
    3b88:	b.eq	3c44 <crc32_combine64@@ZLIB_1.2.3.3+0x604>  // b.none
    3b8c:	ldurh	w2, [x3, #-4]
    3b90:	sub	w1, w2, w0
    3b94:	cmp	w0, w2
    3b98:	and	w1, w1, #0xffff
    3b9c:	csel	w1, w1, wzr, ls  // ls = plast
    3ba0:	sturh	w1, [x3, #-4]
    3ba4:	cmp	w4, #0x2
    3ba8:	b.eq	3c44 <crc32_combine64@@ZLIB_1.2.3.3+0x604>  // b.none
    3bac:	ldurh	w2, [x3, #-6]
    3bb0:	sub	w1, w2, w0
    3bb4:	cmp	w0, w2
    3bb8:	and	w1, w1, #0xffff
    3bbc:	csel	w1, w1, wzr, ls  // ls = plast
    3bc0:	sturh	w1, [x3, #-6]
    3bc4:	cmp	w4, #0x3
    3bc8:	b.eq	3c44 <crc32_combine64@@ZLIB_1.2.3.3+0x604>  // b.none
    3bcc:	ldurh	w2, [x3, #-8]
    3bd0:	sub	w1, w2, w0
    3bd4:	cmp	w0, w2
    3bd8:	and	w1, w1, #0xffff
    3bdc:	csel	w1, w1, wzr, ls  // ls = plast
    3be0:	sturh	w1, [x3, #-8]
    3be4:	cmp	w4, #0x4
    3be8:	b.eq	3c44 <crc32_combine64@@ZLIB_1.2.3.3+0x604>  // b.none
    3bec:	ldurh	w2, [x3, #-10]
    3bf0:	sub	w1, w2, w0
    3bf4:	cmp	w0, w2
    3bf8:	and	w1, w1, #0xffff
    3bfc:	csel	w1, w1, wzr, ls  // ls = plast
    3c00:	sturh	w1, [x3, #-10]
    3c04:	cmp	w4, #0x5
    3c08:	b.eq	3c44 <crc32_combine64@@ZLIB_1.2.3.3+0x604>  // b.none
    3c0c:	ldurh	w2, [x3, #-12]
    3c10:	sub	w1, w2, w0
    3c14:	cmp	w0, w2
    3c18:	and	w1, w1, #0xffff
    3c1c:	csel	w1, w1, wzr, ls  // ls = plast
    3c20:	sturh	w1, [x3, #-12]
    3c24:	cmp	w4, #0x6
    3c28:	b.eq	3c44 <crc32_combine64@@ZLIB_1.2.3.3+0x604>  // b.none
    3c2c:	ldurh	w2, [x3, #-14]
    3c30:	sub	w1, w2, w0
    3c34:	cmp	w0, w2
    3c38:	and	w0, w1, #0xffff
    3c3c:	csel	w0, w0, wzr, ls  // ls = plast
    3c40:	sturh	w0, [x3, #-14]
    3c44:	ldr	x24, [x19]
    3c48:	add	w22, w22, w23
    3c4c:	ldr	w4, [x24, #8]
    3c50:	cbnz	w4, 3878 <crc32_combine64@@ZLIB_1.2.3.3+0x238>
    3c54:	nop
    3c58:	ldr	x1, [x19, #104]
    3c5c:	ldr	x0, [x19, #5944]
    3c60:	cmp	x0, x1
    3c64:	b.cs	3c88 <crc32_combine64@@ZLIB_1.2.3.3+0x648>  // b.hs, b.nlast
    3c68:	ldr	w20, [x19, #172]
    3c6c:	ldr	w21, [x19, #180]
    3c70:	add	x21, x20, x21
    3c74:	cmp	x0, x21
    3c78:	b.cc	3d74 <crc32_combine64@@ZLIB_1.2.3.3+0x734>  // b.lo, b.ul, b.last
    3c7c:	add	x2, x21, #0x102
    3c80:	cmp	x0, x2
    3c84:	b.cc	3dbc <crc32_combine64@@ZLIB_1.2.3.3+0x77c>  // b.lo, b.ul, b.last
    3c88:	ldp	x19, x20, [sp, #16]
    3c8c:	ldp	x21, x22, [sp, #32]
    3c90:	ldp	x23, x24, [sp, #48]
    3c94:	ldr	x25, [sp, #64]
    3c98:	ldr	d8, [sp, #72]
    3c9c:	ldp	x29, x30, [sp], #80
    3ca0:	ret
    3ca4:	ldr	w5, [x19, #172]
    3ca8:	ldr	x9, [x19, #96]
    3cac:	sub	w0, w5, w0
    3cb0:	add	w1, w0, #0x1
    3cb4:	ldp	w11, w10, [x19, #140]
    3cb8:	ldrb	w2, [x9, w0, uxtw]
    3cbc:	str	w2, [x19, #128]
    3cc0:	ldrb	w1, [x9, w1, uxtw]
    3cc4:	lsl	w2, w2, w10
    3cc8:	eor	w1, w1, w2
    3ccc:	and	w1, w1, w11
    3cd0:	str	w1, [x19, #128]
    3cd4:	b	3d20 <crc32_combine64@@ZLIB_1.2.3.3+0x6e0>
    3cd8:	ldrb	w4, [x9, w4, uxtw]
    3cdc:	ldp	x7, x6, [x19, #112]
    3ce0:	eor	w1, w4, w1
    3ce4:	and	w1, w1, w11
    3ce8:	ldr	w2, [x19, #88]
    3cec:	ubfiz	x4, x1, #1, #32
    3cf0:	and	w2, w0, w2
    3cf4:	ldrh	w8, [x6, x4]
    3cf8:	str	w1, [x19, #128]
    3cfc:	strh	w8, [x7, x2, lsl #1]
    3d00:	strh	w0, [x6, x4]
    3d04:	add	w0, w0, #0x1
    3d08:	sub	w2, w3, w0
    3d0c:	sub	w4, w5, w0
    3d10:	str	w4, [x19, #5932]
    3d14:	add	w2, w2, w5
    3d18:	cmp	w2, #0x2
    3d1c:	b.ls	3904 <crc32_combine64@@ZLIB_1.2.3.3+0x2c4>  // b.plast
    3d20:	add	w4, w0, #0x2
    3d24:	cmp	w0, w5
    3d28:	lsl	w1, w1, w10
    3d2c:	b.ne	3cd8 <crc32_combine64@@ZLIB_1.2.3.3+0x698>  // b.any
    3d30:	b	3904 <crc32_combine64@@ZLIB_1.2.3.3+0x2c4>
    3d34:	ldr	x0, [x24, #96]
    3d38:	mov	x1, x3
    3d3c:	mov	w2, w22
    3d40:	bl	2560 <adler32@plt>
    3d44:	str	x0, [x24, #96]
    3d48:	b	38d0 <crc32_combine64@@ZLIB_1.2.3.3+0x290>
    3d4c:	ldr	x0, [x24, #96]
    3d50:	mov	x1, x3
    3d54:	mov	w2, w22
    3d58:	bl	2430 <crc32@plt>
    3d5c:	str	x0, [x24, #96]
    3d60:	b	38d0 <crc32_combine64@@ZLIB_1.2.3.3+0x290>
    3d64:	mov	w4, w0
    3d68:	b	3b6c <crc32_combine64@@ZLIB_1.2.3.3+0x52c>
    3d6c:	mov	w3, w6
    3d70:	b	3a0c <crc32_combine64@@ZLIB_1.2.3.3+0x3cc>
    3d74:	sub	x20, x1, x21
    3d78:	mov	x2, #0x102                 	// #258
    3d7c:	cmp	x20, x2
    3d80:	mov	w1, #0x0                   	// #0
    3d84:	ldr	x0, [x19, #96]
    3d88:	csel	x20, x20, x2, ls  // ls = plast
    3d8c:	mov	x2, x20
    3d90:	add	x20, x20, x21
    3d94:	add	x0, x0, x21
    3d98:	bl	24a0 <memset@plt>
    3d9c:	str	x20, [x19, #5944]
    3da0:	ldp	x19, x20, [sp, #16]
    3da4:	ldp	x21, x22, [sp, #32]
    3da8:	ldp	x23, x24, [sp, #48]
    3dac:	ldr	x25, [sp, #64]
    3db0:	ldr	d8, [sp, #72]
    3db4:	ldp	x29, x30, [sp], #80
    3db8:	ret
    3dbc:	sub	x2, x21, x0
    3dc0:	sub	x20, x1, x0
    3dc4:	add	x2, x2, #0x102
    3dc8:	mov	w1, #0x0                   	// #0
    3dcc:	ldr	x3, [x19, #96]
    3dd0:	cmp	x20, x2
    3dd4:	csel	x20, x20, x2, ls  // ls = plast
    3dd8:	mov	w2, w20
    3ddc:	add	x0, x3, x0
    3de0:	bl	24a0 <memset@plt>
    3de4:	ldr	x0, [x19, #5944]
    3de8:	ldp	x21, x22, [sp, #32]
    3dec:	add	x20, x0, x20
    3df0:	str	x20, [x19, #5944]
    3df4:	ldp	x19, x20, [sp, #16]
    3df8:	ldp	x23, x24, [sp, #48]
    3dfc:	ldr	x25, [sp, #64]
    3e00:	ldr	d8, [sp, #72]
    3e04:	ldp	x29, x30, [sp], #80
    3e08:	ret
    3e0c:	nop
    3e10:	stp	x29, x30, [sp, #-112]!
    3e14:	mov	x29, sp
    3e18:	stp	x19, x20, [sp, #16]
    3e1c:	mov	x19, x0
    3e20:	ldr	w0, [x0, #80]
    3e24:	stp	x23, x24, [sp, #48]
    3e28:	mov	w23, w1
    3e2c:	ldr	x24, [x19, #24]
    3e30:	stp	x21, x22, [sp, #32]
    3e34:	ldr	x21, [x19]
    3e38:	sub	x24, x24, #0x5
    3e3c:	cmp	x24, x0
    3e40:	stp	x25, x26, [sp, #64]
    3e44:	csel	x24, x24, x0, ls  // ls = plast
    3e48:	ldr	w2, [x21, #8]
    3e4c:	mov	x26, #0xfffe                	// #65534
    3e50:	stp	x27, x28, [sp, #80]
    3e54:	str	w2, [sp, #108]
    3e58:	ldr	w0, [x19, #5940]
    3e5c:	ldr	w20, [x21, #32]
    3e60:	add	w0, w0, #0x2a
    3e64:	asr	w1, w0, #3
    3e68:	cmp	w20, w0, asr #3
    3e6c:	b.cc	4230 <crc32_combine64@@ZLIB_1.2.3.3+0xbf0>  // b.lo, b.ul, b.last
    3e70:	ldr	x4, [x19, #152]
    3e74:	sub	w20, w20, w1
    3e78:	ldr	w22, [x19, #172]
    3e7c:	sub	w0, w22, w4
    3e80:	sub	w22, w22, w4
    3e84:	add	x0, x0, w2, uxtw
    3e88:	add	w1, w22, w2
    3e8c:	cmp	x0, x26
    3e90:	mov	w0, #0xffff                	// #65535
    3e94:	csel	w0, w1, w0, ls  // ls = plast
    3e98:	cmp	w0, w20
    3e9c:	csel	w20, w0, w20, ls  // ls = plast
    3ea0:	cmp	w20, w24
    3ea4:	b.cs	3ec0 <crc32_combine64@@ZLIB_1.2.3.3+0x880>  // b.hs, b.nlast
    3ea8:	cmp	w20, #0x0
    3eac:	ccmp	w23, #0x4, #0x4, eq  // eq = none
    3eb0:	ccmp	w23, #0x0, #0x4, eq  // eq = none
    3eb4:	b.eq	4230 <crc32_combine64@@ZLIB_1.2.3.3+0xbf0>  // b.none
    3eb8:	cmp	w20, w1
    3ebc:	b.ne	4230 <crc32_combine64@@ZLIB_1.2.3.3+0xbf0>  // b.any
    3ec0:	cmp	w23, #0x4
    3ec4:	mov	w27, #0x0                   	// #0
    3ec8:	b.ne	3ed8 <crc32_combine64@@ZLIB_1.2.3.3+0x898>  // b.any
    3ecc:	add	w2, w22, w2
    3ed0:	cmp	w2, w20
    3ed4:	cset	w27, eq  // eq = none
    3ed8:	mov	w3, w27
    3edc:	mov	x0, x19
    3ee0:	mov	x2, #0x0                   	// #0
    3ee4:	mov	x1, #0x0                   	// #0
    3ee8:	bl	eb00 <inflateCodesUsed@@ZLIB_1.2.9+0x20c8>
    3eec:	ldr	x4, [x19, #16]
    3ef0:	and	w1, w20, #0xff
    3ef4:	ldr	x6, [x19, #40]
    3ef8:	mvn	w5, w1
    3efc:	lsr	w2, w20, #8
    3f00:	mvn	w0, w20
    3f04:	add	x4, x4, x6
    3f08:	lsr	w0, w0, #8
    3f0c:	sturb	w1, [x4, #-4]
    3f10:	ldr	x1, [x19, #16]
    3f14:	ldr	x4, [x19, #40]
    3f18:	add	x1, x1, x4
    3f1c:	sturb	w2, [x1, #-3]
    3f20:	ldr	x1, [x19, #16]
    3f24:	ldr	x2, [x19, #40]
    3f28:	add	x1, x1, x2
    3f2c:	sturb	w5, [x1, #-2]
    3f30:	ldr	x1, [x19, #16]
    3f34:	ldr	x2, [x19, #40]
    3f38:	add	x1, x1, x2
    3f3c:	sturb	w0, [x1, #-1]
    3f40:	ldr	x21, [x19]
    3f44:	ldr	x25, [x21, #56]
    3f48:	mov	x0, x25
    3f4c:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    3f50:	ldr	x28, [x25, #40]
    3f54:	ldr	w0, [x21, #32]
    3f58:	cmp	w0, w28
    3f5c:	csel	w28, w0, w28, ls  // ls = plast
    3f60:	cbz	w28, 3fc4 <crc32_combine64@@ZLIB_1.2.3.3+0x984>
    3f64:	ldr	x0, [x21, #24]
    3f68:	mov	w2, w28
    3f6c:	ldr	x1, [x25, #32]
    3f70:	str	x2, [sp, #96]
    3f74:	bl	23a0 <memcpy@plt>
    3f78:	ldr	x1, [x21, #24]
    3f7c:	ldr	x2, [sp, #96]
    3f80:	ldr	x6, [x25, #32]
    3f84:	add	x1, x1, x2
    3f88:	ldr	x5, [x21, #40]
    3f8c:	str	x1, [x21, #24]
    3f90:	ldr	w0, [x21, #32]
    3f94:	add	x6, x6, x2
    3f98:	ldr	x1, [x25, #40]
    3f9c:	str	x6, [x25, #32]
    3fa0:	add	x5, x5, x2
    3fa4:	sub	w0, w0, w28
    3fa8:	str	w0, [x21, #32]
    3fac:	sub	x2, x1, x2
    3fb0:	str	x5, [x21, #40]
    3fb4:	str	x2, [x25, #40]
    3fb8:	cbnz	x2, 3fc4 <crc32_combine64@@ZLIB_1.2.3.3+0x984>
    3fbc:	ldr	x0, [x25, #16]
    3fc0:	str	x0, [x25, #32]
    3fc4:	ldr	x21, [x19]
    3fc8:	cbnz	w22, 41cc <crc32_combine64@@ZLIB_1.2.3.3+0xb8c>
    3fcc:	ldr	w2, [x21, #8]
    3fd0:	cbnz	w20, 4134 <crc32_combine64@@ZLIB_1.2.3.3+0xaf4>
    3fd4:	cbz	w27, 3e58 <crc32_combine64@@ZLIB_1.2.3.3+0x818>
    3fd8:	ldr	w0, [sp, #108]
    3fdc:	mov	w24, #0x1                   	// #1
    3fe0:	subs	w27, w0, w2
    3fe4:	b.eq	4240 <crc32_combine64@@ZLIB_1.2.3.3+0xc00>  // b.none
    3fe8:	ldr	w1, [x19, #80]
    3fec:	ldr	x0, [x19, #96]
    3ff0:	cmp	w1, w27
    3ff4:	b.ls	4454 <crc32_combine64@@ZLIB_1.2.3.3+0xe14>  // b.plast
    3ff8:	ldr	w3, [x19, #172]
    3ffc:	mov	w20, w27
    4000:	ldr	x2, [x19, #104]
    4004:	mov	w4, w3
    4008:	sub	x2, x2, x4
    400c:	cmp	x2, w27, uxtw
    4010:	b.ls	44c8 <crc32_combine64@@ZLIB_1.2.3.3+0xe88>  // b.plast
    4014:	ldr	x1, [x21]
    4018:	mov	x2, x20
    401c:	add	x0, x0, x4
    4020:	sub	x1, x1, x20
    4024:	bl	23a0 <memcpy@plt>
    4028:	ldr	w2, [x19, #172]
    402c:	ldr	w0, [x19, #80]
    4030:	add	w2, w27, w2
    4034:	str	w2, [x19, #172]
    4038:	ldr	w3, [x19, #5932]
    403c:	mov	w1, w2
    4040:	str	x1, [x19, #152]
    4044:	sub	w0, w0, w3
    4048:	cmp	w0, w27
    404c:	csel	w0, w0, w27, ls  // ls = plast
    4050:	add	w0, w0, w3
    4054:	str	w0, [x19, #5932]
    4058:	ldr	x0, [x19, #5944]
    405c:	mov	x3, x1
    4060:	cmp	x0, x1
    4064:	b.cc	4258 <crc32_combine64@@ZLIB_1.2.3.3+0xc18>  // b.lo, b.ul, b.last
    4068:	cbnz	w24, 4260 <crc32_combine64@@ZLIB_1.2.3.3+0xc20>
    406c:	ldr	x21, [x19]
    4070:	tst	w23, #0xfffffffb
    4074:	ldr	w0, [x21, #8]
    4078:	b.eq	4080 <crc32_combine64@@ZLIB_1.2.3.3+0xa40>  // b.none
    407c:	cbz	w0, 4354 <crc32_combine64@@ZLIB_1.2.3.3+0xd14>
    4080:	ldr	x20, [x19, #104]
    4084:	sub	w20, w20, #0x1
    4088:	sub	w20, w20, w2
    408c:	cmp	w20, w0
    4090:	b.cs	40a8 <crc32_combine64@@ZLIB_1.2.3.3+0xa68>  // b.hs, b.nlast
    4094:	ldr	x4, [x19, #152]
    4098:	ldr	w5, [x19, #80]
    409c:	mov	w1, w5
    40a0:	cmp	x4, w5, uxtw
    40a4:	b.ge	447c <crc32_combine64@@ZLIB_1.2.3.3+0xe3c>  // b.tcont
    40a8:	cmp	w20, w0
    40ac:	csel	w20, w20, w0, ls  // ls = plast
    40b0:	cbnz	w20, 4284 <crc32_combine64@@ZLIB_1.2.3.3+0xc44>
    40b4:	ldr	x4, [x19, #152]
    40b8:	ldr	x0, [x19, #5944]
    40bc:	cmp	x0, x3
    40c0:	b.cs	40c8 <crc32_combine64@@ZLIB_1.2.3.3+0xa88>  // b.hs, b.nlast
    40c4:	str	x3, [x19, #5944]
    40c8:	ldr	w1, [x19, #5940]
    40cc:	mov	x5, #0xffff                	// #65535
    40d0:	ldr	x0, [x19, #24]
    40d4:	add	w1, w1, #0x2a
    40d8:	ldr	w3, [x19, #80]
    40dc:	sub	w2, w2, w4
    40e0:	asr	w1, w1, #3
    40e4:	sub	x0, x0, x1
    40e8:	cmp	x0, x5
    40ec:	csel	x0, x0, x5, ls  // ls = plast
    40f0:	cmp	w3, w0
    40f4:	mov	w1, w0
    40f8:	csel	w3, w3, w0, ls  // ls = plast
    40fc:	cmp	w3, w2
    4100:	b.ls	42b8 <crc32_combine64@@ZLIB_1.2.3.3+0xc78>  // b.plast
    4104:	cmp	w2, #0x0
    4108:	ccmp	w23, #0x4, #0x4, eq  // eq = none
    410c:	ccmp	w23, #0x0, #0x4, eq  // eq = none
    4110:	b.ne	44f4 <crc32_combine64@@ZLIB_1.2.3.3+0xeb4>  // b.any
    4114:	mov	w0, w24
    4118:	ldp	x19, x20, [sp, #16]
    411c:	ldp	x21, x22, [sp, #32]
    4120:	ldp	x23, x24, [sp, #48]
    4124:	ldp	x25, x26, [sp, #64]
    4128:	ldp	x27, x28, [sp, #80]
    412c:	ldp	x29, x30, [sp], #112
    4130:	ret
    4134:	cmp	w20, w2
    4138:	csel	w22, w20, w2, ls  // ls = plast
    413c:	ldr	x4, [x21, #24]
    4140:	cbz	w22, 41a0 <crc32_combine64@@ZLIB_1.2.3.3+0xb60>
    4144:	ldr	x1, [x21]
    4148:	sub	w2, w2, w22
    414c:	str	w2, [x21, #8]
    4150:	mov	w28, w22
    4154:	mov	x0, x4
    4158:	mov	x2, x28
    415c:	bl	23a0 <memcpy@plt>
    4160:	mov	x4, x0
    4164:	ldr	x0, [x21, #56]
    4168:	ldr	w0, [x0, #48]
    416c:	cmp	w0, #0x1
    4170:	b.eq	42a0 <crc32_combine64@@ZLIB_1.2.3.3+0xc60>  // b.none
    4174:	cmp	w0, #0x2
    4178:	b.eq	433c <crc32_combine64@@ZLIB_1.2.3.3+0xcfc>  // b.none
    417c:	ldr	x0, [x21]
    4180:	ldr	x2, [x21, #16]
    4184:	add	x0, x0, x28
    4188:	str	x0, [x21]
    418c:	add	x2, x2, x28
    4190:	str	x2, [x21, #16]
    4194:	ldr	x21, [x19]
    4198:	ldr	w2, [x21, #8]
    419c:	ldr	x4, [x21, #24]
    41a0:	mov	w5, w20
    41a4:	ldr	x0, [x21, #40]
    41a8:	add	x4, x4, x5
    41ac:	ldr	w1, [x21, #32]
    41b0:	add	x0, x0, x5
    41b4:	str	x4, [x21, #24]
    41b8:	sub	w20, w1, w20
    41bc:	str	w20, [x21, #32]
    41c0:	str	x0, [x21, #40]
    41c4:	cbz	w27, 3e58 <crc32_combine64@@ZLIB_1.2.3.3+0x818>
    41c8:	b	3fd8 <crc32_combine64@@ZLIB_1.2.3.3+0x998>
    41cc:	ldr	x0, [x21, #24]
    41d0:	cmp	w20, w22
    41d4:	ldr	x4, [x19, #96]
    41d8:	csel	w2, w20, w22, ls  // ls = plast
    41dc:	ldr	x1, [x19, #152]
    41e0:	csel	w28, w20, w22, ls  // ls = plast
    41e4:	str	x2, [sp, #96]
    41e8:	sub	w20, w20, w28
    41ec:	add	x1, x4, x1
    41f0:	bl	23a0 <memcpy@plt>
    41f4:	ldr	x21, [x19]
    41f8:	ldr	x2, [sp, #96]
    41fc:	ldr	x5, [x21, #24]
    4200:	ldr	x0, [x21, #40]
    4204:	add	x6, x5, x2
    4208:	ldr	x4, [x19, #152]
    420c:	str	x6, [x21, #24]
    4210:	ldr	w5, [x21, #32]
    4214:	add	x22, x4, x2
    4218:	add	x2, x0, x2
    421c:	sub	w28, w5, w28
    4220:	str	w28, [x21, #32]
    4224:	str	x2, [x21, #40]
    4228:	str	x22, [x19, #152]
    422c:	b	3fcc <crc32_combine64@@ZLIB_1.2.3.3+0x98c>
    4230:	ldr	w0, [sp, #108]
    4234:	mov	w24, #0x0                   	// #0
    4238:	subs	w27, w0, w2
    423c:	b.ne	3fe8 <crc32_combine64@@ZLIB_1.2.3.3+0x9a8>  // b.any
    4240:	ldr	w2, [x19, #172]
    4244:	ldr	x0, [x19, #5944]
    4248:	mov	w1, w2
    424c:	mov	x3, x1
    4250:	cmp	x0, x1
    4254:	b.cs	4068 <crc32_combine64@@ZLIB_1.2.3.3+0xa28>  // b.hs, b.nlast
    4258:	str	x1, [x19, #5944]
    425c:	cbz	w24, 406c <crc32_combine64@@ZLIB_1.2.3.3+0xa2c>
    4260:	mov	w24, #0x3                   	// #3
    4264:	mov	w0, w24
    4268:	ldp	x19, x20, [sp, #16]
    426c:	ldp	x21, x22, [sp, #32]
    4270:	ldp	x23, x24, [sp, #48]
    4274:	ldp	x25, x26, [sp, #64]
    4278:	ldp	x27, x28, [sp, #80]
    427c:	ldp	x29, x30, [sp], #112
    4280:	ret
    4284:	cmp	w20, w0
    4288:	csel	w22, w20, w0, ls  // ls = plast
    428c:	cbnz	w22, 43e8 <crc32_combine64@@ZLIB_1.2.3.3+0xda8>
    4290:	add	w3, w2, w20
    4294:	str	w3, [x19, #172]
    4298:	mov	x2, x3
    429c:	b	40b4 <crc32_combine64@@ZLIB_1.2.3.3+0xa74>
    42a0:	ldr	x0, [x21, #96]
    42a4:	mov	w2, w22
    42a8:	mov	x1, x4
    42ac:	bl	2560 <adler32@plt>
    42b0:	str	x0, [x21, #96]
    42b4:	b	417c <crc32_combine64@@ZLIB_1.2.3.3+0xb3c>
    42b8:	cmp	w0, w2
    42bc:	csel	w0, w0, w2, ls  // ls = plast
    42c0:	cmp	w23, #0x4
    42c4:	b.eq	43cc <crc32_combine64@@ZLIB_1.2.3.3+0xd8c>  // b.none
    42c8:	mov	w24, #0x0                   	// #0
    42cc:	ldr	x1, [x19, #96]
    42d0:	mov	w20, w0
    42d4:	mov	x2, x20
    42d8:	mov	x0, x19
    42dc:	mov	w3, w24
    42e0:	add	x1, x1, x4
    42e4:	bl	eb00 <inflateCodesUsed@@ZLIB_1.2.9+0x20c8>
    42e8:	ldr	x21, [x19]
    42ec:	ldr	x0, [x19, #152]
    42f0:	ldr	x22, [x21, #56]
    42f4:	add	x0, x0, x20
    42f8:	str	x0, [x19, #152]
    42fc:	mov	x0, x22
    4300:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    4304:	ldr	x19, [x22, #40]
    4308:	ldr	w0, [x21, #32]
    430c:	cmp	w0, w19
    4310:	csel	w19, w0, w19, ls  // ls = plast
    4314:	cbnz	w19, 4368 <crc32_combine64@@ZLIB_1.2.3.3+0xd28>
    4318:	lsl	w24, w24, #1
    431c:	mov	w0, w24
    4320:	ldp	x19, x20, [sp, #16]
    4324:	ldp	x21, x22, [sp, #32]
    4328:	ldp	x23, x24, [sp, #48]
    432c:	ldp	x25, x26, [sp, #64]
    4330:	ldp	x27, x28, [sp, #80]
    4334:	ldp	x29, x30, [sp], #112
    4338:	ret
    433c:	ldr	x0, [x21, #96]
    4340:	mov	w2, w22
    4344:	mov	x1, x4
    4348:	bl	2430 <crc32@plt>
    434c:	str	x0, [x21, #96]
    4350:	b	417c <crc32_combine64@@ZLIB_1.2.3.3+0xb3c>
    4354:	ldr	x4, [x19, #152]
    4358:	cmp	x1, x4
    435c:	b.ne	40b8 <crc32_combine64@@ZLIB_1.2.3.3+0xa78>  // b.any
    4360:	mov	w24, #0x1                   	// #1
    4364:	b	4114 <crc32_combine64@@ZLIB_1.2.3.3+0xad4>
    4368:	ldr	x0, [x21, #24]
    436c:	mov	w20, w19
    4370:	ldr	x1, [x22, #32]
    4374:	mov	x2, x20
    4378:	bl	23a0 <memcpy@plt>
    437c:	ldr	x1, [x21, #24]
    4380:	ldr	w0, [x21, #32]
    4384:	ldr	x2, [x22, #32]
    4388:	sub	w19, w0, w19
    438c:	add	x0, x1, x20
    4390:	str	x0, [x21, #24]
    4394:	ldr	x1, [x21, #40]
    4398:	add	x2, x2, x20
    439c:	ldr	x0, [x22, #40]
    43a0:	str	x2, [x22, #32]
    43a4:	add	x1, x1, x20
    43a8:	str	w19, [x21, #32]
    43ac:	str	x1, [x21, #40]
    43b0:	sub	x20, x0, x20
    43b4:	str	x20, [x22, #40]
    43b8:	cbnz	x20, 4318 <crc32_combine64@@ZLIB_1.2.3.3+0xcd8>
    43bc:	ldr	x0, [x22, #16]
    43c0:	lsl	w24, w24, #1
    43c4:	str	x0, [x22, #32]
    43c8:	b	431c <crc32_combine64@@ZLIB_1.2.3.3+0xcdc>
    43cc:	ldr	x3, [x19]
    43d0:	ldr	w3, [x3, #8]
    43d4:	cmp	w3, #0x0
    43d8:	ccmp	w1, w2, #0x0, eq  // eq = none
    43dc:	b.cc	42c8 <crc32_combine64@@ZLIB_1.2.3.3+0xc88>  // b.lo, b.ul, b.last
    43e0:	mov	w24, #0x1                   	// #1
    43e4:	b	42cc <crc32_combine64@@ZLIB_1.2.3.3+0xc8c>
    43e8:	ldr	x2, [x19, #96]
    43ec:	sub	w0, w0, w22
    43f0:	ldr	x1, [x21]
    43f4:	add	x3, x2, x3
    43f8:	str	w0, [x21, #8]
    43fc:	mov	w25, w22
    4400:	mov	x0, x3
    4404:	mov	x2, x25
    4408:	bl	23a0 <memcpy@plt>
    440c:	mov	x3, x0
    4410:	ldr	x0, [x21, #56]
    4414:	ldr	w0, [x0, #48]
    4418:	cmp	w0, #0x1
    441c:	b.eq	4534 <crc32_combine64@@ZLIB_1.2.3.3+0xef4>  // b.none
    4420:	cmp	w0, #0x2
    4424:	b.eq	454c <crc32_combine64@@ZLIB_1.2.3.3+0xf0c>  // b.none
    4428:	ldr	x1, [x21]
    442c:	ldr	x0, [x21, #16]
    4430:	add	x1, x1, x25
    4434:	ldr	w2, [x19, #172]
    4438:	add	x0, x0, x25
    443c:	str	x1, [x21]
    4440:	add	w3, w2, w20
    4444:	str	x0, [x21, #16]
    4448:	mov	x2, x3
    444c:	str	w3, [x19, #172]
    4450:	b	40b4 <crc32_combine64@@ZLIB_1.2.3.3+0xa74>
    4454:	ldr	x3, [x21]
    4458:	mov	w2, #0x2                   	// #2
    445c:	str	w2, [x19, #5928]
    4460:	mov	w2, w1
    4464:	sub	x1, x3, x2
    4468:	bl	23a0 <memcpy@plt>
    446c:	ldr	w2, [x19, #80]
    4470:	str	w2, [x19, #172]
    4474:	mov	w0, w2
    4478:	b	4038 <crc32_combine64@@ZLIB_1.2.3.3+0x9f8>
    447c:	ldr	x0, [x19, #96]
    4480:	sub	x4, x4, x1
    4484:	sub	w2, w2, w5
    4488:	str	x4, [x19, #152]
    448c:	str	w2, [x19, #172]
    4490:	add	x1, x0, x1
    4494:	bl	23a0 <memcpy@plt>
    4498:	ldr	w0, [x19, #5928]
    449c:	cmp	w0, #0x1
    44a0:	b.hi	44ac <crc32_combine64@@ZLIB_1.2.3.3+0xe6c>  // b.pmore
    44a4:	add	w0, w0, #0x1
    44a8:	str	w0, [x19, #5928]
    44ac:	ldr	x21, [x19]
    44b0:	ldr	w1, [x19, #80]
    44b4:	ldr	w2, [x19, #172]
    44b8:	ldr	w0, [x21, #8]
    44bc:	add	w20, w20, w1
    44c0:	mov	w3, w2
    44c4:	b	40a8 <crc32_combine64@@ZLIB_1.2.3.3+0xa68>
    44c8:	sub	w2, w3, w1
    44cc:	str	w2, [x19, #172]
    44d0:	add	x1, x0, w1, uxtw
    44d4:	bl	23a0 <memcpy@plt>
    44d8:	ldr	w0, [x19, #5928]
    44dc:	ldr	w4, [x19, #172]
    44e0:	cmp	w0, #0x1
    44e4:	b.ls	4520 <crc32_combine64@@ZLIB_1.2.3.3+0xee0>  // b.plast
    44e8:	ldr	x21, [x19]
    44ec:	ldr	x0, [x19, #96]
    44f0:	b	4014 <crc32_combine64@@ZLIB_1.2.3.3+0x9d4>
    44f4:	ldr	x0, [x19]
    44f8:	ldr	w0, [x0, #8]
    44fc:	cmp	w0, #0x0
    4500:	ccmp	w1, w2, #0x0, eq  // eq = none
    4504:	b.cc	4114 <crc32_combine64@@ZLIB_1.2.3.3+0xad4>  // b.lo, b.ul, b.last
    4508:	cmp	w1, w2
    450c:	mov	w24, #0x1                   	// #1
    4510:	csel	w0, w1, w2, ls  // ls = plast
    4514:	cmp	w23, #0x4
    4518:	b.ne	42c8 <crc32_combine64@@ZLIB_1.2.3.3+0xc88>  // b.any
    451c:	b	42cc <crc32_combine64@@ZLIB_1.2.3.3+0xc8c>
    4520:	add	w0, w0, #0x1
    4524:	str	w0, [x19, #5928]
    4528:	ldr	x21, [x19]
    452c:	ldr	x0, [x19, #96]
    4530:	b	4014 <crc32_combine64@@ZLIB_1.2.3.3+0x9d4>
    4534:	ldr	x0, [x21, #96]
    4538:	mov	w2, w22
    453c:	mov	x1, x3
    4540:	bl	2560 <adler32@plt>
    4544:	str	x0, [x21, #96]
    4548:	b	4428 <crc32_combine64@@ZLIB_1.2.3.3+0xde8>
    454c:	ldr	x0, [x21, #96]
    4550:	mov	w2, w22
    4554:	mov	x1, x3
    4558:	bl	2430 <crc32@plt>
    455c:	str	x0, [x21, #96]
    4560:	b	4428 <crc32_combine64@@ZLIB_1.2.3.3+0xde8>
    4564:	nop
    4568:	stp	x29, x30, [sp, #-80]!
    456c:	mov	x29, sp
    4570:	stp	x19, x20, [sp, #16]
    4574:	adrp	x20, 15000 <gzclose_w@@ZLIB_1.2.3.5+0x2c38>
    4578:	mov	x19, x0
    457c:	add	x20, x20, #0xaa0
    4580:	stp	x21, x22, [sp, #32]
    4584:	adrp	x21, 15000 <gzclose_w@@ZLIB_1.2.3.5+0x2c38>
    4588:	mov	w22, w1
    458c:	add	x21, x21, #0xca0
    4590:	stp	x23, x24, [sp, #48]
    4594:	stp	x25, x26, [sp, #64]
    4598:	ldr	w1, [x19, #180]
    459c:	nop
    45a0:	cmp	w1, #0x105
    45a4:	b.ls	47cc <crc32_combine64@@ZLIB_1.2.3.3+0x118c>  // b.plast
    45a8:	ldr	w3, [x19, #172]
    45ac:	ldr	x0, [x19, #96]
    45b0:	add	w2, w3, #0x2
    45b4:	ldr	w1, [x19, #128]
    45b8:	ldr	w4, [x19, #144]
    45bc:	ldrb	w0, [x0, w2, uxtw]
    45c0:	ldr	w2, [x19, #140]
    45c4:	lsl	w1, w1, w4
    45c8:	eor	w0, w0, w1
    45cc:	ldp	x6, x5, [x19, #112]
    45d0:	and	w0, w0, w2
    45d4:	ldr	w2, [x19, #88]
    45d8:	ubfiz	x4, x0, #1, #32
    45dc:	and	w2, w3, w2
    45e0:	ldrh	w1, [x5, x4]
    45e4:	str	w0, [x19, #128]
    45e8:	strh	w1, [x6, x2, lsl #1]
    45ec:	strh	w3, [x5, x4]
    45f0:	cbz	w1, 4608 <crc32_combine64@@ZLIB_1.2.3.3+0xfc8>
    45f4:	ldr	w0, [x19, #80]
    45f8:	sub	w2, w3, w1
    45fc:	sub	w0, w0, #0x106
    4600:	cmp	w2, w0
    4604:	b.ls	47f8 <crc32_combine64@@ZLIB_1.2.3.3+0x11b8>  // b.plast
    4608:	ldr	w2, [x19, #5900]
    460c:	ldr	w0, [x19, #160]
    4610:	add	w5, w2, #0x1
    4614:	cmp	w0, #0x2
    4618:	ubfiz	x6, x2, #1, #32
    461c:	ldr	x4, [x19, #5888]
    4620:	ldr	x7, [x19, #5904]
    4624:	b.ls	4828 <crc32_combine64@@ZLIB_1.2.3.3+0x11e8>  // b.plast
    4628:	sub	w1, w0, #0x3
    462c:	ldr	w0, [x19, #176]
    4630:	and	w1, w1, #0xff
    4634:	sub	w0, w3, w0
    4638:	and	w0, w0, #0xffff
    463c:	strh	w0, [x7, x6]
    4640:	ldrb	w3, [x20, w1, sxtw]
    4644:	sub	w0, w0, #0x1
    4648:	str	w5, [x19, #5900]
    464c:	and	w0, w0, #0xffff
    4650:	strb	w1, [x4, w2, uxtw]
    4654:	cmp	w0, #0xff
    4658:	add	x1, x19, x3, lsl #2
    465c:	ldrh	w2, [x1, #1240]
    4660:	add	w2, w2, #0x1
    4664:	strh	w2, [x1, #1240]
    4668:	b.ls	4674 <crc32_combine64@@ZLIB_1.2.3.3+0x1034>  // b.plast
    466c:	lsr	w0, w0, #7
    4670:	add	w0, w0, #0x100
    4674:	ldrb	w0, [x21, w0, sxtw]
    4678:	add	x0, x19, w0, sxtw #2
    467c:	ldrh	w1, [x0, #2504]
    4680:	add	w1, w1, #0x1
    4684:	strh	w1, [x0, #2504]
    4688:	ldr	w0, [x19, #5896]
    468c:	ldr	w2, [x19, #160]
    4690:	ldr	w1, [x19, #180]
    4694:	sub	w0, w0, #0x1
    4698:	ldr	w4, [x19, #5900]
    469c:	ldr	w3, [x19, #192]
    46a0:	sub	w1, w1, w2
    46a4:	cmp	w0, w4
    46a8:	ldr	w0, [x19, #172]
    46ac:	str	w1, [x19, #180]
    46b0:	cset	w6, eq  // eq = none
    46b4:	cmp	w2, w3
    46b8:	add	w3, w2, w0
    46bc:	ldp	w8, w9, [x19, #140]
    46c0:	ccmp	w1, #0x2, #0x0, ls  // ls = plast
    46c4:	ldr	x7, [x19, #96]
    46c8:	b.hi	4880 <crc32_combine64@@ZLIB_1.2.3.3+0x1240>  // b.pmore
    46cc:	str	wzr, [x19, #160]
    46d0:	add	w4, w3, #0x1
    46d4:	str	w3, [x19, #172]
    46d8:	ldrb	w2, [x7, w3, uxtw]
    46dc:	str	w2, [x19, #128]
    46e0:	ldrb	w0, [x7, w4, uxtw]
    46e4:	lsl	w2, w2, w9
    46e8:	eor	w0, w0, w2
    46ec:	and	w0, w0, w8
    46f0:	str	w0, [x19, #128]
    46f4:	cbz	w6, 45a0 <crc32_combine64@@ZLIB_1.2.3.3+0xf60>
    46f8:	ldr	x2, [x19, #152]
    46fc:	mov	x1, #0x0                   	// #0
    4700:	tbnz	x2, #63, 470c <crc32_combine64@@ZLIB_1.2.3.3+0x10cc>
    4704:	ldr	x1, [x19, #96]
    4708:	add	x1, x1, w2, uxtw
    470c:	sub	x2, x3, x2
    4710:	mov	x0, x19
    4714:	mov	w3, #0x0                   	// #0
    4718:	bl	ee88 <inflateCodesUsed@@ZLIB_1.2.9+0x2450>
    471c:	ldr	x23, [x19]
    4720:	ldr	w0, [x19, #172]
    4724:	ldr	x25, [x23, #56]
    4728:	str	x0, [x19, #152]
    472c:	mov	x0, x25
    4730:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    4734:	ldr	x24, [x25, #40]
    4738:	ldr	w0, [x23, #32]
    473c:	cmp	w0, w24
    4740:	csel	w24, w0, w24, ls  // ls = plast
    4744:	cbz	w24, 47a4 <crc32_combine64@@ZLIB_1.2.3.3+0x1164>
    4748:	ldr	x0, [x23, #24]
    474c:	mov	w26, w24
    4750:	ldr	x1, [x25, #32]
    4754:	mov	x2, x26
    4758:	bl	23a0 <memcpy@plt>
    475c:	ldr	x1, [x23, #24]
    4760:	ldr	w0, [x23, #32]
    4764:	ldr	x2, [x25, #32]
    4768:	sub	w24, w0, w24
    476c:	add	x0, x1, x26
    4770:	str	x0, [x23, #24]
    4774:	ldr	x1, [x23, #40]
    4778:	add	x2, x2, x26
    477c:	ldr	x0, [x25, #40]
    4780:	str	x2, [x25, #32]
    4784:	add	x1, x1, x26
    4788:	str	w24, [x23, #32]
    478c:	str	x1, [x23, #40]
    4790:	sub	x26, x0, x26
    4794:	str	x26, [x25, #40]
    4798:	cbnz	x26, 47a4 <crc32_combine64@@ZLIB_1.2.3.3+0x1164>
    479c:	ldr	x0, [x25, #16]
    47a0:	str	x0, [x25, #32]
    47a4:	ldr	x0, [x19]
    47a8:	ldr	w0, [x0, #32]
    47ac:	cbnz	w0, 4598 <crc32_combine64@@ZLIB_1.2.3.3+0xf58>
    47b0:	mov	w0, #0x0                   	// #0
    47b4:	ldp	x19, x20, [sp, #16]
    47b8:	ldp	x21, x22, [sp, #32]
    47bc:	ldp	x23, x24, [sp, #48]
    47c0:	ldp	x25, x26, [sp, #64]
    47c4:	ldp	x29, x30, [sp], #80
    47c8:	ret
    47cc:	mov	x0, x19
    47d0:	bl	3830 <crc32_combine64@@ZLIB_1.2.3.3+0x1f0>
    47d4:	ldr	w0, [x19, #180]
    47d8:	cmp	w0, #0x105
    47dc:	b.hi	45a8 <crc32_combine64@@ZLIB_1.2.3.3+0xf68>  // b.pmore
    47e0:	cbz	w22, 47b0 <crc32_combine64@@ZLIB_1.2.3.3+0x1170>
    47e4:	cbz	w0, 48ec <crc32_combine64@@ZLIB_1.2.3.3+0x12ac>
    47e8:	ldr	w3, [x19, #172]
    47ec:	cmp	w0, #0x2
    47f0:	b.ls	4608 <crc32_combine64@@ZLIB_1.2.3.3+0xfc8>  // b.plast
    47f4:	b	45ac <crc32_combine64@@ZLIB_1.2.3.3+0xf6c>
    47f8:	mov	x0, x19
    47fc:	bl	3648 <crc32_combine64@@ZLIB_1.2.3.3+0x8>
    4800:	ldr	w2, [x19, #5900]
    4804:	cmp	w0, #0x2
    4808:	str	w0, [x19, #160]
    480c:	ldr	w3, [x19, #172]
    4810:	add	w5, w2, #0x1
    4814:	ubfiz	x6, x2, #1, #32
    4818:	ldr	x4, [x19, #5888]
    481c:	ldr	x7, [x19, #5904]
    4820:	b.hi	4628 <crc32_combine64@@ZLIB_1.2.3.3+0xfe8>  // b.pmore
    4824:	nop
    4828:	ldr	x0, [x19, #96]
    482c:	ldrb	w0, [x0, w3, uxtw]
    4830:	strh	wzr, [x7, x6]
    4834:	str	w5, [x19, #5900]
    4838:	add	x1, x19, w0, uxtb #2
    483c:	strb	w0, [x4, w2, uxtw]
    4840:	ldrh	w0, [x1, #212]
    4844:	add	w0, w0, #0x1
    4848:	strh	w0, [x1, #212]
    484c:	ldr	w0, [x19, #5896]
    4850:	ldr	w1, [x19, #5900]
    4854:	sub	w0, w0, #0x1
    4858:	ldr	w3, [x19, #172]
    485c:	cmp	w0, w1
    4860:	ldr	w1, [x19, #180]
    4864:	add	w3, w3, #0x1
    4868:	str	w3, [x19, #172]
    486c:	sub	w1, w1, #0x1
    4870:	str	w1, [x19, #180]
    4874:	cset	w6, eq  // eq = none
    4878:	cbz	w6, 45a0 <crc32_combine64@@ZLIB_1.2.3.3+0xf60>
    487c:	b	46f8 <crc32_combine64@@ZLIB_1.2.3.3+0x10b8>
    4880:	ldp	x13, x10, [x19, #112]
    4884:	sub	w2, w2, #0x1
    4888:	ldr	w14, [x19, #88]
    488c:	add	w0, w0, #0x1
    4890:	str	w2, [x19, #160]
    4894:	ldr	w2, [x19, #128]
    4898:	add	w5, w0, #0x2
    489c:	str	w0, [x19, #172]
    48a0:	lsl	w2, w2, w9
    48a4:	and	w11, w14, w0
    48a8:	mvn	w4, w0
    48ac:	ldrb	w5, [x7, w5, uxtw]
    48b0:	add	w4, w4, w3
    48b4:	eor	w2, w5, w2
    48b8:	and	w2, w2, w8
    48bc:	ubfiz	x5, x2, #1, #32
    48c0:	ldrh	w12, [x10, x5]
    48c4:	str	w2, [x19, #128]
    48c8:	strh	w12, [x13, x11, lsl #1]
    48cc:	strh	w0, [x10, x5]
    48d0:	add	w0, w0, #0x1
    48d4:	str	w4, [x19, #160]
    48d8:	cmp	w3, w0
    48dc:	b.ne	4898 <crc32_combine64@@ZLIB_1.2.3.3+0x1258>  // b.any
    48e0:	str	w3, [x19, #172]
    48e4:	cbz	w6, 45a0 <crc32_combine64@@ZLIB_1.2.3.3+0xf60>
    48e8:	b	46f8 <crc32_combine64@@ZLIB_1.2.3.3+0x10b8>
    48ec:	ldr	w3, [x19, #172]
    48f0:	mov	w0, #0x2                   	// #2
    48f4:	cmp	w3, w0
    48f8:	csel	w0, w3, w0, ls  // ls = plast
    48fc:	str	w0, [x19, #5932]
    4900:	cmp	w22, #0x4
    4904:	b.eq	4990 <crc32_combine64@@ZLIB_1.2.3.3+0x1350>  // b.none
    4908:	ldr	w1, [x19, #5900]
    490c:	mov	w0, #0x1                   	// #1
    4910:	cbz	w1, 49f8 <crc32_combine64@@ZLIB_1.2.3.3+0x13b8>
    4914:	ldr	x2, [x19, #152]
    4918:	mov	x1, #0x0                   	// #0
    491c:	tbnz	x2, #63, 4928 <crc32_combine64@@ZLIB_1.2.3.3+0x12e8>
    4920:	ldr	x1, [x19, #96]
    4924:	add	x1, x1, w2, uxtw
    4928:	mov	w3, w3
    492c:	mov	x0, x19
    4930:	sub	x2, x3, x2
    4934:	mov	w3, #0x0                   	// #0
    4938:	bl	ee88 <inflateCodesUsed@@ZLIB_1.2.9+0x2450>
    493c:	ldr	x22, [x19]
    4940:	ldr	w0, [x19, #172]
    4944:	ldr	x21, [x22, #56]
    4948:	str	x0, [x19, #152]
    494c:	mov	x0, x21
    4950:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    4954:	ldr	x20, [x21, #40]
    4958:	ldr	w0, [x22, #32]
    495c:	cmp	w0, w20
    4960:	csel	w20, w0, w20, ls  // ls = plast
    4964:	cbnz	w20, 4a70 <crc32_combine64@@ZLIB_1.2.3.3+0x1430>
    4968:	ldr	x0, [x19]
    496c:	ldp	x19, x20, [sp, #16]
    4970:	ldr	w0, [x0, #32]
    4974:	ldp	x21, x22, [sp, #32]
    4978:	cmp	w0, #0x0
    497c:	cset	w0, ne  // ne = any
    4980:	ldp	x23, x24, [sp, #48]
    4984:	ldp	x25, x26, [sp, #64]
    4988:	ldp	x29, x30, [sp], #80
    498c:	ret
    4990:	ldr	x2, [x19, #152]
    4994:	mov	x1, #0x0                   	// #0
    4998:	tbnz	x2, #63, 49a4 <crc32_combine64@@ZLIB_1.2.3.3+0x1364>
    499c:	ldr	x1, [x19, #96]
    49a0:	add	x1, x1, w2, uxtw
    49a4:	mov	w3, w3
    49a8:	mov	x0, x19
    49ac:	sub	x2, x3, x2
    49b0:	mov	w3, #0x1                   	// #1
    49b4:	bl	ee88 <inflateCodesUsed@@ZLIB_1.2.9+0x2450>
    49b8:	ldr	x20, [x19]
    49bc:	ldr	w0, [x19, #172]
    49c0:	ldr	x21, [x20, #56]
    49c4:	str	x0, [x19, #152]
    49c8:	mov	x0, x21
    49cc:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    49d0:	ldr	x0, [x21, #40]
    49d4:	ldr	w22, [x20, #32]
    49d8:	cmp	w22, w0
    49dc:	csel	w22, w22, w0, ls  // ls = plast
    49e0:	cbnz	w22, 4a10 <crc32_combine64@@ZLIB_1.2.3.3+0x13d0>
    49e4:	ldr	x0, [x19]
    49e8:	ldr	w0, [x0, #32]
    49ec:	cmp	w0, #0x0
    49f0:	cset	w0, ne  // ne = any
    49f4:	add	w0, w0, #0x2
    49f8:	ldp	x19, x20, [sp, #16]
    49fc:	ldp	x21, x22, [sp, #32]
    4a00:	ldp	x23, x24, [sp, #48]
    4a04:	ldp	x25, x26, [sp, #64]
    4a08:	ldp	x29, x30, [sp], #80
    4a0c:	ret
    4a10:	ldr	x0, [x20, #24]
    4a14:	mov	w23, w22
    4a18:	ldr	x1, [x21, #32]
    4a1c:	mov	x2, x23
    4a20:	bl	23a0 <memcpy@plt>
    4a24:	ldr	x1, [x20, #24]
    4a28:	ldr	w0, [x20, #32]
    4a2c:	ldr	x2, [x21, #32]
    4a30:	sub	w22, w0, w22
    4a34:	add	x0, x1, x23
    4a38:	str	x0, [x20, #24]
    4a3c:	ldr	x1, [x20, #40]
    4a40:	add	x2, x2, x23
    4a44:	ldr	x0, [x21, #40]
    4a48:	str	x2, [x21, #32]
    4a4c:	add	x1, x1, x23
    4a50:	str	w22, [x20, #32]
    4a54:	str	x1, [x20, #40]
    4a58:	sub	x23, x0, x23
    4a5c:	str	x23, [x21, #40]
    4a60:	cbnz	x23, 49e4 <crc32_combine64@@ZLIB_1.2.3.3+0x13a4>
    4a64:	ldr	x0, [x21, #16]
    4a68:	str	x0, [x21, #32]
    4a6c:	b	49e4 <crc32_combine64@@ZLIB_1.2.3.3+0x13a4>
    4a70:	ldr	x0, [x22, #24]
    4a74:	mov	w23, w20
    4a78:	ldr	x1, [x21, #32]
    4a7c:	mov	x2, x23
    4a80:	bl	23a0 <memcpy@plt>
    4a84:	ldr	x1, [x22, #24]
    4a88:	ldr	w0, [x22, #32]
    4a8c:	ldr	x2, [x21, #32]
    4a90:	sub	w20, w0, w20
    4a94:	add	x0, x1, x23
    4a98:	str	x0, [x22, #24]
    4a9c:	ldr	x1, [x22, #40]
    4aa0:	add	x2, x2, x23
    4aa4:	ldr	x0, [x21, #40]
    4aa8:	str	x2, [x21, #32]
    4aac:	add	x1, x1, x23
    4ab0:	str	w20, [x22, #32]
    4ab4:	str	x1, [x22, #40]
    4ab8:	sub	x23, x0, x23
    4abc:	str	x23, [x21, #40]
    4ac0:	cbnz	x23, 4968 <crc32_combine64@@ZLIB_1.2.3.3+0x1328>
    4ac4:	ldr	x0, [x21, #16]
    4ac8:	str	x0, [x21, #32]
    4acc:	b	4968 <crc32_combine64@@ZLIB_1.2.3.3+0x1328>
    4ad0:	stp	x29, x30, [sp, #-96]!
    4ad4:	mov	x29, sp
    4ad8:	stp	x19, x20, [sp, #16]
    4adc:	mov	x19, x0
    4ae0:	mov	w20, #0x1                   	// #1
    4ae4:	stp	x21, x22, [sp, #32]
    4ae8:	adrp	x22, 15000 <gzclose_w@@ZLIB_1.2.3.5+0x2c38>
    4aec:	mov	w21, w1
    4af0:	add	x22, x22, #0xaa0
    4af4:	stp	x23, x24, [sp, #48]
    4af8:	mov	w23, #0xfffffffe            	// #-2
    4afc:	stp	x25, x26, [sp, #64]
    4b00:	str	x27, [sp, #80]
    4b04:	ldr	w1, [x19, #180]
    4b08:	cmp	w1, #0x105
    4b0c:	b.ls	4c54 <crc32_combine64@@ZLIB_1.2.3.3+0x1614>  // b.plast
    4b10:	ldr	w3, [x19, #160]
    4b14:	ldp	w2, w5, [x19, #172]
    4b18:	add	w6, w2, #0x2
    4b1c:	ldr	x4, [x19, #96]
    4b20:	mov	w0, #0x2                   	// #2
    4b24:	ldr	w1, [x19, #128]
    4b28:	ldr	w7, [x19, #144]
    4b2c:	ldrb	w4, [x4, w6, uxtw]
    4b30:	ldr	w6, [x19, #140]
    4b34:	lsl	w1, w1, w7
    4b38:	eor	w4, w4, w1
    4b3c:	ldp	x9, x8, [x19, #112]
    4b40:	and	w4, w4, w6
    4b44:	ldr	w6, [x19, #88]
    4b48:	ubfiz	x7, x4, #1, #32
    4b4c:	and	w6, w2, w6
    4b50:	ldrh	w1, [x8, x7]
    4b54:	str	w4, [x19, #128]
    4b58:	strh	w1, [x9, x6, lsl #1]
    4b5c:	strh	w2, [x8, x7]
    4b60:	stp	w0, w5, [x19, #160]
    4b64:	str	w3, [x19, #184]
    4b68:	cbz	w1, 4b90 <crc32_combine64@@ZLIB_1.2.3.3+0x1550>
    4b6c:	ldr	w4, [x19, #192]
    4b70:	cmp	w4, w3
    4b74:	b.ls	4b90 <crc32_combine64@@ZLIB_1.2.3.3+0x1550>  // b.plast
    4b78:	ldr	w4, [x19, #80]
    4b7c:	sub	w5, w2, w1
    4b80:	sub	w4, w4, #0x106
    4b84:	cmp	w5, w4
    4b88:	b.ls	4f9c <crc32_combine64@@ZLIB_1.2.3.3+0x195c>  // b.plast
    4b8c:	nop
    4b90:	cmp	w3, #0x2
    4b94:	b.ls	4ba0 <crc32_combine64@@ZLIB_1.2.3.3+0x1560>  // b.plast
    4b98:	cmp	w3, w0
    4b9c:	b.cs	4d88 <crc32_combine64@@ZLIB_1.2.3.3+0x1748>  // b.hs, b.nlast
    4ba0:	ldr	w0, [x19, #168]
    4ba4:	cbz	w0, 4c38 <crc32_combine64@@ZLIB_1.2.3.3+0x15f8>
    4ba8:	ldr	x3, [x19, #96]
    4bac:	sub	w2, w2, #0x1
    4bb0:	ldr	w0, [x19, #5900]
    4bb4:	ldr	x1, [x19, #5904]
    4bb8:	add	w4, w0, #0x1
    4bbc:	ldrb	w2, [x3, w2, uxtw]
    4bc0:	ldr	x3, [x19, #5888]
    4bc4:	strh	wzr, [x1, w0, uxtw #1]
    4bc8:	add	x1, x19, w2, uxtb #2
    4bcc:	str	w4, [x19, #5900]
    4bd0:	strb	w2, [x3, w0, uxtw]
    4bd4:	ldrh	w0, [x1, #212]
    4bd8:	add	w0, w0, #0x1
    4bdc:	strh	w0, [x1, #212]
    4be0:	ldr	w0, [x19, #5896]
    4be4:	ldr	w1, [x19, #5900]
    4be8:	sub	w0, w0, #0x1
    4bec:	cmp	w1, w0
    4bf0:	b.eq	4c94 <crc32_combine64@@ZLIB_1.2.3.3+0x1654>  // b.none
    4bf4:	ldr	x2, [x19]
    4bf8:	ldr	w0, [x19, #172]
    4bfc:	ldr	w1, [x19, #180]
    4c00:	ldr	w2, [x2, #32]
    4c04:	add	w0, w0, #0x1
    4c08:	sub	w1, w1, #0x1
    4c0c:	str	w0, [x19, #172]
    4c10:	str	w1, [x19, #180]
    4c14:	cbnz	w2, 4b08 <crc32_combine64@@ZLIB_1.2.3.3+0x14c8>
    4c18:	mov	w0, #0x0                   	// #0
    4c1c:	ldp	x19, x20, [sp, #16]
    4c20:	ldp	x21, x22, [sp, #32]
    4c24:	ldp	x23, x24, [sp, #48]
    4c28:	ldp	x25, x26, [sp, #64]
    4c2c:	ldr	x27, [sp, #80]
    4c30:	ldp	x29, x30, [sp], #96
    4c34:	ret
    4c38:	ldr	w1, [x19, #180]
    4c3c:	add	w2, w2, #0x1
    4c40:	stp	w20, w2, [x19, #168]
    4c44:	sub	w1, w1, #0x1
    4c48:	str	w1, [x19, #180]
    4c4c:	cmp	w1, #0x105
    4c50:	b.hi	4b10 <crc32_combine64@@ZLIB_1.2.3.3+0x14d0>  // b.pmore
    4c54:	mov	x0, x19
    4c58:	bl	3830 <crc32_combine64@@ZLIB_1.2.3.3+0x1f0>
    4c5c:	ldr	w0, [x19, #180]
    4c60:	cmp	w0, #0x105
    4c64:	b.hi	4b10 <crc32_combine64@@ZLIB_1.2.3.3+0x14d0>  // b.pmore
    4c68:	cbz	w21, 4c18 <crc32_combine64@@ZLIB_1.2.3.3+0x15d8>
    4c6c:	cbz	w0, 4fd4 <crc32_combine64@@ZLIB_1.2.3.3+0x1994>
    4c70:	ldr	w3, [x19, #160]
    4c74:	cmp	w0, #0x2
    4c78:	ldp	w2, w5, [x19, #172]
    4c7c:	b.hi	4b18 <crc32_combine64@@ZLIB_1.2.3.3+0x14d8>  // b.pmore
    4c80:	mov	w1, #0x2                   	// #2
    4c84:	mov	w0, w1
    4c88:	stp	w1, w5, [x19, #160]
    4c8c:	str	w3, [x19, #184]
    4c90:	b	4b90 <crc32_combine64@@ZLIB_1.2.3.3+0x1550>
    4c94:	ldr	x2, [x19, #152]
    4c98:	mov	x1, #0x0                   	// #0
    4c9c:	tbnz	x2, #63, 4ca8 <crc32_combine64@@ZLIB_1.2.3.3+0x1668>
    4ca0:	ldr	x1, [x19, #96]
    4ca4:	add	x1, x1, w2, uxtw
    4ca8:	ldr	w4, [x19, #172]
    4cac:	mov	x0, x19
    4cb0:	mov	w3, #0x0                   	// #0
    4cb4:	sub	x2, x4, x2
    4cb8:	bl	ee88 <inflateCodesUsed@@ZLIB_1.2.9+0x2450>
    4cbc:	ldr	x24, [x19]
    4cc0:	ldr	w0, [x19, #172]
    4cc4:	ldr	x26, [x24, #56]
    4cc8:	str	x0, [x19, #152]
    4ccc:	mov	x0, x26
    4cd0:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    4cd4:	ldr	x25, [x26, #40]
    4cd8:	ldr	w0, [x24, #32]
    4cdc:	cmp	w0, w25
    4ce0:	csel	w25, w0, w25, ls  // ls = plast
    4ce4:	cbz	w25, 4bf4 <crc32_combine64@@ZLIB_1.2.3.3+0x15b4>
    4ce8:	ldr	x0, [x24, #24]
    4cec:	mov	w27, w25
    4cf0:	ldr	x1, [x26, #32]
    4cf4:	mov	x2, x27
    4cf8:	bl	23a0 <memcpy@plt>
    4cfc:	ldr	x2, [x24, #24]
    4d00:	ldr	x3, [x26, #32]
    4d04:	add	x2, x2, x27
    4d08:	ldr	x1, [x24, #40]
    4d0c:	str	x2, [x24, #24]
    4d10:	ldr	w0, [x24, #32]
    4d14:	add	x3, x3, x27
    4d18:	ldr	x2, [x26, #40]
    4d1c:	str	x3, [x26, #32]
    4d20:	add	x1, x1, x27
    4d24:	sub	w0, w0, w25
    4d28:	str	w0, [x24, #32]
    4d2c:	sub	x27, x2, x27
    4d30:	str	x1, [x24, #40]
    4d34:	str	x27, [x26, #40]
    4d38:	cbnz	x27, 4bf4 <crc32_combine64@@ZLIB_1.2.3.3+0x15b4>
    4d3c:	ldr	x0, [x26, #16]
    4d40:	str	x0, [x26, #32]
    4d44:	b	4bf4 <crc32_combine64@@ZLIB_1.2.3.3+0x15b4>
    4d48:	ldr	w1, [x19, #200]
    4d4c:	ldr	w2, [x19, #172]
    4d50:	ldr	w3, [x19, #184]
    4d54:	cmp	w1, #0x1
    4d58:	b.eq	4d74 <crc32_combine64@@ZLIB_1.2.3.3+0x1734>  // b.none
    4d5c:	cmp	w0, #0x3
    4d60:	b.ne	4b90 <crc32_combine64@@ZLIB_1.2.3.3+0x1550>  // b.any
    4d64:	ldr	w1, [x19, #176]
    4d68:	sub	w1, w2, w1
    4d6c:	cmp	w1, #0x1, lsl #12
    4d70:	b.ls	4b90 <crc32_combine64@@ZLIB_1.2.3.3+0x1550>  // b.plast
    4d74:	mov	w0, #0x2                   	// #2
    4d78:	str	w0, [x19, #160]
    4d7c:	cmp	w3, w0
    4d80:	b.ls	4ba0 <crc32_combine64@@ZLIB_1.2.3.3+0x1560>  // b.plast
    4d84:	nop
    4d88:	sub	w3, w3, #0x3
    4d8c:	ldr	w4, [x19, #5900]
    4d90:	and	w3, w3, #0xff
    4d94:	ldr	w0, [x19, #164]
    4d98:	ldr	x8, [x19, #5904]
    4d9c:	sub	w0, w2, w0
    4da0:	ldrb	w1, [x22, w3, sxtw]
    4da4:	and	w0, w0, #0xffff
    4da8:	ldr	x5, [x19, #5888]
    4dac:	sub	w9, w0, #0x1
    4db0:	ldr	w7, [x19, #180]
    4db4:	add	x1, x19, x1, lsl #2
    4db8:	strh	w9, [x8, w4, uxtw #1]
    4dbc:	add	w6, w4, #0x1
    4dc0:	str	w6, [x19, #5900]
    4dc4:	sub	w7, w7, #0x3
    4dc8:	strb	w3, [x5, w4, uxtw]
    4dcc:	sub	w0, w0, #0x2
    4dd0:	add	w7, w7, w2
    4dd4:	and	w0, w0, #0xffff
    4dd8:	ldrh	w3, [x1, #1240]
    4ddc:	cmp	w0, #0xff
    4de0:	add	w2, w3, #0x1
    4de4:	strh	w2, [x1, #1240]
    4de8:	b.hi	4fbc <crc32_combine64@@ZLIB_1.2.3.3+0x197c>  // b.pmore
    4dec:	adrp	x1, 15000 <gzclose_w@@ZLIB_1.2.3.5+0x2c38>
    4df0:	add	x1, x1, #0xca0
    4df4:	ldrb	w0, [x1, w0, sxtw]
    4df8:	add	x0, x19, w0, sxtw #2
    4dfc:	ldrh	w1, [x0, #2504]
    4e00:	add	w1, w1, #0x1
    4e04:	strh	w1, [x0, #2504]
    4e08:	ldp	w1, w2, [x19, #180]
    4e0c:	ldr	w5, [x19, #172]
    4e10:	ldr	w12, [x19, #5896]
    4e14:	add	w1, w1, #0x1
    4e18:	add	w0, w5, #0x1
    4e1c:	ldr	w13, [x19, #5900]
    4e20:	add	w5, w2, w5
    4e24:	sub	w12, w12, #0x1
    4e28:	sub	w9, w5, #0x1
    4e2c:	sub	w1, w1, w2
    4e30:	sub	w2, w2, #0x2
    4e34:	stp	w1, w2, [x19, #180]
    4e38:	str	w0, [x19, #172]
    4e3c:	sub	w3, w23, w0
    4e40:	add	w8, w0, #0x2
    4e44:	add	w3, w3, w5
    4e48:	cmp	w7, w0
    4e4c:	b.cc	4f74 <crc32_combine64@@ZLIB_1.2.3.3+0x1934>  // b.lo, b.ul, b.last
    4e50:	ldr	x2, [x19, #96]
    4e54:	ldr	w6, [x19, #128]
    4e58:	ldr	w10, [x19, #144]
    4e5c:	ldrb	w4, [x2, w8, uxtw]
    4e60:	ldr	w2, [x19, #140]
    4e64:	lsl	w6, w6, w10
    4e68:	eor	w4, w4, w6
    4e6c:	and	w4, w4, w2
    4e70:	ldr	w6, [x19, #88]
    4e74:	ldr	x8, [x19, #120]
    4e78:	ubfiz	x2, x4, #1, #32
    4e7c:	ldr	x10, [x19, #112]
    4e80:	and	w6, w0, w6
    4e84:	ldrh	w11, [x8, x2]
    4e88:	str	w4, [x19, #128]
    4e8c:	strh	w11, [x10, x6, lsl #1]
    4e90:	strh	w0, [x8, x2]
    4e94:	add	w0, w0, #0x1
    4e98:	str	w3, [x19, #184]
    4e9c:	cmp	w0, w9
    4ea0:	b.ne	4e38 <crc32_combine64@@ZLIB_1.2.3.3+0x17f8>  // b.any
    4ea4:	mov	w0, #0x2                   	// #2
    4ea8:	str	w0, [x19, #160]
    4eac:	stp	wzr, w9, [x19, #168]
    4eb0:	cmp	w13, w12
    4eb4:	b.ne	4b08 <crc32_combine64@@ZLIB_1.2.3.3+0x14c8>  // b.any
    4eb8:	ldr	x2, [x19, #152]
    4ebc:	mov	x1, #0x0                   	// #0
    4ec0:	tbnz	x2, #63, 4ecc <crc32_combine64@@ZLIB_1.2.3.3+0x188c>
    4ec4:	ldr	x1, [x19, #96]
    4ec8:	add	x1, x1, w2, uxtw
    4ecc:	sub	x2, x9, x2
    4ed0:	mov	x0, x19
    4ed4:	mov	w3, #0x0                   	// #0
    4ed8:	bl	ee88 <inflateCodesUsed@@ZLIB_1.2.9+0x2450>
    4edc:	ldr	x24, [x19]
    4ee0:	ldr	w0, [x19, #172]
    4ee4:	ldr	x26, [x24, #56]
    4ee8:	str	x0, [x19, #152]
    4eec:	mov	x0, x26
    4ef0:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    4ef4:	ldr	x25, [x26, #40]
    4ef8:	ldr	w0, [x24, #32]
    4efc:	cmp	w0, w25
    4f00:	csel	w25, w0, w25, ls  // ls = plast
    4f04:	cbz	w25, 4f64 <crc32_combine64@@ZLIB_1.2.3.3+0x1924>
    4f08:	ldr	x0, [x24, #24]
    4f0c:	mov	w27, w25
    4f10:	ldr	x1, [x26, #32]
    4f14:	mov	x2, x27
    4f18:	bl	23a0 <memcpy@plt>
    4f1c:	ldr	x1, [x24, #24]
    4f20:	ldr	w0, [x24, #32]
    4f24:	ldr	x2, [x26, #32]
    4f28:	sub	w25, w0, w25
    4f2c:	add	x0, x1, x27
    4f30:	str	x0, [x24, #24]
    4f34:	ldr	x1, [x24, #40]
    4f38:	add	x2, x2, x27
    4f3c:	ldr	x0, [x26, #40]
    4f40:	str	x2, [x26, #32]
    4f44:	add	x1, x1, x27
    4f48:	str	w25, [x24, #32]
    4f4c:	str	x1, [x24, #40]
    4f50:	sub	x27, x0, x27
    4f54:	str	x27, [x26, #40]
    4f58:	cbnz	x27, 4f64 <crc32_combine64@@ZLIB_1.2.3.3+0x1924>
    4f5c:	ldr	x0, [x26, #16]
    4f60:	str	x0, [x26, #32]
    4f64:	ldr	x0, [x19]
    4f68:	ldr	w0, [x0, #32]
    4f6c:	cbnz	w0, 4b04 <crc32_combine64@@ZLIB_1.2.3.3+0x14c4>
    4f70:	b	4c18 <crc32_combine64@@ZLIB_1.2.3.3+0x15d8>
    4f74:	str	w3, [x19, #184]
    4f78:	add	w0, w0, #0x1
    4f7c:	cmp	w9, w0
    4f80:	b.ne	4e38 <crc32_combine64@@ZLIB_1.2.3.3+0x17f8>  // b.any
    4f84:	mov	w0, #0x2                   	// #2
    4f88:	str	w0, [x19, #160]
    4f8c:	stp	wzr, w9, [x19, #168]
    4f90:	cmp	w13, w12
    4f94:	b.ne	4b08 <crc32_combine64@@ZLIB_1.2.3.3+0x14c8>  // b.any
    4f98:	b	4eb8 <crc32_combine64@@ZLIB_1.2.3.3+0x1878>
    4f9c:	mov	x0, x19
    4fa0:	bl	3648 <crc32_combine64@@ZLIB_1.2.3.3+0x8>
    4fa4:	str	w0, [x19, #160]
    4fa8:	cmp	w0, #0x5
    4fac:	b.ls	4d48 <crc32_combine64@@ZLIB_1.2.3.3+0x1708>  // b.plast
    4fb0:	ldr	w2, [x19, #172]
    4fb4:	ldr	w3, [x19, #184]
    4fb8:	b	4b90 <crc32_combine64@@ZLIB_1.2.3.3+0x1550>
    4fbc:	lsr	w0, w0, #7
    4fc0:	adrp	x1, 15000 <gzclose_w@@ZLIB_1.2.3.5+0x2c38>
    4fc4:	add	w0, w0, #0x100
    4fc8:	add	x1, x1, #0xca0
    4fcc:	ldrb	w0, [x1, w0, sxtw]
    4fd0:	b	4df8 <crc32_combine64@@ZLIB_1.2.3.3+0x17b8>
    4fd4:	ldp	w0, w3, [x19, #168]
    4fd8:	cbnz	w0, 50dc <crc32_combine64@@ZLIB_1.2.3.3+0x1a9c>
    4fdc:	cmp	w3, #0x2
    4fe0:	mov	w0, #0x2                   	// #2
    4fe4:	csel	w0, w3, w0, ls  // ls = plast
    4fe8:	str	w0, [x19, #5932]
    4fec:	cmp	w21, #0x4
    4ff0:	b.eq	5134 <crc32_combine64@@ZLIB_1.2.3.3+0x1af4>  // b.none
    4ff4:	ldr	w1, [x19, #5900]
    4ff8:	mov	w0, #0x1                   	// #1
    4ffc:	cbz	w1, 4c1c <crc32_combine64@@ZLIB_1.2.3.3+0x15dc>
    5000:	ldr	x2, [x19, #152]
    5004:	mov	x1, #0x0                   	// #0
    5008:	tbnz	x2, #63, 5014 <crc32_combine64@@ZLIB_1.2.3.3+0x19d4>
    500c:	ldr	x1, [x19, #96]
    5010:	add	x1, x1, w2, uxtw
    5014:	mov	w3, w3
    5018:	mov	x0, x19
    501c:	sub	x2, x3, x2
    5020:	mov	w3, #0x0                   	// #0
    5024:	bl	ee88 <inflateCodesUsed@@ZLIB_1.2.9+0x2450>
    5028:	ldr	x21, [x19]
    502c:	ldr	w0, [x19, #172]
    5030:	ldr	x20, [x21, #56]
    5034:	str	x0, [x19, #152]
    5038:	mov	x0, x20
    503c:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    5040:	ldr	x0, [x20, #40]
    5044:	ldr	w22, [x21, #32]
    5048:	cmp	w22, w0
    504c:	csel	w22, w22, w0, ls  // ls = plast
    5050:	cbz	w22, 50b0 <crc32_combine64@@ZLIB_1.2.3.3+0x1a70>
    5054:	ldr	x0, [x21, #24]
    5058:	mov	w23, w22
    505c:	ldr	x1, [x20, #32]
    5060:	mov	x2, x23
    5064:	bl	23a0 <memcpy@plt>
    5068:	ldr	x1, [x21, #24]
    506c:	ldr	w0, [x21, #32]
    5070:	ldr	x2, [x20, #32]
    5074:	sub	w22, w0, w22
    5078:	add	x0, x1, x23
    507c:	str	x0, [x21, #24]
    5080:	ldr	x1, [x21, #40]
    5084:	add	x2, x2, x23
    5088:	ldr	x0, [x20, #40]
    508c:	str	x2, [x20, #32]
    5090:	add	x1, x1, x23
    5094:	str	w22, [x21, #32]
    5098:	str	x1, [x21, #40]
    509c:	sub	x23, x0, x23
    50a0:	str	x23, [x20, #40]
    50a4:	cbnz	x23, 50b0 <crc32_combine64@@ZLIB_1.2.3.3+0x1a70>
    50a8:	ldr	x0, [x20, #16]
    50ac:	str	x0, [x20, #32]
    50b0:	ldr	x0, [x19]
    50b4:	ldp	x19, x20, [sp, #16]
    50b8:	ldr	w0, [x0, #32]
    50bc:	ldp	x21, x22, [sp, #32]
    50c0:	cmp	w0, #0x0
    50c4:	cset	w0, ne  // ne = any
    50c8:	ldp	x23, x24, [sp, #48]
    50cc:	ldp	x25, x26, [sp, #64]
    50d0:	ldr	x27, [sp, #80]
    50d4:	ldp	x29, x30, [sp], #96
    50d8:	ret
    50dc:	ldr	x2, [x19, #96]
    50e0:	sub	w3, w3, #0x1
    50e4:	ldr	w0, [x19, #5900]
    50e8:	ldr	x1, [x19, #5904]
    50ec:	add	w4, w0, #0x1
    50f0:	ldrb	w2, [x2, w3, uxtw]
    50f4:	ldr	x3, [x19, #5888]
    50f8:	strh	wzr, [x1, w0, uxtw #1]
    50fc:	add	x1, x19, w2, uxtb #2
    5100:	str	w4, [x19, #5900]
    5104:	strb	w2, [x3, w0, uxtw]
    5108:	ldrh	w0, [x1, #212]
    510c:	add	w0, w0, #0x1
    5110:	strh	w0, [x1, #212]
    5114:	mov	w0, #0x2                   	// #2
    5118:	str	wzr, [x19, #168]
    511c:	ldr	w3, [x19, #172]
    5120:	cmp	w3, #0x2
    5124:	csel	w0, w3, w0, ls  // ls = plast
    5128:	str	w0, [x19, #5932]
    512c:	cmp	w21, #0x4
    5130:	b.ne	4ff4 <crc32_combine64@@ZLIB_1.2.3.3+0x19b4>  // b.any
    5134:	ldr	x2, [x19, #152]
    5138:	mov	x1, #0x0                   	// #0
    513c:	tbnz	x2, #63, 5148 <crc32_combine64@@ZLIB_1.2.3.3+0x1b08>
    5140:	ldr	x1, [x19, #96]
    5144:	add	x1, x1, w2, uxtw
    5148:	mov	w3, w3
    514c:	mov	x0, x19
    5150:	sub	x2, x3, x2
    5154:	mov	w3, #0x1                   	// #1
    5158:	bl	ee88 <inflateCodesUsed@@ZLIB_1.2.9+0x2450>
    515c:	ldr	x21, [x19]
    5160:	ldr	w0, [x19, #172]
    5164:	ldr	x20, [x21, #56]
    5168:	str	x0, [x19, #152]
    516c:	mov	x0, x20
    5170:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    5174:	ldr	x0, [x20, #40]
    5178:	ldr	w22, [x21, #32]
    517c:	cmp	w22, w0
    5180:	csel	w22, w22, w0, ls  // ls = plast
    5184:	cbz	w22, 51e4 <crc32_combine64@@ZLIB_1.2.3.3+0x1ba4>
    5188:	ldr	x0, [x21, #24]
    518c:	mov	w23, w22
    5190:	ldr	x1, [x20, #32]
    5194:	mov	x2, x23
    5198:	bl	23a0 <memcpy@plt>
    519c:	ldr	x1, [x21, #24]
    51a0:	ldr	w0, [x21, #32]
    51a4:	ldr	x2, [x20, #32]
    51a8:	sub	w22, w0, w22
    51ac:	add	x0, x1, x23
    51b0:	str	x0, [x21, #24]
    51b4:	ldr	x1, [x21, #40]
    51b8:	add	x2, x2, x23
    51bc:	ldr	x0, [x20, #40]
    51c0:	str	x2, [x20, #32]
    51c4:	add	x1, x1, x23
    51c8:	str	w22, [x21, #32]
    51cc:	str	x1, [x21, #40]
    51d0:	sub	x23, x0, x23
    51d4:	str	x23, [x20, #40]
    51d8:	cbnz	x23, 51e4 <crc32_combine64@@ZLIB_1.2.3.3+0x1ba4>
    51dc:	ldr	x0, [x20, #16]
    51e0:	str	x0, [x20, #32]
    51e4:	ldr	x0, [x19]
    51e8:	ldp	x19, x20, [sp, #16]
    51ec:	ldr	w0, [x0, #32]
    51f0:	ldp	x21, x22, [sp, #32]
    51f4:	cmp	w0, #0x0
    51f8:	cset	w0, ne  // ne = any
    51fc:	add	w0, w0, #0x2
    5200:	ldp	x23, x24, [sp, #48]
    5204:	ldp	x25, x26, [sp, #64]
    5208:	ldr	x27, [sp, #80]
    520c:	ldp	x29, x30, [sp], #96
    5210:	ret
    5214:	nop

0000000000005218 <deflateSetDictionary@@Base>:
    5218:	cbz	x0, 5478 <deflateSetDictionary@@Base+0x260>
    521c:	stp	x29, x30, [sp, #-64]!
    5220:	mov	x29, sp
    5224:	stp	x19, x20, [sp, #16]
    5228:	mov	x19, x0
    522c:	ldr	x0, [x0, #64]
    5230:	cbz	x0, 53e4 <deflateSetDictionary@@Base+0x1cc>
    5234:	ldr	x0, [x19, #72]
    5238:	cbz	x0, 53e4 <deflateSetDictionary@@Base+0x1cc>
    523c:	stp	x23, x24, [sp, #48]
    5240:	ldr	x24, [x19, #56]
    5244:	cbz	x24, 5434 <deflateSetDictionary@@Base+0x21c>
    5248:	mov	x20, x1
    524c:	mov	w0, #0xfffffffe            	// #-2
    5250:	ldr	x1, [x24]
    5254:	cmp	x19, x1
    5258:	b.eq	526c <deflateSetDictionary@@Base+0x54>  // b.none
    525c:	ldp	x23, x24, [sp, #48]
    5260:	ldp	x19, x20, [sp, #16]
    5264:	ldp	x29, x30, [sp], #64
    5268:	ret
    526c:	ldr	w1, [x24, #8]
    5270:	mov	w5, #0x45                  	// #69
    5274:	stp	x21, x22, [sp, #32]
    5278:	mov	w22, w2
    527c:	cmp	w1, #0x67
    5280:	mov	w2, #0x5b                  	// #91
    5284:	ccmp	w1, w2, #0x4, ne  // ne = any
    5288:	cset	w2, ne  // ne = any
    528c:	cmp	w1, #0x2a
    5290:	ccmp	w1, w5, #0x4, ne  // ne = any
    5294:	sub	w3, w1, #0x39
    5298:	csel	w2, w2, wzr, ne  // ne = any
    529c:	cmp	w1, #0x29a
    52a0:	mov	w4, #0x71                  	// #113
    52a4:	ccmp	w1, w4, #0x4, ne  // ne = any
    52a8:	csel	w2, w2, wzr, ne  // ne = any
    52ac:	tst	w3, #0xffffffef
    52b0:	csel	w2, w2, wzr, ne  // ne = any
    52b4:	cbnz	w2, 5470 <deflateSetDictionary@@Base+0x258>
    52b8:	cbz	x20, 5470 <deflateSetDictionary@@Base+0x258>
    52bc:	ldr	w21, [x24, #48]
    52c0:	cmp	w21, #0x2
    52c4:	b.eq	5470 <deflateSetDictionary@@Base+0x258>  // b.none
    52c8:	cmp	w21, #0x1
    52cc:	b.eq	53f4 <deflateSetDictionary@@Base+0x1dc>  // b.none
    52d0:	ldr	w0, [x24, #180]
    52d4:	cbnz	w0, 5480 <deflateSetDictionary@@Base+0x268>
    52d8:	ldr	w1, [x24, #80]
    52dc:	str	wzr, [x24, #48]
    52e0:	cmp	w1, w22
    52e4:	b.hi	542c <deflateSetDictionary@@Base+0x214>  // b.pmore
    52e8:	cbz	w21, 5440 <deflateSetDictionary@@Base+0x228>
    52ec:	sub	w22, w22, w1
    52f0:	add	x20, x20, x22
    52f4:	ldr	w22, [x19, #8]
    52f8:	mov	x0, x24
    52fc:	str	w1, [x19, #8]
    5300:	ldr	x23, [x19]
    5304:	str	x20, [x19]
    5308:	bl	3830 <crc32_combine64@@ZLIB_1.2.3.3+0x1f0>
    530c:	ldr	w3, [x24, #180]
    5310:	cmp	w3, #0x2
    5314:	b.ls	5394 <deflateSetDictionary@@Base+0x17c>  // b.plast
    5318:	mov	w20, #0x2                   	// #2
    531c:	nop
    5320:	ldr	w1, [x24, #172]
    5324:	ldp	x9, x4, [x24, #112]
    5328:	sub	w6, w1, #0x2
    532c:	ldr	w11, [x24, #88]
    5330:	add	w6, w6, w3
    5334:	ldr	w2, [x24, #128]
    5338:	ldp	w8, w7, [x24, #140]
    533c:	ldr	x10, [x24, #96]
    5340:	add	w0, w1, #0x2
    5344:	lsl	w2, w2, w7
    5348:	and	w5, w11, w1
    534c:	ldrb	w3, [x10, w0, uxtw]
    5350:	eor	w2, w3, w2
    5354:	and	w2, w2, w8
    5358:	ubfiz	x0, x2, #1, #32
    535c:	ldrh	w3, [x4, x0]
    5360:	str	w2, [x24, #128]
    5364:	strh	w3, [x9, x5, lsl #1]
    5368:	strh	w1, [x4, x0]
    536c:	add	w1, w1, #0x1
    5370:	cmp	w1, w6
    5374:	b.ne	5340 <deflateSetDictionary@@Base+0x128>  // b.any
    5378:	str	w1, [x24, #172]
    537c:	mov	x0, x24
    5380:	str	w20, [x24, #180]
    5384:	bl	3830 <crc32_combine64@@ZLIB_1.2.3.3+0x1f0>
    5388:	ldr	w3, [x24, #180]
    538c:	cmp	w3, #0x2
    5390:	b.hi	5320 <deflateSetDictionary@@Base+0x108>  // b.pmore
    5394:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    5398:	ldr	w1, [x24, #172]
    539c:	mov	w2, #0x2                   	// #2
    53a0:	str	w2, [x24, #160]
    53a4:	ldr	d0, [x0, #1376]
    53a8:	add	w2, w3, w1
    53ac:	str	x2, [x24, #152]
    53b0:	mov	w0, #0x0                   	// #0
    53b4:	str	wzr, [x24, #168]
    53b8:	str	w2, [x24, #172]
    53bc:	stur	d0, [x24, #180]
    53c0:	str	w3, [x24, #5932]
    53c4:	str	x23, [x19]
    53c8:	str	w22, [x19, #8]
    53cc:	str	w21, [x24, #48]
    53d0:	ldp	x19, x20, [sp, #16]
    53d4:	ldp	x21, x22, [sp, #32]
    53d8:	ldp	x23, x24, [sp, #48]
    53dc:	ldp	x29, x30, [sp], #64
    53e0:	ret
    53e4:	mov	w0, #0xfffffffe            	// #-2
    53e8:	ldp	x19, x20, [sp, #16]
    53ec:	ldp	x29, x30, [sp], #64
    53f0:	ret
    53f4:	cmp	w1, #0x2a
    53f8:	b.ne	5480 <deflateSetDictionary@@Base+0x268>  // b.any
    53fc:	ldr	w1, [x24, #180]
    5400:	mov	w0, #0xfffffffe            	// #-2
    5404:	cbnz	w1, 5470 <deflateSetDictionary@@Base+0x258>
    5408:	ldr	x0, [x19, #96]
    540c:	mov	x1, x20
    5410:	mov	w2, w22
    5414:	bl	2560 <adler32@plt>
    5418:	ldr	w1, [x24, #80]
    541c:	str	x0, [x19, #96]
    5420:	str	wzr, [x24, #48]
    5424:	cmp	w22, w1
    5428:	b.cs	52ec <deflateSetDictionary@@Base+0xd4>  // b.hs, b.nlast
    542c:	mov	w1, w22
    5430:	b	52f4 <deflateSetDictionary@@Base+0xdc>
    5434:	mov	w0, #0xfffffffe            	// #-2
    5438:	ldp	x23, x24, [sp, #48]
    543c:	b	5260 <deflateSetDictionary@@Base+0x48>
    5440:	ldr	w2, [x24, #132]
    5444:	mov	w1, #0x0                   	// #0
    5448:	ldr	x0, [x24, #120]
    544c:	sub	w2, w2, #0x1
    5450:	lsl	x2, x2, #1
    5454:	strh	wzr, [x0, x2]
    5458:	bl	24a0 <memset@plt>
    545c:	str	xzr, [x24, #152]
    5460:	ldr	w1, [x24, #80]
    5464:	str	wzr, [x24, #172]
    5468:	str	wzr, [x24, #5932]
    546c:	b	52ec <deflateSetDictionary@@Base+0xd4>
    5470:	ldp	x21, x22, [sp, #32]
    5474:	b	525c <deflateSetDictionary@@Base+0x44>
    5478:	mov	w0, #0xfffffffe            	// #-2
    547c:	ret
    5480:	mov	w0, #0xfffffffe            	// #-2
    5484:	ldp	x21, x22, [sp, #32]
    5488:	ldp	x23, x24, [sp, #48]
    548c:	b	5260 <deflateSetDictionary@@Base+0x48>

0000000000005490 <deflateGetDictionary@@ZLIB_1.2.9>:
    5490:	cbz	x0, 54dc <deflateGetDictionary@@ZLIB_1.2.9+0x4c>
    5494:	mov	x3, x0
    5498:	ldr	x0, [x0, #64]
    549c:	cbz	x0, 54dc <deflateGetDictionary@@ZLIB_1.2.9+0x4c>
    54a0:	ldr	x0, [x3, #72]
    54a4:	cbz	x0, 54dc <deflateGetDictionary@@ZLIB_1.2.9+0x4c>
    54a8:	ldr	x4, [x3, #56]
    54ac:	cbz	x4, 54dc <deflateGetDictionary@@ZLIB_1.2.9+0x4c>
    54b0:	stp	x29, x30, [sp, #-32]!
    54b4:	mov	w0, #0xfffffffe            	// #-2
    54b8:	mov	x29, sp
    54bc:	stp	x19, x20, [sp, #16]
    54c0:	mov	x20, x2
    54c4:	ldr	x2, [x4]
    54c8:	cmp	x3, x2
    54cc:	b.eq	54e4 <deflateGetDictionary@@ZLIB_1.2.9+0x54>  // b.none
    54d0:	ldp	x19, x20, [sp, #16]
    54d4:	ldp	x29, x30, [sp], #32
    54d8:	ret
    54dc:	mov	w0, #0xfffffffe            	// #-2
    54e0:	ret
    54e4:	ldr	w3, [x4, #8]
    54e8:	mov	w2, #0x45                  	// #69
    54ec:	mov	w7, #0x5b                  	// #91
    54f0:	mov	w6, #0x71                  	// #113
    54f4:	cmp	w3, #0x2a
    54f8:	sub	w5, w3, #0x39
    54fc:	ccmp	w3, w2, #0x4, ne  // ne = any
    5500:	cset	w2, ne  // ne = any
    5504:	cmp	w3, #0x67
    5508:	ccmp	w3, w7, #0x4, ne  // ne = any
    550c:	csel	w2, w2, wzr, ne  // ne = any
    5510:	cmp	w3, #0x29a
    5514:	ccmp	w3, w6, #0x4, ne  // ne = any
    5518:	csel	w2, w2, wzr, ne  // ne = any
    551c:	tst	w5, #0xffffffef
    5520:	csel	w2, w2, wzr, ne  // ne = any
    5524:	cbnz	w2, 54d0 <deflateGetDictionary@@ZLIB_1.2.9+0x40>
    5528:	ldr	w0, [x4, #172]
    552c:	ldr	w3, [x4, #180]
    5530:	ldr	w19, [x4, #80]
    5534:	add	w2, w0, w3
    5538:	cmp	w19, w2
    553c:	csel	w19, w19, w2, ls  // ls = plast
    5540:	cmp	x1, #0x0
    5544:	ccmp	w19, #0x0, #0x4, ne  // ne = any
    5548:	b.ne	5564 <deflateGetDictionary@@ZLIB_1.2.9+0xd4>  // b.any
    554c:	mov	w0, #0x0                   	// #0
    5550:	cbz	x20, 54d0 <deflateGetDictionary@@ZLIB_1.2.9+0x40>
    5554:	str	w19, [x20]
    5558:	ldp	x19, x20, [sp, #16]
    555c:	ldp	x29, x30, [sp], #32
    5560:	ret
    5564:	mov	w3, w3
    5568:	mov	w2, w19
    556c:	add	x0, x3, w0, uxtw
    5570:	ldr	x4, [x4, #96]
    5574:	sub	x3, x0, x2
    5578:	mov	x0, x1
    557c:	add	x1, x4, x3
    5580:	bl	23a0 <memcpy@plt>
    5584:	b	554c <deflateGetDictionary@@ZLIB_1.2.9+0xbc>

0000000000005588 <deflateResetKeep@@ZLIB_1.2.5.2>:
    5588:	cbz	x0, 56bc <deflateResetKeep@@ZLIB_1.2.5.2+0x134>
    558c:	stp	x29, x30, [sp, #-32]!
    5590:	mov	x29, sp
    5594:	stp	x19, x20, [sp, #16]
    5598:	mov	x19, x0
    559c:	ldr	x0, [x0, #64]
    55a0:	cbz	x0, 55d0 <deflateResetKeep@@ZLIB_1.2.5.2+0x48>
    55a4:	ldr	x0, [x19, #72]
    55a8:	cbz	x0, 55d0 <deflateResetKeep@@ZLIB_1.2.5.2+0x48>
    55ac:	ldr	x20, [x19, #56]
    55b0:	cbz	x20, 55d0 <deflateResetKeep@@ZLIB_1.2.5.2+0x48>
    55b4:	ldr	x1, [x20]
    55b8:	mov	w0, #0xfffffffe            	// #-2
    55bc:	cmp	x19, x1
    55c0:	b.eq	55e0 <deflateResetKeep@@ZLIB_1.2.5.2+0x58>  // b.none
    55c4:	ldp	x19, x20, [sp, #16]
    55c8:	ldp	x29, x30, [sp], #32
    55cc:	ret
    55d0:	mov	w0, #0xfffffffe            	// #-2
    55d4:	ldp	x19, x20, [sp, #16]
    55d8:	ldp	x29, x30, [sp], #32
    55dc:	ret
    55e0:	ldr	w2, [x20, #8]
    55e4:	mov	w1, #0x5b                  	// #91
    55e8:	mov	w5, #0x45                  	// #69
    55ec:	mov	w3, #0x71                  	// #113
    55f0:	cmp	w2, #0x67
    55f4:	sub	w4, w2, #0x39
    55f8:	ccmp	w2, w1, #0x4, ne  // ne = any
    55fc:	cset	w1, ne  // ne = any
    5600:	cmp	w2, #0x2a
    5604:	ccmp	w2, w5, #0x4, ne  // ne = any
    5608:	csel	w1, w1, wzr, ne  // ne = any
    560c:	cmp	w2, #0x29a
    5610:	ccmp	w2, w3, #0x4, ne  // ne = any
    5614:	csel	w1, w1, wzr, ne  // ne = any
    5618:	tst	w4, #0xffffffef
    561c:	csel	w1, w1, wzr, ne  // ne = any
    5620:	cbnz	w1, 55c4 <deflateResetKeep@@ZLIB_1.2.5.2+0x3c>
    5624:	ldr	w0, [x20, #48]
    5628:	mov	w1, #0x2                   	// #2
    562c:	str	xzr, [x19, #16]
    5630:	stp	xzr, xzr, [x19, #40]
    5634:	str	w1, [x19, #88]
    5638:	ldr	x1, [x20, #16]
    563c:	stp	x1, xzr, [x20, #32]
    5640:	tbnz	w0, #31, 5688 <deflateResetKeep@@ZLIB_1.2.5.2+0x100>
    5644:	cmp	w0, #0x2
    5648:	b.eq	56a0 <deflateResetKeep@@ZLIB_1.2.5.2+0x118>  // b.none
    564c:	cbnz	w0, 5698 <deflateResetKeep@@ZLIB_1.2.5.2+0x110>
    5650:	mov	w0, w3
    5654:	str	w0, [x20, #8]
    5658:	mov	w2, #0x0                   	// #0
    565c:	mov	x1, #0x0                   	// #0
    5660:	mov	x0, #0x0                   	// #0
    5664:	bl	2560 <adler32@plt>
    5668:	str	x0, [x19, #96]
    566c:	mov	x0, x20
    5670:	str	wzr, [x20, #76]
    5674:	bl	ea60 <inflateCodesUsed@@ZLIB_1.2.9+0x2028>
    5678:	mov	w0, #0x0                   	// #0
    567c:	ldp	x19, x20, [sp, #16]
    5680:	ldp	x29, x30, [sp], #32
    5684:	ret
    5688:	neg	w1, w0
    568c:	str	w1, [x20, #48]
    5690:	cmn	w0, #0x2
    5694:	b.eq	56a0 <deflateResetKeep@@ZLIB_1.2.5.2+0x118>  // b.none
    5698:	mov	w0, #0x2a                  	// #42
    569c:	b	5654 <deflateResetKeep@@ZLIB_1.2.5.2+0xcc>
    56a0:	mov	w0, #0x39                  	// #57
    56a4:	str	w0, [x20, #8]
    56a8:	mov	w2, #0x0                   	// #0
    56ac:	mov	x1, #0x0                   	// #0
    56b0:	mov	x0, #0x0                   	// #0
    56b4:	bl	2430 <crc32@plt>
    56b8:	b	5668 <deflateResetKeep@@ZLIB_1.2.5.2+0xe0>
    56bc:	mov	w0, #0xfffffffe            	// #-2
    56c0:	ret
    56c4:	nop

00000000000056c8 <deflateReset@@Base>:
    56c8:	stp	x29, x30, [sp, #-32]!
    56cc:	mov	x29, sp
    56d0:	stp	x19, x20, [sp, #16]
    56d4:	mov	x19, x0
    56d8:	bl	2630 <deflateResetKeep@plt>
    56dc:	mov	w20, w0
    56e0:	cbz	w0, 56f4 <deflateReset@@Base+0x2c>
    56e4:	mov	w0, w20
    56e8:	ldp	x19, x20, [sp, #16]
    56ec:	ldp	x29, x30, [sp], #32
    56f0:	ret
    56f4:	ldr	x19, [x19, #56]
    56f8:	mov	w1, #0x0                   	// #0
    56fc:	ldr	w2, [x19, #132]
    5700:	ldr	w3, [x19, #80]
    5704:	sub	w2, w2, #0x1
    5708:	ldr	x0, [x19, #120]
    570c:	lsl	x2, x2, #1
    5710:	lsl	x3, x3, #1
    5714:	str	x3, [x19, #104]
    5718:	strh	wzr, [x0, x2]
    571c:	bl	24a0 <memset@plt>
    5720:	str	wzr, [x19, #128]
    5724:	ldrsw	x0, [x19, #196]
    5728:	adrp	x1, 28000 <gzclose_w@@ZLIB_1.2.3.5+0x15c38>
    572c:	add	x1, x1, #0xc68
    5730:	mov	w3, #0x2                   	// #2
    5734:	str	w3, [x19, #160]
    5738:	mov	x4, #0x200000000           	// #8589934592
    573c:	lsl	x0, x0, #4
    5740:	str	xzr, [x19, #152]
    5744:	add	x2, x1, x0
    5748:	str	xzr, [x19, #168]
    574c:	stur	x4, [x19, #180]
    5750:	ldrh	w1, [x1, x0]
    5754:	ldrh	w3, [x2, #2]
    5758:	ldrh	w0, [x2, #4]
    575c:	ldrh	w2, [x2, #6]
    5760:	stp	w2, w3, [x19, #188]
    5764:	stp	w1, w0, [x19, #204]
    5768:	mov	w0, w20
    576c:	str	wzr, [x19, #5932]
    5770:	ldp	x19, x20, [sp, #16]
    5774:	ldp	x29, x30, [sp], #32
    5778:	ret
    577c:	nop

0000000000005780 <deflateSetHeader@@ZLIB_1.2.2>:
    5780:	mov	x2, x0
    5784:	cbz	x0, 580c <deflateSetHeader@@ZLIB_1.2.2+0x8c>
    5788:	ldr	x0, [x0, #64]
    578c:	cbz	x0, 580c <deflateSetHeader@@ZLIB_1.2.2+0x8c>
    5790:	ldr	x0, [x2, #72]
    5794:	cbz	x0, 580c <deflateSetHeader@@ZLIB_1.2.2+0x8c>
    5798:	ldr	x3, [x2, #56]
    579c:	cbz	x3, 580c <deflateSetHeader@@ZLIB_1.2.2+0x8c>
    57a0:	ldr	x4, [x3]
    57a4:	mov	w0, #0xfffffffe            	// #-2
    57a8:	cmp	x2, x4
    57ac:	b.ne	5808 <deflateSetHeader@@ZLIB_1.2.2+0x88>  // b.any
    57b0:	ldr	w4, [x3, #8]
    57b4:	mov	w2, #0x45                  	// #69
    57b8:	mov	w7, #0x5b                  	// #91
    57bc:	mov	w6, #0x29a                 	// #666
    57c0:	cmp	w4, #0x2a
    57c4:	sub	w5, w4, #0x39
    57c8:	ccmp	w4, w2, #0x4, ne  // ne = any
    57cc:	cset	w2, ne  // ne = any
    57d0:	cmp	w4, #0x67
    57d4:	ccmp	w4, w7, #0x4, ne  // ne = any
    57d8:	csel	w2, w2, wzr, ne  // ne = any
    57dc:	cmp	w4, #0x71
    57e0:	ccmp	w4, w6, #0x4, ne  // ne = any
    57e4:	csel	w2, w2, wzr, ne  // ne = any
    57e8:	tst	w5, #0xffffffef
    57ec:	csel	w2, w2, wzr, ne  // ne = any
    57f0:	cbnz	w2, 5808 <deflateSetHeader@@ZLIB_1.2.2+0x88>
    57f4:	ldr	w2, [x3, #48]
    57f8:	cmp	w2, #0x2
    57fc:	b.ne	5808 <deflateSetHeader@@ZLIB_1.2.2+0x88>  // b.any
    5800:	mov	w0, #0x0                   	// #0
    5804:	str	x1, [x3, #56]
    5808:	ret
    580c:	mov	w0, #0xfffffffe            	// #-2
    5810:	ret
    5814:	nop

0000000000005818 <deflatePending@@ZLIB_1.2.5.1>:
    5818:	mov	x3, x0
    581c:	cbz	x0, 58ac <deflatePending@@ZLIB_1.2.5.1+0x94>
    5820:	ldr	x0, [x0, #64]
    5824:	cbz	x0, 58ac <deflatePending@@ZLIB_1.2.5.1+0x94>
    5828:	ldr	x0, [x3, #72]
    582c:	cbz	x0, 58ac <deflatePending@@ZLIB_1.2.5.1+0x94>
    5830:	ldr	x4, [x3, #56]
    5834:	cbz	x4, 58ac <deflatePending@@ZLIB_1.2.5.1+0x94>
    5838:	ldr	x5, [x4]
    583c:	mov	w0, #0xfffffffe            	// #-2
    5840:	cmp	x3, x5
    5844:	b.ne	58a8 <deflatePending@@ZLIB_1.2.5.1+0x90>  // b.any
    5848:	ldr	w5, [x4, #8]
    584c:	mov	w3, #0x45                  	// #69
    5850:	mov	w8, #0x5b                  	// #91
    5854:	mov	w7, #0x71                  	// #113
    5858:	cmp	w5, #0x2a
    585c:	sub	w6, w5, #0x39
    5860:	ccmp	w5, w3, #0x4, ne  // ne = any
    5864:	cset	w3, ne  // ne = any
    5868:	cmp	w5, #0x67
    586c:	ccmp	w5, w8, #0x4, ne  // ne = any
    5870:	csel	w3, w3, wzr, ne  // ne = any
    5874:	cmp	w5, #0x29a
    5878:	ccmp	w5, w7, #0x4, ne  // ne = any
    587c:	csel	w3, w3, wzr, ne  // ne = any
    5880:	tst	w6, #0xffffffef
    5884:	csel	w3, w3, wzr, ne  // ne = any
    5888:	cbnz	w3, 58a8 <deflatePending@@ZLIB_1.2.5.1+0x90>
    588c:	cbz	x1, 5898 <deflatePending@@ZLIB_1.2.5.1+0x80>
    5890:	ldr	x0, [x4, #40]
    5894:	str	w0, [x1]
    5898:	mov	w0, #0x0                   	// #0
    589c:	cbz	x2, 58a8 <deflatePending@@ZLIB_1.2.5.1+0x90>
    58a0:	ldr	w1, [x4, #5940]
    58a4:	str	w1, [x2]
    58a8:	ret
    58ac:	mov	w0, #0xfffffffe            	// #-2
    58b0:	ret
    58b4:	nop

00000000000058b8 <deflatePrime@@ZLIB_1.2.0.8>:
    58b8:	stp	x29, x30, [sp, #-64]!
    58bc:	mov	x29, sp
    58c0:	stp	x19, x20, [sp, #16]
    58c4:	cbz	x0, 590c <deflatePrime@@ZLIB_1.2.0.8+0x54>
    58c8:	mov	w20, w1
    58cc:	ldr	x1, [x0, #64]
    58d0:	cbz	x1, 590c <deflatePrime@@ZLIB_1.2.0.8+0x54>
    58d4:	ldr	x1, [x0, #72]
    58d8:	cbz	x1, 590c <deflatePrime@@ZLIB_1.2.0.8+0x54>
    58dc:	stp	x23, x24, [sp, #48]
    58e0:	ldr	x23, [x0, #56]
    58e4:	cbz	x23, 58f4 <deflatePrime@@ZLIB_1.2.0.8+0x3c>
    58e8:	ldr	x1, [x23]
    58ec:	cmp	x0, x1
    58f0:	b.eq	5920 <deflatePrime@@ZLIB_1.2.0.8+0x68>  // b.none
    58f4:	ldp	x23, x24, [sp, #48]
    58f8:	mov	w20, #0xfffffffe            	// #-2
    58fc:	mov	w0, w20
    5900:	ldp	x19, x20, [sp, #16]
    5904:	ldp	x29, x30, [sp], #64
    5908:	ret
    590c:	mov	w20, #0xfffffffe            	// #-2
    5910:	mov	w0, w20
    5914:	ldp	x19, x20, [sp, #16]
    5918:	ldp	x29, x30, [sp], #64
    591c:	ret
    5920:	ldr	w1, [x23, #8]
    5924:	mov	w0, #0x5b                  	// #91
    5928:	mov	w4, #0x45                  	// #69
    592c:	mov	w24, w2
    5930:	cmp	w1, #0x67
    5934:	sub	w2, w1, #0x39
    5938:	ccmp	w1, w0, #0x4, ne  // ne = any
    593c:	mov	w3, #0x71                  	// #113
    5940:	cset	w0, ne  // ne = any
    5944:	cmp	w1, #0x2a
    5948:	ccmp	w1, w4, #0x4, ne  // ne = any
    594c:	stp	x21, x22, [sp, #32]
    5950:	csel	w0, w0, wzr, ne  // ne = any
    5954:	cmp	w1, #0x29a
    5958:	ccmp	w1, w3, #0x4, ne  // ne = any
    595c:	csel	w0, w0, wzr, ne  // ne = any
    5960:	tst	w2, #0xffffffef
    5964:	csel	w0, w0, wzr, ne  // ne = any
    5968:	cbnz	w0, 59e8 <deflatePrime@@ZLIB_1.2.0.8+0x130>
    596c:	ldr	x0, [x23, #32]
    5970:	ldr	x1, [x23, #5904]
    5974:	add	x0, x0, #0x2
    5978:	cmp	x1, x0
    597c:	b.cc	59f8 <deflatePrime@@ZLIB_1.2.0.8+0x140>  // b.lo, b.ul, b.last
    5980:	mov	w22, #0x10                  	// #16
    5984:	mov	w21, #0x1                   	// #1
    5988:	ldr	w1, [x23, #5940]
    598c:	mov	x0, x23
    5990:	ldrh	w2, [x23, #5936]
    5994:	sub	w19, w22, w1
    5998:	cmp	w20, w19
    599c:	csel	w19, w20, w19, le
    59a0:	add	w3, w1, w19
    59a4:	str	w3, [x23, #5940]
    59a8:	lsl	w3, w21, w19
    59ac:	sub	w3, w3, #0x1
    59b0:	and	w3, w3, w24
    59b4:	asr	w24, w24, w19
    59b8:	lsl	w3, w3, w1
    59bc:	orr	w3, w3, w2
    59c0:	strh	w3, [x23, #5936]
    59c4:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    59c8:	subs	w20, w20, w19
    59cc:	b.ne	5988 <deflatePrime@@ZLIB_1.2.0.8+0xd0>  // b.any
    59d0:	mov	w0, w20
    59d4:	ldp	x19, x20, [sp, #16]
    59d8:	ldp	x21, x22, [sp, #32]
    59dc:	ldp	x23, x24, [sp, #48]
    59e0:	ldp	x29, x30, [sp], #64
    59e4:	ret
    59e8:	mov	w20, #0xfffffffe            	// #-2
    59ec:	ldp	x21, x22, [sp, #32]
    59f0:	ldp	x23, x24, [sp, #48]
    59f4:	b	58fc <deflatePrime@@ZLIB_1.2.0.8+0x44>
    59f8:	mov	w20, #0xfffffffb            	// #-5
    59fc:	b	59d0 <deflatePrime@@ZLIB_1.2.0.8+0x118>

0000000000005a00 <deflateTune@@ZLIB_1.2.2.3>:
    5a00:	mov	x5, x0
    5a04:	cbz	x0, 5a84 <deflateTune@@ZLIB_1.2.2.3+0x84>
    5a08:	ldr	x0, [x0, #64]
    5a0c:	cbz	x0, 5a84 <deflateTune@@ZLIB_1.2.2.3+0x84>
    5a10:	ldr	x0, [x5, #72]
    5a14:	cbz	x0, 5a84 <deflateTune@@ZLIB_1.2.2.3+0x84>
    5a18:	ldr	x6, [x5, #56]
    5a1c:	cbz	x6, 5a84 <deflateTune@@ZLIB_1.2.2.3+0x84>
    5a20:	ldr	x7, [x6]
    5a24:	mov	w0, #0xfffffffe            	// #-2
    5a28:	cmp	x5, x7
    5a2c:	b.ne	5a80 <deflateTune@@ZLIB_1.2.2.3+0x80>  // b.any
    5a30:	ldr	w7, [x6, #8]
    5a34:	mov	w5, #0x45                  	// #69
    5a38:	mov	w10, #0x5b                  	// #91
    5a3c:	mov	w9, #0x29a                 	// #666
    5a40:	cmp	w7, #0x2a
    5a44:	sub	w8, w7, #0x39
    5a48:	ccmp	w7, w5, #0x4, ne  // ne = any
    5a4c:	cset	w5, ne  // ne = any
    5a50:	cmp	w7, #0x67
    5a54:	ccmp	w7, w10, #0x4, ne  // ne = any
    5a58:	csel	w5, w5, wzr, ne  // ne = any
    5a5c:	cmp	w7, #0x71
    5a60:	ccmp	w7, w9, #0x4, ne  // ne = any
    5a64:	csel	w5, w5, wzr, ne  // ne = any
    5a68:	tst	w8, #0xffffffef
    5a6c:	csel	w5, w5, wzr, ne  // ne = any
    5a70:	cbnz	w5, 5a80 <deflateTune@@ZLIB_1.2.2.3+0x80>
    5a74:	mov	w0, #0x0                   	// #0
    5a78:	stp	w4, w2, [x6, #188]
    5a7c:	stp	w1, w3, [x6, #204]
    5a80:	ret
    5a84:	mov	w0, #0xfffffffe            	// #-2
    5a88:	ret
    5a8c:	nop

0000000000005a90 <deflateBound@@ZLIB_1.2.0>:
    5a90:	add	x6, x1, #0x7
    5a94:	add	x2, x1, #0x3f
    5a98:	lsr	x3, x6, #3
    5a9c:	add	x2, x3, x2, lsr #6
    5aa0:	add	x4, x2, x1
    5aa4:	cbz	x0, 5b60 <deflateBound@@ZLIB_1.2.0+0xd0>
    5aa8:	ldr	x2, [x0, #64]
    5aac:	cbz	x2, 5b60 <deflateBound@@ZLIB_1.2.0+0xd0>
    5ab0:	ldr	x2, [x0, #72]
    5ab4:	cbz	x2, 5b60 <deflateBound@@ZLIB_1.2.0+0xd0>
    5ab8:	ldr	x5, [x0, #56]
    5abc:	cbz	x5, 5b60 <deflateBound@@ZLIB_1.2.0+0xd0>
    5ac0:	ldr	x2, [x5]
    5ac4:	cmp	x0, x2
    5ac8:	b.ne	5b60 <deflateBound@@ZLIB_1.2.0+0xd0>  // b.any
    5acc:	ldr	w2, [x5, #8]
    5ad0:	mov	w0, #0x45                  	// #69
    5ad4:	mov	w8, #0x67                  	// #103
    5ad8:	mov	w7, #0x71                  	// #113
    5adc:	cmp	w2, #0x2a
    5ae0:	sub	w3, w2, #0x39
    5ae4:	ccmp	w2, w0, #0x4, ne  // ne = any
    5ae8:	cset	w0, ne  // ne = any
    5aec:	cmp	w2, #0x5b
    5af0:	ccmp	w2, w8, #0x4, ne  // ne = any
    5af4:	csel	w0, w0, wzr, ne  // ne = any
    5af8:	cmp	w2, #0x29a
    5afc:	ccmp	w2, w7, #0x4, ne  // ne = any
    5b00:	csel	w0, w0, wzr, ne  // ne = any
    5b04:	tst	w3, #0xffffffef
    5b08:	csel	w0, w0, wzr, ne  // ne = any
    5b0c:	cbnz	w0, 5b60 <deflateBound@@ZLIB_1.2.0+0xd0>
    5b10:	ldr	w0, [x5, #48]
    5b14:	cmp	w0, #0x1
    5b18:	b.eq	5be8 <deflateBound@@ZLIB_1.2.0+0x158>  // b.none
    5b1c:	cmp	w0, #0x2
    5b20:	b.eq	5b74 <deflateBound@@ZLIB_1.2.0+0xe4>  // b.none
    5b24:	cmp	w0, #0x0
    5b28:	mov	x2, #0x6                   	// #6
    5b2c:	csel	x2, x2, xzr, ne  // ne = any
    5b30:	ldr	w0, [x5, #84]
    5b34:	cmp	w0, #0xf
    5b38:	b.ne	5b68 <deflateBound@@ZLIB_1.2.0+0xd8>  // b.any
    5b3c:	ldr	w0, [x5, #136]
    5b40:	cmp	w0, #0xf
    5b44:	b.ne	5b68 <deflateBound@@ZLIB_1.2.0+0xd8>  // b.any
    5b48:	lsr	x0, x1, #25
    5b4c:	add	x6, x6, x1, lsr #12
    5b50:	add	x0, x0, x1, lsr #14
    5b54:	add	x0, x0, x6
    5b58:	add	x0, x0, x2
    5b5c:	ret
    5b60:	add	x0, x4, #0xb
    5b64:	ret
    5b68:	add	x0, x4, #0x5
    5b6c:	add	x0, x0, x2
    5b70:	ret
    5b74:	ldr	x7, [x5, #56]
    5b78:	mov	x2, #0x12                  	// #18
    5b7c:	cbz	x7, 5b30 <deflateBound@@ZLIB_1.2.0+0xa0>
    5b80:	ldr	x0, [x7, #24]
    5b84:	cbz	x0, 5b94 <deflateBound@@ZLIB_1.2.0+0x104>
    5b88:	ldr	w3, [x7, #32]
    5b8c:	add	w3, w3, #0x2
    5b90:	add	x2, x3, x2
    5b94:	ldr	x3, [x7, #40]
    5b98:	cbz	x3, 5bb4 <deflateBound@@ZLIB_1.2.0+0x124>
    5b9c:	mvn	x0, x2
    5ba0:	add	x3, x3, x0
    5ba4:	nop
    5ba8:	add	x2, x2, #0x1
    5bac:	ldrb	w0, [x3, x2]
    5bb0:	cbnz	w0, 5ba8 <deflateBound@@ZLIB_1.2.0+0x118>
    5bb4:	ldr	x3, [x7, #56]
    5bb8:	cbz	x3, 5bd4 <deflateBound@@ZLIB_1.2.0+0x144>
    5bbc:	mvn	x0, x2
    5bc0:	add	x3, x3, x0
    5bc4:	nop
    5bc8:	add	x2, x2, #0x1
    5bcc:	ldrb	w0, [x3, x2]
    5bd0:	cbnz	w0, 5bc8 <deflateBound@@ZLIB_1.2.0+0x138>
    5bd4:	ldr	w3, [x7, #68]
    5bd8:	add	x0, x2, #0x2
    5bdc:	cmp	w3, #0x0
    5be0:	csel	x2, x0, x2, ne  // ne = any
    5be4:	b	5b30 <deflateBound@@ZLIB_1.2.0+0xa0>
    5be8:	ldr	w0, [x5, #172]
    5bec:	mov	x3, #0xa                   	// #10
    5bf0:	mov	x2, #0x6                   	// #6
    5bf4:	cmp	w0, #0x0
    5bf8:	csel	x2, x3, x2, ne  // ne = any
    5bfc:	b	5b30 <deflateBound@@ZLIB_1.2.0+0xa0>

0000000000005c00 <deflate@@Base>:
    5c00:	cbz	x0, 632c <deflate@@Base+0x72c>
    5c04:	stp	x29, x30, [sp, #-96]!
    5c08:	mov	x29, sp
    5c0c:	stp	x19, x20, [sp, #16]
    5c10:	mov	x20, x0
    5c14:	ldr	x0, [x0, #64]
    5c18:	cbz	x0, 5c54 <deflate@@Base+0x54>
    5c1c:	ldr	x0, [x20, #72]
    5c20:	cbz	x0, 5c54 <deflate@@Base+0x54>
    5c24:	ldr	x19, [x20, #56]
    5c28:	cbz	x19, 5c54 <deflate@@Base+0x54>
    5c2c:	stp	x21, x22, [sp, #32]
    5c30:	mov	w21, w1
    5c34:	mov	w0, #0xfffffffe            	// #-2
    5c38:	ldr	x1, [x19]
    5c3c:	cmp	x20, x1
    5c40:	b.eq	5c64 <deflate@@Base+0x64>  // b.none
    5c44:	ldp	x21, x22, [sp, #32]
    5c48:	ldp	x19, x20, [sp, #16]
    5c4c:	ldp	x29, x30, [sp], #96
    5c50:	ret
    5c54:	mov	w0, #0xfffffffe            	// #-2
    5c58:	ldp	x19, x20, [sp, #16]
    5c5c:	ldp	x29, x30, [sp], #96
    5c60:	ret
    5c64:	ldr	w1, [x19, #8]
    5c68:	mov	w2, #0x45                  	// #69
    5c6c:	mov	w5, #0x67                  	// #103
    5c70:	mov	w4, #0x29a                 	// #666
    5c74:	cmp	w1, #0x2a
    5c78:	sub	w3, w1, #0x39
    5c7c:	ccmp	w1, w2, #0x4, ne  // ne = any
    5c80:	stp	x23, x24, [sp, #48]
    5c84:	cset	w2, ne  // ne = any
    5c88:	cmp	w1, #0x5b
    5c8c:	ccmp	w1, w5, #0x4, ne  // ne = any
    5c90:	csel	w2, w2, wzr, ne  // ne = any
    5c94:	cmp	w1, #0x71
    5c98:	ccmp	w1, w4, #0x4, ne  // ne = any
    5c9c:	csel	w2, w2, wzr, ne  // ne = any
    5ca0:	tst	w3, #0xffffffef
    5ca4:	csel	w2, w2, wzr, ne  // ne = any
    5ca8:	cbnz	w2, 6d78 <deflate@@Base+0x1178>
    5cac:	cmp	w21, #0x5
    5cb0:	b.hi	6d78 <deflate@@Base+0x1178>  // b.pmore
    5cb4:	ldr	x0, [x20, #24]
    5cb8:	cbz	x0, 7224 <deflate@@Base+0x1624>
    5cbc:	ldr	w0, [x20, #8]
    5cc0:	cbz	w0, 5ccc <deflate@@Base+0xcc>
    5cc4:	ldr	x2, [x20]
    5cc8:	cbz	x2, 7224 <deflate@@Base+0x1624>
    5ccc:	cmp	w21, #0x4
    5cd0:	cset	w2, ne  // ne = any
    5cd4:	cmp	w1, #0x29a
    5cd8:	ccmp	w2, #0x0, #0x4, eq  // eq = none
    5cdc:	b.ne	7224 <deflate@@Base+0x1624>  // b.any
    5ce0:	ldr	w3, [x20, #32]
    5ce4:	cbz	w3, 71e4 <deflate@@Base+0x15e4>
    5ce8:	ldr	x3, [x19, #40]
    5cec:	ldr	w4, [x19, #76]
    5cf0:	str	w21, [x19, #76]
    5cf4:	cbnz	x3, 6334 <deflate@@Base+0x734>
    5cf8:	cbz	w0, 6044 <deflate@@Base+0x444>
    5cfc:	cmp	w1, #0x29a
    5d00:	b.eq	71e4 <deflate@@Base+0x15e4>  // b.none
    5d04:	cmp	w1, #0x2a
    5d08:	b.ne	5e94 <deflate@@Base+0x294>  // b.any
    5d0c:	ldr	w0, [x19, #84]
    5d10:	ldr	w1, [x19, #200]
    5d14:	lsl	w0, w0, #12
    5d18:	cmp	w1, #0x1
    5d1c:	mov	w1, #0xffff8800            	// #-30720
    5d20:	add	w0, w0, w1
    5d24:	b.le	6a80 <deflate@@Base+0xe80>
    5d28:	ldr	w3, [x19, #172]
    5d2c:	orr	w2, w0, #0x20
    5d30:	mov	w1, #0x1085                	// #4229
    5d34:	cmp	w3, #0x0
    5d38:	movk	w1, #0x842, lsl #16
    5d3c:	csel	w0, w2, w0, ne  // ne = any
    5d40:	ldr	x3, [x19, #16]
    5d44:	umull	x1, w0, w1
    5d48:	ldr	x2, [x19, #40]
    5d4c:	lsr	x1, x1, #32
    5d50:	sub	w0, w0, w1
    5d54:	add	x4, x2, #0x1
    5d58:	str	x4, [x19, #40]
    5d5c:	add	w0, w1, w0, lsr #1
    5d60:	lsr	w0, w0, #4
    5d64:	lsl	w1, w0, #5
    5d68:	sub	w0, w1, w0
    5d6c:	add	w0, w0, #0x1f
    5d70:	lsr	w1, w0, #8
    5d74:	strb	w1, [x3, x2]
    5d78:	ldr	x2, [x19, #16]
    5d7c:	ldr	x1, [x19, #40]
    5d80:	add	x3, x1, #0x1
    5d84:	str	x3, [x19, #40]
    5d88:	strb	w0, [x2, x1]
    5d8c:	ldr	w0, [x19, #172]
    5d90:	cbz	w0, 5df8 <deflate@@Base+0x1f8>
    5d94:	ldr	x0, [x20, #96]
    5d98:	ldr	x2, [x19, #16]
    5d9c:	ldr	x1, [x19, #40]
    5da0:	lsr	x0, x0, #16
    5da4:	add	x3, x1, #0x1
    5da8:	str	x3, [x19, #40]
    5dac:	lsr	w3, w0, #8
    5db0:	strb	w3, [x2, x1]
    5db4:	ldr	x2, [x19, #16]
    5db8:	ldr	x1, [x19, #40]
    5dbc:	add	x3, x1, #0x1
    5dc0:	str	x3, [x19, #40]
    5dc4:	strb	w0, [x2, x1]
    5dc8:	ldr	x2, [x19, #16]
    5dcc:	ldr	x0, [x19, #40]
    5dd0:	ldrh	w1, [x20, #96]
    5dd4:	add	x3, x0, #0x1
    5dd8:	str	x3, [x19, #40]
    5ddc:	lsr	w3, w1, #8
    5de0:	strb	w3, [x2, x0]
    5de4:	ldr	x2, [x19, #16]
    5de8:	ldr	x0, [x19, #40]
    5dec:	add	x3, x0, #0x1
    5df0:	str	x3, [x19, #40]
    5df4:	strb	w1, [x2, x0]
    5df8:	mov	w2, #0x0                   	// #0
    5dfc:	mov	x1, #0x0                   	// #0
    5e00:	mov	x0, #0x0                   	// #0
    5e04:	bl	2560 <adler32@plt>
    5e08:	ldr	x23, [x20, #56]
    5e0c:	str	x0, [x20, #96]
    5e10:	mov	w0, #0x71                  	// #113
    5e14:	str	w0, [x19, #8]
    5e18:	mov	x0, x23
    5e1c:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    5e20:	ldr	x22, [x23, #40]
    5e24:	ldr	w0, [x20, #32]
    5e28:	cmp	w0, w22
    5e2c:	csel	w22, w0, w22, ls  // ls = plast
    5e30:	cbz	w22, 5e88 <deflate@@Base+0x288>
    5e34:	ldr	x0, [x20, #24]
    5e38:	mov	w24, w22
    5e3c:	ldr	x1, [x23, #32]
    5e40:	mov	x2, x24
    5e44:	bl	23a0 <memcpy@plt>
    5e48:	ldr	x2, [x20, #24]
    5e4c:	ldr	x3, [x23, #32]
    5e50:	add	x2, x2, x24
    5e54:	ldr	x1, [x20, #40]
    5e58:	str	x2, [x20, #24]
    5e5c:	ldr	w0, [x20, #32]
    5e60:	add	x3, x3, x24
    5e64:	ldr	x2, [x23, #40]
    5e68:	str	x3, [x23, #32]
    5e6c:	add	x1, x1, x24
    5e70:	sub	w0, w0, w22
    5e74:	str	w0, [x20, #32]
    5e78:	sub	x24, x2, x24
    5e7c:	str	x1, [x20, #40]
    5e80:	str	x24, [x23, #40]
    5e84:	cbz	x24, 6c58 <deflate@@Base+0x1058>
    5e88:	ldr	x0, [x19, #40]
    5e8c:	cbnz	x0, 630c <deflate@@Base+0x70c>
    5e90:	ldr	w1, [x19, #8]
    5e94:	cmp	w1, #0x39
    5e98:	b.eq	64a0 <deflate@@Base+0x8a0>  // b.none
    5e9c:	cmp	w1, #0x45
    5ea0:	b.eq	6a4c <deflate@@Base+0xe4c>  // b.none
    5ea4:	cmp	w1, #0x49
    5ea8:	b.eq	6dac <deflate@@Base+0x11ac>  // b.none
    5eac:	cmp	w1, #0x5b
    5eb0:	b.eq	71b8 <deflate@@Base+0x15b8>  // b.none
    5eb4:	cmp	w1, #0x67
    5eb8:	b.eq	6d60 <deflate@@Base+0x1160>  // b.none
    5ebc:	ldr	w0, [x20, #8]
    5ec0:	cbz	w0, 607c <deflate@@Base+0x47c>
    5ec4:	ldr	w0, [x19, #196]
    5ec8:	cbz	w0, 6a54 <deflate@@Base+0xe54>
    5ecc:	ldr	w1, [x19, #200]
    5ed0:	cmp	w1, #0x2
    5ed4:	b.eq	6db4 <deflate@@Base+0x11b4>  // b.none
    5ed8:	cmp	w1, #0x3
    5edc:	b.eq	6098 <deflate@@Base+0x498>  // b.none
    5ee0:	adrp	x2, 28000 <gzclose_w@@ZLIB_1.2.3.5+0x15c38>
    5ee4:	add	x2, x2, #0xc68
    5ee8:	add	x2, x2, w0, sxtw #4
    5eec:	mov	w1, w21
    5ef0:	mov	x0, x19
    5ef4:	ldr	x2, [x2, #8]
    5ef8:	blr	x2
    5efc:	sub	w1, w0, #0x2
    5f00:	and	w2, w0, #0xfffffffd
    5f04:	cmp	w1, #0x1
    5f08:	b.hi	6490 <deflate@@Base+0x890>  // b.pmore
    5f0c:	mov	w0, #0x29a                 	// #666
    5f10:	str	w0, [x19, #8]
    5f14:	cbz	w2, 6210 <deflate@@Base+0x610>
    5f18:	cmp	w21, #0x4
    5f1c:	b.ne	6218 <deflate@@Base+0x618>  // b.any
    5f20:	ldr	w1, [x19, #48]
    5f24:	mov	w0, #0x1                   	// #1
    5f28:	cmp	w1, #0x0
    5f2c:	b.le	6d78 <deflate@@Base+0x1178>
    5f30:	ldr	x2, [x19, #40]
    5f34:	cmp	w1, #0x2
    5f38:	ldr	x1, [x19, #16]
    5f3c:	add	x3, x2, #0x1
    5f40:	ldr	x0, [x20, #96]
    5f44:	b.eq	6c78 <deflate@@Base+0x1078>  // b.none
    5f48:	lsr	x0, x0, #16
    5f4c:	str	x3, [x19, #40]
    5f50:	lsr	w3, w0, #8
    5f54:	strb	w3, [x1, x2]
    5f58:	ldr	x2, [x19, #16]
    5f5c:	ldr	x1, [x19, #40]
    5f60:	add	x3, x1, #0x1
    5f64:	str	x3, [x19, #40]
    5f68:	strb	w0, [x2, x1]
    5f6c:	ldr	x2, [x19, #16]
    5f70:	ldr	x0, [x19, #40]
    5f74:	ldrh	w1, [x20, #96]
    5f78:	add	x3, x0, #0x1
    5f7c:	str	x3, [x19, #40]
    5f80:	lsr	w3, w1, #8
    5f84:	strb	w3, [x2, x0]
    5f88:	ldr	x2, [x19, #16]
    5f8c:	ldr	x0, [x19, #40]
    5f90:	add	x3, x0, #0x1
    5f94:	str	x3, [x19, #40]
    5f98:	strb	w1, [x2, x0]
    5f9c:	ldr	x22, [x20, #56]
    5fa0:	mov	x0, x22
    5fa4:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    5fa8:	ldr	x21, [x22, #40]
    5fac:	ldr	w0, [x20, #32]
    5fb0:	cmp	w0, w21
    5fb4:	csel	w21, w0, w21, ls  // ls = plast
    5fb8:	cbz	w21, 6018 <deflate@@Base+0x418>
    5fbc:	ldr	x0, [x20, #24]
    5fc0:	mov	w23, w21
    5fc4:	ldr	x1, [x22, #32]
    5fc8:	mov	x2, x23
    5fcc:	bl	23a0 <memcpy@plt>
    5fd0:	ldr	x1, [x20, #24]
    5fd4:	ldr	w0, [x20, #32]
    5fd8:	ldr	x2, [x22, #32]
    5fdc:	sub	w21, w0, w21
    5fe0:	add	x0, x1, x23
    5fe4:	str	x0, [x20, #24]
    5fe8:	ldr	x1, [x20, #40]
    5fec:	add	x2, x2, x23
    5ff0:	ldr	x0, [x22, #40]
    5ff4:	str	x2, [x22, #32]
    5ff8:	add	x1, x1, x23
    5ffc:	str	w21, [x20, #32]
    6000:	str	x1, [x20, #40]
    6004:	sub	x23, x0, x23
    6008:	str	x23, [x22, #40]
    600c:	cbnz	x23, 6018 <deflate@@Base+0x418>
    6010:	ldr	x0, [x22, #16]
    6014:	str	x0, [x22, #32]
    6018:	ldr	w0, [x19, #48]
    601c:	cmp	w0, #0x0
    6020:	b.le	602c <deflate@@Base+0x42c>
    6024:	neg	w0, w0
    6028:	str	w0, [x19, #48]
    602c:	ldr	x0, [x19, #40]
    6030:	ldp	x21, x22, [sp, #32]
    6034:	cmp	x0, #0x0
    6038:	cset	w0, eq  // eq = none
    603c:	ldp	x23, x24, [sp, #48]
    6040:	b	5c48 <deflate@@Base+0x48>
    6044:	cmp	w21, #0x5
    6048:	lsl	w3, w4, #1
    604c:	lsl	w0, w21, #1
    6050:	sub	w5, w3, #0x9
    6054:	csinc	w0, w0, wzr, ne  // ne = any
    6058:	cmp	w4, #0x4
    605c:	csel	w3, w5, w3, gt
    6060:	cmp	w2, #0x0
    6064:	ccmp	w0, w3, #0x0, ne  // ne = any
    6068:	b.le	71e4 <deflate@@Base+0x15e4>
    606c:	cmp	w1, #0x29a
    6070:	b.ne	5d04 <deflate@@Base+0x104>  // b.any
    6074:	ldr	w0, [x20, #8]
    6078:	cbnz	w0, 71e4 <deflate@@Base+0x15e4>
    607c:	ldr	w0, [x19, #180]
    6080:	cbnz	w0, 5ec4 <deflate@@Base+0x2c4>
    6084:	cbz	w21, 6218 <deflate@@Base+0x618>
    6088:	ldr	w0, [x19, #8]
    608c:	cmp	w0, #0x29a
    6090:	b.ne	5ec4 <deflate@@Base+0x2c4>  // b.any
    6094:	b	5f18 <deflate@@Base+0x318>
    6098:	adrp	x23, 15000 <gzclose_w@@ZLIB_1.2.3.5+0x2c38>
    609c:	adrp	x22, 15000 <gzclose_w@@ZLIB_1.2.3.5+0x2c38>
    60a0:	add	x23, x23, #0xaa0
    60a4:	add	x22, x22, #0xca0
    60a8:	stp	x25, x26, [sp, #64]
    60ac:	str	x27, [sp, #80]
    60b0:	ldr	w0, [x19, #180]
    60b4:	mov	w24, #0x102                 	// #258
    60b8:	cmp	w0, #0x102
    60bc:	b.ls	7034 <deflate@@Base+0x1434>  // b.plast
    60c0:	ldr	w1, [x19, #172]
    60c4:	ldr	x2, [x19, #96]
    60c8:	mov	w3, w1
    60cc:	str	wzr, [x19, #160]
    60d0:	cbz	w1, 60f0 <deflate@@Base+0x4f0>
    60d4:	sub	x1, x3, #0x1
    60d8:	add	x4, x2, x1
    60dc:	ldrb	w5, [x2, x1]
    60e0:	ldrb	w1, [x4, #1]
    60e4:	cmp	w1, w5
    60e8:	b.eq	706c <deflate@@Base+0x146c>  // b.none
    60ec:	nop
    60f0:	ldr	w0, [x19, #5900]
    60f4:	ldr	x1, [x19, #5904]
    60f8:	add	w4, w0, #0x1
    60fc:	ldrb	w2, [x2, x3]
    6100:	ldr	x3, [x19, #5888]
    6104:	strh	wzr, [x1, w0, uxtw #1]
    6108:	add	x1, x19, w2, uxtb #2
    610c:	str	w4, [x19, #5900]
    6110:	strb	w2, [x3, w0, uxtw]
    6114:	ldrh	w0, [x1, #212]
    6118:	add	w0, w0, #0x1
    611c:	strh	w0, [x1, #212]
    6120:	ldr	w0, [x19, #5896]
    6124:	ldr	w1, [x19, #5900]
    6128:	sub	w0, w0, #0x1
    612c:	ldr	w3, [x19, #172]
    6130:	cmp	w0, w1
    6134:	ldr	w0, [x19, #180]
    6138:	cset	w1, eq  // eq = none
    613c:	add	w3, w3, #0x1
    6140:	sub	w0, w0, #0x1
    6144:	str	w3, [x19, #172]
    6148:	str	w0, [x19, #180]
    614c:	cbz	w1, 60b8 <deflate@@Base+0x4b8>
    6150:	ldr	x2, [x19, #152]
    6154:	mov	x1, #0x0                   	// #0
    6158:	tbnz	x2, #63, 6164 <deflate@@Base+0x564>
    615c:	ldr	x1, [x19, #96]
    6160:	add	x1, x1, w2, uxtw
    6164:	sub	x2, x3, x2
    6168:	mov	x0, x19
    616c:	mov	w3, #0x0                   	// #0
    6170:	bl	ee88 <inflateCodesUsed@@ZLIB_1.2.9+0x2450>
    6174:	ldr	x24, [x19]
    6178:	ldr	w0, [x19, #172]
    617c:	ldr	x26, [x24, #56]
    6180:	str	x0, [x19, #152]
    6184:	mov	x0, x26
    6188:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    618c:	ldr	x0, [x26, #40]
    6190:	ldr	w25, [x24, #32]
    6194:	cmp	w25, w0
    6198:	csel	w25, w25, w0, ls  // ls = plast
    619c:	cbz	w25, 61fc <deflate@@Base+0x5fc>
    61a0:	ldr	x0, [x24, #24]
    61a4:	mov	w27, w25
    61a8:	ldr	x1, [x26, #32]
    61ac:	mov	x2, x27
    61b0:	bl	23a0 <memcpy@plt>
    61b4:	ldr	x1, [x24, #24]
    61b8:	ldr	w0, [x24, #32]
    61bc:	ldr	x2, [x26, #32]
    61c0:	sub	w25, w0, w25
    61c4:	add	x0, x1, x27
    61c8:	str	x0, [x24, #24]
    61cc:	ldr	x1, [x24, #40]
    61d0:	add	x2, x2, x27
    61d4:	ldr	x0, [x26, #40]
    61d8:	str	x2, [x26, #32]
    61dc:	add	x1, x1, x27
    61e0:	str	w25, [x24, #32]
    61e4:	str	x1, [x24, #40]
    61e8:	sub	x27, x0, x27
    61ec:	str	x27, [x26, #40]
    61f0:	cbnz	x27, 61fc <deflate@@Base+0x5fc>
    61f4:	ldr	x0, [x26, #16]
    61f8:	str	x0, [x26, #32]
    61fc:	ldr	x0, [x19]
    6200:	ldr	w0, [x0, #32]
    6204:	cbnz	w0, 60b0 <deflate@@Base+0x4b0>
    6208:	ldp	x25, x26, [sp, #64]
    620c:	ldr	x27, [sp, #80]
    6210:	ldr	w0, [x20, #32]
    6214:	cbz	w0, 6c64 <deflate@@Base+0x1064>
    6218:	mov	w0, #0x0                   	// #0
    621c:	ldp	x19, x20, [sp, #16]
    6220:	ldp	x21, x22, [sp, #32]
    6224:	ldp	x23, x24, [sp, #48]
    6228:	ldp	x29, x30, [sp], #96
    622c:	ret
    6230:	mov	x0, x19
    6234:	bl	3830 <crc32_combine64@@ZLIB_1.2.3.3+0x1f0>
    6238:	ldr	w0, [x19, #180]
    623c:	cbnz	w0, 6dc4 <deflate@@Base+0x11c4>
    6240:	cbz	w21, 6ee4 <deflate@@Base+0x12e4>
    6244:	str	wzr, [x19, #5932]
    6248:	cmp	w21, #0x4
    624c:	b.eq	7244 <deflate@@Base+0x1644>  // b.none
    6250:	ldr	w0, [x19, #5900]
    6254:	cbnz	w0, 7310 <deflate@@Base+0x1710>
    6258:	ldp	x25, x26, [sp, #64]
    625c:	nop
    6260:	cmp	w21, #0x1
    6264:	b.eq	6d6c <deflate@@Base+0x116c>  // b.none
    6268:	cmp	w21, #0x5
    626c:	b.eq	628c <deflate@@Base+0x68c>  // b.none
    6270:	mov	x0, x19
    6274:	mov	w3, #0x0                   	// #0
    6278:	mov	x2, #0x0                   	// #0
    627c:	mov	x1, #0x0                   	// #0
    6280:	bl	eb00 <inflateCodesUsed@@ZLIB_1.2.9+0x20c8>
    6284:	cmp	w21, #0x3
    6288:	b.eq	74b8 <deflate@@Base+0x18b8>  // b.none
    628c:	ldr	x23, [x20, #56]
    6290:	mov	x0, x23
    6294:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    6298:	ldr	x0, [x23, #40]
    629c:	ldr	w1, [x20, #32]
    62a0:	cmp	w0, w1
    62a4:	csel	w22, w0, w1, ls  // ls = plast
    62a8:	cbz	w22, 6308 <deflate@@Base+0x708>
    62ac:	ldr	x0, [x20, #24]
    62b0:	mov	w24, w22
    62b4:	ldr	x1, [x23, #32]
    62b8:	mov	x2, x24
    62bc:	bl	23a0 <memcpy@plt>
    62c0:	ldr	x0, [x20, #24]
    62c4:	ldr	x3, [x23, #32]
    62c8:	add	x0, x0, x24
    62cc:	ldr	x2, [x20, #40]
    62d0:	str	x0, [x20, #24]
    62d4:	ldr	w1, [x20, #32]
    62d8:	add	x3, x3, x24
    62dc:	ldr	x0, [x23, #40]
    62e0:	str	x3, [x23, #32]
    62e4:	add	x2, x2, x24
    62e8:	sub	w1, w1, w22
    62ec:	str	w1, [x20, #32]
    62f0:	sub	x24, x0, x24
    62f4:	str	x2, [x20, #40]
    62f8:	str	x24, [x23, #40]
    62fc:	cbnz	x24, 6308 <deflate@@Base+0x708>
    6300:	ldr	x0, [x23, #16]
    6304:	str	x0, [x23, #32]
    6308:	cbnz	w1, 5f18 <deflate@@Base+0x318>
    630c:	mov	w1, #0xffffffff            	// #-1
    6310:	mov	w0, #0x0                   	// #0
    6314:	ldp	x21, x22, [sp, #32]
    6318:	ldp	x23, x24, [sp, #48]
    631c:	str	w1, [x19, #76]
    6320:	ldp	x19, x20, [sp, #16]
    6324:	ldp	x29, x30, [sp], #96
    6328:	ret
    632c:	mov	w0, #0xfffffffe            	// #-2
    6330:	ret
    6334:	mov	x0, x19
    6338:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    633c:	ldr	x0, [x19, #40]
    6340:	ldr	w1, [x20, #32]
    6344:	cmp	w0, w1
    6348:	csel	w22, w0, w1, ls  // ls = plast
    634c:	cbz	w22, 63a4 <deflate@@Base+0x7a4>
    6350:	ldr	x0, [x20, #24]
    6354:	mov	w23, w22
    6358:	ldr	x1, [x19, #32]
    635c:	mov	x2, x23
    6360:	bl	23a0 <memcpy@plt>
    6364:	ldr	x2, [x20, #24]
    6368:	ldr	x3, [x19, #32]
    636c:	add	x2, x2, x23
    6370:	ldr	x0, [x20, #40]
    6374:	str	x2, [x20, #24]
    6378:	ldr	w1, [x20, #32]
    637c:	add	x3, x3, x23
    6380:	ldr	x2, [x19, #40]
    6384:	str	x3, [x19, #32]
    6388:	add	x0, x0, x23
    638c:	sub	w1, w1, w22
    6390:	str	w1, [x20, #32]
    6394:	sub	x23, x2, x23
    6398:	str	x0, [x20, #40]
    639c:	str	x23, [x19, #40]
    63a0:	cbz	x23, 6c4c <deflate@@Base+0x104c>
    63a4:	cbz	w1, 630c <deflate@@Base+0x70c>
    63a8:	ldr	w1, [x19, #8]
    63ac:	b	606c <deflate@@Base+0x46c>
    63b0:	str	wzr, [x19, #5932]
    63b4:	cmp	w21, #0x4
    63b8:	b.eq	73dc <deflate@@Base+0x17dc>  // b.none
    63bc:	ldr	w0, [x19, #5900]
    63c0:	cbz	w0, 74ac <deflate@@Base+0x18ac>
    63c4:	ldr	x2, [x19, #152]
    63c8:	mov	x1, #0x0                   	// #0
    63cc:	tbnz	x2, #63, 63d8 <deflate@@Base+0x7d8>
    63d0:	ldr	x1, [x19, #96]
    63d4:	add	x1, x1, w2, uxtw
    63d8:	ldr	w4, [x19, #172]
    63dc:	mov	x0, x19
    63e0:	mov	w3, #0x0                   	// #0
    63e4:	sub	x2, x4, x2
    63e8:	bl	ee88 <inflateCodesUsed@@ZLIB_1.2.9+0x2450>
    63ec:	ldr	x22, [x19]
    63f0:	ldr	w0, [x19, #172]
    63f4:	ldr	x23, [x22, #56]
    63f8:	str	x0, [x19, #152]
    63fc:	mov	x0, x23
    6400:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    6404:	ldr	x0, [x23, #40]
    6408:	ldr	w24, [x22, #32]
    640c:	cmp	w24, w0
    6410:	csel	w24, w24, w0, ls  // ls = plast
    6414:	cbz	w24, 6474 <deflate@@Base+0x874>
    6418:	ldr	x0, [x22, #24]
    641c:	mov	w25, w24
    6420:	ldr	x1, [x23, #32]
    6424:	mov	x2, x25
    6428:	bl	23a0 <memcpy@plt>
    642c:	ldr	x1, [x22, #24]
    6430:	ldr	w0, [x22, #32]
    6434:	ldr	x2, [x23, #32]
    6438:	sub	w24, w0, w24
    643c:	add	x0, x1, x25
    6440:	str	x0, [x22, #24]
    6444:	ldr	x1, [x22, #40]
    6448:	add	x2, x2, x25
    644c:	ldr	x0, [x23, #40]
    6450:	str	x2, [x23, #32]
    6454:	add	x1, x1, x25
    6458:	str	w24, [x22, #32]
    645c:	str	x1, [x22, #40]
    6460:	sub	x25, x0, x25
    6464:	str	x25, [x23, #40]
    6468:	cbnz	x25, 6474 <deflate@@Base+0x874>
    646c:	ldr	x0, [x23, #16]
    6470:	str	x0, [x23, #32]
    6474:	ldr	x0, [x19]
    6478:	ldp	x25, x26, [sp, #64]
    647c:	ldr	w0, [x0, #32]
    6480:	ldr	x27, [sp, #80]
    6484:	cmp	w0, #0x0
    6488:	cset	w0, ne  // ne = any
    648c:	mov	w2, w0
    6490:	cbz	w2, 6210 <deflate@@Base+0x610>
    6494:	cmp	w0, #0x1
    6498:	b.eq	6260 <deflate@@Base+0x660>  // b.none
    649c:	b	5f18 <deflate@@Base+0x318>
    64a0:	mov	w2, #0x0                   	// #0
    64a4:	mov	x1, #0x0                   	// #0
    64a8:	mov	x0, #0x0                   	// #0
    64ac:	bl	2430 <crc32@plt>
    64b0:	ldr	x1, [x19, #16]
    64b4:	str	x0, [x20, #96]
    64b8:	ldr	x0, [x19, #40]
    64bc:	mov	w4, #0x1f                  	// #31
    64c0:	mov	w3, #0xffffff8b            	// #-117
    64c4:	mov	w2, #0x8                   	// #8
    64c8:	add	x5, x0, #0x1
    64cc:	str	x5, [x19, #40]
    64d0:	strb	w4, [x1, x0]
    64d4:	ldr	x1, [x19, #16]
    64d8:	ldr	x0, [x19, #40]
    64dc:	add	x4, x0, #0x1
    64e0:	str	x4, [x19, #40]
    64e4:	strb	w3, [x1, x0]
    64e8:	ldr	x1, [x19, #16]
    64ec:	ldr	x0, [x19, #40]
    64f0:	add	x3, x0, #0x1
    64f4:	str	x3, [x19, #40]
    64f8:	strb	w2, [x1, x0]
    64fc:	ldr	x1, [x19, #56]
    6500:	cbz	x1, 6eec <deflate@@Base+0x12ec>
    6504:	ldr	w0, [x1]
    6508:	mov	w2, #0x8                   	// #8
    650c:	ldr	w4, [x1, #68]
    6510:	mov	w7, #0xc                   	// #12
    6514:	cmp	w0, #0x0
    6518:	ldr	x5, [x1, #24]
    651c:	cset	w0, ne  // ne = any
    6520:	ldr	x6, [x1, #40]
    6524:	cmp	w4, #0x0
    6528:	add	w3, w0, #0x2
    652c:	mov	w4, #0x4                   	// #4
    6530:	csel	w0, w0, w3, eq  // eq = none
    6534:	cmp	x5, #0x0
    6538:	csel	w4, wzr, w4, eq  // eq = none
    653c:	csel	w2, w2, w7, eq  // eq = none
    6540:	cmp	x6, #0x0
    6544:	mov	w3, #0x2                   	// #2
    6548:	csel	w2, w2, w4, ne  // ne = any
    654c:	ldr	x5, [x19, #16]
    6550:	add	w0, w0, w2
    6554:	ldr	x4, [x19, #40]
    6558:	add	w2, w0, #0x10
    655c:	ldr	x6, [x1, #56]
    6560:	and	w1, w2, #0xff
    6564:	add	x2, x4, #0x1
    6568:	str	x2, [x19, #40]
    656c:	cmp	x6, #0x0
    6570:	csel	w0, w0, w1, eq  // eq = none
    6574:	strb	w0, [x5, x4]
    6578:	ldr	x2, [x19, #56]
    657c:	ldr	x1, [x19, #16]
    6580:	ldr	x0, [x19, #40]
    6584:	ldr	x2, [x2, #8]
    6588:	add	x4, x0, #0x1
    658c:	str	x4, [x19, #40]
    6590:	strb	w2, [x1, x0]
    6594:	ldr	x0, [x19, #56]
    6598:	ldr	x2, [x19, #16]
    659c:	ldr	x0, [x0, #8]
    65a0:	ldr	x1, [x19, #40]
    65a4:	lsr	x0, x0, #8
    65a8:	add	x4, x1, #0x1
    65ac:	str	x4, [x19, #40]
    65b0:	strb	w0, [x2, x1]
    65b4:	ldr	x0, [x19, #56]
    65b8:	ldr	x2, [x19, #16]
    65bc:	ldr	x0, [x0, #8]
    65c0:	ldr	x1, [x19, #40]
    65c4:	lsr	x0, x0, #16
    65c8:	add	x4, x1, #0x1
    65cc:	str	x4, [x19, #40]
    65d0:	strb	w0, [x2, x1]
    65d4:	ldr	x0, [x19, #56]
    65d8:	ldr	x2, [x19, #16]
    65dc:	ldr	x0, [x0, #8]
    65e0:	ldr	x1, [x19, #40]
    65e4:	lsr	x0, x0, #24
    65e8:	add	x4, x1, #0x1
    65ec:	str	x4, [x19, #40]
    65f0:	strb	w0, [x2, x1]
    65f4:	ldr	w0, [x19, #196]
    65f8:	cmp	w0, #0x9
    65fc:	b.eq	6614 <deflate@@Base+0xa14>  // b.none
    6600:	ldr	w1, [x19, #200]
    6604:	cmp	w1, #0x1
    6608:	ccmp	w0, #0x1, #0x4, le
    660c:	cset	w3, le
    6610:	lsl	w3, w3, #2
    6614:	ldr	x1, [x19, #16]
    6618:	ldr	x0, [x19, #40]
    661c:	add	x2, x0, #0x1
    6620:	str	x2, [x19, #40]
    6624:	strb	w3, [x1, x0]
    6628:	ldr	x2, [x19, #56]
    662c:	ldr	x1, [x19, #16]
    6630:	ldr	x0, [x19, #40]
    6634:	ldr	w2, [x2, #20]
    6638:	add	x3, x0, #0x1
    663c:	str	x3, [x19, #40]
    6640:	strb	w2, [x1, x0]
    6644:	ldr	x3, [x19, #56]
    6648:	ldr	x0, [x3, #24]
    664c:	cbz	x0, 668c <deflate@@Base+0xa8c>
    6650:	ldr	x1, [x19, #16]
    6654:	ldr	x0, [x19, #40]
    6658:	ldr	w2, [x3, #32]
    665c:	add	x3, x0, #0x1
    6660:	str	x3, [x19, #40]
    6664:	strb	w2, [x1, x0]
    6668:	ldr	x0, [x19, #56]
    666c:	ldr	x2, [x19, #16]
    6670:	ldr	x1, [x19, #40]
    6674:	ldr	w0, [x0, #32]
    6678:	add	x3, x1, #0x1
    667c:	str	x3, [x19, #40]
    6680:	lsr	w0, w0, #8
    6684:	strb	w0, [x2, x1]
    6688:	ldr	x3, [x19, #56]
    668c:	ldr	w0, [x3, #68]
    6690:	cbnz	w0, 6d44 <deflate@@Base+0x1144>
    6694:	mov	w0, #0x45                  	// #69
    6698:	str	w0, [x19, #8]
    669c:	str	xzr, [x19, #64]
    66a0:	ldr	x4, [x3, #24]
    66a4:	cbz	x4, 6820 <deflate@@Base+0xc20>
    66a8:	ldr	x1, [x19, #64]
    66ac:	stp	x25, x26, [sp, #64]
    66b0:	ldrh	w24, [x3, #32]
    66b4:	ldr	x26, [x19, #40]
    66b8:	sub	w22, w24, w1
    66bc:	ldr	x3, [x19, #24]
    66c0:	add	x0, x26, x22
    66c4:	sub	w24, w24, w1
    66c8:	cmp	x0, x3
    66cc:	b.ls	67e4 <deflate@@Base+0xbe4>  // b.plast
    66d0:	str	x27, [sp, #80]
    66d4:	b	6788 <deflate@@Base+0xb88>
    66d8:	ldr	x2, [x19, #64]
    66dc:	ldr	x27, [x20, #56]
    66e0:	add	x2, x2, x23
    66e4:	str	x2, [x19, #64]
    66e8:	mov	x0, x27
    66ec:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    66f0:	ldr	x23, [x27, #40]
    66f4:	ldr	w0, [x20, #32]
    66f8:	cmp	w0, w23
    66fc:	csel	w23, w0, w23, ls  // ls = plast
    6700:	cbz	w23, 6760 <deflate@@Base+0xb60>
    6704:	ldr	x0, [x20, #24]
    6708:	mov	w26, w23
    670c:	ldr	x1, [x27, #32]
    6710:	mov	x2, x26
    6714:	bl	23a0 <memcpy@plt>
    6718:	ldr	x2, [x20, #24]
    671c:	ldr	x3, [x27, #32]
    6720:	add	x2, x2, x26
    6724:	ldr	x1, [x20, #40]
    6728:	str	x2, [x20, #24]
    672c:	ldr	w0, [x20, #32]
    6730:	add	x3, x3, x26
    6734:	ldr	x2, [x27, #40]
    6738:	str	x3, [x27, #32]
    673c:	add	x1, x1, x26
    6740:	sub	w0, w0, w23
    6744:	str	w0, [x20, #32]
    6748:	sub	x26, x2, x26
    674c:	str	x1, [x20, #40]
    6750:	str	x26, [x27, #40]
    6754:	cbnz	x26, 6760 <deflate@@Base+0xb60>
    6758:	ldr	x0, [x27, #16]
    675c:	str	x0, [x27, #32]
    6760:	ldr	x26, [x19, #40]
    6764:	sub	w3, w25, w22
    6768:	add	w22, w24, w3
    676c:	mov	x24, x22
    6770:	cbnz	x26, 6d84 <deflate@@Base+0x1184>
    6774:	ldp	x0, x1, [x19, #56]
    6778:	ldr	x3, [x19, #24]
    677c:	cmp	x3, w22, uxtw
    6780:	ldr	x4, [x0, #24]
    6784:	b.cs	67e0 <deflate@@Base+0xbe0>  // b.hs, b.nlast
    6788:	ldr	x0, [x19, #16]
    678c:	sub	w23, w3, w26
    6790:	mov	x2, x23
    6794:	add	x1, x4, x1
    6798:	mov	w22, w3
    679c:	add	x0, x0, x26
    67a0:	bl	23a0 <memcpy@plt>
    67a4:	mov	w25, w26
    67a8:	ldr	x0, [x19, #56]
    67ac:	ldr	x2, [x19, #24]
    67b0:	ldr	w0, [x0, #68]
    67b4:	str	x2, [x19, #40]
    67b8:	cmp	w0, #0x0
    67bc:	ccmp	x2, x26, #0x0, ne  // ne = any
    67c0:	b.ls	66d8 <deflate@@Base+0xad8>  // b.plast
    67c4:	ldr	x0, [x20, #96]
    67c8:	sub	w2, w2, w26
    67cc:	ldr	x1, [x19, #16]
    67d0:	add	x1, x1, x26
    67d4:	bl	2430 <crc32@plt>
    67d8:	str	x0, [x20, #96]
    67dc:	b	66d8 <deflate@@Base+0xad8>
    67e0:	ldr	x27, [sp, #80]
    67e4:	mov	x2, x22
    67e8:	ldr	x0, [x19, #16]
    67ec:	add	x1, x4, x1
    67f0:	add	x0, x0, x26
    67f4:	bl	23a0 <memcpy@plt>
    67f8:	ldr	x3, [x19, #56]
    67fc:	ldr	x2, [x19, #40]
    6800:	ldr	w0, [x3, #68]
    6804:	add	x2, x22, x2
    6808:	str	x2, [x19, #40]
    680c:	cmp	w0, #0x0
    6810:	ccmp	x2, x26, #0x0, ne  // ne = any
    6814:	b.hi	7204 <deflate@@Base+0x1604>  // b.pmore
    6818:	ldp	x25, x26, [sp, #64]
    681c:	str	xzr, [x19, #64]
    6820:	mov	w0, #0x49                  	// #73
    6824:	str	w0, [x19, #8]
    6828:	ldr	x0, [x3, #40]
    682c:	cbz	x0, 6954 <deflate@@Base+0xd54>
    6830:	ldr	x1, [x19, #40]
    6834:	mov	x2, x1
    6838:	b	686c <deflate@@Base+0xc6c>
    683c:	ldr	x0, [x19, #64]
    6840:	add	x4, x2, #0x1
    6844:	ldr	x5, [x3, #40]
    6848:	add	x3, x0, #0x1
    684c:	str	x3, [x19, #64]
    6850:	ldr	x3, [x19, #16]
    6854:	ldrb	w0, [x5, x0]
    6858:	str	x4, [x19, #40]
    685c:	strb	w0, [x3, x2]
    6860:	cbz	w0, 6918 <deflate@@Base+0xd18>
    6864:	ldr	x2, [x19, #40]
    6868:	ldr	x3, [x19, #56]
    686c:	ldr	x0, [x19, #24]
    6870:	cmp	x0, x2
    6874:	b.ne	683c <deflate@@Base+0xc3c>  // b.any
    6878:	ldr	w0, [x3, #68]
    687c:	cmp	w0, #0x0
    6880:	ccmp	x1, x2, #0x2, ne  // ne = any
    6884:	b.cc	6a64 <deflate@@Base+0xe64>  // b.lo, b.ul, b.last
    6888:	ldr	x23, [x20, #56]
    688c:	mov	x0, x23
    6890:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    6894:	ldr	x22, [x23, #40]
    6898:	ldr	w0, [x20, #32]
    689c:	cmp	w0, w22
    68a0:	csel	w22, w0, w22, ls  // ls = plast
    68a4:	cbz	w22, 6904 <deflate@@Base+0xd04>
    68a8:	ldr	x0, [x20, #24]
    68ac:	mov	w24, w22
    68b0:	ldr	x1, [x23, #32]
    68b4:	mov	x2, x24
    68b8:	bl	23a0 <memcpy@plt>
    68bc:	ldr	x2, [x20, #24]
    68c0:	ldr	x3, [x23, #32]
    68c4:	add	x2, x2, x24
    68c8:	ldr	x1, [x20, #40]
    68cc:	str	x2, [x20, #24]
    68d0:	ldr	w0, [x20, #32]
    68d4:	add	x3, x3, x24
    68d8:	ldr	x2, [x23, #40]
    68dc:	str	x3, [x23, #32]
    68e0:	add	x1, x1, x24
    68e4:	sub	w0, w0, w22
    68e8:	str	w0, [x20, #32]
    68ec:	sub	x24, x2, x24
    68f0:	str	x1, [x20, #40]
    68f4:	str	x24, [x23, #40]
    68f8:	cbnz	x24, 6904 <deflate@@Base+0xd04>
    68fc:	ldr	x0, [x23, #16]
    6900:	str	x0, [x23, #32]
    6904:	ldr	x2, [x19, #40]
    6908:	mov	x1, #0x0                   	// #0
    690c:	cbnz	x2, 630c <deflate@@Base+0x70c>
    6910:	ldr	x3, [x19, #56]
    6914:	b	683c <deflate@@Base+0xc3c>
    6918:	ldr	x3, [x19, #56]
    691c:	ldr	w0, [x3, #68]
    6920:	cbz	w0, 6950 <deflate@@Base+0xd50>
    6924:	ldr	x2, [x19, #40]
    6928:	cmp	x2, x1
    692c:	b.ls	6950 <deflate@@Base+0xd50>  // b.plast
    6930:	ldr	x3, [x19, #16]
    6934:	sub	w2, w2, w1
    6938:	ldr	x0, [x20, #96]
    693c:	add	x1, x3, x1
    6940:	bl	2430 <crc32@plt>
    6944:	ldr	x3, [x19, #56]
    6948:	str	x0, [x20, #96]
    694c:	nop
    6950:	str	xzr, [x19, #64]
    6954:	mov	w0, #0x5b                  	// #91
    6958:	str	w0, [x19, #8]
    695c:	ldr	x0, [x3, #56]
    6960:	cbz	x0, 6da4 <deflate@@Base+0x11a4>
    6964:	ldr	x1, [x19, #40]
    6968:	mov	x2, x1
    696c:	b	69a0 <deflate@@Base+0xda0>
    6970:	ldr	x0, [x19, #64]
    6974:	add	x4, x2, #0x1
    6978:	ldr	x5, [x3, #56]
    697c:	add	x3, x0, #0x1
    6980:	str	x3, [x19, #64]
    6984:	ldr	x3, [x19, #16]
    6988:	ldrb	w0, [x5, x0]
    698c:	str	x4, [x19, #40]
    6990:	strb	w0, [x3, x2]
    6994:	cbz	w0, 6ab8 <deflate@@Base+0xeb8>
    6998:	ldr	x2, [x19, #40]
    699c:	ldr	x3, [x19, #56]
    69a0:	ldr	x0, [x19, #24]
    69a4:	cmp	x0, x2
    69a8:	b.ne	6970 <deflate@@Base+0xd70>  // b.any
    69ac:	ldr	w0, [x3, #68]
    69b0:	cmp	w0, #0x0
    69b4:	ccmp	x1, x2, #0x2, ne  // ne = any
    69b8:	b.cc	6a9c <deflate@@Base+0xe9c>  // b.lo, b.ul, b.last
    69bc:	ldr	x23, [x20, #56]
    69c0:	mov	x0, x23
    69c4:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    69c8:	ldr	x22, [x23, #40]
    69cc:	ldr	w0, [x20, #32]
    69d0:	cmp	w0, w22
    69d4:	csel	w22, w0, w22, ls  // ls = plast
    69d8:	cbz	w22, 6a38 <deflate@@Base+0xe38>
    69dc:	ldr	x0, [x20, #24]
    69e0:	mov	w24, w22
    69e4:	ldr	x1, [x23, #32]
    69e8:	mov	x2, x24
    69ec:	bl	23a0 <memcpy@plt>
    69f0:	ldr	x2, [x20, #24]
    69f4:	ldr	x3, [x23, #32]
    69f8:	add	x2, x2, x24
    69fc:	ldr	x1, [x20, #40]
    6a00:	str	x2, [x20, #24]
    6a04:	ldr	w0, [x20, #32]
    6a08:	add	x3, x3, x24
    6a0c:	ldr	x2, [x23, #40]
    6a10:	str	x3, [x23, #32]
    6a14:	add	x1, x1, x24
    6a18:	sub	w0, w0, w22
    6a1c:	str	w0, [x20, #32]
    6a20:	sub	x24, x2, x24
    6a24:	str	x1, [x20, #40]
    6a28:	str	x24, [x23, #40]
    6a2c:	cbnz	x24, 6a38 <deflate@@Base+0xe38>
    6a30:	ldr	x0, [x23, #16]
    6a34:	str	x0, [x23, #32]
    6a38:	ldr	x2, [x19, #40]
    6a3c:	mov	x1, #0x0                   	// #0
    6a40:	cbnz	x2, 630c <deflate@@Base+0x70c>
    6a44:	ldr	x3, [x19, #56]
    6a48:	b	6970 <deflate@@Base+0xd70>
    6a4c:	ldr	x3, [x19, #56]
    6a50:	b	66a0 <deflate@@Base+0xaa0>
    6a54:	mov	w1, w21
    6a58:	mov	x0, x19
    6a5c:	bl	3e10 <crc32_combine64@@ZLIB_1.2.3.3+0x7d0>
    6a60:	b	5efc <deflate@@Base+0x2fc>
    6a64:	ldr	x3, [x19, #16]
    6a68:	sub	w2, w2, w1
    6a6c:	ldr	x0, [x20, #96]
    6a70:	add	x1, x3, x1
    6a74:	bl	2430 <crc32@plt>
    6a78:	str	x0, [x20, #96]
    6a7c:	b	6888 <deflate@@Base+0xc88>
    6a80:	ldr	w1, [x19, #196]
    6a84:	cmp	w1, #0x1
    6a88:	b.le	5d28 <deflate@@Base+0x128>
    6a8c:	cmp	w1, #0x5
    6a90:	b.gt	71a4 <deflate@@Base+0x15a4>
    6a94:	orr	w0, w0, #0x40
    6a98:	b	5d28 <deflate@@Base+0x128>
    6a9c:	ldr	x3, [x19, #16]
    6aa0:	sub	w2, w2, w1
    6aa4:	ldr	x0, [x20, #96]
    6aa8:	add	x1, x3, x1
    6aac:	bl	2430 <crc32@plt>
    6ab0:	str	x0, [x20, #96]
    6ab4:	b	69bc <deflate@@Base+0xdbc>
    6ab8:	ldr	x0, [x19, #56]
    6abc:	ldr	w0, [x0, #68]
    6ac0:	cbz	w0, 6bb8 <deflate@@Base+0xfb8>
    6ac4:	ldr	x2, [x19, #40]
    6ac8:	cmp	x2, x1
    6acc:	b.hi	71c0 <deflate@@Base+0x15c0>  // b.pmore
    6ad0:	mov	w1, #0x67                  	// #103
    6ad4:	str	w1, [x19, #8]
    6ad8:	cbz	w0, 6bb8 <deflate@@Base+0xfb8>
    6adc:	ldr	x0, [x19, #40]
    6ae0:	ldr	x1, [x19, #24]
    6ae4:	add	x2, x0, #0x2
    6ae8:	cmp	x2, x1
    6aec:	b.ls	6b74 <deflate@@Base+0xf74>  // b.plast
    6af0:	ldr	x23, [x20, #56]
    6af4:	mov	x0, x23
    6af8:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    6afc:	ldr	x0, [x23, #40]
    6b00:	ldr	w22, [x20, #32]
    6b04:	cmp	w22, w0
    6b08:	csel	w22, w22, w0, ls  // ls = plast
    6b0c:	cbz	w22, 6b6c <deflate@@Base+0xf6c>
    6b10:	ldr	x0, [x20, #24]
    6b14:	mov	w24, w22
    6b18:	ldr	x1, [x23, #32]
    6b1c:	mov	x2, x24
    6b20:	bl	23a0 <memcpy@plt>
    6b24:	ldr	x1, [x20, #24]
    6b28:	ldr	w0, [x20, #32]
    6b2c:	ldr	x2, [x23, #32]
    6b30:	sub	w22, w0, w22
    6b34:	add	x0, x1, x24
    6b38:	str	x0, [x20, #24]
    6b3c:	ldr	x1, [x20, #40]
    6b40:	add	x2, x2, x24
    6b44:	ldr	x0, [x23, #40]
    6b48:	str	x2, [x23, #32]
    6b4c:	add	x1, x1, x24
    6b50:	str	w22, [x20, #32]
    6b54:	str	x1, [x20, #40]
    6b58:	sub	x24, x0, x24
    6b5c:	str	x24, [x23, #40]
    6b60:	cbnz	x24, 6b6c <deflate@@Base+0xf6c>
    6b64:	ldr	x0, [x23, #16]
    6b68:	str	x0, [x23, #32]
    6b6c:	ldr	x0, [x19, #40]
    6b70:	cbnz	x0, 630c <deflate@@Base+0x70c>
    6b74:	ldr	x1, [x19, #16]
    6b78:	add	x3, x0, #0x1
    6b7c:	ldr	x2, [x20, #96]
    6b80:	str	x3, [x19, #40]
    6b84:	strb	w2, [x1, x0]
    6b88:	mov	w2, #0x0                   	// #0
    6b8c:	mov	x1, #0x0                   	// #0
    6b90:	mov	x0, #0x0                   	// #0
    6b94:	ldr	x3, [x20, #96]
    6b98:	ldr	x5, [x19, #16]
    6b9c:	ldr	x4, [x19, #40]
    6ba0:	lsr	x3, x3, #8
    6ba4:	add	x6, x4, #0x1
    6ba8:	str	x6, [x19, #40]
    6bac:	strb	w3, [x5, x4]
    6bb0:	bl	2430 <crc32@plt>
    6bb4:	str	x0, [x20, #96]
    6bb8:	ldr	x23, [x20, #56]
    6bbc:	mov	w0, #0x71                  	// #113
    6bc0:	str	w0, [x19, #8]
    6bc4:	mov	x0, x23
    6bc8:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    6bcc:	ldr	x22, [x23, #40]
    6bd0:	ldr	w0, [x20, #32]
    6bd4:	cmp	w0, w22
    6bd8:	csel	w22, w0, w22, ls  // ls = plast
    6bdc:	cbnz	w22, 6bec <deflate@@Base+0xfec>
    6be0:	ldr	x0, [x19, #40]
    6be4:	cbz	x0, 5ebc <deflate@@Base+0x2bc>
    6be8:	b	630c <deflate@@Base+0x70c>
    6bec:	ldr	x0, [x20, #24]
    6bf0:	mov	w24, w22
    6bf4:	ldr	x1, [x23, #32]
    6bf8:	mov	x2, x24
    6bfc:	bl	23a0 <memcpy@plt>
    6c00:	ldr	x2, [x20, #24]
    6c04:	ldr	x3, [x23, #32]
    6c08:	add	x2, x2, x24
    6c0c:	ldr	x1, [x20, #40]
    6c10:	str	x2, [x20, #24]
    6c14:	ldr	w0, [x20, #32]
    6c18:	add	x3, x3, x24
    6c1c:	ldr	x2, [x23, #40]
    6c20:	str	x3, [x23, #32]
    6c24:	add	x1, x1, x24
    6c28:	sub	w0, w0, w22
    6c2c:	str	w0, [x20, #32]
    6c30:	sub	x24, x2, x24
    6c34:	str	x1, [x20, #40]
    6c38:	str	x24, [x23, #40]
    6c3c:	cbnz	x24, 6be0 <deflate@@Base+0xfe0>
    6c40:	ldr	x0, [x23, #16]
    6c44:	str	x0, [x23, #32]
    6c48:	b	6be0 <deflate@@Base+0xfe0>
    6c4c:	ldr	x0, [x19, #16]
    6c50:	str	x0, [x19, #32]
    6c54:	b	63a4 <deflate@@Base+0x7a4>
    6c58:	ldr	x0, [x23, #16]
    6c5c:	str	x0, [x23, #32]
    6c60:	b	5e88 <deflate@@Base+0x288>
    6c64:	mov	w1, #0xffffffff            	// #-1
    6c68:	ldp	x21, x22, [sp, #32]
    6c6c:	ldp	x23, x24, [sp, #48]
    6c70:	str	w1, [x19, #76]
    6c74:	b	5c48 <deflate@@Base+0x48>
    6c78:	str	x3, [x19, #40]
    6c7c:	strb	w0, [x1, x2]
    6c80:	ldr	x2, [x19, #16]
    6c84:	ldr	x1, [x19, #40]
    6c88:	ldr	x0, [x20, #96]
    6c8c:	add	x3, x1, #0x1
    6c90:	str	x3, [x19, #40]
    6c94:	lsr	x0, x0, #8
    6c98:	strb	w0, [x2, x1]
    6c9c:	ldr	x2, [x19, #16]
    6ca0:	ldr	x1, [x19, #40]
    6ca4:	ldr	x0, [x20, #96]
    6ca8:	add	x3, x1, #0x1
    6cac:	str	x3, [x19, #40]
    6cb0:	lsr	x0, x0, #16
    6cb4:	strb	w0, [x2, x1]
    6cb8:	ldr	x2, [x19, #16]
    6cbc:	ldr	x1, [x19, #40]
    6cc0:	ldr	x0, [x20, #96]
    6cc4:	add	x3, x1, #0x1
    6cc8:	str	x3, [x19, #40]
    6ccc:	lsr	x0, x0, #24
    6cd0:	strb	w0, [x2, x1]
    6cd4:	ldr	x1, [x19, #16]
    6cd8:	ldr	x0, [x19, #40]
    6cdc:	ldr	x2, [x20, #16]
    6ce0:	add	x3, x0, #0x1
    6ce4:	str	x3, [x19, #40]
    6ce8:	strb	w2, [x1, x0]
    6cec:	ldr	x0, [x20, #16]
    6cf0:	ldr	x2, [x19, #16]
    6cf4:	ldr	x1, [x19, #40]
    6cf8:	lsr	x0, x0, #8
    6cfc:	add	x3, x1, #0x1
    6d00:	str	x3, [x19, #40]
    6d04:	strb	w0, [x2, x1]
    6d08:	ldr	x0, [x20, #16]
    6d0c:	ldr	x2, [x19, #16]
    6d10:	ldr	x1, [x19, #40]
    6d14:	lsr	x0, x0, #16
    6d18:	add	x3, x1, #0x1
    6d1c:	str	x3, [x19, #40]
    6d20:	strb	w0, [x2, x1]
    6d24:	ldr	x0, [x20, #16]
    6d28:	ldr	x2, [x19, #16]
    6d2c:	ldr	x1, [x19, #40]
    6d30:	lsr	x0, x0, #24
    6d34:	add	x3, x1, #0x1
    6d38:	str	x3, [x19, #40]
    6d3c:	strb	w0, [x2, x1]
    6d40:	b	5f9c <deflate@@Base+0x39c>
    6d44:	ldr	w2, [x19, #40]
    6d48:	ldr	x1, [x19, #16]
    6d4c:	ldr	x0, [x20, #96]
    6d50:	bl	2430 <crc32@plt>
    6d54:	ldr	x3, [x19, #56]
    6d58:	str	x0, [x20, #96]
    6d5c:	b	6694 <deflate@@Base+0xa94>
    6d60:	ldr	x0, [x19, #56]
    6d64:	ldr	w0, [x0, #68]
    6d68:	b	6ad8 <deflate@@Base+0xed8>
    6d6c:	mov	x0, x19
    6d70:	bl	ed28 <inflateCodesUsed@@ZLIB_1.2.9+0x22f0>
    6d74:	b	628c <deflate@@Base+0x68c>
    6d78:	ldp	x21, x22, [sp, #32]
    6d7c:	ldp	x23, x24, [sp, #48]
    6d80:	b	5c48 <deflate@@Base+0x48>
    6d84:	mov	w1, #0xffffffff            	// #-1
    6d88:	mov	w0, #0x0                   	// #0
    6d8c:	ldp	x21, x22, [sp, #32]
    6d90:	ldp	x23, x24, [sp, #48]
    6d94:	ldp	x25, x26, [sp, #64]
    6d98:	ldr	x27, [sp, #80]
    6d9c:	str	w1, [x19, #76]
    6da0:	b	5c48 <deflate@@Base+0x48>
    6da4:	ldr	w0, [x3, #68]
    6da8:	b	6ad0 <deflate@@Base+0xed0>
    6dac:	ldr	x3, [x19, #56]
    6db0:	b	6828 <deflate@@Base+0xc28>
    6db4:	stp	x25, x26, [sp, #64]
    6db8:	ldr	w0, [x19, #180]
    6dbc:	nop
    6dc0:	cbz	w0, 6230 <deflate@@Base+0x630>
    6dc4:	ldr	w2, [x19, #172]
    6dc8:	ldr	x3, [x19, #96]
    6dcc:	str	wzr, [x19, #160]
    6dd0:	ldr	w0, [x19, #5900]
    6dd4:	ldr	x1, [x19, #5904]
    6dd8:	add	w4, w0, #0x1
    6ddc:	ldrb	w2, [x3, x2]
    6de0:	ldr	x3, [x19, #5888]
    6de4:	strh	wzr, [x1, w0, uxtw #1]
    6de8:	add	x1, x19, w2, uxtb #2
    6dec:	str	w4, [x19, #5900]
    6df0:	strb	w2, [x3, w0, uxtw]
    6df4:	ldrh	w0, [x1, #212]
    6df8:	add	w0, w0, #0x1
    6dfc:	strh	w0, [x1, #212]
    6e00:	ldr	w3, [x19, #172]
    6e04:	ldr	w0, [x19, #180]
    6e08:	ldr	w1, [x19, #5896]
    6e0c:	add	w3, w3, #0x1
    6e10:	ldr	w2, [x19, #5900]
    6e14:	sub	w0, w0, #0x1
    6e18:	str	w3, [x19, #172]
    6e1c:	sub	w1, w1, #0x1
    6e20:	str	w0, [x19, #180]
    6e24:	cmp	w2, w1
    6e28:	b.ne	6dc0 <deflate@@Base+0x11c0>  // b.any
    6e2c:	ldr	x2, [x19, #152]
    6e30:	mov	x1, #0x0                   	// #0
    6e34:	tbnz	x2, #63, 6e40 <deflate@@Base+0x1240>
    6e38:	ldr	x1, [x19, #96]
    6e3c:	add	x1, x1, w2, uxtw
    6e40:	sub	x2, x3, x2
    6e44:	mov	x0, x19
    6e48:	mov	w3, #0x0                   	// #0
    6e4c:	bl	ee88 <inflateCodesUsed@@ZLIB_1.2.9+0x2450>
    6e50:	ldr	x22, [x19]
    6e54:	ldr	w0, [x19, #172]
    6e58:	ldr	x24, [x22, #56]
    6e5c:	str	x0, [x19, #152]
    6e60:	mov	x0, x24
    6e64:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    6e68:	ldr	x23, [x24, #40]
    6e6c:	ldr	w0, [x22, #32]
    6e70:	cmp	w0, w23
    6e74:	csel	w23, w0, w23, ls  // ls = plast
    6e78:	cbz	w23, 6ed8 <deflate@@Base+0x12d8>
    6e7c:	ldr	x0, [x22, #24]
    6e80:	mov	w25, w23
    6e84:	ldr	x1, [x24, #32]
    6e88:	mov	x2, x25
    6e8c:	bl	23a0 <memcpy@plt>
    6e90:	ldr	x2, [x22, #24]
    6e94:	ldr	x3, [x24, #32]
    6e98:	add	x2, x2, x25
    6e9c:	ldr	x1, [x22, #40]
    6ea0:	str	x2, [x22, #24]
    6ea4:	ldr	w0, [x22, #32]
    6ea8:	add	x3, x3, x25
    6eac:	ldr	x2, [x24, #40]
    6eb0:	str	x3, [x24, #32]
    6eb4:	add	x1, x1, x25
    6eb8:	sub	w0, w0, w23
    6ebc:	str	w0, [x22, #32]
    6ec0:	sub	x25, x2, x25
    6ec4:	str	x1, [x22, #40]
    6ec8:	str	x25, [x24, #40]
    6ecc:	cbnz	x25, 6ed8 <deflate@@Base+0x12d8>
    6ed0:	ldr	x0, [x24, #16]
    6ed4:	str	x0, [x24, #32]
    6ed8:	ldr	x0, [x19]
    6edc:	ldr	w0, [x0, #32]
    6ee0:	cbnz	w0, 6db8 <deflate@@Base+0x11b8>
    6ee4:	ldp	x25, x26, [sp, #64]
    6ee8:	b	6210 <deflate@@Base+0x610>
    6eec:	ldr	x2, [x19, #16]
    6ef0:	mov	w0, #0x2                   	// #2
    6ef4:	ldr	x1, [x19, #40]
    6ef8:	add	x3, x1, #0x1
    6efc:	str	x3, [x19, #40]
    6f00:	strb	wzr, [x2, x1]
    6f04:	ldr	x2, [x19, #16]
    6f08:	ldr	x1, [x19, #40]
    6f0c:	add	x3, x1, #0x1
    6f10:	str	x3, [x19, #40]
    6f14:	strb	wzr, [x2, x1]
    6f18:	ldr	x2, [x19, #16]
    6f1c:	ldr	x1, [x19, #40]
    6f20:	add	x3, x1, #0x1
    6f24:	str	x3, [x19, #40]
    6f28:	strb	wzr, [x2, x1]
    6f2c:	ldr	x2, [x19, #16]
    6f30:	ldr	x1, [x19, #40]
    6f34:	add	x3, x1, #0x1
    6f38:	str	x3, [x19, #40]
    6f3c:	strb	wzr, [x2, x1]
    6f40:	ldr	x2, [x19, #16]
    6f44:	ldr	x1, [x19, #40]
    6f48:	add	x3, x1, #0x1
    6f4c:	str	x3, [x19, #40]
    6f50:	strb	wzr, [x2, x1]
    6f54:	ldr	w1, [x19, #196]
    6f58:	cmp	w1, #0x9
    6f5c:	b.eq	6f74 <deflate@@Base+0x1374>  // b.none
    6f60:	ldr	w0, [x19, #200]
    6f64:	cmp	w0, #0x1
    6f68:	ccmp	w1, #0x1, #0x4, le
    6f6c:	cset	w0, le
    6f70:	lsl	w0, w0, #2
    6f74:	ldr	x4, [x19, #16]
    6f78:	mov	w3, #0x3                   	// #3
    6f7c:	ldr	x1, [x19, #40]
    6f80:	mov	w2, #0x71                  	// #113
    6f84:	add	x5, x1, #0x1
    6f88:	str	x5, [x19, #40]
    6f8c:	strb	w0, [x4, x1]
    6f90:	ldr	x1, [x19, #16]
    6f94:	ldr	x0, [x19, #40]
    6f98:	add	x4, x0, #0x1
    6f9c:	str	x4, [x19, #40]
    6fa0:	strb	w3, [x1, x0]
    6fa4:	ldr	x23, [x20, #56]
    6fa8:	str	w2, [x19, #8]
    6fac:	mov	x0, x23
    6fb0:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    6fb4:	ldr	x22, [x23, #40]
    6fb8:	ldr	w0, [x20, #32]
    6fbc:	cmp	w0, w22
    6fc0:	csel	w22, w0, w22, ls  // ls = plast
    6fc4:	cbz	w22, 7024 <deflate@@Base+0x1424>
    6fc8:	ldr	x0, [x20, #24]
    6fcc:	mov	w24, w22
    6fd0:	ldr	x1, [x23, #32]
    6fd4:	mov	x2, x24
    6fd8:	bl	23a0 <memcpy@plt>
    6fdc:	ldr	x1, [x20, #24]
    6fe0:	ldr	w0, [x20, #32]
    6fe4:	ldr	x2, [x23, #32]
    6fe8:	sub	w22, w0, w22
    6fec:	add	x0, x1, x24
    6ff0:	str	x0, [x20, #24]
    6ff4:	ldr	x1, [x20, #40]
    6ff8:	add	x2, x2, x24
    6ffc:	ldr	x0, [x23, #40]
    7000:	str	x2, [x23, #32]
    7004:	add	x1, x1, x24
    7008:	str	w22, [x20, #32]
    700c:	str	x1, [x20, #40]
    7010:	sub	x24, x0, x24
    7014:	str	x24, [x23, #40]
    7018:	cbnz	x24, 7024 <deflate@@Base+0x1424>
    701c:	ldr	x0, [x23, #16]
    7020:	str	x0, [x23, #32]
    7024:	ldr	x0, [x19, #40]
    7028:	cbnz	x0, 630c <deflate@@Base+0x70c>
    702c:	ldr	w1, [x19, #8]
    7030:	b	5e9c <deflate@@Base+0x29c>
    7034:	mov	x0, x19
    7038:	bl	3830 <crc32_combine64@@ZLIB_1.2.3.3+0x1f0>
    703c:	ldr	w0, [x19, #180]
    7040:	cmp	w0, #0x102
    7044:	b.hi	60c0 <deflate@@Base+0x4c0>  // b.pmore
    7048:	cbz	w21, 6208 <deflate@@Base+0x608>
    704c:	cbz	w0, 63b0 <deflate@@Base+0x7b0>
    7050:	ldr	w1, [x19, #172]
    7054:	cmp	w0, #0x2
    7058:	str	wzr, [x19, #160]
    705c:	mov	w3, w1
    7060:	ldr	x2, [x19, #96]
    7064:	b.ls	60f0 <deflate@@Base+0x4f0>  // b.plast
    7068:	b	60d0 <deflate@@Base+0x4d0>
    706c:	ldrb	w1, [x4, #2]
    7070:	cmp	w1, w5
    7074:	b.ne	60f0 <deflate@@Base+0x4f0>  // b.any
    7078:	ldrb	w1, [x4, #3]
    707c:	cmp	w1, w5
    7080:	b.ne	60f0 <deflate@@Base+0x4f0>  // b.any
    7084:	add	x1, x3, #0x102
    7088:	add	x4, x4, #0x3
    708c:	add	x1, x2, x1
    7090:	ldrb	w6, [x4, #1]
    7094:	cmp	w6, w5
    7098:	b.ne	7518 <deflate@@Base+0x1918>  // b.any
    709c:	ldrb	w6, [x4, #2]
    70a0:	cmp	w6, w5
    70a4:	b.ne	7510 <deflate@@Base+0x1910>  // b.any
    70a8:	ldrb	w6, [x4, #3]
    70ac:	cmp	w6, w5
    70b0:	b.ne	7528 <deflate@@Base+0x1928>  // b.any
    70b4:	ldrb	w6, [x4, #4]
    70b8:	cmp	w6, w5
    70bc:	b.ne	7520 <deflate@@Base+0x1920>  // b.any
    70c0:	ldrb	w6, [x4, #5]
    70c4:	cmp	w6, w5
    70c8:	b.ne	7540 <deflate@@Base+0x1940>  // b.any
    70cc:	ldrb	w6, [x4, #6]
    70d0:	cmp	w6, w5
    70d4:	b.ne	7538 <deflate@@Base+0x1938>  // b.any
    70d8:	ldrb	w6, [x4, #7]
    70dc:	cmp	w6, w5
    70e0:	b.ne	7530 <deflate@@Base+0x1930>  // b.any
    70e4:	ldrb	w6, [x4, #8]!
    70e8:	cmp	w6, w5
    70ec:	ccmp	x1, x4, #0x0, eq  // eq = none
    70f0:	b.hi	7090 <deflate@@Base+0x1490>  // b.pmore
    70f4:	sub	x1, x1, x4
    70f8:	sub	w1, w24, w1
    70fc:	str	w1, [x19, #160]
    7100:	cmp	w1, w0
    7104:	b.ls	7198 <deflate@@Base+0x1598>  // b.plast
    7108:	mov	w1, w0
    710c:	str	w0, [x19, #160]
    7110:	sub	w0, w1, #0x3
    7114:	ldr	w3, [x19, #5900]
    7118:	and	w0, w0, #0xff
    711c:	mov	w6, #0x1                   	// #1
    7120:	ldr	x5, [x19, #5904]
    7124:	add	w1, w3, #0x1
    7128:	ldrb	w2, [x23, w0, sxtw]
    712c:	ldr	x4, [x19, #5888]
    7130:	strh	w6, [x5, w3, uxtw #1]
    7134:	add	x2, x19, x2, lsl #2
    7138:	str	w1, [x19, #5900]
    713c:	ldrb	w1, [x22]
    7140:	strb	w0, [x4, w3, uxtw]
    7144:	ldrh	w3, [x2, #1240]
    7148:	add	x0, x19, x1, lsl #2
    714c:	add	w1, w3, #0x1
    7150:	strh	w1, [x2, #1240]
    7154:	ldrh	w1, [x0, #2504]
    7158:	add	w1, w1, #0x1
    715c:	strh	w1, [x0, #2504]
    7160:	ldr	w1, [x19, #5896]
    7164:	ldr	w2, [x19, #5900]
    7168:	sub	w1, w1, #0x1
    716c:	ldr	w0, [x19, #160]
    7170:	ldr	w3, [x19, #172]
    7174:	cmp	w1, w2
    7178:	ldr	w2, [x19, #180]
    717c:	cset	w1, eq  // eq = none
    7180:	add	w3, w0, w3
    7184:	str	wzr, [x19, #160]
    7188:	sub	w0, w2, w0
    718c:	str	w3, [x19, #172]
    7190:	str	w0, [x19, #180]
    7194:	b	614c <deflate@@Base+0x54c>
    7198:	cmp	w1, #0x2
    719c:	b.hi	7110 <deflate@@Base+0x1510>  // b.pmore
    71a0:	b	60f0 <deflate@@Base+0x4f0>
    71a4:	cmp	w1, #0x6
    71a8:	orr	w1, w0, #0x80
    71ac:	orr	w0, w0, #0xc0
    71b0:	csel	w0, w0, w1, ne  // ne = any
    71b4:	b	5d28 <deflate@@Base+0x128>
    71b8:	ldr	x3, [x19, #56]
    71bc:	b	695c <deflate@@Base+0xd5c>
    71c0:	ldr	x3, [x19, #16]
    71c4:	sub	w2, w2, w1
    71c8:	ldr	x0, [x20, #96]
    71cc:	add	x1, x3, x1
    71d0:	bl	2430 <crc32@plt>
    71d4:	str	x0, [x20, #96]
    71d8:	ldr	x0, [x19, #56]
    71dc:	ldr	w0, [x0, #68]
    71e0:	b	6ad0 <deflate@@Base+0xed0>
    71e4:	adrp	x1, 28000 <gzclose_w@@ZLIB_1.2.3.5+0x15c38>
    71e8:	mov	w0, #0xfffffffb            	// #-5
    71ec:	ldp	x21, x22, [sp, #32]
    71f0:	ldr	x1, [x1, #4056]
    71f4:	ldp	x23, x24, [sp, #48]
    71f8:	ldr	x1, [x1, #56]
    71fc:	str	x1, [x20, #48]
    7200:	b	5c48 <deflate@@Base+0x48>
    7204:	ldr	x0, [x20, #96]
    7208:	sub	w2, w2, w26
    720c:	ldr	x1, [x19, #16]
    7210:	add	x1, x1, x26
    7214:	bl	2430 <crc32@plt>
    7218:	ldr	x3, [x19, #56]
    721c:	str	x0, [x20, #96]
    7220:	b	6818 <deflate@@Base+0xc18>
    7224:	adrp	x1, 28000 <gzclose_w@@ZLIB_1.2.3.5+0x15c38>
    7228:	mov	w0, #0xfffffffe            	// #-2
    722c:	ldp	x21, x22, [sp, #32]
    7230:	ldr	x1, [x1, #4056]
    7234:	ldp	x23, x24, [sp, #48]
    7238:	ldr	x1, [x1, #32]
    723c:	str	x1, [x20, #48]
    7240:	b	5c48 <deflate@@Base+0x48>
    7244:	ldr	x2, [x19, #152]
    7248:	mov	x1, #0x0                   	// #0
    724c:	tbnz	x2, #63, 7258 <deflate@@Base+0x1658>
    7250:	ldr	x1, [x19, #96]
    7254:	add	x1, x1, w2, uxtw
    7258:	ldr	w4, [x19, #172]
    725c:	mov	x0, x19
    7260:	mov	w3, #0x1                   	// #1
    7264:	sub	x2, x4, x2
    7268:	bl	ee88 <inflateCodesUsed@@ZLIB_1.2.9+0x2450>
    726c:	ldr	x21, [x19]
    7270:	ldr	w0, [x19, #172]
    7274:	ldr	x23, [x21, #56]
    7278:	str	x0, [x19, #152]
    727c:	mov	x0, x23
    7280:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    7284:	ldr	x22, [x23, #40]
    7288:	ldr	w0, [x21, #32]
    728c:	cmp	w0, w22
    7290:	csel	w22, w0, w22, ls  // ls = plast
    7294:	cbz	w22, 72f4 <deflate@@Base+0x16f4>
    7298:	ldr	x0, [x21, #24]
    729c:	mov	w24, w22
    72a0:	ldr	x1, [x23, #32]
    72a4:	mov	x2, x24
    72a8:	bl	23a0 <memcpy@plt>
    72ac:	ldr	x1, [x21, #24]
    72b0:	ldr	w0, [x21, #32]
    72b4:	ldr	x2, [x23, #32]
    72b8:	sub	w22, w0, w22
    72bc:	add	x0, x1, x24
    72c0:	str	x0, [x21, #24]
    72c4:	ldr	x1, [x21, #40]
    72c8:	add	x2, x2, x24
    72cc:	ldr	x0, [x23, #40]
    72d0:	str	x2, [x23, #32]
    72d4:	add	x1, x1, x24
    72d8:	str	w22, [x21, #32]
    72dc:	str	x1, [x21, #40]
    72e0:	sub	x24, x0, x24
    72e4:	str	x24, [x23, #40]
    72e8:	cbnz	x24, 72f4 <deflate@@Base+0x16f4>
    72ec:	ldr	x0, [x23, #16]
    72f0:	str	x0, [x23, #32]
    72f4:	ldr	x0, [x19]
    72f8:	ldr	w0, [x0, #32]
    72fc:	cbnz	w0, 74ec <deflate@@Base+0x18ec>
    7300:	mov	w0, #0x29a                 	// #666
    7304:	str	w0, [x19, #8]
    7308:	ldp	x25, x26, [sp, #64]
    730c:	b	6210 <deflate@@Base+0x610>
    7310:	ldr	x2, [x19, #152]
    7314:	mov	x1, #0x0                   	// #0
    7318:	tbnz	x2, #63, 7324 <deflate@@Base+0x1724>
    731c:	ldr	x1, [x19, #96]
    7320:	add	x1, x1, w2, uxtw
    7324:	ldr	w4, [x19, #172]
    7328:	mov	x0, x19
    732c:	mov	w3, #0x0                   	// #0
    7330:	sub	x2, x4, x2
    7334:	bl	ee88 <inflateCodesUsed@@ZLIB_1.2.9+0x2450>
    7338:	ldr	x22, [x19]
    733c:	ldr	w0, [x19, #172]
    7340:	ldr	x23, [x22, #56]
    7344:	str	x0, [x19, #152]
    7348:	mov	x0, x23
    734c:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    7350:	ldr	x0, [x23, #40]
    7354:	ldr	w24, [x22, #32]
    7358:	cmp	w24, w0
    735c:	csel	w24, w24, w0, ls  // ls = plast
    7360:	cbz	w24, 73c0 <deflate@@Base+0x17c0>
    7364:	ldr	x0, [x22, #24]
    7368:	mov	w25, w24
    736c:	ldr	x1, [x23, #32]
    7370:	mov	x2, x25
    7374:	bl	23a0 <memcpy@plt>
    7378:	ldr	x1, [x22, #24]
    737c:	ldr	w0, [x22, #32]
    7380:	ldr	x2, [x23, #32]
    7384:	sub	w24, w0, w24
    7388:	add	x0, x1, x25
    738c:	str	x0, [x22, #24]
    7390:	ldr	x1, [x22, #40]
    7394:	add	x2, x2, x25
    7398:	ldr	x0, [x23, #40]
    739c:	str	x2, [x23, #32]
    73a0:	add	x1, x1, x25
    73a4:	str	w24, [x22, #32]
    73a8:	str	x1, [x22, #40]
    73ac:	sub	x25, x0, x25
    73b0:	str	x25, [x23, #40]
    73b4:	cbnz	x25, 73c0 <deflate@@Base+0x17c0>
    73b8:	ldr	x0, [x23, #16]
    73bc:	str	x0, [x23, #32]
    73c0:	ldr	x0, [x19]
    73c4:	ldp	x25, x26, [sp, #64]
    73c8:	ldr	w0, [x0, #32]
    73cc:	cmp	w0, #0x0
    73d0:	cset	w0, ne  // ne = any
    73d4:	mov	w2, w0
    73d8:	b	6490 <deflate@@Base+0x890>
    73dc:	ldr	x2, [x19, #152]
    73e0:	mov	x1, #0x0                   	// #0
    73e4:	tbnz	x2, #63, 73f0 <deflate@@Base+0x17f0>
    73e8:	ldr	x1, [x19, #96]
    73ec:	add	x1, x1, w2, uxtw
    73f0:	ldr	w4, [x19, #172]
    73f4:	mov	x0, x19
    73f8:	mov	w3, #0x1                   	// #1
    73fc:	sub	x2, x4, x2
    7400:	bl	ee88 <inflateCodesUsed@@ZLIB_1.2.9+0x2450>
    7404:	ldr	x21, [x19]
    7408:	ldr	w0, [x19, #172]
    740c:	ldr	x22, [x21, #56]
    7410:	str	x0, [x19, #152]
    7414:	mov	x0, x22
    7418:	bl	eca0 <inflateCodesUsed@@ZLIB_1.2.9+0x2268>
    741c:	ldr	x0, [x22, #40]
    7420:	ldr	w23, [x21, #32]
    7424:	cmp	w23, w0
    7428:	csel	w23, w23, w0, ls  // ls = plast
    742c:	cbz	w23, 748c <deflate@@Base+0x188c>
    7430:	ldr	x0, [x21, #24]
    7434:	mov	w24, w23
    7438:	ldr	x1, [x22, #32]
    743c:	mov	x2, x24
    7440:	bl	23a0 <memcpy@plt>
    7444:	ldr	x1, [x21, #24]
    7448:	ldr	w0, [x21, #32]
    744c:	ldr	x2, [x22, #32]
    7450:	sub	w23, w0, w23
    7454:	add	x0, x1, x24
    7458:	str	x0, [x21, #24]
    745c:	ldr	x1, [x21, #40]
    7460:	add	x2, x2, x24
    7464:	ldr	x0, [x22, #40]
    7468:	str	x2, [x22, #32]
    746c:	add	x1, x1, x24
    7470:	str	w23, [x21, #32]
    7474:	str	x1, [x21, #40]
    7478:	sub	x24, x0, x24
    747c:	str	x24, [x22, #40]
    7480:	cbnz	x24, 748c <deflate@@Base+0x188c>
    7484:	ldr	x0, [x22, #16]
    7488:	str	x0, [x22, #32]
    748c:	ldr	x0, [x19]
    7490:	ldr	w0, [x0, #32]
    7494:	cbnz	w0, 74fc <deflate@@Base+0x18fc>
    7498:	mov	w0, #0x29a                 	// #666
    749c:	ldp	x25, x26, [sp, #64]
    74a0:	ldr	x27, [sp, #80]
    74a4:	str	w0, [x19, #8]
    74a8:	b	6210 <deflate@@Base+0x610>
    74ac:	ldp	x25, x26, [sp, #64]
    74b0:	ldr	x27, [sp, #80]
    74b4:	b	6260 <deflate@@Base+0x660>
    74b8:	ldr	w2, [x19, #132]
    74bc:	mov	w1, #0x0                   	// #0
    74c0:	ldr	x0, [x19, #120]
    74c4:	sub	w2, w2, #0x1
    74c8:	lsl	x2, x2, #1
    74cc:	strh	wzr, [x0, x2]
    74d0:	bl	24a0 <memset@plt>
    74d4:	ldr	w0, [x19, #180]
    74d8:	cbnz	w0, 628c <deflate@@Base+0x68c>
    74dc:	str	xzr, [x19, #152]
    74e0:	str	wzr, [x19, #172]
    74e4:	str	wzr, [x19, #5932]
    74e8:	b	628c <deflate@@Base+0x68c>
    74ec:	mov	w0, #0x29a                 	// #666
    74f0:	ldp	x25, x26, [sp, #64]
    74f4:	str	w0, [x19, #8]
    74f8:	b	5f20 <deflate@@Base+0x320>
    74fc:	mov	w0, #0x29a                 	// #666
    7500:	ldp	x25, x26, [sp, #64]
    7504:	ldr	x27, [sp, #80]
    7508:	str	w0, [x19, #8]
    750c:	b	5f20 <deflate@@Base+0x320>
    7510:	add	x4, x4, #0x2
    7514:	b	70f4 <deflate@@Base+0x14f4>
    7518:	add	x4, x4, #0x1
    751c:	b	70f4 <deflate@@Base+0x14f4>
    7520:	add	x4, x4, #0x4
    7524:	b	70f4 <deflate@@Base+0x14f4>
    7528:	add	x4, x4, #0x3
    752c:	b	70f4 <deflate@@Base+0x14f4>
    7530:	add	x4, x4, #0x7
    7534:	b	70f4 <deflate@@Base+0x14f4>
    7538:	add	x4, x4, #0x6
    753c:	b	70f4 <deflate@@Base+0x14f4>
    7540:	add	x4, x4, #0x5
    7544:	b	70f4 <deflate@@Base+0x14f4>

0000000000007548 <deflateParams@@Base>:
    7548:	cbz	x0, 76ec <deflateParams@@Base+0x1a4>
    754c:	stp	x29, x30, [sp, #-48]!
    7550:	mov	x29, sp
    7554:	stp	x19, x20, [sp, #16]
    7558:	mov	x19, x0
    755c:	ldr	x0, [x0, #64]
    7560:	cbz	x0, 7688 <deflateParams@@Base+0x140>
    7564:	ldr	x0, [x19, #72]
    7568:	cbz	x0, 7688 <deflateParams@@Base+0x140>
    756c:	ldr	x20, [x19, #56]
    7570:	cbz	x20, 7688 <deflateParams@@Base+0x140>
    7574:	ldr	x0, [x20]
    7578:	cmp	x19, x0
    757c:	b.ne	7688 <deflateParams@@Base+0x140>  // b.any
    7580:	stp	x21, x22, [sp, #32]
    7584:	mov	w21, w1
    7588:	ldr	w1, [x20, #8]
    758c:	mov	w0, #0x45                  	// #69
    7590:	mov	w4, #0x5b                  	// #91
    7594:	cmp	w1, #0x2a
    7598:	mov	w22, w2
    759c:	ccmp	w1, w0, #0x4, ne  // ne = any
    75a0:	sub	w2, w1, #0x39
    75a4:	cset	w0, ne  // ne = any
    75a8:	cmp	w1, #0x67
    75ac:	ccmp	w1, w4, #0x4, ne  // ne = any
    75b0:	mov	w3, #0x71                  	// #113
    75b4:	csel	w0, w0, wzr, ne  // ne = any
    75b8:	cmp	w1, #0x29a
    75bc:	ccmp	w1, w3, #0x4, ne  // ne = any
    75c0:	csel	w0, w0, wzr, ne  // ne = any
    75c4:	tst	w2, #0xffffffef
    75c8:	csel	w0, w0, wzr, ne  // ne = any
    75cc:	cbnz	w0, 7680 <deflateParams@@Base+0x138>
    75d0:	cmn	w21, #0x1
    75d4:	b.eq	7698 <deflateParams@@Base+0x150>  // b.none
    75d8:	cmp	w21, #0x9
    75dc:	cset	w0, hi  // hi = pmore
    75e0:	cmp	w0, #0x0
    75e4:	ccmp	w22, #0x4, #0x2, eq  // eq = none
    75e8:	b.hi	7680 <deflateParams@@Base+0x138>  // b.pmore
    75ec:	ldp	w0, w1, [x20, #196]
    75f0:	cmp	w1, w22
    75f4:	b.eq	76a0 <deflateParams@@Base+0x158>  // b.none
    75f8:	ldr	x1, [x20, #5944]
    75fc:	cbnz	x1, 76c8 <deflateParams@@Base+0x180>
    7600:	cmp	w21, w0
    7604:	b.eq	7668 <deflateParams@@Base+0x120>  // b.none
    7608:	cbnz	w0, 763c <deflateParams@@Base+0xf4>
    760c:	ldr	w0, [x20, #5928]
    7610:	cbz	w0, 763c <deflateParams@@Base+0xf4>
    7614:	ldr	w7, [x20, #132]
    7618:	cmp	w0, #0x1
    761c:	ldr	x0, [x20, #120]
    7620:	sub	w4, w7, #0x1
    7624:	ubfiz	x2, x4, #1, #32
    7628:	b.eq	76f4 <deflateParams@@Base+0x1ac>  // b.none
    762c:	strh	wzr, [x0, x2]
    7630:	mov	w1, #0x0                   	// #0
    7634:	bl	24a0 <memset@plt>
    7638:	str	wzr, [x20, #5928]
    763c:	sbfiz	x2, x21, #4, #32
    7640:	adrp	x0, 28000 <gzclose_w@@ZLIB_1.2.3.5+0x15c38>
    7644:	add	x0, x0, #0xc68
    7648:	str	w21, [x20, #196]
    764c:	add	x1, x0, x2
    7650:	ldrh	w2, [x0, x2]
    7654:	ldrh	w3, [x1, #2]
    7658:	ldrh	w0, [x1, #4]
    765c:	ldrh	w1, [x1, #6]
    7660:	stp	w1, w3, [x20, #188]
    7664:	stp	w2, w0, [x20, #204]
    7668:	str	w22, [x20, #200]
    766c:	mov	w0, #0x0                   	// #0
    7670:	ldp	x19, x20, [sp, #16]
    7674:	ldp	x21, x22, [sp, #32]
    7678:	ldp	x29, x30, [sp], #48
    767c:	ret
    7680:	ldp	x21, x22, [sp, #32]
    7684:	nop
    7688:	mov	w0, #0xfffffffe            	// #-2
    768c:	ldp	x19, x20, [sp, #16]
    7690:	ldp	x29, x30, [sp], #48
    7694:	ret
    7698:	mov	w21, #0x6                   	// #6
    769c:	b	75e0 <deflateParams@@Base+0x98>
    76a0:	adrp	x1, 28000 <gzclose_w@@ZLIB_1.2.3.5+0x15c38>
    76a4:	add	x1, x1, #0xc68
    76a8:	add	x2, x1, w21, sxtw #4
    76ac:	add	x1, x1, w0, sxtw #4
    76b0:	ldr	x2, [x2, #8]
    76b4:	ldr	x1, [x1, #8]
    76b8:	cmp	x2, x1
    76bc:	b.eq	7600 <deflateParams@@Base+0xb8>  // b.none
    76c0:	ldr	x1, [x20, #5944]
    76c4:	cbz	x1, 7600 <deflateParams@@Base+0xb8>
    76c8:	mov	x0, x19
    76cc:	mov	w1, #0x5                   	// #5
    76d0:	bl	2490 <deflate@plt>
    76d4:	cmn	w0, #0x2
    76d8:	b.eq	7680 <deflateParams@@Base+0x138>  // b.none
    76dc:	ldr	w0, [x19, #32]
    76e0:	cbz	w0, 79e4 <deflateParams@@Base+0x49c>
    76e4:	ldr	w0, [x20, #196]
    76e8:	b	7600 <deflateParams@@Base+0xb8>
    76ec:	mov	w0, #0xfffffffe            	// #-2
    76f0:	ret
    76f4:	ldr	w1, [x20, #80]
    76f8:	ubfiz	x3, x7, #1, #32
    76fc:	cmp	w4, #0x6
    7700:	add	x8, x0, x3
    7704:	and	w4, w1, #0xffff
    7708:	fmov	s6, w4
    770c:	b.ls	79dc <deflateParams@@Base+0x494>  // b.plast
    7710:	sub	w5, w7, #0x8
    7714:	adrp	x4, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    7718:	dup	v7.8h, v6.h[0]
    771c:	sub	x3, x3, #0x10
    7720:	lsr	w5, w5, #3
    7724:	dup	v4.4s, w1
    7728:	add	w5, w5, #0x1
    772c:	add	x6, x0, x3
    7730:	ldr	q3, [x4, #1360]
    7734:	mov	x3, #0x0                   	// #0
    7738:	mov	w4, #0x0                   	// #0
    773c:	nop
    7740:	ldr	q0, [x6, x3]
    7744:	add	w4, w4, #0x1
    7748:	cmp	w4, w5
    774c:	tbl	v0.16b, {v0.16b}, v3.16b
    7750:	uxtl	v2.4s, v0.4h
    7754:	uxtl2	v1.4s, v0.8h
    7758:	sub	v0.8h, v0.8h, v7.8h
    775c:	cmhs	v2.4s, v2.4s, v4.4s
    7760:	cmhs	v1.4s, v1.4s, v4.4s
    7764:	xtn	v5.4h, v2.4s
    7768:	xtn2	v5.8h, v1.4s
    776c:	and	v0.16b, v0.16b, v5.16b
    7770:	tbl	v0.16b, {v0.16b}, v3.16b
    7774:	str	q0, [x6, x3]
    7778:	sub	x3, x3, #0x10
    777c:	b.cc	7740 <deflateParams@@Base+0x1f8>  // b.lo, b.ul, b.last
    7780:	lsl	w3, w5, #3
    7784:	subs	w5, w7, w3
    7788:	sub	x8, x8, x3, lsl #1
    778c:	b.eq	7868 <deflateParams@@Base+0x320>  // b.none
    7790:	ldurh	w4, [x8, #-2]
    7794:	sub	w3, w4, w1
    7798:	cmp	w1, w4
    779c:	and	w3, w3, #0xffff
    77a0:	csel	w3, w3, wzr, ls  // ls = plast
    77a4:	sturh	w3, [x8, #-2]
    77a8:	cmp	w5, #0x1
    77ac:	b.eq	7868 <deflateParams@@Base+0x320>  // b.none
    77b0:	ldurh	w4, [x8, #-4]
    77b4:	sub	w3, w4, w1
    77b8:	cmp	w1, w4
    77bc:	and	w3, w3, #0xffff
    77c0:	csel	w3, w3, wzr, ls  // ls = plast
    77c4:	sturh	w3, [x8, #-4]
    77c8:	cmp	w5, #0x2
    77cc:	b.eq	7868 <deflateParams@@Base+0x320>  // b.none
    77d0:	ldurh	w4, [x8, #-6]
    77d4:	sub	w3, w4, w1
    77d8:	cmp	w1, w4
    77dc:	and	w3, w3, #0xffff
    77e0:	csel	w3, w3, wzr, ls  // ls = plast
    77e4:	sturh	w3, [x8, #-6]
    77e8:	cmp	w5, #0x3
    77ec:	b.eq	7868 <deflateParams@@Base+0x320>  // b.none
    77f0:	ldurh	w4, [x8, #-8]
    77f4:	sub	w3, w4, w1
    77f8:	cmp	w1, w4
    77fc:	and	w3, w3, #0xffff
    7800:	csel	w3, w3, wzr, ls  // ls = plast
    7804:	sturh	w3, [x8, #-8]
    7808:	cmp	w5, #0x4
    780c:	b.eq	7868 <deflateParams@@Base+0x320>  // b.none
    7810:	ldurh	w4, [x8, #-10]
    7814:	sub	w3, w4, w1
    7818:	cmp	w1, w4
    781c:	and	w3, w3, #0xffff
    7820:	csel	w3, w3, wzr, ls  // ls = plast
    7824:	sturh	w3, [x8, #-10]
    7828:	cmp	w5, #0x5
    782c:	b.eq	7868 <deflateParams@@Base+0x320>  // b.none
    7830:	ldurh	w4, [x8, #-12]
    7834:	sub	w3, w4, w1
    7838:	cmp	w1, w4
    783c:	and	w3, w3, #0xffff
    7840:	csel	w3, w3, wzr, ls  // ls = plast
    7844:	sturh	w3, [x8, #-12]
    7848:	cmp	w5, #0x6
    784c:	b.eq	7868 <deflateParams@@Base+0x320>  // b.none
    7850:	ldurh	w4, [x8, #-14]
    7854:	sub	w3, w4, w1
    7858:	cmp	w1, w4
    785c:	and	w3, w3, #0xffff
    7860:	csel	w3, w3, wzr, ls  // ls = plast
    7864:	sturh	w3, [x8, #-14]
    7868:	ldr	x6, [x20, #112]
    786c:	ubfiz	x3, x1, #1, #32
    7870:	sub	w4, w1, #0x1
    7874:	cmp	w4, #0x6
    7878:	add	x7, x6, x3
    787c:	b.ls	79d4 <deflateParams@@Base+0x48c>  // b.plast
    7880:	sub	w5, w1, #0x8
    7884:	adrp	x4, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    7888:	dup	v6.8h, v6.h[0]
    788c:	sub	x3, x3, #0x10
    7890:	lsr	w5, w5, #3
    7894:	dup	v4.4s, w1
    7898:	add	w5, w5, #0x1
    789c:	add	x6, x6, x3
    78a0:	ldr	q3, [x4, #1360]
    78a4:	mov	x3, #0x0                   	// #0
    78a8:	mov	w4, #0x0                   	// #0
    78ac:	nop
    78b0:	ldr	q0, [x6, x3]
    78b4:	add	w4, w4, #0x1
    78b8:	cmp	w5, w4
    78bc:	tbl	v0.16b, {v0.16b}, v3.16b
    78c0:	uxtl	v2.4s, v0.4h
    78c4:	uxtl2	v1.4s, v0.8h
    78c8:	sub	v0.8h, v0.8h, v6.8h
    78cc:	cmhs	v2.4s, v2.4s, v4.4s
    78d0:	cmhs	v1.4s, v1.4s, v4.4s
    78d4:	xtn	v5.4h, v2.4s
    78d8:	xtn2	v5.8h, v1.4s
    78dc:	and	v0.16b, v0.16b, v5.16b
    78e0:	tbl	v0.16b, {v0.16b}, v3.16b
    78e4:	str	q0, [x6, x3]
    78e8:	sub	x3, x3, #0x10
    78ec:	b.hi	78b0 <deflateParams@@Base+0x368>  // b.pmore
    78f0:	lsl	w4, w5, #3
    78f4:	subs	w3, w1, w4
    78f8:	sub	x7, x7, x4, lsl #1
    78fc:	b.eq	7630 <deflateParams@@Base+0xe8>  // b.none
    7900:	ldurh	w5, [x7, #-2]
    7904:	sub	w4, w5, w1
    7908:	cmp	w1, w5
    790c:	and	w4, w4, #0xffff
    7910:	csel	w4, w4, wzr, ls  // ls = plast
    7914:	sturh	w4, [x7, #-2]
    7918:	cmp	w3, #0x1
    791c:	b.eq	7630 <deflateParams@@Base+0xe8>  // b.none
    7920:	ldurh	w5, [x7, #-4]
    7924:	sub	w4, w5, w1
    7928:	cmp	w1, w5
    792c:	and	w4, w4, #0xffff
    7930:	csel	w4, w4, wzr, ls  // ls = plast
    7934:	sturh	w4, [x7, #-4]
    7938:	cmp	w3, #0x2
    793c:	b.eq	7630 <deflateParams@@Base+0xe8>  // b.none
    7940:	ldurh	w5, [x7, #-6]
    7944:	sub	w4, w5, w1
    7948:	cmp	w1, w5
    794c:	and	w4, w4, #0xffff
    7950:	csel	w4, w4, wzr, ls  // ls = plast
    7954:	sturh	w4, [x7, #-6]
    7958:	cmp	w3, #0x3
    795c:	b.eq	7630 <deflateParams@@Base+0xe8>  // b.none
    7960:	ldurh	w5, [x7, #-8]
    7964:	subs	w4, w5, w1
    7968:	and	w4, w4, #0xffff
    796c:	csel	w4, w4, wzr, cs  // cs = hs, nlast
    7970:	sturh	w4, [x7, #-8]
    7974:	cmp	w3, #0x4
    7978:	b.eq	7630 <deflateParams@@Base+0xe8>  // b.none
    797c:	ldurh	w5, [x7, #-10]
    7980:	sub	w4, w5, w1
    7984:	cmp	w1, w5
    7988:	and	w4, w4, #0xffff
    798c:	csel	w4, w4, wzr, ls  // ls = plast
    7990:	sturh	w4, [x7, #-10]
    7994:	cmp	w3, #0x5
    7998:	b.eq	7630 <deflateParams@@Base+0xe8>  // b.none
    799c:	ldurh	w5, [x7, #-12]
    79a0:	subs	w4, w5, w1
    79a4:	and	w4, w4, #0xffff
    79a8:	csel	w4, w4, wzr, cs  // cs = hs, nlast
    79ac:	sturh	w4, [x7, #-12]
    79b0:	cmp	w3, #0x6
    79b4:	b.eq	7630 <deflateParams@@Base+0xe8>  // b.none
    79b8:	ldurh	w4, [x7, #-14]
    79bc:	sub	w3, w4, w1
    79c0:	cmp	w1, w4
    79c4:	and	w1, w3, #0xffff
    79c8:	csel	w1, w1, wzr, ls  // ls = plast
    79cc:	sturh	w1, [x7, #-14]
    79d0:	b	7630 <deflateParams@@Base+0xe8>
    79d4:	mov	w3, w1
    79d8:	b	7900 <deflateParams@@Base+0x3b8>
    79dc:	mov	w5, w7
    79e0:	b	7790 <deflateParams@@Base+0x248>
    79e4:	mov	w0, #0xfffffffb            	// #-5
    79e8:	ldp	x21, x22, [sp, #32]
    79ec:	b	768c <deflateParams@@Base+0x144>

00000000000079f0 <deflateEnd@@Base>:
    79f0:	cbz	x0, 7b04 <deflateEnd@@Base+0x114>
    79f4:	stp	x29, x30, [sp, #-32]!
    79f8:	mov	x29, sp
    79fc:	stp	x19, x20, [sp, #16]
    7a00:	mov	x19, x0
    7a04:	ldr	x0, [x0, #64]
    7a08:	cbz	x0, 7a38 <deflateEnd@@Base+0x48>
    7a0c:	ldr	x3, [x19, #72]
    7a10:	cbz	x3, 7a38 <deflateEnd@@Base+0x48>
    7a14:	ldr	x2, [x19, #56]
    7a18:	cbz	x2, 7a38 <deflateEnd@@Base+0x48>
    7a1c:	ldr	x1, [x2]
    7a20:	mov	w0, #0xfffffffe            	// #-2
    7a24:	cmp	x19, x1
    7a28:	b.eq	7a48 <deflateEnd@@Base+0x58>  // b.none
    7a2c:	ldp	x19, x20, [sp, #16]
    7a30:	ldp	x29, x30, [sp], #32
    7a34:	ret
    7a38:	mov	w0, #0xfffffffe            	// #-2
    7a3c:	ldp	x19, x20, [sp, #16]
    7a40:	ldp	x29, x30, [sp], #32
    7a44:	ret
    7a48:	ldr	w20, [x2, #8]
    7a4c:	mov	w1, #0x45                  	// #69
    7a50:	mov	w6, #0x5b                  	// #91
    7a54:	mov	w5, #0x71                  	// #113
    7a58:	cmp	w20, #0x2a
    7a5c:	sub	w4, w20, #0x39
    7a60:	ccmp	w20, w1, #0x4, ne  // ne = any
    7a64:	cset	w1, ne  // ne = any
    7a68:	cmp	w20, #0x67
    7a6c:	ccmp	w20, w6, #0x4, ne  // ne = any
    7a70:	csel	w1, w1, wzr, ne  // ne = any
    7a74:	cmp	w20, #0x29a
    7a78:	ccmp	w20, w5, #0x4, ne  // ne = any
    7a7c:	csel	w1, w1, wzr, ne  // ne = any
    7a80:	tst	w4, #0xffffffef
    7a84:	csel	w1, w1, wzr, ne  // ne = any
    7a88:	cbnz	w1, 7a2c <deflateEnd@@Base+0x3c>
    7a8c:	ldr	x1, [x2, #16]
    7a90:	ldr	x0, [x19, #80]
    7a94:	cbz	x1, 7aa4 <deflateEnd@@Base+0xb4>
    7a98:	blr	x3
    7a9c:	ldp	x3, x0, [x19, #72]
    7aa0:	ldr	x2, [x19, #56]
    7aa4:	ldr	x1, [x2, #120]
    7aa8:	cbz	x1, 7ab8 <deflateEnd@@Base+0xc8>
    7aac:	blr	x3
    7ab0:	ldp	x3, x0, [x19, #72]
    7ab4:	ldr	x2, [x19, #56]
    7ab8:	ldr	x1, [x2, #112]
    7abc:	cbz	x1, 7acc <deflateEnd@@Base+0xdc>
    7ac0:	blr	x3
    7ac4:	ldp	x3, x0, [x19, #72]
    7ac8:	ldr	x2, [x19, #56]
    7acc:	ldr	x1, [x2, #96]
    7ad0:	cbz	x1, 7ae0 <deflateEnd@@Base+0xf0>
    7ad4:	blr	x3
    7ad8:	ldp	x3, x0, [x19, #72]
    7adc:	ldr	x2, [x19, #56]
    7ae0:	mov	x1, x2
    7ae4:	blr	x3
    7ae8:	str	xzr, [x19, #56]
    7aec:	cmp	w20, #0x71
    7af0:	mov	w0, #0xfffffffd            	// #-3
    7af4:	csel	w0, w0, wzr, eq  // eq = none
    7af8:	ldp	x19, x20, [sp, #16]
    7afc:	ldp	x29, x30, [sp], #32
    7b00:	ret
    7b04:	mov	w0, #0xfffffffe            	// #-2
    7b08:	ret
    7b0c:	nop

0000000000007b10 <deflateInit2_@@Base>:
    7b10:	cbz	x6, 7da8 <deflateInit2_@@Base+0x298>
    7b14:	stp	x29, x30, [sp, #-80]!
    7b18:	mov	x29, sp
    7b1c:	stp	x19, x20, [sp, #16]
    7b20:	mov	x20, x0
    7b24:	ldrb	w0, [x6]
    7b28:	cmp	w0, #0x31
    7b2c:	cset	w0, ne  // ne = any
    7b30:	cmp	w7, #0x70
    7b34:	csinc	w0, w0, wzr, eq  // eq = none
    7b38:	cbnz	w0, 7d6c <deflateInit2_@@Base+0x25c>
    7b3c:	cbz	x20, 7d5c <deflateInit2_@@Base+0x24c>
    7b40:	stp	x21, x22, [sp, #32]
    7b44:	mov	w22, w4
    7b48:	ldr	x4, [x20, #64]
    7b4c:	stp	x23, x24, [sp, #48]
    7b50:	mov	w24, w1
    7b54:	stp	x25, x26, [sp, #64]
    7b58:	mov	w23, w5
    7b5c:	str	xzr, [x20, #48]
    7b60:	cbz	x4, 7d38 <deflateInit2_@@Base+0x228>
    7b64:	ldr	x1, [x20, #72]
    7b68:	cbz	x1, 7d28 <deflateInit2_@@Base+0x218>
    7b6c:	cmn	w24, #0x1
    7b70:	mov	w1, #0x6                   	// #6
    7b74:	csel	w24, w24, w1, ne  // ne = any
    7b78:	tbnz	w3, #31, 7d18 <deflateInit2_@@Base+0x208>
    7b7c:	cmp	w3, #0xf
    7b80:	mov	w26, #0x1                   	// #1
    7b84:	b.gt	7d08 <deflateInit2_@@Base+0x1f8>
    7b88:	sub	w1, w22, #0x1
    7b8c:	cmp	w1, #0x8
    7b90:	b.hi	7d50 <deflateInit2_@@Base+0x240>  // b.pmore
    7b94:	sub	w1, w3, #0x8
    7b98:	cmp	w1, #0x7
    7b9c:	ccmp	w2, #0x8, #0x0, ls  // ls = plast
    7ba0:	b.ne	7d50 <deflateInit2_@@Base+0x240>  // b.any
    7ba4:	cmp	w24, #0x9
    7ba8:	ccmp	w23, #0x4, #0x2, ls  // ls = plast
    7bac:	b.hi	7d50 <deflateInit2_@@Base+0x240>  // b.pmore
    7bb0:	cmp	w0, #0x0
    7bb4:	ccmp	w3, #0x8, #0x0, ne  // ne = any
    7bb8:	b.eq	7d50 <deflateInit2_@@Base+0x240>  // b.none
    7bbc:	ldr	x0, [x20, #80]
    7bc0:	cmp	w3, #0x8
    7bc4:	mov	w21, #0x9                   	// #9
    7bc8:	mov	w2, #0x1740                	// #5952
    7bcc:	csel	w21, w3, w21, ne  // ne = any
    7bd0:	mov	w1, #0x1                   	// #1
    7bd4:	blr	x4
    7bd8:	mov	x19, x0
    7bdc:	cbz	x0, 7db0 <deflateInit2_@@Base+0x2a0>
    7be0:	add	w3, w22, #0x9
    7be4:	mov	w0, #0xaaab                	// #43691
    7be8:	movk	w0, #0xaaaa, lsl #16
    7bec:	add	w4, w22, #0x7
    7bf0:	mov	w25, #0x1                   	// #1
    7bf4:	str	x19, [x20, #56]
    7bf8:	umull	x3, w3, w0
    7bfc:	lsl	w5, w25, w4
    7c00:	ldr	x6, [x20, #64]
    7c04:	sub	w7, w5, #0x1
    7c08:	ldr	x0, [x20, #80]
    7c0c:	lsl	w1, w25, w21
    7c10:	lsr	x3, x3, #33
    7c14:	sub	w8, w1, #0x1
    7c18:	mov	w2, #0x2a                  	// #42
    7c1c:	str	x20, [x19]
    7c20:	str	w2, [x19, #8]
    7c24:	mov	w2, #0x2                   	// #2
    7c28:	str	w26, [x19, #48]
    7c2c:	add	w22, w22, #0x6
    7c30:	str	xzr, [x19, #56]
    7c34:	stp	w1, w21, [x19, #80]
    7c38:	str	w8, [x19, #88]
    7c3c:	stp	w5, w4, [x19, #132]
    7c40:	stp	w7, w3, [x19, #140]
    7c44:	blr	x6
    7c48:	ldr	w1, [x19, #80]
    7c4c:	mov	w2, #0x2                   	// #2
    7c50:	ldr	x3, [x20, #64]
    7c54:	str	x0, [x19, #96]
    7c58:	ldr	x0, [x20, #80]
    7c5c:	blr	x3
    7c60:	ldr	w1, [x19, #132]
    7c64:	mov	w2, #0x2                   	// #2
    7c68:	ldr	x3, [x20, #64]
    7c6c:	str	x0, [x19, #112]
    7c70:	ldr	x0, [x20, #80]
    7c74:	blr	x3
    7c78:	ldr	x3, [x20, #64]
    7c7c:	str	x0, [x19, #120]
    7c80:	ldr	x0, [x20, #80]
    7c84:	lsl	w1, w25, w22
    7c88:	str	w1, [x19, #5896]
    7c8c:	mov	w2, #0x4                   	// #4
    7c90:	str	xzr, [x19, #5944]
    7c94:	blr	x3
    7c98:	ldr	w3, [x19, #5896]
    7c9c:	ldr	x1, [x19, #96]
    7ca0:	ubfiz	x2, x3, #2, #32
    7ca4:	stp	x0, x2, [x19, #16]
    7ca8:	mov	w2, w3
    7cac:	cbz	x1, 7d74 <deflateInit2_@@Base+0x264>
    7cb0:	ldr	x1, [x19, #112]
    7cb4:	cbz	x1, 7d74 <deflateInit2_@@Base+0x264>
    7cb8:	ldr	x1, [x19, #120]
    7cbc:	cmp	x1, #0x0
    7cc0:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    7cc4:	b.eq	7d74 <deflateInit2_@@Base+0x264>  // b.none
    7cc8:	and	x3, x3, #0xfffffffe
    7ccc:	add	x2, x2, x2, lsl #1
    7cd0:	add	x3, x0, x3
    7cd4:	add	x2, x0, x2
    7cd8:	mov	w0, #0x8                   	// #8
    7cdc:	strb	w0, [x19, #72]
    7ce0:	mov	x0, x20
    7ce4:	ldp	x21, x22, [sp, #32]
    7ce8:	ldp	x25, x26, [sp, #64]
    7cec:	stp	w24, w23, [x19, #196]
    7cf0:	str	x2, [x19, #5888]
    7cf4:	str	x3, [x19, #5904]
    7cf8:	ldp	x19, x20, [sp, #16]
    7cfc:	ldp	x23, x24, [sp, #48]
    7d00:	ldp	x29, x30, [sp], #80
    7d04:	b	2480 <deflateReset@plt>
    7d08:	mov	w0, w26
    7d0c:	sub	w3, w3, #0x10
    7d10:	mov	w26, #0x2                   	// #2
    7d14:	b	7b88 <deflateInit2_@@Base+0x78>
    7d18:	neg	w3, w3
    7d1c:	mov	w0, #0x1                   	// #1
    7d20:	mov	w26, #0x0                   	// #0
    7d24:	b	7b88 <deflateInit2_@@Base+0x78>
    7d28:	adrp	x1, f000 <inflateCodesUsed@@ZLIB_1.2.9+0x25c8>
    7d2c:	add	x1, x1, #0x6f8
    7d30:	str	x1, [x20, #72]
    7d34:	b	7b6c <deflateInit2_@@Base+0x5c>
    7d38:	adrp	x1, f000 <inflateCodesUsed@@ZLIB_1.2.9+0x25c8>
    7d3c:	add	x1, x1, #0x6f0
    7d40:	mov	x4, x1
    7d44:	str	x1, [x20, #64]
    7d48:	str	xzr, [x20, #80]
    7d4c:	b	7b64 <deflateInit2_@@Base+0x54>
    7d50:	ldp	x21, x22, [sp, #32]
    7d54:	ldp	x23, x24, [sp, #48]
    7d58:	ldp	x25, x26, [sp, #64]
    7d5c:	mov	w0, #0xfffffffe            	// #-2
    7d60:	ldp	x19, x20, [sp, #16]
    7d64:	ldp	x29, x30, [sp], #80
    7d68:	ret
    7d6c:	mov	w0, #0xfffffffa            	// #-6
    7d70:	b	7d60 <deflateInit2_@@Base+0x250>
    7d74:	adrp	x1, 28000 <gzclose_w@@ZLIB_1.2.3.5+0x15c38>
    7d78:	mov	w0, #0x29a                 	// #666
    7d7c:	str	w0, [x19, #8]
    7d80:	mov	x0, x20
    7d84:	ldr	x1, [x1, #4056]
    7d88:	ldr	x1, [x1, #48]
    7d8c:	str	x1, [x20, #48]
    7d90:	bl	2590 <deflateEnd@plt>
    7d94:	mov	w0, #0xfffffffc            	// #-4
    7d98:	ldp	x21, x22, [sp, #32]
    7d9c:	ldp	x23, x24, [sp, #48]
    7da0:	ldp	x25, x26, [sp, #64]
    7da4:	b	7d60 <deflateInit2_@@Base+0x250>
    7da8:	mov	w0, #0xfffffffa            	// #-6
    7dac:	ret
    7db0:	mov	w0, #0xfffffffc            	// #-4
    7db4:	ldp	x21, x22, [sp, #32]
    7db8:	ldp	x23, x24, [sp, #48]
    7dbc:	ldp	x25, x26, [sp, #64]
    7dc0:	b	7d60 <deflateInit2_@@Base+0x250>
    7dc4:	nop

0000000000007dc8 <deflateInit_@@Base>:
    7dc8:	mov	x6, x2
    7dcc:	mov	w7, w3
    7dd0:	mov	w4, #0x8                   	// #8
    7dd4:	mov	w5, #0x0                   	// #0
    7dd8:	mov	w2, w4
    7ddc:	mov	w3, #0xf                   	// #15
    7de0:	b	24d0 <deflateInit2_@plt>
    7de4:	nop

0000000000007de8 <deflateCopy@@Base>:
    7de8:	cbz	x1, 7e44 <deflateCopy@@Base+0x5c>
    7dec:	ldr	x4, [x1, #64]
    7df0:	mov	x3, x1
    7df4:	cbz	x4, 7e44 <deflateCopy@@Base+0x5c>
    7df8:	stp	x29, x30, [sp, #-48]!
    7dfc:	mov	x29, sp
    7e00:	stp	x21, x22, [sp, #32]
    7e04:	mov	x21, x0
    7e08:	ldr	x0, [x1, #72]
    7e0c:	cbz	x0, 7e34 <deflateCopy@@Base+0x4c>
    7e10:	ldr	x22, [x1, #56]
    7e14:	cbz	x22, 7e34 <deflateCopy@@Base+0x4c>
    7e18:	ldr	x1, [x22]
    7e1c:	mov	w0, #0xfffffffe            	// #-2
    7e20:	cmp	x3, x1
    7e24:	b.eq	7e4c <deflateCopy@@Base+0x64>  // b.none
    7e28:	ldp	x21, x22, [sp, #32]
    7e2c:	ldp	x29, x30, [sp], #48
    7e30:	ret
    7e34:	mov	w0, #0xfffffffe            	// #-2
    7e38:	ldp	x21, x22, [sp, #32]
    7e3c:	ldp	x29, x30, [sp], #48
    7e40:	ret
    7e44:	mov	w0, #0xfffffffe            	// #-2
    7e48:	ret
    7e4c:	ldr	w2, [x22, #8]
    7e50:	mov	w1, #0x45                  	// #69
    7e54:	mov	w7, #0x5b                  	// #91
    7e58:	mov	w6, #0x71                  	// #113
    7e5c:	cmp	w2, #0x2a
    7e60:	sub	w5, w2, #0x39
    7e64:	ccmp	w2, w1, #0x4, ne  // ne = any
    7e68:	stp	x19, x20, [sp, #16]
    7e6c:	cset	w1, ne  // ne = any
    7e70:	cmp	w2, #0x67
    7e74:	ccmp	w2, w7, #0x4, ne  // ne = any
    7e78:	csel	w1, w1, wzr, ne  // ne = any
    7e7c:	cmp	w2, #0x29a
    7e80:	ccmp	w2, w6, #0x4, ne  // ne = any
    7e84:	csel	w1, w1, wzr, ne  // ne = any
    7e88:	tst	w5, #0xffffffef
    7e8c:	csel	w1, w1, wzr, ne  // ne = any
    7e90:	cbnz	w1, 802c <deflateCopy@@Base+0x244>
    7e94:	cbz	x21, 802c <deflateCopy@@Base+0x244>
    7e98:	ldp	x0, x1, [x3]
    7e9c:	stp	x0, x1, [x21]
    7ea0:	mov	w2, #0x1740                	// #5952
    7ea4:	ldp	x0, x1, [x3, #16]
    7ea8:	stp	x0, x1, [x21, #16]
    7eac:	ldp	x6, x7, [x3, #32]
    7eb0:	stp	x6, x7, [x21, #32]
    7eb4:	mov	w1, #0x1                   	// #1
    7eb8:	ldp	x6, x7, [x3, #48]
    7ebc:	stp	x6, x7, [x21, #48]
    7ec0:	ldp	x6, x7, [x3, #64]
    7ec4:	stp	x6, x7, [x21, #64]
    7ec8:	ldp	x6, x7, [x3, #80]
    7ecc:	stp	x6, x7, [x21, #80]
    7ed0:	ldp	x6, x7, [x3, #96]
    7ed4:	stp	x6, x7, [x21, #96]
    7ed8:	ldr	x0, [x21, #80]
    7edc:	blr	x4
    7ee0:	mov	x19, x0
    7ee4:	cbz	x0, 8048 <deflateCopy@@Base+0x260>
    7ee8:	str	x0, [x21, #56]
    7eec:	mov	x1, x22
    7ef0:	mov	x2, #0x1740                	// #5952
    7ef4:	bl	23a0 <memcpy@plt>
    7ef8:	ldr	w1, [x19, #80]
    7efc:	mov	w2, #0x2                   	// #2
    7f00:	ldr	x3, [x21, #64]
    7f04:	ldr	x0, [x21, #80]
    7f08:	str	x21, [x19]
    7f0c:	blr	x3
    7f10:	ldr	w1, [x19, #80]
    7f14:	mov	w2, #0x2                   	// #2
    7f18:	ldr	x3, [x21, #64]
    7f1c:	str	x0, [x19, #96]
    7f20:	ldr	x0, [x21, #80]
    7f24:	blr	x3
    7f28:	ldr	w1, [x19, #132]
    7f2c:	mov	w2, #0x2                   	// #2
    7f30:	ldr	x3, [x21, #64]
    7f34:	str	x0, [x19, #112]
    7f38:	ldr	x0, [x21, #80]
    7f3c:	blr	x3
    7f40:	ldr	w1, [x19, #5896]
    7f44:	mov	w2, #0x4                   	// #4
    7f48:	ldr	x3, [x21, #64]
    7f4c:	str	x0, [x19, #120]
    7f50:	ldr	x0, [x21, #80]
    7f54:	blr	x3
    7f58:	mov	x20, x0
    7f5c:	ldr	x0, [x19, #96]
    7f60:	str	x20, [x19, #16]
    7f64:	cbz	x0, 8034 <deflateCopy@@Base+0x24c>
    7f68:	ldr	x1, [x19, #112]
    7f6c:	cbz	x1, 8034 <deflateCopy@@Base+0x24c>
    7f70:	ldr	x1, [x19, #120]
    7f74:	cmp	x1, #0x0
    7f78:	ccmp	x20, #0x0, #0x4, ne  // ne = any
    7f7c:	b.eq	8034 <deflateCopy@@Base+0x24c>  // b.none
    7f80:	ldr	x1, [x22, #96]
    7f84:	ldr	w2, [x19, #80]
    7f88:	lsl	w2, w2, #1
    7f8c:	bl	23a0 <memcpy@plt>
    7f90:	ldr	x1, [x22, #112]
    7f94:	ldr	x0, [x19, #112]
    7f98:	ldr	w2, [x19, #80]
    7f9c:	lsl	x2, x2, #1
    7fa0:	bl	23a0 <memcpy@plt>
    7fa4:	ldr	x1, [x22, #120]
    7fa8:	ldr	x0, [x19, #120]
    7fac:	ldr	w2, [x19, #132]
    7fb0:	lsl	x2, x2, #1
    7fb4:	bl	23a0 <memcpy@plt>
    7fb8:	ldr	w2, [x19, #24]
    7fbc:	ldr	x1, [x22, #16]
    7fc0:	ldr	x0, [x19, #16]
    7fc4:	bl	23a0 <memcpy@plt>
    7fc8:	ldr	w1, [x19, #5896]
    7fcc:	ldr	x4, [x22, #16]
    7fd0:	and	x0, x1, #0xfffffffe
    7fd4:	ldr	x3, [x22, #32]
    7fd8:	ubfiz	x5, x1, #1, #32
    7fdc:	ldr	x2, [x19, #16]
    7fe0:	sub	x3, x3, x4
    7fe4:	add	x1, x5, w1, uxtw
    7fe8:	add	x20, x20, x0
    7fec:	add	x5, x19, #0xd4
    7ff0:	add	x1, x2, x1
    7ff4:	add	x4, x19, #0x9c8
    7ff8:	add	x2, x2, x3
    7ffc:	add	x3, x19, #0xabc
    8000:	str	x2, [x19, #32]
    8004:	str	x5, [x19, #2904]
    8008:	mov	w0, #0x0                   	// #0
    800c:	str	x4, [x19, #2928]
    8010:	str	x3, [x19, #2952]
    8014:	str	x1, [x19, #5888]
    8018:	str	x20, [x19, #5904]
    801c:	ldp	x19, x20, [sp, #16]
    8020:	ldp	x21, x22, [sp, #32]
    8024:	ldp	x29, x30, [sp], #48
    8028:	ret
    802c:	ldp	x19, x20, [sp, #16]
    8030:	b	7e28 <deflateCopy@@Base+0x40>
    8034:	mov	x0, x21
    8038:	bl	2590 <deflateEnd@plt>
    803c:	mov	w0, #0xfffffffc            	// #-4
    8040:	ldp	x19, x20, [sp, #16]
    8044:	b	7e28 <deflateCopy@@Base+0x40>
    8048:	mov	w0, #0xfffffffc            	// #-4
    804c:	ldp	x19, x20, [sp, #16]
    8050:	b	7e28 <deflateCopy@@Base+0x40>
    8054:	nop

0000000000008058 <inflateBackInit_@@ZLIB_1.2.0>:
    8058:	cbz	x3, 8148 <inflateBackInit_@@ZLIB_1.2.0+0xf0>
    805c:	stp	x29, x30, [sp, #-48]!
    8060:	mov	x29, sp
    8064:	stp	x19, x20, [sp, #16]
    8068:	mov	w20, w1
    806c:	mov	x19, x0
    8070:	ldrb	w1, [x3]
    8074:	mov	w0, #0x70                  	// #112
    8078:	cmp	w1, #0x31
    807c:	ccmp	w4, w0, #0x0, eq  // eq = none
    8080:	b.ne	8134 <inflateBackInit_@@ZLIB_1.2.0+0xdc>  // b.any
    8084:	str	x21, [sp, #32]
    8088:	cmp	x19, #0x0
    808c:	mov	x21, x2
    8090:	ccmp	x2, #0x0, #0x4, ne  // ne = any
    8094:	b.eq	813c <inflateBackInit_@@ZLIB_1.2.0+0xe4>  // b.none
    8098:	sub	w0, w20, #0x8
    809c:	cmp	w0, #0x7
    80a0:	b.hi	813c <inflateBackInit_@@ZLIB_1.2.0+0xe4>  // b.pmore
    80a4:	ldr	x3, [x19, #64]
    80a8:	str	xzr, [x19, #48]
    80ac:	cbz	x3, 8104 <inflateBackInit_@@ZLIB_1.2.0+0xac>
    80b0:	ldr	x1, [x19, #72]
    80b4:	ldr	x0, [x19, #80]
    80b8:	cbz	x1, 8124 <inflateBackInit_@@ZLIB_1.2.0+0xcc>
    80bc:	mov	w2, #0x1bf8                	// #7160
    80c0:	mov	w1, #0x1                   	// #1
    80c4:	blr	x3
    80c8:	mov	x3, x0
    80cc:	cbz	x0, 8150 <inflateBackInit_@@ZLIB_1.2.0+0xf8>
    80d0:	str	x3, [x19, #56]
    80d4:	mov	w1, #0x1                   	// #1
    80d8:	str	x21, [x3, #72]
    80dc:	lsl	w1, w1, w20
    80e0:	ldr	x21, [sp, #32]
    80e4:	mov	w2, #0x8000                	// #32768
    80e8:	mov	w0, #0x0                   	// #0
    80ec:	str	w2, [x3, #28]
    80f0:	stp	w20, w1, [x3, #56]
    80f4:	str	xzr, [x3, #64]
    80f8:	ldp	x19, x20, [sp, #16]
    80fc:	ldp	x29, x30, [sp], #48
    8100:	ret
    8104:	adrp	x1, f000 <inflateCodesUsed@@ZLIB_1.2.9+0x25c8>
    8108:	add	x1, x1, #0x6f0
    810c:	mov	x3, x1
    8110:	str	x1, [x19, #64]
    8114:	ldr	x1, [x19, #72]
    8118:	str	xzr, [x19, #80]
    811c:	mov	x0, #0x0                   	// #0
    8120:	cbnz	x1, 80bc <inflateBackInit_@@ZLIB_1.2.0+0x64>
    8124:	adrp	x1, f000 <inflateCodesUsed@@ZLIB_1.2.9+0x25c8>
    8128:	add	x1, x1, #0x6f8
    812c:	str	x1, [x19, #72]
    8130:	b	80bc <inflateBackInit_@@ZLIB_1.2.0+0x64>
    8134:	mov	w0, #0xfffffffa            	// #-6
    8138:	b	80f8 <inflateBackInit_@@ZLIB_1.2.0+0xa0>
    813c:	mov	w0, #0xfffffffe            	// #-2
    8140:	ldr	x21, [sp, #32]
    8144:	b	80f8 <inflateBackInit_@@ZLIB_1.2.0+0xa0>
    8148:	mov	w0, #0xfffffffa            	// #-6
    814c:	ret
    8150:	mov	w0, #0xfffffffc            	// #-4
    8154:	ldr	x21, [sp, #32]
    8158:	b	80f8 <inflateBackInit_@@ZLIB_1.2.0+0xa0>
    815c:	nop

0000000000008160 <inflateBack@@ZLIB_1.2.0>:
    8160:	stp	x29, x30, [sp, #-208]!
    8164:	mov	x29, sp
    8168:	stp	x3, x4, [sp, #112]
    816c:	cbz	x0, 8a74 <inflateBack@@ZLIB_1.2.0+0x914>
    8170:	stp	x23, x24, [sp, #48]
    8174:	ldr	x23, [x0, #56]
    8178:	stp	x25, x26, [sp, #64]
    817c:	mov	x25, x0
    8180:	cbz	x23, 8a64 <inflateBack@@ZLIB_1.2.0+0x904>
    8184:	stp	x19, x20, [sp, #16]
    8188:	mov	x0, #0x3f3f                	// #16191
    818c:	mov	x19, x1
    8190:	stp	x21, x22, [sp, #32]
    8194:	mov	x24, x2
    8198:	mov	w22, #0x0                   	// #0
    819c:	stp	x27, x28, [sp, #80]
    81a0:	str	xzr, [x25, #48]
    81a4:	str	x0, [x23, #8]
    81a8:	str	wzr, [x23, #64]
    81ac:	ldr	x0, [x25]
    81b0:	str	x0, [sp, #200]
    81b4:	cbz	x0, 81bc <inflateBack@@ZLIB_1.2.0+0x5c>
    81b8:	ldr	w22, [x25, #8]
    81bc:	adrp	x21, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    81c0:	add	x0, x21, #0x710
    81c4:	ldr	w20, [x23, #60]
    81c8:	add	x21, sp, #0xc8
    81cc:	str	x0, [sp, #136]
    81d0:	add	x0, x0, #0x880
    81d4:	str	x0, [sp, #128]
    81d8:	mov	w1, #0x3f3f                	// #16191
    81dc:	ldr	x0, [x23, #72]
    81e0:	mov	w27, #0x0                   	// #0
    81e4:	mov	x28, #0x0                   	// #0
    81e8:	str	x0, [sp, #104]
    81ec:	mov	w0, #0x3f48                	// #16200
    81f0:	cmp	w1, w0
    81f4:	b.eq	82b0 <inflateBack@@ZLIB_1.2.0+0x150>  // b.none
    81f8:	b.hi	8354 <inflateBack@@ZLIB_1.2.0+0x1f4>  // b.pmore
    81fc:	mov	w0, #0x3f41                	// #16193
    8200:	cmp	w1, w0
    8204:	b.eq	83d0 <inflateBack@@ZLIB_1.2.0+0x270>  // b.none
    8208:	mov	w0, #0x3f44                	// #16196
    820c:	cmp	w1, w0
    8210:	b.eq	8250 <inflateBack@@ZLIB_1.2.0+0xf0>  // b.none
    8214:	b	8324 <inflateBack@@ZLIB_1.2.0+0x1c4>
    8218:	mov	x1, x21
    821c:	mov	x0, x24
    8220:	cbnz	w22, 8230 <inflateBack@@ZLIB_1.2.0+0xd0>
    8224:	blr	x19
    8228:	mov	w22, w0
    822c:	cbz	w0, 8480 <inflateBack@@ZLIB_1.2.0+0x320>
    8230:	ldr	x0, [sp, #200]
    8234:	sub	w22, w22, #0x1
    8238:	add	x1, x0, #0x1
    823c:	str	x1, [sp, #200]
    8240:	ldrb	w0, [x0]
    8244:	lsl	x0, x0, x27
    8248:	add	w27, w27, #0x8
    824c:	add	x28, x28, x0
    8250:	cmp	w27, #0xd
    8254:	b.ls	8218 <inflateBack@@ZLIB_1.2.0+0xb8>  // b.plast
    8258:	and	w1, w28, #0x1f
    825c:	ubfx	w0, w28, #5, #5
    8260:	ubfx	w2, w28, #10, #4
    8264:	add	w1, w1, #0x101
    8268:	add	w0, w0, #0x1
    826c:	add	w2, w2, #0x4
    8270:	stp	w2, w1, [x23, #128]
    8274:	cmp	w1, #0x11e
    8278:	str	w0, [x23, #136]
    827c:	sub	w27, w27, #0xe
    8280:	ccmp	w0, #0x1e, #0x2, ls  // ls = plast
    8284:	lsr	x28, x28, #14
    8288:	b.ls	8680 <inflateBack@@ZLIB_1.2.0+0x520>  // b.plast
    828c:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    8290:	add	x0, x0, #0x5e8
    8294:	str	x0, [x25, #48]
    8298:	mov	w0, #0x3f51                	// #16209
    829c:	str	w0, [x23, #8]
    82a0:	mov	w1, w0
    82a4:	mov	w0, #0x3f48                	// #16200
    82a8:	cmp	w1, w0
    82ac:	b.ne	81f8 <inflateBack@@ZLIB_1.2.0+0x98>  // b.any
    82b0:	cmp	w20, #0x101
    82b4:	ccmp	w22, #0x5, #0x0, hi  // hi = pmore
    82b8:	b.ls	8518 <inflateBack@@ZLIB_1.2.0+0x3b8>  // b.plast
    82bc:	ldr	x0, [sp, #200]
    82c0:	ldr	w1, [x23, #60]
    82c4:	str	x0, [x25]
    82c8:	ldr	x0, [sp, #104]
    82cc:	str	w22, [x25, #8]
    82d0:	str	x0, [x25, #24]
    82d4:	str	w20, [x25, #32]
    82d8:	ldr	w0, [x23, #64]
    82dc:	str	x28, [x23, #80]
    82e0:	str	w27, [x23, #88]
    82e4:	cmp	w0, w1
    82e8:	b.cs	82f4 <inflateBack@@ZLIB_1.2.0+0x194>  // b.hs, b.nlast
    82ec:	sub	w20, w1, w20
    82f0:	str	w20, [x23, #64]
    82f4:	mov	x0, x25
    82f8:	bl	91e0 <inflateBackEnd@@ZLIB_1.2.0+0x50>
    82fc:	ldr	x0, [x25]
    8300:	str	x0, [sp, #200]
    8304:	ldr	x0, [x25, #24]
    8308:	str	x0, [sp, #104]
    830c:	ldr	w1, [x23, #8]
    8310:	ldr	w27, [x23, #88]
    8314:	ldr	w22, [x25, #8]
    8318:	ldr	w20, [x25, #32]
    831c:	ldr	x28, [x23, #80]
    8320:	b	81ec <inflateBack@@ZLIB_1.2.0+0x8c>
    8324:	mov	w0, #0x3f3f                	// #16191
    8328:	cmp	w1, w0
    832c:	b.ne	83c4 <inflateBack@@ZLIB_1.2.0+0x264>  // b.any
    8330:	ldr	w0, [x23, #12]
    8334:	cbz	w0, 849c <inflateBack@@ZLIB_1.2.0+0x33c>
    8338:	and	w0, w27, #0x7
    833c:	mov	w2, #0x3f50                	// #16208
    8340:	and	w27, w27, #0xfffffff8
    8344:	mov	w1, w2
    8348:	lsr	x28, x28, x0
    834c:	str	w2, [x23, #8]
    8350:	b	81ec <inflateBack@@ZLIB_1.2.0+0x8c>
    8354:	mov	w0, #0x3f50                	// #16208
    8358:	cmp	w1, w0
    835c:	b.eq	8398 <inflateBack@@ZLIB_1.2.0+0x238>  // b.none
    8360:	mov	w0, #0x3f51                	// #16209
    8364:	cmp	w1, w0
    8368:	b.ne	83c4 <inflateBack@@ZLIB_1.2.0+0x264>  // b.any
    836c:	ldr	x1, [sp, #200]
    8370:	mov	w0, #0xfffffffd            	// #-3
    8374:	ldp	x19, x20, [sp, #16]
    8378:	ldp	x23, x24, [sp, #48]
    837c:	ldp	x27, x28, [sp, #80]
    8380:	str	x1, [x25]
    8384:	str	w22, [x25, #8]
    8388:	ldp	x21, x22, [sp, #32]
    838c:	ldp	x25, x26, [sp, #64]
    8390:	ldp	x29, x30, [sp], #208
    8394:	ret
    8398:	ldr	w2, [x23, #60]
    839c:	cmp	w2, w20
    83a0:	b.ls	8490 <inflateBack@@ZLIB_1.2.0+0x330>  // b.plast
    83a4:	ldp	x3, x0, [sp, #112]
    83a8:	sub	w2, w2, w20
    83ac:	ldr	x1, [x23, #72]
    83b0:	blr	x3
    83b4:	cbz	w0, 8490 <inflateBack@@ZLIB_1.2.0+0x330>
    83b8:	mov	w0, #0xfffffffb            	// #-5
    83bc:	ldr	x1, [sp, #200]
    83c0:	b	8374 <inflateBack@@ZLIB_1.2.0+0x214>
    83c4:	mov	w0, #0xfffffffe            	// #-2
    83c8:	ldr	x1, [sp, #200]
    83cc:	b	8374 <inflateBack@@ZLIB_1.2.0+0x214>
    83d0:	and	w0, w27, #0x7
    83d4:	and	w27, w27, #0xfffffff8
    83d8:	cmp	w27, #0x1f
    83dc:	lsr	x28, x28, x0
    83e0:	b.hi	8428 <inflateBack@@ZLIB_1.2.0+0x2c8>  // b.pmore
    83e4:	nop
    83e8:	mov	x1, x21
    83ec:	mov	x0, x24
    83f0:	cbnz	w22, 8400 <inflateBack@@ZLIB_1.2.0+0x2a0>
    83f4:	blr	x19
    83f8:	mov	w22, w0
    83fc:	cbz	w0, 8480 <inflateBack@@ZLIB_1.2.0+0x320>
    8400:	ldr	x0, [sp, #200]
    8404:	sub	w22, w22, #0x1
    8408:	add	x1, x0, #0x1
    840c:	str	x1, [sp, #200]
    8410:	ldrb	w0, [x0]
    8414:	lsl	x0, x0, x27
    8418:	add	w27, w27, #0x8
    841c:	add	x28, x28, x0
    8420:	cmp	w27, #0x1f
    8424:	b.ls	83e8 <inflateBack@@ZLIB_1.2.0+0x288>  // b.plast
    8428:	lsr	x0, x28, #16
    842c:	and	x1, x28, #0xffff
    8430:	eor	x0, x0, #0xffff
    8434:	cmp	x0, w28, uxth
    8438:	b.eq	8458 <inflateBack@@ZLIB_1.2.0+0x2f8>  // b.none
    843c:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    8440:	add	x0, x0, #0x5c8
    8444:	str	x0, [x25, #48]
    8448:	mov	w0, #0x3f51                	// #16209
    844c:	mov	w1, w0
    8450:	str	w0, [x23, #8]
    8454:	b	81ec <inflateBack@@ZLIB_1.2.0+0x8c>
    8458:	str	w1, [x23, #92]
    845c:	mov	w26, w1
    8460:	cbz	x1, 8668 <inflateBack@@ZLIB_1.2.0+0x508>
    8464:	nop
    8468:	mov	x1, x21
    846c:	mov	x0, x24
    8470:	cbnz	w22, 85f0 <inflateBack@@ZLIB_1.2.0+0x490>
    8474:	blr	x19
    8478:	mov	w22, w0
    847c:	cbnz	w0, 85f0 <inflateBack@@ZLIB_1.2.0+0x490>
    8480:	mov	x1, #0x0                   	// #0
    8484:	mov	w0, #0xfffffffb            	// #-5
    8488:	mov	w22, #0x0                   	// #0
    848c:	b	8374 <inflateBack@@ZLIB_1.2.0+0x214>
    8490:	mov	w0, #0x1                   	// #1
    8494:	ldr	x1, [sp, #200]
    8498:	b	8374 <inflateBack@@ZLIB_1.2.0+0x214>
    849c:	cmp	w27, #0x2
    84a0:	b.hi	84dc <inflateBack@@ZLIB_1.2.0+0x37c>  // b.pmore
    84a4:	cbnz	w22, 84bc <inflateBack@@ZLIB_1.2.0+0x35c>
    84a8:	mov	x1, x21
    84ac:	mov	x0, x24
    84b0:	blr	x19
    84b4:	mov	w22, w0
    84b8:	cbz	w0, 8480 <inflateBack@@ZLIB_1.2.0+0x320>
    84bc:	ldr	x0, [sp, #200]
    84c0:	sub	w22, w22, #0x1
    84c4:	add	x1, x0, #0x1
    84c8:	str	x1, [sp, #200]
    84cc:	ldrb	w0, [x0]
    84d0:	lsl	x0, x0, x27
    84d4:	add	w27, w27, #0x8
    84d8:	add	x28, x28, x0
    84dc:	and	w0, w28, #0x1
    84e0:	str	w0, [x23, #12]
    84e4:	ubfx	w0, w28, #1, #2
    84e8:	cmp	w0, #0x2
    84ec:	b.eq	85e0 <inflateBack@@ZLIB_1.2.0+0x480>  // b.none
    84f0:	cmp	w0, #0x3
    84f4:	b.eq	8818 <inflateBack@@ZLIB_1.2.0+0x6b8>  // b.none
    84f8:	cmp	w0, #0x1
    84fc:	b.eq	87f0 <inflateBack@@ZLIB_1.2.0+0x690>  // b.none
    8500:	mov	w0, #0x3f41                	// #16193
    8504:	mov	w1, w0
    8508:	str	w0, [x23, #8]
    850c:	lsr	x28, x28, #3
    8510:	sub	w27, w27, #0x3
    8514:	b	81ec <inflateBack@@ZLIB_1.2.0+0x8c>
    8518:	ldr	w4, [x23, #120]
    851c:	mov	w2, #0xffffffff            	// #-1
    8520:	ldr	x3, [x23, #104]
    8524:	mov	w1, w28
    8528:	lsl	w0, w2, w4
    852c:	bic	w0, w28, w0
    8530:	lsl	x0, x0, #2
    8534:	add	x5, x3, x0
    8538:	ldrb	w26, [x5, #1]
    853c:	cmp	w27, w26
    8540:	b.cs	8a7c <inflateBack@@ZLIB_1.2.0+0x91c>  // b.hs, b.nlast
    8544:	mov	w5, w2
    8548:	mov	x1, x21
    854c:	mov	x0, x24
    8550:	cbnz	w22, 856c <inflateBack@@ZLIB_1.2.0+0x40c>
    8554:	blr	x19
    8558:	mov	w22, w0
    855c:	cbz	w0, 8480 <inflateBack@@ZLIB_1.2.0+0x320>
    8560:	ldr	w4, [x23, #120]
    8564:	mov	w5, #0xffffffff            	// #-1
    8568:	ldr	x3, [x23, #104]
    856c:	lsl	w0, w5, w4
    8570:	ldr	x1, [sp, #200]
    8574:	sub	w22, w22, #0x1
    8578:	add	x2, x1, #0x1
    857c:	str	x2, [sp, #200]
    8580:	ldrb	w1, [x1]
    8584:	lsl	x1, x1, x27
    8588:	add	x28, x28, x1
    858c:	bic	w0, w28, w0
    8590:	add	w27, w27, #0x8
    8594:	mov	w1, w28
    8598:	add	x0, x3, x0, lsl #2
    859c:	ldrb	w26, [x0, #1]
    85a0:	cmp	w26, w27
    85a4:	b.hi	8548 <inflateBack@@ZLIB_1.2.0+0x3e8>  // b.pmore
    85a8:	ldrb	w2, [x0]
    85ac:	ldrh	w5, [x0, #2]
    85b0:	mov	w0, w5
    85b4:	cbz	w2, 879c <inflateBack@@ZLIB_1.2.0+0x63c>
    85b8:	tst	w2, #0xf0
    85bc:	b.eq	8854 <inflateBack@@ZLIB_1.2.0+0x6f4>  // b.none
    85c0:	sub	w27, w27, w26
    85c4:	lsr	x28, x28, x26
    85c8:	str	w5, [x23, #92]
    85cc:	tbz	w2, #5, 8834 <inflateBack@@ZLIB_1.2.0+0x6d4>
    85d0:	mov	w0, #0x3f3f                	// #16191
    85d4:	mov	w1, w0
    85d8:	str	w0, [x23, #8]
    85dc:	b	81ec <inflateBack@@ZLIB_1.2.0+0x8c>
    85e0:	mov	w0, #0x3f44                	// #16196
    85e4:	mov	w1, w0
    85e8:	str	w0, [x23, #8]
    85ec:	b	850c <inflateBack@@ZLIB_1.2.0+0x3ac>
    85f0:	cbnz	w20, 8614 <inflateBack@@ZLIB_1.2.0+0x4b4>
    85f4:	ldp	x3, x0, [sp, #112]
    85f8:	ldr	x1, [x23, #72]
    85fc:	str	x1, [sp, #104]
    8600:	ldr	w20, [x23, #60]
    8604:	str	w20, [x23, #64]
    8608:	mov	w2, w20
    860c:	blr	x3
    8610:	cbnz	w0, 83b8 <inflateBack@@ZLIB_1.2.0+0x258>
    8614:	cmp	w22, w20
    8618:	csel	w27, w22, w20, ls  // ls = plast
    861c:	ldr	x0, [sp, #104]
    8620:	cmp	w27, w26
    8624:	ldr	x1, [sp, #200]
    8628:	csel	w28, w27, w26, ls  // ls = plast
    862c:	mov	x2, x28
    8630:	csel	w27, w27, w26, ls  // ls = plast
    8634:	sub	w22, w22, w27
    8638:	sub	w20, w20, w27
    863c:	bl	23a0 <memcpy@plt>
    8640:	ldr	w26, [x23, #92]
    8644:	ldr	x0, [sp, #200]
    8648:	sub	w26, w26, w27
    864c:	str	w26, [x23, #92]
    8650:	add	x0, x0, x28
    8654:	str	x0, [sp, #200]
    8658:	ldr	x0, [sp, #104]
    865c:	add	x0, x0, x28
    8660:	str	x0, [sp, #104]
    8664:	cbnz	w26, 8468 <inflateBack@@ZLIB_1.2.0+0x308>
    8668:	mov	w0, #0x3f3f                	// #16191
    866c:	mov	w27, #0x0                   	// #0
    8670:	mov	w1, w0
    8674:	mov	x28, #0x0                   	// #0
    8678:	str	w0, [x23, #8]
    867c:	b	81ec <inflateBack@@ZLIB_1.2.0+0x8c>
    8680:	mov	w3, #0x0                   	// #0
    8684:	str	wzr, [x23, #140]
    8688:	mov	x1, x21
    868c:	mov	x0, x24
    8690:	cmp	w27, #0x2
    8694:	b.hi	86d0 <inflateBack@@ZLIB_1.2.0+0x570>  // b.pmore
    8698:	cbnz	w22, 86b0 <inflateBack@@ZLIB_1.2.0+0x550>
    869c:	blr	x19
    86a0:	mov	w22, w0
    86a4:	cbz	w0, 8480 <inflateBack@@ZLIB_1.2.0+0x320>
    86a8:	ldr	w2, [x23, #128]
    86ac:	ldr	w3, [x23, #140]
    86b0:	ldr	x0, [sp, #200]
    86b4:	sub	w22, w22, #0x1
    86b8:	add	x1, x0, #0x1
    86bc:	str	x1, [sp, #200]
    86c0:	ldrb	w0, [x0]
    86c4:	lsl	x0, x0, x27
    86c8:	add	w27, w27, #0x8
    86cc:	add	x28, x28, x0
    86d0:	ldr	x1, [sp, #128]
    86d4:	add	w0, w3, #0x1
    86d8:	str	w0, [x23, #140]
    86dc:	and	w4, w28, #0x7
    86e0:	sub	w27, w27, #0x3
    86e4:	cmp	w0, w2
    86e8:	ldrh	w1, [x1, w3, uxtw #1]
    86ec:	lsr	x28, x28, #3
    86f0:	mov	w3, w0
    86f4:	add	x1, x23, x1, lsl #1
    86f8:	strh	w4, [x1, #152]
    86fc:	b.cc	8688 <inflateBack@@ZLIB_1.2.0+0x528>  // b.lo, b.ul, b.last
    8700:	cmp	w0, #0x12
    8704:	b.hi	873c <inflateBack@@ZLIB_1.2.0+0x5dc>  // b.pmore
    8708:	ldr	x1, [sp, #128]
    870c:	mov	w3, #0x12                  	// #18
    8710:	sub	w3, w3, w0
    8714:	add	x4, x1, w0, uxtw #1
    8718:	mov	x0, #0x0                   	// #0
    871c:	ldrh	w1, [x4, x0, lsl #1]
    8720:	cmp	x3, x0
    8724:	add	x0, x0, #0x1
    8728:	add	x1, x23, x1, lsl #1
    872c:	strh	wzr, [x1, #152]
    8730:	b.ne	871c <inflateBack@@ZLIB_1.2.0+0x5bc>  // b.any
    8734:	mov	w0, #0x13                  	// #19
    8738:	str	w0, [x23, #140]
    873c:	add	x2, x23, #0x558
    8740:	mov	w0, #0x7                   	// #7
    8744:	str	x2, [x23, #104]
    8748:	add	x1, x23, #0x98
    874c:	str	w0, [x23, #120]
    8750:	add	x0, x23, #0x318
    8754:	str	x2, [x23, #144]
    8758:	add	x3, x23, #0x90
    875c:	add	x4, x23, #0x78
    8760:	mov	x5, x0
    8764:	stp	x1, x3, [sp, #144]
    8768:	stp	x0, x2, [sp, #160]
    876c:	mov	w2, #0x13                  	// #19
    8770:	mov	w0, #0x0                   	// #0
    8774:	str	x4, [sp, #176]
    8778:	bl	caa0 <inflateCodesUsed@@ZLIB_1.2.9+0x68>
    877c:	cbz	w0, 8d88 <inflateBack@@ZLIB_1.2.0+0xc28>
    8780:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    8784:	add	x0, x0, #0x610
    8788:	str	x0, [x25, #48]
    878c:	mov	w0, #0x3f51                	// #16209
    8790:	mov	w1, w0
    8794:	str	w0, [x23, #8]
    8798:	b	81ec <inflateBack@@ZLIB_1.2.0+0x8c>
    879c:	sub	w27, w27, w26
    87a0:	lsr	x28, x28, x26
    87a4:	str	w5, [x23, #92]
    87a8:	cbnz	w20, 87d0 <inflateBack@@ZLIB_1.2.0+0x670>
    87ac:	ldp	x3, x0, [sp, #112]
    87b0:	ldr	x1, [x23, #72]
    87b4:	str	x1, [sp, #104]
    87b8:	ldr	w20, [x23, #60]
    87bc:	str	w20, [x23, #64]
    87c0:	mov	w2, w20
    87c4:	blr	x3
    87c8:	cbnz	w0, 83b8 <inflateBack@@ZLIB_1.2.0+0x258>
    87cc:	ldr	w0, [x23, #92]
    87d0:	ldr	x3, [sp, #104]
    87d4:	mov	w2, #0x3f48                	// #16200
    87d8:	sub	w20, w20, #0x1
    87dc:	mov	w1, w2
    87e0:	strb	w0, [x3], #1
    87e4:	str	w2, [x23, #8]
    87e8:	str	x3, [sp, #104]
    87ec:	b	81ec <inflateBack@@ZLIB_1.2.0+0x8c>
    87f0:	ldr	x4, [sp, #136]
    87f4:	mov	x3, #0x9                   	// #9
    87f8:	mov	w2, #0x3f48                	// #16200
    87fc:	movk	x3, #0x5, lsl #32
    8800:	add	x0, x4, #0x800
    8804:	mov	w1, w2
    8808:	str	w2, [x23, #8]
    880c:	stp	x4, x0, [x23, #104]
    8810:	str	x3, [x23, #120]
    8814:	b	850c <inflateBack@@ZLIB_1.2.0+0x3ac>
    8818:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    881c:	add	x0, x0, #0x5b0
    8820:	str	x0, [x25, #48]
    8824:	mov	w2, #0x3f51                	// #16209
    8828:	mov	w1, w2
    882c:	str	w2, [x23, #8]
    8830:	b	850c <inflateBack@@ZLIB_1.2.0+0x3ac>
    8834:	tbz	w2, #6, 8918 <inflateBack@@ZLIB_1.2.0+0x7b8>
    8838:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    883c:	add	x0, x0, #0x6b0
    8840:	str	x0, [x25, #48]
    8844:	mov	w0, #0x3f51                	// #16209
    8848:	mov	w1, w0
    884c:	str	w0, [x23, #8]
    8850:	b	81ec <inflateBack@@ZLIB_1.2.0+0x8c>
    8854:	add	w2, w2, w26
    8858:	mov	w0, #0xffffffff            	// #-1
    885c:	lsl	w2, w0, w2
    8860:	bic	w0, w1, w2
    8864:	mvn	w6, w2
    8868:	lsr	w0, w0, w26
    886c:	add	w0, w0, w5
    8870:	lsl	x0, x0, #2
    8874:	add	x4, x3, x0
    8878:	ldrb	w1, [x4, #1]
    887c:	add	w2, w1, w26
    8880:	cmp	w2, w27
    8884:	b.ls	8fc4 <inflateBack@@ZLIB_1.2.0+0xe64>  // b.plast
    8888:	mov	x1, x21
    888c:	mov	x0, x24
    8890:	cbnz	w22, 88b4 <inflateBack@@ZLIB_1.2.0+0x754>
    8894:	str	w5, [sp, #144]
    8898:	str	w6, [sp, #152]
    889c:	blr	x19
    88a0:	mov	w22, w0
    88a4:	cbz	w0, 8480 <inflateBack@@ZLIB_1.2.0+0x320>
    88a8:	ldr	w5, [sp, #144]
    88ac:	ldr	w6, [sp, #152]
    88b0:	ldr	x3, [x23, #104]
    88b4:	sub	w22, w22, #0x1
    88b8:	ldr	x0, [sp, #200]
    88bc:	add	x1, x0, #0x1
    88c0:	str	x1, [sp, #200]
    88c4:	ldrb	w0, [x0]
    88c8:	lsl	x0, x0, x27
    88cc:	add	x28, x28, x0
    88d0:	and	w0, w6, w28
    88d4:	add	w27, w27, #0x8
    88d8:	lsr	w0, w0, w26
    88dc:	add	w0, w0, w5
    88e0:	add	x0, x3, x0, lsl #2
    88e4:	ldrb	w1, [x0, #1]
    88e8:	add	w2, w1, w26
    88ec:	cmp	w2, w27
    88f0:	b.hi	8888 <inflateBack@@ZLIB_1.2.0+0x728>  // b.pmore
    88f4:	ldrb	w2, [x0]
    88f8:	ldrh	w0, [x0, #2]
    88fc:	str	w0, [x23, #92]
    8900:	sub	w7, w27, w26
    8904:	lsr	x8, x28, x26
    8908:	sub	w27, w7, w1
    890c:	lsr	x28, x8, x1
    8910:	cbnz	w2, 85cc <inflateBack@@ZLIB_1.2.0+0x46c>
    8914:	b	87a8 <inflateBack@@ZLIB_1.2.0+0x648>
    8918:	and	w2, w2, #0xf
    891c:	str	w2, [x23, #100]
    8920:	cbz	w2, 8994 <inflateBack@@ZLIB_1.2.0+0x834>
    8924:	cmp	w2, w27
    8928:	b.ls	8974 <inflateBack@@ZLIB_1.2.0+0x814>  // b.plast
    892c:	nop
    8930:	mov	x1, x21
    8934:	mov	x0, x24
    8938:	cbnz	w22, 894c <inflateBack@@ZLIB_1.2.0+0x7ec>
    893c:	blr	x19
    8940:	mov	w22, w0
    8944:	cbz	w0, 8480 <inflateBack@@ZLIB_1.2.0+0x320>
    8948:	ldr	w2, [x23, #100]
    894c:	ldr	x0, [sp, #200]
    8950:	sub	w22, w22, #0x1
    8954:	add	x1, x0, #0x1
    8958:	str	x1, [sp, #200]
    895c:	ldrb	w0, [x0]
    8960:	lsl	x0, x0, x27
    8964:	add	w27, w27, #0x8
    8968:	add	x28, x28, x0
    896c:	cmp	w27, w2
    8970:	b.cc	8930 <inflateBack@@ZLIB_1.2.0+0x7d0>  // b.lo, b.ul, b.last
    8974:	ldr	w1, [x23, #92]
    8978:	mov	w0, #0xffffffff            	// #-1
    897c:	lsl	w0, w0, w2
    8980:	sub	w27, w27, w2
    8984:	bic	w0, w28, w0
    8988:	lsr	x28, x28, x2
    898c:	add	w0, w1, w0
    8990:	str	w0, [x23, #92]
    8994:	ldr	w4, [x23, #124]
    8998:	mov	w2, #0xffffffff            	// #-1
    899c:	ldr	x3, [x23, #112]
    89a0:	lsl	w0, w2, w4
    89a4:	bic	w0, w28, w0
    89a8:	lsl	x0, x0, #2
    89ac:	add	x5, x3, x0
    89b0:	ldrb	w26, [x5, #1]
    89b4:	cmp	w26, w27
    89b8:	mov	w1, w26
    89bc:	b.ls	8fb8 <inflateBack@@ZLIB_1.2.0+0xe58>  // b.plast
    89c0:	mov	w5, w2
    89c4:	nop
    89c8:	mov	x1, x21
    89cc:	mov	x0, x24
    89d0:	cbnz	w22, 89ec <inflateBack@@ZLIB_1.2.0+0x88c>
    89d4:	blr	x19
    89d8:	mov	w22, w0
    89dc:	cbz	w0, 8480 <inflateBack@@ZLIB_1.2.0+0x320>
    89e0:	ldr	w4, [x23, #124]
    89e4:	mov	w5, #0xffffffff            	// #-1
    89e8:	ldr	x3, [x23, #112]
    89ec:	lsl	w0, w5, w4
    89f0:	ldr	x1, [sp, #200]
    89f4:	sub	w22, w22, #0x1
    89f8:	add	x2, x1, #0x1
    89fc:	str	x2, [sp, #200]
    8a00:	ldrb	w1, [x1]
    8a04:	lsl	x1, x1, x27
    8a08:	add	x28, x28, x1
    8a0c:	bic	w0, w28, w0
    8a10:	add	w27, w27, #0x8
    8a14:	add	x0, x3, x0, lsl #2
    8a18:	ldrb	w26, [x0, #1]
    8a1c:	cmp	w26, w27
    8a20:	mov	w1, w26
    8a24:	b.hi	89c8 <inflateBack@@ZLIB_1.2.0+0x868>  // b.pmore
    8a28:	ldrb	w2, [x0]
    8a2c:	ldrh	w6, [x0, #2]
    8a30:	tst	w2, #0xf0
    8a34:	mov	w0, w26
    8a38:	b.eq	8ccc <inflateBack@@ZLIB_1.2.0+0xb6c>  // b.none
    8a3c:	sub	w27, w27, w1
    8a40:	lsr	x28, x28, x0
    8a44:	tbz	w2, #6, 8a88 <inflateBack@@ZLIB_1.2.0+0x928>
    8a48:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    8a4c:	add	x0, x0, #0x6d0
    8a50:	str	x0, [x25, #48]
    8a54:	mov	w0, #0x3f51                	// #16209
    8a58:	mov	w1, w0
    8a5c:	str	w0, [x23, #8]
    8a60:	b	81ec <inflateBack@@ZLIB_1.2.0+0x8c>
    8a64:	mov	w0, #0xfffffffe            	// #-2
    8a68:	ldp	x23, x24, [sp, #48]
    8a6c:	ldp	x25, x26, [sp, #64]
    8a70:	b	8390 <inflateBack@@ZLIB_1.2.0+0x230>
    8a74:	mov	w0, #0xfffffffe            	// #-2
    8a78:	b	8390 <inflateBack@@ZLIB_1.2.0+0x230>
    8a7c:	ldrb	w2, [x3, x0]
    8a80:	ldrh	w5, [x5, #2]
    8a84:	b	85b0 <inflateBack@@ZLIB_1.2.0+0x450>
    8a88:	and	w2, w2, #0xf
    8a8c:	stp	w6, w2, [x23, #96]
    8a90:	mov	w1, w6
    8a94:	cbnz	w2, 8fd0 <inflateBack@@ZLIB_1.2.0+0xe70>
    8a98:	ldp	w2, w0, [x23, #60]
    8a9c:	cmp	w2, w0
    8aa0:	csel	w0, w20, wzr, hi  // hi = pmore
    8aa4:	sub	w0, w2, w0
    8aa8:	cmp	w0, w1
    8aac:	b.cs	8be8 <inflateBack@@ZLIB_1.2.0+0xa88>  // b.hs, b.nlast
    8ab0:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    8ab4:	add	x0, x0, #0x6e8
    8ab8:	str	x0, [x25, #48]
    8abc:	mov	w0, #0x3f51                	// #16209
    8ac0:	mov	w1, w0
    8ac4:	str	w0, [x23, #8]
    8ac8:	b	81ec <inflateBack@@ZLIB_1.2.0+0x8c>
    8acc:	lsl	w1, w2, #4
    8ad0:	cmp	w5, w2, lsl #4
    8ad4:	add	x5, x6, x1
    8ad8:	lsl	w2, w2, #4
    8adc:	add	x1, x4, x1
    8ae0:	b.eq	8bcc <inflateBack@@ZLIB_1.2.0+0xa6c>  // b.none
    8ae4:	ldrb	w4, [x4, w2, uxtw]
    8ae8:	subs	w3, w0, w2
    8aec:	strb	w4, [x6, w2, uxtw]
    8af0:	b.eq	8bcc <inflateBack@@ZLIB_1.2.0+0xa6c>  // b.none
    8af4:	ldrb	w2, [x1, #1]
    8af8:	cmp	w3, #0x1
    8afc:	strb	w2, [x5, #1]
    8b00:	b.eq	8bcc <inflateBack@@ZLIB_1.2.0+0xa6c>  // b.none
    8b04:	ldrb	w2, [x1, #2]
    8b08:	cmp	w3, #0x2
    8b0c:	strb	w2, [x5, #2]
    8b10:	b.eq	8bcc <inflateBack@@ZLIB_1.2.0+0xa6c>  // b.none
    8b14:	ldrb	w2, [x1, #3]
    8b18:	cmp	w3, #0x3
    8b1c:	strb	w2, [x5, #3]
    8b20:	b.eq	8bcc <inflateBack@@ZLIB_1.2.0+0xa6c>  // b.none
    8b24:	ldrb	w2, [x1, #4]
    8b28:	cmp	w3, #0x4
    8b2c:	strb	w2, [x5, #4]
    8b30:	b.eq	8bcc <inflateBack@@ZLIB_1.2.0+0xa6c>  // b.none
    8b34:	ldrb	w2, [x1, #5]
    8b38:	cmp	w3, #0x5
    8b3c:	strb	w2, [x5, #5]
    8b40:	b.eq	8bcc <inflateBack@@ZLIB_1.2.0+0xa6c>  // b.none
    8b44:	ldrb	w2, [x1, #6]
    8b48:	cmp	w3, #0x6
    8b4c:	strb	w2, [x5, #6]
    8b50:	b.eq	8bcc <inflateBack@@ZLIB_1.2.0+0xa6c>  // b.none
    8b54:	ldrb	w2, [x1, #7]
    8b58:	cmp	w3, #0x7
    8b5c:	strb	w2, [x5, #7]
    8b60:	b.eq	8bcc <inflateBack@@ZLIB_1.2.0+0xa6c>  // b.none
    8b64:	ldrb	w2, [x1, #8]
    8b68:	cmp	w3, #0x8
    8b6c:	strb	w2, [x5, #8]
    8b70:	b.eq	8bcc <inflateBack@@ZLIB_1.2.0+0xa6c>  // b.none
    8b74:	ldrb	w2, [x1, #9]
    8b78:	cmp	w3, #0x9
    8b7c:	strb	w2, [x5, #9]
    8b80:	b.eq	8bcc <inflateBack@@ZLIB_1.2.0+0xa6c>  // b.none
    8b84:	ldrb	w2, [x1, #10]
    8b88:	cmp	w3, #0xa
    8b8c:	strb	w2, [x5, #10]
    8b90:	b.eq	8bcc <inflateBack@@ZLIB_1.2.0+0xa6c>  // b.none
    8b94:	ldrb	w2, [x1, #11]
    8b98:	cmp	w3, #0xb
    8b9c:	strb	w2, [x5, #11]
    8ba0:	b.eq	8bcc <inflateBack@@ZLIB_1.2.0+0xa6c>  // b.none
    8ba4:	ldrb	w2, [x1, #12]
    8ba8:	cmp	w3, #0xc
    8bac:	strb	w2, [x5, #12]
    8bb0:	b.eq	8bcc <inflateBack@@ZLIB_1.2.0+0xa6c>  // b.none
    8bb4:	ldrb	w2, [x1, #13]
    8bb8:	cmp	w3, #0xd
    8bbc:	strb	w2, [x5, #13]
    8bc0:	b.eq	8bcc <inflateBack@@ZLIB_1.2.0+0xa6c>  // b.none
    8bc4:	ldrb	w1, [x1, #14]
    8bc8:	strb	w1, [x5, #14]
    8bcc:	ldr	x2, [sp, #104]
    8bd0:	add	x0, x0, #0x1
    8bd4:	ldr	w1, [x23, #92]
    8bd8:	add	x0, x2, x0
    8bdc:	str	x0, [sp, #104]
    8be0:	cbz	w1, 9040 <inflateBack@@ZLIB_1.2.0+0xee0>
    8be4:	ldr	w2, [x23, #60]
    8be8:	mov	w26, w2
    8bec:	cbnz	w20, 8c14 <inflateBack@@ZLIB_1.2.0+0xab4>
    8bf0:	ldr	x0, [x23, #72]
    8bf4:	str	w2, [x23, #64]
    8bf8:	mov	x1, x0
    8bfc:	str	x1, [sp, #104]
    8c00:	ldp	x3, x0, [sp, #112]
    8c04:	blr	x3
    8c08:	cbnz	w0, 83b8 <inflateBack@@ZLIB_1.2.0+0x258>
    8c0c:	mov	w20, w26
    8c10:	ldr	w26, [x23, #60]
    8c14:	ldr	w0, [x23, #96]
    8c18:	sub	w4, w26, w0
    8c1c:	cmp	w20, w4
    8c20:	b.ls	8c9c <inflateBack@@ZLIB_1.2.0+0xb3c>  // b.plast
    8c24:	add	w5, w0, w20
    8c28:	ldr	x0, [sp, #104]
    8c2c:	sub	w5, w5, w26
    8c30:	mov	x1, x0
    8c34:	add	x4, x0, w4, uxtw
    8c38:	ldr	w0, [x23, #92]
    8c3c:	add	x1, x1, #0xf
    8c40:	sub	x1, x1, x4
    8c44:	cmp	w0, w5
    8c48:	csel	w5, w0, w5, ls  // ls = plast
    8c4c:	cmp	x1, #0x1e
    8c50:	sub	w0, w0, w5
    8c54:	str	w0, [x23, #92]
    8c58:	sub	w0, w5, #0x1
    8c5c:	sub	w20, w20, w5
    8c60:	ccmp	w0, #0xe, #0x0, hi  // hi = pmore
    8c64:	b.ls	8cac <inflateBack@@ZLIB_1.2.0+0xb4c>  // b.plast
    8c68:	sub	w2, w5, #0x10
    8c6c:	mov	x1, #0x0                   	// #0
    8c70:	mov	w3, #0x0                   	// #0
    8c74:	lsr	w2, w2, #4
    8c78:	add	w2, w2, #0x1
    8c7c:	ldr	q0, [x4, x1]
    8c80:	add	w3, w3, #0x1
    8c84:	ldr	x6, [sp, #104]
    8c88:	cmp	w3, w2
    8c8c:	str	q0, [x6, x1]
    8c90:	add	x1, x1, #0x10
    8c94:	b.cc	8c7c <inflateBack@@ZLIB_1.2.0+0xb1c>  // b.lo, b.ul, b.last
    8c98:	b	8acc <inflateBack@@ZLIB_1.2.0+0x96c>
    8c9c:	ldr	x1, [sp, #104]
    8ca0:	mov	w5, w20
    8ca4:	sub	x4, x1, w0, uxtw
    8ca8:	b	8c38 <inflateBack@@ZLIB_1.2.0+0xad8>
    8cac:	mov	x1, #0x0                   	// #0
    8cb0:	ldr	x5, [sp, #104]
    8cb4:	cmp	x0, x1
    8cb8:	ldrb	w3, [x4, x1]
    8cbc:	strb	w3, [x5, x1]
    8cc0:	add	x1, x1, #0x1
    8cc4:	b.ne	8cb0 <inflateBack@@ZLIB_1.2.0+0xb50>  // b.any
    8cc8:	b	8bcc <inflateBack@@ZLIB_1.2.0+0xa6c>
    8ccc:	add	w2, w2, w26
    8cd0:	mov	w0, #0xffffffff            	// #-1
    8cd4:	mov	x4, x3
    8cd8:	lsl	w2, w0, w2
    8cdc:	bic	w0, w28, w2
    8ce0:	mvn	w7, w2
    8ce4:	lsr	w0, w0, w26
    8ce8:	add	w0, w0, w6
    8cec:	add	x5, x3, x0, lsl #2
    8cf0:	lsl	x0, x0, #2
    8cf4:	ldrb	w1, [x5, #1]
    8cf8:	add	w2, w1, w26
    8cfc:	cmp	w2, w27
    8d00:	b.ls	9048 <inflateBack@@ZLIB_1.2.0+0xee8>  // b.plast
    8d04:	mov	x1, x21
    8d08:	mov	x0, x24
    8d0c:	cbnz	w22, 8d30 <inflateBack@@ZLIB_1.2.0+0xbd0>
    8d10:	str	w7, [sp, #144]
    8d14:	str	w6, [sp, #152]
    8d18:	blr	x19
    8d1c:	mov	w22, w0
    8d20:	cbz	w0, 8480 <inflateBack@@ZLIB_1.2.0+0x320>
    8d24:	ldr	w7, [sp, #144]
    8d28:	ldr	w6, [sp, #152]
    8d2c:	ldr	x4, [x23, #112]
    8d30:	sub	w22, w22, #0x1
    8d34:	ldr	x0, [sp, #200]
    8d38:	add	x1, x0, #0x1
    8d3c:	str	x1, [sp, #200]
    8d40:	ldrb	w0, [x0]
    8d44:	lsl	x0, x0, x27
    8d48:	add	x28, x28, x0
    8d4c:	and	w0, w7, w28
    8d50:	add	w27, w27, #0x8
    8d54:	lsr	w0, w0, w26
    8d58:	add	w0, w0, w6
    8d5c:	add	x0, x4, x0, lsl #2
    8d60:	ldrb	w1, [x0, #1]
    8d64:	add	w2, w1, w26
    8d68:	cmp	w2, w27
    8d6c:	b.hi	8d04 <inflateBack@@ZLIB_1.2.0+0xba4>  // b.pmore
    8d70:	ldrb	w2, [x0]
    8d74:	ldrh	w6, [x0, #2]
    8d78:	mov	w0, w1
    8d7c:	sub	w27, w27, w26
    8d80:	lsr	x28, x28, x26
    8d84:	b	8a3c <inflateBack@@ZLIB_1.2.0+0x8dc>
    8d88:	ldp	w2, w3, [x23, #132]
    8d8c:	str	wzr, [x23, #140]
    8d90:	cmn	w2, w3
    8d94:	b.eq	8e50 <inflateBack@@ZLIB_1.2.0+0xcf0>  // b.none
    8d98:	mov	w26, #0xffffffff            	// #-1
    8d9c:	ldr	w4, [x23, #120]
    8da0:	ldr	x3, [x23, #104]
    8da4:	lsl	w0, w26, w4
    8da8:	bic	w0, w28, w0
    8dac:	add	x0, x3, x0, lsl #2
    8db0:	ldrb	w2, [x0, #1]
    8db4:	cmp	w2, w27
    8db8:	b.ls	8e14 <inflateBack@@ZLIB_1.2.0+0xcb4>  // b.plast
    8dbc:	mov	x1, x21
    8dc0:	mov	x0, x24
    8dc4:	cbnz	w22, 8ddc <inflateBack@@ZLIB_1.2.0+0xc7c>
    8dc8:	blr	x19
    8dcc:	mov	w22, w0
    8dd0:	cbz	w0, 8480 <inflateBack@@ZLIB_1.2.0+0x320>
    8dd4:	ldr	w4, [x23, #120]
    8dd8:	ldr	x3, [x23, #104]
    8ddc:	lsl	w0, w26, w4
    8de0:	ldr	x1, [sp, #200]
    8de4:	sub	w22, w22, #0x1
    8de8:	add	x2, x1, #0x1
    8dec:	str	x2, [sp, #200]
    8df0:	ldrb	w1, [x1]
    8df4:	lsl	x1, x1, x27
    8df8:	add	x28, x28, x1
    8dfc:	bic	w0, w28, w0
    8e00:	add	w27, w27, #0x8
    8e04:	add	x0, x3, x0, lsl #2
    8e08:	ldrb	w2, [x0, #1]
    8e0c:	cmp	w2, w27
    8e10:	b.hi	8dbc <inflateBack@@ZLIB_1.2.0+0xc5c>  // b.pmore
    8e14:	ldrh	w1, [x0, #2]
    8e18:	cmp	w1, #0xf
    8e1c:	b.hi	8e80 <inflateBack@@ZLIB_1.2.0+0xd20>  // b.pmore
    8e20:	ldr	w0, [x23, #140]
    8e24:	sub	w27, w27, w2
    8e28:	lsr	x28, x28, x2
    8e2c:	mov	w4, w0
    8e30:	add	w0, w0, #0x1
    8e34:	str	w0, [x23, #140]
    8e38:	add	x4, x23, w4, uxtw #1
    8e3c:	ldp	w2, w3, [x23, #132]
    8e40:	strh	w1, [x4, #152]
    8e44:	add	w2, w2, w3
    8e48:	cmp	w0, w2
    8e4c:	b.cc	8d9c <inflateBack@@ZLIB_1.2.0+0xc3c>  // b.lo, b.ul, b.last
    8e50:	ldr	w1, [x23, #8]
    8e54:	mov	w26, #0x3f51                	// #16209
    8e58:	cmp	w1, w26
    8e5c:	b.eq	81ec <inflateBack@@ZLIB_1.2.0+0x8c>  // b.none
    8e60:	ldrh	w0, [x23, #664]
    8e64:	cbnz	w0, 9054 <inflateBack@@ZLIB_1.2.0+0xef4>
    8e68:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    8e6c:	add	x0, x0, #0x650
    8e70:	str	x0, [x25, #48]
    8e74:	mov	w1, w26
    8e78:	str	w26, [x23, #8]
    8e7c:	b	81ec <inflateBack@@ZLIB_1.2.0+0x8c>
    8e80:	cmp	w1, #0x10
    8e84:	b.eq	90b4 <inflateBack@@ZLIB_1.2.0+0xf54>  // b.none
    8e88:	cmp	w1, #0x11
    8e8c:	b.eq	8f3c <inflateBack@@ZLIB_1.2.0+0xddc>  // b.none
    8e90:	add	w3, w2, #0x7
    8e94:	cmp	w3, w27
    8e98:	b.ls	8ee4 <inflateBack@@ZLIB_1.2.0+0xd84>  // b.plast
    8e9c:	mov	x1, x21
    8ea0:	mov	x0, x24
    8ea4:	cbnz	w22, 8ebc <inflateBack@@ZLIB_1.2.0+0xd5c>
    8ea8:	stp	w2, w3, [sp, #184]
    8eac:	blr	x19
    8eb0:	mov	w22, w0
    8eb4:	ldp	w2, w3, [sp, #184]
    8eb8:	cbz	w0, 8480 <inflateBack@@ZLIB_1.2.0+0x320>
    8ebc:	ldr	x0, [sp, #200]
    8ec0:	sub	w22, w22, #0x1
    8ec4:	add	x1, x0, #0x1
    8ec8:	str	x1, [sp, #200]
    8ecc:	ldrb	w0, [x0]
    8ed0:	lsl	x0, x0, x27
    8ed4:	add	w27, w27, #0x8
    8ed8:	add	x28, x28, x0
    8edc:	cmp	w27, w3
    8ee0:	b.cc	8e9c <inflateBack@@ZLIB_1.2.0+0xd3c>  // b.lo, b.ul, b.last
    8ee4:	lsr	x8, x28, x2
    8ee8:	sub	w7, w27, w2
    8eec:	and	w1, w8, #0x7f
    8ef0:	ldr	w0, [x23, #140]
    8ef4:	sub	w27, w7, #0x7
    8ef8:	add	w1, w1, #0xb
    8efc:	lsr	x28, x8, #7
    8f00:	mov	w4, #0x0                   	// #0
    8f04:	ldp	w2, w3, [x23, #132]
    8f08:	add	w1, w0, w1
    8f0c:	add	w5, w2, w3
    8f10:	cmp	w1, w5
    8f14:	b.hi	9098 <inflateBack@@ZLIB_1.2.0+0xf38>  // b.pmore
    8f18:	and	w4, w4, #0xffff
    8f1c:	add	x5, x23, w0, uxtw #1
    8f20:	add	w0, w0, #0x1
    8f24:	cmp	w1, w0
    8f28:	strh	w4, [x5, #152]
    8f2c:	b.ne	8f1c <inflateBack@@ZLIB_1.2.0+0xdbc>  // b.any
    8f30:	mov	w0, w1
    8f34:	str	w1, [x23, #140]
    8f38:	b	8e44 <inflateBack@@ZLIB_1.2.0+0xce4>
    8f3c:	add	w3, w2, #0x3
    8f40:	cmp	w3, w27
    8f44:	b.ls	8f90 <inflateBack@@ZLIB_1.2.0+0xe30>  // b.plast
    8f48:	mov	x1, x21
    8f4c:	mov	x0, x24
    8f50:	cbnz	w22, 8f68 <inflateBack@@ZLIB_1.2.0+0xe08>
    8f54:	stp	w2, w3, [sp, #184]
    8f58:	blr	x19
    8f5c:	mov	w22, w0
    8f60:	ldp	w2, w3, [sp, #184]
    8f64:	cbz	w0, 8480 <inflateBack@@ZLIB_1.2.0+0x320>
    8f68:	ldr	x0, [sp, #200]
    8f6c:	sub	w22, w22, #0x1
    8f70:	add	x1, x0, #0x1
    8f74:	str	x1, [sp, #200]
    8f78:	ldrb	w0, [x0]
    8f7c:	lsl	x0, x0, x27
    8f80:	add	w27, w27, #0x8
    8f84:	add	x28, x28, x0
    8f88:	cmp	w27, w3
    8f8c:	b.cc	8f48 <inflateBack@@ZLIB_1.2.0+0xde8>  // b.lo, b.ul, b.last
    8f90:	lsr	x8, x28, x2
    8f94:	mov	w0, #0xfffffffd            	// #-3
    8f98:	and	w1, w8, #0x7
    8f9c:	sub	w2, w0, w2
    8fa0:	add	w27, w27, w2
    8fa4:	ldr	w0, [x23, #140]
    8fa8:	add	w1, w1, #0x3
    8fac:	lsr	x28, x8, #3
    8fb0:	mov	w4, #0x0                   	// #0
    8fb4:	b	8f04 <inflateBack@@ZLIB_1.2.0+0xda4>
    8fb8:	ldrb	w2, [x3, x0]
    8fbc:	ldrh	w6, [x5, #2]
    8fc0:	b	8a30 <inflateBack@@ZLIB_1.2.0+0x8d0>
    8fc4:	ldrb	w2, [x3, x0]
    8fc8:	ldrh	w0, [x4, #2]
    8fcc:	b	88fc <inflateBack@@ZLIB_1.2.0+0x79c>
    8fd0:	cmp	w2, w27
    8fd4:	b.ls	901c <inflateBack@@ZLIB_1.2.0+0xebc>  // b.plast
    8fd8:	mov	x1, x21
    8fdc:	mov	x0, x24
    8fe0:	cbnz	w22, 8ff4 <inflateBack@@ZLIB_1.2.0+0xe94>
    8fe4:	blr	x19
    8fe8:	mov	w22, w0
    8fec:	cbz	w0, 8480 <inflateBack@@ZLIB_1.2.0+0x320>
    8ff0:	ldr	w2, [x23, #100]
    8ff4:	ldr	x0, [sp, #200]
    8ff8:	sub	w22, w22, #0x1
    8ffc:	add	x1, x0, #0x1
    9000:	str	x1, [sp, #200]
    9004:	ldrb	w0, [x0]
    9008:	lsl	x0, x0, x27
    900c:	add	w27, w27, #0x8
    9010:	add	x28, x28, x0
    9014:	cmp	w27, w2
    9018:	b.cc	8fd8 <inflateBack@@ZLIB_1.2.0+0xe78>  // b.lo, b.ul, b.last
    901c:	ldr	w0, [x23, #96]
    9020:	mov	w1, #0xffffffff            	// #-1
    9024:	lsl	w1, w1, w2
    9028:	bic	w1, w28, w1
    902c:	add	w1, w1, w0
    9030:	sub	w27, w27, w2
    9034:	lsr	x28, x28, x2
    9038:	str	w1, [x23, #96]
    903c:	b	8a98 <inflateBack@@ZLIB_1.2.0+0x938>
    9040:	ldr	w1, [x23, #8]
    9044:	b	81ec <inflateBack@@ZLIB_1.2.0+0x8c>
    9048:	ldrb	w2, [x3, x0]
    904c:	ldrh	w6, [x5, #2]
    9050:	b	8d78 <inflateBack@@ZLIB_1.2.0+0xc18>
    9054:	ldp	x3, x5, [sp, #152]
    9058:	mov	w0, #0x9                   	// #9
    905c:	ldp	x1, x4, [sp, #168]
    9060:	str	x1, [x23, #104]
    9064:	ldr	w2, [x23, #132]
    9068:	str	x1, [x23, #144]
    906c:	ldr	x1, [sp, #144]
    9070:	str	w0, [x23, #120]
    9074:	mov	w0, #0x1                   	// #1
    9078:	bl	caa0 <inflateCodesUsed@@ZLIB_1.2.9+0x68>
    907c:	cbz	w0, 9138 <inflateBack@@ZLIB_1.2.0+0xfd8>
    9080:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    9084:	add	x0, x0, #0x678
    9088:	str	x0, [x25, #48]
    908c:	mov	w1, w26
    9090:	str	w26, [x23, #8]
    9094:	b	81ec <inflateBack@@ZLIB_1.2.0+0x8c>
    9098:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    909c:	add	x0, x0, #0x630
    90a0:	str	x0, [x25, #48]
    90a4:	mov	w1, #0x3f51                	// #16209
    90a8:	mov	w0, #0x3f51                	// #16209
    90ac:	str	w0, [x23, #8]
    90b0:	b	81ec <inflateBack@@ZLIB_1.2.0+0x8c>
    90b4:	add	w3, w2, #0x2
    90b8:	cmp	w3, w27
    90bc:	b.ls	9108 <inflateBack@@ZLIB_1.2.0+0xfa8>  // b.plast
    90c0:	mov	x1, x21
    90c4:	mov	x0, x24
    90c8:	cbnz	w22, 90e0 <inflateBack@@ZLIB_1.2.0+0xf80>
    90cc:	stp	w2, w3, [sp, #184]
    90d0:	blr	x19
    90d4:	mov	w22, w0
    90d8:	ldp	w2, w3, [sp, #184]
    90dc:	cbz	w0, 8480 <inflateBack@@ZLIB_1.2.0+0x320>
    90e0:	ldr	x0, [sp, #200]
    90e4:	sub	w22, w22, #0x1
    90e8:	add	x1, x0, #0x1
    90ec:	str	x1, [sp, #200]
    90f0:	ldrb	w0, [x0]
    90f4:	lsl	x0, x0, x27
    90f8:	add	w27, w27, #0x8
    90fc:	add	x28, x28, x0
    9100:	cmp	w27, w3
    9104:	b.cc	90c0 <inflateBack@@ZLIB_1.2.0+0xf60>  // b.lo, b.ul, b.last
    9108:	ldr	w0, [x23, #140]
    910c:	sub	w27, w27, w2
    9110:	lsr	x28, x28, x2
    9114:	cbz	w0, 9098 <inflateBack@@ZLIB_1.2.0+0xf38>
    9118:	sub	w2, w0, #0x1
    911c:	and	w1, w28, #0x3
    9120:	sub	w27, w27, #0x2
    9124:	add	w1, w1, #0x3
    9128:	add	x2, x23, x2, lsl #1
    912c:	lsr	x28, x28, #2
    9130:	ldrh	w4, [x2, #152]
    9134:	b	8f04 <inflateBack@@ZLIB_1.2.0+0xda4>
    9138:	ldp	x6, x3, [sp, #144]
    913c:	mov	x4, x23
    9140:	ldp	w1, w2, [x23, #132]
    9144:	ldr	x0, [x23, #144]
    9148:	str	x0, [x23, #112]
    914c:	ldr	x5, [sp, #160]
    9150:	mov	w0, #0x6                   	// #6
    9154:	str	w0, [x4, #124]!
    9158:	add	x1, x6, x1, lsl #1
    915c:	mov	w0, #0x2                   	// #2
    9160:	bl	caa0 <inflateCodesUsed@@ZLIB_1.2.9+0x68>
    9164:	cbz	w0, 9180 <inflateBack@@ZLIB_1.2.0+0x1020>
    9168:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    916c:	add	x0, x0, #0x698
    9170:	str	x0, [x25, #48]
    9174:	mov	w1, w26
    9178:	str	w26, [x23, #8]
    917c:	b	81ec <inflateBack@@ZLIB_1.2.0+0x8c>
    9180:	mov	w0, #0x3f48                	// #16200
    9184:	str	w0, [x23, #8]
    9188:	b	82b0 <inflateBack@@ZLIB_1.2.0+0x150>
    918c:	nop

0000000000009190 <inflateBackEnd@@ZLIB_1.2.0>:
    9190:	cbz	x0, 91d8 <inflateBackEnd@@ZLIB_1.2.0+0x48>
    9194:	stp	x29, x30, [sp, #-32]!
    9198:	mov	x29, sp
    919c:	ldr	x1, [x0, #56]
    91a0:	str	x19, [sp, #16]
    91a4:	mov	x19, x0
    91a8:	cbz	x1, 91d0 <inflateBackEnd@@ZLIB_1.2.0+0x40>
    91ac:	ldr	x2, [x0, #72]
    91b0:	cbz	x2, 91d0 <inflateBackEnd@@ZLIB_1.2.0+0x40>
    91b4:	ldr	x0, [x0, #80]
    91b8:	blr	x2
    91bc:	str	xzr, [x19, #56]
    91c0:	mov	w0, #0x0                   	// #0
    91c4:	ldr	x19, [sp, #16]
    91c8:	ldp	x29, x30, [sp], #32
    91cc:	ret
    91d0:	mov	w0, #0xfffffffe            	// #-2
    91d4:	b	91c4 <inflateBackEnd@@ZLIB_1.2.0+0x34>
    91d8:	mov	w0, #0xfffffffe            	// #-2
    91dc:	ret
    91e0:	stp	x29, x30, [sp, #-144]!
    91e4:	mov	w13, #0x1                   	// #1
    91e8:	mov	w6, w13
    91ec:	mov	x29, sp
    91f0:	ldr	x8, [x0, #56]
    91f4:	stp	x19, x20, [sp, #16]
    91f8:	ldr	w11, [x0, #32]
    91fc:	ldr	w12, [x0, #8]
    9200:	ldp	x18, x2, [x8, #72]
    9204:	sub	w17, w1, w11
    9208:	ldr	w15, [x8, #68]
    920c:	sub	w12, w12, #0x5
    9210:	ldp	w10, w16, [x8, #120]
    9214:	stp	x21, x22, [sp, #32]
    9218:	mov	w22, #0xffffffff            	// #-1
    921c:	ldp	w19, w1, [x8, #60]
    9220:	add	w30, w15, w22
    9224:	ldr	x7, [x0]
    9228:	and	x20, x15, #0xfffffff0
    922c:	ldr	x5, [x0, #24]
    9230:	sub	w11, w11, #0x101
    9234:	ldp	x4, x9, [x8, #104]
    9238:	and	w21, w15, #0xfffffff0
    923c:	ldr	w3, [x8, #88]
    9240:	lsl	w16, w13, w16
    9244:	str	w1, [sp, #96]
    9248:	mov	w1, w30
    924c:	lsl	w13, w13, w10
    9250:	add	x12, x7, x12
    9254:	sub	x17, x5, x17
    9258:	add	x11, x5, x11
    925c:	add	w16, w16, w22
    9260:	add	w13, w13, w22
    9264:	stp	x23, x24, [sp, #48]
    9268:	add	x24, x18, x20
    926c:	stp	x27, x28, [sp, #80]
    9270:	sub	w28, w30, w21
    9274:	str	x1, [sp, #104]
    9278:	add	w1, w19, w15
    927c:	str	w1, [sp, #100]
    9280:	add	x1, x18, #0x10
    9284:	str	x20, [sp, #112]
    9288:	str	x1, [sp, #120]
    928c:	cmp	w3, #0xe
    9290:	b.hi	92b8 <inflateBackEnd@@ZLIB_1.2.0+0x128>  // b.pmore
    9294:	ldrb	w1, [x7, #1]
    9298:	add	w14, w3, #0x8
    929c:	ldrb	w10, [x7]
    92a0:	add	x7, x7, #0x2
    92a4:	lsl	x1, x1, x14
    92a8:	lsl	x10, x10, x3
    92ac:	add	x1, x1, x10
    92b0:	add	x2, x2, x1
    92b4:	add	w3, w3, #0x10
    92b8:	and	x1, x2, x13
    92bc:	b	92d8 <inflateBackEnd@@ZLIB_1.2.0+0x148>
    92c0:	tbnz	w1, #4, 9384 <inflateBackEnd@@ZLIB_1.2.0+0x1f4>
    92c4:	tbnz	w1, #6, 94d4 <inflateBackEnd@@ZLIB_1.2.0+0x344>
    92c8:	lsl	w1, w6, w1
    92cc:	sub	w1, w1, #0x1
    92d0:	and	x1, x1, x2
    92d4:	add	x1, x1, w14, uxth
    92d8:	lsl	x1, x1, #2
    92dc:	add	x14, x4, x1
    92e0:	ldrb	w1, [x4, x1]
    92e4:	ldrb	w10, [x14, #1]
    92e8:	ldrh	w14, [x14, #2]
    92ec:	sub	w3, w3, w10
    92f0:	lsr	x2, x2, x10
    92f4:	cbnz	w1, 92c0 <inflateBackEnd@@ZLIB_1.2.0+0x130>
    92f8:	strb	w14, [x5], #1
    92fc:	cmp	x7, x12
    9300:	ccmp	x5, x11, #0x2, cc  // cc = lo, ul, last
    9304:	b.cc	928c <inflateBackEnd@@ZLIB_1.2.0+0xfc>  // b.lo, b.ul, b.last
    9308:	lsr	w1, w3, #3
    930c:	sub	x9, x11, x5
    9310:	sub	x7, x7, x1
    9314:	and	w3, w3, #0x7
    9318:	sub	x1, x12, x7
    931c:	sub	w6, w12, w7
    9320:	cmp	x12, x7
    9324:	add	w1, w1, #0x5
    9328:	sub	w4, w11, w5
    932c:	add	w6, w6, #0x5
    9330:	csel	w6, w6, w1, ls  // ls = plast
    9334:	add	w9, w9, #0x101
    9338:	cmp	x5, x11
    933c:	add	w4, w4, #0x101
    9340:	mov	w1, #0x1                   	// #1
    9344:	csel	w4, w4, w9, cs  // cs = hs, nlast
    9348:	lsl	w1, w1, w3
    934c:	sub	w1, w1, #0x1
    9350:	ldp	x19, x20, [sp, #16]
    9354:	and	x2, x1, x2
    9358:	ldp	x21, x22, [sp, #32]
    935c:	ldp	x23, x24, [sp, #48]
    9360:	ldp	x27, x28, [sp, #80]
    9364:	str	x7, [x0]
    9368:	str	w6, [x0, #8]
    936c:	str	x5, [x0, #24]
    9370:	str	w4, [x0, #32]
    9374:	str	x2, [x8, #80]
    9378:	str	w3, [x8, #88]
    937c:	ldp	x29, x30, [sp], #144
    9380:	ret
    9384:	ands	w10, w1, #0xf
    9388:	mov	w1, w14
    938c:	b.eq	93bc <inflateBackEnd@@ZLIB_1.2.0+0x22c>  // b.none
    9390:	cmp	w10, w3
    9394:	b.ls	93a8 <inflateBackEnd@@ZLIB_1.2.0+0x218>  // b.plast
    9398:	ldrb	w1, [x7], #1
    939c:	lsl	x1, x1, x3
    93a0:	add	w3, w3, #0x8
    93a4:	add	x2, x2, x1
    93a8:	lsl	w1, w22, w10
    93ac:	bic	w1, w2, w1
    93b0:	sub	w3, w3, w10
    93b4:	add	w1, w14, w1
    93b8:	lsr	x2, x2, x10
    93bc:	cmp	w3, #0xe
    93c0:	b.ls	94e4 <inflateBackEnd@@ZLIB_1.2.0+0x354>  // b.plast
    93c4:	and	x10, x16, x2
    93c8:	b	93e0 <inflateBackEnd@@ZLIB_1.2.0+0x250>
    93cc:	tbnz	w10, #6, 9524 <inflateBackEnd@@ZLIB_1.2.0+0x394>
    93d0:	lsl	w10, w6, w10
    93d4:	sub	w10, w10, #0x1
    93d8:	and	x10, x10, x2
    93dc:	add	x10, x10, w23, uxth
    93e0:	lsl	x10, x10, #2
    93e4:	add	x23, x9, x10
    93e8:	ldrb	w10, [x9, x10]
    93ec:	ldrb	w14, [x23, #1]
    93f0:	ldrh	w23, [x23, #2]
    93f4:	sub	w3, w3, w14
    93f8:	lsr	x2, x2, x14
    93fc:	tbz	w10, #4, 93cc <inflateBackEnd@@ZLIB_1.2.0+0x23c>
    9400:	stp	x25, x26, [sp, #64]
    9404:	and	w10, w10, #0xf
    9408:	cmp	w10, w3
    940c:	b.ls	9430 <inflateBackEnd@@ZLIB_1.2.0+0x2a0>  // b.plast
    9410:	ldrb	w14, [x7]
    9414:	add	w25, w3, #0x8
    9418:	cmp	w10, w25
    941c:	lsl	x14, x14, x3
    9420:	add	x2, x2, x14
    9424:	b.hi	9710 <inflateBackEnd@@ZLIB_1.2.0+0x580>  // b.pmore
    9428:	add	x7, x7, #0x1
    942c:	mov	w3, w25
    9430:	lsl	w14, w22, w10
    9434:	bic	w14, w2, w14
    9438:	add	w14, w14, w23
    943c:	sub	x25, x5, x17
    9440:	sub	w3, w3, w10
    9444:	cmp	w14, w25
    9448:	lsr	x2, x2, x10
    944c:	b.ls	96cc <inflateBackEnd@@ZLIB_1.2.0+0x53c>  // b.plast
    9450:	ldr	w10, [sp, #96]
    9454:	sub	w23, w14, w25
    9458:	cmp	w10, w23
    945c:	b.cs	9468 <inflateBackEnd@@ZLIB_1.2.0+0x2d8>  // b.hs, b.nlast
    9460:	ldr	w10, [x8, #7144]
    9464:	cbnz	w10, 98e4 <inflateBackEnd@@ZLIB_1.2.0+0x754>
    9468:	sub	w25, w25, w14
    946c:	cbnz	w15, 953c <inflateBackEnd@@ZLIB_1.2.0+0x3ac>
    9470:	add	w26, w19, w25
    9474:	cmp	w1, w23
    9478:	add	x10, x18, x26
    947c:	b.hi	9914 <inflateBackEnd@@ZLIB_1.2.0+0x784>  // b.pmore
    9480:	cmp	w1, #0x2
    9484:	b.ls	94b4 <inflateBackEnd@@ZLIB_1.2.0+0x324>  // b.plast
    9488:	ldrb	w14, [x10]
    948c:	add	x10, x10, #0x3
    9490:	strb	w14, [x5]
    9494:	add	x5, x5, #0x3
    9498:	sub	w1, w1, #0x3
    949c:	ldurb	w14, [x10, #-2]
    94a0:	cmp	w1, #0x2
    94a4:	sturb	w14, [x5, #-2]
    94a8:	ldurb	w14, [x10, #-1]
    94ac:	sturb	w14, [x5, #-1]
    94b0:	b.hi	9488 <inflateBackEnd@@ZLIB_1.2.0+0x2f8>  // b.pmore
    94b4:	cbz	w1, 9708 <inflateBackEnd@@ZLIB_1.2.0+0x578>
    94b8:	ldrb	w14, [x10]
    94bc:	cmp	w1, #0x2
    94c0:	strb	w14, [x5]
    94c4:	b.eq	9900 <inflateBackEnd@@ZLIB_1.2.0+0x770>  // b.none
    94c8:	add	x5, x5, #0x1
    94cc:	ldp	x25, x26, [sp, #64]
    94d0:	b	92fc <inflateBackEnd@@ZLIB_1.2.0+0x16c>
    94d4:	tbz	w1, #5, 950c <inflateBackEnd@@ZLIB_1.2.0+0x37c>
    94d8:	mov	w1, #0x3f3f                	// #16191
    94dc:	str	w1, [x8, #8]
    94e0:	b	9308 <inflateBackEnd@@ZLIB_1.2.0+0x178>
    94e4:	ldrb	w10, [x7, #1]
    94e8:	add	w23, w3, #0x8
    94ec:	ldrb	w14, [x7]
    94f0:	add	x7, x7, #0x2
    94f4:	lsl	x10, x10, x23
    94f8:	lsl	x14, x14, x3
    94fc:	add	x10, x10, x14
    9500:	add	x2, x2, x10
    9504:	add	w3, w3, #0x10
    9508:	b	93c4 <inflateBackEnd@@ZLIB_1.2.0+0x234>
    950c:	adrp	x1, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    9510:	add	x1, x1, #0x6b0
    9514:	str	x1, [x0, #48]
    9518:	mov	w1, #0x3f51                	// #16209
    951c:	str	w1, [x8, #8]
    9520:	b	9308 <inflateBackEnd@@ZLIB_1.2.0+0x178>
    9524:	adrp	x1, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    9528:	add	x1, x1, #0x6d0
    952c:	str	x1, [x0, #48]
    9530:	mov	w1, #0x3f51                	// #16209
    9534:	str	w1, [x8, #8]
    9538:	b	9308 <inflateBackEnd@@ZLIB_1.2.0+0x178>
    953c:	cmp	w15, w23
    9540:	b.cs	9728 <inflateBackEnd@@ZLIB_1.2.0+0x598>  // b.hs, b.nlast
    9544:	ldr	w10, [sp, #100]
    9548:	sub	w23, w23, w15
    954c:	cmp	w1, w23
    9550:	add	w26, w10, w25
    9554:	add	x10, x18, x26
    9558:	b.ls	9480 <inflateBackEnd@@ZLIB_1.2.0+0x2f0>  // b.plast
    955c:	add	x26, x26, #0x10
    9560:	add	w1, w1, w15
    9564:	add	x27, x18, x26
    9568:	add	x26, x5, #0x10
    956c:	cmp	x5, x27
    9570:	sub	w27, w23, #0x1
    9574:	str	w27, [sp, #128]
    9578:	ccmp	x10, x26, #0x2, cc  // cc = lo, ul, last
    957c:	add	w1, w1, w25
    9580:	ccmp	w27, #0xe, #0x0, cs  // cs = hs, nlast
    9584:	b.ls	9ab0 <inflateBackEnd@@ZLIB_1.2.0+0x920>  // b.plast
    9588:	and	x26, x23, #0xfffffff0
    958c:	mov	x25, #0x0                   	// #0
    9590:	ldr	q0, [x10, x25]
    9594:	str	q0, [x5, x25]
    9598:	add	x25, x25, #0x10
    959c:	cmp	x25, x26
    95a0:	b.ne	9590 <inflateBackEnd@@ZLIB_1.2.0+0x400>  // b.any
    95a4:	str	w27, [sp, #128]
    95a8:	and	x25, x23, #0xfffffff0
    95ac:	tst	x23, #0xf
    95b0:	add	x26, x5, x25
    95b4:	and	w23, w23, #0xfffffff0
    95b8:	add	x25, x10, x25
    95bc:	b.eq	96ac <inflateBackEnd@@ZLIB_1.2.0+0x51c>  // b.none
    95c0:	ldrb	w10, [x10, w23, uxtw]
    95c4:	strb	w10, [x5, w23, uxtw]
    95c8:	ldr	w10, [sp, #128]
    95cc:	subs	w10, w10, w23
    95d0:	b.eq	96ac <inflateBackEnd@@ZLIB_1.2.0+0x51c>  // b.none
    95d4:	ldrb	w23, [x25, #1]
    95d8:	cmp	w10, #0x1
    95dc:	strb	w23, [x26, #1]
    95e0:	b.eq	96ac <inflateBackEnd@@ZLIB_1.2.0+0x51c>  // b.none
    95e4:	ldrb	w23, [x25, #2]
    95e8:	cmp	w10, #0x2
    95ec:	strb	w23, [x26, #2]
    95f0:	b.eq	96ac <inflateBackEnd@@ZLIB_1.2.0+0x51c>  // b.none
    95f4:	ldrb	w23, [x25, #3]
    95f8:	cmp	w10, #0x3
    95fc:	strb	w23, [x26, #3]
    9600:	b.eq	96ac <inflateBackEnd@@ZLIB_1.2.0+0x51c>  // b.none
    9604:	ldrb	w23, [x25, #4]
    9608:	cmp	w10, #0x4
    960c:	strb	w23, [x26, #4]
    9610:	b.eq	96ac <inflateBackEnd@@ZLIB_1.2.0+0x51c>  // b.none
    9614:	ldrb	w23, [x25, #5]
    9618:	cmp	w10, #0x5
    961c:	strb	w23, [x26, #5]
    9620:	b.eq	96ac <inflateBackEnd@@ZLIB_1.2.0+0x51c>  // b.none
    9624:	ldrb	w23, [x25, #6]
    9628:	cmp	w10, #0x6
    962c:	strb	w23, [x26, #6]
    9630:	b.eq	96ac <inflateBackEnd@@ZLIB_1.2.0+0x51c>  // b.none
    9634:	ldrb	w23, [x25, #7]
    9638:	cmp	w10, #0x7
    963c:	strb	w23, [x26, #7]
    9640:	b.eq	96ac <inflateBackEnd@@ZLIB_1.2.0+0x51c>  // b.none
    9644:	ldrb	w23, [x25, #8]
    9648:	cmp	w10, #0x8
    964c:	strb	w23, [x26, #8]
    9650:	b.eq	96ac <inflateBackEnd@@ZLIB_1.2.0+0x51c>  // b.none
    9654:	ldrb	w23, [x25, #9]
    9658:	cmp	w10, #0x9
    965c:	strb	w23, [x26, #9]
    9660:	b.eq	96ac <inflateBackEnd@@ZLIB_1.2.0+0x51c>  // b.none
    9664:	ldrb	w23, [x25, #10]
    9668:	cmp	w10, #0xa
    966c:	strb	w23, [x26, #10]
    9670:	b.eq	96ac <inflateBackEnd@@ZLIB_1.2.0+0x51c>  // b.none
    9674:	ldrb	w23, [x25, #11]
    9678:	cmp	w10, #0xb
    967c:	strb	w23, [x26, #11]
    9680:	b.eq	96ac <inflateBackEnd@@ZLIB_1.2.0+0x51c>  // b.none
    9684:	ldrb	w23, [x25, #12]
    9688:	cmp	w10, #0xc
    968c:	strb	w23, [x26, #12]
    9690:	b.eq	96ac <inflateBackEnd@@ZLIB_1.2.0+0x51c>  // b.none
    9694:	ldrb	w23, [x25, #13]
    9698:	cmp	w10, #0xd
    969c:	strb	w23, [x26, #13]
    96a0:	b.eq	96ac <inflateBackEnd@@ZLIB_1.2.0+0x51c>  // b.none
    96a4:	ldrb	w10, [x25, #14]
    96a8:	strb	w10, [x26, #14]
    96ac:	ldr	w10, [sp, #128]
    96b0:	cmp	w15, w1
    96b4:	add	x23, x10, #0x1
    96b8:	add	x23, x5, x23
    96bc:	b.cc	9af4 <inflateBackEnd@@ZLIB_1.2.0+0x964>  // b.lo, b.ul, b.last
    96c0:	mov	x5, x23
    96c4:	mov	x10, x18
    96c8:	b	9480 <inflateBackEnd@@ZLIB_1.2.0+0x2f0>
    96cc:	sub	x14, x5, w14, uxtw
    96d0:	ldrb	w10, [x14]
    96d4:	mov	x25, x14
    96d8:	strb	w10, [x5]
    96dc:	add	x14, x14, #0x3
    96e0:	mov	x23, x5
    96e4:	add	x5, x5, #0x3
    96e8:	ldurb	w10, [x14, #-2]
    96ec:	sub	w1, w1, #0x3
    96f0:	sturb	w10, [x5, #-2]
    96f4:	cmp	w1, #0x2
    96f8:	ldurb	w10, [x14, #-1]
    96fc:	sturb	w10, [x5, #-1]
    9700:	b.hi	96d0 <inflateBackEnd@@ZLIB_1.2.0+0x540>  // b.pmore
    9704:	cbnz	w1, 98cc <inflateBackEnd@@ZLIB_1.2.0+0x73c>
    9708:	ldp	x25, x26, [sp, #64]
    970c:	b	92fc <inflateBackEnd@@ZLIB_1.2.0+0x16c>
    9710:	ldrb	w14, [x7, #1]
    9714:	add	w3, w3, #0x10
    9718:	add	x7, x7, #0x2
    971c:	lsl	x25, x14, x25
    9720:	add	x2, x2, x25
    9724:	b	9430 <inflateBackEnd@@ZLIB_1.2.0+0x2a0>
    9728:	add	w26, w15, w25
    972c:	cmp	w1, w23
    9730:	add	x10, x18, x26
    9734:	b.ls	9480 <inflateBackEnd@@ZLIB_1.2.0+0x2f0>  // b.plast
    9738:	add	x26, x26, #0x10
    973c:	add	w1, w1, w25
    9740:	add	x25, x18, x26
    9744:	add	x26, x5, #0x10
    9748:	cmp	x5, x25
    974c:	sub	w25, w23, #0x1
    9750:	str	w25, [sp, #128]
    9754:	ccmp	x10, x26, #0x2, cc  // cc = lo, ul, last
    9758:	ccmp	w25, #0xe, #0x0, cs  // cs = hs, nlast
    975c:	b.ls	9ad4 <inflateBackEnd@@ZLIB_1.2.0+0x944>  // b.plast
    9760:	sub	w25, w23, #0x10
    9764:	mov	x26, #0x0                   	// #0
    9768:	mov	w27, #0x0                   	// #0
    976c:	str	x0, [sp, #136]
    9770:	lsr	w25, w25, #4
    9774:	add	w25, w25, #0x1
    9778:	str	w25, [sp, #132]
    977c:	ldr	w25, [sp, #128]
    9780:	ldr	q0, [x10, x26]
    9784:	add	w27, w27, #0x1
    9788:	ldr	w0, [sp, #132]
    978c:	str	q0, [x5, x26]
    9790:	cmp	w0, w27
    9794:	add	x26, x26, #0x10
    9798:	b.hi	9780 <inflateBackEnd@@ZLIB_1.2.0+0x5f0>  // b.pmore
    979c:	ldr	w27, [sp, #132]
    97a0:	str	w25, [sp, #128]
    97a4:	ldr	x0, [sp, #136]
    97a8:	lsl	w26, w27, #4
    97ac:	cmp	w23, w27, lsl #4
    97b0:	lsl	w23, w27, #4
    97b4:	mov	w25, w23
    97b8:	add	x23, x5, x26
    97bc:	add	x26, x10, x26
    97c0:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    97c4:	ldrb	w10, [x10, w25, uxtw]
    97c8:	str	w10, [sp, #132]
    97cc:	ldr	w10, [sp, #128]
    97d0:	subs	w27, w10, w25
    97d4:	ldrb	w10, [sp, #132]
    97d8:	strb	w10, [x5, w25, uxtw]
    97dc:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    97e0:	ldrb	w10, [x26, #1]
    97e4:	cmp	w27, #0x1
    97e8:	strb	w10, [x23, #1]
    97ec:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    97f0:	ldrb	w10, [x26, #2]
    97f4:	cmp	w27, #0x2
    97f8:	strb	w10, [x23, #2]
    97fc:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    9800:	ldrb	w10, [x26, #3]
    9804:	cmp	w27, #0x3
    9808:	strb	w10, [x23, #3]
    980c:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    9810:	ldrb	w10, [x26, #4]
    9814:	cmp	w27, #0x4
    9818:	strb	w10, [x23, #4]
    981c:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    9820:	ldrb	w10, [x26, #5]
    9824:	cmp	w27, #0x5
    9828:	strb	w10, [x23, #5]
    982c:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    9830:	ldrb	w10, [x26, #6]
    9834:	cmp	w27, #0x6
    9838:	strb	w10, [x23, #6]
    983c:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    9840:	ldrb	w10, [x26, #7]
    9844:	cmp	w27, #0x7
    9848:	strb	w10, [x23, #7]
    984c:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    9850:	ldrb	w10, [x26, #8]
    9854:	cmp	w27, #0x8
    9858:	strb	w10, [x23, #8]
    985c:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    9860:	ldrb	w10, [x26, #9]
    9864:	cmp	w27, #0x9
    9868:	strb	w10, [x23, #9]
    986c:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    9870:	ldrb	w10, [x26, #10]
    9874:	cmp	w27, #0xa
    9878:	strb	w10, [x23, #10]
    987c:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    9880:	ldrb	w10, [x26, #11]
    9884:	cmp	w27, #0xb
    9888:	strb	w10, [x23, #11]
    988c:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    9890:	ldrb	w10, [x26, #12]
    9894:	cmp	w27, #0xc
    9898:	strb	w10, [x23, #12]
    989c:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    98a0:	ldrb	w10, [x26, #13]
    98a4:	cmp	w27, #0xd
    98a8:	strb	w10, [x23, #13]
    98ac:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    98b0:	ldrb	w10, [x26, #14]
    98b4:	ldr	w25, [sp, #128]
    98b8:	strb	w10, [x23, #14]
    98bc:	add	x25, x25, #0x1
    98c0:	add	x5, x5, x25
    98c4:	sub	x10, x5, w14, uxtw
    98c8:	b	9480 <inflateBackEnd@@ZLIB_1.2.0+0x2f0>
    98cc:	ldrb	w5, [x25, #3]
    98d0:	strb	w5, [x23, #3]
    98d4:	b.eq	9a7c <inflateBackEnd@@ZLIB_1.2.0+0x8ec>  // b.none
    98d8:	add	x5, x23, #0x4
    98dc:	ldp	x25, x26, [sp, #64]
    98e0:	b	92fc <inflateBackEnd@@ZLIB_1.2.0+0x16c>
    98e4:	adrp	x1, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    98e8:	add	x1, x1, #0x6e8
    98ec:	ldp	x25, x26, [sp, #64]
    98f0:	str	x1, [x0, #48]
    98f4:	mov	w1, #0x3f51                	// #16209
    98f8:	str	w1, [x8, #8]
    98fc:	b	9308 <inflateBackEnd@@ZLIB_1.2.0+0x178>
    9900:	ldrb	w1, [x10, #1]
    9904:	add	x5, x5, #0x2
    9908:	sturb	w1, [x5, #-1]
    990c:	ldp	x25, x26, [sp, #64]
    9910:	b	92fc <inflateBackEnd@@ZLIB_1.2.0+0x16c>
    9914:	add	x26, x26, #0x10
    9918:	add	w1, w1, w25
    991c:	add	x25, x18, x26
    9920:	sub	w27, w23, #0x1
    9924:	add	x26, x5, #0x10
    9928:	cmp	x5, x25
    992c:	str	w27, [sp, #128]
    9930:	ccmp	x10, x26, #0x2, cc  // cc = lo, ul, last
    9934:	ccmp	w27, #0xe, #0x0, cs  // cs = hs, nlast
    9938:	b.ls	9a90 <inflateBackEnd@@ZLIB_1.2.0+0x900>  // b.plast
    993c:	sub	w27, w23, #0x10
    9940:	mov	w26, #0x0                   	// #0
    9944:	mov	x25, #0x0                   	// #0
    9948:	lsr	w27, w27, #4
    994c:	add	w27, w27, #0x1
    9950:	ldr	q0, [x10, x25]
    9954:	add	w26, w26, #0x1
    9958:	cmp	w27, w26
    995c:	str	q0, [x5, x25]
    9960:	add	x25, x25, #0x10
    9964:	b.hi	9950 <inflateBackEnd@@ZLIB_1.2.0+0x7c0>  // b.pmore
    9968:	lsl	w25, w27, #4
    996c:	cmp	w23, w27, lsl #4
    9970:	add	x23, x5, x25
    9974:	lsl	w27, w27, #4
    9978:	add	x25, x10, x25
    997c:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    9980:	ldrb	w10, [x10, w27, uxtw]
    9984:	ldr	w26, [sp, #128]
    9988:	strb	w10, [x5, w27, uxtw]
    998c:	subs	w26, w26, w27
    9990:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    9994:	ldrb	w10, [x25, #1]
    9998:	cmp	w26, #0x1
    999c:	strb	w10, [x23, #1]
    99a0:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    99a4:	ldrb	w10, [x25, #2]
    99a8:	cmp	w26, #0x2
    99ac:	strb	w10, [x23, #2]
    99b0:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    99b4:	ldrb	w10, [x25, #3]
    99b8:	cmp	w26, #0x3
    99bc:	strb	w10, [x23, #3]
    99c0:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    99c4:	ldrb	w10, [x25, #4]
    99c8:	cmp	w26, #0x4
    99cc:	strb	w10, [x23, #4]
    99d0:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    99d4:	ldrb	w10, [x25, #5]
    99d8:	cmp	w26, #0x5
    99dc:	strb	w10, [x23, #5]
    99e0:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    99e4:	ldrb	w10, [x25, #6]
    99e8:	cmp	w26, #0x6
    99ec:	strb	w10, [x23, #6]
    99f0:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    99f4:	ldrb	w10, [x25, #7]
    99f8:	cmp	w26, #0x7
    99fc:	strb	w10, [x23, #7]
    9a00:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    9a04:	ldrb	w10, [x25, #8]
    9a08:	cmp	w26, #0x8
    9a0c:	strb	w10, [x23, #8]
    9a10:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    9a14:	ldrb	w10, [x25, #9]
    9a18:	cmp	w26, #0x9
    9a1c:	strb	w10, [x23, #9]
    9a20:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    9a24:	ldrb	w10, [x25, #10]
    9a28:	cmp	w26, #0xa
    9a2c:	strb	w10, [x23, #10]
    9a30:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    9a34:	ldrb	w10, [x25, #11]
    9a38:	cmp	w26, #0xb
    9a3c:	strb	w10, [x23, #11]
    9a40:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    9a44:	ldrb	w10, [x25, #12]
    9a48:	cmp	w26, #0xc
    9a4c:	strb	w10, [x23, #12]
    9a50:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    9a54:	ldrb	w10, [x25, #13]
    9a58:	cmp	w26, #0xd
    9a5c:	strb	w10, [x23, #13]
    9a60:	b.eq	9a74 <inflateBackEnd@@ZLIB_1.2.0+0x8e4>  // b.none
    9a64:	ldrb	w10, [x25, #14]
    9a68:	ldr	w25, [sp, #128]
    9a6c:	strb	w10, [x23, #14]
    9a70:	b	98bc <inflateBackEnd@@ZLIB_1.2.0+0x72c>
    9a74:	ldr	w25, [sp, #128]
    9a78:	b	98bc <inflateBackEnd@@ZLIB_1.2.0+0x72c>
    9a7c:	ldrb	w1, [x25, #4]
    9a80:	add	x5, x23, #0x5
    9a84:	strb	w1, [x23, #4]
    9a88:	ldp	x25, x26, [sp, #64]
    9a8c:	b	92fc <inflateBackEnd@@ZLIB_1.2.0+0x16c>
    9a90:	ldr	w25, [sp, #128]
    9a94:	mov	x23, #0x0                   	// #0
    9a98:	ldrb	w27, [x10, x23]
    9a9c:	cmp	x23, x25
    9aa0:	strb	w27, [x5, x23]
    9aa4:	add	x23, x23, #0x1
    9aa8:	b.ne	9a98 <inflateBackEnd@@ZLIB_1.2.0+0x908>  // b.any
    9aac:	b	98bc <inflateBackEnd@@ZLIB_1.2.0+0x72c>
    9ab0:	ldr	w27, [sp, #128]
    9ab4:	mov	x25, #0x0                   	// #0
    9ab8:	ldrb	w26, [x10, x25]
    9abc:	strb	w26, [x5, x25]
    9ac0:	add	x25, x25, #0x1
    9ac4:	cmp	x25, x23
    9ac8:	b.ne	9ab8 <inflateBackEnd@@ZLIB_1.2.0+0x928>  // b.any
    9acc:	str	w27, [sp, #128]
    9ad0:	b	96ac <inflateBackEnd@@ZLIB_1.2.0+0x51c>
    9ad4:	ldr	w25, [sp, #128]
    9ad8:	mov	x23, #0x0                   	// #0
    9adc:	ldrb	w27, [x10, x23]
    9ae0:	cmp	x23, x25
    9ae4:	strb	w27, [x5, x23]
    9ae8:	add	x23, x23, #0x1
    9aec:	b.ne	9adc <inflateBackEnd@@ZLIB_1.2.0+0x94c>  // b.any
    9af0:	b	98bc <inflateBackEnd@@ZLIB_1.2.0+0x72c>
    9af4:	add	x10, x10, #0x11
    9af8:	sub	w1, w1, w15
    9afc:	add	x5, x5, x10
    9b00:	cmp	x18, x5
    9b04:	ldr	x5, [sp, #120]
    9b08:	ccmp	x5, x23, #0x0, cc  // cc = lo, ul, last
    9b0c:	mov	x5, #0x0                   	// #0
    9b10:	ccmp	w30, #0xe, #0x0, ls  // ls = plast
    9b14:	b.ls	9c34 <inflateBackEnd@@ZLIB_1.2.0+0xaa4>  // b.plast
    9b18:	ldr	q0, [x18, x5]
    9b1c:	ldr	x10, [sp, #112]
    9b20:	str	q0, [x23, x5]
    9b24:	add	x5, x5, #0x10
    9b28:	cmp	x5, x10
    9b2c:	b.ne	9b18 <inflateBackEnd@@ZLIB_1.2.0+0x988>  // b.any
    9b30:	cmp	w15, w21
    9b34:	add	x5, x23, x20
    9b38:	b.eq	9c20 <inflateBackEnd@@ZLIB_1.2.0+0xa90>  // b.none
    9b3c:	ldrb	w10, [x24]
    9b40:	strb	w10, [x23, x20]
    9b44:	cbz	w28, 9c20 <inflateBackEnd@@ZLIB_1.2.0+0xa90>
    9b48:	ldrb	w10, [x24, #1]
    9b4c:	cmp	w28, #0x1
    9b50:	strb	w10, [x5, #1]
    9b54:	b.eq	9c20 <inflateBackEnd@@ZLIB_1.2.0+0xa90>  // b.none
    9b58:	ldrb	w10, [x24, #2]
    9b5c:	cmp	w28, #0x2
    9b60:	strb	w10, [x5, #2]
    9b64:	b.eq	9c20 <inflateBackEnd@@ZLIB_1.2.0+0xa90>  // b.none
    9b68:	ldrb	w10, [x24, #3]
    9b6c:	cmp	w28, #0x3
    9b70:	strb	w10, [x5, #3]
    9b74:	b.eq	9c20 <inflateBackEnd@@ZLIB_1.2.0+0xa90>  // b.none
    9b78:	ldrb	w10, [x24, #4]
    9b7c:	cmp	w28, #0x4
    9b80:	strb	w10, [x5, #4]
    9b84:	b.eq	9c20 <inflateBackEnd@@ZLIB_1.2.0+0xa90>  // b.none
    9b88:	ldrb	w10, [x24, #5]
    9b8c:	cmp	w28, #0x5
    9b90:	strb	w10, [x5, #5]
    9b94:	b.eq	9c20 <inflateBackEnd@@ZLIB_1.2.0+0xa90>  // b.none
    9b98:	ldrb	w10, [x24, #6]
    9b9c:	cmp	w28, #0x6
    9ba0:	strb	w10, [x5, #6]
    9ba4:	b.eq	9c20 <inflateBackEnd@@ZLIB_1.2.0+0xa90>  // b.none
    9ba8:	ldrb	w10, [x24, #7]
    9bac:	cmp	w28, #0x7
    9bb0:	strb	w10, [x5, #7]
    9bb4:	b.eq	9c20 <inflateBackEnd@@ZLIB_1.2.0+0xa90>  // b.none
    9bb8:	ldrb	w10, [x24, #8]
    9bbc:	cmp	w28, #0x8
    9bc0:	strb	w10, [x5, #8]
    9bc4:	b.eq	9c20 <inflateBackEnd@@ZLIB_1.2.0+0xa90>  // b.none
    9bc8:	ldrb	w10, [x24, #9]
    9bcc:	cmp	w28, #0x9
    9bd0:	strb	w10, [x5, #9]
    9bd4:	b.eq	9c20 <inflateBackEnd@@ZLIB_1.2.0+0xa90>  // b.none
    9bd8:	ldrb	w10, [x24, #10]
    9bdc:	cmp	w28, #0xa
    9be0:	strb	w10, [x5, #10]
    9be4:	b.eq	9c20 <inflateBackEnd@@ZLIB_1.2.0+0xa90>  // b.none
    9be8:	ldrb	w10, [x24, #11]
    9bec:	cmp	w28, #0xb
    9bf0:	strb	w10, [x5, #11]
    9bf4:	b.eq	9c20 <inflateBackEnd@@ZLIB_1.2.0+0xa90>  // b.none
    9bf8:	ldrb	w10, [x24, #12]
    9bfc:	cmp	w28, #0xc
    9c00:	strb	w10, [x5, #12]
    9c04:	b.eq	9c20 <inflateBackEnd@@ZLIB_1.2.0+0xa90>  // b.none
    9c08:	ldrb	w10, [x24, #13]
    9c0c:	cmp	w28, #0xd
    9c10:	strb	w10, [x5, #13]
    9c14:	b.eq	9c20 <inflateBackEnd@@ZLIB_1.2.0+0xa90>  // b.none
    9c18:	ldrb	w10, [x24, #14]
    9c1c:	strb	w10, [x5, #14]
    9c20:	ldr	x5, [sp, #104]
    9c24:	add	x5, x5, #0x1
    9c28:	add	x5, x23, x5
    9c2c:	sub	x10, x5, w14, uxtw
    9c30:	b	9480 <inflateBackEnd@@ZLIB_1.2.0+0x2f0>
    9c34:	ldrb	w25, [x18, x5]
    9c38:	mov	x10, x5
    9c3c:	strb	w25, [x23, x5]
    9c40:	add	x5, x5, #0x1
    9c44:	ldr	x25, [sp, #104]
    9c48:	cmp	x10, x25
    9c4c:	b.ne	9c34 <inflateBackEnd@@ZLIB_1.2.0+0xaa4>  // b.any
    9c50:	b	9c20 <inflateBackEnd@@ZLIB_1.2.0+0xa90>
    9c54:	nop

0000000000009c58 <inflateResetKeep@@ZLIB_1.2.5.2>:
    9c58:	mov	x1, x0
    9c5c:	cbz	x0, 9ca0 <inflateResetKeep@@ZLIB_1.2.5.2+0x48>
    9c60:	ldr	x0, [x0, #64]
    9c64:	cbz	x0, 9ca0 <inflateResetKeep@@ZLIB_1.2.5.2+0x48>
    9c68:	ldr	x0, [x1, #72]
    9c6c:	cbz	x0, 9ca0 <inflateResetKeep@@ZLIB_1.2.5.2+0x48>
    9c70:	ldr	x2, [x1, #56]
    9c74:	cbz	x2, 9ca0 <inflateResetKeep@@ZLIB_1.2.5.2+0x48>
    9c78:	ldr	x3, [x2]
    9c7c:	mov	w0, #0xfffffffe            	// #-2
    9c80:	cmp	x1, x3
    9c84:	b.ne	9c9c <inflateResetKeep@@ZLIB_1.2.5.2+0x44>  // b.any
    9c88:	ldr	w3, [x2, #8]
    9c8c:	mov	w4, #0xffffc0cc            	// #-16180
    9c90:	add	w3, w3, w4
    9c94:	cmp	w3, #0x1f
    9c98:	b.ls	9ca8 <inflateResetKeep@@ZLIB_1.2.5.2+0x50>  // b.plast
    9c9c:	ret
    9ca0:	mov	w0, #0xfffffffe            	// #-2
    9ca4:	ret
    9ca8:	ldr	w0, [x2, #16]
    9cac:	str	xzr, [x2, #40]
    9cb0:	str	xzr, [x1, #16]
    9cb4:	stp	xzr, xzr, [x1, #40]
    9cb8:	cbz	w0, 9cc4 <inflateResetKeep@@ZLIB_1.2.5.2+0x6c>
    9cbc:	and	x0, x0, #0x1
    9cc0:	str	x0, [x1, #96]
    9cc4:	add	x1, x2, #0x558
    9cc8:	mov	x5, #0x3f34                	// #16180
    9ccc:	mov	w4, #0x8000                	// #32768
    9cd0:	mov	x3, #0xffffffff00000001    	// #-4294967295
    9cd4:	dup	v0.2d, x1
    9cd8:	mov	w0, #0x0                   	// #0
    9cdc:	str	x5, [x2, #8]
    9ce0:	str	wzr, [x2, #20]
    9ce4:	str	w4, [x2, #28]
    9ce8:	str	xzr, [x2, #48]
    9cec:	str	xzr, [x2, #80]
    9cf0:	str	wzr, [x2, #88]
    9cf4:	stur	q0, [x2, #104]
    9cf8:	str	x1, [x2, #144]
    9cfc:	str	x3, [x2, #7144]
    9d00:	ret
    9d04:	nop

0000000000009d08 <inflateReset@@Base>:
    9d08:	cbz	x0, 9d30 <inflateReset@@Base+0x28>
    9d0c:	ldr	x2, [x0, #64]
    9d10:	cbz	x2, 9d30 <inflateReset@@Base+0x28>
    9d14:	ldr	x2, [x0, #72]
    9d18:	cbz	x2, 9d30 <inflateReset@@Base+0x28>
    9d1c:	ldr	x2, [x0, #56]
    9d20:	cbz	x2, 9d30 <inflateReset@@Base+0x28>
    9d24:	ldr	x3, [x2]
    9d28:	cmp	x0, x3
    9d2c:	b.eq	9d38 <inflateReset@@Base+0x30>  // b.none
    9d30:	mov	w0, #0xfffffffe            	// #-2
    9d34:	ret
    9d38:	ldr	w1, [x2, #8]
    9d3c:	mov	w3, #0xffffc0cc            	// #-16180
    9d40:	add	w1, w1, w3
    9d44:	cmp	w1, #0x1f
    9d48:	b.hi	9d30 <inflateReset@@Base+0x28>  // b.pmore
    9d4c:	stur	xzr, [x2, #60]
    9d50:	str	wzr, [x2, #68]
    9d54:	b	2440 <inflateResetKeep@plt>

0000000000009d58 <inflateReset2@@ZLIB_1.2.3.4>:
    9d58:	cbz	x0, 9e2c <inflateReset2@@ZLIB_1.2.3.4+0xd4>
    9d5c:	stp	x29, x30, [sp, #-48]!
    9d60:	mov	x29, sp
    9d64:	stp	x19, x20, [sp, #16]
    9d68:	mov	x20, x0
    9d6c:	ldr	x0, [x0, #64]
    9d70:	cbz	x0, 9d98 <inflateReset2@@ZLIB_1.2.3.4+0x40>
    9d74:	ldr	x2, [x20, #72]
    9d78:	cbz	x2, 9d98 <inflateReset2@@ZLIB_1.2.3.4+0x40>
    9d7c:	stp	x21, x22, [sp, #32]
    9d80:	ldr	x21, [x20, #56]
    9d84:	cbz	x21, 9d94 <inflateReset2@@ZLIB_1.2.3.4+0x3c>
    9d88:	ldr	x0, [x21]
    9d8c:	cmp	x20, x0
    9d90:	b.eq	9da8 <inflateReset2@@ZLIB_1.2.3.4+0x50>  // b.none
    9d94:	ldp	x21, x22, [sp, #32]
    9d98:	mov	w0, #0xfffffffe            	// #-2
    9d9c:	ldp	x19, x20, [sp, #16]
    9da0:	ldp	x29, x30, [sp], #48
    9da4:	ret
    9da8:	ldr	w0, [x21, #8]
    9dac:	mov	w3, #0xffffc0cc            	// #-16180
    9db0:	add	w0, w0, w3
    9db4:	cmp	w0, #0x1f
    9db8:	b.hi	9d94 <inflateReset2@@ZLIB_1.2.3.4+0x3c>  // b.pmore
    9dbc:	tbnz	w1, #31, 9e20 <inflateReset2@@ZLIB_1.2.3.4+0xc8>
    9dc0:	cmp	w1, #0x30
    9dc4:	asr	w22, w1, #4
    9dc8:	and	w0, w1, #0xf
    9dcc:	add	w22, w22, #0x5
    9dd0:	csel	w19, w0, w1, lt  // lt = tstop
    9dd4:	cmp	w19, #0x0
    9dd8:	sub	w0, w19, #0x8
    9ddc:	ccmp	w0, #0x7, #0x0, ne  // ne = any
    9de0:	b.hi	9d94 <inflateReset2@@ZLIB_1.2.3.4+0x3c>  // b.pmore
    9de4:	ldr	x1, [x21, #72]
    9de8:	cbz	x1, 9e04 <inflateReset2@@ZLIB_1.2.3.4+0xac>
    9dec:	ldr	w0, [x21, #56]
    9df0:	cmp	w19, w0
    9df4:	b.eq	9e04 <inflateReset2@@ZLIB_1.2.3.4+0xac>  // b.none
    9df8:	ldr	x0, [x20, #80]
    9dfc:	blr	x2
    9e00:	str	xzr, [x21, #72]
    9e04:	str	w22, [x21, #16]
    9e08:	mov	x0, x20
    9e0c:	str	w19, [x21, #56]
    9e10:	ldp	x19, x20, [sp, #16]
    9e14:	ldp	x21, x22, [sp, #32]
    9e18:	ldp	x29, x30, [sp], #48
    9e1c:	b	2610 <inflateReset@plt>
    9e20:	neg	w19, w1
    9e24:	mov	w22, #0x0                   	// #0
    9e28:	b	9dd4 <inflateReset2@@ZLIB_1.2.3.4+0x7c>
    9e2c:	mov	w0, #0xfffffffe            	// #-2
    9e30:	ret
    9e34:	nop

0000000000009e38 <inflateInit2_@@Base>:
    9e38:	stp	x29, x30, [sp, #-48]!
    9e3c:	mov	x29, sp
    9e40:	str	x21, [sp, #32]
    9e44:	cbz	x2, 9f3c <inflateInit2_@@Base+0x104>
    9e48:	stp	x19, x20, [sp, #16]
    9e4c:	mov	w21, w1
    9e50:	mov	x19, x0
    9e54:	ldrb	w1, [x2]
    9e58:	mov	w0, #0x70                  	// #112
    9e5c:	cmp	w1, #0x31
    9e60:	ccmp	w3, w0, #0x0, eq  // eq = none
    9e64:	b.ne	9f24 <inflateInit2_@@Base+0xec>  // b.any
    9e68:	cbz	x19, 9f44 <inflateInit2_@@Base+0x10c>
    9e6c:	ldr	x3, [x19, #64]
    9e70:	str	xzr, [x19, #48]
    9e74:	cbz	x3, 9f08 <inflateInit2_@@Base+0xd0>
    9e78:	ldr	x0, [x19, #80]
    9e7c:	ldr	x1, [x19, #72]
    9e80:	cbz	x1, 9ef8 <inflateInit2_@@Base+0xc0>
    9e84:	mov	w2, #0x1bf8                	// #7160
    9e88:	mov	w1, #0x1                   	// #1
    9e8c:	blr	x3
    9e90:	mov	x20, x0
    9e94:	cbz	x0, 9f30 <inflateInit2_@@Base+0xf8>
    9e98:	str	x20, [x19, #56]
    9e9c:	mov	w0, #0x3f34                	// #16180
    9ea0:	str	x19, [x20]
    9ea4:	mov	w1, w21
    9ea8:	str	w0, [x20, #8]
    9eac:	mov	x0, x19
    9eb0:	str	xzr, [x20, #72]
    9eb4:	bl	2640 <inflateReset2@plt>
    9eb8:	mov	w21, w0
    9ebc:	cbnz	w0, 9ed4 <inflateInit2_@@Base+0x9c>
    9ec0:	ldp	x19, x20, [sp, #16]
    9ec4:	mov	w0, w21
    9ec8:	ldr	x21, [sp, #32]
    9ecc:	ldp	x29, x30, [sp], #48
    9ed0:	ret
    9ed4:	ldp	x2, x0, [x19, #72]
    9ed8:	mov	x1, x20
    9edc:	blr	x2
    9ee0:	str	xzr, [x19, #56]
    9ee4:	mov	w0, w21
    9ee8:	ldp	x19, x20, [sp, #16]
    9eec:	ldr	x21, [sp, #32]
    9ef0:	ldp	x29, x30, [sp], #48
    9ef4:	ret
    9ef8:	adrp	x1, f000 <inflateCodesUsed@@ZLIB_1.2.9+0x25c8>
    9efc:	add	x1, x1, #0x6f8
    9f00:	str	x1, [x19, #72]
    9f04:	b	9e84 <inflateInit2_@@Base+0x4c>
    9f08:	adrp	x1, f000 <inflateCodesUsed@@ZLIB_1.2.9+0x25c8>
    9f0c:	add	x1, x1, #0x6f0
    9f10:	mov	x3, x1
    9f14:	mov	x0, #0x0                   	// #0
    9f18:	str	x1, [x19, #64]
    9f1c:	str	xzr, [x19, #80]
    9f20:	b	9e7c <inflateInit2_@@Base+0x44>
    9f24:	mov	w21, #0xfffffffa            	// #-6
    9f28:	ldp	x19, x20, [sp, #16]
    9f2c:	b	9ec4 <inflateInit2_@@Base+0x8c>
    9f30:	mov	w21, #0xfffffffc            	// #-4
    9f34:	ldp	x19, x20, [sp, #16]
    9f38:	b	9ec4 <inflateInit2_@@Base+0x8c>
    9f3c:	mov	w21, #0xfffffffa            	// #-6
    9f40:	b	9ec4 <inflateInit2_@@Base+0x8c>
    9f44:	mov	w21, #0xfffffffe            	// #-2
    9f48:	ldp	x19, x20, [sp, #16]
    9f4c:	b	9ec4 <inflateInit2_@@Base+0x8c>

0000000000009f50 <inflateInit_@@Base>:
    9f50:	mov	w3, w2
    9f54:	mov	x2, x1
    9f58:	mov	w1, #0xf                   	// #15
    9f5c:	b	2600 <inflateInit2_@plt>

0000000000009f60 <inflatePrime@@ZLIB_1.2.2.4>:
    9f60:	mov	x3, x0
    9f64:	cbz	x0, 9fa8 <inflatePrime@@ZLIB_1.2.2.4+0x48>
    9f68:	ldr	x0, [x0, #64]
    9f6c:	cbz	x0, 9fa8 <inflatePrime@@ZLIB_1.2.2.4+0x48>
    9f70:	ldr	x0, [x3, #72]
    9f74:	cbz	x0, 9fa8 <inflatePrime@@ZLIB_1.2.2.4+0x48>
    9f78:	ldr	x4, [x3, #56]
    9f7c:	cbz	x4, 9fa8 <inflatePrime@@ZLIB_1.2.2.4+0x48>
    9f80:	ldr	x5, [x4]
    9f84:	mov	w0, #0xfffffffe            	// #-2
    9f88:	cmp	x3, x5
    9f8c:	b.ne	9fa4 <inflatePrime@@ZLIB_1.2.2.4+0x44>  // b.any
    9f90:	ldr	w3, [x4, #8]
    9f94:	mov	w5, #0xffffc0cc            	// #-16180
    9f98:	add	w3, w3, w5
    9f9c:	cmp	w3, #0x1f
    9fa0:	b.ls	9fb0 <inflatePrime@@ZLIB_1.2.2.4+0x50>  // b.plast
    9fa4:	ret
    9fa8:	mov	w0, #0xfffffffe            	// #-2
    9fac:	ret
    9fb0:	tbnz	w1, #31, 9ff8 <inflatePrime@@ZLIB_1.2.2.4+0x98>
    9fb4:	cmp	w1, #0x10
    9fb8:	b.gt	9fa4 <inflatePrime@@ZLIB_1.2.2.4+0x44>
    9fbc:	ldr	w5, [x4, #88]
    9fc0:	add	w6, w1, w5
    9fc4:	cmp	w6, #0x20
    9fc8:	b.hi	9fa4 <inflatePrime@@ZLIB_1.2.2.4+0x44>  // b.pmore
    9fcc:	mov	x3, #0x1                   	// #1
    9fd0:	mov	w0, #0x0                   	// #0
    9fd4:	lsl	x1, x3, x1
    9fd8:	sub	w1, w1, #0x1
    9fdc:	ldr	x3, [x4, #80]
    9fe0:	and	w1, w1, w2
    9fe4:	str	w6, [x4, #88]
    9fe8:	lsl	w1, w1, w5
    9fec:	add	x1, x3, x1
    9ff0:	str	x1, [x4, #80]
    9ff4:	ret
    9ff8:	mov	w0, #0x0                   	// #0
    9ffc:	str	xzr, [x4, #80]
    a000:	str	wzr, [x4, #88]
    a004:	ret

000000000000a008 <inflate@@Base>:
    a008:	stp	x29, x30, [sp, #-176]!
    a00c:	mov	x29, sp
    a010:	stp	x27, x28, [sp, #80]
    a014:	cbz	x0, a928 <inflate@@Base+0x920>
    a018:	stp	x21, x22, [sp, #32]
    a01c:	mov	x22, x0
    a020:	ldr	x0, [x0, #64]
    a024:	cbz	x0, a05c <inflate@@Base+0x54>
    a028:	ldr	x0, [x22, #72]
    a02c:	cbz	x0, a05c <inflate@@Base+0x54>
    a030:	ldr	x21, [x22, #56]
    a034:	cbz	x21, a05c <inflate@@Base+0x54>
    a038:	ldr	x0, [x21]
    a03c:	mov	w28, #0xfffffffe            	// #-2
    a040:	cmp	x22, x0
    a044:	b.eq	a074 <inflate@@Base+0x6c>  // b.none
    a048:	ldp	x21, x22, [sp, #32]
    a04c:	mov	w0, w28
    a050:	ldp	x27, x28, [sp, #80]
    a054:	ldp	x29, x30, [sp], #176
    a058:	ret
    a05c:	mov	w28, #0xfffffffe            	// #-2
    a060:	mov	w0, w28
    a064:	ldp	x21, x22, [sp, #32]
    a068:	ldp	x27, x28, [sp, #80]
    a06c:	ldp	x29, x30, [sp], #176
    a070:	ret
    a074:	stp	x25, x26, [sp, #64]
    a078:	mov	w25, w1
    a07c:	ldr	w1, [x21, #8]
    a080:	stp	x19, x20, [sp, #16]
    a084:	mov	w2, #0xffffc0cc            	// #-16180
    a088:	add	w0, w1, w2
    a08c:	stp	x23, x24, [sp, #48]
    a090:	cmp	w0, #0x1f
    a094:	b.ls	a0b8 <inflate@@Base+0xb0>  // b.plast
    a098:	mov	w0, w28
    a09c:	ldp	x19, x20, [sp, #16]
    a0a0:	ldp	x21, x22, [sp, #32]
    a0a4:	ldp	x23, x24, [sp, #48]
    a0a8:	ldp	x25, x26, [sp, #64]
    a0ac:	ldp	x27, x28, [sp, #80]
    a0b0:	ldp	x29, x30, [sp], #176
    a0b4:	ret
    a0b8:	ldr	x7, [x22, #24]
    a0bc:	cbz	x7, a098 <inflate@@Base+0x90>
    a0c0:	ldr	x24, [x22]
    a0c4:	ldr	w27, [x22, #8]
    a0c8:	cbz	x24, a93c <inflate@@Base+0x934>
    a0cc:	mov	w2, #0x3f3f                	// #16191
    a0d0:	cmp	w1, w2
    a0d4:	b.ne	a0e4 <inflate@@Base+0xdc>  // b.any
    a0d8:	mov	w1, #0x3f40                	// #16192
    a0dc:	mov	w0, #0xc                   	// #12
    a0e0:	str	w1, [x21, #8]
    a0e4:	ldr	w9, [x22, #32]
    a0e8:	sub	w1, w25, #0x5
    a0ec:	ldr	w19, [x21, #88]
    a0f0:	adrp	x10, 15000 <gzclose_w@@ZLIB_1.2.3.5+0x2c38>
    a0f4:	ldr	x23, [x21, #80]
    a0f8:	add	x26, x10, #0xb0
    a0fc:	mov	w20, w27
    a100:	mov	w8, w9
    a104:	str	w1, [sp, #104]
    a108:	add	x1, x26, #0x880
    a10c:	str	x1, [sp, #112]
    a110:	cmp	w0, #0x1e
    a114:	b.ls	a130 <inflate@@Base+0x128>  // b.plast
    a118:	mov	w28, #0xfffffffe            	// #-2
    a11c:	ldp	x19, x20, [sp, #16]
    a120:	ldp	x21, x22, [sp, #32]
    a124:	ldp	x23, x24, [sp, #48]
    a128:	ldp	x25, x26, [sp, #64]
    a12c:	b	a04c <inflate@@Base+0x44>
    a130:	adrp	x1, 15000 <gzclose_w@@ZLIB_1.2.3.5+0x2c38>
    a134:	add	x1, x1, #0x70
    a138:	ldrh	w0, [x1, w0, uxtw #1]
    a13c:	adr	x1, a148 <inflate@@Base+0x140>
    a140:	add	x0, x1, w0, sxth #2
    a144:	br	x0
    a148:	ldr	x1, [x21, #48]
    a14c:	cbz	x1, a158 <inflate@@Base+0x150>
    a150:	ubfx	w2, w23, #8, #1
    a154:	str	w2, [x1]
    a158:	tbz	w0, #9, a164 <inflate@@Base+0x15c>
    a15c:	ldr	w0, [x21, #16]
    a160:	tbnz	w0, #2, bdd4 <inflate@@Base+0x1dcc>
    a164:	mov	x24, x28
    a168:	mov	w0, #0x3f36                	// #16182
    a16c:	mov	x23, #0x0                   	// #0
    a170:	mov	w19, #0x0                   	// #0
    a174:	str	w0, [x21, #8]
    a178:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    a17c:	ldrb	w0, [x24], #1
    a180:	sub	w20, w20, #0x1
    a184:	lsl	x0, x0, x19
    a188:	add	w19, w19, #0x8
    a18c:	add	x23, x23, x0
    a190:	cmp	w19, #0x1f
    a194:	b.ls	a178 <inflate@@Base+0x170>  // b.plast
    a198:	ldr	x0, [x21, #48]
    a19c:	cbz	x0, a1a4 <inflate@@Base+0x19c>
    a1a0:	str	x23, [x0, #8]
    a1a4:	ldr	w0, [x21, #24]
    a1a8:	tbz	w0, #9, a1b4 <inflate@@Base+0x1ac>
    a1ac:	ldr	w0, [x21, #16]
    a1b0:	tbnz	w0, #2, b9e0 <inflate@@Base+0x19d8>
    a1b4:	mov	w0, #0x3f37                	// #16183
    a1b8:	mov	x23, #0x0                   	// #0
    a1bc:	mov	w19, #0x0                   	// #0
    a1c0:	str	w0, [x21, #8]
    a1c4:	nop
    a1c8:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    a1cc:	ldrb	w0, [x24], #1
    a1d0:	sub	w20, w20, #0x1
    a1d4:	lsl	x0, x0, x19
    a1d8:	add	w19, w19, #0x8
    a1dc:	add	x23, x23, x0
    a1e0:	cmp	w19, #0xf
    a1e4:	b.ls	a1c8 <inflate@@Base+0x1c0>  // b.plast
    a1e8:	ldr	x0, [x21, #48]
    a1ec:	cbz	x0, a1fc <inflate@@Base+0x1f4>
    a1f0:	and	w2, w23, #0xff
    a1f4:	lsr	x1, x23, #8
    a1f8:	stp	w2, w1, [x0, #16]
    a1fc:	ldr	w2, [x21, #24]
    a200:	mov	w1, w2
    a204:	tbz	w2, #9, a210 <inflate@@Base+0x208>
    a208:	ldr	w0, [x21, #16]
    a20c:	tbnz	w0, #2, b888 <inflate@@Base+0x1880>
    a210:	mov	w0, #0x3f38                	// #16184
    a214:	str	w0, [x21, #8]
    a218:	mov	w19, #0x0                   	// #0
    a21c:	mov	x23, #0x0                   	// #0
    a220:	tbnz	w2, #10, aae8 <inflate@@Base+0xae0>
    a224:	ldr	x2, [x21, #48]
    a228:	mov	w0, #0x0                   	// #0
    a22c:	cbz	x2, a234 <inflate@@Base+0x22c>
    a230:	str	xzr, [x2, #24]
    a234:	mov	w2, #0x3f39                	// #16185
    a238:	str	w2, [x21, #8]
    a23c:	cbz	w0, a2d4 <inflate@@Base+0x2cc>
    a240:	ldr	w3, [x21, #92]
    a244:	cmp	w20, w3
    a248:	csel	w28, w20, w3, ls  // ls = plast
    a24c:	cbz	w28, a2cc <inflate@@Base+0x2c4>
    a250:	ldr	x2, [x21, #48]
    a254:	mov	w5, w28
    a258:	cbz	x2, a2ac <inflate@@Base+0x2a4>
    a25c:	ldr	x0, [x2, #24]
    a260:	cbz	x0, a2ac <inflate@@Base+0x2a4>
    a264:	ldp	w11, w2, [x2, #32]
    a268:	mov	x1, x24
    a26c:	stp	x5, x7, [sp, #120]
    a270:	sub	w12, w11, w3
    a274:	add	w12, w28, w12
    a278:	str	w8, [sp, #136]
    a27c:	cmp	w12, w2
    a280:	add	w2, w2, w3
    a284:	sub	w3, w11, w3
    a288:	sub	w2, w2, w11
    a28c:	csel	x2, x2, x5, hi  // hi = pmore
    a290:	add	x0, x0, x3
    a294:	str	w9, [sp, #144]
    a298:	bl	23a0 <memcpy@plt>
    a29c:	ldp	x5, x7, [sp, #120]
    a2a0:	ldr	w1, [x21, #24]
    a2a4:	ldr	w8, [sp, #136]
    a2a8:	ldr	w9, [sp, #144]
    a2ac:	tbz	w1, #9, a2b8 <inflate@@Base+0x2b0>
    a2b0:	ldr	w0, [x21, #16]
    a2b4:	tbnz	w0, #2, b98c <inflate@@Base+0x1984>
    a2b8:	ldr	w3, [x21, #92]
    a2bc:	sub	w20, w20, w28
    a2c0:	add	x24, x24, x5
    a2c4:	sub	w3, w3, w28
    a2c8:	str	w3, [x21, #92]
    a2cc:	cbnz	w3, a7c8 <inflate@@Base+0x7c0>
    a2d0:	ldr	w1, [x21, #24]
    a2d4:	mov	w0, #0x3f3a                	// #16186
    a2d8:	str	w0, [x21, #8]
    a2dc:	str	wzr, [x21, #92]
    a2e0:	tbnz	w1, #11, b4b8 <inflate@@Base+0x14b0>
    a2e4:	ldr	x0, [x21, #48]
    a2e8:	cbz	x0, a2f0 <inflate@@Base+0x2e8>
    a2ec:	str	xzr, [x0, #40]
    a2f0:	mov	w0, #0x3f3b                	// #16187
    a2f4:	str	w0, [x21, #8]
    a2f8:	str	wzr, [x21, #92]
    a2fc:	tbnz	w1, #12, b410 <inflate@@Base+0x1408>
    a300:	ldr	x0, [x21, #48]
    a304:	cbz	x0, a30c <inflate@@Base+0x304>
    a308:	str	xzr, [x0, #56]
    a30c:	mov	w0, #0x3f3c                	// #16188
    a310:	str	w0, [x21, #8]
    a314:	tbnz	w1, #9, b398 <inflate@@Base+0x1390>
    a318:	ldr	x0, [x21, #48]
    a31c:	cbz	x0, a32c <inflate@@Base+0x324>
    a320:	ubfx	x1, x1, #9, #1
    a324:	mov	w2, #0x1                   	// #1
    a328:	stp	w1, w2, [x0, #68]
    a32c:	mov	x1, #0x0                   	// #0
    a330:	mov	w2, #0x0                   	// #0
    a334:	mov	x0, #0x0                   	// #0
    a338:	str	x7, [sp, #120]
    a33c:	str	w8, [sp, #128]
    a340:	str	w9, [sp, #136]
    a344:	bl	2430 <crc32@plt>
    a348:	str	x0, [x21, #32]
    a34c:	mov	w1, #0x3f3f                	// #16191
    a350:	str	x0, [x22, #96]
    a354:	ldr	w8, [sp, #128]
    a358:	ldr	w9, [sp, #136]
    a35c:	str	w1, [x21, #8]
    a360:	ldr	x7, [sp, #120]
    a364:	b	a7b8 <inflate@@Base+0x7b0>
    a368:	ldr	w0, [x21, #16]
    a36c:	cbnz	w0, b634 <inflate@@Base+0x162c>
    a370:	mov	w0, #0x3f40                	// #16192
    a374:	str	w0, [x21, #8]
    a378:	ldr	w28, [x21, #12]
    a37c:	cbz	w28, b18c <inflate@@Base+0x1184>
    a380:	and	w0, w19, #0x7
    a384:	and	w19, w19, #0xfffffff8
    a388:	mov	w1, #0x3f4e                	// #16206
    a38c:	str	w1, [x21, #8]
    a390:	lsr	x23, x23, x0
    a394:	ldr	w0, [x21, #16]
    a398:	cbz	w0, ab48 <inflate@@Base+0xb40>
    a39c:	cmp	w19, #0x1f
    a3a0:	b.hi	bc80 <inflate@@Base+0x1c78>  // b.pmore
    a3a4:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    a3a8:	mov	x26, x24
    a3ac:	add	w2, w19, #0x8
    a3b0:	cmp	w2, #0x1f
    a3b4:	sub	w3, w20, #0x1
    a3b8:	ldrb	w1, [x26], #1
    a3bc:	lsl	x1, x1, x19
    a3c0:	add	x23, x23, x1
    a3c4:	b.hi	bcb8 <inflate@@Base+0x1cb0>  // b.pmore
    a3c8:	cbz	w3, bc38 <inflate@@Base+0x1c30>
    a3cc:	ldrb	w1, [x24, #1]
    a3d0:	add	w3, w19, #0x10
    a3d4:	cmp	w3, #0x1f
    a3d8:	sub	w4, w20, #0x2
    a3dc:	add	x26, x24, #0x2
    a3e0:	lsl	x1, x1, x2
    a3e4:	add	x23, x23, x1
    a3e8:	b.hi	bd30 <inflate@@Base+0x1d28>  // b.pmore
    a3ec:	cbz	w4, bd48 <inflate@@Base+0x1d40>
    a3f0:	ldrb	w1, [x24, #2]
    a3f4:	add	w2, w19, #0x18
    a3f8:	cmp	w2, #0x1f
    a3fc:	sub	w4, w20, #0x3
    a400:	add	x26, x24, #0x3
    a404:	lsl	x1, x1, x3
    a408:	add	x23, x23, x1
    a40c:	b.hi	bd3c <inflate@@Base+0x1d34>  // b.pmore
    a410:	cbz	w4, bc38 <inflate@@Base+0x1c30>
    a414:	ldrb	w1, [x24, #3]
    a418:	sub	w20, w20, #0x4
    a41c:	add	w19, w19, #0x20
    a420:	add	x26, x24, #0x4
    a424:	lsl	x1, x1, x2
    a428:	add	x23, x23, x1
    a42c:	ldr	x2, [x22, #40]
    a430:	sub	w3, w9, w8
    a434:	ldr	x1, [x21, #40]
    a438:	add	x2, x2, x3
    a43c:	str	x2, [x22, #40]
    a440:	subs	w2, w9, w8
    a444:	add	x1, x1, x3
    a448:	str	x1, [x21, #40]
    a44c:	and	w1, w0, #0x4
    a450:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    a454:	b.ne	b354 <inflate@@Base+0x134c>  // b.any
    a458:	cbz	w1, ab38 <inflate@@Base+0xb30>
    a45c:	ldr	w2, [x21, #24]
    a460:	mov	x1, x23
    a464:	cbnz	w2, a48c <inflate@@Base+0x484>
    a468:	lsr	x1, x23, #8
    a46c:	lsl	x2, x23, #8
    a470:	and	x3, x1, #0xff00
    a474:	and	x2, x2, #0xff0000
    a478:	lsr	w1, w23, #24
    a47c:	lsl	w4, w23, #24
    a480:	orr	x1, x1, x3
    a484:	add	x2, x2, x4
    a488:	add	x1, x1, x2
    a48c:	ldr	x2, [x21, #32]
    a490:	cmp	x2, x1
    a494:	b.eq	ab38 <inflate@@Base+0xb30>  // b.none
    a498:	adrp	x0, 15000 <gzclose_w@@ZLIB_1.2.3.5+0x2c38>
    a49c:	add	x0, x0, #0x40
    a4a0:	str	x0, [x22, #48]
    a4a4:	mov	x24, x26
    a4a8:	mov	w0, #0x3f51                	// #16209
    a4ac:	mov	w9, w8
    a4b0:	str	w0, [x21, #8]
    a4b4:	b	a5d4 <inflate@@Base+0x5cc>
    a4b8:	sub	w19, w19, w0
    a4bc:	lsr	x23, x23, x0
    a4c0:	str	w11, [x21, #92]
    a4c4:	str	w0, [x21, #7148]
    a4c8:	mov	w0, #0x3f4d                	// #16205
    a4cc:	str	w0, [x21, #8]
    a4d0:	cbz	w8, bb10 <inflate@@Base+0x1b08>
    a4d4:	ldr	w1, [x21, #92]
    a4d8:	sub	w8, w8, #0x1
    a4dc:	strb	w1, [x7], #1
    a4e0:	mov	w0, #0x3f48                	// #16200
    a4e4:	str	w0, [x21, #8]
    a4e8:	cmp	w8, #0x101
    a4ec:	ccmp	w20, #0x5, #0x0, hi  // hi = pmore
    a4f0:	b.ls	aa3c <inflate@@Base+0xa34>  // b.plast
    a4f4:	str	x24, [x22]
    a4f8:	mov	w1, w9
    a4fc:	str	w20, [x22, #8]
    a500:	mov	x0, x22
    a504:	str	x7, [x22, #24]
    a508:	str	w8, [x22, #32]
    a50c:	str	x23, [x21, #80]
    a510:	str	w19, [x21, #88]
    a514:	str	w9, [sp, #120]
    a518:	bl	91e0 <inflateBackEnd@@ZLIB_1.2.0+0x50>
    a51c:	ldr	w19, [x21, #88]
    a520:	ldr	w1, [x21, #8]
    a524:	mov	w0, #0x3f3f                	// #16191
    a528:	ldr	w20, [x22, #8]
    a52c:	ldr	w8, [x22, #32]
    a530:	cmp	w1, w0
    a534:	ldr	w9, [sp, #120]
    a538:	ldr	x24, [x22]
    a53c:	ldr	x7, [x22, #24]
    a540:	ldr	x23, [x21, #80]
    a544:	b.eq	b61c <inflate@@Base+0x1614>  // b.none
    a548:	mov	w0, #0xffffc0cc            	// #-16180
    a54c:	add	w0, w1, w0
    a550:	b	a110 <inflate@@Base+0x108>
    a554:	mov	w0, #0x3f47                	// #16199
    a558:	str	w0, [x21, #8]
    a55c:	cmp	w25, #0x6
    a560:	b.eq	b94c <inflate@@Base+0x1944>  // b.none
    a564:	nop
    a568:	mov	w0, #0x3f48                	// #16200
    a56c:	str	w0, [x21, #8]
    a570:	b	a4e8 <inflate@@Base+0x4e0>
    a574:	and	w3, w3, #0xf
    a578:	mov	w0, #0x3f4b                	// #16203
    a57c:	str	w0, [x21, #8]
    a580:	stp	w5, w3, [x21, #96]
    a584:	cbnz	w3, b0a4 <inflate@@Base+0x109c>
    a588:	mov	w0, #0x3f4c                	// #16204
    a58c:	str	w0, [x21, #8]
    a590:	cbz	w8, bb10 <inflate@@Base+0x1b08>
    a594:	ldr	w1, [x21, #96]
    a598:	sub	w0, w9, w8
    a59c:	cmp	w1, w0
    a5a0:	b.ls	b544 <inflate@@Base+0x153c>  // b.plast
    a5a4:	ldr	w2, [x21, #64]
    a5a8:	add	w1, w1, w8
    a5ac:	sub	w0, w1, w9
    a5b0:	cmp	w2, w0
    a5b4:	b.cs	ac14 <inflate@@Base+0xc0c>  // b.hs, b.nlast
    a5b8:	ldr	w2, [x21, #7144]
    a5bc:	cbz	w2, ac14 <inflate@@Base+0xc0c>
    a5c0:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    a5c4:	add	x0, x0, #0x6e8
    a5c8:	str	x0, [x22, #48]
    a5cc:	mov	w0, #0x3f51                	// #16209
    a5d0:	str	w0, [x21, #8]
    a5d4:	sub	w26, w9, w8
    a5d8:	mov	w28, #0xfffffffd            	// #-3
    a5dc:	b	a7d0 <inflate@@Base+0x7c8>
    a5e0:	and	w2, w2, #0xf
    a5e4:	mov	w0, #0x3f49                	// #16201
    a5e8:	str	w0, [x21, #8]
    a5ec:	str	w2, [x21, #100]
    a5f0:	cbnz	w2, b04c <inflate@@Base+0x1044>
    a5f4:	ldr	w0, [x21, #92]
    a5f8:	mov	w1, #0x3f4a                	// #16202
    a5fc:	str	w1, [x21, #8]
    a600:	str	w0, [x21, #7152]
    a604:	ldr	w0, [x21, #124]
    a608:	mov	w4, #0xffffffff            	// #-1
    a60c:	mov	w11, w23
    a610:	ldr	x2, [x21, #112]
    a614:	lsl	w4, w4, w0
    a618:	bic	w0, w23, w4
    a61c:	mvn	w4, w4
    a620:	b	a644 <inflate@@Base+0x63c>
    a624:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    a628:	ldrb	w0, [x24], #1
    a62c:	sub	w20, w20, #0x1
    a630:	lsl	x0, x0, x19
    a634:	add	x23, x23, x0
    a638:	and	w0, w4, w23
    a63c:	add	w19, w19, #0x8
    a640:	mov	w11, w23
    a644:	lsl	x0, x0, #2
    a648:	add	x1, x2, x0
    a64c:	ldrb	w3, [x2, x0]
    a650:	ldrb	w0, [x1, #1]
    a654:	ldrh	w5, [x1, #2]
    a658:	cmp	w0, w19
    a65c:	mov	w1, w0
    a660:	b.hi	a624 <inflate@@Base+0x61c>  // b.pmore
    a664:	tst	w3, #0xf0
    a668:	mov	w4, w0
    a66c:	b.eq	b748 <inflate@@Base+0x1740>  // b.none
    a670:	ldr	w2, [x21, #7148]
    a674:	add	w0, w4, w2
    a678:	str	w0, [x21, #7148]
    a67c:	sub	w19, w19, w1
    a680:	lsr	x23, x23, x4
    a684:	tbz	w3, #6, a574 <inflate@@Base+0x56c>
    a688:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    a68c:	add	x0, x0, #0x6d0
    a690:	str	x0, [x22, #48]
    a694:	mov	w0, #0x3f51                	// #16209
    a698:	str	w0, [x21, #8]
    a69c:	b	a5d4 <inflate@@Base+0x5cc>
    a6a0:	mov	w0, #0x3f3d                	// #16189
    a6a4:	mov	x23, #0x0                   	// #0
    a6a8:	mov	w19, #0x0                   	// #0
    a6ac:	str	w0, [x21, #8]
    a6b0:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    a6b4:	mov	x1, x24
    a6b8:	add	w2, w19, #0x8
    a6bc:	cmp	w2, #0x1f
    a6c0:	sub	w3, w20, #0x1
    a6c4:	ldrb	w0, [x1], #1
    a6c8:	lsl	x0, x0, x19
    a6cc:	add	x23, x23, x0
    a6d0:	b.hi	bbcc <inflate@@Base+0x1bc4>  // b.pmore
    a6d4:	cbz	w3, b83c <inflate@@Base+0x1834>
    a6d8:	ldrb	w0, [x24, #1]
    a6dc:	add	w3, w19, #0x10
    a6e0:	cmp	w3, #0x1f
    a6e4:	sub	w4, w20, #0x2
    a6e8:	add	x1, x24, #0x2
    a6ec:	lsl	x0, x0, x2
    a6f0:	add	x23, x23, x0
    a6f4:	b.hi	bbe0 <inflate@@Base+0x1bd8>  // b.pmore
    a6f8:	cbz	w4, ba30 <inflate@@Base+0x1a28>
    a6fc:	ldrb	w0, [x24, #2]
    a700:	add	w19, w19, #0x18
    a704:	cmp	w19, #0x1f
    a708:	sub	w2, w20, #0x3
    a70c:	add	x1, x24, #0x3
    a710:	lsl	x0, x0, x3
    a714:	add	x23, x23, x0
    a718:	b.hi	bc44 <inflate@@Base+0x1c3c>  // b.pmore
    a71c:	cbz	w2, b840 <inflate@@Base+0x1838>
    a720:	ldrb	w0, [x24, #3]
    a724:	sub	w20, w20, #0x4
    a728:	add	x1, x24, #0x4
    a72c:	lsl	x19, x0, x19
    a730:	add	x23, x23, x19
    a734:	lsr	x0, x23, #8
    a738:	lsl	x2, x23, #8
    a73c:	and	x3, x0, #0xff00
    a740:	and	x2, x2, #0xff0000
    a744:	lsr	w0, w23, #24
    a748:	lsl	w23, w23, #24
    a74c:	add	x2, x2, x23
    a750:	orr	x0, x0, x3
    a754:	add	x0, x0, x2
    a758:	str	x0, [x21, #32]
    a75c:	mov	x24, x1
    a760:	str	x0, [x22, #96]
    a764:	mov	w19, #0x0                   	// #0
    a768:	mov	w0, #0x3f3e                	// #16190
    a76c:	mov	x23, #0x0                   	// #0
    a770:	str	w0, [x21, #8]
    a774:	ldr	w0, [x21, #20]
    a778:	cbz	w0, bc88 <inflate@@Base+0x1c80>
    a77c:	mov	x1, #0x0                   	// #0
    a780:	mov	w2, #0x0                   	// #0
    a784:	mov	x0, #0x0                   	// #0
    a788:	str	x7, [sp, #120]
    a78c:	str	w8, [sp, #128]
    a790:	str	w9, [sp, #136]
    a794:	bl	2560 <adler32@plt>
    a798:	ldr	w8, [sp, #128]
    a79c:	mov	w1, #0x3f3f                	// #16191
    a7a0:	ldr	w9, [sp, #136]
    a7a4:	str	x0, [x21, #32]
    a7a8:	ldr	x7, [sp, #120]
    a7ac:	str	x0, [x22, #96]
    a7b0:	str	w1, [x21, #8]
    a7b4:	nop
    a7b8:	ldr	w0, [sp, #104]
    a7bc:	cmp	w0, #0x1
    a7c0:	b.hi	a378 <inflate@@Base+0x370>  // b.pmore
    a7c4:	nop
    a7c8:	sub	w26, w9, w8
    a7cc:	mov	w28, #0x0                   	// #0
    a7d0:	ldr	w0, [x21, #60]
    a7d4:	str	x24, [x22]
    a7d8:	str	w20, [x22, #8]
    a7dc:	str	x7, [x22, #24]
    a7e0:	str	w8, [x22, #32]
    a7e4:	str	x23, [x21, #80]
    a7e8:	str	w19, [x21, #88]
    a7ec:	cbnz	w0, a818 <inflate@@Base+0x810>
    a7f0:	cmp	w9, w8
    a7f4:	b.eq	a870 <inflate@@Base+0x868>  // b.none
    a7f8:	ldr	w0, [x21, #8]
    a7fc:	mov	w1, #0x3f50                	// #16208
    a800:	cmp	w0, w1
    a804:	b.hi	a870 <inflate@@Base+0x868>  // b.pmore
    a808:	cmp	w25, #0x4
    a80c:	mov	w1, #0x3f4d                	// #16205
    a810:	ccmp	w0, w1, #0x0, eq  // eq = none
    a814:	b.hi	a870 <inflate@@Base+0x868>  // b.pmore
    a818:	ldr	x19, [x22, #56]
    a81c:	ldr	x0, [x19, #72]
    a820:	cbz	x0, a9e4 <inflate@@Base+0x9dc>
    a824:	ldr	w2, [x19, #60]
    a828:	cbnz	w2, a840 <inflate@@Base+0x838>
    a82c:	ldr	w1, [x19, #56]
    a830:	mov	w2, #0x1                   	// #1
    a834:	str	xzr, [x19, #64]
    a838:	lsl	w2, w2, w1
    a83c:	str	w2, [x19, #60]
    a840:	cmp	w26, w2
    a844:	b.cc	a974 <inflate@@Base+0x96c>  // b.lo, b.ul, b.last
    a848:	mov	w2, w2
    a84c:	str	w9, [sp, #104]
    a850:	sub	x1, x7, x2
    a854:	bl	23a0 <memcpy@plt>
    a858:	ldr	w9, [sp, #104]
    a85c:	ldr	w20, [x22, #32]
    a860:	ldr	w0, [x19, #60]
    a864:	sub	w26, w9, w20
    a868:	ldr	w20, [x22, #8]
    a86c:	stp	w0, wzr, [x19, #64]
    a870:	ldr	x4, [x22, #16]
    a874:	sub	w5, w27, w20
    a878:	ldr	x2, [x22, #40]
    a87c:	mov	w1, w26
    a880:	ldr	x0, [x21, #40]
    a884:	add	x4, x4, x5
    a888:	ldr	w5, [x21, #16]
    a88c:	add	x2, x2, x1
    a890:	str	x4, [x22, #16]
    a894:	add	x0, x0, x1
    a898:	str	x2, [x22, #40]
    a89c:	sub	w20, w27, w20
    a8a0:	str	x0, [x21, #40]
    a8a4:	tst	x5, #0x4
    a8a8:	ccmp	w26, #0x0, #0x4, ne  // ne = any
    a8ac:	b.ne	a94c <inflate@@Base+0x944>  // b.any
    a8b0:	ldp	w1, w4, [x21, #8]
    a8b4:	mov	w2, #0x3f3f                	// #16191
    a8b8:	ldr	w0, [x21, #88]
    a8bc:	cmp	w4, #0x0
    a8c0:	add	w4, w0, #0x40
    a8c4:	csel	w0, w4, w0, ne  // ne = any
    a8c8:	cmp	w1, w2
    a8cc:	b.eq	a944 <inflate@@Base+0x93c>  // b.none
    a8d0:	mov	w2, #0x3f47                	// #16199
    a8d4:	cmp	w1, w2
    a8d8:	mov	w4, #0x3f42                	// #16194
    a8dc:	add	w2, w0, #0x100
    a8e0:	ccmp	w1, w4, #0x4, ne  // ne = any
    a8e4:	csel	w0, w2, w0, eq  // eq = none
    a8e8:	orr	w20, w20, w26
    a8ec:	str	w0, [x22, #88]
    a8f0:	cmp	w20, #0x0
    a8f4:	ccmp	w25, #0x4, #0x4, ne  // ne = any
    a8f8:	b.ne	a098 <inflate@@Base+0x90>  // b.any
    a8fc:	cmp	w28, #0x0
    a900:	mov	w0, #0xfffffffb            	// #-5
    a904:	csel	w28, w28, w0, ne  // ne = any
    a908:	mov	w0, w28
    a90c:	ldp	x19, x20, [sp, #16]
    a910:	ldp	x21, x22, [sp, #32]
    a914:	ldp	x23, x24, [sp, #48]
    a918:	ldp	x25, x26, [sp, #64]
    a91c:	ldp	x27, x28, [sp, #80]
    a920:	ldp	x29, x30, [sp], #176
    a924:	ret
    a928:	mov	w28, #0xfffffffe            	// #-2
    a92c:	mov	w0, w28
    a930:	ldp	x27, x28, [sp, #80]
    a934:	ldp	x29, x30, [sp], #176
    a938:	ret
    a93c:	cbz	w27, a0cc <inflate@@Base+0xc4>
    a940:	b	a098 <inflate@@Base+0x90>
    a944:	add	w0, w0, #0x80
    a948:	b	a8e8 <inflate@@Base+0x8e0>
    a94c:	ldr	w4, [x21, #24]
    a950:	ldr	x2, [x22, #24]
    a954:	ldr	x0, [x21, #32]
    a958:	sub	x1, x2, x1
    a95c:	mov	w2, w26
    a960:	cbz	w4, aa34 <inflate@@Base+0xa2c>
    a964:	bl	2430 <crc32@plt>
    a968:	str	x0, [x21, #32]
    a96c:	str	x0, [x22, #96]
    a970:	b	a8b0 <inflate@@Base+0x8a8>
    a974:	ldr	w4, [x19, #68]
    a978:	sub	x1, x7, w26, uxtw
    a97c:	str	x7, [sp, #104]
    a980:	sub	w2, w2, w4
    a984:	str	w9, [sp, #112]
    a988:	cmp	w2, w26
    a98c:	add	x0, x0, w4, uxtw
    a990:	csel	w23, w2, w26, ls  // ls = plast
    a994:	csel	w2, w2, w26, ls  // ls = plast
    a998:	bl	23a0 <memcpy@plt>
    a99c:	ldr	w9, [sp, #112]
    a9a0:	subs	w24, w26, w23
    a9a4:	ldr	x7, [sp, #104]
    a9a8:	b.ne	b488 <inflate@@Base+0x1480>  // b.any
    a9ac:	ldp	w1, w2, [x19, #60]
    a9b0:	ldr	w0, [x19, #68]
    a9b4:	ldr	w20, [x22, #32]
    a9b8:	add	w0, w23, w0
    a9bc:	cmp	w0, w1
    a9c0:	sub	w26, w9, w20
    a9c4:	csel	w0, w0, wzr, ne  // ne = any
    a9c8:	ldr	w20, [x22, #8]
    a9cc:	str	w0, [x19, #68]
    a9d0:	cmp	w1, w2
    a9d4:	b.ls	a870 <inflate@@Base+0x868>  // b.plast
    a9d8:	add	w23, w23, w2
    a9dc:	str	w23, [x19, #64]
    a9e0:	b	a870 <inflate@@Base+0x868>
    a9e4:	ldr	x4, [x22, #64]
    a9e8:	mov	w2, #0x1                   	// #1
    a9ec:	ldr	x0, [x22, #80]
    a9f0:	str	x7, [sp, #104]
    a9f4:	ldr	w1, [x19, #56]
    a9f8:	str	w9, [sp, #112]
    a9fc:	lsl	w1, w2, w1
    aa00:	blr	x4
    aa04:	str	x0, [x19, #72]
    aa08:	ldr	w9, [sp, #112]
    aa0c:	ldr	x7, [sp, #104]
    aa10:	cbnz	x0, a824 <inflate@@Base+0x81c>
    aa14:	mov	w0, #0x3f52                	// #16210
    aa18:	mov	w28, #0xfffffffc            	// #-4
    aa1c:	ldp	x19, x20, [sp, #16]
    aa20:	ldp	x23, x24, [sp, #48]
    aa24:	ldp	x25, x26, [sp, #64]
    aa28:	str	w0, [x21, #8]
    aa2c:	ldp	x21, x22, [sp, #32]
    aa30:	b	a04c <inflate@@Base+0x44>
    aa34:	bl	2560 <adler32@plt>
    aa38:	b	a968 <inflate@@Base+0x960>
    aa3c:	ldr	w0, [x21, #120]
    aa40:	mov	w3, #0xffffffff            	// #-1
    aa44:	ldr	x4, [x21, #104]
    aa48:	mov	w5, w23
    aa4c:	lsl	w3, w3, w0
    aa50:	bic	w0, w23, w3
    aa54:	mvn	w3, w3
    aa58:	lsl	x0, x0, #2
    aa5c:	add	x1, x4, x0
    aa60:	ldrb	w2, [x4, x0]
    aa64:	ldrh	w11, [x1, #2]
    aa68:	ldrb	w0, [x1, #1]
    aa6c:	str	wzr, [x21, #7148]
    aa70:	cmp	w19, w0
    aa74:	b.cs	aab4 <inflate@@Base+0xaac>  // b.hs, b.nlast
    aa78:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    aa7c:	ldrb	w0, [x24], #1
    aa80:	sub	w20, w20, #0x1
    aa84:	lsl	x0, x0, x19
    aa88:	add	x23, x23, x0
    aa8c:	and	w0, w3, w23
    aa90:	add	w19, w19, #0x8
    aa94:	mov	w5, w23
    aa98:	lsl	x0, x0, #2
    aa9c:	add	x1, x4, x0
    aaa0:	ldrb	w2, [x4, x0]
    aaa4:	ldrb	w0, [x1, #1]
    aaa8:	ldrh	w11, [x1, #2]
    aaac:	cmp	w0, w19
    aab0:	b.hi	aa78 <inflate@@Base+0xa70>  // b.pmore
    aab4:	cbz	w2, a4b8 <inflate@@Base+0x4b0>
    aab8:	tst	w2, #0xf0
    aabc:	b.eq	bb1c <inflate@@Base+0x1b14>  // b.none
    aac0:	sub	w19, w19, w0
    aac4:	lsr	x23, x23, x0
    aac8:	str	w11, [x21, #92]
    aacc:	str	w0, [x21, #7148]
    aad0:	tbz	w2, #5, b9c4 <inflate@@Base+0x19bc>
    aad4:	mov	w0, #0xffffffff            	// #-1
    aad8:	mov	w1, #0x3f3f                	// #16191
    aadc:	str	w1, [x21, #8]
    aae0:	str	w0, [x21, #7148]
    aae4:	b	a7b8 <inflate@@Base+0x7b0>
    aae8:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    aaec:	ldrb	w0, [x24], #1
    aaf0:	sub	w20, w20, #0x1
    aaf4:	lsl	x0, x0, x19
    aaf8:	add	w19, w19, #0x8
    aafc:	add	x23, x23, x0
    ab00:	cmp	w19, #0xf
    ab04:	b.ls	aae8 <inflate@@Base+0xae0>  // b.plast
    ab08:	ldr	x0, [x21, #48]
    ab0c:	str	w23, [x21, #92]
    ab10:	cbz	x0, ab18 <inflate@@Base+0xb10>
    ab14:	str	w23, [x0, #32]
    ab18:	tbz	w2, #9, ab24 <inflate@@Base+0xb1c>
    ab1c:	ldr	w0, [x21, #16]
    ab20:	tbnz	w0, #2, bbf4 <inflate@@Base+0x1bec>
    ab24:	mov	w1, w2
    ab28:	and	w0, w2, #0x400
    ab2c:	mov	w19, #0x0                   	// #0
    ab30:	mov	x23, #0x0                   	// #0
    ab34:	b	a234 <inflate@@Base+0x22c>
    ab38:	mov	x24, x26
    ab3c:	mov	w9, w8
    ab40:	mov	w19, #0x0                   	// #0
    ab44:	mov	x23, #0x0                   	// #0
    ab48:	mov	w1, #0x3f4f                	// #16207
    ab4c:	str	w1, [x21, #8]
    ab50:	cbz	w0, ba50 <inflate@@Base+0x1a48>
    ab54:	ldr	w0, [x21, #24]
    ab58:	cbz	w0, ba50 <inflate@@Base+0x1a48>
    ab5c:	cmp	w19, #0x1f
    ab60:	b.hi	ba3c <inflate@@Base+0x1a34>  // b.pmore
    ab64:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    ab68:	mov	x0, x24
    ab6c:	add	w2, w19, #0x8
    ab70:	cmp	w2, #0x1f
    ab74:	sub	w3, w20, #0x1
    ab78:	ldrb	w1, [x0], #1
    ab7c:	lsl	x1, x1, x19
    ab80:	add	x23, x23, x1
    ab84:	b.hi	ba6c <inflate@@Base+0x1a64>  // b.pmore
    ab88:	cbz	w3, b8c4 <inflate@@Base+0x18bc>
    ab8c:	ldrb	w1, [x24, #1]
    ab90:	add	w3, w19, #0x10
    ab94:	cmp	w3, #0x1f
    ab98:	sub	w4, w20, #0x2
    ab9c:	add	x0, x24, #0x2
    aba0:	lsl	x1, x1, x2
    aba4:	add	x23, x23, x1
    aba8:	b.hi	ba9c <inflate@@Base+0x1a94>  // b.pmore
    abac:	cbz	w4, bb04 <inflate@@Base+0x1afc>
    abb0:	ldrb	w1, [x24, #2]
    abb4:	add	w2, w19, #0x18
    abb8:	cmp	w2, #0x1f
    abbc:	sub	w4, w20, #0x3
    abc0:	add	x0, x24, #0x3
    abc4:	lsl	x1, x1, x3
    abc8:	add	x23, x23, x1
    abcc:	b.hi	bb98 <inflate@@Base+0x1b90>  // b.pmore
    abd0:	cbz	w4, b8c4 <inflate@@Base+0x18bc>
    abd4:	ldrb	w1, [x24, #3]
    abd8:	sub	w20, w20, #0x4
    abdc:	add	w19, w19, #0x20
    abe0:	add	x0, x24, #0x4
    abe4:	lsl	x1, x1, x2
    abe8:	add	x23, x23, x1
    abec:	ldr	w1, [x21, #40]
    abf0:	cmp	x1, x23
    abf4:	b.eq	ba44 <inflate@@Base+0x1a3c>  // b.none
    abf8:	adrp	x1, 15000 <gzclose_w@@ZLIB_1.2.3.5+0x2c38>
    abfc:	add	x1, x1, #0x58
    ac00:	str	x1, [x22, #48]
    ac04:	mov	x24, x0
    ac08:	mov	w0, #0x3f51                	// #16209
    ac0c:	str	w0, [x21, #8]
    ac10:	b	a5d4 <inflate@@Base+0x5cc>
    ac14:	ldr	w2, [x21, #68]
    ac18:	sub	w1, w9, w1
    ac1c:	ldr	x3, [x21, #72]
    ac20:	cmp	w2, w0
    ac24:	b.cs	b628 <inflate@@Base+0x1620>  // b.hs, b.nlast
    ac28:	ldr	w4, [x21, #60]
    ac2c:	sub	w0, w0, w2
    ac30:	add	w2, w2, w4
    ac34:	add	w1, w2, w1
    ac38:	add	x1, x3, x1
    ac3c:	ldr	w2, [x21, #92]
    ac40:	cmp	w2, w0
    ac44:	csel	w4, w2, w0, ls  // ls = plast
    ac48:	cmp	w4, w8
    ac4c:	add	x0, x7, #0xf
    ac50:	csel	w4, w4, w8, ls  // ls = plast
    ac54:	sub	x0, x0, x1
    ac58:	sub	w2, w2, w4
    ac5c:	str	w2, [x21, #92]
    ac60:	sub	w5, w4, #0x1
    ac64:	cmp	x0, #0x1e
    ac68:	sub	w8, w8, w4
    ac6c:	ccmp	w5, #0xe, #0x0, hi  // hi = pmore
    ac70:	b.ls	b728 <inflate@@Base+0x1720>  // b.plast
    ac74:	sub	w2, w4, #0x10
    ac78:	mov	x0, #0x0                   	// #0
    ac7c:	mov	w3, #0x0                   	// #0
    ac80:	lsr	w2, w2, #4
    ac84:	add	w2, w2, #0x1
    ac88:	ldr	q0, [x1, x0]
    ac8c:	add	w3, w3, #0x1
    ac90:	cmp	w3, w2
    ac94:	str	q0, [x7, x0]
    ac98:	add	x0, x0, #0x10
    ac9c:	b.cc	ac88 <inflate@@Base+0xc80>  // b.lo, b.ul, b.last
    aca0:	lsl	w0, w2, #4
    aca4:	cmp	w4, w2, lsl #4
    aca8:	add	x3, x7, x0
    acac:	lsl	w2, w2, #4
    acb0:	add	x0, x1, x0
    acb4:	b.eq	b524 <inflate@@Base+0x151c>  // b.none
    acb8:	ldrb	w4, [x1, w2, uxtw]
    acbc:	subs	w1, w5, w2
    acc0:	strb	w4, [x7, w2, uxtw]
    acc4:	b.eq	b524 <inflate@@Base+0x151c>  // b.none
    acc8:	ldrb	w2, [x0, #1]
    accc:	cmp	w1, #0x1
    acd0:	strb	w2, [x3, #1]
    acd4:	b.eq	b524 <inflate@@Base+0x151c>  // b.none
    acd8:	ldrb	w2, [x0, #2]
    acdc:	cmp	w1, #0x2
    ace0:	strb	w2, [x3, #2]
    ace4:	b.eq	b524 <inflate@@Base+0x151c>  // b.none
    ace8:	ldrb	w2, [x0, #3]
    acec:	cmp	w1, #0x3
    acf0:	strb	w2, [x3, #3]
    acf4:	b.eq	b524 <inflate@@Base+0x151c>  // b.none
    acf8:	ldrb	w2, [x0, #4]
    acfc:	cmp	w1, #0x4
    ad00:	strb	w2, [x3, #4]
    ad04:	b.eq	b524 <inflate@@Base+0x151c>  // b.none
    ad08:	ldrb	w2, [x0, #5]
    ad0c:	cmp	w1, #0x5
    ad10:	strb	w2, [x3, #5]
    ad14:	b.eq	b524 <inflate@@Base+0x151c>  // b.none
    ad18:	ldrb	w2, [x0, #6]
    ad1c:	cmp	w1, #0x6
    ad20:	strb	w2, [x3, #6]
    ad24:	b.eq	b524 <inflate@@Base+0x151c>  // b.none
    ad28:	ldrb	w2, [x0, #7]
    ad2c:	cmp	w1, #0x7
    ad30:	strb	w2, [x3, #7]
    ad34:	b.eq	b524 <inflate@@Base+0x151c>  // b.none
    ad38:	ldrb	w2, [x0, #8]
    ad3c:	cmp	w1, #0x8
    ad40:	strb	w2, [x3, #8]
    ad44:	b.eq	b524 <inflate@@Base+0x151c>  // b.none
    ad48:	ldrb	w2, [x0, #9]
    ad4c:	cmp	w1, #0x9
    ad50:	strb	w2, [x3, #9]
    ad54:	b.eq	b524 <inflate@@Base+0x151c>  // b.none
    ad58:	ldrb	w2, [x0, #10]
    ad5c:	cmp	w1, #0xa
    ad60:	strb	w2, [x3, #10]
    ad64:	b.eq	b524 <inflate@@Base+0x151c>  // b.none
    ad68:	ldrb	w2, [x0, #11]
    ad6c:	cmp	w1, #0xb
    ad70:	strb	w2, [x3, #11]
    ad74:	b.eq	b524 <inflate@@Base+0x151c>  // b.none
    ad78:	ldrb	w2, [x0, #12]
    ad7c:	cmp	w1, #0xc
    ad80:	strb	w2, [x3, #12]
    ad84:	b.eq	b524 <inflate@@Base+0x151c>  // b.none
    ad88:	ldrb	w2, [x0, #13]
    ad8c:	cmp	w1, #0xd
    ad90:	strb	w2, [x3, #13]
    ad94:	b.eq	b524 <inflate@@Base+0x151c>  // b.none
    ad98:	ldrb	w1, [x0, #14]
    ad9c:	mov	w0, w5
    ada0:	strb	w1, [x3, #14]
    ada4:	nop
    ada8:	ldr	w1, [x21, #92]
    adac:	add	x0, x0, #0x1
    adb0:	add	x7, x7, x0
    adb4:	cbz	w1, a568 <inflate@@Base+0x560>
    adb8:	ldr	w1, [x21, #8]
    adbc:	b	a548 <inflate@@Base+0x540>
    adc0:	ldr	w0, [x21, #92]
    adc4:	cbz	w0, b47c <inflate@@Base+0x1474>
    adc8:	cmp	w20, w0
    adcc:	csel	w0, w20, w0, ls  // ls = plast
    add0:	cmp	w0, w8
    add4:	csel	w28, w0, w8, ls  // ls = plast
    add8:	cbz	w28, b94c <inflate@@Base+0x1944>
    addc:	mov	w2, w28
    ade0:	mov	x1, x24
    ade4:	mov	x0, x7
    ade8:	str	x2, [sp, #120]
    adec:	str	w8, [sp, #128]
    adf0:	sub	w20, w20, w28
    adf4:	str	w9, [sp, #136]
    adf8:	bl	23a0 <memcpy@plt>
    adfc:	ldr	x2, [sp, #120]
    ae00:	mov	x7, x0
    ae04:	ldr	w8, [sp, #128]
    ae08:	ldr	w0, [x21, #92]
    ae0c:	add	x24, x24, x2
    ae10:	ldr	w1, [x21, #8]
    ae14:	sub	w8, w8, w28
    ae18:	sub	w0, w0, w28
    ae1c:	ldr	w9, [sp, #136]
    ae20:	add	x7, x7, x2
    ae24:	str	w0, [x21, #92]
    ae28:	b	a548 <inflate@@Base+0x540>
    ae2c:	ldr	w0, [x21, #16]
    ae30:	b	ab50 <inflate@@Base+0xb48>
    ae34:	sub	w26, w9, w8
    ae38:	mov	w28, #0x1                   	// #1
    ae3c:	b	a7d0 <inflate@@Base+0x7c8>
    ae40:	ldr	w2, [x21, #128]
    ae44:	ldr	w1, [x21, #140]
    ae48:	cmp	w2, w1
    ae4c:	b.ls	ae9c <inflate@@Base+0xe94>  // b.plast
    ae50:	cmp	w19, #0x2
    ae54:	b.hi	ae70 <inflate@@Base+0xe68>  // b.pmore
    ae58:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    ae5c:	ldrb	w0, [x24], #1
    ae60:	sub	w20, w20, #0x1
    ae64:	lsl	x0, x0, x19
    ae68:	add	w19, w19, #0x8
    ae6c:	add	x23, x23, x0
    ae70:	ldr	x0, [sp, #112]
    ae74:	and	w3, w23, #0x7
    ae78:	sub	w19, w19, #0x3
    ae7c:	lsr	x23, x23, #3
    ae80:	ldrh	w0, [x0, w1, uxtw #1]
    ae84:	add	w1, w1, #0x1
    ae88:	str	w1, [x21, #140]
    ae8c:	cmp	w1, w2
    ae90:	add	x0, x21, x0, lsl #1
    ae94:	strh	w3, [x0, #152]
    ae98:	b.cc	ae50 <inflate@@Base+0xe48>  // b.lo, b.ul, b.last
    ae9c:	cmp	w1, #0x12
    aea0:	b.hi	aed8 <inflate@@Base+0xed0>  // b.pmore
    aea4:	ldr	x0, [sp, #112]
    aea8:	mov	w3, #0x12                  	// #18
    aeac:	sub	w3, w3, w1
    aeb0:	add	x4, x0, w1, uxtw #1
    aeb4:	mov	x0, #0x0                   	// #0
    aeb8:	ldrh	w1, [x4, x0, lsl #1]
    aebc:	cmp	x0, x3
    aec0:	add	x0, x0, #0x1
    aec4:	add	x1, x21, x1, lsl #1
    aec8:	strh	wzr, [x1, #152]
    aecc:	b.ne	aeb8 <inflate@@Base+0xeb0>  // b.any
    aed0:	mov	w0, #0x13                  	// #19
    aed4:	str	w0, [x21, #140]
    aed8:	add	x0, x21, #0x558
    aedc:	mov	w1, #0x7                   	// #7
    aee0:	str	x0, [x21, #104]
    aee4:	add	x5, x21, #0x318
    aee8:	str	w1, [x21, #120]
    aeec:	add	x4, x21, #0x78
    aef0:	str	x0, [x21, #144]
    aef4:	add	x3, x21, #0x90
    aef8:	add	x1, x21, #0x98
    aefc:	mov	w2, #0x13                  	// #19
    af00:	mov	w0, #0x0                   	// #0
    af04:	str	x7, [sp, #120]
    af08:	str	w8, [sp, #128]
    af0c:	str	w9, [sp, #136]
    af10:	bl	caa0 <inflateCodesUsed@@ZLIB_1.2.9+0x68>
    af14:	ldr	w8, [sp, #128]
    af18:	ldr	w9, [sp, #136]
    af1c:	ldr	x7, [sp, #120]
    af20:	cbz	w0, bc58 <inflate@@Base+0x1c50>
    af24:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    af28:	add	x0, x0, #0x610
    af2c:	str	x0, [x22, #48]
    af30:	mov	w0, #0x3f51                	// #16209
    af34:	str	w0, [x21, #8]
    af38:	b	a5d4 <inflate@@Base+0x5cc>
    af3c:	ldr	w5, [x21, #140]
    af40:	ldp	w2, w11, [x21, #132]
    af44:	add	w11, w2, w11
    af48:	cmp	w11, w5
    af4c:	b.ls	afcc <inflate@@Base+0xfc4>  // b.plast
    af50:	ldr	w0, [x21, #120]
    af54:	mov	w3, #0xffffffff            	// #-1
    af58:	ldr	x4, [x21, #104]
    af5c:	mov	w13, #0xfffffffd            	// #-3
    af60:	lsl	w3, w3, w0
    af64:	mvn	w3, w3
    af68:	mov	w12, #0xfffffff9            	// #-7
    af6c:	and	w0, w3, w23
    af70:	b	af90 <inflate@@Base+0xf88>
    af74:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    af78:	ldrb	w0, [x24], #1
    af7c:	sub	w20, w20, #0x1
    af80:	lsl	x0, x0, x19
    af84:	add	x23, x23, x0
    af88:	and	w0, w3, w23
    af8c:	add	w19, w19, #0x8
    af90:	add	x0, x4, x0, lsl #2
    af94:	ldrb	w1, [x0, #1]
    af98:	ldrh	w0, [x0, #2]
    af9c:	cmp	w1, w19
    afa0:	b.hi	af74 <inflate@@Base+0xf6c>  // b.pmore
    afa4:	cmp	w0, #0xf
    afa8:	b.hi	b594 <inflate@@Base+0x158c>  // b.pmore
    afac:	add	x14, x21, w5, uxtw #1
    afb0:	sub	w19, w19, w1
    afb4:	add	w5, w5, #0x1
    afb8:	str	w5, [x21, #140]
    afbc:	lsr	x23, x23, x1
    afc0:	strh	w0, [x14, #152]
    afc4:	cmp	w11, w5
    afc8:	b.hi	af6c <inflate@@Base+0xf64>  // b.pmore
    afcc:	ldr	w0, [x21, #8]
    afd0:	mov	w11, #0x3f51                	// #16209
    afd4:	cmp	w0, w11
    afd8:	b.eq	a5d4 <inflate@@Base+0x5cc>  // b.none
    afdc:	ldrh	w0, [x21, #664]
    afe0:	cbnz	w0, bd68 <inflate@@Base+0x1d60>
    afe4:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    afe8:	add	x0, x0, #0x650
    afec:	str	x0, [x22, #48]
    aff0:	str	w11, [x21, #8]
    aff4:	b	a5d4 <inflate@@Base+0x5cc>
    aff8:	ldr	w2, [x21, #24]
    affc:	mov	w1, w2
    b000:	tbz	w2, #10, a224 <inflate@@Base+0x21c>
    b004:	b	ab00 <inflate@@Base+0xaf8>
    b008:	ldr	w1, [x21, #24]
    b00c:	and	w0, w1, #0x400
    b010:	b	a23c <inflate@@Base+0x234>
    b014:	ldr	w1, [x21, #24]
    b018:	b	a2e0 <inflate@@Base+0x2d8>
    b01c:	ldr	w1, [x21, #24]
    b020:	b	a2fc <inflate@@Base+0x2f4>
    b024:	ldr	w1, [x21, #24]
    b028:	b	a314 <inflate@@Base+0x30c>
    b02c:	ldr	w2, [x21, #100]
    b030:	b	a5f0 <inflate@@Base+0x5e8>
    b034:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    b038:	ldrb	w0, [x24], #1
    b03c:	sub	w20, w20, #0x1
    b040:	lsl	x0, x0, x19
    b044:	add	w19, w19, #0x8
    b048:	add	x23, x23, x0
    b04c:	cmp	w19, w2
    b050:	b.cc	b034 <inflate@@Base+0x102c>  // b.lo, b.ul, b.last
    b054:	ldr	w3, [x21, #92]
    b058:	mov	w0, #0xffffffff            	// #-1
    b05c:	ldr	w1, [x21, #7148]
    b060:	lsl	w0, w0, w2
    b064:	bic	w0, w23, w0
    b068:	sub	w19, w19, w2
    b06c:	add	w0, w0, w3
    b070:	lsr	x23, x23, x2
    b074:	add	w2, w1, w2
    b078:	str	w0, [x21, #92]
    b07c:	str	w2, [x21, #7148]
    b080:	b	a5f8 <inflate@@Base+0x5f0>
    b084:	ldr	w3, [x21, #100]
    b088:	b	a584 <inflate@@Base+0x57c>
    b08c:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    b090:	ldrb	w0, [x24], #1
    b094:	sub	w20, w20, #0x1
    b098:	lsl	x0, x0, x19
    b09c:	add	w19, w19, #0x8
    b0a0:	add	x23, x23, x0
    b0a4:	cmp	w19, w3
    b0a8:	b.cc	b08c <inflate@@Base+0x1084>  // b.lo, b.ul, b.last
    b0ac:	ldr	w2, [x21, #96]
    b0b0:	mov	w0, #0xffffffff            	// #-1
    b0b4:	ldr	w1, [x21, #7148]
    b0b8:	lsl	w0, w0, w3
    b0bc:	bic	w0, w23, w0
    b0c0:	sub	w19, w19, w3
    b0c4:	add	w0, w2, w0
    b0c8:	lsr	x23, x23, x3
    b0cc:	add	w3, w1, w3
    b0d0:	str	w0, [x21, #96]
    b0d4:	str	w3, [x21, #7148]
    b0d8:	b	a588 <inflate@@Base+0x580>
    b0dc:	ldr	w0, [x21, #92]
    b0e0:	mov	w1, #0x3f43                	// #16195
    b0e4:	str	w1, [x21, #8]
    b0e8:	b	adc4 <inflate@@Base+0xdbc>
    b0ec:	cmp	w19, #0x1f
    b0f0:	b.ls	a6b0 <inflate@@Base+0x6a8>  // b.plast
    b0f4:	mov	x1, x24
    b0f8:	b	a734 <inflate@@Base+0x72c>
    b0fc:	mov	w28, #0xfffffffc            	// #-4
    b100:	ldp	x19, x20, [sp, #16]
    b104:	ldp	x21, x22, [sp, #32]
    b108:	ldp	x23, x24, [sp, #48]
    b10c:	ldp	x25, x26, [sp, #64]
    b110:	b	a04c <inflate@@Base+0x44>
    b114:	cmp	w19, #0xf
    b118:	b.hi	b390 <inflate@@Base+0x1388>  // b.pmore
    b11c:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    b120:	mov	x28, x24
    b124:	add	w1, w19, #0x8
    b128:	cmp	w1, #0xf
    b12c:	sub	w2, w20, #0x1
    b130:	ldrb	w0, [x28], #1
    b134:	lsl	x0, x0, x19
    b138:	add	x23, x23, x0
    b13c:	b.hi	bbd4 <inflate@@Base+0x1bcc>  // b.pmore
    b140:	cbz	w2, b57c <inflate@@Base+0x1574>
    b144:	ldrb	w0, [x24, #1]
    b148:	sub	w20, w20, #0x2
    b14c:	add	w19, w19, #0x10
    b150:	add	x28, x24, #0x2
    b154:	lsl	x0, x0, x1
    b158:	add	x23, x23, x0
    b15c:	str	w23, [x21, #24]
    b160:	and	w0, w23, #0xff
    b164:	cmp	w0, #0x8
    b168:	mov	w0, w23
    b16c:	b.eq	b7f4 <inflate@@Base+0x17ec>  // b.none
    b170:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    b174:	add	x0, x0, #0xfd0
    b178:	str	x0, [x22, #48]
    b17c:	mov	x24, x28
    b180:	mov	w0, #0x3f51                	// #16209
    b184:	str	w0, [x21, #8]
    b188:	b	a5d4 <inflate@@Base+0x5cc>
    b18c:	cmp	w19, #0x2
    b190:	b.hi	b1ac <inflate@@Base+0x11a4>  // b.pmore
    b194:	cbz	w20, b94c <inflate@@Base+0x1944>
    b198:	ldrb	w0, [x24], #1
    b19c:	sub	w20, w20, #0x1
    b1a0:	lsl	x0, x0, x19
    b1a4:	add	w19, w19, #0x8
    b1a8:	add	x23, x23, x0
    b1ac:	and	w0, w23, #0x1
    b1b0:	str	w0, [x21, #12]
    b1b4:	ubfx	w0, w23, #1, #2
    b1b8:	cmp	w0, #0x2
    b1bc:	b.eq	b2ac <inflate@@Base+0x12a4>  // b.none
    b1c0:	cmp	w0, #0x3
    b1c4:	b.eq	b954 <inflate@@Base+0x194c>  // b.none
    b1c8:	cmp	w0, #0x1
    b1cc:	b.eq	b920 <inflate@@Base+0x1918>  // b.none
    b1d0:	lsr	x23, x23, #3
    b1d4:	sub	w19, w19, #0x3
    b1d8:	mov	w0, #0x3f41                	// #16193
    b1dc:	str	w0, [x21, #8]
    b1e0:	and	w0, w19, #0x7
    b1e4:	and	w19, w19, #0xfffffff8
    b1e8:	cmp	w19, #0x1f
    b1ec:	lsr	x23, x23, x0
    b1f0:	b.hi	bba4 <inflate@@Base+0x1b9c>  // b.pmore
    b1f4:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    b1f8:	mov	x1, x24
    b1fc:	add	w2, w19, #0x8
    b200:	cmp	w2, #0x1f
    b204:	sub	w3, w20, #0x1
    b208:	ldrb	w0, [x1], #1
    b20c:	lsl	x0, x0, x19
    b210:	add	x23, x23, x0
    b214:	b.hi	bbb4 <inflate@@Base+0x1bac>  // b.pmore
    b218:	cbz	w3, b83c <inflate@@Base+0x1834>
    b21c:	ldrb	w0, [x24, #1]
    b220:	add	w3, w19, #0x10
    b224:	cmp	w3, #0x1f
    b228:	sub	w4, w20, #0x2
    b22c:	add	x1, x24, #0x2
    b230:	lsl	x0, x0, x2
    b234:	add	x23, x23, x0
    b238:	b.hi	bbe8 <inflate@@Base+0x1be0>  // b.pmore
    b23c:	cbz	w4, ba30 <inflate@@Base+0x1a28>
    b240:	ldrb	w0, [x24, #2]
    b244:	add	w2, w19, #0x18
    b248:	cmp	w2, #0x1f
    b24c:	sub	w4, w20, #0x3
    b250:	add	x1, x24, #0x3
    b254:	lsl	x0, x0, x3
    b258:	add	x23, x23, x0
    b25c:	b.hi	bc4c <inflate@@Base+0x1c44>  // b.pmore
    b260:	cbz	w4, b83c <inflate@@Base+0x1834>
    b264:	ldrb	w0, [x24, #3]
    b268:	sub	w20, w20, #0x4
    b26c:	add	w19, w19, #0x20
    b270:	add	x1, x24, #0x4
    b274:	lsl	x0, x0, x2
    b278:	add	x23, x23, x0
    b27c:	lsr	x2, x23, #16
    b280:	and	x0, x23, #0xffff
    b284:	eor	x2, x2, #0xffff
    b288:	cmp	x2, w23, uxth
    b28c:	b.eq	b818 <inflate@@Base+0x1810>  // b.none
    b290:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    b294:	add	x0, x0, #0x5c8
    b298:	str	x0, [x22, #48]
    b29c:	mov	x24, x1
    b2a0:	mov	w0, #0x3f51                	// #16209
    b2a4:	str	w0, [x21, #8]
    b2a8:	b	a5d4 <inflate@@Base+0x5cc>
    b2ac:	lsr	x23, x23, #3
    b2b0:	sub	w19, w19, #0x3
    b2b4:	mov	w0, #0x3f44                	// #16196
    b2b8:	str	w0, [x21, #8]
    b2bc:	cmp	w19, #0xd
    b2c0:	b.hi	bbac <inflate@@Base+0x1ba4>  // b.pmore
    b2c4:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    b2c8:	mov	x0, x24
    b2cc:	add	w2, w19, #0x8
    b2d0:	cmp	w2, #0xd
    b2d4:	sub	w3, w20, #0x1
    b2d8:	ldrb	w1, [x0], #1
    b2dc:	lsl	x1, x1, x19
    b2e0:	add	x23, x23, x1
    b2e4:	b.hi	bbc0 <inflate@@Base+0x1bb8>  // b.pmore
    b2e8:	cbz	w3, b564 <inflate@@Base+0x155c>
    b2ec:	ldrb	w1, [x24, #1]
    b2f0:	sub	w20, w20, #0x2
    b2f4:	add	w19, w19, #0x10
    b2f8:	add	x0, x24, #0x2
    b2fc:	lsl	x1, x1, x2
    b300:	add	x23, x23, x1
    b304:	and	w3, w23, #0x1f
    b308:	ubfx	w1, w23, #5, #5
    b30c:	ubfx	w2, w23, #10, #4
    b310:	add	w3, w3, #0x101
    b314:	add	w1, w1, #0x1
    b318:	add	w2, w2, #0x4
    b31c:	stp	w2, w3, [x21, #128]
    b320:	cmp	w3, #0x11e
    b324:	str	w1, [x21, #136]
    b328:	sub	w19, w19, #0xe
    b32c:	ccmp	w1, #0x1e, #0x2, ls  // ls = plast
    b330:	lsr	x23, x23, #14
    b334:	b.ls	ba84 <inflate@@Base+0x1a7c>  // b.plast
    b338:	adrp	x1, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    b33c:	add	x1, x1, #0x5e8
    b340:	str	x1, [x22, #48]
    b344:	mov	x24, x0
    b348:	mov	w0, #0x3f51                	// #16209
    b34c:	str	w0, [x21, #8]
    b350:	b	a5d4 <inflate@@Base+0x5cc>
    b354:	ldr	w4, [x21, #24]
    b358:	sub	x1, x7, x3
    b35c:	str	x7, [sp, #104]
    b360:	str	w8, [sp, #112]
    b364:	ldr	x0, [x21, #32]
    b368:	cbz	w4, bc6c <inflate@@Base+0x1c64>
    b36c:	bl	2430 <crc32@plt>
    b370:	mov	x2, x0
    b374:	ldr	w8, [sp, #112]
    b378:	ldr	x7, [sp, #104]
    b37c:	str	x2, [x21, #32]
    b380:	ldr	w0, [x21, #16]
    b384:	str	x2, [x22, #96]
    b388:	and	w1, w0, #0x4
    b38c:	b	a458 <inflate@@Base+0x450>
    b390:	mov	x28, x24
    b394:	b	b15c <inflate@@Base+0x1154>
    b398:	cmp	w19, #0xf
    b39c:	b.hi	ba64 <inflate@@Base+0x1a5c>  // b.pmore
    b3a0:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    b3a4:	mov	x0, x24
    b3a8:	add	w3, w19, #0x8
    b3ac:	cmp	w3, #0xf
    b3b0:	sub	w4, w20, #0x1
    b3b4:	ldrb	w2, [x0], #1
    b3b8:	lsl	x2, x2, x19
    b3bc:	add	x23, x23, x2
    b3c0:	b.hi	ba78 <inflate@@Base+0x1a70>  // b.pmore
    b3c4:	cbz	w4, b52c <inflate@@Base+0x1524>
    b3c8:	ldrb	w2, [x24, #1]
    b3cc:	sub	w20, w20, #0x2
    b3d0:	add	w19, w19, #0x10
    b3d4:	add	x0, x24, #0x2
    b3d8:	lsl	x2, x2, x3
    b3dc:	add	x23, x23, x2
    b3e0:	ldr	w2, [x21, #16]
    b3e4:	tbz	w2, #2, b554 <inflate@@Base+0x154c>
    b3e8:	ldrh	w2, [x21, #32]
    b3ec:	cmp	x2, x23
    b3f0:	b.eq	b554 <inflate@@Base+0x154c>  // b.none
    b3f4:	adrp	x1, 15000 <gzclose_w@@ZLIB_1.2.3.5+0x2c38>
    b3f8:	add	x1, x1, #0x28
    b3fc:	str	x1, [x22, #48]
    b400:	mov	x24, x0
    b404:	mov	w0, #0x3f51                	// #16209
    b408:	str	w0, [x21, #8]
    b40c:	b	a5d4 <inflate@@Base+0x5cc>
    b410:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    b414:	mov	w2, #0x0                   	// #0
    b418:	ldr	x1, [x21, #48]
    b41c:	ldrb	w28, [x24, w2, uxtw]
    b420:	add	w2, w2, #0x1
    b424:	cbz	x1, b44c <inflate@@Base+0x1444>
    b428:	ldr	x0, [x1, #56]
    b42c:	cbz	x0, b44c <inflate@@Base+0x1444>
    b430:	ldr	w4, [x1, #64]
    b434:	ldr	w1, [x21, #92]
    b438:	cmp	w1, w4
    b43c:	b.cs	b44c <inflate@@Base+0x1444>  // b.hs, b.nlast
    b440:	add	w4, w1, #0x1
    b444:	str	w4, [x21, #92]
    b448:	strb	w28, [x0, w1, uxtw]
    b44c:	cmp	w28, #0x0
    b450:	ccmp	w20, w2, #0x0, ne  // ne = any
    b454:	b.hi	b418 <inflate@@Base+0x1410>  // b.pmore
    b458:	ldr	w0, [x21, #24]
    b45c:	tbz	w0, #9, b468 <inflate@@Base+0x1460>
    b460:	ldr	w0, [x21, #16]
    b464:	tbnz	w0, #2, b7c0 <inflate@@Base+0x17b8>
    b468:	add	x24, x24, w2, uxtw
    b46c:	sub	w20, w20, w2
    b470:	cbnz	w28, a7c8 <inflate@@Base+0x7c0>
    b474:	ldr	w1, [x21, #24]
    b478:	b	a30c <inflate@@Base+0x304>
    b47c:	mov	w0, #0x3f3f                	// #16191
    b480:	str	w0, [x21, #8]
    b484:	b	a7b8 <inflate@@Base+0x7b0>
    b488:	ldr	x0, [x19, #72]
    b48c:	mov	w2, w24
    b490:	sub	x1, x7, x2
    b494:	str	w9, [sp, #104]
    b498:	bl	23a0 <memcpy@plt>
    b49c:	ldr	w20, [x22, #32]
    b4a0:	ldr	w9, [sp, #104]
    b4a4:	ldr	w0, [x19, #60]
    b4a8:	sub	w26, w9, w20
    b4ac:	ldr	w20, [x22, #8]
    b4b0:	stp	w0, w24, [x19, #64]
    b4b4:	b	a870 <inflate@@Base+0x868>
    b4b8:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    b4bc:	mov	w2, #0x0                   	// #0
    b4c0:	ldr	x1, [x21, #48]
    b4c4:	ldrb	w28, [x24, w2, uxtw]
    b4c8:	add	w2, w2, #0x1
    b4cc:	cbz	x1, b4f4 <inflate@@Base+0x14ec>
    b4d0:	ldr	x0, [x1, #40]
    b4d4:	cbz	x0, b4f4 <inflate@@Base+0x14ec>
    b4d8:	ldr	w4, [x1, #48]
    b4dc:	ldr	w1, [x21, #92]
    b4e0:	cmp	w1, w4
    b4e4:	b.cs	b4f4 <inflate@@Base+0x14ec>  // b.hs, b.nlast
    b4e8:	add	w4, w1, #0x1
    b4ec:	str	w4, [x21, #92]
    b4f0:	strb	w28, [x0, w1, uxtw]
    b4f4:	cmp	w28, #0x0
    b4f8:	ccmp	w20, w2, #0x0, ne  // ne = any
    b4fc:	b.hi	b4c0 <inflate@@Base+0x14b8>  // b.pmore
    b500:	ldr	w0, [x21, #24]
    b504:	tbz	w0, #9, b510 <inflate@@Base+0x1508>
    b508:	ldr	w0, [x21, #16]
    b50c:	tbnz	w0, #2, b854 <inflate@@Base+0x184c>
    b510:	add	x24, x24, w2, uxtw
    b514:	sub	w20, w20, w2
    b518:	cbnz	w28, a7c8 <inflate@@Base+0x7c0>
    b51c:	ldr	w1, [x21, #24]
    b520:	b	a2f0 <inflate@@Base+0x2e8>
    b524:	mov	w0, w5
    b528:	b	ada8 <inflate@@Base+0xda0>
    b52c:	mov	w19, w3
    b530:	mov	x24, x0
    b534:	sub	w26, w9, w8
    b538:	mov	w20, #0x0                   	// #0
    b53c:	mov	w28, #0x0                   	// #0
    b540:	b	a7d0 <inflate@@Base+0x7c8>
    b544:	ldr	w4, [x21, #92]
    b548:	sub	x1, x7, w1, uxtw
    b54c:	mov	w2, w4
    b550:	b	ac48 <inflate@@Base+0xc40>
    b554:	mov	x24, x0
    b558:	mov	w19, #0x0                   	// #0
    b55c:	mov	x23, #0x0                   	// #0
    b560:	b	a318 <inflate@@Base+0x310>
    b564:	mov	w19, w2
    b568:	mov	x24, x0
    b56c:	sub	w26, w9, w8
    b570:	mov	w20, #0x0                   	// #0
    b574:	mov	w28, #0x0                   	// #0
    b578:	b	a7d0 <inflate@@Base+0x7c8>
    b57c:	mov	x24, x28
    b580:	mov	w19, w1
    b584:	sub	w26, w9, w8
    b588:	mov	w20, #0x0                   	// #0
    b58c:	mov	w28, #0x0                   	// #0
    b590:	b	a7d0 <inflate@@Base+0x7c8>
    b594:	cmp	w0, #0x10
    b598:	b.eq	baa8 <inflate@@Base+0x1aa0>  // b.none
    b59c:	cmp	w0, #0x11
    b5a0:	b.eq	b8d0 <inflate@@Base+0x18c8>  // b.none
    b5a4:	add	w14, w1, #0x7
    b5a8:	cmp	w19, w14
    b5ac:	b.cs	b5d0 <inflate@@Base+0x15c8>  // b.hs, b.nlast
    b5b0:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    b5b4:	ldrb	w0, [x24], #1
    b5b8:	sub	w20, w20, #0x1
    b5bc:	lsl	x0, x0, x19
    b5c0:	add	w19, w19, #0x8
    b5c4:	add	x23, x23, x0
    b5c8:	cmp	w19, w14
    b5cc:	b.cc	b5b0 <inflate@@Base+0x15a8>  // b.lo, b.ul, b.last
    b5d0:	lsr	x23, x23, x1
    b5d4:	sub	w1, w12, w1
    b5d8:	and	w0, w23, #0x7f
    b5dc:	add	w19, w19, w1
    b5e0:	lsr	x23, x23, #7
    b5e4:	add	w1, w0, #0xb
    b5e8:	mov	w14, #0x0                   	// #0
    b5ec:	add	w5, w1, w5
    b5f0:	cmp	w11, w5
    b5f4:	b.cc	be08 <inflate@@Base+0x1e00>  // b.lo, b.ul, b.last
    b5f8:	ldr	w0, [x21, #140]
    b5fc:	add	w5, w0, w1
    b600:	add	x1, x21, w0, uxtw #1
    b604:	add	w0, w0, #0x1
    b608:	cmp	w5, w0
    b60c:	strh	w14, [x1, #152]
    b610:	b.ne	b600 <inflate@@Base+0x15f8>  // b.any
    b614:	str	w5, [x21, #140]
    b618:	b	afc4 <inflate@@Base+0xfbc>
    b61c:	mov	w0, #0xffffffff            	// #-1
    b620:	str	w0, [x21, #7148]
    b624:	b	a7b8 <inflate@@Base+0x7b0>
    b628:	add	w1, w2, w1
    b62c:	add	x1, x3, x1
    b630:	b	ac3c <inflate@@Base+0xc34>
    b634:	cmp	w19, #0xf
    b638:	b.hi	bd54 <inflate@@Base+0x1d4c>  // b.pmore
    b63c:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    b640:	mov	x28, x24
    b644:	add	w2, w19, #0x8
    b648:	cmp	w2, #0xf
    b64c:	sub	w4, w20, #0x1
    b650:	ldrb	w1, [x28], #1
    b654:	lsl	x1, x1, x19
    b658:	add	x23, x23, x1
    b65c:	b.hi	bd5c <inflate@@Base+0x1d54>  // b.pmore
    b660:	cbz	w4, b974 <inflate@@Base+0x196c>
    b664:	ldrb	w1, [x24, #1]
    b668:	sub	w20, w20, #0x2
    b66c:	add	w19, w19, #0x10
    b670:	add	x28, x24, #0x2
    b674:	lsl	x2, x1, x2
    b678:	add	x23, x23, x2
    b67c:	tst	x0, #0x2
    b680:	mov	x1, #0x8b1f                	// #35615
    b684:	ccmp	x23, x1, #0x0, ne  // ne = any
    b688:	b.eq	bcc4 <inflate@@Base+0x1cbc>  // b.none
    b68c:	ldr	x1, [x21, #48]
    b690:	str	wzr, [x21, #24]
    b694:	cbz	x1, b6a0 <inflate@@Base+0x1698>
    b698:	mov	w2, #0xffffffff            	// #-1
    b69c:	str	w2, [x1, #72]
    b6a0:	tbz	w0, #0, ba14 <inflate@@Base+0x1a0c>
    b6a4:	mov	x0, #0x4211                	// #16913
    b6a8:	ubfiz	x1, x23, #8, #8
    b6ac:	movk	x0, #0x2108, lsl #16
    b6b0:	add	x1, x1, x23, lsr #8
    b6b4:	movk	x0, #0x1084, lsl #32
    b6b8:	movk	x0, #0x842, lsl #48
    b6bc:	umulh	x2, x1, x0
    b6c0:	sub	x0, x1, x2
    b6c4:	add	x0, x2, x0, lsr #1
    b6c8:	lsr	x0, x0, #4
    b6cc:	lsl	x2, x0, #5
    b6d0:	sub	x0, x2, x0
    b6d4:	cmp	x1, x0
    b6d8:	b.ne	ba14 <inflate@@Base+0x1a0c>  // b.any
    b6dc:	and	w0, w23, #0xf
    b6e0:	cmp	w0, #0x8
    b6e4:	b.ne	b170 <inflate@@Base+0x1168>  // b.any
    b6e8:	ldr	w1, [x21, #56]
    b6ec:	lsr	x23, x23, #4
    b6f0:	and	w0, w23, #0xf
    b6f4:	sub	w19, w19, #0x4
    b6f8:	add	w0, w0, #0x8
    b6fc:	cbnz	w1, be20 <inflate@@Base+0x1e18>
    b700:	str	w0, [x21, #56]
    b704:	cmp	w0, #0xf
    b708:	b.ls	be30 <inflate@@Base+0x1e28>  // b.plast
    b70c:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    b710:	add	x0, x0, #0xff0
    b714:	str	x0, [x22, #48]
    b718:	mov	x24, x28
    b71c:	mov	w0, #0x3f51                	// #16209
    b720:	str	w0, [x21, #8]
    b724:	b	a5d4 <inflate@@Base+0x5cc>
    b728:	mov	w0, w5
    b72c:	mov	x2, #0x0                   	// #0
    b730:	ldrb	w4, [x1, x2]
    b734:	cmp	x0, x2
    b738:	strb	w4, [x7, x2]
    b73c:	add	x2, x2, #0x1
    b740:	b.ne	b730 <inflate@@Base+0x1728>  // b.any
    b744:	b	ada8 <inflate@@Base+0xda0>
    b748:	add	w3, w3, w0
    b74c:	mov	w1, #0xffffffff            	// #-1
    b750:	mov	w4, w5
    b754:	lsl	w3, w1, w3
    b758:	bic	w1, w11, w3
    b75c:	mvn	w11, w3
    b760:	b	b780 <inflate@@Base+0x1778>
    b764:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    b768:	ldrb	w1, [x24], #1
    b76c:	sub	w20, w20, #0x1
    b770:	lsl	x1, x1, x19
    b774:	add	x23, x23, x1
    b778:	and	w1, w11, w23
    b77c:	add	w19, w19, #0x8
    b780:	lsr	w1, w1, w0
    b784:	add	w1, w1, w4
    b788:	lsl	x1, x1, #2
    b78c:	add	x5, x2, x1
    b790:	ldrb	w3, [x2, x1]
    b794:	ldrb	w1, [x5, #1]
    b798:	ldrh	w5, [x5, #2]
    b79c:	add	w12, w1, w0
    b7a0:	cmp	w12, w19
    b7a4:	b.hi	b764 <inflate@@Base+0x175c>  // b.pmore
    b7a8:	ldr	w2, [x21, #7148]
    b7ac:	sub	w19, w19, w0
    b7b0:	mov	w4, w1
    b7b4:	lsr	x23, x23, x0
    b7b8:	add	w2, w0, w2
    b7bc:	b	a674 <inflate@@Base+0x66c>
    b7c0:	ldr	x0, [x21, #32]
    b7c4:	mov	x1, x24
    b7c8:	str	w2, [sp, #120]
    b7cc:	str	x7, [sp, #128]
    b7d0:	str	w8, [sp, #136]
    b7d4:	str	w9, [sp, #144]
    b7d8:	bl	2430 <crc32@plt>
    b7dc:	ldr	w2, [sp, #120]
    b7e0:	ldr	w8, [sp, #136]
    b7e4:	ldr	w9, [sp, #144]
    b7e8:	str	x0, [x21, #32]
    b7ec:	ldr	x7, [sp, #128]
    b7f0:	b	b468 <inflate@@Base+0x1460>
    b7f4:	tst	x23, #0xe000
    b7f8:	b.eq	a148 <inflate@@Base+0x140>  // b.none
    b7fc:	adrp	x0, 15000 <gzclose_w@@ZLIB_1.2.3.5+0x2c38>
    b800:	add	x0, x0, #0x8
    b804:	str	x0, [x22, #48]
    b808:	mov	x24, x28
    b80c:	mov	w0, #0x3f51                	// #16209
    b810:	str	w0, [x21, #8]
    b814:	b	a5d4 <inflate@@Base+0x5cc>
    b818:	mov	w2, #0x3f42                	// #16194
    b81c:	str	w2, [x21, #8]
    b820:	str	w0, [x21, #92]
    b824:	mov	x24, x1
    b828:	cmp	w25, #0x6
    b82c:	b.eq	be88 <inflate@@Base+0x1e80>  // b.none
    b830:	mov	w19, #0x0                   	// #0
    b834:	mov	x23, #0x0                   	// #0
    b838:	b	b0e0 <inflate@@Base+0x10d8>
    b83c:	mov	w19, w2
    b840:	mov	x24, x1
    b844:	sub	w26, w9, w8
    b848:	mov	w28, #0x0                   	// #0
    b84c:	mov	w20, #0x0                   	// #0
    b850:	b	a7d0 <inflate@@Base+0x7c8>
    b854:	ldr	x0, [x21, #32]
    b858:	mov	x1, x24
    b85c:	str	w2, [sp, #120]
    b860:	str	x7, [sp, #128]
    b864:	str	w8, [sp, #136]
    b868:	str	w9, [sp, #144]
    b86c:	bl	2430 <crc32@plt>
    b870:	ldr	w2, [sp, #120]
    b874:	ldr	w8, [sp, #136]
    b878:	ldr	w9, [sp, #144]
    b87c:	str	x0, [x21, #32]
    b880:	ldr	x7, [sp, #128]
    b884:	b	b510 <inflate@@Base+0x1508>
    b888:	ldr	x0, [x21, #32]
    b88c:	add	x1, sp, #0xa8
    b890:	mov	w2, #0x2                   	// #2
    b894:	str	x7, [sp, #120]
    b898:	str	w8, [sp, #128]
    b89c:	str	w9, [sp, #136]
    b8a0:	strh	w23, [sp, #168]
    b8a4:	bl	2430 <crc32@plt>
    b8a8:	ldr	w2, [x21, #24]
    b8ac:	ldr	w8, [sp, #128]
    b8b0:	ldr	w9, [sp, #136]
    b8b4:	mov	w1, w2
    b8b8:	str	x0, [x21, #32]
    b8bc:	ldr	x7, [sp, #120]
    b8c0:	b	a210 <inflate@@Base+0x208>
    b8c4:	mov	w19, w2
    b8c8:	mov	x24, x0
    b8cc:	b	b844 <inflate@@Base+0x183c>
    b8d0:	add	w14, w1, #0x3
    b8d4:	cmp	w19, w14
    b8d8:	b.cs	b900 <inflate@@Base+0x18f8>  // b.hs, b.nlast
    b8dc:	nop
    b8e0:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    b8e4:	ldrb	w0, [x24], #1
    b8e8:	sub	w20, w20, #0x1
    b8ec:	lsl	x0, x0, x19
    b8f0:	add	w19, w19, #0x8
    b8f4:	add	x23, x23, x0
    b8f8:	cmp	w19, w14
    b8fc:	b.cc	b8e0 <inflate@@Base+0x18d8>  // b.lo, b.ul, b.last
    b900:	lsr	x23, x23, x1
    b904:	sub	w1, w13, w1
    b908:	and	w0, w23, #0x7
    b90c:	add	w19, w19, w1
    b910:	lsr	x23, x23, #3
    b914:	add	w1, w0, #0x3
    b918:	mov	w14, #0x0                   	// #0
    b91c:	b	b5ec <inflate@@Base+0x15e4>
    b920:	mov	x1, #0x9                   	// #9
    b924:	add	x0, x26, #0x800
    b928:	movk	x1, #0x5, lsl #32
    b92c:	mov	w2, #0x3f47                	// #16199
    b930:	str	w2, [x21, #8]
    b934:	lsr	x23, x23, #3
    b938:	stp	x26, x0, [x21, #104]
    b93c:	sub	w19, w19, #0x3
    b940:	cmp	w25, #0x6
    b944:	str	x1, [x21, #120]
    b948:	b.ne	a568 <inflate@@Base+0x560>  // b.any
    b94c:	sub	w26, w9, w8
    b950:	b	a7d0 <inflate@@Base+0x7c8>
    b954:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    b958:	add	x0, x0, #0x5b0
    b95c:	str	x0, [x22, #48]
    b960:	lsr	x23, x23, #3
    b964:	mov	w0, #0x3f51                	// #16209
    b968:	sub	w19, w19, #0x3
    b96c:	str	w0, [x21, #8]
    b970:	b	a5d4 <inflate@@Base+0x5cc>
    b974:	mov	x24, x28
    b978:	mov	w19, w2
    b97c:	sub	w26, w9, w8
    b980:	mov	w20, #0x0                   	// #0
    b984:	mov	w28, #0x0                   	// #0
    b988:	b	a7d0 <inflate@@Base+0x7c8>
    b98c:	ldr	x0, [x21, #32]
    b990:	mov	w2, w28
    b994:	mov	x1, x24
    b998:	str	x7, [sp, #120]
    b99c:	str	w8, [sp, #128]
    b9a0:	str	w9, [sp, #136]
    b9a4:	str	x5, [sp, #144]
    b9a8:	bl	2430 <crc32@plt>
    b9ac:	ldr	w8, [sp, #128]
    b9b0:	ldr	w9, [sp, #136]
    b9b4:	str	x0, [x21, #32]
    b9b8:	ldr	x7, [sp, #120]
    b9bc:	ldr	x5, [sp, #144]
    b9c0:	b	a2b8 <inflate@@Base+0x2b0>
    b9c4:	tbz	w2, #6, a5e0 <inflate@@Base+0x5d8>
    b9c8:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    b9cc:	add	x0, x0, #0x6b0
    b9d0:	str	x0, [x22, #48]
    b9d4:	mov	w0, #0x3f51                	// #16209
    b9d8:	str	w0, [x21, #8]
    b9dc:	b	a5d4 <inflate@@Base+0x5cc>
    b9e0:	ldr	x0, [x21, #32]
    b9e4:	add	x1, sp, #0xa8
    b9e8:	mov	w2, #0x4                   	// #4
    b9ec:	str	x7, [sp, #120]
    b9f0:	str	w8, [sp, #128]
    b9f4:	str	w9, [sp, #136]
    b9f8:	str	w23, [sp, #168]
    b9fc:	bl	2430 <crc32@plt>
    ba00:	ldr	w8, [sp, #128]
    ba04:	ldr	w9, [sp, #136]
    ba08:	str	x0, [x21, #32]
    ba0c:	ldr	x7, [sp, #120]
    ba10:	b	a1b4 <inflate@@Base+0x1ac>
    ba14:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    ba18:	add	x0, x0, #0xfb8
    ba1c:	str	x0, [x22, #48]
    ba20:	mov	x24, x28
    ba24:	mov	w0, #0x3f51                	// #16209
    ba28:	str	w0, [x21, #8]
    ba2c:	b	a5d4 <inflate@@Base+0x5cc>
    ba30:	mov	w19, w3
    ba34:	mov	x24, x1
    ba38:	b	b844 <inflate@@Base+0x183c>
    ba3c:	mov	x0, x24
    ba40:	b	abec <inflate@@Base+0xbe4>
    ba44:	mov	x24, x0
    ba48:	mov	w19, #0x0                   	// #0
    ba4c:	mov	x23, #0x0                   	// #0
    ba50:	mov	w0, #0x3f50                	// #16208
    ba54:	sub	w26, w9, w8
    ba58:	mov	w28, #0x1                   	// #1
    ba5c:	str	w0, [x21, #8]
    ba60:	b	a7d0 <inflate@@Base+0x7c8>
    ba64:	mov	x0, x24
    ba68:	b	b3e0 <inflate@@Base+0x13d8>
    ba6c:	mov	w19, w2
    ba70:	mov	w20, w3
    ba74:	b	abec <inflate@@Base+0xbe4>
    ba78:	mov	w19, w3
    ba7c:	mov	w20, w4
    ba80:	b	b3e0 <inflate@@Base+0x13d8>
    ba84:	mov	x24, x0
    ba88:	mov	w1, #0x0                   	// #0
    ba8c:	mov	w0, #0x3f45                	// #16197
    ba90:	str	w0, [x21, #8]
    ba94:	str	wzr, [x21, #140]
    ba98:	b	ae50 <inflate@@Base+0xe48>
    ba9c:	mov	w19, w3
    baa0:	mov	w20, w4
    baa4:	b	abec <inflate@@Base+0xbe4>
    baa8:	add	w14, w1, #0x2
    baac:	cmp	w14, w19
    bab0:	b.ls	bad8 <inflate@@Base+0x1ad0>  // b.plast
    bab4:	nop
    bab8:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    babc:	ldrb	w0, [x24], #1
    bac0:	sub	w20, w20, #0x1
    bac4:	lsl	x0, x0, x19
    bac8:	add	w19, w19, #0x8
    bacc:	add	x23, x23, x0
    bad0:	cmp	w14, w19
    bad4:	b.hi	bab8 <inflate@@Base+0x1ab0>  // b.pmore
    bad8:	sub	w19, w19, w1
    badc:	lsr	x23, x23, x1
    bae0:	cbz	w5, be08 <inflate@@Base+0x1e00>
    bae4:	sub	w0, w5, #0x1
    bae8:	and	w1, w23, #0x3
    baec:	sub	w19, w19, #0x2
    baf0:	add	w1, w1, #0x3
    baf4:	add	x0, x21, x0, lsl #1
    baf8:	lsr	x23, x23, #2
    bafc:	ldrh	w14, [x0, #152]
    bb00:	b	b5ec <inflate@@Base+0x15e4>
    bb04:	mov	w19, w3
    bb08:	mov	x24, x0
    bb0c:	b	b844 <inflate@@Base+0x183c>
    bb10:	mov	w26, w9
    bb14:	mov	w28, #0x0                   	// #0
    bb18:	b	a7d0 <inflate@@Base+0x7c8>
    bb1c:	add	w2, w2, w0
    bb20:	mov	w3, #0xffffffff            	// #-1
    bb24:	lsl	w3, w3, w2
    bb28:	bic	w1, w5, w3
    bb2c:	mvn	w3, w3
    bb30:	b	bb50 <inflate@@Base+0x1b48>
    bb34:	cbz	w20, a7c8 <inflate@@Base+0x7c0>
    bb38:	ldrb	w1, [x24], #1
    bb3c:	sub	w20, w20, #0x1
    bb40:	lsl	x1, x1, x19
    bb44:	add	x23, x23, x1
    bb48:	and	w1, w3, w23
    bb4c:	add	w19, w19, #0x8
    bb50:	lsr	w1, w1, w0
    bb54:	add	w1, w1, w11
    bb58:	lsl	x1, x1, #2
    bb5c:	add	x5, x4, x1
    bb60:	ldrb	w2, [x4, x1]
    bb64:	ldrb	w1, [x5, #1]
    bb68:	ldrh	w12, [x5, #2]
    bb6c:	add	w5, w1, w0
    bb70:	cmp	w5, w19
    bb74:	b.hi	bb34 <inflate@@Base+0x1b2c>  // b.pmore
    bb78:	str	w12, [x21, #92]
    bb7c:	sub	w19, w19, w0
    bb80:	str	w5, [x21, #7148]
    bb84:	lsr	x23, x23, x0
    bb88:	sub	w19, w19, w1
    bb8c:	lsr	x23, x23, x1
    bb90:	cbnz	w2, aad0 <inflate@@Base+0xac8>
    bb94:	b	a4c8 <inflate@@Base+0x4c0>
    bb98:	mov	w19, w2
    bb9c:	mov	w20, w4
    bba0:	b	abec <inflate@@Base+0xbe4>
    bba4:	mov	x1, x24
    bba8:	b	b27c <inflate@@Base+0x1274>
    bbac:	mov	x0, x24
    bbb0:	b	b304 <inflate@@Base+0x12fc>
    bbb4:	mov	w19, w2
    bbb8:	mov	w20, w3
    bbbc:	b	b27c <inflate@@Base+0x1274>
    bbc0:	mov	w19, w2
    bbc4:	mov	w20, w3
    bbc8:	b	b304 <inflate@@Base+0x12fc>
    bbcc:	mov	w20, w3
    bbd0:	b	a734 <inflate@@Base+0x72c>
    bbd4:	mov	w19, w1
    bbd8:	mov	w20, w2
    bbdc:	b	b15c <inflate@@Base+0x1154>
    bbe0:	mov	w20, w4
    bbe4:	b	a734 <inflate@@Base+0x72c>
    bbe8:	mov	w19, w3
    bbec:	mov	w20, w4
    bbf0:	b	b27c <inflate@@Base+0x1274>
    bbf4:	ldr	x0, [x21, #32]
    bbf8:	add	x1, sp, #0xa8
    bbfc:	mov	w2, #0x2                   	// #2
    bc00:	str	x7, [sp, #120]
    bc04:	str	w8, [sp, #128]
    bc08:	mov	w19, #0x0                   	// #0
    bc0c:	str	w9, [sp, #136]
    bc10:	strh	w23, [sp, #168]
    bc14:	bl	2430 <crc32@plt>
    bc18:	ldr	w1, [x21, #24]
    bc1c:	mov	x23, #0x0                   	// #0
    bc20:	ldr	w8, [sp, #128]
    bc24:	ldr	w9, [sp, #136]
    bc28:	str	x0, [x21, #32]
    bc2c:	and	w0, w1, #0x400
    bc30:	ldr	x7, [sp, #120]
    bc34:	b	a234 <inflate@@Base+0x22c>
    bc38:	mov	w19, w2
    bc3c:	mov	x24, x26
    bc40:	b	b844 <inflate@@Base+0x183c>
    bc44:	mov	w20, w2
    bc48:	b	a734 <inflate@@Base+0x72c>
    bc4c:	mov	w19, w2
    bc50:	mov	w20, w4
    bc54:	b	b27c <inflate@@Base+0x1274>
    bc58:	mov	w0, #0x3f46                	// #16198
    bc5c:	mov	w5, #0x0                   	// #0
    bc60:	str	w0, [x21, #8]
    bc64:	str	wzr, [x21, #140]
    bc68:	b	af40 <inflate@@Base+0xf38>
    bc6c:	bl	2560 <adler32@plt>
    bc70:	mov	x2, x0
    bc74:	ldr	w8, [sp, #112]
    bc78:	ldr	x7, [sp, #104]
    bc7c:	b	b37c <inflate@@Base+0x1374>
    bc80:	mov	x26, x24
    bc84:	b	a42c <inflate@@Base+0x424>
    bc88:	ldp	x25, x26, [sp, #64]
    bc8c:	str	x24, [x22]
    bc90:	str	w20, [x22, #8]
    bc94:	mov	w28, #0x2                   	// #2
    bc98:	str	x7, [x22, #24]
    bc9c:	str	w8, [x22, #32]
    bca0:	str	x23, [x21, #80]
    bca4:	str	w19, [x21, #88]
    bca8:	ldp	x19, x20, [sp, #16]
    bcac:	ldp	x21, x22, [sp, #32]
    bcb0:	ldp	x23, x24, [sp, #48]
    bcb4:	b	a04c <inflate@@Base+0x44>
    bcb8:	mov	w19, w2
    bcbc:	mov	w20, w3
    bcc0:	b	a42c <inflate@@Base+0x424>
    bcc4:	ldr	w0, [x21, #56]
    bcc8:	cbnz	w0, bcd4 <inflate@@Base+0x1ccc>
    bccc:	mov	w0, #0xf                   	// #15
    bcd0:	str	w0, [x21, #56]
    bcd4:	mov	w2, #0x0                   	// #0
    bcd8:	mov	x1, #0x0                   	// #0
    bcdc:	mov	x0, #0x0                   	// #0
    bce0:	str	x7, [sp, #120]
    bce4:	str	w8, [sp, #128]
    bce8:	mov	x24, x28
    bcec:	str	w9, [sp, #136]
    bcf0:	bl	2430 <crc32@plt>
    bcf4:	mov	w3, #0xffff8b1f            	// #-29921
    bcf8:	str	x0, [x21, #32]
    bcfc:	add	x1, sp, #0xa8
    bd00:	mov	w2, #0x2                   	// #2
    bd04:	strh	w3, [sp, #168]
    bd08:	bl	2430 <crc32@plt>
    bd0c:	mov	w1, #0x3f35                	// #16181
    bd10:	ldr	w8, [sp, #128]
    bd14:	ldr	w9, [sp, #136]
    bd18:	mov	w19, #0x0                   	// #0
    bd1c:	mov	x23, #0x0                   	// #0
    bd20:	str	w1, [x21, #8]
    bd24:	str	x0, [x21, #32]
    bd28:	ldr	x7, [sp, #120]
    bd2c:	b	b11c <inflate@@Base+0x1114>
    bd30:	mov	w19, w3
    bd34:	mov	w20, w4
    bd38:	b	a42c <inflate@@Base+0x424>
    bd3c:	mov	w19, w2
    bd40:	mov	w20, w4
    bd44:	b	a42c <inflate@@Base+0x424>
    bd48:	mov	w19, w3
    bd4c:	mov	x24, x26
    bd50:	b	b844 <inflate@@Base+0x183c>
    bd54:	mov	x28, x24
    bd58:	b	b67c <inflate@@Base+0x1674>
    bd5c:	mov	w19, w2
    bd60:	mov	w20, w4
    bd64:	b	b67c <inflate@@Base+0x1674>
    bd68:	add	x0, x21, #0x558
    bd6c:	mov	w3, #0x9                   	// #9
    bd70:	str	x0, [x21, #104]
    bd74:	add	x28, x21, #0x98
    bd78:	str	w3, [x21, #120]
    bd7c:	add	x5, x21, #0x318
    bd80:	str	x0, [x21, #144]
    bd84:	add	x3, x21, #0x90
    bd88:	mov	x1, x28
    bd8c:	add	x4, x21, #0x78
    bd90:	mov	w0, #0x1                   	// #1
    bd94:	stp	x5, x3, [sp, #120]
    bd98:	str	x7, [sp, #136]
    bd9c:	str	w8, [sp, #144]
    bda0:	str	w9, [sp, #156]
    bda4:	bl	caa0 <inflateCodesUsed@@ZLIB_1.2.9+0x68>
    bda8:	ldr	w8, [sp, #144]
    bdac:	mov	w11, #0x3f51                	// #16209
    bdb0:	ldr	w9, [sp, #156]
    bdb4:	ldp	x5, x3, [sp, #120]
    bdb8:	ldr	x7, [sp, #136]
    bdbc:	cbz	w0, be9c <inflate@@Base+0x1e94>
    bdc0:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    bdc4:	add	x0, x0, #0x678
    bdc8:	str	x0, [x22, #48]
    bdcc:	str	w11, [x21, #8]
    bdd0:	b	a5d4 <inflate@@Base+0x5cc>
    bdd4:	ldr	x0, [x21, #32]
    bdd8:	add	x1, sp, #0xa8
    bddc:	mov	w2, #0x2                   	// #2
    bde0:	str	x7, [sp, #120]
    bde4:	str	w8, [sp, #128]
    bde8:	str	w9, [sp, #136]
    bdec:	strh	w23, [sp, #168]
    bdf0:	bl	2430 <crc32@plt>
    bdf4:	ldr	w8, [sp, #128]
    bdf8:	ldr	w9, [sp, #136]
    bdfc:	str	x0, [x21, #32]
    be00:	ldr	x7, [sp, #120]
    be04:	b	a164 <inflate@@Base+0x15c>
    be08:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    be0c:	add	x0, x0, #0x630
    be10:	str	x0, [x22, #48]
    be14:	mov	w0, #0x3f51                	// #16209
    be18:	str	w0, [x21, #8]
    be1c:	b	a5d4 <inflate@@Base+0x5cc>
    be20:	cmp	w0, #0xf
    be24:	b.hi	b70c <inflate@@Base+0x1704>  // b.pmore
    be28:	cmp	w1, w0
    be2c:	b.cc	b70c <inflate@@Base+0x1704>  // b.lo, b.ul, b.last
    be30:	mov	w1, #0x1                   	// #1
    be34:	mov	w2, #0x0                   	// #0
    be38:	lsl	w0, w1, w0
    be3c:	str	w0, [x21, #28]
    be40:	mov	x1, #0x0                   	// #0
    be44:	mov	x0, #0x0                   	// #0
    be48:	str	x7, [sp, #120]
    be4c:	mov	x24, x28
    be50:	str	w8, [sp, #128]
    be54:	str	w9, [sp, #136]
    be58:	bl	2560 <adler32@plt>
    be5c:	str	x0, [x21, #32]
    be60:	ands	x23, x23, #0x200
    be64:	str	x0, [x22, #96]
    be68:	ldr	w8, [sp, #128]
    be6c:	ldr	w9, [sp, #136]
    be70:	ldr	x7, [sp, #120]
    be74:	b.ne	a6a0 <inflate@@Base+0x698>  // b.any
    be78:	mov	w0, #0x3f3f                	// #16191
    be7c:	mov	w19, #0x0                   	// #0
    be80:	str	w0, [x21, #8]
    be84:	b	a7b8 <inflate@@Base+0x7b0>
    be88:	sub	w26, w9, w8
    be8c:	mov	w28, #0x0                   	// #0
    be90:	mov	w19, #0x0                   	// #0
    be94:	mov	x23, #0x0                   	// #0
    be98:	b	a7d0 <inflate@@Base+0x7c8>
    be9c:	mov	x4, x21
    bea0:	str	x7, [sp, #120]
    bea4:	ldp	w1, w2, [x21, #132]
    bea8:	str	w8, [sp, #128]
    beac:	ldr	x0, [x21, #144]
    beb0:	str	x0, [x21, #112]
    beb4:	mov	w0, #0x6                   	// #6
    beb8:	str	w0, [x4, #124]!
    bebc:	add	x1, x28, x1, lsl #1
    bec0:	mov	w0, #0x2                   	// #2
    bec4:	str	w9, [sp, #136]
    bec8:	bl	caa0 <inflateCodesUsed@@ZLIB_1.2.9+0x68>
    becc:	ldr	w8, [sp, #128]
    bed0:	mov	w28, w0
    bed4:	ldr	w9, [sp, #136]
    bed8:	ldr	x7, [sp, #120]
    bedc:	cbz	w0, a554 <inflate@@Base+0x54c>
    bee0:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
    bee4:	add	x0, x0, #0x698
    bee8:	str	x0, [x22, #48]
    beec:	mov	w11, #0x3f51                	// #16209
    bef0:	str	w11, [x21, #8]
    bef4:	b	a5d4 <inflate@@Base+0x5cc>

000000000000bef8 <inflateEnd@@Base>:
    bef8:	cbz	x0, bf98 <inflateEnd@@Base+0xa0>
    befc:	stp	x29, x30, [sp, #-32]!
    bf00:	mov	x29, sp
    bf04:	str	x19, [sp, #16]
    bf08:	mov	x19, x0
    bf0c:	ldr	x0, [x0, #64]
    bf10:	cbz	x0, bf40 <inflateEnd@@Base+0x48>
    bf14:	ldr	x2, [x19, #72]
    bf18:	cbz	x2, bf40 <inflateEnd@@Base+0x48>
    bf1c:	ldr	x1, [x19, #56]
    bf20:	cbz	x1, bf40 <inflateEnd@@Base+0x48>
    bf24:	ldr	x3, [x1]
    bf28:	mov	w0, #0xfffffffe            	// #-2
    bf2c:	cmp	x19, x3
    bf30:	b.eq	bf50 <inflateEnd@@Base+0x58>  // b.none
    bf34:	ldr	x19, [sp, #16]
    bf38:	ldp	x29, x30, [sp], #32
    bf3c:	ret
    bf40:	mov	w0, #0xfffffffe            	// #-2
    bf44:	ldr	x19, [sp, #16]
    bf48:	ldp	x29, x30, [sp], #32
    bf4c:	ret
    bf50:	ldr	w3, [x1, #8]
    bf54:	mov	w4, #0xffffc0cc            	// #-16180
    bf58:	add	w3, w3, w4
    bf5c:	cmp	w3, #0x1f
    bf60:	b.hi	bf34 <inflateEnd@@Base+0x3c>  // b.pmore
    bf64:	ldr	x3, [x1, #72]
    bf68:	ldr	x0, [x19, #80]
    bf6c:	cbz	x3, bf80 <inflateEnd@@Base+0x88>
    bf70:	mov	x1, x3
    bf74:	blr	x2
    bf78:	ldp	x2, x0, [x19, #72]
    bf7c:	ldr	x1, [x19, #56]
    bf80:	blr	x2
    bf84:	str	xzr, [x19, #56]
    bf88:	mov	w0, #0x0                   	// #0
    bf8c:	ldr	x19, [sp, #16]
    bf90:	ldp	x29, x30, [sp], #32
    bf94:	ret
    bf98:	mov	w0, #0xfffffffe            	// #-2
    bf9c:	ret

000000000000bfa0 <inflateGetDictionary@@ZLIB_1.2.7.1>:
    bfa0:	cbz	x0, bfec <inflateGetDictionary@@ZLIB_1.2.7.1+0x4c>
    bfa4:	mov	x3, x0
    bfa8:	ldr	x0, [x0, #64]
    bfac:	cbz	x0, bfec <inflateGetDictionary@@ZLIB_1.2.7.1+0x4c>
    bfb0:	ldr	x0, [x3, #72]
    bfb4:	cbz	x0, bfec <inflateGetDictionary@@ZLIB_1.2.7.1+0x4c>
    bfb8:	stp	x29, x30, [sp, #-32]!
    bfbc:	mov	x29, sp
    bfc0:	stp	x19, x20, [sp, #16]
    bfc4:	ldr	x20, [x3, #56]
    bfc8:	cbz	x20, c038 <inflateGetDictionary@@ZLIB_1.2.7.1+0x98>
    bfcc:	mov	x4, x1
    bfd0:	mov	w0, #0xfffffffe            	// #-2
    bfd4:	ldr	x1, [x20]
    bfd8:	cmp	x3, x1
    bfdc:	b.eq	bff4 <inflateGetDictionary@@ZLIB_1.2.7.1+0x54>  // b.none
    bfe0:	ldp	x19, x20, [sp, #16]
    bfe4:	ldp	x29, x30, [sp], #32
    bfe8:	ret
    bfec:	mov	w0, #0xfffffffe            	// #-2
    bff0:	ret
    bff4:	ldr	w1, [x20, #8]
    bff8:	mov	w3, #0xffffc0cc            	// #-16180
    bffc:	add	w1, w1, w3
    c000:	cmp	w1, #0x1f
    c004:	b.hi	bfe0 <inflateGetDictionary@@ZLIB_1.2.7.1+0x40>  // b.pmore
    c008:	mov	x19, x2
    c00c:	ldr	w2, [x20, #64]
    c010:	cmp	w2, #0x0
    c014:	ccmp	x4, #0x0, #0x4, ne  // ne = any
    c018:	b.ne	c040 <inflateGetDictionary@@ZLIB_1.2.7.1+0xa0>  // b.any
    c01c:	mov	w0, #0x0                   	// #0
    c020:	cbz	x19, bfe0 <inflateGetDictionary@@ZLIB_1.2.7.1+0x40>
    c024:	ldr	w1, [x20, #64]
    c028:	str	w1, [x19]
    c02c:	ldp	x19, x20, [sp, #16]
    c030:	ldp	x29, x30, [sp], #32
    c034:	ret
    c038:	mov	w0, #0xfffffffe            	// #-2
    c03c:	b	bfe0 <inflateGetDictionary@@ZLIB_1.2.7.1+0x40>
    c040:	ldr	x3, [x20, #72]
    c044:	mov	x0, x4
    c048:	ldr	w1, [x20, #68]
    c04c:	sub	w2, w2, w1
    c050:	add	x1, x3, w1, uxtw
    c054:	bl	23a0 <memcpy@plt>
    c058:	mov	x4, x0
    c05c:	ldp	w0, w2, [x20, #64]
    c060:	ldr	x1, [x20, #72]
    c064:	sub	x0, x0, x2
    c068:	add	x0, x4, x0
    c06c:	bl	23a0 <memcpy@plt>
    c070:	b	c01c <inflateGetDictionary@@ZLIB_1.2.7.1+0x7c>
    c074:	nop

000000000000c078 <inflateSetDictionary@@Base>:
    c078:	cbz	x0, c270 <inflateSetDictionary@@Base+0x1f8>
    c07c:	stp	x29, x30, [sp, #-64]!
    c080:	mov	x29, sp
    c084:	stp	x19, x20, [sp, #16]
    c088:	mov	x19, x0
    c08c:	ldr	x0, [x0, #64]
    c090:	cbz	x0, c0d4 <inflateSetDictionary@@Base+0x5c>
    c094:	ldr	x0, [x19, #72]
    c098:	cbz	x0, c0d4 <inflateSetDictionary@@Base+0x5c>
    c09c:	stp	x23, x24, [sp, #48]
    c0a0:	ldr	x23, [x19, #56]
    c0a4:	cbz	x23, c248 <inflateSetDictionary@@Base+0x1d0>
    c0a8:	stp	x21, x22, [sp, #32]
    c0ac:	mov	x22, x1
    c0b0:	mov	w0, #0xfffffffe            	// #-2
    c0b4:	ldr	x1, [x23]
    c0b8:	cmp	x19, x1
    c0bc:	b.eq	c0e4 <inflateSetDictionary@@Base+0x6c>  // b.none
    c0c0:	ldp	x21, x22, [sp, #32]
    c0c4:	ldp	x23, x24, [sp, #48]
    c0c8:	ldp	x19, x20, [sp, #16]
    c0cc:	ldp	x29, x30, [sp], #64
    c0d0:	ret
    c0d4:	mov	w0, #0xfffffffe            	// #-2
    c0d8:	ldp	x19, x20, [sp, #16]
    c0dc:	ldp	x29, x30, [sp], #64
    c0e0:	ret
    c0e4:	mov	w20, w2
    c0e8:	ldr	w2, [x23, #8]
    c0ec:	mov	w1, #0xffffc0cc            	// #-16180
    c0f0:	add	w1, w2, w1
    c0f4:	cmp	w1, #0x1f
    c0f8:	b.hi	c0c0 <inflateSetDictionary@@Base+0x48>  // b.pmore
    c0fc:	ldr	w1, [x23, #16]
    c100:	cbz	w1, c180 <inflateSetDictionary@@Base+0x108>
    c104:	mov	w1, #0x3f3e                	// #16190
    c108:	cmp	w2, w1
    c10c:	b.ne	c0c0 <inflateSetDictionary@@Base+0x48>  // b.any
    c110:	mov	w2, #0x0                   	// #0
    c114:	mov	x1, #0x0                   	// #0
    c118:	mov	x0, #0x0                   	// #0
    c11c:	bl	2560 <adler32@plt>
    c120:	mov	x1, x22
    c124:	mov	w2, w20
    c128:	bl	2560 <adler32@plt>
    c12c:	ldr	x1, [x23, #32]
    c130:	cmp	x1, x0
    c134:	b.ne	c278 <inflateSetDictionary@@Base+0x200>  // b.any
    c138:	ldr	x21, [x19, #56]
    c13c:	add	x24, x22, w20, uxtw
    c140:	ldr	x0, [x21, #72]
    c144:	cbnz	x0, c19c <inflateSetDictionary@@Base+0x124>
    c148:	ldr	x3, [x19, #64]
    c14c:	mov	w2, #0x1                   	// #1
    c150:	ldr	x0, [x19, #80]
    c154:	ldr	w1, [x21, #56]
    c158:	lsl	w1, w2, w1
    c15c:	blr	x3
    c160:	str	x0, [x21, #72]
    c164:	cbnz	x0, c19c <inflateSetDictionary@@Base+0x124>
    c168:	mov	w1, #0x3f52                	// #16210
    c16c:	mov	w0, #0xfffffffc            	// #-4
    c170:	ldp	x21, x22, [sp, #32]
    c174:	str	w1, [x23, #8]
    c178:	ldp	x23, x24, [sp, #48]
    c17c:	b	c0c8 <inflateSetDictionary@@Base+0x50>
    c180:	mov	w0, #0x3f3e                	// #16190
    c184:	mov	x21, x23
    c188:	cmp	w2, w0
    c18c:	b.eq	c110 <inflateSetDictionary@@Base+0x98>  // b.none
    c190:	ldr	x0, [x21, #72]
    c194:	add	x24, x22, w20, uxtw
    c198:	cbz	x0, c148 <inflateSetDictionary@@Base+0xd0>
    c19c:	ldr	w2, [x21, #60]
    c1a0:	cbnz	w2, c1b8 <inflateSetDictionary@@Base+0x140>
    c1a4:	ldr	w1, [x21, #56]
    c1a8:	mov	w2, #0x1                   	// #1
    c1ac:	str	xzr, [x21, #64]
    c1b0:	lsl	w2, w2, w1
    c1b4:	str	w2, [x21, #60]
    c1b8:	cmp	w20, w2
    c1bc:	b.cc	c1f4 <inflateSetDictionary@@Base+0x17c>  // b.lo, b.ul, b.last
    c1c0:	mov	w2, w2
    c1c4:	sub	x1, x24, x2
    c1c8:	bl	23a0 <memcpy@plt>
    c1cc:	ldr	w0, [x21, #60]
    c1d0:	stp	w0, wzr, [x21, #64]
    c1d4:	mov	w1, #0x1                   	// #1
    c1d8:	mov	w0, #0x0                   	// #0
    c1dc:	ldp	x21, x22, [sp, #32]
    c1e0:	str	w1, [x23, #20]
    c1e4:	ldp	x19, x20, [sp, #16]
    c1e8:	ldp	x23, x24, [sp, #48]
    c1ec:	ldp	x29, x30, [sp], #64
    c1f0:	ret
    c1f4:	ldr	w3, [x21, #68]
    c1f8:	mov	x1, x22
    c1fc:	sub	w2, w2, w3
    c200:	cmp	w20, w2
    c204:	add	x0, x0, w3, uxtw
    c208:	csel	w19, w20, w2, ls  // ls = plast
    c20c:	csel	w2, w20, w2, ls  // ls = plast
    c210:	bl	23a0 <memcpy@plt>
    c214:	subs	w20, w20, w19
    c218:	b.ne	c254 <inflateSetDictionary@@Base+0x1dc>  // b.any
    c21c:	ldp	w1, w2, [x21, #60]
    c220:	ldr	w0, [x21, #68]
    c224:	add	w0, w19, w0
    c228:	cmp	w0, w1
    c22c:	csel	w0, w0, wzr, ne  // ne = any
    c230:	str	w0, [x21, #68]
    c234:	cmp	w1, w2
    c238:	b.ls	c1d4 <inflateSetDictionary@@Base+0x15c>  // b.plast
    c23c:	add	w19, w19, w2
    c240:	str	w19, [x21, #64]
    c244:	b	c1d4 <inflateSetDictionary@@Base+0x15c>
    c248:	mov	w0, #0xfffffffe            	// #-2
    c24c:	ldp	x23, x24, [sp, #48]
    c250:	b	c0c8 <inflateSetDictionary@@Base+0x50>
    c254:	ldr	x0, [x21, #72]
    c258:	mov	w2, w20
    c25c:	sub	x1, x24, x2
    c260:	bl	23a0 <memcpy@plt>
    c264:	ldr	w0, [x21, #60]
    c268:	stp	w0, w20, [x21, #64]
    c26c:	b	c1d4 <inflateSetDictionary@@Base+0x15c>
    c270:	mov	w0, #0xfffffffe            	// #-2
    c274:	ret
    c278:	mov	w0, #0xfffffffd            	// #-3
    c27c:	ldp	x21, x22, [sp, #32]
    c280:	ldp	x23, x24, [sp, #48]
    c284:	b	c0c8 <inflateSetDictionary@@Base+0x50>

000000000000c288 <inflateGetHeader@@ZLIB_1.2.2>:
    c288:	mov	x2, x0
    c28c:	cbz	x0, c2d0 <inflateGetHeader@@ZLIB_1.2.2+0x48>
    c290:	ldr	x0, [x0, #64]
    c294:	cbz	x0, c2d0 <inflateGetHeader@@ZLIB_1.2.2+0x48>
    c298:	ldr	x0, [x2, #72]
    c29c:	cbz	x0, c2d0 <inflateGetHeader@@ZLIB_1.2.2+0x48>
    c2a0:	ldr	x3, [x2, #56]
    c2a4:	cbz	x3, c2d0 <inflateGetHeader@@ZLIB_1.2.2+0x48>
    c2a8:	ldr	x4, [x3]
    c2ac:	mov	w0, #0xfffffffe            	// #-2
    c2b0:	cmp	x2, x4
    c2b4:	b.ne	c2cc <inflateGetHeader@@ZLIB_1.2.2+0x44>  // b.any
    c2b8:	ldr	w2, [x3, #8]
    c2bc:	mov	w4, #0xffffc0cc            	// #-16180
    c2c0:	add	w2, w2, w4
    c2c4:	cmp	w2, #0x1f
    c2c8:	b.ls	c2d8 <inflateGetHeader@@ZLIB_1.2.2+0x50>  // b.plast
    c2cc:	ret
    c2d0:	mov	w0, #0xfffffffe            	// #-2
    c2d4:	ret
    c2d8:	ldr	w2, [x3, #16]
    c2dc:	tbz	w2, #1, c2cc <inflateGetHeader@@ZLIB_1.2.2+0x44>
    c2e0:	str	x1, [x3, #48]
    c2e4:	mov	w0, #0x0                   	// #0
    c2e8:	str	wzr, [x1, #72]
    c2ec:	ret

000000000000c2f0 <inflateSync@@Base>:
    c2f0:	cbz	x0, c5b4 <inflateSync@@Base+0x2c4>
    c2f4:	stp	x29, x30, [sp, #-64]!
    c2f8:	mov	x29, sp
    c2fc:	stp	x19, x20, [sp, #16]
    c300:	mov	x19, x0
    c304:	ldr	x0, [x0, #64]
    c308:	cbz	x0, c338 <inflateSync@@Base+0x48>
    c30c:	ldr	x0, [x19, #72]
    c310:	cbz	x0, c338 <inflateSync@@Base+0x48>
    c314:	ldr	x20, [x19, #56]
    c318:	cbz	x20, c338 <inflateSync@@Base+0x48>
    c31c:	ldr	x1, [x20]
    c320:	mov	w0, #0xfffffffe            	// #-2
    c324:	cmp	x19, x1
    c328:	b.eq	c348 <inflateSync@@Base+0x58>  // b.none
    c32c:	ldp	x19, x20, [sp, #16]
    c330:	ldp	x29, x30, [sp], #64
    c334:	ret
    c338:	mov	w0, #0xfffffffe            	// #-2
    c33c:	ldp	x19, x20, [sp, #16]
    c340:	ldp	x29, x30, [sp], #64
    c344:	ret
    c348:	ldr	w1, [x20, #8]
    c34c:	mov	w2, #0xffffc0cc            	// #-16180
    c350:	stp	x21, x22, [sp, #32]
    c354:	add	w2, w1, w2
    c358:	cmp	w2, #0x1f
    c35c:	b.ls	c370 <inflateSync@@Base+0x80>  // b.plast
    c360:	ldp	x19, x20, [sp, #16]
    c364:	ldp	x21, x22, [sp, #32]
    c368:	ldp	x29, x30, [sp], #64
    c36c:	ret
    c370:	ldr	w6, [x19, #8]
    c374:	cbnz	w6, c560 <inflateSync@@Base+0x270>
    c378:	ldr	w0, [x20, #88]
    c37c:	cmp	w0, #0x7
    c380:	b.ls	c5d8 <inflateSync@@Base+0x2e8>  // b.plast
    c384:	mov	w2, #0x3f53                	// #16211
    c388:	cmp	w1, w2
    c38c:	ldr	x5, [x19]
    c390:	b.eq	c5bc <inflateSync@@Base+0x2cc>  // b.none
    c394:	ldr	x1, [x20, #80]
    c398:	and	w3, w0, #0x7
    c39c:	and	w0, w0, #0xfffffff8
    c3a0:	str	w2, [x20, #8]
    c3a4:	str	w0, [x20, #88]
    c3a8:	lsl	x1, x1, x3
    c3ac:	str	x1, [x20, #80]
    c3b0:	strb	w1, [sp, #56]
    c3b4:	sub	w6, w0, #0x8
    c3b8:	cmp	w6, #0x7
    c3bc:	lsr	x4, x1, #8
    c3c0:	b.ls	c3f4 <inflateSync@@Base+0x104>  // b.plast
    c3c4:	strb	w4, [sp, #57]
    c3c8:	sub	w2, w0, #0x10
    c3cc:	cmp	w2, #0x7
    c3d0:	lsr	x4, x1, #16
    c3d4:	b.ls	c3f4 <inflateSync@@Base+0x104>  // b.plast
    c3d8:	strb	w4, [sp, #58]
    c3dc:	sub	w0, w0, #0x18
    c3e0:	cmp	w0, #0x7
    c3e4:	lsr	x4, x1, #24
    c3e8:	b.ls	c3f4 <inflateSync@@Base+0x104>  // b.plast
    c3ec:	strb	w4, [sp, #59]
    c3f0:	lsr	x4, x1, #32
    c3f4:	lsr	w6, w6, #3
    c3f8:	add	x3, sp, #0x38
    c3fc:	add	w6, w6, #0x1
    c400:	mov	w1, #0x0                   	// #0
    c404:	mov	w2, #0x0                   	// #0
    c408:	mov	w7, #0xff                  	// #255
    c40c:	mov	w8, #0x4                   	// #4
    c410:	str	x4, [x20, #80]
    c414:	str	wzr, [x20, #88]
    c418:	b	c444 <inflateSync@@Base+0x154>
    c41c:	sub	w1, w8, w1
    c420:	mov	w0, #0x1                   	// #1
    c424:	cmp	w1, #0x3
    c428:	cbnz	w4, c550 <inflateSync@@Base+0x260>
    c42c:	cset	w0, ls  // ls = plast
    c430:	add	w2, w2, #0x1
    c434:	cmp	w0, #0x0
    c438:	ccmp	w6, w2, #0x0, ne  // ne = any
    c43c:	add	x3, x3, #0x1
    c440:	b.ls	c478 <inflateSync@@Base+0x188>  // b.plast
    c444:	cmp	w1, #0x2
    c448:	ldrb	w4, [x3]
    c44c:	csel	w0, wzr, w7, cc  // cc = lo, ul, last
    c450:	cmp	w4, w0
    c454:	b.ne	c41c <inflateSync@@Base+0x12c>  // b.any
    c458:	add	w1, w1, #0x1
    c45c:	add	w2, w2, #0x1
    c460:	cmp	w1, #0x3
    c464:	add	x3, x3, #0x1
    c468:	cset	w0, ls  // ls = plast
    c46c:	cmp	w0, #0x0
    c470:	ccmp	w6, w2, #0x0, ne  // ne = any
    c474:	b.hi	c444 <inflateSync@@Base+0x154>  // b.pmore
    c478:	str	w1, [x20, #140]
    c47c:	ldr	w6, [x19, #8]
    c480:	cmp	w6, #0x0
    c484:	csel	w3, w0, wzr, ne  // ne = any
    c488:	cbz	w3, c5e4 <inflateSync@@Base+0x2f4>
    c48c:	mov	w2, #0x0                   	// #0
    c490:	mov	w7, #0xff                  	// #255
    c494:	mov	w8, #0x4                   	// #4
    c498:	b	c4c0 <inflateSync@@Base+0x1d0>
    c49c:	sub	w1, w8, w1
    c4a0:	mov	w4, w3
    c4a4:	cmp	w1, #0x3
    c4a8:	cbnz	w0, c558 <inflateSync@@Base+0x268>
    c4ac:	cset	w4, ls  // ls = plast
    c4b0:	add	w2, w2, #0x1
    c4b4:	cmp	w4, #0x0
    c4b8:	ccmp	w6, w2, #0x0, ne  // ne = any
    c4bc:	b.ls	c4f0 <inflateSync@@Base+0x200>  // b.plast
    c4c0:	cmp	w1, #0x2
    c4c4:	ldrb	w0, [x5, w2, uxtw]
    c4c8:	csel	w4, wzr, w7, cc  // cc = lo, ul, last
    c4cc:	cmp	w4, w0
    c4d0:	b.ne	c49c <inflateSync@@Base+0x1ac>  // b.any
    c4d4:	add	w1, w1, #0x1
    c4d8:	add	w2, w2, #0x1
    c4dc:	cmp	w1, #0x3
    c4e0:	cset	w4, ls  // ls = plast
    c4e4:	cmp	w4, #0x0
    c4e8:	ccmp	w6, w2, #0x0, ne  // ne = any
    c4ec:	b.hi	c4c0 <inflateSync@@Base+0x1d0>  // b.pmore
    c4f0:	mov	w21, w2
    c4f4:	add	x5, x5, x21
    c4f8:	str	w1, [x20, #140]
    c4fc:	cmp	w1, #0x4
    c500:	ldr	x1, [x19, #16]
    c504:	str	x5, [x19]
    c508:	ldr	w0, [x19, #8]
    c50c:	add	x21, x21, x1
    c510:	str	x21, [x19, #16]
    c514:	sub	w2, w0, w2
    c518:	str	w2, [x19, #8]
    c51c:	b.ne	c5cc <inflateSync@@Base+0x2dc>  // b.any
    c520:	ldr	x22, [x19, #40]
    c524:	mov	x0, x19
    c528:	bl	2610 <inflateReset@plt>
    c52c:	str	x21, [x19, #16]
    c530:	str	x22, [x19, #40]
    c534:	mov	w1, #0x3f3f                	// #16191
    c538:	ldp	x21, x22, [sp, #32]
    c53c:	str	w1, [x20, #8]
    c540:	mov	w0, #0x0                   	// #0
    c544:	ldp	x19, x20, [sp, #16]
    c548:	ldp	x29, x30, [sp], #64
    c54c:	ret
    c550:	mov	w1, #0x0                   	// #0
    c554:	b	c430 <inflateSync@@Base+0x140>
    c558:	mov	w1, #0x0                   	// #0
    c55c:	b	c4b0 <inflateSync@@Base+0x1c0>
    c560:	mov	w0, #0x3f53                	// #16211
    c564:	cmp	w1, w0
    c568:	ldr	x5, [x19]
    c56c:	b.eq	c5a4 <inflateSync@@Base+0x2b4>  // b.none
    c570:	str	w0, [x20, #8]
    c574:	ldr	w0, [x20, #88]
    c578:	ldr	x1, [x20, #80]
    c57c:	and	w2, w0, #0x7
    c580:	and	w0, w0, #0xfffffff8
    c584:	str	w0, [x20, #88]
    c588:	cmp	w0, #0x7
    c58c:	lsl	x1, x1, x2
    c590:	str	x1, [x20, #80]
    c594:	b.hi	c3b0 <inflateSync@@Base+0xc0>  // b.pmore
    c598:	mov	w0, #0x1                   	// #1
    c59c:	mov	w1, #0x0                   	// #0
    c5a0:	b	c478 <inflateSync@@Base+0x188>
    c5a4:	ldr	w1, [x20, #140]
    c5a8:	cmp	w1, #0x3
    c5ac:	cset	w0, ls  // ls = plast
    c5b0:	b	c480 <inflateSync@@Base+0x190>
    c5b4:	mov	w0, #0xfffffffe            	// #-2
    c5b8:	ret
    c5bc:	ldr	w1, [x20, #140]
    c5c0:	mov	w2, #0x0                   	// #0
    c5c4:	mov	x21, #0x0                   	// #0
    c5c8:	b	c4f8 <inflateSync@@Base+0x208>
    c5cc:	mov	w0, #0xfffffffd            	// #-3
    c5d0:	ldp	x21, x22, [sp, #32]
    c5d4:	b	c32c <inflateSync@@Base+0x3c>
    c5d8:	mov	w0, #0xfffffffb            	// #-5
    c5dc:	ldp	x21, x22, [sp, #32]
    c5e0:	b	c32c <inflateSync@@Base+0x3c>
    c5e4:	mov	x21, #0x0                   	// #0
    c5e8:	mov	w2, #0x0                   	// #0
    c5ec:	b	c4f8 <inflateSync@@Base+0x208>

000000000000c5f0 <inflateSyncPoint@@Base>:
    c5f0:	mov	x1, x0
    c5f4:	cbz	x0, c638 <inflateSyncPoint@@Base+0x48>
    c5f8:	ldr	x0, [x0, #64]
    c5fc:	cbz	x0, c638 <inflateSyncPoint@@Base+0x48>
    c600:	ldr	x0, [x1, #72]
    c604:	cbz	x0, c638 <inflateSyncPoint@@Base+0x48>
    c608:	ldr	x2, [x1, #56]
    c60c:	cbz	x2, c638 <inflateSyncPoint@@Base+0x48>
    c610:	ldr	x3, [x2]
    c614:	mov	w0, #0xfffffffe            	// #-2
    c618:	cmp	x1, x3
    c61c:	b.ne	c634 <inflateSyncPoint@@Base+0x44>  // b.any
    c620:	ldr	w3, [x2, #8]
    c624:	mov	w1, #0xffffc0cc            	// #-16180
    c628:	add	w1, w3, w1
    c62c:	cmp	w1, #0x1f
    c630:	b.ls	c640 <inflateSyncPoint@@Base+0x50>  // b.plast
    c634:	ret
    c638:	mov	w0, #0xfffffffe            	// #-2
    c63c:	ret
    c640:	mov	w1, #0x3f41                	// #16193
    c644:	mov	w0, #0x0                   	// #0
    c648:	cmp	w3, w1
    c64c:	b.ne	c634 <inflateSyncPoint@@Base+0x44>  // b.any
    c650:	ldr	w0, [x2, #88]
    c654:	cmp	w0, #0x0
    c658:	cset	w0, eq  // eq = none
    c65c:	ret

000000000000c660 <inflateCopy@@ZLIB_1.2.0>:
    c660:	cbz	x1, c888 <inflateCopy@@ZLIB_1.2.0+0x228>
    c664:	stp	x29, x30, [sp, #-64]!
    c668:	mov	x29, sp
    c66c:	ldr	x3, [x1, #64]
    c670:	stp	x19, x20, [sp, #16]
    c674:	mov	x19, x1
    c678:	cbz	x3, c6b4 <inflateCopy@@ZLIB_1.2.0+0x54>
    c67c:	mov	x20, x0
    c680:	ldr	x0, [x1, #72]
    c684:	cbz	x0, c6b4 <inflateCopy@@ZLIB_1.2.0+0x54>
    c688:	stp	x21, x22, [sp, #32]
    c68c:	ldr	x21, [x1, #56]
    c690:	cbz	x21, c87c <inflateCopy@@ZLIB_1.2.0+0x21c>
    c694:	ldr	x1, [x21]
    c698:	mov	w0, #0xfffffffe            	// #-2
    c69c:	cmp	x19, x1
    c6a0:	b.eq	c6c4 <inflateCopy@@ZLIB_1.2.0+0x64>  // b.none
    c6a4:	ldp	x21, x22, [sp, #32]
    c6a8:	ldp	x19, x20, [sp, #16]
    c6ac:	ldp	x29, x30, [sp], #64
    c6b0:	ret
    c6b4:	mov	w0, #0xfffffffe            	// #-2
    c6b8:	ldp	x19, x20, [sp, #16]
    c6bc:	ldp	x29, x30, [sp], #64
    c6c0:	ret
    c6c4:	ldr	w1, [x21, #8]
    c6c8:	cmp	x20, #0x0
    c6cc:	str	x23, [sp, #48]
    c6d0:	mov	w4, #0xffffc0cc            	// #-16180
    c6d4:	add	w1, w1, w4
    c6d8:	ccmp	w1, #0x1f, #0x2, ne  // ne = any
    c6dc:	b.ls	c6f4 <inflateCopy@@ZLIB_1.2.0+0x94>  // b.plast
    c6e0:	ldp	x19, x20, [sp, #16]
    c6e4:	ldp	x21, x22, [sp, #32]
    c6e8:	ldr	x23, [sp, #48]
    c6ec:	ldp	x29, x30, [sp], #64
    c6f0:	ret
    c6f4:	ldr	x0, [x19, #80]
    c6f8:	mov	w2, #0x1bf8                	// #7160
    c6fc:	mov	w1, #0x1                   	// #1
    c700:	blr	x3
    c704:	mov	x22, x0
    c708:	cbz	x0, c8a4 <inflateCopy@@ZLIB_1.2.0+0x244>
    c70c:	ldr	x23, [x21, #72]
    c710:	cbz	x23, c7dc <inflateCopy@@ZLIB_1.2.0+0x17c>
    c714:	ldr	x3, [x19, #64]
    c718:	mov	w2, #0x1                   	// #1
    c71c:	ldr	x0, [x19, #80]
    c720:	ldr	w1, [x21, #56]
    c724:	lsl	w1, w2, w1
    c728:	blr	x3
    c72c:	mov	x23, x0
    c730:	cbz	x0, c8b4 <inflateCopy@@ZLIB_1.2.0+0x254>
    c734:	ldp	x0, x1, [x19]
    c738:	stp	x0, x1, [x20]
    c73c:	mov	x2, #0x1bf8                	// #7160
    c740:	ldp	x0, x1, [x19, #16]
    c744:	stp	x0, x1, [x20, #16]
    c748:	ldp	x4, x5, [x19, #32]
    c74c:	stp	x4, x5, [x20, #32]
    c750:	mov	x1, x21
    c754:	ldp	x4, x5, [x19, #48]
    c758:	stp	x4, x5, [x20, #48]
    c75c:	mov	x0, x22
    c760:	ldp	x4, x5, [x19, #64]
    c764:	stp	x4, x5, [x20, #64]
    c768:	ldp	x4, x5, [x19, #80]
    c76c:	stp	x4, x5, [x20, #80]
    c770:	ldp	x4, x5, [x19, #96]
    c774:	stp	x4, x5, [x20, #96]
    c778:	bl	23a0 <memcpy@plt>
    c77c:	ldr	x2, [x21, #104]
    c780:	str	x20, [x22]
    c784:	add	x0, x21, #0x558
    c788:	add	x1, x22, #0x558
    c78c:	cmp	x0, x2
    c790:	b.ls	c838 <inflateCopy@@ZLIB_1.2.0+0x1d8>  // b.plast
    c794:	ldr	x2, [x21, #144]
    c798:	sub	x0, x2, x0
    c79c:	add	x1, x1, x0
    c7a0:	str	x1, [x22, #144]
    c7a4:	ldr	x1, [x21, #72]
    c7a8:	mov	w3, #0x1                   	// #1
    c7ac:	ldr	w2, [x21, #56]
    c7b0:	mov	x0, x23
    c7b4:	lsl	w2, w3, w2
    c7b8:	bl	23a0 <memcpy@plt>
    c7bc:	str	x23, [x22, #72]
    c7c0:	mov	w0, #0x0                   	// #0
    c7c4:	ldr	x23, [sp, #48]
    c7c8:	str	x22, [x20, #56]
    c7cc:	ldp	x19, x20, [sp, #16]
    c7d0:	ldp	x21, x22, [sp, #32]
    c7d4:	ldp	x29, x30, [sp], #64
    c7d8:	ret
    c7dc:	ldp	x2, x3, [x19]
    c7e0:	stp	x2, x3, [x20]
    c7e4:	mov	x1, x21
    c7e8:	ldp	x4, x5, [x19, #16]
    c7ec:	stp	x4, x5, [x20, #16]
    c7f0:	mov	x2, #0x1bf8                	// #7160
    c7f4:	ldp	x4, x5, [x19, #32]
    c7f8:	stp	x4, x5, [x20, #32]
    c7fc:	ldp	x4, x5, [x19, #48]
    c800:	stp	x4, x5, [x20, #48]
    c804:	ldp	x4, x5, [x19, #64]
    c808:	stp	x4, x5, [x20, #64]
    c80c:	ldp	x4, x5, [x19, #80]
    c810:	stp	x4, x5, [x20, #80]
    c814:	ldp	x4, x5, [x19, #96]
    c818:	stp	x4, x5, [x20, #96]
    c81c:	bl	23a0 <memcpy@plt>
    c820:	ldr	x2, [x21, #104]
    c824:	str	x20, [x22]
    c828:	add	x0, x21, #0x558
    c82c:	add	x1, x22, #0x558
    c830:	cmp	x2, x0
    c834:	b.cc	c890 <inflateCopy@@ZLIB_1.2.0+0x230>  // b.lo, b.ul, b.last
    c838:	mov	x3, #0x1be4                	// #7140
    c83c:	add	x3, x21, x3
    c840:	cmp	x2, x3
    c844:	b.hi	c864 <inflateCopy@@ZLIB_1.2.0+0x204>  // b.pmore
    c848:	ldr	x3, [x21, #112]
    c84c:	sub	x2, x2, x0
    c850:	add	x2, x1, x2
    c854:	str	x2, [x22, #104]
    c858:	sub	x2, x3, x0
    c85c:	add	x2, x1, x2
    c860:	str	x2, [x22, #112]
    c864:	ldr	x2, [x21, #144]
    c868:	sub	x0, x2, x0
    c86c:	add	x1, x1, x0
    c870:	str	x1, [x22, #144]
    c874:	cbz	x23, c7bc <inflateCopy@@ZLIB_1.2.0+0x15c>
    c878:	b	c7a4 <inflateCopy@@ZLIB_1.2.0+0x144>
    c87c:	mov	w0, #0xfffffffe            	// #-2
    c880:	ldp	x21, x22, [sp, #32]
    c884:	b	c6a8 <inflateCopy@@ZLIB_1.2.0+0x48>
    c888:	mov	w0, #0xfffffffe            	// #-2
    c88c:	ret
    c890:	ldr	x2, [x21, #144]
    c894:	sub	x0, x2, x0
    c898:	add	x1, x1, x0
    c89c:	str	x1, [x22, #144]
    c8a0:	b	c7bc <inflateCopy@@ZLIB_1.2.0+0x15c>
    c8a4:	mov	w0, #0xfffffffc            	// #-4
    c8a8:	ldp	x21, x22, [sp, #32]
    c8ac:	ldr	x23, [sp, #48]
    c8b0:	b	c6a8 <inflateCopy@@ZLIB_1.2.0+0x48>
    c8b4:	ldp	x2, x0, [x19, #72]
    c8b8:	mov	x1, x22
    c8bc:	blr	x2
    c8c0:	mov	w0, #0xfffffffc            	// #-4
    c8c4:	ldp	x21, x22, [sp, #32]
    c8c8:	ldr	x23, [sp, #48]
    c8cc:	b	c6a8 <inflateCopy@@ZLIB_1.2.0+0x48>

000000000000c8d0 <inflateUndermine@@ZLIB_1.2.3.3>:
    c8d0:	mov	x1, x0
    c8d4:	cbz	x0, c918 <inflateUndermine@@ZLIB_1.2.3.3+0x48>
    c8d8:	ldr	x0, [x0, #64]
    c8dc:	cbz	x0, c918 <inflateUndermine@@ZLIB_1.2.3.3+0x48>
    c8e0:	ldr	x0, [x1, #72]
    c8e4:	cbz	x0, c918 <inflateUndermine@@ZLIB_1.2.3.3+0x48>
    c8e8:	ldr	x2, [x1, #56]
    c8ec:	cbz	x2, c918 <inflateUndermine@@ZLIB_1.2.3.3+0x48>
    c8f0:	ldr	x3, [x2]
    c8f4:	mov	w0, #0xfffffffe            	// #-2
    c8f8:	cmp	x1, x3
    c8fc:	b.ne	c914 <inflateUndermine@@ZLIB_1.2.3.3+0x44>  // b.any
    c900:	ldr	w1, [x2, #8]
    c904:	mov	w3, #0xffffc0cc            	// #-16180
    c908:	add	w1, w1, w3
    c90c:	cmp	w1, #0x1f
    c910:	b.ls	c920 <inflateUndermine@@ZLIB_1.2.3.3+0x50>  // b.plast
    c914:	ret
    c918:	mov	w0, #0xfffffffe            	// #-2
    c91c:	ret
    c920:	mov	w1, #0x1                   	// #1
    c924:	mov	w0, #0xfffffffd            	// #-3
    c928:	str	w1, [x2, #7144]
    c92c:	ret

000000000000c930 <inflateValidate@@ZLIB_1.2.9>:
    c930:	mov	x2, x0
    c934:	cbz	x0, c978 <inflateValidate@@ZLIB_1.2.9+0x48>
    c938:	ldr	x0, [x0, #64]
    c93c:	cbz	x0, c978 <inflateValidate@@ZLIB_1.2.9+0x48>
    c940:	ldr	x0, [x2, #72]
    c944:	cbz	x0, c978 <inflateValidate@@ZLIB_1.2.9+0x48>
    c948:	ldr	x3, [x2, #56]
    c94c:	cbz	x3, c978 <inflateValidate@@ZLIB_1.2.9+0x48>
    c950:	ldr	x4, [x3]
    c954:	mov	w0, #0xfffffffe            	// #-2
    c958:	cmp	x2, x4
    c95c:	b.ne	c974 <inflateValidate@@ZLIB_1.2.9+0x44>  // b.any
    c960:	ldr	w2, [x3, #8]
    c964:	mov	w4, #0xffffc0cc            	// #-16180
    c968:	add	w2, w2, w4
    c96c:	cmp	w2, #0x1f
    c970:	b.ls	c980 <inflateValidate@@ZLIB_1.2.9+0x50>  // b.plast
    c974:	ret
    c978:	mov	w0, #0xfffffffe            	// #-2
    c97c:	ret
    c980:	ldr	w0, [x3, #16]
    c984:	cbz	w1, c998 <inflateValidate@@ZLIB_1.2.9+0x68>
    c988:	orr	w1, w0, #0x4
    c98c:	mov	w0, #0x0                   	// #0
    c990:	str	w1, [x3, #16]
    c994:	ret
    c998:	and	w1, w0, #0xfffffffb
    c99c:	mov	w0, #0x0                   	// #0
    c9a0:	str	w1, [x3, #16]
    c9a4:	ret

000000000000c9a8 <inflateMark@@ZLIB_1.2.3.4>:
    c9a8:	mov	x1, x0
    c9ac:	cbz	x0, c9f0 <inflateMark@@ZLIB_1.2.3.4+0x48>
    c9b0:	ldr	x0, [x0, #64]
    c9b4:	cbz	x0, c9f0 <inflateMark@@ZLIB_1.2.3.4+0x48>
    c9b8:	ldr	x0, [x1, #72]
    c9bc:	cbz	x0, c9f0 <inflateMark@@ZLIB_1.2.3.4+0x48>
    c9c0:	ldr	x2, [x1, #56]
    c9c4:	cbz	x2, c9f0 <inflateMark@@ZLIB_1.2.3.4+0x48>
    c9c8:	ldr	x3, [x2]
    c9cc:	mov	x0, #0xffffffffffff0000    	// #-65536
    c9d0:	cmp	x1, x3
    c9d4:	b.ne	c9ec <inflateMark@@ZLIB_1.2.3.4+0x44>  // b.any
    c9d8:	ldr	w1, [x2, #8]
    c9dc:	mov	w3, #0xffffc0cc            	// #-16180
    c9e0:	add	w3, w1, w3
    c9e4:	cmp	w3, #0x1f
    c9e8:	b.ls	c9f8 <inflateMark@@ZLIB_1.2.3.4+0x50>  // b.plast
    c9ec:	ret
    c9f0:	mov	x0, #0xffffffffffff0000    	// #-65536
    c9f4:	ret
    c9f8:	ldrsw	x0, [x2, #7148]
    c9fc:	mov	w3, #0x3f43                	// #16195
    ca00:	cmp	w1, w3
    ca04:	lsl	x0, x0, #16
    ca08:	b.eq	ca2c <inflateMark@@ZLIB_1.2.3.4+0x84>  // b.none
    ca0c:	mov	w3, #0x3f4c                	// #16204
    ca10:	cmp	w1, w3
    ca14:	b.ne	c9ec <inflateMark@@ZLIB_1.2.3.4+0x44>  // b.any
    ca18:	ldr	w3, [x2, #92]
    ca1c:	ldr	w1, [x2, #7152]
    ca20:	sub	w1, w1, w3
    ca24:	add	x0, x0, x1
    ca28:	ret
    ca2c:	ldr	w1, [x2, #92]
    ca30:	add	x0, x0, x1
    ca34:	ret

000000000000ca38 <inflateCodesUsed@@ZLIB_1.2.9>:
    ca38:	mov	x1, x0
    ca3c:	cbz	x0, ca80 <inflateCodesUsed@@ZLIB_1.2.9+0x48>
    ca40:	ldr	x0, [x0, #64]
    ca44:	cbz	x0, ca80 <inflateCodesUsed@@ZLIB_1.2.9+0x48>
    ca48:	ldr	x0, [x1, #72]
    ca4c:	cbz	x0, ca80 <inflateCodesUsed@@ZLIB_1.2.9+0x48>
    ca50:	ldr	x2, [x1, #56]
    ca54:	cbz	x2, ca80 <inflateCodesUsed@@ZLIB_1.2.9+0x48>
    ca58:	ldr	x3, [x2]
    ca5c:	mov	x0, #0xffffffffffffffff    	// #-1
    ca60:	cmp	x1, x3
    ca64:	b.ne	ca7c <inflateCodesUsed@@ZLIB_1.2.9+0x44>  // b.any
    ca68:	ldr	w1, [x2, #8]
    ca6c:	mov	w3, #0xffffc0cc            	// #-16180
    ca70:	add	w1, w1, w3
    ca74:	cmp	w1, #0x1f
    ca78:	b.ls	ca88 <inflateCodesUsed@@ZLIB_1.2.9+0x50>  // b.plast
    ca7c:	ret
    ca80:	mov	x0, #0xffffffffffffffff    	// #-1
    ca84:	ret
    ca88:	ldr	x0, [x2, #144]
    ca8c:	add	x2, x2, #0x558
    ca90:	sub	x0, x0, x2
    ca94:	asr	x0, x0, #2
    ca98:	ret
    ca9c:	nop
    caa0:	stp	x29, x30, [sp, #-176]!
    caa4:	mov	w8, w0
    caa8:	mov	x29, sp
    caac:	stp	x19, x20, [sp, #16]
    cab0:	stp	xzr, xzr, [sp, #112]
    cab4:	stp	xzr, xzr, [sp, #128]
    cab8:	cbz	w2, caec <inflateCodesUsed@@ZLIB_1.2.9+0xb4>
    cabc:	sub	w6, w2, #0x1
    cac0:	add	x9, x1, #0x2
    cac4:	mov	x0, x1
    cac8:	add	x14, sp, #0x70
    cacc:	add	x9, x9, w6, uxtw #1
    cad0:	ldrh	w6, [x0], #2
    cad4:	cmp	x0, x9
    cad8:	lsl	x6, x6, #1
    cadc:	ldrh	w7, [x14, x6]
    cae0:	add	w7, w7, #0x1
    cae4:	strh	w7, [x14, x6]
    cae8:	b.ne	cad0 <inflateCodesUsed@@ZLIB_1.2.9+0x98>  // b.any
    caec:	ldrh	w10, [sp, #142]
    caf0:	cbnz	w10, cb94 <inflateCodesUsed@@ZLIB_1.2.9+0x15c>
    caf4:	ldrh	w0, [sp, #140]
    caf8:	cbnz	w0, d304 <inflateCodesUsed@@ZLIB_1.2.9+0x8cc>
    cafc:	ldrh	w0, [sp, #138]
    cb00:	cbnz	w0, d33c <inflateCodesUsed@@ZLIB_1.2.9+0x904>
    cb04:	ldrh	w0, [sp, #136]
    cb08:	cbnz	w0, d34c <inflateCodesUsed@@ZLIB_1.2.9+0x914>
    cb0c:	ldrh	w0, [sp, #134]
    cb10:	cbnz	w0, d35c <inflateCodesUsed@@ZLIB_1.2.9+0x924>
    cb14:	ldrh	w0, [sp, #132]
    cb18:	cbnz	w0, d36c <inflateCodesUsed@@ZLIB_1.2.9+0x934>
    cb1c:	ldrh	w0, [sp, #130]
    cb20:	cbnz	w0, d37c <inflateCodesUsed@@ZLIB_1.2.9+0x944>
    cb24:	ldrh	w0, [sp, #128]
    cb28:	cbnz	w0, d404 <inflateCodesUsed@@ZLIB_1.2.9+0x9cc>
    cb2c:	ldrh	w0, [sp, #126]
    cb30:	cbnz	w0, d4c4 <inflateCodesUsed@@ZLIB_1.2.9+0xa8c>
    cb34:	ldrh	w0, [sp, #124]
    cb38:	cbnz	w0, d4b4 <inflateCodesUsed@@ZLIB_1.2.9+0xa7c>
    cb3c:	ldrh	w0, [sp, #122]
    cb40:	cbnz	w0, d4e4 <inflateCodesUsed@@ZLIB_1.2.9+0xaac>
    cb44:	ldrh	w0, [sp, #120]
    cb48:	cbnz	w0, d3a8 <inflateCodesUsed@@ZLIB_1.2.9+0x970>
    cb4c:	ldrh	w0, [sp, #118]
    cb50:	cbnz	w0, d30c <inflateCodesUsed@@ZLIB_1.2.9+0x8d4>
    cb54:	ldrh	w7, [sp, #116]
    cb58:	ldrh	w9, [sp, #114]
    cb5c:	cbnz	w7, d3d0 <inflateCodesUsed@@ZLIB_1.2.9+0x998>
    cb60:	cbnz	w9, d3f4 <inflateCodesUsed@@ZLIB_1.2.9+0x9bc>
    cb64:	ldr	x2, [x3]
    cb68:	mov	w5, #0x140                 	// #320
    cb6c:	mov	w6, #0x1                   	// #1
    cb70:	mov	w0, #0x0                   	// #0
    cb74:	mov	x1, x2
    cb78:	str	w5, [x1], #8
    cb7c:	str	x1, [x3]
    cb80:	str	w5, [x2, #4]
    cb84:	str	w6, [x4]
    cb88:	ldp	x19, x20, [sp, #16]
    cb8c:	ldp	x29, x30, [sp], #176
    cb90:	ret
    cb94:	mov	w15, #0xf                   	// #15
    cb98:	ldrh	w9, [sp, #114]
    cb9c:	cbnz	w9, d470 <inflateCodesUsed@@ZLIB_1.2.9+0xa38>
    cba0:	ldrh	w7, [sp, #116]
    cba4:	cbnz	w7, d48c <inflateCodesUsed@@ZLIB_1.2.9+0xa54>
    cba8:	ldrh	w0, [sp, #118]
    cbac:	cbnz	w0, d3fc <inflateCodesUsed@@ZLIB_1.2.9+0x9c4>
    cbb0:	cmp	w15, #0x4
    cbb4:	b.eq	cc60 <inflateCodesUsed@@ZLIB_1.2.9+0x228>  // b.none
    cbb8:	ldrh	w0, [sp, #120]
    cbbc:	cbnz	w0, d424 <inflateCodesUsed@@ZLIB_1.2.9+0x9ec>
    cbc0:	cmp	w15, #0x5
    cbc4:	b.eq	cc60 <inflateCodesUsed@@ZLIB_1.2.9+0x228>  // b.none
    cbc8:	ldrh	w0, [sp, #122]
    cbcc:	cbnz	w0, d41c <inflateCodesUsed@@ZLIB_1.2.9+0x9e4>
    cbd0:	cmp	w15, #0x6
    cbd4:	b.eq	cc60 <inflateCodesUsed@@ZLIB_1.2.9+0x228>  // b.none
    cbd8:	ldrh	w0, [sp, #124]
    cbdc:	cbnz	w0, d414 <inflateCodesUsed@@ZLIB_1.2.9+0x9dc>
    cbe0:	cmp	w15, #0x7
    cbe4:	b.eq	cc60 <inflateCodesUsed@@ZLIB_1.2.9+0x228>  // b.none
    cbe8:	ldrh	w0, [sp, #126]
    cbec:	cbnz	w0, d42c <inflateCodesUsed@@ZLIB_1.2.9+0x9f4>
    cbf0:	cmp	w15, #0x8
    cbf4:	b.eq	cc60 <inflateCodesUsed@@ZLIB_1.2.9+0x228>  // b.none
    cbf8:	ldrh	w0, [sp, #128]
    cbfc:	cbnz	w0, d43c <inflateCodesUsed@@ZLIB_1.2.9+0xa04>
    cc00:	cmp	w15, #0x9
    cc04:	b.eq	cc60 <inflateCodesUsed@@ZLIB_1.2.9+0x228>  // b.none
    cc08:	ldrh	w0, [sp, #130]
    cc0c:	cbnz	w0, d434 <inflateCodesUsed@@ZLIB_1.2.9+0x9fc>
    cc10:	cmp	w15, #0xa
    cc14:	b.eq	cc60 <inflateCodesUsed@@ZLIB_1.2.9+0x228>  // b.none
    cc18:	ldrh	w0, [sp, #132]
    cc1c:	cbnz	w0, d44c <inflateCodesUsed@@ZLIB_1.2.9+0xa14>
    cc20:	cmp	w15, #0xb
    cc24:	b.eq	cc60 <inflateCodesUsed@@ZLIB_1.2.9+0x228>  // b.none
    cc28:	ldrh	w0, [sp, #134]
    cc2c:	cbnz	w0, d444 <inflateCodesUsed@@ZLIB_1.2.9+0xa0c>
    cc30:	cmp	w15, #0xc
    cc34:	b.eq	cc60 <inflateCodesUsed@@ZLIB_1.2.9+0x228>  // b.none
    cc38:	ldrh	w0, [sp, #136]
    cc3c:	cbnz	w0, d468 <inflateCodesUsed@@ZLIB_1.2.9+0xa30>
    cc40:	cmp	w15, #0xd
    cc44:	b.eq	cc60 <inflateCodesUsed@@ZLIB_1.2.9+0x228>  // b.none
    cc48:	ldrh	w0, [sp, #138]
    cc4c:	cbnz	w0, d460 <inflateCodesUsed@@ZLIB_1.2.9+0xa28>
    cc50:	cmp	w15, #0xf
    cc54:	b.ne	d454 <inflateCodesUsed@@ZLIB_1.2.9+0xa1c>  // b.any
    cc58:	ldrh	w0, [sp, #140]
    cc5c:	cbnz	w0, d328 <inflateCodesUsed@@ZLIB_1.2.9+0x8f0>
    cc60:	mov	w19, w15
    cc64:	mov	w6, #0x2                   	// #2
    cc68:	lsl	w6, w6, #1
    cc6c:	subs	w6, w6, w7
    cc70:	b.mi	ce94 <inflateCodesUsed@@ZLIB_1.2.9+0x45c>  // b.first
    cc74:	ldrh	w11, [sp, #118]
    cc78:	lsl	w6, w6, #1
    cc7c:	subs	w6, w6, w11
    cc80:	b.mi	ce94 <inflateCodesUsed@@ZLIB_1.2.9+0x45c>  // b.first
    cc84:	ldrh	w12, [sp, #120]
    cc88:	lsl	w6, w6, #1
    cc8c:	subs	w6, w6, w12
    cc90:	b.mi	ce94 <inflateCodesUsed@@ZLIB_1.2.9+0x45c>  // b.first
    cc94:	ldrh	w13, [sp, #122]
    cc98:	lsl	w6, w6, #1
    cc9c:	subs	w6, w6, w13
    cca0:	b.mi	ce94 <inflateCodesUsed@@ZLIB_1.2.9+0x45c>  // b.first
    cca4:	ldrh	w14, [sp, #124]
    cca8:	lsl	w6, w6, #1
    ccac:	subs	w6, w6, w14
    ccb0:	b.mi	ce94 <inflateCodesUsed@@ZLIB_1.2.9+0x45c>  // b.first
    ccb4:	ldrh	w16, [sp, #126]
    ccb8:	lsl	w6, w6, #1
    ccbc:	subs	w6, w6, w16
    ccc0:	b.mi	ce94 <inflateCodesUsed@@ZLIB_1.2.9+0x45c>  // b.first
    ccc4:	ldrh	w17, [sp, #128]
    ccc8:	lsl	w6, w6, #1
    cccc:	subs	w6, w6, w17
    ccd0:	b.mi	ce94 <inflateCodesUsed@@ZLIB_1.2.9+0x45c>  // b.first
    ccd4:	ldrh	w18, [sp, #130]
    ccd8:	lsl	w6, w6, #1
    ccdc:	subs	w6, w6, w18
    cce0:	b.mi	ce94 <inflateCodesUsed@@ZLIB_1.2.9+0x45c>  // b.first
    cce4:	ldrh	w20, [sp, #132]
    cce8:	lsl	w6, w6, #1
    ccec:	subs	w0, w6, w20
    ccf0:	b.mi	ce94 <inflateCodesUsed@@ZLIB_1.2.9+0x45c>  // b.first
    ccf4:	ldrh	w6, [sp, #134]
    ccf8:	lsl	w0, w0, #1
    ccfc:	subs	w0, w0, w6
    cd00:	b.mi	ce94 <inflateCodesUsed@@ZLIB_1.2.9+0x45c>  // b.first
    cd04:	stp	x21, x22, [sp, #32]
    cd08:	lsl	w0, w0, #1
    cd0c:	ldrh	w21, [sp, #136]
    cd10:	subs	w0, w0, w21
    cd14:	b.mi	d38c <inflateCodesUsed@@ZLIB_1.2.9+0x954>  // b.first
    cd18:	ldrh	w22, [sp, #138]
    cd1c:	lsl	w0, w0, #1
    cd20:	subs	w0, w0, w22
    cd24:	b.mi	d38c <inflateCodesUsed@@ZLIB_1.2.9+0x954>  // b.first
    cd28:	stp	x23, x24, [sp, #48]
    cd2c:	lsl	w0, w0, #1
    cd30:	ldrh	w23, [sp, #140]
    cd34:	subs	w0, w0, w23
    cd38:	b.mi	d398 <inflateCodesUsed@@ZLIB_1.2.9+0x960>  // b.first
    cd3c:	lsl	w0, w0, #1
    cd40:	subs	w10, w0, w10
    cd44:	b.mi	d398 <inflateCodesUsed@@ZLIB_1.2.9+0x960>  // b.first
    cd48:	b.eq	cd5c <inflateCodesUsed@@ZLIB_1.2.9+0x324>  // b.none
    cd4c:	cmp	w8, #0x0
    cd50:	mov	w0, #0xffffffff            	// #-1
    cd54:	ccmp	w19, #0x1, #0x0, ne  // ne = any
    cd58:	b.ne	d2ac <inflateCodesUsed@@ZLIB_1.2.9+0x874>  // b.any
    cd5c:	add	w7, w9, w7
    cd60:	stp	x27, x28, [sp, #80]
    cd64:	and	w7, w7, #0xffff
    cd68:	add	w0, w7, w11
    cd6c:	strh	wzr, [sp, #146]
    cd70:	and	w0, w0, #0xffff
    cd74:	strh	w0, [sp, #152]
    cd78:	add	w0, w0, w12
    cd7c:	strh	w9, [sp, #148]
    cd80:	and	w0, w0, #0xffff
    cd84:	strh	w0, [sp, #154]
    cd88:	add	w0, w0, w13
    cd8c:	strh	w7, [sp, #150]
    cd90:	and	w0, w0, #0xffff
    cd94:	strh	w0, [sp, #156]
    cd98:	add	w0, w0, w14
    cd9c:	ldr	w10, [x4]
    cda0:	and	w0, w0, #0xffff
    cda4:	strh	w0, [sp, #158]
    cda8:	add	w0, w0, w16
    cdac:	add	x9, sp, #0x90
    cdb0:	and	w0, w0, #0xffff
    cdb4:	strh	w0, [sp, #160]
    cdb8:	add	w0, w0, w17
    cdbc:	mov	x7, #0x0                   	// #0
    cdc0:	and	w0, w0, #0xffff
    cdc4:	strh	w0, [sp, #162]
    cdc8:	add	w0, w0, w18
    cdcc:	and	w0, w0, #0xffff
    cdd0:	strh	w0, [sp, #164]
    cdd4:	add	w0, w0, w20
    cdd8:	and	w0, w0, #0xffff
    cddc:	strh	w0, [sp, #166]
    cde0:	add	w0, w0, w6
    cde4:	and	w0, w0, #0xffff
    cde8:	strh	w0, [sp, #168]
    cdec:	add	w0, w0, w21
    cdf0:	and	w0, w0, #0xffff
    cdf4:	strh	w0, [sp, #170]
    cdf8:	add	w0, w0, w22
    cdfc:	and	w0, w0, #0xffff
    ce00:	strh	w0, [sp, #172]
    ce04:	add	w0, w0, w23
    ce08:	strh	w0, [sp, #174]
    ce0c:	cbz	w2, ce3c <inflateCodesUsed@@ZLIB_1.2.9+0x404>
    ce10:	ldrh	w0, [x1, x7, lsl #1]
    ce14:	sbfiz	x6, x0, #1, #32
    ce18:	cbz	w0, ce30 <inflateCodesUsed@@ZLIB_1.2.9+0x3f8>
    ce1c:	ldrh	w0, [x9, x6]
    ce20:	add	w11, w0, #0x1
    ce24:	strh	w11, [x9, x6]
    ce28:	ubfiz	x0, x0, #1, #16
    ce2c:	strh	w7, [x5, x0]
    ce30:	add	x7, x7, #0x1
    ce34:	cmp	w2, w7
    ce38:	b.hi	ce10 <inflateCodesUsed@@ZLIB_1.2.9+0x3d8>  // b.pmore
    ce3c:	cmp	w19, w10
    ce40:	mov	w0, #0x1                   	// #1
    ce44:	csel	w10, w19, w10, ls  // ls = plast
    ce48:	cmp	w10, w15
    ce4c:	csel	w21, w10, w15, cs  // cs = hs, nlast
    ce50:	lsl	w23, w0, w21
    ce54:	cbz	w8, ced0 <inflateCodesUsed@@ZLIB_1.2.9+0x498>
    ce58:	cmp	w8, w0
    ce5c:	b.eq	cea4 <inflateCodesUsed@@ZLIB_1.2.9+0x46c>  // b.none
    ce60:	cmp	w8, #0x2
    ce64:	cset	w0, eq  // eq = none
    ce68:	cmp	w23, #0x250
    ce6c:	mov	w2, w0
    ce70:	ccmp	w0, #0x0, #0x4, hi  // hi = pmore
    ce74:	b.eq	d3b8 <inflateCodesUsed@@ZLIB_1.2.9+0x980>  // b.none
    ce78:	mov	w0, #0x1                   	// #1
    ce7c:	ldp	x19, x20, [sp, #16]
    ce80:	ldp	x21, x22, [sp, #32]
    ce84:	ldp	x23, x24, [sp, #48]
    ce88:	ldp	x27, x28, [sp, #80]
    ce8c:	ldp	x29, x30, [sp], #176
    ce90:	ret
    ce94:	mov	w0, #0xffffffff            	// #-1
    ce98:	ldp	x19, x20, [sp, #16]
    ce9c:	ldp	x29, x30, [sp], #176
    cea0:	ret
    cea4:	cmp	w23, #0x354
    cea8:	b.hi	ce78 <inflateCodesUsed@@ZLIB_1.2.9+0x440>  // b.pmore
    ceac:	adrp	x27, 15000 <gzclose_w@@ZLIB_1.2.3.5+0x2c38>
    ceb0:	add	x27, x27, #0x960
    ceb4:	add	x28, x27, #0x80
    ceb8:	mov	w0, w8
    cebc:	add	x27, x27, #0xc0
    cec0:	mov	w22, #0x101                 	// #257
    cec4:	mov	w2, #0x0                   	// #0
    cec8:	stp	x25, x26, [sp, #64]
    cecc:	b	ceec <inflateCodesUsed@@ZLIB_1.2.9+0x4b4>
    ced0:	mov	x28, x5
    ced4:	mov	x27, x5
    ced8:	mov	w22, #0x14                  	// #20
    cedc:	mov	w2, #0x0                   	// #0
    cee0:	stp	x25, x26, [sp, #64]
    cee4:	cmp	w8, #0x1
    cee8:	cset	w0, eq  // eq = none
    ceec:	ldr	x25, [x3]
    cef0:	sub	w26, w23, #0x1
    cef4:	mov	w16, w21
    cef8:	add	x14, sp, #0x70
    cefc:	mov	w13, w0
    cf00:	mov	w20, w2
    cf04:	mov	x7, x25
    cf08:	stp	x3, x4, [sp, #96]
    cf0c:	mov	w4, w15
    cf10:	mov	w24, #0xffffffff            	// #-1
    cf14:	mov	w8, #0x0                   	// #0
    cf18:	mov	w17, #0x0                   	// #0
    cf1c:	mov	w18, #0x0                   	// #0
    cf20:	mov	w30, #0x1                   	// #1
    cf24:	nop
    cf28:	ldrh	w6, [x5, w18, uxtw #1]
    cf2c:	and	w12, w4, #0xff
    cf30:	mov	w10, #0x0                   	// #0
    cf34:	add	w0, w6, #0x1
    cf38:	cmp	w0, w22
    cf3c:	b.cc	cf58 <inflateCodesUsed@@ZLIB_1.2.9+0x520>  // b.lo, b.ul, b.last
    cf40:	cmp	w6, w22
    cf44:	b.cc	d2a0 <inflateCodesUsed@@ZLIB_1.2.9+0x868>  // b.lo, b.ul, b.last
    cf48:	sub	w0, w6, w22
    cf4c:	lsl	x0, x0, #1
    cf50:	ldrb	w10, [x28, x0]
    cf54:	ldrh	w6, [x27, x0]
    cf58:	lsl	w11, w30, w16
    cf5c:	mov	w2, w11
    cf60:	lsl	w4, w30, w4
    cf64:	lsr	w9, w8, w17
    cf68:	sub	w2, w2, w4
    cf6c:	add	w0, w9, w2
    cf70:	lsl	x0, x0, #2
    cf74:	add	x3, x7, x0
    cf78:	strb	w10, [x7, x0]
    cf7c:	strb	w12, [x3, #1]
    cf80:	strh	w6, [x3, #2]
    cf84:	cbnz	w2, cf68 <inflateCodesUsed@@ZLIB_1.2.9+0x530>
    cf88:	sub	w0, w15, #0x1
    cf8c:	lsl	w0, w30, w0
    cf90:	tst	w8, w0
    cf94:	b.eq	cfa4 <inflateCodesUsed@@ZLIB_1.2.9+0x56c>  // b.none
    cf98:	lsr	w0, w0, #1
    cf9c:	tst	w8, w0
    cfa0:	b.ne	cf98 <inflateCodesUsed@@ZLIB_1.2.9+0x560>  // b.any
    cfa4:	ubfiz	x3, x15, #1, #32
    cfa8:	sub	w2, w0, #0x1
    cfac:	and	w8, w2, w8
    cfb0:	cmp	w0, #0x0
    cfb4:	add	w8, w0, w8
    cfb8:	add	w18, w18, #0x1
    cfbc:	ldrh	w2, [x14, x3]
    cfc0:	csel	w0, w8, w0, ne  // ne = any
    cfc4:	sub	w2, w2, #0x1
    cfc8:	and	w2, w2, #0xffff
    cfcc:	strh	w2, [x14, x3]
    cfd0:	cbnz	w2, cfe4 <inflateCodesUsed@@ZLIB_1.2.9+0x5ac>
    cfd4:	cmp	w19, w15
    cfd8:	b.eq	d2b8 <inflateCodesUsed@@ZLIB_1.2.9+0x880>  // b.none
    cfdc:	ldrh	w2, [x5, w18, uxtw #1]
    cfe0:	ldrh	w15, [x1, x2, lsl #1]
    cfe4:	sub	w4, w15, w17
    cfe8:	cmp	w15, w21
    cfec:	b.ls	d000 <inflateCodesUsed@@ZLIB_1.2.9+0x5c8>  // b.plast
    cff0:	and	w3, w26, w0
    cff4:	sub	w4, w15, w17
    cff8:	cmp	w3, w24
    cffc:	b.ne	d008 <inflateCodesUsed@@ZLIB_1.2.9+0x5d0>  // b.any
    d000:	mov	w8, w0
    d004:	b	cf28 <inflateCodesUsed@@ZLIB_1.2.9+0x4f0>
    d008:	cmp	w17, #0x0
    d00c:	add	x7, x7, w11, uxtw #2
    d010:	csel	w17, w17, w21, ne  // ne = any
    d014:	cmp	w19, w15
    d018:	sub	w4, w15, w17
    d01c:	mov	w16, w4
    d020:	lsl	w2, w30, w4
    d024:	b.ls	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>  // b.plast
    d028:	ldrh	w6, [x14, w15, uxtw #1]
    d02c:	sub	w2, w2, w6
    d030:	cmp	w2, #0x0
    d034:	b.le	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>
    d038:	add	w16, w4, #0x1
    d03c:	lsl	w2, w2, #1
    d040:	add	w6, w17, w16
    d044:	cmp	w19, w6
    d048:	b.ls	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>  // b.plast
    d04c:	ldrh	w6, [x14, w6, uxtw #1]
    d050:	sub	w2, w2, w6
    d054:	cmp	w2, #0x0
    d058:	b.le	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>
    d05c:	add	w16, w4, #0x2
    d060:	lsl	w2, w2, #1
    d064:	add	w6, w17, w16
    d068:	cmp	w19, w6
    d06c:	b.ls	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>  // b.plast
    d070:	ldrh	w6, [x14, w6, uxtw #1]
    d074:	sub	w2, w2, w6
    d078:	cmp	w2, #0x0
    d07c:	b.le	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>
    d080:	add	w16, w4, #0x3
    d084:	lsl	w2, w2, #1
    d088:	add	w6, w17, w16
    d08c:	cmp	w19, w6
    d090:	b.ls	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>  // b.plast
    d094:	ldrh	w6, [x14, w6, uxtw #1]
    d098:	sub	w2, w2, w6
    d09c:	cmp	w2, #0x0
    d0a0:	b.le	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>
    d0a4:	add	w16, w4, #0x4
    d0a8:	lsl	w2, w2, #1
    d0ac:	add	w6, w17, w16
    d0b0:	cmp	w19, w6
    d0b4:	b.ls	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>  // b.plast
    d0b8:	ldrh	w6, [x14, w6, uxtw #1]
    d0bc:	sub	w2, w2, w6
    d0c0:	cmp	w2, #0x0
    d0c4:	b.le	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>
    d0c8:	add	w16, w4, #0x5
    d0cc:	lsl	w2, w2, #1
    d0d0:	add	w6, w17, w16
    d0d4:	cmp	w19, w6
    d0d8:	b.ls	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>  // b.plast
    d0dc:	ldrh	w6, [x14, w6, uxtw #1]
    d0e0:	sub	w2, w2, w6
    d0e4:	cmp	w2, #0x0
    d0e8:	b.le	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>
    d0ec:	add	w16, w4, #0x6
    d0f0:	lsl	w2, w2, #1
    d0f4:	add	w6, w17, w16
    d0f8:	cmp	w19, w6
    d0fc:	b.ls	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>  // b.plast
    d100:	ldrh	w6, [x14, w6, uxtw #1]
    d104:	sub	w2, w2, w6
    d108:	cmp	w2, #0x0
    d10c:	b.le	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>
    d110:	add	w16, w4, #0x7
    d114:	lsl	w2, w2, #1
    d118:	add	w6, w17, w16
    d11c:	cmp	w19, w6
    d120:	b.ls	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>  // b.plast
    d124:	ldrh	w6, [x14, w6, uxtw #1]
    d128:	sub	w2, w2, w6
    d12c:	cmp	w2, #0x0
    d130:	b.le	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>
    d134:	add	w16, w4, #0x8
    d138:	lsl	w2, w2, #1
    d13c:	add	w6, w17, w16
    d140:	cmp	w19, w6
    d144:	b.ls	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>  // b.plast
    d148:	ldrh	w6, [x14, w6, uxtw #1]
    d14c:	sub	w2, w2, w6
    d150:	cmp	w2, #0x0
    d154:	b.le	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>
    d158:	add	w16, w4, #0x9
    d15c:	lsl	w2, w2, #1
    d160:	add	w6, w17, w16
    d164:	cmp	w19, w6
    d168:	b.ls	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>  // b.plast
    d16c:	ldrh	w6, [x14, w6, uxtw #1]
    d170:	sub	w2, w2, w6
    d174:	cmp	w2, #0x0
    d178:	b.le	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>
    d17c:	add	w16, w4, #0xa
    d180:	lsl	w2, w2, #1
    d184:	add	w6, w17, w16
    d188:	cmp	w19, w6
    d18c:	b.ls	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>  // b.plast
    d190:	ldrh	w6, [x14, w6, uxtw #1]
    d194:	sub	w2, w2, w6
    d198:	cmp	w2, #0x0
    d19c:	b.le	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>
    d1a0:	add	w16, w4, #0xb
    d1a4:	lsl	w2, w2, #1
    d1a8:	add	w6, w17, w16
    d1ac:	cmp	w19, w6
    d1b0:	b.ls	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>  // b.plast
    d1b4:	ldrh	w6, [x14, w6, uxtw #1]
    d1b8:	sub	w2, w2, w6
    d1bc:	cmp	w2, #0x0
    d1c0:	b.le	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>
    d1c4:	add	w16, w4, #0xc
    d1c8:	lsl	w2, w2, #1
    d1cc:	add	w6, w17, w16
    d1d0:	cmp	w19, w6
    d1d4:	b.ls	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>  // b.plast
    d1d8:	ldrh	w6, [x14, w6, uxtw #1]
    d1dc:	sub	w2, w2, w6
    d1e0:	cmp	w2, #0x0
    d1e4:	b.le	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>
    d1e8:	add	w16, w4, #0xd
    d1ec:	lsl	w2, w2, #1
    d1f0:	add	w6, w17, w16
    d1f4:	cmp	w19, w6
    d1f8:	b.ls	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>  // b.plast
    d1fc:	ldrh	w6, [x14, w6, uxtw #1]
    d200:	sub	w2, w2, w6
    d204:	cmp	w2, #0x0
    d208:	b.le	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>
    d20c:	add	w16, w4, #0xe
    d210:	lsl	w2, w2, #1
    d214:	add	w6, w17, w16
    d218:	cmp	w19, w6
    d21c:	b.ls	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>  // b.plast
    d220:	ldrh	w6, [x14, w6, uxtw #1]
    d224:	sub	w2, w2, w6
    d228:	cmp	w2, #0x0
    d22c:	b.le	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>
    d230:	add	w16, w4, #0xf
    d234:	lsl	w2, w2, #1
    d238:	add	w6, w17, w16
    d23c:	cmp	w19, w6
    d240:	b.ls	d258 <inflateCodesUsed@@ZLIB_1.2.9+0x820>  // b.plast
    d244:	ldrh	w8, [x14, w6, uxtw #1]
    d248:	add	w6, w4, #0x10
    d24c:	sub	w2, w2, w8
    d250:	cmp	w2, #0x0
    d254:	csel	w16, w6, w16, gt
    d258:	lsl	w2, w30, w16
    d25c:	add	w23, w23, w2
    d260:	cmp	w23, #0x354
    d264:	ccmp	w13, #0x0, #0x4, hi  // hi = pmore
    d268:	b.ne	d2fc <inflateCodesUsed@@ZLIB_1.2.9+0x8c4>  // b.any
    d26c:	cmp	w23, #0x250
    d270:	ccmp	w20, #0x0, #0x4, hi  // hi = pmore
    d274:	b.ne	d2fc <inflateCodesUsed@@ZLIB_1.2.9+0x8c4>  // b.any
    d278:	ubfiz	x8, x3, #2, #32
    d27c:	sub	x2, x7, x25
    d280:	add	x6, x25, x8
    d284:	mov	w24, w3
    d288:	asr	x2, x2, #2
    d28c:	strb	w16, [x25, x8]
    d290:	mov	w8, w0
    d294:	strb	w21, [x6, #1]
    d298:	strh	w2, [x6, #2]
    d29c:	b	cf28 <inflateCodesUsed@@ZLIB_1.2.9+0x4f0>
    d2a0:	mov	w6, #0x0                   	// #0
    d2a4:	mov	w10, #0x60                  	// #96
    d2a8:	b	cf58 <inflateCodesUsed@@ZLIB_1.2.9+0x520>
    d2ac:	ldp	x21, x22, [sp, #32]
    d2b0:	ldp	x23, x24, [sp, #48]
    d2b4:	b	cb88 <inflateCodesUsed@@ZLIB_1.2.9+0x150>
    d2b8:	ldp	x3, x4, [sp, #96]
    d2bc:	cbz	w0, d2d8 <inflateCodesUsed@@ZLIB_1.2.9+0x8a0>
    d2c0:	ubfiz	x0, x0, #2, #32
    d2c4:	mov	w2, #0x40                  	// #64
    d2c8:	add	x1, x7, x0
    d2cc:	strb	w2, [x7, x0]
    d2d0:	strb	w12, [x1, #1]
    d2d4:	strh	wzr, [x1, #2]
    d2d8:	add	x23, x25, w23, uxtw #2
    d2dc:	mov	w0, #0x0                   	// #0
    d2e0:	ldp	x25, x26, [sp, #64]
    d2e4:	ldp	x27, x28, [sp, #80]
    d2e8:	str	x23, [x3]
    d2ec:	ldp	x23, x24, [sp, #48]
    d2f0:	str	w21, [x4]
    d2f4:	ldp	x21, x22, [sp, #32]
    d2f8:	b	cb88 <inflateCodesUsed@@ZLIB_1.2.9+0x150>
    d2fc:	ldp	x25, x26, [sp, #64]
    d300:	b	ce78 <inflateCodesUsed@@ZLIB_1.2.9+0x440>
    d304:	mov	w15, #0xe                   	// #14
    d308:	b	cb98 <inflateCodesUsed@@ZLIB_1.2.9+0x160>
    d30c:	ldrh	w9, [sp, #114]
    d310:	cbnz	w9, d4ac <inflateCodesUsed@@ZLIB_1.2.9+0xa74>
    d314:	ldrh	w7, [sp, #116]
    d318:	cbnz	w7, d488 <inflateCodesUsed@@ZLIB_1.2.9+0xa50>
    d31c:	mov	w19, #0x3                   	// #3
    d320:	mov	w15, w19
    d324:	b	cc64 <inflateCodesUsed@@ZLIB_1.2.9+0x22c>
    d328:	mov	w0, #0xe                   	// #14
    d32c:	mov	w19, w15
    d330:	mov	w6, #0x2                   	// #2
    d334:	mov	w15, w0
    d338:	b	cc68 <inflateCodesUsed@@ZLIB_1.2.9+0x230>
    d33c:	ldrh	w9, [sp, #114]
    d340:	cbnz	w9, d478 <inflateCodesUsed@@ZLIB_1.2.9+0xa40>
    d344:	mov	w15, #0xd                   	// #13
    d348:	b	cba0 <inflateCodesUsed@@ZLIB_1.2.9+0x168>
    d34c:	ldrh	w9, [sp, #114]
    d350:	cbnz	w9, d49c <inflateCodesUsed@@ZLIB_1.2.9+0xa64>
    d354:	mov	w15, #0xc                   	// #12
    d358:	b	cba0 <inflateCodesUsed@@ZLIB_1.2.9+0x168>
    d35c:	ldrh	w9, [sp, #114]
    d360:	cbnz	w9, d4a4 <inflateCodesUsed@@ZLIB_1.2.9+0xa6c>
    d364:	mov	w15, #0xb                   	// #11
    d368:	b	cba0 <inflateCodesUsed@@ZLIB_1.2.9+0x168>
    d36c:	ldrh	w9, [sp, #114]
    d370:	cbnz	w9, d494 <inflateCodesUsed@@ZLIB_1.2.9+0xa5c>
    d374:	mov	w15, #0xa                   	// #10
    d378:	b	cba0 <inflateCodesUsed@@ZLIB_1.2.9+0x168>
    d37c:	ldrh	w9, [sp, #114]
    d380:	cbnz	w9, d480 <inflateCodesUsed@@ZLIB_1.2.9+0xa48>
    d384:	mov	w15, #0x9                   	// #9
    d388:	b	cba0 <inflateCodesUsed@@ZLIB_1.2.9+0x168>
    d38c:	mov	w0, #0xffffffff            	// #-1
    d390:	ldp	x21, x22, [sp, #32]
    d394:	b	cb88 <inflateCodesUsed@@ZLIB_1.2.9+0x150>
    d398:	mov	w0, #0xffffffff            	// #-1
    d39c:	ldp	x21, x22, [sp, #32]
    d3a0:	ldp	x23, x24, [sp, #48]
    d3a4:	b	cb88 <inflateCodesUsed@@ZLIB_1.2.9+0x150>
    d3a8:	ldrh	w9, [sp, #114]
    d3ac:	cbnz	w9, d504 <inflateCodesUsed@@ZLIB_1.2.9+0xacc>
    d3b0:	mov	w15, #0x4                   	// #4
    d3b4:	b	cba0 <inflateCodesUsed@@ZLIB_1.2.9+0x168>
    d3b8:	adrp	x28, 15000 <gzclose_w@@ZLIB_1.2.3.5+0x2c38>
    d3bc:	add	x28, x28, #0x960
    d3c0:	add	x27, x28, #0x40
    d3c4:	mov	w22, #0x0                   	// #0
    d3c8:	stp	x25, x26, [sp, #64]
    d3cc:	b	cee4 <inflateCodesUsed@@ZLIB_1.2.9+0x4ac>
    d3d0:	mov	w19, #0x2                   	// #2
    d3d4:	cbz	w9, d320 <inflateCodesUsed@@ZLIB_1.2.9+0x8e8>
    d3d8:	mov	w6, #0x2                   	// #2
    d3dc:	mov	w0, #0xffffffff            	// #-1
    d3e0:	subs	w6, w6, w9
    d3e4:	b.mi	cb88 <inflateCodesUsed@@ZLIB_1.2.9+0x150>  // b.first
    d3e8:	ldrh	w7, [sp, #116]
    d3ec:	mov	w15, #0x1                   	// #1
    d3f0:	b	cc68 <inflateCodesUsed@@ZLIB_1.2.9+0x230>
    d3f4:	mov	w19, #0x1                   	// #1
    d3f8:	b	d3d8 <inflateCodesUsed@@ZLIB_1.2.9+0x9a0>
    d3fc:	mov	w0, #0x3                   	// #3
    d400:	b	d32c <inflateCodesUsed@@ZLIB_1.2.9+0x8f4>
    d404:	ldrh	w9, [sp, #114]
    d408:	cbnz	w9, d4f4 <inflateCodesUsed@@ZLIB_1.2.9+0xabc>
    d40c:	mov	w15, #0x8                   	// #8
    d410:	b	cba0 <inflateCodesUsed@@ZLIB_1.2.9+0x168>
    d414:	mov	w0, #0x6                   	// #6
    d418:	b	d32c <inflateCodesUsed@@ZLIB_1.2.9+0x8f4>
    d41c:	mov	w0, #0x5                   	// #5
    d420:	b	d32c <inflateCodesUsed@@ZLIB_1.2.9+0x8f4>
    d424:	mov	w0, #0x4                   	// #4
    d428:	b	d32c <inflateCodesUsed@@ZLIB_1.2.9+0x8f4>
    d42c:	mov	w0, #0x7                   	// #7
    d430:	b	d32c <inflateCodesUsed@@ZLIB_1.2.9+0x8f4>
    d434:	mov	w0, #0x9                   	// #9
    d438:	b	d32c <inflateCodesUsed@@ZLIB_1.2.9+0x8f4>
    d43c:	mov	w0, #0x8                   	// #8
    d440:	b	d32c <inflateCodesUsed@@ZLIB_1.2.9+0x8f4>
    d444:	mov	w0, #0xb                   	// #11
    d448:	b	d32c <inflateCodesUsed@@ZLIB_1.2.9+0x8f4>
    d44c:	mov	w0, #0xa                   	// #10
    d450:	b	d32c <inflateCodesUsed@@ZLIB_1.2.9+0x8f4>
    d454:	mov	w15, #0xe                   	// #14
    d458:	mov	w19, w15
    d45c:	b	cc64 <inflateCodesUsed@@ZLIB_1.2.9+0x22c>
    d460:	mov	w0, #0xd                   	// #13
    d464:	b	d32c <inflateCodesUsed@@ZLIB_1.2.9+0x8f4>
    d468:	mov	w0, #0xc                   	// #12
    d46c:	b	d32c <inflateCodesUsed@@ZLIB_1.2.9+0x8f4>
    d470:	mov	w19, w15
    d474:	b	d3d8 <inflateCodesUsed@@ZLIB_1.2.9+0x9a0>
    d478:	mov	w19, #0xd                   	// #13
    d47c:	b	d3d8 <inflateCodesUsed@@ZLIB_1.2.9+0x9a0>
    d480:	mov	w19, #0x9                   	// #9
    d484:	b	d3d8 <inflateCodesUsed@@ZLIB_1.2.9+0x9a0>
    d488:	mov	w15, #0x3                   	// #3
    d48c:	mov	w0, #0x2                   	// #2
    d490:	b	d32c <inflateCodesUsed@@ZLIB_1.2.9+0x8f4>
    d494:	mov	w19, #0xa                   	// #10
    d498:	b	d3d8 <inflateCodesUsed@@ZLIB_1.2.9+0x9a0>
    d49c:	mov	w19, #0xc                   	// #12
    d4a0:	b	d3d8 <inflateCodesUsed@@ZLIB_1.2.9+0x9a0>
    d4a4:	mov	w19, #0xb                   	// #11
    d4a8:	b	d3d8 <inflateCodesUsed@@ZLIB_1.2.9+0x9a0>
    d4ac:	mov	w19, #0x3                   	// #3
    d4b0:	b	d3d8 <inflateCodesUsed@@ZLIB_1.2.9+0x9a0>
    d4b4:	ldrh	w9, [sp, #114]
    d4b8:	cbnz	w9, d4d4 <inflateCodesUsed@@ZLIB_1.2.9+0xa9c>
    d4bc:	mov	w15, #0x6                   	// #6
    d4c0:	b	cba0 <inflateCodesUsed@@ZLIB_1.2.9+0x168>
    d4c4:	ldrh	w9, [sp, #114]
    d4c8:	cbnz	w9, d4dc <inflateCodesUsed@@ZLIB_1.2.9+0xaa4>
    d4cc:	mov	w15, #0x7                   	// #7
    d4d0:	b	cba0 <inflateCodesUsed@@ZLIB_1.2.9+0x168>
    d4d4:	mov	w19, #0x6                   	// #6
    d4d8:	b	d3d8 <inflateCodesUsed@@ZLIB_1.2.9+0x9a0>
    d4dc:	mov	w19, #0x7                   	// #7
    d4e0:	b	d3d8 <inflateCodesUsed@@ZLIB_1.2.9+0x9a0>
    d4e4:	ldrh	w9, [sp, #114]
    d4e8:	cbnz	w9, d4fc <inflateCodesUsed@@ZLIB_1.2.9+0xac4>
    d4ec:	mov	w15, #0x5                   	// #5
    d4f0:	b	cba0 <inflateCodesUsed@@ZLIB_1.2.9+0x168>
    d4f4:	mov	w19, #0x8                   	// #8
    d4f8:	b	d3d8 <inflateCodesUsed@@ZLIB_1.2.9+0x9a0>
    d4fc:	mov	w19, #0x5                   	// #5
    d500:	b	d3d8 <inflateCodesUsed@@ZLIB_1.2.9+0x9a0>
    d504:	mov	w19, #0x4                   	// #4
    d508:	b	d3d8 <inflateCodesUsed@@ZLIB_1.2.9+0x9a0>
    d50c:	nop
    d510:	ldrh	w4, [x1, #2]
    d514:	add	x6, x1, w2, sxtw #2
    d518:	mov	w8, #0xffffffff            	// #-1
    d51c:	mov	w3, #0x3                   	// #3
    d520:	cmp	w4, #0x0
    d524:	mov	w7, #0x4                   	// #4
    d528:	strh	w8, [x6, #6]
    d52c:	csel	w7, w7, w3, ne  // ne = any
    d530:	mov	w5, #0x7                   	// #7
    d534:	mov	w3, #0x8a                  	// #138
    d538:	csel	w5, w5, w3, ne  // ne = any
    d53c:	tbnz	w2, #31, d5ac <inflateCodesUsed@@ZLIB_1.2.9+0xb74>
    d540:	add	x6, x1, #0xa
    d544:	add	x3, x1, #0x6
    d548:	add	x6, x6, w2, sxtw #2
    d54c:	mov	w1, #0x0                   	// #0
    d550:	mov	w8, #0xffffffff            	// #-1
    d554:	nop
    d558:	add	w1, w1, #0x1
    d55c:	mov	w2, w4
    d560:	cmp	w1, w5
    d564:	ldrh	w4, [x3]
    d568:	b.ge	d5b0 <inflateCodesUsed@@ZLIB_1.2.9+0xb78>  // b.tcont
    d56c:	cmp	w4, w2
    d570:	b.eq	d5a0 <inflateCodesUsed@@ZLIB_1.2.9+0xb68>  // b.none
    d574:	cmp	w1, w7
    d578:	b.ge	d5b0 <inflateCodesUsed@@ZLIB_1.2.9+0xb78>  // b.tcont
    d57c:	add	x5, x0, w2, sxtw #2
    d580:	ldrh	w7, [x5, #2748]
    d584:	add	w1, w1, w7
    d588:	strh	w1, [x5, #2748]
    d58c:	cbz	w4, d5f8 <inflateCodesUsed@@ZLIB_1.2.9+0xbc0>
    d590:	mov	w8, w2
    d594:	mov	w7, #0x4                   	// #4
    d598:	mov	w5, #0x7                   	// #7
    d59c:	mov	w1, #0x0                   	// #0
    d5a0:	add	x3, x3, #0x4
    d5a4:	cmp	x6, x3
    d5a8:	b.ne	d558 <inflateCodesUsed@@ZLIB_1.2.9+0xb20>  // b.any
    d5ac:	ret
    d5b0:	cbz	w2, d60c <inflateCodesUsed@@ZLIB_1.2.9+0xbd4>
    d5b4:	cmp	w2, w8
    d5b8:	b.eq	d5cc <inflateCodesUsed@@ZLIB_1.2.9+0xb94>  // b.none
    d5bc:	add	x5, x0, w2, sxtw #2
    d5c0:	ldrh	w1, [x5, #2748]
    d5c4:	add	w1, w1, #0x1
    d5c8:	strh	w1, [x5, #2748]
    d5cc:	ldrh	w1, [x0, #2812]
    d5d0:	add	w1, w1, #0x1
    d5d4:	strh	w1, [x0, #2812]
    d5d8:	cbz	w4, d5f8 <inflateCodesUsed@@ZLIB_1.2.9+0xbc0>
    d5dc:	cmp	w4, w2
    d5e0:	b.ne	d590 <inflateCodesUsed@@ZLIB_1.2.9+0xb58>  // b.any
    d5e4:	mov	w8, w4
    d5e8:	mov	w7, #0x3                   	// #3
    d5ec:	mov	w5, #0x6                   	// #6
    d5f0:	mov	w1, #0x0                   	// #0
    d5f4:	b	d5a0 <inflateCodesUsed@@ZLIB_1.2.9+0xb68>
    d5f8:	mov	w8, w2
    d5fc:	mov	w7, #0x3                   	// #3
    d600:	mov	w5, #0x8a                  	// #138
    d604:	mov	w1, #0x0                   	// #0
    d608:	b	d5a0 <inflateCodesUsed@@ZLIB_1.2.9+0xb68>
    d60c:	cmp	w1, #0xa
    d610:	b.gt	d624 <inflateCodesUsed@@ZLIB_1.2.9+0xbec>
    d614:	ldrh	w1, [x0, #2816]
    d618:	add	w1, w1, #0x1
    d61c:	strh	w1, [x0, #2816]
    d620:	b	d5d8 <inflateCodesUsed@@ZLIB_1.2.9+0xba0>
    d624:	ldrh	w1, [x0, #2820]
    d628:	add	w1, w1, #0x1
    d62c:	strh	w1, [x0, #2820]
    d630:	b	d5d8 <inflateCodesUsed@@ZLIB_1.2.9+0xba0>
    d634:	nop
    d638:	ldrh	w5, [x1, #2]
    d63c:	mov	w9, #0x4                   	// #4
    d640:	mov	w6, #0x3                   	// #3
    d644:	mov	w3, #0x7                   	// #7
    d648:	cmp	w5, #0x0
    d64c:	mov	w4, #0x8a                  	// #138
    d650:	csel	w9, w9, w6, ne  // ne = any
    d654:	csel	w3, w3, w4, ne  // ne = any
    d658:	tbnz	w2, #31, d7a8 <inflateCodesUsed@@ZLIB_1.2.9+0xd70>
    d65c:	add	x10, x1, #0xa
    d660:	add	x4, x1, #0x6
    d664:	add	x10, x10, w2, sxtw #2
    d668:	mov	w6, #0x0                   	// #0
    d66c:	mov	w11, #0xffffffff            	// #-1
    d670:	mov	w8, #0x10                  	// #16
    d674:	nop
    d678:	add	w2, w6, #0x1
    d67c:	mov	w7, w5
    d680:	cmp	w2, w3
    d684:	ldrh	w5, [x4]
    d688:	b.ge	d7ac <inflateCodesUsed@@ZLIB_1.2.9+0xd74>  // b.tcont
    d68c:	cmp	w5, w7
    d690:	b.eq	dbfc <inflateCodesUsed@@ZLIB_1.2.9+0x11c4>  // b.none
    d694:	ldrh	w1, [x0, #5936]
    d698:	cmp	w2, w9
    d69c:	ldr	w3, [x0, #5940]
    d6a0:	b.ge	d7b4 <inflateCodesUsed@@ZLIB_1.2.9+0xd7c>  // b.tcont
    d6a4:	add	x11, x0, w7, sxtw #2
    d6a8:	ldrh	w12, [x11, #2748]
    d6ac:	ldrh	w2, [x11, #2750]
    d6b0:	lsl	w9, w12, w3
    d6b4:	orr	w1, w9, w1
    d6b8:	sub	w13, w8, w2
    d6bc:	and	w9, w1, #0xffff
    d6c0:	cmp	w13, w3
    d6c4:	sxth	w1, w1
    d6c8:	b.lt	db3c <inflateCodesUsed@@ZLIB_1.2.9+0x1104>  // b.tstop
    d6cc:	add	w3, w2, w3
    d6d0:	strh	w9, [x0, #5936]
    d6d4:	str	w3, [x0, #5940]
    d6d8:	cbz	w6, d788 <inflateCodesUsed@@ZLIB_1.2.9+0xd50>
    d6dc:	ldrh	w12, [x11, #2748]
    d6e0:	ldrh	w1, [x11, #2750]
    d6e4:	lsl	w2, w12, w3
    d6e8:	orr	w2, w2, w9
    d6ec:	sub	w13, w8, w1
    d6f0:	and	w9, w2, #0xffff
    d6f4:	cmp	w13, w3
    d6f8:	sxth	w2, w2
    d6fc:	b.lt	dba4 <inflateCodesUsed@@ZLIB_1.2.9+0x116c>  // b.tstop
    d700:	add	w3, w1, w3
    d704:	strh	w9, [x0, #5936]
    d708:	str	w3, [x0, #5940]
    d70c:	cmp	w6, #0x1
    d710:	b.eq	d788 <inflateCodesUsed@@ZLIB_1.2.9+0xd50>  // b.none
    d714:	ldrh	w6, [x11, #2748]
    d718:	ldrh	w2, [x11, #2750]
    d71c:	lsl	w1, w6, w3
    d720:	orr	w1, w1, w9
    d724:	sub	w9, w8, w2
    d728:	and	w11, w1, #0xffff
    d72c:	cmp	w9, w3
    d730:	sxth	w1, w1
    d734:	b.ge	dc04 <inflateCodesUsed@@ZLIB_1.2.9+0x11cc>  // b.tcont
    d738:	ldr	x9, [x0, #16]
    d73c:	strh	w11, [x0, #5936]
    d740:	ldr	x3, [x0, #40]
    d744:	sub	w2, w2, #0x10
    d748:	add	x11, x3, #0x1
    d74c:	str	x11, [x0, #40]
    d750:	strb	w1, [x9, x3]
    d754:	ldr	x9, [x0, #16]
    d758:	ldr	x3, [x0, #40]
    d75c:	ldrh	w1, [x0, #5936]
    d760:	add	x11, x3, #0x1
    d764:	str	x11, [x0, #40]
    d768:	lsr	w1, w1, #8
    d76c:	strb	w1, [x9, x3]
    d770:	ldr	w1, [x0, #5940]
    d774:	sub	w3, w8, w1
    d778:	add	w2, w2, w1
    d77c:	str	w2, [x0, #5940]
    d780:	asr	w6, w6, w3
    d784:	strh	w6, [x0, #5936]
    d788:	cbz	w5, d93c <inflateCodesUsed@@ZLIB_1.2.9+0xf04>
    d78c:	mov	w11, w7
    d790:	mov	w9, #0x4                   	// #4
    d794:	mov	w3, #0x7                   	// #7
    d798:	mov	w6, #0x0                   	// #0
    d79c:	add	x4, x4, #0x4
    d7a0:	cmp	x4, x10
    d7a4:	b.ne	d678 <inflateCodesUsed@@ZLIB_1.2.9+0xc40>  // b.any
    d7a8:	ret
    d7ac:	ldrh	w1, [x0, #5936]
    d7b0:	ldr	w3, [x0, #5940]
    d7b4:	cbz	w7, d950 <inflateCodesUsed@@ZLIB_1.2.9+0xf18>
    d7b8:	sxth	w1, w1
    d7bc:	cmp	w7, w11
    d7c0:	b.eq	d840 <inflateCodesUsed@@ZLIB_1.2.9+0xe08>  // b.none
    d7c4:	add	x2, x0, w7, sxtw #2
    d7c8:	ldrh	w11, [x2, #2748]
    d7cc:	ldrh	w9, [x2, #2750]
    d7d0:	lsl	w2, w11, w3
    d7d4:	orr	w1, w1, w2
    d7d8:	sub	w2, w8, w9
    d7dc:	and	w12, w1, #0xffff
    d7e0:	cmp	w2, w3
    d7e4:	sxth	w1, w1
    d7e8:	b.ge	db94 <inflateCodesUsed@@ZLIB_1.2.9+0x115c>  // b.tcont
    d7ec:	ldr	x13, [x0, #16]
    d7f0:	mov	w2, w6
    d7f4:	ldr	x3, [x0, #40]
    d7f8:	strh	w12, [x0, #5936]
    d7fc:	sub	w9, w9, #0x10
    d800:	add	x6, x3, #0x1
    d804:	str	x6, [x0, #40]
    d808:	strb	w1, [x13, x3]
    d80c:	ldr	x6, [x0, #16]
    d810:	ldr	x3, [x0, #40]
    d814:	ldrh	w1, [x0, #5936]
    d818:	add	x12, x3, #0x1
    d81c:	str	x12, [x0, #40]
    d820:	lsr	w1, w1, #8
    d824:	strb	w1, [x6, x3]
    d828:	ldr	w3, [x0, #5940]
    d82c:	sub	w1, w8, w3
    d830:	add	w3, w9, w3
    d834:	str	w3, [x0, #5940]
    d838:	asr	w1, w11, w1
    d83c:	sxth	w1, w1
    d840:	ldrh	w9, [x0, #2812]
    d844:	ldrh	w6, [x0, #2814]
    d848:	lsl	w11, w9, w3
    d84c:	orr	w1, w1, w11
    d850:	sub	w11, w8, w6
    d854:	and	w12, w1, #0xffff
    d858:	cmp	w11, w3
    d85c:	sxth	w1, w1
    d860:	b.ge	da50 <inflateCodesUsed@@ZLIB_1.2.9+0x1018>  // b.tcont
    d864:	ldr	x13, [x0, #16]
    d868:	sub	w3, w6, #0x10
    d86c:	ldr	x11, [x0, #40]
    d870:	strh	w12, [x0, #5936]
    d874:	add	x6, x11, #0x1
    d878:	str	x6, [x0, #40]
    d87c:	strb	w1, [x13, x11]
    d880:	ldr	x11, [x0, #16]
    d884:	ldr	x6, [x0, #40]
    d888:	ldrh	w1, [x0, #5936]
    d88c:	add	x12, x6, #0x1
    d890:	str	x12, [x0, #40]
    d894:	lsr	w1, w1, #8
    d898:	strb	w1, [x11, x6]
    d89c:	ldr	w1, [x0, #5940]
    d8a0:	sub	w6, w8, w1
    d8a4:	add	w3, w3, w1
    d8a8:	str	w3, [x0, #5940]
    d8ac:	asr	w1, w9, w6
    d8b0:	sxth	w1, w1
    d8b4:	sub	w2, w2, #0x3
    d8b8:	cmp	w3, #0xe
    d8bc:	b.le	da34 <inflateCodesUsed@@ZLIB_1.2.9+0xffc>
    d8c0:	and	w2, w2, #0xffff
    d8c4:	ldr	x9, [x0, #16]
    d8c8:	lsl	w3, w2, w3
    d8cc:	ldr	x6, [x0, #40]
    d8d0:	orr	w1, w1, w3
    d8d4:	add	x3, x6, #0x1
    d8d8:	sxth	w1, w1
    d8dc:	str	x3, [x0, #40]
    d8e0:	strh	w1, [x0, #5936]
    d8e4:	strb	w1, [x9, x6]
    d8e8:	ldr	x6, [x0, #16]
    d8ec:	ldr	x3, [x0, #40]
    d8f0:	ldrh	w1, [x0, #5936]
    d8f4:	add	x9, x3, #0x1
    d8f8:	str	x9, [x0, #40]
    d8fc:	lsr	w1, w1, #8
    d900:	strb	w1, [x6, x3]
    d904:	ldr	w1, [x0, #5940]
    d908:	sub	w3, w8, w1
    d90c:	sub	w1, w1, #0xe
    d910:	str	w1, [x0, #5940]
    d914:	asr	w2, w2, w3
    d918:	strh	w2, [x0, #5936]
    d91c:	cbz	w5, d93c <inflateCodesUsed@@ZLIB_1.2.9+0xf04>
    d920:	cmp	w5, w7
    d924:	b.ne	d78c <inflateCodesUsed@@ZLIB_1.2.9+0xd54>  // b.any
    d928:	mov	w11, w5
    d92c:	mov	w9, #0x3                   	// #3
    d930:	mov	w3, #0x6                   	// #6
    d934:	mov	w6, #0x0                   	// #0
    d938:	b	d79c <inflateCodesUsed@@ZLIB_1.2.9+0xd64>
    d93c:	mov	w11, w7
    d940:	mov	w9, #0x3                   	// #3
    d944:	mov	w3, #0x8a                  	// #138
    d948:	mov	w6, #0x0                   	// #0
    d94c:	b	d79c <inflateCodesUsed@@ZLIB_1.2.9+0xd64>
    d950:	cmp	w2, #0xa
    d954:	b.gt	da5c <inflateCodesUsed@@ZLIB_1.2.9+0x1024>
    d958:	ldrh	w11, [x0, #2818]
    d95c:	ldrh	w9, [x0, #2816]
    d960:	sub	w12, w8, w11
    d964:	cmp	w12, w3
    d968:	b.ge	dc14 <inflateCodesUsed@@ZLIB_1.2.9+0x11dc>  // b.tcont
    d96c:	ldr	x13, [x0, #16]
    d970:	lsl	w3, w9, w3
    d974:	ldr	x12, [x0, #40]
    d978:	orr	w1, w3, w1
    d97c:	sub	w3, w11, #0x10
    d980:	sxth	w1, w1
    d984:	add	x11, x12, #0x1
    d988:	str	x11, [x0, #40]
    d98c:	strh	w1, [x0, #5936]
    d990:	strb	w1, [x13, x12]
    d994:	ldr	x12, [x0, #16]
    d998:	ldr	x11, [x0, #40]
    d99c:	ldrh	w1, [x0, #5936]
    d9a0:	add	x13, x11, #0x1
    d9a4:	str	x13, [x0, #40]
    d9a8:	lsr	w1, w1, #8
    d9ac:	strb	w1, [x12, x11]
    d9b0:	ldr	w1, [x0, #5940]
    d9b4:	sub	w11, w8, w1
    d9b8:	add	w3, w3, w1
    d9bc:	str	w3, [x0, #5940]
    d9c0:	cmp	w3, #0xd
    d9c4:	asr	w9, w9, w11
    d9c8:	sxth	w1, w9
    d9cc:	b.le	dc30 <inflateCodesUsed@@ZLIB_1.2.9+0x11f8>
    d9d0:	sub	w6, w6, #0x2
    d9d4:	and	w6, w6, #0xffff
    d9d8:	ldr	x9, [x0, #16]
    d9dc:	lsl	w3, w6, w3
    d9e0:	ldr	x2, [x0, #40]
    d9e4:	orr	w1, w1, w3
    d9e8:	add	x3, x2, #0x1
    d9ec:	sxth	w1, w1
    d9f0:	str	x3, [x0, #40]
    d9f4:	strh	w1, [x0, #5936]
    d9f8:	strb	w1, [x9, x2]
    d9fc:	ldr	x3, [x0, #16]
    da00:	ldr	x2, [x0, #40]
    da04:	ldrh	w1, [x0, #5936]
    da08:	add	x9, x2, #0x1
    da0c:	str	x9, [x0, #40]
    da10:	lsr	w1, w1, #8
    da14:	strb	w1, [x3, x2]
    da18:	ldr	w1, [x0, #5940]
    da1c:	sub	w2, w8, w1
    da20:	sub	w1, w1, #0xd
    da24:	str	w1, [x0, #5940]
    da28:	asr	w6, w6, w2
    da2c:	strh	w6, [x0, #5936]
    da30:	b	d91c <inflateCodesUsed@@ZLIB_1.2.9+0xee4>
    da34:	add	w6, w3, #0x2
    da38:	and	w2, w2, #0xffff
    da3c:	str	w6, [x0, #5940]
    da40:	lsl	w3, w2, w3
    da44:	orr	w1, w1, w3
    da48:	strh	w1, [x0, #5936]
    da4c:	b	d91c <inflateCodesUsed@@ZLIB_1.2.9+0xee4>
    da50:	add	w3, w6, w3
    da54:	str	w3, [x0, #5940]
    da58:	b	d8b4 <inflateCodesUsed@@ZLIB_1.2.9+0xe7c>
    da5c:	ldrh	w12, [x0, #2820]
    da60:	ldrh	w11, [x0, #2822]
    da64:	lsl	w9, w12, w3
    da68:	orr	w1, w9, w1
    da6c:	sub	w9, w8, w11
    da70:	and	w13, w1, #0xffff
    da74:	cmp	w9, w3
    da78:	sxth	w1, w1
    da7c:	b.ge	dc48 <inflateCodesUsed@@ZLIB_1.2.9+0x1210>  // b.tcont
    da80:	ldr	x14, [x0, #16]
    da84:	sub	w3, w11, #0x10
    da88:	ldr	x9, [x0, #40]
    da8c:	strh	w13, [x0, #5936]
    da90:	add	x11, x9, #0x1
    da94:	str	x11, [x0, #40]
    da98:	strb	w1, [x14, x9]
    da9c:	ldr	x11, [x0, #16]
    daa0:	ldr	x9, [x0, #40]
    daa4:	ldrh	w1, [x0, #5936]
    daa8:	add	x13, x9, #0x1
    daac:	str	x13, [x0, #40]
    dab0:	lsr	w1, w1, #8
    dab4:	strb	w1, [x11, x9]
    dab8:	ldr	w1, [x0, #5940]
    dabc:	sub	w9, w8, w1
    dac0:	add	w3, w3, w1
    dac4:	str	w3, [x0, #5940]
    dac8:	asr	w1, w12, w9
    dacc:	sxth	w1, w1
    dad0:	cmp	w3, #0x9
    dad4:	b.le	dc3c <inflateCodesUsed@@ZLIB_1.2.9+0x1204>
    dad8:	sub	w6, w6, #0xa
    dadc:	and	w6, w6, #0xffff
    dae0:	ldr	x9, [x0, #16]
    dae4:	lsl	w3, w6, w3
    dae8:	ldr	x2, [x0, #40]
    daec:	orr	w1, w1, w3
    daf0:	add	x3, x2, #0x1
    daf4:	sxth	w1, w1
    daf8:	str	x3, [x0, #40]
    dafc:	strh	w1, [x0, #5936]
    db00:	strb	w1, [x9, x2]
    db04:	ldr	x3, [x0, #16]
    db08:	ldr	x2, [x0, #40]
    db0c:	ldrh	w1, [x0, #5936]
    db10:	add	x9, x2, #0x1
    db14:	str	x9, [x0, #40]
    db18:	lsr	w1, w1, #8
    db1c:	strb	w1, [x3, x2]
    db20:	ldr	w1, [x0, #5940]
    db24:	sub	w2, w8, w1
    db28:	sub	w1, w1, #0x9
    db2c:	str	w1, [x0, #5940]
    db30:	asr	w6, w6, w2
    db34:	strh	w6, [x0, #5936]
    db38:	b	d91c <inflateCodesUsed@@ZLIB_1.2.9+0xee4>
    db3c:	strh	w9, [x0, #5936]
    db40:	sub	w3, w2, #0x10
    db44:	ldr	x13, [x0, #16]
    db48:	ldr	x9, [x0, #40]
    db4c:	add	x2, x9, #0x1
    db50:	str	x2, [x0, #40]
    db54:	strb	w1, [x13, x9]
    db58:	ldr	x9, [x0, #16]
    db5c:	ldr	x2, [x0, #40]
    db60:	ldrh	w1, [x0, #5936]
    db64:	add	x13, x2, #0x1
    db68:	str	x13, [x0, #40]
    db6c:	lsr	w1, w1, #8
    db70:	strb	w1, [x9, x2]
    db74:	ldr	w1, [x0, #5940]
    db78:	sub	w2, w8, w1
    db7c:	add	w3, w3, w1
    db80:	str	w3, [x0, #5940]
    db84:	asr	w2, w12, w2
    db88:	and	w9, w2, #0xffff
    db8c:	strh	w9, [x0, #5936]
    db90:	b	d6d8 <inflateCodesUsed@@ZLIB_1.2.9+0xca0>
    db94:	add	w3, w3, w9
    db98:	mov	w2, w6
    db9c:	str	w3, [x0, #5940]
    dba0:	b	d840 <inflateCodesUsed@@ZLIB_1.2.9+0xe08>
    dba4:	strh	w9, [x0, #5936]
    dba8:	sub	w3, w1, #0x10
    dbac:	ldr	x13, [x0, #16]
    dbb0:	ldr	x9, [x0, #40]
    dbb4:	add	x1, x9, #0x1
    dbb8:	str	x1, [x0, #40]
    dbbc:	strb	w2, [x13, x9]
    dbc0:	ldr	x9, [x0, #16]
    dbc4:	ldr	x2, [x0, #40]
    dbc8:	ldrh	w1, [x0, #5936]
    dbcc:	add	x13, x2, #0x1
    dbd0:	str	x13, [x0, #40]
    dbd4:	lsr	w1, w1, #8
    dbd8:	strb	w1, [x9, x2]
    dbdc:	ldr	w2, [x0, #5940]
    dbe0:	sub	w1, w8, w2
    dbe4:	add	w3, w3, w2
    dbe8:	str	w3, [x0, #5940]
    dbec:	asr	w1, w12, w1
    dbf0:	and	w9, w1, #0xffff
    dbf4:	strh	w9, [x0, #5936]
    dbf8:	b	d70c <inflateCodesUsed@@ZLIB_1.2.9+0xcd4>
    dbfc:	mov	w6, w2
    dc00:	b	d79c <inflateCodesUsed@@ZLIB_1.2.9+0xd64>
    dc04:	add	w3, w2, w3
    dc08:	strh	w11, [x0, #5936]
    dc0c:	str	w3, [x0, #5940]
    dc10:	b	d788 <inflateCodesUsed@@ZLIB_1.2.9+0xd50>
    dc14:	lsl	w9, w9, w3
    dc18:	add	w3, w11, w3
    dc1c:	orr	w1, w9, w1
    dc20:	str	w3, [x0, #5940]
    dc24:	cmp	w3, #0xd
    dc28:	sxth	w1, w1
    dc2c:	b.gt	d9d0 <inflateCodesUsed@@ZLIB_1.2.9+0xf98>
    dc30:	sub	w2, w2, #0x3
    dc34:	add	w6, w3, #0x3
    dc38:	b	da38 <inflateCodesUsed@@ZLIB_1.2.9+0x1000>
    dc3c:	sub	w2, w2, #0xb
    dc40:	add	w6, w3, #0x7
    dc44:	b	da38 <inflateCodesUsed@@ZLIB_1.2.9+0x1000>
    dc48:	add	w3, w11, w3
    dc4c:	str	w3, [x0, #5940]
    dc50:	b	dad0 <inflateCodesUsed@@ZLIB_1.2.9+0x1098>
    dc54:	nop
    dc58:	stp	x29, x30, [sp, #-16]!
    dc5c:	mov	x29, sp
    dc60:	ldr	w6, [x0, #5900]
    dc64:	ldrh	w5, [x0, #5936]
    dc68:	ldr	w7, [x0, #5940]
    dc6c:	sxth	w3, w5
    dc70:	cbz	w6, df00 <inflateCodesUsed@@ZLIB_1.2.9+0x14c8>
    dc74:	adrp	x10, 15000 <gzclose_w@@ZLIB_1.2.3.5+0x2c38>
    dc78:	add	x10, x10, #0xaa0
    dc7c:	add	x13, x10, #0x100
    dc80:	add	x12, x10, #0x400
    dc84:	add	x15, x10, #0x480
    dc88:	add	x11, x10, #0x200
    dc8c:	add	x14, x10, #0x180
    dc90:	mov	w8, #0x0                   	// #0
    dc94:	mov	w9, #0x10                  	// #16
    dc98:	b	dd2c <inflateCodesUsed@@ZLIB_1.2.9+0x12f4>
    dc9c:	ubfiz	x4, x4, #2, #8
    dca0:	add	x5, x1, x4
    dca4:	ldrh	w17, [x1, x4]
    dca8:	ldrh	w16, [x5, #2]
    dcac:	lsl	w4, w17, w7
    dcb0:	orr	w3, w3, w4
    dcb4:	sub	w4, w9, w16
    dcb8:	and	w5, w3, #0xffff
    dcbc:	cmp	w4, w7
    dcc0:	sxth	w3, w3
    dcc4:	b.ge	df8c <inflateCodesUsed@@ZLIB_1.2.9+0x1554>  // b.tcont
    dcc8:	ldr	x6, [x0, #16]
    dccc:	strh	w5, [x0, #5936]
    dcd0:	ldr	x4, [x0, #40]
    dcd4:	sub	w16, w16, #0x10
    dcd8:	add	x5, x4, #0x1
    dcdc:	str	x5, [x0, #40]
    dce0:	strb	w3, [x6, x4]
    dce4:	ldr	x5, [x0, #16]
    dce8:	ldr	x4, [x0, #40]
    dcec:	ldrh	w3, [x0, #5936]
    dcf0:	add	x6, x4, #0x1
    dcf4:	str	x6, [x0, #40]
    dcf8:	lsr	w3, w3, #8
    dcfc:	strb	w3, [x5, x4]
    dd00:	ldr	w7, [x0, #5940]
    dd04:	ldr	w6, [x0, #5900]
    dd08:	sub	w3, w9, w7
    dd0c:	add	w7, w16, w7
    dd10:	str	w7, [x0, #5940]
    dd14:	asr	w3, w17, w3
    dd18:	and	w5, w3, #0xffff
    dd1c:	sxth	w3, w3
    dd20:	strh	w5, [x0, #5936]
    dd24:	cmp	w6, w8
    dd28:	b.ls	df00 <inflateCodesUsed@@ZLIB_1.2.9+0x14c8>  // b.plast
    dd2c:	ldr	x16, [x0, #5904]
    dd30:	mov	w4, w8
    dd34:	ldr	x17, [x0, #5888]
    dd38:	sxth	w3, w5
    dd3c:	ldrh	w16, [x16, w8, uxtw #1]
    dd40:	add	w8, w8, #0x1
    dd44:	ldrb	w4, [x17, x4]
    dd48:	cbz	w16, dc9c <inflateCodesUsed@@ZLIB_1.2.9+0x1264>
    dd4c:	ldrb	w5, [x10, w4, sxtw]
    dd50:	add	w6, w5, #0x101
    dd54:	ubfiz	x6, x6, #2, #10
    dd58:	add	x18, x1, x6
    dd5c:	ldrh	w17, [x1, x6]
    dd60:	ldrh	w6, [x18, #2]
    dd64:	lsl	w18, w17, w7
    dd68:	orr	w3, w3, w18
    dd6c:	sub	w18, w9, w6
    dd70:	and	w30, w3, #0xffff
    dd74:	cmp	w18, w7
    dd78:	sxth	w3, w3
    dd7c:	b.ge	df80 <inflateCodesUsed@@ZLIB_1.2.9+0x1548>  // b.tcont
    dd80:	ldr	x18, [x0, #40]
    dd84:	sub	w7, w6, #0x10
    dd88:	strh	w30, [x0, #5936]
    dd8c:	add	x6, x18, #0x1
    dd90:	str	x6, [x0, #40]
    dd94:	ldr	x6, [x0, #16]
    dd98:	strb	w3, [x6, x18]
    dd9c:	ldr	x18, [x0, #16]
    dda0:	ldr	x6, [x0, #40]
    dda4:	ldrh	w3, [x0, #5936]
    dda8:	add	x30, x6, #0x1
    ddac:	str	x30, [x0, #40]
    ddb0:	lsr	w3, w3, #8
    ddb4:	strb	w3, [x18, x6]
    ddb8:	ldr	w6, [x0, #5940]
    ddbc:	sub	w3, w9, w6
    ddc0:	add	w7, w7, w6
    ddc4:	str	w7, [x0, #5940]
    ddc8:	asr	w3, w17, w3
    ddcc:	sxth	w3, w3
    ddd0:	ldr	w6, [x13, x5, lsl #2]
    ddd4:	cbz	w6, de50 <inflateCodesUsed@@ZLIB_1.2.9+0x1418>
    ddd8:	ldr	w5, [x14, x5, lsl #2]
    dddc:	sub	w17, w9, w6
    dde0:	cmp	w17, w7
    dde4:	sub	w4, w4, w5
    dde8:	and	w4, w4, #0xffff
    ddec:	lsl	w5, w4, w7
    ddf0:	orr	w3, w3, w5
    ddf4:	and	w5, w3, #0xffff
    ddf8:	sxth	w3, w3
    ddfc:	b.ge	e058 <inflateCodesUsed@@ZLIB_1.2.9+0x1620>  // b.tcont
    de00:	strh	w5, [x0, #5936]
    de04:	sub	w6, w6, #0x10
    de08:	ldr	x7, [x0, #16]
    de0c:	ldr	x5, [x0, #40]
    de10:	add	x17, x5, #0x1
    de14:	str	x17, [x0, #40]
    de18:	strb	w3, [x7, x5]
    de1c:	ldr	x7, [x0, #16]
    de20:	ldr	x5, [x0, #40]
    de24:	ldrh	w3, [x0, #5936]
    de28:	add	x17, x5, #0x1
    de2c:	str	x17, [x0, #40]
    de30:	lsr	w3, w3, #8
    de34:	strb	w3, [x7, x5]
    de38:	ldr	w7, [x0, #5940]
    de3c:	sub	w3, w9, w7
    de40:	add	w7, w6, w7
    de44:	str	w7, [x0, #5940]
    de48:	asr	w3, w4, w3
    de4c:	sxth	w3, w3
    de50:	sub	w4, w16, #0x1
    de54:	cmp	w4, #0xff
    de58:	b.hi	e034 <inflateCodesUsed@@ZLIB_1.2.9+0x15fc>  // b.pmore
    de5c:	ldrb	w6, [x11, w4, uxtw]
    de60:	ubfiz	x5, x6, #2, #8
    de64:	mov	w18, w6
    de68:	add	x6, x2, x5
    de6c:	ldrh	w17, [x2, x5]
    de70:	ldrh	w6, [x6, #2]
    de74:	lsl	w5, w17, w7
    de78:	orr	w3, w3, w5
    de7c:	sub	w16, w9, w6
    de80:	and	w5, w3, #0xffff
    de84:	cmp	w16, w7
    de88:	sxth	w3, w3
    de8c:	b.ge	e024 <inflateCodesUsed@@ZLIB_1.2.9+0x15ec>  // b.tcont
    de90:	strh	w5, [x0, #5936]
    de94:	sub	w7, w6, #0x10
    de98:	ldr	x16, [x0, #16]
    de9c:	ldr	x5, [x0, #40]
    dea0:	add	x6, x5, #0x1
    dea4:	str	x6, [x0, #40]
    dea8:	strb	w3, [x16, x5]
    deac:	ldr	x6, [x0, #16]
    deb0:	ldr	x5, [x0, #40]
    deb4:	ldrh	w3, [x0, #5936]
    deb8:	add	x16, x5, #0x1
    debc:	str	x16, [x0, #40]
    dec0:	lsr	w3, w3, #8
    dec4:	strb	w3, [x6, x5]
    dec8:	ldr	w5, [x0, #5940]
    decc:	sub	w3, w9, w5
    ded0:	add	w7, w7, w5
    ded4:	str	w7, [x0, #5940]
    ded8:	asr	w3, w17, w3
    dedc:	and	w5, w3, #0xffff
    dee0:	sxth	w3, w3
    dee4:	strh	w5, [x0, #5936]
    dee8:	ldr	w17, [x12, x18, lsl #2]
    deec:	cbnz	w17, df9c <inflateCodesUsed@@ZLIB_1.2.9+0x1564>
    def0:	ldr	w6, [x0, #5900]
    def4:	cmp	w6, w8
    def8:	b.hi	dd2c <inflateCodesUsed@@ZLIB_1.2.9+0x12f4>  // b.pmore
    defc:	nop
    df00:	ldrh	w2, [x1, #1024]
    df04:	mov	w4, #0x10                  	// #16
    df08:	ldrh	w1, [x1, #1026]
    df0c:	lsl	w5, w2, w7
    df10:	orr	w3, w3, w5
    df14:	sub	w6, w4, w1
    df18:	and	w5, w3, #0xffff
    df1c:	cmp	w6, w7
    df20:	sxth	w3, w3
    df24:	b.ge	e064 <inflateCodesUsed@@ZLIB_1.2.9+0x162c>  // b.tcont
    df28:	strh	w5, [x0, #5936]
    df2c:	sub	w1, w1, #0x10
    df30:	ldr	x6, [x0, #16]
    df34:	ldr	x5, [x0, #40]
    df38:	add	x7, x5, #0x1
    df3c:	str	x7, [x0, #40]
    df40:	strb	w3, [x6, x5]
    df44:	ldr	x6, [x0, #16]
    df48:	ldr	x5, [x0, #40]
    df4c:	ldrh	w3, [x0, #5936]
    df50:	add	x7, x5, #0x1
    df54:	str	x7, [x0, #40]
    df58:	lsr	w3, w3, #8
    df5c:	strb	w3, [x6, x5]
    df60:	ldr	w3, [x0, #5940]
    df64:	ldp	x29, x30, [sp], #16
    df68:	sub	w4, w4, w3
    df6c:	add	w1, w1, w3
    df70:	str	w1, [x0, #5940]
    df74:	asr	w2, w2, w4
    df78:	strh	w2, [x0, #5936]
    df7c:	ret
    df80:	add	w7, w6, w7
    df84:	str	w7, [x0, #5940]
    df88:	b	ddd0 <inflateCodesUsed@@ZLIB_1.2.9+0x1398>
    df8c:	add	w7, w7, w16
    df90:	strh	w5, [x0, #5936]
    df94:	str	w7, [x0, #5940]
    df98:	b	dd24 <inflateCodesUsed@@ZLIB_1.2.9+0x12ec>
    df9c:	ldr	w5, [x15, x18, lsl #2]
    dfa0:	sub	w6, w9, w17
    dfa4:	cmp	w6, w7
    dfa8:	sub	w4, w4, w5
    dfac:	and	w4, w4, #0xffff
    dfb0:	lsl	w5, w4, w7
    dfb4:	orr	w3, w3, w5
    dfb8:	and	w5, w3, #0xffff
    dfbc:	sxth	w3, w3
    dfc0:	b.ge	e044 <inflateCodesUsed@@ZLIB_1.2.9+0x160c>  // b.tcont
    dfc4:	strh	w5, [x0, #5936]
    dfc8:	sub	w17, w17, #0x10
    dfcc:	ldr	x6, [x0, #16]
    dfd0:	ldr	x5, [x0, #40]
    dfd4:	add	x7, x5, #0x1
    dfd8:	str	x7, [x0, #40]
    dfdc:	strb	w3, [x6, x5]
    dfe0:	ldr	x6, [x0, #16]
    dfe4:	ldr	x5, [x0, #40]
    dfe8:	ldrh	w3, [x0, #5936]
    dfec:	add	x7, x5, #0x1
    dff0:	str	x7, [x0, #40]
    dff4:	lsr	w3, w3, #8
    dff8:	strb	w3, [x6, x5]
    dffc:	ldr	w7, [x0, #5940]
    e000:	ldr	w6, [x0, #5900]
    e004:	sub	w3, w9, w7
    e008:	add	w7, w17, w7
    e00c:	str	w7, [x0, #5940]
    e010:	asr	w4, w4, w3
    e014:	and	w5, w4, #0xffff
    e018:	sxth	w3, w4
    e01c:	strh	w5, [x0, #5936]
    e020:	b	dd24 <inflateCodesUsed@@ZLIB_1.2.9+0x12ec>
    e024:	add	w7, w6, w7
    e028:	strh	w5, [x0, #5936]
    e02c:	str	w7, [x0, #5940]
    e030:	b	dee8 <inflateCodesUsed@@ZLIB_1.2.9+0x14b0>
    e034:	lsr	w5, w4, #7
    e038:	add	w5, w5, #0x100
    e03c:	ldrb	w6, [x11, w5, uxtw]
    e040:	b	de60 <inflateCodesUsed@@ZLIB_1.2.9+0x1428>
    e044:	add	w7, w7, w17
    e048:	ldr	w6, [x0, #5900]
    e04c:	strh	w5, [x0, #5936]
    e050:	str	w7, [x0, #5940]
    e054:	b	dd24 <inflateCodesUsed@@ZLIB_1.2.9+0x12ec>
    e058:	add	w7, w7, w6
    e05c:	str	w7, [x0, #5940]
    e060:	b	de50 <inflateCodesUsed@@ZLIB_1.2.9+0x1418>
    e064:	add	w7, w1, w7
    e068:	strh	w5, [x0, #5936]
    e06c:	ldp	x29, x30, [sp], #16
    e070:	str	w7, [x0, #5940]
    e074:	ret
    e078:	ldr	w8, [x0, #5300]
    e07c:	ldr	w14, [x0, #3012]
    e080:	cmp	w8, #0x1
    e084:	b.le	e164 <inflateCodesUsed@@ZLIB_1.2.9+0x172c>
    e088:	sbfiz	x2, x14, #2, #32
    e08c:	add	x13, x0, w14, sxtw
    e090:	add	x13, x13, #0x1, lsl #12
    e094:	mov	w4, #0x1                   	// #1
    e098:	mov	w5, #0x2                   	// #2
    e09c:	ldrh	w11, [x1, x2]
    e0a0:	b	e0bc <inflateCodesUsed@@ZLIB_1.2.9+0x1684>
    e0a4:	add	x4, x0, w4, sxtw #2
    e0a8:	cmp	w8, w2, lsl #1
    e0ac:	lsl	w5, w2, #1
    e0b0:	str	w3, [x4, #3008]
    e0b4:	mov	w4, w2
    e0b8:	b.lt	e124 <inflateCodesUsed@@ZLIB_1.2.9+0x16ec>  // b.tstop
    e0bc:	add	x7, x0, w5, sxtw #2
    e0c0:	mov	w2, w5
    e0c4:	cmp	w5, w8
    e0c8:	ldr	w3, [x7, #3008]
    e0cc:	sbfiz	x6, x3, #2, #32
    e0d0:	sxtw	x9, w3
    e0d4:	ldrh	w6, [x1, x6]
    e0d8:	b.ge	e100 <inflateCodesUsed@@ZLIB_1.2.9+0x16c8>  // b.tcont
    e0dc:	ldr	w7, [x7, #3012]
    e0e0:	add	w2, w5, #0x1
    e0e4:	sbfiz	x10, x7, #2, #32
    e0e8:	sxtw	x12, w7
    e0ec:	ldrh	w10, [x1, x10]
    e0f0:	cmp	w10, w6
    e0f4:	b.cc	e130 <inflateCodesUsed@@ZLIB_1.2.9+0x16f8>  // b.lo, b.ul, b.last
    e0f8:	b.eq	e13c <inflateCodesUsed@@ZLIB_1.2.9+0x1704>  // b.none
    e0fc:	mov	w2, w5
    e100:	cmp	w11, w6
    e104:	b.cc	e124 <inflateCodesUsed@@ZLIB_1.2.9+0x16ec>  // b.lo, b.ul, b.last
    e108:	b.ne	e0a4 <inflateCodesUsed@@ZLIB_1.2.9+0x166c>  // b.any
    e10c:	add	x5, x0, w3, sxtw
    e110:	ldrb	w6, [x13, #1212]
    e114:	add	x5, x5, #0x1, lsl #12
    e118:	ldrb	w5, [x5, #1212]
    e11c:	cmp	w6, w5
    e120:	b.hi	e0a4 <inflateCodesUsed@@ZLIB_1.2.9+0x166c>  // b.pmore
    e124:	add	x4, x0, w4, sxtw #2
    e128:	str	w14, [x4, #3008]
    e12c:	ret
    e130:	mov	w6, w10
    e134:	mov	w3, w7
    e138:	b	e100 <inflateCodesUsed@@ZLIB_1.2.9+0x16c8>
    e13c:	add	x12, x0, x12
    e140:	add	x9, x0, x9
    e144:	add	x12, x12, #0x1, lsl #12
    e148:	add	x9, x9, #0x1, lsl #12
    e14c:	ldrb	w10, [x12, #1212]
    e150:	ldrb	w9, [x9, #1212]
    e154:	cmp	w10, w9
    e158:	csel	w3, w3, w7, hi  // hi = pmore
    e15c:	csel	w2, w5, w2, hi  // hi = pmore
    e160:	b	e100 <inflateCodesUsed@@ZLIB_1.2.9+0x16c8>
    e164:	mov	w4, #0x1                   	// #1
    e168:	b	e124 <inflateCodesUsed@@ZLIB_1.2.9+0x16ec>
    e16c:	nop
    e170:	mov	x18, x1
    e174:	stp	x29, x30, [sp, #-112]!
    e178:	adrp	x1, 15000 <gzclose_w@@ZLIB_1.2.3.5+0x2c38>
    e17c:	mov	x29, sp
    e180:	ldr	x2, [x18, #16]
    e184:	mov	x5, #0x1400                	// #5120
    e188:	ldr	d0, [x1, #2704]
    e18c:	add	x3, x0, x5
    e190:	stp	x19, x20, [sp, #16]
    e194:	stp	x21, x22, [sp, #32]
    e198:	ldr	w22, [x2, #20]
    e19c:	ldr	x1, [x18]
    e1a0:	cmp	w22, #0x0
    e1a4:	ldr	x6, [x2]
    e1a8:	stur	d0, [x3, #180]
    e1ac:	b.le	ea48 <inflateCodesUsed@@ZLIB_1.2.9+0x2010>
    e1b0:	mov	x4, #0x14bc                	// #5308
    e1b4:	mov	x3, x1
    e1b8:	add	x15, x0, x4
    e1bc:	mov	x2, #0x0                   	// #0
    e1c0:	mov	w8, #0x0                   	// #0
    e1c4:	mov	w19, #0xffffffff            	// #-1
    e1c8:	b	e1f4 <inflateCodesUsed@@ZLIB_1.2.9+0x17bc>
    e1cc:	add	w8, w8, #0x1
    e1d0:	str	w8, [x0, #5300]
    e1d4:	mov	w19, w2
    e1d8:	add	x3, x3, #0x4
    e1dc:	add	x4, x0, w8, sxtw #2
    e1e0:	str	w2, [x4, #3008]
    e1e4:	strb	wzr, [x15, x2]
    e1e8:	add	x2, x2, #0x1
    e1ec:	cmp	w22, w2
    e1f0:	b.le	e210 <inflateCodesUsed@@ZLIB_1.2.9+0x17d8>
    e1f4:	ldrh	w4, [x3]
    e1f8:	cbnz	w4, e1cc <inflateCodesUsed@@ZLIB_1.2.9+0x1794>
    e1fc:	strh	wzr, [x3, #2]
    e200:	add	x2, x2, #0x1
    e204:	add	x3, x3, #0x4
    e208:	cmp	w22, w2
    e20c:	b.gt	e1f4 <inflateCodesUsed@@ZLIB_1.2.9+0x17bc>
    e210:	cmp	w8, #0x1
    e214:	b.gt	e290 <inflateCodesUsed@@ZLIB_1.2.9+0x1858>
    e218:	sxtw	x2, w8
    e21c:	add	x5, x0, #0xbc4
    e220:	ldr	x12, [x0, #5912]
    e224:	cbz	x6, e98c <inflateCodesUsed@@ZLIB_1.2.9+0x1f54>
    e228:	ldr	x3, [x0, #5920]
    e22c:	add	x11, x0, #0x1, lsl #12
    e230:	mov	w9, #0x1                   	// #1
    e234:	nop
    e238:	cmp	w19, #0x1
    e23c:	b.le	e6b8 <inflateCodesUsed@@ZLIB_1.2.9+0x1c80>
    e240:	str	wzr, [x5, x2, lsl #2]
    e244:	add	x2, x2, #0x1
    e248:	strh	w9, [x1]
    e24c:	cmp	w2, #0x1
    e250:	strb	wzr, [x11, #1212]
    e254:	ldrh	w4, [x6, #2]
    e258:	sub	x3, x3, x4
    e25c:	b.le	e238 <inflateCodesUsed@@ZLIB_1.2.9+0x1800>
    e260:	cmp	w8, #0x1
    e264:	mov	w2, #0x1                   	// #1
    e268:	sub	w2, w2, w8
    e26c:	sub	x12, x12, #0x1
    e270:	csel	w4, w2, wzr, le
    e274:	add	w8, w8, #0x1
    e278:	csneg	x2, xzr, x2, gt
    e27c:	add	w8, w4, w8
    e280:	add	x2, x2, x12
    e284:	str	x3, [x0, #5920]
    e288:	str	w8, [x0, #5300]
    e28c:	str	x2, [x0, #5912]
    e290:	asr	w9, w8, #1
    e294:	add	x20, x0, #0xbc0
    e298:	str	w19, [x18, #8]
    e29c:	sxtw	x11, w9
    e2a0:	lsl	w9, w9, #1
    e2a4:	nop
    e2a8:	ldr	w13, [x20, x11, lsl #2]
    e2ac:	cmp	w8, w9
    e2b0:	mov	w7, w11
    e2b4:	mov	w2, w9
    e2b8:	b.lt	e378 <inflateCodesUsed@@ZLIB_1.2.9+0x1940>  // b.tstop
    e2bc:	sbfiz	x3, x13, #2, #32
    e2c0:	add	x12, x0, w13, sxtw
    e2c4:	add	x12, x12, #0x1, lsl #12
    e2c8:	ldrh	w16, [x1, x3]
    e2cc:	b	e2e8 <inflateCodesUsed@@ZLIB_1.2.9+0x18b0>
    e2d0:	str	w6, [x3, #3008]
    e2d4:	mov	w7, w2
    e2d8:	cmp	w8, w2, lsl #1
    e2dc:	lsl	w3, w2, #1
    e2e0:	b.lt	e378 <inflateCodesUsed@@ZLIB_1.2.9+0x1940>  // b.tstop
    e2e4:	mov	w2, w3
    e2e8:	add	x3, x0, w2, sxtw #2
    e2ec:	cmp	w8, w2
    e2f0:	add	w17, w2, #0x1
    e2f4:	ldr	w6, [x3, #3008]
    e2f8:	sbfiz	x5, x6, #2, #32
    e2fc:	sxtw	x4, w6
    e300:	ldrh	w10, [x1, x5]
    e304:	b.le	e350 <inflateCodesUsed@@ZLIB_1.2.9+0x1918>
    e308:	ldr	w3, [x3, #3012]
    e30c:	sbfiz	x14, x3, #2, #32
    e310:	sxtw	x5, w3
    e314:	ldrh	w14, [x1, x14]
    e318:	cmp	w14, w10
    e31c:	b.cc	e6a8 <inflateCodesUsed@@ZLIB_1.2.9+0x1c70>  // b.lo, b.ul, b.last
    e320:	b.ne	e350 <inflateCodesUsed@@ZLIB_1.2.9+0x1918>  // b.any
    e324:	add	x5, x0, x5
    e328:	add	x4, x0, x4
    e32c:	add	x5, x5, #0x1, lsl #12
    e330:	add	x4, x4, #0x1, lsl #12
    e334:	ldrb	w5, [x5, #1212]
    e338:	ldrb	w4, [x4, #1212]
    e33c:	cmp	w5, w4
    e340:	csel	w3, w6, w3, hi  // hi = pmore
    e344:	csel	w2, w2, w17, hi  // hi = pmore
    e348:	mov	w6, w3
    e34c:	nop
    e350:	add	x3, x0, w7, sxtw #2
    e354:	cmp	w16, w10
    e358:	b.cc	e378 <inflateCodesUsed@@ZLIB_1.2.9+0x1940>  // b.lo, b.ul, b.last
    e35c:	b.ne	e2d0 <inflateCodesUsed@@ZLIB_1.2.9+0x1898>  // b.any
    e360:	add	x4, x0, w6, sxtw
    e364:	ldrb	w5, [x12, #1212]
    e368:	add	x4, x4, #0x1, lsl #12
    e36c:	ldrb	w4, [x4, #1212]
    e370:	cmp	w5, w4
    e374:	b.hi	e2d0 <inflateCodesUsed@@ZLIB_1.2.9+0x1898>  // b.pmore
    e378:	add	x2, x0, w7, sxtw #2
    e37c:	sub	x11, x11, #0x1
    e380:	subs	w9, w9, #0x2
    e384:	str	w13, [x2, #3008]
    e388:	b.ne	e2a8 <inflateCodesUsed@@ZLIB_1.2.9+0x1870>  // b.any
    e38c:	ldr	w2, [x0, #5300]
    e390:	sxtw	x22, w22
    e394:	nop
    e398:	add	x3, x0, w2, sxtw #2
    e39c:	sub	w2, w2, #0x1
    e3a0:	str	w2, [x0, #5300]
    e3a4:	ldr	w21, [x0, #3012]
    e3a8:	ldr	w2, [x3, #3008]
    e3ac:	str	w2, [x0, #3012]
    e3b0:	bl	e078 <inflateCodesUsed@@ZLIB_1.2.9+0x1640>
    e3b4:	ldr	w2, [x0, #5304]
    e3b8:	ldr	w5, [x0, #3012]
    e3bc:	sbfiz	x6, x21, #2, #32
    e3c0:	sub	w8, w2, #0x2
    e3c4:	lsl	x10, x22, #2
    e3c8:	add	x2, x0, w2, sxtw #2
    e3cc:	add	x4, x0, w21, sxtw
    e3d0:	sbfiz	x7, x5, #2, #32
    e3d4:	add	x3, x0, w5, sxtw
    e3d8:	add	x9, x1, x7
    e3dc:	add	x4, x4, #0x1, lsl #12
    e3e0:	str	w21, [x2, #3004]
    e3e4:	add	x3, x3, #0x1, lsl #12
    e3e8:	str	w8, [x0, #5304]
    e3ec:	add	x8, x1, x6
    e3f0:	str	w5, [x2, #3000]
    e3f4:	and	w5, w22, #0xffff
    e3f8:	ldrh	w2, [x1, x6]
    e3fc:	ldrh	w7, [x1, x7]
    e400:	add	w2, w2, w7
    e404:	strh	w2, [x1, x10]
    e408:	ldrb	w6, [x4, #1212]
    e40c:	ldrb	w4, [x3, #1212]
    e410:	add	w3, w6, #0x1
    e414:	add	w2, w4, #0x1
    e418:	cmp	w6, w4
    e41c:	and	w3, w3, #0xff
    e420:	and	w2, w2, #0xff
    e424:	csel	w2, w2, w3, cc  // cc = lo, ul, last
    e428:	strb	w2, [x15, x22]
    e42c:	strh	w5, [x9, #2]
    e430:	strh	w5, [x8, #2]
    e434:	str	w22, [x0, #3012]
    e438:	add	x22, x22, #0x1
    e43c:	bl	e078 <inflateCodesUsed@@ZLIB_1.2.9+0x1640>
    e440:	ldr	w2, [x0, #5300]
    e444:	cmp	w2, #0x1
    e448:	b.gt	e398 <inflateCodesUsed@@ZLIB_1.2.9+0x1960>
    e44c:	ldr	w3, [x0, #5304]
    e450:	add	x10, x0, #0xba0
    e454:	ldr	x7, [x18]
    e458:	sub	w2, w3, #0x1
    e45c:	ldr	w4, [x0, #3012]
    e460:	cmp	w3, #0x23c
    e464:	ldr	w11, [x18, #8]
    e468:	add	x6, x0, w2, sxtw #2
    e46c:	str	w2, [x0, #5304]
    e470:	ldr	x2, [x18, #16]
    e474:	add	x5, x7, w4, sxtw #2
    e478:	ldr	w13, [x2, #16]
    e47c:	ldp	x17, x14, [x2]
    e480:	str	w4, [x6, #3008]
    e484:	ldr	w6, [x2, #24]
    e488:	stp	xzr, xzr, [x10]
    e48c:	stp	xzr, xzr, [x10, #16]
    e490:	strh	wzr, [x5, #2]
    e494:	b.gt	e6f8 <inflateCodesUsed@@ZLIB_1.2.9+0x1cc0>
    e498:	mov	x2, #0x1800                	// #6144
    e49c:	sxtw	x22, w3
    e4a0:	add	x16, x0, x2
    e4a4:	mov	w9, #0x0                   	// #0
    e4a8:	cbz	x17, e908 <inflateCodesUsed@@ZLIB_1.2.9+0x1ed0>
    e4ac:	nop
    e4b0:	ldr	w4, [x20, x22, lsl #2]
    e4b4:	mov	w15, #0x0                   	// #0
    e4b8:	add	x22, x22, #0x1
    e4bc:	sbfiz	x5, x4, #2, #32
    e4c0:	add	x8, x7, x5
    e4c4:	add	x18, x17, x5
    e4c8:	ldrh	w2, [x8, #2]
    e4cc:	add	x2, x7, x2, lsl #2
    e4d0:	ldrh	w2, [x2, #2]
    e4d4:	add	w2, w2, #0x1
    e4d8:	cmp	w6, w2
    e4dc:	b.ge	e4e8 <inflateCodesUsed@@ZLIB_1.2.9+0x1ab0>  // b.tcont
    e4e0:	add	w9, w9, #0x1
    e4e4:	mov	w2, w6
    e4e8:	strh	w2, [x8, #2]
    e4ec:	cmp	w11, w4
    e4f0:	add	x12, x0, w2, sxtw #1
    e4f4:	b.lt	e544 <inflateCodesUsed@@ZLIB_1.2.9+0x1b0c>  // b.tstop
    e4f8:	ldrh	w8, [x12, #2976]
    e4fc:	sub	w21, w4, w13
    e500:	cmp	w13, w4
    e504:	add	w8, w8, #0x1
    e508:	strh	w8, [x12, #2976]
    e50c:	b.gt	e518 <inflateCodesUsed@@ZLIB_1.2.9+0x1ae0>
    e510:	ldr	w15, [x14, w21, sxtw #2]
    e514:	add	w2, w2, w15
    e518:	ldrh	w5, [x7, x5]
    e51c:	ldrh	w4, [x18, #2]
    e520:	ldur	q1, [x16, #-232]
    e524:	add	w4, w4, w15
    e528:	umull	x2, w2, w5
    e52c:	fmov	d0, x2
    e530:	umull	x4, w4, w5
    e534:	mov	v0.d[1], x3
    e538:	mov	v0.d[1], x4
    e53c:	add	v0.2d, v0.2d, v1.2d
    e540:	stur	q0, [x16, #-232]
    e544:	cmp	w22, #0x23c
    e548:	b.le	e4b0 <inflateCodesUsed@@ZLIB_1.2.9+0x1a78>
    e54c:	cbz	w9, e6f8 <inflateCodesUsed@@ZLIB_1.2.9+0x1cc0>
    e550:	sub	w15, w9, #0x1
    e554:	sub	w13, w6, #0x1
    e558:	and	w15, w15, #0xfffffffe
    e55c:	sub	w9, w9, #0x2
    e560:	sub	w15, w9, w15
    e564:	add	x5, x0, w13, sxtw #1
    e568:	sxtw	x14, w6
    e56c:	sub	w16, w6, #0x2
    e570:	sub	w17, w6, #0x3
    e574:	sub	w18, w6, #0x4
    e578:	sub	w21, w6, #0x5
    e57c:	sub	w22, w6, #0x6
    e580:	sub	w30, w6, #0x8
    e584:	stp	x23, x24, [sp, #48]
    e588:	sub	w23, w6, #0xa
    e58c:	sub	w24, w6, #0xc
    e590:	str	x25, [sp, #64]
    e594:	b	e68c <inflateCodesUsed@@ZLIB_1.2.9+0x1c54>
    e598:	ldrh	w2, [x5, #2974]
    e59c:	mov	w4, w16
    e5a0:	cbnz	w2, e8dc <inflateCodesUsed@@ZLIB_1.2.9+0x1ea4>
    e5a4:	ldrh	w2, [x5, #2972]
    e5a8:	mov	w3, w17
    e5ac:	cbnz	w2, e8e4 <inflateCodesUsed@@ZLIB_1.2.9+0x1eac>
    e5b0:	ldrh	w2, [x5, #2970]
    e5b4:	mov	w4, w18
    e5b8:	cbnz	w2, e658 <inflateCodesUsed@@ZLIB_1.2.9+0x1c20>
    e5bc:	ldrh	w2, [x5, #2968]
    e5c0:	mov	w3, w21
    e5c4:	cbnz	w2, e8f0 <inflateCodesUsed@@ZLIB_1.2.9+0x1eb8>
    e5c8:	ldrh	w2, [x5, #2966]
    e5cc:	mov	w4, w22
    e5d0:	cbnz	w2, e658 <inflateCodesUsed@@ZLIB_1.2.9+0x1c20>
    e5d4:	ldrh	w2, [x5, #2964]
    e5d8:	sub	w3, w6, #0x7
    e5dc:	cbnz	w2, e8fc <inflateCodesUsed@@ZLIB_1.2.9+0x1ec4>
    e5e0:	ldrh	w2, [x5, #2962]
    e5e4:	mov	w4, w30
    e5e8:	cbnz	w2, e658 <inflateCodesUsed@@ZLIB_1.2.9+0x1c20>
    e5ec:	ldrh	w2, [x5, #2960]
    e5f0:	sub	w3, w6, #0x9
    e5f4:	cbnz	w2, ea0c <inflateCodesUsed@@ZLIB_1.2.9+0x1fd4>
    e5f8:	ldrh	w2, [x5, #2958]
    e5fc:	mov	w4, w23
    e600:	cbnz	w2, e658 <inflateCodesUsed@@ZLIB_1.2.9+0x1c20>
    e604:	ldrh	w2, [x5, #2956]
    e608:	sub	w3, w6, #0xb
    e60c:	cbnz	w2, ea18 <inflateCodesUsed@@ZLIB_1.2.9+0x1fe0>
    e610:	ldrh	w2, [x5, #2954]
    e614:	mov	w4, w24
    e618:	cbnz	w2, e658 <inflateCodesUsed@@ZLIB_1.2.9+0x1c20>
    e61c:	ldrh	w2, [x5, #2952]
    e620:	sub	w3, w6, #0xd
    e624:	cbnz	w2, ea24 <inflateCodesUsed@@ZLIB_1.2.9+0x1fec>
    e628:	ldrh	w2, [x5, #2950]
    e62c:	sub	w4, w6, #0xe
    e630:	cbnz	w2, e658 <inflateCodesUsed@@ZLIB_1.2.9+0x1c20>
    e634:	ldrh	w2, [x5, #2948]
    e638:	sub	w25, w6, #0xf
    e63c:	cbnz	w2, ea30 <inflateCodesUsed@@ZLIB_1.2.9+0x1ff8>
    e640:	ldrh	w2, [x5, #2946]
    e644:	sub	w3, w6, #0x10
    e648:	cbnz	w2, ea3c <inflateCodesUsed@@ZLIB_1.2.9+0x2004>
    e64c:	ldrh	w2, [x5, #2944]
    e650:	sub	w4, w6, #0x11
    e654:	nop
    e658:	add	x4, x0, w4, sxtw #1
    e65c:	add	x3, x0, w3, sxtw #1
    e660:	sub	w2, w2, #0x1
    e664:	cmp	w9, w15
    e668:	strh	w2, [x4, #2976]
    e66c:	ldrh	w2, [x3, #2976]
    e670:	add	w2, w2, #0x2
    e674:	strh	w2, [x3, #2976]
    e678:	ldrh	w2, [x12, #2976]
    e67c:	sub	w2, w2, #0x1
    e680:	strh	w2, [x12, #2976]
    e684:	b.eq	e860 <inflateCodesUsed@@ZLIB_1.2.9+0x1e28>  // b.none
    e688:	sub	w9, w9, #0x2
    e68c:	add	x12, x0, x14, lsl #1
    e690:	mov	x8, x14
    e694:	ldrh	w2, [x12, #2974]
    e698:	cbz	w2, e598 <inflateCodesUsed@@ZLIB_1.2.9+0x1b60>
    e69c:	mov	w3, w6
    e6a0:	mov	w4, w13
    e6a4:	b	e658 <inflateCodesUsed@@ZLIB_1.2.9+0x1c20>
    e6a8:	mov	w10, w14
    e6ac:	mov	w6, w3
    e6b0:	mov	w2, w17
    e6b4:	b	e350 <inflateCodesUsed@@ZLIB_1.2.9+0x1918>
    e6b8:	add	w19, w19, #0x1
    e6bc:	str	w19, [x5, x2, lsl #2]
    e6c0:	add	x2, x2, #0x1
    e6c4:	sbfiz	x7, x19, #2, #32
    e6c8:	add	x4, x0, w19, sxtw
    e6cc:	add	x4, x4, #0x1, lsl #12
    e6d0:	add	x10, x6, x7
    e6d4:	cmp	w2, #0x1
    e6d8:	strh	w9, [x1, x7]
    e6dc:	strb	wzr, [x4, #1212]
    e6e0:	ldrh	w4, [x10, #2]
    e6e4:	sub	x3, x3, x4
    e6e8:	b.le	e238 <inflateCodesUsed@@ZLIB_1.2.9+0x1800>
    e6ec:	b	e260 <inflateCodesUsed@@ZLIB_1.2.9+0x1828>
    e6f0:	ldp	x23, x24, [sp, #48]
    e6f4:	ldr	x25, [sp, #64]
    e6f8:	cmn	w19, #0x1
    e6fc:	ldrh	w16, [x0, #2976]
    e700:	ldrh	w15, [x0, #2978]
    e704:	ldrh	w14, [x0, #2980]
    e708:	lsl	w16, w16, #1
    e70c:	ldrh	w13, [x0, #2982]
    e710:	add	w15, w15, w16
    e714:	ldrh	w12, [x0, #2984]
    e718:	ldrh	w10, [x0, #2986]
    e71c:	lsl	w15, w15, #1
    e720:	ldrh	w9, [x0, #2988]
    e724:	add	w14, w14, w15
    e728:	ldrh	w8, [x0, #2990]
    e72c:	ldrh	w7, [x0, #2992]
    e730:	lsl	w14, w14, #1
    e734:	ldrh	w6, [x0, #2994]
    e738:	add	w13, w13, w14
    e73c:	ldrh	w5, [x0, #2996]
    e740:	ldrh	w4, [x0, #2998]
    e744:	lsl	w13, w13, #1
    e748:	ldrh	w3, [x0, #3000]
    e74c:	add	w12, w12, w13
    e750:	ldrh	w2, [x0, #3002]
    e754:	ldrh	w11, [x0, #3004]
    e758:	lsl	w12, w12, #1
    e75c:	strh	w16, [sp, #82]
    e760:	add	w10, w10, w12
    e764:	strh	w15, [sp, #84]
    e768:	strh	w14, [sp, #86]
    e76c:	lsl	w10, w10, #1
    e770:	strh	w13, [sp, #88]
    e774:	add	w0, w9, w10
    e778:	strh	w12, [sp, #90]
    e77c:	strh	w10, [sp, #92]
    e780:	lsl	w0, w0, #1
    e784:	strh	w0, [sp, #94]
    e788:	add	w0, w8, w0
    e78c:	lsl	w0, w0, #1
    e790:	strh	w0, [sp, #96]
    e794:	add	w0, w7, w0
    e798:	lsl	w0, w0, #1
    e79c:	strh	w0, [sp, #98]
    e7a0:	add	w0, w6, w0
    e7a4:	lsl	w0, w0, #1
    e7a8:	strh	w0, [sp, #100]
    e7ac:	add	w0, w5, w0
    e7b0:	lsl	w0, w0, #1
    e7b4:	strh	w0, [sp, #102]
    e7b8:	add	w0, w4, w0
    e7bc:	lsl	w0, w0, #1
    e7c0:	strh	w0, [sp, #104]
    e7c4:	add	w0, w3, w0
    e7c8:	lsl	w0, w0, #1
    e7cc:	strh	w0, [sp, #106]
    e7d0:	add	w0, w2, w0
    e7d4:	lsl	w0, w0, #1
    e7d8:	strh	w0, [sp, #108]
    e7dc:	add	w0, w11, w0
    e7e0:	lsl	w0, w0, #1
    e7e4:	strh	w0, [sp, #110]
    e7e8:	b.eq	e850 <inflateCodesUsed@@ZLIB_1.2.9+0x1e18>  // b.none
    e7ec:	add	x0, x1, #0x4
    e7f0:	add	x6, sp, #0x50
    e7f4:	add	x19, x0, w19, sxtw #2
    e7f8:	b	e808 <inflateCodesUsed@@ZLIB_1.2.9+0x1dd0>
    e7fc:	add	x1, x1, #0x4
    e800:	cmp	x19, x1
    e804:	b.eq	e850 <inflateCodesUsed@@ZLIB_1.2.9+0x1e18>  // b.none
    e808:	ldrh	w0, [x1, #2]
    e80c:	cbz	w0, e7fc <inflateCodesUsed@@ZLIB_1.2.9+0x1dc4>
    e810:	sbfiz	x2, x0, #1, #32
    e814:	mov	w4, #0x0                   	// #0
    e818:	ldrh	w5, [x6, x2]
    e81c:	mov	w3, w5
    e820:	add	w5, w5, #0x1
    e824:	strh	w5, [x6, x2]
    e828:	and	w2, w3, #0x1
    e82c:	subs	w0, w0, #0x1
    e830:	orr	w2, w2, w4
    e834:	lsr	w3, w3, #1
    e838:	lsl	w4, w2, #1
    e83c:	b.ne	e828 <inflateCodesUsed@@ZLIB_1.2.9+0x1df0>  // b.any
    e840:	strh	w2, [x1]
    e844:	add	x1, x1, #0x4
    e848:	cmp	x19, x1
    e84c:	b.ne	e808 <inflateCodesUsed@@ZLIB_1.2.9+0x1dd0>  // b.any
    e850:	ldp	x19, x20, [sp, #16]
    e854:	ldp	x21, x22, [sp, #32]
    e858:	ldp	x29, x30, [sp], #112
    e85c:	ret
    e860:	cbz	w6, e6f0 <inflateCodesUsed@@ZLIB_1.2.9+0x1cb8>
    e864:	mov	w12, #0x23d                 	// #573
    e868:	ldrh	w5, [x10, x8, lsl #1]
    e86c:	cbz	w5, e8c0 <inflateCodesUsed@@ZLIB_1.2.9+0x1e88>
    e870:	sub	w3, w12, #0x1
    e874:	sxtw	x3, w3
    e878:	ldr	w4, [x20, x3, lsl #2]
    e87c:	mov	w12, w3
    e880:	cmp	w11, w4
    e884:	b.lt	e8d4 <inflateCodesUsed@@ZLIB_1.2.9+0x1e9c>  // b.tstop
    e888:	sbfiz	x4, x4, #2, #32
    e88c:	sub	x3, x3, #0x1
    e890:	add	x9, x7, x4
    e894:	ldrh	w2, [x9, #2]
    e898:	cmp	w2, w6
    e89c:	b.eq	e8b8 <inflateCodesUsed@@ZLIB_1.2.9+0x1e80>  // b.none
    e8a0:	ldrh	w14, [x7, x4]
    e8a4:	sub	x2, x8, w2, uxth
    e8a8:	ldr	x4, [x0, #5912]
    e8ac:	madd	x2, x2, x14, x4
    e8b0:	str	x2, [x0, #5912]
    e8b4:	strh	w6, [x9, #2]
    e8b8:	subs	w5, w5, #0x1
    e8bc:	b.ne	e878 <inflateCodesUsed@@ZLIB_1.2.9+0x1e40>  // b.any
    e8c0:	sub	x8, x8, #0x1
    e8c4:	mov	w6, w13
    e8c8:	cbz	w13, e6f0 <inflateCodesUsed@@ZLIB_1.2.9+0x1cb8>
    e8cc:	sub	w13, w13, #0x1
    e8d0:	b	e868 <inflateCodesUsed@@ZLIB_1.2.9+0x1e30>
    e8d4:	sub	x3, x3, #0x1
    e8d8:	b	e878 <inflateCodesUsed@@ZLIB_1.2.9+0x1e40>
    e8dc:	mov	w3, w13
    e8e0:	b	e658 <inflateCodesUsed@@ZLIB_1.2.9+0x1c20>
    e8e4:	mov	w4, w17
    e8e8:	mov	w3, w16
    e8ec:	b	e658 <inflateCodesUsed@@ZLIB_1.2.9+0x1c20>
    e8f0:	mov	w4, w21
    e8f4:	mov	w3, w18
    e8f8:	b	e658 <inflateCodesUsed@@ZLIB_1.2.9+0x1c20>
    e8fc:	mov	w4, w3
    e900:	mov	w3, w22
    e904:	b	e658 <inflateCodesUsed@@ZLIB_1.2.9+0x1c20>
    e908:	mov	x3, x22
    e90c:	nop
    e910:	ldr	w4, [x20, x3, lsl #2]
    e914:	sbfiz	x8, x4, #2, #32
    e918:	add	x5, x7, x8
    e91c:	ldrh	w2, [x5, #2]
    e920:	add	x2, x7, x2, lsl #2
    e924:	ldrh	w2, [x2, #2]
    e928:	add	w2, w2, #0x1
    e92c:	cmp	w6, w2
    e930:	b.ge	e93c <inflateCodesUsed@@ZLIB_1.2.9+0x1f04>  // b.tcont
    e934:	add	w9, w9, #0x1
    e938:	mov	w2, w6
    e93c:	strh	w2, [x5, #2]
    e940:	cmp	w11, w4
    e944:	add	x5, x0, w2, sxtw #1
    e948:	b.lt	e97c <inflateCodesUsed@@ZLIB_1.2.9+0x1f44>  // b.tstop
    e94c:	sub	w12, w4, w13
    e950:	cmp	w13, w4
    e954:	ldrh	w4, [x5, #2976]
    e958:	add	w4, w4, #0x1
    e95c:	strh	w4, [x5, #2976]
    e960:	b.gt	e96c <inflateCodesUsed@@ZLIB_1.2.9+0x1f34>
    e964:	ldr	w4, [x14, w12, sxtw #2]
    e968:	add	w2, w2, w4
    e96c:	ldrh	w5, [x7, x8]
    e970:	ldr	x4, [x0, #5912]
    e974:	umaddl	x2, w2, w5, x4
    e978:	str	x2, [x0, #5912]
    e97c:	add	x3, x3, #0x1
    e980:	cmp	w3, #0x23c
    e984:	b.le	e910 <inflateCodesUsed@@ZLIB_1.2.9+0x1ed8>
    e988:	b	e54c <inflateCodesUsed@@ZLIB_1.2.9+0x1b14>
    e98c:	add	x7, x0, #0x1, lsl #12
    e990:	mov	w4, #0x1                   	// #1
    e994:	nop
    e998:	cmp	w19, #0x1
    e99c:	b.le	e9e0 <inflateCodesUsed@@ZLIB_1.2.9+0x1fa8>
    e9a0:	str	wzr, [x5, x2, lsl #2]
    e9a4:	add	x2, x2, #0x1
    e9a8:	strh	w4, [x1]
    e9ac:	cmp	w2, #0x1
    e9b0:	strb	wzr, [x7, #1212]
    e9b4:	b.le	e998 <inflateCodesUsed@@ZLIB_1.2.9+0x1f60>
    e9b8:	cmp	w8, #0x1
    e9bc:	mov	w3, #0x1                   	// #1
    e9c0:	sub	w2, w3, w8
    e9c4:	sub	x12, x12, #0x1
    e9c8:	csel	w4, w2, wzr, le
    e9cc:	add	w8, w8, #0x1
    e9d0:	csneg	x2, xzr, x2, gt
    e9d4:	add	w8, w4, w8
    e9d8:	add	x2, x2, x12
    e9dc:	b	e288 <inflateCodesUsed@@ZLIB_1.2.9+0x1850>
    e9e0:	add	w19, w19, #0x1
    e9e4:	str	w19, [x5, x2, lsl #2]
    e9e8:	add	x2, x2, #0x1
    e9ec:	sbfiz	x6, x19, #2, #32
    e9f0:	add	x3, x0, w19, sxtw
    e9f4:	add	x3, x3, #0x1, lsl #12
    e9f8:	cmp	w2, #0x1
    e9fc:	strh	w4, [x1, x6]
    ea00:	strb	wzr, [x3, #1212]
    ea04:	b.le	e998 <inflateCodesUsed@@ZLIB_1.2.9+0x1f60>
    ea08:	b	e9b8 <inflateCodesUsed@@ZLIB_1.2.9+0x1f80>
    ea0c:	mov	w4, w3
    ea10:	mov	w3, w30
    ea14:	b	e658 <inflateCodesUsed@@ZLIB_1.2.9+0x1c20>
    ea18:	mov	w4, w3
    ea1c:	mov	w3, w23
    ea20:	b	e658 <inflateCodesUsed@@ZLIB_1.2.9+0x1c20>
    ea24:	mov	w4, w3
    ea28:	mov	w3, w24
    ea2c:	b	e658 <inflateCodesUsed@@ZLIB_1.2.9+0x1c20>
    ea30:	mov	w3, w4
    ea34:	mov	w4, w25
    ea38:	b	e658 <inflateCodesUsed@@ZLIB_1.2.9+0x1c20>
    ea3c:	mov	w4, w3
    ea40:	mov	w3, w25
    ea44:	b	e658 <inflateCodesUsed@@ZLIB_1.2.9+0x1c20>
    ea48:	mov	x3, #0x14bc                	// #5308
    ea4c:	mov	w19, #0xffffffff            	// #-1
    ea50:	add	x15, x0, x3
    ea54:	mov	w8, #0x0                   	// #0
    ea58:	b	e218 <inflateCodesUsed@@ZLIB_1.2.9+0x17e0>
    ea5c:	nop
    ea60:	add	x6, x0, #0xd4
    ea64:	str	x6, [x0, #2904]
    ea68:	mov	x1, x6
    ea6c:	add	x6, x0, #0xb68
    ea70:	adrp	x5, 28000 <gzclose_w@@ZLIB_1.2.3.5+0x15c38>
    ea74:	add	x5, x5, #0xd08
    ea78:	strh	wzr, [x0, #5936]
    ea7c:	add	x8, x5, #0x20
    ea80:	add	x3, x0, #0x9c8
    ea84:	add	x4, x0, #0xabc
    ea88:	add	x2, x0, #0x54c
    ea8c:	stp	x5, x3, [x6]
    ea90:	add	x7, x5, #0x40
    ea94:	stp	x8, x4, [x6, #24]
    ea98:	str	x7, [x0, #2968]
    ea9c:	str	wzr, [x0, #5940]
    eaa0:	strh	wzr, [x1], #4
    eaa4:	cmp	x1, x2
    eaa8:	b.ne	eaa0 <inflateCodesUsed@@ZLIB_1.2.9+0x2068>  // b.any
    eaac:	mov	x1, x3
    eab0:	add	x2, x0, #0xa40
    eab4:	nop
    eab8:	strh	wzr, [x1], #4
    eabc:	cmp	x1, x2
    eac0:	b.ne	eab8 <inflateCodesUsed@@ZLIB_1.2.9+0x2080>  // b.any
    eac4:	mov	x1, x4
    eac8:	add	x2, x0, #0xb08
    eacc:	nop
    ead0:	strh	wzr, [x1], #4
    ead4:	cmp	x1, x2
    ead8:	b.ne	ead0 <inflateCodesUsed@@ZLIB_1.2.9+0x2098>  // b.any
    eadc:	mov	x1, #0x1800                	// #6144
    eae0:	add	x1, x0, x1
    eae4:	mov	w2, #0x1                   	// #1
    eae8:	strh	w2, [x0, #1236]
    eaec:	stp	xzr, xzr, [x1, #-232]
    eaf0:	str	wzr, [x0, #5900]
    eaf4:	str	wzr, [x0, #5928]
    eaf8:	ret
    eafc:	nop
    eb00:	stp	x29, x30, [sp, #-32]!
    eb04:	and	w3, w3, #0xffff
    eb08:	mov	x29, sp
    eb0c:	stp	x19, x20, [sp, #16]
    eb10:	mov	x19, x0
    eb14:	ldrh	w4, [x0, #5936]
    eb18:	ldr	w0, [x0, #5940]
    eb1c:	mov	x20, x2
    eb20:	ldr	x8, [x19, #16]
    eb24:	cmp	w0, #0xd
    eb28:	ldr	x7, [x19, #40]
    eb2c:	lsl	w2, w3, w0
    eb30:	orr	w2, w2, w4
    eb34:	and	w6, w2, #0xffff
    eb38:	add	x5, x7, #0x1
    eb3c:	sxth	w4, w2
    eb40:	add	x2, x8, x7
    eb44:	b.le	ec68 <inflateCodesUsed@@ZLIB_1.2.9+0x2230>
    eb48:	str	x5, [x19, #40]
    eb4c:	mov	w5, #0x10                  	// #16
    eb50:	strh	w6, [x19, #5936]
    eb54:	strb	w4, [x8, x7]
    eb58:	ldr	x4, [x19, #16]
    eb5c:	ldr	x2, [x19, #40]
    eb60:	ldrh	w0, [x19, #5936]
    eb64:	add	x6, x2, #0x1
    eb68:	str	x6, [x19, #40]
    eb6c:	lsr	w0, w0, #8
    eb70:	strb	w0, [x4, x2]
    eb74:	ldr	w0, [x19, #5940]
    eb78:	ldr	x2, [x19, #16]
    eb7c:	sub	w4, w5, w0
    eb80:	ldr	x7, [x19, #40]
    eb84:	sub	w0, w0, #0xd
    eb88:	asr	w3, w3, w4
    eb8c:	and	w6, w3, #0xffff
    eb90:	strh	w6, [x19, #5936]
    eb94:	add	x5, x7, #0x1
    eb98:	str	w0, [x19, #5940]
    eb9c:	add	x2, x2, x7
    eba0:	cmp	w0, #0x8
    eba4:	b.le	ec7c <inflateCodesUsed@@ZLIB_1.2.9+0x2244>
    eba8:	str	x5, [x19, #40]
    ebac:	strb	w6, [x2]
    ebb0:	ldr	x3, [x19, #16]
    ebb4:	ldr	x2, [x19, #40]
    ebb8:	ldrh	w0, [x19, #5936]
    ebbc:	add	x4, x2, #0x1
    ebc0:	str	x4, [x19, #40]
    ebc4:	lsr	w0, w0, #8
    ebc8:	strb	w0, [x3, x2]
    ebcc:	ldr	x2, [x19, #16]
    ebd0:	ldr	x0, [x19, #40]
    ebd4:	add	x5, x0, #0x1
    ebd8:	add	x2, x2, x0
    ebdc:	str	x5, [x19, #40]
    ebe0:	and	w0, w20, #0xff
    ebe4:	strh	wzr, [x19, #5936]
    ebe8:	ubfx	w6, w20, #8, #8
    ebec:	str	wzr, [x19, #5940]
    ebf0:	mvn	w5, w0
    ebf4:	strb	w0, [x2]
    ebf8:	mvn	w0, w20
    ebfc:	mov	x2, x20
    ec00:	ldr	x4, [x19, #16]
    ec04:	ubfx	x0, x0, #8, #8
    ec08:	ldr	x3, [x19, #40]
    ec0c:	add	x7, x3, #0x1
    ec10:	str	x7, [x19, #40]
    ec14:	strb	w6, [x4, x3]
    ec18:	ldr	x4, [x19, #16]
    ec1c:	ldr	x3, [x19, #40]
    ec20:	add	x6, x3, #0x1
    ec24:	str	x6, [x19, #40]
    ec28:	strb	w5, [x4, x3]
    ec2c:	ldr	x4, [x19, #16]
    ec30:	ldr	x3, [x19, #40]
    ec34:	add	x5, x3, #0x1
    ec38:	str	x5, [x19, #40]
    ec3c:	strb	w0, [x4, x3]
    ec40:	ldr	x3, [x19, #16]
    ec44:	ldr	x0, [x19, #40]
    ec48:	add	x0, x3, x0
    ec4c:	bl	23a0 <memcpy@plt>
    ec50:	ldr	x2, [x19, #40]
    ec54:	add	x2, x2, x20
    ec58:	str	x2, [x19, #40]
    ec5c:	ldp	x19, x20, [sp, #16]
    ec60:	ldp	x29, x30, [sp], #32
    ec64:	ret
    ec68:	add	w0, w0, #0x3
    ec6c:	strh	w6, [x19, #5936]
    ec70:	str	w0, [x19, #5940]
    ec74:	cmp	w0, #0x8
    ec78:	b.gt	eba8 <inflateCodesUsed@@ZLIB_1.2.9+0x2170>
    ec7c:	cmp	w0, #0x0
    ec80:	b.le	ebdc <inflateCodesUsed@@ZLIB_1.2.9+0x21a4>
    ec84:	str	x5, [x19, #40]
    ec88:	strb	w6, [x2]
    ec8c:	ldr	x2, [x19, #16]
    ec90:	ldr	x0, [x19, #40]
    ec94:	add	x5, x0, #0x1
    ec98:	add	x2, x2, x0
    ec9c:	b	ebdc <inflateCodesUsed@@ZLIB_1.2.9+0x21a4>
    eca0:	ldr	w1, [x0, #5940]
    eca4:	cmp	w1, #0x10
    eca8:	b.eq	ece8 <inflateCodesUsed@@ZLIB_1.2.9+0x22b0>  // b.none
    ecac:	cmp	w1, #0x7
    ecb0:	b.le	ece4 <inflateCodesUsed@@ZLIB_1.2.9+0x22ac>
    ecb4:	ldr	x2, [x0, #16]
    ecb8:	ldr	x1, [x0, #40]
    ecbc:	ldrh	w3, [x0, #5936]
    ecc0:	add	x4, x1, #0x1
    ecc4:	str	x4, [x0, #40]
    ecc8:	strb	w3, [x2, x1]
    eccc:	ldrh	w2, [x0, #5936]
    ecd0:	ldr	w1, [x0, #5940]
    ecd4:	lsr	w2, w2, #8
    ecd8:	sub	w1, w1, #0x8
    ecdc:	strh	w2, [x0, #5936]
    ece0:	str	w1, [x0, #5940]
    ece4:	ret
    ece8:	ldr	x2, [x0, #16]
    ecec:	ldr	x1, [x0, #40]
    ecf0:	ldrh	w3, [x0, #5936]
    ecf4:	add	x4, x1, #0x1
    ecf8:	str	x4, [x0, #40]
    ecfc:	strb	w3, [x2, x1]
    ed00:	ldr	x3, [x0, #16]
    ed04:	ldr	x2, [x0, #40]
    ed08:	ldrh	w1, [x0, #5936]
    ed0c:	add	x4, x2, #0x1
    ed10:	str	x4, [x0, #40]
    ed14:	lsr	w1, w1, #8
    ed18:	strb	w1, [x3, x2]
    ed1c:	strh	wzr, [x0, #5936]
    ed20:	str	wzr, [x0, #5940]
    ed24:	ret
    ed28:	ldr	w1, [x0, #5940]
    ed2c:	mov	w4, #0x2                   	// #2
    ed30:	ldrh	w3, [x0, #5936]
    ed34:	cmp	w1, #0xd
    ed38:	lsl	w2, w4, w1
    ed3c:	orr	w2, w2, w3
    ed40:	and	w3, w2, #0xffff
    ed44:	sxth	w2, w2
    ed48:	b.le	ee78 <inflateCodesUsed@@ZLIB_1.2.9+0x2440>
    ed4c:	ldr	x5, [x0, #16]
    ed50:	strh	w3, [x0, #5936]
    ed54:	ldr	x1, [x0, #40]
    ed58:	mov	w3, #0x10                  	// #16
    ed5c:	add	x6, x1, #0x1
    ed60:	str	x6, [x0, #40]
    ed64:	strb	w2, [x5, x1]
    ed68:	ldr	x5, [x0, #16]
    ed6c:	ldr	x2, [x0, #40]
    ed70:	ldrh	w1, [x0, #5936]
    ed74:	add	x6, x2, #0x1
    ed78:	str	x6, [x0, #40]
    ed7c:	lsr	w1, w1, #8
    ed80:	strb	w1, [x5, x2]
    ed84:	ldr	w1, [x0, #5940]
    ed88:	sub	w3, w3, w1
    ed8c:	sub	w1, w1, #0xd
    ed90:	str	w1, [x0, #5940]
    ed94:	asr	w3, w4, w3
    ed98:	and	w3, w3, #0xffff
    ed9c:	strh	w3, [x0, #5936]
    eda0:	cmp	w1, #0x9
    eda4:	b.le	ee2c <inflateCodesUsed@@ZLIB_1.2.9+0x23f4>
    eda8:	ldr	x2, [x0, #16]
    edac:	ldr	x1, [x0, #40]
    edb0:	add	x4, x1, #0x1
    edb4:	str	x4, [x0, #40]
    edb8:	strb	w3, [x2, x1]
    edbc:	mov	w3, #0x0                   	// #0
    edc0:	ldr	x4, [x0, #16]
    edc4:	ldr	x2, [x0, #40]
    edc8:	ldrh	w1, [x0, #5936]
    edcc:	add	x5, x2, #0x1
    edd0:	str	x5, [x0, #40]
    edd4:	lsr	w1, w1, #8
    edd8:	strb	w1, [x4, x2]
    eddc:	strh	wzr, [x0, #5936]
    ede0:	ldr	w1, [x0, #5940]
    ede4:	sub	w1, w1, #0x9
    ede8:	str	w1, [x0, #5940]
    edec:	cmp	w1, #0x10
    edf0:	b.eq	ee3c <inflateCodesUsed@@ZLIB_1.2.9+0x2404>  // b.none
    edf4:	cmp	w1, #0x7
    edf8:	b.le	ee28 <inflateCodesUsed@@ZLIB_1.2.9+0x23f0>
    edfc:	ldr	x2, [x0, #16]
    ee00:	ldr	x1, [x0, #40]
    ee04:	add	x4, x1, #0x1
    ee08:	str	x4, [x0, #40]
    ee0c:	strb	w3, [x2, x1]
    ee10:	ldrh	w2, [x0, #5936]
    ee14:	ldr	w1, [x0, #5940]
    ee18:	lsr	w2, w2, #8
    ee1c:	sub	w1, w1, #0x8
    ee20:	strh	w2, [x0, #5936]
    ee24:	str	w1, [x0, #5940]
    ee28:	ret
    ee2c:	add	w1, w1, #0x7
    ee30:	str	w1, [x0, #5940]
    ee34:	cmp	w1, #0x10
    ee38:	b.ne	edf4 <inflateCodesUsed@@ZLIB_1.2.9+0x23bc>  // b.any
    ee3c:	ldr	x2, [x0, #16]
    ee40:	ldr	x1, [x0, #40]
    ee44:	add	x4, x1, #0x1
    ee48:	str	x4, [x0, #40]
    ee4c:	strb	w3, [x2, x1]
    ee50:	ldr	x3, [x0, #16]
    ee54:	ldr	x2, [x0, #40]
    ee58:	ldrh	w1, [x0, #5936]
    ee5c:	add	x4, x2, #0x1
    ee60:	str	x4, [x0, #40]
    ee64:	lsr	w1, w1, #8
    ee68:	strb	w1, [x3, x2]
    ee6c:	strh	wzr, [x0, #5936]
    ee70:	str	wzr, [x0, #5940]
    ee74:	ret
    ee78:	add	w1, w1, #0x3
    ee7c:	strh	w3, [x0, #5936]
    ee80:	str	w1, [x0, #5940]
    ee84:	b	eda0 <inflateCodesUsed@@ZLIB_1.2.9+0x2368>
    ee88:	stp	x29, x30, [sp, #-80]!
    ee8c:	cmp	x1, #0x0
    ee90:	mov	x29, sp
    ee94:	stp	x19, x20, [sp, #16]
    ee98:	stp	x21, x22, [sp, #32]
    ee9c:	mov	x21, x0
    eea0:	ldr	w0, [x0, #196]
    eea4:	stp	x23, x24, [sp, #48]
    eea8:	mov	w22, w3
    eeac:	mov	x24, x1
    eeb0:	stp	x25, x26, [sp, #64]
    eeb4:	mov	x23, x2
    eeb8:	cset	w26, ne  // ne = any
    eebc:	add	x25, x2, #0x4
    eec0:	cmp	w0, #0x0
    eec4:	b.le	f2b4 <inflateCodesUsed@@ZLIB_1.2.9+0x287c>
    eec8:	mov	x19, x21
    eecc:	ldr	x1, [x19], #212
    eed0:	ldr	w0, [x1, #88]
    eed4:	cmp	w0, #0x2
    eed8:	b.eq	f244 <inflateCodesUsed@@ZLIB_1.2.9+0x280c>  // b.none
    eedc:	add	x1, x21, #0xb58
    eee0:	mov	x0, x21
    eee4:	bl	e170 <inflateCodesUsed@@ZLIB_1.2.9+0x1738>
    eee8:	add	x20, x21, #0x9c8
    eeec:	add	x1, x21, #0xb70
    eef0:	mov	x0, x21
    eef4:	bl	e170 <inflateCodesUsed@@ZLIB_1.2.9+0x1738>
    eef8:	ldr	w2, [x21, #2912]
    eefc:	mov	x0, x21
    ef00:	mov	x1, x19
    ef04:	bl	d510 <inflateCodesUsed@@ZLIB_1.2.9+0xad8>
    ef08:	ldr	w2, [x21, #2936]
    ef0c:	mov	x1, x20
    ef10:	bl	d510 <inflateCodesUsed@@ZLIB_1.2.9+0xad8>
    ef14:	add	x1, x21, #0xb88
    ef18:	bl	e170 <inflateCodesUsed@@ZLIB_1.2.9+0x1738>
    ef1c:	ldrh	w0, [x21, #2810]
    ef20:	cbnz	w0, f590 <inflateCodesUsed@@ZLIB_1.2.9+0x2b58>
    ef24:	ldrh	w0, [x21, #2754]
    ef28:	cbnz	w0, f5a0 <inflateCodesUsed@@ZLIB_1.2.9+0x2b68>
    ef2c:	ldrh	w0, [x21, #2806]
    ef30:	cbnz	w0, f574 <inflateCodesUsed@@ZLIB_1.2.9+0x2b3c>
    ef34:	ldrh	w0, [x21, #2758]
    ef38:	cbnz	w0, f598 <inflateCodesUsed@@ZLIB_1.2.9+0x2b60>
    ef3c:	ldrh	w0, [x21, #2802]
    ef40:	cbnz	w0, f588 <inflateCodesUsed@@ZLIB_1.2.9+0x2b50>
    ef44:	ldrh	w0, [x21, #2762]
    ef48:	cbnz	w0, f5c0 <inflateCodesUsed@@ZLIB_1.2.9+0x2b88>
    ef4c:	ldrh	w0, [x21, #2798]
    ef50:	cbnz	w0, f5c8 <inflateCodesUsed@@ZLIB_1.2.9+0x2b90>
    ef54:	ldrh	w0, [x21, #2766]
    ef58:	cbnz	w0, f5d0 <inflateCodesUsed@@ZLIB_1.2.9+0x2b98>
    ef5c:	ldrh	w0, [x21, #2794]
    ef60:	cbnz	w0, f5d8 <inflateCodesUsed@@ZLIB_1.2.9+0x2ba0>
    ef64:	ldrh	w0, [x21, #2770]
    ef68:	cbnz	w0, f5e0 <inflateCodesUsed@@ZLIB_1.2.9+0x2ba8>
    ef6c:	ldrh	w0, [x21, #2790]
    ef70:	cbnz	w0, f5e8 <inflateCodesUsed@@ZLIB_1.2.9+0x2bb0>
    ef74:	ldrh	w0, [x21, #2774]
    ef78:	cbnz	w0, f5b0 <inflateCodesUsed@@ZLIB_1.2.9+0x2b78>
    ef7c:	ldrh	w0, [x21, #2786]
    ef80:	cbnz	w0, f5b8 <inflateCodesUsed@@ZLIB_1.2.9+0x2b80>
    ef84:	ldrh	w0, [x21, #2778]
    ef88:	cbnz	w0, f5a8 <inflateCodesUsed@@ZLIB_1.2.9+0x2b70>
    ef8c:	ldrh	w0, [x21, #2782]
    ef90:	cbnz	w0, f5f0 <inflateCodesUsed@@ZLIB_1.2.9+0x2bb8>
    ef94:	ldrh	w0, [x21, #2750]
    ef98:	mov	x1, #0x9                   	// #9
    ef9c:	mov	w5, #0x2                   	// #2
    efa0:	cbnz	w0, f5f8 <inflateCodesUsed@@ZLIB_1.2.9+0x2bc0>
    efa4:	ldr	x0, [x21, #5912]
    efa8:	ldr	x4, [x21, #5920]
    efac:	add	x0, x0, #0xe
    efb0:	add	x0, x0, x1
    efb4:	str	x0, [x21, #5912]
    efb8:	add	x4, x4, #0xa
    efbc:	add	x0, x0, #0xa
    efc0:	lsr	x4, x4, #3
    efc4:	lsr	x3, x0, #3
    efc8:	cmp	x3, x4
    efcc:	csel	x0, x3, x4, ls  // ls = plast
    efd0:	cmp	w26, #0x0
    efd4:	ccmp	x0, x25, #0x0, ne  // ne = any
    efd8:	b.cs	f428 <inflateCodesUsed@@ZLIB_1.2.9+0x29f0>  // b.hs, b.nlast
    efdc:	ldr	w1, [x21, #200]
    efe0:	ldrsh	w0, [x21, #5936]
    efe4:	cmp	w1, #0x4
    efe8:	ldr	w1, [x21, #5940]
    efec:	ccmp	x3, x4, #0x2, ne  // ne = any
    eff0:	b.cs	f2dc <inflateCodesUsed@@ZLIB_1.2.9+0x28a4>  // b.hs, b.nlast
    eff4:	add	w2, w22, #0x4
    eff8:	cmp	w1, #0xd
    effc:	b.gt	f494 <inflateCodesUsed@@ZLIB_1.2.9+0x2a5c>
    f000:	and	w2, w2, #0xffff
    f004:	add	w3, w1, #0x3
    f008:	str	w3, [x21, #5940]
    f00c:	cmp	w3, #0xb
    f010:	lsl	w1, w2, w1
    f014:	ldr	w2, [x21, #2912]
    f018:	orr	w0, w0, w1
    f01c:	ldr	w15, [x21, #2936]
    f020:	sub	w4, w2, #0x100
    f024:	sxth	w0, w0
    f028:	b.le	f508 <inflateCodesUsed@@ZLIB_1.2.9+0x2ad0>
    f02c:	and	w4, w4, #0xffff
    f030:	mov	w6, #0x10                  	// #16
    f034:	ldr	x7, [x21, #16]
    f038:	lsl	w3, w4, w3
    f03c:	ldr	x1, [x21, #40]
    f040:	orr	w0, w0, w3
    f044:	add	x3, x1, #0x1
    f048:	sxth	w0, w0
    f04c:	str	x3, [x21, #40]
    f050:	strh	w0, [x21, #5936]
    f054:	strb	w0, [x7, x1]
    f058:	ldr	x3, [x21, #16]
    f05c:	ldr	x1, [x21, #40]
    f060:	ldrh	w0, [x21, #5936]
    f064:	add	x7, x1, #0x1
    f068:	str	x7, [x21, #40]
    f06c:	lsr	w0, w0, #8
    f070:	strb	w0, [x3, x1]
    f074:	ldr	w1, [x21, #5940]
    f078:	sub	w0, w6, w1
    f07c:	sub	w1, w1, #0xb
    f080:	str	w1, [x21, #5940]
    f084:	cmp	w1, #0xb
    f088:	asr	w0, w4, w0
    f08c:	sxth	w0, w0
    f090:	b.le	f528 <inflateCodesUsed@@ZLIB_1.2.9+0x2af0>
    f094:	and	w4, w15, #0xffff
    f098:	mov	w6, #0x10                  	// #16
    f09c:	ldr	x7, [x21, #16]
    f0a0:	lsl	w1, w4, w1
    f0a4:	ldr	x3, [x21, #40]
    f0a8:	orr	w0, w0, w1
    f0ac:	add	x1, x3, #0x1
    f0b0:	sxth	w0, w0
    f0b4:	str	x1, [x21, #40]
    f0b8:	strh	w0, [x21, #5936]
    f0bc:	strb	w0, [x7, x3]
    f0c0:	ldr	x3, [x21, #16]
    f0c4:	ldr	x1, [x21, #40]
    f0c8:	ldrh	w0, [x21, #5936]
    f0cc:	add	x7, x1, #0x1
    f0d0:	str	x7, [x21, #40]
    f0d4:	lsr	w0, w0, #8
    f0d8:	strb	w0, [x3, x1]
    f0dc:	ldr	w3, [x21, #5940]
    f0e0:	sub	w1, w6, w3
    f0e4:	sub	w3, w3, #0xb
    f0e8:	str	w3, [x21, #5940]
    f0ec:	cmp	w3, #0xc
    f0f0:	asr	w1, w4, w1
    f0f4:	sub	w4, w5, #0x3
    f0f8:	sxth	w1, w1
    f0fc:	b.le	f54c <inflateCodesUsed@@ZLIB_1.2.9+0x2b14>
    f100:	and	w4, w4, #0xffff
    f104:	mov	w6, #0x10                  	// #16
    f108:	ldr	x7, [x21, #16]
    f10c:	lsl	w0, w4, w3
    f110:	ldr	x3, [x21, #40]
    f114:	orr	w0, w1, w0
    f118:	add	x1, x3, #0x1
    f11c:	sxth	w0, w0
    f120:	str	x1, [x21, #40]
    f124:	strh	w0, [x21, #5936]
    f128:	strb	w0, [x7, x3]
    f12c:	ldr	x3, [x21, #16]
    f130:	ldr	x1, [x21, #40]
    f134:	ldrh	w0, [x21, #5936]
    f138:	add	x7, x1, #0x1
    f13c:	str	x7, [x21, #40]
    f140:	lsr	w0, w0, #8
    f144:	strb	w0, [x3, x1]
    f148:	ldr	w0, [x21, #5940]
    f14c:	sub	w1, w6, w0
    f150:	sub	w0, w0, #0xc
    f154:	str	w0, [x21, #5940]
    f158:	asr	w4, w4, w1
    f15c:	and	w4, w4, #0xffff
    f160:	adrp	x6, 15000 <gzclose_w@@ZLIB_1.2.3.5+0x2c38>
    f164:	add	x6, x6, #0xaa0
    f168:	sxtw	x7, w5
    f16c:	mov	w1, #0x10                  	// #16
    f170:	add	x6, x6, #0xa00
    f174:	mov	w9, w1
    f178:	mov	x5, #0x0                   	// #0
    f17c:	b	f1e4 <inflateCodesUsed@@ZLIB_1.2.9+0x27ac>
    f180:	ldr	x8, [x21, #16]
    f184:	strh	w4, [x21, #5936]
    f188:	ldr	x0, [x21, #40]
    f18c:	cmp	x5, x7
    f190:	add	x4, x0, #0x1
    f194:	str	x4, [x21, #40]
    f198:	strb	w1, [x8, x0]
    f19c:	ldr	x4, [x21, #16]
    f1a0:	ldr	x1, [x21, #40]
    f1a4:	ldrh	w0, [x21, #5936]
    f1a8:	add	x8, x1, #0x1
    f1ac:	str	x8, [x21, #40]
    f1b0:	lsr	w0, w0, #8
    f1b4:	strb	w0, [x4, x1]
    f1b8:	add	x1, x5, #0x1
    f1bc:	ldr	w0, [x21, #5940]
    f1c0:	sub	w4, w9, w0
    f1c4:	sub	w0, w0, #0xd
    f1c8:	str	w0, [x21, #5940]
    f1cc:	asr	w3, w3, w4
    f1d0:	and	w4, w3, #0xffff
    f1d4:	strh	w4, [x21, #5936]
    f1d8:	b.eq	f21c <inflateCodesUsed@@ZLIB_1.2.9+0x27e4>  // b.none
    f1dc:	mov	x5, x1
    f1e0:	ldrb	w1, [x1, x6]
    f1e4:	add	x1, x21, w1, sxtw #2
    f1e8:	cmp	w0, #0xd
    f1ec:	ldrh	w3, [x1, #2750]
    f1f0:	lsl	w1, w3, w0
    f1f4:	orr	w1, w1, w4
    f1f8:	and	w4, w1, #0xffff
    f1fc:	add	w0, w0, #0x3
    f200:	sxth	w1, w1
    f204:	b.gt	f180 <inflateCodesUsed@@ZLIB_1.2.9+0x2748>
    f208:	strh	w4, [x21, #5936]
    f20c:	cmp	x5, x7
    f210:	str	w0, [x21, #5940]
    f214:	add	x1, x5, #0x1
    f218:	b.ne	f1dc <inflateCodesUsed@@ZLIB_1.2.9+0x27a4>  // b.any
    f21c:	mov	x1, x19
    f220:	mov	x0, x21
    f224:	bl	d638 <inflateCodesUsed@@ZLIB_1.2.9+0xc00>
    f228:	mov	w2, w15
    f22c:	mov	x1, x20
    f230:	bl	d638 <inflateCodesUsed@@ZLIB_1.2.9+0xc00>
    f234:	mov	x2, x20
    f238:	mov	x1, x19
    f23c:	bl	dc58 <inflateCodesUsed@@ZLIB_1.2.9+0x1220>
    f240:	b	f360 <inflateCodesUsed@@ZLIB_1.2.9+0x2928>
    f244:	mov	x3, #0xc07f                	// #49279
    f248:	mov	x0, x19
    f24c:	add	x4, x21, #0x154
    f250:	movk	x3, #0xf3ff, lsl #16
    f254:	nop
    f258:	tbz	w3, #0, f264 <inflateCodesUsed@@ZLIB_1.2.9+0x282c>
    f25c:	ldrh	w2, [x0]
    f260:	cbnz	w2, f568 <inflateCodesUsed@@ZLIB_1.2.9+0x2b30>
    f264:	add	x0, x0, #0x4
    f268:	lsr	x3, x3, #1
    f26c:	cmp	x4, x0
    f270:	b.ne	f258 <inflateCodesUsed@@ZLIB_1.2.9+0x2820>  // b.any
    f274:	ldr	x2, [x21, #248]
    f278:	mov	w0, #0x1                   	// #1
    f27c:	tst	x2, #0xffff0000ffff
    f280:	b.ne	f2ac <inflateCodesUsed@@ZLIB_1.2.9+0x2874>  // b.any
    f284:	ldrh	w2, [x21, #264]
    f288:	cbnz	w2, f2ac <inflateCodesUsed@@ZLIB_1.2.9+0x2874>
    f28c:	add	x2, x21, #0x4d4
    f290:	b	f298 <inflateCodesUsed@@ZLIB_1.2.9+0x2860>
    f294:	b.eq	f2ac <inflateCodesUsed@@ZLIB_1.2.9+0x2874>  // b.none
    f298:	ldrh	w0, [x4]
    f29c:	add	x4, x4, #0x4
    f2a0:	cmp	x4, x2
    f2a4:	cbz	w0, f294 <inflateCodesUsed@@ZLIB_1.2.9+0x285c>
    f2a8:	mov	w0, #0x1                   	// #1
    f2ac:	str	w0, [x1, #88]
    f2b0:	b	eedc <inflateCodesUsed@@ZLIB_1.2.9+0x24a4>
    f2b4:	cmp	w26, #0x0
    f2b8:	add	x0, x2, #0x5
    f2bc:	ccmp	x0, x25, #0x0, ne  // ne = any
    f2c0:	add	x19, x21, #0xd4
    f2c4:	add	x20, x21, #0x9c8
    f2c8:	b.cs	f428 <inflateCodesUsed@@ZLIB_1.2.9+0x29f0>  // b.hs, b.nlast
    f2cc:	ldrsh	w0, [x21, #5936]
    f2d0:	add	x19, x21, #0xd4
    f2d4:	ldr	w1, [x21, #5940]
    f2d8:	add	x20, x21, #0x9c8
    f2dc:	add	w2, w22, #0x2
    f2e0:	cmp	w1, #0xd
    f2e4:	b.le	f440 <inflateCodesUsed@@ZLIB_1.2.9+0x2a08>
    f2e8:	and	w2, w2, #0xffff
    f2ec:	mov	w3, #0x10                  	// #16
    f2f0:	ldr	x5, [x21, #16]
    f2f4:	lsl	w1, w2, w1
    f2f8:	ldr	x4, [x21, #40]
    f2fc:	orr	w0, w0, w1
    f300:	add	x1, x4, #0x1
    f304:	sxth	w0, w0
    f308:	str	x1, [x21, #40]
    f30c:	strh	w0, [x21, #5936]
    f310:	strb	w0, [x5, x4]
    f314:	ldr	x4, [x21, #16]
    f318:	ldr	x1, [x21, #40]
    f31c:	ldrh	w0, [x21, #5936]
    f320:	add	x5, x1, #0x1
    f324:	str	x5, [x21, #40]
    f328:	lsr	w0, w0, #8
    f32c:	strb	w0, [x4, x1]
    f330:	ldr	w0, [x21, #5940]
    f334:	sub	w1, w3, w0
    f338:	sub	w0, w0, #0xd
    f33c:	str	w0, [x21, #5940]
    f340:	asr	w2, w2, w1
    f344:	strh	w2, [x21, #5936]
    f348:	adrp	x1, 15000 <gzclose_w@@ZLIB_1.2.3.5+0x2c38>
    f34c:	add	x1, x1, #0xaa0
    f350:	add	x2, x1, #0x500
    f354:	mov	x0, x21
    f358:	add	x1, x1, #0x580
    f35c:	bl	dc58 <inflateCodesUsed@@ZLIB_1.2.9+0x1220>
    f360:	mov	x1, x19
    f364:	add	x2, x21, #0x54c
    f368:	strh	wzr, [x1], #4
    f36c:	cmp	x1, x2
    f370:	b.ne	f368 <inflateCodesUsed@@ZLIB_1.2.9+0x2930>  // b.any
    f374:	mov	x1, x20
    f378:	add	x0, x21, #0xa40
    f37c:	nop
    f380:	strh	wzr, [x1], #4
    f384:	cmp	x1, x0
    f388:	b.ne	f380 <inflateCodesUsed@@ZLIB_1.2.9+0x2948>  // b.any
    f38c:	add	x1, x21, #0xabc
    f390:	add	x0, x21, #0xb08
    f394:	nop
    f398:	strh	wzr, [x1], #4
    f39c:	cmp	x1, x0
    f3a0:	b.ne	f398 <inflateCodesUsed@@ZLIB_1.2.9+0x2960>  // b.any
    f3a4:	mov	x0, #0x1800                	// #6144
    f3a8:	add	x0, x21, x0
    f3ac:	mov	w1, #0x1                   	// #1
    f3b0:	strh	w1, [x21, #1236]
    f3b4:	stp	xzr, xzr, [x0, #-232]
    f3b8:	str	wzr, [x21, #5900]
    f3bc:	str	wzr, [x21, #5928]
    f3c0:	cbnz	w22, f3dc <inflateCodesUsed@@ZLIB_1.2.9+0x29a4>
    f3c4:	ldp	x19, x20, [sp, #16]
    f3c8:	ldp	x21, x22, [sp, #32]
    f3cc:	ldp	x23, x24, [sp, #48]
    f3d0:	ldp	x25, x26, [sp, #64]
    f3d4:	ldp	x29, x30, [sp], #80
    f3d8:	ret
    f3dc:	ldr	w0, [x21, #5940]
    f3e0:	cmp	w0, #0x8
    f3e4:	b.gt	f45c <inflateCodesUsed@@ZLIB_1.2.9+0x2a24>
    f3e8:	cmp	w0, #0x0
    f3ec:	b.le	f408 <inflateCodesUsed@@ZLIB_1.2.9+0x29d0>
    f3f0:	ldr	x1, [x21, #16]
    f3f4:	ldr	x0, [x21, #40]
    f3f8:	ldrh	w2, [x21, #5936]
    f3fc:	add	x3, x0, #0x1
    f400:	str	x3, [x21, #40]
    f404:	strb	w2, [x1, x0]
    f408:	strh	wzr, [x21, #5936]
    f40c:	str	wzr, [x21, #5940]
    f410:	ldp	x19, x20, [sp, #16]
    f414:	ldp	x21, x22, [sp, #32]
    f418:	ldp	x23, x24, [sp, #48]
    f41c:	ldp	x25, x26, [sp, #64]
    f420:	ldp	x29, x30, [sp], #80
    f424:	ret
    f428:	mov	x2, x23
    f42c:	mov	x1, x24
    f430:	mov	w3, w22
    f434:	mov	x0, x21
    f438:	bl	eb00 <inflateCodesUsed@@ZLIB_1.2.9+0x20c8>
    f43c:	b	f360 <inflateCodesUsed@@ZLIB_1.2.9+0x2928>
    f440:	and	w2, w2, #0xffff
    f444:	add	w3, w1, #0x3
    f448:	str	w3, [x21, #5940]
    f44c:	lsl	w1, w2, w1
    f450:	orr	w0, w0, w1
    f454:	strh	w0, [x21, #5936]
    f458:	b	f348 <inflateCodesUsed@@ZLIB_1.2.9+0x2910>
    f45c:	ldr	x1, [x21, #16]
    f460:	ldr	x0, [x21, #40]
    f464:	ldrh	w2, [x21, #5936]
    f468:	add	x3, x0, #0x1
    f46c:	str	x3, [x21, #40]
    f470:	strb	w2, [x1, x0]
    f474:	ldr	x2, [x21, #16]
    f478:	ldr	x1, [x21, #40]
    f47c:	ldrh	w0, [x21, #5936]
    f480:	add	x3, x1, #0x1
    f484:	str	x3, [x21, #40]
    f488:	lsr	w0, w0, #8
    f48c:	strb	w0, [x2, x1]
    f490:	b	f408 <inflateCodesUsed@@ZLIB_1.2.9+0x29d0>
    f494:	and	w2, w2, #0xffff
    f498:	mov	w4, #0x10                  	// #16
    f49c:	ldr	x6, [x21, #16]
    f4a0:	lsl	w1, w2, w1
    f4a4:	ldr	x3, [x21, #40]
    f4a8:	orr	w0, w0, w1
    f4ac:	add	x1, x3, #0x1
    f4b0:	sxth	w0, w0
    f4b4:	str	x1, [x21, #40]
    f4b8:	strh	w0, [x21, #5936]
    f4bc:	strb	w0, [x6, x3]
    f4c0:	ldr	x3, [x21, #16]
    f4c4:	ldr	x1, [x21, #40]
    f4c8:	ldrh	w0, [x21, #5936]
    f4cc:	add	x6, x1, #0x1
    f4d0:	str	x6, [x21, #40]
    f4d4:	lsr	w0, w0, #8
    f4d8:	strb	w0, [x3, x1]
    f4dc:	ldr	w3, [x21, #5940]
    f4e0:	ldr	w15, [x21, #2936]
    f4e4:	sub	w0, w4, w3
    f4e8:	sub	w3, w3, #0xd
    f4ec:	str	w3, [x21, #5940]
    f4f0:	cmp	w3, #0xb
    f4f4:	asr	w0, w2, w0
    f4f8:	ldr	w2, [x21, #2912]
    f4fc:	sxth	w0, w0
    f500:	sub	w4, w2, #0x100
    f504:	b.gt	f02c <inflateCodesUsed@@ZLIB_1.2.9+0x25f4>
    f508:	and	w4, w4, #0xffff
    f50c:	add	w1, w3, #0x5
    f510:	str	w1, [x21, #5940]
    f514:	cmp	w1, #0xb
    f518:	lsl	w3, w4, w3
    f51c:	orr	w0, w0, w3
    f520:	sxth	w0, w0
    f524:	b.gt	f094 <inflateCodesUsed@@ZLIB_1.2.9+0x265c>
    f528:	and	w4, w15, #0xffff
    f52c:	add	w3, w1, #0x5
    f530:	str	w3, [x21, #5940]
    f534:	cmp	w3, #0xc
    f538:	lsl	w1, w4, w1
    f53c:	orr	w0, w0, w1
    f540:	sub	w4, w5, #0x3
    f544:	sxth	w1, w0
    f548:	b.gt	f100 <inflateCodesUsed@@ZLIB_1.2.9+0x26c8>
    f54c:	and	w4, w4, #0xffff
    f550:	add	w0, w3, #0x4
    f554:	str	w0, [x21, #5940]
    f558:	lsl	w3, w4, w3
    f55c:	orr	w1, w1, w3
    f560:	and	w4, w1, #0xffff
    f564:	b	f160 <inflateCodesUsed@@ZLIB_1.2.9+0x2728>
    f568:	mov	w0, #0x0                   	// #0
    f56c:	str	w0, [x1, #88]
    f570:	b	eedc <inflateCodesUsed@@ZLIB_1.2.9+0x24a4>
    f574:	mov	w5, #0x10                  	// #16
    f578:	sxtw	x0, w5
    f57c:	add	x0, x0, #0x1
    f580:	add	x1, x0, x0, lsl #1
    f584:	b	efa4 <inflateCodesUsed@@ZLIB_1.2.9+0x256c>
    f588:	mov	w5, #0xe                   	// #14
    f58c:	b	f578 <inflateCodesUsed@@ZLIB_1.2.9+0x2b40>
    f590:	mov	w5, #0x12                  	// #18
    f594:	b	f578 <inflateCodesUsed@@ZLIB_1.2.9+0x2b40>
    f598:	mov	w5, #0xf                   	// #15
    f59c:	b	f578 <inflateCodesUsed@@ZLIB_1.2.9+0x2b40>
    f5a0:	mov	w5, #0x11                  	// #17
    f5a4:	b	f578 <inflateCodesUsed@@ZLIB_1.2.9+0x2b40>
    f5a8:	mov	w5, #0x5                   	// #5
    f5ac:	b	f578 <inflateCodesUsed@@ZLIB_1.2.9+0x2b40>
    f5b0:	mov	w5, #0x7                   	// #7
    f5b4:	b	f578 <inflateCodesUsed@@ZLIB_1.2.9+0x2b40>
    f5b8:	mov	w5, #0x6                   	// #6
    f5bc:	b	f578 <inflateCodesUsed@@ZLIB_1.2.9+0x2b40>
    f5c0:	mov	w5, #0xd                   	// #13
    f5c4:	b	f578 <inflateCodesUsed@@ZLIB_1.2.9+0x2b40>
    f5c8:	mov	w5, #0xc                   	// #12
    f5cc:	b	f578 <inflateCodesUsed@@ZLIB_1.2.9+0x2b40>
    f5d0:	mov	w5, #0xb                   	// #11
    f5d4:	b	f578 <inflateCodesUsed@@ZLIB_1.2.9+0x2b40>
    f5d8:	mov	w5, #0xa                   	// #10
    f5dc:	b	f578 <inflateCodesUsed@@ZLIB_1.2.9+0x2b40>
    f5e0:	mov	w5, #0x9                   	// #9
    f5e4:	b	f578 <inflateCodesUsed@@ZLIB_1.2.9+0x2b40>
    f5e8:	mov	w5, #0x8                   	// #8
    f5ec:	b	f578 <inflateCodesUsed@@ZLIB_1.2.9+0x2b40>
    f5f0:	mov	w5, #0x4                   	// #4
    f5f4:	b	f578 <inflateCodesUsed@@ZLIB_1.2.9+0x2b40>
    f5f8:	mov	w5, #0x3                   	// #3
    f5fc:	b	f578 <inflateCodesUsed@@ZLIB_1.2.9+0x2b40>
    f600:	ldr	w3, [x0, #5900]
    f604:	ldr	x6, [x0, #5904]
    f608:	add	w5, w3, #0x1
    f60c:	ldr	x4, [x0, #5888]
    f610:	strh	w1, [x6, w3, uxtw #1]
    f614:	str	w5, [x0, #5900]
    f618:	strb	w2, [x4, w3, uxtw]
    f61c:	cbnz	w1, f648 <inflateCodesUsed@@ZLIB_1.2.9+0x2c10>
    f620:	add	x2, x0, w2, uxtw #2
    f624:	ldrh	w1, [x2, #212]
    f628:	add	w1, w1, #0x1
    f62c:	strh	w1, [x2, #212]
    f630:	ldr	w1, [x0, #5896]
    f634:	ldr	w2, [x0, #5900]
    f638:	sub	w0, w1, #0x1
    f63c:	cmp	w0, w2
    f640:	cset	w0, eq  // eq = none
    f644:	ret
    f648:	adrp	x3, 15000 <gzclose_w@@ZLIB_1.2.3.5+0x2c38>
    f64c:	add	x3, x3, #0xaa0
    f650:	ldr	w4, [x0, #5928]
    f654:	sub	w1, w1, #0x1
    f658:	cmp	w1, #0xff
    f65c:	ldrb	w2, [x3, w2, uxtw]
    f660:	add	w4, w4, #0x1
    f664:	str	w4, [x0, #5928]
    f668:	add	x2, x0, x2, lsl #2
    f66c:	ldrh	w4, [x2, #1240]
    f670:	add	w4, w4, #0x1
    f674:	strh	w4, [x2, #1240]
    f678:	b.ls	f6b4 <inflateCodesUsed@@ZLIB_1.2.9+0x2c7c>  // b.plast
    f67c:	lsr	w1, w1, #7
    f680:	add	x3, x3, #0x200
    f684:	add	w1, w1, #0x100
    f688:	ldrb	w1, [x3, w1, uxtw]
    f68c:	add	x1, x0, w1, sxtw #2
    f690:	ldrh	w2, [x1, #2504]
    f694:	add	w2, w2, #0x1
    f698:	strh	w2, [x1, #2504]
    f69c:	ldr	w1, [x0, #5896]
    f6a0:	ldr	w2, [x0, #5900]
    f6a4:	sub	w0, w1, #0x1
    f6a8:	cmp	w0, w2
    f6ac:	cset	w0, eq  // eq = none
    f6b0:	ret
    f6b4:	add	x3, x3, #0x200
    f6b8:	ldrb	w1, [x3, w1, uxtw]
    f6bc:	b	f68c <inflateCodesUsed@@ZLIB_1.2.9+0x2c54>

000000000000f6c0 <zlibVersion@@Base>:
    f6c0:	adrp	x0, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
    f6c4:	add	x0, x0, #0x510
    f6c8:	ret
    f6cc:	nop

000000000000f6d0 <zlibCompileFlags@@ZLIB_1.2.0.2>:
    f6d0:	mov	x0, #0xa9                  	// #169
    f6d4:	ret

000000000000f6d8 <zError@@Base>:
    f6d8:	adrp	x1, 28000 <gzclose_w@@ZLIB_1.2.3.5+0x15c38>
    f6dc:	mov	w2, #0x2                   	// #2
    f6e0:	sub	w2, w2, w0
    f6e4:	ldr	x1, [x1, #4056]
    f6e8:	ldr	x0, [x1, w2, sxtw #3]
    f6ec:	ret
    f6f0:	mul	w0, w1, w2
    f6f4:	b	2460 <malloc@plt>
    f6f8:	mov	x0, x1
    f6fc:	b	2570 <free@plt>

000000000000f700 <compress2@@Base>:
    f700:	stp	x29, x30, [sp, #-192]!
    f704:	mov	x29, sp
    f708:	stp	x23, x24, [sp, #48]
    f70c:	mov	x23, x1
    f710:	mov	x24, x2
    f714:	stp	x19, x20, [sp, #16]
    f718:	adrp	x2, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
    f71c:	mov	x19, x0
    f720:	stp	x21, x22, [sp, #32]
    f724:	mov	x20, x3
    f728:	mov	w1, w4
    f72c:	ldr	x22, [x23]
    f730:	str	x25, [sp, #64]
    f734:	str	xzr, [x23]
    f738:	add	x25, sp, #0x50
    f73c:	add	x2, x2, #0x510
    f740:	mov	x0, x25
    f744:	mov	w3, #0x70                  	// #112
    f748:	stp	xzr, xzr, [sp, #144]
    f74c:	str	xzr, [sp, #160]
    f750:	bl	24f0 <deflateInit_@plt>
    f754:	cbnz	w0, f7e4 <compress2@@Base+0xe4>
    f758:	mov	w2, #0x0                   	// #0
    f75c:	mov	w3, #0x0                   	// #0
    f760:	mov	x21, #0xffffffff            	// #4294967295
    f764:	str	x24, [sp, #80]
    f768:	str	wzr, [sp, #88]
    f76c:	str	x19, [sp, #104]
    f770:	str	wzr, [sp, #112]
    f774:	nop
    f778:	cmp	x22, x21
    f77c:	mov	x0, x25
    f780:	csel	x5, x22, x21, ls  // ls = plast
    f784:	cmp	x20, x21
    f788:	csel	x4, x20, x21, ls  // ls = plast
    f78c:	mov	w1, #0x4                   	// #4
    f790:	cbnz	w3, f79c <compress2@@Base+0x9c>
    f794:	sub	x22, x22, x5
    f798:	str	w5, [sp, #112]
    f79c:	cbnz	w2, f7a8 <compress2@@Base+0xa8>
    f7a0:	sub	x20, x20, x4
    f7a4:	str	w4, [sp, #88]
    f7a8:	cbz	x20, f7b4 <compress2@@Base+0xb4>
    f7ac:	mov	x0, x25
    f7b0:	mov	w1, #0x0                   	// #0
    f7b4:	bl	2490 <deflate@plt>
    f7b8:	mov	w19, w0
    f7bc:	cbnz	w0, f7cc <compress2@@Base+0xcc>
    f7c0:	ldr	w2, [sp, #88]
    f7c4:	ldr	w3, [sp, #112]
    f7c8:	b	f778 <compress2@@Base+0x78>
    f7cc:	ldr	x0, [sp, #120]
    f7d0:	str	x0, [x23]
    f7d4:	mov	x0, x25
    f7d8:	bl	2590 <deflateEnd@plt>
    f7dc:	cmp	w19, #0x1
    f7e0:	csel	w0, wzr, w19, eq  // eq = none
    f7e4:	ldp	x19, x20, [sp, #16]
    f7e8:	ldp	x21, x22, [sp, #32]
    f7ec:	ldp	x23, x24, [sp, #48]
    f7f0:	ldr	x25, [sp, #64]
    f7f4:	ldp	x29, x30, [sp], #192
    f7f8:	ret
    f7fc:	nop

000000000000f800 <compress@@Base>:
    f800:	mov	w4, #0xffffffff            	// #-1
    f804:	b	25d0 <compress2@plt>

000000000000f808 <compressBound@@ZLIB_1.2.0>:
    f808:	lsr	x1, x0, #14
    f80c:	add	x2, x0, #0xd
    f810:	add	x1, x1, x0, lsr #12
    f814:	add	x1, x1, x2
    f818:	add	x0, x1, x0, lsr #25
    f81c:	ret

000000000000f820 <uncompress2@@ZLIB_1.2.9>:
    f820:	stp	x29, x30, [sp, #-224]!
    f824:	mov	x29, sp
    f828:	stp	x23, x24, [sp, #48]
    f82c:	mov	x24, x3
    f830:	mov	x3, x2
    f834:	stp	x21, x22, [sp, #32]
    f838:	ldr	x21, [x1]
    f83c:	stp	x25, x26, [sp, #64]
    f840:	mov	x25, x1
    f844:	ldr	x22, [x24]
    f848:	str	x27, [sp, #80]
    f84c:	cbz	x21, f968 <uncompress2@@ZLIB_1.2.9+0x148>
    f850:	mov	x26, x0
    f854:	str	xzr, [x1]
    f858:	add	x27, sp, #0x70
    f85c:	adrp	x1, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
    f860:	mov	x0, x27
    f864:	add	x1, x1, #0x510
    f868:	mov	w2, #0x70                  	// #112
    f86c:	str	x3, [sp, #112]
    f870:	str	wzr, [sp, #120]
    f874:	stp	xzr, xzr, [sp, #176]
    f878:	str	xzr, [sp, #192]
    f87c:	bl	25c0 <inflateInit_@plt>
    f880:	mov	w23, w0
    f884:	cbnz	w0, f94c <uncompress2@@ZLIB_1.2.9+0x12c>
    f888:	mov	w2, #0x0                   	// #0
    f88c:	stp	x19, x20, [sp, #16]
    f890:	mov	x20, #0xffffffff            	// #4294967295
    f894:	str	x26, [sp, #136]
    f898:	str	wzr, [sp, #144]
    f89c:	nop
    f8a0:	cmp	x21, x20
    f8a4:	mov	x0, x27
    f8a8:	csel	x4, x21, x20, ls  // ls = plast
    f8ac:	cmp	x22, x20
    f8b0:	csel	x3, x22, x20, ls  // ls = plast
    f8b4:	mov	w1, #0x0                   	// #0
    f8b8:	cbnz	w2, f8c4 <uncompress2@@ZLIB_1.2.9+0xa4>
    f8bc:	sub	x21, x21, x4
    f8c0:	str	w4, [sp, #144]
    f8c4:	ldr	w2, [sp, #120]
    f8c8:	cbnz	w2, f8e8 <uncompress2@@ZLIB_1.2.9+0xc8>
    f8cc:	sub	x22, x22, x3
    f8d0:	str	w3, [sp, #120]
    f8d4:	bl	23f0 <inflate@plt>
    f8d8:	mov	w19, w0
    f8dc:	cbnz	w0, f8fc <uncompress2@@ZLIB_1.2.9+0xdc>
    f8e0:	ldr	w2, [sp, #144]
    f8e4:	b	f8a0 <uncompress2@@ZLIB_1.2.9+0x80>
    f8e8:	mov	x0, x27
    f8ec:	mov	w1, #0x0                   	// #0
    f8f0:	bl	23f0 <inflate@plt>
    f8f4:	mov	w19, w0
    f8f8:	cbz	w0, f8e0 <uncompress2@@ZLIB_1.2.9+0xc0>
    f8fc:	ldr	x0, [x24]
    f900:	add	x1, sp, #0x68
    f904:	ldr	w2, [sp, #120]
    f908:	cmp	x26, x1
    f90c:	ldr	x1, [sp, #152]
    f910:	sub	x0, x0, x2
    f914:	sub	x22, x0, x22
    f918:	str	x22, [x24]
    f91c:	b.eq	f974 <uncompress2@@ZLIB_1.2.9+0x154>  // b.none
    f920:	str	x1, [x25]
    f924:	mov	x0, x27
    f928:	bl	2550 <inflateEnd@plt>
    f92c:	cmp	w19, #0x1
    f930:	b.eq	f948 <uncompress2@@ZLIB_1.2.9+0x128>  // b.none
    f934:	cmp	w19, #0x2
    f938:	b.eq	f988 <uncompress2@@ZLIB_1.2.9+0x168>  // b.none
    f93c:	mov	w23, w19
    f940:	cmn	w19, #0x5
    f944:	b.eq	f994 <uncompress2@@ZLIB_1.2.9+0x174>  // b.none
    f948:	ldp	x19, x20, [sp, #16]
    f94c:	mov	w0, w23
    f950:	ldp	x21, x22, [sp, #32]
    f954:	ldp	x23, x24, [sp, #48]
    f958:	ldp	x25, x26, [sp, #64]
    f95c:	ldr	x27, [sp, #80]
    f960:	ldp	x29, x30, [sp], #224
    f964:	ret
    f968:	add	x26, sp, #0x68
    f96c:	mov	x21, #0x1                   	// #1
    f970:	b	f858 <uncompress2@@ZLIB_1.2.9+0x38>
    f974:	cmp	x1, #0x0
    f978:	ccmn	w19, #0x5, #0x0, ne  // ne = any
    f97c:	b.ne	f924 <uncompress2@@ZLIB_1.2.9+0x104>  // b.any
    f980:	mov	x0, x27
    f984:	bl	2550 <inflateEnd@plt>
    f988:	mov	w23, #0xfffffffd            	// #-3
    f98c:	ldp	x19, x20, [sp, #16]
    f990:	b	f94c <uncompress2@@ZLIB_1.2.9+0x12c>
    f994:	ldr	w0, [sp, #144]
    f998:	cmn	x0, x21
    f99c:	b.ne	f988 <uncompress2@@ZLIB_1.2.9+0x168>  // b.any
    f9a0:	ldp	x19, x20, [sp, #16]
    f9a4:	b	f94c <uncompress2@@ZLIB_1.2.9+0x12c>

000000000000f9a8 <uncompress@@Base>:
    f9a8:	stp	x29, x30, [sp, #-32]!
    f9ac:	mov	x29, sp
    f9b0:	str	x3, [sp, #24]
    f9b4:	add	x3, sp, #0x18
    f9b8:	bl	2540 <uncompress2@plt>
    f9bc:	ldp	x29, x30, [sp], #32
    f9c0:	ret
    f9c4:	nop

000000000000f9c8 <gzclose@@Base>:
    f9c8:	cbz	x0, f9e4 <gzclose@@Base+0x1c>
    f9cc:	ldr	w2, [x0, #24]
    f9d0:	mov	w1, #0x1c4f                	// #7247
    f9d4:	cmp	w2, w1
    f9d8:	b.eq	f9e0 <gzclose@@Base+0x18>  // b.none
    f9dc:	b	2580 <gzclose_w@plt>
    f9e0:	b	2400 <gzclose_r@plt>
    f9e4:	mov	w0, #0xfffffffe            	// #-2
    f9e8:	ret
    f9ec:	nop
    f9f0:	stp	x29, x30, [sp, #-64]!
    f9f4:	mov	x29, sp
    f9f8:	stp	x19, x20, [sp, #16]
    f9fc:	cbz	x0, fc78 <gzclose@@Base+0x2b0>
    fa00:	mov	x20, x2
    fa04:	stp	x21, x22, [sp, #32]
    fa08:	mov	w22, w1
    fa0c:	stp	x23, x24, [sp, #48]
    fa10:	mov	x23, x0
    fa14:	mov	x0, #0xe8                  	// #232
    fa18:	bl	2460 <malloc@plt>
    fa1c:	mov	x19, x0
    fa20:	cbz	x0, fc70 <gzclose@@Base+0x2a8>
    fa24:	adrp	x0, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
    fa28:	movi	d0, #0xffffffff
    fa2c:	ldrb	w4, [x20]
    fa30:	mov	w21, #0x0                   	// #0
    fa34:	ldr	d1, [x0, #1496]
    fa38:	mov	w24, #0x0                   	// #0
    fa3c:	str	wzr, [x19, #24]
    fa40:	str	wzr, [x19, #64]
    fa44:	str	xzr, [x19, #112]
    fa48:	str	d1, [x19, #40]
    fa4c:	str	d0, [x19, #88]
    fa50:	cbz	w4, fc14 <gzclose@@Base+0x24c>
    fa54:	mov	w8, #0x1c4f                	// #7247
    fa58:	mov	w7, #0x79b1                	// #31153
    fa5c:	mov	w6, #0x1                   	// #1
    fa60:	mov	w3, #0x2                   	// #2
    fa64:	mov	w1, #0x3                   	// #3
    fa68:	mov	w0, #0x4                   	// #4
    fa6c:	b	fa7c <gzclose@@Base+0xb4>
    fa70:	str	w5, [x19, #88]
    fa74:	ldrb	w4, [x20, #1]!
    fa78:	cbz	w4, fac0 <gzclose@@Base+0xf8>
    fa7c:	sub	w5, w4, #0x30
    fa80:	and	w2, w5, #0xff
    fa84:	cmp	w2, #0x9
    fa88:	b.ls	fa70 <gzclose@@Base+0xa8>  // b.plast
    fa8c:	cmp	w4, #0x65
    fa90:	b.eq	fc60 <gzclose@@Base+0x298>  // b.none
    fa94:	b.hi	fbbc <gzclose@@Base+0x1f4>  // b.pmore
    fa98:	cmp	w4, #0x52
    fa9c:	b.eq	fc58 <gzclose@@Base+0x290>  // b.none
    faa0:	b.ls	fbdc <gzclose@@Base+0x214>  // b.plast
    faa4:	cmp	w4, #0x54
    faa8:	b.eq	fc48 <gzclose@@Base+0x280>  // b.none
    faac:	cmp	w4, #0x61
    fab0:	b.ne	fa74 <gzclose@@Base+0xac>  // b.any
    fab4:	ldrb	w4, [x20, #1]!
    fab8:	str	w6, [x19, #24]
    fabc:	cbnz	w4, fa7c <gzclose@@Base+0xb4>
    fac0:	ldr	w0, [x19, #24]
    fac4:	cbz	w0, fc14 <gzclose@@Base+0x24c>
    fac8:	mov	w1, #0x1c4f                	// #7247
    facc:	cmp	w0, w1
    fad0:	b.ne	fae4 <gzclose@@Base+0x11c>  // b.any
    fad4:	ldr	w0, [x19, #64]
    fad8:	cbnz	w0, fc14 <gzclose@@Base+0x24c>
    fadc:	mov	w0, #0x1                   	// #1
    fae0:	str	w0, [x19, #64]
    fae4:	mov	x0, x23
    fae8:	bl	23e0 <strlen@plt>
    faec:	add	x20, x0, #0x1
    faf0:	mov	x0, x20
    faf4:	bl	2460 <malloc@plt>
    faf8:	str	x0, [x19, #32]
    fafc:	cbz	x0, fc14 <gzclose@@Base+0x24c>
    fb00:	mov	x1, x20
    fb04:	mov	x3, x23
    fb08:	adrp	x2, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
    fb0c:	add	x2, x2, #0x5a8
    fb10:	bl	2450 <snprintf@plt>
    fb14:	ldr	w0, [x19, #24]
    fb18:	cmp	w24, #0x0
    fb1c:	mov	w2, #0x80000               	// #524288
    fb20:	mov	w1, #0x1c4f                	// #7247
    fb24:	csel	w24, w24, w2, eq  // eq = none
    fb28:	cmp	w0, w1
    fb2c:	b.eq	fb5c <gzclose@@Base+0x194>  // b.none
    fb30:	cmp	w21, #0x0
    fb34:	mov	w2, #0x441                 	// #1089
    fb38:	mov	w1, #0x4c1                 	// #1217
    fb3c:	mov	w4, #0x241                 	// #577
    fb40:	csel	w1, w1, w2, ne  // ne = any
    fb44:	mov	w3, #0x79b1                	// #31153
    fb48:	mov	w2, #0x2c1                 	// #705
    fb4c:	csel	w2, w2, w4, ne  // ne = any
    fb50:	cmp	w0, w3
    fb54:	csel	w1, w1, w2, ne  // ne = any
    fb58:	orr	w24, w24, w1
    fb5c:	tbnz	w22, #31, fc8c <gzclose@@Base+0x2c4>
    fb60:	str	w22, [x19, #28]
    fb64:	cmp	w0, #0x1
    fb68:	b.eq	fcb4 <gzclose@@Base+0x2ec>  // b.none
    fb6c:	mov	w1, #0x1c4f                	// #7247
    fb70:	cmp	w0, w1
    fb74:	b.eq	fcd4 <gzclose@@Base+0x30c>  // b.none
    fb78:	str	wzr, [x19]
    fb7c:	ldr	x0, [x19, #112]
    fb80:	str	wzr, [x19, #104]
    fb84:	cbz	x0, fb98 <gzclose@@Base+0x1d0>
    fb88:	ldr	w1, [x19, #108]
    fb8c:	cmn	w1, #0x4
    fb90:	b.ne	fc68 <gzclose@@Base+0x2a0>  // b.any
    fb94:	str	xzr, [x19, #112]
    fb98:	ldp	x21, x22, [sp, #32]
    fb9c:	mov	x0, x19
    fba0:	ldp	x23, x24, [sp, #48]
    fba4:	str	xzr, [x19, #16]
    fba8:	str	wzr, [x19, #108]
    fbac:	str	wzr, [x19, #128]
    fbb0:	ldp	x19, x20, [sp, #16]
    fbb4:	ldp	x29, x30, [sp], #64
    fbb8:	ret
    fbbc:	cmp	w4, #0x72
    fbc0:	b.eq	fc50 <gzclose@@Base+0x288>  // b.none
    fbc4:	b.ls	fbf4 <gzclose@@Base+0x22c>  // b.plast
    fbc8:	cmp	w4, #0x77
    fbcc:	b.eq	fc40 <gzclose@@Base+0x278>  // b.none
    fbd0:	cmp	w4, #0x78
    fbd4:	csel	w21, w21, w6, ne  // ne = any
    fbd8:	b	fa74 <gzclose@@Base+0xac>
    fbdc:	cmp	w4, #0x2b
    fbe0:	b.eq	fc14 <gzclose@@Base+0x24c>  // b.none
    fbe4:	cmp	w4, #0x46
    fbe8:	b.ne	fa74 <gzclose@@Base+0xac>  // b.any
    fbec:	str	w0, [x19, #92]
    fbf0:	b	fa74 <gzclose@@Base+0xac>
    fbf4:	cmp	w4, #0x66
    fbf8:	b.eq	fc38 <gzclose@@Base+0x270>  // b.none
    fbfc:	cmp	w4, #0x68
    fc00:	b.ne	fa74 <gzclose@@Base+0xac>  // b.any
    fc04:	str	w3, [x19, #92]
    fc08:	b	fa74 <gzclose@@Base+0xac>
    fc0c:	ldr	x0, [x19, #32]
    fc10:	bl	2570 <free@plt>
    fc14:	mov	x0, x19
    fc18:	mov	x19, #0x0                   	// #0
    fc1c:	bl	2570 <free@plt>
    fc20:	mov	x0, x19
    fc24:	ldp	x19, x20, [sp, #16]
    fc28:	ldp	x21, x22, [sp, #32]
    fc2c:	ldp	x23, x24, [sp, #48]
    fc30:	ldp	x29, x30, [sp], #64
    fc34:	ret
    fc38:	str	w6, [x19, #92]
    fc3c:	b	fa74 <gzclose@@Base+0xac>
    fc40:	str	w7, [x19, #24]
    fc44:	b	fa74 <gzclose@@Base+0xac>
    fc48:	str	w6, [x19, #64]
    fc4c:	b	fa74 <gzclose@@Base+0xac>
    fc50:	str	w8, [x19, #24]
    fc54:	b	fa74 <gzclose@@Base+0xac>
    fc58:	str	w1, [x19, #92]
    fc5c:	b	fa74 <gzclose@@Base+0xac>
    fc60:	mov	w24, #0x1                   	// #1
    fc64:	b	fa74 <gzclose@@Base+0xac>
    fc68:	bl	2570 <free@plt>
    fc6c:	b	fb94 <gzclose@@Base+0x1cc>
    fc70:	ldp	x21, x22, [sp, #32]
    fc74:	ldp	x23, x24, [sp, #48]
    fc78:	mov	x19, #0x0                   	// #0
    fc7c:	mov	x0, x19
    fc80:	ldp	x19, x20, [sp, #16]
    fc84:	ldp	x29, x30, [sp], #64
    fc88:	ret
    fc8c:	mov	w1, w24
    fc90:	mov	x0, x23
    fc94:	mov	w2, #0x1b6                 	// #438
    fc98:	bl	2470 <open@plt>
    fc9c:	str	w0, [x19, #28]
    fca0:	mov	w22, w0
    fca4:	cmn	w0, #0x1
    fca8:	b.eq	fc0c <gzclose@@Base+0x244>  // b.none
    fcac:	ldr	w0, [x19, #24]
    fcb0:	b	fb64 <gzclose@@Base+0x19c>
    fcb4:	mov	w0, w22
    fcb8:	mov	w2, #0x2                   	// #2
    fcbc:	mov	x1, #0x0                   	// #0
    fcc0:	bl	24b0 <lseek64@plt>
    fcc4:	mov	w0, #0x79b1                	// #31153
    fcc8:	str	wzr, [x19]
    fccc:	str	w0, [x19, #24]
    fcd0:	b	fb7c <gzclose@@Base+0x1b4>
    fcd4:	mov	x1, #0x0                   	// #0
    fcd8:	mov	w0, w22
    fcdc:	mov	w2, #0x1                   	// #1
    fce0:	bl	24b0 <lseek64@plt>
    fce4:	str	x0, [x19, #72]
    fce8:	cmn	x0, #0x1
    fcec:	ldr	w1, [x19, #24]
    fcf0:	b.ne	fcf8 <gzclose@@Base+0x330>  // b.any
    fcf4:	str	xzr, [x19, #72]
    fcf8:	str	wzr, [x19]
    fcfc:	mov	w0, #0x1c4f                	// #7247
    fd00:	cmp	w1, w0
    fd04:	b.ne	fb7c <gzclose@@Base+0x1b4>  // b.any
    fd08:	str	wzr, [x19, #68]
    fd0c:	str	xzr, [x19, #80]
    fd10:	b	fb7c <gzclose@@Base+0x1b4>
    fd14:	nop

000000000000fd18 <gzopen@@Base>:
    fd18:	mov	x2, x1
    fd1c:	mov	w1, #0xffffffff            	// #-1
    fd20:	b	f9f0 <gzclose@@Base+0x28>
    fd24:	nop

000000000000fd28 <gzopen64@@ZLIB_1.2.3.3>:
    fd28:	mov	x2, x1
    fd2c:	mov	w1, #0xffffffff            	// #-1
    fd30:	b	f9f0 <gzclose@@Base+0x28>
    fd34:	nop

000000000000fd38 <gzdopen@@Base>:
    fd38:	stp	x29, x30, [sp, #-48]!
    fd3c:	cmn	w0, #0x1
    fd40:	mov	x29, sp
    fd44:	stp	x19, x20, [sp, #16]
    fd48:	b.eq	fdb0 <gzdopen@@Base+0x78>  // b.none
    fd4c:	mov	w19, w0
    fd50:	mov	x0, #0x13                  	// #19
    fd54:	str	x21, [sp, #32]
    fd58:	mov	x21, x1
    fd5c:	bl	2460 <malloc@plt>
    fd60:	mov	x20, x0
    fd64:	cbz	x0, fdac <gzdopen@@Base+0x74>
    fd68:	mov	w3, w19
    fd6c:	mov	x1, #0x13                  	// #19
    fd70:	adrp	x2, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
    fd74:	add	x2, x2, #0x5b0
    fd78:	bl	2450 <snprintf@plt>
    fd7c:	mov	x2, x21
    fd80:	mov	w1, w19
    fd84:	mov	x0, x20
    fd88:	bl	f9f0 <gzclose@@Base+0x28>
    fd8c:	mov	x19, x0
    fd90:	mov	x0, x20
    fd94:	bl	2570 <free@plt>
    fd98:	mov	x0, x19
    fd9c:	ldp	x19, x20, [sp, #16]
    fda0:	ldr	x21, [sp, #32]
    fda4:	ldp	x29, x30, [sp], #48
    fda8:	ret
    fdac:	ldr	x21, [sp, #32]
    fdb0:	mov	x19, #0x0                   	// #0
    fdb4:	mov	x0, x19
    fdb8:	ldp	x19, x20, [sp, #16]
    fdbc:	ldp	x29, x30, [sp], #48
    fdc0:	ret
    fdc4:	nop

000000000000fdc8 <gzbuffer@@ZLIB_1.2.3.5>:
    fdc8:	mov	x2, x0
    fdcc:	cbz	x0, fe0c <gzbuffer@@ZLIB_1.2.3.5+0x44>
    fdd0:	ldr	w0, [x0, #24]
    fdd4:	mov	w4, #0x1c4f                	// #7247
    fdd8:	mov	w3, #0x79b1                	// #31153
    fddc:	cmp	w0, w4
    fde0:	ccmp	w0, w3, #0x4, ne  // ne = any
    fde4:	b.ne	fe0c <gzbuffer@@ZLIB_1.2.3.5+0x44>  // b.any
    fde8:	ldr	w0, [x2, #40]
    fdec:	cbnz	w0, fe0c <gzbuffer@@ZLIB_1.2.3.5+0x44>
    fdf0:	cmp	w1, w1, lsl #1
    fdf4:	b.hi	fe0c <gzbuffer@@ZLIB_1.2.3.5+0x44>  // b.pmore
    fdf8:	cmp	w1, #0x2
    fdfc:	mov	w3, #0x2                   	// #2
    fe00:	csel	w1, w1, w3, cs  // cs = hs, nlast
    fe04:	str	w1, [x2, #44]
    fe08:	ret
    fe0c:	mov	w0, #0xffffffff            	// #-1
    fe10:	ret
    fe14:	nop

000000000000fe18 <gzrewind@@Base>:
    fe18:	cbz	x0, fec4 <gzrewind@@Base+0xac>
    fe1c:	stp	x29, x30, [sp, #-32]!
    fe20:	mov	x29, sp
    fe24:	stp	x19, x20, [sp, #16]
    fe28:	mov	x19, x0
    fe2c:	mov	w0, #0x1c4f                	// #7247
    fe30:	ldr	w20, [x19, #24]
    fe34:	cmp	w20, w0
    fe38:	b.ne	febc <gzrewind@@Base+0xa4>  // b.any
    fe3c:	ldr	w0, [x19, #108]
    fe40:	cmp	w0, #0x0
    fe44:	ccmn	w0, #0x5, #0x4, ne  // ne = any
    fe48:	b.ne	febc <gzrewind@@Base+0xa4>  // b.any
    fe4c:	ldr	w0, [x19, #28]
    fe50:	mov	w2, #0x0                   	// #0
    fe54:	ldr	x1, [x19, #72]
    fe58:	bl	24b0 <lseek64@plt>
    fe5c:	cmn	x0, #0x1
    fe60:	b.eq	febc <gzrewind@@Base+0xa4>  // b.none
    fe64:	ldr	w0, [x19, #24]
    fe68:	str	wzr, [x19]
    fe6c:	cmp	w0, w20
    fe70:	b.ne	fe7c <gzrewind@@Base+0x64>  // b.any
    fe74:	str	wzr, [x19, #68]
    fe78:	str	xzr, [x19, #80]
    fe7c:	ldr	x0, [x19, #112]
    fe80:	str	wzr, [x19, #104]
    fe84:	cbz	x0, fe98 <gzrewind@@Base+0x80>
    fe88:	ldr	w1, [x19, #108]
    fe8c:	cmn	w1, #0x4
    fe90:	b.ne	feb4 <gzrewind@@Base+0x9c>  // b.any
    fe94:	str	xzr, [x19, #112]
    fe98:	mov	w0, #0x0                   	// #0
    fe9c:	str	xzr, [x19, #16]
    fea0:	str	wzr, [x19, #108]
    fea4:	str	wzr, [x19, #128]
    fea8:	ldp	x19, x20, [sp, #16]
    feac:	ldp	x29, x30, [sp], #32
    feb0:	ret
    feb4:	bl	2570 <free@plt>
    feb8:	b	fe94 <gzrewind@@Base+0x7c>
    febc:	mov	w0, #0xffffffff            	// #-1
    fec0:	b	fea8 <gzrewind@@Base+0x90>
    fec4:	mov	w0, #0xffffffff            	// #-1
    fec8:	ret
    fecc:	nop

000000000000fed0 <gzseek64@@ZLIB_1.2.3.3>:
    fed0:	cbz	x0, 10070 <gzseek64@@ZLIB_1.2.3.3+0x1a0>
    fed4:	stp	x29, x30, [sp, #-48]!
    fed8:	mov	x29, sp
    fedc:	stp	x19, x20, [sp, #16]
    fee0:	mov	x19, x0
    fee4:	mov	x20, x1
    fee8:	str	x21, [sp, #32]
    feec:	mov	w1, #0x1c4f                	// #7247
    fef0:	ldr	w21, [x19, #24]
    fef4:	mov	w0, #0x79b1                	// #31153
    fef8:	cmp	w21, w1
    fefc:	ccmp	w21, w0, #0x4, ne  // ne = any
    ff00:	b.ne	10010 <gzseek64@@ZLIB_1.2.3.3+0x140>  // b.any
    ff04:	ldr	w0, [x19, #108]
    ff08:	cmp	w0, #0x0
    ff0c:	ccmn	w0, #0x5, #0x4, ne  // ne = any
    ff10:	b.ne	10010 <gzseek64@@ZLIB_1.2.3.3+0x140>  // b.any
    ff14:	cmp	w2, #0x1
    ff18:	b.hi	10010 <gzseek64@@ZLIB_1.2.3.3+0x140>  // b.pmore
    ff1c:	cbz	w2, ff6c <gzseek64@@ZLIB_1.2.3.3+0x9c>
    ff20:	ldr	w0, [x19, #104]
    ff24:	cbz	w0, ff30 <gzseek64@@ZLIB_1.2.3.3+0x60>
    ff28:	ldr	x0, [x19, #96]
    ff2c:	add	x20, x20, x0
    ff30:	str	wzr, [x19, #104]
    ff34:	mov	w0, #0x1c4f                	// #7247
    ff38:	cmp	w21, w0
    ff3c:	b.eq	ff84 <gzseek64@@ZLIB_1.2.3.3+0xb4>  // b.none
    ff40:	tbnz	x20, #63, 10010 <gzseek64@@ZLIB_1.2.3.3+0x140>
    ff44:	ldr	x0, [x19, #16]
    ff48:	cbz	x20, ff58 <gzseek64@@ZLIB_1.2.3.3+0x88>
    ff4c:	mov	w1, #0x1                   	// #1
    ff50:	str	x20, [x19, #96]
    ff54:	str	w1, [x19, #104]
    ff58:	add	x0, x20, x0
    ff5c:	ldp	x19, x20, [sp, #16]
    ff60:	ldr	x21, [sp, #32]
    ff64:	ldp	x29, x30, [sp], #48
    ff68:	ret
    ff6c:	ldr	x0, [x19, #16]
    ff70:	str	wzr, [x19, #104]
    ff74:	sub	x20, x20, x0
    ff78:	mov	w0, #0x1c4f                	// #7247
    ff7c:	cmp	w21, w0
    ff80:	b.ne	ff40 <gzseek64@@ZLIB_1.2.3.3+0x70>  // b.any
    ff84:	ldr	w2, [x19, #68]
    ff88:	ldr	x0, [x19, #16]
    ff8c:	cmp	w2, #0x1
    ff90:	b.eq	10000 <gzseek64@@ZLIB_1.2.3.3+0x130>  // b.none
    ff94:	tbz	x20, #63, ffc0 <gzseek64@@ZLIB_1.2.3.3+0xf0>
    ff98:	adds	x20, x20, x0
    ff9c:	b.mi	10010 <gzseek64@@ZLIB_1.2.3.3+0x140>  // b.first
    ffa0:	mov	x0, x19
    ffa4:	bl	25a0 <gzrewind@plt>
    ffa8:	cmn	w0, #0x1
    ffac:	b.eq	10010 <gzseek64@@ZLIB_1.2.3.3+0x140>  // b.none
    ffb0:	ldr	w1, [x19, #24]
    ffb4:	ldr	x0, [x19, #16]
    ffb8:	cmp	w1, w21
    ffbc:	b.ne	ff48 <gzseek64@@ZLIB_1.2.3.3+0x78>  // b.any
    ffc0:	ldr	w2, [x19]
    ffc4:	mov	w4, #0x0                   	// #0
    ffc8:	mov	w1, w2
    ffcc:	cmp	x1, x20
    ffd0:	mov	x3, x1
    ffd4:	b.le	ffe4 <gzseek64@@ZLIB_1.2.3.3+0x114>
    ffd8:	sub	w4, w2, w20
    ffdc:	mov	x3, x20
    ffe0:	mov	w1, w20
    ffe4:	ldr	x2, [x19, #8]
    ffe8:	add	x0, x0, x3
    ffec:	sub	x20, x20, x3
    fff0:	str	w4, [x19]
    fff4:	add	x1, x2, x1
    fff8:	stp	x1, x0, [x19, #8]
    fffc:	b	ff48 <gzseek64@@ZLIB_1.2.3.3+0x78>
   10000:	cmn	x20, x0
   10004:	b.pl	10018 <gzseek64@@ZLIB_1.2.3.3+0x148>  // b.nfrst
   10008:	tbz	x20, #63, ffc0 <gzseek64@@ZLIB_1.2.3.3+0xf0>
   1000c:	nop
   10010:	mov	x0, #0xffffffffffffffff    	// #-1
   10014:	b	ff5c <gzseek64@@ZLIB_1.2.3.3+0x8c>
   10018:	ldr	w0, [x19, #28]
   1001c:	ldr	w1, [x19]
   10020:	sub	x1, x20, x1
   10024:	bl	24b0 <lseek64@plt>
   10028:	cmn	x0, #0x1
   1002c:	b.eq	10010 <gzseek64@@ZLIB_1.2.3.3+0x140>  // b.none
   10030:	ldr	x0, [x19, #112]
   10034:	str	wzr, [x19]
   10038:	str	xzr, [x19, #80]
   1003c:	str	wzr, [x19, #104]
   10040:	cbz	x0, 10058 <gzseek64@@ZLIB_1.2.3.3+0x188>
   10044:	ldr	w1, [x19, #108]
   10048:	cmn	w1, #0x4
   1004c:	b.eq	10054 <gzseek64@@ZLIB_1.2.3.3+0x184>  // b.none
   10050:	bl	2570 <free@plt>
   10054:	str	xzr, [x19, #112]
   10058:	ldr	x0, [x19, #16]
   1005c:	str	wzr, [x19, #108]
   10060:	str	wzr, [x19, #128]
   10064:	add	x0, x20, x0
   10068:	str	x0, [x19, #16]
   1006c:	b	ff5c <gzseek64@@ZLIB_1.2.3.3+0x8c>
   10070:	mov	x0, #0xffffffffffffffff    	// #-1
   10074:	ret

0000000000010078 <gzseek@@Base>:
   10078:	b	23d0 <gzseek64@plt>
   1007c:	nop

0000000000010080 <gztell64@@ZLIB_1.2.3.3>:
   10080:	mov	x1, x0
   10084:	cbz	x0, 100b8 <gztell64@@ZLIB_1.2.3.3+0x38>
   10088:	ldr	w0, [x0, #24]
   1008c:	mov	w3, #0x1c4f                	// #7247
   10090:	mov	w2, #0x79b1                	// #31153
   10094:	cmp	w0, w3
   10098:	ccmp	w0, w2, #0x4, ne  // ne = any
   1009c:	b.ne	100b8 <gztell64@@ZLIB_1.2.3.3+0x38>  // b.any
   100a0:	ldr	w2, [x1, #104]
   100a4:	ldr	x0, [x1, #16]
   100a8:	cbz	w2, 100b4 <gztell64@@ZLIB_1.2.3.3+0x34>
   100ac:	ldr	x1, [x1, #96]
   100b0:	add	x0, x0, x1
   100b4:	ret
   100b8:	mov	x0, #0xffffffffffffffff    	// #-1
   100bc:	ret

00000000000100c0 <gztell@@Base>:
   100c0:	b	24c0 <gztell64@plt>
   100c4:	nop

00000000000100c8 <gzoffset64@@ZLIB_1.2.3.5>:
   100c8:	cbz	x0, 10134 <gzoffset64@@ZLIB_1.2.3.5+0x6c>
   100cc:	stp	x29, x30, [sp, #-32]!
   100d0:	mov	w1, #0x79b1                	// #31153
   100d4:	mov	x29, sp
   100d8:	stp	x19, x20, [sp, #16]
   100dc:	mov	x19, x0
   100e0:	ldr	w0, [x0, #24]
   100e4:	mov	w20, #0x1c4f                	// #7247
   100e8:	cmp	w0, w20
   100ec:	ccmp	w0, w1, #0x4, ne  // ne = any
   100f0:	b.ne	1012c <gzoffset64@@ZLIB_1.2.3.5+0x64>  // b.any
   100f4:	ldr	w0, [x19, #28]
   100f8:	mov	w2, #0x1                   	// #1
   100fc:	mov	x1, #0x0                   	// #0
   10100:	bl	24b0 <lseek64@plt>
   10104:	cmn	x0, #0x1
   10108:	b.eq	1012c <gzoffset64@@ZLIB_1.2.3.5+0x64>  // b.none
   1010c:	ldr	w1, [x19, #24]
   10110:	cmp	w1, w20
   10114:	b.ne	10120 <gzoffset64@@ZLIB_1.2.3.5+0x58>  // b.any
   10118:	ldr	w1, [x19, #128]
   1011c:	sub	x0, x0, x1
   10120:	ldp	x19, x20, [sp, #16]
   10124:	ldp	x29, x30, [sp], #32
   10128:	ret
   1012c:	mov	x0, #0xffffffffffffffff    	// #-1
   10130:	b	10120 <gzoffset64@@ZLIB_1.2.3.5+0x58>
   10134:	mov	x0, #0xffffffffffffffff    	// #-1
   10138:	ret
   1013c:	nop

0000000000010140 <gzoffset@@ZLIB_1.2.3.5>:
   10140:	b	25b0 <gzoffset64@plt>
   10144:	nop

0000000000010148 <gzeof@@Base>:
   10148:	mov	x1, x0
   1014c:	cbz	x0, 10170 <gzeof@@Base+0x28>
   10150:	ldr	w3, [x1, #24]
   10154:	mov	w2, #0x1c4f                	// #7247
   10158:	mov	w0, #0x0                   	// #0
   1015c:	cmp	w3, w2
   10160:	b.eq	10168 <gzeof@@Base+0x20>  // b.none
   10164:	ret
   10168:	ldr	w0, [x1, #84]
   1016c:	ret
   10170:	mov	w0, #0x0                   	// #0
   10174:	ret

0000000000010178 <gzerror@@Base>:
   10178:	cbz	x0, 101d0 <gzerror@@Base+0x58>
   1017c:	ldr	w2, [x0, #24]
   10180:	mov	w4, #0x1c4f                	// #7247
   10184:	mov	w3, #0x79b1                	// #31153
   10188:	cmp	w2, w4
   1018c:	ccmp	w2, w3, #0x4, ne  // ne = any
   10190:	b.ne	101d0 <gzerror@@Base+0x58>  // b.any
   10194:	ldr	w2, [x0, #108]
   10198:	cbz	x1, 101a4 <gzerror@@Base+0x2c>
   1019c:	str	w2, [x1]
   101a0:	ldr	w2, [x0, #108]
   101a4:	cmn	w2, #0x4
   101a8:	b.eq	101c4 <gzerror@@Base+0x4c>  // b.none
   101ac:	ldr	x0, [x0, #112]
   101b0:	adrp	x1, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
   101b4:	add	x1, x1, #0x678
   101b8:	cmp	x0, #0x0
   101bc:	csel	x0, x1, x0, eq  // eq = none
   101c0:	ret
   101c4:	adrp	x0, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
   101c8:	add	x0, x0, #0x5b8
   101cc:	ret
   101d0:	mov	x0, #0x0                   	// #0
   101d4:	ret

00000000000101d8 <gzclearerr@@ZLIB_1.2.0.2>:
   101d8:	cbz	x0, 10250 <gzclearerr@@ZLIB_1.2.0.2+0x78>
   101dc:	stp	x29, x30, [sp, #-32]!
   101e0:	mov	w1, #0x1c4f                	// #7247
   101e4:	mov	w2, #0x79b1                	// #31153
   101e8:	mov	x29, sp
   101ec:	str	x19, [sp, #16]
   101f0:	mov	x19, x0
   101f4:	ldr	w0, [x0, #24]
   101f8:	cmp	w0, w1
   101fc:	ccmp	w0, w2, #0x4, ne  // ne = any
   10200:	b.ne	10228 <gzclearerr@@ZLIB_1.2.0.2+0x50>  // b.any
   10204:	cmp	w0, w1
   10208:	b.eq	10240 <gzclearerr@@ZLIB_1.2.0.2+0x68>  // b.none
   1020c:	ldr	x0, [x19, #112]
   10210:	cbz	x0, 10224 <gzclearerr@@ZLIB_1.2.0.2+0x4c>
   10214:	ldr	w1, [x19, #108]
   10218:	cmn	w1, #0x4
   1021c:	b.ne	10234 <gzclearerr@@ZLIB_1.2.0.2+0x5c>  // b.any
   10220:	str	xzr, [x19, #112]
   10224:	str	wzr, [x19, #108]
   10228:	ldr	x19, [sp, #16]
   1022c:	ldp	x29, x30, [sp], #32
   10230:	ret
   10234:	bl	2570 <free@plt>
   10238:	str	xzr, [x19, #112]
   1023c:	b	10224 <gzclearerr@@ZLIB_1.2.0.2+0x4c>
   10240:	ldr	x0, [x19, #112]
   10244:	str	xzr, [x19, #80]
   10248:	cbnz	x0, 10214 <gzclearerr@@ZLIB_1.2.0.2+0x3c>
   1024c:	b	10224 <gzclearerr@@ZLIB_1.2.0.2+0x4c>
   10250:	ret
   10254:	nop
   10258:	stp	x29, x30, [sp, #-48]!
   1025c:	mov	x29, sp
   10260:	stp	x19, x20, [sp, #16]
   10264:	mov	x19, x0
   10268:	mov	w20, w1
   1026c:	ldr	x0, [x0, #112]
   10270:	stp	x21, x22, [sp, #32]
   10274:	mov	x21, x2
   10278:	cbz	x0, 1028c <gzclearerr@@ZLIB_1.2.0.2+0xb4>
   1027c:	ldr	w1, [x19, #108]
   10280:	cmn	w1, #0x4
   10284:	b.ne	10324 <gzclearerr@@ZLIB_1.2.0.2+0x14c>  // b.any
   10288:	str	xzr, [x19, #112]
   1028c:	cmp	w20, #0x0
   10290:	ccmn	w20, #0x5, #0x4, ne  // ne = any
   10294:	b.eq	1029c <gzclearerr@@ZLIB_1.2.0.2+0xc4>  // b.none
   10298:	str	wzr, [x19]
   1029c:	str	w20, [x19, #108]
   102a0:	cmp	x21, #0x0
   102a4:	ccmn	w20, #0x4, #0x4, ne  // ne = any
   102a8:	b.eq	10334 <gzclearerr@@ZLIB_1.2.0.2+0x15c>  // b.none
   102ac:	ldr	x22, [x19, #32]
   102b0:	mov	x0, x22
   102b4:	bl	23e0 <strlen@plt>
   102b8:	mov	x20, x0
   102bc:	mov	x0, x21
   102c0:	bl	23e0 <strlen@plt>
   102c4:	add	x0, x20, x0
   102c8:	add	x0, x0, #0x3
   102cc:	bl	2460 <malloc@plt>
   102d0:	str	x0, [x19, #112]
   102d4:	mov	x20, x0
   102d8:	cbz	x0, 1032c <gzclearerr@@ZLIB_1.2.0.2+0x154>
   102dc:	mov	x0, x22
   102e0:	bl	23e0 <strlen@plt>
   102e4:	mov	x19, x0
   102e8:	mov	x0, x21
   102ec:	bl	23e0 <strlen@plt>
   102f0:	add	x1, x19, x0
   102f4:	mov	x5, x21
   102f8:	mov	x3, x22
   102fc:	mov	x0, x20
   10300:	add	x1, x1, #0x3
   10304:	ldp	x19, x20, [sp, #16]
   10308:	adrp	x4, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
   1030c:	ldp	x21, x22, [sp, #32]
   10310:	add	x4, x4, #0x5c8
   10314:	ldp	x29, x30, [sp], #48
   10318:	adrp	x2, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
   1031c:	add	x2, x2, #0x5d0
   10320:	b	2450 <snprintf@plt>
   10324:	bl	2570 <free@plt>
   10328:	b	10288 <gzclearerr@@ZLIB_1.2.0.2+0xb0>
   1032c:	mov	w0, #0xfffffffc            	// #-4
   10330:	str	w0, [x19, #108]
   10334:	ldp	x19, x20, [sp, #16]
   10338:	ldp	x21, x22, [sp, #32]
   1033c:	ldp	x29, x30, [sp], #48
   10340:	ret
   10344:	nop
   10348:	stp	x29, x30, [sp, #-80]!
   1034c:	mov	x29, sp
   10350:	stp	x19, x20, [sp, #16]
   10354:	mov	x19, x0
   10358:	str	x25, [sp, #64]
   1035c:	add	x25, x0, #0x78
   10360:	ldr	w0, [x0, #40]
   10364:	cbz	w0, 103b0 <gzclearerr@@ZLIB_1.2.0.2+0x1d8>
   10368:	ldr	w2, [x25, #8]
   1036c:	cmp	w2, #0x1
   10370:	b.ls	10420 <gzclearerr@@ZLIB_1.2.0.2+0x248>  // b.plast
   10374:	ldr	x1, [x19, #120]
   10378:	ldrb	w0, [x1]
   1037c:	cmp	w0, #0x1f
   10380:	b.eq	10514 <gzclearerr@@ZLIB_1.2.0.2+0x33c>  // b.none
   10384:	ldr	w0, [x19, #64]
   10388:	cbnz	w0, 104dc <gzclearerr@@ZLIB_1.2.0.2+0x304>
   1038c:	str	wzr, [x25, #8]
   10390:	mov	w1, #0x1                   	// #1
   10394:	mov	w0, #0x0                   	// #0
   10398:	str	wzr, [x19]
   1039c:	str	w1, [x19, #80]
   103a0:	ldp	x19, x20, [sp, #16]
   103a4:	ldr	x25, [sp, #64]
   103a8:	ldp	x29, x30, [sp], #80
   103ac:	ret
   103b0:	stp	x21, x22, [sp, #32]
   103b4:	ldr	w21, [x19, #44]
   103b8:	mov	w0, w21
   103bc:	bl	2460 <malloc@plt>
   103c0:	mov	x20, x0
   103c4:	str	x20, [x19, #48]
   103c8:	lsl	w0, w21, #1
   103cc:	bl	2460 <malloc@plt>
   103d0:	str	x0, [x19, #56]
   103d4:	cmp	x0, #0x0
   103d8:	ccmp	x20, #0x0, #0x4, ne  // ne = any
   103dc:	b.eq	105cc <gzclearerr@@ZLIB_1.2.0.2+0x3f4>  // b.none
   103e0:	str	w21, [x19, #40]
   103e4:	adrp	x2, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
   103e8:	str	xzr, [x19, #120]
   103ec:	add	x2, x2, #0x510
   103f0:	str	wzr, [x19, #128]
   103f4:	mov	x0, x25
   103f8:	stp	xzr, xzr, [x19, #184]
   103fc:	mov	w3, #0x70                  	// #112
   10400:	mov	w1, #0x1f                  	// #31
   10404:	str	xzr, [x19, #200]
   10408:	bl	2600 <inflateInit2_@plt>
   1040c:	cbnz	w0, 1056c <gzclearerr@@ZLIB_1.2.0.2+0x394>
   10410:	ldr	w2, [x25, #8]
   10414:	ldp	x21, x22, [sp, #32]
   10418:	cmp	w2, #0x1
   1041c:	b.hi	10374 <gzclearerr@@ZLIB_1.2.0.2+0x19c>  // b.pmore
   10420:	ldr	w0, [x19, #108]
   10424:	cmp	w0, #0x0
   10428:	ccmn	w0, #0x5, #0x4, ne  // ne = any
   1042c:	b.ne	10564 <gzclearerr@@ZLIB_1.2.0.2+0x38c>  // b.any
   10430:	ldr	w0, [x19, #80]
   10434:	cbnz	w0, 1053c <gzclearerr@@ZLIB_1.2.0.2+0x364>
   10438:	stp	x21, x22, [sp, #32]
   1043c:	stp	x23, x24, [sp, #48]
   10440:	ldr	x21, [x19, #48]
   10444:	cbz	w2, 1045c <gzclearerr@@ZLIB_1.2.0.2+0x284>
   10448:	ldr	x0, [x19, #120]
   1044c:	ldrb	w0, [x0]
   10450:	strb	w0, [x21]
   10454:	ldr	w2, [x25, #8]
   10458:	ldr	x21, [x19, #48]
   1045c:	mov	w22, w2
   10460:	ldr	w23, [x19, #40]
   10464:	mov	w20, #0x0                   	// #0
   10468:	mov	w24, #0x40000000            	// #1073741824
   1046c:	sub	w23, w23, w2
   10470:	b	10480 <gzclearerr@@ZLIB_1.2.0.2+0x2a8>
   10474:	add	w20, w20, w0
   10478:	cmp	w23, w20
   1047c:	b.ls	104b0 <gzclearerr@@ZLIB_1.2.0.2+0x2d8>  // b.plast
   10480:	sub	w2, w23, w20
   10484:	ldr	w0, [x19, #28]
   10488:	cmp	w2, w24
   1048c:	add	x1, x22, w20, uxtw
   10490:	csel	w2, w2, w24, ls  // ls = plast
   10494:	add	x1, x21, x1
   10498:	bl	25e0 <read@plt>
   1049c:	cmp	w0, #0x0
   104a0:	b.gt	10474 <gzclearerr@@ZLIB_1.2.0.2+0x29c>
   104a4:	cbnz	w0, 105a0 <gzclearerr@@ZLIB_1.2.0.2+0x3c8>
   104a8:	mov	w0, #0x1                   	// #1
   104ac:	str	w0, [x19, #80]
   104b0:	ldr	w2, [x25, #8]
   104b4:	ldp	x21, x22, [sp, #32]
   104b8:	add	w2, w20, w2
   104bc:	ldp	x23, x24, [sp, #48]
   104c0:	ldr	x0, [x19, #48]
   104c4:	str	w2, [x25, #8]
   104c8:	str	x0, [x19, #120]
   104cc:	cbz	w2, 1055c <gzclearerr@@ZLIB_1.2.0.2+0x384>
   104d0:	cmp	w2, #0x1
   104d4:	b.eq	10540 <gzclearerr@@ZLIB_1.2.0.2+0x368>  // b.none
   104d8:	b	10374 <gzclearerr@@ZLIB_1.2.0.2+0x19c>
   104dc:	ldr	x0, [x19, #56]
   104e0:	str	x0, [x19, #8]
   104e4:	mov	w2, w2
   104e8:	bl	23a0 <memcpy@plt>
   104ec:	ldr	w0, [x25, #8]
   104f0:	movi	v0.2s, #0x1
   104f4:	str	w0, [x19]
   104f8:	str	wzr, [x25, #8]
   104fc:	mov	w0, #0x0                   	// #0
   10500:	ldr	x25, [sp, #64]
   10504:	str	d0, [x19, #64]
   10508:	ldp	x19, x20, [sp, #16]
   1050c:	ldp	x29, x30, [sp], #80
   10510:	ret
   10514:	ldrb	w0, [x1, #1]
   10518:	cmp	w0, #0x8b
   1051c:	b.ne	10384 <gzclearerr@@ZLIB_1.2.0.2+0x1ac>  // b.any
   10520:	mov	x0, x25
   10524:	bl	2610 <inflateReset@plt>
   10528:	adrp	x0, 14000 <gzclose_w@@ZLIB_1.2.3.5+0x1c38>
   1052c:	ldr	d0, [x0, #1376]
   10530:	mov	w0, #0x0                   	// #0
   10534:	str	d0, [x19, #64]
   10538:	b	103a0 <gzclearerr@@ZLIB_1.2.0.2+0x1c8>
   1053c:	cbz	w2, 1055c <gzclearerr@@ZLIB_1.2.0.2+0x384>
   10540:	ldr	w0, [x19, #64]
   10544:	cbz	w0, 1038c <gzclearerr@@ZLIB_1.2.0.2+0x1b4>
   10548:	ldr	x0, [x19, #56]
   1054c:	mov	w2, #0x1                   	// #1
   10550:	str	x0, [x19, #8]
   10554:	ldr	x1, [x19, #120]
   10558:	b	104e4 <gzclearerr@@ZLIB_1.2.0.2+0x30c>
   1055c:	mov	w0, #0x0                   	// #0
   10560:	b	103a0 <gzclearerr@@ZLIB_1.2.0.2+0x1c8>
   10564:	mov	w0, #0xffffffff            	// #-1
   10568:	b	103a0 <gzclearerr@@ZLIB_1.2.0.2+0x1c8>
   1056c:	ldr	x0, [x19, #56]
   10570:	bl	2570 <free@plt>
   10574:	ldr	x0, [x19, #48]
   10578:	bl	2570 <free@plt>
   1057c:	str	wzr, [x19, #40]
   10580:	mov	x0, x19
   10584:	adrp	x2, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
   10588:	mov	w1, #0xfffffffc            	// #-4
   1058c:	add	x2, x2, #0x5b8
   10590:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   10594:	mov	w0, #0xffffffff            	// #-1
   10598:	ldp	x21, x22, [sp, #32]
   1059c:	b	103a0 <gzclearerr@@ZLIB_1.2.0.2+0x1c8>
   105a0:	bl	2650 <__errno_location@plt>
   105a4:	ldr	w0, [x0]
   105a8:	bl	2500 <strerror@plt>
   105ac:	mov	x2, x0
   105b0:	mov	w1, #0xffffffff            	// #-1
   105b4:	mov	x0, x19
   105b8:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   105bc:	mov	w0, #0xffffffff            	// #-1
   105c0:	ldp	x21, x22, [sp, #32]
   105c4:	ldp	x23, x24, [sp, #48]
   105c8:	b	103a0 <gzclearerr@@ZLIB_1.2.0.2+0x1c8>
   105cc:	bl	2570 <free@plt>
   105d0:	mov	x0, x20
   105d4:	bl	2570 <free@plt>
   105d8:	mov	x0, x19
   105dc:	adrp	x2, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
   105e0:	mov	w1, #0xfffffffc            	// #-4
   105e4:	add	x2, x2, #0x5b8
   105e8:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   105ec:	mov	w0, #0xffffffff            	// #-1
   105f0:	ldp	x21, x22, [sp, #32]
   105f4:	b	103a0 <gzclearerr@@ZLIB_1.2.0.2+0x1c8>
   105f8:	stp	x29, x30, [sp, #-80]!
   105fc:	mov	x29, sp
   10600:	stp	x19, x20, [sp, #16]
   10604:	add	x20, x0, #0x78
   10608:	stp	x21, x22, [sp, #32]
   1060c:	mov	w21, #0x40000000            	// #1073741824
   10610:	ldr	w22, [x20, #32]
   10614:	stp	x23, x24, [sp, #48]
   10618:	mov	x24, x0
   1061c:	mov	w23, #0x1                   	// #1
   10620:	stp	x25, x26, [sp, #64]
   10624:	b	10660 <gzclearerr@@ZLIB_1.2.0.2+0x488>
   10628:	mov	w1, #0x0                   	// #0
   1062c:	mov	x0, x20
   10630:	bl	23f0 <inflate@plt>
   10634:	add	w1, w0, #0x2
   10638:	tst	w1, #0xfffffffb
   1063c:	b.eq	10738 <gzclearerr@@ZLIB_1.2.0.2+0x560>  // b.none
   10640:	cmn	w0, #0x4
   10644:	b.eq	10768 <gzclearerr@@ZLIB_1.2.0.2+0x590>  // b.none
   10648:	cmn	w0, #0x3
   1064c:	b.eq	10798 <gzclearerr@@ZLIB_1.2.0.2+0x5c0>  // b.none
   10650:	ldr	w1, [x20, #32]
   10654:	cbz	w1, 107d4 <gzclearerr@@ZLIB_1.2.0.2+0x5fc>
   10658:	cmp	w0, #0x1
   1065c:	b.eq	10810 <gzclearerr@@ZLIB_1.2.0.2+0x638>  // b.none
   10660:	ldr	w19, [x20, #8]
   10664:	cbnz	w19, 10628 <gzclearerr@@ZLIB_1.2.0.2+0x450>
   10668:	ldr	w0, [x24, #108]
   1066c:	cmp	w0, #0x0
   10670:	ccmn	w0, #0x5, #0x4, ne  // ne = any
   10674:	b.ne	10830 <gzclearerr@@ZLIB_1.2.0.2+0x658>  // b.any
   10678:	ldr	w0, [x24, #80]
   1067c:	cbz	w0, 106c8 <gzclearerr@@ZLIB_1.2.0.2+0x4f0>
   10680:	mov	x0, x24
   10684:	mov	w1, #0xfffffffb            	// #-5
   10688:	adrp	x2, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
   1068c:	add	x2, x2, #0x5f8
   10690:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   10694:	ldr	w0, [x20, #32]
   10698:	ldr	x1, [x20, #24]
   1069c:	sub	w22, w22, w0
   106a0:	mov	w0, #0x0                   	// #0
   106a4:	str	w22, [x24]
   106a8:	sub	x22, x1, w22, uxtw
   106ac:	str	x22, [x24, #8]
   106b0:	ldp	x19, x20, [sp, #16]
   106b4:	ldp	x21, x22, [sp, #32]
   106b8:	ldp	x23, x24, [sp, #48]
   106bc:	ldp	x25, x26, [sp, #64]
   106c0:	ldp	x29, x30, [sp], #80
   106c4:	ret
   106c8:	ldr	w26, [x24, #40]
   106cc:	ldr	x25, [x24, #48]
   106d0:	b	106e0 <gzclearerr@@ZLIB_1.2.0.2+0x508>
   106d4:	add	w19, w19, w0
   106d8:	cmp	w26, w19
   106dc:	b.ls	10708 <gzclearerr@@ZLIB_1.2.0.2+0x530>  // b.plast
   106e0:	sub	w2, w26, w19
   106e4:	ldr	w0, [x24, #28]
   106e8:	cmp	w2, w21
   106ec:	add	x1, x25, w19, uxtw
   106f0:	csel	w2, w2, w21, ls  // ls = plast
   106f4:	bl	25e0 <read@plt>
   106f8:	cmp	w0, #0x0
   106fc:	b.gt	106d4 <gzclearerr@@ZLIB_1.2.0.2+0x4fc>
   10700:	cbnz	w0, 10838 <gzclearerr@@ZLIB_1.2.0.2+0x660>
   10704:	str	w23, [x24, #80]
   10708:	ldr	w1, [x20, #8]
   1070c:	ldr	x0, [x24, #48]
   10710:	add	w19, w19, w1
   10714:	str	x0, [x20]
   10718:	str	w19, [x20, #8]
   1071c:	cbz	w19, 10680 <gzclearerr@@ZLIB_1.2.0.2+0x4a8>
   10720:	mov	w1, #0x0                   	// #0
   10724:	mov	x0, x20
   10728:	bl	23f0 <inflate@plt>
   1072c:	add	w1, w0, #0x2
   10730:	tst	w1, #0xfffffffb
   10734:	b.ne	10640 <gzclearerr@@ZLIB_1.2.0.2+0x468>  // b.any
   10738:	mov	x0, x24
   1073c:	mov	w1, #0xfffffffe            	// #-2
   10740:	adrp	x2, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
   10744:	add	x2, x2, #0x610
   10748:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   1074c:	mov	w0, #0xffffffff            	// #-1
   10750:	ldp	x19, x20, [sp, #16]
   10754:	ldp	x21, x22, [sp, #32]
   10758:	ldp	x23, x24, [sp, #48]
   1075c:	ldp	x25, x26, [sp, #64]
   10760:	ldp	x29, x30, [sp], #80
   10764:	ret
   10768:	mov	w1, w0
   1076c:	adrp	x2, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
   10770:	mov	x0, x24
   10774:	add	x2, x2, #0x5b8
   10778:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   1077c:	mov	w0, #0xffffffff            	// #-1
   10780:	ldp	x19, x20, [sp, #16]
   10784:	ldp	x21, x22, [sp, #32]
   10788:	ldp	x23, x24, [sp, #48]
   1078c:	ldp	x25, x26, [sp, #64]
   10790:	ldp	x29, x30, [sp], #80
   10794:	ret
   10798:	ldr	x3, [x20, #48]
   1079c:	adrp	x1, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
   107a0:	add	x2, x1, #0x5e0
   107a4:	mov	w1, w0
   107a8:	cmp	x3, #0x0
   107ac:	mov	x0, x24
   107b0:	csel	x2, x2, x3, eq  // eq = none
   107b4:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   107b8:	mov	w0, #0xffffffff            	// #-1
   107bc:	ldp	x19, x20, [sp, #16]
   107c0:	ldp	x21, x22, [sp, #32]
   107c4:	ldp	x23, x24, [sp, #48]
   107c8:	ldp	x25, x26, [sp, #64]
   107cc:	ldp	x29, x30, [sp], #80
   107d0:	ret
   107d4:	ldr	x1, [x20, #24]
   107d8:	str	w22, [x24]
   107dc:	cmp	w0, #0x1
   107e0:	mov	w0, #0x0                   	// #0
   107e4:	sub	x1, x1, w22, uxtw
   107e8:	str	x1, [x24, #8]
   107ec:	b.ne	106b0 <gzclearerr@@ZLIB_1.2.0.2+0x4d8>  // b.any
   107f0:	mov	w0, #0x0                   	// #0
   107f4:	str	wzr, [x24, #68]
   107f8:	ldp	x19, x20, [sp, #16]
   107fc:	ldp	x21, x22, [sp, #32]
   10800:	ldp	x23, x24, [sp, #48]
   10804:	ldp	x25, x26, [sp, #64]
   10808:	ldp	x29, x30, [sp], #80
   1080c:	ret
   10810:	ldr	x0, [x20, #24]
   10814:	sub	w1, w22, w1
   10818:	str	w1, [x24]
   1081c:	str	wzr, [x24, #68]
   10820:	sub	x1, x0, w1, uxtw
   10824:	mov	w0, #0x0                   	// #0
   10828:	str	x1, [x24, #8]
   1082c:	b	107f8 <gzclearerr@@ZLIB_1.2.0.2+0x620>
   10830:	mov	w0, #0xffffffff            	// #-1
   10834:	b	106b0 <gzclearerr@@ZLIB_1.2.0.2+0x4d8>
   10838:	bl	2650 <__errno_location@plt>
   1083c:	ldr	w0, [x0]
   10840:	bl	2500 <strerror@plt>
   10844:	mov	x2, x0
   10848:	mov	w1, #0xffffffff            	// #-1
   1084c:	mov	x0, x24
   10850:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   10854:	mov	w0, #0xffffffff            	// #-1
   10858:	b	106b0 <gzclearerr@@ZLIB_1.2.0.2+0x4d8>
   1085c:	nop
   10860:	stp	x29, x30, [sp, #-48]!
   10864:	mov	x29, sp
   10868:	stp	x19, x20, [sp, #16]
   1086c:	mov	x19, x0
   10870:	ldr	w0, [x19, #68]
   10874:	cmp	w0, #0x1
   10878:	b.eq	108a8 <gzclearerr@@ZLIB_1.2.0.2+0x6d0>  // b.none
   1087c:	cmp	w0, #0x2
   10880:	b.eq	10944 <gzclearerr@@ZLIB_1.2.0.2+0x76c>  // b.none
   10884:	cbz	w0, 10924 <gzclearerr@@ZLIB_1.2.0.2+0x74c>
   10888:	ldr	w0, [x19]
   1088c:	cbnz	w0, 108a0 <gzclearerr@@ZLIB_1.2.0.2+0x6c8>
   10890:	ldr	w0, [x19, #80]
   10894:	cbz	w0, 10870 <gzclearerr@@ZLIB_1.2.0.2+0x698>
   10898:	ldr	w0, [x19, #128]
   1089c:	cbnz	w0, 10870 <gzclearerr@@ZLIB_1.2.0.2+0x698>
   108a0:	mov	w0, #0x0                   	// #0
   108a4:	b	10918 <gzclearerr@@ZLIB_1.2.0.2+0x740>
   108a8:	ldr	w20, [x19, #40]
   108ac:	mov	w1, #0x0                   	// #0
   108b0:	str	wzr, [x19]
   108b4:	stp	x21, x22, [sp, #32]
   108b8:	mov	w21, #0x40000000            	// #1073741824
   108bc:	lsl	w20, w20, #1
   108c0:	ldr	x22, [x19, #56]
   108c4:	b	108dc <gzclearerr@@ZLIB_1.2.0.2+0x704>
   108c8:	ldr	w1, [x19]
   108cc:	add	w1, w1, w0
   108d0:	str	w1, [x19]
   108d4:	cmp	w20, w1
   108d8:	b.ls	10908 <gzclearerr@@ZLIB_1.2.0.2+0x730>  // b.plast
   108dc:	sub	w2, w20, w1
   108e0:	ldr	w0, [x19, #28]
   108e4:	cmp	w2, w21
   108e8:	add	x1, x22, w1, uxtw
   108ec:	csel	w2, w2, w21, ls  // ls = plast
   108f0:	bl	25e0 <read@plt>
   108f4:	cmp	w0, #0x0
   108f8:	b.gt	108c8 <gzclearerr@@ZLIB_1.2.0.2+0x6f0>
   108fc:	cbnz	w0, 10970 <gzclearerr@@ZLIB_1.2.0.2+0x798>
   10900:	mov	w0, #0x1                   	// #1
   10904:	str	w0, [x19, #80]
   10908:	ldp	x21, x22, [sp, #32]
   1090c:	mov	w0, #0x0                   	// #0
   10910:	ldr	x1, [x19, #56]
   10914:	str	x1, [x19, #8]
   10918:	ldp	x19, x20, [sp, #16]
   1091c:	ldp	x29, x30, [sp], #48
   10920:	ret
   10924:	mov	x0, x19
   10928:	bl	10348 <gzclearerr@@ZLIB_1.2.0.2+0x170>
   1092c:	cmn	w0, #0x1
   10930:	b.eq	10968 <gzclearerr@@ZLIB_1.2.0.2+0x790>  // b.none
   10934:	ldr	w0, [x19, #68]
   10938:	cbnz	w0, 10888 <gzclearerr@@ZLIB_1.2.0.2+0x6b0>
   1093c:	mov	w0, #0x0                   	// #0
   10940:	b	10918 <gzclearerr@@ZLIB_1.2.0.2+0x740>
   10944:	ldr	w2, [x19, #40]
   10948:	mov	x0, x19
   1094c:	ldr	x3, [x19, #56]
   10950:	str	x3, [x19, #144]
   10954:	lsl	w2, w2, #1
   10958:	str	w2, [x19, #152]
   1095c:	bl	105f8 <gzclearerr@@ZLIB_1.2.0.2+0x420>
   10960:	cmn	w0, #0x1
   10964:	b.ne	10888 <gzclearerr@@ZLIB_1.2.0.2+0x6b0>  // b.any
   10968:	mov	w0, #0xffffffff            	// #-1
   1096c:	b	10918 <gzclearerr@@ZLIB_1.2.0.2+0x740>
   10970:	bl	2650 <__errno_location@plt>
   10974:	ldr	w0, [x0]
   10978:	bl	2500 <strerror@plt>
   1097c:	mov	x2, x0
   10980:	mov	w1, #0xffffffff            	// #-1
   10984:	mov	x0, x19
   10988:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   1098c:	mov	w0, #0xffffffff            	// #-1
   10990:	ldp	x21, x22, [sp, #32]
   10994:	b	10918 <gzclearerr@@ZLIB_1.2.0.2+0x740>
   10998:	stp	x29, x30, [sp, #-112]!
   1099c:	mov	x29, sp
   109a0:	stp	x19, x20, [sp, #16]
   109a4:	mov	x19, x0
   109a8:	stp	x21, x22, [sp, #32]
   109ac:	mov	x22, x2
   109b0:	stp	x27, x28, [sp, #80]
   109b4:	mov	x28, x1
   109b8:	stp	x23, x24, [sp, #48]
   109bc:	mov	x23, #0x0                   	// #0
   109c0:	mov	w24, #0x40000000            	// #1073741824
   109c4:	stp	x25, x26, [sp, #64]
   109c8:	mov	x26, #0xfffffffe            	// #4294967294
   109cc:	mov	x25, #0xffffffff            	// #4294967295
   109d0:	ldr	w20, [x19]
   109d4:	cmp	x22, x26
   109d8:	csel	x0, x22, x25, ls  // ls = plast
   109dc:	mov	w27, w0
   109e0:	cbz	w20, 10a54 <gzclearerr@@ZLIB_1.2.0.2+0x87c>
   109e4:	ldr	x1, [x19, #8]
   109e8:	cmp	w20, w0
   109ec:	csel	w20, w20, w0, ls  // ls = plast
   109f0:	mov	x0, x28
   109f4:	mov	w21, w20
   109f8:	mov	x2, x21
   109fc:	bl	23a0 <memcpy@plt>
   10a00:	ldr	x1, [x19, #8]
   10a04:	add	x28, x28, x21
   10a08:	ldr	w0, [x19]
   10a0c:	add	x1, x1, x21
   10a10:	str	x1, [x19, #8]
   10a14:	sub	w20, w0, w20
   10a18:	str	w20, [x19]
   10a1c:	ldr	x0, [x19, #16]
   10a20:	sub	x22, x22, x21
   10a24:	add	x23, x23, x21
   10a28:	add	x21, x0, x21
   10a2c:	str	x21, [x19, #16]
   10a30:	cbnz	x22, 109d0 <gzclearerr@@ZLIB_1.2.0.2+0x7f8>
   10a34:	mov	x0, x23
   10a38:	ldp	x19, x20, [sp, #16]
   10a3c:	ldp	x21, x22, [sp, #32]
   10a40:	ldp	x23, x24, [sp, #48]
   10a44:	ldp	x25, x26, [sp, #64]
   10a48:	ldp	x27, x28, [sp, #80]
   10a4c:	ldp	x29, x30, [sp], #112
   10a50:	ret
   10a54:	ldr	w0, [x19, #80]
   10a58:	cbz	w0, 10a64 <gzclearerr@@ZLIB_1.2.0.2+0x88c>
   10a5c:	ldr	w0, [x19, #128]
   10a60:	cbz	w0, 10b2c <gzclearerr@@ZLIB_1.2.0.2+0x954>
   10a64:	ldr	w0, [x19, #68]
   10a68:	cbz	w0, 10af8 <gzclearerr@@ZLIB_1.2.0.2+0x920>
   10a6c:	ldr	w1, [x19, #40]
   10a70:	cmp	w27, w1, lsl #1
   10a74:	b.cc	10af8 <gzclearerr@@ZLIB_1.2.0.2+0x920>  // b.lo, b.ul, b.last
   10a78:	cmp	w0, #0x1
   10a7c:	b.eq	10ab4 <gzclearerr@@ZLIB_1.2.0.2+0x8dc>  // b.none
   10a80:	str	x28, [x19, #144]
   10a84:	mov	x0, x19
   10a88:	str	w27, [x19, #152]
   10a8c:	bl	105f8 <gzclearerr@@ZLIB_1.2.0.2+0x420>
   10a90:	cmn	w0, #0x1
   10a94:	b.eq	10b08 <gzclearerr@@ZLIB_1.2.0.2+0x930>  // b.none
   10a98:	ldr	w20, [x19]
   10a9c:	str	wzr, [x19]
   10aa0:	mov	w21, w20
   10aa4:	add	x28, x28, x21
   10aa8:	b	10a1c <gzclearerr@@ZLIB_1.2.0.2+0x844>
   10aac:	cmp	w27, w20
   10ab0:	b.ls	10aa0 <gzclearerr@@ZLIB_1.2.0.2+0x8c8>  // b.plast
   10ab4:	sub	w2, w27, w20
   10ab8:	ldr	w0, [x19, #28]
   10abc:	cmp	w2, w24
   10ac0:	mov	w21, w20
   10ac4:	add	x1, x28, x21
   10ac8:	csel	w2, w2, w24, ls  // ls = plast
   10acc:	str	x1, [sp, #104]
   10ad0:	bl	25e0 <read@plt>
   10ad4:	add	w20, w20, w0
   10ad8:	cmp	w0, #0x0
   10adc:	ldr	x1, [sp, #104]
   10ae0:	b.gt	10aac <gzclearerr@@ZLIB_1.2.0.2+0x8d4>
   10ae4:	cbnz	w0, 10b38 <gzclearerr@@ZLIB_1.2.0.2+0x960>
   10ae8:	mov	w0, #0x1                   	// #1
   10aec:	mov	x28, x1
   10af0:	str	w0, [x19, #80]
   10af4:	b	10a1c <gzclearerr@@ZLIB_1.2.0.2+0x844>
   10af8:	mov	x0, x19
   10afc:	bl	10860 <gzclearerr@@ZLIB_1.2.0.2+0x688>
   10b00:	cmn	w0, #0x1
   10b04:	b.ne	10a30 <gzclearerr@@ZLIB_1.2.0.2+0x858>  // b.any
   10b08:	mov	x23, #0x0                   	// #0
   10b0c:	mov	x0, x23
   10b10:	ldp	x19, x20, [sp, #16]
   10b14:	ldp	x21, x22, [sp, #32]
   10b18:	ldp	x23, x24, [sp, #48]
   10b1c:	ldp	x25, x26, [sp, #64]
   10b20:	ldp	x27, x28, [sp, #80]
   10b24:	ldp	x29, x30, [sp], #112
   10b28:	ret
   10b2c:	mov	w0, #0x1                   	// #1
   10b30:	str	w0, [x19, #84]
   10b34:	b	10a34 <gzclearerr@@ZLIB_1.2.0.2+0x85c>
   10b38:	bl	2650 <__errno_location@plt>
   10b3c:	ldr	w0, [x0]
   10b40:	mov	x23, #0x0                   	// #0
   10b44:	bl	2500 <strerror@plt>
   10b48:	mov	x2, x0
   10b4c:	mov	w1, #0xffffffff            	// #-1
   10b50:	mov	x0, x19
   10b54:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   10b58:	b	10a34 <gzclearerr@@ZLIB_1.2.0.2+0x85c>
   10b5c:	nop

0000000000010b60 <gzread@@Base>:
   10b60:	cbz	x0, 10ca0 <gzread@@Base+0x140>
   10b64:	stp	x29, x30, [sp, #-48]!
   10b68:	mov	x29, sp
   10b6c:	stp	x19, x20, [sp, #16]
   10b70:	mov	x19, x0
   10b74:	stp	x21, x22, [sp, #32]
   10b78:	mov	w21, w2
   10b7c:	ldr	w2, [x0, #24]
   10b80:	mov	x22, x1
   10b84:	mov	w1, #0x1c4f                	// #7247
   10b88:	cmp	w2, w1
   10b8c:	b.ne	10c80 <gzread@@Base+0x120>  // b.any
   10b90:	ldr	w1, [x0, #108]
   10b94:	cmp	w1, #0x0
   10b98:	ccmn	w1, #0x5, #0x4, ne  // ne = any
   10b9c:	b.ne	10c80 <gzread@@Base+0x120>  // b.any
   10ba0:	cmp	w21, #0x0
   10ba4:	b.lt	10c88 <gzread@@Base+0x128>  // b.tstop
   10ba8:	mov	w0, #0x0                   	// #0
   10bac:	b.eq	10bcc <gzread@@Base+0x6c>  // b.none
   10bb0:	ldr	w0, [x19, #104]
   10bb4:	cbnz	w0, 10bdc <gzread@@Base+0x7c>
   10bb8:	mov	w2, w21
   10bbc:	mov	x1, x22
   10bc0:	mov	x0, x19
   10bc4:	bl	10998 <gzclearerr@@ZLIB_1.2.0.2+0x7c0>
   10bc8:	cbz	w0, 10c6c <gzread@@Base+0x10c>
   10bcc:	ldp	x19, x20, [sp, #16]
   10bd0:	ldp	x21, x22, [sp, #32]
   10bd4:	ldp	x29, x30, [sp], #48
   10bd8:	ret
   10bdc:	ldr	x20, [x19, #96]
   10be0:	str	wzr, [x19, #104]
   10be4:	cbz	x20, 10bb8 <gzread@@Base+0x58>
   10be8:	ldr	w2, [x19]
   10bec:	mov	x0, x19
   10bf0:	mov	w1, #0x0                   	// #0
   10bf4:	mov	w4, w2
   10bf8:	mov	x3, x4
   10bfc:	cmp	x4, x20
   10c00:	cbz	w2, 10c4c <gzread@@Base+0xec>
   10c04:	b.le	10c14 <gzread@@Base+0xb4>
   10c08:	sub	w1, w2, w20
   10c0c:	and	x3, x20, #0xffffffff
   10c10:	mov	w4, w20
   10c14:	ldp	x2, x0, [x19, #8]
   10c18:	subs	x20, x20, x3
   10c1c:	str	w1, [x19]
   10c20:	add	x4, x2, x4
   10c24:	add	x3, x0, x3
   10c28:	stp	x4, x3, [x19, #8]
   10c2c:	b.eq	10bb8 <gzread@@Base+0x58>  // b.none
   10c30:	ldr	w2, [x19]
   10c34:	mov	x0, x19
   10c38:	mov	w1, #0x0                   	// #0
   10c3c:	mov	w4, w2
   10c40:	mov	x3, x4
   10c44:	cmp	x4, x20
   10c48:	cbnz	w2, 10c04 <gzread@@Base+0xa4>
   10c4c:	ldr	w1, [x19, #80]
   10c50:	cbz	w1, 10c5c <gzread@@Base+0xfc>
   10c54:	ldr	w1, [x19, #128]
   10c58:	cbz	w1, 10bb8 <gzread@@Base+0x58>
   10c5c:	bl	10860 <gzclearerr@@ZLIB_1.2.0.2+0x688>
   10c60:	cmn	w0, #0x1
   10c64:	b.ne	10be8 <gzread@@Base+0x88>  // b.any
   10c68:	mov	x0, #0x0                   	// #0
   10c6c:	ldr	w1, [x19, #108]
   10c70:	cmp	w1, #0x0
   10c74:	ccmn	w1, #0x5, #0x4, ne  // ne = any
   10c78:	b.eq	10bcc <gzread@@Base+0x6c>  // b.none
   10c7c:	nop
   10c80:	mov	w0, #0xffffffff            	// #-1
   10c84:	b	10bcc <gzread@@Base+0x6c>
   10c88:	adrp	x2, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
   10c8c:	mov	w1, #0xfffffffe            	// #-2
   10c90:	add	x2, x2, #0x638
   10c94:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   10c98:	mov	w0, #0xffffffff            	// #-1
   10c9c:	b	10bcc <gzread@@Base+0x6c>
   10ca0:	mov	w0, #0xffffffff            	// #-1
   10ca4:	ret

0000000000010ca8 <gzfread@@ZLIB_1.2.9>:
   10ca8:	stp	x29, x30, [sp, #-64]!
   10cac:	mov	x29, sp
   10cb0:	stp	x21, x22, [sp, #32]
   10cb4:	cbz	x3, 10d3c <gzfread@@ZLIB_1.2.9+0x94>
   10cb8:	mov	x22, x1
   10cbc:	ldr	w1, [x3, #24]
   10cc0:	stp	x19, x20, [sp, #16]
   10cc4:	mov	x21, #0x0                   	// #0
   10cc8:	mov	x20, x0
   10ccc:	mov	x19, x3
   10cd0:	mov	w0, #0x1c4f                	// #7247
   10cd4:	cmp	w1, w0
   10cd8:	b.eq	10cf0 <gzfread@@ZLIB_1.2.9+0x48>  // b.none
   10cdc:	ldp	x19, x20, [sp, #16]
   10ce0:	mov	x0, x21
   10ce4:	ldp	x21, x22, [sp, #32]
   10ce8:	ldp	x29, x30, [sp], #64
   10cec:	ret
   10cf0:	ldr	w0, [x3, #108]
   10cf4:	cmp	w0, #0x0
   10cf8:	ccmn	w0, #0x5, #0x4, ne  // ne = any
   10cfc:	b.ne	10cdc <gzfread@@ZLIB_1.2.9+0x34>  // b.any
   10d00:	cbz	x22, 10cdc <gzfread@@ZLIB_1.2.9+0x34>
   10d04:	mul	x21, x2, x22
   10d08:	udiv	x0, x21, x22
   10d0c:	cmp	x0, x2
   10d10:	b.ne	10ddc <gzfread@@ZLIB_1.2.9+0x134>  // b.any
   10d14:	cbz	x21, 10cdc <gzfread@@ZLIB_1.2.9+0x34>
   10d18:	ldr	w0, [x3, #104]
   10d1c:	cbnz	w0, 10d50 <gzfread@@ZLIB_1.2.9+0xa8>
   10d20:	mov	x2, x21
   10d24:	mov	x1, x20
   10d28:	mov	x0, x19
   10d2c:	bl	10998 <gzclearerr@@ZLIB_1.2.0.2+0x7c0>
   10d30:	udiv	x21, x0, x22
   10d34:	ldp	x19, x20, [sp, #16]
   10d38:	b	10ce0 <gzfread@@ZLIB_1.2.9+0x38>
   10d3c:	mov	x21, #0x0                   	// #0
   10d40:	mov	x0, x21
   10d44:	ldp	x21, x22, [sp, #32]
   10d48:	ldp	x29, x30, [sp], #64
   10d4c:	ret
   10d50:	str	x23, [sp, #48]
   10d54:	ldr	x23, [x3, #96]
   10d58:	str	wzr, [x3, #104]
   10d5c:	cbz	x23, 10da8 <gzfread@@ZLIB_1.2.9+0x100>
   10d60:	ldr	w2, [x19]
   10d64:	mov	x0, x19
   10d68:	mov	w4, #0x0                   	// #0
   10d6c:	mov	w1, w2
   10d70:	mov	x3, x1
   10d74:	cmp	x1, x23
   10d78:	cbz	w2, 10db0 <gzfread@@ZLIB_1.2.9+0x108>
   10d7c:	b.le	10d8c <gzfread@@ZLIB_1.2.9+0xe4>
   10d80:	sub	w4, w2, w23
   10d84:	and	x3, x23, #0xffffffff
   10d88:	mov	w1, w23
   10d8c:	ldp	x2, x0, [x19, #8]
   10d90:	subs	x23, x23, x3
   10d94:	str	w4, [x19]
   10d98:	add	x1, x2, x1
   10d9c:	add	x3, x0, x3
   10da0:	stp	x1, x3, [x19, #8]
   10da4:	b.ne	10d60 <gzfread@@ZLIB_1.2.9+0xb8>  // b.any
   10da8:	ldr	x23, [sp, #48]
   10dac:	b	10d20 <gzfread@@ZLIB_1.2.9+0x78>
   10db0:	ldr	w1, [x19, #80]
   10db4:	cbz	w1, 10dc0 <gzfread@@ZLIB_1.2.9+0x118>
   10db8:	ldr	w1, [x19, #128]
   10dbc:	cbz	w1, 10da8 <gzfread@@ZLIB_1.2.9+0x100>
   10dc0:	bl	10860 <gzclearerr@@ZLIB_1.2.0.2+0x688>
   10dc4:	cmn	w0, #0x1
   10dc8:	b.ne	10d60 <gzfread@@ZLIB_1.2.9+0xb8>  // b.any
   10dcc:	mov	x21, #0x0                   	// #0
   10dd0:	ldp	x19, x20, [sp, #16]
   10dd4:	ldr	x23, [sp, #48]
   10dd8:	b	10ce0 <gzfread@@ZLIB_1.2.9+0x38>
   10ddc:	mov	x0, x3
   10de0:	adrp	x2, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
   10de4:	mov	w1, #0xfffffffe            	// #-2
   10de8:	add	x2, x2, #0x658
   10dec:	mov	x21, #0x0                   	// #0
   10df0:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   10df4:	ldp	x19, x20, [sp, #16]
   10df8:	b	10ce0 <gzfread@@ZLIB_1.2.9+0x38>
   10dfc:	nop

0000000000010e00 <gzgetc@@Base>:
   10e00:	cbz	x0, 10f24 <gzgetc@@Base+0x124>
   10e04:	stp	x29, x30, [sp, #-48]!
   10e08:	mov	x29, sp
   10e0c:	stp	x19, x20, [sp, #16]
   10e10:	mov	x19, x0
   10e14:	mov	w0, #0x1c4f                	// #7247
   10e18:	ldr	w1, [x19, #24]
   10e1c:	cmp	w1, w0
   10e20:	b.ne	10f1c <gzgetc@@Base+0x11c>  // b.any
   10e24:	ldr	w0, [x19, #108]
   10e28:	cmp	w0, #0x0
   10e2c:	ccmn	w0, #0x5, #0x4, ne  // ne = any
   10e30:	b.ne	10f1c <gzgetc@@Base+0x11c>  // b.any
   10e34:	ldr	w0, [x19]
   10e38:	cbz	w0, 10e68 <gzgetc@@Base+0x68>
   10e3c:	ldp	x2, x1, [x19, #8]
   10e40:	sub	w0, w0, #0x1
   10e44:	str	w0, [x19]
   10e48:	add	x3, x2, #0x1
   10e4c:	add	x0, x1, #0x1
   10e50:	str	x3, [x19, #8]
   10e54:	str	x0, [x19, #16]
   10e58:	ldrb	w0, [x2]
   10e5c:	ldp	x19, x20, [sp, #16]
   10e60:	ldp	x29, x30, [sp], #48
   10e64:	ret
   10e68:	ldr	w0, [x19, #104]
   10e6c:	cbnz	w0, 10e98 <gzgetc@@Base+0x98>
   10e70:	mov	x0, x19
   10e74:	add	x1, sp, #0x28
   10e78:	mov	x2, #0x1                   	// #1
   10e7c:	bl	10998 <gzclearerr@@ZLIB_1.2.0.2+0x7c0>
   10e80:	cmp	w0, #0x0
   10e84:	b.le	10f1c <gzgetc@@Base+0x11c>
   10e88:	ldrb	w0, [sp, #40]
   10e8c:	ldp	x19, x20, [sp, #16]
   10e90:	ldp	x29, x30, [sp], #48
   10e94:	ret
   10e98:	ldr	x20, [x19, #96]
   10e9c:	str	wzr, [x19, #104]
   10ea0:	cbz	x20, 10e70 <gzgetc@@Base+0x70>
   10ea4:	mov	w2, #0x0                   	// #0
   10ea8:	mov	x0, x19
   10eac:	mov	w1, w2
   10eb0:	cbz	w2, 10f00 <gzgetc@@Base+0x100>
   10eb4:	nop
   10eb8:	cmp	x1, x20
   10ebc:	mov	x0, x1
   10ec0:	mov	w4, #0x0                   	// #0
   10ec4:	b.le	10ed4 <gzgetc@@Base+0xd4>
   10ec8:	sub	w4, w2, w20
   10ecc:	and	x0, x20, #0xffffffff
   10ed0:	mov	w1, w20
   10ed4:	ldp	x3, x2, [x19, #8]
   10ed8:	subs	x20, x20, x0
   10edc:	str	w4, [x19]
   10ee0:	add	x1, x3, x1
   10ee4:	add	x0, x2, x0
   10ee8:	stp	x1, x0, [x19, #8]
   10eec:	b.eq	10e70 <gzgetc@@Base+0x70>  // b.none
   10ef0:	ldr	w2, [x19]
   10ef4:	mov	x0, x19
   10ef8:	mov	w1, w2
   10efc:	cbnz	w2, 10eb8 <gzgetc@@Base+0xb8>
   10f00:	ldr	w1, [x19, #80]
   10f04:	cbz	w1, 10f10 <gzgetc@@Base+0x110>
   10f08:	ldr	w1, [x19, #128]
   10f0c:	cbz	w1, 10e70 <gzgetc@@Base+0x70>
   10f10:	bl	10860 <gzclearerr@@ZLIB_1.2.0.2+0x688>
   10f14:	cmn	w0, #0x1
   10f18:	b.ne	10ef0 <gzgetc@@Base+0xf0>  // b.any
   10f1c:	mov	w0, #0xffffffff            	// #-1
   10f20:	b	10e5c <gzgetc@@Base+0x5c>
   10f24:	mov	w0, #0xffffffff            	// #-1
   10f28:	ret
   10f2c:	nop

0000000000010f30 <gzgetc_@@ZLIB_1.2.5.2>:
   10f30:	b	2410 <gzgetc@plt>
   10f34:	nop

0000000000010f38 <gzungetc@@ZLIB_1.2.0.2>:
   10f38:	cbz	x1, 11118 <gzungetc@@ZLIB_1.2.0.2+0x1e0>
   10f3c:	stp	x29, x30, [sp, #-48]!
   10f40:	mov	x29, sp
   10f44:	stp	x19, x20, [sp, #16]
   10f48:	mov	x19, x1
   10f4c:	ldr	w1, [x1, #24]
   10f50:	str	x21, [sp, #32]
   10f54:	mov	w21, w0
   10f58:	mov	w0, #0x1c4f                	// #7247
   10f5c:	cmp	w1, w0
   10f60:	b.ne	11070 <gzungetc@@ZLIB_1.2.0.2+0x138>  // b.any
   10f64:	ldr	w0, [x19, #108]
   10f68:	cmp	w0, #0x0
   10f6c:	ccmn	w0, #0x5, #0x4, ne  // ne = any
   10f70:	b.ne	11070 <gzungetc@@ZLIB_1.2.0.2+0x138>  // b.any
   10f74:	ldr	w0, [x19, #104]
   10f78:	cbnz	w0, 10fe0 <gzungetc@@ZLIB_1.2.0.2+0xa8>
   10f7c:	tbnz	w21, #31, 11070 <gzungetc@@ZLIB_1.2.0.2+0x138>
   10f80:	ldr	w3, [x19]
   10f84:	ldr	w0, [x19, #40]
   10f88:	lsl	w0, w0, #1
   10f8c:	cbz	w3, 11090 <gzungetc@@ZLIB_1.2.0.2+0x158>
   10f90:	cmp	w3, w0
   10f94:	b.eq	110fc <gzungetc@@ZLIB_1.2.0.2+0x1c4>  // b.none
   10f98:	ldr	x1, [x19, #8]
   10f9c:	ldr	x4, [x19, #56]
   10fa0:	cmp	x1, x4
   10fa4:	b.eq	110d0 <gzungetc@@ZLIB_1.2.0.2+0x198>  // b.none
   10fa8:	sub	x2, x1, #0x1
   10fac:	add	w3, w3, #0x1
   10fb0:	str	w3, [x19]
   10fb4:	mov	w0, w21
   10fb8:	str	x2, [x19, #8]
   10fbc:	sturb	w21, [x1, #-1]
   10fc0:	str	wzr, [x19, #84]
   10fc4:	ldr	x1, [x19, #16]
   10fc8:	ldr	x21, [sp, #32]
   10fcc:	sub	x1, x1, #0x1
   10fd0:	str	x1, [x19, #16]
   10fd4:	ldp	x19, x20, [sp, #16]
   10fd8:	ldp	x29, x30, [sp], #48
   10fdc:	ret
   10fe0:	ldr	x20, [x19, #96]
   10fe4:	str	wzr, [x19, #104]
   10fe8:	cbz	x20, 10f7c <gzungetc@@ZLIB_1.2.0.2+0x44>
   10fec:	nop
   10ff0:	ldr	w3, [x19]
   10ff4:	mov	x0, x19
   10ff8:	mov	w5, #0x0                   	// #0
   10ffc:	mov	w2, w3
   11000:	mov	x1, x2
   11004:	cmp	x2, x20
   11008:	cbz	w3, 11054 <gzungetc@@ZLIB_1.2.0.2+0x11c>
   1100c:	b.le	1101c <gzungetc@@ZLIB_1.2.0.2+0xe4>
   11010:	sub	w5, w3, w20
   11014:	and	x1, x20, #0xffffffff
   11018:	mov	w2, w20
   1101c:	ldp	x4, x3, [x19, #8]
   11020:	subs	x20, x20, x1
   11024:	str	w5, [x19]
   11028:	add	x2, x4, x2
   1102c:	add	x1, x3, x1
   11030:	stp	x2, x1, [x19, #8]
   11034:	b.eq	10f7c <gzungetc@@ZLIB_1.2.0.2+0x44>  // b.none
   11038:	ldr	w3, [x19]
   1103c:	mov	x0, x19
   11040:	mov	w5, #0x0                   	// #0
   11044:	mov	w2, w3
   11048:	mov	x1, x2
   1104c:	cmp	x2, x20
   11050:	cbnz	w3, 1100c <gzungetc@@ZLIB_1.2.0.2+0xd4>
   11054:	ldr	w1, [x19, #80]
   11058:	cbz	w1, 11064 <gzungetc@@ZLIB_1.2.0.2+0x12c>
   1105c:	ldr	w1, [x19, #128]
   11060:	cbz	w1, 11084 <gzungetc@@ZLIB_1.2.0.2+0x14c>
   11064:	bl	10860 <gzclearerr@@ZLIB_1.2.0.2+0x688>
   11068:	cmn	w0, #0x1
   1106c:	b.ne	10ff0 <gzungetc@@ZLIB_1.2.0.2+0xb8>  // b.any
   11070:	mov	w0, #0xffffffff            	// #-1
   11074:	ldp	x19, x20, [sp, #16]
   11078:	ldr	x21, [sp, #32]
   1107c:	ldp	x29, x30, [sp], #48
   11080:	ret
   11084:	tbnz	w21, #31, 11070 <gzungetc@@ZLIB_1.2.0.2+0x138>
   11088:	ldr	w0, [x19, #40]
   1108c:	lsl	w0, w0, #1
   11090:	ldr	x2, [x19, #56]
   11094:	sub	x1, x0, #0x1
   11098:	mov	w3, #0x1                   	// #1
   1109c:	str	w3, [x19]
   110a0:	add	x3, x2, x1
   110a4:	str	x3, [x19, #8]
   110a8:	strb	w21, [x2, x1]
   110ac:	mov	w0, w21
   110b0:	str	wzr, [x19, #84]
   110b4:	ldr	x1, [x19, #16]
   110b8:	ldr	x21, [sp, #32]
   110bc:	sub	x1, x1, #0x1
   110c0:	str	x1, [x19, #16]
   110c4:	ldp	x19, x20, [sp, #16]
   110c8:	ldp	x29, x30, [sp], #48
   110cc:	ret
   110d0:	add	x2, x1, w3, uxtw
   110d4:	add	x1, x1, w0, uxtw
   110d8:	cmp	x4, x2
   110dc:	b.cs	10fa8 <gzungetc@@ZLIB_1.2.0.2+0x70>  // b.hs, b.nlast
   110e0:	ldrb	w0, [x2, #-1]!
   110e4:	strb	w0, [x1, #-1]!
   110e8:	ldr	x0, [x19, #56]
   110ec:	cmp	x0, x2
   110f0:	b.cc	110e0 <gzungetc@@ZLIB_1.2.0.2+0x1a8>  // b.lo, b.ul, b.last
   110f4:	ldr	w3, [x19]
   110f8:	b	10fa8 <gzungetc@@ZLIB_1.2.0.2+0x70>
   110fc:	mov	x0, x19
   11100:	adrp	x2, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
   11104:	mov	w1, #0xfffffffd            	// #-3
   11108:	add	x2, x2, #0x680
   1110c:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   11110:	mov	w0, #0xffffffff            	// #-1
   11114:	b	11074 <gzungetc@@ZLIB_1.2.0.2+0x13c>
   11118:	mov	w0, #0xffffffff            	// #-1
   1111c:	ret

0000000000011120 <gzgets@@Base>:
   11120:	cmp	x1, #0x0
   11124:	ccmp	w2, #0x0, #0x4, ne  // ne = any
   11128:	ccmp	x0, #0x0, #0x4, gt
   1112c:	b.eq	11294 <gzgets@@Base+0x174>  // b.none
   11130:	stp	x29, x30, [sp, #-80]!
   11134:	mov	x29, sp
   11138:	stp	x19, x20, [sp, #16]
   1113c:	mov	x19, x0
   11140:	mov	w0, #0x1c4f                	// #7247
   11144:	stp	x21, x22, [sp, #32]
   11148:	mov	x22, x1
   1114c:	ldr	w1, [x19, #24]
   11150:	cmp	w1, w0
   11154:	b.ne	11220 <gzgets@@Base+0x100>  // b.any
   11158:	ldr	w0, [x19, #108]
   1115c:	cmp	w0, #0x0
   11160:	ccmn	w0, #0x5, #0x4, ne  // ne = any
   11164:	b.ne	11220 <gzgets@@Base+0x100>  // b.any
   11168:	ldr	w0, [x19, #104]
   1116c:	mov	w21, w2
   11170:	cbnz	w0, 1129c <gzgets@@Base+0x17c>
   11174:	subs	w21, w21, #0x1
   11178:	b.eq	11220 <gzgets@@Base+0x100>  // b.none
   1117c:	ldr	w3, [x19]
   11180:	stp	x23, x24, [sp, #48]
   11184:	mov	x24, x22
   11188:	str	x25, [sp, #64]
   1118c:	cbz	w3, 11270 <gzgets@@Base+0x150>
   11190:	cmp	w21, w3
   11194:	mov	w1, #0xa                   	// #10
   11198:	ldr	x25, [x19, #8]
   1119c:	csel	w23, w21, w3, ls  // ls = plast
   111a0:	csel	w20, w21, w3, ls  // ls = plast
   111a4:	mov	x2, x23
   111a8:	mov	x0, x25
   111ac:	bl	25f0 <memchr@plt>
   111b0:	cbz	x0, 11234 <gzgets@@Base+0x114>
   111b4:	sub	x0, x0, x25
   111b8:	mov	x1, x25
   111bc:	add	w21, w0, #0x1
   111c0:	add	w20, w0, #0x1
   111c4:	mov	x2, x21
   111c8:	mov	x0, x24
   111cc:	bl	23a0 <memcpy@plt>
   111d0:	add	x24, x24, x21
   111d4:	ldp	x1, x2, [x19, #8]
   111d8:	ldr	w0, [x19]
   111dc:	sub	w0, w0, w20
   111e0:	str	w0, [x19]
   111e4:	add	x1, x1, x21
   111e8:	add	x2, x2, x21
   111ec:	stp	x1, x2, [x19, #8]
   111f0:	cmp	x24, x22
   111f4:	b.eq	11218 <gzgets@@Base+0xf8>  // b.none
   111f8:	strb	wzr, [x24]
   111fc:	mov	x0, x22
   11200:	ldp	x19, x20, [sp, #16]
   11204:	ldp	x21, x22, [sp, #32]
   11208:	ldp	x23, x24, [sp, #48]
   1120c:	ldr	x25, [sp, #64]
   11210:	ldp	x29, x30, [sp], #80
   11214:	ret
   11218:	ldp	x23, x24, [sp, #48]
   1121c:	ldr	x25, [sp, #64]
   11220:	mov	x0, #0x0                   	// #0
   11224:	ldp	x19, x20, [sp, #16]
   11228:	ldp	x21, x22, [sp, #32]
   1122c:	ldp	x29, x30, [sp], #80
   11230:	ret
   11234:	mov	x2, x23
   11238:	mov	x0, x24
   1123c:	mov	x1, x25
   11240:	bl	23a0 <memcpy@plt>
   11244:	ldp	x0, x2, [x19, #8]
   11248:	add	x24, x24, x23
   1124c:	ldr	w3, [x19]
   11250:	subs	w21, w21, w20
   11254:	sub	w3, w3, w20
   11258:	str	w3, [x19]
   1125c:	add	x0, x0, x23
   11260:	add	x2, x2, x23
   11264:	stp	x0, x2, [x19, #8]
   11268:	b.eq	111f0 <gzgets@@Base+0xd0>  // b.none
   1126c:	cbnz	w3, 11190 <gzgets@@Base+0x70>
   11270:	mov	x0, x19
   11274:	bl	10860 <gzclearerr@@ZLIB_1.2.0.2+0x688>
   11278:	cmn	w0, #0x1
   1127c:	b.eq	11218 <gzgets@@Base+0xf8>  // b.none
   11280:	ldr	w3, [x19]
   11284:	cbnz	w3, 11190 <gzgets@@Base+0x70>
   11288:	mov	w0, #0x1                   	// #1
   1128c:	str	w0, [x19, #84]
   11290:	b	111f0 <gzgets@@Base+0xd0>
   11294:	mov	x0, #0x0                   	// #0
   11298:	ret
   1129c:	ldr	x20, [x19, #96]
   112a0:	str	wzr, [x19, #104]
   112a4:	cbz	x20, 11174 <gzgets@@Base+0x54>
   112a8:	ldr	w2, [x19]
   112ac:	mov	x0, x19
   112b0:	mov	w4, #0x0                   	// #0
   112b4:	mov	w1, w2
   112b8:	mov	x3, x1
   112bc:	cmp	x1, x20
   112c0:	cbz	w2, 1130c <gzgets@@Base+0x1ec>
   112c4:	b.le	112d4 <gzgets@@Base+0x1b4>
   112c8:	sub	w4, w2, w20
   112cc:	and	x3, x20, #0xffffffff
   112d0:	mov	w1, w20
   112d4:	ldp	x2, x0, [x19, #8]
   112d8:	subs	x20, x20, x3
   112dc:	str	w4, [x19]
   112e0:	add	x1, x2, x1
   112e4:	add	x3, x0, x3
   112e8:	stp	x1, x3, [x19, #8]
   112ec:	b.eq	11174 <gzgets@@Base+0x54>  // b.none
   112f0:	ldr	w2, [x19]
   112f4:	mov	x0, x19
   112f8:	mov	w4, #0x0                   	// #0
   112fc:	mov	w1, w2
   11300:	mov	x3, x1
   11304:	cmp	x1, x20
   11308:	cbnz	w2, 112c4 <gzgets@@Base+0x1a4>
   1130c:	ldr	w1, [x19, #80]
   11310:	cbz	w1, 1131c <gzgets@@Base+0x1fc>
   11314:	ldr	w1, [x19, #128]
   11318:	cbz	w1, 11174 <gzgets@@Base+0x54>
   1131c:	bl	10860 <gzclearerr@@ZLIB_1.2.0.2+0x688>
   11320:	cmn	w0, #0x1
   11324:	b.ne	112a8 <gzgets@@Base+0x188>  // b.any
   11328:	b	11220 <gzgets@@Base+0x100>
   1132c:	nop

0000000000011330 <gzdirect@@ZLIB_1.2.2.3>:
   11330:	cbz	x0, 1137c <gzdirect@@ZLIB_1.2.2.3+0x4c>
   11334:	stp	x29, x30, [sp, #-32]!
   11338:	mov	w1, #0x1c4f                	// #7247
   1133c:	mov	x29, sp
   11340:	ldr	w2, [x0, #24]
   11344:	str	x19, [sp, #16]
   11348:	mov	x19, x0
   1134c:	cmp	w2, w1
   11350:	b.eq	11364 <gzdirect@@ZLIB_1.2.2.3+0x34>  // b.none
   11354:	ldr	w0, [x19, #64]
   11358:	ldr	x19, [sp, #16]
   1135c:	ldp	x29, x30, [sp], #32
   11360:	ret
   11364:	ldr	w1, [x0, #68]
   11368:	cbnz	w1, 11354 <gzdirect@@ZLIB_1.2.2.3+0x24>
   1136c:	ldr	w1, [x0]
   11370:	cbnz	w1, 11354 <gzdirect@@ZLIB_1.2.2.3+0x24>
   11374:	bl	10348 <gzclearerr@@ZLIB_1.2.0.2+0x170>
   11378:	b	11354 <gzdirect@@ZLIB_1.2.2.3+0x24>
   1137c:	mov	w0, #0x0                   	// #0
   11380:	ret
   11384:	nop

0000000000011388 <gzclose_r@@ZLIB_1.2.3.5>:
   11388:	stp	x29, x30, [sp, #-48]!
   1138c:	mov	x29, sp
   11390:	stp	x19, x20, [sp, #16]
   11394:	cbz	x0, 11428 <gzclose_r@@ZLIB_1.2.3.5+0xa0>
   11398:	mov	x19, x0
   1139c:	mov	w0, #0x1c4f                	// #7247
   113a0:	ldr	w1, [x19, #24]
   113a4:	cmp	w1, w0
   113a8:	b.ne	11428 <gzclose_r@@ZLIB_1.2.3.5+0xa0>  // b.any
   113ac:	ldr	w0, [x19, #40]
   113b0:	str	x21, [sp, #32]
   113b4:	cbnz	w0, 1140c <gzclose_r@@ZLIB_1.2.3.5+0x84>
   113b8:	ldr	w20, [x19, #108]
   113bc:	mov	x2, #0x0                   	// #0
   113c0:	mov	w1, #0x0                   	// #0
   113c4:	mov	x0, x19
   113c8:	cmn	w20, #0x5
   113cc:	csel	w20, w20, wzr, eq  // eq = none
   113d0:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   113d4:	ldr	x0, [x19, #32]
   113d8:	bl	2570 <free@plt>
   113dc:	ldr	w0, [x19, #28]
   113e0:	bl	2510 <close@plt>
   113e4:	mov	w21, w0
   113e8:	mov	x0, x19
   113ec:	bl	2570 <free@plt>
   113f0:	cmp	w21, #0x0
   113f4:	ldr	x21, [sp, #32]
   113f8:	csinv	w20, w20, wzr, eq  // eq = none
   113fc:	mov	w0, w20
   11400:	ldp	x19, x20, [sp, #16]
   11404:	ldp	x29, x30, [sp], #48
   11408:	ret
   1140c:	add	x0, x19, #0x78
   11410:	bl	2550 <inflateEnd@plt>
   11414:	ldr	x0, [x19, #56]
   11418:	bl	2570 <free@plt>
   1141c:	ldr	x0, [x19, #48]
   11420:	bl	2570 <free@plt>
   11424:	b	113b8 <gzclose_r@@ZLIB_1.2.3.5+0x30>
   11428:	mov	w20, #0xfffffffe            	// #-2
   1142c:	b	113fc <gzclose_r@@ZLIB_1.2.3.5+0x74>
   11430:	stp	x29, x30, [sp, #-48]!
   11434:	mov	x29, sp
   11438:	stp	x19, x20, [sp, #16]
   1143c:	mov	x19, x0
   11440:	str	x21, [sp, #32]
   11444:	ldr	w21, [x0, #44]
   11448:	lsl	w0, w21, #1
   1144c:	bl	2460 <malloc@plt>
   11450:	str	x0, [x19, #48]
   11454:	cbz	x0, 11528 <gzclose_r@@ZLIB_1.2.3.5+0x1a0>
   11458:	mov	x20, x0
   1145c:	ldr	w0, [x19, #64]
   11460:	cbz	w0, 1147c <gzclose_r@@ZLIB_1.2.3.5+0xf4>
   11464:	mov	w0, #0x0                   	// #0
   11468:	str	w21, [x19, #40]
   1146c:	ldp	x19, x20, [sp, #16]
   11470:	ldr	x21, [sp, #32]
   11474:	ldp	x29, x30, [sp], #48
   11478:	ret
   1147c:	mov	w0, w21
   11480:	bl	2460 <malloc@plt>
   11484:	str	x0, [x19, #56]
   11488:	cbz	x0, 11520 <gzclose_r@@ZLIB_1.2.3.5+0x198>
   1148c:	add	x20, x19, #0x78
   11490:	stp	xzr, xzr, [x19, #184]
   11494:	adrp	x6, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
   11498:	ldp	w1, w5, [x19, #88]
   1149c:	str	xzr, [x20, #80]
   114a0:	mov	w4, #0x8                   	// #8
   114a4:	mov	x0, x20
   114a8:	add	x6, x6, #0x510
   114ac:	mov	w2, w4
   114b0:	mov	w7, #0x70                  	// #112
   114b4:	mov	w3, #0x1f                  	// #31
   114b8:	bl	24d0 <deflateInit2_@plt>
   114bc:	cbnz	w0, 114f4 <gzclose_r@@ZLIB_1.2.3.5+0x16c>
   114c0:	ldr	w0, [x19, #64]
   114c4:	ldr	w2, [x19, #44]
   114c8:	str	w2, [x19, #40]
   114cc:	str	xzr, [x19, #120]
   114d0:	cbnz	w0, 11544 <gzclose_r@@ZLIB_1.2.3.5+0x1bc>
   114d4:	ldr	x1, [x19, #56]
   114d8:	str	x1, [x20, #24]
   114dc:	str	w2, [x20, #32]
   114e0:	str	x1, [x19, #8]
   114e4:	ldp	x19, x20, [sp, #16]
   114e8:	ldr	x21, [sp, #32]
   114ec:	ldp	x29, x30, [sp], #48
   114f0:	ret
   114f4:	ldr	x0, [x19, #56]
   114f8:	bl	2570 <free@plt>
   114fc:	ldr	x0, [x19, #48]
   11500:	bl	2570 <free@plt>
   11504:	mov	x0, x19
   11508:	adrp	x2, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
   1150c:	mov	w1, #0xfffffffc            	// #-4
   11510:	add	x2, x2, #0x5b8
   11514:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   11518:	mov	w0, #0xffffffff            	// #-1
   1151c:	b	1146c <gzclose_r@@ZLIB_1.2.3.5+0xe4>
   11520:	mov	x0, x20
   11524:	bl	2570 <free@plt>
   11528:	mov	x0, x19
   1152c:	adrp	x2, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
   11530:	mov	w1, #0xfffffffc            	// #-4
   11534:	add	x2, x2, #0x5b8
   11538:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   1153c:	mov	w0, #0xffffffff            	// #-1
   11540:	b	1146c <gzclose_r@@ZLIB_1.2.3.5+0xe4>
   11544:	mov	w0, #0x0                   	// #0
   11548:	b	1146c <gzclose_r@@ZLIB_1.2.3.5+0xe4>
   1154c:	nop
   11550:	stp	x29, x30, [sp, #-64]!
   11554:	mov	x29, sp
   11558:	stp	x21, x22, [sp, #32]
   1155c:	mov	w22, w1
   11560:	ldr	w1, [x0, #40]
   11564:	stp	x19, x20, [sp, #16]
   11568:	mov	x19, x0
   1156c:	stp	x23, x24, [sp, #48]
   11570:	cbz	w1, 11718 <gzclose_r@@ZLIB_1.2.3.5+0x390>
   11574:	ldr	w23, [x19, #64]
   11578:	cbz	w23, 115fc <gzclose_r@@ZLIB_1.2.3.5+0x274>
   1157c:	ldr	w2, [x19, #128]
   11580:	add	x20, x19, #0x78
   11584:	cbz	w2, 1164c <gzclose_r@@ZLIB_1.2.3.5+0x2c4>
   11588:	mov	w21, #0x40000000            	// #1073741824
   1158c:	ldr	x1, [x19, #120]
   11590:	b	115b0 <gzclose_r@@ZLIB_1.2.3.5+0x228>
   11594:	ldr	x1, [x20]
   11598:	ldr	w2, [x20, #8]
   1159c:	add	x1, x1, w0, sxtw
   115a0:	sub	w2, w2, w0
   115a4:	str	x1, [x20]
   115a8:	str	w2, [x20, #8]
   115ac:	cbz	w2, 1164c <gzclose_r@@ZLIB_1.2.3.5+0x2c4>
   115b0:	ldr	w0, [x19, #28]
   115b4:	cmp	w2, w21
   115b8:	csel	w2, w2, w21, ls  // ls = plast
   115bc:	bl	2530 <write@plt>
   115c0:	tbz	w0, #31, 11594 <gzclose_r@@ZLIB_1.2.3.5+0x20c>
   115c4:	bl	2650 <__errno_location@plt>
   115c8:	ldr	w0, [x0]
   115cc:	mov	w23, #0xffffffff            	// #-1
   115d0:	bl	2500 <strerror@plt>
   115d4:	mov	x2, x0
   115d8:	mov	w1, w23
   115dc:	mov	x0, x19
   115e0:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   115e4:	mov	w0, w23
   115e8:	ldp	x19, x20, [sp, #16]
   115ec:	ldp	x21, x22, [sp, #32]
   115f0:	ldp	x23, x24, [sp, #48]
   115f4:	ldp	x29, x30, [sp], #64
   115f8:	ret
   115fc:	ldr	w3, [x19, #152]
   11600:	add	x20, x19, #0x78
   11604:	mov	w0, #0x0                   	// #0
   11608:	mov	x21, #0x40000000            	// #1073741824
   1160c:	cbz	w3, 11704 <gzclose_r@@ZLIB_1.2.3.5+0x37c>
   11610:	cbz	w22, 11620 <gzclose_r@@ZLIB_1.2.3.5+0x298>
   11614:	cmp	w22, #0x4
   11618:	ccmp	w0, #0x1, #0x4, eq  // eq = none
   1161c:	b.eq	11668 <gzclose_r@@ZLIB_1.2.3.5+0x2e0>  // b.none
   11620:	mov	w24, w3
   11624:	mov	w1, w22
   11628:	mov	x0, x20
   1162c:	bl	2490 <deflate@plt>
   11630:	cmn	w0, #0x2
   11634:	b.eq	1172c <gzclose_r@@ZLIB_1.2.3.5+0x3a4>  // b.none
   11638:	ldr	w3, [x20, #32]
   1163c:	cmp	w3, w24
   11640:	b.ne	1160c <gzclose_r@@ZLIB_1.2.3.5+0x284>  // b.any
   11644:	cmp	w22, #0x4
   11648:	b.eq	11748 <gzclose_r@@ZLIB_1.2.3.5+0x3c0>  // b.none
   1164c:	mov	w23, #0x0                   	// #0
   11650:	mov	w0, w23
   11654:	ldp	x19, x20, [sp, #16]
   11658:	ldp	x21, x22, [sp, #32]
   1165c:	ldp	x23, x24, [sp, #48]
   11660:	ldp	x29, x30, [sp], #64
   11664:	ret
   11668:	ldr	x1, [x19, #8]
   1166c:	ldr	x2, [x20, #24]
   11670:	cmp	x2, x1
   11674:	b.ls	11620 <gzclose_r@@ZLIB_1.2.3.5+0x298>  // b.plast
   11678:	sub	x2, x2, x1
   1167c:	ldr	w0, [x19, #28]
   11680:	cmp	x2, x21
   11684:	csel	x2, x2, x21, le
   11688:	mov	w2, w2
   1168c:	bl	2530 <write@plt>
   11690:	tbnz	w0, #31, 115c4 <gzclose_r@@ZLIB_1.2.3.5+0x23c>
   11694:	ldr	x1, [x19, #8]
   11698:	ldr	x2, [x20, #24]
   1169c:	add	x1, x1, w0, sxtw
   116a0:	str	x1, [x19, #8]
   116a4:	cmp	x1, x2
   116a8:	b.cs	116e4 <gzclose_r@@ZLIB_1.2.3.5+0x35c>  // b.hs, b.nlast
   116ac:	nop
   116b0:	sub	x2, x2, x1
   116b4:	ldr	w0, [x19, #28]
   116b8:	cmp	x2, x21
   116bc:	csel	x2, x2, x21, le
   116c0:	mov	w2, w2
   116c4:	bl	2530 <write@plt>
   116c8:	tbnz	w0, #31, 115c4 <gzclose_r@@ZLIB_1.2.3.5+0x23c>
   116cc:	ldr	x1, [x19, #8]
   116d0:	ldr	x2, [x20, #24]
   116d4:	add	x1, x1, w0, sxtw
   116d8:	str	x1, [x19, #8]
   116dc:	cmp	x1, x2
   116e0:	b.cc	116b0 <gzclose_r@@ZLIB_1.2.3.5+0x328>  // b.lo, b.ul, b.last
   116e4:	ldr	w24, [x20, #32]
   116e8:	cbnz	w24, 11624 <gzclose_r@@ZLIB_1.2.3.5+0x29c>
   116ec:	ldr	w24, [x19, #40]
   116f0:	ldr	x0, [x19, #56]
   116f4:	str	x0, [x20, #24]
   116f8:	str	w24, [x20, #32]
   116fc:	str	x0, [x19, #8]
   11700:	b	11624 <gzclose_r@@ZLIB_1.2.3.5+0x29c>
   11704:	ldr	x1, [x19, #8]
   11708:	ldr	x2, [x20, #24]
   1170c:	cmp	x2, x1
   11710:	b.hi	116b0 <gzclose_r@@ZLIB_1.2.3.5+0x328>  // b.pmore
   11714:	b	116ec <gzclose_r@@ZLIB_1.2.3.5+0x364>
   11718:	bl	11430 <gzclose_r@@ZLIB_1.2.3.5+0xa8>
   1171c:	mov	w23, w0
   11720:	cmn	w0, #0x1
   11724:	b.ne	11574 <gzclose_r@@ZLIB_1.2.3.5+0x1ec>  // b.any
   11728:	b	115e4 <gzclose_r@@ZLIB_1.2.3.5+0x25c>
   1172c:	mov	w1, w0
   11730:	adrp	x2, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
   11734:	mov	x0, x19
   11738:	add	x2, x2, #0x6a0
   1173c:	mov	w23, #0xffffffff            	// #-1
   11740:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   11744:	b	115e4 <gzclose_r@@ZLIB_1.2.3.5+0x25c>
   11748:	mov	x0, x20
   1174c:	bl	2480 <deflateReset@plt>
   11750:	b	115e4 <gzclose_r@@ZLIB_1.2.3.5+0x25c>
   11754:	nop
   11758:	stp	x29, x30, [sp, #-48]!
   1175c:	mov	x29, sp
   11760:	ldr	w1, [x0, #40]
   11764:	stp	x19, x20, [sp, #16]
   11768:	mov	x19, x0
   1176c:	cbz	w1, 118ac <gzclose_r@@ZLIB_1.2.3.5+0x524>
   11770:	ldr	w0, [x19, #64]
   11774:	cbz	w0, 117f4 <gzclose_r@@ZLIB_1.2.3.5+0x46c>
   11778:	ldr	w2, [x19, #128]
   1177c:	add	x20, x19, #0x78
   11780:	cbz	w2, 11830 <gzclose_r@@ZLIB_1.2.3.5+0x4a8>
   11784:	stp	x21, x22, [sp, #32]
   11788:	mov	w21, #0x40000000            	// #1073741824
   1178c:	ldr	x1, [x19, #120]
   11790:	b	117b0 <gzclose_r@@ZLIB_1.2.3.5+0x428>
   11794:	ldr	x1, [x20]
   11798:	ldr	w2, [x20, #8]
   1179c:	add	x1, x1, w0, sxtw
   117a0:	sub	w2, w2, w0
   117a4:	str	x1, [x20]
   117a8:	str	w2, [x20, #8]
   117ac:	cbz	w2, 1182c <gzclose_r@@ZLIB_1.2.3.5+0x4a4>
   117b0:	ldr	w0, [x19, #28]
   117b4:	cmp	w2, w21
   117b8:	csel	w2, w2, w21, ls  // ls = plast
   117bc:	bl	2530 <write@plt>
   117c0:	tbz	w0, #31, 11794 <gzclose_r@@ZLIB_1.2.3.5+0x40c>
   117c4:	bl	2650 <__errno_location@plt>
   117c8:	ldr	w0, [x0]
   117cc:	bl	2500 <strerror@plt>
   117d0:	mov	x2, x0
   117d4:	mov	w1, #0xffffffff            	// #-1
   117d8:	mov	x0, x19
   117dc:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   117e0:	ldp	x21, x22, [sp, #32]
   117e4:	mov	w0, #0xffffffff            	// #-1
   117e8:	ldp	x19, x20, [sp, #16]
   117ec:	ldp	x29, x30, [sp], #48
   117f0:	ret
   117f4:	ldr	w0, [x19, #152]
   117f8:	add	x20, x19, #0x78
   117fc:	stp	x21, x22, [sp, #32]
   11800:	mov	x21, #0x40000000            	// #1073741824
   11804:	mov	w22, w0
   11808:	cbz	w0, 11840 <gzclose_r@@ZLIB_1.2.3.5+0x4b8>
   1180c:	mov	x0, x20
   11810:	mov	w1, #0x0                   	// #0
   11814:	bl	2490 <deflate@plt>
   11818:	cmn	w0, #0x2
   1181c:	b.eq	118bc <gzclose_r@@ZLIB_1.2.3.5+0x534>  // b.none
   11820:	ldr	w0, [x20, #32]
   11824:	cmp	w0, w22
   11828:	b.ne	11804 <gzclose_r@@ZLIB_1.2.3.5+0x47c>  // b.any
   1182c:	ldp	x21, x22, [sp, #32]
   11830:	mov	w0, #0x0                   	// #0
   11834:	ldp	x19, x20, [sp, #16]
   11838:	ldp	x29, x30, [sp], #48
   1183c:	ret
   11840:	ldr	x1, [x19, #8]
   11844:	ldr	x2, [x20, #24]
   11848:	cmp	x1, x2
   1184c:	b.cc	1186c <gzclose_r@@ZLIB_1.2.3.5+0x4e4>  // b.lo, b.ul, b.last
   11850:	b	11894 <gzclose_r@@ZLIB_1.2.3.5+0x50c>
   11854:	ldr	x1, [x19, #8]
   11858:	ldr	x2, [x20, #24]
   1185c:	add	x1, x1, w0, sxtw
   11860:	str	x1, [x19, #8]
   11864:	cmp	x2, x1
   11868:	b.ls	1188c <gzclose_r@@ZLIB_1.2.3.5+0x504>  // b.plast
   1186c:	sub	x2, x2, x1
   11870:	ldr	w0, [x19, #28]
   11874:	cmp	x2, x21
   11878:	csel	x2, x2, x21, le
   1187c:	mov	w2, w2
   11880:	bl	2530 <write@plt>
   11884:	tbz	w0, #31, 11854 <gzclose_r@@ZLIB_1.2.3.5+0x4cc>
   11888:	b	117c4 <gzclose_r@@ZLIB_1.2.3.5+0x43c>
   1188c:	ldr	w22, [x20, #32]
   11890:	cbnz	w22, 1180c <gzclose_r@@ZLIB_1.2.3.5+0x484>
   11894:	ldr	w22, [x19, #40]
   11898:	ldr	x0, [x19, #56]
   1189c:	str	x0, [x20, #24]
   118a0:	str	w22, [x20, #32]
   118a4:	str	x0, [x19, #8]
   118a8:	b	1180c <gzclose_r@@ZLIB_1.2.3.5+0x484>
   118ac:	bl	11430 <gzclose_r@@ZLIB_1.2.3.5+0xa8>
   118b0:	cmn	w0, #0x1
   118b4:	b.ne	11770 <gzclose_r@@ZLIB_1.2.3.5+0x3e8>  // b.any
   118b8:	b	117e8 <gzclose_r@@ZLIB_1.2.3.5+0x460>
   118bc:	mov	w1, w0
   118c0:	adrp	x2, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
   118c4:	mov	x0, x19
   118c8:	add	x2, x2, #0x6a0
   118cc:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   118d0:	mov	w0, #0xffffffff            	// #-1
   118d4:	ldp	x21, x22, [sp, #32]
   118d8:	b	117e8 <gzclose_r@@ZLIB_1.2.3.5+0x460>
   118dc:	nop
   118e0:	stp	x29, x30, [sp, #-80]!
   118e4:	mov	x29, sp
   118e8:	stp	x23, x24, [sp, #48]
   118ec:	cbz	x2, 11a0c <gzclose_r@@ZLIB_1.2.3.5+0x684>
   118f0:	mov	x23, x1
   118f4:	ldr	w1, [x0, #40]
   118f8:	stp	x19, x20, [sp, #16]
   118fc:	mov	x24, x2
   11900:	mov	x19, x0
   11904:	cbz	w1, 11a20 <gzclose_r@@ZLIB_1.2.3.5+0x698>
   11908:	ldr	w0, [x19, #104]
   1190c:	str	x25, [sp, #64]
   11910:	add	x25, x19, #0x78
   11914:	stp	x21, x22, [sp, #32]
   11918:	ldr	w3, [x25, #8]
   1191c:	cbnz	w0, 11a34 <gzclose_r@@ZLIB_1.2.3.5+0x6ac>
   11920:	ldr	w20, [x19, #40]
   11924:	cmp	x24, w20, uxtw
   11928:	b.cs	119b0 <gzclose_r@@ZLIB_1.2.3.5+0x628>  // b.hs, b.nlast
   1192c:	mov	x21, x24
   11930:	ldr	x2, [x19, #48]
   11934:	cbz	w3, 11ac0 <gzclose_r@@ZLIB_1.2.3.5+0x738>
   11938:	ldr	x0, [x19, #120]
   1193c:	add	x3, x0, w3, uxtw
   11940:	sub	x0, x3, x2
   11944:	mov	x1, x23
   11948:	sub	w25, w20, w0
   1194c:	sub	w20, w20, w0
   11950:	cmp	x25, x21
   11954:	add	x0, x2, w0, uxtw
   11958:	mov	x22, x25
   1195c:	b.ls	1196c <gzclose_r@@ZLIB_1.2.3.5+0x5e4>  // b.plast
   11960:	mov	w25, w21
   11964:	and	x22, x21, #0xffffffff
   11968:	mov	x20, x25
   1196c:	mov	x2, x22
   11970:	bl	23a0 <memcpy@plt>
   11974:	ldr	x0, [x19, #16]
   11978:	subs	x21, x21, x22
   1197c:	ldr	w1, [x19, #128]
   11980:	add	x25, x0, x25
   11984:	str	x25, [x19, #16]
   11988:	add	w20, w1, w20
   1198c:	str	w20, [x19, #128]
   11990:	b.ne	11acc <gzclose_r@@ZLIB_1.2.3.5+0x744>  // b.any
   11994:	mov	x0, x24
   11998:	ldp	x19, x20, [sp, #16]
   1199c:	ldp	x21, x22, [sp, #32]
   119a0:	ldp	x23, x24, [sp, #48]
   119a4:	ldr	x25, [sp, #64]
   119a8:	ldp	x29, x30, [sp], #80
   119ac:	ret
   119b0:	cbz	w3, 119c4 <gzclose_r@@ZLIB_1.2.3.5+0x63c>
   119b4:	mov	x0, x19
   119b8:	bl	11758 <gzclose_r@@ZLIB_1.2.3.5+0x3d0>
   119bc:	cmn	w0, #0x1
   119c0:	b.eq	11a00 <gzclose_r@@ZLIB_1.2.3.5+0x678>  // b.none
   119c4:	mov	x20, x24
   119c8:	mov	x22, #0xfffffffe            	// #4294967294
   119cc:	mov	w25, #0xffffffff            	// #-1
   119d0:	mov	x21, #0xffffffff            	// #4294967295
   119d4:	str	x23, [x19, #120]
   119d8:	mov	x0, x19
   119dc:	cmp	x20, x22
   119e0:	ldr	x1, [x19, #16]
   119e4:	b.hi	11aec <gzclose_r@@ZLIB_1.2.3.5+0x764>  // b.pmore
   119e8:	str	w20, [x19, #128]
   119ec:	add	x20, x1, x20
   119f0:	str	x20, [x19, #16]
   119f4:	bl	11758 <gzclose_r@@ZLIB_1.2.3.5+0x3d0>
   119f8:	cmn	w0, #0x1
   119fc:	b.ne	11994 <gzclose_r@@ZLIB_1.2.3.5+0x60c>  // b.any
   11a00:	ldp	x19, x20, [sp, #16]
   11a04:	ldp	x21, x22, [sp, #32]
   11a08:	ldr	x25, [sp, #64]
   11a0c:	mov	x24, #0x0                   	// #0
   11a10:	mov	x0, x24
   11a14:	ldp	x23, x24, [sp, #48]
   11a18:	ldp	x29, x30, [sp], #80
   11a1c:	ret
   11a20:	bl	11430 <gzclose_r@@ZLIB_1.2.3.5+0xa8>
   11a24:	cmn	w0, #0x1
   11a28:	b.ne	11908 <gzclose_r@@ZLIB_1.2.3.5+0x580>  // b.any
   11a2c:	ldp	x19, x20, [sp, #16]
   11a30:	b	11a0c <gzclose_r@@ZLIB_1.2.3.5+0x684>
   11a34:	str	wzr, [x19, #104]
   11a38:	ldr	x20, [x19, #96]
   11a3c:	cbnz	w3, 11b10 <gzclose_r@@ZLIB_1.2.3.5+0x788>
   11a40:	mov	w1, #0x1                   	// #1
   11a44:	cbnz	x20, 11a9c <gzclose_r@@ZLIB_1.2.3.5+0x714>
   11a48:	ldr	w20, [x19, #40]
   11a4c:	ldr	w3, [x19, #128]
   11a50:	cmp	x24, w20, uxtw
   11a54:	b.cs	119b0 <gzclose_r@@ZLIB_1.2.3.5+0x628>  // b.hs, b.nlast
   11a58:	b	1192c <gzclose_r@@ZLIB_1.2.3.5+0x5a4>
   11a5c:	mov	w2, w21
   11a60:	mov	w1, #0x0                   	// #0
   11a64:	bl	24a0 <memset@plt>
   11a68:	ldr	x0, [x19, #48]
   11a6c:	ldr	x1, [x19, #16]
   11a70:	str	x0, [x25]
   11a74:	str	w21, [x25, #8]
   11a78:	mov	x0, x19
   11a7c:	add	x1, x1, x22
   11a80:	str	x1, [x19, #16]
   11a84:	bl	11758 <gzclose_r@@ZLIB_1.2.3.5+0x3d0>
   11a88:	cmn	w0, #0x1
   11a8c:	b.eq	11a00 <gzclose_r@@ZLIB_1.2.3.5+0x678>  // b.none
   11a90:	subs	x20, x20, x22
   11a94:	mov	w1, #0x0                   	// #0
   11a98:	b.eq	11a48 <gzclose_r@@ZLIB_1.2.3.5+0x6c0>  // b.none
   11a9c:	ldr	w21, [x19, #40]
   11aa0:	mov	w22, w21
   11aa4:	cmp	x20, w21, uxtw
   11aa8:	b.ge	11ab4 <gzclose_r@@ZLIB_1.2.3.5+0x72c>  // b.tcont
   11aac:	mov	w21, w20
   11ab0:	and	x22, x20, #0xffffffff
   11ab4:	ldr	x0, [x19, #48]
   11ab8:	cbz	w1, 11a6c <gzclose_r@@ZLIB_1.2.3.5+0x6e4>
   11abc:	b	11a5c <gzclose_r@@ZLIB_1.2.3.5+0x6d4>
   11ac0:	mov	x0, x2
   11ac4:	str	x2, [x19, #120]
   11ac8:	b	1193c <gzclose_r@@ZLIB_1.2.3.5+0x5b4>
   11acc:	mov	x0, x19
   11ad0:	add	x23, x23, x22
   11ad4:	bl	11758 <gzclose_r@@ZLIB_1.2.3.5+0x3d0>
   11ad8:	cmn	w0, #0x1
   11adc:	b.eq	11a00 <gzclose_r@@ZLIB_1.2.3.5+0x678>  // b.none
   11ae0:	ldr	w20, [x19, #40]
   11ae4:	ldr	w3, [x19, #128]
   11ae8:	b	11930 <gzclose_r@@ZLIB_1.2.3.5+0x5a8>
   11aec:	add	x1, x1, x21
   11af0:	str	x1, [x19, #16]
   11af4:	str	w25, [x19, #128]
   11af8:	bl	11758 <gzclose_r@@ZLIB_1.2.3.5+0x3d0>
   11afc:	cmn	w0, #0x1
   11b00:	b.eq	11a00 <gzclose_r@@ZLIB_1.2.3.5+0x678>  // b.none
   11b04:	subs	x20, x20, x21
   11b08:	b.ne	119d8 <gzclose_r@@ZLIB_1.2.3.5+0x650>  // b.any
   11b0c:	b	11994 <gzclose_r@@ZLIB_1.2.3.5+0x60c>
   11b10:	mov	x0, x19
   11b14:	bl	11758 <gzclose_r@@ZLIB_1.2.3.5+0x3d0>
   11b18:	cmn	w0, #0x1
   11b1c:	b.ne	11a40 <gzclose_r@@ZLIB_1.2.3.5+0x6b8>  // b.any
   11b20:	b	11a00 <gzclose_r@@ZLIB_1.2.3.5+0x678>
   11b24:	nop

0000000000011b28 <gzwrite@@Base>:
   11b28:	stp	x29, x30, [sp, #-32]!
   11b2c:	mov	x29, sp
   11b30:	str	x19, [sp, #16]
   11b34:	cbz	x0, 11b74 <gzwrite@@Base+0x4c>
   11b38:	ldr	w5, [x0, #24]
   11b3c:	mov	w4, #0x79b1                	// #31153
   11b40:	mov	w19, #0x0                   	// #0
   11b44:	cmp	w5, w4
   11b48:	b.ne	11b64 <gzwrite@@Base+0x3c>  // b.any
   11b4c:	ldr	w19, [x0, #108]
   11b50:	cbnz	w19, 11b74 <gzwrite@@Base+0x4c>
   11b54:	tbnz	w2, #31, 11b88 <gzwrite@@Base+0x60>
   11b58:	mov	w2, w2
   11b5c:	bl	118e0 <gzclose_r@@ZLIB_1.2.3.5+0x558>
   11b60:	mov	w19, w0
   11b64:	mov	w0, w19
   11b68:	ldr	x19, [sp, #16]
   11b6c:	ldp	x29, x30, [sp], #32
   11b70:	ret
   11b74:	mov	w19, #0x0                   	// #0
   11b78:	mov	w0, w19
   11b7c:	ldr	x19, [sp, #16]
   11b80:	ldp	x29, x30, [sp], #32
   11b84:	ret
   11b88:	adrp	x2, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
   11b8c:	mov	w1, #0xfffffffd            	// #-3
   11b90:	add	x2, x2, #0x6c8
   11b94:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   11b98:	b	11b64 <gzwrite@@Base+0x3c>
   11b9c:	nop

0000000000011ba0 <gzfwrite@@ZLIB_1.2.9>:
   11ba0:	cbz	x3, 11c0c <gzfwrite@@ZLIB_1.2.9+0x6c>
   11ba4:	stp	x29, x30, [sp, #-32]!
   11ba8:	mov	x4, x0
   11bac:	mov	x0, #0x0                   	// #0
   11bb0:	mov	x29, sp
   11bb4:	ldr	w5, [x3, #24]
   11bb8:	str	x19, [sp, #16]
   11bbc:	mov	x19, x1
   11bc0:	mov	w1, #0x79b1                	// #31153
   11bc4:	cmp	w5, w1
   11bc8:	b.ne	11c00 <gzfwrite@@ZLIB_1.2.9+0x60>  // b.any
   11bcc:	ldr	w1, [x3, #108]
   11bd0:	cbnz	w1, 11c00 <gzfwrite@@ZLIB_1.2.9+0x60>
   11bd4:	cbz	x19, 11c00 <gzfwrite@@ZLIB_1.2.9+0x60>
   11bd8:	mul	x0, x2, x19
   11bdc:	udiv	x1, x0, x19
   11be0:	cmp	x1, x2
   11be4:	b.ne	11c14 <gzfwrite@@ZLIB_1.2.9+0x74>  // b.any
   11be8:	cbz	x0, 11c00 <gzfwrite@@ZLIB_1.2.9+0x60>
   11bec:	mov	x2, x0
   11bf0:	mov	x1, x4
   11bf4:	mov	x0, x3
   11bf8:	bl	118e0 <gzclose_r@@ZLIB_1.2.3.5+0x558>
   11bfc:	udiv	x0, x0, x19
   11c00:	ldr	x19, [sp, #16]
   11c04:	ldp	x29, x30, [sp], #32
   11c08:	ret
   11c0c:	mov	x0, #0x0                   	// #0
   11c10:	ret
   11c14:	mov	x0, x3
   11c18:	adrp	x2, 16000 <gzclose_w@@ZLIB_1.2.3.5+0x3c38>
   11c1c:	mov	w1, #0xfffffffe            	// #-2
   11c20:	add	x2, x2, #0x658
   11c24:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   11c28:	mov	x0, #0x0                   	// #0
   11c2c:	b	11c00 <gzfwrite@@ZLIB_1.2.9+0x60>

0000000000011c30 <gzputc@@Base>:
   11c30:	cbz	x0, 11dd4 <gzputc@@Base+0x1a4>
   11c34:	stp	x29, x30, [sp, #-80]!
   11c38:	mov	x29, sp
   11c3c:	ldr	w2, [x0, #24]
   11c40:	stp	x19, x20, [sp, #16]
   11c44:	mov	w20, w1
   11c48:	mov	x19, x0
   11c4c:	mov	w1, #0x79b1                	// #31153
   11c50:	cmp	w2, w1
   11c54:	b.ne	11db8 <gzputc@@Base+0x188>  // b.any
   11c58:	ldr	w1, [x0, #108]
   11c5c:	cbnz	w1, 11db8 <gzputc@@Base+0x188>
   11c60:	ldr	w1, [x0, #104]
   11c64:	cbnz	w1, 11d14 <gzputc@@Base+0xe4>
   11c68:	ldr	w1, [x19, #40]
   11c6c:	and	w3, w20, #0xff
   11c70:	cbz	w1, 11ca0 <gzputc@@Base+0x70>
   11c74:	stp	x23, x24, [sp, #48]
   11c78:	add	x24, x19, #0x78
   11c7c:	ldr	w0, [x24, #8]
   11c80:	ldr	x2, [x19, #48]
   11c84:	cbz	w0, 11ccc <gzputc@@Base+0x9c>
   11c88:	ldr	x4, [x19, #120]
   11c8c:	add	x0, x4, w0, uxtw
   11c90:	sub	x0, x0, x2
   11c94:	cmp	w1, w0
   11c98:	b.hi	11ce4 <gzputc@@Base+0xb4>  // b.pmore
   11c9c:	ldp	x23, x24, [sp, #48]
   11ca0:	mov	x0, x19
   11ca4:	add	x1, sp, #0x48
   11ca8:	mov	x2, #0x1                   	// #1
   11cac:	strb	w3, [sp, #72]
   11cb0:	bl	118e0 <gzclose_r@@ZLIB_1.2.3.5+0x558>
   11cb4:	cmp	x0, #0x1
   11cb8:	b.ne	11db8 <gzputc@@Base+0x188>  // b.any
   11cbc:	and	w0, w20, #0xff
   11cc0:	ldp	x19, x20, [sp, #16]
   11cc4:	ldp	x29, x30, [sp], #80
   11cc8:	ret
   11ccc:	mov	x4, x2
   11cd0:	str	x2, [x19, #120]
   11cd4:	add	x0, x4, w0, uxtw
   11cd8:	sub	x0, x0, x2
   11cdc:	cmp	w1, w0
   11ce0:	b.ls	11c9c <gzputc@@Base+0x6c>  // b.plast
   11ce4:	strb	w3, [x2, w0, uxtw]
   11ce8:	and	w0, w20, #0xff
   11cec:	ldr	w2, [x24, #8]
   11cf0:	ldr	x1, [x19, #16]
   11cf4:	add	w2, w2, #0x1
   11cf8:	str	w2, [x24, #8]
   11cfc:	add	x1, x1, #0x1
   11d00:	ldp	x23, x24, [sp, #48]
   11d04:	str	x1, [x19, #16]
   11d08:	ldp	x19, x20, [sp, #16]
   11d0c:	ldp	x29, x30, [sp], #80
   11d10:	ret
   11d14:	stp	x23, x24, [sp, #48]
   11d18:	add	x24, x0, #0x78
   11d1c:	ldr	w1, [x24, #8]
   11d20:	stp	x21, x22, [sp, #32]
   11d24:	str	wzr, [x0, #104]
   11d28:	ldr	x21, [x0, #96]
   11d2c:	cbnz	w1, 11da0 <gzputc@@Base+0x170>
   11d30:	mov	w1, #0x1                   	// #1
   11d34:	cbnz	x21, 11d6c <gzputc@@Base+0x13c>
   11d38:	b	11dc8 <gzputc@@Base+0x198>
   11d3c:	ldr	x1, [x19, #16]
   11d40:	str	x0, [x24]
   11d44:	str	w22, [x24, #8]
   11d48:	mov	x0, x19
   11d4c:	add	x1, x1, x23
   11d50:	str	x1, [x19, #16]
   11d54:	bl	11758 <gzclose_r@@ZLIB_1.2.3.5+0x3d0>
   11d58:	cmn	w0, #0x1
   11d5c:	mov	w1, #0x0                   	// #0
   11d60:	b.eq	11db0 <gzputc@@Base+0x180>  // b.none
   11d64:	subs	x21, x21, x23
   11d68:	b.eq	11dc8 <gzputc@@Base+0x198>  // b.none
   11d6c:	ldr	w22, [x19, #40]
   11d70:	mov	w23, w22
   11d74:	cmp	x21, w22, uxtw
   11d78:	b.ge	11d84 <gzputc@@Base+0x154>  // b.tcont
   11d7c:	mov	w22, w21
   11d80:	and	x23, x21, #0xffffffff
   11d84:	ldr	x0, [x19, #48]
   11d88:	cbz	w1, 11d3c <gzputc@@Base+0x10c>
   11d8c:	mov	w2, w22
   11d90:	mov	w1, #0x0                   	// #0
   11d94:	bl	24a0 <memset@plt>
   11d98:	ldr	x0, [x19, #48]
   11d9c:	b	11d3c <gzputc@@Base+0x10c>
   11da0:	bl	11758 <gzclose_r@@ZLIB_1.2.3.5+0x3d0>
   11da4:	cmn	w0, #0x1
   11da8:	b.ne	11d30 <gzputc@@Base+0x100>  // b.any
   11dac:	nop
   11db0:	ldp	x21, x22, [sp, #32]
   11db4:	ldp	x23, x24, [sp, #48]
   11db8:	mov	w0, #0xffffffff            	// #-1
   11dbc:	ldp	x19, x20, [sp, #16]
   11dc0:	ldp	x29, x30, [sp], #80
   11dc4:	ret
   11dc8:	ldp	x21, x22, [sp, #32]
   11dcc:	ldp	x23, x24, [sp, #48]
   11dd0:	b	11c68 <gzputc@@Base+0x38>
   11dd4:	mov	w0, #0xffffffff            	// #-1
   11dd8:	ret
   11ddc:	nop

0000000000011de0 <gzputs@@Base>:
   11de0:	cbz	x0, 11e4c <gzputs@@Base+0x6c>
   11de4:	stp	x29, x30, [sp, #-32]!
   11de8:	mov	x29, sp
   11dec:	stp	x19, x20, [sp, #16]
   11df0:	mov	x19, x0
   11df4:	mov	x20, x1
   11df8:	mov	w0, #0x79b1                	// #31153
   11dfc:	ldr	w1, [x19, #24]
   11e00:	cmp	w1, w0
   11e04:	b.ne	11e44 <gzputs@@Base+0x64>  // b.any
   11e08:	ldr	w0, [x19, #108]
   11e0c:	cbnz	w0, 11e44 <gzputs@@Base+0x64>
   11e10:	mov	x0, x20
   11e14:	bl	23e0 <strlen@plt>
   11e18:	mov	x1, x20
   11e1c:	mov	x20, x0
   11e20:	mov	x2, x20
   11e24:	mov	x0, x19
   11e28:	bl	118e0 <gzclose_r@@ZLIB_1.2.3.5+0x558>
   11e2c:	cmp	w0, #0x0
   11e30:	ccmp	x20, #0x0, #0x4, eq  // eq = none
   11e34:	b.ne	11e44 <gzputs@@Base+0x64>  // b.any
   11e38:	ldp	x19, x20, [sp, #16]
   11e3c:	ldp	x29, x30, [sp], #32
   11e40:	ret
   11e44:	mov	w0, #0xffffffff            	// #-1
   11e48:	b	11e38 <gzputs@@Base+0x58>
   11e4c:	mov	w0, #0xffffffff            	// #-1
   11e50:	ret
   11e54:	nop

0000000000011e58 <gzvprintf@@ZLIB_1.2.7.1>:
   11e58:	stp	x29, x30, [sp, #-112]!
   11e5c:	mov	x29, sp
   11e60:	stp	x21, x22, [sp, #32]
   11e64:	cbz	x0, 1209c <gzvprintf@@ZLIB_1.2.7.1+0x244>
   11e68:	stp	x19, x20, [sp, #16]
   11e6c:	mov	x19, x0
   11e70:	stp	x23, x24, [sp, #48]
   11e74:	mov	x23, x2
   11e78:	ldr	w2, [x0, #24]
   11e7c:	str	x25, [sp, #64]
   11e80:	mov	x25, x1
   11e84:	mov	w1, #0x79b1                	// #31153
   11e88:	cmp	w2, w1
   11e8c:	b.ne	12088 <gzvprintf@@ZLIB_1.2.7.1+0x230>  // b.any
   11e90:	ldr	w1, [x0, #108]
   11e94:	cbnz	w1, 12088 <gzvprintf@@ZLIB_1.2.7.1+0x230>
   11e98:	ldr	w1, [x0, #40]
   11e9c:	cbz	w1, 11f68 <gzvprintf@@ZLIB_1.2.7.1+0x110>
   11ea0:	ldr	w1, [x19, #104]
   11ea4:	add	x24, x19, #0x78
   11ea8:	ldr	w0, [x24, #8]
   11eac:	cbnz	w1, 11f48 <gzvprintf@@ZLIB_1.2.7.1+0xf0>
   11eb0:	cbz	w0, 11f58 <gzvprintf@@ZLIB_1.2.7.1+0x100>
   11eb4:	ldr	x20, [x19, #120]
   11eb8:	add	x20, x20, w0, uxtw
   11ebc:	ldr	w1, [x19, #40]
   11ec0:	mov	x2, x25
   11ec4:	ldp	x6, x7, [x23]
   11ec8:	sub	w0, w1, #0x1
   11ecc:	ldp	x4, x5, [x23, #16]
   11ed0:	add	x3, sp, #0x50
   11ed4:	strb	wzr, [x20, w0, uxtw]
   11ed8:	mov	x0, x20
   11edc:	stp	x6, x7, [sp, #80]
   11ee0:	ldr	w1, [x19, #40]
   11ee4:	stp	x4, x5, [sp, #96]
   11ee8:	bl	2620 <vsnprintf@plt>
   11eec:	mov	w21, w0
   11ef0:	cbz	w0, 11f2c <gzvprintf@@ZLIB_1.2.7.1+0xd4>
   11ef4:	ldr	w22, [x19, #40]
   11ef8:	cmp	w22, w0
   11efc:	b.ls	11f94 <gzvprintf@@ZLIB_1.2.7.1+0x13c>  // b.plast
   11f00:	sub	w0, w22, #0x1
   11f04:	ldrb	w0, [x20, w0, uxtw]
   11f08:	cbnz	w0, 11f94 <gzvprintf@@ZLIB_1.2.7.1+0x13c>
   11f0c:	ldr	x0, [x19, #16]
   11f10:	ldr	w20, [x24, #8]
   11f14:	add	w20, w21, w20
   11f18:	str	w20, [x24, #8]
   11f1c:	add	x0, x0, w21, sxtw
   11f20:	str	x0, [x19, #16]
   11f24:	cmp	w22, w20
   11f28:	b.ls	12034 <gzvprintf@@ZLIB_1.2.7.1+0x1dc>  // b.plast
   11f2c:	ldp	x19, x20, [sp, #16]
   11f30:	ldp	x23, x24, [sp, #48]
   11f34:	ldr	x25, [sp, #64]
   11f38:	mov	w0, w21
   11f3c:	ldp	x21, x22, [sp, #32]
   11f40:	ldp	x29, x30, [sp], #112
   11f44:	ret
   11f48:	str	wzr, [x19, #104]
   11f4c:	ldr	x20, [x19, #96]
   11f50:	cbnz	w0, 11fb4 <gzvprintf@@ZLIB_1.2.7.1+0x15c>
   11f54:	cbnz	x20, 11fc8 <gzvprintf@@ZLIB_1.2.7.1+0x170>
   11f58:	ldr	x20, [x19, #48]
   11f5c:	mov	w0, #0x0                   	// #0
   11f60:	str	x20, [x19, #120]
   11f64:	b	11eb8 <gzvprintf@@ZLIB_1.2.7.1+0x60>
   11f68:	bl	11430 <gzclose_r@@ZLIB_1.2.3.5+0xa8>
   11f6c:	cmn	w0, #0x1
   11f70:	b.ne	11ea0 <gzvprintf@@ZLIB_1.2.7.1+0x48>  // b.any
   11f74:	ldr	w21, [x19, #108]
   11f78:	ldp	x19, x20, [sp, #16]
   11f7c:	mov	w0, w21
   11f80:	ldp	x21, x22, [sp, #32]
   11f84:	ldp	x23, x24, [sp, #48]
   11f88:	ldr	x25, [sp, #64]
   11f8c:	ldp	x29, x30, [sp], #112
   11f90:	ret
   11f94:	mov	w21, #0x0                   	// #0
   11f98:	mov	w0, w21
   11f9c:	ldp	x19, x20, [sp, #16]
   11fa0:	ldp	x21, x22, [sp, #32]
   11fa4:	ldp	x23, x24, [sp, #48]
   11fa8:	ldr	x25, [sp, #64]
   11fac:	ldp	x29, x30, [sp], #112
   11fb0:	ret
   11fb4:	mov	x0, x19
   11fb8:	bl	11758 <gzclose_r@@ZLIB_1.2.3.5+0x3d0>
   11fbc:	cmn	w0, #0x1
   11fc0:	b.eq	11f74 <gzvprintf@@ZLIB_1.2.7.1+0x11c>  // b.none
   11fc4:	cbz	x20, 1207c <gzvprintf@@ZLIB_1.2.7.1+0x224>
   11fc8:	mov	w1, #0x1                   	// #1
   11fcc:	b	12000 <gzvprintf@@ZLIB_1.2.7.1+0x1a8>
   11fd0:	ldr	x2, [x19, #16]
   11fd4:	str	x0, [x24]
   11fd8:	str	w21, [x24, #8]
   11fdc:	mov	x0, x19
   11fe0:	add	x2, x2, x22
   11fe4:	str	x2, [x19, #16]
   11fe8:	bl	11758 <gzclose_r@@ZLIB_1.2.3.5+0x3d0>
   11fec:	cmn	w0, #0x1
   11ff0:	mov	w1, #0x0                   	// #0
   11ff4:	b.eq	11f74 <gzvprintf@@ZLIB_1.2.7.1+0x11c>  // b.none
   11ff8:	subs	x20, x20, x22
   11ffc:	b.eq	1207c <gzvprintf@@ZLIB_1.2.7.1+0x224>  // b.none
   12000:	ldr	w21, [x19, #40]
   12004:	mov	w22, w21
   12008:	cmp	x20, w21, uxtw
   1200c:	b.ge	12018 <gzvprintf@@ZLIB_1.2.7.1+0x1c0>  // b.tcont
   12010:	mov	w21, w20
   12014:	and	x22, x20, #0xffffffff
   12018:	ldr	x0, [x19, #48]
   1201c:	cbz	w1, 11fd0 <gzvprintf@@ZLIB_1.2.7.1+0x178>
   12020:	mov	w2, w21
   12024:	mov	w1, #0x0                   	// #0
   12028:	bl	24a0 <memset@plt>
   1202c:	ldr	x0, [x19, #48]
   12030:	b	11fd0 <gzvprintf@@ZLIB_1.2.7.1+0x178>
   12034:	str	w22, [x24, #8]
   12038:	mov	x0, x19
   1203c:	bl	11758 <gzclose_r@@ZLIB_1.2.3.5+0x3d0>
   12040:	cmn	w0, #0x1
   12044:	b.eq	11f74 <gzvprintf@@ZLIB_1.2.7.1+0x11c>  // b.none
   12048:	ldr	x0, [x19, #48]
   1204c:	sub	w2, w20, w22
   12050:	ldr	w1, [x19, #40]
   12054:	sub	w22, w20, w22
   12058:	add	x1, x0, x1
   1205c:	bl	23a0 <memcpy@plt>
   12060:	ldr	x0, [x19, #48]
   12064:	ldr	x25, [sp, #64]
   12068:	str	x0, [x19, #120]
   1206c:	ldp	x19, x20, [sp, #16]
   12070:	str	w22, [x24, #8]
   12074:	ldp	x23, x24, [sp, #48]
   12078:	b	11f38 <gzvprintf@@ZLIB_1.2.7.1+0xe0>
   1207c:	ldr	w0, [x24, #8]
   12080:	cbnz	w0, 11eb4 <gzvprintf@@ZLIB_1.2.7.1+0x5c>
   12084:	b	11f58 <gzvprintf@@ZLIB_1.2.7.1+0x100>
   12088:	mov	w21, #0xfffffffe            	// #-2
   1208c:	ldp	x19, x20, [sp, #16]
   12090:	ldp	x23, x24, [sp, #48]
   12094:	ldr	x25, [sp, #64]
   12098:	b	11f38 <gzvprintf@@ZLIB_1.2.7.1+0xe0>
   1209c:	mov	w21, #0xfffffffe            	// #-2
   120a0:	b	11f38 <gzvprintf@@ZLIB_1.2.7.1+0xe0>
   120a4:	nop

00000000000120a8 <gzprintf@@Base>:
   120a8:	stp	x29, x30, [sp, #-256]!
   120ac:	mov	w9, #0xffffffd0            	// #-48
   120b0:	mov	w8, #0xffffff80            	// #-128
   120b4:	mov	x29, sp
   120b8:	add	x10, sp, #0xd0
   120bc:	add	x11, sp, #0x100
   120c0:	stp	x11, x11, [sp, #48]
   120c4:	str	x10, [sp, #64]
   120c8:	stp	w9, w8, [sp, #72]
   120cc:	ldp	x10, x11, [sp, #48]
   120d0:	stp	x10, x11, [sp, #16]
   120d4:	ldp	x8, x9, [sp, #64]
   120d8:	stp	x8, x9, [sp, #32]
   120dc:	str	q0, [sp, #80]
   120e0:	str	q1, [sp, #96]
   120e4:	str	q2, [sp, #112]
   120e8:	str	q3, [sp, #128]
   120ec:	str	q4, [sp, #144]
   120f0:	str	q5, [sp, #160]
   120f4:	str	q6, [sp, #176]
   120f8:	str	q7, [sp, #192]
   120fc:	stp	x2, x3, [sp, #208]
   12100:	add	x2, sp, #0x10
   12104:	stp	x4, x5, [sp, #224]
   12108:	stp	x6, x7, [sp, #240]
   1210c:	bl	23c0 <gzvprintf@plt>
   12110:	ldp	x29, x30, [sp], #256
   12114:	ret

0000000000012118 <gzflush@@Base>:
   12118:	cbz	x0, 12228 <gzflush@@Base+0x110>
   1211c:	stp	x29, x30, [sp, #-64]!
   12120:	mov	x29, sp
   12124:	ldr	w2, [x0, #24]
   12128:	stp	x19, x20, [sp, #16]
   1212c:	mov	x19, x0
   12130:	stp	x23, x24, [sp, #48]
   12134:	mov	w23, w1
   12138:	mov	w1, #0x79b1                	// #31153
   1213c:	cmp	w2, w1
   12140:	b.ne	12220 <gzflush@@Base+0x108>  // b.any
   12144:	ldr	w1, [x0, #108]
   12148:	cbnz	w1, 12220 <gzflush@@Base+0x108>
   1214c:	cmp	w23, #0x4
   12150:	b.hi	12220 <gzflush@@Base+0x108>  // b.pmore
   12154:	ldr	w1, [x0, #104]
   12158:	cbz	w1, 121e8 <gzflush@@Base+0xd0>
   1215c:	ldr	w1, [x0, #128]
   12160:	add	x24, x0, #0x78
   12164:	str	wzr, [x0, #104]
   12168:	ldr	x20, [x0, #96]
   1216c:	cbnz	w1, 12210 <gzflush@@Base+0xf8>
   12170:	mov	w1, #0x1                   	// #1
   12174:	cbz	x20, 121e8 <gzflush@@Base+0xd0>
   12178:	stp	x21, x22, [sp, #32]
   1217c:	b	121b0 <gzflush@@Base+0x98>
   12180:	ldr	x1, [x19, #16]
   12184:	str	x0, [x24]
   12188:	str	w21, [x24, #8]
   1218c:	mov	x0, x19
   12190:	add	x1, x1, x22
   12194:	str	x1, [x19, #16]
   12198:	bl	11758 <gzclose_r@@ZLIB_1.2.3.5+0x3d0>
   1219c:	cmn	w0, #0x1
   121a0:	mov	w1, #0x0                   	// #0
   121a4:	b.eq	12208 <gzflush@@Base+0xf0>  // b.none
   121a8:	subs	x20, x20, x22
   121ac:	b.eq	121e4 <gzflush@@Base+0xcc>  // b.none
   121b0:	ldr	w21, [x19, #40]
   121b4:	mov	w22, w21
   121b8:	cmp	x20, w21, uxtw
   121bc:	b.ge	121c8 <gzflush@@Base+0xb0>  // b.tcont
   121c0:	mov	w21, w20
   121c4:	and	x22, x20, #0xffffffff
   121c8:	ldr	x0, [x19, #48]
   121cc:	cbz	w1, 12180 <gzflush@@Base+0x68>
   121d0:	mov	w2, w21
   121d4:	mov	w1, #0x0                   	// #0
   121d8:	bl	24a0 <memset@plt>
   121dc:	ldr	x0, [x19, #48]
   121e0:	b	12180 <gzflush@@Base+0x68>
   121e4:	ldp	x21, x22, [sp, #32]
   121e8:	mov	w1, w23
   121ec:	mov	x0, x19
   121f0:	bl	11550 <gzclose_r@@ZLIB_1.2.3.5+0x1c8>
   121f4:	ldr	w0, [x19, #108]
   121f8:	ldp	x19, x20, [sp, #16]
   121fc:	ldp	x23, x24, [sp, #48]
   12200:	ldp	x29, x30, [sp], #64
   12204:	ret
   12208:	ldp	x21, x22, [sp, #32]
   1220c:	b	121f4 <gzflush@@Base+0xdc>
   12210:	bl	11758 <gzclose_r@@ZLIB_1.2.3.5+0x3d0>
   12214:	cmn	w0, #0x1
   12218:	b.ne	12170 <gzflush@@Base+0x58>  // b.any
   1221c:	b	121f4 <gzflush@@Base+0xdc>
   12220:	mov	w0, #0xfffffffe            	// #-2
   12224:	b	121f8 <gzflush@@Base+0xe0>
   12228:	mov	w0, #0xfffffffe            	// #-2
   1222c:	ret

0000000000012230 <gzsetparams@@Base>:
   12230:	stp	x29, x30, [sp, #-80]!
   12234:	mov	x29, sp
   12238:	stp	x25, x26, [sp, #64]
   1223c:	cbz	x0, 123bc <gzsetparams@@Base+0x18c>
   12240:	stp	x19, x20, [sp, #16]
   12244:	mov	x19, x0
   12248:	mov	w0, #0x79b1                	// #31153
   1224c:	stp	x21, x22, [sp, #32]
   12250:	mov	w22, w1
   12254:	ldr	w1, [x19, #24]
   12258:	cmp	w1, w0
   1225c:	b.ne	123ac <gzsetparams@@Base+0x17c>  // b.any
   12260:	ldr	w26, [x19, #108]
   12264:	cbnz	w26, 123ac <gzsetparams@@Base+0x17c>
   12268:	ldr	w0, [x19, #88]
   1226c:	stp	x23, x24, [sp, #48]
   12270:	mov	w24, w2
   12274:	cmp	w0, w22
   12278:	b.eq	122dc <gzsetparams@@Base+0xac>  // b.none
   1227c:	ldr	w0, [x19, #104]
   12280:	cbnz	w0, 122f8 <gzsetparams@@Base+0xc8>
   12284:	ldr	w0, [x19, #40]
   12288:	cbz	w0, 122bc <gzsetparams@@Base+0x8c>
   1228c:	ldr	w0, [x19, #128]
   12290:	add	x25, x19, #0x78
   12294:	cbz	w0, 122ac <gzsetparams@@Base+0x7c>
   12298:	mov	x0, x19
   1229c:	mov	w1, #0x5                   	// #5
   122a0:	bl	11550 <gzclose_r@@ZLIB_1.2.3.5+0x1c8>
   122a4:	cmn	w0, #0x1
   122a8:	b.eq	1238c <gzsetparams@@Base+0x15c>  // b.none
   122ac:	mov	x0, x25
   122b0:	mov	w2, w24
   122b4:	mov	w1, w22
   122b8:	bl	24e0 <deflateParams@plt>
   122bc:	stp	w22, w24, [x19, #88]
   122c0:	ldp	x19, x20, [sp, #16]
   122c4:	ldp	x21, x22, [sp, #32]
   122c8:	ldp	x23, x24, [sp, #48]
   122cc:	mov	w0, w26
   122d0:	ldp	x25, x26, [sp, #64]
   122d4:	ldp	x29, x30, [sp], #80
   122d8:	ret
   122dc:	ldr	w0, [x19, #92]
   122e0:	cmp	w0, w2
   122e4:	b.ne	1227c <gzsetparams@@Base+0x4c>  // b.any
   122e8:	ldp	x19, x20, [sp, #16]
   122ec:	ldp	x21, x22, [sp, #32]
   122f0:	ldp	x23, x24, [sp, #48]
   122f4:	b	122cc <gzsetparams@@Base+0x9c>
   122f8:	ldr	w0, [x19, #128]
   122fc:	add	x25, x19, #0x78
   12300:	str	wzr, [x19, #104]
   12304:	ldr	x20, [x19, #96]
   12308:	cbnz	w0, 1237c <gzsetparams@@Base+0x14c>
   1230c:	mov	w1, #0x1                   	// #1
   12310:	cbnz	x20, 12348 <gzsetparams@@Base+0x118>
   12314:	b	12284 <gzsetparams@@Base+0x54>
   12318:	ldr	x1, [x19, #16]
   1231c:	str	x0, [x25]
   12320:	str	w21, [x25, #8]
   12324:	mov	x0, x19
   12328:	add	x1, x1, x23
   1232c:	str	x1, [x19, #16]
   12330:	bl	11758 <gzclose_r@@ZLIB_1.2.3.5+0x3d0>
   12334:	cmn	w0, #0x1
   12338:	mov	w1, #0x0                   	// #0
   1233c:	b.eq	1238c <gzsetparams@@Base+0x15c>  // b.none
   12340:	subs	x20, x20, x23
   12344:	b.eq	12284 <gzsetparams@@Base+0x54>  // b.none
   12348:	ldr	w21, [x19, #40]
   1234c:	mov	w23, w21
   12350:	cmp	x20, w21, uxtw
   12354:	b.ge	12360 <gzsetparams@@Base+0x130>  // b.tcont
   12358:	mov	w21, w20
   1235c:	and	x23, x20, #0xffffffff
   12360:	ldr	x0, [x19, #48]
   12364:	cbz	w1, 12318 <gzsetparams@@Base+0xe8>
   12368:	mov	w2, w21
   1236c:	mov	w1, #0x0                   	// #0
   12370:	bl	24a0 <memset@plt>
   12374:	ldr	x0, [x19, #48]
   12378:	b	12318 <gzsetparams@@Base+0xe8>
   1237c:	mov	x0, x19
   12380:	bl	11758 <gzclose_r@@ZLIB_1.2.3.5+0x3d0>
   12384:	cmn	w0, #0x1
   12388:	b.ne	1230c <gzsetparams@@Base+0xdc>  // b.any
   1238c:	ldr	w26, [x19, #108]
   12390:	ldp	x19, x20, [sp, #16]
   12394:	mov	w0, w26
   12398:	ldp	x21, x22, [sp, #32]
   1239c:	ldp	x23, x24, [sp, #48]
   123a0:	ldp	x25, x26, [sp, #64]
   123a4:	ldp	x29, x30, [sp], #80
   123a8:	ret
   123ac:	mov	w26, #0xfffffffe            	// #-2
   123b0:	ldp	x19, x20, [sp, #16]
   123b4:	ldp	x21, x22, [sp, #32]
   123b8:	b	122cc <gzsetparams@@Base+0x9c>
   123bc:	mov	w26, #0xfffffffe            	// #-2
   123c0:	b	122cc <gzsetparams@@Base+0x9c>
   123c4:	nop

00000000000123c8 <gzclose_w@@ZLIB_1.2.3.5>:
   123c8:	stp	x29, x30, [sp, #-64]!
   123cc:	mov	x29, sp
   123d0:	stp	x19, x20, [sp, #16]
   123d4:	cbz	x0, 12534 <gzclose_w@@ZLIB_1.2.3.5+0x16c>
   123d8:	ldr	w2, [x0, #24]
   123dc:	mov	w1, #0x79b1                	// #31153
   123e0:	mov	x19, x0
   123e4:	cmp	w2, w1
   123e8:	b.ne	12534 <gzclose_w@@ZLIB_1.2.3.5+0x16c>  // b.any
   123ec:	ldr	w1, [x0, #104]
   123f0:	cbnz	w1, 12468 <gzclose_w@@ZLIB_1.2.3.5+0xa0>
   123f4:	mov	w20, #0x0                   	// #0
   123f8:	mov	x0, x19
   123fc:	mov	w1, #0x4                   	// #4
   12400:	bl	11550 <gzclose_r@@ZLIB_1.2.3.5+0x1c8>
   12404:	cmn	w0, #0x1
   12408:	b.ne	12410 <gzclose_w@@ZLIB_1.2.3.5+0x48>  // b.any
   1240c:	ldr	w20, [x19, #108]
   12410:	ldr	w0, [x19, #40]
   12414:	cbz	w0, 12428 <gzclose_w@@ZLIB_1.2.3.5+0x60>
   12418:	ldr	w0, [x19, #64]
   1241c:	cbz	w0, 12500 <gzclose_w@@ZLIB_1.2.3.5+0x138>
   12420:	ldr	x0, [x19, #48]
   12424:	bl	2570 <free@plt>
   12428:	mov	x2, #0x0                   	// #0
   1242c:	mov	w1, #0x0                   	// #0
   12430:	mov	x0, x19
   12434:	bl	10258 <gzclearerr@@ZLIB_1.2.0.2+0x80>
   12438:	ldr	x0, [x19, #32]
   1243c:	bl	2570 <free@plt>
   12440:	ldr	w0, [x19, #28]
   12444:	bl	2510 <close@plt>
   12448:	cmn	w0, #0x1
   1244c:	csinv	w20, w20, wzr, ne  // ne = any
   12450:	mov	x0, x19
   12454:	bl	2570 <free@plt>
   12458:	mov	w0, w20
   1245c:	ldp	x19, x20, [sp, #16]
   12460:	ldp	x29, x30, [sp], #64
   12464:	ret
   12468:	ldr	x20, [x0, #96]
   1246c:	str	x23, [sp, #48]
   12470:	add	x23, x0, #0x78
   12474:	ldr	w1, [x23, #8]
   12478:	str	wzr, [x0, #104]
   1247c:	cbnz	w1, 12524 <gzclose_w@@ZLIB_1.2.3.5+0x15c>
   12480:	mov	w1, #0x1                   	// #1
   12484:	cbz	x20, 124f8 <gzclose_w@@ZLIB_1.2.3.5+0x130>
   12488:	stp	x21, x22, [sp, #32]
   1248c:	b	124c0 <gzclose_w@@ZLIB_1.2.3.5+0xf8>
   12490:	ldr	x1, [x19, #16]
   12494:	str	x0, [x23]
   12498:	str	w21, [x23, #8]
   1249c:	mov	x0, x19
   124a0:	add	x1, x1, x22
   124a4:	str	x1, [x19, #16]
   124a8:	bl	11758 <gzclose_r@@ZLIB_1.2.3.5+0x3d0>
   124ac:	cmn	w0, #0x1
   124b0:	b.eq	12514 <gzclose_w@@ZLIB_1.2.3.5+0x14c>  // b.none
   124b4:	subs	x20, x20, x22
   124b8:	mov	w1, #0x0                   	// #0
   124bc:	b.eq	124f4 <gzclose_w@@ZLIB_1.2.3.5+0x12c>  // b.none
   124c0:	ldr	w21, [x19, #40]
   124c4:	mov	w22, w21
   124c8:	cmp	x20, w21, uxtw
   124cc:	b.ge	124d8 <gzclose_w@@ZLIB_1.2.3.5+0x110>  // b.tcont
   124d0:	mov	w21, w20
   124d4:	and	x22, x20, #0xffffffff
   124d8:	ldr	x0, [x19, #48]
   124dc:	cbz	w1, 12490 <gzclose_w@@ZLIB_1.2.3.5+0xc8>
   124e0:	mov	w2, w21
   124e4:	mov	w1, #0x0                   	// #0
   124e8:	bl	24a0 <memset@plt>
   124ec:	ldr	x0, [x19, #48]
   124f0:	b	12490 <gzclose_w@@ZLIB_1.2.3.5+0xc8>
   124f4:	ldp	x21, x22, [sp, #32]
   124f8:	ldr	x23, [sp, #48]
   124fc:	b	123f4 <gzclose_w@@ZLIB_1.2.3.5+0x2c>
   12500:	add	x0, x19, #0x78
   12504:	bl	2590 <deflateEnd@plt>
   12508:	ldr	x0, [x19, #56]
   1250c:	bl	2570 <free@plt>
   12510:	b	12420 <gzclose_w@@ZLIB_1.2.3.5+0x58>
   12514:	ldp	x21, x22, [sp, #32]
   12518:	ldr	w20, [x19, #108]
   1251c:	ldr	x23, [sp, #48]
   12520:	b	123f8 <gzclose_w@@ZLIB_1.2.3.5+0x30>
   12524:	bl	11758 <gzclose_r@@ZLIB_1.2.3.5+0x3d0>
   12528:	cmn	w0, #0x1
   1252c:	b.ne	12480 <gzclose_w@@ZLIB_1.2.3.5+0xb8>  // b.any
   12530:	b	12518 <gzclose_w@@ZLIB_1.2.3.5+0x150>
   12534:	mov	w20, #0xfffffffe            	// #-2
   12538:	b	12458 <gzclose_w@@ZLIB_1.2.3.5+0x90>

Disassembly of section .fini:

000000000001253c <.fini>:
   1253c:	stp	x29, x30, [sp, #-16]!
   12540:	mov	x29, sp
   12544:	ldp	x29, x30, [sp], #16
   12548:	ret
