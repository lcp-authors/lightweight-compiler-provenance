
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libmpc.so.3.1.0_clang_-Os:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000004958 <.init>:
    4958:	stp	x29, x30, [sp, #-16]!
    495c:	mov	x29, sp
    4960:	bl	55d0 <mpfr_get_emin_min@plt+0x10>
    4964:	ldp	x29, x30, [sp], #16
    4968:	ret

Disassembly of section .plt:

0000000000004970 <mpfr_set_underflow@plt-0x20>:
    4970:	stp	x16, x30, [sp, #-16]!
    4974:	adrp	x16, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    4978:	ldr	x17, [x16, #4088]
    497c:	add	x16, x16, #0xff8
    4980:	br	x17
    4984:	nop
    4988:	nop
    498c:	nop

0000000000004990 <mpfr_set_underflow@plt>:
    4990:	adrp	x16, 24000 <mpfr_set_underflow>
    4994:	ldr	x17, [x16]
    4998:	add	x16, x16, #0x0
    499c:	br	x17

00000000000049a0 <__gmpz_get_si@plt>:
    49a0:	adrp	x16, 24000 <mpfr_set_underflow>
    49a4:	ldr	x17, [x16, #8]
    49a8:	add	x16, x16, #0x8
    49ac:	br	x17

00000000000049b0 <mpfr_set_ld@plt>:
    49b0:	adrp	x16, 24000 <mpfr_set_underflow>
    49b4:	ldr	x17, [x16, #16]
    49b8:	add	x16, x16, #0x10
    49bc:	br	x17

00000000000049c0 <mpfr_mul_ui@plt>:
    49c0:	adrp	x16, 24000 <mpfr_set_underflow>
    49c4:	ldr	x17, [x16, #24]
    49c8:	add	x16, x16, #0x18
    49cc:	br	x17

00000000000049d0 <mpfr_mul_q@plt>:
    49d0:	adrp	x16, 24000 <mpfr_set_underflow>
    49d4:	ldr	x17, [x16, #32]
    49d8:	add	x16, x16, #0x20
    49dc:	br	x17

00000000000049e0 <mpfr_set_si_2exp@plt>:
    49e0:	adrp	x16, 24000 <mpfr_set_underflow>
    49e4:	ldr	x17, [x16, #40]
    49e8:	add	x16, x16, #0x28
    49ec:	br	x17

00000000000049f0 <__gmpz_scan1@plt>:
    49f0:	adrp	x16, 24000 <mpfr_set_underflow>
    49f4:	ldr	x17, [x16, #48]
    49f8:	add	x16, x16, #0x30
    49fc:	br	x17

0000000000004a00 <strlen@plt>:
    4a00:	adrp	x16, 24000 <mpfr_set_underflow>
    4a04:	ldr	x17, [x16, #56]
    4a08:	add	x16, x16, #0x38
    4a0c:	br	x17

0000000000004a10 <mpc_clear@plt>:
    4a10:	adrp	x16, 24000 <mpfr_set_underflow>
    4a14:	ldr	x17, [x16, #64]
    4a18:	add	x16, x16, #0x40
    4a1c:	br	x17

0000000000004a20 <mpfr_cosh@plt>:
    4a20:	adrp	x16, 24000 <mpfr_set_underflow>
    4a24:	ldr	x17, [x16, #72]
    4a28:	add	x16, x16, #0x48
    4a2c:	br	x17

0000000000004a30 <mpfr_tanh@plt>:
    4a30:	adrp	x16, 24000 <mpfr_set_underflow>
    4a34:	ldr	x17, [x16, #80]
    4a38:	add	x16, x16, #0x50
    4a3c:	br	x17

0000000000004a40 <mpfr_set_nan@plt>:
    4a40:	adrp	x16, 24000 <mpfr_set_underflow>
    4a44:	ldr	x17, [x16, #88]
    4a48:	add	x16, x16, #0x58
    4a4c:	br	x17

0000000000004a50 <mpfr_clear_overflow@plt>:
    4a50:	adrp	x16, 24000 <mpfr_set_underflow>
    4a54:	ldr	x17, [x16, #96]
    4a58:	add	x16, x16, #0x60
    4a5c:	br	x17

0000000000004a60 <mpfr_sub@plt>:
    4a60:	adrp	x16, 24000 <mpfr_set_underflow>
    4a64:	ldr	x17, [x16, #104]
    4a68:	add	x16, x16, #0x68
    4a6c:	br	x17

0000000000004a70 <mpfr_mul_2si@plt>:
    4a70:	adrp	x16, 24000 <mpfr_set_underflow>
    4a74:	ldr	x17, [x16, #112]
    4a78:	add	x16, x16, #0x70
    4a7c:	br	x17

0000000000004a80 <mpfr_const_pi@plt>:
    4a80:	adrp	x16, 24000 <mpfr_set_underflow>
    4a84:	ldr	x17, [x16, #120]
    4a88:	add	x16, x16, #0x78
    4a8c:	br	x17

0000000000004a90 <mpfr_fmms@plt>:
    4a90:	adrp	x16, 24000 <mpfr_set_underflow>
    4a94:	ldr	x17, [x16, #128]
    4a98:	add	x16, x16, #0x80
    4a9c:	br	x17

0000000000004aa0 <mpfr_init@plt>:
    4aa0:	adrp	x16, 24000 <mpfr_set_underflow>
    4aa4:	ldr	x17, [x16, #136]
    4aa8:	add	x16, x16, #0x88
    4aac:	br	x17

0000000000004ab0 <mpfr_tan@plt>:
    4ab0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ab4:	ldr	x17, [x16, #144]
    4ab8:	add	x16, x16, #0x90
    4abc:	br	x17

0000000000004ac0 <mpfr_strtofr@plt>:
    4ac0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ac4:	ldr	x17, [x16, #152]
    4ac8:	add	x16, x16, #0x98
    4acc:	br	x17

0000000000004ad0 <__gmpz_sub_ui@plt>:
    4ad0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ad4:	ldr	x17, [x16, #160]
    4ad8:	add	x16, x16, #0xa0
    4adc:	br	x17

0000000000004ae0 <__gmp_get_memory_functions@plt>:
    4ae0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ae4:	ldr	x17, [x16, #168]
    4ae8:	add	x16, x16, #0xa8
    4aec:	br	x17

0000000000004af0 <__gmpz_sqrt@plt>:
    4af0:	adrp	x16, 24000 <mpfr_set_underflow>
    4af4:	ldr	x17, [x16, #176]
    4af8:	add	x16, x16, #0xb0
    4afc:	br	x17

0000000000004b00 <mpfr_set_erangeflag@plt>:
    4b00:	adrp	x16, 24000 <mpfr_set_underflow>
    4b04:	ldr	x17, [x16, #184]
    4b08:	add	x16, x16, #0xb8
    4b0c:	br	x17

0000000000004b10 <__gmpz_set_ui@plt>:
    4b10:	adrp	x16, 24000 <mpfr_set_underflow>
    4b14:	ldr	x17, [x16, #192]
    4b18:	add	x16, x16, #0xc0
    4b1c:	br	x17

0000000000004b20 <__cxa_finalize@plt>:
    4b20:	adrp	x16, 24000 <mpfr_set_underflow>
    4b24:	ldr	x17, [x16, #200]
    4b28:	add	x16, x16, #0xc8
    4b2c:	br	x17

0000000000004b30 <sprintf@plt>:
    4b30:	adrp	x16, 24000 <mpfr_set_underflow>
    4b34:	ldr	x17, [x16, #208]
    4b38:	add	x16, x16, #0xd0
    4b3c:	br	x17

0000000000004b40 <mpc_sqrt@plt>:
    4b40:	adrp	x16, 24000 <mpfr_set_underflow>
    4b44:	ldr	x17, [x16, #216]
    4b48:	add	x16, x16, #0xd8
    4b4c:	br	x17

0000000000004b50 <mpfr_get_d@plt>:
    4b50:	adrp	x16, 24000 <mpfr_set_underflow>
    4b54:	ldr	x17, [x16, #224]
    4b58:	add	x16, x16, #0xe0
    4b5c:	br	x17

0000000000004b60 <mpfr_set_f@plt>:
    4b60:	adrp	x16, 24000 <mpfr_set_underflow>
    4b64:	ldr	x17, [x16, #232]
    4b68:	add	x16, x16, #0xe8
    4b6c:	br	x17

0000000000004b70 <mpfr_mul@plt>:
    4b70:	adrp	x16, 24000 <mpfr_set_underflow>
    4b74:	ldr	x17, [x16, #240]
    4b78:	add	x16, x16, #0xf0
    4b7c:	br	x17

0000000000004b80 <mpfr_neg@plt>:
    4b80:	adrp	x16, 24000 <mpfr_set_underflow>
    4b84:	ldr	x17, [x16, #248]
    4b88:	add	x16, x16, #0xf8
    4b8c:	br	x17

0000000000004b90 <mpfr_pow@plt>:
    4b90:	adrp	x16, 24000 <mpfr_set_underflow>
    4b94:	ldr	x17, [x16, #256]
    4b98:	add	x16, x16, #0x100
    4b9c:	br	x17

0000000000004ba0 <fputc@plt>:
    4ba0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ba4:	ldr	x17, [x16, #264]
    4ba8:	add	x16, x16, #0x108
    4bac:	br	x17

0000000000004bb0 <mpfr_nextbelow@plt>:
    4bb0:	adrp	x16, 24000 <mpfr_set_underflow>
    4bb4:	ldr	x17, [x16, #272]
    4bb8:	add	x16, x16, #0x110
    4bbc:	br	x17

0000000000004bc0 <__gmpz_sub@plt>:
    4bc0:	adrp	x16, 24000 <mpfr_set_underflow>
    4bc4:	ldr	x17, [x16, #280]
    4bc8:	add	x16, x16, #0x118
    4bcc:	br	x17

0000000000004bd0 <mpfr_get_z@plt>:
    4bd0:	adrp	x16, 24000 <mpfr_set_underflow>
    4bd4:	ldr	x17, [x16, #288]
    4bd8:	add	x16, x16, #0x120
    4bdc:	br	x17

0000000000004be0 <mpfr_sinh_cosh@plt>:
    4be0:	adrp	x16, 24000 <mpfr_set_underflow>
    4be4:	ldr	x17, [x16, #296]
    4be8:	add	x16, x16, #0x128
    4bec:	br	x17

0000000000004bf0 <mpc_alloc_str@plt>:
    4bf0:	adrp	x16, 24000 <mpfr_set_underflow>
    4bf4:	ldr	x17, [x16, #304]
    4bf8:	add	x16, x16, #0x130
    4bfc:	br	x17

0000000000004c00 <mpc_set_prec@plt>:
    4c00:	adrp	x16, 24000 <mpfr_set_underflow>
    4c04:	ldr	x17, [x16, #312]
    4c08:	add	x16, x16, #0x138
    4c0c:	br	x17

0000000000004c10 <mpfr_set_exp@plt>:
    4c10:	adrp	x16, 24000 <mpfr_set_underflow>
    4c14:	ldr	x17, [x16, #320]
    4c18:	add	x16, x16, #0x140
    4c1c:	br	x17

0000000000004c20 <mpc_tan@plt>:
    4c20:	adrp	x16, 24000 <mpfr_set_underflow>
    4c24:	ldr	x17, [x16, #328]
    4c28:	add	x16, x16, #0x148
    4c2c:	br	x17

0000000000004c30 <mpfr_set_d@plt>:
    4c30:	adrp	x16, 24000 <mpfr_set_underflow>
    4c34:	ldr	x17, [x16, #336]
    4c38:	add	x16, x16, #0x150
    4c3c:	br	x17

0000000000004c40 <__gmpz_divisible_2exp_p@plt>:
    4c40:	adrp	x16, 24000 <mpfr_set_underflow>
    4c44:	ldr	x17, [x16, #344]
    4c48:	add	x16, x16, #0x158
    4c4c:	br	x17

0000000000004c50 <__ctype_tolower_loc@plt>:
    4c50:	adrp	x16, 24000 <mpfr_set_underflow>
    4c54:	ldr	x17, [x16, #352]
    4c58:	add	x16, x16, #0x160
    4c5c:	br	x17

0000000000004c60 <__gmpz_fits_slong_p@plt>:
    4c60:	adrp	x16, 24000 <mpfr_set_underflow>
    4c64:	ldr	x17, [x16, #360]
    4c68:	add	x16, x16, #0x168
    4c6c:	br	x17

0000000000004c70 <localeconv@plt>:
    4c70:	adrp	x16, 24000 <mpfr_set_underflow>
    4c74:	ldr	x17, [x16, #368]
    4c78:	add	x16, x16, #0x170
    4c7c:	br	x17

0000000000004c80 <mpfr_set_prec@plt>:
    4c80:	adrp	x16, 24000 <mpfr_set_underflow>
    4c84:	ldr	x17, [x16, #376]
    4c88:	add	x16, x16, #0x178
    4c8c:	br	x17

0000000000004c90 <mpfr_fmma@plt>:
    4c90:	adrp	x16, 24000 <mpfr_set_underflow>
    4c94:	ldr	x17, [x16, #384]
    4c98:	add	x16, x16, #0x180
    4c9c:	br	x17

0000000000004ca0 <mpfr_atan2@plt>:
    4ca0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ca4:	ldr	x17, [x16, #392]
    4ca8:	add	x16, x16, #0x188
    4cac:	br	x17

0000000000004cb0 <mpfr_cmp_ui_2exp@plt>:
    4cb0:	adrp	x16, 24000 <mpfr_set_underflow>
    4cb4:	ldr	x17, [x16, #400]
    4cb8:	add	x16, x16, #0x190
    4cbc:	br	x17

0000000000004cc0 <__gmpz_divexact@plt>:
    4cc0:	adrp	x16, 24000 <mpfr_set_underflow>
    4cc4:	ldr	x17, [x16, #408]
    4cc8:	add	x16, x16, #0x198
    4ccc:	br	x17

0000000000004cd0 <mpc_add@plt>:
    4cd0:	adrp	x16, 24000 <mpfr_set_underflow>
    4cd4:	ldr	x17, [x16, #416]
    4cd8:	add	x16, x16, #0x1a0
    4cdc:	br	x17

0000000000004ce0 <mpc_set_ui@plt>:
    4ce0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ce4:	ldr	x17, [x16, #424]
    4ce8:	add	x16, x16, #0x1a8
    4cec:	br	x17

0000000000004cf0 <mpc_init2@plt>:
    4cf0:	adrp	x16, 24000 <mpfr_set_underflow>
    4cf4:	ldr	x17, [x16, #432]
    4cf8:	add	x16, x16, #0x1b0
    4cfc:	br	x17

0000000000004d00 <__gmpz_set@plt>:
    4d00:	adrp	x16, 24000 <mpfr_set_underflow>
    4d04:	ldr	x17, [x16, #440]
    4d08:	add	x16, x16, #0x1b8
    4d0c:	br	x17

0000000000004d10 <mpfr_set_zero@plt>:
    4d10:	adrp	x16, 24000 <mpfr_set_underflow>
    4d14:	ldr	x17, [x16, #448]
    4d18:	add	x16, x16, #0x1c0
    4d1c:	br	x17

0000000000004d20 <mpc_ceil_log2@plt>:
    4d20:	adrp	x16, 24000 <mpfr_set_underflow>
    4d24:	ldr	x17, [x16, #456]
    4d28:	add	x16, x16, #0x1c8
    4d2c:	br	x17

0000000000004d30 <__gmpz_tstbit@plt>:
    4d30:	adrp	x16, 24000 <mpfr_set_underflow>
    4d34:	ldr	x17, [x16, #464]
    4d38:	add	x16, x16, #0x1d0
    4d3c:	br	x17

0000000000004d40 <__gmpz_mul@plt>:
    4d40:	adrp	x16, 24000 <mpfr_set_underflow>
    4d44:	ldr	x17, [x16, #472]
    4d48:	add	x16, x16, #0x1d8
    4d4c:	br	x17

0000000000004d50 <mpc_set_ld_ld@plt>:
    4d50:	adrp	x16, 24000 <mpfr_set_underflow>
    4d54:	ldr	x17, [x16, #480]
    4d58:	add	x16, x16, #0x1e0
    4d5c:	br	x17

0000000000004d60 <mpfr_clear@plt>:
    4d60:	adrp	x16, 24000 <mpfr_set_underflow>
    4d64:	ldr	x17, [x16, #488]
    4d68:	add	x16, x16, #0x1e8
    4d6c:	br	x17

0000000000004d70 <__gmpfr_set_sj@plt>:
    4d70:	adrp	x16, 24000 <mpfr_set_underflow>
    4d74:	ldr	x17, [x16, #496]
    4d78:	add	x16, x16, #0x1f0
    4d7c:	br	x17

0000000000004d80 <mpfr_log@plt>:
    4d80:	adrp	x16, 24000 <mpfr_set_underflow>
    4d84:	ldr	x17, [x16, #504]
    4d88:	add	x16, x16, #0x1f8
    4d8c:	br	x17

0000000000004d90 <mpfr_atanh@plt>:
    4d90:	adrp	x16, 24000 <mpfr_set_underflow>
    4d94:	ldr	x17, [x16, #512]
    4d98:	add	x16, x16, #0x200
    4d9c:	br	x17

0000000000004da0 <__gmpz_swap@plt>:
    4da0:	adrp	x16, 24000 <mpfr_set_underflow>
    4da4:	ldr	x17, [x16, #520]
    4da8:	add	x16, x16, #0x208
    4dac:	br	x17

0000000000004db0 <mpc_log@plt>:
    4db0:	adrp	x16, 24000 <mpfr_set_underflow>
    4db4:	ldr	x17, [x16, #528]
    4db8:	add	x16, x16, #0x210
    4dbc:	br	x17

0000000000004dc0 <mpfr_asinh@plt>:
    4dc0:	adrp	x16, 24000 <mpfr_set_underflow>
    4dc4:	ldr	x17, [x16, #536]
    4dc8:	add	x16, x16, #0x218
    4dcc:	br	x17

0000000000004dd0 <mpc_fix_inf@plt>:
    4dd0:	adrp	x16, 24000 <mpfr_set_underflow>
    4dd4:	ldr	x17, [x16, #544]
    4dd8:	add	x16, x16, #0x220
    4ddc:	br	x17

0000000000004de0 <strcat@plt>:
    4de0:	adrp	x16, 24000 <mpfr_set_underflow>
    4de4:	ldr	x17, [x16, #552]
    4de8:	add	x16, x16, #0x228
    4dec:	br	x17

0000000000004df0 <mpc_pow_usi@plt>:
    4df0:	adrp	x16, 24000 <mpfr_set_underflow>
    4df4:	ldr	x17, [x16, #560]
    4df8:	add	x16, x16, #0x230
    4dfc:	br	x17

0000000000004e00 <mpfr_nextabove@plt>:
    4e00:	adrp	x16, 24000 <mpfr_set_underflow>
    4e04:	ldr	x17, [x16, #568]
    4e08:	add	x16, x16, #0x238
    4e0c:	br	x17

0000000000004e10 <__gmpz_fdiv_q_2exp@plt>:
    4e10:	adrp	x16, 24000 <mpfr_set_underflow>
    4e14:	ldr	x17, [x16, #576]
    4e18:	add	x16, x16, #0x240
    4e1c:	br	x17

0000000000004e20 <mpfr_clear_underflow@plt>:
    4e20:	adrp	x16, 24000 <mpfr_set_underflow>
    4e24:	ldr	x17, [x16, #584]
    4e28:	add	x16, x16, #0x248
    4e2c:	br	x17

0000000000004e30 <mpfr_integer_p@plt>:
    4e30:	adrp	x16, 24000 <mpfr_set_underflow>
    4e34:	ldr	x17, [x16, #592]
    4e38:	add	x16, x16, #0x250
    4e3c:	br	x17

0000000000004e40 <mpfr_asin@plt>:
    4e40:	adrp	x16, 24000 <mpfr_set_underflow>
    4e44:	ldr	x17, [x16, #600]
    4e48:	add	x16, x16, #0x258
    4e4c:	br	x17

0000000000004e50 <mpc_set_ld@plt>:
    4e50:	adrp	x16, 24000 <mpfr_set_underflow>
    4e54:	ldr	x17, [x16, #608]
    4e58:	add	x16, x16, #0x260
    4e5c:	br	x17

0000000000004e60 <mpfr_add@plt>:
    4e60:	adrp	x16, 24000 <mpfr_set_underflow>
    4e64:	ldr	x17, [x16, #616]
    4e68:	add	x16, x16, #0x268
    4e6c:	br	x17

0000000000004e70 <mpfr_clears@plt>:
    4e70:	adrp	x16, 24000 <mpfr_set_underflow>
    4e74:	ldr	x17, [x16, #624]
    4e78:	add	x16, x16, #0x270
    4e7c:	br	x17

0000000000004e80 <mpfr_set@plt>:
    4e80:	adrp	x16, 24000 <mpfr_set_underflow>
    4e84:	ldr	x17, [x16, #632]
    4e88:	add	x16, x16, #0x278
    4e8c:	br	x17

0000000000004e90 <__gmpz_mul_2exp@plt>:
    4e90:	adrp	x16, 24000 <mpfr_set_underflow>
    4e94:	ldr	x17, [x16, #640]
    4e98:	add	x16, x16, #0x280
    4e9c:	br	x17

0000000000004ea0 <mpc_norm@plt>:
    4ea0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ea4:	ldr	x17, [x16, #648]
    4ea8:	add	x16, x16, #0x288
    4eac:	br	x17

0000000000004eb0 <mpc_mul_naive@plt>:
    4eb0:	adrp	x16, 24000 <mpfr_set_underflow>
    4eb4:	ldr	x17, [x16, #656]
    4eb8:	add	x16, x16, #0x290
    4ebc:	br	x17

0000000000004ec0 <mpfr_set_z@plt>:
    4ec0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ec4:	ldr	x17, [x16, #664]
    4ec8:	add	x16, x16, #0x298
    4ecc:	br	x17

0000000000004ed0 <mpc_mul@plt>:
    4ed0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ed4:	ldr	x17, [x16, #672]
    4ed8:	add	x16, x16, #0x2a0
    4edc:	br	x17

0000000000004ee0 <mpfr_add_ui@plt>:
    4ee0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ee4:	ldr	x17, [x16, #680]
    4ee8:	add	x16, x16, #0x2a8
    4eec:	br	x17

0000000000004ef0 <mpc_set_nan@plt>:
    4ef0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ef4:	ldr	x17, [x16, #688]
    4ef8:	add	x16, x16, #0x2b0
    4efc:	br	x17

0000000000004f00 <mpc_strtoc@plt>:
    4f00:	adrp	x16, 24000 <mpfr_set_underflow>
    4f04:	ldr	x17, [x16, #696]
    4f08:	add	x16, x16, #0x2b8
    4f0c:	br	x17

0000000000004f10 <__gmpz_addmul@plt>:
    4f10:	adrp	x16, 24000 <mpfr_set_underflow>
    4f14:	ldr	x17, [x16, #704]
    4f18:	add	x16, x16, #0x2c0
    4f1c:	br	x17

0000000000004f20 <getc@plt>:
    4f20:	adrp	x16, 24000 <mpfr_set_underflow>
    4f24:	ldr	x17, [x16, #712]
    4f28:	add	x16, x16, #0x2c8
    4f2c:	br	x17

0000000000004f30 <mpc_sqr@plt>:
    4f30:	adrp	x16, 24000 <mpfr_set_underflow>
    4f34:	ldr	x17, [x16, #720]
    4f38:	add	x16, x16, #0x2d0
    4f3c:	br	x17

0000000000004f40 <mpfr_mul_2ui@plt>:
    4f40:	adrp	x16, 24000 <mpfr_set_underflow>
    4f44:	ldr	x17, [x16, #728]
    4f48:	add	x16, x16, #0x2d8
    4f4c:	br	x17

0000000000004f50 <mpc_sin@plt>:
    4f50:	adrp	x16, 24000 <mpfr_set_underflow>
    4f54:	ldr	x17, [x16, #736]
    4f58:	add	x16, x16, #0x2e0
    4f5c:	br	x17

0000000000004f60 <mpc_conj@plt>:
    4f60:	adrp	x16, 24000 <mpfr_set_underflow>
    4f64:	ldr	x17, [x16, #744]
    4f68:	add	x16, x16, #0x2e8
    4f6c:	br	x17

0000000000004f70 <mpfr_ui_div@plt>:
    4f70:	adrp	x16, 24000 <mpfr_set_underflow>
    4f74:	ldr	x17, [x16, #752]
    4f78:	add	x16, x16, #0x2f0
    4f7c:	br	x17

0000000000004f80 <mpfr_sinh@plt>:
    4f80:	adrp	x16, 24000 <mpfr_set_underflow>
    4f84:	ldr	x17, [x16, #760]
    4f88:	add	x16, x16, #0x2f8
    4f8c:	br	x17

0000000000004f90 <mpc_set_d_d@plt>:
    4f90:	adrp	x16, 24000 <mpfr_set_underflow>
    4f94:	ldr	x17, [x16, #768]
    4f98:	add	x16, x16, #0x300
    4f9c:	br	x17

0000000000004fa0 <__gmpz_add_ui@plt>:
    4fa0:	adrp	x16, 24000 <mpfr_set_underflow>
    4fa4:	ldr	x17, [x16, #776]
    4fa8:	add	x16, x16, #0x308
    4fac:	br	x17

0000000000004fb0 <__gmpq_clear@plt>:
    4fb0:	adrp	x16, 24000 <mpfr_set_underflow>
    4fb4:	ldr	x17, [x16, #784]
    4fb8:	add	x16, x16, #0x310
    4fbc:	br	x17

0000000000004fc0 <__gmon_start__@plt>:
    4fc0:	adrp	x16, 24000 <mpfr_set_underflow>
    4fc4:	ldr	x17, [x16, #792]
    4fc8:	add	x16, x16, #0x318
    4fcc:	br	x17

0000000000004fd0 <mpfr_acos@plt>:
    4fd0:	adrp	x16, 24000 <mpfr_set_underflow>
    4fd4:	ldr	x17, [x16, #800]
    4fd8:	add	x16, x16, #0x320
    4fdc:	br	x17

0000000000004fe0 <mpfr_cmp_si_2exp@plt>:
    4fe0:	adrp	x16, 24000 <mpfr_set_underflow>
    4fe4:	ldr	x17, [x16, #808]
    4fe8:	add	x16, x16, #0x328
    4fec:	br	x17

0000000000004ff0 <mpc_free_str@plt>:
    4ff0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ff4:	ldr	x17, [x16, #816]
    4ff8:	add	x16, x16, #0x330
    4ffc:	br	x17

0000000000005000 <abort@plt>:
    5000:	adrp	x16, 24000 <mpfr_set_underflow>
    5004:	ldr	x17, [x16, #824]
    5008:	add	x16, x16, #0x338
    500c:	br	x17

0000000000005010 <mpfr_sqr@plt>:
    5010:	adrp	x16, 24000 <mpfr_set_underflow>
    5014:	ldr	x17, [x16, #832]
    5018:	add	x16, x16, #0x340
    501c:	br	x17

0000000000005020 <mpc_set_si@plt>:
    5020:	adrp	x16, 24000 <mpfr_set_underflow>
    5024:	ldr	x17, [x16, #840]
    5028:	add	x16, x16, #0x348
    502c:	br	x17

0000000000005030 <mpfr_div_2si@plt>:
    5030:	adrp	x16, 24000 <mpfr_set_underflow>
    5034:	ldr	x17, [x16, #848]
    5038:	add	x16, x16, #0x350
    503c:	br	x17

0000000000005040 <mpc_set_ui_ui@plt>:
    5040:	adrp	x16, 24000 <mpfr_set_underflow>
    5044:	ldr	x17, [x16, #856]
    5048:	add	x16, x16, #0x358
    504c:	br	x17

0000000000005050 <mpfr_cos@plt>:
    5050:	adrp	x16, 24000 <mpfr_set_underflow>
    5054:	ldr	x17, [x16, #864]
    5058:	add	x16, x16, #0x360
    505c:	br	x17

0000000000005060 <mpfr_get_emin@plt>:
    5060:	adrp	x16, 24000 <mpfr_set_underflow>
    5064:	ldr	x17, [x16, #872]
    5068:	add	x16, x16, #0x368
    506c:	br	x17

0000000000005070 <mpc_acos@plt>:
    5070:	adrp	x16, 24000 <mpfr_set_underflow>
    5074:	ldr	x17, [x16, #880]
    5078:	add	x16, x16, #0x370
    507c:	br	x17

0000000000005080 <mpfr_sin@plt>:
    5080:	adrp	x16, 24000 <mpfr_set_underflow>
    5084:	ldr	x17, [x16, #888]
    5088:	add	x16, x16, #0x378
    508c:	br	x17

0000000000005090 <mpfr_swap@plt>:
    5090:	adrp	x16, 24000 <mpfr_set_underflow>
    5094:	ldr	x17, [x16, #896]
    5098:	add	x16, x16, #0x380
    509c:	br	x17

00000000000050a0 <mpc_set_z@plt>:
    50a0:	adrp	x16, 24000 <mpfr_set_underflow>
    50a4:	ldr	x17, [x16, #904]
    50a8:	add	x16, x16, #0x388
    50ac:	br	x17

00000000000050b0 <__gmpz_ui_pow_ui@plt>:
    50b0:	adrp	x16, 24000 <mpfr_set_underflow>
    50b4:	ldr	x17, [x16, #912]
    50b8:	add	x16, x16, #0x390
    50bc:	br	x17

00000000000050c0 <mpfr_get_str@plt>:
    50c0:	adrp	x16, 24000 <mpfr_set_underflow>
    50c4:	ldr	x17, [x16, #920]
    50c8:	add	x16, x16, #0x398
    50cc:	br	x17

00000000000050d0 <mpc_fix_zero@plt>:
    50d0:	adrp	x16, 24000 <mpfr_set_underflow>
    50d4:	ldr	x17, [x16, #928]
    50d8:	add	x16, x16, #0x3a0
    50dc:	br	x17

00000000000050e0 <mpfr_acosh@plt>:
    50e0:	adrp	x16, 24000 <mpfr_set_underflow>
    50e4:	ldr	x17, [x16, #936]
    50e8:	add	x16, x16, #0x3a8
    50ec:	br	x17

00000000000050f0 <mpfr_sub_ui@plt>:
    50f0:	adrp	x16, 24000 <mpfr_set_underflow>
    50f4:	ldr	x17, [x16, #944]
    50f8:	add	x16, x16, #0x3b0
    50fc:	br	x17

0000000000005100 <__gmpq_set_ui@plt>:
    5100:	adrp	x16, 24000 <mpfr_set_underflow>
    5104:	ldr	x17, [x16, #952]
    5108:	add	x16, x16, #0x3b8
    510c:	br	x17

0000000000005110 <mpfr_get_ld@plt>:
    5110:	adrp	x16, 24000 <mpfr_set_underflow>
    5114:	ldr	x17, [x16, #960]
    5118:	add	x16, x16, #0x3c0
    511c:	br	x17

0000000000005120 <mpfr_set_inf@plt>:
    5120:	adrp	x16, 24000 <mpfr_set_underflow>
    5124:	ldr	x17, [x16, #968]
    5128:	add	x16, x16, #0x3c8
    512c:	br	x17

0000000000005130 <mpfr_set_ui_2exp@plt>:
    5130:	adrp	x16, 24000 <mpfr_set_underflow>
    5134:	ldr	x17, [x16, #976]
    5138:	add	x16, x16, #0x3d0
    513c:	br	x17

0000000000005140 <mpc_sin_cos@plt>:
    5140:	adrp	x16, 24000 <mpfr_set_underflow>
    5144:	ldr	x17, [x16, #984]
    5148:	add	x16, x16, #0x3d8
    514c:	br	x17

0000000000005150 <mpfr_div@plt>:
    5150:	adrp	x16, 24000 <mpfr_set_underflow>
    5154:	ldr	x17, [x16, #992]
    5158:	add	x16, x16, #0x3e0
    515c:	br	x17

0000000000005160 <mpc_mul_fr@plt>:
    5160:	adrp	x16, 24000 <mpfr_set_underflow>
    5164:	ldr	x17, [x16, #1000]
    5168:	add	x16, x16, #0x3e8
    516c:	br	x17

0000000000005170 <__ctype_b_loc@plt>:
    5170:	adrp	x16, 24000 <mpfr_set_underflow>
    5174:	ldr	x17, [x16, #1008]
    5178:	add	x16, x16, #0x3f0
    517c:	br	x17

0000000000005180 <__gmpz_clear@plt>:
    5180:	adrp	x16, 24000 <mpfr_set_underflow>
    5184:	ldr	x17, [x16, #1016]
    5188:	add	x16, x16, #0x3f8
    518c:	br	x17

0000000000005190 <__gmpfr_out_str@plt>:
    5190:	adrp	x16, 24000 <mpfr_set_underflow>
    5194:	ldr	x17, [x16, #1024]
    5198:	add	x16, x16, #0x400
    519c:	br	x17

00000000000051a0 <mpc_abs@plt>:
    51a0:	adrp	x16, 24000 <mpfr_set_underflow>
    51a4:	ldr	x17, [x16, #1032]
    51a8:	add	x16, x16, #0x408
    51ac:	br	x17

00000000000051b0 <mpfr_atan@plt>:
    51b0:	adrp	x16, 24000 <mpfr_set_underflow>
    51b4:	ldr	x17, [x16, #1040]
    51b8:	add	x16, x16, #0x410
    51bc:	br	x17

00000000000051c0 <mpfr_nexttoward@plt>:
    51c0:	adrp	x16, 24000 <mpfr_set_underflow>
    51c4:	ldr	x17, [x16, #1048]
    51c8:	add	x16, x16, #0x418
    51cc:	br	x17

00000000000051d0 <mpfr_set4@plt>:
    51d0:	adrp	x16, 24000 <mpfr_set_underflow>
    51d4:	ldr	x17, [x16, #1056]
    51d8:	add	x16, x16, #0x420
    51dc:	br	x17

00000000000051e0 <mpfr_log1p@plt>:
    51e0:	adrp	x16, 24000 <mpfr_set_underflow>
    51e4:	ldr	x17, [x16, #1064]
    51e8:	add	x16, x16, #0x428
    51ec:	br	x17

00000000000051f0 <mpfr_sgn@plt>:
    51f0:	adrp	x16, 24000 <mpfr_set_underflow>
    51f4:	ldr	x17, [x16, #1072]
    51f8:	add	x16, x16, #0x430
    51fc:	br	x17

0000000000005200 <mpfr_get_emax@plt>:
    5200:	adrp	x16, 24000 <mpfr_set_underflow>
    5204:	ldr	x17, [x16, #1080]
    5208:	add	x16, x16, #0x438
    520c:	br	x17

0000000000005210 <ungetc@plt>:
    5210:	adrp	x16, 24000 <mpfr_set_underflow>
    5214:	ldr	x17, [x16, #1088]
    5218:	add	x16, x16, #0x440
    521c:	br	x17

0000000000005220 <__gmpz_tdiv_q_2exp@plt>:
    5220:	adrp	x16, 24000 <mpfr_set_underflow>
    5224:	ldr	x17, [x16, #1096]
    5228:	add	x16, x16, #0x448
    522c:	br	x17

0000000000005230 <mpfr_exp@plt>:
    5230:	adrp	x16, 24000 <mpfr_set_underflow>
    5234:	ldr	x17, [x16, #1104]
    5238:	add	x16, x16, #0x450
    523c:	br	x17

0000000000005240 <mpc_pow@plt>:
    5240:	adrp	x16, 24000 <mpfr_set_underflow>
    5244:	ldr	x17, [x16, #1112]
    5248:	add	x16, x16, #0x458
    524c:	br	x17

0000000000005250 <mpc_div@plt>:
    5250:	adrp	x16, 24000 <mpfr_set_underflow>
    5254:	ldr	x17, [x16, #1120]
    5258:	add	x16, x16, #0x460
    525c:	br	x17

0000000000005260 <mpfr_add_si@plt>:
    5260:	adrp	x16, 24000 <mpfr_set_underflow>
    5264:	ldr	x17, [x16, #1128]
    5268:	add	x16, x16, #0x468
    526c:	br	x17

0000000000005270 <mpfr_set_si@plt>:
    5270:	adrp	x16, 24000 <mpfr_set_underflow>
    5274:	ldr	x17, [x16, #1136]
    5278:	add	x16, x16, #0x470
    527c:	br	x17

0000000000005280 <mpfr_sqrt_ui@plt>:
    5280:	adrp	x16, 24000 <mpfr_set_underflow>
    5284:	ldr	x17, [x16, #1144]
    5288:	add	x16, x16, #0x478
    528c:	br	x17

0000000000005290 <mpfr_set_q@plt>:
    5290:	adrp	x16, 24000 <mpfr_set_underflow>
    5294:	ldr	x17, [x16, #1152]
    5298:	add	x16, x16, #0x480
    529c:	br	x17

00000000000052a0 <mpc_exp@plt>:
    52a0:	adrp	x16, 24000 <mpfr_set_underflow>
    52a4:	ldr	x17, [x16, #1160]
    52a8:	add	x16, x16, #0x488
    52ac:	br	x17

00000000000052b0 <__gmpq_init@plt>:
    52b0:	adrp	x16, 24000 <mpfr_set_underflow>
    52b4:	ldr	x17, [x16, #1168]
    52b8:	add	x16, x16, #0x490
    52bc:	br	x17

00000000000052c0 <mpc_set_si_si@plt>:
    52c0:	adrp	x16, 24000 <mpfr_set_underflow>
    52c4:	ldr	x17, [x16, #1176]
    52c8:	add	x16, x16, #0x498
    52cc:	br	x17

00000000000052d0 <__gmpz_submul@plt>:
    52d0:	adrp	x16, 24000 <mpfr_set_underflow>
    52d4:	ldr	x17, [x16, #1184]
    52d8:	add	x16, x16, #0x4a0
    52dc:	br	x17

00000000000052e0 <mpfr_free_str@plt>:
    52e0:	adrp	x16, 24000 <mpfr_set_underflow>
    52e4:	ldr	x17, [x16, #1192]
    52e8:	add	x16, x16, #0x4a8
    52ec:	br	x17

00000000000052f0 <mpfr_underflow_p@plt>:
    52f0:	adrp	x16, 24000 <mpfr_set_underflow>
    52f4:	ldr	x17, [x16, #1200]
    52f8:	add	x16, x16, #0x4b0
    52fc:	br	x17

0000000000005300 <__gmpz_cmp@plt>:
    5300:	adrp	x16, 24000 <mpfr_set_underflow>
    5304:	ldr	x17, [x16, #1208]
    5308:	add	x16, x16, #0x4b8
    530c:	br	x17

0000000000005310 <mpc_cmp_si_si@plt>:
    5310:	adrp	x16, 24000 <mpfr_set_underflow>
    5314:	ldr	x17, [x16, #1216]
    5318:	add	x16, x16, #0x4c0
    531c:	br	x17

0000000000005320 <mpfr_div_2ui@plt>:
    5320:	adrp	x16, 24000 <mpfr_set_underflow>
    5324:	ldr	x17, [x16, #1224]
    5328:	add	x16, x16, #0x4c8
    532c:	br	x17

0000000000005330 <mpc_realloc_str@plt>:
    5330:	adrp	x16, 24000 <mpfr_set_underflow>
    5334:	ldr	x17, [x16, #1232]
    5338:	add	x16, x16, #0x4d0
    533c:	br	x17

0000000000005340 <strcpy@plt>:
    5340:	adrp	x16, 24000 <mpfr_set_underflow>
    5344:	ldr	x17, [x16, #1240]
    5348:	add	x16, x16, #0x4d8
    534c:	br	x17

0000000000005350 <mpfr_sqrt@plt>:
    5350:	adrp	x16, 24000 <mpfr_set_underflow>
    5354:	ldr	x17, [x16, #1248]
    5358:	add	x16, x16, #0x4e0
    535c:	br	x17

0000000000005360 <mpfr_mul_si@plt>:
    5360:	adrp	x16, 24000 <mpfr_set_underflow>
    5364:	ldr	x17, [x16, #1256]
    5368:	add	x16, x16, #0x4e8
    536c:	br	x17

0000000000005370 <mpfr_prec_round@plt>:
    5370:	adrp	x16, 24000 <mpfr_set_underflow>
    5374:	ldr	x17, [x16, #1264]
    5378:	add	x16, x16, #0x4f0
    537c:	br	x17

0000000000005380 <mpc_set_str@plt>:
    5380:	adrp	x16, 24000 <mpfr_set_underflow>
    5384:	ldr	x17, [x16, #1272]
    5388:	add	x16, x16, #0x4f8
    538c:	br	x17

0000000000005390 <mpfr_min_prec@plt>:
    5390:	adrp	x16, 24000 <mpfr_set_underflow>
    5394:	ldr	x17, [x16, #1280]
    5398:	add	x16, x16, #0x500
    539c:	br	x17

00000000000053a0 <mpfr_cmp3@plt>:
    53a0:	adrp	x16, 24000 <mpfr_set_underflow>
    53a4:	ldr	x17, [x16, #1288]
    53a8:	add	x16, x16, #0x508
    53ac:	br	x17

00000000000053b0 <mpfr_cmpabs@plt>:
    53b0:	adrp	x16, 24000 <mpfr_set_underflow>
    53b4:	ldr	x17, [x16, #1296]
    53b8:	add	x16, x16, #0x510
    53bc:	br	x17

00000000000053c0 <mpc_init3@plt>:
    53c0:	adrp	x16, 24000 <mpfr_set_underflow>
    53c4:	ldr	x17, [x16, #1304]
    53c8:	add	x16, x16, #0x518
    53cc:	br	x17

00000000000053d0 <__gmpz_add@plt>:
    53d0:	adrp	x16, 24000 <mpfr_set_underflow>
    53d4:	ldr	x17, [x16, #1312]
    53d8:	add	x16, x16, #0x520
    53dc:	br	x17

00000000000053e0 <mpc_cos@plt>:
    53e0:	adrp	x16, 24000 <mpfr_set_underflow>
    53e4:	ldr	x17, [x16, #1320]
    53e8:	add	x16, x16, #0x528
    53ec:	br	x17

00000000000053f0 <set_pi_over_2@plt>:
    53f0:	adrp	x16, 24000 <mpfr_set_underflow>
    53f4:	ldr	x17, [x16, #1328]
    53f8:	add	x16, x16, #0x530
    53fc:	br	x17

0000000000005400 <__gmpfr_set_uj@plt>:
    5400:	adrp	x16, 24000 <mpfr_set_underflow>
    5404:	ldr	x17, [x16, #1336]
    5408:	add	x16, x16, #0x538
    540c:	br	x17

0000000000005410 <mpc_atan@plt>:
    5410:	adrp	x16, 24000 <mpfr_set_underflow>
    5414:	ldr	x17, [x16, #1344]
    5418:	add	x16, x16, #0x540
    541c:	br	x17

0000000000005420 <__gmpn_perfect_square_p@plt>:
    5420:	adrp	x16, 24000 <mpfr_set_underflow>
    5424:	ldr	x17, [x16, #1352]
    5428:	add	x16, x16, #0x548
    542c:	br	x17

0000000000005430 <mpfr_ui_sub@plt>:
    5430:	adrp	x16, 24000 <mpfr_set_underflow>
    5434:	ldr	x17, [x16, #1360]
    5438:	add	x16, x16, #0x550
    543c:	br	x17

0000000000005440 <mpfr_init2@plt>:
    5440:	adrp	x16, 24000 <mpfr_set_underflow>
    5444:	ldr	x17, [x16, #1368]
    5448:	add	x16, x16, #0x558
    544c:	br	x17

0000000000005450 <mpfr_can_round@plt>:
    5450:	adrp	x16, 24000 <mpfr_set_underflow>
    5454:	ldr	x17, [x16, #1376]
    5458:	add	x16, x16, #0x560
    545c:	br	x17

0000000000005460 <mpc_set_d@plt>:
    5460:	adrp	x16, 24000 <mpfr_set_underflow>
    5464:	ldr	x17, [x16, #1384]
    5468:	add	x16, x16, #0x568
    546c:	br	x17

0000000000005470 <mpfr_get_z_2exp@plt>:
    5470:	adrp	x16, 24000 <mpfr_set_underflow>
    5474:	ldr	x17, [x16, #1392]
    5478:	add	x16, x16, #0x570
    547c:	br	x17

0000000000005480 <mpc_asin@plt>:
    5480:	adrp	x16, 24000 <mpfr_set_underflow>
    5484:	ldr	x17, [x16, #1400]
    5488:	add	x16, x16, #0x578
    548c:	br	x17

0000000000005490 <mpfr_set_overflow@plt>:
    5490:	adrp	x16, 24000 <mpfr_set_underflow>
    5494:	ldr	x17, [x16, #1408]
    5498:	add	x16, x16, #0x580
    549c:	br	x17

00000000000054a0 <__gmpz_init@plt>:
    54a0:	adrp	x16, 24000 <mpfr_set_underflow>
    54a4:	ldr	x17, [x16, #1416]
    54a8:	add	x16, x16, #0x588
    54ac:	br	x17

00000000000054b0 <__gmpz_sizeinbase@plt>:
    54b0:	adrp	x16, 24000 <mpfr_set_underflow>
    54b4:	ldr	x17, [x16, #1424]
    54b8:	add	x16, x16, #0x590
    54bc:	br	x17

00000000000054c0 <__gmpz_set_si@plt>:
    54c0:	adrp	x16, 24000 <mpfr_set_underflow>
    54c4:	ldr	x17, [x16, #1432]
    54c8:	add	x16, x16, #0x598
    54cc:	br	x17

00000000000054d0 <mpfr_number_p@plt>:
    54d0:	adrp	x16, 24000 <mpfr_set_underflow>
    54d4:	ldr	x17, [x16, #1440]
    54d8:	add	x16, x16, #0x5a0
    54dc:	br	x17

00000000000054e0 <mpfr_overflow_p@plt>:
    54e0:	adrp	x16, 24000 <mpfr_set_underflow>
    54e4:	ldr	x17, [x16, #1448]
    54e8:	add	x16, x16, #0x5a8
    54ec:	br	x17

00000000000054f0 <mpc_set_fr_fr@plt>:
    54f0:	adrp	x16, 24000 <mpfr_set_underflow>
    54f4:	ldr	x17, [x16, #1456]
    54f8:	add	x16, x16, #0x5b0
    54fc:	br	x17

0000000000005500 <mpfr_urandomb@plt>:
    5500:	adrp	x16, 24000 <mpfr_set_underflow>
    5504:	ldr	x17, [x16, #1464]
    5508:	add	x16, x16, #0x5b8
    550c:	br	x17

0000000000005510 <mpfr_set_ui@plt>:
    5510:	adrp	x16, 24000 <mpfr_set_underflow>
    5514:	ldr	x17, [x16, #1472]
    5518:	add	x16, x16, #0x5c0
    551c:	br	x17

0000000000005520 <mpfr_sin_cos@plt>:
    5520:	adrp	x16, 24000 <mpfr_set_underflow>
    5524:	ldr	x17, [x16, #1480]
    5528:	add	x16, x16, #0x5c8
    552c:	br	x17

0000000000005530 <mpc_div_2ui@plt>:
    5530:	adrp	x16, 24000 <mpfr_set_underflow>
    5534:	ldr	x17, [x16, #1488]
    5538:	add	x16, x16, #0x5d0
    553c:	br	x17

0000000000005540 <mpfr_inits2@plt>:
    5540:	adrp	x16, 24000 <mpfr_set_underflow>
    5544:	ldr	x17, [x16, #1496]
    5548:	add	x16, x16, #0x5d8
    554c:	br	x17

0000000000005550 <mpfr_div_ui@plt>:
    5550:	adrp	x16, 24000 <mpfr_set_underflow>
    5554:	ldr	x17, [x16, #1504]
    5558:	add	x16, x16, #0x5e0
    555c:	br	x17

0000000000005560 <mpc_fma_naive@plt>:
    5560:	adrp	x16, 24000 <mpfr_set_underflow>
    5564:	ldr	x17, [x16, #1512]
    5568:	add	x16, x16, #0x5e8
    556c:	br	x17

0000000000005570 <__gmpq_mul_2exp@plt>:
    5570:	adrp	x16, 24000 <mpfr_set_underflow>
    5574:	ldr	x17, [x16, #1520]
    5578:	add	x16, x16, #0x5f0
    557c:	br	x17

0000000000005580 <mpc_set@plt>:
    5580:	adrp	x16, 24000 <mpfr_set_underflow>
    5584:	ldr	x17, [x16, #1528]
    5588:	add	x16, x16, #0x5f8
    558c:	br	x17

0000000000005590 <mpfr_hypot@plt>:
    5590:	adrp	x16, 24000 <mpfr_set_underflow>
    5594:	ldr	x17, [x16, #1536]
    5598:	add	x16, x16, #0x600
    559c:	br	x17

00000000000055a0 <fprintf@plt>:
    55a0:	adrp	x16, 24000 <mpfr_set_underflow>
    55a4:	ldr	x17, [x16, #1544]
    55a8:	add	x16, x16, #0x608
    55ac:	br	x17

00000000000055b0 <mpc_ui_div@plt>:
    55b0:	adrp	x16, 24000 <mpfr_set_underflow>
    55b4:	ldr	x17, [x16, #1552]
    55b8:	add	x16, x16, #0x610
    55bc:	br	x17

00000000000055c0 <mpfr_get_emin_min@plt>:
    55c0:	adrp	x16, 24000 <mpfr_set_underflow>
    55c4:	ldr	x17, [x16, #1560]
    55c8:	add	x16, x16, #0x618
    55cc:	br	x17

Disassembly of section .text:

00000000000055d0 <mpc_abs@@Base-0xd4>:
    55d0:	adrp	x0, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    55d4:	ldr	x0, [x0, #4048]
    55d8:	cbz	x0, 55e0 <mpfr_get_emin_min@plt+0x20>
    55dc:	b	4fc0 <__gmon_start__@plt>
    55e0:	ret
    55e4:	nop
    55e8:	adrp	x0, 24000 <mpc_ui_ui_sub@@Base+0x12070>
    55ec:	add	x0, x0, #0x628
    55f0:	adrp	x1, 24000 <mpc_ui_ui_sub@@Base+0x12070>
    55f4:	add	x1, x1, #0x628
    55f8:	cmp	x1, x0
    55fc:	b.eq	5614 <mpfr_get_emin_min@plt+0x54>  // b.none
    5600:	adrp	x1, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    5604:	ldr	x1, [x1, #3992]
    5608:	cbz	x1, 5614 <mpfr_get_emin_min@plt+0x54>
    560c:	mov	x16, x1
    5610:	br	x16
    5614:	ret
    5618:	adrp	x0, 24000 <mpc_ui_ui_sub@@Base+0x12070>
    561c:	add	x0, x0, #0x628
    5620:	adrp	x1, 24000 <mpc_ui_ui_sub@@Base+0x12070>
    5624:	add	x1, x1, #0x628
    5628:	sub	x1, x1, x0
    562c:	lsr	x2, x1, #63
    5630:	add	x1, x2, x1, asr #3
    5634:	cmp	xzr, x1, asr #1
    5638:	asr	x1, x1, #1
    563c:	b.eq	5654 <mpfr_get_emin_min@plt+0x94>  // b.none
    5640:	adrp	x2, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    5644:	ldr	x2, [x2, #4064]
    5648:	cbz	x2, 5654 <mpfr_get_emin_min@plt+0x94>
    564c:	mov	x16, x2
    5650:	br	x16
    5654:	ret
    5658:	stp	x29, x30, [sp, #-32]!
    565c:	mov	x29, sp
    5660:	str	x19, [sp, #16]
    5664:	adrp	x19, 24000 <mpc_ui_ui_sub@@Base+0x12070>
    5668:	ldrb	w0, [x19, #1576]
    566c:	cbnz	w0, 5694 <mpfr_get_emin_min@plt+0xd4>
    5670:	adrp	x0, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    5674:	ldr	x0, [x0, #4000]
    5678:	cbz	x0, 5688 <mpfr_get_emin_min@plt+0xc8>
    567c:	adrp	x0, 24000 <mpc_ui_ui_sub@@Base+0x12070>
    5680:	ldr	x0, [x0, #1568]
    5684:	bl	4b20 <__cxa_finalize@plt>
    5688:	bl	55e8 <mpfr_get_emin_min@plt+0x28>
    568c:	mov	w0, #0x1                   	// #1
    5690:	strb	w0, [x19, #1576]
    5694:	ldr	x19, [sp, #16]
    5698:	ldp	x29, x30, [sp], #32
    569c:	ret
    56a0:	b	5618 <mpfr_get_emin_min@plt+0x58>

00000000000056a4 <mpc_abs@@Base>:
    56a4:	mov	w3, w2
    56a8:	add	x2, x1, #0x20
    56ac:	b	5590 <mpfr_hypot@plt>

00000000000056b0 <mpc_acos@@Base>:
    56b0:	sub	sp, sp, #0xd0
    56b4:	stp	x29, x30, [sp, #112]
    56b8:	stp	x28, x27, [sp, #128]
    56bc:	stp	x26, x25, [sp, #144]
    56c0:	stp	x24, x23, [sp, #160]
    56c4:	stp	x22, x21, [sp, #176]
    56c8:	stp	x20, x19, [sp, #192]
    56cc:	ldr	x8, [x1, #16]
    56d0:	mov	x27, #0x2                   	// #2
    56d4:	movk	x27, #0x8000, lsl #48
    56d8:	mov	x20, x1
    56dc:	cmp	x8, x27
    56e0:	mov	x24, x0
    56e4:	add	x29, sp, #0x70
    56e8:	b.ne	570c <mpc_acos@@Base+0x5c>  // b.any
    56ec:	ldr	x8, [x20, #48]
    56f0:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    56f4:	cmp	x8, x9
    56f8:	b.eq	5728 <mpc_acos@@Base+0x78>  // b.none
    56fc:	mov	x0, x24
    5700:	bl	4a40 <mpfr_set_nan@plt>
    5704:	add	x0, x24, #0x20
    5708:	b	5744 <mpc_acos@@Base+0x94>
    570c:	ldr	x9, [x20, #48]
    5710:	mov	w19, w2
    5714:	cmp	x9, x27
    5718:	b.ne	5750 <mpc_acos@@Base+0xa0>  // b.any
    571c:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    5720:	cmp	x8, x9
    5724:	b.ne	57c0 <mpc_acos@@Base+0x110>  // b.any
    5728:	ldr	w8, [x20, #40]
    572c:	add	x0, x24, #0x20
    5730:	cmp	w8, #0x0
    5734:	mov	w8, #0xffffffff            	// #-1
    5738:	cneg	w1, w8, lt  // lt = tstop
    573c:	bl	5120 <mpfr_set_inf@plt>
    5740:	mov	x0, x24
    5744:	bl	4a40 <mpfr_set_nan@plt>
    5748:	mov	w0, wzr
    574c:	b	5cd8 <mpc_acos@@Base+0x628>
    5750:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    5754:	cmp	x8, x10
    5758:	b.eq	57f0 <mpc_acos@@Base+0x140>  // b.none
    575c:	cmp	x9, x10
    5760:	b.eq	57f0 <mpc_acos@@Base+0x140>  // b.none
    5764:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    5768:	cmp	x9, x10
    576c:	b.ne	583c <mpc_acos@@Base+0x18c>  // b.any
    5770:	ldr	w22, [x20, #40]
    5774:	mov	w1, #0x1                   	// #1
    5778:	mov	x0, x20
    577c:	mov	x2, xzr
    5780:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    5784:	cmp	w0, #0x1
    5788:	b.lt	5944 <mpc_acos@@Base+0x294>  // b.tstop
    578c:	add	x0, x24, #0x20
    5790:	asr	w2, w19, #4
    5794:	tbnz	w22, #31, 59a4 <mpc_acos@@Base+0x2f4>
    5798:	cmp	w2, #0x3
    579c:	mov	w8, #0x2                   	// #2
    57a0:	csel	w8, w8, w2, eq  // eq = none
    57a4:	cmp	w2, #0x2
    57a8:	mov	w9, #0x3                   	// #3
    57ac:	csel	w2, w9, w8, eq  // eq = none
    57b0:	mov	x1, x20
    57b4:	bl	50e0 <mpfr_acosh@plt>
    57b8:	neg	w20, w0
    57bc:	b	59b0 <mpc_acos@@Base+0x300>
    57c0:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    57c4:	cmp	x8, x9
    57c8:	b.ne	56fc <mpc_acos@@Base+0x4c>  // b.any
    57cc:	and	w2, w19, #0xf
    57d0:	mov	w1, #0x1                   	// #1
    57d4:	mov	x0, x24
    57d8:	bl	53f0 <set_pi_over_2@plt>
    57dc:	mov	w20, w0
    57e0:	add	x0, x24, #0x20
    57e4:	bl	4a40 <mpfr_set_nan@plt>
    57e8:	cmp	w20, #0x0
    57ec:	b	5aa8 <mpc_acos@@Base+0x3f8>
    57f0:	cmp	x8, x10
    57f4:	b.ne	58c0 <mpc_acos@@Base+0x210>  // b.any
    57f8:	ldr	w8, [x20, #8]
    57fc:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    5800:	cmp	x9, x10
    5804:	b.ne	58d8 <mpc_acos@@Base+0x228>  // b.any
    5808:	cmp	w8, #0x1
    580c:	b.lt	5a00 <mpc_acos@@Base+0x350>  // b.tstop
    5810:	and	w2, w19, #0xf
    5814:	mov	w1, #0x1                   	// #1
    5818:	mov	x0, x24
    581c:	bl	53f0 <set_pi_over_2@plt>
    5820:	mov	w21, w0
    5824:	mov	w2, #0x1                   	// #1
    5828:	mov	x0, x24
    582c:	mov	x1, x24
    5830:	mov	w3, wzr
    5834:	bl	5320 <mpfr_div_2ui@plt>
    5838:	b	5a8c <mpc_acos@@Base+0x3dc>
    583c:	cmp	x8, x10
    5840:	b.ne	58f8 <mpc_acos@@Base+0x248>  // b.any
    5844:	and	w2, w19, #0xf
    5848:	mov	w1, #0x1                   	// #1
    584c:	mov	x0, x24
    5850:	add	x20, x20, #0x20
    5854:	bl	53f0 <set_pi_over_2@plt>
    5858:	asr	w8, w19, #4
    585c:	mov	w19, #0x2                   	// #2
    5860:	cmp	w8, #0x3
    5864:	csel	w9, w19, w8, eq  // eq = none
    5868:	cmp	w8, #0x2
    586c:	mov	w8, #0x3                   	// #3
    5870:	mov	w22, w0
    5874:	add	x0, x24, #0x20
    5878:	csel	w2, w8, w9, eq  // eq = none
    587c:	mov	x1, x20
    5880:	bl	4dc0 <mpfr_asinh@plt>
    5884:	mov	w20, w0
    5888:	mov	x0, x24
    588c:	mov	x1, x24
    5890:	mov	w2, wzr
    5894:	bl	4f60 <mpc_conj@plt>
    5898:	cmp	w22, #0x0
    589c:	cset	w8, ne  // ne = any
    58a0:	csel	w8, w19, w8, lt  // lt = tstop
    58a4:	cmp	w20, #0x0
    58a8:	cset	w9, ne  // ne = any
    58ac:	lsl	w9, w9, #2
    58b0:	mov	w10, #0x8                   	// #8
    58b4:	csel	w9, w10, w9, gt
    58b8:	orr	w0, w9, w8
    58bc:	b	5cd8 <mpc_acos@@Base+0x628>
    58c0:	and	w2, w19, #0xf
    58c4:	mov	w1, #0x1                   	// #1
    58c8:	mov	x0, x24
    58cc:	bl	53f0 <set_pi_over_2@plt>
    58d0:	mov	w21, w0
    58d4:	b	5a8c <mpc_acos@@Base+0x3dc>
    58d8:	cmp	w8, #0x1
    58dc:	b.lt	5ab8 <mpc_acos@@Base+0x408>  // b.tstop
    58e0:	mov	w8, #0x1                   	// #1
    58e4:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    58e8:	mov	w21, wzr
    58ec:	str	w8, [x24, #8]
    58f0:	str	x9, [x24, #16]
    58f4:	b	5a8c <mpc_acos@@Base+0x3dc>
    58f8:	ldr	x22, [x24]
    58fc:	ldr	x2, [x24, #32]
    5900:	add	x0, sp, #0x30
    5904:	mov	x1, x22
    5908:	bl	53c0 <mpc_init3@plt>
    590c:	asr	w8, w19, #4
    5910:	cmp	w8, #0x1
    5914:	str	x24, [sp, #8]
    5918:	b.ne	5988 <mpc_acos@@Base+0x2d8>  // b.any
    591c:	ldr	x8, [x20, #48]
    5920:	mov	x9, #0x2                   	// #2
    5924:	movk	x9, #0x8000, lsl #48
    5928:	cmp	x8, x9
    592c:	b.gt	5b14 <mpc_acos@@Base+0x464>
    5930:	cmp	x8, x27
    5934:	b.ne	593c <mpc_acos@@Base+0x28c>  // b.any
    5938:	bl	4b00 <mpfr_set_erangeflag@plt>
    593c:	mov	w8, #0x2                   	// #2
    5940:	b	5b24 <mpc_acos@@Base+0x474>
    5944:	mov	x1, #0xffffffffffffffff    	// #-1
    5948:	mov	x0, x20
    594c:	mov	x2, xzr
    5950:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    5954:	tbnz	w0, #31, 5ac8 <mpc_acos@@Base+0x418>
    5958:	and	w2, w19, #0xf
    595c:	mov	x0, x24
    5960:	mov	x1, x20
    5964:	bl	4fd0 <mpfr_acos@plt>
    5968:	mov	w21, w0
    596c:	mov	w20, wzr
    5970:	mov	w8, #0x1                   	// #1
    5974:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    5978:	str	w8, [x24, #40]
    597c:	str	x9, [x24, #48]
    5980:	tbz	w22, #31, 59c8 <mpc_acos@@Base+0x318>
    5984:	b	59d8 <mpc_acos@@Base+0x328>
    5988:	cmp	w8, #0x3
    598c:	mov	w9, #0x2                   	// #2
    5990:	csel	w9, w9, w8, eq  // eq = none
    5994:	cmp	w8, #0x2
    5998:	mov	w8, #0x3                   	// #3
    599c:	csel	w8, w8, w9, eq  // eq = none
    59a0:	b	5b24 <mpc_acos@@Base+0x474>
    59a4:	mov	x1, x20
    59a8:	bl	50e0 <mpfr_acosh@plt>
    59ac:	mov	w20, w0
    59b0:	mov	w8, #0x1                   	// #1
    59b4:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    59b8:	mov	w21, wzr
    59bc:	str	w8, [x24, #8]
    59c0:	str	x9, [x24, #16]
    59c4:	tbnz	w22, #31, 59d8 <mpc_acos@@Base+0x328>
    59c8:	mov	x0, x24
    59cc:	mov	x1, x24
    59d0:	mov	w2, wzr
    59d4:	bl	4f60 <mpc_conj@plt>
    59d8:	cmp	w21, #0x0
    59dc:	mov	w8, #0x2                   	// #2
    59e0:	cset	w9, ne  // ne = any
    59e4:	csel	w8, w8, w9, lt  // lt = tstop
    59e8:	cmp	w20, #0x0
    59ec:	cset	w9, ne  // ne = any
    59f0:	lsl	w9, w9, #2
    59f4:	mov	w10, #0x8                   	// #8
    59f8:	csel	w9, w10, w9, lt  // lt = tstop
    59fc:	b	5cd4 <mpc_acos@@Base+0x624>
    5a00:	add	x0, sp, #0x30
    5a04:	bl	4aa0 <mpfr_init@plt>
    5a08:	ldr	x23, [x24]
    5a0c:	tst	w19, #0xf
    5a10:	and	w22, w19, #0xf
    5a14:	cinc	x21, x23, eq  // eq = none
    5a18:	mov	x0, x23
    5a1c:	bl	4d20 <mpc_ceil_log2@plt>
    5a20:	add	x23, x0, x23
    5a24:	add	x0, sp, #0x30
    5a28:	mov	x1, x23
    5a2c:	bl	4c80 <mpfr_set_prec@plt>
    5a30:	add	x0, sp, #0x30
    5a34:	mov	w1, #0x3                   	// #3
    5a38:	bl	4a80 <mpfr_const_pi@plt>
    5a3c:	add	x0, sp, #0x30
    5a40:	add	x1, sp, #0x30
    5a44:	mov	w2, #0x3                   	// #3
    5a48:	mov	w3, #0x3                   	// #3
    5a4c:	bl	49c0 <mpfr_mul_ui@plt>
    5a50:	sub	x1, x23, #0x1
    5a54:	add	x0, sp, #0x30
    5a58:	mov	w2, #0x3                   	// #3
    5a5c:	mov	w3, w22
    5a60:	mov	x4, x21
    5a64:	bl	5450 <mpfr_can_round@plt>
    5a68:	cbz	w0, 5a18 <mpc_acos@@Base+0x368>
    5a6c:	add	x1, sp, #0x30
    5a70:	mov	w2, #0x2                   	// #2
    5a74:	mov	x0, x24
    5a78:	mov	w3, w22
    5a7c:	bl	5320 <mpfr_div_2ui@plt>
    5a80:	mov	w21, w0
    5a84:	add	x0, sp, #0x30
    5a88:	bl	4d60 <mpfr_clear@plt>
    5a8c:	ldr	w8, [x20, #40]
    5a90:	add	x0, x24, #0x20
    5a94:	cmp	w8, #0x0
    5a98:	mov	w8, #0xffffffff            	// #-1
    5a9c:	cneg	w1, w8, lt  // lt = tstop
    5aa0:	bl	5120 <mpfr_set_inf@plt>
    5aa4:	cmp	w21, #0x0
    5aa8:	cset	w8, ne  // ne = any
    5aac:	mov	w9, #0x2                   	// #2
    5ab0:	csel	w0, w9, w8, lt  // lt = tstop
    5ab4:	b	5cd8 <mpc_acos@@Base+0x628>
    5ab8:	and	w1, w19, #0xf
    5abc:	mov	x0, x24
    5ac0:	bl	4a80 <mpfr_const_pi@plt>
    5ac4:	b	58d0 <mpc_acos@@Base+0x220>
    5ac8:	ldp	q1, q0, [x20]
    5acc:	add	x0, sp, #0x30
    5ad0:	add	x1, sp, #0x30
    5ad4:	mov	w2, wzr
    5ad8:	stp	q1, q0, [sp, #48]
    5adc:	bl	4b80 <mpfr_neg@plt>
    5ae0:	add	x0, x24, #0x20
    5ae4:	asr	w2, w19, #4
    5ae8:	tbnz	w22, #31, 5cf8 <mpc_acos@@Base+0x648>
    5aec:	cmp	w2, #0x3
    5af0:	mov	w8, #0x2                   	// #2
    5af4:	csel	w8, w8, w2, eq  // eq = none
    5af8:	cmp	w2, #0x2
    5afc:	mov	w9, #0x3                   	// #3
    5b00:	csel	w2, w9, w8, eq  // eq = none
    5b04:	add	x1, sp, #0x30
    5b08:	bl	50e0 <mpfr_acosh@plt>
    5b0c:	neg	w20, w0
    5b10:	b	5d04 <mpc_acos@@Base+0x654>
    5b14:	ldr	w8, [x20, #40]
    5b18:	cmp	w8, #0x0
    5b1c:	mov	w8, #0x2                   	// #2
    5b20:	cinc	w8, w8, gt
    5b24:	add	x0, sp, #0x10
    5b28:	mov	x1, x22
    5b2c:	lsl	w23, w8, #4
    5b30:	bl	5440 <mpfr_init2@plt>
    5b34:	add	x8, sp, #0x30
    5b38:	tst	w19, #0xf
    5b3c:	mov	x21, #0x2                   	// #2
    5b40:	mov	w28, wzr
    5b44:	movk	x21, #0x8000, lsl #48
    5b48:	add	x24, x8, #0x20
    5b4c:	cinc	x25, x22, eq  // eq = none
    5b50:	str	w19, [sp, #4]
    5b54:	cmp	w28, #0x1
    5b58:	b.hi	5b6c <mpc_acos@@Base+0x4bc>  // b.pmore
    5b5c:	mov	x0, x22
    5b60:	bl	4d20 <mpc_ceil_log2@plt>
    5b64:	add	x8, x0, #0x3
    5b68:	b	5b78 <mpc_acos@@Base+0x4c8>
    5b6c:	cmp	x22, #0x0
    5b70:	cinc	x8, x22, lt  // lt = tstop
    5b74:	asr	x8, x8, #1
    5b78:	add	x22, x8, x22
    5b7c:	add	x0, sp, #0x30
    5b80:	mov	x1, x22
    5b84:	bl	4c80 <mpfr_set_prec@plt>
    5b88:	add	x0, sp, #0x10
    5b8c:	mov	x1, x22
    5b90:	bl	4c80 <mpfr_set_prec@plt>
    5b94:	add	x0, sp, #0x10
    5b98:	mov	w1, #0x1                   	// #1
    5b9c:	mov	w2, wzr
    5ba0:	bl	53f0 <set_pi_over_2@plt>
    5ba4:	add	x0, sp, #0x30
    5ba8:	mov	x1, x20
    5bac:	mov	w2, w23
    5bb0:	bl	5480 <mpc_asin@plt>
    5bb4:	ldr	x8, [sp, #96]
    5bb8:	mov	w26, w0
    5bbc:	cmp	x8, x21
    5bc0:	b.gt	5bd8 <mpc_acos@@Base+0x528>
    5bc4:	cmp	x8, x27
    5bc8:	b.ne	5bd0 <mpc_acos@@Base+0x520>  // b.any
    5bcc:	bl	4b00 <mpfr_set_erangeflag@plt>
    5bd0:	mov	w19, wzr
    5bd4:	b	5bdc <mpc_acos@@Base+0x52c>
    5bd8:	ldr	w19, [sp, #88]
    5bdc:	ldr	x8, [x20, #48]
    5be0:	cmp	x8, x21
    5be4:	b.gt	5bfc <mpc_acos@@Base+0x54c>
    5be8:	cmp	x8, x27
    5bec:	b.ne	5bf4 <mpc_acos@@Base+0x544>  // b.any
    5bf0:	bl	4b00 <mpfr_set_erangeflag@plt>
    5bf4:	mov	w8, wzr
    5bf8:	b	5c00 <mpc_acos@@Base+0x550>
    5bfc:	ldr	w8, [x20, #40]
    5c00:	mul	w8, w8, w19
    5c04:	cmp	w8, #0x0
    5c08:	b.le	5d1c <mpc_acos@@Base+0x66c>
    5c0c:	ldr	x19, [sp, #64]
    5c10:	add	x0, sp, #0x30
    5c14:	add	x1, sp, #0x10
    5c18:	add	x2, sp, #0x30
    5c1c:	mov	w3, wzr
    5c20:	add	w28, w28, #0x1
    5c24:	bl	4a60 <mpfr_sub@plt>
    5c28:	ldr	x8, [sp, #64]
    5c2c:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    5c30:	cmp	x8, x9
    5c34:	b.eq	5b54 <mpc_acos@@Base+0x4a4>  // b.none
    5c38:	cmp	x19, #0x2
    5c3c:	mov	w9, #0x2                   	// #2
    5c40:	csinc	x9, x9, x19, lt  // lt = tstop
    5c44:	sub	x8, x9, x8
    5c48:	mov	x0, x24
    5c4c:	mov	x1, x24
    5c50:	mov	w2, wzr
    5c54:	bic	x19, x8, x8, asr #63
    5c58:	bl	4b80 <mpfr_neg@plt>
    5c5c:	sub	x1, x22, x19
    5c60:	add	x0, sp, #0x30
    5c64:	mov	w3, #0x1                   	// #1
    5c68:	mov	w2, wzr
    5c6c:	mov	x4, x25
    5c70:	bl	5450 <mpfr_can_round@plt>
    5c74:	cbz	w0, 5b54 <mpc_acos@@Base+0x4a4>
    5c78:	ldr	x0, [sp, #8]
    5c7c:	ldr	w2, [sp, #4]
    5c80:	asr	w8, w26, #2
    5c84:	cmp	w8, #0x0
    5c88:	cset	w9, ne  // ne = any
    5c8c:	cmp	w8, #0x2
    5c90:	add	x1, sp, #0x30
    5c94:	csinv	w19, w9, wzr, ne  // ne = any
    5c98:	bl	5580 <mpc_set@plt>
    5c9c:	and	w20, w0, #0x3
    5ca0:	tst	w0, #0x3
    5ca4:	add	x0, sp, #0x30
    5ca8:	cset	w21, ne  // ne = any
    5cac:	bl	4a10 <mpc_clear@plt>
    5cb0:	add	x0, sp, #0x10
    5cb4:	bl	4d60 <mpfr_clear@plt>
    5cb8:	cmp	w20, #0x2
    5cbc:	csel	w8, w20, w21, eq  // eq = none
    5cc0:	cmp	w19, #0x0
    5cc4:	cset	w9, ne  // ne = any
    5cc8:	lsl	w9, w9, #2
    5ccc:	mov	w10, #0x8                   	// #8
    5cd0:	csel	w9, w10, w9, gt
    5cd4:	orr	w0, w8, w9
    5cd8:	ldp	x20, x19, [sp, #192]
    5cdc:	ldp	x22, x21, [sp, #176]
    5ce0:	ldp	x24, x23, [sp, #160]
    5ce4:	ldp	x26, x25, [sp, #144]
    5ce8:	ldp	x28, x27, [sp, #128]
    5cec:	ldp	x29, x30, [sp, #112]
    5cf0:	add	sp, sp, #0xd0
    5cf4:	ret
    5cf8:	add	x1, sp, #0x30
    5cfc:	bl	50e0 <mpfr_acosh@plt>
    5d00:	mov	w20, w0
    5d04:	and	w1, w19, #0xf
    5d08:	mov	x0, x24
    5d0c:	bl	4a80 <mpfr_const_pi@plt>
    5d10:	mov	w21, w0
    5d14:	tbz	w22, #31, 59c8 <mpc_acos@@Base+0x318>
    5d18:	b	59d8 <mpc_acos@@Base+0x328>
    5d1c:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    5d20:	ldr	x8, [x8, #4008]
    5d24:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    5d28:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    5d2c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    5d30:	ldr	x0, [x8]
    5d34:	add	x1, x1, #0x3b0
    5d38:	add	x2, x2, #0x3d1
    5d3c:	add	x4, x4, #0x3d8
    5d40:	mov	w3, #0xca                  	// #202
    5d44:	bl	55a0 <fprintf@plt>
    5d48:	bl	5000 <abort@plt>

0000000000005d4c <mpc_acosh@@Base>:
    5d4c:	sub	sp, sp, #0x90
    5d50:	stp	x29, x30, [sp, #96]
    5d54:	stp	x22, x21, [sp, #112]
    5d58:	stp	x20, x19, [sp, #128]
    5d5c:	ldr	x8, [x1, #16]
    5d60:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    5d64:	mov	w19, w2
    5d68:	mov	x21, x1
    5d6c:	cmp	x8, x9
    5d70:	mov	x20, x0
    5d74:	add	x29, sp, #0x60
    5d78:	b.ne	5da8 <mpc_acosh@@Base+0x5c>  // b.any
    5d7c:	ldr	x8, [x21, #48]
    5d80:	mov	x9, #0x2                   	// #2
    5d84:	movk	x9, #0x8000, lsl #48
    5d88:	cmp	x8, x9
    5d8c:	b.ne	5da8 <mpc_acosh@@Base+0x5c>  // b.any
    5d90:	mov	x0, x20
    5d94:	bl	4a40 <mpfr_set_nan@plt>
    5d98:	add	x0, x20, #0x20
    5d9c:	bl	4a40 <mpfr_set_nan@plt>
    5da0:	mov	w21, wzr
    5da4:	b	5ef8 <mpc_acosh@@Base+0x1ac>
    5da8:	ldr	x1, [x20, #32]
    5dac:	ldr	x2, [x20]
    5db0:	add	x0, sp, #0x20
    5db4:	add	x22, sp, #0x20
    5db8:	bl	53c0 <mpc_init3@plt>
    5dbc:	ldr	w9, [x21, #40]
    5dc0:	asr	w8, w19, #4
    5dc4:	tbnz	w9, #31, 5e5c <mpc_acosh@@Base+0x110>
    5dc8:	and	w9, w19, #0xf
    5dcc:	mov	w10, #0x20                  	// #32
    5dd0:	lsl	w11, w9, #4
    5dd4:	cmp	w9, #0x3
    5dd8:	csel	w10, w10, w11, eq  // eq = none
    5ddc:	cmp	w9, #0x2
    5de0:	mov	w9, #0x30                  	// #48
    5de4:	csel	w9, w9, w10, eq  // eq = none
    5de8:	add	w2, w9, w8
    5dec:	add	x0, sp, #0x20
    5df0:	mov	x1, x21
    5df4:	bl	5070 <mpc_acos@plt>
    5df8:	ldp	q0, q1, [sp, #32]
    5dfc:	ldp	q2, q3, [sp, #64]
    5e00:	mov	w21, w0
    5e04:	add	x0, sp, #0x20
    5e08:	add	x1, sp, #0x20
    5e0c:	mov	w2, wzr
    5e10:	stp	q0, q1, [sp]
    5e14:	stp	q2, q3, [sp, #32]
    5e18:	stp	q0, q1, [sp, #64]
    5e1c:	bl	4b80 <mpfr_neg@plt>
    5e20:	asr	w8, w21, #2
    5e24:	mov	w9, #0xfffffffd            	// #-3
    5e28:	cmp	w8, #0x0
    5e2c:	mov	w10, #0x2                   	// #2
    5e30:	cset	w8, ne  // ne = any
    5e34:	tst	w9, w21, asr #2
    5e38:	csel	w8, w8, w10, eq  // eq = none
    5e3c:	tst	w21, #0x3
    5e40:	and	w11, w21, #0x3
    5e44:	cset	w9, ne  // ne = any
    5e48:	cmp	w11, #0x2
    5e4c:	lsl	w9, w9, #2
    5e50:	mov	w10, #0x8                   	// #8
    5e54:	csel	w9, w10, w9, eq  // eq = none
    5e58:	b	5edc <mpc_acosh@@Base+0x190>
    5e5c:	cmp	w8, #0x3
    5e60:	mov	w9, #0x2                   	// #2
    5e64:	mov	w10, #0x3                   	// #3
    5e68:	csel	w9, w9, w8, eq  // eq = none
    5e6c:	cmp	w8, #0x2
    5e70:	csel	w8, w10, w9, eq  // eq = none
    5e74:	ubfiz	w9, w19, #4, #4
    5e78:	add	w2, w8, w9
    5e7c:	add	x0, sp, #0x20
    5e80:	mov	x1, x21
    5e84:	bl	5070 <mpc_acos@plt>
    5e88:	ldp	q0, q1, [sp, #32]
    5e8c:	ldp	q2, q3, [sp, #64]
    5e90:	mov	w21, w0
    5e94:	add	x0, x22, #0x20
    5e98:	mov	x1, x0
    5e9c:	mov	w2, wzr
    5ea0:	stp	q0, q1, [sp]
    5ea4:	stp	q2, q3, [sp, #32]
    5ea8:	stp	q0, q1, [sp, #64]
    5eac:	bl	4b80 <mpfr_neg@plt>
    5eb0:	asr	w8, w21, #2
    5eb4:	cmp	w8, #0x0
    5eb8:	cset	w9, ne  // ne = any
    5ebc:	cmp	w8, #0x2
    5ec0:	csel	w8, w8, w9, eq  // eq = none
    5ec4:	tst	w21, #0x3
    5ec8:	cset	w9, ne  // ne = any
    5ecc:	tst	w21, #0x1
    5ed0:	lsl	w9, w9, #2
    5ed4:	mov	w10, #0x8                   	// #8
    5ed8:	csel	w9, w9, w10, eq  // eq = none
    5edc:	add	x1, sp, #0x20
    5ee0:	mov	x0, x20
    5ee4:	mov	w2, w19
    5ee8:	orr	w21, w8, w9
    5eec:	bl	5580 <mpc_set@plt>
    5ef0:	add	x0, sp, #0x20
    5ef4:	bl	4a10 <mpc_clear@plt>
    5ef8:	mov	w0, w21
    5efc:	ldp	x20, x19, [sp, #128]
    5f00:	ldp	x22, x21, [sp, #112]
    5f04:	ldp	x29, x30, [sp, #96]
    5f08:	add	sp, sp, #0x90
    5f0c:	ret

0000000000005f10 <mpc_add@@Base>:
    5f10:	stp	x29, x30, [sp, #-64]!
    5f14:	stp	x20, x19, [sp, #48]
    5f18:	mov	w19, w3
    5f1c:	and	w3, w3, #0xf
    5f20:	str	x23, [sp, #16]
    5f24:	stp	x22, x21, [sp, #32]
    5f28:	mov	x29, sp
    5f2c:	mov	x20, x2
    5f30:	mov	x21, x1
    5f34:	mov	x22, x0
    5f38:	bl	4e60 <mpfr_add@plt>
    5f3c:	mov	w23, w0
    5f40:	add	x0, x22, #0x20
    5f44:	add	x1, x21, #0x20
    5f48:	add	x2, x20, #0x20
    5f4c:	asr	w3, w19, #4
    5f50:	bl	4e60 <mpfr_add@plt>
    5f54:	cmp	w23, #0x0
    5f58:	mov	w8, #0x2                   	// #2
    5f5c:	cset	w9, ne  // ne = any
    5f60:	csel	w8, w8, w9, lt  // lt = tstop
    5f64:	cmp	w0, #0x0
    5f68:	cset	w9, ne  // ne = any
    5f6c:	ldp	x20, x19, [sp, #48]
    5f70:	ldp	x22, x21, [sp, #32]
    5f74:	ldr	x23, [sp, #16]
    5f78:	lsl	w9, w9, #2
    5f7c:	mov	w10, #0x8                   	// #8
    5f80:	csel	w9, w10, w9, lt  // lt = tstop
    5f84:	orr	w0, w9, w8
    5f88:	ldp	x29, x30, [sp], #64
    5f8c:	ret

0000000000005f90 <mpc_add_fr@@Base>:
    5f90:	stp	x29, x30, [sp, #-48]!
    5f94:	stp	x20, x19, [sp, #32]
    5f98:	mov	w19, w3
    5f9c:	and	w3, w3, #0xf
    5fa0:	stp	x22, x21, [sp, #16]
    5fa4:	mov	x29, sp
    5fa8:	mov	x20, x1
    5fac:	mov	x21, x0
    5fb0:	bl	4e60 <mpfr_add@plt>
    5fb4:	ldr	w3, [x20, #40]
    5fb8:	mov	w22, w0
    5fbc:	add	x0, x21, #0x20
    5fc0:	add	x1, x20, #0x20
    5fc4:	asr	w2, w19, #4
    5fc8:	bl	51d0 <mpfr_set4@plt>
    5fcc:	cmp	w22, #0x0
    5fd0:	mov	w8, #0x2                   	// #2
    5fd4:	cset	w9, ne  // ne = any
    5fd8:	csel	w8, w8, w9, lt  // lt = tstop
    5fdc:	cmp	w0, #0x0
    5fe0:	cset	w9, ne  // ne = any
    5fe4:	ldp	x20, x19, [sp, #32]
    5fe8:	ldp	x22, x21, [sp, #16]
    5fec:	lsl	w9, w9, #2
    5ff0:	mov	w10, #0x8                   	// #8
    5ff4:	csel	w9, w10, w9, lt  // lt = tstop
    5ff8:	orr	w0, w9, w8
    5ffc:	ldp	x29, x30, [sp], #48
    6000:	ret

0000000000006004 <mpc_add_si@@Base>:
    6004:	stp	x29, x30, [sp, #-48]!
    6008:	stp	x20, x19, [sp, #32]
    600c:	mov	w19, w3
    6010:	and	w3, w3, #0xf
    6014:	stp	x22, x21, [sp, #16]
    6018:	mov	x29, sp
    601c:	mov	x20, x1
    6020:	mov	x21, x0
    6024:	bl	5260 <mpfr_add_si@plt>
    6028:	ldr	w3, [x20, #40]
    602c:	mov	w22, w0
    6030:	add	x0, x21, #0x20
    6034:	add	x1, x20, #0x20
    6038:	asr	w2, w19, #4
    603c:	bl	51d0 <mpfr_set4@plt>
    6040:	cmp	w22, #0x0
    6044:	mov	w8, #0x2                   	// #2
    6048:	cset	w9, ne  // ne = any
    604c:	csel	w8, w8, w9, lt  // lt = tstop
    6050:	cmp	w0, #0x0
    6054:	cset	w9, ne  // ne = any
    6058:	ldp	x20, x19, [sp, #32]
    605c:	ldp	x22, x21, [sp, #16]
    6060:	lsl	w9, w9, #2
    6064:	mov	w10, #0x8                   	// #8
    6068:	csel	w9, w10, w9, lt  // lt = tstop
    606c:	orr	w0, w9, w8
    6070:	ldp	x29, x30, [sp], #48
    6074:	ret

0000000000006078 <mpc_add_ui@@Base>:
    6078:	stp	x29, x30, [sp, #-48]!
    607c:	stp	x20, x19, [sp, #32]
    6080:	mov	w19, w3
    6084:	and	w3, w3, #0xf
    6088:	stp	x22, x21, [sp, #16]
    608c:	mov	x29, sp
    6090:	mov	x20, x1
    6094:	mov	x21, x0
    6098:	bl	4ee0 <mpfr_add_ui@plt>
    609c:	ldr	w3, [x20, #40]
    60a0:	mov	w22, w0
    60a4:	add	x0, x21, #0x20
    60a8:	add	x1, x20, #0x20
    60ac:	asr	w2, w19, #4
    60b0:	bl	51d0 <mpfr_set4@plt>
    60b4:	cmp	w22, #0x0
    60b8:	mov	w8, #0x2                   	// #2
    60bc:	cset	w9, ne  // ne = any
    60c0:	csel	w8, w8, w9, lt  // lt = tstop
    60c4:	cmp	w0, #0x0
    60c8:	cset	w9, ne  // ne = any
    60cc:	ldp	x20, x19, [sp, #32]
    60d0:	ldp	x22, x21, [sp, #16]
    60d4:	lsl	w9, w9, #2
    60d8:	mov	w10, #0x8                   	// #8
    60dc:	csel	w9, w10, w9, lt  // lt = tstop
    60e0:	orr	w0, w9, w8
    60e4:	ldp	x29, x30, [sp], #48
    60e8:	ret

00000000000060ec <mpc_arg@@Base>:
    60ec:	mov	w3, w2
    60f0:	mov	x2, x1
    60f4:	add	x1, x1, #0x20
    60f8:	b	4ca0 <mpfr_atan2@plt>

00000000000060fc <mpc_asin@@Base>:
    60fc:	sub	sp, sp, #0xf0
    6100:	stp	x29, x30, [sp, #144]
    6104:	stp	x28, x27, [sp, #160]
    6108:	stp	x26, x25, [sp, #176]
    610c:	stp	x24, x23, [sp, #192]
    6110:	stp	x22, x21, [sp, #208]
    6114:	stp	x20, x19, [sp, #224]
    6118:	ldr	x8, [x1, #16]
    611c:	mov	x9, #0x2                   	// #2
    6120:	movk	x9, #0x8000, lsl #48
    6124:	mov	x20, x1
    6128:	cmp	x8, x9
    612c:	mov	x19, x0
    6130:	add	x29, sp, #0x90
    6134:	b.ne	615c <mpc_asin@@Base+0x60>  // b.any
    6138:	ldr	x8, [x20, #48]
    613c:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    6140:	cmp	x8, x9
    6144:	b.eq	6174 <mpc_asin@@Base+0x78>  // b.none
    6148:	mov	x0, x19
    614c:	bl	4a40 <mpfr_set_nan@plt>
    6150:	add	x0, x19, #0x20
    6154:	bl	4a40 <mpfr_set_nan@plt>
    6158:	b	6194 <mpc_asin@@Base+0x98>
    615c:	ldr	x22, [x20, #48]
    6160:	cmp	x22, x9
    6164:	b.ne	61bc <mpc_asin@@Base+0xc0>  // b.any
    6168:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    616c:	cmp	x8, x9
    6170:	b.ne	6218 <mpc_asin@@Base+0x11c>  // b.any
    6174:	mov	x0, x19
    6178:	bl	4a40 <mpfr_set_nan@plt>
    617c:	ldr	w8, [x20, #40]
    6180:	add	x0, x19, #0x20
    6184:	cmp	w8, #0x0
    6188:	mov	w8, #0x1                   	// #1
    618c:	cneg	w1, w8, lt  // lt = tstop
    6190:	bl	5120 <mpfr_set_inf@plt>
    6194:	mov	w19, wzr
    6198:	mov	w0, w19
    619c:	ldp	x20, x19, [sp, #224]
    61a0:	ldp	x22, x21, [sp, #208]
    61a4:	ldp	x24, x23, [sp, #192]
    61a8:	ldp	x26, x25, [sp, #176]
    61ac:	ldp	x28, x27, [sp, #160]
    61b0:	ldp	x29, x30, [sp, #144]
    61b4:	add	sp, sp, #0xf0
    61b8:	ret
    61bc:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    61c0:	mov	w26, w2
    61c4:	cmp	x8, x9
    61c8:	b.eq	623c <mpc_asin@@Base+0x140>  // b.none
    61cc:	cmp	x22, x9
    61d0:	b.eq	623c <mpc_asin@@Base+0x140>  // b.none
    61d4:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    61d8:	cmp	x22, x9
    61dc:	b.ne	62a8 <mpc_asin@@Base+0x1ac>  // b.any
    61e0:	ldr	w23, [x20, #40]
    61e4:	mov	w1, #0x1                   	// #1
    61e8:	mov	x0, x20
    61ec:	mov	x2, xzr
    61f0:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    61f4:	cmp	w0, #0x1
    61f8:	b.lt	6660 <mpc_asin@@Base+0x564>  // b.tstop
    61fc:	add	x0, x19, #0x20
    6200:	asr	w2, w26, #4
    6204:	tbnz	w23, #31, 66c0 <mpc_asin@@Base+0x5c4>
    6208:	mov	x1, x20
    620c:	bl	50e0 <mpfr_acosh@plt>
    6210:	mov	w22, w0
    6214:	b	66e4 <mpc_asin@@Base+0x5e8>
    6218:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    621c:	cmp	x8, x9
    6220:	b.ne	6148 <mpc_asin@@Base+0x4c>  // b.any
    6224:	ldr	w3, [x20, #8]
    6228:	mov	x0, x19
    622c:	mov	x1, x20
    6230:	mov	w2, wzr
    6234:	bl	51d0 <mpfr_set4@plt>
    6238:	b	6150 <mpc_asin@@Base+0x54>
    623c:	ldr	w10, [x20, #8]
    6240:	mov	w23, #0x1                   	// #1
    6244:	cmp	w10, #0x0
    6248:	cneg	w1, w23, lt  // lt = tstop
    624c:	cmp	x8, x9
    6250:	b.ne	6304 <mpc_asin@@Base+0x208>  // b.any
    6254:	and	w2, w26, #0xf
    6258:	mov	x0, x19
    625c:	bl	53f0 <set_pi_over_2@plt>
    6260:	ldr	w8, [x20, #40]
    6264:	mov	w21, w0
    6268:	add	x0, x19, #0x20
    626c:	cmp	w8, #0x0
    6270:	cneg	w1, w23, lt  // lt = tstop
    6274:	bl	5120 <mpfr_set_inf@plt>
    6278:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    627c:	cmp	x22, x8
    6280:	b.ne	6298 <mpc_asin@@Base+0x19c>  // b.any
    6284:	mov	w2, #0x1                   	// #1
    6288:	mov	x0, x19
    628c:	mov	x1, x19
    6290:	mov	w3, wzr
    6294:	bl	5320 <mpfr_div_2ui@plt>
    6298:	cmp	w21, #0x0
    629c:	cset	w8, ne  // ne = any
    62a0:	mov	w9, #0x2                   	// #2
    62a4:	b	62fc <mpc_asin@@Base+0x200>
    62a8:	cmp	x8, x9
    62ac:	add	x22, x20, #0x20
    62b0:	b.ne	6320 <mpc_asin@@Base+0x224>  // b.any
    62b4:	ldr	w8, [x20, #8]
    62b8:	mov	w9, #0x1                   	// #1
    62bc:	str	w9, [x19, #8]
    62c0:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    62c4:	str	x9, [x19, #16]
    62c8:	tbz	w8, #31, 62dc <mpc_asin@@Base+0x1e0>
    62cc:	mov	x0, x19
    62d0:	mov	x1, x19
    62d4:	mov	w2, wzr
    62d8:	bl	4b80 <mpfr_neg@plt>
    62dc:	add	x0, x19, #0x20
    62e0:	asr	w2, w26, #4
    62e4:	mov	x1, x22
    62e8:	bl	4dc0 <mpfr_asinh@plt>
    62ec:	cmp	w0, #0x0
    62f0:	cset	w8, ne  // ne = any
    62f4:	lsl	w8, w8, #2
    62f8:	mov	w9, #0x8                   	// #8
    62fc:	csel	w19, w9, w8, lt  // lt = tstop
    6300:	b	6198 <mpc_asin@@Base+0x9c>
    6304:	mov	x0, x19
    6308:	bl	4d10 <mpfr_set_zero@plt>
    630c:	ldr	w8, [x20, #40]
    6310:	add	x0, x19, #0x20
    6314:	cmp	w8, #0x0
    6318:	cneg	w1, w23, lt  // lt = tstop
    631c:	b	6190 <mpc_asin@@Base+0x94>
    6320:	ldr	x21, [x19]
    6324:	ldr	x25, [x19, #32]
    6328:	add	x0, sp, #0x30
    632c:	str	x19, [sp, #24]
    6330:	add	x23, sp, #0x30
    6334:	cmp	x21, x25
    6338:	csel	x24, x25, x21, lt  // lt = tstop
    633c:	mov	x1, x24
    6340:	bl	4cf0 <mpc_init2@plt>
    6344:	tst	w26, #0xf
    6348:	cset	w8, eq  // eq = none
    634c:	str	x8, [sp, #16]
    6350:	cinc	x8, x21, eq  // eq = none
    6354:	cmp	w26, #0x10
    6358:	str	x8, [sp, #40]
    635c:	cset	w8, cc  // cc = lo, ul, last
    6360:	mov	w28, wzr
    6364:	add	x23, x23, #0x20
    6368:	str	w26, [sp, #4]
    636c:	str	x8, [sp, #8]
    6370:	cinc	x8, x25, cc  // cc = lo, ul, last
    6374:	mov	w26, #0x1                   	// #1
    6378:	str	x8, [sp, #32]
    637c:	cmp	w28, #0x1
    6380:	b.hi	6394 <mpc_asin@@Base+0x298>  // b.pmore
    6384:	mov	x0, x24
    6388:	bl	4d20 <mpc_ceil_log2@plt>
    638c:	add	x8, x0, #0x3
    6390:	b	63a0 <mpc_asin@@Base+0x2a4>
    6394:	cmp	x24, #0x0
    6398:	cinc	x8, x24, lt  // lt = tstop
    639c:	asr	x8, x8, #1
    63a0:	add	x24, x8, x24
    63a4:	add	x0, sp, #0x30
    63a8:	mov	x1, x24
    63ac:	bl	4c80 <mpfr_set_prec@plt>
    63b0:	mov	x0, x23
    63b4:	mov	x1, x24
    63b8:	bl	4c80 <mpfr_set_prec@plt>
    63bc:	cbnz	w28, 64a0 <mpc_asin@@Base+0x3a4>
    63c0:	ldr	x8, [x20, #48]
    63c4:	tbz	x8, #63, 64a0 <mpc_asin@@Base+0x3a4>
    63c8:	ldr	x9, [sp, #48]
    63cc:	cmp	x8, #0x0
    63d0:	cinc	x8, x8, lt  // lt = tstop
    63d4:	neg	x8, x8, asr #1
    63d8:	cmp	x8, x9
    63dc:	b.lt	64a0 <mpc_asin@@Base+0x3a4>  // b.tstop
    63e0:	add	x0, sp, #0x30
    63e4:	mov	w1, wzr
    63e8:	bl	4a80 <mpfr_const_pi@plt>
    63ec:	add	x0, sp, #0x30
    63f0:	add	x1, sp, #0x30
    63f4:	mov	w2, #0x1                   	// #1
    63f8:	mov	w3, wzr
    63fc:	bl	5320 <mpfr_div_2ui@plt>
    6400:	ldp	x9, x8, [sp, #16]
    6404:	ldr	x1, [sp, #48]
    6408:	add	x0, sp, #0x30
    640c:	mov	w3, #0x1                   	// #1
    6410:	ldr	x8, [x8]
    6414:	mov	w2, wzr
    6418:	add	x4, x8, x9
    641c:	bl	5450 <mpfr_can_round@plt>
    6420:	cbz	w0, 64a0 <mpc_asin@@Base+0x3a4>
    6424:	ldp	q1, q0, [x22]
    6428:	stp	q1, q0, [x29, #-32]
    642c:	ldr	w8, [x20, #40]
    6430:	tbz	w8, #31, 6444 <mpc_asin@@Base+0x348>
    6434:	sub	x0, x29, #0x20
    6438:	sub	x1, x29, #0x20
    643c:	mov	w2, wzr
    6440:	bl	4b80 <mpfr_neg@plt>
    6444:	sub	x1, x29, #0x20
    6448:	mov	x0, x23
    644c:	mov	w2, wzr
    6450:	bl	5350 <mpfr_sqrt@plt>
    6454:	ldr	w8, [x20, #40]
    6458:	mov	w27, w0
    645c:	tbz	w8, #31, 6470 <mpc_asin@@Base+0x374>
    6460:	mov	x0, x23
    6464:	mov	x1, x23
    6468:	mov	w2, wzr
    646c:	bl	4b80 <mpfr_neg@plt>
    6470:	cbz	w27, 677c <mpc_asin@@Base+0x680>
    6474:	ldr	x8, [sp, #80]
    6478:	ldr	x9, [sp, #24]
    647c:	mov	w2, #0x4                   	// #4
    6480:	mov	w3, #0x1                   	// #1
    6484:	sub	x1, x8, #0x1
    6488:	ldr	x9, [x9, #32]
    648c:	ldr	x8, [sp, #8]
    6490:	mov	x0, x23
    6494:	add	x4, x9, x8
    6498:	bl	5450 <mpfr_can_round@plt>
    649c:	cbnz	w0, 6640 <mpc_asin@@Base+0x544>
    64a0:	add	x0, sp, #0x30
    64a4:	mov	x1, x20
    64a8:	mov	w2, wzr
    64ac:	add	w28, w28, #0x1
    64b0:	bl	4f30 <mpc_sqr@plt>
    64b4:	ldr	x21, [sp, #64]
    64b8:	add	x0, sp, #0x30
    64bc:	add	x2, sp, #0x30
    64c0:	mov	w1, #0x1                   	// #1
    64c4:	mov	w3, wzr
    64c8:	bl	5430 <mpfr_ui_sub@plt>
    64cc:	mov	x0, x23
    64d0:	mov	x1, x23
    64d4:	mov	w2, wzr
    64d8:	bl	4b80 <mpfr_neg@plt>
    64dc:	ldr	x8, [sp, #64]
    64e0:	ldr	x9, [sp, #96]
    64e4:	mvn	x10, x24
    64e8:	add	x0, sp, #0x30
    64ec:	cmp	x21, x8
    64f0:	csel	x11, x21, x8, gt
    64f4:	add	x10, x9, x10
    64f8:	sub	x11, x11, x24
    64fc:	cmp	x11, x10
    6500:	csel	x25, x10, x11, lt  // lt = tstop
    6504:	cmp	x8, x9
    6508:	add	x1, sp, #0x30
    650c:	mov	w2, wzr
    6510:	csel	x19, x9, x8, lt  // lt = tstop
    6514:	bl	4b40 <mpc_sqrt@plt>
    6518:	mov	w8, #0x1                   	// #1
    651c:	ldr	x27, [sp, #64]
    6520:	ldr	x21, [sp, #96]
    6524:	bfi	x8, x25, #1, #63
    6528:	sub	x8, x8, x19
    652c:	cmp	x8, #0x0
    6530:	cinc	x8, x8, lt  // lt = tstop
    6534:	cmp	x27, x21
    6538:	asr	x8, x8, #1
    653c:	csel	x9, x21, x27, gt
    6540:	sub	x8, x8, x9
    6544:	add	x8, x8, x24
    6548:	cmp	x8, #0x1
    654c:	add	x0, sp, #0x30
    6550:	add	x1, sp, #0x30
    6554:	mov	x2, x22
    6558:	mov	w3, wzr
    655c:	csinc	x25, x26, x8, lt  // lt = tstop
    6560:	bl	4a60 <mpfr_sub@plt>
    6564:	mov	x0, x23
    6568:	mov	x1, x23
    656c:	mov	x2, x20
    6570:	mov	w3, wzr
    6574:	bl	4e60 <mpfr_add@plt>
    6578:	add	x0, sp, #0x30
    657c:	bl	51f0 <mpfr_sgn@plt>
    6580:	cbz	w0, 637c <mpc_asin@@Base+0x280>
    6584:	mov	x0, x23
    6588:	bl	51f0 <mpfr_sgn@plt>
    658c:	cbz	w0, 637c <mpc_asin@@Base+0x280>
    6590:	ldr	x8, [sp, #64]
    6594:	ldr	x9, [sp, #96]
    6598:	add	x0, sp, #0x30
    659c:	add	x1, sp, #0x30
    65a0:	sub	x8, x27, x8
    65a4:	sub	x9, x21, x9
    65a8:	cmp	x8, x9
    65ac:	csel	x8, x9, x8, lt  // lt = tstop
    65b0:	add	x8, x8, x25
    65b4:	cmp	x8, #0x1
    65b8:	mov	w2, wzr
    65bc:	csinc	x19, x26, x8, lt  // lt = tstop
    65c0:	bl	4db0 <mpc_log@plt>
    65c4:	ldr	x8, [sp, #64]
    65c8:	ldr	x9, [sp, #96]
    65cc:	add	x0, sp, #0x30
    65d0:	mov	x1, x23
    65d4:	cmp	x8, x9
    65d8:	csel	x8, x9, x8, gt
    65dc:	sub	x8, x19, x8
    65e0:	add	x9, x8, #0x1
    65e4:	add	x8, x8, #0x2
    65e8:	cmp	x9, #0x1
    65ec:	csinc	x19, x8, xzr, ge  // ge = tcont
    65f0:	bl	5090 <mpfr_swap@plt>
    65f4:	mov	x0, x23
    65f8:	mov	x1, x23
    65fc:	mov	w2, wzr
    6600:	bl	4b80 <mpfr_neg@plt>
    6604:	ldr	x4, [sp, #40]
    6608:	sub	x27, x24, x19
    660c:	add	x0, sp, #0x30
    6610:	mov	w3, #0x1                   	// #1
    6614:	mov	x1, x27
    6618:	mov	w2, wzr
    661c:	bl	5450 <mpfr_can_round@plt>
    6620:	cbz	w0, 637c <mpc_asin@@Base+0x280>
    6624:	ldr	x4, [sp, #32]
    6628:	mov	w3, #0x1                   	// #1
    662c:	mov	x0, x23
    6630:	mov	x1, x27
    6634:	mov	w2, wzr
    6638:	bl	5450 <mpfr_can_round@plt>
    663c:	cbz	w0, 637c <mpc_asin@@Base+0x280>
    6640:	ldr	x0, [sp, #24]
    6644:	ldr	w2, [sp, #4]
    6648:	add	x1, sp, #0x30
    664c:	bl	5580 <mpc_set@plt>
    6650:	mov	w19, w0
    6654:	add	x0, sp, #0x30
    6658:	bl	4a10 <mpc_clear@plt>
    665c:	b	6198 <mpc_asin@@Base+0x9c>
    6660:	mov	x1, #0xffffffffffffffff    	// #-1
    6664:	mov	x0, x20
    6668:	mov	x2, xzr
    666c:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    6670:	tbnz	w0, #31, 6750 <mpc_asin@@Base+0x654>
    6674:	mov	w8, #0x1                   	// #1
    6678:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    667c:	str	w8, [x19, #40]
    6680:	str	x9, [x19, #48]
    6684:	tbz	w23, #31, 6698 <mpc_asin@@Base+0x59c>
    6688:	add	x0, x19, #0x20
    668c:	mov	x1, x0
    6690:	mov	w2, wzr
    6694:	bl	4b80 <mpfr_neg@plt>
    6698:	and	w2, w26, #0xf
    669c:	mov	x0, x19
    66a0:	mov	x1, x20
    66a4:	bl	4e40 <mpfr_asin@plt>
    66a8:	cmp	w0, #0x0
    66ac:	cset	w8, ne  // ne = any
    66b0:	mov	w10, #0x2                   	// #2
    66b4:	mov	w9, wzr
    66b8:	csel	w8, w10, w8, lt  // lt = tstop
    66bc:	b	6738 <mpc_asin@@Base+0x63c>
    66c0:	cmp	w2, #0x3
    66c4:	mov	w8, #0x2                   	// #2
    66c8:	csel	w8, w8, w2, eq  // eq = none
    66cc:	cmp	w2, #0x2
    66d0:	mov	w9, #0x3                   	// #3
    66d4:	csel	w2, w9, w8, eq  // eq = none
    66d8:	mov	x1, x20
    66dc:	bl	50e0 <mpfr_acosh@plt>
    66e0:	neg	w22, w0
    66e4:	ldr	w8, [x20, #8]
    66e8:	mov	w9, #0x1                   	// #1
    66ec:	and	w2, w26, #0xf
    66f0:	mov	x0, x19
    66f4:	cmp	w8, #0x0
    66f8:	cneg	w1, w9, lt  // lt = tstop
    66fc:	bl	53f0 <set_pi_over_2@plt>
    6700:	mov	w20, w0
    6704:	tbz	w23, #31, 6718 <mpc_asin@@Base+0x61c>
    6708:	mov	x0, x19
    670c:	mov	x1, x19
    6710:	mov	w2, wzr
    6714:	bl	4f60 <mpc_conj@plt>
    6718:	cmp	w20, #0x0
    671c:	mov	w8, #0x2                   	// #2
    6720:	cset	w9, ne  // ne = any
    6724:	csel	w8, w8, w9, lt  // lt = tstop
    6728:	lsr	w9, w22, #31
    672c:	cbz	w22, 6738 <mpc_asin@@Base+0x63c>
    6730:	mov	w10, #0x4                   	// #4
    6734:	b	673c <mpc_asin@@Base+0x640>
    6738:	mov	w10, wzr
    673c:	cmp	w9, #0x0
    6740:	mov	w9, #0x8                   	// #8
    6744:	csel	w9, w9, w10, ne  // ne = any
    6748:	orr	w19, w9, w8
    674c:	b	6198 <mpc_asin@@Base+0x9c>
    6750:	ldp	q1, q0, [x20]
    6754:	add	x0, sp, #0x30
    6758:	add	x1, sp, #0x30
    675c:	mov	w2, wzr
    6760:	stp	q1, q0, [sp, #48]
    6764:	bl	4b80 <mpfr_neg@plt>
    6768:	add	x0, x19, #0x20
    676c:	asr	w2, w26, #4
    6770:	tbnz	w23, #31, 6790 <mpc_asin@@Base+0x694>
    6774:	add	x1, sp, #0x30
    6778:	b	620c <mpc_asin@@Base+0x110>
    677c:	ldr	w8, [x20, #40]
    6780:	tbnz	w8, #31, 67b0 <mpc_asin@@Base+0x6b4>
    6784:	mov	x0, x23
    6788:	bl	4e00 <mpfr_nextabove@plt>
    678c:	b	6640 <mpc_asin@@Base+0x544>
    6790:	cmp	w2, #0x3
    6794:	mov	w8, #0x2                   	// #2
    6798:	csel	w8, w8, w2, eq  // eq = none
    679c:	cmp	w2, #0x2
    67a0:	mov	w9, #0x3                   	// #3
    67a4:	csel	w2, w9, w8, eq  // eq = none
    67a8:	add	x1, sp, #0x30
    67ac:	b	66dc <mpc_asin@@Base+0x5e0>
    67b0:	mov	x0, x23
    67b4:	bl	4bb0 <mpfr_nextbelow@plt>
    67b8:	b	6640 <mpc_asin@@Base+0x544>

00000000000067bc <mpc_asinh@@Base>:
    67bc:	sub	sp, sp, #0xd0
    67c0:	stp	x29, x30, [sp, #160]
    67c4:	str	x21, [sp, #176]
    67c8:	stp	x20, x19, [sp, #192]
    67cc:	ldp	q1, q0, [x1, #32]
    67d0:	add	x29, sp, #0xa0
    67d4:	mov	w19, w2
    67d8:	mov	x20, x0
    67dc:	stp	q1, q0, [x29, #-64]
    67e0:	ldp	q1, q0, [x1]
    67e4:	sub	x0, x29, #0x40
    67e8:	sub	x1, x29, #0x40
    67ec:	mov	w2, wzr
    67f0:	stp	q1, q0, [x29, #-32]
    67f4:	bl	4b80 <mpfr_neg@plt>
    67f8:	ldr	x1, [x20, #32]
    67fc:	ldr	x2, [x20]
    6800:	add	x0, sp, #0x20
    6804:	add	x21, sp, #0x20
    6808:	bl	53c0 <mpc_init3@plt>
    680c:	asr	w8, w19, #4
    6810:	mov	w9, #0x2                   	// #2
    6814:	cmp	w8, #0x3
    6818:	mov	w10, #0x3                   	// #3
    681c:	csel	w9, w9, w8, eq  // eq = none
    6820:	cmp	w8, #0x2
    6824:	csel	w8, w10, w9, eq  // eq = none
    6828:	ubfiz	w9, w19, #4, #4
    682c:	add	w2, w8, w9
    6830:	add	x0, sp, #0x20
    6834:	sub	x1, x29, #0x40
    6838:	bl	5480 <mpc_asin@plt>
    683c:	ldp	q0, q1, [sp, #32]
    6840:	ldp	q2, q3, [sp, #64]
    6844:	mov	w19, w0
    6848:	add	x0, x21, #0x20
    684c:	mov	x1, x0
    6850:	mov	w2, wzr
    6854:	stp	q0, q1, [sp]
    6858:	stp	q2, q3, [sp, #32]
    685c:	stp	q0, q1, [sp, #64]
    6860:	bl	4b80 <mpfr_neg@plt>
    6864:	add	x1, sp, #0x20
    6868:	mov	x0, x20
    686c:	mov	w2, wzr
    6870:	bl	5580 <mpc_set@plt>
    6874:	add	x0, sp, #0x20
    6878:	bl	4a10 <mpc_clear@plt>
    687c:	asr	w8, w19, #2
    6880:	cmp	w8, #0x0
    6884:	cset	w9, ne  // ne = any
    6888:	cmp	w8, #0x2
    688c:	csel	w8, w8, w9, eq  // eq = none
    6890:	tst	w19, #0x3
    6894:	cset	w9, ne  // ne = any
    6898:	tst	w19, #0x1
    689c:	ldp	x20, x19, [sp, #192]
    68a0:	ldr	x21, [sp, #176]
    68a4:	ldp	x29, x30, [sp, #160]
    68a8:	lsl	w9, w9, #2
    68ac:	mov	w10, #0x8                   	// #8
    68b0:	csel	w9, w9, w10, eq  // eq = none
    68b4:	orr	w0, w8, w9
    68b8:	add	sp, sp, #0xd0
    68bc:	ret

00000000000068c0 <set_pi_over_2@@Base>:
    68c0:	stp	x29, x30, [sp, #-48]!
    68c4:	stp	x20, x19, [sp, #32]
    68c8:	mov	w20, w1
    68cc:	mov	x19, x0
    68d0:	str	x21, [sp, #16]
    68d4:	mov	x29, sp
    68d8:	tbz	w1, #31, 68f8 <set_pi_over_2@@Base+0x38>
    68dc:	cmp	w2, #0x2
    68e0:	b.ne	68ec <set_pi_over_2@@Base+0x2c>  // b.any
    68e4:	mov	w2, #0x3                   	// #3
    68e8:	b	68f8 <set_pi_over_2@@Base+0x38>
    68ec:	cmp	w2, #0x3
    68f0:	mov	w8, #0x2                   	// #2
    68f4:	csel	w2, w8, w2, eq  // eq = none
    68f8:	mov	x0, x19
    68fc:	mov	w1, w2
    6900:	bl	4a80 <mpfr_const_pi@plt>
    6904:	mov	w21, w0
    6908:	mov	w2, #0x1                   	// #1
    690c:	mov	x0, x19
    6910:	mov	x1, x19
    6914:	mov	w3, wzr
    6918:	bl	5320 <mpfr_div_2ui@plt>
    691c:	tbz	w20, #31, 6934 <set_pi_over_2@@Base+0x74>
    6920:	mov	x0, x19
    6924:	mov	x1, x19
    6928:	mov	w2, wzr
    692c:	neg	w21, w21
    6930:	bl	4b80 <mpfr_neg@plt>
    6934:	mov	w0, w21
    6938:	ldp	x20, x19, [sp, #32]
    693c:	ldr	x21, [sp, #16]
    6940:	ldp	x29, x30, [sp], #48
    6944:	ret

0000000000006948 <mpc_atan@@Base>:
    6948:	sub	sp, sp, #0x130
    694c:	stp	x29, x30, [sp, #208]
    6950:	stp	x28, x27, [sp, #224]
    6954:	stp	x26, x25, [sp, #240]
    6958:	stp	x24, x23, [sp, #256]
    695c:	stp	x22, x21, [sp, #272]
    6960:	stp	x20, x19, [sp, #288]
    6964:	ldr	x8, [x1, #16]
    6968:	ldr	w24, [x1, #40]
    696c:	mov	x27, #0x2                   	// #2
    6970:	movk	x27, #0x8000, lsl #48
    6974:	mov	x22, x1
    6978:	cmp	x8, x27
    697c:	mov	x19, x0
    6980:	add	x29, sp, #0xd0
    6984:	b.ne	69cc <mpc_atan@@Base+0x84>  // b.any
    6988:	mov	x0, x19
    698c:	bl	4a40 <mpfr_set_nan@plt>
    6990:	ldr	x8, [x22, #48]
    6994:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    6998:	orr	x8, x8, #0x2
    699c:	cmp	x8, x9
    69a0:	b.ne	6abc <mpc_atan@@Base+0x174>  // b.any
    69a4:	mov	w8, #0x1                   	// #1
    69a8:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    69ac:	str	w8, [x19, #40]
    69b0:	str	x9, [x19, #48]
    69b4:	tbz	w24, #31, 6ac4 <mpc_atan@@Base+0x17c>
    69b8:	mov	x0, x19
    69bc:	mov	x1, x19
    69c0:	mov	w2, wzr
    69c4:	bl	4f60 <mpc_conj@plt>
    69c8:	b	6ac4 <mpc_atan@@Base+0x17c>
    69cc:	ldr	x9, [x22, #48]
    69d0:	ldr	w28, [x22, #8]
    69d4:	mov	w25, w2
    69d8:	cmp	x9, x27
    69dc:	b.ne	6a20 <mpc_atan@@Base+0xd8>  // b.any
    69e0:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    69e4:	cmp	x8, x9
    69e8:	b.ne	6ab4 <mpc_atan@@Base+0x16c>  // b.any
    69ec:	asr	w1, w28, #31
    69f0:	and	w2, w25, #0xf
    69f4:	mov	x0, x19
    69f8:	bl	53f0 <set_pi_over_2@plt>
    69fc:	mov	w8, #0x1                   	// #1
    6a00:	cmp	w0, #0x0
    6a04:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    6a08:	str	w8, [x19, #40]
    6a0c:	cset	w8, ne  // ne = any
    6a10:	mov	w10, #0x2                   	// #2
    6a14:	csel	w0, w10, w8, lt  // lt = tstop
    6a18:	str	x9, [x19, #48]
    6a1c:	b	6acc <mpc_atan@@Base+0x184>
    6a20:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    6a24:	cmp	x8, x10
    6a28:	b.eq	6a68 <mpc_atan@@Base+0x120>  // b.none
    6a2c:	cmp	x9, x10
    6a30:	b.eq	6a68 <mpc_atan@@Base+0x120>  // b.none
    6a34:	mov	x21, #0x8000000000000001    	// #-9223372036854775807
    6a38:	cmp	x9, x21
    6a3c:	b.ne	6aec <mpc_atan@@Base+0x1a4>  // b.any
    6a40:	and	w2, w25, #0xf
    6a44:	mov	x0, x19
    6a48:	mov	x1, x22
    6a4c:	bl	51b0 <mpfr_atan@plt>
    6a50:	mov	w20, w0
    6a54:	mov	w8, #0x1                   	// #1
    6a58:	str	w8, [x19, #40]
    6a5c:	str	x21, [x19, #48]
    6a60:	tbz	w24, #31, 6aa0 <mpc_atan@@Base+0x158>
    6a64:	b	6a90 <mpc_atan@@Base+0x148>
    6a68:	asr	w1, w28, #31
    6a6c:	and	w2, w25, #0xf
    6a70:	mov	x0, x19
    6a74:	bl	53f0 <set_pi_over_2@plt>
    6a78:	mov	w20, w0
    6a7c:	mov	w8, #0x1                   	// #1
    6a80:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    6a84:	str	w8, [x19, #40]
    6a88:	str	x9, [x19, #48]
    6a8c:	tbz	w24, #31, 6aa0 <mpc_atan@@Base+0x158>
    6a90:	mov	x0, x19
    6a94:	mov	x1, x19
    6a98:	mov	w2, wzr
    6a9c:	bl	4f60 <mpc_conj@plt>
    6aa0:	cmp	w20, #0x0
    6aa4:	cset	w8, ne  // ne = any
    6aa8:	mov	w9, #0x2                   	// #2
    6aac:	csel	w19, w9, w8, lt  // lt = tstop
    6ab0:	b	6ac8 <mpc_atan@@Base+0x180>
    6ab4:	mov	x0, x19
    6ab8:	bl	4a40 <mpfr_set_nan@plt>
    6abc:	add	x0, x19, #0x20
    6ac0:	bl	4a40 <mpfr_set_nan@plt>
    6ac4:	mov	w19, wzr
    6ac8:	mov	w0, w19
    6acc:	ldp	x20, x19, [sp, #288]
    6ad0:	ldp	x22, x21, [sp, #272]
    6ad4:	ldp	x24, x23, [sp, #256]
    6ad8:	ldp	x26, x25, [sp, #240]
    6adc:	ldp	x28, x27, [sp, #224]
    6ae0:	ldp	x29, x30, [sp, #208]
    6ae4:	add	sp, sp, #0x130
    6ae8:	ret
    6aec:	cmp	x8, x21
    6af0:	add	x21, x22, #0x20
    6af4:	b.ne	6b10 <mpc_atan@@Base+0x1c8>  // b.any
    6af8:	tbnz	w24, #31, 6f20 <mpc_atan@@Base+0x5d8>
    6afc:	mov	w1, #0x1                   	// #1
    6b00:	mov	x0, x21
    6b04:	mov	x2, xzr
    6b08:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    6b0c:	b	6f34 <mpc_atan@@Base+0x5ec>
    6b10:	sub	x1, x29, #0x28
    6b14:	sub	x2, x29, #0x48
    6b18:	add	x3, sp, #0x68
    6b1c:	add	x4, sp, #0x48
    6b20:	mov	w0, #0x1                   	// #1
    6b24:	mov	x5, xzr
    6b28:	bl	5540 <mpfr_inits2@plt>
    6b2c:	ldp	q1, q0, [x22]
    6b30:	add	x0, sp, #0x20
    6b34:	add	x1, sp, #0x20
    6b38:	mov	w2, wzr
    6b3c:	stp	q1, q0, [sp, #32]
    6b40:	bl	4b80 <mpfr_neg@plt>
    6b44:	ldr	x8, [x22, #48]
    6b48:	ldr	x20, [x19]
    6b4c:	ldr	x26, [x22, #16]
    6b50:	mov	x9, #0x2                   	// #2
    6b54:	neg	x10, x8
    6b58:	cmp	x20, x10
    6b5c:	ccmp	x8, #0x0, #0x0, le
    6b60:	movk	x9, #0x8000, lsl #48
    6b64:	csel	x8, xzr, x8, gt
    6b68:	cmp	x26, x9
    6b6c:	sub	x23, x20, x8
    6b70:	b.gt	6bb4 <mpc_atan@@Base+0x26c>
    6b74:	cmp	x26, x27
    6b78:	b.ne	6ba0 <mpc_atan@@Base+0x258>  // b.any
    6b7c:	bl	4b00 <mpfr_set_erangeflag@plt>
    6b80:	ldr	x8, [x22, #16]
    6b84:	mov	x9, #0x2                   	// #2
    6b88:	movk	x9, #0x8000, lsl #48
    6b8c:	cmp	x8, x9
    6b90:	b.gt	715c <mpc_atan@@Base+0x814>
    6b94:	cmp	x8, x27
    6b98:	b.ne	6ba0 <mpc_atan@@Base+0x258>  // b.any
    6b9c:	bl	4b00 <mpfr_set_erangeflag@plt>
    6ba0:	mov	w8, #0x3                   	// #3
    6ba4:	str	w8, [sp, #16]
    6ba8:	mov	w8, #0x2                   	// #2
    6bac:	str	w8, [sp, #28]
    6bb0:	b	6bdc <mpc_atan@@Base+0x294>
    6bb4:	ldr	w8, [x22, #8]
    6bb8:	cmp	w8, #0x0
    6bbc:	mov	w8, #0x2                   	// #2
    6bc0:	cinc	w8, w8, gt
    6bc4:	str	w8, [sp, #28]
    6bc8:	ldr	w8, [x22, #8]
    6bcc:	cmp	w8, #0x0
    6bd0:	mov	w8, #0x2                   	// #2
    6bd4:	cinc	w8, w8, ge  // ge = tcont
    6bd8:	str	w8, [sp, #16]
    6bdc:	tst	w25, #0xf
    6be0:	add	x28, x26, #0x5
    6be4:	cinc	x26, x20, eq  // eq = none
    6be8:	mov	x20, #0x2                   	// #2
    6bec:	movk	x20, #0x8000, lsl #48
    6bf0:	str	w25, [sp, #12]
    6bf4:	mov	x0, x23
    6bf8:	bl	4d20 <mpc_ceil_log2@plt>
    6bfc:	add	x8, x23, x0
    6c00:	add	x23, x8, #0x2
    6c04:	sub	x0, x29, #0x28
    6c08:	mov	x1, x23
    6c0c:	bl	4c80 <mpfr_set_prec@plt>
    6c10:	sub	x0, x29, #0x48
    6c14:	mov	x1, x23
    6c18:	bl	4c80 <mpfr_set_prec@plt>
    6c1c:	add	x0, sp, #0x68
    6c20:	mov	x1, x23
    6c24:	bl	4c80 <mpfr_set_prec@plt>
    6c28:	ldr	w3, [sp, #28]
    6c2c:	sub	x0, x29, #0x28
    6c30:	mov	w1, #0x1                   	// #1
    6c34:	mov	x2, x21
    6c38:	bl	5430 <mpfr_ui_sub@plt>
    6c3c:	ldur	x25, [x29, #-24]
    6c40:	cmp	x25, x20
    6c44:	b.gt	6c58 <mpc_atan@@Base+0x310>
    6c48:	cmp	x25, x27
    6c4c:	b.ne	6c60 <mpc_atan@@Base+0x318>  // b.any
    6c50:	bl	4b00 <mpfr_set_erangeflag@plt>
    6c54:	b	6c60 <mpc_atan@@Base+0x318>
    6c58:	ldur	w8, [x29, #-32]
    6c5c:	cbnz	w8, 6c78 <mpc_atan@@Base+0x330>
    6c60:	mov	w1, #0x1                   	// #1
    6c64:	mov	x0, x21
    6c68:	mov	x2, xzr
    6c6c:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    6c70:	cbnz	w0, 7164 <mpc_atan@@Base+0x81c>
    6c74:	mov	w25, #0x2                   	// #2
    6c78:	add	x0, sp, #0x68
    6c7c:	sub	x2, x29, #0x28
    6c80:	mov	w3, #0x2                   	// #2
    6c84:	mov	x1, x22
    6c88:	bl	4ca0 <mpfr_atan2@plt>
    6c8c:	ldr	w3, [sp, #16]
    6c90:	sub	x0, x29, #0x28
    6c94:	mov	w2, #0x1                   	// #1
    6c98:	mov	x1, x21
    6c9c:	bl	4ee0 <mpfr_add_ui@plt>
    6ca0:	ldur	x24, [x29, #-24]
    6ca4:	cmp	x24, x20
    6ca8:	b.gt	6cbc <mpc_atan@@Base+0x374>
    6cac:	cmp	x24, x27
    6cb0:	b.ne	6cc4 <mpc_atan@@Base+0x37c>  // b.any
    6cb4:	bl	4b00 <mpfr_set_erangeflag@plt>
    6cb8:	b	6cc4 <mpc_atan@@Base+0x37c>
    6cbc:	ldur	w8, [x29, #-32]
    6cc0:	cbnz	w8, 6cdc <mpc_atan@@Base+0x394>
    6cc4:	mov	x1, #0xffffffffffffffff    	// #-1
    6cc8:	mov	x0, x21
    6ccc:	mov	x2, xzr
    6cd0:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    6cd4:	mov	x24, x25
    6cd8:	cbnz	w0, 7190 <mpc_atan@@Base+0x848>
    6cdc:	sub	x0, x29, #0x48
    6ce0:	add	x1, sp, #0x20
    6ce4:	sub	x2, x29, #0x28
    6ce8:	mov	w3, #0x3                   	// #3
    6cec:	bl	4ca0 <mpfr_atan2@plt>
    6cf0:	cmp	x25, x24
    6cf4:	add	x0, sp, #0x68
    6cf8:	add	x1, sp, #0x68
    6cfc:	sub	x2, x29, #0x48
    6d00:	mov	w3, #0x2                   	// #2
    6d04:	csel	x24, x25, x24, lt  // lt = tstop
    6d08:	bl	4a60 <mpfr_sub@plt>
    6d0c:	ldr	x8, [sp, #120]
    6d10:	sub	x9, x28, x24
    6d14:	add	x0, sp, #0x68
    6d18:	add	x1, sp, #0x68
    6d1c:	sub	x8, x9, x8
    6d20:	cmp	x8, #0x0
    6d24:	mov	w9, #0x1                   	// #1
    6d28:	mov	w2, #0x1                   	// #1
    6d2c:	mov	w3, #0x2                   	// #2
    6d30:	csinc	x24, x9, x8, lt  // lt = tstop
    6d34:	bl	5320 <mpfr_div_2ui@plt>
    6d38:	sub	x1, x23, x24
    6d3c:	add	x0, sp, #0x68
    6d40:	mov	w2, #0x2                   	// #2
    6d44:	mov	w3, #0x3                   	// #3
    6d48:	mov	x4, x26
    6d4c:	bl	5450 <mpfr_can_round@plt>
    6d50:	cbz	w0, 6bf4 <mpc_atan@@Base+0x2ac>
    6d54:	ldr	w8, [sp, #12]
    6d58:	ldr	x23, [x19, #32]
    6d5c:	mov	w20, #0x2                   	// #2
    6d60:	mov	x25, #0x8000000000000001    	// #-9223372036854775807
    6d64:	cmp	w8, #0x10
    6d68:	cinc	x24, x23, cc  // cc = lo, ul, last
    6d6c:	mov	w26, #0x5                   	// #5
    6d70:	mov	x0, x23
    6d74:	bl	4d20 <mpc_ceil_log2@plt>
    6d78:	add	x8, x20, x23
    6d7c:	add	x23, x8, x0
    6d80:	sub	x0, x29, #0x28
    6d84:	mov	x1, x23
    6d88:	bl	4c80 <mpfr_set_prec@plt>
    6d8c:	sub	x0, x29, #0x48
    6d90:	mov	x1, x23
    6d94:	bl	4c80 <mpfr_set_prec@plt>
    6d98:	add	x0, sp, #0x48
    6d9c:	mov	x1, x23
    6da0:	bl	4c80 <mpfr_set_prec@plt>
    6da4:	sub	x0, x29, #0x28
    6da8:	mov	w2, #0x1                   	// #1
    6dac:	mov	w3, #0x4                   	// #4
    6db0:	mov	x1, x21
    6db4:	bl	4ee0 <mpfr_add_ui@plt>
    6db8:	sub	x0, x29, #0x28
    6dbc:	sub	x1, x29, #0x28
    6dc0:	mov	w2, #0x2                   	// #2
    6dc4:	bl	5010 <mpfr_sqr@plt>
    6dc8:	add	x0, sp, #0x48
    6dcc:	mov	w2, #0x2                   	// #2
    6dd0:	mov	x1, x22
    6dd4:	bl	5010 <mpfr_sqr@plt>
    6dd8:	sub	x0, x29, #0x28
    6ddc:	sub	x1, x29, #0x28
    6de0:	add	x2, sp, #0x48
    6de4:	mov	w3, #0x2                   	// #2
    6de8:	bl	4e60 <mpfr_add@plt>
    6dec:	sub	x0, x29, #0x28
    6df0:	sub	x1, x29, #0x28
    6df4:	mov	w2, #0x2                   	// #2
    6df8:	bl	4d80 <mpfr_log@plt>
    6dfc:	sub	x0, x29, #0x48
    6e00:	mov	w1, #0x1                   	// #1
    6e04:	mov	w3, #0x1                   	// #1
    6e08:	mov	x2, x21
    6e0c:	bl	5430 <mpfr_ui_sub@plt>
    6e10:	sub	x0, x29, #0x48
    6e14:	sub	x1, x29, #0x48
    6e18:	mov	w2, #0x1                   	// #1
    6e1c:	bl	5010 <mpfr_sqr@plt>
    6e20:	add	x0, sp, #0x48
    6e24:	bl	4bb0 <mpfr_nextbelow@plt>
    6e28:	sub	x0, x29, #0x48
    6e2c:	sub	x1, x29, #0x48
    6e30:	add	x2, sp, #0x48
    6e34:	mov	w3, #0x1                   	// #1
    6e38:	bl	4e60 <mpfr_add@plt>
    6e3c:	sub	x0, x29, #0x48
    6e40:	sub	x1, x29, #0x48
    6e44:	mov	w2, #0x1                   	// #1
    6e48:	bl	4d80 <mpfr_log@plt>
    6e4c:	add	x0, sp, #0x48
    6e50:	sub	x1, x29, #0x28
    6e54:	sub	x2, x29, #0x48
    6e58:	mov	w3, #0x2                   	// #2
    6e5c:	bl	4a60 <mpfr_sub@plt>
    6e60:	ldr	x8, [sp, #88]
    6e64:	cmp	x8, x25
    6e68:	b.ne	6e78 <mpc_atan@@Base+0x530>  // b.any
    6e6c:	mov	w0, wzr
    6e70:	cbz	w0, 6d70 <mpc_atan@@Base+0x428>
    6e74:	b	6eec <mpc_atan@@Base+0x5a4>
    6e78:	ldur	x9, [x29, #-24]
    6e7c:	ldur	x10, [x29, #-56]
    6e80:	cmp	x9, x10
    6e84:	csel	x9, x9, x10, gt
    6e88:	cmp	x9, #0x2
    6e8c:	b.gt	6ea0 <mpc_atan@@Base+0x558>
    6e90:	sub	x9, x26, x8
    6e94:	cmp	x8, #0x3
    6e98:	csinc	x20, x9, xzr, le
    6e9c:	b	6eb0 <mpc_atan@@Base+0x568>
    6ea0:	sub	x8, x9, x8
    6ea4:	add	x9, x8, #0x3
    6ea8:	cmn	x8, #0x1
    6eac:	csinc	x20, x9, xzr, ge  // ge = tcont
    6eb0:	add	x0, sp, #0x48
    6eb4:	add	x1, sp, #0x48
    6eb8:	mov	w2, #0x2                   	// #2
    6ebc:	mov	w3, wzr
    6ec0:	bl	5320 <mpfr_div_2ui@plt>
    6ec4:	ldr	x8, [sp, #88]
    6ec8:	cmp	x8, x25
    6ecc:	b.eq	71bc <mpc_atan@@Base+0x874>  // b.none
    6ed0:	sub	x1, x23, x20
    6ed4:	add	x0, sp, #0x48
    6ed8:	mov	w2, #0x2                   	// #2
    6edc:	mov	w3, #0x3                   	// #3
    6ee0:	mov	x4, x24
    6ee4:	bl	5450 <mpfr_can_round@plt>
    6ee8:	cbz	w0, 6d70 <mpc_atan@@Base+0x428>
    6eec:	ldr	w3, [sp, #12]
    6ef0:	add	x1, sp, #0x68
    6ef4:	add	x2, sp, #0x48
    6ef8:	mov	x0, x19
    6efc:	bl	54f0 <mpc_set_fr_fr@plt>
    6f00:	mov	w19, w0
    6f04:	sub	x0, x29, #0x28
    6f08:	sub	x1, x29, #0x48
    6f0c:	add	x2, sp, #0x68
    6f10:	add	x3, sp, #0x48
    6f14:	mov	x4, xzr
    6f18:	bl	4e70 <mpfr_clears@plt>
    6f1c:	b	6ac8 <mpc_atan@@Base+0x180>
    6f20:	mov	x1, #0xffffffffffffffff    	// #-1
    6f24:	mov	x0, x21
    6f28:	mov	x2, xzr
    6f2c:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    6f30:	neg	w0, w0
    6f34:	tbnz	w0, #31, 70cc <mpc_atan@@Base+0x784>
    6f38:	cbz	w0, 7118 <mpc_atan@@Base+0x7d0>
    6f3c:	sub	x0, x29, #0x28
    6f40:	str	w25, [sp, #12]
    6f44:	asr	w20, w25, #4
    6f48:	bl	4aa0 <mpfr_init@plt>
    6f4c:	sub	x0, x29, #0x48
    6f50:	bl	4aa0 <mpfr_init@plt>
    6f54:	mov	x8, x19
    6f58:	cmp	w24, #0x0
    6f5c:	ldr	x24, [x8, #32]!
    6f60:	str	w20, [sp, #28]
    6f64:	str	x8, [sp, #16]
    6f68:	mov	w8, #0x2                   	// #2
    6f6c:	cinc	w25, w8, lt  // lt = tstop
    6f70:	cmp	w20, #0x0
    6f74:	cinc	x26, x24, eq  // eq = none
    6f78:	mov	w20, #0x1                   	// #1
    6f7c:	mov	x0, x24
    6f80:	bl	4d20 <mpc_ceil_log2@plt>
    6f84:	add	x8, x24, x0
    6f88:	add	x24, x8, #0x2
    6f8c:	sub	x0, x29, #0x28
    6f90:	mov	x1, x24
    6f94:	bl	4c80 <mpfr_set_prec@plt>
    6f98:	sub	x0, x29, #0x48
    6f9c:	mov	x1, x24
    6fa0:	bl	4c80 <mpfr_set_prec@plt>
    6fa4:	sub	x0, x29, #0x28
    6fa8:	mov	w1, #0x1                   	// #1
    6fac:	mov	x2, x21
    6fb0:	mov	w3, w25
    6fb4:	bl	4f70 <mpfr_ui_div@plt>
    6fb8:	ldur	x22, [x29, #-24]
    6fbc:	mov	w27, w0
    6fc0:	sub	x0, x29, #0x48
    6fc4:	sub	x1, x29, #0x28
    6fc8:	mov	w2, #0x2                   	// #2
    6fcc:	bl	5010 <mpfr_sqr@plt>
    6fd0:	sub	x0, x29, #0x48
    6fd4:	mov	w1, #0x1                   	// #1
    6fd8:	mov	x2, xzr
    6fdc:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    6fe0:	cmp	w0, #0x1
    6fe4:	b.ge	71e8 <mpc_atan@@Base+0x8a0>  // b.tcont
    6fe8:	sub	x0, x29, #0x48
    6fec:	mov	w1, #0x1                   	// #1
    6ff0:	mov	x2, xzr
    6ff4:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    6ff8:	cbz	w0, 7070 <mpc_atan@@Base+0x728>
    6ffc:	sub	x0, x29, #0x48
    7000:	sub	x2, x29, #0x48
    7004:	mov	w1, #0x1                   	// #1
    7008:	mov	w3, #0x1                   	// #1
    700c:	mov	w23, #0x1                   	// #1
    7010:	bl	5430 <mpfr_ui_sub@plt>
    7014:	sub	x0, x29, #0x28
    7018:	sub	x1, x29, #0x28
    701c:	mov	w2, w25
    7020:	bl	4d90 <mpfr_atanh@plt>
    7024:	orr	w8, w0, w27
    7028:	cbz	w8, 7068 <mpc_atan@@Base+0x720>
    702c:	ldur	x8, [x29, #-24]
    7030:	ldur	x9, [x29, #-56]
    7034:	sub	x0, x29, #0x28
    7038:	mov	w3, #0x1                   	// #1
    703c:	sub	x8, x22, x8
    7040:	sub	x8, x8, x9
    7044:	add	x8, x8, #0x1
    7048:	cmp	x8, #0x0
    704c:	csinc	x8, x20, x8, lt  // lt = tstop
    7050:	sub	x1, x24, x8
    7054:	mov	w2, w25
    7058:	mov	x4, x26
    705c:	bl	5450 <mpfr_can_round@plt>
    7060:	cmp	w0, #0x0
    7064:	cset	w23, ne  // ne = any
    7068:	cbz	w23, 6f7c <mpc_atan@@Base+0x634>
    706c:	b	7078 <mpc_atan@@Base+0x730>
    7070:	mov	w23, wzr
    7074:	cbz	w23, 6f7c <mpc_atan@@Base+0x634>
    7078:	ldr	w8, [sp, #12]
    707c:	asr	w1, w28, #31
    7080:	mov	x0, x19
    7084:	and	w2, w8, #0xf
    7088:	bl	53f0 <set_pi_over_2@plt>
    708c:	ldur	w3, [x29, #-32]
    7090:	mov	w20, w0
    7094:	ldr	x0, [sp, #16]
    7098:	ldr	w2, [sp, #28]
    709c:	sub	x1, x29, #0x28
    70a0:	bl	51d0 <mpfr_set4@plt>
    70a4:	mov	w19, w0
    70a8:	sub	x0, x29, #0x28
    70ac:	bl	4d60 <mpfr_clear@plt>
    70b0:	sub	x0, x29, #0x48
    70b4:	bl	4d60 <mpfr_clear@plt>
    70b8:	cmp	w20, #0x0
    70bc:	cset	w8, ne  // ne = any
    70c0:	mov	w9, #0x2                   	// #2
    70c4:	csel	w8, w9, w8, lt  // lt = tstop
    70c8:	b	7108 <mpc_atan@@Base+0x7c0>
    70cc:	mov	w8, #0x1                   	// #1
    70d0:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    70d4:	str	w8, [x19, #8]
    70d8:	str	x9, [x19, #16]
    70dc:	tbz	w28, #31, 70f0 <mpc_atan@@Base+0x7a8>
    70e0:	mov	x0, x19
    70e4:	mov	x1, x19
    70e8:	mov	w2, wzr
    70ec:	bl	4b80 <mpfr_neg@plt>
    70f0:	add	x0, x19, #0x20
    70f4:	asr	w2, w25, #4
    70f8:	mov	x1, x21
    70fc:	bl	4d90 <mpfr_atanh@plt>
    7100:	mov	w19, w0
    7104:	mov	w8, wzr
    7108:	lsr	w9, w19, #31
    710c:	cbz	w19, 7144 <mpc_atan@@Base+0x7fc>
    7110:	mov	w10, #0x4                   	// #4
    7114:	b	7148 <mpc_atan@@Base+0x800>
    7118:	cmp	w28, #0x0
    711c:	mov	w20, #0xffffffff            	// #-1
    7120:	cneg	w1, w20, ge  // ge = tcont
    7124:	mov	x0, x19
    7128:	bl	4d10 <mpfr_set_zero@plt>
    712c:	cmp	w24, #0x0
    7130:	add	x0, x19, #0x20
    7134:	cneg	w1, w20, ge  // ge = tcont
    7138:	bl	5120 <mpfr_set_inf@plt>
    713c:	mov	w9, wzr
    7140:	mov	w8, wzr
    7144:	mov	w10, wzr
    7148:	cmp	w9, #0x0
    714c:	mov	w9, #0x8                   	// #8
    7150:	csel	w9, w9, w10, ne  // ne = any
    7154:	orr	w19, w9, w8
    7158:	b	6ac8 <mpc_atan@@Base+0x180>
    715c:	mov	w8, #0x2                   	// #2
    7160:	b	6bc4 <mpc_atan@@Base+0x27c>
    7164:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    7168:	ldr	x8, [x8, #4008]
    716c:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    7170:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    7174:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    7178:	ldr	x0, [x8]
    717c:	add	x1, x1, #0x3b0
    7180:	add	x2, x2, #0x414
    7184:	add	x4, x4, #0x433
    7188:	mov	w3, #0x113                 	// #275
    718c:	b	7210 <mpc_atan@@Base+0x8c8>
    7190:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    7194:	ldr	x8, [x8, #4008]
    7198:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    719c:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    71a0:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    71a4:	ldr	x0, [x8]
    71a8:	add	x1, x1, #0x3b0
    71ac:	add	x2, x2, #0x414
    71b0:	add	x4, x4, #0x459
    71b4:	mov	w3, #0x122                 	// #290
    71b8:	b	7210 <mpc_atan@@Base+0x8c8>
    71bc:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    71c0:	ldr	x8, [x8, #4008]
    71c4:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    71c8:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    71cc:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    71d0:	ldr	x0, [x8]
    71d4:	add	x1, x1, #0x3b0
    71d8:	add	x2, x2, #0x414
    71dc:	add	x4, x4, #0x480
    71e0:	mov	w3, #0x17b                 	// #379
    71e4:	b	7210 <mpc_atan@@Base+0x8c8>
    71e8:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    71ec:	ldr	x8, [x8, #4008]
    71f0:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    71f4:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    71f8:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    71fc:	ldr	x0, [x8]
    7200:	add	x1, x1, #0x3b0
    7204:	add	x2, x2, #0x414
    7208:	add	x4, x4, #0x41b
    720c:	mov	w3, #0xba                  	// #186
    7210:	bl	55a0 <fprintf@plt>
    7214:	bl	5000 <abort@plt>

0000000000007218 <mpc_atanh@@Base>:
    7218:	sub	sp, sp, #0xd0
    721c:	stp	x29, x30, [sp, #160]
    7220:	stp	x22, x21, [sp, #176]
    7224:	stp	x20, x19, [sp, #192]
    7228:	ldp	q1, q0, [x1, #32]
    722c:	mov	w19, w2
    7230:	mov	x20, x0
    7234:	add	x0, sp, #0x40
    7238:	stp	q1, q0, [sp, #64]
    723c:	ldp	q1, q0, [x1]
    7240:	add	x1, sp, #0x40
    7244:	mov	w2, wzr
    7248:	add	x29, sp, #0xa0
    724c:	stp	q1, q0, [sp, #96]
    7250:	bl	4b80 <mpfr_neg@plt>
    7254:	ldr	x1, [x20, #32]
    7258:	ldr	x2, [x20]
    725c:	mov	x0, sp
    7260:	mov	x22, sp
    7264:	bl	53c0 <mpc_init3@plt>
    7268:	asr	w8, w19, #4
    726c:	mov	w9, #0x2                   	// #2
    7270:	cmp	w8, #0x3
    7274:	mov	w10, #0x3                   	// #3
    7278:	csel	w9, w9, w8, eq  // eq = none
    727c:	cmp	w8, #0x2
    7280:	csel	w8, w10, w9, eq  // eq = none
    7284:	ubfiz	w9, w19, #4, #4
    7288:	add	w2, w8, w9
    728c:	mov	x0, sp
    7290:	add	x1, sp, #0x40
    7294:	bl	5410 <mpc_atan@plt>
    7298:	ldp	q0, q1, [sp]
    729c:	ldp	q2, q3, [sp, #32]
    72a0:	mov	w21, w0
    72a4:	add	x0, x22, #0x20
    72a8:	mov	x1, x0
    72ac:	mov	w2, wzr
    72b0:	stp	q0, q1, [x29, #-32]
    72b4:	stp	q2, q3, [sp]
    72b8:	stp	q0, q1, [sp, #32]
    72bc:	bl	4b80 <mpfr_neg@plt>
    72c0:	mov	x1, sp
    72c4:	mov	x0, x20
    72c8:	mov	w2, w19
    72cc:	bl	5580 <mpc_set@plt>
    72d0:	mov	x0, sp
    72d4:	bl	4a10 <mpc_clear@plt>
    72d8:	asr	w8, w21, #2
    72dc:	cmp	w8, #0x0
    72e0:	cset	w9, ne  // ne = any
    72e4:	cmp	w8, #0x2
    72e8:	csel	w8, w8, w9, eq  // eq = none
    72ec:	tst	w21, #0x3
    72f0:	cset	w9, ne  // ne = any
    72f4:	tst	w21, #0x1
    72f8:	ldp	x20, x19, [sp, #192]
    72fc:	ldp	x22, x21, [sp, #176]
    7300:	ldp	x29, x30, [sp, #160]
    7304:	lsl	w9, w9, #2
    7308:	mov	w10, #0x8                   	// #8
    730c:	csel	w9, w9, w10, eq  // eq = none
    7310:	orr	w0, w8, w9
    7314:	add	sp, sp, #0xd0
    7318:	ret

000000000000731c <mpc_clear@@Base>:
    731c:	stp	x29, x30, [sp, #-32]!
    7320:	str	x19, [sp, #16]
    7324:	mov	x29, sp
    7328:	mov	x19, x0
    732c:	bl	4d60 <mpfr_clear@plt>
    7330:	add	x0, x19, #0x20
    7334:	ldr	x19, [sp, #16]
    7338:	ldp	x29, x30, [sp], #32
    733c:	b	4d60 <mpfr_clear@plt>

0000000000007340 <mpc_cmp@@Base>:
    7340:	stp	x29, x30, [sp, #-48]!
    7344:	mov	w2, #0x1                   	// #1
    7348:	str	x21, [sp, #16]
    734c:	stp	x20, x19, [sp, #32]
    7350:	mov	x29, sp
    7354:	mov	x19, x1
    7358:	mov	x20, x0
    735c:	bl	53a0 <mpfr_cmp3@plt>
    7360:	mov	w21, w0
    7364:	add	x0, x20, #0x20
    7368:	add	x1, x19, #0x20
    736c:	mov	w2, #0x1                   	// #1
    7370:	bl	53a0 <mpfr_cmp3@plt>
    7374:	cmp	w21, #0x0
    7378:	mov	w8, #0x2                   	// #2
    737c:	cset	w9, ne  // ne = any
    7380:	csel	w8, w8, w9, lt  // lt = tstop
    7384:	cmp	w0, #0x0
    7388:	cset	w9, ne  // ne = any
    738c:	ldp	x20, x19, [sp, #32]
    7390:	ldr	x21, [sp, #16]
    7394:	lsl	w9, w9, #2
    7398:	mov	w10, #0x8                   	// #8
    739c:	csel	w9, w10, w9, lt  // lt = tstop
    73a0:	orr	w0, w9, w8
    73a4:	ldp	x29, x30, [sp], #48
    73a8:	ret

00000000000073ac <mpc_cmp_abs@@Base>:
    73ac:	sub	sp, sp, #0xf0
    73b0:	stp	x29, x30, [sp, #192]
    73b4:	stp	x22, x21, [sp, #208]
    73b8:	stp	x20, x19, [sp, #224]
    73bc:	ldr	x10, [x0, #16]
    73c0:	mov	x12, #0x2                   	// #2
    73c4:	movk	x12, #0x8000, lsl #48
    73c8:	add	x29, sp, #0xc0
    73cc:	cmp	x10, x12
    73d0:	b.eq	7400 <mpc_cmp_abs@@Base+0x54>  // b.none
    73d4:	ldr	x11, [x0, #48]
    73d8:	mov	x20, x0
    73dc:	cmp	x11, x12
    73e0:	b.eq	7400 <mpc_cmp_abs@@Base+0x54>  // b.none
    73e4:	ldr	x9, [x1, #16]
    73e8:	mov	x19, x1
    73ec:	cmp	x9, x12
    73f0:	b.eq	7400 <mpc_cmp_abs@@Base+0x54>  // b.none
    73f4:	ldr	x8, [x19, #48]
    73f8:	cmp	x8, x12
    73fc:	b.ne	7444 <mpc_cmp_abs@@Base+0x98>  // b.any
    7400:	sub	x0, x29, #0x40
    7404:	bl	4aa0 <mpfr_init@plt>
    7408:	sub	x0, x29, #0x40
    740c:	bl	4a40 <mpfr_set_nan@plt>
    7410:	sub	x0, x29, #0x40
    7414:	sub	x1, x29, #0x40
    7418:	mov	w2, #0x1                   	// #1
    741c:	bl	53a0 <mpfr_cmp3@plt>
    7420:	mov	w21, w0
    7424:	sub	x0, x29, #0x40
    7428:	bl	4d60 <mpfr_clear@plt>
    742c:	mov	w0, w21
    7430:	ldp	x20, x19, [sp, #224]
    7434:	ldp	x22, x21, [sp, #208]
    7438:	ldp	x29, x30, [sp, #192]
    743c:	add	sp, sp, #0xf0
    7440:	ret
    7444:	mov	x12, #0x8000000000000003    	// #-9223372036854775805
    7448:	cmp	x10, x12
    744c:	b.eq	764c <mpc_cmp_abs@@Base+0x2a0>  // b.none
    7450:	cmp	x11, x12
    7454:	b.eq	764c <mpc_cmp_abs@@Base+0x2a0>  // b.none
    7458:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    745c:	cmp	x9, x10
    7460:	mov	w21, #0xffffffff            	// #-1
    7464:	b.eq	742c <mpc_cmp_abs@@Base+0x80>  // b.none
    7468:	cmp	x8, x10
    746c:	b.eq	742c <mpc_cmp_abs@@Base+0x80>  // b.none
    7470:	ldp	q1, q0, [x20, #32]
    7474:	ldp	q3, q2, [x20]
    7478:	stp	q1, q0, [x29, #-32]
    747c:	stp	q3, q2, [x29, #-64]
    7480:	ldp	q1, q0, [x19, #32]
    7484:	ldp	q3, q2, [x19]
    7488:	stp	q1, q0, [sp, #96]
    748c:	stp	q3, q2, [sp, #64]
    7490:	ldr	w8, [x20, #8]
    7494:	tbz	w8, #31, 74a8 <mpc_cmp_abs@@Base+0xfc>
    7498:	sub	x0, x29, #0x40
    749c:	sub	x1, x29, #0x40
    74a0:	mov	w2, wzr
    74a4:	bl	4b80 <mpfr_neg@plt>
    74a8:	ldr	w8, [x20, #40]
    74ac:	tbz	w8, #31, 74c4 <mpc_cmp_abs@@Base+0x118>
    74b0:	sub	x8, x29, #0x40
    74b4:	add	x0, x8, #0x20
    74b8:	mov	x1, x0
    74bc:	mov	w2, wzr
    74c0:	bl	4b80 <mpfr_neg@plt>
    74c4:	ldr	w8, [x19, #8]
    74c8:	tbz	w8, #31, 74dc <mpc_cmp_abs@@Base+0x130>
    74cc:	add	x0, sp, #0x40
    74d0:	add	x1, sp, #0x40
    74d4:	mov	w2, wzr
    74d8:	bl	4b80 <mpfr_neg@plt>
    74dc:	ldr	w8, [x19, #40]
    74e0:	tbz	w8, #31, 74f8 <mpc_cmp_abs@@Base+0x14c>
    74e4:	add	x8, sp, #0x40
    74e8:	add	x0, x8, #0x20
    74ec:	mov	x1, x0
    74f0:	mov	w2, wzr
    74f4:	bl	4b80 <mpfr_neg@plt>
    74f8:	sub	x8, x29, #0x40
    74fc:	add	x19, x8, #0x20
    7500:	sub	x0, x29, #0x40
    7504:	mov	w2, #0x1                   	// #1
    7508:	mov	x1, x19
    750c:	bl	53a0 <mpfr_cmp3@plt>
    7510:	cmp	w0, #0x1
    7514:	b.lt	7524 <mpc_cmp_abs@@Base+0x178>  // b.tstop
    7518:	sub	x0, x29, #0x40
    751c:	mov	x1, x19
    7520:	bl	5090 <mpfr_swap@plt>
    7524:	add	x8, sp, #0x40
    7528:	add	x20, x8, #0x20
    752c:	add	x0, sp, #0x40
    7530:	mov	w2, #0x1                   	// #1
    7534:	mov	x1, x20
    7538:	bl	53a0 <mpfr_cmp3@plt>
    753c:	cmp	w0, #0x1
    7540:	b.lt	7550 <mpc_cmp_abs@@Base+0x1a4>  // b.tstop
    7544:	add	x0, sp, #0x40
    7548:	mov	x1, x20
    754c:	bl	5090 <mpfr_swap@plt>
    7550:	sub	x0, x29, #0x40
    7554:	add	x1, sp, #0x40
    7558:	mov	w2, #0x1                   	// #1
    755c:	bl	53a0 <mpfr_cmp3@plt>
    7560:	mov	w22, w0
    7564:	mov	w2, #0x1                   	// #1
    7568:	mov	x0, x19
    756c:	mov	x1, x20
    7570:	bl	53a0 <mpfr_cmp3@plt>
    7574:	mov	w21, w0
    7578:	cbz	w22, 742c <mpc_cmp_abs@@Base+0x80>
    757c:	cbz	w21, 766c <mpc_cmp_abs@@Base+0x2c0>
    7580:	add	x0, sp, #0x20
    7584:	bl	4aa0 <mpfr_init@plt>
    7588:	mov	x0, sp
    758c:	bl	4aa0 <mpfr_init@plt>
    7590:	ldur	x8, [x29, #-64]
    7594:	ldur	x9, [x29, #-32]
    7598:	ldr	x10, [sp, #64]
    759c:	ldr	x11, [sp, #96]
    75a0:	cmp	x8, x9
    75a4:	csel	x8, x8, x9, gt
    75a8:	cmp	x10, x11
    75ac:	csel	x9, x10, x11, gt
    75b0:	mov	x10, #0xf5c3                	// #62915
    75b4:	movk	x10, #0x5c28, lsl #16
    75b8:	cmp	x8, x9
    75bc:	movk	x10, #0xc28f, lsl #32
    75c0:	csel	x8, x8, x9, gt
    75c4:	mov	w9, #0x1388                	// #5000
    75c8:	movk	x10, #0x28f5, lsl #48
    75cc:	cmp	x8, x9
    75d0:	lsr	x8, x8, #2
    75d4:	umulh	x8, x8, x10
    75d8:	lsr	x8, x8, #2
    75dc:	mov	w9, #0x32                  	// #50
    75e0:	csel	x19, x9, x8, lt  // lt = tstop
    75e4:	add	x0, sp, #0x20
    75e8:	mov	x1, x19
    75ec:	bl	4c80 <mpfr_set_prec@plt>
    75f0:	mov	x0, sp
    75f4:	mov	x1, x19
    75f8:	bl	4c80 <mpfr_set_prec@plt>
    75fc:	add	x0, sp, #0x20
    7600:	sub	x1, x29, #0x40
    7604:	mov	w2, #0x3                   	// #3
    7608:	bl	4ea0 <mpc_norm@plt>
    760c:	mov	w22, w0
    7610:	mov	x0, sp
    7614:	add	x1, sp, #0x40
    7618:	mov	w2, #0x3                   	// #3
    761c:	bl	4ea0 <mpc_norm@plt>
    7620:	mov	w20, w0
    7624:	add	x0, sp, #0x20
    7628:	mov	x1, sp
    762c:	mov	w2, #0x1                   	// #1
    7630:	bl	53a0 <mpfr_cmp3@plt>
    7634:	cbnz	w0, 7684 <mpc_cmp_abs@@Base+0x2d8>
    7638:	cbz	w22, 768c <mpc_cmp_abs@@Base+0x2e0>
    763c:	lsl	x19, x19, #1
    7640:	cbnz	w20, 75e4 <mpc_cmp_abs@@Base+0x238>
    7644:	mov	w21, #0x1                   	// #1
    7648:	b	7694 <mpc_cmp_abs@@Base+0x2e8>
    764c:	cmp	x9, x12
    7650:	b.ne	765c <mpc_cmp_abs@@Base+0x2b0>  // b.any
    7654:	mov	w21, wzr
    7658:	b	742c <mpc_cmp_abs@@Base+0x80>
    765c:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    7660:	cmp	x8, x9
    7664:	cset	w21, ne  // ne = any
    7668:	b	742c <mpc_cmp_abs@@Base+0x80>
    766c:	sub	x0, x29, #0x40
    7670:	add	x1, sp, #0x40
    7674:	mov	w2, #0x1                   	// #1
    7678:	bl	53a0 <mpfr_cmp3@plt>
    767c:	mov	w21, w0
    7680:	b	742c <mpc_cmp_abs@@Base+0x80>
    7684:	mov	w21, w0
    7688:	b	7694 <mpc_cmp_abs@@Base+0x2e8>
    768c:	cmp	w20, #0x0
    7690:	csetm	w21, ne  // ne = any
    7694:	add	x0, sp, #0x20
    7698:	bl	4d60 <mpfr_clear@plt>
    769c:	mov	x0, sp
    76a0:	b	7428 <mpc_cmp_abs@@Base+0x7c>

00000000000076a4 <mpc_cmp_si_si@@Base>:
    76a4:	stp	x29, x30, [sp, #-48]!
    76a8:	stp	x20, x19, [sp, #32]
    76ac:	mov	x19, x2
    76b0:	mov	x2, xzr
    76b4:	str	x21, [sp, #16]
    76b8:	mov	x29, sp
    76bc:	mov	x20, x0
    76c0:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    76c4:	mov	w21, w0
    76c8:	add	x0, x20, #0x20
    76cc:	mov	x1, x19
    76d0:	mov	x2, xzr
    76d4:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    76d8:	cmp	w21, #0x0
    76dc:	mov	w8, #0x2                   	// #2
    76e0:	cset	w9, ne  // ne = any
    76e4:	csel	w8, w8, w9, lt  // lt = tstop
    76e8:	cmp	w0, #0x0
    76ec:	cset	w9, ne  // ne = any
    76f0:	ldp	x20, x19, [sp, #32]
    76f4:	ldr	x21, [sp, #16]
    76f8:	lsl	w9, w9, #2
    76fc:	mov	w10, #0x8                   	// #8
    7700:	csel	w9, w10, w9, lt  // lt = tstop
    7704:	orr	w0, w9, w8
    7708:	ldp	x29, x30, [sp], #48
    770c:	ret

0000000000007710 <mpc_conj@@Base>:
    7710:	stp	x29, x30, [sp, #-48]!
    7714:	stp	x22, x21, [sp, #16]
    7718:	stp	x20, x19, [sp, #32]
    771c:	ldr	w3, [x1, #8]
    7720:	mov	w19, w2
    7724:	and	w2, w2, #0xf
    7728:	mov	x29, sp
    772c:	mov	x20, x1
    7730:	mov	x21, x0
    7734:	bl	51d0 <mpfr_set4@plt>
    7738:	mov	w22, w0
    773c:	add	x0, x21, #0x20
    7740:	add	x1, x20, #0x20
    7744:	asr	w2, w19, #4
    7748:	bl	4b80 <mpfr_neg@plt>
    774c:	cmp	w22, #0x0
    7750:	mov	w8, #0x2                   	// #2
    7754:	cset	w9, ne  // ne = any
    7758:	csel	w8, w8, w9, lt  // lt = tstop
    775c:	cmp	w0, #0x0
    7760:	cset	w9, ne  // ne = any
    7764:	ldp	x20, x19, [sp, #32]
    7768:	ldp	x22, x21, [sp, #16]
    776c:	lsl	w9, w9, #2
    7770:	mov	w10, #0x8                   	// #8
    7774:	csel	w9, w10, w9, lt  // lt = tstop
    7778:	orr	w0, w9, w8
    777c:	ldp	x29, x30, [sp], #48
    7780:	ret

0000000000007784 <mpc_cos@@Base>:
    7784:	stp	x29, x30, [sp, #-16]!
    7788:	mov	w4, w2
    778c:	mov	x2, x1
    7790:	mov	x1, x0
    7794:	mov	x0, xzr
    7798:	mov	w3, wzr
    779c:	mov	x29, sp
    77a0:	bl	5140 <mpc_sin_cos@plt>
    77a4:	asr	w0, w0, #4
    77a8:	ldp	x29, x30, [sp], #16
    77ac:	ret

00000000000077b0 <mpc_cosh@@Base>:
    77b0:	sub	sp, sp, #0x60
    77b4:	stp	x29, x30, [sp, #64]
    77b8:	stp	x20, x19, [sp, #80]
    77bc:	ldp	q1, q0, [x1, #32]
    77c0:	mov	w19, w2
    77c4:	mov	x20, x0
    77c8:	mov	x0, sp
    77cc:	stp	q1, q0, [sp]
    77d0:	ldp	q1, q0, [x1]
    77d4:	mov	x1, sp
    77d8:	mov	w2, wzr
    77dc:	add	x29, sp, #0x40
    77e0:	stp	q1, q0, [sp, #32]
    77e4:	bl	4b80 <mpfr_neg@plt>
    77e8:	mov	x1, sp
    77ec:	mov	x0, x20
    77f0:	mov	w2, w19
    77f4:	bl	53e0 <mpc_cos@plt>
    77f8:	ldp	x20, x19, [sp, #80]
    77fc:	ldp	x29, x30, [sp, #64]
    7800:	add	sp, sp, #0x60
    7804:	ret

0000000000007808 <mpc_div_2si@@Base>:
    7808:	stp	x29, x30, [sp, #-64]!
    780c:	stp	x20, x19, [sp, #48]
    7810:	mov	w19, w3
    7814:	and	w3, w3, #0xf
    7818:	str	x23, [sp, #16]
    781c:	stp	x22, x21, [sp, #32]
    7820:	mov	x29, sp
    7824:	mov	x20, x2
    7828:	mov	x21, x1
    782c:	mov	x22, x0
    7830:	bl	5030 <mpfr_div_2si@plt>
    7834:	mov	w23, w0
    7838:	add	x0, x22, #0x20
    783c:	add	x1, x21, #0x20
    7840:	asr	w3, w19, #4
    7844:	mov	x2, x20
    7848:	bl	5030 <mpfr_div_2si@plt>
    784c:	cmp	w23, #0x0
    7850:	mov	w8, #0x2                   	// #2
    7854:	cset	w9, ne  // ne = any
    7858:	csel	w8, w8, w9, lt  // lt = tstop
    785c:	cmp	w0, #0x0
    7860:	cset	w9, ne  // ne = any
    7864:	ldp	x20, x19, [sp, #48]
    7868:	ldp	x22, x21, [sp, #32]
    786c:	ldr	x23, [sp, #16]
    7870:	lsl	w9, w9, #2
    7874:	mov	w10, #0x8                   	// #8
    7878:	csel	w9, w10, w9, lt  // lt = tstop
    787c:	orr	w0, w9, w8
    7880:	ldp	x29, x30, [sp], #64
    7884:	ret

0000000000007888 <mpc_div_2ui@@Base>:
    7888:	stp	x29, x30, [sp, #-64]!
    788c:	stp	x20, x19, [sp, #48]
    7890:	mov	w19, w3
    7894:	and	w3, w3, #0xf
    7898:	str	x23, [sp, #16]
    789c:	stp	x22, x21, [sp, #32]
    78a0:	mov	x29, sp
    78a4:	mov	x20, x2
    78a8:	mov	x21, x1
    78ac:	mov	x22, x0
    78b0:	bl	5320 <mpfr_div_2ui@plt>
    78b4:	mov	w23, w0
    78b8:	add	x0, x22, #0x20
    78bc:	add	x1, x21, #0x20
    78c0:	asr	w3, w19, #4
    78c4:	mov	x2, x20
    78c8:	bl	5320 <mpfr_div_2ui@plt>
    78cc:	cmp	w23, #0x0
    78d0:	mov	w8, #0x2                   	// #2
    78d4:	cset	w9, ne  // ne = any
    78d8:	csel	w8, w8, w9, lt  // lt = tstop
    78dc:	cmp	w0, #0x0
    78e0:	cset	w9, ne  // ne = any
    78e4:	ldp	x20, x19, [sp, #48]
    78e8:	ldp	x22, x21, [sp, #32]
    78ec:	ldr	x23, [sp, #16]
    78f0:	lsl	w9, w9, #2
    78f4:	mov	w10, #0x8                   	// #8
    78f8:	csel	w9, w10, w9, lt  // lt = tstop
    78fc:	orr	w0, w9, w8
    7900:	ldp	x29, x30, [sp], #64
    7904:	ret

0000000000007908 <mpc_div@@Base>:
    7908:	sub	sp, sp, #0x1e0
    790c:	stp	x29, x30, [sp, #384]
    7910:	stp	x28, x27, [sp, #400]
    7914:	stp	x26, x25, [sp, #416]
    7918:	stp	x24, x23, [sp, #432]
    791c:	stp	x22, x21, [sp, #448]
    7920:	stp	x20, x19, [sp, #464]
    7924:	ldr	x9, [x2, #16]
    7928:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    792c:	mov	w25, w3
    7930:	mov	x20, x2
    7934:	mov	x21, x1
    7938:	mov	x19, x0
    793c:	and	w24, w3, #0xf
    7940:	cmp	x9, x8
    7944:	asr	w23, w3, #4
    7948:	add	x29, sp, #0x180
    794c:	b.ne	79b4 <mpc_div@@Base+0xac>  // b.any
    7950:	ldr	x9, [x20, #48]
    7954:	cmp	x9, x8
    7958:	b.ne	79b4 <mpc_div@@Base+0xac>  // b.any
    795c:	ldr	w8, [x20, #8]
    7960:	add	x0, sp, #0x90
    7964:	mov	w1, #0x1                   	// #1
    7968:	cmp	w8, #0x0
    796c:	mov	w8, #0x1                   	// #1
    7970:	cneg	w20, w8, lt  // lt = tstop
    7974:	bl	5440 <mpfr_init2@plt>
    7978:	add	x0, sp, #0x90
    797c:	mov	w1, w20
    7980:	bl	5120 <mpfr_set_inf@plt>
    7984:	add	x1, sp, #0x90
    7988:	mov	x0, x19
    798c:	mov	x2, x21
    7990:	mov	w3, w24
    7994:	bl	4b70 <mpfr_mul@plt>
    7998:	add	x0, x19, #0x20
    799c:	add	x2, x21, #0x20
    79a0:	add	x1, sp, #0x90
    79a4:	mov	w3, w23
    79a8:	bl	4b70 <mpfr_mul@plt>
    79ac:	add	x0, sp, #0x90
    79b0:	b	7e28 <mpc_div@@Base+0x520>
    79b4:	ldr	x9, [x21, #16]
    79b8:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    79bc:	cmp	x9, x8
    79c0:	b.eq	79d0 <mpc_div@@Base+0xc8>  // b.none
    79c4:	ldr	x9, [x21, #48]
    79c8:	cmp	x9, x8
    79cc:	b.ne	7a10 <mpc_div@@Base+0x108>  // b.any
    79d0:	mov	x0, x20
    79d4:	bl	54d0 <mpfr_number_p@plt>
    79d8:	cbz	w0, 7a10 <mpc_div@@Base+0x108>
    79dc:	add	x22, x20, #0x20
    79e0:	mov	x0, x22
    79e4:	bl	54d0 <mpfr_number_p@plt>
    79e8:	cbz	w0, 7a10 <mpc_div@@Base+0x108>
    79ec:	ldr	x9, [x21, #16]
    79f0:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    79f4:	cmp	x9, x8
    79f8:	b.ne	7c84 <mpc_div@@Base+0x37c>  // b.any
    79fc:	ldr	w9, [x21, #8]
    7a00:	cmp	w9, #0x0
    7a04:	mov	w9, #0x1                   	// #1
    7a08:	cneg	w23, w9, lt  // lt = tstop
    7a0c:	b	7c88 <mpc_div@@Base+0x380>
    7a10:	mov	x0, x21
    7a14:	bl	54d0 <mpfr_number_p@plt>
    7a18:	cbz	w0, 7b28 <mpc_div@@Base+0x220>
    7a1c:	add	x22, x21, #0x20
    7a20:	mov	x0, x22
    7a24:	bl	54d0 <mpfr_number_p@plt>
    7a28:	cbz	w0, 7b28 <mpc_div@@Base+0x220>
    7a2c:	ldr	x8, [x20, #16]
    7a30:	mov	x26, #0x8000000000000003    	// #-9223372036854775805
    7a34:	cmp	x8, x26
    7a38:	b.eq	7a48 <mpc_div@@Base+0x140>  // b.none
    7a3c:	ldr	x8, [x20, #48]
    7a40:	cmp	x8, x26
    7a44:	b.ne	7b28 <mpc_div@@Base+0x220>  // b.any
    7a48:	mov	x24, #0x2                   	// #2
    7a4c:	add	x0, sp, #0x90
    7a50:	mov	w1, #0x2                   	// #2
    7a54:	movk	x24, #0x8000, lsl #48
    7a58:	bl	5440 <mpfr_init2@plt>
    7a5c:	sub	x0, x29, #0x48
    7a60:	mov	w1, #0x2                   	// #2
    7a64:	bl	5440 <mpfr_init2@plt>
    7a68:	sub	x0, x29, #0x88
    7a6c:	mov	w1, #0x2                   	// #2
    7a70:	bl	5440 <mpfr_init2@plt>
    7a74:	sub	x0, x29, #0xa8
    7a78:	mov	w1, #0x2                   	// #2
    7a7c:	bl	5440 <mpfr_init2@plt>
    7a80:	add	x0, sp, #0xb8
    7a84:	mov	w1, #0x2                   	// #2
    7a88:	bl	5440 <mpfr_init2@plt>
    7a8c:	mov	w23, #0x1                   	// #1
    7a90:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    7a94:	str	w23, [sp, #192]
    7a98:	str	x8, [sp, #200]
    7a9c:	ldr	x1, [x21]
    7aa0:	add	x0, sp, #0x50
    7aa4:	bl	5440 <mpfr_init2@plt>
    7aa8:	ldr	x1, [x21, #32]
    7aac:	sub	x0, x29, #0x68
    7ab0:	bl	5440 <mpfr_init2@plt>
    7ab4:	ldr	x8, [x20, #16]
    7ab8:	add	x0, sp, #0x90
    7abc:	mov	x2, xzr
    7ac0:	mov	w3, wzr
    7ac4:	cmp	x8, x26
    7ac8:	cset	w1, eq  // eq = none
    7acc:	bl	5130 <mpfr_set_ui_2exp@plt>
    7ad0:	ldr	x8, [x20, #16]
    7ad4:	cmp	x8, x24
    7ad8:	b.eq	7ae0 <mpc_div@@Base+0x1d8>  // b.none
    7adc:	ldr	w23, [x20, #8]
    7ae0:	add	x0, sp, #0x90
    7ae4:	add	x1, sp, #0x90
    7ae8:	mov	w2, wzr
    7aec:	mov	w3, w23
    7af0:	bl	51d0 <mpfr_set4@plt>
    7af4:	ldr	x8, [x20, #48]
    7af8:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    7afc:	sub	x0, x29, #0x48
    7b00:	mov	x2, xzr
    7b04:	cmp	x8, x9
    7b08:	cset	w1, eq  // eq = none
    7b0c:	mov	w3, wzr
    7b10:	bl	5130 <mpfr_set_ui_2exp@plt>
    7b14:	ldr	x8, [x20, #48]
    7b18:	cmp	x8, x24
    7b1c:	b.ne	7d28 <mpc_div@@Base+0x420>  // b.any
    7b20:	mov	w3, #0x1                   	// #1
    7b24:	b	7d2c <mpc_div@@Base+0x424>
    7b28:	mov	x0, x21
    7b2c:	bl	54d0 <mpfr_number_p@plt>
    7b30:	cbz	w0, 7c78 <mpc_div@@Base+0x370>
    7b34:	add	x22, x21, #0x20
    7b38:	mov	x0, x22
    7b3c:	bl	54d0 <mpfr_number_p@plt>
    7b40:	cbz	w0, 7c78 <mpc_div@@Base+0x370>
    7b44:	mov	x0, x20
    7b48:	bl	54d0 <mpfr_number_p@plt>
    7b4c:	cbz	w0, 7c78 <mpc_div@@Base+0x370>
    7b50:	add	x26, x20, #0x20
    7b54:	mov	x0, x26
    7b58:	bl	54d0 <mpfr_number_p@plt>
    7b5c:	cbz	w0, 7c78 <mpc_div@@Base+0x370>
    7b60:	ldr	x8, [x20, #48]
    7b64:	mov	x27, #0x8000000000000001    	// #-9223372036854775807
    7b68:	cmp	x8, x27
    7b6c:	b.ne	7f18 <mpc_div@@Base+0x610>  // b.any
    7b70:	ldr	w8, [x21, #8]
    7b74:	ldr	w10, [x21, #40]
    7b78:	ldr	w11, [x20, #8]
    7b7c:	ldr	w12, [x20, #40]
    7b80:	mov	w9, #0x1                   	// #1
    7b84:	cmp	w8, #0x0
    7b88:	cneg	w8, w9, lt  // lt = tstop
    7b8c:	cmp	w10, #0x0
    7b90:	str	w8, [sp, #72]
    7b94:	cneg	w8, w9, lt  // lt = tstop
    7b98:	cmp	w11, #0x0
    7b9c:	add	x25, x19, #0x20
    7ba0:	cneg	w28, w9, lt  // lt = tstop
    7ba4:	cmp	w12, #0x0
    7ba8:	mov	x0, x25
    7bac:	mov	x1, x22
    7bb0:	mov	x2, x20
    7bb4:	mov	w3, w23
    7bb8:	str	w8, [sp, #68]
    7bbc:	cneg	w26, w9, lt  // lt = tstop
    7bc0:	bl	5150 <mpfr_div@plt>
    7bc4:	mov	w22, w0
    7bc8:	mov	x0, x19
    7bcc:	mov	x1, x21
    7bd0:	mov	x2, x20
    7bd4:	mov	w3, w24
    7bd8:	bl	5150 <mpfr_div@plt>
    7bdc:	ldr	x8, [x19, #16]
    7be0:	mov	w20, w0
    7be4:	cmp	x8, x27
    7be8:	b.ne	7c14 <mpc_div@@Base+0x30c>  // b.any
    7bec:	ldr	w8, [sp, #68]
    7bf0:	mov	x0, x19
    7bf4:	mov	x1, x19
    7bf8:	mov	w2, wzr
    7bfc:	cmp	w8, w26
    7c00:	ldr	w8, [sp, #72]
    7c04:	ccmp	w8, w28, #0x4, ne  // ne = any
    7c08:	mov	w8, #0xffffffff            	// #-1
    7c0c:	cneg	w3, w8, eq  // eq = none
    7c10:	bl	51d0 <mpfr_set4@plt>
    7c14:	ldr	x8, [x19, #48]
    7c18:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    7c1c:	cmp	x8, x9
    7c20:	b.ne	7c4c <mpc_div@@Base+0x344>  // b.any
    7c24:	ldr	w8, [sp, #72]
    7c28:	mov	x0, x25
    7c2c:	mov	x1, x25
    7c30:	mov	w2, wzr
    7c34:	cmp	w8, w26
    7c38:	ldr	w8, [sp, #68]
    7c3c:	ccmp	w8, w28, #0x4, eq  // eq = none
    7c40:	mov	w8, #0xffffffff            	// #-1
    7c44:	cneg	w3, w8, eq  // eq = none
    7c48:	bl	51d0 <mpfr_set4@plt>
    7c4c:	cmp	w20, #0x0
    7c50:	mov	w8, #0x2                   	// #2
    7c54:	cset	w9, ne  // ne = any
    7c58:	csel	w8, w8, w9, lt  // lt = tstop
    7c5c:	cmp	w22, #0x0
    7c60:	cset	w9, ne  // ne = any
    7c64:	lsl	w9, w9, #2
    7c68:	mov	w10, #0x8                   	// #8
    7c6c:	csel	w9, w10, w9, lt  // lt = tstop
    7c70:	orr	w0, w8, w9
    7c74:	b	84d8 <mpc_div@@Base+0xbd0>
    7c78:	mov	x0, x19
    7c7c:	bl	4ef0 <mpc_set_nan@plt>
    7c80:	b	84d4 <mpc_div@@Base+0xbcc>
    7c84:	mov	w23, wzr
    7c88:	ldr	x9, [x21, #48]
    7c8c:	cmp	x9, x8
    7c90:	b.ne	7d0c <mpc_div@@Base+0x404>  // b.any
    7c94:	ldr	w21, [x21, #40]
    7c98:	mov	w8, #0x1                   	// #1
    7c9c:	cmp	w21, #0x0
    7ca0:	cneg	w8, w8, lt  // lt = tstop
    7ca4:	cbz	w23, 7d10 <mpc_div@@Base+0x408>
    7ca8:	add	x0, sp, #0x90
    7cac:	mov	w1, #0x2                   	// #2
    7cb0:	bl	5440 <mpfr_init2@plt>
    7cb4:	add	x0, sp, #0x90
    7cb8:	cmp	w23, #0x1
    7cbc:	b.ne	7ebc <mpc_div@@Base+0x5b4>  // b.any
    7cc0:	mov	x1, x20
    7cc4:	mov	x2, x22
    7cc8:	mov	w3, wzr
    7ccc:	tbnz	w21, #31, 83ec <mpc_div@@Base+0xae4>
    7cd0:	bl	4e60 <mpfr_add@plt>
    7cd4:	ldr	w8, [sp, #152]
    7cd8:	ldr	x9, [sp, #160]
    7cdc:	mov	w23, #0x1                   	// #1
    7ce0:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    7ce4:	cmp	w8, #0x0
    7ce8:	cneg	w8, w23, lt  // lt = tstop
    7cec:	cmp	x9, x10
    7cf0:	add	x0, sp, #0x90
    7cf4:	mov	x1, x20
    7cf8:	mov	x2, x22
    7cfc:	mov	w3, wzr
    7d00:	csel	w21, wzr, w8, eq  // eq = none
    7d04:	bl	4a60 <mpfr_sub@plt>
    7d08:	b	7f04 <mpc_div@@Base+0x5fc>
    7d0c:	mov	w8, wzr
    7d10:	ldr	x9, [x20, #16]
    7d14:	mov	x12, #0x8000000000000001    	// #-9223372036854775807
    7d18:	cmp	x9, x12
    7d1c:	b.ne	7e30 <mpc_div@@Base+0x528>  // b.any
    7d20:	mov	w11, wzr
    7d24:	b	7e40 <mpc_div@@Base+0x538>
    7d28:	ldr	w3, [x20, #40]
    7d2c:	sub	x0, x29, #0x48
    7d30:	sub	x1, x29, #0x48
    7d34:	mov	w2, wzr
    7d38:	bl	51d0 <mpfr_set4@plt>
    7d3c:	add	x0, sp, #0x50
    7d40:	add	x2, sp, #0x90
    7d44:	mov	x1, x21
    7d48:	mov	w3, wzr
    7d4c:	bl	4b70 <mpfr_mul@plt>
    7d50:	sub	x0, x29, #0x68
    7d54:	sub	x2, x29, #0x48
    7d58:	mov	x1, x22
    7d5c:	mov	w3, wzr
    7d60:	bl	4b70 <mpfr_mul@plt>
    7d64:	sub	x0, x29, #0x88
    7d68:	add	x1, sp, #0x50
    7d6c:	sub	x2, x29, #0x68
    7d70:	mov	w3, wzr
    7d74:	bl	4e60 <mpfr_add@plt>
    7d78:	sub	x0, x29, #0x68
    7d7c:	add	x2, sp, #0x90
    7d80:	mov	x1, x22
    7d84:	mov	w3, wzr
    7d88:	bl	4b70 <mpfr_mul@plt>
    7d8c:	add	x0, sp, #0x50
    7d90:	sub	x2, x29, #0x48
    7d94:	mov	x1, x21
    7d98:	mov	w3, wzr
    7d9c:	bl	4b70 <mpfr_mul@plt>
    7da0:	sub	x0, x29, #0xa8
    7da4:	sub	x1, x29, #0x68
    7da8:	add	x2, sp, #0x50
    7dac:	mov	w3, wzr
    7db0:	bl	4a60 <mpfr_sub@plt>
    7db4:	ldur	x8, [x29, #-120]
    7db8:	ldur	w9, [x29, #-128]
    7dbc:	add	x1, sp, #0xb8
    7dc0:	mov	x0, x19
    7dc4:	cmp	x8, x24
    7dc8:	csinc	w3, w9, wzr, ne  // ne = any
    7dcc:	mov	w2, wzr
    7dd0:	bl	51d0 <mpfr_set4@plt>
    7dd4:	ldur	x8, [x29, #-152]
    7dd8:	ldur	w9, [x29, #-160]
    7ddc:	add	x0, x19, #0x20
    7de0:	add	x1, sp, #0xb8
    7de4:	cmp	x8, x24
    7de8:	csinc	w3, w9, wzr, ne  // ne = any
    7dec:	mov	w2, wzr
    7df0:	bl	51d0 <mpfr_set4@plt>
    7df4:	add	x0, sp, #0x90
    7df8:	bl	4d60 <mpfr_clear@plt>
    7dfc:	sub	x0, x29, #0x48
    7e00:	bl	4d60 <mpfr_clear@plt>
    7e04:	sub	x0, x29, #0x88
    7e08:	bl	4d60 <mpfr_clear@plt>
    7e0c:	sub	x0, x29, #0xa8
    7e10:	bl	4d60 <mpfr_clear@plt>
    7e14:	add	x0, sp, #0xb8
    7e18:	bl	4d60 <mpfr_clear@plt>
    7e1c:	add	x0, sp, #0x50
    7e20:	bl	4d60 <mpfr_clear@plt>
    7e24:	sub	x0, x29, #0x68
    7e28:	bl	4d60 <mpfr_clear@plt>
    7e2c:	b	84d4 <mpc_div@@Base+0xbcc>
    7e30:	ldr	w10, [x20, #8]
    7e34:	cmp	w10, #0x0
    7e38:	mov	w10, #0x1                   	// #1
    7e3c:	cneg	w11, w10, lt  // lt = tstop
    7e40:	ldr	x10, [x20, #48]
    7e44:	cmp	x10, x12
    7e48:	b.ne	7e54 <mpc_div@@Base+0x54c>  // b.any
    7e4c:	mov	w12, wzr
    7e50:	b	7e64 <mpc_div@@Base+0x55c>
    7e54:	ldr	w12, [x20, #40]
    7e58:	cmp	w12, #0x0
    7e5c:	mov	w12, #0x1                   	// #1
    7e60:	cneg	w12, w12, lt  // lt = tstop
    7e64:	mov	x13, #0x8000000000000001    	// #-9223372036854775807
    7e68:	cmp	x9, x13
    7e6c:	mul	w9, w11, w23
    7e70:	b.ne	7e7c <mpc_div@@Base+0x574>  // b.any
    7e74:	mov	w11, wzr
    7e78:	b	7e8c <mpc_div@@Base+0x584>
    7e7c:	ldr	w11, [x20, #8]
    7e80:	cmp	w11, #0x0
    7e84:	mov	w11, #0x1                   	// #1
    7e88:	cneg	w11, w11, lt  // lt = tstop
    7e8c:	madd	w21, w12, w8, w9
    7e90:	cmp	x10, x13
    7e94:	mul	w8, w11, w8
    7e98:	b.ne	7ea4 <mpc_div@@Base+0x59c>  // b.any
    7e9c:	mov	w9, wzr
    7ea0:	b	7eb4 <mpc_div@@Base+0x5ac>
    7ea4:	ldr	w9, [x20, #40]
    7ea8:	cmp	w9, #0x0
    7eac:	mov	w9, #0x1                   	// #1
    7eb0:	cneg	w9, w9, lt  // lt = tstop
    7eb4:	msub	w20, w9, w23, w8
    7eb8:	b	84a4 <mpc_div@@Base+0xb9c>
    7ebc:	tbnz	w21, #31, 8438 <mpc_div@@Base+0xb30>
    7ec0:	mov	x1, x22
    7ec4:	mov	x2, x20
    7ec8:	mov	w3, wzr
    7ecc:	bl	4a60 <mpfr_sub@plt>
    7ed0:	ldr	w8, [sp, #152]
    7ed4:	ldr	x9, [sp, #160]
    7ed8:	mov	w23, #0x1                   	// #1
    7edc:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    7ee0:	cmp	w8, #0x0
    7ee4:	cneg	w8, w23, lt  // lt = tstop
    7ee8:	cmp	x9, x10
    7eec:	add	x0, sp, #0x90
    7ef0:	mov	x1, x20
    7ef4:	mov	x2, x22
    7ef8:	mov	w3, wzr
    7efc:	csel	w21, wzr, w8, eq  // eq = none
    7f00:	bl	4e60 <mpfr_add@plt>
    7f04:	ldr	w9, [sp, #152]
    7f08:	ldr	x8, [sp, #160]
    7f0c:	cmp	w9, #0x0
    7f10:	cneg	w9, w23, lt  // lt = tstop
    7f14:	b	8490 <mpc_div@@Base+0xb88>
    7f18:	ldr	x8, [x20, #16]
    7f1c:	cmp	x8, x27
    7f20:	b.ne	8088 <mpc_div@@Base+0x780>  // b.any
    7f24:	cmp	x19, x21
    7f28:	ldr	x8, [x21, #16]
    7f2c:	ldr	w9, [x21, #8]
    7f30:	cset	w12, eq  // eq = none
    7f34:	cmp	x19, x20
    7f38:	ldr	w11, [x21, #40]
    7f3c:	cset	w13, eq  // eq = none
    7f40:	orr	w27, w12, w13
    7f44:	ldr	w12, [x20, #8]
    7f48:	str	x8, [sp, #72]
    7f4c:	sub	x8, x29, #0x48
    7f50:	ldr	w13, [x20, #40]
    7f54:	cmp	w27, #0x0
    7f58:	mov	w10, #0x1                   	// #1
    7f5c:	csel	x25, x8, x19, ne  // ne = any
    7f60:	cmp	w9, #0x0
    7f64:	cneg	w8, w10, lt  // lt = tstop
    7f68:	cmp	w11, #0x0
    7f6c:	str	w8, [sp, #68]
    7f70:	cneg	w8, w10, lt  // lt = tstop
    7f74:	cmp	w12, #0x0
    7f78:	str	w8, [sp, #64]
    7f7c:	cneg	w8, w10, lt  // lt = tstop
    7f80:	cmp	w13, #0x0
    7f84:	cneg	w28, w10, lt  // lt = tstop
    7f88:	str	w8, [sp, #60]
    7f8c:	cbz	w27, 7fa0 <mpc_div@@Base+0x698>
    7f90:	ldr	x1, [x19]
    7f94:	ldr	x2, [x19, #32]
    7f98:	sub	x0, x29, #0x48
    7f9c:	bl	53c0 <mpc_init3@plt>
    7fa0:	ldp	q1, q0, [x26]
    7fa4:	add	x2, sp, #0x90
    7fa8:	mov	x0, x25
    7fac:	mov	x1, x22
    7fb0:	mov	w3, w24
    7fb4:	stp	q1, q0, [sp, #144]
    7fb8:	bl	5150 <mpfr_div@plt>
    7fbc:	mov	w20, w0
    7fc0:	add	x0, sp, #0x90
    7fc4:	add	x1, sp, #0x90
    7fc8:	mov	w2, wzr
    7fcc:	bl	4b80 <mpfr_neg@plt>
    7fd0:	add	x0, x25, #0x20
    7fd4:	add	x2, sp, #0x90
    7fd8:	mov	x1, x21
    7fdc:	mov	w3, w23
    7fe0:	bl	5150 <mpfr_div@plt>
    7fe4:	mov	w21, w0
    7fe8:	cbz	w27, 8004 <mpc_div@@Base+0x6fc>
    7fec:	sub	x1, x29, #0x48
    7ff0:	mov	x0, x19
    7ff4:	mov	w2, wzr
    7ff8:	bl	5580 <mpc_set@plt>
    7ffc:	sub	x0, x29, #0x48
    8000:	bl	4a10 <mpc_clear@plt>
    8004:	ldr	x8, [x19, #16]
    8008:	mov	x22, #0x8000000000000001    	// #-9223372036854775807
    800c:	cmp	x8, x22
    8010:	b.ne	803c <mpc_div@@Base+0x734>  // b.any
    8014:	ldp	w9, w8, [sp, #60]
    8018:	mov	x0, x19
    801c:	mov	x1, x19
    8020:	mov	w2, wzr
    8024:	cmp	w8, w28
    8028:	ldr	w8, [sp, #68]
    802c:	ccmp	w8, w9, #0x4, ne  // ne = any
    8030:	mov	w8, #0xffffffff            	// #-1
    8034:	cneg	w3, w8, eq  // eq = none
    8038:	bl	51d0 <mpfr_set4@plt>
    803c:	ldr	x8, [sp, #72]
    8040:	cmp	x8, x22
    8044:	b.ne	8070 <mpc_div@@Base+0x768>  // b.any
    8048:	ldr	w8, [sp, #68]
    804c:	add	x0, x19, #0x20
    8050:	mov	x1, x0
    8054:	mov	w2, wzr
    8058:	cmp	w8, w28
    805c:	ldp	w9, w8, [sp, #60]
    8060:	ccmp	w8, w9, #0x4, eq  // eq = none
    8064:	mov	w8, #0xffffffff            	// #-1
    8068:	cneg	w3, w8, eq  // eq = none
    806c:	bl	51d0 <mpfr_set4@plt>
    8070:	cmp	w20, #0x0
    8074:	mov	w8, #0x2                   	// #2
    8078:	cset	w9, ne  // ne = any
    807c:	csel	w8, w8, w9, lt  // lt = tstop
    8080:	cmp	w21, #0x0
    8084:	b	8808 <mpc_div@@Base+0xf00>
    8088:	mov	x10, x19
    808c:	ldr	x8, [x19]
    8090:	ldr	x9, [x10, #32]!
    8094:	sub	x0, x29, #0x48
    8098:	mov	w1, #0x2                   	// #2
    809c:	sub	x28, x29, #0x48
    80a0:	cmp	x8, x9
    80a4:	str	x10, [sp, #16]
    80a8:	csel	x22, x8, x9, gt
    80ac:	bl	4cf0 <mpc_init2@plt>
    80b0:	sub	x0, x29, #0x68
    80b4:	bl	4aa0 <mpfr_init@plt>
    80b8:	ldp	q1, q0, [x20]
    80bc:	add	x8, sp, #0x50
    80c0:	add	x0, x8, #0x20
    80c4:	mov	x1, x0
    80c8:	stp	q1, q0, [sp, #80]
    80cc:	ldp	q1, q0, [x26]
    80d0:	mov	w2, wzr
    80d4:	stp	q1, q0, [sp, #112]
    80d8:	bl	4b80 <mpfr_neg@plt>
    80dc:	bl	52f0 <mpfr_underflow_p@plt>
    80e0:	str	w0, [sp, #4]
    80e4:	bl	54e0 <mpfr_overflow_p@plt>
    80e8:	mov	w8, wzr
    80ec:	cmp	w24, #0x0
    80f0:	add	x9, x28, #0x20
    80f4:	mov	w28, w8
    80f8:	cset	w8, eq  // eq = none
    80fc:	cmp	w23, #0x0
    8100:	mov	w27, wzr
    8104:	mov	w26, wzr
    8108:	str	x8, [sp, #24]
    810c:	cset	w8, eq  // eq = none
    8110:	str	w0, [sp]
    8114:	str	wzr, [sp, #60]
    8118:	str	wzr, [sp, #36]
    811c:	str	wzr, [sp, #72]
    8120:	str	x9, [sp, #48]
    8124:	str	x8, [sp, #8]
    8128:	cmp	w27, #0x1
    812c:	str	w28, [sp, #40]
    8130:	b.hi	8144 <mpc_div@@Base+0x83c>  // b.pmore
    8134:	mov	x0, x22
    8138:	bl	4d20 <mpc_ceil_log2@plt>
    813c:	add	x8, x0, #0x5
    8140:	b	8150 <mpc_div@@Base+0x848>
    8144:	cmp	x22, #0x0
    8148:	cinc	x8, x22, lt  // lt = tstop
    814c:	asr	x8, x8, #1
    8150:	add	x22, x8, x22
    8154:	sub	x0, x29, #0x48
    8158:	mov	x1, x22
    815c:	str	w26, [sp, #44]
    8160:	bl	4c00 <mpc_set_prec@plt>
    8164:	sub	x0, x29, #0x68
    8168:	mov	x1, x22
    816c:	bl	4c80 <mpfr_set_prec@plt>
    8170:	bl	4e20 <mpfr_clear_underflow@plt>
    8174:	bl	4a50 <mpfr_clear_overflow@plt>
    8178:	sub	x0, x29, #0x68
    817c:	mov	w2, #0x2                   	// #2
    8180:	mov	x1, x20
    8184:	bl	4ea0 <mpc_norm@plt>
    8188:	mov	w28, w0
    818c:	bl	52f0 <mpfr_underflow_p@plt>
    8190:	mov	w23, w0
    8194:	bl	54e0 <mpfr_overflow_p@plt>
    8198:	stp	w0, w23, [sp, #64]
    819c:	cbz	w23, 81b0 <mpc_div@@Base+0x8a8>
    81a0:	mov	w8, #0x1                   	// #1
    81a4:	stur	w8, [x29, #-96]
    81a8:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    81ac:	stur	x8, [x29, #-88]
    81b0:	bl	4e20 <mpfr_clear_underflow@plt>
    81b4:	bl	4a50 <mpfr_clear_overflow@plt>
    81b8:	sub	x0, x29, #0x48
    81bc:	add	x2, sp, #0x50
    81c0:	mov	w3, #0x11                  	// #17
    81c4:	mov	x1, x21
    81c8:	bl	4ed0 <mpc_mul@plt>
    81cc:	and	w8, w0, #0x3
    81d0:	tst	w0, #0x3
    81d4:	asr	w9, w0, #2
    81d8:	cset	w10, ne  // ne = any
    81dc:	cmp	w8, #0x2
    81e0:	csinv	w23, w10, wzr, ne  // ne = any
    81e4:	cmp	w9, #0x0
    81e8:	cset	w8, ne  // ne = any
    81ec:	cmp	w9, #0x2
    81f0:	csinv	w26, w8, wzr, ne  // ne = any
    81f4:	bl	52f0 <mpfr_underflow_p@plt>
    81f8:	mov	w24, w0
    81fc:	bl	54e0 <mpfr_overflow_p@plt>
    8200:	cbnz	w0, 84f8 <mpc_div@@Base+0xbf0>
    8204:	cbnz	w28, 8210 <mpc_div@@Base+0x908>
    8208:	cbz	w23, 8354 <mpc_div@@Base+0xa4c>
    820c:	cbz	w26, 8354 <mpc_div@@Base+0xa4c>
    8210:	sub	x0, x29, #0x68
    8214:	sub	x2, x29, #0x68
    8218:	mov	w1, #0x1                   	// #1
    821c:	mov	w3, #0x1                   	// #1
    8220:	bl	4f70 <mpfr_ui_div@plt>
    8224:	orr	w8, w0, w28
    8228:	cbz	w8, 8250 <mpc_div@@Base+0x948>
    822c:	ldur	x8, [x29, #-56]
    8230:	ldur	x9, [x29, #-24]
    8234:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    8238:	cmp	x8, x10
    823c:	cset	w8, ne  // ne = any
    8240:	cmp	x9, x10
    8244:	orr	w23, w23, w8
    8248:	cset	w8, ne  // ne = any
    824c:	orr	w26, w26, w8
    8250:	bl	4e20 <mpfr_clear_underflow@plt>
    8254:	bl	4a50 <mpfr_clear_overflow@plt>
    8258:	sub	x0, x29, #0x48
    825c:	sub	x1, x29, #0x48
    8260:	sub	x2, x29, #0x68
    8264:	mov	w3, #0x1                   	// #1
    8268:	bl	4b70 <mpfr_mul@plt>
    826c:	orr	w23, w0, w23
    8270:	bl	52f0 <mpfr_underflow_p@plt>
    8274:	mov	w28, w0
    8278:	bl	54e0 <mpfr_overflow_p@plt>
    827c:	str	w0, [sp, #60]
    8280:	cbz	w23, 82b4 <mpc_div@@Base+0x9ac>
    8284:	ldr	w8, [sp, #60]
    8288:	orr	w8, w8, w28
    828c:	cbnz	w8, 82b4 <mpc_div@@Base+0x9ac>
    8290:	ldr	x8, [x19]
    8294:	ldr	x9, [sp, #24]
    8298:	sub	x1, x22, #0x4
    829c:	sub	x0, x29, #0x48
    82a0:	mov	w3, #0x1                   	// #1
    82a4:	add	x4, x8, x9
    82a8:	mov	w2, wzr
    82ac:	bl	5450 <mpfr_can_round@plt>
    82b0:	cbz	w0, 83e0 <mpc_div@@Base+0xad8>
    82b4:	bl	4e20 <mpfr_clear_underflow@plt>
    82b8:	bl	4a50 <mpfr_clear_overflow@plt>
    82bc:	ldr	x0, [sp, #48]
    82c0:	sub	x2, x29, #0x68
    82c4:	mov	w3, #0x1                   	// #1
    82c8:	mov	w8, #0x1                   	// #1
    82cc:	mov	x1, x0
    82d0:	str	w8, [sp, #72]
    82d4:	bl	4b70 <mpfr_mul@plt>
    82d8:	orr	w23, w0, w26
    82dc:	bl	52f0 <mpfr_underflow_p@plt>
    82e0:	mov	w26, w0
    82e4:	bl	54e0 <mpfr_overflow_p@plt>
    82e8:	str	w0, [sp, #36]
    82ec:	cbz	w23, 8324 <mpc_div@@Base+0xa1c>
    82f0:	orr	w8, w0, w26
    82f4:	cbnz	w8, 8324 <mpc_div@@Base+0xa1c>
    82f8:	ldp	x9, x8, [sp, #8]
    82fc:	ldr	x0, [sp, #48]
    8300:	sub	x1, x22, #0x4
    8304:	mov	w3, #0x1                   	// #1
    8308:	ldr	x8, [x8]
    830c:	mov	w2, wzr
    8310:	add	x4, x8, x9
    8314:	bl	5450 <mpfr_can_round@plt>
    8318:	cmp	w0, #0x0
    831c:	cset	w8, ne  // ne = any
    8320:	str	w8, [sp, #72]
    8324:	mov	w8, #0x1                   	// #1
    8328:	ldp	w10, w9, [sp, #68]
    832c:	cmp	w9, #0x0
    8330:	ldr	w9, [sp, #64]
    8334:	orr	w9, w9, w10
    8338:	orr	w10, w9, w24
    833c:	cset	w9, ne  // ne = any
    8340:	cbnz	w10, 8528 <mpc_div@@Base+0xc20>
    8344:	and	w8, w8, w9
    8348:	add	w27, w27, #0x1
    834c:	cbz	w8, 8128 <mpc_div@@Base+0x820>
    8350:	b	8528 <mpc_div@@Base+0xc20>
    8354:	bl	4e20 <mpfr_clear_underflow@plt>
    8358:	bl	4a50 <mpfr_clear_overflow@plt>
    835c:	sub	x0, x29, #0x48
    8360:	sub	x1, x29, #0x48
    8364:	sub	x2, x29, #0x68
    8368:	mov	w3, #0x1                   	// #1
    836c:	bl	5150 <mpfr_div@plt>
    8370:	orr	w23, w0, w23
    8374:	bl	52f0 <mpfr_underflow_p@plt>
    8378:	mov	w28, w0
    837c:	bl	54e0 <mpfr_overflow_p@plt>
    8380:	str	w0, [sp, #60]
    8384:	cbz	w23, 83b8 <mpc_div@@Base+0xab0>
    8388:	ldr	w8, [sp, #60]
    838c:	orr	w8, w8, w28
    8390:	cbnz	w8, 83b8 <mpc_div@@Base+0xab0>
    8394:	ldr	x8, [x19]
    8398:	ldr	x9, [sp, #24]
    839c:	sub	x1, x22, #0x4
    83a0:	sub	x0, x29, #0x48
    83a4:	mov	w3, #0x1                   	// #1
    83a8:	add	x4, x8, x9
    83ac:	mov	w2, wzr
    83b0:	bl	5450 <mpfr_can_round@plt>
    83b4:	cbz	w0, 83e0 <mpc_div@@Base+0xad8>
    83b8:	bl	4e20 <mpfr_clear_underflow@plt>
    83bc:	bl	4a50 <mpfr_clear_overflow@plt>
    83c0:	ldr	x0, [sp, #48]
    83c4:	sub	x2, x29, #0x68
    83c8:	mov	w3, #0x1                   	// #1
    83cc:	mov	w8, #0x1                   	// #1
    83d0:	mov	x1, x0
    83d4:	str	w8, [sp, #72]
    83d8:	bl	5150 <mpfr_div@plt>
    83dc:	b	82d8 <mpc_div@@Base+0x9d0>
    83e0:	ldr	w26, [sp, #44]
    83e4:	mov	w8, wzr
    83e8:	b	8328 <mpc_div@@Base+0xa20>
    83ec:	bl	4a60 <mpfr_sub@plt>
    83f0:	ldr	w8, [sp, #152]
    83f4:	ldr	x9, [sp, #160]
    83f8:	mov	w10, #0x1                   	// #1
    83fc:	mov	x11, #0x8000000000000001    	// #-9223372036854775807
    8400:	cmp	w8, #0x0
    8404:	cneg	w8, w10, lt  // lt = tstop
    8408:	cmp	x9, x11
    840c:	add	x0, sp, #0x90
    8410:	mov	x1, x20
    8414:	mov	x2, x22
    8418:	mov	w3, wzr
    841c:	csel	w21, wzr, w8, eq  // eq = none
    8420:	bl	4e60 <mpfr_add@plt>
    8424:	ldr	w9, [sp, #152]
    8428:	ldr	x8, [sp, #160]
    842c:	cmp	w9, #0x0
    8430:	mov	w9, #0xffffffff            	// #-1
    8434:	b	848c <mpc_div@@Base+0xb84>
    8438:	mov	x1, x20
    843c:	mov	x2, x22
    8440:	mov	w3, wzr
    8444:	bl	4e60 <mpfr_add@plt>
    8448:	ldr	w8, [sp, #152]
    844c:	ldr	x9, [sp, #160]
    8450:	mov	w10, #0xffffffff            	// #-1
    8454:	mov	x11, #0x8000000000000001    	// #-9223372036854775807
    8458:	cmp	w8, #0x0
    845c:	cneg	w8, w10, lt  // lt = tstop
    8460:	cmp	x9, x11
    8464:	add	x0, sp, #0x90
    8468:	mov	x1, x22
    846c:	mov	x2, x20
    8470:	mov	w3, wzr
    8474:	csel	w21, wzr, w8, eq  // eq = none
    8478:	bl	4a60 <mpfr_sub@plt>
    847c:	ldr	w9, [sp, #152]
    8480:	ldr	x8, [sp, #160]
    8484:	cmp	w9, #0x0
    8488:	mov	w9, #0x1                   	// #1
    848c:	cneg	w9, w9, lt  // lt = tstop
    8490:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    8494:	cmp	x8, x10
    8498:	add	x0, sp, #0x90
    849c:	csel	w20, wzr, w9, eq  // eq = none
    84a0:	bl	4d60 <mpfr_clear@plt>
    84a4:	mov	x0, x19
    84a8:	cbz	w21, 84b8 <mpc_div@@Base+0xbb0>
    84ac:	mov	w1, w21
    84b0:	bl	5120 <mpfr_set_inf@plt>
    84b4:	b	84bc <mpc_div@@Base+0xbb4>
    84b8:	bl	4a40 <mpfr_set_nan@plt>
    84bc:	add	x0, x19, #0x20
    84c0:	cbz	w20, 84d0 <mpc_div@@Base+0xbc8>
    84c4:	mov	w1, w20
    84c8:	bl	5120 <mpfr_set_inf@plt>
    84cc:	b	84d4 <mpc_div@@Base+0xbcc>
    84d0:	bl	4a40 <mpfr_set_nan@plt>
    84d4:	mov	w0, wzr
    84d8:	ldp	x20, x19, [sp, #464]
    84dc:	ldp	x22, x21, [sp, #448]
    84e0:	ldp	x24, x23, [sp, #432]
    84e4:	ldp	x26, x25, [sp, #416]
    84e8:	ldp	x28, x27, [sp, #400]
    84ec:	ldp	x29, x30, [sp, #384]
    84f0:	add	sp, sp, #0x1e0
    84f4:	ret
    84f8:	ldur	x8, [x29, #-56]
    84fc:	mov	x9, #0x2                   	// #2
    8500:	movk	x9, #0x8000, lsl #48
    8504:	cmp	x8, x9
    8508:	b.gt	8578 <mpc_div@@Base+0xc70>
    850c:	ldr	w27, [sp]
    8510:	mov	x28, #0x2                   	// #2
    8514:	movk	x28, #0x8000, lsl #48
    8518:	cmp	x8, x28
    851c:	b.ne	85cc <mpc_div@@Base+0xcc4>  // b.any
    8520:	bl	4b00 <mpfr_set_erangeflag@plt>
    8524:	b	85cc <mpc_div@@Base+0xcc4>
    8528:	sub	x1, x29, #0x48
    852c:	mov	x0, x19
    8530:	mov	w2, w25
    8534:	stp	w28, w26, [sp, #40]
    8538:	bl	5580 <mpc_set@plt>
    853c:	and	w8, w0, #0x3
    8540:	tst	w0, #0x3
    8544:	asr	w9, w0, #2
    8548:	cset	w10, ne  // ne = any
    854c:	cmp	w8, #0x2
    8550:	ldp	w27, w25, [sp]
    8554:	csinv	w23, w10, wzr, ne  // ne = any
    8558:	cmp	w9, #0x0
    855c:	cset	w8, ne  // ne = any
    8560:	cmp	w9, #0x2
    8564:	mov	x28, #0x2                   	// #2
    8568:	mov	w20, wzr
    856c:	csinv	w26, w8, wzr, ne  // ne = any
    8570:	movk	x28, #0x8000, lsl #48
    8574:	b	8658 <mpc_div@@Base+0xd50>
    8578:	ldur	w20, [x29, #-64]
    857c:	ldr	w27, [sp]
    8580:	mov	x28, #0x2                   	// #2
    8584:	movk	x28, #0x8000, lsl #48
    8588:	cmp	w20, #0x1
    858c:	b.lt	85c8 <mpc_div@@Base+0xcc0>  // b.tstop
    8590:	sub	x0, x29, #0x48
    8594:	bl	4e00 <mpfr_nextabove@plt>
    8598:	ldur	x21, [x29, #-56]
    859c:	sub	x0, x29, #0x48
    85a0:	bl	4bb0 <mpfr_nextbelow@plt>
    85a4:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    85a8:	cmp	x21, x8
    85ac:	b.ne	85cc <mpc_div@@Base+0xcc4>  // b.any
    85b0:	sub	x0, x29, #0x48
    85b4:	mov	w1, w20
    85b8:	bl	5120 <mpfr_set_inf@plt>
    85bc:	mov	w8, #0x1                   	// #1
    85c0:	str	w8, [sp, #60]
    85c4:	b	85cc <mpc_div@@Base+0xcc4>
    85c8:	tbnz	w20, #31, 8820 <mpc_div@@Base+0xf18>
    85cc:	ldur	x8, [x29, #-24]
    85d0:	mov	x9, #0x2                   	// #2
    85d4:	movk	x9, #0x8000, lsl #48
    85d8:	cmp	x8, x9
    85dc:	b.gt	85f0 <mpc_div@@Base+0xce8>
    85e0:	cmp	x8, x28
    85e4:	b.ne	8640 <mpc_div@@Base+0xd38>  // b.any
    85e8:	bl	4b00 <mpfr_set_erangeflag@plt>
    85ec:	b	8640 <mpc_div@@Base+0xd38>
    85f0:	ldur	w20, [x29, #-32]
    85f4:	cmp	w20, #0x1
    85f8:	b.lt	8638 <mpc_div@@Base+0xd30>  // b.tstop
    85fc:	ldr	x22, [sp, #48]
    8600:	mov	x0, x22
    8604:	bl	4e00 <mpfr_nextabove@plt>
    8608:	ldur	x21, [x29, #-24]
    860c:	mov	x0, x22
    8610:	bl	4bb0 <mpfr_nextbelow@plt>
    8614:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    8618:	cmp	x21, x8
    861c:	b.ne	8640 <mpc_div@@Base+0xd38>  // b.any
    8620:	mov	x0, x22
    8624:	mov	w1, w20
    8628:	bl	5120 <mpfr_set_inf@plt>
    862c:	mov	w8, #0x1                   	// #1
    8630:	str	w8, [sp, #36]
    8634:	b	8640 <mpc_div@@Base+0xd38>
    8638:	ldr	x22, [sp, #48]
    863c:	tbnz	w20, #31, 8838 <mpc_div@@Base+0xf30>
    8640:	sub	x1, x29, #0x48
    8644:	mov	x0, x19
    8648:	mov	w2, w25
    864c:	bl	5580 <mpc_set@plt>
    8650:	ldr	w25, [sp, #4]
    8654:	mov	w20, #0x1                   	// #1
    8658:	ldr	w8, [sp, #68]
    865c:	cmp	w8, #0x0
    8660:	cset	w8, eq  // eq = none
    8664:	cmp	w24, #0x0
    8668:	cset	w9, ne  // ne = any
    866c:	orr	w21, w8, w9
    8670:	cmp	w21, #0x1
    8674:	b.ne	86c0 <mpc_div@@Base+0xdb8>  // b.any
    8678:	ldr	w8, [sp, #60]
    867c:	cbnz	w8, 86c0 <mpc_div@@Base+0xdb8>
    8680:	ldr	w8, [sp, #64]
    8684:	eor	w9, w20, #0x1
    8688:	cmp	w8, #0x0
    868c:	cset	w8, ne  // ne = any
    8690:	and	w8, w8, w9
    8694:	tbnz	w8, #0, 86a0 <mpc_div@@Base+0xd98>
    8698:	ldr	w8, [sp, #40]
    869c:	cbz	w8, 8720 <mpc_div@@Base+0xe18>
    86a0:	ldur	w8, [x29, #-64]
    86a4:	mov	x0, x19
    86a8:	cmp	w8, #0x0
    86ac:	mov	w8, #0xffffffff            	// #-1
    86b0:	cneg	w23, w8, lt  // lt = tstop
    86b4:	neg	w1, w23
    86b8:	bl	4d10 <mpfr_set_zero@plt>
    86bc:	b	8720 <mpc_div@@Base+0xe18>
    86c0:	ldur	x8, [x29, #-56]
    86c4:	mov	x9, #0x2                   	// #2
    86c8:	movk	x9, #0x8000, lsl #48
    86cc:	cmp	x8, x9
    86d0:	b.gt	86e8 <mpc_div@@Base+0xde0>
    86d4:	cmp	x8, x28
    86d8:	b.ne	86e0 <mpc_div@@Base+0xdd8>  // b.any
    86dc:	bl	4b00 <mpfr_set_erangeflag@plt>
    86e0:	mov	w1, wzr
    86e4:	b	86ec <mpc_div@@Base+0xde4>
    86e8:	ldur	w1, [x29, #-64]
    86ec:	mov	x0, x19
    86f0:	bl	5120 <mpfr_set_inf@plt>
    86f4:	ldur	x8, [x29, #-56]
    86f8:	mov	x9, #0x2                   	// #2
    86fc:	movk	x9, #0x8000, lsl #48
    8700:	cmp	x8, x9
    8704:	b.gt	871c <mpc_div@@Base+0xe14>
    8708:	cmp	x8, x28
    870c:	b.ne	8714 <mpc_div@@Base+0xe0c>  // b.any
    8710:	bl	4b00 <mpfr_set_erangeflag@plt>
    8714:	mov	w23, wzr
    8718:	b	8720 <mpc_div@@Base+0xe18>
    871c:	ldur	w23, [x29, #-64]
    8720:	ldr	w8, [sp, #36]
    8724:	cmp	w8, #0x0
    8728:	cset	w8, eq  // eq = none
    872c:	and	w8, w21, w8
    8730:	tbz	w8, #0, 8774 <mpc_div@@Base+0xe6c>
    8734:	ldr	w8, [sp, #64]
    8738:	eor	w9, w20, #0x1
    873c:	cmp	w8, #0x0
    8740:	cset	w8, ne  // ne = any
    8744:	and	w8, w8, w9
    8748:	tbnz	w8, #0, 8754 <mpc_div@@Base+0xe4c>
    874c:	ldr	w8, [sp, #44]
    8750:	cbz	w8, 87d4 <mpc_div@@Base+0xecc>
    8754:	ldur	w8, [x29, #-32]
    8758:	ldr	x0, [sp, #16]
    875c:	cmp	w8, #0x0
    8760:	mov	w8, #0xffffffff            	// #-1
    8764:	cneg	w26, w8, lt  // lt = tstop
    8768:	neg	w1, w26
    876c:	bl	4d10 <mpfr_set_zero@plt>
    8770:	b	87d4 <mpc_div@@Base+0xecc>
    8774:	ldur	x8, [x29, #-24]
    8778:	mov	x9, #0x2                   	// #2
    877c:	movk	x9, #0x8000, lsl #48
    8780:	cmp	x8, x9
    8784:	b.gt	879c <mpc_div@@Base+0xe94>
    8788:	cmp	x8, x28
    878c:	b.ne	8794 <mpc_div@@Base+0xe8c>  // b.any
    8790:	bl	4b00 <mpfr_set_erangeflag@plt>
    8794:	mov	w1, wzr
    8798:	b	87a0 <mpc_div@@Base+0xe98>
    879c:	ldur	w1, [x29, #-32]
    87a0:	ldr	x0, [sp, #16]
    87a4:	bl	5120 <mpfr_set_inf@plt>
    87a8:	ldur	x8, [x29, #-24]
    87ac:	mov	x9, #0x2                   	// #2
    87b0:	movk	x9, #0x8000, lsl #48
    87b4:	cmp	x8, x9
    87b8:	b.gt	87d0 <mpc_div@@Base+0xec8>
    87bc:	cmp	x8, x28
    87c0:	b.ne	87c8 <mpc_div@@Base+0xec0>  // b.any
    87c4:	bl	4b00 <mpfr_set_erangeflag@plt>
    87c8:	mov	w26, wzr
    87cc:	b	87d4 <mpc_div@@Base+0xecc>
    87d0:	ldur	w26, [x29, #-32]
    87d4:	sub	x0, x29, #0x48
    87d8:	bl	4a10 <mpc_clear@plt>
    87dc:	sub	x0, x29, #0x68
    87e0:	bl	4d60 <mpfr_clear@plt>
    87e4:	cbz	w25, 87ec <mpc_div@@Base+0xee4>
    87e8:	bl	4990 <mpfr_set_underflow@plt>
    87ec:	cbz	w27, 87f4 <mpc_div@@Base+0xeec>
    87f0:	bl	5490 <mpfr_set_overflow@plt>
    87f4:	cmp	w23, #0x0
    87f8:	mov	w8, #0x2                   	// #2
    87fc:	cset	w9, ne  // ne = any
    8800:	csel	w8, w8, w9, lt  // lt = tstop
    8804:	cmp	w26, #0x0
    8808:	cset	w9, ne  // ne = any
    880c:	lsl	w9, w9, #2
    8810:	mov	w10, #0x8                   	// #8
    8814:	csel	w9, w10, w9, lt  // lt = tstop
    8818:	orr	w0, w9, w8
    881c:	b	84d8 <mpc_div@@Base+0xbd0>
    8820:	sub	x0, x29, #0x48
    8824:	bl	4bb0 <mpfr_nextbelow@plt>
    8828:	ldur	x21, [x29, #-56]
    882c:	sub	x0, x29, #0x48
    8830:	bl	4e00 <mpfr_nextabove@plt>
    8834:	b	85a4 <mpc_div@@Base+0xc9c>
    8838:	mov	x0, x22
    883c:	bl	4bb0 <mpfr_nextbelow@plt>
    8840:	ldur	x21, [x29, #-24]
    8844:	mov	x0, x22
    8848:	bl	4e00 <mpfr_nextabove@plt>
    884c:	b	8614 <mpc_div@@Base+0xd0c>

0000000000008850 <mpc_div_fr@@Base>:
    8850:	sub	sp, sp, #0x60
    8854:	stp	x29, x30, [sp, #32]
    8858:	stp	x24, x23, [sp, #48]
    885c:	stp	x22, x21, [sp, #64]
    8860:	stp	x20, x19, [sp, #80]
    8864:	mov	x22, x0
    8868:	ldr	x8, [x22], #32
    886c:	mov	x21, x0
    8870:	mov	x23, x1
    8874:	mov	x0, sp
    8878:	mov	x1, x8
    887c:	add	x29, sp, #0x20
    8880:	mov	w19, w3
    8884:	mov	x20, x2
    8888:	bl	5440 <mpfr_init2@plt>
    888c:	and	w3, w19, #0xf
    8890:	mov	x0, sp
    8894:	mov	x1, x23
    8898:	mov	x2, x20
    889c:	bl	5150 <mpfr_div@plt>
    88a0:	mov	w24, w0
    88a4:	add	x1, x23, #0x20
    88a8:	asr	w3, w19, #4
    88ac:	mov	x0, x22
    88b0:	mov	x2, x20
    88b4:	bl	5150 <mpfr_div@plt>
    88b8:	ldr	w3, [sp, #8]
    88bc:	mov	w19, w0
    88c0:	mov	x1, sp
    88c4:	mov	x0, x21
    88c8:	mov	w2, wzr
    88cc:	bl	51d0 <mpfr_set4@plt>
    88d0:	mov	x0, sp
    88d4:	bl	4d60 <mpfr_clear@plt>
    88d8:	cmp	w24, #0x0
    88dc:	mov	w8, #0x2                   	// #2
    88e0:	cset	w9, ne  // ne = any
    88e4:	csel	w8, w8, w9, lt  // lt = tstop
    88e8:	cmp	w19, #0x0
    88ec:	cset	w9, ne  // ne = any
    88f0:	ldp	x20, x19, [sp, #80]
    88f4:	ldp	x22, x21, [sp, #64]
    88f8:	ldp	x24, x23, [sp, #48]
    88fc:	ldp	x29, x30, [sp, #32]
    8900:	lsl	w9, w9, #2
    8904:	mov	w10, #0x8                   	// #8
    8908:	csel	w9, w10, w9, lt  // lt = tstop
    890c:	orr	w0, w9, w8
    8910:	add	sp, sp, #0x60
    8914:	ret

0000000000008918 <mpc_div_ui@@Base>:
    8918:	stp	x29, x30, [sp, #-64]!
    891c:	stp	x20, x19, [sp, #48]
    8920:	mov	w19, w3
    8924:	and	w3, w3, #0xf
    8928:	str	x23, [sp, #16]
    892c:	stp	x22, x21, [sp, #32]
    8930:	mov	x29, sp
    8934:	mov	x20, x2
    8938:	mov	x21, x1
    893c:	mov	x22, x0
    8940:	bl	5550 <mpfr_div_ui@plt>
    8944:	mov	w23, w0
    8948:	add	x0, x22, #0x20
    894c:	add	x1, x21, #0x20
    8950:	asr	w3, w19, #4
    8954:	mov	x2, x20
    8958:	bl	5550 <mpfr_div_ui@plt>
    895c:	cmp	w23, #0x0
    8960:	mov	w8, #0x2                   	// #2
    8964:	cset	w9, ne  // ne = any
    8968:	csel	w8, w8, w9, lt  // lt = tstop
    896c:	cmp	w0, #0x0
    8970:	cset	w9, ne  // ne = any
    8974:	ldp	x20, x19, [sp, #48]
    8978:	ldp	x22, x21, [sp, #32]
    897c:	ldr	x23, [sp, #16]
    8980:	lsl	w9, w9, #2
    8984:	mov	w10, #0x8                   	// #8
    8988:	csel	w9, w10, w9, lt  // lt = tstop
    898c:	orr	w0, w9, w8
    8990:	ldp	x29, x30, [sp], #64
    8994:	ret

0000000000008998 <mpc_exp@@Base>:
    8998:	sub	sp, sp, #0xd0
    899c:	stp	x29, x30, [sp, #112]
    89a0:	stp	x28, x27, [sp, #128]
    89a4:	stp	x26, x25, [sp, #144]
    89a8:	stp	x24, x23, [sp, #160]
    89ac:	stp	x22, x21, [sp, #176]
    89b0:	stp	x20, x19, [sp, #192]
    89b4:	ldr	x8, [x1, #16]
    89b8:	mov	x9, #0x2                   	// #2
    89bc:	movk	x9, #0x8000, lsl #48
    89c0:	mov	x21, x1
    89c4:	cmp	x8, x9
    89c8:	mov	x19, x0
    89cc:	add	x29, sp, #0x70
    89d0:	b.ne	89f8 <mpc_exp@@Base+0x60>  // b.any
    89d4:	ldr	x8, [x21, #48]
    89d8:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    89dc:	cmp	x8, x9
    89e0:	b.ne	8b0c <mpc_exp@@Base+0x174>  // b.any
    89e4:	mov	x0, x19
    89e8:	mov	x1, x21
    89ec:	mov	w2, wzr
    89f0:	bl	5580 <mpc_set@plt>
    89f4:	b	8b20 <mpc_exp@@Base+0x188>
    89f8:	ldr	x9, [x21, #48]
    89fc:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    8a00:	mov	w22, w2
    8a04:	add	x20, x21, #0x20
    8a08:	cmp	x9, x10
    8a0c:	b.eq	8a44 <mpc_exp@@Base+0xac>  // b.none
    8a10:	mov	x10, #0x2                   	// #2
    8a14:	movk	x10, #0x8000, lsl #48
    8a18:	cmp	x9, x10
    8a1c:	b.ne	8a74 <mpc_exp@@Base+0xdc>  // b.any
    8a20:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    8a24:	cmp	x8, x9
    8a28:	b.ne	8b0c <mpc_exp@@Base+0x174>  // b.any
    8a2c:	ldr	w8, [x21, #8]
    8a30:	tbnz	w8, #31, 8b40 <mpc_exp@@Base+0x1a8>
    8a34:	mov	w1, #0x1                   	// #1
    8a38:	mov	x0, x19
    8a3c:	bl	5120 <mpfr_set_inf@plt>
    8a40:	b	8b14 <mpc_exp@@Base+0x17c>
    8a44:	and	w2, w22, #0xf
    8a48:	mov	x0, x19
    8a4c:	mov	x1, x21
    8a50:	bl	5230 <mpfr_exp@plt>
    8a54:	ldr	w3, [x21, #40]
    8a58:	mov	w23, w0
    8a5c:	add	x0, x19, #0x20
    8a60:	asr	w2, w22, #4
    8a64:	mov	x1, x20
    8a68:	bl	51d0 <mpfr_set4@plt>
    8a6c:	cmp	w23, #0x0
    8a70:	b	8ab4 <mpc_exp@@Base+0x11c>
    8a74:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    8a78:	cmp	x8, x10
    8a7c:	b.eq	8adc <mpc_exp@@Base+0x144>  // b.none
    8a80:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    8a84:	cmp	x8, x10
    8a88:	b.ne	8b00 <mpc_exp@@Base+0x168>  // b.any
    8a8c:	and	w2, w22, #0xf
    8a90:	mov	x0, x19
    8a94:	mov	x1, x20
    8a98:	bl	5050 <mpfr_cos@plt>
    8a9c:	mov	w21, w0
    8aa0:	add	x0, x19, #0x20
    8aa4:	asr	w2, w22, #4
    8aa8:	mov	x1, x20
    8aac:	bl	5080 <mpfr_sin@plt>
    8ab0:	cmp	w21, #0x0
    8ab4:	mov	w8, #0x2                   	// #2
    8ab8:	cset	w9, ne  // ne = any
    8abc:	csel	w8, w8, w9, lt  // lt = tstop
    8ac0:	cmp	w0, #0x0
    8ac4:	cset	w9, ne  // ne = any
    8ac8:	lsl	w9, w9, #2
    8acc:	mov	w10, #0x8                   	// #8
    8ad0:	csel	w9, w10, w9, lt  // lt = tstop
    8ad4:	orr	w0, w9, w8
    8ad8:	b	8b20 <mpc_exp@@Base+0x188>
    8adc:	sub	x0, x29, #0x20
    8ae0:	mov	w1, #0x2                   	// #2
    8ae4:	bl	5440 <mpfr_init2@plt>
    8ae8:	ldr	w8, [x21, #8]
    8aec:	tbnz	w8, #31, 8d1c <mpc_exp@@Base+0x384>
    8af0:	sub	x0, x29, #0x20
    8af4:	mov	w1, #0x1                   	// #1
    8af8:	bl	5120 <mpfr_set_inf@plt>
    8afc:	b	8d2c <mpc_exp@@Base+0x394>
    8b00:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    8b04:	cmp	x9, x10
    8b08:	b.ne	8b58 <mpc_exp@@Base+0x1c0>  // b.any
    8b0c:	mov	x0, x19
    8b10:	bl	4a40 <mpfr_set_nan@plt>
    8b14:	add	x0, x19, #0x20
    8b18:	bl	4a40 <mpfr_set_nan@plt>
    8b1c:	mov	w0, wzr
    8b20:	ldp	x20, x19, [sp, #192]
    8b24:	ldp	x22, x21, [sp, #176]
    8b28:	ldp	x24, x23, [sp, #160]
    8b2c:	ldp	x26, x25, [sp, #144]
    8b30:	ldp	x28, x27, [sp, #128]
    8b34:	ldp	x29, x30, [sp, #112]
    8b38:	add	sp, sp, #0xd0
    8b3c:	ret
    8b40:	mov	x0, x19
    8b44:	mov	x1, xzr
    8b48:	mov	x2, xzr
    8b4c:	mov	w3, wzr
    8b50:	bl	5040 <mpc_set_ui_ui@plt>
    8b54:	b	8b20 <mpc_exp@@Base+0x188>
    8b58:	mov	x25, x19
    8b5c:	ldr	x10, [x19]
    8b60:	ldr	x11, [x25, #32]!
    8b64:	neg	x12, x8
    8b68:	neg	x13, x9
    8b6c:	and	x8, x12, x8, asr #63
    8b70:	cmp	x10, x11
    8b74:	csel	x10, x10, x11, gt
    8b78:	cmp	x8, x13
    8b7c:	csneg	x8, x8, x9, gt
    8b80:	sub	x0, x29, #0x20
    8b84:	mov	w1, #0x2                   	// #2
    8b88:	add	x27, x10, x8
    8b8c:	bl	5440 <mpfr_init2@plt>
    8b90:	add	x0, sp, #0x30
    8b94:	mov	w1, #0x2                   	// #2
    8b98:	bl	5440 <mpfr_init2@plt>
    8b9c:	add	x0, sp, #0x10
    8ba0:	mov	w1, #0x2                   	// #2
    8ba4:	bl	5440 <mpfr_init2@plt>
    8ba8:	bl	52f0 <mpfr_underflow_p@plt>
    8bac:	str	w0, [sp, #8]
    8bb0:	bl	54e0 <mpfr_overflow_p@plt>
    8bb4:	tst	w22, #0xf
    8bb8:	cset	w28, eq  // eq = none
    8bbc:	cmp	w22, #0x10
    8bc0:	and	w26, w22, #0xf
    8bc4:	cset	w23, cc  // cc = lo, ul, last
    8bc8:	mov	x24, #0x8000000000000001    	// #-9223372036854775807
    8bcc:	str	w0, [sp, #12]
    8bd0:	mov	x0, x27
    8bd4:	bl	4d20 <mpc_ceil_log2@plt>
    8bd8:	add	x8, x27, x0
    8bdc:	add	x27, x8, #0x5
    8be0:	sub	x0, x29, #0x20
    8be4:	mov	x1, x27
    8be8:	bl	4c80 <mpfr_set_prec@plt>
    8bec:	add	x0, sp, #0x30
    8bf0:	mov	x1, x27
    8bf4:	bl	4c80 <mpfr_set_prec@plt>
    8bf8:	add	x0, sp, #0x10
    8bfc:	mov	x1, x27
    8c00:	bl	4c80 <mpfr_set_prec@plt>
    8c04:	bl	4a50 <mpfr_clear_overflow@plt>
    8c08:	bl	4e20 <mpfr_clear_underflow@plt>
    8c0c:	sub	x0, x29, #0x20
    8c10:	mov	x1, x21
    8c14:	mov	w2, wzr
    8c18:	bl	5230 <mpfr_exp@plt>
    8c1c:	add	x0, sp, #0x10
    8c20:	add	x1, sp, #0x30
    8c24:	mov	x2, x20
    8c28:	mov	w3, wzr
    8c2c:	bl	5520 <mpfr_sin_cos@plt>
    8c30:	add	x0, sp, #0x30
    8c34:	add	x1, sp, #0x30
    8c38:	sub	x2, x29, #0x20
    8c3c:	mov	w3, wzr
    8c40:	bl	4b70 <mpfr_mul@plt>
    8c44:	bl	54e0 <mpfr_overflow_p@plt>
    8c48:	cbnz	w0, 8c78 <mpc_exp@@Base+0x2e0>
    8c4c:	ldur	x8, [x29, #-16]
    8c50:	cmp	x8, x24
    8c54:	b.eq	8c78 <mpc_exp@@Base+0x2e0>  // b.none
    8c58:	ldr	x8, [x19]
    8c5c:	sub	x1, x27, #0x2
    8c60:	add	x0, sp, #0x30
    8c64:	mov	w3, #0x1                   	// #1
    8c68:	add	x4, x8, x28
    8c6c:	mov	w2, wzr
    8c70:	bl	5450 <mpfr_can_round@plt>
    8c74:	cbz	w0, 8bd0 <mpc_exp@@Base+0x238>
    8c78:	add	x0, sp, #0x10
    8c7c:	add	x1, sp, #0x10
    8c80:	sub	x2, x29, #0x20
    8c84:	mov	w3, wzr
    8c88:	bl	4b70 <mpfr_mul@plt>
    8c8c:	bl	54e0 <mpfr_overflow_p@plt>
    8c90:	cbnz	w0, 8cc0 <mpc_exp@@Base+0x328>
    8c94:	ldur	x8, [x29, #-16]
    8c98:	cmp	x8, x24
    8c9c:	b.eq	8cc0 <mpc_exp@@Base+0x328>  // b.none
    8ca0:	ldr	x8, [x25]
    8ca4:	sub	x1, x27, #0x2
    8ca8:	add	x0, sp, #0x10
    8cac:	mov	w3, #0x1                   	// #1
    8cb0:	add	x4, x8, x23
    8cb4:	mov	w2, wzr
    8cb8:	bl	5450 <mpfr_can_round@plt>
    8cbc:	cbz	w0, 8bd0 <mpc_exp@@Base+0x238>
    8cc0:	ldr	w3, [sp, #56]
    8cc4:	add	x1, sp, #0x30
    8cc8:	mov	x0, x19
    8ccc:	mov	w2, w26
    8cd0:	bl	51d0 <mpfr_set4@plt>
    8cd4:	ldr	w3, [sp, #24]
    8cd8:	asr	w22, w22, #4
    8cdc:	mov	w20, w0
    8ce0:	add	x1, sp, #0x10
    8ce4:	mov	x0, x25
    8ce8:	mov	w2, w22
    8cec:	bl	51d0 <mpfr_set4@plt>
    8cf0:	mov	w21, w0
    8cf4:	bl	54e0 <mpfr_overflow_p@plt>
    8cf8:	cbz	w0, 8ddc <mpc_exp@@Base+0x444>
    8cfc:	mov	x0, x19
    8d00:	mov	w1, w26
    8d04:	bl	4dd0 <mpc_fix_inf@plt>
    8d08:	mov	w20, w0
    8d0c:	mov	x0, x25
    8d10:	mov	w1, w22
    8d14:	bl	4dd0 <mpc_fix_inf@plt>
    8d18:	b	8e00 <mpc_exp@@Base+0x468>
    8d1c:	mov	w8, #0x1                   	// #1
    8d20:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    8d24:	stur	w8, [x29, #-24]
    8d28:	stur	x9, [x29, #-16]
    8d2c:	ldr	x8, [x21, #48]
    8d30:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    8d34:	cmp	x8, x9
    8d38:	b.ne	8d6c <mpc_exp@@Base+0x3d4>  // b.any
    8d3c:	ldur	w3, [x29, #-24]
    8d40:	ldr	w21, [x21, #8]
    8d44:	sub	x1, x29, #0x20
    8d48:	mov	x0, x19
    8d4c:	mov	w2, wzr
    8d50:	bl	51d0 <mpfr_set4@plt>
    8d54:	mov	w20, w0
    8d58:	add	x0, x19, #0x20
    8d5c:	tbnz	w21, #31, 8e4c <mpc_exp@@Base+0x4b4>
    8d60:	bl	4a40 <mpfr_set_nan@plt>
    8d64:	mov	w19, wzr
    8d68:	b	8e60 <mpc_exp@@Base+0x4c8>
    8d6c:	add	x0, sp, #0x30
    8d70:	mov	w1, #0x2                   	// #2
    8d74:	bl	5440 <mpfr_init2@plt>
    8d78:	add	x0, sp, #0x10
    8d7c:	mov	w1, #0x2                   	// #2
    8d80:	bl	5440 <mpfr_init2@plt>
    8d84:	add	x0, sp, #0x10
    8d88:	add	x1, sp, #0x30
    8d8c:	mov	x2, x20
    8d90:	mov	w3, wzr
    8d94:	bl	5520 <mpfr_sin_cos@plt>
    8d98:	ldr	w3, [sp, #56]
    8d9c:	sub	x1, x29, #0x20
    8da0:	mov	x0, x19
    8da4:	mov	w2, wzr
    8da8:	bl	51d0 <mpfr_set4@plt>
    8dac:	ldr	w3, [sp, #24]
    8db0:	mov	w20, w0
    8db4:	add	x0, x19, #0x20
    8db8:	sub	x1, x29, #0x20
    8dbc:	mov	w2, wzr
    8dc0:	bl	51d0 <mpfr_set4@plt>
    8dc4:	mov	w19, w0
    8dc8:	add	x0, sp, #0x10
    8dcc:	bl	4d60 <mpfr_clear@plt>
    8dd0:	add	x0, sp, #0x30
    8dd4:	bl	4d60 <mpfr_clear@plt>
    8dd8:	b	8e60 <mpc_exp@@Base+0x4c8>
    8ddc:	bl	52f0 <mpfr_underflow_p@plt>
    8de0:	cbz	w0, 8e04 <mpc_exp@@Base+0x46c>
    8de4:	mov	x0, x19
    8de8:	mov	w1, w26
    8dec:	bl	50d0 <mpc_fix_zero@plt>
    8df0:	mov	w20, w0
    8df4:	mov	x0, x25
    8df8:	mov	w1, w22
    8dfc:	bl	50d0 <mpc_fix_zero@plt>
    8e00:	mov	w21, w0
    8e04:	sub	x0, x29, #0x20
    8e08:	bl	4d60 <mpfr_clear@plt>
    8e0c:	add	x0, sp, #0x30
    8e10:	bl	4d60 <mpfr_clear@plt>
    8e14:	add	x0, sp, #0x10
    8e18:	bl	4d60 <mpfr_clear@plt>
    8e1c:	ldr	w8, [sp, #8]
    8e20:	cbz	w8, 8e28 <mpc_exp@@Base+0x490>
    8e24:	bl	4990 <mpfr_set_underflow@plt>
    8e28:	ldr	w8, [sp, #12]
    8e2c:	cbz	w8, 8e34 <mpc_exp@@Base+0x49c>
    8e30:	bl	5490 <mpfr_set_overflow@plt>
    8e34:	cmp	w20, #0x0
    8e38:	mov	w8, #0x2                   	// #2
    8e3c:	cset	w9, ne  // ne = any
    8e40:	csel	w8, w8, w9, lt  // lt = tstop
    8e44:	cmp	w21, #0x0
    8e48:	b	8e7c <mpc_exp@@Base+0x4e4>
    8e4c:	ldur	w3, [x29, #-24]
    8e50:	sub	x1, x29, #0x20
    8e54:	mov	w2, wzr
    8e58:	bl	51d0 <mpfr_set4@plt>
    8e5c:	mov	w19, w0
    8e60:	sub	x0, x29, #0x20
    8e64:	bl	4d60 <mpfr_clear@plt>
    8e68:	cmp	w20, #0x0
    8e6c:	mov	w8, #0x2                   	// #2
    8e70:	cset	w9, ne  // ne = any
    8e74:	csel	w8, w8, w9, lt  // lt = tstop
    8e78:	cmp	w19, #0x0
    8e7c:	cset	w9, ne  // ne = any
    8e80:	lsl	w9, w9, #2
    8e84:	mov	w10, #0x8                   	// #8
    8e88:	csel	w9, w10, w9, lt  // lt = tstop
    8e8c:	orr	w0, w8, w9
    8e90:	b	8b20 <mpc_exp@@Base+0x188>

0000000000008e94 <mpc_fma_naive@@Base>:
    8e94:	sub	sp, sp, #0xf0
    8e98:	stp	x29, x30, [sp, #160]
    8e9c:	stp	x24, x23, [sp, #192]
    8ea0:	stp	x22, x21, [sp, #208]
    8ea4:	stp	x20, x19, [sp, #224]
    8ea8:	ldr	x8, [x1]
    8eac:	ldr	x9, [x2]
    8eb0:	add	x29, sp, #0xa0
    8eb4:	mov	x23, x1
    8eb8:	mov	x20, x0
    8ebc:	add	x1, x9, x8
    8ec0:	sub	x0, x29, #0x20
    8ec4:	str	x25, [sp, #176]
    8ec8:	mov	w19, w4
    8ecc:	mov	x21, x3
    8ed0:	mov	x22, x2
    8ed4:	bl	5440 <mpfr_init2@plt>
    8ed8:	mov	x24, x22
    8edc:	ldr	x8, [x23]
    8ee0:	ldr	x9, [x24, #32]!
    8ee4:	sub	x0, x29, #0x40
    8ee8:	add	x1, x9, x8
    8eec:	bl	5440 <mpfr_init2@plt>
    8ef0:	mov	x25, x23
    8ef4:	ldr	x8, [x25, #32]!
    8ef8:	ldr	x9, [x22]
    8efc:	add	x0, sp, #0x40
    8f00:	add	x1, x9, x8
    8f04:	bl	5440 <mpfr_init2@plt>
    8f08:	ldr	x8, [x25]
    8f0c:	ldr	x9, [x24]
    8f10:	add	x0, sp, #0x20
    8f14:	add	x1, x9, x8
    8f18:	bl	5440 <mpfr_init2@plt>
    8f1c:	sub	x0, x29, #0x20
    8f20:	mov	w3, #0x1                   	// #1
    8f24:	mov	x1, x23
    8f28:	mov	x2, x22
    8f2c:	bl	4b70 <mpfr_mul@plt>
    8f30:	sub	x0, x29, #0x40
    8f34:	mov	w3, #0x1                   	// #1
    8f38:	mov	x1, x23
    8f3c:	mov	x2, x24
    8f40:	bl	4b70 <mpfr_mul@plt>
    8f44:	add	x0, sp, #0x40
    8f48:	mov	w3, #0x1                   	// #1
    8f4c:	mov	x1, x25
    8f50:	mov	x2, x22
    8f54:	bl	4b70 <mpfr_mul@plt>
    8f58:	add	x0, sp, #0x20
    8f5c:	mov	w3, #0x1                   	// #1
    8f60:	mov	x1, x25
    8f64:	mov	x2, x24
    8f68:	bl	4b70 <mpfr_mul@plt>
    8f6c:	ldur	x10, [x29, #-16]
    8f70:	mov	x8, #0x4                   	// #4
    8f74:	movk	x8, #0x8000, lsl #48
    8f78:	cmp	x10, x8
    8f7c:	b.lt	8ff4 <mpc_fma_naive@@Base+0x160>  // b.tstop
    8f80:	ldr	x9, [sp, #48]
    8f84:	ldur	x1, [x29, #-32]
    8f88:	cmp	x9, x8
    8f8c:	mov	x8, x1
    8f90:	b.lt	8fb8 <mpc_fma_naive@@Base+0x124>  // b.tstop
    8f94:	ldr	x8, [sp, #32]
    8f98:	sub	x11, x10, x1
    8f9c:	cmp	x10, x9
    8fa0:	csel	x12, x9, x10, lt  // lt = tstop
    8fa4:	sub	x8, x9, x8
    8fa8:	cmp	x11, x8
    8fac:	csel	x8, x8, x11, gt
    8fb0:	sub	x8, x12, x8
    8fb4:	add	x8, x8, #0x1
    8fb8:	ldr	x11, [x21, #16]
    8fbc:	mov	x12, #0x4                   	// #4
    8fc0:	movk	x12, #0x8000, lsl #48
    8fc4:	cmp	x11, x12
    8fc8:	b.lt	9000 <mpc_fma_naive@@Base+0x16c>  // b.tstop
    8fcc:	ldr	x12, [x21]
    8fd0:	sub	x13, x10, x1
    8fd4:	cmp	x10, x11
    8fd8:	csel	x10, x11, x10, lt  // lt = tstop
    8fdc:	sub	x12, x11, x12
    8fe0:	cmp	x13, x12
    8fe4:	csel	x11, x12, x13, gt
    8fe8:	sub	x10, x10, x11
    8fec:	add	x1, x10, #0x1
    8ff0:	b	9000 <mpc_fma_naive@@Base+0x16c>
    8ff4:	ldr	x1, [x21]
    8ff8:	ldr	x8, [sp, #32]
    8ffc:	ldr	x9, [sp, #48]
    9000:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    9004:	cmp	x9, x10
    9008:	b.le	904c <mpc_fma_naive@@Base+0x1b8>
    900c:	ldr	x10, [x21, #16]
    9010:	ldr	x23, [sp, #32]
    9014:	mov	x11, #0x4                   	// #4
    9018:	movk	x11, #0x8000, lsl #48
    901c:	cmp	x10, x11
    9020:	b.lt	9050 <mpc_fma_naive@@Base+0x1bc>  // b.tstop
    9024:	ldr	x11, [x21]
    9028:	sub	x12, x9, x23
    902c:	cmp	x9, x10
    9030:	csel	x9, x10, x9, lt  // lt = tstop
    9034:	sub	x11, x10, x11
    9038:	cmp	x12, x11
    903c:	csel	x10, x11, x12, gt
    9040:	sub	x9, x9, x10
    9044:	add	x23, x9, #0x1
    9048:	b	9050 <mpc_fma_naive@@Base+0x1bc>
    904c:	ldr	x23, [x21]
    9050:	cmp	x8, x1
    9054:	b.gt	9094 <mpc_fma_naive@@Base+0x200>
    9058:	cmp	x8, x23
    905c:	b.gt	9094 <mpc_fma_naive@@Base+0x200>
    9060:	mov	x0, sp
    9064:	mov	x1, x8
    9068:	bl	5440 <mpfr_init2@plt>
    906c:	mov	x0, sp
    9070:	sub	x1, x29, #0x20
    9074:	add	x2, sp, #0x20
    9078:	mov	w3, #0x1                   	// #1
    907c:	bl	4a60 <mpfr_sub@plt>
    9080:	and	w3, w19, #0xf
    9084:	mov	x1, sp
    9088:	mov	x0, x20
    908c:	mov	x2, x21
    9090:	b	90cc <mpc_fma_naive@@Base+0x238>
    9094:	mov	x0, sp
    9098:	cmp	x1, x23
    909c:	b.le	90d4 <mpc_fma_naive@@Base+0x240>
    90a0:	mov	x1, x23
    90a4:	bl	5440 <mpfr_init2@plt>
    90a8:	mov	x0, sp
    90ac:	add	x2, sp, #0x20
    90b0:	mov	w3, #0x1                   	// #1
    90b4:	mov	x1, x21
    90b8:	bl	4a60 <mpfr_sub@plt>
    90bc:	and	w3, w19, #0xf
    90c0:	mov	x1, sp
    90c4:	sub	x2, x29, #0x20
    90c8:	mov	x0, x20
    90cc:	bl	4e60 <mpfr_add@plt>
    90d0:	b	9100 <mpc_fma_naive@@Base+0x26c>
    90d4:	bl	5440 <mpfr_init2@plt>
    90d8:	mov	x0, sp
    90dc:	sub	x1, x29, #0x20
    90e0:	mov	w3, #0x1                   	// #1
    90e4:	mov	x2, x21
    90e8:	bl	4e60 <mpfr_add@plt>
    90ec:	and	w3, w19, #0xf
    90f0:	mov	x1, sp
    90f4:	add	x2, sp, #0x20
    90f8:	mov	x0, x20
    90fc:	bl	4a60 <mpfr_sub@plt>
    9100:	ldur	x10, [x29, #-48]
    9104:	mov	x8, #0x4                   	// #4
    9108:	movk	x8, #0x8000, lsl #48
    910c:	mov	w22, w0
    9110:	cmp	x10, x8
    9114:	b.lt	9190 <mpc_fma_naive@@Base+0x2fc>  // b.tstop
    9118:	ldr	x9, [sp, #80]
    911c:	ldur	x1, [x29, #-64]
    9120:	cmp	x9, x8
    9124:	mov	x8, x1
    9128:	b.lt	9150 <mpc_fma_naive@@Base+0x2bc>  // b.tstop
    912c:	ldr	x8, [sp, #64]
    9130:	sub	x11, x10, x1
    9134:	cmp	x10, x9
    9138:	csel	x12, x9, x10, lt  // lt = tstop
    913c:	sub	x8, x9, x8
    9140:	cmp	x11, x8
    9144:	csel	x8, x8, x11, gt
    9148:	sub	x8, x12, x8
    914c:	add	x8, x8, #0x1
    9150:	ldr	x11, [x21, #48]
    9154:	mov	x12, #0x4                   	// #4
    9158:	movk	x12, #0x8000, lsl #48
    915c:	add	x24, x21, #0x20
    9160:	cmp	x11, x12
    9164:	b.lt	91a0 <mpc_fma_naive@@Base+0x30c>  // b.tstop
    9168:	ldr	x12, [x24]
    916c:	sub	x13, x10, x1
    9170:	cmp	x10, x11
    9174:	csel	x10, x11, x10, lt  // lt = tstop
    9178:	sub	x12, x11, x12
    917c:	cmp	x13, x12
    9180:	csel	x11, x12, x13, gt
    9184:	sub	x10, x10, x11
    9188:	add	x1, x10, #0x1
    918c:	b	91a0 <mpc_fma_naive@@Base+0x30c>
    9190:	mov	x24, x21
    9194:	ldr	x8, [sp, #64]
    9198:	ldr	x1, [x24, #32]!
    919c:	ldr	x9, [sp, #80]
    91a0:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    91a4:	cmp	x9, x10
    91a8:	b.le	91ec <mpc_fma_naive@@Base+0x358>
    91ac:	ldr	x11, [x21, #48]
    91b0:	ldr	x10, [sp, #64]
    91b4:	mov	x12, #0x4                   	// #4
    91b8:	movk	x12, #0x8000, lsl #48
    91bc:	cmp	x11, x12
    91c0:	b.lt	91f0 <mpc_fma_naive@@Base+0x35c>  // b.tstop
    91c4:	ldr	x12, [x21, #32]
    91c8:	sub	x10, x9, x10
    91cc:	cmp	x9, x11
    91d0:	csel	x9, x11, x9, lt  // lt = tstop
    91d4:	sub	x12, x11, x12
    91d8:	cmp	x10, x12
    91dc:	csel	x10, x12, x10, gt
    91e0:	sub	x9, x9, x10
    91e4:	add	x10, x9, #0x1
    91e8:	b	91f0 <mpc_fma_naive@@Base+0x35c>
    91ec:	ldr	x10, [x21, #32]
    91f0:	cmp	x8, x1
    91f4:	b.gt	9234 <mpc_fma_naive@@Base+0x3a0>
    91f8:	cmp	x8, x10
    91fc:	b.gt	9234 <mpc_fma_naive@@Base+0x3a0>
    9200:	mov	x0, sp
    9204:	mov	x1, x8
    9208:	bl	4c80 <mpfr_set_prec@plt>
    920c:	mov	x0, sp
    9210:	sub	x1, x29, #0x40
    9214:	add	x2, sp, #0x40
    9218:	mov	w3, #0x1                   	// #1
    921c:	bl	4e60 <mpfr_add@plt>
    9220:	add	x0, x20, #0x20
    9224:	asr	w3, w19, #4
    9228:	mov	x1, sp
    922c:	mov	x2, x24
    9230:	b	9298 <mpc_fma_naive@@Base+0x404>
    9234:	mov	x0, sp
    9238:	cmp	x1, x10
    923c:	b.le	9270 <mpc_fma_naive@@Base+0x3dc>
    9240:	mov	x1, x23
    9244:	bl	4c80 <mpfr_set_prec@plt>
    9248:	mov	x0, sp
    924c:	add	x2, sp, #0x40
    9250:	mov	w3, #0x1                   	// #1
    9254:	mov	x1, x24
    9258:	bl	4e60 <mpfr_add@plt>
    925c:	add	x0, x20, #0x20
    9260:	asr	w3, w19, #4
    9264:	mov	x1, sp
    9268:	sub	x2, x29, #0x40
    926c:	b	9298 <mpc_fma_naive@@Base+0x404>
    9270:	bl	4c80 <mpfr_set_prec@plt>
    9274:	mov	x0, sp
    9278:	sub	x1, x29, #0x40
    927c:	mov	w3, #0x1                   	// #1
    9280:	mov	x2, x24
    9284:	bl	4e60 <mpfr_add@plt>
    9288:	add	x0, x20, #0x20
    928c:	asr	w3, w19, #4
    9290:	mov	x1, sp
    9294:	add	x2, sp, #0x40
    9298:	bl	4e60 <mpfr_add@plt>
    929c:	mov	w19, w0
    92a0:	sub	x0, x29, #0x20
    92a4:	bl	4d60 <mpfr_clear@plt>
    92a8:	sub	x0, x29, #0x40
    92ac:	bl	4d60 <mpfr_clear@plt>
    92b0:	add	x0, sp, #0x40
    92b4:	bl	4d60 <mpfr_clear@plt>
    92b8:	add	x0, sp, #0x20
    92bc:	bl	4d60 <mpfr_clear@plt>
    92c0:	mov	x0, sp
    92c4:	bl	4d60 <mpfr_clear@plt>
    92c8:	cmp	w22, #0x0
    92cc:	mov	w8, #0x2                   	// #2
    92d0:	cset	w9, ne  // ne = any
    92d4:	csel	w8, w8, w9, lt  // lt = tstop
    92d8:	cmp	w19, #0x0
    92dc:	cset	w9, ne  // ne = any
    92e0:	ldp	x20, x19, [sp, #224]
    92e4:	ldp	x22, x21, [sp, #208]
    92e8:	ldp	x24, x23, [sp, #192]
    92ec:	ldr	x25, [sp, #176]
    92f0:	ldp	x29, x30, [sp, #160]
    92f4:	lsl	w9, w9, #2
    92f8:	mov	w10, #0x8                   	// #8
    92fc:	csel	w9, w10, w9, lt  // lt = tstop
    9300:	orr	w0, w9, w8
    9304:	add	sp, sp, #0xf0
    9308:	ret

000000000000930c <mpc_fma@@Base>:
    930c:	sub	sp, sp, #0xc0
    9310:	stp	x24, x23, [sp, #144]
    9314:	mov	x23, x0
    9318:	mov	x0, x1
    931c:	stp	x29, x30, [sp, #96]
    9320:	stp	x28, x27, [sp, #112]
    9324:	stp	x26, x25, [sp, #128]
    9328:	stp	x22, x21, [sp, #160]
    932c:	stp	x20, x19, [sp, #176]
    9330:	add	x29, sp, #0x60
    9334:	mov	w19, w4
    9338:	mov	x20, x3
    933c:	mov	x21, x2
    9340:	mov	x22, x1
    9344:	bl	54d0 <mpfr_number_p@plt>
    9348:	cbz	w0, 9430 <mpc_fma@@Base+0x124>
    934c:	add	x0, x22, #0x20
    9350:	bl	54d0 <mpfr_number_p@plt>
    9354:	cbz	w0, 9430 <mpc_fma@@Base+0x124>
    9358:	mov	x0, x21
    935c:	bl	54d0 <mpfr_number_p@plt>
    9360:	cbz	w0, 9430 <mpc_fma@@Base+0x124>
    9364:	add	x0, x21, #0x20
    9368:	bl	54d0 <mpfr_number_p@plt>
    936c:	cbz	w0, 9430 <mpc_fma@@Base+0x124>
    9370:	mov	x0, x20
    9374:	bl	54d0 <mpfr_number_p@plt>
    9378:	cbz	w0, 9430 <mpc_fma@@Base+0x124>
    937c:	add	x0, x20, #0x20
    9380:	bl	54d0 <mpfr_number_p@plt>
    9384:	cbz	w0, 9430 <mpc_fma@@Base+0x124>
    9388:	ldr	x25, [x23]
    938c:	ldr	x27, [x23, #32]
    9390:	mov	x0, x25
    9394:	bl	4d20 <mpc_ceil_log2@plt>
    9398:	add	x8, x25, x0
    939c:	mov	x0, x27
    93a0:	add	x24, x8, #0xa
    93a4:	bl	4d20 <mpc_ceil_log2@plt>
    93a8:	add	x8, x27, x0
    93ac:	add	x26, x8, #0xa
    93b0:	add	x0, sp, #0x20
    93b4:	mov	x1, x24
    93b8:	mov	x2, x26
    93bc:	bl	53c0 <mpc_init3@plt>
    93c0:	add	x0, sp, #0x20
    93c4:	mov	w3, #0x11                  	// #17
    93c8:	mov	x1, x22
    93cc:	mov	x2, x21
    93d0:	bl	4ed0 <mpc_mul@plt>
    93d4:	ldr	x28, [sp, #48]
    93d8:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    93dc:	cmp	x28, x8
    93e0:	b.eq	9410 <mpc_fma@@Base+0x104>  // b.none
    93e4:	mov	x9, x25
    93e8:	ldr	x25, [sp, #80]
    93ec:	tst	w19, #0xf
    93f0:	cinc	x9, x9, eq  // eq = none
    93f4:	cmp	w19, #0x10
    93f8:	add	x10, sp, #0x20
    93fc:	str	x9, [sp, #8]
    9400:	cinc	x9, x27, cc  // cc = lo, ul, last
    9404:	cmp	x25, x8
    9408:	str	x9, [sp]
    940c:	b.ne	9470 <mpc_fma@@Base+0x164>  // b.any
    9410:	mov	w24, wzr
    9414:	mov	w25, wzr
    9418:	str	wzr, [sp, #28]
    941c:	add	x0, sp, #0x20
    9420:	bl	4a10 <mpc_clear@plt>
    9424:	cbz	w25, 9430 <mpc_fma@@Base+0x124>
    9428:	ldr	w8, [sp, #28]
    942c:	cbnz	w8, 944c <mpc_fma@@Base+0x140>
    9430:	mov	x0, x23
    9434:	mov	x1, x22
    9438:	mov	x2, x21
    943c:	mov	x3, x20
    9440:	mov	w4, w19
    9444:	bl	5560 <mpc_fma_naive@plt>
    9448:	mov	w24, w0
    944c:	mov	w0, w24
    9450:	ldp	x20, x19, [sp, #176]
    9454:	ldp	x22, x21, [sp, #160]
    9458:	ldp	x24, x23, [sp, #144]
    945c:	ldp	x26, x25, [sp, #128]
    9460:	ldp	x28, x27, [sp, #112]
    9464:	ldp	x29, x30, [sp, #96]
    9468:	add	sp, sp, #0xc0
    946c:	ret
    9470:	add	x8, x10, #0x20
    9474:	mov	w27, wzr
    9478:	stp	x8, xzr, [sp, #16]
    947c:	add	x0, sp, #0x20
    9480:	add	x1, sp, #0x20
    9484:	mov	w3, #0x11                  	// #17
    9488:	mov	x2, x20
    948c:	bl	4cd0 <mpc_add@plt>
    9490:	ldr	x8, [sp, #48]
    9494:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    9498:	cmp	x8, x10
    949c:	b.eq	95a8 <mpc_fma@@Base+0x29c>  // b.none
    94a0:	ldr	x9, [sp, #80]
    94a4:	cmp	x9, x10
    94a8:	b.eq	95a8 <mpc_fma@@Base+0x29c>  // b.none
    94ac:	sub	x8, x28, x8
    94b0:	sub	x9, x25, x9
    94b4:	cmp	x8, #0x1
    94b8:	mov	w10, #0x1                   	// #1
    94bc:	csinc	x28, x10, x8, lt  // lt = tstop
    94c0:	cmp	x9, #0x1
    94c4:	csinc	x25, x10, x9, lt  // lt = tstop
    94c8:	subs	x1, x24, x28
    94cc:	b.ge	94d8 <mpc_fma@@Base+0x1cc>  // b.tcont
    94d0:	mov	w0, wzr
    94d4:	b	94ec <mpc_fma@@Base+0x1e0>
    94d8:	ldr	x4, [sp, #8]
    94dc:	add	x0, sp, #0x20
    94e0:	mov	w3, #0x1                   	// #1
    94e4:	mov	w2, wzr
    94e8:	bl	5450 <mpfr_can_round@plt>
    94ec:	subs	x1, x26, x25
    94f0:	str	w0, [sp, #24]
    94f4:	b.ge	9500 <mpc_fma@@Base+0x1f4>  // b.tcont
    94f8:	mov	w9, wzr
    94fc:	b	9530 <mpc_fma@@Base+0x224>
    9500:	ldr	x0, [sp, #16]
    9504:	ldr	x4, [sp]
    9508:	mov	w3, #0x1                   	// #1
    950c:	mov	w2, wzr
    9510:	bl	5450 <mpfr_can_round@plt>
    9514:	mov	w8, w0
    9518:	ldr	w0, [sp, #24]
    951c:	cbz	w0, 952c <mpc_fma@@Base+0x220>
    9520:	mov	w9, w8
    9524:	cbz	w8, 9530 <mpc_fma@@Base+0x224>
    9528:	b	95c0 <mpc_fma@@Base+0x2b4>
    952c:	mov	w9, w8
    9530:	cmp	w27, #0x1
    9534:	str	w9, [sp, #28]
    9538:	b.eq	95b4 <mpc_fma@@Base+0x2a8>  // b.none
    953c:	cmp	w0, #0x0
    9540:	ccmp	x28, #0x1, #0x4, eq  // eq = none
    9544:	csel	x8, x28, xzr, gt
    9548:	cmp	w9, #0x0
    954c:	add	x24, x8, x24
    9550:	ccmp	x25, #0x1, #0x4, eq  // eq = none
    9554:	csel	x8, x25, xzr, gt
    9558:	add	x0, sp, #0x20
    955c:	mov	x1, x24
    9560:	add	x26, x8, x26
    9564:	bl	4c80 <mpfr_set_prec@plt>
    9568:	ldr	x0, [sp, #16]
    956c:	mov	x1, x26
    9570:	bl	4c80 <mpfr_set_prec@plt>
    9574:	add	x0, sp, #0x20
    9578:	mov	w3, #0x11                  	// #17
    957c:	mov	x1, x22
    9580:	mov	x2, x21
    9584:	bl	4ed0 <mpc_mul@plt>
    9588:	ldr	x28, [sp, #48]
    958c:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    9590:	cmp	x28, x8
    9594:	b.eq	95a8 <mpc_fma@@Base+0x29c>  // b.none
    9598:	ldr	x25, [sp, #80]
    959c:	mov	w27, #0x1                   	// #1
    95a0:	cmp	x25, x8
    95a4:	b.ne	947c <mpc_fma@@Base+0x170>  // b.any
    95a8:	ldr	w25, [sp, #24]
    95ac:	mov	w24, wzr
    95b0:	b	941c <mpc_fma@@Base+0x110>
    95b4:	mov	w24, wzr
    95b8:	mov	w25, w0
    95bc:	b	941c <mpc_fma@@Base+0x110>
    95c0:	add	x1, sp, #0x20
    95c4:	mov	x0, x23
    95c8:	mov	w2, w19
    95cc:	bl	5580 <mpc_set@plt>
    95d0:	mov	w8, #0x1                   	// #1
    95d4:	mov	w24, w0
    95d8:	mov	w25, #0x1                   	// #1
    95dc:	str	w8, [sp, #28]
    95e0:	b	941c <mpc_fma@@Base+0x110>

00000000000095e4 <mpc_fr_div@@Base>:
    95e4:	sub	sp, sp, #0x70
    95e8:	stp	x29, x30, [sp, #64]
    95ec:	stp	x22, x21, [sp, #80]
    95f0:	stp	x20, x19, [sp, #96]
    95f4:	ldp	q1, q0, [x1]
    95f8:	mov	x8, sp
    95fc:	add	x22, x8, #0x20
    9600:	mov	x21, x0
    9604:	mov	x0, x22
    9608:	add	x29, sp, #0x40
    960c:	mov	w19, w3
    9610:	mov	x20, x2
    9614:	stp	q1, q0, [sp]
    9618:	bl	4aa0 <mpfr_init@plt>
    961c:	mov	w8, #0x1                   	// #1
    9620:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    9624:	mov	x1, sp
    9628:	mov	x0, x21
    962c:	mov	x2, x20
    9630:	mov	w3, w19
    9634:	str	w8, [sp, #40]
    9638:	str	x9, [sp, #48]
    963c:	bl	5250 <mpc_div@plt>
    9640:	mov	w19, w0
    9644:	mov	x0, x22
    9648:	bl	4d60 <mpfr_clear@plt>
    964c:	mov	w0, w19
    9650:	ldp	x20, x19, [sp, #96]
    9654:	ldp	x22, x21, [sp, #80]
    9658:	ldp	x29, x30, [sp, #64]
    965c:	add	sp, sp, #0x70
    9660:	ret

0000000000009664 <mpc_fr_sub@@Base>:
    9664:	stp	x29, x30, [sp, #-48]!
    9668:	stp	x20, x19, [sp, #32]
    966c:	mov	w19, w3
    9670:	and	w3, w3, #0xf
    9674:	stp	x22, x21, [sp, #16]
    9678:	mov	x29, sp
    967c:	mov	x20, x2
    9680:	mov	x21, x0
    9684:	bl	4a60 <mpfr_sub@plt>
    9688:	mov	w22, w0
    968c:	add	x0, x21, #0x20
    9690:	add	x1, x20, #0x20
    9694:	asr	w2, w19, #4
    9698:	bl	4b80 <mpfr_neg@plt>
    969c:	cmp	w22, #0x0
    96a0:	mov	w8, #0x2                   	// #2
    96a4:	cset	w9, ne  // ne = any
    96a8:	csel	w8, w8, w9, lt  // lt = tstop
    96ac:	cmp	w0, #0x0
    96b0:	cset	w9, ne  // ne = any
    96b4:	ldp	x20, x19, [sp, #32]
    96b8:	ldp	x22, x21, [sp, #16]
    96bc:	lsl	w9, w9, #2
    96c0:	mov	w10, #0x8                   	// #8
    96c4:	csel	w9, w10, w9, lt  // lt = tstop
    96c8:	orr	w0, w9, w8
    96cc:	ldp	x29, x30, [sp], #48
    96d0:	ret

00000000000096d4 <mpc_get_prec2@@Base>:
    96d4:	ldr	x8, [x2]
    96d8:	str	x8, [x0]
    96dc:	ldr	x8, [x2, #32]
    96e0:	str	x8, [x1]
    96e4:	ret

00000000000096e8 <mpc_get_prec@@Base>:
    96e8:	ldr	x8, [x0]
    96ec:	ldr	x9, [x0, #32]
    96f0:	cmp	x9, x8
    96f4:	csel	x0, x8, xzr, eq  // eq = none
    96f8:	ret

00000000000096fc <mpc_get_version@@Base>:
    96fc:	adrp	x0, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    9700:	add	x0, x0, #0x491
    9704:	ret

0000000000009708 <mpc_get_dc@@Base>:
    9708:	stp	d9, d8, [sp, #-48]!
    970c:	stp	x20, x19, [sp, #32]
    9710:	mov	w19, w1
    9714:	mov	x20, x0
    9718:	add	x0, x0, #0x20
    971c:	asr	w1, w1, #4
    9720:	stp	x29, x30, [sp, #16]
    9724:	mov	x29, sp
    9728:	bl	4b50 <mpfr_get_d@plt>
    972c:	mov	v8.16b, v0.16b
    9730:	fmov	d0, xzr
    9734:	and	w1, w19, #0xf
    9738:	mov	x0, x20
    973c:	fmul	d9, d8, d0
    9740:	bl	4b50 <mpfr_get_d@plt>
    9744:	ldp	x20, x19, [sp, #32]
    9748:	ldp	x29, x30, [sp, #16]
    974c:	fadd	d0, d9, d0
    9750:	mov	v1.16b, v8.16b
    9754:	ldp	d9, d8, [sp], #48
    9758:	ret

000000000000975c <mpc_get_ldc@@Base>:
    975c:	sub	sp, sp, #0x40
    9760:	stp	x20, x19, [sp, #48]
    9764:	mov	w19, w1
    9768:	mov	x20, x0
    976c:	add	x0, x0, #0x20
    9770:	asr	w1, w1, #4
    9774:	stp	x29, x30, [sp, #32]
    9778:	add	x29, sp, #0x20
    977c:	bl	5110 <mpfr_get_ld@plt>
    9780:	adrp	x8, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    9784:	ldr	q1, [x8, #1184]
    9788:	str	q0, [sp, #16]
    978c:	bl	12b40 <mpc_ui_ui_sub@@Base+0xbb0>
    9790:	and	w1, w19, #0xf
    9794:	mov	x0, x20
    9798:	str	q0, [sp]
    979c:	bl	5110 <mpfr_get_ld@plt>
    97a0:	mov	v1.16b, v0.16b
    97a4:	ldr	q0, [sp]
    97a8:	bl	12018 <mpc_ui_ui_sub@@Base+0x88>
    97ac:	ldr	q1, [sp, #16]
    97b0:	ldp	x20, x19, [sp, #48]
    97b4:	ldp	x29, x30, [sp, #32]
    97b8:	add	sp, sp, #0x40
    97bc:	ret

00000000000097c0 <mpc_get_str@@Base>:
    97c0:	stp	x29, x30, [sp, #-64]!
    97c4:	sub	w8, w0, #0x2
    97c8:	cmp	w8, #0x22
    97cc:	str	x23, [sp, #16]
    97d0:	stp	x22, x21, [sp, #32]
    97d4:	stp	x20, x19, [sp, #48]
    97d8:	mov	x29, sp
    97dc:	b.ls	97e8 <mpc_get_str@@Base+0x28>  // b.plast
    97e0:	mov	x21, xzr
    97e4:	b	9888 <mpc_get_str@@Base+0xc8>
    97e8:	mov	w20, w3
    97ec:	and	w3, w3, #0xf
    97f0:	mov	x22, x2
    97f4:	mov	w21, w0
    97f8:	mov	x23, x1
    97fc:	bl	98d0 <mpc_get_str@@Base+0x110>
    9800:	mov	x19, x0
    9804:	add	x2, x22, #0x20
    9808:	asr	w3, w20, #4
    980c:	mov	w0, w21
    9810:	mov	x1, x23
    9814:	bl	98d0 <mpc_get_str@@Base+0x110>
    9818:	mov	x20, x0
    981c:	mov	x0, x19
    9820:	bl	4a00 <strlen@plt>
    9824:	mov	x21, x0
    9828:	mov	x0, x20
    982c:	bl	4a00 <strlen@plt>
    9830:	add	x8, x21, x0
    9834:	add	x0, x8, #0x4
    9838:	bl	4bf0 <mpc_alloc_str@plt>
    983c:	cbz	x0, 98a0 <mpc_get_str@@Base+0xe0>
    9840:	mov	w8, #0x28                  	// #40
    9844:	mov	x1, x19
    9848:	mov	x21, x0
    984c:	strh	w8, [x0]
    9850:	bl	4de0 <strcat@plt>
    9854:	bl	4a00 <strlen@plt>
    9858:	mov	w8, #0x20                  	// #32
    985c:	strh	w8, [x21, x0]
    9860:	mov	x0, x21
    9864:	mov	x1, x20
    9868:	bl	4de0 <strcat@plt>
    986c:	bl	4a00 <strlen@plt>
    9870:	mov	w8, #0x29                  	// #41
    9874:	strh	w8, [x21, x0]
    9878:	mov	x0, x19
    987c:	bl	4ff0 <mpc_free_str@plt>
    9880:	mov	x0, x20
    9884:	bl	4ff0 <mpc_free_str@plt>
    9888:	mov	x0, x21
    988c:	ldp	x20, x19, [sp, #48]
    9890:	ldp	x22, x21, [sp, #32]
    9894:	ldr	x23, [sp, #16]
    9898:	ldp	x29, x30, [sp], #64
    989c:	ret
    98a0:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    98a4:	ldr	x8, [x8, #4008]
    98a8:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    98ac:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    98b0:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    98b4:	ldr	x0, [x8]
    98b8:	add	x1, x1, #0x3b0
    98bc:	add	x2, x2, #0x4b0
    98c0:	add	x4, x4, #0x4b8
    98c4:	mov	w3, #0xe0                  	// #224
    98c8:	bl	55a0 <fprintf@plt>
    98cc:	bl	5000 <abort@plt>
    98d0:	stp	x29, x30, [sp, #-80]!
    98d4:	stp	x24, x23, [sp, #32]
    98d8:	stp	x22, x21, [sp, #48]
    98dc:	stp	x20, x19, [sp, #64]
    98e0:	ldr	x8, [x2, #16]
    98e4:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    98e8:	mov	x21, x2
    98ec:	str	x25, [sp, #16]
    98f0:	cmp	x8, x9
    98f4:	mov	x29, sp
    98f8:	b.ne	992c <mpc_get_str@@Base+0x16c>  // b.any
    98fc:	mov	w0, #0x3                   	// #3
    9900:	bl	4bf0 <mpc_alloc_str@plt>
    9904:	ldr	w8, [x21, #8]
    9908:	mov	w9, #0x2b                  	// #43
    990c:	mov	w10, #0x2d                  	// #45
    9910:	mov	w11, #0x30                  	// #48
    9914:	cmp	w8, #0x0
    9918:	csel	w8, w10, w9, lt  // lt = tstop
    991c:	mov	x22, x0
    9920:	strb	w8, [x0]
    9924:	sturh	w11, [x0, #1]
    9928:	b	9abc <mpc_get_str@@Base+0x2fc>
    992c:	mov	w20, w0
    9930:	mov	w5, w3
    9934:	mov	x3, x1
    9938:	add	x1, x29, #0x18
    993c:	mov	x0, xzr
    9940:	mov	w2, w20
    9944:	mov	x4, x21
    9948:	bl	50c0 <mpfr_get_str@plt>
    994c:	cbz	x0, 9ad8 <mpc_get_str@@Base+0x318>
    9950:	ldr	x22, [x29, #24]
    9954:	mov	x19, x0
    9958:	mov	x0, x21
    995c:	bl	54d0 <mpfr_number_p@plt>
    9960:	mov	w21, w0
    9964:	mov	x0, x19
    9968:	bl	4a00 <strlen@plt>
    996c:	mov	x8, x0
    9970:	cbz	w21, 999c <mpc_get_str@@Base+0x1dc>
    9974:	ldrb	w24, [x19]
    9978:	sub	x9, x22, #0x1
    997c:	lsl	x10, x9, #2
    9980:	cmp	w20, #0x10
    9984:	csel	x21, x10, x9, eq  // eq = none
    9988:	cbz	x21, 99b4 <mpc_get_str@@Base+0x1f4>
    998c:	add	x0, x8, #0x5
    9990:	tbnz	x21, #63, 99bc <mpc_get_str@@Base+0x1fc>
    9994:	mov	x9, x21
    9998:	b	99e0 <mpc_get_str@@Base+0x220>
    999c:	add	x0, x8, #0x1
    99a0:	bl	4bf0 <mpc_alloc_str@plt>
    99a4:	mov	x1, x19
    99a8:	mov	x22, x0
    99ac:	bl	5340 <strcpy@plt>
    99b0:	b	9ab4 <mpc_get_str@@Base+0x2f4>
    99b4:	add	x0, x8, #0x2
    99b8:	b	9a04 <mpc_get_str@@Base+0x244>
    99bc:	cmn	x21, #0xb
    99c0:	b.gt	99dc <mpc_get_str@@Base+0x21c>
    99c4:	mov	x9, #0x9999999999999999    	// #-7378697629483820647
    99c8:	smulh	x9, x21, x9
    99cc:	asr	x10, x9, #2
    99d0:	add	x9, x10, x9, lsr #63
    99d4:	add	x0, x8, #0x6
    99d8:	b	99e0 <mpc_get_str@@Base+0x220>
    99dc:	neg	x9, x21
    99e0:	cmp	x9, #0xa
    99e4:	b.lt	9a04 <mpc_get_str@@Base+0x244>  // b.tstop
    99e8:	mov	x8, #0xcccccccccccccccc    	// #-3689348814741910324
    99ec:	movk	x8, #0xcccd
    99f0:	umulh	x10, x9, x8
    99f4:	cmp	x9, #0x63
    99f8:	lsr	x9, x10, #3
    99fc:	add	x0, x0, #0x1
    9a00:	b.hi	99f0 <mpc_get_str@@Base+0x230>  // b.pmore
    9a04:	bl	4bf0 <mpc_alloc_str@plt>
    9a08:	mov	x23, x19
    9a0c:	ldrb	w8, [x23], #1
    9a10:	mov	x25, x0
    9a14:	mov	x22, x0
    9a18:	cmp	w24, #0x2d
    9a1c:	strb	w8, [x25], #1
    9a20:	b.eq	9a2c <mpc_get_str@@Base+0x26c>  // b.none
    9a24:	cmp	w24, #0x2b
    9a28:	b.ne	9a3c <mpc_get_str@@Base+0x27c>  // b.any
    9a2c:	ldrb	w8, [x19, #1]
    9a30:	add	x23, x19, #0x2
    9a34:	add	x25, x22, #0x2
    9a38:	strb	w8, [x22, #1]
    9a3c:	bl	4c70 <localeconv@plt>
    9a40:	ldr	x8, [x0]
    9a44:	mov	x0, x22
    9a48:	mov	x1, x23
    9a4c:	ldrb	w8, [x8]
    9a50:	strb	wzr, [x25, #1]
    9a54:	strb	w8, [x25]
    9a58:	bl	4de0 <strcat@plt>
    9a5c:	cbz	x21, 9ab4 <mpc_get_str@@Base+0x2f4>
    9a60:	mov	x0, x19
    9a64:	bl	4a00 <strlen@plt>
    9a68:	add	x8, x22, x0
    9a6c:	cmp	w20, #0x10
    9a70:	add	x0, x8, #0x1
    9a74:	b.eq	9a88 <mpc_get_str@@Base+0x2c8>  // b.none
    9a78:	cmp	w20, #0xa
    9a7c:	b.eq	9a90 <mpc_get_str@@Base+0x2d0>  // b.none
    9a80:	cmp	w20, #0x2
    9a84:	b.ne	9a98 <mpc_get_str@@Base+0x2d8>  // b.any
    9a88:	mov	w8, #0x70                  	// #112
    9a8c:	b	9a9c <mpc_get_str@@Base+0x2dc>
    9a90:	mov	w8, #0x65                  	// #101
    9a94:	b	9a9c <mpc_get_str@@Base+0x2dc>
    9a98:	mov	w8, #0x40                  	// #64
    9a9c:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    9aa0:	strb	w8, [x0]
    9aa4:	strb	wzr, [x0, #1]!
    9aa8:	add	x1, x1, #0x4d9
    9aac:	mov	x2, x21
    9ab0:	bl	4b30 <sprintf@plt>
    9ab4:	mov	x0, x19
    9ab8:	bl	52e0 <mpfr_free_str@plt>
    9abc:	mov	x0, x22
    9ac0:	ldp	x20, x19, [sp, #64]
    9ac4:	ldp	x22, x21, [sp, #48]
    9ac8:	ldp	x24, x23, [sp, #32]
    9acc:	ldr	x25, [sp, #16]
    9ad0:	ldp	x29, x30, [sp], #80
    9ad4:	ret
    9ad8:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    9adc:	ldr	x8, [x8, #4008]
    9ae0:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    9ae4:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    9ae8:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    9aec:	ldr	x0, [x8]
    9af0:	add	x1, x1, #0x3b0
    9af4:	add	x2, x2, #0x4b0
    9af8:	add	x4, x4, #0x4cc
    9afc:	mov	w3, #0xc8                  	// #200
    9b00:	bl	55a0 <fprintf@plt>
    9b04:	bl	5000 <abort@plt>

0000000000009b08 <mpc_imag@@Base>:
    9b08:	ldr	w3, [x1, #40]
    9b0c:	add	x1, x1, #0x20
    9b10:	b	51d0 <mpfr_set4@plt>

0000000000009b14 <mpc_init2@@Base>:
    9b14:	stp	x29, x30, [sp, #-32]!
    9b18:	stp	x20, x19, [sp, #16]
    9b1c:	mov	x29, sp
    9b20:	mov	x19, x1
    9b24:	mov	x20, x0
    9b28:	bl	5440 <mpfr_init2@plt>
    9b2c:	add	x0, x20, #0x20
    9b30:	mov	x1, x19
    9b34:	ldp	x20, x19, [sp, #16]
    9b38:	ldp	x29, x30, [sp], #32
    9b3c:	b	5440 <mpfr_init2@plt>

0000000000009b40 <mpc_init3@@Base>:
    9b40:	stp	x29, x30, [sp, #-32]!
    9b44:	stp	x20, x19, [sp, #16]
    9b48:	mov	x29, sp
    9b4c:	mov	x19, x2
    9b50:	mov	x20, x0
    9b54:	bl	5440 <mpfr_init2@plt>
    9b58:	add	x0, x20, #0x20
    9b5c:	mov	x1, x19
    9b60:	ldp	x20, x19, [sp, #16]
    9b64:	ldp	x29, x30, [sp], #32
    9b68:	b	5440 <mpfr_init2@plt>

0000000000009b6c <mpc_inp_str@@Base>:
    9b6c:	sub	sp, sp, #0x80
    9b70:	stp	x29, x30, [sp, #32]
    9b74:	stp	x28, x27, [sp, #48]
    9b78:	stp	x26, x25, [sp, #64]
    9b7c:	stp	x24, x23, [sp, #80]
    9b80:	stp	x22, x21, [sp, #96]
    9b84:	stp	x20, x19, [sp, #112]
    9b88:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    9b8c:	ldr	x8, [x8, #4040]
    9b90:	cmp	x1, #0x0
    9b94:	mov	x20, x0
    9b98:	add	x29, sp, #0x20
    9b9c:	ldr	x8, [x8]
    9ba0:	mov	w28, w4
    9ba4:	mov	w23, w3
    9ba8:	mov	x19, x2
    9bac:	csel	x25, x8, x1, eq  // eq = none
    9bb0:	mov	x0, x25
    9bb4:	bl	9e00 <mpc_inp_str@@Base+0x294>
    9bb8:	mov	x21, x0
    9bbc:	mov	x0, x25
    9bc0:	bl	4f20 <getc@plt>
    9bc4:	cmn	w0, #0x1
    9bc8:	b.eq	9c30 <mpc_inp_str@@Base+0xc4>  // b.none
    9bcc:	cmp	w0, #0x28
    9bd0:	b.ne	9c38 <mpc_inp_str@@Base+0xcc>  // b.any
    9bd4:	mov	x0, x25
    9bd8:	bl	9e00 <mpc_inp_str@@Base+0x294>
    9bdc:	mov	x21, x0
    9be0:	mov	x0, x25
    9be4:	bl	9e84 <mpc_inp_str@@Base+0x318>
    9be8:	mov	x27, x0
    9bec:	bl	4a00 <strlen@plt>
    9bf0:	add	x24, x0, #0x1
    9bf4:	mov	x0, x25
    9bf8:	bl	4f20 <getc@plt>
    9bfc:	mov	w22, w0
    9c00:	bl	5170 <__ctype_b_loc@plt>
    9c04:	ldr	x8, [x0]
    9c08:	ldrh	w8, [x8, w22, sxtw #1]
    9c0c:	tbnz	w8, #13, 9c58 <mpc_inp_str@@Base+0xec>
    9c10:	cmn	w22, #0x1
    9c14:	b.eq	9c24 <mpc_inp_str@@Base+0xb8>  // b.none
    9c18:	mov	w0, w22
    9c1c:	mov	x1, x25
    9c20:	bl	5210 <ungetc@plt>
    9c24:	mov	x0, x27
    9c28:	bl	4ff0 <mpc_free_str@plt>
    9c2c:	b	9d60 <mpc_inp_str@@Base+0x1f4>
    9c30:	mov	x24, xzr
    9c34:	b	9d60 <mpc_inp_str@@Base+0x1f4>
    9c38:	mov	x1, x25
    9c3c:	bl	5210 <ungetc@plt>
    9c40:	mov	x0, x25
    9c44:	bl	9e84 <mpc_inp_str@@Base+0x318>
    9c48:	mov	x26, x0
    9c4c:	bl	4a00 <strlen@plt>
    9c50:	mov	x24, x0
    9c54:	b	9d38 <mpc_inp_str@@Base+0x1cc>
    9c58:	mov	w0, w22
    9c5c:	mov	x1, x25
    9c60:	stur	w28, [x29, #-4]
    9c64:	bl	5210 <ungetc@plt>
    9c68:	mov	x0, x25
    9c6c:	bl	9e00 <mpc_inp_str@@Base+0x294>
    9c70:	str	x0, [sp, #16]
    9c74:	mov	x0, x25
    9c78:	bl	9e84 <mpc_inp_str@@Base+0x318>
    9c7c:	mov	x22, x0
    9c80:	bl	4a00 <strlen@plt>
    9c84:	add	x24, x0, x24
    9c88:	add	x0, x24, #0x2
    9c8c:	str	x0, [sp, #8]
    9c90:	bl	4bf0 <mpc_alloc_str@plt>
    9c94:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    9c98:	add	x1, x1, #0x4de
    9c9c:	mov	x2, x27
    9ca0:	mov	x3, x22
    9ca4:	mov	x26, x0
    9ca8:	bl	4b30 <sprintf@plt>
    9cac:	tbnz	w0, #31, 9da4 <mpc_inp_str@@Base+0x238>
    9cb0:	add	x8, x24, #0x1
    9cb4:	mov	w28, w0
    9cb8:	cmp	x8, w0, uxtw
    9cbc:	b.ne	9dd0 <mpc_inp_str@@Base+0x264>  // b.any
    9cc0:	ldr	x8, [sp, #16]
    9cc4:	mov	x0, x27
    9cc8:	add	x21, x8, x21
    9ccc:	bl	4ff0 <mpc_free_str@plt>
    9cd0:	mov	x0, x22
    9cd4:	bl	4ff0 <mpc_free_str@plt>
    9cd8:	mov	x0, x25
    9cdc:	bl	9e00 <mpc_inp_str@@Base+0x294>
    9ce0:	add	x21, x21, x0
    9ce4:	mov	x0, x25
    9ce8:	bl	4f20 <getc@plt>
    9cec:	cmn	w0, #0x1
    9cf0:	b.eq	9d34 <mpc_inp_str@@Base+0x1c8>  // b.none
    9cf4:	cmp	w0, #0x29
    9cf8:	b.ne	9d2c <mpc_inp_str@@Base+0x1c0>  // b.any
    9cfc:	add	x2, x24, #0x3
    9d00:	ldr	x24, [sp, #8]
    9d04:	mov	x0, x26
    9d08:	mov	w22, w28
    9d0c:	mov	x1, x24
    9d10:	bl	5330 <mpc_realloc_str@plt>
    9d14:	mov	w8, #0x29                  	// #41
    9d18:	mov	x26, x0
    9d1c:	strb	w8, [x0, x22]
    9d20:	strb	wzr, [x0, x24]
    9d24:	mov	x24, x22
    9d28:	b	9d34 <mpc_inp_str@@Base+0x1c8>
    9d2c:	mov	x1, x25
    9d30:	bl	5210 <ungetc@plt>
    9d34:	ldur	w28, [x29, #-4]
    9d38:	mov	x0, x20
    9d3c:	mov	x1, x26
    9d40:	mov	w2, w23
    9d44:	mov	w3, w28
    9d48:	bl	5380 <mpc_set_str@plt>
    9d4c:	mov	w22, w0
    9d50:	mov	x0, x26
    9d54:	bl	4ff0 <mpc_free_str@plt>
    9d58:	cmn	w22, #0x1
    9d5c:	b.ne	9d74 <mpc_inp_str@@Base+0x208>  // b.any
    9d60:	mov	x0, x20
    9d64:	bl	4a40 <mpfr_set_nan@plt>
    9d68:	add	x0, x20, #0x20
    9d6c:	bl	4a40 <mpfr_set_nan@plt>
    9d70:	mov	w22, #0xffffffff            	// #-1
    9d74:	cbz	x19, 9d80 <mpc_inp_str@@Base+0x214>
    9d78:	add	x8, x24, x21
    9d7c:	str	x8, [x19]
    9d80:	mov	w0, w22
    9d84:	ldp	x20, x19, [sp, #112]
    9d88:	ldp	x22, x21, [sp, #96]
    9d8c:	ldp	x24, x23, [sp, #80]
    9d90:	ldp	x26, x25, [sp, #64]
    9d94:	ldp	x28, x27, [sp, #48]
    9d98:	ldp	x29, x30, [sp, #32]
    9d9c:	add	sp, sp, #0x80
    9da0:	ret
    9da4:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    9da8:	ldr	x8, [x8, #4008]
    9dac:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    9db0:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    9db4:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    9db8:	ldr	x0, [x8]
    9dbc:	add	x1, x1, #0x3b0
    9dc0:	add	x2, x2, #0x4e5
    9dc4:	add	x4, x4, #0x4ef
    9dc8:	mov	w3, #0xca                  	// #202
    9dcc:	b	9df8 <mpc_inp_str@@Base+0x28c>
    9dd0:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    9dd4:	ldr	x8, [x8, #4008]
    9dd8:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    9ddc:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    9de0:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    9de4:	ldr	x0, [x8]
    9de8:	add	x1, x1, #0x3b0
    9dec:	add	x2, x2, #0x4e5
    9df0:	add	x4, x4, #0x4f8
    9df4:	mov	w3, #0xcc                  	// #204
    9df8:	bl	55a0 <fprintf@plt>
    9dfc:	bl	5000 <abort@plt>
    9e00:	stp	x29, x30, [sp, #-48]!
    9e04:	stp	x22, x21, [sp, #16]
    9e08:	stp	x20, x19, [sp, #32]
    9e0c:	mov	x29, sp
    9e10:	mov	x19, x0
    9e14:	bl	4f20 <getc@plt>
    9e18:	cmn	w0, #0x1
    9e1c:	b.eq	9e5c <mpc_inp_str@@Base+0x2f0>  // b.none
    9e20:	mov	w21, w0
    9e24:	bl	5170 <__ctype_b_loc@plt>
    9e28:	mov	x22, x0
    9e2c:	mov	x20, xzr
    9e30:	ldr	x8, [x22]
    9e34:	and	w9, w21, #0xff
    9e38:	ldrh	w8, [x8, w9, uxtw #1]
    9e3c:	tbz	w8, #13, 9e64 <mpc_inp_str@@Base+0x2f8>
    9e40:	mov	x0, x19
    9e44:	bl	4f20 <getc@plt>
    9e48:	mov	w21, w0
    9e4c:	cmn	w0, #0x1
    9e50:	add	x20, x20, #0x1
    9e54:	b.ne	9e30 <mpc_inp_str@@Base+0x2c4>  // b.any
    9e58:	b	9e70 <mpc_inp_str@@Base+0x304>
    9e5c:	mov	x20, xzr
    9e60:	b	9e70 <mpc_inp_str@@Base+0x304>
    9e64:	mov	w0, w21
    9e68:	mov	x1, x19
    9e6c:	bl	5210 <ungetc@plt>
    9e70:	mov	x0, x20
    9e74:	ldp	x20, x19, [sp, #32]
    9e78:	ldp	x22, x21, [sp, #16]
    9e7c:	ldp	x29, x30, [sp], #48
    9e80:	ret
    9e84:	stp	x29, x30, [sp, #-96]!
    9e88:	stp	x20, x19, [sp, #80]
    9e8c:	mov	x19, x0
    9e90:	mov	w0, #0x64                  	// #100
    9e94:	str	x27, [sp, #16]
    9e98:	stp	x26, x25, [sp, #32]
    9e9c:	stp	x24, x23, [sp, #48]
    9ea0:	stp	x22, x21, [sp, #64]
    9ea4:	mov	x29, sp
    9ea8:	mov	w22, #0x64                  	// #100
    9eac:	bl	4bf0 <mpc_alloc_str@plt>
    9eb0:	mov	x20, x0
    9eb4:	mov	x8, xzr
    9eb8:	add	x26, x8, #0x3
    9ebc:	neg	x21, x22
    9ec0:	mov	x0, x19
    9ec4:	bl	4f20 <getc@plt>
    9ec8:	mov	w23, w0
    9ecc:	cmn	w0, #0x1
    9ed0:	b.eq	9f38 <mpc_inp_str@@Base+0x3cc>  // b.none
    9ed4:	cmp	w23, #0xa
    9ed8:	b.eq	9f38 <mpc_inp_str@@Base+0x3cc>  // b.none
    9edc:	bl	5170 <__ctype_b_loc@plt>
    9ee0:	orr	w8, w23, #0x1
    9ee4:	cmp	w8, #0x29
    9ee8:	b.eq	9f38 <mpc_inp_str@@Base+0x3cc>  // b.none
    9eec:	ldr	x8, [x0]
    9ef0:	and	w9, w23, #0xff
    9ef4:	ldrh	w8, [x8, w9, uxtw #1]
    9ef8:	tbnz	w8, #13, 9f38 <mpc_inp_str@@Base+0x3cc>
    9efc:	add	x8, x20, x26
    9f00:	add	x26, x26, #0x1
    9f04:	add	x9, x21, x26
    9f08:	cmp	x9, #0x3
    9f0c:	sturb	w23, [x8, #-3]
    9f10:	b.ne	9ec0 <mpc_inp_str@@Base+0x354>  // b.any
    9f14:	lsl	x21, x22, #1
    9f18:	mov	x0, x20
    9f1c:	mov	x1, x22
    9f20:	mov	x2, x21
    9f24:	bl	5330 <mpc_realloc_str@plt>
    9f28:	mov	x20, x0
    9f2c:	sub	x8, x26, #0x3
    9f30:	mov	x22, x21
    9f34:	b	9eb8 <mpc_inp_str@@Base+0x34c>
    9f38:	sub	x21, x26, #0x2
    9f3c:	mov	x0, x20
    9f40:	mov	x1, x22
    9f44:	mov	x2, x21
    9f48:	bl	5330 <mpc_realloc_str@plt>
    9f4c:	mov	x20, x0
    9f50:	add	x9, x0, x26
    9f54:	subs	x8, x26, #0x3
    9f58:	sturb	wzr, [x9, #-3]
    9f5c:	b.eq	a060 <mpc_inp_str@@Base+0x4f4>  // b.none
    9f60:	cmp	w23, #0x28
    9f64:	b.eq	9f78 <mpc_inp_str@@Base+0x40c>  // b.none
    9f68:	cmn	w23, #0x1
    9f6c:	b.eq	a060 <mpc_inp_str@@Base+0x4f4>  // b.none
    9f70:	mov	w0, w23
    9f74:	b	a058 <mpc_inp_str@@Base+0x4ec>
    9f78:	cmp	x8, #0x5
    9f7c:	b.eq	a004 <mpc_inp_str@@Base+0x498>  // b.none
    9f80:	cmp	x8, #0x3
    9f84:	b.ne	a054 <mpc_inp_str@@Base+0x4e8>  // b.any
    9f88:	bl	4c50 <__ctype_tolower_loc@plt>
    9f8c:	ldr	x8, [x0]
    9f90:	ldrb	w9, [x20]
    9f94:	ldr	w9, [x8, x9, lsl #2]
    9f98:	cmp	w9, #0x6e
    9f9c:	b.ne	a054 <mpc_inp_str@@Base+0x4e8>  // b.any
    9fa0:	ldrb	w9, [x20, #1]
    9fa4:	ldr	w9, [x8, x9, lsl #2]
    9fa8:	cmp	w9, #0x61
    9fac:	b.ne	a054 <mpc_inp_str@@Base+0x4e8>  // b.any
    9fb0:	ldrb	w9, [x20, #2]
    9fb4:	ldr	w8, [x8, x9, lsl #2]
    9fb8:	cmp	w8, #0x6e
    9fbc:	b.ne	a054 <mpc_inp_str@@Base+0x4e8>  // b.any
    9fc0:	mov	w0, #0x64                  	// #100
    9fc4:	mov	w23, #0x64                  	// #100
    9fc8:	bl	4bf0 <mpc_alloc_str@plt>
    9fcc:	mov	x22, x0
    9fd0:	mov	x0, x19
    9fd4:	bl	4f20 <getc@plt>
    9fd8:	mov	w24, w0
    9fdc:	bl	5170 <__ctype_b_loc@plt>
    9fe0:	cmp	w24, #0x5f
    9fe4:	mov	x25, x0
    9fe8:	b.eq	a080 <mpc_inp_str@@Base+0x514>  // b.none
    9fec:	ldr	x8, [x25]
    9ff0:	and	w9, w24, #0xff
    9ff4:	ldrh	w8, [x8, w9, uxtw #1]
    9ff8:	tbnz	w8, #3, a080 <mpc_inp_str@@Base+0x514>
    9ffc:	mov	x27, xzr
    a000:	b	a0dc <mpc_inp_str@@Base+0x570>
    a004:	ldrb	w8, [x20]
    a008:	cmp	w8, #0x40
    a00c:	b.ne	a054 <mpc_inp_str@@Base+0x4e8>  // b.any
    a010:	bl	4c50 <__ctype_tolower_loc@plt>
    a014:	ldr	x8, [x0]
    a018:	ldrb	w9, [x20, #1]
    a01c:	ldr	w9, [x8, x9, lsl #2]
    a020:	cmp	w9, #0x6e
    a024:	b.ne	a054 <mpc_inp_str@@Base+0x4e8>  // b.any
    a028:	ldrb	w9, [x20, #2]
    a02c:	ldr	w9, [x8, x9, lsl #2]
    a030:	cmp	w9, #0x61
    a034:	b.ne	a054 <mpc_inp_str@@Base+0x4e8>  // b.any
    a038:	ldrb	w9, [x20, #3]
    a03c:	ldr	w8, [x8, x9, lsl #2]
    a040:	cmp	w8, #0x6e
    a044:	b.ne	a054 <mpc_inp_str@@Base+0x4e8>  // b.any
    a048:	ldrb	w8, [x20, #4]
    a04c:	cmp	w8, #0x40
    a050:	b.eq	9fc0 <mpc_inp_str@@Base+0x454>  // b.none
    a054:	mov	w0, #0x28                  	// #40
    a058:	mov	x1, x19
    a05c:	bl	5210 <ungetc@plt>
    a060:	mov	x0, x20
    a064:	ldp	x20, x19, [sp, #80]
    a068:	ldp	x22, x21, [sp, #64]
    a06c:	ldp	x24, x23, [sp, #48]
    a070:	ldp	x26, x25, [sp, #32]
    a074:	ldr	x27, [sp, #16]
    a078:	ldp	x29, x30, [sp], #96
    a07c:	ret
    a080:	mov	x27, xzr
    a084:	mov	w23, #0x64                  	// #100
    a088:	strb	w24, [x22, x27]
    a08c:	add	x27, x27, #0x1
    a090:	cmp	x27, x23
    a094:	b.ne	a0b4 <mpc_inp_str@@Base+0x548>  // b.any
    a098:	lsl	x24, x23, #1
    a09c:	mov	x0, x22
    a0a0:	mov	x1, x23
    a0a4:	mov	x2, x24
    a0a8:	bl	5330 <mpc_realloc_str@plt>
    a0ac:	mov	x22, x0
    a0b0:	mov	x23, x24
    a0b4:	mov	x0, x19
    a0b8:	bl	4f20 <getc@plt>
    a0bc:	ldr	x8, [x25]
    a0c0:	and	w9, w0, #0xff
    a0c4:	mov	w24, w0
    a0c8:	cmp	w0, #0x5f
    a0cc:	ldrh	w8, [x8, w9, uxtw #1]
    a0d0:	and	w8, w8, #0x8
    a0d4:	b.eq	a088 <mpc_inp_str@@Base+0x51c>  // b.none
    a0d8:	cbnz	w8, a088 <mpc_inp_str@@Base+0x51c>
    a0dc:	add	x2, x27, #0x1
    a0e0:	mov	x0, x22
    a0e4:	mov	x1, x23
    a0e8:	bl	5330 <mpc_realloc_str@plt>
    a0ec:	mov	x22, x0
    a0f0:	cmn	w24, #0x1
    a0f4:	strb	wzr, [x0, x27]
    a0f8:	b.eq	a108 <mpc_inp_str@@Base+0x59c>  // b.none
    a0fc:	mov	w0, w24
    a100:	mov	x1, x19
    a104:	bl	5210 <ungetc@plt>
    a108:	mov	x0, x22
    a10c:	bl	4a00 <strlen@plt>
    a110:	add	x8, x0, x26
    a114:	sub	x9, x8, #0x2
    a118:	mov	x23, x0
    a11c:	cmp	x9, x21
    a120:	b.cc	a140 <mpc_inp_str@@Base+0x5d4>  // b.lo, b.ul, b.last
    a124:	sub	x24, x8, #0x1
    a128:	mov	x0, x20
    a12c:	mov	x1, x21
    a130:	mov	x2, x24
    a134:	bl	5330 <mpc_realloc_str@plt>
    a138:	mov	x20, x0
    a13c:	mov	x21, x24
    a140:	add	x8, x20, x26
    a144:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    a148:	sub	x0, x8, #0x3
    a14c:	add	x1, x1, #0x507
    a150:	mov	x2, x22
    a154:	bl	4b30 <sprintf@plt>
    a158:	tbnz	w0, #31, a1bc <mpc_inp_str@@Base+0x650>
    a15c:	add	x8, x23, #0x1
    a160:	cmp	x8, w0, uxtw
    a164:	b.ne	a1e8 <mpc_inp_str@@Base+0x67c>  // b.any
    a168:	mov	x0, x19
    a16c:	bl	4f20 <getc@plt>
    a170:	cmp	w0, #0x29
    a174:	b.eq	a18c <mpc_inp_str@@Base+0x620>  // b.none
    a178:	cmn	w0, #0x1
    a17c:	b.eq	a1b0 <mpc_inp_str@@Base+0x644>  // b.none
    a180:	mov	x1, x19
    a184:	bl	5210 <ungetc@plt>
    a188:	b	a1b0 <mpc_inp_str@@Base+0x644>
    a18c:	add	x2, x23, x26
    a190:	mov	x0, x20
    a194:	mov	x1, x21
    a198:	bl	5330 <mpc_realloc_str@plt>
    a19c:	add	x8, x0, x23
    a1a0:	add	x8, x8, x26
    a1a4:	mov	w9, #0x29                  	// #41
    a1a8:	mov	x20, x0
    a1ac:	sturh	w9, [x8, #-2]
    a1b0:	mov	x0, x22
    a1b4:	bl	4ff0 <mpc_free_str@plt>
    a1b8:	b	a060 <mpc_inp_str@@Base+0x4f4>
    a1bc:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    a1c0:	ldr	x8, [x8, #4008]
    a1c4:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    a1c8:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    a1cc:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    a1d0:	ldr	x0, [x8]
    a1d4:	add	x1, x1, #0x3b0
    a1d8:	add	x2, x2, #0x4e5
    a1dc:	add	x4, x4, #0x4ef
    a1e0:	mov	w3, #0x88                  	// #136
    a1e4:	b	a210 <mpc_inp_str@@Base+0x6a4>
    a1e8:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    a1ec:	ldr	x8, [x8, #4008]
    a1f0:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    a1f4:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    a1f8:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    a1fc:	ldr	x0, [x8]
    a200:	add	x1, x1, #0x3b0
    a204:	add	x2, x2, #0x4e5
    a208:	add	x4, x4, #0x50b
    a20c:	mov	w3, #0x8a                  	// #138
    a210:	bl	55a0 <fprintf@plt>
    a214:	bl	5000 <abort@plt>

000000000000a218 <mpc_log@@Base>:
    a218:	sub	sp, sp, #0xb0
    a21c:	stp	x20, x19, [sp, #160]
    a220:	mov	x19, x0
    a224:	mov	x0, x1
    a228:	stp	x29, x30, [sp, #80]
    a22c:	stp	x28, x27, [sp, #96]
    a230:	stp	x26, x25, [sp, #112]
    a234:	stp	x24, x23, [sp, #128]
    a238:	stp	x22, x21, [sp, #144]
    a23c:	add	x29, sp, #0x50
    a240:	mov	w20, w2
    a244:	mov	x21, x1
    a248:	bl	54d0 <mpfr_number_p@plt>
    a24c:	cbz	w0, a390 <mpc_log@@Base+0x178>
    a250:	add	x22, x21, #0x20
    a254:	mov	x0, x22
    a258:	bl	54d0 <mpfr_number_p@plt>
    a25c:	cbz	w0, a390 <mpc_log@@Base+0x178>
    a260:	mov	x0, x21
    a264:	bl	51f0 <mpfr_sgn@plt>
    a268:	mov	w23, w0
    a26c:	mov	x0, x22
    a270:	bl	51f0 <mpfr_sgn@plt>
    a274:	cbz	w0, a434 <mpc_log@@Base+0x21c>
    a278:	cbz	w23, a5d4 <mpc_log@@Base+0x3bc>
    a27c:	ldr	x24, [x19]
    a280:	add	x0, sp, #0x10
    a284:	mov	w1, #0x2                   	// #2
    a288:	bl	5440 <mpfr_init2@plt>
    a28c:	and	w8, w20, #0xf
    a290:	tst	w20, #0xf
    a294:	mov	x0, x24
    a298:	stp	w8, w20, [sp, #8]
    a29c:	cset	w27, eq  // eq = none
    a2a0:	bl	4d20 <mpc_ceil_log2@plt>
    a2a4:	add	x8, x24, x0
    a2a8:	add	x24, x8, #0x4
    a2ac:	add	x0, sp, #0x10
    a2b0:	mov	x1, x24
    a2b4:	bl	4c80 <mpfr_set_prec@plt>
    a2b8:	add	x0, sp, #0x10
    a2bc:	mov	x1, x21
    a2c0:	mov	w2, wzr
    a2c4:	bl	51a0 <mpc_abs@plt>
    a2c8:	ldr	x8, [sp, #32]
    a2cc:	mov	x25, #0x8000000000000003    	// #-9223372036854775805
    a2d0:	cmp	x8, x25
    a2d4:	b.eq	a470 <mpc_log@@Base+0x258>  // b.none
    a2d8:	mov	w20, wzr
    a2dc:	mov	w26, #0x1                   	// #1
    a2e0:	mov	x28, #0x8000000000000001    	// #-9223372036854775807
    a2e4:	mov	x23, #0x100000000           	// #4294967296
    a2e8:	add	x0, sp, #0x10
    a2ec:	add	x1, sp, #0x10
    a2f0:	mov	w2, wzr
    a2f4:	bl	4d80 <mpfr_log@plt>
    a2f8:	ldr	x8, [sp, #32]
    a2fc:	cmp	x8, x28
    a300:	b.eq	a380 <mpc_log@@Base+0x168>  // b.none
    a304:	ldr	x10, [x19]
    a308:	sub	x9, x23, x8, lsl #32
    a30c:	asr	x9, x9, #32
    a310:	cmp	x8, #0x0
    a314:	csinc	x8, x9, xzr, lt  // lt = tstop
    a318:	sub	x1, x24, x8
    a31c:	add	x4, x10, x27
    a320:	add	x0, sp, #0x10
    a324:	mov	w3, #0x1                   	// #1
    a328:	mov	w2, wzr
    a32c:	bl	5450 <mpfr_can_round@plt>
    a330:	cmp	w0, #0x0
    a334:	cset	w20, ne  // ne = any
    a338:	cmp	w26, #0x1
    a33c:	b.hi	a380 <mpc_log@@Base+0x168>  // b.pmore
    a340:	cbnz	w0, a380 <mpc_log@@Base+0x168>
    a344:	mov	x0, x24
    a348:	add	w26, w26, #0x1
    a34c:	bl	4d20 <mpc_ceil_log2@plt>
    a350:	add	x8, x24, x0
    a354:	add	x24, x8, #0x4
    a358:	add	x0, sp, #0x10
    a35c:	mov	x1, x24
    a360:	bl	4c80 <mpfr_set_prec@plt>
    a364:	add	x0, sp, #0x10
    a368:	mov	x1, x21
    a36c:	mov	w2, wzr
    a370:	bl	51a0 <mpc_abs@plt>
    a374:	ldr	x8, [sp, #32]
    a378:	cmp	x8, x25
    a37c:	b.ne	a2e8 <mpc_log@@Base+0xd0>  // b.any
    a380:	tbz	w20, #0, a470 <mpc_log@@Base+0x258>
    a384:	ldp	w24, w20, [sp, #8]
    a388:	mov	w23, wzr
    a38c:	b	a658 <mpc_log@@Base+0x440>
    a390:	ldr	x8, [x21, #16]
    a394:	ldr	x9, [x21, #48]
    a398:	mov	x10, #0x2                   	// #2
    a39c:	movk	x10, #0x8000, lsl #48
    a3a0:	cmp	x8, x10
    a3a4:	b.ne	a3c4 <mpc_log@@Base+0x1ac>  // b.any
    a3a8:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    a3ac:	cmp	x9, x8
    a3b0:	b.ne	a3d8 <mpc_log@@Base+0x1c0>  // b.any
    a3b4:	mov	w1, #0x1                   	// #1
    a3b8:	mov	x0, x19
    a3bc:	bl	5120 <mpfr_set_inf@plt>
    a3c0:	b	a3e0 <mpc_log@@Base+0x1c8>
    a3c4:	cmp	x9, x10
    a3c8:	b.ne	a400 <mpc_log@@Base+0x1e8>  // b.any
    a3cc:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    a3d0:	cmp	x8, x9
    a3d4:	b.eq	a3b4 <mpc_log@@Base+0x19c>  // b.none
    a3d8:	mov	x0, x19
    a3dc:	bl	4a40 <mpfr_set_nan@plt>
    a3e0:	add	x0, x19, #0x20
    a3e4:	bl	4a40 <mpfr_set_nan@plt>
    a3e8:	mov	w8, wzr
    a3ec:	mov	w9, wzr
    a3f0:	cmp	w8, #0x0
    a3f4:	mov	w8, #0x8                   	// #8
    a3f8:	csel	w0, w8, w9, ne  // ne = any
    a3fc:	b	a818 <mpc_log@@Base+0x600>
    a400:	add	x1, x21, #0x20
    a404:	add	x0, x19, #0x20
    a408:	asr	w3, w20, #4
    a40c:	mov	x2, x21
    a410:	bl	4ca0 <mpfr_atan2@plt>
    a414:	mov	w20, w0
    a418:	mov	w1, #0x1                   	// #1
    a41c:	mov	x0, x19
    a420:	bl	5120 <mpfr_set_inf@plt>
    a424:	lsr	w8, w20, #31
    a428:	cbz	w20, a3ec <mpc_log@@Base+0x1d4>
    a42c:	mov	w9, #0x4                   	// #4
    a430:	b	a3f0 <mpc_log@@Base+0x1d8>
    a434:	cbz	w23, a61c <mpc_log@@Base+0x404>
    a438:	cmp	w23, #0x1
    a43c:	b.lt	a6dc <mpc_log@@Base+0x4c4>  // b.tstop
    a440:	and	w2, w20, #0xf
    a444:	mov	x0, x19
    a448:	mov	x1, x21
    a44c:	bl	4d80 <mpfr_log@plt>
    a450:	ldr	w3, [x21, #40]
    a454:	mov	w23, w0
    a458:	add	x0, x19, #0x20
    a45c:	asr	w2, w20, #4
    a460:	mov	x1, x22
    a464:	bl	51d0 <mpfr_set4@plt>
    a468:	mov	w20, w0
    a46c:	b	a758 <mpc_log@@Base+0x540>
    a470:	ldr	x24, [x19]
    a474:	sub	x0, x29, #0x20
    a478:	mov	w1, #0x2                   	// #2
    a47c:	bl	5440 <mpfr_init2@plt>
    a480:	mov	x0, x21
    a484:	mov	x1, x22
    a488:	bl	53b0 <mpfr_cmpabs@plt>
    a48c:	cmp	w0, #0x0
    a490:	csel	x25, x22, x21, ge  // ge = tcont
    a494:	csel	x26, x21, x22, ge  // ge = tcont
    a498:	mov	x28, #0x8000000000000001    	// #-9223372036854775807
    a49c:	mov	x0, x24
    a4a0:	bl	4d20 <mpc_ceil_log2@plt>
    a4a4:	add	x8, x24, x0
    a4a8:	add	x24, x8, #0x4
    a4ac:	sub	x0, x29, #0x20
    a4b0:	mov	x1, x24
    a4b4:	bl	4c80 <mpfr_set_prec@plt>
    a4b8:	add	x0, sp, #0x10
    a4bc:	mov	x1, x24
    a4c0:	bl	4c80 <mpfr_set_prec@plt>
    a4c4:	sub	x0, x29, #0x20
    a4c8:	mov	w3, #0x3                   	// #3
    a4cc:	mov	x1, x25
    a4d0:	mov	x2, x26
    a4d4:	bl	5150 <mpfr_div@plt>
    a4d8:	sub	x0, x29, #0x20
    a4dc:	sub	x1, x29, #0x20
    a4e0:	mov	w2, #0x3                   	// #3
    a4e4:	bl	5010 <mpfr_sqr@plt>
    a4e8:	sub	x0, x29, #0x20
    a4ec:	sub	x1, x29, #0x20
    a4f0:	mov	w2, #0x3                   	// #3
    a4f4:	bl	51e0 <mpfr_log1p@plt>
    a4f8:	sub	x0, x29, #0x20
    a4fc:	sub	x1, x29, #0x20
    a500:	mov	w2, #0x1                   	// #1
    a504:	mov	w3, #0x3                   	// #3
    a508:	bl	5320 <mpfr_div_2ui@plt>
    a50c:	add	x0, sp, #0x10
    a510:	mov	w3, #0x1                   	// #1
    a514:	mov	x1, x26
    a518:	mov	w2, wzr
    a51c:	bl	51d0 <mpfr_set4@plt>
    a520:	add	x0, sp, #0x10
    a524:	add	x1, sp, #0x10
    a528:	mov	w2, wzr
    a52c:	bl	4d80 <mpfr_log@plt>
    a530:	ldr	x20, [sp, #32]
    a534:	ldr	w23, [sp, #24]
    a538:	add	x0, sp, #0x10
    a53c:	add	x1, sp, #0x10
    a540:	sub	x2, x29, #0x20
    a544:	mov	w3, wzr
    a548:	bl	4e60 <mpfr_add@plt>
    a54c:	tbnz	w23, #31, a558 <mpc_log@@Base+0x340>
    a550:	mov	w20, #0x5                   	// #5
    a554:	b	a578 <mpc_log@@Base+0x360>
    a558:	ldr	x9, [sp, #32]
    a55c:	ldur	x8, [x29, #-16]
    a560:	mvn	x9, x9
    a564:	add	x8, x8, #0x5
    a568:	add	x9, x20, x9
    a56c:	cmp	x8, x9
    a570:	csel	x8, x8, x9, gt
    a574:	add	x20, x8, #0x2
    a578:	mov	x1, #0xffffffffffffffff    	// #-1
    a57c:	mov	x0, x26
    a580:	mov	x2, xzr
    a584:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    a588:	cbz	w0, a5a0 <mpc_log@@Base+0x388>
    a58c:	mov	w1, #0x1                   	// #1
    a590:	mov	x0, x26
    a594:	mov	x2, xzr
    a598:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    a59c:	cbnz	w0, a5ac <mpc_log@@Base+0x394>
    a5a0:	ldr	x8, [sp, #32]
    a5a4:	cmp	x8, x28
    a5a8:	b.eq	a648 <mpc_log@@Base+0x430>  // b.none
    a5ac:	ldr	x8, [x19]
    a5b0:	sub	x1, x24, w20, sxtw
    a5b4:	add	x0, sp, #0x10
    a5b8:	mov	w3, #0x1                   	// #1
    a5bc:	add	x4, x8, x27
    a5c0:	mov	w2, wzr
    a5c4:	bl	5450 <mpfr_can_round@plt>
    a5c8:	cbz	w0, a49c <mpc_log@@Base+0x284>
    a5cc:	mov	w23, wzr
    a5d0:	b	a64c <mpc_log@@Base+0x434>
    a5d4:	cmp	w0, #0x1
    a5d8:	b.lt	a770 <mpc_log@@Base+0x558>  // b.tstop
    a5dc:	and	w2, w20, #0xf
    a5e0:	mov	x0, x19
    a5e4:	mov	x1, x22
    a5e8:	bl	4d80 <mpfr_log@plt>
    a5ec:	add	x22, x19, #0x20
    a5f0:	mov	w21, w0
    a5f4:	asr	w1, w20, #4
    a5f8:	mov	x0, x22
    a5fc:	bl	4a80 <mpfr_const_pi@plt>
    a600:	mov	w19, w0
    a604:	mov	w2, #0x1                   	// #1
    a608:	mov	x0, x22
    a60c:	mov	x1, x22
    a610:	mov	w3, wzr
    a614:	bl	5320 <mpfr_div_2ui@plt>
    a618:	b	a7f0 <mpc_log@@Base+0x5d8>
    a61c:	add	x0, x19, #0x20
    a620:	asr	w3, w20, #4
    a624:	mov	x1, x22
    a628:	mov	x2, x21
    a62c:	bl	4ca0 <mpfr_atan2@plt>
    a630:	mov	w20, w0
    a634:	mov	w1, #0xffffffff            	// #-1
    a638:	mov	x0, x19
    a63c:	bl	5120 <mpfr_set_inf@plt>
    a640:	mov	w8, wzr
    a644:	b	a768 <mpc_log@@Base+0x550>
    a648:	mov	w23, #0x1                   	// #1
    a64c:	ldp	w24, w20, [sp, #8]
    a650:	sub	x0, x29, #0x20
    a654:	bl	4d60 <mpfr_clear@plt>
    a658:	add	x0, x19, #0x20
    a65c:	asr	w3, w20, #4
    a660:	mov	x1, x22
    a664:	mov	x2, x21
    a668:	bl	4ca0 <mpfr_atan2@plt>
    a66c:	mov	w20, w0
    a670:	cbz	w23, a690 <mpc_log@@Base+0x478>
    a674:	bl	55c0 <mpfr_get_emin_min@plt>
    a678:	sub	x2, x0, #0x2
    a67c:	mov	w1, #0x1                   	// #1
    a680:	mov	x0, x19
    a684:	mov	w3, w24
    a688:	bl	5130 <mpfr_set_ui_2exp@plt>
    a68c:	b	a6a4 <mpc_log@@Base+0x48c>
    a690:	ldr	w3, [sp, #24]
    a694:	add	x1, sp, #0x10
    a698:	mov	x0, x19
    a69c:	mov	w2, w24
    a6a0:	bl	51d0 <mpfr_set4@plt>
    a6a4:	mov	w19, w0
    a6a8:	add	x0, sp, #0x10
    a6ac:	bl	4d60 <mpfr_clear@plt>
    a6b0:	cmp	w19, #0x0
    a6b4:	mov	w8, #0x2                   	// #2
    a6b8:	cset	w9, ne  // ne = any
    a6bc:	csel	w8, w8, w9, lt  // lt = tstop
    a6c0:	cmp	w20, #0x0
    a6c4:	cset	w9, ne  // ne = any
    a6c8:	lsl	w9, w9, #2
    a6cc:	mov	w10, #0x8                   	// #8
    a6d0:	csel	w9, w10, w9, lt  // lt = tstop
    a6d4:	orr	w0, w8, w9
    a6d8:	b	a818 <mpc_log@@Base+0x600>
    a6dc:	ldr	w22, [x21, #40]
    a6e0:	asr	w8, w20, #4
    a6e4:	ldp	q0, q1, [x21]
    a6e8:	mov	w9, #0x2                   	// #2
    a6ec:	cmp	w8, #0x3
    a6f0:	mov	w10, #0x3                   	// #3
    a6f4:	csel	w9, w9, w8, eq  // eq = none
    a6f8:	cmp	w8, #0x2
    a6fc:	csel	w9, w10, w9, eq  // eq = none
    a700:	cmp	w22, #0x0
    a704:	add	x0, sp, #0x10
    a708:	add	x1, sp, #0x10
    a70c:	mov	w2, wzr
    a710:	csel	w21, w9, w8, lt  // lt = tstop
    a714:	stp	q0, q1, [sp, #16]
    a718:	bl	4b80 <mpfr_neg@plt>
    a71c:	and	w2, w20, #0xf
    a720:	add	x1, sp, #0x10
    a724:	mov	x0, x19
    a728:	bl	4d80 <mpfr_log@plt>
    a72c:	mov	w23, w0
    a730:	add	x0, x19, #0x20
    a734:	mov	w1, w21
    a738:	bl	4a80 <mpfr_const_pi@plt>
    a73c:	mov	w20, w0
    a740:	tbz	w22, #31, a758 <mpc_log@@Base+0x540>
    a744:	mov	x0, x19
    a748:	mov	x1, x19
    a74c:	mov	w2, wzr
    a750:	bl	4f60 <mpc_conj@plt>
    a754:	neg	w20, w20
    a758:	cmp	w23, #0x0
    a75c:	cset	w8, ne  // ne = any
    a760:	mov	w9, #0x2                   	// #2
    a764:	csel	w8, w9, w8, lt  // lt = tstop
    a768:	cmp	w20, #0x0
    a76c:	b	a804 <mpc_log@@Base+0x5ec>
    a770:	ldp	q1, q0, [x22]
    a774:	add	x0, sp, #0x10
    a778:	add	x1, sp, #0x10
    a77c:	mov	w2, wzr
    a780:	stp	q1, q0, [sp, #16]
    a784:	bl	4b80 <mpfr_neg@plt>
    a788:	and	w2, w20, #0xf
    a78c:	add	x1, sp, #0x10
    a790:	mov	x0, x19
    a794:	bl	4d80 <mpfr_log@plt>
    a798:	asr	w8, w20, #4
    a79c:	mov	w9, #0x2                   	// #2
    a7a0:	cmp	w8, #0x3
    a7a4:	add	x19, x19, #0x20
    a7a8:	csel	w9, w9, w8, eq  // eq = none
    a7ac:	cmp	w8, #0x2
    a7b0:	mov	w8, #0x3                   	// #3
    a7b4:	mov	w21, w0
    a7b8:	csel	w1, w8, w9, eq  // eq = none
    a7bc:	mov	x0, x19
    a7c0:	bl	4a80 <mpfr_const_pi@plt>
    a7c4:	mov	w20, w0
    a7c8:	mov	w2, #0x1                   	// #1
    a7cc:	mov	x0, x19
    a7d0:	mov	x1, x19
    a7d4:	mov	w3, wzr
    a7d8:	bl	5320 <mpfr_div_2ui@plt>
    a7dc:	mov	x0, x19
    a7e0:	mov	x1, x19
    a7e4:	mov	w2, wzr
    a7e8:	bl	4b80 <mpfr_neg@plt>
    a7ec:	neg	w19, w20
    a7f0:	cmp	w21, #0x0
    a7f4:	mov	w8, #0x2                   	// #2
    a7f8:	cset	w9, ne  // ne = any
    a7fc:	csel	w8, w8, w9, lt  // lt = tstop
    a800:	cmp	w19, #0x0
    a804:	cset	w9, ne  // ne = any
    a808:	lsl	w9, w9, #2
    a80c:	mov	w10, #0x8                   	// #8
    a810:	csel	w9, w10, w9, lt  // lt = tstop
    a814:	orr	w0, w9, w8
    a818:	ldp	x20, x19, [sp, #160]
    a81c:	ldp	x22, x21, [sp, #144]
    a820:	ldp	x24, x23, [sp, #128]
    a824:	ldp	x26, x25, [sp, #112]
    a828:	ldp	x28, x27, [sp, #96]
    a82c:	ldp	x29, x30, [sp, #80]
    a830:	add	sp, sp, #0xb0
    a834:	ret

000000000000a838 <mpc_log10@@Base>:
    a838:	sub	sp, sp, #0x120
    a83c:	stp	x29, x30, [sp, #192]
    a840:	add	x29, sp, #0xc0
    a844:	stp	x24, x23, [sp, #240]
    a848:	stp	x22, x21, [sp, #256]
    a84c:	mov	x23, x1
    a850:	mov	x21, x0
    a854:	sub	x0, x29, #0x28
    a858:	mov	w1, #0x2                   	// #2
    a85c:	stp	x28, x27, [sp, #208]
    a860:	stp	x26, x25, [sp, #224]
    a864:	stp	x20, x19, [sp, #272]
    a868:	mov	w19, w2
    a86c:	bl	5440 <mpfr_init2@plt>
    a870:	add	x0, sp, #0x58
    a874:	mov	w1, #0x2                   	// #2
    a878:	add	x20, sp, #0x58
    a87c:	bl	4cf0 <mpc_init2@plt>
    a880:	str	x21, [sp, #32]
    a884:	ldr	x8, [x21], #32
    a888:	and	w10, w19, #0xf
    a88c:	mov	w25, wzr
    a890:	mov	w24, wzr
    a894:	ldr	x9, [x21]
    a898:	str	x21, [sp, #48]
    a89c:	add	x21, x20, #0x20
    a8a0:	str	w10, [sp, #12]
    a8a4:	cmp	x8, x9
    a8a8:	csel	x26, x8, x9, gt
    a8ac:	cmp	w19, #0x10
    a8b0:	cset	w8, cc  // cc = lo, ul, last
    a8b4:	tst	w19, #0xf
    a8b8:	add	x10, x23, #0x20
    a8bc:	str	x8, [sp, #40]
    a8c0:	cset	w8, eq  // eq = none
    a8c4:	stp	x10, x8, [sp, #16]
    a8c8:	cmp	w25, #0x1
    a8cc:	b.hi	a8e0 <mpc_log10@@Base+0xa8>  // b.pmore
    a8d0:	mov	x0, x26
    a8d4:	bl	4d20 <mpc_ceil_log2@plt>
    a8d8:	add	x8, x0, #0x4
    a8dc:	b	a8ec <mpc_log10@@Base+0xb4>
    a8e0:	cmp	x26, #0x0
    a8e4:	cinc	x8, x26, lt  // lt = tstop
    a8e8:	asr	x8, x8, #1
    a8ec:	add	x26, x8, x26
    a8f0:	sub	x0, x29, #0x28
    a8f4:	mov	x1, x26
    a8f8:	add	w25, w25, #0x1
    a8fc:	bl	4c80 <mpfr_set_prec@plt>
    a900:	add	x0, sp, #0x58
    a904:	mov	x1, x26
    a908:	bl	4c00 <mpc_set_prec@plt>
    a90c:	add	x0, sp, #0x58
    a910:	mov	x1, x23
    a914:	mov	w2, w19
    a918:	bl	4db0 <mpc_log@plt>
    a91c:	mov	w27, w0
    a920:	mov	x0, x21
    a924:	bl	54d0 <mpfr_number_p@plt>
    a928:	mov	w28, #0x1                   	// #1
    a92c:	cbz	w0, a9b4 <mpc_log10@@Base+0x17c>
    a930:	ldr	x8, [sp, #136]
    a934:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    a938:	mov	w22, #0x1                   	// #1
    a93c:	cmp	x8, x9
    a940:	b.eq	a9b8 <mpc_log10@@Base+0x180>  // b.none
    a944:	sub	x0, x29, #0x28
    a948:	mov	w1, #0xa                   	// #10
    a94c:	mov	x2, xzr
    a950:	mov	w3, wzr
    a954:	bl	5130 <mpfr_set_ui_2exp@plt>
    a958:	sub	x0, x29, #0x28
    a95c:	sub	x1, x29, #0x28
    a960:	mov	w2, wzr
    a964:	bl	4d80 <mpfr_log@plt>
    a968:	sub	x2, x29, #0x28
    a96c:	mov	x0, x21
    a970:	mov	x1, x21
    a974:	mov	w3, wzr
    a978:	bl	5150 <mpfr_div@plt>
    a97c:	ldp	x9, x8, [sp, #40]
    a980:	sub	x1, x26, #0x2
    a984:	mov	w3, #0x1                   	// #1
    a988:	mov	x0, x21
    a98c:	ldr	x8, [x8]
    a990:	mov	w2, wzr
    a994:	add	x4, x8, x9
    a998:	bl	5450 <mpfr_can_round@plt>
    a99c:	mov	w28, w0
    a9a0:	mov	w22, wzr
    a9a4:	cbnz	w0, a9b8 <mpc_log10@@Base+0x180>
    a9a8:	mov	w28, w22
    a9ac:	cbz	w28, a8c8 <mpc_log10@@Base+0x90>
    a9b0:	b	ab6c <mpc_log10@@Base+0x334>
    a9b4:	mov	w22, #0x1                   	// #1
    a9b8:	add	x0, sp, #0x58
    a9bc:	bl	54d0 <mpfr_number_p@plt>
    a9c0:	mov	w20, #0x1                   	// #1
    a9c4:	cbz	w0, aa3c <mpc_log10@@Base+0x204>
    a9c8:	ldr	x8, [sp, #104]
    a9cc:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    a9d0:	cmp	x8, x9
    a9d4:	b.eq	aa3c <mpc_log10@@Base+0x204>  // b.none
    a9d8:	cbz	w22, aa00 <mpc_log10@@Base+0x1c8>
    a9dc:	sub	x0, x29, #0x28
    a9e0:	mov	w1, #0xa                   	// #10
    a9e4:	mov	x2, xzr
    a9e8:	mov	w3, wzr
    a9ec:	bl	5130 <mpfr_set_ui_2exp@plt>
    a9f0:	sub	x0, x29, #0x28
    a9f4:	sub	x1, x29, #0x28
    a9f8:	mov	w2, wzr
    a9fc:	bl	4d80 <mpfr_log@plt>
    aa00:	add	x0, sp, #0x58
    aa04:	add	x1, sp, #0x58
    aa08:	sub	x2, x29, #0x28
    aa0c:	mov	w3, wzr
    aa10:	bl	5150 <mpfr_div@plt>
    aa14:	ldp	x9, x8, [sp, #24]
    aa18:	sub	x1, x26, #0x2
    aa1c:	add	x0, sp, #0x58
    aa20:	mov	w3, #0x1                   	// #1
    aa24:	ldr	x8, [x8]
    aa28:	mov	w2, wzr
    aa2c:	add	x4, x8, x9
    aa30:	bl	5450 <mpfr_can_round@plt>
    aa34:	mov	w28, w0
    aa38:	mov	w20, wzr
    aa3c:	orr	w8, w28, w24
    aa40:	cbnz	w8, ab5c <mpc_log10@@Base+0x324>
    aa44:	mov	x0, x23
    aa48:	bl	4e30 <mpfr_integer_p@plt>
    aa4c:	cbz	w0, ab64 <mpc_log10@@Base+0x32c>
    aa50:	ldr	x24, [sp, #16]
    aa54:	mov	x0, x24
    aa58:	bl	4e30 <mpfr_integer_p@plt>
    aa5c:	cbz	w0, ab64 <mpc_log10@@Base+0x32c>
    aa60:	add	x0, sp, #0x48
    aa64:	bl	54a0 <__gmpz_init@plt>
    aa68:	add	x0, sp, #0x38
    aa6c:	bl	54a0 <__gmpz_init@plt>
    aa70:	add	x0, sp, #0x48
    aa74:	mov	x1, x23
    aa78:	mov	w2, wzr
    aa7c:	bl	4bd0 <mpfr_get_z@plt>
    aa80:	add	x0, sp, #0x38
    aa84:	mov	x1, x24
    aa88:	mov	w2, wzr
    aa8c:	bl	4bd0 <mpfr_get_z@plt>
    aa90:	add	x0, sp, #0x48
    aa94:	add	x1, sp, #0x48
    aa98:	add	x2, sp, #0x48
    aa9c:	bl	4d40 <__gmpz_mul@plt>
    aaa0:	add	x0, sp, #0x38
    aaa4:	add	x1, sp, #0x38
    aaa8:	add	x2, sp, #0x38
    aaac:	bl	4d40 <__gmpz_mul@plt>
    aab0:	add	x0, sp, #0x48
    aab4:	add	x1, sp, #0x48
    aab8:	add	x2, sp, #0x38
    aabc:	bl	53d0 <__gmpz_add@plt>
    aac0:	add	x0, sp, #0x48
    aac4:	mov	x1, xzr
    aac8:	bl	49f0 <__gmpz_scan1@plt>
    aacc:	mov	x24, x0
    aad0:	add	x0, sp, #0x48
    aad4:	mov	w1, #0xa                   	// #10
    aad8:	bl	54b0 <__gmpz_sizeinbase@plt>
    aadc:	add	x8, x24, #0x1
    aae0:	cmp	x0, x8
    aae4:	b.eq	aaf4 <mpc_log10@@Base+0x2bc>  // b.none
    aae8:	add	x8, x24, #0x2
    aaec:	cmp	x0, x8
    aaf0:	b.ne	ab48 <mpc_log10@@Base+0x310>  // b.any
    aaf4:	add	x0, sp, #0x48
    aaf8:	add	x1, sp, #0x48
    aafc:	mov	x2, x24
    ab00:	bl	4e10 <__gmpz_fdiv_q_2exp@plt>
    ab04:	add	x0, sp, #0x38
    ab08:	mov	w1, #0x5                   	// #5
    ab0c:	mov	x2, x24
    ab10:	bl	50b0 <__gmpz_ui_pow_ui@plt>
    ab14:	add	x0, sp, #0x38
    ab18:	add	x1, sp, #0x48
    ab1c:	bl	5300 <__gmpz_cmp@plt>
    ab20:	cbnz	w0, ab48 <mpc_log10@@Base+0x310>
    ab24:	add	x0, sp, #0x58
    ab28:	mov	w1, #0x40                  	// #64
    ab2c:	bl	4c80 <mpfr_set_prec@plt>
    ab30:	add	x0, sp, #0x58
    ab34:	mov	x2, #0xffffffffffffffff    	// #-1
    ab38:	mov	x1, x24
    ab3c:	mov	w3, wzr
    ab40:	bl	5130 <mpfr_set_ui_2exp@plt>
    ab44:	mov	w28, #0x1                   	// #1
    ab48:	add	x0, sp, #0x48
    ab4c:	bl	5180 <__gmpz_clear@plt>
    ab50:	add	x0, sp, #0x38
    ab54:	bl	5180 <__gmpz_clear@plt>
    ab58:	mov	w24, #0x1                   	// #1
    ab5c:	cbz	w28, a8c8 <mpc_log10@@Base+0x90>
    ab60:	b	ab6c <mpc_log10@@Base+0x334>
    ab64:	mov	w24, wzr
    ab68:	cbz	w28, a8c8 <mpc_log10@@Base+0x90>
    ab6c:	ldr	w3, [sp, #96]
    ab70:	ldr	x0, [sp, #32]
    ab74:	ldr	w2, [sp, #12]
    ab78:	add	x1, sp, #0x58
    ab7c:	bl	51d0 <mpfr_set4@plt>
    ab80:	cbz	w20, ab9c <mpc_log10@@Base+0x364>
    ab84:	and	w8, w27, #0x3
    ab88:	tst	w27, #0x3
    ab8c:	cset	w9, ne  // ne = any
    ab90:	cmp	w8, #0x2
    ab94:	csinv	w23, w9, wzr, ne  // ne = any
    ab98:	b	aba0 <mpc_log10@@Base+0x368>
    ab9c:	mov	w23, w0
    aba0:	ldr	w3, [sp, #128]
    aba4:	ldr	x0, [sp, #48]
    aba8:	asr	w2, w19, #4
    abac:	mov	x1, x21
    abb0:	bl	51d0 <mpfr_set4@plt>
    abb4:	cbz	w22, abd0 <mpc_log10@@Base+0x398>
    abb8:	asr	w8, w27, #2
    abbc:	cmp	w8, #0x0
    abc0:	cset	w9, ne  // ne = any
    abc4:	cmp	w8, #0x2
    abc8:	csinv	w19, w9, wzr, ne  // ne = any
    abcc:	b	abd4 <mpc_log10@@Base+0x39c>
    abd0:	mov	w19, w0
    abd4:	sub	x0, x29, #0x28
    abd8:	bl	4d60 <mpfr_clear@plt>
    abdc:	add	x0, sp, #0x58
    abe0:	bl	4a10 <mpc_clear@plt>
    abe4:	cmp	w23, #0x0
    abe8:	mov	w8, #0x2                   	// #2
    abec:	cset	w9, ne  // ne = any
    abf0:	csel	w8, w8, w9, lt  // lt = tstop
    abf4:	cmp	w19, #0x0
    abf8:	cset	w9, ne  // ne = any
    abfc:	ldp	x20, x19, [sp, #272]
    ac00:	ldp	x22, x21, [sp, #256]
    ac04:	ldp	x24, x23, [sp, #240]
    ac08:	ldp	x26, x25, [sp, #224]
    ac0c:	ldp	x28, x27, [sp, #208]
    ac10:	ldp	x29, x30, [sp, #192]
    ac14:	lsl	w9, w9, #2
    ac18:	mov	w10, #0x8                   	// #8
    ac1c:	csel	w9, w10, w9, lt  // lt = tstop
    ac20:	orr	w0, w9, w8
    ac24:	add	sp, sp, #0x120
    ac28:	ret

000000000000ac2c <mpc_alloc_str@@Base>:
    ac2c:	stp	x29, x30, [sp, #-32]!
    ac30:	mov	x29, sp
    ac34:	str	x19, [sp, #16]
    ac38:	mov	x19, x0
    ac3c:	add	x0, x29, #0x18
    ac40:	mov	x1, xzr
    ac44:	mov	x2, xzr
    ac48:	bl	4ae0 <__gmp_get_memory_functions@plt>
    ac4c:	ldr	x8, [x29, #24]
    ac50:	mov	x0, x19
    ac54:	blr	x8
    ac58:	ldr	x19, [sp, #16]
    ac5c:	ldp	x29, x30, [sp], #32
    ac60:	ret

000000000000ac64 <mpc_realloc_str@@Base>:
    ac64:	stp	x29, x30, [sp, #-48]!
    ac68:	mov	x29, sp
    ac6c:	str	x21, [sp, #16]
    ac70:	stp	x20, x19, [sp, #32]
    ac74:	mov	x19, x2
    ac78:	mov	x20, x1
    ac7c:	mov	x21, x0
    ac80:	add	x1, x29, #0x18
    ac84:	mov	x0, xzr
    ac88:	mov	x2, xzr
    ac8c:	bl	4ae0 <__gmp_get_memory_functions@plt>
    ac90:	ldr	x8, [x29, #24]
    ac94:	mov	x0, x21
    ac98:	mov	x1, x20
    ac9c:	mov	x2, x19
    aca0:	blr	x8
    aca4:	ldp	x20, x19, [sp, #32]
    aca8:	ldr	x21, [sp, #16]
    acac:	ldp	x29, x30, [sp], #48
    acb0:	ret

000000000000acb4 <mpc_free_str@@Base>:
    acb4:	sub	sp, sp, #0x30
    acb8:	stp	x20, x19, [sp, #32]
    acbc:	mov	x19, x0
    acc0:	add	x2, sp, #0x8
    acc4:	mov	x0, xzr
    acc8:	mov	x1, xzr
    accc:	stp	x29, x30, [sp, #16]
    acd0:	add	x29, sp, #0x10
    acd4:	bl	4ae0 <__gmp_get_memory_functions@plt>
    acd8:	ldr	x20, [sp, #8]
    acdc:	mov	x0, x19
    ace0:	bl	4a00 <strlen@plt>
    ace4:	add	x1, x0, #0x1
    ace8:	mov	x0, x19
    acec:	blr	x20
    acf0:	ldp	x20, x19, [sp, #32]
    acf4:	ldp	x29, x30, [sp, #16]
    acf8:	add	sp, sp, #0x30
    acfc:	ret

000000000000ad00 <mpc_mul_2si@@Base>:
    ad00:	stp	x29, x30, [sp, #-64]!
    ad04:	stp	x20, x19, [sp, #48]
    ad08:	mov	w19, w3
    ad0c:	and	w3, w3, #0xf
    ad10:	str	x23, [sp, #16]
    ad14:	stp	x22, x21, [sp, #32]
    ad18:	mov	x29, sp
    ad1c:	mov	x20, x2
    ad20:	mov	x21, x1
    ad24:	mov	x22, x0
    ad28:	bl	4a70 <mpfr_mul_2si@plt>
    ad2c:	mov	w23, w0
    ad30:	add	x0, x22, #0x20
    ad34:	add	x1, x21, #0x20
    ad38:	asr	w3, w19, #4
    ad3c:	mov	x2, x20
    ad40:	bl	4a70 <mpfr_mul_2si@plt>
    ad44:	cmp	w23, #0x0
    ad48:	mov	w8, #0x2                   	// #2
    ad4c:	cset	w9, ne  // ne = any
    ad50:	csel	w8, w8, w9, lt  // lt = tstop
    ad54:	cmp	w0, #0x0
    ad58:	cset	w9, ne  // ne = any
    ad5c:	ldp	x20, x19, [sp, #48]
    ad60:	ldp	x22, x21, [sp, #32]
    ad64:	ldr	x23, [sp, #16]
    ad68:	lsl	w9, w9, #2
    ad6c:	mov	w10, #0x8                   	// #8
    ad70:	csel	w9, w10, w9, lt  // lt = tstop
    ad74:	orr	w0, w9, w8
    ad78:	ldp	x29, x30, [sp], #64
    ad7c:	ret

000000000000ad80 <mpc_mul_2ui@@Base>:
    ad80:	stp	x29, x30, [sp, #-64]!
    ad84:	stp	x20, x19, [sp, #48]
    ad88:	mov	w19, w3
    ad8c:	and	w3, w3, #0xf
    ad90:	str	x23, [sp, #16]
    ad94:	stp	x22, x21, [sp, #32]
    ad98:	mov	x29, sp
    ad9c:	mov	x20, x2
    ada0:	mov	x21, x1
    ada4:	mov	x22, x0
    ada8:	bl	4f40 <mpfr_mul_2ui@plt>
    adac:	mov	w23, w0
    adb0:	add	x0, x22, #0x20
    adb4:	add	x1, x21, #0x20
    adb8:	asr	w3, w19, #4
    adbc:	mov	x2, x20
    adc0:	bl	4f40 <mpfr_mul_2ui@plt>
    adc4:	cmp	w23, #0x0
    adc8:	mov	w8, #0x2                   	// #2
    adcc:	cset	w9, ne  // ne = any
    add0:	csel	w8, w8, w9, lt  // lt = tstop
    add4:	cmp	w0, #0x0
    add8:	cset	w9, ne  // ne = any
    addc:	ldp	x20, x19, [sp, #48]
    ade0:	ldp	x22, x21, [sp, #32]
    ade4:	ldr	x23, [sp, #16]
    ade8:	lsl	w9, w9, #2
    adec:	mov	w10, #0x8                   	// #8
    adf0:	csel	w9, w10, w9, lt  // lt = tstop
    adf4:	orr	w0, w9, w8
    adf8:	ldp	x29, x30, [sp], #64
    adfc:	ret

000000000000ae00 <mpc_mul_naive@@Base>:
    ae00:	sub	sp, sp, #0xa0
    ae04:	stp	x29, x30, [sp, #64]
    ae08:	stp	x28, x27, [sp, #80]
    ae0c:	stp	x26, x25, [sp, #96]
    ae10:	stp	x24, x23, [sp, #112]
    ae14:	stp	x22, x21, [sp, #128]
    ae18:	stp	x20, x19, [sp, #144]
    ae1c:	ldr	x9, [x1, #16]
    ae20:	mov	x8, #0x4                   	// #4
    ae24:	movk	x8, #0x8000, lsl #48
    ae28:	add	x29, sp, #0x40
    ae2c:	cmp	x9, x8
    ae30:	b.lt	afac <mpc_mul_naive@@Base+0x1ac>  // b.tstop
    ae34:	ldr	x9, [x1, #48]
    ae38:	mov	x21, x1
    ae3c:	cmp	x9, x8
    ae40:	b.lt	afac <mpc_mul_naive@@Base+0x1ac>  // b.tstop
    ae44:	ldr	x8, [x2, #16]
    ae48:	mov	x9, #0x4                   	// #4
    ae4c:	movk	x9, #0x8000, lsl #48
    ae50:	mov	x20, x2
    ae54:	cmp	x8, x9
    ae58:	b.lt	afac <mpc_mul_naive@@Base+0x1ac>  // b.tstop
    ae5c:	ldr	x8, [x20, #48]
    ae60:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    ae64:	cmp	x8, x9
    ae68:	b.le	afac <mpc_mul_naive@@Base+0x1ac>
    ae6c:	cmp	x0, x21
    ae70:	cset	w8, eq  // eq = none
    ae74:	cmp	x0, x20
    ae78:	cset	w9, eq  // eq = none
    ae7c:	orr	w26, w8, w9
    ae80:	mov	w22, w3
    ae84:	mov	x19, x0
    ae88:	add	x23, x21, #0x20
    ae8c:	cmp	w26, #0x1
    ae90:	add	x24, x20, #0x20
    ae94:	b.ne	aeac <mpc_mul_naive@@Base+0xac>  // b.any
    ae98:	ldr	x1, [x19]
    ae9c:	ldr	x2, [x19, #32]
    aea0:	mov	x0, sp
    aea4:	bl	53c0 <mpc_init3@plt>
    aea8:	b	aebc <mpc_mul_naive@@Base+0xbc>
    aeac:	ldp	q1, q0, [x19, #32]
    aeb0:	ldp	q3, q2, [x19]
    aeb4:	stp	q1, q0, [sp, #32]
    aeb8:	stp	q3, q2, [sp]
    aebc:	and	w25, w22, #0xf
    aec0:	mov	x0, sp
    aec4:	mov	x1, x21
    aec8:	mov	x2, x20
    aecc:	mov	x3, x23
    aed0:	mov	x4, x24
    aed4:	mov	w5, w25
    aed8:	mov	x28, sp
    aedc:	bl	4a90 <mpfr_fmms@plt>
    aee0:	tbnz	w0, #31, af0c <mpc_mul_naive@@Base+0x10c>
    aee4:	mov	x0, sp
    aee8:	mov	x1, x21
    aeec:	mov	x2, x20
    aef0:	mov	x3, x23
    aef4:	mov	x4, x24
    aef8:	mov	w5, w25
    aefc:	bl	4a90 <mpfr_fmms@plt>
    af00:	cmp	w0, #0x0
    af04:	cset	w27, ne  // ne = any
    af08:	b	af10 <mpc_mul_naive@@Base+0x110>
    af0c:	mov	w27, #0x2                   	// #2
    af10:	add	x25, x28, #0x20
    af14:	asr	w22, w22, #4
    af18:	mov	x0, x25
    af1c:	mov	x1, x21
    af20:	mov	x2, x24
    af24:	mov	x3, x23
    af28:	mov	x4, x20
    af2c:	mov	w5, w22
    af30:	bl	4c90 <mpfr_fmma@plt>
    af34:	tbnz	w0, #31, af64 <mpc_mul_naive@@Base+0x164>
    af38:	mov	x0, x25
    af3c:	mov	x1, x21
    af40:	mov	x2, x24
    af44:	mov	x3, x23
    af48:	mov	x4, x20
    af4c:	mov	w5, w22
    af50:	bl	4c90 <mpfr_fmma@plt>
    af54:	cmp	w0, #0x0
    af58:	cset	w8, ne  // ne = any
    af5c:	lsl	w8, w8, #2
    af60:	b	af68 <mpc_mul_naive@@Base+0x168>
    af64:	mov	w8, #0x8                   	// #8
    af68:	mov	x1, sp
    af6c:	mov	x0, x19
    af70:	mov	w2, wzr
    af74:	orr	w20, w8, w27
    af78:	bl	5580 <mpc_set@plt>
    af7c:	cbz	w26, af88 <mpc_mul_naive@@Base+0x188>
    af80:	mov	x0, sp
    af84:	bl	4a10 <mpc_clear@plt>
    af88:	mov	w0, w20
    af8c:	ldp	x20, x19, [sp, #144]
    af90:	ldp	x22, x21, [sp, #128]
    af94:	ldp	x24, x23, [sp, #112]
    af98:	ldp	x26, x25, [sp, #96]
    af9c:	ldp	x28, x27, [sp, #80]
    afa0:	ldp	x29, x30, [sp, #64]
    afa4:	add	sp, sp, #0xa0
    afa8:	ret
    afac:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    afb0:	ldr	x8, [x8, #4008]
    afb4:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    afb8:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    afbc:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    afc0:	ldr	x0, [x8]
    afc4:	add	x1, x1, #0x3b0
    afc8:	add	x2, x2, #0x516
    afcc:	add	x4, x4, #0x51c
    afd0:	mov	w3, #0x175                 	// #373
    afd4:	bl	55a0 <fprintf@plt>
    afd8:	bl	5000 <abort@plt>

000000000000afdc <mpc_mul_karatsuba@@Base>:
    afdc:	sub	sp, sp, #0x1c0
    afe0:	cmp	x0, x1
    afe4:	cset	w8, eq  // eq = none
    afe8:	cmp	x0, x2
    afec:	cset	w9, eq  // eq = none
    aff0:	orr	w8, w8, w9
    aff4:	stp	x26, x25, [sp, #384]
    aff8:	stp	x24, x23, [sp, #400]
    affc:	stp	x22, x21, [sp, #416]
    b000:	mov	x23, x2
    b004:	mov	x25, x1
    b008:	mov	x21, x0
    b00c:	cmp	w8, #0x1
    b010:	mov	w26, w3
    b014:	stp	x29, x30, [sp, #352]
    b018:	stp	x28, x27, [sp, #368]
    b01c:	stp	x20, x19, [sp, #432]
    b020:	add	x29, sp, #0x160
    b024:	str	w8, [sp, #116]
    b028:	b.ne	b040 <mpc_mul_karatsuba@@Base+0x64>  // b.any
    b02c:	ldr	x1, [x21]
    b030:	ldr	x2, [x21, #32]
    b034:	add	x0, sp, #0x90
    b038:	bl	53c0 <mpc_init3@plt>
    b03c:	b	b050 <mpc_mul_karatsuba@@Base+0x74>
    b040:	ldp	q1, q0, [x21, #32]
    b044:	ldp	q3, q2, [x21]
    b048:	stp	q1, q0, [sp, #176]
    b04c:	stp	q3, q2, [sp, #144]
    b050:	add	x19, x25, #0x20
    b054:	mov	x0, x25
    b058:	mov	x1, x19
    b05c:	add	x20, x23, #0x20
    b060:	bl	53b0 <mpfr_cmpabs@plt>
    b064:	cmp	w0, #0x0
    b068:	mov	w22, #0xffffffff            	// #-1
    b06c:	mov	w24, w0
    b070:	cneg	w8, w22, ge  // ge = tcont
    b074:	mov	x0, x23
    b078:	mov	x1, x20
    b07c:	str	w8, [sp, #48]
    b080:	csel	x27, x25, x19, lt  // lt = tstop
    b084:	str	x25, [sp, #88]
    b088:	csel	x28, x19, x25, lt  // lt = tstop
    b08c:	bl	53b0 <mpfr_cmpabs@plt>
    b090:	cmp	w0, #0x0
    b094:	lsr	w8, w0, #31
    b098:	cneg	w16, w22, ge  // ge = tcont
    b09c:	add	w22, w8, w24, lsr #31
    b0a0:	asr	w14, w26, #4
    b0a4:	and	w15, w26, #0xf
    b0a8:	ldr	x11, [x21]
    b0ac:	ldr	x12, [x21, #32]
    b0b0:	ldr	x13, [x28]
    b0b4:	csel	x25, x23, x20, lt  // lt = tstop
    b0b8:	stp	x23, x21, [sp, #96]
    b0bc:	csel	x23, x20, x23, lt  // lt = tstop
    b0c0:	tst	w22, #0x1
    b0c4:	csel	w8, w15, w14, eq  // eq = none
    b0c8:	mov	w9, #0x2                   	// #2
    b0cc:	cmp	w8, #0x3
    b0d0:	mov	w10, #0x3                   	// #3
    b0d4:	csel	w9, w9, w8, eq  // eq = none
    b0d8:	cmp	w8, #0x2
    b0dc:	csel	w9, w10, w9, eq  // eq = none
    b0e0:	cmp	w22, #0x0
    b0e4:	stp	w15, w14, [sp, #24]
    b0e8:	and	w10, w22, #0x1
    b0ec:	csel	w8, w8, w9, eq  // eq = none
    b0f0:	str	w8, [sp, #44]
    b0f4:	ldr	x8, [x25]
    b0f8:	lsl	x9, x10, #5
    b0fc:	ldr	x9, [x21, x9]
    b100:	str	w0, [sp, #52]
    b104:	cmp	x11, x12
    b108:	add	x1, x8, x13
    b10c:	sub	x0, x29, #0x48
    b110:	str	w26, [sp, #84]
    b114:	str	w16, [sp, #72]
    b118:	str	x9, [sp, #32]
    b11c:	csel	x19, x11, x12, gt
    b120:	str	x1, [sp, #64]
    b124:	bl	5440 <mpfr_init2@plt>
    b128:	ldr	x8, [x27]
    b12c:	ldr	x9, [x23]
    b130:	sub	x0, x29, #0x68
    b134:	mov	x21, x27
    b138:	add	x1, x9, x8
    b13c:	str	x1, [sp, #56]
    b140:	bl	5440 <mpfr_init2@plt>
    b144:	sub	x0, x29, #0x28
    b148:	mov	w1, #0x2                   	// #2
    b14c:	bl	5440 <mpfr_init2@plt>
    b150:	sub	x0, x29, #0x88
    b154:	mov	w1, #0x2                   	// #2
    b158:	bl	5440 <mpfr_init2@plt>
    b15c:	sub	x0, x29, #0x48
    b160:	mov	x1, x28
    b164:	mov	x2, x25
    b168:	mov	w3, wzr
    b16c:	str	x28, [sp, #120]
    b170:	str	x25, [sp, #136]
    b174:	bl	4b70 <mpfr_mul@plt>
    b178:	mov	w25, wzr
    b17c:	mov	w26, wzr
    b180:	mov	w20, wzr
    b184:	cbnz	w0, b70c <mpc_mul_karatsuba@@Base+0x730>
    b188:	str	x21, [sp, #16]
    b18c:	tbz	w24, #31, b1a0 <mpc_mul_karatsuba@@Base+0x1c4>
    b190:	sub	x0, x29, #0x48
    b194:	sub	x1, x29, #0x48
    b198:	mov	w2, wzr
    b19c:	bl	4b80 <mpfr_neg@plt>
    b1a0:	ldr	x1, [sp, #16]
    b1a4:	sub	x0, x29, #0x68
    b1a8:	mov	x2, x23
    b1ac:	mov	w3, wzr
    b1b0:	bl	4b70 <mpfr_mul@plt>
    b1b4:	mov	w25, wzr
    b1b8:	mov	w26, wzr
    b1bc:	mov	w20, wzr
    b1c0:	cbnz	w0, b70c <mpc_mul_karatsuba@@Base+0x730>
    b1c4:	ldr	w8, [sp, #52]
    b1c8:	tbz	w8, #31, b1dc <mpc_mul_karatsuba@@Base+0x200>
    b1cc:	sub	x0, x29, #0x68
    b1d0:	sub	x1, x29, #0x68
    b1d4:	mov	w2, wzr
    b1d8:	bl	4b80 <mpfr_neg@plt>
    b1dc:	mov	x25, #0x2                   	// #2
    b1e0:	sub	x0, x29, #0x48
    b1e4:	sub	x1, x29, #0x68
    b1e8:	movk	x25, #0x8000, lsl #48
    b1ec:	bl	53b0 <mpfr_cmpabs@plt>
    b1f0:	ldr	w24, [sp, #72]
    b1f4:	cmp	w0, #0x1
    b1f8:	b.lt	b21c <mpc_mul_karatsuba@@Base+0x240>  // b.tstop
    b1fc:	ldur	x8, [x29, #-56]
    b200:	ldr	x26, [sp, #120]
    b204:	cmp	x8, x25
    b208:	b.gt	b24c <mpc_mul_karatsuba@@Base+0x270>
    b20c:	b.ne	b214 <mpc_mul_karatsuba@@Base+0x238>  // b.any
    b210:	bl	4b00 <mpfr_set_erangeflag@plt>
    b214:	mov	w8, wzr
    b218:	b	b250 <mpc_mul_karatsuba@@Base+0x274>
    b21c:	ldur	x8, [x29, #-56]
    b220:	ldr	x26, [sp, #120]
    b224:	mov	x9, #0x2                   	// #2
    b228:	movk	x9, #0x8000, lsl #48
    b22c:	cmp	x8, x9
    b230:	cbz	w0, b280 <mpc_mul_karatsuba@@Base+0x2a4>
    b234:	b.gt	b29c <mpc_mul_karatsuba@@Base+0x2c0>
    b238:	cmp	x8, x25
    b23c:	b.ne	b244 <mpc_mul_karatsuba@@Base+0x268>  // b.any
    b240:	bl	4b00 <mpfr_set_erangeflag@plt>
    b244:	mov	w20, wzr
    b248:	b	b2a0 <mpc_mul_karatsuba@@Base+0x2c4>
    b24c:	ldur	w8, [x29, #-64]
    b250:	ldur	x9, [x29, #-88]
    b254:	ldr	x27, [sp, #32]
    b258:	mov	x10, #0x2                   	// #2
    b25c:	movk	x10, #0x8000, lsl #48
    b260:	cmp	x9, x10
    b264:	lsl	w20, w8, #1
    b268:	b.gt	b300 <mpc_mul_karatsuba@@Base+0x324>
    b26c:	cmp	x9, x25
    b270:	b.ne	b278 <mpc_mul_karatsuba@@Base+0x29c>  // b.any
    b274:	bl	4b00 <mpfr_set_erangeflag@plt>
    b278:	mov	w8, wzr
    b27c:	b	b304 <mpc_mul_karatsuba@@Base+0x328>
    b280:	b.gt	b2d8 <mpc_mul_karatsuba@@Base+0x2fc>
    b284:	ldr	x27, [sp, #32]
    b288:	cmp	x8, x25
    b28c:	b.ne	b294 <mpc_mul_karatsuba@@Base+0x2b8>  // b.any
    b290:	bl	4b00 <mpfr_set_erangeflag@plt>
    b294:	mov	w20, wzr
    b298:	b	b2e0 <mpc_mul_karatsuba@@Base+0x304>
    b29c:	ldur	w20, [x29, #-64]
    b2a0:	ldur	x8, [x29, #-88]
    b2a4:	ldr	x27, [sp, #32]
    b2a8:	mov	x9, #0x2                   	// #2
    b2ac:	movk	x9, #0x8000, lsl #48
    b2b0:	cmp	x8, x9
    b2b4:	b.gt	b2cc <mpc_mul_karatsuba@@Base+0x2f0>
    b2b8:	cmp	x8, x25
    b2bc:	b.ne	b2c4 <mpc_mul_karatsuba@@Base+0x2e8>  // b.any
    b2c0:	bl	4b00 <mpfr_set_erangeflag@plt>
    b2c4:	mov	w8, wzr
    b2c8:	b	b2d0 <mpc_mul_karatsuba@@Base+0x2f4>
    b2cc:	ldur	w8, [x29, #-96]
    b2d0:	sub	w20, w20, w8, lsl #1
    b2d4:	b	b308 <mpc_mul_karatsuba@@Base+0x32c>
    b2d8:	ldur	w20, [x29, #-64]
    b2dc:	ldr	x27, [sp, #32]
    b2e0:	ldur	x8, [x29, #-88]
    b2e4:	mov	x9, #0x2                   	// #2
    b2e8:	movk	x9, #0x8000, lsl #48
    b2ec:	cmp	x8, x9
    b2f0:	b.gt	b300 <mpc_mul_karatsuba@@Base+0x324>
    b2f4:	cmp	x8, x25
    b2f8:	b.eq	b274 <mpc_mul_karatsuba@@Base+0x298>  // b.none
    b2fc:	b	b278 <mpc_mul_karatsuba@@Base+0x29c>
    b300:	ldur	w8, [x29, #-96]
    b304:	sub	w20, w20, w8
    b308:	ldr	x8, [x26, #16]
    b30c:	mov	x9, #0x2                   	// #2
    b310:	movk	x9, #0x8000, lsl #48
    b314:	str	w22, [sp, #12]
    b318:	cmp	x8, x9
    b31c:	b.gt	b334 <mpc_mul_karatsuba@@Base+0x358>
    b320:	cmp	x8, x25
    b324:	b.ne	b32c <mpc_mul_karatsuba@@Base+0x350>  // b.any
    b328:	bl	4b00 <mpfr_set_erangeflag@plt>
    b32c:	mov	w22, wzr
    b330:	b	b338 <mpc_mul_karatsuba@@Base+0x35c>
    b334:	ldr	w22, [x26, #8]
    b338:	ldr	x8, [x23, #16]
    b33c:	mov	x9, #0x2                   	// #2
    b340:	movk	x9, #0x8000, lsl #48
    b344:	str	x23, [sp, #128]
    b348:	cmp	x8, x9
    b34c:	b.gt	b364 <mpc_mul_karatsuba@@Base+0x388>
    b350:	cmp	x8, x25
    b354:	b.ne	b35c <mpc_mul_karatsuba@@Base+0x380>  // b.any
    b358:	bl	4b00 <mpfr_set_erangeflag@plt>
    b35c:	mov	w8, wzr
    b360:	b	b368 <mpc_mul_karatsuba@@Base+0x38c>
    b364:	ldr	w8, [x23, #8]
    b368:	ldp	w25, w21, [sp, #44]
    b36c:	ldr	x28, [sp, #16]
    b370:	mul	w9, w24, w21
    b374:	mul	w9, w9, w22
    b378:	mul	w23, w9, w8
    b37c:	mul	w8, w23, w20
    b380:	tbnz	w8, #31, b3a8 <mpc_mul_karatsuba@@Base+0x3cc>
    b384:	mov	w8, w24
    b388:	mov	w24, w21
    b38c:	mov	w21, w8
    b390:	ldr	x8, [sp, #136]
    b394:	str	x8, [sp, #120]
    b398:	mov	x8, x26
    b39c:	ldr	x26, [sp, #128]
    b3a0:	stp	x8, x28, [sp, #128]
    b3a4:	b	b3b8 <mpc_mul_karatsuba@@Base+0x3dc>
    b3a8:	sub	x0, x29, #0x48
    b3ac:	sub	x1, x29, #0x68
    b3b0:	bl	5090 <mpfr_swap@plt>
    b3b4:	str	x28, [sp, #120]
    b3b8:	ldp	x9, x8, [sp, #56]
    b3bc:	mov	w10, #0x2                   	// #2
    b3c0:	mov	w22, wzr
    b3c4:	cmp	x8, x9
    b3c8:	csel	x8, x8, x9, gt
    b3cc:	cmp	w23, #0x0
    b3d0:	cinc	w20, w10, le
    b3d4:	cmp	w25, #0x0
    b3d8:	cinc	x28, x27, eq  // eq = none
    b3dc:	str	x8, [sp, #72]
    b3e0:	mov	x0, x19
    b3e4:	bl	4d20 <mpc_ceil_log2@plt>
    b3e8:	add	x8, x19, x0
    b3ec:	add	x19, x8, #0x3
    b3f0:	sub	x0, x29, #0x28
    b3f4:	mov	x1, x19
    b3f8:	bl	4c80 <mpfr_set_prec@plt>
    b3fc:	sub	x0, x29, #0x88
    b400:	mov	x1, x19
    b404:	bl	4c80 <mpfr_set_prec@plt>
    b408:	sub	x0, x29, #0x28
    b40c:	mov	w3, #0x4                   	// #4
    b410:	cmn	w24, #0x1
    b414:	b.eq	b424 <mpc_mul_karatsuba@@Base+0x448>  // b.none
    b418:	ldp	x2, x1, [sp, #128]
    b41c:	bl	4e60 <mpfr_add@plt>
    b420:	b	b42c <mpc_mul_karatsuba@@Base+0x450>
    b424:	ldp	x2, x1, [sp, #128]
    b428:	bl	4a60 <mpfr_sub@plt>
    b42c:	mov	w27, w0
    b430:	mov	w25, w24
    b434:	sub	x0, x29, #0x88
    b438:	mov	w3, #0x4                   	// #4
    b43c:	mov	x1, x26
    b440:	cmn	w21, #0x1
    b444:	b.eq	b458 <mpc_mul_karatsuba@@Base+0x47c>  // b.none
    b448:	ldr	x2, [sp, #120]
    b44c:	bl	4a60 <mpfr_sub@plt>
    b450:	mov	w24, w0
    b454:	b	b474 <mpc_mul_karatsuba@@Base+0x498>
    b458:	ldr	x2, [sp, #120]
    b45c:	bl	4e60 <mpfr_add@plt>
    b460:	mov	w24, w0
    b464:	sub	x0, x29, #0x88
    b468:	sub	x1, x29, #0x88
    b46c:	mov	w2, wzr
    b470:	bl	4b80 <mpfr_neg@plt>
    b474:	orr	w23, w24, w27
    b478:	mov	x27, x19
    b47c:	cbnz	w23, b494 <mpc_mul_karatsuba@@Base+0x4b8>
    b480:	lsl	x27, x19, #1
    b484:	sub	x0, x29, #0x28
    b488:	mov	x1, x27
    b48c:	mov	w2, wzr
    b490:	bl	5370 <mpfr_prec_round@plt>
    b494:	sub	x0, x29, #0x28
    b498:	sub	x1, x29, #0x28
    b49c:	sub	x2, x29, #0x88
    b4a0:	mov	w3, #0x4                   	// #4
    b4a4:	bl	4b70 <mpfr_mul@plt>
    b4a8:	orr	w23, w0, w23
    b4ac:	cbnz	w23, b4e4 <mpc_mul_karatsuba@@Base+0x508>
    b4b0:	ldur	x8, [x29, #-56]
    b4b4:	ldur	x9, [x29, #-88]
    b4b8:	subs	x8, x8, x9
    b4bc:	ldr	x9, [sp, #72]
    b4c0:	cneg	x8, x8, mi  // mi = first
    b4c4:	add	x8, x8, x9
    b4c8:	cmp	x8, x27
    b4cc:	csinc	x1, x27, x8, ge  // ge = tcont
    b4d0:	cmp	x1, x19
    b4d4:	b.le	b4e4 <mpc_mul_karatsuba@@Base+0x508>
    b4d8:	sub	x0, x29, #0x88
    b4dc:	mov	w2, wzr
    b4e0:	bl	5370 <mpfr_prec_round@plt>
    b4e4:	sub	x0, x29, #0x88
    b4e8:	sub	x1, x29, #0x48
    b4ec:	sub	x2, x29, #0x68
    b4f0:	mov	w3, w20
    b4f4:	bl	4a60 <mpfr_sub@plt>
    b4f8:	ldur	x8, [x29, #-24]
    b4fc:	mov	x9, #0x2                   	// #2
    b500:	movk	x9, #0x8000, lsl #48
    b504:	orr	w23, w0, w23
    b508:	cmp	x8, x9
    b50c:	b.gt	b528 <mpc_mul_karatsuba@@Base+0x54c>
    b510:	mov	x9, #0x2                   	// #2
    b514:	movk	x9, #0x8000, lsl #48
    b518:	cmp	x8, x9
    b51c:	b.ne	b534 <mpc_mul_karatsuba@@Base+0x558>  // b.any
    b520:	bl	4b00 <mpfr_set_erangeflag@plt>
    b524:	b	b534 <mpc_mul_karatsuba@@Base+0x558>
    b528:	ldur	w8, [x29, #-32]
    b52c:	mov	w24, w20
    b530:	cbnz	w8, b574 <mpc_mul_karatsuba@@Base+0x598>
    b534:	ldur	x8, [x29, #-120]
    b538:	mov	x9, #0x2                   	// #2
    b53c:	movk	x9, #0x8000, lsl #48
    b540:	cmp	x8, x9
    b544:	b.gt	b564 <mpc_mul_karatsuba@@Base+0x588>
    b548:	mov	x9, #0x2                   	// #2
    b54c:	movk	x9, #0x8000, lsl #48
    b550:	cmp	x8, x9
    b554:	b.ne	b55c <mpc_mul_karatsuba@@Base+0x580>  // b.any
    b558:	bl	4b00 <mpfr_set_erangeflag@plt>
    b55c:	mov	w24, #0x3                   	// #3
    b560:	b	b574 <mpc_mul_karatsuba@@Base+0x598>
    b564:	ldur	w8, [x29, #-128]
    b568:	cmp	w8, #0x0
    b56c:	mov	w8, #0x2                   	// #2
    b570:	cinc	w24, w8, le
    b574:	sub	x0, x29, #0x28
    b578:	sub	x1, x29, #0x28
    b57c:	sub	x2, x29, #0x88
    b580:	mov	w3, w24
    b584:	bl	4e60 <mpfr_add@plt>
    b588:	orr	w8, w23, w0
    b58c:	cbz	w8, b5e4 <mpc_mul_karatsuba@@Base+0x608>
    b590:	sub	x1, x27, #0x3
    b594:	sub	x0, x29, #0x28
    b598:	mov	w3, #0x1                   	// #1
    b59c:	mov	w2, w24
    b5a0:	mov	x4, x28
    b5a4:	bl	5450 <mpfr_can_round@plt>
    b5a8:	orr	w8, w22, w0
    b5ac:	mov	w22, #0x1                   	// #1
    b5b0:	mov	w24, w25
    b5b4:	cbz	w8, b3e0 <mpc_mul_karatsuba@@Base+0x404>
    b5b8:	cbz	w0, b678 <mpc_mul_karatsuba@@Base+0x69c>
    b5bc:	ldur	x8, [x29, #-24]
    b5c0:	mov	x9, #0x2                   	// #2
    b5c4:	movk	x9, #0x8000, lsl #48
    b5c8:	cmp	x8, x9
    b5cc:	b.gt	b688 <mpc_mul_karatsuba@@Base+0x6ac>
    b5d0:	mov	x9, #0x2                   	// #2
    b5d4:	movk	x9, #0x8000, lsl #48
    b5d8:	cmp	x8, x9
    b5dc:	b.ne	b5e4 <mpc_mul_karatsuba@@Base+0x608>  // b.any
    b5e0:	bl	4b00 <mpfr_set_erangeflag@plt>
    b5e4:	mov	w20, wzr
    b5e8:	ldr	w8, [sp, #12]
    b5ec:	cmp	w8, #0x1
    b5f0:	b.eq	b638 <mpc_mul_karatsuba@@Base+0x65c>  // b.none
    b5f4:	cbnz	w8, b658 <mpc_mul_karatsuba@@Base+0x67c>
    b5f8:	ldur	w3, [x29, #-32]
    b5fc:	ldr	w2, [sp, #24]
    b600:	add	x0, sp, #0x90
    b604:	sub	x1, x29, #0x28
    b608:	add	x22, sp, #0x90
    b60c:	bl	51d0 <mpfr_set4@plt>
    b610:	ldr	w3, [sp, #28]
    b614:	mov	w19, w0
    b618:	add	x0, x22, #0x20
    b61c:	sub	x1, x29, #0x48
    b620:	sub	x2, x29, #0x68
    b624:	bl	4e60 <mpfr_add@plt>
    b628:	cmp	w19, #0x0
    b62c:	mov	w26, w0
    b630:	csel	w25, w20, w19, eq  // eq = none
    b634:	b	b6f8 <mpc_mul_karatsuba@@Base+0x71c>
    b638:	ldr	w2, [sp, #28]
    b63c:	add	x8, sp, #0x90
    b640:	add	x0, x8, #0x20
    b644:	sub	x1, x29, #0x28
    b648:	bl	4b80 <mpfr_neg@plt>
    b64c:	cbz	w0, b690 <mpc_mul_karatsuba@@Base+0x6b4>
    b650:	mov	w26, w0
    b654:	b	b694 <mpc_mul_karatsuba@@Base+0x6b8>
    b658:	ldr	w2, [sp, #24]
    b65c:	add	x0, sp, #0x90
    b660:	sub	x1, x29, #0x28
    b664:	add	x19, sp, #0x90
    b668:	bl	4b80 <mpfr_neg@plt>
    b66c:	cbz	w0, b6b0 <mpc_mul_karatsuba@@Base+0x6d4>
    b670:	mov	w25, w0
    b674:	b	b6b4 <mpc_mul_karatsuba@@Base+0x6d8>
    b678:	mov	w25, wzr
    b67c:	mov	w26, wzr
    b680:	mov	w20, wzr
    b684:	b	b70c <mpc_mul_karatsuba@@Base+0x730>
    b688:	ldur	w20, [x29, #-32]
    b68c:	b	b5e8 <mpc_mul_karatsuba@@Base+0x60c>
    b690:	neg	w26, w20
    b694:	ldr	w3, [sp, #24]
    b698:	add	x0, sp, #0x90
    b69c:	sub	x1, x29, #0x48
    b6a0:	sub	x2, x29, #0x68
    b6a4:	bl	4e60 <mpfr_add@plt>
    b6a8:	mov	w25, w0
    b6ac:	b	b6f8 <mpc_mul_karatsuba@@Base+0x71c>
    b6b0:	neg	w25, w20
    b6b4:	ldr	w20, [sp, #28]
    b6b8:	mov	w8, #0x2                   	// #2
    b6bc:	add	x19, x19, #0x20
    b6c0:	mov	w9, #0x3                   	// #3
    b6c4:	cmp	w20, #0x3
    b6c8:	csel	w8, w8, w20, eq  // eq = none
    b6cc:	cmp	w20, #0x2
    b6d0:	csel	w3, w9, w8, eq  // eq = none
    b6d4:	sub	x1, x29, #0x48
    b6d8:	sub	x2, x29, #0x68
    b6dc:	mov	x0, x19
    b6e0:	bl	4e60 <mpfr_add@plt>
    b6e4:	neg	w26, w0
    b6e8:	mov	x0, x19
    b6ec:	mov	x1, x19
    b6f0:	mov	w2, w20
    b6f4:	bl	4b80 <mpfr_neg@plt>
    b6f8:	ldr	x0, [sp, #104]
    b6fc:	add	x1, sp, #0x90
    b700:	mov	w2, wzr
    b704:	bl	5580 <mpc_set@plt>
    b708:	mov	w20, #0x1                   	// #1
    b70c:	sub	x0, x29, #0x28
    b710:	bl	4d60 <mpfr_clear@plt>
    b714:	sub	x0, x29, #0x48
    b718:	bl	4d60 <mpfr_clear@plt>
    b71c:	sub	x0, x29, #0x68
    b720:	bl	4d60 <mpfr_clear@plt>
    b724:	sub	x0, x29, #0x88
    b728:	bl	4d60 <mpfr_clear@plt>
    b72c:	ldr	w8, [sp, #116]
    b730:	cbz	w8, b73c <mpc_mul_karatsuba@@Base+0x760>
    b734:	add	x0, sp, #0x90
    b738:	bl	4a10 <mpc_clear@plt>
    b73c:	cbz	w20, b76c <mpc_mul_karatsuba@@Base+0x790>
    b740:	cmp	w25, #0x0
    b744:	mov	w8, #0x2                   	// #2
    b748:	cset	w9, ne  // ne = any
    b74c:	csel	w8, w8, w9, lt  // lt = tstop
    b750:	cmp	w26, #0x0
    b754:	cset	w9, ne  // ne = any
    b758:	lsl	w9, w9, #2
    b75c:	mov	w10, #0x8                   	// #8
    b760:	csel	w9, w10, w9, lt  // lt = tstop
    b764:	orr	w0, w9, w8
    b768:	b	b77c <mpc_mul_karatsuba@@Base+0x7a0>
    b76c:	ldp	x2, x0, [sp, #96]
    b770:	ldr	x1, [sp, #88]
    b774:	ldr	w3, [sp, #84]
    b778:	bl	4eb0 <mpc_mul_naive@plt>
    b77c:	ldp	x20, x19, [sp, #432]
    b780:	ldp	x22, x21, [sp, #416]
    b784:	ldp	x24, x23, [sp, #400]
    b788:	ldp	x26, x25, [sp, #384]
    b78c:	ldp	x28, x27, [sp, #368]
    b790:	ldp	x29, x30, [sp, #352]
    b794:	add	sp, sp, #0x1c0
    b798:	ret

000000000000b79c <mpc_mul@@Base>:
    b79c:	stp	x29, x30, [sp, #-32]!
    b7a0:	ldr	x10, [x1, #16]
    b7a4:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    b7a8:	str	x19, [sp, #16]
    b7ac:	mov	x8, x1
    b7b0:	cmp	x10, x9
    b7b4:	mov	x19, x0
    b7b8:	mov	x29, sp
    b7bc:	b.eq	b7cc <mpc_mul@@Base+0x30>  // b.none
    b7c0:	ldr	x12, [x8, #48]
    b7c4:	cmp	x12, x9
    b7c8:	b.ne	b7d8 <mpc_mul@@Base+0x3c>  // b.any
    b7cc:	mov	x0, x19
    b7d0:	mov	x1, x8
    b7d4:	b	b800 <mpc_mul@@Base+0x64>
    b7d8:	ldr	x9, [x2, #16]
    b7dc:	mov	x13, #0x8000000000000003    	// #-9223372036854775805
    b7e0:	cmp	x9, x13
    b7e4:	b.eq	b7f4 <mpc_mul@@Base+0x58>  // b.none
    b7e8:	ldr	x11, [x2, #48]
    b7ec:	cmp	x11, x13
    b7f0:	b.ne	b814 <mpc_mul@@Base+0x78>  // b.any
    b7f4:	mov	x0, x19
    b7f8:	mov	x1, x2
    b7fc:	mov	x2, x8
    b800:	bl	b974 <mpc_mul@@Base+0x1d8>
    b804:	ldr	x19, [sp, #16]
    b808:	mov	w0, wzr
    b80c:	ldp	x29, x30, [sp], #32
    b810:	ret
    b814:	mov	x13, #0x2                   	// #2
    b818:	movk	x13, #0x8000, lsl #48
    b81c:	cmp	x10, x13
    b820:	b.eq	b858 <mpc_mul@@Base+0xbc>  // b.none
    b824:	cmp	x12, x13
    b828:	b.eq	b858 <mpc_mul@@Base+0xbc>  // b.none
    b82c:	cmp	x9, x13
    b830:	b.eq	b858 <mpc_mul@@Base+0xbc>  // b.none
    b834:	cmp	x11, x13
    b838:	b.eq	b858 <mpc_mul@@Base+0xbc>  // b.none
    b83c:	mov	x13, #0x8000000000000001    	// #-9223372036854775807
    b840:	cmp	x12, x13
    b844:	b.ne	b86c <mpc_mul@@Base+0xd0>  // b.any
    b848:	mov	x0, x19
    b84c:	mov	x1, x2
    b850:	mov	x2, x8
    b854:	b	b87c <mpc_mul@@Base+0xe0>
    b858:	mov	x0, x19
    b85c:	bl	4a40 <mpfr_set_nan@plt>
    b860:	add	x0, x19, #0x20
    b864:	bl	4a40 <mpfr_set_nan@plt>
    b868:	b	b804 <mpc_mul@@Base+0x68>
    b86c:	cmp	x11, x13
    b870:	b.ne	b888 <mpc_mul@@Base+0xec>  // b.any
    b874:	mov	x0, x19
    b878:	mov	x1, x8
    b87c:	ldr	x19, [sp, #16]
    b880:	ldp	x29, x30, [sp], #32
    b884:	b	bc48 <mpc_mul@@Base+0x4ac>
    b888:	mov	x13, #0x8000000000000001    	// #-9223372036854775807
    b88c:	cmp	x10, x13
    b890:	b.ne	b8a4 <mpc_mul@@Base+0x108>  // b.any
    b894:	mov	x0, x19
    b898:	mov	x1, x2
    b89c:	mov	x2, x8
    b8a0:	b	b8b4 <mpc_mul@@Base+0x118>
    b8a4:	cmp	x9, x13
    b8a8:	b.ne	b8c0 <mpc_mul@@Base+0x124>  // b.any
    b8ac:	mov	x0, x19
    b8b0:	mov	x1, x8
    b8b4:	ldr	x19, [sp, #16]
    b8b8:	ldp	x29, x30, [sp], #32
    b8bc:	b	bd30 <mpc_mul@@Base+0x594>
    b8c0:	ldr	x13, [x8]
    b8c4:	ldr	x14, [x8, #32]
    b8c8:	subs	x10, x10, x12
    b8cc:	cneg	x10, x10, mi  // mi = first
    b8d0:	cmp	x13, x14
    b8d4:	csel	x12, x13, x14, gt
    b8d8:	cmp	x12, #0x0
    b8dc:	cinc	x12, x12, lt  // lt = tstop
    b8e0:	cmp	x10, x12, asr #1
    b8e4:	b.gt	b910 <mpc_mul@@Base+0x174>
    b8e8:	ldr	x10, [x2]
    b8ec:	ldr	x12, [x2, #32]
    b8f0:	subs	x9, x9, x11
    b8f4:	cneg	x9, x9, mi  // mi = first
    b8f8:	cmp	x10, x12
    b8fc:	csel	x10, x10, x12, gt
    b900:	cmp	x10, #0x0
    b904:	cinc	x10, x10, lt  // lt = tstop
    b908:	cmp	x9, x10, asr #1
    b90c:	b.le	b924 <mpc_mul@@Base+0x188>
    b910:	mov	x0, x19
    b914:	ldr	x19, [sp, #16]
    b918:	mov	x1, x8
    b91c:	ldp	x29, x30, [sp], #32
    b920:	b	4eb0 <mpc_mul_naive@plt>
    b924:	adrp	x11, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    b928:	ldr	x9, [x19]
    b92c:	ldr	x10, [x19, #32]
    b930:	ldr	x11, [x11, #4056]
    b934:	mov	w12, #0x17                  	// #23
    b938:	mov	x0, x19
    b93c:	cmp	x9, x10
    b940:	ldrsw	x11, [x11]
    b944:	csel	x9, x9, x10, gt
    b948:	adrp	x10, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    b94c:	ldr	x10, [x10, #4032]
    b950:	mul	x11, x11, x12
    b954:	adrp	x12, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    b958:	ldr	x12, [x12, #4016]
    b95c:	ldr	x19, [sp, #16]
    b960:	cmp	x9, x11
    b964:	mov	x1, x8
    b968:	csel	x4, x12, x10, gt
    b96c:	ldp	x29, x30, [sp], #32
    b970:	br	x4
    b974:	stp	x29, x30, [sp, #-32]!
    b978:	stp	x20, x19, [sp, #16]
    b97c:	ldr	w8, [x1, #8]
    b980:	ldr	w9, [x1, #40]
    b984:	ldr	w14, [x2, #8]
    b988:	ldr	w15, [x2, #40]
    b98c:	mov	w11, #0x1                   	// #1
    b990:	ldr	x13, [x1, #16]
    b994:	cmp	w8, #0x0
    b998:	cneg	w12, w11, lt  // lt = tstop
    b99c:	cmp	w9, #0x0
    b9a0:	cneg	w10, w11, lt  // lt = tstop
    b9a4:	cmp	w14, #0x0
    b9a8:	mov	x8, #0x2                   	// #2
    b9ac:	cneg	w9, w11, lt  // lt = tstop
    b9b0:	cmp	w15, #0x0
    b9b4:	movk	x8, #0x8000, lsl #48
    b9b8:	cneg	w11, w11, lt  // lt = tstop
    b9bc:	cmp	x13, x8
    b9c0:	mov	x19, x0
    b9c4:	mov	x29, sp
    b9c8:	b.eq	b9f0 <mpc_mul@@Base+0x254>  // b.none
    b9cc:	ldr	x16, [x1, #48]
    b9d0:	cmp	x16, x8
    b9d4:	b.eq	b9f0 <mpc_mul@@Base+0x254>  // b.none
    b9d8:	ldr	x14, [x2, #16]
    b9dc:	cmp	x14, x8
    b9e0:	b.eq	b9f0 <mpc_mul@@Base+0x254>  // b.none
    b9e4:	ldr	x15, [x2, #48]
    b9e8:	cmp	x15, x8
    b9ec:	b.ne	bad8 <mpc_mul@@Base+0x33c>  // b.any
    b9f0:	mov	w20, wzr
    b9f4:	mov	w8, wzr
    b9f8:	orr	w14, w8, w20
    b9fc:	cbnz	w14, ba9c <mpc_mul@@Base+0x300>
    ba00:	ldr	x14, [x2, #16]
    ba04:	ldr	x15, [x2, #48]
    ba08:	mov	x8, #0x7fffffffffffffff    	// #9223372036854775807
    ba0c:	ldr	x17, [x1, #48]
    ba10:	add	x0, x14, x8
    ba14:	add	x1, x15, x8
    ba18:	cmp	x0, #0x1
    ba1c:	mov	x16, #0x8000000000000003    	// #-9223372036854775805
    ba20:	cset	w0, hi  // hi = pmore
    ba24:	cmp	x1, #0x1
    ba28:	cset	w1, hi  // hi = pmore
    ba2c:	cmp	x14, x16
    ba30:	cset	w14, eq  // eq = none
    ba34:	cmp	x15, x16
    ba38:	cset	w15, eq  // eq = none
    ba3c:	orr	w2, w14, w15
    ba40:	add	x18, x13, x8
    ba44:	cmp	w2, #0x0
    ba48:	csel	w14, w14, w0, ne  // ne = any
    ba4c:	csel	w15, w15, w1, ne  // ne = any
    ba50:	cmp	x18, #0x1
    ba54:	add	x8, x17, x8
    ba58:	ccmp	x13, x16, #0x0, hi  // hi = pmore
    ba5c:	csel	w12, w12, wzr, eq  // eq = none
    ba60:	cmp	x8, #0x1
    ba64:	ccmp	x17, x16, #0x0, hi  // hi = pmore
    ba68:	csel	w10, w10, wzr, eq  // eq = none
    ba6c:	mul	w8, w12, w9
    ba70:	cmp	w14, #0x0
    ba74:	mul	w9, w10, w9
    ba78:	mul	w12, w12, w11
    ba7c:	csel	w8, w8, wzr, ne  // ne = any
    ba80:	mul	w11, w10, w11
    ba84:	csel	w9, w9, wzr, ne  // ne = any
    ba88:	cmp	w15, #0x0
    ba8c:	csel	w10, w11, wzr, ne  // ne = any
    ba90:	csel	w11, w12, wzr, ne  // ne = any
    ba94:	sub	w8, w8, w10
    ba98:	add	w20, w11, w9
    ba9c:	mov	x0, x19
    baa0:	cbz	w8, bab0 <mpc_mul@@Base+0x314>
    baa4:	mov	w1, w8
    baa8:	bl	5120 <mpfr_set_inf@plt>
    baac:	b	bab4 <mpc_mul@@Base+0x318>
    bab0:	bl	4a40 <mpfr_set_nan@plt>
    bab4:	add	x0, x19, #0x20
    bab8:	cbz	w20, bacc <mpc_mul@@Base+0x330>
    babc:	mov	w1, w20
    bac0:	ldp	x20, x19, [sp, #16]
    bac4:	ldp	x29, x30, [sp], #32
    bac8:	b	5120 <mpfr_set_inf@plt>
    bacc:	ldp	x20, x19, [sp, #16]
    bad0:	ldp	x29, x30, [sp], #32
    bad4:	b	4a40 <mpfr_set_nan@plt>
    bad8:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    badc:	cmp	x13, x8
    bae0:	b.ne	baf8 <mpc_mul@@Base+0x35c>  // b.any
    bae4:	mov	x17, #0x8000000000000001    	// #-9223372036854775807
    bae8:	cmp	x14, x17
    baec:	b.ne	bb0c <mpc_mul@@Base+0x370>  // b.any
    baf0:	mov	w8, wzr
    baf4:	b	bba0 <mpc_mul@@Base+0x404>
    baf8:	mov	x16, #0x8000000000000001    	// #-9223372036854775807
    bafc:	cmp	x15, x16
    bb00:	b.ne	bb44 <mpc_mul@@Base+0x3a8>  // b.any
    bb04:	mov	w8, wzr
    bb08:	b	bbfc <mpc_mul@@Base+0x460>
    bb0c:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    bb10:	cmp	x16, x8
    bb14:	b.ne	bb24 <mpc_mul@@Base+0x388>  // b.any
    bb18:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    bb1c:	cmp	x15, x8
    bb20:	b.eq	b9f0 <mpc_mul@@Base+0x254>  // b.none
    bb24:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    bb28:	cmp	x16, x8
    bb2c:	b.ne	bb84 <mpc_mul@@Base+0x3e8>  // b.any
    bb30:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    bb34:	cmp	x15, x8
    bb38:	b.ne	bb84 <mpc_mul@@Base+0x3e8>  // b.any
    bb3c:	mov	w8, wzr
    bb40:	b	bbe0 <mpc_mul@@Base+0x444>
    bb44:	cmp	x13, x16
    bb48:	b.ne	bb60 <mpc_mul@@Base+0x3c4>  // b.any
    bb4c:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    bb50:	cmp	x14, x8
    bb54:	b.ne	bb60 <mpc_mul@@Base+0x3c4>  // b.any
    bb58:	mov	w8, wzr
    bb5c:	b	bc10 <mpc_mul@@Base+0x474>
    bb60:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    bb64:	cmp	x14, x8
    bb68:	b.ne	bbf4 <mpc_mul@@Base+0x458>  // b.any
    bb6c:	mul	w17, w9, w12
    bb70:	mul	w8, w11, w10
    bb74:	cmp	w17, w8
    bb78:	b.ne	bbf8 <mpc_mul@@Base+0x45c>  // b.any
    bb7c:	mov	w8, wzr
    bb80:	b	bc04 <mpc_mul@@Base+0x468>
    bb84:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    bb88:	cmp	x15, x8
    bb8c:	mul	w18, w9, w12
    bb90:	ccmp	x16, x8, #0x4, ne  // ne = any
    bb94:	mul	w8, w11, w10
    bb98:	ccmp	w18, w8, #0x0, eq  // eq = none
    bb9c:	csel	w8, wzr, w18, eq  // eq = none
    bba0:	cmp	x15, x17
    bba4:	b.eq	bc1c <mpc_mul@@Base+0x480>  // b.none
    bba8:	mov	x15, #0x8000000000000001    	// #-9223372036854775807
    bbac:	cmp	x16, x15
    bbb0:	b.eq	bbe0 <mpc_mul@@Base+0x444>  // b.none
    bbb4:	mov	x15, #0x8000000000000003    	// #-9223372036854775805
    bbb8:	cmp	x16, x15
    bbbc:	b.ne	bbec <mpc_mul@@Base+0x450>  // b.any
    bbc0:	mov	x15, #0x8000000000000001    	// #-9223372036854775807
    bbc4:	cmp	x14, x15
    bbc8:	b.eq	bc1c <mpc_mul@@Base+0x480>  // b.none
    bbcc:	mul	w14, w11, w12
    bbd0:	mul	w15, w9, w10
    bbd4:	cmp	w14, w15
    bbd8:	b.eq	bbec <mpc_mul@@Base+0x450>  // b.none
    bbdc:	b	bc1c <mpc_mul@@Base+0x480>
    bbe0:	mov	x15, #0x8000000000000003    	// #-9223372036854775805
    bbe4:	cmp	x14, x15
    bbe8:	b.eq	bc1c <mpc_mul@@Base+0x480>  // b.none
    bbec:	mul	w20, w11, w12
    bbf0:	b	b9f8 <mpc_mul@@Base+0x25c>
    bbf4:	mul	w8, w11, w10
    bbf8:	neg	w8, w8
    bbfc:	cmp	x14, x16
    bc00:	b.eq	bc1c <mpc_mul@@Base+0x480>  // b.none
    bc04:	mov	x14, #0x8000000000000001    	// #-9223372036854775807
    bc08:	cmp	x13, x14
    bc0c:	b.ne	bc24 <mpc_mul@@Base+0x488>  // b.any
    bc10:	mov	x14, #0x8000000000000003    	// #-9223372036854775805
    bc14:	cmp	x15, x14
    bc18:	b.ne	bc40 <mpc_mul@@Base+0x4a4>  // b.any
    bc1c:	mov	w20, wzr
    bc20:	b	b9f8 <mpc_mul@@Base+0x25c>
    bc24:	mov	x14, #0x8000000000000003    	// #-9223372036854775805
    bc28:	cmp	x15, x14
    bc2c:	b.ne	bc40 <mpc_mul@@Base+0x4a4>  // b.any
    bc30:	mul	w14, w11, w12
    bc34:	mul	w15, w9, w10
    bc38:	cmp	w14, w15
    bc3c:	b.ne	bc1c <mpc_mul@@Base+0x480>  // b.any
    bc40:	mul	w20, w9, w10
    bc44:	b	b9f8 <mpc_mul@@Base+0x25c>
    bc48:	stp	x29, x30, [sp, #-80]!
    bc4c:	stp	x26, x25, [sp, #16]
    bc50:	stp	x24, x23, [sp, #32]
    bc54:	stp	x22, x21, [sp, #48]
    bc58:	stp	x20, x19, [sp, #64]
    bc5c:	ldr	w8, [x1, #8]
    bc60:	ldr	w10, [x1, #40]
    bc64:	ldr	w11, [x2, #8]
    bc68:	ldr	w12, [x2, #40]
    bc6c:	mov	w9, #0x1                   	// #1
    bc70:	cmp	w8, #0x0
    bc74:	cneg	w24, w9, lt  // lt = tstop
    bc78:	cmp	w10, #0x0
    bc7c:	cneg	w22, w9, lt  // lt = tstop
    bc80:	cmp	w11, #0x0
    bc84:	cneg	w23, w9, lt  // lt = tstop
    bc88:	cmp	w12, #0x0
    bc8c:	mov	x29, sp
    bc90:	mov	w19, w3
    bc94:	mov	x20, x0
    bc98:	cneg	w25, w9, lt  // lt = tstop
    bc9c:	bl	5160 <mpc_mul_fr@plt>
    bca0:	ldr	x8, [x20, #16]
    bca4:	mov	x26, #0x8000000000000001    	// #-9223372036854775807
    bca8:	mov	w21, w0
    bcac:	cmp	x8, x26
    bcb0:	b.ne	bcdc <mpc_mul@@Base+0x540>  // b.any
    bcb4:	cmp	w22, w25
    bcb8:	and	w8, w19, #0xf
    bcbc:	ccmp	w24, w23, #0x4, eq  // eq = none
    bcc0:	ccmp	w8, #0x3, #0x4, eq  // eq = none
    bcc4:	mov	w8, #0xffffffff            	// #-1
    bcc8:	cneg	w3, w8, ne  // ne = any
    bccc:	mov	x0, x20
    bcd0:	mov	x1, x20
    bcd4:	mov	w2, wzr
    bcd8:	bl	51d0 <mpfr_set4@plt>
    bcdc:	ldr	x8, [x20, #48]
    bce0:	cmp	x8, x26
    bce4:	b.ne	bd14 <mpc_mul@@Base+0x578>  // b.any
    bce8:	cmp	w24, w25
    bcec:	and	w8, w19, #0xfffffff0
    bcf0:	mov	w9, #0x30                  	// #48
    bcf4:	ccmp	w22, w23, #0x4, ne  // ne = any
    bcf8:	add	x0, x20, #0x20
    bcfc:	ccmp	w8, w9, #0x4, eq  // eq = none
    bd00:	mov	w8, #0xffffffff            	// #-1
    bd04:	cneg	w3, w8, ne  // ne = any
    bd08:	mov	x1, x0
    bd0c:	mov	w2, wzr
    bd10:	bl	51d0 <mpfr_set4@plt>
    bd14:	mov	w0, w21
    bd18:	ldp	x20, x19, [sp, #64]
    bd1c:	ldp	x22, x21, [sp, #48]
    bd20:	ldp	x24, x23, [sp, #32]
    bd24:	ldp	x26, x25, [sp, #16]
    bd28:	ldp	x29, x30, [sp], #80
    bd2c:	ret
    bd30:	sub	sp, sp, #0x90
    bd34:	cmp	x0, x1
    bd38:	cset	w8, eq  // eq = none
    bd3c:	cmp	x0, x2
    bd40:	cset	w9, eq  // eq = none
    bd44:	stp	x24, x23, [sp, #96]
    bd48:	orr	w24, w8, w9
    bd4c:	stp	x22, x21, [sp, #112]
    bd50:	stp	x20, x19, [sp, #128]
    bd54:	mov	x22, x2
    bd58:	mov	x20, x1
    bd5c:	mov	x19, x0
    bd60:	cmp	w24, #0x1
    bd64:	mov	w21, w3
    bd68:	stp	x29, x30, [sp, #64]
    bd6c:	stp	x26, x25, [sp, #80]
    bd70:	add	x29, sp, #0x40
    bd74:	b.ne	bd8c <mpc_mul@@Base+0x5f0>  // b.any
    bd78:	ldr	x1, [x19]
    bd7c:	ldr	x2, [x19, #32]
    bd80:	mov	x0, sp
    bd84:	bl	53c0 <mpc_init3@plt>
    bd88:	b	bd9c <mpc_mul@@Base+0x600>
    bd8c:	ldp	q1, q0, [x19, #32]
    bd90:	ldp	q3, q2, [x19]
    bd94:	stp	q1, q0, [sp, #32]
    bd98:	stp	q3, q2, [sp]
    bd9c:	ldr	w9, [x22, #8]
    bda0:	ldr	w10, [x20, #40]
    bda4:	mov	w8, #0x1                   	// #1
    bda8:	add	x1, x20, #0x20
    bdac:	cmp	w9, #0x0
    bdb0:	cneg	w9, w8, lt  // lt = tstop
    bdb4:	cmp	w10, #0x0
    bdb8:	cneg	w10, w8, lt  // lt = tstop
    bdbc:	cmp	w9, w10
    bdc0:	b.ne	bdcc <mpc_mul@@Base+0x630>  // b.any
    bdc4:	mov	w25, wzr
    bdc8:	b	bdec <mpc_mul@@Base+0x650>
    bdcc:	ldr	w9, [x22, #40]
    bdd0:	ldr	w10, [x20, #8]
    bdd4:	cmp	w9, #0x0
    bdd8:	cneg	w9, w8, lt  // lt = tstop
    bddc:	cmp	w10, #0x0
    bde0:	cneg	w8, w8, lt  // lt = tstop
    bde4:	cmp	w9, w8
    bde8:	cset	w25, ne  // ne = any
    bdec:	and	w8, w21, #0xf
    bdf0:	mov	w9, #0x2                   	// #2
    bdf4:	cmp	w8, #0x3
    bdf8:	add	x23, x22, #0x20
    bdfc:	csel	w9, w9, w8, eq  // eq = none
    be00:	cmp	w8, #0x2
    be04:	mov	w8, #0x3                   	// #3
    be08:	csel	w3, w8, w9, eq  // eq = none
    be0c:	mov	x0, sp
    be10:	mov	x2, x23
    be14:	mov	x26, sp
    be18:	bl	4b70 <mpfr_mul@plt>
    be1c:	mov	w22, w0
    be20:	mov	x0, sp
    be24:	mov	x1, sp
    be28:	mov	w2, wzr
    be2c:	bl	4b80 <mpfr_neg@plt>
    be30:	asr	w21, w21, #4
    be34:	add	x0, x26, #0x20
    be38:	mov	x1, x20
    be3c:	mov	x2, x23
    be40:	mov	w3, w21
    be44:	bl	4b70 <mpfr_mul@plt>
    be48:	mov	w20, w0
    be4c:	mov	x1, sp
    be50:	mov	x0, x19
    be54:	mov	w2, wzr
    be58:	bl	5580 <mpc_set@plt>
    be5c:	ldr	x8, [x19, #48]
    be60:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    be64:	cmp	x8, x9
    be68:	b.ne	be94 <mpc_mul@@Base+0x6f8>  // b.any
    be6c:	cmp	w21, #0x3
    be70:	cset	w8, eq  // eq = none
    be74:	orr	w8, w8, w25
    be78:	add	x0, x19, #0x20
    be7c:	cmp	w8, #0x0
    be80:	mov	w8, #0xffffffff            	// #-1
    be84:	cneg	w3, w8, eq  // eq = none
    be88:	mov	x1, x0
    be8c:	mov	w2, wzr
    be90:	bl	51d0 <mpfr_set4@plt>
    be94:	cbz	w24, bea0 <mpc_mul@@Base+0x704>
    be98:	mov	x0, sp
    be9c:	bl	4a10 <mpc_clear@plt>
    bea0:	cmp	w22, #0x0
    bea4:	mov	w8, #0x2                   	// #2
    bea8:	cset	w9, ne  // ne = any
    beac:	csel	w8, w8, w9, gt
    beb0:	cmp	w20, #0x0
    beb4:	cset	w9, ne  // ne = any
    beb8:	ldp	x20, x19, [sp, #128]
    bebc:	ldp	x22, x21, [sp, #112]
    bec0:	ldp	x24, x23, [sp, #96]
    bec4:	ldp	x26, x25, [sp, #80]
    bec8:	ldp	x29, x30, [sp, #64]
    becc:	lsl	w9, w9, #2
    bed0:	mov	w10, #0x8                   	// #8
    bed4:	csel	w9, w10, w9, lt  // lt = tstop
    bed8:	orr	w0, w9, w8
    bedc:	add	sp, sp, #0x90
    bee0:	ret

000000000000bee4 <mpc_mul_fr@@Base>:
    bee4:	sub	sp, sp, #0x60
    bee8:	str	x23, [sp, #48]
    beec:	stp	x22, x21, [sp, #64]
    bef0:	stp	x20, x19, [sp, #80]
    bef4:	mov	w21, w3
    bef8:	mov	x19, x2
    befc:	mov	x20, x0
    bf00:	cmp	x0, x2
    bf04:	mov	x23, x1
    bf08:	stp	x29, x30, [sp, #32]
    bf0c:	add	x29, sp, #0x20
    bf10:	b.eq	bf20 <mpc_mul_fr@@Base+0x3c>  // b.none
    bf14:	ldp	q1, q0, [x20]
    bf18:	stp	q1, q0, [sp]
    bf1c:	b	bf2c <mpc_mul_fr@@Base+0x48>
    bf20:	ldr	x1, [x20]
    bf24:	mov	x0, sp
    bf28:	bl	5440 <mpfr_init2@plt>
    bf2c:	and	w3, w21, #0xf
    bf30:	mov	x0, sp
    bf34:	mov	x1, x23
    bf38:	mov	x2, x19
    bf3c:	bl	4b70 <mpfr_mul@plt>
    bf40:	mov	w22, w0
    bf44:	add	x0, x20, #0x20
    bf48:	add	x1, x23, #0x20
    bf4c:	asr	w3, w21, #4
    bf50:	mov	x2, x19
    bf54:	bl	4b70 <mpfr_mul@plt>
    bf58:	ldr	w3, [sp, #8]
    bf5c:	mov	w21, w0
    bf60:	mov	x1, sp
    bf64:	mov	x0, x20
    bf68:	mov	w2, wzr
    bf6c:	bl	51d0 <mpfr_set4@plt>
    bf70:	cmp	x20, x19
    bf74:	b.ne	bf80 <mpc_mul_fr@@Base+0x9c>  // b.any
    bf78:	mov	x0, sp
    bf7c:	bl	4d60 <mpfr_clear@plt>
    bf80:	cmp	w22, #0x0
    bf84:	mov	w8, #0x2                   	// #2
    bf88:	cset	w9, ne  // ne = any
    bf8c:	csel	w8, w8, w9, lt  // lt = tstop
    bf90:	cmp	w21, #0x0
    bf94:	cset	w9, ne  // ne = any
    bf98:	ldp	x20, x19, [sp, #80]
    bf9c:	ldp	x22, x21, [sp, #64]
    bfa0:	ldr	x23, [sp, #48]
    bfa4:	ldp	x29, x30, [sp, #32]
    bfa8:	lsl	w9, w9, #2
    bfac:	mov	w10, #0x8                   	// #8
    bfb0:	csel	w9, w10, w9, lt  // lt = tstop
    bfb4:	orr	w0, w9, w8
    bfb8:	add	sp, sp, #0x60
    bfbc:	ret

000000000000bfc0 <mpc_mul_i@@Base>:
    bfc0:	sub	sp, sp, #0x60
    bfc4:	stp	x29, x30, [sp, #32]
    bfc8:	str	x23, [sp, #48]
    bfcc:	stp	x22, x21, [sp, #64]
    bfd0:	stp	x20, x19, [sp, #80]
    bfd4:	mov	x20, x0
    bfd8:	mov	x19, x1
    bfdc:	ldr	x1, [x1]
    bfe0:	ldr	x8, [x20, #32]!
    bfe4:	mov	w21, w3
    bfe8:	mov	x22, x0
    bfec:	mov	w23, w2
    bff0:	cmp	x1, x8
    bff4:	add	x29, sp, #0x20
    bff8:	b.ne	c050 <mpc_mul_i@@Base+0x90>  // b.any
    bffc:	mov	x8, x19
    c000:	ldr	x9, [x8, #32]!
    c004:	ldr	x10, [x22]
    c008:	cmp	x9, x10
    c00c:	b.ne	c050 <mpc_mul_i@@Base+0x90>  // b.any
    c010:	cmp	x22, x19
    c014:	b.eq	c13c <mpc_mul_i@@Base+0x17c>  // b.none
    c018:	ldr	w3, [x19, #40]
    c01c:	mov	x0, x22
    c020:	mov	x1, x8
    c024:	mov	w2, wzr
    c028:	bl	51d0 <mpfr_set4@plt>
    c02c:	ldr	w3, [x19, #8]
    c030:	mov	x0, x20
    c034:	mov	x1, x19
    c038:	mov	w2, wzr
    c03c:	bl	51d0 <mpfr_set4@plt>
    c040:	tbnz	w23, #31, c14c <mpc_mul_i@@Base+0x18c>
    c044:	mov	x0, x22
    c048:	mov	x1, x22
    c04c:	b	c154 <mpc_mul_i@@Base+0x194>
    c050:	cmp	x22, x19
    c054:	b.eq	c088 <mpc_mul_i@@Base+0xc8>  // b.none
    c058:	add	x1, x19, #0x20
    c05c:	and	w2, w21, #0xf
    c060:	tbnz	w23, #31, c0c0 <mpc_mul_i@@Base+0x100>
    c064:	mov	x0, x22
    c068:	bl	4b80 <mpfr_neg@plt>
    c06c:	ldr	w3, [x19, #8]
    c070:	mov	w22, w0
    c074:	asr	w2, w21, #4
    c078:	mov	x0, x20
    c07c:	mov	x1, x19
    c080:	bl	51d0 <mpfr_set4@plt>
    c084:	b	c0e0 <mpc_mul_i@@Base+0x120>
    c088:	mov	x0, sp
    c08c:	bl	5440 <mpfr_init2@plt>
    c090:	add	x1, x19, #0x20
    c094:	and	w2, w21, #0xf
    c098:	tbnz	w23, #31, c0e8 <mpc_mul_i@@Base+0x128>
    c09c:	mov	x0, sp
    c0a0:	bl	4b80 <mpfr_neg@plt>
    c0a4:	ldr	w3, [x19, #8]
    c0a8:	mov	w22, w0
    c0ac:	asr	w2, w21, #4
    c0b0:	mov	x0, x20
    c0b4:	mov	x1, x19
    c0b8:	bl	51d0 <mpfr_set4@plt>
    c0bc:	b	c108 <mpc_mul_i@@Base+0x148>
    c0c0:	ldr	w3, [x19, #40]
    c0c4:	mov	x0, x22
    c0c8:	bl	51d0 <mpfr_set4@plt>
    c0cc:	mov	w22, w0
    c0d0:	asr	w2, w21, #4
    c0d4:	mov	x0, x20
    c0d8:	mov	x1, x19
    c0dc:	bl	4b80 <mpfr_neg@plt>
    c0e0:	mov	w20, w0
    c0e4:	b	c11c <mpc_mul_i@@Base+0x15c>
    c0e8:	ldr	w3, [x19, #40]
    c0ec:	mov	x0, sp
    c0f0:	bl	51d0 <mpfr_set4@plt>
    c0f4:	mov	w22, w0
    c0f8:	asr	w2, w21, #4
    c0fc:	mov	x0, x20
    c100:	mov	x1, x19
    c104:	bl	4b80 <mpfr_neg@plt>
    c108:	mov	w20, w0
    c10c:	mov	x0, x19
    c110:	bl	4d60 <mpfr_clear@plt>
    c114:	ldp	q1, q0, [sp]
    c118:	stp	q1, q0, [x19]
    c11c:	cmp	w22, #0x0
    c120:	mov	w8, #0x2                   	// #2
    c124:	cset	w9, ne  // ne = any
    c128:	csel	w8, w8, w9, lt  // lt = tstop
    c12c:	lsr	w9, w20, #31
    c130:	cbz	w20, c164 <mpc_mul_i@@Base+0x1a4>
    c134:	mov	w10, #0x4                   	// #4
    c138:	b	c168 <mpc_mul_i@@Base+0x1a8>
    c13c:	mov	x0, x22
    c140:	mov	x1, x20
    c144:	bl	5090 <mpfr_swap@plt>
    c148:	tbz	w23, #31, c044 <mpc_mul_i@@Base+0x84>
    c14c:	mov	x0, x20
    c150:	mov	x1, x20
    c154:	mov	w2, wzr
    c158:	bl	4b80 <mpfr_neg@plt>
    c15c:	mov	w9, wzr
    c160:	mov	w8, wzr
    c164:	mov	w10, wzr
    c168:	ldp	x20, x19, [sp, #80]
    c16c:	ldp	x22, x21, [sp, #64]
    c170:	ldr	x23, [sp, #48]
    c174:	ldp	x29, x30, [sp, #32]
    c178:	cmp	w9, #0x0
    c17c:	mov	w9, #0x8                   	// #8
    c180:	csel	w9, w9, w10, ne  // ne = any
    c184:	orr	w0, w9, w8
    c188:	add	sp, sp, #0x60
    c18c:	ret

000000000000c190 <mpc_mul_si@@Base>:
    c190:	stp	x29, x30, [sp, #-64]!
    c194:	stp	x20, x19, [sp, #48]
    c198:	mov	w19, w3
    c19c:	and	w3, w3, #0xf
    c1a0:	str	x23, [sp, #16]
    c1a4:	stp	x22, x21, [sp, #32]
    c1a8:	mov	x29, sp
    c1ac:	mov	x20, x2
    c1b0:	mov	x21, x1
    c1b4:	mov	x22, x0
    c1b8:	bl	5360 <mpfr_mul_si@plt>
    c1bc:	mov	w23, w0
    c1c0:	add	x0, x22, #0x20
    c1c4:	add	x1, x21, #0x20
    c1c8:	asr	w3, w19, #4
    c1cc:	mov	x2, x20
    c1d0:	bl	5360 <mpfr_mul_si@plt>
    c1d4:	cmp	w23, #0x0
    c1d8:	mov	w8, #0x2                   	// #2
    c1dc:	cset	w9, ne  // ne = any
    c1e0:	csel	w8, w8, w9, lt  // lt = tstop
    c1e4:	cmp	w0, #0x0
    c1e8:	cset	w9, ne  // ne = any
    c1ec:	ldp	x20, x19, [sp, #48]
    c1f0:	ldp	x22, x21, [sp, #32]
    c1f4:	ldr	x23, [sp, #16]
    c1f8:	lsl	w9, w9, #2
    c1fc:	mov	w10, #0x8                   	// #8
    c200:	csel	w9, w10, w9, lt  // lt = tstop
    c204:	orr	w0, w9, w8
    c208:	ldp	x29, x30, [sp], #64
    c20c:	ret

000000000000c210 <mpc_mul_ui@@Base>:
    c210:	stp	x29, x30, [sp, #-64]!
    c214:	stp	x20, x19, [sp, #48]
    c218:	mov	w19, w3
    c21c:	and	w3, w3, #0xf
    c220:	str	x23, [sp, #16]
    c224:	stp	x22, x21, [sp, #32]
    c228:	mov	x29, sp
    c22c:	mov	x20, x2
    c230:	mov	x21, x1
    c234:	mov	x22, x0
    c238:	bl	49c0 <mpfr_mul_ui@plt>
    c23c:	mov	w23, w0
    c240:	add	x0, x22, #0x20
    c244:	add	x1, x21, #0x20
    c248:	asr	w3, w19, #4
    c24c:	mov	x2, x20
    c250:	bl	49c0 <mpfr_mul_ui@plt>
    c254:	cmp	w23, #0x0
    c258:	mov	w8, #0x2                   	// #2
    c25c:	cset	w9, ne  // ne = any
    c260:	csel	w8, w8, w9, lt  // lt = tstop
    c264:	cmp	w0, #0x0
    c268:	cset	w9, ne  // ne = any
    c26c:	ldp	x20, x19, [sp, #48]
    c270:	ldp	x22, x21, [sp, #32]
    c274:	ldr	x23, [sp, #16]
    c278:	lsl	w9, w9, #2
    c27c:	mov	w10, #0x8                   	// #8
    c280:	csel	w9, w10, w9, lt  // lt = tstop
    c284:	orr	w0, w9, w8
    c288:	ldp	x29, x30, [sp], #64
    c28c:	ret

000000000000c290 <mpc_neg@@Base>:
    c290:	stp	x29, x30, [sp, #-48]!
    c294:	stp	x20, x19, [sp, #32]
    c298:	mov	w19, w2
    c29c:	and	w2, w2, #0xf
    c2a0:	stp	x22, x21, [sp, #16]
    c2a4:	mov	x29, sp
    c2a8:	mov	x20, x1
    c2ac:	mov	x21, x0
    c2b0:	bl	4b80 <mpfr_neg@plt>
    c2b4:	mov	w22, w0
    c2b8:	add	x0, x21, #0x20
    c2bc:	add	x1, x20, #0x20
    c2c0:	asr	w2, w19, #4
    c2c4:	bl	4b80 <mpfr_neg@plt>
    c2c8:	cmp	w22, #0x0
    c2cc:	mov	w8, #0x2                   	// #2
    c2d0:	cset	w9, ne  // ne = any
    c2d4:	csel	w8, w8, w9, lt  // lt = tstop
    c2d8:	cmp	w0, #0x0
    c2dc:	cset	w9, ne  // ne = any
    c2e0:	ldp	x20, x19, [sp, #32]
    c2e4:	ldp	x22, x21, [sp, #16]
    c2e8:	lsl	w9, w9, #2
    c2ec:	mov	w10, #0x8                   	// #8
    c2f0:	csel	w9, w10, w9, lt  // lt = tstop
    c2f4:	orr	w0, w9, w8
    c2f8:	ldp	x29, x30, [sp], #48
    c2fc:	ret

000000000000c300 <mpc_norm@@Base>:
    c300:	sub	sp, sp, #0xd0
    c304:	stp	x20, x19, [sp, #192]
    c308:	mov	x20, x0
    c30c:	mov	x0, x1
    c310:	stp	x29, x30, [sp, #112]
    c314:	stp	x28, x27, [sp, #128]
    c318:	stp	x26, x25, [sp, #144]
    c31c:	stp	x24, x23, [sp, #160]
    c320:	stp	x22, x21, [sp, #176]
    c324:	add	x29, sp, #0x70
    c328:	mov	w19, w2
    c32c:	mov	x24, x1
    c330:	bl	54d0 <mpfr_number_p@plt>
    c334:	cbz	w0, c37c <mpc_norm@@Base+0x7c>
    c338:	add	x23, x24, #0x20
    c33c:	mov	x0, x23
    c340:	bl	54d0 <mpfr_number_p@plt>
    c344:	cbz	w0, c37c <mpc_norm@@Base+0x7c>
    c348:	ldr	x10, [x24, #16]
    c34c:	ldr	x8, [x24, #48]
    c350:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    c354:	cmp	x10, x9
    c358:	b.ne	c3a8 <mpc_norm@@Base+0xa8>  // b.any
    c35c:	cmp	x8, x9
    c360:	b.ne	c3bc <mpc_norm@@Base+0xbc>  // b.any
    c364:	mov	w8, #0x1                   	// #1
    c368:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    c36c:	mov	w19, wzr
    c370:	str	w8, [x20, #8]
    c374:	str	x9, [x20, #16]
    c378:	b	c674 <mpc_norm@@Base+0x374>
    c37c:	mov	x0, x20
    c380:	mov	x1, x24
    c384:	mov	w2, w19
    c388:	ldp	x20, x19, [sp, #192]
    c38c:	ldp	x22, x21, [sp, #176]
    c390:	ldp	x24, x23, [sp, #160]
    c394:	ldp	x26, x25, [sp, #144]
    c398:	ldp	x28, x27, [sp, #128]
    c39c:	ldp	x29, x30, [sp, #112]
    c3a0:	add	sp, sp, #0xd0
    c3a4:	b	51a0 <mpc_abs@plt>
    c3a8:	cmp	x8, x9
    c3ac:	b.ne	c3e8 <mpc_norm@@Base+0xe8>  // b.any
    c3b0:	mov	x0, x20
    c3b4:	mov	x1, x24
    c3b8:	b	c3c4 <mpc_norm@@Base+0xc4>
    c3bc:	mov	x0, x20
    c3c0:	mov	x1, x23
    c3c4:	mov	w2, w19
    c3c8:	ldp	x20, x19, [sp, #192]
    c3cc:	ldp	x22, x21, [sp, #176]
    c3d0:	ldp	x24, x23, [sp, #160]
    c3d4:	ldp	x26, x25, [sp, #144]
    c3d8:	ldp	x28, x27, [sp, #128]
    c3dc:	ldp	x29, x30, [sp, #112]
    c3e0:	add	sp, sp, #0xd0
    c3e4:	b	5010 <mpfr_sqr@plt>
    c3e8:	ldr	x25, [x20]
    c3ec:	sub	x0, x29, #0x20
    c3f0:	bl	4aa0 <mpfr_init@plt>
    c3f4:	add	x0, sp, #0x30
    c3f8:	bl	4aa0 <mpfr_init@plt>
    c3fc:	add	x0, sp, #0x10
    c400:	bl	4aa0 <mpfr_init@plt>
    c404:	bl	52f0 <mpfr_underflow_p@plt>
    c408:	str	w0, [sp, #8]
    c40c:	bl	54e0 <mpfr_overflow_p@plt>
    c410:	str	w0, [sp, #12]
    c414:	bl	4e20 <mpfr_clear_underflow@plt>
    c418:	bl	4a50 <mpfr_clear_overflow@plt>
    c41c:	cmp	w19, #0x0
    c420:	cset	w21, eq  // eq = none
    c424:	mov	w22, #0x1                   	// #1
    c428:	mov	x0, x25
    c42c:	bl	4d20 <mpc_ceil_log2@plt>
    c430:	ldr	x8, [x24]
    c434:	add	x9, x25, x0
    c438:	add	x25, x9, #0x3
    c43c:	lsl	x27, x8, #1
    c440:	tbz	w22, #0, c460 <mpc_norm@@Base+0x160>
    c444:	ldr	x8, [x23]
    c448:	cmp	x25, x27
    c44c:	csel	x27, x25, x27, lt  // lt = tstop
    c450:	lsl	x9, x8, #1
    c454:	cmp	x25, x8, lsl #1
    c458:	csel	x26, x25, x9, lt  // lt = tstop
    c45c:	b	c468 <mpc_norm@@Base+0x168>
    c460:	ldr	x8, [x23]
    c464:	lsl	x26, x8, #1
    c468:	sub	x0, x29, #0x20
    c46c:	mov	x1, x27
    c470:	bl	4c80 <mpfr_set_prec@plt>
    c474:	add	x0, sp, #0x30
    c478:	mov	x1, x26
    c47c:	bl	4c80 <mpfr_set_prec@plt>
    c480:	sub	x0, x29, #0x20
    c484:	mov	w2, #0x3                   	// #3
    c488:	mov	x1, x24
    c48c:	bl	5010 <mpfr_sqr@plt>
    c490:	mov	w28, w0
    c494:	add	x0, sp, #0x30
    c498:	mov	w2, #0x3                   	// #3
    c49c:	mov	x1, x23
    c4a0:	bl	5010 <mpfr_sqr@plt>
    c4a4:	orr	w8, w0, w28
    c4a8:	cbz	w8, c630 <mpc_norm@@Base+0x330>
    c4ac:	add	x0, sp, #0x10
    c4b0:	mov	x1, x25
    c4b4:	bl	4c80 <mpfr_set_prec@plt>
    c4b8:	add	x0, sp, #0x10
    c4bc:	sub	x1, x29, #0x20
    c4c0:	add	x2, sp, #0x30
    c4c4:	mov	w3, #0x3                   	// #3
    c4c8:	bl	4e60 <mpfr_add@plt>
    c4cc:	tbz	w22, #0, c4f4 <mpc_norm@@Base+0x1f4>
    c4d0:	ldr	x8, [x20]
    c4d4:	sub	x1, x25, #0x2
    c4d8:	add	x0, sp, #0x10
    c4dc:	mov	w2, #0x3                   	// #3
    c4e0:	add	x4, x8, x21
    c4e4:	mov	w3, #0x2                   	// #2
    c4e8:	bl	5450 <mpfr_can_round@plt>
    c4ec:	mov	w22, wzr
    c4f0:	cbz	w0, c428 <mpc_norm@@Base+0x128>
    c4f4:	bl	54e0 <mpfr_overflow_p@plt>
    c4f8:	cbz	w0, c52c <mpc_norm@@Base+0x22c>
    c4fc:	mov	w1, #0x1                   	// #1
    c500:	mov	x0, x20
    c504:	mov	x2, xzr
    c508:	mov	w3, wzr
    c50c:	bl	5130 <mpfr_set_ui_2exp@plt>
    c510:	bl	5200 <mpfr_get_emax@plt>
    c514:	mov	x2, x0
    c518:	mov	x0, x20
    c51c:	mov	x1, x20
    c520:	mov	w3, w19
    c524:	bl	4f40 <mpfr_mul_2ui@plt>
    c528:	b	c644 <mpc_norm@@Base+0x344>
    c52c:	bl	52f0 <mpfr_underflow_p@plt>
    c530:	cbz	w0, c584 <mpc_norm@@Base+0x284>
    c534:	bl	5060 <mpfr_get_emin@plt>
    c538:	ldur	x8, [x29, #-16]
    c53c:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    c540:	mov	x25, x0
    c544:	cmp	x8, x9
    c548:	b.ne	c5fc <mpc_norm@@Base+0x2fc>  // b.any
    c54c:	ldr	x10, [sp, #64]
    c550:	cmp	x10, x9
    c554:	b.eq	c59c <mpc_norm@@Base+0x29c>  // b.none
    c558:	cmn	x10, #0x9
    c55c:	b.lt	c59c <mpc_norm@@Base+0x29c>  // b.tstop
    c560:	sub	x9, x10, x26, lsl #1
    c564:	cmp	x9, x25
    c568:	b.le	c59c <mpc_norm@@Base+0x29c>
    c56c:	sub	x0, x29, #0x20
    c570:	mov	w1, #0x1                   	// #1
    c574:	bl	4c80 <mpfr_set_prec@plt>
    c578:	sub	x2, x25, #0x1
    c57c:	sub	x0, x29, #0x20
    c580:	b	c624 <mpc_norm@@Base+0x324>
    c584:	ldr	w3, [sp, #24]
    c588:	add	x1, sp, #0x10
    c58c:	mov	x0, x20
    c590:	mov	w2, w19
    c594:	bl	51d0 <mpfr_set4@plt>
    c598:	b	c644 <mpc_norm@@Base+0x344>
    c59c:	ldr	x9, [x24, #16]
    c5a0:	ldr	x10, [x24, #48]
    c5a4:	mov	x11, #0x8000000000000001    	// #-9223372036854775807
    c5a8:	cmp	x8, x11
    c5ac:	neg	x9, x9
    c5b0:	neg	x10, x10
    c5b4:	lsr	x12, x10, #1
    c5b8:	and	x13, x9, #0x1
    c5bc:	and	x10, x10, #0x1
    c5c0:	add	x9, x12, x9, lsr #1
    c5c4:	add	x10, x10, x13
    c5c8:	add	x26, x9, x10, lsr #1
    c5cc:	lsl	x25, x26, #1
    c5d0:	sub	x0, x29, #0x20
    c5d4:	b.ne	c698 <mpc_norm@@Base+0x398>  // b.any
    c5d8:	mov	x1, x24
    c5dc:	mov	x2, x26
    c5e0:	mov	w3, wzr
    c5e4:	bl	4f40 <mpfr_mul_2ui@plt>
    c5e8:	sub	x0, x29, #0x20
    c5ec:	sub	x1, x29, #0x20
    c5f0:	mov	w2, wzr
    c5f4:	bl	5010 <mpfr_sqr@plt>
    c5f8:	b	c6a8 <mpc_norm@@Base+0x3a8>
    c5fc:	cmn	x8, #0x9
    c600:	b.lt	c54c <mpc_norm@@Base+0x24c>  // b.tstop
    c604:	sub	x10, x8, x27, lsl #1
    c608:	cmp	x10, x25
    c60c:	b.le	c54c <mpc_norm@@Base+0x24c>
    c610:	add	x0, sp, #0x30
    c614:	mov	w1, #0x1                   	// #1
    c618:	bl	4c80 <mpfr_set_prec@plt>
    c61c:	sub	x2, x25, #0x1
    c620:	add	x0, sp, #0x30
    c624:	mov	w1, #0x1                   	// #1
    c628:	mov	w3, #0x1                   	// #1
    c62c:	bl	5130 <mpfr_set_ui_2exp@plt>
    c630:	sub	x1, x29, #0x20
    c634:	add	x2, sp, #0x30
    c638:	mov	x0, x20
    c63c:	mov	w3, w19
    c640:	bl	4e60 <mpfr_add@plt>
    c644:	mov	w19, w0
    c648:	ldp	w8, w20, [sp, #8]
    c64c:	cbz	w8, c654 <mpc_norm@@Base+0x354>
    c650:	bl	4990 <mpfr_set_underflow@plt>
    c654:	cbz	w20, c65c <mpc_norm@@Base+0x35c>
    c658:	bl	5490 <mpfr_set_overflow@plt>
    c65c:	sub	x0, x29, #0x20
    c660:	bl	4d60 <mpfr_clear@plt>
    c664:	add	x0, sp, #0x30
    c668:	bl	4d60 <mpfr_clear@plt>
    c66c:	add	x0, sp, #0x10
    c670:	bl	4d60 <mpfr_clear@plt>
    c674:	mov	w0, w19
    c678:	ldp	x20, x19, [sp, #192]
    c67c:	ldp	x22, x21, [sp, #176]
    c680:	ldp	x24, x23, [sp, #160]
    c684:	ldp	x26, x25, [sp, #144]
    c688:	ldp	x28, x27, [sp, #128]
    c68c:	ldp	x29, x30, [sp, #112]
    c690:	add	sp, sp, #0xd0
    c694:	ret
    c698:	sub	x1, x29, #0x20
    c69c:	mov	x2, x25
    c6a0:	mov	w3, wzr
    c6a4:	bl	4f40 <mpfr_mul_2ui@plt>
    c6a8:	ldr	x8, [sp, #64]
    c6ac:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    c6b0:	add	x0, sp, #0x30
    c6b4:	cmp	x8, x9
    c6b8:	b.ne	c6e0 <mpc_norm@@Base+0x3e0>  // b.any
    c6bc:	mov	x1, x23
    c6c0:	mov	x2, x26
    c6c4:	mov	w3, wzr
    c6c8:	bl	4f40 <mpfr_mul_2ui@plt>
    c6cc:	add	x0, sp, #0x30
    c6d0:	add	x1, sp, #0x30
    c6d4:	mov	w2, wzr
    c6d8:	bl	5010 <mpfr_sqr@plt>
    c6dc:	b	c6f0 <mpc_norm@@Base+0x3f0>
    c6e0:	add	x1, sp, #0x30
    c6e4:	mov	x2, x25
    c6e8:	mov	w3, wzr
    c6ec:	bl	4f40 <mpfr_mul_2ui@plt>
    c6f0:	sub	x1, x29, #0x20
    c6f4:	add	x2, sp, #0x30
    c6f8:	mov	x0, x20
    c6fc:	mov	w3, w19
    c700:	bl	4e60 <mpfr_add@plt>
    c704:	mov	w23, w0
    c708:	bl	4e20 <mpfr_clear_underflow@plt>
    c70c:	mov	x0, x20
    c710:	mov	x1, x20
    c714:	mov	x2, x25
    c718:	mov	w3, w19
    c71c:	bl	5320 <mpfr_div_2ui@plt>
    c720:	mov	w19, w0
    c724:	bl	52f0 <mpfr_underflow_p@plt>
    c728:	cmp	w0, #0x0
    c72c:	csel	w19, w23, w19, eq  // eq = none
    c730:	b	c648 <mpc_norm@@Base+0x348>

000000000000c734 <mpc_out_str@@Base>:
    c734:	stp	x29, x30, [sp, #-64]!
    c738:	stp	x24, x23, [sp, #16]
    c73c:	stp	x22, x21, [sp, #32]
    c740:	stp	x20, x19, [sp, #48]
    c744:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    c748:	ldr	x8, [x8, #4024]
    c74c:	cmp	x0, #0x0
    c750:	mov	w22, w1
    c754:	mov	x29, sp
    c758:	ldr	x8, [x8]
    c75c:	mov	w19, w4
    c760:	mov	x20, x3
    c764:	mov	x21, x2
    c768:	csel	x23, x8, x0, eq  // eq = none
    c76c:	mov	w0, #0x28                  	// #40
    c770:	mov	x1, x23
    c774:	bl	4ba0 <fputc@plt>
    c778:	and	w19, w19, #0xf
    c77c:	mov	x0, x23
    c780:	mov	w1, w22
    c784:	mov	x2, x21
    c788:	mov	x3, x20
    c78c:	mov	w4, w19
    c790:	bl	5190 <__gmpfr_out_str@plt>
    c794:	mov	x24, x0
    c798:	mov	w0, #0x20                  	// #32
    c79c:	mov	x1, x23
    c7a0:	bl	4ba0 <fputc@plt>
    c7a4:	add	x3, x20, #0x20
    c7a8:	mov	x0, x23
    c7ac:	mov	w1, w22
    c7b0:	mov	x2, x21
    c7b4:	mov	w4, w19
    c7b8:	bl	5190 <__gmpfr_out_str@plt>
    c7bc:	add	x8, x24, x0
    c7c0:	mov	w0, #0x29                  	// #41
    c7c4:	mov	x1, x23
    c7c8:	add	x19, x8, #0x3
    c7cc:	bl	4ba0 <fputc@plt>
    c7d0:	mov	x0, x19
    c7d4:	ldp	x20, x19, [sp, #48]
    c7d8:	ldp	x22, x21, [sp, #32]
    c7dc:	ldp	x24, x23, [sp, #16]
    c7e0:	ldp	x29, x30, [sp], #64
    c7e4:	ret

000000000000c7e8 <mpc_pow@@Base>:
    c7e8:	stp	x29, x30, [sp, #-96]!
    c7ec:	stp	x28, x27, [sp, #16]
    c7f0:	stp	x26, x25, [sp, #32]
    c7f4:	stp	x24, x23, [sp, #48]
    c7f8:	stp	x22, x21, [sp, #64]
    c7fc:	stp	x20, x19, [sp, #80]
    c800:	mov	x29, sp
    c804:	sub	sp, sp, #0x1c0
    c808:	mov	w25, w3
    c80c:	mov	x22, x2
    c810:	mov	x24, x1
    c814:	mov	x27, x0
    c818:	bl	52f0 <mpfr_underflow_p@plt>
    c81c:	mov	w19, w0
    c820:	bl	54e0 <mpfr_overflow_p@plt>
    c824:	ldr	x26, [x22, #48]
    c828:	ldr	x23, [x24, #48]
    c82c:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    c830:	mov	w20, w0
    c834:	cmp	x26, x8
    c838:	b.ne	c87c <mpc_pow@@Base+0x94>  // b.any
    c83c:	ldr	x9, [x22, #16]
    c840:	cmp	x9, x8
    c844:	b.ne	c87c <mpc_pow@@Base+0x94>  // b.any
    c848:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    c84c:	cmp	x23, x8
    c850:	b.ne	c918 <mpc_pow@@Base+0x130>  // b.any
    c854:	ldr	x9, [x24, #16]
    c858:	cmp	x9, x8
    c85c:	b.ne	c918 <mpc_pow@@Base+0x130>  // b.any
    c860:	mov	w1, #0x1                   	// #1
    c864:	mov	x0, x27
    c868:	mov	x2, xzr
    c86c:	mov	w3, wzr
    c870:	bl	5040 <mpc_set_ui_ui@plt>
    c874:	mov	w28, wzr
    c878:	b	ca38 <mpc_pow@@Base+0x250>
    c87c:	mov	x0, x24
    c880:	bl	54d0 <mpfr_number_p@plt>
    c884:	cbz	w0, c8c8 <mpc_pow@@Base+0xe0>
    c888:	add	x21, x24, #0x20
    c88c:	mov	x0, x21
    c890:	bl	54d0 <mpfr_number_p@plt>
    c894:	cbz	w0, c8c8 <mpc_pow@@Base+0xe0>
    c898:	mov	x0, x22
    c89c:	bl	54d0 <mpfr_number_p@plt>
    c8a0:	cbz	w0, c8c8 <mpc_pow@@Base+0xe0>
    c8a4:	add	x0, x22, #0x20
    c8a8:	bl	54d0 <mpfr_number_p@plt>
    c8ac:	cbz	w0, c8c8 <mpc_pow@@Base+0xe0>
    c8b0:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    c8b4:	cmp	x23, x8
    c8b8:	b.ne	c974 <mpc_pow@@Base+0x18c>  // b.any
    c8bc:	ldr	x9, [x24, #16]
    c8c0:	cmp	x9, x8
    c8c4:	b.ne	ca5c <mpc_pow@@Base+0x274>  // b.any
    c8c8:	add	x0, sp, #0xb8
    c8cc:	mov	w1, #0x2                   	// #2
    c8d0:	bl	4cf0 <mpc_init2@plt>
    c8d4:	add	x0, sp, #0xb8
    c8d8:	mov	x1, x24
    c8dc:	mov	w2, wzr
    c8e0:	bl	4db0 <mpc_log@plt>
    c8e4:	add	x0, sp, #0xb8
    c8e8:	add	x1, sp, #0xb8
    c8ec:	mov	x2, x22
    c8f0:	mov	w3, wzr
    c8f4:	bl	4ed0 <mpc_mul@plt>
    c8f8:	add	x1, sp, #0xb8
    c8fc:	mov	x0, x27
    c900:	mov	w2, w25
    c904:	bl	52a0 <mpc_exp@plt>
    c908:	mov	w28, w0
    c90c:	add	x0, sp, #0xb8
    c910:	bl	4a10 <mpc_clear@plt>
    c914:	b	ca38 <mpc_pow@@Base+0x250>
    c918:	sub	x0, x29, #0xc8
    c91c:	bl	4aa0 <mpfr_init@plt>
    c920:	sub	x0, x29, #0xc8
    c924:	mov	x1, x24
    c928:	mov	w2, wzr
    c92c:	bl	4ea0 <mpc_norm@plt>
    c930:	mov	w20, w0
    c934:	sub	x0, x29, #0xc8
    c938:	mov	w1, #0x1                   	// #1
    c93c:	mov	x2, xzr
    c940:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    c944:	cmp	w0, #0x0
    c948:	ccmp	w20, #0x0, #0x4, eq  // eq = none
    c94c:	csneg	w8, w0, w20, eq  // eq = none
    c950:	tbnz	w8, #31, c964 <mpc_pow@@Base+0x17c>
    c954:	cbz	w8, c9e4 <mpc_pow@@Base+0x1fc>
    c958:	ldr	w8, [x22, #40]
    c95c:	lsr	w19, w8, #31
    c960:	b	c9f8 <mpc_pow@@Base+0x210>
    c964:	ldr	w8, [x22, #40]
    c968:	tbnz	w8, #31, c9f4 <mpc_pow@@Base+0x20c>
    c96c:	mov	w19, #0x1                   	// #1
    c970:	b	c9f8 <mpc_pow@@Base+0x210>
    c974:	mov	w2, #0x1                   	// #1
    c978:	mov	x0, x24
    c97c:	mov	x1, xzr
    c980:	bl	5310 <mpc_cmp_si_si@plt>
    c984:	cbz	w0, c9b4 <mpc_pow@@Base+0x1cc>
    c988:	mov	x2, #0xffffffffffffffff    	// #-1
    c98c:	mov	x0, x24
    c990:	mov	x1, xzr
    c994:	bl	5310 <mpc_cmp_si_si@plt>
    c998:	cbz	w0, c9b4 <mpc_pow@@Base+0x1cc>
    c99c:	mov	x0, x24
    c9a0:	bl	51f0 <mpfr_sgn@plt>
    c9a4:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    c9a8:	cmp	x26, x8
    c9ac:	b.ne	caf4 <mpc_pow@@Base+0x30c>  // b.any
    c9b0:	cbnz	w0, caf4 <mpc_pow@@Base+0x30c>
    c9b4:	mov	x0, x22
    c9b8:	bl	4e30 <mpfr_integer_p@plt>
    c9bc:	cbz	w0, caf4 <mpc_pow@@Base+0x30c>
    c9c0:	mov	x0, x22
    c9c4:	mov	x1, xzr
    c9c8:	bl	d970 <mpc_pow@@Base+0x1188>
    c9cc:	cmp	w0, #0x0
    c9d0:	cset	w8, ne  // ne = any
    c9d4:	str	w8, [sp, #140]
    c9d8:	cset	w8, eq  // eq = none
    c9dc:	str	w8, [sp, #136]
    c9e0:	b	cbc4 <mpc_pow@@Base+0x3dc>
    c9e4:	ldr	w8, [x24, #40]
    c9e8:	ldr	w9, [x22, #8]
    c9ec:	eor	w8, w9, w8
    c9f0:	tbnz	w8, #31, c96c <mpc_pow@@Base+0x184>
    c9f4:	mov	w19, wzr
    c9f8:	mov	w1, #0x1                   	// #1
    c9fc:	mov	x0, x27
    ca00:	mov	x2, xzr
    ca04:	mov	w3, w25
    ca08:	bl	5040 <mpc_set_ui_ui@plt>
    ca0c:	and	w8, w25, #0xfffffff0
    ca10:	cmp	w8, #0x30
    ca14:	mov	w28, w0
    ca18:	b.eq	ca20 <mpc_pow@@Base+0x238>  // b.none
    ca1c:	cbz	w19, ca30 <mpc_pow@@Base+0x248>
    ca20:	mov	x0, x27
    ca24:	mov	x1, x27
    ca28:	mov	w2, wzr
    ca2c:	bl	4f60 <mpc_conj@plt>
    ca30:	sub	x0, x29, #0xc8
    ca34:	bl	4d60 <mpfr_clear@plt>
    ca38:	mov	w0, w28
    ca3c:	add	sp, sp, #0x1c0
    ca40:	ldp	x20, x19, [sp, #80]
    ca44:	ldp	x22, x21, [sp, #64]
    ca48:	ldp	x24, x23, [sp, #48]
    ca4c:	ldp	x26, x25, [sp, #32]
    ca50:	ldp	x28, x27, [sp, #16]
    ca54:	ldp	x29, x30, [sp], #96
    ca58:	ret
    ca5c:	mov	w1, #0x1                   	// #1
    ca60:	mov	x0, x24
    ca64:	mov	x2, xzr
    ca68:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    ca6c:	cbz	w0, cb40 <mpc_pow@@Base+0x358>
    ca70:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    ca74:	cmp	x26, x8
    ca78:	b.ne	cb84 <mpc_pow@@Base+0x39c>  // b.any
    ca7c:	mov	x0, x22
    ca80:	bl	4e30 <mpfr_integer_p@plt>
    ca84:	cbnz	w0, ca94 <mpc_pow@@Base+0x2ac>
    ca88:	mov	x0, x24
    ca8c:	bl	51f0 <mpfr_sgn@plt>
    ca90:	tbnz	w0, #31, cb84 <mpc_pow@@Base+0x39c>
    ca94:	ldr	w19, [x22, #8]
    ca98:	ldr	w20, [x24, #40]
    ca9c:	and	w3, w25, #0xf
    caa0:	mov	x0, x27
    caa4:	mov	x1, x24
    caa8:	mov	x2, x22
    caac:	bl	4b90 <mpfr_pow@plt>
    cab0:	cmp	w0, #0x0
    cab4:	mov	w8, #0x2                   	// #2
    cab8:	asr	w2, w25, #4
    cabc:	cset	w11, ne  // ne = any
    cac0:	mov	w9, #0x1                   	// #1
    cac4:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    cac8:	csel	w28, w8, w11, lt  // lt = tstop
    cacc:	cmp	w2, #0x3
    cad0:	str	w9, [x27, #40]
    cad4:	str	x10, [x27, #48]
    cad8:	b.eq	cae4 <mpc_pow@@Base+0x2fc>  // b.none
    cadc:	eor	w8, w20, w19
    cae0:	tbz	w8, #31, ca38 <mpc_pow@@Base+0x250>
    cae4:	add	x0, x27, #0x20
    cae8:	mov	x1, x0
    caec:	bl	4b80 <mpfr_neg@plt>
    caf0:	b	ca38 <mpc_pow@@Base+0x250>
    caf4:	mov	x0, x24
    caf8:	mov	x1, x21
    cafc:	bl	53b0 <mpfr_cmpabs@plt>
    cb00:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    cb04:	cmp	x26, x8
    cb08:	mov	w8, wzr
    cb0c:	str	wzr, [sp, #140]
    cb10:	b.ne	c9dc <mpc_pow@@Base+0x1f4>  // b.any
    cb14:	str	w8, [sp, #136]
    cb18:	cbnz	w0, cbc4 <mpc_pow@@Base+0x3dc>
    cb1c:	mov	x0, x22
    cb20:	bl	4e30 <mpfr_integer_p@plt>
    cb24:	cbz	w0, cb38 <mpc_pow@@Base+0x350>
    cb28:	mov	x0, x22
    cb2c:	mov	x1, xzr
    cb30:	bl	d970 <mpc_pow@@Base+0x1188>
    cb34:	cbz	w0, d780 <mpc_pow@@Base+0xf98>
    cb38:	str	xzr, [sp, #136]
    cb3c:	b	cbc4 <mpc_pow@@Base+0x3dc>
    cb40:	ldr	w19, [x22, #8]
    cb44:	ldr	w20, [x24, #40]
    cb48:	mov	w1, #0x1                   	// #1
    cb4c:	mov	x0, x27
    cb50:	mov	w2, w25
    cb54:	bl	4ce0 <mpc_set_ui@plt>
    cb58:	and	w8, w25, #0xfffffff0
    cb5c:	cmp	w8, #0x30
    cb60:	mov	w28, w0
    cb64:	b.eq	cb70 <mpc_pow@@Base+0x388>  // b.none
    cb68:	eor	w8, w20, w19
    cb6c:	tbz	w8, #31, ca38 <mpc_pow@@Base+0x250>
    cb70:	mov	x0, x27
    cb74:	mov	x1, x27
    cb78:	mov	w2, wzr
    cb7c:	bl	4f60 <mpc_conj@plt>
    cb80:	b	ca38 <mpc_pow@@Base+0x250>
    cb84:	mov	x1, #0xffffffffffffffff    	// #-1
    cb88:	mov	x0, x24
    cb8c:	mov	x2, xzr
    cb90:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    cb94:	cbz	w0, cba0 <mpc_pow@@Base+0x3b8>
    cb98:	str	wzr, [sp, #136]
    cb9c:	b	cbb4 <mpc_pow@@Base+0x3cc>
    cba0:	mov	x0, x22
    cba4:	bl	4e30 <mpfr_integer_p@plt>
    cba8:	cmp	w0, #0x0
    cbac:	cset	w8, ne  // ne = any
    cbb0:	str	w8, [sp, #136]
    cbb4:	mov	x0, x24
    cbb8:	bl	51f0 <mpfr_sgn@plt>
    cbbc:	tbnz	w0, #31, d744 <mpc_pow@@Base+0xf5c>
    cbc0:	str	wzr, [sp, #140]
    cbc4:	str	x21, [sp, #64]
    cbc8:	str	x23, [sp, #16]
    cbcc:	stp	w20, w19, [sp, #52]
    cbd0:	mov	x21, x27
    cbd4:	ldr	x19, [x27]
    cbd8:	ldr	x20, [x21, #32]!
    cbdc:	mov	w9, #0x34                  	// #52
    cbe0:	mov	x23, x27
    cbe4:	add	x0, sp, #0xb8
    cbe8:	cmp	x19, x20
    cbec:	csel	x8, x19, x20, gt
    cbf0:	cmp	x8, #0x34
    cbf4:	csel	x8, x8, x9, gt
    cbf8:	add	x27, x8, #0xc
    cbfc:	mov	x1, x27
    cc00:	add	x28, sp, #0xb8
    cc04:	bl	4cf0 <mpc_init2@plt>
    cc08:	sub	x0, x29, #0xc8
    cc0c:	mov	x1, x27
    cc10:	bl	4cf0 <mpc_init2@plt>
    cc14:	ldr	x11, [x24, #16]
    cc18:	and	w8, w25, #0xf
    cc1c:	str	w8, [sp, #36]
    cc20:	ldr	x8, [x23]
    cc24:	ldr	x9, [x21]
    cc28:	tst	w25, #0xf
    cc2c:	asr	w10, w25, #4
    cc30:	str	x11, [sp, #24]
    cc34:	add	x11, x28, #0x20
    cc38:	str	x11, [sp, #128]
    cc3c:	cinc	x11, x19, eq  // eq = none
    cc40:	cmp	w10, #0x0
    cc44:	str	w10, [sp, #48]
    cc48:	cinc	x10, x20, eq  // eq = none
    cc4c:	cmp	x8, x9
    cc50:	stp	x23, x11, [sp, #80]
    cc54:	csel	x8, x8, x9, gt
    cc58:	cmp	x23, x22
    cc5c:	ldr	w23, [sp, #140]
    cc60:	str	x8, [sp, #176]
    cc64:	cset	w8, eq  // eq = none
    cc68:	cmp	x21, x22
    cc6c:	cset	w9, eq  // eq = none
    cc70:	mov	w28, #0xfffffffe            	// #-2
    cc74:	orr	w19, w8, w9
    cc78:	str	w25, [sp, #12]
    cc7c:	str	x10, [sp, #104]
    cc80:	str	x21, [sp, #40]
    cc84:	str	x26, [sp, #72]
    cc88:	str	w19, [sp, #60]
    cc8c:	sub	x0, x29, #0xc8
    cc90:	mov	x1, x24
    cc94:	mov	w2, wzr
    cc98:	bl	4db0 <mpc_log@plt>
    cc9c:	sub	x0, x29, #0xc8
    cca0:	sub	x1, x29, #0xc8
    cca4:	mov	x2, x22
    cca8:	mov	w3, wzr
    ccac:	bl	4ed0 <mpc_mul@plt>
    ccb0:	ldur	x8, [x29, #-184]
    ccb4:	ldur	x9, [x29, #-152]
    ccb8:	bic	x8, x8, x8, asr #63
    ccbc:	cmp	x9, x8
    ccc0:	csel	x25, x9, x8, gt
    ccc4:	subs	x21, x27, x25
    ccc8:	b.le	ce18 <mpc_pow@@Base+0x630>
    cccc:	bl	4a50 <mpfr_clear_overflow@plt>
    ccd0:	bl	4e20 <mpfr_clear_underflow@plt>
    ccd4:	add	x0, sp, #0xb8
    ccd8:	sub	x1, x29, #0xc8
    ccdc:	mov	w2, wzr
    cce0:	bl	52a0 <mpc_exp@plt>
    cce4:	mov	w20, w0
    cce8:	bl	52f0 <mpfr_underflow_p@plt>
    ccec:	cbnz	w0, d5bc <mpc_pow@@Base+0xdd4>
    ccf0:	bl	54e0 <mpfr_overflow_p@plt>
    ccf4:	cbnz	w0, d5bc <mpc_pow@@Base+0xdd4>
    ccf8:	ldr	x8, [sp, #200]
    ccfc:	ldr	x9, [sp, #232]
    cd00:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    cd04:	cmp	x8, x10
    cd08:	csel	x8, x9, x8, eq  // eq = none
    cd0c:	cmp	x9, x10
    cd10:	csel	x9, x8, x9, eq  // eq = none
    cd14:	sub	x10, x9, x8
    cd18:	stp	x9, x8, [sp, #160]
    cd1c:	subs	x8, x8, x9
    cd20:	stp	x8, x10, [sp, #144]
    cd24:	csel	x20, x8, xzr, gt
    cd28:	csel	x8, xzr, x10, gt
    cd2c:	tbnz	w23, #0, cd60 <mpc_pow@@Base+0x578>
    cd30:	add	x9, x25, x8
    cd34:	add	x9, x9, #0x3
    cd38:	cmp	x27, x9
    cd3c:	b.le	cd9c <mpc_pow@@Base+0x5b4>
    cd40:	ldr	x4, [sp, #88]
    cd44:	sub	x8, x21, x8
    cd48:	sub	x1, x8, #0x3
    cd4c:	add	x0, sp, #0xb8
    cd50:	mov	w3, #0x1                   	// #1
    cd54:	mov	w2, wzr
    cd58:	bl	5450 <mpfr_can_round@plt>
    cd5c:	cbz	w0, cd9c <mpc_pow@@Base+0x5b4>
    cd60:	ldr	w8, [sp, #136]
    cd64:	cbnz	w8, d660 <mpc_pow@@Base+0xe78>
    cd68:	add	x8, x25, x20
    cd6c:	add	x8, x8, #0x3
    cd70:	cmp	x27, x8
    cd74:	b.le	cd98 <mpc_pow@@Base+0x5b0>
    cd78:	ldr	x0, [sp, #128]
    cd7c:	ldr	x4, [sp, #104]
    cd80:	sub	x8, x21, x20
    cd84:	sub	x1, x8, #0x3
    cd88:	mov	w3, #0x1                   	// #1
    cd8c:	mov	w2, wzr
    cd90:	bl	5450 <mpfr_can_round@plt>
    cd94:	cbnz	w0, d6c4 <mpc_pow@@Base+0xedc>
    cd98:	tbnz	w23, #0, cdb0 <mpc_pow@@Base+0x5c8>
    cd9c:	add	x0, sp, #0xb8
    cda0:	bl	54d0 <mpfr_number_p@plt>
    cda4:	cbz	w0, d8e8 <mpc_pow@@Base+0x1100>
    cda8:	ldr	w8, [sp, #136]
    cdac:	cbnz	w8, cdbc <mpc_pow@@Base+0x5d4>
    cdb0:	ldr	x0, [sp, #128]
    cdb4:	bl	54d0 <mpfr_number_p@plt>
    cdb8:	cbz	w0, d914 <mpc_pow@@Base+0x112c>
    cdbc:	cmn	w28, #0x2
    cdc0:	b.ne	ce20 <mpc_pow@@Base+0x638>  // b.any
    cdc4:	mov	x21, #0x8000000000000001    	// #-9223372036854775807
    cdc8:	cmp	x26, x21
    cdcc:	b.ne	ce30 <mpc_pow@@Base+0x648>  // b.any
    cdd0:	ldr	w8, [x24, #8]
    cdd4:	str	w8, [sp, #100]
    cdd8:	ldr	w8, [x24, #40]
    cddc:	str	w8, [sp, #96]
    cde0:	ldr	x8, [x24, #16]
    cde4:	str	x8, [sp, #120]
    cde8:	cbz	w19, ce38 <mpc_pow@@Base+0x650>
    cdec:	ldr	x1, [x22]
    cdf0:	sub	x0, x29, #0x88
    cdf4:	bl	5440 <mpfr_init2@plt>
    cdf8:	ldr	w3, [x22, #8]
    cdfc:	sub	x0, x29, #0x88
    ce00:	mov	x1, x22
    ce04:	mov	w2, wzr
    ce08:	bl	51d0 <mpfr_set4@plt>
    ce0c:	mov	w8, #0x1                   	// #1
    ce10:	str	w8, [sp, #116]
    ce14:	b	ce3c <mpc_pow@@Base+0x654>
    ce18:	add	x27, x27, #0x40
    ce1c:	b	d5a0 <mpc_pow@@Base+0xdb8>
    ce20:	cmp	x27, #0x0
    ce24:	cinc	x8, x27, lt  // lt = tstop
    ce28:	add	x27, x27, x8, asr #1
    ce2c:	b	d5a0 <mpc_pow@@Base+0xdb8>
    ce30:	mov	w28, #0xfffffffe            	// #-2
    ce34:	b	d588 <mpc_pow@@Base+0xda0>
    ce38:	str	wzr, [sp, #116]
    ce3c:	sub	x0, x29, #0x18
    ce40:	bl	54a0 <__gmpz_init@plt>
    ce44:	sub	x0, x29, #0x28
    ce48:	bl	54a0 <__gmpz_init@plt>
    ce4c:	sub	x0, x29, #0x38
    ce50:	bl	54a0 <__gmpz_init@plt>
    ce54:	sub	x0, x29, #0x48
    ce58:	bl	54a0 <__gmpz_init@plt>
    ce5c:	sub	x0, x29, #0x58
    ce60:	bl	54a0 <__gmpz_init@plt>
    ce64:	sub	x0, x29, #0x68
    ce68:	bl	54a0 <__gmpz_init@plt>
    ce6c:	sub	x0, x29, #0x18
    ce70:	mov	x1, x22
    ce74:	bl	5470 <mpfr_get_z_2exp@plt>
    ce78:	mov	x28, x0
    ce7c:	sub	x0, x29, #0x18
    ce80:	mov	x1, xzr
    ce84:	bl	49f0 <__gmpz_scan1@plt>
    ce88:	mov	x20, x0
    ce8c:	sub	x0, x29, #0x18
    ce90:	sub	x1, x29, #0x18
    ce94:	mov	x2, x20
    ce98:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    ce9c:	ldr	x8, [sp, #120]
    cea0:	sub	x0, x29, #0x48
    cea4:	cmp	x8, x21
    cea8:	b.ne	cebc <mpc_pow@@Base+0x6d4>  // b.any
    ceac:	mov	x1, xzr
    ceb0:	bl	4b10 <__gmpz_set_ui@plt>
    ceb4:	mov	x21, xzr
    ceb8:	b	cec8 <mpc_pow@@Base+0x6e0>
    cebc:	mov	x1, x24
    cec0:	bl	5470 <mpfr_get_z_2exp@plt>
    cec4:	mov	x21, x0
    cec8:	ldr	x8, [x24, #48]
    cecc:	mov	x25, #0x8000000000000001    	// #-9223372036854775807
    ced0:	sub	x0, x29, #0x58
    ced4:	cmp	x8, x25
    ced8:	ldr	x8, [sp, #176]
    cedc:	lsl	x8, x8, #1
    cee0:	str	x8, [sp, #176]
    cee4:	b.ne	cef4 <mpc_pow@@Base+0x70c>  // b.any
    cee8:	mov	x1, xzr
    ceec:	bl	4b10 <__gmpz_set_ui@plt>
    cef0:	b	cf68 <mpc_pow@@Base+0x780>
    cef4:	ldr	x1, [sp, #64]
    cef8:	bl	5470 <mpfr_get_z_2exp@plt>
    cefc:	ldr	x8, [sp, #120]
    cf00:	mov	x26, x0
    cf04:	cmp	x8, x25
    cf08:	csel	x21, x0, x21, eq  // eq = none
    cf0c:	subs	x2, x21, x0
    cf10:	b.ge	cf38 <mpc_pow@@Base+0x750>  // b.tcont
    cf14:	sub	x2, x26, x21
    cf18:	sub	x0, x29, #0x58
    cf1c:	sub	x1, x29, #0x58
    cf20:	bl	4e90 <__gmpz_mul_2exp@plt>
    cf24:	sub	x0, x29, #0x58
    cf28:	mov	w1, #0x2                   	// #2
    cf2c:	bl	54b0 <__gmpz_sizeinbase@plt>
    cf30:	ldr	x8, [sp, #176]
    cf34:	b	cf60 <mpc_pow@@Base+0x778>
    cf38:	cmp	x26, x21
    cf3c:	b.ge	cf68 <mpc_pow@@Base+0x780>  // b.tcont
    cf40:	sub	x0, x29, #0x48
    cf44:	sub	x1, x29, #0x48
    cf48:	bl	4e90 <__gmpz_mul_2exp@plt>
    cf4c:	sub	x0, x29, #0x48
    cf50:	mov	w1, #0x2                   	// #2
    cf54:	bl	54b0 <__gmpz_sizeinbase@plt>
    cf58:	ldr	x8, [sp, #176]
    cf5c:	mov	x21, x26
    cf60:	cmp	x0, x8
    cf64:	b.gt	d1e8 <mpc_pow@@Base+0xa00>
    cf68:	ldur	w8, [x29, #-68]
    cf6c:	add	x26, x20, x28
    cf70:	cbz	w8, cfb4 <mpc_pow@@Base+0x7cc>
    cf74:	ldur	w25, [x29, #-84]
    cf78:	sub	x0, x29, #0x48
    cf7c:	mov	x1, xzr
    cf80:	bl	49f0 <__gmpz_scan1@plt>
    cf84:	mov	x20, x0
    cf88:	cbz	w25, cfd0 <mpc_pow@@Base+0x7e8>
    cf8c:	sub	x0, x29, #0x58
    cf90:	mov	x1, xzr
    cf94:	bl	49f0 <__gmpz_scan1@plt>
    cf98:	cmp	x0, x20
    cf9c:	csel	x20, x0, x20, cc  // cc = lo, ul, last
    cfa0:	sub	x0, x29, #0x48
    cfa4:	sub	x1, x29, #0x48
    cfa8:	mov	x2, x20
    cfac:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    cfb0:	b	cfc4 <mpc_pow@@Base+0x7dc>
    cfb4:	sub	x0, x29, #0x58
    cfb8:	mov	x1, xzr
    cfbc:	bl	49f0 <__gmpz_scan1@plt>
    cfc0:	mov	x20, x0
    cfc4:	sub	x0, x29, #0x58
    cfc8:	sub	x1, x29, #0x58
    cfcc:	b	cfd8 <mpc_pow@@Base+0x7f0>
    cfd0:	sub	x0, x29, #0x48
    cfd4:	sub	x1, x29, #0x48
    cfd8:	mov	x2, x20
    cfdc:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    cfe0:	add	x21, x20, x21
    cfe4:	tbnz	x26, #63, d380 <mpc_pow@@Base+0xb98>
    cfe8:	mov	x25, x26
    cfec:	ldur	w8, [x29, #-20]
    cff0:	tbz	w8, #31, d05c <mpc_pow@@Base+0x874>
    cff4:	sub	x0, x29, #0x28
    cff8:	sub	x1, x29, #0x48
    cffc:	sub	x2, x29, #0x48
    d000:	bl	4d40 <__gmpz_mul@plt>
    d004:	sub	x0, x29, #0x28
    d008:	sub	x1, x29, #0x58
    d00c:	sub	x2, x29, #0x58
    d010:	bl	4f10 <__gmpz_addmul@plt>
    d014:	sub	x0, x29, #0x28
    d018:	mov	x1, xzr
    d01c:	bl	49f0 <__gmpz_scan1@plt>
    d020:	mov	x20, x0
    d024:	sub	x0, x29, #0x28
    d028:	mov	w1, #0x2                   	// #2
    d02c:	bl	54b0 <__gmpz_sizeinbase@plt>
    d030:	add	x8, x20, #0x1
    d034:	cmp	x0, x8
    d038:	b.ne	d500 <mpc_pow@@Base+0xd18>  // b.any
    d03c:	ldur	w8, [x29, #-84]
    d040:	ldur	w9, [x29, #-20]
    d044:	add	x10, x21, x20
    d048:	neg	x21, x10
    d04c:	neg	w8, w8
    d050:	neg	w9, w9
    d054:	stur	w8, [x29, #-84]
    d058:	stur	w9, [x29, #-20]
    d05c:	sub	x0, x29, #0x18
    d060:	mov	w1, #0x2                   	// #2
    d064:	bl	54b0 <__gmpz_sizeinbase@plt>
    d068:	mov	x20, x0
    d06c:	sub	x0, x29, #0x28
    d070:	sub	x1, x29, #0x48
    d074:	bl	4d00 <__gmpz_set@plt>
    d078:	sub	x0, x29, #0x38
    d07c:	sub	x1, x29, #0x58
    d080:	bl	4d00 <__gmpz_set@plt>
    d084:	sub	x28, x20, #0x2
    d088:	mov	x26, x21
    d08c:	cmn	x28, #0x1
    d090:	b.eq	d1f0 <mpc_pow@@Base+0xa08>  // b.none
    d094:	sub	x0, x29, #0x68
    d098:	sub	x1, x29, #0x28
    d09c:	sub	x2, x29, #0x38
    d0a0:	bl	4d40 <__gmpz_mul@plt>
    d0a4:	sub	x0, x29, #0x28
    d0a8:	sub	x1, x29, #0x28
    d0ac:	sub	x2, x29, #0x28
    d0b0:	bl	4d40 <__gmpz_mul@plt>
    d0b4:	sub	x0, x29, #0x28
    d0b8:	sub	x1, x29, #0x38
    d0bc:	sub	x2, x29, #0x38
    d0c0:	bl	52d0 <__gmpz_submul@plt>
    d0c4:	sub	x0, x29, #0x38
    d0c8:	sub	x1, x29, #0x68
    d0cc:	mov	w2, #0x1                   	// #1
    d0d0:	bl	4e90 <__gmpz_mul_2exp@plt>
    d0d4:	sub	x0, x29, #0x18
    d0d8:	mov	x1, x28
    d0dc:	lsl	x26, x26, #1
    d0e0:	bl	4d30 <__gmpz_tstbit@plt>
    d0e4:	cbz	w0, d138 <mpc_pow@@Base+0x950>
    d0e8:	sub	x0, x29, #0x68
    d0ec:	sub	x1, x29, #0x28
    d0f0:	sub	x2, x29, #0x48
    d0f4:	bl	4d40 <__gmpz_mul@plt>
    d0f8:	sub	x0, x29, #0x68
    d0fc:	sub	x1, x29, #0x38
    d100:	sub	x2, x29, #0x58
    d104:	bl	52d0 <__gmpz_submul@plt>
    d108:	sub	x0, x29, #0x38
    d10c:	sub	x1, x29, #0x38
    d110:	sub	x2, x29, #0x48
    d114:	bl	4d40 <__gmpz_mul@plt>
    d118:	sub	x0, x29, #0x38
    d11c:	sub	x1, x29, #0x28
    d120:	sub	x2, x29, #0x58
    d124:	bl	4f10 <__gmpz_addmul@plt>
    d128:	sub	x0, x29, #0x28
    d12c:	sub	x1, x29, #0x68
    d130:	bl	4da0 <__gmpz_swap@plt>
    d134:	add	x26, x26, x21
    d138:	ldur	w8, [x29, #-36]
    d13c:	cbz	w8, d180 <mpc_pow@@Base+0x998>
    d140:	ldur	w23, [x29, #-52]
    d144:	sub	x0, x29, #0x28
    d148:	mov	x1, xzr
    d14c:	bl	49f0 <__gmpz_scan1@plt>
    d150:	mov	x20, x0
    d154:	cbz	w23, d19c <mpc_pow@@Base+0x9b4>
    d158:	sub	x0, x29, #0x38
    d15c:	mov	x1, xzr
    d160:	bl	49f0 <__gmpz_scan1@plt>
    d164:	cmp	x0, x20
    d168:	csel	x20, x0, x20, cc  // cc = lo, ul, last
    d16c:	sub	x0, x29, #0x28
    d170:	sub	x1, x29, #0x28
    d174:	mov	x2, x20
    d178:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    d17c:	b	d190 <mpc_pow@@Base+0x9a8>
    d180:	sub	x0, x29, #0x38
    d184:	mov	x1, xzr
    d188:	bl	49f0 <__gmpz_scan1@plt>
    d18c:	mov	x20, x0
    d190:	sub	x0, x29, #0x38
    d194:	sub	x1, x29, #0x38
    d198:	b	d1a4 <mpc_pow@@Base+0x9bc>
    d19c:	sub	x0, x29, #0x28
    d1a0:	sub	x1, x29, #0x28
    d1a4:	mov	x2, x20
    d1a8:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    d1ac:	sub	x0, x29, #0x28
    d1b0:	mov	w1, #0x2                   	// #2
    d1b4:	bl	54b0 <__gmpz_sizeinbase@plt>
    d1b8:	ldr	x19, [sp, #176]
    d1bc:	ldr	w23, [sp, #140]
    d1c0:	cmp	x0, x19
    d1c4:	b.gt	d1e4 <mpc_pow@@Base+0x9fc>
    d1c8:	sub	x0, x29, #0x38
    d1cc:	mov	w1, #0x2                   	// #2
    d1d0:	add	x26, x20, x26
    d1d4:	bl	54b0 <__gmpz_sizeinbase@plt>
    d1d8:	cmp	x0, x19
    d1dc:	sub	x28, x28, #0x1
    d1e0:	b.le	d08c <mpc_pow@@Base+0x8a4>
    d1e4:	ldr	w19, [sp, #60]
    d1e8:	mov	w28, #0xfffffffe            	// #-2
    d1ec:	b	d504 <mpc_pow@@Base+0xd1c>
    d1f0:	add	x21, x25, #0x1
    d1f4:	ldr	x25, [sp, #176]
    d1f8:	ldr	w19, [sp, #60]
    d1fc:	sub	x21, x21, #0x1
    d200:	cmp	x21, #0x1
    d204:	b.lt	d2bc <mpc_pow@@Base+0xad4>  // b.tstop
    d208:	sub	x0, x29, #0x68
    d20c:	sub	x1, x29, #0x28
    d210:	sub	x2, x29, #0x38
    d214:	bl	4d40 <__gmpz_mul@plt>
    d218:	sub	x0, x29, #0x28
    d21c:	sub	x1, x29, #0x28
    d220:	sub	x2, x29, #0x28
    d224:	bl	4d40 <__gmpz_mul@plt>
    d228:	sub	x0, x29, #0x28
    d22c:	sub	x1, x29, #0x38
    d230:	sub	x2, x29, #0x38
    d234:	bl	52d0 <__gmpz_submul@plt>
    d238:	sub	x0, x29, #0x38
    d23c:	sub	x1, x29, #0x68
    d240:	mov	w2, #0x1                   	// #1
    d244:	bl	4e90 <__gmpz_mul_2exp@plt>
    d248:	sub	x0, x29, #0x28
    d24c:	mov	x1, xzr
    d250:	bl	49f0 <__gmpz_scan1@plt>
    d254:	mov	x20, x0
    d258:	sub	x0, x29, #0x38
    d25c:	mov	x1, xzr
    d260:	bl	49f0 <__gmpz_scan1@plt>
    d264:	cmp	x20, x0
    d268:	csel	x20, x0, x20, hi  // hi = pmore
    d26c:	sub	x0, x29, #0x28
    d270:	sub	x1, x29, #0x28
    d274:	mov	x2, x20
    d278:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    d27c:	sub	x0, x29, #0x38
    d280:	sub	x1, x29, #0x38
    d284:	mov	x2, x20
    d288:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    d28c:	sub	x0, x29, #0x28
    d290:	mov	w1, #0x2                   	// #2
    d294:	bl	54b0 <__gmpz_sizeinbase@plt>
    d298:	cmp	x0, x25
    d29c:	b.gt	d1e8 <mpc_pow@@Base+0xa00>
    d2a0:	sub	x0, x29, #0x38
    d2a4:	mov	w1, #0x2                   	// #2
    d2a8:	add	x26, x20, x26, lsl #1
    d2ac:	bl	54b0 <__gmpz_sizeinbase@plt>
    d2b0:	cmp	x0, x25
    d2b4:	b.le	d1fc <mpc_pow@@Base+0xa14>
    d2b8:	b	d1e8 <mpc_pow@@Base+0xa00>
    d2bc:	ldr	x0, [sp, #80]
    d2c0:	ldr	w2, [sp, #36]
    d2c4:	sub	x1, x29, #0x28
    d2c8:	bl	4ec0 <mpfr_set_z@plt>
    d2cc:	ldr	x23, [sp, #40]
    d2d0:	ldr	w21, [sp, #48]
    d2d4:	cmp	w0, #0x0
    d2d8:	cset	w8, ne  // ne = any
    d2dc:	mov	w9, #0x2                   	// #2
    d2e0:	sub	x1, x29, #0x38
    d2e4:	mov	x0, x23
    d2e8:	mov	w2, w21
    d2ec:	csel	w20, w9, w8, lt  // lt = tstop
    d2f0:	bl	4ec0 <mpfr_set_z@plt>
    d2f4:	tbnz	w0, #31, d318 <mpc_pow@@Base+0xb30>
    d2f8:	sub	x1, x29, #0x38
    d2fc:	mov	x0, x23
    d300:	mov	w2, w21
    d304:	bl	4ec0 <mpfr_set_z@plt>
    d308:	cmp	w0, #0x0
    d30c:	cset	w8, ne  // ne = any
    d310:	lsl	w8, w8, #2
    d314:	b	d31c <mpc_pow@@Base+0xb34>
    d318:	mov	w8, #0x8                   	// #8
    d31c:	ldr	x0, [sp, #80]
    d320:	ldr	w3, [sp, #36]
    d324:	mov	x2, x26
    d328:	orr	w28, w8, w20
    d32c:	mov	x1, x0
    d330:	bl	4a70 <mpfr_mul_2si@plt>
    d334:	mov	x0, x23
    d338:	mov	x1, x23
    d33c:	mov	x2, x26
    d340:	mov	w3, w21
    d344:	bl	4a70 <mpfr_mul_2si@plt>
    d348:	ldr	w23, [sp, #140]
    d34c:	b	d504 <mpc_pow@@Base+0xd1c>
    d350:	mvn	w8, w1
    d354:	lsr	w0, w8, #31
    d358:	cbnz	w0, d3f8 <mpc_pow@@Base+0xc10>
    d35c:	b	d500 <mpc_pow@@Base+0xd18>
    d360:	mvn	w8, w1
    d364:	lsr	w0, w8, #31
    d368:	cbnz	w0, d44c <mpc_pow@@Base+0xc64>
    d36c:	b	d500 <mpc_pow@@Base+0xd18>
    d370:	sub	w8, w9, #0x1
    d374:	lsr	w0, w8, #31
    d378:	cbnz	w0, d4b0 <mpc_pow@@Base+0xcc8>
    d37c:	b	d500 <mpc_pow@@Base+0xd18>
    d380:	tbz	w21, #0, d3a8 <mpc_pow@@Base+0xbc0>
    d384:	sub	x0, x29, #0x48
    d388:	sub	x1, x29, #0x48
    d38c:	mov	w2, #0x1                   	// #1
    d390:	bl	4e90 <__gmpz_mul_2exp@plt>
    d394:	sub	x0, x29, #0x58
    d398:	sub	x1, x29, #0x58
    d39c:	mov	w2, #0x1                   	// #1
    d3a0:	bl	4e90 <__gmpz_mul_2exp@plt>
    d3a4:	sub	x21, x21, #0x1
    d3a8:	ldur	w8, [x29, #-84]
    d3ac:	cbz	w8, d47c <mpc_pow@@Base+0xc94>
    d3b0:	sub	x0, x29, #0x58
    d3b4:	mov	w1, #0x1                   	// #1
    d3b8:	bl	4c40 <__gmpz_divisible_2exp_p@plt>
    d3bc:	cbz	w0, d500 <mpc_pow@@Base+0xd18>
    d3c0:	sub	x0, x29, #0x28
    d3c4:	sub	x1, x29, #0x48
    d3c8:	sub	x2, x29, #0x48
    d3cc:	bl	4d40 <__gmpz_mul@plt>
    d3d0:	sub	x0, x29, #0x28
    d3d4:	sub	x1, x29, #0x58
    d3d8:	sub	x2, x29, #0x58
    d3dc:	bl	4f10 <__gmpz_addmul@plt>
    d3e0:	ldur	w1, [x29, #-36]
    d3e4:	cmp	w1, #0x1
    d3e8:	b.lt	d350 <mpc_pow@@Base+0xb68>  // b.tstop
    d3ec:	ldur	x0, [x29, #-32]
    d3f0:	bl	5420 <__gmpn_perfect_square_p@plt>
    d3f4:	cbz	w0, d500 <mpc_pow@@Base+0xd18>
    d3f8:	sub	x0, x29, #0x28
    d3fc:	sub	x1, x29, #0x28
    d400:	bl	4af0 <__gmpz_sqrt@plt>
    d404:	sub	x0, x29, #0x28
    d408:	sub	x1, x29, #0x48
    d40c:	sub	x2, x29, #0x28
    d410:	bl	53d0 <__gmpz_add@plt>
    d414:	sub	x0, x29, #0x28
    d418:	mov	w1, #0x1                   	// #1
    d41c:	bl	4c40 <__gmpz_divisible_2exp_p@plt>
    d420:	cbz	w0, d500 <mpc_pow@@Base+0xd18>
    d424:	sub	x0, x29, #0x28
    d428:	sub	x1, x29, #0x28
    d42c:	mov	w2, #0x1                   	// #1
    d430:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    d434:	ldur	w1, [x29, #-36]
    d438:	cmp	w1, #0x1
    d43c:	b.lt	d360 <mpc_pow@@Base+0xb78>  // b.tstop
    d440:	ldur	x0, [x29, #-32]
    d444:	bl	5420 <__gmpn_perfect_square_p@plt>
    d448:	cbz	w0, d500 <mpc_pow@@Base+0xd18>
    d44c:	sub	x0, x29, #0x28
    d450:	sub	x1, x29, #0x28
    d454:	bl	4af0 <__gmpz_sqrt@plt>
    d458:	sub	x0, x29, #0x38
    d45c:	sub	x1, x29, #0x58
    d460:	mov	w2, #0x1                   	// #1
    d464:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    d468:	sub	x0, x29, #0x38
    d46c:	sub	x1, x29, #0x38
    d470:	sub	x2, x29, #0x28
    d474:	bl	4cc0 <__gmpz_divexact@plt>
    d478:	b	d4c8 <mpc_pow@@Base+0xce0>
    d47c:	ldur	w8, [x29, #-68]
    d480:	tbz	w8, #31, d940 <mpc_pow@@Base+0x1158>
    d484:	sub	x0, x29, #0x38
    d488:	sub	x1, x29, #0x48
    d48c:	bl	4d00 <__gmpz_set@plt>
    d490:	ldur	w9, [x29, #-52]
    d494:	neg	w8, w9
    d498:	stur	w8, [x29, #-52]
    d49c:	tbz	w9, #31, d370 <mpc_pow@@Base+0xb88>
    d4a0:	ldur	x0, [x29, #-48]
    d4a4:	mov	w1, w8
    d4a8:	bl	5420 <__gmpn_perfect_square_p@plt>
    d4ac:	cbz	w0, d500 <mpc_pow@@Base+0xd18>
    d4b0:	sub	x0, x29, #0x38
    d4b4:	sub	x1, x29, #0x38
    d4b8:	bl	4af0 <__gmpz_sqrt@plt>
    d4bc:	sub	x0, x29, #0x28
    d4c0:	mov	x1, xzr
    d4c4:	bl	4b10 <__gmpz_set_ui@plt>
    d4c8:	sub	x0, x29, #0x28
    d4cc:	sub	x1, x29, #0x48
    d4d0:	bl	4da0 <__gmpz_swap@plt>
    d4d4:	sub	x0, x29, #0x38
    d4d8:	sub	x1, x29, #0x58
    d4dc:	bl	4da0 <__gmpz_swap@plt>
    d4e0:	cmp	x21, #0x0
    d4e4:	add	x25, x26, #0x1
    d4e8:	cinc	x8, x21, lt  // lt = tstop
    d4ec:	cmn	x26, #0x1
    d4f0:	asr	x21, x8, #1
    d4f4:	mov	x26, x25
    d4f8:	b.lt	d380 <mpc_pow@@Base+0xb98>  // b.tstop
    d4fc:	b	cfec <mpc_pow@@Base+0x804>
    d500:	mov	w28, #0xffffffff            	// #-1
    d504:	sub	x0, x29, #0x18
    d508:	bl	5180 <__gmpz_clear@plt>
    d50c:	sub	x0, x29, #0x28
    d510:	bl	5180 <__gmpz_clear@plt>
    d514:	sub	x0, x29, #0x38
    d518:	bl	5180 <__gmpz_clear@plt>
    d51c:	sub	x0, x29, #0x48
    d520:	bl	5180 <__gmpz_clear@plt>
    d524:	sub	x0, x29, #0x58
    d528:	bl	5180 <__gmpz_clear@plt>
    d52c:	sub	x0, x29, #0x68
    d530:	bl	5180 <__gmpz_clear@plt>
    d534:	ldr	x9, [sp, #120]
    d538:	ldr	x26, [sp, #72]
    d53c:	ldr	w20, [sp, #116]
    d540:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    d544:	cmp	x9, x8
    d548:	b.ne	d574 <mpc_pow@@Base+0xd8c>  // b.any
    d54c:	tbnz	w28, #31, d574 <mpc_pow@@Base+0xd8c>
    d550:	ldr	w8, [sp, #100]
    d554:	ldr	x0, [sp, #80]
    d558:	cmp	w20, #0x0
    d55c:	lsr	w1, w8, #31
    d560:	ldr	w8, [sp, #96]
    d564:	lsr	w2, w8, #31
    d568:	sub	x8, x29, #0x88
    d56c:	csel	x3, x22, x8, eq  // eq = none
    d570:	bl	da10 <mpc_pow@@Base+0x1228>
    d574:	cbz	w20, d580 <mpc_pow@@Base+0xd98>
    d578:	sub	x0, x29, #0x88
    d57c:	bl	4d60 <mpfr_clear@plt>
    d580:	cmn	w28, #0x2
    d584:	b.cc	d898 <mpc_pow@@Base+0x10b0>  // b.lo, b.ul, b.last
    d588:	ldp	x9, x8, [sp, #160]
    d58c:	cmp	x8, x9
    d590:	ldp	x9, x8, [sp, #144]
    d594:	csel	x8, x9, x8, gt
    d598:	add	x8, x27, x8
    d59c:	add	x27, x8, #0x40
    d5a0:	sub	x0, x29, #0xc8
    d5a4:	mov	x1, x27
    d5a8:	bl	4c00 <mpc_set_prec@plt>
    d5ac:	add	x0, sp, #0xb8
    d5b0:	mov	x1, x27
    d5b4:	bl	4c00 <mpc_set_prec@plt>
    d5b8:	b	cc8c <mpc_pow@@Base+0x4a4>
    d5bc:	ldr	x22, [sp, #80]
    d5c0:	add	x1, sp, #0xb8
    d5c4:	mov	w2, wzr
    d5c8:	mov	x0, x22
    d5cc:	bl	5580 <mpc_set@plt>
    d5d0:	and	w8, w20, #0x3
    d5d4:	tst	w20, #0x3
    d5d8:	ldr	x10, [x22, #16]
    d5dc:	asr	w9, w20, #2
    d5e0:	cset	w11, ne  // ne = any
    d5e4:	cmp	w8, #0x2
    d5e8:	csinv	w21, w11, wzr, ne  // ne = any
    d5ec:	cmp	w9, #0x0
    d5f0:	mov	x19, #0x8000000000000003    	// #-9223372036854775805
    d5f4:	cset	w8, ne  // ne = any
    d5f8:	cmp	w9, #0x2
    d5fc:	csinv	w20, w8, wzr, ne  // ne = any
    d600:	cmp	x10, x19
    d604:	b.ne	d618 <mpc_pow@@Base+0xe30>  // b.any
    d608:	ldr	w1, [sp, #36]
    d60c:	mov	x0, x22
    d610:	bl	4dd0 <mpc_fix_inf@plt>
    d614:	mov	w21, w0
    d618:	ldr	x8, [x22, #48]
    d61c:	ldr	w1, [sp, #48]
    d620:	ldr	x0, [sp, #40]
    d624:	cmp	x8, x19
    d628:	b.ne	d634 <mpc_pow@@Base+0xe4c>  // b.any
    d62c:	bl	4dd0 <mpc_fix_inf@plt>
    d630:	mov	w20, w0
    d634:	cmp	w21, #0x0
    d638:	mov	w8, #0x2                   	// #2
    d63c:	cset	w9, ne  // ne = any
    d640:	csel	w8, w8, w9, lt  // lt = tstop
    d644:	cmp	w20, #0x0
    d648:	cset	w9, ne  // ne = any
    d64c:	lsl	w9, w9, #2
    d650:	mov	w10, #0x8                   	// #8
    d654:	csel	w9, w10, w9, lt  // lt = tstop
    d658:	orr	w28, w9, w8
    d65c:	b	d898 <mpc_pow@@Base+0x10b0>
    d660:	ldr	w8, [x24, #40]
    d664:	ldr	w19, [x24, #8]
    d668:	sub	x0, x29, #0x88
    d66c:	lsr	w23, w8, #31
    d670:	bl	4aa0 <mpfr_init@plt>
    d674:	sub	x0, x29, #0x88
    d678:	mov	x1, x24
    d67c:	mov	w2, wzr
    d680:	bl	4ea0 <mpc_norm@plt>
    d684:	mov	w20, w0
    d688:	sub	x0, x29, #0x88
    d68c:	mov	w1, #0x1                   	// #1
    d690:	mov	x2, xzr
    d694:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    d698:	cmp	w0, #0x0
    d69c:	ccmp	w20, #0x0, #0x4, eq  // eq = none
    d6a0:	csneg	w8, w0, w20, eq  // eq = none
    d6a4:	tbnz	w8, #31, d728 <mpc_pow@@Base+0xf40>
    d6a8:	ldr	x27, [sp, #80]
    d6ac:	ldp	x9, x10, [sp, #16]
    d6b0:	cbz	w8, d7a4 <mpc_pow@@Base+0xfbc>
    d6b4:	ldr	w8, [x22, #40]
    d6b8:	mov	x20, x26
    d6bc:	lsr	w21, w8, #31
    d6c0:	b	d7b8 <mpc_pow@@Base+0xfd0>
    d6c4:	cbz	w23, d78c <mpc_pow@@Base+0xfa4>
    d6c8:	ldr	w3, [sp, #224]
    d6cc:	ldr	x0, [sp, #40]
    d6d0:	ldr	x1, [sp, #128]
    d6d4:	ldr	w2, [sp, #48]
    d6d8:	bl	51d0 <mpfr_set4@plt>
    d6dc:	mov	w20, w0
    d6e0:	ldr	x0, [sp, #80]
    d6e4:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    d6e8:	cmp	x26, x8
    d6ec:	b.ne	d8c4 <mpc_pow@@Base+0x10dc>  // b.any
    d6f0:	ldr	x9, [sp, #24]
    d6f4:	cmp	x9, x8
    d6f8:	b.ne	d8c4 <mpc_pow@@Base+0x10dc>  // b.any
    d6fc:	ldr	w8, [x24, #8]
    d700:	mov	w9, #0x1                   	// #1
    d704:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    d708:	mov	w2, wzr
    d70c:	lsr	w1, w8, #31
    d710:	mov	x3, x22
    d714:	str	w9, [x0, #8]
    d718:	str	x10, [x0, #16]
    d71c:	bl	da10 <mpc_pow@@Base+0x1228>
    d720:	cmp	w20, #0x0
    d724:	b	d8d4 <mpc_pow@@Base+0x10ec>
    d728:	ldr	w8, [x22, #40]
    d72c:	ldr	x27, [sp, #80]
    d730:	ldp	x9, x10, [sp, #16]
    d734:	tbnz	w8, #31, d7b0 <mpc_pow@@Base+0xfc8>
    d738:	mov	x20, x26
    d73c:	mov	w21, #0x1                   	// #1
    d740:	b	d7b8 <mpc_pow@@Base+0xfd0>
    d744:	mov	w1, #0x1                   	// #1
    d748:	mov	x0, x22
    d74c:	bl	d970 <mpc_pow@@Base+0x1188>
    d750:	cbz	w0, cbc0 <mpc_pow@@Base+0x3d8>
    d754:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    d758:	cmp	x26, x8
    d75c:	b.eq	d774 <mpc_pow@@Base+0xf8c>  // b.none
    d760:	mov	x1, #0xffffffffffffffff    	// #-1
    d764:	mov	x0, x24
    d768:	mov	x2, xzr
    d76c:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    d770:	cbnz	w0, cbc0 <mpc_pow@@Base+0x3d8>
    d774:	mov	w8, #0x1                   	// #1
    d778:	str	w8, [sp, #140]
    d77c:	b	cbc4 <mpc_pow@@Base+0x3dc>
    d780:	mov	x1, #0xffffffffffffffff    	// #-1
    d784:	mov	x0, x22
    d788:	b	c9c8 <mpc_pow@@Base+0x1e0>
    d78c:	ldr	x0, [sp, #80]
    d790:	ldr	w2, [sp, #12]
    d794:	add	x1, sp, #0xb8
    d798:	bl	5580 <mpc_set@plt>
    d79c:	mov	w28, w0
    d7a0:	b	d898 <mpc_pow@@Base+0x10b0>
    d7a4:	ldr	w8, [x22, #8]
    d7a8:	cmp	w23, w8, lsr #31
    d7ac:	b.ne	d738 <mpc_pow@@Base+0xf50>  // b.any
    d7b0:	mov	x20, x26
    d7b4:	mov	w21, wzr
    d7b8:	ldr	x1, [x22]
    d7bc:	mov	x24, #0x8000000000000001    	// #-9223372036854775807
    d7c0:	cmp	x10, x24
    d7c4:	cset	w25, eq  // eq = none
    d7c8:	cmp	x9, x24
    d7cc:	sub	x0, x29, #0x88
    d7d0:	cset	w26, eq  // eq = none
    d7d4:	bl	4c80 <mpfr_set_prec@plt>
    d7d8:	ldr	w3, [x22, #8]
    d7dc:	sub	x0, x29, #0x88
    d7e0:	mov	x1, x22
    d7e4:	mov	w2, wzr
    d7e8:	bl	51d0 <mpfr_set4@plt>
    d7ec:	ldr	w3, [sp, #192]
    d7f0:	ldr	w2, [sp, #36]
    d7f4:	add	x1, sp, #0xb8
    d7f8:	mov	x0, x27
    d7fc:	bl	51d0 <mpfr_set4@plt>
    d800:	cmp	x20, x24
    d804:	mov	w20, w0
    d808:	b.ne	d84c <mpc_pow@@Base+0x1064>  // b.any
    d80c:	orr	w8, w26, w25
    d810:	cbz	w8, d84c <mpc_pow@@Base+0x1064>
    d814:	lsr	w1, w19, #31
    d818:	mov	w8, #0x1                   	// #1
    d81c:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    d820:	sub	x3, x29, #0x88
    d824:	mov	x0, x27
    d828:	mov	w2, w23
    d82c:	str	w8, [x27, #40]
    d830:	str	x9, [x27, #48]
    d834:	bl	da10 <mpc_pow@@Base+0x1228>
    d838:	cmp	w20, #0x0
    d83c:	cset	w8, ne  // ne = any
    d840:	mov	w9, #0x2                   	// #2
    d844:	csel	w28, w9, w8, lt  // lt = tstop
    d848:	b	d890 <mpc_pow@@Base+0x10a8>
    d84c:	cmp	w20, #0x0
    d850:	mov	w8, #0x2                   	// #2
    d854:	cset	w10, ne  // ne = any
    d858:	csel	w28, w8, w10, lt  // lt = tstop
    d85c:	ldr	w8, [sp, #48]
    d860:	mov	w9, #0x1                   	// #1
    d864:	str	w9, [x27, #40]
    d868:	eor	w9, w21, #0x1
    d86c:	cmp	w8, #0x3
    d870:	cset	w8, ne  // ne = any
    d874:	and	w8, w8, w9
    d878:	str	x24, [x27, #48]
    d87c:	tbnz	w8, #0, d890 <mpc_pow@@Base+0x10a8>
    d880:	mov	x0, x27
    d884:	mov	x1, x27
    d888:	mov	w2, wzr
    d88c:	bl	4f60 <mpc_conj@plt>
    d890:	sub	x0, x29, #0x88
    d894:	bl	4d60 <mpfr_clear@plt>
    d898:	sub	x0, x29, #0xc8
    d89c:	bl	4a10 <mpc_clear@plt>
    d8a0:	add	x0, sp, #0xb8
    d8a4:	bl	4a10 <mpc_clear@plt>
    d8a8:	ldr	w8, [sp, #56]
    d8ac:	cbz	w8, d8b4 <mpc_pow@@Base+0x10cc>
    d8b0:	bl	4990 <mpfr_set_underflow@plt>
    d8b4:	ldr	w8, [sp, #52]
    d8b8:	cbz	w8, ca38 <mpc_pow@@Base+0x250>
    d8bc:	bl	5490 <mpfr_set_overflow@plt>
    d8c0:	b	ca38 <mpc_pow@@Base+0x250>
    d8c4:	mov	w9, #0x1                   	// #1
    d8c8:	cmp	w20, #0x0
    d8cc:	str	x8, [x0, #16]
    d8d0:	str	w9, [x0, #8]
    d8d4:	cset	w8, ne  // ne = any
    d8d8:	lsl	w8, w8, #2
    d8dc:	mov	w9, #0x8                   	// #8
    d8e0:	csel	w28, w9, w8, lt  // lt = tstop
    d8e4:	b	d898 <mpc_pow@@Base+0x10b0>
    d8e8:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    d8ec:	ldr	x8, [x8, #4008]
    d8f0:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    d8f4:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    d8f8:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    d8fc:	ldr	x0, [x8]
    d900:	add	x1, x1, #0x3b0
    d904:	add	x2, x2, #0x5a9
    d908:	add	x4, x4, #0x5af
    d90c:	mov	w3, #0x2d6                 	// #726
    d910:	b	d968 <mpc_pow@@Base+0x1180>
    d914:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    d918:	ldr	x8, [x8, #4008]
    d91c:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    d920:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    d924:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    d928:	ldr	x0, [x8]
    d92c:	add	x1, x1, #0x3b0
    d930:	add	x2, x2, #0x5a9
    d934:	add	x4, x4, #0x5d8
    d938:	mov	w3, #0x2d8                 	// #728
    d93c:	b	d968 <mpc_pow@@Base+0x1180>
    d940:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    d944:	ldr	x8, [x8, #4008]
    d948:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    d94c:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    d950:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    d954:	ldr	x0, [x8]
    d958:	add	x1, x1, #0x3b0
    d95c:	add	x2, x2, #0x5a9
    d960:	add	x4, x4, #0x601
    d964:	mov	w3, #0x3c                  	// #60
    d968:	bl	55a0 <fprintf@plt>
    d96c:	bl	5000 <abort@plt>
    d970:	ldr	x8, [x0, #16]
    d974:	add	x10, x8, x1
    d978:	cmp	x10, #0x1
    d97c:	b.lt	da00 <mpc_pow@@Base+0x1218>  // b.tstop
    d980:	ldr	x8, [x0]
    d984:	cmp	x10, x8
    d988:	b.gt	da00 <mpc_pow@@Base+0x1218>
    d98c:	adrp	x9, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    d990:	ldr	x9, [x9, #4056]
    d994:	sub	x8, x8, #0x1
    d998:	neg	x12, x10
    d99c:	ldrsw	x11, [x9]
    d9a0:	ldr	x9, [x0, #24]
    d9a4:	sdiv	x8, x8, x11
    d9a8:	add	x8, x8, #0x1
    d9ac:	madd	x8, x8, x11, x12
    d9b0:	sdiv	x8, x8, x11
    d9b4:	ldr	x12, [x9, x8, lsl #3]
    d9b8:	sdiv	x13, x10, x11
    d9bc:	msub	x10, x13, x11, x10
    d9c0:	cbz	x10, d9e4 <mpc_pow@@Base+0x11fc>
    d9c4:	sub	x10, x10, #0x1
    d9c8:	sub	w11, w11, #0x1
    d9cc:	mov	w13, #0x1                   	// #1
    d9d0:	lsl	x10, x12, x10
    d9d4:	lsl	x11, x13, x11
    d9d8:	cmp	x10, x11
    d9dc:	b.eq	d9e8 <mpc_pow@@Base+0x1200>  // b.none
    d9e0:	b	da00 <mpc_pow@@Base+0x1218>
    d9e4:	tbz	w12, #0, da00 <mpc_pow@@Base+0x1218>
    d9e8:	sub	x9, x9, #0x8
    d9ec:	subs	x10, x8, #0x1
    d9f0:	b.lt	da08 <mpc_pow@@Base+0x1220>  // b.tstop
    d9f4:	ldr	x11, [x9, x8, lsl #3]
    d9f8:	mov	x8, x10
    d9fc:	cbz	x11, d9ec <mpc_pow@@Base+0x1204>
    da00:	mov	w0, wzr
    da04:	ret
    da08:	mov	w0, #0x1                   	// #1
    da0c:	ret
    da10:	sub	sp, sp, #0x40
    da14:	stp	x20, x19, [sp, #48]
    da18:	mov	x19, x0
    da1c:	mov	x0, sp
    da20:	stp	x29, x30, [sp, #16]
    da24:	stp	x22, x21, [sp, #32]
    da28:	add	x29, sp, #0x10
    da2c:	mov	x22, x3
    da30:	mov	w21, w2
    da34:	mov	w20, w1
    da38:	bl	54a0 <__gmpz_init@plt>
    da3c:	mov	x0, sp
    da40:	mov	x1, x22
    da44:	bl	5470 <mpfr_get_z_2exp@plt>
    da48:	mov	x22, x0
    da4c:	mov	x0, sp
    da50:	mov	x1, xzr
    da54:	bl	49f0 <__gmpz_scan1@plt>
    da58:	mov	x2, x0
    da5c:	add	x22, x0, x22
    da60:	mov	x0, sp
    da64:	mov	x1, sp
    da68:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    da6c:	cmp	x22, #0x1
    da70:	b.le	da7c <mpc_pow@@Base+0x1294>
    da74:	mov	w8, wzr
    da78:	b	dad0 <mpc_pow@@Base+0x12e8>
    da7c:	cbz	x22, da9c <mpc_pow@@Base+0x12b4>
    da80:	cmp	x22, #0x1
    da84:	b.ne	db78 <mpc_pow@@Base+0x1390>  // b.any
    da88:	mov	x0, sp
    da8c:	mov	x1, xzr
    da90:	bl	4d30 <__gmpz_tstbit@plt>
    da94:	lsl	w8, w0, #1
    da98:	b	dad0 <mpc_pow@@Base+0x12e8>
    da9c:	mov	x0, sp
    daa0:	mov	w1, #0x1                   	// #1
    daa4:	bl	4d30 <__gmpz_tstbit@plt>
    daa8:	mov	w22, w0
    daac:	mov	x0, sp
    dab0:	mov	x1, xzr
    dab4:	bl	4d30 <__gmpz_tstbit@plt>
    dab8:	ldr	w8, [sp, #4]
    dabc:	add	w9, w0, w22, lsl #1
    dac0:	mov	w10, #0x4                   	// #4
    dac4:	sub	w10, w10, w9
    dac8:	cmp	w8, #0x0
    dacc:	csel	w8, w10, w9, lt  // lt = tstop
    dad0:	ldr	x10, [x19, #16]
    dad4:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    dad8:	cmp	x10, x9
    dadc:	b.ne	db2c <mpc_pow@@Base+0x1344>  // b.any
    dae0:	orr	w9, w8, #0x2
    dae4:	cmp	w9, #0x3
    dae8:	b.ne	db94 <mpc_pow@@Base+0x13ac>  // b.any
    daec:	cmp	w8, #0x1
    daf0:	cset	w9, eq  // eq = none
    daf4:	cmp	w8, #0x3
    daf8:	cset	w8, eq  // eq = none
    dafc:	cmp	w20, #0x0
    db00:	cset	w10, eq  // eq = none
    db04:	cmp	w20, #0x1
    db08:	and	w10, w10, w8
    db0c:	cset	w8, eq  // eq = none
    db10:	tbnz	w10, #0, db1c <mpc_pow@@Base+0x1334>
    db14:	and	w8, w8, w9
    db18:	cbz	w8, db78 <mpc_pow@@Base+0x1390>
    db1c:	mov	w2, #0x1                   	// #1
    db20:	mov	x0, x19
    db24:	mov	x1, x19
    db28:	b	db74 <mpc_pow@@Base+0x138c>
    db2c:	ldr	x10, [x19, #48]
    db30:	cmp	x10, x9
    db34:	b.ne	db78 <mpc_pow@@Base+0x1390>  // b.any
    db38:	tst	w8, #0xfffffffd
    db3c:	b.ne	dbc0 <mpc_pow@@Base+0x13d8>  // b.any
    db40:	cmp	w8, #0x2
    db44:	cset	w9, ne  // ne = any
    db48:	cmp	w8, #0x0
    db4c:	cset	w8, eq  // eq = none
    db50:	cmp	w21, w20
    db54:	cset	w10, eq  // eq = none
    db58:	and	w8, w10, w8
    db5c:	orr	w9, w10, w9
    db60:	cmp	w8, w9
    db64:	b.ne	db78 <mpc_pow@@Base+0x1390>  // b.any
    db68:	add	x0, x19, #0x20
    db6c:	mov	w2, #0x1                   	// #1
    db70:	mov	x1, x0
    db74:	bl	4b80 <mpfr_neg@plt>
    db78:	mov	x0, sp
    db7c:	bl	5180 <__gmpz_clear@plt>
    db80:	ldp	x20, x19, [sp, #48]
    db84:	ldp	x22, x21, [sp, #32]
    db88:	ldp	x29, x30, [sp, #16]
    db8c:	add	sp, sp, #0x40
    db90:	ret
    db94:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    db98:	ldr	x8, [x8, #4008]
    db9c:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    dba0:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    dba4:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    dba8:	ldr	x0, [x8]
    dbac:	add	x1, x1, #0x3b0
    dbb0:	add	x2, x2, #0x5a9
    dbb4:	add	x4, x4, #0x617
    dbb8:	mov	w3, #0x89                  	// #137
    dbbc:	b	dbe8 <mpc_pow@@Base+0x1400>
    dbc0:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    dbc4:	ldr	x8, [x8, #4008]
    dbc8:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    dbcc:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    dbd0:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    dbd4:	ldr	x0, [x8]
    dbd8:	add	x1, x1, #0x3b0
    dbdc:	add	x2, x2, #0x5a9
    dbe0:	add	x4, x4, #0x630
    dbe4:	mov	w3, #0x93                  	// #147
    dbe8:	bl	55a0 <fprintf@plt>
    dbec:	bl	5000 <abort@plt>

000000000000dbf0 <mpc_pow_fr@@Base>:
    dbf0:	sub	sp, sp, #0x80
    dbf4:	stp	x29, x30, [sp, #64]
    dbf8:	str	x23, [sp, #80]
    dbfc:	stp	x22, x21, [sp, #96]
    dc00:	stp	x20, x19, [sp, #112]
    dc04:	ldp	q1, q0, [x2]
    dc08:	mov	x8, sp
    dc0c:	add	x22, x8, #0x20
    dc10:	mov	x20, x1
    dc14:	mov	x21, x0
    dc18:	mov	w1, #0x1                   	// #1
    dc1c:	mov	x0, x22
    dc20:	add	x29, sp, #0x40
    dc24:	mov	w19, w3
    dc28:	stp	q1, q0, [sp]
    dc2c:	mov	w23, #0x1                   	// #1
    dc30:	bl	5440 <mpfr_init2@plt>
    dc34:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    dc38:	mov	x2, sp
    dc3c:	mov	x0, x21
    dc40:	mov	x1, x20
    dc44:	mov	w3, w19
    dc48:	str	w23, [sp, #40]
    dc4c:	str	x8, [sp, #48]
    dc50:	bl	5240 <mpc_pow@plt>
    dc54:	mov	w19, w0
    dc58:	mov	x0, x22
    dc5c:	bl	4d60 <mpfr_clear@plt>
    dc60:	mov	w0, w19
    dc64:	ldp	x20, x19, [sp, #112]
    dc68:	ldp	x22, x21, [sp, #96]
    dc6c:	ldr	x23, [sp, #80]
    dc70:	ldp	x29, x30, [sp, #64]
    dc74:	add	sp, sp, #0x80
    dc78:	ret

000000000000dc7c <mpc_pow_ld@@Base>:
    dc7c:	sub	sp, sp, #0x80
    dc80:	str	x21, [sp, #96]
    dc84:	stp	x20, x19, [sp, #112]
    dc88:	mov	w19, w2
    dc8c:	mov	x20, x1
    dc90:	mov	x21, x0
    dc94:	add	x0, sp, #0x10
    dc98:	mov	w1, #0x71                  	// #113
    dc9c:	mov	w2, #0x1                   	// #1
    dca0:	stp	x29, x30, [sp, #80]
    dca4:	add	x29, sp, #0x50
    dca8:	str	q0, [sp]
    dcac:	bl	53c0 <mpc_init3@plt>
    dcb0:	ldr	q0, [sp]
    dcb4:	add	x0, sp, #0x10
    dcb8:	mov	w1, wzr
    dcbc:	bl	4e50 <mpc_set_ld@plt>
    dcc0:	add	x2, sp, #0x10
    dcc4:	mov	x0, x21
    dcc8:	mov	x1, x20
    dccc:	mov	w3, w19
    dcd0:	bl	5240 <mpc_pow@plt>
    dcd4:	mov	w19, w0
    dcd8:	add	x0, sp, #0x10
    dcdc:	bl	4a10 <mpc_clear@plt>
    dce0:	mov	w0, w19
    dce4:	ldp	x20, x19, [sp, #112]
    dce8:	ldr	x21, [sp, #96]
    dcec:	ldp	x29, x30, [sp, #80]
    dcf0:	add	sp, sp, #0x80
    dcf4:	ret

000000000000dcf8 <mpc_pow_d@@Base>:
    dcf8:	sub	sp, sp, #0x70
    dcfc:	str	x21, [sp, #88]
    dd00:	stp	x20, x19, [sp, #96]
    dd04:	mov	w19, w2
    dd08:	mov	x20, x1
    dd0c:	mov	x21, x0
    dd10:	mov	x0, sp
    dd14:	mov	w1, #0x35                  	// #53
    dd18:	mov	w2, #0x1                   	// #1
    dd1c:	str	d8, [sp, #64]
    dd20:	stp	x29, x30, [sp, #72]
    dd24:	add	x29, sp, #0x40
    dd28:	mov	v8.16b, v0.16b
    dd2c:	bl	53c0 <mpc_init3@plt>
    dd30:	mov	x0, sp
    dd34:	mov	v0.16b, v8.16b
    dd38:	mov	w1, wzr
    dd3c:	bl	5460 <mpc_set_d@plt>
    dd40:	mov	x2, sp
    dd44:	mov	x0, x21
    dd48:	mov	x1, x20
    dd4c:	mov	w3, w19
    dd50:	bl	5240 <mpc_pow@plt>
    dd54:	mov	w19, w0
    dd58:	mov	x0, sp
    dd5c:	bl	4a10 <mpc_clear@plt>
    dd60:	mov	w0, w19
    dd64:	ldp	x20, x19, [sp, #96]
    dd68:	ldr	x21, [sp, #88]
    dd6c:	ldp	x29, x30, [sp, #72]
    dd70:	ldr	d8, [sp, #64]
    dd74:	add	sp, sp, #0x70
    dd78:	ret

000000000000dd7c <mpc_pow_si@@Base>:
    dd7c:	mov	w4, w3
    dd80:	tbnz	x2, #63, dd8c <mpc_pow_si@@Base+0x10>
    dd84:	mov	w3, #0x1                   	// #1
    dd88:	b	4df0 <mpc_pow_usi@plt>
    dd8c:	neg	x2, x2
    dd90:	mov	w3, #0xffffffff            	// #-1
    dd94:	b	4df0 <mpc_pow_usi@plt>

000000000000dd98 <mpc_pow_usi@@Base>:
    dd98:	sub	sp, sp, #0x120
    dd9c:	stp	x22, x21, [sp, #256]
    dda0:	mov	x21, x0
    dda4:	mov	x0, x1
    dda8:	stp	x29, x30, [sp, #192]
    ddac:	stp	x28, x27, [sp, #208]
    ddb0:	stp	x26, x25, [sp, #224]
    ddb4:	stp	x24, x23, [sp, #240]
    ddb8:	stp	x20, x19, [sp, #272]
    ddbc:	add	x29, sp, #0xc0
    ddc0:	mov	w19, w4
    ddc4:	mov	w22, w3
    ddc8:	mov	x23, x2
    ddcc:	mov	x20, x1
    ddd0:	bl	54d0 <mpfr_number_p@plt>
    ddd4:	cbz	w0, ddf4 <mpc_pow_usi@@Base+0x5c>
    ddd8:	add	x0, x20, #0x20
    dddc:	bl	54d0 <mpfr_number_p@plt>
    dde0:	cbz	w0, ddf4 <mpc_pow_usi@@Base+0x5c>
    dde4:	ldr	x24, [x20, #16]
    dde8:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    ddec:	cmp	x24, x8
    ddf0:	b.ne	de34 <mpc_pow_usi@@Base+0x9c>  // b.any
    ddf4:	mov	x0, x21
    ddf8:	mov	x1, x20
    ddfc:	mov	x2, x23
    de00:	mov	w3, w22
    de04:	mov	w4, w19
    de08:	bl	e190 <mpc_pow_usi@@Base+0x3f8>
    de0c:	mov	w19, w0
    de10:	mov	w0, w19
    de14:	ldp	x20, x19, [sp, #272]
    de18:	ldp	x22, x21, [sp, #256]
    de1c:	ldp	x24, x23, [sp, #240]
    de20:	ldp	x26, x25, [sp, #224]
    de24:	ldp	x28, x27, [sp, #208]
    de28:	ldp	x29, x30, [sp, #192]
    de2c:	add	sp, sp, #0x120
    de30:	ret
    de34:	cbz	x23, ddf4 <mpc_pow_usi@@Base+0x5c>
    de38:	ldr	x25, [x20, #48]
    de3c:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    de40:	cmp	x25, x8
    de44:	b.eq	ddf4 <mpc_pow_usi@@Base+0x5c>  // b.none
    de48:	cmp	x23, #0x1
    de4c:	b.ne	de6c <mpc_pow_usi@@Base+0xd4>  // b.any
    de50:	cmp	w22, #0x1
    de54:	b.lt	e130 <mpc_pow_usi@@Base+0x398>  // b.tstop
    de58:	mov	x0, x21
    de5c:	mov	x1, x20
    de60:	mov	w2, w19
    de64:	bl	5580 <mpc_set@plt>
    de68:	b	de0c <mpc_pow_usi@@Base+0x74>
    de6c:	cmp	x23, #0x2
    de70:	b.ne	de90 <mpc_pow_usi@@Base+0xf8>  // b.any
    de74:	cmp	w22, #0x1
    de78:	b.lt	de90 <mpc_pow_usi@@Base+0xf8>  // b.tstop
    de7c:	mov	x0, x21
    de80:	mov	x1, x20
    de84:	mov	w2, w19
    de88:	bl	4f30 <mpc_sqr@plt>
    de8c:	b	de0c <mpc_pow_usi@@Base+0x74>
    de90:	cmp	x24, x25
    de94:	csel	x26, x24, x25, gt
    de98:	bl	5200 <mpfr_get_emax@plt>
    de9c:	sdiv	x8, x0, x23
    dea0:	cmp	x26, x8
    dea4:	b.gt	ddf4 <mpc_pow_usi@@Base+0x5c>
    dea8:	cmp	x25, x24
    deac:	csel	x24, x24, x25, gt
    deb0:	bl	5060 <mpfr_get_emin@plt>
    deb4:	sdiv	x8, x0, x23
    deb8:	cmp	x8, x24
    debc:	b.gt	ddf4 <mpc_pow_usi@@Base+0x5c>
    dec0:	cmp	x23, #0x4
    dec4:	and	x26, x23, x23, lsr #1
    dec8:	mov	x27, xzr
    decc:	b.cc	dee4 <mpc_pow_usi@@Base+0x14c>  // b.lo, b.ul, b.last
    ded0:	mov	x8, x23
    ded4:	cmp	x8, #0x7
    ded8:	lsr	x8, x8, #1
    dedc:	add	x27, x27, #0x1
    dee0:	b.hi	ded4 <mpc_pow_usi@@Base+0x13c>  // b.pmore
    dee4:	ldr	x8, [x21]
    dee8:	ldr	x9, [x21, #32]
    deec:	sub	x0, x29, #0x48
    def0:	sub	x25, x29, #0x48
    def4:	cmp	x8, x9
    def8:	csel	x8, x8, x9, gt
    defc:	add	x8, x27, x8
    df00:	add	x24, x8, #0x22
    df04:	mov	x1, x24
    df08:	bl	4cf0 <mpc_init2@plt>
    df0c:	cbz	x26, df1c <mpc_pow_usi@@Base+0x184>
    df10:	add	x0, sp, #0x38
    df14:	mov	x1, x24
    df18:	bl	4cf0 <mpc_init2@plt>
    df1c:	add	x8, x25, #0x20
    df20:	str	x8, [sp, #16]
    df24:	mov	x8, #0xfffffffffffffffb    	// #-5
    df28:	tst	w19, #0xf
    df2c:	add	x9, x27, #0x5
    df30:	sub	x8, x8, x27
    df34:	str	x9, [sp, #8]
    df38:	mov	w9, #0x1                   	// #1
    df3c:	str	x8, [sp, #40]
    df40:	cset	w8, eq  // eq = none
    df44:	str	x8, [sp, #32]
    df48:	cmp	w19, #0x10
    df4c:	lsl	x8, x9, x27
    df50:	mov	w10, wzr
    df54:	cset	w9, cc  // cc = lo, ul, last
    df58:	and	x8, x8, x23
    df5c:	str	x9, [sp]
    df60:	str	x8, [sp, #24]
    df64:	sub	x0, x29, #0x48
    df68:	mov	x1, x20
    df6c:	mov	w2, wzr
    df70:	str	w10, [sp, #52]
    df74:	bl	4f30 <mpc_sqr@plt>
    df78:	mov	x28, x26
    df7c:	cbz	x26, dfac <mpc_pow_usi@@Base+0x214>
    df80:	add	x0, sp, #0x38
    df84:	sub	x1, x29, #0x48
    df88:	mov	x2, x20
    df8c:	mov	w3, wzr
    df90:	bl	4ed0 <mpc_mul@plt>
    df94:	ldr	x8, [sp, #24]
    df98:	cbz	x8, dfac <mpc_pow_usi@@Base+0x214>
    df9c:	sub	x0, x29, #0x48
    dfa0:	add	x1, sp, #0x38
    dfa4:	mov	w2, wzr
    dfa8:	bl	5580 <mpc_set@plt>
    dfac:	cmp	x27, #0x1
    dfb0:	b.lt	e030 <mpc_pow_usi@@Base+0x298>  // b.tstop
    dfb4:	mov	x26, x27
    dfb8:	sub	x0, x29, #0x48
    dfbc:	sub	x1, x29, #0x48
    dfc0:	mov	w2, wzr
    dfc4:	sub	x25, x26, #0x1
    dfc8:	bl	4f30 <mpc_sqr@plt>
    dfcc:	lsr	x8, x23, x25
    dfd0:	tbz	w8, #0, e024 <mpc_pow_usi@@Base+0x28c>
    dfd4:	subs	x26, x26, #0x2
    dfd8:	b.lt	e010 <mpc_pow_usi@@Base+0x278>  // b.tstop
    dfdc:	lsr	x8, x23, x26
    dfe0:	tbz	w8, #0, e010 <mpc_pow_usi@@Base+0x278>
    dfe4:	sub	x0, x29, #0x48
    dfe8:	sub	x1, x29, #0x48
    dfec:	mov	w2, wzr
    dff0:	bl	4f30 <mpc_sqr@plt>
    dff4:	sub	x0, x29, #0x48
    dff8:	sub	x1, x29, #0x48
    dffc:	add	x2, sp, #0x38
    e000:	mov	w3, wzr
    e004:	bl	4ed0 <mpc_mul@plt>
    e008:	mov	x25, x26
    e00c:	b	e024 <mpc_pow_usi@@Base+0x28c>
    e010:	sub	x0, x29, #0x48
    e014:	sub	x1, x29, #0x48
    e018:	mov	x2, x20
    e01c:	mov	w3, wzr
    e020:	bl	4ed0 <mpc_mul@plt>
    e024:	cmp	x25, #0x0
    e028:	mov	x26, x25
    e02c:	b.gt	dfb8 <mpc_pow_usi@@Base+0x220>
    e030:	tbz	w22, #31, e048 <mpc_pow_usi@@Base+0x2b0>
    e034:	sub	x0, x29, #0x48
    e038:	sub	x2, x29, #0x48
    e03c:	mov	w1, #0x1                   	// #1
    e040:	mov	w3, wzr
    e044:	bl	55b0 <mpc_ui_div@plt>
    e048:	ldur	x8, [x29, #-56]
    e04c:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    e050:	mov	x26, x28
    e054:	cmp	x8, x10
    e058:	b.eq	e148 <mpc_pow_usi@@Base+0x3b0>  // b.none
    e05c:	ldur	x9, [x29, #-24]
    e060:	cmp	x9, x10
    e064:	b.eq	e148 <mpc_pow_usi@@Base+0x3b0>  // b.none
    e068:	ldr	x10, [sp, #40]
    e06c:	sub	x25, x8, x9
    e070:	and	x9, x25, x25, asr #63
    e074:	ldr	x8, [x21]
    e078:	add	x10, x10, x24
    e07c:	add	x1, x10, x9
    e080:	ldr	x9, [sp, #32]
    e084:	sub	x0, x29, #0x48
    e088:	mov	w3, #0x1                   	// #1
    e08c:	mov	w2, wzr
    e090:	add	x4, x8, x9
    e094:	bl	5450 <mpfr_can_round@plt>
    e098:	cbz	w0, e0cc <mpc_pow_usi@@Base+0x334>
    e09c:	ldp	x10, x0, [sp, #8]
    e0a0:	cmp	x25, #0x0
    e0a4:	csel	x9, xzr, x25, lt  // lt = tstop
    e0a8:	ldr	x8, [x21, #32]
    e0ac:	add	x9, x10, x9
    e0b0:	sub	x1, x24, x9
    e0b4:	ldr	x9, [sp]
    e0b8:	mov	w3, #0x1                   	// #1
    e0bc:	mov	w2, wzr
    e0c0:	add	x4, x8, x9
    e0c4:	bl	5450 <mpfr_can_round@plt>
    e0c8:	cbnz	w0, e17c <mpc_pow_usi@@Base+0x3e4>
    e0cc:	ldr	w8, [sp, #52]
    e0d0:	cbnz	w8, e148 <mpc_pow_usi@@Base+0x3b0>
    e0d4:	ldr	x8, [x21]
    e0d8:	ldr	x9, [x21, #32]
    e0dc:	cmp	x25, #0x0
    e0e0:	cneg	x10, x25, mi  // mi = first
    e0e4:	cmp	x8, x9
    e0e8:	csel	x8, x8, x9, gt
    e0ec:	cmp	x10, x8
    e0f0:	b.ge	e148 <mpc_pow_usi@@Base+0x3b0>  // b.tcont
    e0f4:	ldr	x8, [x20]
    e0f8:	ldr	x9, [x20, #32]
    e0fc:	sub	x0, x29, #0x48
    e100:	cmp	x8, x9
    e104:	csel	x8, x8, x9, gt
    e108:	add	x24, x8, x24
    e10c:	mov	x1, x24
    e110:	bl	4c00 <mpc_set_prec@plt>
    e114:	mov	w10, #0x1                   	// #1
    e118:	cbz	x26, df64 <mpc_pow_usi@@Base+0x1cc>
    e11c:	add	x0, sp, #0x38
    e120:	mov	x1, x24
    e124:	bl	4c00 <mpc_set_prec@plt>
    e128:	mov	w10, #0x1                   	// #1
    e12c:	b	df64 <mpc_pow_usi@@Base+0x1cc>
    e130:	mov	w1, #0x1                   	// #1
    e134:	mov	x0, x21
    e138:	mov	x2, x20
    e13c:	mov	w3, w19
    e140:	bl	55b0 <mpc_ui_div@plt>
    e144:	b	de0c <mpc_pow_usi@@Base+0x74>
    e148:	mov	x0, x21
    e14c:	mov	x1, x20
    e150:	mov	x2, x23
    e154:	mov	w3, w22
    e158:	mov	w4, w19
    e15c:	bl	e190 <mpc_pow_usi@@Base+0x3f8>
    e160:	mov	w19, w0
    e164:	sub	x0, x29, #0x48
    e168:	bl	4a10 <mpc_clear@plt>
    e16c:	cbz	x26, de10 <mpc_pow_usi@@Base+0x78>
    e170:	add	x0, sp, #0x38
    e174:	bl	4a10 <mpc_clear@plt>
    e178:	b	de10 <mpc_pow_usi@@Base+0x78>
    e17c:	sub	x1, x29, #0x48
    e180:	mov	x0, x21
    e184:	mov	w2, w19
    e188:	bl	5580 <mpc_set@plt>
    e18c:	b	e160 <mpc_pow_usi@@Base+0x3c8>
    e190:	sub	sp, sp, #0x80
    e194:	stp	x22, x21, [sp, #96]
    e198:	stp	x20, x19, [sp, #112]
    e19c:	mov	x22, x2
    e1a0:	mov	x20, x1
    e1a4:	mov	x21, x0
    e1a8:	mov	x0, sp
    e1ac:	mov	w1, #0x40                  	// #64
    e1b0:	mov	w2, #0x1                   	// #1
    e1b4:	stp	x29, x30, [sp, #64]
    e1b8:	str	x23, [sp, #80]
    e1bc:	add	x29, sp, #0x40
    e1c0:	mov	w19, w4
    e1c4:	mov	w23, w3
    e1c8:	bl	53c0 <mpc_init3@plt>
    e1cc:	cmp	w23, #0x1
    e1d0:	b.lt	e1e8 <mpc_pow_usi@@Base+0x450>  // b.tstop
    e1d4:	mov	x0, sp
    e1d8:	mov	x1, x22
    e1dc:	mov	w2, wzr
    e1e0:	bl	4ce0 <mpc_set_ui@plt>
    e1e4:	b	e1f8 <mpc_pow_usi@@Base+0x460>
    e1e8:	neg	x1, x22
    e1ec:	mov	x0, sp
    e1f0:	mov	w2, wzr
    e1f4:	bl	5020 <mpc_set_si@plt>
    e1f8:	mov	x2, sp
    e1fc:	mov	x0, x21
    e200:	mov	x1, x20
    e204:	mov	w3, w19
    e208:	bl	5240 <mpc_pow@plt>
    e20c:	mov	w19, w0
    e210:	mov	x0, sp
    e214:	bl	4a10 <mpc_clear@plt>
    e218:	mov	w0, w19
    e21c:	ldp	x20, x19, [sp, #112]
    e220:	ldp	x22, x21, [sp, #96]
    e224:	ldr	x23, [sp, #80]
    e228:	ldp	x29, x30, [sp, #64]
    e22c:	add	sp, sp, #0x80
    e230:	ret

000000000000e234 <mpc_pow_ui@@Base>:
    e234:	mov	w4, w3
    e238:	mov	w3, #0x1                   	// #1
    e23c:	b	4df0 <mpc_pow_usi@plt>

000000000000e240 <mpc_pow_z@@Base>:
    e240:	sub	sp, sp, #0x80
    e244:	stp	x22, x21, [sp, #96]
    e248:	stp	x20, x19, [sp, #112]
    e24c:	mov	x20, x1
    e250:	mov	x21, x0
    e254:	mov	w1, #0x2                   	// #2
    e258:	mov	x0, x2
    e25c:	stp	x29, x30, [sp, #64]
    e260:	str	x23, [sp, #80]
    e264:	add	x29, sp, #0x40
    e268:	mov	w19, w3
    e26c:	mov	x22, x2
    e270:	bl	54b0 <__gmpz_sizeinbase@plt>
    e274:	ldr	w8, [x22, #4]
    e278:	mov	x23, x0
    e27c:	tbnz	w8, #31, e2a0 <mpc_pow_z@@Base+0x60>
    e280:	cmp	w8, #0x1
    e284:	b.hi	e2d4 <mpc_pow_z@@Base+0x94>  // b.pmore
    e288:	ldr	x9, [x22, #8]
    e28c:	cmp	w8, #0x0
    e290:	mov	w3, #0x1                   	// #1
    e294:	ldr	x9, [x9]
    e298:	csel	x2, xzr, x9, eq  // eq = none
    e29c:	b	e2bc <mpc_pow_z@@Base+0x7c>
    e2a0:	mov	x0, x22
    e2a4:	bl	4c60 <__gmpz_fits_slong_p@plt>
    e2a8:	cbz	w0, e2d4 <mpc_pow_z@@Base+0x94>
    e2ac:	mov	x0, x22
    e2b0:	bl	49a0 <__gmpz_get_si@plt>
    e2b4:	neg	x2, x0
    e2b8:	mov	w3, #0xffffffff            	// #-1
    e2bc:	mov	x0, x21
    e2c0:	mov	x1, x20
    e2c4:	mov	w4, w19
    e2c8:	bl	4df0 <mpc_pow_usi@plt>
    e2cc:	mov	w19, w0
    e2d0:	b	e318 <mpc_pow_z@@Base+0xd8>
    e2d4:	cmp	x23, #0x1
    e2d8:	csinc	x1, x23, xzr, gt
    e2dc:	mov	x0, sp
    e2e0:	mov	w2, #0x1                   	// #1
    e2e4:	bl	53c0 <mpc_init3@plt>
    e2e8:	mov	x0, sp
    e2ec:	mov	x1, x22
    e2f0:	mov	w2, wzr
    e2f4:	bl	50a0 <mpc_set_z@plt>
    e2f8:	mov	x2, sp
    e2fc:	mov	x0, x21
    e300:	mov	x1, x20
    e304:	mov	w3, w19
    e308:	bl	5240 <mpc_pow@plt>
    e30c:	mov	w19, w0
    e310:	mov	x0, sp
    e314:	bl	4a10 <mpc_clear@plt>
    e318:	mov	w0, w19
    e31c:	ldp	x20, x19, [sp, #112]
    e320:	ldp	x22, x21, [sp, #96]
    e324:	ldr	x23, [sp, #80]
    e328:	ldp	x29, x30, [sp, #64]
    e32c:	add	sp, sp, #0x80
    e330:	ret

000000000000e334 <mpc_proj@@Base>:
    e334:	stp	x29, x30, [sp, #-48]!
    e338:	stp	x20, x19, [sp, #32]
    e33c:	ldr	x9, [x1, #16]
    e340:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    e344:	mov	x19, x1
    e348:	mov	x20, x0
    e34c:	cmp	x9, x8
    e350:	str	x21, [sp, #16]
    e354:	mov	x29, sp
    e358:	b.eq	e368 <mpc_proj@@Base+0x34>  // b.none
    e35c:	ldr	x9, [x19, #48]
    e360:	cmp	x9, x8
    e364:	b.ne	e3a0 <mpc_proj@@Base+0x6c>  // b.any
    e368:	mov	w1, #0x1                   	// #1
    e36c:	mov	x0, x20
    e370:	mov	w21, #0x1                   	// #1
    e374:	bl	5120 <mpfr_set_inf@plt>
    e378:	ldr	w8, [x19, #40]
    e37c:	add	x0, x20, #0x20
    e380:	cmp	w8, #0x0
    e384:	cneg	w1, w21, lt  // lt = tstop
    e388:	bl	4d10 <mpfr_set_zero@plt>
    e38c:	ldp	x20, x19, [sp, #32]
    e390:	ldr	x21, [sp, #16]
    e394:	mov	w0, wzr
    e398:	ldp	x29, x30, [sp], #48
    e39c:	ret
    e3a0:	mov	x0, x20
    e3a4:	mov	x1, x19
    e3a8:	ldp	x20, x19, [sp, #32]
    e3ac:	ldr	x21, [sp, #16]
    e3b0:	ldp	x29, x30, [sp], #48
    e3b4:	b	5580 <mpc_set@plt>

000000000000e3b8 <mpc_real@@Base>:
    e3b8:	ldr	w3, [x1, #8]
    e3bc:	b	51d0 <mpfr_set4@plt>

000000000000e3c0 <mpc_rootofunity@@Base>:
    e3c0:	sub	sp, sp, #0xd0
    e3c4:	stp	x20, x19, [sp, #192]
    e3c8:	mov	x19, x0
    e3cc:	stp	x29, x30, [sp, #128]
    e3d0:	stp	x26, x25, [sp, #144]
    e3d4:	stp	x24, x23, [sp, #160]
    e3d8:	stp	x22, x21, [sp, #176]
    e3dc:	add	x29, sp, #0x80
    e3e0:	cbz	x1, e444 <mpc_rootofunity@@Base+0x84>
    e3e4:	udiv	x8, x2, x1
    e3e8:	msub	x8, x8, x1, x2
    e3ec:	mov	w20, w3
    e3f0:	mov	x10, x1
    e3f4:	mov	x9, x8
    e3f8:	mov	x11, x9
    e3fc:	mov	x9, x10
    e400:	udiv	x10, x11, x10
    e404:	msub	x10, x10, x9, x11
    e408:	cbnz	x10, e3f8 <mpc_rootofunity@@Base+0x38>
    e40c:	udiv	x24, x1, x9
    e410:	cmp	x24, #0x4
    e414:	udiv	x21, x8, x9
    e418:	b.eq	e474 <mpc_rootofunity@@Base+0xb4>  // b.none
    e41c:	cmp	x24, #0x2
    e420:	b.eq	e45c <mpc_rootofunity@@Base+0x9c>  // b.none
    e424:	cmp	x24, #0x1
    e428:	b.ne	e4a0 <mpc_rootofunity@@Base+0xe0>  // b.any
    e42c:	cmp	x9, x8
    e430:	b.ls	e930 <mpc_rootofunity@@Base+0x570>  // b.plast
    e434:	mov	w1, #0x1                   	// #1
    e438:	mov	x0, x19
    e43c:	mov	x2, xzr
    e440:	b	e494 <mpc_rootofunity@@Base+0xd4>
    e444:	mov	x0, x19
    e448:	bl	4a40 <mpfr_set_nan@plt>
    e44c:	add	x0, x19, #0x20
    e450:	bl	4a40 <mpfr_set_nan@plt>
    e454:	mov	w0, wzr
    e458:	b	e914 <mpc_rootofunity@@Base+0x554>
    e45c:	cmp	x21, #0x1
    e460:	b.ne	e95c <mpc_rootofunity@@Base+0x59c>  // b.any
    e464:	mov	x1, #0xffffffffffffffff    	// #-1
    e468:	mov	x0, x19
    e46c:	mov	x2, xzr
    e470:	b	e590 <mpc_rootofunity@@Base+0x1d0>
    e474:	orr	x8, x21, #0x2
    e478:	cmp	x8, #0x3
    e47c:	b.ne	e988 <mpc_rootofunity@@Base+0x5c8>  // b.any
    e480:	cmp	x21, #0x1
    e484:	b.ne	e584 <mpc_rootofunity@@Base+0x1c4>  // b.any
    e488:	mov	w2, #0x1                   	// #1
    e48c:	mov	x0, x19
    e490:	mov	x1, xzr
    e494:	mov	w3, w20
    e498:	bl	5040 <mpc_set_ui_ui@plt>
    e49c:	b	e914 <mpc_rootofunity@@Base+0x554>
    e4a0:	sub	x8, x24, #0x3
    e4a4:	cmp	x8, #0x9
    e4a8:	b.hi	e770 <mpc_rootofunity@@Base+0x3b0>  // b.pmore
    e4ac:	adrp	x9, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    e4b0:	add	x9, x9, #0x649
    e4b4:	adr	x10, e4c4 <mpc_rootofunity@@Base+0x104>
    e4b8:	ldrb	w11, [x9, x8]
    e4bc:	add	x10, x10, x11, lsl #2
    e4c0:	br	x10
    e4c4:	cmp	x24, #0x3
    e4c8:	b.ne	e4d8 <mpc_rootofunity@@Base+0x118>  // b.any
    e4cc:	sub	x8, x21, #0x1
    e4d0:	cmp	x8, #0x2
    e4d4:	b.cc	e4ec <mpc_rootofunity@@Base+0x12c>  // b.lo, b.ul, b.last
    e4d8:	cmp	x24, #0x6
    e4dc:	b.ne	e9b4 <mpc_rootofunity@@Base+0x5f4>  // b.any
    e4e0:	orr	x8, x21, #0x4
    e4e4:	cmp	x8, #0x5
    e4e8:	b.ne	e9b4 <mpc_rootofunity@@Base+0x5f4>  // b.any
    e4ec:	cmp	x24, #0x3
    e4f0:	mov	x8, #0xffffffffffffffff    	// #-1
    e4f4:	cneg	x1, x8, ne  // ne = any
    e4f8:	and	w3, w20, #0xf
    e4fc:	mov	x0, x19
    e500:	mov	x2, xzr
    e504:	bl	49e0 <mpfr_set_si_2exp@plt>
    e508:	asr	w8, w20, #4
    e50c:	mov	w24, #0x2                   	// #2
    e510:	cmp	w8, #0x3
    e514:	mov	w9, #0x3                   	// #3
    e518:	csel	w10, w24, w8, eq  // eq = none
    e51c:	cmp	w8, #0x2
    e520:	csel	w9, w9, w10, eq  // eq = none
    e524:	cmp	x21, #0x1
    e528:	add	x23, x19, #0x20
    e52c:	mov	w22, w0
    e530:	csel	w2, w9, w8, ne  // ne = any
    e534:	mov	w1, #0x3                   	// #3
    e538:	mov	x0, x23
    e53c:	bl	5280 <mpfr_sqrt_ui@plt>
    e540:	mov	w20, w0
    e544:	mov	w2, #0x1                   	// #1
    e548:	mov	x0, x19
    e54c:	mov	x1, x19
    e550:	mov	w3, wzr
    e554:	bl	5530 <mpc_div_2ui@plt>
    e558:	cmp	x21, #0x1
    e55c:	b.eq	e574 <mpc_rootofunity@@Base+0x1b4>  // b.none
    e560:	mov	x0, x23
    e564:	mov	x1, x23
    e568:	mov	w2, wzr
    e56c:	bl	4b80 <mpfr_neg@plt>
    e570:	neg	w20, w20
    e574:	cmp	w22, #0x0
    e578:	cset	w8, ne  // ne = any
    e57c:	csel	w8, w24, w8, lt  // lt = tstop
    e580:	b	e8fc <mpc_rootofunity@@Base+0x53c>
    e584:	mov	x2, #0xffffffffffffffff    	// #-1
    e588:	mov	x0, x19
    e58c:	mov	x1, xzr
    e590:	mov	w3, w20
    e594:	bl	52c0 <mpc_set_si_si@plt>
    e598:	b	e914 <mpc_rootofunity@@Base+0x554>
    e59c:	sub	x8, x21, #0x1
    e5a0:	ror	x8, x8, #1
    e5a4:	cmp	x8, #0x5
    e5a8:	b.hi	e9e0 <mpc_rootofunity@@Base+0x620>  // b.pmore
    e5ac:	mov	w9, #0x1                   	// #1
    e5b0:	lsl	x8, x9, x8
    e5b4:	mov	w9, #0x2d                  	// #45
    e5b8:	tst	x8, x9
    e5bc:	b.eq	e9e0 <mpc_rootofunity@@Base+0x620>  // b.none
    e5c0:	and	w8, w20, #0xf
    e5c4:	mov	w23, #0x2                   	// #2
    e5c8:	cmp	w8, #0x3
    e5cc:	orr	x24, x21, #0x2
    e5d0:	mov	w9, #0x3                   	// #3
    e5d4:	csel	w10, w23, w8, eq  // eq = none
    e5d8:	cmp	w8, #0x2
    e5dc:	csel	w9, w9, w10, eq  // eq = none
    e5e0:	cmp	x24, #0x7
    e5e4:	csel	w2, w9, w8, eq  // eq = none
    e5e8:	mov	w1, #0x3                   	// #3
    e5ec:	mov	x0, x19
    e5f0:	bl	5280 <mpfr_sqrt_ui@plt>
    e5f4:	cmp	x21, #0x6
    e5f8:	mov	w8, #0x1                   	// #1
    e5fc:	mov	w22, w0
    e600:	add	x0, x19, #0x20
    e604:	cneg	x1, x8, cs  // cs = hs, nlast
    e608:	asr	w3, w20, #4
    e60c:	mov	x2, xzr
    e610:	bl	49e0 <mpfr_set_si_2exp@plt>
    e614:	mov	w20, w0
    e618:	mov	w2, #0x1                   	// #1
    e61c:	mov	x0, x19
    e620:	mov	x1, x19
    e624:	mov	w3, wzr
    e628:	bl	5530 <mpc_div_2ui@plt>
    e62c:	cmp	x24, #0x7
    e630:	b.ne	e648 <mpc_rootofunity@@Base+0x288>  // b.any
    e634:	mov	x0, x19
    e638:	mov	x1, x19
    e63c:	mov	w2, wzr
    e640:	bl	4b80 <mpfr_neg@plt>
    e644:	neg	w22, w22
    e648:	cmp	w22, #0x0
    e64c:	cset	w8, ne  // ne = any
    e650:	csel	w8, w23, w8, lt  // lt = tstop
    e654:	cmp	w20, #0x0
    e658:	cset	w9, ne  // ne = any
    e65c:	lsl	w9, w9, #2
    e660:	mov	w10, #0x8                   	// #8
    e664:	csel	w9, w10, w9, lt  // lt = tstop
    e668:	orr	w0, w8, w9
    e66c:	b	e914 <mpc_rootofunity@@Base+0x554>
    e670:	cmp	x21, #0x7
    e674:	b.hi	ea0c <mpc_rootofunity@@Base+0x64c>  // b.pmore
    e678:	mov	w8, #0x1                   	// #1
    e67c:	lsl	x8, x8, x21
    e680:	mov	w9, #0xaa                  	// #170
    e684:	tst	x8, x9
    e688:	b.eq	ea0c <mpc_rootofunity@@Base+0x64c>  // b.none
    e68c:	cmp	x21, #0x5
    e690:	and	w2, w20, #0xf
    e694:	b.eq	e6a0 <mpc_rootofunity@@Base+0x2e0>  // b.none
    e698:	cmp	x21, #0x3
    e69c:	b.ne	e6b8 <mpc_rootofunity@@Base+0x2f8>  // b.any
    e6a0:	cmp	w2, #0x3
    e6a4:	mov	w8, #0x2                   	// #2
    e6a8:	csel	w8, w8, w2, eq  // eq = none
    e6ac:	cmp	w2, #0x2
    e6b0:	mov	w9, #0x3                   	// #3
    e6b4:	csel	w2, w9, w8, eq  // eq = none
    e6b8:	asr	w8, w20, #4
    e6bc:	mov	w9, #0x2                   	// #2
    e6c0:	cmp	w8, #0x3
    e6c4:	mov	w10, #0x3                   	// #3
    e6c8:	csel	w9, w9, w8, eq  // eq = none
    e6cc:	cmp	w8, #0x2
    e6d0:	csel	w9, w10, w9, eq  // eq = none
    e6d4:	cmp	x21, #0x4
    e6d8:	mov	w1, #0x2                   	// #2
    e6dc:	mov	x0, x19
    e6e0:	csel	w22, w9, w8, hi  // hi = pmore
    e6e4:	bl	5280 <mpfr_sqrt_ui@plt>
    e6e8:	add	x23, x19, #0x20
    e6ec:	mov	w20, w0
    e6f0:	mov	w1, #0x2                   	// #2
    e6f4:	mov	x0, x23
    e6f8:	mov	w2, w22
    e6fc:	bl	5280 <mpfr_sqrt_ui@plt>
    e700:	mov	w22, w0
    e704:	mov	w2, #0x1                   	// #1
    e708:	mov	x0, x19
    e70c:	mov	x1, x19
    e710:	mov	w3, wzr
    e714:	bl	5530 <mpc_div_2ui@plt>
    e718:	cmp	x21, #0x5
    e71c:	b.eq	e728 <mpc_rootofunity@@Base+0x368>  // b.none
    e720:	cmp	x21, #0x3
    e724:	b.ne	e73c <mpc_rootofunity@@Base+0x37c>  // b.any
    e728:	mov	x0, x19
    e72c:	mov	x1, x19
    e730:	mov	w2, wzr
    e734:	bl	4b80 <mpfr_neg@plt>
    e738:	neg	w20, w20
    e73c:	cmp	x21, #0x5
    e740:	b.cc	e758 <mpc_rootofunity@@Base+0x398>  // b.lo, b.ul, b.last
    e744:	mov	x0, x23
    e748:	mov	x1, x23
    e74c:	mov	w2, wzr
    e750:	bl	4b80 <mpfr_neg@plt>
    e754:	neg	w22, w22
    e758:	cmp	w20, #0x0
    e75c:	mov	w8, #0x2                   	// #2
    e760:	cset	w9, ne  // ne = any
    e764:	csel	w8, w8, w9, lt  // lt = tstop
    e768:	cmp	w22, #0x0
    e76c:	b	e900 <mpc_rootofunity@@Base+0x540>
    e770:	mov	x22, x19
    e774:	ldr	x8, [x19]
    e778:	ldr	x9, [x22, #32]!
    e77c:	add	x0, sp, #0x40
    e780:	mov	w1, #0x43                  	// #67
    e784:	cmp	x8, x9
    e788:	csel	x23, x8, x9, gt
    e78c:	bl	5440 <mpfr_init2@plt>
    e790:	add	x0, sp, #0x20
    e794:	mov	w1, #0x43                  	// #67
    e798:	bl	5440 <mpfr_init2@plt>
    e79c:	mov	x0, sp
    e7a0:	mov	w1, #0x43                  	// #67
    e7a4:	bl	5440 <mpfr_init2@plt>
    e7a8:	sub	x0, x29, #0x20
    e7ac:	bl	52b0 <__gmpq_init@plt>
    e7b0:	sub	x0, x29, #0x20
    e7b4:	mov	x1, x21
    e7b8:	mov	x2, x24
    e7bc:	bl	5100 <__gmpq_set_ui@plt>
    e7c0:	sub	x0, x29, #0x20
    e7c4:	sub	x1, x29, #0x20
    e7c8:	mov	w2, #0x1                   	// #1
    e7cc:	bl	5570 <__gmpq_mul_2exp@plt>
    e7d0:	and	w21, w20, #0xf
    e7d4:	tst	w20, #0xf
    e7d8:	asr	w20, w20, #4
    e7dc:	cset	w24, eq  // eq = none
    e7e0:	cmp	w20, #0x0
    e7e4:	cset	w25, eq  // eq = none
    e7e8:	mov	x0, x23
    e7ec:	bl	4d20 <mpc_ceil_log2@plt>
    e7f0:	add	x26, x23, x0
    e7f4:	add	x23, x26, #0x5
    e7f8:	add	x0, sp, #0x40
    e7fc:	mov	x1, x23
    e800:	bl	4c80 <mpfr_set_prec@plt>
    e804:	add	x0, sp, #0x20
    e808:	mov	x1, x23
    e80c:	bl	4c80 <mpfr_set_prec@plt>
    e810:	mov	x0, sp
    e814:	mov	x1, x23
    e818:	bl	4c80 <mpfr_set_prec@plt>
    e81c:	add	x0, sp, #0x40
    e820:	mov	w1, wzr
    e824:	bl	4a80 <mpfr_const_pi@plt>
    e828:	add	x0, sp, #0x40
    e82c:	add	x1, sp, #0x40
    e830:	sub	x2, x29, #0x20
    e834:	mov	w3, wzr
    e838:	bl	49d0 <mpfr_mul_q@plt>
    e83c:	add	x0, sp, #0x20
    e840:	mov	x1, sp
    e844:	add	x2, sp, #0x40
    e848:	mov	w3, wzr
    e84c:	bl	5520 <mpfr_sin_cos@plt>
    e850:	ldr	x8, [sp, #16]
    e854:	ldr	x9, [x19]
    e858:	add	x26, x26, #0x1
    e85c:	mov	x0, sp
    e860:	add	x1, x26, x8
    e864:	add	x4, x9, x24
    e868:	mov	w3, #0x1                   	// #1
    e86c:	mov	w2, wzr
    e870:	bl	5450 <mpfr_can_round@plt>
    e874:	cbz	w0, e7e8 <mpc_rootofunity@@Base+0x428>
    e878:	ldr	x8, [sp, #48]
    e87c:	ldr	x9, [x22]
    e880:	add	x0, sp, #0x20
    e884:	mov	w3, #0x1                   	// #1
    e888:	add	x1, x26, x8
    e88c:	add	x4, x9, x25
    e890:	mov	w2, wzr
    e894:	bl	5450 <mpfr_can_round@plt>
    e898:	cbz	w0, e7e8 <mpc_rootofunity@@Base+0x428>
    e89c:	ldr	w3, [sp, #8]
    e8a0:	mov	x1, sp
    e8a4:	mov	x0, x19
    e8a8:	mov	w2, w21
    e8ac:	bl	51d0 <mpfr_set4@plt>
    e8b0:	ldr	w3, [sp, #40]
    e8b4:	mov	w19, w0
    e8b8:	add	x1, sp, #0x20
    e8bc:	mov	x0, x22
    e8c0:	mov	w2, w20
    e8c4:	bl	51d0 <mpfr_set4@plt>
    e8c8:	mov	w20, w0
    e8cc:	add	x0, sp, #0x40
    e8d0:	bl	4d60 <mpfr_clear@plt>
    e8d4:	add	x0, sp, #0x20
    e8d8:	bl	4d60 <mpfr_clear@plt>
    e8dc:	mov	x0, sp
    e8e0:	bl	4d60 <mpfr_clear@plt>
    e8e4:	sub	x0, x29, #0x20
    e8e8:	bl	4fb0 <__gmpq_clear@plt>
    e8ec:	cmp	w19, #0x0
    e8f0:	mov	w8, #0x2                   	// #2
    e8f4:	cset	w9, ne  // ne = any
    e8f8:	csel	w8, w8, w9, lt  // lt = tstop
    e8fc:	cmp	w20, #0x0
    e900:	cset	w9, ne  // ne = any
    e904:	lsl	w9, w9, #2
    e908:	mov	w10, #0x8                   	// #8
    e90c:	csel	w9, w10, w9, lt  // lt = tstop
    e910:	orr	w0, w9, w8
    e914:	ldp	x20, x19, [sp, #192]
    e918:	ldp	x22, x21, [sp, #176]
    e91c:	ldp	x24, x23, [sp, #160]
    e920:	ldp	x26, x25, [sp, #144]
    e924:	ldp	x29, x30, [sp, #128]
    e928:	add	sp, sp, #0xd0
    e92c:	ret
    e930:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    e934:	ldr	x8, [x8, #4008]
    e938:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    e93c:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    e940:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    e944:	ldr	x0, [x8]
    e948:	add	x1, x1, #0x3b0
    e94c:	add	x2, x2, #0x653
    e950:	add	x4, x4, #0x661
    e954:	mov	w3, #0x40                  	// #64
    e958:	b	ea34 <mpc_rootofunity@@Base+0x674>
    e95c:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    e960:	ldr	x8, [x8, #4008]
    e964:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    e968:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    e96c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    e970:	ldr	x0, [x8]
    e974:	add	x1, x1, #0x3b0
    e978:	add	x2, x2, #0x653
    e97c:	add	x4, x4, #0x668
    e980:	mov	w3, #0x46                  	// #70
    e984:	b	ea34 <mpc_rootofunity@@Base+0x674>
    e988:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    e98c:	ldr	x8, [x8, #4008]
    e990:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    e994:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    e998:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    e99c:	ldr	x0, [x8]
    e9a0:	add	x1, x1, #0x3b0
    e9a4:	add	x2, x2, #0x653
    e9a8:	add	x4, x4, #0x66f
    e9ac:	mov	w3, #0x4d                  	// #77
    e9b0:	b	ea34 <mpc_rootofunity@@Base+0x674>
    e9b4:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    e9b8:	ldr	x8, [x8, #4008]
    e9bc:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    e9c0:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    e9c4:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    e9c8:	ldr	x0, [x8]
    e9cc:	add	x1, x1, #0x3b0
    e9d0:	add	x2, x2, #0x653
    e9d4:	add	x4, x4, #0x680
    e9d8:	mov	w3, #0x56                  	// #86
    e9dc:	b	ea34 <mpc_rootofunity@@Base+0x674>
    e9e0:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    e9e4:	ldr	x8, [x8, #4008]
    e9e8:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    e9ec:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    e9f0:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    e9f4:	ldr	x0, [x8]
    e9f8:	add	x1, x1, #0x3b0
    e9fc:	add	x2, x2, #0x653
    ea00:	add	x4, x4, #0x6c1
    ea04:	mov	w3, #0x6f                  	// #111
    ea08:	b	ea34 <mpc_rootofunity@@Base+0x674>
    ea0c:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    ea10:	ldr	x8, [x8, #4008]
    ea14:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    ea18:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    ea1c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    ea20:	ldr	x0, [x8]
    ea24:	add	x1, x1, #0x3b0
    ea28:	add	x2, x2, #0x653
    ea2c:	add	x4, x4, #0x6e7
    ea30:	mov	w3, #0x86                  	// #134
    ea34:	bl	55a0 <fprintf@plt>
    ea38:	bl	5000 <abort@plt>

000000000000ea3c <mpc_urandom@@Base>:
    ea3c:	stp	x29, x30, [sp, #-48]!
    ea40:	str	x21, [sp, #16]
    ea44:	stp	x20, x19, [sp, #32]
    ea48:	mov	x29, sp
    ea4c:	mov	x19, x1
    ea50:	mov	x20, x0
    ea54:	bl	5500 <mpfr_urandomb@plt>
    ea58:	mov	w21, w0
    ea5c:	add	x0, x20, #0x20
    ea60:	mov	x1, x19
    ea64:	bl	5500 <mpfr_urandomb@plt>
    ea68:	cmp	w21, #0x0
    ea6c:	ldp	x20, x19, [sp, #32]
    ea70:	ldr	x21, [sp, #16]
    ea74:	cset	w8, ne  // ne = any
    ea78:	cmp	w0, #0x0
    ea7c:	cset	w9, ne  // ne = any
    ea80:	and	w0, w8, w9
    ea84:	ldp	x29, x30, [sp], #48
    ea88:	ret

000000000000ea8c <mpc_set@@Base>:
    ea8c:	stp	x29, x30, [sp, #-48]!
    ea90:	stp	x22, x21, [sp, #16]
    ea94:	stp	x20, x19, [sp, #32]
    ea98:	ldr	w3, [x1, #8]
    ea9c:	mov	w19, w2
    eaa0:	and	w2, w2, #0xf
    eaa4:	mov	x29, sp
    eaa8:	mov	x20, x1
    eaac:	mov	x21, x0
    eab0:	bl	51d0 <mpfr_set4@plt>
    eab4:	ldr	w3, [x20, #40]
    eab8:	mov	w22, w0
    eabc:	add	x0, x21, #0x20
    eac0:	add	x1, x20, #0x20
    eac4:	asr	w2, w19, #4
    eac8:	bl	51d0 <mpfr_set4@plt>
    eacc:	cmp	w22, #0x0
    ead0:	mov	w8, #0x2                   	// #2
    ead4:	cset	w9, ne  // ne = any
    ead8:	csel	w8, w8, w9, lt  // lt = tstop
    eadc:	cmp	w0, #0x0
    eae0:	cset	w9, ne  // ne = any
    eae4:	ldp	x20, x19, [sp, #32]
    eae8:	ldp	x22, x21, [sp, #16]
    eaec:	lsl	w9, w9, #2
    eaf0:	mov	w10, #0x8                   	// #8
    eaf4:	csel	w9, w10, w9, lt  // lt = tstop
    eaf8:	orr	w0, w9, w8
    eafc:	ldp	x29, x30, [sp], #48
    eb00:	ret

000000000000eb04 <mpc_set_prec@@Base>:
    eb04:	stp	x29, x30, [sp, #-32]!
    eb08:	stp	x20, x19, [sp, #16]
    eb0c:	mov	x29, sp
    eb10:	mov	x19, x1
    eb14:	mov	x20, x0
    eb18:	bl	4c80 <mpfr_set_prec@plt>
    eb1c:	add	x0, x20, #0x20
    eb20:	mov	x1, x19
    eb24:	ldp	x20, x19, [sp, #16]
    eb28:	ldp	x29, x30, [sp], #32
    eb2c:	b	4c80 <mpfr_set_prec@plt>

000000000000eb30 <mpc_set_str@@Base>:
    eb30:	sub	sp, sp, #0x30
    eb34:	mov	w4, w3
    eb38:	mov	w3, w2
    eb3c:	add	x2, sp, #0x8
    eb40:	stp	x29, x30, [sp, #16]
    eb44:	stp	x20, x19, [sp, #32]
    eb48:	add	x29, sp, #0x10
    eb4c:	mov	x19, x0
    eb50:	bl	4f00 <mpc_strtoc@plt>
    eb54:	cmn	w0, #0x1
    eb58:	b.eq	eb94 <mpc_set_str@@Base+0x64>  // b.none
    eb5c:	mov	w20, w0
    eb60:	bl	5170 <__ctype_b_loc@plt>
    eb64:	ldr	x9, [sp, #8]
    eb68:	ldr	x10, [x0]
    eb6c:	ldrb	w8, [x9]
    eb70:	ldrh	w10, [x10, x8, lsl #1]
    eb74:	tbz	w10, #13, eb90 <mpc_set_str@@Base+0x60>
    eb78:	add	x9, x9, #0x1
    eb7c:	str	x9, [sp, #8]
    eb80:	ldr	x10, [x0]
    eb84:	ldrb	w8, [x9], #1
    eb88:	ldrh	w10, [x10, x8, lsl #1]
    eb8c:	tbnz	w10, #13, eb7c <mpc_set_str@@Base+0x4c>
    eb90:	cbz	w8, eba8 <mpc_set_str@@Base+0x78>
    eb94:	mov	x0, x19
    eb98:	bl	4a40 <mpfr_set_nan@plt>
    eb9c:	add	x0, x19, #0x20
    eba0:	bl	4a40 <mpfr_set_nan@plt>
    eba4:	mov	w20, #0xffffffff            	// #-1
    eba8:	mov	w0, w20
    ebac:	ldp	x20, x19, [sp, #32]
    ebb0:	ldp	x29, x30, [sp, #16]
    ebb4:	add	sp, sp, #0x30
    ebb8:	ret

000000000000ebbc <mpc_set_fr@@Base>:
    ebbc:	stp	x29, x30, [sp, #-32]!
    ebc0:	and	w2, w2, #0xf
    ebc4:	str	x19, [sp, #16]
    ebc8:	mov	x29, sp
    ebcc:	mov	x19, x0
    ebd0:	bl	4e80 <mpfr_set@plt>
    ebd4:	mov	w8, #0x1                   	// #1
    ebd8:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    ebdc:	str	w8, [x19, #40]
    ebe0:	str	x9, [x19, #48]
    ebe4:	ldr	x19, [sp, #16]
    ebe8:	cmp	w0, #0x0
    ebec:	cset	w8, ne  // ne = any
    ebf0:	mov	w10, #0x2                   	// #2
    ebf4:	csel	w0, w10, w8, lt  // lt = tstop
    ebf8:	ldp	x29, x30, [sp], #32
    ebfc:	ret

000000000000ec00 <mpc_set_d@@Base>:
    ec00:	stp	x29, x30, [sp, #-32]!
    ec04:	and	w1, w1, #0xf
    ec08:	str	x19, [sp, #16]
    ec0c:	mov	x29, sp
    ec10:	mov	x19, x0
    ec14:	bl	4c30 <mpfr_set_d@plt>
    ec18:	mov	w8, #0x1                   	// #1
    ec1c:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    ec20:	str	w8, [x19, #40]
    ec24:	str	x9, [x19, #48]
    ec28:	ldr	x19, [sp, #16]
    ec2c:	cmp	w0, #0x0
    ec30:	cset	w8, ne  // ne = any
    ec34:	mov	w10, #0x2                   	// #2
    ec38:	csel	w0, w10, w8, lt  // lt = tstop
    ec3c:	ldp	x29, x30, [sp], #32
    ec40:	ret

000000000000ec44 <mpc_set_ld@@Base>:
    ec44:	stp	x29, x30, [sp, #-32]!
    ec48:	and	w1, w1, #0xf
    ec4c:	str	x19, [sp, #16]
    ec50:	mov	x29, sp
    ec54:	mov	x19, x0
    ec58:	bl	49b0 <mpfr_set_ld@plt>
    ec5c:	mov	w8, #0x1                   	// #1
    ec60:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    ec64:	str	w8, [x19, #40]
    ec68:	str	x9, [x19, #48]
    ec6c:	ldr	x19, [sp, #16]
    ec70:	cmp	w0, #0x0
    ec74:	cset	w8, ne  // ne = any
    ec78:	mov	w10, #0x2                   	// #2
    ec7c:	csel	w0, w10, w8, lt  // lt = tstop
    ec80:	ldp	x29, x30, [sp], #32
    ec84:	ret

000000000000ec88 <mpc_set_ui@@Base>:
    ec88:	stp	x29, x30, [sp, #-32]!
    ec8c:	and	w2, w2, #0xf
    ec90:	str	x19, [sp, #16]
    ec94:	mov	x29, sp
    ec98:	mov	x19, x0
    ec9c:	bl	5510 <mpfr_set_ui@plt>
    eca0:	mov	w8, #0x1                   	// #1
    eca4:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    eca8:	str	w8, [x19, #40]
    ecac:	str	x9, [x19, #48]
    ecb0:	ldr	x19, [sp, #16]
    ecb4:	cmp	w0, #0x0
    ecb8:	cset	w8, ne  // ne = any
    ecbc:	mov	w10, #0x2                   	// #2
    ecc0:	csel	w0, w10, w8, lt  // lt = tstop
    ecc4:	ldp	x29, x30, [sp], #32
    ecc8:	ret

000000000000eccc <mpc_set_si@@Base>:
    eccc:	stp	x29, x30, [sp, #-32]!
    ecd0:	and	w2, w2, #0xf
    ecd4:	str	x19, [sp, #16]
    ecd8:	mov	x29, sp
    ecdc:	mov	x19, x0
    ece0:	bl	5270 <mpfr_set_si@plt>
    ece4:	mov	w8, #0x1                   	// #1
    ece8:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    ecec:	str	w8, [x19, #40]
    ecf0:	str	x9, [x19, #48]
    ecf4:	ldr	x19, [sp, #16]
    ecf8:	cmp	w0, #0x0
    ecfc:	cset	w8, ne  // ne = any
    ed00:	mov	w10, #0x2                   	// #2
    ed04:	csel	w0, w10, w8, lt  // lt = tstop
    ed08:	ldp	x29, x30, [sp], #32
    ed0c:	ret

000000000000ed10 <mpc_set_z@@Base>:
    ed10:	stp	x29, x30, [sp, #-32]!
    ed14:	and	w2, w2, #0xf
    ed18:	str	x19, [sp, #16]
    ed1c:	mov	x29, sp
    ed20:	mov	x19, x0
    ed24:	bl	4ec0 <mpfr_set_z@plt>
    ed28:	mov	w8, #0x1                   	// #1
    ed2c:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    ed30:	str	w8, [x19, #40]
    ed34:	str	x9, [x19, #48]
    ed38:	ldr	x19, [sp, #16]
    ed3c:	cmp	w0, #0x0
    ed40:	cset	w8, ne  // ne = any
    ed44:	mov	w10, #0x2                   	// #2
    ed48:	csel	w0, w10, w8, lt  // lt = tstop
    ed4c:	ldp	x29, x30, [sp], #32
    ed50:	ret

000000000000ed54 <mpc_set_q@@Base>:
    ed54:	stp	x29, x30, [sp, #-32]!
    ed58:	and	w2, w2, #0xf
    ed5c:	str	x19, [sp, #16]
    ed60:	mov	x29, sp
    ed64:	mov	x19, x0
    ed68:	bl	5290 <mpfr_set_q@plt>
    ed6c:	mov	w8, #0x1                   	// #1
    ed70:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    ed74:	str	w8, [x19, #40]
    ed78:	str	x9, [x19, #48]
    ed7c:	ldr	x19, [sp, #16]
    ed80:	cmp	w0, #0x0
    ed84:	cset	w8, ne  // ne = any
    ed88:	mov	w10, #0x2                   	// #2
    ed8c:	csel	w0, w10, w8, lt  // lt = tstop
    ed90:	ldp	x29, x30, [sp], #32
    ed94:	ret

000000000000ed98 <mpc_set_f@@Base>:
    ed98:	stp	x29, x30, [sp, #-32]!
    ed9c:	and	w2, w2, #0xf
    eda0:	str	x19, [sp, #16]
    eda4:	mov	x29, sp
    eda8:	mov	x19, x0
    edac:	bl	4b60 <mpfr_set_f@plt>
    edb0:	mov	w8, #0x1                   	// #1
    edb4:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    edb8:	str	w8, [x19, #40]
    edbc:	str	x9, [x19, #48]
    edc0:	ldr	x19, [sp, #16]
    edc4:	cmp	w0, #0x0
    edc8:	cset	w8, ne  // ne = any
    edcc:	mov	w10, #0x2                   	// #2
    edd0:	csel	w0, w10, w8, lt  // lt = tstop
    edd4:	ldp	x29, x30, [sp], #32
    edd8:	ret

000000000000eddc <mpc_set_uj@@Base>:
    eddc:	stp	x29, x30, [sp, #-32]!
    ede0:	and	w2, w2, #0xf
    ede4:	str	x19, [sp, #16]
    ede8:	mov	x29, sp
    edec:	mov	x19, x0
    edf0:	bl	5400 <__gmpfr_set_uj@plt>
    edf4:	mov	w8, #0x1                   	// #1
    edf8:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    edfc:	str	w8, [x19, #40]
    ee00:	str	x9, [x19, #48]
    ee04:	ldr	x19, [sp, #16]
    ee08:	cmp	w0, #0x0
    ee0c:	cset	w8, ne  // ne = any
    ee10:	mov	w10, #0x2                   	// #2
    ee14:	csel	w0, w10, w8, lt  // lt = tstop
    ee18:	ldp	x29, x30, [sp], #32
    ee1c:	ret

000000000000ee20 <mpc_set_sj@@Base>:
    ee20:	stp	x29, x30, [sp, #-32]!
    ee24:	and	w2, w2, #0xf
    ee28:	str	x19, [sp, #16]
    ee2c:	mov	x29, sp
    ee30:	mov	x19, x0
    ee34:	bl	4d70 <__gmpfr_set_sj@plt>
    ee38:	mov	w8, #0x1                   	// #1
    ee3c:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    ee40:	str	w8, [x19, #40]
    ee44:	str	x9, [x19, #48]
    ee48:	ldr	x19, [sp, #16]
    ee4c:	cmp	w0, #0x0
    ee50:	cset	w8, ne  // ne = any
    ee54:	mov	w10, #0x2                   	// #2
    ee58:	csel	w0, w10, w8, lt  // lt = tstop
    ee5c:	ldp	x29, x30, [sp], #32
    ee60:	ret

000000000000ee64 <mpc_set_dc@@Base>:
    ee64:	b	4f90 <mpc_set_d_d@plt>

000000000000ee68 <mpc_set_ldc@@Base>:
    ee68:	b	4d50 <mpc_set_ld_ld@plt>

000000000000ee6c <mpc_set_nan@@Base>:
    ee6c:	stp	x29, x30, [sp, #-32]!
    ee70:	str	x19, [sp, #16]
    ee74:	mov	x29, sp
    ee78:	mov	x19, x0
    ee7c:	bl	4a40 <mpfr_set_nan@plt>
    ee80:	add	x0, x19, #0x20
    ee84:	ldr	x19, [sp, #16]
    ee88:	ldp	x29, x30, [sp], #32
    ee8c:	b	4a40 <mpfr_set_nan@plt>

000000000000ee90 <mpc_set_d_d@@Base>:
    ee90:	str	d8, [sp, #-48]!
    ee94:	stp	x20, x19, [sp, #32]
    ee98:	mov	w19, w1
    ee9c:	and	w1, w1, #0xf
    eea0:	stp	x29, x30, [sp, #8]
    eea4:	str	x21, [sp, #24]
    eea8:	mov	x29, sp
    eeac:	mov	v8.16b, v1.16b
    eeb0:	mov	x20, x0
    eeb4:	bl	4c30 <mpfr_set_d@plt>
    eeb8:	mov	w21, w0
    eebc:	add	x0, x20, #0x20
    eec0:	asr	w1, w19, #4
    eec4:	mov	v0.16b, v8.16b
    eec8:	bl	4c30 <mpfr_set_d@plt>
    eecc:	cmp	w21, #0x0
    eed0:	mov	w8, #0x2                   	// #2
    eed4:	cset	w9, ne  // ne = any
    eed8:	csel	w8, w8, w9, lt  // lt = tstop
    eedc:	cmp	w0, #0x0
    eee0:	cset	w9, ne  // ne = any
    eee4:	ldp	x20, x19, [sp, #32]
    eee8:	ldr	x21, [sp, #24]
    eeec:	ldp	x29, x30, [sp, #8]
    eef0:	lsl	w9, w9, #2
    eef4:	mov	w10, #0x8                   	// #8
    eef8:	csel	w9, w10, w9, lt  // lt = tstop
    eefc:	orr	w0, w9, w8
    ef00:	ldr	d8, [sp], #48
    ef04:	ret

000000000000ef08 <mpc_set_f_f@@Base>:
    ef08:	stp	x29, x30, [sp, #-48]!
    ef0c:	stp	x20, x19, [sp, #32]
    ef10:	mov	x20, x2
    ef14:	and	w2, w3, #0xf
    ef18:	stp	x22, x21, [sp, #16]
    ef1c:	mov	x29, sp
    ef20:	mov	w19, w3
    ef24:	mov	x21, x0
    ef28:	bl	4b60 <mpfr_set_f@plt>
    ef2c:	mov	w22, w0
    ef30:	add	x0, x21, #0x20
    ef34:	asr	w2, w19, #4
    ef38:	mov	x1, x20
    ef3c:	bl	4b60 <mpfr_set_f@plt>
    ef40:	cmp	w22, #0x0
    ef44:	mov	w8, #0x2                   	// #2
    ef48:	cset	w9, ne  // ne = any
    ef4c:	csel	w8, w8, w9, lt  // lt = tstop
    ef50:	cmp	w0, #0x0
    ef54:	cset	w9, ne  // ne = any
    ef58:	ldp	x20, x19, [sp, #32]
    ef5c:	ldp	x22, x21, [sp, #16]
    ef60:	lsl	w9, w9, #2
    ef64:	mov	w10, #0x8                   	// #8
    ef68:	csel	w9, w10, w9, lt  // lt = tstop
    ef6c:	orr	w0, w9, w8
    ef70:	ldp	x29, x30, [sp], #48
    ef74:	ret

000000000000ef78 <mpc_set_fr_fr@@Base>:
    ef78:	stp	x29, x30, [sp, #-48]!
    ef7c:	stp	x20, x19, [sp, #32]
    ef80:	mov	x20, x2
    ef84:	and	w2, w3, #0xf
    ef88:	stp	x22, x21, [sp, #16]
    ef8c:	mov	x29, sp
    ef90:	mov	w19, w3
    ef94:	mov	x21, x0
    ef98:	bl	4e80 <mpfr_set@plt>
    ef9c:	mov	w22, w0
    efa0:	add	x0, x21, #0x20
    efa4:	asr	w2, w19, #4
    efa8:	mov	x1, x20
    efac:	bl	4e80 <mpfr_set@plt>
    efb0:	cmp	w22, #0x0
    efb4:	mov	w8, #0x2                   	// #2
    efb8:	cset	w9, ne  // ne = any
    efbc:	csel	w8, w8, w9, lt  // lt = tstop
    efc0:	cmp	w0, #0x0
    efc4:	cset	w9, ne  // ne = any
    efc8:	ldp	x20, x19, [sp, #32]
    efcc:	ldp	x22, x21, [sp, #16]
    efd0:	lsl	w9, w9, #2
    efd4:	mov	w10, #0x8                   	// #8
    efd8:	csel	w9, w10, w9, lt  // lt = tstop
    efdc:	orr	w0, w9, w8
    efe0:	ldp	x29, x30, [sp], #48
    efe4:	ret

000000000000efe8 <mpc_set_ld_ld@@Base>:
    efe8:	sub	sp, sp, #0x40
    efec:	stp	x20, x19, [sp, #48]
    eff0:	mov	w19, w1
    eff4:	and	w1, w1, #0xf
    eff8:	stp	x29, x30, [sp, #16]
    effc:	str	x21, [sp, #32]
    f000:	add	x29, sp, #0x10
    f004:	str	q1, [sp]
    f008:	mov	x20, x0
    f00c:	bl	49b0 <mpfr_set_ld@plt>
    f010:	ldr	q0, [sp]
    f014:	mov	w21, w0
    f018:	add	x0, x20, #0x20
    f01c:	asr	w1, w19, #4
    f020:	bl	49b0 <mpfr_set_ld@plt>
    f024:	cmp	w21, #0x0
    f028:	mov	w8, #0x2                   	// #2
    f02c:	cset	w9, ne  // ne = any
    f030:	csel	w8, w8, w9, lt  // lt = tstop
    f034:	cmp	w0, #0x0
    f038:	cset	w9, ne  // ne = any
    f03c:	ldp	x20, x19, [sp, #48]
    f040:	ldr	x21, [sp, #32]
    f044:	ldp	x29, x30, [sp, #16]
    f048:	lsl	w9, w9, #2
    f04c:	mov	w10, #0x8                   	// #8
    f050:	csel	w9, w10, w9, lt  // lt = tstop
    f054:	orr	w0, w9, w8
    f058:	add	sp, sp, #0x40
    f05c:	ret

000000000000f060 <mpc_set_q_q@@Base>:
    f060:	stp	x29, x30, [sp, #-48]!
    f064:	stp	x20, x19, [sp, #32]
    f068:	mov	x20, x2
    f06c:	and	w2, w3, #0xf
    f070:	stp	x22, x21, [sp, #16]
    f074:	mov	x29, sp
    f078:	mov	w19, w3
    f07c:	mov	x21, x0
    f080:	bl	5290 <mpfr_set_q@plt>
    f084:	mov	w22, w0
    f088:	add	x0, x21, #0x20
    f08c:	asr	w2, w19, #4
    f090:	mov	x1, x20
    f094:	bl	5290 <mpfr_set_q@plt>
    f098:	cmp	w22, #0x0
    f09c:	mov	w8, #0x2                   	// #2
    f0a0:	cset	w9, ne  // ne = any
    f0a4:	csel	w8, w8, w9, lt  // lt = tstop
    f0a8:	cmp	w0, #0x0
    f0ac:	cset	w9, ne  // ne = any
    f0b0:	ldp	x20, x19, [sp, #32]
    f0b4:	ldp	x22, x21, [sp, #16]
    f0b8:	lsl	w9, w9, #2
    f0bc:	mov	w10, #0x8                   	// #8
    f0c0:	csel	w9, w10, w9, lt  // lt = tstop
    f0c4:	orr	w0, w9, w8
    f0c8:	ldp	x29, x30, [sp], #48
    f0cc:	ret

000000000000f0d0 <mpc_set_si_si@@Base>:
    f0d0:	stp	x29, x30, [sp, #-48]!
    f0d4:	stp	x20, x19, [sp, #32]
    f0d8:	mov	x20, x2
    f0dc:	and	w2, w3, #0xf
    f0e0:	stp	x22, x21, [sp, #16]
    f0e4:	mov	x29, sp
    f0e8:	mov	w19, w3
    f0ec:	mov	x21, x0
    f0f0:	bl	5270 <mpfr_set_si@plt>
    f0f4:	mov	w22, w0
    f0f8:	add	x0, x21, #0x20
    f0fc:	asr	w2, w19, #4
    f100:	mov	x1, x20
    f104:	bl	5270 <mpfr_set_si@plt>
    f108:	cmp	w22, #0x0
    f10c:	mov	w8, #0x2                   	// #2
    f110:	cset	w9, ne  // ne = any
    f114:	csel	w8, w8, w9, lt  // lt = tstop
    f118:	cmp	w0, #0x0
    f11c:	cset	w9, ne  // ne = any
    f120:	ldp	x20, x19, [sp, #32]
    f124:	ldp	x22, x21, [sp, #16]
    f128:	lsl	w9, w9, #2
    f12c:	mov	w10, #0x8                   	// #8
    f130:	csel	w9, w10, w9, lt  // lt = tstop
    f134:	orr	w0, w9, w8
    f138:	ldp	x29, x30, [sp], #48
    f13c:	ret

000000000000f140 <mpc_set_ui_ui@@Base>:
    f140:	stp	x29, x30, [sp, #-48]!
    f144:	stp	x20, x19, [sp, #32]
    f148:	mov	x20, x2
    f14c:	and	w2, w3, #0xf
    f150:	stp	x22, x21, [sp, #16]
    f154:	mov	x29, sp
    f158:	mov	w19, w3
    f15c:	mov	x21, x0
    f160:	bl	5510 <mpfr_set_ui@plt>
    f164:	mov	w22, w0
    f168:	add	x0, x21, #0x20
    f16c:	asr	w2, w19, #4
    f170:	mov	x1, x20
    f174:	bl	5510 <mpfr_set_ui@plt>
    f178:	cmp	w22, #0x0
    f17c:	mov	w8, #0x2                   	// #2
    f180:	cset	w9, ne  // ne = any
    f184:	csel	w8, w8, w9, lt  // lt = tstop
    f188:	cmp	w0, #0x0
    f18c:	cset	w9, ne  // ne = any
    f190:	ldp	x20, x19, [sp, #32]
    f194:	ldp	x22, x21, [sp, #16]
    f198:	lsl	w9, w9, #2
    f19c:	mov	w10, #0x8                   	// #8
    f1a0:	csel	w9, w10, w9, lt  // lt = tstop
    f1a4:	orr	w0, w9, w8
    f1a8:	ldp	x29, x30, [sp], #48
    f1ac:	ret

000000000000f1b0 <mpc_set_z_z@@Base>:
    f1b0:	stp	x29, x30, [sp, #-48]!
    f1b4:	stp	x20, x19, [sp, #32]
    f1b8:	mov	x20, x2
    f1bc:	and	w2, w3, #0xf
    f1c0:	stp	x22, x21, [sp, #16]
    f1c4:	mov	x29, sp
    f1c8:	mov	w19, w3
    f1cc:	mov	x21, x0
    f1d0:	bl	4ec0 <mpfr_set_z@plt>
    f1d4:	mov	w22, w0
    f1d8:	add	x0, x21, #0x20
    f1dc:	asr	w2, w19, #4
    f1e0:	mov	x1, x20
    f1e4:	bl	4ec0 <mpfr_set_z@plt>
    f1e8:	cmp	w22, #0x0
    f1ec:	mov	w8, #0x2                   	// #2
    f1f0:	cset	w9, ne  // ne = any
    f1f4:	csel	w8, w8, w9, lt  // lt = tstop
    f1f8:	cmp	w0, #0x0
    f1fc:	cset	w9, ne  // ne = any
    f200:	ldp	x20, x19, [sp, #32]
    f204:	ldp	x22, x21, [sp, #16]
    f208:	lsl	w9, w9, #2
    f20c:	mov	w10, #0x8                   	// #8
    f210:	csel	w9, w10, w9, lt  // lt = tstop
    f214:	orr	w0, w9, w8
    f218:	ldp	x29, x30, [sp], #48
    f21c:	ret

000000000000f220 <mpc_set_uj_uj@@Base>:
    f220:	stp	x29, x30, [sp, #-48]!
    f224:	stp	x20, x19, [sp, #32]
    f228:	mov	x20, x2
    f22c:	and	w2, w3, #0xf
    f230:	stp	x22, x21, [sp, #16]
    f234:	mov	x29, sp
    f238:	mov	w19, w3
    f23c:	mov	x21, x0
    f240:	bl	5400 <__gmpfr_set_uj@plt>
    f244:	mov	w22, w0
    f248:	add	x0, x21, #0x20
    f24c:	asr	w2, w19, #4
    f250:	mov	x1, x20
    f254:	bl	5400 <__gmpfr_set_uj@plt>
    f258:	cmp	w22, #0x0
    f25c:	mov	w8, #0x2                   	// #2
    f260:	cset	w9, ne  // ne = any
    f264:	csel	w8, w8, w9, lt  // lt = tstop
    f268:	cmp	w0, #0x0
    f26c:	cset	w9, ne  // ne = any
    f270:	ldp	x20, x19, [sp, #32]
    f274:	ldp	x22, x21, [sp, #16]
    f278:	lsl	w9, w9, #2
    f27c:	mov	w10, #0x8                   	// #8
    f280:	csel	w9, w10, w9, lt  // lt = tstop
    f284:	orr	w0, w9, w8
    f288:	ldp	x29, x30, [sp], #48
    f28c:	ret

000000000000f290 <mpc_set_sj_sj@@Base>:
    f290:	stp	x29, x30, [sp, #-48]!
    f294:	stp	x20, x19, [sp, #32]
    f298:	mov	x20, x2
    f29c:	and	w2, w3, #0xf
    f2a0:	stp	x22, x21, [sp, #16]
    f2a4:	mov	x29, sp
    f2a8:	mov	w19, w3
    f2ac:	mov	x21, x0
    f2b0:	bl	4d70 <__gmpfr_set_sj@plt>
    f2b4:	mov	w22, w0
    f2b8:	add	x0, x21, #0x20
    f2bc:	asr	w2, w19, #4
    f2c0:	mov	x1, x20
    f2c4:	bl	4d70 <__gmpfr_set_sj@plt>
    f2c8:	cmp	w22, #0x0
    f2cc:	mov	w8, #0x2                   	// #2
    f2d0:	cset	w9, ne  // ne = any
    f2d4:	csel	w8, w8, w9, lt  // lt = tstop
    f2d8:	cmp	w0, #0x0
    f2dc:	cset	w9, ne  // ne = any
    f2e0:	ldp	x20, x19, [sp, #32]
    f2e4:	ldp	x22, x21, [sp, #16]
    f2e8:	lsl	w9, w9, #2
    f2ec:	mov	w10, #0x8                   	// #8
    f2f0:	csel	w9, w10, w9, lt  // lt = tstop
    f2f4:	orr	w0, w9, w8
    f2f8:	ldp	x29, x30, [sp], #48
    f2fc:	ret

000000000000f300 <mpc_sin@@Base>:
    f300:	stp	x29, x30, [sp, #-16]!
    f304:	mov	w3, w2
    f308:	mov	x2, x1
    f30c:	mov	x1, xzr
    f310:	mov	w4, wzr
    f314:	mov	x29, sp
    f318:	bl	5140 <mpc_sin_cos@plt>
    f31c:	and	w0, w0, #0xf
    f320:	ldp	x29, x30, [sp], #16
    f324:	ret

000000000000f328 <mpc_fix_inf@@Base>:
    f328:	stp	x29, x30, [sp, #-32]!
    f32c:	stp	x20, x19, [sp, #16]
    f330:	ldr	x8, [x0, #16]
    f334:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    f338:	mov	x29, sp
    f33c:	cmp	x8, x9
    f340:	b.ne	f3c8 <mpc_fix_inf@@Base+0xa0>  // b.any
    f344:	mov	x19, x0
    f348:	ldr	w0, [x0, #8]
    f34c:	cmp	w1, #0x1
    f350:	b.ne	f368 <mpc_fix_inf@@Base+0x40>  // b.any
    f354:	add	x20, x19, #0x8
    f358:	tbnz	w0, #31, f378 <mpc_fix_inf@@Base+0x50>
    f35c:	mov	x0, x19
    f360:	bl	4bb0 <mpfr_nextbelow@plt>
    f364:	b	f380 <mpc_fix_inf@@Base+0x58>
    f368:	cmp	w1, #0x2
    f36c:	b.ne	f3b8 <mpc_fix_inf@@Base+0x90>  // b.any
    f370:	tbz	w0, #31, f3b8 <mpc_fix_inf@@Base+0x90>
    f374:	add	x20, x19, #0x8
    f378:	mov	x0, x19
    f37c:	bl	4e00 <mpfr_nextabove@plt>
    f380:	ldr	x8, [x19, #16]
    f384:	mov	x9, #0x2                   	// #2
    f388:	movk	x9, #0x8000, lsl #48
    f38c:	cmp	x8, x9
    f390:	b.gt	f3a4 <mpc_fix_inf@@Base+0x7c>
    f394:	b.ne	f39c <mpc_fix_inf@@Base+0x74>  // b.any
    f398:	bl	4b00 <mpfr_set_erangeflag@plt>
    f39c:	mov	w0, wzr
    f3a0:	b	f3ac <mpc_fix_inf@@Base+0x84>
    f3a4:	ldr	w8, [x20]
    f3a8:	neg	w0, w8
    f3ac:	ldp	x20, x19, [sp, #16]
    f3b0:	ldp	x29, x30, [sp], #32
    f3b4:	ret
    f3b8:	cmp	w1, #0x3
    f3bc:	b.ne	f3ac <mpc_fix_inf@@Base+0x84>  // b.any
    f3c0:	tbz	w0, #31, f354 <mpc_fix_inf@@Base+0x2c>
    f3c4:	b	f3ac <mpc_fix_inf@@Base+0x84>
    f3c8:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
    f3cc:	ldr	x8, [x8, #4008]
    f3d0:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    f3d4:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    f3d8:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
    f3dc:	ldr	x0, [x8]
    f3e0:	add	x1, x1, #0x3b0
    f3e4:	add	x2, x2, #0x70c
    f3e8:	add	x4, x4, #0x716
    f3ec:	mov	w3, #0x115                 	// #277
    f3f0:	bl	55a0 <fprintf@plt>
    f3f4:	bl	5000 <abort@plt>

000000000000f3f8 <mpc_fix_zero@@Base>:
    f3f8:	stp	x29, x30, [sp, #-16]!
    f3fc:	ldr	w8, [x0, #8]
    f400:	cmp	w1, #0x3
    f404:	mov	x29, sp
    f408:	b.ne	f41c <mpc_fix_zero@@Base+0x24>  // b.any
    f40c:	tbz	w8, #31, f41c <mpc_fix_zero@@Base+0x24>
    f410:	bl	4bb0 <mpfr_nextbelow@plt>
    f414:	mov	w0, #0xffffffff            	// #-1
    f418:	b	f444 <mpc_fix_zero@@Base+0x4c>
    f41c:	cmp	w1, #0x2
    f420:	b.ne	f438 <mpc_fix_zero@@Base+0x40>  // b.any
    f424:	tbnz	w8, #31, f438 <mpc_fix_zero@@Base+0x40>
    f428:	tbnz	w8, #31, f410 <mpc_fix_zero@@Base+0x18>
    f42c:	bl	4e00 <mpfr_nextabove@plt>
    f430:	mov	w0, #0x1                   	// #1
    f434:	b	f444 <mpc_fix_zero@@Base+0x4c>
    f438:	cmp	w8, #0x0
    f43c:	mov	w8, #0xffffffff            	// #-1
    f440:	cneg	w0, w8, lt  // lt = tstop
    f444:	ldp	x29, x30, [sp], #16
    f448:	ret

000000000000f44c <mpc_sin_cos@@Base>:
    f44c:	sub	sp, sp, #0x160
    f450:	stp	x22, x21, [sp, #320]
    f454:	mov	x21, x0
    f458:	mov	x0, x2
    f45c:	stp	x29, x30, [sp, #256]
    f460:	stp	x28, x27, [sp, #272]
    f464:	stp	x26, x25, [sp, #288]
    f468:	stp	x24, x23, [sp, #304]
    f46c:	stp	x20, x19, [sp, #336]
    f470:	add	x29, sp, #0x100
    f474:	mov	w25, w4
    f478:	mov	w27, w3
    f47c:	mov	x23, x2
    f480:	mov	x19, x1
    f484:	bl	54d0 <mpfr_number_p@plt>
    f488:	cbz	w0, f4bc <mpc_sin_cos@@Base+0x70>
    f48c:	add	x24, x23, #0x20
    f490:	mov	x0, x24
    f494:	bl	54d0 <mpfr_number_p@plt>
    f498:	cbz	w0, f4bc <mpc_sin_cos@@Base+0x70>
    f49c:	ldr	x8, [x23, #48]
    f4a0:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    f4a4:	cmp	x8, x10
    f4a8:	b.ne	f584 <mpc_sin_cos@@Base+0x138>  // b.any
    f4ac:	ldr	w24, [x23, #40]
    f4b0:	cbz	x21, f680 <mpc_sin_cos@@Base+0x234>
    f4b4:	ldr	x1, [x21]
    f4b8:	b	f684 <mpc_sin_cos@@Base+0x238>
    f4bc:	cmp	x21, x23
    f4c0:	cset	w8, eq  // eq = none
    f4c4:	cmp	x19, x23
    f4c8:	cset	w9, eq  // eq = none
    f4cc:	orr	w24, w8, w9
    f4d0:	cmp	w24, #0x1
    f4d4:	b.ne	f4fc <mpc_sin_cos@@Base+0xb0>  // b.any
    f4d8:	ldr	x1, [x23]
    f4dc:	ldr	x2, [x23, #32]
    f4e0:	sub	x0, x29, #0x50
    f4e4:	bl	53c0 <mpc_init3@plt>
    f4e8:	sub	x0, x29, #0x50
    f4ec:	mov	x1, x23
    f4f0:	mov	w2, wzr
    f4f4:	bl	5580 <mpc_set@plt>
    f4f8:	b	f50c <mpc_sin_cos@@Base+0xc0>
    f4fc:	ldp	q1, q0, [x23, #32]
    f500:	ldp	q3, q2, [x23]
    f504:	stp	q1, q0, [x29, #-48]
    f508:	stp	q3, q2, [x29, #-80]
    f50c:	mov	x23, #0x2                   	// #2
    f510:	movk	x23, #0x8000, lsl #48
    f514:	cbz	x21, fcb8 <mpc_sin_cos@@Base+0x86c>
    f518:	ldur	x8, [x29, #-64]
    f51c:	cmp	x8, x23
    f520:	b.eq	f530 <mpc_sin_cos@@Base+0xe4>  // b.none
    f524:	ldur	x9, [x29, #-32]
    f528:	cmp	x9, x23
    f52c:	b.ne	f628 <mpc_sin_cos@@Base+0x1dc>  // b.any
    f530:	sub	x1, x29, #0x50
    f534:	mov	x0, x21
    f538:	mov	w2, w27
    f53c:	bl	5580 <mpc_set@plt>
    f540:	ldur	x8, [x29, #-32]
    f544:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f548:	cmp	x8, x9
    f54c:	b.eq	fcb8 <mpc_sin_cos@@Base+0x86c>  // b.none
    f550:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    f554:	cmp	x8, x9
    f558:	b.eq	fcb8 <mpc_sin_cos@@Base+0x86c>  // b.none
    f55c:	mov	x9, #0x2                   	// #2
    f560:	movk	x9, #0x8000, lsl #48
    f564:	cmp	x8, x9
    f568:	b.ne	f674 <mpc_sin_cos@@Base+0x228>  // b.any
    f56c:	ldur	x8, [x29, #-64]
    f570:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f574:	cmp	x8, x9
    f578:	b.eq	fcb8 <mpc_sin_cos@@Base+0x86c>  // b.none
    f57c:	mov	x0, x21
    f580:	b	f678 <mpc_sin_cos@@Base+0x22c>
    f584:	ldr	x9, [x23, #16]
    f588:	cmp	x9, x10
    f58c:	b.ne	f5d0 <mpc_sin_cos@@Base+0x184>  // b.any
    f590:	cmp	x21, x23
    f594:	cset	w8, eq  // eq = none
    f598:	cmp	x19, x23
    f59c:	cset	w9, eq  // eq = none
    f5a0:	orr	w22, w8, w9
    f5a4:	cmp	w22, #0x1
    f5a8:	b.ne	f784 <mpc_sin_cos@@Base+0x338>  // b.any
    f5ac:	ldr	x1, [x23]
    f5b0:	ldr	x2, [x23, #32]
    f5b4:	sub	x0, x29, #0x50
    f5b8:	bl	53c0 <mpc_init3@plt>
    f5bc:	sub	x0, x29, #0x50
    f5c0:	mov	x1, x23
    f5c4:	mov	w2, wzr
    f5c8:	bl	5580 <mpc_set@plt>
    f5cc:	b	f794 <mpc_sin_cos@@Base+0x348>
    f5d0:	cbz	x21, f814 <mpc_sin_cos@@Base+0x3c8>
    f5d4:	ldr	x10, [x21]
    f5d8:	ldr	x11, [x21, #32]
    f5dc:	ldr	x13, [x23]
    f5e0:	ldr	x14, [x23, #32]
    f5e4:	mov	w12, #0x2                   	// #2
    f5e8:	cmp	x10, x11
    f5ec:	csel	x10, x10, x11, gt
    f5f0:	cmp	x10, #0x2
    f5f4:	csel	x26, x10, x12, gt
    f5f8:	cmp	x13, x14
    f5fc:	csel	x10, x13, x14, gt
    f600:	cmp	x10, x26
    f604:	b.gt	f818 <mpc_sin_cos@@Base+0x3cc>
    f608:	cmp	x9, x8
    f60c:	csel	x8, x8, x9, lt  // lt = tstop
    f610:	tbz	x8, #63, f818 <mpc_sin_cos@@Base+0x3cc>
    f614:	mov	w9, #0x3                   	// #3
    f618:	sub	x8, x9, x8, lsl #1
    f61c:	cmp	x26, x8
    f620:	csel	x26, x8, x26, lt  // lt = tstop
    f624:	b	f818 <mpc_sin_cos@@Base+0x3cc>
    f628:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f62c:	cmp	x8, x9
    f630:	b.eq	fc48 <mpc_sin_cos@@Base+0x7fc>  // b.none
    f634:	mov	x20, #0x8000000000000003    	// #-9223372036854775805
    f638:	cmp	x8, x20
    f63c:	b.ne	fc5c <mpc_sin_cos@@Base+0x810>  // b.any
    f640:	mov	x0, x21
    f644:	bl	4a40 <mpfr_set_nan@plt>
    f648:	ldur	x8, [x29, #-32]
    f64c:	orr	x8, x8, #0x2
    f650:	cmp	x8, x20
    f654:	b.ne	f674 <mpc_sin_cos@@Base+0x228>  // b.any
    f658:	ldur	w3, [x29, #-40]
    f65c:	sub	x8, x29, #0x50
    f660:	add	x1, x8, #0x20
    f664:	add	x0, x21, #0x20
    f668:	asr	w2, w27, #4
    f66c:	bl	51d0 <mpfr_set4@plt>
    f670:	b	fcb8 <mpc_sin_cos@@Base+0x86c>
    f674:	add	x0, x21, #0x20
    f678:	bl	4a40 <mpfr_set_nan@plt>
    f67c:	b	fcb8 <mpc_sin_cos@@Base+0x86c>
    f680:	mov	w1, #0x2                   	// #2
    f684:	sub	x0, x29, #0x70
    f688:	bl	5440 <mpfr_init2@plt>
    f68c:	cbz	x19, f698 <mpc_sin_cos@@Base+0x24c>
    f690:	ldr	x1, [x19]
    f694:	b	f69c <mpc_sin_cos@@Base+0x250>
    f698:	mov	w1, #0x2                   	// #2
    f69c:	add	x0, sp, #0x70
    f6a0:	bl	5440 <mpfr_init2@plt>
    f6a4:	and	w2, w27, #0xf
    f6a8:	sub	x0, x29, #0x70
    f6ac:	mov	x1, x23
    f6b0:	bl	5080 <mpfr_sin@plt>
    f6b4:	mov	w22, w0
    f6b8:	and	w2, w25, #0xf
    f6bc:	add	x0, sp, #0x70
    f6c0:	mov	x1, x23
    f6c4:	bl	5050 <mpfr_cos@plt>
    f6c8:	mov	w20, w0
    f6cc:	cbz	x21, f758 <mpc_sin_cos@@Base+0x30c>
    f6d0:	ldur	w3, [x29, #-104]
    f6d4:	cmp	w24, #0x0
    f6d8:	sub	x1, x29, #0x70
    f6dc:	mov	x0, x21
    f6e0:	mov	w2, wzr
    f6e4:	cset	w23, ge  // ge = tcont
    f6e8:	bl	51d0 <mpfr_set4@plt>
    f6ec:	ldr	w8, [sp, #120]
    f6f0:	mov	w9, #0xffffffff            	// #-1
    f6f4:	add	x0, x21, #0x20
    f6f8:	cmp	w8, #0x0
    f6fc:	cset	w8, lt  // lt = tstop
    f700:	orr	w10, w8, w23
    f704:	tst	w8, w23
    f708:	cneg	w8, w9, eq  // eq = none
    f70c:	cmp	w10, #0x0
    f710:	csinv	w1, w8, wzr, ne  // ne = any
    f714:	bl	4d10 <mpfr_set_zero@plt>
    f718:	cbz	x19, f760 <mpc_sin_cos@@Base+0x314>
    f71c:	ldr	w3, [sp, #120]
    f720:	add	x1, sp, #0x70
    f724:	mov	x0, x19
    f728:	mov	w2, wzr
    f72c:	bl	51d0 <mpfr_set4@plt>
    f730:	ldur	w8, [x29, #-104]
    f734:	mov	w9, #0xffffffff            	// #-1
    f738:	add	x0, x19, #0x20
    f73c:	orr	w10, w8, w24
    f740:	cmp	w10, #0x0
    f744:	cneg	w9, w9, lt  // lt = tstop
    f748:	tst	w8, w24
    f74c:	csinv	w1, w9, wzr, ge  // ge = tcont
    f750:	bl	4d10 <mpfr_set_zero@plt>
    f754:	b	f764 <mpc_sin_cos@@Base+0x318>
    f758:	mov	w22, wzr
    f75c:	cbnz	x19, f71c <mpc_sin_cos@@Base+0x2d0>
    f760:	mov	w20, wzr
    f764:	sub	x0, x29, #0x70
    f768:	bl	4d60 <mpfr_clear@plt>
    f76c:	add	x0, sp, #0x70
    f770:	bl	4d60 <mpfr_clear@plt>
    f774:	cmp	w22, #0x0
    f778:	mov	w8, #0x2                   	// #2
    f77c:	cset	w9, ne  // ne = any
    f780:	b	fb50 <mpc_sin_cos@@Base+0x704>
    f784:	ldp	q1, q0, [x23, #32]
    f788:	ldp	q3, q2, [x23]
    f78c:	stp	q1, q0, [x29, #-48]
    f790:	stp	q3, q2, [x29, #-80]
    f794:	cbz	x21, f7c4 <mpc_sin_cos@@Base+0x378>
    f798:	ldur	w3, [x29, #-72]
    f79c:	sub	x1, x29, #0x50
    f7a0:	mov	x0, x21
    f7a4:	mov	w2, wzr
    f7a8:	sub	x20, x29, #0x50
    f7ac:	bl	51d0 <mpfr_set4@plt>
    f7b0:	add	x0, x21, #0x20
    f7b4:	add	x1, x20, #0x20
    f7b8:	asr	w2, w27, #4
    f7bc:	bl	4f80 <mpfr_sinh@plt>
    f7c0:	mov	w21, w0
    f7c4:	cbz	x19, fb30 <mpc_sin_cos@@Base+0x6e4>
    f7c8:	sub	x8, x29, #0x50
    f7cc:	add	x1, x8, #0x20
    f7d0:	and	w2, w25, #0xf
    f7d4:	mov	x0, x19
    f7d8:	bl	4a20 <mpfr_cosh@plt>
    f7dc:	mov	w8, #0x1                   	// #1
    f7e0:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f7e4:	str	w8, [x19, #40]
    f7e8:	str	x9, [x19, #48]
    f7ec:	ldur	w8, [x29, #-72]
    f7f0:	ldur	w9, [x29, #-40]
    f7f4:	mov	w20, w0
    f7f8:	eor	w8, w9, w8
    f7fc:	tbnz	w8, #31, fb34 <mpc_sin_cos@@Base+0x6e8>
    f800:	add	x0, x19, #0x20
    f804:	mov	x1, x0
    f808:	mov	w2, wzr
    f80c:	bl	4b80 <mpfr_neg@plt>
    f810:	b	fb34 <mpc_sin_cos@@Base+0x6e8>
    f814:	mov	w26, #0x2                   	// #2
    f818:	cbz	x19, f834 <mpc_sin_cos@@Base+0x3e8>
    f81c:	ldr	x8, [x19]
    f820:	ldr	x9, [x19, #32]
    f824:	cmp	x8, x9
    f828:	csel	x8, x8, x9, gt
    f82c:	cmp	x26, x8
    f830:	csel	x26, x26, x8, gt
    f834:	sub	x0, x29, #0x50
    f838:	mov	w1, #0x2                   	// #2
    f83c:	bl	5440 <mpfr_init2@plt>
    f840:	sub	x0, x29, #0x70
    f844:	mov	w1, #0x2                   	// #2
    f848:	bl	5440 <mpfr_init2@plt>
    f84c:	add	x0, sp, #0x70
    f850:	mov	w1, #0x2                   	// #2
    f854:	bl	5440 <mpfr_init2@plt>
    f858:	add	x0, sp, #0x50
    f85c:	mov	w1, #0x2                   	// #2
    f860:	bl	5440 <mpfr_init2@plt>
    f864:	add	x0, sp, #0x30
    f868:	mov	w1, #0x2                   	// #2
    f86c:	bl	5440 <mpfr_init2@plt>
    f870:	add	x0, sp, #0x10
    f874:	mov	w1, #0x2                   	// #2
    f878:	bl	5440 <mpfr_init2@plt>
    f87c:	and	w8, w27, #0xf
    f880:	stp	w27, w8, [sp]
    f884:	tst	w27, #0xf
    f888:	and	w8, w25, #0xf
    f88c:	str	w8, [sp, #8]
    f890:	mov	w8, w25
    f894:	cset	w25, eq  // eq = none
    f898:	cmp	w27, #0x10
    f89c:	cset	w27, cc  // cc = lo, ul, last
    f8a0:	tst	w8, #0xf
    f8a4:	cset	w20, eq  // eq = none
    f8a8:	cmp	w8, #0x10
    f8ac:	mov	w28, wzr
    f8b0:	cset	w22, cc  // cc = lo, ul, last
    f8b4:	str	w8, [sp, #12]
    f8b8:	cmp	w28, #0x1
    f8bc:	add	w28, w28, #0x1
    f8c0:	b.hi	f8d4 <mpc_sin_cos@@Base+0x488>  // b.pmore
    f8c4:	mov	x0, x26
    f8c8:	bl	4d20 <mpc_ceil_log2@plt>
    f8cc:	add	x8, x0, #0x5
    f8d0:	b	f8e0 <mpc_sin_cos@@Base+0x494>
    f8d4:	cmp	x26, #0x0
    f8d8:	cinc	x8, x26, lt  // lt = tstop
    f8dc:	asr	x8, x8, #1
    f8e0:	add	x26, x8, x26
    f8e4:	sub	x0, x29, #0x50
    f8e8:	mov	x1, x26
    f8ec:	bl	4c80 <mpfr_set_prec@plt>
    f8f0:	sub	x0, x29, #0x70
    f8f4:	mov	x1, x26
    f8f8:	bl	4c80 <mpfr_set_prec@plt>
    f8fc:	add	x0, sp, #0x70
    f900:	mov	x1, x26
    f904:	bl	4c80 <mpfr_set_prec@plt>
    f908:	add	x0, sp, #0x50
    f90c:	mov	x1, x26
    f910:	bl	4c80 <mpfr_set_prec@plt>
    f914:	add	x0, sp, #0x30
    f918:	mov	x1, x26
    f91c:	bl	4c80 <mpfr_set_prec@plt>
    f920:	add	x0, sp, #0x10
    f924:	mov	x1, x26
    f928:	bl	4c80 <mpfr_set_prec@plt>
    f92c:	sub	x0, x29, #0x50
    f930:	sub	x1, x29, #0x70
    f934:	mov	x2, x23
    f938:	mov	w3, wzr
    f93c:	bl	5520 <mpfr_sin_cos@plt>
    f940:	add	x0, sp, #0x70
    f944:	add	x1, sp, #0x50
    f948:	mov	x2, x24
    f94c:	mov	w3, wzr
    f950:	bl	4be0 <mpfr_sinh_cosh@plt>
    f954:	cbz	x21, f9e4 <mpc_sin_cos@@Base+0x598>
    f958:	add	x0, sp, #0x30
    f95c:	sub	x1, x29, #0x50
    f960:	add	x2, sp, #0x50
    f964:	mov	w3, wzr
    f968:	bl	4b70 <mpfr_mul@plt>
    f96c:	add	x0, sp, #0x30
    f970:	bl	54d0 <mpfr_number_p@plt>
    f974:	cbz	w0, f998 <mpc_sin_cos@@Base+0x54c>
    f978:	ldr	x8, [x21]
    f97c:	sub	x1, x26, #0x2
    f980:	add	x0, sp, #0x30
    f984:	mov	w3, #0x1                   	// #1
    f988:	add	x4, x8, x25
    f98c:	mov	w2, wzr
    f990:	bl	5450 <mpfr_can_round@plt>
    f994:	cbz	w0, f8b8 <mpc_sin_cos@@Base+0x46c>
    f998:	add	x0, sp, #0x10
    f99c:	sub	x1, x29, #0x70
    f9a0:	add	x2, sp, #0x70
    f9a4:	mov	w3, wzr
    f9a8:	bl	4b70 <mpfr_mul@plt>
    f9ac:	add	x0, sp, #0x10
    f9b0:	bl	54d0 <mpfr_number_p@plt>
    f9b4:	cbz	w0, f9e4 <mpc_sin_cos@@Base+0x598>
    f9b8:	ldr	x8, [x21, #32]
    f9bc:	sub	x1, x26, #0x2
    f9c0:	add	x0, sp, #0x10
    f9c4:	mov	w3, #0x1                   	// #1
    f9c8:	add	x4, x8, x27
    f9cc:	mov	w2, wzr
    f9d0:	bl	5450 <mpfr_can_round@plt>
    f9d4:	cmp	w0, #0x0
    f9d8:	cset	w8, ne  // ne = any
    f9dc:	cbnz	x19, f9ec <mpc_sin_cos@@Base+0x5a0>
    f9e0:	b	fa84 <mpc_sin_cos@@Base+0x638>
    f9e4:	mov	w8, #0x1                   	// #1
    f9e8:	cbz	x19, fa84 <mpc_sin_cos@@Base+0x638>
    f9ec:	cbz	w8, fa84 <mpc_sin_cos@@Base+0x638>
    f9f0:	sub	x0, x29, #0x70
    f9f4:	sub	x1, x29, #0x70
    f9f8:	add	x2, sp, #0x50
    f9fc:	mov	w3, wzr
    fa00:	bl	4b70 <mpfr_mul@plt>
    fa04:	sub	x0, x29, #0x70
    fa08:	bl	54d0 <mpfr_number_p@plt>
    fa0c:	cbz	w0, fa30 <mpc_sin_cos@@Base+0x5e4>
    fa10:	ldr	x8, [x19]
    fa14:	sub	x1, x26, #0x2
    fa18:	sub	x0, x29, #0x70
    fa1c:	mov	w3, #0x1                   	// #1
    fa20:	add	x4, x8, x20
    fa24:	mov	w2, wzr
    fa28:	bl	5450 <mpfr_can_round@plt>
    fa2c:	cbz	w0, f8b8 <mpc_sin_cos@@Base+0x46c>
    fa30:	sub	x0, x29, #0x50
    fa34:	sub	x1, x29, #0x50
    fa38:	add	x2, sp, #0x70
    fa3c:	mov	w3, wzr
    fa40:	bl	4b70 <mpfr_mul@plt>
    fa44:	sub	x0, x29, #0x50
    fa48:	sub	x1, x29, #0x50
    fa4c:	mov	w2, wzr
    fa50:	bl	4b80 <mpfr_neg@plt>
    fa54:	sub	x0, x29, #0x50
    fa58:	bl	54d0 <mpfr_number_p@plt>
    fa5c:	cbz	w0, fa88 <mpc_sin_cos@@Base+0x63c>
    fa60:	ldr	x8, [x19, #32]
    fa64:	sub	x1, x26, #0x2
    fa68:	sub	x0, x29, #0x50
    fa6c:	mov	w3, #0x1                   	// #1
    fa70:	add	x4, x8, x22
    fa74:	mov	w2, wzr
    fa78:	bl	5450 <mpfr_can_round@plt>
    fa7c:	cbz	w0, f8b8 <mpc_sin_cos@@Base+0x46c>
    fa80:	b	fa88 <mpc_sin_cos@@Base+0x63c>
    fa84:	cbz	w8, f8b8 <mpc_sin_cos@@Base+0x46c>
    fa88:	cbz	x21, fb70 <mpc_sin_cos@@Base+0x724>
    fa8c:	ldr	w22, [sp, #4]
    fa90:	ldr	w3, [sp, #56]
    fa94:	add	x1, sp, #0x30
    fa98:	mov	x0, x21
    fa9c:	mov	w2, w22
    faa0:	bl	51d0 <mpfr_set4@plt>
    faa4:	ldr	x8, [sp, #64]
    faa8:	mov	x20, #0x8000000000000003    	// #-9223372036854775805
    faac:	cmp	x8, x20
    fab0:	b.ne	fac0 <mpc_sin_cos@@Base+0x674>  // b.any
    fab4:	mov	x0, x21
    fab8:	mov	w1, w22
    fabc:	bl	4dd0 <mpc_fix_inf@plt>
    fac0:	ldr	w8, [sp]
    fac4:	ldr	w3, [sp, #24]
    fac8:	ldp	w22, w25, [sp, #8]
    facc:	add	x24, x21, #0x20
    fad0:	asr	w21, w8, #4
    fad4:	mov	w23, w0
    fad8:	add	x1, sp, #0x10
    fadc:	mov	x0, x24
    fae0:	mov	w2, w21
    fae4:	bl	51d0 <mpfr_set4@plt>
    fae8:	ldr	x8, [sp, #32]
    faec:	cmp	x8, x20
    faf0:	b.ne	fb00 <mpc_sin_cos@@Base+0x6b4>  // b.any
    faf4:	mov	x0, x24
    faf8:	mov	w1, w21
    fafc:	bl	4dd0 <mpc_fix_inf@plt>
    fb00:	cmp	w23, #0x0
    fb04:	mov	w8, #0x2                   	// #2
    fb08:	cset	w9, ne  // ne = any
    fb0c:	csel	w8, w8, w9, lt  // lt = tstop
    fb10:	cmp	w0, #0x0
    fb14:	cset	w9, ne  // ne = any
    fb18:	lsl	w9, w9, #2
    fb1c:	mov	w10, #0x8                   	// #8
    fb20:	csel	w9, w10, w9, lt  // lt = tstop
    fb24:	orr	w20, w9, w8
    fb28:	cbnz	x19, fb7c <mpc_sin_cos@@Base+0x730>
    fb2c:	b	fc10 <mpc_sin_cos@@Base+0x7c4>
    fb30:	mov	w20, wzr
    fb34:	cbz	w22, fb40 <mpc_sin_cos@@Base+0x6f4>
    fb38:	sub	x0, x29, #0x50
    fb3c:	bl	4a10 <mpc_clear@plt>
    fb40:	cmp	w21, #0x0
    fb44:	cset	w9, ne  // ne = any
    fb48:	mov	w8, #0x8                   	// #8
    fb4c:	lsl	w9, w9, #2
    fb50:	csel	w8, w8, w9, lt  // lt = tstop
    fb54:	cmp	w20, #0x0
    fb58:	cset	w9, ne  // ne = any
    fb5c:	lsl	w9, w9, #4
    fb60:	mov	w10, #0x20                  	// #32
    fb64:	csel	w9, w10, w9, lt  // lt = tstop
    fb68:	orr	w0, w9, w8
    fb6c:	b	fdac <mpc_sin_cos@@Base+0x960>
    fb70:	ldp	w22, w25, [sp, #8]
    fb74:	mov	w20, wzr
    fb78:	cbz	x19, fc10 <mpc_sin_cos@@Base+0x7c4>
    fb7c:	ldur	w3, [x29, #-104]
    fb80:	sub	x1, x29, #0x70
    fb84:	mov	x0, x19
    fb88:	mov	w2, w22
    fb8c:	bl	51d0 <mpfr_set4@plt>
    fb90:	ldur	x8, [x29, #-96]
    fb94:	mov	x23, #0x8000000000000003    	// #-9223372036854775805
    fb98:	cmp	x8, x23
    fb9c:	b.ne	fbac <mpc_sin_cos@@Base+0x760>  // b.any
    fba0:	mov	x0, x19
    fba4:	mov	w1, w22
    fba8:	bl	4dd0 <mpc_fix_inf@plt>
    fbac:	ldur	w3, [x29, #-72]
    fbb0:	add	x22, x19, #0x20
    fbb4:	asr	w19, w25, #4
    fbb8:	mov	w21, w0
    fbbc:	sub	x1, x29, #0x50
    fbc0:	mov	x0, x22
    fbc4:	mov	w2, w19
    fbc8:	bl	51d0 <mpfr_set4@plt>
    fbcc:	ldur	x8, [x29, #-64]
    fbd0:	cmp	x8, x23
    fbd4:	b.ne	fbe4 <mpc_sin_cos@@Base+0x798>  // b.any
    fbd8:	mov	x0, x22
    fbdc:	mov	w1, w19
    fbe0:	bl	4dd0 <mpc_fix_inf@plt>
    fbe4:	cmp	w21, #0x0
    fbe8:	cset	w9, ne  // ne = any
    fbec:	mov	w8, #0x20                  	// #32
    fbf0:	lsl	w9, w9, #4
    fbf4:	csel	w8, w8, w9, lt  // lt = tstop
    fbf8:	cmp	w0, #0x0
    fbfc:	cset	w9, ne  // ne = any
    fc00:	lsl	w9, w9, #6
    fc04:	mov	w10, #0x80                  	// #128
    fc08:	csel	w9, w10, w9, lt  // lt = tstop
    fc0c:	orr	w19, w9, w8
    fc10:	sub	x0, x29, #0x50
    fc14:	bl	4d60 <mpfr_clear@plt>
    fc18:	sub	x0, x29, #0x70
    fc1c:	bl	4d60 <mpfr_clear@plt>
    fc20:	add	x0, sp, #0x70
    fc24:	bl	4d60 <mpfr_clear@plt>
    fc28:	add	x0, sp, #0x50
    fc2c:	bl	4d60 <mpfr_clear@plt>
    fc30:	add	x0, sp, #0x30
    fc34:	bl	4d60 <mpfr_clear@plt>
    fc38:	add	x0, sp, #0x10
    fc3c:	bl	4d60 <mpfr_clear@plt>
    fc40:	orr	w0, w19, w20
    fc44:	b	fdac <mpc_sin_cos@@Base+0x960>
    fc48:	sub	x1, x29, #0x50
    fc4c:	mov	x0, x21
    fc50:	mov	w2, w27
    fc54:	bl	5580 <mpc_set@plt>
    fc58:	b	fcb8 <mpc_sin_cos@@Base+0x86c>
    fc5c:	sub	x0, x29, #0x70
    fc60:	mov	w1, #0x2                   	// #2
    fc64:	bl	5440 <mpfr_init2@plt>
    fc68:	add	x0, sp, #0x70
    fc6c:	mov	w1, #0x2                   	// #2
    fc70:	bl	5440 <mpfr_init2@plt>
    fc74:	sub	x0, x29, #0x70
    fc78:	add	x1, sp, #0x70
    fc7c:	sub	x2, x29, #0x50
    fc80:	mov	w3, #0x1                   	// #1
    fc84:	bl	5520 <mpfr_sin_cos@plt>
    fc88:	ldur	w1, [x29, #-104]
    fc8c:	mov	x0, x21
    fc90:	bl	5120 <mpfr_set_inf@plt>
    fc94:	ldr	w8, [sp, #120]
    fc98:	ldur	w9, [x29, #-40]
    fc9c:	add	x0, x21, #0x20
    fca0:	mul	w1, w9, w8
    fca4:	bl	5120 <mpfr_set_inf@plt>
    fca8:	sub	x0, x29, #0x70
    fcac:	bl	4d60 <mpfr_clear@plt>
    fcb0:	add	x0, sp, #0x70
    fcb4:	bl	4d60 <mpfr_clear@plt>
    fcb8:	cbz	x19, fd9c <mpc_sin_cos@@Base+0x950>
    fcbc:	ldur	x9, [x29, #-64]
    fcc0:	ldur	x8, [x29, #-32]
    fcc4:	sub	x10, x29, #0x50
    fcc8:	add	x21, x10, #0x20
    fccc:	cmp	x9, x23
    fcd0:	b.ne	fcf0 <mpc_sin_cos@@Base+0x8a4>  // b.any
    fcd4:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    fcd8:	cmp	x8, x9
    fcdc:	b.ne	fd1c <mpc_sin_cos@@Base+0x8d0>  // b.any
    fce0:	mov	w1, #0x1                   	// #1
    fce4:	mov	x0, x19
    fce8:	bl	5120 <mpfr_set_inf@plt>
    fcec:	b	fd24 <mpc_sin_cos@@Base+0x8d8>
    fcf0:	cmp	x8, x23
    fcf4:	b.ne	fd4c <mpc_sin_cos@@Base+0x900>  // b.any
    fcf8:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    fcfc:	cmp	x9, x8
    fd00:	add	x0, x19, #0x20
    fd04:	b.ne	fd90 <mpc_sin_cos@@Base+0x944>  // b.any
    fd08:	ldur	w3, [x29, #-72]
    fd0c:	asr	w2, w25, #4
    fd10:	sub	x1, x29, #0x50
    fd14:	bl	51d0 <mpfr_set4@plt>
    fd18:	b	fd94 <mpc_sin_cos@@Base+0x948>
    fd1c:	mov	x0, x19
    fd20:	bl	4a40 <mpfr_set_nan@plt>
    fd24:	ldur	x8, [x29, #-32]
    fd28:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    fd2c:	add	x0, x19, #0x20
    fd30:	cmp	x8, x9
    fd34:	b.ne	fd98 <mpc_sin_cos@@Base+0x94c>  // b.any
    fd38:	ldur	w3, [x29, #-40]
    fd3c:	asr	w2, w25, #4
    fd40:	mov	x1, x21
    fd44:	bl	51d0 <mpfr_set4@plt>
    fd48:	b	fd9c <mpc_sin_cos@@Base+0x950>
    fd4c:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    fd50:	cmp	x9, x10
    fd54:	b.eq	fdcc <mpc_sin_cos@@Base+0x980>  // b.none
    fd58:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    fd5c:	cmp	x9, x10
    fd60:	b.ne	fe04 <mpc_sin_cos@@Base+0x9b8>  // b.any
    fd64:	ldur	w9, [x29, #-72]
    fd68:	ldur	w11, [x29, #-40]
    fd6c:	cmp	x8, x10
    fd70:	eor	w20, w11, w9
    fd74:	b.ne	fe58 <mpc_sin_cos@@Base+0xa0c>  // b.any
    fd78:	cmp	w20, #0x0
    fd7c:	mov	w8, #0xffffffff            	// #-1
    fd80:	cneg	w1, w8, lt  // lt = tstop
    fd84:	mov	x0, x19
    fd88:	bl	5120 <mpfr_set_inf@plt>
    fd8c:	b	fe60 <mpc_sin_cos@@Base+0xa14>
    fd90:	bl	4a40 <mpfr_set_nan@plt>
    fd94:	mov	x0, x19
    fd98:	bl	4a40 <mpfr_set_nan@plt>
    fd9c:	cbz	w24, fda8 <mpc_sin_cos@@Base+0x95c>
    fda0:	sub	x0, x29, #0x50
    fda4:	bl	4a10 <mpc_clear@plt>
    fda8:	mov	w0, wzr
    fdac:	ldp	x20, x19, [sp, #336]
    fdb0:	ldp	x22, x21, [sp, #320]
    fdb4:	ldp	x24, x23, [sp, #304]
    fdb8:	ldp	x26, x25, [sp, #288]
    fdbc:	ldp	x28, x27, [sp, #272]
    fdc0:	ldp	x29, x30, [sp, #256]
    fdc4:	add	sp, sp, #0x160
    fdc8:	ret
    fdcc:	ldur	w8, [x29, #-72]
    fdd0:	ldur	w9, [x29, #-40]
    fdd4:	add	x0, x19, #0x20
    fdd8:	asr	w2, w25, #4
    fddc:	sub	x1, x29, #0x50
    fde0:	eor	w8, w9, w8
    fde4:	cmp	w8, #0x0
    fde8:	mov	w8, #0xffffffff            	// #-1
    fdec:	cneg	w3, w8, lt  // lt = tstop
    fdf0:	bl	51d0 <mpfr_set4@plt>
    fdf4:	mov	w1, #0x1                   	// #1
    fdf8:	mov	x0, x19
    fdfc:	bl	5120 <mpfr_set_inf@plt>
    fe00:	b	fd9c <mpc_sin_cos@@Base+0x950>
    fe04:	add	x0, sp, #0x70
    fe08:	mov	w1, #0x2                   	// #2
    fe0c:	bl	5440 <mpfr_init2@plt>
    fe10:	sub	x0, x29, #0x70
    fe14:	mov	w1, #0x2                   	// #2
    fe18:	bl	5440 <mpfr_init2@plt>
    fe1c:	sub	x0, x29, #0x70
    fe20:	add	x1, sp, #0x70
    fe24:	sub	x2, x29, #0x50
    fe28:	mov	w3, wzr
    fe2c:	bl	5520 <mpfr_sin_cos@plt>
    fe30:	ldr	x8, [sp, #128]
    fe34:	mov	x9, #0x2                   	// #2
    fe38:	movk	x9, #0x8000, lsl #48
    fe3c:	cmp	x8, x9
    fe40:	b.gt	fe88 <mpc_sin_cos@@Base+0xa3c>
    fe44:	cmp	x8, x23
    fe48:	b.ne	fe50 <mpc_sin_cos@@Base+0xa04>  // b.any
    fe4c:	bl	4b00 <mpfr_set_erangeflag@plt>
    fe50:	mov	w1, wzr
    fe54:	b	fe8c <mpc_sin_cos@@Base+0xa40>
    fe58:	mov	x0, x19
    fe5c:	bl	4a40 <mpfr_set_nan@plt>
    fe60:	ldur	x8, [x29, #-32]
    fe64:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    fe68:	add	x0, x19, #0x20
    fe6c:	cmp	x8, x9
    fe70:	b.ne	fd98 <mpc_sin_cos@@Base+0x94c>  // b.any
    fe74:	cmp	w20, #0x0
    fe78:	mov	w8, #0xffffffff            	// #-1
    fe7c:	asr	w2, w25, #4
    fe80:	cneg	w3, w8, lt  // lt = tstop
    fe84:	b	fd40 <mpc_sin_cos@@Base+0x8f4>
    fe88:	ldr	w1, [sp, #120]
    fe8c:	mov	x0, x19
    fe90:	bl	5120 <mpfr_set_inf@plt>
    fe94:	ldur	x8, [x29, #-32]
    fe98:	mov	x9, #0x2                   	// #2
    fe9c:	movk	x9, #0x8000, lsl #48
    fea0:	add	x19, x19, #0x20
    fea4:	cmp	x8, x9
    fea8:	b.gt	fec0 <mpc_sin_cos@@Base+0xa74>
    feac:	cmp	x8, x23
    feb0:	b.ne	feb8 <mpc_sin_cos@@Base+0xa6c>  // b.any
    feb4:	bl	4b00 <mpfr_set_erangeflag@plt>
    feb8:	mov	w20, wzr
    febc:	b	fec4 <mpc_sin_cos@@Base+0xa78>
    fec0:	ldur	w20, [x29, #-40]
    fec4:	ldur	x8, [x29, #-96]
    fec8:	mov	x9, #0x2                   	// #2
    fecc:	movk	x9, #0x8000, lsl #48
    fed0:	cmp	x8, x9
    fed4:	b.gt	feec <mpc_sin_cos@@Base+0xaa0>
    fed8:	cmp	x8, x23
    fedc:	b.ne	fee4 <mpc_sin_cos@@Base+0xa98>  // b.any
    fee0:	bl	4b00 <mpfr_set_erangeflag@plt>
    fee4:	mov	w8, wzr
    fee8:	b	fef0 <mpc_sin_cos@@Base+0xaa4>
    feec:	ldur	w8, [x29, #-104]
    fef0:	cmp	w20, w8
    fef4:	mov	w8, #0xffffffff            	// #-1
    fef8:	cneg	w1, w8, ne  // ne = any
    fefc:	mov	x0, x19
    ff00:	bl	5120 <mpfr_set_inf@plt>
    ff04:	sub	x0, x29, #0x70
    ff08:	bl	4d60 <mpfr_clear@plt>
    ff0c:	add	x0, sp, #0x70
    ff10:	bl	4d60 <mpfr_clear@plt>
    ff14:	b	fd9c <mpc_sin_cos@@Base+0x950>

000000000000ff18 <mpc_sinh@@Base>:
    ff18:	sub	sp, sp, #0xa0
    ff1c:	stp	x29, x30, [sp, #128]
    ff20:	str	x19, [sp, #144]
    ff24:	ldp	q1, q0, [x1, #32]
    ff28:	ubfiz	w8, w2, #4, #4
    ff2c:	mov	x19, x0
    ff30:	add	w2, w8, w2, asr #4
    ff34:	stp	q1, q0, [sp, #64]
    ff38:	ldp	q1, q0, [x1]
    ff3c:	add	x1, sp, #0x40
    ff40:	add	x29, sp, #0x80
    ff44:	stp	q1, q0, [sp, #96]
    ff48:	ldp	q1, q0, [x0, #32]
    ff4c:	stp	q1, q0, [sp]
    ff50:	ldp	q1, q0, [x0]
    ff54:	mov	x0, sp
    ff58:	stp	q1, q0, [sp, #32]
    ff5c:	bl	4f50 <mpc_sin@plt>
    ff60:	ldp	q1, q0, [sp, #32]
    ff64:	asr	w8, w0, #2
    ff68:	cmp	w8, #0x0
    ff6c:	cset	w9, ne  // ne = any
    ff70:	stp	q1, q0, [x19]
    ff74:	ldp	q1, q0, [sp]
    ff78:	cmp	w8, #0x2
    ff7c:	csel	w8, w8, w9, eq  // eq = none
    ff80:	tst	w0, #0x3
    ff84:	stp	q1, q0, [x19, #32]
    ff88:	and	w9, w0, #0x3
    ff8c:	cset	w10, ne  // ne = any
    ff90:	ldr	x19, [sp, #144]
    ff94:	ldp	x29, x30, [sp, #128]
    ff98:	cmp	w9, #0x2
    ff9c:	mov	w9, #0x8                   	// #8
    ffa0:	lsl	w10, w10, #2
    ffa4:	csel	w9, w9, w10, eq  // eq = none
    ffa8:	orr	w0, w8, w9
    ffac:	add	sp, sp, #0xa0
    ffb0:	ret

000000000000ffb4 <mpc_sqr@@Base>:
    ffb4:	sub	sp, sp, #0xd0
    ffb8:	stp	x20, x19, [sp, #192]
    ffbc:	mov	x19, x0
    ffc0:	mov	x0, x1
    ffc4:	stp	x29, x30, [sp, #112]
    ffc8:	stp	x28, x27, [sp, #128]
    ffcc:	stp	x26, x25, [sp, #144]
    ffd0:	stp	x24, x23, [sp, #160]
    ffd4:	stp	x22, x21, [sp, #176]
    ffd8:	add	x29, sp, #0x70
    ffdc:	mov	w21, w2
    ffe0:	mov	x20, x1
    ffe4:	bl	54d0 <mpfr_number_p@plt>
    ffe8:	cbz	w0, 10074 <mpc_sqr@@Base+0xc0>
    ffec:	add	x22, x20, #0x20
    fff0:	mov	x0, x22
    fff4:	bl	54d0 <mpfr_number_p@plt>
    fff8:	cbz	w0, 10074 <mpc_sqr@@Base+0xc0>
    fffc:	mov	x23, x19
   10000:	ldr	x9, [x19]
   10004:	ldr	x10, [x23, #32]!
   10008:	ldr	x8, [x20, #48]
   1000c:	mov	x25, #0x8000000000000001    	// #-9223372036854775807
   10010:	cmp	x9, x10
   10014:	csel	x24, x9, x10, gt
   10018:	cmp	x8, x25
   1001c:	b.ne	100c8 <mpc_sqr@@Base+0x114>  // b.any
   10020:	ldr	w8, [x20, #8]
   10024:	ldr	w9, [x20, #40]
   10028:	and	w2, w21, #0xf
   1002c:	mov	x0, x19
   10030:	mov	x1, x20
   10034:	eor	w22, w9, w8
   10038:	bl	5010 <mpfr_sqr@plt>
   1003c:	mov	w20, w0
   10040:	mov	w8, #0x1                   	// #1
   10044:	str	w8, [x19, #40]
   10048:	str	x25, [x19, #48]
   1004c:	tbz	w22, #31, 10060 <mpc_sqr@@Base+0xac>
   10050:	mov	x0, x19
   10054:	mov	x1, x19
   10058:	mov	w2, wzr
   1005c:	bl	4f60 <mpc_conj@plt>
   10060:	cmp	w20, #0x0
   10064:	cset	w8, ne  // ne = any
   10068:	mov	w9, #0x2                   	// #2
   1006c:	csel	w0, w9, w8, lt  // lt = tstop
   10070:	b	100a8 <mpc_sqr@@Base+0xf4>
   10074:	ldr	x8, [x20, #16]
   10078:	mov	x10, #0x2                   	// #2
   1007c:	movk	x10, #0x8000, lsl #48
   10080:	cmp	x8, x10
   10084:	b.eq	10094 <mpc_sqr@@Base+0xe0>  // b.none
   10088:	ldr	x9, [x20, #48]
   1008c:	cmp	x9, x10
   10090:	b.ne	10150 <mpc_sqr@@Base+0x19c>  // b.any
   10094:	mov	x0, x19
   10098:	bl	4a40 <mpfr_set_nan@plt>
   1009c:	add	x0, x19, #0x20
   100a0:	bl	4a40 <mpfr_set_nan@plt>
   100a4:	mov	w0, wzr
   100a8:	ldp	x20, x19, [sp, #192]
   100ac:	ldp	x22, x21, [sp, #176]
   100b0:	ldp	x24, x23, [sp, #160]
   100b4:	ldp	x26, x25, [sp, #144]
   100b8:	ldp	x28, x27, [sp, #128]
   100bc:	ldp	x29, x30, [sp, #112]
   100c0:	add	sp, sp, #0xd0
   100c4:	ret
   100c8:	ldr	x9, [x20, #16]
   100cc:	cmp	x9, x25
   100d0:	b.ne	10180 <mpc_sqr@@Base+0x1cc>  // b.any
   100d4:	ldr	w8, [x20, #8]
   100d8:	ldr	w9, [x20, #40]
   100dc:	and	w10, w21, #0xf
   100e0:	mov	w21, #0x2                   	// #2
   100e4:	cmp	w10, #0x3
   100e8:	mov	w11, #0x3                   	// #3
   100ec:	csel	w12, w21, w10, eq  // eq = none
   100f0:	cmp	w10, #0x2
   100f4:	csel	w2, w11, w12, eq  // eq = none
   100f8:	mov	x0, x19
   100fc:	mov	x1, x22
   10100:	eor	w23, w9, w8
   10104:	bl	5010 <mpfr_sqr@plt>
   10108:	mov	w20, w0
   1010c:	mov	x0, x19
   10110:	mov	x1, x19
   10114:	mov	w2, wzr
   10118:	bl	4b80 <mpfr_neg@plt>
   1011c:	mov	w8, #0x1                   	// #1
   10120:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   10124:	str	w8, [x19, #40]
   10128:	str	x9, [x19, #48]
   1012c:	tbz	w23, #31, 10140 <mpc_sqr@@Base+0x18c>
   10130:	mov	x0, x19
   10134:	mov	x1, x19
   10138:	mov	w2, wzr
   1013c:	bl	4f60 <mpc_conj@plt>
   10140:	cmp	w20, #0x0
   10144:	cset	w8, ne  // ne = any
   10148:	csel	w0, w21, w8, gt
   1014c:	b	100a8 <mpc_sqr@@Base+0xf4>
   10150:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
   10154:	cmp	x8, x10
   10158:	b.ne	10194 <mpc_sqr@@Base+0x1e0>  // b.any
   1015c:	cmp	x9, x10
   10160:	b.ne	101ac <mpc_sqr@@Base+0x1f8>  // b.any
   10164:	ldr	w8, [x20, #8]
   10168:	ldr	w9, [x20, #40]
   1016c:	add	x0, x19, #0x20
   10170:	mul	w1, w9, w8
   10174:	bl	5120 <mpfr_set_inf@plt>
   10178:	mov	x0, x19
   1017c:	b	100a0 <mpc_sqr@@Base+0xec>
   10180:	cmp	x19, x20
   10184:	b.eq	101dc <mpc_sqr@@Base+0x228>  // b.none
   10188:	ldp	q1, q0, [x20]
   1018c:	stp	q1, q0, [sp, #16]
   10190:	b	10204 <mpc_sqr@@Base+0x250>
   10194:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   10198:	cmp	x8, x9
   1019c:	add	x0, x19, #0x20
   101a0:	b.ne	101c4 <mpc_sqr@@Base+0x210>  // b.any
   101a4:	bl	4a40 <mpfr_set_nan@plt>
   101a8:	b	101d4 <mpc_sqr@@Base+0x220>
   101ac:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
   101b0:	cmp	x9, x8
   101b4:	add	x0, x19, #0x20
   101b8:	b.ne	1037c <mpc_sqr@@Base+0x3c8>  // b.any
   101bc:	bl	4a40 <mpfr_set_nan@plt>
   101c0:	b	1038c <mpc_sqr@@Base+0x3d8>
   101c4:	ldr	w8, [x20, #8]
   101c8:	ldr	w9, [x20, #40]
   101cc:	mul	w1, w9, w8
   101d0:	bl	5120 <mpfr_set_inf@plt>
   101d4:	mov	w1, #0xffffffff            	// #-1
   101d8:	b	10390 <mpc_sqr@@Base+0x3dc>
   101dc:	ldr	x1, [x20]
   101e0:	add	x0, sp, #0x10
   101e4:	bl	5440 <mpfr_init2@plt>
   101e8:	ldr	w3, [x20, #8]
   101ec:	add	x0, sp, #0x10
   101f0:	mov	x1, x20
   101f4:	mov	w2, wzr
   101f8:	bl	51d0 <mpfr_set4@plt>
   101fc:	ldr	x9, [x20, #16]
   10200:	ldr	x8, [x20, #48]
   10204:	ldr	x10, [x20]
   10208:	ldr	x11, [x20, #32]
   1020c:	subs	x8, x9, x8
   10210:	cneg	x8, x8, mi  // mi = first
   10214:	cmp	x10, x11
   10218:	csel	x9, x10, x11, gt
   1021c:	cmp	x9, #0x0
   10220:	cinc	x9, x9, lt  // lt = tstop
   10224:	cmp	x8, x9, asr #1
   10228:	b.le	10248 <mpc_sqr@@Base+0x294>
   1022c:	and	w3, w21, #0xf
   10230:	add	x1, sp, #0x10
   10234:	mov	x0, x19
   10238:	mov	x2, x22
   1023c:	bl	1047c <mpc_sqr@@Base+0x4c8>
   10240:	mov	w24, w0
   10244:	b	103d4 <mpc_sqr@@Base+0x420>
   10248:	sub	x0, x29, #0x20
   1024c:	bl	4aa0 <mpfr_init@plt>
   10250:	add	x0, sp, #0x30
   10254:	bl	4aa0 <mpfr_init@plt>
   10258:	bl	5060 <mpfr_get_emin@plt>
   1025c:	tst	w21, #0xf
   10260:	mov	x25, #0x2                   	// #2
   10264:	and	w8, w21, #0xf
   10268:	movk	x25, #0x8000, lsl #48
   1026c:	cset	w26, eq  // eq = none
   10270:	str	x0, [sp, #8]
   10274:	str	w8, [sp, #4]
   10278:	mov	x0, x24
   1027c:	bl	4d20 <mpc_ceil_log2@plt>
   10280:	add	x8, x24, x0
   10284:	add	x24, x8, #0x5
   10288:	sub	x0, x29, #0x20
   1028c:	mov	x1, x24
   10290:	bl	4c80 <mpfr_set_prec@plt>
   10294:	add	x0, sp, #0x30
   10298:	mov	x1, x24
   1029c:	bl	4c80 <mpfr_set_prec@plt>
   102a0:	sub	x0, x29, #0x20
   102a4:	add	x1, sp, #0x10
   102a8:	mov	w3, #0x4                   	// #4
   102ac:	mov	x2, x22
   102b0:	bl	4e60 <mpfr_add@plt>
   102b4:	mov	w27, w0
   102b8:	add	x0, sp, #0x30
   102bc:	add	x1, sp, #0x10
   102c0:	mov	w3, #0x4                   	// #4
   102c4:	mov	x2, x22
   102c8:	bl	4a60 <mpfr_sub@plt>
   102cc:	ldur	x8, [x29, #-16]
   102d0:	cmp	x8, x25
   102d4:	b.le	1039c <mpc_sqr@@Base+0x3e8>
   102d8:	ldur	w8, [x29, #-24]
   102dc:	cbz	w8, 103b0 <mpc_sqr@@Base+0x3fc>
   102e0:	ldr	x8, [sp, #64]
   102e4:	cmp	x8, x25
   102e8:	b.le	1039c <mpc_sqr@@Base+0x3e8>
   102ec:	ldr	w8, [sp, #56]
   102f0:	cbz	w8, 103b0 <mpc_sqr@@Base+0x3fc>
   102f4:	mov	w28, w0
   102f8:	sub	x0, x29, #0x20
   102fc:	sub	x1, x29, #0x20
   10300:	add	x2, sp, #0x30
   10304:	mov	w3, #0x4                   	// #4
   10308:	bl	4b70 <mpfr_mul@plt>
   1030c:	ldur	x8, [x29, #-16]
   10310:	ldr	x9, [sp, #8]
   10314:	cmp	x8, x9
   10318:	b.eq	10460 <mpc_sqr@@Base+0x4ac>  // b.none
   1031c:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
   10320:	cmp	x8, x9
   10324:	b.eq	10460 <mpc_sqr@@Base+0x4ac>  // b.none
   10328:	ldr	x9, [x19]
   1032c:	orr	w8, w28, w27
   10330:	orr	w27, w8, w0
   10334:	cmp	w27, #0x0
   10338:	sub	x1, x24, #0x3
   1033c:	add	x4, x9, x26
   10340:	sub	x0, x29, #0x20
   10344:	mov	w2, #0x4                   	// #4
   10348:	mov	w3, #0x1                   	// #1
   1034c:	cset	w28, eq  // eq = none
   10350:	bl	5450 <mpfr_can_round@plt>
   10354:	orr	w8, w0, w28
   10358:	cbz	w8, 10278 <mpc_sqr@@Base+0x2c4>
   1035c:	ldur	w3, [x29, #-24]
   10360:	ldr	w2, [sp, #4]
   10364:	sub	x1, x29, #0x20
   10368:	mov	x0, x19
   1036c:	bl	51d0 <mpfr_set4@plt>
   10370:	cmp	w0, #0x0
   10374:	csel	w24, w27, w0, eq  // eq = none
   10378:	b	103c4 <mpc_sqr@@Base+0x410>
   1037c:	ldr	w8, [x20, #8]
   10380:	ldr	w9, [x20, #40]
   10384:	mul	w1, w9, w8
   10388:	bl	5120 <mpfr_set_inf@plt>
   1038c:	mov	w1, #0x1                   	// #1
   10390:	mov	x0, x19
   10394:	bl	5120 <mpfr_set_inf@plt>
   10398:	b	100a4 <mpc_sqr@@Base+0xf0>
   1039c:	mov	x9, #0x2                   	// #2
   103a0:	movk	x9, #0x8000, lsl #48
   103a4:	cmp	x8, x9
   103a8:	b.ne	103b0 <mpc_sqr@@Base+0x3fc>  // b.any
   103ac:	bl	4b00 <mpfr_set_erangeflag@plt>
   103b0:	mov	w8, #0x1                   	// #1
   103b4:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   103b8:	mov	w24, wzr
   103bc:	str	w8, [x19, #8]
   103c0:	str	x9, [x19, #16]
   103c4:	sub	x0, x29, #0x20
   103c8:	bl	4d60 <mpfr_clear@plt>
   103cc:	add	x0, sp, #0x30
   103d0:	bl	4d60 <mpfr_clear@plt>
   103d4:	bl	52f0 <mpfr_underflow_p@plt>
   103d8:	mov	w25, w0
   103dc:	bl	4e20 <mpfr_clear_underflow@plt>
   103e0:	asr	w26, w21, #4
   103e4:	add	x1, sp, #0x10
   103e8:	mov	x0, x23
   103ec:	mov	x2, x22
   103f0:	mov	w3, w26
   103f4:	bl	4b70 <mpfr_mul@plt>
   103f8:	mov	w21, w0
   103fc:	bl	52f0 <mpfr_underflow_p@plt>
   10400:	cbnz	w0, 1041c <mpc_sqr@@Base+0x468>
   10404:	mov	w2, #0x1                   	// #1
   10408:	mov	x0, x23
   1040c:	mov	x1, x23
   10410:	mov	w3, w26
   10414:	bl	4f40 <mpfr_mul_2ui@plt>
   10418:	orr	w21, w0, w21
   1041c:	cbz	w25, 10424 <mpc_sqr@@Base+0x470>
   10420:	bl	4990 <mpfr_set_underflow@plt>
   10424:	cmp	x19, x20
   10428:	b.ne	10434 <mpc_sqr@@Base+0x480>  // b.any
   1042c:	add	x0, sp, #0x10
   10430:	bl	4d60 <mpfr_clear@plt>
   10434:	cmp	w24, #0x0
   10438:	mov	w8, #0x2                   	// #2
   1043c:	cset	w9, ne  // ne = any
   10440:	csel	w8, w8, w9, lt  // lt = tstop
   10444:	cmp	w21, #0x0
   10448:	cset	w9, ne  // ne = any
   1044c:	lsl	w9, w9, #2
   10450:	mov	w10, #0x8                   	// #8
   10454:	csel	w9, w10, w9, lt  // lt = tstop
   10458:	orr	w0, w9, w8
   1045c:	b	100a8 <mpc_sqr@@Base+0xf4>
   10460:	ldr	w3, [sp, #4]
   10464:	add	x1, sp, #0x10
   10468:	mov	x0, x19
   1046c:	mov	x2, x22
   10470:	bl	1047c <mpc_sqr@@Base+0x4c8>
   10474:	mov	w24, w0
   10478:	b	103c4 <mpc_sqr@@Base+0x410>
   1047c:	sub	sp, sp, #0xb0
   10480:	stp	x29, x30, [sp, #96]
   10484:	stp	x26, x25, [sp, #112]
   10488:	stp	x24, x23, [sp, #128]
   1048c:	stp	x22, x21, [sp, #144]
   10490:	stp	x20, x19, [sp, #160]
   10494:	ldr	x8, [x1]
   10498:	add	x29, sp, #0x60
   1049c:	mov	x20, x1
   104a0:	mov	x22, x0
   104a4:	lsl	x1, x8, #1
   104a8:	sub	x0, x29, #0x20
   104ac:	mov	w21, w3
   104b0:	mov	x19, x2
   104b4:	bl	5440 <mpfr_init2@plt>
   104b8:	ldr	x8, [x19]
   104bc:	add	x0, sp, #0x20
   104c0:	lsl	x1, x8, #1
   104c4:	bl	5440 <mpfr_init2@plt>
   104c8:	sub	x0, x29, #0x20
   104cc:	mov	x1, x20
   104d0:	mov	w2, wzr
   104d4:	bl	5010 <mpfr_sqr@plt>
   104d8:	add	x0, sp, #0x20
   104dc:	mov	x1, x19
   104e0:	mov	w2, wzr
   104e4:	bl	5010 <mpfr_sqr@plt>
   104e8:	sub	x1, x29, #0x20
   104ec:	add	x2, sp, #0x20
   104f0:	mov	x0, x22
   104f4:	mov	w3, w21
   104f8:	bl	4a60 <mpfr_sub@plt>
   104fc:	ldr	x8, [x22, #16]
   10500:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
   10504:	cmp	x8, x9
   10508:	b.ne	1054c <mpc_sqr@@Base+0x598>  // b.any
   1050c:	ldr	w8, [x22, #8]
   10510:	mov	x0, x22
   10514:	mov	x2, xzr
   10518:	mov	w3, wzr
   1051c:	cmp	w8, #0x0
   10520:	mov	w8, #0x1                   	// #1
   10524:	cneg	x1, x8, lt  // lt = tstop
   10528:	bl	49e0 <mpfr_set_si_2exp@plt>
   1052c:	bl	5200 <mpfr_get_emax@plt>
   10530:	mov	x2, x0
   10534:	mov	x0, x22
   10538:	mov	x1, x22
   1053c:	mov	w3, w21
   10540:	bl	4f40 <mpfr_mul_2ui@plt>
   10544:	mov	w25, w0
   10548:	b	108b0 <mpc_sqr@@Base+0x8fc>
   1054c:	ldur	x9, [x29, #-16]
   10550:	ldr	x10, [sp, #48]
   10554:	mov	x11, #0x8000000000000001    	// #-9223372036854775807
   10558:	mov	w25, w0
   1055c:	cmp	x9, x11
   10560:	b.ne	1057c <mpc_sqr@@Base+0x5c8>  // b.any
   10564:	cmp	x10, x11
   10568:	b.eq	10598 <mpc_sqr@@Base+0x5e4>  // b.none
   1056c:	ldur	w8, [x29, #-24]
   10570:	cmp	w8, #0x0
   10574:	mov	w8, #0xffffffff            	// #-1
   10578:	b	10590 <mpc_sqr@@Base+0x5dc>
   1057c:	cmp	x10, x11
   10580:	b.ne	10598 <mpc_sqr@@Base+0x5e4>  // b.any
   10584:	ldr	w8, [sp, #40]
   10588:	cmp	w8, #0x0
   1058c:	mov	w8, #0x1                   	// #1
   10590:	cneg	w25, w8, lt  // lt = tstop
   10594:	b	108b0 <mpc_sqr@@Base+0x8fc>
   10598:	mov	x11, #0x8000000000000001    	// #-9223372036854775807
   1059c:	mov	x26, #0x2                   	// #2
   105a0:	cmp	x9, x11
   105a4:	movk	x26, #0x8000, lsl #48
   105a8:	cset	w9, eq  // eq = none
   105ac:	cmp	x10, x11
   105b0:	cset	w10, eq  // eq = none
   105b4:	cmp	x8, x26
   105b8:	b.eq	105c4 <mpc_sqr@@Base+0x610>  // b.none
   105bc:	and	w8, w9, w10
   105c0:	cbz	w8, 108b0 <mpc_sqr@@Base+0x8fc>
   105c4:	ldr	x24, [x20, #16]
   105c8:	ldr	x23, [x19, #16]
   105cc:	mov	x0, x20
   105d0:	mov	x1, xzr
   105d4:	bl	4c10 <mpfr_set_exp@plt>
   105d8:	mov	x0, x19
   105dc:	mov	x1, xzr
   105e0:	bl	4c10 <mpfr_set_exp@plt>
   105e4:	add	x0, sp, #0x10
   105e8:	bl	54a0 <__gmpz_init@plt>
   105ec:	mov	x0, sp
   105f0:	bl	54a0 <__gmpz_init@plt>
   105f4:	add	x0, sp, #0x10
   105f8:	mov	x1, x24
   105fc:	bl	54c0 <__gmpz_set_si@plt>
   10600:	add	x0, sp, #0x10
   10604:	add	x1, sp, #0x10
   10608:	mov	w2, #0x1                   	// #1
   1060c:	bl	4e90 <__gmpz_mul_2exp@plt>
   10610:	mov	x0, sp
   10614:	mov	x1, x23
   10618:	bl	54c0 <__gmpz_set_si@plt>
   1061c:	mov	x0, sp
   10620:	mov	x1, sp
   10624:	mov	w2, #0x1                   	// #1
   10628:	bl	4e90 <__gmpz_mul_2exp@plt>
   1062c:	sub	x0, x29, #0x20
   10630:	mov	x1, x20
   10634:	mov	w2, wzr
   10638:	bl	5010 <mpfr_sqr@plt>
   1063c:	ldur	x8, [x29, #-16]
   10640:	add	x0, sp, #0x10
   10644:	add	x1, sp, #0x10
   10648:	neg	x2, x8
   1064c:	bl	4ad0 <__gmpz_sub_ui@plt>
   10650:	sub	x0, x29, #0x20
   10654:	mov	x1, xzr
   10658:	bl	4c10 <mpfr_set_exp@plt>
   1065c:	add	x0, sp, #0x20
   10660:	mov	x1, x19
   10664:	mov	w2, wzr
   10668:	bl	5010 <mpfr_sqr@plt>
   1066c:	ldr	x8, [sp, #48]
   10670:	mov	x0, sp
   10674:	mov	x1, sp
   10678:	neg	x2, x8
   1067c:	bl	4ad0 <__gmpz_sub_ui@plt>
   10680:	add	x0, sp, #0x20
   10684:	mov	x1, xzr
   10688:	bl	4c10 <mpfr_set_exp@plt>
   1068c:	ldr	x8, [x22, #16]
   10690:	cmp	x8, x26
   10694:	b.ne	106fc <mpc_sqr@@Base+0x748>  // b.any
   10698:	bl	5200 <mpfr_get_emax@plt>
   1069c:	mov	x25, x0
   106a0:	add	x0, sp, #0x10
   106a4:	mov	x1, sp
   106a8:	bl	5300 <__gmpz_cmp@plt>
   106ac:	tbnz	w0, #31, 10768 <mpc_sqr@@Base+0x7b4>
   106b0:	sub	x0, x29, #0x20
   106b4:	mov	x1, x25
   106b8:	bl	4c10 <mpfr_set_exp@plt>
   106bc:	add	x0, sp, #0x10
   106c0:	add	x1, sp, #0x10
   106c4:	mov	x2, x25
   106c8:	bl	4ad0 <__gmpz_sub_ui@plt>
   106cc:	mov	x0, sp
   106d0:	mov	x1, sp
   106d4:	add	x2, sp, #0x10
   106d8:	bl	4bc0 <__gmpz_sub@plt>
   106dc:	ldr	x8, [sp, #8]
   106e0:	ldr	w9, [sp, #4]
   106e4:	add	x0, sp, #0x20
   106e8:	ldr	x8, [x8]
   106ec:	cmp	w9, #0x0
   106f0:	csel	x1, xzr, x8, eq  // eq = none
   106f4:	bl	4c10 <mpfr_set_exp@plt>
   106f8:	b	107bc <mpc_sqr@@Base+0x808>
   106fc:	bl	5060 <mpfr_get_emin@plt>
   10700:	mov	x25, x0
   10704:	add	x0, sp, #0x10
   10708:	mov	x1, sp
   1070c:	bl	5300 <__gmpz_cmp@plt>
   10710:	cmp	w0, #0x0
   10714:	b.le	107fc <mpc_sqr@@Base+0x848>
   10718:	add	x0, sp, #0x20
   1071c:	mov	x1, x25
   10720:	bl	4c10 <mpfr_set_exp@plt>
   10724:	neg	x2, x25
   10728:	mov	x0, sp
   1072c:	mov	x1, sp
   10730:	bl	4fa0 <__gmpz_add_ui@plt>
   10734:	add	x0, sp, #0x10
   10738:	add	x1, sp, #0x10
   1073c:	mov	x2, sp
   10740:	bl	4bc0 <__gmpz_sub@plt>
   10744:	add	x0, sp, #0x10
   10748:	bl	49a0 <__gmpz_get_si@plt>
   1074c:	mov	x1, x0
   10750:	sub	x0, x29, #0x20
   10754:	bl	4c10 <mpfr_set_exp@plt>
   10758:	add	x0, sp, #0x10
   1075c:	mov	x1, sp
   10760:	bl	4d00 <__gmpz_set@plt>
   10764:	b	1083c <mpc_sqr@@Base+0x888>
   10768:	add	x0, sp, #0x20
   1076c:	mov	x1, x25
   10770:	bl	4c10 <mpfr_set_exp@plt>
   10774:	mov	x0, sp
   10778:	mov	x1, sp
   1077c:	mov	x2, x25
   10780:	bl	4ad0 <__gmpz_sub_ui@plt>
   10784:	add	x0, sp, #0x10
   10788:	add	x1, sp, #0x10
   1078c:	mov	x2, sp
   10790:	bl	4bc0 <__gmpz_sub@plt>
   10794:	ldr	x8, [sp, #24]
   10798:	ldr	w9, [sp, #20]
   1079c:	sub	x0, x29, #0x20
   107a0:	ldr	x8, [x8]
   107a4:	cmp	w9, #0x0
   107a8:	csel	x1, xzr, x8, eq  // eq = none
   107ac:	bl	4c10 <mpfr_set_exp@plt>
   107b0:	add	x0, sp, #0x10
   107b4:	mov	x1, sp
   107b8:	bl	4d00 <__gmpz_set@plt>
   107bc:	sub	x1, x29, #0x20
   107c0:	add	x2, sp, #0x20
   107c4:	mov	x0, x22
   107c8:	mov	w3, w21
   107cc:	bl	4a60 <mpfr_sub@plt>
   107d0:	ldr	x8, [sp, #24]
   107d4:	ldr	w9, [sp, #20]
   107d8:	mov	w25, w0
   107dc:	mov	x0, x22
   107e0:	ldr	x8, [x8]
   107e4:	cmp	w9, #0x0
   107e8:	mov	x1, x22
   107ec:	mov	w3, w21
   107f0:	csel	x2, xzr, x8, eq  // eq = none
   107f4:	bl	4f40 <mpfr_mul_2ui@plt>
   107f8:	b	10880 <mpc_sqr@@Base+0x8cc>
   107fc:	sub	x0, x29, #0x20
   10800:	mov	x1, x25
   10804:	bl	4c10 <mpfr_set_exp@plt>
   10808:	neg	x2, x25
   1080c:	add	x0, sp, #0x10
   10810:	add	x1, sp, #0x10
   10814:	bl	4fa0 <__gmpz_add_ui@plt>
   10818:	mov	x0, sp
   1081c:	mov	x1, sp
   10820:	add	x2, sp, #0x10
   10824:	bl	4bc0 <__gmpz_sub@plt>
   10828:	mov	x0, sp
   1082c:	bl	49a0 <__gmpz_get_si@plt>
   10830:	mov	x1, x0
   10834:	add	x0, sp, #0x20
   10838:	bl	4c10 <mpfr_set_exp@plt>
   1083c:	sub	x1, x29, #0x20
   10840:	add	x2, sp, #0x20
   10844:	mov	x0, x22
   10848:	mov	w3, w21
   1084c:	bl	4a60 <mpfr_sub@plt>
   10850:	ldr	w8, [sp, #20]
   10854:	ldr	x9, [sp, #24]
   10858:	mov	w25, w0
   1085c:	mov	x0, x22
   10860:	neg	w10, w8
   10864:	str	w10, [sp, #20]
   10868:	ldr	x9, [x9]
   1086c:	cmp	w8, #0x0
   10870:	mov	x1, x22
   10874:	mov	w3, w21
   10878:	csel	x2, xzr, x9, eq  // eq = none
   1087c:	bl	5320 <mpfr_div_2ui@plt>
   10880:	cmp	w0, #0x0
   10884:	csel	w25, w25, w0, eq  // eq = none
   10888:	add	x0, sp, #0x10
   1088c:	bl	5180 <__gmpz_clear@plt>
   10890:	mov	x0, sp
   10894:	bl	5180 <__gmpz_clear@plt>
   10898:	mov	x0, x20
   1089c:	mov	x1, x24
   108a0:	bl	4c10 <mpfr_set_exp@plt>
   108a4:	mov	x0, x19
   108a8:	mov	x1, x23
   108ac:	bl	4c10 <mpfr_set_exp@plt>
   108b0:	sub	x0, x29, #0x20
   108b4:	bl	4d60 <mpfr_clear@plt>
   108b8:	add	x0, sp, #0x20
   108bc:	bl	4d60 <mpfr_clear@plt>
   108c0:	mov	w0, w25
   108c4:	ldp	x20, x19, [sp, #160]
   108c8:	ldp	x22, x21, [sp, #144]
   108cc:	ldp	x24, x23, [sp, #128]
   108d0:	ldp	x26, x25, [sp, #112]
   108d4:	ldp	x29, x30, [sp, #96]
   108d8:	add	sp, sp, #0xb0
   108dc:	ret

00000000000108e0 <mpc_sqrt@@Base>:
   108e0:	sub	sp, sp, #0xf0
   108e4:	stp	x24, x23, [sp, #192]
   108e8:	mov	x24, x0
   108ec:	mov	x0, x1
   108f0:	stp	x29, x30, [sp, #144]
   108f4:	stp	x28, x27, [sp, #160]
   108f8:	stp	x26, x25, [sp, #176]
   108fc:	stp	x22, x21, [sp, #208]
   10900:	stp	x20, x19, [sp, #224]
   10904:	add	x29, sp, #0x90
   10908:	mov	w28, w2
   1090c:	mov	x26, x1
   10910:	bl	51f0 <mpfr_sgn@plt>
   10914:	mov	w25, w0
   10918:	add	x0, x26, #0x20
   1091c:	str	x0, [sp, #72]
   10920:	bl	51f0 <mpfr_sgn@plt>
   10924:	ldr	w20, [x26, #40]
   10928:	mov	w27, w0
   1092c:	mov	w8, #0x2                   	// #2
   10930:	mov	x0, x26
   10934:	cmp	w20, #0x0
   10938:	cinc	w22, w8, lt  // lt = tstop
   1093c:	bl	54d0 <mpfr_number_p@plt>
   10940:	cbz	w0, 109c0 <mpc_sqrt@@Base+0xe0>
   10944:	ldr	x0, [sp, #72]
   10948:	bl	54d0 <mpfr_number_p@plt>
   1094c:	cbz	w0, 109c0 <mpc_sqrt@@Base+0xe0>
   10950:	cbz	w27, 10a48 <mpc_sqrt@@Base+0x168>
   10954:	cbz	w25, 10a9c <mpc_sqrt@@Base+0x1bc>
   10958:	mov	x10, x24
   1095c:	ldr	x8, [x24]
   10960:	ldr	x9, [x10, #32]!
   10964:	sub	x0, x29, #0x20
   10968:	cmp	x8, x9
   1096c:	str	x10, [sp, #16]
   10970:	csel	x23, x8, x9, gt
   10974:	bl	4aa0 <mpfr_init@plt>
   10978:	sub	x0, x29, #0x40
   1097c:	bl	4aa0 <mpfr_init@plt>
   10980:	mov	w21, w25
   10984:	cmp	w25, #0x1
   10988:	asr	w14, w28, #4
   1098c:	str	x24, [sp, #8]
   10990:	stp	w14, w27, [sp]
   10994:	str	w28, [sp, #28]
   10998:	b.lt	10b14 <mpc_sqrt@@Base+0x234>  // b.tstop
   1099c:	and	w13, w28, #0xf
   109a0:	ldr	x28, [x24]
   109a4:	ldr	x12, [x24, #32]
   109a8:	cmp	w27, #0x0
   109ac:	mov	w8, #0x2                   	// #2
   109b0:	cinc	w8, w8, gt
   109b4:	cmp	w14, #0x1
   109b8:	csel	w9, w8, w14, eq  // eq = none
   109bc:	b	10c7c <mpc_sqrt@@Base+0x39c>
   109c0:	ldr	x8, [x26, #48]
   109c4:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
   109c8:	asr	w19, w20, #31
   109cc:	cmp	x8, x9
   109d0:	b.ne	109f0 <mpc_sqrt@@Base+0x110>  // b.any
   109d4:	mov	w1, #0x1                   	// #1
   109d8:	mov	x0, x24
   109dc:	bl	5120 <mpfr_set_inf@plt>
   109e0:	add	x0, x24, #0x20
   109e4:	mov	w1, w19
   109e8:	bl	5120 <mpfr_set_inf@plt>
   109ec:	b	10b6c <mpc_sqrt@@Base+0x28c>
   109f0:	ldr	x9, [x26, #16]
   109f4:	mov	x10, #0x2                   	// #2
   109f8:	movk	x10, #0x8000, lsl #48
   109fc:	cmp	x9, x10
   10a00:	b.eq	10b00 <mpc_sqrt@@Base+0x220>  // b.none
   10a04:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
   10a08:	cmp	x9, x10
   10a0c:	b.ne	10af0 <mpc_sqrt@@Base+0x210>  // b.any
   10a10:	ldr	x0, [sp, #72]
   10a14:	ldr	w21, [x26, #8]
   10a18:	bl	54d0 <mpfr_number_p@plt>
   10a1c:	tbnz	w21, #31, 10c2c <mpc_sqrt@@Base+0x34c>
   10a20:	cbz	w0, 10f78 <mpc_sqrt@@Base+0x698>
   10a24:	mov	w1, #0x1                   	// #1
   10a28:	mov	x0, x24
   10a2c:	mov	w19, #0x1                   	// #1
   10a30:	bl	5120 <mpfr_set_inf@plt>
   10a34:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
   10a38:	str	w19, [x24, #40]
   10a3c:	str	x8, [x24, #48]
   10a40:	tbz	w20, #31, 10b6c <mpc_sqrt@@Base+0x28c>
   10a44:	b	10b5c <mpc_sqrt@@Base+0x27c>
   10a48:	cbz	w25, 10b40 <mpc_sqrt@@Base+0x260>
   10a4c:	cmp	w25, #0x1
   10a50:	b.lt	10b74 <mpc_sqrt@@Base+0x294>  // b.tstop
   10a54:	and	w2, w28, #0xf
   10a58:	mov	x0, x24
   10a5c:	mov	x1, x26
   10a60:	bl	5350 <mpfr_sqrt@plt>
   10a64:	mov	w19, w0
   10a68:	mov	w8, #0x1                   	// #1
   10a6c:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   10a70:	str	w8, [x24, #40]
   10a74:	str	x9, [x24, #48]
   10a78:	tbz	w20, #31, 10a8c <mpc_sqrt@@Base+0x1ac>
   10a7c:	mov	x0, x24
   10a80:	mov	x1, x24
   10a84:	mov	w2, wzr
   10a88:	bl	4f60 <mpc_conj@plt>
   10a8c:	cmp	w19, #0x0
   10a90:	cset	w8, ne  // ne = any
   10a94:	mov	w9, #0x2                   	// #2
   10a98:	b	11028 <mpc_sqrt@@Base+0x748>
   10a9c:	ldr	x8, [sp, #72]
   10aa0:	sub	x0, x29, #0x20
   10aa4:	sub	x1, x29, #0x20
   10aa8:	mov	w2, #0x1                   	// #1
   10aac:	ldp	q1, q0, [x8]
   10ab0:	mov	w3, wzr
   10ab4:	stp	q1, q0, [x29, #-32]
   10ab8:	bl	5320 <mpfr_div_2ui@plt>
   10abc:	cmp	w27, #0x1
   10ac0:	b.lt	10bb0 <mpc_sqrt@@Base+0x2d0>  // b.tstop
   10ac4:	and	w2, w28, #0xf
   10ac8:	sub	x1, x29, #0x20
   10acc:	mov	x0, x24
   10ad0:	bl	5350 <mpfr_sqrt@plt>
   10ad4:	mov	w19, w0
   10ad8:	add	x0, x24, #0x20
   10adc:	asr	w2, w28, #4
   10ae0:	sub	x1, x29, #0x20
   10ae4:	bl	5350 <mpfr_sqrt@plt>
   10ae8:	mov	w20, w0
   10aec:	b	10c14 <mpc_sqrt@@Base+0x334>
   10af0:	mov	x9, #0x2                   	// #2
   10af4:	movk	x9, #0x8000, lsl #48
   10af8:	cmp	x8, x9
   10afc:	b.ne	10950 <mpc_sqrt@@Base+0x70>  // b.any
   10b00:	mov	x0, x24
   10b04:	bl	4a40 <mpfr_set_nan@plt>
   10b08:	add	x0, x24, #0x20
   10b0c:	bl	4a40 <mpfr_set_nan@plt>
   10b10:	b	10b6c <mpc_sqrt@@Base+0x28c>
   10b14:	ldr	x28, [x24, #32]
   10b18:	ldr	x12, [x24]
   10b1c:	cmp	w27, #0x1
   10b20:	b.lt	10c44 <mpc_sqrt@@Base+0x364>  // b.tstop
   10b24:	ldr	w8, [sp, #28]
   10b28:	mov	w9, #0x3                   	// #3
   10b2c:	mov	w13, w14
   10b30:	and	w8, w8, #0xf
   10b34:	cmp	w8, #0x1
   10b38:	csel	w9, w9, w8, eq  // eq = none
   10b3c:	b	10c7c <mpc_sqrt@@Base+0x39c>
   10b40:	mov	x0, x24
   10b44:	mov	x1, xzr
   10b48:	mov	x2, xzr
   10b4c:	mov	w3, wzr
   10b50:	bl	5040 <mpc_set_ui_ui@plt>
   10b54:	mov	w0, wzr
   10b58:	tbz	w20, #31, 11218 <mpc_sqrt@@Base+0x938>
   10b5c:	mov	x0, x24
   10b60:	mov	x1, x24
   10b64:	mov	w2, wzr
   10b68:	bl	4f60 <mpc_conj@plt>
   10b6c:	mov	w0, wzr
   10b70:	b	11218 <mpc_sqrt@@Base+0x938>
   10b74:	ldr	x1, [x26]
   10b78:	sub	x0, x29, #0x20
   10b7c:	bl	5440 <mpfr_init2@plt>
   10b80:	sub	x0, x29, #0x20
   10b84:	mov	x1, x26
   10b88:	mov	w2, wzr
   10b8c:	bl	4b80 <mpfr_neg@plt>
   10b90:	add	x19, x24, #0x20
   10b94:	asr	w2, w28, #4
   10b98:	tbnz	w20, #31, 10fc8 <mpc_sqrt@@Base+0x6e8>
   10b9c:	sub	x1, x29, #0x20
   10ba0:	mov	x0, x19
   10ba4:	bl	5350 <mpfr_sqrt@plt>
   10ba8:	mov	w20, w0
   10bac:	b	11000 <mpc_sqrt@@Base+0x720>
   10bb0:	sub	x0, x29, #0x20
   10bb4:	sub	x1, x29, #0x20
   10bb8:	mov	w2, wzr
   10bbc:	bl	4b80 <mpfr_neg@plt>
   10bc0:	and	w2, w28, #0xf
   10bc4:	sub	x1, x29, #0x20
   10bc8:	mov	x0, x24
   10bcc:	bl	5350 <mpfr_sqrt@plt>
   10bd0:	asr	w8, w28, #4
   10bd4:	mov	w9, #0x2                   	// #2
   10bd8:	cmp	w8, #0x3
   10bdc:	add	x21, x24, #0x20
   10be0:	csel	w9, w9, w8, eq  // eq = none
   10be4:	cmp	w8, #0x2
   10be8:	mov	w8, #0x3                   	// #3
   10bec:	mov	w19, w0
   10bf0:	csel	w2, w8, w9, eq  // eq = none
   10bf4:	sub	x1, x29, #0x20
   10bf8:	mov	x0, x21
   10bfc:	bl	5350 <mpfr_sqrt@plt>
   10c00:	neg	w20, w0
   10c04:	mov	x0, x21
   10c08:	mov	x1, x21
   10c0c:	mov	w2, wzr
   10c10:	bl	4b80 <mpfr_neg@plt>
   10c14:	cmp	w19, #0x0
   10c18:	mov	w8, #0x2                   	// #2
   10c1c:	cset	w9, ne  // ne = any
   10c20:	csel	w8, w8, w9, lt  // lt = tstop
   10c24:	cmp	w20, #0x0
   10c28:	b	11204 <mpc_sqrt@@Base+0x924>
   10c2c:	cbz	w0, 11030 <mpc_sqrt@@Base+0x750>
   10c30:	mov	w8, #0x1                   	// #1
   10c34:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   10c38:	str	w8, [x24, #8]
   10c3c:	str	x9, [x24, #16]
   10c40:	b	109e0 <mpc_sqrt@@Base+0x100>
   10c44:	ldr	w10, [sp, #28]
   10c48:	cmp	w14, #0x3
   10c4c:	mov	w8, #0x2                   	// #2
   10c50:	mov	w9, #0x3                   	// #3
   10c54:	and	w10, w10, #0xf
   10c58:	csel	w11, w8, w14, eq  // eq = none
   10c5c:	cmp	w14, #0x2
   10c60:	csel	w13, w9, w11, eq  // eq = none
   10c64:	cmp	w10, #0x3
   10c68:	csel	w11, w8, w10, eq  // eq = none
   10c6c:	cmp	w10, #0x2
   10c70:	csel	w9, w9, w11, eq  // eq = none
   10c74:	cmp	w9, #0x1
   10c78:	csel	w9, w8, w9, eq  // eq = none
   10c7c:	cmp	w13, #0x0
   10c80:	mov	w8, #0xffffffff            	// #-1
   10c84:	cinc	x10, x28, eq  // eq = none
   10c88:	cmp	w20, #0x0
   10c8c:	cneg	w8, w8, ge  // ge = tcont
   10c90:	cmp	w9, #0x0
   10c94:	mov	w27, wzr
   10c98:	stp	w9, w8, [sp, #40]
   10c9c:	cinc	x8, x12, eq  // eq = none
   10ca0:	str	w13, [sp, #60]
   10ca4:	str	x10, [sp, #48]
   10ca8:	str	x12, [sp, #64]
   10cac:	str	x8, [sp, #32]
   10cb0:	cmp	w27, #0x1
   10cb4:	b.hi	10cc8 <mpc_sqrt@@Base+0x3e8>  // b.pmore
   10cb8:	mov	x0, x23
   10cbc:	bl	4d20 <mpc_ceil_log2@plt>
   10cc0:	add	x8, x0, #0x4
   10cc4:	b	10cd4 <mpc_sqrt@@Base+0x3f4>
   10cc8:	cmp	x23, #0x0
   10ccc:	cinc	x8, x23, lt  // lt = tstop
   10cd0:	asr	x8, x8, #1
   10cd4:	add	x23, x8, x23
   10cd8:	sub	x0, x29, #0x20
   10cdc:	mov	x1, x23
   10ce0:	bl	4c80 <mpfr_set_prec@plt>
   10ce4:	sub	x0, x29, #0x40
   10ce8:	mov	x1, x23
   10cec:	bl	4c80 <mpfr_set_prec@plt>
   10cf0:	sub	x0, x29, #0x20
   10cf4:	mov	w2, #0x3                   	// #3
   10cf8:	mov	x1, x26
   10cfc:	bl	51a0 <mpc_abs@plt>
   10d00:	mov	w19, w0
   10d04:	sub	x0, x29, #0x20
   10d08:	sub	x1, x29, #0x20
   10d0c:	mov	w3, #0x3                   	// #3
   10d10:	mov	x2, x26
   10d14:	tbnz	w21, #31, 10d20 <mpc_sqrt@@Base+0x440>
   10d18:	bl	4e60 <mpfr_add@plt>
   10d1c:	b	10d24 <mpc_sqrt@@Base+0x444>
   10d20:	bl	4a60 <mpfr_sub@plt>
   10d24:	orr	w19, w0, w19
   10d28:	sub	x0, x29, #0x20
   10d2c:	sub	x1, x29, #0x20
   10d30:	mov	w2, #0x1                   	// #1
   10d34:	mov	w3, #0x3                   	// #3
   10d38:	add	w27, w27, #0x1
   10d3c:	bl	5320 <mpfr_div_2ui@plt>
   10d40:	orr	w19, w19, w0
   10d44:	sub	x0, x29, #0x20
   10d48:	sub	x1, x29, #0x20
   10d4c:	mov	w2, #0x3                   	// #3
   10d50:	bl	5350 <mpfr_sqrt@plt>
   10d54:	orr	w25, w19, w0
   10d58:	sub	x0, x29, #0x20
   10d5c:	bl	5390 <mpfr_min_prec@plt>
   10d60:	mov	x19, x0
   10d64:	cmp	x0, x28
   10d68:	sub	x1, x23, #0x2
   10d6c:	b.gt	10d88 <mpc_sqrt@@Base+0x4a8>
   10d70:	ldr	w8, [sp, #60]
   10d74:	cbz	w8, 10d9c <mpc_sqrt@@Base+0x4bc>
   10d78:	sub	x0, x29, #0x20
   10d7c:	mov	w2, #0x3                   	// #3
   10d80:	mov	w3, #0x3                   	// #3
   10d84:	b	10da8 <mpc_sqrt@@Base+0x4c8>
   10d88:	ldr	x4, [sp, #48]
   10d8c:	sub	x0, x29, #0x20
   10d90:	mov	w2, #0x3                   	// #3
   10d94:	mov	w3, #0x2                   	// #2
   10d98:	b	10dac <mpc_sqrt@@Base+0x4cc>
   10d9c:	sub	x0, x29, #0x20
   10da0:	mov	w2, #0x3                   	// #3
   10da4:	mov	w3, wzr
   10da8:	mov	x4, x28
   10dac:	bl	5450 <mpfr_can_round@plt>
   10db0:	cbz	w25, 10db8 <mpc_sqrt@@Base+0x4d8>
   10db4:	cbz	w0, 10cb0 <mpc_sqrt@@Base+0x3d0>
   10db8:	ldr	x1, [sp, #72]
   10dbc:	sub	x0, x29, #0x40
   10dc0:	sub	x2, x29, #0x20
   10dc4:	mov	w3, w22
   10dc8:	bl	5150 <mpfr_div@plt>
   10dcc:	ldr	w8, [sp, #44]
   10dd0:	cmp	w0, #0x0
   10dd4:	ccmp	w25, #0x0, #0x4, eq  // eq = none
   10dd8:	sub	x1, x29, #0x40
   10ddc:	csel	w20, w8, w0, ne  // ne = any
   10de0:	sub	x0, x29, #0x40
   10de4:	mov	w2, #0x1                   	// #1
   10de8:	mov	w3, w22
   10dec:	bl	5320 <mpfr_div_2ui@plt>
   10df0:	orr	w24, w20, w0
   10df4:	sub	x0, x29, #0x40
   10df8:	bl	5390 <mpfr_min_prec@plt>
   10dfc:	ldr	x4, [sp, #64]
   10e00:	mov	x20, x0
   10e04:	sub	x1, x23, #0x3
   10e08:	cmp	x0, x4
   10e0c:	b.gt	10e28 <mpc_sqrt@@Base+0x548>
   10e10:	ldr	w8, [sp, #40]
   10e14:	cbz	w8, 10e3c <mpc_sqrt@@Base+0x55c>
   10e18:	sub	x0, x29, #0x40
   10e1c:	mov	w2, w22
   10e20:	mov	w3, w22
   10e24:	b	10e48 <mpc_sqrt@@Base+0x568>
   10e28:	ldr	x4, [sp, #32]
   10e2c:	sub	x0, x29, #0x40
   10e30:	mov	w3, #0x1                   	// #1
   10e34:	mov	w2, w22
   10e38:	b	10e48 <mpc_sqrt@@Base+0x568>
   10e3c:	sub	x0, x29, #0x40
   10e40:	mov	w2, w22
   10e44:	mov	w3, wzr
   10e48:	bl	5450 <mpfr_can_round@plt>
   10e4c:	cbz	w24, 10e54 <mpc_sqrt@@Base+0x574>
   10e50:	cbz	w0, 10cb0 <mpc_sqrt@@Base+0x3d0>
   10e54:	cmp	w21, #0x1
   10e58:	b.lt	10e98 <mpc_sqrt@@Base+0x5b8>  // b.tstop
   10e5c:	ldr	w8, [sp, #28]
   10e60:	ldr	x26, [sp, #8]
   10e64:	ldur	w3, [x29, #-24]
   10e68:	sub	x1, x29, #0x20
   10e6c:	and	w2, w8, #0xf
   10e70:	mov	x0, x26
   10e74:	bl	51d0 <mpfr_set4@plt>
   10e78:	ldur	w3, [x29, #-56]
   10e7c:	mov	w27, w0
   10e80:	ldr	x0, [sp, #16]
   10e84:	ldr	w2, [sp]
   10e88:	sub	x1, x29, #0x40
   10e8c:	bl	51d0 <mpfr_set4@plt>
   10e90:	ldr	w10, [sp, #4]
   10e94:	b	10f08 <mpc_sqrt@@Base+0x628>
   10e98:	ldr	w9, [sp, #4]
   10e9c:	ldr	w8, [sp, #28]
   10ea0:	ldr	x26, [sp, #8]
   10ea4:	cmp	w9, #0x1
   10ea8:	and	w2, w8, #0xf
   10eac:	b.lt	10ee0 <mpc_sqrt@@Base+0x600>  // b.tstop
   10eb0:	ldur	w3, [x29, #-56]
   10eb4:	sub	x1, x29, #0x40
   10eb8:	mov	x0, x26
   10ebc:	mov	w23, w9
   10ec0:	bl	51d0 <mpfr_set4@plt>
   10ec4:	ldur	w3, [x29, #-24]
   10ec8:	mov	w27, w0
   10ecc:	ldr	x0, [sp, #16]
   10ed0:	ldr	w2, [sp]
   10ed4:	sub	x1, x29, #0x20
   10ed8:	bl	51d0 <mpfr_set4@plt>
   10edc:	b	10f04 <mpc_sqrt@@Base+0x624>
   10ee0:	sub	x1, x29, #0x40
   10ee4:	mov	x0, x26
   10ee8:	mov	w23, w9
   10eec:	bl	4b80 <mpfr_neg@plt>
   10ef0:	mov	w27, w0
   10ef4:	ldr	x0, [sp, #16]
   10ef8:	ldr	w2, [sp]
   10efc:	sub	x1, x29, #0x20
   10f00:	bl	4b80 <mpfr_neg@plt>
   10f04:	mov	w10, w23
   10f08:	mov	w23, w0
   10f0c:	ldr	x8, [sp, #64]
   10f10:	ldr	w9, [sp, #60]
   10f14:	cmp	x19, x28
   10f18:	b.gt	10f5c <mpc_sqrt@@Base+0x67c>
   10f1c:	ldr	w19, [sp, #40]
   10f20:	cbz	w25, 110a4 <mpc_sqrt@@Base+0x7c4>
   10f24:	cbz	w9, 10f64 <mpc_sqrt@@Base+0x684>
   10f28:	cmp	w21, #0x1
   10f2c:	b.lt	10f8c <mpc_sqrt@@Base+0x6ac>  // b.tstop
   10f30:	cmp	w9, #0x2
   10f34:	b.ne	10fc0 <mpc_sqrt@@Base+0x6e0>  // b.any
   10f38:	ldr	x8, [x26, #16]
   10f3c:	mov	x9, #0x2                   	// #2
   10f40:	movk	x9, #0x8000, lsl #48
   10f44:	mov	w27, w10
   10f48:	cmp	x8, x9
   10f4c:	b.gt	1103c <mpc_sqrt@@Base+0x75c>
   10f50:	b.ne	11054 <mpc_sqrt@@Base+0x774>  // b.any
   10f54:	bl	4b00 <mpfr_set_erangeflag@plt>
   10f58:	b	11054 <mpc_sqrt@@Base+0x774>
   10f5c:	ldr	w19, [sp, #40]
   10f60:	b	110a4 <mpc_sqrt@@Base+0x7c4>
   10f64:	cmp	w21, #0x0
   10f68:	b.gt	110a8 <mpc_sqrt@@Base+0x7c8>
   10f6c:	cmp	w10, #0x0
   10f70:	cneg	w23, w25, le
   10f74:	b	110a4 <mpc_sqrt@@Base+0x7c4>
   10f78:	mov	x0, x24
   10f7c:	mov	x1, x26
   10f80:	mov	w2, w28
   10f84:	bl	5580 <mpc_set@plt>
   10f88:	b	11218 <mpc_sqrt@@Base+0x938>
   10f8c:	cmp	w10, #0x1
   10f90:	b.lt	1106c <mpc_sqrt@@Base+0x78c>  // b.tstop
   10f94:	cmp	w9, #0x2
   10f98:	b.ne	11098 <mpc_sqrt@@Base+0x7b8>  // b.any
   10f9c:	ldr	x8, [x26, #48]
   10fa0:	mov	x9, #0x2                   	// #2
   10fa4:	movk	x9, #0x8000, lsl #48
   10fa8:	mov	w28, w10
   10fac:	cmp	x8, x9
   10fb0:	b.gt	11194 <mpc_sqrt@@Base+0x8b4>
   10fb4:	b.ne	111ac <mpc_sqrt@@Base+0x8cc>  // b.any
   10fb8:	bl	4b00 <mpfr_set_erangeflag@plt>
   10fbc:	b	111ac <mpc_sqrt@@Base+0x8cc>
   10fc0:	mov	w25, #0xffffffff            	// #-1
   10fc4:	b	110a8 <mpc_sqrt@@Base+0x7c8>
   10fc8:	cmp	w2, #0x3
   10fcc:	mov	w8, #0x2                   	// #2
   10fd0:	csel	w8, w8, w2, eq  // eq = none
   10fd4:	cmp	w2, #0x2
   10fd8:	mov	w9, #0x3                   	// #3
   10fdc:	csel	w2, w9, w8, eq  // eq = none
   10fe0:	sub	x1, x29, #0x20
   10fe4:	mov	x0, x19
   10fe8:	bl	5350 <mpfr_sqrt@plt>
   10fec:	neg	w20, w0
   10ff0:	mov	x0, x19
   10ff4:	mov	x1, x19
   10ff8:	mov	w2, wzr
   10ffc:	bl	4b80 <mpfr_neg@plt>
   11000:	mov	w8, #0x1                   	// #1
   11004:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   11008:	sub	x0, x29, #0x20
   1100c:	str	w8, [x24, #8]
   11010:	str	x9, [x24, #16]
   11014:	bl	4d60 <mpfr_clear@plt>
   11018:	cmp	w20, #0x0
   1101c:	cset	w8, ne  // ne = any
   11020:	lsl	w8, w8, #2
   11024:	mov	w9, #0x8                   	// #8
   11028:	csel	w0, w9, w8, lt  // lt = tstop
   1102c:	b	11218 <mpc_sqrt@@Base+0x938>
   11030:	mov	x0, x24
   11034:	bl	4a40 <mpfr_set_nan@plt>
   11038:	b	109e0 <mpc_sqrt@@Base+0x100>
   1103c:	ldr	w8, [x26, #8]
   11040:	cmp	w8, #0x1
   11044:	b.lt	11054 <mpc_sqrt@@Base+0x774>  // b.tstop
   11048:	mov	x0, x26
   1104c:	bl	4e00 <mpfr_nextabove@plt>
   11050:	b	1105c <mpc_sqrt@@Base+0x77c>
   11054:	mov	x0, x26
   11058:	bl	4bb0 <mpfr_nextbelow@plt>
   1105c:	ldr	x8, [sp, #64]
   11060:	mov	w25, #0x1                   	// #1
   11064:	mov	w10, w27
   11068:	b	110a8 <mpc_sqrt@@Base+0x7c8>
   1106c:	cmp	w9, #0x2
   11070:	b.ne	110a0 <mpc_sqrt@@Base+0x7c0>  // b.any
   11074:	ldr	x8, [x26, #48]
   11078:	mov	x9, #0x2                   	// #2
   1107c:	movk	x9, #0x8000, lsl #48
   11080:	mov	w28, w10
   11084:	cmp	x8, x9
   11088:	b.gt	11238 <mpc_sqrt@@Base+0x958>
   1108c:	b.ne	11250 <mpc_sqrt@@Base+0x970>  // b.any
   11090:	bl	4b00 <mpfr_set_erangeflag@plt>
   11094:	b	11250 <mpc_sqrt@@Base+0x970>
   11098:	mov	w23, #0xffffffff            	// #-1
   1109c:	b	110a4 <mpc_sqrt@@Base+0x7c4>
   110a0:	mov	w23, #0x1                   	// #1
   110a4:	mov	w25, w27
   110a8:	cmp	x20, x8
   110ac:	b.gt	111dc <mpc_sqrt@@Base+0x8fc>
   110b0:	cbz	w24, 111dc <mpc_sqrt@@Base+0x8fc>
   110b4:	cbz	w19, 110d0 <mpc_sqrt@@Base+0x7f0>
   110b8:	cmp	w21, #0x1
   110bc:	b.lt	110e8 <mpc_sqrt@@Base+0x808>  // b.tstop
   110c0:	cmp	w19, w22
   110c4:	b.ne	1111c <mpc_sqrt@@Base+0x83c>  // b.any
   110c8:	mov	w19, w24
   110cc:	b	111e0 <mpc_sqrt@@Base+0x900>
   110d0:	cmp	w21, #0x0
   110d4:	mov	w19, w24
   110d8:	b.gt	111e0 <mpc_sqrt@@Base+0x900>
   110dc:	cmp	w10, #0x0
   110e0:	cneg	w25, w24, le
   110e4:	b	111dc <mpc_sqrt@@Base+0x8fc>
   110e8:	cmp	w10, #0x1
   110ec:	b.lt	11164 <mpc_sqrt@@Base+0x884>  // b.tstop
   110f0:	cmp	w19, w22
   110f4:	b.eq	1128c <mpc_sqrt@@Base+0x9ac>  // b.none
   110f8:	ldr	x8, [x26, #16]
   110fc:	mov	x9, #0x2                   	// #2
   11100:	movk	x9, #0x8000, lsl #48
   11104:	neg	w25, w24
   11108:	cmp	x8, x9
   1110c:	b.gt	111bc <mpc_sqrt@@Base+0x8dc>
   11110:	b.ne	111d4 <mpc_sqrt@@Base+0x8f4>  // b.any
   11114:	bl	4b00 <mpfr_set_erangeflag@plt>
   11118:	b	111d4 <mpc_sqrt@@Base+0x8f4>
   1111c:	ldr	x8, [x26, #48]
   11120:	mov	x9, #0x2                   	// #2
   11124:	movk	x9, #0x8000, lsl #48
   11128:	neg	w19, w24
   1112c:	cmp	x8, x9
   11130:	b.gt	11140 <mpc_sqrt@@Base+0x860>
   11134:	b.ne	11158 <mpc_sqrt@@Base+0x878>  // b.any
   11138:	bl	4b00 <mpfr_set_erangeflag@plt>
   1113c:	b	11158 <mpc_sqrt@@Base+0x878>
   11140:	ldr	w8, [x26, #40]
   11144:	cmp	w8, #0x1
   11148:	b.lt	11158 <mpc_sqrt@@Base+0x878>  // b.tstop
   1114c:	ldr	x0, [sp, #16]
   11150:	bl	4bb0 <mpfr_nextbelow@plt>
   11154:	b	111e0 <mpc_sqrt@@Base+0x900>
   11158:	ldr	x0, [sp, #16]
   1115c:	bl	4e00 <mpfr_nextabove@plt>
   11160:	b	111e0 <mpc_sqrt@@Base+0x900>
   11164:	cmp	w19, w22
   11168:	b.ne	11174 <mpc_sqrt@@Base+0x894>  // b.any
   1116c:	neg	w25, w24
   11170:	b	111dc <mpc_sqrt@@Base+0x8fc>
   11174:	ldr	x8, [x26, #16]
   11178:	mov	x9, #0x2                   	// #2
   1117c:	movk	x9, #0x8000, lsl #48
   11180:	cmp	x8, x9
   11184:	b.gt	1126c <mpc_sqrt@@Base+0x98c>
   11188:	b.ne	11284 <mpc_sqrt@@Base+0x9a4>  // b.any
   1118c:	bl	4b00 <mpfr_set_erangeflag@plt>
   11190:	b	11284 <mpc_sqrt@@Base+0x9a4>
   11194:	ldr	w8, [x26, #40]
   11198:	cmp	w8, #0x1
   1119c:	b.lt	111ac <mpc_sqrt@@Base+0x8cc>  // b.tstop
   111a0:	ldr	x0, [sp, #16]
   111a4:	bl	4e00 <mpfr_nextabove@plt>
   111a8:	b	111b4 <mpc_sqrt@@Base+0x8d4>
   111ac:	ldr	x0, [sp, #16]
   111b0:	bl	4bb0 <mpfr_nextbelow@plt>
   111b4:	mov	w23, #0x1                   	// #1
   111b8:	b	1125c <mpc_sqrt@@Base+0x97c>
   111bc:	ldr	w8, [x26, #8]
   111c0:	cmp	w8, #0x1
   111c4:	b.lt	111d4 <mpc_sqrt@@Base+0x8f4>  // b.tstop
   111c8:	mov	x0, x26
   111cc:	bl	4bb0 <mpfr_nextbelow@plt>
   111d0:	b	111dc <mpc_sqrt@@Base+0x8fc>
   111d4:	mov	x0, x26
   111d8:	bl	4e00 <mpfr_nextabove@plt>
   111dc:	mov	w19, w23
   111e0:	sub	x0, x29, #0x20
   111e4:	bl	4d60 <mpfr_clear@plt>
   111e8:	sub	x0, x29, #0x40
   111ec:	bl	4d60 <mpfr_clear@plt>
   111f0:	cmp	w25, #0x0
   111f4:	mov	w8, #0x2                   	// #2
   111f8:	cset	w9, ne  // ne = any
   111fc:	csel	w8, w8, w9, lt  // lt = tstop
   11200:	cmp	w19, #0x0
   11204:	cset	w9, ne  // ne = any
   11208:	lsl	w9, w9, #2
   1120c:	mov	w10, #0x8                   	// #8
   11210:	csel	w9, w10, w9, lt  // lt = tstop
   11214:	orr	w0, w8, w9
   11218:	ldp	x20, x19, [sp, #224]
   1121c:	ldp	x22, x21, [sp, #208]
   11220:	ldp	x24, x23, [sp, #192]
   11224:	ldp	x26, x25, [sp, #176]
   11228:	ldp	x28, x27, [sp, #160]
   1122c:	ldp	x29, x30, [sp, #144]
   11230:	add	sp, sp, #0xf0
   11234:	ret
   11238:	ldr	w8, [x26, #40]
   1123c:	cmp	w8, #0x1
   11240:	b.lt	11250 <mpc_sqrt@@Base+0x970>  // b.tstop
   11244:	ldr	x0, [sp, #16]
   11248:	bl	4e00 <mpfr_nextabove@plt>
   1124c:	b	11258 <mpc_sqrt@@Base+0x978>
   11250:	ldr	x0, [sp, #16]
   11254:	bl	4bb0 <mpfr_nextbelow@plt>
   11258:	mov	w23, #0xffffffff            	// #-1
   1125c:	ldr	x8, [sp, #64]
   11260:	mov	w25, w27
   11264:	mov	w10, w28
   11268:	b	110a8 <mpc_sqrt@@Base+0x7c8>
   1126c:	ldr	w8, [x26, #8]
   11270:	cmp	w8, #0x1
   11274:	b.lt	11284 <mpc_sqrt@@Base+0x9a4>  // b.tstop
   11278:	mov	x0, x26
   1127c:	bl	4bb0 <mpfr_nextbelow@plt>
   11280:	b	1128c <mpc_sqrt@@Base+0x9ac>
   11284:	mov	x0, x26
   11288:	bl	4e00 <mpfr_nextabove@plt>
   1128c:	mov	w19, w23
   11290:	mov	w25, w24
   11294:	b	111e0 <mpc_sqrt@@Base+0x900>

0000000000011298 <mpc_strtoc@@Base>:
   11298:	sub	sp, sp, #0x60
   1129c:	stp	x22, x21, [sp, #64]
   112a0:	stp	x20, x19, [sp, #80]
   112a4:	mov	x19, x2
   112a8:	mov	x21, x1
   112ac:	cmp	w3, #0x1
   112b0:	mov	x20, x0
   112b4:	stp	x29, x30, [sp, #16]
   112b8:	stp	x26, x25, [sp, #32]
   112bc:	stp	x24, x23, [sp, #48]
   112c0:	add	x29, sp, #0x10
   112c4:	b.eq	113ac <mpc_strtoc@@Base+0x114>  // b.none
   112c8:	cbz	x21, 113ac <mpc_strtoc@@Base+0x114>
   112cc:	mov	w22, w3
   112d0:	cmp	w3, #0x24
   112d4:	b.gt	113ac <mpc_strtoc@@Base+0x114>
   112d8:	add	x0, sp, #0x8
   112dc:	mov	w23, w4
   112e0:	str	x21, [sp, #8]
   112e4:	bl	1142c <mpc_strtoc@@Base+0x194>
   112e8:	ldr	x24, [sp, #8]
   112ec:	ldrb	w8, [x24]
   112f0:	cmp	w8, #0x28
   112f4:	b.ne	11308 <mpc_strtoc@@Base+0x70>  // b.any
   112f8:	add	x24, x24, #0x1
   112fc:	mov	w26, #0x1                   	// #1
   11300:	str	x24, [sp, #8]
   11304:	b	1130c <mpc_strtoc@@Base+0x74>
   11308:	mov	w26, wzr
   1130c:	and	w4, w23, #0xf
   11310:	mov	x2, sp
   11314:	mov	x0, x20
   11318:	mov	x1, x24
   1131c:	mov	w3, w22
   11320:	bl	4ac0 <mpfr_strtofr@plt>
   11324:	ldr	x25, [sp]
   11328:	cmp	x25, x24
   1132c:	b.eq	113ac <mpc_strtoc@@Base+0x114>  // b.none
   11330:	mov	w24, w0
   11334:	str	x25, [sp, #8]
   11338:	cbz	w26, 113e4 <mpc_strtoc@@Base+0x14c>
   1133c:	bl	5170 <__ctype_b_loc@plt>
   11340:	ldr	x8, [x0]
   11344:	ldrb	w9, [x25]
   11348:	ldrh	w8, [x8, x9, lsl #1]
   1134c:	tbz	w8, #13, 113ac <mpc_strtoc@@Base+0x114>
   11350:	add	x0, sp, #0x8
   11354:	bl	1142c <mpc_strtoc@@Base+0x194>
   11358:	ldr	x25, [sp, #8]
   1135c:	add	x0, x20, #0x20
   11360:	asr	w4, w23, #4
   11364:	mov	x2, sp
   11368:	mov	x1, x25
   1136c:	mov	w3, w22
   11370:	bl	4ac0 <mpfr_strtofr@plt>
   11374:	ldr	x8, [sp]
   11378:	cmp	x8, x25
   1137c:	b.eq	113ac <mpc_strtoc@@Base+0x114>  // b.none
   11380:	mov	w22, w0
   11384:	add	x0, sp, #0x8
   11388:	str	x8, [sp, #8]
   1138c:	bl	1142c <mpc_strtoc@@Base+0x194>
   11390:	ldr	x8, [sp, #8]
   11394:	ldrb	w9, [x8]
   11398:	cmp	w9, #0x29
   1139c:	b.ne	113ac <mpc_strtoc@@Base+0x114>  // b.any
   113a0:	add	x25, x8, #0x1
   113a4:	str	x25, [sp, #8]
   113a8:	b	113f8 <mpc_strtoc@@Base+0x160>
   113ac:	cbz	x19, 113b4 <mpc_strtoc@@Base+0x11c>
   113b0:	str	x21, [x19]
   113b4:	mov	x0, x20
   113b8:	bl	4a40 <mpfr_set_nan@plt>
   113bc:	add	x0, x20, #0x20
   113c0:	bl	4a40 <mpfr_set_nan@plt>
   113c4:	mov	w0, #0xffffffff            	// #-1
   113c8:	ldp	x20, x19, [sp, #80]
   113cc:	ldp	x22, x21, [sp, #64]
   113d0:	ldp	x24, x23, [sp, #48]
   113d4:	ldp	x26, x25, [sp, #32]
   113d8:	ldp	x29, x30, [sp, #16]
   113dc:	add	sp, sp, #0x60
   113e0:	ret
   113e4:	mov	w8, #0x1                   	// #1
   113e8:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   113ec:	mov	w22, wzr
   113f0:	str	w8, [x20, #40]
   113f4:	str	x9, [x20, #48]
   113f8:	cbz	x19, 11400 <mpc_strtoc@@Base+0x168>
   113fc:	str	x25, [x19]
   11400:	cmp	w24, #0x0
   11404:	mov	w8, #0x2                   	// #2
   11408:	cset	w9, ne  // ne = any
   1140c:	csel	w8, w8, w9, lt  // lt = tstop
   11410:	cmp	w22, #0x0
   11414:	cset	w9, ne  // ne = any
   11418:	lsl	w9, w9, #2
   1141c:	mov	w10, #0x8                   	// #8
   11420:	csel	w9, w10, w9, lt  // lt = tstop
   11424:	orr	w0, w9, w8
   11428:	b	113c8 <mpc_strtoc@@Base+0x130>
   1142c:	stp	x29, x30, [sp, #-32]!
   11430:	str	x19, [sp, #16]
   11434:	mov	x29, sp
   11438:	mov	x19, x0
   1143c:	bl	5170 <__ctype_b_loc@plt>
   11440:	ldr	x8, [x19]
   11444:	ldr	x9, [x0]
   11448:	ldrb	w10, [x8]
   1144c:	ldrh	w9, [x9, x10, lsl #1]
   11450:	tbz	w9, #13, 1146c <mpc_strtoc@@Base+0x1d4>
   11454:	add	x8, x8, #0x1
   11458:	str	x8, [x19]
   1145c:	ldr	x9, [x0]
   11460:	ldrb	w10, [x8], #1
   11464:	ldrh	w9, [x9, x10, lsl #1]
   11468:	tbnz	w9, #13, 11458 <mpc_strtoc@@Base+0x1c0>
   1146c:	ldr	x19, [sp, #16]
   11470:	ldp	x29, x30, [sp], #32
   11474:	ret

0000000000011478 <mpc_sub@@Base>:
   11478:	stp	x29, x30, [sp, #-64]!
   1147c:	stp	x20, x19, [sp, #48]
   11480:	mov	w19, w3
   11484:	and	w3, w3, #0xf
   11488:	str	x23, [sp, #16]
   1148c:	stp	x22, x21, [sp, #32]
   11490:	mov	x29, sp
   11494:	mov	x20, x2
   11498:	mov	x21, x1
   1149c:	mov	x22, x0
   114a0:	bl	4a60 <mpfr_sub@plt>
   114a4:	mov	w23, w0
   114a8:	add	x0, x22, #0x20
   114ac:	add	x1, x21, #0x20
   114b0:	add	x2, x20, #0x20
   114b4:	asr	w3, w19, #4
   114b8:	bl	4a60 <mpfr_sub@plt>
   114bc:	cmp	w23, #0x0
   114c0:	mov	w8, #0x2                   	// #2
   114c4:	cset	w9, ne  // ne = any
   114c8:	csel	w8, w8, w9, lt  // lt = tstop
   114cc:	cmp	w0, #0x0
   114d0:	cset	w9, ne  // ne = any
   114d4:	ldp	x20, x19, [sp, #48]
   114d8:	ldp	x22, x21, [sp, #32]
   114dc:	ldr	x23, [sp, #16]
   114e0:	lsl	w9, w9, #2
   114e4:	mov	w10, #0x8                   	// #8
   114e8:	csel	w9, w10, w9, lt  // lt = tstop
   114ec:	orr	w0, w9, w8
   114f0:	ldp	x29, x30, [sp], #64
   114f4:	ret

00000000000114f8 <mpc_sub_fr@@Base>:
   114f8:	stp	x29, x30, [sp, #-48]!
   114fc:	stp	x20, x19, [sp, #32]
   11500:	mov	w19, w3
   11504:	and	w3, w3, #0xf
   11508:	stp	x22, x21, [sp, #16]
   1150c:	mov	x29, sp
   11510:	mov	x20, x1
   11514:	mov	x21, x0
   11518:	bl	4a60 <mpfr_sub@plt>
   1151c:	ldr	w3, [x20, #40]
   11520:	mov	w22, w0
   11524:	add	x0, x21, #0x20
   11528:	add	x1, x20, #0x20
   1152c:	asr	w2, w19, #4
   11530:	bl	51d0 <mpfr_set4@plt>
   11534:	cmp	w22, #0x0
   11538:	mov	w8, #0x2                   	// #2
   1153c:	cset	w9, ne  // ne = any
   11540:	csel	w8, w8, w9, lt  // lt = tstop
   11544:	cmp	w0, #0x0
   11548:	cset	w9, ne  // ne = any
   1154c:	ldp	x20, x19, [sp, #32]
   11550:	ldp	x22, x21, [sp, #16]
   11554:	lsl	w9, w9, #2
   11558:	mov	w10, #0x8                   	// #8
   1155c:	csel	w9, w10, w9, lt  // lt = tstop
   11560:	orr	w0, w9, w8
   11564:	ldp	x29, x30, [sp], #48
   11568:	ret

000000000001156c <mpc_sub_ui@@Base>:
   1156c:	stp	x29, x30, [sp, #-48]!
   11570:	stp	x20, x19, [sp, #32]
   11574:	mov	w19, w3
   11578:	and	w3, w3, #0xf
   1157c:	stp	x22, x21, [sp, #16]
   11580:	mov	x29, sp
   11584:	mov	x20, x1
   11588:	mov	x21, x0
   1158c:	bl	50f0 <mpfr_sub_ui@plt>
   11590:	ldr	w3, [x20, #40]
   11594:	mov	w22, w0
   11598:	add	x0, x21, #0x20
   1159c:	add	x1, x20, #0x20
   115a0:	asr	w2, w19, #4
   115a4:	bl	51d0 <mpfr_set4@plt>
   115a8:	cmp	w22, #0x0
   115ac:	mov	w8, #0x2                   	// #2
   115b0:	cset	w9, ne  // ne = any
   115b4:	csel	w8, w8, w9, lt  // lt = tstop
   115b8:	cmp	w0, #0x0
   115bc:	cset	w9, ne  // ne = any
   115c0:	ldp	x20, x19, [sp, #32]
   115c4:	ldp	x22, x21, [sp, #16]
   115c8:	lsl	w9, w9, #2
   115cc:	mov	w10, #0x8                   	// #8
   115d0:	csel	w9, w10, w9, lt  // lt = tstop
   115d4:	orr	w0, w9, w8
   115d8:	ldp	x29, x30, [sp], #48
   115dc:	ret

00000000000115e0 <mpc_swap@@Base>:
   115e0:	stp	x29, x30, [sp, #-32]!
   115e4:	stp	x20, x19, [sp, #16]
   115e8:	mov	x29, sp
   115ec:	mov	x19, x1
   115f0:	mov	x20, x0
   115f4:	bl	5090 <mpfr_swap@plt>
   115f8:	add	x0, x20, #0x20
   115fc:	add	x1, x19, #0x20
   11600:	ldp	x20, x19, [sp, #16]
   11604:	ldp	x29, x30, [sp], #32
   11608:	b	5090 <mpfr_swap@plt>

000000000001160c <mpc_tan@@Base>:
   1160c:	sub	sp, sp, #0x110
   11610:	stp	x20, x19, [sp, #256]
   11614:	mov	x19, x0
   11618:	mov	x0, x1
   1161c:	stp	x29, x30, [sp, #176]
   11620:	stp	x28, x27, [sp, #192]
   11624:	stp	x26, x25, [sp, #208]
   11628:	stp	x24, x23, [sp, #224]
   1162c:	stp	x22, x21, [sp, #240]
   11630:	add	x29, sp, #0xb0
   11634:	mov	w20, w2
   11638:	mov	x21, x1
   1163c:	bl	54d0 <mpfr_number_p@plt>
   11640:	cbz	w0, 1169c <mpc_tan@@Base+0x90>
   11644:	add	x22, x21, #0x20
   11648:	mov	x0, x22
   1164c:	bl	54d0 <mpfr_number_p@plt>
   11650:	cbz	w0, 1169c <mpc_tan@@Base+0x90>
   11654:	ldr	x9, [x21, #16]
   11658:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
   1165c:	cmp	x9, x8
   11660:	b.ne	11710 <mpc_tan@@Base+0x104>  // b.any
   11664:	ldr	w3, [x21, #8]
   11668:	and	w2, w20, #0xf
   1166c:	mov	x0, x19
   11670:	mov	x1, x21
   11674:	bl	51d0 <mpfr_set4@plt>
   11678:	add	x0, x19, #0x20
   1167c:	asr	w2, w20, #4
   11680:	mov	x1, x22
   11684:	bl	4a30 <mpfr_tanh@plt>
   11688:	cmp	w0, #0x0
   1168c:	cset	w8, ne  // ne = any
   11690:	lsl	w8, w8, #2
   11694:	mov	w9, #0x8                   	// #8
   11698:	b	11750 <mpc_tan@@Base+0x144>
   1169c:	ldr	x9, [x21, #16]
   116a0:	ldr	x8, [x21, #48]
   116a4:	mov	x10, #0x2                   	// #2
   116a8:	movk	x10, #0x8000, lsl #48
   116ac:	cmp	x9, x10
   116b0:	b.ne	116e8 <mpc_tan@@Base+0xdc>  // b.any
   116b4:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
   116b8:	cmp	x8, x9
   116bc:	b.ne	117b8 <mpc_tan@@Base+0x1ac>  // b.any
   116c0:	ldr	w8, [x21, #40]
   116c4:	mov	x0, x19
   116c8:	mov	x1, xzr
   116cc:	mov	w3, w20
   116d0:	cmp	w8, #0x0
   116d4:	mov	w8, #0x1                   	// #1
   116d8:	cneg	x2, x8, lt  // lt = tstop
   116dc:	bl	52c0 <mpc_set_si_si@plt>
   116e0:	mov	w19, w0
   116e4:	b	11d64 <mpc_tan@@Base+0x758>
   116e8:	cmp	x8, x10
   116ec:	b.ne	11758 <mpc_tan@@Base+0x14c>  // b.any
   116f0:	mov	x0, x21
   116f4:	bl	51f0 <mpfr_sgn@plt>
   116f8:	cbnz	w0, 117b8 <mpc_tan@@Base+0x1ac>
   116fc:	mov	x0, x19
   11700:	mov	x1, x21
   11704:	mov	w2, w20
   11708:	bl	5580 <mpc_set@plt>
   1170c:	b	117c8 <mpc_tan@@Base+0x1bc>
   11710:	ldr	x9, [x21, #48]
   11714:	cmp	x9, x8
   11718:	b.ne	117d0 <mpc_tan@@Base+0x1c4>  // b.any
   1171c:	and	w2, w20, #0xf
   11720:	mov	x0, x19
   11724:	mov	x1, x21
   11728:	bl	4ab0 <mpfr_tan@plt>
   1172c:	ldr	w3, [x21, #40]
   11730:	mov	w23, w0
   11734:	add	x0, x19, #0x20
   11738:	asr	w2, w20, #4
   1173c:	mov	x1, x22
   11740:	bl	51d0 <mpfr_set4@plt>
   11744:	cmp	w23, #0x0
   11748:	cset	w8, ne  // ne = any
   1174c:	mov	w9, #0x2                   	// #2
   11750:	csel	w19, w9, w8, lt  // lt = tstop
   11754:	b	11d64 <mpc_tan@@Base+0x758>
   11758:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
   1175c:	cmp	x9, x10
   11760:	b.ne	11b90 <mpc_tan@@Base+0x584>  // b.any
   11764:	cmp	x8, x10
   11768:	b.ne	117b8 <mpc_tan@@Base+0x1ac>  // b.any
   1176c:	ldr	w8, [x21, #8]
   11770:	mov	w22, #0x1                   	// #1
   11774:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   11778:	mov	x0, x19
   1177c:	cmp	w8, #0x0
   11780:	cneg	w3, w22, lt  // lt = tstop
   11784:	mov	x1, x19
   11788:	mov	w2, wzr
   1178c:	str	w22, [x19, #8]
   11790:	str	x9, [x19, #16]
   11794:	bl	51d0 <mpfr_set4@plt>
   11798:	ldr	w8, [x21, #40]
   1179c:	add	x0, x19, #0x20
   117a0:	asr	w3, w20, #4
   117a4:	mov	x2, xzr
   117a8:	cmp	w8, #0x0
   117ac:	cneg	x1, x22, lt  // lt = tstop
   117b0:	bl	49e0 <mpfr_set_si_2exp@plt>
   117b4:	b	11688 <mpc_tan@@Base+0x7c>
   117b8:	mov	x0, x19
   117bc:	bl	4a40 <mpfr_set_nan@plt>
   117c0:	add	x0, x19, #0x20
   117c4:	bl	4a40 <mpfr_set_nan@plt>
   117c8:	mov	w19, wzr
   117cc:	b	11d64 <mpc_tan@@Base+0x758>
   117d0:	mov	x25, x19
   117d4:	ldr	x8, [x19]
   117d8:	ldr	x9, [x25, #32]!
   117dc:	mov	x27, #0x2                   	// #2
   117e0:	sub	x0, x29, #0x48
   117e4:	mov	w1, #0x2                   	// #2
   117e8:	cmp	x8, x9
   117ec:	movk	x27, #0x8000, lsl #48
   117f0:	csel	x22, x8, x9, gt
   117f4:	sub	x23, x29, #0x48
   117f8:	bl	4cf0 <mpc_init2@plt>
   117fc:	add	x0, sp, #0x28
   11800:	mov	w1, #0x2                   	// #2
   11804:	add	x24, sp, #0x28
   11808:	bl	4cf0 <mpc_init2@plt>
   1180c:	and	w8, w20, #0xf
   11810:	tst	w20, #0xf
   11814:	str	w8, [sp, #20]
   11818:	cset	w8, eq  // eq = none
   1181c:	cmp	w20, #0x10
   11820:	add	x28, x23, #0x20
   11824:	add	x23, x24, #0x20
   11828:	str	x8, [sp, #8]
   1182c:	cset	w8, cc  // cc = lo, ul, last
   11830:	mov	w24, #0x7                   	// #7
   11834:	str	x8, [sp]
   11838:	mov	x0, x22
   1183c:	bl	4d20 <mpc_ceil_log2@plt>
   11840:	add	x8, x22, x24
   11844:	add	x22, x8, x0
   11848:	sub	x0, x29, #0x48
   1184c:	mov	x1, x22
   11850:	bl	4c00 <mpc_set_prec@plt>
   11854:	add	x0, sp, #0x28
   11858:	mov	x1, x22
   1185c:	bl	4c00 <mpc_set_prec@plt>
   11860:	sub	x0, x29, #0x48
   11864:	add	x1, sp, #0x28
   11868:	mov	w3, #0x11                  	// #17
   1186c:	mov	w4, #0x11                  	// #17
   11870:	mov	x2, x21
   11874:	bl	5140 <mpc_sin_cos@plt>
   11878:	ldur	x8, [x29, #-56]
   1187c:	cmp	x8, x27
   11880:	b.gt	11894 <mpc_tan@@Base+0x288>
   11884:	mov	x24, #0x8000000000000001    	// #-9223372036854775807
   11888:	b.ne	118b0 <mpc_tan@@Base+0x2a4>  // b.any
   1188c:	bl	4b00 <mpfr_set_erangeflag@plt>
   11890:	b	118b0 <mpc_tan@@Base+0x2a4>
   11894:	ldur	w8, [x29, #-64]
   11898:	mov	x24, #0x8000000000000001    	// #-9223372036854775807
   1189c:	cmp	w8, #0x1
   118a0:	b.lt	118b0 <mpc_tan@@Base+0x2a4>  // b.tstop
   118a4:	sub	x0, x29, #0x48
   118a8:	bl	4e00 <mpfr_nextabove@plt>
   118ac:	b	118b8 <mpc_tan@@Base+0x2ac>
   118b0:	sub	x0, x29, #0x48
   118b4:	bl	4bb0 <mpfr_nextbelow@plt>
   118b8:	ldur	x8, [x29, #-24]
   118bc:	cmp	x8, x27
   118c0:	b.gt	118d0 <mpc_tan@@Base+0x2c4>
   118c4:	b.ne	118e8 <mpc_tan@@Base+0x2dc>  // b.any
   118c8:	bl	4b00 <mpfr_set_erangeflag@plt>
   118cc:	b	118e8 <mpc_tan@@Base+0x2dc>
   118d0:	ldur	w8, [x29, #-32]
   118d4:	cmp	w8, #0x1
   118d8:	b.lt	118e8 <mpc_tan@@Base+0x2dc>  // b.tstop
   118dc:	mov	x0, x28
   118e0:	bl	4e00 <mpfr_nextabove@plt>
   118e4:	b	118f0 <mpc_tan@@Base+0x2e4>
   118e8:	mov	x0, x28
   118ec:	bl	4bb0 <mpfr_nextbelow@plt>
   118f0:	ldr	x8, [sp, #56]
   118f4:	cmp	x8, x27
   118f8:	b.gt	11908 <mpc_tan@@Base+0x2fc>
   118fc:	b.ne	11920 <mpc_tan@@Base+0x314>  // b.any
   11900:	bl	4b00 <mpfr_set_erangeflag@plt>
   11904:	b	11920 <mpc_tan@@Base+0x314>
   11908:	ldr	w8, [sp, #48]
   1190c:	cmp	w8, #0x1
   11910:	b.lt	11920 <mpc_tan@@Base+0x314>  // b.tstop
   11914:	add	x0, sp, #0x28
   11918:	bl	4e00 <mpfr_nextabove@plt>
   1191c:	b	11928 <mpc_tan@@Base+0x31c>
   11920:	add	x0, sp, #0x28
   11924:	bl	4bb0 <mpfr_nextbelow@plt>
   11928:	ldr	x8, [sp, #88]
   1192c:	cmp	x8, x27
   11930:	b.gt	11940 <mpc_tan@@Base+0x334>
   11934:	b.ne	11958 <mpc_tan@@Base+0x34c>  // b.any
   11938:	bl	4b00 <mpfr_set_erangeflag@plt>
   1193c:	b	11958 <mpc_tan@@Base+0x34c>
   11940:	ldr	w8, [sp, #80]
   11944:	cmp	w8, #0x1
   11948:	b.lt	11958 <mpc_tan@@Base+0x34c>  // b.tstop
   1194c:	mov	x0, x23
   11950:	bl	4e00 <mpfr_nextabove@plt>
   11954:	b	11960 <mpc_tan@@Base+0x354>
   11958:	mov	x0, x23
   1195c:	bl	4bb0 <mpfr_nextbelow@plt>
   11960:	ldur	x26, [x29, #-56]
   11964:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
   11968:	cmp	x26, x9
   1196c:	b.eq	11b50 <mpc_tan@@Base+0x544>  // b.none
   11970:	cmp	x26, x24
   11974:	stp	x23, x25, [sp, #24]
   11978:	b.eq	11de4 <mpc_tan@@Base+0x7d8>  // b.none
   1197c:	ldur	x8, [x29, #-24]
   11980:	cmp	x8, x9
   11984:	b.eq	11d88 <mpc_tan@@Base+0x77c>  // b.none
   11988:	ldr	x23, [sp, #56]
   1198c:	cmp	x23, x9
   11990:	b.eq	11d88 <mpc_tan@@Base+0x77c>  // b.none
   11994:	ldr	x25, [sp, #88]
   11998:	cmp	x25, x9
   1199c:	b.eq	11d88 <mpc_tan@@Base+0x77c>  // b.none
   119a0:	sub	x0, x29, #0x48
   119a4:	sub	x1, x29, #0x48
   119a8:	add	x2, sp, #0x28
   119ac:	mov	w3, #0x11                  	// #17
   119b0:	bl	5250 <mpc_div@plt>
   119b4:	ldur	x9, [x29, #-56]
   119b8:	mov	w8, wzr
   119bc:	cmp	x9, x24
   119c0:	b.eq	11a00 <mpc_tan@@Base+0x3f4>  // b.none
   119c4:	ldur	x10, [x29, #-24]
   119c8:	cmp	x10, x24
   119cc:	mov	x24, x22
   119d0:	b.eq	11b28 <mpc_tan@@Base+0x51c>  // b.none
   119d4:	mov	w27, w0
   119d8:	tst	w0, #0x3
   119dc:	mov	x24, #0x8000000000000001    	// #-9223372036854775807
   119e0:	b.eq	11a28 <mpc_tan@@Base+0x41c>  // b.none
   119e4:	mov	x8, #0x2                   	// #2
   119e8:	movk	x8, #0x8000, lsl #48
   119ec:	cmp	x9, x8
   119f0:	b.gt	11a08 <mpc_tan@@Base+0x3fc>
   119f4:	b.ne	11a20 <mpc_tan@@Base+0x414>  // b.any
   119f8:	bl	4b00 <mpfr_set_erangeflag@plt>
   119fc:	b	11a20 <mpc_tan@@Base+0x414>
   11a00:	mov	x24, x22
   11a04:	b	11b28 <mpc_tan@@Base+0x51c>
   11a08:	ldur	w8, [x29, #-64]
   11a0c:	cmp	w8, #0x1
   11a10:	b.lt	11a20 <mpc_tan@@Base+0x414>  // b.tstop
   11a14:	sub	x0, x29, #0x48
   11a18:	bl	4e00 <mpfr_nextabove@plt>
   11a1c:	b	11a28 <mpc_tan@@Base+0x41c>
   11a20:	sub	x0, x29, #0x48
   11a24:	bl	4bb0 <mpfr_nextbelow@plt>
   11a28:	cmp	w27, #0x4
   11a2c:	b.cc	11a70 <mpc_tan@@Base+0x464>  // b.lo, b.ul, b.last
   11a30:	ldur	x8, [x29, #-24]
   11a34:	mov	x9, #0x2                   	// #2
   11a38:	movk	x9, #0x8000, lsl #48
   11a3c:	cmp	x8, x9
   11a40:	b.gt	11a50 <mpc_tan@@Base+0x444>
   11a44:	b.ne	11a68 <mpc_tan@@Base+0x45c>  // b.any
   11a48:	bl	4b00 <mpfr_set_erangeflag@plt>
   11a4c:	b	11a68 <mpc_tan@@Base+0x45c>
   11a50:	ldur	w8, [x29, #-32]
   11a54:	cmp	w8, #0x1
   11a58:	b.lt	11a68 <mpc_tan@@Base+0x45c>  // b.tstop
   11a5c:	mov	x0, x28
   11a60:	bl	4e00 <mpfr_nextabove@plt>
   11a64:	b	11a70 <mpc_tan@@Base+0x464>
   11a68:	mov	x0, x28
   11a6c:	bl	4bb0 <mpfr_nextbelow@plt>
   11a70:	ldur	x8, [x29, #-56]
   11a74:	cmp	x8, x24
   11a78:	b.eq	11e10 <mpc_tan@@Base+0x804>  // b.none
   11a7c:	neg	x9, x23
   11a80:	sub	x10, x23, x25, lsl #1
   11a84:	cmp	x10, x9
   11a88:	sub	x8, x26, x8
   11a8c:	csneg	x9, x10, x23, ge  // ge = tcont
   11a90:	add	x8, x8, x9
   11a94:	add	x9, x8, #0x5
   11a98:	cmp	x8, #0x2
   11a9c:	mov	w8, #0x8                   	// #8
   11aa0:	csel	x8, x8, x9, eq  // eq = none
   11aa4:	mov	w9, #0x7                   	// #7
   11aa8:	sub	x0, x29, #0x48
   11aac:	csel	x24, x9, x8, lt  // lt = tstop
   11ab0:	bl	54d0 <mpfr_number_p@plt>
   11ab4:	cbz	w0, 11adc <mpc_tan@@Base+0x4d0>
   11ab8:	ldr	x8, [x19]
   11abc:	ldr	x9, [sp, #8]
   11ac0:	sub	x1, x22, x24
   11ac4:	sub	x0, x29, #0x48
   11ac8:	mov	w3, #0x1                   	// #1
   11acc:	add	x4, x8, x9
   11ad0:	mov	w2, wzr
   11ad4:	bl	5450 <mpfr_can_round@plt>
   11ad8:	cbz	w0, 11b24 <mpc_tan@@Base+0x518>
   11adc:	mov	x0, x28
   11ae0:	mov	x23, x28
   11ae4:	bl	54d0 <mpfr_number_p@plt>
   11ae8:	cbz	w0, 11b1c <mpc_tan@@Base+0x510>
   11aec:	ldr	x8, [sp, #32]
   11af0:	ldr	x9, [sp]
   11af4:	sub	x1, x22, #0x6
   11af8:	mov	w3, #0x1                   	// #1
   11afc:	ldr	x8, [x8]
   11b00:	mov	x0, x23
   11b04:	mov	w2, wzr
   11b08:	add	x4, x8, x9
   11b0c:	bl	5450 <mpfr_can_round@plt>
   11b10:	cmp	w0, #0x0
   11b14:	cset	w8, ne  // ne = any
   11b18:	b	11b28 <mpc_tan@@Base+0x51c>
   11b1c:	mov	w8, #0x1                   	// #1
   11b20:	b	11b28 <mpc_tan@@Base+0x51c>
   11b24:	mov	w8, wzr
   11b28:	ldp	x23, x25, [sp, #24]
   11b2c:	mov	x27, #0x2                   	// #2
   11b30:	movk	x27, #0x8000, lsl #48
   11b34:	cbz	w8, 11838 <mpc_tan@@Base+0x22c>
   11b38:	sub	x1, x29, #0x48
   11b3c:	mov	x0, x19
   11b40:	mov	w2, w20
   11b44:	bl	5580 <mpc_set@plt>
   11b48:	mov	w19, w0
   11b4c:	b	11d54 <mpc_tan@@Base+0x748>
   11b50:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
   11b54:	mov	x23, x19
   11b58:	str	x8, [x23, #16]!
   11b5c:	mov	w8, #0x1                   	// #1
   11b60:	stur	w8, [x23, #-8]
   11b64:	ldur	w22, [x29, #-64]
   11b68:	ldr	x8, [sp, #56]
   11b6c:	mov	x9, #0x2                   	// #2
   11b70:	movk	x9, #0x8000, lsl #48
   11b74:	cmp	x8, x9
   11b78:	b.gt	11c2c <mpc_tan@@Base+0x620>
   11b7c:	cmp	x8, x27
   11b80:	b.ne	11b88 <mpc_tan@@Base+0x57c>  // b.any
   11b84:	bl	4b00 <mpfr_set_erangeflag@plt>
   11b88:	mov	w8, wzr
   11b8c:	b	11c30 <mpc_tan@@Base+0x624>
   11b90:	sub	x0, x29, #0x48
   11b94:	bl	4aa0 <mpfr_init@plt>
   11b98:	add	x0, sp, #0x28
   11b9c:	bl	4aa0 <mpfr_init@plt>
   11ba0:	add	x0, sp, #0x28
   11ba4:	sub	x1, x29, #0x48
   11ba8:	mov	x2, x21
   11bac:	mov	w3, wzr
   11bb0:	bl	5520 <mpfr_sin_cos@plt>
   11bb4:	mov	w22, #0x1                   	// #1
   11bb8:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
   11bbc:	str	w22, [x19, #8]
   11bc0:	str	x8, [x19, #16]
   11bc4:	ldur	w8, [x29, #-64]
   11bc8:	ldr	w9, [sp, #48]
   11bcc:	mov	x0, x19
   11bd0:	mov	x1, x19
   11bd4:	mov	w2, wzr
   11bd8:	eor	w8, w9, w8
   11bdc:	cmp	w8, #0x0
   11be0:	cneg	w3, w22, lt  // lt = tstop
   11be4:	bl	51d0 <mpfr_set4@plt>
   11be8:	ldr	w8, [x21, #40]
   11bec:	add	x0, x19, #0x20
   11bf0:	asr	w3, w20, #4
   11bf4:	mov	x2, xzr
   11bf8:	cmp	w8, #0x0
   11bfc:	cneg	x1, x22, lt  // lt = tstop
   11c00:	bl	49e0 <mpfr_set_si_2exp@plt>
   11c04:	cmp	w0, #0x0
   11c08:	cset	w8, ne  // ne = any
   11c0c:	lsl	w8, w8, #2
   11c10:	mov	w9, #0x8                   	// #8
   11c14:	add	x0, sp, #0x28
   11c18:	csel	w19, w9, w8, lt  // lt = tstop
   11c1c:	bl	4d60 <mpfr_clear@plt>
   11c20:	sub	x0, x29, #0x48
   11c24:	bl	4d60 <mpfr_clear@plt>
   11c28:	b	11d64 <mpc_tan@@Base+0x758>
   11c2c:	ldr	w8, [sp, #48]
   11c30:	mul	w8, w8, w22
   11c34:	tbnz	w8, #31, 11c40 <mpc_tan@@Base+0x634>
   11c38:	mov	w24, #0xffffffff            	// #-1
   11c3c:	b	11c54 <mpc_tan@@Base+0x648>
   11c40:	mov	x0, x19
   11c44:	mov	x1, x19
   11c48:	mov	w2, wzr
   11c4c:	bl	4b80 <mpfr_neg@plt>
   11c50:	mov	w24, #0x1                   	// #1
   11c54:	ldr	x8, [x21, #48]
   11c58:	mov	x9, #0x2                   	// #2
   11c5c:	movk	x9, #0x8000, lsl #48
   11c60:	cmp	x8, x9
   11c64:	b.gt	11c78 <mpc_tan@@Base+0x66c>
   11c68:	cmp	x8, x27
   11c6c:	b.ne	11ca0 <mpc_tan@@Base+0x694>  // b.any
   11c70:	bl	4b00 <mpfr_set_erangeflag@plt>
   11c74:	b	11ca0 <mpc_tan@@Base+0x694>
   11c78:	ldr	w8, [x21, #40]
   11c7c:	cmp	w8, #0x1
   11c80:	b.lt	11ca0 <mpc_tan@@Base+0x694>  // b.tstop
   11c84:	mov	w1, #0x1                   	// #1
   11c88:	mov	x0, x25
   11c8c:	mov	x2, xzr
   11c90:	mov	w3, wzr
   11c94:	mov	w21, #0x1                   	// #1
   11c98:	bl	5130 <mpfr_set_ui_2exp@plt>
   11c9c:	b	11cb8 <mpc_tan@@Base+0x6ac>
   11ca0:	mov	x1, #0xffffffffffffffff    	// #-1
   11ca4:	mov	x0, x25
   11ca8:	mov	x2, xzr
   11cac:	mov	w3, wzr
   11cb0:	bl	49e0 <mpfr_set_si_2exp@plt>
   11cb4:	mov	w21, #0xffffffff            	// #-1
   11cb8:	asr	w20, w20, #4
   11cbc:	cmp	w20, #0x1
   11cc0:	b.eq	11ce0 <mpc_tan@@Base+0x6d4>  // b.none
   11cc4:	ldr	w8, [x19, #40]
   11cc8:	cmp	w20, #0x2
   11ccc:	b.ne	11cd4 <mpc_tan@@Base+0x6c8>  // b.any
   11cd0:	tbnz	w8, #31, 11ce0 <mpc_tan@@Base+0x6d4>
   11cd4:	cmp	w20, #0x3
   11cd8:	b.ne	11cf0 <mpc_tan@@Base+0x6e4>  // b.any
   11cdc:	tbnz	w8, #31, 11cf0 <mpc_tan@@Base+0x6e4>
   11ce0:	mov	x0, x25
   11ce4:	mov	x1, x19
   11ce8:	bl	51c0 <mpfr_nexttoward@plt>
   11cec:	neg	w21, w21
   11cf0:	ldr	x8, [x23]
   11cf4:	mov	x22, #0x8000000000000001    	// #-9223372036854775807
   11cf8:	cmp	x8, x22
   11cfc:	b.ne	11d10 <mpc_tan@@Base+0x704>  // b.any
   11d00:	ldr	w1, [sp, #20]
   11d04:	mov	x0, x19
   11d08:	bl	50d0 <mpc_fix_zero@plt>
   11d0c:	mov	w24, w0
   11d10:	ldr	x8, [x19, #48]
   11d14:	cmp	x8, x22
   11d18:	b.ne	11d2c <mpc_tan@@Base+0x720>  // b.any
   11d1c:	mov	x0, x25
   11d20:	mov	w1, w20
   11d24:	bl	50d0 <mpc_fix_zero@plt>
   11d28:	mov	w21, w0
   11d2c:	cmp	w24, #0x0
   11d30:	mov	w8, #0x2                   	// #2
   11d34:	cset	w9, ne  // ne = any
   11d38:	csel	w8, w8, w9, lt  // lt = tstop
   11d3c:	cmp	w21, #0x0
   11d40:	cset	w9, ne  // ne = any
   11d44:	lsl	w9, w9, #2
   11d48:	mov	w10, #0x8                   	// #8
   11d4c:	csel	w9, w10, w9, lt  // lt = tstop
   11d50:	orr	w19, w9, w8
   11d54:	sub	x0, x29, #0x48
   11d58:	bl	4a10 <mpc_clear@plt>
   11d5c:	add	x0, sp, #0x28
   11d60:	bl	4a10 <mpc_clear@plt>
   11d64:	mov	w0, w19
   11d68:	ldp	x20, x19, [sp, #256]
   11d6c:	ldp	x22, x21, [sp, #240]
   11d70:	ldp	x24, x23, [sp, #224]
   11d74:	ldp	x26, x25, [sp, #208]
   11d78:	ldp	x28, x27, [sp, #192]
   11d7c:	ldp	x29, x30, [sp, #176]
   11d80:	add	sp, sp, #0x110
   11d84:	ret
   11d88:	mov	x10, #0x2                   	// #2
   11d8c:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
   11d90:	mov	x23, x19
   11d94:	movk	x10, #0x8000, lsl #48
   11d98:	mov	w9, #0x1                   	// #1
   11d9c:	str	x8, [x23, #16]!
   11da0:	cmp	x26, x10
   11da4:	stur	w9, [x23, #-8]
   11da8:	b.gt	11dd4 <mpc_tan@@Base+0x7c8>
   11dac:	ldr	x25, [sp, #32]
   11db0:	mov	x8, #0x2                   	// #2
   11db4:	movk	x8, #0x8000, lsl #48
   11db8:	cmp	x26, x8
   11dbc:	b.ne	11dc4 <mpc_tan@@Base+0x7b8>  // b.any
   11dc0:	bl	4b00 <mpfr_set_erangeflag@plt>
   11dc4:	mov	x27, #0x2                   	// #2
   11dc8:	mov	w22, wzr
   11dcc:	movk	x27, #0x8000, lsl #48
   11dd0:	b	11b68 <mpc_tan@@Base+0x55c>
   11dd4:	ldr	x25, [sp, #32]
   11dd8:	mov	x27, #0x2                   	// #2
   11ddc:	movk	x27, #0x8000, lsl #48
   11de0:	b	11b64 <mpc_tan@@Base+0x558>
   11de4:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
   11de8:	ldr	x8, [x8, #4008]
   11dec:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
   11df0:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
   11df4:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
   11df8:	ldr	x0, [x8]
   11dfc:	add	x1, x1, #0x3b0
   11e00:	add	x2, x2, #0x415
   11e04:	add	x4, x4, #0x725
   11e08:	mov	w3, #0xc9                  	// #201
   11e0c:	b	11e38 <mpc_tan@@Base+0x82c>
   11e10:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x11070>
   11e14:	ldr	x8, [x8, #4008]
   11e18:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x1070>
   11e1c:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x1070>
   11e20:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x1070>
   11e24:	ldr	x0, [x8]
   11e28:	add	x1, x1, #0x3b0
   11e2c:	add	x2, x2, #0x415
   11e30:	add	x4, x4, #0x725
   11e34:	mov	w3, #0x107                 	// #263
   11e38:	bl	55a0 <fprintf@plt>
   11e3c:	bl	5000 <abort@plt>

0000000000011e40 <mpc_tanh@@Base>:
   11e40:	sub	sp, sp, #0xa0
   11e44:	stp	x29, x30, [sp, #128]
   11e48:	str	x19, [sp, #144]
   11e4c:	ldp	q1, q0, [x1, #32]
   11e50:	ubfiz	w8, w2, #4, #4
   11e54:	mov	x19, x0
   11e58:	add	w2, w8, w2, asr #4
   11e5c:	stp	q1, q0, [sp, #64]
   11e60:	ldp	q1, q0, [x1]
   11e64:	add	x1, sp, #0x40
   11e68:	add	x29, sp, #0x80
   11e6c:	stp	q1, q0, [sp, #96]
   11e70:	ldp	q1, q0, [x0, #32]
   11e74:	stp	q1, q0, [sp]
   11e78:	ldp	q1, q0, [x0]
   11e7c:	mov	x0, sp
   11e80:	stp	q1, q0, [sp, #32]
   11e84:	bl	4c20 <mpc_tan@plt>
   11e88:	ldp	q1, q0, [sp, #32]
   11e8c:	asr	w8, w0, #2
   11e90:	cmp	w8, #0x0
   11e94:	cset	w9, ne  // ne = any
   11e98:	stp	q1, q0, [x19]
   11e9c:	ldp	q1, q0, [sp]
   11ea0:	cmp	w8, #0x2
   11ea4:	csel	w8, w8, w9, eq  // eq = none
   11ea8:	tst	w0, #0x3
   11eac:	stp	q1, q0, [x19, #32]
   11eb0:	and	w9, w0, #0x3
   11eb4:	cset	w10, ne  // ne = any
   11eb8:	ldr	x19, [sp, #144]
   11ebc:	ldp	x29, x30, [sp, #128]
   11ec0:	cmp	w9, #0x2
   11ec4:	mov	w9, #0x8                   	// #8
   11ec8:	lsl	w10, w10, #2
   11ecc:	csel	w9, w9, w10, eq  // eq = none
   11ed0:	orr	w0, w8, w9
   11ed4:	add	sp, sp, #0xa0
   11ed8:	ret

0000000000011edc <mpc_ceil_log2@@Base>:
   11edc:	cmp	x0, #0x2
   11ee0:	b.lt	11f0c <mpc_ceil_log2@@Base+0x30>  // b.tstop
   11ee4:	mov	x8, xzr
   11ee8:	add	x9, x0, #0x1
   11eec:	add	x10, x0, #0x2
   11ef0:	cmp	x9, #0x0
   11ef4:	csinc	x9, x10, x0, lt  // lt = tstop
   11ef8:	cmp	x0, #0x2
   11efc:	asr	x0, x9, #1
   11f00:	add	x8, x8, #0x1
   11f04:	b.gt	11ee8 <mpc_ceil_log2@@Base+0xc>
   11f08:	b	11f10 <mpc_ceil_log2@@Base+0x34>
   11f0c:	mov	x8, xzr
   11f10:	mov	x0, x8
   11f14:	ret

0000000000011f18 <mpc_ui_div@@Base>:
   11f18:	sub	sp, sp, #0x70
   11f1c:	stp	x22, x21, [sp, #80]
   11f20:	mov	x21, x1
   11f24:	mov	x22, x0
   11f28:	mov	x0, sp
   11f2c:	mov	w1, #0x40                  	// #64
   11f30:	stp	x29, x30, [sp, #64]
   11f34:	stp	x20, x19, [sp, #96]
   11f38:	add	x29, sp, #0x40
   11f3c:	mov	w19, w3
   11f40:	mov	x20, x2
   11f44:	bl	4cf0 <mpc_init2@plt>
   11f48:	mov	x0, sp
   11f4c:	mov	x1, x21
   11f50:	mov	w2, w19
   11f54:	bl	4ce0 <mpc_set_ui@plt>
   11f58:	mov	x1, sp
   11f5c:	mov	x0, x22
   11f60:	mov	x2, x20
   11f64:	mov	w3, w19
   11f68:	bl	5250 <mpc_div@plt>
   11f6c:	mov	w19, w0
   11f70:	mov	x0, sp
   11f74:	bl	4a10 <mpc_clear@plt>
   11f78:	mov	w0, w19
   11f7c:	ldp	x20, x19, [sp, #96]
   11f80:	ldp	x22, x21, [sp, #80]
   11f84:	ldp	x29, x30, [sp, #64]
   11f88:	add	sp, sp, #0x70
   11f8c:	ret

0000000000011f90 <mpc_ui_ui_sub@@Base>:
   11f90:	stp	x29, x30, [sp, #-64]!
   11f94:	stp	x20, x19, [sp, #48]
   11f98:	mov	x20, x3
   11f9c:	stp	x22, x21, [sp, #32]
   11fa0:	mov	x21, x2
   11fa4:	and	w3, w4, #0xf
   11fa8:	mov	x2, x20
   11fac:	str	x23, [sp, #16]
   11fb0:	mov	x29, sp
   11fb4:	mov	w19, w4
   11fb8:	mov	x22, x0
   11fbc:	bl	5430 <mpfr_ui_sub@plt>
   11fc0:	mov	w23, w0
   11fc4:	add	x0, x22, #0x20
   11fc8:	add	x2, x20, #0x20
   11fcc:	asr	w3, w19, #4
   11fd0:	mov	x1, x21
   11fd4:	bl	5430 <mpfr_ui_sub@plt>
   11fd8:	cmp	w23, #0x0
   11fdc:	mov	w8, #0x2                   	// #2
   11fe0:	cset	w9, ne  // ne = any
   11fe4:	csel	w8, w8, w9, lt  // lt = tstop
   11fe8:	cmp	w0, #0x0
   11fec:	cset	w9, ne  // ne = any
   11ff0:	ldp	x20, x19, [sp, #48]
   11ff4:	ldp	x22, x21, [sp, #32]
   11ff8:	ldr	x23, [sp, #16]
   11ffc:	lsl	w9, w9, #2
   12000:	mov	w10, #0x8                   	// #8
   12004:	csel	w9, w10, w9, lt  // lt = tstop
   12008:	orr	w0, w9, w8
   1200c:	ldp	x29, x30, [sp], #64
   12010:	ret
   12014:	nop
   12018:	stp	x29, x30, [sp, #-48]!
   1201c:	mov	x29, sp
   12020:	str	q0, [sp, #16]
   12024:	str	q1, [sp, #32]
   12028:	ldp	x6, x1, [sp, #16]
   1202c:	ldp	x0, x3, [sp, #32]
   12030:	mrs	x15, fpcr
   12034:	lsr	x7, x1, #63
   12038:	mov	x10, x0
   1203c:	ubfiz	x4, x3, #3, #48
   12040:	lsr	x5, x3, #63
   12044:	mov	x12, x7
   12048:	ubfiz	x2, x1, #3, #48
   1204c:	orr	x4, x4, x0, lsr #61
   12050:	ubfx	x8, x1, #48, #15
   12054:	ubfx	x0, x3, #48, #15
   12058:	and	w7, w7, #0xff
   1205c:	mov	x16, x12
   12060:	cmp	x12, x5
   12064:	and	w11, w5, #0xff
   12068:	orr	x2, x2, x6, lsr #61
   1206c:	mov	x1, x8
   12070:	lsl	x9, x6, #3
   12074:	mov	x3, x0
   12078:	lsl	x13, x10, #3
   1207c:	b.eq	12228 <mpc_ui_ui_sub@@Base+0x298>  // b.none
   12080:	sub	w0, w8, w0
   12084:	cmp	w0, #0x0
   12088:	b.le	121d4 <mpc_ui_ui_sub@@Base+0x244>
   1208c:	cbz	x3, 12288 <mpc_ui_ui_sub@@Base+0x2f8>
   12090:	orr	x4, x4, #0x8000000000000
   12094:	mov	x3, #0x7fff                	// #32767
   12098:	cmp	x1, x3
   1209c:	b.eq	1248c <mpc_ui_ui_sub@@Base+0x4fc>  // b.none
   120a0:	cmp	w0, #0x74
   120a4:	b.gt	12510 <mpc_ui_ui_sub@@Base+0x580>
   120a8:	cmp	w0, #0x3f
   120ac:	b.gt	12670 <mpc_ui_ui_sub@@Base+0x6e0>
   120b0:	mov	w3, #0x40                  	// #64
   120b4:	sub	w3, w3, w0
   120b8:	lsr	x6, x13, x0
   120bc:	lsl	x13, x13, x3
   120c0:	cmp	x13, #0x0
   120c4:	cset	x5, ne  // ne = any
   120c8:	lsl	x3, x4, x3
   120cc:	orr	x3, x3, x6
   120d0:	lsr	x0, x4, x0
   120d4:	orr	x3, x3, x5
   120d8:	sub	x2, x2, x0
   120dc:	subs	x9, x9, x3
   120e0:	sbc	x2, x2, xzr
   120e4:	and	x3, x2, #0x7ffffffffffff
   120e8:	tbz	x2, #51, 122c8 <mpc_ui_ui_sub@@Base+0x338>
   120ec:	cbz	x3, 124f4 <mpc_ui_ui_sub@@Base+0x564>
   120f0:	clz	x0, x3
   120f4:	sub	w0, w0, #0xc
   120f8:	neg	w2, w0
   120fc:	lsl	x4, x3, x0
   12100:	lsl	x3, x9, x0
   12104:	lsr	x9, x9, x2
   12108:	orr	x2, x9, x4
   1210c:	cmp	x1, w0, sxtw
   12110:	sxtw	x4, w0
   12114:	b.gt	124d4 <mpc_ui_ui_sub@@Base+0x544>
   12118:	sub	w1, w0, w1
   1211c:	add	w0, w1, #0x1
   12120:	cmp	w0, #0x3f
   12124:	b.gt	12638 <mpc_ui_ui_sub@@Base+0x6a8>
   12128:	mov	w1, #0x40                  	// #64
   1212c:	sub	w1, w1, w0
   12130:	lsr	x4, x3, x0
   12134:	lsl	x3, x3, x1
   12138:	cmp	x3, #0x0
   1213c:	lsl	x9, x2, x1
   12140:	cset	x1, ne  // ne = any
   12144:	orr	x9, x9, x4
   12148:	lsr	x2, x2, x0
   1214c:	orr	x9, x9, x1
   12150:	orr	x8, x9, x2
   12154:	cbz	x8, 122dc <mpc_ui_ui_sub@@Base+0x34c>
   12158:	and	x0, x9, #0x7
   1215c:	mov	x1, #0x0                   	// #0
   12160:	mov	w5, #0x1                   	// #1
   12164:	cbz	x0, 12520 <mpc_ui_ui_sub@@Base+0x590>
   12168:	and	x3, x15, #0xc00000
   1216c:	cmp	x3, #0x400, lsl #12
   12170:	b.eq	12464 <mpc_ui_ui_sub@@Base+0x4d4>  // b.none
   12174:	cmp	x3, #0x800, lsl #12
   12178:	b.eq	12444 <mpc_ui_ui_sub@@Base+0x4b4>  // b.none
   1217c:	cbz	x3, 12470 <mpc_ui_ui_sub@@Base+0x4e0>
   12180:	and	x3, x2, #0x8000000000000
   12184:	mov	w0, #0x10                  	// #16
   12188:	cbz	w5, 12190 <mpc_ui_ui_sub@@Base+0x200>
   1218c:	orr	w0, w0, #0x8
   12190:	cbz	x3, 124a8 <mpc_ui_ui_sub@@Base+0x518>
   12194:	add	x1, x1, #0x1
   12198:	mov	x3, #0x7fff                	// #32767
   1219c:	cmp	x1, x3
   121a0:	b.eq	1238c <mpc_ui_ui_sub@@Base+0x3fc>  // b.none
   121a4:	and	w1, w1, #0x7fff
   121a8:	extr	x8, x2, x9, #3
   121ac:	ubfx	x2, x2, #3, #48
   121b0:	mov	x5, #0x0                   	// #0
   121b4:	orr	w1, w1, w7, lsl #15
   121b8:	bfxil	x5, x2, #0, #48
   121bc:	fmov	d0, x8
   121c0:	bfi	x5, x1, #48, #16
   121c4:	fmov	v0.d[1], x5
   121c8:	cbnz	w0, 123e8 <mpc_ui_ui_sub@@Base+0x458>
   121cc:	ldp	x29, x30, [sp], #48
   121d0:	ret
   121d4:	mov	x14, x5
   121d8:	b.eq	122f4 <mpc_ui_ui_sub@@Base+0x364>  // b.none
   121dc:	cbnz	x8, 12578 <mpc_ui_ui_sub@@Base+0x5e8>
   121e0:	orr	x1, x2, x9
   121e4:	cbz	x1, 122a4 <mpc_ui_ui_sub@@Base+0x314>
   121e8:	cmn	w0, #0x1
   121ec:	b.eq	12994 <mpc_ui_ui_sub@@Base+0xa04>  // b.none
   121f0:	mov	x1, #0x7fff                	// #32767
   121f4:	mvn	w0, w0
   121f8:	cmp	x3, x1
   121fc:	b.ne	1258c <mpc_ui_ui_sub@@Base+0x5fc>  // b.any
   12200:	orr	x0, x4, x13
   12204:	cbnz	x0, 128ec <mpc_ui_ui_sub@@Base+0x95c>
   12208:	mov	x16, x14
   1220c:	nop
   12210:	mov	x4, #0x0                   	// #0
   12214:	fmov	d0, x4
   12218:	lsl	x16, x16, #63
   1221c:	orr	x5, x16, #0x7fff000000000000
   12220:	fmov	v0.d[1], x5
   12224:	b	121cc <mpc_ui_ui_sub@@Base+0x23c>
   12228:	sub	w5, w8, w0
   1222c:	cmp	w5, #0x0
   12230:	b.le	123fc <mpc_ui_ui_sub@@Base+0x46c>
   12234:	cbz	x0, 1233c <mpc_ui_ui_sub@@Base+0x3ac>
   12238:	orr	x4, x4, #0x8000000000000
   1223c:	mov	x0, #0x7fff                	// #32767
   12240:	cmp	x1, x0
   12244:	b.eq	1248c <mpc_ui_ui_sub@@Base+0x4fc>  // b.none
   12248:	cmp	w5, #0x74
   1224c:	b.gt	12620 <mpc_ui_ui_sub@@Base+0x690>
   12250:	cmp	w5, #0x3f
   12254:	b.gt	12720 <mpc_ui_ui_sub@@Base+0x790>
   12258:	mov	w0, #0x40                  	// #64
   1225c:	sub	w0, w0, w5
   12260:	lsr	x6, x13, x5
   12264:	lsl	x13, x13, x0
   12268:	cmp	x13, #0x0
   1226c:	lsl	x0, x4, x0
   12270:	cset	x3, ne  // ne = any
   12274:	orr	x0, x0, x6
   12278:	lsr	x4, x4, x5
   1227c:	orr	x0, x0, x3
   12280:	add	x2, x2, x4
   12284:	b	1262c <mpc_ui_ui_sub@@Base+0x69c>
   12288:	orr	x3, x4, x13
   1228c:	cbz	x3, 125fc <mpc_ui_ui_sub@@Base+0x66c>
   12290:	subs	w0, w0, #0x1
   12294:	b.ne	12094 <mpc_ui_ui_sub@@Base+0x104>  // b.any
   12298:	subs	x9, x9, x13
   1229c:	sbc	x2, x2, x4
   122a0:	b	120e4 <mpc_ui_ui_sub@@Base+0x154>
   122a4:	mov	x0, #0x7fff                	// #32767
   122a8:	cmp	x3, x0
   122ac:	b.eq	129e0 <mpc_ui_ui_sub@@Base+0xa50>  // b.none
   122b0:	mov	w7, w11
   122b4:	mov	x2, x4
   122b8:	mov	x9, x13
   122bc:	mov	x1, x3
   122c0:	mov	x12, x5
   122c4:	nop
   122c8:	orr	x8, x9, x2
   122cc:	and	x0, x9, #0x7
   122d0:	mov	w5, #0x0                   	// #0
   122d4:	cbnz	x1, 12164 <mpc_ui_ui_sub@@Base+0x1d4>
   122d8:	cbnz	x8, 12158 <mpc_ui_ui_sub@@Base+0x1c8>
   122dc:	mov	x2, #0x0                   	// #0
   122e0:	mov	x1, #0x0                   	// #0
   122e4:	mov	w0, #0x0                   	// #0
   122e8:	and	x2, x2, #0xffffffffffff
   122ec:	and	w1, w1, #0x7fff
   122f0:	b	121b0 <mpc_ui_ui_sub@@Base+0x220>
   122f4:	add	x5, x8, #0x1
   122f8:	tst	x5, #0x7ffe
   122fc:	b.ne	125cc <mpc_ui_ui_sub@@Base+0x63c>  // b.any
   12300:	orr	x5, x2, x9
   12304:	orr	x8, x4, x13
   12308:	cbnz	x1, 1278c <mpc_ui_ui_sub@@Base+0x7fc>
   1230c:	cbz	x5, 12834 <mpc_ui_ui_sub@@Base+0x8a4>
   12310:	cbz	x8, 12848 <mpc_ui_ui_sub@@Base+0x8b8>
   12314:	subs	x5, x9, x13
   12318:	cmp	x9, x13
   1231c:	sbc	x3, x2, x4
   12320:	tbz	x3, #51, 12a14 <mpc_ui_ui_sub@@Base+0xa84>
   12324:	subs	x9, x13, x9
   12328:	mov	w7, w11
   1232c:	sbc	x2, x4, x2
   12330:	mov	x12, x14
   12334:	orr	x8, x9, x2
   12338:	b	12154 <mpc_ui_ui_sub@@Base+0x1c4>
   1233c:	orr	x0, x4, x13
   12340:	cbz	x0, 12814 <mpc_ui_ui_sub@@Base+0x884>
   12344:	subs	w5, w5, #0x1
   12348:	b.ne	1223c <mpc_ui_ui_sub@@Base+0x2ac>  // b.any
   1234c:	adds	x9, x9, x13
   12350:	adc	x2, x4, x2
   12354:	nop
   12358:	tbz	x2, #51, 122c8 <mpc_ui_ui_sub@@Base+0x338>
   1235c:	add	x1, x1, #0x1
   12360:	mov	x0, #0x7fff                	// #32767
   12364:	cmp	x1, x0
   12368:	b.eq	12854 <mpc_ui_ui_sub@@Base+0x8c4>  // b.none
   1236c:	and	x0, x9, #0x1
   12370:	and	x3, x2, #0xfff7ffffffffffff
   12374:	orr	x9, x0, x9, lsr #1
   12378:	mov	w5, #0x0                   	// #0
   1237c:	orr	x9, x9, x2, lsl #63
   12380:	lsr	x2, x3, #1
   12384:	and	x0, x9, #0x7
   12388:	b	12164 <mpc_ui_ui_sub@@Base+0x1d4>
   1238c:	and	x3, x15, #0xc00000
   12390:	cbz	x3, 123c8 <mpc_ui_ui_sub@@Base+0x438>
   12394:	cmp	x3, #0x400, lsl #12
   12398:	b.eq	123c0 <mpc_ui_ui_sub@@Base+0x430>  // b.none
   1239c:	cmp	x3, #0x800, lsl #12
   123a0:	csel	w12, w12, wzr, eq  // eq = none
   123a4:	cbnz	w12, 123c8 <mpc_ui_ui_sub@@Base+0x438>
   123a8:	mov	w1, #0x14                  	// #20
   123ac:	mov	x2, #0x1fffffffffffffff    	// #2305843009213693951
   123b0:	orr	w0, w0, w1
   123b4:	mov	x8, #0xffffffffffffffff    	// #-1
   123b8:	mov	x1, #0x7ffe                	// #32766
   123bc:	b	122e8 <mpc_ui_ui_sub@@Base+0x358>
   123c0:	cbnz	x12, 123a8 <mpc_ui_ui_sub@@Base+0x418>
   123c4:	nop
   123c8:	mov	w1, #0x14                  	// #20
   123cc:	and	x16, x7, #0xff
   123d0:	orr	w0, w0, w1
   123d4:	mov	x4, #0x0                   	// #0
   123d8:	fmov	d0, x4
   123dc:	lsl	x16, x16, #63
   123e0:	orr	x5, x16, #0x7fff000000000000
   123e4:	fmov	v0.d[1], x5
   123e8:	str	q0, [sp, #16]
   123ec:	bl	13328 <mpc_ui_ui_sub@@Base+0x1398>
   123f0:	ldr	q0, [sp, #16]
   123f4:	ldp	x29, x30, [sp], #48
   123f8:	ret
   123fc:	b.eq	1253c <mpc_ui_ui_sub@@Base+0x5ac>  // b.none
   12400:	cbnz	x8, 126c0 <mpc_ui_ui_sub@@Base+0x730>
   12404:	orr	x0, x2, x9
   12408:	cbz	x0, 1292c <mpc_ui_ui_sub@@Base+0x99c>
   1240c:	cmn	w5, #0x1
   12410:	b.eq	12a8c <mpc_ui_ui_sub@@Base+0xafc>  // b.none
   12414:	mov	x0, #0x7fff                	// #32767
   12418:	mvn	w5, w5
   1241c:	cmp	x3, x0
   12420:	b.ne	126d4 <mpc_ui_ui_sub@@Base+0x744>  // b.any
   12424:	orr	x0, x4, x13
   12428:	cbz	x0, 12210 <mpc_ui_ui_sub@@Base+0x280>
   1242c:	lsr	x5, x4, #50
   12430:	mov	x9, x13
   12434:	eor	x5, x5, #0x1
   12438:	mov	x2, x4
   1243c:	and	w5, w5, #0x1
   12440:	b	124a0 <mpc_ui_ui_sub@@Base+0x510>
   12444:	mov	w0, #0x10                  	// #16
   12448:	cbz	x12, 12454 <mpc_ui_ui_sub@@Base+0x4c4>
   1244c:	adds	x9, x9, #0x8
   12450:	cinc	x2, x2, cs  // cs = hs, nlast
   12454:	and	x3, x2, #0x8000000000000
   12458:	cbz	w5, 12190 <mpc_ui_ui_sub@@Base+0x200>
   1245c:	orr	w0, w0, #0x8
   12460:	b	12190 <mpc_ui_ui_sub@@Base+0x200>
   12464:	mov	w0, #0x10                  	// #16
   12468:	cbnz	x12, 12454 <mpc_ui_ui_sub@@Base+0x4c4>
   1246c:	b	1244c <mpc_ui_ui_sub@@Base+0x4bc>
   12470:	and	x3, x9, #0xf
   12474:	mov	w0, #0x10                  	// #16
   12478:	cmp	x3, #0x4
   1247c:	b.eq	12454 <mpc_ui_ui_sub@@Base+0x4c4>  // b.none
   12480:	adds	x9, x9, #0x4
   12484:	cinc	x2, x2, cs  // cs = hs, nlast
   12488:	b	12454 <mpc_ui_ui_sub@@Base+0x4c4>
   1248c:	orr	x0, x2, x9
   12490:	cbz	x0, 12210 <mpc_ui_ui_sub@@Base+0x280>
   12494:	lsr	x5, x2, #50
   12498:	eor	x5, x5, #0x1
   1249c:	and	w5, w5, #0x1
   124a0:	mov	w0, w5
   124a4:	mov	x1, #0x7fff                	// #32767
   124a8:	mov	x3, #0x7fff                	// #32767
   124ac:	extr	x8, x2, x9, #3
   124b0:	cmp	x1, x3
   124b4:	lsr	x2, x2, #3
   124b8:	b.ne	122e8 <mpc_ui_ui_sub@@Base+0x358>  // b.any
   124bc:	orr	x1, x8, x2
   124c0:	cbz	x1, 12b2c <mpc_ui_ui_sub@@Base+0xb9c>
   124c4:	orr	x2, x2, #0x800000000000
   124c8:	mov	w1, #0x7fff                	// #32767
   124cc:	and	x2, x2, #0xffffffffffff
   124d0:	b	121b0 <mpc_ui_ui_sub@@Base+0x220>
   124d4:	mov	x9, x3
   124d8:	and	x2, x2, #0xfff7ffffffffffff
   124dc:	sub	x1, x1, x4
   124e0:	orr	x8, x9, x2
   124e4:	and	x0, x9, #0x7
   124e8:	mov	w5, #0x0                   	// #0
   124ec:	cbz	x1, 122d8 <mpc_ui_ui_sub@@Base+0x348>
   124f0:	b	12164 <mpc_ui_ui_sub@@Base+0x1d4>
   124f4:	clz	x2, x9
   124f8:	add	w0, w2, #0x34
   124fc:	cmp	w0, #0x3f
   12500:	b.le	120f8 <mpc_ui_ui_sub@@Base+0x168>
   12504:	sub	w2, w2, #0xc
   12508:	lsl	x2, x9, x2
   1250c:	b	1210c <mpc_ui_ui_sub@@Base+0x17c>
   12510:	orr	x4, x4, x13
   12514:	cmp	x4, #0x0
   12518:	cset	x3, ne  // ne = any
   1251c:	b	120dc <mpc_ui_ui_sub@@Base+0x14c>
   12520:	and	x3, x2, #0x8000000000000
   12524:	mov	w0, #0x0                   	// #0
   12528:	cbz	w5, 12190 <mpc_ui_ui_sub@@Base+0x200>
   1252c:	mov	w0, #0x0                   	// #0
   12530:	tbz	w15, #11, 12190 <mpc_ui_ui_sub@@Base+0x200>
   12534:	orr	w0, w0, #0x8
   12538:	b	12190 <mpc_ui_ui_sub@@Base+0x200>
   1253c:	add	x0, x8, #0x1
   12540:	tst	x0, #0x7ffe
   12544:	b.ne	1274c <mpc_ui_ui_sub@@Base+0x7bc>  // b.any
   12548:	orr	x0, x2, x9
   1254c:	cbnz	x8, 12908 <mpc_ui_ui_sub@@Base+0x978>
   12550:	orr	x8, x4, x13
   12554:	cbz	x0, 1295c <mpc_ui_ui_sub@@Base+0x9cc>
   12558:	cbz	x8, 12848 <mpc_ui_ui_sub@@Base+0x8b8>
   1255c:	adds	x9, x9, x13
   12560:	adc	x2, x4, x2
   12564:	tbz	x2, #51, 12334 <mpc_ui_ui_sub@@Base+0x3a4>
   12568:	and	x2, x2, #0xfff7ffffffffffff
   1256c:	and	x0, x9, #0x7
   12570:	mov	x1, #0x1                   	// #1
   12574:	b	12164 <mpc_ui_ui_sub@@Base+0x1d4>
   12578:	mov	x1, #0x7fff                	// #32767
   1257c:	neg	w0, w0
   12580:	orr	x2, x2, #0x8000000000000
   12584:	cmp	x3, x1
   12588:	b.eq	12200 <mpc_ui_ui_sub@@Base+0x270>  // b.none
   1258c:	cmp	w0, #0x74
   12590:	b.gt	1269c <mpc_ui_ui_sub@@Base+0x70c>
   12594:	cmp	w0, #0x3f
   12598:	b.gt	128b8 <mpc_ui_ui_sub@@Base+0x928>
   1259c:	mov	w1, #0x40                  	// #64
   125a0:	sub	w1, w1, w0
   125a4:	lsr	x5, x9, x0
   125a8:	lsl	x9, x9, x1
   125ac:	cmp	x9, #0x0
   125b0:	lsl	x9, x2, x1
   125b4:	cset	x1, ne  // ne = any
   125b8:	orr	x9, x9, x5
   125bc:	lsr	x0, x2, x0
   125c0:	orr	x9, x9, x1
   125c4:	sub	x4, x4, x0
   125c8:	b	126a8 <mpc_ui_ui_sub@@Base+0x718>
   125cc:	subs	x5, x9, x13
   125d0:	cmp	x9, x13
   125d4:	sbc	x3, x2, x4
   125d8:	tbnz	x3, #51, 12774 <mpc_ui_ui_sub@@Base+0x7e4>
   125dc:	orr	x8, x5, x3
   125e0:	cbnz	x8, 128a0 <mpc_ui_ui_sub@@Base+0x910>
   125e4:	and	x15, x15, #0xc00000
   125e8:	mov	x2, #0x0                   	// #0
   125ec:	cmp	x15, #0x800, lsl #12
   125f0:	mov	x1, #0x0                   	// #0
   125f4:	cset	w7, eq  // eq = none
   125f8:	b	122e8 <mpc_ui_ui_sub@@Base+0x358>
   125fc:	mov	x0, #0x7fff                	// #32767
   12600:	cmp	x8, x0
   12604:	b.ne	122c8 <mpc_ui_ui_sub@@Base+0x338>  // b.any
   12608:	orr	x0, x2, x9
   1260c:	cbnz	x0, 12494 <mpc_ui_ui_sub@@Base+0x504>
   12610:	mov	x2, #0x0                   	// #0
   12614:	mov	x8, #0x0                   	// #0
   12618:	mov	w0, #0x0                   	// #0
   1261c:	b	124bc <mpc_ui_ui_sub@@Base+0x52c>
   12620:	orr	x4, x4, x13
   12624:	cmp	x4, #0x0
   12628:	cset	x0, ne  // ne = any
   1262c:	adds	x9, x0, x9
   12630:	cinc	x2, x2, cs  // cs = hs, nlast
   12634:	b	12358 <mpc_ui_ui_sub@@Base+0x3c8>
   12638:	mov	w4, #0x80                  	// #128
   1263c:	sub	w4, w4, w0
   12640:	cmp	w0, #0x40
   12644:	sub	w9, w1, #0x3f
   12648:	lsl	x0, x2, x4
   1264c:	orr	x0, x3, x0
   12650:	csel	x3, x0, x3, ne  // ne = any
   12654:	lsr	x9, x2, x9
   12658:	cmp	x3, #0x0
   1265c:	mov	x2, #0x0                   	// #0
   12660:	cset	x0, ne  // ne = any
   12664:	orr	x9, x0, x9
   12668:	mov	x8, x9
   1266c:	b	12154 <mpc_ui_ui_sub@@Base+0x1c4>
   12670:	mov	w5, #0x80                  	// #128
   12674:	sub	w5, w5, w0
   12678:	subs	w0, w0, #0x40
   1267c:	lsl	x5, x4, x5
   12680:	orr	x5, x13, x5
   12684:	csel	x13, x5, x13, ne  // ne = any
   12688:	lsr	x4, x4, x0
   1268c:	cmp	x13, #0x0
   12690:	cset	x3, ne  // ne = any
   12694:	orr	x3, x3, x4
   12698:	b	120dc <mpc_ui_ui_sub@@Base+0x14c>
   1269c:	orr	x2, x2, x9
   126a0:	cmp	x2, #0x0
   126a4:	cset	x9, ne  // ne = any
   126a8:	subs	x9, x13, x9
   126ac:	mov	w7, w11
   126b0:	sbc	x2, x4, xzr
   126b4:	mov	x1, x3
   126b8:	mov	x12, x14
   126bc:	b	120e4 <mpc_ui_ui_sub@@Base+0x154>
   126c0:	mov	x0, #0x7fff                	// #32767
   126c4:	neg	w5, w5
   126c8:	orr	x2, x2, #0x8000000000000
   126cc:	cmp	x3, x0
   126d0:	b.eq	12424 <mpc_ui_ui_sub@@Base+0x494>  // b.none
   126d4:	cmp	w5, #0x74
   126d8:	b.gt	128a8 <mpc_ui_ui_sub@@Base+0x918>
   126dc:	cmp	w5, #0x3f
   126e0:	b.gt	12968 <mpc_ui_ui_sub@@Base+0x9d8>
   126e4:	mov	w1, #0x40                  	// #64
   126e8:	sub	w1, w1, w5
   126ec:	lsr	x6, x9, x5
   126f0:	lsl	x9, x9, x1
   126f4:	cmp	x9, #0x0
   126f8:	cset	x0, ne  // ne = any
   126fc:	lsl	x9, x2, x1
   12700:	orr	x9, x9, x6
   12704:	lsr	x5, x2, x5
   12708:	orr	x9, x9, x0
   1270c:	add	x4, x4, x5
   12710:	adds	x9, x9, x13
   12714:	mov	x1, x3
   12718:	cinc	x2, x4, cs  // cs = hs, nlast
   1271c:	b	12358 <mpc_ui_ui_sub@@Base+0x3c8>
   12720:	mov	w0, #0x80                  	// #128
   12724:	sub	w0, w0, w5
   12728:	subs	w5, w5, #0x40
   1272c:	lsl	x0, x4, x0
   12730:	orr	x0, x13, x0
   12734:	csel	x13, x0, x13, ne  // ne = any
   12738:	lsr	x4, x4, x5
   1273c:	cmp	x13, #0x0
   12740:	cset	x0, ne  // ne = any
   12744:	orr	x0, x0, x4
   12748:	b	1262c <mpc_ui_ui_sub@@Base+0x69c>
   1274c:	mov	x1, #0x7fff                	// #32767
   12750:	cmp	x0, x1
   12754:	b.eq	129b0 <mpc_ui_ui_sub@@Base+0xa20>  // b.none
   12758:	adds	x9, x9, x13
   1275c:	mov	x1, x0
   12760:	adc	x2, x4, x2
   12764:	ubfx	x0, x9, #1, #3
   12768:	extr	x9, x2, x9, #1
   1276c:	lsr	x2, x2, #1
   12770:	b	12164 <mpc_ui_ui_sub@@Base+0x1d4>
   12774:	cmp	x13, x9
   12778:	mov	w7, w11
   1277c:	sbc	x3, x4, x2
   12780:	sub	x9, x13, x9
   12784:	mov	x12, x14
   12788:	b	120ec <mpc_ui_ui_sub@@Base+0x15c>
   1278c:	mov	x12, #0x7fff                	// #32767
   12790:	cmp	x1, x12
   12794:	b.eq	127c0 <mpc_ui_ui_sub@@Base+0x830>  // b.none
   12798:	cmp	x3, x12
   1279c:	b.eq	129f0 <mpc_ui_ui_sub@@Base+0xa60>  // b.none
   127a0:	cbnz	x5, 127d8 <mpc_ui_ui_sub@@Base+0x848>
   127a4:	mov	w5, w0
   127a8:	cbnz	x8, 12ad0 <mpc_ui_ui_sub@@Base+0xb40>
   127ac:	mov	w7, #0x0                   	// #0
   127b0:	mov	x2, #0xffffffffffff        	// #281474976710655
   127b4:	mov	w0, #0x1                   	// #1
   127b8:	mov	x8, #0xffffffffffffffff    	// #-1
   127bc:	b	124c4 <mpc_ui_ui_sub@@Base+0x534>
   127c0:	cbz	x5, 12aec <mpc_ui_ui_sub@@Base+0xb5c>
   127c4:	lsr	x0, x2, #50
   127c8:	cmp	x3, x1
   127cc:	eor	x0, x0, #0x1
   127d0:	and	w0, w0, #0x1
   127d4:	b.eq	129f0 <mpc_ui_ui_sub@@Base+0xa60>  // b.none
   127d8:	cbz	x8, 12a0c <mpc_ui_ui_sub@@Base+0xa7c>
   127dc:	bfi	x6, x2, #61, #3
   127e0:	lsr	x3, x2, #3
   127e4:	tbz	x2, #50, 12800 <mpc_ui_ui_sub@@Base+0x870>
   127e8:	lsr	x1, x4, #3
   127ec:	tbnz	x4, #50, 12800 <mpc_ui_ui_sub@@Base+0x870>
   127f0:	mov	x6, x10
   127f4:	mov	w7, w11
   127f8:	bfi	x6, x4, #61, #3
   127fc:	mov	x3, x1
   12800:	extr	x2, x3, x6, #61
   12804:	bfi	x6, x2, #61, #3
   12808:	lsr	x2, x2, #3
   1280c:	mov	x8, x6
   12810:	b	124bc <mpc_ui_ui_sub@@Base+0x52c>
   12814:	mov	x0, #0x7fff                	// #32767
   12818:	cmp	x8, x0
   1281c:	b.ne	122c8 <mpc_ui_ui_sub@@Base+0x338>  // b.any
   12820:	orr	x0, x2, x9
   12824:	cbz	x0, 12610 <mpc_ui_ui_sub@@Base+0x680>
   12828:	lsr	x5, x2, #50
   1282c:	eor	w5, w5, #0x1
   12830:	b	124a0 <mpc_ui_ui_sub@@Base+0x510>
   12834:	cbz	x8, 12948 <mpc_ui_ui_sub@@Base+0x9b8>
   12838:	mov	w7, w11
   1283c:	mov	x2, x4
   12840:	mov	x9, x13
   12844:	mov	x12, x14
   12848:	mov	x1, #0x0                   	// #0
   1284c:	mov	x3, #0x0                   	// #0
   12850:	b	1252c <mpc_ui_ui_sub@@Base+0x59c>
   12854:	ands	x3, x15, #0xc00000
   12858:	b.eq	128e4 <mpc_ui_ui_sub@@Base+0x954>  // b.none
   1285c:	cmp	x3, #0x400, lsl #12
   12860:	eor	w0, w7, #0x1
   12864:	cset	w1, eq  // eq = none
   12868:	tst	w1, w0
   1286c:	b.ne	12b08 <mpc_ui_ui_sub@@Base+0xb78>  // b.any
   12870:	cmp	x3, #0x800, lsl #12
   12874:	b.eq	12ab4 <mpc_ui_ui_sub@@Base+0xb24>  // b.none
   12878:	cmp	x3, #0x400, lsl #12
   1287c:	mov	w0, #0x14                  	// #20
   12880:	b.ne	12390 <mpc_ui_ui_sub@@Base+0x400>  // b.any
   12884:	mov	x2, #0xffffffffffffffff    	// #-1
   12888:	mov	x1, #0x7ffe                	// #32766
   1288c:	mov	x9, x2
   12890:	mov	w5, #0x0                   	// #0
   12894:	mov	w0, #0x14                  	// #20
   12898:	cbnz	x12, 12454 <mpc_ui_ui_sub@@Base+0x4c4>
   1289c:	b	1244c <mpc_ui_ui_sub@@Base+0x4bc>
   128a0:	mov	x9, x5
   128a4:	b	120ec <mpc_ui_ui_sub@@Base+0x15c>
   128a8:	orr	x2, x2, x9
   128ac:	cmp	x2, #0x0
   128b0:	cset	x9, ne  // ne = any
   128b4:	b	12710 <mpc_ui_ui_sub@@Base+0x780>
   128b8:	mov	w1, #0x80                  	// #128
   128bc:	sub	w1, w1, w0
   128c0:	subs	w0, w0, #0x40
   128c4:	lsl	x1, x2, x1
   128c8:	orr	x1, x9, x1
   128cc:	csel	x9, x1, x9, ne  // ne = any
   128d0:	lsr	x2, x2, x0
   128d4:	cmp	x9, #0x0
   128d8:	cset	x9, ne  // ne = any
   128dc:	orr	x9, x9, x2
   128e0:	b	126a8 <mpc_ui_ui_sub@@Base+0x718>
   128e4:	mov	w0, #0x14                  	// #20
   128e8:	b	123d4 <mpc_ui_ui_sub@@Base+0x444>
   128ec:	lsr	x5, x4, #50
   128f0:	mov	w7, w11
   128f4:	eor	x5, x5, #0x1
   128f8:	mov	x9, x13
   128fc:	and	w5, w5, #0x1
   12900:	mov	x2, x4
   12904:	b	124a0 <mpc_ui_ui_sub@@Base+0x510>
   12908:	mov	x8, #0x7fff                	// #32767
   1290c:	cmp	x1, x8
   12910:	b.eq	12a30 <mpc_ui_ui_sub@@Base+0xaa0>  // b.none
   12914:	cmp	x3, x8
   12918:	b.eq	12aa4 <mpc_ui_ui_sub@@Base+0xb14>  // b.none
   1291c:	cbnz	x0, 12a48 <mpc_ui_ui_sub@@Base+0xab8>
   12920:	mov	x2, x4
   12924:	mov	x9, x13
   12928:	b	124a0 <mpc_ui_ui_sub@@Base+0x510>
   1292c:	mov	x0, #0x7fff                	// #32767
   12930:	cmp	x3, x0
   12934:	b.eq	12ae0 <mpc_ui_ui_sub@@Base+0xb50>  // b.none
   12938:	mov	x2, x4
   1293c:	mov	x9, x13
   12940:	mov	x1, x3
   12944:	b	122c8 <mpc_ui_ui_sub@@Base+0x338>
   12948:	and	x15, x15, #0xc00000
   1294c:	mov	x2, #0x0                   	// #0
   12950:	cmp	x15, #0x800, lsl #12
   12954:	cset	w7, eq  // eq = none
   12958:	b	122e8 <mpc_ui_ui_sub@@Base+0x358>
   1295c:	mov	x2, x4
   12960:	mov	x9, x13
   12964:	b	12154 <mpc_ui_ui_sub@@Base+0x1c4>
   12968:	mov	w0, #0x80                  	// #128
   1296c:	sub	w0, w0, w5
   12970:	subs	w5, w5, #0x40
   12974:	lsl	x0, x2, x0
   12978:	orr	x0, x9, x0
   1297c:	csel	x9, x0, x9, ne  // ne = any
   12980:	lsr	x2, x2, x5
   12984:	cmp	x9, #0x0
   12988:	cset	x9, ne  // ne = any
   1298c:	orr	x9, x9, x2
   12990:	b	12710 <mpc_ui_ui_sub@@Base+0x780>
   12994:	cmp	x13, x9
   12998:	mov	w7, w11
   1299c:	sbc	x2, x4, x2
   129a0:	sub	x9, x13, x9
   129a4:	mov	x1, x3
   129a8:	mov	x12, x5
   129ac:	b	120e4 <mpc_ui_ui_sub@@Base+0x154>
   129b0:	ands	x3, x15, #0xc00000
   129b4:	b.eq	128e4 <mpc_ui_ui_sub@@Base+0x954>  // b.none
   129b8:	cmp	x3, #0x400, lsl #12
   129bc:	eor	w0, w7, #0x1
   129c0:	csel	w0, w0, wzr, eq  // eq = none
   129c4:	cbnz	w0, 12b08 <mpc_ui_ui_sub@@Base+0xb78>
   129c8:	cmp	x3, #0x800, lsl #12
   129cc:	b.ne	12878 <mpc_ui_ui_sub@@Base+0x8e8>  // b.any
   129d0:	cbz	x12, 12ab8 <mpc_ui_ui_sub@@Base+0xb28>
   129d4:	mov	w0, #0x14                  	// #20
   129d8:	mov	x16, #0x1                   	// #1
   129dc:	b	123d4 <mpc_ui_ui_sub@@Base+0x444>
   129e0:	orr	x0, x4, x13
   129e4:	cbnz	x0, 128ec <mpc_ui_ui_sub@@Base+0x95c>
   129e8:	mov	w7, w11
   129ec:	b	12610 <mpc_ui_ui_sub@@Base+0x680>
   129f0:	cbz	x8, 12afc <mpc_ui_ui_sub@@Base+0xb6c>
   129f4:	tst	x4, #0x4000000000000
   129f8:	csinc	w0, w0, wzr, ne  // ne = any
   129fc:	cbnz	x5, 127dc <mpc_ui_ui_sub@@Base+0x84c>
   12a00:	mov	w7, w11
   12a04:	mov	x2, x4
   12a08:	mov	x9, x13
   12a0c:	mov	w5, w0
   12a10:	b	124a0 <mpc_ui_ui_sub@@Base+0x510>
   12a14:	orr	x8, x5, x3
   12a18:	cbz	x8, 12948 <mpc_ui_ui_sub@@Base+0x9b8>
   12a1c:	and	x0, x5, #0x7
   12a20:	mov	x9, x5
   12a24:	mov	x2, x3
   12a28:	mov	w5, #0x1                   	// #1
   12a2c:	b	12164 <mpc_ui_ui_sub@@Base+0x1d4>
   12a30:	cbz	x0, 12a9c <mpc_ui_ui_sub@@Base+0xb0c>
   12a34:	lsr	x5, x2, #50
   12a38:	cmp	x3, x1
   12a3c:	eor	x5, x5, #0x1
   12a40:	and	w5, w5, #0x1
   12a44:	b.eq	12b14 <mpc_ui_ui_sub@@Base+0xb84>  // b.none
   12a48:	orr	x13, x4, x13
   12a4c:	cbz	x13, 124a0 <mpc_ui_ui_sub@@Base+0x510>
   12a50:	bfi	x6, x2, #61, #3
   12a54:	lsr	x0, x2, #3
   12a58:	tbz	x2, #50, 12a74 <mpc_ui_ui_sub@@Base+0xae4>
   12a5c:	lsr	x1, x4, #3
   12a60:	tbnz	x4, #50, 12a74 <mpc_ui_ui_sub@@Base+0xae4>
   12a64:	and	x6, x10, #0x1fffffffffffffff
   12a68:	mov	w7, w11
   12a6c:	orr	x6, x6, x4, lsl #61
   12a70:	mov	x0, x1
   12a74:	extr	x2, x0, x6, #61
   12a78:	mov	w0, w5
   12a7c:	bfi	x6, x2, #61, #3
   12a80:	lsr	x2, x2, #3
   12a84:	mov	x8, x6
   12a88:	b	124bc <mpc_ui_ui_sub@@Base+0x52c>
   12a8c:	adds	x9, x9, x13
   12a90:	mov	x1, x3
   12a94:	adc	x2, x4, x2
   12a98:	b	12358 <mpc_ui_ui_sub@@Base+0x3c8>
   12a9c:	cmp	x3, x1
   12aa0:	b.ne	12920 <mpc_ui_ui_sub@@Base+0x990>  // b.any
   12aa4:	orr	x1, x4, x13
   12aa8:	cbnz	x1, 12b1c <mpc_ui_ui_sub@@Base+0xb8c>
   12aac:	cbz	x0, 12610 <mpc_ui_ui_sub@@Base+0x680>
   12ab0:	b	124a0 <mpc_ui_ui_sub@@Base+0x510>
   12ab4:	cbnz	x16, 129d4 <mpc_ui_ui_sub@@Base+0xa44>
   12ab8:	mov	x2, #0xffffffffffffffff    	// #-1
   12abc:	mov	w7, #0x0                   	// #0
   12ac0:	mov	x9, x2
   12ac4:	mov	x1, #0x7ffe                	// #32766
   12ac8:	mov	w0, #0x14                  	// #20
   12acc:	b	12194 <mpc_ui_ui_sub@@Base+0x204>
   12ad0:	mov	w7, w11
   12ad4:	mov	x2, x4
   12ad8:	mov	x9, x13
   12adc:	b	124a0 <mpc_ui_ui_sub@@Base+0x510>
   12ae0:	orr	x0, x4, x13
   12ae4:	cbz	x0, 12610 <mpc_ui_ui_sub@@Base+0x680>
   12ae8:	b	1242c <mpc_ui_ui_sub@@Base+0x49c>
   12aec:	cmp	x3, x1
   12af0:	b.eq	129f0 <mpc_ui_ui_sub@@Base+0xa60>  // b.none
   12af4:	mov	w5, #0x0                   	// #0
   12af8:	b	127a8 <mpc_ui_ui_sub@@Base+0x818>
   12afc:	cbnz	x5, 12a0c <mpc_ui_ui_sub@@Base+0xa7c>
   12b00:	mov	w5, w0
   12b04:	b	127a8 <mpc_ui_ui_sub@@Base+0x818>
   12b08:	mov	w0, #0x14                  	// #20
   12b0c:	mov	x16, #0x0                   	// #0
   12b10:	b	123d4 <mpc_ui_ui_sub@@Base+0x444>
   12b14:	orr	x1, x4, x13
   12b18:	cbz	x1, 124a0 <mpc_ui_ui_sub@@Base+0x510>
   12b1c:	tst	x4, #0x4000000000000
   12b20:	csinc	w5, w5, wzr, ne  // ne = any
   12b24:	cbnz	x0, 12a50 <mpc_ui_ui_sub@@Base+0xac0>
   12b28:	b	12920 <mpc_ui_ui_sub@@Base+0x990>
   12b2c:	mov	x8, #0x0                   	// #0
   12b30:	mov	w1, #0x7fff                	// #32767
   12b34:	mov	x2, #0x0                   	// #0
   12b38:	b	121b0 <mpc_ui_ui_sub@@Base+0x220>
   12b3c:	nop
   12b40:	stp	x29, x30, [sp, #-80]!
   12b44:	mov	x29, sp
   12b48:	str	q0, [sp, #48]
   12b4c:	str	q1, [sp, #64]
   12b50:	ldp	x1, x0, [sp, #48]
   12b54:	ldp	x6, x2, [sp, #64]
   12b58:	mrs	x11, fpcr
   12b5c:	lsr	x3, x0, #63
   12b60:	ubfx	x7, x0, #0, #48
   12b64:	and	w12, w3, #0xff
   12b68:	mov	x14, x3
   12b6c:	ubfx	x3, x0, #48, #15
   12b70:	cbz	w3, 12f18 <mpc_ui_ui_sub@@Base+0xf88>
   12b74:	mov	w4, #0x7fff                	// #32767
   12b78:	cmp	w3, w4
   12b7c:	b.eq	12fbc <mpc_ui_ui_sub@@Base+0x102c>  // b.none
   12b80:	and	x3, x3, #0xffff
   12b84:	extr	x4, x7, x1, #61
   12b88:	mov	x18, #0xffffffffffffc001    	// #-16383
   12b8c:	orr	x7, x4, #0x8000000000000
   12b90:	add	x3, x3, x18
   12b94:	lsl	x5, x1, #3
   12b98:	mov	x16, #0x0                   	// #0
   12b9c:	mov	x1, #0x0                   	// #0
   12ba0:	mov	w0, #0x0                   	// #0
   12ba4:	lsr	x8, x2, #63
   12ba8:	ubfx	x4, x2, #0, #48
   12bac:	and	w15, w8, #0xff
   12bb0:	mov	x13, x8
   12bb4:	ubfx	x9, x2, #48, #15
   12bb8:	cbz	w9, 12f78 <mpc_ui_ui_sub@@Base+0xfe8>
   12bbc:	mov	w8, #0x7fff                	// #32767
   12bc0:	cmp	w9, w8
   12bc4:	b.eq	12c48 <mpc_ui_ui_sub@@Base+0xcb8>  // b.none
   12bc8:	and	x9, x9, #0xffff
   12bcc:	mov	x17, #0xffffffffffffc001    	// #-16383
   12bd0:	add	x9, x9, x17
   12bd4:	extr	x2, x4, x6, #61
   12bd8:	add	x9, x9, x3
   12bdc:	lsl	x6, x6, #3
   12be0:	orr	x4, x2, #0x8000000000000
   12be4:	mov	x2, #0x0                   	// #0
   12be8:	eor	w8, w12, w15
   12bec:	cmp	x1, #0xa
   12bf0:	and	w10, w8, #0xff
   12bf4:	add	x3, x9, #0x1
   12bf8:	and	x8, x8, #0xff
   12bfc:	b.le	12c80 <mpc_ui_ui_sub@@Base+0xcf0>
   12c00:	cmp	x1, #0xb
   12c04:	b.eq	13318 <mpc_ui_ui_sub@@Base+0x1388>  // b.none
   12c08:	mov	w15, w12
   12c0c:	mov	x13, x14
   12c10:	mov	w10, w15
   12c14:	cmp	x16, #0x2
   12c18:	b.eq	12fdc <mpc_ui_ui_sub@@Base+0x104c>  // b.none
   12c1c:	mov	x4, x7
   12c20:	mov	x6, x5
   12c24:	mov	x2, x16
   12c28:	mov	x8, x13
   12c2c:	cmp	x2, #0x3
   12c30:	b.ne	12c9c <mpc_ui_ui_sub@@Base+0xd0c>  // b.any
   12c34:	orr	x4, x4, #0x800000000000
   12c38:	mov	x5, x6
   12c3c:	and	x4, x4, #0xffffffffffff
   12c40:	mov	w1, #0x7fff                	// #32767
   12c44:	b	12cb0 <mpc_ui_ui_sub@@Base+0xd20>
   12c48:	mov	x8, #0x7fff                	// #32767
   12c4c:	orr	x2, x4, x6
   12c50:	add	x9, x3, x8
   12c54:	cbnz	x2, 12cd4 <mpc_ui_ui_sub@@Base+0xd44>
   12c58:	eor	w8, w12, w15
   12c5c:	orr	x1, x1, #0x2
   12c60:	and	w10, w8, #0xff
   12c64:	cmp	x1, #0xa
   12c68:	add	x3, x3, #0x8, lsl #12
   12c6c:	and	x8, x8, #0xff
   12c70:	mov	x6, #0x0                   	// #0
   12c74:	b.gt	1328c <mpc_ui_ui_sub@@Base+0x12fc>
   12c78:	mov	x4, #0x0                   	// #0
   12c7c:	mov	x2, #0x2                   	// #2
   12c80:	cmp	x1, #0x2
   12c84:	b.gt	12cfc <mpc_ui_ui_sub@@Base+0xd6c>
   12c88:	sub	x1, x1, #0x1
   12c8c:	cmp	x1, #0x1
   12c90:	b.hi	12d38 <mpc_ui_ui_sub@@Base+0xda8>  // b.pmore
   12c94:	cmp	x2, #0x2
   12c98:	b.eq	12fdc <mpc_ui_ui_sub@@Base+0x104c>  // b.none
   12c9c:	cmp	x2, #0x1
   12ca0:	b.ne	12e98 <mpc_ui_ui_sub@@Base+0xf08>  // b.any
   12ca4:	mov	w1, #0x0                   	// #0
   12ca8:	mov	x4, #0x0                   	// #0
   12cac:	mov	x5, #0x0                   	// #0
   12cb0:	mov	x3, #0x0                   	// #0
   12cb4:	orr	w1, w1, w10, lsl #15
   12cb8:	bfxil	x3, x4, #0, #48
   12cbc:	fmov	d0, x5
   12cc0:	bfi	x3, x1, #48, #16
   12cc4:	fmov	v0.d[1], x3
   12cc8:	cbnz	w0, 13108 <mpc_ui_ui_sub@@Base+0x1178>
   12ccc:	ldp	x29, x30, [sp], #80
   12cd0:	ret
   12cd4:	tst	x4, #0x800000000000
   12cd8:	eor	w8, w12, w15
   12cdc:	orr	x1, x1, #0x3
   12ce0:	csinc	w0, w0, wzr, ne  // ne = any
   12ce4:	and	w10, w8, #0xff
   12ce8:	add	x3, x3, #0x8, lsl #12
   12cec:	cmp	x1, #0xa
   12cf0:	and	x8, x8, #0xff
   12cf4:	mov	x2, #0x3                   	// #3
   12cf8:	b.gt	1330c <mpc_ui_ui_sub@@Base+0x137c>
   12cfc:	mov	x12, #0x1                   	// #1
   12d00:	mov	x14, #0x530                 	// #1328
   12d04:	lsl	x1, x12, x1
   12d08:	tst	x1, x14
   12d0c:	b.ne	12f0c <mpc_ui_ui_sub@@Base+0xf7c>  // b.any
   12d10:	mov	x14, #0x240                 	// #576
   12d14:	tst	x1, x14
   12d18:	b.ne	12ef4 <mpc_ui_ui_sub@@Base+0xf64>  // b.any
   12d1c:	mov	x12, #0x88                  	// #136
   12d20:	tst	x1, x12
   12d24:	b.eq	12d38 <mpc_ui_ui_sub@@Base+0xda8>  // b.none
   12d28:	mov	x7, x4
   12d2c:	mov	x5, x6
   12d30:	mov	x16, x2
   12d34:	b	12c10 <mpc_ui_ui_sub@@Base+0xc80>
   12d38:	lsr	x13, x5, #32
   12d3c:	and	x12, x6, #0xffffffff
   12d40:	and	x15, x5, #0xffffffff
   12d44:	lsr	x6, x6, #32
   12d48:	and	x18, x4, #0xffffffff
   12d4c:	lsr	x2, x4, #32
   12d50:	mul	x4, x13, x12
   12d54:	stp	x21, x22, [sp, #32]
   12d58:	lsr	x22, x7, #32
   12d5c:	and	x5, x7, #0xffffffff
   12d60:	mul	x16, x12, x15
   12d64:	madd	x7, x6, x15, x4
   12d68:	stp	x19, x20, [sp, #16]
   12d6c:	mul	x1, x13, x18
   12d70:	mul	x17, x15, x18
   12d74:	and	x30, x16, #0xffffffff
   12d78:	madd	x15, x2, x15, x1
   12d7c:	add	x16, x7, x16, lsr #32
   12d80:	mul	x21, x22, x12
   12d84:	cmp	x4, x16
   12d88:	mul	x20, x22, x18
   12d8c:	mov	x14, #0x100000000           	// #4294967296
   12d90:	mul	x19, x13, x6
   12d94:	add	x15, x15, x17, lsr #32
   12d98:	mul	x12, x12, x5
   12d9c:	and	x17, x17, #0xffffffff
   12da0:	mul	x18, x5, x18
   12da4:	add	x4, x19, x14
   12da8:	madd	x7, x6, x5, x21
   12dac:	csel	x19, x4, x19, hi  // hi = pmore
   12db0:	madd	x5, x2, x5, x20
   12db4:	cmp	x1, x15
   12db8:	mul	x13, x13, x2
   12dbc:	add	x17, x17, x15, lsl #32
   12dc0:	mul	x6, x6, x22
   12dc4:	add	x7, x7, x12, lsr #32
   12dc8:	add	x5, x5, x18, lsr #32
   12dcc:	add	x4, x13, x14
   12dd0:	mul	x2, x2, x22
   12dd4:	csel	x13, x4, x13, hi  // hi = pmore
   12dd8:	and	x1, x18, #0xffffffff
   12ddc:	cmp	x21, x7
   12de0:	add	x4, x6, x14
   12de4:	add	x30, x30, x16, lsl #32
   12de8:	csel	x6, x4, x6, hi  // hi = pmore
   12dec:	add	x13, x13, x15, lsr #32
   12df0:	cmp	x20, x5
   12df4:	add	x1, x1, x5, lsl #32
   12df8:	add	x16, x17, x16, lsr #32
   12dfc:	add	x14, x2, x14
   12e00:	csel	x2, x14, x2, hi  // hi = pmore
   12e04:	add	x16, x19, x16
   12e08:	adds	x1, x1, x13
   12e0c:	and	x12, x12, #0xffffffff
   12e10:	cset	x13, cs  // cs = hs, nlast
   12e14:	cmp	x16, x17
   12e18:	cset	x4, cc  // cc = lo, ul, last
   12e1c:	add	x12, x12, x7, lsl #32
   12e20:	adds	x1, x1, x4
   12e24:	lsr	x5, x5, #32
   12e28:	cset	x4, cs  // cs = hs, nlast
   12e2c:	cmp	x13, #0x0
   12e30:	ccmp	x4, #0x0, #0x0, eq  // eq = none
   12e34:	add	x7, x6, x7, lsr #32
   12e38:	cinc	x5, x5, ne  // ne = any
   12e3c:	adds	x6, x16, x12
   12e40:	cset	x4, cs  // cs = hs, nlast
   12e44:	adds	x1, x1, x7
   12e48:	cset	x7, cs  // cs = hs, nlast
   12e4c:	adds	x4, x1, x4
   12e50:	cset	x1, cs  // cs = hs, nlast
   12e54:	cmp	x7, #0x0
   12e58:	orr	x30, x30, x6, lsl #13
   12e5c:	ccmp	x1, #0x0, #0x0, eq  // eq = none
   12e60:	cinc	x1, x2, ne  // ne = any
   12e64:	cmp	x30, #0x0
   12e68:	add	x1, x1, x5
   12e6c:	cset	x2, ne  // ne = any
   12e70:	orr	x6, x2, x6, lsr #51
   12e74:	orr	x6, x6, x4, lsl #13
   12e78:	extr	x4, x1, x4, #51
   12e7c:	tbz	x1, #39, 13190 <mpc_ui_ui_sub@@Base+0x1200>
   12e80:	ldp	x19, x20, [sp, #16]
   12e84:	and	x1, x6, #0x1
   12e88:	ldp	x21, x22, [sp, #32]
   12e8c:	orr	x6, x1, x6, lsr #1
   12e90:	orr	x6, x6, x4, lsl #63
   12e94:	lsr	x4, x4, #1
   12e98:	mov	x1, #0x3fff                	// #16383
   12e9c:	add	x2, x3, x1
   12ea0:	cmp	x2, #0x0
   12ea4:	b.le	1303c <mpc_ui_ui_sub@@Base+0x10ac>
   12ea8:	tst	x6, #0x7
   12eac:	b.eq	12ecc <mpc_ui_ui_sub@@Base+0xf3c>  // b.none
   12eb0:	and	x1, x11, #0xc00000
   12eb4:	orr	w0, w0, #0x10
   12eb8:	cmp	x1, #0x400, lsl #12
   12ebc:	b.eq	13284 <mpc_ui_ui_sub@@Base+0x12f4>  // b.none
   12ec0:	cmp	x1, #0x800, lsl #12
   12ec4:	b.eq	1322c <mpc_ui_ui_sub@@Base+0x129c>  // b.none
   12ec8:	cbz	x1, 13214 <mpc_ui_ui_sub@@Base+0x1284>
   12ecc:	tbz	x4, #52, 12ed8 <mpc_ui_ui_sub@@Base+0xf48>
   12ed0:	and	x4, x4, #0xffefffffffffffff
   12ed4:	add	x2, x3, #0x4, lsl #12
   12ed8:	mov	x1, #0x7ffe                	// #32766
   12edc:	cmp	x2, x1
   12ee0:	b.gt	13164 <mpc_ui_ui_sub@@Base+0x11d4>
   12ee4:	and	w1, w2, #0x7fff
   12ee8:	extr	x5, x4, x6, #3
   12eec:	ubfx	x4, x4, #3, #48
   12ef0:	b	12cb0 <mpc_ui_ui_sub@@Base+0xd20>
   12ef4:	mov	w0, w12
   12ef8:	mov	w10, #0x0                   	// #0
   12efc:	mov	x4, #0xffffffffffff        	// #281474976710655
   12f00:	mov	x5, #0xffffffffffffffff    	// #-1
   12f04:	mov	w1, #0x7fff                	// #32767
   12f08:	b	12cb0 <mpc_ui_ui_sub@@Base+0xd20>
   12f0c:	mov	w15, w10
   12f10:	mov	x13, x8
   12f14:	b	12c10 <mpc_ui_ui_sub@@Base+0xc80>
   12f18:	orr	x5, x7, x1
   12f1c:	cbz	x5, 13024 <mpc_ui_ui_sub@@Base+0x1094>
   12f20:	cbz	x7, 13140 <mpc_ui_ui_sub@@Base+0x11b0>
   12f24:	clz	x0, x7
   12f28:	sub	x4, x0, #0xf
   12f2c:	add	w5, w4, #0x3
   12f30:	mov	w3, #0x3d                  	// #61
   12f34:	sub	w3, w3, w4
   12f38:	lsl	x4, x7, x5
   12f3c:	lsr	x3, x1, x3
   12f40:	orr	x7, x3, x4
   12f44:	lsl	x5, x1, x5
   12f48:	lsr	x8, x2, #63
   12f4c:	mov	x3, #0xffffffffffffc011    	// #-16367
   12f50:	ubfx	x4, x2, #0, #48
   12f54:	sub	x3, x3, x0
   12f58:	and	w15, w8, #0xff
   12f5c:	mov	x13, x8
   12f60:	ubfx	x9, x2, #48, #15
   12f64:	mov	x1, #0x0                   	// #0
   12f68:	mov	x16, #0x0                   	// #0
   12f6c:	mov	w0, #0x0                   	// #0
   12f70:	cbnz	w9, 12bbc <mpc_ui_ui_sub@@Base+0xc2c>
   12f74:	nop
   12f78:	orr	x2, x4, x6
   12f7c:	cbz	x2, 12fec <mpc_ui_ui_sub@@Base+0x105c>
   12f80:	cbz	x4, 1311c <mpc_ui_ui_sub@@Base+0x118c>
   12f84:	clz	x9, x4
   12f88:	sub	x2, x9, #0xf
   12f8c:	add	w10, w2, #0x3
   12f90:	mov	w8, #0x3d                  	// #61
   12f94:	sub	w8, w8, w2
   12f98:	lsl	x2, x4, x10
   12f9c:	lsr	x8, x6, x8
   12fa0:	orr	x4, x8, x2
   12fa4:	lsl	x6, x6, x10
   12fa8:	sub	x9, x3, x9
   12fac:	mov	x10, #0xffffffffffffc011    	// #-16367
   12fb0:	mov	x2, #0x0                   	// #0
   12fb4:	add	x9, x9, x10
   12fb8:	b	12be8 <mpc_ui_ui_sub@@Base+0xc58>
   12fbc:	orr	x5, x7, x1
   12fc0:	cbnz	x5, 13004 <mpc_ui_ui_sub@@Base+0x1074>
   12fc4:	mov	x7, #0x0                   	// #0
   12fc8:	mov	x1, #0x8                   	// #8
   12fcc:	mov	x3, #0x7fff                	// #32767
   12fd0:	mov	x16, #0x2                   	// #2
   12fd4:	mov	w0, #0x0                   	// #0
   12fd8:	b	12ba4 <mpc_ui_ui_sub@@Base+0xc14>
   12fdc:	mov	w1, #0x7fff                	// #32767
   12fe0:	mov	x4, #0x0                   	// #0
   12fe4:	mov	x5, #0x0                   	// #0
   12fe8:	b	12cb0 <mpc_ui_ui_sub@@Base+0xd20>
   12fec:	orr	x1, x1, #0x1
   12ff0:	mov	x9, x3
   12ff4:	mov	x4, #0x0                   	// #0
   12ff8:	mov	x6, #0x0                   	// #0
   12ffc:	mov	x2, #0x1                   	// #1
   13000:	b	12be8 <mpc_ui_ui_sub@@Base+0xc58>
   13004:	lsr	x0, x7, #47
   13008:	mov	x5, x1
   1300c:	eor	x0, x0, #0x1
   13010:	mov	x1, #0xc                   	// #12
   13014:	and	w0, w0, #0x1
   13018:	mov	x3, #0x7fff                	// #32767
   1301c:	mov	x16, #0x3                   	// #3
   13020:	b	12ba4 <mpc_ui_ui_sub@@Base+0xc14>
   13024:	mov	x7, #0x0                   	// #0
   13028:	mov	x1, #0x4                   	// #4
   1302c:	mov	x3, #0x0                   	// #0
   13030:	mov	x16, #0x1                   	// #1
   13034:	mov	w0, #0x0                   	// #0
   13038:	b	12ba4 <mpc_ui_ui_sub@@Base+0xc14>
   1303c:	mov	x1, #0x1                   	// #1
   13040:	sub	x2, x1, x2
   13044:	cmp	x2, #0x74
   13048:	b.gt	130c0 <mpc_ui_ui_sub@@Base+0x1130>
   1304c:	cmp	x2, #0x3f
   13050:	b.le	131a0 <mpc_ui_ui_sub@@Base+0x1210>
   13054:	mov	w1, #0x80                  	// #128
   13058:	sub	w1, w1, w2
   1305c:	cmp	x2, #0x40
   13060:	sub	w2, w2, #0x40
   13064:	lsl	x1, x4, x1
   13068:	orr	x1, x6, x1
   1306c:	csel	x6, x1, x6, ne  // ne = any
   13070:	lsr	x2, x4, x2
   13074:	cmp	x6, #0x0
   13078:	cset	x5, ne  // ne = any
   1307c:	orr	x5, x5, x2
   13080:	ands	x2, x5, #0x7
   13084:	b.eq	131d4 <mpc_ui_ui_sub@@Base+0x1244>  // b.none
   13088:	mov	x2, #0x0                   	// #0
   1308c:	and	x11, x11, #0xc00000
   13090:	orr	w0, w0, #0x10
   13094:	cmp	x11, #0x400, lsl #12
   13098:	b.eq	132e4 <mpc_ui_ui_sub@@Base+0x1354>  // b.none
   1309c:	cmp	x11, #0x800, lsl #12
   130a0:	b.eq	132f8 <mpc_ui_ui_sub@@Base+0x1368>  // b.none
   130a4:	cbz	x11, 1323c <mpc_ui_ui_sub@@Base+0x12ac>
   130a8:	tbnz	x2, #51, 13254 <mpc_ui_ui_sub@@Base+0x12c4>
   130ac:	ubfx	x4, x2, #3, #48
   130b0:	extr	x5, x2, x5, #3
   130b4:	orr	w0, w0, #0x8
   130b8:	mov	w1, #0x0                   	// #0
   130bc:	b	130f0 <mpc_ui_ui_sub@@Base+0x1160>
   130c0:	orr	x5, x6, x4
   130c4:	cbz	x5, 130e4 <mpc_ui_ui_sub@@Base+0x1154>
   130c8:	and	x11, x11, #0xc00000
   130cc:	orr	w0, w0, #0x10
   130d0:	cmp	x11, #0x400, lsl #12
   130d4:	sub	x5, x1, x8
   130d8:	b.eq	130e4 <mpc_ui_ui_sub@@Base+0x1154>  // b.none
   130dc:	cmp	x11, #0x800, lsl #12
   130e0:	csel	x5, x8, xzr, eq  // eq = none
   130e4:	orr	w0, w0, #0x8
   130e8:	mov	w1, #0x0                   	// #0
   130ec:	mov	x4, #0x0                   	// #0
   130f0:	mov	x3, #0x0                   	// #0
   130f4:	fmov	d0, x5
   130f8:	bfxil	x3, x4, #0, #48
   130fc:	bfi	x3, x1, #48, #15
   13100:	bfi	x3, x10, #63, #1
   13104:	fmov	v0.d[1], x3
   13108:	str	q0, [sp, #48]
   1310c:	bl	13328 <mpc_ui_ui_sub@@Base+0x1398>
   13110:	ldr	q0, [sp, #48]
   13114:	ldp	x29, x30, [sp], #80
   13118:	ret
   1311c:	clz	x9, x6
   13120:	add	x2, x9, #0x31
   13124:	add	x9, x9, #0x40
   13128:	cmp	x2, #0x3c
   1312c:	b.le	12f8c <mpc_ui_ui_sub@@Base+0xffc>
   13130:	sub	w2, w2, #0x3d
   13134:	lsl	x4, x6, x2
   13138:	mov	x6, #0x0                   	// #0
   1313c:	b	12fa8 <mpc_ui_ui_sub@@Base+0x1018>
   13140:	clz	x3, x1
   13144:	add	x4, x3, #0x31
   13148:	add	x0, x3, #0x40
   1314c:	cmp	x4, #0x3c
   13150:	b.le	12f2c <mpc_ui_ui_sub@@Base+0xf9c>
   13154:	sub	w4, w4, #0x3d
   13158:	mov	x5, #0x0                   	// #0
   1315c:	lsl	x7, x1, x4
   13160:	b	12f48 <mpc_ui_ui_sub@@Base+0xfb8>
   13164:	and	x5, x11, #0xc00000
   13168:	cmp	x5, #0x400, lsl #12
   1316c:	b.eq	13268 <mpc_ui_ui_sub@@Base+0x12d8>  // b.none
   13170:	cmp	x5, #0x800, lsl #12
   13174:	b.eq	131f8 <mpc_ui_ui_sub@@Base+0x1268>  // b.none
   13178:	cbz	x5, 131ec <mpc_ui_ui_sub@@Base+0x125c>
   1317c:	mov	x4, #0xffffffffffff        	// #281474976710655
   13180:	mov	x5, #0xffffffffffffffff    	// #-1
   13184:	mov	w2, #0x14                  	// #20
   13188:	orr	w0, w0, w2
   1318c:	b	130f0 <mpc_ui_ui_sub@@Base+0x1160>
   13190:	mov	x3, x9
   13194:	ldp	x19, x20, [sp, #16]
   13198:	ldp	x21, x22, [sp, #32]
   1319c:	b	12e98 <mpc_ui_ui_sub@@Base+0xf08>
   131a0:	mov	w1, #0x40                  	// #64
   131a4:	sub	w1, w1, w2
   131a8:	lsr	x3, x6, x2
   131ac:	lsl	x6, x6, x1
   131b0:	cmp	x6, #0x0
   131b4:	lsl	x5, x4, x1
   131b8:	cset	x1, ne  // ne = any
   131bc:	orr	x5, x5, x3
   131c0:	lsr	x2, x4, x2
   131c4:	orr	x5, x5, x1
   131c8:	tst	x5, #0x7
   131cc:	b.ne	1308c <mpc_ui_ui_sub@@Base+0x10fc>  // b.any
   131d0:	tbnz	x2, #51, 13304 <mpc_ui_ui_sub@@Base+0x1374>
   131d4:	ubfx	x4, x2, #3, #48
   131d8:	extr	x5, x2, x5, #3
   131dc:	mov	w1, #0x0                   	// #0
   131e0:	tbz	w11, #11, 12cb0 <mpc_ui_ui_sub@@Base+0xd20>
   131e4:	orr	w0, w0, #0x8
   131e8:	b	130f0 <mpc_ui_ui_sub@@Base+0x1160>
   131ec:	mov	w1, #0x7fff                	// #32767
   131f0:	mov	x4, #0x0                   	// #0
   131f4:	b	13184 <mpc_ui_ui_sub@@Base+0x11f4>
   131f8:	cmp	x8, #0x0
   131fc:	mov	w2, #0x7fff                	// #32767
   13200:	mov	x4, #0xffffffffffff        	// #281474976710655
   13204:	csel	w1, w1, w2, eq  // eq = none
   13208:	csel	x4, x4, xzr, eq  // eq = none
   1320c:	csetm	x5, eq  // eq = none
   13210:	b	13184 <mpc_ui_ui_sub@@Base+0x11f4>
   13214:	and	x1, x6, #0xf
   13218:	cmp	x1, #0x4
   1321c:	b.eq	12ecc <mpc_ui_ui_sub@@Base+0xf3c>  // b.none
   13220:	adds	x6, x6, #0x4
   13224:	cinc	x4, x4, cs  // cs = hs, nlast
   13228:	b	12ecc <mpc_ui_ui_sub@@Base+0xf3c>
   1322c:	cbz	x8, 12ecc <mpc_ui_ui_sub@@Base+0xf3c>
   13230:	adds	x6, x6, #0x8
   13234:	cinc	x4, x4, cs  // cs = hs, nlast
   13238:	b	12ecc <mpc_ui_ui_sub@@Base+0xf3c>
   1323c:	and	x1, x5, #0xf
   13240:	cmp	x1, #0x4
   13244:	b.eq	13250 <mpc_ui_ui_sub@@Base+0x12c0>  // b.none
   13248:	adds	x5, x5, #0x4
   1324c:	cinc	x2, x2, cs  // cs = hs, nlast
   13250:	tbz	x2, #51, 130ac <mpc_ui_ui_sub@@Base+0x111c>
   13254:	orr	w0, w0, #0x8
   13258:	mov	w1, #0x1                   	// #1
   1325c:	mov	x4, #0x0                   	// #0
   13260:	mov	x5, #0x0                   	// #0
   13264:	b	130f0 <mpc_ui_ui_sub@@Base+0x1160>
   13268:	cmp	x8, #0x0
   1326c:	mov	w2, #0x7fff                	// #32767
   13270:	mov	x4, #0xffffffffffff        	// #281474976710655
   13274:	csel	w1, w1, w2, ne  // ne = any
   13278:	csel	x4, x4, xzr, ne  // ne = any
   1327c:	csetm	x5, ne  // ne = any
   13280:	b	13184 <mpc_ui_ui_sub@@Base+0x11f4>
   13284:	cbnz	x8, 12ecc <mpc_ui_ui_sub@@Base+0xf3c>
   13288:	b	13230 <mpc_ui_ui_sub@@Base+0x12a0>
   1328c:	mov	x4, #0x2                   	// #2
   13290:	cmp	x1, #0xf
   13294:	b.ne	132b8 <mpc_ui_ui_sub@@Base+0x1328>  // b.any
   13298:	tbz	x7, #47, 132d0 <mpc_ui_ui_sub@@Base+0x1340>
   1329c:	tbnz	x2, #47, 132d0 <mpc_ui_ui_sub@@Base+0x1340>
   132a0:	orr	x4, x2, #0x800000000000
   132a4:	mov	w10, w15
   132a8:	and	x4, x4, #0xffffffffffff
   132ac:	mov	x5, x6
   132b0:	mov	w1, #0x7fff                	// #32767
   132b4:	b	12cb0 <mpc_ui_ui_sub@@Base+0xd20>
   132b8:	cmp	x1, #0xb
   132bc:	b.ne	12c08 <mpc_ui_ui_sub@@Base+0xc78>  // b.any
   132c0:	mov	x7, x2
   132c4:	mov	x5, x6
   132c8:	mov	x16, x4
   132cc:	b	12c10 <mpc_ui_ui_sub@@Base+0xc80>
   132d0:	orr	x4, x7, #0x800000000000
   132d4:	mov	w10, w12
   132d8:	and	x4, x4, #0xffffffffffff
   132dc:	mov	w1, #0x7fff                	// #32767
   132e0:	b	12cb0 <mpc_ui_ui_sub@@Base+0xd20>
   132e4:	cbnz	x8, 13250 <mpc_ui_ui_sub@@Base+0x12c0>
   132e8:	adds	x5, x5, #0x8
   132ec:	cinc	x2, x2, cs  // cs = hs, nlast
   132f0:	tbnz	x2, #51, 13254 <mpc_ui_ui_sub@@Base+0x12c4>
   132f4:	b	130ac <mpc_ui_ui_sub@@Base+0x111c>
   132f8:	cbnz	x8, 132e8 <mpc_ui_ui_sub@@Base+0x1358>
   132fc:	tbnz	x2, #51, 13254 <mpc_ui_ui_sub@@Base+0x12c4>
   13300:	b	130ac <mpc_ui_ui_sub@@Base+0x111c>
   13304:	orr	w0, w0, #0x10
   13308:	b	13254 <mpc_ui_ui_sub@@Base+0x12c4>
   1330c:	mov	x2, x4
   13310:	mov	x4, #0x3                   	// #3
   13314:	b	13290 <mpc_ui_ui_sub@@Base+0x1300>
   13318:	mov	w10, w15
   1331c:	mov	x8, x13
   13320:	b	12c2c <mpc_ui_ui_sub@@Base+0xc9c>
   13324:	nop
   13328:	tbz	w0, #0, 13338 <mpc_ui_ui_sub@@Base+0x13a8>
   1332c:	movi	v1.2s, #0x0
   13330:	fdiv	s0, s1, s1
   13334:	mrs	x1, fpsr
   13338:	tbz	w0, #1, 1334c <mpc_ui_ui_sub@@Base+0x13bc>
   1333c:	fmov	s1, #1.000000000000000000e+00
   13340:	movi	v2.2s, #0x0
   13344:	fdiv	s0, s1, s2
   13348:	mrs	x1, fpsr
   1334c:	tbz	w0, #2, 1336c <mpc_ui_ui_sub@@Base+0x13dc>
   13350:	mov	w2, #0xc5ae                	// #50606
   13354:	mov	w1, #0x7f7fffff            	// #2139095039
   13358:	movk	w2, #0x749d, lsl #16
   1335c:	fmov	s1, w1
   13360:	fmov	s2, w2
   13364:	fadd	s0, s1, s2
   13368:	mrs	x1, fpsr
   1336c:	tbz	w0, #3, 1337c <mpc_ui_ui_sub@@Base+0x13ec>
   13370:	movi	v1.2s, #0x80, lsl #16
   13374:	fmul	s0, s1, s1
   13378:	mrs	x1, fpsr
   1337c:	tbz	w0, #4, 13394 <mpc_ui_ui_sub@@Base+0x1404>
   13380:	mov	w0, #0x7f7fffff            	// #2139095039
   13384:	fmov	s2, #1.000000000000000000e+00
   13388:	fmov	s1, w0
   1338c:	fsub	s0, s1, s2
   13390:	mrs	x0, fpsr
   13394:	ret

Disassembly of section .fini:

0000000000013398 <.fini>:
   13398:	stp	x29, x30, [sp, #-16]!
   1339c:	mov	x29, sp
   133a0:	ldp	x29, x30, [sp], #16
   133a4:	ret
