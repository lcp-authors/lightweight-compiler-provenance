In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libssp.a_clang_-O0:

ssp.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__guard_setup>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	adrp	x0, 0 <__guard_setup>
   c:	add	x0, x0, #0x0
  10:	ldr	x0, [x0]
  14:	cmp	x0, #0x0
  18:	b.ne	b4 <__guard_setup+0xb4>  // b.any
  1c:	mov	w1, #0x0                   	// #0
  20:	adrp	x0, 0 <__guard_setup>
  24:	add	x0, x0, #0x0
  28:	bl	0 <open>
  2c:	str	w0, [sp, #44]
  30:	ldr	w0, [sp, #44]
  34:	cmn	w0, #0x1
  38:	b.eq	7c <__guard_setup+0x7c>  // b.none
  3c:	mov	x2, #0x8                   	// #8
  40:	adrp	x0, 0 <__guard_setup>
  44:	add	x1, x0, #0x0
  48:	ldr	w0, [sp, #44]
  4c:	bl	0 <read>
  50:	str	x0, [sp, #32]
  54:	ldr	w0, [sp, #44]
  58:	bl	0 <close>
  5c:	ldr	x0, [sp, #32]
  60:	cmp	x0, #0x8
  64:	b.ne	7c <__guard_setup+0x7c>  // b.any
  68:	adrp	x0, 0 <__guard_setup>
  6c:	add	x0, x0, #0x0
  70:	ldr	x0, [x0]
  74:	cmp	x0, #0x0
  78:	b.ne	bc <__guard_setup+0xbc>  // b.any
  7c:	adrp	x0, 0 <__guard_setup>
  80:	add	x0, x0, #0x0
  84:	str	x0, [sp, #24]
  88:	ldr	x0, [sp, #24]
  8c:	add	x0, x0, #0x7
  90:	mov	w1, #0xffffffff            	// #-1
  94:	strb	w1, [x0]
  98:	ldr	x0, [sp, #24]
  9c:	add	x0, x0, #0x6
  a0:	mov	w1, #0xa                   	// #10
  a4:	strb	w1, [x0]
  a8:	ldr	x0, [sp, #24]
  ac:	strb	wzr, [x0]
  b0:	b	c0 <__guard_setup+0xc0>
  b4:	nop
  b8:	b	c0 <__guard_setup+0xc0>
  bc:	nop
  c0:	ldp	x29, x30, [sp], #48
  c4:	ret

00000000000000c8 <fail>:
  c8:	stp	x29, x30, [sp, #-112]!
  cc:	mov	x29, sp
  d0:	str	x0, [x29, #40]
  d4:	str	x1, [x29, #32]
  d8:	str	x2, [x29, #24]
  dc:	mov	w1, #0x1                   	// #1
  e0:	adrp	x0, 0 <__guard_setup>
  e4:	add	x0, x0, #0x0
  e8:	bl	0 <open>
  ec:	str	w0, [x29, #92]
  f0:	ldr	w0, [x29, #92]
  f4:	cmn	w0, #0x1
  f8:	b.eq	224 <fail+0x15c>  // b.none
  fc:	adrp	x0, 0 <__progname>
 100:	add	x0, x0, #0x0
 104:	ldr	x0, [x0]
 108:	bl	0 <strlen>
 10c:	str	x0, [x29, #80]
 110:	ldr	x1, [x29, #32]
 114:	ldr	x0, [x29, #80]
 118:	add	x0, x1, x0
 11c:	add	x0, x0, #0xd
 120:	str	x0, [x29, #104]
 124:	ldr	x0, [x29, #104]
 128:	add	x0, x0, #0xf
 12c:	lsr	x0, x0, #4
 130:	lsl	x0, x0, #4
 134:	sub	sp, sp, x0
 138:	mov	x0, sp
 13c:	add	x0, x0, #0xf
 140:	lsr	x0, x0, #4
 144:	lsl	x0, x0, #4
 148:	str	x0, [x29, #96]
 14c:	ldr	x0, [x29, #96]
 150:	str	x0, [x29, #72]
 154:	ldr	x2, [x29, #32]
 158:	ldr	x1, [x29, #40]
 15c:	ldr	x0, [x29, #72]
 160:	bl	0 <memcpy>
 164:	ldr	x1, [x29, #72]
 168:	ldr	x0, [x29, #32]
 16c:	add	x0, x1, x0
 170:	str	x0, [x29, #72]
 174:	adrp	x0, 0 <__progname>
 178:	add	x0, x0, #0x0
 17c:	ldr	x0, [x0]
 180:	ldr	x2, [x29, #80]
 184:	mov	x1, x0
 188:	ldr	x0, [x29, #72]
 18c:	bl	0 <memcpy>
 190:	ldr	x1, [x29, #72]
 194:	ldr	x0, [x29, #80]
 198:	add	x0, x1, x0
 19c:	str	x0, [x29, #72]
 1a0:	ldr	x2, [x29, #72]
 1a4:	adrp	x0, 0 <__guard_setup>
 1a8:	add	x1, x0, #0x0
 1ac:	mov	x0, x2
 1b0:	ldr	x2, [x1]
 1b4:	str	x2, [x0]
 1b8:	ldur	x1, [x1, #5]
 1bc:	stur	x1, [x0, #5]
 1c0:	b	204 <fail+0x13c>
 1c4:	ldr	x2, [x29, #104]
 1c8:	ldr	x1, [x29, #96]
 1cc:	ldr	w0, [x29, #92]
 1d0:	bl	0 <write>
 1d4:	str	x0, [x29, #64]
 1d8:	ldr	x0, [x29, #64]
 1dc:	cmp	x0, #0x0
 1e0:	b.lt	214 <fail+0x14c>  // b.tstop
 1e4:	ldr	x0, [x29, #64]
 1e8:	ldr	x1, [x29, #96]
 1ec:	add	x0, x1, x0
 1f0:	str	x0, [x29, #96]
 1f4:	ldr	x0, [x29, #64]
 1f8:	ldr	x1, [x29, #104]
 1fc:	sub	x0, x1, x0
 200:	str	x0, [x29, #104]
 204:	ldr	x0, [x29, #104]
 208:	cmp	x0, #0x0
 20c:	b.ne	1c4 <fail+0xfc>  // b.any
 210:	b	218 <fail+0x150>
 214:	nop
 218:	ldr	w0, [x29, #92]
 21c:	bl	0 <close>
 220:	b	238 <fail+0x170>
 224:	ldr	x2, [x29, #24]
 228:	adrp	x0, 0 <__guard_setup>
 22c:	add	x1, x0, #0x0
 230:	mov	w0, #0x2                   	// #2
 234:	bl	0 <syslog>
 238:	str	wzr, [x29, #60]
 23c:	ldr	w0, [x29, #60]
 240:	cmp	w0, #0x2
 244:	b.eq	274 <fail+0x1ac>  // b.none
 248:	cmp	w0, #0x2
 24c:	b.gt	27c <fail+0x1b4>
 250:	cmp	w0, #0x0
 254:	b.eq	264 <fail+0x19c>  // b.none
 258:	cmp	w0, #0x1
 25c:	b.eq	268 <fail+0x1a0>  // b.none
 260:	b	27c <fail+0x1b4>
 264:	brk	#0x3e8
 268:	mov	x0, #0xffffffffffffffff    	// #-1
 26c:	str	wzr, [x0]
 270:	b	27c <fail+0x1b4>
 274:	mov	w0, #0x7f                  	// #127
 278:	bl	0 <_exit>
 27c:	ldr	w0, [x29, #60]
 280:	add	w0, w0, #0x1
 284:	str	w0, [x29, #60]
 288:	b	23c <fail+0x174>

000000000000028c <__stack_chk_fail>:
 28c:	stp	x29, x30, [sp, #-32]!
 290:	mov	x29, sp
 294:	adrp	x0, 0 <__guard_setup>
 298:	add	x0, x0, #0x0
 29c:	str	x0, [sp, #24]
 2a0:	ldr	x0, [sp, #24]
 2a4:	bl	0 <strlen>
 2a8:	mov	x1, x0
 2ac:	adrp	x0, 0 <__guard_setup>
 2b0:	add	x2, x0, #0x0
 2b4:	ldr	x0, [sp, #24]
 2b8:	bl	c8 <fail>
 2bc:	nop
 2c0:	ldp	x29, x30, [sp], #32
 2c4:	ret

00000000000002c8 <__chk_fail>:
 2c8:	stp	x29, x30, [sp, #-32]!
 2cc:	mov	x29, sp
 2d0:	adrp	x0, 0 <__guard_setup>
 2d4:	add	x0, x0, #0x0
 2d8:	str	x0, [sp, #24]
 2dc:	ldr	x0, [sp, #24]
 2e0:	bl	0 <strlen>
 2e4:	mov	x1, x0
 2e8:	adrp	x0, 0 <__guard_setup>
 2ec:	add	x2, x0, #0x0
 2f0:	ldr	x0, [sp, #24]
 2f4:	bl	c8 <fail>
 2f8:	nop
 2fc:	ldp	x29, x30, [sp], #32
 300:	ret

0000000000000304 <__stack_chk_fail_local>:
 304:	stp	x29, x30, [sp, #-16]!
 308:	mov	x29, sp
 30c:	bl	28c <__stack_chk_fail>
 310:	nop
 314:	ldp	x29, x30, [sp], #16
 318:	ret

gets-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__gets_chk>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [x29, #24]
   c:	str	x1, [x29, #16]
  10:	ldr	x1, [x29, #16]
  14:	mov	x0, #0x7ffffffe            	// #2147483646
  18:	cmp	x1, x0
  1c:	b.ls	2c <__gets_chk+0x2c>  // b.plast
  20:	ldr	x0, [x29, #24]
  24:	bl	0 <gets>
  28:	b	158 <__gets_chk+0x158>
  2c:	ldr	x0, [x29, #16]
  30:	cmp	x0, #0x2, lsl #12
  34:	b.hi	68 <__gets_chk+0x68>  // b.pmore
  38:	ldr	x0, [x29, #16]
  3c:	add	x0, x0, #0x1
  40:	add	x0, x0, #0xf
  44:	lsr	x0, x0, #4
  48:	lsl	x0, x0, #4
  4c:	sub	sp, sp, x0
  50:	mov	x0, sp
  54:	add	x0, x0, #0xf
  58:	lsr	x0, x0, #4
  5c:	lsl	x0, x0, #4
  60:	str	x0, [x29, #48]
  64:	b	78 <__gets_chk+0x78>
  68:	ldr	x0, [x29, #16]
  6c:	add	x0, x0, #0x1
  70:	bl	0 <malloc>
  74:	str	x0, [x29, #48]
  78:	ldr	x0, [x29, #48]
  7c:	cmp	x0, #0x0
  80:	b.ne	90 <__gets_chk+0x90>  // b.any
  84:	ldr	x0, [x29, #24]
  88:	bl	0 <gets>
  8c:	b	158 <__gets_chk+0x158>
  90:	ldr	x0, [x29, #16]
  94:	add	w0, w0, #0x1
  98:	mov	w1, w0
  9c:	adrp	x0, 0 <stdin>
  a0:	add	x0, x0, #0x0
  a4:	ldr	x0, [x0]
  a8:	mov	x2, x0
  ac:	ldr	x0, [x29, #48]
  b0:	bl	0 <fgets>
  b4:	str	x0, [x29, #56]
  b8:	ldr	x0, [x29, #56]
  bc:	cmp	x0, #0x0
  c0:	b.eq	140 <__gets_chk+0x140>  // b.none
  c4:	ldr	x0, [x29, #48]
  c8:	bl	0 <strlen>
  cc:	str	x0, [x29, #40]
  d0:	ldr	x0, [x29, #40]
  d4:	cmp	x0, #0x0
  d8:	b.eq	104 <__gets_chk+0x104>  // b.none
  dc:	ldr	x0, [x29, #40]
  e0:	sub	x0, x0, #0x1
  e4:	ldr	x1, [x29, #48]
  e8:	add	x0, x1, x0
  ec:	ldrb	w0, [x0]
  f0:	cmp	w0, #0xa
  f4:	b.ne	104 <__gets_chk+0x104>  // b.any
  f8:	ldr	x0, [x29, #40]
  fc:	sub	x0, x0, #0x1
 100:	str	x0, [x29, #40]
 104:	ldr	x1, [x29, #40]
 108:	ldr	x0, [x29, #16]
 10c:	cmp	x1, x0
 110:	b.ne	118 <__gets_chk+0x118>  // b.any
 114:	bl	0 <__chk_fail>
 118:	ldr	x2, [x29, #40]
 11c:	ldr	x1, [x29, #48]
 120:	ldr	x0, [x29, #24]
 124:	bl	0 <memcpy>
 128:	ldr	x1, [x29, #24]
 12c:	ldr	x0, [x29, #40]
 130:	add	x0, x1, x0
 134:	strb	wzr, [x0]
 138:	ldr	x0, [x29, #24]
 13c:	str	x0, [x29, #56]
 140:	ldr	x0, [x29, #16]
 144:	cmp	x0, #0x2, lsl #12
 148:	b.ls	154 <__gets_chk+0x154>  // b.plast
 14c:	ldr	x0, [x29, #48]
 150:	bl	0 <free>
 154:	ldr	x0, [x29, #56]
 158:	mov	sp, x29
 15c:	ldp	x29, x30, [sp], #64
 160:	ret

memcpy-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__memcpy_chk>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	x3, [sp, #16]
  18:	ldr	x1, [sp, #24]
  1c:	ldr	x0, [sp, #16]
  20:	cmp	x1, x0
  24:	b.ls	2c <__memcpy_chk+0x2c>  // b.plast
  28:	bl	0 <__chk_fail>
  2c:	ldr	x2, [sp, #24]
  30:	ldr	x1, [sp, #32]
  34:	ldr	x0, [sp, #40]
  38:	bl	0 <memcpy>
  3c:	ldp	x29, x30, [sp], #48
  40:	ret

memmove-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__memmove_chk>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	x3, [sp, #16]
  18:	ldr	x1, [sp, #24]
  1c:	ldr	x0, [sp, #16]
  20:	cmp	x1, x0
  24:	b.ls	2c <__memmove_chk+0x2c>  // b.plast
  28:	bl	0 <__chk_fail>
  2c:	ldr	x2, [sp, #24]
  30:	ldr	x1, [sp, #32]
  34:	ldr	x0, [sp, #40]
  38:	bl	0 <memmove>
  3c:	ldp	x29, x30, [sp], #48
  40:	ret

mempcpy-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__mempcpy_chk>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	x3, [sp, #16]
  18:	ldr	x1, [sp, #24]
  1c:	ldr	x0, [sp, #16]
  20:	cmp	x1, x0
  24:	b.ls	2c <__mempcpy_chk+0x2c>  // b.plast
  28:	bl	0 <__chk_fail>
  2c:	ldr	x2, [sp, #24]
  30:	ldr	x1, [sp, #32]
  34:	ldr	x0, [sp, #40]
  38:	bl	0 <memcpy>
  3c:	mov	x1, x0
  40:	ldr	x0, [sp, #24]
  44:	add	x0, x1, x0
  48:	ldp	x29, x30, [sp], #48
  4c:	ret

memset-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__memset_chk>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	w1, [sp, #36]
  10:	str	x2, [sp, #24]
  14:	str	x3, [sp, #16]
  18:	ldr	x1, [sp, #24]
  1c:	ldr	x0, [sp, #16]
  20:	cmp	x1, x0
  24:	b.ls	2c <__memset_chk+0x2c>  // b.plast
  28:	bl	0 <__chk_fail>
  2c:	ldr	x2, [sp, #24]
  30:	ldr	w1, [sp, #36]
  34:	ldr	x0, [sp, #40]
  38:	bl	0 <memset>
  3c:	ldp	x29, x30, [sp], #48
  40:	ret

snprintf-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__snprintf_chk>:
   0:	stp	x29, x30, [sp, #-304]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #88]
   c:	str	x1, [sp, #80]
  10:	str	w2, [sp, #76]
  14:	str	x3, [sp, #64]
  18:	str	x4, [sp, #56]
  1c:	str	x5, [sp, #280]
  20:	str	x6, [sp, #288]
  24:	str	x7, [sp, #296]
  28:	str	q0, [sp, #144]
  2c:	str	q1, [sp, #160]
  30:	str	q2, [sp, #176]
  34:	str	q3, [sp, #192]
  38:	str	q4, [sp, #208]
  3c:	str	q5, [sp, #224]
  40:	str	q6, [sp, #240]
  44:	str	q7, [sp, #256]
  48:	ldr	x1, [sp, #80]
  4c:	ldr	x0, [sp, #64]
  50:	cmp	x1, x0
  54:	b.ls	5c <__snprintf_chk+0x5c>  // b.plast
  58:	bl	0 <__chk_fail>
  5c:	add	x0, sp, #0x130
  60:	str	x0, [sp, #104]
  64:	add	x0, sp, #0x130
  68:	str	x0, [sp, #112]
  6c:	add	x0, sp, #0x110
  70:	str	x0, [sp, #120]
  74:	mov	w0, #0xffffffe8            	// #-24
  78:	str	w0, [sp, #128]
  7c:	mov	w0, #0xffffff80            	// #-128
  80:	str	w0, [sp, #132]
  84:	add	x2, sp, #0x10
  88:	add	x3, sp, #0x68
  8c:	ldp	x0, x1, [x3]
  90:	stp	x0, x1, [x2]
  94:	ldp	x0, x1, [x3, #16]
  98:	stp	x0, x1, [x2, #16]
  9c:	add	x0, sp, #0x10
  a0:	mov	x3, x0
  a4:	ldr	x2, [sp, #56]
  a8:	ldr	x1, [sp, #80]
  ac:	ldr	x0, [sp, #88]
  b0:	bl	0 <vsnprintf>
  b4:	str	w0, [sp, #140]
  b8:	ldr	w0, [sp, #140]
  bc:	ldp	x29, x30, [sp], #304
  c0:	ret

sprintf-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__sprintf_chk>:
   0:	stp	x29, x30, [sp, #-288]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #72]
   c:	str	w1, [sp, #68]
  10:	str	x2, [sp, #56]
  14:	str	x3, [sp, #48]
  18:	str	x4, [sp, #256]
  1c:	str	x5, [sp, #264]
  20:	str	x6, [sp, #272]
  24:	str	x7, [sp, #280]
  28:	str	q0, [sp, #128]
  2c:	str	q1, [sp, #144]
  30:	str	q2, [sp, #160]
  34:	str	q3, [sp, #176]
  38:	str	q4, [sp, #192]
  3c:	str	q5, [sp, #208]
  40:	str	q6, [sp, #224]
  44:	str	q7, [sp, #240]
  48:	add	x0, sp, #0x120
  4c:	str	x0, [sp, #88]
  50:	add	x0, sp, #0x120
  54:	str	x0, [sp, #96]
  58:	add	x0, sp, #0x100
  5c:	str	x0, [sp, #104]
  60:	mov	w0, #0xffffffe0            	// #-32
  64:	str	w0, [sp, #112]
  68:	mov	w0, #0xffffff80            	// #-128
  6c:	str	w0, [sp, #116]
  70:	ldr	x1, [sp, #56]
  74:	mov	x0, #0x7fffffff            	// #2147483647
  78:	cmp	x1, x0
  7c:	b.ls	b4 <__sprintf_chk+0xb4>  // b.plast
  80:	add	x2, sp, #0x10
  84:	add	x3, sp, #0x58
  88:	ldp	x0, x1, [x3]
  8c:	stp	x0, x1, [x2]
  90:	ldp	x0, x1, [x3, #16]
  94:	stp	x0, x1, [x2, #16]
  98:	add	x0, sp, #0x10
  9c:	mov	x2, x0
  a0:	ldr	x1, [sp, #48]
  a4:	ldr	x0, [sp, #72]
  a8:	bl	0 <vsprintf>
  ac:	str	w0, [sp, #124]
  b0:	b	108 <__sprintf_chk+0x108>
  b4:	add	x2, sp, #0x10
  b8:	add	x3, sp, #0x58
  bc:	ldp	x0, x1, [x3]
  c0:	stp	x0, x1, [x2]
  c4:	ldp	x0, x1, [x3, #16]
  c8:	stp	x0, x1, [x2, #16]
  cc:	add	x0, sp, #0x10
  d0:	mov	x3, x0
  d4:	ldr	x2, [sp, #48]
  d8:	ldr	x1, [sp, #56]
  dc:	ldr	x0, [sp, #72]
  e0:	bl	0 <vsnprintf>
  e4:	str	w0, [sp, #124]
  e8:	ldr	w0, [sp, #124]
  ec:	cmp	w0, #0x0
  f0:	b.lt	108 <__sprintf_chk+0x108>  // b.tstop
  f4:	ldrsw	x0, [sp, #124]
  f8:	ldr	x1, [sp, #56]
  fc:	cmp	x1, x0
 100:	b.hi	108 <__sprintf_chk+0x108>  // b.pmore
 104:	bl	0 <__chk_fail>
 108:	ldr	w0, [sp, #124]
 10c:	ldp	x29, x30, [sp], #288
 110:	ret

stpcpy-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__stpcpy_chk>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	ldr	x0, [sp, #32]
  18:	bl	0 <strlen>
  1c:	str	x0, [sp, #56]
  20:	ldr	x1, [sp, #56]
  24:	ldr	x0, [sp, #24]
  28:	cmp	x1, x0
  2c:	b.cc	34 <__stpcpy_chk+0x34>  // b.lo, b.ul, b.last
  30:	bl	0 <__chk_fail>
  34:	ldr	x0, [sp, #56]
  38:	add	x0, x0, #0x1
  3c:	mov	x2, x0
  40:	ldr	x1, [sp, #32]
  44:	ldr	x0, [sp, #40]
  48:	bl	0 <memcpy>
  4c:	mov	x1, x0
  50:	ldr	x0, [sp, #56]
  54:	add	x0, x1, x0
  58:	ldp	x29, x30, [sp], #64
  5c:	ret

strcat-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__strcat_chk>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	ldr	x0, [sp, #40]
  18:	str	x0, [sp, #72]
  1c:	ldr	x0, [sp, #32]
  20:	str	x0, [sp, #64]
  24:	ldr	x0, [sp, #24]
  28:	sub	x1, x0, #0x1
  2c:	str	x1, [sp, #24]
  30:	cmp	x0, #0x0
  34:	b.ne	3c <__strcat_chk+0x3c>  // b.any
  38:	bl	0 <__chk_fail>
  3c:	ldr	x0, [sp, #72]
  40:	add	x1, x0, #0x1
  44:	str	x1, [sp, #72]
  48:	ldrb	w0, [x0]
  4c:	strb	w0, [sp, #63]
  50:	ldrb	w0, [sp, #63]
  54:	cmp	w0, #0x0
  58:	b.ne	24 <__strcat_chk+0x24>  // b.any
  5c:	ldr	x0, [sp, #24]
  60:	add	x0, x0, #0x1
  64:	str	x0, [sp, #24]
  68:	ldr	x0, [sp, #72]
  6c:	sub	x0, x0, #0x2
  70:	str	x0, [sp, #72]
  74:	ldr	x0, [sp, #24]
  78:	sub	x1, x0, #0x1
  7c:	str	x1, [sp, #24]
  80:	cmp	x0, #0x0
  84:	b.ne	8c <__strcat_chk+0x8c>  // b.any
  88:	bl	0 <__chk_fail>
  8c:	ldr	x0, [sp, #64]
  90:	add	x1, x0, #0x1
  94:	str	x1, [sp, #64]
  98:	ldrb	w0, [x0]
  9c:	strb	w0, [sp, #63]
  a0:	ldr	x0, [sp, #72]
  a4:	add	x0, x0, #0x1
  a8:	str	x0, [sp, #72]
  ac:	ldr	x0, [sp, #72]
  b0:	ldrb	w1, [sp, #63]
  b4:	strb	w1, [x0]
  b8:	ldrb	w0, [sp, #63]
  bc:	cmp	w0, #0x0
  c0:	b.ne	74 <__strcat_chk+0x74>  // b.any
  c4:	ldr	x0, [sp, #40]
  c8:	ldp	x29, x30, [sp], #80
  cc:	ret

strcpy-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__strcpy_chk>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	ldr	x0, [sp, #32]
  18:	bl	0 <strlen>
  1c:	str	x0, [sp, #56]
  20:	ldr	x1, [sp, #56]
  24:	ldr	x0, [sp, #24]
  28:	cmp	x1, x0
  2c:	b.cc	34 <__strcpy_chk+0x34>  // b.lo, b.ul, b.last
  30:	bl	0 <__chk_fail>
  34:	ldr	x0, [sp, #56]
  38:	add	x0, x0, #0x1
  3c:	mov	x2, x0
  40:	ldr	x1, [sp, #32]
  44:	ldr	x0, [sp, #40]
  48:	bl	0 <memcpy>
  4c:	ldp	x29, x30, [sp], #64
  50:	ret

strncat-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__strncat_chk>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	x3, [sp, #16]
  18:	ldr	x0, [sp, #40]
  1c:	str	x0, [sp, #56]
  20:	ldr	x0, [sp, #16]
  24:	sub	x1, x0, #0x1
  28:	str	x1, [sp, #16]
  2c:	cmp	x0, #0x0
  30:	b.ne	38 <__strncat_chk+0x38>  // b.any
  34:	bl	0 <__chk_fail>
  38:	ldr	x0, [sp, #40]
  3c:	add	x1, x0, #0x1
  40:	str	x1, [sp, #40]
  44:	ldrb	w0, [x0]
  48:	strb	w0, [sp, #79]
  4c:	ldrb	w0, [sp, #79]
  50:	cmp	w0, #0x0
  54:	b.ne	20 <__strncat_chk+0x20>  // b.any
  58:	ldr	x0, [sp, #16]
  5c:	add	x0, x0, #0x1
  60:	str	x0, [sp, #16]
  64:	ldr	x0, [sp, #40]
  68:	sub	x0, x0, #0x2
  6c:	str	x0, [sp, #40]
  70:	ldr	x0, [sp, #24]
  74:	cmp	x0, #0x3
  78:	b.ls	274 <__strncat_chk+0x274>  // b.plast
  7c:	ldr	x0, [sp, #24]
  80:	lsr	x0, x0, #2
  84:	str	x0, [sp, #64]
  88:	ldr	x0, [sp, #16]
  8c:	sub	x1, x0, #0x1
  90:	str	x1, [sp, #16]
  94:	cmp	x0, #0x0
  98:	b.ne	a0 <__strncat_chk+0xa0>  // b.any
  9c:	bl	0 <__chk_fail>
  a0:	ldr	x0, [sp, #32]
  a4:	add	x1, x0, #0x1
  a8:	str	x1, [sp, #32]
  ac:	ldrb	w0, [x0]
  b0:	strb	w0, [sp, #79]
  b4:	ldr	x0, [sp, #40]
  b8:	add	x0, x0, #0x1
  bc:	str	x0, [sp, #40]
  c0:	ldr	x0, [sp, #40]
  c4:	ldrb	w1, [sp, #79]
  c8:	strb	w1, [x0]
  cc:	ldrb	w0, [sp, #79]
  d0:	cmp	w0, #0x0
  d4:	b.ne	e0 <__strncat_chk+0xe0>  // b.any
  d8:	ldr	x0, [sp, #56]
  dc:	b	2bc <__strncat_chk+0x2bc>
  e0:	ldr	x0, [sp, #16]
  e4:	sub	x1, x0, #0x1
  e8:	str	x1, [sp, #16]
  ec:	cmp	x0, #0x0
  f0:	b.ne	f8 <__strncat_chk+0xf8>  // b.any
  f4:	bl	0 <__chk_fail>
  f8:	ldr	x0, [sp, #32]
  fc:	add	x1, x0, #0x1
 100:	str	x1, [sp, #32]
 104:	ldrb	w0, [x0]
 108:	strb	w0, [sp, #79]
 10c:	ldr	x0, [sp, #40]
 110:	add	x0, x0, #0x1
 114:	str	x0, [sp, #40]
 118:	ldr	x0, [sp, #40]
 11c:	ldrb	w1, [sp, #79]
 120:	strb	w1, [x0]
 124:	ldrb	w0, [sp, #79]
 128:	cmp	w0, #0x0
 12c:	b.ne	138 <__strncat_chk+0x138>  // b.any
 130:	ldr	x0, [sp, #56]
 134:	b	2bc <__strncat_chk+0x2bc>
 138:	ldr	x0, [sp, #16]
 13c:	sub	x1, x0, #0x1
 140:	str	x1, [sp, #16]
 144:	cmp	x0, #0x0
 148:	b.ne	150 <__strncat_chk+0x150>  // b.any
 14c:	bl	0 <__chk_fail>
 150:	ldr	x0, [sp, #32]
 154:	add	x1, x0, #0x1
 158:	str	x1, [sp, #32]
 15c:	ldrb	w0, [x0]
 160:	strb	w0, [sp, #79]
 164:	ldr	x0, [sp, #40]
 168:	add	x0, x0, #0x1
 16c:	str	x0, [sp, #40]
 170:	ldr	x0, [sp, #40]
 174:	ldrb	w1, [sp, #79]
 178:	strb	w1, [x0]
 17c:	ldrb	w0, [sp, #79]
 180:	cmp	w0, #0x0
 184:	b.ne	190 <__strncat_chk+0x190>  // b.any
 188:	ldr	x0, [sp, #56]
 18c:	b	2bc <__strncat_chk+0x2bc>
 190:	ldr	x0, [sp, #16]
 194:	sub	x1, x0, #0x1
 198:	str	x1, [sp, #16]
 19c:	cmp	x0, #0x0
 1a0:	b.ne	1a8 <__strncat_chk+0x1a8>  // b.any
 1a4:	bl	0 <__chk_fail>
 1a8:	ldr	x0, [sp, #32]
 1ac:	add	x1, x0, #0x1
 1b0:	str	x1, [sp, #32]
 1b4:	ldrb	w0, [x0]
 1b8:	strb	w0, [sp, #79]
 1bc:	ldr	x0, [sp, #40]
 1c0:	add	x0, x0, #0x1
 1c4:	str	x0, [sp, #40]
 1c8:	ldr	x0, [sp, #40]
 1cc:	ldrb	w1, [sp, #79]
 1d0:	strb	w1, [x0]
 1d4:	ldrb	w0, [sp, #79]
 1d8:	cmp	w0, #0x0
 1dc:	b.ne	1e8 <__strncat_chk+0x1e8>  // b.any
 1e0:	ldr	x0, [sp, #56]
 1e4:	b	2bc <__strncat_chk+0x2bc>
 1e8:	ldr	x0, [sp, #64]
 1ec:	sub	x0, x0, #0x1
 1f0:	str	x0, [sp, #64]
 1f4:	ldr	x0, [sp, #64]
 1f8:	cmp	x0, #0x0
 1fc:	b.ne	88 <__strncat_chk+0x88>  // b.any
 200:	ldr	x0, [sp, #24]
 204:	and	x0, x0, #0x3
 208:	str	x0, [sp, #24]
 20c:	b	274 <__strncat_chk+0x274>
 210:	ldr	x0, [sp, #16]
 214:	sub	x1, x0, #0x1
 218:	str	x1, [sp, #16]
 21c:	cmp	x0, #0x0
 220:	b.ne	228 <__strncat_chk+0x228>  // b.any
 224:	bl	0 <__chk_fail>
 228:	ldr	x0, [sp, #32]
 22c:	add	x1, x0, #0x1
 230:	str	x1, [sp, #32]
 234:	ldrb	w0, [x0]
 238:	strb	w0, [sp, #79]
 23c:	ldr	x0, [sp, #40]
 240:	add	x0, x0, #0x1
 244:	str	x0, [sp, #40]
 248:	ldr	x0, [sp, #40]
 24c:	ldrb	w1, [sp, #79]
 250:	strb	w1, [x0]
 254:	ldrb	w0, [sp, #79]
 258:	cmp	w0, #0x0
 25c:	b.ne	268 <__strncat_chk+0x268>  // b.any
 260:	ldr	x0, [sp, #56]
 264:	b	2bc <__strncat_chk+0x2bc>
 268:	ldr	x0, [sp, #24]
 26c:	sub	x0, x0, #0x1
 270:	str	x0, [sp, #24]
 274:	ldr	x0, [sp, #24]
 278:	cmp	x0, #0x0
 27c:	b.ne	210 <__strncat_chk+0x210>  // b.any
 280:	ldrb	w0, [sp, #79]
 284:	cmp	w0, #0x0
 288:	b.eq	2b8 <__strncat_chk+0x2b8>  // b.none
 28c:	ldr	x0, [sp, #16]
 290:	sub	x1, x0, #0x1
 294:	str	x1, [sp, #16]
 298:	cmp	x0, #0x0
 29c:	b.ne	2a4 <__strncat_chk+0x2a4>  // b.any
 2a0:	bl	0 <__chk_fail>
 2a4:	ldr	x0, [sp, #40]
 2a8:	add	x0, x0, #0x1
 2ac:	str	x0, [sp, #40]
 2b0:	ldr	x0, [sp, #40]
 2b4:	strb	wzr, [x0]
 2b8:	ldr	x0, [sp, #56]
 2bc:	ldp	x29, x30, [sp], #80
 2c0:	ret

strncpy-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__strncpy_chk>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	x3, [sp, #16]
  18:	ldr	x1, [sp, #24]
  1c:	ldr	x0, [sp, #16]
  20:	cmp	x1, x0
  24:	b.ls	2c <__strncpy_chk+0x2c>  // b.plast
  28:	bl	0 <__chk_fail>
  2c:	ldr	x2, [sp, #24]
  30:	ldr	x1, [sp, #32]
  34:	ldr	x0, [sp, #40]
  38:	bl	0 <strncpy>
  3c:	ldp	x29, x30, [sp], #48
  40:	ret

vsnprintf-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__vsnprintf_chk>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	x0, [sp, #104]
  10:	str	x1, [sp, #96]
  14:	str	w2, [sp, #92]
  18:	str	x3, [sp, #80]
  1c:	str	x4, [sp, #72]
  20:	mov	x19, x5
  24:	ldr	x1, [sp, #96]
  28:	ldr	x0, [sp, #80]
  2c:	cmp	x1, x0
  30:	b.ls	38 <__vsnprintf_chk+0x38>  // b.plast
  34:	bl	0 <__chk_fail>
  38:	add	x2, sp, #0x20
  3c:	mov	x3, x19
  40:	ldp	x0, x1, [x3]
  44:	stp	x0, x1, [x2]
  48:	ldp	x0, x1, [x3, #16]
  4c:	stp	x0, x1, [x2, #16]
  50:	add	x0, sp, #0x20
  54:	mov	x3, x0
  58:	ldr	x2, [sp, #72]
  5c:	ldr	x1, [sp, #96]
  60:	ldr	x0, [sp, #104]
  64:	bl	0 <vsnprintf>
  68:	ldr	x19, [sp, #16]
  6c:	ldp	x29, x30, [sp], #112
  70:	ret

vsprintf-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__vsprintf_chk>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	x0, [sp, #88]
  10:	str	w1, [sp, #84]
  14:	str	x2, [sp, #72]
  18:	str	x3, [sp, #64]
  1c:	mov	x19, x4
  20:	ldr	x1, [sp, #72]
  24:	mov	x0, #0x7fffffff            	// #2147483647
  28:	cmp	x1, x0
  2c:	b.ls	64 <__vsprintf_chk+0x64>  // b.plast
  30:	add	x2, sp, #0x20
  34:	mov	x3, x19
  38:	ldp	x0, x1, [x3]
  3c:	stp	x0, x1, [x2]
  40:	ldp	x0, x1, [x3, #16]
  44:	stp	x0, x1, [x2, #16]
  48:	add	x0, sp, #0x20
  4c:	mov	x2, x0
  50:	ldr	x1, [sp, #64]
  54:	ldr	x0, [sp, #88]
  58:	bl	0 <vsprintf>
  5c:	str	w0, [sp, #108]
  60:	b	b8 <__vsprintf_chk+0xb8>
  64:	add	x2, sp, #0x20
  68:	mov	x3, x19
  6c:	ldp	x0, x1, [x3]
  70:	stp	x0, x1, [x2]
  74:	ldp	x0, x1, [x3, #16]
  78:	stp	x0, x1, [x2, #16]
  7c:	add	x0, sp, #0x20
  80:	mov	x3, x0
  84:	ldr	x2, [sp, #64]
  88:	ldr	x1, [sp, #72]
  8c:	ldr	x0, [sp, #88]
  90:	bl	0 <vsnprintf>
  94:	str	w0, [sp, #108]
  98:	ldr	w0, [sp, #108]
  9c:	cmp	w0, #0x0
  a0:	b.lt	b8 <__vsprintf_chk+0xb8>  // b.tstop
  a4:	ldrsw	x0, [sp, #108]
  a8:	ldr	x1, [sp, #72]
  ac:	cmp	x1, x0
  b0:	b.hi	b8 <__vsprintf_chk+0xb8>  // b.pmore
  b4:	bl	0 <__chk_fail>
  b8:	ldr	w0, [sp, #108]
  bc:	ldr	x19, [sp, #16]
  c0:	ldp	x29, x30, [sp], #112
  c4:	ret
