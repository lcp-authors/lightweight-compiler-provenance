
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//gcry_sha512.module_gcc_-O2:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <sha512_init>:
   0:	mov	x8, #0xc908                	// #51464
   4:	mov	x7, #0xa73b                	// #42811
   8:	mov	x6, #0xf82b                	// #63531
   c:	mov	x5, #0x36f1                	// #14065
  10:	mov	x4, #0x82d1                	// #33489
  14:	mov	x3, #0x6c1f                	// #27679
  18:	mov	x2, #0xbd6b                	// #48491
  1c:	mov	x1, #0x2179                	// #8569
  20:	movk	x8, #0xf3bc, lsl #16
  24:	movk	x7, #0x84ca, lsl #16
  28:	movk	x6, #0xfe94, lsl #16
  2c:	movk	x5, #0x5f1d, lsl #16
  30:	movk	x4, #0xade6, lsl #16
  34:	movk	x3, #0x2b3e, lsl #16
  38:	movk	x2, #0xfb41, lsl #16
  3c:	movk	x1, #0x137e, lsl #16
  40:	movk	x8, #0xe667, lsl #32
  44:	movk	x7, #0xae85, lsl #32
  48:	movk	x6, #0xf372, lsl #32
  4c:	movk	x5, #0xf53a, lsl #32
  50:	movk	x4, #0x527f, lsl #32
  54:	movk	x3, #0x688c, lsl #32
  58:	movk	x2, #0xd9ab, lsl #32
  5c:	movk	x1, #0xcd19, lsl #32
  60:	movk	x8, #0x6a09, lsl #48
  64:	movk	x7, #0xbb67, lsl #48
  68:	movk	x6, #0x3c6e, lsl #48
  6c:	movk	x5, #0xa54f, lsl #48
  70:	movk	x4, #0x510e, lsl #48
  74:	movk	x3, #0x9b05, lsl #48
  78:	movk	x2, #0x1f83, lsl #48
  7c:	movk	x1, #0x5be0, lsl #48
  80:	stp	x8, x7, [x0]
  84:	stp	x6, x5, [x0, #16]
  88:	stp	x4, x3, [x0, #32]
  8c:	stp	x2, x1, [x0, #48]
  90:	str	xzr, [x0, #64]
  94:	str	wzr, [x0, #200]
  98:	ret
  9c:	nop

00000000000000a0 <sha384_init>:
  a0:	mov	x8, #0x9ed8                	// #40664
  a4:	mov	x7, #0xd507                	// #54535
  a8:	mov	x6, #0xdd17                	// #56599
  ac:	mov	x5, #0x5939                	// #22841
  b0:	mov	x4, #0xb31                 	// #2865
  b4:	mov	x3, #0x1511                	// #5393
  b8:	mov	x2, #0x8fa7                	// #36775
  bc:	mov	x1, #0x4fa4                	// #20388
  c0:	movk	x8, #0xc105, lsl #16
  c4:	movk	x7, #0x367c, lsl #16
  c8:	movk	x6, #0x3070, lsl #16
  cc:	movk	x5, #0xf70e, lsl #16
  d0:	movk	x4, #0xffc0, lsl #16
  d4:	movk	x3, #0x6858, lsl #16
  d8:	movk	x2, #0x64f9, lsl #16
  dc:	movk	x1, #0xbefa, lsl #16
  e0:	movk	x8, #0x9d5d, lsl #32
  e4:	movk	x7, #0x292a, lsl #32
  e8:	movk	x6, #0x15a, lsl #32
  ec:	movk	x5, #0xecd8, lsl #32
  f0:	movk	x4, #0x2667, lsl #32
  f4:	movk	x3, #0x4a87, lsl #32
  f8:	movk	x2, #0x2e0d, lsl #32
  fc:	movk	x1, #0x481d, lsl #32
 100:	movk	x8, #0xcbbb, lsl #48
 104:	movk	x7, #0x629a, lsl #48
 108:	movk	x6, #0x9159, lsl #48
 10c:	movk	x5, #0x152f, lsl #48
 110:	movk	x4, #0x6733, lsl #48
 114:	movk	x3, #0x8eb4, lsl #48
 118:	movk	x2, #0xdb0c, lsl #48
 11c:	movk	x1, #0x47b5, lsl #48
 120:	stp	x8, x7, [x0]
 124:	stp	x6, x5, [x0, #16]
 128:	stp	x4, x3, [x0, #32]
 12c:	stp	x2, x1, [x0, #48]
 130:	str	xzr, [x0, #64]
 134:	str	wzr, [x0, #200]
 138:	ret
 13c:	nop

0000000000000140 <transform>:
 140:	sub	sp, sp, #0x2f0
 144:	add	x9, x1, #0x80
 148:	stp	x29, x30, [sp]
 14c:	mov	x29, sp
 150:	stp	x19, x20, [sp, #16]
 154:	mov	x20, x0
 158:	add	x0, sp, #0x70
 15c:	stp	x21, x22, [sp, #32]
 160:	stp	x23, x24, [sp, #48]
 164:	stp	x25, x26, [sp, #64]
 168:	stp	x27, x28, [sp, #80]
 16c:	ldp	x27, x26, [x20]
 170:	ldp	x25, x24, [x20, #16]
 174:	ldp	x23, x22, [x20, #32]
 178:	ldr	x2, [x20, #48]
 17c:	str	x2, [sp, #96]
 180:	ldr	x2, [x20, #56]
 184:	str	x2, [sp, #104]
 188:	ldrb	w2, [x1]
 18c:	add	x1, x1, #0x8
 190:	ldurb	w3, [x1, #-7]
 194:	ldurb	w4, [x1, #-6]
 198:	ldurb	w5, [x1, #-5]
 19c:	ldurb	w6, [x1, #-4]
 1a0:	ldurb	w7, [x1, #-3]
 1a4:	ldurb	w8, [x1, #-2]
 1a8:	cmp	x1, x9
 1ac:	strb	w8, [x0, #1]
 1b0:	strb	w7, [x0, #2]
 1b4:	strb	w6, [x0, #3]
 1b8:	strb	w5, [x0, #4]
 1bc:	strb	w4, [x0, #5]
 1c0:	strb	w3, [x0, #6]
 1c4:	strb	w2, [x0, #7]
 1c8:	ldurb	w2, [x1, #-1]
 1cc:	strb	w2, [x0], #8
 1d0:	b.ne	188 <transform+0x48>  // b.any
 1d4:	add	x18, sp, #0x70
 1d8:	add	x7, x18, #0x200
 1dc:	mov	x1, x18
 1e0:	ldp	x6, x2, [x1]
 1e4:	add	x1, x1, #0x8
 1e8:	ldr	x0, [x1, #104]
 1ec:	ldr	x3, [x1, #64]
 1f0:	ror	x4, x2, #8
 1f4:	eor	x4, x4, x2, ror #1
 1f8:	ror	x5, x0, #61
 1fc:	eor	x5, x5, x0, ror #19
 200:	eor	x2, x4, x2, lsr #7
 204:	eor	x0, x5, x0, lsr #6
 208:	add	x3, x3, x6
 20c:	add	x0, x0, x2
 210:	add	x0, x0, x3
 214:	str	x0, [x1, #120]
 218:	cmp	x7, x1
 21c:	b.ne	1e0 <transform+0xa0>  // b.any
 220:	mov	x14, #0x8118                	// #33048
 224:	mov	x13, #0x4f9b                	// #20379
 228:	mov	x12, #0xd019                	// #53273
 22c:	mov	x11, #0xb538                	// #46392
 230:	mov	x10, #0xdbbc                	// #56252
 234:	mov	x9, #0x3b2f                	// #15151
 238:	mov	x17, #0x65cd                	// #26061
 23c:	mov	x19, #0xae22                	// #44578
 240:	adrp	x0, 0 <sha512_init>
 244:	movk	x14, #0xda6d, lsl #16
 248:	movk	x13, #0xaf19, lsl #16
 24c:	movk	x12, #0xb605, lsl #16
 250:	movk	x11, #0xf348, lsl #16
 254:	movk	x10, #0x8189, lsl #16
 258:	movk	x9, #0xec4d, lsl #16
 25c:	movk	x17, #0x23ef, lsl #16
 260:	movk	x19, #0xd728, lsl #16
 264:	movk	x14, #0x5ed5, lsl #32
 268:	movk	x13, #0x82a4, lsl #32
 26c:	movk	x12, #0x11f1, lsl #32
 270:	movk	x11, #0xc25b, lsl #32
 274:	movk	x10, #0xdba5, lsl #32
 278:	movk	x9, #0xfbcf, lsl #32
 27c:	movk	x17, #0x4491, lsl #32
 280:	movk	x19, #0x2f98, lsl #32
 284:	add	x21, sp, #0x2f0
 288:	ldr	x30, [x0]
 28c:	mov	x1, x22
 290:	mov	x2, x23
 294:	mov	x6, x24
 298:	mov	x5, x25
 29c:	mov	x8, x26
 2a0:	mov	x7, x27
 2a4:	movk	x14, #0xab1c, lsl #48
 2a8:	movk	x13, #0x923f, lsl #48
 2ac:	movk	x12, #0x59f1, lsl #48
 2b0:	movk	x11, #0x3956, lsl #48
 2b4:	movk	x10, #0xe9b5, lsl #48
 2b8:	movk	x9, #0xb5c0, lsl #48
 2bc:	movk	x17, #0x7137, lsl #48
 2c0:	movk	x19, #0x428a, lsl #48
 2c4:	ldp	x4, x15, [sp, #96]
 2c8:	b	2dc <transform+0x19c>
 2cc:	ldp	x19, x17, [x30]
 2d0:	ldp	x9, x10, [x30, #16]
 2d4:	ldp	x11, x12, [x30, #32]
 2d8:	ldp	x13, x14, [x30, #48]
 2dc:	ror	x16, x2, #18
 2e0:	and	x3, x2, x1
 2e4:	bic	x0, x4, x2
 2e8:	eor	x16, x16, x2, ror #14
 2ec:	eor	x0, x0, x3
 2f0:	eor	x16, x16, x2, ror #41
 2f4:	add	x15, x15, x19
 2f8:	ldr	x28, [x18]
 2fc:	add	x16, x16, x0
 300:	add	x15, x16, x15
 304:	ror	x3, x7, #34
 308:	add	x16, x15, x28
 30c:	eor	x15, x3, x7, ror #28
 310:	add	x6, x16, x6
 314:	eor	x0, x8, x5
 318:	ldr	x3, [x18, #8]
 31c:	ror	x28, x6, #18
 320:	and	x19, x6, x2
 324:	eor	x28, x28, x6, ror #14
 328:	add	x4, x4, x3
 32c:	bic	x3, x1, x6
 330:	eor	x28, x28, x6, ror #41
 334:	eor	x3, x3, x19
 338:	add	x3, x28, x3
 33c:	and	x19, x8, x5
 340:	add	x3, x3, x4
 344:	and	x0, x0, x7
 348:	add	x17, x3, x17
 34c:	eor	x15, x15, x7, ror #39
 350:	add	x5, x17, x5
 354:	eor	x0, x0, x19
 358:	add	x15, x15, x0
 35c:	bic	x4, x2, x5
 360:	ror	x3, x5, #18
 364:	ldr	x0, [x18, #16]
 368:	add	x15, x15, x16
 36c:	eor	x3, x3, x5, ror #14
 370:	and	x16, x6, x5
 374:	eor	x3, x3, x5, ror #41
 378:	eor	x4, x4, x16
 37c:	add	x0, x1, x0
 380:	add	x1, x3, x4
 384:	add	x0, x1, x0
 388:	eor	x4, x7, x8
 38c:	add	x1, x0, x9
 390:	ror	x3, x15, #34
 394:	add	x9, x1, x8
 398:	and	x0, x4, x15
 39c:	and	x8, x7, x8
 3a0:	eor	x3, x3, x15, ror #28
 3a4:	eor	x8, x0, x8
 3a8:	eor	x3, x3, x15, ror #39
 3ac:	add	x3, x3, x8
 3b0:	ror	x4, x9, #18
 3b4:	add	x3, x3, x17
 3b8:	and	x16, x5, x9
 3bc:	ldp	x0, x17, [x18, #24]
 3c0:	bic	x8, x6, x9
 3c4:	eor	x4, x4, x9, ror #14
 3c8:	eor	x8, x8, x16
 3cc:	eor	x4, x4, x9, ror #41
 3d0:	and	x16, x15, x3
 3d4:	add	x4, x4, x8
 3d8:	eor	x8, x15, x7
 3dc:	add	x30, x30, #0x40
 3e0:	add	x2, x2, x0
 3e4:	ror	x0, x3, #34
 3e8:	add	x2, x4, x2
 3ec:	eor	x0, x0, x3, ror #28
 3f0:	and	x4, x8, x3
 3f4:	and	x8, x15, x7
 3f8:	add	x2, x2, x10
 3fc:	eor	x4, x4, x8
 400:	eor	x0, x0, x3, ror #39
 404:	add	x7, x2, x7
 408:	add	x0, x0, x4
 40c:	bic	x10, x5, x7
 410:	add	x0, x0, x1
 414:	ror	x4, x7, #18
 418:	and	x1, x9, x7
 41c:	eor	x8, x15, x3
 420:	eor	x10, x10, x1
 424:	eor	x4, x4, x7, ror #14
 428:	eor	x4, x4, x7, ror #41
 42c:	ror	x1, x0, #34
 430:	and	x8, x8, x0
 434:	eor	x1, x1, x0, ror #28
 438:	add	x4, x4, x10
 43c:	eor	x8, x8, x16
 440:	add	x6, x6, x17
 444:	eor	x1, x1, x0, ror #39
 448:	add	x6, x4, x6
 44c:	add	x1, x1, x8
 450:	add	x2, x1, x2
 454:	add	x11, x6, x11
 458:	add	x15, x15, x11
 45c:	eor	x8, x3, x0
 460:	and	x17, x3, x0
 464:	ror	x6, x2, #34
 468:	and	x8, x8, x2
 46c:	eor	x6, x6, x2, ror #28
 470:	ror	x1, x15, #18
 474:	ldr	x4, [x18, #40]
 478:	bic	x10, x9, x15
 47c:	and	x16, x7, x15
 480:	eor	x8, x8, x17
 484:	eor	x6, x6, x2, ror #39
 488:	eor	x1, x1, x15, ror #14
 48c:	eor	x10, x10, x16
 490:	eor	x1, x1, x15, ror #41
 494:	add	x6, x6, x8
 498:	add	x4, x5, x4
 49c:	add	x6, x6, x11
 4a0:	add	x5, x1, x10
 4a4:	add	x5, x5, x4
 4a8:	eor	x10, x0, x2
 4ac:	add	x1, x5, x12
 4b0:	ror	x5, x6, #34
 4b4:	add	x4, x3, x1
 4b8:	and	x10, x10, x6
 4bc:	and	x3, x0, x2
 4c0:	eor	x5, x5, x6, ror #28
 4c4:	eor	x10, x10, x3
 4c8:	eor	x5, x5, x6, ror #39
 4cc:	add	x5, x5, x10
 4d0:	and	x11, x15, x4
 4d4:	bic	x10, x7, x4
 4d8:	add	x5, x5, x1
 4dc:	eor	x1, x10, x11
 4e0:	ror	x8, x4, #18
 4e4:	ldp	x3, x11, [x18, #48]
 4e8:	eor	x8, x8, x4, ror #14
 4ec:	eor	x8, x8, x4, ror #41
 4f0:	and	x10, x2, x6
 4f4:	add	x8, x8, x1
 4f8:	ror	x1, x5, #28
 4fc:	add	x18, x18, #0x40
 500:	cmp	x21, x18
 504:	add	x3, x9, x3
 508:	eor	x9, x2, x6
 50c:	add	x8, x8, x3
 510:	and	x9, x9, x5
 514:	add	x3, x8, x13
 518:	eor	x8, x1, x5, ror #34
 51c:	eor	x9, x9, x10
 520:	add	x1, x0, x3
 524:	eor	x8, x8, x5, ror #39
 528:	bic	x10, x15, x1
 52c:	add	x8, x8, x9
 530:	ror	x0, x1, #14
 534:	add	x8, x8, x3
 538:	eor	x0, x0, x1, ror #18
 53c:	and	x3, x4, x1
 540:	eor	x0, x0, x1, ror #41
 544:	eor	x10, x10, x3
 548:	eor	x9, x6, x5
 54c:	add	x7, x7, x11
 550:	ror	x3, x8, #28
 554:	add	x0, x0, x10
 558:	and	x9, x9, x8
 55c:	and	x10, x6, x5
 560:	eor	x3, x3, x8, ror #34
 564:	add	x0, x0, x7
 568:	eor	x9, x9, x10
 56c:	eor	x7, x3, x8, ror #39
 570:	add	x0, x0, x14
 574:	add	x7, x7, x9
 578:	add	x2, x2, x0
 57c:	add	x7, x7, x0
 580:	b.ne	2cc <transform+0x18c>  // b.any
 584:	ldr	x0, [sp, #96]
 588:	add	x7, x27, x7
 58c:	add	x8, x26, x8
 590:	add	x5, x25, x5
 594:	add	x4, x0, x4
 598:	add	x6, x24, x6
 59c:	ldr	x0, [sp, #104]
 5a0:	add	x2, x23, x2
 5a4:	add	x1, x22, x1
 5a8:	add	x15, x0, x15
 5ac:	ldp	x29, x30, [sp]
 5b0:	ldp	x21, x22, [sp, #32]
 5b4:	ldp	x23, x24, [sp, #48]
 5b8:	ldp	x25, x26, [sp, #64]
 5bc:	ldp	x27, x28, [sp, #80]
 5c0:	stp	x7, x8, [x20]
 5c4:	stp	x5, x6, [x20, #16]
 5c8:	stp	x2, x1, [x20, #32]
 5cc:	stp	x4, x15, [x20, #48]
 5d0:	ldp	x19, x20, [sp, #16]
 5d4:	add	sp, sp, #0x2f0
 5d8:	ret
 5dc:	nop
	...

00000000000005e8 <sha512_read>:
 5e8:	add	x0, x0, #0x48
 5ec:	ret

00000000000005f0 <sha512_write>:
 5f0:	stp	x29, x30, [sp, #-48]!
 5f4:	mov	x29, sp
 5f8:	stp	x19, x20, [sp, #16]
 5fc:	mov	x20, x1
 600:	ldr	w1, [x0, #200]
 604:	stp	x21, x22, [sp, #32]
 608:	mov	x19, x0
 60c:	mov	x21, x2
 610:	cmp	w1, #0x80
 614:	b.eq	734 <sha512_write+0x144>  // b.none
 618:	cbz	x20, 6f4 <sha512_write+0x104>
 61c:	mov	w2, w1
 620:	cbz	w1, 668 <sha512_write+0x78>
 624:	sxtw	x0, w1
 628:	add	x3, x19, #0x48
 62c:	cbnz	x21, 64c <sha512_write+0x5c>
 630:	b	704 <sha512_write+0x114>
 634:	str	w2, [x19, #200]
 638:	subs	x21, x21, #0x1
 63c:	ldrb	w1, [x20], #1
 640:	strb	w1, [x3, x0]
 644:	add	x0, x0, #0x1
 648:	b.eq	704 <sha512_write+0x114>  // b.none
 64c:	add	w2, w0, #0x1
 650:	cmp	w0, #0x7f
 654:	b.le	634 <sha512_write+0x44>
 658:	mov	x0, x19
 65c:	mov	x2, #0x0                   	// #0
 660:	mov	x1, #0x0                   	// #0
 664:	bl	5f0 <sha512_write>
 668:	cmp	x21, #0x7f
 66c:	b.ls	75c <sha512_write+0x16c>  // b.plast
 670:	sub	x22, x21, #0x80
 674:	and	x22, x22, #0xffffffffffffff80
 678:	add	x22, x22, #0x80
 67c:	add	x22, x20, x22
 680:	mov	x1, x20
 684:	mov	x0, x19
 688:	bl	140 <transform>
 68c:	str	wzr, [x19, #200]
 690:	ldr	x0, [x19, #64]
 694:	add	x20, x20, #0x80
 698:	cmp	x20, x22
 69c:	add	x0, x0, #0x1
 6a0:	str	x0, [x19, #64]
 6a4:	b.ne	680 <sha512_write+0x90>  // b.any
 6a8:	and	x21, x21, #0x7f
 6ac:	mov	w0, #0x300                 	// #768
 6b0:	bl	0 <_gcry_burn_stack>
 6b4:	cbz	x21, 6f4 <sha512_write+0x104>
 6b8:	ldrsw	x0, [x19, #200]
 6bc:	add	x2, x19, #0x48
 6c0:	mov	x1, x0
 6c4:	add	x21, x0, x21
 6c8:	sub	x22, x22, x0
 6cc:	b	6e8 <sha512_write+0xf8>
 6d0:	str	w0, [x19, #200]
 6d4:	ldrb	w0, [x22, x1]
 6d8:	strb	w0, [x2, x1]
 6dc:	add	x1, x1, #0x1
 6e0:	cmp	x1, x21
 6e4:	b.eq	6f4 <sha512_write+0x104>  // b.none
 6e8:	add	w0, w1, #0x1
 6ec:	cmp	w1, #0x7f
 6f0:	b.le	6d0 <sha512_write+0xe0>
 6f4:	ldp	x19, x20, [sp, #16]
 6f8:	ldp	x21, x22, [sp, #32]
 6fc:	ldp	x29, x30, [sp], #48
 700:	ret
 704:	cmp	w2, #0x80
 708:	b.ne	6f4 <sha512_write+0x104>  // b.any
 70c:	add	x1, x19, #0x48
 710:	mov	x0, x19
 714:	bl	140 <transform>
 718:	mov	w0, #0x300                 	// #768
 71c:	bl	0 <_gcry_burn_stack>
 720:	str	wzr, [x19, #200]
 724:	ldr	x0, [x19, #64]
 728:	add	x0, x0, #0x1
 72c:	str	x0, [x19, #64]
 730:	b	6f4 <sha512_write+0x104>
 734:	add	x1, x0, #0x48
 738:	bl	140 <transform>
 73c:	mov	w0, #0x300                 	// #768
 740:	bl	0 <_gcry_burn_stack>
 744:	str	wzr, [x19, #200]
 748:	ldr	x0, [x19, #64]
 74c:	add	x0, x0, #0x1
 750:	str	x0, [x19, #64]
 754:	cbnz	x20, 668 <sha512_write+0x78>
 758:	b	6f4 <sha512_write+0x104>
 75c:	mov	x22, x20
 760:	b	6ac <sha512_write+0xbc>
 764:	nop

0000000000000768 <sha512_final>:
 768:	stp	x29, x30, [sp, #-48]!
 76c:	mov	x2, #0x0                   	// #0
 770:	mov	x1, #0x0                   	// #0
 774:	mov	x29, sp
 778:	stp	x19, x20, [sp, #16]
 77c:	mov	x19, x0
 780:	add	x20, x19, #0x48
 784:	stp	x21, x22, [sp, #32]
 788:	bl	5f0 <sha512_write>
 78c:	ldr	w3, [x19, #200]
 790:	ldr	x0, [x19, #64]
 794:	add	w1, w3, #0x1
 798:	sxtw	x2, w3
 79c:	str	w1, [x19, #200]
 7a0:	lsl	x21, x0, #7
 7a4:	adds	x21, x2, x21
 7a8:	add	x2, x19, x2
 7ac:	cset	x4, cs  // cs = hs, nlast
 7b0:	cmp	w3, #0x6f
 7b4:	add	x0, x4, x0, lsr #57
 7b8:	lsl	x22, x21, #3
 7bc:	extr	x21, x0, x21, #61
 7c0:	mov	w0, #0xffffff80            	// #-128
 7c4:	b.gt	86c <sha512_final+0x104>
 7c8:	strb	w0, [x2, #72]
 7cc:	cmp	w1, #0x6f
 7d0:	b.gt	7f0 <sha512_final+0x88>
 7d4:	sxtw	x1, w1
 7d8:	strb	wzr, [x20, x1]
 7dc:	add	x1, x1, #0x1
 7e0:	cmp	w1, #0x6f
 7e4:	b.le	7d8 <sha512_final+0x70>
 7e8:	mov	w0, #0x70                  	// #112
 7ec:	str	w0, [x19, #200]
 7f0:	mov	x1, x20
 7f4:	rev16	w21, w21
 7f8:	rev	x22, x22
 7fc:	str	wzr, [x19, #184]
 800:	strh	wzr, [x19, #188]
 804:	mov	x0, x19
 808:	strh	w21, [x19, #190]
 80c:	str	x22, [x19, #192]
 810:	bl	140 <transform>
 814:	mov	w0, #0x300                 	// #768
 818:	bl	0 <_gcry_burn_stack>
 81c:	ldp	x7, x6, [x19]
 820:	ldp	x5, x4, [x19, #16]
 824:	ldp	x3, x2, [x19, #32]
 828:	ldp	x1, x0, [x19, #48]
 82c:	rev	x7, x7
 830:	rev	x6, x6
 834:	rev	x5, x5
 838:	rev	x4, x4
 83c:	stp	x7, x6, [x19, #72]
 840:	rev	x3, x3
 844:	rev	x2, x2
 848:	stp	x5, x4, [x19, #88]
 84c:	rev	x1, x1
 850:	rev	x0, x0
 854:	stp	x3, x2, [x19, #104]
 858:	stp	x1, x0, [x19, #120]
 85c:	ldp	x19, x20, [sp, #16]
 860:	ldp	x21, x22, [sp, #32]
 864:	ldp	x29, x30, [sp], #48
 868:	ret
 86c:	strb	w0, [x2, #72]
 870:	cmp	w1, #0x7f
 874:	b.gt	898 <sha512_final+0x130>
 878:	sxtw	x1, w1
 87c:	nop
 880:	strb	wzr, [x20, x1]
 884:	add	x1, x1, #0x1
 888:	cmp	w1, #0x7f
 88c:	b.le	880 <sha512_final+0x118>
 890:	mov	w0, #0x80                  	// #128
 894:	str	w0, [x19, #200]
 898:	mov	x0, x19
 89c:	mov	x2, #0x0                   	// #0
 8a0:	mov	x1, #0x0                   	// #0
 8a4:	bl	5f0 <sha512_write>
 8a8:	mov	x0, x20
 8ac:	mov	x2, #0x70                  	// #112
 8b0:	mov	w1, #0x0                   	// #0
 8b4:	bl	0 <grub_memset>
 8b8:	b	7f0 <sha512_final+0x88>
 8bc:	nop

00000000000008c0 <grub_mod_init>:
 8c0:	stp	x29, x30, [sp, #-32]!
 8c4:	adrp	x0, 0 <sha512_init>
 8c8:	mov	x29, sp
 8cc:	str	x19, [sp, #16]
 8d0:	ldr	x19, [x0]
 8d4:	mov	x0, x19
 8d8:	bl	0 <grub_md_register>
 8dc:	add	x0, x19, #0x60
 8e0:	ldr	x19, [sp, #16]
 8e4:	ldp	x29, x30, [sp], #32
 8e8:	b	0 <grub_md_register>
 8ec:	nop
	...

00000000000008f8 <grub_mod_fini>:
 8f8:	stp	x29, x30, [sp, #-32]!
 8fc:	adrp	x0, 0 <sha512_init>
 900:	mov	x29, sp
 904:	str	x19, [sp, #16]
 908:	ldr	x19, [x0]
 90c:	mov	x0, x19
 910:	bl	0 <grub_md_unregister>
 914:	add	x0, x19, #0x60
 918:	ldr	x19, [sp, #16]
 91c:	ldp	x29, x30, [sp], #32
 920:	b	0 <grub_md_unregister>
 924:	nop
	...
