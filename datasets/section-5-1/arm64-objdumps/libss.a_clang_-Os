In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libss.a_clang_-Os:

ss_err.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <initialize_ss_error_table>:
   0:	adrp	x0, 0 <_et_list>
   4:	add	x0, x0, #0x0
   8:	b	c <initialize_ss_error_table_r>

000000000000000c <initialize_ss_error_table_r>:
   c:	stp	x29, x30, [sp, #-32]!
  10:	ldr	x9, [x0]
  14:	str	x19, [sp, #16]
  18:	mov	x19, x0
  1c:	mov	x29, sp
  20:	cbz	x9, 48 <initialize_ss_error_table_r+0x3c>
  24:	adrp	x8, 0 <initialize_ss_error_table>
  28:	add	x8, x8, #0x0
  2c:	mov	x19, x9
  30:	ldr	x9, [x9, #8]
  34:	ldr	x9, [x9]
  38:	cmp	x9, x8
  3c:	b.eq	74 <initialize_ss_error_table_r+0x68>  // b.none
  40:	ldr	x9, [x19]
  44:	cbnz	x9, 2c <initialize_ss_error_table_r+0x20>
  48:	mov	w0, #0x10                  	// #16
  4c:	bl	0 <malloc>
  50:	cbnz	x0, 64 <initialize_ss_error_table_r+0x58>
  54:	adrp	x0, 0 <initialize_ss_error_table>
  58:	add	x0, x0, #0x0
  5c:	ldr	x8, [x0, #8]
  60:	cbnz	x8, 74 <initialize_ss_error_table_r+0x68>
  64:	adrp	x8, 68 <initialize_ss_error_table_r+0x5c>
  68:	add	x8, x8, #0x0
  6c:	stp	xzr, x8, [x0]
  70:	str	x0, [x19]
  74:	ldr	x19, [sp, #16]
  78:	ldp	x29, x30, [sp], #32
  7c:	ret

std_rqs.o:     file format elf64-littleaarch64


invocation.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_create_invocation>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	str	x27, [sp, #16]
   8:	stp	x26, x25, [sp, #32]
   c:	stp	x24, x23, [sp, #48]
  10:	stp	x22, x21, [sp, #64]
  14:	stp	x20, x19, [sp, #80]
  18:	str	wzr, [x4]
  1c:	adrp	x27, 0 <_ss_table>
  20:	ldr	x24, [x27]
  24:	mov	x22, x0
  28:	mov	w0, #0x90                  	// #144
  2c:	mov	x29, sp
  30:	mov	x26, x4
  34:	mov	x19, x3
  38:	mov	x23, x2
  3c:	mov	x25, x1
  40:	bl	0 <malloc>
  44:	mov	x20, x0
  48:	cbnz	x24, 5c <ss_create_invocation+0x5c>
  4c:	mov	w0, #0x10                  	// #16
  50:	bl	0 <malloc>
  54:	mov	x24, x0
  58:	stp	xzr, xzr, [x0]
  5c:	bl	0 <initialize_ss_error_table>
  60:	mov	w8, #0x1                   	// #1
  64:	ldr	x9, [x24, x8, lsl #3]
  68:	mov	x21, x8
  6c:	add	x8, x8, #0x1
  70:	cbnz	x9, 64 <ss_create_invocation+0x64>
  74:	lsl	x8, x21, #3
  78:	add	x8, x8, #0x10
  7c:	and	x1, x8, #0x7fffffff8
  80:	mov	x0, x24
  84:	bl	0 <realloc>
  88:	cbz	x0, 124 <ss_create_invocation+0x124>
  8c:	add	w8, w21, #0x1
  90:	mov	x24, x0
  94:	str	xzr, [x0, w8, uxtw #3]
  98:	str	x20, [x0, w21, uxtw #3]
  9c:	mov	w0, #0x8                   	// #8
  a0:	stp	x22, x25, [x20]
  a4:	stp	xzr, xzr, [x20, #24]
  a8:	bl	0 <malloc>
  ac:	str	xzr, [x0]
  b0:	stp	x0, x23, [x20, #40]
  b4:	mov	x0, x22
  b8:	bl	0 <strlen>
  bc:	add	w0, w0, #0x4
  c0:	bl	0 <malloc>
  c4:	mov	x1, x22
  c8:	str	x0, [x20, #56]
  cc:	bl	0 <strcpy>
  d0:	ldr	x22, [x20, #56]
  d4:	mov	x0, x22
  d8:	bl	0 <strlen>
  dc:	mov	w8, #0x203a                	// #8250
  e0:	movk	w8, #0x20, lsl #16
  e4:	str	w8, [x22, x0]
  e8:	ldrb	w8, [x20, #80]
  ec:	mov	w0, #0x2                   	// #2
  f0:	mov	w1, #0x8                   	// #8
  f4:	str	xzr, [x20, #72]
  f8:	and	w8, w8, #0xfc
  fc:	strb	w8, [x20, #80]
 100:	bl	0 <calloc>
 104:	movi	v0.2d, #0x0
 108:	str	x0, [x20, #64]
 10c:	str	x19, [x0]
 110:	stur	q0, [x20, #120]
 114:	stur	q0, [x20, #104]
 118:	stur	q0, [x20, #88]
 11c:	str	x24, [x27]
 120:	b	138 <ss_create_invocation+0x138>
 124:	mov	w8, #0xc                   	// #12
 128:	mov	x0, x20
 12c:	str	w8, [x26]
 130:	bl	0 <free>
 134:	mov	w21, wzr
 138:	mov	w0, w21
 13c:	ldp	x20, x19, [sp, #80]
 140:	ldp	x22, x21, [sp, #64]
 144:	ldp	x24, x23, [sp, #48]
 148:	ldp	x26, x25, [sp, #32]
 14c:	ldr	x27, [sp, #16]
 150:	ldp	x29, x30, [sp], #96
 154:	ret

0000000000000158 <ss_delete_invocation>:
 158:	sub	sp, sp, #0x30
 15c:	adrp	x8, 0 <_ss_table>
 160:	ldr	x8, [x8]
 164:	stp	x29, x30, [sp, #16]
 168:	stp	x20, x19, [sp, #32]
 16c:	mov	w20, w0
 170:	ldr	x19, [x8, w0, sxtw #3]
 174:	add	x29, sp, #0x10
 178:	ldr	x0, [x19, #56]
 17c:	bl	0 <free>
 180:	ldr	x0, [x19, #64]
 184:	bl	0 <free>
 188:	ldr	x0, [x19, #40]
 18c:	ldr	x1, [x0]
 190:	cbz	x1, 1a4 <ss_delete_invocation+0x4c>
 194:	sub	x2, x29, #0x4
 198:	mov	w0, w20
 19c:	bl	0 <ss_delete_info_dir>
 1a0:	b	188 <ss_delete_invocation+0x30>
 1a4:	bl	0 <free>
 1a8:	mov	x0, x19
 1ac:	bl	0 <free>
 1b0:	ldp	x20, x19, [sp, #32]
 1b4:	ldp	x29, x30, [sp, #16]
 1b8:	add	sp, sp, #0x30
 1bc:	ret

help.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_help>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	stp	x26, x25, [sp, #32]
   8:	stp	x24, x23, [sp, #48]
   c:	stp	x22, x21, [sp, #64]
  10:	stp	x20, x19, [sp, #80]
  14:	adrp	x8, 0 <_ss_table>
  18:	ldr	x8, [x8]
  1c:	mov	w19, w2
  20:	cmp	w0, #0x2
  24:	mov	x20, x1
  28:	ldr	x23, [x8, w2, sxtw #3]
  2c:	str	x27, [sp, #16]
  30:	mov	x29, sp
  34:	b.eq	64 <ss_help+0x64>  // b.none
  38:	cmp	w0, #0x1
  3c:	b.ne	150 <ss_help+0x150>  // b.any
  40:	mov	x1, x20
  44:	mov	w2, w19
  48:	ldp	x20, x19, [sp, #80]
  4c:	ldp	x22, x21, [sp, #64]
  50:	ldp	x24, x23, [sp, #48]
  54:	ldp	x26, x25, [sp, #32]
  58:	ldr	x27, [sp, #16]
  5c:	ldp	x29, x30, [sp], #96
  60:	b	0 <ss_list_requests>
  64:	ldr	x8, [x23, #40]
  68:	cbz	x8, 1b4 <ss_help+0x1b4>
  6c:	ldr	x0, [x8]
  70:	cbz	x0, 1b4 <ss_help+0x1b4>
  74:	mov	w26, #0x692e                	// #26926
  78:	mov	x24, xzr
  7c:	mov	w25, #0x2f                  	// #47
  80:	movk	w26, #0x666e, lsl #16
  84:	mov	w27, #0x6f                  	// #111
  88:	bl	0 <strlen>
  8c:	ldr	x8, [x20, #8]
  90:	mov	x21, x0
  94:	mov	x0, x8
  98:	bl	0 <strlen>
  9c:	add	x8, x21, x0
  a0:	add	x0, x8, #0x7
  a4:	bl	0 <malloc>
  a8:	cbz	x0, 1d4 <ss_help+0x1d4>
  ac:	ldr	x8, [x23, #40]
  b0:	mov	x22, x0
  b4:	ldr	x1, [x8, x24]
  b8:	bl	0 <strcpy>
  bc:	bl	0 <strlen>
  c0:	strh	w25, [x22, x0]
  c4:	ldr	x1, [x20, #8]
  c8:	mov	x0, x22
  cc:	bl	0 <strcat>
  d0:	bl	0 <strlen>
  d4:	add	x8, x22, x0
  d8:	mov	x0, x22
  dc:	mov	w1, wzr
  e0:	str	w26, [x8]
  e4:	strh	w27, [x8, #4]
  e8:	bl	0 <open>
  ec:	mov	w21, w0
  f0:	mov	x0, x22
  f4:	bl	0 <free>
  f8:	tbz	w21, #31, 200 <ss_help+0x200>
  fc:	ldr	x8, [x23, #40]
 100:	add	x8, x8, x24
 104:	ldr	x0, [x8, #8]
 108:	add	x24, x24, #0x8
 10c:	cbnz	x0, 88 <ss_help+0x88>
 110:	ldr	x20, [x20, #8]
 114:	mov	x0, x20
 118:	bl	0 <strlen>
 11c:	add	x0, x0, #0x13
 120:	bl	0 <malloc>
 124:	adrp	x8, 0 <ss_help>
 128:	add	x8, x8, #0x0
 12c:	ldr	q0, [x8]
 130:	mov	w8, #0x726f                	// #29295
 134:	movk	w8, #0x20, lsl #16
 138:	mov	x1, x20
 13c:	mov	x21, x0
 140:	stur	w8, [x0, #15]
 144:	str	q0, [x0]
 148:	bl	0 <strcat>
 14c:	b	184 <ss_help+0x184>
 150:	ldr	x20, [x23, #32]
 154:	mov	x0, x20
 158:	bl	0 <strlen>
 15c:	lsl	x8, x0, #1
 160:	add	x0, x8, #0x50
 164:	bl	0 <malloc>
 168:	cbz	x0, 1c8 <ss_help+0x1c8>
 16c:	adrp	x1, 0 <ss_help>
 170:	add	x1, x1, #0x0
 174:	mov	x2, x20
 178:	mov	x3, x20
 17c:	mov	x21, x0
 180:	bl	0 <sprintf>
 184:	mov	w0, w19
 188:	mov	x1, xzr
 18c:	mov	x2, x21
 190:	bl	0 <ss_perror>
 194:	mov	x0, x21
 198:	ldp	x20, x19, [sp, #80]
 19c:	ldp	x22, x21, [sp, #64]
 1a0:	ldp	x24, x23, [sp, #48]
 1a4:	ldp	x26, x25, [sp, #32]
 1a8:	ldr	x27, [sp, #16]
 1ac:	ldp	x29, x30, [sp], #96
 1b0:	b	0 <free>
 1b4:	mov	w1, #0x6d03                	// #27907
 1b8:	movk	w1, #0xb, lsl #16
 1bc:	mov	w0, w19
 1c0:	mov	x2, xzr
 1c4:	b	1e4 <ss_help+0x1e4>
 1c8:	adrp	x2, 0 <ss_help>
 1cc:	add	x2, x2, #0x0
 1d0:	b	1dc <ss_help+0x1dc>
 1d4:	adrp	x2, 0 <ss_help>
 1d8:	add	x2, x2, #0x0
 1dc:	mov	w0, w19
 1e0:	mov	x1, xzr
 1e4:	ldp	x20, x19, [sp, #80]
 1e8:	ldp	x22, x21, [sp, #64]
 1ec:	ldp	x24, x23, [sp, #48]
 1f0:	ldp	x26, x25, [sp, #32]
 1f4:	ldr	x27, [sp, #16]
 1f8:	ldp	x29, x30, [sp], #96
 1fc:	b	0 <ss_perror>
 200:	bl	0 <fork>
 204:	mov	w20, w0
 208:	cbz	w0, 24c <ss_help+0x24c>
 20c:	cmn	w20, #0x1
 210:	b.ne	25c <ss_help+0x25c>  // b.any
 214:	bl	0 <__errno_location>
 218:	ldrsw	x1, [x0]
 21c:	adrp	x2, 0 <ss_help>
 220:	add	x2, x2, #0x0
 224:	mov	w0, w19
 228:	bl	0 <ss_perror>
 22c:	mov	w0, w21
 230:	ldp	x20, x19, [sp, #80]
 234:	ldp	x22, x21, [sp, #64]
 238:	ldp	x24, x23, [sp, #48]
 23c:	ldp	x26, x25, [sp, #32]
 240:	ldr	x27, [sp, #16]
 244:	ldp	x29, x30, [sp], #96
 248:	b	0 <close>
 24c:	mov	w0, w21
 250:	mov	w1, wzr
 254:	bl	0 <dup2>
 258:	bl	0 <ss_page_stdin>
 25c:	mov	w0, w21
 260:	bl	0 <close>
 264:	mov	x0, xzr
 268:	bl	0 <wait>
 26c:	cmp	w0, w20
 270:	b.ne	264 <ss_help+0x264>  // b.any
 274:	ldp	x20, x19, [sp, #80]
 278:	ldp	x22, x21, [sp, #64]
 27c:	ldp	x24, x23, [sp, #48]
 280:	ldp	x26, x25, [sp, #32]
 284:	ldr	x27, [sp, #16]
 288:	ldp	x29, x30, [sp], #96
 28c:	ret

0000000000000290 <ss_add_info_dir>:
 290:	stp	x29, x30, [sp, #-64]!
 294:	mov	w8, #0x6d03                	// #27907
 298:	stp	x20, x19, [sp, #48]
 29c:	mov	x19, x2
 2a0:	movk	w8, #0xb, lsl #16
 2a4:	str	x23, [sp, #16]
 2a8:	stp	x22, x21, [sp, #32]
 2ac:	mov	x29, sp
 2b0:	cbz	x1, 348 <ss_add_info_dir+0xb8>
 2b4:	ldrb	w9, [x1]
 2b8:	mov	x20, x1
 2bc:	cbz	w9, 348 <ss_add_info_dir+0xb8>
 2c0:	adrp	x8, 0 <_ss_table>
 2c4:	ldr	x8, [x8]
 2c8:	ldr	x22, [x8, w0, sxtw #3]
 2cc:	mov	x0, x20
 2d0:	bl	0 <opendir>
 2d4:	cbz	x0, 340 <ss_add_info_dir+0xb0>
 2d8:	bl	0 <closedir>
 2dc:	ldr	x0, [x22, #40]
 2e0:	mov	x8, xzr
 2e4:	mov	x23, #0xffffffffffffffff    	// #-1
 2e8:	ldr	x9, [x0, x8]
 2ec:	add	x23, x23, #0x1
 2f0:	add	x8, x8, #0x8
 2f4:	cbnz	x9, 2e8 <ss_add_info_dir+0x58>
 2f8:	add	x8, x8, #0x8
 2fc:	and	x1, x8, #0x7fffffff8
 300:	bl	0 <realloc>
 304:	cbz	x0, 33c <ss_add_info_dir+0xac>
 308:	add	w8, w23, #0x1
 30c:	mov	x21, x0
 310:	str	x0, [x22, #40]
 314:	str	xzr, [x0, w8, uxtw #3]
 318:	mov	x0, x20
 31c:	bl	0 <strlen>
 320:	add	w0, w0, #0x1
 324:	bl	0 <malloc>
 328:	mov	x1, x20
 32c:	str	x0, [x21, w23, uxtw #3]
 330:	bl	0 <strcpy>
 334:	mov	w8, wzr
 338:	b	348 <ss_add_info_dir+0xb8>
 33c:	str	xzr, [x22, #40]
 340:	bl	0 <__errno_location>
 344:	ldr	w8, [x0]
 348:	str	w8, [x19]
 34c:	ldp	x20, x19, [sp, #48]
 350:	ldp	x22, x21, [sp, #32]
 354:	ldr	x23, [sp, #16]
 358:	ldp	x29, x30, [sp], #64
 35c:	ret

0000000000000360 <ss_delete_info_dir>:
 360:	stp	x29, x30, [sp, #-48]!
 364:	adrp	x8, 0 <_ss_table>
 368:	ldr	x8, [x8]
 36c:	stp	x22, x21, [sp, #16]
 370:	stp	x20, x19, [sp, #32]
 374:	mov	w21, #0x6d03                	// #27907
 378:	ldr	x8, [x8, w0, sxtw #3]
 37c:	mov	x19, x2
 380:	movk	w21, #0xb, lsl #16
 384:	mov	x29, sp
 388:	ldr	x8, [x8, #40]
 38c:	ldr	x0, [x8]
 390:	cbz	x0, 3c8 <ss_delete_info_dir+0x68>
 394:	mov	x20, x1
 398:	add	x22, x8, #0x8
 39c:	mov	x1, x20
 3a0:	bl	0 <strcmp>
 3a4:	cbz	w0, 3b4 <ss_delete_info_dir+0x54>
 3a8:	ldr	x0, [x22], #8
 3ac:	cbnz	x0, 39c <ss_delete_info_dir+0x3c>
 3b0:	b	3c8 <ss_delete_info_dir+0x68>
 3b4:	ldr	x8, [x22]
 3b8:	stur	x8, [x22, #-8]
 3bc:	add	x22, x22, #0x8
 3c0:	cbnz	x8, 3b4 <ss_delete_info_dir+0x54>
 3c4:	mov	w21, wzr
 3c8:	str	w21, [x19]
 3cc:	ldp	x20, x19, [sp, #32]
 3d0:	ldp	x22, x21, [sp, #16]
 3d4:	ldp	x29, x30, [sp], #48
 3d8:	ret

execute_cmd.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_execute_command>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	stp	x22, x21, [sp, #32]
   8:	stp	x20, x19, [sp, #48]
   c:	mov	x21, x1
  10:	mov	w19, w0
  14:	mov	x22, xzr
  18:	mov	w20, #0xffffffff            	// #-1
  1c:	str	x23, [sp, #16]
  20:	mov	x29, sp
  24:	ldr	x8, [x21, x22]
  28:	add	x22, x22, #0x8
  2c:	add	w20, w20, #0x1
  30:	cbnz	x8, 24 <ss_execute_command+0x24>
  34:	add	w8, w20, #0x1
  38:	lsl	x0, x8, #3
  3c:	bl	0 <malloc>
  40:	mov	x1, x21
  44:	mov	x2, x22
  48:	mov	x23, x0
  4c:	str	x0, [x29, #24]
  50:	bl	0 <memcpy>
  54:	add	x2, x29, #0x18
  58:	mov	w0, w19
  5c:	mov	w1, w20
  60:	bl	88 <really_execute_command>
  64:	mov	w19, w0
  68:	mov	x0, x23
  6c:	bl	0 <free>
  70:	mov	w0, w19
  74:	ldp	x20, x19, [sp, #48]
  78:	ldp	x22, x21, [sp, #32]
  7c:	ldr	x23, [sp, #16]
  80:	ldp	x29, x30, [sp], #64
  84:	ret

0000000000000088 <really_execute_command>:
  88:	sub	sp, sp, #0x80
  8c:	adrp	x8, 0 <_ss_table>
  90:	ldr	x8, [x8]
  94:	stp	x29, x30, [sp, #32]
  98:	stp	x28, x27, [sp, #48]
  9c:	stp	x26, x25, [sp, #64]
  a0:	stp	x24, x23, [sp, #80]
  a4:	stp	x22, x21, [sp, #96]
  a8:	stp	x20, x19, [sp, #112]
  ac:	ldr	x25, [x8, w0, sxtw #3]
  b0:	add	x29, sp, #0x20
  b4:	stur	x8, [x29, #-8]
  b8:	mov	w21, w0
  bc:	ldr	x27, [x25, #64]
  c0:	mov	w0, #0x6d04                	// #27908
  c4:	movk	w0, #0xb, lsl #16
  c8:	ldr	x8, [x27]
  cc:	cbz	x8, 178 <really_execute_command+0xf0>
  d0:	mov	w19, w1
  d4:	sxtw	x9, w21
  d8:	stp	x9, x2, [sp, #8]
  dc:	ldr	x23, [x2]
  e0:	ldr	x24, [x23]
  e4:	str	w19, [x25, #16]
  e8:	str	x23, [x25, #24]
  ec:	ldr	x20, [x8, #8]
  f0:	ldr	x8, [x20]
  f4:	cbz	x8, 130 <really_execute_command+0xa8>
  f8:	mov	x22, xzr
  fc:	mov	x28, x20
 100:	ldr	x0, [x8]
 104:	cbz	x0, 120 <really_execute_command+0x98>
 108:	add	x26, x8, #0x8
 10c:	mov	x1, x24
 110:	bl	0 <strcmp>
 114:	cbz	w0, 148 <really_execute_command+0xc0>
 118:	ldr	x0, [x26], #8
 11c:	cbnz	x0, 10c <really_execute_command+0x84>
 120:	add	x22, x22, #0x1
 124:	add	x28, x20, x22, lsl #5
 128:	ldr	x8, [x28]
 12c:	cbnz	x8, 100 <really_execute_command+0x78>
 130:	ldr	x8, [x27, #8]!
 134:	cbz	x8, 198 <really_execute_command+0x110>
 138:	ldur	x9, [x29, #-8]
 13c:	ldp	x10, x2, [sp, #8]
 140:	ldr	x25, [x9, x10, lsl #3]
 144:	b	dc <really_execute_command+0x54>
 148:	ldr	x8, [x28]
 14c:	add	x9, x20, x22, lsl #5
 150:	ldr	x3, [x25, #48]
 154:	mov	w0, w19
 158:	ldr	x8, [x8]
 15c:	mov	x1, x23
 160:	mov	w2, w21
 164:	str	x8, [x25, #32]
 168:	ldr	x8, [x9, #8]
 16c:	blr	x8
 170:	mov	w0, wzr
 174:	str	xzr, [x25, #32]
 178:	ldp	x20, x19, [sp, #112]
 17c:	ldp	x22, x21, [sp, #96]
 180:	ldp	x24, x23, [sp, #80]
 184:	ldp	x26, x25, [sp, #64]
 188:	ldp	x28, x27, [sp, #48]
 18c:	ldp	x29, x30, [sp, #32]
 190:	add	sp, sp, #0x80
 194:	ret
 198:	mov	w0, #0x6d04                	// #27908
 19c:	movk	w0, #0xb, lsl #16
 1a0:	b	178 <really_execute_command+0xf0>

00000000000001a4 <ss_execute_line>:
 1a4:	sub	sp, sp, #0x30
 1a8:	stp	x20, x19, [sp, #32]
 1ac:	mov	w19, w0
 1b0:	stp	x29, x30, [sp, #16]
 1b4:	add	x29, sp, #0x10
 1b8:	ldrb	w8, [x1]
 1bc:	cmp	w8, #0x9
 1c0:	b.eq	1cc <ss_execute_line+0x28>  // b.none
 1c4:	cmp	w8, #0x20
 1c8:	b.ne	1d4 <ss_execute_line+0x30>  // b.any
 1cc:	add	x1, x1, #0x1
 1d0:	b	1b8 <ss_execute_line+0x14>
 1d4:	cmp	w8, #0x21
 1d8:	b.ne	208 <ss_execute_line+0x64>  // b.any
 1dc:	adrp	x8, 0 <_ss_table>
 1e0:	ldr	x8, [x8]
 1e4:	ldr	x8, [x8, w19, sxtw #3]
 1e8:	ldrb	w8, [x8, #80]
 1ec:	tbnz	w8, #0, 240 <ss_execute_line+0x9c>
 1f0:	add	x0, x1, #0x1
 1f4:	bl	0 <system>
 1f8:	tbz	w0, #31, 254 <ss_execute_line+0xb0>
 1fc:	bl	0 <__errno_location>
 200:	ldr	w19, [x0]
 204:	b	258 <ss_execute_line+0xb4>
 208:	add	x2, sp, #0x4
 20c:	mov	w0, w19
 210:	bl	0 <ss_parse>
 214:	ldr	w1, [sp, #4]
 218:	mov	x20, x0
 21c:	str	x0, [sp, #8]
 220:	cbz	w1, 24c <ss_execute_line+0xa8>
 224:	add	x2, sp, #0x8
 228:	mov	w0, w19
 22c:	bl	88 <really_execute_command>
 230:	mov	w19, w0
 234:	mov	x0, x20
 238:	bl	0 <free>
 23c:	b	258 <ss_execute_line+0xb4>
 240:	mov	w19, #0x6d0a                	// #27914
 244:	movk	w19, #0xb, lsl #16
 248:	b	258 <ss_execute_line+0xb4>
 24c:	mov	x0, x20
 250:	bl	0 <free>
 254:	mov	w19, wzr
 258:	mov	w0, w19
 25c:	ldp	x20, x19, [sp, #32]
 260:	ldp	x29, x30, [sp, #16]
 264:	add	sp, sp, #0x30
 268:	ret

listen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_listen>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	stp	x28, x27, [sp, #16]
   8:	stp	x26, x25, [sp, #32]
   c:	stp	x24, x23, [sp, #48]
  10:	stp	x22, x21, [sp, #64]
  14:	stp	x20, x19, [sp, #80]
  18:	mov	x29, sp
  1c:	sub	sp, sp, #0x2, lsl #12
  20:	sub	sp, sp, #0x250
  24:	adrp	x8, 0 <_ss_table>
  28:	ldr	x8, [x8]
  2c:	adrp	x25, 0 <ss_listen>
  30:	ldr	x22, [x25]
  34:	mov	w19, w0
  38:	ldr	x27, [x8, w0, sxtw #3]
  3c:	adrp	x28, 0 <ss_listen>
  40:	add	x0, sp, #0x148
  44:	str	xzr, [x28]
  48:	str	x27, [x25]
  4c:	str	wzr, [x27, #136]
  50:	bl	0 <sigemptyset>
  54:	add	x0, sp, #0x148
  58:	mov	w1, #0x2                   	// #2
  5c:	bl	0 <sigaddset>
  60:	add	x1, sp, #0x148
  64:	add	x2, sp, #0x1c8
  68:	mov	w0, wzr
  6c:	bl	0 <sigprocmask>
  70:	adrp	x21, 0 <ss_listen>
  74:	add	x21, x21, #0x0
  78:	add	x0, sp, #0x10
  7c:	mov	w2, #0x138                 	// #312
  80:	mov	x1, x21
  84:	bl	0 <memcpy>
  88:	adrp	x1, 0 <ss_listen>
  8c:	add	x1, x1, #0x0
  90:	mov	w0, #0x2                   	// #2
  94:	bl	0 <signal>
  98:	mov	x20, x0
  9c:	mov	x0, x21
  a0:	bl	0 <_setjmp>
  a4:	add	x1, sp, #0x1c8
  a8:	mov	w0, #0x2                   	// #2
  ac:	mov	x2, xzr
  b0:	bl	0 <sigprocmask>
  b4:	ldr	w8, [x27, #136]
  b8:	mov	w21, wzr
  bc:	cbnz	w8, 22c <ss_listen+0x22c>
  c0:	mov	w26, #0x6d04                	// #27908
  c4:	mov	w8, #0x1fff                	// #8191
  c8:	add	x9, sp, #0x248
  cc:	adrp	x21, 0 <ss_listen>
  d0:	str	x22, [sp, #8]
  d4:	movk	w26, #0xb, lsl #16
  d8:	add	x21, x21, #0x0
  dc:	add	x22, x9, x8
  e0:	ldr	x23, [x28]
  e4:	mov	w0, #0x12                  	// #18
  e8:	mov	x1, x21
  ec:	bl	0 <signal>
  f0:	cmp	x0, x21
  f4:	str	x0, [x28]
  f8:	b.ne	100 <ss_listen+0x100>  // b.any
  fc:	str	x23, [x28]
 100:	ldr	x8, [x27, #104]
 104:	cbz	x8, 120 <ss_listen+0x120>
 108:	ldr	x9, [x25]
 10c:	ldr	x0, [x9, #56]
 110:	blr	x8
 114:	mov	x23, x0
 118:	cbnz	x0, 14c <ss_listen+0x14c>
 11c:	b	218 <ss_listen+0x218>
 120:	mov	w0, wzr
 124:	add	x23, sp, #0x248
 128:	bl	2b0 <print_prompt>
 12c:	adrp	x8, 0 <stdin>
 130:	ldr	x2, [x8]
 134:	add	x0, sp, #0x248
 138:	mov	w1, #0x2000                	// #8192
 13c:	bl	0 <fgets>
 140:	cmp	x0, x23
 144:	strb	wzr, [x22]
 148:	b.ne	218 <ss_listen+0x218>  // b.any
 14c:	mov	w1, #0xa                   	// #10
 150:	mov	x0, x23
 154:	bl	0 <strchr>
 158:	cbz	x0, 168 <ss_listen+0x168>
 15c:	cmp	x0, x23
 160:	strb	wzr, [x0]
 164:	b.eq	208 <ss_listen+0x208>  // b.none
 168:	ldr	x1, [x28]
 16c:	mov	w0, #0x12                  	// #18
 170:	bl	0 <signal>
 174:	ldr	x8, [x27, #112]
 178:	cbz	x8, 184 <ss_listen+0x184>
 17c:	mov	x0, x23
 180:	blr	x8
 184:	mov	w0, w19
 188:	mov	x1, x23
 18c:	bl	0 <ss_execute_line>
 190:	cmp	w0, w26
 194:	b.ne	1f8 <ss_listen+0x1f8>  // b.any
 198:	mov	x24, x23
 19c:	ldrb	w8, [x24]
 1a0:	cmp	w8, #0x20
 1a4:	b.eq	1b0 <ss_listen+0x1b0>  // b.none
 1a8:	cmp	w8, #0x9
 1ac:	b.ne	1b8 <ss_listen+0x1b8>  // b.any
 1b0:	add	x24, x24, #0x1
 1b4:	b	19c <ss_listen+0x19c>
 1b8:	mov	w1, #0x20                  	// #32
 1bc:	mov	x0, x24
 1c0:	bl	0 <strchr>
 1c4:	cbz	x0, 1cc <ss_listen+0x1cc>
 1c8:	strb	wzr, [x0]
 1cc:	mov	w1, #0x9                   	// #9
 1d0:	mov	x0, x24
 1d4:	bl	0 <strchr>
 1d8:	cbz	x0, 1e0 <ss_listen+0x1e0>
 1dc:	strb	wzr, [x0]
 1e0:	adrp	x2, 0 <ss_listen>
 1e4:	mov	w0, w19
 1e8:	mov	x1, xzr
 1ec:	add	x2, x2, #0x0
 1f0:	mov	x3, x24
 1f4:	bl	0 <ss_error>
 1f8:	ldr	x8, [x27, #104]
 1fc:	cbz	x8, 208 <ss_listen+0x208>
 200:	mov	x0, x23
 204:	bl	0 <free>
 208:	ldr	w8, [x27, #136]
 20c:	cbz	w8, e0 <ss_listen+0xe0>
 210:	mov	w21, wzr
 214:	b	228 <ss_listen+0x228>
 218:	ldr	x1, [x28]
 21c:	mov	w0, #0x12                  	// #18
 220:	bl	0 <signal>
 224:	add	w21, w26, #0x2
 228:	ldr	x22, [sp, #8]
 22c:	mov	w0, #0x2                   	// #2
 230:	mov	x1, x20
 234:	bl	0 <signal>
 238:	adrp	x0, 0 <ss_listen>
 23c:	add	x0, x0, #0x0
 240:	add	x1, sp, #0x10
 244:	mov	w2, #0x138                 	// #312
 248:	bl	0 <memcpy>
 24c:	str	x22, [x25]
 250:	mov	w0, w21
 254:	add	sp, sp, #0x2, lsl #12
 258:	add	sp, sp, #0x250
 25c:	ldp	x20, x19, [sp, #80]
 260:	ldp	x22, x21, [sp, #64]
 264:	ldp	x24, x23, [sp, #48]
 268:	ldp	x26, x25, [sp, #32]
 26c:	ldp	x28, x27, [sp, #16]
 270:	ldp	x29, x30, [sp], #96
 274:	ret

0000000000000278 <listen_int_handler>:
 278:	stp	x29, x30, [sp, #-16]!
 27c:	adrp	x8, 0 <stdout>
 280:	ldr	x1, [x8]
 284:	mov	w0, #0xa                   	// #10
 288:	mov	x29, sp
 28c:	bl	0 <putc>
 290:	adrp	x1, 0 <ss_listen>
 294:	add	x1, x1, #0x0
 298:	mov	w0, #0x2                   	// #2
 29c:	bl	0 <signal>
 2a0:	adrp	x0, 0 <ss_listen>
 2a4:	add	x0, x0, #0x0
 2a8:	mov	w1, #0x1                   	// #1
 2ac:	bl	0 <longjmp>

00000000000002b0 <print_prompt>:
 2b0:	stp	x29, x30, [sp, #-32]!
 2b4:	adrp	x8, 0 <ss_listen>
 2b8:	ldr	x8, [x8]
 2bc:	str	x19, [sp, #16]
 2c0:	mov	x29, sp
 2c4:	ldr	x0, [x8, #120]
 2c8:	cbz	x0, 2d8 <print_prompt+0x28>
 2cc:	ldr	x19, [sp, #16]
 2d0:	ldp	x29, x30, [sp], #32
 2d4:	br	x0
 2d8:	adrp	x19, 0 <stdout>
 2dc:	ldr	x0, [x8, #56]
 2e0:	ldr	x1, [x19]
 2e4:	bl	0 <fputs>
 2e8:	ldr	x0, [x19]
 2ec:	ldr	x19, [sp, #16]
 2f0:	ldp	x29, x30, [sp], #32
 2f4:	b	0 <fflush>

00000000000002f8 <ss_abort_subsystem>:
 2f8:	adrp	x8, 0 <_ss_table>
 2fc:	ldr	x8, [x8]
 300:	mov	w9, #0x1                   	// #1
 304:	ldr	x8, [x8, w0, sxtw #3]
 308:	stp	w9, w1, [x8, #136]
 30c:	ret

0000000000000310 <ss_quit>:
 310:	adrp	x8, 0 <_ss_table>
 314:	ldr	x8, [x8]
 318:	adrp	x9, 0 <ss_listen>
 31c:	ldr	d0, [x9]
 320:	ldr	x8, [x8, w2, sxtw #3]
 324:	str	d0, [x8, #136]
 328:	ret

000000000000032c <ss_rl_completion>:
 32c:	cbz	w1, 338 <ss_rl_completion+0xc>
 330:	mov	x0, xzr
 334:	ret
 338:	adrp	x8, 0 <ss_listen>
 33c:	ldr	x8, [x8]
 340:	ldr	x2, [x8, #128]
 344:	cbz	x2, 330 <ss_rl_completion+0x4>
 348:	adrp	x1, 0 <ss_listen>
 34c:	add	x1, x1, #0x0
 350:	br	x2

0000000000000354 <cmd_generator>:
 354:	stp	x29, x30, [sp, #-80]!
 358:	stp	x24, x23, [sp, #32]
 35c:	stp	x22, x21, [sp, #48]
 360:	stp	x20, x19, [sp, #64]
 364:	mov	x19, x0
 368:	adrp	x22, 0 <ss_listen>
 36c:	adrp	x23, 0 <ss_listen>
 370:	stp	x26, x25, [sp, #16]
 374:	mov	x29, sp
 378:	cbz	w1, 390 <cmd_generator+0x3c>
 37c:	adrp	x8, 0 <ss_listen>
 380:	ldr	x24, [x22]
 384:	ldr	w0, [x8]
 388:	ldr	x25, [x23]
 38c:	b	3cc <cmd_generator+0x78>
 390:	mov	x0, x19
 394:	bl	0 <strlen>
 398:	adrp	x8, 0 <ss_listen>
 39c:	ldr	x8, [x8]
 3a0:	adrp	x9, 0 <ss_listen>
 3a4:	str	w0, [x9]
 3a8:	ldr	x25, [x8, #64]
 3ac:	str	x25, [x23]
 3b0:	cbz	x25, 474 <cmd_generator+0x120>
 3b4:	ldr	x8, [x25]
 3b8:	cbz	x8, 474 <cmd_generator+0x120>
 3bc:	mov	x24, xzr
 3c0:	adrp	x8, 0 <ss_listen>
 3c4:	str	wzr, [x8]
 3c8:	str	xzr, [x22]
 3cc:	sxtw	x20, w0
 3d0:	adrp	x26, 0 <ss_listen>
 3d4:	cbz	x24, 3e0 <cmd_generator+0x8c>
 3d8:	ldr	x8, [x24]
 3dc:	cbnz	x8, 404 <cmd_generator+0xb0>
 3e0:	ldr	x8, [x25]
 3e4:	ldrsw	x9, [x26]
 3e8:	ldr	x8, [x8, #8]
 3ec:	add	w10, w9, #0x1
 3f0:	str	w10, [x26]
 3f4:	lsl	x9, x9, #5
 3f8:	ldr	x24, [x8, x9]
 3fc:	str	x24, [x22]
 400:	cbz	x24, 428 <cmd_generator+0xd4>
 404:	ldr	x21, [x24]
 408:	mov	x1, x19
 40c:	mov	x2, x20
 410:	mov	x0, x21
 414:	bl	0 <strncmp>
 418:	cbz	w0, 448 <cmd_generator+0xf4>
 41c:	add	x24, x24, #0x8
 420:	str	x24, [x22]
 424:	b	3d4 <cmd_generator+0x80>
 428:	add	x8, x25, #0x8
 42c:	str	x8, [x23]
 430:	ldr	x9, [x25, #8]
 434:	cbz	x9, 474 <cmd_generator+0x120>
 438:	mov	x24, xzr
 43c:	str	wzr, [x26]
 440:	mov	x25, x8
 444:	b	3d4 <cmd_generator+0x80>
 448:	mov	x0, x21
 44c:	bl	0 <strlen>
 450:	add	x0, x0, #0x1
 454:	bl	0 <malloc>
 458:	cbz	x0, 468 <cmd_generator+0x114>
 45c:	ldr	x1, [x24]
 460:	bl	0 <strcpy>
 464:	ldr	x24, [x22]
 468:	add	x8, x24, #0x8
 46c:	str	x8, [x22]
 470:	b	478 <cmd_generator+0x124>
 474:	mov	x0, xzr
 478:	ldp	x20, x19, [sp, #64]
 47c:	ldp	x22, x21, [sp, #48]
 480:	ldp	x24, x23, [sp, #32]
 484:	ldp	x26, x25, [sp, #16]
 488:	ldp	x29, x30, [sp], #80
 48c:	ret

parse.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_parse>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	stp	x20, x19, [sp, #64]
   8:	mov	w20, w0
   c:	mov	w0, #0x8                   	// #8
  10:	str	x25, [sp, #16]
  14:	stp	x24, x23, [sp, #32]
  18:	stp	x22, x21, [sp, #48]
  1c:	mov	x29, sp
  20:	mov	x19, x2
  24:	mov	x22, x1
  28:	bl	0 <malloc>
  2c:	mov	x21, x0
  30:	cbz	x0, 17c <ss_parse+0x17c>
  34:	mov	w23, wzr
  38:	mov	w9, #0x1                   	// #1
  3c:	mov	w24, #0x22                  	// #34
  40:	mov	x8, x22
  44:	str	xzr, [x21]
  48:	mov	x25, x22
  4c:	tbz	w9, #0, 130 <ss_parse+0x130>
  50:	ldrb	w8, [x25]
  54:	cmp	w8, #0x1f
  58:	b.gt	68 <ss_parse+0x68>
  5c:	cmp	w8, #0x9
  60:	b.eq	70 <ss_parse+0x70>  // b.none
  64:	b	78 <ss_parse+0x78>
  68:	cmp	w8, #0x20
  6c:	b.ne	80 <ss_parse+0x80>  // b.any
  70:	add	x25, x25, #0x1
  74:	b	50 <ss_parse+0x50>
  78:	cbz	w8, 1c8 <ss_parse+0x1c8>
  7c:	b	104 <ss_parse+0x104>
  80:	cmp	w8, #0x22
  84:	b.ne	104 <ss_parse+0x104>  // b.any
  88:	add	w8, w23, #0x2
  8c:	lsl	x1, x8, #3
  90:	mov	x0, x21
  94:	bl	0 <realloc>
  98:	cbz	x0, 1b0 <ss_parse+0x1b0>
  9c:	sxtw	x8, w23
  a0:	add	x22, x25, #0x1
  a4:	str	x25, [x0, w23, sxtw #3]
  a8:	add	x23, x8, #0x1
  ac:	mov	x21, x0
  b0:	str	xzr, [x0, x23, lsl #3]
  b4:	ldrb	w9, [x22]
  b8:	mov	x10, x22
  bc:	mov	x8, x25
  c0:	cbz	w9, 19c <ss_parse+0x19c>
  c4:	and	w11, w9, #0xff
  c8:	cmp	w11, #0x22
  cc:	add	x22, x10, #0x1
  d0:	b.ne	ec <ss_parse+0xec>  // b.any
  d4:	ldrb	w9, [x22]
  d8:	cmp	w9, #0x22
  dc:	b.ne	174 <ss_parse+0x174>  // b.any
  e0:	strb	w24, [x8]
  e4:	add	x22, x10, #0x2
  e8:	b	f0 <ss_parse+0xf0>
  ec:	strb	w9, [x8]
  f0:	ldrb	w9, [x22]
  f4:	add	x8, x8, #0x1
  f8:	mov	x10, x22
  fc:	cbnz	w9, c4 <ss_parse+0xc4>
 100:	b	19c <ss_parse+0x19c>
 104:	add	w8, w23, #0x2
 108:	lsl	x1, x8, #3
 10c:	mov	x0, x21
 110:	bl	0 <realloc>
 114:	cbz	x0, 1b0 <ss_parse+0x1b0>
 118:	sxtw	x8, w23
 11c:	str	x25, [x0, w23, sxtw #3]
 120:	add	x23, x8, #0x1
 124:	str	xzr, [x0, x23, lsl #3]
 128:	mov	x8, x25
 12c:	mov	x21, x0
 130:	add	x22, x25, #0x1
 134:	mov	x25, x8
 138:	ldurb	w8, [x22, #-1]
 13c:	cmp	w8, #0x20
 140:	b.eq	164 <ss_parse+0x164>  // b.none
 144:	cmp	w8, #0x9
 148:	b.eq	164 <ss_parse+0x164>  // b.none
 14c:	cbz	w8, 1c4 <ss_parse+0x1c4>
 150:	cmp	w8, #0x22
 154:	b.eq	b4 <ss_parse+0xb4>  // b.none
 158:	strb	w8, [x25], #1
 15c:	add	x22, x22, #0x1
 160:	b	138 <ss_parse+0x138>
 164:	strb	wzr, [x25], #1
 168:	mov	w9, #0x1                   	// #1
 16c:	mov	x8, x25
 170:	b	48 <ss_parse+0x48>
 174:	mov	w9, wzr
 178:	b	48 <ss_parse+0x48>
 17c:	bl	0 <__errno_location>
 180:	ldrsw	x1, [x0]
 184:	adrp	x2, 0 <ss_parse>
 188:	add	x2, x2, #0x0
 18c:	mov	w0, w20
 190:	bl	0 <ss_error>
 194:	mov	w23, wzr
 198:	b	1c8 <ss_parse+0x1c8>
 19c:	adrp	x2, 0 <ss_parse>
 1a0:	add	x2, x2, #0x0
 1a4:	mov	w0, w20
 1a8:	mov	x1, xzr
 1ac:	bl	0 <ss_error>
 1b0:	mov	x0, x21
 1b4:	bl	0 <free>
 1b8:	mov	w23, wzr
 1bc:	mov	x21, xzr
 1c0:	b	1c8 <ss_parse+0x1c8>
 1c4:	strb	wzr, [x25]
 1c8:	str	w23, [x19]
 1cc:	mov	x0, x21
 1d0:	ldp	x20, x19, [sp, #64]
 1d4:	ldp	x22, x21, [sp, #48]
 1d8:	ldp	x24, x23, [sp, #32]
 1dc:	ldr	x25, [sp, #16]
 1e0:	ldp	x29, x30, [sp], #80
 1e4:	ret

error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_name>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	adrp	x8, 0 <_ss_table>
   8:	ldr	x8, [x8]
   c:	stp	x22, x21, [sp, #16]
  10:	stp	x20, x19, [sp, #32]
  14:	mov	x29, sp
  18:	ldr	x22, [x8, w0, sxtw #3]
  1c:	ldr	x19, [x22]
  20:	ldr	x21, [x22, #32]
  24:	mov	x0, x19
  28:	bl	0 <strlen>
  2c:	mov	x20, x0
  30:	cbz	x21, 98 <ss_name+0x98>
  34:	mov	x0, x21
  38:	bl	0 <strlen>
  3c:	add	x8, x20, x0
  40:	add	x0, x8, #0x4
  44:	bl	0 <malloc>
  48:	ldrb	w9, [x19]
  4c:	mov	x8, x0
  50:	cbz	w9, 68 <ss_name+0x68>
  54:	add	x10, x19, #0x1
  58:	mov	x8, x0
  5c:	strb	w9, [x8], #1
  60:	ldrb	w9, [x10], #1
  64:	cbnz	w9, 5c <ss_name+0x5c>
  68:	mov	w9, #0x2820                	// #10272
  6c:	strh	w9, [x8], #2
  70:	ldr	x10, [x22, #32]
  74:	ldrb	w9, [x10]
  78:	cbz	w9, 8c <ss_name+0x8c>
  7c:	add	x10, x10, #0x1
  80:	strb	w9, [x8], #1
  84:	ldrb	w9, [x10], #1
  88:	cbnz	w9, 80 <ss_name+0x80>
  8c:	mov	w9, #0x29                  	// #41
  90:	strh	w9, [x8]
  94:	b	ac <ss_name+0xac>
  98:	add	w0, w20, #0x1
  9c:	bl	0 <malloc>
  a0:	cbz	x0, ac <ss_name+0xac>
  a4:	ldr	x1, [x22]
  a8:	bl	0 <strcpy>
  ac:	ldp	x20, x19, [sp, #32]
  b0:	ldp	x22, x21, [sp, #16]
  b4:	ldp	x29, x30, [sp], #48
  b8:	ret

00000000000000bc <ss_error>:
  bc:	sub	sp, sp, #0x120
  c0:	stp	x29, x30, [sp, #240]
  c4:	add	x29, sp, #0xf0
  c8:	mov	x8, #0xffffffffffffffd8    	// #-40
  cc:	mov	x9, sp
  d0:	sub	x10, x29, #0x68
  d4:	movk	x8, #0xff80, lsl #32
  d8:	add	x11, x29, #0x30
  dc:	add	x9, x9, #0x80
  e0:	add	x10, x10, #0x28
  e4:	stp	x28, x21, [sp, #256]
  e8:	stp	x20, x19, [sp, #272]
  ec:	mov	x19, x2
  f0:	mov	x20, x1
  f4:	stp	x3, x4, [x29, #-104]
  f8:	stp	x5, x6, [x29, #-88]
  fc:	stur	x7, [x29, #-72]
 100:	stp	q1, q2, [sp, #16]
 104:	stp	q3, q4, [sp, #48]
 108:	str	q0, [sp]
 10c:	stp	q5, q6, [sp, #80]
 110:	str	q7, [sp, #112]
 114:	stp	x9, x8, [x29, #-16]
 118:	stp	x11, x10, [x29, #-32]
 11c:	bl	0 <ss_name>
 120:	ldp	q0, q1, [x29, #-32]
 124:	sub	x3, x29, #0x40
 128:	mov	x1, x20
 12c:	mov	x2, x19
 130:	mov	x21, x0
 134:	stp	q0, q1, [x29, #-64]
 138:	bl	0 <com_err_va>
 13c:	mov	x0, x21
 140:	bl	0 <free>
 144:	ldp	x20, x19, [sp, #272]
 148:	ldp	x28, x21, [sp, #256]
 14c:	ldp	x29, x30, [sp, #240]
 150:	add	sp, sp, #0x120
 154:	ret

0000000000000158 <ss_perror>:
 158:	mov	x3, x2
 15c:	adrp	x2, 0 <ss_name>
 160:	add	x2, x2, #0x0
 164:	b	bc <ss_error>

prompt.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_set_prompt>:
   0:	adrp	x8, 0 <_ss_table>
   4:	ldr	x8, [x8]
   8:	ldr	x8, [x8, w0, sxtw #3]
   c:	str	x1, [x8, #56]
  10:	ret

0000000000000014 <ss_get_prompt>:
  14:	adrp	x8, 0 <_ss_table>
  18:	ldr	x8, [x8]
  1c:	ldr	x8, [x8, w0, sxtw #3]
  20:	ldr	x0, [x8, #56]
  24:	ret

request_tbl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_add_request_table>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	adrp	x9, 0 <_ss_table>
   8:	ldr	x9, [x9]
   c:	stp	x22, x21, [sp, #32]
  10:	stp	x20, x19, [sp, #48]
  14:	str	x23, [sp, #16]
  18:	ldr	x22, [x9, w0, sxtw #3]
  1c:	mov	x19, x3
  20:	mov	w21, w2
  24:	mov	x20, x1
  28:	ldr	x0, [x22, #64]
  2c:	mov	x8, xzr
  30:	mov	x23, #0xffffffffffffffff    	// #-1
  34:	mov	x29, sp
  38:	ldr	x9, [x0, x8]
  3c:	add	x23, x23, #0x1
  40:	add	x8, x8, #0x8
  44:	cbnz	x9, 38 <ss_add_request_table+0x38>
  48:	add	x8, x8, #0x8
  4c:	and	x1, x8, #0x7fffffff8
  50:	bl	0 <realloc>
  54:	cbz	x0, a0 <ss_add_request_table+0xa0>
  58:	cmp	w23, w21
  5c:	csel	w9, w23, w21, lt  // lt = tstop
  60:	and	x8, x23, #0xffffffff
  64:	sxtw	x9, w9
  68:	str	x0, [x22, #64]
  6c:	add	x10, x0, x8, lsl #3
  70:	ldr	x11, [x10]
  74:	cmp	x8, x9
  78:	sub	x8, x8, #0x1
  7c:	str	x11, [x10, #8]
  80:	ldr	x0, [x22, #64]
  84:	b.gt	6c <ss_add_request_table+0x6c>
  88:	str	x20, [x0, x9, lsl #3]
  8c:	ldr	x9, [x22, #64]
  90:	mov	w8, wzr
  94:	add	w10, w23, #0x1
  98:	str	xzr, [x9, w10, uxtw #3]
  9c:	b	a8 <ss_add_request_table+0xa8>
  a0:	bl	0 <__errno_location>
  a4:	ldr	w8, [x0]
  a8:	str	w8, [x19]
  ac:	ldp	x20, x19, [sp, #48]
  b0:	ldp	x22, x21, [sp, #32]
  b4:	ldr	x23, [sp, #16]
  b8:	ldp	x29, x30, [sp], #64
  bc:	ret

00000000000000c0 <ss_delete_request_table>:
  c0:	mov	w8, #0x6d08                	// #27912
  c4:	movk	w8, #0xb, lsl #16
  c8:	str	w8, [x2]
  cc:	adrp	x8, 0 <_ss_table>
  d0:	ldr	x8, [x8]
  d4:	ldr	x8, [x8, w0, sxtw #3]
  d8:	ldr	x8, [x8, #64]
  dc:	ldr	x10, [x8]
  e0:	cbz	x10, 100 <ss_delete_request_table+0x40>
  e4:	add	x9, x8, #0x8
  e8:	cmp	x10, x1
  ec:	b.eq	f8 <ss_delete_request_table+0x38>  // b.none
  f0:	str	x10, [x8], #8
  f4:	str	wzr, [x2]
  f8:	ldr	x10, [x9], #8
  fc:	cbnz	x10, e8 <ss_delete_request_table+0x28>
 100:	str	xzr, [x8]
 104:	ret

list_rqs.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_list_requests>:
   0:	sub	sp, sp, #0x170
   4:	add	x0, sp, #0x8
   8:	stp	x29, x30, [sp, #272]
   c:	stp	x28, x27, [sp, #288]
  10:	stp	x26, x25, [sp, #304]
  14:	stp	x24, x23, [sp, #320]
  18:	stp	x22, x21, [sp, #336]
  1c:	stp	x20, x19, [sp, #352]
  20:	add	x29, sp, #0x110
  24:	mov	w21, w2
  28:	bl	0 <sigemptyset>
  2c:	add	x0, sp, #0x8
  30:	mov	w1, #0x2                   	// #2
  34:	bl	0 <sigaddset>
  38:	add	x1, sp, #0x8
  3c:	add	x2, sp, #0x88
  40:	mov	w0, wzr
  44:	bl	0 <sigprocmask>
  48:	mov	w0, #0x2                   	// #2
  4c:	mov	w1, #0x1                   	// #1
  50:	bl	0 <signal>
  54:	mov	x19, x0
  58:	bl	0 <ss_pager_create>
  5c:	tbnz	w0, #31, 1c4 <ss_list_requests+0x1c4>
  60:	adrp	x1, 0 <ss_list_requests>
  64:	add	x1, x1, #0x0
  68:	bl	0 <fdopen>
  6c:	mov	x20, x0
  70:	add	x1, sp, #0x88
  74:	mov	w0, #0x2                   	// #2
  78:	mov	x2, xzr
  7c:	bl	0 <sigprocmask>
  80:	adrp	x22, 0 <_ss_table>
  84:	ldr	x8, [x22]
  88:	adrp	x1, 0 <ss_list_requests>
  8c:	add	x1, x1, #0x0
  90:	mov	x0, x20
  94:	ldr	x8, [x8, w21, sxtw #3]
  98:	ldr	x2, [x8]
  9c:	bl	0 <fprintf>
  a0:	ldr	x8, [x22]
  a4:	ldr	x8, [x8, w21, sxtw #3]
  a8:	ldr	x24, [x8, #64]
  ac:	ldr	x8, [x24]
  b0:	cbz	x8, 188 <ss_list_requests+0x188>
  b4:	adrp	x21, 0 <ss_list_requests>
  b8:	mov	w25, #0x19                  	// #25
  bc:	add	x21, x21, #0x0
  c0:	ldr	x26, [x8, #8]
  c4:	ldr	x8, [x26]
  c8:	cbz	x8, 180 <ss_list_requests+0x180>
  cc:	ldrb	w9, [x26, #24]
  d0:	tbnz	w9, #0, 178 <ss_list_requests+0x178>
  d4:	ldr	x22, [x8]
  d8:	cbz	x22, 13c <ss_list_requests+0x13c>
  dc:	add	x28, x8, #0x8
  e0:	mov	w27, #0xfffffffe            	// #-2
  e4:	mov	x0, x22
  e8:	bl	0 <strlen>
  ec:	mov	x23, x0
  f0:	mov	x0, x22
  f4:	mov	x1, x20
  f8:	bl	0 <fputs>
  fc:	ldr	x8, [x28]
 100:	add	w9, w27, w23
 104:	add	w27, w9, #0x2
 108:	cbz	x8, 120 <ss_list_requests+0x120>
 10c:	mov	x0, x21
 110:	mov	x1, x20
 114:	bl	0 <fputs>
 118:	ldr	x22, [x28], #8
 11c:	cbnz	x22, e4 <ss_list_requests+0xe4>
 120:	cmp	w27, #0x18
 124:	b.lt	140 <ss_list_requests+0x140>  // b.tstop
 128:	mov	w0, #0xa                   	// #10
 12c:	mov	x1, x20
 130:	bl	0 <fputc>
 134:	mov	w27, wzr
 138:	b	140 <ss_list_requests+0x140>
 13c:	mov	w27, #0xfffffffe            	// #-2
 140:	mov	w22, wzr
 144:	sub	w23, w25, w27
 148:	mov	w0, #0x20                  	// #32
 14c:	mov	x1, x20
 150:	bl	0 <fputc>
 154:	add	w22, w22, #0x1
 158:	cmp	w22, w23
 15c:	b.lt	148 <ss_list_requests+0x148>  // b.tstop
 160:	ldr	x0, [x26, #16]
 164:	mov	x1, x20
 168:	bl	0 <fputs>
 16c:	mov	w0, #0xa                   	// #10
 170:	mov	x1, x20
 174:	bl	0 <fputc>
 178:	ldr	x8, [x26, #32]!
 17c:	cbnz	x8, cc <ss_list_requests+0xcc>
 180:	ldr	x8, [x24, #8]!
 184:	cbnz	x8, c0 <ss_list_requests+0xc0>
 188:	mov	x0, x20
 18c:	bl	0 <fclose>
 190:	add	x0, sp, #0x4
 194:	bl	0 <wait>
 198:	mov	w0, #0x2                   	// #2
 19c:	mov	x1, x19
 1a0:	bl	0 <signal>
 1a4:	ldp	x20, x19, [sp, #352]
 1a8:	ldp	x22, x21, [sp, #336]
 1ac:	ldp	x24, x23, [sp, #320]
 1b0:	ldp	x26, x25, [sp, #304]
 1b4:	ldp	x28, x27, [sp, #288]
 1b8:	ldp	x29, x30, [sp, #272]
 1bc:	add	sp, sp, #0x170
 1c0:	ret
 1c4:	adrp	x0, 0 <ss_list_requests>
 1c8:	add	x0, x0, #0x0
 1cc:	bl	0 <perror>
 1d0:	b	198 <ss_list_requests+0x198>

pager.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_safe_getenv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	mov	x29, sp
   c:	mov	x19, x0
  10:	bl	0 <getuid>
  14:	mov	w20, w0
  18:	bl	0 <geteuid>
  1c:	cmp	w20, w0
  20:	b.ne	64 <ss_safe_getenv+0x64>  // b.any
  24:	bl	0 <getgid>
  28:	mov	w20, w0
  2c:	bl	0 <getegid>
  30:	cmp	w20, w0
  34:	b.ne	64 <ss_safe_getenv+0x64>  // b.any
  38:	mov	w0, #0x3                   	// #3
  3c:	mov	w1, wzr
  40:	mov	w2, wzr
  44:	mov	w3, wzr
  48:	mov	w4, wzr
  4c:	bl	0 <prctl>
  50:	cbz	w0, 64 <ss_safe_getenv+0x64>
  54:	mov	x0, x19
  58:	ldp	x20, x19, [sp, #16]
  5c:	ldp	x29, x30, [sp], #32
  60:	b	0 <secure_getenv>
  64:	ldp	x20, x19, [sp, #16]
  68:	mov	x0, xzr
  6c:	ldp	x29, x30, [sp], #32
  70:	ret

0000000000000074 <ss_pager_create>:
  74:	sub	sp, sp, #0x20
  78:	add	x0, sp, #0x8
  7c:	stp	x29, x30, [sp, #16]
  80:	add	x29, sp, #0x10
  84:	bl	0 <pipe>
  88:	cbz	w0, 94 <ss_pager_create+0x20>
  8c:	mov	w0, #0xffffffff            	// #-1
  90:	b	b0 <ss_pager_create+0x3c>
  94:	bl	0 <fork>
  98:	cmn	w0, #0x1
  9c:	b.eq	b0 <ss_pager_create+0x3c>  // b.none
  a0:	cbz	w0, bc <ss_pager_create+0x48>
  a4:	ldr	w0, [sp, #8]
  a8:	bl	0 <close>
  ac:	ldr	w0, [sp, #12]
  b0:	ldp	x29, x30, [sp, #16]
  b4:	add	sp, sp, #0x20
  b8:	ret
  bc:	ldr	w0, [sp, #8]
  c0:	mov	w1, wzr
  c4:	bl	0 <dup2>
  c8:	cmn	w0, #0x1
  cc:	b.ne	d8 <ss_pager_create+0x64>  // b.any
  d0:	mov	w0, #0x1                   	// #1
  d4:	bl	0 <exit>
  d8:	bl	dc <ss_page_stdin>

00000000000000dc <ss_page_stdin>:
  dc:	sub	sp, sp, #0x100
  e0:	stp	x20, x19, [sp, #240]
  e4:	mov	w19, #0x3                   	// #3
  e8:	stp	x29, x30, [sp, #208]
  ec:	str	x21, [sp, #224]
  f0:	add	x29, sp, #0xd0
  f4:	mov	w0, w19
  f8:	bl	0 <close>
  fc:	add	w19, w19, #0x1
 100:	cmp	w19, #0x20
 104:	b.ne	f4 <ss_page_stdin+0x18>  // b.any
 108:	mov	w0, #0x2                   	// #2
 10c:	mov	x1, xzr
 110:	bl	0 <signal>
 114:	add	x2, sp, #0x50
 118:	mov	w0, wzr
 11c:	mov	x1, xzr
 120:	bl	0 <sigprocmask>
 124:	add	x0, sp, #0x50
 128:	mov	w1, #0x2                   	// #2
 12c:	bl	0 <sigdelset>
 130:	add	x1, sp, #0x50
 134:	mov	w0, #0x2                   	// #2
 138:	mov	x2, xzr
 13c:	bl	0 <sigprocmask>
 140:	adrp	x19, 0 <_ss_pager_name>
 144:	ldr	x0, [x19]
 148:	cbnz	x0, 16c <ss_page_stdin+0x90>
 14c:	adrp	x0, 0 <ss_safe_getenv>
 150:	add	x0, x0, #0x0
 154:	bl	0 <ss_safe_getenv>
 158:	adrp	x8, 0 <ss_safe_getenv>
 15c:	add	x8, x8, #0x0
 160:	cmp	x0, #0x0
 164:	csel	x0, x8, x0, eq  // eq = none
 168:	str	x0, [x19]
 16c:	mov	x1, x0
 170:	mov	x2, xzr
 174:	bl	0 <execlp>
 178:	mov	x1, sp
 17c:	mov	w2, #0x50                  	// #80
 180:	mov	w0, wzr
 184:	bl	0 <read>
 188:	cmp	w0, #0x1
 18c:	b.lt	208 <ss_page_stdin+0x12c>  // b.tstop
 190:	lsl	x8, x0, #32
 194:	cbz	x8, 1f0 <ss_page_stdin+0x114>
 198:	mov	x19, sp
 19c:	asr	x20, x8, #32
 1a0:	mov	w0, #0x1                   	// #1
 1a4:	mov	x1, x19
 1a8:	mov	x2, x20
 1ac:	bl	0 <write>
 1b0:	tbz	x0, #63, 1e4 <ss_page_stdin+0x108>
 1b4:	bl	0 <__errno_location>
 1b8:	mov	x21, x0
 1bc:	ldr	w8, [x21]
 1c0:	cmp	w8, #0xb
 1c4:	b.eq	1d0 <ss_page_stdin+0xf4>  // b.none
 1c8:	cmp	w8, #0x4
 1cc:	b.ne	1f0 <ss_page_stdin+0x114>  // b.any
 1d0:	mov	w0, #0x1                   	// #1
 1d4:	mov	x1, x19
 1d8:	mov	x2, x20
 1dc:	bl	0 <write>
 1e0:	tbnz	x0, #63, 1bc <ss_page_stdin+0xe0>
 1e4:	subs	x20, x20, x0
 1e8:	add	x19, x19, x0
 1ec:	b.ne	1a0 <ss_page_stdin+0xc4>  // b.any
 1f0:	mov	x1, sp
 1f4:	mov	w2, #0x50                  	// #80
 1f8:	mov	w0, wzr
 1fc:	bl	0 <read>
 200:	cmp	w0, #0x0
 204:	b.gt	190 <ss_page_stdin+0xb4>
 208:	bl	0 <__errno_location>
 20c:	ldr	w0, [x0]
 210:	bl	0 <exit>

requests.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_self_identify>:
   0:	adrp	x8, 0 <_ss_table>
   4:	ldr	x8, [x8]
   8:	adrp	x0, 0 <ss_self_identify>
   c:	add	x0, x0, #0x0
  10:	ldr	x8, [x8, w2, sxtw #3]
  14:	ldp	x1, x2, [x8]
  18:	b	0 <printf>

000000000000001c <ss_subsystem_name>:
  1c:	adrp	x8, 0 <_ss_table>
  20:	ldr	x8, [x8]
  24:	ldr	x8, [x8, w2, sxtw #3]
  28:	ldr	x0, [x8]
  2c:	b	0 <puts>

0000000000000030 <ss_subsystem_version>:
  30:	adrp	x8, 0 <_ss_table>
  34:	ldr	x8, [x8]
  38:	ldr	x8, [x8, w2, sxtw #3]
  3c:	ldr	x0, [x8, #8]
  40:	b	0 <puts>

0000000000000044 <ss_unimplemented>:
  44:	adrp	x8, 0 <ss_self_identify>
  48:	add	x8, x8, #0x0
  4c:	mov	w1, #0x6d0b                	// #27915
  50:	movk	w1, #0xb, lsl #16
  54:	mov	w0, w2
  58:	mov	x2, x8
  5c:	b	0 <ss_perror>

data.o:     file format elf64-littleaarch64


get_readline.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_get_readline>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	stp	x22, x21, [sp, #16]
   8:	stp	x20, x19, [sp, #32]
   c:	adrp	x8, 0 <_ss_table>
  10:	ldr	x8, [x8]
  14:	mov	x29, sp
  18:	ldr	x22, [x8, w0, sxtw #3]
  1c:	ldr	x8, [x22, #88]
  20:	cbz	x8, 34 <ss_get_readline+0x34>
  24:	ldp	x20, x19, [sp, #32]
  28:	ldp	x22, x21, [sp, #16]
  2c:	ldp	x29, x30, [sp], #48
  30:	ret
  34:	adrp	x0, 0 <ss_get_readline>
  38:	add	x0, x0, #0x0
  3c:	bl	0 <ss_safe_getenv>
  40:	adrp	x8, 0 <ss_get_readline>
  44:	add	x8, x8, #0x0
  48:	cmp	x0, #0x0
  4c:	csel	x20, x8, x0, eq  // eq = none
  50:	ldrb	w8, [x20]
  54:	cbz	w8, 24 <ss_get_readline+0x24>
  58:	adrp	x1, 0 <ss_get_readline>
  5c:	add	x1, x1, #0x0
  60:	mov	x0, x20
  64:	bl	0 <strcmp>
  68:	cbz	w0, 24 <ss_get_readline+0x24>
  6c:	mov	x0, x20
  70:	bl	0 <strlen>
  74:	add	x0, x0, #0x1
  78:	bl	0 <malloc>
  7c:	cbz	x0, 24 <ss_get_readline+0x24>
  80:	mov	x1, x20
  84:	mov	x19, x0
  88:	bl	0 <strcpy>
  8c:	mov	x20, x0
  90:	mov	w1, #0x3a                  	// #58
  94:	mov	x0, x20
  98:	bl	0 <strchr>
  9c:	mov	x21, x0
  a0:	cbz	x0, a8 <ss_get_readline+0xa8>
  a4:	strb	wzr, [x21], #1
  a8:	ldrb	w8, [x20]
  ac:	cbz	w8, c0 <ss_get_readline+0xc0>
  b0:	mov	w1, #0x2                   	// #2
  b4:	mov	x0, x20
  b8:	bl	0 <dlopen>
  bc:	cbnz	x0, dc <ss_get_readline+0xdc>
  c0:	mov	x20, x21
  c4:	cbnz	x21, 90 <ss_get_readline+0x90>
  c8:	mov	x0, x19
  cc:	ldp	x20, x19, [sp, #32]
  d0:	ldp	x22, x21, [sp, #16]
  d4:	ldp	x29, x30, [sp], #48
  d8:	b	0 <free>
  dc:	mov	x20, x0
  e0:	mov	x0, x19
  e4:	bl	0 <free>
  e8:	adrp	x1, 0 <ss_get_readline>
  ec:	add	x1, x1, #0x0
  f0:	mov	x0, x20
  f4:	str	x20, [x22, #88]
  f8:	bl	0 <dlsym>
  fc:	adrp	x1, 0 <ss_get_readline>
 100:	str	x0, [x22, #104]
 104:	add	x1, x1, #0x0
 108:	mov	x0, x20
 10c:	bl	0 <dlsym>
 110:	adrp	x1, 0 <ss_get_readline>
 114:	str	x0, [x22, #112]
 118:	add	x1, x1, #0x0
 11c:	mov	x0, x20
 120:	bl	0 <dlsym>
 124:	adrp	x1, 0 <ss_get_readline>
 128:	str	x0, [x22, #120]
 12c:	add	x1, x1, #0x0
 130:	mov	x0, x20
 134:	bl	0 <dlsym>
 138:	adrp	x1, 0 <ss_get_readline>
 13c:	str	x0, [x22, #128]
 140:	add	x1, x1, #0x0
 144:	mov	x0, x20
 148:	bl	0 <dlsym>
 14c:	cbz	x0, 158 <ss_get_readline+0x158>
 150:	ldr	x8, [x22]
 154:	str	x8, [x0]
 158:	adrp	x1, 0 <ss_get_readline>
 15c:	add	x1, x1, #0x0
 160:	mov	x0, x20
 164:	bl	0 <dlsym>
 168:	cbz	x0, 178 <ss_get_readline+0x178>
 16c:	adrp	x8, 0 <ss_rl_completion>
 170:	add	x8, x8, #0x0
 174:	str	x8, [x0]
 178:	adrp	x8, 0 <ss_get_readline>
 17c:	add	x8, x8, #0x0
 180:	str	x8, [x22, #96]
 184:	b	24 <ss_get_readline+0x24>

0000000000000188 <ss_release_readline>:
 188:	stp	x29, x30, [sp, #-32]!
 18c:	str	x19, [sp, #16]
 190:	mov	x19, x0
 194:	ldr	x0, [x0, #88]
 198:	mov	x29, sp
 19c:	cbz	x0, 1b4 <ss_release_readline+0x2c>
 1a0:	movi	v0.2d, #0x0
 1a4:	stur	q0, [x19, #120]
 1a8:	stur	q0, [x19, #104]
 1ac:	bl	0 <dlclose>
 1b0:	str	xzr, [x19, #88]
 1b4:	ldr	x19, [sp, #16]
 1b8:	ldp	x29, x30, [sp], #32
 1bc:	ret
