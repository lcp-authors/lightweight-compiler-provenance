
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//affs.module_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_swap_bytes32>:
       0:	sub	sp, sp, #0x10
       4:	str	w0, [sp, #12]
       8:	ldr	w0, [sp, #12]
       c:	rev	w0, w0
      10:	add	sp, sp, #0x10
      14:	ret

0000000000000018 <grub_fs_register>:
      18:	stp	x29, x30, [sp, #-32]!
      1c:	mov	x29, sp
      20:	str	x0, [sp, #24]
      24:	ldr	x1, [sp, #24]
      28:	adrp	x0, 0 <grub_swap_bytes32>
      2c:	add	x0, x0, #0x0
      30:	ldr	x0, [x0]
      34:	bl	0 <grub_list_push>
      38:	nop
      3c:	ldp	x29, x30, [sp], #32
      40:	ret
      44:	nop
	...

0000000000000050 <grub_fs_unregister>:
      50:	stp	x29, x30, [sp, #-32]!
      54:	mov	x29, sp
      58:	str	x0, [sp, #24]
      5c:	ldr	x0, [sp, #24]
      60:	bl	0 <grub_list_remove>
      64:	nop
      68:	ldp	x29, x30, [sp], #32
      6c:	ret

0000000000000070 <grub_memcpy>:
      70:	stp	x29, x30, [sp, #-48]!
      74:	mov	x29, sp
      78:	str	x0, [sp, #40]
      7c:	str	x1, [sp, #32]
      80:	str	x2, [sp, #24]
      84:	ldr	x2, [sp, #24]
      88:	ldr	x1, [sp, #32]
      8c:	ldr	x0, [sp, #40]
      90:	bl	0 <grub_memmove>
      94:	ldp	x29, x30, [sp], #48
      98:	ret

000000000000009c <grub_latin1_to_utf8>:
      9c:	sub	sp, sp, #0x20
      a0:	str	x0, [sp, #24]
      a4:	str	x1, [sp, #16]
      a8:	str	x2, [sp, #8]
      ac:	b	144 <grub_latin1_to_utf8+0xa8>
      b0:	ldr	x0, [sp, #16]
      b4:	ldrb	w0, [x0]
      b8:	sxtb	w0, w0
      bc:	cmp	w0, #0x0
      c0:	b.lt	e0 <grub_latin1_to_utf8+0x44>  // b.tstop
      c4:	ldr	x0, [sp, #24]
      c8:	add	x1, x0, #0x1
      cc:	str	x1, [sp, #24]
      d0:	ldr	x1, [sp, #16]
      d4:	ldrb	w1, [x1]
      d8:	strb	w1, [x0]
      dc:	b	138 <grub_latin1_to_utf8+0x9c>
      e0:	ldr	x0, [sp, #16]
      e4:	ldrb	w0, [x0]
      e8:	lsr	w0, w0, #6
      ec:	and	w1, w0, #0xff
      f0:	ldr	x0, [sp, #24]
      f4:	add	x2, x0, #0x1
      f8:	str	x2, [sp, #24]
      fc:	orr	w1, w1, #0xffffffc0
     100:	and	w1, w1, #0xff
     104:	strb	w1, [x0]
     108:	ldr	x0, [sp, #16]
     10c:	ldrb	w0, [x0]
     110:	sxtb	w0, w0
     114:	and	w0, w0, #0x3f
     118:	sxtb	w0, w0
     11c:	orr	w0, w0, #0xffffff80
     120:	sxtb	w2, w0
     124:	ldr	x0, [sp, #24]
     128:	add	x1, x0, #0x1
     12c:	str	x1, [sp, #24]
     130:	and	w1, w2, #0xff
     134:	strb	w1, [x0]
     138:	ldr	x0, [sp, #16]
     13c:	add	x0, x0, #0x1
     140:	str	x0, [sp, #16]
     144:	ldr	x0, [sp, #8]
     148:	sub	x1, x0, #0x1
     14c:	str	x1, [sp, #8]
     150:	cmp	x0, #0x0
     154:	b.ne	b0 <grub_latin1_to_utf8+0x14>  // b.any
     158:	ldr	x0, [sp, #24]
     15c:	add	sp, sp, #0x20
     160:	ret

0000000000000164 <grub_affs_read_block>:
     164:	stp	x29, x30, [sp, #-288]!
     168:	mov	x29, sp
     16c:	str	x19, [sp, #16]
     170:	str	x0, [sp, #40]
     174:	str	x1, [sp, #32]
     178:	ldr	x0, [sp, #40]
     17c:	ldr	x0, [x0]
     180:	str	x0, [sp, #272]
     184:	ldr	x0, [sp, #40]
     188:	ldr	x0, [x0, #224]
     18c:	cmp	x0, #0x0
     190:	b.ne	214 <grub_affs_read_block+0xb0>  // b.any
     194:	ldr	x0, [sp, #40]
     198:	ldr	w0, [x0, #36]
     19c:	bl	0 <grub_swap_bytes32>
     1a0:	mov	w1, w0
     1a4:	ldr	x0, [sp, #40]
     1a8:	ldr	x0, [x0]
     1ac:	ldr	w0, [x0, #264]
     1b0:	add	w0, w0, #0x9
     1b4:	lsr	w1, w1, w0
     1b8:	ldr	x0, [sp, #272]
     1bc:	ldr	w0, [x0, #268]
     1c0:	udiv	w0, w1, w0
     1c4:	add	w0, w0, #0x2
     1c8:	mov	w0, w0
     1cc:	lsl	x0, x0, #2
     1d0:	bl	0 <grub_malloc>
     1d4:	mov	x1, x0
     1d8:	ldr	x0, [sp, #40]
     1dc:	str	x1, [x0, #224]
     1e0:	ldr	x0, [sp, #40]
     1e4:	ldr	x0, [x0, #224]
     1e8:	cmp	x0, #0x0
     1ec:	b.ne	1f8 <grub_affs_read_block+0x94>  // b.any
     1f0:	mov	x0, #0xffffffffffffffff    	// #-1
     1f4:	b	3c4 <grub_affs_read_block+0x260>
     1f8:	ldr	x0, [sp, #40]
     1fc:	str	wzr, [x0, #232]
     200:	ldr	x0, [sp, #40]
     204:	ldr	x0, [x0, #224]
     208:	ldr	x1, [sp, #40]
     20c:	ldr	w1, [x1, #8]
     210:	str	w1, [x0]
     214:	ldr	x0, [sp, #32]
     218:	mov	w1, w0
     21c:	ldr	x0, [sp, #272]
     220:	ldr	w0, [x0, #268]
     224:	udiv	w0, w1, w0
     228:	str	w0, [sp, #268]
     22c:	ldr	x0, [sp, #32]
     230:	mov	w1, w0
     234:	ldr	x0, [sp, #272]
     238:	ldr	w0, [x0, #268]
     23c:	udiv	w2, w1, w0
     240:	mul	w0, w2, w0
     244:	sub	w0, w1, w0
     248:	mov	w0, w0
     24c:	str	x0, [sp, #256]
     250:	ldr	x0, [sp, #40]
     254:	ldr	w0, [x0, #232]
     258:	add	w0, w0, #0x1
     25c:	str	w0, [sp, #284]
     260:	b	31c <grub_affs_read_block+0x1b8>
     264:	ldr	x0, [sp, #272]
     268:	ldr	x5, [x0, #256]
     26c:	ldr	x0, [sp, #40]
     270:	ldr	x1, [x0, #224]
     274:	ldr	w0, [sp, #284]
     278:	sub	w0, w0, #0x1
     27c:	mov	w0, w0
     280:	lsl	x0, x0, #2
     284:	add	x0, x1, x0
     288:	ldr	w0, [x0]
     28c:	mov	w0, w0
     290:	add	x1, x0, #0x1
     294:	ldr	x0, [sp, #272]
     298:	ldr	w0, [x0, #264]
     29c:	lsl	x0, x1, x0
     2a0:	sub	x0, x0, #0x1
     2a4:	add	x1, sp, #0x30
     2a8:	mov	x4, x1
     2ac:	mov	x3, #0xc8                  	// #200
     2b0:	mov	x2, #0x138                 	// #312
     2b4:	mov	x1, x0
     2b8:	mov	x0, x5
     2bc:	bl	0 <grub_disk_read>
     2c0:	adrp	x0, 0 <grub_swap_bytes32>
     2c4:	add	x0, x0, #0x0
     2c8:	ldr	x0, [x0]
     2cc:	ldr	w0, [x0]
     2d0:	cmp	w0, #0x0
     2d4:	b.eq	2e0 <grub_affs_read_block+0x17c>  // b.none
     2d8:	mov	x0, #0x0                   	// #0
     2dc:	b	3c4 <grub_affs_read_block+0x260>
     2e0:	ldr	w2, [sp, #240]
     2e4:	ldr	x0, [sp, #40]
     2e8:	ldr	x1, [x0, #224]
     2ec:	ldr	w0, [sp, #284]
     2f0:	lsl	x0, x0, #2
     2f4:	add	x19, x1, x0
     2f8:	mov	w0, w2
     2fc:	bl	0 <grub_swap_bytes32>
     300:	str	w0, [x19]
     304:	ldr	x0, [sp, #40]
     308:	ldr	w1, [sp, #284]
     30c:	str	w1, [x0, #232]
     310:	ldr	w0, [sp, #284]
     314:	add	w0, w0, #0x1
     318:	str	w0, [sp, #284]
     31c:	ldr	w0, [sp, #268]
     320:	add	w0, w0, #0x1
     324:	ldr	w1, [sp, #284]
     328:	cmp	w1, w0
     32c:	b.cc	264 <grub_affs_read_block+0x100>  // b.lo, b.ul, b.last
     330:	ldr	x0, [sp, #272]
     334:	ldr	x5, [x0, #256]
     338:	ldr	x0, [sp, #40]
     33c:	ldr	x1, [x0, #224]
     340:	ldr	w0, [sp, #268]
     344:	lsl	x0, x0, #2
     348:	add	x0, x1, x0
     34c:	ldr	w0, [x0]
     350:	mov	w1, w0
     354:	ldr	x0, [sp, #272]
     358:	ldr	w0, [x0, #264]
     35c:	lsl	x6, x1, x0
     360:	ldr	x0, [sp, #272]
     364:	ldr	w0, [x0, #268]
     368:	mov	w1, w0
     36c:	ldr	x0, [sp, #256]
     370:	sub	x0, x1, x0
     374:	add	x0, x0, #0x5
     378:	lsl	x0, x0, #2
     37c:	add	x1, sp, #0xfc
     380:	mov	x4, x1
     384:	mov	x3, #0x4                   	// #4
     388:	mov	x2, x0
     38c:	mov	x1, x6
     390:	mov	x0, x5
     394:	bl	0 <grub_disk_read>
     398:	adrp	x0, 0 <grub_swap_bytes32>
     39c:	add	x0, x0, #0x0
     3a0:	ldr	x0, [x0]
     3a4:	ldr	w0, [x0]
     3a8:	cmp	w0, #0x0
     3ac:	b.eq	3b8 <grub_affs_read_block+0x254>  // b.none
     3b0:	mov	x0, #0x0                   	// #0
     3b4:	b	3c4 <grub_affs_read_block+0x260>
     3b8:	ldr	w0, [sp, #252]
     3bc:	bl	0 <grub_swap_bytes32>
     3c0:	mov	w0, w0
     3c4:	ldr	x19, [sp, #16]
     3c8:	ldp	x29, x30, [sp], #288
     3cc:	ret
	...

00000000000003d8 <grub_affs_mount>:
     3d8:	stp	x29, x30, [sp, #-80]!
     3dc:	mov	x29, sp
     3e0:	str	x0, [sp, #24]
     3e4:	str	xzr, [sp, #72]
     3e8:	str	xzr, [sp, #48]
     3ec:	str	wzr, [sp, #68]
     3f0:	str	wzr, [sp, #64]
     3f4:	mov	x0, #0x110                 	// #272
     3f8:	bl	0 <grub_zalloc>
     3fc:	str	x0, [sp, #40]
     400:	ldr	x0, [sp, #40]
     404:	cmp	x0, #0x0
     408:	b.ne	414 <grub_affs_mount+0x3c>  // b.any
     40c:	mov	x0, #0x0                   	// #0
     410:	b	738 <grub_affs_mount+0x360>
     414:	str	wzr, [sp, #64]
     418:	b	6bc <grub_affs_mount+0x2e4>
     41c:	ldrsw	x0, [sp, #64]
     420:	ldr	x1, [sp, #40]
     424:	mov	x4, x1
     428:	mov	x3, #0xc                   	// #12
     42c:	mov	x2, #0x0                   	// #0
     430:	mov	x1, x0
     434:	ldr	x0, [sp, #24]
     438:	bl	0 <grub_disk_read>
     43c:	adrp	x0, 0 <grub_swap_bytes32>
     440:	add	x0, x0, #0x0
     444:	ldr	x0, [x0]
     448:	ldr	w0, [x0]
     44c:	cmp	w0, #0x0
     450:	b.ne	6cc <grub_affs_mount+0x2f4>  // b.any
     454:	ldr	x3, [sp, #40]
     458:	mov	x2, #0x3                   	// #3
     45c:	adrp	x0, 0 <grub_swap_bytes32>
     460:	add	x0, x0, #0x0
     464:	ldr	x1, [x0]
     468:	mov	x0, x3
     46c:	bl	0 <grub_strncmp>
     470:	cmp	w0, #0x0
     474:	b.ne	6ac <grub_affs_mount+0x2d4>  // b.any
     478:	ldr	x0, [sp, #40]
     47c:	ldrb	w0, [x0, #3]
     480:	and	w0, w0, #0x1
     484:	cmp	w0, #0x0
     488:	b.eq	6ac <grub_affs_mount+0x2d4>  // b.none
     48c:	ldr	x0, [sp, #72]
     490:	cmp	x0, #0x0
     494:	b.ne	4a4 <grub_affs_mount+0xcc>  // b.any
     498:	mov	x0, #0x2000                	// #8192
     49c:	bl	0 <grub_malloc>
     4a0:	str	x0, [sp, #72]
     4a4:	ldr	x0, [sp, #72]
     4a8:	cmp	x0, #0x0
     4ac:	b.eq	6d4 <grub_affs_mount+0x2fc>  // b.none
     4b0:	ldr	x0, [sp, #72]
     4b4:	str	x0, [sp, #48]
     4b8:	str	wzr, [sp, #68]
     4bc:	b	69c <grub_affs_mount+0x2c4>
     4c0:	ldr	x0, [sp, #72]
     4c4:	str	x0, [sp, #32]
     4c8:	str	wzr, [sp, #56]
     4cc:	ldr	x0, [sp, #40]
     4d0:	ldr	w0, [x0, #8]
     4d4:	bl	0 <grub_swap_bytes32>
     4d8:	mov	w1, w0
     4dc:	ldr	w0, [sp, #68]
     4e0:	lsl	x5, x1, x0
     4e4:	ldr	w0, [sp, #68]
     4e8:	mov	w1, #0x200                 	// #512
     4ec:	lsl	w0, w1, w0
     4f0:	sxtw	x0, w0
     4f4:	ldr	x4, [sp, #72]
     4f8:	mov	x3, x0
     4fc:	mov	x2, #0x0                   	// #0
     500:	mov	x1, x5
     504:	ldr	x0, [sp, #24]
     508:	bl	0 <grub_disk_read>
     50c:	adrp	x0, 0 <grub_swap_bytes32>
     510:	add	x0, x0, #0x0
     514:	ldr	x0, [x0]
     518:	ldr	w0, [x0]
     51c:	cmp	w0, #0xb
     520:	b.ne	538 <grub_affs_mount+0x160>  // b.any
     524:	adrp	x0, 0 <grub_swap_bytes32>
     528:	add	x0, x0, #0x0
     52c:	ldr	x0, [x0]
     530:	str	wzr, [x0]
     534:	b	6b0 <grub_affs_mount+0x2d8>
     538:	adrp	x0, 0 <grub_swap_bytes32>
     53c:	add	x0, x0, #0x0
     540:	ldr	x0, [x0]
     544:	ldr	w0, [x0]
     548:	cmp	w0, #0x0
     54c:	b.ne	6dc <grub_affs_mount+0x304>  // b.any
     550:	ldr	x0, [sp, #48]
     554:	ldr	w1, [x0]
     558:	mov	w0, #0x2000000             	// #33554432
     55c:	cmp	w1, w0
     560:	b.ne	68c <grub_affs_mount+0x2b4>  // b.any
     564:	ldr	x0, [sp, #48]
     568:	ldr	w0, [x0, #12]
     56c:	cmp	w0, #0x0
     570:	b.eq	68c <grub_affs_mount+0x2b4>  // b.none
     574:	ldr	w0, [sp, #68]
     578:	mov	w1, #0x200                 	// #512
     57c:	lsl	w0, w1, w0
     580:	sxtw	x0, w0
     584:	and	x0, x0, #0xfffffffffffffffc
     588:	sub	x0, x0, #0x4
     58c:	ldr	x1, [sp, #32]
     590:	add	x0, x1, x0
     594:	ldr	w1, [x0]
     598:	mov	w0, #0x1000000             	// #16777216
     59c:	cmp	w1, w0
     5a0:	b.ne	68c <grub_affs_mount+0x2b4>  // b.any
     5a4:	str	wzr, [sp, #60]
     5a8:	b	5e0 <grub_affs_mount+0x208>
     5ac:	ldr	w0, [sp, #60]
     5b0:	lsl	x0, x0, #2
     5b4:	ldr	x1, [sp, #32]
     5b8:	add	x0, x1, x0
     5bc:	ldr	w0, [x0]
     5c0:	bl	0 <grub_swap_bytes32>
     5c4:	mov	w1, w0
     5c8:	ldr	w0, [sp, #56]
     5cc:	add	w0, w0, w1
     5d0:	str	w0, [sp, #56]
     5d4:	ldr	w0, [sp, #60]
     5d8:	add	w0, w0, #0x1
     5dc:	str	w0, [sp, #60]
     5e0:	ldr	w1, [sp, #60]
     5e4:	ldr	w0, [sp, #68]
     5e8:	mov	w2, #0x200                 	// #512
     5ec:	lsl	w0, w2, w0
     5f0:	sxtw	x0, w0
     5f4:	lsr	x0, x0, #2
     5f8:	cmp	x1, x0
     5fc:	b.cc	5ac <grub_affs_mount+0x1d4>  // b.lo, b.ul, b.last
     600:	ldr	w0, [sp, #56]
     604:	cmp	w0, #0x0
     608:	b.ne	690 <grub_affs_mount+0x2b8>  // b.any
     60c:	ldr	x0, [sp, #40]
     610:	ldr	w1, [sp, #68]
     614:	str	w1, [x0, #264]
     618:	ldr	x0, [sp, #40]
     61c:	ldr	x1, [sp, #24]
     620:	str	x1, [x0, #256]
     624:	ldr	x0, [sp, #48]
     628:	ldr	w0, [x0, #12]
     62c:	bl	0 <grub_swap_bytes32>
     630:	mov	w1, w0
     634:	ldr	x0, [sp, #40]
     638:	str	w1, [x0, #268]
     63c:	ldr	x0, [sp, #40]
     640:	ldr	x1, [sp, #40]
     644:	str	x1, [x0, #16]
     648:	ldr	x0, [sp, #40]
     64c:	ldr	w0, [x0, #8]
     650:	bl	0 <grub_swap_bytes32>
     654:	mov	w1, w0
     658:	ldr	x0, [sp, #40]
     65c:	str	w1, [x0, #24]
     660:	ldr	x0, [sp, #40]
     664:	str	xzr, [x0, #32]
     668:	ldr	x0, [sp, #40]
     66c:	add	x0, x0, #0x28
     670:	mov	x2, #0xc8                  	// #200
     674:	ldr	x1, [sp, #72]
     678:	bl	70 <grub_memcpy>
     67c:	ldr	x0, [sp, #72]
     680:	bl	0 <grub_free>
     684:	ldr	x0, [sp, #40]
     688:	b	738 <grub_affs_mount+0x360>
     68c:	nop
     690:	ldr	w0, [sp, #68]
     694:	add	w0, w0, #0x1
     698:	str	w0, [sp, #68]
     69c:	ldr	w0, [sp, #68]
     6a0:	cmp	w0, #0x4
     6a4:	b.le	4c0 <grub_affs_mount+0xe8>
     6a8:	b	6b0 <grub_affs_mount+0x2d8>
     6ac:	nop
     6b0:	ldr	w0, [sp, #64]
     6b4:	add	w0, w0, #0x1
     6b8:	str	w0, [sp, #64]
     6bc:	ldr	w0, [sp, #64]
     6c0:	cmp	w0, #0x1
     6c4:	b.le	41c <grub_affs_mount+0x44>
     6c8:	b	6e0 <grub_affs_mount+0x308>
     6cc:	nop
     6d0:	b	6e0 <grub_affs_mount+0x308>
     6d4:	nop
     6d8:	b	6e0 <grub_affs_mount+0x308>
     6dc:	nop
     6e0:	adrp	x0, 0 <grub_swap_bytes32>
     6e4:	add	x0, x0, #0x0
     6e8:	ldr	x0, [x0]
     6ec:	ldr	w0, [x0]
     6f0:	cmp	w0, #0x0
     6f4:	b.eq	710 <grub_affs_mount+0x338>  // b.none
     6f8:	adrp	x0, 0 <grub_swap_bytes32>
     6fc:	add	x0, x0, #0x0
     700:	ldr	x0, [x0]
     704:	ldr	w0, [x0]
     708:	cmp	w0, #0xb
     70c:	b.ne	724 <grub_affs_mount+0x34c>  // b.any
     710:	adrp	x0, 0 <grub_swap_bytes32>
     714:	add	x0, x0, #0x0
     718:	ldr	x1, [x0]
     71c:	mov	w0, #0x9                   	// #9
     720:	bl	0 <grub_error>
     724:	ldr	x0, [sp, #40]
     728:	bl	0 <grub_free>
     72c:	ldr	x0, [sp, #72]
     730:	bl	0 <grub_free>
     734:	mov	x0, #0x0                   	// #0
     738:	ldp	x29, x30, [sp], #80
     73c:	ret
	...

0000000000000758 <grub_affs_read_symlink>:
     758:	stp	x29, x30, [sp, #-64]!
     75c:	mov	x29, sp
     760:	str	x0, [sp, #24]
     764:	ldr	x0, [sp, #24]
     768:	ldr	x0, [x0]
     76c:	str	x0, [sp, #56]
     770:	ldr	x0, [sp, #56]
     774:	ldr	w0, [x0, #264]
     778:	mov	w1, #0x200                 	// #512
     77c:	lsl	w0, w1, w0
     780:	sub	w0, w0, #0x18
     784:	sxtw	x0, w0
     788:	str	x0, [sp, #48]
     78c:	ldr	x0, [sp, #48]
     790:	add	x0, x0, #0x1
     794:	bl	0 <grub_malloc>
     798:	str	x0, [sp, #40]
     79c:	ldr	x0, [sp, #40]
     7a0:	cmp	x0, #0x0
     7a4:	b.ne	7b0 <grub_affs_read_symlink+0x58>  // b.any
     7a8:	mov	x0, #0x0                   	// #0
     7ac:	b	8bc <grub_affs_read_symlink+0x164>
     7b0:	ldr	x0, [sp, #56]
     7b4:	ldr	x5, [x0, #256]
     7b8:	ldr	x0, [sp, #24]
     7bc:	ldr	w0, [x0, #8]
     7c0:	mov	w1, w0
     7c4:	ldr	x0, [sp, #56]
     7c8:	ldr	w0, [x0, #264]
     7cc:	lsl	x0, x1, x0
     7d0:	ldr	x4, [sp, #40]
     7d4:	ldr	x3, [sp, #48]
     7d8:	mov	x2, #0x18                  	// #24
     7dc:	mov	x1, x0
     7e0:	mov	x0, x5
     7e4:	bl	0 <grub_disk_read>
     7e8:	adrp	x0, 0 <grub_swap_bytes32>
     7ec:	add	x0, x0, #0x0
     7f0:	ldr	x0, [x0]
     7f4:	ldr	w0, [x0]
     7f8:	cmp	w0, #0x0
     7fc:	b.eq	810 <grub_affs_read_symlink+0xb8>  // b.none
     800:	ldr	x0, [sp, #40]
     804:	bl	0 <grub_free>
     808:	mov	x0, #0x0                   	// #0
     80c:	b	8bc <grub_affs_read_symlink+0x164>
     810:	ldr	x1, [sp, #40]
     814:	ldr	x0, [sp, #48]
     818:	add	x0, x1, x0
     81c:	strb	wzr, [x0]
     820:	ldr	x0, [sp, #48]
     824:	lsl	x0, x0, #1
     828:	add	x0, x0, #0x1
     82c:	bl	0 <grub_malloc>
     830:	str	x0, [sp, #32]
     834:	ldr	x0, [sp, #32]
     838:	cmp	x0, #0x0
     83c:	b.ne	850 <grub_affs_read_symlink+0xf8>  // b.any
     840:	ldr	x0, [sp, #40]
     844:	bl	0 <grub_free>
     848:	mov	x0, #0x0                   	// #0
     84c:	b	8bc <grub_affs_read_symlink+0x164>
     850:	ldr	x2, [sp, #48]
     854:	ldr	x1, [sp, #40]
     858:	ldr	x0, [sp, #32]
     85c:	bl	9c <grub_latin1_to_utf8>
     860:	strb	wzr, [x0]
     864:	ldr	x4, [sp, #32]
     868:	adrp	x0, 0 <grub_swap_bytes32>
     86c:	add	x0, x0, #0x0
     870:	ldr	x3, [x0]
     874:	adrp	x0, 0 <grub_swap_bytes32>
     878:	add	x0, x0, #0x0
     87c:	ldr	x2, [x0]
     880:	mov	w1, #0x137                 	// #311
     884:	adrp	x0, 0 <grub_swap_bytes32>
     888:	add	x0, x0, #0x0
     88c:	ldr	x0, [x0]
     890:	bl	0 <grub_real_dprintf>
     894:	ldr	x0, [sp, #40]
     898:	bl	0 <grub_free>
     89c:	ldr	x0, [sp, #32]
     8a0:	ldrb	w0, [x0]
     8a4:	cmp	w0, #0x3a
     8a8:	b.ne	8b8 <grub_affs_read_symlink+0x160>  // b.any
     8ac:	ldr	x0, [sp, #32]
     8b0:	mov	w1, #0x2f                  	// #47
     8b4:	strb	w1, [x0]
     8b8:	ldr	x0, [sp, #32]
     8bc:	ldp	x29, x30, [sp], #64
     8c0:	ret
     8c4:	nop
	...

00000000000008e8 <grub_affs_create_node>:
     8e8:	stp	x29, x30, [sp, #-208]!
     8ec:	mov	x29, sp
     8f0:	str	x19, [sp, #16]
     8f4:	str	x0, [sp, #88]
     8f8:	str	x1, [sp, #80]
     8fc:	str	x2, [sp, #72]
     900:	str	x3, [sp, #64]
     904:	str	x4, [sp, #56]
     908:	str	w5, [sp, #52]
     90c:	str	x6, [sp, #40]
     910:	ldr	x0, [sp, #88]
     914:	ldr	x0, [x0]
     918:	str	x0, [sp, #176]
     91c:	mov	w0, #0x1                   	// #1
     920:	str	w0, [sp, #204]
     924:	mov	x0, #0xf0                  	// #240
     928:	bl	0 <grub_zalloc>
     92c:	mov	x1, x0
     930:	ldr	x0, [sp, #64]
     934:	str	x1, [x0]
     938:	ldr	x0, [sp, #64]
     93c:	ldr	x0, [x0]
     940:	cmp	x0, #0x0
     944:	b.ne	95c <grub_affs_create_node+0x74>  // b.any
     948:	ldr	x0, [sp, #56]
     94c:	ldr	x0, [x0]
     950:	bl	0 <grub_free>
     954:	mov	w0, #0x1                   	// #1
     958:	b	b8c <grub_affs_create_node+0x2a4>
     95c:	ldr	x0, [sp, #64]
     960:	ldr	x0, [x0]
     964:	ldr	x1, [sp, #176]
     968:	str	x1, [x0]
     96c:	ldr	x0, [sp, #64]
     970:	ldr	x0, [x0]
     974:	ldr	w1, [sp, #52]
     978:	str	w1, [x0, #8]
     97c:	ldr	x0, [sp, #64]
     980:	ldr	x0, [x0]
     984:	ldr	x1, [sp, #88]
     988:	str	x1, [x0, #16]
     98c:	ldr	x0, [sp, #40]
     990:	ldrb	w0, [x0, #120]
     994:	and	x0, x0, #0xff
     998:	str	x0, [sp, #192]
     99c:	ldr	x0, [sp, #192]
     9a0:	cmp	x0, #0x1e
     9a4:	b.ls	9b0 <grub_affs_create_node+0xc8>  // b.plast
     9a8:	mov	x0, #0x1e                  	// #30
     9ac:	str	x0, [sp, #192]
     9b0:	ldr	x0, [sp, #40]
     9b4:	add	x1, x0, #0x79
     9b8:	add	x0, sp, #0x68
     9bc:	ldr	x2, [sp, #192]
     9c0:	bl	9c <grub_latin1_to_utf8>
     9c4:	strb	wzr, [x0]
     9c8:	ldr	x0, [sp, #64]
     9cc:	ldr	x0, [x0]
     9d0:	add	x1, x0, #0x18
     9d4:	ldr	x0, [sp, #40]
     9d8:	mov	x3, x1
     9dc:	mov	x1, x0
     9e0:	mov	x0, #0xc8                  	// #200
     9e4:	mov	x2, x0
     9e8:	mov	x0, x3
     9ec:	bl	0 <memcpy>
     9f0:	str	wzr, [sp, #188]
     9f4:	b	b14 <grub_affs_create_node+0x22c>
     9f8:	ldr	x0, [sp, #64]
     9fc:	ldr	x0, [x0]
     a00:	ldr	w0, [x0, #220]
     a04:	mov	w1, #0xfdffffff            	// #-33554433
     a08:	cmp	w0, w1
     a0c:	b.eq	a50 <grub_affs_create_node+0x168>  // b.none
     a10:	mov	w1, #0xfdffffff            	// #-33554433
     a14:	cmp	w0, w1
     a18:	b.hi	b08 <grub_affs_create_node+0x220>  // b.pmore
     a1c:	mov	w1, #0xfcffffff            	// #-50331649
     a20:	cmp	w0, w1
     a24:	b.eq	a74 <grub_affs_create_node+0x18c>  // b.none
     a28:	mov	w1, #0xfcffffff            	// #-50331649
     a2c:	cmp	w0, w1
     a30:	b.hi	b08 <grub_affs_create_node+0x220>  // b.pmore
     a34:	mov	w1, #0x2000000             	// #33554432
     a38:	cmp	w0, w1
     a3c:	b.eq	a5c <grub_affs_create_node+0x174>  // b.none
     a40:	mov	w1, #0x3000000             	// #50331648
     a44:	cmp	w0, w1
     a48:	b.eq	a68 <grub_affs_create_node+0x180>  // b.none
     a4c:	b	b08 <grub_affs_create_node+0x220>
     a50:	mov	w0, #0x1                   	// #1
     a54:	str	w0, [sp, #204]
     a58:	b	b10 <grub_affs_create_node+0x228>
     a5c:	mov	w0, #0x2                   	// #2
     a60:	str	w0, [sp, #204]
     a64:	b	b10 <grub_affs_create_node+0x228>
     a68:	mov	w0, #0x3                   	// #3
     a6c:	str	w0, [sp, #204]
     a70:	b	b10 <grub_affs_create_node+0x228>
     a74:	ldr	x0, [sp, #64]
     a78:	ldr	x0, [x0]
     a7c:	ldr	w1, [x0, #180]
     a80:	ldr	x0, [sp, #64]
     a84:	ldr	x19, [x0]
     a88:	mov	w0, w1
     a8c:	bl	0 <grub_swap_bytes32>
     a90:	str	w0, [x19, #8]
     a94:	ldr	x0, [sp, #176]
     a98:	ldr	x5, [x0, #256]
     a9c:	ldr	x0, [sp, #64]
     aa0:	ldr	x0, [x0]
     aa4:	ldr	w0, [x0, #8]
     aa8:	mov	w0, w0
     aac:	add	x1, x0, #0x1
     ab0:	ldr	x0, [sp, #176]
     ab4:	ldr	w0, [x0, #264]
     ab8:	lsl	x0, x1, x0
     abc:	sub	x1, x0, #0x1
     ac0:	ldr	x0, [sp, #64]
     ac4:	ldr	x0, [x0]
     ac8:	add	x0, x0, #0x18
     acc:	mov	x4, x0
     ad0:	mov	x3, #0xc8                  	// #200
     ad4:	mov	x2, #0x138                 	// #312
     ad8:	mov	x0, x5
     adc:	bl	0 <grub_disk_read>
     ae0:	str	w0, [sp, #172]
     ae4:	ldr	w0, [sp, #172]
     ae8:	cmp	w0, #0x0
     aec:	b.eq	af8 <grub_affs_create_node+0x210>  // b.none
     af0:	mov	w0, #0x1                   	// #1
     af4:	b	b8c <grub_affs_create_node+0x2a4>
     af8:	ldr	w0, [sp, #188]
     afc:	add	w0, w0, #0x1
     b00:	str	w0, [sp, #188]
     b04:	b	b14 <grub_affs_create_node+0x22c>
     b08:	mov	w0, #0x0                   	// #0
     b0c:	b	b8c <grub_affs_create_node+0x2a4>
     b10:	b	b20 <grub_affs_create_node+0x238>
     b14:	ldr	w0, [sp, #188]
     b18:	cmp	w0, #0x7
     b1c:	b.ls	9f8 <grub_affs_create_node+0x110>  // b.plast
     b20:	ldr	w0, [sp, #188]
     b24:	cmp	w0, #0x8
     b28:	b.ne	b34 <grub_affs_create_node+0x24c>  // b.any
     b2c:	mov	w0, #0x0                   	// #0
     b30:	b	b8c <grub_affs_create_node+0x2a4>
     b34:	ldr	w0, [sp, #204]
     b38:	orr	w0, w0, #0x100
     b3c:	str	w0, [sp, #204]
     b40:	ldr	w1, [sp, #204]
     b44:	ldr	x0, [sp, #64]
     b48:	ldr	x2, [x0]
     b4c:	add	x0, sp, #0x68
     b50:	ldr	x4, [sp, #80]
     b54:	ldr	x3, [sp, #72]
     b58:	blr	x4
     b5c:	cmp	w0, #0x0
     b60:	b.eq	b80 <grub_affs_create_node+0x298>  // b.none
     b64:	ldr	x0, [sp, #56]
     b68:	ldr	x0, [x0]
     b6c:	bl	0 <grub_free>
     b70:	ldr	x0, [sp, #64]
     b74:	str	xzr, [x0]
     b78:	mov	w0, #0x1                   	// #1
     b7c:	b	b8c <grub_affs_create_node+0x2a4>
     b80:	ldr	x0, [sp, #64]
     b84:	str	xzr, [x0]
     b88:	mov	w0, #0x0                   	// #0
     b8c:	ldr	x19, [sp, #16]
     b90:	ldp	x29, x30, [sp], #208
     b94:	ret

0000000000000b98 <grub_affs_iterate_dir>:
     b98:	stp	x29, x30, [sp, #-288]!
     b9c:	mov	x29, sp
     ba0:	str	x0, [sp, #40]
     ba4:	str	x1, [sp, #32]
     ba8:	str	x2, [sp, #24]
     bac:	str	xzr, [sp, #64]
     bb0:	ldr	x0, [sp, #40]
     bb4:	ldr	x0, [x0]
     bb8:	str	x0, [sp, #272]
     bbc:	mov	x0, #0xf0                  	// #240
     bc0:	bl	0 <grub_zalloc>
     bc4:	str	x0, [sp, #64]
     bc8:	ldr	x0, [sp, #64]
     bcc:	cmp	x0, #0x0
     bd0:	b.ne	bdc <grub_affs_iterate_dir+0x44>  // b.any
     bd4:	mov	w0, #0x1                   	// #1
     bd8:	b	e88 <grub_affs_iterate_dir+0x2f0>
     bdc:	ldr	x1, [sp, #64]
     be0:	ldr	x0, [sp, #40]
     be4:	mov	x3, x1
     be8:	mov	x1, x0
     bec:	mov	x0, #0xf0                  	// #240
     bf0:	mov	x2, x0
     bf4:	mov	x0, x3
     bf8:	bl	0 <memcpy>
     bfc:	ldr	x0, [sp, #64]
     c00:	ldr	x4, [sp, #32]
     c04:	ldr	x3, [sp, #24]
     c08:	mov	x2, x0
     c0c:	mov	w1, #0x2                   	// #2
     c10:	adrp	x0, 0 <grub_swap_bytes32>
     c14:	add	x0, x0, #0x0
     c18:	ldr	x0, [x0]
     c1c:	blr	x4
     c20:	cmp	w0, #0x0
     c24:	b.eq	c30 <grub_affs_iterate_dir+0x98>  // b.none
     c28:	mov	w0, #0x1                   	// #1
     c2c:	b	e88 <grub_affs_iterate_dir+0x2f0>
     c30:	ldr	x0, [sp, #40]
     c34:	ldr	x0, [x0, #16]
     c38:	cmp	x0, #0x0
     c3c:	b.eq	cb8 <grub_affs_iterate_dir+0x120>  // b.none
     c40:	mov	x0, #0xf0                  	// #240
     c44:	bl	0 <grub_zalloc>
     c48:	str	x0, [sp, #64]
     c4c:	ldr	x0, [sp, #64]
     c50:	cmp	x0, #0x0
     c54:	b.ne	c60 <grub_affs_iterate_dir+0xc8>  // b.any
     c58:	mov	w0, #0x1                   	// #1
     c5c:	b	e88 <grub_affs_iterate_dir+0x2f0>
     c60:	ldr	x0, [sp, #40]
     c64:	ldr	x0, [x0, #16]
     c68:	ldr	x1, [sp, #64]
     c6c:	mov	x3, x1
     c70:	mov	x1, x0
     c74:	mov	x0, #0xf0                  	// #240
     c78:	mov	x2, x0
     c7c:	mov	x0, x3
     c80:	bl	0 <memcpy>
     c84:	ldr	x0, [sp, #64]
     c88:	ldr	x4, [sp, #32]
     c8c:	ldr	x3, [sp, #24]
     c90:	mov	x2, x0
     c94:	mov	w1, #0x2                   	// #2
     c98:	adrp	x0, 0 <grub_swap_bytes32>
     c9c:	add	x0, x0, #0x0
     ca0:	ldr	x0, [x0]
     ca4:	blr	x4
     ca8:	cmp	w0, #0x0
     cac:	b.eq	cb8 <grub_affs_iterate_dir+0x120>  // b.none
     cb0:	mov	w0, #0x1                   	// #1
     cb4:	b	e88 <grub_affs_iterate_dir+0x2f0>
     cb8:	ldr	x0, [sp, #272]
     cbc:	ldr	w0, [x0, #268]
     cc0:	mov	w0, w0
     cc4:	lsl	x0, x0, #2
     cc8:	bl	0 <grub_zalloc>
     ccc:	str	x0, [sp, #56]
     cd0:	ldr	x0, [sp, #56]
     cd4:	cmp	x0, #0x0
     cd8:	b.ne	ce4 <grub_affs_iterate_dir+0x14c>  // b.any
     cdc:	mov	w0, #0x1                   	// #1
     ce0:	b	e88 <grub_affs_iterate_dir+0x2f0>
     ce4:	ldr	x0, [sp, #272]
     ce8:	ldr	x5, [x0, #256]
     cec:	ldr	x0, [sp, #40]
     cf0:	ldr	w0, [x0, #8]
     cf4:	mov	w1, w0
     cf8:	ldr	x0, [sp, #272]
     cfc:	ldr	w0, [x0, #264]
     d00:	lsl	x1, x1, x0
     d04:	ldr	x0, [sp, #272]
     d08:	ldr	w0, [x0, #268]
     d0c:	mov	w0, w0
     d10:	lsl	x0, x0, #2
     d14:	ldr	x2, [sp, #56]
     d18:	mov	x4, x2
     d1c:	mov	x3, x0
     d20:	mov	x2, #0x18                  	// #24
     d24:	mov	x0, x5
     d28:	bl	0 <grub_disk_read>
     d2c:	adrp	x0, 0 <grub_swap_bytes32>
     d30:	add	x0, x0, #0x0
     d34:	ldr	x0, [x0]
     d38:	ldr	w0, [x0]
     d3c:	cmp	w0, #0x0
     d40:	b.ne	e68 <grub_affs_iterate_dir+0x2d0>  // b.any
     d44:	str	wzr, [sp, #284]
     d48:	b	e44 <grub_affs_iterate_dir+0x2ac>
     d4c:	ldr	x1, [sp, #56]
     d50:	ldr	w0, [sp, #284]
     d54:	lsl	x0, x0, #2
     d58:	add	x0, x1, x0
     d5c:	ldr	w0, [x0]
     d60:	cmp	w0, #0x0
     d64:	b.eq	e34 <grub_affs_iterate_dir+0x29c>  // b.none
     d68:	ldr	x1, [sp, #56]
     d6c:	ldr	w0, [sp, #284]
     d70:	lsl	x0, x0, #2
     d74:	add	x0, x1, x0
     d78:	ldr	w0, [x0]
     d7c:	bl	0 <grub_swap_bytes32>
     d80:	str	w0, [sp, #280]
     d84:	b	e24 <grub_affs_iterate_dir+0x28c>
     d88:	ldr	x0, [sp, #272]
     d8c:	ldr	x5, [x0, #256]
     d90:	ldr	w0, [sp, #280]
     d94:	add	x1, x0, #0x1
     d98:	ldr	x0, [sp, #272]
     d9c:	ldr	w0, [x0, #264]
     da0:	lsl	x0, x1, x0
     da4:	sub	x0, x0, #0x1
     da8:	add	x1, sp, #0x48
     dac:	mov	x4, x1
     db0:	mov	x3, #0xc8                  	// #200
     db4:	mov	x2, #0x138                 	// #312
     db8:	mov	x1, x0
     dbc:	mov	x0, x5
     dc0:	bl	0 <grub_disk_read>
     dc4:	adrp	x0, 0 <grub_swap_bytes32>
     dc8:	add	x0, x0, #0x0
     dcc:	ldr	x0, [x0]
     dd0:	ldr	w0, [x0]
     dd4:	cmp	w0, #0x0
     dd8:	b.ne	e70 <grub_affs_iterate_dir+0x2d8>  // b.any
     ddc:	add	x2, sp, #0x48
     de0:	add	x1, sp, #0x38
     de4:	add	x0, sp, #0x40
     de8:	mov	x6, x2
     dec:	ldr	w5, [sp, #280]
     df0:	mov	x4, x1
     df4:	mov	x3, x0
     df8:	ldr	x2, [sp, #24]
     dfc:	ldr	x1, [sp, #32]
     e00:	ldr	x0, [sp, #40]
     e04:	bl	8e8 <grub_affs_create_node>
     e08:	cmp	w0, #0x0
     e0c:	b.eq	e18 <grub_affs_iterate_dir+0x280>  // b.none
     e10:	mov	w0, #0x1                   	// #1
     e14:	b	e88 <grub_affs_iterate_dir+0x2f0>
     e18:	ldr	w0, [sp, #256]
     e1c:	bl	0 <grub_swap_bytes32>
     e20:	str	w0, [sp, #280]
     e24:	ldr	w0, [sp, #280]
     e28:	cmp	w0, #0x0
     e2c:	b.ne	d88 <grub_affs_iterate_dir+0x1f0>  // b.any
     e30:	b	e38 <grub_affs_iterate_dir+0x2a0>
     e34:	nop
     e38:	ldr	w0, [sp, #284]
     e3c:	add	w0, w0, #0x1
     e40:	str	w0, [sp, #284]
     e44:	ldr	x0, [sp, #272]
     e48:	ldr	w0, [x0, #268]
     e4c:	ldr	w1, [sp, #284]
     e50:	cmp	w1, w0
     e54:	b.cc	d4c <grub_affs_iterate_dir+0x1b4>  // b.lo, b.ul, b.last
     e58:	ldr	x0, [sp, #56]
     e5c:	bl	0 <grub_free>
     e60:	mov	w0, #0x0                   	// #0
     e64:	b	e88 <grub_affs_iterate_dir+0x2f0>
     e68:	nop
     e6c:	b	e74 <grub_affs_iterate_dir+0x2dc>
     e70:	nop
     e74:	ldr	x0, [sp, #64]
     e78:	bl	0 <grub_free>
     e7c:	ldr	x0, [sp, #56]
     e80:	bl	0 <grub_free>
     e84:	mov	w0, #0x0                   	// #0
     e88:	ldp	x29, x30, [sp], #288
     e8c:	ret
	...

0000000000000ea8 <grub_affs_open>:
     ea8:	stp	x29, x30, [sp, #-48]!
     eac:	mov	x29, sp
     eb0:	str	x0, [sp, #24]
     eb4:	str	x1, [sp, #16]
     eb8:	str	xzr, [sp, #32]
     ebc:	adrp	x0, 0 <grub_swap_bytes32>
     ec0:	add	x0, x0, #0x0
     ec4:	ldr	x0, [x0]
     ec8:	ldr	x0, [x0]
     ecc:	bl	0 <grub_dl_ref>
     ed0:	ldr	x0, [sp, #24]
     ed4:	ldr	x0, [x0, #8]
     ed8:	ldr	x0, [x0]
     edc:	bl	3d8 <grub_affs_mount>
     ee0:	str	x0, [sp, #40]
     ee4:	ldr	x0, [sp, #40]
     ee8:	cmp	x0, #0x0
     eec:	b.eq	f94 <grub_affs_open+0xec>  // b.none
     ef0:	ldr	x0, [sp, #40]
     ef4:	add	x1, x0, #0x10
     ef8:	add	x2, sp, #0x20
     efc:	mov	w5, #0x1                   	// #1
     f00:	adrp	x0, 0 <grub_swap_bytes32>
     f04:	add	x0, x0, #0x0
     f08:	ldr	x4, [x0]
     f0c:	adrp	x0, 0 <grub_swap_bytes32>
     f10:	add	x0, x0, #0x0
     f14:	ldr	x3, [x0]
     f18:	ldr	x0, [sp, #16]
     f1c:	bl	0 <grub_fshelp_find_file>
     f20:	adrp	x0, 0 <grub_swap_bytes32>
     f24:	add	x0, x0, #0x0
     f28:	ldr	x0, [x0]
     f2c:	ldr	w0, [x0]
     f30:	cmp	w0, #0x0
     f34:	b.ne	f9c <grub_affs_open+0xf4>  // b.any
     f38:	ldr	x0, [sp, #32]
     f3c:	ldr	w0, [x0, #36]
     f40:	bl	0 <grub_swap_bytes32>
     f44:	mov	w1, w0
     f48:	ldr	x0, [sp, #24]
     f4c:	str	x1, [x0, #64]
     f50:	ldr	x1, [sp, #32]
     f54:	ldr	x0, [sp, #40]
     f58:	add	x0, x0, #0x10
     f5c:	mov	x3, x0
     f60:	mov	x0, #0xf0                  	// #240
     f64:	mov	x2, x0
     f68:	mov	x0, x3
     f6c:	bl	0 <memcpy>
     f70:	ldr	x0, [sp, #32]
     f74:	bl	0 <grub_free>
     f78:	ldr	x0, [sp, #24]
     f7c:	ldr	x1, [sp, #40]
     f80:	str	x1, [x0, #80]
     f84:	ldr	x0, [sp, #24]
     f88:	str	xzr, [x0, #24]
     f8c:	mov	w0, #0x0                   	// #0
     f90:	b	ff4 <grub_affs_open+0x14c>
     f94:	nop
     f98:	b	fa0 <grub_affs_open+0xf8>
     f9c:	nop
     fa0:	ldr	x0, [sp, #40]
     fa4:	cmp	x0, #0x0
     fa8:	b.eq	fc8 <grub_affs_open+0x120>  // b.none
     fac:	ldr	x0, [sp, #40]
     fb0:	add	x1, x0, #0x10
     fb4:	ldr	x0, [sp, #32]
     fb8:	cmp	x1, x0
     fbc:	b.eq	fc8 <grub_affs_open+0x120>  // b.none
     fc0:	ldr	x0, [sp, #32]
     fc4:	bl	0 <grub_free>
     fc8:	ldr	x0, [sp, #40]
     fcc:	bl	0 <grub_free>
     fd0:	adrp	x0, 0 <grub_swap_bytes32>
     fd4:	add	x0, x0, #0x0
     fd8:	ldr	x0, [x0]
     fdc:	ldr	x0, [x0]
     fe0:	bl	0 <grub_dl_unref>
     fe4:	adrp	x0, 0 <grub_swap_bytes32>
     fe8:	add	x0, x0, #0x0
     fec:	ldr	x0, [x0]
     ff0:	ldr	w0, [x0]
     ff4:	ldp	x29, x30, [sp], #48
     ff8:	ret
     ffc:	nop
	...

0000000000001020 <grub_affs_close>:
    1020:	stp	x29, x30, [sp, #-48]!
    1024:	mov	x29, sp
    1028:	str	x0, [sp, #24]
    102c:	ldr	x0, [sp, #24]
    1030:	ldr	x0, [x0, #80]
    1034:	str	x0, [sp, #40]
    1038:	ldr	x0, [sp, #40]
    103c:	ldr	x0, [x0, #240]
    1040:	bl	0 <grub_free>
    1044:	ldr	x0, [sp, #24]
    1048:	ldr	x0, [x0, #80]
    104c:	bl	0 <grub_free>
    1050:	adrp	x0, 0 <grub_swap_bytes32>
    1054:	add	x0, x0, #0x0
    1058:	ldr	x0, [x0]
    105c:	ldr	x0, [x0]
    1060:	bl	0 <grub_dl_unref>
    1064:	mov	w0, #0x0                   	// #0
    1068:	ldp	x29, x30, [sp], #48
    106c:	ret
	...

0000000000001078 <grub_affs_read>:
    1078:	sub	sp, sp, #0x90
    107c:	stp	x29, x30, [sp, #32]
    1080:	add	x29, sp, #0x20
    1084:	stp	x19, x20, [sp, #48]
    1088:	stp	x21, x22, [sp, #64]
    108c:	str	x23, [sp, #80]
    1090:	str	x0, [sp, #120]
    1094:	str	x1, [sp, #112]
    1098:	str	x2, [sp, #104]
    109c:	ldr	x0, [sp, #120]
    10a0:	ldr	x0, [x0, #80]
    10a4:	str	x0, [sp, #136]
    10a8:	ldr	x0, [sp, #136]
    10ac:	ldr	x0, [x0, #16]
    10b0:	ldr	x19, [x0, #256]
    10b4:	ldr	x0, [sp, #136]
    10b8:	add	x20, x0, #0x10
    10bc:	ldr	x0, [sp, #120]
    10c0:	ldr	x21, [x0, #88]
    10c4:	ldr	x0, [sp, #120]
    10c8:	ldr	x22, [x0, #96]
    10cc:	ldr	x0, [sp, #120]
    10d0:	ldr	x23, [x0, #24]
    10d4:	ldr	x0, [sp, #136]
    10d8:	ldr	w0, [x0, #52]
    10dc:	bl	0 <grub_swap_bytes32>
    10e0:	mov	w0, w0
    10e4:	ldr	x1, [sp, #136]
    10e8:	ldr	w1, [x1, #264]
    10ec:	str	xzr, [sp, #16]
    10f0:	str	w1, [sp, #8]
    10f4:	str	x0, [sp]
    10f8:	adrp	x0, 0 <grub_swap_bytes32>
    10fc:	add	x0, x0, #0x0
    1100:	ldr	x7, [x0]
    1104:	ldr	x6, [sp, #112]
    1108:	ldr	x5, [sp, #104]
    110c:	mov	x4, x23
    1110:	mov	x3, x22
    1114:	mov	x2, x21
    1118:	mov	x1, x20
    111c:	mov	x0, x19
    1120:	bl	0 <grub_fshelp_read_file>
    1124:	ldp	x19, x20, [sp, #48]
    1128:	ldp	x21, x22, [sp, #64]
    112c:	ldr	x23, [sp, #80]
    1130:	ldp	x29, x30, [sp, #32]
    1134:	add	sp, sp, #0x90
    1138:	ret
    113c:	nop
	...

0000000000001148 <aftime2ctime>:
    1148:	stp	x29, x30, [sp, #-48]!
    114c:	mov	x29, sp
    1150:	str	x19, [sp, #16]
    1154:	str	x0, [sp, #40]
    1158:	ldr	x0, [sp, #40]
    115c:	ldr	w0, [x0]
    1160:	bl	0 <grub_swap_bytes32>
    1164:	mov	w1, w0
    1168:	mov	w0, #0x5180                	// #20864
    116c:	movk	w0, #0x1, lsl #16
    1170:	mul	w19, w1, w0
    1174:	ldr	x0, [sp, #40]
    1178:	ldr	w0, [x0, #4]
    117c:	bl	0 <grub_swap_bytes32>
    1180:	mov	w1, w0
    1184:	mov	w0, w1
    1188:	lsl	w0, w0, #4
    118c:	sub	w0, w0, w1
    1190:	lsl	w0, w0, #2
    1194:	add	w19, w19, w0
    1198:	ldr	x0, [sp, #40]
    119c:	ldr	w0, [x0, #8]
    11a0:	bl	0 <grub_swap_bytes32>
    11a4:	mov	w1, w0
    11a8:	mov	w0, #0x851f                	// #34079
    11ac:	movk	w0, #0x51eb, lsl #16
    11b0:	umull	x0, w1, w0
    11b4:	lsr	x0, x0, #32
    11b8:	lsr	w0, w0, #4
    11bc:	add	w1, w19, w0
    11c0:	mov	w0, #0x3f00                	// #16128
    11c4:	movk	w0, #0xf0c, lsl #16
    11c8:	add	w0, w1, w0
    11cc:	ldr	x19, [sp, #16]
    11d0:	ldp	x29, x30, [sp], #48
    11d4:	ret

00000000000011d8 <grub_affs_dir_iter>:
    11d8:	stp	x29, x30, [sp, #-80]!
    11dc:	mov	x29, sp
    11e0:	str	x0, [sp, #40]
    11e4:	str	w1, [sp, #36]
    11e8:	str	x2, [sp, #24]
    11ec:	str	x3, [sp, #16]
    11f0:	ldr	x0, [sp, #16]
    11f4:	str	x0, [sp, #72]
    11f8:	add	x0, sp, #0x38
    11fc:	mov	x2, #0x10                  	// #16
    1200:	mov	w1, #0x0                   	// #0
    1204:	bl	0 <grub_memset>
    1208:	ldr	w0, [sp, #36]
    120c:	and	w0, w0, #0xff
    1210:	cmp	w0, #0x2
    1214:	cset	w0, eq  // eq = none
    1218:	and	w1, w0, #0xff
    121c:	ldrb	w0, [sp, #56]
    1220:	bfxil	w0, w1, #0, #1
    1224:	strb	w0, [sp, #56]
    1228:	ldrb	w0, [sp, #56]
    122c:	orr	w0, w0, #0x2
    1230:	strb	w0, [sp, #56]
    1234:	ldr	x0, [sp, #24]
    1238:	add	x0, x0, #0x84
    123c:	bl	1148 <aftime2ctime>
    1240:	str	w0, [sp, #60]
    1244:	ldr	x0, [sp, #24]
    1248:	bl	0 <grub_free>
    124c:	ldr	x0, [sp, #72]
    1250:	ldr	x3, [x0]
    1254:	ldr	x0, [sp, #72]
    1258:	ldr	x1, [x0, #8]
    125c:	add	x0, sp, #0x38
    1260:	mov	x2, x1
    1264:	mov	x1, x0
    1268:	ldr	x0, [sp, #40]
    126c:	blr	x3
    1270:	ldp	x29, x30, [sp], #80
    1274:	ret

0000000000001278 <grub_affs_dir>:
    1278:	stp	x29, x30, [sp, #-80]!
    127c:	mov	x29, sp
    1280:	str	x0, [sp, #40]
    1284:	str	x1, [sp, #32]
    1288:	str	x2, [sp, #24]
    128c:	str	x3, [sp, #16]
    1290:	ldr	x0, [sp, #24]
    1294:	str	x0, [sp, #56]
    1298:	ldr	x0, [sp, #16]
    129c:	str	x0, [sp, #64]
    12a0:	str	xzr, [sp, #72]
    12a4:	str	xzr, [sp, #48]
    12a8:	adrp	x0, 0 <grub_swap_bytes32>
    12ac:	add	x0, x0, #0x0
    12b0:	ldr	x0, [x0]
    12b4:	ldr	x0, [x0]
    12b8:	bl	0 <grub_dl_ref>
    12bc:	ldr	x0, [sp, #40]
    12c0:	ldr	x0, [x0]
    12c4:	bl	3d8 <grub_affs_mount>
    12c8:	str	x0, [sp, #72]
    12cc:	ldr	x0, [sp, #72]
    12d0:	cmp	x0, #0x0
    12d4:	b.eq	1344 <grub_affs_dir+0xcc>  // b.none
    12d8:	ldr	x0, [sp, #72]
    12dc:	add	x1, x0, #0x10
    12e0:	add	x2, sp, #0x30
    12e4:	mov	w5, #0x2                   	// #2
    12e8:	adrp	x0, 0 <grub_swap_bytes32>
    12ec:	add	x0, x0, #0x0
    12f0:	ldr	x4, [x0]
    12f4:	adrp	x0, 0 <grub_swap_bytes32>
    12f8:	add	x0, x0, #0x0
    12fc:	ldr	x3, [x0]
    1300:	ldr	x0, [sp, #32]
    1304:	bl	0 <grub_fshelp_find_file>
    1308:	adrp	x0, 0 <grub_swap_bytes32>
    130c:	add	x0, x0, #0x0
    1310:	ldr	x0, [x0]
    1314:	ldr	w0, [x0]
    1318:	cmp	w0, #0x0
    131c:	b.ne	134c <grub_affs_dir+0xd4>  // b.any
    1320:	ldr	x3, [sp, #48]
    1324:	add	x0, sp, #0x38
    1328:	mov	x2, x0
    132c:	adrp	x0, 0 <grub_swap_bytes32>
    1330:	add	x0, x0, #0x0
    1334:	ldr	x1, [x0]
    1338:	mov	x0, x3
    133c:	bl	b98 <grub_affs_iterate_dir>
    1340:	b	1350 <grub_affs_dir+0xd8>
    1344:	nop
    1348:	b	1350 <grub_affs_dir+0xd8>
    134c:	nop
    1350:	ldr	x0, [sp, #72]
    1354:	cmp	x0, #0x0
    1358:	b.eq	1378 <grub_affs_dir+0x100>  // b.none
    135c:	ldr	x0, [sp, #72]
    1360:	add	x1, x0, #0x10
    1364:	ldr	x0, [sp, #48]
    1368:	cmp	x1, x0
    136c:	b.eq	1378 <grub_affs_dir+0x100>  // b.none
    1370:	ldr	x0, [sp, #48]
    1374:	bl	0 <grub_free>
    1378:	ldr	x0, [sp, #72]
    137c:	bl	0 <grub_free>
    1380:	adrp	x0, 0 <grub_swap_bytes32>
    1384:	add	x0, x0, #0x0
    1388:	ldr	x0, [x0]
    138c:	ldr	x0, [x0]
    1390:	bl	0 <grub_dl_unref>
    1394:	adrp	x0, 0 <grub_swap_bytes32>
    1398:	add	x0, x0, #0x0
    139c:	ldr	x0, [x0]
    13a0:	ldr	w0, [x0]
    13a4:	ldp	x29, x30, [sp], #80
    13a8:	ret
    13ac:	nop
	...

00000000000013d8 <grub_affs_label>:
    13d8:	stp	x29, x30, [sp, #-272]!
    13dc:	mov	x29, sp
    13e0:	str	x19, [sp, #16]
    13e4:	str	x0, [sp, #40]
    13e8:	str	x1, [sp, #32]
    13ec:	ldr	x0, [sp, #40]
    13f0:	ldr	x0, [x0]
    13f4:	str	x0, [sp, #256]
    13f8:	adrp	x0, 0 <grub_swap_bytes32>
    13fc:	add	x0, x0, #0x0
    1400:	ldr	x0, [x0]
    1404:	ldr	x0, [x0]
    1408:	bl	0 <grub_dl_ref>
    140c:	ldr	x0, [sp, #256]
    1410:	bl	3d8 <grub_affs_mount>
    1414:	str	x0, [sp, #248]
    1418:	ldr	x0, [sp, #248]
    141c:	cmp	x0, #0x0
    1420:	b.eq	150c <grub_affs_label+0x134>  // b.none
    1424:	ldr	x0, [sp, #248]
    1428:	ldr	x19, [x0, #256]
    142c:	ldr	x0, [sp, #248]
    1430:	ldr	w0, [x0, #8]
    1434:	bl	0 <grub_swap_bytes32>
    1438:	mov	w0, w0
    143c:	add	x1, x0, #0x1
    1440:	ldr	x0, [sp, #248]
    1444:	ldr	w0, [x0, #264]
    1448:	lsl	x0, x1, x0
    144c:	sub	x0, x0, #0x1
    1450:	add	x1, sp, #0x30
    1454:	mov	x4, x1
    1458:	mov	x3, #0xc8                  	// #200
    145c:	mov	x2, #0x138                 	// #312
    1460:	mov	x1, x0
    1464:	mov	x0, x19
    1468:	bl	0 <grub_disk_read>
    146c:	adrp	x0, 0 <grub_swap_bytes32>
    1470:	add	x0, x0, #0x0
    1474:	ldr	x0, [x0]
    1478:	ldr	w0, [x0]
    147c:	cmp	w0, #0x0
    1480:	b.eq	1498 <grub_affs_label+0xc0>  // b.none
    1484:	adrp	x0, 0 <grub_swap_bytes32>
    1488:	add	x0, x0, #0x0
    148c:	ldr	x0, [x0]
    1490:	ldr	w0, [x0]
    1494:	b	1540 <grub_affs_label+0x168>
    1498:	ldrb	w0, [sp, #168]
    149c:	and	x0, x0, #0xff
    14a0:	str	x0, [sp, #264]
    14a4:	ldr	x0, [sp, #264]
    14a8:	cmp	x0, #0x1e
    14ac:	b.ls	14b8 <grub_affs_label+0xe0>  // b.plast
    14b0:	mov	x0, #0x1e                  	// #30
    14b4:	str	x0, [sp, #264]
    14b8:	ldr	x0, [sp, #264]
    14bc:	lsl	x0, x0, #1
    14c0:	add	x0, x0, #0x1
    14c4:	bl	0 <grub_malloc>
    14c8:	mov	x1, x0
    14cc:	ldr	x0, [sp, #32]
    14d0:	str	x1, [x0]
    14d4:	ldr	x0, [sp, #32]
    14d8:	ldr	x0, [x0]
    14dc:	cmp	x0, #0x0
    14e0:	b.eq	1514 <grub_affs_label+0x13c>  // b.none
    14e4:	ldr	x0, [sp, #32]
    14e8:	ldr	x3, [x0]
    14ec:	add	x0, sp, #0x30
    14f0:	add	x0, x0, #0x79
    14f4:	ldr	x2, [sp, #264]
    14f8:	mov	x1, x0
    14fc:	mov	x0, x3
    1500:	bl	9c <grub_latin1_to_utf8>
    1504:	strb	wzr, [x0]
    1508:	b	1514 <grub_affs_label+0x13c>
    150c:	ldr	x0, [sp, #32]
    1510:	str	xzr, [x0]
    1514:	adrp	x0, 0 <grub_swap_bytes32>
    1518:	add	x0, x0, #0x0
    151c:	ldr	x0, [x0]
    1520:	ldr	x0, [x0]
    1524:	bl	0 <grub_dl_unref>
    1528:	ldr	x0, [sp, #248]
    152c:	bl	0 <grub_free>
    1530:	adrp	x0, 0 <grub_swap_bytes32>
    1534:	add	x0, x0, #0x0
    1538:	ldr	x0, [x0]
    153c:	ldr	w0, [x0]
    1540:	ldr	x19, [sp, #16]
    1544:	ldp	x29, x30, [sp], #272
    1548:	ret
    154c:	nop
	...

0000000000001560 <grub_affs_mtime>:
    1560:	stp	x29, x30, [sp, #-80]!
    1564:	mov	x29, sp
    1568:	str	x19, [sp, #16]
    156c:	str	x0, [sp, #40]
    1570:	str	x1, [sp, #32]
    1574:	ldr	x0, [sp, #40]
    1578:	ldr	x0, [x0]
    157c:	str	x0, [sp, #72]
    1580:	ldr	x0, [sp, #32]
    1584:	str	wzr, [x0]
    1588:	adrp	x0, 0 <grub_swap_bytes32>
    158c:	add	x0, x0, #0x0
    1590:	ldr	x0, [x0]
    1594:	ldr	x0, [x0]
    1598:	bl	0 <grub_dl_ref>
    159c:	ldr	x0, [sp, #72]
    15a0:	bl	3d8 <grub_affs_mount>
    15a4:	str	x0, [sp, #64]
    15a8:	ldr	x0, [sp, #64]
    15ac:	cmp	x0, #0x0
    15b0:	b.ne	15dc <grub_affs_mtime+0x7c>  // b.any
    15b4:	adrp	x0, 0 <grub_swap_bytes32>
    15b8:	add	x0, x0, #0x0
    15bc:	ldr	x0, [x0]
    15c0:	ldr	x0, [x0]
    15c4:	bl	0 <grub_dl_unref>
    15c8:	adrp	x0, 0 <grub_swap_bytes32>
    15cc:	add	x0, x0, #0x0
    15d0:	ldr	x0, [x0]
    15d4:	ldr	w0, [x0]
    15d8:	b	16a0 <grub_affs_mtime+0x140>
    15dc:	ldr	x0, [sp, #64]
    15e0:	ldr	x19, [x0, #256]
    15e4:	ldr	x0, [sp, #64]
    15e8:	ldr	w0, [x0, #8]
    15ec:	bl	0 <grub_swap_bytes32>
    15f0:	mov	w0, w0
    15f4:	add	x1, x0, #0x1
    15f8:	ldr	x0, [sp, #64]
    15fc:	ldr	w0, [x0, #264]
    1600:	lsl	x0, x1, x0
    1604:	sub	x0, x0, #0x1
    1608:	add	x1, sp, #0x30
    160c:	mov	x4, x1
    1610:	mov	x3, #0xc                   	// #12
    1614:	mov	x2, #0x1d8                 	// #472
    1618:	mov	x1, x0
    161c:	mov	x0, x19
    1620:	bl	0 <grub_disk_read>
    1624:	adrp	x0, 0 <grub_swap_bytes32>
    1628:	add	x0, x0, #0x0
    162c:	ldr	x0, [x0]
    1630:	ldr	w0, [x0]
    1634:	cmp	w0, #0x0
    1638:	b.eq	166c <grub_affs_mtime+0x10c>  // b.none
    163c:	adrp	x0, 0 <grub_swap_bytes32>
    1640:	add	x0, x0, #0x0
    1644:	ldr	x0, [x0]
    1648:	ldr	x0, [x0]
    164c:	bl	0 <grub_dl_unref>
    1650:	ldr	x0, [sp, #64]
    1654:	bl	0 <grub_free>
    1658:	adrp	x0, 0 <grub_swap_bytes32>
    165c:	add	x0, x0, #0x0
    1660:	ldr	x0, [x0]
    1664:	ldr	w0, [x0]
    1668:	b	16a0 <grub_affs_mtime+0x140>
    166c:	add	x0, sp, #0x30
    1670:	bl	1148 <aftime2ctime>
    1674:	mov	w1, w0
    1678:	ldr	x0, [sp, #32]
    167c:	str	w1, [x0]
    1680:	adrp	x0, 0 <grub_swap_bytes32>
    1684:	add	x0, x0, #0x0
    1688:	ldr	x0, [x0]
    168c:	ldr	x0, [x0]
    1690:	bl	0 <grub_dl_unref>
    1694:	ldr	x0, [sp, #64]
    1698:	bl	0 <grub_free>
    169c:	mov	w0, #0x0                   	// #0
    16a0:	ldr	x19, [sp, #16]
    16a4:	ldp	x29, x30, [sp], #80
    16a8:	ret
    16ac:	nop
	...

00000000000016c0 <grub_mod_init>:
    16c0:	stp	x29, x30, [sp, #-32]!
    16c4:	mov	x29, sp
    16c8:	str	x0, [sp, #24]
    16cc:	adrp	x0, 0 <grub_swap_bytes32>
    16d0:	add	x0, x0, #0x0
    16d4:	ldr	x0, [x0]
    16d8:	bl	18 <grub_fs_register>
    16dc:	adrp	x0, 0 <grub_swap_bytes32>
    16e0:	add	x0, x0, #0x0
    16e4:	ldr	x0, [x0]
    16e8:	ldr	x1, [sp, #24]
    16ec:	str	x1, [x0]
    16f0:	nop
    16f4:	ldp	x29, x30, [sp], #32
    16f8:	ret
    16fc:	nop
	...

0000000000001710 <grub_mod_fini>:
    1710:	stp	x29, x30, [sp, #-16]!
    1714:	mov	x29, sp
    1718:	adrp	x0, 0 <grub_swap_bytes32>
    171c:	add	x0, x0, #0x0
    1720:	ldr	x0, [x0]
    1724:	bl	50 <grub_fs_unregister>
    1728:	nop
    172c:	ldp	x29, x30, [sp], #16
    1730:	ret
    1734:	nop
	...
