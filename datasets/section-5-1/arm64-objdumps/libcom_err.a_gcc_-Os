In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libcom_err.a_gcc_-Os:

error_message.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <init_debug>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	adrp	x19, 0 <init_debug>
  10:	ldr	w0, [x19]
  14:	str	x21, [sp, #32]
  18:	tbnz	w0, #15, 164 <init_debug+0x164>
  1c:	adrp	x0, 0 <init_debug>
  20:	add	x0, x0, #0x0
  24:	bl	0 <getenv>
  28:	cbz	x0, 58 <init_debug+0x58>
  2c:	add	x1, sp, #0x38
  30:	mov	w2, #0x0                   	// #0
  34:	bl	0 <strtoul>
  38:	str	w0, [x19]
  3c:	ldr	x0, [sp, #56]
  40:	ldrb	w0, [x0]
  44:	cbnz	w0, 54 <init_debug+0x54>
  48:	bl	0 <__errno_location>
  4c:	ldr	w0, [x0]
  50:	cbz	w0, 58 <init_debug+0x58>
  54:	str	wzr, [x19]
  58:	ldr	w0, [x19]
  5c:	add	x20, x19, #0x0
  60:	orr	w0, w0, #0x8000
  64:	str	w0, [x19]
  68:	cmp	w0, #0x8, lsl #12
  6c:	b.eq	164 <init_debug+0x164>  // b.none
  70:	bl	0 <getuid>
  74:	mov	w21, w0
  78:	bl	0 <geteuid>
  7c:	cmp	w21, w0
  80:	b.ne	d4 <init_debug+0xd4>  // b.any
  84:	bl	0 <getgid>
  88:	mov	w21, w0
  8c:	bl	0 <getegid>
  90:	cmp	w21, w0
  94:	b.ne	d4 <init_debug+0xd4>  // b.any
  98:	mov	w4, #0x0                   	// #0
  9c:	mov	w3, #0x0                   	// #0
  a0:	mov	w2, #0x0                   	// #0
  a4:	mov	w1, #0x0                   	// #0
  a8:	mov	w0, #0x3                   	// #3
  ac:	bl	0 <prctl>
  b0:	cbz	w0, d4 <init_debug+0xd4>
  b4:	adrp	x0, 0 <init_debug>
  b8:	add	x0, x0, #0x0
  bc:	bl	0 <secure_getenv>
  c0:	cbz	x0, d4 <init_debug+0xd4>
  c4:	adrp	x1, 0 <init_debug>
  c8:	add	x1, x1, #0x0
  cc:	bl	0 <fopen>
  d0:	str	x0, [x20, #8]
  d4:	ldr	x0, [x20, #8]
  d8:	cbnz	x0, f4 <init_debug+0xf4>
  dc:	adrp	x1, 0 <init_debug>
  e0:	adrp	x0, 0 <init_debug>
  e4:	add	x1, x1, #0x0
  e8:	add	x0, x0, #0x0
  ec:	bl	0 <fopen>
  f0:	str	x0, [x20, #8]
  f4:	ldr	x0, [x20, #8]
  f8:	cbz	x0, 144 <init_debug+0x144>
  fc:	bl	0 <fileno>
 100:	mov	w21, w0
 104:	tbnz	w0, #31, 164 <init_debug+0x164>
 108:	mov	w1, #0x1                   	// #1
 10c:	bl	0 <fcntl>
 110:	tbz	w0, #31, 150 <init_debug+0x150>
 114:	bl	0 <__errno_location>
 118:	ldr	w0, [x0]
 11c:	ldr	x21, [x20, #8]
 120:	bl	0 <strerror>
 124:	mov	x2, x0
 128:	adrp	x1, 0 <init_debug>
 12c:	mov	x0, x21
 130:	add	x1, x1, #0x0
 134:	bl	0 <fprintf>
 138:	ldr	x0, [x20, #8]
 13c:	bl	0 <fclose>
 140:	str	xzr, [x20, #8]
 144:	mov	w0, #0x8000                	// #32768
 148:	str	w0, [x19]
 14c:	b	164 <init_debug+0x164>
 150:	orr	w2, w0, #0x1
 154:	mov	w1, #0x2                   	// #2
 158:	mov	w0, w21
 15c:	bl	0 <fcntl>
 160:	tbnz	w0, #31, 114 <init_debug+0x114>
 164:	ldp	x19, x20, [sp, #16]
 168:	ldr	x21, [sp, #32]
 16c:	ldp	x29, x30, [sp], #64
 170:	ret

0000000000000174 <et_list_lock>:
 174:	stp	x29, x30, [sp, #-32]!
 178:	mov	x29, sp
 17c:	str	x19, [sp, #16]
 180:	adrp	x19, 0 <init_debug>
 184:	add	x19, x19, #0x0
 188:	ldr	w0, [x19, #48]
 18c:	cbnz	w0, 194 <et_list_lock+0x20>
 190:	bl	0 <init_debug>
 194:	add	x0, x19, #0x10
 198:	ldr	x19, [sp, #16]
 19c:	ldp	x29, x30, [sp], #32
 1a0:	b	0 <sem_wait>

00000000000001a4 <et_list_unlock>:
 1a4:	adrp	x0, 0 <init_debug>
 1a8:	add	x0, x0, #0x0
 1ac:	ldr	w1, [x0, #48]
 1b0:	cbz	w1, 1bc <et_list_unlock+0x18>
 1b4:	add	x0, x0, #0x10
 1b8:	b	0 <sem_post>
 1bc:	mov	w0, #0x0                   	// #0
 1c0:	ret

00000000000001c4 <set_com_err_gettext>:
 1c4:	adrp	x1, 0 <init_debug>
 1c8:	add	x1, x1, #0x0
 1cc:	mov	x2, x0
 1d0:	ldr	x0, [x1, #56]
 1d4:	str	x2, [x1, #56]
 1d8:	ret

00000000000001dc <error_message>:
 1dc:	stp	x29, x30, [sp, #-48]!
 1e0:	mov	x29, sp
 1e4:	stp	x19, x20, [sp, #16]
 1e8:	and	w19, w0, #0xff
 1ec:	stp	x21, x22, [sp, #32]
 1f0:	ands	x21, x0, #0xffffffffffffff00
 1f4:	b.ne	290 <error_message+0xb4>  // b.any
 1f8:	mov	w0, w19
 1fc:	bl	0 <strerror>
 200:	mov	x20, x0
 204:	cbnz	x0, 358 <error_message+0x17c>
 208:	mrs	x20, tpidr_el0
 20c:	adrp	x1, 0 <init_debug>
 210:	add	x22, x20, #0x0, lsl #12
 214:	add	x22, x22, #0x0
 218:	add	x1, x1, #0x0
 21c:	mov	x0, x22
 220:	bl	0 <strcpy>
 224:	cbz	x21, 24c <error_message+0x70>
 228:	mov	x0, x21
 22c:	bl	0 <error_table_name>
 230:	mov	x1, x0
 234:	mov	x0, x22
 238:	bl	0 <strcat>
 23c:	adrp	x1, 0 <init_debug>
 240:	mov	x0, x22
 244:	add	x1, x1, #0x0
 248:	bl	0 <strcat>
 24c:	add	x1, x20, #0x0, lsl #12
 250:	add	x1, x1, #0x0
 254:	ldrb	w0, [x1]
 258:	cbnz	w0, 334 <error_message+0x158>
 25c:	cmp	w19, #0x63
 260:	b.le	33c <error_message+0x160>
 264:	mov	w0, #0x64                  	// #100
 268:	udiv	w2, w19, w0
 26c:	msub	w19, w2, w0, w19
 270:	add	w3, w2, #0x30
 274:	strb	w3, [x1], #1
 278:	mov	w0, #0xa                   	// #10
 27c:	udiv	w2, w19, w0
 280:	add	w3, w2, #0x30
 284:	msub	w19, w2, w0, w19
 288:	strb	w3, [x1], #1
 28c:	b	344 <error_message+0x168>
 290:	adrp	x22, 0 <init_debug>
 294:	add	x22, x22, #0x0
 298:	and	x20, x0, #0xff
 29c:	bl	174 <et_list_lock>
 2a0:	ldr	x0, [x22, #64]
 2a4:	cbnz	x0, 2d8 <error_message+0xfc>
 2a8:	ldr	x0, [x22, #72]
 2ac:	cbz	x0, 2d0 <error_message+0xf4>
 2b0:	ldr	x1, [x0, #8]
 2b4:	ldr	x2, [x1, #8]
 2b8:	eor	x2, x21, x2
 2bc:	tst	x2, #0xffffff
 2c0:	b.ne	32c <error_message+0x150>  // b.any
 2c4:	ldr	w0, [x1, #16]
 2c8:	cmp	w0, w19
 2cc:	b.gt	2f8 <error_message+0x11c>
 2d0:	bl	1a4 <et_list_unlock>
 2d4:	b	208 <error_message+0x2c>
 2d8:	ldr	x1, [x0, #8]
 2dc:	ldr	x2, [x1, #8]
 2e0:	eor	x2, x21, x2
 2e4:	tst	x2, #0xffffff
 2e8:	b.ne	324 <error_message+0x148>  // b.any
 2ec:	ldr	w0, [x1, #16]
 2f0:	cmp	w0, w19
 2f4:	b.le	2a8 <error_message+0xcc>
 2f8:	ldr	x0, [x1]
 2fc:	ldr	x20, [x0, x20, lsl #3]
 300:	bl	1a4 <et_list_unlock>
 304:	ldr	x1, [x22, #56]
 308:	cbz	x1, 358 <error_message+0x17c>
 30c:	mov	x0, x20
 310:	mov	x16, x1
 314:	ldp	x19, x20, [sp, #16]
 318:	ldp	x21, x22, [sp, #32]
 31c:	ldp	x29, x30, [sp], #48
 320:	br	x16
 324:	ldr	x0, [x0]
 328:	b	2a4 <error_message+0xc8>
 32c:	ldr	x0, [x0]
 330:	b	2ac <error_message+0xd0>
 334:	add	x1, x1, #0x1
 338:	b	254 <error_message+0x78>
 33c:	cmp	w19, #0x9
 340:	b.gt	278 <error_message+0x9c>
 344:	add	x20, x20, #0x0, lsl #12
 348:	add	x20, x20, #0x0
 34c:	add	w19, w19, #0x30
 350:	strb	w19, [x1]
 354:	strb	wzr, [x1, #1]
 358:	mov	x0, x20
 35c:	ldp	x19, x20, [sp, #16]
 360:	ldp	x21, x22, [sp, #32]
 364:	ldp	x29, x30, [sp], #48
 368:	ret

000000000000036c <add_error_table>:
 36c:	stp	x29, x30, [sp, #-48]!
 370:	mov	x29, sp
 374:	stp	x19, x20, [sp, #16]
 378:	mov	x20, x0
 37c:	mov	x0, #0x10                  	// #16
 380:	stp	x21, x22, [sp, #32]
 384:	bl	0 <malloc>
 388:	cbz	x0, 408 <add_error_table+0x9c>
 38c:	mov	x19, x0
 390:	bl	174 <et_list_lock>
 394:	cbz	w0, 3b8 <add_error_table+0x4c>
 398:	mov	x0, x19
 39c:	bl	0 <free>
 3a0:	bl	0 <__errno_location>
 3a4:	ldrsw	x0, [x0]
 3a8:	ldp	x19, x20, [sp, #16]
 3ac:	ldp	x21, x22, [sp, #32]
 3b0:	ldp	x29, x30, [sp], #48
 3b4:	ret
 3b8:	adrp	x22, 0 <init_debug>
 3bc:	add	x21, x22, #0x0
 3c0:	ldr	x0, [x21, #72]
 3c4:	stp	x0, x20, [x19]
 3c8:	str	x19, [x21, #72]
 3cc:	bl	0 <init_debug>
 3d0:	ldr	w0, [x22]
 3d4:	tbz	w0, #0, 3fc <add_error_table+0x90>
 3d8:	ldr	x0, [x20, #8]
 3dc:	ldr	x19, [x21, #8]
 3e0:	bl	0 <error_table_name>
 3e4:	mov	x2, x0
 3e8:	adrp	x1, 0 <init_debug>
 3ec:	mov	x3, x20
 3f0:	add	x1, x1, #0x0
 3f4:	mov	x0, x19
 3f8:	bl	0 <fprintf>
 3fc:	bl	1a4 <et_list_unlock>
 400:	mov	x0, #0x0                   	// #0
 404:	b	3a8 <add_error_table+0x3c>
 408:	mov	x0, #0xc                   	// #12
 40c:	b	3a8 <add_error_table+0x3c>

0000000000000410 <remove_error_table>:
 410:	stp	x29, x30, [sp, #-48]!
 414:	mov	x29, sp
 418:	stp	x19, x20, [sp, #16]
 41c:	mov	x19, x0
 420:	stp	x21, x22, [sp, #32]
 424:	bl	174 <et_list_lock>
 428:	cbnz	w0, 474 <remove_error_table+0x64>
 42c:	adrp	x21, 0 <init_debug>
 430:	add	x22, x21, #0x0
 434:	ldr	x20, [x22, #72]
 438:	bl	0 <init_debug>
 43c:	mov	x0, #0x0                   	// #0
 440:	cbnz	x20, 47c <remove_error_table+0x6c>
 444:	ldr	w0, [x21]
 448:	tbz	w0, #0, 470 <remove_error_table+0x60>
 44c:	ldr	x0, [x19, #8]
 450:	ldr	x20, [x22, #8]
 454:	bl	0 <error_table_name>
 458:	mov	x2, x0
 45c:	adrp	x1, 0 <init_debug>
 460:	mov	x3, x19
 464:	add	x1, x1, #0x0
 468:	mov	x0, x20
 46c:	bl	0 <fprintf>
 470:	bl	1a4 <et_list_unlock>
 474:	mov	x0, #0x2                   	// #2
 478:	b	4d8 <remove_error_table+0xc8>
 47c:	ldr	x1, [x20, #8]
 480:	ldr	x2, [x19, #8]
 484:	ldr	x3, [x1, #8]
 488:	ldr	x1, [x20]
 48c:	cmp	x3, x2
 490:	b.ne	4f0 <remove_error_table+0xe0>  // b.any
 494:	cbz	x0, 4e8 <remove_error_table+0xd8>
 498:	str	x1, [x0]
 49c:	mov	x0, x20
 4a0:	bl	0 <free>
 4a4:	ldr	w0, [x21]
 4a8:	tbz	w0, #0, 4d0 <remove_error_table+0xc0>
 4ac:	ldr	x0, [x19, #8]
 4b0:	ldr	x20, [x22, #8]
 4b4:	bl	0 <error_table_name>
 4b8:	mov	x2, x0
 4bc:	adrp	x1, 0 <init_debug>
 4c0:	mov	x3, x19
 4c4:	add	x1, x1, #0x0
 4c8:	mov	x0, x20
 4cc:	bl	0 <fprintf>
 4d0:	bl	1a4 <et_list_unlock>
 4d4:	mov	x0, #0x0                   	// #0
 4d8:	ldp	x19, x20, [sp, #16]
 4dc:	ldp	x21, x22, [sp, #32]
 4e0:	ldp	x29, x30, [sp], #48
 4e4:	ret
 4e8:	str	x1, [x22, #72]
 4ec:	b	49c <remove_error_table+0x8c>
 4f0:	mov	x0, x20
 4f4:	mov	x20, x1
 4f8:	b	440 <remove_error_table+0x30>

00000000000004fc <add_to_error_table>:
 4fc:	ldr	x0, [x0, #8]
 500:	b	36c <add_error_table>

Disassembly of section .text.startup:

0000000000000000 <setup_et_lock>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	w2, #0x1                   	// #1
   8:	mov	w1, #0x0                   	// #0
   c:	mov	x29, sp
  10:	str	x19, [sp, #16]
  14:	adrp	x19, 0 <setup_et_lock>
  18:	add	x19, x19, #0x0
  1c:	add	x0, x19, #0x10
  20:	bl	0 <sem_init>
  24:	mov	w0, #0x1                   	// #1
  28:	str	w0, [x19, #48]
  2c:	ldr	x19, [sp, #16]
  30:	ldp	x29, x30, [sp], #32
  34:	ret

Disassembly of section .text.exit:

0000000000000000 <fini_et_lock>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	adrp	x19, 0 <fini_et_lock>
  10:	add	x19, x19, #0x0
  14:	add	x0, x19, #0x10
  18:	bl	0 <sem_destroy>
  1c:	str	wzr, [x19, #48]
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

et_name.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <error_table_name>:
   0:	adrp	x1, 0 <error_table_name>
   4:	add	x1, x1, #0x0
   8:	lsr	w4, w0, #8
   c:	adrp	x5, 0 <error_table_name>
  10:	mov	x0, x1
  14:	add	x5, x5, #0x0
  18:	mov	w3, #0x18                  	// #24
  1c:	asr	x2, x4, x3
  20:	ands	w2, w2, #0x3f
  24:	b.eq	34 <error_table_name+0x34>  // b.none
  28:	sub	w2, w2, #0x1
  2c:	ldrb	w2, [x5, w2, sxtw]
  30:	strb	w2, [x1], #1
  34:	sub	w3, w3, #0x6
  38:	cmn	w3, #0x6
  3c:	b.ne	1c <error_table_name+0x1c>  // b.any
  40:	strb	wzr, [x1]
  44:	ret

init_et.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <init_error_table>:
   0:	cmp	x1, #0x0
   4:	ccmp	w2, #0x0, #0x4, ne  // ne = any
   8:	b.eq	6c <init_error_table+0x6c>  // b.none
   c:	stp	x29, x30, [sp, #-48]!
  10:	mov	x29, sp
  14:	stp	x19, x20, [sp, #16]
  18:	str	x21, [sp, #32]
  1c:	mov	x21, x0
  20:	cbz	x0, 58 <init_error_table+0x58>
  24:	mov	x20, x1
  28:	mov	w19, w2
  2c:	mov	x0, #0x28                  	// #40
  30:	bl	0 <malloc>
  34:	cbz	x0, 74 <init_error_table+0x74>
  38:	add	x1, x0, #0x10
  3c:	stp	x1, x21, [x0, #8]
  40:	adrp	x1, 0 <_et_dynamic_list>
  44:	str	x20, [x0, #24]
  48:	ldr	x2, [x1]
  4c:	str	x0, [x1]
  50:	str	x2, [x0]
  54:	str	w19, [x0, #32]
  58:	mov	w0, #0x0                   	// #0
  5c:	ldp	x19, x20, [sp, #16]
  60:	ldr	x21, [sp, #32]
  64:	ldp	x29, x30, [sp], #48
  68:	ret
  6c:	mov	w0, #0x0                   	// #0
  70:	ret
  74:	mov	w0, #0xc                   	// #12
  78:	b	5c <init_error_table+0x5c>

com_err.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <default_com_err_proc>:
   0:	stp	x29, x30, [sp, #-160]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	adrp	x19, 0 <stderr>
  10:	stp	x23, x24, [sp, #48]
  14:	mov	x24, x0
  18:	mov	x23, x1
  1c:	ldr	x0, [x19]
  20:	stp	x21, x22, [sp, #32]
  24:	mov	x21, x2
  28:	mov	x22, x3
  2c:	bl	0 <fileno>
  30:	mov	w20, w0
  34:	cbz	x24, 54 <default_com_err_proc+0x54>
  38:	ldr	x1, [x19]
  3c:	mov	x0, x24
  40:	bl	0 <fputs>
  44:	ldr	x1, [x19]
  48:	adrp	x0, 0 <default_com_err_proc>
  4c:	add	x0, x0, #0x0
  50:	bl	0 <fputs>
  54:	cbz	x23, 74 <default_com_err_proc+0x74>
  58:	mov	x0, x23
  5c:	bl	0 <error_message>
  60:	ldr	x1, [x19]
  64:	bl	0 <fputs>
  68:	ldr	x1, [x19]
  6c:	mov	w0, #0x20                  	// #32
  70:	bl	0 <fputc>
  74:	cbz	x21, 98 <default_com_err_proc+0x98>
  78:	ldp	x0, x1, [x22]
  7c:	stp	x0, x1, [sp, #64]
  80:	add	x2, sp, #0x40
  84:	ldp	x0, x1, [x22, #16]
  88:	stp	x0, x1, [sp, #80]
  8c:	ldr	x0, [x19]
  90:	mov	x1, x21
  94:	bl	0 <vfprintf>
  98:	mov	w0, w20
  9c:	bl	0 <isatty>
  a0:	cbz	w0, d4 <default_com_err_proc+0xd4>
  a4:	add	x1, sp, #0x60
  a8:	mov	w0, w20
  ac:	bl	0 <tcgetattr>
  b0:	cbnz	w0, c8 <default_com_err_proc+0xc8>
  b4:	ldr	w0, [sp, #100]
  b8:	mov	w1, #0x5                   	// #5
  bc:	and	w0, w0, w1
  c0:	cmp	w0, w1
  c4:	b.eq	d4 <default_com_err_proc+0xd4>  // b.none
  c8:	ldr	x1, [x19]
  cc:	mov	w0, #0xd                   	// #13
  d0:	bl	0 <fputc>
  d4:	ldr	x1, [x19]
  d8:	mov	w0, #0xa                   	// #10
  dc:	bl	0 <fputc>
  e0:	ldr	x0, [x19]
  e4:	bl	0 <fflush>
  e8:	ldp	x19, x20, [sp, #16]
  ec:	ldp	x21, x22, [sp, #32]
  f0:	ldp	x23, x24, [sp, #48]
  f4:	ldp	x29, x30, [sp], #160
  f8:	ret

00000000000000fc <com_err_va>:
  fc:	stp	x29, x30, [sp, #-48]!
 100:	mov	x29, sp
 104:	ldp	x4, x5, [x3]
 108:	stp	x4, x5, [sp, #16]
 10c:	ldp	x4, x5, [x3, #16]
 110:	adrp	x3, 0 <default_com_err_proc>
 114:	stp	x4, x5, [sp, #32]
 118:	ldr	x4, [x3]
 11c:	add	x3, sp, #0x10
 120:	blr	x4
 124:	ldp	x29, x30, [sp], #48
 128:	ret

000000000000012c <com_err>:
 12c:	stp	x29, x30, [sp, #-256]!
 130:	mov	x29, sp
 134:	stp	x3, x4, [sp, #216]
 138:	adrp	x4, 0 <default_com_err_proc>
 13c:	ldr	x3, [x4]
 140:	str	q0, [sp, #80]
 144:	str	q1, [sp, #96]
 148:	str	q2, [sp, #112]
 14c:	str	q3, [sp, #128]
 150:	str	q4, [sp, #144]
 154:	str	q5, [sp, #160]
 158:	str	q6, [sp, #176]
 15c:	str	q7, [sp, #192]
 160:	stp	x5, x6, [sp, #232]
 164:	str	x7, [sp, #248]
 168:	cbnz	x3, 178 <com_err+0x4c>
 16c:	adrp	x3, 0 <default_com_err_proc>
 170:	add	x3, x3, #0x0
 174:	str	x3, [x4]
 178:	add	x3, sp, #0x100
 17c:	stp	x3, x3, [sp, #48]
 180:	add	x3, sp, #0xd0
 184:	str	x3, [sp, #64]
 188:	mov	w3, #0xffffffd8            	// #-40
 18c:	str	w3, [sp, #72]
 190:	mov	w3, #0xffffff80            	// #-128
 194:	str	w3, [sp, #76]
 198:	add	x3, sp, #0x10
 19c:	ldp	x4, x5, [sp, #48]
 1a0:	stp	x4, x5, [sp, #16]
 1a4:	ldp	x4, x5, [sp, #64]
 1a8:	stp	x4, x5, [sp, #32]
 1ac:	bl	fc <com_err_va>
 1b0:	ldp	x29, x30, [sp], #256
 1b4:	ret

00000000000001b8 <set_com_err_hook>:
 1b8:	adrp	x2, 0 <default_com_err_proc>
 1bc:	mov	x1, x0
 1c0:	ldr	x0, [x2]
 1c4:	cbnz	x1, 1d0 <set_com_err_hook+0x18>
 1c8:	adrp	x1, 0 <default_com_err_proc>
 1cc:	add	x1, x1, #0x0
 1d0:	str	x1, [x2]
 1d4:	ret

00000000000001d8 <reset_com_err_hook>:
 1d8:	adrp	x2, 0 <default_com_err_proc>
 1dc:	adrp	x1, 0 <default_com_err_proc>
 1e0:	add	x1, x1, #0x0
 1e4:	ldr	x0, [x2]
 1e8:	str	x1, [x2]
 1ec:	ret

com_right.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <com_right>:
   0:	cbz	x0, 30 <com_right+0x30>
   4:	ldr	x2, [x0, #8]
   8:	ldr	x3, [x2, #8]
   c:	cmp	x3, x1
  10:	b.gt	34 <com_right+0x34>
  14:	ldrsw	x4, [x2, #16]
  18:	add	x4, x4, x3
  1c:	cmp	x4, x1
  20:	b.le	34 <com_right+0x34>
  24:	ldr	x0, [x2]
  28:	sub	x1, x1, x3
  2c:	ldr	x0, [x0, x1, lsl #3]
  30:	ret
  34:	ldr	x0, [x0]
  38:	b	0 <com_right>

000000000000003c <com_right_r>:
  3c:	stp	x29, x30, [sp, #-32]!
  40:	mov	x4, x2
  44:	mov	x29, sp
  48:	str	x19, [sp, #16]
  4c:	mov	x19, x3
  50:	cbz	x0, 94 <com_right_r+0x58>
  54:	ldr	x2, [x0, #8]
  58:	ldr	x3, [x2, #8]
  5c:	cmp	x3, x1
  60:	b.gt	a0 <com_right_r+0x64>
  64:	ldrsw	x5, [x2, #16]
  68:	add	x5, x5, x3
  6c:	cmp	x5, x1
  70:	b.le	a0 <com_right_r+0x64>
  74:	ldr	x0, [x2]
  78:	sub	x1, x1, x3
  7c:	mov	x2, x19
  80:	ldr	x1, [x0, x1, lsl #3]
  84:	mov	x0, x4
  88:	bl	0 <strncpy>
  8c:	add	x19, x0, x19
  90:	sturb	wzr, [x19, #-1]
  94:	ldr	x19, [sp, #16]
  98:	ldp	x29, x30, [sp], #32
  9c:	ret
  a0:	ldr	x0, [x0]
  a4:	b	50 <com_right_r+0x14>

00000000000000a8 <initialize_error_table_r>:
  a8:	stp	x29, x30, [sp, #-48]!
  ac:	mov	x29, sp
  b0:	stp	x19, x20, [sp, #16]
  b4:	mov	x19, x0
  b8:	mov	x20, x1
  bc:	stp	x21, x22, [sp, #32]
  c0:	mov	w22, w2
  c4:	mov	x21, x3
  c8:	ldr	x0, [x0]
  cc:	cbnz	x0, 100 <initialize_error_table_r+0x58>
  d0:	mov	x0, #0x28                  	// #40
  d4:	bl	0 <malloc>
  d8:	cbz	x0, f0 <initialize_error_table_r+0x48>
  dc:	add	x1, x0, #0x10
  e0:	stp	xzr, x1, [x0]
  e4:	stp	x20, x21, [x0, #16]
  e8:	str	w22, [x0, #32]
  ec:	str	x0, [x19]
  f0:	ldp	x19, x20, [sp, #16]
  f4:	ldp	x21, x22, [sp, #32]
  f8:	ldp	x29, x30, [sp], #48
  fc:	ret
 100:	ldr	x1, [x0, #8]
 104:	ldr	x1, [x1]
 108:	cmp	x1, x20
 10c:	b.eq	f0 <initialize_error_table_r+0x48>  // b.none
 110:	mov	x19, x0
 114:	b	c8 <initialize_error_table_r+0x20>

0000000000000118 <free_error_table>:
 118:	cbnz	x0, 120 <free_error_table+0x8>
 11c:	ret
 120:	stp	x29, x30, [sp, #-32]!
 124:	mov	x29, sp
 128:	str	x19, [sp, #16]
 12c:	ldr	x19, [x0]
 130:	bl	0 <free>
 134:	mov	x0, x19
 138:	cbnz	x19, 12c <free_error_table+0x14>
 13c:	ldr	x19, [sp, #16]
 140:	ldp	x29, x30, [sp], #32
 144:	ret
