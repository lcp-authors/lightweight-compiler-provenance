
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//seq_clang_-O3:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000000fb0 <_init>:
 fb0:	stp	x29, x30, [sp, #-16]!
 fb4:	mov	x29, sp
 fb8:	bl	11d0 <call_weak_fn>
 fbc:	ldp	x29, x30, [sp], #16
 fc0:	ret

Disassembly of section .plt:

0000000000000fd0 <.plt>:
     fd0:	stp	x16, x30, [sp, #-16]!
     fd4:	adrp	x16, 14000 <__FRAME_END__+0x100ac>
     fd8:	ldr	x17, [x16, #4088]
     fdc:	add	x16, x16, #0xff8
     fe0:	br	x17
     fe4:	nop
     fe8:	nop
     fec:	nop

0000000000000ff0 <memcpy@plt>:
     ff0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
     ff4:	ldr	x17, [x16]
     ff8:	add	x16, x16, #0x0
     ffc:	br	x17

0000000000001000 <all_digits@plt>:
    1000:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1004:	ldr	x17, [x16, #8]
    1008:	add	x16, x16, #0x8
    100c:	br	x17

0000000000001010 <fputs@plt>:
    1010:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1014:	ldr	x17, [x16, #16]
    1018:	add	x16, x16, #0x10
    101c:	br	x17

0000000000001020 <builtin_error@plt>:
    1020:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1024:	ldr	x17, [x16, #24]
    1028:	add	x16, x16, #0x18
    102c:	br	x17

0000000000001030 <builtin_warning@plt>:
    1030:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1034:	ldr	x17, [x16, #32]
    1038:	add	x16, x16, #0x20
    103c:	br	x17

0000000000001040 <__cxa_finalize@plt>:
    1040:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1044:	ldr	x17, [x16, #40]
    1048:	add	x16, x16, #0x28
    104c:	br	x17

0000000000001050 <sprintf@plt>:
    1050:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1054:	ldr	x17, [x16, #48]
    1058:	add	x16, x16, #0x30
    105c:	br	x17

0000000000001060 <snprintf@plt>:
    1060:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1064:	ldr	x17, [x16, #56]
    1068:	add	x16, x16, #0x38
    106c:	br	x17

0000000000001070 <locale_decpoint@plt>:
    1070:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1074:	ldr	x17, [x16, #64]
    1078:	add	x16, x16, #0x40
    107c:	br	x17

0000000000001080 <print_intseq@plt>:
    1080:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1084:	ldr	x17, [x16, #72]
    1088:	add	x16, x16, #0x48
    108c:	br	x17

0000000000001090 <builtin_help@plt>:
    1090:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1094:	ldr	x17, [x16, #80]
    1098:	add	x16, x16, #0x50
    109c:	br	x17

00000000000010a0 <xmalloc@plt>:
    10a0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10a4:	ldr	x17, [x16, #88]
    10a8:	add	x16, x16, #0x58
    10ac:	br	x17

00000000000010b0 <builtin_usage@plt>:
    10b0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10b4:	ldr	x17, [x16, #96]
    10b8:	add	x16, x16, #0x60
    10bc:	br	x17

00000000000010c0 <strerror@plt>:
    10c0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10c4:	ldr	x17, [x16, #104]
    10c8:	add	x16, x16, #0x68
    10cc:	br	x17

00000000000010d0 <__gmon_start__@plt>:
    10d0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10d4:	ldr	x17, [x16, #112]
    10d8:	add	x16, x16, #0x70
    10dc:	br	x17

00000000000010e0 <__ctype_b_loc@plt>:
    10e0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10e4:	ldr	x17, [x16, #120]
    10e8:	add	x16, x16, #0x78
    10ec:	br	x17

00000000000010f0 <strtold@plt>:
    10f0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10f4:	ldr	x17, [x16, #128]
    10f8:	add	x16, x16, #0x80
    10fc:	br	x17

0000000000001100 <print_fltseq@plt>:
    1100:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1104:	ldr	x17, [x16, #136]
    1108:	add	x16, x16, #0x88
    110c:	br	x17

0000000000001110 <free@plt>:
    1110:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1114:	ldr	x17, [x16, #144]
    1118:	add	x16, x16, #0x90
    111c:	br	x17

0000000000001120 <internal_getopt@plt>:
    1120:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1124:	ldr	x17, [x16, #152]
    1128:	add	x16, x16, #0x98
    112c:	br	x17

0000000000001130 <reset_internal_getopt@plt>:
    1130:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1134:	ldr	x17, [x16, #160]
    1138:	add	x16, x16, #0xa0
    113c:	br	x17

0000000000001140 <strspn@plt>:
    1140:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1144:	ldr	x17, [x16, #168]
    1148:	add	x16, x16, #0xa8
    114c:	br	x17

0000000000001150 <strchr@plt>:
    1150:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1154:	ldr	x17, [x16, #176]
    1158:	add	x16, x16, #0xb0
    115c:	br	x17

0000000000001160 <sh_chkwrite@plt>:
    1160:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1164:	ldr	x17, [x16, #184]
    1168:	add	x16, x16, #0xb8
    116c:	br	x17

0000000000001170 <strcpy@plt>:
    1170:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1174:	ldr	x17, [x16, #192]
    1178:	add	x16, x16, #0xc0
    117c:	br	x17

0000000000001180 <termsig_handler@plt>:
    1180:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1184:	ldr	x17, [x16, #200]
    1188:	add	x16, x16, #0xc8
    118c:	br	x17

0000000000001190 <throw_to_top_level@plt>:
    1190:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1194:	ldr	x17, [x16, #208]
    1198:	add	x16, x16, #0xd0
    119c:	br	x17

00000000000011a0 <printf@plt>:
    11a0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11a4:	ldr	x17, [x16, #216]
    11a8:	add	x16, x16, #0xd8
    11ac:	br	x17

00000000000011b0 <__errno_location@plt>:
    11b0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11b4:	ldr	x17, [x16, #224]
    11b8:	add	x16, x16, #0xe0
    11bc:	br	x17

00000000000011c0 <sh_invalidnum@plt>:
    11c0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11c4:	ldr	x17, [x16, #232]
    11c8:	add	x16, x16, #0xe8
    11cc:	br	x17

Disassembly of section .text:

00000000000011d0 <call_weak_fn>:
    11d0:	adrp	x0, 14000 <__FRAME_END__+0x100ac>
    11d4:	ldr	x0, [x0, #4032]
    11d8:	cbz	x0, 11e0 <call_weak_fn+0x10>
    11dc:	b	10d0 <__gmon_start__@plt>
    11e0:	ret
    11e4:	nop

00000000000011e8 <deregister_tm_clones>:
    11e8:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    11ec:	add	x0, x0, #0x1a8
    11f0:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    11f4:	add	x1, x1, #0x1a8
    11f8:	cmp	x1, x0
    11fc:	b.eq	1214 <deregister_tm_clones+0x2c>  // b.none
    1200:	adrp	x1, 14000 <__FRAME_END__+0x100ac>
    1204:	ldr	x1, [x1, #3992]
    1208:	cbz	x1, 1214 <deregister_tm_clones+0x2c>
    120c:	mov	x16, x1
    1210:	br	x16
    1214:	ret

0000000000001218 <register_tm_clones>:
    1218:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    121c:	add	x0, x0, #0x1a8
    1220:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    1224:	add	x1, x1, #0x1a8
    1228:	sub	x1, x1, x0
    122c:	lsr	x2, x1, #63
    1230:	add	x1, x2, x1, asr #3
    1234:	cmp	xzr, x1, asr #1
    1238:	asr	x1, x1, #1
    123c:	b.eq	1254 <register_tm_clones+0x3c>  // b.none
    1240:	adrp	x2, 14000 <__FRAME_END__+0x100ac>
    1244:	ldr	x2, [x2, #4064]
    1248:	cbz	x2, 1254 <register_tm_clones+0x3c>
    124c:	mov	x16, x2
    1250:	br	x16
    1254:	ret

0000000000001258 <__do_global_dtors_aux>:
    1258:	stp	x29, x30, [sp, #-32]!
    125c:	mov	x29, sp
    1260:	str	x19, [sp, #16]
    1264:	adrp	x19, 15000 <memcpy@GLIBC_2.17>
    1268:	ldrb	w0, [x19, #424]
    126c:	cbnz	w0, 1294 <__do_global_dtors_aux+0x3c>
    1270:	adrp	x0, 14000 <__FRAME_END__+0x100ac>
    1274:	ldr	x0, [x0, #4000]
    1278:	cbz	x0, 1288 <__do_global_dtors_aux+0x30>
    127c:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    1280:	ldr	x0, [x0, #240]
    1284:	bl	1040 <__cxa_finalize@plt>
    1288:	bl	11e8 <deregister_tm_clones>
    128c:	mov	w0, #0x1                   	// #1
    1290:	strb	w0, [x19, #424]
    1294:	ldr	x19, [sp, #16]
    1298:	ldp	x29, x30, [sp], #32
    129c:	ret

00000000000012a0 <frame_dummy>:
    12a0:	b	1218 <register_tm_clones>

00000000000012a4 <print_fltseq>:
    12a4:	sub	sp, sp, #0x90
    12a8:	stp	x29, x30, [sp, #64]
    12ac:	add	x29, sp, #0x40
    12b0:	str	x25, [sp, #80]
    12b4:	stp	x24, x23, [sp, #96]
    12b8:	stp	x22, x21, [sp, #112]
    12bc:	stp	x20, x19, [sp, #128]
    12c0:	stur	q2, [x29, #-16]
    12c4:	stp	q1, q0, [sp, #16]
    12c8:	mov	x19, x0
    12cc:	bl	2d08 <__letf2>
    12d0:	ldp	q1, q0, [sp, #16]
    12d4:	cmp	w0, #0x0
    12d8:	cset	w20, le
    12dc:	bl	2bc0 <__getf2>
    12e0:	adrp	x8, 3000 <__multf3+0x1b8>
    12e4:	ldr	q1, [x8, #2160]
    12e8:	ldur	q0, [x29, #-16]
    12ec:	cmp	w0, #0x0
    12f0:	cset	w21, ge  // ge = tcont
    12f4:	str	q1, [sp]
    12f8:	bl	2bc0 <__getf2>
    12fc:	cmp	w0, #0x0
    1300:	csel	w8, w20, w21, ge  // ge = tcont
    1304:	cmp	w8, #0x1
    1308:	b.ne	1474 <print_fltseq+0x1d0>  // b.any
    130c:	ldur	q0, [x29, #-16]
    1310:	ldr	q1, [sp]
    1314:	bl	2bc0 <__getf2>
    1318:	adrp	x22, 14000 <__FRAME_END__+0x100ac>
    131c:	adrp	x23, 14000 <__FRAME_END__+0x100ac>
    1320:	adrp	x25, 14000 <__FRAME_END__+0x100ac>
    1324:	ldr	x22, [x22, #4048]
    1328:	ldr	x23, [x23, #4024]
    132c:	ldr	x25, [x25, #4016]
    1330:	adrp	x21, 3000 <__multf3+0x1b8>
    1334:	add	x21, x21, #0xc96
    1338:	mov	w20, #0x1                   	// #1
    133c:	adrp	x24, 15000 <memcpy@GLIBC_2.17>
    1340:	cmp	w0, #0x0
    1344:	b.lt	13d0 <print_fltseq+0x12c>  // b.tstop
    1348:	ldr	q0, [sp, #32]
    134c:	str	q0, [sp]
    1350:	ldr	w8, [x22]
    1354:	cbz	w8, 1360 <print_fltseq+0xbc>
    1358:	ldr	w0, [x22]
    135c:	bl	1180 <termsig_handler@plt>
    1360:	ldr	w8, [x23]
    1364:	cbz	w8, 136c <print_fltseq+0xc8>
    1368:	bl	1190 <throw_to_top_level@plt>
    136c:	ldrb	w8, [x21]
    1370:	cbz	w8, 1388 <print_fltseq+0xe4>
    1374:	ldr	x1, [x25]
    1378:	mov	x0, x21
    137c:	bl	1010 <fputs@plt>
    1380:	cmn	w0, #0x1
    1384:	b.eq	147c <print_fltseq+0x1d8>  // b.none
    1388:	ldr	q0, [sp]
    138c:	mov	x0, x19
    1390:	bl	11a0 <printf@plt>
    1394:	tbnz	w0, #31, 147c <print_fltseq+0x1d8>
    1398:	ldr	x21, [x24, #448]
    139c:	mov	w0, w20
    13a0:	bl	3630 <__floatsitf>
    13a4:	ldur	q1, [x29, #-16]
    13a8:	bl	2e48 <__multf3>
    13ac:	ldr	q1, [sp, #32]
    13b0:	bl	1f90 <__addtf3>
    13b4:	ldr	q1, [sp, #16]
    13b8:	add	w20, w20, #0x1
    13bc:	str	q0, [sp]
    13c0:	bl	2d08 <__letf2>
    13c4:	cmp	w0, #0x0
    13c8:	b.le	1350 <print_fltseq+0xac>
    13cc:	b	1454 <print_fltseq+0x1b0>
    13d0:	ldr	q0, [sp, #32]
    13d4:	str	q0, [sp]
    13d8:	ldr	w8, [x22]
    13dc:	cbz	w8, 13e8 <print_fltseq+0x144>
    13e0:	ldr	w0, [x22]
    13e4:	bl	1180 <termsig_handler@plt>
    13e8:	ldr	w8, [x23]
    13ec:	cbz	w8, 13f4 <print_fltseq+0x150>
    13f0:	bl	1190 <throw_to_top_level@plt>
    13f4:	ldrb	w8, [x21]
    13f8:	cbz	w8, 1410 <print_fltseq+0x16c>
    13fc:	ldr	x1, [x25]
    1400:	mov	x0, x21
    1404:	bl	1010 <fputs@plt>
    1408:	cmn	w0, #0x1
    140c:	b.eq	147c <print_fltseq+0x1d8>  // b.none
    1410:	ldr	q0, [sp]
    1414:	mov	x0, x19
    1418:	bl	11a0 <printf@plt>
    141c:	tbnz	w0, #31, 147c <print_fltseq+0x1d8>
    1420:	ldr	x21, [x24, #448]
    1424:	mov	w0, w20
    1428:	bl	3630 <__floatsitf>
    142c:	ldur	q1, [x29, #-16]
    1430:	bl	2e48 <__multf3>
    1434:	ldr	q1, [sp, #32]
    1438:	bl	1f90 <__addtf3>
    143c:	ldr	q1, [sp, #16]
    1440:	add	w20, w20, #0x1
    1444:	str	q0, [sp]
    1448:	bl	2bc0 <__getf2>
    144c:	cmp	w0, #0x0
    1450:	b.ge	13d8 <print_fltseq+0x134>  // b.tcont
    1454:	adrp	x8, 14000 <__FRAME_END__+0x100ac>
    1458:	ldr	x8, [x8, #4016]
    145c:	adrp	x0, 3000 <__multf3+0x1b8>
    1460:	add	x0, x0, #0xcfe
    1464:	ldr	x1, [x8]
    1468:	bl	1010 <fputs@plt>
    146c:	cmn	w0, #0x1
    1470:	b.eq	147c <print_fltseq+0x1d8>  // b.none
    1474:	mov	w0, wzr
    1478:	b	1480 <print_fltseq+0x1dc>
    147c:	mov	w0, #0x1                   	// #1
    1480:	ldp	x20, x19, [sp, #128]
    1484:	ldp	x22, x21, [sp, #112]
    1488:	ldp	x24, x23, [sp, #96]
    148c:	ldr	x25, [sp, #80]
    1490:	ldp	x29, x30, [sp, #64]
    1494:	add	sp, sp, #0x90
    1498:	b	1160 <sh_chkwrite@plt>

000000000000149c <width_needed>:
    149c:	mov	x8, x0
    14a0:	cmp	x8, #0x0
    14a4:	cneg	x9, x8, mi  // mi = first
    14a8:	mov	x8, #0x6666666666666666    	// #7378697629483820646
    14ac:	lsr	x0, x0, #63
    14b0:	movk	x8, #0x6667
    14b4:	smulh	x10, x9, x8
    14b8:	asr	x11, x10, #2
    14bc:	add	x9, x9, #0x9
    14c0:	add	x10, x11, x10, lsr #63
    14c4:	cmp	x9, #0x12
    14c8:	add	w0, w0, #0x1
    14cc:	mov	x9, x10
    14d0:	b.hi	14b4 <width_needed+0x18>  // b.pmore
    14d4:	ret

00000000000014d8 <print_intseq>:
    14d8:	sub	sp, sp, #0x80
    14dc:	stp	x29, x30, [sp, #32]
    14e0:	stp	x28, x27, [sp, #48]
    14e4:	stp	x26, x25, [sp, #64]
    14e8:	stp	x24, x23, [sp, #80]
    14ec:	stp	x22, x21, [sp, #96]
    14f0:	stp	x20, x19, [sp, #112]
    14f4:	adrp	x23, 15000 <memcpy@GLIBC_2.17>
    14f8:	ldrb	w8, [x23, #432]
    14fc:	mov	x19, x2
    1500:	mov	x20, x1
    1504:	mov	x21, x0
    1508:	cmp	w8, #0x1
    150c:	add	x29, sp, #0x20
    1510:	b.ne	15a0 <print_intseq+0xc8>  // b.any
    1514:	cmp	x21, #0x0
    1518:	mov	x9, #0x6666666666666666    	// #7378697629483820646
    151c:	lsr	x8, x21, #63
    1520:	cneg	x10, x21, mi  // mi = first
    1524:	movk	x9, #0x6667
    1528:	smulh	x11, x10, x9
    152c:	asr	x12, x11, #2
    1530:	add	x10, x10, #0x9
    1534:	add	x11, x12, x11, lsr #63
    1538:	cmp	x10, #0x12
    153c:	add	w8, w8, #0x1
    1540:	mov	x10, x11
    1544:	b.hi	1528 <print_intseq+0x50>  // b.pmore
    1548:	cmp	x20, #0x0
    154c:	mov	x11, #0x6666666666666666    	// #7378697629483820646
    1550:	lsr	x9, x20, #63
    1554:	sub	w10, w8, #0x1
    1558:	cneg	x12, x20, mi  // mi = first
    155c:	movk	x11, #0x6667
    1560:	smulh	x13, x12, x11
    1564:	asr	x14, x13, #2
    1568:	add	x12, x12, #0x9
    156c:	add	x13, x14, x13, lsr #63
    1570:	cmp	x12, #0x12
    1574:	add	w9, w9, #0x1
    1578:	mov	x12, x13
    157c:	b.hi	1560 <print_intseq+0x88>  // b.pmore
    1580:	sub	w11, w9, #0x1
    1584:	cmp	w10, w11
    1588:	adrp	x2, 3000 <__multf3+0x1b8>
    158c:	csel	w3, w9, w8, cc  // cc = lo, ul, last
    1590:	add	x2, x2, #0x8b0
    1594:	add	x0, sp, #0xc
    1598:	mov	w1, #0x14                  	// #20
    159c:	bl	1060 <snprintf@plt>
    15a0:	cmp	x21, x20
    15a4:	cset	w8, le
    15a8:	cset	w9, ge  // ge = tcont
    15ac:	csel	w8, w9, w8, gt
    15b0:	cmp	w8, #0x1
    15b4:	b.ne	167c <print_intseq+0x1a4>  // b.any
    15b8:	adrp	x24, 14000 <__FRAME_END__+0x100ac>
    15bc:	adrp	x25, 14000 <__FRAME_END__+0x100ac>
    15c0:	ldr	x24, [x24, #4048]
    15c4:	ldr	x25, [x25, #4024]
    15c8:	adrp	x22, 3000 <__multf3+0x1b8>
    15cc:	adrp	x26, 3000 <__multf3+0x1b8>
    15d0:	add	x22, x22, #0xc96
    15d4:	add	x26, x26, #0x8bb
    15d8:	add	x27, sp, #0xc
    15dc:	adrp	x28, 15000 <memcpy@GLIBC_2.17>
    15e0:	cmp	x21, x20
    15e4:	b.le	1634 <print_intseq+0x15c>
    15e8:	ldr	w8, [x24]
    15ec:	cbz	w8, 15f8 <print_intseq+0x120>
    15f0:	ldr	w0, [x24]
    15f4:	bl	1180 <termsig_handler@plt>
    15f8:	ldr	w8, [x25]
    15fc:	cbz	w8, 1604 <print_intseq+0x12c>
    1600:	bl	1190 <throw_to_top_level@plt>
    1604:	ldrb	w8, [x23, #432]
    1608:	mov	x1, x22
    160c:	mov	x2, x21
    1610:	cmp	w8, #0x0
    1614:	csel	x0, x27, x26, ne  // ne = any
    1618:	bl	11a0 <printf@plt>
    161c:	tbnz	w0, #31, 16a0 <print_intseq+0x1c8>
    1620:	ldr	x22, [x28, #448]
    1624:	add	x21, x21, x19
    1628:	cmp	x21, x20
    162c:	b.ge	15e8 <print_intseq+0x110>  // b.tcont
    1630:	b	167c <print_intseq+0x1a4>
    1634:	ldr	w8, [x24]
    1638:	cbz	w8, 1644 <print_intseq+0x16c>
    163c:	ldr	w0, [x24]
    1640:	bl	1180 <termsig_handler@plt>
    1644:	ldr	w8, [x25]
    1648:	cbz	w8, 1650 <print_intseq+0x178>
    164c:	bl	1190 <throw_to_top_level@plt>
    1650:	ldrb	w8, [x23, #432]
    1654:	mov	x1, x22
    1658:	mov	x2, x21
    165c:	cmp	w8, #0x0
    1660:	csel	x0, x27, x26, ne  // ne = any
    1664:	bl	11a0 <printf@plt>
    1668:	tbnz	w0, #31, 16a0 <print_intseq+0x1c8>
    166c:	ldr	x22, [x28, #448]
    1670:	add	x21, x21, x19
    1674:	cmp	x21, x20
    1678:	b.le	1634 <print_intseq+0x15c>
    167c:	adrp	x8, 14000 <__FRAME_END__+0x100ac>
    1680:	ldr	x8, [x8, #4016]
    1684:	adrp	x0, 3000 <__multf3+0x1b8>
    1688:	add	x0, x0, #0xcfe
    168c:	ldr	x1, [x8]
    1690:	bl	1010 <fputs@plt>
    1694:	cmn	w0, #0x1
    1698:	cset	w0, eq  // eq = none
    169c:	b	16a4 <print_intseq+0x1cc>
    16a0:	mov	w0, #0x1                   	// #1
    16a4:	ldp	x20, x19, [sp, #112]
    16a8:	ldp	x22, x21, [sp, #96]
    16ac:	ldp	x24, x23, [sp, #80]
    16b0:	ldp	x26, x25, [sp, #64]
    16b4:	ldp	x28, x27, [sp, #48]
    16b8:	ldp	x29, x30, [sp, #32]
    16bc:	add	sp, sp, #0x80
    16c0:	b	1160 <sh_chkwrite@plt>

00000000000016c4 <seq_builtin>:
    16c4:	sub	sp, sp, #0xb0
    16c8:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    16cc:	adrp	x9, 3000 <__multf3+0x1b8>
    16d0:	add	x8, x8, #0x1b0
    16d4:	add	x9, x9, #0xcfe
    16d8:	stp	x29, x30, [sp, #80]
    16dc:	stp	x28, x27, [sp, #96]
    16e0:	stp	x26, x25, [sp, #112]
    16e4:	stp	x24, x23, [sp, #128]
    16e8:	stp	x22, x21, [sp, #144]
    16ec:	stp	x20, x19, [sp, #160]
    16f0:	add	x29, sp, #0x50
    16f4:	mov	x20, x0
    16f8:	strb	wzr, [x8]
    16fc:	str	x9, [x8, #16]
    1700:	bl	1130 <reset_internal_getopt@plt>
    1704:	adrp	x23, 14000 <__FRAME_END__+0x100ac>
    1708:	adrp	x25, 14000 <__FRAME_END__+0x100ac>
    170c:	ldr	x23, [x23, #4008]
    1710:	ldr	x25, [x25, #4040]
    1714:	adrp	x21, 3000 <__multf3+0x1b8>
    1718:	mov	x19, xzr
    171c:	add	x21, x21, #0x8c1
    1720:	adrp	x26, 15000 <memcpy@GLIBC_2.17>
    1724:	adrp	x24, 15000 <memcpy@GLIBC_2.17>
    1728:	mov	w27, #0x1                   	// #1
    172c:	ldr	x8, [x23]
    1730:	cmp	x8, #0x0
    1734:	csel	x22, x20, x8, eq  // eq = none
    1738:	cbz	x22, 1774 <seq_builtin+0xb0>
    173c:	ldr	x8, [x22, #8]
    1740:	cbz	x8, 1774 <seq_builtin+0xb0>
    1744:	ldr	x8, [x8]
    1748:	cbz	x8, 1774 <seq_builtin+0xb0>
    174c:	ldrb	w9, [x8]
    1750:	cmp	w9, #0x2d
    1754:	b.ne	1774 <seq_builtin+0xb0>  // b.any
    1758:	ldrb	w8, [x8, #1]
    175c:	cmp	w8, #0x2e
    1760:	b.eq	1924 <seq_builtin+0x260>  // b.none
    1764:	sub	w8, w8, #0x30
    1768:	and	w8, w8, #0xff
    176c:	cmp	w8, #0x9
    1770:	b.ls	1924 <seq_builtin+0x260>  // b.plast
    1774:	mov	x0, x20
    1778:	mov	x1, x21
    177c:	bl	1120 <internal_getopt@plt>
    1780:	cmp	w0, #0x72
    1784:	b.gt	17a8 <seq_builtin+0xe4>
    1788:	cmn	w0, #0x63
    178c:	b.eq	17cc <seq_builtin+0x108>  // b.none
    1790:	cmn	w0, #0x1
    1794:	b.eq	17d4 <seq_builtin+0x110>  // b.none
    1798:	cmp	w0, #0x66
    179c:	b.ne	1810 <seq_builtin+0x14c>  // b.any
    17a0:	ldr	x19, [x25]
    17a4:	b	172c <seq_builtin+0x68>
    17a8:	cmp	w0, #0x73
    17ac:	b.eq	17c0 <seq_builtin+0xfc>  // b.none
    17b0:	cmp	w0, #0x77
    17b4:	b.ne	1810 <seq_builtin+0x14c>  // b.any
    17b8:	strb	w27, [x24, #432]
    17bc:	b	172c <seq_builtin+0x68>
    17c0:	ldr	x8, [x25]
    17c4:	str	x8, [x26, #448]
    17c8:	b	172c <seq_builtin+0x68>
    17cc:	bl	1090 <builtin_help@plt>
    17d0:	b	1814 <seq_builtin+0x150>
    17d4:	adrp	x8, 14000 <__FRAME_END__+0x100ac>
    17d8:	ldr	x8, [x8, #4056]
    17dc:	ldr	x22, [x8]
    17e0:	cbz	x22, 1804 <seq_builtin+0x140>
    17e4:	mov	w27, wzr
    17e8:	mov	x9, x22
    17ec:	mov	x8, x9
    17f0:	ldr	x9, [x9]
    17f4:	add	w27, w27, #0x1
    17f8:	cbnz	x9, 17ec <seq_builtin+0x128>
    17fc:	cmp	w27, #0x4
    1800:	b.cc	1838 <seq_builtin+0x174>  // b.lo, b.ul, b.last
    1804:	bl	10b0 <builtin_usage@plt>
    1808:	mov	w0, #0x1                   	// #1
    180c:	b	1818 <seq_builtin+0x154>
    1810:	bl	10b0 <builtin_usage@plt>
    1814:	mov	w0, #0x102                 	// #258
    1818:	ldp	x20, x19, [sp, #160]
    181c:	ldp	x22, x21, [sp, #144]
    1820:	ldp	x24, x23, [sp, #128]
    1824:	ldp	x26, x25, [sp, #112]
    1828:	ldp	x28, x27, [sp, #96]
    182c:	ldp	x29, x30, [sp, #80]
    1830:	add	sp, sp, #0xb0
    1834:	ret
    1838:	adrp	x25, 15000 <memcpy@GLIBC_2.17>
    183c:	strb	wzr, [x25, #436]
    1840:	ldr	x8, [x8, #8]
    1844:	ldr	x20, [x8]
    1848:	bl	11b0 <__errno_location@plt>
    184c:	mov	x23, x0
    1850:	str	wzr, [x0]
    1854:	sub	x1, x29, #0x8
    1858:	mov	x0, x20
    185c:	bl	10f0 <strtold@plt>
    1860:	ldur	x8, [x29, #-8]
    1864:	ldrb	w8, [x8]
    1868:	cbz	w8, 1878 <seq_builtin+0x1b4>
    186c:	mov	x0, x20
    1870:	bl	11c0 <sh_invalidnum@plt>
    1874:	b	18a0 <seq_builtin+0x1dc>
    1878:	ldr	w8, [x23]
    187c:	cmp	w8, #0x22
    1880:	b.ne	18ac <seq_builtin+0x1e8>  // b.any
    1884:	mov	w0, #0x22                  	// #34
    1888:	bl	10c0 <strerror@plt>
    188c:	mov	x2, x0
    1890:	adrp	x0, 3000 <__multf3+0x1b8>
    1894:	add	x0, x0, #0xc42
    1898:	mov	x1, x20
    189c:	bl	1020 <builtin_error@plt>
    18a0:	mov	w0, #0x1                   	// #1
    18a4:	strb	w0, [x25, #436]
    18a8:	b	1818 <seq_builtin+0x154>
    18ac:	adrp	x26, 3000 <__multf3+0x1b8>
    18b0:	ldr	q1, [x26, #2160]
    18b4:	ldrb	w21, [x25, #436]
    18b8:	stur	q0, [x29, #-32]
    18bc:	str	q1, [sp, #32]
    18c0:	bl	2ab8 <__eqtf2>
    18c4:	cmp	w0, #0x0
    18c8:	b.ne	18d4 <seq_builtin+0x210>  // b.any
    18cc:	ldr	q0, [sp, #32]
    18d0:	stur	q0, [x29, #-32]
    18d4:	tbz	w21, #0, 18e0 <seq_builtin+0x21c>
    18d8:	mov	w0, #0x1                   	// #1
    18dc:	b	1818 <seq_builtin+0x154>
    18e0:	ldr	q1, [x26, #2160]
    18e4:	cmp	w27, #0x2
    18e8:	str	q1, [sp]
    18ec:	b.cc	1934 <seq_builtin+0x270>  // b.lo, b.ul, b.last
    18f0:	strb	wzr, [x25, #436]
    18f4:	ldr	x8, [x22, #8]
    18f8:	sub	x1, x29, #0x8
    18fc:	ldr	x21, [x8]
    1900:	str	wzr, [x23]
    1904:	mov	x0, x21
    1908:	bl	10f0 <strtold@plt>
    190c:	ldur	x8, [x29, #-8]
    1910:	ldrb	w8, [x8]
    1914:	cbz	w8, 1a04 <seq_builtin+0x340>
    1918:	mov	x0, x21
    191c:	bl	11c0 <sh_invalidnum@plt>
    1920:	b	18a0 <seq_builtin+0x1dc>
    1924:	adrp	x8, 14000 <__FRAME_END__+0x100ac>
    1928:	ldr	x8, [x8, #4056]
    192c:	str	x22, [x8]
    1930:	b	17e4 <seq_builtin+0x120>
    1934:	adrp	x8, 3000 <__multf3+0x1b8>
    1938:	ldr	q0, [x8, #2176]
    193c:	mov	x21, xzr
    1940:	mov	x22, xzr
    1944:	str	q1, [sp, #32]
    1948:	str	q0, [sp, #16]
    194c:	ldur	q1, [x29, #-32]
    1950:	bl	2d08 <__letf2>
    1954:	ldr	q0, [sp, #32]
    1958:	ldr	q1, [sp]
    195c:	cmp	w0, #0x0
    1960:	cset	w23, le
    1964:	bl	2ab8 <__eqtf2>
    1968:	cmp	w0, #0x0
    196c:	b.ne	1980 <seq_builtin+0x2bc>  // b.any
    1970:	adrp	x8, 3000 <__multf3+0x1b8>
    1974:	add	x8, x8, #0x890
    1978:	ldr	q0, [x8, w23, uxtw #4]
    197c:	str	q0, [sp, #32]
    1980:	ldr	q0, [sp, #16]
    1984:	ldur	q1, [x29, #-32]
    1988:	bl	2d08 <__letf2>
    198c:	cmp	w0, #0x0
    1990:	b.ge	19a4 <seq_builtin+0x2e0>  // b.tcont
    1994:	ldr	q1, [x26, #2160]
    1998:	ldr	q0, [sp, #32]
    199c:	bl	2d08 <__letf2>
    19a0:	tbnz	w0, #31, 19cc <seq_builtin+0x308>
    19a4:	ldr	q0, [sp, #16]
    19a8:	ldur	q1, [x29, #-32]
    19ac:	bl	2bc0 <__getf2>
    19b0:	cmp	w0, #0x0
    19b4:	b.le	1a2c <seq_builtin+0x368>
    19b8:	ldr	q1, [x26, #2160]
    19bc:	ldr	q0, [sp, #32]
    19c0:	bl	2bc0 <__getf2>
    19c4:	cmp	w0, #0x0
    19c8:	b.le	1a2c <seq_builtin+0x368>
    19cc:	ldr	q0, [sp, #16]
    19d0:	ldur	q1, [x29, #-32]
    19d4:	bl	2d08 <__letf2>
    19d8:	adrp	x8, 3000 <__multf3+0x1b8>
    19dc:	adrp	x9, 3000 <__multf3+0x1b8>
    19e0:	add	x8, x8, #0x8d9
    19e4:	add	x9, x9, #0x8d6
    19e8:	cmp	w0, #0x0
    19ec:	adrp	x0, 3000 <__multf3+0x1b8>
    19f0:	csel	x1, x9, x8, lt  // lt = tstop
    19f4:	add	x0, x0, #0x8dc
    19f8:	bl	1020 <builtin_error@plt>
    19fc:	mov	w0, #0x1                   	// #1
    1a00:	b	1818 <seq_builtin+0x154>
    1a04:	ldr	w8, [x23]
    1a08:	cmp	w8, #0x22
    1a0c:	b.ne	1a74 <seq_builtin+0x3b0>  // b.any
    1a10:	mov	w0, #0x22                  	// #34
    1a14:	bl	10c0 <strerror@plt>
    1a18:	mov	x2, x0
    1a1c:	adrp	x0, 3000 <__multf3+0x1b8>
    1a20:	add	x0, x0, #0xc42
    1a24:	mov	x1, x21
    1a28:	b	189c <seq_builtin+0x1d8>
    1a2c:	cbz	x19, 1ad8 <seq_builtin+0x414>
    1a30:	mov	x8, xzr
    1a34:	mov	w9, #0x1                   	// #1
    1a38:	b	1a58 <seq_builtin+0x394>
    1a3c:	add	x23, x8, #0x1
    1a40:	ldrb	w11, [x19, x23]
    1a44:	cmp	w11, #0x25
    1a48:	b.ne	1b14 <seq_builtin+0x450>  // b.any
    1a4c:	cmp	w10, #0x25
    1a50:	cinc	x10, x9, eq  // eq = none
    1a54:	add	x8, x10, x8
    1a58:	ldrb	w10, [x19, x8]
    1a5c:	cmp	w10, #0x25
    1a60:	b.eq	1a3c <seq_builtin+0x378>  // b.none
    1a64:	cbnz	w10, 1a4c <seq_builtin+0x388>
    1a68:	adrp	x0, 3000 <__multf3+0x1b8>
    1a6c:	add	x0, x0, #0xc52
    1a70:	b	1bdc <seq_builtin+0x518>
    1a74:	ldr	q1, [x26, #2160]
    1a78:	ldrb	w28, [x25, #436]
    1a7c:	stp	q0, q1, [sp, #16]
    1a80:	bl	2ab8 <__eqtf2>
    1a84:	cmp	w0, #0x0
    1a88:	b.ne	1a94 <seq_builtin+0x3d0>  // b.any
    1a8c:	ldr	q0, [sp, #32]
    1a90:	str	q0, [sp, #16]
    1a94:	tbnz	w28, #0, 18d8 <seq_builtin+0x214>
    1a98:	cmp	w27, #0x3
    1a9c:	b.cc	1be4 <seq_builtin+0x520>  // b.lo, b.ul, b.last
    1aa0:	strb	wzr, [x25, #436]
    1aa4:	ldr	x8, [x22]
    1aa8:	sub	x1, x29, #0x8
    1aac:	ldr	x8, [x8, #8]
    1ab0:	ldr	x22, [x8]
    1ab4:	str	wzr, [x23]
    1ab8:	mov	x0, x22
    1abc:	bl	10f0 <strtold@plt>
    1ac0:	ldur	x8, [x29, #-8]
    1ac4:	ldrb	w8, [x8]
    1ac8:	cbz	w8, 1c50 <seq_builtin+0x58c>
    1acc:	mov	x0, x22
    1ad0:	bl	11c0 <sh_invalidnum@plt>
    1ad4:	b	18a0 <seq_builtin+0x1dc>
    1ad8:	mov	w23, wzr
    1adc:	cbz	x20, 1c90 <seq_builtin+0x5cc>
    1ae0:	mov	x0, x20
    1ae4:	bl	1000 <all_digits@plt>
    1ae8:	cbz	w0, 1c90 <seq_builtin+0x5cc>
    1aec:	cbz	x21, 1afc <seq_builtin+0x438>
    1af0:	mov	x0, x21
    1af4:	bl	1000 <all_digits@plt>
    1af8:	cbz	w0, 1c90 <seq_builtin+0x5cc>
    1afc:	cbz	x22, 1c8c <seq_builtin+0x5c8>
    1b00:	mov	x0, x22
    1b04:	bl	1000 <all_digits@plt>
    1b08:	cbnz	x19, 1c90 <seq_builtin+0x5cc>
    1b0c:	cbnz	w0, 1d28 <seq_builtin+0x664>
    1b10:	b	1c90 <seq_builtin+0x5cc>
    1b14:	adrp	x1, 3000 <__multf3+0x1b8>
    1b18:	add	x0, x19, x23
    1b1c:	add	x1, x1, #0xc70
    1b20:	bl	1140 <strspn@plt>
    1b24:	add	x23, x0, x23
    1b28:	adrp	x1, 3000 <__multf3+0x1b8>
    1b2c:	add	x0, x19, x23
    1b30:	add	x1, x1, #0xc77
    1b34:	bl	1140 <strspn@plt>
    1b38:	add	x23, x23, x0
    1b3c:	ldrb	w8, [x19, x23]
    1b40:	cmp	w8, #0x2e
    1b44:	b.ne	1b64 <seq_builtin+0x4a0>  // b.any
    1b48:	add	x23, x23, #0x1
    1b4c:	adrp	x1, 3000 <__multf3+0x1b8>
    1b50:	add	x0, x19, x23
    1b54:	add	x1, x1, #0xc77
    1b58:	bl	1140 <strspn@plt>
    1b5c:	add	x23, x0, x23
    1b60:	ldrb	w8, [x19, x23]
    1b64:	cmp	w8, #0x4c
    1b68:	cinc	x8, x23, eq  // eq = none
    1b6c:	ldrb	w2, [x19, x8]
    1b70:	cset	w25, eq  // eq = none
    1b74:	sub	w9, w2, #0x41
    1b78:	cmp	w9, #0x26
    1b7c:	b.hi	1c7c <seq_builtin+0x5b8>  // b.pmore
    1b80:	mov	w10, #0x1                   	// #1
    1b84:	lsl	x9, x10, x9
    1b88:	mov	x10, #0x71                  	// #113
    1b8c:	movk	x10, #0x71, lsl #32
    1b90:	tst	x9, x10
    1b94:	b.eq	1c7c <seq_builtin+0x5b8>  // b.none
    1b98:	add	x26, x19, x23
    1b9c:	add	x8, x8, #0x1
    1ba0:	mov	w9, #0x1                   	// #1
    1ba4:	b	1bb8 <seq_builtin+0x4f4>
    1ba8:	cbz	w10, 1bf8 <seq_builtin+0x534>
    1bac:	cmp	w10, #0x25
    1bb0:	cinc	x10, x9, eq  // eq = none
    1bb4:	add	x8, x10, x8
    1bb8:	ldrb	w10, [x19, x8]
    1bbc:	cmp	w10, #0x25
    1bc0:	b.ne	1ba8 <seq_builtin+0x4e4>  // b.any
    1bc4:	add	x11, x8, x19
    1bc8:	ldrb	w11, [x11, #1]
    1bcc:	cmp	w11, #0x25
    1bd0:	b.eq	1bac <seq_builtin+0x4e8>  // b.none
    1bd4:	adrp	x0, 3000 <__multf3+0x1b8>
    1bd8:	add	x0, x0, #0xcbe
    1bdc:	mov	x1, x19
    1be0:	b	19f8 <seq_builtin+0x334>
    1be4:	ldr	q0, [x26, #2160]
    1be8:	mov	x22, xzr
    1bec:	str	q0, [sp, #32]
    1bf0:	ldr	q0, [sp, #16]
    1bf4:	b	1948 <seq_builtin+0x284>
    1bf8:	add	x0, x8, #0x2
    1bfc:	bl	10a0 <xmalloc@plt>
    1c00:	mov	x1, x19
    1c04:	mov	x2, x23
    1c08:	mov	x19, x0
    1c0c:	bl	ff0 <memcpy@plt>
    1c10:	add	x0, x19, x23
    1c14:	mov	w8, #0x4c                  	// #76
    1c18:	strb	w8, [x0], #1
    1c1c:	add	x1, x26, x25
    1c20:	bl	1170 <strcpy@plt>
    1c24:	cbz	x19, 18d8 <seq_builtin+0x214>
    1c28:	ldrb	w8, [x24, #432]
    1c2c:	cmp	w8, #0x1
    1c30:	b.ne	1c44 <seq_builtin+0x580>  // b.any
    1c34:	adrp	x0, 3000 <__multf3+0x1b8>
    1c38:	add	x0, x0, #0x8f0
    1c3c:	bl	1030 <builtin_warning@plt>
    1c40:	strb	wzr, [x24, #432]
    1c44:	mov	w23, #0x1                   	// #1
    1c48:	cbnz	x20, 1ae0 <seq_builtin+0x41c>
    1c4c:	b	1c90 <seq_builtin+0x5cc>
    1c50:	ldr	w8, [x23]
    1c54:	str	q0, [sp, #32]
    1c58:	cmp	w8, #0x22
    1c5c:	b.ne	1ed0 <seq_builtin+0x80c>  // b.any
    1c60:	mov	w0, #0x22                  	// #34
    1c64:	bl	10c0 <strerror@plt>
    1c68:	mov	x2, x0
    1c6c:	adrp	x0, 3000 <__multf3+0x1b8>
    1c70:	add	x0, x0, #0xc42
    1c74:	mov	x1, x22
    1c78:	b	189c <seq_builtin+0x1d8>
    1c7c:	cbnz	w2, 1f18 <seq_builtin+0x854>
    1c80:	adrp	x0, 3000 <__multf3+0x1b8>
    1c84:	add	x0, x0, #0xc82
    1c88:	b	1bdc <seq_builtin+0x518>
    1c8c:	cbz	x19, 1d28 <seq_builtin+0x664>
    1c90:	bl	1070 <locale_decpoint@plt>
    1c94:	ldr	q0, [sp, #16]
    1c98:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    1c9c:	strb	w0, [x8, #440]
    1ca0:	cbnz	x19, 1f50 <seq_builtin+0x88c>
    1ca4:	ldrb	w8, [x24, #432]
    1ca8:	cmp	w8, #0x1
    1cac:	b.ne	1d1c <seq_builtin+0x658>  // b.any
    1cb0:	adrp	x21, 15000 <memcpy@GLIBC_2.17>
    1cb4:	ldr	q0, [sp, #32]
    1cb8:	add	x21, x21, #0x1b8
    1cbc:	adrp	x2, 3000 <__multf3+0x1b8>
    1cc0:	add	x20, x21, #0x10
    1cc4:	add	x2, x2, #0xce3
    1cc8:	mov	w1, #0x1c                  	// #28
    1ccc:	mov	x0, x20
    1cd0:	bl	1060 <snprintf@plt>
    1cd4:	ldrb	w1, [x21]
    1cd8:	mov	x0, x20
    1cdc:	bl	1150 <strchr@plt>
    1ce0:	cbz	x0, 1d74 <seq_builtin+0x6b0>
    1ce4:	ldrb	w24, [x0, #1]
    1ce8:	mov	x19, x0
    1cec:	cbz	w24, 1d74 <seq_builtin+0x6b0>
    1cf0:	bl	10e0 <__ctype_b_loc@plt>
    1cf4:	ldr	x8, [x0]
    1cf8:	mov	x22, xzr
    1cfc:	add	x9, x19, #0x2
    1d00:	and	x10, x24, #0xff
    1d04:	ldrh	w10, [x8, x10, lsl #1]
    1d08:	tbz	w10, #11, 1d78 <seq_builtin+0x6b4>
    1d0c:	ldrb	w24, [x9, x22]
    1d10:	add	x22, x22, #0x1
    1d14:	cbnz	w24, 1d00 <seq_builtin+0x63c>
    1d18:	b	1d78 <seq_builtin+0x6b4>
    1d1c:	adrp	x19, 3000 <__multf3+0x1b8>
    1d20:	add	x19, x19, #0xce3
    1d24:	b	1f50 <seq_builtin+0x88c>
    1d28:	ldr	q0, [sp, #16]
    1d2c:	bl	36b0 <__fixtfdi>
    1d30:	ldur	q0, [x29, #-32]
    1d34:	mov	x19, x0
    1d38:	bl	36b0 <__fixtfdi>
    1d3c:	ldr	q0, [sp, #32]
    1d40:	mov	x20, x0
    1d44:	bl	36b0 <__fixtfdi>
    1d48:	mov	x2, x0
    1d4c:	mov	x0, x19
    1d50:	mov	x1, x20
    1d54:	ldp	x20, x19, [sp, #160]
    1d58:	ldp	x22, x21, [sp, #144]
    1d5c:	ldp	x24, x23, [sp, #128]
    1d60:	ldp	x26, x25, [sp, #112]
    1d64:	ldp	x28, x27, [sp, #96]
    1d68:	ldp	x29, x30, [sp, #80]
    1d6c:	add	sp, sp, #0xb0
    1d70:	b	1080 <print_intseq@plt>
    1d74:	mov	w22, wzr
    1d78:	ldr	q0, [sp, #16]
    1d7c:	adrp	x2, 3000 <__multf3+0x1b8>
    1d80:	add	x2, x2, #0xce3
    1d84:	mov	w1, #0x1c                  	// #28
    1d88:	mov	x0, x20
    1d8c:	bl	1060 <snprintf@plt>
    1d90:	ldrb	w1, [x21]
    1d94:	mov	w19, w0
    1d98:	mov	x0, x20
    1d9c:	bl	1150 <strchr@plt>
    1da0:	cbz	x0, 1ddc <seq_builtin+0x718>
    1da4:	ldrb	w25, [x0, #1]
    1da8:	mov	x20, x0
    1dac:	cbz	w25, 1ddc <seq_builtin+0x718>
    1db0:	bl	10e0 <__ctype_b_loc@plt>
    1db4:	ldr	x8, [x0]
    1db8:	mov	x24, xzr
    1dbc:	add	x9, x20, #0x2
    1dc0:	and	x10, x25, #0xff
    1dc4:	ldrh	w10, [x8, x10, lsl #1]
    1dc8:	tbz	w10, #11, 1de0 <seq_builtin+0x71c>
    1dcc:	ldrb	w25, [x9, x24]
    1dd0:	add	x24, x24, #0x1
    1dd4:	cbnz	w25, 1dc0 <seq_builtin+0x6fc>
    1dd8:	b	1de0 <seq_builtin+0x71c>
    1ddc:	mov	w24, wzr
    1de0:	ldur	q0, [x29, #-32]
    1de4:	cmp	w24, w22
    1de8:	csel	w20, w22, w24, cc  // cc = lo, ul, last
    1dec:	add	x22, x21, #0x10
    1df0:	adrp	x2, 3000 <__multf3+0x1b8>
    1df4:	add	x2, x2, #0xce3
    1df8:	mov	w1, #0x1c                  	// #28
    1dfc:	mov	x0, x22
    1e00:	bl	1060 <snprintf@plt>
    1e04:	ldrb	w1, [x21]
    1e08:	mov	w21, w0
    1e0c:	mov	x0, x22
    1e10:	bl	1150 <strchr@plt>
    1e14:	cbz	x0, 1e50 <seq_builtin+0x78c>
    1e18:	ldrb	w25, [x0, #1]
    1e1c:	mov	x22, x0
    1e20:	cbz	w25, 1e50 <seq_builtin+0x78c>
    1e24:	bl	10e0 <__ctype_b_loc@plt>
    1e28:	ldr	x9, [x0]
    1e2c:	mov	x8, xzr
    1e30:	add	x10, x22, #0x2
    1e34:	and	x11, x25, #0xff
    1e38:	ldrh	w11, [x9, x11, lsl #1]
    1e3c:	tbz	w11, #11, 1e54 <seq_builtin+0x790>
    1e40:	ldrb	w25, [x10, x8]
    1e44:	add	x8, x8, #0x1
    1e48:	cbnz	w25, 1e34 <seq_builtin+0x770>
    1e4c:	b	1e54 <seq_builtin+0x790>
    1e50:	mov	w8, wzr
    1e54:	cmp	w8, #0x0
    1e58:	add	w9, w20, w21
    1e5c:	sub	w10, w19, w24
    1e60:	cset	w11, ne  // ne = any
    1e64:	cset	w12, eq  // eq = none
    1e68:	cmp	w20, #0x0
    1e6c:	sub	w8, w9, w8
    1e70:	add	w9, w10, w20
    1e74:	cset	w10, eq  // eq = none
    1e78:	cset	w13, ne  // ne = any
    1e7c:	cmp	w24, #0x0
    1e80:	and	w10, w10, w11
    1e84:	and	w11, w13, w12
    1e88:	cset	w12, eq  // eq = none
    1e8c:	sub	w8, w8, w10
    1e90:	and	w10, w12, w13
    1e94:	add	w8, w8, w11
    1e98:	add	w9, w9, w10
    1e9c:	cmp	w9, w8
    1ea0:	adrp	x19, 15000 <memcpy@GLIBC_2.17>
    1ea4:	add	x19, x19, #0x1c8
    1ea8:	csel	w2, w8, w9, lt  // lt = tstop
    1eac:	cbz	w2, 1f30 <seq_builtin+0x86c>
    1eb0:	adrp	x1, 3000 <__multf3+0x1b8>
    1eb4:	adrp	x4, 3000 <__multf3+0x1b8>
    1eb8:	add	x1, x1, #0xce7
    1ebc:	add	x4, x4, #0xcf3
    1ec0:	mov	x0, x19
    1ec4:	mov	w3, w20
    1ec8:	bl	1050 <sprintf@plt>
    1ecc:	b	1f4c <seq_builtin+0x888>
    1ed0:	ldrb	w8, [x25, #436]
    1ed4:	tbnz	w8, #0, 18d8 <seq_builtin+0x214>
    1ed8:	ldr	q1, [x26, #2160]
    1edc:	ldr	q0, [sp, #32]
    1ee0:	bl	2ab8 <__eqtf2>
    1ee4:	cbnz	w0, 1bf0 <seq_builtin+0x52c>
    1ee8:	ldr	q0, [sp, #16]
    1eec:	ldur	q1, [x29, #-32]
    1ef0:	bl	2d08 <__letf2>
    1ef4:	adrp	x8, 3000 <__multf3+0x1b8>
    1ef8:	adrp	x9, 3000 <__multf3+0x1b8>
    1efc:	add	x8, x8, #0x8d9
    1f00:	add	x9, x9, #0x8d6
    1f04:	cmp	w0, #0x0
    1f08:	adrp	x0, 3000 <__multf3+0x1b8>
    1f0c:	csel	x1, x9, x8, lt  // lt = tstop
    1f10:	add	x0, x0, #0x8c7
    1f14:	b	19f8 <seq_builtin+0x334>
    1f18:	adrp	x0, 3000 <__multf3+0x1b8>
    1f1c:	add	x0, x0, #0xc97
    1f20:	mov	x1, x19
    1f24:	bl	1020 <builtin_error@plt>
    1f28:	mov	w0, #0x1                   	// #1
    1f2c:	b	1818 <seq_builtin+0x154>
    1f30:	adrp	x1, 3000 <__multf3+0x1b8>
    1f34:	adrp	x3, 3000 <__multf3+0x1b8>
    1f38:	add	x1, x1, #0xcf5
    1f3c:	add	x3, x3, #0xcf3
    1f40:	mov	x0, x19
    1f44:	mov	w2, w20
    1f48:	bl	1050 <sprintf@plt>
    1f4c:	ldr	q0, [sp, #16]
    1f50:	ldur	q1, [x29, #-32]
    1f54:	ldr	q2, [sp, #32]
    1f58:	mov	x0, x19
    1f5c:	bl	1100 <print_fltseq@plt>
    1f60:	cbz	w23, 1f6c <seq_builtin+0x8a8>
    1f64:	mov	x0, x19
    1f68:	bl	1110 <free@plt>
    1f6c:	ldp	x20, x19, [sp, #160]
    1f70:	ldp	x22, x21, [sp, #144]
    1f74:	ldp	x24, x23, [sp, #128]
    1f78:	ldp	x26, x25, [sp, #112]
    1f7c:	ldp	x28, x27, [sp, #96]
    1f80:	ldp	x29, x30, [sp, #80]
    1f84:	mov	w0, wzr
    1f88:	add	sp, sp, #0xb0
    1f8c:	b	1160 <sh_chkwrite@plt>

0000000000001f90 <__addtf3>:
    1f90:	stp	x29, x30, [sp, #-48]!
    1f94:	mov	x29, sp
    1f98:	str	q0, [sp, #16]
    1f9c:	str	q1, [sp, #32]
    1fa0:	ldp	x6, x1, [sp, #16]
    1fa4:	ldp	x0, x3, [sp, #32]
    1fa8:	mrs	x15, fpcr
    1fac:	lsr	x7, x1, #63
    1fb0:	mov	x10, x0
    1fb4:	ubfiz	x4, x3, #3, #48
    1fb8:	lsr	x5, x3, #63
    1fbc:	mov	x12, x7
    1fc0:	ubfiz	x2, x1, #3, #48
    1fc4:	orr	x4, x4, x0, lsr #61
    1fc8:	ubfx	x8, x1, #48, #15
    1fcc:	ubfx	x0, x3, #48, #15
    1fd0:	and	w7, w7, #0xff
    1fd4:	mov	x16, x12
    1fd8:	cmp	x12, x5
    1fdc:	and	w11, w5, #0xff
    1fe0:	orr	x2, x2, x6, lsr #61
    1fe4:	mov	x1, x8
    1fe8:	lsl	x9, x6, #3
    1fec:	mov	x3, x0
    1ff0:	lsl	x13, x10, #3
    1ff4:	b.eq	21a0 <__addtf3+0x210>  // b.none
    1ff8:	sub	w0, w8, w0
    1ffc:	cmp	w0, #0x0
    2000:	b.le	214c <__addtf3+0x1bc>
    2004:	cbz	x3, 2200 <__addtf3+0x270>
    2008:	orr	x4, x4, #0x8000000000000
    200c:	mov	x3, #0x7fff                	// #32767
    2010:	cmp	x1, x3
    2014:	b.eq	2404 <__addtf3+0x474>  // b.none
    2018:	cmp	w0, #0x74
    201c:	b.gt	2488 <__addtf3+0x4f8>
    2020:	cmp	w0, #0x3f
    2024:	b.gt	25e8 <__addtf3+0x658>
    2028:	mov	w3, #0x40                  	// #64
    202c:	sub	w3, w3, w0
    2030:	lsr	x6, x13, x0
    2034:	lsl	x13, x13, x3
    2038:	cmp	x13, #0x0
    203c:	cset	x5, ne  // ne = any
    2040:	lsl	x3, x4, x3
    2044:	orr	x3, x3, x6
    2048:	lsr	x0, x4, x0
    204c:	orr	x3, x3, x5
    2050:	sub	x2, x2, x0
    2054:	subs	x9, x9, x3
    2058:	sbc	x2, x2, xzr
    205c:	and	x3, x2, #0x7ffffffffffff
    2060:	tbz	x2, #51, 2240 <__addtf3+0x2b0>
    2064:	cbz	x3, 246c <__addtf3+0x4dc>
    2068:	clz	x0, x3
    206c:	sub	w0, w0, #0xc
    2070:	neg	w2, w0
    2074:	lsl	x4, x3, x0
    2078:	lsl	x3, x9, x0
    207c:	lsr	x9, x9, x2
    2080:	orr	x2, x9, x4
    2084:	cmp	x1, w0, sxtw
    2088:	sxtw	x4, w0
    208c:	b.gt	244c <__addtf3+0x4bc>
    2090:	sub	w1, w0, w1
    2094:	add	w0, w1, #0x1
    2098:	cmp	w0, #0x3f
    209c:	b.gt	25b0 <__addtf3+0x620>
    20a0:	mov	w1, #0x40                  	// #64
    20a4:	sub	w1, w1, w0
    20a8:	lsr	x4, x3, x0
    20ac:	lsl	x3, x3, x1
    20b0:	cmp	x3, #0x0
    20b4:	lsl	x9, x2, x1
    20b8:	cset	x1, ne  // ne = any
    20bc:	orr	x9, x9, x4
    20c0:	lsr	x2, x2, x0
    20c4:	orr	x9, x9, x1
    20c8:	orr	x8, x9, x2
    20cc:	cbz	x8, 2254 <__addtf3+0x2c4>
    20d0:	and	x0, x9, #0x7
    20d4:	mov	x1, #0x0                   	// #0
    20d8:	mov	w5, #0x1                   	// #1
    20dc:	cbz	x0, 2498 <__addtf3+0x508>
    20e0:	and	x3, x15, #0xc00000
    20e4:	cmp	x3, #0x400, lsl #12
    20e8:	b.eq	23dc <__addtf3+0x44c>  // b.none
    20ec:	cmp	x3, #0x800, lsl #12
    20f0:	b.eq	23bc <__addtf3+0x42c>  // b.none
    20f4:	cbz	x3, 23e8 <__addtf3+0x458>
    20f8:	and	x3, x2, #0x8000000000000
    20fc:	mov	w0, #0x10                  	// #16
    2100:	cbz	w5, 2108 <__addtf3+0x178>
    2104:	orr	w0, w0, #0x8
    2108:	cbz	x3, 2420 <__addtf3+0x490>
    210c:	add	x1, x1, #0x1
    2110:	mov	x3, #0x7fff                	// #32767
    2114:	cmp	x1, x3
    2118:	b.eq	2304 <__addtf3+0x374>  // b.none
    211c:	and	w1, w1, #0x7fff
    2120:	extr	x8, x2, x9, #3
    2124:	ubfx	x2, x2, #3, #48
    2128:	mov	x5, #0x0                   	// #0
    212c:	orr	w1, w1, w7, lsl #15
    2130:	bfxil	x5, x2, #0, #48
    2134:	fmov	d0, x8
    2138:	bfi	x5, x1, #48, #16
    213c:	fmov	v0.d[1], x5
    2140:	cbnz	w0, 2360 <__addtf3+0x3d0>
    2144:	ldp	x29, x30, [sp], #48
    2148:	ret
    214c:	mov	x14, x5
    2150:	b.eq	226c <__addtf3+0x2dc>  // b.none
    2154:	cbnz	x8, 24f0 <__addtf3+0x560>
    2158:	orr	x1, x2, x9
    215c:	cbz	x1, 221c <__addtf3+0x28c>
    2160:	cmn	w0, #0x1
    2164:	b.eq	290c <__addtf3+0x97c>  // b.none
    2168:	mov	x1, #0x7fff                	// #32767
    216c:	mvn	w0, w0
    2170:	cmp	x3, x1
    2174:	b.ne	2504 <__addtf3+0x574>  // b.any
    2178:	orr	x0, x4, x13
    217c:	cbnz	x0, 2864 <__addtf3+0x8d4>
    2180:	mov	x16, x14
    2184:	nop
    2188:	mov	x4, #0x0                   	// #0
    218c:	fmov	d0, x4
    2190:	lsl	x16, x16, #63
    2194:	orr	x5, x16, #0x7fff000000000000
    2198:	fmov	v0.d[1], x5
    219c:	b	2144 <__addtf3+0x1b4>
    21a0:	sub	w5, w8, w0
    21a4:	cmp	w5, #0x0
    21a8:	b.le	2374 <__addtf3+0x3e4>
    21ac:	cbz	x0, 22b4 <__addtf3+0x324>
    21b0:	orr	x4, x4, #0x8000000000000
    21b4:	mov	x0, #0x7fff                	// #32767
    21b8:	cmp	x1, x0
    21bc:	b.eq	2404 <__addtf3+0x474>  // b.none
    21c0:	cmp	w5, #0x74
    21c4:	b.gt	2598 <__addtf3+0x608>
    21c8:	cmp	w5, #0x3f
    21cc:	b.gt	2698 <__addtf3+0x708>
    21d0:	mov	w0, #0x40                  	// #64
    21d4:	sub	w0, w0, w5
    21d8:	lsr	x6, x13, x5
    21dc:	lsl	x13, x13, x0
    21e0:	cmp	x13, #0x0
    21e4:	lsl	x0, x4, x0
    21e8:	cset	x3, ne  // ne = any
    21ec:	orr	x0, x0, x6
    21f0:	lsr	x4, x4, x5
    21f4:	orr	x0, x0, x3
    21f8:	add	x2, x2, x4
    21fc:	b	25a4 <__addtf3+0x614>
    2200:	orr	x3, x4, x13
    2204:	cbz	x3, 2574 <__addtf3+0x5e4>
    2208:	subs	w0, w0, #0x1
    220c:	b.ne	200c <__addtf3+0x7c>  // b.any
    2210:	subs	x9, x9, x13
    2214:	sbc	x2, x2, x4
    2218:	b	205c <__addtf3+0xcc>
    221c:	mov	x0, #0x7fff                	// #32767
    2220:	cmp	x3, x0
    2224:	b.eq	2958 <__addtf3+0x9c8>  // b.none
    2228:	mov	w7, w11
    222c:	mov	x2, x4
    2230:	mov	x9, x13
    2234:	mov	x1, x3
    2238:	mov	x12, x5
    223c:	nop
    2240:	orr	x8, x9, x2
    2244:	and	x0, x9, #0x7
    2248:	mov	w5, #0x0                   	// #0
    224c:	cbnz	x1, 20dc <__addtf3+0x14c>
    2250:	cbnz	x8, 20d0 <__addtf3+0x140>
    2254:	mov	x2, #0x0                   	// #0
    2258:	mov	x1, #0x0                   	// #0
    225c:	mov	w0, #0x0                   	// #0
    2260:	and	x2, x2, #0xffffffffffff
    2264:	and	w1, w1, #0x7fff
    2268:	b	2128 <__addtf3+0x198>
    226c:	add	x5, x8, #0x1
    2270:	tst	x5, #0x7ffe
    2274:	b.ne	2544 <__addtf3+0x5b4>  // b.any
    2278:	orr	x5, x2, x9
    227c:	orr	x8, x4, x13
    2280:	cbnz	x1, 2704 <__addtf3+0x774>
    2284:	cbz	x5, 27ac <__addtf3+0x81c>
    2288:	cbz	x8, 27c0 <__addtf3+0x830>
    228c:	subs	x5, x9, x13
    2290:	cmp	x9, x13
    2294:	sbc	x3, x2, x4
    2298:	tbz	x3, #51, 298c <__addtf3+0x9fc>
    229c:	subs	x9, x13, x9
    22a0:	mov	w7, w11
    22a4:	sbc	x2, x4, x2
    22a8:	mov	x12, x14
    22ac:	orr	x8, x9, x2
    22b0:	b	20cc <__addtf3+0x13c>
    22b4:	orr	x0, x4, x13
    22b8:	cbz	x0, 278c <__addtf3+0x7fc>
    22bc:	subs	w5, w5, #0x1
    22c0:	b.ne	21b4 <__addtf3+0x224>  // b.any
    22c4:	adds	x9, x9, x13
    22c8:	adc	x2, x4, x2
    22cc:	nop
    22d0:	tbz	x2, #51, 2240 <__addtf3+0x2b0>
    22d4:	add	x1, x1, #0x1
    22d8:	mov	x0, #0x7fff                	// #32767
    22dc:	cmp	x1, x0
    22e0:	b.eq	27cc <__addtf3+0x83c>  // b.none
    22e4:	and	x0, x9, #0x1
    22e8:	and	x3, x2, #0xfff7ffffffffffff
    22ec:	orr	x9, x0, x9, lsr #1
    22f0:	mov	w5, #0x0                   	// #0
    22f4:	orr	x9, x9, x2, lsl #63
    22f8:	lsr	x2, x3, #1
    22fc:	and	x0, x9, #0x7
    2300:	b	20dc <__addtf3+0x14c>
    2304:	and	x3, x15, #0xc00000
    2308:	cbz	x3, 2340 <__addtf3+0x3b0>
    230c:	cmp	x3, #0x400, lsl #12
    2310:	b.eq	2338 <__addtf3+0x3a8>  // b.none
    2314:	cmp	x3, #0x800, lsl #12
    2318:	csel	w12, w12, wzr, eq  // eq = none
    231c:	cbnz	w12, 2340 <__addtf3+0x3b0>
    2320:	mov	w1, #0x14                  	// #20
    2324:	mov	x2, #0x1fffffffffffffff    	// #2305843009213693951
    2328:	orr	w0, w0, w1
    232c:	mov	x8, #0xffffffffffffffff    	// #-1
    2330:	mov	x1, #0x7ffe                	// #32766
    2334:	b	2260 <__addtf3+0x2d0>
    2338:	cbnz	x12, 2320 <__addtf3+0x390>
    233c:	nop
    2340:	mov	w1, #0x14                  	// #20
    2344:	and	x16, x7, #0xff
    2348:	orr	w0, w0, w1
    234c:	mov	x4, #0x0                   	// #0
    2350:	fmov	d0, x4
    2354:	lsl	x16, x16, #63
    2358:	orr	x5, x16, #0x7fff000000000000
    235c:	fmov	v0.d[1], x5
    2360:	str	q0, [sp, #16]
    2364:	bl	37e8 <__sfp_handle_exceptions>
    2368:	ldr	q0, [sp, #16]
    236c:	ldp	x29, x30, [sp], #48
    2370:	ret
    2374:	b.eq	24b4 <__addtf3+0x524>  // b.none
    2378:	cbnz	x8, 2638 <__addtf3+0x6a8>
    237c:	orr	x0, x2, x9
    2380:	cbz	x0, 28a4 <__addtf3+0x914>
    2384:	cmn	w5, #0x1
    2388:	b.eq	2a04 <__addtf3+0xa74>  // b.none
    238c:	mov	x0, #0x7fff                	// #32767
    2390:	mvn	w5, w5
    2394:	cmp	x3, x0
    2398:	b.ne	264c <__addtf3+0x6bc>  // b.any
    239c:	orr	x0, x4, x13
    23a0:	cbz	x0, 2188 <__addtf3+0x1f8>
    23a4:	lsr	x5, x4, #50
    23a8:	mov	x9, x13
    23ac:	eor	x5, x5, #0x1
    23b0:	mov	x2, x4
    23b4:	and	w5, w5, #0x1
    23b8:	b	2418 <__addtf3+0x488>
    23bc:	mov	w0, #0x10                  	// #16
    23c0:	cbz	x12, 23cc <__addtf3+0x43c>
    23c4:	adds	x9, x9, #0x8
    23c8:	cinc	x2, x2, cs  // cs = hs, nlast
    23cc:	and	x3, x2, #0x8000000000000
    23d0:	cbz	w5, 2108 <__addtf3+0x178>
    23d4:	orr	w0, w0, #0x8
    23d8:	b	2108 <__addtf3+0x178>
    23dc:	mov	w0, #0x10                  	// #16
    23e0:	cbnz	x12, 23cc <__addtf3+0x43c>
    23e4:	b	23c4 <__addtf3+0x434>
    23e8:	and	x3, x9, #0xf
    23ec:	mov	w0, #0x10                  	// #16
    23f0:	cmp	x3, #0x4
    23f4:	b.eq	23cc <__addtf3+0x43c>  // b.none
    23f8:	adds	x9, x9, #0x4
    23fc:	cinc	x2, x2, cs  // cs = hs, nlast
    2400:	b	23cc <__addtf3+0x43c>
    2404:	orr	x0, x2, x9
    2408:	cbz	x0, 2188 <__addtf3+0x1f8>
    240c:	lsr	x5, x2, #50
    2410:	eor	x5, x5, #0x1
    2414:	and	w5, w5, #0x1
    2418:	mov	w0, w5
    241c:	mov	x1, #0x7fff                	// #32767
    2420:	mov	x3, #0x7fff                	// #32767
    2424:	extr	x8, x2, x9, #3
    2428:	cmp	x1, x3
    242c:	lsr	x2, x2, #3
    2430:	b.ne	2260 <__addtf3+0x2d0>  // b.any
    2434:	orr	x1, x8, x2
    2438:	cbz	x1, 2aa4 <__addtf3+0xb14>
    243c:	orr	x2, x2, #0x800000000000
    2440:	mov	w1, #0x7fff                	// #32767
    2444:	and	x2, x2, #0xffffffffffff
    2448:	b	2128 <__addtf3+0x198>
    244c:	mov	x9, x3
    2450:	and	x2, x2, #0xfff7ffffffffffff
    2454:	sub	x1, x1, x4
    2458:	orr	x8, x9, x2
    245c:	and	x0, x9, #0x7
    2460:	mov	w5, #0x0                   	// #0
    2464:	cbz	x1, 2250 <__addtf3+0x2c0>
    2468:	b	20dc <__addtf3+0x14c>
    246c:	clz	x2, x9
    2470:	add	w0, w2, #0x34
    2474:	cmp	w0, #0x3f
    2478:	b.le	2070 <__addtf3+0xe0>
    247c:	sub	w2, w2, #0xc
    2480:	lsl	x2, x9, x2
    2484:	b	2084 <__addtf3+0xf4>
    2488:	orr	x4, x4, x13
    248c:	cmp	x4, #0x0
    2490:	cset	x3, ne  // ne = any
    2494:	b	2054 <__addtf3+0xc4>
    2498:	and	x3, x2, #0x8000000000000
    249c:	mov	w0, #0x0                   	// #0
    24a0:	cbz	w5, 2108 <__addtf3+0x178>
    24a4:	mov	w0, #0x0                   	// #0
    24a8:	tbz	w15, #11, 2108 <__addtf3+0x178>
    24ac:	orr	w0, w0, #0x8
    24b0:	b	2108 <__addtf3+0x178>
    24b4:	add	x0, x8, #0x1
    24b8:	tst	x0, #0x7ffe
    24bc:	b.ne	26c4 <__addtf3+0x734>  // b.any
    24c0:	orr	x0, x2, x9
    24c4:	cbnz	x8, 2880 <__addtf3+0x8f0>
    24c8:	orr	x8, x4, x13
    24cc:	cbz	x0, 28d4 <__addtf3+0x944>
    24d0:	cbz	x8, 27c0 <__addtf3+0x830>
    24d4:	adds	x9, x9, x13
    24d8:	adc	x2, x4, x2
    24dc:	tbz	x2, #51, 22ac <__addtf3+0x31c>
    24e0:	and	x2, x2, #0xfff7ffffffffffff
    24e4:	and	x0, x9, #0x7
    24e8:	mov	x1, #0x1                   	// #1
    24ec:	b	20dc <__addtf3+0x14c>
    24f0:	mov	x1, #0x7fff                	// #32767
    24f4:	neg	w0, w0
    24f8:	orr	x2, x2, #0x8000000000000
    24fc:	cmp	x3, x1
    2500:	b.eq	2178 <__addtf3+0x1e8>  // b.none
    2504:	cmp	w0, #0x74
    2508:	b.gt	2614 <__addtf3+0x684>
    250c:	cmp	w0, #0x3f
    2510:	b.gt	2830 <__addtf3+0x8a0>
    2514:	mov	w1, #0x40                  	// #64
    2518:	sub	w1, w1, w0
    251c:	lsr	x5, x9, x0
    2520:	lsl	x9, x9, x1
    2524:	cmp	x9, #0x0
    2528:	lsl	x9, x2, x1
    252c:	cset	x1, ne  // ne = any
    2530:	orr	x9, x9, x5
    2534:	lsr	x0, x2, x0
    2538:	orr	x9, x9, x1
    253c:	sub	x4, x4, x0
    2540:	b	2620 <__addtf3+0x690>
    2544:	subs	x5, x9, x13
    2548:	cmp	x9, x13
    254c:	sbc	x3, x2, x4
    2550:	tbnz	x3, #51, 26ec <__addtf3+0x75c>
    2554:	orr	x8, x5, x3
    2558:	cbnz	x8, 2818 <__addtf3+0x888>
    255c:	and	x15, x15, #0xc00000
    2560:	mov	x2, #0x0                   	// #0
    2564:	cmp	x15, #0x800, lsl #12
    2568:	mov	x1, #0x0                   	// #0
    256c:	cset	w7, eq  // eq = none
    2570:	b	2260 <__addtf3+0x2d0>
    2574:	mov	x0, #0x7fff                	// #32767
    2578:	cmp	x8, x0
    257c:	b.ne	2240 <__addtf3+0x2b0>  // b.any
    2580:	orr	x0, x2, x9
    2584:	cbnz	x0, 240c <__addtf3+0x47c>
    2588:	mov	x2, #0x0                   	// #0
    258c:	mov	x8, #0x0                   	// #0
    2590:	mov	w0, #0x0                   	// #0
    2594:	b	2434 <__addtf3+0x4a4>
    2598:	orr	x4, x4, x13
    259c:	cmp	x4, #0x0
    25a0:	cset	x0, ne  // ne = any
    25a4:	adds	x9, x0, x9
    25a8:	cinc	x2, x2, cs  // cs = hs, nlast
    25ac:	b	22d0 <__addtf3+0x340>
    25b0:	mov	w4, #0x80                  	// #128
    25b4:	sub	w4, w4, w0
    25b8:	cmp	w0, #0x40
    25bc:	sub	w9, w1, #0x3f
    25c0:	lsl	x0, x2, x4
    25c4:	orr	x0, x3, x0
    25c8:	csel	x3, x0, x3, ne  // ne = any
    25cc:	lsr	x9, x2, x9
    25d0:	cmp	x3, #0x0
    25d4:	mov	x2, #0x0                   	// #0
    25d8:	cset	x0, ne  // ne = any
    25dc:	orr	x9, x0, x9
    25e0:	mov	x8, x9
    25e4:	b	20cc <__addtf3+0x13c>
    25e8:	mov	w5, #0x80                  	// #128
    25ec:	sub	w5, w5, w0
    25f0:	subs	w0, w0, #0x40
    25f4:	lsl	x5, x4, x5
    25f8:	orr	x5, x13, x5
    25fc:	csel	x13, x5, x13, ne  // ne = any
    2600:	lsr	x4, x4, x0
    2604:	cmp	x13, #0x0
    2608:	cset	x3, ne  // ne = any
    260c:	orr	x3, x3, x4
    2610:	b	2054 <__addtf3+0xc4>
    2614:	orr	x2, x2, x9
    2618:	cmp	x2, #0x0
    261c:	cset	x9, ne  // ne = any
    2620:	subs	x9, x13, x9
    2624:	mov	w7, w11
    2628:	sbc	x2, x4, xzr
    262c:	mov	x1, x3
    2630:	mov	x12, x14
    2634:	b	205c <__addtf3+0xcc>
    2638:	mov	x0, #0x7fff                	// #32767
    263c:	neg	w5, w5
    2640:	orr	x2, x2, #0x8000000000000
    2644:	cmp	x3, x0
    2648:	b.eq	239c <__addtf3+0x40c>  // b.none
    264c:	cmp	w5, #0x74
    2650:	b.gt	2820 <__addtf3+0x890>
    2654:	cmp	w5, #0x3f
    2658:	b.gt	28e0 <__addtf3+0x950>
    265c:	mov	w1, #0x40                  	// #64
    2660:	sub	w1, w1, w5
    2664:	lsr	x6, x9, x5
    2668:	lsl	x9, x9, x1
    266c:	cmp	x9, #0x0
    2670:	cset	x0, ne  // ne = any
    2674:	lsl	x9, x2, x1
    2678:	orr	x9, x9, x6
    267c:	lsr	x5, x2, x5
    2680:	orr	x9, x9, x0
    2684:	add	x4, x4, x5
    2688:	adds	x9, x9, x13
    268c:	mov	x1, x3
    2690:	cinc	x2, x4, cs  // cs = hs, nlast
    2694:	b	22d0 <__addtf3+0x340>
    2698:	mov	w0, #0x80                  	// #128
    269c:	sub	w0, w0, w5
    26a0:	subs	w5, w5, #0x40
    26a4:	lsl	x0, x4, x0
    26a8:	orr	x0, x13, x0
    26ac:	csel	x13, x0, x13, ne  // ne = any
    26b0:	lsr	x4, x4, x5
    26b4:	cmp	x13, #0x0
    26b8:	cset	x0, ne  // ne = any
    26bc:	orr	x0, x0, x4
    26c0:	b	25a4 <__addtf3+0x614>
    26c4:	mov	x1, #0x7fff                	// #32767
    26c8:	cmp	x0, x1
    26cc:	b.eq	2928 <__addtf3+0x998>  // b.none
    26d0:	adds	x9, x9, x13
    26d4:	mov	x1, x0
    26d8:	adc	x2, x4, x2
    26dc:	ubfx	x0, x9, #1, #3
    26e0:	extr	x9, x2, x9, #1
    26e4:	lsr	x2, x2, #1
    26e8:	b	20dc <__addtf3+0x14c>
    26ec:	cmp	x13, x9
    26f0:	mov	w7, w11
    26f4:	sbc	x3, x4, x2
    26f8:	sub	x9, x13, x9
    26fc:	mov	x12, x14
    2700:	b	2064 <__addtf3+0xd4>
    2704:	mov	x12, #0x7fff                	// #32767
    2708:	cmp	x1, x12
    270c:	b.eq	2738 <__addtf3+0x7a8>  // b.none
    2710:	cmp	x3, x12
    2714:	b.eq	2968 <__addtf3+0x9d8>  // b.none
    2718:	cbnz	x5, 2750 <__addtf3+0x7c0>
    271c:	mov	w5, w0
    2720:	cbnz	x8, 2a48 <__addtf3+0xab8>
    2724:	mov	w7, #0x0                   	// #0
    2728:	mov	x2, #0xffffffffffff        	// #281474976710655
    272c:	mov	w0, #0x1                   	// #1
    2730:	mov	x8, #0xffffffffffffffff    	// #-1
    2734:	b	243c <__addtf3+0x4ac>
    2738:	cbz	x5, 2a64 <__addtf3+0xad4>
    273c:	lsr	x0, x2, #50
    2740:	cmp	x3, x1
    2744:	eor	x0, x0, #0x1
    2748:	and	w0, w0, #0x1
    274c:	b.eq	2968 <__addtf3+0x9d8>  // b.none
    2750:	cbz	x8, 2984 <__addtf3+0x9f4>
    2754:	bfi	x6, x2, #61, #3
    2758:	lsr	x3, x2, #3
    275c:	tbz	x2, #50, 2778 <__addtf3+0x7e8>
    2760:	lsr	x1, x4, #3
    2764:	tbnz	x4, #50, 2778 <__addtf3+0x7e8>
    2768:	mov	x6, x10
    276c:	mov	w7, w11
    2770:	bfi	x6, x4, #61, #3
    2774:	mov	x3, x1
    2778:	extr	x2, x3, x6, #61
    277c:	bfi	x6, x2, #61, #3
    2780:	lsr	x2, x2, #3
    2784:	mov	x8, x6
    2788:	b	2434 <__addtf3+0x4a4>
    278c:	mov	x0, #0x7fff                	// #32767
    2790:	cmp	x8, x0
    2794:	b.ne	2240 <__addtf3+0x2b0>  // b.any
    2798:	orr	x0, x2, x9
    279c:	cbz	x0, 2588 <__addtf3+0x5f8>
    27a0:	lsr	x5, x2, #50
    27a4:	eor	w5, w5, #0x1
    27a8:	b	2418 <__addtf3+0x488>
    27ac:	cbz	x8, 28c0 <__addtf3+0x930>
    27b0:	mov	w7, w11
    27b4:	mov	x2, x4
    27b8:	mov	x9, x13
    27bc:	mov	x12, x14
    27c0:	mov	x1, #0x0                   	// #0
    27c4:	mov	x3, #0x0                   	// #0
    27c8:	b	24a4 <__addtf3+0x514>
    27cc:	ands	x3, x15, #0xc00000
    27d0:	b.eq	285c <__addtf3+0x8cc>  // b.none
    27d4:	cmp	x3, #0x400, lsl #12
    27d8:	eor	w0, w7, #0x1
    27dc:	cset	w1, eq  // eq = none
    27e0:	tst	w1, w0
    27e4:	b.ne	2a80 <__addtf3+0xaf0>  // b.any
    27e8:	cmp	x3, #0x800, lsl #12
    27ec:	b.eq	2a2c <__addtf3+0xa9c>  // b.none
    27f0:	cmp	x3, #0x400, lsl #12
    27f4:	mov	w0, #0x14                  	// #20
    27f8:	b.ne	2308 <__addtf3+0x378>  // b.any
    27fc:	mov	x2, #0xffffffffffffffff    	// #-1
    2800:	mov	x1, #0x7ffe                	// #32766
    2804:	mov	x9, x2
    2808:	mov	w5, #0x0                   	// #0
    280c:	mov	w0, #0x14                  	// #20
    2810:	cbnz	x12, 23cc <__addtf3+0x43c>
    2814:	b	23c4 <__addtf3+0x434>
    2818:	mov	x9, x5
    281c:	b	2064 <__addtf3+0xd4>
    2820:	orr	x2, x2, x9
    2824:	cmp	x2, #0x0
    2828:	cset	x9, ne  // ne = any
    282c:	b	2688 <__addtf3+0x6f8>
    2830:	mov	w1, #0x80                  	// #128
    2834:	sub	w1, w1, w0
    2838:	subs	w0, w0, #0x40
    283c:	lsl	x1, x2, x1
    2840:	orr	x1, x9, x1
    2844:	csel	x9, x1, x9, ne  // ne = any
    2848:	lsr	x2, x2, x0
    284c:	cmp	x9, #0x0
    2850:	cset	x9, ne  // ne = any
    2854:	orr	x9, x9, x2
    2858:	b	2620 <__addtf3+0x690>
    285c:	mov	w0, #0x14                  	// #20
    2860:	b	234c <__addtf3+0x3bc>
    2864:	lsr	x5, x4, #50
    2868:	mov	w7, w11
    286c:	eor	x5, x5, #0x1
    2870:	mov	x9, x13
    2874:	and	w5, w5, #0x1
    2878:	mov	x2, x4
    287c:	b	2418 <__addtf3+0x488>
    2880:	mov	x8, #0x7fff                	// #32767
    2884:	cmp	x1, x8
    2888:	b.eq	29a8 <__addtf3+0xa18>  // b.none
    288c:	cmp	x3, x8
    2890:	b.eq	2a1c <__addtf3+0xa8c>  // b.none
    2894:	cbnz	x0, 29c0 <__addtf3+0xa30>
    2898:	mov	x2, x4
    289c:	mov	x9, x13
    28a0:	b	2418 <__addtf3+0x488>
    28a4:	mov	x0, #0x7fff                	// #32767
    28a8:	cmp	x3, x0
    28ac:	b.eq	2a58 <__addtf3+0xac8>  // b.none
    28b0:	mov	x2, x4
    28b4:	mov	x9, x13
    28b8:	mov	x1, x3
    28bc:	b	2240 <__addtf3+0x2b0>
    28c0:	and	x15, x15, #0xc00000
    28c4:	mov	x2, #0x0                   	// #0
    28c8:	cmp	x15, #0x800, lsl #12
    28cc:	cset	w7, eq  // eq = none
    28d0:	b	2260 <__addtf3+0x2d0>
    28d4:	mov	x2, x4
    28d8:	mov	x9, x13
    28dc:	b	20cc <__addtf3+0x13c>
    28e0:	mov	w0, #0x80                  	// #128
    28e4:	sub	w0, w0, w5
    28e8:	subs	w5, w5, #0x40
    28ec:	lsl	x0, x2, x0
    28f0:	orr	x0, x9, x0
    28f4:	csel	x9, x0, x9, ne  // ne = any
    28f8:	lsr	x2, x2, x5
    28fc:	cmp	x9, #0x0
    2900:	cset	x9, ne  // ne = any
    2904:	orr	x9, x9, x2
    2908:	b	2688 <__addtf3+0x6f8>
    290c:	cmp	x13, x9
    2910:	mov	w7, w11
    2914:	sbc	x2, x4, x2
    2918:	sub	x9, x13, x9
    291c:	mov	x1, x3
    2920:	mov	x12, x5
    2924:	b	205c <__addtf3+0xcc>
    2928:	ands	x3, x15, #0xc00000
    292c:	b.eq	285c <__addtf3+0x8cc>  // b.none
    2930:	cmp	x3, #0x400, lsl #12
    2934:	eor	w0, w7, #0x1
    2938:	csel	w0, w0, wzr, eq  // eq = none
    293c:	cbnz	w0, 2a80 <__addtf3+0xaf0>
    2940:	cmp	x3, #0x800, lsl #12
    2944:	b.ne	27f0 <__addtf3+0x860>  // b.any
    2948:	cbz	x12, 2a30 <__addtf3+0xaa0>
    294c:	mov	w0, #0x14                  	// #20
    2950:	mov	x16, #0x1                   	// #1
    2954:	b	234c <__addtf3+0x3bc>
    2958:	orr	x0, x4, x13
    295c:	cbnz	x0, 2864 <__addtf3+0x8d4>
    2960:	mov	w7, w11
    2964:	b	2588 <__addtf3+0x5f8>
    2968:	cbz	x8, 2a74 <__addtf3+0xae4>
    296c:	tst	x4, #0x4000000000000
    2970:	csinc	w0, w0, wzr, ne  // ne = any
    2974:	cbnz	x5, 2754 <__addtf3+0x7c4>
    2978:	mov	w7, w11
    297c:	mov	x2, x4
    2980:	mov	x9, x13
    2984:	mov	w5, w0
    2988:	b	2418 <__addtf3+0x488>
    298c:	orr	x8, x5, x3
    2990:	cbz	x8, 28c0 <__addtf3+0x930>
    2994:	and	x0, x5, #0x7
    2998:	mov	x9, x5
    299c:	mov	x2, x3
    29a0:	mov	w5, #0x1                   	// #1
    29a4:	b	20dc <__addtf3+0x14c>
    29a8:	cbz	x0, 2a14 <__addtf3+0xa84>
    29ac:	lsr	x5, x2, #50
    29b0:	cmp	x3, x1
    29b4:	eor	x5, x5, #0x1
    29b8:	and	w5, w5, #0x1
    29bc:	b.eq	2a8c <__addtf3+0xafc>  // b.none
    29c0:	orr	x13, x4, x13
    29c4:	cbz	x13, 2418 <__addtf3+0x488>
    29c8:	bfi	x6, x2, #61, #3
    29cc:	lsr	x0, x2, #3
    29d0:	tbz	x2, #50, 29ec <__addtf3+0xa5c>
    29d4:	lsr	x1, x4, #3
    29d8:	tbnz	x4, #50, 29ec <__addtf3+0xa5c>
    29dc:	and	x6, x10, #0x1fffffffffffffff
    29e0:	mov	w7, w11
    29e4:	orr	x6, x6, x4, lsl #61
    29e8:	mov	x0, x1
    29ec:	extr	x2, x0, x6, #61
    29f0:	mov	w0, w5
    29f4:	bfi	x6, x2, #61, #3
    29f8:	lsr	x2, x2, #3
    29fc:	mov	x8, x6
    2a00:	b	2434 <__addtf3+0x4a4>
    2a04:	adds	x9, x9, x13
    2a08:	mov	x1, x3
    2a0c:	adc	x2, x4, x2
    2a10:	b	22d0 <__addtf3+0x340>
    2a14:	cmp	x3, x1
    2a18:	b.ne	2898 <__addtf3+0x908>  // b.any
    2a1c:	orr	x1, x4, x13
    2a20:	cbnz	x1, 2a94 <__addtf3+0xb04>
    2a24:	cbz	x0, 2588 <__addtf3+0x5f8>
    2a28:	b	2418 <__addtf3+0x488>
    2a2c:	cbnz	x16, 294c <__addtf3+0x9bc>
    2a30:	mov	x2, #0xffffffffffffffff    	// #-1
    2a34:	mov	w7, #0x0                   	// #0
    2a38:	mov	x9, x2
    2a3c:	mov	x1, #0x7ffe                	// #32766
    2a40:	mov	w0, #0x14                  	// #20
    2a44:	b	210c <__addtf3+0x17c>
    2a48:	mov	w7, w11
    2a4c:	mov	x2, x4
    2a50:	mov	x9, x13
    2a54:	b	2418 <__addtf3+0x488>
    2a58:	orr	x0, x4, x13
    2a5c:	cbz	x0, 2588 <__addtf3+0x5f8>
    2a60:	b	23a4 <__addtf3+0x414>
    2a64:	cmp	x3, x1
    2a68:	b.eq	2968 <__addtf3+0x9d8>  // b.none
    2a6c:	mov	w5, #0x0                   	// #0
    2a70:	b	2720 <__addtf3+0x790>
    2a74:	cbnz	x5, 2984 <__addtf3+0x9f4>
    2a78:	mov	w5, w0
    2a7c:	b	2720 <__addtf3+0x790>
    2a80:	mov	w0, #0x14                  	// #20
    2a84:	mov	x16, #0x0                   	// #0
    2a88:	b	234c <__addtf3+0x3bc>
    2a8c:	orr	x1, x4, x13
    2a90:	cbz	x1, 2418 <__addtf3+0x488>
    2a94:	tst	x4, #0x4000000000000
    2a98:	csinc	w5, w5, wzr, ne  // ne = any
    2a9c:	cbnz	x0, 29c8 <__addtf3+0xa38>
    2aa0:	b	2898 <__addtf3+0x908>
    2aa4:	mov	x8, #0x0                   	// #0
    2aa8:	mov	w1, #0x7fff                	// #32767
    2aac:	mov	x2, #0x0                   	// #0
    2ab0:	b	2128 <__addtf3+0x198>
    2ab4:	nop

0000000000002ab8 <__eqtf2>:
    2ab8:	stp	x29, x30, [sp, #-48]!
    2abc:	mov	x29, sp
    2ac0:	str	q0, [sp, #16]
    2ac4:	str	q1, [sp, #32]
    2ac8:	ldp	x6, x1, [sp, #16]
    2acc:	ldp	x7, x0, [sp, #32]
    2ad0:	mrs	x2, fpcr
    2ad4:	ubfx	x4, x1, #48, #15
    2ad8:	lsr	x2, x1, #63
    2adc:	lsr	x3, x0, #63
    2ae0:	ubfx	x9, x0, #0, #48
    2ae4:	mov	x5, #0x7fff                	// #32767
    2ae8:	mov	x10, x6
    2aec:	cmp	x4, x5
    2af0:	and	w2, w2, #0xff
    2af4:	ubfx	x1, x1, #0, #48
    2af8:	and	w3, w3, #0xff
    2afc:	ubfx	x0, x0, #48, #15
    2b00:	b.eq	2b34 <__eqtf2+0x7c>  // b.none
    2b04:	cmp	x0, x5
    2b08:	b.eq	2b20 <__eqtf2+0x68>  // b.none
    2b0c:	cmp	x4, x0
    2b10:	mov	w0, #0x1                   	// #1
    2b14:	b.eq	2b4c <__eqtf2+0x94>  // b.none
    2b18:	ldp	x29, x30, [sp], #48
    2b1c:	ret
    2b20:	orr	x8, x9, x7
    2b24:	cbnz	x8, 2bb0 <__eqtf2+0xf8>
    2b28:	mov	w0, #0x1                   	// #1
    2b2c:	ldp	x29, x30, [sp], #48
    2b30:	ret
    2b34:	orr	x5, x1, x6
    2b38:	cbnz	x5, 2b80 <__eqtf2+0xc8>
    2b3c:	cmp	x0, x4
    2b40:	b.ne	2b28 <__eqtf2+0x70>  // b.any
    2b44:	orr	x8, x9, x7
    2b48:	cbnz	x8, 2bb0 <__eqtf2+0xf8>
    2b4c:	cmp	x1, x9
    2b50:	mov	w0, #0x1                   	// #1
    2b54:	ccmp	x6, x7, #0x0, eq  // eq = none
    2b58:	b.ne	2b18 <__eqtf2+0x60>  // b.any
    2b5c:	cmp	w2, w3
    2b60:	mov	w0, #0x0                   	// #0
    2b64:	b.eq	2b18 <__eqtf2+0x60>  // b.none
    2b68:	mov	w0, #0x1                   	// #1
    2b6c:	cbnz	x4, 2b18 <__eqtf2+0x60>
    2b70:	orr	x1, x1, x10
    2b74:	cmp	x1, #0x0
    2b78:	cset	w0, ne  // ne = any
    2b7c:	b	2b18 <__eqtf2+0x60>
    2b80:	tst	x1, #0x800000000000
    2b84:	b.ne	2b9c <__eqtf2+0xe4>  // b.any
    2b88:	mov	w0, #0x1                   	// #1
    2b8c:	bl	37e8 <__sfp_handle_exceptions>
    2b90:	mov	w0, #0x1                   	// #1
    2b94:	ldp	x29, x30, [sp], #48
    2b98:	ret
    2b9c:	cmp	x0, x4
    2ba0:	mov	w0, #0x1                   	// #1
    2ba4:	b.ne	2b18 <__eqtf2+0x60>  // b.any
    2ba8:	orr	x8, x9, x7
    2bac:	cbz	x8, 2b18 <__eqtf2+0x60>
    2bb0:	tst	x9, #0x800000000000
    2bb4:	b.eq	2b88 <__eqtf2+0xd0>  // b.none
    2bb8:	b	2b28 <__eqtf2+0x70>
    2bbc:	nop

0000000000002bc0 <__getf2>:
    2bc0:	stp	x29, x30, [sp, #-48]!
    2bc4:	mov	x29, sp
    2bc8:	str	q0, [sp, #16]
    2bcc:	str	q1, [sp, #32]
    2bd0:	ldp	x8, x1, [sp, #16]
    2bd4:	ldp	x9, x0, [sp, #32]
    2bd8:	mrs	x2, fpcr
    2bdc:	ubfx	x4, x1, #48, #15
    2be0:	ubfx	x10, x1, #0, #48
    2be4:	lsr	x2, x1, #63
    2be8:	mov	x7, #0x7fff                	// #32767
    2bec:	mov	x5, x8
    2bf0:	cmp	x4, x7
    2bf4:	ubfx	x11, x0, #0, #48
    2bf8:	ubfx	x6, x0, #48, #15
    2bfc:	lsr	x1, x0, #63
    2c00:	mov	x3, x9
    2c04:	b.eq	2c40 <__getf2+0x80>  // b.none
    2c08:	cmp	x6, x7
    2c0c:	b.eq	2c50 <__getf2+0x90>  // b.none
    2c10:	cbnz	x4, 2c78 <__getf2+0xb8>
    2c14:	orr	x5, x10, x8
    2c18:	cmp	x5, #0x0
    2c1c:	cset	w0, eq  // eq = none
    2c20:	cbnz	x6, 2c2c <__getf2+0x6c>
    2c24:	orr	x3, x11, x9
    2c28:	cbz	x3, 2c98 <__getf2+0xd8>
    2c2c:	cbz	w0, 2c5c <__getf2+0x9c>
    2c30:	cmp	x1, #0x0
    2c34:	csinv	w0, w0, wzr, ne  // ne = any
    2c38:	ldp	x29, x30, [sp], #48
    2c3c:	ret
    2c40:	orr	x0, x10, x8
    2c44:	cbnz	x0, 2ca4 <__getf2+0xe4>
    2c48:	cmp	x6, x4
    2c4c:	b.ne	2c78 <__getf2+0xb8>  // b.any
    2c50:	orr	x3, x11, x3
    2c54:	cbnz	x3, 2ca4 <__getf2+0xe4>
    2c58:	cbz	x4, 2c88 <__getf2+0xc8>
    2c5c:	cmp	x2, x1
    2c60:	b.eq	2cb8 <__getf2+0xf8>  // b.none
    2c64:	cmp	x2, #0x0
    2c68:	mov	w0, #0xffffffff            	// #-1
    2c6c:	cneg	w0, w0, eq  // eq = none
    2c70:	ldp	x29, x30, [sp], #48
    2c74:	ret
    2c78:	cbnz	x6, 2c5c <__getf2+0x9c>
    2c7c:	orr	x3, x11, x3
    2c80:	cbnz	x3, 2c5c <__getf2+0x9c>
    2c84:	b	2c64 <__getf2+0xa4>
    2c88:	orr	x5, x10, x5
    2c8c:	cmp	x5, #0x0
    2c90:	cset	w0, eq  // eq = none
    2c94:	b	2c2c <__getf2+0x6c>
    2c98:	mov	w0, #0x0                   	// #0
    2c9c:	cbz	x5, 2c38 <__getf2+0x78>
    2ca0:	b	2c64 <__getf2+0xa4>
    2ca4:	mov	w0, #0x1                   	// #1
    2ca8:	bl	37e8 <__sfp_handle_exceptions>
    2cac:	mov	w0, #0xfffffffe            	// #-2
    2cb0:	ldp	x29, x30, [sp], #48
    2cb4:	ret
    2cb8:	cmp	x4, x6
    2cbc:	b.gt	2c64 <__getf2+0xa4>
    2cc0:	b.lt	2cf8 <__getf2+0x138>  // b.tstop
    2cc4:	cmp	x10, x11
    2cc8:	b.hi	2c64 <__getf2+0xa4>  // b.pmore
    2ccc:	cset	w0, eq  // eq = none
    2cd0:	cmp	w0, #0x0
    2cd4:	ccmp	x8, x9, #0x0, ne  // ne = any
    2cd8:	b.hi	2c64 <__getf2+0xa4>  // b.pmore
    2cdc:	cmp	x10, x11
    2ce0:	b.cc	2cf8 <__getf2+0x138>  // b.lo, b.ul, b.last
    2ce4:	cmp	w0, #0x0
    2ce8:	mov	w0, #0x0                   	// #0
    2cec:	ccmp	x8, x9, #0x2, ne  // ne = any
    2cf0:	b.cs	2c38 <__getf2+0x78>  // b.hs, b.nlast
    2cf4:	nop
    2cf8:	cmp	x2, #0x0
    2cfc:	mov	w0, #0x1                   	// #1
    2d00:	cneg	w0, w0, eq  // eq = none
    2d04:	b	2c38 <__getf2+0x78>

0000000000002d08 <__letf2>:
    2d08:	stp	x29, x30, [sp, #-48]!
    2d0c:	mov	x29, sp
    2d10:	str	q0, [sp, #16]
    2d14:	str	q1, [sp, #32]
    2d18:	ldp	x8, x1, [sp, #16]
    2d1c:	ldp	x9, x0, [sp, #32]
    2d20:	mrs	x2, fpcr
    2d24:	ubfx	x4, x1, #48, #15
    2d28:	ubfx	x10, x1, #0, #48
    2d2c:	lsr	x2, x1, #63
    2d30:	mov	x5, #0x7fff                	// #32767
    2d34:	mov	x6, x8
    2d38:	cmp	x4, x5
    2d3c:	ubfx	x11, x0, #0, #48
    2d40:	ubfx	x7, x0, #48, #15
    2d44:	lsr	x1, x0, #63
    2d48:	mov	x3, x9
    2d4c:	b.eq	2d84 <__letf2+0x7c>  // b.none
    2d50:	cmp	x7, x5
    2d54:	b.eq	2d94 <__letf2+0x8c>  // b.none
    2d58:	cbnz	x4, 2dc0 <__letf2+0xb8>
    2d5c:	orr	x6, x10, x8
    2d60:	cmp	x6, #0x0
    2d64:	cset	w0, eq  // eq = none
    2d68:	cbnz	x7, 2dac <__letf2+0xa4>
    2d6c:	orr	x3, x11, x9
    2d70:	cbnz	x3, 2dac <__letf2+0xa4>
    2d74:	mov	w0, #0x0                   	// #0
    2d78:	cbnz	x6, 2dd4 <__letf2+0xcc>
    2d7c:	ldp	x29, x30, [sp], #48
    2d80:	ret
    2d84:	orr	x0, x10, x8
    2d88:	cbnz	x0, 2de8 <__letf2+0xe0>
    2d8c:	cmp	x7, x4
    2d90:	b.ne	2dc0 <__letf2+0xb8>  // b.any
    2d94:	orr	x3, x11, x3
    2d98:	cbnz	x3, 2de8 <__letf2+0xe0>
    2d9c:	cbnz	x4, 2dcc <__letf2+0xc4>
    2da0:	orr	x6, x10, x6
    2da4:	cmp	x6, #0x0
    2da8:	cset	w0, eq  // eq = none
    2dac:	cbz	w0, 2dcc <__letf2+0xc4>
    2db0:	cmp	x1, #0x0
    2db4:	csinv	w0, w0, wzr, ne  // ne = any
    2db8:	ldp	x29, x30, [sp], #48
    2dbc:	ret
    2dc0:	cbnz	x7, 2dcc <__letf2+0xc4>
    2dc4:	orr	x3, x11, x3
    2dc8:	cbz	x3, 2dd4 <__letf2+0xcc>
    2dcc:	cmp	x2, x1
    2dd0:	b.eq	2dfc <__letf2+0xf4>  // b.none
    2dd4:	cmp	x2, #0x0
    2dd8:	mov	w0, #0xffffffff            	// #-1
    2ddc:	cneg	w0, w0, eq  // eq = none
    2de0:	ldp	x29, x30, [sp], #48
    2de4:	ret
    2de8:	mov	w0, #0x1                   	// #1
    2dec:	bl	37e8 <__sfp_handle_exceptions>
    2df0:	mov	w0, #0x2                   	// #2
    2df4:	ldp	x29, x30, [sp], #48
    2df8:	ret
    2dfc:	cmp	x4, x7
    2e00:	b.gt	2dd4 <__letf2+0xcc>
    2e04:	b.lt	2e38 <__letf2+0x130>  // b.tstop
    2e08:	cmp	x10, x11
    2e0c:	b.hi	2dd4 <__letf2+0xcc>  // b.pmore
    2e10:	cset	w0, eq  // eq = none
    2e14:	cmp	w0, #0x0
    2e18:	ccmp	x8, x9, #0x0, ne  // ne = any
    2e1c:	b.hi	2dd4 <__letf2+0xcc>  // b.pmore
    2e20:	cmp	x10, x11
    2e24:	b.cc	2e38 <__letf2+0x130>  // b.lo, b.ul, b.last
    2e28:	cmp	w0, #0x0
    2e2c:	mov	w0, #0x0                   	// #0
    2e30:	ccmp	x8, x9, #0x2, ne  // ne = any
    2e34:	b.cs	2d7c <__letf2+0x74>  // b.hs, b.nlast
    2e38:	cmp	x2, #0x0
    2e3c:	mov	w0, #0x1                   	// #1
    2e40:	cneg	w0, w0, eq  // eq = none
    2e44:	b	2d7c <__letf2+0x74>

0000000000002e48 <__multf3>:
    2e48:	stp	x29, x30, [sp, #-80]!
    2e4c:	mov	x29, sp
    2e50:	str	q0, [sp, #48]
    2e54:	str	q1, [sp, #64]
    2e58:	ldp	x1, x0, [sp, #48]
    2e5c:	ldp	x6, x2, [sp, #64]
    2e60:	mrs	x11, fpcr
    2e64:	lsr	x3, x0, #63
    2e68:	ubfx	x7, x0, #0, #48
    2e6c:	and	w12, w3, #0xff
    2e70:	mov	x14, x3
    2e74:	ubfx	x3, x0, #48, #15
    2e78:	cbz	w3, 3220 <__multf3+0x3d8>
    2e7c:	mov	w4, #0x7fff                	// #32767
    2e80:	cmp	w3, w4
    2e84:	b.eq	32c4 <__multf3+0x47c>  // b.none
    2e88:	and	x3, x3, #0xffff
    2e8c:	extr	x4, x7, x1, #61
    2e90:	mov	x18, #0xffffffffffffc001    	// #-16383
    2e94:	orr	x7, x4, #0x8000000000000
    2e98:	add	x3, x3, x18
    2e9c:	lsl	x5, x1, #3
    2ea0:	mov	x16, #0x0                   	// #0
    2ea4:	mov	x1, #0x0                   	// #0
    2ea8:	mov	w0, #0x0                   	// #0
    2eac:	lsr	x8, x2, #63
    2eb0:	ubfx	x4, x2, #0, #48
    2eb4:	and	w15, w8, #0xff
    2eb8:	mov	x13, x8
    2ebc:	ubfx	x9, x2, #48, #15
    2ec0:	cbz	w9, 3280 <__multf3+0x438>
    2ec4:	mov	w8, #0x7fff                	// #32767
    2ec8:	cmp	w9, w8
    2ecc:	b.eq	2f50 <__multf3+0x108>  // b.none
    2ed0:	and	x9, x9, #0xffff
    2ed4:	mov	x17, #0xffffffffffffc001    	// #-16383
    2ed8:	add	x9, x9, x17
    2edc:	extr	x2, x4, x6, #61
    2ee0:	add	x9, x9, x3
    2ee4:	lsl	x6, x6, #3
    2ee8:	orr	x4, x2, #0x8000000000000
    2eec:	mov	x2, #0x0                   	// #0
    2ef0:	eor	w8, w12, w15
    2ef4:	cmp	x1, #0xa
    2ef8:	and	w10, w8, #0xff
    2efc:	add	x3, x9, #0x1
    2f00:	and	x8, x8, #0xff
    2f04:	b.le	2f88 <__multf3+0x140>
    2f08:	cmp	x1, #0xb
    2f0c:	b.eq	3620 <__multf3+0x7d8>  // b.none
    2f10:	mov	w15, w12
    2f14:	mov	x13, x14
    2f18:	mov	w10, w15
    2f1c:	cmp	x16, #0x2
    2f20:	b.eq	32e4 <__multf3+0x49c>  // b.none
    2f24:	mov	x4, x7
    2f28:	mov	x6, x5
    2f2c:	mov	x2, x16
    2f30:	mov	x8, x13
    2f34:	cmp	x2, #0x3
    2f38:	b.ne	2fa4 <__multf3+0x15c>  // b.any
    2f3c:	orr	x4, x4, #0x800000000000
    2f40:	mov	x5, x6
    2f44:	and	x4, x4, #0xffffffffffff
    2f48:	mov	w1, #0x7fff                	// #32767
    2f4c:	b	2fb8 <__multf3+0x170>
    2f50:	mov	x8, #0x7fff                	// #32767
    2f54:	orr	x2, x4, x6
    2f58:	add	x9, x3, x8
    2f5c:	cbnz	x2, 2fdc <__multf3+0x194>
    2f60:	eor	w8, w12, w15
    2f64:	orr	x1, x1, #0x2
    2f68:	and	w10, w8, #0xff
    2f6c:	cmp	x1, #0xa
    2f70:	add	x3, x3, #0x8, lsl #12
    2f74:	and	x8, x8, #0xff
    2f78:	mov	x6, #0x0                   	// #0
    2f7c:	b.gt	3594 <__multf3+0x74c>
    2f80:	mov	x4, #0x0                   	// #0
    2f84:	mov	x2, #0x2                   	// #2
    2f88:	cmp	x1, #0x2
    2f8c:	b.gt	3004 <__multf3+0x1bc>
    2f90:	sub	x1, x1, #0x1
    2f94:	cmp	x1, #0x1
    2f98:	b.hi	3040 <__multf3+0x1f8>  // b.pmore
    2f9c:	cmp	x2, #0x2
    2fa0:	b.eq	32e4 <__multf3+0x49c>  // b.none
    2fa4:	cmp	x2, #0x1
    2fa8:	b.ne	31a0 <__multf3+0x358>  // b.any
    2fac:	mov	w1, #0x0                   	// #0
    2fb0:	mov	x4, #0x0                   	// #0
    2fb4:	mov	x5, #0x0                   	// #0
    2fb8:	mov	x3, #0x0                   	// #0
    2fbc:	orr	w1, w1, w10, lsl #15
    2fc0:	bfxil	x3, x4, #0, #48
    2fc4:	fmov	d0, x5
    2fc8:	bfi	x3, x1, #48, #16
    2fcc:	fmov	v0.d[1], x3
    2fd0:	cbnz	w0, 3410 <__multf3+0x5c8>
    2fd4:	ldp	x29, x30, [sp], #80
    2fd8:	ret
    2fdc:	tst	x4, #0x800000000000
    2fe0:	eor	w8, w12, w15
    2fe4:	orr	x1, x1, #0x3
    2fe8:	csinc	w0, w0, wzr, ne  // ne = any
    2fec:	and	w10, w8, #0xff
    2ff0:	add	x3, x3, #0x8, lsl #12
    2ff4:	cmp	x1, #0xa
    2ff8:	and	x8, x8, #0xff
    2ffc:	mov	x2, #0x3                   	// #3
    3000:	b.gt	3614 <__multf3+0x7cc>
    3004:	mov	x12, #0x1                   	// #1
    3008:	mov	x14, #0x530                 	// #1328
    300c:	lsl	x1, x12, x1
    3010:	tst	x1, x14
    3014:	b.ne	3214 <__multf3+0x3cc>  // b.any
    3018:	mov	x14, #0x240                 	// #576
    301c:	tst	x1, x14
    3020:	b.ne	31fc <__multf3+0x3b4>  // b.any
    3024:	mov	x12, #0x88                  	// #136
    3028:	tst	x1, x12
    302c:	b.eq	3040 <__multf3+0x1f8>  // b.none
    3030:	mov	x7, x4
    3034:	mov	x5, x6
    3038:	mov	x16, x2
    303c:	b	2f18 <__multf3+0xd0>
    3040:	lsr	x13, x5, #32
    3044:	and	x12, x6, #0xffffffff
    3048:	and	x15, x5, #0xffffffff
    304c:	lsr	x6, x6, #32
    3050:	and	x18, x4, #0xffffffff
    3054:	lsr	x2, x4, #32
    3058:	mul	x4, x13, x12
    305c:	stp	x21, x22, [sp, #32]
    3060:	lsr	x22, x7, #32
    3064:	and	x5, x7, #0xffffffff
    3068:	mul	x16, x12, x15
    306c:	madd	x7, x6, x15, x4
    3070:	stp	x19, x20, [sp, #16]
    3074:	mul	x1, x13, x18
    3078:	mul	x17, x15, x18
    307c:	and	x30, x16, #0xffffffff
    3080:	madd	x15, x2, x15, x1
    3084:	add	x16, x7, x16, lsr #32
    3088:	mul	x21, x22, x12
    308c:	cmp	x4, x16
    3090:	mul	x20, x22, x18
    3094:	mov	x14, #0x100000000           	// #4294967296
    3098:	mul	x19, x13, x6
    309c:	add	x15, x15, x17, lsr #32
    30a0:	mul	x12, x12, x5
    30a4:	and	x17, x17, #0xffffffff
    30a8:	mul	x18, x5, x18
    30ac:	add	x4, x19, x14
    30b0:	madd	x7, x6, x5, x21
    30b4:	csel	x19, x4, x19, hi  // hi = pmore
    30b8:	madd	x5, x2, x5, x20
    30bc:	cmp	x1, x15
    30c0:	mul	x13, x13, x2
    30c4:	add	x17, x17, x15, lsl #32
    30c8:	mul	x6, x6, x22
    30cc:	add	x7, x7, x12, lsr #32
    30d0:	add	x5, x5, x18, lsr #32
    30d4:	add	x4, x13, x14
    30d8:	mul	x2, x2, x22
    30dc:	csel	x13, x4, x13, hi  // hi = pmore
    30e0:	and	x1, x18, #0xffffffff
    30e4:	cmp	x21, x7
    30e8:	add	x4, x6, x14
    30ec:	add	x30, x30, x16, lsl #32
    30f0:	csel	x6, x4, x6, hi  // hi = pmore
    30f4:	add	x13, x13, x15, lsr #32
    30f8:	cmp	x20, x5
    30fc:	add	x1, x1, x5, lsl #32
    3100:	add	x16, x17, x16, lsr #32
    3104:	add	x14, x2, x14
    3108:	csel	x2, x14, x2, hi  // hi = pmore
    310c:	add	x16, x19, x16
    3110:	adds	x1, x1, x13
    3114:	and	x12, x12, #0xffffffff
    3118:	cset	x13, cs  // cs = hs, nlast
    311c:	cmp	x16, x17
    3120:	cset	x4, cc  // cc = lo, ul, last
    3124:	add	x12, x12, x7, lsl #32
    3128:	adds	x1, x1, x4
    312c:	lsr	x5, x5, #32
    3130:	cset	x4, cs  // cs = hs, nlast
    3134:	cmp	x13, #0x0
    3138:	ccmp	x4, #0x0, #0x0, eq  // eq = none
    313c:	add	x7, x6, x7, lsr #32
    3140:	cinc	x5, x5, ne  // ne = any
    3144:	adds	x6, x16, x12
    3148:	cset	x4, cs  // cs = hs, nlast
    314c:	adds	x1, x1, x7
    3150:	cset	x7, cs  // cs = hs, nlast
    3154:	adds	x4, x1, x4
    3158:	cset	x1, cs  // cs = hs, nlast
    315c:	cmp	x7, #0x0
    3160:	orr	x30, x30, x6, lsl #13
    3164:	ccmp	x1, #0x0, #0x0, eq  // eq = none
    3168:	cinc	x1, x2, ne  // ne = any
    316c:	cmp	x30, #0x0
    3170:	add	x1, x1, x5
    3174:	cset	x2, ne  // ne = any
    3178:	orr	x6, x2, x6, lsr #51
    317c:	orr	x6, x6, x4, lsl #13
    3180:	extr	x4, x1, x4, #51
    3184:	tbz	x1, #39, 3498 <__multf3+0x650>
    3188:	ldp	x19, x20, [sp, #16]
    318c:	and	x1, x6, #0x1
    3190:	ldp	x21, x22, [sp, #32]
    3194:	orr	x6, x1, x6, lsr #1
    3198:	orr	x6, x6, x4, lsl #63
    319c:	lsr	x4, x4, #1
    31a0:	mov	x1, #0x3fff                	// #16383
    31a4:	add	x2, x3, x1
    31a8:	cmp	x2, #0x0
    31ac:	b.le	3344 <__multf3+0x4fc>
    31b0:	tst	x6, #0x7
    31b4:	b.eq	31d4 <__multf3+0x38c>  // b.none
    31b8:	and	x1, x11, #0xc00000
    31bc:	orr	w0, w0, #0x10
    31c0:	cmp	x1, #0x400, lsl #12
    31c4:	b.eq	358c <__multf3+0x744>  // b.none
    31c8:	cmp	x1, #0x800, lsl #12
    31cc:	b.eq	3534 <__multf3+0x6ec>  // b.none
    31d0:	cbz	x1, 351c <__multf3+0x6d4>
    31d4:	tbz	x4, #52, 31e0 <__multf3+0x398>
    31d8:	and	x4, x4, #0xffefffffffffffff
    31dc:	add	x2, x3, #0x4, lsl #12
    31e0:	mov	x1, #0x7ffe                	// #32766
    31e4:	cmp	x2, x1
    31e8:	b.gt	346c <__multf3+0x624>
    31ec:	and	w1, w2, #0x7fff
    31f0:	extr	x5, x4, x6, #3
    31f4:	ubfx	x4, x4, #3, #48
    31f8:	b	2fb8 <__multf3+0x170>
    31fc:	mov	w0, w12
    3200:	mov	w10, #0x0                   	// #0
    3204:	mov	x4, #0xffffffffffff        	// #281474976710655
    3208:	mov	x5, #0xffffffffffffffff    	// #-1
    320c:	mov	w1, #0x7fff                	// #32767
    3210:	b	2fb8 <__multf3+0x170>
    3214:	mov	w15, w10
    3218:	mov	x13, x8
    321c:	b	2f18 <__multf3+0xd0>
    3220:	orr	x5, x7, x1
    3224:	cbz	x5, 332c <__multf3+0x4e4>
    3228:	cbz	x7, 3448 <__multf3+0x600>
    322c:	clz	x0, x7
    3230:	sub	x4, x0, #0xf
    3234:	add	w5, w4, #0x3
    3238:	mov	w3, #0x3d                  	// #61
    323c:	sub	w3, w3, w4
    3240:	lsl	x4, x7, x5
    3244:	lsr	x3, x1, x3
    3248:	orr	x7, x3, x4
    324c:	lsl	x5, x1, x5
    3250:	lsr	x8, x2, #63
    3254:	mov	x3, #0xffffffffffffc011    	// #-16367
    3258:	ubfx	x4, x2, #0, #48
    325c:	sub	x3, x3, x0
    3260:	and	w15, w8, #0xff
    3264:	mov	x13, x8
    3268:	ubfx	x9, x2, #48, #15
    326c:	mov	x1, #0x0                   	// #0
    3270:	mov	x16, #0x0                   	// #0
    3274:	mov	w0, #0x0                   	// #0
    3278:	cbnz	w9, 2ec4 <__multf3+0x7c>
    327c:	nop
    3280:	orr	x2, x4, x6
    3284:	cbz	x2, 32f4 <__multf3+0x4ac>
    3288:	cbz	x4, 3424 <__multf3+0x5dc>
    328c:	clz	x9, x4
    3290:	sub	x2, x9, #0xf
    3294:	add	w10, w2, #0x3
    3298:	mov	w8, #0x3d                  	// #61
    329c:	sub	w8, w8, w2
    32a0:	lsl	x2, x4, x10
    32a4:	lsr	x8, x6, x8
    32a8:	orr	x4, x8, x2
    32ac:	lsl	x6, x6, x10
    32b0:	sub	x9, x3, x9
    32b4:	mov	x10, #0xffffffffffffc011    	// #-16367
    32b8:	mov	x2, #0x0                   	// #0
    32bc:	add	x9, x9, x10
    32c0:	b	2ef0 <__multf3+0xa8>
    32c4:	orr	x5, x7, x1
    32c8:	cbnz	x5, 330c <__multf3+0x4c4>
    32cc:	mov	x7, #0x0                   	// #0
    32d0:	mov	x1, #0x8                   	// #8
    32d4:	mov	x3, #0x7fff                	// #32767
    32d8:	mov	x16, #0x2                   	// #2
    32dc:	mov	w0, #0x0                   	// #0
    32e0:	b	2eac <__multf3+0x64>
    32e4:	mov	w1, #0x7fff                	// #32767
    32e8:	mov	x4, #0x0                   	// #0
    32ec:	mov	x5, #0x0                   	// #0
    32f0:	b	2fb8 <__multf3+0x170>
    32f4:	orr	x1, x1, #0x1
    32f8:	mov	x9, x3
    32fc:	mov	x4, #0x0                   	// #0
    3300:	mov	x6, #0x0                   	// #0
    3304:	mov	x2, #0x1                   	// #1
    3308:	b	2ef0 <__multf3+0xa8>
    330c:	lsr	x0, x7, #47
    3310:	mov	x5, x1
    3314:	eor	x0, x0, #0x1
    3318:	mov	x1, #0xc                   	// #12
    331c:	and	w0, w0, #0x1
    3320:	mov	x3, #0x7fff                	// #32767
    3324:	mov	x16, #0x3                   	// #3
    3328:	b	2eac <__multf3+0x64>
    332c:	mov	x7, #0x0                   	// #0
    3330:	mov	x1, #0x4                   	// #4
    3334:	mov	x3, #0x0                   	// #0
    3338:	mov	x16, #0x1                   	// #1
    333c:	mov	w0, #0x0                   	// #0
    3340:	b	2eac <__multf3+0x64>
    3344:	mov	x1, #0x1                   	// #1
    3348:	sub	x2, x1, x2
    334c:	cmp	x2, #0x74
    3350:	b.gt	33c8 <__multf3+0x580>
    3354:	cmp	x2, #0x3f
    3358:	b.le	34a8 <__multf3+0x660>
    335c:	mov	w1, #0x80                  	// #128
    3360:	sub	w1, w1, w2
    3364:	cmp	x2, #0x40
    3368:	sub	w2, w2, #0x40
    336c:	lsl	x1, x4, x1
    3370:	orr	x1, x6, x1
    3374:	csel	x6, x1, x6, ne  // ne = any
    3378:	lsr	x2, x4, x2
    337c:	cmp	x6, #0x0
    3380:	cset	x5, ne  // ne = any
    3384:	orr	x5, x5, x2
    3388:	ands	x2, x5, #0x7
    338c:	b.eq	34dc <__multf3+0x694>  // b.none
    3390:	mov	x2, #0x0                   	// #0
    3394:	and	x11, x11, #0xc00000
    3398:	orr	w0, w0, #0x10
    339c:	cmp	x11, #0x400, lsl #12
    33a0:	b.eq	35ec <__multf3+0x7a4>  // b.none
    33a4:	cmp	x11, #0x800, lsl #12
    33a8:	b.eq	3600 <__multf3+0x7b8>  // b.none
    33ac:	cbz	x11, 3544 <__multf3+0x6fc>
    33b0:	tbnz	x2, #51, 355c <__multf3+0x714>
    33b4:	ubfx	x4, x2, #3, #48
    33b8:	extr	x5, x2, x5, #3
    33bc:	orr	w0, w0, #0x8
    33c0:	mov	w1, #0x0                   	// #0
    33c4:	b	33f8 <__multf3+0x5b0>
    33c8:	orr	x5, x6, x4
    33cc:	cbz	x5, 33ec <__multf3+0x5a4>
    33d0:	and	x11, x11, #0xc00000
    33d4:	orr	w0, w0, #0x10
    33d8:	cmp	x11, #0x400, lsl #12
    33dc:	sub	x5, x1, x8
    33e0:	b.eq	33ec <__multf3+0x5a4>  // b.none
    33e4:	cmp	x11, #0x800, lsl #12
    33e8:	csel	x5, x8, xzr, eq  // eq = none
    33ec:	orr	w0, w0, #0x8
    33f0:	mov	w1, #0x0                   	// #0
    33f4:	mov	x4, #0x0                   	// #0
    33f8:	mov	x3, #0x0                   	// #0
    33fc:	fmov	d0, x5
    3400:	bfxil	x3, x4, #0, #48
    3404:	bfi	x3, x1, #48, #15
    3408:	bfi	x3, x10, #63, #1
    340c:	fmov	v0.d[1], x3
    3410:	str	q0, [sp, #48]
    3414:	bl	37e8 <__sfp_handle_exceptions>
    3418:	ldr	q0, [sp, #48]
    341c:	ldp	x29, x30, [sp], #80
    3420:	ret
    3424:	clz	x9, x6
    3428:	add	x2, x9, #0x31
    342c:	add	x9, x9, #0x40
    3430:	cmp	x2, #0x3c
    3434:	b.le	3294 <__multf3+0x44c>
    3438:	sub	w2, w2, #0x3d
    343c:	lsl	x4, x6, x2
    3440:	mov	x6, #0x0                   	// #0
    3444:	b	32b0 <__multf3+0x468>
    3448:	clz	x3, x1
    344c:	add	x4, x3, #0x31
    3450:	add	x0, x3, #0x40
    3454:	cmp	x4, #0x3c
    3458:	b.le	3234 <__multf3+0x3ec>
    345c:	sub	w4, w4, #0x3d
    3460:	mov	x5, #0x0                   	// #0
    3464:	lsl	x7, x1, x4
    3468:	b	3250 <__multf3+0x408>
    346c:	and	x5, x11, #0xc00000
    3470:	cmp	x5, #0x400, lsl #12
    3474:	b.eq	3570 <__multf3+0x728>  // b.none
    3478:	cmp	x5, #0x800, lsl #12
    347c:	b.eq	3500 <__multf3+0x6b8>  // b.none
    3480:	cbz	x5, 34f4 <__multf3+0x6ac>
    3484:	mov	x4, #0xffffffffffff        	// #281474976710655
    3488:	mov	x5, #0xffffffffffffffff    	// #-1
    348c:	mov	w2, #0x14                  	// #20
    3490:	orr	w0, w0, w2
    3494:	b	33f8 <__multf3+0x5b0>
    3498:	mov	x3, x9
    349c:	ldp	x19, x20, [sp, #16]
    34a0:	ldp	x21, x22, [sp, #32]
    34a4:	b	31a0 <__multf3+0x358>
    34a8:	mov	w1, #0x40                  	// #64
    34ac:	sub	w1, w1, w2
    34b0:	lsr	x3, x6, x2
    34b4:	lsl	x6, x6, x1
    34b8:	cmp	x6, #0x0
    34bc:	lsl	x5, x4, x1
    34c0:	cset	x1, ne  // ne = any
    34c4:	orr	x5, x5, x3
    34c8:	lsr	x2, x4, x2
    34cc:	orr	x5, x5, x1
    34d0:	tst	x5, #0x7
    34d4:	b.ne	3394 <__multf3+0x54c>  // b.any
    34d8:	tbnz	x2, #51, 360c <__multf3+0x7c4>
    34dc:	ubfx	x4, x2, #3, #48
    34e0:	extr	x5, x2, x5, #3
    34e4:	mov	w1, #0x0                   	// #0
    34e8:	tbz	w11, #11, 2fb8 <__multf3+0x170>
    34ec:	orr	w0, w0, #0x8
    34f0:	b	33f8 <__multf3+0x5b0>
    34f4:	mov	w1, #0x7fff                	// #32767
    34f8:	mov	x4, #0x0                   	// #0
    34fc:	b	348c <__multf3+0x644>
    3500:	cmp	x8, #0x0
    3504:	mov	w2, #0x7fff                	// #32767
    3508:	mov	x4, #0xffffffffffff        	// #281474976710655
    350c:	csel	w1, w1, w2, eq  // eq = none
    3510:	csel	x4, x4, xzr, eq  // eq = none
    3514:	csetm	x5, eq  // eq = none
    3518:	b	348c <__multf3+0x644>
    351c:	and	x1, x6, #0xf
    3520:	cmp	x1, #0x4
    3524:	b.eq	31d4 <__multf3+0x38c>  // b.none
    3528:	adds	x6, x6, #0x4
    352c:	cinc	x4, x4, cs  // cs = hs, nlast
    3530:	b	31d4 <__multf3+0x38c>
    3534:	cbz	x8, 31d4 <__multf3+0x38c>
    3538:	adds	x6, x6, #0x8
    353c:	cinc	x4, x4, cs  // cs = hs, nlast
    3540:	b	31d4 <__multf3+0x38c>
    3544:	and	x1, x5, #0xf
    3548:	cmp	x1, #0x4
    354c:	b.eq	3558 <__multf3+0x710>  // b.none
    3550:	adds	x5, x5, #0x4
    3554:	cinc	x2, x2, cs  // cs = hs, nlast
    3558:	tbz	x2, #51, 33b4 <__multf3+0x56c>
    355c:	orr	w0, w0, #0x8
    3560:	mov	w1, #0x1                   	// #1
    3564:	mov	x4, #0x0                   	// #0
    3568:	mov	x5, #0x0                   	// #0
    356c:	b	33f8 <__multf3+0x5b0>
    3570:	cmp	x8, #0x0
    3574:	mov	w2, #0x7fff                	// #32767
    3578:	mov	x4, #0xffffffffffff        	// #281474976710655
    357c:	csel	w1, w1, w2, ne  // ne = any
    3580:	csel	x4, x4, xzr, ne  // ne = any
    3584:	csetm	x5, ne  // ne = any
    3588:	b	348c <__multf3+0x644>
    358c:	cbnz	x8, 31d4 <__multf3+0x38c>
    3590:	b	3538 <__multf3+0x6f0>
    3594:	mov	x4, #0x2                   	// #2
    3598:	cmp	x1, #0xf
    359c:	b.ne	35c0 <__multf3+0x778>  // b.any
    35a0:	tbz	x7, #47, 35d8 <__multf3+0x790>
    35a4:	tbnz	x2, #47, 35d8 <__multf3+0x790>
    35a8:	orr	x4, x2, #0x800000000000
    35ac:	mov	w10, w15
    35b0:	and	x4, x4, #0xffffffffffff
    35b4:	mov	x5, x6
    35b8:	mov	w1, #0x7fff                	// #32767
    35bc:	b	2fb8 <__multf3+0x170>
    35c0:	cmp	x1, #0xb
    35c4:	b.ne	2f10 <__multf3+0xc8>  // b.any
    35c8:	mov	x7, x2
    35cc:	mov	x5, x6
    35d0:	mov	x16, x4
    35d4:	b	2f18 <__multf3+0xd0>
    35d8:	orr	x4, x7, #0x800000000000
    35dc:	mov	w10, w12
    35e0:	and	x4, x4, #0xffffffffffff
    35e4:	mov	w1, #0x7fff                	// #32767
    35e8:	b	2fb8 <__multf3+0x170>
    35ec:	cbnz	x8, 3558 <__multf3+0x710>
    35f0:	adds	x5, x5, #0x8
    35f4:	cinc	x2, x2, cs  // cs = hs, nlast
    35f8:	tbnz	x2, #51, 355c <__multf3+0x714>
    35fc:	b	33b4 <__multf3+0x56c>
    3600:	cbnz	x8, 35f0 <__multf3+0x7a8>
    3604:	tbnz	x2, #51, 355c <__multf3+0x714>
    3608:	b	33b4 <__multf3+0x56c>
    360c:	orr	w0, w0, #0x10
    3610:	b	355c <__multf3+0x714>
    3614:	mov	x2, x4
    3618:	mov	x4, #0x3                   	// #3
    361c:	b	3598 <__multf3+0x750>
    3620:	mov	w10, w15
    3624:	mov	x8, x13
    3628:	b	2f34 <__multf3+0xec>
    362c:	nop

0000000000003630 <__floatsitf>:
    3630:	cmp	w0, #0x0
    3634:	cbz	w0, 3680 <__floatsitf+0x50>
    3638:	cneg	w1, w0, lt  // lt = tstop
    363c:	mov	w4, #0x403e                	// #16446
    3640:	clz	x3, x1
    3644:	mov	w2, #0x402f                	// #16431
    3648:	sub	w4, w4, w3
    364c:	lsr	w0, w0, #31
    3650:	sub	w2, w2, w4
    3654:	mov	x3, #0x0                   	// #0
    3658:	and	w4, w4, #0x7fff
    365c:	lsl	x1, x1, x2
    3660:	and	x1, x1, #0xffffffffffff
    3664:	orr	w0, w4, w0, lsl #15
    3668:	mov	x2, #0x0                   	// #0
    366c:	bfxil	x3, x1, #0, #48
    3670:	fmov	d0, x2
    3674:	bfi	x3, x0, #48, #16
    3678:	fmov	v0.d[1], x3
    367c:	ret
    3680:	mov	w4, #0x0                   	// #0
    3684:	mov	x1, #0x0                   	// #0
    3688:	mov	w0, #0x0                   	// #0
    368c:	mov	x3, #0x0                   	// #0
    3690:	orr	w0, w4, w0, lsl #15
    3694:	bfxil	x3, x1, #0, #48
    3698:	mov	x2, #0x0                   	// #0
    369c:	fmov	d0, x2
    36a0:	bfi	x3, x0, #48, #16
    36a4:	fmov	v0.d[1], x3
    36a8:	ret
    36ac:	nop

00000000000036b0 <__fixtfdi>:
    36b0:	stp	x29, x30, [sp, #-48]!
    36b4:	mov	x29, sp
    36b8:	str	x19, [sp, #16]
    36bc:	str	q0, [sp, #32]
    36c0:	ldp	x2, x0, [sp, #32]
    36c4:	mrs	x1, fpcr
    36c8:	ubfx	x19, x0, #48, #15
    36cc:	mov	x3, #0x3ffe                	// #16382
    36d0:	ubfx	x4, x0, #0, #48
    36d4:	cmp	x19, x3
    36d8:	b.gt	3700 <__fixtfdi+0x50>
    36dc:	cbnz	x19, 37a0 <__fixtfdi+0xf0>
    36e0:	orr	x2, x4, x2
    36e4:	cbz	x2, 36f0 <__fixtfdi+0x40>
    36e8:	mov	w0, #0x10                  	// #16
    36ec:	bl	37e8 <__sfp_handle_exceptions>
    36f0:	mov	x0, x19
    36f4:	ldr	x19, [sp, #16]
    36f8:	ldp	x29, x30, [sp], #48
    36fc:	ret
    3700:	lsr	x1, x0, #63
    3704:	and	w3, w1, #0xff
    3708:	mov	x1, #0x403d                	// #16445
    370c:	cmp	x19, x1
    3710:	b.le	3748 <__fixtfdi+0x98>
    3714:	mov	x0, #0x403e                	// #16446
    3718:	and	x5, x3, #0xff
    371c:	cmp	x19, x0
    3720:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
    3724:	csel	w1, w3, wzr, eq  // eq = none
    3728:	add	x19, x5, x0
    372c:	cbz	w1, 37b0 <__fixtfdi+0x100>
    3730:	extr	x4, x4, x2, #49
    3734:	cbnz	x4, 37b0 <__fixtfdi+0x100>
    3738:	cmp	xzr, x2, lsl #15
    373c:	b.eq	36f0 <__fixtfdi+0x40>  // b.none
    3740:	mov	w0, #0x10                  	// #16
    3744:	b	36ec <__fixtfdi+0x3c>
    3748:	mov	x5, #0x406f                	// #16495
    374c:	sub	x1, x5, x19
    3750:	mov	x0, x19
    3754:	cmp	x1, #0x3f
    3758:	orr	x19, x4, #0x1000000000000
    375c:	b.le	37bc <__fixtfdi+0x10c>
    3760:	mov	w4, #0xffffc011            	// #-16367
    3764:	add	w4, w0, w4
    3768:	cmp	x1, #0x40
    376c:	mov	w1, #0x402f                	// #16431
    3770:	sub	w0, w1, w0
    3774:	lsl	x1, x19, x4
    3778:	orr	x1, x2, x1
    377c:	csel	x2, x1, x2, ne  // ne = any
    3780:	lsr	x19, x19, x0
    3784:	cmp	x2, #0x0
    3788:	cset	w0, ne  // ne = any
    378c:	cmp	w3, #0x0
    3790:	cneg	x19, x19, ne  // ne = any
    3794:	cbz	w0, 36f0 <__fixtfdi+0x40>
    3798:	mov	w0, #0x10                  	// #16
    379c:	b	36ec <__fixtfdi+0x3c>
    37a0:	mov	x19, #0x0                   	// #0
    37a4:	mov	w0, #0x10                  	// #16
    37a8:	bl	37e8 <__sfp_handle_exceptions>
    37ac:	b	36f0 <__fixtfdi+0x40>
    37b0:	mov	w0, #0x1                   	// #1
    37b4:	bl	37e8 <__sfp_handle_exceptions>
    37b8:	b	36f0 <__fixtfdi+0x40>
    37bc:	mov	w6, #0xffffbfd1            	// #-16431
    37c0:	add	w4, w0, w6
    37c4:	sub	w0, w5, w0
    37c8:	lsl	x1, x2, x4
    37cc:	cmp	x1, #0x0
    37d0:	lsr	x2, x2, x0
    37d4:	cset	w0, ne  // ne = any
    37d8:	lsl	x19, x19, x4
    37dc:	orr	x19, x2, x19
    37e0:	b	378c <__fixtfdi+0xdc>
    37e4:	nop

00000000000037e8 <__sfp_handle_exceptions>:
    37e8:	tbz	w0, #0, 37f8 <__sfp_handle_exceptions+0x10>
    37ec:	movi	v1.2s, #0x0
    37f0:	fdiv	s0, s1, s1
    37f4:	mrs	x1, fpsr
    37f8:	tbz	w0, #1, 380c <__sfp_handle_exceptions+0x24>
    37fc:	fmov	s1, #1.000000000000000000e+00
    3800:	movi	v2.2s, #0x0
    3804:	fdiv	s0, s1, s2
    3808:	mrs	x1, fpsr
    380c:	tbz	w0, #2, 382c <__sfp_handle_exceptions+0x44>
    3810:	mov	w2, #0xc5ae                	// #50606
    3814:	mov	w1, #0x7f7fffff            	// #2139095039
    3818:	movk	w2, #0x749d, lsl #16
    381c:	fmov	s1, w1
    3820:	fmov	s2, w2
    3824:	fadd	s0, s1, s2
    3828:	mrs	x1, fpsr
    382c:	tbz	w0, #3, 383c <__sfp_handle_exceptions+0x54>
    3830:	movi	v1.2s, #0x80, lsl #16
    3834:	fmul	s0, s1, s1
    3838:	mrs	x1, fpsr
    383c:	tbz	w0, #4, 3854 <__sfp_handle_exceptions+0x6c>
    3840:	mov	w0, #0x7f7fffff            	// #2139095039
    3844:	fmov	s2, #1.000000000000000000e+00
    3848:	fmov	s1, w0
    384c:	fsub	s0, s1, s2
    3850:	mrs	x0, fpsr
    3854:	ret

Disassembly of section .fini:

0000000000003858 <_fini>:
    3858:	stp	x29, x30, [sp, #-16]!
    385c:	mov	x29, sp
    3860:	ldp	x29, x30, [sp], #16
    3864:	ret
