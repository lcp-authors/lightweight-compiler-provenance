
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-makefs_clang_-O1:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000210f20 <_start>:
  210f20:	mov	x29, #0x0                   	// #0
  210f24:	mov	x30, #0x0                   	// #0
  210f28:	mov	x5, x0
  210f2c:	ldr	x1, [sp]
  210f30:	add	x2, sp, #0x8
  210f34:	mov	x6, sp
  210f38:	movz	x0, #0x0, lsl #48
  210f3c:	movk	x0, #0x0, lsl #32
  210f40:	movk	x0, #0x21, lsl #16
  210f44:	movk	x0, #0x1070
  210f48:	movz	x3, #0x0, lsl #48
  210f4c:	movk	x3, #0x0, lsl #32
  210f50:	movk	x3, #0x21, lsl #16
  210f54:	movk	x3, #0x1558
  210f58:	movz	x4, #0x0, lsl #48
  210f5c:	movk	x4, #0x0, lsl #32
  210f60:	movk	x4, #0x21, lsl #16
  210f64:	movk	x4, #0x15d8
  210f68:	bl	211640 <__libc_start_main@plt>
  210f6c:	bl	211650 <abort@plt>

0000000000210f70 <call_weak_fn>:
  210f70:	adrp	x0, 221000 <__xstat64@plt+0xf860>
  210f74:	ldr	x0, [x0, #2448]
  210f78:	cbz	x0, 210f80 <call_weak_fn+0x10>
  210f7c:	b	211660 <__gmon_start__@plt>
  210f80:	ret

0000000000210f84 <deregister_tm_clones>:
  210f84:	adrp	x0, 231000 <_DYNAMIC+0xf840>
  210f88:	add	x0, x0, #0xa78
  210f8c:	adrp	x1, 231000 <_DYNAMIC+0xf840>
  210f90:	add	x1, x1, #0xa78
  210f94:	cmp	x0, x1
  210f98:	b.eq	210fcc <deregister_tm_clones+0x48>  // b.none
  210f9c:	stp	x29, x30, [sp, #-32]!
  210fa0:	mov	x29, sp
  210fa4:	adrp	x0, 200000 <__FRAME_END__-0xe10>
  210fa8:	ldr	x0, [x0, #3096]
  210fac:	str	x0, [sp, #24]
  210fb0:	mov	x1, x0
  210fb4:	cbz	x1, 210fc4 <deregister_tm_clones+0x40>
  210fb8:	adrp	x0, 231000 <_DYNAMIC+0xf840>
  210fbc:	add	x0, x0, #0xa78
  210fc0:	blr	x1
  210fc4:	ldp	x29, x30, [sp], #32
  210fc8:	ret
  210fcc:	ret

0000000000210fd0 <register_tm_clones>:
  210fd0:	adrp	x0, 231000 <_DYNAMIC+0xf840>
  210fd4:	add	x0, x0, #0xa78
  210fd8:	adrp	x1, 231000 <_DYNAMIC+0xf840>
  210fdc:	add	x1, x1, #0xa78
  210fe0:	sub	x0, x0, x1
  210fe4:	lsr	x1, x0, #63
  210fe8:	add	x0, x1, x0, asr #3
  210fec:	cmp	xzr, x0, asr #1
  210ff0:	b.eq	211028 <register_tm_clones+0x58>  // b.none
  210ff4:	stp	x29, x30, [sp, #-32]!
  210ff8:	mov	x29, sp
  210ffc:	asr	x1, x0, #1
  211000:	adrp	x0, 200000 <__FRAME_END__-0xe10>
  211004:	ldr	x0, [x0, #3104]
  211008:	str	x0, [sp, #24]
  21100c:	mov	x2, x0
  211010:	cbz	x2, 211020 <register_tm_clones+0x50>
  211014:	adrp	x0, 231000 <_DYNAMIC+0xf840>
  211018:	add	x0, x0, #0xa78
  21101c:	blr	x2
  211020:	ldp	x29, x30, [sp], #32
  211024:	ret
  211028:	ret

000000000021102c <__do_global_dtors_aux>:
  21102c:	adrp	x0, 231000 <_DYNAMIC+0xf840>
  211030:	ldrb	w0, [x0, #2680]
  211034:	cbnz	w0, 211058 <__do_global_dtors_aux+0x2c>
  211038:	stp	x29, x30, [sp, #-16]!
  21103c:	mov	x29, sp
  211040:	bl	210f84 <deregister_tm_clones>
  211044:	adrp	x0, 231000 <_DYNAMIC+0xf840>
  211048:	mov	w1, #0x1                   	// #1
  21104c:	strb	w1, [x0, #2680]
  211050:	ldp	x29, x30, [sp], #16
  211054:	ret
  211058:	ret

000000000021105c <frame_dummy>:
  21105c:	stp	x29, x30, [sp, #-16]!
  211060:	mov	x29, sp
  211064:	bl	210fd0 <register_tm_clones>
  211068:	ldp	x29, x30, [sp], #16
  21106c:	ret

0000000000211070 <main>:
  211070:	stp	x29, x30, [sp, #-32]!
  211074:	stp	x20, x19, [sp, #16]
  211078:	mov	x29, sp
  21107c:	mov	x19, x1
  211080:	mov	w20, w0
  211084:	bl	2110bc <save_argc_argv>
  211088:	mov	w0, w20
  21108c:	mov	x1, x19
  211090:	bl	2110d0 <run>
  211094:	mov	w19, w0
  211098:	bl	211670 <ask_password_agent_close@plt>
  21109c:	bl	211680 <polkit_agent_close@plt>
  2110a0:	bl	211690 <pager_close@plt>
  2110a4:	bl	2116a0 <mac_selinux_finish@plt>
  2110a8:	bl	2112f0 <static_destruct>
  2110ac:	lsr	w0, w19, #31
  2110b0:	ldp	x20, x19, [sp, #16]
  2110b4:	ldp	x29, x30, [sp], #32
  2110b8:	ret

00000000002110bc <save_argc_argv>:
  2110bc:	adrp	x8, 231000 <_DYNAMIC+0xf840>
  2110c0:	adrp	x9, 231000 <_DYNAMIC+0xf840>
  2110c4:	str	w0, [x8, #2688]
  2110c8:	str	x1, [x9, #2696]
  2110cc:	ret

00000000002110d0 <run>:
  2110d0:	sub	sp, sp, #0xb0
  2110d4:	stp	x29, x30, [sp, #128]
  2110d8:	add	x29, sp, #0x80
  2110dc:	str	x21, [sp, #144]
  2110e0:	stp	x20, x19, [sp, #160]
  2110e4:	mov	x19, x1
  2110e8:	mov	w20, w0
  2110ec:	str	xzr, [x29, #24]
  2110f0:	bl	2116b0 <log_setup_service@plt>
  2110f4:	cmp	w20, #0x3
  2110f8:	b.ne	2111c0 <run+0xf0>  // b.any
  2110fc:	ldp	x20, x19, [x19, #8]
  211100:	mov	x1, sp
  211104:	mov	x0, x19
  211108:	bl	2115e0 <stat64>
  21110c:	tbnz	w0, #31, 211208 <run+0x138>
  211110:	ldr	w8, [sp, #16]
  211114:	and	w8, w8, #0xf000
  211118:	cmp	w8, #0x6, lsl #12
  21111c:	b.eq	21115c <run+0x8c>  // b.none
  211120:	mov	w0, wzr
  211124:	bl	2116c0 <log_get_max_level_realm@plt>
  211128:	cmp	w0, #0x6
  21112c:	b.lt	21115c <run+0x8c>  // b.tstop
  211130:	adrp	x2, 200000 <__FRAME_END__-0xe10>
  211134:	adrp	x4, 200000 <__FRAME_END__-0xe10>
  211138:	adrp	x5, 200000 <__FRAME_END__-0xe10>
  21113c:	add	x2, x2, #0xd50
  211140:	add	x4, x4, #0xd49
  211144:	add	x5, x5, #0xc53
  211148:	mov	w0, #0x6                   	// #6
  21114c:	mov	w3, #0x40                  	// #64
  211150:	mov	w1, wzr
  211154:	mov	x6, x19
  211158:	bl	2116d0 <log_internal_realm@plt>
  21115c:	add	x1, x29, #0x18
  211160:	mov	x0, x19
  211164:	bl	2116e0 <probe_filesystem@plt>
  211168:	tbnz	w0, #31, 211248 <run+0x178>
  21116c:	ldr	x21, [x29, #24]
  211170:	cbz	x21, 2112b0 <run+0x1e0>
  211174:	mov	w0, wzr
  211178:	bl	2116c0 <log_get_max_level_realm@plt>
  21117c:	cmp	w0, #0x6
  211180:	mov	w20, wzr
  211184:	b.lt	2112c0 <run+0x1f0>  // b.tstop
  211188:	adrp	x2, 200000 <__FRAME_END__-0xe10>
  21118c:	adrp	x4, 200000 <__FRAME_END__-0xe10>
  211190:	adrp	x5, 200000 <__FRAME_END__-0xe10>
  211194:	add	x2, x2, #0xd50
  211198:	add	x4, x4, #0xd49
  21119c:	add	x5, x5, #0xd26
  2111a0:	mov	w0, #0x6                   	// #6
  2111a4:	mov	w3, #0x4b                  	// #75
  2111a8:	mov	w1, wzr
  2111ac:	mov	x6, x19
  2111b0:	mov	x7, x21
  2111b4:	bl	2116d0 <log_internal_realm@plt>
  2111b8:	mov	w20, wzr
  2111bc:	b	2112c0 <run+0x1f0>
  2111c0:	mov	w0, wzr
  2111c4:	bl	2116c0 <log_get_max_level_realm@plt>
  2111c8:	cmp	w0, #0x3
  2111cc:	b.lt	211200 <run+0x130>  // b.tstop
  2111d0:	adrp	x2, 200000 <__FRAME_END__-0xe10>
  2111d4:	adrp	x4, 200000 <__FRAME_END__-0xe10>
  2111d8:	adrp	x5, 200000 <__FRAME_END__-0xe10>
  2111dc:	mov	w1, #0x16                  	// #22
  2111e0:	add	x2, x2, #0xd50
  2111e4:	add	x4, x4, #0xd49
  2111e8:	add	x5, x5, #0xcde
  2111ec:	mov	w0, #0x3                   	// #3
  2111f0:	movk	w1, #0x4000, lsl #16
  2111f4:	mov	w3, #0x37                  	// #55
  2111f8:	bl	2116d0 <log_internal_realm@plt>
  2111fc:	b	2112bc <run+0x1ec>
  211200:	mov	w20, #0xffffffea            	// #-22
  211204:	b	2112c0 <run+0x1f0>
  211208:	bl	2116f0 <__errno_location@plt>
  21120c:	ldr	w20, [x0]
  211210:	mov	w0, wzr
  211214:	bl	2116c0 <log_get_max_level_realm@plt>
  211218:	cmp	w0, #0x3
  21121c:	b.lt	21129c <run+0x1cc>  // b.tstop
  211220:	adrp	x2, 200000 <__FRAME_END__-0xe10>
  211224:	adrp	x4, 200000 <__FRAME_END__-0xe10>
  211228:	adrp	x5, 200000 <__FRAME_END__-0xe10>
  21122c:	add	x2, x2, #0xd50
  211230:	add	x4, x4, #0xd49
  211234:	add	x5, x5, #0xd02
  211238:	mov	w0, #0x3                   	// #3
  21123c:	mov	w3, #0x3d                  	// #61
  211240:	mov	w1, w20
  211244:	b	211290 <run+0x1c0>
  211248:	mov	w21, w0
  21124c:	mov	w0, wzr
  211250:	bl	2116c0 <log_get_max_level_realm@plt>
  211254:	cmp	w0, #0x4
  211258:	b.lt	2112e0 <run+0x210>  // b.tstop
  21125c:	adrp	x8, 200000 <__FRAME_END__-0xe10>
  211260:	adrp	x9, 200000 <__FRAME_END__-0xe10>
  211264:	add	x8, x8, #0xc8d
  211268:	add	x9, x9, #0xd67
  21126c:	cmn	w21, #0x75
  211270:	adrp	x2, 200000 <__FRAME_END__-0xe10>
  211274:	adrp	x4, 200000 <__FRAME_END__-0xe10>
  211278:	csel	x5, x9, x8, eq  // eq = none
  21127c:	add	x2, x2, #0xd50
  211280:	add	x4, x4, #0xd49
  211284:	mov	w0, #0x4                   	// #4
  211288:	mov	w3, #0x48                  	// #72
  21128c:	mov	w1, w21
  211290:	mov	x6, x19
  211294:	bl	2116d0 <log_internal_realm@plt>
  211298:	b	2112bc <run+0x1ec>
  21129c:	cmp	w20, #0x0
  2112a0:	mov	w8, wzr
  2112a4:	cneg	w9, w20, mi  // mi = first
  2112a8:	sub	w20, w8, w9, uxtb
  2112ac:	b	2112c0 <run+0x1f0>
  2112b0:	mov	x0, x20
  2112b4:	mov	x1, x19
  2112b8:	bl	211368 <makefs>
  2112bc:	mov	w20, w0
  2112c0:	add	x0, x29, #0x18
  2112c4:	bl	211350 <freep>
  2112c8:	mov	w0, w20
  2112cc:	ldp	x20, x19, [sp, #160]
  2112d0:	ldr	x21, [sp, #144]
  2112d4:	ldp	x29, x30, [sp, #128]
  2112d8:	add	sp, sp, #0xb0
  2112dc:	ret
  2112e0:	mov	w8, wzr
  2112e4:	neg	w9, w21
  2112e8:	sub	w20, w8, w9, uxtb
  2112ec:	b	2112c0 <run+0x1f0>

00000000002112f0 <static_destruct>:
  2112f0:	stp	x29, x30, [sp, #-32]!
  2112f4:	stp	x20, x19, [sp, #16]
  2112f8:	adrp	x8, 221000 <__xstat64@plt+0xf860>
  2112fc:	ldr	x8, [x8, #2456]
  211300:	mov	x29, sp
  211304:	cbz	x8, 211344 <static_destruct+0x54>
  211308:	adrp	x0, 221000 <__xstat64@plt+0xf860>
  21130c:	ldr	x0, [x0, #2456]
  211310:	bl	211548 <ALIGN_TO>
  211314:	adrp	x20, 221000 <__xstat64@plt+0xf860>
  211318:	ldr	x20, [x20, #2464]
  21131c:	cmp	x0, x20
  211320:	b.cs	211344 <static_destruct+0x54>  // b.hs, b.nlast
  211324:	mov	x19, x0
  211328:	ldp	x0, x8, [x19]
  21132c:	blr	x8
  211330:	add	x0, x19, #0x10
  211334:	bl	211548 <ALIGN_TO>
  211338:	mov	x19, x0
  21133c:	cmp	x0, x20
  211340:	b.cc	211328 <static_destruct+0x38>  // b.lo, b.ul, b.last
  211344:	ldp	x20, x19, [sp, #16]
  211348:	ldp	x29, x30, [sp], #32
  21134c:	ret

0000000000211350 <freep>:
  211350:	stp	x29, x30, [sp, #-16]!
  211354:	ldr	x0, [x0]
  211358:	mov	x29, sp
  21135c:	bl	211700 <free@plt>
  211360:	ldp	x29, x30, [sp], #16
  211364:	ret

0000000000211368 <makefs>:
  211368:	stp	x29, x30, [sp, #-48]!
  21136c:	stp	x22, x21, [sp, #16]
  211370:	stp	x20, x19, [sp, #32]
  211374:	mov	x29, sp
  211378:	sub	sp, sp, #0x20
  21137c:	mov	x19, x1
  211380:	adrp	x1, 200000 <__FRAME_END__-0xe10>
  211384:	add	x1, x1, #0xd1a
  211388:	mov	x20, x0
  21138c:	bl	211710 <strcmp@plt>
  211390:	cbz	w0, 211420 <makefs+0xb8>
  211394:	adrp	x8, 200000 <__FRAME_END__-0xe10>
  211398:	add	x8, x8, #0xc28
  21139c:	mov	x22, xzr
  2113a0:	mov	x21, xzr
  2113a4:	stp	x8, x20, [x29, #-32]
  2113a8:	sub	x20, x29, #0x20
  2113ac:	ldr	x0, [x20, x22]
  2113b0:	cbz	x0, 2113c8 <makefs+0x60>
  2113b4:	bl	211720 <strlen@plt>
  2113b8:	add	x22, x22, #0x8
  2113bc:	cmp	x22, #0x10
  2113c0:	add	x21, x0, x21
  2113c4:	b.ne	2113ac <makefs+0x44>  // b.any
  2113c8:	add	x20, x21, #0x1
  2113cc:	mov	x0, x20
  2113d0:	bl	211514 <size_multiply_overflow>
  2113d4:	tbnz	w0, #0, 2114c8 <makefs+0x160>
  2113d8:	cmp	x20, #0x400, lsl #12
  2113dc:	b.hi	2114d4 <makefs+0x16c>  // b.pmore
  2113e0:	add	x9, x20, #0xf
  2113e4:	mov	x8, sp
  2113e8:	and	x9, x9, #0xfffffffffffffff0
  2113ec:	sub	x20, x8, x9
  2113f0:	mov	sp, x20
  2113f4:	mov	x21, xzr
  2113f8:	sub	x22, x29, #0x20
  2113fc:	mov	x0, x20
  211400:	ldr	x1, [x22, x21]
  211404:	cbz	x1, 211418 <makefs+0xb0>
  211408:	bl	211730 <stpcpy@plt>
  21140c:	add	x21, x21, #0x8
  211410:	cmp	x21, #0x10
  211414:	b.ne	211400 <makefs+0x98>  // b.any
  211418:	strb	wzr, [x0]
  21141c:	b	211428 <makefs+0xc0>
  211420:	adrp	x20, 200000 <__FRAME_END__-0xe10>
  211424:	add	x20, x20, #0xca6
  211428:	mov	w1, #0x1                   	// #1
  21142c:	mov	x0, x20
  211430:	bl	211740 <access@plt>
  211434:	cbz	w0, 211480 <makefs+0x118>
  211438:	bl	2116f0 <__errno_location@plt>
  21143c:	ldr	w19, [x0]
  211440:	mov	w0, wzr
  211444:	bl	2116c0 <log_get_max_level_realm@plt>
  211448:	cmp	w0, #0x3
  21144c:	b.lt	2114a4 <makefs+0x13c>  // b.tstop
  211450:	adrp	x2, 200000 <__FRAME_END__-0xe10>
  211454:	adrp	x4, 200000 <__FRAME_END__-0xe10>
  211458:	adrp	x5, 200000 <__FRAME_END__-0xe10>
  21145c:	add	x2, x2, #0xd50
  211460:	add	x4, x4, #0xc86
  211464:	add	x5, x5, #0xc6d
  211468:	mov	w0, #0x3                   	// #3
  21146c:	mov	w3, #0x1c                  	// #28
  211470:	mov	w1, w19
  211474:	mov	x6, x20
  211478:	bl	2116d0 <log_internal_realm@plt>
  21147c:	b	2114b4 <makefs+0x14c>
  211480:	sub	x0, x29, #0x4
  211484:	bl	21151c <safe_fork>
  211488:	tbnz	w0, #31, 2114b4 <makefs+0x14c>
  21148c:	cbz	w0, 2114f8 <makefs+0x190>
  211490:	ldur	w1, [x29, #-4]
  211494:	mov	w2, #0x3                   	// #3
  211498:	mov	x0, x20
  21149c:	bl	211750 <wait_for_terminate_and_check@plt>
  2114a0:	b	2114b4 <makefs+0x14c>
  2114a4:	cmp	w19, #0x0
  2114a8:	mov	w8, wzr
  2114ac:	cneg	w9, w19, mi  // mi = first
  2114b0:	sub	w0, w8, w9, uxtb
  2114b4:	mov	sp, x29
  2114b8:	ldp	x20, x19, [sp, #32]
  2114bc:	ldp	x22, x21, [sp, #16]
  2114c0:	ldp	x29, x30, [sp], #48
  2114c4:	ret
  2114c8:	adrp	x1, 200000 <__FRAME_END__-0xe10>
  2114cc:	add	x1, x1, #0xcb3
  2114d0:	b	2114dc <makefs+0x174>
  2114d4:	adrp	x1, 200000 <__FRAME_END__-0xe10>
  2114d8:	add	x1, x1, #0xc34
  2114dc:	adrp	x2, 200000 <__FRAME_END__-0xe10>
  2114e0:	adrp	x4, 200000 <__FRAME_END__-0xe10>
  2114e4:	add	x2, x2, #0xd50
  2114e8:	add	x4, x4, #0xda2
  2114ec:	mov	w3, #0x1a                  	// #26
  2114f0:	mov	w0, wzr
  2114f4:	bl	211760 <log_assert_failed_realm@plt>
  2114f8:	sub	x1, x29, #0x20
  2114fc:	mov	x0, x20
  211500:	stp	x20, x19, [x29, #-32]
  211504:	stur	xzr, [x29, #-16]
  211508:	bl	211770 <execv@plt>
  21150c:	mov	w0, #0x1                   	// #1
  211510:	bl	211780 <_exit@plt>

0000000000211514 <size_multiply_overflow>:
  211514:	mov	w0, wzr
  211518:	ret

000000000021151c <safe_fork>:
  21151c:	stp	x29, x30, [sp, #-16]!
  211520:	mov	x4, x0
  211524:	adrp	x0, 200000 <__FRAME_END__-0xe10>
  211528:	add	x0, x0, #0xd1f
  21152c:	mov	w3, #0x225                 	// #549
  211530:	mov	x1, xzr
  211534:	mov	x2, xzr
  211538:	mov	x29, sp
  21153c:	bl	211790 <safe_fork_full@plt>
  211540:	ldp	x29, x30, [sp], #16
  211544:	ret

0000000000211548 <ALIGN_TO>:
  211548:	add	x8, x0, #0x7
  21154c:	and	x0, x8, #0xfffffffffffffff8
  211550:	ret
  211554:	udf	#0

0000000000211558 <__libc_csu_init>:
  211558:	stp	x29, x30, [sp, #-64]!
  21155c:	mov	x29, sp
  211560:	stp	x19, x20, [sp, #16]
  211564:	adrp	x20, 221000 <__xstat64@plt+0xf860>
  211568:	add	x20, x20, #0x7c0
  21156c:	stp	x21, x22, [sp, #32]
  211570:	adrp	x21, 221000 <__xstat64@plt+0xf860>
  211574:	add	x21, x21, #0x7b8
  211578:	sub	x20, x20, x21
  21157c:	mov	w22, w0
  211580:	stp	x23, x24, [sp, #48]
  211584:	mov	x23, x1
  211588:	mov	x24, x2
  21158c:	bl	2115f0 <_init>
  211590:	cmp	xzr, x20, asr #3
  211594:	b.eq	2115c0 <__libc_csu_init+0x68>  // b.none
  211598:	asr	x20, x20, #3
  21159c:	mov	x19, #0x0                   	// #0
  2115a0:	ldr	x3, [x21, x19, lsl #3]
  2115a4:	mov	x2, x24
  2115a8:	add	x19, x19, #0x1
  2115ac:	mov	x1, x23
  2115b0:	mov	w0, w22
  2115b4:	blr	x3
  2115b8:	cmp	x20, x19
  2115bc:	b.ne	2115a0 <__libc_csu_init+0x48>  // b.any
  2115c0:	ldp	x19, x20, [sp, #16]
  2115c4:	ldp	x21, x22, [sp, #32]
  2115c8:	ldp	x23, x24, [sp, #48]
  2115cc:	ldp	x29, x30, [sp], #64
  2115d0:	ret
  2115d4:	nop

00000000002115d8 <__libc_csu_fini>:
  2115d8:	ret
  2115dc:	udf	#0

00000000002115e0 <stat64>:
  2115e0:	mov	x2, x1
  2115e4:	mov	x1, x0
  2115e8:	mov	w0, #0x0                   	// #0
  2115ec:	b	2117a0 <__xstat64@plt>

Disassembly of section .init:

00000000002115f0 <_init>:
  2115f0:	stp	x29, x30, [sp, #-16]!
  2115f4:	mov	x29, sp
  2115f8:	bl	210f70 <call_weak_fn>
  2115fc:	ldp	x29, x30, [sp], #16
  211600:	ret

Disassembly of section .fini:

0000000000211604 <_fini>:
  211604:	stp	x29, x30, [sp, #-16]!
  211608:	mov	x29, sp
  21160c:	ldp	x29, x30, [sp], #16
  211610:	ret

Disassembly of section .plt:

0000000000211620 <__libc_start_main@plt-0x20>:
  211620:	stp	x16, x30, [sp, #-16]!
  211624:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  211628:	ldr	x17, [x16, #2488]
  21162c:	add	x16, x16, #0x9b8
  211630:	br	x17
  211634:	nop
  211638:	nop
  21163c:	nop

0000000000211640 <__libc_start_main@plt>:
  211640:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  211644:	ldr	x17, [x16, #2496]
  211648:	add	x16, x16, #0x9c0
  21164c:	br	x17

0000000000211650 <abort@plt>:
  211650:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  211654:	ldr	x17, [x16, #2504]
  211658:	add	x16, x16, #0x9c8
  21165c:	br	x17

0000000000211660 <__gmon_start__@plt>:
  211660:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  211664:	ldr	x17, [x16, #2512]
  211668:	add	x16, x16, #0x9d0
  21166c:	br	x17

0000000000211670 <ask_password_agent_close@plt>:
  211670:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  211674:	ldr	x17, [x16, #2520]
  211678:	add	x16, x16, #0x9d8
  21167c:	br	x17

0000000000211680 <polkit_agent_close@plt>:
  211680:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  211684:	ldr	x17, [x16, #2528]
  211688:	add	x16, x16, #0x9e0
  21168c:	br	x17

0000000000211690 <pager_close@plt>:
  211690:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  211694:	ldr	x17, [x16, #2536]
  211698:	add	x16, x16, #0x9e8
  21169c:	br	x17

00000000002116a0 <mac_selinux_finish@plt>:
  2116a0:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  2116a4:	ldr	x17, [x16, #2544]
  2116a8:	add	x16, x16, #0x9f0
  2116ac:	br	x17

00000000002116b0 <log_setup_service@plt>:
  2116b0:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  2116b4:	ldr	x17, [x16, #2552]
  2116b8:	add	x16, x16, #0x9f8
  2116bc:	br	x17

00000000002116c0 <log_get_max_level_realm@plt>:
  2116c0:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  2116c4:	ldr	x17, [x16, #2560]
  2116c8:	add	x16, x16, #0xa00
  2116cc:	br	x17

00000000002116d0 <log_internal_realm@plt>:
  2116d0:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  2116d4:	ldr	x17, [x16, #2568]
  2116d8:	add	x16, x16, #0xa08
  2116dc:	br	x17

00000000002116e0 <probe_filesystem@plt>:
  2116e0:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  2116e4:	ldr	x17, [x16, #2576]
  2116e8:	add	x16, x16, #0xa10
  2116ec:	br	x17

00000000002116f0 <__errno_location@plt>:
  2116f0:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  2116f4:	ldr	x17, [x16, #2584]
  2116f8:	add	x16, x16, #0xa18
  2116fc:	br	x17

0000000000211700 <free@plt>:
  211700:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  211704:	ldr	x17, [x16, #2592]
  211708:	add	x16, x16, #0xa20
  21170c:	br	x17

0000000000211710 <strcmp@plt>:
  211710:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  211714:	ldr	x17, [x16, #2600]
  211718:	add	x16, x16, #0xa28
  21171c:	br	x17

0000000000211720 <strlen@plt>:
  211720:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  211724:	ldr	x17, [x16, #2608]
  211728:	add	x16, x16, #0xa30
  21172c:	br	x17

0000000000211730 <stpcpy@plt>:
  211730:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  211734:	ldr	x17, [x16, #2616]
  211738:	add	x16, x16, #0xa38
  21173c:	br	x17

0000000000211740 <access@plt>:
  211740:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  211744:	ldr	x17, [x16, #2624]
  211748:	add	x16, x16, #0xa40
  21174c:	br	x17

0000000000211750 <wait_for_terminate_and_check@plt>:
  211750:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  211754:	ldr	x17, [x16, #2632]
  211758:	add	x16, x16, #0xa48
  21175c:	br	x17

0000000000211760 <log_assert_failed_realm@plt>:
  211760:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  211764:	ldr	x17, [x16, #2640]
  211768:	add	x16, x16, #0xa50
  21176c:	br	x17

0000000000211770 <execv@plt>:
  211770:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  211774:	ldr	x17, [x16, #2648]
  211778:	add	x16, x16, #0xa58
  21177c:	br	x17

0000000000211780 <_exit@plt>:
  211780:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  211784:	ldr	x17, [x16, #2656]
  211788:	add	x16, x16, #0xa60
  21178c:	br	x17

0000000000211790 <safe_fork_full@plt>:
  211790:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  211794:	ldr	x17, [x16, #2664]
  211798:	add	x16, x16, #0xa68
  21179c:	br	x17

00000000002117a0 <__xstat64@plt>:
  2117a0:	adrp	x16, 221000 <__xstat64@plt+0xf860>
  2117a4:	ldr	x17, [x16, #2672]
  2117a8:	add	x16, x16, #0xa70
  2117ac:	br	x17
