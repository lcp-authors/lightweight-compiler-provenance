
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libopcodes-2.34.so_gcc_-O3:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000034fe8 <.init>:
   34fe8:	stp	x29, x30, [sp, #-16]!
   34fec:	mov	x29, sp
   34ff0:	bl	35bc0 <aarch64_get_operand_modifier_from_value@plt+0x10>
   34ff4:	ldp	x29, x30, [sp], #16
   34ff8:	ret

Disassembly of section .plt:

0000000000035000 <aarch64_ext_sysins_op@plt-0x20>:
   35000:	stp	x16, x30, [sp, #-16]!
   35004:	adrp	x16, a6000 <aarch64_operands@@Base+0x16bd0>
   35008:	ldr	x17, [x16, #4088]
   3500c:	add	x16, x16, #0xff8
   35010:	br	x17
   35014:	nop
   35018:	nop
   3501c:	nop

0000000000035020 <aarch64_ext_sysins_op@plt>:
   35020:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35024:	ldr	x17, [x16]
   35028:	add	x16, x16, #0x0
   3502c:	br	x17

0000000000035030 <aarch64_ins_sve_float_zero_one@plt>:
   35030:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35034:	ldr	x17, [x16, #8]
   35038:	add	x16, x16, #0x8
   3503c:	br	x17

0000000000035040 <aarch64_ins_simd_addr_post@plt>:
   35040:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35044:	ldr	x17, [x16, #16]
   35048:	add	x16, x16, #0x10
   3504c:	br	x17

0000000000035050 <memcpy@plt>:
   35050:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35054:	ldr	x17, [x16, #24]
   35058:	add	x16, x16, #0x18
   3505c:	br	x17

0000000000035060 <memmove@plt>:
   35060:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35064:	ldr	x17, [x16, #32]
   35068:	add	x16, x16, #0x20
   3506c:	br	x17

0000000000035070 <aarch64_ins_sve_quad_index@plt>:
   35070:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35074:	ldr	x17, [x16, #40]
   35078:	add	x16, x16, #0x28
   3507c:	br	x17

0000000000035080 <aarch64_ins_cond@plt>:
   35080:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35084:	ldr	x17, [x16, #48]
   35088:	add	x16, x16, #0x30
   3508c:	br	x17

0000000000035090 <aarch64_ext_sve_addr_zi_u5@plt>:
   35090:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35094:	ldr	x17, [x16, #56]
   35098:	add	x16, x16, #0x38
   3509c:	br	x17

00000000000350a0 <strlen@plt>:
   350a0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   350a4:	ldr	x17, [x16, #64]
   350a8:	add	x16, x16, #0x40
   350ac:	br	x17

00000000000350b0 <aarch64_ins_sve_addr_rz_xtw@plt>:
   350b0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   350b4:	ldr	x17, [x16, #72]
   350b8:	add	x16, x16, #0x48
   350bc:	br	x17

00000000000350c0 <aarch64_ext_sysreg@plt>:
   350c0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   350c4:	ldr	x17, [x16, #80]
   350c8:	add	x16, x16, #0x50
   350cc:	br	x17

00000000000350d0 <aarch64_ins_sve_reglist@plt>:
   350d0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   350d4:	ldr	x17, [x16, #88]
   350d8:	add	x16, x16, #0x58
   350dc:	br	x17

00000000000350e0 <aarch64_ins_imm_rotate1@plt>:
   350e0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   350e4:	ldr	x17, [x16, #96]
   350e8:	add	x16, x16, #0x60
   350ec:	br	x17

00000000000350f0 <exit@plt>:
   350f0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   350f4:	ldr	x17, [x16, #104]
   350f8:	add	x16, x16, #0x68
   350fc:	br	x17

0000000000035100 <aarch64_operand_index@plt>:
   35100:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35104:	ldr	x17, [x16, #112]
   35108:	add	x16, x16, #0x70
   3510c:	br	x17

0000000000035110 <aarch64_ext_regrt_sysins@plt>:
   35110:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35114:	ldr	x17, [x16, #120]
   35118:	add	x16, x16, #0x78
   3511c:	br	x17

0000000000035120 <aarch64_ext_fbits@plt>:
   35120:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35124:	ldr	x17, [x16, #128]
   35128:	add	x16, x16, #0x80
   3512c:	br	x17

0000000000035130 <aarch64_ins_sve_addr_rr_lsl@plt>:
   35130:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35134:	ldr	x17, [x16, #136]
   35138:	add	x16, x16, #0x88
   3513c:	br	x17

0000000000035140 <aarch64_ins_sve_scale@plt>:
   35140:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35144:	ldr	x17, [x16, #144]
   35148:	add	x16, x16, #0x90
   3514c:	br	x17

0000000000035150 <aarch64_ext_ldst_reglist_r@plt>:
   35150:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35154:	ldr	x17, [x16, #152]
   35158:	add	x16, x16, #0x98
   3515c:	br	x17

0000000000035160 <sbrk@plt>:
   35160:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35164:	ldr	x17, [x16, #160]
   35168:	add	x16, x16, #0xa0
   3516c:	br	x17

0000000000035170 <aarch64_num_of_operands@plt>:
   35170:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35174:	ldr	x17, [x16, #168]
   35178:	add	x16, x16, #0xa8
   3517c:	br	x17

0000000000035180 <aarch64_ext_sve_shrimm@plt>:
   35180:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35184:	ldr	x17, [x16, #176]
   35188:	add	x16, x16, #0xb0
   3518c:	br	x17

0000000000035190 <aarch64_ext_sve_shlimm@plt>:
   35190:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35194:	ldr	x17, [x16, #184]
   35198:	add	x16, x16, #0xb8
   3519c:	br	x17

00000000000351a0 <aarch64_ext_addr_uimm12@plt>:
   351a0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   351a4:	ldr	x17, [x16, #192]
   351a8:	add	x16, x16, #0xc0
   351ac:	br	x17

00000000000351b0 <aarch64_ins_addr_simm10@plt>:
   351b0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   351b4:	ldr	x17, [x16, #200]
   351b8:	add	x16, x16, #0xc8
   351bc:	br	x17

00000000000351c0 <aarch64_ext_aimm@plt>:
   351c0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   351c4:	ldr	x17, [x16, #208]
   351c8:	add	x16, x16, #0xd0
   351cc:	br	x17

00000000000351d0 <ldexp@plt>:
   351d0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   351d4:	ldr	x17, [x16, #216]
   351d8:	add	x16, x16, #0xd8
   351dc:	br	x17

00000000000351e0 <aarch64_ext_sve_asimm@plt>:
   351e0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   351e4:	ldr	x17, [x16, #224]
   351e8:	add	x16, x16, #0xe0
   351ec:	br	x17

00000000000351f0 <aarch64_ins_sve_addr_ri_s4xvl@plt>:
   351f0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   351f4:	ldr	x17, [x16, #232]
   351f8:	add	x16, x16, #0xe8
   351fc:	br	x17

0000000000035200 <aarch64_ins_regno@plt>:
   35200:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35204:	ldr	x17, [x16, #240]
   35208:	add	x16, x16, #0xf0
   3520c:	br	x17

0000000000035210 <__cxa_finalize@plt>:
   35210:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35214:	ldr	x17, [x16, #248]
   35218:	add	x16, x16, #0xf8
   3521c:	br	x17

0000000000035220 <aarch64_ins_aimm@plt>:
   35220:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35224:	ldr	x17, [x16, #256]
   35228:	add	x16, x16, #0x100
   3522c:	br	x17

0000000000035230 <sprintf@plt>:
   35230:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35234:	ldr	x17, [x16, #264]
   35238:	add	x16, x16, #0x108
   3523c:	br	x17

0000000000035240 <aarch64_ins_pstatefield@plt>:
   35240:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35244:	ldr	x17, [x16, #272]
   35248:	add	x16, x16, #0x110
   3524c:	br	x17

0000000000035250 <verify_constraints@plt>:
   35250:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35254:	ldr	x17, [x16, #280]
   35258:	add	x16, x16, #0x118
   3525c:	br	x17

0000000000035260 <aarch64_ext_sve_addr_ri_s9xvl@plt>:
   35260:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35264:	ldr	x17, [x16, #288]
   35268:	add	x16, x16, #0x120
   3526c:	br	x17

0000000000035270 <qsort@plt>:
   35270:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35274:	ldr	x17, [x16, #296]
   35278:	add	x16, x16, #0x128
   3527c:	br	x17

0000000000035280 <aarch64_ext_sve_addr_zz_sxtw@plt>:
   35280:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35284:	ldr	x17, [x16, #304]
   35288:	add	x16, x16, #0x130
   3528c:	br	x17

0000000000035290 <aarch64_ins_sve_addr_zz_lsl@plt>:
   35290:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35294:	ldr	x17, [x16, #312]
   35298:	add	x16, x16, #0x138
   3529c:	br	x17

00000000000352a0 <aarch64_ext_addr_simm@plt>:
   352a0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   352a4:	ldr	x17, [x16, #320]
   352a8:	add	x16, x16, #0x140
   352ac:	br	x17

00000000000352b0 <aarch64_ext_reglane@plt>:
   352b0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   352b4:	ldr	x17, [x16, #328]
   352b8:	add	x16, x16, #0x148
   352bc:	br	x17

00000000000352c0 <aarch64_ins_sve_addr_ri_u6@plt>:
   352c0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   352c4:	ldr	x17, [x16, #336]
   352c8:	add	x16, x16, #0x150
   352cc:	br	x17

00000000000352d0 <aarch64_ins_sve_index@plt>:
   352d0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   352d4:	ldr	x17, [x16, #344]
   352d8:	add	x16, x16, #0x158
   352dc:	br	x17

00000000000352e0 <aarch64_decode_insn@plt>:
   352e0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   352e4:	ldr	x17, [x16, #352]
   352e8:	add	x16, x16, #0x160
   352ec:	br	x17

00000000000352f0 <aarch64_find_real_opcode@plt>:
   352f0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   352f4:	ldr	x17, [x16, #360]
   352f8:	add	x16, x16, #0x168
   352fc:	br	x17

0000000000035300 <aarch64_ins_addr_simm@plt>:
   35300:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35304:	ldr	x17, [x16, #368]
   35308:	add	x16, x16, #0x170
   3530c:	br	x17

0000000000035310 <get_cond_from_value@plt>:
   35310:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35314:	ldr	x17, [x16, #376]
   35318:	add	x16, x16, #0x178
   3531c:	br	x17

0000000000035320 <aarch64_ext_addr_simm10@plt>:
   35320:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35324:	ldr	x17, [x16, #384]
   35328:	add	x16, x16, #0x180
   3532c:	br	x17

0000000000035330 <aarch64_ins_sysins_op@plt>:
   35330:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35334:	ldr	x17, [x16, #392]
   35338:	add	x16, x16, #0x188
   3533c:	br	x17

0000000000035340 <aarch64_ins_ft@plt>:
   35340:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35344:	ldr	x17, [x16, #400]
   35348:	add	x16, x16, #0x190
   3534c:	br	x17

0000000000035350 <aarch64_ext_addr_offset@plt>:
   35350:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35354:	ldr	x17, [x16, #408]
   35358:	add	x16, x16, #0x198
   3535c:	br	x17

0000000000035360 <aarch64_find_best_match@plt>:
   35360:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35364:	ldr	x17, [x16, #416]
   35368:	add	x16, x16, #0x1a0
   3536c:	br	x17

0000000000035370 <aarch64_ext_fpimm@plt>:
   35370:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35374:	ldr	x17, [x16, #424]
   35378:	add	x16, x16, #0x1a8
   3537c:	br	x17

0000000000035380 <snprintf@plt>:
   35380:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35384:	ldr	x17, [x16, #432]
   35388:	add	x16, x16, #0x1b0
   3538c:	br	x17

0000000000035390 <extract_fields@plt>:
   35390:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35394:	ldr	x17, [x16, #440]
   35398:	add	x16, x16, #0x1b8
   3539c:	br	x17

00000000000353a0 <aarch64_ins_limm@plt>:
   353a0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   353a4:	ldr	x17, [x16, #448]
   353a8:	add	x16, x16, #0x1c0
   353ac:	br	x17

00000000000353b0 <aarch64_print_operand@plt>:
   353b0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   353b4:	ldr	x17, [x16, #456]
   353b8:	add	x16, x16, #0x1c8
   353bc:	br	x17

00000000000353c0 <aarch64_ext_reg_extended@plt>:
   353c0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   353c4:	ldr	x17, [x16, #464]
   353c8:	add	x16, x16, #0x1d0
   353cc:	br	x17

00000000000353d0 <aarch64_get_qualifier_standard_value@plt>:
   353d0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   353d4:	ldr	x17, [x16, #472]
   353d8:	add	x16, x16, #0x1d8
   353dc:	br	x17

00000000000353e0 <malloc@plt>:
   353e0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   353e4:	ldr	x17, [x16, #480]
   353e8:	add	x16, x16, #0x1e0
   353ec:	br	x17

00000000000353f0 <aarch64_get_qualifier_name@plt>:
   353f0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   353f4:	ldr	x17, [x16, #488]
   353f8:	add	x16, x16, #0x1e8
   353fc:	br	x17

0000000000035400 <aarch64_logical_immediate_p@plt>:
   35400:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35404:	ldr	x17, [x16, #496]
   35408:	add	x16, x16, #0x1f0
   3540c:	br	x17

0000000000035410 <aarch64_replace_opcode@plt>:
   35410:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35414:	ldr	x17, [x16, #504]
   35418:	add	x16, x16, #0x1f8
   3541c:	br	x17

0000000000035420 <aarch64_ext_limm@plt>:
   35420:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35424:	ldr	x17, [x16, #512]
   35428:	add	x16, x16, #0x200
   3542c:	br	x17

0000000000035430 <aarch64_get_operand_modifier_value@plt>:
   35430:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35434:	ldr	x17, [x16, #520]
   35438:	add	x16, x16, #0x208
   3543c:	br	x17

0000000000035440 <strncmp@plt>:
   35440:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35444:	ldr	x17, [x16, #528]
   35448:	add	x16, x16, #0x210
   3544c:	br	x17

0000000000035450 <aarch64_ins_reg_shifted@plt>:
   35450:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35454:	ldr	x17, [x16, #536]
   35458:	add	x16, x16, #0x218
   3545c:	br	x17

0000000000035460 <aarch64_ext_sve_addr_ri_s4xvl@plt>:
   35460:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35464:	ldr	x17, [x16, #544]
   35468:	add	x16, x16, #0x220
   3546c:	br	x17

0000000000035470 <memset@plt>:
   35470:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35474:	ldr	x17, [x16, #552]
   35478:	add	x16, x16, #0x228
   3547c:	br	x17

0000000000035480 <xmalloc@plt>:
   35480:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35484:	ldr	x17, [x16, #560]
   35488:	add	x16, x16, #0x230
   3548c:	br	x17

0000000000035490 <aarch64_ins_sysreg@plt>:
   35490:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35494:	ldr	x17, [x16, #568]
   35498:	add	x16, x16, #0x238
   3549c:	br	x17

00000000000354a0 <print_arm_disassembler_options@plt>:
   354a0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   354a4:	ldr	x17, [x16, #576]
   354a8:	add	x16, x16, #0x240
   354ac:	br	x17

00000000000354b0 <aarch64_ins_fpimm@plt>:
   354b0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   354b4:	ldr	x17, [x16, #584]
   354b8:	add	x16, x16, #0x248
   354bc:	br	x17

00000000000354c0 <aarch64_ext_sve_reglist@plt>:
   354c0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   354c4:	ldr	x17, [x16, #592]
   354c8:	add	x16, x16, #0x250
   354cc:	br	x17

00000000000354d0 <aarch64_ext_sve_quad_index@plt>:
   354d0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   354d4:	ldr	x17, [x16, #600]
   354d8:	add	x16, x16, #0x258
   354dc:	br	x17

00000000000354e0 <aarch64_match_operands_constraint@plt>:
   354e0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   354e4:	ldr	x17, [x16, #608]
   354e8:	add	x16, x16, #0x260
   354ec:	br	x17

00000000000354f0 <aarch64_ins_sve_limm_mov@plt>:
   354f0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   354f4:	ldr	x17, [x16, #616]
   354f8:	add	x16, x16, #0x268
   354fc:	br	x17

0000000000035500 <aarch64_ext_inv_limm@plt>:
   35500:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35504:	ldr	x17, [x16, #624]
   35508:	add	x16, x16, #0x270
   3550c:	br	x17

0000000000035510 <aarch64_ext_sve_float_half_two@plt>:
   35510:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35514:	ldr	x17, [x16, #632]
   35518:	add	x16, x16, #0x278
   3551c:	br	x17

0000000000035520 <calloc@plt>:
   35520:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35524:	ldr	x17, [x16, #640]
   35528:	add	x16, x16, #0x280
   3552c:	br	x17

0000000000035530 <bfd_get_bits@plt>:
   35530:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35534:	ldr	x17, [x16, #648]
   35538:	add	x16, x16, #0x288
   3553c:	br	x17

0000000000035540 <aarch64_sve_dupm_mov_immediate_p@plt>:
   35540:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35544:	ldr	x17, [x16, #656]
   35548:	add	x16, x16, #0x290
   3554c:	br	x17

0000000000035550 <aarch64_ins_advsimd_imm_modified@plt>:
   35550:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35554:	ldr	x17, [x16, #664]
   35558:	add	x16, x16, #0x298
   3555c:	br	x17

0000000000035560 <aarch64_ins_ldst_reglist_r@plt>:
   35560:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35564:	ldr	x17, [x16, #672]
   35568:	add	x16, x16, #0x2a0
   3556c:	br	x17

0000000000035570 <aarch64_ins_sve_addr_zz_sxtw@plt>:
   35570:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35574:	ldr	x17, [x16, #680]
   35578:	add	x16, x16, #0x2a8
   3557c:	br	x17

0000000000035580 <aarch64_ext_ldst_reglist@plt>:
   35580:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35584:	ldr	x17, [x16, #688]
   35588:	add	x16, x16, #0x2b0
   3558c:	br	x17

0000000000035590 <realloc@plt>:
   35590:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35594:	ldr	x17, [x16, #696]
   35598:	add	x16, x16, #0x2b8
   3559c:	br	x17

00000000000355a0 <aarch64_opcode_lookup@plt>:
   355a0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   355a4:	ldr	x17, [x16, #704]
   355a8:	add	x16, x16, #0x2c0
   355ac:	br	x17

00000000000355b0 <aarch64_ext_sve_index@plt>:
   355b0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   355b4:	ldr	x17, [x16, #712]
   355b8:	add	x16, x16, #0x2c8
   355bc:	br	x17

00000000000355c0 <aarch64_ext_imm_rotate2@plt>:
   355c0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   355c4:	ldr	x17, [x16, #720]
   355c8:	add	x16, x16, #0x2d0
   355cc:	br	x17

00000000000355d0 <aarch64_ext_hint@plt>:
   355d0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   355d4:	ldr	x17, [x16, #728]
   355d8:	add	x16, x16, #0x2d8
   355dc:	br	x17

00000000000355e0 <aarch64_ins_reglist@plt>:
   355e0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   355e4:	ldr	x17, [x16, #736]
   355e8:	add	x16, x16, #0x2e0
   355ec:	br	x17

00000000000355f0 <aarch64_extract_operand@plt>:
   355f0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   355f4:	ldr	x17, [x16, #744]
   355f8:	add	x16, x16, #0x2e8
   355fc:	br	x17

0000000000035600 <aarch64_ins_sve_addr_ri_s4@plt>:
   35600:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35604:	ldr	x17, [x16, #752]
   35608:	add	x16, x16, #0x2f0
   3560c:	br	x17

0000000000035610 <aarch64_is_destructive_by_operands@plt>:
   35610:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35614:	ldr	x17, [x16, #760]
   35618:	add	x16, x16, #0x2f8
   3561c:	br	x17

0000000000035620 <aarch64_ins_prfop@plt>:
   35620:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35624:	ldr	x17, [x16, #768]
   35628:	add	x16, x16, #0x300
   3562c:	br	x17

0000000000035630 <aarch64_ins_hint@plt>:
   35630:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35634:	ldr	x17, [x16, #776]
   35638:	add	x16, x16, #0x308
   3563c:	br	x17

0000000000035640 <__gmon_start__@plt>:
   35640:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35644:	ldr	x17, [x16, #784]
   35648:	add	x16, x16, #0x310
   3564c:	br	x17

0000000000035650 <aarch64_ins_sve_float_half_two@plt>:
   35650:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35654:	ldr	x17, [x16, #792]
   35658:	add	x16, x16, #0x318
   3565c:	br	x17

0000000000035660 <aarch64_ext_sve_addr_zz_lsl@plt>:
   35660:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35664:	ldr	x17, [x16, #800]
   35668:	add	x16, x16, #0x320
   3566c:	br	x17

0000000000035670 <abort@plt>:
   35670:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35674:	ldr	x17, [x16, #808]
   35678:	add	x16, x16, #0x328
   3567c:	br	x17

0000000000035680 <aarch64_get_qualifier_esize@plt>:
   35680:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35684:	ldr	x17, [x16, #816]
   35688:	add	x16, x16, #0x330
   3568c:	br	x17

0000000000035690 <aarch64_ins_reglane@plt>:
   35690:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35694:	ldr	x17, [x16, #824]
   35698:	add	x16, x16, #0x338
   3569c:	br	x17

00000000000356a0 <aarch64_ins_sve_addr_zz_uxtw@plt>:
   356a0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   356a4:	ldr	x17, [x16, #832]
   356a8:	add	x16, x16, #0x340
   356ac:	br	x17

00000000000356b0 <aarch64_ins_imm_rotate2@plt>:
   356b0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   356b4:	ldr	x17, [x16, #840]
   356b8:	add	x16, x16, #0x348
   356bc:	br	x17

00000000000356c0 <aarch64_ext_ldst_elemlist@plt>:
   356c0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   356c4:	ldr	x17, [x16, #848]
   356c8:	add	x16, x16, #0x350
   356cc:	br	x17

00000000000356d0 <aarch64_ins_fbits@plt>:
   356d0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   356d4:	ldr	x17, [x16, #856]
   356d8:	add	x16, x16, #0x358
   356dc:	br	x17

00000000000356e0 <aarch64_ins_imm_half@plt>:
   356e0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   356e4:	ldr	x17, [x16, #864]
   356e8:	add	x16, x16, #0x360
   356ec:	br	x17

00000000000356f0 <aarch64_ext_sve_aimm@plt>:
   356f0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   356f4:	ldr	x17, [x16, #872]
   356f8:	add	x16, x16, #0x368
   356fc:	br	x17

0000000000035700 <aarch64_ins_addr_simple@plt>:
   35700:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35704:	ldr	x17, [x16, #880]
   35708:	add	x16, x16, #0x370
   3570c:	br	x17

0000000000035710 <aarch64_get_operand_class@plt>:
   35710:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35714:	ldr	x17, [x16, #888]
   35718:	add	x16, x16, #0x378
   3571c:	br	x17

0000000000035720 <aarch64_ext_imm@plt>:
   35720:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35724:	ldr	x17, [x16, #896]
   35728:	add	x16, x16, #0x380
   3572c:	br	x17

0000000000035730 <aarch64_ins_addr_uimm12@plt>:
   35730:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35734:	ldr	x17, [x16, #904]
   35738:	add	x16, x16, #0x388
   3573c:	br	x17

0000000000035740 <aarch64_stack_pointer_p@plt>:
   35740:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35744:	ldr	x17, [x16, #912]
   35748:	add	x16, x16, #0x390
   3574c:	br	x17

0000000000035750 <aarch64_ext_reglist@plt>:
   35750:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35754:	ldr	x17, [x16, #920]
   35758:	add	x16, x16, #0x398
   3575c:	br	x17

0000000000035760 <aarch64_shrink_expanded_imm8@plt>:
   35760:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35764:	ldr	x17, [x16, #928]
   35768:	add	x16, x16, #0x3a0
   3576c:	br	x17

0000000000035770 <aarch64_ext_shll_imm@plt>:
   35770:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35774:	ldr	x17, [x16, #936]
   35778:	add	x16, x16, #0x3a8
   3577c:	br	x17

0000000000035780 <aarch64_ins_inv_limm@plt>:
   35780:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35784:	ldr	x17, [x16, #944]
   35788:	add	x16, x16, #0x3b0
   3578c:	br	x17

0000000000035790 <free@plt>:
   35790:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35794:	ldr	x17, [x16, #952]
   35798:	add	x16, x16, #0x3b8
   3579c:	br	x17

00000000000357a0 <aarch64_ext_sve_float_zero_one@plt>:
   357a0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   357a4:	ldr	x17, [x16, #960]
   357a8:	add	x16, x16, #0x3c0
   357ac:	br	x17

00000000000357b0 <aarch64_select_operand_for_sizeq_field_coding@plt>:
   357b0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   357b4:	ldr	x17, [x16, #968]
   357b8:	add	x16, x16, #0x3c8
   357bc:	br	x17

00000000000357c0 <aarch64_ext_addr_regoff@plt>:
   357c0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   357c4:	ldr	x17, [x16, #976]
   357c8:	add	x16, x16, #0x3d0
   357cc:	br	x17

00000000000357d0 <aarch64_ext_sve_addr_zz_uxtw@plt>:
   357d0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   357d4:	ldr	x17, [x16, #984]
   357d8:	add	x16, x16, #0x3d8
   357dc:	br	x17

00000000000357e0 <aarch64_ins_imm@plt>:
   357e0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   357e4:	ldr	x17, [x16, #992]
   357e8:	add	x16, x16, #0x3e0
   357ec:	br	x17

00000000000357f0 <aarch64_ins_addr_offset@plt>:
   357f0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   357f4:	ldr	x17, [x16, #1000]
   357f8:	add	x16, x16, #0x3e8
   357fc:	br	x17

0000000000035800 <aarch64_ext_advsimd_imm_shift@plt>:
   35800:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35804:	ldr	x17, [x16, #1008]
   35808:	add	x16, x16, #0x3f0
   3580c:	br	x17

0000000000035810 <aarch64_ins_sve_shrimm@plt>:
   35810:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35814:	ldr	x17, [x16, #1016]
   35818:	add	x16, x16, #0x3f8
   3581c:	br	x17

0000000000035820 <aarch64_ins_ldst_elemlist@plt>:
   35820:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35824:	ldr	x17, [x16, #1024]
   35828:	add	x16, x16, #0x400
   3582c:	br	x17

0000000000035830 <init_insn_sequence@plt>:
   35830:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35834:	ldr	x17, [x16, #1032]
   35838:	add	x16, x16, #0x408
   3583c:	br	x17

0000000000035840 <strchr@plt>:
   35840:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35844:	ldr	x17, [x16, #1040]
   35848:	add	x16, x16, #0x410
   3584c:	br	x17

0000000000035850 <frexp@plt>:
   35850:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35854:	ldr	x17, [x16, #1048]
   35858:	add	x16, x16, #0x418
   3585c:	br	x17

0000000000035860 <aarch64_ins_barrier@plt>:
   35860:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35864:	ldr	x17, [x16, #1056]
   35868:	add	x16, x16, #0x420
   3586c:	br	x17

0000000000035870 <get_inverted_cond@plt>:
   35870:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35874:	ldr	x17, [x16, #1064]
   35878:	add	x16, x16, #0x428
   3587c:	br	x17

0000000000035880 <aarch64_ext_prfop@plt>:
   35880:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35884:	ldr	x17, [x16, #1072]
   35888:	add	x16, x16, #0x430
   3588c:	br	x17

0000000000035890 <print_aarch64_disassembler_options@plt>:
   35890:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35894:	ldr	x17, [x16, #1080]
   35898:	add	x16, x16, #0x438
   3589c:	br	x17

00000000000358a0 <aarch64_ext_addr_simple@plt>:
   358a0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   358a4:	ldr	x17, [x16, #1088]
   358a8:	add	x16, x16, #0x440
   358ac:	br	x17

00000000000358b0 <aarch64_ins_addr_regoff@plt>:
   358b0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   358b4:	ldr	x17, [x16, #1096]
   358b8:	add	x16, x16, #0x448
   358bc:	br	x17

00000000000358c0 <aarch64_ext_regno@plt>:
   358c0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   358c4:	ldr	x17, [x16, #1104]
   358c8:	add	x16, x16, #0x450
   358cc:	br	x17

00000000000358d0 <floatformat_to_double@plt>:
   358d0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   358d4:	ldr	x17, [x16, #1112]
   358d8:	add	x16, x16, #0x458
   358dc:	br	x17

00000000000358e0 <aarch64_ins_advsimd_imm_shift@plt>:
   358e0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   358e4:	ldr	x17, [x16, #1120]
   358e8:	add	x16, x16, #0x460
   358ec:	br	x17

00000000000358f0 <aarch64_get_qualifier_nelem@plt>:
   358f0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   358f4:	ldr	x17, [x16, #1128]
   358f8:	add	x16, x16, #0x468
   358fc:	br	x17

0000000000035900 <aarch64_ext_sve_addr_rr_lsl@plt>:
   35900:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35904:	ldr	x17, [x16, #1136]
   35908:	add	x16, x16, #0x470
   3590c:	br	x17

0000000000035910 <aarch64_ext_sve_addr_ri_s4@plt>:
   35910:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35914:	ldr	x17, [x16, #1144]
   35918:	add	x16, x16, #0x478
   3591c:	br	x17

0000000000035920 <aarch64_ins_sve_aimm@plt>:
   35920:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35924:	ldr	x17, [x16, #1152]
   35928:	add	x16, x16, #0x480
   3592c:	br	x17

0000000000035930 <aarch64_ext_sve_scale@plt>:
   35930:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35934:	ldr	x17, [x16, #1160]
   35938:	add	x16, x16, #0x488
   3593c:	br	x17

0000000000035940 <aarch64_ins_sve_addr_ri_s6xvl@plt>:
   35940:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35944:	ldr	x17, [x16, #1168]
   35948:	add	x16, x16, #0x490
   3594c:	br	x17

0000000000035950 <xexit@plt>:
   35950:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35954:	ldr	x17, [x16, #1176]
   35958:	add	x16, x16, #0x498
   3595c:	br	x17

0000000000035960 <aarch64_ext_imm_half@plt>:
   35960:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35964:	ldr	x17, [x16, #1184]
   35968:	add	x16, x16, #0x4a0
   3596c:	br	x17

0000000000035970 <disassembler_options_cmp@plt>:
   35970:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35974:	ldr	x17, [x16, #1192]
   35978:	add	x16, x16, #0x4a8
   3597c:	br	x17

0000000000035980 <aarch64_insert_operand@plt>:
   35980:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35984:	ldr	x17, [x16, #1200]
   35988:	add	x16, x16, #0x4b0
   3598c:	br	x17

0000000000035990 <aarch64_ins_sve_asimm@plt>:
   35990:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35994:	ldr	x17, [x16, #1208]
   35998:	add	x16, x16, #0x4b8
   3599c:	br	x17

00000000000359a0 <xmalloc_failed@plt>:
   359a0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   359a4:	ldr	x17, [x16, #1216]
   359a8:	add	x16, x16, #0x4c0
   359ac:	br	x17

00000000000359b0 <aarch64_ins_reg_extended@plt>:
   359b0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   359b4:	ldr	x17, [x16, #1224]
   359b8:	add	x16, x16, #0x4c8
   359bc:	br	x17

00000000000359c0 <aarch64_ext_sve_addr_ri_s6xvl@plt>:
   359c0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   359c4:	ldr	x17, [x16, #1232]
   359c8:	add	x16, x16, #0x4d0
   359cc:	br	x17

00000000000359d0 <aarch64_ext_barrier@plt>:
   359d0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   359d4:	ldr	x17, [x16, #1240]
   359d8:	add	x16, x16, #0x4d8
   359dc:	br	x17

00000000000359e0 <dcgettext@plt>:
   359e0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   359e4:	ldr	x17, [x16, #1248]
   359e8:	add	x16, x16, #0x4e0
   359ec:	br	x17

00000000000359f0 <aarch64_ext_sve_float_half_one@plt>:
   359f0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   359f4:	ldr	x17, [x16, #1256]
   359f8:	add	x16, x16, #0x4e8
   359fc:	br	x17

0000000000035a00 <aarch64_sys_ins_reg_has_xt@plt>:
   35a00:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35a04:	ldr	x17, [x16, #1264]
   35a08:	add	x16, x16, #0x4f0
   35a0c:	br	x17

0000000000035a10 <_bfd_error_handler@plt>:
   35a10:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35a14:	ldr	x17, [x16, #1272]
   35a18:	add	x16, x16, #0x4f8
   35a1c:	br	x17

0000000000035a20 <aarch64_ins_sve_addr_zi_u5@plt>:
   35a20:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35a24:	ldr	x17, [x16, #1280]
   35a28:	add	x16, x16, #0x500
   35a2c:	br	x17

0000000000035a30 <aarch64_ins_sve_shlimm@plt>:
   35a30:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35a34:	ldr	x17, [x16, #1288]
   35a38:	add	x16, x16, #0x508
   35a3c:	br	x17

0000000000035a40 <aarch64_wide_constant_p@plt>:
   35a40:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35a44:	ldr	x17, [x16, #1296]
   35a48:	add	x16, x16, #0x510
   35a4c:	br	x17

0000000000035a50 <aarch64_ext_sve_addr_rz_xtw@plt>:
   35a50:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35a54:	ldr	x17, [x16, #1304]
   35a58:	add	x16, x16, #0x518
   35a5c:	br	x17

0000000000035a60 <aarch64_ext_regno_pair@plt>:
   35a60:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35a64:	ldr	x17, [x16, #1312]
   35a68:	add	x16, x16, #0x520
   35a6c:	br	x17

0000000000035a70 <aarch64_ext_ft@plt>:
   35a70:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35a74:	ldr	x17, [x16, #1320]
   35a78:	add	x16, x16, #0x528
   35a7c:	br	x17

0000000000035a80 <strncpy@plt>:
   35a80:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35a84:	ldr	x17, [x16, #1328]
   35a88:	add	x16, x16, #0x530
   35a8c:	br	x17

0000000000035a90 <aarch64_ext_reg_shifted@plt>:
   35a90:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35a94:	ldr	x17, [x16, #1336]
   35a98:	add	x16, x16, #0x538
   35a9c:	br	x17

0000000000035aa0 <aarch64_ins_ldst_reglist@plt>:
   35aa0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35aa4:	ldr	x17, [x16, #1344]
   35aa8:	add	x16, x16, #0x540
   35aac:	br	x17

0000000000035ab0 <aarch64_ext_sve_limm_mov@plt>:
   35ab0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35ab4:	ldr	x17, [x16, #1352]
   35ab8:	add	x16, x16, #0x548
   35abc:	br	x17

0000000000035ac0 <__assert_fail@plt>:
   35ac0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35ac4:	ldr	x17, [x16, #1360]
   35ac8:	add	x16, x16, #0x550
   35acc:	br	x17

0000000000035ad0 <aarch64_ins_sve_float_half_one@plt>:
   35ad0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35ad4:	ldr	x17, [x16, #1368]
   35ad8:	add	x16, x16, #0x558
   35adc:	br	x17

0000000000035ae0 <aarch64_find_next_alias_opcode@plt>:
   35ae0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35ae4:	ldr	x17, [x16, #1376]
   35ae8:	add	x16, x16, #0x560
   35aec:	br	x17

0000000000035af0 <aarch64_ext_imm_rotate1@plt>:
   35af0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35af4:	ldr	x17, [x16, #1384]
   35af8:	add	x16, x16, #0x568
   35afc:	br	x17

0000000000035b00 <aarch64_sys_reg_deprecated_p@plt>:
   35b00:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35b04:	ldr	x17, [x16, #1392]
   35b08:	add	x16, x16, #0x570
   35b0c:	br	x17

0000000000035b10 <aarch64_ext_advsimd_imm_modified@plt>:
   35b10:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35b14:	ldr	x17, [x16, #1400]
   35b18:	add	x16, x16, #0x578
   35b1c:	br	x17

0000000000035b20 <aarch64_ext_pstatefield@plt>:
   35b20:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35b24:	ldr	x17, [x16, #1408]
   35b28:	add	x16, x16, #0x580
   35b2c:	br	x17

0000000000035b30 <aarch64_ins_sve_addr_ri_s9xvl@plt>:
   35b30:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35b34:	ldr	x17, [x16, #1416]
   35b38:	add	x16, x16, #0x588
   35b3c:	br	x17

0000000000035b40 <aarch64_ext_simd_addr_post@plt>:
   35b40:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35b44:	ldr	x17, [x16, #1424]
   35b48:	add	x16, x16, #0x590
   35b4c:	br	x17

0000000000035b50 <aarch64_find_next_opcode@plt>:
   35b50:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35b54:	ldr	x17, [x16, #1432]
   35b58:	add	x16, x16, #0x598
   35b5c:	br	x17

0000000000035b60 <aarch64_ext_sve_addr_ri_u6@plt>:
   35b60:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35b64:	ldr	x17, [x16, #1440]
   35b68:	add	x16, x16, #0x5a0
   35b6c:	br	x17

0000000000035b70 <aarch64_extend_operator_p@plt>:
   35b70:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35b74:	ldr	x17, [x16, #1448]
   35b78:	add	x16, x16, #0x5a8
   35b7c:	br	x17

0000000000035b80 <fprintf@plt>:
   35b80:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35b84:	ldr	x17, [x16, #1456]
   35b88:	add	x16, x16, #0x5b0
   35b8c:	br	x17

0000000000035b90 <aarch64_ext_cond@plt>:
   35b90:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35b94:	ldr	x17, [x16, #1464]
   35b98:	add	x16, x16, #0x5b8
   35b9c:	br	x17

0000000000035ba0 <aarch64_find_alias_opcode@plt>:
   35ba0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35ba4:	ldr	x17, [x16, #1472]
   35ba8:	add	x16, x16, #0x5c0
   35bac:	br	x17

0000000000035bb0 <aarch64_get_operand_modifier_from_value@plt>:
   35bb0:	adrp	x16, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35bb4:	ldr	x17, [x16, #1480]
   35bb8:	add	x16, x16, #0x5c8
   35bbc:	br	x17

Disassembly of section .text:

0000000000035bc0 <buffer_read_memory@@Base-0xd8>:
   35bc0:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   35bc4:	ldr	x0, [x0, #3928]
   35bc8:	cbz	x0, 35bd0 <aarch64_get_operand_modifier_from_value@plt+0x20>
   35bcc:	b	35640 <__gmon_start__@plt>
   35bd0:	ret
   35bd4:	nop
   35bd8:	adrp	x0, fd000 <aarch64_opcode_table@@Base+0x55a20>
   35bdc:	add	x0, x0, #0x660
   35be0:	adrp	x1, fd000 <aarch64_opcode_table@@Base+0x55a20>
   35be4:	add	x1, x1, #0x660
   35be8:	cmp	x1, x0
   35bec:	b.eq	35c04 <aarch64_get_operand_modifier_from_value@plt+0x54>  // b.none
   35bf0:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   35bf4:	ldr	x1, [x1, #3800]
   35bf8:	cbz	x1, 35c04 <aarch64_get_operand_modifier_from_value@plt+0x54>
   35bfc:	mov	x16, x1
   35c00:	br	x16
   35c04:	ret
   35c08:	adrp	x0, fd000 <aarch64_opcode_table@@Base+0x55a20>
   35c0c:	add	x0, x0, #0x660
   35c10:	adrp	x1, fd000 <aarch64_opcode_table@@Base+0x55a20>
   35c14:	add	x1, x1, #0x660
   35c18:	sub	x1, x1, x0
   35c1c:	lsr	x2, x1, #63
   35c20:	add	x1, x2, x1, asr #3
   35c24:	cmp	xzr, x1, asr #1
   35c28:	asr	x1, x1, #1
   35c2c:	b.eq	35c44 <aarch64_get_operand_modifier_from_value@plt+0x94>  // b.none
   35c30:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   35c34:	ldr	x2, [x2, #4048]
   35c38:	cbz	x2, 35c44 <aarch64_get_operand_modifier_from_value@plt+0x94>
   35c3c:	mov	x16, x2
   35c40:	br	x16
   35c44:	ret
   35c48:	stp	x29, x30, [sp, #-32]!
   35c4c:	mov	x29, sp
   35c50:	str	x19, [sp, #16]
   35c54:	adrp	x19, fd000 <aarch64_opcode_table@@Base+0x55a20>
   35c58:	ldrb	w0, [x19, #1632]
   35c5c:	cbnz	w0, 35c84 <aarch64_get_operand_modifier_from_value@plt+0xd4>
   35c60:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   35c64:	ldr	x0, [x0, #3824]
   35c68:	cbz	x0, 35c78 <aarch64_get_operand_modifier_from_value@plt+0xc8>
   35c6c:	adrp	x0, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   35c70:	ldr	x0, [x0, #1488]
   35c74:	bl	35210 <__cxa_finalize@plt>
   35c78:	bl	35bd8 <aarch64_get_operand_modifier_from_value@plt+0x28>
   35c7c:	mov	w0, #0x1                   	// #1
   35c80:	strb	w0, [x19, #1632]
   35c84:	ldr	x19, [sp, #16]
   35c88:	ldp	x29, x30, [sp], #32
   35c8c:	ret
   35c90:	b	35c08 <aarch64_get_operand_modifier_from_value@plt+0x58>
   35c94:	nop

0000000000035c98 <buffer_read_memory@@Base>:
   35c98:	ldp	x4, x6, [x3, #152]
   35c9c:	ldr	w7, [x3, #180]
   35ca0:	mov	w8, w7
   35ca4:	cmp	x4, x0
   35ca8:	sub	x4, x0, x4
   35cac:	udiv	x6, x6, x8
   35cb0:	ccmp	x4, x6, #0x2, ls  // ls = plast
   35cb4:	b.hi	35d18 <buffer_read_memory@@Base+0x80>  // b.pmore
   35cb8:	udiv	w7, w2, w7
   35cbc:	mov	x5, x0
   35cc0:	mov	w0, #0x5                   	// #5
   35cc4:	add	x9, x4, x7
   35cc8:	cmp	x9, x6
   35ccc:	b.hi	35d14 <buffer_read_memory@@Base+0x7c>  // b.pmore
   35cd0:	ldr	x6, [x3, #232]
   35cd4:	cbz	x6, 35cec <buffer_read_memory@@Base+0x54>
   35cd8:	cmp	x6, x5
   35cdc:	b.ls	35d14 <buffer_read_memory@@Base+0x7c>  // b.plast
   35ce0:	add	x7, x7, x5
   35ce4:	cmp	x6, x7
   35ce8:	b.cc	35d14 <buffer_read_memory@@Base+0x7c>  // b.lo, b.ul, b.last
   35cec:	stp	x29, x30, [sp, #-16]!
   35cf0:	mov	x0, x1
   35cf4:	mov	w2, w2
   35cf8:	mov	x29, sp
   35cfc:	ldr	x3, [x3, #144]
   35d00:	madd	x1, x8, x4, x3
   35d04:	bl	35050 <memcpy@plt>
   35d08:	mov	w0, #0x0                   	// #0
   35d0c:	ldp	x29, x30, [sp], #16
   35d10:	ret
   35d14:	ret
   35d18:	mov	w0, #0x5                   	// #5
   35d1c:	ret

0000000000035d20 <perror_memory@@Base>:
   35d20:	stp	x29, x30, [sp, #-80]!
   35d24:	cmp	w0, #0x5
   35d28:	mov	x29, sp
   35d2c:	stp	x19, x20, [sp, #16]
   35d30:	mov	w20, w0
   35d34:	mov	x19, x2
   35d38:	stp	x21, x22, [sp, #32]
   35d3c:	b.eq	35d7c <perror_memory@@Base+0x5c>  // b.none
   35d40:	ldp	x21, x19, [x19]
   35d44:	mov	w2, #0x5                   	// #5
   35d48:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   35d4c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   35d50:	add	x1, x1, #0x5c0
   35d54:	add	x0, x0, #0x5d8
   35d58:	bl	359e0 <dcgettext@plt>
   35d5c:	mov	x1, x0
   35d60:	mov	w2, w20
   35d64:	mov	x0, x19
   35d68:	blr	x21
   35d6c:	ldp	x19, x20, [sp, #16]
   35d70:	ldp	x21, x22, [sp, #32]
   35d74:	ldp	x29, x30, [sp], #80
   35d78:	ret
   35d7c:	add	x21, sp, #0x30
   35d80:	mov	x2, x1
   35d84:	mov	x0, x21
   35d88:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   35d8c:	add	x1, x1, #0x5e0
   35d90:	bl	35230 <sprintf@plt>
   35d94:	ldp	x22, x19, [x19]
   35d98:	mov	w2, w20
   35d9c:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   35da0:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   35da4:	add	x1, x1, #0x5e8
   35da8:	add	x0, x0, #0x5d8
   35dac:	bl	359e0 <dcgettext@plt>
   35db0:	mov	x1, x0
   35db4:	mov	x2, x21
   35db8:	mov	x0, x19
   35dbc:	blr	x22
   35dc0:	ldp	x19, x20, [sp, #16]
   35dc4:	ldp	x21, x22, [sp, #32]
   35dc8:	ldp	x29, x30, [sp], #80
   35dcc:	ret

0000000000035dd0 <generic_print_address@@Base>:
   35dd0:	stp	x29, x30, [sp, #-64]!
   35dd4:	mov	x2, x0
   35dd8:	mov	x29, sp
   35ddc:	stp	x19, x20, [sp, #16]
   35de0:	mov	x19, x1
   35de4:	add	x20, sp, #0x20
   35de8:	mov	x0, x20
   35dec:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   35df0:	add	x1, x1, #0x5e0
   35df4:	bl	35230 <sprintf@plt>
   35df8:	ldp	x3, x0, [x19]
   35dfc:	mov	x2, x20
   35e00:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   35e04:	add	x1, x1, #0x608
   35e08:	blr	x3
   35e0c:	ldp	x19, x20, [sp, #16]
   35e10:	ldp	x29, x30, [sp], #64
   35e14:	ret

0000000000035e18 <generic_symbol_at_address@@Base>:
   35e18:	mov	w0, #0x1                   	// #1
   35e1c:	ret

0000000000035e20 <generic_symbol_is_valid@@Base>:
   35e20:	mov	w0, #0x1                   	// #1
   35e24:	ret

0000000000035e28 <disassembler@@Base>:
   35e28:	mov	w2, w0
   35e2c:	cmp	w0, #0x21
   35e30:	b.eq	35e48 <disassembler@@Base+0x20>  // b.none
   35e34:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   35e38:	cmp	w2, #0x52
   35e3c:	ldr	x0, [x0, #4024]
   35e40:	csel	x0, x0, xzr, eq  // eq = none
   35e44:	ret
   35e48:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   35e4c:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   35e50:	cmp	w1, #0x0
   35e54:	ldr	x0, [x0, #3808]
   35e58:	ldr	x1, [x2, #3952]
   35e5c:	csel	x0, x0, x1, ne  // ne = any
   35e60:	ret
   35e64:	nop

0000000000035e68 <disassembler_usage@@Base>:
   35e68:	stp	x29, x30, [sp, #-32]!
   35e6c:	mov	x29, sp
   35e70:	str	x19, [sp, #16]
   35e74:	mov	x19, x0
   35e78:	bl	35890 <print_aarch64_disassembler_options@plt>
   35e7c:	mov	x0, x19
   35e80:	ldr	x19, [sp, #16]
   35e84:	ldp	x29, x30, [sp], #32
   35e88:	b	354a0 <print_arm_disassembler_options@plt>
   35e8c:	nop

0000000000035e90 <disassemble_init_for_target@@Base>:
   35e90:	cbz	x0, 35ea8 <disassemble_init_for_target@@Base+0x18>
   35e94:	ldr	w1, [x0, #28]
   35e98:	cmp	w1, #0x21
   35e9c:	b.eq	35ec4 <disassemble_init_for_target@@Base+0x34>  // b.none
   35ea0:	cmp	w1, #0x52
   35ea4:	b.eq	35eac <disassemble_init_for_target@@Base+0x1c>  // b.none
   35ea8:	ret
   35eac:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   35eb0:	mov	w2, #0x1                   	// #1
   35eb4:	str	w2, [x0, #192]
   35eb8:	ldr	x1, [x1, #3856]
   35ebc:	str	x1, [x0, #136]
   35ec0:	ret
   35ec4:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   35ec8:	mov	w2, #0x1                   	// #1
   35ecc:	str	w2, [x0, #192]
   35ed0:	ldr	x1, [x1, #3912]
   35ed4:	str	x1, [x0, #136]
   35ed8:	ret
   35edc:	nop

0000000000035ee0 <disassemble_free_target@@Base>:
   35ee0:	ret
   35ee4:	nop

0000000000035ee8 <remove_whitespace_and_extra_commas@@Base>:
   35ee8:	stp	x29, x30, [sp, #-64]!
   35eec:	mov	x29, sp
   35ef0:	stp	x19, x20, [sp, #16]
   35ef4:	cbz	x0, 36038 <remove_whitespace_and_extra_commas@@Base+0x150>
   35ef8:	mov	x19, x0
   35efc:	bl	350a0 <strlen@plt>
   35f00:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   35f04:	ldr	x2, [x2, #3880]
   35f08:	cbz	x0, 35f34 <remove_whitespace_and_extra_commas@@Base+0x4c>
   35f0c:	nop
   35f10:	sub	x0, x0, #0x1
   35f14:	ldrb	w1, [x19, x0]
   35f18:	cmp	w1, #0x2c
   35f1c:	ldrh	w1, [x2, w1, sxtw #1]
   35f20:	and	w1, w1, #0x40
   35f24:	ccmp	w1, #0x0, #0x0, ne  // ne = any
   35f28:	b.eq	35f34 <remove_whitespace_and_extra_commas@@Base+0x4c>  // b.none
   35f2c:	strb	wzr, [x19, x0]
   35f30:	cbnz	x0, 35f10 <remove_whitespace_and_extra_commas@@Base+0x28>
   35f34:	ldrb	w0, [x19]
   35f38:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   35f3c:	mov	x1, x19
   35f40:	mov	w3, #0x2c                  	// #44
   35f44:	ldr	x2, [x2, #3880]
   35f48:	cbz	w0, 36038 <remove_whitespace_and_extra_commas@@Base+0x150>
   35f4c:	nop
   35f50:	ldrh	w0, [x2, w0, sxtw #1]
   35f54:	tbz	w0, #6, 3602c <remove_whitespace_and_extra_commas@@Base+0x144>
   35f58:	strb	w3, [x1]
   35f5c:	ldrb	w0, [x1, #1]!
   35f60:	cbnz	w0, 35f50 <remove_whitespace_and_extra_commas@@Base+0x68>
   35f64:	ldrb	w1, [x19]
   35f68:	cbz	w1, 36038 <remove_whitespace_and_extra_commas@@Base+0x150>
   35f6c:	stp	x21, x22, [sp, #32]
   35f70:	mov	x21, x19
   35f74:	mov	x20, x21
   35f78:	cmp	w1, #0x2c
   35f7c:	ldrb	w1, [x20, #1]!
   35f80:	b.eq	35fa0 <remove_whitespace_and_extra_commas@@Base+0xb8>  // b.none
   35f84:	nop
   35f88:	cbz	w1, 36010 <remove_whitespace_and_extra_commas@@Base+0x128>
   35f8c:	mov	x21, x20
   35f90:	cmp	w1, #0x2c
   35f94:	mov	x20, x21
   35f98:	ldrb	w1, [x20, #1]!
   35f9c:	b.ne	35f88 <remove_whitespace_and_extra_commas@@Base+0xa0>  // b.any
   35fa0:	cmp	w1, #0x2c
   35fa4:	ccmp	x19, x21, #0x4, ne  // ne = any
   35fa8:	b.ne	35f88 <remove_whitespace_and_extra_commas@@Base+0xa0>  // b.any
   35fac:	str	x23, [sp, #48]
   35fb0:	mov	x22, x20
   35fb4:	cmp	w1, #0x2c
   35fb8:	b.ne	35fcc <remove_whitespace_and_extra_commas@@Base+0xe4>  // b.any
   35fbc:	nop
   35fc0:	ldrb	w0, [x22, #1]!
   35fc4:	cmp	w0, #0x2c
   35fc8:	b.eq	35fc0 <remove_whitespace_and_extra_commas@@Base+0xd8>  // b.none
   35fcc:	mov	x0, x22
   35fd0:	bl	350a0 <strlen@plt>
   35fd4:	cmp	x19, x21
   35fd8:	mov	x23, x0
   35fdc:	b.eq	35fec <remove_whitespace_and_extra_commas@@Base+0x104>  // b.none
   35fe0:	add	x0, x21, #0x2
   35fe4:	mov	x21, x20
   35fe8:	mov	x20, x0
   35fec:	mov	x1, x22
   35ff0:	mov	x2, x23
   35ff4:	mov	x0, x21
   35ff8:	bl	35060 <memmove@plt>
   35ffc:	strb	wzr, [x21, x23]
   36000:	ldrb	w1, [x21, #1]
   36004:	ldr	x23, [sp, #48]
   36008:	cbnz	w1, 35f8c <remove_whitespace_and_extra_commas@@Base+0xa4>
   3600c:	nop
   36010:	ldrb	w0, [x19]
   36014:	ldp	x21, x22, [sp, #32]
   36018:	cbz	w0, 36038 <remove_whitespace_and_extra_commas@@Base+0x150>
   3601c:	mov	x0, x19
   36020:	ldp	x19, x20, [sp, #16]
   36024:	ldp	x29, x30, [sp], #64
   36028:	ret
   3602c:	ldrb	w0, [x1, #1]!
   36030:	cbnz	w0, 35f50 <remove_whitespace_and_extra_commas@@Base+0x68>
   36034:	b	35f64 <remove_whitespace_and_extra_commas@@Base+0x7c>
   36038:	mov	x19, #0x0                   	// #0
   3603c:	mov	x0, x19
   36040:	ldp	x19, x20, [sp, #16]
   36044:	ldp	x29, x30, [sp], #64
   36048:	ret
   3604c:	nop

0000000000036050 <disassembler_options_cmp@@Base>:
   36050:	mov	x4, #0x0                   	// #0
   36054:	ldrb	w2, [x0, x4]
   36058:	ldrb	w3, [x1, x4]
   3605c:	cmp	w2, #0x2c
   36060:	b.eq	36084 <disassembler_options_cmp@@Base+0x34>  // b.none
   36064:	add	x4, x4, #0x1
   36068:	cmp	w3, #0x2c
   3606c:	b.eq	36098 <disassembler_options_cmp@@Base+0x48>  // b.none
   36070:	cmp	w2, w3
   36074:	cbz	w2, 36090 <disassembler_options_cmp@@Base+0x40>
   36078:	b.eq	36054 <disassembler_options_cmp@@Base+0x4>  // b.none
   3607c:	sub	w0, w2, w3
   36080:	ret
   36084:	cmp	w3, #0x2c
   36088:	mov	w0, #0x0                   	// #0
   3608c:	b.eq	36080 <disassembler_options_cmp@@Base+0x30>  // b.none
   36090:	neg	w0, w3
   36094:	ret
   36098:	cbz	w2, 360a8 <disassembler_options_cmp@@Base+0x58>
   3609c:	mov	w3, #0x0                   	// #0
   360a0:	sub	w0, w2, w3
   360a4:	b	36080 <disassembler_options_cmp@@Base+0x30>
   360a8:	mov	w0, #0x0                   	// #0
   360ac:	ret

00000000000360b0 <init_disassemble_info@@Base>:
   360b0:	stp	x29, x30, [sp, #-48]!
   360b4:	mov	x29, sp
   360b8:	stp	x19, x20, [sp, #16]
   360bc:	mov	x19, x0
   360c0:	mov	x20, x1
   360c4:	add	x0, x0, #0x10
   360c8:	mov	w1, #0x0                   	// #0
   360cc:	str	x21, [sp, #32]
   360d0:	mov	x21, x2
   360d4:	mov	x2, #0xe8                  	// #232
   360d8:	bl	35470 <memset@plt>
   360dc:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   360e0:	adrp	x3, a6000 <aarch64_operands@@Base+0x16bd0>
   360e4:	adrp	x6, a6000 <aarch64_operands@@Base+0x16bd0>
   360e8:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   360ec:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   360f0:	mov	x7, #0x2                   	// #2
   360f4:	ldr	x6, [x6, #3976]
   360f8:	mov	x8, #0x200000002           	// #8589934594
   360fc:	ldr	x5, [x5, #3816]
   36100:	movk	x7, #0x1, lsl #32
   36104:	ldr	x2, [x4, #3784]
   36108:	stp	x21, x20, [x19]
   3610c:	ldr	x1, [x3, #3936]
   36110:	str	x8, [x19, #40]
   36114:	ldr	x0, [x0, #3872]
   36118:	stp	x6, x5, [x19, #104]
   3611c:	stp	x2, x1, [x19, #120]
   36120:	str	x0, [x19, #136]
   36124:	str	x7, [x19, #176]
   36128:	ldp	x19, x20, [sp, #16]
   3612c:	ldr	x21, [sp, #32]
   36130:	ldp	x29, x30, [sp], #48
   36134:	ret
   36138:	stp	x29, x30, [sp, #-16]!
   3613c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   36140:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   36144:	mov	x29, sp
   36148:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3614c:	add	x3, x3, #0xce8
   36150:	add	x1, x1, #0x610
   36154:	add	x0, x0, #0x630
   36158:	mov	w2, #0x203                 	// #515
   3615c:	bl	35ac0 <__assert_fail@plt>
   36160:	stp	x29, x30, [sp, #-16]!
   36164:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   36168:	add	x3, x3, #0xce8
   3616c:	mov	x29, sp
   36170:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   36174:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   36178:	add	x3, x3, #0x10
   3617c:	add	x1, x1, #0x658
   36180:	add	x0, x0, #0x678
   36184:	mov	w2, #0x220                 	// #544
   36188:	bl	35ac0 <__assert_fail@plt>
   3618c:	nop
   36190:	stp	x29, x30, [sp, #-16]!
   36194:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   36198:	add	x3, x3, #0xce8
   3619c:	mov	x29, sp
   361a0:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   361a4:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   361a8:	add	x3, x3, #0x28
   361ac:	add	x1, x1, #0x610
   361b0:	add	x0, x0, #0x870
   361b4:	mov	w2, #0x1ab                 	// #427
   361b8:	bl	35ac0 <__assert_fail@plt>
   361bc:	nop
   361c0:	stp	x29, x30, [sp, #-96]!
   361c4:	mov	w8, #0xffffffe0            	// #-32
   361c8:	cmp	w3, #0x5
   361cc:	mov	x29, sp
   361d0:	add	x9, sp, #0x30
   361d4:	str	x9, [sp, #32]
   361d8:	stp	w8, wzr, [sp, #40]
   361dc:	stp	x3, x4, [sp, #56]
   361e0:	add	x4, sp, #0x60
   361e4:	stp	x4, x4, [sp, #16]
   361e8:	stp	x5, x6, [sp, #72]
   361ec:	str	x7, [sp, #88]
   361f0:	b.hi	36478 <init_disassemble_info@@Base+0x3c8>  // b.pmore
   361f4:	cbz	w3, 36414 <init_disassemble_info@@Base+0x364>
   361f8:	adrp	x6, a6000 <aarch64_operands@@Base+0x16bd0>
   361fc:	mov	w5, #0xffffffe8            	// #-24
   36200:	ldr	w4, [sp, #64]
   36204:	add	x7, sp, #0x60
   36208:	str	w5, [sp, #40]
   3620c:	ldr	x5, [x6, #3944]
   36210:	lsl	x4, x4, #3
   36214:	add	x9, x4, x5
   36218:	ldr	w5, [x4, x5]
   3621c:	ldr	w8, [x9, #4]
   36220:	cmp	w5, #0x0
   36224:	sub	w4, w8, #0x1
   36228:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   3622c:	b.hi	36454 <init_disassemble_info@@Base+0x3a4>  // b.pmore
   36230:	add	w4, w8, w5
   36234:	cmp	w4, #0x20
   36238:	b.gt	36454 <init_disassemble_info@@Base+0x3a4>
   3623c:	mov	w4, #0xffffffff            	// #-1
   36240:	ldr	w10, [x0]
   36244:	lsl	w4, w4, w8
   36248:	bic	w4, w1, w4
   3624c:	cmp	w3, #0x1
   36250:	lsr	w1, w1, w8
   36254:	lsl	w4, w4, w5
   36258:	bic	w4, w4, w2
   3625c:	orr	w4, w4, w10
   36260:	str	w4, [x0]
   36264:	mvn	w5, w2
   36268:	b.eq	36414 <init_disassemble_info@@Base+0x364>  // b.none
   3626c:	ldr	w8, [sp, #72]
   36270:	mov	w9, #0xfffffff0            	// #-16
   36274:	ldr	x2, [x6, #3944]
   36278:	str	w9, [sp, #40]
   3627c:	lsl	x8, x8, #3
   36280:	mov	x11, x7
   36284:	add	x10, x8, x2
   36288:	ldr	w8, [x8, x2]
   3628c:	ldr	w9, [x10, #4]
   36290:	cmp	w8, #0x0
   36294:	sub	w2, w9, #0x1
   36298:	ccmp	w2, #0x1e, #0x2, ge  // ge = tcont
   3629c:	b.hi	36454 <init_disassemble_info@@Base+0x3a4>  // b.pmore
   362a0:	add	w2, w8, w9
   362a4:	cmp	w2, #0x20
   362a8:	b.gt	36454 <init_disassemble_info@@Base+0x3a4>
   362ac:	mov	w2, #0xffffffff            	// #-1
   362b0:	cmp	w3, #0x2
   362b4:	lsl	w2, w2, w9
   362b8:	bic	w2, w1, w2
   362bc:	lsr	w1, w1, w9
   362c0:	lsl	w2, w2, w8
   362c4:	and	w2, w5, w2
   362c8:	orr	w4, w2, w4
   362cc:	str	w4, [x0]
   362d0:	b.eq	36414 <init_disassemble_info@@Base+0x364>  // b.none
   362d4:	ldr	w2, [sp, #40]
   362d8:	add	x12, x7, #0x8
   362dc:	tbnz	w2, #31, 3641c <init_disassemble_info@@Base+0x36c>
   362e0:	ldr	w8, [x11]
   362e4:	ldr	x2, [x6, #3944]
   362e8:	lsl	x8, x8, #3
   362ec:	add	x10, x8, x2
   362f0:	ldr	w8, [x8, x2]
   362f4:	ldr	w9, [x10, #4]
   362f8:	cmp	w8, #0x0
   362fc:	sub	w2, w9, #0x1
   36300:	ccmp	w2, #0x1e, #0x2, ge  // ge = tcont
   36304:	b.hi	36454 <init_disassemble_info@@Base+0x3a4>  // b.pmore
   36308:	add	w2, w8, w9
   3630c:	cmp	w2, #0x20
   36310:	b.gt	36454 <init_disassemble_info@@Base+0x3a4>
   36314:	mov	w2, #0xffffffff            	// #-1
   36318:	cmp	w3, #0x3
   3631c:	lsl	w2, w2, w9
   36320:	bic	w2, w1, w2
   36324:	lsr	w1, w1, w9
   36328:	lsl	w2, w2, w8
   3632c:	and	w2, w5, w2
   36330:	orr	w4, w2, w4
   36334:	str	w4, [x0]
   36338:	b.eq	36414 <init_disassemble_info@@Base+0x364>  // b.none
   3633c:	ldr	w2, [sp, #40]
   36340:	add	x9, x12, #0xb
   36344:	and	x9, x9, #0xfffffffffffffff8
   36348:	tbnz	w2, #31, 36438 <init_disassemble_info@@Base+0x388>
   3634c:	ldr	w8, [x12]
   36350:	ldr	x2, [x6, #3944]
   36354:	lsl	x8, x8, #3
   36358:	add	x11, x8, x2
   3635c:	ldr	w8, [x8, x2]
   36360:	ldr	w10, [x11, #4]
   36364:	cmp	w8, #0x0
   36368:	sub	w2, w10, #0x1
   3636c:	ccmp	w2, #0x1e, #0x2, ge  // ge = tcont
   36370:	b.hi	36454 <init_disassemble_info@@Base+0x3a4>  // b.pmore
   36374:	add	w2, w8, w10
   36378:	cmp	w2, #0x20
   3637c:	b.gt	36454 <init_disassemble_info@@Base+0x3a4>
   36380:	mov	w2, #0xffffffff            	// #-1
   36384:	cmp	w3, #0x4
   36388:	lsl	w2, w2, w10
   3638c:	bic	w2, w1, w2
   36390:	lsr	w1, w1, w10
   36394:	lsl	w2, w2, w8
   36398:	and	w2, w5, w2
   3639c:	orr	w4, w2, w4
   363a0:	str	w4, [x0]
   363a4:	b.eq	36414 <init_disassemble_info@@Base+0x364>  // b.none
   363a8:	ldr	w2, [sp, #40]
   363ac:	tbz	w2, #31, 363c4 <init_disassemble_info@@Base+0x314>
   363b0:	add	w3, w2, #0x8
   363b4:	add	x2, x7, w2, sxtw
   363b8:	cmp	w3, #0x0
   363bc:	str	w3, [sp, #40]
   363c0:	csel	x9, x2, x9, le
   363c4:	ldr	w2, [x9]
   363c8:	ldr	x6, [x6, #3944]
   363cc:	lsl	x2, x2, #3
   363d0:	add	x7, x2, x6
   363d4:	ldr	w3, [x2, x6]
   363d8:	ldr	w6, [x7, #4]
   363dc:	cmp	w3, #0x0
   363e0:	sub	w2, w6, #0x1
   363e4:	ccmp	w2, #0x1e, #0x2, ge  // ge = tcont
   363e8:	b.hi	36454 <init_disassemble_info@@Base+0x3a4>  // b.pmore
   363ec:	add	w2, w3, w6
   363f0:	cmp	w2, #0x20
   363f4:	b.gt	36454 <init_disassemble_info@@Base+0x3a4>
   363f8:	mov	w2, #0xffffffff            	// #-1
   363fc:	lsl	w2, w2, w6
   36400:	bic	w1, w1, w2
   36404:	lsl	w1, w1, w3
   36408:	and	w5, w1, w5
   3640c:	orr	w4, w5, w4
   36410:	str	w4, [x0]
   36414:	ldp	x29, x30, [sp], #96
   36418:	ret
   3641c:	add	w8, w2, #0x8
   36420:	str	w8, [sp, #40]
   36424:	cmp	w8, #0x0
   36428:	b.gt	362e0 <init_disassemble_info@@Base+0x230>
   3642c:	mov	x12, x7
   36430:	add	x11, x7, w2, sxtw
   36434:	b	362e0 <init_disassemble_info@@Base+0x230>
   36438:	add	w8, w2, #0x8
   3643c:	str	w8, [sp, #40]
   36440:	cmp	w8, #0x0
   36444:	b.gt	3634c <init_disassemble_info@@Base+0x29c>
   36448:	mov	x9, x12
   3644c:	add	x12, x7, w2, sxtw
   36450:	b	3634c <init_disassemble_info@@Base+0x29c>
   36454:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   36458:	add	x3, x3, #0xce8
   3645c:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   36460:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   36464:	add	x3, x3, #0x60
   36468:	add	x1, x1, #0x610
   3646c:	add	x0, x0, #0x6c0
   36470:	mov	w2, #0x169                 	// #361
   36474:	bl	35ac0 <__assert_fail@plt>
   36478:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3647c:	add	x3, x3, #0xce8
   36480:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   36484:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   36488:	add	x3, x3, #0x50
   3648c:	add	x1, x1, #0x658
   36490:	add	x0, x0, #0x6b0
   36494:	mov	w2, #0x31                  	// #49
   36498:	bl	35ac0 <__assert_fail@plt>
   3649c:	nop

00000000000364a0 <aarch64_ins_regno@@Base>:
   364a0:	adrp	x3, a6000 <aarch64_operands@@Base+0x16bd0>
   364a4:	ldr	w0, [x0, #20]
   364a8:	ldr	w5, [x1, #16]
   364ac:	ldr	x3, [x3, #3944]
   364b0:	lsl	x0, x0, #3
   364b4:	add	x4, x0, x3
   364b8:	ldr	w3, [x0, x3]
   364bc:	ldr	w0, [x4, #4]
   364c0:	cmp	w3, #0x0
   364c4:	sub	w4, w0, #0x1
   364c8:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   364cc:	b.hi	36500 <aarch64_ins_regno@@Base+0x60>  // b.pmore
   364d0:	add	w1, w3, w0
   364d4:	cmp	w1, #0x20
   364d8:	b.gt	36500 <aarch64_ins_regno@@Base+0x60>
   364dc:	mov	w1, #0xffffffff            	// #-1
   364e0:	ldr	w4, [x2]
   364e4:	lsl	w1, w1, w0
   364e8:	bic	w1, w5, w1
   364ec:	mov	w0, #0x1                   	// #1
   364f0:	lsl	w1, w1, w3
   364f4:	orr	w1, w4, w1
   364f8:	str	w1, [x2]
   364fc:	ret
   36500:	stp	x29, x30, [sp, #-16]!
   36504:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   36508:	add	x3, x3, #0xce8
   3650c:	mov	x29, sp
   36510:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   36514:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   36518:	add	x3, x3, #0x60
   3651c:	add	x1, x1, #0x610
   36520:	add	x0, x0, #0x6c0
   36524:	mov	w2, #0x169                 	// #361
   36528:	bl	35ac0 <__assert_fail@plt>
   3652c:	nop

0000000000036530 <aarch64_ins_reglane@@Base>:
   36530:	stp	x29, x30, [sp, #-16]!
   36534:	adrp	x8, a6000 <aarch64_operands@@Base+0x16bd0>
   36538:	mov	x29, sp
   3653c:	ldr	w4, [x0, #20]
   36540:	mov	x0, x2
   36544:	ldr	x9, [x8, #3944]
   36548:	lsl	x4, x4, #3
   3654c:	ldr	w10, [x1, #16]
   36550:	add	x2, x4, x9
   36554:	ldr	x6, [x3, #8]
   36558:	ldr	w4, [x4, x9]
   3655c:	ldr	w3, [x2, #4]
   36560:	cmp	w4, #0x0
   36564:	ldr	w5, [x6, #12]
   36568:	sub	w2, w3, #0x1
   3656c:	ccmp	w2, #0x1e, #0x2, ge  // ge = tcont
   36570:	b.hi	36808 <aarch64_ins_reglane@@Base+0x2d8>  // b.pmore
   36574:	add	w2, w4, w3
   36578:	cmp	w2, #0x20
   3657c:	b.gt	36808 <aarch64_ins_reglane@@Base+0x2d8>
   36580:	mov	w7, #0xffffffff            	// #-1
   36584:	ldr	w2, [x0]
   36588:	lsl	w3, w7, w3
   3658c:	bic	w3, w10, w3
   36590:	lsl	w3, w3, w4
   36594:	bic	w3, w3, w5
   36598:	orr	w3, w3, w2
   3659c:	str	w3, [x0]
   365a0:	ldr	w2, [x6, #16]
   365a4:	cmp	w2, #0x17
   365a8:	ccmp	w2, #0xa, #0x4, ne  // ne = any
   365ac:	b.eq	36614 <aarch64_ins_reglane@@Base+0xe4>  // b.none
   365b0:	cmp	w2, #0x5d
   365b4:	ldr	x4, [x1, #24]
   365b8:	b.eq	3677c <aarch64_ins_reglane@@Base+0x24c>  // b.none
   365bc:	cmp	w2, #0x5b
   365c0:	b.eq	367bc <aarch64_ins_reglane@@Base+0x28c>  // b.none
   365c4:	ldr	w2, [x6, #20]
   365c8:	lsl	w7, w4, #1
   365cc:	ldrb	w1, [x1, #4]
   365d0:	cmp	w2, #0x50
   365d4:	csel	w5, w7, w4, eq  // eq = none
   365d8:	cmp	w1, #0x7
   365dc:	b.eq	36750 <aarch64_ins_reglane@@Base+0x220>  // b.none
   365e0:	cmp	w1, #0x8
   365e4:	b.eq	366b8 <aarch64_ins_reglane@@Base+0x188>  // b.none
   365e8:	cmp	w1, #0x6
   365ec:	b.eq	36690 <aarch64_ins_reglane@@Base+0x160>  // b.none
   365f0:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   365f4:	add	x3, x3, #0xce8
   365f8:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   365fc:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   36600:	add	x3, x3, #0x70
   36604:	add	x1, x1, #0x658
   36608:	add	x0, x0, #0x870
   3660c:	mov	w2, #0xb1                  	// #177
   36610:	bl	35ac0 <__assert_fail@plt>
   36614:	ldrb	w2, [x1, #4]
   36618:	ldr	w4, [x1]
   3661c:	sub	w5, w2, #0x5
   36620:	cmp	w4, #0x20
   36624:	b.ne	36634 <aarch64_ins_reglane@@Base+0x104>  // b.any
   36628:	ldr	w2, [x6, #32]
   3662c:	cmp	w2, #0x1f
   36630:	b.eq	36700 <aarch64_ins_reglane@@Base+0x1d0>  // b.none
   36634:	ldr	x2, [x8, #3944]
   36638:	ldr	x4, [x1, #24]
   3663c:	ldr	w6, [x2, #344]
   36640:	ldr	w7, [x2, #348]
   36644:	lsl	x2, x4, #1
   36648:	cmp	w6, #0x0
   3664c:	orr	x2, x2, #0x1
   36650:	sub	w1, w7, #0x1
   36654:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   36658:	lsl	x2, x2, x5
   3665c:	b.hi	36808 <aarch64_ins_reglane@@Base+0x2d8>  // b.pmore
   36660:	add	w1, w6, w7
   36664:	cmp	w1, #0x20
   36668:	b.gt	36808 <aarch64_ins_reglane@@Base+0x2d8>
   3666c:	mov	w1, #0xffffffff            	// #-1
   36670:	lsl	w1, w1, w7
   36674:	bic	w1, w2, w1
   36678:	lsl	w1, w1, w6
   3667c:	orr	w3, w1, w3
   36680:	str	w3, [x0]
   36684:	mov	w0, #0x1                   	// #1
   36688:	ldp	x29, x30, [sp], #16
   3668c:	ret
   36690:	cmp	w5, #0x7
   36694:	b.hi	368e0 <aarch64_ins_reglane@@Base+0x3b0>  // b.pmore
   36698:	mov	w1, w5
   3669c:	mov	w6, #0x3d                  	// #61
   366a0:	mov	w5, #0x3e                  	// #62
   366a4:	mov	w4, #0x3f                  	// #63
   366a8:	mov	w3, #0x3                   	// #3
   366ac:	mov	w2, #0x0                   	// #0
   366b0:	bl	361c0 <init_disassemble_info@@Base+0x110>
   366b4:	b	36684 <aarch64_ins_reglane@@Base+0x154>
   366b8:	cmp	w5, #0x1
   366bc:	b.hi	368bc <aarch64_ins_reglane@@Base+0x38c>  // b.pmore
   366c0:	ldr	w2, [x9, #488]
   366c4:	ldr	w4, [x9, #492]
   366c8:	cmp	w2, #0x0
   366cc:	sub	w1, w4, #0x1
   366d0:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   366d4:	b.hi	36808 <aarch64_ins_reglane@@Base+0x2d8>  // b.pmore
   366d8:	add	w1, w2, w4
   366dc:	cmp	w1, #0x20
   366e0:	b.gt	36808 <aarch64_ins_reglane@@Base+0x2d8>
   366e4:	mov	w1, #0xffffffff            	// #-1
   366e8:	lsl	w1, w1, w4
   366ec:	bic	w1, w5, w1
   366f0:	lsl	w1, w1, w2
   366f4:	orr	w3, w1, w3
   366f8:	str	w3, [x0]
   366fc:	b	36684 <aarch64_ins_reglane@@Base+0x154>
   36700:	ldr	w2, [x1, #8]
   36704:	cmp	w2, #0x1
   36708:	b.ne	36898 <aarch64_ins_reglane@@Base+0x368>  // b.any
   3670c:	ldr	x2, [x1, #24]
   36710:	ldr	w4, [x9, #320]
   36714:	ldr	w1, [x9, #324]
   36718:	cmp	w4, #0x0
   3671c:	lsl	x2, x2, x5
   36720:	sub	w5, w1, #0x1
   36724:	ccmp	w5, #0x1e, #0x2, ge  // ge = tcont
   36728:	b.hi	36808 <aarch64_ins_reglane@@Base+0x2d8>  // b.pmore
   3672c:	add	w5, w4, w1
   36730:	cmp	w5, #0x20
   36734:	b.gt	36808 <aarch64_ins_reglane@@Base+0x2d8>
   36738:	lsl	w1, w7, w1
   3673c:	bic	w1, w2, w1
   36740:	lsl	w1, w1, w4
   36744:	orr	w3, w1, w3
   36748:	str	w3, [x0]
   3674c:	b	36684 <aarch64_ins_reglane@@Base+0x154>
   36750:	mov	w1, w5
   36754:	cmp	w5, #0x3
   36758:	b.hi	36874 <aarch64_ins_reglane@@Base+0x344>  // b.pmore
   3675c:	mov	w5, #0x3d                  	// #61
   36760:	mov	w4, #0x3e                  	// #62
   36764:	mov	w3, #0x2                   	// #2
   36768:	mov	w2, #0x0                   	// #0
   3676c:	bl	361c0 <init_disassemble_info@@Base+0x110>
   36770:	mov	w0, #0x1                   	// #1
   36774:	ldp	x29, x30, [sp], #16
   36778:	ret
   3677c:	ldrb	w1, [x1, #4]
   36780:	sub	w1, w1, #0xa
   36784:	cmp	w1, #0x1
   36788:	b.hi	3682c <aarch64_ins_reglane@@Base+0x2fc>  // b.pmore
   3678c:	mov	w1, w4
   36790:	cmp	w4, #0x3
   36794:	b.ls	3675c <aarch64_ins_reglane@@Base+0x22c>  // b.plast
   36798:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3679c:	add	x3, x3, #0xce8
   367a0:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   367a4:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   367a8:	add	x3, x3, #0x70
   367ac:	add	x1, x1, #0x658
   367b0:	add	x0, x0, #0x730
   367b4:	mov	w2, #0x87                  	// #135
   367b8:	bl	35ac0 <__assert_fail@plt>
   367bc:	cmp	w4, #0x3
   367c0:	b.hi	36850 <aarch64_ins_reglane@@Base+0x320>  // b.pmore
   367c4:	ldr	w1, [x9, #992]
   367c8:	ldr	w2, [x9, #996]
   367cc:	cmp	w1, #0x0
   367d0:	sub	w5, w2, #0x1
   367d4:	ccmp	w5, #0x1e, #0x2, ge  // ge = tcont
   367d8:	b.hi	36808 <aarch64_ins_reglane@@Base+0x2d8>  // b.pmore
   367dc:	add	w5, w1, w2
   367e0:	cmp	w5, #0x20
   367e4:	b.gt	36808 <aarch64_ins_reglane@@Base+0x2d8>
   367e8:	lsl	w7, w7, w2
   367ec:	bic	w7, w4, w7
   367f0:	lsl	w7, w7, w1
   367f4:	orr	w3, w7, w3
   367f8:	str	w3, [x0]
   367fc:	mov	w0, #0x1                   	// #1
   36800:	ldp	x29, x30, [sp], #16
   36804:	ret
   36808:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3680c:	add	x3, x3, #0xce8
   36810:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   36814:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   36818:	add	x3, x3, #0x60
   3681c:	add	x1, x1, #0x610
   36820:	add	x0, x0, #0x6c0
   36824:	mov	w2, #0x169                 	// #361
   36828:	bl	35ac0 <__assert_fail@plt>
   3682c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   36830:	add	x3, x3, #0xce8
   36834:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   36838:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   3683c:	add	x3, x3, #0x70
   36840:	add	x1, x1, #0x658
   36844:	add	x0, x0, #0x870
   36848:	mov	w2, #0x8b                  	// #139
   3684c:	bl	35ac0 <__assert_fail@plt>
   36850:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   36854:	add	x3, x3, #0xce8
   36858:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3685c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   36860:	add	x3, x3, #0x70
   36864:	add	x1, x1, #0x658
   36868:	add	x0, x0, #0x730
   3686c:	mov	w2, #0x92                  	// #146
   36870:	bl	35ac0 <__assert_fail@plt>
   36874:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   36878:	add	x3, x3, #0xce8
   3687c:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   36880:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   36884:	add	x3, x3, #0x70
   36888:	add	x1, x1, #0x658
   3688c:	add	x0, x0, #0x730
   36890:	mov	w2, #0xa8                  	// #168
   36894:	bl	35ac0 <__assert_fail@plt>
   36898:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3689c:	add	x3, x3, #0xce8
   368a0:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   368a4:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   368a8:	add	x3, x3, #0x70
   368ac:	add	x1, x1, #0x658
   368b0:	add	x0, x0, #0x720
   368b4:	mov	w2, #0x6e                  	// #110
   368b8:	bl	35ac0 <__assert_fail@plt>
   368bc:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   368c0:	add	x3, x3, #0xce8
   368c4:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   368c8:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   368cc:	add	x3, x3, #0x70
   368d0:	add	x1, x1, #0x658
   368d4:	add	x0, x0, #0x760
   368d8:	mov	w2, #0xad                  	// #173
   368dc:	bl	35ac0 <__assert_fail@plt>
   368e0:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   368e4:	add	x3, x3, #0xce8
   368e8:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   368ec:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   368f0:	add	x3, x3, #0x70
   368f4:	add	x1, x1, #0x658
   368f8:	add	x0, x0, #0x748
   368fc:	mov	w2, #0xa3                  	// #163
   36900:	bl	35ac0 <__assert_fail@plt>
   36904:	nop

0000000000036908 <aarch64_ins_reglist@@Base>:
   36908:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   3690c:	ldr	w4, [x0, #20]
   36910:	ldrb	w3, [x1, #16]
   36914:	ldr	x5, [x5, #3944]
   36918:	lsl	x4, x4, #3
   3691c:	and	w6, w3, #0x1f
   36920:	add	x0, x4, x5
   36924:	ldr	w7, [x4, x5]
   36928:	ldr	w0, [x0, #4]
   3692c:	cmp	w7, #0x0
   36930:	sub	w3, w0, #0x1
   36934:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   36938:	b.hi	369ac <aarch64_ins_reglist@@Base+0xa4>  // b.pmore
   3693c:	add	w3, w7, w0
   36940:	cmp	w3, #0x20
   36944:	b.gt	369ac <aarch64_ins_reglist@@Base+0xa4>
   36948:	mov	w4, #0xffffffff            	// #-1
   3694c:	ldr	w8, [x2]
   36950:	lsl	w3, w4, w0
   36954:	bic	w3, w6, w3
   36958:	ldp	w6, w5, [x5, #216]
   3695c:	lsl	w3, w3, w7
   36960:	orr	w3, w3, w8
   36964:	str	w3, [x2]
   36968:	cmp	w6, #0x0
   3696c:	ldrb	w0, [x1, #16]
   36970:	add	w1, w5, w4
   36974:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   36978:	ubfx	x0, x0, #5, #3
   3697c:	add	w0, w0, w4
   36980:	b.hi	369ac <aarch64_ins_reglist@@Base+0xa4>  // b.pmore
   36984:	add	w1, w6, w5
   36988:	cmp	w1, #0x20
   3698c:	b.gt	369ac <aarch64_ins_reglist@@Base+0xa4>
   36990:	lsl	w4, w4, w5
   36994:	bic	w4, w0, w4
   36998:	mov	w0, #0x1                   	// #1
   3699c:	lsl	w4, w4, w6
   369a0:	orr	w3, w4, w3
   369a4:	str	w3, [x2]
   369a8:	ret
   369ac:	stp	x29, x30, [sp, #-16]!
   369b0:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   369b4:	add	x3, x3, #0xce8
   369b8:	mov	x29, sp
   369bc:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   369c0:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   369c4:	add	x3, x3, #0x60
   369c8:	add	x1, x1, #0x610
   369cc:	add	x0, x0, #0x6c0
   369d0:	mov	w2, #0x169                 	// #361
   369d4:	bl	35ac0 <__assert_fail@plt>

00000000000369d8 <aarch64_ins_ldst_reglist@@Base>:
   369d8:	stp	x29, x30, [sp, #-16]!
   369dc:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   369e0:	mov	x29, sp
   369e4:	ldr	x0, [x4, #3944]
   369e8:	ldr	x3, [x3, #8]
   369ec:	ldp	w6, w7, [x0, #96]
   369f0:	ldr	x0, [x3, #120]
   369f4:	cmp	w6, #0x0
   369f8:	sub	w3, w7, #0x1
   369fc:	ldrb	w5, [x1, #16]
   36a00:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   36a04:	lsr	x8, x0, #24
   36a08:	ubfx	w0, w0, #24, #3
   36a0c:	b.hi	36b1c <aarch64_ins_ldst_reglist@@Base+0x144>  // b.pmore
   36a10:	add	w3, w6, w7
   36a14:	cmp	w3, #0x20
   36a18:	b.gt	36b1c <aarch64_ins_ldst_reglist@@Base+0x144>
   36a1c:	and	w5, w5, #0x1f
   36a20:	mov	w3, #0xffffffff            	// #-1
   36a24:	ldr	w9, [x2]
   36a28:	lsl	w3, w3, w7
   36a2c:	bic	w3, w5, w3
   36a30:	cmp	w0, #0x3
   36a34:	lsl	w3, w3, w6
   36a38:	orr	w3, w3, w9
   36a3c:	str	w3, [x2]
   36a40:	b.eq	36b14 <aarch64_ins_ldst_reglist@@Base+0x13c>  // b.none
   36a44:	tbnz	w8, #2, 36ab8 <aarch64_ins_ldst_reglist@@Base+0xe0>
   36a48:	cmp	w0, #0x1
   36a4c:	b.eq	36ae8 <aarch64_ins_ldst_reglist@@Base+0x110>  // b.none
   36a50:	cmp	w0, #0x2
   36a54:	b.ne	36ac4 <aarch64_ins_ldst_reglist@@Base+0xec>  // b.any
   36a58:	ldrb	w0, [x1, #16]
   36a5c:	mov	w6, #0x8                   	// #8
   36a60:	mov	w1, #0x3                   	// #3
   36a64:	and	w0, w0, #0xe0
   36a68:	cmp	w0, #0x80
   36a6c:	csel	w6, w1, w6, eq  // eq = none
   36a70:	ldr	x4, [x4, #3944]
   36a74:	ldp	w5, w4, [x4, #192]
   36a78:	cmp	w5, #0x0
   36a7c:	sub	w0, w4, #0x1
   36a80:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   36a84:	b.hi	36b1c <aarch64_ins_ldst_reglist@@Base+0x144>  // b.pmore
   36a88:	add	w0, w5, w4
   36a8c:	cmp	w0, #0x20
   36a90:	b.gt	36b1c <aarch64_ins_ldst_reglist@@Base+0x144>
   36a94:	mov	w1, #0xffffffff            	// #-1
   36a98:	mov	w0, #0x1                   	// #1
   36a9c:	lsl	w1, w1, w4
   36aa0:	bic	w1, w6, w1
   36aa4:	lsl	w1, w1, w5
   36aa8:	orr	w3, w1, w3
   36aac:	str	w3, [x2]
   36ab0:	ldp	x29, x30, [sp], #16
   36ab4:	ret
   36ab8:	cmp	w0, #0x4
   36abc:	mov	w6, #0x0                   	// #0
   36ac0:	b.eq	36a70 <aarch64_ins_ldst_reglist@@Base+0x98>  // b.none
   36ac4:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   36ac8:	add	x3, x3, #0xce8
   36acc:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   36ad0:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   36ad4:	add	x3, x3, #0x98
   36ad8:	add	x1, x1, #0x658
   36adc:	add	x0, x0, #0x870
   36ae0:	mov	w2, #0xea                  	// #234
   36ae4:	bl	35ac0 <__assert_fail@plt>
   36ae8:	ldrb	w0, [x1, #16]
   36aec:	ubfx	x0, x0, #5, #3
   36af0:	sub	w0, w0, #0x1
   36af4:	and	w0, w0, #0xff
   36af8:	cmp	w0, #0x3
   36afc:	b.hi	36b40 <aarch64_ins_ldst_reglist@@Base+0x168>  // b.pmore
   36b00:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   36b04:	add	x1, x1, #0xce8
   36b08:	add	x0, x1, w0, uxtb #2
   36b0c:	ldr	w6, [x0, #136]
   36b10:	b	36a70 <aarch64_ins_ldst_reglist@@Base+0x98>
   36b14:	mov	w6, #0x4                   	// #4
   36b18:	b	36a70 <aarch64_ins_ldst_reglist@@Base+0x98>
   36b1c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   36b20:	add	x3, x3, #0xce8
   36b24:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   36b28:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   36b2c:	add	x3, x3, #0x60
   36b30:	add	x1, x1, #0x610
   36b34:	add	x0, x0, #0x6c0
   36b38:	mov	w2, #0x169                 	// #361
   36b3c:	bl	35ac0 <__assert_fail@plt>
   36b40:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   36b44:	add	x3, x3, #0xce8
   36b48:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   36b4c:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   36b50:	add	x3, x3, #0x98
   36b54:	add	x1, x1, #0x658
   36b58:	add	x0, x0, #0x870
   36b5c:	mov	w2, #0xdd                  	// #221
   36b60:	bl	35ac0 <__assert_fail@plt>
   36b64:	nop

0000000000036b68 <aarch64_ins_ldst_reglist_r@@Base>:
   36b68:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   36b6c:	ldrb	w5, [x1, #16]
   36b70:	ldr	x3, [x3, #8]
   36b74:	ldr	x4, [x0, #3944]
   36b78:	ldp	w6, w7, [x4, #96]
   36b7c:	ldr	x4, [x3, #120]
   36b80:	cmp	w6, #0x0
   36b84:	sub	w3, w7, #0x1
   36b88:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   36b8c:	ubfx	w4, w4, #24, #3
   36b90:	b.hi	36c20 <aarch64_ins_ldst_reglist_r@@Base+0xb8>  // b.pmore
   36b94:	add	w3, w6, w7
   36b98:	cmp	w3, #0x20
   36b9c:	b.gt	36c20 <aarch64_ins_ldst_reglist_r@@Base+0xb8>
   36ba0:	and	w5, w5, #0x1f
   36ba4:	mov	w3, #0xffffffff            	// #-1
   36ba8:	ldr	w8, [x2]
   36bac:	lsl	w3, w3, w7
   36bb0:	bic	w3, w5, w3
   36bb4:	cmp	w4, #0x1
   36bb8:	mov	w7, #0x0                   	// #0
   36bbc:	lsl	w3, w3, w6
   36bc0:	orr	w3, w3, w8
   36bc4:	str	w3, [x2]
   36bc8:	b.ne	36bdc <aarch64_ins_ldst_reglist_r@@Base+0x74>  // b.any
   36bcc:	ldrb	w1, [x1, #16]
   36bd0:	and	w1, w1, #0xe0
   36bd4:	cmp	w1, #0x40
   36bd8:	cset	w7, eq  // eq = none
   36bdc:	ldr	x0, [x0, #3944]
   36be0:	ldp	w4, w5, [x0, #248]
   36be4:	cmp	w4, #0x0
   36be8:	sub	w0, w5, #0x1
   36bec:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   36bf0:	b.hi	36c20 <aarch64_ins_ldst_reglist_r@@Base+0xb8>  // b.pmore
   36bf4:	add	w0, w4, w5
   36bf8:	cmp	w0, #0x20
   36bfc:	b.gt	36c20 <aarch64_ins_ldst_reglist_r@@Base+0xb8>
   36c00:	mov	w1, #0xffffffff            	// #-1
   36c04:	mov	w0, #0x1                   	// #1
   36c08:	lsl	w1, w1, w5
   36c0c:	bic	w1, w7, w1
   36c10:	lsl	w1, w1, w4
   36c14:	orr	w3, w1, w3
   36c18:	str	w3, [x2]
   36c1c:	ret
   36c20:	stp	x29, x30, [sp, #-16]!
   36c24:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   36c28:	add	x3, x3, #0xce8
   36c2c:	mov	x29, sp
   36c30:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   36c34:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   36c38:	add	x3, x3, #0x60
   36c3c:	add	x1, x1, #0x610
   36c40:	add	x0, x0, #0x6c0
   36c44:	mov	w2, #0x169                 	// #361
   36c48:	bl	35ac0 <__assert_fail@plt>
   36c4c:	nop

0000000000036c50 <aarch64_ins_ldst_elemlist@@Base>:
   36c50:	stp	x29, x30, [sp, #-48]!
   36c54:	mov	x29, sp
   36c58:	ldrb	w0, [x1, #17]
   36c5c:	stp	x19, x20, [sp, #16]
   36c60:	str	x21, [sp, #32]
   36c64:	tbz	w0, #0, 36de4 <aarch64_ins_ldst_elemlist@@Base+0x194>
   36c68:	adrp	x20, a6000 <aarch64_operands@@Base+0x16bd0>
   36c6c:	ldrb	w0, [x1, #16]
   36c70:	mov	x19, x2
   36c74:	ldr	x21, [x20, #3944]
   36c78:	and	w2, w0, #0x1f
   36c7c:	ldp	w3, w4, [x21, #96]
   36c80:	cmp	w3, #0x0
   36c84:	sub	w0, w4, #0x1
   36c88:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   36c8c:	b.hi	36d8c <aarch64_ins_ldst_elemlist@@Base+0x13c>  // b.pmore
   36c90:	add	w0, w3, w4
   36c94:	cmp	w0, #0x20
   36c98:	b.gt	36d8c <aarch64_ins_ldst_elemlist@@Base+0x13c>
   36c9c:	mov	w0, #0xffffffff            	// #-1
   36ca0:	ldr	w5, [x19]
   36ca4:	lsl	w0, w0, w4
   36ca8:	bic	w0, w2, w0
   36cac:	lsl	w0, w0, w3
   36cb0:	orr	w0, w5, w0
   36cb4:	str	w0, [x19]
   36cb8:	ldrb	w0, [x1, #4]
   36cbc:	cmp	w0, #0x7
   36cc0:	b.eq	36db0 <aarch64_ins_ldst_elemlist@@Base+0x160>  // b.none
   36cc4:	b.hi	36d44 <aarch64_ins_ldst_elemlist@@Base+0xf4>  // b.pmore
   36cc8:	cmp	w0, #0x5
   36ccc:	b.eq	36d60 <aarch64_ins_ldst_elemlist@@Base+0x110>  // b.none
   36cd0:	cmp	w0, #0x6
   36cd4:	b.ne	36dc0 <aarch64_ins_ldst_elemlist@@Base+0x170>  // b.any
   36cd8:	ldr	x1, [x1, #24]
   36cdc:	mov	w21, #0x1                   	// #1
   36ce0:	lsl	w1, w1, #1
   36ce4:	mov	x0, x19
   36ce8:	mov	w6, #0xb                   	// #11
   36cec:	mov	w5, #0x1f                  	// #31
   36cf0:	mov	w4, #0x9                   	// #9
   36cf4:	mov	w3, #0x3                   	// #3
   36cf8:	mov	w2, #0x0                   	// #0
   36cfc:	bl	361c0 <init_disassemble_info@@Base+0x110>
   36d00:	ldr	x20, [x20, #3944]
   36d04:	ldr	w0, [x20, #212]
   36d08:	cmp	w0, #0x2
   36d0c:	b.le	36d8c <aarch64_ins_ldst_elemlist@@Base+0x13c>
   36d10:	ldr	w1, [x20, #208]
   36d14:	add	w1, w1, #0x1
   36d18:	cmp	w1, #0x1e
   36d1c:	b.hi	36d8c <aarch64_ins_ldst_elemlist@@Base+0x13c>  // b.pmore
   36d20:	ldr	w0, [x19]
   36d24:	lsl	w1, w21, w1
   36d28:	ldr	x21, [sp, #32]
   36d2c:	orr	w0, w0, w1
   36d30:	str	w0, [x19]
   36d34:	mov	w0, #0x1                   	// #1
   36d38:	ldp	x19, x20, [sp, #16]
   36d3c:	ldp	x29, x30, [sp], #48
   36d40:	ret
   36d44:	cmp	w0, #0x8
   36d48:	b.ne	36dc0 <aarch64_ins_ldst_elemlist@@Base+0x170>  // b.any
   36d4c:	ldr	x1, [x1, #24]
   36d50:	mov	w21, #0x2                   	// #2
   36d54:	lsl	x1, x1, #3
   36d58:	orr	w1, w1, #0x1
   36d5c:	b	36ce4 <aarch64_ins_ldst_elemlist@@Base+0x94>
   36d60:	ldr	w1, [x1, #24]
   36d64:	mov	x0, x19
   36d68:	mov	w6, #0xb                   	// #11
   36d6c:	mov	w5, #0x1f                  	// #31
   36d70:	mov	w4, #0x9                   	// #9
   36d74:	mov	w3, #0x3                   	// #3
   36d78:	mov	w2, #0x0                   	// #0
   36d7c:	bl	361c0 <init_disassemble_info@@Base+0x110>
   36d80:	ldr	w0, [x21, #212]
   36d84:	cmp	w0, #0x2
   36d88:	b.gt	36e08 <aarch64_ins_ldst_elemlist@@Base+0x1b8>
   36d8c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   36d90:	add	x3, x3, #0xce8
   36d94:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   36d98:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   36d9c:	add	x3, x3, #0x60
   36da0:	add	x1, x1, #0x610
   36da4:	add	x0, x0, #0x6c0
   36da8:	mov	w2, #0x169                 	// #361
   36dac:	bl	35ac0 <__assert_fail@plt>
   36db0:	ldr	x1, [x1, #24]
   36db4:	mov	w21, #0x2                   	// #2
   36db8:	lsl	w1, w1, #2
   36dbc:	b	36ce4 <aarch64_ins_ldst_elemlist@@Base+0x94>
   36dc0:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   36dc4:	add	x3, x3, #0xce8
   36dc8:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   36dcc:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   36dd0:	add	x3, x3, #0xb8
   36dd4:	add	x1, x1, #0x658
   36dd8:	add	x0, x0, #0x870
   36ddc:	mov	w2, #0x133                 	// #307
   36de0:	bl	35ac0 <__assert_fail@plt>
   36de4:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   36de8:	add	x3, x3, #0xce8
   36dec:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   36df0:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   36df4:	add	x3, x3, #0xb8
   36df8:	add	x1, x1, #0x658
   36dfc:	add	x0, x0, #0x778
   36e00:	mov	w2, #0x117                 	// #279
   36e04:	bl	35ac0 <__assert_fail@plt>
   36e08:	ldr	w1, [x21, #208]
   36e0c:	mov	w21, #0x0                   	// #0
   36e10:	add	w1, w1, #0x1
   36e14:	b	36d18 <aarch64_ins_ldst_elemlist@@Base+0xc8>

0000000000036e18 <aarch64_ins_advsimd_imm_shift@@Base>:
   36e18:	stp	x29, x30, [sp, #-48]!
   36e1c:	mov	x29, sp
   36e20:	stp	x19, x20, [sp, #16]
   36e24:	mov	x20, x3
   36e28:	mov	x19, x1
   36e2c:	str	x21, [sp, #32]
   36e30:	mov	x21, x2
   36e34:	ldrb	w0, [x1, #4]
   36e38:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   36e3c:	ldr	x1, [x20, #8]
   36e40:	ldr	w3, [x1, #16]
   36e44:	cmp	w3, #0xe
   36e48:	b.eq	36eb0 <aarch64_ins_advsimd_imm_shift@@Base+0x98>  // b.none
   36e4c:	ldr	w1, [x19]
   36e50:	sub	w2, w1, #0x2b
   36e54:	cmp	w2, #0x1
   36e58:	b.hi	36f08 <aarch64_ins_advsimd_imm_shift@@Base+0xf0>  // b.pmore
   36e5c:	cmp	w1, #0x2c
   36e60:	ldr	x1, [x19, #16]
   36e64:	b.eq	36ea0 <aarch64_ins_advsimd_imm_shift@@Base+0x88>  // b.none
   36e68:	mov	w3, #0x8                   	// #8
   36e6c:	lsl	w0, w3, w0
   36e70:	add	w1, w0, w1
   36e74:	mov	x0, x21
   36e78:	mov	w5, #0x36                  	// #54
   36e7c:	mov	w4, #0x35                  	// #53
   36e80:	mov	w3, #0x2                   	// #2
   36e84:	mov	w2, #0x0                   	// #0
   36e88:	bl	361c0 <init_disassemble_info@@Base+0x110>
   36e8c:	mov	w0, #0x1                   	// #1
   36e90:	ldp	x19, x20, [sp, #16]
   36e94:	ldr	x21, [sp, #32]
   36e98:	ldp	x29, x30, [sp], #48
   36e9c:	ret
   36ea0:	mov	w2, #0x10                  	// #16
   36ea4:	lsl	w0, w2, w0
   36ea8:	sub	w1, w0, w1
   36eac:	b	36e74 <aarch64_ins_advsimd_imm_shift@@Base+0x5c>
   36eb0:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   36eb4:	ldr	w3, [x1, #12]
   36eb8:	ldr	x2, [x2, #3944]
   36ebc:	ldp	w4, w5, [x2, #88]
   36ec0:	cmp	w4, #0x0
   36ec4:	sub	w1, w5, #0x1
   36ec8:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   36ecc:	b.hi	36f2c <aarch64_ins_advsimd_imm_shift@@Base+0x114>  // b.pmore
   36ed0:	add	w1, w4, w5
   36ed4:	cmp	w1, #0x20
   36ed8:	b.gt	36f2c <aarch64_ins_advsimd_imm_shift@@Base+0x114>
   36edc:	mov	w1, #0xffffffff            	// #-1
   36ee0:	ldr	w2, [x21]
   36ee4:	lsl	w1, w1, w5
   36ee8:	bic	w1, w0, w1
   36eec:	and	w1, w1, #0x1
   36ef0:	lsr	w0, w0, #1
   36ef4:	lsl	w1, w1, w4
   36ef8:	bic	w1, w1, w3
   36efc:	orr	w1, w2, w1
   36f00:	str	w1, [x21]
   36f04:	b	36e4c <aarch64_ins_advsimd_imm_shift@@Base+0x34>
   36f08:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   36f0c:	add	x3, x3, #0xce8
   36f10:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   36f14:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   36f18:	add	x3, x3, #0xd8
   36f1c:	add	x1, x1, #0x658
   36f20:	add	x0, x0, #0x790
   36f24:	mov	w2, #0x15a                 	// #346
   36f28:	bl	35ac0 <__assert_fail@plt>
   36f2c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   36f30:	add	x3, x3, #0xce8
   36f34:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   36f38:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   36f3c:	add	x3, x3, #0x60
   36f40:	add	x1, x1, #0x610
   36f44:	add	x0, x0, #0x6c0
   36f48:	mov	w2, #0x169                 	// #361
   36f4c:	bl	35ac0 <__assert_fail@plt>

0000000000036f50 <aarch64_ins_imm@@Base>:
   36f50:	ldr	x1, [x1, #16]
   36f54:	ldr	w4, [x0, #16]
   36f58:	ldr	w3, [x0, #32]
   36f5c:	asr	x5, x1, #2
   36f60:	tst	x4, #0x8
   36f64:	csel	x1, x5, x1, ne  // ne = any
   36f68:	tst	x4, #0x200
   36f6c:	asr	x4, x1, #4
   36f70:	csel	x1, x4, x1, ne  // ne = any
   36f74:	cbnz	w3, 36f98 <aarch64_ins_imm@@Base+0x48>
   36f78:	ldr	w3, [x0, #28]
   36f7c:	cbnz	w3, 36ff4 <aarch64_ins_imm@@Base+0xa4>
   36f80:	ldr	w3, [x0, #24]
   36f84:	cbnz	w3, 37050 <aarch64_ins_imm@@Base+0x100>
   36f88:	ldr	w0, [x0, #20]
   36f8c:	cbnz	w0, 370ac <aarch64_ins_imm@@Base+0x15c>
   36f90:	mov	w0, #0x1                   	// #1
   36f94:	ret
   36f98:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   36f9c:	ubfiz	x3, x3, #3, #32
   36fa0:	ldr	x4, [x4, #3944]
   36fa4:	add	x6, x3, x4
   36fa8:	ldr	w4, [x3, x4]
   36fac:	ldr	w5, [x6, #4]
   36fb0:	cmp	w4, #0x0
   36fb4:	sub	w3, w5, #0x1
   36fb8:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   36fbc:	b.hi	37104 <aarch64_ins_imm@@Base+0x1b4>  // b.pmore
   36fc0:	add	w3, w5, w4
   36fc4:	cmp	w3, #0x20
   36fc8:	b.gt	37104 <aarch64_ins_imm@@Base+0x1b4>
   36fcc:	mov	w3, #0xffffffff            	// #-1
   36fd0:	lsl	w3, w3, w5
   36fd4:	bic	w3, w1, w3
   36fd8:	lsr	w1, w1, w5
   36fdc:	ldr	w5, [x2]
   36fe0:	lsl	w3, w3, w4
   36fe4:	orr	w3, w5, w3
   36fe8:	str	w3, [x2]
   36fec:	ldr	w3, [x0, #28]
   36ff0:	cbz	w3, 36f80 <aarch64_ins_imm@@Base+0x30>
   36ff4:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   36ff8:	ubfiz	x3, x3, #3, #32
   36ffc:	ldr	x4, [x4, #3944]
   37000:	add	x6, x3, x4
   37004:	ldr	w5, [x3, x4]
   37008:	ldr	w4, [x6, #4]
   3700c:	cmp	w5, #0x0
   37010:	sub	w3, w4, #0x1
   37014:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   37018:	b.hi	37104 <aarch64_ins_imm@@Base+0x1b4>  // b.pmore
   3701c:	add	w3, w5, w4
   37020:	cmp	w3, #0x20
   37024:	b.gt	37104 <aarch64_ins_imm@@Base+0x1b4>
   37028:	mov	w3, #0xffffffff            	// #-1
   3702c:	lsl	w3, w3, w4
   37030:	bic	w3, w1, w3
   37034:	lsr	w1, w1, w4
   37038:	ldr	w4, [x2]
   3703c:	lsl	w3, w3, w5
   37040:	orr	w3, w4, w3
   37044:	str	w3, [x2]
   37048:	ldr	w3, [x0, #24]
   3704c:	cbz	w3, 36f88 <aarch64_ins_imm@@Base+0x38>
   37050:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   37054:	ubfiz	x3, x3, #3, #32
   37058:	ldr	x4, [x4, #3944]
   3705c:	add	x6, x3, x4
   37060:	ldr	w5, [x3, x4]
   37064:	ldr	w4, [x6, #4]
   37068:	cmp	w5, #0x0
   3706c:	sub	w3, w4, #0x1
   37070:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   37074:	b.hi	37104 <aarch64_ins_imm@@Base+0x1b4>  // b.pmore
   37078:	add	w3, w5, w4
   3707c:	cmp	w3, #0x20
   37080:	b.gt	37104 <aarch64_ins_imm@@Base+0x1b4>
   37084:	mov	w3, #0xffffffff            	// #-1
   37088:	lsl	w3, w3, w4
   3708c:	bic	w3, w1, w3
   37090:	lsr	w1, w1, w4
   37094:	ldr	w4, [x2]
   37098:	lsl	w3, w3, w5
   3709c:	orr	w3, w4, w3
   370a0:	str	w3, [x2]
   370a4:	ldr	w0, [x0, #20]
   370a8:	cbz	w0, 36f90 <aarch64_ins_imm@@Base+0x40>
   370ac:	adrp	x3, a6000 <aarch64_operands@@Base+0x16bd0>
   370b0:	ubfiz	x0, x0, #3, #32
   370b4:	ldr	x3, [x3, #3944]
   370b8:	add	x5, x0, x3
   370bc:	ldr	w4, [x0, x3]
   370c0:	ldr	w5, [x5, #4]
   370c4:	cmp	w4, #0x0
   370c8:	sub	w0, w5, #0x1
   370cc:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   370d0:	b.hi	37104 <aarch64_ins_imm@@Base+0x1b4>  // b.pmore
   370d4:	add	w0, w4, w5
   370d8:	cmp	w0, #0x20
   370dc:	b.gt	37104 <aarch64_ins_imm@@Base+0x1b4>
   370e0:	mov	w0, #0xffffffff            	// #-1
   370e4:	ldr	w3, [x2]
   370e8:	lsl	w0, w0, w5
   370ec:	bic	w1, w1, w0
   370f0:	mov	w0, #0x1                   	// #1
   370f4:	lsl	w1, w1, w4
   370f8:	orr	w1, w3, w1
   370fc:	str	w1, [x2]
   37100:	ret
   37104:	stp	x29, x30, [sp, #-16]!
   37108:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3710c:	add	x3, x3, #0xce8
   37110:	mov	x29, sp
   37114:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   37118:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3711c:	add	x3, x3, #0x60
   37120:	add	x1, x1, #0x610
   37124:	add	x0, x0, #0x6c0
   37128:	mov	w2, #0x169                 	// #361
   3712c:	bl	35ac0 <__assert_fail@plt>

0000000000037130 <aarch64_ins_imm_half@@Base>:
   37130:	stp	x29, x30, [sp, #-32]!
   37134:	mov	x29, sp
   37138:	stp	x19, x20, [sp, #16]
   3713c:	mov	x20, x1
   37140:	mov	x19, x2
   37144:	bl	357e0 <aarch64_ins_imm@plt>
   37148:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3714c:	ldr	x2, [x20, #40]
   37150:	ldr	x0, [x0, #3944]
   37154:	ldr	w3, [x0, #256]
   37158:	ldr	w0, [x0, #260]
   3715c:	cmp	w3, #0x0
   37160:	sub	w1, w0, #0x1
   37164:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   37168:	b.hi	371a8 <aarch64_ins_imm_half@@Base+0x78>  // b.pmore
   3716c:	add	w1, w3, w0
   37170:	cmp	w1, #0x20
   37174:	b.gt	371a8 <aarch64_ins_imm_half@@Base+0x78>
   37178:	asr	x2, x2, #4
   3717c:	mov	w1, #0xffffffff            	// #-1
   37180:	ldr	w4, [x19]
   37184:	lsl	w1, w1, w0
   37188:	bic	w1, w2, w1
   3718c:	mov	w0, #0x1                   	// #1
   37190:	lsl	w1, w1, w3
   37194:	orr	w1, w4, w1
   37198:	str	w1, [x19]
   3719c:	ldp	x19, x20, [sp, #16]
   371a0:	ldp	x29, x30, [sp], #32
   371a4:	ret
   371a8:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   371ac:	add	x3, x3, #0xce8
   371b0:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   371b4:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   371b8:	add	x3, x3, #0x60
   371bc:	add	x1, x1, #0x610
   371c0:	add	x0, x0, #0x6c0
   371c4:	mov	w2, #0x169                 	// #361
   371c8:	bl	35ac0 <__assert_fail@plt>
   371cc:	nop

00000000000371d0 <aarch64_ins_advsimd_imm_modified@@Base>:
   371d0:	stp	x29, x30, [sp, #-64]!
   371d4:	mov	x29, sp
   371d8:	ldrb	w0, [x1, #24]
   371dc:	stp	x19, x20, [sp, #16]
   371e0:	mov	x19, x2
   371e4:	stp	x21, x22, [sp, #32]
   371e8:	ldr	w21, [x1, #32]
   371ec:	ldr	x20, [x1, #16]
   371f0:	ldr	x22, [x1, #40]
   371f4:	str	x23, [sp, #48]
   371f8:	ldrb	w23, [x3, #28]
   371fc:	tbnz	w0, #0, 37214 <aarch64_ins_advsimd_imm_modified@@Base+0x44>
   37200:	mov	w0, w23
   37204:	bl	35680 <aarch64_get_qualifier_esize@plt>
   37208:	and	w0, w0, #0xff
   3720c:	cmp	w0, #0x8
   37210:	b.eq	37314 <aarch64_ins_advsimd_imm_modified@@Base+0x144>  // b.none
   37214:	mov	w1, w20
   37218:	mov	x0, x19
   3721c:	mov	w5, #0x4                   	// #4
   37220:	mov	w4, #0x3                   	// #3
   37224:	mov	w3, #0x2                   	// #2
   37228:	mov	w2, #0x0                   	// #0
   3722c:	bl	361c0 <init_disassemble_info@@Base+0x110>
   37230:	cbz	w21, 3728c <aarch64_ins_advsimd_imm_modified@@Base+0xbc>
   37234:	and	w20, w21, #0xfffffffb
   37238:	cmp	w20, #0x1
   3723c:	b.ne	37374 <aarch64_ins_advsimd_imm_modified@@Base+0x1a4>  // b.any
   37240:	cmp	w21, #0x5
   37244:	b.eq	372a4 <aarch64_ins_advsimd_imm_modified@@Base+0xd4>  // b.none
   37248:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3724c:	ldr	x0, [x0, #3944]
   37250:	ldr	w1, [x0, #204]
   37254:	cmp	w1, #0x0
   37258:	b.le	372f0 <aarch64_ins_advsimd_imm_modified@@Base+0x120>
   3725c:	ldr	w1, [x0, #200]
   37260:	asr	w22, w22, #4
   37264:	mov	w2, w20
   37268:	tbnz	w1, #31, 372f0 <aarch64_ins_advsimd_imm_modified@@Base+0x120>
   3726c:	add	w2, w1, w2
   37270:	cmp	w2, #0x20
   37274:	b.gt	372f0 <aarch64_ins_advsimd_imm_modified@@Base+0x120>
   37278:	ldr	w0, [x19]
   3727c:	and	w20, w20, w22
   37280:	lsl	w20, w20, w1
   37284:	orr	w20, w0, w20
   37288:	str	w20, [x19]
   3728c:	mov	w0, #0x1                   	// #1
   37290:	ldp	x19, x20, [sp, #16]
   37294:	ldp	x21, x22, [sp, #32]
   37298:	ldr	x23, [sp, #48]
   3729c:	ldp	x29, x30, [sp], #64
   372a0:	ret
   372a4:	mov	w0, w23
   372a8:	bl	35680 <aarch64_get_qualifier_esize@plt>
   372ac:	and	w0, w0, #0xff
   372b0:	sub	w1, w0, #0x1
   372b4:	and	w1, w1, #0xff
   372b8:	cmp	w1, #0x1
   372bc:	ccmp	w0, #0x4, #0x4, hi  // hi = pmore
   372c0:	b.ne	37398 <aarch64_ins_advsimd_imm_modified@@Base+0x1c8>  // b.any
   372c4:	cmp	w0, #0x1
   372c8:	b.eq	3728c <aarch64_ins_advsimd_imm_modified@@Base+0xbc>  // b.none
   372cc:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   372d0:	cmp	w0, #0x4
   372d4:	asr	w22, w22, #3
   372d8:	ldr	x0, [x1, #3944]
   372dc:	ldr	w1, [x0, #204]
   372e0:	b.eq	37358 <aarch64_ins_advsimd_imm_modified@@Base+0x188>  // b.none
   372e4:	cmp	w1, #0x1
   372e8:	b.gt	37348 <aarch64_ins_advsimd_imm_modified@@Base+0x178>
   372ec:	nop
   372f0:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   372f4:	add	x3, x3, #0xce8
   372f8:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   372fc:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   37300:	add	x3, x3, #0x60
   37304:	add	x1, x1, #0x610
   37308:	add	x0, x0, #0x6c0
   3730c:	mov	w2, #0x169                 	// #361
   37310:	bl	35ac0 <__assert_fail@plt>
   37314:	mov	x0, x20
   37318:	bl	35760 <aarch64_shrink_expanded_imm8@plt>
   3731c:	sxtw	x20, w0
   37320:	tbz	w0, #31, 37214 <aarch64_ins_advsimd_imm_modified@@Base+0x44>
   37324:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   37328:	add	x3, x3, #0xce8
   3732c:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   37330:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   37334:	add	x3, x3, #0xf8
   37338:	add	x1, x1, #0x658
   3733c:	add	x0, x0, #0x7e0
   37340:	mov	w2, #0x1ae                 	// #430
   37344:	bl	35ac0 <__assert_fail@plt>
   37348:	ldr	w1, [x0, #200]
   3734c:	mov	w2, w20
   37350:	add	w1, w1, #0x1
   37354:	b	37268 <aarch64_ins_advsimd_imm_modified@@Base+0x98>
   37358:	cmp	w1, #0x2
   3735c:	b.le	372f0 <aarch64_ins_advsimd_imm_modified@@Base+0x120>
   37360:	ldr	w1, [x0, #200]
   37364:	mov	w20, #0x3                   	// #3
   37368:	mov	w2, #0x2                   	// #2
   3736c:	add	w1, w1, #0x1
   37370:	b	37268 <aarch64_ins_advsimd_imm_modified@@Base+0x98>
   37374:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   37378:	add	x3, x3, #0xce8
   3737c:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   37380:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   37384:	add	x3, x3, #0xf8
   37388:	add	x1, x1, #0x658
   3738c:	add	x0, x0, #0x7f0
   37390:	mov	w2, #0x1b6                 	// #438
   37394:	bl	35ac0 <__assert_fail@plt>
   37398:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3739c:	add	x3, x3, #0xce8
   373a0:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   373a4:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   373a8:	add	x3, x3, #0xf8
   373ac:	add	x1, x1, #0x658
   373b0:	add	x0, x0, #0x828
   373b4:	mov	w2, #0x1bb                 	// #443
   373b8:	bl	35ac0 <__assert_fail@plt>
   373bc:	nop

00000000000373c0 <aarch64_ins_fpimm@@Base>:
   373c0:	ldr	w3, [x0, #32]
   373c4:	ldr	x4, [x1, #16]
   373c8:	mov	w1, w4
   373cc:	cbnz	w3, 373f0 <aarch64_ins_fpimm@@Base+0x30>
   373d0:	ldr	w3, [x0, #28]
   373d4:	cbnz	w3, 3744c <aarch64_ins_fpimm@@Base+0x8c>
   373d8:	ldr	w3, [x0, #24]
   373dc:	cbnz	w3, 374a8 <aarch64_ins_fpimm@@Base+0xe8>
   373e0:	ldr	w0, [x0, #20]
   373e4:	cbnz	w0, 37504 <aarch64_ins_fpimm@@Base+0x144>
   373e8:	mov	w0, #0x1                   	// #1
   373ec:	ret
   373f0:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   373f4:	ubfiz	x3, x3, #3, #32
   373f8:	ldr	x1, [x1, #3944]
   373fc:	add	x7, x3, x1
   37400:	ldr	w5, [x3, x1]
   37404:	ldr	w6, [x7, #4]
   37408:	cmp	w5, #0x0
   3740c:	sub	w1, w6, #0x1
   37410:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   37414:	b.hi	3755c <aarch64_ins_fpimm@@Base+0x19c>  // b.pmore
   37418:	add	w1, w6, w5
   3741c:	cmp	w1, #0x20
   37420:	b.gt	3755c <aarch64_ins_fpimm@@Base+0x19c>
   37424:	mov	w3, #0xffffffff            	// #-1
   37428:	lsr	w1, w4, w6
   3742c:	lsl	w3, w3, w6
   37430:	ldr	w6, [x2]
   37434:	bic	w3, w4, w3
   37438:	lsl	w3, w3, w5
   3743c:	orr	w3, w6, w3
   37440:	str	w3, [x2]
   37444:	ldr	w3, [x0, #28]
   37448:	cbz	w3, 373d8 <aarch64_ins_fpimm@@Base+0x18>
   3744c:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   37450:	ubfiz	x3, x3, #3, #32
   37454:	ldr	x4, [x4, #3944]
   37458:	add	x6, x3, x4
   3745c:	ldr	w5, [x3, x4]
   37460:	ldr	w4, [x6, #4]
   37464:	cmp	w5, #0x0
   37468:	sub	w3, w4, #0x1
   3746c:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   37470:	b.hi	3755c <aarch64_ins_fpimm@@Base+0x19c>  // b.pmore
   37474:	add	w3, w5, w4
   37478:	cmp	w3, #0x20
   3747c:	b.gt	3755c <aarch64_ins_fpimm@@Base+0x19c>
   37480:	mov	w3, #0xffffffff            	// #-1
   37484:	lsl	w3, w3, w4
   37488:	bic	w3, w1, w3
   3748c:	lsr	w1, w1, w4
   37490:	ldr	w4, [x2]
   37494:	lsl	w3, w3, w5
   37498:	orr	w3, w4, w3
   3749c:	str	w3, [x2]
   374a0:	ldr	w3, [x0, #24]
   374a4:	cbz	w3, 373e0 <aarch64_ins_fpimm@@Base+0x20>
   374a8:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   374ac:	ubfiz	x3, x3, #3, #32
   374b0:	ldr	x4, [x4, #3944]
   374b4:	add	x6, x3, x4
   374b8:	ldr	w5, [x3, x4]
   374bc:	ldr	w4, [x6, #4]
   374c0:	cmp	w5, #0x0
   374c4:	sub	w3, w4, #0x1
   374c8:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   374cc:	b.hi	3755c <aarch64_ins_fpimm@@Base+0x19c>  // b.pmore
   374d0:	add	w3, w5, w4
   374d4:	cmp	w3, #0x20
   374d8:	b.gt	3755c <aarch64_ins_fpimm@@Base+0x19c>
   374dc:	mov	w3, #0xffffffff            	// #-1
   374e0:	lsl	w3, w3, w4
   374e4:	bic	w3, w1, w3
   374e8:	lsr	w1, w1, w4
   374ec:	ldr	w4, [x2]
   374f0:	lsl	w3, w3, w5
   374f4:	orr	w3, w4, w3
   374f8:	str	w3, [x2]
   374fc:	ldr	w0, [x0, #20]
   37500:	cbz	w0, 373e8 <aarch64_ins_fpimm@@Base+0x28>
   37504:	adrp	x3, a6000 <aarch64_operands@@Base+0x16bd0>
   37508:	ubfiz	x0, x0, #3, #32
   3750c:	ldr	x3, [x3, #3944]
   37510:	add	x5, x0, x3
   37514:	ldr	w4, [x0, x3]
   37518:	ldr	w5, [x5, #4]
   3751c:	cmp	w4, #0x0
   37520:	sub	w0, w5, #0x1
   37524:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   37528:	b.hi	3755c <aarch64_ins_fpimm@@Base+0x19c>  // b.pmore
   3752c:	add	w0, w4, w5
   37530:	cmp	w0, #0x20
   37534:	b.gt	3755c <aarch64_ins_fpimm@@Base+0x19c>
   37538:	mov	w0, #0xffffffff            	// #-1
   3753c:	ldr	w3, [x2]
   37540:	lsl	w0, w0, w5
   37544:	bic	w1, w1, w0
   37548:	mov	w0, #0x1                   	// #1
   3754c:	lsl	w1, w1, w4
   37550:	orr	w1, w3, w1
   37554:	str	w1, [x2]
   37558:	ret
   3755c:	stp	x29, x30, [sp, #-16]!
   37560:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   37564:	add	x3, x3, #0xce8
   37568:	mov	x29, sp
   3756c:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   37570:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   37574:	add	x3, x3, #0x60
   37578:	add	x1, x1, #0x610
   3757c:	add	x0, x0, #0x6c0
   37580:	mov	w2, #0x169                 	// #361
   37584:	bl	35ac0 <__assert_fail@plt>

0000000000037588 <aarch64_ins_imm_rotate1@@Base>:
   37588:	stp	x29, x30, [sp, #-16]!
   3758c:	mov	x4, #0x2d83                	// #11651
   37590:	movk	x4, #0x82d8, lsl #16
   37594:	mov	x29, sp
   37598:	ldr	x1, [x1, #16]
   3759c:	movk	x4, #0xd82d, lsl #32
   375a0:	movk	x4, #0x2d82, lsl #48
   375a4:	sub	x1, x1, #0x5a
   375a8:	smulh	x4, x1, x4
   375ac:	asr	x4, x4, #5
   375b0:	sub	x1, x4, x1, asr #63
   375b4:	cmp	x1, #0x1
   375b8:	b.hi	3764c <aarch64_ins_imm_rotate1@@Base+0xc4>  // b.pmore
   375bc:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   375c0:	ldr	w5, [x0, #20]
   375c4:	ldr	x6, [x3, #8]
   375c8:	ldr	x0, [x4, #3944]
   375cc:	lsl	x3, x5, #3
   375d0:	ldr	w5, [x6, #12]
   375d4:	add	x4, x3, x0
   375d8:	ldr	w3, [x3, x0]
   375dc:	ldr	w4, [x4, #4]
   375e0:	cmp	w3, #0x0
   375e4:	sub	w0, w4, #0x1
   375e8:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   375ec:	b.hi	37628 <aarch64_ins_imm_rotate1@@Base+0xa0>  // b.pmore
   375f0:	add	w0, w3, w4
   375f4:	cmp	w0, #0x20
   375f8:	b.gt	37628 <aarch64_ins_imm_rotate1@@Base+0xa0>
   375fc:	mov	w0, #0xffffffff            	// #-1
   37600:	ldr	w6, [x2]
   37604:	lsl	w0, w0, w4
   37608:	bic	w1, w1, w0
   3760c:	mov	w0, #0x1                   	// #1
   37610:	lsl	w1, w1, w3
   37614:	bic	w1, w1, w5
   37618:	orr	w1, w6, w1
   3761c:	str	w1, [x2]
   37620:	ldp	x29, x30, [sp], #16
   37624:	ret
   37628:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3762c:	add	x3, x3, #0xce8
   37630:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   37634:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   37638:	add	x3, x3, #0x60
   3763c:	add	x1, x1, #0x610
   37640:	add	x0, x0, #0x6c0
   37644:	mov	w2, #0x169                 	// #361
   37648:	bl	35ac0 <__assert_fail@plt>
   3764c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   37650:	add	x3, x3, #0xce8
   37654:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   37658:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3765c:	add	x3, x3, #0x120
   37660:	add	x1, x1, #0x658
   37664:	add	x0, x0, #0x850
   37668:	mov	w2, #0x1e4                 	// #484
   3766c:	bl	35ac0 <__assert_fail@plt>

0000000000037670 <aarch64_ins_imm_rotate2@@Base>:
   37670:	stp	x29, x30, [sp, #-16]!
   37674:	mov	x4, #0x2d83                	// #11651
   37678:	movk	x4, #0x82d8, lsl #16
   3767c:	mov	x29, sp
   37680:	ldr	x1, [x1, #16]
   37684:	movk	x4, #0xd82d, lsl #32
   37688:	movk	x4, #0x2d82, lsl #48
   3768c:	smulh	x4, x1, x4
   37690:	asr	x4, x4, #4
   37694:	sub	x4, x4, x1, asr #63
   37698:	cmp	x4, #0x3
   3769c:	b.hi	37730 <aarch64_ins_imm_rotate2@@Base+0xc0>  // b.pmore
   376a0:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   376a4:	ldr	w5, [x0, #20]
   376a8:	ldr	x6, [x3, #8]
   376ac:	ldr	x0, [x1, #3944]
   376b0:	lsl	x3, x5, #3
   376b4:	ldr	w5, [x6, #12]
   376b8:	add	x1, x3, x0
   376bc:	ldr	w3, [x3, x0]
   376c0:	ldr	w0, [x1, #4]
   376c4:	cmp	w3, #0x0
   376c8:	sub	w1, w0, #0x1
   376cc:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   376d0:	b.hi	3770c <aarch64_ins_imm_rotate2@@Base+0x9c>  // b.pmore
   376d4:	add	w1, w3, w0
   376d8:	cmp	w1, #0x20
   376dc:	b.gt	3770c <aarch64_ins_imm_rotate2@@Base+0x9c>
   376e0:	mov	w1, #0xffffffff            	// #-1
   376e4:	ldr	w6, [x2]
   376e8:	lsl	w1, w1, w0
   376ec:	bic	w1, w4, w1
   376f0:	mov	w0, #0x1                   	// #1
   376f4:	lsl	w1, w1, w3
   376f8:	bic	w1, w1, w5
   376fc:	orr	w1, w6, w1
   37700:	str	w1, [x2]
   37704:	ldp	x29, x30, [sp], #16
   37708:	ret
   3770c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   37710:	add	x3, x3, #0xce8
   37714:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   37718:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3771c:	add	x3, x3, #0x60
   37720:	add	x1, x1, #0x610
   37724:	add	x0, x0, #0x6c0
   37728:	mov	w2, #0x169                 	// #361
   3772c:	bl	35ac0 <__assert_fail@plt>
   37730:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   37734:	add	x3, x3, #0xce8
   37738:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3773c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   37740:	add	x3, x3, #0x138
   37744:	add	x1, x1, #0x658
   37748:	add	x0, x0, #0x860
   3774c:	mov	w2, #0x1f1                 	// #497
   37750:	bl	35ac0 <__assert_fail@plt>
   37754:	nop

0000000000037758 <aarch64_ins_fbits@@Base>:
   37758:	adrp	x3, a6000 <aarch64_operands@@Base+0x16bd0>
   3775c:	ldr	w0, [x0, #20]
   37760:	ldr	x1, [x1, #16]
   37764:	mov	w4, #0x40                  	// #64
   37768:	ldr	x3, [x3, #3944]
   3776c:	lsl	x0, x0, #3
   37770:	sub	w4, w4, w1
   37774:	add	x5, x0, x3
   37778:	ldr	w3, [x0, x3]
   3777c:	ldr	w0, [x5, #4]
   37780:	cmp	w3, #0x0
   37784:	sub	w1, w0, #0x1
   37788:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   3778c:	b.hi	377c0 <aarch64_ins_fbits@@Base+0x68>  // b.pmore
   37790:	add	w1, w3, w0
   37794:	cmp	w1, #0x20
   37798:	b.gt	377c0 <aarch64_ins_fbits@@Base+0x68>
   3779c:	mov	w1, #0xffffffff            	// #-1
   377a0:	ldr	w5, [x2]
   377a4:	lsl	w1, w1, w0
   377a8:	bic	w1, w4, w1
   377ac:	mov	w0, #0x1                   	// #1
   377b0:	lsl	w1, w1, w3
   377b4:	orr	w1, w5, w1
   377b8:	str	w1, [x2]
   377bc:	ret
   377c0:	stp	x29, x30, [sp, #-16]!
   377c4:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   377c8:	add	x3, x3, #0xce8
   377cc:	mov	x29, sp
   377d0:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   377d4:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   377d8:	add	x3, x3, #0x60
   377dc:	add	x1, x1, #0x610
   377e0:	add	x0, x0, #0x6c0
   377e4:	mov	w2, #0x169                 	// #361
   377e8:	bl	35ac0 <__assert_fail@plt>
   377ec:	nop

00000000000377f0 <aarch64_ins_aimm@@Base>:
   377f0:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   377f4:	ldr	w3, [x0, #20]
   377f8:	ldr	x6, [x1, #40]
   377fc:	ldr	x5, [x5, #3944]
   37800:	lsl	x3, x3, #3
   37804:	cmp	x6, #0x0
   37808:	add	x4, x3, x5
   3780c:	cset	w7, ne  // ne = any
   37810:	ldr	w6, [x3, x5]
   37814:	ldr	w3, [x4, #4]
   37818:	cmp	w6, #0x0
   3781c:	sub	w4, w3, #0x1
   37820:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   37824:	b.hi	378a0 <aarch64_ins_aimm@@Base+0xb0>  // b.pmore
   37828:	add	w4, w6, w3
   3782c:	cmp	w4, #0x20
   37830:	b.gt	378a0 <aarch64_ins_aimm@@Base+0xb0>
   37834:	mov	w4, #0xffffffff            	// #-1
   37838:	ldr	w8, [x2]
   3783c:	lsl	w3, w4, w3
   37840:	bic	w3, w7, w3
   37844:	lsl	w3, w3, w6
   37848:	orr	w3, w3, w8
   3784c:	str	w3, [x2]
   37850:	ldr	w0, [x0, #24]
   37854:	ldr	x7, [x1, #16]
   37858:	lsl	x0, x0, #3
   3785c:	add	x6, x0, x5
   37860:	ldr	w1, [x0, x5]
   37864:	ldr	w0, [x6, #4]
   37868:	cmp	w1, #0x0
   3786c:	add	w5, w0, w4
   37870:	ccmp	w5, #0x1e, #0x2, ge  // ge = tcont
   37874:	b.hi	378a0 <aarch64_ins_aimm@@Base+0xb0>  // b.pmore
   37878:	add	w5, w1, w0
   3787c:	cmp	w5, #0x20
   37880:	b.gt	378a0 <aarch64_ins_aimm@@Base+0xb0>
   37884:	lsl	w4, w4, w0
   37888:	bic	w4, w7, w4
   3788c:	mov	w0, #0x1                   	// #1
   37890:	lsl	w4, w4, w1
   37894:	orr	w3, w4, w3
   37898:	str	w3, [x2]
   3789c:	ret
   378a0:	stp	x29, x30, [sp, #-16]!
   378a4:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   378a8:	add	x3, x3, #0xce8
   378ac:	mov	x29, sp
   378b0:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   378b4:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   378b8:	add	x3, x3, #0x60
   378bc:	add	x1, x1, #0x610
   378c0:	add	x0, x0, #0x6c0
   378c4:	mov	w2, #0x169                 	// #361
   378c8:	bl	35ac0 <__assert_fail@plt>
   378cc:	nop

00000000000378d0 <aarch64_ins_limm@@Base>:
   378d0:	stp	x29, x30, [sp, #-64]!
   378d4:	mov	x29, sp
   378d8:	stp	x19, x20, [sp, #16]
   378dc:	mov	x20, x2
   378e0:	mov	x19, x0
   378e4:	stp	x21, x22, [sp, #32]
   378e8:	ldr	x2, [x3, #8]
   378ec:	ldrb	w0, [x3, #28]
   378f0:	ldr	x21, [x1, #16]
   378f4:	ldr	w22, [x2, #20]
   378f8:	bl	35680 <aarch64_get_qualifier_esize@plt>
   378fc:	and	w1, w0, #0xff
   37900:	cmp	w22, #0x2a
   37904:	add	x2, sp, #0x3c
   37908:	cinv	x0, x21, eq  // eq = none
   3790c:	bl	35400 <aarch64_logical_immediate_p@plt>
   37910:	cbz	w0, 37944 <aarch64_ins_limm@@Base+0x74>
   37914:	ldp	w6, w5, [x19, #20]
   37918:	mov	x0, x20
   3791c:	ldr	w4, [x19, #28]
   37920:	mov	w3, #0x3                   	// #3
   37924:	ldr	w1, [sp, #60]
   37928:	mov	w2, #0x0                   	// #0
   3792c:	bl	361c0 <init_disassemble_info@@Base+0x110>
   37930:	mov	w0, #0x1                   	// #1
   37934:	ldp	x19, x20, [sp, #16]
   37938:	ldp	x21, x22, [sp, #32]
   3793c:	ldp	x29, x30, [sp], #64
   37940:	ret
   37944:	bl	36160 <init_disassemble_info@@Base+0xb0>

0000000000037948 <aarch64_ins_inv_limm@@Base>:
   37948:	stp	x29, x30, [sp, #-64]!
   3794c:	mov	x29, sp
   37950:	stp	x19, x20, [sp, #16]
   37954:	mov	x19, x0
   37958:	mov	x20, x2
   3795c:	str	x21, [sp, #32]
   37960:	ldr	x21, [x1, #16]
   37964:	ldrb	w0, [x3, #28]
   37968:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3796c:	and	w1, w0, #0xff
   37970:	add	x2, sp, #0x3c
   37974:	mvn	x0, x21
   37978:	bl	35400 <aarch64_logical_immediate_p@plt>
   3797c:	cbz	w0, 379b0 <aarch64_ins_inv_limm@@Base+0x68>
   37980:	ldp	w6, w5, [x19, #20]
   37984:	mov	x0, x20
   37988:	ldr	w4, [x19, #28]
   3798c:	mov	w3, #0x3                   	// #3
   37990:	ldr	w1, [sp, #60]
   37994:	mov	w2, #0x0                   	// #0
   37998:	bl	361c0 <init_disassemble_info@@Base+0x110>
   3799c:	mov	w0, #0x1                   	// #1
   379a0:	ldp	x19, x20, [sp, #16]
   379a4:	ldr	x21, [sp, #32]
   379a8:	ldp	x29, x30, [sp], #64
   379ac:	ret
   379b0:	bl	36160 <init_disassemble_info@@Base+0xb0>
   379b4:	nop

00000000000379b8 <aarch64_ins_ft@@Base>:
   379b8:	stp	x29, x30, [sp, #-48]!
   379bc:	mov	x29, sp
   379c0:	ldr	w5, [x1, #8]
   379c4:	stp	x19, x20, [sp, #16]
   379c8:	str	x21, [sp, #32]
   379cc:	cbnz	w5, 37ac0 <aarch64_ins_ft@@Base+0x108>
   379d0:	mov	x21, x3
   379d4:	mov	x19, x1
   379d8:	mov	x20, x2
   379dc:	bl	35200 <aarch64_ins_regno@plt>
   379e0:	ldr	x0, [x21, #8]
   379e4:	ldr	w0, [x0, #16]
   379e8:	sub	w0, w0, #0x3d
   379ec:	cmp	w0, #0x3
   379f0:	b.hi	37a64 <aarch64_ins_ft@@Base+0xac>  // b.pmore
   379f4:	ldrb	w0, [x19, #4]
   379f8:	sub	w2, w0, #0x7
   379fc:	and	w0, w2, #0xff
   37a00:	cmp	w0, #0x2
   37a04:	b.hi	37ae4 <aarch64_ins_ft@@Base+0x12c>  // b.pmore
   37a08:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   37a0c:	ldr	x1, [x1, #3944]
   37a10:	ldr	w3, [x1, #296]
   37a14:	ldr	w1, [x1, #300]
   37a18:	cmp	w3, #0x0
   37a1c:	sub	w0, w1, #0x1
   37a20:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   37a24:	b.hi	37a9c <aarch64_ins_ft@@Base+0xe4>  // b.pmore
   37a28:	add	w0, w3, w1
   37a2c:	cmp	w0, #0x20
   37a30:	b.gt	37a9c <aarch64_ins_ft@@Base+0xe4>
   37a34:	mov	w0, #0xffffffff            	// #-1
   37a38:	ldr	w4, [x20]
   37a3c:	lsl	w0, w0, w1
   37a40:	bic	w0, w2, w0
   37a44:	ldr	x21, [sp, #32]
   37a48:	lsl	w0, w0, w3
   37a4c:	orr	w0, w4, w0
   37a50:	str	w0, [x20]
   37a54:	mov	w0, #0x1                   	// #1
   37a58:	ldp	x19, x20, [sp, #16]
   37a5c:	ldp	x29, x30, [sp], #48
   37a60:	ret
   37a64:	ldrb	w0, [x19, #4]
   37a68:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   37a6c:	mov	w1, w0
   37a70:	mov	w5, #0x22                  	// #34
   37a74:	mov	x0, x20
   37a78:	mov	w4, #0x25                  	// #37
   37a7c:	mov	w3, #0x2                   	// #2
   37a80:	mov	w2, #0x0                   	// #0
   37a84:	bl	361c0 <init_disassemble_info@@Base+0x110>
   37a88:	mov	w0, #0x1                   	// #1
   37a8c:	ldp	x19, x20, [sp, #16]
   37a90:	ldr	x21, [sp, #32]
   37a94:	ldp	x29, x30, [sp], #48
   37a98:	ret
   37a9c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   37aa0:	add	x3, x3, #0xce8
   37aa4:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   37aa8:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   37aac:	add	x3, x3, #0x60
   37ab0:	add	x1, x1, #0x610
   37ab4:	add	x0, x0, #0x6c0
   37ab8:	mov	w2, #0x169                 	// #361
   37abc:	bl	35ac0 <__assert_fail@plt>
   37ac0:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   37ac4:	add	x3, x3, #0xce8
   37ac8:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   37acc:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   37ad0:	add	x3, x3, #0x150
   37ad4:	add	x1, x1, #0x658
   37ad8:	add	x0, x0, #0x870
   37adc:	mov	w2, #0x245                 	// #581
   37ae0:	bl	35ac0 <__assert_fail@plt>
   37ae4:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   37ae8:	add	x3, x3, #0xce8
   37aec:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   37af0:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   37af4:	add	x3, x3, #0x150
   37af8:	add	x1, x1, #0x658
   37afc:	add	x0, x0, #0x870
   37b00:	mov	w2, #0x254                 	// #596
   37b04:	bl	35ac0 <__assert_fail@plt>

0000000000037b08 <aarch64_ins_addr_simple@@Base>:
   37b08:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   37b0c:	ldr	w5, [x1, #16]
   37b10:	ldr	x0, [x0, #3944]
   37b14:	ldp	w3, w0, [x0, #112]
   37b18:	cmp	w3, #0x0
   37b1c:	sub	w4, w0, #0x1
   37b20:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   37b24:	b.hi	37b58 <aarch64_ins_addr_simple@@Base+0x50>  // b.pmore
   37b28:	add	w1, w3, w0
   37b2c:	cmp	w1, #0x20
   37b30:	b.gt	37b58 <aarch64_ins_addr_simple@@Base+0x50>
   37b34:	mov	w1, #0xffffffff            	// #-1
   37b38:	ldr	w4, [x2]
   37b3c:	lsl	w1, w1, w0
   37b40:	bic	w1, w5, w1
   37b44:	mov	w0, #0x1                   	// #1
   37b48:	lsl	w1, w1, w3
   37b4c:	orr	w1, w4, w1
   37b50:	str	w1, [x2]
   37b54:	ret
   37b58:	stp	x29, x30, [sp, #-16]!
   37b5c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   37b60:	add	x3, x3, #0xce8
   37b64:	mov	x29, sp
   37b68:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   37b6c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   37b70:	add	x3, x3, #0x60
   37b74:	add	x1, x1, #0x610
   37b78:	add	x0, x0, #0x6c0
   37b7c:	mov	w2, #0x169                 	// #361
   37b80:	bl	35ac0 <__assert_fail@plt>
   37b84:	nop

0000000000037b88 <aarch64_ins_addr_regoff@@Base>:
   37b88:	stp	x29, x30, [sp, #-64]!
   37b8c:	mov	x29, sp
   37b90:	ldr	w4, [x1, #16]
   37b94:	ldr	w0, [x1, #32]
   37b98:	str	x23, [sp, #48]
   37b9c:	adrp	x23, a6000 <aarch64_operands@@Base+0x16bd0>
   37ba0:	stp	x21, x22, [sp, #32]
   37ba4:	mov	x21, x1
   37ba8:	ldr	x22, [x23, #3944]
   37bac:	stp	x19, x20, [sp, #16]
   37bb0:	mov	x20, x2
   37bb4:	ldp	w1, w3, [x22, #112]
   37bb8:	cmp	w1, #0x0
   37bbc:	sub	w2, w3, #0x1
   37bc0:	ccmp	w2, #0x1e, #0x2, ge  // ge = tcont
   37bc4:	b.hi	37cf0 <aarch64_ins_addr_regoff@@Base+0x168>  // b.pmore
   37bc8:	add	w2, w1, w3
   37bcc:	cmp	w2, #0x20
   37bd0:	b.gt	37cf0 <aarch64_ins_addr_regoff@@Base+0x168>
   37bd4:	mov	w19, #0xffffffff            	// #-1
   37bd8:	ldr	w5, [x20]
   37bdc:	lsl	w3, w19, w3
   37be0:	bic	w3, w4, w3
   37be4:	ldp	w2, w4, [x22, #224]
   37be8:	lsl	w3, w3, w1
   37bec:	orr	w3, w3, w5
   37bf0:	str	w3, [x20]
   37bf4:	cmp	w2, #0x0
   37bf8:	add	w1, w4, w19
   37bfc:	ldr	w5, [x21, #20]
   37c00:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   37c04:	b.hi	37cf0 <aarch64_ins_addr_regoff@@Base+0x168>  // b.pmore
   37c08:	add	w1, w2, w4
   37c0c:	cmp	w1, #0x20
   37c10:	b.gt	37cf0 <aarch64_ins_addr_regoff@@Base+0x168>
   37c14:	lsl	w4, w19, w4
   37c18:	bic	w4, w5, w4
   37c1c:	cmp	w0, #0x5
   37c20:	mov	w1, #0x9                   	// #9
   37c24:	lsl	w4, w4, w2
   37c28:	orr	w3, w4, w3
   37c2c:	str	w3, [x20]
   37c30:	csel	w0, w0, w1, ne  // ne = any
   37c34:	bl	35430 <aarch64_get_operand_modifier_value@plt>
   37c38:	ldp	w1, w2, [x22, #240]
   37c3c:	cmp	w1, #0x0
   37c40:	add	w3, w2, w19
   37c44:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   37c48:	b.hi	37cf0 <aarch64_ins_addr_regoff@@Base+0x168>  // b.pmore
   37c4c:	add	w3, w1, w2
   37c50:	cmp	w3, #0x20
   37c54:	b.gt	37cf0 <aarch64_ins_addr_regoff@@Base+0x168>
   37c58:	lsl	w19, w19, w2
   37c5c:	bic	w19, w0, w19
   37c60:	ldr	w0, [x20]
   37c64:	lsl	w19, w19, w1
   37c68:	orr	w19, w19, w0
   37c6c:	str	w19, [x20]
   37c70:	ldrb	w0, [x21, #4]
   37c74:	cmp	w0, #0x5
   37c78:	b.eq	37cdc <aarch64_ins_addr_regoff@@Base+0x154>  // b.none
   37c7c:	ldr	x0, [x21, #40]
   37c80:	cmp	x0, #0x0
   37c84:	cset	w4, ne  // ne = any
   37c88:	ldr	x23, [x23, #3944]
   37c8c:	ldp	w2, w3, [x23, #248]
   37c90:	cmp	w2, #0x0
   37c94:	sub	w0, w3, #0x1
   37c98:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   37c9c:	b.hi	37cf0 <aarch64_ins_addr_regoff@@Base+0x168>  // b.pmore
   37ca0:	add	w0, w2, w3
   37ca4:	cmp	w0, #0x20
   37ca8:	b.gt	37cf0 <aarch64_ins_addr_regoff@@Base+0x168>
   37cac:	mov	w1, #0xffffffff            	// #-1
   37cb0:	mov	w0, #0x1                   	// #1
   37cb4:	lsl	w1, w1, w3
   37cb8:	bic	w1, w4, w1
   37cbc:	ldp	x21, x22, [sp, #32]
   37cc0:	lsl	w1, w1, w2
   37cc4:	orr	w19, w1, w19
   37cc8:	ldr	x23, [sp, #48]
   37ccc:	str	w19, [x20]
   37cd0:	ldp	x19, x20, [sp, #16]
   37cd4:	ldp	x29, x30, [sp], #64
   37cd8:	ret
   37cdc:	ldrb	w0, [x21, #36]
   37ce0:	and	w0, w0, #0x3
   37ce4:	cmp	w0, #0x3
   37ce8:	cset	w4, eq  // eq = none
   37cec:	b	37c88 <aarch64_ins_addr_regoff@@Base+0x100>
   37cf0:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   37cf4:	add	x3, x3, #0xce8
   37cf8:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   37cfc:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   37d00:	add	x3, x3, #0x60
   37d04:	add	x1, x1, #0x610
   37d08:	add	x0, x0, #0x6c0
   37d0c:	mov	w2, #0x169                 	// #361
   37d10:	bl	35ac0 <__assert_fail@plt>
   37d14:	nop

0000000000037d18 <aarch64_ins_addr_offset@@Base>:
   37d18:	stp	x29, x30, [sp, #-16]!
   37d1c:	adrp	x6, a6000 <aarch64_operands@@Base+0x16bd0>
   37d20:	mov	x29, sp
   37d24:	ldr	w4, [x0, #20]
   37d28:	ldr	x6, [x6, #3944]
   37d2c:	lsl	x4, x4, #3
   37d30:	ldr	w7, [x1, #16]
   37d34:	add	x5, x4, x6
   37d38:	ldr	w4, [x4, x6]
   37d3c:	ldr	w3, [x5, #4]
   37d40:	cmp	w4, #0x0
   37d44:	sub	w5, w3, #0x1
   37d48:	ccmp	w5, #0x1e, #0x2, ge  // ge = tcont
   37d4c:	b.hi	37e28 <aarch64_ins_addr_offset@@Base+0x110>  // b.pmore
   37d50:	add	w5, w4, w3
   37d54:	cmp	w5, #0x20
   37d58:	b.gt	37e28 <aarch64_ins_addr_offset@@Base+0x110>
   37d5c:	mov	w5, #0xffffffff            	// #-1
   37d60:	ldr	w8, [x2]
   37d64:	lsl	w3, w5, w3
   37d68:	bic	w3, w7, w3
   37d6c:	lsl	w3, w3, w4
   37d70:	orr	w3, w3, w8
   37d74:	str	w3, [x2]
   37d78:	ldr	w7, [x0, #24]
   37d7c:	ldr	w9, [x1, #20]
   37d80:	lsl	x7, x7, #3
   37d84:	add	x8, x7, x6
   37d88:	ldr	w7, [x7, x6]
   37d8c:	ldr	w4, [x8, #4]
   37d90:	cmp	w7, #0x0
   37d94:	add	w8, w4, w5
   37d98:	ccmp	w8, #0x1e, #0x2, ge  // ge = tcont
   37d9c:	b.hi	37e28 <aarch64_ins_addr_offset@@Base+0x110>  // b.pmore
   37da0:	add	w8, w7, w4
   37da4:	cmp	w8, #0x20
   37da8:	b.gt	37e28 <aarch64_ins_addr_offset@@Base+0x110>
   37dac:	lsl	w4, w5, w4
   37db0:	bic	w4, w9, w4
   37db4:	lsl	w4, w4, w7
   37db8:	orr	w3, w4, w3
   37dbc:	str	w3, [x2]
   37dc0:	ldrb	w1, [x1, #28]
   37dc4:	tbz	w1, #1, 37e1c <aarch64_ins_addr_offset@@Base+0x104>
   37dc8:	and	w1, w1, #0xc
   37dcc:	cmp	w1, #0x4
   37dd0:	b.ne	37e4c <aarch64_ins_addr_offset@@Base+0x134>  // b.any
   37dd4:	ldr	w0, [x0, #28]
   37dd8:	lsl	x0, x0, #3
   37ddc:	add	x4, x0, x6
   37de0:	ldr	w1, [x0, x6]
   37de4:	ldr	w0, [x4, #4]
   37de8:	cmp	w1, #0x0
   37dec:	sub	w4, w0, #0x1
   37df0:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   37df4:	b.hi	37e28 <aarch64_ins_addr_offset@@Base+0x110>  // b.pmore
   37df8:	add	w4, w1, w0
   37dfc:	cmp	w4, #0x20
   37e00:	b.gt	37e28 <aarch64_ins_addr_offset@@Base+0x110>
   37e04:	lsl	w0, w5, w0
   37e08:	mvn	w0, w0
   37e0c:	and	w0, w0, #0x1
   37e10:	lsl	w0, w0, w1
   37e14:	orr	w3, w0, w3
   37e18:	str	w3, [x2]
   37e1c:	mov	w0, #0x1                   	// #1
   37e20:	ldp	x29, x30, [sp], #16
   37e24:	ret
   37e28:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   37e2c:	add	x3, x3, #0xce8
   37e30:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   37e34:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   37e38:	add	x3, x3, #0x60
   37e3c:	add	x1, x1, #0x610
   37e40:	add	x0, x0, #0x6c0
   37e44:	mov	w2, #0x169                 	// #361
   37e48:	bl	35ac0 <__assert_fail@plt>
   37e4c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   37e50:	add	x3, x3, #0xce8
   37e54:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   37e58:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   37e5c:	add	x3, x3, #0x160
   37e60:	add	x1, x1, #0x658
   37e64:	add	x0, x0, #0x880
   37e68:	mov	w2, #0x2a2                 	// #674
   37e6c:	bl	35ac0 <__assert_fail@plt>

0000000000037e70 <aarch64_ins_addr_simm@@Base>:
   37e70:	stp	x29, x30, [sp, #-80]!
   37e74:	mov	x29, sp
   37e78:	stp	x21, x22, [sp, #32]
   37e7c:	adrp	x21, a6000 <aarch64_operands@@Base+0x16bd0>
   37e80:	mov	x22, x0
   37e84:	stp	x19, x20, [sp, #16]
   37e88:	mov	x20, x1
   37e8c:	mov	x19, x2
   37e90:	ldr	x1, [x21, #3944]
   37e94:	stp	x23, x24, [sp, #48]
   37e98:	mov	x23, x3
   37e9c:	ldr	w3, [x20, #16]
   37ea0:	ldp	w0, w1, [x1, #112]
   37ea4:	cmp	w0, #0x0
   37ea8:	sub	w2, w1, #0x1
   37eac:	ccmp	w2, #0x1e, #0x2, ge  // ge = tcont
   37eb0:	b.hi	3803c <aarch64_ins_addr_simm@@Base+0x1cc>  // b.pmore
   37eb4:	add	w2, w0, w1
   37eb8:	cmp	w2, #0x20
   37ebc:	b.gt	3803c <aarch64_ins_addr_simm@@Base+0x1cc>
   37ec0:	mov	w4, #0xffffffff            	// #-1
   37ec4:	ldr	w2, [x19]
   37ec8:	lsl	w4, w4, w1
   37ecc:	bic	w4, w3, w4
   37ed0:	lsl	w4, w4, w0
   37ed4:	orr	w4, w2, w4
   37ed8:	str	w4, [x19]
   37edc:	ldr	w1, [x22, #20]
   37ee0:	ldrb	w0, [x20, #4]
   37ee4:	ldr	w24, [x20, #20]
   37ee8:	cmp	w1, #0x2c
   37eec:	b.eq	37f98 <aarch64_ins_addr_simm@@Base+0x128>  // b.none
   37ef0:	cmp	w0, #0x19
   37ef4:	b.eq	37f98 <aarch64_ins_addr_simm@@Base+0x128>  // b.none
   37ef8:	ldr	x2, [x21, #3944]
   37efc:	ubfiz	x1, x1, #3, #32
   37f00:	add	x3, x1, x2
   37f04:	ldr	w0, [x1, x2]
   37f08:	ldr	w4, [x3, #4]
   37f0c:	cmp	w0, #0x0
   37f10:	sub	w1, w4, #0x1
   37f14:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   37f18:	b.hi	3803c <aarch64_ins_addr_simm@@Base+0x1cc>  // b.pmore
   37f1c:	add	w1, w0, w4
   37f20:	cmp	w1, #0x20
   37f24:	b.gt	3803c <aarch64_ins_addr_simm@@Base+0x1cc>
   37f28:	mov	w1, #0xffffffff            	// #-1
   37f2c:	ldr	w3, [x19]
   37f30:	lsl	w4, w1, w4
   37f34:	bic	w4, w24, w4
   37f38:	lsl	w4, w4, w0
   37f3c:	orr	w4, w4, w3
   37f40:	str	w4, [x19]
   37f44:	ldrb	w0, [x20, #28]
   37f48:	tbz	w0, #1, 37f80 <aarch64_ins_addr_simm@@Base+0x110>
   37f4c:	ldr	x3, [x23, #8]
   37f50:	ldr	w3, [x3, #16]
   37f54:	sub	w5, w3, #0x3a
   37f58:	sub	w3, w3, #0x3d
   37f5c:	cmp	w5, #0x1
   37f60:	ccmp	w3, #0x1, #0x0, hi  // hi = pmore
   37f64:	b.ls	38060 <aarch64_ins_addr_simm@@Base+0x1f0>  // b.plast
   37f68:	mov	w3, w0
   37f6c:	ubfx	x5, x3, #2, #1
   37f70:	ubfx	x3, x3, #3, #1
   37f74:	cmp	w5, w3
   37f78:	b.eq	38084 <aarch64_ins_addr_simm@@Base+0x214>  // b.none
   37f7c:	tbnz	w0, #2, 37fdc <aarch64_ins_addr_simm@@Base+0x16c>
   37f80:	mov	w0, #0x1                   	// #1
   37f84:	ldp	x19, x20, [sp, #16]
   37f88:	ldp	x21, x22, [sp, #32]
   37f8c:	ldp	x23, x24, [sp, #48]
   37f90:	ldp	x29, x30, [sp], #80
   37f94:	ret
   37f98:	bl	35680 <aarch64_get_qualifier_esize@plt>
   37f9c:	and	w0, w0, #0xff
   37fa0:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   37fa4:	add	x1, x1, #0xce8
   37fa8:	add	x2, x1, #0x200
   37fac:	cmp	w0, #0x10
   37fb0:	ldp	x2, x3, [x2, #-136]
   37fb4:	stp	x2, x3, [sp, #64]
   37fb8:	b.hi	380a8 <aarch64_ins_addr_simm@@Base+0x238>  // b.pmore
   37fbc:	sub	w0, w0, #0x1
   37fc0:	add	x1, sp, #0x40
   37fc4:	ldrb	w0, [x1, w0, uxtw]
   37fc8:	cmp	w0, #0xff
   37fcc:	b.eq	380c4 <aarch64_ins_addr_simm@@Base+0x254>  // b.none
   37fd0:	ldr	w1, [x22, #20]
   37fd4:	asr	w24, w24, w0
   37fd8:	b	37ef8 <aarch64_ins_addr_simm@@Base+0x88>
   37fdc:	ldr	w0, [x22, #24]
   37fe0:	lsl	x0, x0, #3
   37fe4:	add	x3, x0, x2
   37fe8:	ldr	w2, [x0, x2]
   37fec:	ldr	w0, [x3, #4]
   37ff0:	cmp	w2, #0x0
   37ff4:	sub	w3, w0, #0x1
   37ff8:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   37ffc:	b.hi	3803c <aarch64_ins_addr_simm@@Base+0x1cc>  // b.pmore
   38000:	add	w3, w2, w0
   38004:	cmp	w3, #0x20
   38008:	b.gt	3803c <aarch64_ins_addr_simm@@Base+0x1cc>
   3800c:	lsl	w0, w1, w0
   38010:	mvn	w0, w0
   38014:	and	w0, w0, #0x1
   38018:	ldp	x21, x22, [sp, #32]
   3801c:	lsl	w0, w0, w2
   38020:	orr	w4, w0, w4
   38024:	str	w4, [x19]
   38028:	mov	w0, #0x1                   	// #1
   3802c:	ldp	x19, x20, [sp, #16]
   38030:	ldp	x23, x24, [sp, #48]
   38034:	ldp	x29, x30, [sp], #80
   38038:	ret
   3803c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   38040:	add	x3, x3, #0xce8
   38044:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   38048:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3804c:	add	x3, x3, #0x60
   38050:	add	x1, x1, #0x610
   38054:	add	x0, x0, #0x6c0
   38058:	mov	w2, #0x169                 	// #361
   3805c:	bl	35ac0 <__assert_fail@plt>
   38060:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   38064:	add	x3, x3, #0xce8
   38068:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3806c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   38070:	add	x3, x3, #0x188
   38074:	add	x1, x1, #0x658
   38078:	add	x0, x0, #0x8b8
   3807c:	mov	w2, #0x2be                 	// #702
   38080:	bl	35ac0 <__assert_fail@plt>
   38084:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   38088:	add	x3, x3, #0xce8
   3808c:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   38090:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   38094:	add	x3, x3, #0x188
   38098:	add	x1, x1, #0x658
   3809c:	add	x0, x0, #0x958
   380a0:	mov	w2, #0x2c2                 	// #706
   380a4:	bl	35ac0 <__assert_fail@plt>
   380a8:	mov	x3, x1
   380ac:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   380b0:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   380b4:	add	x0, x0, #0x870
   380b8:	add	x1, x1, #0x610
   380bc:	mov	w2, #0x200                 	// #512
   380c0:	bl	35ac0 <__assert_fail@plt>
   380c4:	bl	36138 <init_disassemble_info@@Base+0x88>

00000000000380c8 <aarch64_ins_addr_simm10@@Base>:
   380c8:	stp	x29, x30, [sp, #-16]!
   380cc:	adrp	x6, a6000 <aarch64_operands@@Base+0x16bd0>
   380d0:	mov	x29, sp
   380d4:	ldr	w4, [x0, #20]
   380d8:	ldr	x6, [x6, #3944]
   380dc:	lsl	x4, x4, #3
   380e0:	ldr	w7, [x1, #16]
   380e4:	add	x5, x4, x6
   380e8:	ldr	w4, [x4, x6]
   380ec:	ldr	w3, [x5, #4]
   380f0:	cmp	w4, #0x0
   380f4:	sub	w5, w3, #0x1
   380f8:	ccmp	w5, #0x1e, #0x2, ge  // ge = tcont
   380fc:	b.hi	38228 <aarch64_ins_addr_simm10@@Base+0x160>  // b.pmore
   38100:	add	w5, w4, w3
   38104:	cmp	w5, #0x20
   38108:	b.gt	38228 <aarch64_ins_addr_simm10@@Base+0x160>
   3810c:	mov	w5, #0xffffffff            	// #-1
   38110:	ldr	w8, [x2]
   38114:	lsl	w3, w5, w3
   38118:	bic	w3, w7, w3
   3811c:	lsl	w3, w3, w4
   38120:	orr	w3, w3, w8
   38124:	str	w3, [x2]
   38128:	ldr	w7, [x0, #24]
   3812c:	ldr	w4, [x1, #20]
   38130:	lsl	x7, x7, #3
   38134:	add	x9, x7, x6
   38138:	asr	w10, w4, #3
   3813c:	asr	w8, w4, #12
   38140:	ldr	w7, [x7, x6]
   38144:	ldr	w4, [x9, #4]
   38148:	cmp	w7, #0x0
   3814c:	add	w9, w4, w5
   38150:	ccmp	w9, #0x1e, #0x2, ge  // ge = tcont
   38154:	b.hi	38228 <aarch64_ins_addr_simm10@@Base+0x160>  // b.pmore
   38158:	add	w9, w7, w4
   3815c:	cmp	w9, #0x20
   38160:	b.gt	38228 <aarch64_ins_addr_simm10@@Base+0x160>
   38164:	lsl	w4, w5, w4
   38168:	bic	w4, w8, w4
   3816c:	lsl	w4, w4, w7
   38170:	orr	w3, w4, w3
   38174:	str	w3, [x2]
   38178:	ldr	w4, [x0, #28]
   3817c:	lsl	x4, x4, #3
   38180:	add	x7, x4, x6
   38184:	ldr	w4, [x4, x6]
   38188:	ldr	w7, [x7, #4]
   3818c:	cmp	w4, #0x0
   38190:	add	w8, w7, w5
   38194:	ccmp	w8, #0x1e, #0x2, ge  // ge = tcont
   38198:	b.hi	38228 <aarch64_ins_addr_simm10@@Base+0x160>  // b.pmore
   3819c:	add	w8, w4, w7
   381a0:	cmp	w8, #0x20
   381a4:	b.gt	38228 <aarch64_ins_addr_simm10@@Base+0x160>
   381a8:	lsl	w5, w5, w7
   381ac:	bic	w5, w10, w5
   381b0:	lsl	w5, w5, w4
   381b4:	orr	w3, w5, w3
   381b8:	str	w3, [x2]
   381bc:	ldrb	w1, [x1, #28]
   381c0:	tbz	w1, #1, 3821c <aarch64_ins_addr_simm10@@Base+0x154>
   381c4:	and	w1, w1, #0xc
   381c8:	cmp	w1, #0x4
   381cc:	b.ne	3824c <aarch64_ins_addr_simm10@@Base+0x184>  // b.any
   381d0:	ldr	w0, [x0, #32]
   381d4:	lsl	x0, x0, #3
   381d8:	add	x4, x0, x6
   381dc:	ldr	w1, [x0, x6]
   381e0:	ldr	w4, [x4, #4]
   381e4:	cmp	w1, #0x0
   381e8:	sub	w0, w4, #0x1
   381ec:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   381f0:	b.hi	38228 <aarch64_ins_addr_simm10@@Base+0x160>  // b.pmore
   381f4:	add	w0, w1, w4
   381f8:	cmp	w0, #0x20
   381fc:	b.gt	38228 <aarch64_ins_addr_simm10@@Base+0x160>
   38200:	mov	w0, #0xffffffff            	// #-1
   38204:	lsl	w0, w0, w4
   38208:	mvn	w0, w0
   3820c:	and	w0, w0, #0x1
   38210:	lsl	w0, w0, w1
   38214:	orr	w3, w0, w3
   38218:	str	w3, [x2]
   3821c:	mov	w0, #0x1                   	// #1
   38220:	ldp	x29, x30, [sp], #16
   38224:	ret
   38228:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3822c:	add	x3, x3, #0xce8
   38230:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   38234:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   38238:	add	x3, x3, #0x60
   3823c:	add	x1, x1, #0x610
   38240:	add	x0, x0, #0x6c0
   38244:	mov	w2, #0x169                 	// #361
   38248:	bl	35ac0 <__assert_fail@plt>
   3824c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   38250:	add	x3, x3, #0xce8
   38254:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   38258:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3825c:	add	x3, x3, #0x1a0
   38260:	add	x1, x1, #0x658
   38264:	add	x0, x0, #0x880
   38268:	mov	w2, #0x2dd                 	// #733
   3826c:	bl	35ac0 <__assert_fail@plt>

0000000000038270 <aarch64_ins_addr_uimm12@@Base>:
   38270:	stp	x29, x30, [sp, #-64]!
   38274:	mov	x29, sp
   38278:	stp	x19, x20, [sp, #16]
   3827c:	mov	x19, x1
   38280:	mov	x20, x2
   38284:	str	x21, [sp, #32]
   38288:	mov	x21, x0
   3828c:	ldrb	w0, [x1, #4]
   38290:	bl	35680 <aarch64_get_qualifier_esize@plt>
   38294:	and	w4, w0, #0xff
   38298:	adrp	x6, 5b000 <floatformat_from_double@@Base+0x3e8>
   3829c:	add	x3, x6, #0xce8
   382a0:	add	x1, x3, #0x200
   382a4:	cmp	w4, #0x10
   382a8:	ldp	x0, x1, [x1, #-136]
   382ac:	stp	x0, x1, [sp, #48]
   382b0:	b.hi	383a4 <aarch64_ins_addr_uimm12@@Base+0x134>  // b.pmore
   382b4:	sub	w4, w4, #0x1
   382b8:	add	x0, sp, #0x30
   382bc:	ldrb	w2, [x0, w4, uxtw]
   382c0:	cmp	w2, #0xff
   382c4:	b.eq	383a0 <aarch64_ins_addr_uimm12@@Base+0x130>  // b.none
   382c8:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   382cc:	ldr	w0, [x21, #20]
   382d0:	ldr	w7, [x19, #16]
   382d4:	ldr	x5, [x5, #3944]
   382d8:	lsl	x0, x0, #3
   382dc:	add	x1, x0, x5
   382e0:	ldr	w0, [x0, x5]
   382e4:	ldr	w3, [x1, #4]
   382e8:	cmp	w0, #0x0
   382ec:	sub	w1, w3, #0x1
   382f0:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   382f4:	b.hi	38380 <aarch64_ins_addr_uimm12@@Base+0x110>  // b.pmore
   382f8:	add	w1, w0, w3
   382fc:	cmp	w1, #0x20
   38300:	b.gt	38380 <aarch64_ins_addr_uimm12@@Base+0x110>
   38304:	mov	w4, #0xffffffff            	// #-1
   38308:	ldr	w1, [x20]
   3830c:	lsl	w3, w4, w3
   38310:	bic	w3, w7, w3
   38314:	lsl	w3, w3, w0
   38318:	orr	w3, w3, w1
   3831c:	str	w3, [x20]
   38320:	ldr	w0, [x21, #24]
   38324:	ldr	w1, [x19, #20]
   38328:	lsl	x0, x0, #3
   3832c:	add	x7, x0, x5
   38330:	asr	w1, w1, w2
   38334:	ldr	w2, [x0, x5]
   38338:	ldr	w0, [x7, #4]
   3833c:	cmp	w2, #0x0
   38340:	add	w5, w0, w4
   38344:	ccmp	w5, #0x1e, #0x2, ge  // ge = tcont
   38348:	b.hi	38380 <aarch64_ins_addr_uimm12@@Base+0x110>  // b.pmore
   3834c:	add	w5, w2, w0
   38350:	cmp	w5, #0x20
   38354:	b.gt	38380 <aarch64_ins_addr_uimm12@@Base+0x110>
   38358:	lsl	w4, w4, w0
   3835c:	bic	w4, w1, w4
   38360:	ldr	x21, [sp, #32]
   38364:	lsl	w4, w4, w2
   38368:	orr	w3, w4, w3
   3836c:	str	w3, [x20]
   38370:	mov	w0, #0x1                   	// #1
   38374:	ldp	x19, x20, [sp, #16]
   38378:	ldp	x29, x30, [sp], #64
   3837c:	ret
   38380:	add	x3, x6, #0xce8
   38384:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   38388:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3838c:	add	x3, x3, #0x60
   38390:	add	x1, x1, #0x610
   38394:	add	x0, x0, #0x6c0
   38398:	mov	w2, #0x169                 	// #361
   3839c:	bl	35ac0 <__assert_fail@plt>
   383a0:	bl	36138 <init_disassemble_info@@Base+0x88>
   383a4:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   383a8:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   383ac:	add	x1, x1, #0x610
   383b0:	add	x0, x0, #0x870
   383b4:	mov	w2, #0x200                 	// #512
   383b8:	bl	35ac0 <__assert_fail@plt>
   383bc:	nop

00000000000383c0 <aarch64_ins_simd_addr_post@@Base>:
   383c0:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   383c4:	ldr	w6, [x1, #16]
   383c8:	ldr	x4, [x4, #3944]
   383cc:	ldp	w5, w0, [x4, #112]
   383d0:	cmp	w5, #0x0
   383d4:	sub	w3, w0, #0x1
   383d8:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   383dc:	b.hi	38488 <aarch64_ins_simd_addr_post@@Base+0xc8>  // b.pmore
   383e0:	add	w3, w5, w0
   383e4:	cmp	w3, #0x20
   383e8:	b.gt	38488 <aarch64_ins_simd_addr_post@@Base+0xc8>
   383ec:	mov	w3, #0xffffffff            	// #-1
   383f0:	ldr	w7, [x2]
   383f4:	lsl	w0, w3, w0
   383f8:	bic	w0, w6, w0
   383fc:	lsl	w0, w0, w5
   38400:	orr	w0, w0, w7
   38404:	ldp	w5, w6, [x4, #224]
   38408:	str	w0, [x2]
   3840c:	add	w7, w6, w3
   38410:	mvn	w4, w5
   38414:	cmp	w7, #0x1e
   38418:	ldr	w7, [x1, #24]
   3841c:	cset	w8, ls  // ls = plast
   38420:	and	w4, w8, w4, lsr #31
   38424:	cbnz	w7, 38458 <aarch64_ins_simd_addr_post@@Base+0x98>
   38428:	cbz	w4, 38488 <aarch64_ins_simd_addr_post@@Base+0xc8>
   3842c:	add	w1, w6, w5
   38430:	cmp	w1, #0x20
   38434:	b.gt	38488 <aarch64_ins_simd_addr_post@@Base+0xc8>
   38438:	lsl	w1, w3, w6
   3843c:	mvn	w1, w1
   38440:	and	w1, w1, #0x1f
   38444:	lsl	w1, w1, w5
   38448:	orr	w0, w1, w0
   3844c:	str	w0, [x2]
   38450:	mov	w0, #0x1                   	// #1
   38454:	ret
   38458:	ldr	w7, [x1, #20]
   3845c:	cbz	w4, 38488 <aarch64_ins_simd_addr_post@@Base+0xc8>
   38460:	add	w4, w6, w5
   38464:	cmp	w4, #0x20
   38468:	b.gt	38488 <aarch64_ins_simd_addr_post@@Base+0xc8>
   3846c:	lsl	w1, w3, w6
   38470:	bic	w1, w7, w1
   38474:	lsl	w1, w1, w5
   38478:	orr	w0, w1, w0
   3847c:	str	w0, [x2]
   38480:	mov	w0, #0x1                   	// #1
   38484:	ret
   38488:	stp	x29, x30, [sp, #-16]!
   3848c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   38490:	add	x3, x3, #0xce8
   38494:	mov	x29, sp
   38498:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3849c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   384a0:	add	x3, x3, #0x60
   384a4:	add	x1, x1, #0x610
   384a8:	add	x0, x0, #0x6c0
   384ac:	mov	w2, #0x169                 	// #361
   384b0:	bl	35ac0 <__assert_fail@plt>
   384b4:	nop

00000000000384b8 <aarch64_ins_cond@@Base>:
   384b8:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   384bc:	ldr	x1, [x1, #16]
   384c0:	ldr	x0, [x0, #3944]
   384c4:	ldr	w5, [x1, #32]
   384c8:	ldp	w3, w0, [x0, #184]
   384cc:	cmp	w3, #0x0
   384d0:	sub	w4, w0, #0x1
   384d4:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   384d8:	b.hi	3850c <aarch64_ins_cond@@Base+0x54>  // b.pmore
   384dc:	add	w1, w3, w0
   384e0:	cmp	w1, #0x20
   384e4:	b.gt	3850c <aarch64_ins_cond@@Base+0x54>
   384e8:	mov	w1, #0xffffffff            	// #-1
   384ec:	ldr	w4, [x2]
   384f0:	lsl	w1, w1, w0
   384f4:	bic	w1, w5, w1
   384f8:	mov	w0, #0x1                   	// #1
   384fc:	lsl	w1, w1, w3
   38500:	orr	w1, w4, w1
   38504:	str	w1, [x2]
   38508:	ret
   3850c:	stp	x29, x30, [sp, #-16]!
   38510:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   38514:	add	x3, x3, #0xce8
   38518:	mov	x29, sp
   3851c:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   38520:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   38524:	add	x3, x3, #0x60
   38528:	add	x1, x1, #0x610
   3852c:	add	x0, x0, #0x6c0
   38530:	mov	w2, #0x169                 	// #361
   38534:	bl	35ac0 <__assert_fail@plt>

0000000000038538 <aarch64_ins_sysreg@@Base>:
   38538:	sub	sp, sp, #0x40
   3853c:	stp	x29, x30, [sp, #16]
   38540:	add	x29, sp, #0x10
   38544:	ldr	x5, [x3, #8]
   38548:	stp	x19, x20, [sp, #32]
   3854c:	mov	x19, x1
   38550:	stp	x21, x22, [sp, #48]
   38554:	mov	x21, x2
   38558:	ldr	w0, [x5, #16]
   3855c:	cmp	w0, #0x46
   38560:	b.eq	385a8 <aarch64_ins_sysreg@@Base+0x70>  // b.none
   38564:	ldr	w2, [x5, #12]
   38568:	mov	w3, #0x15                  	// #21
   3856c:	ldr	w1, [x19, #16]
   38570:	mov	x0, x21
   38574:	str	w3, [sp]
   38578:	mov	w7, #0x14                  	// #20
   3857c:	mov	w6, #0x13                  	// #19
   38580:	mov	w4, #0x11                  	// #17
   38584:	mov	w5, #0x12                  	// #18
   38588:	mov	w3, #0x5                   	// #5
   3858c:	bl	361c0 <init_disassemble_info@@Base+0x110>
   38590:	mov	w0, #0x1                   	// #1
   38594:	ldp	x29, x30, [sp, #16]
   38598:	ldp	x19, x20, [sp, #32]
   3859c:	ldp	x21, x22, [sp, #48]
   385a0:	add	sp, sp, #0x40
   385a4:	ret
   385a8:	ldr	x0, [x5, #120]
   385ac:	mov	x20, x3
   385b0:	ldr	w1, [x1, #20]
   385b4:	mov	x2, #0x20000000            	// #536870912
   385b8:	and	x0, x0, #0x60000000
   385bc:	mov	x22, x4
   385c0:	ands	w3, w1, #0x18
   385c4:	ccmp	x0, x2, #0x0, ne  // ne = any
   385c8:	b.ne	38610 <aarch64_ins_sysreg@@Base+0xd8>  // b.any
   385cc:	cmp	w3, #0x8
   385d0:	b.eq	38564 <aarch64_ins_sysreg@@Base+0x2c>  // b.none
   385d4:	mov	w0, #0x2                   	// #2
   385d8:	str	w0, [x4]
   385dc:	mov	w2, #0x5                   	// #5
   385e0:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   385e4:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   385e8:	add	x1, x1, #0x980
   385ec:	add	x0, x0, #0x5d8
   385f0:	bl	359e0 <dcgettext@plt>
   385f4:	ldr	w2, [x19, #8]
   385f8:	mov	w1, #0x1                   	// #1
   385fc:	ldr	x5, [x20, #8]
   38600:	str	w2, [x22, #4]
   38604:	str	x0, [x22, #8]
   38608:	str	w1, [x22, #28]
   3860c:	b	38564 <aarch64_ins_sysreg@@Base+0x2c>
   38610:	tst	x1, #0x8
   38614:	mov	x1, #0x40000000            	// #1073741824
   38618:	ccmp	x0, x1, #0x0, ne  // ne = any
   3861c:	b.ne	38564 <aarch64_ins_sysreg@@Base+0x2c>  // b.any
   38620:	mov	w0, #0x2                   	// #2
   38624:	str	w0, [x4]
   38628:	mov	w2, #0x5                   	// #5
   3862c:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   38630:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   38634:	add	x1, x1, #0x9a8
   38638:	add	x0, x0, #0x5d8
   3863c:	bl	359e0 <dcgettext@plt>
   38640:	ldr	w2, [x19, #8]
   38644:	mov	w1, #0x1                   	// #1
   38648:	ldr	x5, [x20, #8]
   3864c:	str	w2, [x22, #4]
   38650:	str	x0, [x22, #8]
   38654:	str	w1, [x22, #28]
   38658:	b	38564 <aarch64_ins_sysreg@@Base+0x2c>
   3865c:	nop

0000000000038660 <aarch64_ins_pstatefield@@Base>:
   38660:	stp	x29, x30, [sp, #-16]!
   38664:	mov	x0, x2
   38668:	mov	w5, #0x14                  	// #20
   3866c:	mov	x29, sp
   38670:	ldr	x2, [x3, #8]
   38674:	mov	w4, #0x11                  	// #17
   38678:	ldr	w1, [x1, #16]
   3867c:	mov	w3, #0x2                   	// #2
   38680:	ldr	w2, [x2, #12]
   38684:	bl	361c0 <init_disassemble_info@@Base+0x110>
   38688:	mov	w0, #0x1                   	// #1
   3868c:	ldp	x29, x30, [sp], #16
   38690:	ret
   38694:	nop

0000000000038698 <aarch64_ins_sysins_op@@Base>:
   38698:	stp	x29, x30, [sp, #-16]!
   3869c:	mov	x0, x2
   386a0:	mov	w7, #0x14                  	// #20
   386a4:	mov	x29, sp
   386a8:	ldr	x2, [x3, #8]
   386ac:	mov	w6, #0x13                  	// #19
   386b0:	ldr	x1, [x1, #16]
   386b4:	mov	w5, #0x12                  	// #18
   386b8:	ldr	w2, [x2, #12]
   386bc:	mov	w4, #0x11                  	// #17
   386c0:	mov	w3, #0x4                   	// #4
   386c4:	ldr	w1, [x1, #8]
   386c8:	bl	361c0 <init_disassemble_info@@Base+0x110>
   386cc:	mov	w0, #0x1                   	// #1
   386d0:	ldp	x29, x30, [sp], #16
   386d4:	ret

00000000000386d8 <aarch64_ins_barrier@@Base>:
   386d8:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   386dc:	ldr	x1, [x1, #16]
   386e0:	ldr	x0, [x0, #3944]
   386e4:	ldr	w5, [x1, #8]
   386e8:	ldp	w3, w0, [x0, #144]
   386ec:	cmp	w3, #0x0
   386f0:	sub	w4, w0, #0x1
   386f4:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   386f8:	b.hi	3872c <aarch64_ins_barrier@@Base+0x54>  // b.pmore
   386fc:	add	w1, w3, w0
   38700:	cmp	w1, #0x20
   38704:	b.gt	3872c <aarch64_ins_barrier@@Base+0x54>
   38708:	mov	w1, #0xffffffff            	// #-1
   3870c:	ldr	w4, [x2]
   38710:	lsl	w1, w1, w0
   38714:	bic	w1, w5, w1
   38718:	mov	w0, #0x1                   	// #1
   3871c:	lsl	w1, w1, w3
   38720:	orr	w1, w4, w1
   38724:	str	w1, [x2]
   38728:	ret
   3872c:	stp	x29, x30, [sp, #-16]!
   38730:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   38734:	add	x3, x3, #0xce8
   38738:	mov	x29, sp
   3873c:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   38740:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   38744:	add	x3, x3, #0x60
   38748:	add	x1, x1, #0x610
   3874c:	add	x0, x0, #0x6c0
   38750:	mov	w2, #0x169                 	// #361
   38754:	bl	35ac0 <__assert_fail@plt>

0000000000038758 <aarch64_ins_prfop@@Base>:
   38758:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3875c:	ldr	x1, [x1, #16]
   38760:	ldr	x0, [x0, #3944]
   38764:	ldr	w5, [x1, #8]
   38768:	ldp	w3, w0, [x0, #96]
   3876c:	cmp	w3, #0x0
   38770:	sub	w4, w0, #0x1
   38774:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   38778:	b.hi	387ac <aarch64_ins_prfop@@Base+0x54>  // b.pmore
   3877c:	add	w1, w3, w0
   38780:	cmp	w1, #0x20
   38784:	b.gt	387ac <aarch64_ins_prfop@@Base+0x54>
   38788:	mov	w1, #0xffffffff            	// #-1
   3878c:	ldr	w4, [x2]
   38790:	lsl	w1, w1, w0
   38794:	bic	w1, w5, w1
   38798:	mov	w0, #0x1                   	// #1
   3879c:	lsl	w1, w1, w3
   387a0:	orr	w1, w4, w1
   387a4:	str	w1, [x2]
   387a8:	ret
   387ac:	stp	x29, x30, [sp, #-16]!
   387b0:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   387b4:	add	x3, x3, #0xce8
   387b8:	mov	x29, sp
   387bc:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   387c0:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   387c4:	add	x3, x3, #0x60
   387c8:	add	x1, x1, #0x610
   387cc:	add	x0, x0, #0x6c0
   387d0:	mov	w2, #0x169                 	// #361
   387d4:	bl	35ac0 <__assert_fail@plt>

00000000000387d8 <aarch64_ins_hint@@Base>:
   387d8:	stp	x29, x30, [sp, #-16]!
   387dc:	mov	x0, x2
   387e0:	mov	w5, #0x12                  	// #18
   387e4:	mov	x29, sp
   387e8:	ldr	x1, [x1, #16]
   387ec:	mov	w4, #0x11                  	// #17
   387f0:	mov	w3, #0x2                   	// #2
   387f4:	mov	w2, #0x0                   	// #0
   387f8:	ldr	w1, [x1, #8]
   387fc:	bl	361c0 <init_disassemble_info@@Base+0x110>
   38800:	mov	w0, #0x1                   	// #1
   38804:	ldp	x29, x30, [sp], #16
   38808:	ret
   3880c:	nop

0000000000038810 <aarch64_ins_reg_extended@@Base>:
   38810:	stp	x29, x30, [sp, #-48]!
   38814:	mov	x29, sp
   38818:	stp	x19, x20, [sp, #16]
   3881c:	adrp	x20, a6000 <aarch64_operands@@Base+0x16bd0>
   38820:	ldr	w4, [x1, #16]
   38824:	ldr	x3, [x20, #3944]
   38828:	mov	x19, x2
   3882c:	str	x21, [sp, #32]
   38830:	mov	x21, x1
   38834:	ldr	w2, [x3, #228]
   38838:	ldr	w1, [x3, #224]
   3883c:	sub	w3, w2, #0x1
   38840:	cmp	w1, #0x0
   38844:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   38848:	b.hi	38920 <aarch64_ins_reg_extended@@Base+0x110>  // b.pmore
   3884c:	add	w0, w1, w2
   38850:	cmp	w0, #0x20
   38854:	b.gt	38920 <aarch64_ins_reg_extended@@Base+0x110>
   38858:	mov	w0, #0xffffffff            	// #-1
   3885c:	ldr	w3, [x19]
   38860:	lsl	w0, w0, w2
   38864:	bic	w0, w4, w0
   38868:	lsl	w0, w0, w1
   3886c:	orr	w0, w3, w0
   38870:	str	w0, [x19]
   38874:	ldr	w0, [x21, #32]
   38878:	cmp	w0, #0x5
   3887c:	b.ne	38890 <aarch64_ins_reg_extended@@Base+0x80>  // b.any
   38880:	ldrb	w0, [x21, #4]
   38884:	cmp	w0, #0x1
   38888:	cset	w0, ne  // ne = any
   3888c:	add	w0, w0, #0x8
   38890:	bl	35430 <aarch64_get_operand_modifier_value@plt>
   38894:	ldr	x2, [x20, #3944]
   38898:	ldp	w1, w3, [x2, #240]
   3889c:	cmp	w1, #0x0
   388a0:	sub	w4, w3, #0x1
   388a4:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   388a8:	b.hi	38920 <aarch64_ins_reg_extended@@Base+0x110>  // b.pmore
   388ac:	add	w4, w1, w3
   388b0:	cmp	w4, #0x20
   388b4:	b.gt	38920 <aarch64_ins_reg_extended@@Base+0x110>
   388b8:	mov	w4, #0xffffffff            	// #-1
   388bc:	ldr	w6, [x19]
   388c0:	lsl	w3, w4, w3
   388c4:	bic	w3, w0, w3
   388c8:	ldp	w5, w0, [x2, #176]
   388cc:	lsl	w3, w3, w1
   388d0:	orr	w3, w3, w6
   388d4:	add	w1, w0, w4
   388d8:	cmp	w5, #0x0
   388dc:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   388e0:	ldr	x1, [x21, #40]
   388e4:	str	w3, [x19]
   388e8:	b.hi	38920 <aarch64_ins_reg_extended@@Base+0x110>  // b.pmore
   388ec:	add	w2, w5, w0
   388f0:	cmp	w2, #0x20
   388f4:	b.gt	38920 <aarch64_ins_reg_extended@@Base+0x110>
   388f8:	lsl	w4, w4, w0
   388fc:	bic	w4, w1, w4
   38900:	ldr	x21, [sp, #32]
   38904:	lsl	w4, w4, w5
   38908:	orr	w3, w4, w3
   3890c:	str	w3, [x19]
   38910:	mov	w0, #0x1                   	// #1
   38914:	ldp	x19, x20, [sp, #16]
   38918:	ldp	x29, x30, [sp], #48
   3891c:	ret
   38920:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   38924:	add	x3, x3, #0xce8
   38928:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3892c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   38930:	add	x3, x3, #0x60
   38934:	add	x1, x1, #0x610
   38938:	add	x0, x0, #0x6c0
   3893c:	mov	w2, #0x169                 	// #361
   38940:	bl	35ac0 <__assert_fail@plt>
   38944:	nop

0000000000038948 <aarch64_ins_reg_shifted@@Base>:
   38948:	stp	x29, x30, [sp, #-48]!
   3894c:	mov	x29, sp
   38950:	stp	x19, x20, [sp, #16]
   38954:	adrp	x20, a6000 <aarch64_operands@@Base+0x16bd0>
   38958:	ldr	w3, [x1, #16]
   3895c:	ldr	x20, [x20, #3944]
   38960:	stp	x21, x22, [sp, #32]
   38964:	mov	x22, x1
   38968:	mov	x21, x2
   3896c:	ldp	w1, w0, [x20, #224]
   38970:	cmp	w1, #0x0
   38974:	sub	w2, w0, #0x1
   38978:	ccmp	w2, #0x1e, #0x2, ge  // ge = tcont
   3897c:	b.hi	38a3c <aarch64_ins_reg_shifted@@Base+0xf4>  // b.pmore
   38980:	add	w2, w1, w0
   38984:	cmp	w2, #0x20
   38988:	b.gt	38a3c <aarch64_ins_reg_shifted@@Base+0xf4>
   3898c:	mov	w19, #0xffffffff            	// #-1
   38990:	ldr	w2, [x21]
   38994:	lsl	w0, w19, w0
   38998:	bic	w0, w3, w0
   3899c:	lsl	w0, w0, w1
   389a0:	orr	w0, w2, w0
   389a4:	str	w0, [x21]
   389a8:	ldr	w0, [x22, #32]
   389ac:	bl	35430 <aarch64_get_operand_modifier_value@plt>
   389b0:	ldr	w1, [x20, #280]
   389b4:	ldr	w3, [x20, #284]
   389b8:	cmp	w1, #0x0
   389bc:	add	w2, w3, w19
   389c0:	ccmp	w2, #0x1e, #0x2, ge  // ge = tcont
   389c4:	b.hi	38a3c <aarch64_ins_reg_shifted@@Base+0xf4>  // b.pmore
   389c8:	add	w2, w1, w3
   389cc:	cmp	w2, #0x20
   389d0:	b.gt	38a3c <aarch64_ins_reg_shifted@@Base+0xf4>
   389d4:	ldr	w2, [x20, #304]
   389d8:	lsl	w3, w19, w3
   389dc:	bic	w3, w0, w3
   389e0:	ldr	w0, [x20, #308]
   389e4:	ldr	w4, [x21]
   389e8:	cmp	w2, #0x0
   389ec:	lsl	w3, w3, w1
   389f0:	add	w1, w0, w19
   389f4:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   389f8:	orr	w3, w3, w4
   389fc:	ldr	x1, [x22, #40]
   38a00:	str	w3, [x21]
   38a04:	b.hi	38a3c <aarch64_ins_reg_shifted@@Base+0xf4>  // b.pmore
   38a08:	add	w4, w2, w0
   38a0c:	cmp	w4, #0x20
   38a10:	b.gt	38a3c <aarch64_ins_reg_shifted@@Base+0xf4>
   38a14:	lsl	w19, w19, w0
   38a18:	bic	w19, w1, w19
   38a1c:	mov	w0, #0x1                   	// #1
   38a20:	lsl	w19, w19, w2
   38a24:	orr	w3, w19, w3
   38a28:	ldp	x19, x20, [sp, #16]
   38a2c:	str	w3, [x21]
   38a30:	ldp	x21, x22, [sp, #32]
   38a34:	ldp	x29, x30, [sp], #48
   38a38:	ret
   38a3c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   38a40:	add	x3, x3, #0xce8
   38a44:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   38a48:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   38a4c:	add	x3, x3, #0x60
   38a50:	add	x1, x1, #0x610
   38a54:	add	x0, x0, #0x6c0
   38a58:	mov	w2, #0x169                 	// #361
   38a5c:	bl	35ac0 <__assert_fail@plt>

0000000000038a60 <aarch64_ins_sve_addr_ri_s4xvl@@Base>:
   38a60:	ldp	w4, w7, [x0, #16]
   38a64:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   38a68:	ldr	w9, [x1, #16]
   38a6c:	ldr	x5, [x5, #3944]
   38a70:	lsl	x7, x7, #3
   38a74:	ubfx	x4, x4, #5, #3
   38a78:	add	x8, x7, x5
   38a7c:	add	w6, w4, #0x1
   38a80:	ldr	w7, [x7, x5]
   38a84:	ldr	w0, [x8, #4]
   38a88:	cmp	w7, #0x0
   38a8c:	sub	w4, w0, #0x1
   38a90:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   38a94:	b.hi	38b08 <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xa8>  // b.pmore
   38a98:	add	w3, w7, w0
   38a9c:	cmp	w3, #0x20
   38aa0:	b.gt	38b08 <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xa8>
   38aa4:	mov	w4, #0xffffffff            	// #-1
   38aa8:	ldr	w10, [x2]
   38aac:	lsl	w3, w4, w0
   38ab0:	bic	w3, w9, w3
   38ab4:	ldr	w8, [x5, #776]
   38ab8:	lsl	w3, w3, w7
   38abc:	orr	w3, w3, w10
   38ac0:	str	w3, [x2]
   38ac4:	cmp	w8, #0x0
   38ac8:	ldr	w5, [x5, #780]
   38acc:	ldr	w0, [x1, #20]
   38ad0:	add	w1, w5, w4
   38ad4:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   38ad8:	sdiv	w6, w0, w6
   38adc:	b.hi	38b08 <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xa8>  // b.pmore
   38ae0:	add	w0, w8, w5
   38ae4:	cmp	w0, #0x20
   38ae8:	b.gt	38b08 <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xa8>
   38aec:	lsl	w4, w4, w5
   38af0:	bic	w4, w6, w4
   38af4:	mov	w0, #0x1                   	// #1
   38af8:	lsl	w4, w4, w8
   38afc:	orr	w3, w4, w3
   38b00:	str	w3, [x2]
   38b04:	ret
   38b08:	stp	x29, x30, [sp, #-16]!
   38b0c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   38b10:	add	x3, x3, #0xce8
   38b14:	mov	x29, sp
   38b18:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   38b1c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   38b20:	add	x3, x3, #0x60
   38b24:	add	x1, x1, #0x610
   38b28:	add	x0, x0, #0x6c0
   38b2c:	mov	w2, #0x169                 	// #361
   38b30:	bl	35ac0 <__assert_fail@plt>
   38b34:	nop

0000000000038b38 <aarch64_ins_sve_addr_ri_s6xvl@@Base>:
   38b38:	ldp	w4, w7, [x0, #16]
   38b3c:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   38b40:	ldr	w9, [x1, #16]
   38b44:	ldr	x5, [x5, #3944]
   38b48:	lsl	x7, x7, #3
   38b4c:	ubfx	x4, x4, #5, #3
   38b50:	add	x8, x7, x5
   38b54:	add	w6, w4, #0x1
   38b58:	ldr	w7, [x7, x5]
   38b5c:	ldr	w0, [x8, #4]
   38b60:	cmp	w7, #0x0
   38b64:	sub	w4, w0, #0x1
   38b68:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   38b6c:	b.hi	38be0 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xa8>  // b.pmore
   38b70:	add	w3, w7, w0
   38b74:	cmp	w3, #0x20
   38b78:	b.gt	38be0 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xa8>
   38b7c:	mov	w4, #0xffffffff            	// #-1
   38b80:	ldr	w10, [x2]
   38b84:	lsl	w3, w4, w0
   38b88:	bic	w3, w9, w3
   38b8c:	ldr	w8, [x5, #800]
   38b90:	lsl	w3, w3, w7
   38b94:	orr	w3, w3, w10
   38b98:	str	w3, [x2]
   38b9c:	cmp	w8, #0x0
   38ba0:	ldr	w5, [x5, #804]
   38ba4:	ldr	w0, [x1, #20]
   38ba8:	add	w1, w5, w4
   38bac:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   38bb0:	sdiv	w6, w0, w6
   38bb4:	b.hi	38be0 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xa8>  // b.pmore
   38bb8:	add	w0, w8, w5
   38bbc:	cmp	w0, #0x20
   38bc0:	b.gt	38be0 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xa8>
   38bc4:	lsl	w4, w4, w5
   38bc8:	bic	w4, w6, w4
   38bcc:	mov	w0, #0x1                   	// #1
   38bd0:	lsl	w4, w4, w8
   38bd4:	orr	w3, w4, w3
   38bd8:	str	w3, [x2]
   38bdc:	ret
   38be0:	stp	x29, x30, [sp, #-16]!
   38be4:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   38be8:	add	x3, x3, #0xce8
   38bec:	mov	x29, sp
   38bf0:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   38bf4:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   38bf8:	add	x3, x3, #0x60
   38bfc:	add	x1, x1, #0x610
   38c00:	add	x0, x0, #0x6c0
   38c04:	mov	w2, #0x169                 	// #361
   38c08:	bl	35ac0 <__assert_fail@plt>
   38c0c:	nop

0000000000038c10 <aarch64_ins_sve_addr_ri_s9xvl@@Base>:
   38c10:	stp	x29, x30, [sp, #-16]!
   38c14:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   38c18:	mov	x29, sp
   38c1c:	ldp	w4, w6, [x0, #16]
   38c20:	mov	x0, x2
   38c24:	ldr	x5, [x5, #3944]
   38c28:	lsl	x2, x6, #3
   38c2c:	ubfx	x4, x4, #5, #3
   38c30:	add	x7, x2, x5
   38c34:	add	w6, w4, #0x1
   38c38:	ldr	w8, [x1, #16]
   38c3c:	ldr	w2, [x2, x5]
   38c40:	ldr	w4, [x7, #4]
   38c44:	cmp	w2, #0x0
   38c48:	sub	w5, w4, #0x1
   38c4c:	ccmp	w5, #0x1e, #0x2, ge  // ge = tcont
   38c50:	b.hi	38ca4 <aarch64_ins_sve_addr_ri_s9xvl@@Base+0x94>  // b.pmore
   38c54:	add	w3, w2, w4
   38c58:	cmp	w3, #0x20
   38c5c:	b.gt	38ca4 <aarch64_ins_sve_addr_ri_s9xvl@@Base+0x94>
   38c60:	mov	w3, #0xffffffff            	// #-1
   38c64:	ldr	w7, [x0]
   38c68:	lsl	w3, w3, w4
   38c6c:	bic	w3, w8, w3
   38c70:	mov	w5, #0x64                  	// #100
   38c74:	mov	w4, #0x16                  	// #22
   38c78:	lsl	w3, w3, w2
   38c7c:	orr	w3, w7, w3
   38c80:	str	w3, [x0]
   38c84:	mov	w2, #0x0                   	// #0
   38c88:	mov	w3, #0x2                   	// #2
   38c8c:	ldr	w1, [x1, #20]
   38c90:	sdiv	w1, w1, w6
   38c94:	bl	361c0 <init_disassemble_info@@Base+0x110>
   38c98:	mov	w0, #0x1                   	// #1
   38c9c:	ldp	x29, x30, [sp], #16
   38ca0:	ret
   38ca4:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   38ca8:	add	x3, x3, #0xce8
   38cac:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   38cb0:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   38cb4:	add	x3, x3, #0x60
   38cb8:	add	x1, x1, #0x610
   38cbc:	add	x0, x0, #0x6c0
   38cc0:	mov	w2, #0x169                 	// #361
   38cc4:	bl	35ac0 <__assert_fail@plt>

0000000000038cc8 <aarch64_ins_sve_addr_ri_s4@@Base>:
   38cc8:	ldp	w4, w6, [x0, #16]
   38ccc:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   38cd0:	mov	w0, #0x1                   	// #1
   38cd4:	ldr	w9, [x1, #16]
   38cd8:	ldr	x5, [x5, #3944]
   38cdc:	lsl	x6, x6, #3
   38ce0:	ubfx	x4, x4, #5, #3
   38ce4:	add	x8, x6, x5
   38ce8:	ldr	w7, [x6, x5]
   38cec:	lsl	w6, w0, w4
   38cf0:	ldr	w3, [x8, #4]
   38cf4:	cmp	w7, #0x0
   38cf8:	sub	w4, w3, #0x1
   38cfc:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   38d00:	b.hi	38d70 <aarch64_ins_sve_addr_ri_s4@@Base+0xa8>  // b.pmore
   38d04:	add	w4, w7, w3
   38d08:	cmp	w4, #0x20
   38d0c:	b.gt	38d70 <aarch64_ins_sve_addr_ri_s4@@Base+0xa8>
   38d10:	mov	w4, #0xffffffff            	// #-1
   38d14:	ldr	w10, [x2]
   38d18:	lsl	w3, w4, w3
   38d1c:	bic	w3, w9, w3
   38d20:	ldr	w8, [x5, #776]
   38d24:	lsl	w3, w3, w7
   38d28:	orr	w3, w3, w10
   38d2c:	str	w3, [x2]
   38d30:	cmp	w8, #0x0
   38d34:	ldr	w5, [x5, #780]
   38d38:	ldr	w1, [x1, #20]
   38d3c:	add	w7, w5, w4
   38d40:	ccmp	w7, #0x1e, #0x2, ge  // ge = tcont
   38d44:	sdiv	w6, w1, w6
   38d48:	b.hi	38d70 <aarch64_ins_sve_addr_ri_s4@@Base+0xa8>  // b.pmore
   38d4c:	add	w1, w8, w5
   38d50:	cmp	w1, #0x20
   38d54:	b.gt	38d70 <aarch64_ins_sve_addr_ri_s4@@Base+0xa8>
   38d58:	lsl	w4, w4, w5
   38d5c:	bic	w4, w6, w4
   38d60:	lsl	w4, w4, w8
   38d64:	orr	w3, w4, w3
   38d68:	str	w3, [x2]
   38d6c:	ret
   38d70:	stp	x29, x30, [sp, #-16]!
   38d74:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   38d78:	add	x3, x3, #0xce8
   38d7c:	mov	x29, sp
   38d80:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   38d84:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   38d88:	add	x3, x3, #0x60
   38d8c:	add	x1, x1, #0x610
   38d90:	add	x0, x0, #0x6c0
   38d94:	mov	w2, #0x169                 	// #361
   38d98:	bl	35ac0 <__assert_fail@plt>
   38d9c:	nop

0000000000038da0 <aarch64_ins_sve_addr_ri_u6@@Base>:
   38da0:	ldp	w4, w6, [x0, #16]
   38da4:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   38da8:	mov	w0, #0x1                   	// #1
   38dac:	ldr	w9, [x1, #16]
   38db0:	ldr	x5, [x5, #3944]
   38db4:	lsl	x6, x6, #3
   38db8:	ubfx	x4, x4, #5, #3
   38dbc:	add	x8, x6, x5
   38dc0:	ldr	w7, [x6, x5]
   38dc4:	lsl	w6, w0, w4
   38dc8:	ldr	w3, [x8, #4]
   38dcc:	cmp	w7, #0x0
   38dd0:	sub	w4, w3, #0x1
   38dd4:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   38dd8:	b.hi	38e48 <aarch64_ins_sve_addr_ri_u6@@Base+0xa8>  // b.pmore
   38ddc:	add	w4, w7, w3
   38de0:	cmp	w4, #0x20
   38de4:	b.gt	38e48 <aarch64_ins_sve_addr_ri_u6@@Base+0xa8>
   38de8:	mov	w4, #0xffffffff            	// #-1
   38dec:	ldr	w10, [x2]
   38df0:	lsl	w3, w4, w3
   38df4:	bic	w3, w9, w3
   38df8:	ldr	w8, [x5, #800]
   38dfc:	lsl	w3, w3, w7
   38e00:	orr	w3, w3, w10
   38e04:	str	w3, [x2]
   38e08:	cmp	w8, #0x0
   38e0c:	ldr	w5, [x5, #804]
   38e10:	ldr	w1, [x1, #20]
   38e14:	add	w7, w5, w4
   38e18:	ccmp	w7, #0x1e, #0x2, ge  // ge = tcont
   38e1c:	sdiv	w6, w1, w6
   38e20:	b.hi	38e48 <aarch64_ins_sve_addr_ri_u6@@Base+0xa8>  // b.pmore
   38e24:	add	w1, w8, w5
   38e28:	cmp	w1, #0x20
   38e2c:	b.gt	38e48 <aarch64_ins_sve_addr_ri_u6@@Base+0xa8>
   38e30:	lsl	w4, w4, w5
   38e34:	bic	w4, w6, w4
   38e38:	lsl	w4, w4, w8
   38e3c:	orr	w3, w4, w3
   38e40:	str	w3, [x2]
   38e44:	ret
   38e48:	stp	x29, x30, [sp, #-16]!
   38e4c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   38e50:	add	x3, x3, #0xce8
   38e54:	mov	x29, sp
   38e58:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   38e5c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   38e60:	add	x3, x3, #0x60
   38e64:	add	x1, x1, #0x610
   38e68:	add	x0, x0, #0x6c0
   38e6c:	mov	w2, #0x169                 	// #361
   38e70:	bl	35ac0 <__assert_fail@plt>
   38e74:	nop

0000000000038e78 <aarch64_ins_sve_addr_rr_lsl@@Base>:
   38e78:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   38e7c:	ldr	w4, [x0, #20]
   38e80:	ldr	w8, [x1, #16]
   38e84:	ldr	x5, [x5, #3944]
   38e88:	lsl	x4, x4, #3
   38e8c:	add	x7, x4, x5
   38e90:	ldr	w6, [x4, x5]
   38e94:	ldr	w3, [x7, #4]
   38e98:	cmp	w6, #0x0
   38e9c:	sub	w4, w3, #0x1
   38ea0:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   38ea4:	b.hi	38f20 <aarch64_ins_sve_addr_rr_lsl@@Base+0xa8>  // b.pmore
   38ea8:	add	w4, w6, w3
   38eac:	cmp	w4, #0x20
   38eb0:	b.gt	38f20 <aarch64_ins_sve_addr_rr_lsl@@Base+0xa8>
   38eb4:	mov	w4, #0xffffffff            	// #-1
   38eb8:	ldr	w7, [x2]
   38ebc:	lsl	w3, w4, w3
   38ec0:	bic	w3, w8, w3
   38ec4:	lsl	w3, w3, w6
   38ec8:	orr	w3, w3, w7
   38ecc:	str	w3, [x2]
   38ed0:	ldr	w0, [x0, #24]
   38ed4:	ldr	w7, [x1, #20]
   38ed8:	lsl	x0, x0, #3
   38edc:	add	x6, x0, x5
   38ee0:	ldr	w1, [x0, x5]
   38ee4:	ldr	w0, [x6, #4]
   38ee8:	cmp	w1, #0x0
   38eec:	add	w5, w0, w4
   38ef0:	ccmp	w5, #0x1e, #0x2, ge  // ge = tcont
   38ef4:	b.hi	38f20 <aarch64_ins_sve_addr_rr_lsl@@Base+0xa8>  // b.pmore
   38ef8:	add	w5, w1, w0
   38efc:	cmp	w5, #0x20
   38f00:	b.gt	38f20 <aarch64_ins_sve_addr_rr_lsl@@Base+0xa8>
   38f04:	lsl	w4, w4, w0
   38f08:	bic	w4, w7, w4
   38f0c:	mov	w0, #0x1                   	// #1
   38f10:	lsl	w4, w4, w1
   38f14:	orr	w3, w4, w3
   38f18:	str	w3, [x2]
   38f1c:	ret
   38f20:	stp	x29, x30, [sp, #-16]!
   38f24:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   38f28:	add	x3, x3, #0xce8
   38f2c:	mov	x29, sp
   38f30:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   38f34:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   38f38:	add	x3, x3, #0x60
   38f3c:	add	x1, x1, #0x610
   38f40:	add	x0, x0, #0x6c0
   38f44:	mov	w2, #0x169                 	// #361
   38f48:	bl	35ac0 <__assert_fail@plt>
   38f4c:	nop

0000000000038f50 <aarch64_ins_sve_addr_rz_xtw@@Base>:
   38f50:	adrp	x6, a6000 <aarch64_operands@@Base+0x16bd0>
   38f54:	ldr	w4, [x0, #20]
   38f58:	ldr	w7, [x1, #16]
   38f5c:	ldr	x6, [x6, #3944]
   38f60:	lsl	x4, x4, #3
   38f64:	add	x5, x4, x6
   38f68:	ldr	w4, [x4, x6]
   38f6c:	ldr	w3, [x5, #4]
   38f70:	cmp	w4, #0x0
   38f74:	sub	w5, w3, #0x1
   38f78:	ccmp	w5, #0x1e, #0x2, ge  // ge = tcont
   38f7c:	b.hi	39068 <aarch64_ins_sve_addr_rz_xtw@@Base+0x118>  // b.pmore
   38f80:	add	w5, w4, w3
   38f84:	cmp	w5, #0x20
   38f88:	b.gt	39068 <aarch64_ins_sve_addr_rz_xtw@@Base+0x118>
   38f8c:	mov	w5, #0xffffffff            	// #-1
   38f90:	ldr	w8, [x2]
   38f94:	lsl	w3, w5, w3
   38f98:	bic	w3, w7, w3
   38f9c:	lsl	w3, w3, w4
   38fa0:	orr	w3, w3, w8
   38fa4:	str	w3, [x2]
   38fa8:	ldr	w7, [x0, #24]
   38fac:	ldr	w9, [x1, #20]
   38fb0:	lsl	x7, x7, #3
   38fb4:	add	x8, x7, x6
   38fb8:	ldr	w7, [x7, x6]
   38fbc:	ldr	w4, [x8, #4]
   38fc0:	cmp	w7, #0x0
   38fc4:	add	w8, w4, w5
   38fc8:	ccmp	w8, #0x1e, #0x2, ge  // ge = tcont
   38fcc:	b.hi	39068 <aarch64_ins_sve_addr_rz_xtw@@Base+0x118>  // b.pmore
   38fd0:	add	w8, w7, w4
   38fd4:	cmp	w8, #0x20
   38fd8:	b.gt	39068 <aarch64_ins_sve_addr_rz_xtw@@Base+0x118>
   38fdc:	lsl	w4, w5, w4
   38fe0:	bic	w4, w9, w4
   38fe4:	lsl	w4, w4, w7
   38fe8:	orr	w3, w4, w3
   38fec:	str	w3, [x2]
   38ff0:	ldr	w0, [x0, #28]
   38ff4:	ldr	w1, [x1, #32]
   38ff8:	lsl	x0, x0, #3
   38ffc:	cmp	w1, #0x8
   39000:	add	x1, x0, x6
   39004:	ldr	w0, [x0, x6]
   39008:	ldr	w1, [x1, #4]
   3900c:	b.eq	3904c <aarch64_ins_sve_addr_rz_xtw@@Base+0xfc>  // b.none
   39010:	cmp	w0, #0x0
   39014:	sub	w4, w1, #0x1
   39018:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   3901c:	b.hi	39068 <aarch64_ins_sve_addr_rz_xtw@@Base+0x118>  // b.pmore
   39020:	add	w4, w0, w1
   39024:	cmp	w4, #0x20
   39028:	b.gt	39068 <aarch64_ins_sve_addr_rz_xtw@@Base+0x118>
   3902c:	lsl	w5, w5, w1
   39030:	mvn	w5, w5
   39034:	and	w5, w5, #0x1
   39038:	lsl	w5, w5, w0
   3903c:	orr	w3, w5, w3
   39040:	str	w3, [x2]
   39044:	mov	w0, #0x1                   	// #1
   39048:	ret
   3904c:	cmp	w0, #0x0
   39050:	add	w2, w1, w5
   39054:	ccmp	w2, #0x1e, #0x2, ge  // ge = tcont
   39058:	b.hi	39068 <aarch64_ins_sve_addr_rz_xtw@@Base+0x118>  // b.pmore
   3905c:	add	w0, w0, w1
   39060:	cmp	w0, #0x20
   39064:	b.le	39044 <aarch64_ins_sve_addr_rz_xtw@@Base+0xf4>
   39068:	stp	x29, x30, [sp, #-16]!
   3906c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   39070:	add	x3, x3, #0xce8
   39074:	mov	x29, sp
   39078:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3907c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   39080:	add	x3, x3, #0x60
   39084:	add	x1, x1, #0x610
   39088:	add	x0, x0, #0x6c0
   3908c:	mov	w2, #0x169                 	// #361
   39090:	bl	35ac0 <__assert_fail@plt>
   39094:	nop

0000000000039098 <aarch64_ins_sve_addr_zi_u5@@Base>:
   39098:	ldp	w4, w6, [x0, #16]
   3909c:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   390a0:	mov	w0, #0x1                   	// #1
   390a4:	ldr	w9, [x1, #16]
   390a8:	ldr	x5, [x5, #3944]
   390ac:	lsl	x6, x6, #3
   390b0:	ubfx	x4, x4, #5, #3
   390b4:	add	x8, x6, x5
   390b8:	ldr	w7, [x6, x5]
   390bc:	lsl	w6, w0, w4
   390c0:	ldr	w3, [x8, #4]
   390c4:	cmp	w7, #0x0
   390c8:	sub	w4, w3, #0x1
   390cc:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   390d0:	b.hi	39140 <aarch64_ins_sve_addr_zi_u5@@Base+0xa8>  // b.pmore
   390d4:	add	w4, w7, w3
   390d8:	cmp	w4, #0x20
   390dc:	b.gt	39140 <aarch64_ins_sve_addr_zi_u5@@Base+0xa8>
   390e0:	mov	w4, #0xffffffff            	// #-1
   390e4:	ldr	w10, [x2]
   390e8:	lsl	w3, w4, w3
   390ec:	bic	w3, w9, w3
   390f0:	ldr	w8, [x5, #344]
   390f4:	lsl	w3, w3, w7
   390f8:	orr	w3, w3, w10
   390fc:	str	w3, [x2]
   39100:	cmp	w8, #0x0
   39104:	ldr	w5, [x5, #348]
   39108:	ldr	w1, [x1, #20]
   3910c:	add	w7, w5, w4
   39110:	ccmp	w7, #0x1e, #0x2, ge  // ge = tcont
   39114:	sdiv	w6, w1, w6
   39118:	b.hi	39140 <aarch64_ins_sve_addr_zi_u5@@Base+0xa8>  // b.pmore
   3911c:	add	w1, w8, w5
   39120:	cmp	w1, #0x20
   39124:	b.gt	39140 <aarch64_ins_sve_addr_zi_u5@@Base+0xa8>
   39128:	lsl	w4, w4, w5
   3912c:	bic	w4, w6, w4
   39130:	lsl	w4, w4, w8
   39134:	orr	w3, w4, w3
   39138:	str	w3, [x2]
   3913c:	ret
   39140:	stp	x29, x30, [sp, #-16]!
   39144:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   39148:	add	x3, x3, #0xce8
   3914c:	mov	x29, sp
   39150:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   39154:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   39158:	add	x3, x3, #0x60
   3915c:	add	x1, x1, #0x610
   39160:	add	x0, x0, #0x6c0
   39164:	mov	w2, #0x169                 	// #361
   39168:	bl	35ac0 <__assert_fail@plt>
   3916c:	nop

0000000000039170 <aarch64_ins_sve_addr_zz_lsl@@Base>:
   39170:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   39174:	ldr	w4, [x0, #20]
   39178:	ldr	w8, [x1, #16]
   3917c:	ldr	x5, [x5, #3944]
   39180:	lsl	x4, x4, #3
   39184:	add	x7, x4, x5
   39188:	ldr	w6, [x4, x5]
   3918c:	ldr	w3, [x7, #4]
   39190:	cmp	w6, #0x0
   39194:	sub	w4, w3, #0x1
   39198:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   3919c:	b.hi	39254 <aarch64_ins_sve_addr_zz_lsl@@Base+0xe4>  // b.pmore
   391a0:	add	w4, w6, w3
   391a4:	cmp	w4, #0x20
   391a8:	b.gt	39254 <aarch64_ins_sve_addr_zz_lsl@@Base+0xe4>
   391ac:	mov	w4, #0xffffffff            	// #-1
   391b0:	ldr	w7, [x2]
   391b4:	lsl	w3, w4, w3
   391b8:	bic	w3, w8, w3
   391bc:	lsl	w3, w3, w6
   391c0:	orr	w3, w3, w7
   391c4:	str	w3, [x2]
   391c8:	ldr	w6, [x0, #24]
   391cc:	ldr	w8, [x1, #20]
   391d0:	lsl	x6, x6, #3
   391d4:	add	x7, x6, x5
   391d8:	ldr	w6, [x6, x5]
   391dc:	ldr	w0, [x7, #4]
   391e0:	cmp	w6, #0x0
   391e4:	add	w7, w0, w4
   391e8:	ccmp	w7, #0x1e, #0x2, ge  // ge = tcont
   391ec:	b.hi	39254 <aarch64_ins_sve_addr_zz_lsl@@Base+0xe4>  // b.pmore
   391f0:	add	w7, w6, w0
   391f4:	cmp	w7, #0x20
   391f8:	b.gt	39254 <aarch64_ins_sve_addr_zz_lsl@@Base+0xe4>
   391fc:	lsl	w0, w4, w0
   39200:	bic	w0, w8, w0
   39204:	ldr	w7, [x5, #848]
   39208:	ldr	w5, [x5, #852]
   3920c:	lsl	w0, w0, w6
   39210:	cmp	w7, #0x0
   39214:	orr	w3, w0, w3
   39218:	add	w0, w5, w4
   3921c:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   39220:	ldr	x0, [x1, #40]
   39224:	str	w3, [x2]
   39228:	b.hi	39254 <aarch64_ins_sve_addr_zz_lsl@@Base+0xe4>  // b.pmore
   3922c:	add	w1, w7, w5
   39230:	cmp	w1, #0x20
   39234:	b.gt	39254 <aarch64_ins_sve_addr_zz_lsl@@Base+0xe4>
   39238:	lsl	w4, w4, w5
   3923c:	bic	w4, w0, w4
   39240:	mov	w0, #0x1                   	// #1
   39244:	lsl	w4, w4, w7
   39248:	orr	w3, w4, w3
   3924c:	str	w3, [x2]
   39250:	ret
   39254:	stp	x29, x30, [sp, #-16]!
   39258:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3925c:	add	x3, x3, #0xce8
   39260:	mov	x29, sp
   39264:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   39268:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3926c:	add	x3, x3, #0x60
   39270:	add	x1, x1, #0x610
   39274:	add	x0, x0, #0x6c0
   39278:	mov	w2, #0x169                 	// #361
   3927c:	bl	35ac0 <__assert_fail@plt>

0000000000039280 <aarch64_ins_sve_addr_zz_sxtw@@Base>:
   39280:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   39284:	ldr	w4, [x0, #20]
   39288:	ldr	w8, [x1, #16]
   3928c:	ldr	x5, [x5, #3944]
   39290:	lsl	x4, x4, #3
   39294:	add	x7, x4, x5
   39298:	ldr	w6, [x4, x5]
   3929c:	ldr	w3, [x7, #4]
   392a0:	cmp	w6, #0x0
   392a4:	sub	w4, w3, #0x1
   392a8:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   392ac:	b.hi	39364 <aarch64_ins_sve_addr_zz_sxtw@@Base+0xe4>  // b.pmore
   392b0:	add	w4, w6, w3
   392b4:	cmp	w4, #0x20
   392b8:	b.gt	39364 <aarch64_ins_sve_addr_zz_sxtw@@Base+0xe4>
   392bc:	mov	w4, #0xffffffff            	// #-1
   392c0:	ldr	w7, [x2]
   392c4:	lsl	w3, w4, w3
   392c8:	bic	w3, w8, w3
   392cc:	lsl	w3, w3, w6
   392d0:	orr	w3, w3, w7
   392d4:	str	w3, [x2]
   392d8:	ldr	w6, [x0, #24]
   392dc:	ldr	w8, [x1, #20]
   392e0:	lsl	x6, x6, #3
   392e4:	add	x7, x6, x5
   392e8:	ldr	w6, [x6, x5]
   392ec:	ldr	w0, [x7, #4]
   392f0:	cmp	w6, #0x0
   392f4:	add	w7, w0, w4
   392f8:	ccmp	w7, #0x1e, #0x2, ge  // ge = tcont
   392fc:	b.hi	39364 <aarch64_ins_sve_addr_zz_sxtw@@Base+0xe4>  // b.pmore
   39300:	add	w7, w6, w0
   39304:	cmp	w7, #0x20
   39308:	b.gt	39364 <aarch64_ins_sve_addr_zz_sxtw@@Base+0xe4>
   3930c:	lsl	w0, w4, w0
   39310:	bic	w0, w8, w0
   39314:	ldr	w7, [x5, #848]
   39318:	ldr	w5, [x5, #852]
   3931c:	lsl	w0, w0, w6
   39320:	cmp	w7, #0x0
   39324:	orr	w3, w0, w3
   39328:	add	w0, w5, w4
   3932c:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   39330:	ldr	x0, [x1, #40]
   39334:	str	w3, [x2]
   39338:	b.hi	39364 <aarch64_ins_sve_addr_zz_sxtw@@Base+0xe4>  // b.pmore
   3933c:	add	w1, w7, w5
   39340:	cmp	w1, #0x20
   39344:	b.gt	39364 <aarch64_ins_sve_addr_zz_sxtw@@Base+0xe4>
   39348:	lsl	w4, w4, w5
   3934c:	bic	w4, w0, w4
   39350:	mov	w0, #0x1                   	// #1
   39354:	lsl	w4, w4, w7
   39358:	orr	w3, w4, w3
   3935c:	str	w3, [x2]
   39360:	ret
   39364:	stp	x29, x30, [sp, #-16]!
   39368:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3936c:	add	x3, x3, #0xce8
   39370:	mov	x29, sp
   39374:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   39378:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3937c:	add	x3, x3, #0x60
   39380:	add	x1, x1, #0x610
   39384:	add	x0, x0, #0x6c0
   39388:	mov	w2, #0x169                 	// #361
   3938c:	bl	35ac0 <__assert_fail@plt>

0000000000039390 <aarch64_ins_sve_addr_zz_uxtw@@Base>:
   39390:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   39394:	ldr	w4, [x0, #20]
   39398:	ldr	w8, [x1, #16]
   3939c:	ldr	x5, [x5, #3944]
   393a0:	lsl	x4, x4, #3
   393a4:	add	x7, x4, x5
   393a8:	ldr	w6, [x4, x5]
   393ac:	ldr	w3, [x7, #4]
   393b0:	cmp	w6, #0x0
   393b4:	sub	w4, w3, #0x1
   393b8:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   393bc:	b.hi	39474 <aarch64_ins_sve_addr_zz_uxtw@@Base+0xe4>  // b.pmore
   393c0:	add	w4, w6, w3
   393c4:	cmp	w4, #0x20
   393c8:	b.gt	39474 <aarch64_ins_sve_addr_zz_uxtw@@Base+0xe4>
   393cc:	mov	w4, #0xffffffff            	// #-1
   393d0:	ldr	w7, [x2]
   393d4:	lsl	w3, w4, w3
   393d8:	bic	w3, w8, w3
   393dc:	lsl	w3, w3, w6
   393e0:	orr	w3, w3, w7
   393e4:	str	w3, [x2]
   393e8:	ldr	w6, [x0, #24]
   393ec:	ldr	w8, [x1, #20]
   393f0:	lsl	x6, x6, #3
   393f4:	add	x7, x6, x5
   393f8:	ldr	w6, [x6, x5]
   393fc:	ldr	w0, [x7, #4]
   39400:	cmp	w6, #0x0
   39404:	add	w7, w0, w4
   39408:	ccmp	w7, #0x1e, #0x2, ge  // ge = tcont
   3940c:	b.hi	39474 <aarch64_ins_sve_addr_zz_uxtw@@Base+0xe4>  // b.pmore
   39410:	add	w7, w6, w0
   39414:	cmp	w7, #0x20
   39418:	b.gt	39474 <aarch64_ins_sve_addr_zz_uxtw@@Base+0xe4>
   3941c:	lsl	w0, w4, w0
   39420:	bic	w0, w8, w0
   39424:	ldr	w7, [x5, #848]
   39428:	ldr	w5, [x5, #852]
   3942c:	lsl	w0, w0, w6
   39430:	cmp	w7, #0x0
   39434:	orr	w3, w0, w3
   39438:	add	w0, w5, w4
   3943c:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   39440:	ldr	x0, [x1, #40]
   39444:	str	w3, [x2]
   39448:	b.hi	39474 <aarch64_ins_sve_addr_zz_uxtw@@Base+0xe4>  // b.pmore
   3944c:	add	w1, w7, w5
   39450:	cmp	w1, #0x20
   39454:	b.gt	39474 <aarch64_ins_sve_addr_zz_uxtw@@Base+0xe4>
   39458:	lsl	w4, w4, w5
   3945c:	bic	w4, w0, w4
   39460:	mov	w0, #0x1                   	// #1
   39464:	lsl	w4, w4, w7
   39468:	orr	w3, w4, w3
   3946c:	str	w3, [x2]
   39470:	ret
   39474:	stp	x29, x30, [sp, #-16]!
   39478:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3947c:	add	x3, x3, #0xce8
   39480:	mov	x29, sp
   39484:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   39488:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3948c:	add	x3, x3, #0x60
   39490:	add	x1, x1, #0x610
   39494:	add	x0, x0, #0x6c0
   39498:	mov	w2, #0x169                 	// #361
   3949c:	bl	35ac0 <__assert_fail@plt>

00000000000394a0 <aarch64_ins_sve_aimm@@Base>:
   394a0:	ldr	x3, [x1, #40]
   394a4:	ldr	x1, [x1, #16]
   394a8:	cmp	x3, #0x8
   394ac:	b.eq	39654 <aarch64_ins_sve_aimm@@Base+0x1b4>  // b.none
   394b0:	cbz	x1, 394bc <aarch64_ins_sve_aimm@@Base+0x1c>
   394b4:	tst	w1, #0xff
   394b8:	b.eq	39674 <aarch64_ins_sve_aimm@@Base+0x1d4>  // b.none
   394bc:	ldr	w3, [x0, #32]
   394c0:	and	w1, w1, #0xff
   394c4:	cbnz	w3, 394e8 <aarch64_ins_sve_aimm@@Base+0x48>
   394c8:	ldr	w3, [x0, #28]
   394cc:	cbnz	w3, 39544 <aarch64_ins_sve_aimm@@Base+0xa4>
   394d0:	ldr	w3, [x0, #24]
   394d4:	cbnz	w3, 395a0 <aarch64_ins_sve_aimm@@Base+0x100>
   394d8:	ldr	w0, [x0, #20]
   394dc:	cbnz	w0, 395fc <aarch64_ins_sve_aimm@@Base+0x15c>
   394e0:	mov	w0, #0x1                   	// #1
   394e4:	ret
   394e8:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   394ec:	ubfiz	x3, x3, #3, #32
   394f0:	ldr	x4, [x4, #3944]
   394f4:	add	x6, x3, x4
   394f8:	ldr	w4, [x3, x4]
   394fc:	ldr	w5, [x6, #4]
   39500:	cmp	w4, #0x0
   39504:	sub	w3, w5, #0x1
   39508:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   3950c:	b.hi	396e8 <aarch64_ins_sve_aimm@@Base+0x248>  // b.pmore
   39510:	add	w3, w4, w5
   39514:	cmp	w3, #0x20
   39518:	b.gt	396e8 <aarch64_ins_sve_aimm@@Base+0x248>
   3951c:	mov	w3, #0xffffffff            	// #-1
   39520:	lsl	w3, w3, w5
   39524:	bic	w3, w1, w3
   39528:	lsr	w1, w1, w5
   3952c:	ldr	w5, [x2]
   39530:	lsl	w3, w3, w4
   39534:	orr	w3, w5, w3
   39538:	str	w3, [x2]
   3953c:	ldr	w3, [x0, #28]
   39540:	cbz	w3, 394d0 <aarch64_ins_sve_aimm@@Base+0x30>
   39544:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   39548:	ubfiz	x3, x3, #3, #32
   3954c:	ldr	x4, [x4, #3944]
   39550:	add	x6, x3, x4
   39554:	ldr	w5, [x3, x4]
   39558:	ldr	w4, [x6, #4]
   3955c:	cmp	w5, #0x0
   39560:	sub	w3, w4, #0x1
   39564:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   39568:	b.hi	396e8 <aarch64_ins_sve_aimm@@Base+0x248>  // b.pmore
   3956c:	add	w3, w5, w4
   39570:	cmp	w3, #0x20
   39574:	b.gt	396e8 <aarch64_ins_sve_aimm@@Base+0x248>
   39578:	mov	w3, #0xffffffff            	// #-1
   3957c:	lsl	w3, w3, w4
   39580:	bic	w3, w1, w3
   39584:	lsr	w1, w1, w4
   39588:	ldr	w4, [x2]
   3958c:	lsl	w3, w3, w5
   39590:	orr	w3, w4, w3
   39594:	str	w3, [x2]
   39598:	ldr	w3, [x0, #24]
   3959c:	cbz	w3, 394d8 <aarch64_ins_sve_aimm@@Base+0x38>
   395a0:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   395a4:	ubfiz	x3, x3, #3, #32
   395a8:	ldr	x4, [x4, #3944]
   395ac:	add	x6, x3, x4
   395b0:	ldr	w5, [x3, x4]
   395b4:	ldr	w4, [x6, #4]
   395b8:	cmp	w5, #0x0
   395bc:	sub	w3, w4, #0x1
   395c0:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   395c4:	b.hi	396e8 <aarch64_ins_sve_aimm@@Base+0x248>  // b.pmore
   395c8:	add	w3, w5, w4
   395cc:	cmp	w3, #0x20
   395d0:	b.gt	396e8 <aarch64_ins_sve_aimm@@Base+0x248>
   395d4:	mov	w3, #0xffffffff            	// #-1
   395d8:	lsl	w3, w3, w4
   395dc:	bic	w3, w1, w3
   395e0:	lsr	w1, w1, w4
   395e4:	ldr	w4, [x2]
   395e8:	lsl	w3, w3, w5
   395ec:	orr	w3, w4, w3
   395f0:	str	w3, [x2]
   395f4:	ldr	w0, [x0, #20]
   395f8:	cbz	w0, 394e0 <aarch64_ins_sve_aimm@@Base+0x40>
   395fc:	adrp	x3, a6000 <aarch64_operands@@Base+0x16bd0>
   39600:	ubfiz	x0, x0, #3, #32
   39604:	ldr	x3, [x3, #3944]
   39608:	add	x5, x0, x3
   3960c:	ldr	w4, [x0, x3]
   39610:	ldr	w5, [x5, #4]
   39614:	cmp	w4, #0x0
   39618:	sub	w0, w5, #0x1
   3961c:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   39620:	b.hi	396e8 <aarch64_ins_sve_aimm@@Base+0x248>  // b.pmore
   39624:	add	w0, w4, w5
   39628:	cmp	w0, #0x20
   3962c:	b.gt	396e8 <aarch64_ins_sve_aimm@@Base+0x248>
   39630:	mov	w0, #0xffffffff            	// #-1
   39634:	ldr	w3, [x2]
   39638:	lsl	w0, w0, w5
   3963c:	bic	w1, w1, w0
   39640:	mov	w0, #0x1                   	// #1
   39644:	lsl	w1, w1, w4
   39648:	orr	w1, w3, w1
   3964c:	str	w1, [x2]
   39650:	ret
   39654:	ldr	w3, [x0, #32]
   39658:	and	w1, w1, #0xff
   3965c:	orr	w1, w1, #0x100
   39660:	cbz	w3, 394c8 <aarch64_ins_sve_aimm@@Base+0x28>
   39664:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   39668:	ubfiz	x3, x3, #3, #32
   3966c:	ldr	x4, [x4, #3944]
   39670:	b	3969c <aarch64_ins_sve_aimm@@Base+0x1fc>
   39674:	cmp	x1, #0x0
   39678:	add	x3, x1, #0xff
   3967c:	ldr	w4, [x0, #32]
   39680:	csel	x1, x3, x1, lt  // lt = tstop
   39684:	ubfx	w1, w1, #8, #8
   39688:	orr	w1, w1, #0x100
   3968c:	cbz	w4, 394c8 <aarch64_ins_sve_aimm@@Base+0x28>
   39690:	adrp	x3, a6000 <aarch64_operands@@Base+0x16bd0>
   39694:	ubfiz	x4, x4, #3, #32
   39698:	ldr	x3, [x3, #3944]
   3969c:	add	x6, x3, x4
   396a0:	ldr	w5, [x3, x4]
   396a4:	ldr	w4, [x6, #4]
   396a8:	cmp	w5, #0x0
   396ac:	sub	w3, w4, #0x1
   396b0:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   396b4:	b.hi	396e8 <aarch64_ins_sve_aimm@@Base+0x248>  // b.pmore
   396b8:	add	w3, w4, w5
   396bc:	cmp	w3, #0x20
   396c0:	b.gt	396e8 <aarch64_ins_sve_aimm@@Base+0x248>
   396c4:	mov	w3, #0xffffffff            	// #-1
   396c8:	lsl	w3, w3, w4
   396cc:	bic	w3, w1, w3
   396d0:	lsr	w1, w1, w4
   396d4:	ldr	w4, [x2]
   396d8:	lsl	w3, w3, w5
   396dc:	orr	w3, w4, w3
   396e0:	str	w3, [x2]
   396e4:	b	394c8 <aarch64_ins_sve_aimm@@Base+0x28>
   396e8:	stp	x29, x30, [sp, #-16]!
   396ec:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   396f0:	add	x3, x3, #0xce8
   396f4:	mov	x29, sp
   396f8:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   396fc:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   39700:	add	x3, x3, #0x60
   39704:	add	x1, x1, #0x610
   39708:	add	x0, x0, #0x6c0
   3970c:	mov	w2, #0x169                 	// #361
   39710:	bl	35ac0 <__assert_fail@plt>
   39714:	nop

0000000000039718 <aarch64_ins_sve_asimm@@Base>:
   39718:	b	35920 <aarch64_ins_sve_aimm@plt>
   3971c:	nop

0000000000039720 <aarch64_ins_sve_index@@Base>:
   39720:	stp	x29, x30, [sp, #-48]!
   39724:	mov	x29, sp
   39728:	stp	x19, x20, [sp, #16]
   3972c:	mov	x19, x1
   39730:	mov	x20, x2
   39734:	str	x21, [sp, #32]
   39738:	mov	x21, x0
   3973c:	ldrb	w0, [x1, #4]
   39740:	bl	35680 <aarch64_get_qualifier_esize@plt>
   39744:	and	w1, w0, #0xff
   39748:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   3974c:	ldr	w4, [x21, #20]
   39750:	ldr	w5, [x19, #16]
   39754:	ldr	x2, [x2, #3944]
   39758:	lsl	x4, x4, #3
   3975c:	add	x0, x4, x2
   39760:	ldr	w2, [x4, x2]
   39764:	ldr	w0, [x0, #4]
   39768:	cmp	w2, #0x0
   3976c:	sub	w4, w0, #0x1
   39770:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   39774:	b.hi	397d8 <aarch64_ins_sve_index@@Base+0xb8>  // b.pmore
   39778:	add	w3, w2, w0
   3977c:	cmp	w3, #0x20
   39780:	b.gt	397d8 <aarch64_ins_sve_index@@Base+0xb8>
   39784:	mov	w3, #0xffffffff            	// #-1
   39788:	ldr	w4, [x20]
   3978c:	lsl	w3, w3, w0
   39790:	bic	w3, w5, w3
   39794:	mov	x0, x20
   39798:	mov	w5, #0x74                  	// #116
   3979c:	lsl	w3, w3, w2
   397a0:	orr	w3, w4, w3
   397a4:	str	w3, [x20]
   397a8:	mov	w2, #0x0                   	// #0
   397ac:	mov	w4, #0x2b                  	// #43
   397b0:	mov	w3, #0x2                   	// #2
   397b4:	ldr	x6, [x19, #24]
   397b8:	lsl	x6, x6, #1
   397bc:	madd	w1, w1, w6, w1
   397c0:	bl	361c0 <init_disassemble_info@@Base+0x110>
   397c4:	mov	w0, #0x1                   	// #1
   397c8:	ldp	x19, x20, [sp, #16]
   397cc:	ldr	x21, [sp, #32]
   397d0:	ldp	x29, x30, [sp], #48
   397d4:	ret
   397d8:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   397dc:	add	x3, x3, #0xce8
   397e0:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   397e4:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   397e8:	add	x3, x3, #0x60
   397ec:	add	x1, x1, #0x610
   397f0:	add	x0, x0, #0x6c0
   397f4:	mov	w2, #0x169                 	// #361
   397f8:	bl	35ac0 <__assert_fail@plt>
   397fc:	nop

0000000000039800 <aarch64_ins_sve_limm_mov@@Base>:
   39800:	b	353a0 <aarch64_ins_limm@plt>
   39804:	nop

0000000000039808 <aarch64_ins_sve_quad_index@@Base>:
   39808:	stp	x29, x30, [sp, #-16]!
   3980c:	mov	x29, sp
   39810:	ldr	w3, [x0, #16]
   39814:	ldr	w5, [x1, #16]
   39818:	ubfx	x3, x3, #5, #3
   3981c:	lsr	w4, w5, w3
   39820:	cbnz	w4, 399f0 <aarch64_ins_sve_quad_index@@Base+0x1e8>
   39824:	ldr	w4, [x0, #32]
   39828:	ldr	x1, [x1, #24]
   3982c:	lsl	x3, x1, x3
   39830:	add	w1, w5, w3
   39834:	cbnz	w4, 3985c <aarch64_ins_sve_quad_index@@Base+0x54>
   39838:	ldr	w3, [x0, #28]
   3983c:	cbnz	w3, 398b8 <aarch64_ins_sve_quad_index@@Base+0xb0>
   39840:	ldr	w3, [x0, #24]
   39844:	cbnz	w3, 39914 <aarch64_ins_sve_quad_index@@Base+0x10c>
   39848:	ldr	w0, [x0, #20]
   3984c:	cbnz	w0, 39970 <aarch64_ins_sve_quad_index@@Base+0x168>
   39850:	mov	w0, #0x1                   	// #1
   39854:	ldp	x29, x30, [sp], #16
   39858:	ret
   3985c:	adrp	x3, a6000 <aarch64_operands@@Base+0x16bd0>
   39860:	ubfiz	x4, x4, #3, #32
   39864:	ldr	x3, [x3, #3944]
   39868:	add	x6, x4, x3
   3986c:	ldr	w5, [x4, x3]
   39870:	ldr	w4, [x6, #4]
   39874:	cmp	w5, #0x0
   39878:	sub	w3, w4, #0x1
   3987c:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   39880:	b.hi	399cc <aarch64_ins_sve_quad_index@@Base+0x1c4>  // b.pmore
   39884:	add	w3, w4, w5
   39888:	cmp	w3, #0x20
   3988c:	b.gt	399cc <aarch64_ins_sve_quad_index@@Base+0x1c4>
   39890:	mov	w3, #0xffffffff            	// #-1
   39894:	lsl	w3, w3, w4
   39898:	bic	w3, w1, w3
   3989c:	lsr	w1, w1, w4
   398a0:	ldr	w4, [x2]
   398a4:	lsl	w3, w3, w5
   398a8:	orr	w3, w4, w3
   398ac:	str	w3, [x2]
   398b0:	ldr	w3, [x0, #28]
   398b4:	cbz	w3, 39840 <aarch64_ins_sve_quad_index@@Base+0x38>
   398b8:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   398bc:	ubfiz	x3, x3, #3, #32
   398c0:	ldr	x4, [x4, #3944]
   398c4:	add	x6, x3, x4
   398c8:	ldr	w5, [x3, x4]
   398cc:	ldr	w4, [x6, #4]
   398d0:	cmp	w5, #0x0
   398d4:	sub	w3, w4, #0x1
   398d8:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   398dc:	b.hi	399cc <aarch64_ins_sve_quad_index@@Base+0x1c4>  // b.pmore
   398e0:	add	w3, w5, w4
   398e4:	cmp	w3, #0x20
   398e8:	b.gt	399cc <aarch64_ins_sve_quad_index@@Base+0x1c4>
   398ec:	mov	w3, #0xffffffff            	// #-1
   398f0:	lsl	w3, w3, w4
   398f4:	bic	w3, w1, w3
   398f8:	lsr	w1, w1, w4
   398fc:	ldr	w4, [x2]
   39900:	lsl	w3, w3, w5
   39904:	orr	w3, w4, w3
   39908:	str	w3, [x2]
   3990c:	ldr	w3, [x0, #24]
   39910:	cbz	w3, 39848 <aarch64_ins_sve_quad_index@@Base+0x40>
   39914:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   39918:	ubfiz	x3, x3, #3, #32
   3991c:	ldr	x4, [x4, #3944]
   39920:	add	x6, x3, x4
   39924:	ldr	w5, [x3, x4]
   39928:	ldr	w4, [x6, #4]
   3992c:	cmp	w5, #0x0
   39930:	sub	w3, w4, #0x1
   39934:	ccmp	w3, #0x1e, #0x2, ge  // ge = tcont
   39938:	b.hi	399cc <aarch64_ins_sve_quad_index@@Base+0x1c4>  // b.pmore
   3993c:	add	w3, w5, w4
   39940:	cmp	w3, #0x20
   39944:	b.gt	399cc <aarch64_ins_sve_quad_index@@Base+0x1c4>
   39948:	mov	w3, #0xffffffff            	// #-1
   3994c:	lsl	w3, w3, w4
   39950:	bic	w3, w1, w3
   39954:	lsr	w1, w1, w4
   39958:	ldr	w4, [x2]
   3995c:	lsl	w3, w3, w5
   39960:	orr	w3, w4, w3
   39964:	str	w3, [x2]
   39968:	ldr	w0, [x0, #20]
   3996c:	cbz	w0, 39850 <aarch64_ins_sve_quad_index@@Base+0x48>
   39970:	adrp	x3, a6000 <aarch64_operands@@Base+0x16bd0>
   39974:	ubfiz	x0, x0, #3, #32
   39978:	ldr	x3, [x3, #3944]
   3997c:	add	x5, x0, x3
   39980:	ldr	w4, [x0, x3]
   39984:	ldr	w5, [x5, #4]
   39988:	cmp	w4, #0x0
   3998c:	sub	w0, w5, #0x1
   39990:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   39994:	b.hi	399cc <aarch64_ins_sve_quad_index@@Base+0x1c4>  // b.pmore
   39998:	add	w0, w4, w5
   3999c:	cmp	w0, #0x20
   399a0:	b.gt	399cc <aarch64_ins_sve_quad_index@@Base+0x1c4>
   399a4:	mov	w0, #0xffffffff            	// #-1
   399a8:	ldr	w3, [x2]
   399ac:	lsl	w0, w0, w5
   399b0:	bic	w1, w1, w0
   399b4:	mov	w0, #0x1                   	// #1
   399b8:	lsl	w1, w1, w4
   399bc:	orr	w1, w3, w1
   399c0:	str	w1, [x2]
   399c4:	ldp	x29, x30, [sp], #16
   399c8:	ret
   399cc:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   399d0:	add	x3, x3, #0xce8
   399d4:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   399d8:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   399dc:	add	x3, x3, #0x60
   399e0:	add	x1, x1, #0x610
   399e4:	add	x0, x0, #0x6c0
   399e8:	mov	w2, #0x169                 	// #361
   399ec:	bl	35ac0 <__assert_fail@plt>
   399f0:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   399f4:	add	x3, x3, #0xce8
   399f8:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   399fc:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   39a00:	add	x3, x3, #0x1b8
   39a04:	add	x1, x1, #0x658
   39a08:	add	x0, x0, #0x9d0
   39a0c:	mov	w2, #0x4a2                 	// #1186
   39a10:	bl	35ac0 <__assert_fail@plt>
   39a14:	nop

0000000000039a18 <aarch64_ins_sve_reglist@@Base>:
   39a18:	adrp	x3, a6000 <aarch64_operands@@Base+0x16bd0>
   39a1c:	ldr	w0, [x0, #20]
   39a20:	ldrb	w1, [x1, #16]
   39a24:	ldr	x3, [x3, #3944]
   39a28:	lsl	x0, x0, #3
   39a2c:	and	w4, w1, #0x1f
   39a30:	add	x1, x0, x3
   39a34:	ldr	w3, [x0, x3]
   39a38:	ldr	w0, [x1, #4]
   39a3c:	cmp	w3, #0x0
   39a40:	sub	w1, w0, #0x1
   39a44:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   39a48:	b.hi	39a7c <aarch64_ins_sve_reglist@@Base+0x64>  // b.pmore
   39a4c:	add	w1, w3, w0
   39a50:	cmp	w1, #0x20
   39a54:	b.gt	39a7c <aarch64_ins_sve_reglist@@Base+0x64>
   39a58:	mov	w1, #0xffffffff            	// #-1
   39a5c:	ldr	w5, [x2]
   39a60:	lsl	w1, w1, w0
   39a64:	bic	w1, w4, w1
   39a68:	mov	w0, #0x1                   	// #1
   39a6c:	lsl	w1, w1, w3
   39a70:	orr	w1, w5, w1
   39a74:	str	w1, [x2]
   39a78:	ret
   39a7c:	stp	x29, x30, [sp, #-16]!
   39a80:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   39a84:	add	x3, x3, #0xce8
   39a88:	mov	x29, sp
   39a8c:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   39a90:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   39a94:	add	x3, x3, #0x60
   39a98:	add	x1, x1, #0x610
   39a9c:	add	x0, x0, #0x6c0
   39aa0:	mov	w2, #0x169                 	// #361
   39aa4:	bl	35ac0 <__assert_fail@plt>

0000000000039aa8 <aarch64_ins_sve_scale@@Base>:
   39aa8:	ldr	w5, [x0, #32]
   39aac:	adrp	x3, a6000 <aarch64_operands@@Base+0x16bd0>
   39ab0:	ldr	x6, [x1, #16]
   39ab4:	mov	w4, w6
   39ab8:	cbnz	w5, 39b28 <aarch64_ins_sve_scale@@Base+0x80>
   39abc:	ldr	w5, [x0, #28]
   39ac0:	cbnz	w5, 39b80 <aarch64_ins_sve_scale@@Base+0xd8>
   39ac4:	ldr	w5, [x0, #24]
   39ac8:	cbnz	w5, 39bd8 <aarch64_ins_sve_scale@@Base+0x130>
   39acc:	ldr	w0, [x0, #20]
   39ad0:	cbnz	w0, 39c30 <aarch64_ins_sve_scale@@Base+0x188>
   39ad4:	ldr	x3, [x3, #3944]
   39ad8:	ldr	x0, [x1, #40]
   39adc:	ldr	w4, [x3, #776]
   39ae0:	ldr	w3, [x3, #780]
   39ae4:	sub	w0, w0, #0x1
   39ae8:	cmp	w4, #0x0
   39aec:	sub	w1, w3, #0x1
   39af0:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   39af4:	b.hi	39c80 <aarch64_ins_sve_scale@@Base+0x1d8>  // b.pmore
   39af8:	add	w1, w4, w3
   39afc:	cmp	w1, #0x20
   39b00:	b.gt	39c80 <aarch64_ins_sve_scale@@Base+0x1d8>
   39b04:	mov	w1, #0xffffffff            	// #-1
   39b08:	ldr	w5, [x2]
   39b0c:	lsl	w1, w1, w3
   39b10:	bic	w1, w0, w1
   39b14:	mov	w0, #0x1                   	// #1
   39b18:	lsl	w1, w1, w4
   39b1c:	orr	w1, w5, w1
   39b20:	str	w1, [x2]
   39b24:	ret
   39b28:	ldr	x4, [x3, #3944]
   39b2c:	ubfiz	x5, x5, #3, #32
   39b30:	add	x9, x5, x4
   39b34:	ldr	w7, [x5, x4]
   39b38:	ldr	w8, [x9, #4]
   39b3c:	cmp	w7, #0x0
   39b40:	sub	w4, w8, #0x1
   39b44:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   39b48:	b.hi	39c80 <aarch64_ins_sve_scale@@Base+0x1d8>  // b.pmore
   39b4c:	add	w4, w8, w7
   39b50:	cmp	w4, #0x20
   39b54:	b.gt	39c80 <aarch64_ins_sve_scale@@Base+0x1d8>
   39b58:	mov	w5, #0xffffffff            	// #-1
   39b5c:	lsr	w4, w6, w8
   39b60:	lsl	w5, w5, w8
   39b64:	ldr	w8, [x2]
   39b68:	bic	w5, w6, w5
   39b6c:	lsl	w5, w5, w7
   39b70:	orr	w5, w8, w5
   39b74:	str	w5, [x2]
   39b78:	ldr	w5, [x0, #28]
   39b7c:	cbz	w5, 39ac4 <aarch64_ins_sve_scale@@Base+0x1c>
   39b80:	ldr	x6, [x3, #3944]
   39b84:	ubfiz	x5, x5, #3, #32
   39b88:	add	x8, x5, x6
   39b8c:	ldr	w7, [x5, x6]
   39b90:	ldr	w6, [x8, #4]
   39b94:	cmp	w7, #0x0
   39b98:	sub	w5, w6, #0x1
   39b9c:	ccmp	w5, #0x1e, #0x2, ge  // ge = tcont
   39ba0:	b.hi	39c80 <aarch64_ins_sve_scale@@Base+0x1d8>  // b.pmore
   39ba4:	add	w5, w7, w6
   39ba8:	cmp	w5, #0x20
   39bac:	b.gt	39c80 <aarch64_ins_sve_scale@@Base+0x1d8>
   39bb0:	mov	w5, #0xffffffff            	// #-1
   39bb4:	lsl	w5, w5, w6
   39bb8:	bic	w5, w4, w5
   39bbc:	lsr	w4, w4, w6
   39bc0:	ldr	w6, [x2]
   39bc4:	lsl	w5, w5, w7
   39bc8:	orr	w5, w6, w5
   39bcc:	str	w5, [x2]
   39bd0:	ldr	w5, [x0, #24]
   39bd4:	cbz	w5, 39acc <aarch64_ins_sve_scale@@Base+0x24>
   39bd8:	ldr	x6, [x3, #3944]
   39bdc:	ubfiz	x5, x5, #3, #32
   39be0:	add	x8, x5, x6
   39be4:	ldr	w7, [x5, x6]
   39be8:	ldr	w6, [x8, #4]
   39bec:	cmp	w7, #0x0
   39bf0:	sub	w5, w6, #0x1
   39bf4:	ccmp	w5, #0x1e, #0x2, ge  // ge = tcont
   39bf8:	b.hi	39c80 <aarch64_ins_sve_scale@@Base+0x1d8>  // b.pmore
   39bfc:	add	w5, w7, w6
   39c00:	cmp	w5, #0x20
   39c04:	b.gt	39c80 <aarch64_ins_sve_scale@@Base+0x1d8>
   39c08:	mov	w5, #0xffffffff            	// #-1
   39c0c:	lsl	w5, w5, w6
   39c10:	bic	w5, w4, w5
   39c14:	lsr	w4, w4, w6
   39c18:	ldr	w6, [x2]
   39c1c:	lsl	w5, w5, w7
   39c20:	orr	w5, w6, w5
   39c24:	str	w5, [x2]
   39c28:	ldr	w0, [x0, #20]
   39c2c:	cbz	w0, 39ad4 <aarch64_ins_sve_scale@@Base+0x2c>
   39c30:	ldr	x5, [x3, #3944]
   39c34:	ubfiz	x0, x0, #3, #32
   39c38:	add	x7, x0, x5
   39c3c:	ldr	w6, [x0, x5]
   39c40:	ldr	w7, [x7, #4]
   39c44:	cmp	w6, #0x0
   39c48:	sub	w0, w7, #0x1
   39c4c:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   39c50:	b.hi	39c80 <aarch64_ins_sve_scale@@Base+0x1d8>  // b.pmore
   39c54:	add	w0, w6, w7
   39c58:	cmp	w0, #0x20
   39c5c:	b.gt	39c80 <aarch64_ins_sve_scale@@Base+0x1d8>
   39c60:	mov	w0, #0xffffffff            	// #-1
   39c64:	ldr	w5, [x2]
   39c68:	lsl	w0, w0, w7
   39c6c:	bic	w4, w4, w0
   39c70:	lsl	w4, w4, w6
   39c74:	orr	w4, w5, w4
   39c78:	str	w4, [x2]
   39c7c:	b	39ad4 <aarch64_ins_sve_scale@@Base+0x2c>
   39c80:	stp	x29, x30, [sp, #-16]!
   39c84:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   39c88:	add	x3, x3, #0xce8
   39c8c:	mov	x29, sp
   39c90:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   39c94:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   39c98:	add	x3, x3, #0x60
   39c9c:	add	x1, x1, #0x610
   39ca0:	add	x0, x0, #0x6c0
   39ca4:	mov	w2, #0x169                 	// #361
   39ca8:	bl	35ac0 <__assert_fail@plt>
   39cac:	nop

0000000000039cb0 <aarch64_ins_sve_shlimm@@Base>:
   39cb0:	stp	x29, x30, [sp, #-48]!
   39cb4:	mov	x29, sp
   39cb8:	stp	x19, x20, [sp, #16]
   39cbc:	mov	x19, x0
   39cc0:	ldr	w0, [x1, #8]
   39cc4:	str	x21, [sp, #32]
   39cc8:	cmp	w0, #0x0
   39ccc:	b.le	39ec8 <aarch64_ins_sve_shlimm@@Base+0x218>
   39cd0:	sub	w0, w0, #0x1
   39cd4:	mov	x21, x1
   39cd8:	mov	x20, x2
   39cdc:	sbfiz	x4, x0, #3, #32
   39ce0:	sub	x0, x4, w0, sxtw
   39ce4:	add	x0, x3, x0, lsl #3
   39ce8:	ldrb	w0, [x0, #28]
   39cec:	bl	35680 <aarch64_get_qualifier_esize@plt>
   39cf0:	ldr	w1, [x19, #32]
   39cf4:	ldr	x2, [x21, #16]
   39cf8:	add	w0, w2, w0, uxtb #3
   39cfc:	cbnz	w1, 39d2c <aarch64_ins_sve_shlimm@@Base+0x7c>
   39d00:	ldr	w1, [x19, #28]
   39d04:	cbnz	w1, 39d88 <aarch64_ins_sve_shlimm@@Base+0xd8>
   39d08:	ldr	w1, [x19, #24]
   39d0c:	cbnz	w1, 39de4 <aarch64_ins_sve_shlimm@@Base+0x134>
   39d10:	ldr	w1, [x19, #20]
   39d14:	cbnz	w1, 39e40 <aarch64_ins_sve_shlimm@@Base+0x190>
   39d18:	mov	w0, #0x1                   	// #1
   39d1c:	ldp	x19, x20, [sp, #16]
   39d20:	ldr	x21, [sp, #32]
   39d24:	ldp	x29, x30, [sp], #48
   39d28:	ret
   39d2c:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   39d30:	ubfiz	x1, x1, #3, #32
   39d34:	ldr	x2, [x2, #3944]
   39d38:	add	x4, x1, x2
   39d3c:	ldr	w3, [x1, x2]
   39d40:	ldr	w2, [x4, #4]
   39d44:	cmp	w3, #0x0
   39d48:	sub	w1, w2, #0x1
   39d4c:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   39d50:	b.hi	39ea4 <aarch64_ins_sve_shlimm@@Base+0x1f4>  // b.pmore
   39d54:	add	w1, w2, w3
   39d58:	cmp	w1, #0x20
   39d5c:	b.gt	39ea4 <aarch64_ins_sve_shlimm@@Base+0x1f4>
   39d60:	mov	w1, #0xffffffff            	// #-1
   39d64:	lsl	w1, w1, w2
   39d68:	bic	w1, w0, w1
   39d6c:	lsr	w0, w0, w2
   39d70:	ldr	w2, [x20]
   39d74:	lsl	w1, w1, w3
   39d78:	orr	w1, w2, w1
   39d7c:	str	w1, [x20]
   39d80:	ldr	w1, [x19, #28]
   39d84:	cbz	w1, 39d08 <aarch64_ins_sve_shlimm@@Base+0x58>
   39d88:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   39d8c:	ubfiz	x1, x1, #3, #32
   39d90:	ldr	x2, [x2, #3944]
   39d94:	add	x4, x1, x2
   39d98:	ldr	w3, [x1, x2]
   39d9c:	ldr	w2, [x4, #4]
   39da0:	cmp	w3, #0x0
   39da4:	sub	w1, w2, #0x1
   39da8:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   39dac:	b.hi	39ea4 <aarch64_ins_sve_shlimm@@Base+0x1f4>  // b.pmore
   39db0:	add	w1, w3, w2
   39db4:	cmp	w1, #0x20
   39db8:	b.gt	39ea4 <aarch64_ins_sve_shlimm@@Base+0x1f4>
   39dbc:	mov	w1, #0xffffffff            	// #-1
   39dc0:	lsl	w1, w1, w2
   39dc4:	bic	w1, w0, w1
   39dc8:	lsr	w0, w0, w2
   39dcc:	ldr	w2, [x20]
   39dd0:	lsl	w1, w1, w3
   39dd4:	orr	w1, w2, w1
   39dd8:	str	w1, [x20]
   39ddc:	ldr	w1, [x19, #24]
   39de0:	cbz	w1, 39d10 <aarch64_ins_sve_shlimm@@Base+0x60>
   39de4:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   39de8:	ubfiz	x1, x1, #3, #32
   39dec:	ldr	x2, [x2, #3944]
   39df0:	add	x4, x1, x2
   39df4:	ldr	w3, [x1, x2]
   39df8:	ldr	w2, [x4, #4]
   39dfc:	cmp	w3, #0x0
   39e00:	sub	w1, w2, #0x1
   39e04:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   39e08:	b.hi	39ea4 <aarch64_ins_sve_shlimm@@Base+0x1f4>  // b.pmore
   39e0c:	add	w1, w3, w2
   39e10:	cmp	w1, #0x20
   39e14:	b.gt	39ea4 <aarch64_ins_sve_shlimm@@Base+0x1f4>
   39e18:	mov	w1, #0xffffffff            	// #-1
   39e1c:	lsl	w1, w1, w2
   39e20:	bic	w1, w0, w1
   39e24:	lsr	w0, w0, w2
   39e28:	ldr	w2, [x20]
   39e2c:	lsl	w1, w1, w3
   39e30:	orr	w1, w2, w1
   39e34:	str	w1, [x20]
   39e38:	ldr	w1, [x19, #20]
   39e3c:	cbz	w1, 39d18 <aarch64_ins_sve_shlimm@@Base+0x68>
   39e40:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   39e44:	ubfiz	x1, x1, #3, #32
   39e48:	ldr	x2, [x2, #3944]
   39e4c:	add	x4, x1, x2
   39e50:	ldr	w3, [x1, x2]
   39e54:	ldr	w4, [x4, #4]
   39e58:	cmp	w3, #0x0
   39e5c:	sub	w1, w4, #0x1
   39e60:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   39e64:	b.hi	39ea4 <aarch64_ins_sve_shlimm@@Base+0x1f4>  // b.pmore
   39e68:	add	w1, w3, w4
   39e6c:	cmp	w1, #0x20
   39e70:	b.gt	39ea4 <aarch64_ins_sve_shlimm@@Base+0x1f4>
   39e74:	mov	w1, #0xffffffff            	// #-1
   39e78:	ldr	w2, [x20]
   39e7c:	lsl	w1, w1, w4
   39e80:	bic	w0, w0, w1
   39e84:	ldr	x21, [sp, #32]
   39e88:	lsl	w0, w0, w3
   39e8c:	orr	w0, w2, w0
   39e90:	str	w0, [x20]
   39e94:	mov	w0, #0x1                   	// #1
   39e98:	ldp	x19, x20, [sp, #16]
   39e9c:	ldp	x29, x30, [sp], #48
   39ea0:	ret
   39ea4:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   39ea8:	add	x3, x3, #0xce8
   39eac:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   39eb0:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   39eb4:	add	x3, x3, #0x60
   39eb8:	add	x1, x1, #0x610
   39ebc:	add	x0, x0, #0x6c0
   39ec0:	mov	w2, #0x169                 	// #361
   39ec4:	bl	35ac0 <__assert_fail@plt>
   39ec8:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   39ecc:	add	x3, x3, #0xce8
   39ed0:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   39ed4:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   39ed8:	add	x3, x3, #0x1d8
   39edc:	add	x1, x1, #0x658
   39ee0:	add	x0, x0, #0x9f8
   39ee4:	mov	w2, #0x4cc                 	// #1228
   39ee8:	bl	35ac0 <__assert_fail@plt>
   39eec:	nop

0000000000039ef0 <aarch64_ins_sve_shrimm@@Base>:
   39ef0:	stp	x29, x30, [sp, #-48]!
   39ef4:	mov	x29, sp
   39ef8:	stp	x19, x20, [sp, #16]
   39efc:	mov	x19, x1
   39f00:	ldr	w1, [x0, #16]
   39f04:	ldr	w4, [x19, #8]
   39f08:	str	x21, [sp, #32]
   39f0c:	ubfx	x1, x1, #5, #3
   39f10:	cmp	w4, w1
   39f14:	b.lt	3a114 <aarch64_ins_sve_shrimm@@Base+0x224>  // b.tstop
   39f18:	sub	w4, w4, w1
   39f1c:	mov	x20, x0
   39f20:	mov	x21, x2
   39f24:	lsl	x5, x4, #3
   39f28:	sub	x4, x5, x4
   39f2c:	add	x4, x3, x4, lsl #3
   39f30:	ldrb	w0, [x4, #28]
   39f34:	bl	35680 <aarch64_get_qualifier_esize@plt>
   39f38:	ubfiz	w1, w0, #4, #8
   39f3c:	ldr	w2, [x20, #32]
   39f40:	ldr	x3, [x19, #16]
   39f44:	sub	w1, w1, w3
   39f48:	cbnz	w2, 39f78 <aarch64_ins_sve_shrimm@@Base+0x88>
   39f4c:	ldr	w0, [x20, #28]
   39f50:	cbnz	w0, 39fd4 <aarch64_ins_sve_shrimm@@Base+0xe4>
   39f54:	ldr	w0, [x20, #24]
   39f58:	cbnz	w0, 3a030 <aarch64_ins_sve_shrimm@@Base+0x140>
   39f5c:	ldr	w0, [x20, #20]
   39f60:	cbnz	w0, 3a08c <aarch64_ins_sve_shrimm@@Base+0x19c>
   39f64:	mov	w0, #0x1                   	// #1
   39f68:	ldp	x19, x20, [sp, #16]
   39f6c:	ldr	x21, [sp, #32]
   39f70:	ldp	x29, x30, [sp], #48
   39f74:	ret
   39f78:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   39f7c:	ubfiz	x2, x2, #3, #32
   39f80:	ldr	x0, [x0, #3944]
   39f84:	add	x4, x2, x0
   39f88:	ldr	w3, [x2, x0]
   39f8c:	ldr	w2, [x4, #4]
   39f90:	cmp	w3, #0x0
   39f94:	sub	w0, w2, #0x1
   39f98:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   39f9c:	b.hi	3a0f0 <aarch64_ins_sve_shrimm@@Base+0x200>  // b.pmore
   39fa0:	add	w0, w2, w3
   39fa4:	cmp	w0, #0x20
   39fa8:	b.gt	3a0f0 <aarch64_ins_sve_shrimm@@Base+0x200>
   39fac:	mov	w0, #0xffffffff            	// #-1
   39fb0:	lsl	w0, w0, w2
   39fb4:	bic	w0, w1, w0
   39fb8:	lsr	w1, w1, w2
   39fbc:	ldr	w2, [x21]
   39fc0:	lsl	w0, w0, w3
   39fc4:	orr	w0, w2, w0
   39fc8:	str	w0, [x21]
   39fcc:	ldr	w0, [x20, #28]
   39fd0:	cbz	w0, 39f54 <aarch64_ins_sve_shrimm@@Base+0x64>
   39fd4:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   39fd8:	ubfiz	x0, x0, #3, #32
   39fdc:	ldr	x2, [x2, #3944]
   39fe0:	add	x4, x0, x2
   39fe4:	ldr	w3, [x0, x2]
   39fe8:	ldr	w2, [x4, #4]
   39fec:	cmp	w3, #0x0
   39ff0:	sub	w0, w2, #0x1
   39ff4:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   39ff8:	b.hi	3a0f0 <aarch64_ins_sve_shrimm@@Base+0x200>  // b.pmore
   39ffc:	add	w0, w3, w2
   3a000:	cmp	w0, #0x20
   3a004:	b.gt	3a0f0 <aarch64_ins_sve_shrimm@@Base+0x200>
   3a008:	mov	w0, #0xffffffff            	// #-1
   3a00c:	lsl	w0, w0, w2
   3a010:	bic	w0, w1, w0
   3a014:	lsr	w1, w1, w2
   3a018:	ldr	w2, [x21]
   3a01c:	lsl	w0, w0, w3
   3a020:	orr	w0, w2, w0
   3a024:	str	w0, [x21]
   3a028:	ldr	w0, [x20, #24]
   3a02c:	cbz	w0, 39f5c <aarch64_ins_sve_shrimm@@Base+0x6c>
   3a030:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   3a034:	ubfiz	x0, x0, #3, #32
   3a038:	ldr	x2, [x2, #3944]
   3a03c:	add	x4, x0, x2
   3a040:	ldr	w3, [x0, x2]
   3a044:	ldr	w2, [x4, #4]
   3a048:	cmp	w3, #0x0
   3a04c:	sub	w0, w2, #0x1
   3a050:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   3a054:	b.hi	3a0f0 <aarch64_ins_sve_shrimm@@Base+0x200>  // b.pmore
   3a058:	add	w0, w3, w2
   3a05c:	cmp	w0, #0x20
   3a060:	b.gt	3a0f0 <aarch64_ins_sve_shrimm@@Base+0x200>
   3a064:	mov	w0, #0xffffffff            	// #-1
   3a068:	lsl	w0, w0, w2
   3a06c:	bic	w0, w1, w0
   3a070:	lsr	w1, w1, w2
   3a074:	ldr	w2, [x21]
   3a078:	lsl	w0, w0, w3
   3a07c:	orr	w0, w2, w0
   3a080:	str	w0, [x21]
   3a084:	ldr	w0, [x20, #20]
   3a088:	cbz	w0, 39f64 <aarch64_ins_sve_shrimm@@Base+0x74>
   3a08c:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   3a090:	ubfiz	x0, x0, #3, #32
   3a094:	ldr	x2, [x2, #3944]
   3a098:	add	x4, x0, x2
   3a09c:	ldr	w3, [x0, x2]
   3a0a0:	ldr	w4, [x4, #4]
   3a0a4:	cmp	w3, #0x0
   3a0a8:	sub	w0, w4, #0x1
   3a0ac:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   3a0b0:	b.hi	3a0f0 <aarch64_ins_sve_shrimm@@Base+0x200>  // b.pmore
   3a0b4:	add	w0, w3, w4
   3a0b8:	cmp	w0, #0x20
   3a0bc:	b.gt	3a0f0 <aarch64_ins_sve_shrimm@@Base+0x200>
   3a0c0:	mov	w0, #0xffffffff            	// #-1
   3a0c4:	ldr	w2, [x21]
   3a0c8:	lsl	w0, w0, w4
   3a0cc:	bic	w1, w1, w0
   3a0d0:	mov	w0, #0x1                   	// #1
   3a0d4:	lsl	w1, w1, w3
   3a0d8:	orr	w1, w2, w1
   3a0dc:	str	w1, [x21]
   3a0e0:	ldp	x19, x20, [sp, #16]
   3a0e4:	ldr	x21, [sp, #32]
   3a0e8:	ldp	x29, x30, [sp], #48
   3a0ec:	ret
   3a0f0:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3a0f4:	add	x3, x3, #0xce8
   3a0f8:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3a0fc:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3a100:	add	x3, x3, #0x60
   3a104:	add	x1, x1, #0x610
   3a108:	add	x0, x0, #0x6c0
   3a10c:	mov	w2, #0x169                 	// #361
   3a110:	bl	35ac0 <__assert_fail@plt>
   3a114:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3a118:	add	x3, x3, #0xce8
   3a11c:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3a120:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3a124:	add	x3, x3, #0x1f0
   3a128:	add	x1, x1, #0x658
   3a12c:	add	x0, x0, #0xa08
   3a130:	mov	w2, #0x4de                 	// #1246
   3a134:	bl	35ac0 <__assert_fail@plt>

000000000003a138 <aarch64_ins_sve_float_half_one@@Base>:
   3a138:	adrp	x3, a6000 <aarch64_operands@@Base+0x16bd0>
   3a13c:	ldr	w0, [x0, #20]
   3a140:	ldr	x6, [x1, #16]
   3a144:	mov	x5, #0x3f000000            	// #1056964608
   3a148:	ldr	x3, [x3, #3944]
   3a14c:	lsl	x0, x0, #3
   3a150:	add	x1, x0, x3
   3a154:	ldr	w4, [x0, x3]
   3a158:	ldr	w1, [x1, #4]
   3a15c:	mvn	w3, w4
   3a160:	sub	w0, w1, #0x1
   3a164:	cmp	w0, #0x1e
   3a168:	cset	w0, ls  // ls = plast
   3a16c:	cmp	x6, x5
   3a170:	and	w3, w0, w3, lsr #31
   3a174:	b.eq	3a1b0 <aarch64_ins_sve_float_half_one@@Base+0x78>  // b.none
   3a178:	cbz	w3, 3a1c0 <aarch64_ins_sve_float_half_one@@Base+0x88>
   3a17c:	add	w0, w1, w4
   3a180:	cmp	w0, #0x20
   3a184:	b.gt	3a1c0 <aarch64_ins_sve_float_half_one@@Base+0x88>
   3a188:	mov	w0, #0xffffffff            	// #-1
   3a18c:	ldr	w3, [x2]
   3a190:	lsl	w0, w0, w1
   3a194:	mvn	w0, w0
   3a198:	and	w0, w0, #0x1
   3a19c:	lsl	w0, w0, w4
   3a1a0:	orr	w0, w3, w0
   3a1a4:	str	w0, [x2]
   3a1a8:	mov	w0, #0x1                   	// #1
   3a1ac:	ret
   3a1b0:	cbz	w3, 3a1c0 <aarch64_ins_sve_float_half_one@@Base+0x88>
   3a1b4:	add	w0, w1, w4
   3a1b8:	cmp	w0, #0x20
   3a1bc:	b.le	3a1a8 <aarch64_ins_sve_float_half_one@@Base+0x70>
   3a1c0:	stp	x29, x30, [sp, #-16]!
   3a1c4:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3a1c8:	add	x3, x3, #0xce8
   3a1cc:	mov	x29, sp
   3a1d0:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3a1d4:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3a1d8:	add	x3, x3, #0x60
   3a1dc:	add	x1, x1, #0x610
   3a1e0:	add	x0, x0, #0x6c0
   3a1e4:	mov	w2, #0x169                 	// #361
   3a1e8:	bl	35ac0 <__assert_fail@plt>
   3a1ec:	nop

000000000003a1f0 <aarch64_ins_sve_float_half_two@@Base>:
   3a1f0:	adrp	x3, a6000 <aarch64_operands@@Base+0x16bd0>
   3a1f4:	ldr	w0, [x0, #20]
   3a1f8:	ldr	x6, [x1, #16]
   3a1fc:	mov	x5, #0x3f000000            	// #1056964608
   3a200:	ldr	x3, [x3, #3944]
   3a204:	lsl	x0, x0, #3
   3a208:	add	x4, x0, x3
   3a20c:	ldr	w1, [x0, x3]
   3a210:	ldr	w4, [x4, #4]
   3a214:	mvn	w3, w1
   3a218:	sub	w0, w4, #0x1
   3a21c:	cmp	w0, #0x1e
   3a220:	cset	w0, ls  // ls = plast
   3a224:	cmp	x6, x5
   3a228:	and	w3, w0, w3, lsr #31
   3a22c:	b.eq	3a268 <aarch64_ins_sve_float_half_two@@Base+0x78>  // b.none
   3a230:	cbz	w3, 3a278 <aarch64_ins_sve_float_half_two@@Base+0x88>
   3a234:	add	w0, w1, w4
   3a238:	cmp	w0, #0x20
   3a23c:	b.gt	3a278 <aarch64_ins_sve_float_half_two@@Base+0x88>
   3a240:	mov	w0, #0xffffffff            	// #-1
   3a244:	ldr	w3, [x2]
   3a248:	lsl	w0, w0, w4
   3a24c:	mvn	w0, w0
   3a250:	and	w0, w0, #0x1
   3a254:	lsl	w0, w0, w1
   3a258:	orr	w0, w3, w0
   3a25c:	str	w0, [x2]
   3a260:	mov	w0, #0x1                   	// #1
   3a264:	ret
   3a268:	cbz	w3, 3a278 <aarch64_ins_sve_float_half_two@@Base+0x88>
   3a26c:	add	w0, w1, w4
   3a270:	cmp	w0, #0x20
   3a274:	b.le	3a260 <aarch64_ins_sve_float_half_two@@Base+0x70>
   3a278:	stp	x29, x30, [sp, #-16]!
   3a27c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3a280:	add	x3, x3, #0xce8
   3a284:	mov	x29, sp
   3a288:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3a28c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3a290:	add	x3, x3, #0x60
   3a294:	add	x1, x1, #0x610
   3a298:	add	x0, x0, #0x6c0
   3a29c:	mov	w2, #0x169                 	// #361
   3a2a0:	bl	35ac0 <__assert_fail@plt>
   3a2a4:	nop

000000000003a2a8 <aarch64_ins_sve_float_zero_one@@Base>:
   3a2a8:	adrp	x3, a6000 <aarch64_operands@@Base+0x16bd0>
   3a2ac:	ldr	w0, [x0, #20]
   3a2b0:	ldr	x5, [x1, #16]
   3a2b4:	ldr	x3, [x3, #3944]
   3a2b8:	lsl	x0, x0, #3
   3a2bc:	add	x1, x0, x3
   3a2c0:	ldr	w4, [x0, x3]
   3a2c4:	ldr	w1, [x1, #4]
   3a2c8:	mvn	w3, w4
   3a2cc:	sub	w0, w1, #0x1
   3a2d0:	cmp	w0, #0x1e
   3a2d4:	cset	w0, ls  // ls = plast
   3a2d8:	and	w3, w0, w3, lsr #31
   3a2dc:	cbnz	x5, 3a31c <aarch64_ins_sve_float_zero_one@@Base+0x74>
   3a2e0:	cbz	w3, 3a2f0 <aarch64_ins_sve_float_zero_one@@Base+0x48>
   3a2e4:	add	w0, w1, w4
   3a2e8:	cmp	w0, #0x20
   3a2ec:	b.le	3a34c <aarch64_ins_sve_float_zero_one@@Base+0xa4>
   3a2f0:	stp	x29, x30, [sp, #-16]!
   3a2f4:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3a2f8:	add	x3, x3, #0xce8
   3a2fc:	mov	x29, sp
   3a300:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3a304:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3a308:	add	x3, x3, #0x60
   3a30c:	add	x1, x1, #0x610
   3a310:	add	x0, x0, #0x6c0
   3a314:	mov	w2, #0x169                 	// #361
   3a318:	bl	35ac0 <__assert_fail@plt>
   3a31c:	cbz	w3, 3a2f0 <aarch64_ins_sve_float_zero_one@@Base+0x48>
   3a320:	add	w0, w1, w4
   3a324:	cmp	w0, #0x20
   3a328:	b.gt	3a2f0 <aarch64_ins_sve_float_zero_one@@Base+0x48>
   3a32c:	mov	w0, #0xffffffff            	// #-1
   3a330:	ldr	w3, [x2]
   3a334:	lsl	w0, w0, w1
   3a338:	mvn	w0, w0
   3a33c:	and	w0, w0, #0x1
   3a340:	lsl	w0, w0, w4
   3a344:	orr	w0, w3, w0
   3a348:	str	w0, [x2]
   3a34c:	mov	w0, #0x1                   	// #1
   3a350:	ret
   3a354:	nop

000000000003a358 <aarch64_opcode_encode@@Base>:
   3a358:	stp	x29, x30, [sp, #-448]!
   3a35c:	mov	x29, sp
   3a360:	stp	x21, x22, [sp, #32]
   3a364:	add	x21, sp, #0x58
   3a368:	mov	x22, x2
   3a36c:	mov	x2, #0x168                 	// #360
   3a370:	stp	x19, x20, [sp, #16]
   3a374:	mov	x19, x0
   3a378:	mov	x20, x3
   3a37c:	mov	x0, x21
   3a380:	stp	x23, x24, [sp, #48]
   3a384:	mov	x23, x4
   3a388:	mov	x24, x5
   3a38c:	bl	35050 <memcpy@plt>
   3a390:	ldr	x0, [sp, #96]
   3a394:	cbz	x0, 3abac <aarch64_opcode_encode@@Base+0x854>
   3a398:	cmp	x0, x19
   3a39c:	b.ne	3c07c <aarch64_opcode_encode@@Base+0x1d24>  // b.any
   3a3a0:	mov	x1, x23
   3a3a4:	mov	x0, x21
   3a3a8:	bl	354e0 <aarch64_match_operands_constraint@plt>
   3a3ac:	cbnz	w0, 3a3c8 <aarch64_opcode_encode@@Base+0x70>
   3a3b0:	mov	w0, #0x0                   	// #0
   3a3b4:	ldp	x19, x20, [sp, #16]
   3a3b8:	ldp	x21, x22, [sp, #32]
   3a3bc:	ldp	x23, x24, [sp, #48]
   3a3c0:	ldp	x29, x30, [sp], #448
   3a3c4:	ret
   3a3c8:	ldr	w1, [x19, #8]
   3a3cc:	mov	x0, x19
   3a3d0:	str	w1, [sp, #88]
   3a3d4:	bl	35170 <aarch64_num_of_operands@plt>
   3a3d8:	cbz	w0, 3a7e0 <aarch64_opcode_encode@@Base+0x488>
   3a3dc:	ldr	w1, [x19, #32]
   3a3e0:	ldr	w0, [sp, #112]
   3a3e4:	cmp	w1, w0
   3a3e8:	cbz	x20, 3ad2c <aarch64_opcode_encode@@Base+0x9d4>
   3a3ec:	b.ne	3c054 <aarch64_opcode_encode@@Base+0x1cfc>  // b.any
   3a3f0:	ldrb	w0, [sp, #116]
   3a3f4:	strb	w0, [x20]
   3a3f8:	ldr	w0, [sp, #168]
   3a3fc:	ldr	w1, [x19, #36]
   3a400:	str	wzr, [sp, #120]
   3a404:	cmp	w1, w0
   3a408:	b.ne	3c054 <aarch64_opcode_encode@@Base+0x1cfc>  // b.any
   3a40c:	ldrb	w1, [sp, #172]
   3a410:	mov	w0, #0x1                   	// #1
   3a414:	strb	w1, [x20]
   3a418:	str	w0, [sp, #176]
   3a41c:	ldr	w1, [x19, #40]
   3a420:	ldr	w0, [sp, #224]
   3a424:	cmp	w1, w0
   3a428:	b.ne	3c054 <aarch64_opcode_encode@@Base+0x1cfc>  // b.any
   3a42c:	ldrb	w1, [sp, #228]
   3a430:	mov	w0, #0x2                   	// #2
   3a434:	strb	w1, [x20]
   3a438:	str	w0, [sp, #232]
   3a43c:	ldr	w1, [x19, #44]
   3a440:	ldr	w0, [sp, #280]
   3a444:	cmp	w1, w0
   3a448:	b.ne	3c054 <aarch64_opcode_encode@@Base+0x1cfc>  // b.any
   3a44c:	ldrb	w1, [sp, #284]
   3a450:	mov	w0, #0x3                   	// #3
   3a454:	strb	w1, [x20]
   3a458:	str	w0, [sp, #288]
   3a45c:	ldr	w1, [x19, #48]
   3a460:	ldr	w0, [sp, #336]
   3a464:	cmp	w1, w0
   3a468:	b.ne	3c054 <aarch64_opcode_encode@@Base+0x1cfc>  // b.any
   3a46c:	ldrb	w1, [sp, #340]
   3a470:	mov	w0, #0x4                   	// #4
   3a474:	strb	w1, [x20]
   3a478:	str	w0, [sp, #344]
   3a47c:	ldr	w1, [x19, #52]
   3a480:	ldr	w0, [sp, #392]
   3a484:	cmp	w1, w0
   3a488:	b.ne	3c054 <aarch64_opcode_encode@@Base+0x1cfc>  // b.any
   3a48c:	ldrb	w0, [sp, #396]
   3a490:	mov	w1, #0x5                   	// #5
   3a494:	strb	w0, [x20]
   3a498:	str	w1, [sp, #400]
   3a49c:	mov	x0, x19
   3a4a0:	bl	352f0 <aarch64_find_real_opcode@plt>
   3a4a4:	mov	x20, x0
   3a4a8:	cbz	x0, 3a4b4 <aarch64_opcode_encode@@Base+0x15c>
   3a4ac:	ldr	x0, [x19, #120]
   3a4b0:	tbnz	w0, #20, 3abb4 <aarch64_opcode_encode@@Base+0x85c>
   3a4b4:	ldr	w0, [x19, #32]
   3a4b8:	cbz	w0, 3a638 <aarch64_opcode_encode@@Base+0x2e0>
   3a4bc:	ldrb	w1, [sp, #160]
   3a4c0:	tbnz	w1, #0, 3a4e0 <aarch64_opcode_encode@@Base+0x188>
   3a4c4:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3a4c8:	ubfiz	x2, x0, #1, #32
   3a4cc:	add	x0, x2, w0, uxtw
   3a4d0:	ldr	x1, [x1, #4032]
   3a4d4:	add	x0, x1, x0, lsl #4
   3a4d8:	ldr	w1, [x0, #16]
   3a4dc:	tbnz	w1, #0, 3ac44 <aarch64_opcode_encode@@Base+0x8ec>
   3a4e0:	ldr	w0, [x19, #36]
   3a4e4:	cbz	w0, 3a638 <aarch64_opcode_encode@@Base+0x2e0>
   3a4e8:	ldrb	w1, [sp, #216]
   3a4ec:	tbnz	w1, #0, 3a524 <aarch64_opcode_encode@@Base+0x1cc>
   3a4f0:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3a4f4:	ubfiz	x2, x0, #1, #32
   3a4f8:	add	x0, x2, w0, uxtw
   3a4fc:	ldr	x1, [x1, #4032]
   3a500:	add	x0, x1, x0, lsl #4
   3a504:	ldr	w1, [x0, #16]
   3a508:	tbz	w1, #0, 3a524 <aarch64_opcode_encode@@Base+0x1cc>
   3a50c:	mov	x4, x23
   3a510:	mov	x3, x21
   3a514:	mov	x2, x21
   3a518:	add	x1, x21, #0x50
   3a51c:	bl	35980 <aarch64_insert_operand@plt>
   3a520:	cbz	w0, 3a3b0 <aarch64_opcode_encode@@Base+0x58>
   3a524:	ldr	w0, [x19, #40]
   3a528:	cbz	w0, 3a638 <aarch64_opcode_encode@@Base+0x2e0>
   3a52c:	ldrb	w1, [sp, #272]
   3a530:	tbnz	w1, #0, 3a568 <aarch64_opcode_encode@@Base+0x210>
   3a534:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3a538:	ubfiz	x2, x0, #1, #32
   3a53c:	add	x0, x2, w0, uxtw
   3a540:	ldr	x1, [x1, #4032]
   3a544:	add	x0, x1, x0, lsl #4
   3a548:	ldr	w1, [x0, #16]
   3a54c:	tbz	w1, #0, 3a568 <aarch64_opcode_encode@@Base+0x210>
   3a550:	mov	x4, x23
   3a554:	mov	x3, x21
   3a558:	mov	x2, x21
   3a55c:	add	x1, x21, #0x88
   3a560:	bl	35980 <aarch64_insert_operand@plt>
   3a564:	cbz	w0, 3a3b0 <aarch64_opcode_encode@@Base+0x58>
   3a568:	ldr	w0, [x19, #44]
   3a56c:	cbz	w0, 3a638 <aarch64_opcode_encode@@Base+0x2e0>
   3a570:	ldrb	w1, [sp, #328]
   3a574:	tbnz	w1, #0, 3a5ac <aarch64_opcode_encode@@Base+0x254>
   3a578:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3a57c:	ubfiz	x2, x0, #1, #32
   3a580:	add	x0, x2, w0, uxtw
   3a584:	ldr	x1, [x1, #4032]
   3a588:	add	x0, x1, x0, lsl #4
   3a58c:	ldr	w1, [x0, #16]
   3a590:	tbz	w1, #0, 3a5ac <aarch64_opcode_encode@@Base+0x254>
   3a594:	mov	x4, x23
   3a598:	mov	x3, x21
   3a59c:	mov	x2, x21
   3a5a0:	add	x1, x21, #0xc0
   3a5a4:	bl	35980 <aarch64_insert_operand@plt>
   3a5a8:	cbz	w0, 3a3b0 <aarch64_opcode_encode@@Base+0x58>
   3a5ac:	ldr	w0, [x19, #48]
   3a5b0:	cbz	w0, 3a638 <aarch64_opcode_encode@@Base+0x2e0>
   3a5b4:	ldrb	w1, [sp, #384]
   3a5b8:	tbnz	w1, #0, 3a5f0 <aarch64_opcode_encode@@Base+0x298>
   3a5bc:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3a5c0:	ubfiz	x2, x0, #1, #32
   3a5c4:	add	x0, x2, w0, uxtw
   3a5c8:	ldr	x1, [x1, #4032]
   3a5cc:	add	x0, x1, x0, lsl #4
   3a5d0:	ldr	w1, [x0, #16]
   3a5d4:	tbz	w1, #0, 3a5f0 <aarch64_opcode_encode@@Base+0x298>
   3a5d8:	mov	x4, x23
   3a5dc:	mov	x3, x21
   3a5e0:	mov	x2, x21
   3a5e4:	add	x1, x21, #0xf8
   3a5e8:	bl	35980 <aarch64_insert_operand@plt>
   3a5ec:	cbz	w0, 3a3b0 <aarch64_opcode_encode@@Base+0x58>
   3a5f0:	ldr	w0, [x19, #52]
   3a5f4:	cbz	w0, 3a638 <aarch64_opcode_encode@@Base+0x2e0>
   3a5f8:	ldrb	w1, [sp, #440]
   3a5fc:	tbnz	w1, #0, 3a638 <aarch64_opcode_encode@@Base+0x2e0>
   3a600:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3a604:	ubfiz	x2, x0, #1, #32
   3a608:	add	x0, x2, w0, uxtw
   3a60c:	ldr	x1, [x1, #4032]
   3a610:	add	x0, x1, x0, lsl #4
   3a614:	ldr	w1, [x0, #16]
   3a618:	tbz	w1, #0, 3a638 <aarch64_opcode_encode@@Base+0x2e0>
   3a61c:	mov	x4, x23
   3a620:	mov	x3, x21
   3a624:	mov	x2, x21
   3a628:	add	x1, x21, #0x130
   3a62c:	bl	35980 <aarch64_insert_operand@plt>
   3a630:	cbz	w0, 3a3b0 <aarch64_opcode_encode@@Base+0x58>
   3a634:	nop
   3a638:	ldr	x1, [x19, #120]
   3a63c:	mov	x0, #0xff0                 	// #4080
   3a640:	movk	x0, #0x8c0, lsl #16
   3a644:	tst	x1, x0
   3a648:	ldr	x20, [sp, #96]
   3a64c:	b.ne	3ac78 <aarch64_opcode_encode@@Base+0x920>  // b.any
   3a650:	ldr	w0, [x20, #16]
   3a654:	cmp	w0, #0x52
   3a658:	b.eq	3bb00 <aarch64_opcode_encode@@Base+0x17a8>  // b.none
   3a65c:	b.hi	3a914 <aarch64_opcode_encode@@Base+0x5bc>  // b.pmore
   3a660:	cmp	w0, #0x4c
   3a664:	b.eq	3ba0c <aarch64_opcode_encode@@Base+0x16b4>  // b.none
   3a668:	b.ls	3aad4 <aarch64_opcode_encode@@Base+0x77c>  // b.plast
   3a66c:	cmp	w0, #0x51
   3a670:	b.ne	3a800 <aarch64_opcode_encode@@Base+0x4a8>  // b.any
   3a674:	mov	x0, x20
   3a678:	bl	35170 <aarch64_num_of_operands@plt>
   3a67c:	ldr	x1, [sp, #96]
   3a680:	mov	w2, #0x0                   	// #0
   3a684:	ldrb	w4, [sp, #116]
   3a688:	ldrb	w5, [sp, #172]
   3a68c:	add	x1, x1, #0x38
   3a690:	ldrb	w6, [sp, #228]
   3a694:	ldrb	w7, [sp, #284]
   3a698:	ldrb	w8, [sp, #340]
   3a69c:	ldrb	w9, [sp, #396]
   3a6a0:	b	3a6b4 <aarch64_opcode_encode@@Base+0x35c>
   3a6a4:	add	w2, w2, #0x1
   3a6a8:	add	x1, x1, #0x6
   3a6ac:	cmp	w2, #0xa
   3a6b0:	b.eq	3a9f0 <aarch64_opcode_encode@@Base+0x698>  // b.none
   3a6b4:	cmp	w0, #0x0
   3a6b8:	mov	w3, #0x0                   	// #0
   3a6bc:	b.le	3a734 <aarch64_opcode_encode@@Base+0x3dc>
   3a6c0:	ldrb	w3, [x1]
   3a6c4:	cmp	w3, w4
   3a6c8:	b.ne	3a6a4 <aarch64_opcode_encode@@Base+0x34c>  // b.any
   3a6cc:	cmp	w0, #0x1
   3a6d0:	b.eq	3b66c <aarch64_opcode_encode@@Base+0x1314>  // b.none
   3a6d4:	ldrb	w3, [x1, #1]
   3a6d8:	cmp	w3, w5
   3a6dc:	b.ne	3a6a4 <aarch64_opcode_encode@@Base+0x34c>  // b.any
   3a6e0:	cmp	w0, #0x2
   3a6e4:	b.eq	3b66c <aarch64_opcode_encode@@Base+0x1314>  // b.none
   3a6e8:	ldrb	w3, [x1, #2]
   3a6ec:	cmp	w3, w6
   3a6f0:	b.ne	3a6a4 <aarch64_opcode_encode@@Base+0x34c>  // b.any
   3a6f4:	cmp	w0, #0x3
   3a6f8:	b.eq	3b66c <aarch64_opcode_encode@@Base+0x1314>  // b.none
   3a6fc:	ldrb	w3, [x1, #3]
   3a700:	cmp	w3, w7
   3a704:	b.ne	3a6a4 <aarch64_opcode_encode@@Base+0x34c>  // b.any
   3a708:	cmp	w0, #0x4
   3a70c:	b.eq	3b66c <aarch64_opcode_encode@@Base+0x1314>  // b.none
   3a710:	ldrb	w3, [x1, #4]
   3a714:	cmp	w3, w8
   3a718:	b.ne	3a6a4 <aarch64_opcode_encode@@Base+0x34c>  // b.any
   3a71c:	cmp	w0, #0x5
   3a720:	b.eq	3b66c <aarch64_opcode_encode@@Base+0x1314>  // b.none
   3a724:	ldrb	w3, [x1, #5]
   3a728:	cmp	w3, w9
   3a72c:	b.ne	3a6a4 <aarch64_opcode_encode@@Base+0x34c>  // b.any
   3a730:	mov	w3, #0x6                   	// #6
   3a734:	cmp	w3, w0
   3a738:	b.ne	3a6a4 <aarch64_opcode_encode@@Base+0x34c>  // b.any
   3a73c:	add	w2, w2, #0x1
   3a740:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3a744:	ldr	x0, [x0, #3944]
   3a748:	ldp	w3, w4, [x0, #64]
   3a74c:	cmp	w3, #0x0
   3a750:	sub	w0, w4, #0x1
   3a754:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   3a758:	b.hi	3a8ec <aarch64_opcode_encode@@Base+0x594>  // b.pmore
   3a75c:	add	w0, w3, w4
   3a760:	cmp	w0, #0x20
   3a764:	b.gt	3a8ec <aarch64_opcode_encode@@Base+0x594>
   3a768:	mov	w0, #0xffffffff            	// #-1
   3a76c:	ldr	w1, [sp, #88]
   3a770:	lsl	w0, w0, w4
   3a774:	bic	w2, w2, w0
   3a778:	lsl	w0, w2, w3
   3a77c:	orr	w0, w1, w0
   3a780:	str	w0, [sp, #88]
   3a784:	nop
   3a788:	ldr	x6, [x19, #136]
   3a78c:	ldr	w1, [x22]
   3a790:	cbz	x6, 3a7bc <aarch64_opcode_encode@@Base+0x464>
   3a794:	mov	x5, x24
   3a798:	mov	x4, x23
   3a79c:	mov	x0, x21
   3a7a0:	mov	w3, #0x1                   	// #1
   3a7a4:	mov	x2, #0x0                   	// #0
   3a7a8:	blr	x6
   3a7ac:	sub	w0, w0, #0x1
   3a7b0:	cmp	w0, #0x2
   3a7b4:	b.ls	3a3b0 <aarch64_opcode_encode@@Base+0x58>  // b.plast
   3a7b8:	ldr	w1, [x22]
   3a7bc:	mov	x5, x24
   3a7c0:	mov	x4, x23
   3a7c4:	mov	x0, x21
   3a7c8:	mov	w3, #0x1                   	// #1
   3a7cc:	mov	x2, #0x0                   	// #0
   3a7d0:	bl	35250 <verify_constraints@plt>
   3a7d4:	sub	w0, w0, #0x1
   3a7d8:	cmp	w0, #0x2
   3a7dc:	b.ls	3a3b0 <aarch64_opcode_encode@@Base+0x58>  // b.plast
   3a7e0:	ldr	w1, [sp, #88]
   3a7e4:	mov	w0, #0x1                   	// #1
   3a7e8:	str	w1, [x22]
   3a7ec:	ldp	x19, x20, [sp, #16]
   3a7f0:	ldp	x21, x22, [sp, #32]
   3a7f4:	ldp	x23, x24, [sp, #48]
   3a7f8:	ldp	x29, x30, [sp], #448
   3a7fc:	ret
   3a800:	cmp	w0, #0x4e
   3a804:	b.ls	3a788 <aarch64_opcode_encode@@Base+0x430>  // b.plast
   3a808:	mov	x0, x20
   3a80c:	bl	35170 <aarch64_num_of_operands@plt>
   3a810:	ldr	x1, [sp, #96]
   3a814:	mov	w2, #0x0                   	// #0
   3a818:	ldrb	w4, [sp, #116]
   3a81c:	ldrb	w5, [sp, #172]
   3a820:	add	x1, x1, #0x38
   3a824:	ldrb	w6, [sp, #228]
   3a828:	ldrb	w7, [sp, #284]
   3a82c:	ldrb	w8, [sp, #340]
   3a830:	ldrb	w9, [sp, #396]
   3a834:	b	3a848 <aarch64_opcode_encode@@Base+0x4f0>
   3a838:	add	w2, w2, #0x1
   3a83c:	add	x1, x1, #0x6
   3a840:	cmp	w2, #0xa
   3a844:	b.eq	3a9f0 <aarch64_opcode_encode@@Base+0x698>  // b.none
   3a848:	cmp	w0, #0x0
   3a84c:	mov	w3, #0x0                   	// #0
   3a850:	b.le	3a8c8 <aarch64_opcode_encode@@Base+0x570>
   3a854:	ldrb	w3, [x1]
   3a858:	cmp	w3, w4
   3a85c:	b.ne	3a838 <aarch64_opcode_encode@@Base+0x4e0>  // b.any
   3a860:	cmp	w0, #0x1
   3a864:	b.eq	3b65c <aarch64_opcode_encode@@Base+0x1304>  // b.none
   3a868:	ldrb	w3, [x1, #1]
   3a86c:	cmp	w3, w5
   3a870:	b.ne	3a838 <aarch64_opcode_encode@@Base+0x4e0>  // b.any
   3a874:	cmp	w0, #0x2
   3a878:	b.eq	3b65c <aarch64_opcode_encode@@Base+0x1304>  // b.none
   3a87c:	ldrb	w3, [x1, #2]
   3a880:	cmp	w3, w6
   3a884:	b.ne	3a838 <aarch64_opcode_encode@@Base+0x4e0>  // b.any
   3a888:	cmp	w0, #0x3
   3a88c:	b.eq	3b65c <aarch64_opcode_encode@@Base+0x1304>  // b.none
   3a890:	ldrb	w3, [x1, #3]
   3a894:	cmp	w3, w7
   3a898:	b.ne	3a838 <aarch64_opcode_encode@@Base+0x4e0>  // b.any
   3a89c:	cmp	w0, #0x4
   3a8a0:	b.eq	3b65c <aarch64_opcode_encode@@Base+0x1304>  // b.none
   3a8a4:	ldrb	w3, [x1, #4]
   3a8a8:	cmp	w3, w8
   3a8ac:	b.ne	3a838 <aarch64_opcode_encode@@Base+0x4e0>  // b.any
   3a8b0:	cmp	w0, #0x5
   3a8b4:	b.eq	3b65c <aarch64_opcode_encode@@Base+0x1304>  // b.none
   3a8b8:	ldrb	w3, [x1, #5]
   3a8bc:	cmp	w3, w9
   3a8c0:	b.ne	3a838 <aarch64_opcode_encode@@Base+0x4e0>  // b.any
   3a8c4:	mov	w3, #0x6                   	// #6
   3a8c8:	cmp	w0, w3
   3a8cc:	b.ne	3a838 <aarch64_opcode_encode@@Base+0x4e0>  // b.any
   3a8d0:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3a8d4:	ldr	x0, [x0, #3944]
   3a8d8:	ldp	w3, w4, [x0, #64]
   3a8dc:	cmp	w3, #0x0
   3a8e0:	sub	w0, w4, #0x1
   3a8e4:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   3a8e8:	b.ls	3ae98 <aarch64_opcode_encode@@Base+0xb40>  // b.plast
   3a8ec:	str	x25, [sp, #64]
   3a8f0:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3a8f4:	add	x3, x3, #0xce8
   3a8f8:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3a8fc:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3a900:	add	x3, x3, #0x60
   3a904:	add	x1, x1, #0x610
   3a908:	add	x0, x0, #0x6c0
   3a90c:	mov	w2, #0x169                 	// #361
   3a910:	bl	35ac0 <__assert_fail@plt>
   3a914:	cmp	w0, #0x56
   3a918:	b.eq	3b928 <aarch64_opcode_encode@@Base+0x15d0>  // b.none
   3a91c:	b.ls	3a9f8 <aarch64_opcode_encode@@Base+0x6a0>  // b.plast
   3a920:	cmp	w0, #0x59
   3a924:	b.ne	3a788 <aarch64_opcode_encode@@Base+0x430>  // b.any
   3a928:	mov	x0, x20
   3a92c:	bl	35170 <aarch64_num_of_operands@plt>
   3a930:	ldr	x2, [sp, #96]
   3a934:	mov	w1, #0x0                   	// #0
   3a938:	ldrb	w4, [sp, #116]
   3a93c:	ldrb	w5, [sp, #172]
   3a940:	add	x2, x2, #0x38
   3a944:	ldrb	w6, [sp, #228]
   3a948:	ldrb	w7, [sp, #284]
   3a94c:	ldrb	w8, [sp, #340]
   3a950:	ldrb	w9, [sp, #396]
   3a954:	nop
   3a958:	cmp	w0, #0x0
   3a95c:	mov	w3, #0x0                   	// #0
   3a960:	b.le	3a9d8 <aarch64_opcode_encode@@Base+0x680>
   3a964:	ldrb	w3, [x2]
   3a968:	cmp	w3, w4
   3a96c:	b.ne	3a9e0 <aarch64_opcode_encode@@Base+0x688>  // b.any
   3a970:	cmp	w0, #0x1
   3a974:	b.eq	3ac68 <aarch64_opcode_encode@@Base+0x910>  // b.none
   3a978:	ldrb	w3, [x2, #1]
   3a97c:	cmp	w3, w5
   3a980:	b.ne	3a9e0 <aarch64_opcode_encode@@Base+0x688>  // b.any
   3a984:	cmp	w0, #0x2
   3a988:	b.eq	3ac68 <aarch64_opcode_encode@@Base+0x910>  // b.none
   3a98c:	ldrb	w3, [x2, #2]
   3a990:	cmp	w3, w6
   3a994:	b.ne	3a9e0 <aarch64_opcode_encode@@Base+0x688>  // b.any
   3a998:	cmp	w0, #0x3
   3a99c:	b.eq	3ac68 <aarch64_opcode_encode@@Base+0x910>  // b.none
   3a9a0:	ldrb	w3, [x2, #3]
   3a9a4:	cmp	w3, w7
   3a9a8:	b.ne	3a9e0 <aarch64_opcode_encode@@Base+0x688>  // b.any
   3a9ac:	cmp	w0, #0x4
   3a9b0:	b.eq	3ac68 <aarch64_opcode_encode@@Base+0x910>  // b.none
   3a9b4:	ldrb	w3, [x2, #4]
   3a9b8:	cmp	w3, w8
   3a9bc:	b.ne	3a9e0 <aarch64_opcode_encode@@Base+0x688>  // b.any
   3a9c0:	cmp	w0, #0x5
   3a9c4:	b.eq	3ac68 <aarch64_opcode_encode@@Base+0x910>  // b.none
   3a9c8:	ldrb	w3, [x2, #5]
   3a9cc:	cmp	w3, w9
   3a9d0:	b.ne	3a9e0 <aarch64_opcode_encode@@Base+0x688>  // b.any
   3a9d4:	mov	w3, #0x6                   	// #6
   3a9d8:	cmp	w3, w0
   3a9dc:	b.eq	3b630 <aarch64_opcode_encode@@Base+0x12d8>  // b.none
   3a9e0:	add	w1, w1, #0x1
   3a9e4:	add	x2, x2, #0x6
   3a9e8:	cmp	w1, #0xa
   3a9ec:	b.ne	3a958 <aarch64_opcode_encode@@Base+0x600>  // b.any
   3a9f0:	str	x25, [sp, #64]
   3a9f4:	bl	35670 <abort@plt>
   3a9f8:	cmp	w0, #0x54
   3a9fc:	b.ls	3adb0 <aarch64_opcode_encode@@Base+0xa58>  // b.plast
   3aa00:	cmp	w0, #0x55
   3aa04:	b.ne	3a788 <aarch64_opcode_encode@@Base+0x430>  // b.any
   3aa08:	mov	x0, x20
   3aa0c:	bl	35170 <aarch64_num_of_operands@plt>
   3aa10:	ldr	x1, [sp, #96]
   3aa14:	mov	w2, #0x0                   	// #0
   3aa18:	ldrb	w4, [sp, #116]
   3aa1c:	ldrb	w5, [sp, #172]
   3aa20:	add	x1, x1, #0x38
   3aa24:	ldrb	w6, [sp, #228]
   3aa28:	ldrb	w7, [sp, #284]
   3aa2c:	ldrb	w8, [sp, #340]
   3aa30:	ldrb	w9, [sp, #396]
   3aa34:	nop
   3aa38:	cmp	w0, #0x0
   3aa3c:	mov	w3, #0x0                   	// #0
   3aa40:	b.le	3aab8 <aarch64_opcode_encode@@Base+0x760>
   3aa44:	ldrb	w3, [x1]
   3aa48:	cmp	w3, w4
   3aa4c:	b.ne	3aac0 <aarch64_opcode_encode@@Base+0x768>  // b.any
   3aa50:	cmp	w0, #0x1
   3aa54:	b.eq	3ac60 <aarch64_opcode_encode@@Base+0x908>  // b.none
   3aa58:	ldrb	w3, [x1, #1]
   3aa5c:	cmp	w3, w5
   3aa60:	b.ne	3aac0 <aarch64_opcode_encode@@Base+0x768>  // b.any
   3aa64:	cmp	w0, #0x2
   3aa68:	b.eq	3ac60 <aarch64_opcode_encode@@Base+0x908>  // b.none
   3aa6c:	ldrb	w3, [x1, #2]
   3aa70:	cmp	w3, w6
   3aa74:	b.ne	3aac0 <aarch64_opcode_encode@@Base+0x768>  // b.any
   3aa78:	cmp	w0, #0x3
   3aa7c:	b.eq	3ac60 <aarch64_opcode_encode@@Base+0x908>  // b.none
   3aa80:	ldrb	w3, [x1, #3]
   3aa84:	cmp	w3, w7
   3aa88:	b.ne	3aac0 <aarch64_opcode_encode@@Base+0x768>  // b.any
   3aa8c:	cmp	w0, #0x4
   3aa90:	b.eq	3ac60 <aarch64_opcode_encode@@Base+0x908>  // b.none
   3aa94:	ldrb	w3, [x1, #4]
   3aa98:	cmp	w3, w8
   3aa9c:	b.ne	3aac0 <aarch64_opcode_encode@@Base+0x768>  // b.any
   3aaa0:	cmp	w0, #0x5
   3aaa4:	b.eq	3ac60 <aarch64_opcode_encode@@Base+0x908>  // b.none
   3aaa8:	ldrb	w3, [x1, #5]
   3aaac:	cmp	w3, w9
   3aab0:	b.ne	3aac0 <aarch64_opcode_encode@@Base+0x768>  // b.any
   3aab4:	mov	w3, #0x6                   	// #6
   3aab8:	cmp	w3, w0
   3aabc:	b.eq	3b5f0 <aarch64_opcode_encode@@Base+0x1298>  // b.none
   3aac0:	add	w2, w2, #0x1
   3aac4:	add	x1, x1, #0x6
   3aac8:	cmp	w2, #0xa
   3aacc:	b.ne	3aa38 <aarch64_opcode_encode@@Base+0x6e0>  // b.any
   3aad0:	b	3a9f0 <aarch64_opcode_encode@@Base+0x698>
   3aad4:	cmp	w0, #0x47
   3aad8:	b.eq	3aec4 <aarch64_opcode_encode@@Base+0xb6c>  // b.none
   3aadc:	cmp	w0, #0x4b
   3aae0:	b.ne	3a788 <aarch64_opcode_encode@@Base+0x430>  // b.any
   3aae4:	mov	x0, x20
   3aae8:	bl	35170 <aarch64_num_of_operands@plt>
   3aaec:	ldr	x2, [sp, #96]
   3aaf0:	mov	w1, #0x0                   	// #0
   3aaf4:	ldrb	w4, [sp, #116]
   3aaf8:	ldrb	w5, [sp, #172]
   3aafc:	add	x2, x2, #0x38
   3ab00:	ldrb	w6, [sp, #228]
   3ab04:	ldrb	w7, [sp, #284]
   3ab08:	ldrb	w8, [sp, #340]
   3ab0c:	ldrb	w9, [sp, #396]
   3ab10:	cmp	w0, #0x0
   3ab14:	mov	w3, #0x0                   	// #0
   3ab18:	b.le	3ab90 <aarch64_opcode_encode@@Base+0x838>
   3ab1c:	ldrb	w3, [x2]
   3ab20:	cmp	w3, w4
   3ab24:	b.ne	3ab98 <aarch64_opcode_encode@@Base+0x840>  // b.any
   3ab28:	cmp	w0, #0x1
   3ab2c:	b.eq	3ac70 <aarch64_opcode_encode@@Base+0x918>  // b.none
   3ab30:	ldrb	w3, [x2, #1]
   3ab34:	cmp	w3, w5
   3ab38:	b.ne	3ab98 <aarch64_opcode_encode@@Base+0x840>  // b.any
   3ab3c:	cmp	w0, #0x2
   3ab40:	b.eq	3ac70 <aarch64_opcode_encode@@Base+0x918>  // b.none
   3ab44:	ldrb	w3, [x2, #2]
   3ab48:	cmp	w3, w6
   3ab4c:	b.ne	3ab98 <aarch64_opcode_encode@@Base+0x840>  // b.any
   3ab50:	cmp	w0, #0x3
   3ab54:	b.eq	3ac70 <aarch64_opcode_encode@@Base+0x918>  // b.none
   3ab58:	ldrb	w3, [x2, #3]
   3ab5c:	cmp	w3, w7
   3ab60:	b.ne	3ab98 <aarch64_opcode_encode@@Base+0x840>  // b.any
   3ab64:	cmp	w0, #0x4
   3ab68:	b.eq	3ac70 <aarch64_opcode_encode@@Base+0x918>  // b.none
   3ab6c:	ldrb	w3, [x2, #4]
   3ab70:	cmp	w3, w8
   3ab74:	b.ne	3ab98 <aarch64_opcode_encode@@Base+0x840>  // b.any
   3ab78:	cmp	w0, #0x5
   3ab7c:	b.eq	3ac70 <aarch64_opcode_encode@@Base+0x918>  // b.none
   3ab80:	ldrb	w3, [x2, #5]
   3ab84:	cmp	w3, w9
   3ab88:	b.ne	3ab98 <aarch64_opcode_encode@@Base+0x840>  // b.any
   3ab8c:	mov	w3, #0x6                   	// #6
   3ab90:	cmp	w0, w3
   3ab94:	b.eq	3b614 <aarch64_opcode_encode@@Base+0x12bc>  // b.none
   3ab98:	add	w1, w1, #0x1
   3ab9c:	add	x2, x2, #0x6
   3aba0:	cmp	w1, #0xa
   3aba4:	b.ne	3ab10 <aarch64_opcode_encode@@Base+0x7b8>  // b.any
   3aba8:	b	3a9f0 <aarch64_opcode_encode@@Base+0x698>
   3abac:	str	x19, [sp, #96]
   3abb0:	b	3a3a0 <aarch64_opcode_encode@@Base+0x48>
   3abb4:	ldr	x0, [sp, #96]
   3abb8:	ldr	x1, [x0, #120]
   3abbc:	tbz	w1, #20, 3ac30 <aarch64_opcode_encode@@Base+0x8d8>
   3abc0:	ldr	w0, [x0, #20]
   3abc4:	cmp	w0, #0x2f
   3abc8:	b.hi	3b6a0 <aarch64_opcode_encode@@Base+0x1348>  // b.pmore
   3abcc:	cmp	w0, #0x2d
   3abd0:	b.hi	3bca8 <aarch64_opcode_encode@@Base+0x1950>  // b.pmore
   3abd4:	cmp	w0, #0x28
   3abd8:	b.hi	3b674 <aarch64_opcode_encode@@Base+0x131c>  // b.pmore
   3abdc:	cmp	w0, #0x26
   3abe0:	b.hi	3bde4 <aarch64_opcode_encode@@Base+0x1a8c>  // b.pmore
   3abe4:	b.eq	3bc7c <aarch64_opcode_encode@@Base+0x1924>  // b.none
   3abe8:	cmp	w0, #0x23
   3abec:	b.hi	3bc28 <aarch64_opcode_encode@@Base+0x18d0>  // b.pmore
   3abf0:	b.ne	3ac30 <aarch64_opcode_encode@@Base+0x8d8>  // b.any
   3abf4:	ldp	x0, x1, [sp, #168]
   3abf8:	stp	x0, x1, [sp, #224]
   3abfc:	ldrb	w0, [sp, #216]
   3ac00:	ldp	x4, x5, [sp, #184]
   3ac04:	and	w0, w0, #0xfffffffe
   3ac08:	ldp	x2, x3, [sp, #200]
   3ac0c:	mov	w6, #0x2                   	// #2
   3ac10:	ldr	x1, [sp, #216]
   3ac14:	mov	w7, #0x1f                  	// #31
   3ac18:	str	w7, [sp, #184]
   3ac1c:	strb	w0, [sp, #216]
   3ac20:	str	w6, [sp, #232]
   3ac24:	stp	x4, x5, [sp, #240]
   3ac28:	stp	x2, x3, [sp, #256]
   3ac2c:	str	x1, [sp, #272]
   3ac30:	mov	x19, x20
   3ac34:	mov	x1, x20
   3ac38:	mov	x0, x21
   3ac3c:	bl	35410 <aarch64_replace_opcode@plt>
   3ac40:	b	3a4b4 <aarch64_opcode_encode@@Base+0x15c>
   3ac44:	mov	x4, x23
   3ac48:	mov	x3, x21
   3ac4c:	mov	x2, x21
   3ac50:	add	x1, x21, #0x18
   3ac54:	bl	35980 <aarch64_insert_operand@plt>
   3ac58:	cbnz	w0, 3a4e0 <aarch64_opcode_encode@@Base+0x188>
   3ac5c:	b	3a3b0 <aarch64_opcode_encode@@Base+0x58>
   3ac60:	mov	w3, w0
   3ac64:	b	3aab8 <aarch64_opcode_encode@@Base+0x760>
   3ac68:	mov	w3, w0
   3ac6c:	b	3a9d8 <aarch64_opcode_encode@@Base+0x680>
   3ac70:	mov	w3, w0
   3ac74:	b	3ab90 <aarch64_opcode_encode@@Base+0x838>
   3ac78:	ldr	x0, [x20, #120]
   3ac7c:	tbnz	w0, #4, 3b2d4 <aarch64_opcode_encode@@Base+0xf7c>
   3ac80:	tbnz	w0, #5, 3b1e8 <aarch64_opcode_encode@@Base+0xe90>
   3ac84:	tbnz	w0, #27, 3b144 <aarch64_opcode_encode@@Base+0xdec>
   3ac88:	tbnz	w0, #6, 3b060 <aarch64_opcode_encode@@Base+0xd08>
   3ac8c:	tbnz	w0, #7, 3afa8 <aarch64_opcode_encode@@Base+0xc50>
   3ac90:	tbnz	w0, #8, 3b328 <aarch64_opcode_encode@@Base+0xfd0>
   3ac94:	tbnz	w0, #9, 3b4a8 <aarch64_opcode_encode@@Base+0x1150>
   3ac98:	tbnz	w0, #10, 3b404 <aarch64_opcode_encode@@Base+0x10ac>
   3ac9c:	tbnz	w0, #11, 3b584 <aarch64_opcode_encode@@Base+0x122c>
   3aca0:	tbz	w0, #22, 3a650 <aarch64_opcode_encode@@Base+0x2f8>
   3aca4:	ldr	w0, [x20, #20]
   3aca8:	cmp	w0, #0x47
   3acac:	b.eq	3be68 <aarch64_opcode_encode@@Base+0x1b10>  // b.none
   3acb0:	b.hi	3b880 <aarch64_opcode_encode@@Base+0x1528>  // b.pmore
   3acb4:	cmp	w0, #0x3f
   3acb8:	b.eq	3be00 <aarch64_opcode_encode@@Base+0x1aa8>  // b.none
   3acbc:	b.ls	3b814 <aarch64_opcode_encode@@Base+0x14bc>  // b.plast
   3acc0:	cmp	w0, #0x45
   3acc4:	b.eq	3bfa0 <aarch64_opcode_encode@@Base+0x1c48>  // b.none
   3acc8:	cmp	w0, #0x46
   3accc:	b.ne	3a650 <aarch64_opcode_encode@@Base+0x2f8>  // b.any
   3acd0:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3acd4:	ldr	w6, [sp, #88]
   3acd8:	mov	w0, #0xffffffff            	// #-1
   3acdc:	ldr	x1, [x1, #3944]
   3ace0:	add	x8, x1, #0x2bc
   3ace4:	ldp	w3, w4, [x8, #-12]
   3ace8:	ldp	w2, w5, [x8, #4]
   3acec:	cmp	w2, #0x0
   3acf0:	lsr	w1, w6, w3
   3acf4:	lsl	w3, w0, w4
   3acf8:	add	w4, w5, w0
   3acfc:	ccmp	w4, #0x1e, #0x2, ge  // ge = tcont
   3ad00:	b.hi	3a8ec <aarch64_opcode_encode@@Base+0x594>  // b.pmore
   3ad04:	add	w4, w2, w5
   3ad08:	cmp	w4, #0x20
   3ad0c:	b.gt	3a8ec <aarch64_opcode_encode@@Base+0x594>
   3ad10:	lsl	w0, w0, w5
   3ad14:	orr	w0, w0, w3
   3ad18:	bic	w0, w1, w0
   3ad1c:	lsl	w0, w0, w2
   3ad20:	orr	w0, w0, w6
   3ad24:	str	w0, [sp, #88]
   3ad28:	b	3a650 <aarch64_opcode_encode@@Base+0x2f8>
   3ad2c:	b.ne	3c054 <aarch64_opcode_encode@@Base+0x1cfc>  // b.any
   3ad30:	ldr	w1, [x19, #36]
   3ad34:	ldr	w0, [sp, #168]
   3ad38:	str	wzr, [sp, #120]
   3ad3c:	cmp	w1, w0
   3ad40:	b.ne	3c054 <aarch64_opcode_encode@@Base+0x1cfc>  // b.any
   3ad44:	mov	w0, #0x1                   	// #1
   3ad48:	ldr	w1, [x19, #40]
   3ad4c:	str	w0, [sp, #176]
   3ad50:	ldr	w0, [sp, #224]
   3ad54:	cmp	w1, w0
   3ad58:	b.ne	3c054 <aarch64_opcode_encode@@Base+0x1cfc>  // b.any
   3ad5c:	mov	w0, #0x2                   	// #2
   3ad60:	ldr	w1, [x19, #44]
   3ad64:	str	w0, [sp, #232]
   3ad68:	ldr	w0, [sp, #280]
   3ad6c:	cmp	w1, w0
   3ad70:	b.ne	3c054 <aarch64_opcode_encode@@Base+0x1cfc>  // b.any
   3ad74:	mov	w0, #0x3                   	// #3
   3ad78:	ldr	w1, [x19, #48]
   3ad7c:	str	w0, [sp, #288]
   3ad80:	ldr	w0, [sp, #336]
   3ad84:	cmp	w1, w0
   3ad88:	b.ne	3c054 <aarch64_opcode_encode@@Base+0x1cfc>  // b.any
   3ad8c:	mov	w0, #0x4                   	// #4
   3ad90:	ldr	w1, [sp, #392]
   3ad94:	str	w0, [sp, #344]
   3ad98:	ldr	w0, [x19, #52]
   3ad9c:	cmp	w1, w0
   3ada0:	b.ne	3c054 <aarch64_opcode_encode@@Base+0x1cfc>  // b.any
   3ada4:	mov	w0, #0x5                   	// #5
   3ada8:	str	w0, [sp, #400]
   3adac:	b	3a49c <aarch64_opcode_encode@@Base+0x144>
   3adb0:	mov	x0, x20
   3adb4:	bl	35170 <aarch64_num_of_operands@plt>
   3adb8:	ldr	x1, [sp, #96]
   3adbc:	mov	w2, #0x0                   	// #0
   3adc0:	ldrb	w4, [sp, #116]
   3adc4:	ldrb	w5, [sp, #172]
   3adc8:	add	x1, x1, #0x38
   3adcc:	ldrb	w6, [sp, #228]
   3add0:	ldrb	w7, [sp, #284]
   3add4:	ldrb	w8, [sp, #340]
   3add8:	ldrb	w9, [sp, #396]
   3addc:	b	3adf0 <aarch64_opcode_encode@@Base+0xa98>
   3ade0:	add	w2, w2, #0x1
   3ade4:	add	x1, x1, #0x6
   3ade8:	cmp	w2, #0xa
   3adec:	b.eq	3a9f0 <aarch64_opcode_encode@@Base+0x698>  // b.none
   3adf0:	cmp	w0, #0x0
   3adf4:	mov	w3, #0x0                   	// #0
   3adf8:	b.le	3ae70 <aarch64_opcode_encode@@Base+0xb18>
   3adfc:	ldrb	w3, [x1]
   3ae00:	cmp	w3, w4
   3ae04:	b.ne	3ade0 <aarch64_opcode_encode@@Base+0xa88>  // b.any
   3ae08:	cmp	w0, #0x1
   3ae0c:	b.eq	3b654 <aarch64_opcode_encode@@Base+0x12fc>  // b.none
   3ae10:	ldrb	w3, [x1, #1]
   3ae14:	cmp	w3, w5
   3ae18:	b.ne	3ade0 <aarch64_opcode_encode@@Base+0xa88>  // b.any
   3ae1c:	cmp	w0, #0x2
   3ae20:	b.eq	3b654 <aarch64_opcode_encode@@Base+0x12fc>  // b.none
   3ae24:	ldrb	w3, [x1, #2]
   3ae28:	cmp	w3, w6
   3ae2c:	b.ne	3ade0 <aarch64_opcode_encode@@Base+0xa88>  // b.any
   3ae30:	cmp	w0, #0x3
   3ae34:	b.eq	3b654 <aarch64_opcode_encode@@Base+0x12fc>  // b.none
   3ae38:	ldrb	w3, [x1, #3]
   3ae3c:	cmp	w3, w7
   3ae40:	b.ne	3ade0 <aarch64_opcode_encode@@Base+0xa88>  // b.any
   3ae44:	cmp	w0, #0x4
   3ae48:	b.eq	3b654 <aarch64_opcode_encode@@Base+0x12fc>  // b.none
   3ae4c:	ldrb	w3, [x1, #4]
   3ae50:	cmp	w3, w8
   3ae54:	b.ne	3ade0 <aarch64_opcode_encode@@Base+0xa88>  // b.any
   3ae58:	cmp	w0, #0x5
   3ae5c:	b.eq	3b654 <aarch64_opcode_encode@@Base+0x12fc>  // b.none
   3ae60:	ldrb	w3, [x1, #5]
   3ae64:	cmp	w3, w9
   3ae68:	b.ne	3ade0 <aarch64_opcode_encode@@Base+0xa88>  // b.any
   3ae6c:	mov	w3, #0x6                   	// #6
   3ae70:	cmp	w3, w0
   3ae74:	b.ne	3ade0 <aarch64_opcode_encode@@Base+0xa88>  // b.any
   3ae78:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3ae7c:	ldr	x0, [x0, #3944]
   3ae80:	ldr	w3, [x0, #896]
   3ae84:	ldr	w4, [x0, #900]
   3ae88:	cmp	w3, #0x0
   3ae8c:	sub	w0, w4, #0x1
   3ae90:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   3ae94:	b.hi	3a8ec <aarch64_opcode_encode@@Base+0x594>  // b.pmore
   3ae98:	add	w0, w3, w4
   3ae9c:	cmp	w0, #0x20
   3aea0:	b.gt	3a8ec <aarch64_opcode_encode@@Base+0x594>
   3aea4:	mov	w0, #0xffffffff            	// #-1
   3aea8:	ldr	w1, [sp, #88]
   3aeac:	lsl	w0, w0, w4
   3aeb0:	bic	w0, w2, w0
   3aeb4:	lsl	w0, w0, w3
   3aeb8:	orr	w0, w1, w0
   3aebc:	str	w0, [sp, #88]
   3aec0:	b	3a788 <aarch64_opcode_encode@@Base+0x430>
   3aec4:	mov	x0, x20
   3aec8:	bl	35170 <aarch64_num_of_operands@plt>
   3aecc:	ldr	x2, [sp, #96]
   3aed0:	mov	w1, #0x0                   	// #0
   3aed4:	ldrb	w4, [sp, #116]
   3aed8:	ldrb	w5, [sp, #172]
   3aedc:	add	x2, x2, #0x38
   3aee0:	ldrb	w6, [sp, #228]
   3aee4:	ldrb	w7, [sp, #284]
   3aee8:	ldrb	w8, [sp, #340]
   3aeec:	ldrb	w9, [sp, #396]
   3aef0:	b	3af04 <aarch64_opcode_encode@@Base+0xbac>
   3aef4:	add	w1, w1, #0x1
   3aef8:	add	x2, x2, #0x6
   3aefc:	cmp	w1, #0xa
   3af00:	b.eq	3a9f0 <aarch64_opcode_encode@@Base+0x698>  // b.none
   3af04:	cmp	w0, #0x0
   3af08:	mov	w3, #0x0                   	// #0
   3af0c:	b.le	3af84 <aarch64_opcode_encode@@Base+0xc2c>
   3af10:	ldrb	w3, [x2]
   3af14:	cmp	w3, w4
   3af18:	b.ne	3aef4 <aarch64_opcode_encode@@Base+0xb9c>  // b.any
   3af1c:	cmp	w0, #0x1
   3af20:	b.eq	3b664 <aarch64_opcode_encode@@Base+0x130c>  // b.none
   3af24:	ldrb	w3, [x2, #1]
   3af28:	cmp	w3, w5
   3af2c:	b.ne	3aef4 <aarch64_opcode_encode@@Base+0xb9c>  // b.any
   3af30:	cmp	w0, #0x2
   3af34:	b.eq	3b664 <aarch64_opcode_encode@@Base+0x130c>  // b.none
   3af38:	ldrb	w3, [x2, #2]
   3af3c:	cmp	w3, w6
   3af40:	b.ne	3aef4 <aarch64_opcode_encode@@Base+0xb9c>  // b.any
   3af44:	cmp	w0, #0x3
   3af48:	b.eq	3b664 <aarch64_opcode_encode@@Base+0x130c>  // b.none
   3af4c:	ldrb	w3, [x2, #3]
   3af50:	cmp	w3, w7
   3af54:	b.ne	3aef4 <aarch64_opcode_encode@@Base+0xb9c>  // b.any
   3af58:	cmp	w0, #0x4
   3af5c:	b.eq	3b664 <aarch64_opcode_encode@@Base+0x130c>  // b.none
   3af60:	ldrb	w3, [x2, #4]
   3af64:	cmp	w3, w8
   3af68:	b.ne	3aef4 <aarch64_opcode_encode@@Base+0xb9c>  // b.any
   3af6c:	cmp	w0, #0x5
   3af70:	b.eq	3b664 <aarch64_opcode_encode@@Base+0x130c>  // b.none
   3af74:	ldrb	w3, [x2, #5]
   3af78:	cmp	w3, w9
   3af7c:	b.ne	3aef4 <aarch64_opcode_encode@@Base+0xb9c>  // b.any
   3af80:	mov	w3, #0x6                   	// #6
   3af84:	cmp	w0, w3
   3af88:	b.ne	3aef4 <aarch64_opcode_encode@@Base+0xb9c>  // b.any
   3af8c:	mov	x0, x21
   3af90:	mov	w5, #0x8                   	// #8
   3af94:	mov	w4, #0x44                  	// #68
   3af98:	mov	w3, #0x2                   	// #2
   3af9c:	mov	w2, #0x0                   	// #0
   3afa0:	bl	361c0 <init_disassemble_info@@Base+0x110>
   3afa4:	b	3a788 <aarch64_opcode_encode@@Base+0x430>
   3afa8:	ldr	w0, [x20, #36]
   3afac:	bl	35710 <aarch64_get_operand_class@plt>
   3afb0:	cmp	w0, #0x3
   3afb4:	mov	w0, #0x1                   	// #1
   3afb8:	b.eq	3afd0 <aarch64_opcode_encode@@Base+0xc78>  // b.none
   3afbc:	ldr	w0, [x20, #32]
   3afc0:	bl	35710 <aarch64_get_operand_class@plt>
   3afc4:	cmp	w0, #0x3
   3afc8:	mov	w0, #0x0                   	// #0
   3afcc:	b.ne	3c14c <aarch64_opcode_encode@@Base+0x1df4>  // b.any
   3afd0:	sxtw	x1, w0
   3afd4:	add	x2, sp, #0x74
   3afd8:	lsl	x0, x1, #3
   3afdc:	sub	x0, x0, x1
   3afe0:	lsl	x0, x0, #3
   3afe4:	ldrb	w0, [x2, x0]
   3afe8:	sub	w0, w0, #0x6
   3afec:	and	w0, w0, #0xff
   3aff0:	cmp	w0, #0x2
   3aff4:	b.hi	3c11c <aarch64_opcode_encode@@Base+0x1dc4>  // b.pmore
   3aff8:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3affc:	and	x0, x0, #0xff
   3b000:	adrp	x2, 5b000 <floatformat_from_double@@Base+0x3e8>
   3b004:	add	x2, x2, #0xf90
   3b008:	ldr	x1, [x1, #3944]
   3b00c:	ldr	w3, [x2, x0, lsl #2]
   3b010:	ldr	w2, [x1, #288]
   3b014:	ldr	w1, [x1, #292]
   3b018:	cmp	w2, #0x0
   3b01c:	sub	w0, w1, #0x1
   3b020:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   3b024:	b.hi	3a8ec <aarch64_opcode_encode@@Base+0x594>  // b.pmore
   3b028:	add	w0, w2, w1
   3b02c:	cmp	w0, #0x20
   3b030:	b.gt	3a8ec <aarch64_opcode_encode@@Base+0x594>
   3b034:	mov	w0, #0xffffffff            	// #-1
   3b038:	ldr	x20, [sp, #96]
   3b03c:	lsl	w0, w0, w1
   3b040:	ldr	w1, [sp, #88]
   3b044:	bic	w0, w3, w0
   3b048:	lsl	w0, w0, w2
   3b04c:	orr	w0, w1, w0
   3b050:	str	w0, [sp, #88]
   3b054:	ldr	x0, [x20, #120]
   3b058:	tbz	w0, #8, 3ac94 <aarch64_opcode_encode@@Base+0x93c>
   3b05c:	b	3b328 <aarch64_opcode_encode@@Base+0xfd0>
   3b060:	mov	x0, x20
   3b064:	bl	357b0 <aarch64_select_operand_for_sizeq_field_coding@plt>
   3b068:	sbfiz	x1, x0, #3, #32
   3b06c:	add	x2, sp, #0x74
   3b070:	sub	x0, x1, w0, sxtw
   3b074:	lsl	x0, x0, #3
   3b078:	ldrb	w0, [x2, x0]
   3b07c:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3b080:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   3b084:	ldr	x20, [sp, #96]
   3b088:	ldr	x4, [x4, #3944]
   3b08c:	ldr	w3, [x20, #12]
   3b090:	ldp	w6, w1, [x4, #88]
   3b094:	cmp	w6, #0x0
   3b098:	sub	w2, w1, #0x1
   3b09c:	ccmp	w2, #0x1e, #0x2, ge  // ge = tcont
   3b0a0:	b.hi	3a8ec <aarch64_opcode_encode@@Base+0x594>  // b.pmore
   3b0a4:	add	w2, w6, w1
   3b0a8:	cmp	w2, #0x20
   3b0ac:	b.gt	3a8ec <aarch64_opcode_encode@@Base+0x594>
   3b0b0:	ldr	w7, [x20, #16]
   3b0b4:	mov	x8, #0x40                  	// #64
   3b0b8:	mov	w2, #0xffffffff            	// #-1
   3b0bc:	mov	x5, #0x48                  	// #72
   3b0c0:	sub	w7, w7, #0x12
   3b0c4:	lsl	w1, w2, w1
   3b0c8:	cmp	w7, #0x4
   3b0cc:	bic	w1, w0, w1
   3b0d0:	csel	x5, x5, x8, cc  // cc = lo, ul, last
   3b0d4:	and	w1, w1, #0x1
   3b0d8:	add	x7, x5, x4
   3b0dc:	ldr	w8, [sp, #88]
   3b0e0:	lsl	w1, w1, w6
   3b0e4:	bic	w1, w1, w3
   3b0e8:	ldr	w4, [x5, x4]
   3b0ec:	orr	w1, w1, w8
   3b0f0:	ldr	w5, [x7, #4]
   3b0f4:	mvn	w3, w3
   3b0f8:	str	w1, [sp, #88]
   3b0fc:	cmp	w4, #0x0
   3b100:	add	w6, w5, w2
   3b104:	lsr	w0, w0, #1
   3b108:	ccmp	w6, #0x1e, #0x2, ge  // ge = tcont
   3b10c:	b.hi	3a8ec <aarch64_opcode_encode@@Base+0x594>  // b.pmore
   3b110:	add	w6, w4, w5
   3b114:	cmp	w6, #0x20
   3b118:	b.gt	3a8ec <aarch64_opcode_encode@@Base+0x594>
   3b11c:	lsl	w2, w2, w5
   3b120:	bic	w2, w0, w2
   3b124:	and	w2, w2, #0x3
   3b128:	ldr	x0, [x20, #120]
   3b12c:	lsl	w2, w2, w4
   3b130:	and	w2, w3, w2
   3b134:	orr	w1, w2, w1
   3b138:	str	w1, [sp, #88]
   3b13c:	tbz	w0, #7, 3ac90 <aarch64_opcode_encode@@Base+0x938>
   3b140:	b	3afa8 <aarch64_opcode_encode@@Base+0xc50>
   3b144:	ldr	w0, [x20, #32]
   3b148:	bl	35710 <aarch64_get_operand_class@plt>
   3b14c:	cmp	w0, #0x1
   3b150:	mov	w0, #0x0                   	// #0
   3b154:	b.eq	3b168 <aarch64_opcode_encode@@Base+0xe10>  // b.none
   3b158:	ldr	w0, [x20, #36]
   3b15c:	bl	35710 <aarch64_get_operand_class@plt>
   3b160:	cmp	w0, #0x1
   3b164:	b.ne	3c144 <aarch64_opcode_encode@@Base+0x1dec>  // b.any
   3b168:	sxtw	x0, w0
   3b16c:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   3b170:	add	x3, sp, #0x74
   3b174:	mov	w4, #0xfd                  	// #253
   3b178:	lsl	x1, x0, #3
   3b17c:	sub	x0, x1, x0
   3b180:	ldr	x1, [x2, #3944]
   3b184:	lsl	x0, x0, #3
   3b188:	ldrb	w2, [x3, x0]
   3b18c:	ldr	w3, [x1, #480]
   3b190:	sub	w2, w2, #0x2
   3b194:	ldr	w0, [x1, #484]
   3b198:	tst	w2, w4
   3b19c:	cset	w2, eq  // eq = none
   3b1a0:	sub	w1, w0, #0x1
   3b1a4:	cmp	w3, #0x0
   3b1a8:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   3b1ac:	b.hi	3a8ec <aarch64_opcode_encode@@Base+0x594>  // b.pmore
   3b1b0:	add	w1, w3, w0
   3b1b4:	cmp	w1, #0x20
   3b1b8:	b.gt	3a8ec <aarch64_opcode_encode@@Base+0x594>
   3b1bc:	ldr	x20, [sp, #96]
   3b1c0:	mov	w1, #0xffffffff            	// #-1
   3b1c4:	lsl	w1, w1, w0
   3b1c8:	bic	w1, w2, w1
   3b1cc:	ldr	w2, [sp, #88]
   3b1d0:	ldr	x0, [x20, #120]
   3b1d4:	lsl	w1, w1, w3
   3b1d8:	orr	w1, w2, w1
   3b1dc:	str	w1, [sp, #88]
   3b1e0:	tbz	w0, #6, 3ac8c <aarch64_opcode_encode@@Base+0x934>
   3b1e4:	b	3b060 <aarch64_opcode_encode@@Base+0xd08>
   3b1e8:	ldr	w0, [x20, #32]
   3b1ec:	bl	35710 <aarch64_get_operand_class@plt>
   3b1f0:	cmp	w0, #0x1
   3b1f4:	mov	w0, #0x0                   	// #0
   3b1f8:	b.eq	3b210 <aarch64_opcode_encode@@Base+0xeb8>  // b.none
   3b1fc:	ldr	w0, [x20, #36]
   3b200:	bl	35710 <aarch64_get_operand_class@plt>
   3b204:	cmp	w0, #0x1
   3b208:	mov	w0, #0x1                   	// #1
   3b20c:	b.ne	3c144 <aarch64_opcode_encode@@Base+0x1dec>  // b.any
   3b210:	sxtw	x1, w0
   3b214:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   3b218:	add	x3, sp, #0x74
   3b21c:	mov	w4, #0xfd                  	// #253
   3b220:	lsl	x0, x1, #3
   3b224:	sub	x0, x0, x1
   3b228:	ldr	x2, [x2, #3944]
   3b22c:	lsl	x0, x0, #3
   3b230:	ldrb	w1, [x3, x0]
   3b234:	ldr	w3, [x2, #472]
   3b238:	sub	w1, w1, #0x2
   3b23c:	ldr	w0, [x2, #476]
   3b240:	tst	w1, w4
   3b244:	cset	w5, eq  // eq = none
   3b248:	sub	w1, w0, #0x1
   3b24c:	cmp	w3, #0x0
   3b250:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   3b254:	b.hi	3a8ec <aarch64_opcode_encode@@Base+0x594>  // b.pmore
   3b258:	add	w1, w3, w0
   3b25c:	cmp	w1, #0x20
   3b260:	b.gt	3a8ec <aarch64_opcode_encode@@Base+0x594>
   3b264:	ldr	x20, [sp, #96]
   3b268:	mov	w4, #0xffffffff            	// #-1
   3b26c:	ldr	w6, [sp, #88]
   3b270:	lsl	w1, w4, w0
   3b274:	bic	w1, w5, w1
   3b278:	ldr	x0, [x20, #120]
   3b27c:	lsl	w1, w1, w3
   3b280:	orr	w1, w1, w6
   3b284:	str	w1, [sp, #88]
   3b288:	tbz	w0, #23, 3ac84 <aarch64_opcode_encode@@Base+0x92c>
   3b28c:	ldr	w6, [x2, #448]
   3b290:	ldr	w2, [x2, #452]
   3b294:	cmp	w6, #0x0
   3b298:	ldr	w3, [x20, #12]
   3b29c:	add	w7, w2, w4
   3b2a0:	ccmp	w7, #0x1e, #0x2, ge  // ge = tcont
   3b2a4:	b.hi	3a8ec <aarch64_opcode_encode@@Base+0x594>  // b.pmore
   3b2a8:	add	w7, w6, w2
   3b2ac:	cmp	w7, #0x20
   3b2b0:	b.gt	3a8ec <aarch64_opcode_encode@@Base+0x594>
   3b2b4:	lsl	w2, w4, w2
   3b2b8:	bic	w2, w5, w2
   3b2bc:	lsl	w2, w2, w6
   3b2c0:	bic	w2, w2, w3
   3b2c4:	orr	w1, w2, w1
   3b2c8:	str	w1, [sp, #88]
   3b2cc:	tbz	w0, #27, 3ac88 <aarch64_opcode_encode@@Base+0x930>
   3b2d0:	b	3b144 <aarch64_opcode_encode@@Base+0xdec>
   3b2d4:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3b2d8:	ldr	x2, [sp, #104]
   3b2dc:	ldr	x1, [x1, #3944]
   3b2e0:	ldr	w5, [x2, #32]
   3b2e4:	ldp	w3, w4, [x1, #8]
   3b2e8:	cmp	w3, #0x0
   3b2ec:	sub	w1, w4, #0x1
   3b2f0:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   3b2f4:	b.hi	3a8ec <aarch64_opcode_encode@@Base+0x594>  // b.pmore
   3b2f8:	add	w1, w3, w4
   3b2fc:	cmp	w1, #0x20
   3b300:	b.gt	3a8ec <aarch64_opcode_encode@@Base+0x594>
   3b304:	mov	w1, #0xffffffff            	// #-1
   3b308:	ldr	w2, [sp, #88]
   3b30c:	lsl	w1, w1, w4
   3b310:	bic	w1, w5, w1
   3b314:	lsl	w1, w1, w3
   3b318:	orr	w1, w2, w1
   3b31c:	str	w1, [sp, #88]
   3b320:	tbz	w0, #5, 3ac84 <aarch64_opcode_encode@@Base+0x92c>
   3b324:	b	3b1e8 <aarch64_opcode_encode@@Base+0xe90>
   3b328:	ldr	w0, [x20, #32]
   3b32c:	str	x25, [sp, #64]
   3b330:	bl	35710 <aarch64_get_operand_class@plt>
   3b334:	cmp	w0, #0x6
   3b338:	b.eq	3bc00 <aarch64_opcode_encode@@Base+0x18a8>  // b.none
   3b33c:	ldr	w0, [x20, #36]
   3b340:	mov	w25, #0x0                   	// #0
   3b344:	bl	35710 <aarch64_get_operand_class@plt>
   3b348:	cmp	w0, #0x6
   3b34c:	b.ne	3c23c <aarch64_opcode_encode@@Base+0x1ee4>  // b.any
   3b350:	ldrb	w0, [x20, #57]
   3b354:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3b358:	ands	w1, w0, #0xff
   3b35c:	cset	w0, eq  // eq = none
   3b360:	cmp	w0, #0x0
   3b364:	ccmp	w1, w25, #0x0, ne  // ne = any
   3b368:	b.eq	3c23c <aarch64_opcode_encode@@Base+0x1ee4>  // b.none
   3b36c:	mov	w0, #0x1                   	// #1
   3b370:	cbz	w25, 3b37c <aarch64_opcode_encode@@Base+0x1024>
   3b374:	cmp	w25, w1, lsl #1
   3b378:	cset	w0, eq  // eq = none
   3b37c:	sxtw	x1, w0
   3b380:	add	x2, sp, #0x74
   3b384:	lsl	x0, x1, #3
   3b388:	sub	x0, x0, x1
   3b38c:	lsl	x0, x0, #3
   3b390:	ldrb	w0, [x2, x0]
   3b394:	sub	w1, w0, #0x5
   3b398:	cmp	w1, #0x4
   3b39c:	b.hi	3c1f0 <aarch64_opcode_encode@@Base+0x1e98>  // b.pmore
   3b3a0:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3b3a4:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   3b3a8:	ldr	x20, [sp, #96]
   3b3ac:	ldr	x1, [x2, #3944]
   3b3b0:	ldr	w3, [x20, #12]
   3b3b4:	ldp	w4, w5, [x1, #64]
   3b3b8:	cmp	w4, #0x0
   3b3bc:	sub	w1, w5, #0x1
   3b3c0:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   3b3c4:	b.hi	3a8f0 <aarch64_opcode_encode@@Base+0x598>  // b.pmore
   3b3c8:	add	w1, w4, w5
   3b3cc:	cmp	w1, #0x20
   3b3d0:	b.gt	3a8f0 <aarch64_opcode_encode@@Base+0x598>
   3b3d4:	mov	w1, #0xffffffff            	// #-1
   3b3d8:	ldr	w2, [sp, #88]
   3b3dc:	lsl	w1, w1, w5
   3b3e0:	bic	w1, w0, w1
   3b3e4:	ldr	x0, [x20, #120]
   3b3e8:	lsl	w1, w1, w4
   3b3ec:	bic	w1, w1, w3
   3b3f0:	orr	w1, w2, w1
   3b3f4:	str	w1, [sp, #88]
   3b3f8:	ldr	x25, [sp, #64]
   3b3fc:	tbz	w0, #9, 3ac98 <aarch64_opcode_encode@@Base+0x940>
   3b400:	b	3b4a8 <aarch64_opcode_encode@@Base+0x1150>
   3b404:	add	x0, x20, #0x20
   3b408:	mov	w1, #0x4                   	// #4
   3b40c:	bl	35100 <aarch64_operand_index@plt>
   3b410:	cmn	w0, #0x1
   3b414:	b.eq	3bbf8 <aarch64_opcode_encode@@Base+0x18a0>  // b.none
   3b418:	cmp	w0, #0x1
   3b41c:	b.hi	3c214 <aarch64_opcode_encode@@Base+0x1ebc>  // b.pmore
   3b420:	sxtw	x20, w0
   3b424:	ldr	x0, [sp, #96]
   3b428:	add	x1, x20, #0x8
   3b42c:	ldr	w0, [x0, x1, lsl #2]
   3b430:	bl	35710 <aarch64_get_operand_class@plt>
   3b434:	cmp	w0, #0x1
   3b438:	b.ne	3c1a0 <aarch64_opcode_encode@@Base+0x1e48>  // b.any
   3b43c:	lsl	x0, x20, #3
   3b440:	add	x1, sp, #0x74
   3b444:	sub	x0, x0, x20
   3b448:	lsl	x0, x0, #3
   3b44c:	ldrb	w0, [x1, x0]
   3b450:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3b454:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   3b458:	ldr	x1, [x2, #3944]
   3b45c:	ldp	w3, w2, [x1, #88]
   3b460:	cmp	w3, #0x0
   3b464:	sub	w1, w2, #0x1
   3b468:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   3b46c:	b.hi	3a8ec <aarch64_opcode_encode@@Base+0x594>  // b.pmore
   3b470:	add	w1, w3, w2
   3b474:	cmp	w1, #0x20
   3b478:	b.gt	3a8ec <aarch64_opcode_encode@@Base+0x594>
   3b47c:	ldr	x20, [sp, #96]
   3b480:	mov	w1, #0xffffffff            	// #-1
   3b484:	lsl	w1, w1, w2
   3b488:	ldr	w2, [sp, #88]
   3b48c:	bic	w1, w0, w1
   3b490:	ldr	x0, [x20, #120]
   3b494:	lsl	w1, w1, w3
   3b498:	orr	w1, w2, w1
   3b49c:	str	w1, [sp, #88]
   3b4a0:	tbz	w0, #11, 3aca0 <aarch64_opcode_encode@@Base+0x948>
   3b4a4:	b	3b584 <aarch64_opcode_encode@@Base+0x122c>
   3b4a8:	ldr	w0, [x20, #32]
   3b4ac:	ldrb	w20, [sp, #116]
   3b4b0:	bl	35710 <aarch64_get_operand_class@plt>
   3b4b4:	cmp	w0, #0x4
   3b4b8:	b.ne	3c0cc <aarch64_opcode_encode@@Base+0x1d74>  // b.any
   3b4bc:	sub	w0, w20, #0xd
   3b4c0:	cmp	w0, #0x8
   3b4c4:	b.hi	3c0cc <aarch64_opcode_encode@@Base+0x1d74>  // b.pmore
   3b4c8:	mov	w0, w20
   3b4cc:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3b4d0:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   3b4d4:	ldr	x20, [sp, #96]
   3b4d8:	ldr	x5, [x5, #3944]
   3b4dc:	ldr	w4, [x20, #12]
   3b4e0:	ldp	w7, w1, [x5, #88]
   3b4e4:	cmp	w7, #0x0
   3b4e8:	sub	w2, w1, #0x1
   3b4ec:	ccmp	w2, #0x1e, #0x2, ge  // ge = tcont
   3b4f0:	b.hi	3a8ec <aarch64_opcode_encode@@Base+0x594>  // b.pmore
   3b4f4:	add	w2, w7, w1
   3b4f8:	cmp	w2, #0x20
   3b4fc:	b.gt	3a8ec <aarch64_opcode_encode@@Base+0x594>
   3b500:	mov	w2, #0xffffffff            	// #-1
   3b504:	ldr	w8, [sp, #88]
   3b508:	lsl	w1, w2, w1
   3b50c:	bic	w1, w0, w1
   3b510:	and	w1, w1, #0x1
   3b514:	cmp	w0, #0x7
   3b518:	mvn	w6, w4
   3b51c:	asr	w3, w0, #1
   3b520:	lsl	w0, w1, w7
   3b524:	bic	w4, w0, w4
   3b528:	orr	w4, w4, w8
   3b52c:	str	w4, [sp, #88]
   3b530:	b.hi	3c0a4 <aarch64_opcode_encode@@Base+0x1d4c>  // b.pmore
   3b534:	ldr	w0, [x5, #348]
   3b538:	add	w1, w3, #0x1
   3b53c:	cmp	w1, w0
   3b540:	b.gt	3a8ec <aarch64_opcode_encode@@Base+0x594>
   3b544:	ldr	w5, [x5, #344]
   3b548:	mov	w0, #0x1                   	// #1
   3b54c:	lsl	w0, w0, w3
   3b550:	tbnz	w5, #31, 3a8ec <aarch64_opcode_encode@@Base+0x594>
   3b554:	add	w3, w1, w5
   3b558:	cmp	w3, #0x20
   3b55c:	b.gt	3a8ec <aarch64_opcode_encode@@Base+0x594>
   3b560:	lsl	w1, w2, w1
   3b564:	bic	w1, w0, w1
   3b568:	ldr	x0, [x20, #120]
   3b56c:	lsl	w1, w1, w5
   3b570:	and	w1, w6, w1
   3b574:	orr	w4, w1, w4
   3b578:	str	w4, [sp, #88]
   3b57c:	tbz	w0, #10, 3ac9c <aarch64_opcode_encode@@Base+0x944>
   3b580:	b	3b404 <aarch64_opcode_encode@@Base+0x10ac>
   3b584:	ldr	w0, [x20, #32]
   3b588:	str	x25, [sp, #64]
   3b58c:	bl	35710 <aarch64_get_operand_class@plt>
   3b590:	mov	w20, w0
   3b594:	cmp	w0, #0x1
   3b598:	b.ne	3c17c <aarch64_opcode_encode@@Base+0x1e24>  // b.any
   3b59c:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3b5a0:	ldrb	w0, [sp, #116]
   3b5a4:	ldr	x1, [x1, #3944]
   3b5a8:	ldr	w2, [x1, #268]
   3b5ac:	cmp	w2, #0x0
   3b5b0:	b.le	3c174 <aarch64_opcode_encode@@Base+0x1e1c>
   3b5b4:	ldr	w25, [x1, #264]
   3b5b8:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3b5bc:	sub	w1, w20, w0
   3b5c0:	cmp	w25, #0x1f
   3b5c4:	b.hi	3a8f0 <aarch64_opcode_encode@@Base+0x598>  // b.pmore
   3b5c8:	ldr	x20, [sp, #96]
   3b5cc:	and	w1, w1, #0x1
   3b5d0:	ldr	w2, [sp, #88]
   3b5d4:	lsl	w1, w1, w25
   3b5d8:	ldr	x0, [x20, #120]
   3b5dc:	orr	w1, w2, w1
   3b5e0:	str	w1, [sp, #88]
   3b5e4:	ldr	x25, [sp, #64]
   3b5e8:	tbz	w0, #22, 3a650 <aarch64_opcode_encode@@Base+0x2f8>
   3b5ec:	b	3aca4 <aarch64_opcode_encode@@Base+0x94c>
   3b5f0:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3b5f4:	ldr	x0, [x0, #3944]
   3b5f8:	ldr	w3, [x0, #912]
   3b5fc:	ldr	w4, [x0, #916]
   3b600:	cmp	w3, #0x0
   3b604:	sub	w0, w4, #0x1
   3b608:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   3b60c:	b.ls	3ae98 <aarch64_opcode_encode@@Base+0xb40>  // b.plast
   3b610:	b	3a8ec <aarch64_opcode_encode@@Base+0x594>
   3b614:	mov	x0, x21
   3b618:	mov	w5, #0x8                   	// #8
   3b61c:	mov	w4, #0x45                  	// #69
   3b620:	mov	w3, #0x2                   	// #2
   3b624:	mov	w2, #0x0                   	// #0
   3b628:	bl	361c0 <init_disassemble_info@@Base+0x110>
   3b62c:	b	3a788 <aarch64_opcode_encode@@Base+0x430>
   3b630:	mov	w0, #0x1                   	// #1
   3b634:	mov	w5, #0x70                  	// #112
   3b638:	lsl	w1, w0, w1
   3b63c:	mov	w4, #0x76                  	// #118
   3b640:	mov	x0, x21
   3b644:	mov	w3, #0x2                   	// #2
   3b648:	mov	w2, #0x0                   	// #0
   3b64c:	bl	361c0 <init_disassemble_info@@Base+0x110>
   3b650:	b	3a788 <aarch64_opcode_encode@@Base+0x430>
   3b654:	mov	w3, w0
   3b658:	b	3ae70 <aarch64_opcode_encode@@Base+0xb18>
   3b65c:	mov	w3, w0
   3b660:	b	3a8c8 <aarch64_opcode_encode@@Base+0x570>
   3b664:	mov	w3, w0
   3b668:	b	3af84 <aarch64_opcode_encode@@Base+0xc2c>
   3b66c:	mov	w3, w0
   3b670:	b	3a734 <aarch64_opcode_encode@@Base+0x3dc>
   3b674:	cmp	w0, #0x29
   3b678:	b.eq	3bcd4 <aarch64_opcode_encode@@Base+0x197c>  // b.none
   3b67c:	sub	w0, w0, #0x2b
   3b680:	cmp	w0, #0x2
   3b684:	b.hi	3ac30 <aarch64_opcode_encode@@Base+0x8d8>  // b.pmore
   3b688:	ldr	x0, [sp, #240]
   3b68c:	ldr	x1, [sp, #296]
   3b690:	add	x0, x0, x1
   3b694:	sub	x0, x0, #0x1
   3b698:	str	x0, [sp, #296]
   3b69c:	b	3ac30 <aarch64_opcode_encode@@Base+0x8d8>
   3b6a0:	cmp	w0, #0x39
   3b6a4:	b.hi	3b730 <aarch64_opcode_encode@@Base+0x13d8>  // b.pmore
   3b6a8:	cmp	w0, #0x37
   3b6ac:	b.hi	3bd00 <aarch64_opcode_encode@@Base+0x19a8>  // b.pmore
   3b6b0:	cmp	w0, #0x31
   3b6b4:	b.eq	3bca8 <aarch64_opcode_encode@@Base+0x1950>  // b.none
   3b6b8:	b.ls	3b754 <aarch64_opcode_encode@@Base+0x13fc>  // b.plast
   3b6bc:	sub	w0, w0, #0x35
   3b6c0:	cmp	w0, #0x2
   3b6c4:	b.hi	3ac30 <aarch64_opcode_encode@@Base+0x8d8>  // b.pmore
   3b6c8:	ldp	x2, x3, [sp, #168]
   3b6cc:	mov	w4, #0x2                   	// #2
   3b6d0:	ldp	x6, x7, [sp, #224]
   3b6d4:	stp	x2, x3, [sp, #224]
   3b6d8:	add	x2, sp, #0x200
   3b6dc:	str	w4, [sp, #232]
   3b6e0:	mov	w1, #0x3                   	// #3
   3b6e4:	ldp	x4, x5, [sp, #200]
   3b6e8:	ldr	x0, [sp, #240]
   3b6ec:	stp	x6, x7, [x2, #-232]
   3b6f0:	ldp	x2, x3, [sp, #184]
   3b6f4:	str	w1, [sp, #288]
   3b6f8:	ldr	x6, [sp, #248]
   3b6fc:	stp	x2, x3, [sp, #240]
   3b700:	ldp	x2, x3, [sp, #256]
   3b704:	stp	x4, x5, [sp, #256]
   3b708:	add	x4, sp, #0x200
   3b70c:	ldr	x7, [sp, #216]
   3b710:	stp	x0, x6, [sp, #296]
   3b714:	ldr	x1, [sp, #272]
   3b718:	str	x7, [sp, #272]
   3b71c:	stp	x2, x3, [x4, #-200]
   3b720:	str	x1, [sp, #328]
   3b724:	bl	35870 <get_inverted_cond@plt>
   3b728:	str	x0, [sp, #296]
   3b72c:	b	3ac30 <aarch64_opcode_encode@@Base+0x8d8>
   3b730:	cmp	w0, #0x40
   3b734:	b.eq	3bd88 <aarch64_opcode_encode@@Base+0x1a30>  // b.none
   3b738:	sub	w0, w0, #0x41
   3b73c:	cmp	w0, #0x3
   3b740:	b.hi	3ac30 <aarch64_opcode_encode@@Base+0x8d8>  // b.pmore
   3b744:	ldrb	w0, [sp, #172]
   3b748:	strb	w0, [sp, #228]
   3b74c:	str	xzr, [sp, #240]
   3b750:	b	3ac30 <aarch64_opcode_encode@@Base+0x8d8>
   3b754:	cmp	w0, #0x30
   3b758:	b.ne	3ac30 <aarch64_opcode_encode@@Base+0x8d8>  // b.any
   3b75c:	ldp	x10, x0, [sp, #160]
   3b760:	mov	w9, #0x2                   	// #2
   3b764:	ldr	x4, [sp, #176]
   3b768:	mov	w1, #0x3                   	// #3
   3b76c:	ldp	x2, x3, [sp, #224]
   3b770:	str	x4, [sp, #232]
   3b774:	add	x4, sp, #0x200
   3b778:	ubfx	x8, x0, #32, #8
   3b77c:	cmp	w8, #0x1d
   3b780:	str	w9, [sp, #232]
   3b784:	ldp	x8, x9, [sp, #200]
   3b788:	stp	x2, x3, [x4, #-232]
   3b78c:	mov	w7, #0x1                   	// #1
   3b790:	ldp	x2, x3, [sp, #112]
   3b794:	stp	x2, x3, [sp, #168]
   3b798:	mov	w6, #0x1f                  	// #31
   3b79c:	ldp	x2, x3, [sp, #144]
   3b7a0:	stp	x2, x3, [sp, #200]
   3b7a4:	ldr	x11, [sp, #216]
   3b7a8:	stp	x10, x0, [sp, #216]
   3b7ac:	ldp	x2, x10, [sp, #240]
   3b7b0:	str	w1, [sp, #288]
   3b7b4:	ldr	x1, [sp, #184]
   3b7b8:	str	x1, [sp, #240]
   3b7bc:	stp	x2, x10, [sp, #296]
   3b7c0:	neg	x0, x1
   3b7c4:	mov	x1, x2
   3b7c8:	add	x2, sp, #0x200
   3b7cc:	ldp	x4, x5, [sp, #128]
   3b7d0:	sub	x1, x1, #0x1
   3b7d4:	ldr	x12, [sp, #192]
   3b7d8:	stp	x4, x5, [sp, #184]
   3b7dc:	ldp	x4, x5, [sp, #256]
   3b7e0:	str	x12, [sp, #248]
   3b7e4:	ldr	x3, [sp, #272]
   3b7e8:	str	x11, [sp, #272]
   3b7ec:	stp	x4, x5, [x2, #-200]
   3b7f0:	stp	x8, x9, [sp, #256]
   3b7f4:	str	x3, [sp, #328]
   3b7f8:	str	w7, [sp, #176]
   3b7fc:	str	w6, [sp, #184]
   3b800:	b.eq	3bcc4 <aarch64_opcode_encode@@Base+0x196c>  // b.none
   3b804:	and	x0, x0, #0x3f
   3b808:	str	x0, [sp, #240]
   3b80c:	str	x1, [sp, #296]
   3b810:	b	3ac30 <aarch64_opcode_encode@@Base+0x8d8>
   3b814:	cmp	w0, #0x3a
   3b818:	b.eq	3bf64 <aarch64_opcode_encode@@Base+0x1c0c>  // b.none
   3b81c:	sub	w1, w0, #0x3b
   3b820:	cmp	w1, #0x3
   3b824:	b.hi	3a650 <aarch64_opcode_encode@@Base+0x2f8>  // b.pmore
   3b828:	sub	w0, w0, #0x3d
   3b82c:	cmp	w0, #0x1
   3b830:	b.hi	3c034 <aarch64_opcode_encode@@Base+0x1cdc>  // b.pmore
   3b834:	ldrb	w1, [sp, #116]
   3b838:	sub	w0, w1, #0x13
   3b83c:	tst	w0, #0xfffffffd
   3b840:	b.ne	3c1c8 <aarch64_opcode_encode@@Base+0x1e70>  // b.any
   3b844:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3b848:	cmp	w1, #0x13
   3b84c:	cset	w1, ne  // ne = any
   3b850:	ldr	x0, [x0, #3944]
   3b854:	ldr	w2, [x0, #68]
   3b858:	cmp	w2, #0x0
   3b85c:	b.le	3a8ec <aarch64_opcode_encode@@Base+0x594>
   3b860:	ldr	w2, [x0, #64]
   3b864:	cmp	w2, #0x1f
   3b868:	b.hi	3a8ec <aarch64_opcode_encode@@Base+0x594>  // b.pmore
   3b86c:	ldr	w0, [sp, #88]
   3b870:	lsl	w1, w1, w2
   3b874:	orr	w0, w0, w1
   3b878:	str	w0, [sp, #88]
   3b87c:	b	3a650 <aarch64_opcode_encode@@Base+0x2f8>
   3b880:	cmp	w0, #0x4b
   3b884:	b.eq	3bfa0 <aarch64_opcode_encode@@Base+0x1c48>  // b.none
   3b888:	b.ls	3b8cc <aarch64_opcode_encode@@Base+0x1574>  // b.plast
   3b88c:	cmp	w0, #0x4d
   3b890:	b.hi	3b900 <aarch64_opcode_encode@@Base+0x15a8>  // b.pmore
   3b894:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3b898:	mov	w0, #0xffffffff            	// #-1
   3b89c:	ldr	x1, [x1, #3944]
   3b8a0:	add	x6, x1, #0x268
   3b8a4:	ldp	w2, w5, [x6, #-8]
   3b8a8:	ldp	w3, w4, [x6]
   3b8ac:	cmp	w2, #0x0
   3b8b0:	ldr	w6, [sp, #88]
   3b8b4:	add	w1, w5, w0
   3b8b8:	ccmp	w1, #0x1e, #0x2, ge  // ge = tcont
   3b8bc:	lsr	w1, w6, w3
   3b8c0:	lsl	w3, w0, w4
   3b8c4:	b.ls	3ad04 <aarch64_opcode_encode@@Base+0x9ac>  // b.plast
   3b8c8:	b	3a8ec <aarch64_opcode_encode@@Base+0x594>
   3b8cc:	cmp	w0, #0x48
   3b8d0:	b.eq	3be44 <aarch64_opcode_encode@@Base+0x1aec>  // b.none
   3b8d4:	cmp	w0, #0x4a
   3b8d8:	b.ne	3a650 <aarch64_opcode_encode@@Base+0x2f8>  // b.any
   3b8dc:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3b8e0:	ldr	w6, [sp, #88]
   3b8e4:	mov	w0, #0xffffffff            	// #-1
   3b8e8:	ldr	x1, [x1, #3944]
   3b8ec:	ldr	w3, [x1, #568]
   3b8f0:	ldr	w4, [x1, #572]
   3b8f4:	ldr	w2, [x1, #608]
   3b8f8:	ldr	w5, [x1, #612]
   3b8fc:	b	3acec <aarch64_opcode_encode@@Base+0x994>
   3b900:	sub	w0, w0, #0x4e
   3b904:	cmp	w0, #0x1
   3b908:	b.hi	3a650 <aarch64_opcode_encode@@Base+0x2f8>  // b.pmore
   3b90c:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3b910:	ldr	w6, [sp, #88]
   3b914:	mov	w0, #0xffffffff            	// #-1
   3b918:	ldr	x1, [x1, #3944]
   3b91c:	ldr	w3, [x1, #592]
   3b920:	ldr	w4, [x1, #596]
   3b924:	b	3b8f4 <aarch64_opcode_encode@@Base+0x159c>
   3b928:	mov	x0, x20
   3b92c:	bl	35170 <aarch64_num_of_operands@plt>
   3b930:	ldr	x1, [sp, #96]
   3b934:	mov	w2, #0x0                   	// #0
   3b938:	ldrb	w4, [sp, #116]
   3b93c:	ldrb	w5, [sp, #172]
   3b940:	add	x1, x1, #0x38
   3b944:	ldrb	w6, [sp, #228]
   3b948:	ldrb	w7, [sp, #284]
   3b94c:	ldrb	w8, [sp, #340]
   3b950:	ldrb	w9, [sp, #396]
   3b954:	b	3b968 <aarch64_opcode_encode@@Base+0x1610>
   3b958:	add	w2, w2, #0x1
   3b95c:	add	x1, x1, #0x6
   3b960:	cmp	w2, #0xa
   3b964:	b.eq	3a9f0 <aarch64_opcode_encode@@Base+0x698>  // b.none
   3b968:	cmp	w0, #0x0
   3b96c:	mov	w3, #0x0                   	// #0
   3b970:	b.le	3b9e8 <aarch64_opcode_encode@@Base+0x1690>
   3b974:	ldrb	w3, [x1]
   3b978:	cmp	w3, w4
   3b97c:	b.ne	3b958 <aarch64_opcode_encode@@Base+0x1600>  // b.any
   3b980:	cmp	w0, #0x1
   3b984:	b.eq	3ba04 <aarch64_opcode_encode@@Base+0x16ac>  // b.none
   3b988:	ldrb	w3, [x1, #1]
   3b98c:	cmp	w3, w5
   3b990:	b.ne	3b958 <aarch64_opcode_encode@@Base+0x1600>  // b.any
   3b994:	cmp	w0, #0x2
   3b998:	b.eq	3ba04 <aarch64_opcode_encode@@Base+0x16ac>  // b.none
   3b99c:	ldrb	w3, [x1, #2]
   3b9a0:	cmp	w3, w6
   3b9a4:	b.ne	3b958 <aarch64_opcode_encode@@Base+0x1600>  // b.any
   3b9a8:	cmp	w0, #0x3
   3b9ac:	b.eq	3ba04 <aarch64_opcode_encode@@Base+0x16ac>  // b.none
   3b9b0:	ldrb	w3, [x1, #3]
   3b9b4:	cmp	w3, w7
   3b9b8:	b.ne	3b958 <aarch64_opcode_encode@@Base+0x1600>  // b.any
   3b9bc:	cmp	w0, #0x4
   3b9c0:	b.eq	3ba04 <aarch64_opcode_encode@@Base+0x16ac>  // b.none
   3b9c4:	ldrb	w3, [x1, #4]
   3b9c8:	cmp	w3, w8
   3b9cc:	b.ne	3b958 <aarch64_opcode_encode@@Base+0x1600>  // b.any
   3b9d0:	cmp	w0, #0x5
   3b9d4:	b.eq	3ba04 <aarch64_opcode_encode@@Base+0x16ac>  // b.none
   3b9d8:	ldrb	w3, [x1, #5]
   3b9dc:	cmp	w3, w9
   3b9e0:	b.ne	3b958 <aarch64_opcode_encode@@Base+0x1600>  // b.any
   3b9e4:	mov	w3, #0x6                   	// #6
   3b9e8:	cmp	w3, w0
   3b9ec:	b.ne	3b958 <aarch64_opcode_encode@@Base+0x1600>  // b.any
   3b9f0:	cmp	w2, #0x1
   3b9f4:	mov	w1, #0x3                   	// #3
   3b9f8:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3b9fc:	csinc	w2, w1, w2, eq  // eq = none
   3ba00:	b	3a744 <aarch64_opcode_encode@@Base+0x3ec>
   3ba04:	mov	w3, w0
   3ba08:	b	3b9e8 <aarch64_opcode_encode@@Base+0x1690>
   3ba0c:	mov	x0, x20
   3ba10:	bl	35170 <aarch64_num_of_operands@plt>
   3ba14:	ldr	x1, [sp, #96]
   3ba18:	mov	w2, #0x0                   	// #0
   3ba1c:	ldrb	w4, [sp, #116]
   3ba20:	ldrb	w5, [sp, #172]
   3ba24:	add	x1, x1, #0x38
   3ba28:	ldrb	w6, [sp, #228]
   3ba2c:	ldrb	w7, [sp, #284]
   3ba30:	ldrb	w8, [sp, #340]
   3ba34:	ldrb	w9, [sp, #396]
   3ba38:	b	3ba4c <aarch64_opcode_encode@@Base+0x16f4>
   3ba3c:	add	w2, w2, #0x1
   3ba40:	add	x1, x1, #0x6
   3ba44:	cmp	w2, #0xa
   3ba48:	b.eq	3a9f0 <aarch64_opcode_encode@@Base+0x698>  // b.none
   3ba4c:	cmp	w0, #0x0
   3ba50:	mov	w3, #0x0                   	// #0
   3ba54:	b.le	3bacc <aarch64_opcode_encode@@Base+0x1774>
   3ba58:	ldrb	w3, [x1]
   3ba5c:	cmp	w3, w4
   3ba60:	b.ne	3ba3c <aarch64_opcode_encode@@Base+0x16e4>  // b.any
   3ba64:	cmp	w0, #0x1
   3ba68:	b.eq	3baf8 <aarch64_opcode_encode@@Base+0x17a0>  // b.none
   3ba6c:	ldrb	w3, [x1, #1]
   3ba70:	cmp	w3, w5
   3ba74:	b.ne	3ba3c <aarch64_opcode_encode@@Base+0x16e4>  // b.any
   3ba78:	cmp	w0, #0x2
   3ba7c:	b.eq	3baf8 <aarch64_opcode_encode@@Base+0x17a0>  // b.none
   3ba80:	ldrb	w3, [x1, #2]
   3ba84:	cmp	w3, w6
   3ba88:	b.ne	3ba3c <aarch64_opcode_encode@@Base+0x16e4>  // b.any
   3ba8c:	cmp	w0, #0x3
   3ba90:	b.eq	3baf8 <aarch64_opcode_encode@@Base+0x17a0>  // b.none
   3ba94:	ldrb	w3, [x1, #3]
   3ba98:	cmp	w3, w7
   3ba9c:	b.ne	3ba3c <aarch64_opcode_encode@@Base+0x16e4>  // b.any
   3baa0:	cmp	w0, #0x4
   3baa4:	b.eq	3baf8 <aarch64_opcode_encode@@Base+0x17a0>  // b.none
   3baa8:	ldrb	w3, [x1, #4]
   3baac:	cmp	w3, w8
   3bab0:	b.ne	3ba3c <aarch64_opcode_encode@@Base+0x16e4>  // b.any
   3bab4:	cmp	w0, #0x5
   3bab8:	b.eq	3baf8 <aarch64_opcode_encode@@Base+0x17a0>  // b.none
   3babc:	ldrb	w3, [x1, #5]
   3bac0:	cmp	w3, w9
   3bac4:	b.ne	3ba3c <aarch64_opcode_encode@@Base+0x16e4>  // b.any
   3bac8:	mov	w3, #0x6                   	// #6
   3bacc:	cmp	w3, w0
   3bad0:	b.ne	3ba3c <aarch64_opcode_encode@@Base+0x16e4>  // b.any
   3bad4:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3bad8:	ldr	x0, [x0, #3944]
   3badc:	ldr	w3, [x0, #536]
   3bae0:	ldr	w4, [x0, #540]
   3bae4:	cmp	w3, #0x0
   3bae8:	sub	w0, w4, #0x1
   3baec:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   3baf0:	b.ls	3ae98 <aarch64_opcode_encode@@Base+0xb40>  // b.plast
   3baf4:	b	3a8ec <aarch64_opcode_encode@@Base+0x594>
   3baf8:	mov	w3, w0
   3bafc:	b	3bacc <aarch64_opcode_encode@@Base+0x1774>
   3bb00:	mov	x0, x20
   3bb04:	bl	35170 <aarch64_num_of_operands@plt>
   3bb08:	ldr	x1, [sp, #96]
   3bb0c:	mov	w2, #0x0                   	// #0
   3bb10:	ldrb	w4, [sp, #116]
   3bb14:	ldrb	w5, [sp, #172]
   3bb18:	add	x1, x1, #0x38
   3bb1c:	ldrb	w6, [sp, #228]
   3bb20:	ldrb	w7, [sp, #284]
   3bb24:	ldrb	w8, [sp, #340]
   3bb28:	ldrb	w9, [sp, #396]
   3bb2c:	b	3bb40 <aarch64_opcode_encode@@Base+0x17e8>
   3bb30:	add	w2, w2, #0x1
   3bb34:	add	x1, x1, #0x6
   3bb38:	cmp	w2, #0xa
   3bb3c:	b.eq	3a9f0 <aarch64_opcode_encode@@Base+0x698>  // b.none
   3bb40:	cmp	w0, #0x0
   3bb44:	mov	w3, #0x0                   	// #0
   3bb48:	b.le	3bbc0 <aarch64_opcode_encode@@Base+0x1868>
   3bb4c:	ldrb	w3, [x1]
   3bb50:	cmp	w3, w4
   3bb54:	b.ne	3bb30 <aarch64_opcode_encode@@Base+0x17d8>  // b.any
   3bb58:	cmp	w0, #0x1
   3bb5c:	b.eq	3bbf0 <aarch64_opcode_encode@@Base+0x1898>  // b.none
   3bb60:	ldrb	w3, [x1, #1]
   3bb64:	cmp	w3, w5
   3bb68:	b.ne	3bb30 <aarch64_opcode_encode@@Base+0x17d8>  // b.any
   3bb6c:	cmp	w0, #0x2
   3bb70:	b.eq	3bbf0 <aarch64_opcode_encode@@Base+0x1898>  // b.none
   3bb74:	ldrb	w3, [x1, #2]
   3bb78:	cmp	w3, w6
   3bb7c:	b.ne	3bb30 <aarch64_opcode_encode@@Base+0x17d8>  // b.any
   3bb80:	cmp	w0, #0x3
   3bb84:	b.eq	3bbf0 <aarch64_opcode_encode@@Base+0x1898>  // b.none
   3bb88:	ldrb	w3, [x1, #3]
   3bb8c:	cmp	w3, w7
   3bb90:	b.ne	3bb30 <aarch64_opcode_encode@@Base+0x17d8>  // b.any
   3bb94:	cmp	w0, #0x4
   3bb98:	b.eq	3bbf0 <aarch64_opcode_encode@@Base+0x1898>  // b.none
   3bb9c:	ldrb	w3, [x1, #4]
   3bba0:	cmp	w3, w8
   3bba4:	b.ne	3bb30 <aarch64_opcode_encode@@Base+0x17d8>  // b.any
   3bba8:	cmp	w0, #0x5
   3bbac:	b.eq	3bbf0 <aarch64_opcode_encode@@Base+0x1898>  // b.none
   3bbb0:	ldrb	w3, [x1, #5]
   3bbb4:	cmp	w3, w9
   3bbb8:	b.ne	3bb30 <aarch64_opcode_encode@@Base+0x17d8>  // b.any
   3bbbc:	mov	w3, #0x6                   	// #6
   3bbc0:	cmp	w3, w0
   3bbc4:	b.ne	3bb30 <aarch64_opcode_encode@@Base+0x17d8>  // b.any
   3bbc8:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3bbcc:	add	w2, w2, #0x1
   3bbd0:	ldr	x0, [x0, #3944]
   3bbd4:	ldr	w3, [x0, #904]
   3bbd8:	ldr	w4, [x0, #908]
   3bbdc:	cmp	w3, #0x0
   3bbe0:	sub	w0, w4, #0x1
   3bbe4:	ccmp	w0, #0x1e, #0x2, ge  // ge = tcont
   3bbe8:	b.ls	3a75c <aarch64_opcode_encode@@Base+0x404>  // b.plast
   3bbec:	b	3a8ec <aarch64_opcode_encode@@Base+0x594>
   3bbf0:	mov	w3, w0
   3bbf4:	b	3bbc0 <aarch64_opcode_encode@@Base+0x1868>
   3bbf8:	mov	w0, #0x0                   	// #0
   3bbfc:	b	3b420 <aarch64_opcode_encode@@Base+0x10c8>
   3bc00:	ldrb	w0, [x20, #56]
   3bc04:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3bc08:	and	w25, w0, #0xff
   3bc0c:	ldr	w0, [x20, #36]
   3bc10:	bl	35710 <aarch64_get_operand_class@plt>
   3bc14:	cmp	w0, #0x6
   3bc18:	b.eq	3b350 <aarch64_opcode_encode@@Base+0xff8>  // b.none
   3bc1c:	mov	w0, #0x1                   	// #1
   3bc20:	mov	w1, #0x0                   	// #0
   3bc24:	b	3b360 <aarch64_opcode_encode@@Base+0x1008>
   3bc28:	ldr	x19, [sp, #184]
   3bc2c:	cmp	w0, #0x25
   3bc30:	ldrb	w0, [sp, #116]
   3bc34:	mov	w3, #0x46                  	// #70
   3bc38:	cinv	x19, x19, eq  // eq = none
   3bc3c:	add	x2, sp, #0x54
   3bc40:	cmp	w0, #0x1
   3bc44:	mov	x0, x19
   3bc48:	cset	w1, eq  // eq = none
   3bc4c:	str	w3, [sp, #168]
   3bc50:	bl	35a40 <aarch64_wide_constant_p@plt>
   3bc54:	cbz	w0, 3c260 <aarch64_opcode_encode@@Base+0x1f08>
   3bc58:	ldr	w0, [sp, #84]
   3bc5c:	mov	w1, #0x5                   	// #5
   3bc60:	str	w1, [sp, #200]
   3bc64:	mov	w1, w0
   3bc68:	str	x1, [sp, #208]
   3bc6c:	lsr	x0, x19, x0
   3bc70:	and	x0, x0, #0xffff
   3bc74:	str	x0, [sp, #184]
   3bc78:	b	3ac30 <aarch64_opcode_encode@@Base+0x8d8>
   3bc7c:	ldp	x0, x1, [sp, #168]
   3bc80:	stp	x0, x1, [sp, #224]
   3bc84:	mov	w2, #0x2                   	// #2
   3bc88:	ldp	x0, x1, [sp, #184]
   3bc8c:	str	w2, [sp, #232]
   3bc90:	stp	x0, x1, [sp, #240]
   3bc94:	ldp	x2, x3, [sp, #200]
   3bc98:	stp	x2, x3, [sp, #256]
   3bc9c:	ldr	x0, [sp, #216]
   3bca0:	str	x0, [sp, #272]
   3bca4:	b	3ac30 <aarch64_opcode_encode@@Base+0x8d8>
   3bca8:	ldr	x0, [sp, #240]
   3bcac:	ldr	x1, [sp, #296]
   3bcb0:	neg	x0, x0
   3bcb4:	ldrb	w2, [sp, #228]
   3bcb8:	sub	x1, x1, #0x1
   3bcbc:	cmp	w2, #0x1d
   3bcc0:	b.ne	3b804 <aarch64_opcode_encode@@Base+0x14ac>  // b.any
   3bcc4:	and	x0, x0, #0x1f
   3bcc8:	str	x0, [sp, #240]
   3bccc:	str	x1, [sp, #296]
   3bcd0:	b	3ac30 <aarch64_opcode_encode@@Base+0x8d8>
   3bcd4:	ldr	x2, [sp, #240]
   3bcd8:	ldrb	w1, [sp, #228]
   3bcdc:	neg	x0, x2
   3bce0:	cmp	w1, #0x1d
   3bce4:	b.eq	3c03c <aarch64_opcode_encode@@Base+0x1ce4>  // b.none
   3bce8:	and	x0, x0, #0x3f
   3bcec:	mov	x1, #0x3f                  	// #63
   3bcf0:	sub	x1, x1, x2
   3bcf4:	str	x0, [sp, #240]
   3bcf8:	str	x1, [sp, #296]
   3bcfc:	b	3ac30 <aarch64_opcode_encode@@Base+0x8d8>
   3bd00:	ldp	x2, x3, [sp, #112]
   3bd04:	stp	x2, x3, [sp, #224]
   3bd08:	mov	w1, #0x1                   	// #1
   3bd0c:	ldp	x10, x11, [sp, #168]
   3bd10:	stp	x2, x3, [sp, #168]
   3bd14:	add	x2, sp, #0x200
   3bd18:	ldp	x6, x7, [sp, #128]
   3bd1c:	stp	x6, x7, [sp, #240]
   3bd20:	mov	w5, #0x2                   	// #2
   3bd24:	stp	x10, x11, [x2, #-232]
   3bd28:	mov	w4, #0x1f                  	// #31
   3bd2c:	mov	w9, #0x3                   	// #3
   3bd30:	str	w1, [sp, #176]
   3bd34:	ldp	x2, x3, [sp, #144]
   3bd38:	str	w5, [sp, #232]
   3bd3c:	ldr	x1, [sp, #160]
   3bd40:	str	x1, [sp, #272]
   3bd44:	ldp	x0, x8, [sp, #184]
   3bd48:	stp	x6, x7, [sp, #184]
   3bd4c:	ldp	x6, x7, [sp, #200]
   3bd50:	stp	x0, x8, [sp, #296]
   3bd54:	ldr	x5, [sp, #216]
   3bd58:	str	x1, [sp, #216]
   3bd5c:	add	x1, sp, #0x200
   3bd60:	str	w4, [sp, #184]
   3bd64:	stp	x2, x3, [sp, #200]
   3bd68:	stp	x6, x7, [x1, #-200]
   3bd6c:	str	w4, [sp, #240]
   3bd70:	stp	x2, x3, [sp, #256]
   3bd74:	str	w9, [sp, #288]
   3bd78:	str	x5, [sp, #328]
   3bd7c:	bl	35870 <get_inverted_cond@plt>
   3bd80:	str	x0, [sp, #296]
   3bd84:	b	3ac30 <aarch64_opcode_encode@@Base+0x8d8>
   3bd88:	ldp	x0, x1, [sp, #168]
   3bd8c:	mov	w4, #0x3                   	// #3
   3bd90:	ldp	x2, x3, [sp, #224]
   3bd94:	stp	x0, x1, [sp, #224]
   3bd98:	add	x1, sp, #0x200
   3bd9c:	mov	w0, #0x2                   	// #2
   3bda0:	str	w0, [sp, #232]
   3bda4:	ldr	x6, [sp, #216]
   3bda8:	stp	x2, x3, [x1, #-232]
   3bdac:	ldp	x0, x1, [sp, #200]
   3bdb0:	str	w4, [sp, #288]
   3bdb4:	ldp	x2, x3, [sp, #184]
   3bdb8:	ldp	x4, x5, [sp, #240]
   3bdbc:	stp	x2, x3, [sp, #240]
   3bdc0:	ldp	x2, x3, [sp, #256]
   3bdc4:	stp	x0, x1, [sp, #256]
   3bdc8:	add	x1, sp, #0x200
   3bdcc:	ldr	x0, [sp, #272]
   3bdd0:	str	x6, [sp, #272]
   3bdd4:	stp	x4, x5, [x1, #-216]
   3bdd8:	stp	x2, x3, [x1, #-200]
   3bddc:	str	x0, [sp, #328]
   3bde0:	b	3ac30 <aarch64_opcode_encode@@Base+0x8d8>
   3bde4:	ldrb	w2, [sp, #228]
   3bde8:	mov	x0, #0x1f                  	// #31
   3bdec:	mov	x1, #0x3f                  	// #63
   3bdf0:	cmp	w2, #0x1d
   3bdf4:	csel	x0, x0, x1, eq  // eq = none
   3bdf8:	str	x0, [sp, #296]
   3bdfc:	b	3ac30 <aarch64_opcode_encode@@Base+0x8d8>
   3be00:	ldrb	w0, [sp, #116]
   3be04:	cmp	w0, #0x7
   3be08:	b.ne	3c0f4 <aarch64_opcode_encode@@Base+0x1d9c>  // b.any
   3be0c:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3be10:	ldr	x0, [x0, #3944]
   3be14:	ldr	w1, [x0, #68]
   3be18:	cmp	w1, #0x0
   3be1c:	b.le	3a8ec <aarch64_opcode_encode@@Base+0x594>
   3be20:	ldr	w2, [x0, #64]
   3be24:	cmp	w2, #0x1f
   3be28:	b.hi	3a8ec <aarch64_opcode_encode@@Base+0x594>  // b.pmore
   3be2c:	ldr	w0, [sp, #88]
   3be30:	mov	w1, #0x1                   	// #1
   3be34:	lsl	w1, w1, w2
   3be38:	orr	w0, w0, w1
   3be3c:	str	w0, [sp, #88]
   3be40:	b	3a650 <aarch64_opcode_encode@@Base+0x2f8>
   3be44:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3be48:	ldr	w6, [sp, #88]
   3be4c:	mov	w0, #0xffffffff            	// #-1
   3be50:	ldr	x1, [x1, #3944]
   3be54:	add	x7, x1, #0x2c8
   3be58:	ldp	w2, w5, [x7, #-8]
   3be5c:	ldp	w3, w4, [x7]
   3be60:	cmp	w2, #0x0
   3be64:	b	3b8b4 <aarch64_opcode_encode@@Base+0x155c>
   3be68:	mov	x0, x20
   3be6c:	bl	35170 <aarch64_num_of_operands@plt>
   3be70:	ldr	x2, [sp, #96]
   3be74:	mov	w3, w0
   3be78:	ldrb	w4, [sp, #116]
   3be7c:	mov	w1, #0x0                   	// #0
   3be80:	ldrb	w5, [sp, #172]
   3be84:	add	x0, x2, #0x38
   3be88:	ldrb	w6, [sp, #228]
   3be8c:	ldrb	w7, [sp, #284]
   3be90:	ldrb	w8, [sp, #340]
   3be94:	ldrb	w9, [sp, #396]
   3be98:	b	3beac <aarch64_opcode_encode@@Base+0x1b54>
   3be9c:	add	w1, w1, #0x1
   3bea0:	add	x0, x0, #0x6
   3bea4:	cmp	w1, #0xa
   3bea8:	b.eq	3a9f0 <aarch64_opcode_encode@@Base+0x698>  // b.none
   3beac:	cmp	w3, #0x0
   3beb0:	mov	w2, #0x0                   	// #0
   3beb4:	b.le	3bf2c <aarch64_opcode_encode@@Base+0x1bd4>
   3beb8:	ldrb	w2, [x0]
   3bebc:	cmp	w2, w4
   3bec0:	b.ne	3be9c <aarch64_opcode_encode@@Base+0x1b44>  // b.any
   3bec4:	cmp	w3, #0x1
   3bec8:	b.eq	3bf5c <aarch64_opcode_encode@@Base+0x1c04>  // b.none
   3becc:	ldrb	w2, [x0, #1]
   3bed0:	cmp	w2, w5
   3bed4:	b.ne	3be9c <aarch64_opcode_encode@@Base+0x1b44>  // b.any
   3bed8:	cmp	w3, #0x2
   3bedc:	b.eq	3bf5c <aarch64_opcode_encode@@Base+0x1c04>  // b.none
   3bee0:	ldrb	w2, [x0, #2]
   3bee4:	cmp	w2, w6
   3bee8:	b.ne	3be9c <aarch64_opcode_encode@@Base+0x1b44>  // b.any
   3beec:	cmp	w3, #0x3
   3bef0:	b.eq	3bf5c <aarch64_opcode_encode@@Base+0x1c04>  // b.none
   3bef4:	ldrb	w2, [x0, #3]
   3bef8:	cmp	w2, w7
   3befc:	b.ne	3be9c <aarch64_opcode_encode@@Base+0x1b44>  // b.any
   3bf00:	cmp	w3, #0x4
   3bf04:	b.eq	3bf5c <aarch64_opcode_encode@@Base+0x1c04>  // b.none
   3bf08:	ldrb	w2, [x0, #4]
   3bf0c:	cmp	w2, w8
   3bf10:	b.ne	3be9c <aarch64_opcode_encode@@Base+0x1b44>  // b.any
   3bf14:	cmp	w3, #0x5
   3bf18:	b.eq	3bf5c <aarch64_opcode_encode@@Base+0x1c04>  // b.none
   3bf1c:	ldrb	w2, [x0, #5]
   3bf20:	cmp	w2, w9
   3bf24:	b.ne	3be9c <aarch64_opcode_encode@@Base+0x1b44>  // b.any
   3bf28:	mov	w2, #0x6                   	// #6
   3bf2c:	cmp	w2, w3
   3bf30:	b.ne	3be9c <aarch64_opcode_encode@@Base+0x1b44>  // b.any
   3bf34:	mov	w0, #0x1                   	// #1
   3bf38:	mov	w5, #0x74                  	// #116
   3bf3c:	lsl	w1, w0, w1
   3bf40:	mov	w4, #0x2b                  	// #43
   3bf44:	mov	x0, x21
   3bf48:	mov	w3, #0x2                   	// #2
   3bf4c:	mov	w2, #0x0                   	// #0
   3bf50:	bl	361c0 <init_disassemble_info@@Base+0x110>
   3bf54:	ldr	x20, [sp, #96]
   3bf58:	b	3a650 <aarch64_opcode_encode@@Base+0x2f8>
   3bf5c:	mov	w2, w3
   3bf60:	b	3bf2c <aarch64_opcode_encode@@Base+0x1bd4>
   3bf64:	ldrb	w0, [sp, #116]
   3bf68:	sub	w0, w0, #0x6
   3bf6c:	and	w0, w0, #0xff
   3bf70:	cmp	w0, #0x2
   3bf74:	b.hi	3a9f0 <aarch64_opcode_encode@@Base+0x698>  // b.pmore
   3bf78:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3bf7c:	add	x1, x1, #0xce8
   3bf80:	and	x0, x0, #0xff
   3bf84:	add	x1, x1, #0x2a8
   3bf88:	ldr	w2, [sp, #88]
   3bf8c:	ldr	w0, [x1, x0, lsl #2]
   3bf90:	ubfiz	w0, w0, #15, #2
   3bf94:	orr	w0, w2, w0
   3bf98:	str	w0, [sp, #88]
   3bf9c:	b	3a650 <aarch64_opcode_encode@@Base+0x2f8>
   3bfa0:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   3bfa4:	ldr	w6, [sp, #88]
   3bfa8:	mov	w1, #0xffffffff            	// #-1
   3bfac:	ldr	x2, [x2, #3944]
   3bfb0:	add	x9, x2, #0x268
   3bfb4:	ldp	w5, w0, [x9, #-8]
   3bfb8:	ldp	w4, w3, [x9]
   3bfbc:	cmp	w5, #0x0
   3bfc0:	add	w7, w0, w1
   3bfc4:	ccmp	w7, #0x1e, #0x2, ge  // ge = tcont
   3bfc8:	lsl	w3, w1, w3
   3bfcc:	lsr	w4, w6, w4
   3bfd0:	bic	w3, w4, w3
   3bfd4:	b.hi	3a8ec <aarch64_opcode_encode@@Base+0x594>  // b.pmore
   3bfd8:	add	w4, w5, w0
   3bfdc:	cmp	w4, #0x20
   3bfe0:	b.gt	3a8ec <aarch64_opcode_encode@@Base+0x594>
   3bfe4:	lsl	w0, w1, w0
   3bfe8:	bic	w0, w3, w0
   3bfec:	ldr	w4, [x2, #592]
   3bff0:	ldr	w2, [x2, #596]
   3bff4:	lsl	w0, w0, w5
   3bff8:	orr	w0, w0, w6
   3bffc:	str	w0, [sp, #88]
   3c000:	cmp	w4, #0x0
   3c004:	add	w5, w2, w1
   3c008:	ccmp	w5, #0x1e, #0x2, ge  // ge = tcont
   3c00c:	b.hi	3a8ec <aarch64_opcode_encode@@Base+0x594>  // b.pmore
   3c010:	add	w5, w4, w2
   3c014:	cmp	w5, #0x20
   3c018:	b.gt	3a8ec <aarch64_opcode_encode@@Base+0x594>
   3c01c:	lsl	w1, w1, w2
   3c020:	bic	w1, w3, w1
   3c024:	lsl	w1, w1, w4
   3c028:	orr	w0, w1, w0
   3c02c:	str	w0, [sp, #88]
   3c030:	b	3a650 <aarch64_opcode_encode@@Base+0x2f8>
   3c034:	ldrb	w1, [sp, #172]
   3c038:	b	3b838 <aarch64_opcode_encode@@Base+0x14e0>
   3c03c:	and	x0, x0, #0x1f
   3c040:	mov	x1, #0x1f                  	// #31
   3c044:	sub	x1, x1, x2
   3c048:	str	x0, [sp, #240]
   3c04c:	str	x1, [sp, #296]
   3c050:	b	3ac30 <aarch64_opcode_encode@@Base+0x8d8>
   3c054:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c058:	add	x3, x3, #0xce8
   3c05c:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c060:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c064:	add	x3, x3, #0x208
   3c068:	add	x1, x1, #0x658
   3c06c:	add	x0, x0, #0xa60
   3c070:	mov	w2, #0x7e5                 	// #2021
   3c074:	str	x25, [sp, #64]
   3c078:	bl	35ac0 <__assert_fail@plt>
   3c07c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c080:	add	x3, x3, #0xce8
   3c084:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c088:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c08c:	add	x3, x3, #0x208
   3c090:	add	x1, x1, #0x658
   3c094:	add	x0, x0, #0xa30
   3c098:	mov	w2, #0x7cb                 	// #1995
   3c09c:	str	x25, [sp, #64]
   3c0a0:	bl	35ac0 <__assert_fail@plt>
   3c0a4:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c0a8:	add	x3, x3, #0xce8
   3c0ac:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c0b0:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c0b4:	add	x3, x3, #0x260
   3c0b8:	add	x1, x1, #0x658
   3c0bc:	add	x0, x0, #0xb80
   3c0c0:	mov	w2, #0x622                 	// #1570
   3c0c4:	str	x25, [sp, #64]
   3c0c8:	bl	35ac0 <__assert_fail@plt>
   3c0cc:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c0d0:	add	x3, x3, #0xce8
   3c0d4:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c0d8:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c0dc:	add	x3, x3, #0x260
   3c0e0:	add	x1, x1, #0x658
   3c0e4:	add	x0, x0, #0xad8
   3c0e8:	mov	w2, #0x611                 	// #1553
   3c0ec:	str	x25, [sp, #64]
   3c0f0:	bl	35ac0 <__assert_fail@plt>
   3c0f4:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c0f8:	add	x3, x3, #0xce8
   3c0fc:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c100:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c104:	add	x3, x3, #0x2d0
   3c108:	add	x1, x1, #0x658
   3c10c:	add	x0, x0, #0xcb0
   3c110:	mov	w2, #0x53f                 	// #1343
   3c114:	str	x25, [sp, #64]
   3c118:	bl	35ac0 <__assert_fail@plt>
   3c11c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c120:	add	x3, x3, #0xce8
   3c124:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c128:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   3c12c:	add	x3, x3, #0x260
   3c130:	add	x1, x1, #0x658
   3c134:	add	x0, x0, #0x870
   3c138:	mov	w2, #0x5fb                 	// #1531
   3c13c:	str	x25, [sp, #64]
   3c140:	bl	35ac0 <__assert_fail@plt>
   3c144:	str	x25, [sp, #64]
   3c148:	bl	36190 <init_disassemble_info@@Base+0xe0>
   3c14c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c150:	add	x3, x3, #0xce8
   3c154:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c158:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   3c15c:	add	x3, x3, #0x238
   3c160:	add	x1, x1, #0x610
   3c164:	add	x0, x0, #0x870
   3c168:	mov	w2, #0x1c0                 	// #448
   3c16c:	str	x25, [sp, #64]
   3c170:	bl	35ac0 <__assert_fail@plt>
   3c174:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3c178:	b	3a8f0 <aarch64_opcode_encode@@Base+0x598>
   3c17c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c180:	add	x3, x3, #0xce8
   3c184:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c188:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c18c:	add	x3, x3, #0x260
   3c190:	add	x1, x1, #0x658
   3c194:	add	x0, x0, #0xc08
   3c198:	mov	w2, #0x63c                 	// #1596
   3c19c:	bl	35ac0 <__assert_fail@plt>
   3c1a0:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c1a4:	add	x3, x3, #0xce8
   3c1a8:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c1ac:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c1b0:	add	x3, x3, #0x260
   3c1b4:	add	x1, x1, #0x658
   3c1b8:	add	x0, x0, #0xbb0
   3c1bc:	mov	w2, #0x631                 	// #1585
   3c1c0:	str	x25, [sp, #64]
   3c1c4:	bl	35ac0 <__assert_fail@plt>
   3c1c8:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c1cc:	add	x3, x3, #0xce8
   3c1d0:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c1d4:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c1d8:	add	x3, x3, #0x2b8
   3c1dc:	add	x1, x1, #0x658
   3c1e0:	add	x0, x0, #0xc60
   3c1e4:	mov	w2, #0x530                 	// #1328
   3c1e8:	str	x25, [sp, #64]
   3c1ec:	bl	35ac0 <__assert_fail@plt>
   3c1f0:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c1f4:	add	x3, x3, #0xce8
   3c1f8:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c1fc:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c200:	add	x3, x3, #0x260
   3c204:	add	x1, x1, #0x658
   3c208:	add	x0, x0, #0xa90
   3c20c:	mov	w2, #0x604                 	// #1540
   3c210:	bl	35ac0 <__assert_fail@plt>
   3c214:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c218:	add	x3, x3, #0xce8
   3c21c:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c220:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c224:	add	x3, x3, #0x260
   3c228:	add	x1, x1, #0x658
   3c22c:	add	x0, x0, #0xb98
   3c230:	mov	w2, #0x630                 	// #1584
   3c234:	str	x25, [sp, #64]
   3c238:	bl	35ac0 <__assert_fail@plt>
   3c23c:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c240:	add	x3, x3, #0xce8
   3c244:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c248:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   3c24c:	add	x3, x3, #0x278
   3c250:	add	x1, x1, #0x610
   3c254:	add	x0, x0, #0x870
   3c258:	mov	w2, #0x1d4                 	// #468
   3c25c:	bl	35ac0 <__assert_fail@plt>
   3c260:	adrp	x3, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c264:	add	x3, x3, #0xce8
   3c268:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c26c:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   3c270:	add	x3, x3, #0x220
   3c274:	add	x1, x1, #0x658
   3c278:	add	x0, x0, #0x870
   3c27c:	mov	w2, #0x75e                 	// #1886
   3c280:	str	x25, [sp, #64]
   3c284:	bl	35ac0 <__assert_fail@plt>
   3c288:	stp	x29, x30, [sp, #-16]!
   3c28c:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3c290:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c294:	mov	x29, sp
   3c298:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c29c:	add	x3, x3, #0x710
   3c2a0:	add	x1, x1, #0x610
   3c2a4:	add	x0, x0, #0x630
   3c2a8:	mov	w2, #0x203                 	// #515
   3c2ac:	bl	35ac0 <__assert_fail@plt>
   3c2b0:	stp	x29, x30, [sp, #-16]!
   3c2b4:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3c2b8:	add	x3, x3, #0x710
   3c2bc:	mov	x29, sp
   3c2c0:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c2c4:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c2c8:	add	x3, x3, #0x10
   3c2cc:	add	x1, x1, #0xfd0
   3c2d0:	add	x0, x0, #0xff0
   3c2d4:	mov	w2, #0xba                  	// #186
   3c2d8:	bl	35ac0 <__assert_fail@plt>
   3c2dc:	nop
   3c2e0:	stp	x29, x30, [sp, #-16]!
   3c2e4:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3c2e8:	add	x3, x3, #0x710
   3c2ec:	mov	x29, sp
   3c2f0:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c2f4:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   3c2f8:	add	x3, x3, #0x20
   3c2fc:	add	x1, x1, #0x610
   3c300:	add	x0, x0, #0x870
   3c304:	mov	w2, #0x1ab                 	// #427
   3c308:	bl	35ac0 <__assert_fail@plt>
   3c30c:	nop
   3c310:	stp	x29, x30, [sp, #-16]!
   3c314:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3c318:	add	x3, x3, #0x710
   3c31c:	mov	x29, sp
   3c320:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c324:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c328:	add	x3, x3, #0x48
   3c32c:	add	x1, x1, #0xfd0
   3c330:	add	x0, x0, #0xff8
   3c334:	mov	w2, #0xe5                  	// #229
   3c338:	bl	35ac0 <__assert_fail@plt>
   3c33c:	nop
   3c340:	stp	x29, x30, [sp, #-16]!
   3c344:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3c348:	add	x3, x3, #0x710
   3c34c:	mov	x29, sp
   3c350:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c354:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   3c358:	add	x3, x3, #0x68
   3c35c:	add	x1, x1, #0xfd0
   3c360:	add	x0, x0, #0x48
   3c364:	mov	w2, #0xda                  	// #218
   3c368:	bl	35ac0 <__assert_fail@plt>
   3c36c:	nop
   3c370:	stp	x29, x30, [sp, #-16]!
   3c374:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3c378:	add	x3, x3, #0x710
   3c37c:	mov	x29, sp
   3c380:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c384:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   3c388:	add	x3, x3, #0x88
   3c38c:	add	x1, x1, #0xfd0
   3c390:	add	x0, x0, #0x98
   3c394:	mov	w2, #0xc8                  	// #200
   3c398:	bl	35ac0 <__assert_fail@plt>
   3c39c:	nop
   3c3a0:	stp	x29, x30, [sp, #-16]!
   3c3a4:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3c3a8:	add	x3, x3, #0x710
   3c3ac:	mov	x29, sp
   3c3b0:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c3b4:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   3c3b8:	add	x3, x3, #0xa8
   3c3bc:	add	x1, x1, #0xfd0
   3c3c0:	add	x0, x0, #0xe8
   3c3c4:	mov	w2, #0xf4                  	// #244
   3c3c8:	bl	35ac0 <__assert_fail@plt>
   3c3cc:	nop
   3c3d0:	stp	x29, x30, [sp, #-16]!
   3c3d4:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3c3d8:	add	x3, x3, #0x710
   3c3dc:	mov	x29, sp
   3c3e0:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c3e4:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   3c3e8:	add	x3, x3, #0xc0
   3c3ec:	add	x1, x1, #0x610
   3c3f0:	add	x0, x0, #0x120
   3c3f4:	mov	w2, #0x148                 	// #328
   3c3f8:	bl	35ac0 <__assert_fail@plt>
   3c3fc:	nop
   3c400:	mov	x0, x2
   3c404:	mov	w2, w1
   3c408:	ldr	w3, [x0, #172]
   3c40c:	cmp	w3, #0x2
   3c410:	b.eq	3c44c <aarch64_opcode_encode@@Base+0x20f4>  // b.none
   3c414:	cmp	w3, #0x4
   3c418:	b.ne	3c430 <aarch64_opcode_encode@@Base+0x20d8>  // b.any
   3c41c:	ldp	x3, x0, [x0]
   3c420:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   3c424:	add	x1, x1, #0x178
   3c428:	mov	x16, x3
   3c42c:	br	x16
   3c430:	cmp	w3, #0x1
   3c434:	b.ne	3c460 <aarch64_opcode_encode@@Base+0x2108>  // b.any
   3c438:	ldp	x3, x0, [x0]
   3c43c:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   3c440:	add	x1, x1, #0x158
   3c444:	mov	x16, x3
   3c448:	br	x16
   3c44c:	ldp	x3, x0, [x0]
   3c450:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   3c454:	add	x1, x1, #0x168
   3c458:	mov	x16, x3
   3c45c:	br	x16
   3c460:	stp	x29, x30, [sp, #-16]!
   3c464:	mov	x29, sp
   3c468:	bl	35670 <abort@plt>
   3c46c:	nop
   3c470:	stp	x29, x30, [sp, #-16]!
   3c474:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3c478:	add	x3, x3, #0x710
   3c47c:	mov	x29, sp
   3c480:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c484:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   3c488:	add	x3, x3, #0xd8
   3c48c:	add	x1, x1, #0xfd0
   3c490:	add	x0, x0, #0x188
   3c494:	mov	w2, #0xc1b                 	// #3099
   3c498:	bl	35ac0 <__assert_fail@plt>
   3c49c:	nop

000000000003c4a0 <extract_fields@@Base>:
   3c4a0:	stp	x29, x30, [sp, #-96]!
   3c4a4:	mov	w8, #0xffffffd8            	// #-40
   3c4a8:	cmp	w2, #0x5
   3c4ac:	mov	x29, sp
   3c4b0:	add	x9, sp, #0x30
   3c4b4:	str	x9, [sp, #32]
   3c4b8:	stp	w8, wzr, [sp, #40]
   3c4bc:	stp	x2, x3, [sp, #48]
   3c4c0:	add	x3, sp, #0x60
   3c4c4:	stp	x3, x3, [sp, #16]
   3c4c8:	stp	x4, x5, [sp, #64]
   3c4cc:	stp	x6, x7, [sp, #80]
   3c4d0:	b.hi	3c680 <extract_fields@@Base+0x1e0>  // b.pmore
   3c4d4:	sub	w7, w2, #0x1
   3c4d8:	cbz	w2, 3c644 <extract_fields@@Base+0x1a4>
   3c4dc:	mov	x4, x3
   3c4e0:	mov	w3, #0xffffffe0            	// #-32
   3c4e4:	str	w3, [sp, #40]
   3c4e8:	bic	w1, w0, w1
   3c4ec:	add	x8, sp, #0x60
   3c4f0:	sub	w6, w2, #0x2
   3c4f4:	cbz	w7, 3c678 <extract_fields@@Base+0x1d8>
   3c4f8:	mov	w3, #0xffffffe8            	// #-24
   3c4fc:	str	w3, [sp, #40]
   3c500:	sub	w0, w2, #0x3
   3c504:	cbz	w6, 3c52c <extract_fields@@Base+0x8c>
   3c508:	mov	w3, #0xfffffff0            	// #-16
   3c50c:	str	w3, [sp, #40]
   3c510:	sub	w2, w2, #0x4
   3c514:	cbz	w0, 3c52c <extract_fields@@Base+0x8c>
   3c518:	cmp	w2, #0x0
   3c51c:	mov	w0, #0xfffffff8            	// #-8
   3c520:	mov	w2, #0x0                   	// #0
   3c524:	csel	w0, w0, w2, eq  // eq = none
   3c528:	str	w0, [sp, #40]
   3c52c:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   3c530:	ldur	w0, [x8, #-40]
   3c534:	mov	w3, #0xffffffff            	// #-1
   3c538:	ldr	x9, [x5, #3944]
   3c53c:	lsl	x0, x0, #3
   3c540:	add	x2, x0, x9
   3c544:	ldr	w0, [x0, x9]
   3c548:	ldr	w2, [x2, #4]
   3c54c:	lsr	w0, w1, w0
   3c550:	lsl	w2, w3, w2
   3c554:	bic	w2, w0, w2
   3c558:	cbz	w7, 3c644 <extract_fields@@Base+0x1a4>
   3c55c:	ldur	w0, [x8, #-32]
   3c560:	lsl	x0, x0, #3
   3c564:	add	x10, x9, x0
   3c568:	ldr	w7, [x9, x0]
   3c56c:	ldr	w0, [x10, #4]
   3c570:	lsr	w7, w1, w7
   3c574:	lsl	w3, w3, w0
   3c578:	bic	w3, w7, w3
   3c57c:	lsl	w2, w2, w0
   3c580:	orr	w2, w3, w2
   3c584:	cbz	w6, 3c644 <extract_fields@@Base+0x1a4>
   3c588:	ldur	w0, [x8, #-24]
   3c58c:	mov	x7, x9
   3c590:	mov	w3, #0xffffffff            	// #-1
   3c594:	cmp	w6, #0x1
   3c598:	mov	w9, #0xfffffff0            	// #-16
   3c59c:	lsl	x0, x0, #3
   3c5a0:	add	x10, x7, x0
   3c5a4:	ldr	w7, [x7, x0]
   3c5a8:	ldr	w0, [x10, #4]
   3c5ac:	lsr	w7, w1, w7
   3c5b0:	lsl	w3, w3, w0
   3c5b4:	bic	w3, w7, w3
   3c5b8:	lsl	w2, w2, w0
   3c5bc:	orr	w2, w3, w2
   3c5c0:	b.eq	3c644 <extract_fields@@Base+0x1a4>  // b.none
   3c5c4:	add	x7, x4, #0x8
   3c5c8:	tbnz	w9, #31, 3c650 <extract_fields@@Base+0x1b0>
   3c5cc:	ldr	w0, [x4]
   3c5d0:	cmp	w6, #0x2
   3c5d4:	ldr	x4, [x5, #3944]
   3c5d8:	mov	w3, #0xffffffff            	// #-1
   3c5dc:	lsl	x0, x0, #3
   3c5e0:	add	x6, x4, x0
   3c5e4:	ldr	w4, [x4, x0]
   3c5e8:	ldr	w0, [x6, #4]
   3c5ec:	lsr	w4, w1, w4
   3c5f0:	lsl	w3, w3, w0
   3c5f4:	bic	w3, w4, w3
   3c5f8:	lsl	w2, w2, w0
   3c5fc:	orr	w2, w3, w2
   3c600:	b.eq	3c644 <extract_fields@@Base+0x1a4>  // b.none
   3c604:	tbz	w9, #31, 3c614 <extract_fields@@Base+0x174>
   3c608:	add	x8, x8, w9, sxtw
   3c60c:	cmn	w9, #0x7
   3c610:	csel	x7, x8, x7, lt  // lt = tstop
   3c614:	ldr	w3, [x7]
   3c618:	mov	w0, #0xffffffff            	// #-1
   3c61c:	ldr	x5, [x5, #3944]
   3c620:	lsl	x3, x3, #3
   3c624:	add	x6, x5, x3
   3c628:	ldr	w4, [x5, x3]
   3c62c:	ldr	w3, [x6, #4]
   3c630:	lsr	w1, w1, w4
   3c634:	lsl	w0, w0, w3
   3c638:	bic	w1, w1, w0
   3c63c:	lsl	w2, w2, w3
   3c640:	orr	w2, w1, w2
   3c644:	mov	w0, w2
   3c648:	ldp	x29, x30, [sp], #96
   3c64c:	ret
   3c650:	add	w0, w9, #0x8
   3c654:	cmp	w0, #0x0
   3c658:	b.le	3c664 <extract_fields@@Base+0x1c4>
   3c65c:	mov	w9, w0
   3c660:	b	3c5cc <extract_fields@@Base+0x12c>
   3c664:	add	x3, x8, w9, sxtw
   3c668:	mov	x7, x4
   3c66c:	mov	w9, w0
   3c670:	mov	x4, x3
   3c674:	b	3c5cc <extract_fields@@Base+0x12c>
   3c678:	mov	w6, #0xffffffff            	// #-1
   3c67c:	b	3c52c <extract_fields@@Base+0x8c>
   3c680:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3c684:	add	x3, x3, #0x710
   3c688:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c68c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3c690:	add	x3, x3, #0xf0
   3c694:	add	x1, x1, #0xfd0
   3c698:	add	x0, x0, #0x6b0
   3c69c:	mov	w2, #0x94                  	// #148
   3c6a0:	bl	35ac0 <__assert_fail@plt>
   3c6a4:	nop
   3c6a8:	stp	x29, x30, [sp, #-128]!
   3c6ac:	mov	x29, sp
   3c6b0:	stp	x19, x20, [sp, #16]
   3c6b4:	mov	x19, x0
   3c6b8:	ldr	x20, [x0, #8]
   3c6bc:	stp	x21, x22, [sp, #32]
   3c6c0:	ldr	x0, [x20, #120]
   3c6c4:	tbnz	w0, #4, 3c7b4 <extract_fields@@Base+0x314>
   3c6c8:	tbnz	w0, #5, 3c700 <extract_fields@@Base+0x260>
   3c6cc:	tbnz	w0, #27, 3c7ec <extract_fields@@Base+0x34c>
   3c6d0:	tbnz	w0, #6, 3c864 <extract_fields@@Base+0x3c4>
   3c6d4:	tbnz	w0, #7, 3c9c0 <extract_fields@@Base+0x520>
   3c6d8:	tbnz	w0, #8, 3cae4 <extract_fields@@Base+0x644>
   3c6dc:	tbnz	w0, #9, 3ca30 <extract_fields@@Base+0x590>
   3c6e0:	tbnz	w0, #10, 3cc80 <extract_fields@@Base+0x7e0>
   3c6e4:	tbnz	w0, #11, 3ccfc <extract_fields@@Base+0x85c>
   3c6e8:	tbnz	w0, #22, 3cd8c <extract_fields@@Base+0x8ec>
   3c6ec:	mov	w0, #0x1                   	// #1
   3c6f0:	ldp	x19, x20, [sp, #16]
   3c6f4:	ldp	x21, x22, [sp, #32]
   3c6f8:	ldp	x29, x30, [sp], #128
   3c6fc:	ret
   3c700:	ldr	w0, [x20, #32]
   3c704:	stp	x23, x24, [sp, #48]
   3c708:	mov	w23, #0x0                   	// #0
   3c70c:	bl	35710 <aarch64_get_operand_class@plt>
   3c710:	cmp	w0, #0x1
   3c714:	b.ne	3cd58 <extract_fields@@Base+0x8b8>  // b.any
   3c718:	adrp	x22, a6000 <aarch64_operands@@Base+0x16bd0>
   3c71c:	ldr	w0, [x19]
   3c720:	mov	w24, #0xffffffff            	// #-1
   3c724:	ldr	x22, [x22, #3944]
   3c728:	ldr	w1, [x22, #472]
   3c72c:	ldr	w21, [x22, #476]
   3c730:	lsr	w0, w0, w1
   3c734:	lsl	w21, w24, w21
   3c738:	bic	w21, w0, w21
   3c73c:	cmp	w21, #0x1
   3c740:	add	w20, w21, #0x1
   3c744:	b.hi	3d1f0 <extract_fields@@Base+0xd50>  // b.pmore
   3c748:	and	w20, w20, #0xff
   3c74c:	mov	w0, w20
   3c750:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3c754:	cmp	w21, w0
   3c758:	b.ne	3d1f0 <extract_fields@@Base+0xd50>  // b.any
   3c75c:	sxtw	x1, w23
   3c760:	lsl	x0, x1, #3
   3c764:	sub	x0, x0, x1
   3c768:	add	x0, x19, x0, lsl #3
   3c76c:	strb	w20, [x0, #28]
   3c770:	ldr	x20, [x19, #8]
   3c774:	ldr	x0, [x20, #120]
   3c778:	tbz	w0, #23, 3cd4c <extract_fields@@Base+0x8ac>
   3c77c:	ldr	w1, [x19]
   3c780:	ldr	w3, [x22, #448]
   3c784:	ldr	w2, [x22, #452]
   3c788:	lsr	w1, w1, w3
   3c78c:	lsl	w24, w24, w2
   3c790:	bic	w24, w1, w24
   3c794:	cmp	w21, w24
   3c798:	ldp	x23, x24, [sp, #48]
   3c79c:	b.eq	3c6cc <extract_fields@@Base+0x22c>  // b.none
   3c7a0:	mov	w0, #0x0                   	// #0
   3c7a4:	ldp	x19, x20, [sp, #16]
   3c7a8:	ldp	x21, x22, [sp, #32]
   3c7ac:	ldp	x29, x30, [sp], #128
   3c7b0:	ret
   3c7b4:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3c7b8:	ldr	w0, [x19]
   3c7bc:	mov	w2, #0xffffffff            	// #-1
   3c7c0:	ldr	x1, [x1, #3944]
   3c7c4:	ldp	w4, w3, [x1, #8]
   3c7c8:	lsr	w4, w0, w4
   3c7cc:	lsl	w0, w2, w3
   3c7d0:	bic	w0, w4, w0
   3c7d4:	bl	35310 <get_cond_from_value@plt>
   3c7d8:	str	x0, [x19, #16]
   3c7dc:	ldr	x20, [x19, #8]
   3c7e0:	ldr	x0, [x20, #120]
   3c7e4:	tbz	w0, #5, 3c6cc <extract_fields@@Base+0x22c>
   3c7e8:	b	3c700 <extract_fields@@Base+0x260>
   3c7ec:	ldr	w0, [x20, #32]
   3c7f0:	mov	w21, #0x0                   	// #0
   3c7f4:	bl	35710 <aarch64_get_operand_class@plt>
   3c7f8:	cmp	w0, #0x1
   3c7fc:	b.ne	3cd74 <extract_fields@@Base+0x8d4>  // b.any
   3c800:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3c804:	ldr	w1, [x19]
   3c808:	mov	w20, #0xffffffff            	// #-1
   3c80c:	ldr	x0, [x0, #3944]
   3c810:	ldr	w2, [x0, #484]
   3c814:	ldr	w3, [x0, #480]
   3c818:	lsl	w20, w20, w2
   3c81c:	lsr	w0, w1, w3
   3c820:	bic	w20, w0, w20
   3c824:	cmp	w20, #0x1
   3c828:	add	w22, w20, #0x1
   3c82c:	b.hi	3d1ec <extract_fields@@Base+0xd4c>  // b.pmore
   3c830:	and	w22, w22, #0xff
   3c834:	mov	w0, w22
   3c838:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3c83c:	cmp	w20, w0
   3c840:	b.ne	3d1ec <extract_fields@@Base+0xd4c>  // b.any
   3c844:	sxtw	x1, w21
   3c848:	lsl	x0, x1, #3
   3c84c:	sub	x0, x0, x1
   3c850:	add	x0, x19, x0, lsl #3
   3c854:	strb	w22, [x0, #28]
   3c858:	ldr	x20, [x19, #8]
   3c85c:	ldr	x0, [x20, #120]
   3c860:	tbz	w0, #6, 3c6d4 <extract_fields@@Base+0x234>
   3c864:	ldp	w1, w3, [x20, #12]
   3c868:	mov	w4, #0xb                   	// #11
   3c86c:	ldr	w0, [x19]
   3c870:	mov	w2, #0x2                   	// #2
   3c874:	sub	w3, w3, #0x12
   3c878:	stp	x23, x24, [sp, #48]
   3c87c:	cmp	w3, #0x4
   3c880:	cset	w20, cc  // cc = lo, ul, last
   3c884:	add	w20, w20, #0x8
   3c888:	mov	w3, w20
   3c88c:	bl	35390 <extract_fields@plt>
   3c890:	ldr	x5, [x19, #8]
   3c894:	mov	w24, w0
   3c898:	mov	w3, w20
   3c89c:	mov	w4, #0xb                   	// #11
   3c8a0:	mov	w2, #0x2                   	// #2
   3c8a4:	mov	w1, #0x0                   	// #0
   3c8a8:	ldr	w0, [x5, #12]
   3c8ac:	mvn	w0, w0
   3c8b0:	bl	35390 <extract_fields@plt>
   3c8b4:	mov	w23, w0
   3c8b8:	ldr	x0, [x19, #8]
   3c8bc:	bl	357b0 <aarch64_select_operand_for_sizeq_field_coding@plt>
   3c8c0:	mov	w22, w0
   3c8c4:	cmp	w23, #0x7
   3c8c8:	b.eq	3d0b4 <extract_fields@@Base+0xc14>  // b.none
   3c8cc:	ldr	x1, [x19, #8]
   3c8d0:	str	x25, [sp, #64]
   3c8d4:	add	x0, x1, #0x38
   3c8d8:	ldrb	w0, [x0, w22, sxtw]
   3c8dc:	str	w0, [sp, #88]
   3c8e0:	cbz	w0, 3c970 <extract_fields@@Base+0x4d0>
   3c8e4:	add	x0, x1, #0x3e
   3c8e8:	ldrb	w0, [x0, w22, sxtw]
   3c8ec:	str	w0, [sp, #92]
   3c8f0:	cbz	w0, 3c970 <extract_fields@@Base+0x4d0>
   3c8f4:	add	x0, x1, #0x44
   3c8f8:	ldrb	w0, [x0, w22, sxtw]
   3c8fc:	str	w0, [sp, #96]
   3c900:	cbz	w0, 3c970 <extract_fields@@Base+0x4d0>
   3c904:	add	x0, x1, #0x4a
   3c908:	ldrb	w0, [x0, w22, sxtw]
   3c90c:	str	w0, [sp, #100]
   3c910:	cbz	w0, 3c970 <extract_fields@@Base+0x4d0>
   3c914:	add	x0, x1, #0x50
   3c918:	ldrb	w0, [x0, w22, sxtw]
   3c91c:	str	w0, [sp, #104]
   3c920:	cbz	w0, 3c970 <extract_fields@@Base+0x4d0>
   3c924:	add	x0, x1, #0x56
   3c928:	ldrb	w0, [x0, w22, sxtw]
   3c92c:	str	w0, [sp, #108]
   3c930:	cbz	w0, 3c970 <extract_fields@@Base+0x4d0>
   3c934:	add	x0, x1, #0x5c
   3c938:	ldrb	w0, [x0, w22, sxtw]
   3c93c:	str	w0, [sp, #112]
   3c940:	cbz	w0, 3c970 <extract_fields@@Base+0x4d0>
   3c944:	add	x0, x1, #0x62
   3c948:	ldrb	w0, [x0, w22, sxtw]
   3c94c:	str	w0, [sp, #116]
   3c950:	cbz	w0, 3c970 <extract_fields@@Base+0x4d0>
   3c954:	add	x0, x1, #0x68
   3c958:	ldrb	w0, [x0, w22, sxtw]
   3c95c:	str	w0, [sp, #120]
   3c960:	cbz	w0, 3c970 <extract_fields@@Base+0x4d0>
   3c964:	add	x1, x1, #0x6e
   3c968:	ldrb	w0, [x1, w22, sxtw]
   3c96c:	str	w0, [sp, #124]
   3c970:	add	x21, sp, #0x58
   3c974:	add	x25, sp, #0x80
   3c978:	ldr	w1, [x21]
   3c97c:	cbz	w1, 3c9a4 <extract_fields@@Base+0x504>
   3c980:	and	w20, w1, #0xff
   3c984:	mov	w0, w20
   3c988:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3c98c:	eor	w1, w24, w0
   3c990:	tst	w1, w23
   3c994:	b.eq	3cfd0 <extract_fields@@Base+0xb30>  // b.none
   3c998:	add	x21, x21, #0x4
   3c99c:	cmp	x21, x25
   3c9a0:	b.ne	3c978 <extract_fields@@Base+0x4d8>  // b.any
   3c9a4:	mov	w0, #0x0                   	// #0
   3c9a8:	ldp	x19, x20, [sp, #16]
   3c9ac:	ldp	x21, x22, [sp, #32]
   3c9b0:	ldp	x23, x24, [sp, #48]
   3c9b4:	ldr	x25, [sp, #64]
   3c9b8:	ldp	x29, x30, [sp], #128
   3c9bc:	ret
   3c9c0:	ldr	w0, [x20, #36]
   3c9c4:	bl	35710 <aarch64_get_operand_class@plt>
   3c9c8:	cmp	w0, #0x3
   3c9cc:	mov	x2, #0x1                   	// #1
   3c9d0:	b.ne	3cdf0 <extract_fields@@Base+0x950>  // b.any
   3c9d4:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3c9d8:	ldr	w3, [x19]
   3c9dc:	mov	w0, #0xffffffff            	// #-1
   3c9e0:	ldr	x1, [x1, #3944]
   3c9e4:	ldr	w4, [x1, #292]
   3c9e8:	ldr	w5, [x1, #288]
   3c9ec:	lsl	w0, w0, w4
   3c9f0:	lsr	w1, w3, w5
   3c9f4:	bic	w0, w1, w0
   3c9f8:	cmp	w0, #0x1
   3c9fc:	b.eq	3ce38 <extract_fields@@Base+0x998>  // b.none
   3ca00:	cmp	w0, #0x3
   3ca04:	b.eq	3ce30 <extract_fields@@Base+0x990>  // b.none
   3ca08:	cbnz	w0, 3c7a0 <extract_fields@@Base+0x300>
   3ca0c:	mov	w1, #0x7                   	// #7
   3ca10:	lsl	x0, x2, #3
   3ca14:	sub	x2, x0, x2
   3ca18:	add	x2, x19, x2, lsl #3
   3ca1c:	strb	w1, [x2, #28]
   3ca20:	ldr	x20, [x19, #8]
   3ca24:	ldr	x0, [x20, #120]
   3ca28:	tbz	w0, #8, 3c6dc <extract_fields@@Base+0x23c>
   3ca2c:	b	3cae4 <extract_fields@@Base+0x644>
   3ca30:	ldr	w0, [x20, #32]
   3ca34:	bl	35710 <aarch64_get_operand_class@plt>
   3ca38:	cmp	w0, #0x4
   3ca3c:	b.ne	3d1f8 <extract_fields@@Base+0xd58>  // b.any
   3ca40:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3ca44:	ldr	w4, [x19]
   3ca48:	mov	w0, #0xffffffff            	// #-1
   3ca4c:	ldr	x3, [x1, #3944]
   3ca50:	ldr	w2, [x3, #344]
   3ca54:	ldr	w3, [x3, #348]
   3ca58:	lsr	w2, w4, w2
   3ca5c:	lsl	w0, w0, w3
   3ca60:	bic	w0, w2, w0
   3ca64:	tbnz	w0, #0, 3d0fc <extract_fields@@Base+0xc5c>
   3ca68:	tbnz	w0, #1, 3d030 <extract_fields@@Base+0xb90>
   3ca6c:	tbnz	w0, #2, 3d104 <extract_fields@@Base+0xc64>
   3ca70:	mov	w3, #0x3                   	// #3
   3ca74:	tbz	w0, #3, 3c7a0 <extract_fields@@Base+0x300>
   3ca78:	lsl	w3, w3, #1
   3ca7c:	ldr	x1, [x1, #3944]
   3ca80:	mov	w20, #0xffffffff            	// #-1
   3ca84:	ldr	x0, [x19, #8]
   3ca88:	ldp	w2, w1, [x1, #88]
   3ca8c:	ldr	w0, [x0, #12]
   3ca90:	bic	w0, w4, w0
   3ca94:	lsl	w20, w20, w1
   3ca98:	lsr	w0, w0, w2
   3ca9c:	bic	w20, w0, w20
   3caa0:	orr	w20, w20, w3
   3caa4:	add	w0, w20, #0xd
   3caa8:	add	w1, w20, #0xe
   3caac:	cmp	w0, #0xe
   3cab0:	csel	w0, w1, w0, hi  // hi = pmore
   3cab4:	cmp	w20, #0x8
   3cab8:	b.hi	3d224 <extract_fields@@Base+0xd84>  // b.pmore
   3cabc:	and	w21, w0, #0xff
   3cac0:	mov	w0, w21
   3cac4:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3cac8:	cmp	w20, w0
   3cacc:	b.ne	3d224 <extract_fields@@Base+0xd84>  // b.any
   3cad0:	ldr	x20, [x19, #8]
   3cad4:	strb	w21, [x19, #28]
   3cad8:	ldr	x0, [x20, #120]
   3cadc:	tbz	w0, #10, 3c6e4 <extract_fields@@Base+0x244>
   3cae0:	b	3cc80 <extract_fields@@Base+0x7e0>
   3cae4:	ldr	w0, [x20, #32]
   3cae8:	stp	x23, x24, [sp, #48]
   3caec:	bl	35710 <aarch64_get_operand_class@plt>
   3caf0:	cmp	w0, #0x6
   3caf4:	b.eq	3d008 <extract_fields@@Base+0xb68>  // b.none
   3caf8:	ldr	w0, [x20, #36]
   3cafc:	mov	w21, #0x0                   	// #0
   3cb00:	bl	35710 <aarch64_get_operand_class@plt>
   3cb04:	cmp	w0, #0x6
   3cb08:	b.ne	3d230 <extract_fields@@Base+0xd90>  // b.any
   3cb0c:	ldrb	w0, [x20, #57]
   3cb10:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3cb14:	ands	w0, w0, #0xff
   3cb18:	cset	w1, eq  // eq = none
   3cb1c:	cmp	w1, #0x0
   3cb20:	ccmp	w0, w21, #0x0, ne  // ne = any
   3cb24:	b.eq	3d230 <extract_fields@@Base+0xd90>  // b.none
   3cb28:	mov	w20, #0x1                   	// #1
   3cb2c:	cbz	w21, 3cb38 <extract_fields@@Base+0x698>
   3cb30:	cmp	w21, w0, lsl #1
   3cb34:	cset	w20, eq  // eq = none
   3cb38:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   3cb3c:	ldr	w4, [x19]
   3cb40:	ldr	x0, [x19, #8]
   3cb44:	mov	w22, #0xffffffff            	// #-1
   3cb48:	ldr	x2, [x2, #3944]
   3cb4c:	ldr	w1, [x0, #12]
   3cb50:	ldp	w3, w2, [x2, #64]
   3cb54:	mvn	w23, w1
   3cb58:	bic	w1, w4, w1
   3cb5c:	lsl	w22, w22, w2
   3cb60:	lsr	w23, w23, w3
   3cb64:	bic	w23, w23, w22
   3cb68:	lsr	w1, w1, w3
   3cb6c:	cmp	w23, #0x3
   3cb70:	bic	w22, w1, w22
   3cb74:	b.eq	3d038 <extract_fields@@Base+0xb98>  // b.none
   3cb78:	add	x1, x0, #0x38
   3cb7c:	str	x25, [sp, #64]
   3cb80:	sxtw	x24, w20
   3cb84:	ldrb	w1, [x1, w20, sxtw]
   3cb88:	str	w1, [sp, #88]
   3cb8c:	cbz	w1, 3cc1c <extract_fields@@Base+0x77c>
   3cb90:	add	x1, x0, #0x3e
   3cb94:	ldrb	w1, [x1, w20, sxtw]
   3cb98:	str	w1, [sp, #92]
   3cb9c:	cbz	w1, 3cc1c <extract_fields@@Base+0x77c>
   3cba0:	add	x1, x0, #0x44
   3cba4:	ldrb	w1, [x1, x24]
   3cba8:	str	w1, [sp, #96]
   3cbac:	cbz	w1, 3cc1c <extract_fields@@Base+0x77c>
   3cbb0:	add	x1, x0, #0x4a
   3cbb4:	ldrb	w1, [x1, x24]
   3cbb8:	str	w1, [sp, #100]
   3cbbc:	cbz	w1, 3cc1c <extract_fields@@Base+0x77c>
   3cbc0:	add	x1, x0, #0x50
   3cbc4:	ldrb	w1, [x1, x24]
   3cbc8:	str	w1, [sp, #104]
   3cbcc:	cbz	w1, 3cc1c <extract_fields@@Base+0x77c>
   3cbd0:	add	x1, x0, #0x56
   3cbd4:	ldrb	w1, [x1, x24]
   3cbd8:	str	w1, [sp, #108]
   3cbdc:	cbz	w1, 3cc1c <extract_fields@@Base+0x77c>
   3cbe0:	add	x1, x0, #0x5c
   3cbe4:	ldrb	w1, [x1, x24]
   3cbe8:	str	w1, [sp, #112]
   3cbec:	cbz	w1, 3cc1c <extract_fields@@Base+0x77c>
   3cbf0:	add	x1, x0, #0x62
   3cbf4:	ldrb	w1, [x1, x24]
   3cbf8:	str	w1, [sp, #116]
   3cbfc:	cbz	w1, 3cc1c <extract_fields@@Base+0x77c>
   3cc00:	add	x1, x0, #0x68
   3cc04:	ldrb	w1, [x1, x24]
   3cc08:	str	w1, [sp, #120]
   3cc0c:	cbz	w1, 3cc1c <extract_fields@@Base+0x77c>
   3cc10:	add	x0, x0, #0x6e
   3cc14:	ldrb	w0, [x0, w20, sxtw]
   3cc18:	str	w0, [sp, #124]
   3cc1c:	add	x21, sp, #0x58
   3cc20:	add	x25, sp, #0x80
   3cc24:	nop
   3cc28:	ldr	w0, [x21]
   3cc2c:	cbz	w0, 3cc54 <extract_fields@@Base+0x7b4>
   3cc30:	and	w20, w0, #0xff
   3cc34:	mov	w0, w20
   3cc38:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3cc3c:	eor	w0, w22, w0
   3cc40:	tst	w0, w23
   3cc44:	b.eq	3cc58 <extract_fields@@Base+0x7b8>  // b.none
   3cc48:	add	x21, x21, #0x4
   3cc4c:	cmp	x25, x21
   3cc50:	b.ne	3cc28 <extract_fields@@Base+0x788>  // b.any
   3cc54:	mov	w20, #0x0                   	// #0
   3cc58:	lsl	x0, x24, #3
   3cc5c:	sub	x24, x0, x24
   3cc60:	add	x24, x19, x24, lsl #3
   3cc64:	strb	w20, [x24, #28]
   3cc68:	ldr	x25, [sp, #64]
   3cc6c:	ldr	x20, [x19, #8]
   3cc70:	ldp	x23, x24, [sp, #48]
   3cc74:	ldr	x0, [x20, #120]
   3cc78:	tbz	w0, #9, 3c6e0 <extract_fields@@Base+0x240>
   3cc7c:	b	3ca30 <extract_fields@@Base+0x590>
   3cc80:	add	x0, x20, #0x20
   3cc84:	mov	w1, #0x4                   	// #4
   3cc88:	bl	35100 <aarch64_operand_index@plt>
   3cc8c:	mov	w21, w0
   3cc90:	cmn	w0, #0x1
   3cc94:	b.eq	3d070 <extract_fields@@Base+0xbd0>  // b.none
   3cc98:	cmp	w0, #0x1
   3cc9c:	b.hi	3d284 <extract_fields@@Base+0xde4>  // b.pmore
   3cca0:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3cca4:	ldr	w1, [x19]
   3cca8:	mov	w20, #0xffffffff            	// #-1
   3ccac:	ldr	x0, [x0, #3944]
   3ccb0:	ldp	w3, w2, [x0, #88]
   3ccb4:	lsl	w20, w20, w2
   3ccb8:	lsr	w0, w1, w3
   3ccbc:	bic	w20, w0, w20
   3ccc0:	cmp	w20, #0x1
   3ccc4:	add	w22, w20, #0x1
   3ccc8:	b.hi	3d1ec <extract_fields@@Base+0xd4c>  // b.pmore
   3cccc:	and	w22, w22, #0xff
   3ccd0:	mov	w0, w22
   3ccd4:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3ccd8:	cmp	w20, w0
   3ccdc:	b.ne	3d1ec <extract_fields@@Base+0xd4c>  // b.any
   3cce0:	sbfiz	x0, x21, #3, #32
   3cce4:	sub	x21, x0, w21, sxtw
   3cce8:	add	x21, x19, x21, lsl #3
   3ccec:	strb	w22, [x21, #28]
   3ccf0:	ldr	x20, [x19, #8]
   3ccf4:	ldr	x0, [x20, #120]
   3ccf8:	tbz	w0, #11, 3c6e8 <extract_fields@@Base+0x248>
   3ccfc:	ldr	w0, [x20, #32]
   3cd00:	bl	35710 <aarch64_get_operand_class@plt>
   3cd04:	cmp	w0, #0x1
   3cd08:	b.ne	3d258 <extract_fields@@Base+0xdb8>  // b.any
   3cd0c:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3cd10:	ldr	x1, [x1, #3944]
   3cd14:	ldr	w2, [x1, #268]
   3cd18:	cmp	w2, #0x0
   3cd1c:	b.le	3cffc <extract_fields@@Base+0xb5c>
   3cd20:	ldr	w3, [x1, #264]
   3cd24:	ldr	w1, [x19]
   3cd28:	mov	w2, #0x2                   	// #2
   3cd2c:	ldr	x20, [x19, #8]
   3cd30:	lsr	w1, w1, w3
   3cd34:	and	w0, w1, w0
   3cd38:	sub	w0, w2, w0
   3cd3c:	strb	w0, [x19, #28]
   3cd40:	ldr	x0, [x20, #120]
   3cd44:	tbz	w0, #22, 3c6ec <extract_fields@@Base+0x24c>
   3cd48:	b	3cd8c <extract_fields@@Base+0x8ec>
   3cd4c:	ldp	x23, x24, [sp, #48]
   3cd50:	tbz	w0, #27, 3c6d0 <extract_fields@@Base+0x230>
   3cd54:	b	3c7ec <extract_fields@@Base+0x34c>
   3cd58:	ldr	w0, [x20, #36]
   3cd5c:	mov	w23, #0x1                   	// #1
   3cd60:	bl	35710 <aarch64_get_operand_class@plt>
   3cd64:	cmp	w0, w23
   3cd68:	b.eq	3c718 <extract_fields@@Base+0x278>  // b.none
   3cd6c:	str	x25, [sp, #64]
   3cd70:	bl	3c2e0 <aarch64_opcode_encode@@Base+0x1f88>
   3cd74:	ldr	w0, [x20, #36]
   3cd78:	bl	35710 <aarch64_get_operand_class@plt>
   3cd7c:	cmp	w0, #0x1
   3cd80:	b.ne	3d2b8 <extract_fields@@Base+0xe18>  // b.any
   3cd84:	mov	w21, w0
   3cd88:	b	3c800 <extract_fields@@Base+0x360>
   3cd8c:	ldr	w0, [x20, #20]
   3cd90:	cmp	w0, #0x48
   3cd94:	b.eq	3d194 <extract_fields@@Base+0xcf4>  // b.none
   3cd98:	b.hi	3cf00 <extract_fields@@Base+0xa60>  // b.pmore
   3cd9c:	cmp	w0, #0x3f
   3cda0:	b.eq	3d168 <extract_fields@@Base+0xcc8>  // b.none
   3cda4:	b.ls	3cea4 <extract_fields@@Base+0xa04>  // b.plast
   3cda8:	cmp	w0, #0x46
   3cdac:	b.eq	3d1b4 <extract_fields@@Base+0xd14>  // b.none
   3cdb0:	cmp	w0, #0x47
   3cdb4:	b.ne	3ce40 <extract_fields@@Base+0x9a0>  // b.any
   3cdb8:	ldr	w0, [x19]
   3cdbc:	mov	w1, #0x0                   	// #0
   3cdc0:	mov	w4, #0x2b                  	// #43
   3cdc4:	mov	w3, #0x74                  	// #116
   3cdc8:	mov	w2, #0x2                   	// #2
   3cdcc:	bl	35390 <extract_fields@plt>
   3cdd0:	sub	w1, w0, #0x1
   3cdd4:	cmp	w1, #0xf
   3cdd8:	b.hi	3c7a0 <extract_fields@@Base+0x300>  // b.pmore
   3cddc:	neg	w1, w0
   3cde0:	bics	wzr, w0, w1
   3cde4:	b.eq	3c6ec <extract_fields@@Base+0x24c>  // b.none
   3cde8:	mov	w0, #0x0                   	// #0
   3cdec:	b	3c7a4 <extract_fields@@Base+0x304>
   3cdf0:	ldr	w0, [x20, #32]
   3cdf4:	bl	35710 <aarch64_get_operand_class@plt>
   3cdf8:	cmp	w0, #0x3
   3cdfc:	mov	x2, #0x0                   	// #0
   3ce00:	b.eq	3c9d4 <extract_fields@@Base+0x534>  // b.none
   3ce04:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3ce08:	add	x3, x3, #0x710
   3ce0c:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3ce10:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   3ce14:	add	x3, x3, #0x100
   3ce18:	add	x1, x1, #0x610
   3ce1c:	add	x0, x0, #0x870
   3ce20:	mov	w2, #0x1c0                 	// #448
   3ce24:	stp	x23, x24, [sp, #48]
   3ce28:	str	x25, [sp, #64]
   3ce2c:	bl	35ac0 <__assert_fail@plt>
   3ce30:	mov	w1, #0x6                   	// #6
   3ce34:	b	3ca10 <extract_fields@@Base+0x570>
   3ce38:	mov	w1, #0x8                   	// #8
   3ce3c:	b	3ca10 <extract_fields@@Base+0x570>
   3ce40:	cmp	w0, #0x45
   3ce44:	b.ne	3c7a0 <extract_fields@@Base+0x300>  // b.any
   3ce48:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3ce4c:	ldr	w6, [x19]
   3ce50:	mov	w3, #0xffffffff            	// #-1
   3ce54:	ldr	x0, [x0, #3944]
   3ce58:	add	x11, x0, #0x268
   3ce5c:	ldp	w5, w2, [x11, #-8]
   3ce60:	ldp	w4, w1, [x11]
   3ce64:	lsl	w2, w3, w2
   3ce68:	lsr	w5, w6, w5
   3ce6c:	bic	w2, w5, w2
   3ce70:	lsl	w1, w3, w1
   3ce74:	lsr	w4, w6, w4
   3ce78:	bic	w1, w4, w1
   3ce7c:	cmp	w1, w2
   3ce80:	b.ne	3c7a0 <extract_fields@@Base+0x300>  // b.any
   3ce84:	ldr	w2, [x0, #592]
   3ce88:	ldr	w0, [x0, #596]
   3ce8c:	lsr	w6, w6, w2
   3ce90:	lsl	w0, w3, w0
   3ce94:	bic	w0, w6, w0
   3ce98:	cmp	w0, w1
   3ce9c:	cset	w0, eq  // eq = none
   3cea0:	b	3c6f0 <extract_fields@@Base+0x250>
   3cea4:	cmp	w0, #0x3a
   3cea8:	b.eq	3d10c <extract_fields@@Base+0xc6c>  // b.none
   3ceac:	sub	w1, w0, #0x3b
   3ceb0:	cmp	w1, #0x3
   3ceb4:	b.hi	3c7a0 <extract_fields@@Base+0x300>  // b.pmore
   3ceb8:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3cebc:	mov	w3, #0x13                  	// #19
   3cec0:	ldr	x1, [x1, #3944]
   3cec4:	ldr	w2, [x1, #68]
   3cec8:	cmp	w2, #0x0
   3cecc:	b.le	3cee8 <extract_fields@@Base+0xa48>
   3ced0:	ldr	w1, [x1, #64]
   3ced4:	mov	w4, #0x15                  	// #21
   3ced8:	ldr	w2, [x19]
   3cedc:	lsr	w1, w2, w1
   3cee0:	tst	x1, #0x1
   3cee4:	csel	w3, w3, w4, eq  // eq = none
   3cee8:	sub	w0, w0, #0x3d
   3ceec:	cmp	w0, #0x1
   3cef0:	mov	w0, #0x1                   	// #1
   3cef4:	b.ls	3d1d4 <extract_fields@@Base+0xd34>  // b.plast
   3cef8:	strb	w3, [x19, #84]
   3cefc:	b	3c6f0 <extract_fields@@Base+0x250>
   3cf00:	cmp	w0, #0x4b
   3cf04:	b.eq	3ce48 <extract_fields@@Base+0x9a8>  // b.none
   3cf08:	b.ls	3cf54 <extract_fields@@Base+0xab4>  // b.plast
   3cf0c:	cmp	w0, #0x4d
   3cf10:	b.hi	3cfa4 <extract_fields@@Base+0xb04>  // b.pmore
   3cf14:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3cf18:	ldr	w3, [x19]
   3cf1c:	mov	w0, #0xffffffff            	// #-1
   3cf20:	ldr	x1, [x1, #3944]
   3cf24:	add	x7, x1, #0x268
   3cf28:	ldp	w4, w2, [x7, #-8]
   3cf2c:	ldp	w6, w5, [x7]
   3cf30:	lsr	w4, w3, w4
   3cf34:	lsl	w1, w0, w2
   3cf38:	bic	w1, w4, w1
   3cf3c:	lsr	w3, w3, w6
   3cf40:	lsl	w0, w0, w5
   3cf44:	bic	w0, w3, w0
   3cf48:	cmp	w0, w1
   3cf4c:	cset	w0, eq  // eq = none
   3cf50:	b	3c6f0 <extract_fields@@Base+0x250>
   3cf54:	cmp	w0, #0x49
   3cf58:	b.eq	3d138 <extract_fields@@Base+0xc98>  // b.none
   3cf5c:	cmp	w0, #0x4a
   3cf60:	b.ne	3c7a0 <extract_fields@@Base+0x300>  // b.any
   3cf64:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3cf68:	ldr	w3, [x19]
   3cf6c:	mov	w0, #0xffffffff            	// #-1
   3cf70:	ldr	x1, [x1, #3944]
   3cf74:	add	x8, x1, #0x250
   3cf78:	ldp	w4, w2, [x8, #-24]
   3cf7c:	ldp	w6, w5, [x8, #16]
   3cf80:	lsr	w4, w3, w4
   3cf84:	lsl	w1, w0, w2
   3cf88:	bic	w1, w4, w1
   3cf8c:	lsr	w3, w3, w6
   3cf90:	lsl	w0, w0, w5
   3cf94:	bic	w0, w3, w0
   3cf98:	cmp	w1, w0
   3cf9c:	cset	w0, eq  // eq = none
   3cfa0:	b	3c6f0 <extract_fields@@Base+0x250>
   3cfa4:	sub	w0, w0, #0x4e
   3cfa8:	cmp	w0, #0x1
   3cfac:	b.hi	3c7a0 <extract_fields@@Base+0x300>  // b.pmore
   3cfb0:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3cfb4:	mov	w0, #0xffffffff            	// #-1
   3cfb8:	ldr	x1, [x1, #3944]
   3cfbc:	add	x3, x1, #0x25c
   3cfc0:	ldp	w4, w2, [x3, #-12]
   3cfc4:	ldp	w6, w5, [x3, #4]
   3cfc8:	ldr	w3, [x19]
   3cfcc:	b	3cf30 <extract_fields@@Base+0xa90>
   3cfd0:	sbfiz	x1, x22, #3, #32
   3cfd4:	mov	w0, #0x1                   	// #1
   3cfd8:	sub	x22, x1, w22, sxtw
   3cfdc:	add	x19, x19, x22, lsl #3
   3cfe0:	strb	w20, [x19, #28]
   3cfe4:	ldp	x19, x20, [sp, #16]
   3cfe8:	ldp	x21, x22, [sp, #32]
   3cfec:	ldp	x23, x24, [sp, #48]
   3cff0:	ldr	x25, [sp, #64]
   3cff4:	ldp	x29, x30, [sp], #128
   3cff8:	ret
   3cffc:	mov	w0, #0x0                   	// #0
   3d000:	mov	w3, #0x0                   	// #0
   3d004:	b	3cd24 <extract_fields@@Base+0x884>
   3d008:	ldrb	w0, [x20, #56]
   3d00c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3d010:	and	w21, w0, #0xff
   3d014:	ldr	w0, [x20, #36]
   3d018:	bl	35710 <aarch64_get_operand_class@plt>
   3d01c:	cmp	w0, #0x6
   3d020:	b.eq	3cb0c <extract_fields@@Base+0x66c>  // b.none
   3d024:	mov	w1, #0x1                   	// #1
   3d028:	mov	w0, #0x0                   	// #0
   3d02c:	b	3cb1c <extract_fields@@Base+0x67c>
   3d030:	mov	w3, #0x1                   	// #1
   3d034:	b	3ca78 <extract_fields@@Base+0x5d8>
   3d038:	cmp	w22, #0x4
   3d03c:	add	w21, w22, #0x5
   3d040:	b.hi	3d2b0 <extract_fields@@Base+0xe10>  // b.pmore
   3d044:	and	w21, w21, #0xff
   3d048:	mov	w0, w21
   3d04c:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3d050:	cmp	w22, w0
   3d054:	b.ne	3d2b0 <extract_fields@@Base+0xe10>  // b.any
   3d058:	sxtw	x20, w20
   3d05c:	lsl	x0, x20, #3
   3d060:	sub	x0, x0, x20
   3d064:	add	x0, x19, x0, lsl #3
   3d068:	strb	w21, [x0, #28]
   3d06c:	b	3cc6c <extract_fields@@Base+0x7cc>
   3d070:	ldr	x0, [x19, #8]
   3d074:	mov	w21, #0x0                   	// #0
   3d078:	ldr	w0, [x0, #32]
   3d07c:	bl	35710 <aarch64_get_operand_class@plt>
   3d080:	cmp	w0, #0x1
   3d084:	b.eq	3cca0 <extract_fields@@Base+0x800>  // b.none
   3d088:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3d08c:	add	x3, x3, #0x710
   3d090:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3d094:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3d098:	add	x3, x3, #0x158
   3d09c:	add	x1, x1, #0xfd0
   3d0a0:	add	x0, x0, #0xc08
   3d0a4:	mov	w2, #0x8a3                 	// #2211
   3d0a8:	stp	x23, x24, [sp, #48]
   3d0ac:	str	x25, [sp, #64]
   3d0b0:	bl	35ac0 <__assert_fail@plt>
   3d0b4:	add	w0, w24, #0xd
   3d0b8:	add	w1, w24, #0xe
   3d0bc:	cmp	w0, #0xe
   3d0c0:	csel	w0, w1, w0, hi  // hi = pmore
   3d0c4:	cmp	w24, #0x8
   3d0c8:	b.hi	3d228 <extract_fields@@Base+0xd88>  // b.pmore
   3d0cc:	and	w20, w0, #0xff
   3d0d0:	mov	w0, w20
   3d0d4:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3d0d8:	cmp	w24, w0
   3d0dc:	b.ne	3d228 <extract_fields@@Base+0xd88>  // b.any
   3d0e0:	sbfiz	x1, x22, #3, #32
   3d0e4:	mov	w0, #0x1                   	// #1
   3d0e8:	sub	x22, x1, w22, sxtw
   3d0ec:	add	x19, x19, x22, lsl #3
   3d0f0:	strb	w20, [x19, #28]
   3d0f4:	ldp	x23, x24, [sp, #48]
   3d0f8:	b	3c6f0 <extract_fields@@Base+0x250>
   3d0fc:	mov	w3, #0x0                   	// #0
   3d100:	b	3ca7c <extract_fields@@Base+0x5dc>
   3d104:	mov	w3, #0x2                   	// #2
   3d108:	b	3ca78 <extract_fields@@Base+0x5d8>
   3d10c:	ldr	w0, [x19]
   3d110:	ubfx	x0, x0, #15, #2
   3d114:	cmp	w0, #0x1
   3d118:	b.eq	3d1e4 <extract_fields@@Base+0xd44>  // b.none
   3d11c:	cmp	w0, #0x3
   3d120:	b.eq	3d1dc <extract_fields@@Base+0xd3c>  // b.none
   3d124:	mov	w1, #0x7                   	// #7
   3d128:	cbnz	w0, 3c7a0 <extract_fields@@Base+0x300>
   3d12c:	mov	w0, #0x1                   	// #1
   3d130:	strb	w1, [x19, #28]
   3d134:	b	3c6f0 <extract_fields@@Base+0x250>
   3d138:	ldr	w0, [x19]
   3d13c:	mov	w4, #0x2b                  	// #43
   3d140:	mov	w3, #0x74                  	// #116
   3d144:	mov	w2, #0x2                   	// #2
   3d148:	mov	w1, #0x0                   	// #0
   3d14c:	bl	35390 <extract_fields@plt>
   3d150:	cbz	w0, 3c7a0 <extract_fields@@Base+0x300>
   3d154:	neg	w1, w0
   3d158:	bics	wzr, w0, w1
   3d15c:	b.ne	3c6ec <extract_fields@@Base+0x24c>  // b.any
   3d160:	mov	w0, #0x0                   	// #0
   3d164:	b	3c7a4 <extract_fields@@Base+0x304>
   3d168:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3d16c:	ldr	x0, [x0, #3944]
   3d170:	ldr	w1, [x0, #68]
   3d174:	cmp	w1, #0x0
   3d178:	b.le	3c7a0 <extract_fields@@Base+0x300>
   3d17c:	ldr	w0, [x0, #64]
   3d180:	ldr	w1, [x19]
   3d184:	lsr	w0, w1, w0
   3d188:	tbz	w0, #0, 3c7a0 <extract_fields@@Base+0x300>
   3d18c:	mov	w1, #0x7                   	// #7
   3d190:	b	3d12c <extract_fields@@Base+0xc8c>
   3d194:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3d198:	ldr	w3, [x19]
   3d19c:	mov	w0, #0xffffffff            	// #-1
   3d1a0:	ldr	x1, [x1, #3944]
   3d1a4:	add	x9, x1, #0x2c8
   3d1a8:	ldp	w4, w2, [x9, #-8]
   3d1ac:	ldp	w6, w5, [x9]
   3d1b0:	b	3cf30 <extract_fields@@Base+0xa90>
   3d1b4:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3d1b8:	ldr	w3, [x19]
   3d1bc:	mov	w0, #0xffffffff            	// #-1
   3d1c0:	ldr	x1, [x1, #3944]
   3d1c4:	add	x10, x1, #0x2bc
   3d1c8:	ldp	w4, w2, [x10, #-12]
   3d1cc:	ldp	w6, w5, [x10, #4]
   3d1d0:	b	3cf80 <extract_fields@@Base+0xae0>
   3d1d4:	strb	w3, [x19, #28]
   3d1d8:	b	3c6f0 <extract_fields@@Base+0x250>
   3d1dc:	mov	w1, #0x6                   	// #6
   3d1e0:	b	3d12c <extract_fields@@Base+0xc8c>
   3d1e4:	mov	w1, #0x8                   	// #8
   3d1e8:	b	3d12c <extract_fields@@Base+0xc8c>
   3d1ec:	stp	x23, x24, [sp, #48]
   3d1f0:	str	x25, [sp, #64]
   3d1f4:	bl	3c370 <aarch64_opcode_encode@@Base+0x2018>
   3d1f8:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3d1fc:	add	x3, x3, #0x710
   3d200:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3d204:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   3d208:	add	x3, x3, #0x158
   3d20c:	add	x1, x1, #0xfd0
   3d210:	add	x0, x0, #0x190
   3d214:	mov	w2, #0x884                 	// #2180
   3d218:	stp	x23, x24, [sp, #48]
   3d21c:	str	x25, [sp, #64]
   3d220:	bl	35ac0 <__assert_fail@plt>
   3d224:	stp	x23, x24, [sp, #48]
   3d228:	str	x25, [sp, #64]
   3d22c:	bl	3c340 <aarch64_opcode_encode@@Base+0x1fe8>
   3d230:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3d234:	add	x3, x3, #0x710
   3d238:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3d23c:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   3d240:	add	x3, x3, #0x128
   3d244:	add	x1, x1, #0x610
   3d248:	add	x0, x0, #0x870
   3d24c:	mov	w2, #0x1d4                 	// #468
   3d250:	str	x25, [sp, #64]
   3d254:	bl	35ac0 <__assert_fail@plt>
   3d258:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3d25c:	add	x3, x3, #0x710
   3d260:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3d264:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3d268:	add	x3, x3, #0x158
   3d26c:	add	x1, x1, #0xfd0
   3d270:	add	x0, x0, #0xc08
   3d274:	mov	w2, #0x8af                 	// #2223
   3d278:	stp	x23, x24, [sp, #48]
   3d27c:	str	x25, [sp, #64]
   3d280:	bl	35ac0 <__assert_fail@plt>
   3d284:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3d288:	add	x3, x3, #0x710
   3d28c:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3d290:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3d294:	add	x3, x3, #0x158
   3d298:	add	x1, x1, #0xfd0
   3d29c:	add	x0, x0, #0xb98
   3d2a0:	mov	w2, #0x8a7                 	// #2215
   3d2a4:	stp	x23, x24, [sp, #48]
   3d2a8:	str	x25, [sp, #64]
   3d2ac:	bl	35ac0 <__assert_fail@plt>
   3d2b0:	str	x25, [sp, #64]
   3d2b4:	bl	3c310 <aarch64_opcode_encode@@Base+0x1fb8>
   3d2b8:	stp	x23, x24, [sp, #48]
   3d2bc:	b	3cd6c <extract_fields@@Base+0x8cc>
   3d2c0:	stp	x29, x30, [sp, #-32]!
   3d2c4:	mov	x29, sp
   3d2c8:	ldr	x3, [x0, #8]
   3d2cc:	str	x19, [sp, #16]
   3d2d0:	mov	x19, x0
   3d2d4:	ldr	w0, [x3, #16]
   3d2d8:	sub	w0, w0, #0x47
   3d2dc:	cmp	w0, #0x12
   3d2e0:	b.ls	3d2f4 <extract_fields@@Base+0xe54>  // b.plast
   3d2e4:	mov	w0, #0x1                   	// #1
   3d2e8:	ldr	x19, [sp, #16]
   3d2ec:	ldp	x29, x30, [sp], #32
   3d2f0:	ret
   3d2f4:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   3d2f8:	add	x1, x1, #0x6e8
   3d2fc:	ldrh	w0, [x1, w0, uxtw #1]
   3d300:	adr	x1, 3d30c <extract_fields@@Base+0xe6c>
   3d304:	add	x0, x1, w0, sxth #2
   3d308:	br	x0
   3d30c:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3d310:	ldr	w1, [x19]
   3d314:	mov	w2, #0xffffffff            	// #-1
   3d318:	ldr	x0, [x0, #3944]
   3d31c:	ldr	w4, [x0, #896]
   3d320:	ldr	w0, [x0, #900]
   3d324:	lsr	w1, w1, w4
   3d328:	lsl	w2, w2, w0
   3d32c:	bic	w1, w1, w2
   3d330:	sbfiz	x2, x1, #1, #32
   3d334:	mov	w0, #0x1                   	// #1
   3d338:	add	x1, x2, w1, sxtw
   3d33c:	add	x1, x3, x1, lsl #1
   3d340:	ldrb	w2, [x1, #56]
   3d344:	strb	w2, [x19, #28]
   3d348:	ldrb	w2, [x1, #57]
   3d34c:	strb	w2, [x19, #84]
   3d350:	ldrb	w2, [x1, #58]
   3d354:	strb	w2, [x19, #140]
   3d358:	ldrb	w2, [x1, #59]
   3d35c:	strb	w2, [x19, #196]
   3d360:	ldrb	w2, [x1, #60]
   3d364:	strb	w2, [x19, #252]
   3d368:	ldrb	w1, [x1, #61]
   3d36c:	strb	w1, [x19, #308]
   3d370:	ldr	x19, [sp, #16]
   3d374:	ldp	x29, x30, [sp], #32
   3d378:	ret
   3d37c:	mov	w1, #0x0                   	// #0
   3d380:	b	3d330 <extract_fields@@Base+0xe90>
   3d384:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3d388:	ldr	w1, [x19]
   3d38c:	mov	w2, #0xffffffff            	// #-1
   3d390:	ldr	x0, [x0, #3944]
   3d394:	ldr	w4, [x0, #912]
   3d398:	ldr	w0, [x0, #916]
   3d39c:	lsr	w1, w1, w4
   3d3a0:	lsl	w2, w2, w0
   3d3a4:	bic	w1, w1, w2
   3d3a8:	b	3d330 <extract_fields@@Base+0xe90>
   3d3ac:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3d3b0:	ldr	w1, [x19]
   3d3b4:	mov	w2, #0xffffffff            	// #-1
   3d3b8:	ldr	x0, [x0, #3944]
   3d3bc:	ldr	w4, [x0, #904]
   3d3c0:	ldr	w0, [x0, #908]
   3d3c4:	lsr	w1, w1, w4
   3d3c8:	lsl	w2, w2, w0
   3d3cc:	bic	w2, w1, w2
   3d3d0:	cmp	w2, #0x0
   3d3d4:	b.le	3d470 <extract_fields@@Base+0xfd0>
   3d3d8:	sub	w1, w2, #0x1
   3d3dc:	b	3d330 <extract_fields@@Base+0xe90>
   3d3e0:	ldr	w0, [x19]
   3d3e4:	mov	w4, #0x75                  	// #117
   3d3e8:	mov	w3, #0x74                  	// #116
   3d3ec:	mov	w2, #0x2                   	// #2
   3d3f0:	mov	w1, #0x0                   	// #0
   3d3f4:	bl	35390 <extract_fields@plt>
   3d3f8:	cbz	w0, 3d470 <extract_fields@@Base+0xfd0>
   3d3fc:	cmp	w0, #0x1
   3d400:	mov	w1, #0x0                   	// #0
   3d404:	ldr	x3, [x19, #8]
   3d408:	b.eq	3d330 <extract_fields@@Base+0xe90>  // b.none
   3d40c:	nop
   3d410:	asr	w0, w0, #1
   3d414:	add	w1, w1, #0x1
   3d418:	cmp	w0, #0x1
   3d41c:	b.ne	3d410 <extract_fields@@Base+0xf70>  // b.any
   3d420:	b	3d330 <extract_fields@@Base+0xe90>
   3d424:	ldr	w0, [x19]
   3d428:	mov	w4, #0x45                  	// #69
   3d42c:	mov	w1, #0x0                   	// #0
   3d430:	mov	w3, #0x8                   	// #8
   3d434:	mov	w2, #0x2                   	// #2
   3d438:	bl	35390 <extract_fields@plt>
   3d43c:	mov	w1, w0
   3d440:	ldr	x3, [x19, #8]
   3d444:	b	3d330 <extract_fields@@Base+0xe90>
   3d448:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3d44c:	ldr	w1, [x19]
   3d450:	mov	w2, #0xffffffff            	// #-1
   3d454:	ldr	x0, [x0, #3944]
   3d458:	ldp	w4, w0, [x0, #64]
   3d45c:	lsl	w2, w2, w0
   3d460:	lsr	w1, w1, w4
   3d464:	bic	w1, w1, w2
   3d468:	cmp	w1, #0x2
   3d46c:	b.le	3d330 <extract_fields@@Base+0xe90>
   3d470:	mov	w0, #0x0                   	// #0
   3d474:	ldr	x19, [sp, #16]
   3d478:	ldp	x29, x30, [sp], #32
   3d47c:	ret
   3d480:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3d484:	ldr	w1, [x19]
   3d488:	mov	w2, #0xffffffff            	// #-1
   3d48c:	ldr	x0, [x0, #3944]
   3d490:	ldp	w4, w0, [x0, #64]
   3d494:	lsl	w2, w2, w0
   3d498:	lsr	w1, w1, w4
   3d49c:	bic	w1, w1, w2
   3d4a0:	b	3d330 <extract_fields@@Base+0xe90>
   3d4a4:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3d4a8:	ldr	w1, [x19]
   3d4ac:	mov	w2, #0xffffffff            	// #-1
   3d4b0:	ldr	x0, [x0, #3944]
   3d4b4:	ldp	w4, w0, [x0, #64]
   3d4b8:	b	3d3c4 <extract_fields@@Base+0xf24>
   3d4bc:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3d4c0:	ldr	w1, [x19]
   3d4c4:	mov	w2, #0xffffffff            	// #-1
   3d4c8:	ldr	x0, [x0, #3944]
   3d4cc:	ldr	w4, [x0, #536]
   3d4d0:	ldr	w0, [x0, #540]
   3d4d4:	lsr	w1, w1, w4
   3d4d8:	lsl	w2, w2, w0
   3d4dc:	bic	w1, w1, w2
   3d4e0:	b	3d330 <extract_fields@@Base+0xe90>
   3d4e4:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3d4e8:	ldr	w1, [x19]
   3d4ec:	mov	w2, #0xffffffff            	// #-1
   3d4f0:	ldr	x0, [x0, #3944]
   3d4f4:	ldp	w4, w0, [x0, #64]
   3d4f8:	lsr	w1, w1, w4
   3d4fc:	lsl	w2, w2, w0
   3d500:	bic	w2, w1, w2
   3d504:	ubfx	x1, x2, #1, #1
   3d508:	b	3d330 <extract_fields@@Base+0xe90>
   3d50c:	ldr	w0, [x19]
   3d510:	mov	w4, #0x76                  	// #118
   3d514:	mov	w3, #0x70                  	// #112
   3d518:	mov	w2, #0x2                   	// #2
   3d51c:	mov	w1, #0x0                   	// #0
   3d520:	bl	35390 <extract_fields@plt>
   3d524:	cbz	w0, 3d470 <extract_fields@@Base+0xfd0>
   3d528:	cmp	w0, #0x1
   3d52c:	mov	w1, #0x0                   	// #0
   3d530:	b.eq	3d440 <extract_fields@@Base+0xfa0>  // b.none
   3d534:	nop
   3d538:	asr	w0, w0, #1
   3d53c:	add	w1, w1, #0x1
   3d540:	cmp	w0, #0x1
   3d544:	b.ne	3d538 <extract_fields@@Base+0x1098>  // b.any
   3d548:	ldr	x3, [x19, #8]
   3d54c:	b	3d330 <extract_fields@@Base+0xe90>
   3d550:	ldr	w0, [x19]
   3d554:	mov	w4, #0x76                  	// #118
   3d558:	mov	w3, #0x74                  	// #116
   3d55c:	mov	w2, #0x2                   	// #2
   3d560:	mov	w1, #0x0                   	// #0
   3d564:	bl	35390 <extract_fields@plt>
   3d568:	cbz	w0, 3d470 <extract_fields@@Base+0xfd0>
   3d56c:	cmp	w0, #0x1
   3d570:	mov	w1, #0x0                   	// #0
   3d574:	ldr	x3, [x19, #8]
   3d578:	b.eq	3d330 <extract_fields@@Base+0xe90>  // b.none
   3d57c:	nop
   3d580:	asr	w0, w0, #1
   3d584:	add	w1, w1, #0x1
   3d588:	cmp	w0, #0x1
   3d58c:	b.ne	3d580 <extract_fields@@Base+0x10e0>  // b.any
   3d590:	b	3d330 <extract_fields@@Base+0xe90>
   3d594:	ldr	w0, [x19]
   3d598:	mov	w4, #0x76                  	// #118
   3d59c:	mov	w3, #0x70                  	// #112
   3d5a0:	mov	w2, #0x2                   	// #2
   3d5a4:	mov	w1, #0x0                   	// #0
   3d5a8:	bl	35390 <extract_fields@plt>
   3d5ac:	cbz	w0, 3d470 <extract_fields@@Base+0xfd0>
   3d5b0:	cmp	w0, #0x1
   3d5b4:	b.eq	3d684 <extract_fields@@Base+0x11e4>  // b.none
   3d5b8:	and	w1, w0, #0x1
   3d5bc:	tbz	w0, #0, 3d5c8 <extract_fields@@Base+0x1128>
   3d5c0:	b	3d470 <extract_fields@@Base+0xfd0>
   3d5c4:	tbnz	w0, #0, 3d470 <extract_fields@@Base+0xfd0>
   3d5c8:	asr	w0, w0, #1
   3d5cc:	add	w1, w1, #0x1
   3d5d0:	cmp	w0, #0x1
   3d5d4:	b.ne	3d5c4 <extract_fields@@Base+0x1124>  // b.any
   3d5d8:	ldr	x3, [x19, #8]
   3d5dc:	b	3d330 <extract_fields@@Base+0xe90>
   3d5e0:	ldr	w0, [x19]
   3d5e4:	mov	w4, #0x44                  	// #68
   3d5e8:	b	3d42c <extract_fields@@Base+0xf8c>
   3d5ec:	ldr	w0, [x19]
   3d5f0:	mov	w2, #0x2                   	// #2
   3d5f4:	mov	w4, #0x2b                  	// #43
   3d5f8:	mov	w3, #0x74                  	// #116
   3d5fc:	mov	w1, #0x0                   	// #0
   3d600:	bl	35390 <extract_fields@plt>
   3d604:	mov	w2, w0
   3d608:	tst	x0, #0x1f
   3d60c:	b.eq	3d470 <extract_fields@@Base+0xfd0>  // b.none
   3d610:	and	w1, w0, #0x1
   3d614:	ldr	x3, [x19, #8]
   3d618:	tbnz	w0, #0, 3d37c <extract_fields@@Base+0xedc>
   3d61c:	nop
   3d620:	asr	w2, w2, #1
   3d624:	add	w1, w1, #0x1
   3d628:	tbz	w2, #0, 3d620 <extract_fields@@Base+0x1180>
   3d62c:	b	3d330 <extract_fields@@Base+0xe90>
   3d630:	ldr	w0, [x19]
   3d634:	mov	w1, #0x0                   	// #0
   3d638:	and	w2, w0, #0x3fe00
   3d63c:	and	w2, w2, #0xfffe07ff
   3d640:	cmp	w2, #0x600
   3d644:	b.eq	3d330 <extract_fields@@Base+0xe90>  // b.none
   3d648:	and	w2, w0, #0x3fc00
   3d64c:	mov	w1, #0x1                   	// #1
   3d650:	and	w2, w2, #0xfffe07ff
   3d654:	cmp	w2, #0x400
   3d658:	b.eq	3d330 <extract_fields@@Base+0xe90>  // b.none
   3d65c:	ubfx	x0, x0, #17, #1
   3d660:	add	w1, w0, #0x2
   3d664:	b	3d330 <extract_fields@@Base+0xe90>
   3d668:	ldr	w0, [x19]
   3d66c:	mov	w4, #0x76                  	// #118
   3d670:	mov	w3, #0x74                  	// #116
   3d674:	mov	w2, #0x2                   	// #2
   3d678:	mov	w1, #0x0                   	// #0
   3d67c:	bl	35390 <extract_fields@plt>
   3d680:	b	3d3f8 <extract_fields@@Base+0xf58>
   3d684:	mov	w1, #0x0                   	// #0
   3d688:	ldr	x3, [x19, #8]
   3d68c:	b	3d330 <extract_fields@@Base+0xe90>
   3d690:	stp	x29, x30, [sp, #-480]!
   3d694:	mov	x29, sp
   3d698:	stp	x21, x22, [sp, #32]
   3d69c:	ldr	x21, [x0, #8]
   3d6a0:	stp	x19, x20, [sp, #16]
   3d6a4:	mov	x20, x0
   3d6a8:	ldr	x0, [x21, #120]
   3d6ac:	tst	w0, #0x2
   3d6b0:	b.ne	3d6c4 <extract_fields@@Base+0x1224>  // b.any
   3d6b4:	ldp	x19, x20, [sp, #16]
   3d6b8:	ldp	x21, x22, [sp, #32]
   3d6bc:	ldp	x29, x30, [sp], #480
   3d6c0:	ret
   3d6c4:	mov	x0, x21
   3d6c8:	stp	x23, x24, [sp, #48]
   3d6cc:	mov	x23, x1
   3d6d0:	stp	x25, x26, [sp, #64]
   3d6d4:	stp	x27, x28, [sp, #80]
   3d6d8:	bl	35ba0 <aarch64_find_alias_opcode@plt>
   3d6dc:	mov	x19, x0
   3d6e0:	cbz	x0, 3df4c <extract_fields@@Base+0x1aac>
   3d6e4:	adrp	x24, a6000 <aarch64_operands@@Base+0x16bd0>
   3d6e8:	add	x22, sp, #0x78
   3d6ec:	mov	x25, #0xff0                 	// #4080
   3d6f0:	add	x27, x22, #0x18
   3d6f4:	ldr	x26, [x24, #4032]
   3d6f8:	movk	x25, #0x8c0, lsl #16
   3d6fc:	nop
   3d700:	ldr	x2, [x19, #120]
   3d704:	tbnz	w2, #0, 3d710 <extract_fields@@Base+0x1270>
   3d708:	ldr	x0, [x21, #120]
   3d70c:	tbz	w0, #1, 3dea0 <extract_fields@@Base+0x1a00>
   3d710:	tbnz	w2, #21, 3d728 <extract_fields@@Base+0x1288>
   3d714:	ldp	w1, w2, [x19, #8]
   3d718:	ldr	w0, [x20]
   3d71c:	and	w0, w0, w2
   3d720:	cmp	w0, w1
   3d724:	b.eq	3d754 <extract_fields@@Base+0x12b4>  // b.none
   3d728:	mov	x0, x19
   3d72c:	bl	35ae0 <aarch64_find_next_alias_opcode@plt>
   3d730:	mov	x19, x0
   3d734:	cbnz	x0, 3d700 <extract_fields@@Base+0x1260>
   3d738:	ldp	x19, x20, [sp, #16]
   3d73c:	ldp	x21, x22, [sp, #32]
   3d740:	ldp	x23, x24, [sp, #48]
   3d744:	ldp	x25, x26, [sp, #64]
   3d748:	ldp	x27, x28, [sp, #80]
   3d74c:	ldp	x29, x30, [sp], #480
   3d750:	ret
   3d754:	mov	x0, x19
   3d758:	bl	35170 <aarch64_num_of_operands@plt>
   3d75c:	cbnz	w0, 3d770 <extract_fields@@Base+0x12d0>
   3d760:	ldr	w1, [x19, #8]
   3d764:	ldr	w0, [x20]
   3d768:	cmp	w1, w0
   3d76c:	b.eq	3dec4 <extract_fields@@Base+0x1a24>  // b.none
   3d770:	ldr	x0, [x19, #120]
   3d774:	mov	x2, #0x168                 	// #360
   3d778:	tbz	w0, #20, 3d88c <extract_fields@@Base+0x13ec>
   3d77c:	mov	x1, x20
   3d780:	mov	x0, x22
   3d784:	bl	35050 <memcpy@plt>
   3d788:	ldr	w0, [x19, #20]
   3d78c:	cmp	w0, #0x2f
   3d790:	b.hi	3daa0 <extract_fields@@Base+0x1600>  // b.pmore
   3d794:	cmp	w0, #0x2d
   3d798:	b.hi	3dd40 <extract_fields@@Base+0x18a0>  // b.pmore
   3d79c:	cmp	w0, #0x28
   3d7a0:	b.hi	3da44 <extract_fields@@Base+0x15a4>  // b.pmore
   3d7a4:	cmp	w0, #0x26
   3d7a8:	b.hi	3dde8 <extract_fields@@Base+0x1948>  // b.pmore
   3d7ac:	b.eq	3dd98 <extract_fields@@Base+0x18f8>  // b.none
   3d7b0:	cmp	w0, #0x23
   3d7b4:	b.hi	3ddac <extract_fields@@Base+0x190c>  // b.pmore
   3d7b8:	b.ne	3d728 <extract_fields@@Base+0x1288>  // b.any
   3d7bc:	ldr	w0, [sp, #216]
   3d7c0:	cmp	w0, #0x1f
   3d7c4:	b.ne	3df70 <extract_fields@@Base+0x1ad0>  // b.any
   3d7c8:	ldp	x0, x1, [sp, #256]
   3d7cc:	stp	x0, x1, [sp, #200]
   3d7d0:	ldp	x4, x5, [sp, #272]
   3d7d4:	mov	w0, #0x48                  	// #72
   3d7d8:	mov	w1, #0x1                   	// #1
   3d7dc:	str	w0, [sp, #200]
   3d7e0:	ldp	x2, x3, [sp, #288]
   3d7e4:	str	w1, [sp, #208]
   3d7e8:	ldr	x0, [sp, #304]
   3d7ec:	stp	x4, x5, [sp, #216]
   3d7f0:	ldr	w1, [sp, #160]
   3d7f4:	stp	x2, x3, [sp, #232]
   3d7f8:	cmp	w1, #0x1f
   3d7fc:	str	x0, [sp, #248]
   3d800:	ldrb	w0, [sp, #148]
   3d804:	b.eq	3d840 <extract_fields@@Base+0x13a0>  // b.none
   3d808:	cmp	w0, #0x1
   3d80c:	mov	x2, #0x0                   	// #0
   3d810:	ldr	x28, [sp, #216]
   3d814:	cset	w1, eq  // eq = none
   3d818:	str	w1, [sp, #108]
   3d81c:	mov	x0, x28
   3d820:	bl	35a40 <aarch64_wide_constant_p@plt>
   3d824:	cbnz	w0, 3d728 <extract_fields@@Base+0x1288>
   3d828:	ldr	w1, [sp, #108]
   3d82c:	mvn	x0, x28
   3d830:	mov	x2, #0x0                   	// #0
   3d834:	bl	35a40 <aarch64_wide_constant_p@plt>
   3d838:	cbnz	w0, 3d728 <extract_fields@@Base+0x1288>
   3d83c:	nop
   3d840:	str	wzr, [sp, #256]
   3d844:	mov	x1, x19
   3d848:	mov	x0, x22
   3d84c:	bl	35410 <aarch64_replace_opcode@plt>
   3d850:	mov	x0, x22
   3d854:	mov	x1, #0x0                   	// #0
   3d858:	bl	354e0 <aarch64_match_operands_constraint@plt>
   3d85c:	cbz	w0, 3df28 <extract_fields@@Base+0x1a88>
   3d860:	mov	x1, x22
   3d864:	mov	x0, x20
   3d868:	mov	x2, #0x168                 	// #360
   3d86c:	bl	35050 <memcpy@plt>
   3d870:	ldp	x19, x20, [sp, #16]
   3d874:	ldp	x21, x22, [sp, #32]
   3d878:	ldp	x23, x24, [sp, #48]
   3d87c:	ldp	x25, x26, [sp, #64]
   3d880:	ldp	x27, x28, [sp, #80]
   3d884:	ldp	x29, x30, [sp], #480
   3d888:	ret
   3d88c:	ldr	w28, [x20]
   3d890:	mov	w1, #0x0                   	// #0
   3d894:	mov	x0, x22
   3d898:	bl	35470 <memset@plt>
   3d89c:	ldp	w0, w1, [x19, #8]
   3d8a0:	eor	w0, w28, w0
   3d8a4:	tst	w0, w1
   3d8a8:	b.ne	3d728 <extract_fields@@Base+0x1288>  // b.any
   3d8ac:	ldr	w0, [x19, #32]
   3d8b0:	str	w28, [sp, #120]
   3d8b4:	str	x19, [sp, #128]
   3d8b8:	cbz	w0, 3d924 <extract_fields@@Base+0x1484>
   3d8bc:	ldr	w1, [x19, #36]
   3d8c0:	str	w0, [sp, #144]
   3d8c4:	cbz	w1, 3d924 <extract_fields@@Base+0x1484>
   3d8c8:	ldr	w0, [x19, #40]
   3d8cc:	mov	w2, #0x1                   	// #1
   3d8d0:	str	w1, [sp, #200]
   3d8d4:	str	w2, [sp, #208]
   3d8d8:	cbz	w0, 3d924 <extract_fields@@Base+0x1484>
   3d8dc:	ldr	w1, [x19, #44]
   3d8e0:	mov	w2, #0x2                   	// #2
   3d8e4:	str	w0, [sp, #256]
   3d8e8:	str	w2, [sp, #264]
   3d8ec:	cbz	w1, 3d924 <extract_fields@@Base+0x1484>
   3d8f0:	ldr	w0, [x19, #48]
   3d8f4:	mov	w2, #0x3                   	// #3
   3d8f8:	str	w1, [sp, #312]
   3d8fc:	str	w2, [sp, #320]
   3d900:	cbz	w0, 3d924 <extract_fields@@Base+0x1484>
   3d904:	ldr	w1, [x19, #52]
   3d908:	mov	w2, #0x4                   	// #4
   3d90c:	str	w0, [sp, #368]
   3d910:	str	w2, [sp, #376]
   3d914:	cbz	w1, 3d924 <extract_fields@@Base+0x1484>
   3d918:	mov	w0, #0x5                   	// #5
   3d91c:	str	w1, [sp, #424]
   3d920:	str	w0, [sp, #432]
   3d924:	ldr	x0, [x19, #120]
   3d928:	tst	x0, x25
   3d92c:	b.eq	3d93c <extract_fields@@Base+0x149c>  // b.none
   3d930:	mov	x0, x22
   3d934:	bl	3c6a8 <extract_fields@@Base+0x208>
   3d938:	cbz	w0, 3d728 <extract_fields@@Base+0x1288>
   3d93c:	mov	x0, x22
   3d940:	bl	3d2c0 <extract_fields@@Base+0xe20>
   3d944:	cbz	w0, 3d728 <extract_fields@@Base+0x1288>
   3d948:	ldr	w0, [x19, #32]
   3d94c:	cbz	w0, 3da04 <extract_fields@@Base+0x1564>
   3d950:	ubfiz	x1, x0, #1, #32
   3d954:	add	x0, x1, w0, uxtw
   3d958:	add	x0, x26, x0, lsl #4
   3d95c:	ldr	w1, [x0, #16]
   3d960:	tbnz	w1, #1, 3dc28 <extract_fields@@Base+0x1788>
   3d964:	ldr	w0, [x19, #36]
   3d968:	cbz	w0, 3da04 <extract_fields@@Base+0x1564>
   3d96c:	ldr	x2, [x24, #4032]
   3d970:	ubfiz	x1, x0, #1, #32
   3d974:	add	x1, x1, w0, uxtw
   3d978:	add	x0, x2, x1, lsl #4
   3d97c:	ldr	w1, [x0, #16]
   3d980:	tbnz	w1, #1, 3dc44 <extract_fields@@Base+0x17a4>
   3d984:	ldr	w0, [x19, #40]
   3d988:	cbz	w0, 3da04 <extract_fields@@Base+0x1564>
   3d98c:	ldr	x2, [x24, #4032]
   3d990:	ubfiz	x1, x0, #1, #32
   3d994:	add	x1, x1, w0, uxtw
   3d998:	add	x0, x2, x1, lsl #4
   3d99c:	ldr	w1, [x0, #16]
   3d9a0:	tbnz	w1, #1, 3dc60 <extract_fields@@Base+0x17c0>
   3d9a4:	ldr	w0, [x19, #44]
   3d9a8:	cbz	w0, 3da04 <extract_fields@@Base+0x1564>
   3d9ac:	ldr	x2, [x24, #4032]
   3d9b0:	ubfiz	x1, x0, #1, #32
   3d9b4:	add	x1, x1, w0, uxtw
   3d9b8:	add	x0, x2, x1, lsl #4
   3d9bc:	ldr	w1, [x0, #16]
   3d9c0:	tbnz	w1, #1, 3dc7c <extract_fields@@Base+0x17dc>
   3d9c4:	ldr	w0, [x19, #48]
   3d9c8:	cbz	w0, 3da04 <extract_fields@@Base+0x1564>
   3d9cc:	ldr	x2, [x24, #4032]
   3d9d0:	ubfiz	x1, x0, #1, #32
   3d9d4:	add	x1, x1, w0, uxtw
   3d9d8:	add	x0, x2, x1, lsl #4
   3d9dc:	ldr	w1, [x0, #16]
   3d9e0:	tbnz	w1, #1, 3dc98 <extract_fields@@Base+0x17f8>
   3d9e4:	ldr	w0, [x19, #52]
   3d9e8:	cbz	w0, 3da04 <extract_fields@@Base+0x1564>
   3d9ec:	ldr	x2, [x24, #4032]
   3d9f0:	ubfiz	x1, x0, #1, #32
   3d9f4:	add	x1, x1, w0, uxtw
   3d9f8:	add	x0, x2, x1, lsl #4
   3d9fc:	ldr	w1, [x0, #16]
   3da00:	tbnz	w1, #1, 3dcb4 <extract_fields@@Base+0x1814>
   3da04:	ldr	x6, [x19, #136]
   3da08:	cbz	x6, 3da2c <extract_fields@@Base+0x158c>
   3da0c:	mov	w1, w28
   3da10:	mov	x4, x23
   3da14:	mov	x0, x22
   3da18:	mov	x5, #0x0                   	// #0
   3da1c:	mov	w3, #0x0                   	// #0
   3da20:	mov	x2, #0x0                   	// #0
   3da24:	blr	x6
   3da28:	cbnz	w0, 3d728 <extract_fields@@Base+0x1288>
   3da2c:	mov	x0, x22
   3da30:	mov	x1, #0x0                   	// #0
   3da34:	bl	354e0 <aarch64_match_operands_constraint@plt>
   3da38:	cmp	w0, #0x1
   3da3c:	b.ne	3d728 <extract_fields@@Base+0x1288>  // b.any
   3da40:	b	3d860 <extract_fields@@Base+0x13c0>
   3da44:	cmp	w0, #0x29
   3da48:	b.eq	3de10 <extract_fields@@Base+0x1970>  // b.none
   3da4c:	sub	w0, w0, #0x2b
   3da50:	cmp	w0, #0x2
   3da54:	b.hi	3d728 <extract_fields@@Base+0x1288>  // b.pmore
   3da58:	ldr	x2, [sp, #272]
   3da5c:	ldr	x1, [sp, #328]
   3da60:	cmp	x2, x1
   3da64:	b.gt	3d728 <extract_fields@@Base+0x1288>
   3da68:	add	x1, x1, #0x1
   3da6c:	ldr	x0, [sp, #128]
   3da70:	sub	x1, x1, x2
   3da74:	str	x1, [sp, #328]
   3da78:	bl	35170 <aarch64_num_of_operands@plt>
   3da7c:	cmp	w0, #0x2
   3da80:	b.le	3dc24 <extract_fields@@Base+0x1784>
   3da84:	ldr	x0, [sp, #128]
   3da88:	strb	wzr, [sp, #260]
   3da8c:	bl	35170 <aarch64_num_of_operands@plt>
   3da90:	cmp	w0, #0x3
   3da94:	b.le	3dc24 <extract_fields@@Base+0x1784>
   3da98:	strb	wzr, [sp, #316]
   3da9c:	b	3d844 <extract_fields@@Base+0x13a4>
   3daa0:	cmp	w0, #0x39
   3daa4:	b.hi	3db2c <extract_fields@@Base+0x168c>  // b.pmore
   3daa8:	cmp	w0, #0x37
   3daac:	b.hi	3dcd0 <extract_fields@@Base+0x1830>  // b.pmore
   3dab0:	cmp	w0, #0x31
   3dab4:	b.eq	3dd40 <extract_fields@@Base+0x18a0>  // b.none
   3dab8:	b.ls	3db4c <extract_fields@@Base+0x16ac>  // b.plast
   3dabc:	sub	w0, w0, #0x35
   3dac0:	cmp	w0, #0x2
   3dac4:	b.hi	3d728 <extract_fields@@Base+0x1288>  // b.pmore
   3dac8:	ldr	w1, [sp, #216]
   3dacc:	ldr	w0, [sp, #272]
   3dad0:	cmp	w1, w0
   3dad4:	b.ne	3d728 <extract_fields@@Base+0x1288>  // b.any
   3dad8:	ldr	x0, [sp, #328]
   3dadc:	ldr	w1, [x0, #32]
   3dae0:	and	w1, w1, #0xe
   3dae4:	cmp	w1, #0xe
   3dae8:	b.eq	3d728 <extract_fields@@Base+0x1288>  // b.none
   3daec:	add	x1, sp, #0x210
   3daf0:	ldp	x2, x3, [x1, #-216]
   3daf4:	stp	x2, x3, [sp, #256]
   3daf8:	add	x2, sp, #0x210
   3dafc:	ldp	x4, x5, [x1, #-200]
   3db00:	mov	w1, #0x2                   	// #2
   3db04:	ldp	x2, x3, [x2, #-184]
   3db08:	str	w1, [sp, #264]
   3db0c:	ldr	x1, [sp, #360]
   3db10:	stp	x4, x5, [sp, #272]
   3db14:	stp	x2, x3, [sp, #288]
   3db18:	str	x1, [sp, #304]
   3db1c:	bl	35870 <get_inverted_cond@plt>
   3db20:	str	x0, [sp, #272]
   3db24:	str	wzr, [sp, #312]
   3db28:	b	3d844 <extract_fields@@Base+0x13a4>
   3db2c:	cmp	w0, #0x40
   3db30:	b.eq	3de54 <extract_fields@@Base+0x19b4>  // b.none
   3db34:	sub	w0, w0, #0x41
   3db38:	cmp	w0, #0x3
   3db3c:	b.hi	3d728 <extract_fields@@Base+0x1288>  // b.pmore
   3db40:	ldr	x0, [sp, #272]
   3db44:	cbnz	x0, 3d728 <extract_fields@@Base+0x1288>
   3db48:	b	3d840 <extract_fields@@Base+0x13a0>
   3db4c:	cmp	w0, #0x30
   3db50:	b.ne	3d728 <extract_fields@@Base+0x1288>  // b.any
   3db54:	ldr	w0, [sp, #216]
   3db58:	cmp	w0, #0x1f
   3db5c:	b.ne	3df04 <extract_fields@@Base+0x1a64>  // b.any
   3db60:	ldrb	w1, [sp, #260]
   3db64:	mov	x0, #0x1f                  	// #31
   3db68:	ldr	x4, [sp, #272]
   3db6c:	cmp	w1, #0x1d
   3db70:	ldr	x3, [sp, #328]
   3db74:	mov	x2, #0x3f                  	// #63
   3db78:	mov	x1, #0x40                  	// #64
   3db7c:	csel	x2, x0, x2, eq  // eq = none
   3db80:	mov	x0, #0x20                  	// #32
   3db84:	csel	x1, x0, x1, eq  // eq = none
   3db88:	cmp	x4, x3
   3db8c:	b.le	3d728 <extract_fields@@Base+0x1288>
   3db90:	sub	x1, x1, x4
   3db94:	mov	w6, #0x1                   	// #1
   3db98:	ldp	x4, x5, [sp, #256]
   3db9c:	and	x1, x1, x2
   3dba0:	add	x2, sp, #0x210
   3dba4:	stp	x4, x5, [sp, #200]
   3dba8:	add	x3, x3, #0x1
   3dbac:	ldp	x4, x5, [sp, #272]
   3dbb0:	stp	x4, x5, [sp, #216]
   3dbb4:	ldp	x4, x5, [x2, #-216]
   3dbb8:	stp	x4, x5, [sp, #256]
   3dbbc:	ldp	x4, x5, [x2, #-200]
   3dbc0:	str	x1, [sp, #216]
   3dbc4:	add	x1, sp, #0x210
   3dbc8:	str	w6, [sp, #208]
   3dbcc:	stp	x4, x5, [sp, #272]
   3dbd0:	mov	w2, #0x2                   	// #2
   3dbd4:	ldp	x6, x7, [x1, #-184]
   3dbd8:	str	w2, [sp, #264]
   3dbdc:	ldp	x4, x5, [sp, #288]
   3dbe0:	stp	x4, x5, [sp, #232]
   3dbe4:	ldr	x0, [sp, #128]
   3dbe8:	str	x3, [sp, #272]
   3dbec:	ldr	x8, [sp, #304]
   3dbf0:	str	x8, [sp, #248]
   3dbf4:	ldr	x1, [sp, #360]
   3dbf8:	stp	x6, x7, [sp, #288]
   3dbfc:	str	x1, [sp, #304]
   3dc00:	str	wzr, [sp, #312]
   3dc04:	bl	35170 <aarch64_num_of_operands@plt>
   3dc08:	cmp	w0, #0x1
   3dc0c:	b.le	3dc24 <extract_fields@@Base+0x1784>
   3dc10:	ldr	x0, [sp, #128]
   3dc14:	strb	wzr, [sp, #204]
   3dc18:	bl	35170 <aarch64_num_of_operands@plt>
   3dc1c:	cmp	w0, #0x2
   3dc20:	b.gt	3da84 <extract_fields@@Base+0x15e4>
   3dc24:	bl	3c3d0 <aarch64_opcode_encode@@Base+0x2078>
   3dc28:	mov	x4, x23
   3dc2c:	mov	x3, x22
   3dc30:	mov	w2, w28
   3dc34:	mov	x1, x27
   3dc38:	bl	355f0 <aarch64_extract_operand@plt>
   3dc3c:	cbnz	w0, 3d964 <extract_fields@@Base+0x14c4>
   3dc40:	b	3d728 <extract_fields@@Base+0x1288>
   3dc44:	mov	x4, x23
   3dc48:	mov	x3, x22
   3dc4c:	mov	w2, w28
   3dc50:	add	x1, x22, #0x50
   3dc54:	bl	355f0 <aarch64_extract_operand@plt>
   3dc58:	cbnz	w0, 3d984 <extract_fields@@Base+0x14e4>
   3dc5c:	b	3d728 <extract_fields@@Base+0x1288>
   3dc60:	mov	x4, x23
   3dc64:	mov	x3, x22
   3dc68:	mov	w2, w28
   3dc6c:	add	x1, x22, #0x88
   3dc70:	bl	355f0 <aarch64_extract_operand@plt>
   3dc74:	cbnz	w0, 3d9a4 <extract_fields@@Base+0x1504>
   3dc78:	b	3d728 <extract_fields@@Base+0x1288>
   3dc7c:	mov	x4, x23
   3dc80:	mov	x3, x22
   3dc84:	mov	w2, w28
   3dc88:	add	x1, x22, #0xc0
   3dc8c:	bl	355f0 <aarch64_extract_operand@plt>
   3dc90:	cbnz	w0, 3d9c4 <extract_fields@@Base+0x1524>
   3dc94:	b	3d728 <extract_fields@@Base+0x1288>
   3dc98:	mov	x4, x23
   3dc9c:	mov	x3, x22
   3dca0:	mov	w2, w28
   3dca4:	add	x1, x22, #0xf8
   3dca8:	bl	355f0 <aarch64_extract_operand@plt>
   3dcac:	cbnz	w0, 3d9e4 <extract_fields@@Base+0x1544>
   3dcb0:	b	3d728 <extract_fields@@Base+0x1288>
   3dcb4:	mov	x4, x23
   3dcb8:	mov	x3, x22
   3dcbc:	mov	w2, w28
   3dcc0:	add	x1, x22, #0x130
   3dcc4:	bl	355f0 <aarch64_extract_operand@plt>
   3dcc8:	cbnz	w0, 3da04 <extract_fields@@Base+0x1564>
   3dccc:	b	3d728 <extract_fields@@Base+0x1288>
   3dcd0:	ldr	w0, [sp, #216]
   3dcd4:	cmp	w0, #0x1f
   3dcd8:	b.ne	3d728 <extract_fields@@Base+0x1288>  // b.any
   3dcdc:	ldr	w0, [sp, #272]
   3dce0:	cmp	w0, #0x1f
   3dce4:	b.ne	3d728 <extract_fields@@Base+0x1288>  // b.any
   3dce8:	ldr	x0, [sp, #328]
   3dcec:	ldr	w1, [x0, #32]
   3dcf0:	and	w1, w1, #0xe
   3dcf4:	cmp	w1, #0xe
   3dcf8:	b.eq	3d728 <extract_fields@@Base+0x1288>  // b.none
   3dcfc:	add	x1, sp, #0x210
   3dd00:	ldp	x2, x3, [x1, #-216]
   3dd04:	stp	x2, x3, [sp, #200]
   3dd08:	add	x2, sp, #0x210
   3dd0c:	ldp	x4, x5, [x1, #-200]
   3dd10:	mov	w1, #0x1                   	// #1
   3dd14:	ldp	x2, x3, [x2, #-184]
   3dd18:	str	w1, [sp, #208]
   3dd1c:	ldr	x1, [sp, #360]
   3dd20:	stp	x4, x5, [sp, #216]
   3dd24:	stp	x2, x3, [sp, #232]
   3dd28:	str	x1, [sp, #248]
   3dd2c:	bl	35870 <get_inverted_cond@plt>
   3dd30:	str	x0, [sp, #216]
   3dd34:	str	wzr, [sp, #256]
   3dd38:	str	wzr, [sp, #312]
   3dd3c:	b	3d844 <extract_fields@@Base+0x13a4>
   3dd40:	ldrb	w1, [sp, #260]
   3dd44:	mov	x0, #0x1f                  	// #31
   3dd48:	ldr	x4, [sp, #272]
   3dd4c:	cmp	w1, #0x1d
   3dd50:	ldr	x3, [sp, #328]
   3dd54:	mov	x2, #0x3f                  	// #63
   3dd58:	mov	x1, #0x40                  	// #64
   3dd5c:	csel	x2, x0, x2, eq  // eq = none
   3dd60:	mov	x0, #0x20                  	// #32
   3dd64:	csel	x1, x0, x1, eq  // eq = none
   3dd68:	cmp	x4, x3
   3dd6c:	b.le	3d728 <extract_fields@@Base+0x1288>
   3dd70:	sub	x1, x1, x4
   3dd74:	add	x3, x3, #0x1
   3dd78:	ldr	x0, [sp, #128]
   3dd7c:	and	x1, x1, x2
   3dd80:	str	x1, [sp, #272]
   3dd84:	str	x3, [sp, #328]
   3dd88:	bl	35170 <aarch64_num_of_operands@plt>
   3dd8c:	cmp	w0, #0x2
   3dd90:	b.gt	3da84 <extract_fields@@Base+0x15e4>
   3dd94:	bl	3c3d0 <aarch64_opcode_encode@@Base+0x2078>
   3dd98:	ldr	w1, [sp, #216]
   3dd9c:	ldr	w0, [sp, #272]
   3dda0:	cmp	w1, w0
   3dda4:	b.ne	3d728 <extract_fields@@Base+0x1288>  // b.any
   3dda8:	b	3d840 <extract_fields@@Base+0x13a0>
   3ddac:	ldr	x0, [sp, #216]
   3ddb0:	ldr	x28, [sp, #240]
   3ddb4:	cbnz	x0, 3ddbc <extract_fields@@Base+0x191c>
   3ddb8:	cbnz	x28, 3d728 <extract_fields@@Base+0x1288>
   3ddbc:	ldr	x1, [sp, #128]
   3ddc0:	mov	w2, #0x48                  	// #72
   3ddc4:	lsl	x28, x0, x28
   3ddc8:	ldr	w0, [x1, #20]
   3ddcc:	str	w2, [sp, #200]
   3ddd0:	str	wzr, [sp, #232]
   3ddd4:	cmp	w0, #0x20
   3ddd8:	b.eq	3dee0 <extract_fields@@Base+0x1a40>  // b.none
   3dddc:	str	x28, [sp, #216]
   3dde0:	str	xzr, [sp, #240]
   3dde4:	b	3d844 <extract_fields@@Base+0x13a4>
   3dde8:	ldrb	w2, [sp, #260]
   3ddec:	mov	x0, #0x1f                  	// #31
   3ddf0:	ldr	x1, [sp, #328]
   3ddf4:	cmp	w2, #0x1d
   3ddf8:	mov	x2, #0x3f                  	// #63
   3ddfc:	csel	x0, x0, x2, eq  // eq = none
   3de00:	cmp	x1, x0
   3de04:	b.ne	3d728 <extract_fields@@Base+0x1288>  // b.any
   3de08:	str	wzr, [sp, #312]
   3de0c:	b	3d844 <extract_fields@@Base+0x13a4>
   3de10:	ldrb	w1, [sp, #260]
   3de14:	mov	x0, #0x1f                  	// #31
   3de18:	ldr	x2, [sp, #272]
   3de1c:	cmp	w1, #0x1d
   3de20:	ldr	x1, [sp, #328]
   3de24:	mov	x3, #0x3f                  	// #63
   3de28:	csel	x0, x0, x3, eq  // eq = none
   3de2c:	cmp	x2, #0x0
   3de30:	ccmp	x1, x0, #0x0, eq  // eq = none
   3de34:	b.eq	3de44 <extract_fields@@Base+0x19a4>  // b.none
   3de38:	add	x3, x1, #0x1
   3de3c:	cmp	x2, x3
   3de40:	b.ne	3d728 <extract_fields@@Base+0x1288>  // b.any
   3de44:	sub	x0, x0, x1
   3de48:	str	x0, [sp, #272]
   3de4c:	str	wzr, [sp, #312]
   3de50:	b	3d844 <extract_fields@@Base+0x13a4>
   3de54:	ldr	w1, [sp, #216]
   3de58:	ldr	w0, [sp, #272]
   3de5c:	cmp	w1, w0
   3de60:	b.ne	3d728 <extract_fields@@Base+0x1288>  // b.any
   3de64:	add	x0, sp, #0x210
   3de68:	mov	w2, #0x2                   	// #2
   3de6c:	ldp	x0, x1, [x0, #-216]
   3de70:	stp	x0, x1, [sp, #256]
   3de74:	add	x0, sp, #0x210
   3de78:	ldp	x0, x1, [x0, #-200]
   3de7c:	str	w2, [sp, #264]
   3de80:	add	x2, sp, #0x210
   3de84:	ldp	x2, x3, [x2, #-184]
   3de88:	stp	x0, x1, [sp, #272]
   3de8c:	ldr	x0, [sp, #360]
   3de90:	stp	x2, x3, [sp, #288]
   3de94:	str	x0, [sp, #304]
   3de98:	str	wzr, [sp, #312]
   3de9c:	b	3d844 <extract_fields@@Base+0x13a4>
   3dea0:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3dea4:	add	x3, x3, #0x710
   3dea8:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3deac:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   3deb0:	add	x3, x3, #0x170
   3deb4:	add	x1, x1, #0xfd0
   3deb8:	add	x0, x0, #0x1f0
   3debc:	mov	w2, #0xa6b                 	// #2667
   3dec0:	bl	35ac0 <__assert_fail@plt>
   3dec4:	mov	x1, x19
   3dec8:	mov	x0, x20
   3decc:	bl	35410 <aarch64_replace_opcode@plt>
   3ded0:	ldp	x23, x24, [sp, #48]
   3ded4:	ldp	x25, x26, [sp, #64]
   3ded8:	ldp	x27, x28, [sp, #80]
   3dedc:	b	3d6b4 <extract_fields@@Base+0x1214>
   3dee0:	ldrb	w1, [sp, #148]
   3dee4:	mvn	x28, x28
   3dee8:	mov	x0, x28
   3deec:	mov	x2, #0x0                   	// #0
   3def0:	cmp	w1, #0x1
   3def4:	cset	w1, eq  // eq = none
   3def8:	bl	35a40 <aarch64_wide_constant_p@plt>
   3defc:	cbz	w0, 3dddc <extract_fields@@Base+0x193c>
   3df00:	b	3d728 <extract_fields@@Base+0x1288>
   3df04:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3df08:	add	x3, x3, #0x710
   3df0c:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3df10:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   3df14:	add	x3, x3, #0x198
   3df18:	add	x1, x1, #0xfd0
   3df1c:	add	x0, x0, #0x228
   3df20:	mov	w2, #0x941                 	// #2369
   3df24:	bl	35ac0 <__assert_fail@plt>
   3df28:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3df2c:	add	x3, x3, #0x710
   3df30:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3df34:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   3df38:	add	x3, x3, #0x170
   3df3c:	add	x1, x1, #0xfd0
   3df40:	add	x0, x0, #0x250
   3df44:	mov	w2, #0xa8c                 	// #2700
   3df48:	bl	35ac0 <__assert_fail@plt>
   3df4c:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3df50:	add	x3, x3, #0x710
   3df54:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3df58:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   3df5c:	add	x3, x3, #0x170
   3df60:	add	x1, x1, #0xfd0
   3df64:	add	x0, x0, #0x1e8
   3df68:	mov	w2, #0xa58                 	// #2648
   3df6c:	bl	35ac0 <__assert_fail@plt>
   3df70:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3df74:	add	x3, x3, #0x710
   3df78:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3df7c:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   3df80:	add	x3, x3, #0x1b0
   3df84:	add	x1, x1, #0xfd0
   3df88:	add	x0, x0, #0x228
   3df8c:	mov	w2, #0x9d0                 	// #2512
   3df90:	bl	35ac0 <__assert_fail@plt>
   3df94:	nop

000000000003df98 <aarch64_ext_regno@@Base>:
   3df98:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   3df9c:	ldr	w5, [x0, #20]
   3dfa0:	mov	w3, #0xffffffff            	// #-1
   3dfa4:	mov	w0, #0x1                   	// #1
   3dfa8:	ldr	x4, [x4, #3944]
   3dfac:	lsl	x5, x5, #3
   3dfb0:	add	x6, x5, x4
   3dfb4:	ldr	w5, [x5, x4]
   3dfb8:	ldr	w4, [x6, #4]
   3dfbc:	lsr	w2, w2, w5
   3dfc0:	lsl	w3, w3, w4
   3dfc4:	bic	w3, w2, w3
   3dfc8:	str	w3, [x1, #16]
   3dfcc:	ret

000000000003dfd0 <aarch64_ext_regno_pair@@Base>:
   3dfd0:	ldr	w2, [x1, #8]
   3dfd4:	and	w0, w2, #0xfffffffd
   3dfd8:	cmp	w0, #0x1
   3dfdc:	b.ne	3e000 <aarch64_ext_regno_pair@@Base+0x30>  // b.any
   3dfe0:	sub	w2, w2, #0x1
   3dfe4:	sbfiz	x4, x2, #3, #32
   3dfe8:	sub	x2, x4, w2, sxtw
   3dfec:	add	x2, x3, x2, lsl #3
   3dff0:	ldr	w2, [x2, #40]
   3dff4:	add	w2, w2, #0x1
   3dff8:	str	w2, [x1, #16]
   3dffc:	ret
   3e000:	stp	x29, x30, [sp, #-16]!
   3e004:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3e008:	add	x3, x3, #0x710
   3e00c:	mov	x29, sp
   3e010:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3e014:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   3e018:	add	x3, x3, #0x1d0
   3e01c:	add	x1, x1, #0xfd0
   3e020:	add	x0, x0, #0x280
   3e024:	mov	w2, #0x10e                 	// #270
   3e028:	bl	35ac0 <__assert_fail@plt>
   3e02c:	nop

000000000003e030 <aarch64_ext_regrt_sysins@@Base>:
   3e030:	stp	x29, x30, [sp, #-48]!
   3e034:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   3e038:	mov	x29, sp
   3e03c:	stp	x19, x20, [sp, #16]
   3e040:	mov	x19, x1
   3e044:	ldr	w1, [x0, #20]
   3e048:	ldr	x4, [x4, #3944]
   3e04c:	mov	x20, x3
   3e050:	lsl	x1, x1, #3
   3e054:	mov	w0, #0xffffffff            	// #-1
   3e058:	add	x5, x1, x4
   3e05c:	ldr	w3, [x1, x4]
   3e060:	ldr	w1, [x5, #4]
   3e064:	str	x21, [sp, #32]
   3e068:	lsr	w2, w2, w3
   3e06c:	ldr	w21, [x19, #8]
   3e070:	lsl	w0, w0, w1
   3e074:	bic	w0, w2, w0
   3e078:	str	w0, [x19, #16]
   3e07c:	cmp	w21, #0x1
   3e080:	b.ne	3e0c0 <aarch64_ext_regrt_sysins@@Base+0x90>  // b.any
   3e084:	ldr	w0, [x20, #24]
   3e088:	bl	35710 <aarch64_get_operand_class@plt>
   3e08c:	cmp	w0, #0xc
   3e090:	b.ne	3e0c0 <aarch64_ext_regrt_sysins@@Base+0x90>  // b.any
   3e094:	ldr	x0, [x20, #40]
   3e098:	bl	35a00 <aarch64_sys_ins_reg_has_xt@plt>
   3e09c:	mov	w2, w0
   3e0a0:	ldrb	w1, [x19, #48]
   3e0a4:	mov	w0, w21
   3e0a8:	ldr	x21, [sp, #32]
   3e0ac:	bfi	w1, w2, #1, #1
   3e0b0:	strb	w1, [x19, #48]
   3e0b4:	ldp	x19, x20, [sp, #16]
   3e0b8:	ldp	x29, x30, [sp], #48
   3e0bc:	ret
   3e0c0:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3e0c4:	add	x3, x3, #0x710
   3e0c8:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3e0cc:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   3e0d0:	add	x3, x3, #0x1e8
   3e0d4:	add	x1, x1, #0xfd0
   3e0d8:	add	x0, x0, #0x2a0
   3e0dc:	mov	w2, #0x11c                 	// #284
   3e0e0:	bl	35ac0 <__assert_fail@plt>
   3e0e4:	nop

000000000003e0e8 <aarch64_ext_reglane@@Base>:
   3e0e8:	stp	x29, x30, [sp, #-96]!
   3e0ec:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   3e0f0:	mov	x29, sp
   3e0f4:	ldr	w0, [x0, #20]
   3e0f8:	stp	x19, x20, [sp, #16]
   3e0fc:	mov	x19, x1
   3e100:	ldr	x20, [x5, #3944]
   3e104:	lsl	x0, x0, #3
   3e108:	ldr	x1, [x3, #8]
   3e10c:	stp	x21, x22, [sp, #32]
   3e110:	mov	w21, w2
   3e114:	add	x2, x0, x20
   3e118:	stp	x23, x24, [sp, #48]
   3e11c:	ldr	w4, [x1, #12]
   3e120:	mov	x23, x3
   3e124:	ldr	w3, [x0, x20]
   3e128:	ldr	w0, [x2, #4]
   3e12c:	bic	w4, w21, w4
   3e130:	ldr	w2, [x1, #16]
   3e134:	mov	w24, #0xffffffff            	// #-1
   3e138:	lsr	w4, w4, w3
   3e13c:	lsl	w0, w24, w0
   3e140:	bic	w0, w4, w0
   3e144:	str	w0, [x19, #16]
   3e148:	cmp	w2, #0x17
   3e14c:	ccmp	w2, #0xa, #0x4, ne  // ne = any
   3e150:	b.ne	3e1c4 <aarch64_ext_reglane@@Base+0xdc>  // b.any
   3e154:	ldr	w0, [x19]
   3e158:	cmp	w0, #0x20
   3e15c:	b.eq	3e250 <aarch64_ext_reglane@@Base+0x168>  // b.none
   3e160:	ldr	x5, [x5, #3944]
   3e164:	mov	w20, #0xffffffff            	// #-1
   3e168:	mov	w22, #0x0                   	// #0
   3e16c:	ldr	w2, [x5, #344]
   3e170:	ldr	w0, [x5, #348]
   3e174:	lsr	w21, w21, w2
   3e178:	lsl	w20, w20, w0
   3e17c:	bic	w20, w21, w20
   3e180:	mov	w21, #0x5                   	// #5
   3e184:	tbnz	w20, #0, 3e218 <aarch64_ext_reglane@@Base+0x130>
   3e188:	lsr	w0, w20, #1
   3e18c:	tbnz	w20, #1, 3e208 <aarch64_ext_reglane@@Base+0x120>
   3e190:	lsr	w0, w20, #2
   3e194:	tbnz	w20, #2, 3e49c <aarch64_ext_reglane@@Base+0x3b4>
   3e198:	lsr	w20, w20, #3
   3e19c:	mov	w21, #0x2                   	// #2
   3e1a0:	mov	w22, #0x3                   	// #3
   3e1a4:	tbnz	w20, #0, 3e214 <aarch64_ext_reglane@@Base+0x12c>
   3e1a8:	mov	w22, #0x0                   	// #0
   3e1ac:	mov	w0, w22
   3e1b0:	ldp	x19, x20, [sp, #16]
   3e1b4:	ldp	x21, x22, [sp, #32]
   3e1b8:	ldp	x23, x24, [sp, #48]
   3e1bc:	ldp	x29, x30, [sp], #96
   3e1c0:	ret
   3e1c4:	cmp	w2, #0x5d
   3e1c8:	b.eq	3e334 <aarch64_ext_reglane@@Base+0x24c>  // b.none
   3e1cc:	cmp	w2, #0x5b
   3e1d0:	b.ne	3e2ec <aarch64_ext_reglane@@Base+0x204>  // b.any
   3e1d4:	ldr	w0, [x20, #996]
   3e1d8:	mov	w22, #0x1                   	// #1
   3e1dc:	ldr	w1, [x20, #992]
   3e1e0:	lsl	w24, w24, w0
   3e1e4:	mov	w0, w22
   3e1e8:	lsr	w21, w21, w1
   3e1ec:	bic	w21, w21, w24
   3e1f0:	str	x21, [x19, #24]
   3e1f4:	ldp	x19, x20, [sp, #16]
   3e1f8:	ldp	x21, x22, [sp, #32]
   3e1fc:	ldp	x23, x24, [sp, #48]
   3e200:	ldp	x29, x30, [sp], #96
   3e204:	ret
   3e208:	mov	w20, w0
   3e20c:	mov	w21, #0x0                   	// #0
   3e210:	mov	w22, #0x1                   	// #1
   3e214:	add	w21, w21, #0x6
   3e218:	mov	w0, w21
   3e21c:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3e220:	cmp	w22, w0
   3e224:	b.ne	3e4f0 <aarch64_ext_reglane@@Base+0x408>  // b.any
   3e228:	lsr	w20, w20, #1
   3e22c:	strb	w21, [x19, #4]
   3e230:	str	x20, [x19, #24]
   3e234:	mov	w22, #0x1                   	// #1
   3e238:	mov	w0, w22
   3e23c:	ldp	x19, x20, [sp, #16]
   3e240:	ldp	x21, x22, [sp, #32]
   3e244:	ldp	x23, x24, [sp, #48]
   3e248:	ldp	x29, x30, [sp], #96
   3e24c:	ret
   3e250:	ldr	w0, [x1, #32]
   3e254:	cmp	w0, #0x1f
   3e258:	b.ne	3e160 <aarch64_ext_reglane@@Base+0x78>  // b.any
   3e25c:	ldr	w22, [x19, #8]
   3e260:	cmp	w22, #0x1
   3e264:	b.ne	3e520 <aarch64_ext_reglane@@Base+0x438>  // b.any
   3e268:	ldrb	w0, [x23, #84]
   3e26c:	ldr	w2, [x20, #320]
   3e270:	ldr	w20, [x20, #324]
   3e274:	lsr	w21, w21, w2
   3e278:	lsl	w20, w24, w20
   3e27c:	bic	w20, w21, w20
   3e280:	cbnz	w0, 3e4e8 <aarch64_ext_reglane@@Base+0x400>
   3e284:	add	x21, sp, #0x50
   3e288:	mov	w2, w22
   3e28c:	mov	x3, x21
   3e290:	add	x1, x1, #0x38
   3e294:	mov	x0, x23
   3e298:	bl	35360 <aarch64_find_best_match@plt>
   3e29c:	ldrb	w1, [sp, #81]
   3e2a0:	cmp	w0, #0x0
   3e2a4:	csel	w0, w1, wzr, ne  // ne = any
   3e2a8:	strb	w0, [x19, #4]
   3e2ac:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3e2b0:	and	w0, w0, #0xff
   3e2b4:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   3e2b8:	add	x1, x1, #0x710
   3e2bc:	add	x2, x1, #0x200
   3e2c0:	cmp	w0, #0x10
   3e2c4:	ldp	x2, x3, [x2, #32]
   3e2c8:	stp	x2, x3, [sp, #80]
   3e2cc:	b.hi	3e500 <aarch64_ext_reglane@@Base+0x418>  // b.pmore
   3e2d0:	sub	w0, w0, #0x1
   3e2d4:	ldrb	w0, [x21, w0, uxtw]
   3e2d8:	cmp	w0, #0xff
   3e2dc:	b.eq	3e4f8 <aarch64_ext_reglane@@Base+0x410>  // b.none
   3e2e0:	lsr	w20, w20, w0
   3e2e4:	str	x20, [x19, #24]
   3e2e8:	b	3e1ac <aarch64_ext_reglane@@Base+0xc4>
   3e2ec:	stp	x25, x26, [sp, #64]
   3e2f0:	ldr	w25, [x19, #8]
   3e2f4:	sbfiz	x0, x25, #3, #32
   3e2f8:	sub	x0, x0, w25, sxtw
   3e2fc:	add	x0, x23, x0, lsl #3
   3e300:	ldrb	w0, [x0, #28]
   3e304:	cbnz	w0, 3e4ec <aarch64_ext_reglane@@Base+0x404>
   3e308:	add	x26, sp, #0x50
   3e30c:	add	x1, x1, #0x38
   3e310:	mov	x3, x26
   3e314:	mov	w2, w25
   3e318:	mov	x0, x23
   3e31c:	bl	35360 <aarch64_find_best_match@plt>
   3e320:	mov	w22, w0
   3e324:	cbnz	w0, 3e3b4 <aarch64_ext_reglane@@Base+0x2cc>
   3e328:	strb	wzr, [x19, #4]
   3e32c:	ldp	x25, x26, [sp, #64]
   3e330:	b	3e1ac <aarch64_ext_reglane@@Base+0xc4>
   3e334:	ldr	w20, [x19, #8]
   3e338:	sbfiz	x0, x20, #3, #32
   3e33c:	sub	x0, x0, w20, sxtw
   3e340:	add	x0, x23, x0, lsl #3
   3e344:	ldrb	w0, [x0, #28]
   3e348:	cbnz	w0, 3e4e8 <aarch64_ext_reglane@@Base+0x400>
   3e34c:	add	x24, sp, #0x50
   3e350:	add	x1, x1, #0x38
   3e354:	mov	x0, x23
   3e358:	mov	x3, x24
   3e35c:	mov	w2, w20
   3e360:	bl	35360 <aarch64_find_best_match@plt>
   3e364:	mov	w22, w0
   3e368:	cbz	w0, 3e3e0 <aarch64_ext_reglane@@Base+0x2f8>
   3e36c:	ldrb	w0, [x24, w20, sxtw]
   3e370:	strb	w0, [x19, #4]
   3e374:	sub	w0, w0, #0xa
   3e378:	cmp	w0, #0x1
   3e37c:	b.hi	3e1a8 <aarch64_ext_reglane@@Base+0xc0>  // b.pmore
   3e380:	mov	w1, #0x0                   	// #0
   3e384:	mov	w0, w21
   3e388:	mov	w4, #0x3e                  	// #62
   3e38c:	mov	w3, #0x3d                  	// #61
   3e390:	mov	w2, #0x2                   	// #2
   3e394:	bl	35390 <extract_fields@plt>
   3e398:	ldr	w1, [x19, #16]
   3e39c:	mov	w0, w0
   3e3a0:	mov	w22, #0x1                   	// #1
   3e3a4:	str	x0, [x19, #24]
   3e3a8:	and	w1, w1, #0x1f
   3e3ac:	str	w1, [x19, #16]
   3e3b0:	b	3e1ac <aarch64_ext_reglane@@Base+0xc4>
   3e3b4:	ldrb	w0, [x26, w25, sxtw]
   3e3b8:	strb	w0, [x19, #4]
   3e3bc:	cmp	w0, #0x7
   3e3c0:	b.eq	3e484 <aarch64_ext_reglane@@Base+0x39c>  // b.none
   3e3c4:	cmp	w0, #0x8
   3e3c8:	b.eq	3e444 <aarch64_ext_reglane@@Base+0x35c>  // b.none
   3e3cc:	cmp	w0, #0x6
   3e3d0:	mov	w22, #0x0                   	// #0
   3e3d4:	b.eq	3e3e8 <aarch64_ext_reglane@@Base+0x300>  // b.none
   3e3d8:	ldp	x25, x26, [sp, #64]
   3e3dc:	b	3e1ac <aarch64_ext_reglane@@Base+0xc4>
   3e3e0:	strb	wzr, [x19, #4]
   3e3e4:	b	3e1ac <aarch64_ext_reglane@@Base+0xc4>
   3e3e8:	ldr	w0, [x19]
   3e3ec:	cmp	w0, #0x22
   3e3f0:	mov	w0, w21
   3e3f4:	b.eq	3e4b0 <aarch64_ext_reglane@@Base+0x3c8>  // b.none
   3e3f8:	mov	w4, #0x3e                  	// #62
   3e3fc:	mov	w3, #0x3d                  	// #61
   3e400:	mov	w2, #0x2                   	// #2
   3e404:	mov	w1, #0x0                   	// #0
   3e408:	bl	35390 <extract_fields@plt>
   3e40c:	mov	w21, w0
   3e410:	str	x21, [x19, #24]
   3e414:	ldr	x0, [x23, #8]
   3e418:	ldr	w0, [x0, #20]
   3e41c:	cmp	w0, #0x50
   3e420:	b.eq	3e48c <aarch64_ext_reglane@@Base+0x3a4>  // b.none
   3e424:	mov	w22, #0x1                   	// #1
   3e428:	mov	w0, w22
   3e42c:	ldp	x19, x20, [sp, #16]
   3e430:	ldp	x21, x22, [sp, #32]
   3e434:	ldp	x23, x24, [sp, #48]
   3e438:	ldp	x25, x26, [sp, #64]
   3e43c:	ldp	x29, x30, [sp], #96
   3e440:	ret
   3e444:	ldr	x0, [x23, #8]
   3e448:	ldr	w2, [x20, #488]
   3e44c:	ldr	w1, [x20, #492]
   3e450:	ldr	w0, [x0, #20]
   3e454:	lsr	w21, w21, w2
   3e458:	lsl	w24, w24, w1
   3e45c:	bic	w21, w21, w24
   3e460:	str	x21, [x19, #24]
   3e464:	cmp	w0, #0x50
   3e468:	b.ne	3e424 <aarch64_ext_reglane@@Base+0x33c>  // b.any
   3e46c:	tbnz	w21, #0, 3e4e0 <aarch64_ext_reglane@@Base+0x3f8>
   3e470:	asr	x21, x21, #1
   3e474:	mov	w22, #0x1                   	// #1
   3e478:	ldp	x25, x26, [sp, #64]
   3e47c:	str	x21, [x19, #24]
   3e480:	b	3e1ac <aarch64_ext_reglane@@Base+0xc4>
   3e484:	mov	w0, w21
   3e488:	b	3e3f8 <aarch64_ext_reglane@@Base+0x310>
   3e48c:	ldrb	w0, [x19, #4]
   3e490:	cmp	w0, #0x6
   3e494:	b.eq	3e424 <aarch64_ext_reglane@@Base+0x33c>  // b.none
   3e498:	b	3e46c <aarch64_ext_reglane@@Base+0x384>
   3e49c:	mov	w21, #0x1                   	// #1
   3e4a0:	mov	w20, w0
   3e4a4:	add	w21, w21, #0x6
   3e4a8:	mov	w22, #0x2                   	// #2
   3e4ac:	b	3e218 <aarch64_ext_reglane@@Base+0x130>
   3e4b0:	mov	w1, #0x0                   	// #0
   3e4b4:	mov	w5, #0x3f                  	// #63
   3e4b8:	mov	w4, #0x3e                  	// #62
   3e4bc:	mov	w3, #0x3d                  	// #61
   3e4c0:	mov	w2, #0x3                   	// #3
   3e4c4:	bl	35390 <extract_fields@plt>
   3e4c8:	ldr	w1, [x19, #16]
   3e4cc:	mov	w21, w0
   3e4d0:	str	x21, [x19, #24]
   3e4d4:	and	w1, w1, #0xf
   3e4d8:	str	w1, [x19, #16]
   3e4dc:	b	3e414 <aarch64_ext_reglane@@Base+0x32c>
   3e4e0:	ldp	x25, x26, [sp, #64]
   3e4e4:	b	3e1a8 <aarch64_ext_reglane@@Base+0xc0>
   3e4e8:	stp	x25, x26, [sp, #64]
   3e4ec:	bl	3c3a0 <aarch64_opcode_encode@@Base+0x2048>
   3e4f0:	stp	x25, x26, [sp, #64]
   3e4f4:	bl	3c310 <aarch64_opcode_encode@@Base+0x1fb8>
   3e4f8:	stp	x25, x26, [sp, #64]
   3e4fc:	bl	3c288 <aarch64_opcode_encode@@Base+0x1f30>
   3e500:	mov	x3, x1
   3e504:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   3e508:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3e50c:	add	x0, x0, #0x870
   3e510:	add	x1, x1, #0x610
   3e514:	mov	w2, #0x200                 	// #512
   3e518:	stp	x25, x26, [sp, #64]
   3e51c:	bl	35ac0 <__assert_fail@plt>
   3e520:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3e524:	add	x3, x3, #0x710
   3e528:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3e52c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3e530:	add	x3, x3, #0x208
   3e534:	add	x1, x1, #0xfd0
   3e538:	add	x0, x0, #0x720
   3e53c:	mov	w2, #0x13b                 	// #315
   3e540:	stp	x25, x26, [sp, #64]
   3e544:	bl	35ac0 <__assert_fail@plt>

000000000003e548 <aarch64_ext_reglist@@Base>:
   3e548:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   3e54c:	ldr	w6, [x0, #20]
   3e550:	mov	w3, #0xffffffff            	// #-1
   3e554:	mov	w0, #0x1                   	// #1
   3e558:	ldr	x5, [x5, #3944]
   3e55c:	lsl	x6, x6, #3
   3e560:	add	x8, x6, x5
   3e564:	ldp	w7, w4, [x5, #216]
   3e568:	ldr	w6, [x6, x5]
   3e56c:	ldr	w5, [x8, #4]
   3e570:	lsr	w7, w2, w7
   3e574:	lsl	w4, w3, w4
   3e578:	bic	w4, w7, w4
   3e57c:	add	w4, w4, w0
   3e580:	lsr	w2, w2, w6
   3e584:	lsl	w3, w3, w5
   3e588:	bic	w3, w2, w3
   3e58c:	bfi	w3, w4, #5, #27
   3e590:	strb	w3, [x1, #16]
   3e594:	ret

000000000003e598 <aarch64_ext_ldst_reglist@@Base>:
   3e598:	stp	x29, x30, [sp, #-192]!
   3e59c:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   3e5a0:	add	x0, x0, #0x710
   3e5a4:	mov	x29, sp
   3e5a8:	ldr	x3, [x3, #8]
   3e5ac:	add	x7, sp, #0x38
   3e5b0:	stp	x19, x20, [sp, #16]
   3e5b4:	mov	w19, w2
   3e5b8:	mov	x2, #0x84                  	// #132
   3e5bc:	ldr	x20, [x3, #120]
   3e5c0:	str	x21, [sp, #32]
   3e5c4:	mov	x21, x1
   3e5c8:	add	x1, x0, #0x230
   3e5cc:	mov	x0, x7
   3e5d0:	bl	35050 <memcpy@plt>
   3e5d4:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   3e5d8:	mov	w3, #0xffffffff            	// #-1
   3e5dc:	ldrb	w6, [x21, #16]
   3e5e0:	mov	x7, x0
   3e5e4:	ldr	x4, [x4, #3944]
   3e5e8:	mov	w0, #0x0                   	// #0
   3e5ec:	ldp	w1, w5, [x4, #96]
   3e5f0:	ldp	w8, w2, [x4, #192]
   3e5f4:	lsr	w1, w19, w1
   3e5f8:	lsl	w4, w3, w5
   3e5fc:	bic	w4, w1, w4
   3e600:	lsr	w19, w19, w8
   3e604:	bfxil	w6, w4, #0, #5
   3e608:	strb	w6, [x21, #16]
   3e60c:	lsl	w2, w3, w2
   3e610:	bic	w2, w19, w2
   3e614:	cmp	w2, #0xa
   3e618:	b.hi	3e658 <aarch64_ext_ldst_reglist@@Base+0xc0>  // b.pmore
   3e61c:	ubfiz	x3, x2, #1, #32
   3e620:	add	x1, sp, #0x40
   3e624:	add	x2, x3, w2, uxtw
   3e628:	ubfx	w20, w20, #24, #3
   3e62c:	lsl	x2, x2, #2
   3e630:	ldr	w1, [x1, x2]
   3e634:	cmp	w1, w20
   3e638:	b.ne	3e658 <aarch64_ext_ldst_reglist@@Base+0xc0>  // b.any
   3e63c:	ldr	w1, [x7, x2]
   3e640:	cbnz	w1, 3e658 <aarch64_ext_ldst_reglist@@Base+0xc0>
   3e644:	add	x1, sp, #0x3c
   3e648:	mov	w0, #0x1                   	// #1
   3e64c:	ldr	w1, [x1, x2]
   3e650:	bfi	w6, w1, #5, #3
   3e654:	strb	w6, [x21, #16]
   3e658:	ldp	x19, x20, [sp, #16]
   3e65c:	ldr	x21, [sp, #32]
   3e660:	ldp	x29, x30, [sp], #192
   3e664:	ret

000000000003e668 <aarch64_ext_ldst_reglist_r@@Base>:
   3e668:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   3e66c:	ldrb	w0, [x1, #16]
   3e670:	mov	w5, #0xffffffff            	// #-1
   3e674:	ldr	x4, [x4, #3944]
   3e678:	ldr	x3, [x3, #8]
   3e67c:	ldp	w7, w6, [x4, #96]
   3e680:	lsr	w7, w2, w7
   3e684:	lsl	w6, w5, w6
   3e688:	bic	w6, w7, w6
   3e68c:	ldp	w7, w4, [x4, #248]
   3e690:	bfxil	w0, w6, #0, #5
   3e694:	strb	w0, [x1, #16]
   3e698:	ldr	x3, [x3, #120]
   3e69c:	lsl	w5, w5, w4
   3e6a0:	lsr	w2, w2, w7
   3e6a4:	bic	w2, w2, w5
   3e6a8:	ubfx	w3, w3, #24, #3
   3e6ac:	bfi	w0, w3, #5, #3
   3e6b0:	strb	w0, [x1, #16]
   3e6b4:	ands	w4, w0, #0xe0
   3e6b8:	ccmp	w3, #0x4, #0x2, ne  // ne = any
   3e6bc:	b.hi	3e6e8 <aarch64_ext_ldst_reglist_r@@Base+0x80>  // b.pmore
   3e6c0:	cmp	w4, #0x20
   3e6c4:	ccmp	w2, #0x1, #0x0, eq  // eq = none
   3e6c8:	b.eq	3e6d4 <aarch64_ext_ldst_reglist_r@@Base+0x6c>  // b.none
   3e6cc:	mov	w0, #0x1                   	// #1
   3e6d0:	ret
   3e6d4:	mov	w2, #0x2                   	// #2
   3e6d8:	bfi	w0, w2, #5, #3
   3e6dc:	strb	w0, [x1, #16]
   3e6e0:	mov	w0, #0x1                   	// #1
   3e6e4:	ret
   3e6e8:	stp	x29, x30, [sp, #-16]!
   3e6ec:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3e6f0:	add	x3, x3, #0x710
   3e6f4:	mov	x29, sp
   3e6f8:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3e6fc:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   3e700:	add	x3, x3, #0x2b8
   3e704:	add	x1, x1, #0xfd0
   3e708:	add	x0, x0, #0x308
   3e70c:	mov	w2, #0x1e5                 	// #485
   3e710:	bl	35ac0 <__assert_fail@plt>
   3e714:	nop

000000000003e718 <aarch64_ext_ldst_elemlist@@Base>:
   3e718:	stp	x29, x30, [sp, #-64]!
   3e71c:	mov	x29, sp
   3e720:	stp	x21, x22, [sp, #32]
   3e724:	adrp	x21, a6000 <aarch64_operands@@Base+0x16bd0>
   3e728:	mov	x22, x3
   3e72c:	ldr	x21, [x21, #3944]
   3e730:	stp	x19, x20, [sp, #16]
   3e734:	mov	x19, x1
   3e738:	stp	x23, x24, [sp, #48]
   3e73c:	mov	w23, w2
   3e740:	ldrb	w2, [x1, #16]
   3e744:	ldp	w1, w0, [x21, #96]
   3e748:	mov	w24, #0xffffffff            	// #-1
   3e74c:	ldr	w3, [x21, #212]
   3e750:	lsr	w1, w23, w1
   3e754:	cmp	w3, #0x2
   3e758:	lsl	w0, w24, w0
   3e75c:	bic	w0, w1, w0
   3e760:	bfxil	w2, w0, #0, #5
   3e764:	strb	w2, [x19, #16]
   3e768:	b.le	3e7e8 <aarch64_ext_ldst_elemlist@@Base+0xd0>
   3e76c:	ldr	w20, [x21, #208]
   3e770:	mov	w2, #0x3                   	// #3
   3e774:	mov	w0, w23
   3e778:	mov	w5, #0x9                   	// #9
   3e77c:	add	w20, w20, #0x1
   3e780:	mov	w4, #0x1f                  	// #31
   3e784:	mov	w3, #0xb                   	// #11
   3e788:	mov	w1, #0x0                   	// #0
   3e78c:	lsr	w20, w23, w20
   3e790:	and	w20, w20, w2
   3e794:	bl	35390 <extract_fields@plt>
   3e798:	cmp	w20, #0x2
   3e79c:	b.eq	3e7cc <aarch64_ext_ldst_elemlist@@Base+0xb4>  // b.none
   3e7a0:	cmp	w20, #0x3
   3e7a4:	b.eq	3e7d0 <aarch64_ext_ldst_elemlist@@Base+0xb8>  // b.none
   3e7a8:	cbz	w20, 3e804 <aarch64_ext_ldst_elemlist@@Base+0xec>
   3e7ac:	cmp	w20, #0x1
   3e7b0:	b.ne	3e7d0 <aarch64_ext_ldst_elemlist@@Base+0xb8>  // b.any
   3e7b4:	tbnz	w0, #0, 3e7d0 <aarch64_ext_ldst_elemlist@@Base+0xb8>
   3e7b8:	lsr	w0, w0, #1
   3e7bc:	mov	w1, #0x6                   	// #6
   3e7c0:	strb	w1, [x19, #4]
   3e7c4:	str	x0, [x19, #24]
   3e7c8:	b	3e814 <aarch64_ext_ldst_elemlist@@Base+0xfc>
   3e7cc:	tbz	w0, #1, 3e870 <aarch64_ext_ldst_elemlist@@Base+0x158>
   3e7d0:	mov	w0, #0x0                   	// #0
   3e7d4:	ldp	x19, x20, [sp, #16]
   3e7d8:	ldp	x21, x22, [sp, #32]
   3e7dc:	ldp	x23, x24, [sp, #48]
   3e7e0:	ldp	x29, x30, [sp], #64
   3e7e4:	ret
   3e7e8:	mov	w0, w23
   3e7ec:	mov	w5, #0x9                   	// #9
   3e7f0:	mov	w4, #0x1f                  	// #31
   3e7f4:	mov	w3, #0xb                   	// #11
   3e7f8:	mov	w2, #0x3                   	// #3
   3e7fc:	mov	w1, #0x0                   	// #0
   3e800:	bl	35390 <extract_fields@plt>
   3e804:	mov	w0, w0
   3e808:	mov	w1, #0x5                   	// #5
   3e80c:	strb	w1, [x19, #4]
   3e810:	str	x0, [x19, #24]
   3e814:	ldrh	w1, [x19, #16]
   3e818:	mov	w0, #0x1                   	// #1
   3e81c:	ldr	x2, [x22, #8]
   3e820:	and	w1, w1, #0xfffffe1f
   3e824:	orr	w1, w1, #0x100
   3e828:	strh	w1, [x19, #16]
   3e82c:	ldr	x1, [x2, #120]
   3e830:	ldrb	w2, [x19, #16]
   3e834:	ubfx	w1, w1, #24, #3
   3e838:	bfi	w2, w1, #5, #3
   3e83c:	strb	w2, [x19, #16]
   3e840:	tst	w2, #0xe0
   3e844:	ccmp	w1, #0x4, #0x2, ne  // ne = any
   3e848:	b.ls	3e7d4 <aarch64_ext_ldst_elemlist@@Base+0xbc>  // b.plast
   3e84c:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3e850:	add	x3, x3, #0x710
   3e854:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3e858:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   3e85c:	add	x3, x3, #0x2d8
   3e860:	add	x1, x1, #0xfd0
   3e864:	add	x0, x0, #0x308
   3e868:	mov	w2, #0x22d                 	// #557
   3e86c:	bl	35ac0 <__assert_fail@plt>
   3e870:	tbnz	w0, #0, 3e888 <aarch64_ext_ldst_elemlist@@Base+0x170>
   3e874:	lsr	w0, w0, #2
   3e878:	mov	w1, #0x7                   	// #7
   3e87c:	strb	w1, [x19, #4]
   3e880:	str	x0, [x19, #24]
   3e884:	b	3e814 <aarch64_ext_ldst_elemlist@@Base+0xfc>
   3e888:	ldp	w2, w1, [x21, #248]
   3e88c:	lsr	w23, w23, w2
   3e890:	lsl	w24, w24, w1
   3e894:	bics	wzr, w23, w24
   3e898:	b.ne	3e7d0 <aarch64_ext_ldst_elemlist@@Base+0xb8>  // b.any
   3e89c:	lsr	w0, w0, #3
   3e8a0:	mov	w1, #0x8                   	// #8
   3e8a4:	strb	w1, [x19, #4]
   3e8a8:	str	x0, [x19, #24]
   3e8ac:	b	3e814 <aarch64_ext_ldst_elemlist@@Base+0xfc>

000000000003e8b0 <aarch64_ext_advsimd_imm_shift@@Base>:
   3e8b0:	stp	x29, x30, [sp, #-80]!
   3e8b4:	mov	w0, #0x0                   	// #0
   3e8b8:	mov	x29, sp
   3e8bc:	stp	x23, x24, [sp, #48]
   3e8c0:	adrp	x23, a6000 <aarch64_operands@@Base+0x16bd0>
   3e8c4:	stp	x21, x22, [sp, #32]
   3e8c8:	mov	w21, w2
   3e8cc:	mov	w22, #0xffffffff            	// #-1
   3e8d0:	ldr	x2, [x23, #3944]
   3e8d4:	stp	x19, x20, [sp, #16]
   3e8d8:	ldr	w4, [x2, #436]
   3e8dc:	ldr	w19, [x2, #432]
   3e8e0:	lsl	w4, w22, w4
   3e8e4:	lsr	w19, w21, w19
   3e8e8:	bics	w19, w19, w4
   3e8ec:	b.ne	3e904 <aarch64_ext_advsimd_imm_shift@@Base+0x54>  // b.any
   3e8f0:	ldp	x19, x20, [sp, #16]
   3e8f4:	ldp	x21, x22, [sp, #32]
   3e8f8:	ldp	x23, x24, [sp, #48]
   3e8fc:	ldp	x29, x30, [sp], #80
   3e900:	ret
   3e904:	ldr	x5, [x3, #8]
   3e908:	mov	x20, x1
   3e90c:	mov	w0, w21
   3e910:	mov	w4, #0x35                  	// #53
   3e914:	mov	w2, #0x2                   	// #2
   3e918:	mov	w1, #0x0                   	// #0
   3e91c:	ldr	w24, [x5, #16]
   3e920:	mov	w3, #0x36                  	// #54
   3e924:	str	x25, [sp, #64]
   3e928:	bl	35390 <extract_fields@plt>
   3e92c:	mov	w25, w0
   3e930:	tbnz	w19, #3, 3ea50 <aarch64_ext_advsimd_imm_shift@@Base+0x1a0>
   3e934:	tbnz	w19, #2, 3ea5c <aarch64_ext_advsimd_imm_shift@@Base+0x1ac>
   3e938:	tbnz	w19, #1, 3ea68 <aarch64_ext_advsimd_imm_shift@@Base+0x1b8>
   3e93c:	ubfiz	w4, w19, #3, #1
   3e940:	cmp	w4, #0x0
   3e944:	csel	w22, w22, wzr, eq  // eq = none
   3e948:	cset	w19, ne  // ne = any
   3e94c:	cmp	w24, #0xe
   3e950:	ccmp	w24, #0x1a, #0x4, ne  // ne = any
   3e954:	b.ne	3ea74 <aarch64_ext_advsimd_imm_shift@@Base+0x1c4>  // b.any
   3e958:	ldr	w1, [x20]
   3e95c:	sub	w1, w1, #0x2b
   3e960:	cmp	w1, #0x1
   3e964:	b.hi	3ea74 <aarch64_ext_advsimd_imm_shift@@Base+0x1c4>  // b.pmore
   3e968:	cmp	w24, #0xe
   3e96c:	b.eq	3e9cc <aarch64_ext_advsimd_imm_shift@@Base+0x11c>  // b.none
   3e970:	add	w19, w19, #0x4
   3e974:	cmp	w22, #0x4
   3e978:	b.hi	3ea9c <aarch64_ext_advsimd_imm_shift@@Base+0x1ec>  // b.pmore
   3e97c:	and	w19, w19, #0xff
   3e980:	mov	w0, w19
   3e984:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3e988:	cmp	w22, w0
   3e98c:	b.ne	3ea9c <aarch64_ext_advsimd_imm_shift@@Base+0x1ec>  // b.any
   3e990:	ldr	w0, [x20]
   3e994:	strb	w19, [x20, #4]
   3e998:	cmp	w0, #0x2c
   3e99c:	b.eq	3ea24 <aarch64_ext_advsimd_imm_shift@@Base+0x174>  // b.none
   3e9a0:	mov	w1, #0x8                   	// #8
   3e9a4:	mov	w0, #0x1                   	// #1
   3e9a8:	lsl	w22, w1, w22
   3e9ac:	sub	w22, w25, w22
   3e9b0:	ldr	x25, [sp, #64]
   3e9b4:	str	x22, [x20, #16]
   3e9b8:	ldp	x19, x20, [sp, #16]
   3e9bc:	ldp	x21, x22, [sp, #32]
   3e9c0:	ldp	x23, x24, [sp, #48]
   3e9c4:	ldp	x29, x30, [sp], #80
   3e9c8:	ret
   3e9cc:	ldr	x23, [x23, #3944]
   3e9d0:	mov	w19, #0xffffffff            	// #-1
   3e9d4:	ldp	w0, w1, [x23, #88]
   3e9d8:	lsr	w21, w21, w0
   3e9dc:	lsl	w19, w19, w1
   3e9e0:	bic	w19, w21, w19
   3e9e4:	orr	w19, w19, w22, lsl #1
   3e9e8:	add	w1, w19, #0xd
   3e9ec:	add	w0, w19, #0xe
   3e9f0:	cmp	w1, #0xe
   3e9f4:	csel	w1, w0, w1, hi  // hi = pmore
   3e9f8:	cmp	w19, #0x8
   3e9fc:	b.hi	3ea98 <aarch64_ext_advsimd_imm_shift@@Base+0x1e8>  // b.pmore
   3ea00:	and	w21, w1, #0xff
   3ea04:	mov	w0, w21
   3ea08:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3ea0c:	cmp	w19, w0
   3ea10:	b.ne	3ea98 <aarch64_ext_advsimd_imm_shift@@Base+0x1e8>  // b.any
   3ea14:	ldr	w0, [x20]
   3ea18:	strb	w21, [x20, #4]
   3ea1c:	cmp	w0, #0x2c
   3ea20:	b.ne	3e9a0 <aarch64_ext_advsimd_imm_shift@@Base+0xf0>  // b.any
   3ea24:	mov	w1, #0x10                  	// #16
   3ea28:	mov	w0, #0x1                   	// #1
   3ea2c:	lsl	w22, w1, w22
   3ea30:	sub	w22, w22, w25
   3ea34:	ldr	x25, [sp, #64]
   3ea38:	str	x22, [x20, #16]
   3ea3c:	ldp	x19, x20, [sp, #16]
   3ea40:	ldp	x21, x22, [sp, #32]
   3ea44:	ldp	x23, x24, [sp, #48]
   3ea48:	ldp	x29, x30, [sp], #80
   3ea4c:	ret
   3ea50:	mov	w22, #0x3                   	// #3
   3ea54:	mov	w19, #0x4                   	// #4
   3ea58:	b	3e94c <aarch64_ext_advsimd_imm_shift@@Base+0x9c>
   3ea5c:	mov	w22, #0x2                   	// #2
   3ea60:	mov	w19, #0x3                   	// #3
   3ea64:	b	3e94c <aarch64_ext_advsimd_imm_shift@@Base+0x9c>
   3ea68:	mov	w22, #0x1                   	// #1
   3ea6c:	mov	w19, #0x2                   	// #2
   3ea70:	b	3e94c <aarch64_ext_advsimd_imm_shift@@Base+0x9c>
   3ea74:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3ea78:	add	x3, x3, #0x710
   3ea7c:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3ea80:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   3ea84:	add	x3, x3, #0x2f8
   3ea88:	add	x1, x1, #0xfd0
   3ea8c:	add	x0, x0, #0x348
   3ea90:	mov	w2, #0x249                 	// #585
   3ea94:	bl	35ac0 <__assert_fail@plt>
   3ea98:	bl	3c340 <aarch64_opcode_encode@@Base+0x1fe8>
   3ea9c:	bl	3c310 <aarch64_opcode_encode@@Base+0x1fb8>

000000000003eaa0 <aarch64_ext_shll_imm@@Base>:
   3eaa0:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   3eaa4:	mov	w3, #0xffffffff            	// #-1
   3eaa8:	mov	w0, #0x0                   	// #0
   3eaac:	ldr	x4, [x4, #3944]
   3eab0:	ldp	w5, w4, [x4, #64]
   3eab4:	lsr	w2, w2, w5
   3eab8:	lsl	w3, w3, w4
   3eabc:	bic	w2, w2, w3
   3eac0:	cmp	w2, #0x2
   3eac4:	b.hi	3eae0 <aarch64_ext_shll_imm@@Base+0x40>  // b.pmore
   3eac8:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3eacc:	add	x3, x3, #0x710
   3ead0:	add	x3, x3, #0x318
   3ead4:	mov	w0, #0x1                   	// #1
   3ead8:	ldr	x2, [x3, w2, uxtw #3]
   3eadc:	str	x2, [x1, #16]
   3eae0:	ret
   3eae4:	nop

000000000003eae8 <aarch64_ext_imm@@Base>:
   3eae8:	ldr	w4, [x0, #20]
   3eaec:	cbz	w4, 3ec64 <aarch64_ext_imm@@Base+0x17c>
   3eaf0:	adrp	x11, a6000 <aarch64_operands@@Base+0x16bd0>
   3eaf4:	ubfiz	x6, x4, #3, #32
   3eaf8:	mov	w8, w4
   3eafc:	ldr	w9, [x0, #24]
   3eb00:	ldr	x5, [x11, #3944]
   3eb04:	mov	w3, #0xffffffff            	// #-1
   3eb08:	add	x4, x6, x5
   3eb0c:	ldr	w6, [x6, x5]
   3eb10:	ldr	w4, [x4, #4]
   3eb14:	lsr	w6, w2, w6
   3eb18:	lsl	w4, w3, w4
   3eb1c:	bic	w4, w6, w4
   3eb20:	cbz	w9, 3ebf4 <aarch64_ext_imm@@Base+0x10c>
   3eb24:	ubfiz	x7, x9, #3, #32
   3eb28:	ldr	w6, [x0, #28]
   3eb2c:	add	x12, x5, x7
   3eb30:	ldr	w10, [x5, x7]
   3eb34:	ldr	w7, [x12, #4]
   3eb38:	lsr	w12, w2, w10
   3eb3c:	lsl	w10, w3, w7
   3eb40:	bic	w10, w12, w10
   3eb44:	lsl	w4, w4, w7
   3eb48:	orr	w4, w10, w4
   3eb4c:	cbz	w6, 3ebf4 <aarch64_ext_imm@@Base+0x10c>
   3eb50:	ubfiz	x6, x6, #3, #32
   3eb54:	ldr	w7, [x0, #32]
   3eb58:	add	x12, x5, x6
   3eb5c:	ldr	w10, [x5, x6]
   3eb60:	ldr	w6, [x12, #4]
   3eb64:	lsr	w12, w2, w10
   3eb68:	lsl	w10, w3, w6
   3eb6c:	bic	w10, w12, w10
   3eb70:	lsl	w4, w4, w6
   3eb74:	orr	w4, w10, w4
   3eb78:	cbz	w7, 3ebf4 <aarch64_ext_imm@@Base+0x10c>
   3eb7c:	ubfiz	x7, x7, #3, #32
   3eb80:	ldr	w10, [x0, #16]
   3eb84:	add	x6, x5, x7
   3eb88:	ldr	w5, [x5, x7]
   3eb8c:	ldr	w6, [x6, #4]
   3eb90:	lsr	w5, w2, w5
   3eb94:	lsl	w2, w3, w6
   3eb98:	bic	w2, w5, w2
   3eb9c:	lsl	w4, w4, w6
   3eba0:	orr	w2, w2, w4
   3eba4:	tbnz	w10, #2, 3ec00 <aarch64_ext_imm@@Base+0x118>
   3eba8:	tbnz	w10, #3, 3ebd4 <aarch64_ext_imm@@Base+0xec>
   3ebac:	tst	x10, #0x200
   3ebb0:	lsl	x0, x2, #4
   3ebb4:	csel	x2, x0, x2, ne  // ne = any
   3ebb8:	ldr	w3, [x1]
   3ebbc:	lsl	x0, x2, #12
   3ebc0:	cmp	w3, #0x4e
   3ebc4:	csel	x2, x0, x2, eq  // eq = none
   3ebc8:	mov	w0, #0x1                   	// #1
   3ebcc:	str	x2, [x1, #16]
   3ebd0:	ret
   3ebd4:	ldr	w3, [x1]
   3ebd8:	lsl	x2, x2, #2
   3ebdc:	cmp	w3, #0x4e
   3ebe0:	lsl	x0, x2, #12
   3ebe4:	csel	x2, x0, x2, eq  // eq = none
   3ebe8:	mov	w0, #0x1                   	// #1
   3ebec:	str	x2, [x1, #16]
   3ebf0:	ret
   3ebf4:	ldr	w10, [x0, #16]
   3ebf8:	mov	w2, w4
   3ebfc:	tbz	w10, #2, 3eba8 <aarch64_ext_imm@@Base+0xc0>
   3ec00:	ldr	x11, [x11, #3944]
   3ec04:	add	x4, x11, x8, lsl #3
   3ec08:	ldr	w3, [x4, #4]
   3ec0c:	cbz	w9, 3ec30 <aarch64_ext_imm@@Base+0x148>
   3ec10:	add	x9, x11, w9, uxtw #3
   3ec14:	ldr	w0, [x0, #28]
   3ec18:	ldr	w4, [x9, #4]
   3ec1c:	add	w3, w3, w4
   3ec20:	cbz	w0, 3ec30 <aarch64_ext_imm@@Base+0x148>
   3ec24:	add	x11, x11, w0, uxtw #3
   3ec28:	ldr	w0, [x11, #4]
   3ec2c:	add	w3, w3, w0
   3ec30:	sub	w3, w3, #0x1
   3ec34:	cmp	w3, #0x1e
   3ec38:	b.hi	3ec70 <aarch64_ext_imm@@Base+0x188>  // b.pmore
   3ec3c:	mov	x0, #0x2                   	// #2
   3ec40:	mov	x4, #0x1                   	// #1
   3ec44:	lsl	x0, x0, x3
   3ec48:	sub	x0, x0, #0x1
   3ec4c:	and	x2, x0, x2
   3ec50:	lsl	x3, x4, x3
   3ec54:	eor	x2, x2, x3
   3ec58:	sub	x2, x2, x3
   3ec5c:	tbz	w10, #3, 3ebac <aarch64_ext_imm@@Base+0xc4>
   3ec60:	b	3ebd4 <aarch64_ext_imm@@Base+0xec>
   3ec64:	ldr	w10, [x0, #16]
   3ec68:	mov	x2, #0x0                   	// #0
   3ec6c:	tbz	w10, #2, 3eba8 <aarch64_ext_imm@@Base+0xc0>
   3ec70:	stp	x29, x30, [sp, #-16]!
   3ec74:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3ec78:	add	x3, x3, #0x710
   3ec7c:	mov	x29, sp
   3ec80:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3ec84:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   3ec88:	add	x3, x3, #0x330
   3ec8c:	add	x1, x1, #0x610
   3ec90:	add	x0, x0, #0x3c8
   3ec94:	mov	w2, #0x12e                 	// #302
   3ec98:	bl	35ac0 <__assert_fail@plt>
   3ec9c:	nop

000000000003eca0 <aarch64_ext_imm_half@@Base>:
   3eca0:	stp	x29, x30, [sp, #-32]!
   3eca4:	mov	x29, sp
   3eca8:	stp	x19, x20, [sp, #16]
   3ecac:	mov	x20, x1
   3ecb0:	mov	w19, w2
   3ecb4:	bl	35720 <aarch64_ext_imm@plt>
   3ecb8:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3ecbc:	mov	w3, #0x5                   	// #5
   3ecc0:	str	w3, [x20, #32]
   3ecc4:	mov	w2, #0xffffffff            	// #-1
   3ecc8:	ldr	x1, [x1, #3944]
   3eccc:	mov	w0, #0x1                   	// #1
   3ecd0:	ldr	w3, [x1, #256]
   3ecd4:	ldr	w1, [x1, #260]
   3ecd8:	lsr	w19, w19, w3
   3ecdc:	lsl	w2, w2, w1
   3ece0:	bic	w2, w19, w2
   3ece4:	lsl	w2, w2, #4
   3ece8:	str	x2, [x20, #40]
   3ecec:	ldp	x19, x20, [sp, #16]
   3ecf0:	ldp	x29, x30, [sp], #32
   3ecf4:	ret

000000000003ecf8 <aarch64_ext_advsimd_imm_modified@@Base>:
   3ecf8:	stp	x29, x30, [sp, #-80]!
   3ecfc:	mov	x29, sp
   3ed00:	ldr	w0, [x1, #8]
   3ed04:	stp	x19, x20, [sp, #16]
   3ed08:	cmp	w0, #0x1
   3ed0c:	stp	x21, x22, [sp, #32]
   3ed10:	stp	x23, x24, [sp, #48]
   3ed14:	ldrb	w24, [x3, #28]
   3ed18:	b.ne	3efa0 <aarch64_ext_advsimd_imm_modified@@Base+0x2a8>  // b.any
   3ed1c:	ldr	w0, [x1]
   3ed20:	mov	x19, x1
   3ed24:	mov	x20, x3
   3ed28:	mov	w22, w2
   3ed2c:	cmp	w0, #0x2f
   3ed30:	b.ne	3ed40 <aarch64_ext_advsimd_imm_modified@@Base+0x48>  // b.any
   3ed34:	ldrb	w0, [x1, #24]
   3ed38:	orr	w0, w0, #0x1
   3ed3c:	strb	w0, [x1, #24]
   3ed40:	mov	w1, #0x0                   	// #0
   3ed44:	mov	w0, w22
   3ed48:	mov	w4, #0x3                   	// #3
   3ed4c:	mov	w3, #0x4                   	// #4
   3ed50:	mov	w2, #0x2                   	// #2
   3ed54:	bl	35390 <extract_fields@plt>
   3ed58:	ldrb	w1, [x19, #24]
   3ed5c:	mov	w23, w0
   3ed60:	mov	x21, x23
   3ed64:	tbz	w1, #0, 3eea4 <aarch64_ext_advsimd_imm_modified@@Base+0x1ac>
   3ed68:	ldr	w21, [x19, #8]
   3ed6c:	str	x23, [x19, #16]
   3ed70:	sbfiz	x0, x21, #3, #32
   3ed74:	sub	x0, x0, w21, sxtw
   3ed78:	add	x0, x20, x0, lsl #3
   3ed7c:	ldrb	w0, [x0, #28]
   3ed80:	cbnz	w0, 3efc4 <aarch64_ext_advsimd_imm_modified@@Base+0x2cc>
   3ed84:	ldr	x1, [x20, #8]
   3ed88:	add	x23, sp, #0x48
   3ed8c:	mov	x0, x20
   3ed90:	mov	x3, x23
   3ed94:	mov	w2, w21
   3ed98:	add	x1, x1, #0x38
   3ed9c:	bl	35360 <aarch64_find_best_match@plt>
   3eda0:	cbz	w0, 3ee0c <aarch64_ext_advsimd_imm_modified@@Base+0x114>
   3eda4:	ldrb	w0, [x23, w21, sxtw]
   3eda8:	strb	w0, [x19, #4]
   3edac:	cmp	w0, #0x21
   3edb0:	b.eq	3ee54 <aarch64_ext_advsimd_imm_modified@@Base+0x15c>  // b.none
   3edb4:	cmp	w0, #0x22
   3edb8:	b.ne	3ee2c <aarch64_ext_advsimd_imm_modified@@Base+0x134>  // b.any
   3edbc:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3edc0:	mov	w1, #0x1                   	// #1
   3edc4:	str	w1, [x19, #32]
   3edc8:	mov	x1, #0x8                   	// #8
   3edcc:	ldr	x0, [x0, #3944]
   3edd0:	ldr	w2, [x0, #204]
   3edd4:	cmp	w2, #0x0
   3edd8:	b.le	3edf0 <aarch64_ext_advsimd_imm_modified@@Base+0xf8>
   3eddc:	ldr	w2, [x0, #200]
   3ede0:	mov	x0, #0x10                  	// #16
   3ede4:	lsr	w22, w22, w2
   3ede8:	tst	x22, #0x1
   3edec:	csel	x1, x1, x0, eq  // eq = none
   3edf0:	str	x1, [x19, #40]
   3edf4:	mov	w0, #0x1                   	// #1
   3edf8:	ldp	x19, x20, [sp, #16]
   3edfc:	ldp	x21, x22, [sp, #32]
   3ee00:	ldp	x23, x24, [sp, #48]
   3ee04:	ldp	x29, x30, [sp], #80
   3ee08:	ret
   3ee0c:	strb	wzr, [x19, #4]
   3ee10:	str	wzr, [x19, #32]
   3ee14:	mov	w0, #0x1                   	// #1
   3ee18:	ldp	x19, x20, [sp, #16]
   3ee1c:	ldp	x21, x22, [sp, #32]
   3ee20:	ldp	x23, x24, [sp, #48]
   3ee24:	ldp	x29, x30, [sp], #80
   3ee28:	ret
   3ee2c:	cbz	w0, 3ee10 <aarch64_ext_advsimd_imm_modified@@Base+0x118>
   3ee30:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3ee34:	add	x3, x3, #0x710
   3ee38:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3ee3c:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   3ee40:	add	x3, x3, #0x350
   3ee44:	add	x1, x1, #0xfd0
   3ee48:	add	x0, x0, #0x870
   3ee4c:	mov	w2, #0x2f1                 	// #753
   3ee50:	bl	35ac0 <__assert_fail@plt>
   3ee54:	mov	w0, #0x5                   	// #5
   3ee58:	str	w0, [x19, #32]
   3ee5c:	mov	w0, w24
   3ee60:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3ee64:	and	w0, w0, #0xff
   3ee68:	cmp	w0, #0x2
   3ee6c:	b.eq	3ef6c <aarch64_ext_advsimd_imm_modified@@Base+0x274>  // b.none
   3ee70:	cmp	w0, #0x4
   3ee74:	b.eq	3ef3c <aarch64_ext_advsimd_imm_modified@@Base+0x244>  // b.none
   3ee78:	cmp	w0, #0x1
   3ee7c:	b.eq	3ef1c <aarch64_ext_advsimd_imm_modified@@Base+0x224>  // b.none
   3ee80:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3ee84:	add	x3, x3, #0x710
   3ee88:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3ee8c:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   3ee90:	add	x3, x3, #0x350
   3ee94:	add	x1, x1, #0xfd0
   3ee98:	add	x0, x0, #0x870
   3ee9c:	mov	w2, #0x2e5                 	// #741
   3eea0:	bl	35ac0 <__assert_fail@plt>
   3eea4:	mov	w0, w24
   3eea8:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3eeac:	and	w0, w0, #0xff
   3eeb0:	cmp	w0, #0x8
   3eeb4:	b.ne	3ed68 <aarch64_ext_advsimd_imm_modified@@Base+0x70>  // b.any
   3eeb8:	tst	x23, #0x1
   3eebc:	mov	x23, #0xff                  	// #255
   3eec0:	csel	x23, xzr, x23, eq  // eq = none
   3eec4:	tst	x21, #0x2
   3eec8:	orr	x0, x23, #0xff00
   3eecc:	csel	x23, x0, x23, ne  // ne = any
   3eed0:	tst	x21, #0x4
   3eed4:	orr	x0, x23, #0xff0000
   3eed8:	csel	x23, x0, x23, ne  // ne = any
   3eedc:	tst	x21, #0x8
   3eee0:	orr	x0, x23, #0xff000000
   3eee4:	csel	x23, x0, x23, ne  // ne = any
   3eee8:	tst	x21, #0x10
   3eeec:	orr	x0, x23, #0xff00000000
   3eef0:	csel	x23, x0, x23, ne  // ne = any
   3eef4:	tst	x21, #0x20
   3eef8:	orr	x0, x23, #0xff0000000000
   3eefc:	csel	x23, x0, x23, ne  // ne = any
   3ef00:	tst	x21, #0x40
   3ef04:	orr	x0, x23, #0xff000000000000
   3ef08:	csel	x23, x0, x23, ne  // ne = any
   3ef0c:	tst	x21, #0x80
   3ef10:	orr	x0, x23, #0xff00000000000000
   3ef14:	csel	x23, x0, x23, ne  // ne = any
   3ef18:	b	3ed68 <aarch64_ext_advsimd_imm_modified@@Base+0x70>
   3ef1c:	mov	x0, #0x0                   	// #0
   3ef20:	str	x0, [x19, #40]
   3ef24:	mov	w0, #0x1                   	// #1
   3ef28:	ldp	x19, x20, [sp, #16]
   3ef2c:	ldp	x21, x22, [sp, #32]
   3ef30:	ldp	x23, x24, [sp, #48]
   3ef34:	ldp	x29, x30, [sp], #80
   3ef38:	ret
   3ef3c:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3ef40:	mov	x0, #0x0                   	// #0
   3ef44:	ldr	x1, [x1, #3944]
   3ef48:	ldr	w2, [x1, #204]
   3ef4c:	cmp	w2, #0x2
   3ef50:	b.le	3ef20 <aarch64_ext_advsimd_imm_modified@@Base+0x228>
   3ef54:	ldr	w0, [x1, #200]
   3ef58:	add	w0, w0, #0x1
   3ef5c:	lsr	w22, w22, w0
   3ef60:	ubfiz	x0, x22, #3, #2
   3ef64:	str	x0, [x19, #40]
   3ef68:	b	3ef24 <aarch64_ext_advsimd_imm_modified@@Base+0x22c>
   3ef6c:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3ef70:	mov	x0, #0x0                   	// #0
   3ef74:	ldr	x1, [x1, #3944]
   3ef78:	ldr	w2, [x1, #204]
   3ef7c:	cmp	w2, #0x1
   3ef80:	b.le	3ef20 <aarch64_ext_advsimd_imm_modified@@Base+0x228>
   3ef84:	ldr	w0, [x1, #200]
   3ef88:	add	w0, w0, #0x1
   3ef8c:	lsr	w0, w22, w0
   3ef90:	ubfiz	w0, w0, #3, #1
   3ef94:	mov	w0, w0
   3ef98:	str	x0, [x19, #40]
   3ef9c:	b	3ef24 <aarch64_ext_advsimd_imm_modified@@Base+0x22c>
   3efa0:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3efa4:	add	x3, x3, #0x710
   3efa8:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3efac:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3efb0:	add	x3, x3, #0x350
   3efb4:	add	x1, x1, #0xfd0
   3efb8:	add	x0, x0, #0x720
   3efbc:	mov	w2, #0x2bf                 	// #703
   3efc0:	bl	35ac0 <__assert_fail@plt>
   3efc4:	bl	3c3a0 <aarch64_opcode_encode@@Base+0x2048>

000000000003efc8 <aarch64_ext_fpimm@@Base>:
   3efc8:	ldr	w3, [x0, #20]
   3efcc:	cbz	w3, 3f07c <aarch64_ext_fpimm@@Base+0xb4>
   3efd0:	adrp	x8, a6000 <aarch64_operands@@Base+0x16bd0>
   3efd4:	ubfiz	x3, x3, #3, #32
   3efd8:	ldr	w4, [x0, #24]
   3efdc:	mov	w9, #0xffffffff            	// #-1
   3efe0:	ldr	x8, [x8, #3944]
   3efe4:	add	x5, x3, x8
   3efe8:	ldr	w3, [x3, x8]
   3efec:	ldr	w6, [x5, #4]
   3eff0:	lsr	w5, w2, w3
   3eff4:	lsl	w3, w9, w6
   3eff8:	bic	w3, w5, w3
   3effc:	cbz	w4, 3f07c <aarch64_ext_fpimm@@Base+0xb4>
   3f000:	ubfiz	x4, x4, #3, #32
   3f004:	ldr	w5, [x0, #28]
   3f008:	add	x7, x8, x4
   3f00c:	ldr	w6, [x8, x4]
   3f010:	ldr	w4, [x7, #4]
   3f014:	lsr	w7, w2, w6
   3f018:	lsl	w6, w9, w4
   3f01c:	bic	w6, w7, w6
   3f020:	lsl	w3, w3, w4
   3f024:	orr	w3, w6, w3
   3f028:	cbz	w5, 3f07c <aarch64_ext_fpimm@@Base+0xb4>
   3f02c:	ubfiz	x5, x5, #3, #32
   3f030:	ldr	w4, [x0, #32]
   3f034:	add	x0, x8, x5
   3f038:	ldr	w6, [x8, x5]
   3f03c:	ldr	w5, [x0, #4]
   3f040:	lsr	w7, w2, w6
   3f044:	lsl	w6, w9, w5
   3f048:	bic	w6, w7, w6
   3f04c:	lsl	w3, w3, w5
   3f050:	orr	w3, w6, w3
   3f054:	cbz	w4, 3f07c <aarch64_ext_fpimm@@Base+0xb4>
   3f058:	ubfiz	x4, x4, #3, #32
   3f05c:	add	x5, x8, x4
   3f060:	ldr	w0, [x8, x4]
   3f064:	ldr	w4, [x5, #4]
   3f068:	lsr	w2, w2, w0
   3f06c:	lsl	w0, w9, w4
   3f070:	bic	w0, w2, w0
   3f074:	lsl	w3, w3, w4
   3f078:	orr	w3, w0, w3
   3f07c:	ldrb	w2, [x1, #24]
   3f080:	mov	w3, w3
   3f084:	mov	w0, #0x1                   	// #1
   3f088:	str	x3, [x1, #16]
   3f08c:	orr	w2, w2, w0
   3f090:	strb	w2, [x1, #24]
   3f094:	ret

000000000003f098 <aarch64_ext_imm_rotate1@@Base>:
   3f098:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   3f09c:	ldr	w0, [x0, #20]
   3f0a0:	mov	w3, #0xffffffff            	// #-1
   3f0a4:	ldr	x4, [x4, #3944]
   3f0a8:	lsl	x0, x0, #3
   3f0ac:	add	x5, x0, x4
   3f0b0:	ldr	w4, [x0, x4]
   3f0b4:	ldr	w0, [x5, #4]
   3f0b8:	lsr	w2, w2, w4
   3f0bc:	lsl	w3, w3, w0
   3f0c0:	bic	w2, w2, w3
   3f0c4:	cmp	w2, #0x1
   3f0c8:	b.hi	3f0e4 <aarch64_ext_imm_rotate1@@Base+0x4c>  // b.pmore
   3f0cc:	mov	w4, #0xb4                  	// #180
   3f0d0:	mov	x3, #0x5a                  	// #90
   3f0d4:	mov	w0, #0x1                   	// #1
   3f0d8:	umaddl	x2, w2, w4, x3
   3f0dc:	str	x2, [x1, #16]
   3f0e0:	ret
   3f0e4:	stp	x29, x30, [sp, #-16]!
   3f0e8:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3f0ec:	add	x3, x3, #0x710
   3f0f0:	mov	x29, sp
   3f0f4:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3f0f8:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3f0fc:	add	x3, x3, #0x378
   3f100:	add	x1, x1, #0xfd0
   3f104:	add	x0, x0, #0x850
   3f108:	mov	w2, #0x30c                 	// #780
   3f10c:	bl	35ac0 <__assert_fail@plt>

000000000003f110 <aarch64_ext_imm_rotate2@@Base>:
   3f110:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   3f114:	ldr	w0, [x0, #20]
   3f118:	mov	w3, #0xffffffff            	// #-1
   3f11c:	ldr	x4, [x4, #3944]
   3f120:	lsl	x0, x0, #3
   3f124:	add	x5, x0, x4
   3f128:	ldr	w4, [x0, x4]
   3f12c:	ldr	w0, [x5, #4]
   3f130:	lsr	w2, w2, w4
   3f134:	lsl	w3, w3, w0
   3f138:	bic	w2, w2, w3
   3f13c:	cmp	w2, #0x3
   3f140:	b.hi	3f158 <aarch64_ext_imm_rotate2@@Base+0x48>  // b.pmore
   3f144:	mov	w3, #0x5a                  	// #90
   3f148:	mov	w0, #0x1                   	// #1
   3f14c:	umull	x2, w2, w3
   3f150:	str	x2, [x1, #16]
   3f154:	ret
   3f158:	stp	x29, x30, [sp, #-16]!
   3f15c:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3f160:	add	x3, x3, #0x710
   3f164:	mov	x29, sp
   3f168:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3f16c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   3f170:	add	x3, x3, #0x390
   3f174:	add	x1, x1, #0xfd0
   3f178:	add	x0, x0, #0x860
   3f17c:	mov	w2, #0x319                 	// #793
   3f180:	bl	35ac0 <__assert_fail@plt>
   3f184:	nop

000000000003f188 <aarch64_ext_fbits@@Base>:
   3f188:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   3f18c:	mov	w3, #0xffffffff            	// #-1
   3f190:	mov	w5, #0x40                  	// #64
   3f194:	mov	w0, #0x1                   	// #1
   3f198:	ldr	x4, [x4, #3944]
   3f19c:	ldr	w6, [x4, #528]
   3f1a0:	ldr	w4, [x4, #532]
   3f1a4:	lsr	w2, w2, w6
   3f1a8:	lsl	w3, w3, w4
   3f1ac:	bic	w3, w2, w3
   3f1b0:	sub	w3, w5, w3
   3f1b4:	str	x3, [x1, #16]
   3f1b8:	ret
   3f1bc:	nop

000000000003f1c0 <aarch64_ext_aimm@@Base>:
   3f1c0:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   3f1c4:	mov	w0, #0x5                   	// #5
   3f1c8:	mov	w5, #0xffffffff            	// #-1
   3f1cc:	str	w0, [x1, #32]
   3f1d0:	ldr	x4, [x4, #3944]
   3f1d4:	mov	w0, #0x0                   	// #0
   3f1d8:	ldr	w6, [x4, #280]
   3f1dc:	ldr	w3, [x4, #284]
   3f1e0:	lsr	w6, w2, w6
   3f1e4:	lsl	w3, w5, w3
   3f1e8:	bic	w3, w6, w3
   3f1ec:	cmp	w3, #0x1
   3f1f0:	b.hi	3f220 <aarch64_ext_aimm@@Base+0x60>  // b.pmore
   3f1f4:	ldr	w6, [x4, #376]
   3f1f8:	cmp	w3, #0x0
   3f1fc:	ldr	w4, [x4, #380]
   3f200:	mov	x3, #0xc                   	// #12
   3f204:	mov	w0, #0x1                   	// #1
   3f208:	csel	x3, x3, xzr, ne  // ne = any
   3f20c:	lsr	w2, w2, w6
   3f210:	str	x3, [x1, #40]
   3f214:	lsl	w5, w5, w4
   3f218:	bic	w2, w2, w5
   3f21c:	str	x2, [x1, #16]
   3f220:	ret
   3f224:	nop

000000000003f228 <aarch64_ext_limm@@Base>:
   3f228:	stp	x29, x30, [sp, #-48]!
   3f22c:	mov	x5, x0
   3f230:	mov	w0, w2
   3f234:	mov	x29, sp
   3f238:	ldr	w4, [x5, #24]
   3f23c:	mov	w2, #0x3                   	// #3
   3f240:	str	x21, [sp, #32]
   3f244:	mov	x21, x3
   3f248:	ldr	w3, [x5, #20]
   3f24c:	ldr	w5, [x5, #28]
   3f250:	stp	x19, x20, [sp, #16]
   3f254:	mov	x20, x1
   3f258:	mov	w1, #0x0                   	// #0
   3f25c:	bl	35390 <extract_fields@plt>
   3f260:	mov	w19, w0
   3f264:	ldrb	w0, [x21, #28]
   3f268:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3f26c:	and	w0, w0, #0xff
   3f270:	and	w2, w19, #0x3f
   3f274:	ubfx	x4, x19, #6, #6
   3f278:	tbnz	w19, #12, 3f2ec <aarch64_ext_limm@@Base+0xc4>
   3f27c:	cmp	w2, #0x37
   3f280:	b.hi	3f2c0 <aarch64_ext_limm@@Base+0x98>  // b.pmore
   3f284:	cmp	w2, #0x2f
   3f288:	b.hi	3f3fc <aarch64_ext_limm@@Base+0x1d4>  // b.pmore
   3f28c:	tbz	w19, #5, 3f384 <aarch64_ext_limm@@Base+0x15c>
   3f290:	mov	w1, #0xf                   	// #15
   3f294:	and	w2, w19, #0xf
   3f298:	and	w4, w4, w1
   3f29c:	mov	x5, #0xffff                	// #65535
   3f2a0:	mov	w3, #0x10                  	// #16
   3f2a4:	cmp	w3, w0, lsl #3
   3f2a8:	b.ls	3f300 <aarch64_ext_limm@@Base+0xd8>  // b.plast
   3f2ac:	mov	w0, #0x0                   	// #0
   3f2b0:	ldp	x19, x20, [sp, #16]
   3f2b4:	ldr	x21, [sp, #32]
   3f2b8:	ldp	x29, x30, [sp], #48
   3f2bc:	ret
   3f2c0:	cmp	w2, #0x3b
   3f2c4:	b.ls	3f3e4 <aarch64_ext_limm@@Base+0x1bc>  // b.plast
   3f2c8:	sub	w2, w2, #0x3c
   3f2cc:	cmp	w2, #0x1
   3f2d0:	b.hi	3f2ac <aarch64_ext_limm@@Base+0x84>  // b.pmore
   3f2d4:	mov	w1, #0x1                   	// #1
   3f2d8:	and	w2, w19, #0x1
   3f2dc:	and	w4, w4, w1
   3f2e0:	mov	x5, #0x3                   	// #3
   3f2e4:	mov	w3, #0x2                   	// #2
   3f2e8:	b	3f2a4 <aarch64_ext_limm@@Base+0x7c>
   3f2ec:	mov	w3, #0x40                  	// #64
   3f2f0:	mov	w1, #0x3f                  	// #63
   3f2f4:	cmp	w3, w0, lsl #3
   3f2f8:	mov	x5, #0xffffffffffffffff    	// #-1
   3f2fc:	b.hi	3f2ac <aarch64_ext_limm@@Base+0x84>  // b.pmore
   3f300:	cmp	w2, w1
   3f304:	b.eq	3f2ac <aarch64_ext_limm@@Base+0x84>  // b.none
   3f308:	add	w1, w2, #0x1
   3f30c:	mov	x2, #0x1                   	// #1
   3f310:	lsl	x2, x2, x1
   3f314:	sub	x2, x2, #0x1
   3f318:	cbz	w4, 3f330 <aarch64_ext_limm@@Base+0x108>
   3f31c:	sub	w1, w3, w4
   3f320:	lsr	x4, x2, x4
   3f324:	lsl	x2, x2, x1
   3f328:	and	x2, x2, x5
   3f32c:	orr	x2, x2, x4
   3f330:	cmp	w3, #0x10
   3f334:	b.eq	3f350 <aarch64_ext_limm@@Base+0x128>  // b.none
   3f338:	b.hi	3f3b0 <aarch64_ext_limm@@Base+0x188>  // b.pmore
   3f33c:	cmp	w3, #0x4
   3f340:	b.eq	3f3a4 <aarch64_ext_limm@@Base+0x17c>  // b.none
   3f344:	cmp	w3, #0x8
   3f348:	b.ne	3f398 <aarch64_ext_limm@@Base+0x170>  // b.any
   3f34c:	orr	x2, x2, x2, lsl #8
   3f350:	orr	x2, x2, x2, lsl #16
   3f354:	orr	x2, x2, x2, lsl #32
   3f358:	lsl	w1, w0, #2
   3f35c:	mov	x3, #0xffffffffffffffff    	// #-1
   3f360:	mov	w0, #0x1                   	// #1
   3f364:	lsl	x3, x3, x1
   3f368:	lsl	x1, x3, x1
   3f36c:	bic	x2, x2, x1
   3f370:	str	x2, [x20, #16]
   3f374:	ldp	x19, x20, [sp, #16]
   3f378:	ldr	x21, [sp, #32]
   3f37c:	ldp	x29, x30, [sp], #48
   3f380:	ret
   3f384:	mov	w1, #0x1f                  	// #31
   3f388:	mov	x5, #0xffffffff            	// #4294967295
   3f38c:	and	w4, w4, w1
   3f390:	mov	w3, #0x20                  	// #32
   3f394:	b	3f2a4 <aarch64_ext_limm@@Base+0x7c>
   3f398:	cmp	w3, #0x2
   3f39c:	b.ne	3f3c0 <aarch64_ext_limm@@Base+0x198>  // b.any
   3f3a0:	orr	x2, x2, x2, lsl #2
   3f3a4:	orr	x2, x2, x2, lsl #4
   3f3a8:	orr	x2, x2, x2, lsl #8
   3f3ac:	b	3f350 <aarch64_ext_limm@@Base+0x128>
   3f3b0:	cmp	w3, #0x20
   3f3b4:	b.eq	3f354 <aarch64_ext_limm@@Base+0x12c>  // b.none
   3f3b8:	cmp	w3, #0x40
   3f3bc:	b.eq	3f358 <aarch64_ext_limm@@Base+0x130>  // b.none
   3f3c0:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3f3c4:	add	x3, x3, #0x710
   3f3c8:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3f3cc:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   3f3d0:	add	x3, x3, #0x3a8
   3f3d4:	add	x1, x1, #0xfd0
   3f3d8:	add	x0, x0, #0x870
   3f3dc:	mov	w2, #0x37f                 	// #895
   3f3e0:	bl	35ac0 <__assert_fail@plt>
   3f3e4:	mov	w1, #0x3                   	// #3
   3f3e8:	and	w2, w19, #0x3
   3f3ec:	and	w4, w4, w1
   3f3f0:	mov	x5, #0xf                   	// #15
   3f3f4:	mov	w3, #0x4                   	// #4
   3f3f8:	b	3f2a4 <aarch64_ext_limm@@Base+0x7c>
   3f3fc:	mov	w1, #0x7                   	// #7
   3f400:	and	w2, w19, #0x7
   3f404:	and	w4, w4, w1
   3f408:	mov	x5, #0xff                  	// #255
   3f40c:	mov	w3, #0x8                   	// #8
   3f410:	b	3f2a4 <aarch64_ext_limm@@Base+0x7c>
   3f414:	nop

000000000003f418 <aarch64_ext_inv_limm@@Base>:
   3f418:	stp	x29, x30, [sp, #-32]!
   3f41c:	mov	x29, sp
   3f420:	str	x19, [sp, #16]
   3f424:	mov	x19, x1
   3f428:	bl	35420 <aarch64_ext_limm@plt>
   3f42c:	cbz	w0, 3f440 <aarch64_ext_inv_limm@@Base+0x28>
   3f430:	ldr	x1, [x19, #16]
   3f434:	mov	w0, #0x1                   	// #1
   3f438:	mvn	x1, x1
   3f43c:	str	x1, [x19, #16]
   3f440:	ldr	x19, [sp, #16]
   3f444:	ldp	x29, x30, [sp], #32
   3f448:	ret
   3f44c:	nop

000000000003f450 <aarch64_ext_ft@@Base>:
   3f450:	stp	x29, x30, [sp, #-48]!
   3f454:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   3f458:	mov	x29, sp
   3f45c:	ldr	x4, [x4, #3944]
   3f460:	stp	x19, x20, [sp, #16]
   3f464:	mov	x19, x1
   3f468:	ldr	x0, [x3, #8]
   3f46c:	mov	w3, #0xffffffff            	// #-1
   3f470:	ldp	w6, w5, [x4, #96]
   3f474:	ldr	w1, [x0, #16]
   3f478:	ldr	w7, [x4, #300]
   3f47c:	ldr	w0, [x4, #296]
   3f480:	lsr	w6, w2, w6
   3f484:	lsl	w4, w3, w5
   3f488:	bic	w4, w6, w4
   3f48c:	str	w4, [x19, #16]
   3f490:	sub	w1, w1, #0x3d
   3f494:	lsr	w0, w2, w0
   3f498:	cmp	w1, #0x3
   3f49c:	lsl	w3, w3, w7
   3f4a0:	bic	w3, w0, w3
   3f4a4:	b.hi	3f4d8 <aarch64_ext_ft@@Base+0x88>  // b.pmore
   3f4a8:	cmp	w3, #0x2
   3f4ac:	b.hi	3f4c8 <aarch64_ext_ft@@Base+0x78>  // b.pmore
   3f4b0:	add	w3, w3, #0x7
   3f4b4:	mov	w0, #0x1                   	// #1
   3f4b8:	strb	w3, [x19, #4]
   3f4bc:	ldp	x19, x20, [sp, #16]
   3f4c0:	ldp	x29, x30, [sp], #48
   3f4c4:	ret
   3f4c8:	mov	w0, #0x0                   	// #0
   3f4cc:	ldp	x19, x20, [sp, #16]
   3f4d0:	ldp	x29, x30, [sp], #48
   3f4d4:	ret
   3f4d8:	mov	w0, w2
   3f4dc:	mov	w4, #0x25                  	// #37
   3f4e0:	mov	w3, #0x22                  	// #34
   3f4e4:	mov	w2, #0x2                   	// #2
   3f4e8:	mov	w1, #0x0                   	// #0
   3f4ec:	bl	35390 <extract_fields@plt>
   3f4f0:	mov	w20, w0
   3f4f4:	cmp	w0, #0x4
   3f4f8:	b.hi	3f4c8 <aarch64_ext_ft@@Base+0x78>  // b.pmore
   3f4fc:	str	x21, [sp, #32]
   3f500:	add	w21, w0, #0x5
   3f504:	and	w21, w21, #0xff
   3f508:	mov	w0, w21
   3f50c:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3f510:	cmp	w20, w0
   3f514:	b.ne	3f528 <aarch64_ext_ft@@Base+0xd8>  // b.any
   3f518:	strb	w21, [x19, #4]
   3f51c:	mov	w0, #0x1                   	// #1
   3f520:	ldr	x21, [sp, #32]
   3f524:	b	3f4bc <aarch64_ext_ft@@Base+0x6c>
   3f528:	bl	3c310 <aarch64_opcode_encode@@Base+0x1fb8>
   3f52c:	nop

000000000003f530 <aarch64_ext_addr_simple@@Base>:
   3f530:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   3f534:	mov	w3, #0xffffffff            	// #-1
   3f538:	mov	w0, #0x1                   	// #1
   3f53c:	ldr	x4, [x4, #3944]
   3f540:	ldp	w5, w4, [x4, #112]
   3f544:	lsr	w2, w2, w5
   3f548:	lsl	w3, w3, w4
   3f54c:	bic	w3, w2, w3
   3f550:	str	w3, [x1, #16]
   3f554:	ret

000000000003f558 <aarch64_ext_addr_offset@@Base>:
   3f558:	stp	x29, x30, [sp, #-80]!
   3f55c:	mov	x29, sp
   3f560:	stp	x19, x20, [sp, #16]
   3f564:	ldr	w20, [x1, #8]
   3f568:	stp	x21, x22, [sp, #32]
   3f56c:	sbfiz	x4, x20, #3, #32
   3f570:	stp	x23, x24, [sp, #48]
   3f574:	sub	x4, x4, w20, sxtw
   3f578:	add	x4, x3, x4, lsl #3
   3f57c:	ldrb	w21, [x4, #28]
   3f580:	cbnz	w21, 3f650 <aarch64_ext_addr_offset@@Base+0xf8>
   3f584:	mov	x23, x1
   3f588:	add	x24, sp, #0x48
   3f58c:	ldr	x1, [x3, #8]
   3f590:	mov	x22, x0
   3f594:	mov	w19, w2
   3f598:	mov	x0, x3
   3f59c:	mov	w2, w20
   3f5a0:	mov	x3, x24
   3f5a4:	add	x1, x1, #0x38
   3f5a8:	bl	35360 <aarch64_find_best_match@plt>
   3f5ac:	cbnz	w0, 3f648 <aarch64_ext_addr_offset@@Base+0xf0>
   3f5b0:	strb	w21, [x23, #4]
   3f5b4:	adrp	x21, a6000 <aarch64_operands@@Base+0x16bd0>
   3f5b8:	mov	w20, #0xffffffff            	// #-1
   3f5bc:	mov	w0, w19
   3f5c0:	ldp	w4, w3, [x22, #20]
   3f5c4:	mov	w2, #0x1                   	// #1
   3f5c8:	ldr	x21, [x21, #3944]
   3f5cc:	mov	w1, #0x0                   	// #0
   3f5d0:	lsl	x4, x4, #3
   3f5d4:	add	x6, x4, x21
   3f5d8:	ldr	w5, [x4, x21]
   3f5dc:	ldr	w4, [x6, #4]
   3f5e0:	lsr	w5, w19, w5
   3f5e4:	lsl	w4, w20, w4
   3f5e8:	bic	w4, w5, w4
   3f5ec:	str	w4, [x23, #16]
   3f5f0:	bl	35390 <extract_fields@plt>
   3f5f4:	sbfx	x0, x0, #0, #9
   3f5f8:	ldr	w1, [x22, #28]
   3f5fc:	str	w0, [x23, #20]
   3f600:	lsl	x0, x1, #3
   3f604:	add	x1, x0, x21
   3f608:	ldr	w2, [x0, x21]
   3f60c:	ldr	w0, [x1, #4]
   3f610:	lsr	w19, w19, w2
   3f614:	lsl	w20, w20, w0
   3f618:	bic	w19, w19, w20
   3f61c:	cmp	w19, #0x1
   3f620:	b.ne	3f630 <aarch64_ext_addr_offset@@Base+0xd8>  // b.any
   3f624:	ldrb	w0, [x23, #28]
   3f628:	orr	w0, w0, #0x6
   3f62c:	strb	w0, [x23, #28]
   3f630:	mov	w0, #0x1                   	// #1
   3f634:	ldp	x19, x20, [sp, #16]
   3f638:	ldp	x21, x22, [sp, #32]
   3f63c:	ldp	x23, x24, [sp, #48]
   3f640:	ldp	x29, x30, [sp], #80
   3f644:	ret
   3f648:	ldrb	w21, [x24, w20, sxtw]
   3f64c:	b	3f5b0 <aarch64_ext_addr_offset@@Base+0x58>
   3f650:	bl	3c3a0 <aarch64_opcode_encode@@Base+0x2048>
   3f654:	nop

000000000003f658 <aarch64_ext_addr_regoff@@Base>:
   3f658:	stp	x29, x30, [sp, #-80]!
   3f65c:	mov	x29, sp
   3f660:	stp	x19, x20, [sp, #16]
   3f664:	adrp	x19, a6000 <aarch64_operands@@Base+0x16bd0>
   3f668:	mov	x20, x1
   3f66c:	ldr	x19, [x19, #3944]
   3f670:	stp	x21, x22, [sp, #32]
   3f674:	mov	w21, w2
   3f678:	mov	w22, #0xffffffff            	// #-1
   3f67c:	str	x23, [sp, #48]
   3f680:	ldp	w7, w4, [x19, #112]
   3f684:	mov	x23, x3
   3f688:	ldp	w6, w2, [x19, #224]
   3f68c:	mov	w1, #0x1                   	// #1
   3f690:	ldp	w0, w5, [x19, #240]
   3f694:	lsr	w7, w21, w7
   3f698:	lsr	w6, w21, w6
   3f69c:	lsl	w4, w22, w4
   3f6a0:	bic	w4, w7, w4
   3f6a4:	lsl	w2, w22, w2
   3f6a8:	bic	w2, w6, w2
   3f6ac:	lsl	w5, w22, w5
   3f6b0:	stp	w4, w2, [x20, #16]
   3f6b4:	lsr	w0, w21, w0
   3f6b8:	bic	w0, w0, w5
   3f6bc:	bl	35bb0 <aarch64_get_operand_modifier_from_value@plt>
   3f6c0:	cmp	w0, #0x9
   3f6c4:	ldp	w2, w1, [x19, #248]
   3f6c8:	mov	w3, #0x5                   	// #5
   3f6cc:	csel	w0, w0, w3, ne  // ne = any
   3f6d0:	str	w0, [x20, #32]
   3f6d4:	lsr	w21, w21, w2
   3f6d8:	lsl	w22, w22, w1
   3f6dc:	bics	wzr, w21, w22
   3f6e0:	b.ne	3f70c <aarch64_ext_addr_regoff@@Base+0xb4>  // b.any
   3f6e4:	ldrb	w0, [x20, #36]
   3f6e8:	str	xzr, [x20, #40]
   3f6ec:	and	w0, w0, #0xfffffffd
   3f6f0:	strb	w0, [x20, #36]
   3f6f4:	mov	w0, #0x1                   	// #1
   3f6f8:	ldp	x19, x20, [sp, #16]
   3f6fc:	ldp	x21, x22, [sp, #32]
   3f700:	ldr	x23, [sp, #48]
   3f704:	ldp	x29, x30, [sp], #80
   3f708:	ret
   3f70c:	ldr	w19, [x20, #8]
   3f710:	sbfiz	x0, x19, #3, #32
   3f714:	sub	x0, x0, w19, sxtw
   3f718:	add	x0, x23, x0, lsl #3
   3f71c:	ldrb	w21, [x0, #28]
   3f720:	cbnz	w21, 3f7b4 <aarch64_ext_addr_regoff@@Base+0x15c>
   3f724:	ldr	x1, [x23, #8]
   3f728:	add	x22, sp, #0x40
   3f72c:	mov	x0, x23
   3f730:	mov	x3, x22
   3f734:	mov	w2, w19
   3f738:	add	x1, x1, #0x38
   3f73c:	bl	35360 <aarch64_find_best_match@plt>
   3f740:	cbnz	w0, 3f7ac <aarch64_ext_addr_regoff@@Base+0x154>
   3f744:	strb	w21, [x20, #4]
   3f748:	mov	w0, w21
   3f74c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3f750:	and	w0, w0, #0xff
   3f754:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   3f758:	add	x1, x1, #0x710
   3f75c:	add	x2, x1, #0x200
   3f760:	cmp	w0, #0x10
   3f764:	ldp	x2, x3, [x2, #32]
   3f768:	stp	x2, x3, [sp, #64]
   3f76c:	b.hi	3f7b8 <aarch64_ext_addr_regoff@@Base+0x160>  // b.pmore
   3f770:	sub	w0, w0, #0x1
   3f774:	ldrb	w0, [x22, w0, uxtw]
   3f778:	cmp	w0, #0xff
   3f77c:	b.eq	3f7d4 <aarch64_ext_addr_regoff@@Base+0x17c>  // b.none
   3f780:	ldrb	w1, [x20, #36]
   3f784:	and	x0, x0, #0xff
   3f788:	str	x0, [x20, #40]
   3f78c:	orr	w0, w1, #0x2
   3f790:	strb	w0, [x20, #36]
   3f794:	mov	w0, #0x1                   	// #1
   3f798:	ldp	x19, x20, [sp, #16]
   3f79c:	ldp	x21, x22, [sp, #32]
   3f7a0:	ldr	x23, [sp, #48]
   3f7a4:	ldp	x29, x30, [sp], #80
   3f7a8:	ret
   3f7ac:	ldrb	w21, [x22, w19, sxtw]
   3f7b0:	b	3f744 <aarch64_ext_addr_regoff@@Base+0xec>
   3f7b4:	bl	3c3a0 <aarch64_opcode_encode@@Base+0x2048>
   3f7b8:	mov	x3, x1
   3f7bc:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   3f7c0:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3f7c4:	add	x0, x0, #0x870
   3f7c8:	add	x1, x1, #0x610
   3f7cc:	mov	w2, #0x200                 	// #512
   3f7d0:	bl	35ac0 <__assert_fail@plt>
   3f7d4:	bl	3c288 <aarch64_opcode_encode@@Base+0x1f30>

000000000003f7d8 <aarch64_ext_addr_simm@@Base>:
   3f7d8:	stp	x29, x30, [sp, #-96]!
   3f7dc:	mov	x29, sp
   3f7e0:	stp	x23, x24, [sp, #48]
   3f7e4:	ldr	w24, [x1, #8]
   3f7e8:	stp	x19, x20, [sp, #16]
   3f7ec:	mov	x19, x1
   3f7f0:	sbfiz	x1, x24, #3, #32
   3f7f4:	stp	x21, x22, [sp, #32]
   3f7f8:	sub	x1, x1, w24, sxtw
   3f7fc:	str	x25, [sp, #64]
   3f800:	add	x1, x3, x1, lsl #3
   3f804:	ldrb	w23, [x1, #28]
   3f808:	cbnz	w23, 3f988 <aarch64_ext_addr_simm@@Base+0x1b0>
   3f80c:	mov	x20, x3
   3f810:	add	x25, sp, #0x58
   3f814:	mov	x21, x0
   3f818:	mov	w22, w2
   3f81c:	mov	x3, x25
   3f820:	mov	w2, w24
   3f824:	ldr	x1, [x20, #8]
   3f828:	mov	x0, x20
   3f82c:	add	x1, x1, #0x38
   3f830:	bl	35360 <aarch64_find_best_match@plt>
   3f834:	cbnz	w0, 3f914 <aarch64_ext_addr_simm@@Base+0x13c>
   3f838:	adrp	x24, a6000 <aarch64_operands@@Base+0x16bd0>
   3f83c:	strb	w23, [x19, #4]
   3f840:	mov	w4, #0xffffffff            	// #-1
   3f844:	ldr	x1, [x24, #3944]
   3f848:	ldr	w3, [x21, #20]
   3f84c:	ldp	w2, w0, [x1, #112]
   3f850:	ubfiz	x5, x3, #3, #32
   3f854:	add	x6, x5, x1
   3f858:	lsr	w2, w22, w2
   3f85c:	lsl	w0, w4, w0
   3f860:	bic	w0, w2, w0
   3f864:	str	w0, [x19, #16]
   3f868:	ldr	w0, [x5, x1]
   3f86c:	ldr	w1, [x6, #4]
   3f870:	add	w2, w1, w4
   3f874:	lsr	w0, w22, w0
   3f878:	lsl	w4, w4, w1
   3f87c:	cmp	w2, #0x1f
   3f880:	bic	w4, w0, w4
   3f884:	b.hi	3f98c <aarch64_ext_addr_simm@@Base+0x1b4>  // b.pmore
   3f888:	mov	x0, #0x2                   	// #2
   3f88c:	mov	x1, #0x1                   	// #1
   3f890:	lsl	x0, x0, x2
   3f894:	sub	x0, x0, #0x1
   3f898:	and	w4, w4, w0
   3f89c:	lsl	x0, x1, x2
   3f8a0:	eor	x4, x4, x0
   3f8a4:	cmp	w3, #0x2c
   3f8a8:	sub	x4, x4, x0
   3f8ac:	str	w4, [x19, #20]
   3f8b0:	ccmp	w23, #0x19, #0x4, ne  // ne = any
   3f8b4:	b.ne	3f8d0 <aarch64_ext_addr_simm@@Base+0xf8>  // b.any
   3f8b8:	mov	w0, w23
   3f8bc:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3f8c0:	ldr	w1, [x19, #20]
   3f8c4:	and	w0, w0, #0xff
   3f8c8:	mul	w1, w1, w0
   3f8cc:	str	w1, [x19, #20]
   3f8d0:	ldr	x0, [x20, #8]
   3f8d4:	ldr	w0, [x0, #16]
   3f8d8:	sub	w1, w0, #0x3d
   3f8dc:	sub	w0, w0, #0x3a
   3f8e0:	cmp	w1, #0x1
   3f8e4:	ccmp	w0, #0x1, #0x0, hi  // hi = pmore
   3f8e8:	b.hi	3f91c <aarch64_ext_addr_simm@@Base+0x144>  // b.pmore
   3f8ec:	ldrb	w0, [x19, #28]
   3f8f0:	and	w0, w0, #0xfffffffd
   3f8f4:	strb	w0, [x19, #28]
   3f8f8:	mov	w0, #0x1                   	// #1
   3f8fc:	ldp	x19, x20, [sp, #16]
   3f900:	ldp	x21, x22, [sp, #32]
   3f904:	ldp	x23, x24, [sp, #48]
   3f908:	ldr	x25, [sp, #64]
   3f90c:	ldp	x29, x30, [sp], #96
   3f910:	ret
   3f914:	ldrb	w23, [x25, w24, sxtw]
   3f918:	b	3f838 <aarch64_ext_addr_simm@@Base+0x60>
   3f91c:	ldrb	w3, [x19, #28]
   3f920:	mov	w0, #0xffffffff            	// #-1
   3f924:	ldr	x24, [x24, #3944]
   3f928:	orr	w2, w3, #0x2
   3f92c:	strb	w2, [x19, #28]
   3f930:	ldr	w1, [x21, #24]
   3f934:	lsl	x1, x1, #3
   3f938:	add	x5, x1, x24
   3f93c:	ldr	w4, [x1, x24]
   3f940:	ldr	w1, [x5, #4]
   3f944:	lsr	w22, w22, w4
   3f948:	lsl	w0, w0, w1
   3f94c:	bic	w22, w22, w0
   3f950:	cmp	w22, #0x1
   3f954:	b.eq	3f97c <aarch64_ext_addr_simm@@Base+0x1a4>  // b.none
   3f958:	orr	w2, w2, #0x8
   3f95c:	strb	w2, [x19, #28]
   3f960:	mov	w0, #0x1                   	// #1
   3f964:	ldp	x19, x20, [sp, #16]
   3f968:	ldp	x21, x22, [sp, #32]
   3f96c:	ldp	x23, x24, [sp, #48]
   3f970:	ldr	x25, [sp, #64]
   3f974:	ldp	x29, x30, [sp], #96
   3f978:	ret
   3f97c:	orr	w3, w3, #0x6
   3f980:	strb	w3, [x19, #28]
   3f984:	b	3f8f8 <aarch64_ext_addr_simm@@Base+0x120>
   3f988:	bl	3c3a0 <aarch64_opcode_encode@@Base+0x2048>
   3f98c:	bl	3c2b0 <aarch64_opcode_encode@@Base+0x1f58>

000000000003f990 <aarch64_ext_addr_uimm12@@Base>:
   3f990:	stp	x29, x30, [sp, #-80]!
   3f994:	mov	x29, sp
   3f998:	stp	x21, x22, [sp, #32]
   3f99c:	ldr	w22, [x1, #8]
   3f9a0:	stp	x19, x20, [sp, #16]
   3f9a4:	mov	x19, x1
   3f9a8:	sbfiz	x1, x22, #3, #32
   3f9ac:	stp	x23, x24, [sp, #48]
   3f9b0:	sub	x1, x1, w22, sxtw
   3f9b4:	add	x1, x3, x1, lsl #3
   3f9b8:	ldrb	w23, [x1, #28]
   3f9bc:	cbnz	w23, 3fa98 <aarch64_ext_addr_uimm12@@Base+0x108>
   3f9c0:	ldr	x1, [x3, #8]
   3f9c4:	add	x24, sp, #0x40
   3f9c8:	mov	x21, x0
   3f9cc:	mov	w20, w2
   3f9d0:	mov	x0, x3
   3f9d4:	mov	w2, w22
   3f9d8:	mov	x3, x24
   3f9dc:	add	x1, x1, #0x38
   3f9e0:	bl	35360 <aarch64_find_best_match@plt>
   3f9e4:	cbnz	w0, 3fa90 <aarch64_ext_addr_uimm12@@Base+0x100>
   3f9e8:	strb	w23, [x19, #4]
   3f9ec:	mov	w0, w23
   3f9f0:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3f9f4:	and	w1, w0, #0xff
   3f9f8:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   3f9fc:	add	x2, x2, #0x710
   3fa00:	add	x3, x2, #0x200
   3fa04:	cmp	w1, #0x10
   3fa08:	ldp	x4, x5, [x3, #32]
   3fa0c:	stp	x4, x5, [sp, #64]
   3fa10:	b.hi	3faa0 <aarch64_ext_addr_uimm12@@Base+0x110>  // b.pmore
   3fa14:	sub	w1, w1, #0x1
   3fa18:	ldrb	w6, [x24, w1, uxtw]
   3fa1c:	cmp	w6, #0xff
   3fa20:	b.eq	3fa9c <aarch64_ext_addr_uimm12@@Base+0x10c>  // b.none
   3fa24:	ldp	w2, w4, [x21, #20]
   3fa28:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3fa2c:	mov	w3, #0xffffffff            	// #-1
   3fa30:	mov	w0, #0x1                   	// #1
   3fa34:	ldr	x1, [x1, #3944]
   3fa38:	lsl	x2, x2, #3
   3fa3c:	lsl	x4, x4, #3
   3fa40:	add	x8, x2, x1
   3fa44:	add	x7, x4, x1
   3fa48:	ldr	w5, [x2, x1]
   3fa4c:	ldp	x21, x22, [sp, #32]
   3fa50:	ldr	w2, [x8, #4]
   3fa54:	lsr	w5, w20, w5
   3fa58:	ldp	x23, x24, [sp, #48]
   3fa5c:	lsl	w2, w3, w2
   3fa60:	bic	w2, w5, w2
   3fa64:	str	w2, [x19, #16]
   3fa68:	ldr	w2, [x4, x1]
   3fa6c:	ldr	w1, [x7, #4]
   3fa70:	lsr	w20, w20, w2
   3fa74:	lsl	w3, w3, w1
   3fa78:	bic	w3, w20, w3
   3fa7c:	lsl	w3, w3, w6
   3fa80:	str	w3, [x19, #20]
   3fa84:	ldp	x19, x20, [sp, #16]
   3fa88:	ldp	x29, x30, [sp], #80
   3fa8c:	ret
   3fa90:	ldrb	w23, [x24, w22, sxtw]
   3fa94:	b	3f9e8 <aarch64_ext_addr_uimm12@@Base+0x58>
   3fa98:	bl	3c3a0 <aarch64_opcode_encode@@Base+0x2048>
   3fa9c:	bl	3c288 <aarch64_opcode_encode@@Base+0x1f30>
   3faa0:	mov	x3, x2
   3faa4:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3faa8:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   3faac:	add	x1, x1, #0x610
   3fab0:	add	x0, x0, #0x870
   3fab4:	mov	w2, #0x200                 	// #512
   3fab8:	bl	35ac0 <__assert_fail@plt>
   3fabc:	nop

000000000003fac0 <aarch64_ext_addr_simm10@@Base>:
   3fac0:	stp	x29, x30, [sp, #-80]!
   3fac4:	mov	x29, sp
   3fac8:	stp	x21, x22, [sp, #32]
   3facc:	ldr	w21, [x1, #8]
   3fad0:	stp	x19, x20, [sp, #16]
   3fad4:	mov	x20, x0
   3fad8:	sbfiz	x0, x21, #3, #32
   3fadc:	stp	x23, x24, [sp, #48]
   3fae0:	sub	x0, x0, w21, sxtw
   3fae4:	add	x0, x3, x0, lsl #3
   3fae8:	ldrb	w22, [x0, #28]
   3faec:	cbnz	w22, 3fbbc <aarch64_ext_addr_simm10@@Base+0xfc>
   3faf0:	mov	x23, x1
   3faf4:	add	x24, sp, #0x48
   3faf8:	ldr	x1, [x3, #8]
   3fafc:	mov	w19, w2
   3fb00:	mov	x0, x3
   3fb04:	mov	w2, w21
   3fb08:	mov	x3, x24
   3fb0c:	add	x1, x1, #0x38
   3fb10:	bl	35360 <aarch64_find_best_match@plt>
   3fb14:	cbnz	w0, 3fbb4 <aarch64_ext_addr_simm10@@Base+0xf4>
   3fb18:	strb	w22, [x23, #4]
   3fb1c:	adrp	x22, a6000 <aarch64_operands@@Base+0x16bd0>
   3fb20:	mov	w21, #0xffffffff            	// #-1
   3fb24:	mov	w0, w19
   3fb28:	ldp	w5, w3, [x20, #20]
   3fb2c:	mov	w2, #0x2                   	// #2
   3fb30:	ldr	x22, [x22, #3944]
   3fb34:	mov	w1, #0x0                   	// #0
   3fb38:	lsl	x5, x5, #3
   3fb3c:	ldr	w4, [x20, #28]
   3fb40:	add	x7, x5, x22
   3fb44:	ldr	w6, [x5, x22]
   3fb48:	ldr	w5, [x7, #4]
   3fb4c:	lsr	w6, w19, w6
   3fb50:	lsl	w5, w21, w5
   3fb54:	bic	w5, w6, w5
   3fb58:	str	w5, [x23, #16]
   3fb5c:	bl	35390 <extract_fields@plt>
   3fb60:	sbfiz	x0, x0, #3, #10
   3fb64:	ldr	w1, [x20, #32]
   3fb68:	str	w0, [x23, #20]
   3fb6c:	lsl	x0, x1, #3
   3fb70:	add	x1, x0, x22
   3fb74:	ldr	w2, [x0, x22]
   3fb78:	ldr	w0, [x1, #4]
   3fb7c:	lsr	w19, w19, w2
   3fb80:	lsl	w21, w21, w0
   3fb84:	bic	w19, w19, w21
   3fb88:	cmp	w19, #0x1
   3fb8c:	b.ne	3fb9c <aarch64_ext_addr_simm10@@Base+0xdc>  // b.any
   3fb90:	ldrb	w0, [x23, #28]
   3fb94:	orr	w0, w0, #0x6
   3fb98:	strb	w0, [x23, #28]
   3fb9c:	mov	w0, #0x1                   	// #1
   3fba0:	ldp	x19, x20, [sp, #16]
   3fba4:	ldp	x21, x22, [sp, #32]
   3fba8:	ldp	x23, x24, [sp, #48]
   3fbac:	ldp	x29, x30, [sp], #80
   3fbb0:	ret
   3fbb4:	ldrb	w22, [x24, w21, sxtw]
   3fbb8:	b	3fb18 <aarch64_ext_addr_simm10@@Base+0x58>
   3fbbc:	bl	3c3a0 <aarch64_opcode_encode@@Base+0x2048>

000000000003fbc0 <aarch64_ext_simd_addr_post@@Base>:
   3fbc0:	stp	x29, x30, [sp, #-48]!
   3fbc4:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   3fbc8:	mov	w0, #0xffffffff            	// #-1
   3fbcc:	mov	x29, sp
   3fbd0:	ldr	x4, [x4, #3944]
   3fbd4:	stp	x19, x20, [sp, #16]
   3fbd8:	mov	x19, x1
   3fbdc:	mov	x20, x3
   3fbe0:	ldr	w1, [x4, #116]
   3fbe4:	ldr	w6, [x4, #224]
   3fbe8:	ldr	x5, [x3, #8]
   3fbec:	lsl	w1, w0, w1
   3fbf0:	ldr	w3, [x4, #112]
   3fbf4:	ldr	w4, [x4, #228]
   3fbf8:	lsr	w3, w2, w3
   3fbfc:	bic	w1, w3, w1
   3fc00:	lsl	w0, w0, w4
   3fc04:	lsr	w2, w2, w6
   3fc08:	bic	w2, w2, w0
   3fc0c:	ldr	x0, [x5, #120]
   3fc10:	stp	w1, w2, [x19, #16]
   3fc14:	cmp	w2, #0x1f
   3fc18:	b.eq	3fc40 <aarch64_ext_simd_addr_post@@Base+0x80>  // b.none
   3fc1c:	ldrb	w1, [x19, #28]
   3fc20:	mov	w0, #0x1                   	// #1
   3fc24:	str	w0, [x19, #24]
   3fc28:	mov	w0, #0x1                   	// #1
   3fc2c:	orr	w1, w1, #0x2
   3fc30:	strb	w1, [x19, #28]
   3fc34:	ldp	x19, x20, [sp, #16]
   3fc38:	ldp	x29, x30, [sp], #48
   3fc3c:	ret
   3fc40:	ldr	w1, [x5, #32]
   3fc44:	str	x21, [sp, #32]
   3fc48:	cmp	w1, #0x25
   3fc4c:	b.ne	3fc9c <aarch64_ext_simd_addr_post@@Base+0xdc>  // b.any
   3fc50:	ubfx	w0, w0, #24, #3
   3fc54:	mov	w21, #0x1                   	// #1
   3fc58:	cmp	w0, w21
   3fc5c:	b.eq	3fc68 <aarch64_ext_simd_addr_post@@Base+0xa8>  // b.none
   3fc60:	ldrb	w0, [x20, #40]
   3fc64:	ubfx	x21, x0, #5, #3
   3fc68:	ldrb	w0, [x20, #28]
   3fc6c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3fc70:	and	w0, w0, #0xff
   3fc74:	ldrb	w1, [x19, #28]
   3fc78:	mul	w0, w0, w21
   3fc7c:	orr	w1, w1, #0x2
   3fc80:	ldr	x21, [sp, #32]
   3fc84:	str	w0, [x19, #20]
   3fc88:	strb	w1, [x19, #28]
   3fc8c:	mov	w0, #0x1                   	// #1
   3fc90:	ldp	x19, x20, [sp, #16]
   3fc94:	ldp	x29, x30, [sp], #48
   3fc98:	ret
   3fc9c:	ldrb	w0, [x20, #28]
   3fca0:	ldrb	w21, [x20, #40]
   3fca4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3fca8:	mov	w1, w0
   3fcac:	ubfx	x21, x21, #5, #3
   3fcb0:	ldrb	w0, [x20, #28]
   3fcb4:	and	w20, w1, #0xff
   3fcb8:	mul	w20, w20, w21
   3fcbc:	bl	358f0 <aarch64_get_qualifier_nelem@plt>
   3fcc0:	and	w0, w0, #0xff
   3fcc4:	ldrb	w1, [x19, #28]
   3fcc8:	ldr	x21, [sp, #32]
   3fccc:	orr	w1, w1, #0x2
   3fcd0:	mul	w0, w0, w20
   3fcd4:	strb	w1, [x19, #28]
   3fcd8:	str	w0, [x19, #20]
   3fcdc:	mov	w0, #0x1                   	// #1
   3fce0:	ldp	x19, x20, [sp, #16]
   3fce4:	ldp	x29, x30, [sp], #48
   3fce8:	ret
   3fcec:	nop

000000000003fcf0 <aarch64_ext_cond@@Base>:
   3fcf0:	stp	x29, x30, [sp, #-32]!
   3fcf4:	adrp	x3, a6000 <aarch64_operands@@Base+0x16bd0>
   3fcf8:	mov	w0, #0xffffffff            	// #-1
   3fcfc:	mov	x29, sp
   3fd00:	ldr	x3, [x3, #3944]
   3fd04:	str	x19, [sp, #16]
   3fd08:	mov	x19, x1
   3fd0c:	ldr	w4, [x3, #184]
   3fd10:	ldr	w1, [x3, #188]
   3fd14:	lsr	w2, w2, w4
   3fd18:	lsl	w0, w0, w1
   3fd1c:	bic	w0, w2, w0
   3fd20:	bl	35310 <get_cond_from_value@plt>
   3fd24:	mov	x1, x0
   3fd28:	str	x1, [x19, #16]
   3fd2c:	mov	w0, #0x1                   	// #1
   3fd30:	ldr	x19, [sp, #16]
   3fd34:	ldp	x29, x30, [sp], #32
   3fd38:	ret
   3fd3c:	nop

000000000003fd40 <aarch64_ext_sysreg@@Base>:
   3fd40:	stp	x29, x30, [sp, #-32]!
   3fd44:	mov	w0, w2
   3fd48:	mov	w7, #0x11                  	// #17
   3fd4c:	mov	x29, sp
   3fd50:	stp	x19, x20, [sp, #16]
   3fd54:	mov	x19, x1
   3fd58:	mov	x20, x3
   3fd5c:	mov	w1, #0x0                   	// #0
   3fd60:	mov	w6, #0x12                  	// #18
   3fd64:	mov	w5, #0x13                  	// #19
   3fd68:	mov	w4, #0x14                  	// #20
   3fd6c:	mov	w3, #0x15                  	// #21
   3fd70:	mov	w2, #0x5                   	// #5
   3fd74:	bl	35390 <extract_fields@plt>
   3fd78:	str	w0, [x19, #16]
   3fd7c:	ldr	x0, [x20, #8]
   3fd80:	ldr	w1, [x0, #16]
   3fd84:	str	wzr, [x19, #20]
   3fd88:	cmp	w1, #0x46
   3fd8c:	b.eq	3fda0 <aarch64_ext_sysreg@@Base+0x60>  // b.none
   3fd90:	mov	w0, #0x1                   	// #1
   3fd94:	ldp	x19, x20, [sp, #16]
   3fd98:	ldp	x29, x30, [sp], #32
   3fd9c:	ret
   3fda0:	ldr	x0, [x0, #120]
   3fda4:	mov	x1, #0x20000000            	// #536870912
   3fda8:	and	x0, x0, #0x60000000
   3fdac:	cmp	x0, x1
   3fdb0:	b.eq	3fdcc <aarch64_ext_sysreg@@Base+0x8c>  // b.none
   3fdb4:	mov	x1, #0x40000000            	// #1073741824
   3fdb8:	cmp	x0, x1
   3fdbc:	b.ne	3fd90 <aarch64_ext_sysreg@@Base+0x50>  // b.any
   3fdc0:	mov	w0, #0x10                  	// #16
   3fdc4:	str	w0, [x19, #20]
   3fdc8:	b	3fd90 <aarch64_ext_sysreg@@Base+0x50>
   3fdcc:	mov	w0, #0x8                   	// #8
   3fdd0:	str	w0, [x19, #20]
   3fdd4:	mov	w0, #0x1                   	// #1
   3fdd8:	ldp	x19, x20, [sp, #16]
   3fddc:	ldp	x29, x30, [sp], #32
   3fde0:	ret
   3fde4:	nop

000000000003fde8 <aarch64_ext_pstatefield@@Base>:
   3fde8:	stp	x29, x30, [sp, #-32]!
   3fdec:	mov	w0, w2
   3fdf0:	mov	w4, #0x11                  	// #17
   3fdf4:	mov	x29, sp
   3fdf8:	mov	w2, #0x2                   	// #2
   3fdfc:	mov	w3, #0x14                  	// #20
   3fe00:	str	x19, [sp, #16]
   3fe04:	mov	x19, x1
   3fe08:	mov	w1, #0x0                   	// #0
   3fe0c:	bl	35390 <extract_fields@plt>
   3fe10:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   3fe14:	str	w0, [x19, #16]
   3fe18:	ldr	x1, [x1, #3832]
   3fe1c:	ldr	x2, [x1]
   3fe20:	cbz	x2, 3fe54 <aarch64_ext_pstatefield@@Base+0x6c>
   3fe24:	add	x1, x1, #0x8
   3fe28:	b	3fe34 <aarch64_ext_pstatefield@@Base+0x4c>
   3fe2c:	ldur	x2, [x1, #-8]
   3fe30:	cbz	x2, 3fe54 <aarch64_ext_pstatefield@@Base+0x6c>
   3fe34:	ldr	w2, [x1]
   3fe38:	add	x1, x1, #0x10
   3fe3c:	cmp	w0, w2
   3fe40:	b.ne	3fe2c <aarch64_ext_pstatefield@@Base+0x44>  // b.any
   3fe44:	mov	w0, #0x1                   	// #1
   3fe48:	ldr	x19, [sp, #16]
   3fe4c:	ldp	x29, x30, [sp], #32
   3fe50:	ret
   3fe54:	mov	w0, #0x0                   	// #0
   3fe58:	ldr	x19, [sp, #16]
   3fe5c:	ldp	x29, x30, [sp], #32
   3fe60:	ret
   3fe64:	nop

000000000003fe68 <aarch64_ext_sysins_op@@Base>:
   3fe68:	stp	x29, x30, [sp, #-32]!
   3fe6c:	mov	w0, w2
   3fe70:	mov	w7, #0x11                  	// #17
   3fe74:	mov	x29, sp
   3fe78:	str	x19, [sp, #16]
   3fe7c:	mov	x19, x1
   3fe80:	mov	w2, #0x5                   	// #5
   3fe84:	mov	w6, #0x12                  	// #18
   3fe88:	mov	w5, #0x13                  	// #19
   3fe8c:	mov	w4, #0x14                  	// #20
   3fe90:	mov	w3, #0x15                  	// #21
   3fe94:	mov	w1, #0x0                   	// #0
   3fe98:	bl	35390 <extract_fields@plt>
   3fe9c:	ldr	w2, [x19]
   3fea0:	cmp	w2, #0x63
   3fea4:	b.eq	3ff40 <aarch64_ext_sysins_op@@Base+0xd8>  // b.none
   3fea8:	b.hi	3fef8 <aarch64_ext_sysins_op@@Base+0x90>  // b.pmore
   3feac:	cmp	w2, #0x61
   3feb0:	b.eq	3ff28 <aarch64_ext_sysins_op@@Base+0xc0>  // b.none
   3feb4:	cmp	w2, #0x62
   3feb8:	b.ne	3ff4c <aarch64_ext_sysins_op@@Base+0xe4>  // b.any
   3febc:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   3fec0:	ldr	x2, [x2, #3920]
   3fec4:	ldr	x1, [x2]
   3fec8:	cbnz	x1, 3fed8 <aarch64_ext_sysins_op@@Base+0x70>
   3fecc:	b	3ff18 <aarch64_ext_sysins_op@@Base+0xb0>
   3fed0:	ldr	x3, [x2, #16]!
   3fed4:	cbz	x3, 3ff18 <aarch64_ext_sysins_op@@Base+0xb0>
   3fed8:	ldr	w3, [x2, #8]
   3fedc:	cmp	w3, w0
   3fee0:	b.ne	3fed0 <aarch64_ext_sysins_op@@Base+0x68>  // b.any
   3fee4:	str	x2, [x19, #16]
   3fee8:	mov	w0, #0x1                   	// #1
   3feec:	ldr	x19, [sp, #16]
   3fef0:	ldp	x29, x30, [sp], #32
   3fef4:	ret
   3fef8:	cmp	w2, #0x64
   3fefc:	b.eq	3ff34 <aarch64_ext_sysins_op@@Base+0xcc>  // b.none
   3ff00:	cmp	w2, #0x65
   3ff04:	b.ne	3ff4c <aarch64_ext_sysins_op@@Base+0xe4>  // b.any
   3ff08:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   3ff0c:	and	w0, w0, #0xfffffff8
   3ff10:	ldr	x2, [x2, #4064]
   3ff14:	b	3fec4 <aarch64_ext_sysins_op@@Base+0x5c>
   3ff18:	mov	w0, #0x0                   	// #0
   3ff1c:	ldr	x19, [sp, #16]
   3ff20:	ldp	x29, x30, [sp], #32
   3ff24:	ret
   3ff28:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   3ff2c:	ldr	x2, [x2, #3992]
   3ff30:	b	3fec4 <aarch64_ext_sysins_op@@Base+0x5c>
   3ff34:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   3ff38:	ldr	x2, [x2, #3896]
   3ff3c:	b	3fec4 <aarch64_ext_sysins_op@@Base+0x5c>
   3ff40:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   3ff44:	ldr	x2, [x2, #3888]
   3ff48:	b	3fec4 <aarch64_ext_sysins_op@@Base+0x5c>
   3ff4c:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   3ff50:	add	x3, x3, #0x710
   3ff54:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   3ff58:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   3ff5c:	add	x3, x3, #0x3b8
   3ff60:	add	x1, x1, #0xfd0
   3ff64:	add	x0, x0, #0x870
   3ff68:	mov	w2, #0x4e6                 	// #1254
   3ff6c:	bl	35ac0 <__assert_fail@plt>

000000000003ff70 <aarch64_ext_barrier@@Base>:
   3ff70:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   3ff74:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3ff78:	mov	w3, #0xffffffff            	// #-1
   3ff7c:	ldr	x4, [x4, #3944]
   3ff80:	ldr	x5, [x0, #4040]
   3ff84:	mov	w0, #0x1                   	// #1
   3ff88:	ldp	w6, w4, [x4, #144]
   3ff8c:	lsr	w2, w2, w6
   3ff90:	lsl	w3, w3, w4
   3ff94:	bic	w3, w2, w3
   3ff98:	add	x3, x5, x3, lsl #4
   3ff9c:	str	x3, [x1, #16]
   3ffa0:	ret
   3ffa4:	nop

000000000003ffa8 <aarch64_ext_prfop@@Base>:
   3ffa8:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   3ffac:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   3ffb0:	mov	w3, #0xffffffff            	// #-1
   3ffb4:	ldr	x4, [x4, #3944]
   3ffb8:	ldr	x5, [x0, #3960]
   3ffbc:	mov	w0, #0x1                   	// #1
   3ffc0:	ldp	w6, w4, [x4, #96]
   3ffc4:	lsr	w2, w2, w6
   3ffc8:	lsl	w3, w3, w4
   3ffcc:	bic	w3, w2, w3
   3ffd0:	add	x3, x5, x3, lsl #4
   3ffd4:	str	x3, [x1, #16]
   3ffd8:	ret
   3ffdc:	nop

000000000003ffe0 <aarch64_ext_hint@@Base>:
   3ffe0:	stp	x29, x30, [sp, #-32]!
   3ffe4:	mov	w0, w2
   3ffe8:	mov	w3, #0x12                  	// #18
   3ffec:	mov	x29, sp
   3fff0:	mov	w2, #0x2                   	// #2
   3fff4:	mov	w4, #0x11                  	// #17
   3fff8:	str	x19, [sp, #16]
   3fffc:	mov	x19, x1
   40000:	mov	w1, #0x0                   	// #0
   40004:	bl	35390 <extract_fields@plt>
   40008:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   4000c:	ldr	x2, [x1, #4016]
   40010:	ldr	x3, [x2]
   40014:	cbz	x3, 4005c <aarch64_ext_hint@@Base+0x7c>
   40018:	add	x2, x2, #0x8
   4001c:	mov	w3, #0x0                   	// #0
   40020:	b	40030 <aarch64_ext_hint@@Base+0x50>
   40024:	ldur	x4, [x2, #-8]
   40028:	add	w3, w3, #0x1
   4002c:	cbz	x4, 4005c <aarch64_ext_hint@@Base+0x7c>
   40030:	ldrb	w4, [x2]
   40034:	add	x2, x2, #0x10
   40038:	cmp	w4, w0
   4003c:	b.ne	40024 <aarch64_ext_hint@@Base+0x44>  // b.any
   40040:	ldr	x1, [x1, #4016]
   40044:	mov	w0, #0x1                   	// #1
   40048:	add	x3, x1, w3, sxtw #4
   4004c:	str	x3, [x19, #16]
   40050:	ldr	x19, [sp, #16]
   40054:	ldp	x29, x30, [sp], #32
   40058:	ret
   4005c:	mov	w0, #0x0                   	// #0
   40060:	ldr	x19, [sp, #16]
   40064:	ldp	x29, x30, [sp], #32
   40068:	ret
   4006c:	nop

0000000000040070 <aarch64_ext_reg_extended@@Base>:
   40070:	stp	x29, x30, [sp, #-64]!
   40074:	mov	x29, sp
   40078:	stp	x19, x20, [sp, #16]
   4007c:	adrp	x20, a6000 <aarch64_operands@@Base+0x16bd0>
   40080:	mov	x19, x1
   40084:	ldr	x20, [x20, #3944]
   40088:	stp	x21, x22, [sp, #32]
   4008c:	mov	w22, w2
   40090:	mov	w21, #0xffffffff            	// #-1
   40094:	str	x23, [sp, #48]
   40098:	ldp	w4, w2, [x20, #224]
   4009c:	mov	x23, x3
   400a0:	ldr	w0, [x20, #240]
   400a4:	mov	w1, #0x1                   	// #1
   400a8:	ldr	w3, [x20, #244]
   400ac:	lsr	w4, w22, w4
   400b0:	lsl	w2, w21, w2
   400b4:	bic	w2, w4, w2
   400b8:	str	w2, [x19, #16]
   400bc:	lsr	w2, w22, w0
   400c0:	lsl	w0, w21, w3
   400c4:	bic	w0, w2, w0
   400c8:	bl	35bb0 <aarch64_get_operand_modifier_from_value@plt>
   400cc:	str	w0, [x19, #32]
   400d0:	ldp	w2, w3, [x20, #176]
   400d4:	ldrb	w1, [x19, #36]
   400d8:	lsr	w22, w22, w2
   400dc:	orr	w1, w1, #0x1
   400e0:	lsl	w21, w21, w3
   400e4:	bic	w21, w22, w21
   400e8:	strb	w1, [x19, #36]
   400ec:	str	x21, [x19, #40]
   400f0:	ldrb	w1, [x23, #28]
   400f4:	cbz	w1, 4014c <aarch64_ext_reg_extended@@Base+0xdc>
   400f8:	mov	w1, #0x1                   	// #1
   400fc:	strb	w1, [x19, #4]
   40100:	ldrb	w1, [x23, #28]
   40104:	cmp	w1, #0x2
   40108:	b.eq	40124 <aarch64_ext_reg_extended@@Base+0xb4>  // b.none
   4010c:	mov	w0, #0x1                   	// #1
   40110:	ldp	x19, x20, [sp, #16]
   40114:	ldp	x21, x22, [sp, #32]
   40118:	ldr	x23, [sp, #48]
   4011c:	ldp	x29, x30, [sp], #64
   40120:	ret
   40124:	and	w0, w0, #0xfffffffb
   40128:	cmp	w0, #0x9
   4012c:	b.ne	4010c <aarch64_ext_reg_extended@@Base+0x9c>  // b.any
   40130:	strb	w1, [x19, #4]
   40134:	mov	w0, #0x1                   	// #1
   40138:	ldp	x19, x20, [sp, #16]
   4013c:	ldp	x21, x22, [sp, #32]
   40140:	ldr	x23, [sp, #48]
   40144:	ldp	x29, x30, [sp], #64
   40148:	ret
   4014c:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   40150:	add	x3, x3, #0x710
   40154:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   40158:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   4015c:	add	x3, x3, #0x3d0
   40160:	add	x1, x1, #0xfd0
   40164:	add	x0, x0, #0x3e0
   40168:	mov	w2, #0x547                 	// #1351
   4016c:	bl	35ac0 <__assert_fail@plt>

0000000000040170 <aarch64_ext_reg_shifted@@Base>:
   40170:	stp	x29, x30, [sp, #-48]!
   40174:	mov	w4, #0xffffffff            	// #-1
   40178:	mov	x29, sp
   4017c:	stp	x21, x22, [sp, #32]
   40180:	adrp	x21, a6000 <aarch64_operands@@Base+0x16bd0>
   40184:	mov	x22, x3
   40188:	ldr	x5, [x21, #3944]
   4018c:	stp	x19, x20, [sp, #16]
   40190:	mov	w20, w2
   40194:	mov	x19, x1
   40198:	mov	w1, #0x0                   	// #0
   4019c:	ldp	w3, w2, [x5, #224]
   401a0:	ldr	w0, [x5, #280]
   401a4:	ldr	w5, [x5, #284]
   401a8:	lsr	w3, w20, w3
   401ac:	lsl	w2, w4, w2
   401b0:	bic	w2, w3, w2
   401b4:	lsl	w4, w4, w5
   401b8:	str	w2, [x19, #16]
   401bc:	lsr	w0, w20, w0
   401c0:	bic	w0, w0, w4
   401c4:	bl	35bb0 <aarch64_get_operand_modifier_from_value@plt>
   401c8:	str	w0, [x19, #32]
   401cc:	cmp	w0, #0x2
   401d0:	b.eq	40214 <aarch64_ext_reg_shifted@@Base+0xa4>  // b.none
   401d4:	ldr	x21, [x21, #3944]
   401d8:	mov	w2, #0xffffffff            	// #-1
   401dc:	ldrb	w1, [x19, #36]
   401e0:	mov	w0, #0x1                   	// #1
   401e4:	ldr	w4, [x21, #304]
   401e8:	orr	w1, w1, w0
   401ec:	ldr	w3, [x21, #308]
   401f0:	strb	w1, [x19, #36]
   401f4:	lsr	w20, w20, w4
   401f8:	lsl	w2, w2, w3
   401fc:	bic	w20, w20, w2
   40200:	str	x20, [x19, #40]
   40204:	ldp	x19, x20, [sp, #16]
   40208:	ldp	x21, x22, [sp, #32]
   4020c:	ldp	x29, x30, [sp], #48
   40210:	ret
   40214:	ldr	x1, [x22, #8]
   40218:	mov	w0, #0x0                   	// #0
   4021c:	ldr	w1, [x1, #16]
   40220:	cmp	w1, #0x42
   40224:	b.eq	401d4 <aarch64_ext_reg_shifted@@Base+0x64>  // b.none
   40228:	ldp	x19, x20, [sp, #16]
   4022c:	ldp	x21, x22, [sp, #32]
   40230:	ldp	x29, x30, [sp], #48
   40234:	ret

0000000000040238 <aarch64_ext_sve_addr_ri_s4xvl@@Base>:
   40238:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   4023c:	ldr	w7, [x0, #20]
   40240:	mov	w4, #0xffffffff            	// #-1
   40244:	ldrb	w6, [x1, #28]
   40248:	ldr	x5, [x5, #3944]
   4024c:	lsl	x7, x7, #3
   40250:	and	w6, w6, #0xfffffff9
   40254:	add	x9, x7, x5
   40258:	ldr	w8, [x5, #776]
   4025c:	ldr	w3, [x5, #780]
   40260:	ldr	w5, [x7, x5]
   40264:	ldr	w7, [x9, #4]
   40268:	lsr	w8, w2, w8
   4026c:	lsl	w3, w4, w3
   40270:	bic	w3, w8, w3
   40274:	lsr	w5, w2, w5
   40278:	add	w3, w3, #0x8
   4027c:	lsl	w4, w4, w7
   40280:	bic	w4, w5, w4
   40284:	str	w4, [x1, #16]
   40288:	and	w2, w3, #0xf
   4028c:	sub	w2, w2, #0x8
   40290:	orr	w3, w6, #0x4
   40294:	ldr	w0, [x0, #16]
   40298:	strb	w3, [x1, #28]
   4029c:	ubfx	x0, x0, #5, #3
   402a0:	madd	w0, w0, w2, w2
   402a4:	stp	w0, wzr, [x1, #20]
   402a8:	cbz	w2, 402b4 <aarch64_ext_sve_addr_ri_s4xvl@@Base+0x7c>
   402ac:	mov	w2, #0xf                   	// #15
   402b0:	str	w2, [x1, #32]
   402b4:	ldrb	w2, [x1, #36]
   402b8:	cmp	w0, #0x0
   402bc:	cset	w4, ne  // ne = any
   402c0:	mov	x3, #0x1                   	// #1
   402c4:	and	w2, w2, #0xfffffffc
   402c8:	mov	w0, w3
   402cc:	orr	w2, w2, w4
   402d0:	strb	w2, [x1, #36]
   402d4:	str	x3, [x1, #40]
   402d8:	ret
   402dc:	nop

00000000000402e0 <aarch64_ext_sve_addr_ri_s6xvl@@Base>:
   402e0:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   402e4:	ldr	w7, [x0, #20]
   402e8:	mov	w4, #0xffffffff            	// #-1
   402ec:	ldrb	w6, [x1, #28]
   402f0:	ldr	x5, [x5, #3944]
   402f4:	lsl	x7, x7, #3
   402f8:	and	w6, w6, #0xfffffff9
   402fc:	add	x9, x7, x5
   40300:	ldr	w8, [x5, #800]
   40304:	ldr	w3, [x5, #804]
   40308:	ldr	w5, [x7, x5]
   4030c:	ldr	w7, [x9, #4]
   40310:	lsr	w8, w2, w8
   40314:	lsl	w3, w4, w3
   40318:	bic	w3, w8, w3
   4031c:	lsr	w5, w2, w5
   40320:	add	w3, w3, #0x20
   40324:	lsl	w4, w4, w7
   40328:	bic	w4, w5, w4
   4032c:	str	w4, [x1, #16]
   40330:	and	w2, w3, #0x3f
   40334:	sub	w2, w2, #0x20
   40338:	orr	w3, w6, #0x4
   4033c:	ldr	w0, [x0, #16]
   40340:	strb	w3, [x1, #28]
   40344:	ubfx	x0, x0, #5, #3
   40348:	madd	w0, w0, w2, w2
   4034c:	stp	w0, wzr, [x1, #20]
   40350:	cbz	w2, 4035c <aarch64_ext_sve_addr_ri_s6xvl@@Base+0x7c>
   40354:	mov	w2, #0xf                   	// #15
   40358:	str	w2, [x1, #32]
   4035c:	ldrb	w2, [x1, #36]
   40360:	cmp	w0, #0x0
   40364:	cset	w4, ne  // ne = any
   40368:	mov	x3, #0x1                   	// #1
   4036c:	and	w2, w2, #0xfffffffc
   40370:	mov	w0, w3
   40374:	orr	w2, w2, w4
   40378:	strb	w2, [x1, #36]
   4037c:	str	x3, [x1, #40]
   40380:	ret
   40384:	nop

0000000000040388 <aarch64_ext_sve_addr_ri_s9xvl@@Base>:
   40388:	stp	x29, x30, [sp, #-48]!
   4038c:	mov	w4, #0x16                  	// #22
   40390:	mov	w3, #0x64                  	// #100
   40394:	mov	x29, sp
   40398:	str	x21, [sp, #32]
   4039c:	mov	x21, x0
   403a0:	mov	w0, w2
   403a4:	stp	x19, x20, [sp, #16]
   403a8:	mov	x19, x1
   403ac:	mov	w20, w2
   403b0:	mov	w1, #0x0                   	// #0
   403b4:	mov	w2, #0x2                   	// #2
   403b8:	bl	35390 <extract_fields@plt>
   403bc:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   403c0:	ldr	w3, [x21, #20]
   403c4:	add	w1, w0, #0x100
   403c8:	mov	w4, #0xffffffff            	// #-1
   403cc:	ldr	x2, [x2, #3944]
   403d0:	lsl	x0, x3, #3
   403d4:	and	w1, w1, #0x1ff
   403d8:	ldrb	w3, [x19, #28]
   403dc:	add	x5, x0, x2
   403e0:	sub	w1, w1, #0x100
   403e4:	ldr	w2, [x0, x2]
   403e8:	and	w3, w3, #0xfffffff9
   403ec:	orr	w3, w3, #0x4
   403f0:	ldr	w0, [x5, #4]
   403f4:	lsr	w20, w20, w2
   403f8:	lsl	w4, w4, w0
   403fc:	bic	w20, w20, w4
   40400:	str	w20, [x19, #16]
   40404:	ldr	w0, [x21, #16]
   40408:	strb	w3, [x19, #28]
   4040c:	ubfx	x0, x0, #5, #3
   40410:	madd	w0, w0, w1, w1
   40414:	stp	w0, wzr, [x19, #20]
   40418:	cbz	w1, 40424 <aarch64_ext_sve_addr_ri_s9xvl@@Base+0x9c>
   4041c:	mov	w1, #0xf                   	// #15
   40420:	str	w1, [x19, #32]
   40424:	ldrb	w1, [x19, #36]
   40428:	cmp	w0, #0x0
   4042c:	cset	w3, ne  // ne = any
   40430:	mov	x2, #0x1                   	// #1
   40434:	and	w1, w1, #0xfffffffc
   40438:	mov	w0, w2
   4043c:	orr	w1, w1, w3
   40440:	strb	w1, [x19, #36]
   40444:	ldr	x21, [sp, #32]
   40448:	str	x2, [x19, #40]
   4044c:	ldp	x19, x20, [sp, #16]
   40450:	ldp	x29, x30, [sp], #48
   40454:	ret

0000000000040458 <aarch64_ext_sve_addr_ri_s4@@Base>:
   40458:	mov	x7, x0
   4045c:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   40460:	mov	w4, #0xffffffff            	// #-1
   40464:	ldrb	w6, [x1, #28]
   40468:	ldr	x5, [x5, #3944]
   4046c:	and	w6, w6, #0xfffffff9
   40470:	ldr	w8, [x7, #20]
   40474:	mov	w0, #0x1                   	// #1
   40478:	ldrb	w9, [x1, #36]
   4047c:	ldr	w10, [x5, #776]
   40480:	lsl	x8, x8, #3
   40484:	ldr	w3, [x5, #780]
   40488:	add	x11, x8, x5
   4048c:	lsr	w10, w2, w10
   40490:	ldr	w5, [x8, x5]
   40494:	lsl	w3, w4, w3
   40498:	ldr	w11, [x11, #4]
   4049c:	bic	w3, w10, w3
   404a0:	and	w8, w9, #0xfffffffc
   404a4:	lsr	w5, w2, w5
   404a8:	sbfx	x2, x3, #0, #4
   404ac:	lsl	w4, w4, w11
   404b0:	bic	w4, w5, w4
   404b4:	str	w4, [x1, #16]
   404b8:	orr	w3, w6, #0x4
   404bc:	ldr	w4, [x7, #16]
   404c0:	strb	w3, [x1, #28]
   404c4:	strb	w8, [x1, #36]
   404c8:	ubfx	x3, x4, #5, #3
   404cc:	lsl	w2, w2, w3
   404d0:	stp	w2, wzr, [x1, #20]
   404d4:	ret

00000000000404d8 <aarch64_ext_sve_addr_ri_u6@@Base>:
   404d8:	mov	x7, x0
   404dc:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   404e0:	mov	w4, #0xffffffff            	// #-1
   404e4:	ldrb	w6, [x1, #28]
   404e8:	ldr	x5, [x5, #3944]
   404ec:	mov	w0, #0x1                   	// #1
   404f0:	ldr	w8, [x7, #20]
   404f4:	ldrb	w9, [x1, #36]
   404f8:	ldr	w10, [x5, #800]
   404fc:	lsl	x8, x8, #3
   40500:	ldr	w3, [x5, #804]
   40504:	add	x12, x8, x5
   40508:	lsr	w10, w2, w10
   4050c:	ldr	w11, [x8, x5]
   40510:	lsl	w3, w4, w3
   40514:	ldr	w8, [x12, #4]
   40518:	bic	w3, w10, w3
   4051c:	and	w5, w6, #0xfffffff9
   40520:	and	w6, w9, #0xfffffffc
   40524:	lsr	w2, w2, w11
   40528:	orr	w5, w5, #0x4
   4052c:	lsl	w4, w4, w8
   40530:	bic	w4, w2, w4
   40534:	str	w4, [x1, #16]
   40538:	ldr	w2, [x7, #16]
   4053c:	strb	w5, [x1, #28]
   40540:	strb	w6, [x1, #36]
   40544:	ubfx	x2, x2, #5, #3
   40548:	lsl	w2, w3, w2
   4054c:	stp	w2, wzr, [x1, #20]
   40550:	ret
   40554:	nop

0000000000040558 <aarch64_ext_sve_addr_rr_lsl@@Base>:
   40558:	mov	x8, x0
   4055c:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   40560:	mov	w4, #0xffffffff            	// #-1
   40564:	ldr	x0, [x5, #3944]
   40568:	ldr	w3, [x8, #24]
   4056c:	lsl	x3, x3, #3
   40570:	add	x6, x3, x0
   40574:	ldr	w0, [x3, x0]
   40578:	ldr	w3, [x6, #4]
   4057c:	lsr	w0, w2, w0
   40580:	lsl	w3, w4, w3
   40584:	bic	w3, w0, w3
   40588:	cmp	w3, #0x1f
   4058c:	b.eq	4060c <aarch64_ext_sve_addr_rr_lsl@@Base+0xb4>  // b.none
   40590:	ldr	w0, [x8, #20]
   40594:	mov	w7, #0xffffffff            	// #-1
   40598:	ldr	x5, [x5, #3944]
   4059c:	mov	w9, #0x1                   	// #1
   405a0:	lsl	x0, x0, #3
   405a4:	ldrb	w6, [x1, #28]
   405a8:	add	x12, x0, x5
   405ac:	mov	w10, #0x5                   	// #5
   405b0:	and	w6, w6, #0xfffffff9
   405b4:	ldrb	w4, [x1, #36]
   405b8:	ldr	w11, [x0, x5]
   405bc:	orr	w5, w6, #0x4
   405c0:	ldr	w6, [x12, #4]
   405c4:	mov	w0, w9
   405c8:	stp	w3, w9, [x1, #20]
   405cc:	lsr	w2, w2, w11
   405d0:	strb	w5, [x1, #28]
   405d4:	lsl	w3, w7, w6
   405d8:	bic	w2, w2, w3
   405dc:	str	w2, [x1, #16]
   405e0:	str	w10, [x1, #32]
   405e4:	ldr	w2, [x8, #16]
   405e8:	ubfx	x2, x2, #5, #3
   405ec:	str	x2, [x1, #40]
   405f0:	cmp	x2, #0x0
   405f4:	cset	w3, ne  // ne = any
   405f8:	bfxil	w4, w3, #0, #1
   405fc:	mov	w2, w4
   40600:	bfi	w2, w3, #1, #1
   40604:	strb	w2, [x1, #36]
   40608:	ret
   4060c:	ldr	w4, [x8, #16]
   40610:	mov	w0, #0x0                   	// #0
   40614:	tbz	w4, #8, 40590 <aarch64_ext_sve_addr_rr_lsl@@Base+0x38>
   40618:	ret
   4061c:	nop

0000000000040620 <aarch64_ext_sve_addr_rz_xtw@@Base>:
   40620:	mov	x4, x0
   40624:	adrp	x3, a6000 <aarch64_operands@@Base+0x16bd0>
   40628:	ldp	w0, w9, [x0, #20]
   4062c:	mov	w5, #0xffffffff            	// #-1
   40630:	ldr	x3, [x3, #3944]
   40634:	mov	w12, #0x8                   	// #8
   40638:	lsl	x0, x0, #3
   4063c:	lsl	x9, x9, #3
   40640:	add	x6, x0, x3
   40644:	add	x14, x9, x3
   40648:	ldr	w8, [x4, #28]
   4064c:	mov	w11, #0xc                   	// #12
   40650:	ldr	w10, [x0, x3]
   40654:	mov	w0, #0x1                   	// #1
   40658:	ldr	w6, [x6, #4]
   4065c:	ldrb	w7, [x1, #28]
   40660:	lsl	x8, x8, #3
   40664:	lsr	w10, w2, w10
   40668:	add	x13, x8, x3
   4066c:	lsl	w6, w5, w6
   40670:	bic	w6, w10, w6
   40674:	str	w6, [x1, #16]
   40678:	and	w7, w7, #0xfffffff9
   4067c:	orr	w7, w7, #0x4
   40680:	ldrb	w10, [x1, #36]
   40684:	ldr	w9, [x9, x3]
   40688:	ldr	w6, [x14, #4]
   4068c:	strb	w7, [x1, #28]
   40690:	lsr	w9, w2, w9
   40694:	lsl	w6, w5, w6
   40698:	bic	w6, w9, w6
   4069c:	stp	w6, w0, [x1, #20]
   406a0:	ldr	w6, [x8, x3]
   406a4:	ldr	w3, [x13, #4]
   406a8:	lsr	w2, w2, w6
   406ac:	lsl	w5, w5, w3
   406b0:	bics	wzr, w2, w5
   406b4:	csel	w11, w11, w12, ne  // ne = any
   406b8:	str	w11, [x1, #32]
   406bc:	ldr	w2, [x4, #16]
   406c0:	ubfx	x2, x2, #5, #3
   406c4:	str	x2, [x1, #40]
   406c8:	cmp	x2, #0x0
   406cc:	cset	w2, ne  // ne = any
   406d0:	ubfiz	w2, w2, #1, #7
   406d4:	orr	w2, w2, w0
   406d8:	bfxil	w10, w2, #0, #2
   406dc:	strb	w10, [x1, #36]
   406e0:	ret
   406e4:	nop

00000000000406e8 <aarch64_ext_sve_addr_zi_u5@@Base>:
   406e8:	mov	x7, x0
   406ec:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   406f0:	mov	w4, #0xffffffff            	// #-1
   406f4:	ldrb	w6, [x1, #28]
   406f8:	ldr	x5, [x5, #3944]
   406fc:	mov	w0, #0x1                   	// #1
   40700:	ldr	w8, [x7, #20]
   40704:	ldrb	w9, [x1, #36]
   40708:	ldr	w10, [x5, #344]
   4070c:	lsl	x8, x8, #3
   40710:	ldr	w3, [x5, #348]
   40714:	add	x12, x8, x5
   40718:	lsr	w10, w2, w10
   4071c:	ldr	w11, [x8, x5]
   40720:	lsl	w3, w4, w3
   40724:	ldr	w8, [x12, #4]
   40728:	bic	w3, w10, w3
   4072c:	and	w5, w6, #0xfffffff9
   40730:	and	w6, w9, #0xfffffffc
   40734:	lsr	w2, w2, w11
   40738:	orr	w5, w5, #0x4
   4073c:	lsl	w4, w4, w8
   40740:	bic	w4, w2, w4
   40744:	str	w4, [x1, #16]
   40748:	ldr	w2, [x7, #16]
   4074c:	strb	w5, [x1, #28]
   40750:	strb	w6, [x1, #36]
   40754:	ubfx	x2, x2, #5, #3
   40758:	lsl	w2, w3, w2
   4075c:	stp	w2, wzr, [x1, #20]
   40760:	ret
   40764:	nop

0000000000040768 <aarch64_ext_sve_addr_zz_lsl@@Base>:
   40768:	ldp	w4, w7, [x0, #20]
   4076c:	adrp	x3, a6000 <aarch64_operands@@Base+0x16bd0>
   40770:	mov	w0, #0xffffffff            	// #-1
   40774:	ldr	x3, [x3, #3944]
   40778:	lsl	x4, x4, #3
   4077c:	ubfiz	x7, x7, #3, #32
   40780:	add	x5, x4, x3
   40784:	add	x12, x7, x3
   40788:	ldr	w10, [x4, x3]
   4078c:	ldr	w8, [x3, #848]
   40790:	ldr	w6, [x5, #4]
   40794:	ldr	w9, [x3, #852]
   40798:	lsr	w10, w2, w10
   4079c:	lsr	w8, w2, w8
   407a0:	ldrb	w5, [x1, #28]
   407a4:	lsl	w6, w0, w6
   407a8:	bic	w6, w10, w6
   407ac:	lsl	w9, w0, w9
   407b0:	bic	w11, w8, w9
   407b4:	str	w6, [x1, #16]
   407b8:	cmp	x11, #0x0
   407bc:	cset	w4, ne  // ne = any
   407c0:	bics	wzr, w8, w9
   407c4:	ldr	w8, [x7, x3]
   407c8:	cset	w9, ne  // ne = any
   407cc:	ldr	w7, [x12, #4]
   407d0:	orr	w3, w9, w4, lsl #1
   407d4:	ldrb	w6, [x1, #36]
   407d8:	and	w5, w5, #0xfffffff9
   407dc:	orr	w4, w5, #0x4
   407e0:	lsr	w2, w2, w8
   407e4:	lsl	w0, w0, w7
   407e8:	and	w6, w6, #0xfffffffc
   407ec:	bic	w2, w2, w0
   407f0:	orr	w3, w3, w6
   407f4:	mov	w5, #0x5                   	// #5
   407f8:	mov	w0, #0x1                   	// #1
   407fc:	stp	w2, w0, [x1, #20]
   40800:	strb	w4, [x1, #28]
   40804:	str	w5, [x1, #32]
   40808:	strb	w3, [x1, #36]
   4080c:	str	x11, [x1, #40]
   40810:	ret
   40814:	nop

0000000000040818 <aarch64_ext_sve_addr_zz_sxtw@@Base>:
   40818:	adrp	x3, a6000 <aarch64_operands@@Base+0x16bd0>
   4081c:	mov	w4, #0xffffffff            	// #-1
   40820:	ldp	w6, w8, [x0, #20]
   40824:	ldr	x3, [x3, #3944]
   40828:	lsl	x0, x6, #3
   4082c:	ubfiz	x8, x8, #3, #32
   40830:	add	x10, x0, x3
   40834:	add	x11, x8, x3
   40838:	ldr	w7, [x3, #848]
   4083c:	ldr	w5, [x3, #852]
   40840:	ldr	w9, [x0, x3]
   40844:	lsr	w6, w2, w7
   40848:	ldr	w7, [x10, #4]
   4084c:	lsl	w5, w4, w5
   40850:	bic	w5, w6, w5
   40854:	cmp	x5, #0x0
   40858:	lsr	w9, w2, w9
   4085c:	cset	w6, ne  // ne = any
   40860:	lsl	w7, w4, w7
   40864:	bic	w7, w9, w7
   40868:	ldrb	w0, [x1, #28]
   4086c:	str	w7, [x1, #16]
   40870:	ubfiz	w6, w6, #1, #7
   40874:	ldrb	w7, [x1, #36]
   40878:	orr	w6, w6, #0x1
   4087c:	ldr	w10, [x8, x3]
   40880:	and	w3, w0, #0xfffffff9
   40884:	ldr	w9, [x11, #4]
   40888:	mov	w0, w7
   4088c:	orr	w3, w3, #0x4
   40890:	mov	w8, #0xc                   	// #12
   40894:	bfxil	w0, w6, #0, #2
   40898:	lsr	w2, w2, w10
   4089c:	mov	w6, w0
   408a0:	lsl	w4, w4, w9
   408a4:	mov	w0, #0x1                   	// #1
   408a8:	bic	w4, w2, w4
   408ac:	stp	w4, w0, [x1, #20]
   408b0:	strb	w3, [x1, #28]
   408b4:	str	w8, [x1, #32]
   408b8:	strb	w6, [x1, #36]
   408bc:	str	x5, [x1, #40]
   408c0:	ret
   408c4:	nop

00000000000408c8 <aarch64_ext_sve_addr_zz_uxtw@@Base>:
   408c8:	adrp	x3, a6000 <aarch64_operands@@Base+0x16bd0>
   408cc:	mov	w4, #0xffffffff            	// #-1
   408d0:	ldp	w6, w8, [x0, #20]
   408d4:	ldr	x3, [x3, #3944]
   408d8:	lsl	x0, x6, #3
   408dc:	ubfiz	x8, x8, #3, #32
   408e0:	add	x10, x0, x3
   408e4:	add	x11, x8, x3
   408e8:	ldr	w7, [x3, #848]
   408ec:	ldr	w5, [x3, #852]
   408f0:	ldr	w9, [x0, x3]
   408f4:	lsr	w6, w2, w7
   408f8:	ldr	w7, [x10, #4]
   408fc:	lsl	w5, w4, w5
   40900:	bic	w5, w6, w5
   40904:	cmp	x5, #0x0
   40908:	lsr	w9, w2, w9
   4090c:	cset	w6, ne  // ne = any
   40910:	lsl	w7, w4, w7
   40914:	bic	w7, w9, w7
   40918:	ldrb	w0, [x1, #28]
   4091c:	str	w7, [x1, #16]
   40920:	ubfiz	w6, w6, #1, #7
   40924:	ldrb	w7, [x1, #36]
   40928:	orr	w6, w6, #0x1
   4092c:	ldr	w10, [x8, x3]
   40930:	and	w3, w0, #0xfffffff9
   40934:	ldr	w9, [x11, #4]
   40938:	mov	w0, w7
   4093c:	orr	w3, w3, #0x4
   40940:	mov	w8, #0x8                   	// #8
   40944:	bfxil	w0, w6, #0, #2
   40948:	lsr	w2, w2, w10
   4094c:	mov	w6, w0
   40950:	lsl	w4, w4, w9
   40954:	mov	w0, #0x1                   	// #1
   40958:	bic	w4, w2, w4
   4095c:	stp	w4, w0, [x1, #20]
   40960:	strb	w3, [x1, #28]
   40964:	str	w8, [x1, #32]
   40968:	strb	w6, [x1, #36]
   4096c:	str	x5, [x1, #40]
   40970:	ret
   40974:	nop

0000000000040978 <aarch64_ext_sve_aimm@@Base>:
   40978:	stp	x29, x30, [sp, #-32]!
   4097c:	mov	x29, sp
   40980:	str	x19, [sp, #16]
   40984:	mov	x19, x1
   40988:	bl	35720 <aarch64_ext_imm@plt>
   4098c:	cbz	w0, 409c4 <aarch64_ext_sve_aimm@@Base+0x4c>
   40990:	ldr	x0, [x19, #16]
   40994:	mov	w1, #0x5                   	// #5
   40998:	str	w1, [x19, #32]
   4099c:	mov	w2, #0x0                   	// #0
   409a0:	str	xzr, [x19, #40]
   409a4:	and	x3, x0, #0xff
   409a8:	tbnz	w0, #8, 409d0 <aarch64_ext_sve_aimm@@Base+0x58>
   409ac:	ldrb	w1, [x19, #36]
   409b0:	mov	w0, #0x1                   	// #1
   409b4:	str	x3, [x19, #16]
   409b8:	bfxil	w1, w2, #0, #1
   409bc:	bfi	w1, w2, #1, #1
   409c0:	strb	w1, [x19, #36]
   409c4:	ldr	x19, [sp, #16]
   409c8:	ldp	x29, x30, [sp], #32
   409cc:	ret
   409d0:	cbnz	x3, 409e4 <aarch64_ext_sve_aimm@@Base+0x6c>
   409d4:	mov	x0, #0x8                   	// #8
   409d8:	mov	w2, #0x1                   	// #1
   409dc:	str	x0, [x19, #40]
   409e0:	b	409ac <aarch64_ext_sve_aimm@@Base+0x34>
   409e4:	lsl	x3, x3, #8
   409e8:	b	409ac <aarch64_ext_sve_aimm@@Base+0x34>
   409ec:	nop

00000000000409f0 <aarch64_ext_sve_asimm@@Base>:
   409f0:	stp	x29, x30, [sp, #-32]!
   409f4:	mov	x29, sp
   409f8:	str	x19, [sp, #16]
   409fc:	mov	x19, x1
   40a00:	bl	35720 <aarch64_ext_imm@plt>
   40a04:	cbz	w0, 40a3c <aarch64_ext_sve_asimm@@Base+0x4c>
   40a08:	ldr	x0, [x19, #16]
   40a0c:	mov	w1, #0x5                   	// #5
   40a10:	str	w1, [x19, #32]
   40a14:	mov	w2, #0x0                   	// #0
   40a18:	str	xzr, [x19, #40]
   40a1c:	sxtb	x3, w0
   40a20:	tbnz	w0, #8, 40a48 <aarch64_ext_sve_asimm@@Base+0x58>
   40a24:	ldrb	w1, [x19, #36]
   40a28:	mov	w0, #0x1                   	// #1
   40a2c:	str	x3, [x19, #16]
   40a30:	bfxil	w1, w2, #0, #1
   40a34:	bfi	w1, w2, #1, #1
   40a38:	strb	w1, [x19, #36]
   40a3c:	ldr	x19, [sp, #16]
   40a40:	ldp	x29, x30, [sp], #32
   40a44:	ret
   40a48:	cbnz	x3, 40a5c <aarch64_ext_sve_asimm@@Base+0x6c>
   40a4c:	mov	x0, #0x8                   	// #8
   40a50:	mov	w2, #0x1                   	// #1
   40a54:	str	x0, [x19, #40]
   40a58:	b	40a24 <aarch64_ext_sve_asimm@@Base+0x34>
   40a5c:	lsl	x3, x3, #8
   40a60:	b	40a24 <aarch64_ext_sve_asimm@@Base+0x34>
   40a64:	nop

0000000000040a68 <aarch64_ext_sve_float_half_one@@Base>:
   40a68:	adrp	x3, a6000 <aarch64_operands@@Base+0x16bd0>
   40a6c:	ldr	w4, [x0, #20]
   40a70:	ldrb	w7, [x1, #24]
   40a74:	mov	w6, #0xffffffff            	// #-1
   40a78:	ldr	x3, [x3, #3944]
   40a7c:	lsl	x4, x4, #3
   40a80:	mov	x8, #0x3f000000            	// #1056964608
   40a84:	mov	w0, #0x1                   	// #1
   40a88:	add	x9, x4, x3
   40a8c:	orr	w7, w7, w0
   40a90:	ldr	w4, [x4, x3]
   40a94:	mov	x5, #0x3f800000            	// #1065353216
   40a98:	ldr	w3, [x9, #4]
   40a9c:	lsr	w2, w2, w4
   40aa0:	strb	w7, [x1, #24]
   40aa4:	lsl	w6, w6, w3
   40aa8:	bics	wzr, w2, w6
   40aac:	csel	x5, x5, x8, ne  // ne = any
   40ab0:	str	x5, [x1, #16]
   40ab4:	ret

0000000000040ab8 <aarch64_ext_sve_float_half_two@@Base>:
   40ab8:	adrp	x3, a6000 <aarch64_operands@@Base+0x16bd0>
   40abc:	ldr	w4, [x0, #20]
   40ac0:	ldrb	w7, [x1, #24]
   40ac4:	mov	w6, #0xffffffff            	// #-1
   40ac8:	ldr	x3, [x3, #3944]
   40acc:	lsl	x4, x4, #3
   40ad0:	mov	x8, #0x3f000000            	// #1056964608
   40ad4:	mov	w0, #0x1                   	// #1
   40ad8:	add	x9, x4, x3
   40adc:	orr	w7, w7, w0
   40ae0:	ldr	w4, [x4, x3]
   40ae4:	mov	x5, #0x40000000            	// #1073741824
   40ae8:	ldr	w3, [x9, #4]
   40aec:	lsr	w2, w2, w4
   40af0:	strb	w7, [x1, #24]
   40af4:	lsl	w6, w6, w3
   40af8:	bics	wzr, w2, w6
   40afc:	csel	x5, x5, x8, ne  // ne = any
   40b00:	str	x5, [x1, #16]
   40b04:	ret

0000000000040b08 <aarch64_ext_sve_float_zero_one@@Base>:
   40b08:	adrp	x3, a6000 <aarch64_operands@@Base+0x16bd0>
   40b0c:	ldr	w4, [x0, #20]
   40b10:	ldrb	w7, [x1, #24]
   40b14:	mov	w6, #0xffffffff            	// #-1
   40b18:	ldr	x3, [x3, #3944]
   40b1c:	lsl	x4, x4, #3
   40b20:	mov	w0, #0x1                   	// #1
   40b24:	mov	x5, #0x3f800000            	// #1065353216
   40b28:	add	x8, x4, x3
   40b2c:	orr	w7, w7, w0
   40b30:	ldr	w4, [x4, x3]
   40b34:	ldr	w3, [x8, #4]
   40b38:	lsr	w2, w2, w4
   40b3c:	strb	w7, [x1, #24]
   40b40:	lsl	w6, w6, w3
   40b44:	bics	wzr, w2, w6
   40b48:	csel	x5, x5, xzr, ne  // ne = any
   40b4c:	str	x5, [x1, #16]
   40b50:	ret
   40b54:	nop

0000000000040b58 <aarch64_ext_sve_index@@Base>:
   40b58:	stp	x29, x30, [sp, #-32]!
   40b5c:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   40b60:	mov	w6, #0xffffffff            	// #-1
   40b64:	mov	x29, sp
   40b68:	ldr	w7, [x0, #20]
   40b6c:	mov	w0, w2
   40b70:	ldr	x5, [x5, #3944]
   40b74:	mov	w2, #0x2                   	// #2
   40b78:	lsl	x7, x7, #3
   40b7c:	mov	w4, #0x2b                  	// #43
   40b80:	add	x8, x7, x5
   40b84:	mov	w3, #0x74                  	// #116
   40b88:	ldr	w5, [x7, x5]
   40b8c:	ldr	w7, [x8, #4]
   40b90:	str	x19, [sp, #16]
   40b94:	mov	x19, x1
   40b98:	lsr	w5, w0, w5
   40b9c:	mov	w1, #0x0                   	// #0
   40ba0:	lsl	w6, w6, w7
   40ba4:	bic	w5, w5, w6
   40ba8:	str	w5, [x19, #16]
   40bac:	bl	35390 <extract_fields@plt>
   40bb0:	mov	w2, w0
   40bb4:	ands	w0, w0, #0x1f
   40bb8:	b.eq	40be0 <aarch64_ext_sve_index@@Base+0x88>  // b.none
   40bbc:	tbnz	w2, #0, 40bcc <aarch64_ext_sve_index@@Base+0x74>
   40bc0:	add	w0, w2, w2, lsr #31
   40bc4:	asr	w2, w0, #1
   40bc8:	tbz	w0, #1, 40bc0 <aarch64_ext_sve_index@@Base+0x68>
   40bcc:	add	w2, w2, w2, lsr #31
   40bd0:	mov	w0, #0x1                   	// #1
   40bd4:	asr	w2, w2, #1
   40bd8:	sxtw	x2, w2
   40bdc:	str	x2, [x19, #24]
   40be0:	ldr	x19, [sp, #16]
   40be4:	ldp	x29, x30, [sp], #32
   40be8:	ret
   40bec:	nop

0000000000040bf0 <aarch64_ext_sve_limm_mov@@Base>:
   40bf0:	stp	x29, x30, [sp, #-64]!
   40bf4:	mov	x29, sp
   40bf8:	stp	x19, x20, [sp, #16]
   40bfc:	mov	x19, x3
   40c00:	mov	x20, x1
   40c04:	stp	x21, x22, [sp, #32]
   40c08:	mov	x21, x0
   40c0c:	mov	w22, w2
   40c10:	str	x23, [sp, #48]
   40c14:	mov	x23, x4
   40c18:	ldrb	w0, [x3, #28]
   40c1c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   40c20:	mov	w1, w0
   40c24:	mov	x3, x19
   40c28:	mov	x4, x23
   40c2c:	and	w19, w1, #0xff
   40c30:	mov	w2, w22
   40c34:	mov	x0, x21
   40c38:	mov	x1, x20
   40c3c:	bl	35420 <aarch64_ext_limm@plt>
   40c40:	cbnz	w0, 40c58 <aarch64_ext_sve_limm_mov@@Base+0x68>
   40c44:	ldp	x19, x20, [sp, #16]
   40c48:	ldp	x21, x22, [sp, #32]
   40c4c:	ldr	x23, [sp, #48]
   40c50:	ldp	x29, x30, [sp], #64
   40c54:	ret
   40c58:	ldr	x0, [x20, #16]
   40c5c:	mov	w1, w19
   40c60:	bl	35540 <aarch64_sve_dupm_mov_immediate_p@plt>
   40c64:	cmp	w0, #0x0
   40c68:	cset	w0, ne  // ne = any
   40c6c:	ldp	x19, x20, [sp, #16]
   40c70:	ldp	x21, x22, [sp, #32]
   40c74:	ldr	x23, [sp, #48]
   40c78:	ldp	x29, x30, [sp], #64
   40c7c:	ret

0000000000040c80 <aarch64_ext_sve_quad_index@@Base>:
   40c80:	ldp	w7, w3, [x0, #16]
   40c84:	ubfx	x7, x7, #5, #3
   40c88:	cbz	w3, 40d38 <aarch64_ext_sve_quad_index@@Base+0xb8>
   40c8c:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   40c90:	ubfiz	x3, x3, #3, #32
   40c94:	ldr	w5, [x0, #24]
   40c98:	mov	w8, #0xffffffff            	// #-1
   40c9c:	ldr	x4, [x4, #3944]
   40ca0:	add	x9, x3, x4
   40ca4:	ldr	w6, [x3, x4]
   40ca8:	ldr	w3, [x9, #4]
   40cac:	lsr	w6, w2, w6
   40cb0:	lsl	w3, w8, w3
   40cb4:	bic	w3, w6, w3
   40cb8:	cbz	w5, 40d38 <aarch64_ext_sve_quad_index@@Base+0xb8>
   40cbc:	ubfiz	x5, x5, #3, #32
   40cc0:	ldr	w6, [x0, #28]
   40cc4:	add	x10, x4, x5
   40cc8:	ldr	w9, [x4, x5]
   40ccc:	ldr	w5, [x10, #4]
   40cd0:	lsr	w10, w2, w9
   40cd4:	lsl	w9, w8, w5
   40cd8:	bic	w9, w10, w9
   40cdc:	lsl	w3, w3, w5
   40ce0:	orr	w3, w9, w3
   40ce4:	cbz	w6, 40d38 <aarch64_ext_sve_quad_index@@Base+0xb8>
   40ce8:	ubfiz	x6, x6, #3, #32
   40cec:	ldr	w5, [x0, #32]
   40cf0:	add	x9, x4, x6
   40cf4:	ldr	w0, [x4, x6]
   40cf8:	ldr	w6, [x9, #4]
   40cfc:	lsr	w9, w2, w0
   40d00:	lsl	w0, w8, w6
   40d04:	bic	w0, w9, w0
   40d08:	lsl	w3, w3, w6
   40d0c:	orr	w3, w0, w3
   40d10:	cbz	w5, 40d38 <aarch64_ext_sve_quad_index@@Base+0xb8>
   40d14:	ubfiz	x5, x5, #3, #32
   40d18:	add	x6, x4, x5
   40d1c:	ldr	w0, [x4, x5]
   40d20:	ldr	w5, [x6, #4]
   40d24:	lsr	w4, w2, w0
   40d28:	lsl	w0, w8, w5
   40d2c:	bic	w0, w4, w0
   40d30:	lsl	w3, w3, w5
   40d34:	orr	w3, w0, w3
   40d38:	mov	w0, #0x1                   	// #1
   40d3c:	lsr	w4, w3, w7
   40d40:	lsl	w2, w0, w7
   40d44:	sub	w2, w2, #0x1
   40d48:	and	w3, w2, w3
   40d4c:	str	w3, [x1, #16]
   40d50:	str	x4, [x1, #24]
   40d54:	ret

0000000000040d58 <aarch64_ext_sve_reglist@@Base>:
   40d58:	adrp	x6, a6000 <aarch64_operands@@Base+0x16bd0>
   40d5c:	ldr	w7, [x0, #20]
   40d60:	ldrb	w4, [x1, #16]
   40d64:	mov	w5, #0xffffffff            	// #-1
   40d68:	ldr	x6, [x6, #3944]
   40d6c:	lsl	x7, x7, #3
   40d70:	ldr	x3, [x3, #8]
   40d74:	add	x8, x7, x6
   40d78:	ldr	w7, [x7, x6]
   40d7c:	mov	w0, #0x1                   	// #1
   40d80:	ldr	w6, [x8, #4]
   40d84:	lsr	w2, w2, w7
   40d88:	lsl	w5, w5, w6
   40d8c:	bic	w5, w2, w5
   40d90:	bfxil	w4, w5, #0, #5
   40d94:	strb	w4, [x1, #16]
   40d98:	ldr	x2, [x3, #120]
   40d9c:	lsr	x2, x2, #24
   40da0:	bfi	w4, w2, #5, #3
   40da4:	strb	w4, [x1, #16]
   40da8:	ret
   40dac:	nop

0000000000040db0 <aarch64_ext_sve_scale@@Base>:
   40db0:	stp	x29, x30, [sp, #-32]!
   40db4:	mov	x29, sp
   40db8:	stp	x19, x20, [sp, #16]
   40dbc:	mov	x19, x1
   40dc0:	mov	w20, w2
   40dc4:	bl	35720 <aarch64_ext_imm@plt>
   40dc8:	cbz	w0, 40e18 <aarch64_ext_sve_scale@@Base+0x68>
   40dcc:	adrp	x4, a6000 <aarch64_operands@@Base+0x16bd0>
   40dd0:	mov	w2, #0xe                   	// #14
   40dd4:	str	w2, [x19, #32]
   40dd8:	mov	w3, #0xffffffff            	// #-1
   40ddc:	ldr	x4, [x4, #3944]
   40de0:	mov	w0, #0x1                   	// #1
   40de4:	ldrb	w1, [x19, #36]
   40de8:	ldr	w2, [x4, #780]
   40dec:	ldr	w5, [x4, #776]
   40df0:	lsl	w2, w3, w2
   40df4:	lsr	w4, w20, w5
   40df8:	bics	w2, w4, w2
   40dfc:	cset	w3, ne  // ne = any
   40e00:	add	w2, w2, w0
   40e04:	bfxil	w1, w3, #0, #1
   40e08:	sxtw	x2, w2
   40e0c:	str	x2, [x19, #40]
   40e10:	bfi	w1, w3, #1, #1
   40e14:	strb	w1, [x19, #36]
   40e18:	ldp	x19, x20, [sp, #16]
   40e1c:	ldp	x29, x30, [sp], #32
   40e20:	ret
   40e24:	nop

0000000000040e28 <aarch64_ext_sve_shlimm@@Base>:
   40e28:	stp	x29, x30, [sp, #-32]!
   40e2c:	mov	x29, sp
   40e30:	str	x19, [sp, #16]
   40e34:	mov	x19, x1
   40e38:	bl	35720 <aarch64_ext_imm@plt>
   40e3c:	cbz	w0, 40e84 <aarch64_ext_sve_shlimm@@Base+0x5c>
   40e40:	ldr	x4, [x19, #16]
   40e44:	mov	w0, #0x0                   	// #0
   40e48:	cbz	x4, 40e84 <aarch64_ext_sve_shlimm@@Base+0x5c>
   40e4c:	neg	x2, x4
   40e50:	bics	xzr, x4, x2
   40e54:	and	x2, x2, x4
   40e58:	b.eq	40e78 <aarch64_ext_sve_shlimm@@Base+0x50>  // b.none
   40e5c:	mov	x0, x4
   40e60:	sub	x3, x0, #0x1
   40e64:	and	x0, x0, x3
   40e68:	neg	x2, x0
   40e6c:	bics	xzr, x0, x2
   40e70:	and	x2, x2, x0
   40e74:	b.ne	40e60 <aarch64_ext_sve_shlimm@@Base+0x38>  // b.any
   40e78:	sub	x2, x4, x2
   40e7c:	mov	w0, #0x1                   	// #1
   40e80:	str	x2, [x19, #16]
   40e84:	ldr	x19, [sp, #16]
   40e88:	ldp	x29, x30, [sp], #32
   40e8c:	ret

0000000000040e90 <aarch64_ext_sve_shrimm@@Base>:
   40e90:	stp	x29, x30, [sp, #-32]!
   40e94:	mov	x29, sp
   40e98:	str	x19, [sp, #16]
   40e9c:	mov	x19, x1
   40ea0:	bl	35720 <aarch64_ext_imm@plt>
   40ea4:	cbz	w0, 40ef0 <aarch64_ext_sve_shrimm@@Base+0x60>
   40ea8:	ldr	x1, [x19, #16]
   40eac:	mov	w0, #0x0                   	// #0
   40eb0:	cbz	x1, 40ef0 <aarch64_ext_sve_shrimm@@Base+0x60>
   40eb4:	neg	x2, x1
   40eb8:	bics	xzr, x1, x2
   40ebc:	and	x2, x2, x1
   40ec0:	b.eq	40ee0 <aarch64_ext_sve_shrimm@@Base+0x50>  // b.none
   40ec4:	mov	x0, x1
   40ec8:	sub	x3, x0, #0x1
   40ecc:	and	x0, x0, x3
   40ed0:	neg	x2, x0
   40ed4:	bics	xzr, x0, x2
   40ed8:	and	x2, x2, x0
   40edc:	b.ne	40ec8 <aarch64_ext_sve_shrimm@@Base+0x38>  // b.any
   40ee0:	lsl	x2, x2, #1
   40ee4:	mov	w0, #0x1                   	// #1
   40ee8:	sub	x2, x2, x1
   40eec:	str	x2, [x19, #16]
   40ef0:	ldr	x19, [sp, #16]
   40ef4:	ldp	x29, x30, [sp], #32
   40ef8:	ret
   40efc:	nop

0000000000040f00 <aarch64_decode_insn@@Base>:
   40f00:	stp	x29, x30, [sp, #-96]!
   40f04:	mov	x29, sp
   40f08:	stp	x19, x20, [sp, #16]
   40f0c:	mov	x20, x1
   40f10:	stp	x21, x22, [sp, #32]
   40f14:	mov	w21, w0
   40f18:	stp	x23, x24, [sp, #48]
   40f1c:	mov	x23, x3
   40f20:	stp	x25, x26, [sp, #64]
   40f24:	mov	w26, w2
   40f28:	stp	x27, x28, [sp, #80]
   40f2c:	bl	355a0 <aarch64_opcode_lookup@plt>
   40f30:	cbz	x0, 411c0 <aarch64_decode_insn@@Base+0x2c0>
   40f34:	cbz	x20, 41214 <aarch64_decode_insn@@Base+0x314>
   40f38:	adrp	x22, a6000 <aarch64_operands@@Base+0x16bd0>
   40f3c:	mov	x24, #0xff0                 	// #4080
   40f40:	mov	x19, x0
   40f44:	add	x27, x20, #0x18
   40f48:	ldr	x25, [x22, #4032]
   40f4c:	movk	x24, #0x8c0, lsl #16
   40f50:	b	41040 <aarch64_decode_insn@@Base+0x140>
   40f54:	ldr	w1, [x19, #36]
   40f58:	cbz	w1, 40ff4 <aarch64_decode_insn@@Base+0xf4>
   40f5c:	ldr	x0, [x22, #4032]
   40f60:	ubfiz	x2, x1, #1, #32
   40f64:	add	x1, x2, w1, uxtw
   40f68:	add	x0, x0, x1, lsl #4
   40f6c:	ldr	w1, [x0, #16]
   40f70:	tbnz	w1, #1, 41134 <aarch64_decode_insn@@Base+0x234>
   40f74:	ldr	w1, [x19, #40]
   40f78:	cbz	w1, 40ff4 <aarch64_decode_insn@@Base+0xf4>
   40f7c:	ldr	x0, [x22, #4032]
   40f80:	ubfiz	x2, x1, #1, #32
   40f84:	add	x1, x2, w1, uxtw
   40f88:	add	x0, x0, x1, lsl #4
   40f8c:	ldr	w1, [x0, #16]
   40f90:	tbnz	w1, #1, 41150 <aarch64_decode_insn@@Base+0x250>
   40f94:	ldr	w1, [x19, #44]
   40f98:	cbz	w1, 40ff4 <aarch64_decode_insn@@Base+0xf4>
   40f9c:	ldr	x0, [x22, #4032]
   40fa0:	ubfiz	x2, x1, #1, #32
   40fa4:	add	x1, x2, w1, uxtw
   40fa8:	add	x0, x0, x1, lsl #4
   40fac:	ldr	w1, [x0, #16]
   40fb0:	tbnz	w1, #1, 4116c <aarch64_decode_insn@@Base+0x26c>
   40fb4:	ldr	w1, [x19, #48]
   40fb8:	cbz	w1, 40ff4 <aarch64_decode_insn@@Base+0xf4>
   40fbc:	ldr	x0, [x22, #4032]
   40fc0:	ubfiz	x2, x1, #1, #32
   40fc4:	add	x1, x2, w1, uxtw
   40fc8:	add	x0, x0, x1, lsl #4
   40fcc:	ldr	w1, [x0, #16]
   40fd0:	tbnz	w1, #1, 41188 <aarch64_decode_insn@@Base+0x288>
   40fd4:	ldr	w1, [x19, #52]
   40fd8:	cbz	w1, 40ff4 <aarch64_decode_insn@@Base+0xf4>
   40fdc:	ldr	x0, [x22, #4032]
   40fe0:	ubfiz	x2, x1, #1, #32
   40fe4:	add	x1, x2, w1, uxtw
   40fe8:	add	x0, x0, x1, lsl #4
   40fec:	ldr	w1, [x0, #16]
   40ff0:	tbnz	w1, #1, 411a4 <aarch64_decode_insn@@Base+0x2a4>
   40ff4:	ldr	x6, [x19, #136]
   40ff8:	cbz	x6, 4101c <aarch64_decode_insn@@Base+0x11c>
   40ffc:	mov	x4, x23
   41000:	mov	w1, w21
   41004:	mov	x0, x20
   41008:	mov	x5, #0x0                   	// #0
   4100c:	mov	w3, #0x0                   	// #0
   41010:	mov	x2, #0x0                   	// #0
   41014:	blr	x6
   41018:	cbnz	w0, 41030 <aarch64_decode_insn@@Base+0x130>
   4101c:	mov	x0, x20
   41020:	mov	x1, #0x0                   	// #0
   41024:	bl	354e0 <aarch64_match_operands_constraint@plt>
   41028:	cmp	w0, #0x1
   4102c:	b.eq	411e4 <aarch64_decode_insn@@Base+0x2e4>  // b.none
   41030:	mov	x0, x19
   41034:	bl	35b50 <aarch64_find_next_opcode@plt>
   41038:	mov	x19, x0
   4103c:	cbz	x0, 411c0 <aarch64_decode_insn@@Base+0x2c0>
   41040:	mov	w1, #0x0                   	// #0
   41044:	mov	x0, x20
   41048:	mov	x2, #0x168                 	// #360
   4104c:	bl	35470 <memset@plt>
   41050:	ldp	w1, w28, [x19, #8]
   41054:	eor	w1, w21, w1
   41058:	ands	w28, w1, w28
   4105c:	b.ne	41030 <aarch64_decode_insn@@Base+0x130>  // b.any
   41060:	ldr	w0, [x19, #32]
   41064:	str	w21, [x20]
   41068:	str	x19, [x20, #8]
   4106c:	cbz	w0, 410d8 <aarch64_decode_insn@@Base+0x1d8>
   41070:	ldr	w1, [x19, #36]
   41074:	str	w0, [x20, #24]
   41078:	cbz	w1, 410d8 <aarch64_decode_insn@@Base+0x1d8>
   4107c:	ldr	w0, [x19, #40]
   41080:	mov	w2, #0x1                   	// #1
   41084:	str	w1, [x20, #80]
   41088:	str	w2, [x20, #88]
   4108c:	cbz	w0, 410d8 <aarch64_decode_insn@@Base+0x1d8>
   41090:	ldr	w1, [x19, #44]
   41094:	mov	w2, #0x2                   	// #2
   41098:	str	w0, [x20, #136]
   4109c:	str	w2, [x20, #144]
   410a0:	cbz	w1, 410d8 <aarch64_decode_insn@@Base+0x1d8>
   410a4:	ldr	w0, [x19, #48]
   410a8:	mov	w2, #0x3                   	// #3
   410ac:	str	w1, [x20, #192]
   410b0:	str	w2, [x20, #200]
   410b4:	cbz	w0, 410d8 <aarch64_decode_insn@@Base+0x1d8>
   410b8:	ldr	w1, [x19, #52]
   410bc:	mov	w2, #0x4                   	// #4
   410c0:	str	w0, [x20, #248]
   410c4:	str	w2, [x20, #256]
   410c8:	cbz	w1, 410d8 <aarch64_decode_insn@@Base+0x1d8>
   410cc:	mov	w0, #0x5                   	// #5
   410d0:	str	w1, [x20, #304]
   410d4:	str	w0, [x20, #312]
   410d8:	ldr	x0, [x19, #120]
   410dc:	tst	x0, x24
   410e0:	b.eq	410f0 <aarch64_decode_insn@@Base+0x1f0>  // b.none
   410e4:	mov	x0, x20
   410e8:	bl	3c6a8 <extract_fields@@Base+0x208>
   410ec:	cbz	w0, 41030 <aarch64_decode_insn@@Base+0x130>
   410f0:	mov	x0, x20
   410f4:	bl	3d2c0 <extract_fields@@Base+0xe20>
   410f8:	cbz	w0, 41030 <aarch64_decode_insn@@Base+0x130>
   410fc:	ldr	w0, [x19, #32]
   41100:	cbz	w0, 40ff4 <aarch64_decode_insn@@Base+0xf4>
   41104:	ubfiz	x1, x0, #1, #32
   41108:	add	x0, x1, w0, uxtw
   4110c:	add	x0, x25, x0, lsl #4
   41110:	ldr	w1, [x0, #16]
   41114:	tbz	w1, #1, 40f54 <aarch64_decode_insn@@Base+0x54>
   41118:	mov	x4, x23
   4111c:	mov	x3, x20
   41120:	mov	w2, w21
   41124:	mov	x1, x27
   41128:	bl	355f0 <aarch64_extract_operand@plt>
   4112c:	cbnz	w0, 40f54 <aarch64_decode_insn@@Base+0x54>
   41130:	b	41030 <aarch64_decode_insn@@Base+0x130>
   41134:	mov	x4, x23
   41138:	mov	x3, x20
   4113c:	mov	w2, w21
   41140:	add	x1, x20, #0x50
   41144:	bl	355f0 <aarch64_extract_operand@plt>
   41148:	cbnz	w0, 40f74 <aarch64_decode_insn@@Base+0x74>
   4114c:	b	41030 <aarch64_decode_insn@@Base+0x130>
   41150:	mov	x4, x23
   41154:	mov	x3, x20
   41158:	mov	w2, w21
   4115c:	add	x1, x20, #0x88
   41160:	bl	355f0 <aarch64_extract_operand@plt>
   41164:	cbnz	w0, 40f94 <aarch64_decode_insn@@Base+0x94>
   41168:	b	41030 <aarch64_decode_insn@@Base+0x130>
   4116c:	mov	x4, x23
   41170:	mov	x3, x20
   41174:	mov	w2, w21
   41178:	add	x1, x20, #0xc0
   4117c:	bl	355f0 <aarch64_extract_operand@plt>
   41180:	cbnz	w0, 40fb4 <aarch64_decode_insn@@Base+0xb4>
   41184:	b	41030 <aarch64_decode_insn@@Base+0x130>
   41188:	mov	x4, x23
   4118c:	mov	x3, x20
   41190:	mov	w2, w21
   41194:	add	x1, x20, #0xf8
   41198:	bl	355f0 <aarch64_extract_operand@plt>
   4119c:	cbnz	w0, 40fd4 <aarch64_decode_insn@@Base+0xd4>
   411a0:	b	41030 <aarch64_decode_insn@@Base+0x130>
   411a4:	mov	x4, x23
   411a8:	mov	x3, x20
   411ac:	mov	w2, w21
   411b0:	add	x1, x20, #0x130
   411b4:	bl	355f0 <aarch64_extract_operand@plt>
   411b8:	cbnz	w0, 40ff4 <aarch64_decode_insn@@Base+0xf4>
   411bc:	b	41030 <aarch64_decode_insn@@Base+0x130>
   411c0:	mov	w28, #0x1                   	// #1
   411c4:	mov	w0, w28
   411c8:	ldp	x19, x20, [sp, #16]
   411cc:	ldp	x21, x22, [sp, #32]
   411d0:	ldp	x23, x24, [sp, #48]
   411d4:	ldp	x25, x26, [sp, #64]
   411d8:	ldp	x27, x28, [sp, #80]
   411dc:	ldp	x29, x30, [sp], #96
   411e0:	ret
   411e4:	cbnz	w26, 411c4 <aarch64_decode_insn@@Base+0x2c4>
   411e8:	mov	x1, x23
   411ec:	mov	x0, x20
   411f0:	bl	3d690 <extract_fields@@Base+0x11f0>
   411f4:	mov	w0, w28
   411f8:	ldp	x19, x20, [sp, #16]
   411fc:	ldp	x21, x22, [sp, #32]
   41200:	ldp	x23, x24, [sp, #48]
   41204:	ldp	x25, x26, [sp, #64]
   41208:	ldp	x27, x28, [sp, #80]
   4120c:	ldp	x29, x30, [sp], #96
   41210:	ret
   41214:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   41218:	add	x3, x3, #0x710
   4121c:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   41220:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   41224:	add	x3, x3, #0x3f0
   41228:	add	x1, x1, #0xfd0
   4122c:	add	x0, x0, #0x418
   41230:	mov	w2, #0xb4b                 	// #2891
   41234:	bl	35ac0 <__assert_fail@plt>
   41238:	sub	sp, sp, #0x2a0
   4123c:	stp	x29, x30, [sp, #16]
   41240:	add	x29, sp, #0x10
   41244:	stp	x23, x24, [sp, #64]
   41248:	mov	x23, x2
   4124c:	adrp	x2, fd000 <aarch64_opcode_table@@Base+0x55a20>
   41250:	stp	x19, x20, [sp, #32]
   41254:	mov	w19, w1
   41258:	ldr	w2, [x2, #1640]
   4125c:	ldr	x1, [x23, #88]
   41260:	stp	x21, x22, [sp, #48]
   41264:	mov	w20, #0x1                   	// #1
   41268:	stp	x25, x26, [sp, #80]
   4126c:	add	x21, sp, #0x138
   41270:	tst	x1, #0x80000000
   41274:	strh	w20, [x23, #196]
   41278:	csel	x25, x0, xzr, eq  // eq = none
   4127c:	strb	wzr, [x23, #198]
   41280:	mov	x1, x21
   41284:	stp	xzr, xzr, [x23, #208]
   41288:	mov	w0, w19
   4128c:	str	x3, [sp, #144]
   41290:	bl	352e0 <aarch64_decode_insn@plt>
   41294:	ubfx	x1, x19, #21, #10
   41298:	cmp	w1, #0x1
   4129c:	b.eq	415dc <aarch64_decode_insn@@Base+0x6dc>  // b.none
   412a0:	cbnz	w0, 414a4 <aarch64_decode_insn@@Base+0x5a4>
   412a4:	ldr	x0, [sp, #320]
   412a8:	stp	x27, x28, [sp, #96]
   412ac:	add	x26, x23, #0xd0
   412b0:	ldr	w1, [x0, #16]
   412b4:	cmp	w1, #0x5a
   412b8:	b.eq	415f4 <aarch64_decode_insn@@Base+0x6f4>  // b.none
   412bc:	ldr	x1, [x0, #120]
   412c0:	ldr	x22, [x0]
   412c4:	tbnz	w1, #4, 41608 <aarch64_decode_insn@@Base+0x708>
   412c8:	ldp	x3, x0, [x23]
   412cc:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   412d0:	mov	x2, x22
   412d4:	add	x1, x1, #0xe48
   412d8:	blr	x3
   412dc:	ldr	x27, [sp, #320]
   412e0:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   412e4:	add	x0, x0, #0x438
   412e8:	str	x0, [sp, #152]
   412ec:	add	x0, x27, #0x20
   412f0:	add	x20, x21, #0x18
   412f4:	add	x24, sp, #0xb8
   412f8:	str	x0, [sp, #120]
   412fc:	add	x0, sp, #0xac
   41300:	mov	x28, #0x0                   	// #0
   41304:	mov	w22, #0x0                   	// #0
   41308:	str	x0, [sp, #128]
   4130c:	add	x0, sp, #0xb0
   41310:	str	x0, [sp, #136]
   41314:	str	xzr, [sp, #176]
   41318:	ldr	x0, [sp, #120]
   4131c:	ldr	w0, [x0, x28, lsl #2]
   41320:	cbz	w0, 413b0 <aarch64_decode_insn@@Base+0x4b0>
   41324:	ldr	w0, [x20]
   41328:	cbz	w0, 413b0 <aarch64_decode_insn@@Base+0x4b0>
   4132c:	ldp	x6, x0, [sp, #128]
   41330:	str	x0, [sp]
   41334:	mov	x7, x26
   41338:	mov	w5, w28
   4133c:	mov	x0, x24
   41340:	add	x4, x21, #0x18
   41344:	mov	x3, x27
   41348:	mov	x2, x25
   4134c:	mov	x1, #0x80                  	// #128
   41350:	bl	353b0 <aarch64_print_operand@plt>
   41354:	ldrb	w0, [sp, #184]
   41358:	cbz	w0, 41388 <aarch64_decode_insn@@Base+0x488>
   4135c:	add	w0, w22, #0x1
   41360:	cmp	w22, #0x0
   41364:	mov	w22, w0
   41368:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   4136c:	ldp	x3, x0, [x23]
   41370:	add	x2, x2, #0x430
   41374:	ldr	x4, [sp, #152]
   41378:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   4137c:	add	x1, x1, #0xe48
   41380:	csel	x2, x2, x4, eq  // eq = none
   41384:	blr	x3
   41388:	ldr	w0, [sp, #172]
   4138c:	cbz	w0, 415b4 <aarch64_decode_insn@@Base+0x6b4>
   41390:	ldr	x2, [x23, #120]
   41394:	add	x28, x28, #0x1
   41398:	ldr	x0, [x23, #208]
   4139c:	mov	x1, x23
   413a0:	add	x20, x20, #0x38
   413a4:	blr	x2
   413a8:	cmp	x28, #0x6
   413ac:	b.ne	41318 <aarch64_decode_insn@@Base+0x418>  // b.any
   413b0:	ldr	x2, [sp, #176]
   413b4:	cbz	x2, 414f0 <aarch64_decode_insn@@Base+0x5f0>
   413b8:	adrp	x0, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   413bc:	ldr	w0, [x0, #1496]
   413c0:	cbnz	w0, 414f0 <aarch64_decode_insn@@Base+0x5f0>
   413c4:	ldp	x3, x0, [x23]
   413c8:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   413cc:	add	x1, x1, #0x488
   413d0:	blr	x3
   413d4:	ldr	x0, [sp, #320]
   413d8:	ldr	x1, [x0, #120]
   413dc:	tbz	w1, #4, 41484 <aarch64_decode_insn@@Base+0x584>
   413e0:	mov	w24, #0x1                   	// #1
   413e4:	ldr	x20, [x0]
   413e8:	mov	w1, #0x2e                  	// #46
   413ec:	mov	x0, x20
   413f0:	bl	35840 <strchr@plt>
   413f4:	cbz	x0, 41670 <aarch64_decode_insn@@Base+0x770>
   413f8:	ldr	x27, [sp, #328]
   413fc:	cbz	x27, 41670 <aarch64_decode_insn@@Base+0x770>
   41400:	sub	x26, x0, x20
   41404:	cmp	x26, #0x7
   41408:	b.hi	41694 <aarch64_decode_insn@@Base+0x794>  // b.pmore
   4140c:	add	x28, sp, #0xb8
   41410:	mov	x1, x20
   41414:	mov	x0, x28
   41418:	mov	x2, x26
   4141c:	bl	35a80 <strncpy@plt>
   41420:	adrp	x20, 5c000 <xexit@@Base+0xa80>
   41424:	add	x0, x20, #0x4e8
   41428:	strb	wzr, [x28, x26]
   4142c:	str	x0, [sp, #120]
   41430:	mov	w0, #0x1                   	// #1
   41434:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   41438:	adrp	x22, 5c000 <xexit@@Base+0xa80>
   4143c:	ldr	x4, [x27, w0, uxtw #3]
   41440:	add	x20, x1, #0x4a0
   41444:	cbz	x4, 41480 <aarch64_decode_insn@@Base+0x580>
   41448:	cmp	w0, #0x1
   4144c:	add	w26, w0, #0x1
   41450:	mov	x3, x28
   41454:	ldp	x5, x0, [x23]
   41458:	b.eq	41660 <aarch64_decode_insn@@Base+0x760>  // b.none
   4145c:	add	x2, x22, #0x498
   41460:	mov	x1, x20
   41464:	blr	x5
   41468:	cmp	w26, #0x4
   4146c:	b.eq	41480 <aarch64_decode_insn@@Base+0x580>  // b.none
   41470:	ldr	x27, [sp, #328]
   41474:	mov	w0, w26
   41478:	ldr	x4, [x27, w0, uxtw #3]
   4147c:	cbnz	x4, 41448 <aarch64_decode_insn@@Base+0x548>
   41480:	cbz	w24, 414fc <aarch64_decode_insn@@Base+0x5fc>
   41484:	ldp	x29, x30, [sp, #16]
   41488:	ldp	x19, x20, [sp, #32]
   4148c:	ldp	x21, x22, [sp, #48]
   41490:	ldp	x23, x24, [sp, #64]
   41494:	ldp	x25, x26, [sp, #80]
   41498:	ldp	x27, x28, [sp, #96]
   4149c:	add	sp, sp, #0x2a0
   414a0:	ret
   414a4:	sub	w1, w0, #0x1
   414a8:	cmp	w1, #0x2
   414ac:	b.hi	41708 <aarch64_decode_insn@@Base+0x808>  // b.pmore
   414b0:	adrp	x1, 8c000 <_sch_istable@@Base+0x14208>
   414b4:	add	x1, x1, #0x390
   414b8:	ldr	x3, [x1, w0, uxtw #3]
   414bc:	str	wzr, [x23, #200]
   414c0:	ldp	x4, x0, [x23]
   414c4:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   414c8:	mov	w2, w19
   414cc:	add	x1, x1, #0x450
   414d0:	blr	x4
   414d4:	ldp	x29, x30, [sp, #16]
   414d8:	ldp	x19, x20, [sp, #32]
   414dc:	ldp	x21, x22, [sp, #48]
   414e0:	ldp	x23, x24, [sp, #64]
   414e4:	ldp	x25, x26, [sp, #80]
   414e8:	add	sp, sp, #0x2a0
   414ec:	ret
   414f0:	ldr	x0, [sp, #320]
   414f4:	ldr	x1, [x0, #120]
   414f8:	tbnz	w1, #4, 415ec <aarch64_decode_insn@@Base+0x6ec>
   414fc:	ldr	x4, [sp, #144]
   41500:	adrp	x0, fd000 <aarch64_opcode_table@@Base+0x55a20>
   41504:	add	x5, x0, #0x668
   41508:	mov	x2, x25
   4150c:	add	x5, x5, #0x8
   41510:	mov	w1, w19
   41514:	mov	x0, x21
   41518:	mov	w3, #0x0                   	// #0
   4151c:	bl	35250 <verify_constraints@plt>
   41520:	cmp	w0, #0x3
   41524:	b.ls	4158c <aarch64_decode_insn@@Base+0x68c>  // b.plast
   41528:	cmp	w0, #0x4
   4152c:	b.ne	41484 <aarch64_decode_insn@@Base+0x584>  // b.any
   41530:	adrp	x0, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   41534:	ldr	w0, [x0, #1496]
   41538:	cbnz	w0, 41484 <aarch64_decode_insn@@Base+0x584>
   4153c:	ldr	x0, [sp, #144]
   41540:	ldr	w0, [x0, #28]
   41544:	cbz	w0, 416e4 <aarch64_decode_insn@@Base+0x7e4>
   41548:	ldr	x0, [sp, #144]
   4154c:	ldr	x2, [x0, #8]
   41550:	cbz	x2, 416c0 <aarch64_decode_insn@@Base+0x7c0>
   41554:	ldp	x3, x0, [x23]
   41558:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   4155c:	add	x1, x1, #0x488
   41560:	blr	x3
   41564:	ldr	x0, [sp, #144]
   41568:	ldr	w2, [x0, #4]
   4156c:	tbnz	w2, #31, 41484 <aarch64_decode_insn@@Base+0x584>
   41570:	ldp	x3, x0, [x23]
   41574:	add	w2, w2, #0x1
   41578:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   4157c:	add	x1, x1, #0x4d8
   41580:	blr	x3
   41584:	ldp	x27, x28, [sp, #96]
   41588:	b	414d4 <aarch64_decode_insn@@Base+0x5d4>
   4158c:	cbz	w0, 41484 <aarch64_decode_insn@@Base+0x584>
   41590:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   41594:	add	x3, x3, #0x710
   41598:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   4159c:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   415a0:	add	x3, x3, #0x420
   415a4:	add	x1, x1, #0xfd0
   415a8:	add	x0, x0, #0x870
   415ac:	mov	w2, #0xc79                 	// #3193
   415b0:	bl	35ac0 <__assert_fail@plt>
   415b4:	ldp	x3, x0, [x23]
   415b8:	add	x28, x28, #0x1
   415bc:	mov	x2, x24
   415c0:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   415c4:	add	x1, x1, #0xe48
   415c8:	add	x20, x20, #0x38
   415cc:	blr	x3
   415d0:	cmp	x28, #0x6
   415d4:	b.ne	41318 <aarch64_decode_insn@@Base+0x418>  // b.any
   415d8:	b	413b0 <aarch64_decode_insn@@Base+0x4b0>
   415dc:	cbz	w0, 41698 <aarch64_decode_insn@@Base+0x798>
   415e0:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   415e4:	add	x3, x3, #0x428
   415e8:	b	414bc <aarch64_decode_insn@@Base+0x5bc>
   415ec:	mov	w24, #0x0                   	// #0
   415f0:	b	413e4 <aarch64_decode_insn@@Base+0x4e4>
   415f4:	ldr	x1, [sp, #408]
   415f8:	cmp	x1, #0x1f
   415fc:	b.gt	412bc <aarch64_decode_insn@@Base+0x3bc>
   41600:	strb	w20, [sp, #340]
   41604:	b	412bc <aarch64_decode_insn@@Base+0x3bc>
   41608:	mov	x0, x22
   4160c:	mov	w1, #0x2e                  	// #46
   41610:	bl	35840 <strchr@plt>
   41614:	cbz	x0, 41670 <aarch64_decode_insn@@Base+0x770>
   41618:	ldr	x24, [sp, #328]
   4161c:	cbz	x24, 41670 <aarch64_decode_insn@@Base+0x770>
   41620:	sub	x20, x0, x22
   41624:	cmp	x20, #0x7
   41628:	b.hi	41694 <aarch64_decode_insn@@Base+0x794>  // b.pmore
   4162c:	add	x3, sp, #0xb8
   41630:	mov	x1, x22
   41634:	mov	x2, x20
   41638:	mov	x0, x3
   4163c:	bl	35a80 <strncpy@plt>
   41640:	mov	x2, x0
   41644:	strb	wzr, [x0, x20]
   41648:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   4164c:	ldp	x4, x0, [x23]
   41650:	add	x1, x1, #0x480
   41654:	ldr	x3, [x24]
   41658:	blr	x4
   4165c:	b	412dc <aarch64_decode_insn@@Base+0x3dc>
   41660:	ldr	x2, [sp, #120]
   41664:	mov	x1, x20
   41668:	blr	x5
   4166c:	b	41470 <aarch64_decode_insn@@Base+0x570>
   41670:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   41674:	add	x3, x3, #0x710
   41678:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   4167c:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   41680:	add	x3, x3, #0xd8
   41684:	add	x1, x1, #0xfd0
   41688:	add	x0, x0, #0x468
   4168c:	mov	w2, #0xc19                 	// #3097
   41690:	bl	35ac0 <__assert_fail@plt>
   41694:	bl	3c470 <aarch64_opcode_encode@@Base+0x2118>
   41698:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   4169c:	add	x3, x3, #0x710
   416a0:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   416a4:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   416a8:	add	x3, x3, #0x408
   416ac:	add	x1, x1, #0xfd0
   416b0:	add	x0, x0, #0x440
   416b4:	mov	w2, #0xca8                 	// #3240
   416b8:	stp	x27, x28, [sp, #96]
   416bc:	bl	35ac0 <__assert_fail@plt>
   416c0:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   416c4:	add	x3, x3, #0x710
   416c8:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   416cc:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   416d0:	add	x3, x3, #0x438
   416d4:	add	x1, x1, #0xfd0
   416d8:	add	x0, x0, #0x4c8
   416dc:	mov	w2, #0xc53                 	// #3155
   416e0:	bl	35ac0 <__assert_fail@plt>
   416e4:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   416e8:	add	x3, x3, #0x710
   416ec:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   416f0:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   416f4:	add	x3, x3, #0x438
   416f8:	add	x1, x1, #0xfd0
   416fc:	add	x0, x0, #0x4b0
   41700:	mov	w2, #0xc52                 	// #3154
   41704:	bl	35ac0 <__assert_fail@plt>
   41708:	stp	x27, x28, [sp, #96]
   4170c:	bl	35670 <abort@plt>

0000000000041710 <aarch64_symbol_is_valid@@Base>:
   41710:	cbz	x0, 4175c <aarch64_symbol_is_valid@@Base+0x4c>
   41714:	ldr	x1, [x0, #8]
   41718:	mov	w0, #0x0                   	// #0
   4171c:	cbz	x1, 41730 <aarch64_symbol_is_valid@@Base+0x20>
   41720:	ldrb	w2, [x1]
   41724:	mov	w0, #0x1                   	// #1
   41728:	cmp	w2, #0x24
   4172c:	b.eq	41734 <aarch64_symbol_is_valid@@Base+0x24>  // b.none
   41730:	ret
   41734:	ldrb	w2, [x1, #1]
   41738:	mov	w3, #0x64                  	// #100
   4173c:	cmp	w2, #0x78
   41740:	ccmp	w2, w3, #0x4, ne  // ne = any
   41744:	b.ne	41730 <aarch64_symbol_is_valid@@Base+0x20>  // b.any
   41748:	ldrb	w0, [x1, #2]
   4174c:	cmp	w0, #0x2e
   41750:	ccmp	w0, #0x0, #0x4, ne  // ne = any
   41754:	cset	w0, ne  // ne = any
   41758:	ret
   4175c:	mov	w0, #0x0                   	// #0
   41760:	ret
   41764:	nop

0000000000041768 <print_insn_aarch64@@Base>:
   41768:	stp	x29, x30, [sp, #-128]!
   4176c:	mov	x29, sp
   41770:	stp	x19, x20, [sp, #16]
   41774:	mov	x19, x1
   41778:	ldr	x20, [x1, #224]
   4177c:	stp	x21, x22, [sp, #32]
   41780:	mov	x22, x0
   41784:	stp	x23, x24, [sp, #48]
   41788:	adrp	x23, fd000 <aarch64_opcode_table@@Base+0x55a20>
   4178c:	cbz	x20, 4185c <print_insn_aarch64@@Base+0xf4>
   41790:	ldrb	w2, [x20]
   41794:	cbz	w2, 41858 <print_insn_aarch64@@Base+0xf0>
   41798:	adrp	x24, 5c000 <xexit@@Base+0xa80>
   4179c:	add	x24, x24, #0x500
   417a0:	str	x25, [sp, #64]
   417a4:	adrp	x25, 5c000 <xexit@@Base+0xa80>
   417a8:	add	x25, x25, #0x4f0
   417ac:	nop
   417b0:	mov	x21, x20
   417b4:	cmp	w2, #0x2c
   417b8:	ldrb	w2, [x21, #1]!
   417bc:	b.eq	41848 <print_insn_aarch64@@Base+0xe0>  // b.none
   417c0:	cmp	w2, #0x2c
   417c4:	ccmp	w2, #0x0, #0x4, ne  // ne = any
   417c8:	b.eq	417e0 <print_insn_aarch64@@Base+0x78>  // b.none
   417cc:	nop
   417d0:	ldrb	w0, [x21, #1]!
   417d4:	cmp	w0, #0x2c
   417d8:	ccmp	w0, #0x0, #0x4, ne  // ne = any
   417dc:	b.ne	417d0 <print_insn_aarch64@@Base+0x68>  // b.any
   417e0:	mov	x1, x25
   417e4:	mov	x0, x20
   417e8:	mov	x2, #0xa                   	// #10
   417ec:	bl	35440 <strncmp@plt>
   417f0:	cbz	w0, 41950 <print_insn_aarch64@@Base+0x1e8>
   417f4:	mov	x1, x24
   417f8:	mov	x0, x20
   417fc:	mov	x2, #0x7                   	// #7
   41800:	bl	35440 <strncmp@plt>
   41804:	cbz	w0, 41960 <print_insn_aarch64@@Base+0x1f8>
   41808:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   4180c:	mov	x0, x20
   41810:	add	x1, x1, #0x508
   41814:	mov	x2, #0x8                   	// #8
   41818:	bl	35440 <strncmp@plt>
   4181c:	cbz	w0, 4196c <print_insn_aarch64@@Base+0x204>
   41820:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   41824:	mov	x0, x20
   41828:	add	x1, x1, #0x518
   4182c:	mov	x2, #0x5                   	// #5
   41830:	bl	35440 <strncmp@plt>
   41834:	cbnz	w0, 419a8 <print_insn_aarch64@@Base+0x240>
   41838:	adrp	x0, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   4183c:	ldrb	w2, [x21]
   41840:	str	wzr, [x0, #1496]
   41844:	nop
   41848:	cbz	w2, 41854 <print_insn_aarch64@@Base+0xec>
   4184c:	mov	x20, x21
   41850:	b	417b0 <print_insn_aarch64@@Base+0x48>
   41854:	ldr	x25, [sp, #64]
   41858:	str	xzr, [x19, #224]
   4185c:	ldr	x0, [x19, #48]
   41860:	mov	w1, #0x1                   	// #1
   41864:	str	w1, [x19, #44]
   41868:	cbz	x0, 41980 <print_insn_aarch64@@Base+0x218>
   4186c:	ldr	w1, [x0, #32]
   41870:	ldr	w6, [x19, #84]
   41874:	eor	x1, x1, #0x10
   41878:	ubfx	x1, x1, #4, #1
   4187c:	cbz	w6, 418a4 <print_insn_aarch64@@Base+0x13c>
   41880:	ldr	x7, [x19, #72]
   41884:	ldr	x2, [x7]
   41888:	ldr	w3, [x2, #24]
   4188c:	tbnz	w3, #21, 418a4 <print_insn_aarch64@@Base+0x13c>
   41890:	ldr	x2, [x2]
   41894:	ldr	x2, [x2, #8]
   41898:	ldr	w2, [x2, #8]
   4189c:	cmp	w2, #0x5
   418a0:	b.eq	419d0 <print_insn_aarch64@@Base+0x268>  // b.none
   418a4:	add	x23, x23, #0x668
   418a8:	cmp	w1, #0x1
   418ac:	str	w1, [x23, #48]
   418b0:	b.eq	41930 <print_insn_aarch64@@Base+0x1c8>  // b.none
   418b4:	mov	w20, #0x4                   	// #4
   418b8:	adrp	x24, 41000 <aarch64_decode_insn@@Base+0x100>
   418bc:	mov	w21, w20
   418c0:	add	x24, x24, #0x238
   418c4:	mov	w0, #0x1                   	// #1
   418c8:	ldr	x4, [x19, #104]
   418cc:	stp	w20, w0, [x19, #172]
   418d0:	add	x23, sp, #0x58
   418d4:	mov	x3, x19
   418d8:	mov	x1, x23
   418dc:	mov	w2, w21
   418e0:	mov	x0, x22
   418e4:	blr	x4
   418e8:	cbnz	w0, 41c38 <print_insn_aarch64@@Base+0x4d0>
   418ec:	ldr	w2, [x19, #176]
   418f0:	lsl	w1, w21, #3
   418f4:	mov	x0, x23
   418f8:	cmp	w2, #0x0
   418fc:	cset	w2, eq  // eq = none
   41900:	bl	35530 <bfd_get_bits@plt>
   41904:	mov	w1, w0
   41908:	mov	x2, x19
   4190c:	mov	x0, x22
   41910:	add	x3, sp, #0x60
   41914:	blr	x24
   41918:	mov	w0, w20
   4191c:	ldp	x19, x20, [sp, #16]
   41920:	ldp	x21, x22, [sp, #32]
   41924:	ldp	x23, x24, [sp, #48]
   41928:	ldp	x29, x30, [sp], #128
   4192c:	ret
   41930:	mov	w21, #0x4                   	// #4
   41934:	ldr	x0, [x19, #88]
   41938:	tbnz	w0, #30, 418b4 <print_insn_aarch64@@Base+0x14c>
   4193c:	adrp	x24, 3c000 <aarch64_opcode_encode@@Base+0x1ca8>
   41940:	ldr	w0, [x19, #40]
   41944:	mov	w20, w21
   41948:	add	x24, x24, #0x400
   4194c:	b	418c8 <print_insn_aarch64@@Base+0x160>
   41950:	mov	w0, #0x1                   	// #1
   41954:	ldrb	w2, [x21]
   41958:	str	w0, [x23, #1640]
   4195c:	b	41848 <print_insn_aarch64@@Base+0xe0>
   41960:	ldrb	w2, [x21]
   41964:	str	wzr, [x23, #1640]
   41968:	b	41848 <print_insn_aarch64@@Base+0xe0>
   4196c:	adrp	x0, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   41970:	mov	w1, #0x1                   	// #1
   41974:	ldrb	w2, [x21]
   41978:	str	w1, [x0, #1496]
   4197c:	b	41848 <print_insn_aarch64@@Base+0xe0>
   41980:	ldr	w6, [x19, #84]
   41984:	cbz	w6, 4199c <print_insn_aarch64@@Base+0x234>
   41988:	ldr	x7, [x19, #72]
   4198c:	ldr	x2, [x7]
   41990:	ldr	w3, [x2, #24]
   41994:	and	w1, w3, #0x200000
   41998:	tbz	w3, #21, 41890 <print_insn_aarch64@@Base+0x128>
   4199c:	add	x23, x23, #0x668
   419a0:	str	wzr, [x23, #48]
   419a4:	b	418b4 <print_insn_aarch64@@Base+0x14c>
   419a8:	mov	w2, #0x5                   	// #5
   419ac:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   419b0:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   419b4:	add	x1, x1, #0x520
   419b8:	add	x0, x0, #0x5d8
   419bc:	bl	359e0 <dcgettext@plt>
   419c0:	mov	x1, x20
   419c4:	bl	35a10 <_bfd_error_handler@plt>
   419c8:	ldrb	w2, [x21]
   419cc:	b	41848 <print_insn_aarch64@@Base+0xe0>
   419d0:	ldr	w13, [x19, #80]
   419d4:	adrp	x10, a7000 <aarch64_ext_sysins_op@@Base+0x67198>
   419d8:	ldr	x11, [x19, #240]
   419dc:	add	w2, w13, #0x1
   419e0:	cbnz	x22, 41b40 <print_insn_aarch64@@Base+0x3d8>
   419e4:	add	x4, x10, #0x5d8
   419e8:	mov	w3, #0xffffffff            	// #-1
   419ec:	mov	w14, w3
   419f0:	str	w3, [x4, #4]
   419f4:	cmp	w6, w2
   419f8:	mov	w9, #0xffffffff            	// #-1
   419fc:	mov	w16, #0x0                   	// #0
   41a00:	b.le	41b84 <print_insn_aarch64@@Base+0x41c>
   41a04:	sxtw	x2, w2
   41a08:	mov	w9, #0xffffffff            	// #-1
   41a0c:	mov	w12, #0x0                   	// #0
   41a10:	mov	w15, #0x64                  	// #100
   41a14:	b	41a24 <print_insn_aarch64@@Base+0x2bc>
   41a18:	add	x2, x2, #0x1
   41a1c:	cmp	w6, w2
   41a20:	b.le	41ab0 <print_insn_aarch64@@Base+0x348>
   41a24:	ldr	x3, [x7, x2, lsl #3]
   41a28:	ldr	x5, [x3, #32]
   41a2c:	ldr	x4, [x3, #16]
   41a30:	ldr	x8, [x5, #40]
   41a34:	add	x4, x4, x8
   41a38:	cmp	x22, x4
   41a3c:	b.cc	41ab0 <print_insn_aarch64@@Base+0x348>  // b.lo, b.ul, b.last
   41a40:	cmp	x0, #0x0
   41a44:	ccmp	x0, x5, #0x4, ne  // ne = any
   41a48:	b.ne	41a18 <print_insn_aarch64@@Base+0x2b0>  // b.any
   41a4c:	ldrb	w4, [x3, #72]
   41a50:	and	w4, w4, #0xf
   41a54:	cmp	w4, #0x2
   41a58:	b.eq	41aa0 <print_insn_aarch64@@Base+0x338>  // b.none
   41a5c:	ldr	x3, [x3, #8]
   41a60:	ldrb	w4, [x3]
   41a64:	cmp	w4, #0x24
   41a68:	b.ne	41a18 <print_insn_aarch64@@Base+0x2b0>  // b.any
   41a6c:	ldrb	w4, [x3, #1]
   41a70:	cmp	w4, #0x78
   41a74:	ccmp	w4, w15, #0x4, ne  // ne = any
   41a78:	b.ne	41a18 <print_insn_aarch64@@Base+0x2b0>  // b.any
   41a7c:	ldrb	w3, [x3, #2]
   41a80:	cmp	w3, #0x2e
   41a84:	ccmp	w3, #0x0, #0x4, ne  // ne = any
   41a88:	b.ne	41a18 <print_insn_aarch64@@Base+0x2b0>  // b.any
   41a8c:	cmp	w4, #0x78
   41a90:	mov	w9, w2
   41a94:	cset	w1, ne  // ne = any
   41a98:	mov	w12, #0x1                   	// #1
   41a9c:	b	41a18 <print_insn_aarch64@@Base+0x2b0>
   41aa0:	mov	w9, w2
   41aa4:	mov	w1, #0x0                   	// #0
   41aa8:	mov	w12, #0x1                   	// #1
   41aac:	b	41a18 <print_insn_aarch64@@Base+0x2b0>
   41ab0:	cbz	w12, 41b78 <print_insn_aarch64@@Base+0x410>
   41ab4:	add	x23, x23, #0x668
   41ab8:	add	x10, x10, #0x5d8
   41abc:	cmp	w1, #0x1
   41ac0:	str	w9, [x10, #4]
   41ac4:	str	x11, [x23, #40]
   41ac8:	str	w1, [x23, #48]
   41acc:	b.ne	418b4 <print_insn_aarch64@@Base+0x14c>  // b.any
   41ad0:	add	w0, w9, #0x1
   41ad4:	and	w2, w22, #0x3
   41ad8:	mov	w21, #0x4                   	// #4
   41adc:	cmp	w6, w0
   41ae0:	sub	w21, w21, w2
   41ae4:	b.le	41b28 <print_insn_aarch64@@Base+0x3c0>
   41ae8:	sxtw	x0, w0
   41aec:	b	41af8 <print_insn_aarch64@@Base+0x390>
   41af0:	cmp	w6, w0
   41af4:	b.le	41b28 <print_insn_aarch64@@Base+0x3c0>
   41af8:	ldr	x1, [x7, x0, lsl #3]
   41afc:	add	x0, x0, #0x1
   41b00:	ldr	x3, [x1, #32]
   41b04:	ldr	x2, [x1, #16]
   41b08:	ldr	x1, [x3, #40]
   41b0c:	add	x1, x1, x2
   41b10:	cmp	x22, x1
   41b14:	b.cs	41af0 <print_insn_aarch64@@Base+0x388>  // b.hs, b.nlast
   41b18:	sub	x0, x1, x22
   41b1c:	sub	w1, w1, w22
   41b20:	cmp	x0, w21, uxtw
   41b24:	csel	w21, w1, w21, cc  // cc = lo, ul, last
   41b28:	and	x0, x22, #0x1
   41b2c:	cmp	w21, #0x3
   41b30:	mov	x1, #0x2                   	// #2
   41b34:	sub	x0, x1, x0
   41b38:	csel	w21, w21, w0, ne  // ne = any
   41b3c:	b	41934 <print_insn_aarch64@@Base+0x1cc>
   41b40:	add	x3, x10, #0x5d8
   41b44:	ldr	w14, [x3, #4]
   41b48:	tbnz	w14, #31, 419f4 <print_insn_aarch64@@Base+0x28c>
   41b4c:	add	x3, x23, #0x668
   41b50:	ldr	x3, [x3, #40]
   41b54:	cmp	x3, x11
   41b58:	b.ne	419f4 <print_insn_aarch64@@Base+0x28c>  // b.any
   41b5c:	cmp	w2, w14
   41b60:	mov	w16, #0x1                   	// #1
   41b64:	csel	w2, w2, w14, le
   41b68:	cmp	w6, w2
   41b6c:	b.gt	41a04 <print_insn_aarch64@@Base+0x29c>
   41b70:	mov	w9, #0xffffffff            	// #-1
   41b74:	nop
   41b78:	cmp	w16, #0x0
   41b7c:	ccmp	w13, w14, #0x1, ne  // ne = any
   41b80:	csel	w13, w13, w14, lt  // lt = tstop
   41b84:	mov	x12, #0x0                   	// #0
   41b88:	cbz	x0, 41b90 <print_insn_aarch64@@Base+0x428>
   41b8c:	ldr	x12, [x0, #40]
   41b90:	sxtw	x2, w13
   41b94:	mov	w14, #0x64                  	// #100
   41b98:	tbz	w13, #31, 41ba8 <print_insn_aarch64@@Base+0x440>
   41b9c:	b	41ab4 <print_insn_aarch64@@Base+0x34c>
   41ba0:	sub	x2, x2, #0x1
   41ba4:	tbnz	w2, #31, 41ab4 <print_insn_aarch64@@Base+0x34c>
   41ba8:	ldr	x3, [x7, x2, lsl #3]
   41bac:	ldr	x5, [x3, #32]
   41bb0:	ldr	x4, [x3, #16]
   41bb4:	ldr	x8, [x5, #40]
   41bb8:	add	x4, x4, x8
   41bbc:	cmp	x12, x4
   41bc0:	b.hi	41ab4 <print_insn_aarch64@@Base+0x34c>  // b.pmore
   41bc4:	cmp	x0, #0x0
   41bc8:	ccmp	x0, x5, #0x4, ne  // ne = any
   41bcc:	b.ne	41ba0 <print_insn_aarch64@@Base+0x438>  // b.any
   41bd0:	ldrb	w4, [x3, #72]
   41bd4:	and	w4, w4, #0xf
   41bd8:	cmp	w4, #0x2
   41bdc:	b.eq	41c20 <print_insn_aarch64@@Base+0x4b8>  // b.none
   41be0:	ldr	x3, [x3, #8]
   41be4:	ldrb	w4, [x3]
   41be8:	cmp	w4, #0x24
   41bec:	b.ne	41ba0 <print_insn_aarch64@@Base+0x438>  // b.any
   41bf0:	ldrb	w4, [x3, #1]
   41bf4:	cmp	w4, #0x78
   41bf8:	ccmp	w4, w14, #0x4, ne  // ne = any
   41bfc:	b.ne	41ba0 <print_insn_aarch64@@Base+0x438>  // b.any
   41c00:	ldrb	w3, [x3, #2]
   41c04:	cmp	w3, #0x2e
   41c08:	ccmp	w3, #0x0, #0x4, ne  // ne = any
   41c0c:	b.ne	41ba0 <print_insn_aarch64@@Base+0x438>  // b.any
   41c10:	cmp	w4, #0x78
   41c14:	mov	w9, w2
   41c18:	cset	w1, ne  // ne = any
   41c1c:	b	41ab4 <print_insn_aarch64@@Base+0x34c>
   41c20:	add	x23, x23, #0x668
   41c24:	add	x10, x10, #0x5d8
   41c28:	str	w2, [x10, #4]
   41c2c:	str	x11, [x23, #40]
   41c30:	str	wzr, [x23, #48]
   41c34:	b	418b4 <print_insn_aarch64@@Base+0x14c>
   41c38:	ldr	x3, [x19, #112]
   41c3c:	mov	x1, x22
   41c40:	mov	x2, x19
   41c44:	mov	w20, #0xffffffff            	// #-1
   41c48:	blr	x3
   41c4c:	b	41918 <print_insn_aarch64@@Base+0x1b0>

0000000000041c50 <print_aarch64_disassembler_options@@Base>:
   41c50:	stp	x29, x30, [sp, #-32]!
   41c54:	mov	w2, #0x5                   	// #5
   41c58:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   41c5c:	mov	x29, sp
   41c60:	stp	x19, x20, [sp, #16]
   41c64:	adrp	x20, 5b000 <floatformat_from_double@@Base+0x3e8>
   41c68:	add	x20, x20, #0x5d8
   41c6c:	mov	x19, x0
   41c70:	add	x1, x1, #0x548
   41c74:	mov	x0, x20
   41c78:	bl	359e0 <dcgettext@plt>
   41c7c:	mov	x1, x0
   41c80:	mov	x0, x19
   41c84:	bl	35b80 <fprintf@plt>
   41c88:	mov	w2, #0x5                   	// #5
   41c8c:	mov	x0, x20
   41c90:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   41c94:	add	x1, x1, #0x5e0
   41c98:	bl	359e0 <dcgettext@plt>
   41c9c:	mov	x1, x0
   41ca0:	mov	x0, x19
   41ca4:	bl	35b80 <fprintf@plt>
   41ca8:	mov	w2, #0x5                   	// #5
   41cac:	mov	x0, x20
   41cb0:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   41cb4:	add	x1, x1, #0x618
   41cb8:	bl	359e0 <dcgettext@plt>
   41cbc:	mov	x1, x0
   41cc0:	mov	x0, x19
   41cc4:	bl	35b80 <fprintf@plt>
   41cc8:	mov	w2, #0x5                   	// #5
   41ccc:	mov	x0, x20
   41cd0:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   41cd4:	add	x1, x1, #0x650
   41cd8:	bl	359e0 <dcgettext@plt>
   41cdc:	mov	x1, x0
   41ce0:	mov	x0, x19
   41ce4:	bl	35b80 <fprintf@plt>
   41ce8:	mov	w2, #0x5                   	// #5
   41cec:	mov	x0, x20
   41cf0:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   41cf4:	add	x1, x1, #0x688
   41cf8:	bl	359e0 <dcgettext@plt>
   41cfc:	mov	x1, x0
   41d00:	mov	x0, x19
   41d04:	bl	35b80 <fprintf@plt>
   41d08:	mov	x0, x20
   41d0c:	mov	w2, #0x5                   	// #5
   41d10:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   41d14:	add	x1, x1, #0x5d0
   41d18:	bl	359e0 <dcgettext@plt>
   41d1c:	mov	x1, x0
   41d20:	mov	x0, x19
   41d24:	ldp	x19, x20, [sp, #16]
   41d28:	ldp	x29, x30, [sp], #32
   41d2c:	b	35b80 <fprintf@plt>
   41d30:	ldr	x2, [x0]
   41d34:	mov	w3, #0xffffffff            	// #-1
   41d38:	ldr	x1, [x1]
   41d3c:	cmp	x2, x1
   41d40:	cset	w0, hi  // hi = pmore
   41d44:	csel	w0, w0, w3, cs  // cs = hs, nlast
   41d48:	ret
   41d4c:	nop
   41d50:	and	w3, w1, #0x1f
   41d54:	ubfx	x2, x1, #10, #5
   41d58:	ubfx	x0, x1, #23, #1
   41d5c:	tbz	w1, #23, 41d74 <print_aarch64_disassembler_options@@Base+0x124>
   41d60:	ubfx	x4, x1, #5, #5
   41d64:	cmp	w3, w4
   41d68:	ccmp	w4, w2, #0x4, ne  // ne = any
   41d6c:	ccmp	w4, #0x1f, #0x4, eq  // eq = none
   41d70:	b.ne	41d80 <print_aarch64_disassembler_options@@Base+0x130>  // b.any
   41d74:	cmp	w3, w2
   41d78:	ubfx	x1, x1, #22, #1
   41d7c:	csel	w0, w1, wzr, eq  // eq = none
   41d80:	ret
   41d84:	nop
   41d88:	stp	x29, x30, [sp, #-16]!
   41d8c:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   41d90:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   41d94:	mov	x29, sp
   41d98:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   41d9c:	add	x3, x3, #0xd50
   41da0:	add	x1, x1, #0x610
   41da4:	add	x0, x0, #0x3c8
   41da8:	mov	w2, #0x12e                 	// #302
   41dac:	bl	35ac0 <__assert_fail@plt>
   41db0:	stp	x29, x30, [sp, #-16]!
   41db4:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   41db8:	add	x3, x3, #0xd50
   41dbc:	mov	x29, sp
   41dc0:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   41dc4:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   41dc8:	add	x3, x3, #0x20
   41dcc:	add	x1, x1, #0xb60
   41dd0:	add	x0, x0, #0xb80
   41dd4:	mov	w2, #0x222                 	// #546
   41dd8:	bl	35ac0 <__assert_fail@plt>
   41ddc:	nop
   41de0:	stp	x29, x30, [sp, #-16]!
   41de4:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   41de8:	add	x3, x3, #0xd50
   41dec:	mov	x29, sp
   41df0:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   41df4:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   41df8:	add	x3, x3, #0x40
   41dfc:	add	x1, x1, #0xb60
   41e00:	add	x0, x0, #0xb90
   41e04:	mov	w2, #0xb6d                 	// #2925
   41e08:	bl	35ac0 <__assert_fail@plt>
   41e0c:	nop
   41e10:	ldrb	w8, [x2, #28]
   41e14:	tbz	w8, #1, 41e48 <print_aarch64_disassembler_options@@Base+0x1f8>
   41e18:	ldr	w4, [x2, #20]
   41e1c:	tbz	w8, #2, 41e98 <print_aarch64_disassembler_options@@Base+0x248>
   41e20:	ldr	w2, [x2]
   41e24:	mov	x5, x0
   41e28:	mov	x6, x1
   41e2c:	mov	x7, x3
   41e30:	cmp	w2, #0x58
   41e34:	b.ne	41e80 <print_aarch64_disassembler_options@@Base+0x230>  // b.any
   41e38:	cbnz	w4, 41e80 <print_aarch64_disassembler_options@@Base+0x230>
   41e3c:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   41e40:	add	x2, x2, #0xbd8
   41e44:	b	35380 <snprintf@plt>
   41e48:	ldrb	w4, [x2, #36]
   41e4c:	tbz	w4, #0, 41e6c <print_aarch64_disassembler_options@@Base+0x21c>
   41e50:	ldr	w4, [x2, #32]
   41e54:	cmp	w4, #0xf
   41e58:	b.ne	41eb0 <print_aarch64_disassembler_options@@Base+0x260>  // b.any
   41e5c:	ldr	w4, [x2, #20]
   41e60:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   41e64:	add	x2, x2, #0xc30
   41e68:	b	35380 <snprintf@plt>
   41e6c:	ldr	w4, [x2, #20]
   41e70:	cbz	w4, 41ea4 <print_aarch64_disassembler_options@@Base+0x254>
   41e74:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   41e78:	add	x2, x2, #0xc48
   41e7c:	b	35380 <snprintf@plt>
   41e80:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   41e84:	mov	x3, x7
   41e88:	mov	x1, x6
   41e8c:	mov	x0, x5
   41e90:	add	x2, x2, #0xbe0
   41e94:	b	35380 <snprintf@plt>
   41e98:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   41e9c:	add	x2, x2, #0xbf0
   41ea0:	b	35380 <snprintf@plt>
   41ea4:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   41ea8:	add	x2, x2, #0xc58
   41eac:	b	35380 <snprintf@plt>
   41eb0:	stp	x29, x30, [sp, #-16]!
   41eb4:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   41eb8:	add	x3, x3, #0xd50
   41ebc:	mov	x29, sp
   41ec0:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   41ec4:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   41ec8:	add	x3, x3, #0x58
   41ecc:	add	x1, x1, #0xb60
   41ed0:	add	x0, x0, #0xc00
   41ed4:	mov	w2, #0xc05                 	// #3077
   41ed8:	bl	35ac0 <__assert_fail@plt>
   41edc:	nop
   41ee0:	mov	x2, x0
   41ee4:	stp	x29, x30, [sp, #-16]!
   41ee8:	mov	w0, w1
   41eec:	mov	x29, sp
   41ef0:	ldr	x1, [x2, #8]
   41ef4:	cbz	x1, 41f5c <print_aarch64_disassembler_options@@Base+0x30c>
   41ef8:	ldr	w1, [x1, #40]
   41efc:	cmp	w1, #0x21
   41f00:	b.ne	41f38 <print_aarch64_disassembler_options@@Base+0x2e8>  // b.any
   41f04:	cbnz	w3, 41f30 <print_aarch64_disassembler_options@@Base+0x2e0>
   41f08:	cbz	w0, 41f80 <print_aarch64_disassembler_options@@Base+0x330>
   41f0c:	mov	w4, #0x3e                  	// #62
   41f10:	mov	w3, #0x7d                  	// #125
   41f14:	mov	w2, #0x2                   	// #2
   41f18:	mov	w1, #0x0                   	// #0
   41f1c:	bl	35390 <extract_fields@plt>
   41f20:	cmp	w0, #0x3
   41f24:	cset	w0, eq  // eq = none
   41f28:	ldp	x29, x30, [sp], #16
   41f2c:	ret
   41f30:	ldr	w0, [x2]
   41f34:	b	41f08 <print_aarch64_disassembler_options@@Base+0x2b8>
   41f38:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   41f3c:	add	x3, x3, #0xd50
   41f40:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   41f44:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   41f48:	add	x3, x3, #0x78
   41f4c:	add	x1, x1, #0xb60
   41f50:	add	x0, x0, #0xc70
   41f54:	mov	w2, #0x12b8                	// #4792
   41f58:	bl	35ac0 <__assert_fail@plt>
   41f5c:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   41f60:	add	x3, x3, #0xd50
   41f64:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   41f68:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   41f6c:	add	x3, x3, #0x78
   41f70:	add	x1, x1, #0xb60
   41f74:	add	x0, x0, #0xc60
   41f78:	mov	w2, #0x12b7                	// #4791
   41f7c:	bl	35ac0 <__assert_fail@plt>
   41f80:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   41f84:	add	x3, x3, #0xd50
   41f88:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   41f8c:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   41f90:	add	x3, x3, #0x78
   41f94:	add	x1, x1, #0xb60
   41f98:	add	x0, x0, #0xca0
   41f9c:	mov	w2, #0x12ba                	// #4794
   41fa0:	bl	35ac0 <__assert_fail@plt>
   41fa4:	nop

0000000000041fa8 <aarch64_get_operand_class@@Base>:
   41fa8:	ubfiz	x2, x0, #1, #32
   41fac:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   41fb0:	add	x0, x2, w0, uxtw
   41fb4:	ldr	x1, [x1, #4032]
   41fb8:	lsl	x0, x0, #4
   41fbc:	ldr	w0, [x1, x0]
   41fc0:	ret
   41fc4:	nop

0000000000041fc8 <aarch64_get_operand_name@@Base>:
   41fc8:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   41fcc:	ubfiz	x2, x0, #1, #32
   41fd0:	add	x0, x2, w0, uxtw
   41fd4:	ldr	x1, [x1, #4032]
   41fd8:	add	x0, x1, x0, lsl #4
   41fdc:	ldr	x0, [x0, #8]
   41fe0:	ret
   41fe4:	nop

0000000000041fe8 <aarch64_get_operand_desc@@Base>:
   41fe8:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   41fec:	ubfiz	x2, x0, #1, #32
   41ff0:	add	x0, x2, w0, uxtw
   41ff4:	ldr	x1, [x1, #4032]
   41ff8:	add	x0, x1, x0, lsl #4
   41ffc:	ldr	x0, [x0, #40]
   42000:	ret
   42004:	nop

0000000000042008 <get_cond_from_value@@Base>:
   42008:	cmp	w0, #0xf
   4200c:	b.hi	42024 <get_cond_from_value@@Base+0x1c>  // b.pmore
   42010:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   42014:	mov	w2, #0x28                  	// #40
   42018:	ldr	x1, [x1, #4000]
   4201c:	umaddl	x0, w0, w2, x1
   42020:	ret
   42024:	stp	x29, x30, [sp, #-16]!
   42028:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   4202c:	add	x3, x3, #0xd50
   42030:	mov	x29, sp
   42034:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   42038:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   4203c:	add	x3, x3, #0x88
   42040:	add	x1, x1, #0xb60
   42044:	add	x0, x0, #0xca8
   42048:	mov	w2, #0x178                 	// #376
   4204c:	bl	35ac0 <__assert_fail@plt>

0000000000042050 <get_inverted_cond@@Base>:
   42050:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   42054:	ldr	w0, [x0, #32]
   42058:	mov	w2, #0x28                  	// #40
   4205c:	ldr	x1, [x1, #4000]
   42060:	eor	w0, w0, #0x1
   42064:	umaddl	x0, w0, w2, x1
   42068:	ret
   4206c:	nop

0000000000042070 <aarch64_get_operand_modifier@@Base>:
   42070:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   42074:	ldr	x1, [x1, #3904]
   42078:	sub	x0, x0, x1
   4207c:	ubfx	x0, x0, #4, #32
   42080:	ret
   42084:	nop

0000000000042088 <aarch64_get_operand_modifier_value@@Base>:
   42088:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   4208c:	ubfiz	x0, x0, #4, #32
   42090:	ldr	x1, [x1, #3904]
   42094:	add	x1, x1, x0
   42098:	ldr	w0, [x1, #8]
   4209c:	ret

00000000000420a0 <aarch64_get_operand_modifier_from_value@@Base>:
   420a0:	cmp	w1, #0x1
   420a4:	add	w2, w0, #0x6
   420a8:	mov	w1, #0x5                   	// #5
   420ac:	sub	w0, w1, w0
   420b0:	csel	w0, w0, w2, ne  // ne = any
   420b4:	ret

00000000000420b8 <aarch64_extend_operator_p@@Base>:
   420b8:	sub	w0, w0, #0x6
   420bc:	cmp	w0, #0x7
   420c0:	cset	w0, ls  // ls = plast
   420c4:	ret

00000000000420c8 <aarch64_stack_pointer_p@@Base>:
   420c8:	stp	x29, x30, [sp, #-32]!
   420cc:	mov	x29, sp
   420d0:	str	x19, [sp, #16]
   420d4:	mov	x19, x0
   420d8:	ldr	w0, [x0]
   420dc:	bl	35710 <aarch64_get_operand_class@plt>
   420e0:	cmp	w0, #0x1
   420e4:	b.eq	420f8 <aarch64_stack_pointer_p@@Base+0x30>  // b.none
   420e8:	mov	w0, #0x0                   	// #0
   420ec:	ldr	x19, [sp, #16]
   420f0:	ldp	x29, x30, [sp], #32
   420f4:	ret
   420f8:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   420fc:	ldr	w0, [x19]
   42100:	ldr	x1, [x1, #4032]
   42104:	add	x0, x0, x0, lsl #1
   42108:	add	x0, x1, x0, lsl #4
   4210c:	ldr	w1, [x0, #16]
   42110:	ubfx	x0, x1, #4, #1
   42114:	tbz	w1, #4, 420ec <aarch64_stack_pointer_p@@Base+0x24>
   42118:	ldr	w0, [x19, #16]
   4211c:	ldr	x19, [sp, #16]
   42120:	cmp	w0, #0x1f
   42124:	cset	w0, eq  // eq = none
   42128:	ldp	x29, x30, [sp], #32
   4212c:	ret

0000000000042130 <aarch64_zero_register_p@@Base>:
   42130:	stp	x29, x30, [sp, #-32]!
   42134:	mov	x29, sp
   42138:	str	x19, [sp, #16]
   4213c:	mov	x19, x0
   42140:	ldr	w0, [x0]
   42144:	bl	35710 <aarch64_get_operand_class@plt>
   42148:	cmp	w0, #0x1
   4214c:	b.eq	42160 <aarch64_zero_register_p@@Base+0x30>  // b.none
   42150:	mov	w0, #0x0                   	// #0
   42154:	ldr	x19, [sp, #16]
   42158:	ldp	x29, x30, [sp], #32
   4215c:	ret
   42160:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   42164:	ldr	w1, [x19]
   42168:	mov	w0, #0x0                   	// #0
   4216c:	ldr	x2, [x2, #4032]
   42170:	add	x1, x1, x1, lsl #1
   42174:	add	x1, x2, x1, lsl #4
   42178:	ldr	w1, [x1, #16]
   4217c:	tbnz	w1, #4, 42154 <aarch64_zero_register_p@@Base+0x24>
   42180:	ldr	w0, [x19, #16]
   42184:	ldr	x19, [sp, #16]
   42188:	cmp	w0, #0x1f
   4218c:	cset	w0, eq  // eq = none
   42190:	ldp	x29, x30, [sp], #32
   42194:	ret

0000000000042198 <aarch64_get_expected_qualifier@@Base>:
   42198:	mov	x4, x0
   4219c:	ands	w2, w2, #0xff
   421a0:	ldrb	w0, [x0, w3, sxtw]
   421a4:	b.ne	421b4 <aarch64_get_expected_qualifier@@Base+0x1c>  // b.any
   421a8:	cbnz	w0, 42494 <aarch64_get_expected_qualifier@@Base+0x2fc>
   421ac:	ldrb	w0, [x4, w1, sxtw]
   421b0:	ret
   421b4:	cmp	w0, w2
   421b8:	add	x0, x4, #0x6
   421bc:	ldrb	w0, [x0, w3, sxtw]
   421c0:	b.eq	42214 <aarch64_get_expected_qualifier@@Base+0x7c>  // b.none
   421c4:	cmp	w0, w2
   421c8:	b.eq	42234 <aarch64_get_expected_qualifier@@Base+0x9c>  // b.none
   421cc:	add	x0, x4, #0xc
   421d0:	ldrb	w0, [x0, w3, sxtw]
   421d4:	cmp	w0, w2
   421d8:	b.eq	4225c <aarch64_get_expected_qualifier@@Base+0xc4>  // b.none
   421dc:	add	x0, x4, #0x12
   421e0:	ldrb	w0, [x0, w3, sxtw]
   421e4:	cmp	w0, w2
   421e8:	b.ne	4248c <aarch64_get_expected_qualifier@@Base+0x2f4>  // b.any
   421ec:	add	x0, x4, #0x18
   421f0:	ldrb	w0, [x0, w3, sxtw]
   421f4:	cmp	w0, w2
   421f8:	b.eq	4246c <aarch64_get_expected_qualifier@@Base+0x2d4>  // b.none
   421fc:	add	x5, x4, #0x1e
   42200:	mov	w0, #0x0                   	// #0
   42204:	ldrb	w5, [x5, w3, sxtw]
   42208:	cmp	w5, w2
   4220c:	b.ne	42384 <aarch64_get_expected_qualifier@@Base+0x1ec>  // b.any
   42210:	ret
   42214:	cmp	w0, w2
   42218:	b.eq	4246c <aarch64_get_expected_qualifier@@Base+0x2d4>  // b.none
   4221c:	add	x5, x4, #0xc
   42220:	mov	w0, #0x0                   	// #0
   42224:	ldrb	w5, [x5, w3, sxtw]
   42228:	cmp	w5, w2
   4222c:	b.ne	42284 <aarch64_get_expected_qualifier@@Base+0xec>  // b.any
   42230:	ret
   42234:	add	x0, x4, #0xc
   42238:	ldrb	w0, [x0, w3, sxtw]
   4223c:	cmp	w0, w2
   42240:	b.eq	4246c <aarch64_get_expected_qualifier@@Base+0x2d4>  // b.none
   42244:	add	x5, x4, #0x12
   42248:	mov	w0, #0x0                   	// #0
   4224c:	ldrb	w5, [x5, w3, sxtw]
   42250:	cmp	w5, w2
   42254:	b.ne	422dc <aarch64_get_expected_qualifier@@Base+0x144>  // b.any
   42258:	ret
   4225c:	add	x0, x4, #0x12
   42260:	ldrb	w0, [x0, w3, sxtw]
   42264:	cmp	w0, w2
   42268:	b.eq	4246c <aarch64_get_expected_qualifier@@Base+0x2d4>  // b.none
   4226c:	add	x5, x4, #0x18
   42270:	mov	w0, #0x0                   	// #0
   42274:	ldrb	w5, [x5, w3, sxtw]
   42278:	cmp	w5, w2
   4227c:	b.ne	42330 <aarch64_get_expected_qualifier@@Base+0x198>  // b.any
   42280:	ret
   42284:	add	x5, x4, #0x12
   42288:	ldrb	w5, [x5, w3, sxtw]
   4228c:	cmp	w5, w2
   42290:	b.eq	422d8 <aarch64_get_expected_qualifier@@Base+0x140>  // b.none
   42294:	mov	w0, #0x0                   	// #0
   42298:	add	x5, x4, #0x18
   4229c:	ldrb	w5, [x5, w3, sxtw]
   422a0:	cmp	w5, w2
   422a4:	b.ne	422f0 <aarch64_get_expected_qualifier@@Base+0x158>  // b.any
   422a8:	cmn	w0, #0x1
   422ac:	b.ne	4246c <aarch64_get_expected_qualifier@@Base+0x2d4>  // b.any
   422b0:	add	x0, x4, #0x1e
   422b4:	ldrb	w0, [x0, w3, sxtw]
   422b8:	cmp	w0, w2
   422bc:	b.eq	4246c <aarch64_get_expected_qualifier@@Base+0x2d4>  // b.none
   422c0:	add	x5, x4, #0x24
   422c4:	mov	w0, #0x0                   	// #0
   422c8:	ldrb	w5, [x5, w3, sxtw]
   422cc:	cmp	w5, w2
   422d0:	b.ne	423e8 <aarch64_get_expected_qualifier@@Base+0x250>  // b.any
   422d4:	ret
   422d8:	ret
   422dc:	add	x5, x4, #0x18
   422e0:	ldrb	w5, [x5, w3, sxtw]
   422e4:	cmp	w5, w2
   422e8:	b.eq	422d8 <aarch64_get_expected_qualifier@@Base+0x140>  // b.none
   422ec:	mov	w0, #0x1                   	// #1
   422f0:	add	x5, x4, #0x1e
   422f4:	ldrb	w5, [x5, w3, sxtw]
   422f8:	cmp	w5, w2
   422fc:	b.ne	42344 <aarch64_get_expected_qualifier@@Base+0x1ac>  // b.any
   42300:	cmn	w0, #0x1
   42304:	b.ne	4246c <aarch64_get_expected_qualifier@@Base+0x2d4>  // b.any
   42308:	add	x0, x4, #0x24
   4230c:	ldrb	w0, [x0, w3, sxtw]
   42310:	cmp	w0, w2
   42314:	b.eq	4246c <aarch64_get_expected_qualifier@@Base+0x2d4>  // b.none
   42318:	add	x5, x4, #0x2a
   4231c:	mov	w0, #0x0                   	// #0
   42320:	ldrb	w5, [x5, w3, sxtw]
   42324:	cmp	w5, w2
   42328:	b.ne	42438 <aarch64_get_expected_qualifier@@Base+0x2a0>  // b.any
   4232c:	ret
   42330:	add	x5, x4, #0x1e
   42334:	ldrb	w5, [x5, w3, sxtw]
   42338:	cmp	w5, w2
   4233c:	b.eq	422d8 <aarch64_get_expected_qualifier@@Base+0x140>  // b.none
   42340:	mov	w0, #0x2                   	// #2
   42344:	add	x5, x4, #0x24
   42348:	ldrb	w5, [x5, w3, sxtw]
   4234c:	cmp	w5, w2
   42350:	b.ne	42398 <aarch64_get_expected_qualifier@@Base+0x200>  // b.any
   42354:	cmn	w0, #0x1
   42358:	b.ne	4246c <aarch64_get_expected_qualifier@@Base+0x2d4>  // b.any
   4235c:	add	x0, x4, #0x2a
   42360:	ldrb	w0, [x0, w3, sxtw]
   42364:	cmp	w0, w2
   42368:	b.eq	4246c <aarch64_get_expected_qualifier@@Base+0x2d4>  // b.none
   4236c:	add	x5, x4, #0x30
   42370:	mov	w0, #0x0                   	// #0
   42374:	ldrb	w5, [x5, w3, sxtw]
   42378:	cmp	w5, w2
   4237c:	b.ne	42474 <aarch64_get_expected_qualifier@@Base+0x2dc>  // b.any
   42380:	ret
   42384:	add	x5, x4, #0x24
   42388:	ldrb	w5, [x5, w3, sxtw]
   4238c:	cmp	w5, w2
   42390:	b.eq	422d8 <aarch64_get_expected_qualifier@@Base+0x140>  // b.none
   42394:	mov	w0, #0x3                   	// #3
   42398:	add	x5, x4, #0x2a
   4239c:	ldrb	w5, [x5, w3, sxtw]
   423a0:	cmp	w5, w2
   423a4:	b.ne	423fc <aarch64_get_expected_qualifier@@Base+0x264>  // b.any
   423a8:	cmn	w0, #0x1
   423ac:	b.ne	4246c <aarch64_get_expected_qualifier@@Base+0x2d4>  // b.any
   423b0:	add	x0, x4, #0x30
   423b4:	ldrb	w0, [x0, w3, sxtw]
   423b8:	cmp	w0, w2
   423bc:	b.eq	4246c <aarch64_get_expected_qualifier@@Base+0x2d4>  // b.none
   423c0:	add	x5, x4, #0x36
   423c4:	mov	w0, #0x0                   	// #0
   423c8:	ldrb	w3, [x5, w3, sxtw]
   423cc:	cmp	w3, w2
   423d0:	b.eq	422d8 <aarch64_get_expected_qualifier@@Base+0x140>  // b.none
   423d4:	mov	w0, #0x7                   	// #7
   423d8:	mov	w2, #0x6                   	// #6
   423dc:	smaddl	x0, w0, w2, x4
   423e0:	ldrb	w0, [x0, w1, sxtw]
   423e4:	ret
   423e8:	add	x5, x4, #0x2a
   423ec:	ldrb	w5, [x5, w3, sxtw]
   423f0:	cmp	w5, w2
   423f4:	b.eq	422d8 <aarch64_get_expected_qualifier@@Base+0x140>  // b.none
   423f8:	mov	w0, #0x4                   	// #4
   423fc:	add	x5, x4, #0x30
   42400:	ldrb	w5, [x5, w3, sxtw]
   42404:	cmp	w5, w2
   42408:	b.ne	4244c <aarch64_get_expected_qualifier@@Base+0x2b4>  // b.any
   4240c:	cmn	w0, #0x1
   42410:	b.ne	4246c <aarch64_get_expected_qualifier@@Base+0x2d4>  // b.any
   42414:	add	x0, x4, #0x36
   42418:	ldrb	w0, [x0, w3, sxtw]
   4241c:	cmp	w0, w2
   42420:	b.eq	4246c <aarch64_get_expected_qualifier@@Base+0x2d4>  // b.none
   42424:	mov	w2, #0x6                   	// #6
   42428:	mov	w0, #0x8                   	// #8
   4242c:	smaddl	x0, w0, w2, x4
   42430:	ldrb	w0, [x0, w1, sxtw]
   42434:	ret
   42438:	add	x5, x4, #0x30
   4243c:	ldrb	w5, [x5, w3, sxtw]
   42440:	cmp	w5, w2
   42444:	b.eq	422d8 <aarch64_get_expected_qualifier@@Base+0x140>  // b.none
   42448:	mov	w0, #0x5                   	// #5
   4244c:	add	x5, x4, #0x36
   42450:	ldrb	w3, [x5, w3, sxtw]
   42454:	cmp	w3, w2
   42458:	b.ne	423d8 <aarch64_get_expected_qualifier@@Base+0x240>  // b.any
   4245c:	cmn	w0, #0x1
   42460:	b.ne	4246c <aarch64_get_expected_qualifier@@Base+0x2d4>  // b.any
   42464:	mov	w0, #0x9                   	// #9
   42468:	b	423d8 <aarch64_get_expected_qualifier@@Base+0x240>
   4246c:	mov	w0, #0x0                   	// #0
   42470:	ret
   42474:	add	x5, x4, #0x36
   42478:	ldrb	w3, [x5, w3, sxtw]
   4247c:	cmp	w3, w2
   42480:	b.eq	422d8 <aarch64_get_expected_qualifier@@Base+0x140>  // b.none
   42484:	mov	w0, #0x6                   	// #6
   42488:	b	423d8 <aarch64_get_expected_qualifier@@Base+0x240>
   4248c:	mov	w0, #0xffffffff            	// #-1
   42490:	b	42298 <aarch64_get_expected_qualifier@@Base+0x100>
   42494:	stp	x29, x30, [sp, #-16]!
   42498:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   4249c:	add	x3, x3, #0xd50
   424a0:	mov	x29, sp
   424a4:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   424a8:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   424ac:	add	x3, x3, #0xa0
   424b0:	add	x1, x1, #0xb60
   424b4:	add	x0, x0, #0xcb8
   424b8:	mov	w2, #0x28f                 	// #655
   424bc:	bl	35ac0 <__assert_fail@plt>

00000000000424c0 <aarch64_get_qualifier_name@@Base>:
   424c0:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   424c4:	ubfiz	x0, x0, #5, #8
   424c8:	ldr	x1, [x1, #3776]
   424cc:	add	x1, x1, x0
   424d0:	ldr	x0, [x1, #16]
   424d4:	ret
   424d8:	sub	sp, sp, #0xa0
   424dc:	stp	x29, x30, [sp, #64]
   424e0:	add	x29, sp, #0x40
   424e4:	stp	x19, x20, [sp, #80]
   424e8:	mov	x20, x2
   424ec:	ldrb	w19, [x2, #16]
   424f0:	stp	x21, x22, [sp, #96]
   424f4:	and	w22, w19, #0x1f
   424f8:	stp	x23, x24, [sp, #112]
   424fc:	ubfx	x19, x19, #5, #3
   42500:	mov	x24, x3
   42504:	stp	x25, x26, [sp, #128]
   42508:	mov	x25, x0
   4250c:	mov	x26, x1
   42510:	ldrb	w0, [x2, #4]
   42514:	add	w21, w19, w22
   42518:	sub	w21, w21, #0x1
   4251c:	and	w21, w21, #0x1f
   42520:	bl	353f0 <aarch64_get_qualifier_name@plt>
   42524:	mov	x23, x0
   42528:	ldr	w1, [x20]
   4252c:	cmp	w1, #0x26
   42530:	b.eq	42634 <aarch64_get_qualifier_name@@Base+0x174>  // b.none
   42534:	sub	w0, w19, #0x1
   42538:	cmp	w0, #0x3
   4253c:	b.hi	42774 <aarch64_get_qualifier_name@@Base+0x2b4>  // b.pmore
   42540:	ldrb	w0, [x20, #17]
   42544:	tbnz	w0, #0, 42648 <aarch64_get_qualifier_name@@Base+0x188>
   42548:	strb	wzr, [sp, #152]
   4254c:	cmp	w19, #0x2
   42550:	ccmp	w22, w21, #0x0, gt
   42554:	b.lt	42698 <aarch64_get_qualifier_name@@Base+0x1d8>  // b.tstop
   42558:	add	w7, w22, #0x1
   4255c:	add	w0, w22, #0x2
   42560:	cmp	w19, #0x3
   42564:	and	w7, w7, #0x1f
   42568:	and	w0, w0, #0x1f
   4256c:	b.eq	42724 <aarch64_get_qualifier_name@@Base+0x264>  // b.none
   42570:	b.hi	425cc <aarch64_get_qualifier_name@@Base+0x10c>  // b.pmore
   42574:	cmp	w19, #0x1
   42578:	b.eq	426e4 <aarch64_get_qualifier_name@@Base+0x224>  // b.none
   4257c:	cmp	w19, #0x2
   42580:	b.ne	425b0 <aarch64_get_qualifier_name@@Base+0xf0>  // b.any
   42584:	add	x0, sp, #0x98
   42588:	stp	x23, x0, [sp]
   4258c:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   42590:	mov	x5, x23
   42594:	mov	w4, w22
   42598:	mov	x1, x26
   4259c:	mov	x6, x24
   425a0:	add	x2, x2, #0xd78
   425a4:	mov	x3, x24
   425a8:	mov	x0, x25
   425ac:	bl	35380 <snprintf@plt>
   425b0:	ldp	x29, x30, [sp, #64]
   425b4:	ldp	x19, x20, [sp, #80]
   425b8:	ldp	x21, x22, [sp, #96]
   425bc:	ldp	x23, x24, [sp, #112]
   425c0:	ldp	x25, x26, [sp, #128]
   425c4:	add	sp, sp, #0xa0
   425c8:	ret
   425cc:	cmp	w19, #0x4
   425d0:	b.ne	425b0 <aarch64_get_qualifier_name@@Base+0xf0>  // b.any
   425d4:	add	w2, w22, #0x3
   425d8:	add	x3, sp, #0x98
   425dc:	and	w2, w2, #0x1f
   425e0:	stp	x23, x24, [sp]
   425e4:	mov	x5, x23
   425e8:	str	w0, [sp, #16]
   425ec:	mov	x1, x26
   425f0:	stp	x23, x24, [sp, #24]
   425f4:	mov	w4, w22
   425f8:	mov	x6, x24
   425fc:	str	w2, [sp, #40]
   42600:	mov	x0, x25
   42604:	stp	x23, x3, [sp, #48]
   42608:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   4260c:	mov	x3, x24
   42610:	add	x2, x2, #0xdb0
   42614:	bl	35380 <snprintf@plt>
   42618:	ldp	x29, x30, [sp, #64]
   4261c:	ldp	x19, x20, [sp, #80]
   42620:	ldp	x21, x22, [sp, #96]
   42624:	ldp	x23, x24, [sp, #112]
   42628:	ldp	x25, x26, [sp, #128]
   4262c:	add	sp, sp, #0xa0
   42630:	ret
   42634:	ldrb	w0, [x20, #17]
   42638:	tbz	w0, #0, 42798 <aarch64_get_qualifier_name@@Base+0x2d8>
   4263c:	sub	w0, w19, #0x1
   42640:	cmp	w0, #0x3
   42644:	b.hi	42774 <aarch64_get_qualifier_name@@Base+0x2b4>  // b.pmore
   42648:	mov	x4, #0xd70b                	// #55051
   4264c:	add	x0, sp, #0x98
   42650:	movk	x4, #0x70a3, lsl #16
   42654:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   42658:	ldr	x5, [x20, #24]
   4265c:	movk	x4, #0xa3d, lsl #32
   42660:	movk	x4, #0xa3d7, lsl #48
   42664:	add	x2, x2, #0xd48
   42668:	mov	x1, #0x8                   	// #8
   4266c:	smulh	x4, x5, x4
   42670:	add	x4, x4, x5
   42674:	asr	x4, x4, #6
   42678:	sub	x4, x4, x5, asr #63
   4267c:	add	x3, x4, x4, lsl #1
   42680:	add	x3, x4, x3, lsl #3
   42684:	sub	x3, x5, x3, lsl #2
   42688:	bl	35380 <snprintf@plt>
   4268c:	cmp	w19, #0x2
   42690:	ccmp	w22, w21, #0x0, gt
   42694:	b.ge	42558 <aarch64_get_qualifier_name@@Base+0x98>  // b.tcont
   42698:	add	x0, sp, #0x98
   4269c:	stp	x23, x0, [sp]
   426a0:	mov	w7, w21
   426a4:	mov	x5, x23
   426a8:	mov	w4, w22
   426ac:	mov	x1, x26
   426b0:	mov	x6, x24
   426b4:	mov	x3, x24
   426b8:	mov	x0, x25
   426bc:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   426c0:	add	x2, x2, #0xd50
   426c4:	bl	35380 <snprintf@plt>
   426c8:	ldp	x29, x30, [sp, #64]
   426cc:	ldp	x19, x20, [sp, #80]
   426d0:	ldp	x21, x22, [sp, #96]
   426d4:	ldp	x23, x24, [sp, #112]
   426d8:	ldp	x25, x26, [sp, #128]
   426dc:	add	sp, sp, #0xa0
   426e0:	ret
   426e4:	mov	x5, x23
   426e8:	mov	w4, w22
   426ec:	mov	x3, x24
   426f0:	mov	x1, x26
   426f4:	add	x6, sp, #0x98
   426f8:	mov	x0, x25
   426fc:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   42700:	add	x2, x2, #0xd68
   42704:	bl	35380 <snprintf@plt>
   42708:	ldp	x29, x30, [sp, #64]
   4270c:	ldp	x19, x20, [sp, #80]
   42710:	ldp	x21, x22, [sp, #96]
   42714:	ldp	x23, x24, [sp, #112]
   42718:	ldp	x25, x26, [sp, #128]
   4271c:	add	sp, sp, #0xa0
   42720:	ret
   42724:	add	x1, sp, #0x98
   42728:	stp	x23, x24, [sp]
   4272c:	mov	x5, x23
   42730:	str	w0, [sp, #16]
   42734:	mov	w4, w22
   42738:	stp	x23, x1, [sp, #24]
   4273c:	mov	x6, x24
   42740:	mov	x3, x24
   42744:	mov	x1, x26
   42748:	mov	x0, x25
   4274c:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   42750:	add	x2, x2, #0xd90
   42754:	bl	35380 <snprintf@plt>
   42758:	ldp	x29, x30, [sp, #64]
   4275c:	ldp	x19, x20, [sp, #80]
   42760:	ldp	x21, x22, [sp, #96]
   42764:	ldp	x23, x24, [sp, #112]
   42768:	ldp	x25, x26, [sp, #128]
   4276c:	add	sp, sp, #0xa0
   42770:	ret
   42774:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   42778:	add	x3, x3, #0xd50
   4277c:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   42780:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   42784:	add	x3, x3, #0xc0
   42788:	add	x1, x1, #0xb60
   4278c:	add	x0, x0, #0xd28
   42790:	mov	w2, #0xbc0                 	// #3008
   42794:	bl	35ac0 <__assert_fail@plt>
   42798:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   4279c:	add	x3, x3, #0xd50
   427a0:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   427a4:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   427a8:	add	x3, x3, #0xc0
   427ac:	add	x1, x1, #0xb60
   427b0:	add	x0, x0, #0xce8
   427b4:	mov	w2, #0xbbf                 	// #3007
   427b8:	bl	35ac0 <__assert_fail@plt>
   427bc:	nop

00000000000427c0 <aarch64_get_qualifier_esize@@Base>:
   427c0:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   427c4:	ubfiz	x0, x0, #5, #8
   427c8:	ldr	x1, [x1, #3776]
   427cc:	add	x2, x1, x0
   427d0:	ldr	w2, [x2, #24]
   427d4:	cmp	w2, #0x1
   427d8:	b.ne	427e4 <aarch64_get_qualifier_esize@@Base+0x24>  // b.any
   427dc:	ldrb	w0, [x1, x0]
   427e0:	ret
   427e4:	stp	x29, x30, [sp, #-16]!
   427e8:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   427ec:	add	x3, x3, #0xd50
   427f0:	mov	x29, sp
   427f4:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   427f8:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   427fc:	add	x3, x3, #0xd8
   42800:	add	x1, x1, #0xb60
   42804:	add	x0, x0, #0xdd8
   42808:	mov	w2, #0x30e                 	// #782
   4280c:	bl	35ac0 <__assert_fail@plt>

0000000000042810 <aarch64_select_operand_for_sizeq_field_coding@@Base>:
   42810:	stp	x29, x30, [sp, #-32]!
   42814:	mov	x29, sp
   42818:	stp	x19, x20, [sp, #16]
   4281c:	mov	x19, x0
   42820:	ldrb	w0, [x0, #56]
   42824:	sub	w1, w0, #0xd
   42828:	cmp	w1, #0x9
   4282c:	b.hi	42858 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x48>  // b.pmore
   42830:	ldrb	w1, [x19, #57]
   42834:	cmp	w0, w1
   42838:	b.eq	42884 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x74>  // b.none
   4283c:	sub	w1, w1, #0xd
   42840:	cmp	w1, #0x9
   42844:	b.ls	42894 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x84>  // b.plast
   42848:	mov	w0, #0x0                   	// #0
   4284c:	ldp	x19, x20, [sp, #16]
   42850:	ldp	x29, x30, [sp], #32
   42854:	ret
   42858:	sub	w0, w0, #0x5
   4285c:	cmp	w0, #0x4
   42860:	b.hi	42848 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x38>  // b.pmore
   42864:	ldrb	w0, [x19, #57]
   42868:	sub	w0, w0, #0xd
   4286c:	cmp	w0, #0x9
   42870:	b.hi	42848 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x38>  // b.pmore
   42874:	ldrb	w0, [x19, #58]
   42878:	cbnz	w0, 42848 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x38>
   4287c:	mov	w0, #0x1                   	// #1
   42880:	b	4284c <aarch64_select_operand_for_sizeq_field_coding@@Base+0x3c>
   42884:	ldrb	w1, [x19, #58]
   42888:	sub	w1, w1, #0xd
   4288c:	cmp	w1, #0x9
   42890:	b.ls	42918 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x108>  // b.plast
   42894:	bl	35680 <aarch64_get_qualifier_esize@plt>
   42898:	tst	w0, #0xff
   4289c:	b.ne	42948 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x138>  // b.any
   428a0:	ldrb	w1, [x19, #57]
   428a4:	ldrb	w0, [x19, #56]
   428a8:	cmp	w1, w0
   428ac:	b.ne	42848 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x38>  // b.any
   428b0:	ldrb	w0, [x19, #58]
   428b4:	sub	w0, w0, #0xd
   428b8:	cmp	w0, #0x9
   428bc:	b.hi	42848 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x38>  // b.pmore
   428c0:	mov	w0, w1
   428c4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   428c8:	tst	w0, #0xff
   428cc:	b.eq	42848 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x38>  // b.none
   428d0:	ldrb	w0, [x19, #56]
   428d4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   428d8:	and	w20, w0, #0xff
   428dc:	ldrb	w0, [x19, #58]
   428e0:	bl	35680 <aarch64_get_qualifier_esize@plt>
   428e4:	ubfiz	w0, w0, #1, #8
   428e8:	cmp	w20, w0
   428ec:	b.ne	42848 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x38>  // b.any
   428f0:	ldrb	w0, [x19, #56]
   428f4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   428f8:	mov	w1, w0
   428fc:	ldrb	w0, [x19, #57]
   42900:	and	w19, w1, #0xff
   42904:	bl	35680 <aarch64_get_qualifier_esize@plt>
   42908:	cmp	w19, w0, uxtb
   4290c:	b.ne	42848 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x38>  // b.any
   42910:	mov	w0, #0x2                   	// #2
   42914:	b	4284c <aarch64_select_operand_for_sizeq_field_coding@@Base+0x3c>
   42918:	bl	35680 <aarch64_get_qualifier_esize@plt>
   4291c:	and	w20, w0, #0xff
   42920:	ldrb	w0, [x19, #57]
   42924:	bl	35680 <aarch64_get_qualifier_esize@plt>
   42928:	cmp	w20, w0, uxtb
   4292c:	b.eq	42970 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x160>  // b.none
   42930:	ldrb	w1, [x19, #57]
   42934:	ldrb	w0, [x19, #56]
   42938:	sub	w2, w1, #0xd
   4293c:	cmp	w2, #0x9
   42940:	b.hi	428a8 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x98>  // b.pmore
   42944:	b	42894 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x84>
   42948:	ldrb	w0, [x19, #56]
   4294c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   42950:	and	w20, w0, #0xff
   42954:	ldrb	w0, [x19, #57]
   42958:	bl	35680 <aarch64_get_qualifier_esize@plt>
   4295c:	ubfiz	w0, w0, #1, #8
   42960:	cmp	w20, w0
   42964:	b.ne	428a0 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x90>  // b.any
   42968:	mov	w0, #0x1                   	// #1
   4296c:	b	4284c <aarch64_select_operand_for_sizeq_field_coding@@Base+0x3c>
   42970:	ldrb	w0, [x19, #56]
   42974:	bl	35680 <aarch64_get_qualifier_esize@plt>
   42978:	and	w20, w0, #0xff
   4297c:	ldrb	w0, [x19, #58]
   42980:	bl	35680 <aarch64_get_qualifier_esize@plt>
   42984:	mov	w1, w0
   42988:	mov	w0, #0x0                   	// #0
   4298c:	cmp	w20, w1, uxtb
   42990:	b.ne	42930 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x120>  // b.any
   42994:	b	4284c <aarch64_select_operand_for_sizeq_field_coding@@Base+0x3c>

0000000000042998 <aarch64_get_qualifier_nelem@@Base>:
   42998:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   4299c:	ubfiz	x0, x0, #5, #8
   429a0:	ldr	x1, [x1, #3776]
   429a4:	add	x0, x1, x0
   429a8:	ldr	w1, [x0, #24]
   429ac:	cmp	w1, #0x1
   429b0:	b.ne	429bc <aarch64_get_qualifier_nelem@@Base+0x24>  // b.any
   429b4:	ldrb	w0, [x0, #4]
   429b8:	ret
   429bc:	stp	x29, x30, [sp, #-16]!
   429c0:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   429c4:	add	x3, x3, #0xd50
   429c8:	mov	x29, sp
   429cc:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   429d0:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   429d4:	add	x3, x3, #0xf8
   429d8:	add	x1, x1, #0xb60
   429dc:	add	x0, x0, #0xdd8
   429e0:	mov	w2, #0x315                 	// #789
   429e4:	bl	35ac0 <__assert_fail@plt>

00000000000429e8 <aarch64_get_qualifier_standard_value@@Base>:
   429e8:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   429ec:	ubfiz	x0, x0, #5, #8
   429f0:	ldr	x1, [x1, #3776]
   429f4:	add	x0, x1, x0
   429f8:	ldr	w1, [x0, #24]
   429fc:	cmp	w1, #0x1
   42a00:	b.ne	42a0c <aarch64_get_qualifier_standard_value@@Base+0x24>  // b.any
   42a04:	ldr	w0, [x0, #8]
   42a08:	ret
   42a0c:	stp	x29, x30, [sp, #-16]!
   42a10:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   42a14:	add	x3, x3, #0xd50
   42a18:	mov	x29, sp
   42a1c:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   42a20:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   42a24:	add	x3, x3, #0x118
   42a28:	add	x1, x1, #0xb60
   42a2c:	add	x0, x0, #0xdd8
   42a30:	mov	w2, #0x31c                 	// #796
   42a34:	bl	35ac0 <__assert_fail@plt>

0000000000042a38 <aarch64_is_destructive_by_operands@@Base>:
   42a38:	ldr	w2, [x0, #32]
   42a3c:	add	x0, x0, #0x24
   42a40:	cbnz	w2, 42a4c <aarch64_is_destructive_by_operands@@Base+0x14>
   42a44:	b	42a5c <aarch64_is_destructive_by_operands@@Base+0x24>
   42a48:	b.eq	42a64 <aarch64_is_destructive_by_operands@@Base+0x2c>  // b.none
   42a4c:	ldr	w1, [x0]
   42a50:	add	x0, x0, #0x4
   42a54:	cmp	w2, w1
   42a58:	cbnz	w1, 42a48 <aarch64_is_destructive_by_operands@@Base+0x10>
   42a5c:	mov	w0, #0x0                   	// #0
   42a60:	ret
   42a64:	mov	w0, #0x1                   	// #1
   42a68:	ret
   42a6c:	nop

0000000000042a70 <aarch64_num_of_operands@@Base>:
   42a70:	add	x3, x0, #0x1c
   42a74:	mov	x1, #0x0                   	// #0
   42a78:	mov	w0, w1
   42a7c:	add	x1, x1, #0x1
   42a80:	ldr	w2, [x3, x1, lsl #2]
   42a84:	cbnz	w2, 42a78 <aarch64_num_of_operands@@Base+0x8>
   42a88:	cmp	w0, #0x6
   42a8c:	b.gt	42a94 <aarch64_num_of_operands@@Base+0x24>
   42a90:	ret
   42a94:	stp	x29, x30, [sp, #-16]!
   42a98:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   42a9c:	add	x3, x3, #0xd50
   42aa0:	mov	x29, sp
   42aa4:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   42aa8:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   42aac:	add	x3, x3, #0x140
   42ab0:	add	x1, x1, #0xb60
   42ab4:	add	x0, x0, #0xe08
   42ab8:	mov	w2, #0x372                 	// #882
   42abc:	bl	35ac0 <__assert_fail@plt>

0000000000042ac0 <aarch64_find_best_match@@Base>:
   42ac0:	stp	x29, x30, [sp, #-112]!
   42ac4:	mov	x29, sp
   42ac8:	stp	x25, x26, [sp, #64]
   42acc:	mov	x26, x0
   42ad0:	mov	x25, x3
   42ad4:	ldr	x0, [x0, #8]
   42ad8:	stp	x19, x20, [sp, #16]
   42adc:	mov	x19, x1
   42ae0:	stp	x21, x22, [sp, #32]
   42ae4:	mov	w22, w2
   42ae8:	bl	35170 <aarch64_num_of_operands@plt>
   42aec:	cbz	w0, 42d98 <aarch64_find_best_match@@Base+0x2d8>
   42af0:	cmp	w22, #0x0
   42af4:	stp	x27, x28, [sp, #80]
   42af8:	adrp	x28, a6000 <aarch64_operands@@Base+0x16bd0>
   42afc:	ccmp	w0, w22, #0x4, ge  // ge = tcont
   42b00:	stp	x23, x24, [sp, #48]
   42b04:	mov	w24, w0
   42b08:	sub	w0, w0, #0x1
   42b0c:	mov	w23, #0x0                   	// #0
   42b10:	csel	w22, w0, w22, le
   42b14:	cmp	w24, #0x0
   42b18:	ldr	x28, [x28, #4032]
   42b1c:	mvn	w27, w22
   42b20:	cset	w0, gt
   42b24:	and	w27, w0, w27, lsr #31
   42b28:	mov	x2, x28
   42b2c:	nop
   42b30:	ldrb	w1, [x19]
   42b34:	cbnz	w1, 42b84 <aarch64_find_best_match@@Base+0xc4>
   42b38:	ldrb	w1, [x19, #1]
   42b3c:	cbnz	w1, 42b84 <aarch64_find_best_match@@Base+0xc4>
   42b40:	ldrb	w1, [x19, #2]
   42b44:	cbnz	w1, 42b84 <aarch64_find_best_match@@Base+0xc4>
   42b48:	ldrb	w1, [x19, #3]
   42b4c:	cbnz	w1, 42b84 <aarch64_find_best_match@@Base+0xc4>
   42b50:	ldrb	w1, [x19, #4]
   42b54:	cbnz	w1, 42b84 <aarch64_find_best_match@@Base+0xc4>
   42b58:	ldrb	w1, [x19, #5]
   42b5c:	cbnz	w1, 42b84 <aarch64_find_best_match@@Base+0xc4>
   42b60:	cbz	w23, 42e44 <aarch64_find_best_match@@Base+0x384>
   42b64:	mov	w0, #0x0                   	// #0
   42b68:	ldp	x19, x20, [sp, #16]
   42b6c:	ldp	x21, x22, [sp, #32]
   42b70:	ldp	x23, x24, [sp, #48]
   42b74:	ldp	x25, x26, [sp, #64]
   42b78:	ldp	x27, x28, [sp, #80]
   42b7c:	ldp	x29, x30, [sp], #112
   42b80:	ret
   42b84:	cbz	w27, 42e78 <aarch64_find_best_match@@Base+0x3b8>
   42b88:	add	x21, x26, #0x18
   42b8c:	mov	x20, #0x0                   	// #0
   42b90:	ldrb	w4, [x21, #4]
   42b94:	cbz	w4, 42c08 <aarch64_find_best_match@@Base+0x148>
   42b98:	ldrb	w1, [x19, x20]
   42b9c:	cmp	w4, w1
   42ba0:	b.eq	42c08 <aarch64_find_best_match@@Base+0x148>  // b.none
   42ba4:	cmp	w4, #0x3
   42ba8:	b.eq	42de8 <aarch64_find_best_match@@Base+0x328>  // b.none
   42bac:	b.hi	42bdc <aarch64_find_best_match@@Base+0x11c>  // b.pmore
   42bb0:	cmp	w4, #0x1
   42bb4:	b.eq	42e0c <aarch64_find_best_match@@Base+0x34c>  // b.none
   42bb8:	cmp	w4, #0x2
   42bbc:	b.ne	42bc8 <aarch64_find_best_match@@Base+0x108>  // b.any
   42bc0:	cmp	w1, #0x4
   42bc4:	b.eq	42e14 <aarch64_find_best_match@@Base+0x354>  // b.none
   42bc8:	add	w23, w23, #0x1
   42bcc:	add	x19, x19, #0x6
   42bd0:	cmp	w23, #0xa
   42bd4:	b.ne	42b30 <aarch64_find_best_match@@Base+0x70>  // b.any
   42bd8:	b	42b64 <aarch64_find_best_match@@Base+0xa4>
   42bdc:	cmp	w4, #0x4
   42be0:	b.ne	42bc8 <aarch64_find_best_match@@Base+0x108>  // b.any
   42be4:	cmp	w1, #0x2
   42be8:	b.ne	42bc8 <aarch64_find_best_match@@Base+0x108>  // b.any
   42bec:	ldr	w0, [x21]
   42bf0:	add	x0, x0, x0, lsl #1
   42bf4:	add	x0, x2, x0, lsl #4
   42bf8:	ldr	w0, [x0, #16]
   42bfc:	ubfx	x0, x0, #4, #1
   42c00:	cbz	w0, 42bc8 <aarch64_find_best_match@@Base+0x108>
   42c04:	nop
   42c08:	add	w1, w20, #0x1
   42c0c:	add	x21, x21, #0x38
   42c10:	cmp	w24, w1
   42c14:	add	x20, x20, #0x1
   42c18:	ccmp	w22, w1, #0x1, gt
   42c1c:	b.ge	42b90 <aarch64_find_best_match@@Base+0xd0>  // b.tcont
   42c20:	add	x0, x25, #0xf
   42c24:	cmp	w22, #0x0
   42c28:	sub	x0, x0, x19
   42c2c:	csel	w23, w22, wzr, ge  // ge = tcont
   42c30:	cmp	x0, #0x1e
   42c34:	ccmp	w23, #0xe, #0x0, hi  // hi = pmore
   42c38:	b.ls	42db0 <aarch64_find_best_match@@Base+0x2f0>  // b.plast
   42c3c:	add	w23, w23, #0x1
   42c40:	mov	x0, #0x0                   	// #0
   42c44:	and	x1, x23, #0xfffffff0
   42c48:	ldr	q0, [x19, x0]
   42c4c:	str	q0, [x25, x0]
   42c50:	add	x0, x0, #0x10
   42c54:	cmp	x0, x1
   42c58:	b.ne	42c48 <aarch64_find_best_match@@Base+0x188>  // b.any
   42c5c:	and	x0, x23, #0xfffffff0
   42c60:	tst	x23, #0xf
   42c64:	add	x0, x19, x0
   42c68:	and	w1, w23, #0xfffffff0
   42c6c:	b.eq	42dcc <aarch64_find_best_match@@Base+0x30c>  // b.none
   42c70:	ldrb	w3, [x19, w1, uxtw]
   42c74:	add	w2, w1, #0x1
   42c78:	strb	w3, [x25, w1, sxtw]
   42c7c:	cmp	w22, w2
   42c80:	b.lt	42dcc <aarch64_find_best_match@@Base+0x30c>  // b.tstop
   42c84:	ldrb	w4, [x0, #1]
   42c88:	add	w3, w1, #0x2
   42c8c:	strb	w4, [x25, w2, sxtw]
   42c90:	cmp	w22, w3
   42c94:	b.lt	42dd8 <aarch64_find_best_match@@Base+0x318>  // b.tstop
   42c98:	ldrb	w4, [x0, #2]
   42c9c:	add	w2, w1, #0x3
   42ca0:	strb	w4, [x25, w3, sxtw]
   42ca4:	cmp	w22, w2
   42ca8:	b.lt	42dd8 <aarch64_find_best_match@@Base+0x318>  // b.tstop
   42cac:	ldrb	w4, [x0, #3]
   42cb0:	add	w3, w1, #0x4
   42cb4:	strb	w4, [x25, w2, sxtw]
   42cb8:	cmp	w22, w3
   42cbc:	b.lt	42dd8 <aarch64_find_best_match@@Base+0x318>  // b.tstop
   42cc0:	ldrb	w4, [x0, #4]
   42cc4:	add	w2, w1, #0x5
   42cc8:	strb	w4, [x25, w3, sxtw]
   42ccc:	cmp	w22, w2
   42cd0:	b.lt	42dd8 <aarch64_find_best_match@@Base+0x318>  // b.tstop
   42cd4:	ldrb	w4, [x0, #5]
   42cd8:	add	w3, w1, #0x6
   42cdc:	strb	w4, [x25, w2, sxtw]
   42ce0:	cmp	w22, w3
   42ce4:	b.lt	42dd8 <aarch64_find_best_match@@Base+0x318>  // b.tstop
   42ce8:	ldrb	w4, [x0, #6]
   42cec:	add	w2, w1, #0x7
   42cf0:	strb	w4, [x25, w3, sxtw]
   42cf4:	cmp	w22, w2
   42cf8:	b.lt	42dd8 <aarch64_find_best_match@@Base+0x318>  // b.tstop
   42cfc:	ldrb	w4, [x0, #7]
   42d00:	add	w3, w1, #0x8
   42d04:	strb	w4, [x25, w2, sxtw]
   42d08:	cmp	w22, w3
   42d0c:	b.lt	42dd8 <aarch64_find_best_match@@Base+0x318>  // b.tstop
   42d10:	ldrb	w4, [x0, #8]
   42d14:	add	w2, w1, #0x9
   42d18:	strb	w4, [x25, w3, sxtw]
   42d1c:	cmp	w22, w2
   42d20:	b.lt	42dd8 <aarch64_find_best_match@@Base+0x318>  // b.tstop
   42d24:	ldrb	w4, [x0, #9]
   42d28:	add	w3, w1, #0xa
   42d2c:	strb	w4, [x25, w2, sxtw]
   42d30:	cmp	w22, w3
   42d34:	b.lt	42dd8 <aarch64_find_best_match@@Base+0x318>  // b.tstop
   42d38:	ldrb	w4, [x0, #10]
   42d3c:	add	w2, w1, #0xb
   42d40:	strb	w4, [x25, w3, sxtw]
   42d44:	cmp	w22, w2
   42d48:	b.lt	42dd8 <aarch64_find_best_match@@Base+0x318>  // b.tstop
   42d4c:	ldrb	w4, [x0, #11]
   42d50:	add	w3, w1, #0xc
   42d54:	strb	w4, [x25, w2, sxtw]
   42d58:	cmp	w22, w3
   42d5c:	b.lt	42dd8 <aarch64_find_best_match@@Base+0x318>  // b.tstop
   42d60:	ldrb	w4, [x0, #12]
   42d64:	add	w2, w1, #0xd
   42d68:	strb	w4, [x25, w3, sxtw]
   42d6c:	cmp	w22, w2
   42d70:	b.lt	42dd8 <aarch64_find_best_match@@Base+0x318>  // b.tstop
   42d74:	ldrb	w3, [x0, #13]
   42d78:	add	w1, w1, #0xe
   42d7c:	strb	w3, [x25, w2, sxtw]
   42d80:	cmp	w22, w1
   42d84:	b.lt	42dd8 <aarch64_find_best_match@@Base+0x318>  // b.tstop
   42d88:	ldrb	w0, [x0, #14]
   42d8c:	strb	w0, [x25, w1, sxtw]
   42d90:	ldp	x23, x24, [sp, #48]
   42d94:	ldp	x27, x28, [sp, #80]
   42d98:	mov	w0, #0x1                   	// #1
   42d9c:	ldp	x19, x20, [sp, #16]
   42da0:	ldp	x21, x22, [sp, #32]
   42da4:	ldp	x25, x26, [sp, #64]
   42da8:	ldp	x29, x30, [sp], #112
   42dac:	ret
   42db0:	mov	x0, #0x0                   	// #0
   42db4:	ldrb	w1, [x19, x0]
   42db8:	strb	w1, [x25, x0]
   42dbc:	add	x0, x0, #0x1
   42dc0:	cmp	w22, w0
   42dc4:	b.ge	42db4 <aarch64_find_best_match@@Base+0x2f4>  // b.tcont
   42dc8:	add	w23, w23, #0x1
   42dcc:	cmp	w23, #0x5
   42dd0:	b.le	42e48 <aarch64_find_best_match@@Base+0x388>
   42dd4:	nop
   42dd8:	mov	w0, #0x1                   	// #1
   42ddc:	ldp	x23, x24, [sp, #48]
   42de0:	ldp	x27, x28, [sp, #80]
   42de4:	b	42d9c <aarch64_find_best_match@@Base+0x2dc>
   42de8:	cmp	w1, #0x1
   42dec:	b.ne	42bc8 <aarch64_find_best_match@@Base+0x108>  // b.any
   42df0:	ldr	w0, [x21]
   42df4:	add	x0, x0, x0, lsl #1
   42df8:	add	x0, x28, x0, lsl #4
   42dfc:	ldr	w0, [x0, #16]
   42e00:	ubfx	x0, x0, #4, #1
   42e04:	cbnz	w0, 42c08 <aarch64_find_best_match@@Base+0x148>
   42e08:	b	42bc8 <aarch64_find_best_match@@Base+0x108>
   42e0c:	cmp	w1, #0x3
   42e10:	b.ne	42bc8 <aarch64_find_best_match@@Base+0x108>  // b.any
   42e14:	mov	x0, x21
   42e18:	str	x2, [sp, #104]
   42e1c:	bl	35740 <aarch64_stack_pointer_p@plt>
   42e20:	ldr	x2, [sp, #104]
   42e24:	cbz	w0, 42bc8 <aarch64_find_best_match@@Base+0x108>
   42e28:	add	w1, w20, #0x1
   42e2c:	add	x21, x21, #0x38
   42e30:	cmp	w24, w1
   42e34:	add	x20, x20, #0x1
   42e38:	ccmp	w22, w1, #0x1, gt
   42e3c:	b.ge	42b90 <aarch64_find_best_match@@Base+0xd0>  // b.tcont
   42e40:	b	42c20 <aarch64_find_best_match@@Base+0x160>
   42e44:	tbz	w22, #31, 42c20 <aarch64_find_best_match@@Base+0x160>
   42e48:	cmp	w23, #0x5
   42e4c:	mov	x3, #0x1                   	// #1
   42e50:	mov	w2, #0x5                   	// #5
   42e54:	sub	w2, w2, w23
   42e58:	add	x0, x25, w23, sxtw
   42e5c:	csinc	x2, x3, x2, gt
   42e60:	mov	w1, #0x0                   	// #0
   42e64:	bl	35470 <memset@plt>
   42e68:	mov	w0, #0x1                   	// #1
   42e6c:	ldp	x23, x24, [sp, #48]
   42e70:	ldp	x27, x28, [sp, #80]
   42e74:	b	42d9c <aarch64_find_best_match@@Base+0x2dc>
   42e78:	tbz	w22, #31, 42c20 <aarch64_find_best_match@@Base+0x160>
   42e7c:	mov	w23, #0x0                   	// #0
   42e80:	b	42e48 <aarch64_find_best_match@@Base+0x388>
   42e84:	nop

0000000000042e88 <aarch64_wide_constant_p@@Base>:
   42e88:	mov	x3, x0
   42e8c:	cbz	w1, 42eac <aarch64_wide_constant_p@@Base+0x24>
   42e90:	lsr	x4, x0, #32
   42e94:	mov	x5, #0xffffffff            	// #4294967295
   42e98:	cmp	x4, #0x0
   42e9c:	mov	w0, #0x0                   	// #0
   42ea0:	ccmp	x4, x5, #0x4, ne  // ne = any
   42ea4:	b.ne	42edc <aarch64_wide_constant_p@@Base+0x54>  // b.any
   42ea8:	and	x3, x3, x5
   42eac:	tst	x3, #0xffffffffffff0000
   42eb0:	b.eq	42ee0 <aarch64_wide_constant_p@@Base+0x58>  // b.none
   42eb4:	tst	x3, #0xffffffff0000ffff
   42eb8:	b.eq	42ef4 <aarch64_wide_constant_p@@Base+0x6c>  // b.none
   42ebc:	mov	w0, #0x0                   	// #0
   42ec0:	cbnz	w1, 42edc <aarch64_wide_constant_p@@Base+0x54>
   42ec4:	tst	x3, #0xffff0000ffffffff
   42ec8:	b.eq	42efc <aarch64_wide_constant_p@@Base+0x74>  // b.none
   42ecc:	mov	w0, w1
   42ed0:	tst	x3, #0xffffffffffff
   42ed4:	mov	w1, #0x30                  	// #48
   42ed8:	b.eq	42ee4 <aarch64_wide_constant_p@@Base+0x5c>  // b.none
   42edc:	ret
   42ee0:	mov	w1, #0x0                   	// #0
   42ee4:	mov	w0, #0x1                   	// #1
   42ee8:	cbz	x2, 42edc <aarch64_wide_constant_p@@Base+0x54>
   42eec:	str	w1, [x2]
   42ef0:	ret
   42ef4:	mov	w1, #0x10                  	// #16
   42ef8:	b	42ee4 <aarch64_wide_constant_p@@Base+0x5c>
   42efc:	mov	w1, #0x20                  	// #32
   42f00:	b	42ee4 <aarch64_wide_constant_p@@Base+0x5c>
   42f04:	nop

0000000000042f08 <aarch64_logical_immediate_p@@Base>:
   42f08:	stp	x29, x30, [sp, #-64]!
   42f0c:	mov	x29, sp
   42f10:	stp	x21, x22, [sp, #32]
   42f14:	adrp	x22, fd000 <aarch64_opcode_table@@Base+0x55a20>
   42f18:	mov	x21, x0
   42f1c:	ldr	w3, [x22, #1696]
   42f20:	stp	x19, x20, [sp, #16]
   42f24:	mov	w19, w1
   42f28:	mov	x20, x2
   42f2c:	cbz	w3, 43000 <aarch64_logical_immediate_p@@Base+0xf8>
   42f30:	lsl	w1, w19, #2
   42f34:	mov	x0, #0xffffffffffffffff    	// #-1
   42f38:	lsl	x0, x0, x1
   42f3c:	lsl	x0, x0, x1
   42f40:	tst	x0, x21
   42f44:	bic	x1, x21, x0
   42f48:	b.eq	42f58 <aarch64_logical_immediate_p@@Base+0x50>  // b.none
   42f4c:	bics	xzr, x0, x21
   42f50:	mov	w0, #0x0                   	// #0
   42f54:	b.ne	42fc8 <aarch64_logical_immediate_p@@Base+0xc0>  // b.any
   42f58:	lsl	w0, w19, #3
   42f5c:	cmp	w0, #0x3f
   42f60:	b.gt	42f7c <aarch64_logical_immediate_p@@Base+0x74>
   42f64:	nop
   42f68:	lsl	x2, x1, x0
   42f6c:	lsl	w0, w0, #1
   42f70:	orr	x1, x1, x2
   42f74:	cmp	w0, #0x3f
   42f78:	b.le	42f68 <aarch64_logical_immediate_p@@Base+0x60>
   42f7c:	adrp	x5, fd000 <aarch64_opcode_table@@Base+0x55a20>
   42f80:	add	x5, x5, #0x6b0
   42f84:	mov	x4, #0x14d6                	// #5334
   42f88:	mov	x3, #0x0                   	// #0
   42f8c:	cmp	x4, x3
   42f90:	b.ls	42fe4 <aarch64_logical_immediate_p@@Base+0xdc>  // b.plast
   42f94:	add	x0, x4, x3
   42f98:	lsr	x0, x0, #1
   42f9c:	lsl	x2, x0, #4
   42fa0:	add	x6, x2, x5
   42fa4:	ldr	x2, [x2, x5]
   42fa8:	cmp	x1, x2
   42fac:	b.cc	42ff8 <aarch64_logical_immediate_p@@Base+0xf0>  // b.lo, b.ul, b.last
   42fb0:	b.hi	42fd8 <aarch64_logical_immediate_p@@Base+0xd0>  // b.pmore
   42fb4:	mov	w0, #0x1                   	// #1
   42fb8:	cbz	x20, 42fc8 <aarch64_logical_immediate_p@@Base+0xc0>
   42fbc:	ldr	w1, [x6, #8]
   42fc0:	mov	w0, #0x1                   	// #1
   42fc4:	str	w1, [x20]
   42fc8:	ldp	x19, x20, [sp, #16]
   42fcc:	ldp	x21, x22, [sp, #32]
   42fd0:	ldp	x29, x30, [sp], #64
   42fd4:	ret
   42fd8:	add	x3, x0, #0x1
   42fdc:	cmp	x4, x3
   42fe0:	b.hi	42f94 <aarch64_logical_immediate_p@@Base+0x8c>  // b.pmore
   42fe4:	mov	w0, #0x0                   	// #0
   42fe8:	ldp	x19, x20, [sp, #16]
   42fec:	ldp	x21, x22, [sp, #32]
   42ff0:	ldp	x29, x30, [sp], #64
   42ff4:	ret
   42ff8:	mov	x4, x0
   42ffc:	b	42f8c <aarch64_logical_immediate_p@@Base+0x84>
   43000:	mov	w14, #0x1                   	// #1
   43004:	mov	w30, w14
   43008:	str	x23, [sp, #48]
   4300c:	adrp	x23, fd000 <aarch64_opcode_table@@Base+0x55a20>
   43010:	add	x18, x23, #0x6b0
   43014:	mov	x17, #0x1                   	// #1
   43018:	mov	w0, #0x6                   	// #6
   4301c:	nop
   43020:	mov	w5, w14
   43024:	cmp	w14, #0x6
   43028:	lsl	w1, w30, w14
   4302c:	add	w14, w14, #0x1
   43030:	b.eq	431c0 <aarch64_logical_immediate_p@@Base+0x2b8>  // b.none
   43034:	sub	w2, w0, w14
   43038:	lsl	x15, x17, x1
   4303c:	sub	x15, x15, #0x1
   43040:	lsl	w2, w30, w2
   43044:	sub	w2, w2, #0x1
   43048:	lsl	w2, w2, w14
   4304c:	sub	w16, w1, #0x1
   43050:	mov	w9, #0x0                   	// #0
   43054:	nop
   43058:	mov	w11, w9
   4305c:	add	w9, w9, #0x1
   43060:	orr	w11, w11, w2
   43064:	add	w12, w3, #0x1
   43068:	lsl	x4, x17, x9
   4306c:	add	x7, x18, w3, sxtw #4
   43070:	sub	x4, x4, #0x1
   43074:	mov	w10, #0x0                   	// #0
   43078:	mov	w13, #0x1                   	// #1
   4307c:	mov	w8, #0x0                   	// #0
   43080:	cbz	w8, 430f4 <aarch64_logical_immediate_p@@Base+0x1ec>
   43084:	nop
   43088:	sub	w6, w1, w8
   4308c:	lsr	x3, x4, x8
   43090:	cmp	w5, #0x4
   43094:	lsl	x6, x4, x6
   43098:	and	x6, x6, x15
   4309c:	orr	x3, x3, x6
   430a0:	b.eq	430bc <aarch64_logical_immediate_p@@Base+0x1b4>  // b.none
   430a4:	b.hi	43124 <aarch64_logical_immediate_p@@Base+0x21c>  // b.pmore
   430a8:	cmp	w5, #0x2
   430ac:	b.eq	43118 <aarch64_logical_immediate_p@@Base+0x210>  // b.none
   430b0:	cmp	w5, #0x3
   430b4:	b.ne	43114 <aarch64_logical_immediate_p@@Base+0x20c>  // b.any
   430b8:	orr	x3, x3, x3, lsl #8
   430bc:	orr	x3, x3, x3, lsl #16
   430c0:	orr	x3, x3, x3, lsl #32
   430c4:	orr	w6, w11, w10
   430c8:	str	x3, [x7]
   430cc:	cmp	w1, w13
   430d0:	str	w6, [x7, #8]
   430d4:	mov	w3, w12
   430d8:	b.ls	43144 <aarch64_logical_immediate_p@@Base+0x23c>  // b.plast
   430dc:	add	w8, w8, #0x1
   430e0:	add	w12, w12, #0x1
   430e4:	add	w13, w13, #0x1
   430e8:	add	x7, x7, #0x10
   430ec:	add	w10, w10, #0x40
   430f0:	cbnz	w8, 43088 <aarch64_logical_immediate_p@@Base+0x180>
   430f4:	cmp	w5, #0x4
   430f8:	b.eq	43188 <aarch64_logical_immediate_p@@Base+0x280>  // b.none
   430fc:	b.hi	431a0 <aarch64_logical_immediate_p@@Base+0x298>  // b.pmore
   43100:	cmp	w5, #0x2
   43104:	b.eq	43194 <aarch64_logical_immediate_p@@Base+0x28c>  // b.none
   43108:	cmp	w5, #0x3
   4310c:	mov	x3, x4
   43110:	b.eq	430b8 <aarch64_logical_immediate_p@@Base+0x1b0>  // b.none
   43114:	orr	x3, x3, x3, lsl #2
   43118:	orr	x3, x3, x3, lsl #4
   4311c:	orr	x3, x3, x3, lsl #8
   43120:	b	430bc <aarch64_logical_immediate_p@@Base+0x1b4>
   43124:	cmp	w5, #0x5
   43128:	b.eq	430c0 <aarch64_logical_immediate_p@@Base+0x1b8>  // b.none
   4312c:	orr	w6, w11, w10
   43130:	str	x3, [x7]
   43134:	str	w6, [x7, #8]
   43138:	cmp	w1, w13
   4313c:	mov	w3, w12
   43140:	b.hi	430dc <aarch64_logical_immediate_p@@Base+0x1d4>  // b.pmore
   43144:	cmp	w9, w16
   43148:	b.ne	43058 <aarch64_logical_immediate_p@@Base+0x150>  // b.any
   4314c:	cmp	w14, #0x7
   43150:	b.ne	43020 <aarch64_logical_immediate_p@@Base+0x118>  // b.any
   43154:	mov	w0, #0x14d6                	// #5334
   43158:	cmp	w12, w0
   4315c:	b.ne	431cc <aarch64_logical_immediate_p@@Base+0x2c4>  // b.any
   43160:	add	x0, x23, #0x6b0
   43164:	adrp	x3, 41000 <aarch64_decode_insn@@Base+0x100>
   43168:	mov	x2, #0x10                  	// #16
   4316c:	add	x3, x3, #0xd30
   43170:	mov	x1, #0x14d6                	// #5334
   43174:	bl	35270 <qsort@plt>
   43178:	mov	w0, #0x1                   	// #1
   4317c:	str	w0, [x22, #1696]
   43180:	ldr	x23, [sp, #48]
   43184:	b	42f30 <aarch64_logical_immediate_p@@Base+0x28>
   43188:	mov	x3, x4
   4318c:	orr	x3, x3, x3, lsl #16
   43190:	b	430c0 <aarch64_logical_immediate_p@@Base+0x1b8>
   43194:	mov	x3, x4
   43198:	orr	x3, x3, x3, lsl #4
   4319c:	b	4311c <aarch64_logical_immediate_p@@Base+0x214>
   431a0:	cmp	w5, #0x5
   431a4:	b.eq	431b8 <aarch64_logical_immediate_p@@Base+0x2b0>  // b.none
   431a8:	orr	w3, w11, w10
   431ac:	str	x4, [x7]
   431b0:	str	w3, [x7, #8]
   431b4:	b	430dc <aarch64_logical_immediate_p@@Base+0x1d4>
   431b8:	mov	x3, x4
   431bc:	b	430c0 <aarch64_logical_immediate_p@@Base+0x1b8>
   431c0:	mov	w2, #0x1000                	// #4096
   431c4:	mov	x15, #0xffffffffffffffff    	// #-1
   431c8:	b	4304c <aarch64_logical_immediate_p@@Base+0x144>
   431cc:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   431d0:	add	x3, x3, #0xd50
   431d4:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   431d8:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   431dc:	add	x3, x3, #0x158
   431e0:	add	x1, x1, #0xb60
   431e4:	add	x0, x0, #0xe30
   431e8:	mov	w2, #0x4c9                 	// #1225
   431ec:	bl	35ac0 <__assert_fail@plt>

00000000000431f0 <aarch64_shrink_expanded_imm8@@Base>:
   431f0:	mov	x1, x0
   431f4:	and	w0, w0, #0xff
   431f8:	cmp	w0, #0xff
   431fc:	b.eq	43284 <aarch64_shrink_expanded_imm8@@Base+0x94>  // b.none
   43200:	cbnz	w0, 4327c <aarch64_shrink_expanded_imm8@@Base+0x8c>
   43204:	ubfx	w2, w1, #8, #8
   43208:	cmp	w2, #0xff
   4320c:	b.eq	43294 <aarch64_shrink_expanded_imm8@@Base+0xa4>  // b.none
   43210:	cbnz	w2, 4327c <aarch64_shrink_expanded_imm8@@Base+0x8c>
   43214:	ubfx	w2, w1, #16, #8
   43218:	cmp	w2, #0xff
   4321c:	b.eq	432a4 <aarch64_shrink_expanded_imm8@@Base+0xb4>  // b.none
   43220:	cbnz	w2, 4327c <aarch64_shrink_expanded_imm8@@Base+0x8c>
   43224:	lsr	w2, w1, #24
   43228:	cmp	w2, #0xff
   4322c:	b.eq	432b4 <aarch64_shrink_expanded_imm8@@Base+0xc4>  // b.none
   43230:	cbnz	w2, 4327c <aarch64_shrink_expanded_imm8@@Base+0x8c>
   43234:	ubfx	x2, x1, #32, #8
   43238:	cmp	w2, #0xff
   4323c:	b.eq	432c4 <aarch64_shrink_expanded_imm8@@Base+0xd4>  // b.none
   43240:	cbnz	w2, 4327c <aarch64_shrink_expanded_imm8@@Base+0x8c>
   43244:	ubfx	x2, x1, #40, #8
   43248:	cmp	w2, #0xff
   4324c:	b.eq	432d4 <aarch64_shrink_expanded_imm8@@Base+0xe4>  // b.none
   43250:	cbnz	w2, 4327c <aarch64_shrink_expanded_imm8@@Base+0x8c>
   43254:	ubfx	x2, x1, #48, #8
   43258:	cmp	w2, #0xff
   4325c:	b.eq	432e4 <aarch64_shrink_expanded_imm8@@Base+0xf4>  // b.none
   43260:	cbnz	w2, 4327c <aarch64_shrink_expanded_imm8@@Base+0x8c>
   43264:	lsr	x1, x1, #56
   43268:	cmp	w1, #0xff
   4326c:	b.eq	432f4 <aarch64_shrink_expanded_imm8@@Base+0x104>  // b.none
   43270:	cmp	w1, #0x0
   43274:	csinv	w0, w0, wzr, eq  // eq = none
   43278:	ret
   4327c:	mov	w0, #0xffffffff            	// #-1
   43280:	ret
   43284:	ubfx	w2, w1, #8, #8
   43288:	mov	w0, #0x1                   	// #1
   4328c:	cmp	w2, #0xff
   43290:	b.ne	43210 <aarch64_shrink_expanded_imm8@@Base+0x20>  // b.any
   43294:	ubfx	w2, w1, #16, #8
   43298:	orr	w0, w0, #0x2
   4329c:	cmp	w2, #0xff
   432a0:	b.ne	43220 <aarch64_shrink_expanded_imm8@@Base+0x30>  // b.any
   432a4:	lsr	w2, w1, #24
   432a8:	orr	w0, w0, #0x4
   432ac:	cmp	w2, #0xff
   432b0:	b.ne	43230 <aarch64_shrink_expanded_imm8@@Base+0x40>  // b.any
   432b4:	ubfx	x2, x1, #32, #8
   432b8:	orr	w0, w0, #0x8
   432bc:	cmp	w2, #0xff
   432c0:	b.ne	43240 <aarch64_shrink_expanded_imm8@@Base+0x50>  // b.any
   432c4:	ubfx	x2, x1, #40, #8
   432c8:	orr	w0, w0, #0x10
   432cc:	cmp	w2, #0xff
   432d0:	b.ne	43250 <aarch64_shrink_expanded_imm8@@Base+0x60>  // b.any
   432d4:	ubfx	x2, x1, #48, #8
   432d8:	orr	w0, w0, #0x20
   432dc:	cmp	w2, #0xff
   432e0:	b.ne	43260 <aarch64_shrink_expanded_imm8@@Base+0x70>  // b.any
   432e4:	lsr	x1, x1, #56
   432e8:	orr	w0, w0, #0x40
   432ec:	cmp	w1, #0xff
   432f0:	b.ne	43270 <aarch64_shrink_expanded_imm8@@Base+0x80>  // b.any
   432f4:	orr	w0, w0, #0x80
   432f8:	ret
   432fc:	nop

0000000000043300 <aarch64_replace_opcode@@Base>:
   43300:	mov	x2, x0
   43304:	ldr	w3, [x1, #32]
   43308:	ldr	x0, [x0, #8]
   4330c:	str	x1, [x2, #8]
   43310:	str	w3, [x2, #24]
   43314:	cbz	w3, 43350 <aarch64_replace_opcode@@Base+0x50>
   43318:	ldr	w3, [x1, #36]
   4331c:	str	w3, [x2, #80]
   43320:	cbz	w3, 43350 <aarch64_replace_opcode@@Base+0x50>
   43324:	ldr	w3, [x1, #40]
   43328:	str	w3, [x2, #136]
   4332c:	cbz	w3, 43350 <aarch64_replace_opcode@@Base+0x50>
   43330:	ldr	w3, [x1, #44]
   43334:	str	w3, [x2, #192]
   43338:	cbz	w3, 43350 <aarch64_replace_opcode@@Base+0x50>
   4333c:	ldr	w3, [x1, #48]
   43340:	str	w3, [x2, #248]
   43344:	cbz	w3, 43350 <aarch64_replace_opcode@@Base+0x50>
   43348:	ldr	w1, [x1, #52]
   4334c:	str	w1, [x2, #304]
   43350:	ret
   43354:	nop

0000000000043358 <aarch64_operand_index@@Base>:
   43358:	ldr	w2, [x0]
   4335c:	cmp	w1, w2
   43360:	b.eq	433c4 <aarch64_operand_index@@Base+0x6c>  // b.none
   43364:	cbz	w2, 433bc <aarch64_operand_index@@Base+0x64>
   43368:	ldr	w2, [x0, #4]
   4336c:	cmp	w1, w2
   43370:	b.eq	433cc <aarch64_operand_index@@Base+0x74>  // b.none
   43374:	cbz	w2, 433bc <aarch64_operand_index@@Base+0x64>
   43378:	ldr	w2, [x0, #8]
   4337c:	cmp	w1, w2
   43380:	b.eq	433d4 <aarch64_operand_index@@Base+0x7c>  // b.none
   43384:	cbz	w2, 433bc <aarch64_operand_index@@Base+0x64>
   43388:	ldr	w2, [x0, #12]
   4338c:	cmp	w1, w2
   43390:	b.eq	433dc <aarch64_operand_index@@Base+0x84>  // b.none
   43394:	cbz	w2, 433bc <aarch64_operand_index@@Base+0x64>
   43398:	ldr	w2, [x0, #16]
   4339c:	cmp	w1, w2
   433a0:	b.eq	433e4 <aarch64_operand_index@@Base+0x8c>  // b.none
   433a4:	cbz	w2, 433bc <aarch64_operand_index@@Base+0x64>
   433a8:	ldr	w2, [x0, #20]
   433ac:	mov	w0, #0x5                   	// #5
   433b0:	cmp	w2, w1
   433b4:	csinv	w0, w0, wzr, eq  // eq = none
   433b8:	ret
   433bc:	mov	w0, #0xffffffff            	// #-1
   433c0:	ret
   433c4:	mov	w0, #0x0                   	// #0
   433c8:	ret
   433cc:	mov	w0, #0x1                   	// #1
   433d0:	ret
   433d4:	mov	w0, #0x2                   	// #2
   433d8:	ret
   433dc:	mov	w0, #0x3                   	// #3
   433e0:	ret
   433e4:	mov	w0, #0x4                   	// #4
   433e8:	ret
   433ec:	nop

00000000000433f0 <aarch64_sys_reg_deprecated_p@@Base>:
   433f0:	ldr	w0, [x0, #12]
   433f4:	and	w0, w0, #0x1
   433f8:	ret
   433fc:	nop

0000000000043400 <aarch64_print_operand@@Base>:
   43400:	stp	x29, x30, [sp, #-128]!
   43404:	mov	x29, sp
   43408:	stp	x19, x20, [sp, #16]
   4340c:	mov	x19, x0
   43410:	mov	w0, #0x38                  	// #56
   43414:	stp	x21, x22, [sp, #32]
   43418:	mov	x20, x1
   4341c:	smull	x0, w5, w0
   43420:	strb	wzr, [x19]
   43424:	add	x21, x4, x0
   43428:	cbz	x6, 43430 <aarch64_print_operand@@Base+0x30>
   4342c:	str	wzr, [x6]
   43430:	ldr	w8, [x4, x0]
   43434:	sub	w0, w8, #0x1
   43438:	cmp	w0, #0xce
   4343c:	b.ls	43470 <aarch64_print_operand@@Base+0x70>  // b.plast
   43440:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   43444:	add	x3, x3, #0xd50
   43448:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   4344c:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   43450:	add	x3, x3, #0x170
   43454:	add	x1, x1, #0xb60
   43458:	add	x0, x0, #0x870
   4345c:	mov	w2, #0xebb                 	// #3771
   43460:	stp	x23, x24, [sp, #48]
   43464:	stp	x25, x26, [sp, #64]
   43468:	stp	x27, x28, [sp, #80]
   4346c:	bl	35ac0 <__assert_fail@plt>
   43470:	adrp	x9, 62000 <xexit@@Base+0x6a80>
   43474:	add	x9, x9, #0x9d8
   43478:	ldrh	w0, [x9, w0, uxtw #1]
   4347c:	adr	x1, 43488 <aarch64_print_operand@@Base+0x88>
   43480:	add	x0, x1, w0, sxth #2
   43484:	br	x0
   43488:	ldr	x3, [x21, #16]
   4348c:	mov	x1, x20
   43490:	mov	x0, x19
   43494:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   43498:	add	x2, x2, #0x40
   4349c:	bl	35380 <snprintf@plt>
   434a0:	ldp	x19, x20, [sp, #16]
   434a4:	ldp	x21, x22, [sp, #32]
   434a8:	ldp	x29, x30, [sp], #128
   434ac:	ret
   434b0:	ldrsw	x4, [x21, #16]
   434b4:	adrp	x3, 8c000 <_sch_istable@@Base+0x14208>
   434b8:	add	x3, x3, #0x3c0
   434bc:	mov	x1, x20
   434c0:	add	x4, x4, #0x20
   434c4:	mov	x0, x19
   434c8:	mov	x2, x21
   434cc:	ldr	x3, [x3, x4, lsl #3]
   434d0:	bl	41e10 <print_aarch64_disassembler_options@@Base+0x1c0>
   434d4:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   434d8:	ldrb	w0, [x21, #4]
   434dc:	bl	353f0 <aarch64_get_qualifier_name@plt>
   434e0:	mov	x3, x0
   434e4:	ldr	w4, [x21, #16]
   434e8:	mov	x1, x20
   434ec:	mov	x0, x19
   434f0:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   434f4:	add	x2, x2, #0xfc0
   434f8:	bl	35380 <snprintf@plt>
   434fc:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   43500:	ldrsw	x1, [x21, #16]
   43504:	adrp	x0, 8c000 <_sch_istable@@Base+0x14208>
   43508:	ldrb	w4, [x21, #4]
   4350c:	add	x0, x0, #0x3c0
   43510:	add	x1, x1, #0x20
   43514:	ldr	w2, [x21, #20]
   43518:	sub	w3, w4, #0x7
   4351c:	and	w3, w3, #0xff
   43520:	cmp	w3, #0x1
   43524:	ldr	x22, [x0, x1, lsl #3]
   43528:	b.hi	4450c <aarch64_print_operand@@Base+0x110c>  // b.pmore
   4352c:	cmp	w4, #0x8
   43530:	ldr	w5, [x21, #32]
   43534:	cset	x3, eq  // eq = none
   43538:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   4353c:	ldr	x4, [x21, #40]
   43540:	lsl	x3, x3, #5
   43544:	ldr	x1, [x1, #3904]
   43548:	add	x2, x3, w2, sxtw
   4354c:	add	x0, x0, #0x400
   43550:	ubfiz	x3, x5, #4, #32
   43554:	stp	x23, x24, [sp, #48]
   43558:	ldr	x3, [x1, x3]
   4355c:	ldr	x23, [x0, x2, lsl #3]
   43560:	cbnz	x4, 439cc <aarch64_print_operand@@Base+0x5cc>
   43564:	add	x21, sp, #0x70
   43568:	cmp	w5, #0x5
   4356c:	b.eq	442d4 <aarch64_print_operand@@Base+0xed4>  // b.none
   43570:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   43574:	mov	x0, x21
   43578:	add	x2, x2, #0x160
   4357c:	mov	x1, #0x10                  	// #16
   43580:	bl	35380 <snprintf@plt>
   43584:	mov	x5, x21
   43588:	mov	x4, x23
   4358c:	mov	x3, x22
   43590:	mov	x1, x20
   43594:	mov	x0, x19
   43598:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   4359c:	add	x2, x2, #0x178
   435a0:	bl	35380 <snprintf@plt>
   435a4:	ldp	x23, x24, [sp, #48]
   435a8:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   435ac:	ldrsw	x1, [x21, #16]
   435b0:	stp	x23, x24, [sp, #48]
   435b4:	adrp	x24, 8c000 <_sch_istable@@Base+0x14208>
   435b8:	add	x1, x1, #0x20
   435bc:	add	x2, x24, #0x3c0
   435c0:	ldr	w0, [x21, #32]
   435c4:	ldr	w22, [x21, #20]
   435c8:	cmp	w0, #0xc
   435cc:	ldr	x23, [x2, x1, lsl #3]
   435d0:	b.eq	435e8 <aarch64_print_operand@@Base+0x1e8>  // b.none
   435d4:	b.hi	43890 <aarch64_print_operand@@Base+0x490>  // b.pmore
   435d8:	cmp	w0, #0x5
   435dc:	b.eq	43898 <aarch64_print_operand@@Base+0x498>  // b.none
   435e0:	cmp	w0, #0x8
   435e4:	b.ne	44698 <aarch64_print_operand@@Base+0x1298>  // b.any
   435e8:	mov	w0, #0x1                   	// #1
   435ec:	bl	35680 <aarch64_get_qualifier_esize@plt>
   435f0:	and	w0, w0, #0xff
   435f4:	cmp	w0, #0x4
   435f8:	add	x24, x24, #0x3c0
   435fc:	cset	x0, ne  // ne = any
   43600:	ldr	w1, [x21, #32]
   43604:	ldr	x4, [x21, #40]
   43608:	lsl	x0, x0, #5
   4360c:	add	x0, x0, w22, sxtw
   43610:	ubfiz	x2, x1, #4, #32
   43614:	add	x0, x0, #0x40
   43618:	ldr	x22, [x24, x0, lsl #3]
   4361c:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   43620:	ldr	x0, [x0, #3904]
   43624:	ldr	x3, [x0, x2]
   43628:	cbz	x4, 44268 <aarch64_print_operand@@Base+0xe68>
   4362c:	mov	x5, #0xd70b                	// #55051
   43630:	add	x21, sp, #0x70
   43634:	movk	x5, #0x70a3, lsl #16
   43638:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   4363c:	movk	x5, #0xa3d, lsl #32
   43640:	mov	x0, x21
   43644:	movk	x5, #0xa3d7, lsl #48
   43648:	add	x2, x2, #0x88
   4364c:	mov	x1, #0x10                  	// #16
   43650:	smulh	x5, x4, x5
   43654:	add	x5, x5, x4
   43658:	asr	x5, x5, #6
   4365c:	sub	x5, x5, x4, asr #63
   43660:	add	x6, x5, x5, lsl #1
   43664:	add	x5, x5, x6, lsl #3
   43668:	sub	x4, x4, x5, lsl #2
   4366c:	bl	35380 <snprintf@plt>
   43670:	mov	x5, x21
   43674:	mov	x4, x22
   43678:	mov	x3, x23
   4367c:	b	43590 <aarch64_print_operand@@Base+0x190>
   43680:	cmp	w8, #0x9
   43684:	b.eq	442dc <aarch64_print_operand@@Base+0xedc>  // b.none
   43688:	ldr	x1, [x3, #120]
   4368c:	add	w0, w5, #0x1
   43690:	ubfx	x2, x1, #12, #3
   43694:	cmp	x0, x2
   43698:	b.eq	443dc <aarch64_print_operand@@Base+0xfdc>  // b.none
   4369c:	ldrb	w0, [x21, #4]
   436a0:	sub	w1, w0, #0x1
   436a4:	and	w1, w1, #0xff
   436a8:	cmp	w1, #0x1
   436ac:	b.hi	445d8 <aarch64_print_operand@@Base+0x11d8>  // b.pmore
   436b0:	ldr	w21, [x21, #16]
   436b4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   436b8:	and	w0, w0, #0xff
   436bc:	adrp	x4, 8c000 <_sch_istable@@Base+0x14208>
   436c0:	cmp	w0, #0x4
   436c4:	add	x4, x4, #0x3c0
   436c8:	cset	x3, ne  // ne = any
   436cc:	mov	x1, x20
   436d0:	mov	x0, x19
   436d4:	adrp	x2, 6d000 <fields@@Base+0x9f60>
   436d8:	lsl	x3, x3, #5
   436dc:	add	x2, x2, #0xe48
   436e0:	add	x3, x3, w21, sxtw
   436e4:	add	x3, x3, #0x40
   436e8:	ldr	x3, [x4, x3, lsl #3]
   436ec:	bl	35380 <snprintf@plt>
   436f0:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   436f4:	ldrb	w0, [x21, #4]
   436f8:	ldr	w21, [x21, #16]
   436fc:	cbz	w0, 44310 <aarch64_print_operand@@Base+0xf10>
   43700:	sub	w1, w0, #0x17
   43704:	and	w1, w1, #0xff
   43708:	cmp	w1, #0x1
   4370c:	b.ls	44384 <aarch64_print_operand@@Base+0xf84>  // b.plast
   43710:	bl	353f0 <aarch64_get_qualifier_name@plt>
   43714:	mov	x4, x0
   43718:	mov	w3, w21
   4371c:	mov	x1, x20
   43720:	mov	x0, x19
   43724:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   43728:	add	x2, x2, #0x8
   4372c:	bl	35380 <snprintf@plt>
   43730:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   43734:	ldrb	w0, [x21, #4]
   43738:	ldr	w21, [x21, #16]
   4373c:	cbnz	w0, 44298 <aarch64_print_operand@@Base+0xe98>
   43740:	mov	w3, w21
   43744:	mov	x1, x20
   43748:	mov	x0, x19
   4374c:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   43750:	add	x2, x2, #0x10
   43754:	bl	35380 <snprintf@plt>
   43758:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   4375c:	ldr	x1, [x3, #120]
   43760:	add	w0, w5, #0x1
   43764:	ldr	x3, [x21, #16]
   43768:	ubfx	x2, x1, #12, #3
   4376c:	cmp	x2, x0
   43770:	b.ne	43780 <aarch64_print_operand@@Base+0x380>  // b.any
   43774:	ubfx	x1, x1, #15, #5
   43778:	cmp	x1, x3
   4377c:	b.eq	434a0 <aarch64_print_operand@@Base+0xa0>  // b.none
   43780:	mov	x1, x20
   43784:	mov	x0, x19
   43788:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   4378c:	add	x2, x2, #0x148
   43790:	bl	35380 <snprintf@plt>
   43794:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   43798:	ldr	x3, [x21, #16]
   4379c:	mov	x1, x20
   437a0:	mov	x0, x19
   437a4:	adrp	x2, 6d000 <fields@@Base+0x9f60>
   437a8:	add	x2, x2, #0xe48
   437ac:	ldr	x3, [x3]
   437b0:	bl	35380 <snprintf@plt>
   437b4:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   437b8:	ldr	x4, [x21, #40]
   437bc:	mov	x1, x20
   437c0:	mov	x0, x19
   437c4:	ldr	x3, [x21, #16]
   437c8:	cbz	x4, 438e0 <aarch64_print_operand@@Base+0x4e0>
   437cc:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   437d0:	add	x2, x2, #0x100
   437d4:	bl	35380 <snprintf@plt>
   437d8:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   437dc:	ldrb	w0, [x21, #4]
   437e0:	ldr	w22, [x21, #16]
   437e4:	bl	353f0 <aarch64_get_qualifier_name@plt>
   437e8:	mov	x4, x0
   437ec:	ldr	x5, [x21, #24]
   437f0:	mov	w3, w22
   437f4:	mov	x1, x20
   437f8:	mov	x0, x19
   437fc:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   43800:	add	x2, x2, #0x28
   43804:	bl	35380 <snprintf@plt>
   43808:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   4380c:	ldrb	w0, [x21, #4]
   43810:	ldr	w22, [x21, #16]
   43814:	bl	353f0 <aarch64_get_qualifier_name@plt>
   43818:	mov	x4, x0
   4381c:	ldr	x5, [x21, #24]
   43820:	mov	w3, w22
   43824:	mov	x1, x20
   43828:	mov	x0, x19
   4382c:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   43830:	add	x2, x2, #0xfd0
   43834:	bl	35380 <snprintf@plt>
   43838:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   4383c:	ldrb	w0, [x21, #4]
   43840:	sub	w1, w0, #0x1
   43844:	and	w1, w1, #0xff
   43848:	cmp	w1, #0x3
   4384c:	b.hi	44638 <aarch64_print_operand@@Base+0x1238>  // b.pmore
   43850:	ldr	w21, [x21, #16]
   43854:	bl	35680 <aarch64_get_qualifier_esize@plt>
   43858:	and	w0, w0, #0xff
   4385c:	adrp	x3, 8c000 <_sch_istable@@Base+0x14208>
   43860:	cmp	w0, #0x4
   43864:	add	x3, x3, #0x3c0
   43868:	cset	x4, ne  // ne = any
   4386c:	mov	x1, x20
   43870:	mov	x0, x19
   43874:	adrp	x2, 6d000 <fields@@Base+0x9f60>
   43878:	lsl	x4, x4, #5
   4387c:	add	x2, x2, #0xe48
   43880:	add	x21, x4, w21, sxtw
   43884:	ldr	x3, [x3, x21, lsl #3]
   43888:	bl	35380 <snprintf@plt>
   4388c:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   43890:	cmp	w0, #0xd
   43894:	b.ne	44698 <aarch64_print_operand@@Base+0x1298>  // b.any
   43898:	mov	w0, #0x2                   	// #2
   4389c:	b	435ec <aarch64_print_operand@@Base+0x1ec>
   438a0:	mov	x2, x21
   438a4:	mov	x1, x20
   438a8:	mov	x0, x19
   438ac:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   438b0:	add	x3, x3, #0xff0
   438b4:	bl	424d8 <aarch64_get_qualifier_name@@Base+0x18>
   438b8:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   438bc:	ldr	x3, [x21, #16]
   438c0:	add	x3, x2, x3
   438c4:	cbz	x6, 438d0 <aarch64_print_operand@@Base+0x4d0>
   438c8:	mov	w0, #0x1                   	// #1
   438cc:	str	w0, [x6]
   438d0:	cbz	x7, 438d8 <aarch64_print_operand@@Base+0x4d8>
   438d4:	str	x3, [x7]
   438d8:	mov	x1, x20
   438dc:	mov	x0, x19
   438e0:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   438e4:	add	x2, x2, #0x118
   438e8:	bl	35380 <snprintf@plt>
   438ec:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   438f0:	ldrb	w0, [x21, #4]
   438f4:	ldr	w21, [x21, #16]
   438f8:	bl	353f0 <aarch64_get_qualifier_name@plt>
   438fc:	mov	x4, x0
   43900:	mov	w3, w21
   43904:	mov	x1, x20
   43908:	mov	x0, x19
   4390c:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   43910:	add	x2, x2, #0xfc8
   43914:	bl	35380 <snprintf@plt>
   43918:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   4391c:	ldrb	w1, [x21, #4]
   43920:	ldr	w4, [x21, #16]
   43924:	sub	w0, w1, #0x7
   43928:	and	w0, w0, #0xff
   4392c:	cmp	w0, #0x1
   43930:	b.hi	4450c <aarch64_print_operand@@Base+0x110c>  // b.pmore
   43934:	cmp	w1, #0x8
   43938:	adrp	x3, 8c000 <_sch_istable@@Base+0x14208>
   4393c:	cset	x0, eq  // eq = none
   43940:	add	x3, x3, #0x3c0
   43944:	add	x3, x3, #0x400
   43948:	mov	x2, x21
   4394c:	lsl	x0, x0, #5
   43950:	mov	x1, x20
   43954:	add	x4, x0, w4, sxtw
   43958:	mov	x0, x19
   4395c:	ldr	x3, [x3, x4, lsl #3]
   43960:	bl	41e10 <print_aarch64_disassembler_options@@Base+0x1c0>
   43964:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   43968:	ldrb	w1, [x21, #4]
   4396c:	ldr	w3, [x21, #16]
   43970:	sub	w0, w1, #0x7
   43974:	and	w0, w0, #0xff
   43978:	cmp	w0, #0x1
   4397c:	b.hi	4450c <aarch64_print_operand@@Base+0x110c>  // b.pmore
   43980:	cmp	w1, #0x8
   43984:	ldr	w5, [x21, #32]
   43988:	cset	x1, eq  // eq = none
   4398c:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   43990:	ldrsw	x6, [x21, #20]
   43994:	adrp	x0, 8c000 <_sch_istable@@Base+0x14208>
   43998:	lsl	x1, x1, #5
   4399c:	add	x0, x0, #0x3c0
   439a0:	ldr	x2, [x2, #3904]
   439a4:	add	x3, x1, w3, sxtw
   439a8:	ldr	x4, [x21, #40]
   439ac:	add	x0, x0, #0x400
   439b0:	add	x1, x1, x6
   439b4:	ubfiz	x6, x5, #4, #32
   439b8:	stp	x23, x24, [sp, #48]
   439bc:	ldr	x22, [x0, x3, lsl #3]
   439c0:	ldr	x23, [x0, x1, lsl #3]
   439c4:	ldr	x3, [x2, x6]
   439c8:	cbz	x4, 43564 <aarch64_print_operand@@Base+0x164>
   439cc:	mov	x5, #0xd70b                	// #55051
   439d0:	add	x21, sp, #0x70
   439d4:	movk	x5, #0x70a3, lsl #16
   439d8:	mov	x0, x21
   439dc:	movk	x5, #0xa3d, lsl #32
   439e0:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   439e4:	movk	x5, #0xa3d7, lsl #48
   439e8:	add	x2, x2, #0x88
   439ec:	mov	x1, #0x10                  	// #16
   439f0:	smulh	x5, x4, x5
   439f4:	add	x5, x5, x4
   439f8:	asr	x5, x5, #6
   439fc:	sub	x5, x5, x4, asr #63
   43a00:	add	x6, x5, x5, lsl #1
   43a04:	add	x5, x5, x6, lsl #3
   43a08:	sub	x4, x4, x5, lsl #2
   43a0c:	bl	35380 <snprintf@plt>
   43a10:	b	43584 <aarch64_print_operand@@Base+0x184>
   43a14:	ldrb	w0, [x4, #4]
   43a18:	bl	35680 <aarch64_get_qualifier_esize@plt>
   43a1c:	and	w0, w0, #0xff
   43a20:	cmp	w0, #0x4
   43a24:	b.eq	441ec <aarch64_print_operand@@Base+0xdec>  // b.none
   43a28:	cmp	w0, #0x8
   43a2c:	b.ne	44188 <aarch64_print_operand@@Base+0xd88>  // b.any
   43a30:	ldr	x4, [x21, #16]
   43a34:	mov	x1, x20
   43a38:	mov	x0, x19
   43a3c:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   43a40:	add	x2, x2, #0x140
   43a44:	ubfx	w3, w4, #6, #1
   43a48:	lsr	w5, w4, #7
   43a4c:	ubfiz	w6, w4, #16, #7
   43a50:	lsl	w7, w3, #1
   43a54:	lsl	w9, w3, #24
   43a58:	lsl	w8, w3, #30
   43a5c:	lsl	w4, w3, #2
   43a60:	orr	w9, w9, w3, lsl #25
   43a64:	orr	w5, w6, w5, lsl #31
   43a68:	eor	w8, w8, #0x40000000
   43a6c:	orr	w6, w7, w3
   43a70:	orr	w4, w4, w3, lsl #3
   43a74:	orr	w5, w5, w9
   43a78:	orr	w3, w8, w3, lsl #23
   43a7c:	orr	w4, w4, w6
   43a80:	orr	w3, w5, w3
   43a84:	orr	w3, w3, w4, lsl #26
   43a88:	fmov	d0, x3
   43a8c:	shl	d0, d0, #32
   43a90:	bl	35380 <snprintf@plt>
   43a94:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   43a98:	ldrsw	x1, [x21, #16]
   43a9c:	adrp	x0, 8c000 <_sch_istable@@Base+0x14208>
   43aa0:	add	x0, x0, #0x3c0
   43aa4:	cmp	w8, #0x5e
   43aa8:	add	x1, x1, #0x20
   43aac:	ldr	x3, [x0, x1, lsl #3]
   43ab0:	b.ne	442bc <aarch64_print_operand@@Base+0xebc>  // b.any
   43ab4:	ldp	w4, w0, [x21, #20]
   43ab8:	mov	x1, x20
   43abc:	cbz	w0, 443c8 <aarch64_print_operand@@Base+0xfc8>
   43ac0:	mov	x0, x19
   43ac4:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   43ac8:	add	x2, x2, #0x168
   43acc:	bl	35380 <snprintf@plt>
   43ad0:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   43ad4:	ldr	s0, [x21, #16]
   43ad8:	mov	x1, x20
   43adc:	mov	x0, x19
   43ae0:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   43ae4:	add	x2, x2, #0x48
   43ae8:	fcvt	d0, s0
   43aec:	bl	35380 <snprintf@plt>
   43af0:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   43af4:	ldr	x4, [x21, #40]
   43af8:	mov	x1, x20
   43afc:	mov	x0, x19
   43b00:	ldr	x3, [x21, #16]
   43b04:	cbz	x4, 43494 <aarch64_print_operand@@Base+0x94>
   43b08:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   43b0c:	add	x2, x2, #0x130
   43b10:	bl	35380 <snprintf@plt>
   43b14:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   43b18:	ldr	x0, [x21, #16]
   43b1c:	ldr	w1, [x0, #8]
   43b20:	tbnz	w1, #8, 434a0 <aarch64_print_operand@@Base+0xa0>
   43b24:	ldr	x3, [x0]
   43b28:	mov	x1, x20
   43b2c:	mov	x0, x19
   43b30:	adrp	x2, 6d000 <fields@@Base+0x9f60>
   43b34:	add	x2, x2, #0xe48
   43b38:	bl	35380 <snprintf@plt>
   43b3c:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   43b40:	ldr	x5, [x21, #40]
   43b44:	ldr	w0, [x21, #32]
   43b48:	ldr	x3, [x21, #16]
   43b4c:	cbnz	x5, 43b58 <aarch64_print_operand@@Base+0x758>
   43b50:	cmp	w0, #0x5
   43b54:	b.eq	438d8 <aarch64_print_operand@@Base+0x4d8>  // b.none
   43b58:	cbz	w0, 438d8 <aarch64_print_operand@@Base+0x4d8>
   43b5c:	adrp	x6, a6000 <aarch64_operands@@Base+0x16bd0>
   43b60:	ubfiz	x4, x0, #4, #32
   43b64:	mov	x1, x20
   43b68:	mov	x0, x19
   43b6c:	ldr	x6, [x6, #3904]
   43b70:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   43b74:	add	x2, x2, #0x120
   43b78:	ldr	x4, [x6, x4]
   43b7c:	bl	35380 <snprintf@plt>
   43b80:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   43b84:	ldr	w3, [x21, #16]
   43b88:	mov	x1, x20
   43b8c:	mov	x0, x19
   43b90:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   43b94:	add	x2, x2, #0xfe0
   43b98:	bl	35380 <snprintf@plt>
   43b9c:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   43ba0:	ldr	x3, [x21, #16]
   43ba4:	mov	x1, x20
   43ba8:	mov	x0, x19
   43bac:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   43bb0:	add	x2, x2, #0x38
   43bb4:	bl	35380 <snprintf@plt>
   43bb8:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   43bbc:	ldr	x3, [x21, #16]
   43bc0:	adrp	x2, 6d000 <fields@@Base+0x9f60>
   43bc4:	mov	x1, x20
   43bc8:	add	x2, x2, #0xe48
   43bcc:	mov	x0, x19
   43bd0:	mov	w22, #0x1                   	// #1
   43bd4:	ldr	x3, [x3]
   43bd8:	stp	x23, x24, [sp, #48]
   43bdc:	adrp	x23, 5d000 <xexit@@Base+0x1a80>
   43be0:	adrp	x24, 5d000 <xexit@@Base+0x1a80>
   43be4:	add	x23, x23, #0x160
   43be8:	add	x24, x24, #0x150
   43bec:	stp	x25, x26, [sp, #64]
   43bf0:	bl	35380 <snprintf@plt>
   43bf4:	ldr	x26, [x21, #16]
   43bf8:	ldr	x25, [x26, w22, uxtw #3]
   43bfc:	cbz	x25, 43c34 <aarch64_print_operand@@Base+0x834>
   43c00:	mov	x0, x19
   43c04:	bl	350a0 <strlen@plt>
   43c08:	mov	x1, x0
   43c0c:	cmp	w22, #0x1
   43c10:	add	x0, x19, x0
   43c14:	add	w22, w22, #0x1
   43c18:	sub	x1, x20, x1
   43c1c:	b.eq	44244 <aarch64_print_operand@@Base+0xe44>  // b.none
   43c20:	mov	x3, x25
   43c24:	mov	x2, x23
   43c28:	bl	35380 <snprintf@plt>
   43c2c:	cmp	w22, #0x4
   43c30:	b.ne	43bf4 <aarch64_print_operand@@Base+0x7f4>  // b.any
   43c34:	ldp	x23, x24, [sp, #48]
   43c38:	ldp	x25, x26, [sp, #64]
   43c3c:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   43c40:	mov	x2, x21
   43c44:	mov	x1, x20
   43c48:	mov	x0, x19
   43c4c:	adrp	x3, 5d000 <xexit@@Base+0x1a80>
   43c50:	add	x3, x3, #0x20
   43c54:	bl	424d8 <aarch64_get_qualifier_name@@Base+0x18>
   43c58:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   43c5c:	adrp	x22, a6000 <aarch64_operands@@Base+0x16bd0>
   43c60:	stp	x23, x24, [sp, #48]
   43c64:	adrp	x23, 5c000 <xexit@@Base+0xa80>
   43c68:	ldr	x22, [x22, #3968]
   43c6c:	adrp	x24, 5b000 <floatformat_from_double@@Base+0x3e8>
   43c70:	add	x23, x23, #0xe48
   43c74:	add	x24, x24, #0x5d8
   43c78:	add	x22, x22, #0x8
   43c7c:	stp	x25, x26, [sp, #64]
   43c80:	adrp	x25, 5d000 <xexit@@Base+0x1a80>
   43c84:	mov	x26, #0x0                   	// #0
   43c88:	add	x25, x25, #0x1b0
   43c8c:	stp	x27, x28, [sp, #80]
   43c90:	b	43ca0 <aarch64_print_operand@@Base+0x8a0>
   43c94:	ldr	x23, [x22, #8]
   43c98:	add	x22, x22, #0x10
   43c9c:	cbz	x23, 441c0 <aarch64_print_operand@@Base+0xdc0>
   43ca0:	ldr	w0, [x21, #16]
   43ca4:	ldr	w1, [x22]
   43ca8:	cmp	w1, w0
   43cac:	b.ne	43c94 <aarch64_print_operand@@Base+0x894>  // b.any
   43cb0:	ldr	w27, [x21, #20]
   43cb4:	sub	x0, x22, #0x8
   43cb8:	ldr	w28, [x22, #4]
   43cbc:	bl	35b00 <aarch64_sys_reg_deprecated_p@plt>
   43cc0:	cbnz	w0, 43c94 <aarch64_print_operand@@Base+0x894>
   43cc4:	cmp	x26, #0x0
   43cc8:	and	w0, w28, w27
   43ccc:	ccmp	w27, w0, #0x4, ne  // ne = any
   43cd0:	b.ne	43c94 <aarch64_print_operand@@Base+0x894>  // b.any
   43cd4:	mov	x26, x23
   43cd8:	cmp	w27, w0
   43cdc:	b.eq	4447c <aarch64_print_operand@@Base+0x107c>  // b.none
   43ce0:	tbnz	w28, #4, 443a8 <aarch64_print_operand@@Base+0xfa8>
   43ce4:	tbz	w28, #3, 43c94 <aarch64_print_operand@@Base+0x894>
   43ce8:	mov	x1, x25
   43cec:	mov	x0, x24
   43cf0:	mov	w2, #0x5                   	// #5
   43cf4:	bl	359e0 <dcgettext@plt>
   43cf8:	ldr	x1, [sp, #128]
   43cfc:	str	x0, [x1]
   43d00:	b	43c94 <aarch64_print_operand@@Base+0x894>
   43d04:	ldrsw	x1, [x21, #16]
   43d08:	adrp	x0, 8c000 <_sch_istable@@Base+0x14208>
   43d0c:	ldr	w4, [x21, #20]
   43d10:	add	x0, x0, #0x3c0
   43d14:	add	x1, x1, #0x20
   43d18:	ldr	x3, [x0, x1, lsl #3]
   43d1c:	mov	x1, x20
   43d20:	mov	x0, x19
   43d24:	cbz	w4, 44258 <aarch64_print_operand@@Base+0xe58>
   43d28:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   43d2c:	add	x2, x2, #0xc48
   43d30:	bl	35380 <snprintf@plt>
   43d34:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   43d38:	ldr	x0, [x21, #16]
   43d3c:	ldr	x3, [x0]
   43d40:	cbnz	x3, 43b28 <aarch64_print_operand@@Base+0x728>
   43d44:	ldr	w3, [x0, #8]
   43d48:	mov	x1, x20
   43d4c:	mov	x0, x19
   43d50:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   43d54:	add	x2, x2, #0x208
   43d58:	bl	35380 <snprintf@plt>
   43d5c:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   43d60:	ldr	x1, [x3, #120]
   43d64:	add	w0, w5, #0x1
   43d68:	ubfx	x2, x1, #12, #3
   43d6c:	cmp	x2, x0
   43d70:	ldr	x0, [x21, #16]
   43d74:	b.ne	43d88 <aarch64_print_operand@@Base+0x988>  // b.any
   43d78:	ldr	w2, [x0, #8]
   43d7c:	ubfx	w1, w1, #15, #5
   43d80:	cmp	w2, w1
   43d84:	b.eq	434a0 <aarch64_print_operand@@Base+0xa0>  // b.none
   43d88:	ldr	w3, [x0, #8]
   43d8c:	b	43780 <aarch64_print_operand@@Base+0x380>
   43d90:	ldrb	w0, [x4, #4]
   43d94:	bl	35680 <aarch64_get_qualifier_esize@plt>
   43d98:	and	w0, w0, #0xff
   43d9c:	cmp	w0, #0x4
   43da0:	b.ne	44160 <aarch64_print_operand@@Base+0xd60>  // b.any
   43da4:	ldr	x3, [x21, #16]
   43da8:	mov	x1, x20
   43dac:	mov	x0, x19
   43db0:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   43db4:	mov	w4, w3
   43db8:	add	x2, x2, #0xd0
   43dbc:	bl	35380 <snprintf@plt>
   43dc0:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   43dc4:	ldr	w0, [x21, #16]
   43dc8:	cmp	w0, #0x5
   43dcc:	b.eq	44464 <aarch64_print_operand@@Base+0x1064>  // b.none
   43dd0:	cmp	w0, #0x1e
   43dd4:	b.eq	44458 <aarch64_print_operand@@Base+0x1058>  // b.none
   43dd8:	cmp	w0, #0x1f
   43ddc:	b.eq	44470 <aarch64_print_operand@@Base+0x1070>  // b.none
   43de0:	cmp	w0, #0x4
   43de4:	b.eq	4448c <aarch64_print_operand@@Base+0x108c>  // b.none
   43de8:	cmp	w0, #0x3
   43dec:	b.eq	444a4 <aarch64_print_operand@@Base+0x10a4>  // b.none
   43df0:	cmp	w0, #0x19
   43df4:	b.eq	44498 <aarch64_print_operand@@Base+0x1098>  // b.none
   43df8:	cmp	w0, #0x1a
   43dfc:	b.eq	444b0 <aarch64_print_operand@@Base+0x10b0>  // b.none
   43e00:	cmp	w0, #0x1c
   43e04:	b.eq	444bc <aarch64_print_operand@@Base+0x10bc>  // b.none
   43e08:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   43e0c:	add	x3, x3, #0xd50
   43e10:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   43e14:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   43e18:	add	x3, x3, #0x170
   43e1c:	add	x1, x1, #0xb60
   43e20:	add	x0, x0, #0x1e8
   43e24:	mov	w2, #0xe95                 	// #3733
   43e28:	stp	x23, x24, [sp, #48]
   43e2c:	stp	x25, x26, [sp, #64]
   43e30:	stp	x27, x28, [sp, #80]
   43e34:	bl	35ac0 <__assert_fail@plt>
   43e38:	ldr	x1, [x21, #16]
   43e3c:	cmp	x1, #0xf
   43e40:	b.hi	4454c <aarch64_print_operand@@Base+0x114c>  // b.pmore
   43e44:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   43e48:	ldr	x0, [x0, #4056]
   43e4c:	ldr	x3, [x0, x1, lsl #3]
   43e50:	cbnz	x3, 43b28 <aarch64_print_operand@@Base+0x728>
   43e54:	mov	x3, x1
   43e58:	b	4348c <aarch64_print_operand@@Base+0x8c>
   43e5c:	ldr	x3, [x21, #16]
   43e60:	and	x2, x2, #0xfffffffffffff000
   43e64:	add	x3, x2, x3
   43e68:	cbnz	x6, 438c8 <aarch64_print_operand@@Base+0x4c8>
   43e6c:	b	438d0 <aarch64_print_operand@@Base+0x4d0>
   43e70:	mov	x1, x20
   43e74:	mov	x0, x19
   43e78:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   43e7c:	add	x2, x2, #0xf8
   43e80:	bl	35380 <snprintf@plt>
   43e84:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   43e88:	ldrb	w0, [x21, #4]
   43e8c:	sub	w1, w0, #0x1
   43e90:	and	w1, w1, #0xff
   43e94:	cmp	w1, #0x1
   43e98:	b.hi	445a8 <aarch64_print_operand@@Base+0x11a8>  // b.pmore
   43e9c:	ldr	x1, [x21, #40]
   43ea0:	ldr	w22, [x21, #16]
   43ea4:	cbnz	x1, 43eb4 <aarch64_print_operand@@Base+0xab4>
   43ea8:	ldr	w1, [x21, #32]
   43eac:	cmp	w1, #0x5
   43eb0:	b.eq	44418 <aarch64_print_operand@@Base+0x1018>  // b.none
   43eb4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   43eb8:	and	w0, w0, #0xff
   43ebc:	cmp	w0, #0x4
   43ec0:	ldr	w4, [x21, #32]
   43ec4:	cset	x2, ne  // ne = any
   43ec8:	adrp	x6, a6000 <aarch64_operands@@Base+0x16bd0>
   43ecc:	adrp	x3, 8c000 <_sch_istable@@Base+0x14208>
   43ed0:	add	x3, x3, #0x3c0
   43ed4:	lsl	x2, x2, #5
   43ed8:	lsl	x4, x4, #4
   43edc:	ldr	x6, [x6, #3904]
   43ee0:	add	x2, x2, w22, sxtw
   43ee4:	add	x2, x2, #0x40
   43ee8:	mov	x1, x20
   43eec:	ldr	x5, [x21, #40]
   43ef0:	mov	x0, x19
   43ef4:	ldr	x3, [x3, x2, lsl #3]
   43ef8:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   43efc:	ldr	x4, [x6, x4]
   43f00:	add	x2, x2, #0xfa8
   43f04:	bl	35380 <snprintf@plt>
   43f08:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   43f0c:	ldr	w22, [x21, #32]
   43f10:	sub	w0, w5, #0x1
   43f14:	stp	x23, x24, [sp, #48]
   43f18:	cmp	w0, #0x1
   43f1c:	b.hi	4457c <aarch64_print_operand@@Base+0x117c>  // b.pmore
   43f20:	mov	x0, x4
   43f24:	str	x4, [sp, #96]
   43f28:	str	w5, [sp, #108]
   43f2c:	bl	35740 <aarch64_stack_pointer_p@plt>
   43f30:	ldr	x4, [sp, #96]
   43f34:	cbnz	w0, 440e0 <aarch64_print_operand@@Base+0xce0>
   43f38:	ldr	w5, [sp, #108]
   43f3c:	cmp	w5, #0x2
   43f40:	b.eq	440cc <aarch64_print_operand@@Base+0xccc>  // b.none
   43f44:	ldrb	w0, [x21, #4]
   43f48:	ldr	x1, [x21, #40]
   43f4c:	ldr	w23, [x21, #16]
   43f50:	cbnz	x1, 44108 <aarch64_print_operand@@Base+0xd08>
   43f54:	bl	35680 <aarch64_get_qualifier_esize@plt>
   43f58:	and	w0, w0, #0xff
   43f5c:	cmp	w0, #0x4
   43f60:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   43f64:	cset	x3, ne  // ne = any
   43f68:	ubfiz	x22, x22, #4, #32
   43f6c:	ldr	x2, [x2, #3904]
   43f70:	lsl	x3, x3, #5
   43f74:	add	x3, x3, w23, sxtw
   43f78:	adrp	x5, 8c000 <_sch_istable@@Base+0x14208>
   43f7c:	add	x3, x3, #0x40
   43f80:	add	x5, x5, #0x3c0
   43f84:	ldr	x4, [x2, x22]
   43f88:	mov	x1, x20
   43f8c:	ldr	x3, [x5, x3, lsl #3]
   43f90:	mov	x0, x19
   43f94:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   43f98:	add	x2, x2, #0xfb8
   43f9c:	bl	35380 <snprintf@plt>
   43fa0:	ldp	x23, x24, [sp, #48]
   43fa4:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   43fa8:	ldr	x2, [x3, #120]
   43fac:	add	w0, w5, #0x1
   43fb0:	ldr	x1, [x21, #16]
   43fb4:	ubfx	x3, x2, #12, #3
   43fb8:	cmp	x3, x0
   43fbc:	b.eq	442e8 <aarch64_print_operand@@Base+0xee8>  // b.none
   43fc0:	cmp	x1, #0x1f
   43fc4:	b.hi	44608 <aarch64_print_operand@@Base+0x1208>  // b.pmore
   43fc8:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   43fcc:	ldr	x0, [x0, #3792]
   43fd0:	ldr	x3, [x0, x1, lsl #3]
   43fd4:	cbz	x3, 44368 <aarch64_print_operand@@Base+0xf68>
   43fd8:	adrp	x2, 6d000 <fields@@Base+0x9f60>
   43fdc:	mov	x1, x20
   43fe0:	add	x2, x2, #0xe48
   43fe4:	mov	x0, x19
   43fe8:	bl	35380 <snprintf@plt>
   43fec:	ldrb	w0, [x21, #36]
   43ff0:	tbz	w0, #0, 434a0 <aarch64_print_operand@@Base+0xa0>
   43ff4:	mov	x0, x19
   43ff8:	bl	350a0 <strlen@plt>
   43ffc:	ldr	w3, [x21, #32]
   44000:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   44004:	ldr	x4, [x21, #40]
   44008:	sub	x1, x20, x0
   4400c:	ldr	x5, [x5, #3904]
   44010:	lsl	x3, x3, #4
   44014:	add	x0, x19, x0
   44018:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   4401c:	add	x2, x2, #0x88
   44020:	ldr	x3, [x5, x3]
   44024:	bl	35380 <snprintf@plt>
   44028:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   4402c:	ldrb	w1, [x21, #4]
   44030:	ldr	w3, [x21, #16]
   44034:	sub	w0, w1, #0x7
   44038:	and	w0, w0, #0xff
   4403c:	cmp	w0, #0x1
   44040:	b.hi	4450c <aarch64_print_operand@@Base+0x110c>  // b.pmore
   44044:	cmp	w1, #0x8
   44048:	ldr	w5, [x21, #32]
   4404c:	cset	x4, eq  // eq = none
   44050:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   44054:	ldrsw	x2, [x21, #20]
   44058:	adrp	x0, 8c000 <_sch_istable@@Base+0x14208>
   4405c:	lsl	x4, x4, #5
   44060:	add	x0, x0, #0x3c0
   44064:	add	x3, x4, w3, sxtw
   44068:	add	x7, x0, #0x400
   4406c:	ldr	x1, [x1, #3904]
   44070:	add	x2, x2, #0x60
   44074:	ldr	x4, [x21, #40]
   44078:	ubfiz	x6, x5, #4, #32
   4407c:	stp	x23, x24, [sp, #48]
   44080:	ldr	x22, [x7, x3, lsl #3]
   44084:	ldr	x23, [x0, x2, lsl #3]
   44088:	ldr	x3, [x1, x6]
   4408c:	cbnz	x4, 439cc <aarch64_print_operand@@Base+0x5cc>
   44090:	b	43564 <aarch64_print_operand@@Base+0x164>
   44094:	ldr	x2, [x3, #120]
   44098:	add	w0, w5, #0x1
   4409c:	ldr	x1, [x21, #16]
   440a0:	ubfx	x3, x2, #12, #3
   440a4:	cmp	x3, x0
   440a8:	b.eq	44300 <aarch64_print_operand@@Base+0xf00>  // b.none
   440ac:	cmp	x1, #0x1f
   440b0:	b.hi	4451c <aarch64_print_operand@@Base+0x111c>  // b.pmore
   440b4:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   440b8:	ldr	x0, [x0, #3792]
   440bc:	ldr	x3, [x0, x1, lsl #3]
   440c0:	cbnz	x3, 43b28 <aarch64_print_operand@@Base+0x728>
   440c4:	mov	x3, x1
   440c8:	b	4348c <aarch64_print_operand@@Base+0x8c>
   440cc:	add	x0, x4, #0x38
   440d0:	bl	35740 <aarch64_stack_pointer_p@plt>
   440d4:	ldr	x4, [sp, #96]
   440d8:	cbz	w0, 43f44 <aarch64_print_operand@@Base+0xb44>
   440dc:	nop
   440e0:	ldrb	w0, [x21, #4]
   440e4:	cmp	w0, #0x1
   440e8:	b.eq	443f0 <aarch64_print_operand@@Base+0xff0>  // b.none
   440ec:	cmp	w22, #0x9
   440f0:	ccmp	w0, #0x2, #0x0, eq  // eq = none
   440f4:	b.ne	43f48 <aarch64_print_operand@@Base+0xb48>  // b.any
   440f8:	ldr	x1, [x21, #40]
   440fc:	mov	w22, #0x5                   	// #5
   44100:	ldr	w23, [x21, #16]
   44104:	cbz	x1, 444c8 <aarch64_print_operand@@Base+0x10c8>
   44108:	bl	35680 <aarch64_get_qualifier_esize@plt>
   4410c:	and	w0, w0, #0xff
   44110:	cmp	w0, #0x4
   44114:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   44118:	cset	x3, ne  // ne = any
   4411c:	ubfiz	x22, x22, #4, #32
   44120:	ldr	x2, [x2, #3904]
   44124:	lsl	x3, x3, #5
   44128:	add	x3, x3, w23, sxtw
   4412c:	adrp	x5, 8c000 <_sch_istable@@Base+0x14208>
   44130:	add	x3, x3, #0x40
   44134:	add	x5, x5, #0x3c0
   44138:	ldr	x4, [x2, x22]
   4413c:	mov	x1, x20
   44140:	ldr	x3, [x5, x3, lsl #3]
   44144:	mov	x0, x19
   44148:	ldr	x5, [x21, #40]
   4414c:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   44150:	add	x2, x2, #0xfa8
   44154:	bl	35380 <snprintf@plt>
   44158:	ldp	x23, x24, [sp, #48]
   4415c:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   44160:	cmp	w0, #0x8
   44164:	b.ne	44668 <aarch64_print_operand@@Base+0x1268>  // b.any
   44168:	ldr	x4, [x21, #16]
   4416c:	mov	x1, x20
   44170:	mov	x0, x19
   44174:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   44178:	mov	x3, x4
   4417c:	add	x2, x2, #0xe0
   44180:	bl	35380 <snprintf@plt>
   44184:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   44188:	cmp	w0, #0x2
   4418c:	b.eq	441ec <aarch64_print_operand@@Base+0xdec>  // b.none
   44190:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   44194:	add	x3, x3, #0xd50
   44198:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   4419c:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   441a0:	add	x3, x3, #0x170
   441a4:	add	x1, x1, #0xb60
   441a8:	add	x0, x0, #0x870
   441ac:	mov	w2, #0xdbd                 	// #3517
   441b0:	stp	x23, x24, [sp, #48]
   441b4:	stp	x25, x26, [sp, #64]
   441b8:	stp	x27, x28, [sp, #80]
   441bc:	bl	35ac0 <__assert_fail@plt>
   441c0:	cbz	x26, 4432c <aarch64_print_operand@@Base+0xf2c>
   441c4:	mov	x3, x26
   441c8:	mov	x1, x20
   441cc:	mov	x0, x19
   441d0:	adrp	x2, 6d000 <fields@@Base+0x9f60>
   441d4:	add	x2, x2, #0xe48
   441d8:	bl	35380 <snprintf@plt>
   441dc:	ldp	x23, x24, [sp, #48]
   441e0:	ldp	x25, x26, [sp, #64]
   441e4:	ldp	x27, x28, [sp, #80]
   441e8:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   441ec:	ldr	x3, [x21, #16]
   441f0:	mov	x1, x20
   441f4:	mov	x0, x19
   441f8:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   441fc:	add	x2, x2, #0x140
   44200:	ubfx	w4, w3, #6, #1
   44204:	lsr	w6, w3, #7
   44208:	ubfiz	w5, w3, #19, #7
   4420c:	lsl	w7, w4, #1
   44210:	lsl	w3, w4, #2
   44214:	orr	w7, w7, w4
   44218:	orr	w3, w3, w4, lsl #3
   4421c:	orr	w3, w3, w7
   44220:	lsl	w4, w4, #30
   44224:	eor	w4, w4, #0x40000000
   44228:	orr	w5, w5, w6, lsl #31
   4422c:	orr	w3, w4, w3, lsl #26
   44230:	orr	w3, w3, w5
   44234:	fmov	s0, w3
   44238:	fcvt	d0, s0
   4423c:	bl	35380 <snprintf@plt>
   44240:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   44244:	ldr	x3, [x26]
   44248:	mov	x4, x25
   4424c:	mov	x2, x24
   44250:	bl	35380 <snprintf@plt>
   44254:	b	43bf4 <aarch64_print_operand@@Base+0x7f4>
   44258:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   4425c:	add	x2, x2, #0xc58
   44260:	bl	35380 <snprintf@plt>
   44264:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   44268:	ldrb	w0, [x21, #4]
   4426c:	cmp	w0, #0x5
   44270:	b.eq	44404 <aarch64_print_operand@@Base+0x1004>  // b.none
   44274:	add	x21, sp, #0x70
   44278:	cmp	w1, #0x5
   4427c:	b.eq	44410 <aarch64_print_operand@@Base+0x1010>  // b.none
   44280:	mov	x0, x21
   44284:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   44288:	mov	x1, #0x10                  	// #16
   4428c:	add	x2, x2, #0x160
   44290:	bl	35380 <snprintf@plt>
   44294:	b	43670 <aarch64_print_operand@@Base+0x270>
   44298:	bl	353f0 <aarch64_get_qualifier_name@plt>
   4429c:	mov	x4, x0
   442a0:	mov	w3, w21
   442a4:	mov	x1, x20
   442a8:	mov	x0, x19
   442ac:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   442b0:	add	x2, x2, #0x18
   442b4:	bl	35380 <snprintf@plt>
   442b8:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   442bc:	mov	x1, x20
   442c0:	mov	x0, x19
   442c4:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   442c8:	add	x2, x2, #0xc58
   442cc:	bl	35380 <snprintf@plt>
   442d0:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   442d4:	strb	wzr, [sp, #112]
   442d8:	b	43584 <aarch64_print_operand@@Base+0x184>
   442dc:	ldrb	w0, [x21, #48]
   442e0:	tbz	w0, #1, 434a0 <aarch64_print_operand@@Base+0xa0>
   442e4:	b	4369c <aarch64_print_operand@@Base+0x29c>
   442e8:	ldrb	w0, [x21, #36]
   442ec:	tbnz	w0, #0, 43fc0 <aarch64_print_operand@@Base+0xbc0>
   442f0:	ubfx	x2, x2, #15, #5
   442f4:	cmp	x2, x1
   442f8:	b.ne	43fc0 <aarch64_print_operand@@Base+0xbc0>  // b.any
   442fc:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   44300:	ubfx	x2, x2, #15, #5
   44304:	cmp	x2, x1
   44308:	b.ne	440ac <aarch64_print_operand@@Base+0xcac>  // b.any
   4430c:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   44310:	mov	w3, w21
   44314:	mov	x1, x20
   44318:	mov	x0, x19
   4431c:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   44320:	add	x2, x2, #0xff8
   44324:	bl	35380 <snprintf@plt>
   44328:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   4432c:	ldr	w3, [x21, #16]
   44330:	mov	x1, x20
   44334:	mov	x0, x19
   44338:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   4433c:	and	w7, w3, #0x7
   44340:	add	x2, x2, #0x1d0
   44344:	ubfx	x6, x3, #3, #4
   44348:	ubfx	x5, x3, #7, #4
   4434c:	ubfx	x4, x3, #11, #3
   44350:	ubfx	x3, x3, #14, #2
   44354:	bl	35380 <snprintf@plt>
   44358:	ldp	x23, x24, [sp, #48]
   4435c:	ldp	x25, x26, [sp, #64]
   44360:	ldp	x27, x28, [sp, #80]
   44364:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   44368:	mov	x3, x1
   4436c:	mov	x0, x19
   44370:	mov	x1, x20
   44374:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   44378:	add	x2, x2, #0x40
   4437c:	bl	35380 <snprintf@plt>
   44380:	b	43fec <aarch64_print_operand@@Base+0xbec>
   44384:	bl	353f0 <aarch64_get_qualifier_name@plt>
   44388:	mov	x4, x0
   4438c:	mov	w3, w21
   44390:	mov	x1, x20
   44394:	mov	x0, x19
   44398:	adrp	x2, 5d000 <xexit@@Base+0x1a80>
   4439c:	add	x2, x2, #0x0
   443a0:	bl	35380 <snprintf@plt>
   443a4:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   443a8:	mov	x0, x24
   443ac:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   443b0:	mov	w2, #0x5                   	// #5
   443b4:	add	x1, x1, #0x188
   443b8:	bl	359e0 <dcgettext@plt>
   443bc:	ldr	x1, [sp, #128]
   443c0:	str	x0, [x1]
   443c4:	b	43c94 <aarch64_print_operand@@Base+0x894>
   443c8:	mov	x0, x19
   443cc:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   443d0:	add	x2, x2, #0xbf0
   443d4:	bl	35380 <snprintf@plt>
   443d8:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   443dc:	ldr	w0, [x21, #16]
   443e0:	ubfx	w1, w1, #15, #5
   443e4:	cmp	w0, w1
   443e8:	b.ne	4369c <aarch64_print_operand@@Base+0x29c>  // b.any
   443ec:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   443f0:	ldrb	w1, [x4, #4]
   443f4:	cmp	w1, #0x1
   443f8:	ccmp	w22, #0x8, #0x0, eq  // eq = none
   443fc:	b.ne	43f48 <aarch64_print_operand@@Base+0xb48>  // b.any
   44400:	b	440f8 <aarch64_print_operand@@Base+0xcf8>
   44404:	ldrb	w0, [x21, #36]
   44408:	tbnz	w0, #1, 4362c <aarch64_print_operand@@Base+0x22c>
   4440c:	b	44274 <aarch64_print_operand@@Base+0xe74>
   44410:	strb	wzr, [sp, #112]
   44414:	b	43670 <aarch64_print_operand@@Base+0x270>
   44418:	bl	35680 <aarch64_get_qualifier_esize@plt>
   4441c:	and	w0, w0, #0xff
   44420:	cmp	w0, #0x4
   44424:	adrp	x4, 8c000 <_sch_istable@@Base+0x14208>
   44428:	cset	x3, ne  // ne = any
   4442c:	add	x4, x4, #0x3c0
   44430:	mov	x1, x20
   44434:	mov	x0, x19
   44438:	lsl	x3, x3, #5
   4443c:	adrp	x2, 6d000 <fields@@Base+0x9f60>
   44440:	add	x3, x3, w22, sxtw
   44444:	add	x2, x2, #0xe48
   44448:	add	x3, x3, #0x40
   4444c:	ldr	x3, [x4, x3, lsl #3]
   44450:	bl	35380 <snprintf@plt>
   44454:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   44458:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   4445c:	add	x3, x3, #0xe70
   44460:	b	43b28 <aarch64_print_operand@@Base+0x728>
   44464:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   44468:	add	x3, x3, #0xe68
   4446c:	b	43b28 <aarch64_print_operand@@Base+0x728>
   44470:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   44474:	add	x3, x3, #0xe78
   44478:	b	43b28 <aarch64_print_operand@@Base+0x728>
   4447c:	ldr	x0, [sp, #128]
   44480:	cbz	x0, 441c4 <aarch64_print_operand@@Base+0xdc4>
   44484:	str	xzr, [x0]
   44488:	b	441c4 <aarch64_print_operand@@Base+0xdc4>
   4448c:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   44490:	add	x3, x3, #0xe80
   44494:	b	43b28 <aarch64_print_operand@@Base+0x728>
   44498:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   4449c:	add	x3, x3, #0xe60
   444a0:	b	43b28 <aarch64_print_operand@@Base+0x728>
   444a4:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   444a8:	add	x3, x3, #0xe88
   444ac:	b	43b28 <aarch64_print_operand@@Base+0x728>
   444b0:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   444b4:	add	x3, x3, #0xe58
   444b8:	b	43b28 <aarch64_print_operand@@Base+0x728>
   444bc:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   444c0:	add	x3, x3, #0xe90
   444c4:	b	43b28 <aarch64_print_operand@@Base+0x728>
   444c8:	bl	35680 <aarch64_get_qualifier_esize@plt>
   444cc:	and	w0, w0, #0xff
   444d0:	cmp	w0, #0x4
   444d4:	adrp	x4, 8c000 <_sch_istable@@Base+0x14208>
   444d8:	cset	x3, ne  // ne = any
   444dc:	add	x4, x4, #0x3c0
   444e0:	mov	x1, x20
   444e4:	mov	x0, x19
   444e8:	lsl	x3, x3, #5
   444ec:	adrp	x2, 6d000 <fields@@Base+0x9f60>
   444f0:	add	x3, x3, w23, sxtw
   444f4:	add	x2, x2, #0xe48
   444f8:	add	x3, x3, #0x40
   444fc:	ldr	x3, [x4, x3, lsl #3]
   44500:	bl	35380 <snprintf@plt>
   44504:	ldp	x23, x24, [sp, #48]
   44508:	b	434a0 <aarch64_print_operand@@Base+0xa0>
   4450c:	stp	x23, x24, [sp, #48]
   44510:	stp	x25, x26, [sp, #64]
   44514:	stp	x27, x28, [sp, #80]
   44518:	bl	41de0 <print_aarch64_disassembler_options@@Base+0x190>
   4451c:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   44520:	add	x3, x3, #0xd50
   44524:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   44528:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   4452c:	add	x3, x3, #0x170
   44530:	add	x1, x1, #0xb60
   44534:	add	x0, x0, #0x50
   44538:	mov	w2, #0xd49                 	// #3401
   4453c:	stp	x23, x24, [sp, #48]
   44540:	stp	x25, x26, [sp, #64]
   44544:	stp	x27, x28, [sp, #80]
   44548:	bl	35ac0 <__assert_fail@plt>
   4454c:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   44550:	add	x3, x3, #0xd50
   44554:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   44558:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   4455c:	add	x3, x3, #0x170
   44560:	add	x1, x1, #0xb60
   44564:	add	x0, x0, #0x98
   44568:	mov	w2, #0xd66                 	// #3430
   4456c:	stp	x23, x24, [sp, #48]
   44570:	stp	x25, x26, [sp, #64]
   44574:	stp	x27, x28, [sp, #80]
   44578:	bl	35ac0 <__assert_fail@plt>
   4457c:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   44580:	add	x3, x3, #0xd50
   44584:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   44588:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   4458c:	add	x3, x3, #0x170
   44590:	add	x1, x1, #0xb60
   44594:	add	x0, x0, #0xf90
   44598:	mov	w2, #0xc82                 	// #3202
   4459c:	stp	x25, x26, [sp, #64]
   445a0:	stp	x27, x28, [sp, #80]
   445a4:	bl	35ac0 <__assert_fail@plt>
   445a8:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   445ac:	add	x3, x3, #0xd50
   445b0:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   445b4:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   445b8:	add	x3, x3, #0x170
   445bc:	add	x1, x1, #0xb60
   445c0:	add	x0, x0, #0xe98
   445c4:	mov	w2, #0xca1                 	// #3233
   445c8:	stp	x23, x24, [sp, #48]
   445cc:	stp	x25, x26, [sp, #64]
   445d0:	stp	x27, x28, [sp, #80]
   445d4:	bl	35ac0 <__assert_fail@plt>
   445d8:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   445dc:	add	x3, x3, #0xd50
   445e0:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   445e4:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   445e8:	add	x3, x3, #0x170
   445ec:	add	x1, x1, #0xb60
   445f0:	add	x0, x0, #0xe98
   445f4:	mov	w2, #0xc6d                 	// #3181
   445f8:	stp	x23, x24, [sp, #48]
   445fc:	stp	x25, x26, [sp, #64]
   44600:	stp	x27, x28, [sp, #80]
   44604:	bl	35ac0 <__assert_fail@plt>
   44608:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   4460c:	add	x3, x3, #0xd50
   44610:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   44614:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   44618:	add	x3, x3, #0x170
   4461c:	add	x1, x1, #0xb60
   44620:	add	x0, x0, #0x50
   44624:	mov	w2, #0xd56                 	// #3414
   44628:	stp	x23, x24, [sp, #48]
   4462c:	stp	x25, x26, [sp, #64]
   44630:	stp	x27, x28, [sp, #80]
   44634:	bl	35ac0 <__assert_fail@plt>
   44638:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   4463c:	add	x3, x3, #0xd50
   44640:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   44644:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   44648:	add	x3, x3, #0x170
   4464c:	add	x1, x1, #0xb60
   44650:	add	x0, x0, #0xee8
   44654:	mov	w2, #0xc78                 	// #3192
   44658:	stp	x23, x24, [sp, #48]
   4465c:	stp	x25, x26, [sp, #64]
   44660:	stp	x27, x28, [sp, #80]
   44664:	bl	35ac0 <__assert_fail@plt>
   44668:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   4466c:	add	x3, x3, #0xd50
   44670:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   44674:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   44678:	add	x3, x3, #0x170
   4467c:	add	x1, x1, #0xb60
   44680:	add	x0, x0, #0x870
   44684:	mov	w2, #0xd7a                 	// #3450
   44688:	stp	x23, x24, [sp, #48]
   4468c:	stp	x25, x26, [sp, #64]
   44690:	stp	x27, x28, [sp, #80]
   44694:	bl	35ac0 <__assert_fail@plt>
   44698:	stp	x25, x26, [sp, #64]
   4469c:	stp	x27, x28, [sp, #80]
   446a0:	bl	35670 <abort@plt>
   446a4:	nop

00000000000446a8 <aarch64_sys_reg_supported_p@@Base>:
   446a8:	mov	x2, x0
   446ac:	ldr	w0, [x1, #12]
   446b0:	tbz	w0, #1, 44900 <aarch64_sys_reg_supported_p@@Base+0x258>
   446b4:	ldr	w1, [x1, #8]
   446b8:	mov	w0, #0xc213                	// #49683
   446bc:	cmp	w1, w0
   446c0:	b.eq	446fc <aarch64_sys_reg_supported_p@@Base+0x54>  // b.none
   446c4:	mov	w8, #0xffff2179            	// #-56967
   446c8:	add	w3, w1, w8
   446cc:	tst	w3, #0xffffefff
   446d0:	and	w0, w1, #0xffffdfff
   446d4:	mov	w3, #0xc687                	// #50823
   446d8:	ccmp	w0, w3, #0x4, ne  // ne = any
   446dc:	b.ne	44908 <aarch64_sys_reg_supported_p@@Base+0x260>  // b.any
   446e0:	tbz	x2, #45, 44964 <aarch64_sys_reg_supported_p@@Base+0x2bc>
   446e4:	mov	w0, #0xc01c                	// #49180
   446e8:	cmp	w1, w0
   446ec:	b.ne	44920 <aarch64_sys_reg_supported_p@@Base+0x278>  // b.any
   446f0:	mov	w0, #0x0                   	// #0
   446f4:	tbnz	x2, #46, 4471c <aarch64_sys_reg_supported_p@@Base+0x74>
   446f8:	ret
   446fc:	mov	w0, #0x0                   	// #0
   44700:	tbz	w2, #21, 446f8 <aarch64_sys_reg_supported_p@@Base+0x50>
   44704:	mov	w7, #0xffff18e8            	// #-59160
   44708:	add	w0, w1, w7
   4470c:	cmp	w0, #0x2
   44710:	b.hi	4471c <aarch64_sys_reg_supported_p@@Base+0x74>  // b.pmore
   44714:	mov	w0, #0x0                   	// #0
   44718:	tbz	w2, #24, 446f8 <aarch64_sys_reg_supported_p@@Base+0x50>
   4471c:	mov	w0, #0xeb00                	// #60160
   44720:	cmp	w1, w0
   44724:	mov	w0, #0xea90                	// #60048
   44728:	ccmp	w1, w0, #0x4, ne  // ne = any
   4472c:	cset	w0, eq  // eq = none
   44730:	mov	w3, #0xee81                	// #61057
   44734:	cmp	w1, w3
   44738:	mov	w4, #0xee00                	// #60928
   4473c:	mov	w3, #0xffff1600            	// #-59904
   44740:	ccmp	w1, w4, #0x4, ne  // ne = any
   44744:	add	w3, w1, w3
   44748:	csinc	w0, w0, wzr, ne  // ne = any
   4474c:	and	w5, w1, #0xfffffffd
   44750:	cmp	w3, #0x1
   44754:	mov	w4, #0xffff1700            	// #-59648
   44758:	mov	w3, #0xe880                	// #59520
   4475c:	add	w4, w1, w4
   44760:	ccmp	w5, w3, #0x4, hi  // hi = pmore
   44764:	csinc	w3, w0, wzr, ne  // ne = any
   44768:	mov	w6, #0xffff1578            	// #-60040
   4476c:	cmp	w4, #0x2
   44770:	add	w0, w1, w6
   44774:	ccmp	w0, #0x1, #0x0, hi  // hi = pmore
   44778:	and	w4, w1, #0xfffffff7
   4477c:	cset	w0, ls  // ls = plast
   44780:	mov	w6, #0xef08                	// #61192
   44784:	cmp	w1, w6
   44788:	orr	w0, w0, w3
   4478c:	mov	w3, #0xed10                	// #60688
   44790:	ccmp	w4, w3, #0x4, ne  // ne = any
   44794:	csinc	w0, w0, wzr, ne  // ne = any
   44798:	cbz	w0, 44aa4 <aarch64_sys_reg_supported_p@@Base+0x3fc>
   4479c:	mov	w0, #0x0                   	// #0
   447a0:	tbz	w2, #24, 446f8 <aarch64_sys_reg_supported_p@@Base+0x50>
   447a4:	mov	w0, #0xc03a                	// #49210
   447a8:	cmp	w1, w0
   447ac:	b.eq	44940 <aarch64_sys_reg_supported_p@@Base+0x298>  // b.none
   447b0:	mov	w0, #0xc214                	// #49684
   447b4:	cmp	w1, w0
   447b8:	b.eq	44940 <aarch64_sys_reg_supported_p@@Base+0x298>  // b.none
   447bc:	mov	w16, #0xffff3d68            	// #-49816
   447c0:	add	w3, w1, w16
   447c4:	mov	w6, #0xfffffff4            	// #-12
   447c8:	mov	w17, #0xffff3d58            	// #-49832
   447cc:	tst	w3, w6
   447d0:	add	w0, w1, w17
   447d4:	ccmp	w0, #0x1, #0x0, ne  // ne = any
   447d8:	b.hi	44a70 <aarch64_sys_reg_supported_p@@Base+0x3c8>  // b.pmore
   447dc:	mov	w0, #0x0                   	// #0
   447e0:	tbz	w2, #26, 446f8 <aarch64_sys_reg_supported_p@@Base+0x50>
   447e4:	and	w3, w1, #0xffffdfff
   447e8:	mov	w15, #0xffff3b36            	// #-50378
   447ec:	add	w0, w1, w15
   447f0:	cmp	w0, #0x7
   447f4:	and	w7, w1, #0xfffffffb
   447f8:	mov	w0, #0xc4d3                	// #50387
   447fc:	ccmp	w7, w0, #0x4, hi  // hi = pmore
   44800:	cset	w0, eq  // eq = none
   44804:	mov	w6, #0xecc8                	// #60616
   44808:	cmp	w1, w6
   4480c:	mov	w6, #0xc4c8                	// #50376
   44810:	ccmp	w3, w6, #0x4, ne  // ne = any
   44814:	csinc	w0, w0, wzr, ne  // ne = any
   44818:	cbz	w0, 44824 <aarch64_sys_reg_supported_p@@Base+0x17c>
   4481c:	mov	w0, #0x0                   	// #0
   44820:	tbz	w2, #27, 446f8 <aarch64_sys_reg_supported_p@@Base+0x50>
   44824:	mov	w13, #0xffff3ef8            	// #-49416
   44828:	add	w6, w1, w13
   4482c:	mov	w8, #0xfffffff4            	// #-12
   44830:	mov	w14, #0xffff3ee8            	// #-49432
   44834:	tst	w6, w8
   44838:	add	w0, w1, w14
   4483c:	ccmp	w0, #0x1, #0x0, ne  // ne = any
   44840:	b.hi	4484c <aarch64_sys_reg_supported_p@@Base+0x1a4>  // b.pmore
   44844:	mov	w0, #0x0                   	// #0
   44848:	tbz	w2, #6, 446f8 <aarch64_sys_reg_supported_p@@Base+0x50>
   4484c:	mov	w12, #0xffff1770            	// #-59536
   44850:	add	w0, w1, w12
   44854:	tst	w0, #0xfffff7ff
   44858:	mov	w8, #0xc090                	// #49296
   4485c:	ccmp	w3, w8, #0x4, ne  // ne = any
   44860:	mov	w6, #0xc024                	// #49188
   44864:	cset	w0, eq  // eq = none
   44868:	cmp	w1, w6
   4486c:	mov	w3, #0xc007                	// #49159
   44870:	ccmp	w1, w3, #0x4, ne  // ne = any
   44874:	csinc	w0, w0, wzr, ne  // ne = any
   44878:	cbz	w0, 44884 <aarch64_sys_reg_supported_p@@Base+0x1dc>
   4487c:	mov	w0, #0x0                   	// #0
   44880:	tbz	w2, #28, 446f8 <aarch64_sys_reg_supported_p@@Base+0x50>
   44884:	mov	w0, #0xda15                	// #55829
   44888:	cmp	w1, w0
   4488c:	b.eq	44990 <aarch64_sys_reg_supported_p@@Base+0x2e8>  // b.none
   44890:	mov	w0, #0xe132                	// #57650
   44894:	cmp	w1, w0
   44898:	b.ne	4496c <aarch64_sys_reg_supported_p@@Base+0x2c4>  // b.any
   4489c:	mov	w0, #0x0                   	// #0
   448a0:	tbz	w2, #11, 446f8 <aarch64_sys_reg_supported_p@@Base+0x50>
   448a4:	mov	w5, #0xffff26e0            	// #-55584
   448a8:	add	w0, w1, w5
   448ac:	cmp	w0, #0x1
   448b0:	b.ls	44a94 <aarch64_sys_reg_supported_p@@Base+0x3ec>  // b.plast
   448b4:	mov	w0, #0xda17                	// #55831
   448b8:	cmp	w1, w0
   448bc:	b.ne	448c8 <aarch64_sys_reg_supported_p@@Base+0x220>  // b.any
   448c0:	ubfx	x0, x2, #48, #1
   448c4:	ret
   448c8:	mov	w0, #0xffff3d50            	// #-49840
   448cc:	add	w0, w1, w0
   448d0:	and	w3, w1, #0xfffff7ff
   448d4:	cmp	w0, #0x1
   448d8:	mov	w0, #0xe2b0                	// #58032
   448dc:	ccmp	w3, w0, #0x4, hi  // hi = pmore
   448e0:	mov	w4, #0xffff3f7b            	// #-49285
   448e4:	mov	w3, #0xf2b0                	// #62128
   448e8:	add	w0, w1, w4
   448ec:	ccmp	w1, w3, #0x4, ne  // ne = any
   448f0:	ccmp	w0, #0x1, #0x0, ne  // ne = any
   448f4:	mov	w0, #0xc804                	// #51204
   448f8:	ccmp	w1, w0, #0x4, hi  // hi = pmore
   448fc:	b.eq	448c0 <aarch64_sys_reg_supported_p@@Base+0x218>  // b.none
   44900:	mov	w0, #0x1                   	// #1
   44904:	ret
   44908:	mov	w0, #0xf687                	// #63111
   4490c:	cmp	w1, w0
   44910:	b.ne	446e4 <aarch64_sys_reg_supported_p@@Base+0x3c>  // b.any
   44914:	mov	w0, #0x0                   	// #0
   44918:	tbnz	x2, #45, 44704 <aarch64_sys_reg_supported_p@@Base+0x5c>
   4491c:	ret
   44920:	mov	w0, #0xda16                	// #55830
   44924:	cmp	w1, w0
   44928:	b.ne	4494c <aarch64_sys_reg_supported_p@@Base+0x2a4>  // b.any
   4492c:	mov	w0, #0x0                   	// #0
   44930:	tbz	x2, #47, 446f8 <aarch64_sys_reg_supported_p@@Base+0x50>
   44934:	mov	w4, w1
   44938:	mov	w5, #0xda14                	// #55828
   4493c:	b	447a4 <aarch64_sys_reg_supported_p@@Base+0xfc>
   44940:	mov	w0, #0x0                   	// #0
   44944:	tbnz	w2, #5, 447e4 <aarch64_sys_reg_supported_p@@Base+0x13c>
   44948:	ret
   4494c:	mov	w0, #0xe101                	// #57601
   44950:	cmp	w1, w0
   44954:	mov	w0, #0xe681                	// #59009
   44958:	ccmp	w1, w0, #0x4, ne  // ne = any
   4495c:	b.eq	44714 <aarch64_sys_reg_supported_p@@Base+0x6c>  // b.none
   44960:	b	44704 <aarch64_sys_reg_supported_p@@Base+0x5c>
   44964:	mov	w0, #0x0                   	// #0
   44968:	ret
   4496c:	mov	w11, #0xffff18e0            	// #-59168
   44970:	add	w4, w4, w11
   44974:	cmp	w4, #0x2
   44978:	mov	w0, #0xe099                	// #57497
   4497c:	and	w4, w1, #0xffffffdf
   44980:	ccmp	w1, w0, #0x4, hi  // hi = pmore
   44984:	mov	w0, #0xe110                	// #57616
   44988:	ccmp	w4, w0, #0x4, ne  // ne = any
   4498c:	b.ne	44998 <aarch64_sys_reg_supported_p@@Base+0x2f0>  // b.any
   44990:	tbz	w2, #11, 44964 <aarch64_sys_reg_supported_p@@Base+0x2bc>
   44994:	and	w4, w1, #0xffffffdf
   44998:	mov	w6, #0xffffbbf8            	// #-17416
   4499c:	add	w0, w1, w6
   449a0:	and	w3, w5, #0xffffffdf
   449a4:	cmp	w0, #0x3
   449a8:	mov	w0, #0x440d                	// #17421
   449ac:	ccmp	w3, w0, #0x4, hi  // hi = pmore
   449b0:	cset	w0, eq  // eq = none
   449b4:	mov	w3, #0x7429                	// #29737
   449b8:	cmp	w1, w3
   449bc:	mov	w6, #0x6420                	// #25632
   449c0:	mov	w3, #0xffffeffe            	// #-4098
   449c4:	ccmp	w1, w6, #0x4, ne  // ne = any
   449c8:	and	w3, w1, w3
   449cc:	csinc	w0, w0, wzr, ne  // ne = any
   449d0:	mov	w6, #0x6408                	// #25608
   449d4:	cmp	w3, w6
   449d8:	mov	w8, #0xffff9bf4            	// #-25612
   449dc:	mov	w6, #0x740d                	// #29709
   449e0:	add	w3, w1, w8
   449e4:	ccmp	w4, w6, #0x4, ne  // ne = any
   449e8:	csinc	w0, w0, wzr, ne  // ne = any
   449ec:	and	w4, w5, #0xfffffffb
   449f0:	cmp	w3, #0x2
   449f4:	mov	w3, #0x4431                	// #17457
   449f8:	ccmp	w4, w3, #0x4, hi  // hi = pmore
   449fc:	mov	w3, #0x4429                	// #17449
   44a00:	csinc	w0, w0, wzr, ne  // ne = any
   44a04:	cmp	w5, w3
   44a08:	mov	w9, #0xffff9bde            	// #-25634
   44a0c:	mov	w5, #0x4411                	// #17425
   44a10:	add	w3, w1, w9
   44a14:	ccmp	w4, w5, #0x4, ne  // ne = any
   44a18:	csinc	w0, w0, wzr, ne  // ne = any
   44a1c:	mov	w4, #0x6402                	// #25602
   44a20:	cmp	w3, #0x2
   44a24:	mov	w10, #0xffff9bda            	// #-25638
   44a28:	ccmp	w7, w4, #0x4, hi  // hi = pmore
   44a2c:	add	w4, w1, w10
   44a30:	csinc	w0, w0, wzr, ne  // ne = any
   44a34:	mov	w3, #0xffffffdb            	// #-37
   44a38:	cmp	w4, #0x1
   44a3c:	and	w3, w1, w3
   44a40:	mov	w4, #0x6411                	// #25617
   44a44:	ccmp	w3, w4, #0x4, hi  // hi = pmore
   44a48:	csinc	w0, w0, wzr, ne  // ne = any
   44a4c:	mov	w4, #0x7411                	// #29713
   44a50:	cmp	w3, w4
   44a54:	mov	w3, #0x6429                	// #25641
   44a58:	ccmp	w7, w3, #0x4, ne  // ne = any
   44a5c:	csinc	w0, w0, wzr, ne  // ne = any
   44a60:	cbz	w0, 448a4 <aarch64_sys_reg_supported_p@@Base+0x1fc>
   44a64:	mov	w0, #0x0                   	// #0
   44a68:	tbnz	w2, #11, 448a4 <aarch64_sys_reg_supported_p@@Base+0x1fc>
   44a6c:	ret
   44a70:	mov	w0, #0xe293                	// #58003
   44a74:	and	w3, w1, #0xffffdfff
   44a78:	cmp	w1, w0
   44a7c:	mov	w0, #0xc609                	// #50697
   44a80:	ccmp	w3, w0, #0x4, ne  // ne = any
   44a84:	b.ne	447e8 <aarch64_sys_reg_supported_p@@Base+0x140>  // b.any
   44a88:	mov	w0, #0x0                   	// #0
   44a8c:	tbnz	w2, #26, 447e8 <aarch64_sys_reg_supported_p@@Base+0x140>
   44a90:	ret
   44a94:	mov	x0, #0x82000000000         	// #8933531975680
   44a98:	bics	xzr, x0, x2
   44a9c:	cset	w0, eq  // eq = none
   44aa0:	ret
   44aa4:	mov	w18, #0xffff10f0            	// #-61200
   44aa8:	add	w0, w4, w18
   44aac:	cmp	w0, #0x2
   44ab0:	b.hi	447a4 <aarch64_sys_reg_supported_p@@Base+0xfc>  // b.pmore
   44ab4:	mov	w0, #0x0                   	// #0
   44ab8:	tbnz	w2, #24, 447a4 <aarch64_sys_reg_supported_p@@Base+0xfc>
   44abc:	ret

0000000000044ac0 <aarch64_pstatefield_supported_p@@Base>:
   44ac0:	ldr	w2, [x1, #12]
   44ac4:	tbz	w2, #1, 44afc <aarch64_pstatefield_supported_p@@Base+0x3c>
   44ac8:	ldr	w1, [x1, #8]
   44acc:	cmp	w1, #0x4
   44ad0:	b.eq	44af4 <aarch64_pstatefield_supported_p@@Base+0x34>  // b.none
   44ad4:	cmp	w1, #0x3
   44ad8:	b.eq	44b14 <aarch64_pstatefield_supported_p@@Base+0x54>  // b.none
   44adc:	cmp	w1, #0x19
   44ae0:	b.eq	44b1c <aarch64_pstatefield_supported_p@@Base+0x5c>  // b.none
   44ae4:	cmp	w1, #0x1a
   44ae8:	b.ne	44b04 <aarch64_pstatefield_supported_p@@Base+0x44>  // b.any
   44aec:	ubfx	w0, w0, #11, #1
   44af0:	ret
   44af4:	ubfx	w0, w0, #21, #1
   44af8:	ret
   44afc:	mov	w0, #0x1                   	// #1
   44b00:	ret
   44b04:	cmp	w1, #0x1c
   44b08:	b.ne	44afc <aarch64_pstatefield_supported_p@@Base+0x3c>  // b.any
   44b0c:	ubfx	x0, x0, #48, #1
   44b10:	ret
   44b14:	ubfx	w0, w0, #5, #1
   44b18:	ret
   44b1c:	ubfx	x0, x0, #47, #1
   44b20:	ret
   44b24:	nop

0000000000044b28 <aarch64_sys_ins_reg_has_xt@@Base>:
   44b28:	ldr	w0, [x0, #12]
   44b2c:	ubfx	x0, x0, #2, #1
   44b30:	ret
   44b34:	nop

0000000000044b38 <aarch64_sys_ins_reg_supported_p@@Base>:
   44b38:	mov	x2, x0
   44b3c:	ldr	w0, [x1, #12]
   44b40:	tbz	w0, #1, 44be4 <aarch64_sys_ins_reg_supported_p@@Base+0xac>
   44b44:	ldr	w1, [x1, #8]
   44b48:	mov	w0, #0x5be1                	// #23521
   44b4c:	cmp	w1, w0
   44b50:	b.eq	44bdc <aarch64_sys_ins_reg_supported_p@@Base+0xa4>  // b.none
   44b54:	mov	w0, #0x5be9                	// #23529
   44b58:	cmp	w1, w0
   44b5c:	b.eq	44c00 <aarch64_sys_ins_reg_supported_p@@Base+0xc8>  // b.none
   44b60:	and	w3, w1, #0xffffffdf
   44b64:	and	w0, w1, #0xfffffff7
   44b68:	mov	w4, #0xffffa42d            	// #-23507
   44b6c:	mov	w5, #0xffffa41d            	// #-23523
   44b70:	add	w3, w3, w4
   44b74:	add	w0, w0, w5
   44b78:	tst	w3, #0xfffffffd
   44b7c:	and	w0, w0, #0xfffffffd
   44b80:	ccmp	w0, #0x0, #0x4, ne  // ne = any
   44b84:	mov	w4, #0xffffffdd            	// #-35
   44b88:	and	w4, w1, w4
   44b8c:	cset	w0, eq  // eq = none
   44b90:	mov	w5, #0x43d4                	// #17364
   44b94:	mov	w6, #0xffffbc4d            	// #-17331
   44b98:	cmp	w4, w5
   44b9c:	add	w3, w1, w6
   44ba0:	ccmp	w3, #0x3, #0x0, ne  // ne = any
   44ba4:	mov	w7, #0xffffa45d            	// #-23459
   44ba8:	add	w4, w1, w7
   44bac:	cset	w3, ls  // ls = plast
   44bb0:	cmp	w4, #0x1
   44bb4:	orr	w3, w0, w3
   44bb8:	cset	w0, ls  // ls = plast
   44bbc:	orr	w0, w0, w3
   44bc0:	cbz	w0, 44bcc <aarch64_sys_ins_reg_supported_p@@Base+0x94>
   44bc4:	mov	w0, #0x0                   	// #0
   44bc8:	tbz	x2, #48, 44be0 <aarch64_sys_ins_reg_supported_p@@Base+0xa8>
   44bcc:	mov	w0, #0xffffbc38            	// #-17352
   44bd0:	add	w0, w1, w0
   44bd4:	cmp	w0, #0x1
   44bd8:	b.hi	44bec <aarch64_sys_ins_reg_supported_p@@Base+0xb4>  // b.pmore
   44bdc:	ubfx	w0, w2, #5, #1
   44be0:	ret
   44be4:	mov	w0, #0x1                   	// #1
   44be8:	ret
   44bec:	mov	w0, #0x5b98                	// #23448
   44bf0:	cmp	w1, w0
   44bf4:	b.ne	44be4 <aarch64_sys_ins_reg_supported_p@@Base+0xac>  // b.any
   44bf8:	ubfx	x0, x2, #41, #1
   44bfc:	ret
   44c00:	ubfx	x0, x2, #42, #1
   44c04:	ret

0000000000044c08 <init_insn_sequence@@Base>:
   44c08:	stp	x29, x30, [sp, #-32]!
   44c0c:	mov	x29, sp
   44c10:	stp	x19, x20, [sp, #16]
   44c14:	mov	x20, x0
   44c18:	mov	x19, x1
   44c1c:	ldr	x0, [x1]
   44c20:	str	wzr, [x1, #8]
   44c24:	str	wzr, [x1, #24]
   44c28:	cbz	x0, 44c30 <init_insn_sequence@@Base+0x28>
   44c2c:	bl	35790 <free@plt>
   44c30:	str	xzr, [x19]
   44c34:	cbz	x20, 44c9c <init_insn_sequence@@Base+0x94>
   44c38:	mov	x0, #0x168                 	// #360
   44c3c:	bl	35480 <xmalloc@plt>
   44c40:	str	x0, [x19]
   44c44:	mov	x1, x20
   44c48:	mov	x2, #0x168                 	// #360
   44c4c:	bl	35050 <memcpy@plt>
   44c50:	ldr	x1, [x20, #8]
   44c54:	ldr	x0, [x19, #16]
   44c58:	ldr	w20, [x1, #128]
   44c5c:	and	w20, w20, #0x1
   44c60:	cbz	x0, 44c68 <init_insn_sequence@@Base+0x60>
   44c64:	bl	35790 <free@plt>
   44c68:	str	xzr, [x19, #16]
   44c6c:	cbnz	w20, 44c7c <init_insn_sequence@@Base+0x74>
   44c70:	ldp	x19, x20, [sp, #16]
   44c74:	ldp	x29, x30, [sp], #32
   44c78:	ret
   44c7c:	mov	x0, #0x168                 	// #360
   44c80:	bl	35480 <xmalloc@plt>
   44c84:	str	x0, [x19, #16]
   44c88:	mov	x2, #0x168                 	// #360
   44c8c:	ldp	x19, x20, [sp, #16]
   44c90:	mov	w1, #0x0                   	// #0
   44c94:	ldp	x29, x30, [sp], #32
   44c98:	b	35470 <memset@plt>
   44c9c:	ldr	x0, [x19, #16]
   44ca0:	cbz	x0, 44c70 <init_insn_sequence@@Base+0x68>
   44ca4:	bl	35790 <free@plt>
   44ca8:	str	xzr, [x19, #16]
   44cac:	ldp	x19, x20, [sp, #16]
   44cb0:	ldp	x29, x30, [sp], #32
   44cb4:	ret

0000000000044cb8 <verify_constraints@@Base>:
   44cb8:	stp	x29, x30, [sp, #-304]!
   44cbc:	mov	x29, sp
   44cc0:	stp	x19, x20, [sp, #16]
   44cc4:	cbz	x0, 45268 <verify_constraints@@Base+0x5b0>
   44cc8:	stp	x25, x26, [sp, #64]
   44ccc:	mov	x20, x0
   44cd0:	ldr	x26, [x0, #8]
   44cd4:	stp	x21, x22, [sp, #32]
   44cd8:	cbz	x26, 452c4 <verify_constraints@@Base+0x60c>
   44cdc:	ldr	w1, [x26, #128]
   44ce0:	mov	x19, x5
   44ce4:	stp	x27, x28, [sp, #80]
   44ce8:	mov	x27, x4
   44cec:	cbnz	w1, 44ea8 <verify_constraints@@Base+0x1f0>
   44cf0:	ldr	x0, [x5]
   44cf4:	cbz	x0, 4505c <verify_constraints@@Base+0x3a4>
   44cf8:	ldr	x6, [x26, #120]
   44cfc:	tbnz	w6, #31, 45020 <verify_constraints@@Base+0x368>
   44d00:	cmp	w3, #0x0
   44d04:	ccmp	x2, #0x0, #0x0, eq  // eq = none
   44d08:	ldr	x2, [x0, #8]
   44d0c:	b.eq	450e8 <verify_constraints@@Base+0x430>  // b.none
   44d10:	ldr	w2, [x2, #128]
   44d14:	and	w21, w2, #0x1
   44d18:	tbz	w2, #0, 44f28 <verify_constraints@@Base+0x270>
   44d1c:	ldr	x2, [x26, #24]
   44d20:	cbz	x2, 44f80 <verify_constraints@@Base+0x2c8>
   44d24:	ldr	x2, [x2]
   44d28:	and	x2, x2, #0x1ffffff0
   44d2c:	and	x2, x2, #0xfffffffff000001f
   44d30:	cbz	x2, 44f80 <verify_constraints@@Base+0x2c8>
   44d34:	tbz	w1, #0, 45130 <verify_constraints@@Base+0x478>
   44d38:	ldr	w1, [x0, #24]
   44d3c:	add	x2, sp, #0x88
   44d40:	stp	x23, x24, [sp, #48]
   44d44:	cmp	w1, #0xc1
   44d48:	ldrb	w1, [x0, #28]
   44d4c:	str	w1, [sp, #124]
   44d50:	ldr	w1, [x0, #40]
   44d54:	str	w1, [sp, #108]
   44d58:	stp	xzr, xzr, [sp, #136]
   44d5c:	stp	xzr, xzr, [sp, #152]
   44d60:	stp	xzr, xzr, [sp, #168]
   44d64:	str	xzr, [sp, #184]
   44d68:	stp	xzr, xzr, [sp, #192]
   44d6c:	stp	xzr, xzr, [sp, #208]
   44d70:	stp	xzr, xzr, [sp, #224]
   44d74:	str	xzr, [sp, #240]
   44d78:	b.ne	452f0 <verify_constraints@@Base+0x638>  // b.any
   44d7c:	ldr	w1, [x0, #80]
   44d80:	str	wzr, [sp, #116]
   44d84:	cmp	w1, #0xa4
   44d88:	b.ne	44db8 <verify_constraints@@Base+0x100>  // b.any
   44d8c:	add	x3, x0, #0x50
   44d90:	mov	w1, #0x1                   	// #1
   44d94:	str	w1, [sp, #116]
   44d98:	ldp	x0, x1, [x0, #80]
   44d9c:	stp	x0, x1, [x2]
   44da0:	ldp	x0, x1, [x3, #16]
   44da4:	stp	x0, x1, [x2, #16]
   44da8:	ldp	x0, x1, [x3, #32]
   44dac:	stp	x0, x1, [x2, #32]
   44db0:	ldr	x0, [x3, #48]
   44db4:	str	x0, [x2, #48]
   44db8:	mov	x0, x26
   44dbc:	bl	35170 <aarch64_num_of_operands@plt>
   44dc0:	mov	w12, w0
   44dc4:	cmp	w0, #0x0
   44dc8:	b.le	451c4 <verify_constraints@@Base+0x50c>
   44dcc:	mov	x24, #0xcc000000            	// #3422552064
   44dd0:	mov	w0, #0xffffffff            	// #-1
   44dd4:	add	x21, x20, #0x18
   44dd8:	add	x28, sp, #0xf8
   44ddc:	mov	w22, #0x0                   	// #0
   44de0:	mov	w25, #0x0                   	// #0
   44de4:	mov	x23, #0x1                   	// #1
   44de8:	movk	x24, #0x241, lsl #32
   44dec:	str	w0, [sp, #104]
   44df0:	str	wzr, [sp, #112]
   44df4:	str	wzr, [sp, #120]
   44df8:	b	44e24 <verify_constraints@@Base+0x16c>
   44dfc:	sub	w1, w1, #0xa3
   44e00:	lsl	x1, x23, x1
   44e04:	tst	w1, #0xff
   44e08:	b.ne	44fcc <verify_constraints@@Base+0x314>  // b.any
   44e0c:	tst	x1, x24
   44e10:	b.ne	44e70 <verify_constraints@@Base+0x1b8>  // b.any
   44e14:	add	w22, w22, #0x1
   44e18:	add	x21, x21, #0x38
   44e1c:	cmp	w12, w22
   44e20:	b.eq	45064 <verify_constraints@@Base+0x3ac>  // b.none
   44e24:	ldp	x0, x1, [x21]
   44e28:	stp	x0, x1, [x28]
   44e2c:	ldr	w1, [x21]
   44e30:	ldp	x2, x3, [x21, #16]
   44e34:	stp	x2, x3, [x28, #16]
   44e38:	ldrb	w0, [x21, #4]
   44e3c:	ldp	x6, x7, [x21, #32]
   44e40:	stp	x6, x7, [x28, #32]
   44e44:	ldr	w2, [x21, #16]
   44e48:	ldr	x13, [x21, #48]
   44e4c:	str	x13, [x28, #48]
   44e50:	cmp	w1, #0xcc
   44e54:	b.hi	44e14 <verify_constraints@@Base+0x15c>  // b.pmore
   44e58:	cmp	w1, #0xa2
   44e5c:	b.hi	44dfc <verify_constraints@@Base+0x144>  // b.pmore
   44e60:	cmp	w1, #0x19
   44e64:	b.hi	44fbc <verify_constraints@@Base+0x304>  // b.pmore
   44e68:	cmp	w1, #0x16
   44e6c:	b.ls	44e14 <verify_constraints@@Base+0x15c>  // b.plast
   44e70:	ldr	w1, [sp, #108]
   44e74:	cmp	w2, w1
   44e78:	b.ne	44e8c <verify_constraints@@Base+0x1d4>  // b.any
   44e7c:	ldr	w1, [sp, #112]
   44e80:	str	w22, [sp, #120]
   44e84:	add	w1, w1, #0x1
   44e88:	str	w1, [sp, #112]
   44e8c:	str	w12, [sp, #100]
   44e90:	bl	35680 <aarch64_get_qualifier_esize@plt>
   44e94:	cmp	w25, w0, uxtb
   44e98:	ldr	w12, [sp, #100]
   44e9c:	csel	w10, w25, w0, hi  // hi = pmore
   44ea0:	and	w25, w10, #0xff
   44ea4:	b	44e14 <verify_constraints@@Base+0x15c>
   44ea8:	cbz	x5, 4529c <verify_constraints@@Base+0x5e4>
   44eac:	ldr	x6, [x26, #120]
   44eb0:	mov	w21, #0x0                   	// #0
   44eb4:	ldr	x0, [x5]
   44eb8:	tbnz	w6, #31, 44ff4 <verify_constraints@@Base+0x33c>
   44ebc:	cbnz	x0, 44d00 <verify_constraints@@Base+0x48>
   44ec0:	mov	w0, w21
   44ec4:	ldp	x19, x20, [sp, #16]
   44ec8:	ldp	x21, x22, [sp, #32]
   44ecc:	ldp	x25, x26, [sp, #64]
   44ed0:	ldp	x27, x28, [sp, #80]
   44ed4:	ldp	x29, x30, [sp], #304
   44ed8:	ret
   44edc:	mov	x0, x26
   44ee0:	bl	35610 <aarch64_is_destructive_by_operands@plt>
   44ee4:	ldr	w1, [sp, #112]
   44ee8:	cmp	w0, #0x0
   44eec:	cset	w0, ne  // ne = any
   44ef0:	add	w0, w0, #0x1
   44ef4:	cbz	w1, 45160 <verify_constraints@@Base+0x4a8>
   44ef8:	ldr	w1, [sp, #108]
   44efc:	cmp	w1, w28
   44f00:	b.ne	451ac <verify_constraints@@Base+0x4f4>  // b.any
   44f04:	ldr	w1, [sp, #112]
   44f08:	cmp	w1, w0
   44f0c:	b.gt	45200 <verify_constraints@@Base+0x548>
   44f10:	ldr	w0, [sp, #124]
   44f14:	cmp	w21, #0x0
   44f18:	ccmp	w0, #0x0, #0x4, ne  // ne = any
   44f1c:	b.ne	45240 <verify_constraints@@Base+0x588>  // b.any
   44f20:	ldp	x23, x24, [sp, #48]
   44f24:	mov	w21, #0x0                   	// #0
   44f28:	ldr	w0, [x19, #24]
   44f2c:	mov	x1, x20
   44f30:	ldr	x3, [x19, #16]
   44f34:	add	w4, w0, #0x1
   44f38:	str	w4, [x19, #24]
   44f3c:	mov	x2, #0x168                 	// #360
   44f40:	add	x0, x3, w0, sxtw #3
   44f44:	bl	35050 <memcpy@plt>
   44f48:	ldr	w0, [x19, #8]
   44f4c:	ldr	w1, [x19, #24]
   44f50:	cmp	w1, w0
   44f54:	b.lt	44ec0 <verify_constraints@@Base+0x208>  // b.tstop
   44f58:	mov	x1, x19
   44f5c:	mov	x0, #0x0                   	// #0
   44f60:	bl	35830 <init_insn_sequence@plt>
   44f64:	mov	w0, w21
   44f68:	ldp	x19, x20, [sp, #16]
   44f6c:	ldp	x21, x22, [sp, #32]
   44f70:	ldp	x25, x26, [sp, #64]
   44f74:	ldp	x27, x28, [sp, #80]
   44f78:	ldp	x29, x30, [sp], #304
   44f7c:	ret
   44f80:	mov	w0, #0x2                   	// #2
   44f84:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   44f88:	add	x1, x1, #0x298
   44f8c:	str	w0, [x27]
   44f90:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   44f94:	mov	w2, #0x5                   	// #5
   44f98:	add	x0, x0, #0x5d8
   44f9c:	bl	359e0 <dcgettext@plt>
   44fa0:	mov	w21, #0x4                   	// #4
   44fa4:	mov	w2, #0xffffffff            	// #-1
   44fa8:	mov	w1, #0x1                   	// #1
   44fac:	str	w2, [x27, #4]
   44fb0:	str	x0, [x27, #8]
   44fb4:	str	w1, [x27, #28]
   44fb8:	b	44f28 <verify_constraints@@Base+0x270>
   44fbc:	sub	w1, w1, #0x1b
   44fc0:	cmp	w1, #0x1
   44fc4:	b.hi	44e14 <verify_constraints@@Base+0x15c>  // b.pmore
   44fc8:	b	44e70 <verify_constraints@@Base+0x1b8>
   44fcc:	strb	w0, [sp, #252]
   44fd0:	str	w2, [sp, #264]
   44fd4:	str	w22, [sp, #104]
   44fd8:	ldp	x2, x3, [x28]
   44fdc:	stp	x2, x3, [sp, #192]
   44fe0:	ldp	x2, x3, [x28, #16]
   44fe4:	stp	x2, x3, [sp, #208]
   44fe8:	stp	x6, x7, [sp, #224]
   44fec:	str	x13, [sp, #240]
   44ff0:	b	44e14 <verify_constraints@@Base+0x15c>
   44ff4:	cbnz	x0, 45020 <verify_constraints@@Base+0x368>
   44ff8:	mov	x1, x19
   44ffc:	mov	x0, x20
   45000:	bl	35830 <init_insn_sequence@plt>
   45004:	mov	w0, w21
   45008:	ldp	x19, x20, [sp, #16]
   4500c:	ldp	x21, x22, [sp, #32]
   45010:	ldp	x25, x26, [sp, #64]
   45014:	ldp	x27, x28, [sp, #80]
   45018:	ldp	x29, x30, [sp], #304
   4501c:	ret
   45020:	mov	w0, #0x2                   	// #2
   45024:	str	w0, [x27]
   45028:	mov	w2, #0x5                   	// #5
   4502c:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   45030:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   45034:	add	x1, x1, #0x228
   45038:	add	x0, x0, #0x5d8
   4503c:	bl	359e0 <dcgettext@plt>
   45040:	mov	w2, #0xffffffff            	// #-1
   45044:	mov	w1, #0x1                   	// #1
   45048:	mov	w21, #0x4                   	// #4
   4504c:	str	w2, [x27, #4]
   45050:	str	x0, [x27, #8]
   45054:	str	w1, [x27, #28]
   45058:	b	44ff8 <verify_constraints@@Base+0x340>
   4505c:	mov	w21, #0x0                   	// #0
   45060:	b	44ec0 <verify_constraints@@Base+0x208>
   45064:	cbz	w25, 451c4 <verify_constraints@@Base+0x50c>
   45068:	ldr	w0, [x26, #128]
   4506c:	ldrb	w21, [x20, #28]
   45070:	ldr	w28, [x20, #40]
   45074:	tbz	w0, #1, 4519c <verify_constraints@@Base+0x4e4>
   45078:	ldr	w0, [sp, #116]
   4507c:	cbz	w0, 44edc <verify_constraints@@Base+0x224>
   45080:	ldr	w0, [sp, #104]
   45084:	cmn	w0, #0x1
   45088:	b.eq	451e8 <verify_constraints@@Base+0x530>  // b.none
   4508c:	ldrb	w0, [sp, #196]
   45090:	cmp	w0, #0x18
   45094:	b.ne	45148 <verify_constraints@@Base+0x490>  // b.any
   45098:	ldr	w1, [sp, #152]
   4509c:	ldr	w0, [sp, #208]
   450a0:	cmp	w1, w0
   450a4:	b.eq	44edc <verify_constraints@@Base+0x224>  // b.none
   450a8:	mov	w0, #0x2                   	// #2
   450ac:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   450b0:	add	x1, x1, #0x3a0
   450b4:	str	w0, [x27]
   450b8:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   450bc:	mov	w2, #0x5                   	// #5
   450c0:	add	x0, x0, #0x5d8
   450c4:	bl	359e0 <dcgettext@plt>
   450c8:	mov	w21, #0x4                   	// #4
   450cc:	ldr	w2, [sp, #104]
   450d0:	mov	w1, #0x1                   	// #1
   450d4:	ldp	x23, x24, [sp, #48]
   450d8:	str	w2, [x27, #4]
   450dc:	str	x0, [x27, #8]
   450e0:	str	w1, [x27, #28]
   450e4:	b	44f28 <verify_constraints@@Base+0x270>
   450e8:	mov	w0, #0x2                   	// #2
   450ec:	str	w0, [x27]
   450f0:	mov	w2, #0x5                   	// #5
   450f4:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   450f8:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   450fc:	add	x1, x1, #0x270
   45100:	add	x0, x0, #0x5d8
   45104:	bl	359e0 <dcgettext@plt>
   45108:	mov	w1, #0xffffffff            	// #-1
   4510c:	mov	w2, #0x1                   	// #1
   45110:	str	w1, [x27, #4]
   45114:	mov	w21, #0x4                   	// #4
   45118:	str	x0, [x27, #8]
   4511c:	mov	x1, x19
   45120:	str	w2, [x27, #28]
   45124:	mov	x0, #0x0                   	// #0
   45128:	bl	35830 <init_insn_sequence@plt>
   4512c:	b	44ec0 <verify_constraints@@Base+0x208>
   45130:	mov	w0, #0x2                   	// #2
   45134:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   45138:	add	x1, x1, #0x2c8
   4513c:	str	w0, [x27]
   45140:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   45144:	b	44f94 <verify_constraints@@Base+0x2dc>
   45148:	mov	w0, #0x2                   	// #2
   4514c:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   45150:	add	x1, x1, #0x368
   45154:	str	w0, [x27]
   45158:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   4515c:	b	450bc <verify_constraints@@Base+0x404>
   45160:	mov	w0, #0x2                   	// #2
   45164:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   45168:	add	x1, x1, #0x3e0
   4516c:	str	w0, [x27]
   45170:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   45174:	add	x0, x0, #0x5d8
   45178:	mov	w2, #0x5                   	// #5
   4517c:	bl	359e0 <dcgettext@plt>
   45180:	mov	w21, #0x4                   	// #4
   45184:	mov	w1, #0x1                   	// #1
   45188:	ldp	x23, x24, [sp, #48]
   4518c:	str	wzr, [x27, #4]
   45190:	str	x0, [x27, #8]
   45194:	str	w1, [x27, #28]
   45198:	b	44f28 <verify_constraints@@Base+0x270>
   4519c:	mov	w0, w21
   451a0:	bl	35680 <aarch64_get_qualifier_esize@plt>
   451a4:	and	w25, w0, #0xff
   451a8:	b	45078 <verify_constraints@@Base+0x3c0>
   451ac:	mov	w0, #0x2                   	// #2
   451b0:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   451b4:	add	x1, x1, #0x428
   451b8:	str	w0, [x27]
   451bc:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   451c0:	b	45174 <verify_constraints@@Base+0x4bc>
   451c4:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   451c8:	add	x3, x3, #0xd50
   451cc:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   451d0:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   451d4:	add	x3, x3, #0x188
   451d8:	add	x1, x1, #0xb60
   451dc:	add	x0, x0, #0x320
   451e0:	mov	w2, #0x138b                	// #5003
   451e4:	bl	35ac0 <__assert_fail@plt>
   451e8:	mov	w0, #0x2                   	// #2
   451ec:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   451f0:	add	x1, x1, #0x338
   451f4:	str	w0, [x27]
   451f8:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   451fc:	b	450bc <verify_constraints@@Base+0x404>
   45200:	mov	w0, #0x2                   	// #2
   45204:	str	w0, [x27]
   45208:	mov	w2, #0x5                   	// #5
   4520c:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   45210:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   45214:	add	x1, x1, #0x468
   45218:	add	x0, x0, #0x5d8
   4521c:	bl	359e0 <dcgettext@plt>
   45220:	ldr	w2, [sp, #120]
   45224:	mov	w1, #0x1                   	// #1
   45228:	mov	w21, #0x4                   	// #4
   4522c:	ldp	x23, x24, [sp, #48]
   45230:	str	w2, [x27, #4]
   45234:	str	x0, [x27, #8]
   45238:	str	w1, [x27, #28]
   4523c:	b	44f28 <verify_constraints@@Base+0x270>
   45240:	ldrb	w0, [sp, #124]
   45244:	bl	35680 <aarch64_get_qualifier_esize@plt>
   45248:	cmp	w25, w0, uxtb
   4524c:	b.eq	44f20 <verify_constraints@@Base+0x268>  // b.none
   45250:	mov	w0, #0x2                   	// #2
   45254:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   45258:	add	x1, x1, #0x4a0
   4525c:	str	w0, [x27]
   45260:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   45264:	b	45174 <verify_constraints@@Base+0x4bc>
   45268:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   4526c:	add	x3, x3, #0xd50
   45270:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   45274:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   45278:	add	x3, x3, #0x188
   4527c:	add	x1, x1, #0xb60
   45280:	add	x0, x0, #0x210
   45284:	mov	w2, #0x12ff                	// #4863
   45288:	stp	x21, x22, [sp, #32]
   4528c:	stp	x23, x24, [sp, #48]
   45290:	stp	x25, x26, [sp, #64]
   45294:	stp	x27, x28, [sp, #80]
   45298:	bl	35ac0 <__assert_fail@plt>
   4529c:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   452a0:	add	x3, x3, #0xd50
   452a4:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   452a8:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   452ac:	add	x3, x3, #0x188
   452b0:	add	x1, x1, #0xb60
   452b4:	add	x0, x0, #0x218
   452b8:	mov	w2, #0x1306                	// #4870
   452bc:	stp	x23, x24, [sp, #48]
   452c0:	bl	35ac0 <__assert_fail@plt>
   452c4:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   452c8:	add	x3, x3, #0xd50
   452cc:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   452d0:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   452d4:	add	x3, x3, #0x188
   452d8:	add	x1, x1, #0xb60
   452dc:	add	x0, x0, #0xc60
   452e0:	mov	w2, #0x1300                	// #4864
   452e4:	stp	x23, x24, [sp, #48]
   452e8:	stp	x27, x28, [sp, #80]
   452ec:	bl	35ac0 <__assert_fail@plt>
   452f0:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   452f4:	add	x3, x3, #0xd50
   452f8:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   452fc:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   45300:	add	x3, x3, #0x188
   45304:	add	x1, x1, #0xb60
   45308:	add	x0, x0, #0x2f8
   4530c:	mov	w2, #0x1352                	// #4946
   45310:	bl	35ac0 <__assert_fail@plt>
   45314:	nop

0000000000045318 <aarch64_sve_dupm_mov_immediate_p@@Base>:
   45318:	lsl	w4, w1, #2
   4531c:	mov	x3, #0xffffffffffffffff    	// #-1
   45320:	mov	x2, x0
   45324:	lsl	x0, x3, x4
   45328:	lsl	x0, x0, x4
   4532c:	tst	x0, x2
   45330:	b.eq	45344 <aarch64_sve_dupm_mov_immediate_p@@Base+0x2c>  // b.none
   45334:	bics	xzr, x0, x2
   45338:	mov	w0, #0x0                   	// #0
   4533c:	b.eq	45344 <aarch64_sve_dupm_mov_immediate_p@@Base+0x2c>  // b.none
   45340:	ret
   45344:	cmp	w1, #0x4
   45348:	b.le	45384 <aarch64_sve_dupm_mov_immediate_p@@Base+0x6c>
   4534c:	lsr	x0, x2, #32
   45350:	mov	x1, x2
   45354:	cmp	w2, w0
   45358:	b.eq	453b0 <aarch64_sve_dupm_mov_immediate_p@@Base+0x98>  // b.none
   4535c:	tst	w1, #0xff
   45360:	b.ne	45374 <aarch64_sve_dupm_mov_immediate_p@@Base+0x5c>  // b.any
   45364:	cmp	x1, #0x0
   45368:	add	x0, x1, #0xff
   4536c:	csel	x1, x0, x1, lt  // lt = tstop
   45370:	asr	x1, x1, #8
   45374:	add	x1, x1, #0x80
   45378:	cmp	x1, #0xff
   4537c:	cset	w0, hi  // hi = pmore
   45380:	ret
   45384:	cmp	w1, #0x2
   45388:	b.gt	453b0 <aarch64_sve_dupm_mov_immediate_p@@Base+0x98>
   4538c:	cmp	w1, #0x1
   45390:	mov	w0, #0x0                   	// #0
   45394:	b.eq	45340 <aarch64_sve_dupm_mov_immediate_p@@Base+0x28>  // b.none
   45398:	ubfx	w3, w2, #8, #8
   4539c:	sxth	x1, w2
   453a0:	cmp	w3, w2, uxtb
   453a4:	mov	w0, #0x0                   	// #0
   453a8:	b.ne	4535c <aarch64_sve_dupm_mov_immediate_p@@Base+0x44>  // b.any
   453ac:	ret
   453b0:	lsr	w0, w2, #16
   453b4:	sxtw	x1, w2
   453b8:	cmp	w0, w2, uxth
   453bc:	b.ne	4535c <aarch64_sve_dupm_mov_immediate_p@@Base+0x44>  // b.any
   453c0:	b	45398 <aarch64_sve_dupm_mov_immediate_p@@Base+0x80>
   453c4:	nop

00000000000453c8 <aarch64_match_operands_constraint@@Base>:
   453c8:	stp	x29, x30, [sp, #-144]!
   453cc:	mov	x29, sp
   453d0:	stp	x25, x26, [sp, #64]
   453d4:	mov	x25, x1
   453d8:	ldr	x1, [x0, #8]
   453dc:	stp	x19, x20, [sp, #16]
   453e0:	mov	x20, x0
   453e4:	ldrb	w2, [x1, #132]
   453e8:	cbz	w2, 45430 <aarch64_match_operands_constraint@@Base+0x68>
   453ec:	sbfiz	x0, x2, #3, #32
   453f0:	ldr	w3, [x20, #40]
   453f4:	sub	x0, x0, w2, sxtw
   453f8:	add	x0, x20, x0, lsl #3
   453fc:	ldr	w0, [x0, #40]
   45400:	cmp	w3, w0
   45404:	b.eq	45430 <aarch64_match_operands_constraint@@Base+0x68>  // b.none
   45408:	cbz	x25, 458c0 <aarch64_match_operands_constraint@@Base+0x4f8>
   4540c:	mov	w0, #0x5                   	// #5
   45410:	mov	w19, #0x0                   	// #0
   45414:	stp	w0, w2, [x25]
   45418:	str	xzr, [x25, #8]
   4541c:	mov	w0, w19
   45420:	ldp	x19, x20, [sp, #16]
   45424:	ldp	x25, x26, [sp, #64]
   45428:	ldp	x29, x30, [sp], #144
   4542c:	ret
   45430:	stp	x21, x22, [sp, #32]
   45434:	add	x21, sp, #0x80
   45438:	add	x1, x1, #0x38
   4543c:	mov	x3, x21
   45440:	mov	x0, x20
   45444:	mov	w2, #0xffffffff            	// #-1
   45448:	bl	35360 <aarch64_find_best_match@plt>
   4544c:	cbz	w0, 45648 <aarch64_match_operands_constraint@@Base+0x280>
   45450:	stp	x27, x28, [sp, #80]
   45454:	ldr	x28, [x20, #8]
   45458:	ldr	x0, [x28, #120]
   4545c:	tbnz	w0, #28, 45944 <aarch64_match_operands_constraint@@Base+0x57c>
   45460:	stp	x23, x24, [sp, #48]
   45464:	ldr	w0, [x28, #32]
   45468:	cbz	w0, 454c4 <aarch64_match_operands_constraint@@Base+0xfc>
   4546c:	ldrb	w0, [sp, #128]
   45470:	strb	w0, [x20, #28]
   45474:	ldr	w0, [x28, #36]
   45478:	cbz	w0, 454c4 <aarch64_match_operands_constraint@@Base+0xfc>
   4547c:	ldrb	w0, [sp, #129]
   45480:	strb	w0, [x20, #84]
   45484:	ldr	w0, [x28, #40]
   45488:	cbz	w0, 454c4 <aarch64_match_operands_constraint@@Base+0xfc>
   4548c:	ldrb	w0, [sp, #130]
   45490:	strb	w0, [x20, #140]
   45494:	ldr	w0, [x28, #44]
   45498:	cbz	w0, 454c4 <aarch64_match_operands_constraint@@Base+0xfc>
   4549c:	ldrb	w0, [sp, #131]
   454a0:	strb	w0, [x20, #196]
   454a4:	ldr	w0, [x28, #48]
   454a8:	cbz	w0, 454c4 <aarch64_match_operands_constraint@@Base+0xfc>
   454ac:	ldrb	w0, [sp, #132]
   454b0:	strb	w0, [x20, #252]
   454b4:	ldr	w0, [x28, #52]
   454b8:	cbz	w0, 454c4 <aarch64_match_operands_constraint@@Base+0xfc>
   454bc:	ldrb	w0, [sp, #133]
   454c0:	strb	w0, [x20, #308]
   454c4:	adrp	x22, a6000 <aarch64_operands@@Base+0x16bd0>
   454c8:	add	x4, x20, #0x18
   454cc:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   454d0:	mov	x24, x4
   454d4:	ldr	x27, [x22, #4032]
   454d8:	add	x3, x3, #0xd50
   454dc:	add	x0, x3, #0x200
   454e0:	mov	w23, #0x1                   	// #1
   454e4:	str	x0, [sp, #96]
   454e8:	sub	w26, w23, #0x1
   454ec:	sxtw	x1, w26
   454f0:	add	x0, x1, #0x8
   454f4:	ldr	w19, [x28, x0, lsl #2]
   454f8:	cbz	w19, 45d3c <aarch64_match_operands_constraint@@Base+0x974>
   454fc:	lsl	x0, x1, #3
   45500:	sub	x0, x0, x1
   45504:	add	x0, x20, x0, lsl #3
   45508:	ldrb	w0, [x0, #72]
   4550c:	tbnz	w0, #0, 456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   45510:	ldr	w0, [x24]
   45514:	ldrb	w6, [x24, #4]
   45518:	cmp	w19, w0
   4551c:	b.ne	47f4c <aarch64_match_operands_constraint@@Base+0x2b84>  // b.any
   45520:	mov	w7, w19
   45524:	add	x0, x7, w19, uxtw #1
   45528:	lsl	x0, x0, #4
   4552c:	add	x1, x27, x0
   45530:	ldr	w0, [x27, x0]
   45534:	cmp	w0, #0x9
   45538:	b.eq	45ba0 <aarch64_match_operands_constraint@@Base+0x7d8>  // b.none
   4553c:	b.hi	45674 <aarch64_match_operands_constraint@@Base+0x2ac>  // b.pmore
   45540:	cmp	w0, #0x5
   45544:	b.eq	45c3c <aarch64_match_operands_constraint@@Base+0x874>  // b.none
   45548:	b.ls	456f0 <aarch64_match_operands_constraint@@Base+0x328>  // b.plast
   4554c:	cmp	w0, #0x7
   45550:	b.eq	459e8 <aarch64_match_operands_constraint@@Base+0x620>  // b.none
   45554:	cmp	w0, #0x8
   45558:	b.ne	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.any
   4555c:	cmp	w19, #0xca
   45560:	b.eq	46f90 <aarch64_match_operands_constraint@@Base+0x1bc8>  // b.none
   45564:	b.hi	458e4 <aarch64_match_operands_constraint@@Base+0x51c>  // b.pmore
   45568:	sub	w19, w19, #0xc4
   4556c:	cmp	w19, #0x4
   45570:	b.hi	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.pmore
   45574:	ldr	x0, [x22, #4032]
   45578:	add	x7, x7, x7, lsl #1
   4557c:	add	x0, x0, x7, lsl #4
   45580:	ldr	w1, [x0, #20]
   45584:	cbz	w1, 4707c <aarch64_match_operands_constraint@@Base+0x1cb4>
   45588:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   4558c:	ldr	w6, [x0, #24]
   45590:	ldr	x2, [x2, #3944]
   45594:	add	x1, x2, w1, uxtw #3
   45598:	ldr	w1, [x1, #4]
   4559c:	cbz	w6, 455c0 <aarch64_match_operands_constraint@@Base+0x1f8>
   455a0:	add	x6, x2, w6, uxtw #3
   455a4:	ldr	w7, [x0, #28]
   455a8:	ldr	w6, [x6, #4]
   455ac:	add	w1, w1, w6
   455b0:	cbz	w7, 455c0 <aarch64_match_operands_constraint@@Base+0x1f8>
   455b4:	add	x2, x2, w7, uxtw #3
   455b8:	ldr	w2, [x2, #4]
   455bc:	add	w1, w1, w2
   455c0:	sub	w2, w1, #0x1
   455c4:	cmp	w2, #0x1e
   455c8:	b.hi	4707c <aarch64_match_operands_constraint@@Base+0x1cb4>  // b.pmore
   455cc:	ldr	w2, [x0, #16]
   455d0:	mov	w6, #0x1                   	// #1
   455d4:	ldr	w8, [x24, #16]
   455d8:	ubfx	x2, x2, #5, #3
   455dc:	lsl	w7, w6, w2
   455e0:	sub	w0, w7, #0x1
   455e4:	cmp	x8, w0, sxtw
   455e8:	sxtw	x0, w0
   455ec:	b.ls	4733c <aarch64_match_operands_constraint@@Base+0x1f74>  // b.plast
   455f0:	sub	w7, w7, #0x8
   455f4:	tst	w7, #0xfffffff7
   455f8:	b.ne	48774 <aarch64_match_operands_constraint@@Base+0x33ac>  // b.any
   455fc:	cmp	x0, #0xf
   45600:	b.eq	475e0 <aarch64_match_operands_constraint@@Base+0x2218>  // b.none
   45604:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   45608:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   4560c:	add	x1, x1, #0x648
   45610:	add	x0, x0, #0x5d8
   45614:	mov	w2, #0x5                   	// #5
   45618:	bl	359e0 <dcgettext@plt>
   4561c:	cbz	x25, 477c8 <aarch64_match_operands_constraint@@Base+0x2400>
   45620:	mov	w1, #0x9                   	// #9
   45624:	mov	w19, #0x0                   	// #0
   45628:	ldp	x21, x22, [sp, #32]
   4562c:	ldp	x23, x24, [sp, #48]
   45630:	ldp	x27, x28, [sp, #80]
   45634:	stp	w1, w26, [x25]
   45638:	str	x0, [x25, #8]
   4563c:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   45640:	ldp	x27, x28, [sp, #80]
   45644:	nop
   45648:	cbz	x25, 458d8 <aarch64_match_operands_constraint@@Base+0x510>
   4564c:	mov	x0, #0xffffffffffff0004    	// #-65532
   45650:	mov	w19, #0x0                   	// #0
   45654:	movk	x0, #0x0, lsl #16
   45658:	stp	x0, xzr, [x25]
   4565c:	mov	w0, w19
   45660:	ldp	x19, x20, [sp, #16]
   45664:	ldp	x21, x22, [sp, #32]
   45668:	ldp	x25, x26, [sp, #64]
   4566c:	ldp	x29, x30, [sp], #144
   45670:	ret
   45674:	cmp	w0, #0xc
   45678:	b.eq	45b1c <aarch64_match_operands_constraint@@Base+0x754>  // b.none
   4567c:	b.ls	45798 <aarch64_match_operands_constraint@@Base+0x3d0>  // b.plast
   45680:	cmp	w0, #0xd
   45684:	b.ne	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.any
   45688:	cmp	w19, #0x4d
   4568c:	b.ne	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.any
   45690:	ldr	x0, [x24, #16]
   45694:	cmp	x25, #0x0
   45698:	ldr	w0, [x0, #32]
   4569c:	and	w0, w0, #0xe
   456a0:	ccmp	w0, #0xe, #0x0, ne  // ne = any
   456a4:	b.ne	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.any
   456a8:	mov	w0, #0x2                   	// #2
   456ac:	stp	w0, w26, [x25]
   456b0:	str	xzr, [x25, #8]
   456b4:	cmp	w23, #0x6
   456b8:	b.eq	456cc <aarch64_match_operands_constraint@@Base+0x304>  // b.none
   456bc:	ldr	x28, [x20, #8]
   456c0:	add	w23, w23, #0x1
   456c4:	add	x24, x24, #0x38
   456c8:	b	454e8 <aarch64_match_operands_constraint@@Base+0x120>
   456cc:	mov	w19, #0x1                   	// #1
   456d0:	mov	w0, w19
   456d4:	ldp	x19, x20, [sp, #16]
   456d8:	ldp	x21, x22, [sp, #32]
   456dc:	ldp	x23, x24, [sp, #48]
   456e0:	ldp	x25, x26, [sp, #64]
   456e4:	ldp	x27, x28, [sp, #80]
   456e8:	ldp	x29, x30, [sp], #144
   456ec:	ret
   456f0:	cmp	w0, #0x1
   456f4:	b.eq	45ab0 <aarch64_match_operands_constraint@@Base+0x6e8>  // b.none
   456f8:	cmp	w0, #0x2
   456fc:	b.ne	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.any
   45700:	sub	w0, w23, #0x2
   45704:	cmp	w0, #0x1
   45708:	b.hi	48a48 <aarch64_match_operands_constraint@@Base+0x3680>  // b.pmore
   4570c:	cmp	w19, #0xe
   45710:	b.eq	470e0 <aarch64_match_operands_constraint@@Base+0x1d18>  // b.none
   45714:	cmp	w19, #0xf
   45718:	b.ne	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.any
   4571c:	ldr	w0, [x24, #32]
   45720:	sub	w1, w0, #0x2
   45724:	cmp	w1, #0x3
   45728:	b.hi	474b0 <aarch64_match_operands_constraint@@Base+0x20e8>  // b.pmore
   4572c:	cmp	w0, #0x2
   45730:	b.eq	473a4 <aarch64_match_operands_constraint@@Base+0x1fdc>  // b.none
   45734:	cmp	w6, #0x1
   45738:	b.eq	473ec <aarch64_match_operands_constraint@@Base+0x2024>  // b.none
   4573c:	mov	x0, #0x3f                  	// #63
   45740:	mov	w6, w0
   45744:	ldr	x1, [x24, #40]
   45748:	str	w6, [sp, #104]
   4574c:	cmp	x1, x0
   45750:	b.ls	456c0 <aarch64_match_operands_constraint@@Base+0x2f8>  // b.plast
   45754:	cbz	x25, 475a4 <aarch64_match_operands_constraint@@Base+0x21dc>
   45758:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   4575c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   45760:	add	x1, x1, #0x788
   45764:	add	x0, x0, #0x5d8
   45768:	mov	w2, #0x5                   	// #5
   4576c:	bl	359e0 <dcgettext@plt>
   45770:	ldr	w6, [sp, #104]
   45774:	mov	w1, #0x6                   	// #6
   45778:	mov	w19, #0x0                   	// #0
   4577c:	ldp	x21, x22, [sp, #32]
   45780:	ldp	x23, x24, [sp, #48]
   45784:	ldp	x27, x28, [sp, #80]
   45788:	stp	w1, w26, [x25]
   4578c:	str	x0, [x25, #8]
   45790:	stp	wzr, w6, [x25, #16]
   45794:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   45798:	cmp	w0, #0xa
   4579c:	b.eq	45a50 <aarch64_match_operands_constraint@@Base+0x688>  // b.none
   457a0:	cmp	w0, #0xb
   457a4:	b.ne	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.any
   457a8:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   457ac:	sbfiz	x0, x6, #5, #32
   457b0:	sxtw	x10, w6
   457b4:	ldr	x1, [x2, #3776]
   457b8:	ldr	x8, [x24, #16]
   457bc:	add	x0, x1, x0
   457c0:	ldr	w9, [x0, #24]
   457c4:	cmp	w9, #0x2
   457c8:	b.eq	46ed0 <aarch64_match_operands_constraint@@Base+0x1b08>  // b.none
   457cc:	sub	w1, w19, #0x2b
   457d0:	cmp	w1, #0xa3
   457d4:	b.hi	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.pmore
   457d8:	adrp	x0, 62000 <xexit@@Base+0x6a80>
   457dc:	add	x0, x0, #0xb78
   457e0:	ldrh	w0, [x0, w1, uxtw #1]
   457e4:	adr	x1, 457f0 <aarch64_match_operands_constraint@@Base+0x428>
   457e8:	add	x0, x1, w0, sxth #2
   457ec:	br	x0
   457f0:	mov	x19, #0xffffffffffffff80    	// #-128
   457f4:	ldr	w28, [x24, #32]
   457f8:	cmp	w28, #0x5
   457fc:	b.ne	48b58 <aarch64_match_operands_constraint@@Base+0x3790>  // b.any
   45800:	ldrb	w0, [x4, #4]
   45804:	stp	x4, x3, [sp, #104]
   45808:	bl	35680 <aarch64_get_qualifier_esize@plt>
   4580c:	ubfiz	w7, w0, #2, #8
   45810:	mov	x1, #0xffffffffffffffff    	// #-1
   45814:	and	w2, w0, #0xff
   45818:	lsl	x0, x1, x7
   4581c:	cmp	w2, #0x1
   45820:	lsl	x0, x0, x7
   45824:	mvn	x0, x0
   45828:	ldr	x6, [x24, #16]
   4582c:	ldr	x1, [x24, #40]
   45830:	ldp	x4, x3, [sp, #104]
   45834:	b.eq	478c8 <aarch64_match_operands_constraint@@Base+0x2500>  // b.none
   45838:	tst	w1, #0xfffffff7
   4583c:	b.ne	47f10 <aarch64_match_operands_constraint@@Base+0x2b48>  // b.any
   45840:	cbz	w1, 47a3c <aarch64_match_operands_constraint@@Base+0x2674>
   45844:	lsr	x0, x0, x1
   45848:	bics	xzr, x6, x0
   4584c:	b.eq	4585c <aarch64_match_operands_constraint@@Base+0x494>  // b.none
   45850:	orn	x1, x6, x0
   45854:	cmp	x6, x1
   45858:	b.ne	47c3c <aarch64_match_operands_constraint@@Base+0x2874>  // b.any
   4585c:	sub	x6, x6, x19
   45860:	and	x0, x6, x0
   45864:	cmp	x0, #0xff
   45868:	b.ls	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.plast
   4586c:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   45870:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   45874:	add	x1, x1, #0xbd0
   45878:	add	x0, x0, #0x5d8
   4587c:	mov	w2, #0x5                   	// #5
   45880:	bl	359e0 <dcgettext@plt>
   45884:	cbz	x25, 488b4 <aarch64_match_operands_constraint@@Base+0x34ec>
   45888:	mov	w1, #0x9                   	// #9
   4588c:	mov	w19, #0x0                   	// #0
   45890:	ldp	x21, x22, [sp, #32]
   45894:	ldp	x23, x24, [sp, #48]
   45898:	ldp	x27, x28, [sp, #80]
   4589c:	stp	w1, w26, [x25]
   458a0:	str	x0, [x25, #8]
   458a4:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   458a8:	mov	x19, #0x0                   	// #0
   458ac:	b	457f4 <aarch64_match_operands_constraint@@Base+0x42c>
   458b0:	ldp	x21, x22, [sp, #32]
   458b4:	ldp	x23, x24, [sp, #48]
   458b8:	ldp	x27, x28, [sp, #80]
   458bc:	nop
   458c0:	mov	w19, #0x0                   	// #0
   458c4:	mov	w0, w19
   458c8:	ldp	x19, x20, [sp, #16]
   458cc:	ldp	x25, x26, [sp, #64]
   458d0:	ldp	x29, x30, [sp], #144
   458d4:	ret
   458d8:	mov	w19, #0x0                   	// #0
   458dc:	ldp	x21, x22, [sp, #32]
   458e0:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   458e4:	sub	w19, w19, #0xcb
   458e8:	tst	w19, #0xfffffffd
   458ec:	b.ne	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.any
   458f0:	ldr	x0, [x28, #120]
   458f4:	ldrb	w1, [x24, #16]
   458f8:	ubfx	w0, w0, #24, #3
   458fc:	ubfx	x1, x1, #5, #3
   45900:	cmp	w1, w0
   45904:	b.eq	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.none
   45908:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   4590c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   45910:	add	x1, x1, #0x670
   45914:	add	x0, x0, #0x5d8
   45918:	mov	w2, #0x5                   	// #5
   4591c:	bl	359e0 <dcgettext@plt>
   45920:	cbz	x25, 4791c <aarch64_match_operands_constraint@@Base+0x2554>
   45924:	mov	w1, #0x9                   	// #9
   45928:	mov	w19, #0x0                   	// #0
   4592c:	ldp	x21, x22, [sp, #32]
   45930:	ldp	x23, x24, [sp, #48]
   45934:	ldp	x27, x28, [sp, #80]
   45938:	stp	w1, w26, [x25]
   4593c:	str	x0, [x25, #8]
   45940:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   45944:	mov	x0, x28
   45948:	bl	35170 <aarch64_num_of_operands@plt>
   4594c:	cmp	w0, #0x0
   45950:	b.le	459dc <aarch64_match_operands_constraint@@Base+0x614>
   45954:	ldrb	w2, [x20, #28]
   45958:	ldrb	w1, [sp, #128]
   4595c:	cmp	w2, w1
   45960:	b.ne	45640 <aarch64_match_operands_constraint@@Base+0x278>  // b.any
   45964:	cmp	w0, #0x1
   45968:	b.eq	459dc <aarch64_match_operands_constraint@@Base+0x614>  // b.none
   4596c:	ldrb	w2, [sp, #129]
   45970:	ldrb	w1, [x20, #84]
   45974:	cmp	w2, w1
   45978:	b.ne	45640 <aarch64_match_operands_constraint@@Base+0x278>  // b.any
   4597c:	cmp	w0, #0x2
   45980:	b.eq	459dc <aarch64_match_operands_constraint@@Base+0x614>  // b.none
   45984:	ldrb	w2, [sp, #130]
   45988:	ldrb	w1, [x20, #140]
   4598c:	cmp	w2, w1
   45990:	b.ne	45640 <aarch64_match_operands_constraint@@Base+0x278>  // b.any
   45994:	cmp	w0, #0x3
   45998:	b.eq	459dc <aarch64_match_operands_constraint@@Base+0x614>  // b.none
   4599c:	ldrb	w2, [sp, #131]
   459a0:	ldrb	w1, [x20, #196]
   459a4:	cmp	w2, w1
   459a8:	b.ne	45640 <aarch64_match_operands_constraint@@Base+0x278>  // b.any
   459ac:	cmp	w0, #0x4
   459b0:	b.eq	459dc <aarch64_match_operands_constraint@@Base+0x614>  // b.none
   459b4:	ldrb	w2, [sp, #132]
   459b8:	ldrb	w1, [x20, #252]
   459bc:	cmp	w2, w1
   459c0:	b.ne	45640 <aarch64_match_operands_constraint@@Base+0x278>  // b.any
   459c4:	cmp	w0, #0x5
   459c8:	b.eq	459dc <aarch64_match_operands_constraint@@Base+0x614>  // b.none
   459cc:	ldrb	w1, [x20, #308]
   459d0:	ldrb	w0, [sp, #133]
   459d4:	cmp	w1, w0
   459d8:	b.ne	45640 <aarch64_match_operands_constraint@@Base+0x278>  // b.any
   459dc:	stp	x23, x24, [sp, #48]
   459e0:	ldr	x28, [x20, #8]
   459e4:	b	45464 <aarch64_match_operands_constraint@@Base+0x9c>
   459e8:	cmp	w19, #0x26
   459ec:	b.eq	47224 <aarch64_match_operands_constraint@@Base+0x1e5c>  // b.none
   459f0:	ldr	x0, [x28, #120]
   459f4:	cmp	w19, #0x24
   459f8:	ubfx	w0, w0, #24, #3
   459fc:	b.eq	46f44 <aarch64_match_operands_constraint@@Base+0x1b7c>  // b.none
   45a00:	sub	w19, w19, #0x25
   45a04:	cmp	w19, #0x1
   45a08:	b.hi	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.pmore
   45a0c:	sub	w1, w0, #0x1
   45a10:	cmp	w1, #0x3
   45a14:	b.hi	488dc <aarch64_match_operands_constraint@@Base+0x3514>  // b.pmore
   45a18:	ldrb	w1, [x24, #16]
   45a1c:	ubfx	x1, x1, #5, #3
   45a20:	cmp	w1, w0
   45a24:	b.eq	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.none
   45a28:	cbz	x25, 47714 <aarch64_match_operands_constraint@@Base+0x234c>
   45a2c:	mov	w1, #0x8                   	// #8
   45a30:	mov	w19, #0x0                   	// #0
   45a34:	ldp	x21, x22, [sp, #32]
   45a38:	ldp	x23, x24, [sp, #48]
   45a3c:	ldp	x27, x28, [sp, #80]
   45a40:	stp	w1, w26, [x25]
   45a44:	str	xzr, [x25, #8]
   45a48:	str	w0, [x25, #16]
   45a4c:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   45a50:	ldr	w1, [x28, #16]
   45a54:	ldrb	w8, [x24, #28]
   45a58:	cmp	w1, #0x3f
   45a5c:	b.hi	45a88 <aarch64_match_operands_constraint@@Base+0x6c0>  // b.pmore
   45a60:	mov	x2, #0x1                   	// #1
   45a64:	mov	x0, #0x6d00000000000000    	// #7854277750134145024
   45a68:	lsl	x2, x2, x1
   45a6c:	tst	x2, x0
   45a70:	b.ne	471a4 <aarch64_match_operands_constraint@@Base+0x1ddc>  // b.any
   45a74:	mov	x0, #0x280000              	// #2621440
   45a78:	movk	x0, #0x8040, lsl #48
   45a7c:	tst	x2, x0
   45a80:	b.ne	471e4 <aarch64_match_operands_constraint@@Base+0x1e1c>  // b.any
   45a84:	tbnz	x2, #55, 45d50 <aarch64_match_operands_constraint@@Base+0x988>
   45a88:	tbz	w8, #1, 45d5c <aarch64_match_operands_constraint@@Base+0x994>
   45a8c:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   45a90:	add	x3, x3, #0xd50
   45a94:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   45a98:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   45a9c:	add	x3, x3, #0x1a0
   45aa0:	add	x1, x1, #0xb60
   45aa4:	add	x0, x0, #0x6d8
   45aa8:	mov	w2, #0x658                 	// #1624
   45aac:	bl	35ac0 <__assert_fail@plt>
   45ab0:	cmp	w19, #0xd
   45ab4:	b.eq	47080 <aarch64_match_operands_constraint@@Base+0x1cb8>  // b.none
   45ab8:	cmp	w19, #0x9
   45abc:	b.eq	47014 <aarch64_match_operands_constraint@@Base+0x1c4c>  // b.none
   45ac0:	sub	w6, w6, #0x3
   45ac4:	cmp	w6, #0x1
   45ac8:	b.hi	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.pmore
   45acc:	mov	x0, x24
   45ad0:	stp	x4, x3, [sp, #104]
   45ad4:	bl	35740 <aarch64_stack_pointer_p@plt>
   45ad8:	mov	w19, w0
   45adc:	ldp	x4, x3, [sp, #104]
   45ae0:	cbnz	w0, 456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   45ae4:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   45ae8:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   45aec:	add	x1, x1, #0x600
   45af0:	add	x0, x0, #0x5d8
   45af4:	mov	w2, #0x5                   	// #5
   45af8:	bl	359e0 <dcgettext@plt>
   45afc:	cbz	x25, 48140 <aarch64_match_operands_constraint@@Base+0x2d78>
   45b00:	mov	w1, #0x9                   	// #9
   45b04:	ldp	x21, x22, [sp, #32]
   45b08:	ldp	x23, x24, [sp, #48]
   45b0c:	ldp	x27, x28, [sp, #80]
   45b10:	stp	w1, w26, [x25]
   45b14:	str	x0, [x25, #8]
   45b18:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   45b1c:	cmp	w19, #0x60
   45b20:	b.ne	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.any
   45b24:	cbnz	w26, 489fc <aarch64_match_operands_constraint@@Base+0x3634>
   45b28:	ldr	w0, [x20, #80]
   45b2c:	add	x6, x20, #0x50
   45b30:	cmp	w0, #0x3b
   45b34:	b.ne	489fc <aarch64_match_operands_constraint@@Base+0x3634>  // b.any
   45b38:	ldr	w0, [x24, #16]
   45b3c:	sub	w2, w0, #0x19
   45b40:	sub	w1, w0, #0x3
   45b44:	cmp	w2, #0x1
   45b48:	ccmp	w1, #0x1, #0x0, hi  // hi = pmore
   45b4c:	b.hi	47398 <aarch64_match_operands_constraint@@Base+0x1fd0>  // b.pmore
   45b50:	ldr	x0, [x6, #16]
   45b54:	cmp	x0, #0x1
   45b58:	b.le	456c0 <aarch64_match_operands_constraint@@Base+0x2f8>
   45b5c:	cbz	x25, 475fc <aarch64_match_operands_constraint@@Base+0x2234>
   45b60:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   45b64:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   45b68:	add	x1, x1, #0x908
   45b6c:	add	x0, x0, #0x5d8
   45b70:	mov	w2, #0x5                   	// #5
   45b74:	bl	359e0 <dcgettext@plt>
   45b78:	adrp	x1, 63000 <xexit@@Base+0x7a80>
   45b7c:	mov	w19, #0x0                   	// #0
   45b80:	ldr	d0, [x1, #1216]
   45b84:	mov	x1, #0x6                   	// #6
   45b88:	stp	x1, x0, [x25]
   45b8c:	str	d0, [x25, #16]
   45b90:	ldp	x21, x22, [sp, #32]
   45b94:	ldp	x23, x24, [sp, #48]
   45b98:	ldp	x27, x28, [sp, #80]
   45b9c:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   45ba0:	ldr	w0, [x24, #16]
   45ba4:	cmp	w0, #0x7
   45ba8:	b.ls	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.plast
   45bac:	ldr	w0, [x1, #20]
   45bb0:	cbz	w0, 4707c <aarch64_match_operands_constraint@@Base+0x1cb4>
   45bb4:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   45bb8:	ldr	w6, [x1, #24]
   45bbc:	ldr	x2, [x2, #3944]
   45bc0:	add	x0, x2, w0, uxtw #3
   45bc4:	ldr	w0, [x0, #4]
   45bc8:	cbz	w6, 45bec <aarch64_match_operands_constraint@@Base+0x824>
   45bcc:	add	x6, x2, w6, uxtw #3
   45bd0:	ldr	w1, [x1, #28]
   45bd4:	ldr	w6, [x6, #4]
   45bd8:	add	w0, w0, w6
   45bdc:	cbz	w1, 45bec <aarch64_match_operands_constraint@@Base+0x824>
   45be0:	add	x1, x2, w1, uxtw #3
   45be4:	ldr	w1, [x1, #4]
   45be8:	add	w0, w0, w1
   45bec:	sub	w1, w0, #0x1
   45bf0:	cmp	w1, #0x1e
   45bf4:	b.hi	4707c <aarch64_match_operands_constraint@@Base+0x1cb4>  // b.pmore
   45bf8:	cmp	w0, #0x3
   45bfc:	b.ne	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.any
   45c00:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   45c04:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   45c08:	add	x1, x1, #0x688
   45c0c:	add	x0, x0, #0x5d8
   45c10:	mov	w2, #0x5                   	// #5
   45c14:	bl	359e0 <dcgettext@plt>
   45c18:	cbz	x25, 47bc0 <aarch64_match_operands_constraint@@Base+0x27f8>
   45c1c:	mov	w1, #0x9                   	// #9
   45c20:	mov	w19, #0x0                   	// #0
   45c24:	ldp	x21, x22, [sp, #32]
   45c28:	ldp	x23, x24, [sp, #48]
   45c2c:	ldp	x27, x28, [sp, #80]
   45c30:	stp	w1, w26, [x25]
   45c34:	str	x0, [x25, #8]
   45c38:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   45c3c:	ldr	w0, [x28, #20]
   45c40:	mov	w28, #0x10                  	// #16
   45c44:	cmp	w0, #0x50
   45c48:	b.eq	47260 <aarch64_match_operands_constraint@@Base+0x1e98>  // b.none
   45c4c:	mov	w0, w6
   45c50:	str	w6, [sp, #104]
   45c54:	stp	x4, x3, [sp, #112]
   45c58:	bl	35680 <aarch64_get_qualifier_esize@plt>
   45c5c:	and	w1, w0, #0xff
   45c60:	ldr	w6, [sp, #104]
   45c64:	str	w6, [sp, #104]
   45c68:	udiv	w28, w28, w1
   45c6c:	mov	w0, w6
   45c70:	bl	358f0 <aarch64_get_qualifier_nelem@plt>
   45c74:	and	w0, w0, #0xff
   45c78:	ldr	w6, [sp, #104]
   45c7c:	cmp	w0, #0x1
   45c80:	sub	w28, w28, #0x1
   45c84:	ldp	x4, x3, [sp, #112]
   45c88:	b.ne	48798 <aarch64_match_operands_constraint@@Base+0x33d0>  // b.any
   45c8c:	ldr	x0, [x24, #24]
   45c90:	tbnz	x0, #63, 45cfc <aarch64_match_operands_constraint@@Base+0x934>
   45c94:	cmp	x0, w28, sxtw
   45c98:	b.gt	45cfc <aarch64_match_operands_constraint@@Base+0x934>
   45c9c:	cmp	w19, #0x22
   45ca0:	ccmp	w6, #0x6, #0x0, eq  // eq = none
   45ca4:	b.ne	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.any
   45ca8:	ldr	w0, [x24, #16]
   45cac:	cmp	w0, #0xf
   45cb0:	b.ls	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.plast
   45cb4:	cbz	x25, 478b4 <aarch64_match_operands_constraint@@Base+0x24ec>
   45cb8:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   45cbc:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   45cc0:	add	x1, x1, #0xd38
   45cc4:	add	x0, x0, #0x5d8
   45cc8:	mov	w2, #0x5                   	// #5
   45ccc:	bl	359e0 <dcgettext@plt>
   45cd0:	adrp	x1, 63000 <xexit@@Base+0x7a80>
   45cd4:	mov	w19, #0x0                   	// #0
   45cd8:	ldp	x21, x22, [sp, #32]
   45cdc:	ldr	d0, [x1, #1224]
   45ce0:	mov	w1, #0x6                   	// #6
   45ce4:	ldp	x23, x24, [sp, #48]
   45ce8:	ldp	x27, x28, [sp, #80]
   45cec:	stp	w1, w26, [x25]
   45cf0:	str	x0, [x25, #8]
   45cf4:	str	d0, [x25, #16]
   45cf8:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   45cfc:	cbz	x25, 47000 <aarch64_match_operands_constraint@@Base+0x1c38>
   45d00:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   45d04:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   45d08:	add	x1, x1, #0x658
   45d0c:	add	x0, x0, #0x5d8
   45d10:	mov	w2, #0x5                   	// #5
   45d14:	bl	359e0 <dcgettext@plt>
   45d18:	mov	w1, #0x6                   	// #6
   45d1c:	mov	w19, #0x0                   	// #0
   45d20:	ldp	x21, x22, [sp, #32]
   45d24:	ldp	x23, x24, [sp, #48]
   45d28:	stp	w1, w26, [x25]
   45d2c:	str	x0, [x25, #8]
   45d30:	stp	wzr, w28, [x25, #16]
   45d34:	ldp	x27, x28, [sp, #80]
   45d38:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   45d3c:	mov	w19, #0x1                   	// #1
   45d40:	ldp	x21, x22, [sp, #32]
   45d44:	ldp	x23, x24, [sp, #48]
   45d48:	ldp	x27, x28, [sp, #80]
   45d4c:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   45d50:	and	w9, w8, #0x6
   45d54:	cmp	w9, #0x2
   45d58:	b.eq	47664 <aarch64_match_operands_constraint@@Base+0x229c>  // b.none
   45d5c:	sub	w19, w19, #0x4f
   45d60:	cmp	w19, #0x44
   45d64:	b.hi	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.pmore
   45d68:	adrp	x0, 62000 <xexit@@Base+0x6a80>
   45d6c:	add	x0, x0, #0xcc0
   45d70:	ldrh	w0, [x0, w19, uxtw #1]
   45d74:	adr	x1, 45d80 <aarch64_match_operands_constraint@@Base+0x9b8>
   45d78:	add	x0, x1, w0, sxth #2
   45d7c:	br	x0
   45d80:	mov	w0, #0x100                 	// #256
   45d84:	ldr	w1, [x24, #24]
   45d88:	cbz	w1, 48b34 <aarch64_match_operands_constraint@@Base+0x376c>
   45d8c:	tbz	w8, #2, 48b10 <aarch64_match_operands_constraint@@Base+0x3748>
   45d90:	ldr	w2, [x24, #32]
   45d94:	mov	w1, #0x1                   	// #1
   45d98:	lsl	w1, w1, w2
   45d9c:	tst	w1, w0
   45da0:	b.eq	45db0 <aarch64_match_operands_constraint@@Base+0x9e8>  // b.none
   45da4:	ldr	x0, [x24, #40]
   45da8:	cmp	x0, #0x3
   45dac:	b.ls	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.plast
   45db0:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   45db4:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   45db8:	add	x1, x1, #0x808
   45dbc:	add	x0, x0, #0x5d8
   45dc0:	mov	w2, #0x5                   	// #5
   45dc4:	bl	359e0 <dcgettext@plt>
   45dc8:	cbz	x25, 47af8 <aarch64_match_operands_constraint@@Base+0x2730>
   45dcc:	mov	w1, #0x9                   	// #9
   45dd0:	mov	w19, #0x0                   	// #0
   45dd4:	ldp	x21, x22, [sp, #32]
   45dd8:	ldp	x23, x24, [sp, #48]
   45ddc:	ldp	x27, x28, [sp, #80]
   45de0:	stp	w1, w26, [x25]
   45de4:	str	x0, [x25, #8]
   45de8:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   45dec:	mov	w0, #0x20                  	// #32
   45df0:	b	45d84 <aarch64_match_operands_constraint@@Base+0x9bc>
   45df4:	mov	x1, #0x1f                  	// #31
   45df8:	mov	x0, #0x0                   	// #0
   45dfc:	ldr	w2, [x24, #24]
   45e00:	cbnz	w2, 48aec <aarch64_match_operands_constraint@@Base+0x3724>
   45e04:	tbz	w8, #2, 48ac8 <aarch64_match_operands_constraint@@Base+0x3700>
   45e08:	ldr	x6, [x22, #4032]
   45e0c:	add	x7, x7, x7, lsl #1
   45e10:	mov	w2, #0x1                   	// #1
   45e14:	ldrb	w8, [x24, #36]
   45e18:	add	x6, x6, x7, lsl #4
   45e1c:	tst	x8, #0x3
   45e20:	ldr	w6, [x6, #16]
   45e24:	ubfx	x6, x6, #5, #3
   45e28:	lsl	w2, w2, w6
   45e2c:	sxtw	x6, w2
   45e30:	mul	x19, x6, x0
   45e34:	mul	x28, x6, x1
   45e38:	b.ne	4778c <aarch64_match_operands_constraint@@Base+0x23c4>  // b.any
   45e3c:	ldrsw	x0, [x24, #20]
   45e40:	cmp	x19, x0
   45e44:	ccmp	x28, x0, #0x1, le
   45e48:	b.ge	477f0 <aarch64_match_operands_constraint@@Base+0x2428>  // b.tcont
   45e4c:	cbz	x25, 477dc <aarch64_match_operands_constraint@@Base+0x2414>
   45e50:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   45e54:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   45e58:	add	x1, x1, #0x6f8
   45e5c:	add	x0, x0, #0x5d8
   45e60:	mov	w2, #0x5                   	// #5
   45e64:	bl	359e0 <dcgettext@plt>
   45e68:	fmov	d0, x19
   45e6c:	mov	w1, #0x6                   	// #6
   45e70:	mov	w19, #0x0                   	// #0
   45e74:	mov	v0.d[1], x28
   45e78:	ldp	x21, x22, [sp, #32]
   45e7c:	ldp	x23, x24, [sp, #48]
   45e80:	xtn	v0.2s, v0.2d
   45e84:	ldp	x27, x28, [sp, #80]
   45e88:	stp	w1, w26, [x25]
   45e8c:	str	x0, [x25, #8]
   45e90:	str	d0, [x25, #16]
   45e94:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   45e98:	mov	w0, #0x1100                	// #4352
   45e9c:	ldr	w1, [x24, #24]
   45ea0:	cbz	w1, 4873c <aarch64_match_operands_constraint@@Base+0x3374>
   45ea4:	tbz	w8, #2, 48718 <aarch64_match_operands_constraint@@Base+0x3350>
   45ea8:	ldr	x2, [x22, #4032]
   45eac:	add	x1, x7, x7, lsl #1
   45eb0:	add	x1, x2, x1, lsl #4
   45eb4:	ldr	w1, [x1, #16]
   45eb8:	tbz	w1, #8, 45ec8 <aarch64_match_operands_constraint@@Base+0xb00>
   45ebc:	ldr	w1, [x24, #20]
   45ec0:	cmp	w1, #0x1f
   45ec4:	b.eq	480dc <aarch64_match_operands_constraint@@Base+0x2d14>  // b.none
   45ec8:	ldr	w2, [x24, #32]
   45ecc:	mov	w1, #0x1                   	// #1
   45ed0:	lsl	w1, w1, w2
   45ed4:	tst	w1, w0
   45ed8:	b.eq	45efc <aarch64_match_operands_constraint@@Base+0xb34>  // b.none
   45edc:	ldr	x0, [x22, #4032]
   45ee0:	add	x7, x7, x7, lsl #1
   45ee4:	ldr	x1, [x24, #40]
   45ee8:	add	x0, x0, x7, lsl #4
   45eec:	ldr	w0, [x0, #16]
   45ef0:	ubfx	x0, x0, #5, #3
   45ef4:	cmp	x1, x0
   45ef8:	b.eq	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.none
   45efc:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   45f00:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   45f04:	add	x1, x1, #0x808
   45f08:	add	x0, x0, #0x5d8
   45f0c:	mov	w2, #0x5                   	// #5
   45f10:	bl	359e0 <dcgettext@plt>
   45f14:	cbz	x25, 47e9c <aarch64_match_operands_constraint@@Base+0x2ad4>
   45f18:	mov	w1, #0x9                   	// #9
   45f1c:	mov	w19, #0x0                   	// #0
   45f20:	ldp	x21, x22, [sp, #32]
   45f24:	ldp	x23, x24, [sp, #48]
   45f28:	ldp	x27, x28, [sp, #80]
   45f2c:	stp	w1, w26, [x25]
   45f30:	str	x0, [x25, #8]
   45f34:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   45f38:	mov	w0, #0x20                  	// #32
   45f3c:	b	45e9c <aarch64_match_operands_constraint@@Base+0xad4>
   45f40:	mov	x1, #0x7                   	// #7
   45f44:	mov	x0, #0xfffffffffffffff8    	// #-8
   45f48:	ldr	w2, [x24, #24]
   45f4c:	cbnz	w2, 48aa4 <aarch64_match_operands_constraint@@Base+0x36dc>
   45f50:	tbz	w8, #2, 48a80 <aarch64_match_operands_constraint@@Base+0x36b8>
   45f54:	ldr	x8, [x22, #4032]
   45f58:	add	x7, x7, x7, lsl #1
   45f5c:	ldrb	w2, [x24, #36]
   45f60:	ldr	w6, [x24, #20]
   45f64:	add	x8, x8, x7, lsl #4
   45f68:	and	w7, w2, #0x1
   45f6c:	ldr	w2, [x8, #16]
   45f70:	ubfx	x2, x2, #5, #3
   45f74:	add	w8, w2, #0x1
   45f78:	cbz	w6, 47500 <aarch64_match_operands_constraint@@Base+0x2138>
   45f7c:	cbz	w7, 47510 <aarch64_match_operands_constraint@@Base+0x2148>
   45f80:	ldr	w7, [x24, #32]
   45f84:	cmp	w7, #0xf
   45f88:	b.ne	47510 <aarch64_match_operands_constraint@@Base+0x2148>  // b.any
   45f8c:	mul	x19, x8, x0
   45f90:	sxtw	x6, w6
   45f94:	mul	x28, x8, x1
   45f98:	cmp	x19, x6
   45f9c:	ccmp	x28, x6, #0x1, le
   45fa0:	b.ge	48068 <aarch64_match_operands_constraint@@Base+0x2ca0>  // b.tcont
   45fa4:	cbz	x25, 47968 <aarch64_match_operands_constraint@@Base+0x25a0>
   45fa8:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   45fac:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   45fb0:	add	x1, x1, #0x6f8
   45fb4:	add	x0, x0, #0x5d8
   45fb8:	mov	w2, #0x5                   	// #5
   45fbc:	bl	359e0 <dcgettext@plt>
   45fc0:	fmov	d0, x19
   45fc4:	mov	w1, #0x6                   	// #6
   45fc8:	mov	w19, #0x0                   	// #0
   45fcc:	mov	v0.d[1], x28
   45fd0:	ldp	x21, x22, [sp, #32]
   45fd4:	ldp	x23, x24, [sp, #48]
   45fd8:	xtn	v0.2s, v0.2d
   45fdc:	ldp	x27, x28, [sp, #80]
   45fe0:	stp	w1, w26, [x25]
   45fe4:	str	x0, [x25, #8]
   45fe8:	str	d0, [x25, #16]
   45fec:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   45ff0:	mov	x1, #0x3f                  	// #63
   45ff4:	mov	x0, #0x0                   	// #0
   45ff8:	b	45dfc <aarch64_match_operands_constraint@@Base+0xa34>
   45ffc:	mov	x1, #0xff                  	// #255
   46000:	mov	x0, #0xffffffffffffff00    	// #-256
   46004:	b	45f48 <aarch64_match_operands_constraint@@Base+0xb80>
   46008:	mov	x1, #0x7                   	// #7
   4600c:	mov	x0, #0xfffffffffffffff8    	// #-8
   46010:	b	45dfc <aarch64_match_operands_constraint@@Base+0xa34>
   46014:	cmp	w26, #0x1
   46018:	b.ne	48540 <aarch64_match_operands_constraint@@Base+0x3178>  // b.any
   4601c:	ldr	w0, [x24, #24]
   46020:	cbz	w0, 47824 <aarch64_match_operands_constraint@@Base+0x245c>
   46024:	ldr	w0, [x24, #20]
   46028:	cmp	w0, #0x1e
   4602c:	b.ls	456c0 <aarch64_match_operands_constraint@@Base+0x2f8>  // b.plast
   46030:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   46034:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   46038:	add	x1, x1, #0x748
   4603c:	add	x0, x0, #0x5d8
   46040:	mov	w2, #0x5                   	// #5
   46044:	bl	359e0 <dcgettext@plt>
   46048:	cbz	x25, 48518 <aarch64_match_operands_constraint@@Base+0x3150>
   4604c:	mov	x1, #0x9                   	// #9
   46050:	mov	w19, #0x0                   	// #0
   46054:	movk	x1, #0x1, lsl #32
   46058:	stp	x1, x0, [x25]
   4605c:	ldp	x21, x22, [sp, #32]
   46060:	ldp	x23, x24, [sp, #48]
   46064:	ldp	x27, x28, [sp, #80]
   46068:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   4606c:	mov	w0, #0x1000                	// #4096
   46070:	b	45d84 <aarch64_match_operands_constraint@@Base+0x9bc>
   46074:	ldr	w0, [x24, #24]
   46078:	cbz	w0, 48c28 <aarch64_match_operands_constraint@@Base+0x3860>
   4607c:	tbz	w8, #2, 48c04 <aarch64_match_operands_constraint@@Base+0x383c>
   46080:	ldr	x0, [x22, #4032]
   46084:	ldr	w0, [x0, #6160]
   46088:	tbnz	w0, #8, 48c4c <aarch64_match_operands_constraint@@Base+0x3884>
   4608c:	ldr	w0, [x24, #32]
   46090:	cmp	w0, #0x5
   46094:	b.ne	48be0 <aarch64_match_operands_constraint@@Base+0x3818>  // b.any
   46098:	ldrb	w0, [x24, #36]
   4609c:	tbz	w0, #0, 456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   460a0:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   460a4:	add	x3, x3, #0xd50
   460a8:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   460ac:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   460b0:	add	x3, x3, #0x1a0
   460b4:	add	x1, x1, #0xb60
   460b8:	add	x0, x0, #0x8a0
   460bc:	mov	w2, #0x77a                 	// #1914
   460c0:	bl	35ac0 <__assert_fail@plt>
   460c4:	mov	x1, #0x1f                  	// #31
   460c8:	mov	x0, #0xffffffffffffffe0    	// #-32
   460cc:	b	45f48 <aarch64_match_operands_constraint@@Base+0xb80>
   460d0:	ldr	x1, [x22, #4032]
   460d4:	add	x7, x7, x7, lsl #1
   460d8:	ldr	x2, [x24, #16]
   460dc:	add	x1, x1, x7, lsl #4
   460e0:	ldr	w0, [x1, #16]
   460e4:	tbz	w0, #3, 460f4 <aarch64_match_operands_constraint@@Base+0xd2c>
   460e8:	tst	x2, #0x3
   460ec:	b.ne	4809c <aarch64_match_operands_constraint@@Base+0x2cd4>  // b.any
   460f0:	asr	x2, x2, #2
   460f4:	ldr	w0, [x1, #20]
   460f8:	cbz	w0, 4707c <aarch64_match_operands_constraint@@Base+0x1cb4>
   460fc:	adrp	x6, a6000 <aarch64_operands@@Base+0x16bd0>
   46100:	ldr	w7, [x1, #24]
   46104:	ldr	x6, [x6, #3944]
   46108:	add	x0, x6, w0, uxtw #3
   4610c:	ldr	w0, [x0, #4]
   46110:	cbz	w7, 46134 <aarch64_match_operands_constraint@@Base+0xd6c>
   46114:	add	x7, x6, w7, uxtw #3
   46118:	ldr	w1, [x1, #28]
   4611c:	ldr	w7, [x7, #4]
   46120:	add	w0, w0, w7
   46124:	cbz	w1, 46134 <aarch64_match_operands_constraint@@Base+0xd6c>
   46128:	add	x1, x6, w1, uxtw #3
   4612c:	ldr	w1, [x1, #4]
   46130:	add	w0, w0, w1
   46134:	sub	w0, w0, #0x1
   46138:	cmp	w0, #0x1e
   4613c:	b.hi	4707c <aarch64_match_operands_constraint@@Base+0x1cb4>  // b.pmore
   46140:	mov	x1, #0x1                   	// #1
   46144:	lsl	x0, x1, x0
   46148:	neg	x1, x0
   4614c:	cmp	x1, x2
   46150:	ccmp	x0, x2, #0x4, le
   46154:	b.gt	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   46158:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   4615c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   46160:	add	x1, x1, #0x7b8
   46164:	add	x0, x0, #0x5d8
   46168:	mov	w2, #0x5                   	// #5
   4616c:	bl	359e0 <dcgettext@plt>
   46170:	cbz	x25, 480c8 <aarch64_match_operands_constraint@@Base+0x2d00>
   46174:	mov	w1, #0x9                   	// #9
   46178:	mov	w19, #0x0                   	// #0
   4617c:	ldp	x21, x22, [sp, #32]
   46180:	ldp	x23, x24, [sp, #48]
   46184:	ldp	x27, x28, [sp, #80]
   46188:	stp	w1, w26, [x25]
   4618c:	str	x0, [x25, #8]
   46190:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   46194:	ldr	w1, [x24, #20]
   46198:	mov	x2, #0x1ff0                	// #8176
   4619c:	sxtw	x0, w1
   461a0:	add	x0, x0, #0x1, lsl #12
   461a4:	cmp	x0, x2
   461a8:	b.ls	47b58 <aarch64_match_operands_constraint@@Base+0x2790>  // b.plast
   461ac:	cbz	x25, 47df4 <aarch64_match_operands_constraint@@Base+0x2a2c>
   461b0:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   461b4:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   461b8:	add	x1, x1, #0x6f8
   461bc:	add	x0, x0, #0x5d8
   461c0:	mov	w2, #0x5                   	// #5
   461c4:	bl	359e0 <dcgettext@plt>
   461c8:	adrp	x1, 63000 <xexit@@Base+0x7a80>
   461cc:	mov	w19, #0x0                   	// #0
   461d0:	ldp	x21, x22, [sp, #32]
   461d4:	ldr	d0, [x1, #1184]
   461d8:	mov	w1, #0x6                   	// #6
   461dc:	ldp	x23, x24, [sp, #48]
   461e0:	ldp	x27, x28, [sp, #80]
   461e4:	stp	w1, w26, [x25]
   461e8:	str	x0, [x25, #8]
   461ec:	str	d0, [x25, #16]
   461f0:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   461f4:	mov	w0, w6
   461f8:	stp	x4, x3, [sp, #104]
   461fc:	bl	35680 <aarch64_get_qualifier_esize@plt>
   46200:	ldrsw	x1, [x24, #20]
   46204:	ldp	x4, x3, [sp, #104]
   46208:	tbnz	x1, #63, 478a8 <aarch64_match_operands_constraint@@Base+0x24e0>
   4620c:	cmp	x1, #0xff
   46210:	b.gt	46224 <aarch64_match_operands_constraint@@Base+0xe5c>
   46214:	and	x0, x0, #0xff
   46218:	sdiv	x2, x1, x0
   4621c:	msub	x0, x2, x0, x1
   46220:	cbnz	x0, 456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   46224:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   46228:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   4622c:	add	x1, x1, #0x710
   46230:	add	x0, x0, #0x5d8
   46234:	mov	w2, #0x5                   	// #5
   46238:	bl	359e0 <dcgettext@plt>
   4623c:	cbz	x25, 4812c <aarch64_match_operands_constraint@@Base+0x2d64>
   46240:	mov	w1, #0x9                   	// #9
   46244:	mov	w19, #0x0                   	// #0
   46248:	ldp	x21, x22, [sp, #32]
   4624c:	ldp	x23, x24, [sp, #48]
   46250:	ldp	x27, x28, [sp, #80]
   46254:	stp	w1, w26, [x25]
   46258:	str	x0, [x25, #8]
   4625c:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   46260:	ldrsw	x0, [x24, #20]
   46264:	add	x0, x0, #0x100
   46268:	cmp	x0, #0x1ff
   4626c:	b.ls	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.plast
   46270:	cbz	x25, 47fc8 <aarch64_match_operands_constraint@@Base+0x2c00>
   46274:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   46278:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   4627c:	add	x1, x1, #0x6f8
   46280:	add	x0, x0, #0x5d8
   46284:	mov	w2, #0x5                   	// #5
   46288:	bl	359e0 <dcgettext@plt>
   4628c:	movi	d0, #0xffffffff00
   46290:	mov	w1, #0x6                   	// #6
   46294:	mov	w19, #0x0                   	// #0
   46298:	ldp	x21, x22, [sp, #32]
   4629c:	ldp	x23, x24, [sp, #48]
   462a0:	ldp	x27, x28, [sp, #80]
   462a4:	stp	w1, w26, [x25]
   462a8:	str	x0, [x25, #8]
   462ac:	str	d0, [x25, #16]
   462b0:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   462b4:	ldr	w1, [x24, #20]
   462b8:	sxtw	x0, w1
   462bc:	add	x0, x0, #0x400
   462c0:	cmp	x0, #0x7f0
   462c4:	b.ls	47b8c <aarch64_match_operands_constraint@@Base+0x27c4>  // b.plast
   462c8:	cbz	x25, 47e08 <aarch64_match_operands_constraint@@Base+0x2a40>
   462cc:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   462d0:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   462d4:	add	x1, x1, #0x6f8
   462d8:	add	x0, x0, #0x5d8
   462dc:	mov	w2, #0x5                   	// #5
   462e0:	bl	359e0 <dcgettext@plt>
   462e4:	adrp	x1, 63000 <xexit@@Base+0x7a80>
   462e8:	mov	w19, #0x0                   	// #0
   462ec:	ldp	x21, x22, [sp, #32]
   462f0:	ldr	d0, [x1, #1176]
   462f4:	mov	w1, #0x6                   	// #6
   462f8:	ldp	x23, x24, [sp, #48]
   462fc:	ldp	x27, x28, [sp, #80]
   46300:	stp	w1, w26, [x25]
   46304:	str	x0, [x25, #8]
   46308:	str	d0, [x25, #16]
   4630c:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   46310:	mov	w0, w6
   46314:	stp	x4, x3, [sp, #104]
   46318:	bl	35680 <aarch64_get_qualifier_esize@plt>
   4631c:	and	w1, w0, #0xff
   46320:	ldrsw	x2, [x24, #20]
   46324:	neg	w6, w1, lsl #6
   46328:	lsl	w28, w1, #6
   4632c:	sub	w28, w28, w1
   46330:	cmp	x2, w6, sxtw
   46334:	b.lt	476a4 <aarch64_match_operands_constraint@@Base+0x22dc>  // b.tstop
   46338:	cmp	x2, w28, sxtw
   4633c:	ldp	x4, x3, [sp, #104]
   46340:	b.gt	476a4 <aarch64_match_operands_constraint@@Base+0x22dc>
   46344:	and	x0, x0, #0xff
   46348:	sdiv	x6, x2, x0
   4634c:	msub	x0, x6, x0, x2
   46350:	cbz	x0, 456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   46354:	cbz	x25, 489b0 <aarch64_match_operands_constraint@@Base+0x35e8>
   46358:	mov	w0, #0x7                   	// #7
   4635c:	mov	w19, #0x0                   	// #0
   46360:	ldp	x21, x22, [sp, #32]
   46364:	ldp	x23, x24, [sp, #48]
   46368:	ldp	x27, x28, [sp, #80]
   4636c:	stp	w0, w26, [x25]
   46370:	str	xzr, [x25, #8]
   46374:	str	w1, [x25, #16]
   46378:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   4637c:	mov	w0, w6
   46380:	stp	x4, x3, [sp, #104]
   46384:	bl	35680 <aarch64_get_qualifier_esize@plt>
   46388:	ldr	x6, [x24, #40]
   4638c:	and	w2, w0, #0xff
   46390:	ldp	x4, x3, [sp, #104]
   46394:	cbnz	x6, 47a54 <aarch64_match_operands_constraint@@Base+0x268c>
   46398:	ldr	w2, [x24, #32]
   4639c:	cmp	w2, #0xd
   463a0:	b.hi	463b8 <aarch64_match_operands_constraint@@Base+0xff0>  // b.pmore
   463a4:	mov	x0, #0x1                   	// #1
   463a8:	mov	x1, #0x3120                	// #12576
   463ac:	lsl	x0, x0, x2
   463b0:	tst	x0, x1
   463b4:	b.ne	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.any
   463b8:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   463bc:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   463c0:	add	x1, x1, #0x798
   463c4:	add	x0, x0, #0x5d8
   463c8:	mov	w2, #0x5                   	// #5
   463cc:	bl	359e0 <dcgettext@plt>
   463d0:	cbz	x25, 48334 <aarch64_match_operands_constraint@@Base+0x2f6c>
   463d4:	mov	w1, #0x9                   	// #9
   463d8:	mov	w19, #0x0                   	// #0
   463dc:	ldp	x21, x22, [sp, #32]
   463e0:	ldp	x23, x24, [sp, #48]
   463e4:	ldp	x27, x28, [sp, #80]
   463e8:	stp	w1, w26, [x25]
   463ec:	str	x0, [x25, #8]
   463f0:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   463f4:	mov	w0, w6
   463f8:	stp	x4, x3, [sp, #104]
   463fc:	bl	35680 <aarch64_get_qualifier_esize@plt>
   46400:	ldrsw	x1, [x24, #20]
   46404:	and	w6, w0, #0xff
   46408:	ubfiz	w28, w0, #12, #8
   4640c:	sub	w28, w28, w6
   46410:	tbnz	x1, #63, 47624 <aarch64_match_operands_constraint@@Base+0x225c>
   46414:	cmp	x1, w28, sxtw
   46418:	ldp	x4, x3, [sp, #104]
   4641c:	b.gt	47624 <aarch64_match_operands_constraint@@Base+0x225c>
   46420:	and	x0, x0, #0xff
   46424:	sdiv	x2, x1, x0
   46428:	msub	x0, x2, x0, x1
   4642c:	cbz	x0, 456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   46430:	cbz	x25, 48760 <aarch64_match_operands_constraint@@Base+0x3398>
   46434:	mov	w0, #0x7                   	// #7
   46438:	mov	w19, #0x0                   	// #0
   4643c:	ldp	x21, x22, [sp, #32]
   46440:	ldp	x23, x24, [sp, #48]
   46444:	ldp	x27, x28, [sp, #80]
   46448:	stp	w0, w26, [x25]
   4644c:	str	xzr, [x25, #8]
   46450:	str	w6, [x25, #16]
   46454:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   46458:	ldr	w1, [x24, #20]
   4645c:	mov	x2, #0x1ff8                	// #8184
   46460:	sxtw	x0, w1
   46464:	add	x0, x0, #0x1, lsl #12
   46468:	cmp	x0, x2
   4646c:	b.ls	47bd4 <aarch64_match_operands_constraint@@Base+0x280c>  // b.plast
   46470:	cbz	x25, 47c78 <aarch64_match_operands_constraint@@Base+0x28b0>
   46474:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   46478:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   4647c:	add	x1, x1, #0x6f8
   46480:	add	x0, x0, #0x5d8
   46484:	mov	w2, #0x5                   	// #5
   46488:	bl	359e0 <dcgettext@plt>
   4648c:	adrp	x1, 63000 <xexit@@Base+0x7a80>
   46490:	mov	w19, #0x0                   	// #0
   46494:	ldp	x21, x22, [sp, #32]
   46498:	ldr	d0, [x1, #1168]
   4649c:	mov	w1, #0x6                   	// #6
   464a0:	ldp	x23, x24, [sp, #48]
   464a4:	ldp	x27, x28, [sp, #80]
   464a8:	stp	w1, w26, [x25]
   464ac:	str	x0, [x25, #8]
   464b0:	str	d0, [x25, #16]
   464b4:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   464b8:	ldr	x1, [x22, #4032]
   464bc:	add	x7, x7, x7, lsl #1
   464c0:	add	x1, x1, x7, lsl #4
   464c4:	ldr	w6, [x1, #20]
   464c8:	cbz	w6, 4707c <aarch64_match_operands_constraint@@Base+0x1cb4>
   464cc:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   464d0:	ldr	w2, [x1, #24]
   464d4:	ldr	x0, [x0, #3944]
   464d8:	add	x6, x0, w6, uxtw #3
   464dc:	ldr	w28, [x6, #4]
   464e0:	cbz	w2, 46504 <aarch64_match_operands_constraint@@Base+0x113c>
   464e4:	add	x2, x0, w2, uxtw #3
   464e8:	ldr	w1, [x1, #28]
   464ec:	ldr	w2, [x2, #4]
   464f0:	add	w28, w28, w2
   464f4:	cbz	w1, 46504 <aarch64_match_operands_constraint@@Base+0x113c>
   464f8:	add	x0, x0, w1, uxtw #3
   464fc:	ldr	w0, [x0, #4]
   46500:	add	w28, w28, w0
   46504:	sub	w0, w28, #0x1
   46508:	cmp	w0, #0x1e
   4650c:	b.hi	4707c <aarch64_match_operands_constraint@@Base+0x1cb4>  // b.pmore
   46510:	mov	x6, #0x1                   	// #1
   46514:	lsl	x0, x6, x28
   46518:	cmp	x0, x8
   4651c:	b.hi	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.pmore
   46520:	cbz	x25, 48018 <aarch64_match_operands_constraint@@Base+0x2c50>
   46524:	mov	w2, #0x5                   	// #5
   46528:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   4652c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   46530:	add	x1, x1, #0x908
   46534:	add	x0, x0, #0x5d8
   46538:	bl	359e0 <dcgettext@plt>
   4653c:	mov	x6, #0x1                   	// #1
   46540:	mov	w2, #0x6                   	// #6
   46544:	lsl	w1, w6, w28
   46548:	mov	w19, #0x0                   	// #0
   4654c:	sub	w1, w1, #0x1
   46550:	ldp	x21, x22, [sp, #32]
   46554:	ldp	x23, x24, [sp, #48]
   46558:	ldp	x27, x28, [sp, #80]
   4655c:	stp	w2, w26, [x25]
   46560:	str	x0, [x25, #8]
   46564:	stp	wzr, w1, [x25, #16]
   46568:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   4656c:	cmp	x8, #0x3f0
   46570:	b.ls	47d58 <aarch64_match_operands_constraint@@Base+0x2990>  // b.plast
   46574:	cbz	x25, 48004 <aarch64_match_operands_constraint@@Base+0x2c3c>
   46578:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   4657c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   46580:	add	x1, x1, #0x908
   46584:	add	x0, x0, #0x5d8
   46588:	mov	w2, #0x5                   	// #5
   4658c:	bl	359e0 <dcgettext@plt>
   46590:	adrp	x1, 63000 <xexit@@Base+0x7a80>
   46594:	mov	w19, #0x0                   	// #0
   46598:	ldp	x21, x22, [sp, #32]
   4659c:	ldr	d0, [x1, #1192]
   465a0:	mov	w1, #0x6                   	// #6
   465a4:	ldp	x23, x24, [sp, #48]
   465a8:	ldp	x27, x28, [sp, #80]
   465ac:	stp	w1, w26, [x25]
   465b0:	str	x0, [x25, #8]
   465b4:	str	d0, [x25, #16]
   465b8:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   465bc:	mov	w0, w6
   465c0:	stp	x4, x3, [sp, #104]
   465c4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   465c8:	ldr	x1, [x24, #16]
   465cc:	ubfiz	w28, w0, #3, #8
   465d0:	sub	w28, w28, #0x1
   465d4:	tbnz	x1, #63, 465e4 <aarch64_match_operands_constraint@@Base+0x121c>
   465d8:	cmp	x1, w28, sxtw
   465dc:	ldp	x4, x3, [sp, #104]
   465e0:	b.le	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   465e4:	cbz	x25, 47fdc <aarch64_match_operands_constraint@@Base+0x2c14>
   465e8:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   465ec:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   465f0:	add	x1, x1, #0x908
   465f4:	add	x0, x0, #0x5d8
   465f8:	mov	w2, #0x5                   	// #5
   465fc:	bl	359e0 <dcgettext@plt>
   46600:	mov	w1, #0x6                   	// #6
   46604:	mov	w19, #0x0                   	// #0
   46608:	ldp	x21, x22, [sp, #32]
   4660c:	ldp	x23, x24, [sp, #48]
   46610:	stp	w1, w26, [x25]
   46614:	str	x0, [x25, #8]
   46618:	stp	wzr, w28, [x25, #16]
   4661c:	ldp	x27, x28, [sp, #80]
   46620:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   46624:	cmp	w19, #0xb2
   46628:	mov	w1, #0x38                  	// #56
   4662c:	cset	w0, eq  // eq = none
   46630:	stp	x4, x3, [sp, #104]
   46634:	add	w0, w0, #0x1
   46638:	sub	w0, w26, w0
   4663c:	umaddl	x0, w0, w1, x4
   46640:	ldrb	w0, [x0, #4]
   46644:	bl	35680 <aarch64_get_qualifier_esize@plt>
   46648:	ubfiz	w28, w0, #3, #8
   4664c:	ldr	x1, [x24, #16]
   46650:	cmp	x1, #0x0
   46654:	b.le	46664 <aarch64_match_operands_constraint@@Base+0x129c>
   46658:	cmp	x1, w28, sxtw
   4665c:	ldp	x4, x3, [sp, #104]
   46660:	b.le	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   46664:	cbz	x25, 48054 <aarch64_match_operands_constraint@@Base+0x2c8c>
   46668:	mov	w2, #0x5                   	// #5
   4666c:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   46670:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   46674:	add	x1, x1, #0x908
   46678:	add	x0, x0, #0x5d8
   4667c:	bl	359e0 <dcgettext@plt>
   46680:	mov	w2, #0x6                   	// #6
   46684:	mov	w1, #0x1                   	// #1
   46688:	mov	w19, #0x0                   	// #0
   4668c:	ldp	x21, x22, [sp, #32]
   46690:	ldp	x23, x24, [sp, #48]
   46694:	stp	w2, w26, [x25]
   46698:	str	x0, [x25, #8]
   4669c:	stp	w1, w28, [x25, #16]
   466a0:	ldp	x27, x28, [sp, #80]
   466a4:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   466a8:	ldrb	w0, [x24, #24]
   466ac:	tbz	w0, #0, 48198 <aarch64_match_operands_constraint@@Base+0x2dd0>
   466b0:	cmp	x8, #0xff
   466b4:	b.ls	48154 <aarch64_match_operands_constraint@@Base+0x2d8c>  // b.plast
   466b8:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   466bc:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   466c0:	add	x1, x1, #0x7b8
   466c4:	add	x0, x0, #0x5d8
   466c8:	mov	w2, #0x5                   	// #5
   466cc:	bl	359e0 <dcgettext@plt>
   466d0:	cbz	x25, 4835c <aarch64_match_operands_constraint@@Base+0x2f94>
   466d4:	mov	w1, #0x9                   	// #9
   466d8:	mov	w19, #0x0                   	// #0
   466dc:	ldp	x21, x22, [sp, #32]
   466e0:	ldp	x23, x24, [sp, #48]
   466e4:	ldp	x27, x28, [sp, #80]
   466e8:	stp	w1, w26, [x25]
   466ec:	str	x0, [x25, #8]
   466f0:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   466f4:	cmp	x8, #0x5a
   466f8:	mov	x0, #0x10e                 	// #270
   466fc:	ccmp	x8, x0, #0x4, ne  // ne = any
   46700:	b.eq	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.none
   46704:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   46708:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   4670c:	add	x1, x1, #0xaa8
   46710:	add	x0, x0, #0x5d8
   46714:	mov	w2, #0x5                   	// #5
   46718:	bl	359e0 <dcgettext@plt>
   4671c:	cbz	x25, 488a0 <aarch64_match_operands_constraint@@Base+0x34d8>
   46720:	mov	w1, #0x9                   	// #9
   46724:	mov	w19, #0x0                   	// #0
   46728:	ldp	x21, x22, [sp, #32]
   4672c:	ldp	x23, x24, [sp, #48]
   46730:	ldp	x27, x28, [sp, #80]
   46734:	stp	w1, w26, [x25]
   46738:	str	x0, [x25, #8]
   4673c:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   46740:	ldrb	w0, [x24, #24]
   46744:	tbz	w0, #0, 4887c <aarch64_match_operands_constraint@@Base+0x34b4>
   46748:	mov	x0, #0xffffffffffff0000    	// #-65536
   4674c:	movk	x0, #0xc100, lsl #16
   46750:	add	x8, x8, x0
   46754:	tst	x8, #0xfffffffffeffffff
   46758:	b.eq	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.none
   4675c:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   46760:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   46764:	add	x1, x1, #0xc28
   46768:	add	x0, x0, #0x5d8
   4676c:	mov	w2, #0x5                   	// #5
   46770:	bl	359e0 <dcgettext@plt>
   46774:	cbz	x25, 48868 <aarch64_match_operands_constraint@@Base+0x34a0>
   46778:	mov	w1, #0x9                   	// #9
   4677c:	mov	w19, #0x0                   	// #0
   46780:	ldp	x21, x22, [sp, #32]
   46784:	ldp	x23, x24, [sp, #48]
   46788:	ldp	x27, x28, [sp, #80]
   4678c:	stp	w1, w26, [x25]
   46790:	str	x0, [x25, #8]
   46794:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   46798:	ldrb	w0, [x24, #24]
   4679c:	tbz	w0, #0, 48cd0 <aarch64_match_operands_constraint@@Base+0x3908>
   467a0:	cmp	x8, #0x0
   467a4:	mov	x0, #0x3f800000            	// #1065353216
   467a8:	ccmp	x8, x0, #0x4, ne  // ne = any
   467ac:	b.eq	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.none
   467b0:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   467b4:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   467b8:	add	x1, x1, #0xc50
   467bc:	add	x0, x0, #0x5d8
   467c0:	mov	w2, #0x5                   	// #5
   467c4:	bl	359e0 <dcgettext@plt>
   467c8:	cbz	x25, 48cbc <aarch64_match_operands_constraint@@Base+0x38f4>
   467cc:	mov	w1, #0x9                   	// #9
   467d0:	mov	w19, #0x0                   	// #0
   467d4:	ldp	x21, x22, [sp, #32]
   467d8:	ldp	x23, x24, [sp, #48]
   467dc:	ldp	x27, x28, [sp, #80]
   467e0:	stp	w1, w26, [x25]
   467e4:	str	x0, [x25, #8]
   467e8:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   467ec:	mov	w0, w6
   467f0:	stp	x4, x3, [sp, #104]
   467f4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   467f8:	ldr	x1, [x24, #16]
   467fc:	ubfiz	w28, w0, #3, #8
   46800:	cmp	x1, #0x0
   46804:	b.le	46814 <aarch64_match_operands_constraint@@Base+0x144c>
   46808:	cmp	x1, w28, sxtw
   4680c:	ldp	x4, x3, [sp, #104]
   46810:	b.le	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   46814:	cbz	x25, 47ff0 <aarch64_match_operands_constraint@@Base+0x2c28>
   46818:	mov	w2, #0x5                   	// #5
   4681c:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   46820:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   46824:	add	x1, x1, #0x908
   46828:	add	x0, x0, #0x5d8
   4682c:	bl	359e0 <dcgettext@plt>
   46830:	mov	w2, #0x6                   	// #6
   46834:	mov	w1, #0x1                   	// #1
   46838:	mov	w19, #0x0                   	// #0
   4683c:	ldp	x21, x22, [sp, #32]
   46840:	ldp	x23, x24, [sp, #48]
   46844:	stp	w2, w26, [x25]
   46848:	str	x0, [x25, #8]
   4684c:	stp	w1, w28, [x25, #16]
   46850:	ldp	x27, x28, [sp, #80]
   46854:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   46858:	cmp	w6, #0x21
   4685c:	b.eq	47cfc <aarch64_match_operands_constraint@@Base+0x2934>  // b.none
   46860:	cmp	w6, #0x22
   46864:	b.ne	476ec <aarch64_match_operands_constraint@@Base+0x2324>  // b.any
   46868:	ldr	w0, [x24, #32]
   4686c:	cmp	w0, #0x1
   46870:	b.ne	484c8 <aarch64_match_operands_constraint@@Base+0x3100>  // b.any
   46874:	cmp	w26, #0x1
   46878:	b.ne	486e0 <aarch64_match_operands_constraint@@Base+0x3318>  // b.any
   4687c:	ldrb	w0, [x4, #4]
   46880:	stp	x4, x3, [sp, #104]
   46884:	bl	35680 <aarch64_get_qualifier_esize@plt>
   46888:	and	w0, w0, #0xff
   4688c:	cmp	w0, #0x8
   46890:	ldp	x4, x3, [sp, #104]
   46894:	b.eq	48398 <aarch64_match_operands_constraint@@Base+0x2fd0>  // b.none
   46898:	ldr	x0, [x24, #16]
   4689c:	add	x0, x0, #0x80
   468a0:	cmp	x0, #0x17f
   468a4:	b.ls	47c8c <aarch64_match_operands_constraint@@Base+0x28c4>  // b.plast
   468a8:	cbz	x25, 48224 <aarch64_match_operands_constraint@@Base+0x2e5c>
   468ac:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   468b0:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   468b4:	add	x1, x1, #0x908
   468b8:	add	x0, x0, #0x5d8
   468bc:	mov	w2, #0x5                   	// #5
   468c0:	bl	359e0 <dcgettext@plt>
   468c4:	adrp	x1, 63000 <xexit@@Base+0x7a80>
   468c8:	mov	w19, #0x0                   	// #0
   468cc:	ldr	d0, [x1, #1200]
   468d0:	mov	x1, #0x6                   	// #6
   468d4:	movk	x1, #0x1, lsl #32
   468d8:	stp	x1, x0, [x25]
   468dc:	str	d0, [x25, #16]
   468e0:	ldp	x21, x22, [sp, #32]
   468e4:	ldp	x23, x24, [sp, #48]
   468e8:	ldp	x27, x28, [sp, #80]
   468ec:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   468f0:	ldr	w2, [x24, #32]
   468f4:	cmp	w2, #0x5
   468f8:	b.ne	47e30 <aarch64_match_operands_constraint@@Base+0x2a68>  // b.any
   468fc:	ldr	x0, [x24, #40]
   46900:	cmp	x0, #0x0
   46904:	ccmp	x0, #0xc, #0x4, ne  // ne = any
   46908:	b.ne	48238 <aarch64_match_operands_constraint@@Base+0x2e70>  // b.any
   4690c:	cmp	x8, #0xfff
   46910:	b.ls	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.plast
   46914:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   46918:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   4691c:	add	x1, x1, #0x7b8
   46920:	add	x0, x0, #0x5d8
   46924:	bl	359e0 <dcgettext@plt>
   46928:	cbz	x25, 482e8 <aarch64_match_operands_constraint@@Base+0x2f20>
   4692c:	mov	w1, #0x9                   	// #9
   46930:	mov	w19, #0x0                   	// #0
   46934:	ldp	x21, x22, [sp, #32]
   46938:	ldp	x23, x24, [sp, #48]
   4693c:	ldp	x27, x28, [sp, #80]
   46940:	stp	w1, w26, [x25]
   46944:	str	x0, [x25, #8]
   46948:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   4694c:	ldrb	w0, [x4, #4]
   46950:	stp	x4, x3, [sp, #104]
   46954:	bl	35680 <aarch64_get_qualifier_esize@plt>
   46958:	and	w1, w0, #0xff
   4695c:	cmp	w26, #0x1
   46960:	ldr	x0, [x24, #16]
   46964:	ldp	x4, x3, [sp, #104]
   46968:	b.ne	48978 <aarch64_match_operands_constraint@@Base+0x35b0>  // b.any
   4696c:	ldr	w2, [x28, #20]
   46970:	cmp	w2, #0x24
   46974:	b.eq	46984 <aarch64_match_operands_constraint@@Base+0x15bc>  // b.none
   46978:	cmp	w2, #0x25
   4697c:	b.ne	47728 <aarch64_match_operands_constraint@@Base+0x2360>  // b.any
   46980:	mvn	x0, x0
   46984:	cmp	w1, #0x4
   46988:	mov	x2, #0x0                   	// #0
   4698c:	cset	w1, eq  // eq = none
   46990:	stp	x4, x3, [sp, #104]
   46994:	bl	35a40 <aarch64_wide_constant_p@plt>
   46998:	mov	w19, w0
   4699c:	cbz	w0, 482fc <aarch64_match_operands_constraint@@Base+0x2f34>
   469a0:	ldr	x28, [x20, #8]
   469a4:	ldp	x4, x3, [sp, #104]
   469a8:	b	456c0 <aarch64_match_operands_constraint@@Base+0x2f8>
   469ac:	cmp	x8, #0x5a
   469b0:	mov	x1, #0x10e                 	// #270
   469b4:	ccmp	x8, #0x0, #0x4, ne  // ne = any
   469b8:	cset	w0, ne  // ne = any
   469bc:	cmp	x8, #0xb4
   469c0:	ccmp	x8, x1, #0x4, ne  // ne = any
   469c4:	csel	w0, w0, wzr, ne  // ne = any
   469c8:	cbz	w0, 456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   469cc:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   469d0:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   469d4:	add	x1, x1, #0xa80
   469d8:	add	x0, x0, #0x5d8
   469dc:	mov	w2, #0x5                   	// #5
   469e0:	bl	359e0 <dcgettext@plt>
   469e4:	cbz	x25, 4881c <aarch64_match_operands_constraint@@Base+0x3454>
   469e8:	mov	w1, #0x9                   	// #9
   469ec:	mov	w19, #0x0                   	// #0
   469f0:	ldp	x21, x22, [sp, #32]
   469f4:	ldp	x23, x24, [sp, #48]
   469f8:	ldp	x27, x28, [sp, #80]
   469fc:	stp	w1, w26, [x25]
   46a00:	str	x0, [x25, #8]
   46a04:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   46a08:	ldr	x2, [x22, #4032]
   46a0c:	add	x7, x7, x7, lsl #1
   46a10:	add	x2, x2, x7, lsl #4
   46a14:	ldr	w0, [x2, #20]
   46a18:	cbz	w0, 4707c <aarch64_match_operands_constraint@@Base+0x1cb4>
   46a1c:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   46a20:	ldr	w6, [x2, #24]
   46a24:	ldr	x1, [x1, #3944]
   46a28:	add	x0, x1, w0, uxtw #3
   46a2c:	ldr	w0, [x0, #4]
   46a30:	cbz	w6, 46a54 <aarch64_match_operands_constraint@@Base+0x168c>
   46a34:	add	x6, x1, w6, uxtw #3
   46a38:	ldr	w2, [x2, #28]
   46a3c:	ldr	w6, [x6, #4]
   46a40:	add	w0, w0, w6
   46a44:	cbz	w2, 46a54 <aarch64_match_operands_constraint@@Base+0x168c>
   46a48:	add	x1, x1, w2, uxtw #3
   46a4c:	ldr	w1, [x1, #4]
   46a50:	add	w0, w0, w1
   46a54:	sub	w0, w0, #0x1
   46a58:	cmp	w0, #0x1e
   46a5c:	b.hi	4707c <aarch64_match_operands_constraint@@Base+0x1cb4>  // b.pmore
   46a60:	mov	x1, #0x1                   	// #1
   46a64:	lsl	x2, x1, x0
   46a68:	neg	x6, x2
   46a6c:	cmp	x8, x6
   46a70:	ccmp	x8, x2, #0x0, ge  // ge = tcont
   46a74:	b.lt	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.tstop
   46a78:	cbz	x25, 47e1c <aarch64_match_operands_constraint@@Base+0x2a54>
   46a7c:	lsl	w20, w1, w0
   46a80:	mov	w2, #0x5                   	// #5
   46a84:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   46a88:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   46a8c:	add	x1, x1, #0x908
   46a90:	add	x0, x0, #0x5d8
   46a94:	bl	359e0 <dcgettext@plt>
   46a98:	mov	w19, #0x0                   	// #0
   46a9c:	neg	w1, w20
   46aa0:	mov	w2, #0x6                   	// #6
   46aa4:	sub	w20, w20, #0x1
   46aa8:	ldp	x21, x22, [sp, #32]
   46aac:	ldp	x23, x24, [sp, #48]
   46ab0:	ldp	x27, x28, [sp, #80]
   46ab4:	stp	w2, w26, [x25]
   46ab8:	str	x0, [x25, #8]
   46abc:	stp	w1, w20, [x25, #16]
   46ac0:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   46ac4:	ldrb	w0, [x4, #4]
   46ac8:	stp	x4, x3, [sp, #104]
   46acc:	bl	35680 <aarch64_get_qualifier_esize@plt>
   46ad0:	and	w1, w0, #0xff
   46ad4:	ldr	w2, [x28, #20]
   46ad8:	ldr	x0, [x24, #16]
   46adc:	cmp	w2, #0x2a
   46ae0:	mov	x2, #0x0                   	// #0
   46ae4:	cinv	x0, x0, eq  // eq = none
   46ae8:	bl	35400 <aarch64_logical_immediate_p@plt>
   46aec:	mov	w19, w0
   46af0:	ldp	x4, x3, [sp, #104]
   46af4:	cbnz	w0, 456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   46af8:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   46afc:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   46b00:	add	x1, x1, #0x7b8
   46b04:	add	x0, x0, #0x5d8
   46b08:	mov	w2, #0x5                   	// #5
   46b0c:	bl	359e0 <dcgettext@plt>
   46b10:	cbz	x25, 48d2c <aarch64_match_operands_constraint@@Base+0x3964>
   46b14:	mov	w1, #0x9                   	// #9
   46b18:	ldp	x21, x22, [sp, #32]
   46b1c:	ldp	x23, x24, [sp, #48]
   46b20:	ldp	x27, x28, [sp, #80]
   46b24:	stp	w1, w26, [x25]
   46b28:	str	x0, [x25, #8]
   46b2c:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   46b30:	cbz	x8, 456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   46b34:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   46b38:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   46b3c:	add	x1, x1, #0xa68
   46b40:	add	x0, x0, #0x5d8
   46b44:	mov	w2, #0x5                   	// #5
   46b48:	bl	359e0 <dcgettext@plt>
   46b4c:	cbz	x25, 485f8 <aarch64_match_operands_constraint@@Base+0x3230>
   46b50:	mov	w1, #0x9                   	// #9
   46b54:	mov	w19, #0x0                   	// #0
   46b58:	ldp	x21, x22, [sp, #32]
   46b5c:	ldp	x23, x24, [sp, #48]
   46b60:	ldp	x27, x28, [sp, #80]
   46b64:	stp	w1, w26, [x25]
   46b68:	str	x0, [x25, #8]
   46b6c:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   46b70:	ldrb	w0, [x4, #4]
   46b74:	stp	x4, x3, [sp, #104]
   46b78:	bl	35680 <aarch64_get_qualifier_esize@plt>
   46b7c:	and	w1, w0, #0xff
   46b80:	ldr	x6, [x24, #16]
   46b84:	mov	x2, #0x0                   	// #0
   46b88:	mvn	x0, x6
   46b8c:	bl	35400 <aarch64_logical_immediate_p@plt>
   46b90:	mov	w19, w0
   46b94:	ldp	x4, x3, [sp, #104]
   46b98:	cbnz	w0, 456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   46b9c:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   46ba0:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   46ba4:	add	x1, x1, #0x7b8
   46ba8:	add	x0, x0, #0x5d8
   46bac:	mov	w2, #0x5                   	// #5
   46bb0:	bl	359e0 <dcgettext@plt>
   46bb4:	cbz	x25, 48928 <aarch64_match_operands_constraint@@Base+0x3560>
   46bb8:	mov	w1, #0x9                   	// #9
   46bbc:	ldp	x21, x22, [sp, #32]
   46bc0:	ldp	x23, x24, [sp, #48]
   46bc4:	ldp	x27, x28, [sp, #80]
   46bc8:	stp	w1, w26, [x25]
   46bcc:	str	x0, [x25, #8]
   46bd0:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   46bd4:	cmp	w26, #0x2
   46bd8:	b.ne	485c0 <aarch64_match_operands_constraint@@Base+0x31f8>  // b.any
   46bdc:	ldurb	w0, [x24, #-52]
   46be0:	stp	x4, x3, [sp, #104]
   46be4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   46be8:	ubfiz	x0, x0, #3, #5
   46bec:	ldr	x1, [x24, #16]
   46bf0:	cmp	x1, x0
   46bf4:	b.eq	469a0 <aarch64_match_operands_constraint@@Base+0x15d8>  // b.none
   46bf8:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   46bfc:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   46c00:	add	x1, x1, #0x780
   46c04:	add	x0, x0, #0x5d8
   46c08:	mov	w2, #0x5                   	// #5
   46c0c:	bl	359e0 <dcgettext@plt>
   46c10:	cbz	x25, 483e8 <aarch64_match_operands_constraint@@Base+0x3020>
   46c14:	mov	x1, #0x9                   	// #9
   46c18:	mov	w19, #0x0                   	// #0
   46c1c:	movk	x1, #0x2, lsl #32
   46c20:	stp	x1, x0, [x25]
   46c24:	ldp	x21, x22, [sp, #32]
   46c28:	ldp	x23, x24, [sp, #48]
   46c2c:	ldp	x27, x28, [sp, #80]
   46c30:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   46c34:	cmp	w26, #0x1
   46c38:	b.ne	489d8 <aarch64_match_operands_constraint@@Base+0x3610>  // b.any
   46c3c:	ldr	w0, [x4]
   46c40:	cmp	w0, #0x1
   46c44:	b.ne	489d8 <aarch64_match_operands_constraint@@Base+0x3610>  // b.any
   46c48:	ldr	w19, [x24, #32]
   46c4c:	cmp	w19, #0x5
   46c50:	b.eq	479a4 <aarch64_match_operands_constraint@@Base+0x25dc>  // b.none
   46c54:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   46c58:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   46c5c:	add	x1, x1, #0x918
   46c60:	add	x0, x0, #0x5d8
   46c64:	mov	w2, #0x5                   	// #5
   46c68:	bl	359e0 <dcgettext@plt>
   46c6c:	cbz	x25, 482c0 <aarch64_match_operands_constraint@@Base+0x2ef8>
   46c70:	mov	x1, #0x9                   	// #9
   46c74:	mov	w19, #0x0                   	// #0
   46c78:	movk	x1, #0x1, lsl #32
   46c7c:	stp	x1, x0, [x25]
   46c80:	ldp	x21, x22, [sp, #32]
   46c84:	ldp	x23, x24, [sp, #48]
   46c88:	ldp	x27, x28, [sp, #80]
   46c8c:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   46c90:	cmp	w26, #0x1
   46c94:	b.ls	4859c <aarch64_match_operands_constraint@@Base+0x31d4>  // b.plast
   46c98:	ldur	w0, [x24, #-56]
   46c9c:	cmp	w0, #0x37
   46ca0:	b.ne	4859c <aarch64_match_operands_constraint@@Base+0x31d4>  // b.any
   46ca4:	ldr	w28, [x4]
   46ca8:	cmp	w28, #0x1
   46cac:	b.ne	4859c <aarch64_match_operands_constraint@@Base+0x31d4>  // b.any
   46cb0:	cmp	w9, #0x2
   46cb4:	b.ne	48578 <aarch64_match_operands_constraint@@Base+0x31b0>  // b.any
   46cb8:	ldr	x2, [x2, #3776]
   46cbc:	ldur	x6, [x24, #-40]
   46cc0:	add	x10, x2, x10, lsl #5
   46cc4:	add	x8, x8, x6
   46cc8:	ldr	w19, [x10, #4]
   46ccc:	cmp	x8, w19, uxtb
   46cd0:	b.le	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   46cd4:	str	x6, [sp, #96]
   46cd8:	cbz	x25, 48370 <aarch64_match_operands_constraint@@Base+0x2fa8>
   46cdc:	mov	w2, #0x5                   	// #5
   46ce0:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   46ce4:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   46ce8:	add	x1, x1, #0x908
   46cec:	add	x0, x0, #0x5d8
   46cf0:	bl	359e0 <dcgettext@plt>
   46cf4:	ldr	x6, [sp, #96]
   46cf8:	and	w1, w19, #0xff
   46cfc:	mov	w2, #0x6                   	// #6
   46d00:	mov	w19, #0x0                   	// #0
   46d04:	sub	w1, w1, w6
   46d08:	ldp	x21, x22, [sp, #32]
   46d0c:	ldp	x23, x24, [sp, #48]
   46d10:	stp	w2, w26, [x25]
   46d14:	str	x0, [x25, #8]
   46d18:	stp	w28, w1, [x25, #16]
   46d1c:	ldp	x27, x28, [sp, #80]
   46d20:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   46d24:	ldrb	w0, [x24, #24]
   46d28:	tbz	w0, #0, 48694 <aarch64_match_operands_constraint@@Base+0x32cc>
   46d2c:	and	x8, x8, #0xffffffffff7fffff
   46d30:	mov	x0, #0x3f000000            	// #1056964608
   46d34:	cmp	x8, x0
   46d38:	b.eq	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.none
   46d3c:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   46d40:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   46d44:	add	x1, x1, #0xc00
   46d48:	add	x0, x0, #0x5d8
   46d4c:	mov	w2, #0x5                   	// #5
   46d50:	bl	359e0 <dcgettext@plt>
   46d54:	cbz	x25, 48680 <aarch64_match_operands_constraint@@Base+0x32b8>
   46d58:	mov	w1, #0x9                   	// #9
   46d5c:	mov	w19, #0x0                   	// #0
   46d60:	ldp	x21, x22, [sp, #32]
   46d64:	ldp	x23, x24, [sp, #48]
   46d68:	ldp	x27, x28, [sp, #80]
   46d6c:	stp	w1, w26, [x25]
   46d70:	str	x0, [x25, #8]
   46d74:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   46d78:	ldr	w0, [x24, #32]
   46d7c:	cmp	w0, #0xe
   46d80:	b.ne	487d0 <aarch64_match_operands_constraint@@Base+0x3408>  // b.any
   46d84:	ldr	x0, [x24, #40]
   46d88:	sub	x0, x0, #0x1
   46d8c:	cmp	x0, #0xf
   46d90:	b.ls	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.plast
   46d94:	cbz	x25, 481fc <aarch64_match_operands_constraint@@Base+0x2e34>
   46d98:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   46d9c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   46da0:	add	x1, x1, #0xcc8
   46da4:	add	x0, x0, #0x5d8
   46da8:	mov	w2, #0x5                   	// #5
   46dac:	bl	359e0 <dcgettext@plt>
   46db0:	adrp	x1, 63000 <xexit@@Base+0x7a80>
   46db4:	mov	w19, #0x0                   	// #0
   46db8:	ldp	x21, x22, [sp, #32]
   46dbc:	ldr	d0, [x1, #1208]
   46dc0:	mov	w1, #0x6                   	// #6
   46dc4:	ldp	x23, x24, [sp, #48]
   46dc8:	ldp	x27, x28, [sp, #80]
   46dcc:	stp	w1, w26, [x25]
   46dd0:	str	x0, [x25, #8]
   46dd4:	str	d0, [x25, #16]
   46dd8:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   46ddc:	ldurb	w0, [x24, #-52]
   46de0:	stp	x4, x3, [sp, #104]
   46de4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   46de8:	ubfiz	w28, w0, #3, #8
   46dec:	ldr	x1, [x24, #16]
   46df0:	sub	w28, w28, #0x1
   46df4:	tbnz	x1, #63, 46e04 <aarch64_match_operands_constraint@@Base+0x1a3c>
   46df8:	cmp	x1, w28, sxtw
   46dfc:	ldp	x4, x3, [sp, #104]
   46e00:	b.le	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   46e04:	cbz	x25, 481d4 <aarch64_match_operands_constraint@@Base+0x2e0c>
   46e08:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   46e0c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   46e10:	add	x1, x1, #0x908
   46e14:	add	x0, x0, #0x5d8
   46e18:	mov	w2, #0x5                   	// #5
   46e1c:	bl	359e0 <dcgettext@plt>
   46e20:	mov	w1, #0x6                   	// #6
   46e24:	mov	w19, #0x0                   	// #0
   46e28:	ldp	x21, x22, [sp, #32]
   46e2c:	ldp	x23, x24, [sp, #48]
   46e30:	stp	w1, w26, [x25]
   46e34:	str	x0, [x25, #8]
   46e38:	stp	wzr, w28, [x25, #16]
   46e3c:	ldp	x27, x28, [sp, #80]
   46e40:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   46e44:	ldrb	w0, [x4, #4]
   46e48:	stp	x4, x3, [sp, #112]
   46e4c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   46e50:	and	w28, w0, #0xff
   46e54:	ldr	x6, [x24, #16]
   46e58:	mov	w1, w28
   46e5c:	mov	x2, #0x0                   	// #0
   46e60:	str	x6, [sp, #104]
   46e64:	mov	x0, x6
   46e68:	bl	35400 <aarch64_logical_immediate_p@plt>
   46e6c:	mov	w19, w0
   46e70:	ldp	x6, x4, [sp, #104]
   46e74:	ldr	x3, [sp, #120]
   46e78:	cbz	w0, 47b20 <aarch64_match_operands_constraint@@Base+0x2758>
   46e7c:	mov	w1, w28
   46e80:	mov	x0, x6
   46e84:	stp	x4, x3, [sp, #104]
   46e88:	bl	35540 <aarch64_sve_dupm_mov_immediate_p@plt>
   46e8c:	mov	w19, w0
   46e90:	ldp	x4, x3, [sp, #104]
   46e94:	cbnz	w0, 456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   46e98:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   46e9c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   46ea0:	add	x1, x1, #0xc78
   46ea4:	add	x0, x0, #0x5d8
   46ea8:	mov	w2, #0x5                   	// #5
   46eac:	bl	359e0 <dcgettext@plt>
   46eb0:	cbz	x25, 486cc <aarch64_match_operands_constraint@@Base+0x3304>
   46eb4:	mov	w1, #0x9                   	// #9
   46eb8:	ldp	x21, x22, [sp, #32]
   46ebc:	ldp	x23, x24, [sp, #48]
   46ec0:	ldp	x27, x28, [sp, #80]
   46ec4:	stp	w1, w26, [x25]
   46ec8:	str	x0, [x25, #8]
   46ecc:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   46ed0:	mov	x0, x1
   46ed4:	lsl	x1, x10, #5
   46ed8:	add	x12, x0, x1
   46edc:	ldr	w11, [x0, x1]
   46ee0:	ldr	w12, [x12, #4]
   46ee4:	cmp	x8, w11, sxtw
   46ee8:	b.lt	46ef4 <aarch64_match_operands_constraint@@Base+0x1b2c>  // b.tstop
   46eec:	cmp	x8, w12, sxtw
   46ef0:	b.le	457cc <aarch64_match_operands_constraint@@Base+0x404>
   46ef4:	str	w11, [sp, #96]
   46ef8:	str	w12, [sp, #104]
   46efc:	cbz	x25, 473f8 <aarch64_match_operands_constraint@@Base+0x2030>
   46f00:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   46f04:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   46f08:	add	x1, x1, #0x908
   46f0c:	add	x0, x0, #0x5d8
   46f10:	mov	w2, #0x5                   	// #5
   46f14:	bl	359e0 <dcgettext@plt>
   46f18:	ldr	w11, [sp, #96]
   46f1c:	mov	w1, #0x6                   	// #6
   46f20:	ldr	w12, [sp, #104]
   46f24:	mov	w19, #0x0                   	// #0
   46f28:	ldp	x21, x22, [sp, #32]
   46f2c:	ldp	x23, x24, [sp, #48]
   46f30:	ldp	x27, x28, [sp, #80]
   46f34:	stp	w1, w26, [x25]
   46f38:	str	x0, [x25, #8]
   46f3c:	stp	w11, w12, [x25, #16]
   46f40:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   46f44:	sub	w1, w0, #0x1
   46f48:	cmp	w1, #0x3
   46f4c:	b.hi	48c84 <aarch64_match_operands_constraint@@Base+0x38bc>  // b.pmore
   46f50:	cmp	w0, #0x1
   46f54:	b.eq	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.none
   46f58:	ldrb	w1, [x24, #16]
   46f5c:	ubfx	x1, x1, #5, #3
   46f60:	cmp	w1, w0
   46f64:	b.eq	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.none
   46f68:	cbz	x25, 47908 <aarch64_match_operands_constraint@@Base+0x2540>
   46f6c:	mov	w1, #0x8                   	// #8
   46f70:	mov	w19, #0x0                   	// #0
   46f74:	ldp	x21, x22, [sp, #32]
   46f78:	ldp	x23, x24, [sp, #48]
   46f7c:	ldp	x27, x28, [sp, #80]
   46f80:	stp	w1, w26, [x25]
   46f84:	str	xzr, [x25, #8]
   46f88:	str	w0, [x25, #16]
   46f8c:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   46f90:	mov	w0, w6
   46f94:	stp	x4, x3, [sp, #104]
   46f98:	bl	35680 <aarch64_get_qualifier_esize@plt>
   46f9c:	and	w0, w0, #0xff
   46fa0:	mov	w1, #0x40                  	// #64
   46fa4:	ldr	x2, [x24, #24]
   46fa8:	udiv	w1, w1, w0
   46fac:	sub	w28, w1, #0x1
   46fb0:	tbnz	x2, #63, 46fc0 <aarch64_match_operands_constraint@@Base+0x1bf8>
   46fb4:	cmp	x2, w28, sxtw
   46fb8:	ldp	x4, x3, [sp, #104]
   46fbc:	b.le	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   46fc0:	cbz	x25, 474ec <aarch64_match_operands_constraint@@Base+0x2124>
   46fc4:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   46fc8:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   46fcc:	add	x1, x1, #0x658
   46fd0:	add	x0, x0, #0x5d8
   46fd4:	mov	w2, #0x5                   	// #5
   46fd8:	bl	359e0 <dcgettext@plt>
   46fdc:	mov	w1, #0x6                   	// #6
   46fe0:	mov	w19, #0x0                   	// #0
   46fe4:	ldp	x21, x22, [sp, #32]
   46fe8:	ldp	x23, x24, [sp, #48]
   46fec:	stp	w1, w26, [x25]
   46ff0:	str	x0, [x25, #8]
   46ff4:	stp	wzr, w28, [x25, #16]
   46ff8:	ldp	x27, x28, [sp, #80]
   46ffc:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47000:	mov	w19, #0x0                   	// #0
   47004:	ldp	x21, x22, [sp, #32]
   47008:	ldp	x23, x24, [sp, #48]
   4700c:	ldp	x27, x28, [sp, #80]
   47010:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47014:	cmp	w26, #0x1
   47018:	b.ne	4865c <aarch64_match_operands_constraint@@Base+0x3294>  // b.any
   4701c:	ldr	w0, [x4]
   47020:	str	x4, [sp, #104]
   47024:	str	w6, [sp, #112]
   47028:	str	x3, [sp, #120]
   4702c:	bl	35710 <aarch64_get_operand_class@plt>
   47030:	cmp	w0, #0xc
   47034:	b.ne	4865c <aarch64_match_operands_constraint@@Base+0x3294>  // b.any
   47038:	ldrb	w1, [x20, #128]
   4703c:	add	x28, x20, #0x50
   47040:	ldr	x4, [sp, #104]
   47044:	ldr	w6, [sp, #112]
   47048:	ldr	x3, [sp, #120]
   4704c:	ldr	x0, [x4, #16]
   47050:	tbnz	w1, #1, 4740c <aarch64_match_operands_constraint@@Base+0x2044>
   47054:	str	w6, [sp, #104]
   47058:	stp	x4, x3, [sp, #112]
   4705c:	bl	35a00 <aarch64_sys_ins_reg_has_xt@plt>
   47060:	ldr	w6, [sp, #104]
   47064:	ldp	x4, x3, [sp, #112]
   47068:	cbnz	w0, 47abc <aarch64_match_operands_constraint@@Base+0x26f4>
   4706c:	sub	w6, w6, #0x3
   47070:	cmp	w6, #0x1
   47074:	b.hi	456bc <aarch64_match_operands_constraint@@Base+0x2f4>  // b.pmore
   47078:	b	45acc <aarch64_match_operands_constraint@@Base+0x704>
   4707c:	bl	41d88 <print_aarch64_disassembler_options@@Base+0x138>
   47080:	and	w0, w26, #0xfffffffd
   47084:	cmp	w0, #0x1
   47088:	b.ne	48d08 <aarch64_match_operands_constraint@@Base+0x3940>  // b.any
   4708c:	ldur	w0, [x24, #-40]
   47090:	tbnz	w0, #0, 47470 <aarch64_match_operands_constraint@@Base+0x20a8>
   47094:	ldr	w1, [x24, #16]
   47098:	add	w0, w0, #0x1
   4709c:	cmp	w1, w0
   470a0:	b.eq	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.none
   470a4:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   470a8:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   470ac:	add	x1, x1, #0x558
   470b0:	add	x0, x0, #0x5d8
   470b4:	mov	w2, #0x5                   	// #5
   470b8:	bl	359e0 <dcgettext@plt>
   470bc:	cbz	x25, 4797c <aarch64_match_operands_constraint@@Base+0x25b4>
   470c0:	mov	w1, #0x2                   	// #2
   470c4:	mov	w19, #0x0                   	// #0
   470c8:	ldp	x21, x22, [sp, #32]
   470cc:	ldp	x23, x24, [sp, #48]
   470d0:	ldp	x27, x28, [sp, #80]
   470d4:	stp	w1, w26, [x25]
   470d8:	str	x0, [x25, #8]
   470dc:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   470e0:	ldr	w0, [x24, #32]
   470e4:	str	w6, [sp, #104]
   470e8:	stp	x4, x3, [sp, #112]
   470ec:	bl	35b70 <aarch64_extend_operator_p@plt>
   470f0:	mov	w19, w0
   470f4:	ldr	w6, [sp, #104]
   470f8:	ldp	x4, x3, [sp, #112]
   470fc:	cbnz	w0, 4710c <aarch64_match_operands_constraint@@Base+0x1d44>
   47100:	ldr	w0, [x24, #32]
   47104:	cmp	w0, #0x5
   47108:	b.ne	47438 <aarch64_match_operands_constraint@@Base+0x2070>  // b.any
   4710c:	mov	x0, x4
   47110:	str	x4, [sp, #104]
   47114:	str	w6, [sp, #112]
   47118:	str	x3, [sp, #120]
   4711c:	bl	35740 <aarch64_stack_pointer_p@plt>
   47120:	ldr	w6, [sp, #112]
   47124:	mov	w19, w0
   47128:	ldr	x4, [sp, #104]
   4712c:	ldr	x3, [sp, #120]
   47130:	cbnz	w0, 47304 <aarch64_match_operands_constraint@@Base+0x1f3c>
   47134:	cmp	w26, #0x2
   47138:	b.eq	472e8 <aarch64_match_operands_constraint@@Base+0x1f20>  // b.none
   4713c:	ldrb	w0, [x24, #36]
   47140:	tbz	w0, #0, 47754 <aarch64_match_operands_constraint@@Base+0x238c>
   47144:	ldr	w2, [x24, #32]
   47148:	cmp	w2, #0x5
   4714c:	b.eq	47c08 <aarch64_match_operands_constraint@@Base+0x2840>  // b.none
   47150:	ldr	x0, [x24, #40]
   47154:	cmp	x0, #0x4
   47158:	b.ls	4754c <aarch64_match_operands_constraint@@Base+0x2184>  // b.plast
   4715c:	cbz	x25, 475b8 <aarch64_match_operands_constraint@@Base+0x21f0>
   47160:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   47164:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   47168:	add	x1, x1, #0x788
   4716c:	add	x0, x0, #0x5d8
   47170:	mov	w2, #0x5                   	// #5
   47174:	bl	359e0 <dcgettext@plt>
   47178:	adrp	x1, 63000 <xexit@@Base+0x7a80>
   4717c:	mov	w19, #0x0                   	// #0
   47180:	ldp	x21, x22, [sp, #32]
   47184:	ldr	d0, [x1, #1232]
   47188:	mov	w1, #0x6                   	// #6
   4718c:	ldp	x23, x24, [sp, #48]
   47190:	ldp	x27, x28, [sp, #80]
   47194:	stp	w1, w26, [x25]
   47198:	str	x0, [x25, #8]
   4719c:	str	d0, [x25, #16]
   471a0:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   471a4:	tbz	w8, #1, 45d5c <aarch64_match_operands_constraint@@Base+0x994>
   471a8:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   471ac:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   471b0:	add	x1, x1, #0x698
   471b4:	add	x0, x0, #0x5d8
   471b8:	mov	w2, #0x5                   	// #5
   471bc:	bl	359e0 <dcgettext@plt>
   471c0:	cbz	x25, 47fb4 <aarch64_match_operands_constraint@@Base+0x2bec>
   471c4:	mov	w1, #0x2                   	// #2
   471c8:	mov	w19, #0x0                   	// #0
   471cc:	ldp	x21, x22, [sp, #32]
   471d0:	ldp	x23, x24, [sp, #48]
   471d4:	ldp	x27, x28, [sp, #80]
   471d8:	stp	w1, w26, [x25]
   471dc:	str	x0, [x25, #8]
   471e0:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   471e4:	tbnz	w8, #1, 45d5c <aarch64_match_operands_constraint@@Base+0x994>
   471e8:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   471ec:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   471f0:	add	x1, x1, #0x6b8
   471f4:	add	x0, x0, #0x5d8
   471f8:	mov	w2, #0x5                   	// #5
   471fc:	bl	359e0 <dcgettext@plt>
   47200:	cbz	x25, 47dcc <aarch64_match_operands_constraint@@Base+0x2a04>
   47204:	mov	w1, #0x2                   	// #2
   47208:	mov	w19, #0x0                   	// #0
   4720c:	ldp	x21, x22, [sp, #32]
   47210:	ldp	x23, x24, [sp, #48]
   47214:	ldp	x27, x28, [sp, #80]
   47218:	stp	w1, w26, [x25]
   4721c:	str	x0, [x25, #8]
   47220:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47224:	mov	w0, w6
   47228:	stp	x4, x3, [sp, #104]
   4722c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   47230:	and	w0, w0, #0xff
   47234:	mov	w1, #0x10                  	// #16
   47238:	ldr	x2, [x24, #24]
   4723c:	udiv	w1, w1, w0
   47240:	sub	w6, w1, #0x1
   47244:	tbnz	x2, #63, 472a0 <aarch64_match_operands_constraint@@Base+0x1ed8>
   47248:	cmp	x2, w6, sxtw
   4724c:	ldp	x4, x3, [sp, #104]
   47250:	b.gt	472a0 <aarch64_match_operands_constraint@@Base+0x1ed8>
   47254:	ldr	x0, [x28, #120]
   47258:	ubfx	w0, w0, #24, #3
   4725c:	b	45a0c <aarch64_match_operands_constraint@@Base+0x644>
   47260:	ldrb	w0, [x4, #4]
   47264:	str	x4, [sp, #104]
   47268:	str	w6, [sp, #112]
   4726c:	str	x3, [sp, #120]
   47270:	bl	358f0 <aarch64_get_qualifier_nelem@plt>
   47274:	and	w28, w0, #0xff
   47278:	ldr	x4, [sp, #104]
   4727c:	ldrb	w0, [x4, #4]
   47280:	bl	35680 <aarch64_get_qualifier_esize@plt>
   47284:	and	w0, w0, #0xff
   47288:	ldr	w6, [sp, #112]
   4728c:	ldr	x4, [sp, #104]
   47290:	mul	w28, w28, w0
   47294:	ldr	x3, [sp, #120]
   47298:	asr	w28, w28, #1
   4729c:	b	45c4c <aarch64_match_operands_constraint@@Base+0x884>
   472a0:	str	w6, [sp, #96]
   472a4:	cbz	x25, 475cc <aarch64_match_operands_constraint@@Base+0x2204>
   472a8:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   472ac:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   472b0:	add	x1, x1, #0x658
   472b4:	add	x0, x0, #0x5d8
   472b8:	mov	w2, #0x5                   	// #5
   472bc:	bl	359e0 <dcgettext@plt>
   472c0:	ldr	w6, [sp, #96]
   472c4:	mov	w1, #0x6                   	// #6
   472c8:	mov	w19, #0x0                   	// #0
   472cc:	ldp	x21, x22, [sp, #32]
   472d0:	ldp	x23, x24, [sp, #48]
   472d4:	ldp	x27, x28, [sp, #80]
   472d8:	stp	w1, w26, [x25]
   472dc:	str	x0, [x25, #8]
   472e0:	stp	wzr, w6, [x25, #16]
   472e4:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   472e8:	add	x0, x20, #0x50
   472ec:	str	w6, [sp, #104]
   472f0:	stp	x4, x3, [sp, #112]
   472f4:	bl	35740 <aarch64_stack_pointer_p@plt>
   472f8:	ldr	w6, [sp, #104]
   472fc:	ldp	x4, x3, [sp, #112]
   47300:	cbz	w0, 4713c <aarch64_match_operands_constraint@@Base+0x1d74>
   47304:	ldrb	w0, [x24, #36]
   47308:	tbnz	w0, #0, 47150 <aarch64_match_operands_constraint@@Base+0x1d88>
   4730c:	ldr	w0, [x24, #32]
   47310:	cmp	w0, #0x5
   47314:	b.eq	47150 <aarch64_match_operands_constraint@@Base+0x1d88>  // b.none
   47318:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   4731c:	add	x3, x3, #0xd50
   47320:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   47324:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   47328:	add	x3, x3, #0x1a0
   4732c:	add	x1, x1, #0xb60
   47330:	add	x0, x0, #0xda0
   47334:	mov	w2, #0xa66                 	// #2662
   47338:	bl	35ac0 <__assert_fail@plt>
   4733c:	ldr	x0, [x24, #24]
   47340:	sub	w1, w1, w2
   47344:	lsl	w1, w6, w1
   47348:	sub	w28, w1, #0x1
   4734c:	tbnz	x0, #63, 47358 <aarch64_match_operands_constraint@@Base+0x1f90>
   47350:	cmp	x0, w28, sxtw
   47354:	b.le	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   47358:	cbz	x25, 47610 <aarch64_match_operands_constraint@@Base+0x2248>
   4735c:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   47360:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   47364:	add	x1, x1, #0x658
   47368:	add	x0, x0, #0x5d8
   4736c:	mov	w2, #0x5                   	// #5
   47370:	bl	359e0 <dcgettext@plt>
   47374:	mov	w1, #0x6                   	// #6
   47378:	mov	w19, #0x0                   	// #0
   4737c:	ldp	x21, x22, [sp, #32]
   47380:	ldp	x23, x24, [sp, #48]
   47384:	stp	w1, w26, [x25]
   47388:	str	x0, [x25, #8]
   4738c:	stp	wzr, w28, [x25, #16]
   47390:	ldp	x27, x28, [sp, #80]
   47394:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47398:	cmp	w0, #0x5
   4739c:	b.ne	456c0 <aarch64_match_operands_constraint@@Base+0x2f8>  // b.any
   473a0:	b	45b50 <aarch64_match_operands_constraint@@Base+0x788>
   473a4:	ldr	w0, [x28, #16]
   473a8:	cmp	w0, #0x42
   473ac:	b.eq	45734 <aarch64_match_operands_constraint@@Base+0x36c>  // b.none
   473b0:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   473b4:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   473b8:	add	x1, x1, #0xe18
   473bc:	add	x0, x0, #0x5d8
   473c0:	mov	w2, #0x5                   	// #5
   473c4:	bl	359e0 <dcgettext@plt>
   473c8:	cbz	x25, 4802c <aarch64_match_operands_constraint@@Base+0x2c64>
   473cc:	mov	w1, #0x9                   	// #9
   473d0:	mov	w19, #0x0                   	// #0
   473d4:	ldp	x21, x22, [sp, #32]
   473d8:	ldp	x23, x24, [sp, #48]
   473dc:	ldp	x27, x28, [sp, #80]
   473e0:	stp	w1, w26, [x25]
   473e4:	str	x0, [x25, #8]
   473e8:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   473ec:	mov	x0, #0x1f                  	// #31
   473f0:	mov	w6, w0
   473f4:	b	45744 <aarch64_match_operands_constraint@@Base+0x37c>
   473f8:	mov	w19, #0x0                   	// #0
   473fc:	ldp	x21, x22, [sp, #32]
   47400:	ldp	x23, x24, [sp, #48]
   47404:	ldp	x27, x28, [sp, #80]
   47408:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   4740c:	str	w6, [sp, #104]
   47410:	str	x4, [sp, #112]
   47414:	bl	35a00 <aarch64_sys_ins_reg_has_xt@plt>
   47418:	ldr	w6, [sp, #104]
   4741c:	mov	w19, w0
   47420:	ldp	x4, x3, [sp, #112]
   47424:	cbz	w0, 47930 <aarch64_match_operands_constraint@@Base+0x2568>
   47428:	ldrb	w0, [x28, #48]
   4742c:	tbnz	w0, #1, 4706c <aarch64_match_operands_constraint@@Base+0x1ca4>
   47430:	ldr	x0, [x4, #16]
   47434:	b	47054 <aarch64_match_operands_constraint@@Base+0x1c8c>
   47438:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   4743c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   47440:	add	x1, x1, #0xd48
   47444:	add	x0, x0, #0x5d8
   47448:	mov	w2, #0x5                   	// #5
   4744c:	bl	359e0 <dcgettext@plt>
   47450:	cbz	x25, 47990 <aarch64_match_operands_constraint@@Base+0x25c8>
   47454:	mov	w1, #0x9                   	// #9
   47458:	ldp	x21, x22, [sp, #32]
   4745c:	ldp	x23, x24, [sp, #48]
   47460:	ldp	x27, x28, [sp, #80]
   47464:	stp	w1, w26, [x25]
   47468:	str	x0, [x25, #8]
   4746c:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47470:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   47474:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   47478:	add	x1, x1, #0x530
   4747c:	add	x0, x0, #0x5d8
   47480:	mov	w2, #0x5                   	// #5
   47484:	sub	w23, w23, #0x2
   47488:	bl	359e0 <dcgettext@plt>
   4748c:	cbz	x25, 47a28 <aarch64_match_operands_constraint@@Base+0x2660>
   47490:	mov	w1, #0x2                   	// #2
   47494:	mov	w19, #0x0                   	// #0
   47498:	ldp	x21, x22, [sp, #32]
   4749c:	ldp	x27, x28, [sp, #80]
   474a0:	stp	w1, w23, [x25]
   474a4:	str	x0, [x25, #8]
   474a8:	ldp	x23, x24, [sp, #48]
   474ac:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   474b0:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   474b4:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   474b8:	add	x1, x1, #0xe00
   474bc:	add	x0, x0, #0x5d8
   474c0:	mov	w2, #0x5                   	// #5
   474c4:	bl	359e0 <dcgettext@plt>
   474c8:	cbz	x25, 47b0c <aarch64_match_operands_constraint@@Base+0x2744>
   474cc:	mov	w1, #0x9                   	// #9
   474d0:	mov	w19, #0x0                   	// #0
   474d4:	ldp	x21, x22, [sp, #32]
   474d8:	ldp	x23, x24, [sp, #48]
   474dc:	ldp	x27, x28, [sp, #80]
   474e0:	stp	w1, w26, [x25]
   474e4:	str	x0, [x25, #8]
   474e8:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   474ec:	mov	w19, #0x0                   	// #0
   474f0:	ldp	x21, x22, [sp, #32]
   474f4:	ldp	x23, x24, [sp, #48]
   474f8:	ldp	x27, x28, [sp, #80]
   474fc:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47500:	cbz	w7, 456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   47504:	ldr	w0, [x24, #32]
   47508:	cmp	w0, #0xf
   4750c:	b.eq	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.none
   47510:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   47514:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   47518:	add	x1, x1, #0x808
   4751c:	add	x0, x0, #0x5d8
   47520:	mov	w2, #0x5                   	// #5
   47524:	bl	359e0 <dcgettext@plt>
   47528:	cbz	x25, 47de0 <aarch64_match_operands_constraint@@Base+0x2a18>
   4752c:	mov	w1, #0x9                   	// #9
   47530:	mov	w19, #0x0                   	// #0
   47534:	ldp	x21, x22, [sp, #32]
   47538:	ldp	x23, x24, [sp, #48]
   4753c:	ldp	x27, x28, [sp, #80]
   47540:	stp	w1, w26, [x25]
   47544:	str	x0, [x25, #8]
   47548:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   4754c:	cmp	w6, #0x2
   47550:	b.ne	456bc <aarch64_match_operands_constraint@@Base+0x2f4>  // b.any
   47554:	ldr	w0, [x24, #32]
   47558:	and	w1, w0, #0xfffffff7
   4755c:	cmp	w1, #0x5
   47560:	ccmp	w0, #0x9, #0x4, ne  // ne = any
   47564:	b.eq	456bc <aarch64_match_operands_constraint@@Base+0x2f4>  // b.none
   47568:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   4756c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   47570:	add	x1, x1, #0xde8
   47574:	add	x0, x0, #0x5d8
   47578:	mov	w2, #0x5                   	// #5
   4757c:	bl	359e0 <dcgettext@plt>
   47580:	cbz	x25, 488c8 <aarch64_match_operands_constraint@@Base+0x3500>
   47584:	mov	w1, #0x9                   	// #9
   47588:	mov	w19, #0x0                   	// #0
   4758c:	ldp	x21, x22, [sp, #32]
   47590:	ldp	x23, x24, [sp, #48]
   47594:	ldp	x27, x28, [sp, #80]
   47598:	stp	w1, w26, [x25]
   4759c:	str	x0, [x25, #8]
   475a0:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   475a4:	mov	w19, #0x0                   	// #0
   475a8:	ldp	x21, x22, [sp, #32]
   475ac:	ldp	x23, x24, [sp, #48]
   475b0:	ldp	x27, x28, [sp, #80]
   475b4:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   475b8:	mov	w19, #0x0                   	// #0
   475bc:	ldp	x21, x22, [sp, #32]
   475c0:	ldp	x23, x24, [sp, #48]
   475c4:	ldp	x27, x28, [sp, #80]
   475c8:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   475cc:	mov	w19, #0x0                   	// #0
   475d0:	ldp	x21, x22, [sp, #32]
   475d4:	ldp	x23, x24, [sp, #48]
   475d8:	ldp	x27, x28, [sp, #80]
   475dc:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   475e0:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   475e4:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   475e8:	add	x1, x1, #0x638
   475ec:	mov	w2, #0x5                   	// #5
   475f0:	add	x0, x0, #0x5d8
   475f4:	bl	359e0 <dcgettext@plt>
   475f8:	b	4561c <aarch64_match_operands_constraint@@Base+0x254>
   475fc:	mov	w19, #0x0                   	// #0
   47600:	ldp	x21, x22, [sp, #32]
   47604:	ldp	x23, x24, [sp, #48]
   47608:	ldp	x27, x28, [sp, #80]
   4760c:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47610:	mov	w19, #0x0                   	// #0
   47614:	ldp	x21, x22, [sp, #32]
   47618:	ldp	x23, x24, [sp, #48]
   4761c:	ldp	x27, x28, [sp, #80]
   47620:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47624:	cbz	x25, 47eb0 <aarch64_match_operands_constraint@@Base+0x2ae8>
   47628:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   4762c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   47630:	add	x1, x1, #0x6f8
   47634:	add	x0, x0, #0x5d8
   47638:	mov	w2, #0x5                   	// #5
   4763c:	bl	359e0 <dcgettext@plt>
   47640:	mov	w1, #0x6                   	// #6
   47644:	mov	w19, #0x0                   	// #0
   47648:	ldp	x21, x22, [sp, #32]
   4764c:	ldp	x23, x24, [sp, #48]
   47650:	stp	w1, w26, [x25]
   47654:	str	x0, [x25, #8]
   47658:	stp	wzr, w28, [x25, #16]
   4765c:	ldp	x27, x28, [sp, #80]
   47660:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47664:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   47668:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   4766c:	add	x1, x1, #0x698
   47670:	add	x0, x0, #0x5d8
   47674:	mov	w2, #0x5                   	// #5
   47678:	str	w9, [sp, #96]
   4767c:	bl	359e0 <dcgettext@plt>
   47680:	cbz	x25, 48118 <aarch64_match_operands_constraint@@Base+0x2d50>
   47684:	ldr	w9, [sp, #96]
   47688:	mov	w19, #0x0                   	// #0
   4768c:	ldp	x21, x22, [sp, #32]
   47690:	ldp	x23, x24, [sp, #48]
   47694:	ldp	x27, x28, [sp, #80]
   47698:	stp	w9, w26, [x25]
   4769c:	str	x0, [x25, #8]
   476a0:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   476a4:	cbz	x25, 47d44 <aarch64_match_operands_constraint@@Base+0x297c>
   476a8:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   476ac:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   476b0:	add	x1, x1, #0x6f8
   476b4:	add	x0, x0, #0x5d8
   476b8:	mov	w2, #0x5                   	// #5
   476bc:	str	w6, [sp, #96]
   476c0:	bl	359e0 <dcgettext@plt>
   476c4:	mov	w19, #0x0                   	// #0
   476c8:	ldr	w6, [sp, #96]
   476cc:	mov	w1, #0x6                   	// #6
   476d0:	ldp	x21, x22, [sp, #32]
   476d4:	ldp	x23, x24, [sp, #48]
   476d8:	stp	w1, w26, [x25]
   476dc:	str	x0, [x25, #8]
   476e0:	stp	w6, w28, [x25, #16]
   476e4:	ldp	x27, x28, [sp, #80]
   476e8:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   476ec:	cbz	w6, 47f70 <aarch64_match_operands_constraint@@Base+0x2ba8>
   476f0:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   476f4:	add	x3, x3, #0xd50
   476f8:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   476fc:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   47700:	add	x3, x3, #0x1a0
   47704:	add	x1, x1, #0xb60
   47708:	add	x0, x0, #0x870
   4770c:	mov	w2, #0x913                 	// #2323
   47710:	bl	35ac0 <__assert_fail@plt>
   47714:	mov	w19, #0x0                   	// #0
   47718:	ldp	x21, x22, [sp, #32]
   4771c:	ldp	x23, x24, [sp, #48]
   47720:	ldp	x27, x28, [sp, #80]
   47724:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47728:	cmp	w2, #0x23
   4772c:	b.eq	47ec4 <aarch64_match_operands_constraint@@Base+0x2afc>  // b.none
   47730:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   47734:	add	x3, x3, #0xd50
   47738:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   4773c:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   47740:	add	x3, x3, #0x1a0
   47744:	add	x1, x1, #0xb60
   47748:	add	x0, x0, #0x870
   4774c:	mov	w2, #0x85b                 	// #2139
   47750:	bl	35ac0 <__assert_fail@plt>
   47754:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   47758:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   4775c:	add	x1, x1, #0xd68
   47760:	add	x0, x0, #0x5d8
   47764:	mov	w2, #0x5                   	// #5
   47768:	bl	359e0 <dcgettext@plt>
   4776c:	cbz	x25, 481e8 <aarch64_match_operands_constraint@@Base+0x2e20>
   47770:	mov	w1, #0x9                   	// #9
   47774:	ldp	x21, x22, [sp, #32]
   47778:	ldp	x23, x24, [sp, #48]
   4777c:	ldp	x27, x28, [sp, #80]
   47780:	stp	w1, w26, [x25]
   47784:	str	x0, [x25, #8]
   47788:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   4778c:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   47790:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   47794:	add	x1, x1, #0x808
   47798:	add	x0, x0, #0x5d8
   4779c:	mov	w2, #0x5                   	// #5
   477a0:	bl	359e0 <dcgettext@plt>
   477a4:	cbz	x25, 48040 <aarch64_match_operands_constraint@@Base+0x2c78>
   477a8:	mov	w1, #0x9                   	// #9
   477ac:	mov	w19, #0x0                   	// #0
   477b0:	ldp	x21, x22, [sp, #32]
   477b4:	ldp	x23, x24, [sp, #48]
   477b8:	ldp	x27, x28, [sp, #80]
   477bc:	stp	w1, w26, [x25]
   477c0:	str	x0, [x25, #8]
   477c4:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   477c8:	mov	w19, #0x0                   	// #0
   477cc:	ldp	x21, x22, [sp, #32]
   477d0:	ldp	x23, x24, [sp, #48]
   477d4:	ldp	x27, x28, [sp, #80]
   477d8:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   477dc:	mov	w19, #0x0                   	// #0
   477e0:	ldp	x21, x22, [sp, #32]
   477e4:	ldp	x23, x24, [sp, #48]
   477e8:	ldp	x27, x28, [sp, #80]
   477ec:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   477f0:	sdiv	x1, x0, x6
   477f4:	msub	x0, x1, x6, x0
   477f8:	cbz	x0, 456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   477fc:	cbz	x25, 48504 <aarch64_match_operands_constraint@@Base+0x313c>
   47800:	mov	w0, #0x7                   	// #7
   47804:	mov	w19, #0x0                   	// #0
   47808:	ldp	x21, x22, [sp, #32]
   4780c:	ldp	x23, x24, [sp, #48]
   47810:	ldp	x27, x28, [sp, #80]
   47814:	stp	w0, w26, [x25]
   47818:	str	xzr, [x25, #8]
   4781c:	str	w2, [x25, #16]
   47820:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47824:	ldr	w1, [x28, #32]
   47828:	ldurb	w0, [x24, #-52]
   4782c:	cmp	w1, #0x25
   47830:	b.ne	47e6c <aarch64_match_operands_constraint@@Base+0x2aa4>  // b.any
   47834:	ldr	x1, [x28, #120]
   47838:	ubfx	w1, w1, #24, #3
   4783c:	cmp	w1, #0x1
   47840:	b.eq	4784c <aarch64_match_operands_constraint@@Base+0x2484>  // b.none
   47844:	ldurb	w26, [x24, #-40]
   47848:	ubfx	x26, x26, #5, #3
   4784c:	stp	x4, x3, [sp, #104]
   47850:	bl	35680 <aarch64_get_qualifier_esize@plt>
   47854:	and	w0, w0, #0xff
   47858:	ldp	x4, x3, [sp, #104]
   4785c:	mul	w0, w0, w26
   47860:	ldr	w1, [x24, #20]
   47864:	cmp	w1, w0
   47868:	b.eq	456bc <aarch64_match_operands_constraint@@Base+0x2f4>  // b.none
   4786c:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   47870:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   47874:	add	x1, x1, #0x760
   47878:	add	x0, x0, #0x5d8
   4787c:	mov	w2, #0x5                   	// #5
   47880:	bl	359e0 <dcgettext@plt>
   47884:	cbz	x25, 4899c <aarch64_match_operands_constraint@@Base+0x35d4>
   47888:	mov	x1, #0x9                   	// #9
   4788c:	mov	w19, #0x0                   	// #0
   47890:	movk	x1, #0x1, lsl #32
   47894:	stp	x1, x0, [x25]
   47898:	ldp	x21, x22, [sp, #32]
   4789c:	ldp	x23, x24, [sp, #48]
   478a0:	ldp	x27, x28, [sp, #80]
   478a4:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   478a8:	cmn	x1, #0x100
   478ac:	b.lt	46224 <aarch64_match_operands_constraint@@Base+0xe5c>  // b.tstop
   478b0:	b	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   478b4:	mov	w19, #0x0                   	// #0
   478b8:	ldp	x21, x22, [sp, #32]
   478bc:	ldp	x23, x24, [sp, #48]
   478c0:	ldp	x27, x28, [sp, #80]
   478c4:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   478c8:	cbz	w1, 45848 <aarch64_match_operands_constraint@@Base+0x480>
   478cc:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   478d0:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   478d4:	mov	w2, w28
   478d8:	add	x1, x1, #0xb58
   478dc:	add	x0, x0, #0x5d8
   478e0:	bl	359e0 <dcgettext@plt>
   478e4:	cbz	x25, 48ca8 <aarch64_match_operands_constraint@@Base+0x38e0>
   478e8:	mov	w1, #0x9                   	// #9
   478ec:	mov	w19, #0x0                   	// #0
   478f0:	ldp	x21, x22, [sp, #32]
   478f4:	ldp	x23, x24, [sp, #48]
   478f8:	ldp	x27, x28, [sp, #80]
   478fc:	stp	w1, w26, [x25]
   47900:	str	x0, [x25, #8]
   47904:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47908:	mov	w19, #0x0                   	// #0
   4790c:	ldp	x21, x22, [sp, #32]
   47910:	ldp	x23, x24, [sp, #48]
   47914:	ldp	x27, x28, [sp, #80]
   47918:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   4791c:	mov	w19, #0x0                   	// #0
   47920:	ldp	x21, x22, [sp, #32]
   47924:	ldp	x23, x24, [sp, #48]
   47928:	ldp	x27, x28, [sp, #80]
   4792c:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47930:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   47934:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   47938:	add	x1, x1, #0x5d0
   4793c:	add	x0, x0, #0x5d8
   47940:	mov	w2, #0x5                   	// #5
   47944:	bl	359e0 <dcgettext@plt>
   47948:	cbz	x25, 48210 <aarch64_match_operands_constraint@@Base+0x2e48>
   4794c:	mov	x1, #0x9                   	// #9
   47950:	movk	x1, #0x1, lsl #32
   47954:	stp	x1, x0, [x25]
   47958:	ldp	x21, x22, [sp, #32]
   4795c:	ldp	x23, x24, [sp, #48]
   47960:	ldp	x27, x28, [sp, #80]
   47964:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47968:	mov	w19, #0x0                   	// #0
   4796c:	ldp	x21, x22, [sp, #32]
   47970:	ldp	x23, x24, [sp, #48]
   47974:	ldp	x27, x28, [sp, #80]
   47978:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   4797c:	mov	w19, #0x0                   	// #0
   47980:	ldp	x21, x22, [sp, #32]
   47984:	ldp	x23, x24, [sp, #48]
   47988:	ldp	x27, x28, [sp, #80]
   4798c:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47990:	mov	w19, #0x0                   	// #0
   47994:	ldp	x21, x22, [sp, #32]
   47998:	ldp	x23, x24, [sp, #48]
   4799c:	ldp	x27, x28, [sp, #80]
   479a0:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   479a4:	ldrb	w0, [x4, #4]
   479a8:	stp	x4, x3, [sp, #104]
   479ac:	bl	35680 <aarch64_get_qualifier_esize@plt>
   479b0:	and	w26, w0, #0xff
   479b4:	ldr	x1, [x24, #40]
   479b8:	ldp	x4, x3, [sp, #104]
   479bc:	tst	x1, #0xf
   479c0:	b.ne	48284 <aarch64_match_operands_constraint@@Base+0x2ebc>  // b.any
   479c4:	sub	w26, w26, #0x2
   479c8:	lsl	w26, w26, #3
   479cc:	tbnz	x1, #63, 47d8c <aarch64_match_operands_constraint@@Base+0x29c4>
   479d0:	cmp	x1, w26, sxtw
   479d4:	b.gt	47d8c <aarch64_match_operands_constraint@@Base+0x29c4>
   479d8:	ldr	x0, [x24, #16]
   479dc:	tbnz	x0, #63, 48ba4 <aarch64_match_operands_constraint@@Base+0x37dc>
   479e0:	mov	x1, #0xffff                	// #65535
   479e4:	cmp	x0, x1
   479e8:	b.le	456bc <aarch64_match_operands_constraint@@Base+0x2f4>
   479ec:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   479f0:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   479f4:	mov	w2, w19
   479f8:	add	x1, x1, #0x7b8
   479fc:	add	x0, x0, #0x5d8
   47a00:	bl	359e0 <dcgettext@plt>
   47a04:	cbz	x25, 48b90 <aarch64_match_operands_constraint@@Base+0x37c8>
   47a08:	mov	x1, #0x9                   	// #9
   47a0c:	mov	w19, #0x0                   	// #0
   47a10:	movk	x1, #0x1, lsl #32
   47a14:	stp	x1, x0, [x25]
   47a18:	ldp	x21, x22, [sp, #32]
   47a1c:	ldp	x23, x24, [sp, #48]
   47a20:	ldp	x27, x28, [sp, #80]
   47a24:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47a28:	mov	w19, #0x0                   	// #0
   47a2c:	ldp	x21, x22, [sp, #32]
   47a30:	ldp	x23, x24, [sp, #48]
   47a34:	ldp	x27, x28, [sp, #80]
   47a38:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47a3c:	tst	w6, #0xff
   47a40:	b.ne	45848 <aarch64_match_operands_constraint@@Base+0x480>  // b.any
   47a44:	mov	x1, #0x100                 	// #256
   47a48:	lsr	x0, x0, #8
   47a4c:	sdiv	x6, x6, x1
   47a50:	b	45848 <aarch64_match_operands_constraint@@Base+0x480>
   47a54:	ldr	x0, [sp, #96]
   47a58:	cmp	w2, #0x10
   47a5c:	ldp	x0, x1, [x0, #-56]
   47a60:	stp	x0, x1, [sp, #128]
   47a64:	b.hi	4884c <aarch64_match_operands_constraint@@Base+0x3484>  // b.pmore
   47a68:	sub	w2, w2, #0x1
   47a6c:	ldrb	w0, [x21, w2, uxtw]
   47a70:	cmp	w0, #0xff
   47a74:	b.eq	48830 <aarch64_match_operands_constraint@@Base+0x3468>  // b.none
   47a78:	cmp	x6, w0, uxtb
   47a7c:	b.eq	46398 <aarch64_match_operands_constraint@@Base+0xfd0>  // b.none
   47a80:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   47a84:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   47a88:	add	x1, x1, #0x780
   47a8c:	add	x0, x0, #0x5d8
   47a90:	mov	w2, #0x5                   	// #5
   47a94:	bl	359e0 <dcgettext@plt>
   47a98:	cbz	x25, 486b8 <aarch64_match_operands_constraint@@Base+0x32f0>
   47a9c:	mov	w1, #0x9                   	// #9
   47aa0:	mov	w19, #0x0                   	// #0
   47aa4:	ldp	x21, x22, [sp, #32]
   47aa8:	ldp	x23, x24, [sp, #48]
   47aac:	ldp	x27, x28, [sp, #80]
   47ab0:	stp	w1, w26, [x25]
   47ab4:	str	x0, [x25, #8]
   47ab8:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47abc:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   47ac0:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   47ac4:	add	x1, x1, #0x5e8
   47ac8:	add	x0, x0, #0x5d8
   47acc:	mov	w2, #0x5                   	// #5
   47ad0:	bl	359e0 <dcgettext@plt>
   47ad4:	cbz	x25, 4852c <aarch64_match_operands_constraint@@Base+0x3164>
   47ad8:	mov	x1, #0x9                   	// #9
   47adc:	mov	w19, #0x0                   	// #0
   47ae0:	movk	x1, #0x1, lsl #32
   47ae4:	stp	x1, x0, [x25]
   47ae8:	ldp	x21, x22, [sp, #32]
   47aec:	ldp	x23, x24, [sp, #48]
   47af0:	ldp	x27, x28, [sp, #80]
   47af4:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47af8:	mov	w19, #0x0                   	// #0
   47afc:	ldp	x21, x22, [sp, #32]
   47b00:	ldp	x23, x24, [sp, #48]
   47b04:	ldp	x27, x28, [sp, #80]
   47b08:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47b0c:	mov	w19, #0x0                   	// #0
   47b10:	ldp	x21, x22, [sp, #32]
   47b14:	ldp	x23, x24, [sp, #48]
   47b18:	ldp	x27, x28, [sp, #80]
   47b1c:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47b20:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   47b24:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   47b28:	add	x1, x1, #0x7b8
   47b2c:	add	x0, x0, #0x5d8
   47b30:	mov	w2, #0x5                   	// #5
   47b34:	bl	359e0 <dcgettext@plt>
   47b38:	cbz	x25, 482d4 <aarch64_match_operands_constraint@@Base+0x2f0c>
   47b3c:	mov	w1, #0x9                   	// #9
   47b40:	ldp	x21, x22, [sp, #32]
   47b44:	ldp	x23, x24, [sp, #48]
   47b48:	ldp	x27, x28, [sp, #80]
   47b4c:	stp	w1, w26, [x25]
   47b50:	str	x0, [x25, #8]
   47b54:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47b58:	tst	x1, #0xf
   47b5c:	b.eq	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.none
   47b60:	cbz	x25, 48808 <aarch64_match_operands_constraint@@Base+0x3440>
   47b64:	mov	w1, #0x7                   	// #7
   47b68:	mov	w0, #0x10                  	// #16
   47b6c:	mov	w19, #0x0                   	// #0
   47b70:	ldp	x21, x22, [sp, #32]
   47b74:	ldp	x23, x24, [sp, #48]
   47b78:	ldp	x27, x28, [sp, #80]
   47b7c:	stp	w1, w26, [x25]
   47b80:	str	xzr, [x25, #8]
   47b84:	str	w0, [x25, #16]
   47b88:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47b8c:	tst	x1, #0xf
   47b90:	b.eq	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.none
   47b94:	cbz	x25, 48a6c <aarch64_match_operands_constraint@@Base+0x36a4>
   47b98:	mov	w1, #0x7                   	// #7
   47b9c:	mov	w0, #0x10                  	// #16
   47ba0:	mov	w19, #0x0                   	// #0
   47ba4:	ldp	x21, x22, [sp, #32]
   47ba8:	ldp	x23, x24, [sp, #48]
   47bac:	ldp	x27, x28, [sp, #80]
   47bb0:	stp	w1, w26, [x25]
   47bb4:	str	xzr, [x25, #8]
   47bb8:	str	w0, [x25, #16]
   47bbc:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47bc0:	mov	w19, #0x0                   	// #0
   47bc4:	ldp	x21, x22, [sp, #32]
   47bc8:	ldp	x23, x24, [sp, #48]
   47bcc:	ldp	x27, x28, [sp, #80]
   47bd0:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47bd4:	tst	x1, #0x7
   47bd8:	b.eq	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.none
   47bdc:	cbz	x25, 48a20 <aarch64_match_operands_constraint@@Base+0x3658>
   47be0:	mov	w1, #0x7                   	// #7
   47be4:	mov	w0, #0x8                   	// #8
   47be8:	mov	w19, #0x0                   	// #0
   47bec:	ldp	x21, x22, [sp, #32]
   47bf0:	ldp	x23, x24, [sp, #48]
   47bf4:	ldp	x27, x28, [sp, #80]
   47bf8:	stp	w1, w26, [x25]
   47bfc:	str	xzr, [x25, #8]
   47c00:	str	w0, [x25, #16]
   47c04:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47c08:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   47c0c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   47c10:	add	x1, x1, #0xd80
   47c14:	add	x0, x0, #0x5d8
   47c18:	bl	359e0 <dcgettext@plt>
   47c1c:	cbz	x25, 458b0 <aarch64_match_operands_constraint@@Base+0x4e8>
   47c20:	mov	w1, #0x9                   	// #9
   47c24:	ldp	x21, x22, [sp, #32]
   47c28:	ldp	x23, x24, [sp, #48]
   47c2c:	ldp	x27, x28, [sp, #80]
   47c30:	stp	w1, w26, [x25]
   47c34:	str	x0, [x25, #8]
   47c38:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47c3c:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   47c40:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   47c44:	add	x1, x1, #0xba8
   47c48:	add	x0, x0, #0x5d8
   47c4c:	mov	w2, #0x5                   	// #5
   47c50:	bl	359e0 <dcgettext@plt>
   47c54:	cbz	x25, 48384 <aarch64_match_operands_constraint@@Base+0x2fbc>
   47c58:	mov	w1, #0x9                   	// #9
   47c5c:	mov	w19, #0x0                   	// #0
   47c60:	ldp	x21, x22, [sp, #32]
   47c64:	ldp	x23, x24, [sp, #48]
   47c68:	ldp	x27, x28, [sp, #80]
   47c6c:	stp	w1, w26, [x25]
   47c70:	str	x0, [x25, #8]
   47c74:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47c78:	mov	w19, #0x0                   	// #0
   47c7c:	ldp	x21, x22, [sp, #32]
   47c80:	ldp	x23, x24, [sp, #48]
   47c84:	ldp	x27, x28, [sp, #80]
   47c88:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47c8c:	ldr	w0, [x24, #32]
   47c90:	cmp	w0, #0x1
   47c94:	b.eq	4847c <aarch64_match_operands_constraint@@Base+0x30b4>  // b.none
   47c98:	cmp	w0, #0x5
   47c9c:	b.ne	4843c <aarch64_match_operands_constraint@@Base+0x3074>  // b.any
   47ca0:	ldrb	w0, [x4, #4]
   47ca4:	stp	x4, x3, [sp, #104]
   47ca8:	bl	35680 <aarch64_get_qualifier_esize@plt>
   47cac:	ubfiz	w26, w0, #3, #8
   47cb0:	ldr	x1, [x24, #40]
   47cb4:	sub	w26, w26, #0x8
   47cb8:	tbnz	x1, #63, 483fc <aarch64_match_operands_constraint@@Base+0x3034>
   47cbc:	cmp	x1, w26, sxtw
   47cc0:	ldp	x4, x3, [sp, #104]
   47cc4:	b.gt	483fc <aarch64_match_operands_constraint@@Base+0x3034>
   47cc8:	tst	x1, #0x7
   47ccc:	b.eq	456bc <aarch64_match_operands_constraint@@Base+0x2f4>  // b.none
   47cd0:	cbz	x25, 4860c <aarch64_match_operands_constraint@@Base+0x3244>
   47cd4:	mov	x1, #0x7                   	// #7
   47cd8:	mov	w0, #0x8                   	// #8
   47cdc:	movk	x1, #0x1, lsl #32
   47ce0:	stp	x1, xzr, [x25]
   47ce4:	mov	w19, #0x0                   	// #0
   47ce8:	str	w0, [x25, #16]
   47cec:	ldp	x21, x22, [sp, #32]
   47cf0:	ldp	x23, x24, [sp, #48]
   47cf4:	ldp	x27, x28, [sp, #80]
   47cf8:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47cfc:	ldr	w0, [x24, #32]
   47d00:	cmp	w0, #0x5
   47d04:	b.eq	46874 <aarch64_match_operands_constraint@@Base+0x14ac>  // b.none
   47d08:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   47d0c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   47d10:	add	x1, x1, #0x918
   47d14:	add	x0, x0, #0x5d8
   47d18:	mov	w2, #0x5                   	// #5
   47d1c:	bl	359e0 <dcgettext@plt>
   47d20:	cbz	x25, 48cf4 <aarch64_match_operands_constraint@@Base+0x392c>
   47d24:	mov	w1, #0x9                   	// #9
   47d28:	mov	w19, #0x0                   	// #0
   47d2c:	ldp	x21, x22, [sp, #32]
   47d30:	ldp	x23, x24, [sp, #48]
   47d34:	ldp	x27, x28, [sp, #80]
   47d38:	stp	w1, w26, [x25]
   47d3c:	str	x0, [x25, #8]
   47d40:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47d44:	mov	w19, #0x0                   	// #0
   47d48:	ldp	x21, x22, [sp, #32]
   47d4c:	ldp	x23, x24, [sp, #48]
   47d50:	ldp	x27, x28, [sp, #80]
   47d54:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47d58:	tst	x8, #0xf
   47d5c:	b.eq	456b4 <aarch64_match_operands_constraint@@Base+0x2ec>  // b.none
   47d60:	cbz	x25, 48648 <aarch64_match_operands_constraint@@Base+0x3280>
   47d64:	mov	w1, #0x7                   	// #7
   47d68:	mov	w0, #0x10                  	// #16
   47d6c:	mov	w19, #0x0                   	// #0
   47d70:	ldp	x21, x22, [sp, #32]
   47d74:	ldp	x23, x24, [sp, #48]
   47d78:	ldp	x27, x28, [sp, #80]
   47d7c:	stp	w1, w26, [x25]
   47d80:	str	xzr, [x25, #8]
   47d84:	str	w0, [x25, #16]
   47d88:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47d8c:	cbz	x25, 48348 <aarch64_match_operands_constraint@@Base+0x2f80>
   47d90:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   47d94:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   47d98:	add	x1, x1, #0x788
   47d9c:	add	x0, x0, #0x5d8
   47da0:	mov	w2, #0x5                   	// #5
   47da4:	bl	359e0 <dcgettext@plt>
   47da8:	mov	x1, #0x6                   	// #6
   47dac:	mov	w19, #0x0                   	// #0
   47db0:	movk	x1, #0x1, lsl #32
   47db4:	stp	x1, x0, [x25]
   47db8:	stp	wzr, w26, [x25, #16]
   47dbc:	ldp	x21, x22, [sp, #32]
   47dc0:	ldp	x23, x24, [sp, #48]
   47dc4:	ldp	x27, x28, [sp, #80]
   47dc8:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47dcc:	mov	w19, #0x0                   	// #0
   47dd0:	ldp	x21, x22, [sp, #32]
   47dd4:	ldp	x23, x24, [sp, #48]
   47dd8:	ldp	x27, x28, [sp, #80]
   47ddc:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47de0:	mov	w19, #0x0                   	// #0
   47de4:	ldp	x21, x22, [sp, #32]
   47de8:	ldp	x23, x24, [sp, #48]
   47dec:	ldp	x27, x28, [sp, #80]
   47df0:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47df4:	mov	w19, #0x0                   	// #0
   47df8:	ldp	x21, x22, [sp, #32]
   47dfc:	ldp	x23, x24, [sp, #48]
   47e00:	ldp	x27, x28, [sp, #80]
   47e04:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47e08:	mov	w19, #0x0                   	// #0
   47e0c:	ldp	x21, x22, [sp, #32]
   47e10:	ldp	x23, x24, [sp, #48]
   47e14:	ldp	x27, x28, [sp, #80]
   47e18:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47e1c:	mov	w19, #0x0                   	// #0
   47e20:	ldp	x21, x22, [sp, #32]
   47e24:	ldp	x23, x24, [sp, #48]
   47e28:	ldp	x27, x28, [sp, #80]
   47e2c:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47e30:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   47e34:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   47e38:	add	x1, x1, #0x918
   47e3c:	add	x0, x0, #0x5d8
   47e40:	mov	w2, #0x5                   	// #5
   47e44:	bl	359e0 <dcgettext@plt>
   47e48:	cbz	x25, 48270 <aarch64_match_operands_constraint@@Base+0x2ea8>
   47e4c:	mov	w1, #0x9                   	// #9
   47e50:	mov	w19, #0x0                   	// #0
   47e54:	ldp	x21, x22, [sp, #32]
   47e58:	ldp	x23, x24, [sp, #48]
   47e5c:	ldp	x27, x28, [sp, #80]
   47e60:	stp	w1, w26, [x25]
   47e64:	str	x0, [x25, #8]
   47e68:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47e6c:	ldurb	w19, [x24, #-40]
   47e70:	stp	x4, x3, [sp, #104]
   47e74:	bl	35680 <aarch64_get_qualifier_esize@plt>
   47e78:	ubfx	x26, x19, #5, #3
   47e7c:	and	w19, w0, #0xff
   47e80:	ldurb	w0, [x24, #-52]
   47e84:	mul	w19, w19, w26
   47e88:	bl	358f0 <aarch64_get_qualifier_nelem@plt>
   47e8c:	and	w0, w0, #0xff
   47e90:	ldp	x4, x3, [sp, #104]
   47e94:	mul	w0, w0, w19
   47e98:	b	47860 <aarch64_match_operands_constraint@@Base+0x2498>
   47e9c:	mov	w19, #0x0                   	// #0
   47ea0:	ldp	x21, x22, [sp, #32]
   47ea4:	ldp	x23, x24, [sp, #48]
   47ea8:	ldp	x27, x28, [sp, #80]
   47eac:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47eb0:	mov	w19, #0x0                   	// #0
   47eb4:	ldp	x21, x22, [sp, #32]
   47eb8:	ldp	x23, x24, [sp, #48]
   47ebc:	ldp	x27, x28, [sp, #80]
   47ec0:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47ec4:	mov	x2, #0x0                   	// #0
   47ec8:	stp	x4, x3, [sp, #104]
   47ecc:	bl	35400 <aarch64_logical_immediate_p@plt>
   47ed0:	mov	w19, w0
   47ed4:	cbnz	w0, 469a0 <aarch64_match_operands_constraint@@Base+0x15d8>
   47ed8:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   47edc:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   47ee0:	add	x1, x1, #0x7b8
   47ee4:	add	x0, x0, #0x5d8
   47ee8:	mov	w2, #0x5                   	// #5
   47eec:	bl	359e0 <dcgettext@plt>
   47ef0:	cbz	x25, 48914 <aarch64_match_operands_constraint@@Base+0x354c>
   47ef4:	mov	x1, #0x9                   	// #9
   47ef8:	movk	x1, #0x1, lsl #32
   47efc:	stp	x1, x0, [x25]
   47f00:	ldp	x21, x22, [sp, #32]
   47f04:	ldp	x23, x24, [sp, #48]
   47f08:	ldp	x27, x28, [sp, #80]
   47f0c:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47f10:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   47f14:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   47f18:	mov	w2, w28
   47f1c:	add	x1, x1, #0xb88
   47f20:	add	x0, x0, #0x5d8
   47f24:	bl	359e0 <dcgettext@plt>
   47f28:	cbz	x25, 48b7c <aarch64_match_operands_constraint@@Base+0x37b4>
   47f2c:	mov	w1, #0x9                   	// #9
   47f30:	mov	w19, #0x0                   	// #0
   47f34:	ldp	x21, x22, [sp, #32]
   47f38:	ldp	x23, x24, [sp, #48]
   47f3c:	ldp	x27, x28, [sp, #80]
   47f40:	stp	w1, w26, [x25]
   47f44:	str	x0, [x25, #8]
   47f48:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47f4c:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   47f50:	add	x3, x3, #0xd50
   47f54:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   47f58:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   47f5c:	add	x3, x3, #0x1a0
   47f60:	add	x1, x1, #0xb60
   47f64:	add	x0, x0, #0x4d8
   47f68:	mov	w2, #0x5b3                 	// #1459
   47f6c:	bl	35ac0 <__assert_fail@plt>
   47f70:	ldr	w0, [x24, #32]
   47f74:	cbz	w0, 46874 <aarch64_match_operands_constraint@@Base+0x14ac>
   47f78:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   47f7c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   47f80:	add	x1, x1, #0xad8
   47f84:	add	x0, x0, #0x5d8
   47f88:	mov	w2, #0x5                   	// #5
   47f8c:	bl	359e0 <dcgettext@plt>
   47f90:	cbz	x25, 48900 <aarch64_match_operands_constraint@@Base+0x3538>
   47f94:	mov	w1, #0x9                   	// #9
   47f98:	mov	w19, #0x0                   	// #0
   47f9c:	ldp	x21, x22, [sp, #32]
   47fa0:	ldp	x23, x24, [sp, #48]
   47fa4:	ldp	x27, x28, [sp, #80]
   47fa8:	stp	w1, w26, [x25]
   47fac:	str	x0, [x25, #8]
   47fb0:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   47fb4:	mov	w19, #0x0                   	// #0
   47fb8:	ldp	x21, x22, [sp, #32]
   47fbc:	ldp	x23, x24, [sp, #48]
   47fc0:	ldp	x27, x28, [sp, #80]
   47fc4:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47fc8:	mov	w19, #0x0                   	// #0
   47fcc:	ldp	x21, x22, [sp, #32]
   47fd0:	ldp	x23, x24, [sp, #48]
   47fd4:	ldp	x27, x28, [sp, #80]
   47fd8:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47fdc:	mov	w19, #0x0                   	// #0
   47fe0:	ldp	x21, x22, [sp, #32]
   47fe4:	ldp	x23, x24, [sp, #48]
   47fe8:	ldp	x27, x28, [sp, #80]
   47fec:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   47ff0:	mov	w19, #0x0                   	// #0
   47ff4:	ldp	x21, x22, [sp, #32]
   47ff8:	ldp	x23, x24, [sp, #48]
   47ffc:	ldp	x27, x28, [sp, #80]
   48000:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48004:	mov	w19, #0x0                   	// #0
   48008:	ldp	x21, x22, [sp, #32]
   4800c:	ldp	x23, x24, [sp, #48]
   48010:	ldp	x27, x28, [sp, #80]
   48014:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48018:	mov	w19, #0x0                   	// #0
   4801c:	ldp	x21, x22, [sp, #32]
   48020:	ldp	x23, x24, [sp, #48]
   48024:	ldp	x27, x28, [sp, #80]
   48028:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   4802c:	mov	w19, #0x0                   	// #0
   48030:	ldp	x21, x22, [sp, #32]
   48034:	ldp	x23, x24, [sp, #48]
   48038:	ldp	x27, x28, [sp, #80]
   4803c:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48040:	mov	w19, #0x0                   	// #0
   48044:	ldp	x21, x22, [sp, #32]
   48048:	ldp	x23, x24, [sp, #48]
   4804c:	ldp	x27, x28, [sp, #80]
   48050:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48054:	mov	w19, #0x0                   	// #0
   48058:	ldp	x21, x22, [sp, #32]
   4805c:	ldp	x23, x24, [sp, #48]
   48060:	ldp	x27, x28, [sp, #80]
   48064:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48068:	sdiv	x0, x6, x8
   4806c:	msub	x6, x0, x8, x6
   48070:	cbz	x6, 456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   48074:	cbz	x25, 48a34 <aarch64_match_operands_constraint@@Base+0x366c>
   48078:	mov	w0, #0x7                   	// #7
   4807c:	mov	w19, #0x0                   	// #0
   48080:	ldp	x21, x22, [sp, #32]
   48084:	ldp	x23, x24, [sp, #48]
   48088:	ldp	x27, x28, [sp, #80]
   4808c:	stp	w0, w26, [x25]
   48090:	str	xzr, [x25, #8]
   48094:	str	w8, [x25, #16]
   48098:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   4809c:	cbz	x25, 48950 <aarch64_match_operands_constraint@@Base+0x3588>
   480a0:	mov	w1, #0x7                   	// #7
   480a4:	mov	w0, #0x4                   	// #4
   480a8:	mov	w19, #0x0                   	// #0
   480ac:	ldp	x21, x22, [sp, #32]
   480b0:	ldp	x23, x24, [sp, #48]
   480b4:	ldp	x27, x28, [sp, #80]
   480b8:	stp	w1, w26, [x25]
   480bc:	str	xzr, [x25, #8]
   480c0:	str	w0, [x25, #16]
   480c4:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   480c8:	mov	w19, #0x0                   	// #0
   480cc:	ldp	x21, x22, [sp, #32]
   480d0:	ldp	x23, x24, [sp, #48]
   480d4:	ldp	x27, x28, [sp, #80]
   480d8:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   480dc:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   480e0:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   480e4:	add	x1, x1, #0x8c8
   480e8:	add	x0, x0, #0x5d8
   480ec:	mov	w2, #0x5                   	// #5
   480f0:	bl	359e0 <dcgettext@plt>
   480f4:	cbz	x25, 489c4 <aarch64_match_operands_constraint@@Base+0x35fc>
   480f8:	mov	w1, #0x9                   	// #9
   480fc:	mov	w19, #0x0                   	// #0
   48100:	ldp	x21, x22, [sp, #32]
   48104:	ldp	x23, x24, [sp, #48]
   48108:	ldp	x27, x28, [sp, #80]
   4810c:	stp	w1, w26, [x25]
   48110:	str	x0, [x25, #8]
   48114:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   48118:	mov	w19, #0x0                   	// #0
   4811c:	ldp	x21, x22, [sp, #32]
   48120:	ldp	x23, x24, [sp, #48]
   48124:	ldp	x27, x28, [sp, #80]
   48128:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   4812c:	mov	w19, #0x0                   	// #0
   48130:	ldp	x21, x22, [sp, #32]
   48134:	ldp	x23, x24, [sp, #48]
   48138:	ldp	x27, x28, [sp, #80]
   4813c:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48140:	mov	w19, #0x0                   	// #0
   48144:	ldp	x21, x22, [sp, #32]
   48148:	ldp	x23, x24, [sp, #48]
   4814c:	ldp	x27, x28, [sp, #80]
   48150:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48154:	ldr	w0, [x24, #32]
   48158:	cbz	w0, 456b4 <aarch64_match_operands_constraint@@Base+0x2ec>
   4815c:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   48160:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   48164:	add	x1, x1, #0x918
   48168:	add	x0, x0, #0x5d8
   4816c:	mov	w2, #0x5                   	// #5
   48170:	bl	359e0 <dcgettext@plt>
   48174:	cbz	x25, 487bc <aarch64_match_operands_constraint@@Base+0x33f4>
   48178:	mov	w1, #0x9                   	// #9
   4817c:	mov	w19, #0x0                   	// #0
   48180:	ldp	x21, x22, [sp, #32]
   48184:	ldp	x23, x24, [sp, #48]
   48188:	ldp	x27, x28, [sp, #80]
   4818c:	stp	w1, w26, [x25]
   48190:	str	x0, [x25, #8]
   48194:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   48198:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   4819c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   481a0:	add	x1, x1, #0xb30
   481a4:	add	x0, x0, #0x5d8
   481a8:	mov	w2, #0x5                   	// #5
   481ac:	bl	359e0 <dcgettext@plt>
   481b0:	cbz	x25, 4893c <aarch64_match_operands_constraint@@Base+0x3574>
   481b4:	mov	w1, #0x9                   	// #9
   481b8:	mov	w19, #0x0                   	// #0
   481bc:	ldp	x21, x22, [sp, #32]
   481c0:	ldp	x23, x24, [sp, #48]
   481c4:	ldp	x27, x28, [sp, #80]
   481c8:	stp	w1, w26, [x25]
   481cc:	str	x0, [x25, #8]
   481d0:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   481d4:	mov	w19, #0x0                   	// #0
   481d8:	ldp	x21, x22, [sp, #32]
   481dc:	ldp	x23, x24, [sp, #48]
   481e0:	ldp	x27, x28, [sp, #80]
   481e4:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   481e8:	mov	w19, #0x0                   	// #0
   481ec:	ldp	x21, x22, [sp, #32]
   481f0:	ldp	x23, x24, [sp, #48]
   481f4:	ldp	x27, x28, [sp, #80]
   481f8:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   481fc:	mov	w19, #0x0                   	// #0
   48200:	ldp	x21, x22, [sp, #32]
   48204:	ldp	x23, x24, [sp, #48]
   48208:	ldp	x27, x28, [sp, #80]
   4820c:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48210:	mov	w19, #0x0                   	// #0
   48214:	ldp	x21, x22, [sp, #32]
   48218:	ldp	x23, x24, [sp, #48]
   4821c:	ldp	x27, x28, [sp, #80]
   48220:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48224:	mov	w19, #0x0                   	// #0
   48228:	ldp	x21, x22, [sp, #32]
   4822c:	ldp	x23, x24, [sp, #48]
   48230:	ldp	x27, x28, [sp, #80]
   48234:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48238:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   4823c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   48240:	add	x1, x1, #0x930
   48244:	add	x0, x0, #0x5d8
   48248:	bl	359e0 <dcgettext@plt>
   4824c:	cbz	x25, 487f4 <aarch64_match_operands_constraint@@Base+0x342c>
   48250:	mov	w1, #0x9                   	// #9
   48254:	mov	w19, #0x0                   	// #0
   48258:	ldp	x21, x22, [sp, #32]
   4825c:	ldp	x23, x24, [sp, #48]
   48260:	ldp	x27, x28, [sp, #80]
   48264:	stp	w1, w26, [x25]
   48268:	str	x0, [x25, #8]
   4826c:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   48270:	mov	w19, #0x0                   	// #0
   48274:	ldp	x21, x22, [sp, #32]
   48278:	ldp	x23, x24, [sp, #48]
   4827c:	ldp	x27, x28, [sp, #80]
   48280:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48284:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   48288:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   4828c:	mov	w2, w19
   48290:	add	x1, x1, #0x980
   48294:	add	x0, x0, #0x5d8
   48298:	bl	359e0 <dcgettext@plt>
   4829c:	cbz	x25, 48d40 <aarch64_match_operands_constraint@@Base+0x3978>
   482a0:	mov	x1, #0x9                   	// #9
   482a4:	mov	w19, #0x0                   	// #0
   482a8:	movk	x1, #0x1, lsl #32
   482ac:	stp	x1, x0, [x25]
   482b0:	ldp	x21, x22, [sp, #32]
   482b4:	ldp	x23, x24, [sp, #48]
   482b8:	ldp	x27, x28, [sp, #80]
   482bc:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   482c0:	mov	w19, #0x0                   	// #0
   482c4:	ldp	x21, x22, [sp, #32]
   482c8:	ldp	x23, x24, [sp, #48]
   482cc:	ldp	x27, x28, [sp, #80]
   482d0:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   482d4:	mov	w19, #0x0                   	// #0
   482d8:	ldp	x21, x22, [sp, #32]
   482dc:	ldp	x23, x24, [sp, #48]
   482e0:	ldp	x27, x28, [sp, #80]
   482e4:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   482e8:	mov	w19, #0x0                   	// #0
   482ec:	ldp	x21, x22, [sp, #32]
   482f0:	ldp	x23, x24, [sp, #48]
   482f4:	ldp	x27, x28, [sp, #80]
   482f8:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   482fc:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   48300:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   48304:	add	x1, x1, #0x7b8
   48308:	add	x0, x0, #0x5d8
   4830c:	mov	w2, #0x5                   	// #5
   48310:	bl	359e0 <dcgettext@plt>
   48314:	cbz	x25, 48964 <aarch64_match_operands_constraint@@Base+0x359c>
   48318:	mov	x1, #0x9                   	// #9
   4831c:	movk	x1, #0x1, lsl #32
   48320:	stp	x1, x0, [x25]
   48324:	ldp	x21, x22, [sp, #32]
   48328:	ldp	x23, x24, [sp, #48]
   4832c:	ldp	x27, x28, [sp, #80]
   48330:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   48334:	mov	w19, #0x0                   	// #0
   48338:	ldp	x21, x22, [sp, #32]
   4833c:	ldp	x23, x24, [sp, #48]
   48340:	ldp	x27, x28, [sp, #80]
   48344:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48348:	mov	w19, #0x0                   	// #0
   4834c:	ldp	x21, x22, [sp, #32]
   48350:	ldp	x23, x24, [sp, #48]
   48354:	ldp	x27, x28, [sp, #80]
   48358:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   4835c:	mov	w19, #0x0                   	// #0
   48360:	ldp	x21, x22, [sp, #32]
   48364:	ldp	x23, x24, [sp, #48]
   48368:	ldp	x27, x28, [sp, #80]
   4836c:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48370:	mov	w19, #0x0                   	// #0
   48374:	ldp	x21, x22, [sp, #32]
   48378:	ldp	x23, x24, [sp, #48]
   4837c:	ldp	x27, x28, [sp, #80]
   48380:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48384:	mov	w19, #0x0                   	// #0
   48388:	ldp	x21, x22, [sp, #32]
   4838c:	ldp	x23, x24, [sp, #48]
   48390:	ldp	x27, x28, [sp, #80]
   48394:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48398:	ldr	x0, [x24, #16]
   4839c:	stp	x4, x3, [sp, #104]
   483a0:	bl	35760 <aarch64_shrink_expanded_imm8@plt>
   483a4:	ldp	x4, x3, [sp, #104]
   483a8:	tbz	w0, #31, 47c8c <aarch64_match_operands_constraint@@Base+0x28c4>
   483ac:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   483b0:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   483b4:	add	x1, x1, #0xaf0
   483b8:	add	x0, x0, #0x5d8
   483bc:	mov	w2, #0x5                   	// #5
   483c0:	bl	359e0 <dcgettext@plt>
   483c4:	cbz	x25, 485e4 <aarch64_match_operands_constraint@@Base+0x321c>
   483c8:	mov	x1, #0x9                   	// #9
   483cc:	mov	w19, #0x0                   	// #0
   483d0:	movk	x1, #0x1, lsl #32
   483d4:	stp	x1, x0, [x25]
   483d8:	ldp	x21, x22, [sp, #32]
   483dc:	ldp	x23, x24, [sp, #48]
   483e0:	ldp	x27, x28, [sp, #80]
   483e4:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   483e8:	mov	w19, #0x0                   	// #0
   483ec:	ldp	x21, x22, [sp, #32]
   483f0:	ldp	x23, x24, [sp, #48]
   483f4:	ldp	x27, x28, [sp, #80]
   483f8:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   483fc:	cbz	x25, 48620 <aarch64_match_operands_constraint@@Base+0x3258>
   48400:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   48404:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   48408:	add	x1, x1, #0x788
   4840c:	add	x0, x0, #0x5d8
   48410:	mov	w2, #0x5                   	// #5
   48414:	bl	359e0 <dcgettext@plt>
   48418:	mov	x1, #0x6                   	// #6
   4841c:	mov	w19, #0x0                   	// #0
   48420:	movk	x1, #0x1, lsl #32
   48424:	stp	x1, x0, [x25]
   48428:	stp	wzr, w26, [x25, #16]
   4842c:	ldp	x21, x22, [sp, #32]
   48430:	ldp	x23, x24, [sp, #48]
   48434:	ldp	x27, x28, [sp, #80]
   48438:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   4843c:	cbz	w0, 456bc <aarch64_match_operands_constraint@@Base+0x2f4>
   48440:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   48444:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   48448:	add	x1, x1, #0x918
   4844c:	add	x0, x0, #0x5d8
   48450:	mov	w2, #0x5                   	// #5
   48454:	bl	359e0 <dcgettext@plt>
   48458:	cbz	x25, 48634 <aarch64_match_operands_constraint@@Base+0x326c>
   4845c:	mov	x1, #0x9                   	// #9
   48460:	mov	w19, #0x0                   	// #0
   48464:	movk	x1, #0x1, lsl #32
   48468:	stp	x1, x0, [x25]
   4846c:	ldp	x21, x22, [sp, #32]
   48470:	ldp	x23, x24, [sp, #48]
   48474:	ldp	x27, x28, [sp, #80]
   48478:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   4847c:	ldr	x0, [x24, #40]
   48480:	sub	x0, x0, #0x8
   48484:	tst	x0, #0xfffffffffffffff7
   48488:	b.eq	456bc <aarch64_match_operands_constraint@@Base+0x2f4>  // b.none
   4848c:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   48490:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   48494:	add	x1, x1, #0xb10
   48498:	add	x0, x0, #0x5d8
   4849c:	mov	w2, #0x5                   	// #5
   484a0:	bl	359e0 <dcgettext@plt>
   484a4:	cbz	x25, 48704 <aarch64_match_operands_constraint@@Base+0x333c>
   484a8:	mov	x1, #0x9                   	// #9
   484ac:	mov	w19, #0x0                   	// #0
   484b0:	movk	x1, #0x1, lsl #32
   484b4:	stp	x1, x0, [x25]
   484b8:	ldp	x21, x22, [sp, #32]
   484bc:	ldp	x23, x24, [sp, #48]
   484c0:	ldp	x27, x28, [sp, #80]
   484c4:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   484c8:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   484cc:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   484d0:	add	x1, x1, #0x918
   484d4:	add	x0, x0, #0x5d8
   484d8:	mov	w2, #0x5                   	// #5
   484dc:	bl	359e0 <dcgettext@plt>
   484e0:	cbz	x25, 48564 <aarch64_match_operands_constraint@@Base+0x319c>
   484e4:	mov	w1, #0x9                   	// #9
   484e8:	mov	w19, #0x0                   	// #0
   484ec:	ldp	x21, x22, [sp, #32]
   484f0:	ldp	x23, x24, [sp, #48]
   484f4:	ldp	x27, x28, [sp, #80]
   484f8:	stp	w1, w26, [x25]
   484fc:	str	x0, [x25, #8]
   48500:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   48504:	mov	w19, #0x0                   	// #0
   48508:	ldp	x21, x22, [sp, #32]
   4850c:	ldp	x23, x24, [sp, #48]
   48510:	ldp	x27, x28, [sp, #80]
   48514:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48518:	mov	w19, #0x0                   	// #0
   4851c:	ldp	x21, x22, [sp, #32]
   48520:	ldp	x23, x24, [sp, #48]
   48524:	ldp	x27, x28, [sp, #80]
   48528:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   4852c:	mov	w19, #0x0                   	// #0
   48530:	ldp	x21, x22, [sp, #32]
   48534:	ldp	x23, x24, [sp, #48]
   48538:	ldp	x27, x28, [sp, #80]
   4853c:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48540:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   48544:	add	x3, x3, #0xd50
   48548:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   4854c:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   48550:	add	x3, x3, #0x1a0
   48554:	add	x1, x1, #0xb60
   48558:	add	x0, x0, #0x738
   4855c:	mov	w2, #0x6b3                 	// #1715
   48560:	bl	35ac0 <__assert_fail@plt>
   48564:	mov	w19, #0x0                   	// #0
   48568:	ldp	x21, x22, [sp, #32]
   4856c:	ldp	x23, x24, [sp, #48]
   48570:	ldp	x27, x28, [sp, #80]
   48574:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48578:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   4857c:	add	x3, x3, #0xd50
   48580:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48584:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   48588:	add	x3, x3, #0x1e8
   4858c:	add	x1, x1, #0xb60
   48590:	add	x0, x0, #0xa28
   48594:	mov	w2, #0x32a                 	// #810
   48598:	bl	35ac0 <__assert_fail@plt>
   4859c:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   485a0:	add	x3, x3, #0xd50
   485a4:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   485a8:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   485ac:	add	x3, x3, #0x1a0
   485b0:	add	x1, x1, #0xb60
   485b4:	add	x0, x0, #0x9d0
   485b8:	mov	w2, #0x898                 	// #2200
   485bc:	bl	35ac0 <__assert_fail@plt>
   485c0:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   485c4:	add	x3, x3, #0xd50
   485c8:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   485cc:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   485d0:	add	x3, x3, #0x1a0
   485d4:	add	x1, x1, #0xb60
   485d8:	add	x0, x0, #0xac8
   485dc:	mov	w2, #0x8d8                 	// #2264
   485e0:	bl	35ac0 <__assert_fail@plt>
   485e4:	mov	w19, #0x0                   	// #0
   485e8:	ldp	x21, x22, [sp, #32]
   485ec:	ldp	x23, x24, [sp, #48]
   485f0:	ldp	x27, x28, [sp, #80]
   485f4:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   485f8:	mov	w19, #0x0                   	// #0
   485fc:	ldp	x21, x22, [sp, #32]
   48600:	ldp	x23, x24, [sp, #48]
   48604:	ldp	x27, x28, [sp, #80]
   48608:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   4860c:	mov	w19, #0x0                   	// #0
   48610:	ldp	x21, x22, [sp, #32]
   48614:	ldp	x23, x24, [sp, #48]
   48618:	ldp	x27, x28, [sp, #80]
   4861c:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48620:	mov	w19, #0x0                   	// #0
   48624:	ldp	x21, x22, [sp, #32]
   48628:	ldp	x23, x24, [sp, #48]
   4862c:	ldp	x27, x28, [sp, #80]
   48630:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48634:	mov	w19, #0x0                   	// #0
   48638:	ldp	x21, x22, [sp, #32]
   4863c:	ldp	x23, x24, [sp, #48]
   48640:	ldp	x27, x28, [sp, #80]
   48644:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48648:	mov	w19, #0x0                   	// #0
   4864c:	ldp	x21, x22, [sp, #32]
   48650:	ldp	x23, x24, [sp, #48]
   48654:	ldp	x27, x28, [sp, #80]
   48658:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   4865c:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   48660:	add	x3, x3, #0xd50
   48664:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48668:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   4866c:	add	x3, x3, #0x1a0
   48670:	add	x1, x1, #0xb60
   48674:	add	x0, x0, #0x578
   48678:	mov	w2, #0x5ce                 	// #1486
   4867c:	bl	35ac0 <__assert_fail@plt>
   48680:	mov	w19, #0x0                   	// #0
   48684:	ldp	x21, x22, [sp, #32]
   48688:	ldp	x23, x24, [sp, #48]
   4868c:	ldp	x27, x28, [sp, #80]
   48690:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48694:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   48698:	add	x3, x3, #0xd50
   4869c:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   486a0:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   486a4:	add	x3, x3, #0x1a0
   486a8:	add	x1, x1, #0xb60
   486ac:	add	x0, x0, #0xbf0
   486b0:	mov	w2, #0x99f                 	// #2463
   486b4:	bl	35ac0 <__assert_fail@plt>
   486b8:	mov	w19, #0x0                   	// #0
   486bc:	ldp	x21, x22, [sp, #32]
   486c0:	ldp	x23, x24, [sp, #48]
   486c4:	ldp	x27, x28, [sp, #80]
   486c8:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   486cc:	mov	w19, #0x0                   	// #0
   486d0:	ldp	x21, x22, [sp, #32]
   486d4:	ldp	x23, x24, [sp, #48]
   486d8:	ldp	x27, x28, [sp, #80]
   486dc:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   486e0:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   486e4:	add	x3, x3, #0xd50
   486e8:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   486ec:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   486f0:	add	x3, x3, #0x1a0
   486f4:	add	x1, x1, #0xb60
   486f8:	add	x0, x0, #0x738
   486fc:	mov	w2, #0x917                 	// #2327
   48700:	bl	35ac0 <__assert_fail@plt>
   48704:	mov	w19, #0x0                   	// #0
   48708:	ldp	x21, x22, [sp, #32]
   4870c:	ldp	x23, x24, [sp, #48]
   48710:	ldp	x27, x28, [sp, #80]
   48714:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48718:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   4871c:	add	x3, x3, #0xd50
   48720:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48724:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   48728:	add	x3, x3, #0x1a0
   4872c:	add	x1, x1, #0xb60
   48730:	add	x0, x0, #0x7f0
   48734:	mov	w2, #0x78d                 	// #1933
   48738:	bl	35ac0 <__assert_fail@plt>
   4873c:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   48740:	add	x3, x3, #0xd50
   48744:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48748:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   4874c:	add	x3, x3, #0x1a0
   48750:	add	x1, x1, #0xb60
   48754:	add	x0, x0, #0x820
   48758:	mov	w2, #0x78c                 	// #1932
   4875c:	bl	35ac0 <__assert_fail@plt>
   48760:	mov	w19, #0x0                   	// #0
   48764:	ldp	x21, x22, [sp, #32]
   48768:	ldp	x23, x24, [sp, #48]
   4876c:	ldp	x27, x28, [sp, #80]
   48770:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48774:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   48778:	add	x3, x3, #0xd50
   4877c:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48780:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   48784:	add	x3, x3, #0x1a0
   48788:	add	x1, x1, #0xb60
   4878c:	add	x0, x0, #0x620
   48790:	mov	w2, #0x5fa                 	// #1530
   48794:	bl	35ac0 <__assert_fail@plt>
   48798:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   4879c:	add	x3, x3, #0xd50
   487a0:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   487a4:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   487a8:	add	x3, x3, #0x1a0
   487ac:	add	x1, x1, #0xb60
   487b0:	add	x0, x0, #0xd08
   487b4:	mov	w2, #0xa2e                 	// #2606
   487b8:	bl	35ac0 <__assert_fail@plt>
   487bc:	mov	w19, #0x0                   	// #0
   487c0:	ldp	x21, x22, [sp, #32]
   487c4:	ldp	x23, x24, [sp, #48]
   487c8:	ldp	x27, x28, [sp, #80]
   487cc:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   487d0:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   487d4:	add	x3, x3, #0xd50
   487d8:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   487dc:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   487e0:	add	x3, x3, #0x1a0
   487e4:	add	x1, x1, #0xb60
   487e8:	add	x0, x0, #0xca0
   487ec:	mov	w2, #0x9dd                 	// #2525
   487f0:	bl	35ac0 <__assert_fail@plt>
   487f4:	mov	w19, #0x0                   	// #0
   487f8:	ldp	x21, x22, [sp, #32]
   487fc:	ldp	x23, x24, [sp, #48]
   48800:	ldp	x27, x28, [sp, #80]
   48804:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48808:	mov	w19, #0x0                   	// #0
   4880c:	ldp	x21, x22, [sp, #32]
   48810:	ldp	x23, x24, [sp, #48]
   48814:	ldp	x27, x28, [sp, #80]
   48818:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   4881c:	mov	w19, #0x0                   	// #0
   48820:	ldp	x21, x22, [sp, #32]
   48824:	ldp	x23, x24, [sp, #48]
   48828:	ldp	x27, x28, [sp, #80]
   4882c:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48830:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   48834:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   48838:	add	x3, x3, #0x1d8
   4883c:	add	x1, x1, #0x610
   48840:	add	x0, x0, #0x630
   48844:	mov	w2, #0x203                 	// #515
   48848:	bl	35ac0 <__assert_fail@plt>
   4884c:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   48850:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   48854:	add	x3, x3, #0x1d8
   48858:	add	x1, x1, #0x610
   4885c:	add	x0, x0, #0x870
   48860:	mov	w2, #0x200                 	// #512
   48864:	bl	35ac0 <__assert_fail@plt>
   48868:	mov	w19, #0x0                   	// #0
   4886c:	ldp	x21, x22, [sp, #32]
   48870:	ldp	x23, x24, [sp, #48]
   48874:	ldp	x27, x28, [sp, #80]
   48878:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   4887c:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   48880:	add	x3, x3, #0xd50
   48884:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48888:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   4888c:	add	x3, x3, #0x1a0
   48890:	add	x1, x1, #0xb60
   48894:	add	x0, x0, #0xbf0
   48898:	mov	w2, #0x9a9                 	// #2473
   4889c:	bl	35ac0 <__assert_fail@plt>
   488a0:	mov	w19, #0x0                   	// #0
   488a4:	ldp	x21, x22, [sp, #32]
   488a8:	ldp	x23, x24, [sp, #48]
   488ac:	ldp	x27, x28, [sp, #80]
   488b0:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   488b4:	mov	w19, #0x0                   	// #0
   488b8:	ldp	x21, x22, [sp, #32]
   488bc:	ldp	x23, x24, [sp, #48]
   488c0:	ldp	x27, x28, [sp, #80]
   488c4:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   488c8:	mov	w19, #0x0                   	// #0
   488cc:	ldp	x21, x22, [sp, #32]
   488d0:	ldp	x23, x24, [sp, #48]
   488d4:	ldp	x27, x28, [sp, #80]
   488d8:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   488dc:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   488e0:	add	x3, x3, #0xd50
   488e4:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   488e8:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   488ec:	add	x3, x3, #0x1a0
   488f0:	add	x1, x1, #0xb60
   488f4:	add	x0, x0, #0x8f0
   488f8:	mov	w2, #0x7ea                 	// #2026
   488fc:	bl	35ac0 <__assert_fail@plt>
   48900:	mov	w19, #0x0                   	// #0
   48904:	ldp	x21, x22, [sp, #32]
   48908:	ldp	x23, x24, [sp, #48]
   4890c:	ldp	x27, x28, [sp, #80]
   48910:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48914:	mov	w19, #0x0                   	// #0
   48918:	ldp	x21, x22, [sp, #32]
   4891c:	ldp	x23, x24, [sp, #48]
   48920:	ldp	x27, x28, [sp, #80]
   48924:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48928:	mov	w19, #0x0                   	// #0
   4892c:	ldp	x21, x22, [sp, #32]
   48930:	ldp	x23, x24, [sp, #48]
   48934:	ldp	x27, x28, [sp, #80]
   48938:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   4893c:	mov	w19, #0x0                   	// #0
   48940:	ldp	x21, x22, [sp, #32]
   48944:	ldp	x23, x24, [sp, #48]
   48948:	ldp	x27, x28, [sp, #80]
   4894c:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48950:	mov	w19, #0x0                   	// #0
   48954:	ldp	x21, x22, [sp, #32]
   48958:	ldp	x23, x24, [sp, #48]
   4895c:	ldp	x27, x28, [sp, #80]
   48960:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48964:	mov	w19, #0x0                   	// #0
   48968:	ldp	x21, x22, [sp, #32]
   4896c:	ldp	x23, x24, [sp, #48]
   48970:	ldp	x27, x28, [sp, #80]
   48974:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48978:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   4897c:	add	x3, x3, #0xd50
   48980:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48984:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   48988:	add	x3, x3, #0x1a0
   4898c:	add	x1, x1, #0xb60
   48990:	add	x0, x0, #0x738
   48994:	mov	w2, #0x844                 	// #2116
   48998:	bl	35ac0 <__assert_fail@plt>
   4899c:	mov	w19, #0x0                   	// #0
   489a0:	ldp	x21, x22, [sp, #32]
   489a4:	ldp	x23, x24, [sp, #48]
   489a8:	ldp	x27, x28, [sp, #80]
   489ac:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   489b0:	mov	w19, #0x0                   	// #0
   489b4:	ldp	x21, x22, [sp, #32]
   489b8:	ldp	x23, x24, [sp, #48]
   489bc:	ldp	x27, x28, [sp, #80]
   489c0:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   489c4:	mov	w19, #0x0                   	// #0
   489c8:	ldp	x21, x22, [sp, #32]
   489cc:	ldp	x23, x24, [sp, #48]
   489d0:	ldp	x27, x28, [sp, #80]
   489d4:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   489d8:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   489dc:	add	x3, x3, #0xd50
   489e0:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   489e4:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   489e8:	add	x3, x3, #0x1a0
   489ec:	add	x1, x1, #0xb60
   489f0:	add	x0, x0, #0x950
   489f4:	mov	w2, #0x81e                 	// #2078
   489f8:	bl	35ac0 <__assert_fail@plt>
   489fc:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   48a00:	add	x3, x3, #0xd50
   48a04:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48a08:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   48a0c:	add	x3, x3, #0x1a0
   48a10:	add	x1, x1, #0xb60
   48a14:	add	x0, x0, #0xcd8
   48a18:	mov	w2, #0xa06                 	// #2566
   48a1c:	bl	35ac0 <__assert_fail@plt>
   48a20:	mov	w19, #0x0                   	// #0
   48a24:	ldp	x21, x22, [sp, #32]
   48a28:	ldp	x23, x24, [sp, #48]
   48a2c:	ldp	x27, x28, [sp, #80]
   48a30:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48a34:	mov	w19, #0x0                   	// #0
   48a38:	ldp	x21, x22, [sp, #32]
   48a3c:	ldp	x23, x24, [sp, #48]
   48a40:	ldp	x27, x28, [sp, #80]
   48a44:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48a48:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   48a4c:	add	x3, x3, #0xd50
   48a50:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48a54:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   48a58:	add	x3, x3, #0x1a0
   48a5c:	add	x1, x1, #0xb60
   48a60:	add	x0, x0, #0xf90
   48a64:	mov	w2, #0xa47                 	// #2631
   48a68:	bl	35ac0 <__assert_fail@plt>
   48a6c:	mov	w19, #0x0                   	// #0
   48a70:	ldp	x21, x22, [sp, #32]
   48a74:	ldp	x23, x24, [sp, #48]
   48a78:	ldp	x27, x28, [sp, #80]
   48a7c:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48a80:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   48a84:	add	x3, x3, #0xd50
   48a88:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48a8c:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   48a90:	add	x3, x3, #0x1a0
   48a94:	add	x1, x1, #0xb60
   48a98:	add	x0, x0, #0x7f0
   48a9c:	mov	w2, #0x729                 	// #1833
   48aa0:	bl	35ac0 <__assert_fail@plt>
   48aa4:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   48aa8:	add	x3, x3, #0xd50
   48aac:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48ab0:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   48ab4:	add	x3, x3, #0x1a0
   48ab8:	add	x1, x1, #0xb60
   48abc:	add	x0, x0, #0x7d0
   48ac0:	mov	w2, #0x728                 	// #1832
   48ac4:	bl	35ac0 <__assert_fail@plt>
   48ac8:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   48acc:	add	x3, x3, #0xd50
   48ad0:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48ad4:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   48ad8:	add	x3, x3, #0x1a0
   48adc:	add	x1, x1, #0xb60
   48ae0:	add	x0, x0, #0x7f0
   48ae4:	mov	w2, #0x754                 	// #1876
   48ae8:	bl	35ac0 <__assert_fail@plt>
   48aec:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   48af0:	add	x3, x3, #0xd50
   48af4:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48af8:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   48afc:	add	x3, x3, #0x1a0
   48b00:	add	x1, x1, #0xb60
   48b04:	add	x0, x0, #0x7d0
   48b08:	mov	w2, #0x753                 	// #1875
   48b0c:	bl	35ac0 <__assert_fail@plt>
   48b10:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   48b14:	add	x3, x3, #0xd50
   48b18:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48b1c:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   48b20:	add	x3, x3, #0x1a0
   48b24:	add	x1, x1, #0xb60
   48b28:	add	x0, x0, #0x7f0
   48b2c:	mov	w2, #0x7b6                 	// #1974
   48b30:	bl	35ac0 <__assert_fail@plt>
   48b34:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   48b38:	add	x3, x3, #0xd50
   48b3c:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48b40:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   48b44:	add	x3, x3, #0x1a0
   48b48:	add	x1, x1, #0xb60
   48b4c:	add	x0, x0, #0x820
   48b50:	mov	w2, #0x7b5                 	// #1973
   48b54:	bl	35ac0 <__assert_fail@plt>
   48b58:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   48b5c:	add	x3, x3, #0xd50
   48b60:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48b64:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   48b68:	add	x3, x3, #0x1a0
   48b6c:	add	x1, x1, #0xb60
   48b70:	add	x0, x0, #0x878
   48b74:	mov	w2, #0x96d                 	// #2413
   48b78:	bl	35ac0 <__assert_fail@plt>
   48b7c:	mov	w19, #0x0                   	// #0
   48b80:	ldp	x21, x22, [sp, #32]
   48b84:	ldp	x23, x24, [sp, #48]
   48b88:	ldp	x27, x28, [sp, #80]
   48b8c:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48b90:	mov	w19, #0x0                   	// #0
   48b94:	ldp	x21, x22, [sp, #32]
   48b98:	ldp	x23, x24, [sp, #48]
   48b9c:	ldp	x27, x28, [sp, #80]
   48ba0:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48ba4:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   48ba8:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   48bac:	mov	w2, w19
   48bb0:	add	x1, x1, #0x9a8
   48bb4:	add	x0, x0, #0x5d8
   48bb8:	bl	359e0 <dcgettext@plt>
   48bbc:	cbz	x25, 48c70 <aarch64_match_operands_constraint@@Base+0x38a8>
   48bc0:	mov	x1, #0x9                   	// #9
   48bc4:	mov	w19, #0x0                   	// #0
   48bc8:	movk	x1, #0x1, lsl #32
   48bcc:	stp	x1, x0, [x25]
   48bd0:	ldp	x21, x22, [sp, #32]
   48bd4:	ldp	x23, x24, [sp, #48]
   48bd8:	ldp	x27, x28, [sp, #80]
   48bdc:	b	4541c <aarch64_match_operands_constraint@@Base+0x54>
   48be0:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   48be4:	add	x3, x3, #0xd50
   48be8:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48bec:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   48bf0:	add	x3, x3, #0x1a0
   48bf4:	add	x1, x1, #0xb60
   48bf8:	add	x0, x0, #0x878
   48bfc:	mov	w2, #0x779                 	// #1913
   48c00:	bl	35ac0 <__assert_fail@plt>
   48c04:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   48c08:	add	x3, x3, #0xd50
   48c0c:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48c10:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   48c14:	add	x3, x3, #0x1a0
   48c18:	add	x1, x1, #0xb60
   48c1c:	add	x0, x0, #0x7f0
   48c20:	mov	w2, #0x777                 	// #1911
   48c24:	bl	35ac0 <__assert_fail@plt>
   48c28:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   48c2c:	add	x3, x3, #0xd50
   48c30:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48c34:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   48c38:	add	x3, x3, #0x1a0
   48c3c:	add	x1, x1, #0xb60
   48c40:	add	x0, x0, #0x820
   48c44:	mov	w2, #0x776                 	// #1910
   48c48:	bl	35ac0 <__assert_fail@plt>
   48c4c:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   48c50:	add	x3, x3, #0xd50
   48c54:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48c58:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   48c5c:	add	x3, x3, #0x1a0
   48c60:	add	x1, x1, #0xb60
   48c64:	add	x0, x0, #0x840
   48c68:	mov	w2, #0x778                 	// #1912
   48c6c:	bl	35ac0 <__assert_fail@plt>
   48c70:	mov	w19, #0x0                   	// #0
   48c74:	ldp	x21, x22, [sp, #32]
   48c78:	ldp	x23, x24, [sp, #48]
   48c7c:	ldp	x27, x28, [sp, #80]
   48c80:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48c84:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   48c88:	add	x3, x3, #0xd50
   48c8c:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48c90:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   48c94:	add	x3, x3, #0x1a0
   48c98:	add	x1, x1, #0xb60
   48c9c:	add	x0, x0, #0x8f0
   48ca0:	mov	w2, #0x7df                 	// #2015
   48ca4:	bl	35ac0 <__assert_fail@plt>
   48ca8:	mov	w19, #0x0                   	// #0
   48cac:	ldp	x21, x22, [sp, #32]
   48cb0:	ldp	x23, x24, [sp, #48]
   48cb4:	ldp	x27, x28, [sp, #80]
   48cb8:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48cbc:	mov	w19, #0x0                   	// #0
   48cc0:	ldp	x21, x22, [sp, #32]
   48cc4:	ldp	x23, x24, [sp, #48]
   48cc8:	ldp	x27, x28, [sp, #80]
   48ccc:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48cd0:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   48cd4:	add	x3, x3, #0xd50
   48cd8:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48cdc:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   48ce0:	add	x3, x3, #0x1a0
   48ce4:	add	x1, x1, #0xb60
   48ce8:	add	x0, x0, #0xbf0
   48cec:	mov	w2, #0x9b3                 	// #2483
   48cf0:	bl	35ac0 <__assert_fail@plt>
   48cf4:	mov	w19, #0x0                   	// #0
   48cf8:	ldp	x21, x22, [sp, #32]
   48cfc:	ldp	x23, x24, [sp, #48]
   48d00:	ldp	x27, x28, [sp, #80]
   48d04:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48d08:	adrp	x3, 62000 <xexit@@Base+0x6a80>
   48d0c:	add	x3, x3, #0xd50
   48d10:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   48d14:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   48d18:	add	x3, x3, #0x1a0
   48d1c:	add	x1, x1, #0xb60
   48d20:	add	x0, x0, #0x518
   48d24:	mov	w2, #0x5bb                 	// #1467
   48d28:	bl	35ac0 <__assert_fail@plt>
   48d2c:	mov	w19, #0x0                   	// #0
   48d30:	ldp	x21, x22, [sp, #32]
   48d34:	ldp	x23, x24, [sp, #48]
   48d38:	ldp	x27, x28, [sp, #80]
   48d3c:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48d40:	mov	w19, #0x0                   	// #0
   48d44:	ldp	x21, x22, [sp, #32]
   48d48:	ldp	x23, x24, [sp, #48]
   48d4c:	ldp	x27, x28, [sp, #80]
   48d50:	b	458c4 <aarch64_match_operands_constraint@@Base+0x4fc>
   48d54:	nop

0000000000048d58 <aarch64_find_real_opcode@@Base>:
   48d58:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   48d5c:	mov	x2, #0x8e39                	// #36409
   48d60:	movk	x2, #0x38e3, lsl #16
   48d64:	ldr	x3, [x1, #3848]
   48d68:	movk	x2, #0xe38e, lsl #32
   48d6c:	movk	x2, #0x8e38, lsl #48
   48d70:	sub	x0, x0, x3
   48d74:	asr	x0, x0, #4
   48d78:	mul	x0, x0, x2
   48d7c:	sub	w0, w0, #0x2
   48d80:	cmp	w0, #0x7fb
   48d84:	b.hi	48da0 <aarch64_find_real_opcode@@Base+0x48>  // b.pmore
   48d88:	adrp	x2, 63000 <xexit@@Base+0x7a80>
   48d8c:	add	x2, x2, #0x4d8
   48d90:	ldrh	w0, [x2, w0, uxtw #1]
   48d94:	adr	x2, 48da0 <aarch64_find_real_opcode@@Base+0x48>
   48d98:	add	x0, x2, w0, sxth #2
   48d9c:	br	x0
   48da0:	mov	x0, #0x0                   	// #0
   48da4:	ret
   48da8:	mov	x0, #0x9f10                	// #40720
   48dac:	movk	x0, #0x2, lsl #16
   48db0:	ldr	x1, [x1, #3848]
   48db4:	add	x0, x0, x1
   48db8:	ret
   48dbc:	mov	x0, #0xac00                	// #44032
   48dc0:	movk	x0, #0x2, lsl #16
   48dc4:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48dc8:	mov	x0, #0x61d0                	// #25040
   48dcc:	movk	x0, #0x1, lsl #16
   48dd0:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48dd4:	mov	x0, #0x5ba0                	// #23456
   48dd8:	movk	x0, #0x1, lsl #16
   48ddc:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48de0:	mov	x0, #0x5f90                	// #24464
   48de4:	movk	x0, #0x1, lsl #16
   48de8:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48dec:	mov	x0, #0x31f0                	// #12784
   48df0:	movk	x0, #0x2, lsl #16
   48df4:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48df8:	mov	x0, #0xa8a0                	// #43168
   48dfc:	movk	x0, #0x2, lsl #16
   48e00:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48e04:	mov	x0, #0x76a0                	// #30368
   48e08:	movk	x0, #0x1, lsl #16
   48e0c:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48e10:	mov	x0, #0x74f0                	// #29936
   48e14:	movk	x0, #0x1, lsl #16
   48e18:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48e1c:	mov	x0, #0xea0                 	// #3744
   48e20:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48e24:	mov	x0, #0x60                  	// #96
   48e28:	movk	x0, #0x3, lsl #16
   48e2c:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48e30:	mov	x0, #0xf910                	// #63760
   48e34:	movk	x0, #0x2, lsl #16
   48e38:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48e3c:	mov	x0, #0xf0                  	// #240
   48e40:	movk	x0, #0x3, lsl #16
   48e44:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48e48:	mov	x0, #0x9fb0                	// #40880
   48e4c:	movk	x0, #0x1, lsl #16
   48e50:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48e54:	mov	x0, #0x9e90                	// #40592
   48e58:	movk	x0, #0x1, lsl #16
   48e5c:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48e60:	mov	x0, #0x5c20                	// #23584
   48e64:	movk	x0, #0x2, lsl #16
   48e68:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48e6c:	mov	x0, #0x5b90                	// #23440
   48e70:	movk	x0, #0x2, lsl #16
   48e74:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48e78:	mov	x0, #0x5a70                	// #23152
   48e7c:	movk	x0, #0x2, lsl #16
   48e80:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48e84:	mov	x0, #0x58c0                	// #22720
   48e88:	movk	x0, #0x2, lsl #16
   48e8c:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48e90:	mov	x0, #0x5710                	// #22288
   48e94:	movk	x0, #0x2, lsl #16
   48e98:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48e9c:	mov	x0, #0x55f0                	// #22000
   48ea0:	movk	x0, #0x2, lsl #16
   48ea4:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48ea8:	mov	x0, #0x5560                	// #21856
   48eac:	movk	x0, #0x2, lsl #16
   48eb0:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48eb4:	mov	x0, #0x54d0                	// #21712
   48eb8:	movk	x0, #0x2, lsl #16
   48ebc:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48ec0:	mov	x0, #0x53b0                	// #21424
   48ec4:	movk	x0, #0x2, lsl #16
   48ec8:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48ecc:	mov	x0, #0x5200                	// #20992
   48ed0:	movk	x0, #0x2, lsl #16
   48ed4:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48ed8:	mov	x0, #0x5050                	// #20560
   48edc:	movk	x0, #0x2, lsl #16
   48ee0:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48ee4:	mov	x0, #0x4f30                	// #20272
   48ee8:	movk	x0, #0x2, lsl #16
   48eec:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48ef0:	mov	x0, #0x4ea0                	// #20128
   48ef4:	movk	x0, #0x2, lsl #16
   48ef8:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48efc:	mov	x0, #0x4e10                	// #19984
   48f00:	movk	x0, #0x2, lsl #16
   48f04:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48f08:	mov	x0, #0x4cf0                	// #19696
   48f0c:	movk	x0, #0x2, lsl #16
   48f10:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48f14:	mov	x0, #0x4b40                	// #19264
   48f18:	movk	x0, #0x2, lsl #16
   48f1c:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48f20:	mov	x0, #0x50                  	// #80
   48f24:	movk	x0, #0x4, lsl #16
   48f28:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48f2c:	mov	x0, #0x180                 	// #384
   48f30:	movk	x0, #0x3, lsl #16
   48f34:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48f38:	mov	x0, #0x6b50                	// #27472
   48f3c:	movk	x0, #0x2, lsl #16
   48f40:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48f44:	mov	x0, #0x6a30                	// #27184
   48f48:	movk	x0, #0x2, lsl #16
   48f4c:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48f50:	mov	x0, #0x69a0                	// #27040
   48f54:	movk	x0, #0x2, lsl #16
   48f58:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48f5c:	mov	x0, #0x6910                	// #26896
   48f60:	movk	x0, #0x2, lsl #16
   48f64:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48f68:	mov	x0, #0x67f0                	// #26608
   48f6c:	movk	x0, #0x2, lsl #16
   48f70:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48f74:	mov	x0, #0x6640                	// #26176
   48f78:	movk	x0, #0x2, lsl #16
   48f7c:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48f80:	mov	x0, #0x6490                	// #25744
   48f84:	movk	x0, #0x2, lsl #16
   48f88:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48f8c:	mov	x0, #0x6370                	// #25456
   48f90:	movk	x0, #0x2, lsl #16
   48f94:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48f98:	mov	x0, #0x62e0                	// #25312
   48f9c:	movk	x0, #0x2, lsl #16
   48fa0:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48fa4:	mov	x0, #0x6250                	// #25168
   48fa8:	movk	x0, #0x2, lsl #16
   48fac:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48fb0:	mov	x0, #0x6130                	// #24880
   48fb4:	movk	x0, #0x2, lsl #16
   48fb8:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48fbc:	mov	x0, #0x5f80                	// #24448
   48fc0:	movk	x0, #0x2, lsl #16
   48fc4:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48fc8:	mov	x0, #0x5dd0                	// #24016
   48fcc:	movk	x0, #0x2, lsl #16
   48fd0:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48fd4:	mov	x0, #0x5cb0                	// #23728
   48fd8:	movk	x0, #0x2, lsl #16
   48fdc:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48fe0:	mov	x0, #0xe8e0                	// #59616
   48fe4:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48fe8:	mov	x0, #0xe7c0                	// #59328
   48fec:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48ff0:	mov	x0, #0x7210                	// #29200
   48ff4:	movk	x0, #0x2, lsl #16
   48ff8:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   48ffc:	mov	x0, #0x70f0                	// #28912
   49000:	movk	x0, #0x2, lsl #16
   49004:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49008:	mov	x0, #0x7060                	// #28768
   4900c:	movk	x0, #0x2, lsl #16
   49010:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49014:	mov	x0, #0x6fd0                	// #28624
   49018:	movk	x0, #0x2, lsl #16
   4901c:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49020:	mov	x0, #0x9d70                	// #40304
   49024:	movk	x0, #0x1, lsl #16
   49028:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   4902c:	mov	x0, #0x9620                	// #38432
   49030:	movk	x0, #0x1, lsl #16
   49034:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49038:	mov	x0, #0x9470                	// #38000
   4903c:	movk	x0, #0x1, lsl #16
   49040:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49044:	mov	x0, #0x9350                	// #37712
   49048:	movk	x0, #0x1, lsl #16
   4904c:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49050:	mov	x0, #0xd2d0                	// #53968
   49054:	movk	x0, #0x2, lsl #16
   49058:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   4905c:	mov	x0, #0xf880                	// #63616
   49060:	movk	x0, #0x2, lsl #16
   49064:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49068:	mov	x0, #0x6eb0                	// #28336
   4906c:	movk	x0, #0x2, lsl #16
   49070:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49074:	mov	x0, #0x6d00                	// #27904
   49078:	movk	x0, #0x2, lsl #16
   4907c:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49080:	mov	x0, #0x35e0                	// #13792
   49084:	movk	x0, #0x2, lsl #16
   49088:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   4908c:	mov	x0, #0x33a0                	// #13216
   49090:	movk	x0, #0x2, lsl #16
   49094:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49098:	mov	x0, #0x4990                	// #18832
   4909c:	movk	x0, #0x2, lsl #16
   490a0:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   490a4:	mov	x0, #0x4870                	// #18544
   490a8:	movk	x0, #0x2, lsl #16
   490ac:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   490b0:	mov	x0, #0x7720                	// #30496
   490b4:	movk	x0, #0x2, lsl #16
   490b8:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   490bc:	mov	x0, #0x7690                	// #30352
   490c0:	movk	x0, #0x2, lsl #16
   490c4:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   490c8:	mov	x0, #0x7570                	// #30064
   490cc:	movk	x0, #0x2, lsl #16
   490d0:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   490d4:	mov	x0, #0x73c0                	// #29632
   490d8:	movk	x0, #0x2, lsl #16
   490dc:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   490e0:	mov	x0, #0x47e0                	// #18400
   490e4:	movk	x0, #0x2, lsl #16
   490e8:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   490ec:	mov	x0, #0x4750                	// #18256
   490f0:	movk	x0, #0x2, lsl #16
   490f4:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   490f8:	mov	x0, #0x2e00                	// #11776
   490fc:	movk	x0, #0x2, lsl #16
   49100:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49104:	mov	x0, #0x2ce0                	// #11488
   49108:	movk	x0, #0x2, lsl #16
   4910c:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49110:	mov	x0, #0xa9d0                	// #43472
   49114:	movk	x0, #0x1, lsl #16
   49118:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   4911c:	mov	x0, #0xa3a0                	// #41888
   49120:	movk	x0, #0x1, lsl #16
   49124:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49128:	mov	x0, #0xa280                	// #41600
   4912c:	movk	x0, #0x1, lsl #16
   49130:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49134:	mov	x0, #0xa0d0                	// #41168
   49138:	movk	x0, #0x1, lsl #16
   4913c:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49140:	mov	x0, #0xdce0                	// #56544
   49144:	movk	x0, #0x3, lsl #16
   49148:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   4914c:	mov	x0, #0x2fb0                	// #12208
   49150:	movk	x0, #0x2, lsl #16
   49154:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49158:	mov	x0, #0x2cf0                	// #11504
   4915c:	movk	x0, #0x1, lsl #16
   49160:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49164:	mov	x0, #0x57c0                	// #22464
   49168:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   4916c:	mov	x0, #0x56a0                	// #22176
   49170:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49174:	mov	x0, #0xdb60                	// #56160
   49178:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   4917c:	mov	x0, #0xda40                	// #55872
   49180:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49184:	mov	x0, #0xb250                	// #45648
   49188:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   4918c:	mov	x0, #0x8820                	// #34848
   49190:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49194:	mov	x0, #0xd80                 	// #3456
   49198:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   4919c:	mov	x0, #0xc60                 	// #3168
   491a0:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   491a4:	mov	x0, #0x990                 	// #2448
   491a8:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   491ac:	mov	x0, #0x7e0                 	// #2016
   491b0:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   491b4:	mov	x0, #0x6c0                 	// #1728
   491b8:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   491bc:	mov	x0, #0x5a0                 	// #1440
   491c0:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   491c4:	mov	x0, #0x3f0                 	// #1008
   491c8:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   491cc:	mov	x0, #0x9230                	// #37424
   491d0:	movk	x0, #0x1, lsl #16
   491d4:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   491d8:	mov	x0, #0x9110                	// #37136
   491dc:	movk	x0, #0x1, lsl #16
   491e0:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   491e4:	mov	x0, #0x8300                	// #33536
   491e8:	movk	x0, #0x1, lsl #16
   491ec:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   491f0:	mov	x0, #0x7850                	// #30800
   491f4:	movk	x0, #0x1, lsl #16
   491f8:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   491fc:	mov	x0, #0x3ffc0               	// #262080
   49200:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49204:	mov	x0, #0xf7f0                	// #63472
   49208:	movk	x0, #0x2, lsl #16
   4920c:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49210:	mov	x0, #0x7c30                	// #31792
   49214:	movk	x0, #0x2, lsl #16
   49218:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   4921c:	mov	x0, #0x7a80                	// #31360
   49220:	movk	x0, #0x2, lsl #16
   49224:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49228:	mov	x0, #0x78d0                	// #30928
   4922c:	movk	x0, #0x2, lsl #16
   49230:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49234:	mov	x0, #0x77b0                	// #30640
   49238:	movk	x0, #0x2, lsl #16
   4923c:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49240:	mov	x0, #0x5580                	// #21888
   49244:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49248:	mov	x0, #0xdaa0                	// #55968
   4924c:	movk	x0, #0x3, lsl #16
   49250:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49254:	mov	x0, #0xdc50                	// #56400
   49258:	movk	x0, #0x3, lsl #16
   4925c:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49260:	mov	x0, #0xffd0                	// #65488
   49264:	movk	x0, #0x2, lsl #16
   49268:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   4926c:	mov	x0, #0x9970                	// #39280
   49270:	movk	x0, #0x2, lsl #16
   49274:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49278:	mov	x0, #0x9850                	// #38992
   4927c:	movk	x0, #0x2, lsl #16
   49280:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49284:	mov	x0, #0x1380                	// #4992
   49288:	movk	x0, #0x3, lsl #16
   4928c:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49290:	mov	x0, #0x2070                	// #8304
   49294:	movk	x0, #0x3, lsl #16
   49298:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   4929c:	mov	x0, #0xdb30                	// #56112
   492a0:	movk	x0, #0x3, lsl #16
   492a4:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   492a8:	mov	x0, #0x1020                	// #4128
   492ac:	movk	x0, #0x3, lsl #16
   492b0:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   492b4:	mov	x0, #0xf00                 	// #3840
   492b8:	movk	x0, #0x3, lsl #16
   492bc:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   492c0:	mov	x0, #0x7b0                 	// #1968
   492c4:	movk	x0, #0x3, lsl #16
   492c8:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   492cc:	mov	x0, #0x720                 	// #1824
   492d0:	movk	x0, #0x3, lsl #16
   492d4:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   492d8:	mov	x0, #0x2a0                 	// #672
   492dc:	movk	x0, #0x3, lsl #16
   492e0:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   492e4:	mov	x0, #0xeb90                	// #60304
   492e8:	movk	x0, #0x2, lsl #16
   492ec:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   492f0:	mov	x0, #0xe9e0                	// #59872
   492f4:	movk	x0, #0x2, lsl #16
   492f8:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   492fc:	mov	x0, #0xe8c0                	// #59584
   49300:	movk	x0, #0x2, lsl #16
   49304:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49308:	mov	x0, #0xe710                	// #59152
   4930c:	movk	x0, #0x2, lsl #16
   49310:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49314:	mov	x0, #0xd1b0                	// #53680
   49318:	movk	x0, #0x2, lsl #16
   4931c:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49320:	mov	x0, #0x450                 	// #1104
   49324:	movk	x0, #0x3, lsl #16
   49328:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   4932c:	mov	x0, #0x3c0                 	// #960
   49330:	movk	x0, #0x3, lsl #16
   49334:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49338:	mov	x0, #0xd360                	// #54112
   4933c:	movk	x0, #0x2, lsl #16
   49340:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49344:	mov	x0, #0x120                 	// #288
   49348:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   4934c:	mov	x0, #0x240                 	// #576
   49350:	b	48db0 <aarch64_find_real_opcode@@Base+0x58>
   49354:	nop

0000000000049358 <aarch64_insert_operand@@Base>:
   49358:	adrp	x6, a6000 <aarch64_operands@@Base+0x16bd0>
   4935c:	mov	x5, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
   49360:	movk	x5, #0xaaab
   49364:	ldr	x6, [x6, #4032]
   49368:	sub	x6, x0, x6
   4936c:	asr	x6, x6, #4
   49370:	mul	x6, x6, x5
   49374:	sub	w5, w6, #0x1
   49378:	cmp	w5, #0xce
   4937c:	b.ls	493a8 <aarch64_insert_operand@@Base+0x50>  // b.plast
   49380:	stp	x29, x30, [sp, #-16]!
   49384:	adrp	x3, 64000 <fields@@Base+0xf60>
   49388:	adrp	x1, 64000 <fields@@Base+0xf60>
   4938c:	mov	x29, sp
   49390:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   49394:	add	x3, x3, #0x5a0
   49398:	add	x1, x1, #0x5b8
   4939c:	add	x0, x0, #0x870
   493a0:	mov	w2, #0x35f                 	// #863
   493a4:	bl	35ac0 <__assert_fail@plt>
   493a8:	adrp	x6, 64000 <fields@@Base+0xf60>
   493ac:	add	x6, x6, #0x4d0
   493b0:	ldrb	w5, [x6, w5, uxtw]
   493b4:	adr	x6, 493c0 <aarch64_insert_operand@@Base+0x68>
   493b8:	add	x5, x6, w5, sxtb #2
   493bc:	br	x5
   493c0:	b	35200 <aarch64_ins_regno@plt>
   493c4:	b	357e0 <aarch64_ins_imm@plt>
   493c8:	b	35130 <aarch64_ins_sve_addr_rr_lsl@plt>
   493cc:	b	350b0 <aarch64_ins_sve_addr_rz_xtw@plt>
   493d0:	b	35070 <aarch64_ins_sve_quad_index@plt>
   493d4:	b	35690 <aarch64_ins_reglane@plt>
   493d8:	b	35330 <aarch64_ins_sysins_op@plt>
   493dc:	b	35300 <aarch64_ins_addr_simm@plt>
   493e0:	b	352c0 <aarch64_ins_sve_addr_ri_u6@plt>
   493e4:	b	351f0 <aarch64_ins_sve_addr_ri_s4xvl@plt>
   493e8:	b	35a20 <aarch64_ins_sve_addr_zi_u5@plt>
   493ec:	b	35550 <aarch64_ins_advsimd_imm_modified@plt>
   493f0:	b	35810 <aarch64_ins_sve_shrimm@plt>
   493f4:	b	35a30 <aarch64_ins_sve_shlimm@plt>
   493f8:	b	350e0 <aarch64_ins_imm_rotate1@plt>
   493fc:	b	356b0 <aarch64_ins_imm_rotate2@plt>
   49400:	b	35700 <aarch64_ins_addr_simple@plt>
   49404:	b	35080 <aarch64_ins_cond@plt>
   49408:	b	35860 <aarch64_ins_barrier@plt>
   4940c:	b	35630 <aarch64_ins_hint@plt>
   49410:	b	358e0 <aarch64_ins_advsimd_imm_shift@plt>
   49414:	b	354b0 <aarch64_ins_fpimm@plt>
   49418:	b	35600 <aarch64_ins_sve_addr_ri_s4@plt>
   4941c:	b	350d0 <aarch64_ins_sve_reglist@plt>
   49420:	b	353a0 <aarch64_ins_limm@plt>
   49424:	b	35450 <aarch64_ins_reg_shifted@plt>
   49428:	b	359b0 <aarch64_ins_reg_extended@plt>
   4942c:	b	35730 <aarch64_ins_addr_uimm12@plt>
   49430:	b	351b0 <aarch64_ins_addr_simm10@plt>
   49434:	b	35620 <aarch64_ins_prfop@plt>
   49438:	b	358b0 <aarch64_ins_addr_regoff@plt>
   4943c:	b	35b30 <aarch64_ins_sve_addr_ri_s9xvl@plt>
   49440:	b	35940 <aarch64_ins_sve_addr_ri_s6xvl@plt>
   49444:	b	35030 <aarch64_ins_sve_float_zero_one@plt>
   49448:	b	35650 <aarch64_ins_sve_float_half_two@plt>
   4944c:	b	35ad0 <aarch64_ins_sve_float_half_one@plt>
   49450:	b	35990 <aarch64_ins_sve_asimm@plt>
   49454:	b	35920 <aarch64_ins_sve_aimm@plt>
   49458:	b	356a0 <aarch64_ins_sve_addr_zz_uxtw@plt>
   4945c:	b	35570 <aarch64_ins_sve_addr_zz_sxtw@plt>
   49460:	b	35290 <aarch64_ins_sve_addr_zz_lsl@plt>
   49464:	b	354f0 <aarch64_ins_sve_limm_mov@plt>
   49468:	b	35780 <aarch64_ins_inv_limm@plt>
   4946c:	b	35140 <aarch64_ins_sve_scale@plt>
   49470:	b	35340 <aarch64_ins_ft@plt>
   49474:	b	35240 <aarch64_ins_pstatefield@plt>
   49478:	b	35490 <aarch64_ins_sysreg@plt>
   4947c:	b	35040 <aarch64_ins_simd_addr_post@plt>
   49480:	b	357f0 <aarch64_ins_addr_offset@plt>
   49484:	b	352d0 <aarch64_ins_sve_index@plt>
   49488:	b	35220 <aarch64_ins_aimm@plt>
   4948c:	b	356d0 <aarch64_ins_fbits@plt>
   49490:	b	356e0 <aarch64_ins_imm_half@plt>
   49494:	b	35820 <aarch64_ins_ldst_elemlist@plt>
   49498:	b	35560 <aarch64_ins_ldst_reglist_r@plt>
   4949c:	b	35aa0 <aarch64_ins_ldst_reglist@plt>
   494a0:	b	355e0 <aarch64_ins_reglist@plt>
   494a4:	nop

00000000000494a8 <aarch64_opcode_lookup@@Base>:
   494a8:	tbnz	w0, #26, 494d4 <aarch64_opcode_lookup@@Base+0x2c>
   494ac:	tbnz	w0, #25, 49548 <aarch64_opcode_lookup@@Base+0xa0>
   494b0:	tbnz	w0, #27, 4956c <aarch64_opcode_lookup@@Base+0xc4>
   494b4:	tbnz	w0, #24, 49698 <aarch64_opcode_lookup@@Base+0x1f0>
   494b8:	lsr	w1, w0, #31
   494bc:	add	w1, w1, #0x4a2
   494c0:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   494c4:	mov	w2, #0x90                  	// #144
   494c8:	ldr	x0, [x0, #3848]
   494cc:	smaddl	x0, w1, w2, x0
   494d0:	ret
   494d4:	tbnz	w0, #27, 49520 <aarch64_opcode_lookup@@Base+0x78>
   494d8:	tbnz	w0, #28, 495c4 <aarch64_opcode_lookup@@Base+0x11c>
   494dc:	tbnz	w0, #24, 4973c <aarch64_opcode_lookup@@Base+0x294>
   494e0:	tbnz	w0, #29, 49818 <aarch64_opcode_lookup@@Base+0x370>
   494e4:	tbnz	w0, #13, 49a90 <aarch64_opcode_lookup@@Base+0x5e8>
   494e8:	tbnz	w0, #14, 49f28 <aarch64_opcode_lookup@@Base+0xa80>
   494ec:	tbnz	w0, #15, 4a46c <aarch64_opcode_lookup@@Base+0xfc4>
   494f0:	tbnz	w0, #21, 4a770 <aarch64_opcode_lookup@@Base+0x12c8>
   494f4:	tbnz	w0, #30, 4b1d4 <aarch64_opcode_lookup@@Base+0x1d2c>
   494f8:	tbnz	w0, #31, 4c52c <aarch64_opcode_lookup@@Base+0x3084>
   494fc:	tbnz	w0, #16, 4c7d0 <aarch64_opcode_lookup@@Base+0x3328>
   49500:	tbnz	w0, #17, 4dd20 <aarch64_opcode_lookup@@Base+0x4878>
   49504:	tbnz	w0, #18, 4dd78 <aarch64_opcode_lookup@@Base+0x48d0>
   49508:	tbnz	w0, #19, 4ea38 <aarch64_opcode_lookup@@Base+0x5590>
   4950c:	tst	x0, #0x100000
   49510:	mov	w1, #0x6d1                 	// #1745
   49514:	mov	w0, #0x4fc                 	// #1276
   49518:	csel	w1, w0, w1, eq  // eq = none
   4951c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49520:	tbnz	w0, #25, 49600 <aarch64_opcode_lookup@@Base+0x158>
   49524:	tbnz	w0, #28, 49678 <aarch64_opcode_lookup@@Base+0x1d0>
   49528:	tbnz	w0, #22, 497e8 <aarch64_opcode_lookup@@Base+0x340>
   4952c:	tbnz	w0, #23, 49b18 <aarch64_opcode_lookup@@Base+0x670>
   49530:	tbnz	w0, #24, 49ebc <aarch64_opcode_lookup@@Base+0xa14>
   49534:	tst	x0, #0x20000000
   49538:	mov	w1, #0x3cc                 	// #972
   4953c:	mov	w0, #0x1b8                 	// #440
   49540:	csel	w1, w0, w1, eq  // eq = none
   49544:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49548:	tbnz	w0, #24, 4959c <aarch64_opcode_lookup@@Base+0xf4>
   4954c:	tbnz	w0, #27, 496d4 <aarch64_opcode_lookup@@Base+0x22c>
   49550:	tbnz	w0, #23, 49850 <aarch64_opcode_lookup@@Base+0x3a8>
   49554:	tbnz	w0, #29, 49b04 <aarch64_opcode_lookup@@Base+0x65c>
   49558:	tst	x0, #0x40000000
   4955c:	mov	w1, #0x3e2                 	// #994
   49560:	mov	w0, #0x3de                 	// #990
   49564:	csel	w1, w0, w1, eq  // eq = none
   49568:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4956c:	tbnz	w0, #28, 49638 <aarch64_opcode_lookup@@Base+0x190>
   49570:	tbnz	w0, #22, 4976c <aarch64_opcode_lookup@@Base+0x2c4>
   49574:	tbnz	w0, #23, 49ae8 <aarch64_opcode_lookup@@Base+0x640>
   49578:	tbnz	w0, #29, 49c40 <aarch64_opcode_lookup@@Base+0x798>
   4957c:	tbnz	w0, #15, 4a4b8 <aarch64_opcode_lookup@@Base+0x1010>
   49580:	tbnz	w0, #21, 4a914 <aarch64_opcode_lookup@@Base+0x146c>
   49584:	tbnz	w0, #31, 4c95c <aarch64_opcode_lookup@@Base+0x34b4>
   49588:	tst	x0, #0x40000000
   4958c:	mov	w1, #0x3ae                 	// #942
   49590:	mov	w0, #0x3a8                 	// #936
   49594:	csel	w1, w0, w1, eq  // eq = none
   49598:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4959c:	tbnz	w0, #27, 496b0 <aarch64_opcode_lookup@@Base+0x208>
   495a0:	mov	w1, #0x2f5                 	// #757
   495a4:	tbnz	w0, #23, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   495a8:	mov	w1, #0x271                 	// #625
   495ac:	tbnz	w0, #29, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   495b0:	tst	x0, #0x40000000
   495b4:	mov	w1, #0x275                 	// #629
   495b8:	mov	w0, #0x26a                 	// #618
   495bc:	csel	w1, w0, w1, eq  // eq = none
   495c0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   495c4:	tbnz	w0, #29, 49724 <aarch64_opcode_lookup@@Base+0x27c>
   495c8:	tbz	w0, #30, 49844 <aarch64_opcode_lookup@@Base+0x39c>
   495cc:	tbnz	w0, #24, 49a5c <aarch64_opcode_lookup@@Base+0x5b4>
   495d0:	tbnz	w0, #4, 49d24 <aarch64_opcode_lookup@@Base+0x87c>
   495d4:	tbnz	w0, #25, 4a3d0 <aarch64_opcode_lookup@@Base+0xf28>
   495d8:	mov	w1, #0x291                 	// #657
   495dc:	tbz	w0, #31, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   495e0:	tbnz	w0, #0, 4addc <aarch64_opcode_lookup@@Base+0x1934>
   495e4:	tbnz	w0, #1, 4b8e0 <aarch64_opcode_lookup@@Base+0x2438>
   495e8:	tbz	w0, #21, 4d324 <aarch64_opcode_lookup@@Base+0x3e7c>
   495ec:	tst	x0, #0x400000
   495f0:	mov	w1, #0x4a7                 	// #1191
   495f4:	mov	w0, #0x2f0                 	// #752
   495f8:	csel	w1, w0, w1, eq  // eq = none
   495fc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49600:	tbnz	w0, #24, 496f4 <aarch64_opcode_lookup@@Base+0x24c>
   49604:	tbz	w0, #21, 498d8 <aarch64_opcode_lookup@@Base+0x430>
   49608:	tbnz	w0, #28, 4995c <aarch64_opcode_lookup@@Base+0x4b4>
   4960c:	tbnz	w0, #15, 49d98 <aarch64_opcode_lookup@@Base+0x8f0>
   49610:	tbnz	w0, #29, 4a1b8 <aarch64_opcode_lookup@@Base+0xd10>
   49614:	tbnz	w0, #31, 4ba54 <aarch64_opcode_lookup@@Base+0x25ac>
   49618:	tbnz	w0, #10, 4ad50 <aarch64_opcode_lookup@@Base+0x18a8>
   4961c:	tbnz	w0, #11, 4b6b0 <aarch64_opcode_lookup@@Base+0x2208>
   49620:	tbnz	w0, #12, 4c584 <aarch64_opcode_lookup@@Base+0x30dc>
   49624:	tbnz	w0, #13, 4cb64 <aarch64_opcode_lookup@@Base+0x36bc>
   49628:	tbnz	w0, #14, 4def0 <aarch64_opcode_lookup@@Base+0x4a48>
   4962c:	ubfx	x0, x0, #30, #1
   49630:	add	w1, w0, #0x2c
   49634:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49638:	tbz	w0, #24, 497d0 <aarch64_opcode_lookup@@Base+0x328>
   4963c:	tbnz	w0, #23, 49994 <aarch64_opcode_lookup@@Base+0x4ec>
   49640:	tbnz	w0, #22, 49bf8 <aarch64_opcode_lookup@@Base+0x750>
   49644:	tbnz	w0, #29, 4a324 <aarch64_opcode_lookup@@Base+0xe7c>
   49648:	mov	w1, #0x374                 	// #884
   4964c:	tbnz	w0, #10, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49650:	mov	w1, #0x370                 	// #880
   49654:	tbnz	w0, #11, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49658:	mov	w1, #0x3c3                 	// #963
   4965c:	tbnz	w0, #21, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49660:	tbnz	w0, #30, 4b674 <aarch64_opcode_lookup@@Base+0x21cc>
   49664:	cmp	w0, #0x0
   49668:	mov	w1, #0x951                 	// #2385
   4966c:	mov	w0, #0x949                 	// #2377
   49670:	csel	w1, w0, w1, ge  // ge = tcont
   49674:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49678:	tbnz	w0, #24, 49884 <aarch64_opcode_lookup@@Base+0x3dc>
   4967c:	mov	w1, #0x3db                 	// #987
   49680:	tbz	w0, #29, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49684:	tbnz	w0, #10, 49b98 <aarch64_opcode_lookup@@Base+0x6f0>
   49688:	tbnz	w0, #11, 49fb4 <aarch64_opcode_lookup@@Base+0xb0c>
   4968c:	ubfx	x0, x0, #22, #1
   49690:	add	w1, w0, #0x39c
   49694:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49698:	tbnz	w0, #29, 497bc <aarch64_opcode_lookup@@Base+0x314>
   4969c:	tst	x0, #0x40000000
   496a0:	mov	w1, #0x10                  	// #16
   496a4:	mov	w0, #0xc                   	// #12
   496a8:	csel	w1, w0, w1, eq  // eq = none
   496ac:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   496b0:	tbz	w0, #21, 498bc <aarch64_opcode_lookup@@Base+0x414>
   496b4:	tbnz	w0, #23, 49a0c <aarch64_opcode_lookup@@Base+0x564>
   496b8:	tbnz	w0, #28, 49e4c <aarch64_opcode_lookup@@Base+0x9a4>
   496bc:	tbnz	w0, #29, 4a4ec <aarch64_opcode_lookup@@Base+0x1044>
   496c0:	tst	x0, #0x40000000
   496c4:	mov	w1, #0x9                   	// #9
   496c8:	mov	w0, #0x6                   	// #6
   496cc:	csel	w1, w0, w1, eq  // eq = none
   496d0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   496d4:	tbnz	w0, #21, 4986c <aarch64_opcode_lookup@@Base+0x3c4>
   496d8:	tbnz	w0, #28, 4990c <aarch64_opcode_lookup@@Base+0x464>
   496dc:	tbnz	w0, #29, 49cac <aarch64_opcode_lookup@@Base+0x804>
   496e0:	tst	x0, #0x40000000
   496e4:	mov	w1, #0x3ec                 	// #1004
   496e8:	mov	w0, #0x3e5                 	// #997
   496ec:	csel	w1, w0, w1, eq  // eq = none
   496f0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   496f4:	tbnz	w0, #15, 49890 <aarch64_opcode_lookup@@Base+0x3e8>
   496f8:	tbnz	w0, #28, 49a20 <aarch64_opcode_lookup@@Base+0x578>
   496fc:	tbnz	w0, #10, 49e84 <aarch64_opcode_lookup@@Base+0x9dc>
   49700:	tbnz	w0, #12, 4a184 <aarch64_opcode_lookup@@Base+0xcdc>
   49704:	tbnz	w0, #13, 4aa94 <aarch64_opcode_lookup@@Base+0x15ec>
   49708:	tbnz	w0, #14, 4b5f0 <aarch64_opcode_lookup@@Base+0x2148>
   4970c:	tbnz	w0, #29, 4cf40 <aarch64_opcode_lookup@@Base+0x3a98>
   49710:	tst	x0, #0x40000000
   49714:	mov	w1, #0x942                 	// #2370
   49718:	mov	w0, #0x93e                 	// #2366
   4971c:	csel	w1, w0, w1, eq  // eq = none
   49720:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49724:	tbnz	w0, #24, 49804 <aarch64_opcode_lookup@@Base+0x35c>
   49728:	tst	x0, #0x2000000
   4972c:	mov	w1, #0x4d4                 	// #1236
   49730:	mov	w0, #0x28f                 	// #655
   49734:	csel	w1, w0, w1, eq  // eq = none
   49738:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4973c:	tbz	w0, #29, 49794 <aarch64_opcode_lookup@@Base+0x2ec>
   49740:	tbnz	w0, #15, 49b54 <aarch64_opcode_lookup@@Base+0x6ac>
   49744:	tbnz	w0, #14, 49f4c <aarch64_opcode_lookup@@Base+0xaa4>
   49748:	tbnz	w0, #13, 4a3f0 <aarch64_opcode_lookup@@Base+0xf48>
   4974c:	tbnz	w0, #30, 4a86c <aarch64_opcode_lookup@@Base+0x13c4>
   49750:	tbnz	w0, #21, 4b3d4 <aarch64_opcode_lookup@@Base+0x1f2c>
   49754:	tbnz	w0, #31, 4c4c0 <aarch64_opcode_lookup@@Base+0x3018>
   49758:	tst	x0, #0x10
   4975c:	mov	w1, #0x52d                 	// #1325
   49760:	mov	w0, #0x52a                 	// #1322
   49764:	csel	w1, w0, w1, eq  // eq = none
   49768:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4976c:	tbnz	w0, #23, 49a74 <aarch64_opcode_lookup@@Base+0x5cc>
   49770:	tbnz	w0, #29, 49d70 <aarch64_opcode_lookup@@Base+0x8c8>
   49774:	tbnz	w0, #15, 4a33c <aarch64_opcode_lookup@@Base+0xe94>
   49778:	tbnz	w0, #21, 4ab50 <aarch64_opcode_lookup@@Base+0x16a8>
   4977c:	tbnz	w0, #31, 4c954 <aarch64_opcode_lookup@@Base+0x34ac>
   49780:	tst	x0, #0x40000000
   49784:	mov	w1, #0x3b0                 	// #944
   49788:	mov	w0, #0x3aa                 	// #938
   4978c:	csel	w1, w0, w1, eq  // eq = none
   49790:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49794:	tbnz	w0, #30, 4992c <aarch64_opcode_lookup@@Base+0x484>
   49798:	tbnz	w0, #31, 49f7c <aarch64_opcode_lookup@@Base+0xad4>
   4979c:	tbnz	w0, #21, 49fc0 <aarch64_opcode_lookup@@Base+0xb18>
   497a0:	tbnz	w0, #20, 4a638 <aarch64_opcode_lookup@@Base+0x1190>
   497a4:	tbnz	w0, #22, 4ae3c <aarch64_opcode_lookup@@Base+0x1994>
   497a8:	tst	x0, #0x800000
   497ac:	mov	w1, #0x503                 	// #1283
   497b0:	mov	w0, #0x6db                 	// #1755
   497b4:	csel	w1, w0, w1, eq  // eq = none
   497b8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   497bc:	tst	x0, #0x40000000
   497c0:	mov	w1, #0x11                  	// #17
   497c4:	mov	w0, #0xe                   	// #14
   497c8:	csel	w1, w0, w1, eq  // eq = none
   497cc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   497d0:	tbnz	w0, #29, 499c0 <aarch64_opcode_lookup@@Base+0x518>
   497d4:	mov	w1, #0x3da                 	// #986
   497d8:	tbz	w0, #31, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   497dc:	ubfx	x0, x0, #30, #1
   497e0:	add	w1, w0, #0x3dc
   497e4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   497e8:	tbnz	w0, #23, 499ec <aarch64_opcode_lookup@@Base+0x544>
   497ec:	tbnz	w0, #24, 49c8c <aarch64_opcode_lookup@@Base+0x7e4>
   497f0:	tst	x0, #0x20000000
   497f4:	mov	w1, #0x3cd                 	// #973
   497f8:	mov	w0, #0x1bc                 	// #444
   497fc:	csel	w1, w0, w1, eq  // eq = none
   49800:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49804:	tst	x0, #0x2000000
   49808:	mov	w1, #0x4d5                 	// #1237
   4980c:	mov	w0, #0x290                 	// #656
   49810:	csel	w1, w0, w1, eq  // eq = none
   49814:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49818:	tbnz	w0, #21, 49a3c <aarch64_opcode_lookup@@Base+0x594>
   4981c:	tbnz	w0, #15, 49e9c <aarch64_opcode_lookup@@Base+0x9f4>
   49820:	tbnz	w0, #30, 4a108 <aarch64_opcode_lookup@@Base+0xc60>
   49824:	tbnz	w0, #13, 4a804 <aarch64_opcode_lookup@@Base+0x135c>
   49828:	tbnz	w0, #14, 4b23c <aarch64_opcode_lookup@@Base+0x1d94>
   4982c:	tbnz	w0, #31, 4c144 <aarch64_opcode_lookup@@Base+0x2c9c>
   49830:	tst	x0, #0x10
   49834:	mov	w1, #0x52e                 	// #1326
   49838:	mov	w0, #0x531                 	// #1329
   4983c:	csel	w1, w0, w1, eq  // eq = none
   49840:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49844:	lsr	w1, w0, #31
   49848:	add	w1, w1, #0x27c
   4984c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49850:	mov	w1, #0x4a1                 	// #1185
   49854:	tbnz	w0, #29, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49858:	tst	x0, #0x40000000
   4985c:	mov	w1, #0x49f                 	// #1183
   49860:	mov	w0, #0x49d                 	// #1181
   49864:	csel	w1, w0, w1, eq  // eq = none
   49868:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4986c:	tbnz	w0, #29, 498f8 <aarch64_opcode_lookup@@Base+0x450>
   49870:	tst	x0, #0x40000000
   49874:	mov	w1, #0x3ed                 	// #1005
   49878:	mov	w0, #0x3e6                 	// #998
   4987c:	csel	w1, w0, w1, eq  // eq = none
   49880:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49884:	ubfx	x0, x0, #22, #1
   49888:	add	w1, w0, #0x37b
   4988c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49890:	tbnz	w0, #28, 49b38 <aarch64_opcode_lookup@@Base+0x690>
   49894:	tbnz	w0, #10, 49bd8 <aarch64_opcode_lookup@@Base+0x730>
   49898:	tbnz	w0, #12, 4a1fc <aarch64_opcode_lookup@@Base+0xd54>
   4989c:	tbnz	w0, #13, 4a94c <aarch64_opcode_lookup@@Base+0x14a4>
   498a0:	tbnz	w0, #14, 4b0d4 <aarch64_opcode_lookup@@Base+0x1c2c>
   498a4:	tbz	w0, #29, 4cb88 <aarch64_opcode_lookup@@Base+0x36e0>
   498a8:	tst	x0, #0x40000000
   498ac:	mov	w1, #0x944                 	// #2372
   498b0:	mov	w0, #0x940                 	// #2368
   498b4:	csel	w1, w0, w1, eq  // eq = none
   498b8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   498bc:	tbnz	w0, #28, 49ac4 <aarch64_opcode_lookup@@Base+0x61c>
   498c0:	tbnz	w0, #29, 49c2c <aarch64_opcode_lookup@@Base+0x784>
   498c4:	tst	x0, #0x40000000
   498c8:	mov	w1, #0x18                  	// #24
   498cc:	mov	w0, #0x15                  	// #21
   498d0:	csel	w1, w0, w1, eq  // eq = none
   498d4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   498d8:	tbnz	w0, #28, 49b78 <aarch64_opcode_lookup@@Base+0x6d0>
   498dc:	tbnz	w0, #29, 49ba4 <aarch64_opcode_lookup@@Base+0x6fc>
   498e0:	tbnz	w0, #31, 4a578 <aarch64_opcode_lookup@@Base+0x10d0>
   498e4:	tbnz	w0, #10, 4a614 <aarch64_opcode_lookup@@Base+0x116c>
   498e8:	tbnz	w0, #11, 4ae0c <aarch64_opcode_lookup@@Base+0x1964>
   498ec:	ubfx	x0, x0, #12, #1
   498f0:	add	w1, w0, #0x1a4
   498f4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   498f8:	tst	x0, #0x40000000
   498fc:	mov	w1, #0x3f0                 	// #1008
   49900:	mov	w0, #0x3ea                 	// #1002
   49904:	csel	w1, w0, w1, eq  // eq = none
   49908:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4990c:	tbnz	w0, #10, 49d4c <aarch64_opcode_lookup@@Base+0x8a4>
   49910:	tbnz	w0, #11, 4a030 <aarch64_opcode_lookup@@Base+0xb88>
   49914:	tbnz	w0, #22, 4aadc <aarch64_opcode_lookup@@Base+0x1634>
   49918:	tbnz	w0, #23, 4b098 <aarch64_opcode_lookup@@Base+0x1bf0>
   4991c:	tbnz	w0, #29, 4be90 <aarch64_opcode_lookup@@Base+0x29e8>
   49920:	ubfx	x0, x0, #30, #1
   49924:	lsl	w1, w0, #1
   49928:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4992c:	tbnz	w0, #13, 49dc8 <aarch64_opcode_lookup@@Base+0x920>
   49930:	tbnz	w0, #14, 4a064 <aarch64_opcode_lookup@@Base+0xbbc>
   49934:	tbnz	w0, #15, 4ac94 <aarch64_opcode_lookup@@Base+0x17ec>
   49938:	tbnz	w0, #21, 4b528 <aarch64_opcode_lookup@@Base+0x2080>
   4993c:	tbnz	w0, #31, 4d16c <aarch64_opcode_lookup@@Base+0x3cc4>
   49940:	tbnz	w0, #10, 4c2e8 <aarch64_opcode_lookup@@Base+0x2e40>
   49944:	tbnz	w0, #11, 4cfe8 <aarch64_opcode_lookup@@Base+0x3b40>
   49948:	tst	x0, #0x1000
   4994c:	mov	w1, #0x8b9                 	// #2233
   49950:	mov	w0, #0x84e                 	// #2126
   49954:	csel	w1, w0, w1, eq  // eq = none
   49958:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4995c:	tbnz	w0, #10, 49c54 <aarch64_opcode_lookup@@Base+0x7ac>
   49960:	tbnz	w0, #11, 4a25c <aarch64_opcode_lookup@@Base+0xdb4>
   49964:	tbnz	w0, #12, 4aba8 <aarch64_opcode_lookup@@Base+0x1700>
   49968:	tbnz	w0, #13, 4b224 <aarch64_opcode_lookup@@Base+0x1d7c>
   4996c:	tbnz	w0, #14, 4bea0 <aarch64_opcode_lookup@@Base+0x29f8>
   49970:	tbnz	w0, #16, 4d3fc <aarch64_opcode_lookup@@Base+0x3f54>
   49974:	tbnz	w0, #17, 4e668 <aarch64_opcode_lookup@@Base+0x51c0>
   49978:	tbnz	w0, #18, 4ebc0 <aarch64_opcode_lookup@@Base+0x5718>
   4997c:	tbnz	w0, #19, 4eed4 <aarch64_opcode_lookup@@Base+0x5a2c>
   49980:	tst	x0, #0x100000
   49984:	mov	w1, #0x313                 	// #787
   49988:	mov	w0, #0x2ff                 	// #767
   4998c:	csel	w1, w0, w1, eq  // eq = none
   49990:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49994:	tbnz	w0, #29, 49c74 <aarch64_opcode_lookup@@Base+0x7cc>
   49998:	tbnz	w0, #10, 4a300 <aarch64_opcode_lookup@@Base+0xe58>
   4999c:	tbnz	w0, #11, 4a980 <aarch64_opcode_lookup@@Base+0x14d8>
   499a0:	tbnz	w0, #21, 4b1f4 <aarch64_opcode_lookup@@Base+0x1d4c>
   499a4:	tbnz	w0, #22, 4bd74 <aarch64_opcode_lookup@@Base+0x28cc>
   499a8:	tbnz	w0, #30, 4dbd0 <aarch64_opcode_lookup@@Base+0x4728>
   499ac:	cmp	w0, #0x0
   499b0:	mov	w1, #0x953                 	// #2387
   499b4:	mov	w0, #0x94c                 	// #2380
   499b8:	csel	w1, w0, w1, ge  // ge = tcont
   499bc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   499c0:	tbnz	w0, #10, 49df0 <aarch64_opcode_lookup@@Base+0x948>
   499c4:	tbnz	w0, #11, 4a0c8 <aarch64_opcode_lookup@@Base+0xc20>
   499c8:	tbnz	w0, #21, 4aa28 <aarch64_opcode_lookup@@Base+0x1580>
   499cc:	tbnz	w0, #23, 4b050 <aarch64_opcode_lookup@@Base+0x1ba8>
   499d0:	tbnz	w0, #22, 4bdfc <aarch64_opcode_lookup@@Base+0x2954>
   499d4:	tbnz	w0, #31, 4df64 <aarch64_opcode_lookup@@Base+0x4abc>
   499d8:	tst	x0, #0x40000000
   499dc:	mov	w1, #0x39e                 	// #926
   499e0:	mov	w0, #0x399                 	// #921
   499e4:	csel	w1, w0, w1, eq  // eq = none
   499e8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   499ec:	mov	w1, #0x3d7                 	// #983
   499f0:	tbnz	w0, #29, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   499f4:	tbnz	w0, #21, 49f9c <aarch64_opcode_lookup@@Base+0xaf4>
   499f8:	mov	w1, #0x1c4                 	// #452
   499fc:	tbz	w0, #24, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49a00:	ubfx	x0, x0, #13, #1
   49a04:	add	w1, w0, #0x1d8
   49a08:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49a0c:	tst	x0, #0x8000
   49a10:	mov	w1, #0x2ea                 	// #746
   49a14:	mov	w0, #0x2e8                 	// #744
   49a18:	csel	w1, w0, w1, eq  // eq = none
   49a1c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49a20:	tbnz	w0, #29, 49e14 <aarch64_opcode_lookup@@Base+0x96c>
   49a24:	tbnz	w0, #30, 4a0ec <aarch64_opcode_lookup@@Base+0xc44>
   49a28:	tst	x0, #0x200000
   49a2c:	mov	w1, #0x35d                 	// #861
   49a30:	mov	w0, #0x359                 	// #857
   49a34:	csel	w1, w0, w1, eq  // eq = none
   49a38:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49a3c:	tbnz	w0, #13, 49e30 <aarch64_opcode_lookup@@Base+0x988>
   49a40:	tbnz	w0, #30, 4a2e0 <aarch64_opcode_lookup@@Base+0xe38>
   49a44:	tbnz	w0, #31, 4acf4 <aarch64_opcode_lookup@@Base+0x184c>
   49a48:	tst	x0, #0x10
   49a4c:	mov	w1, #0x530                 	// #1328
   49a50:	mov	w0, #0x533                 	// #1331
   49a54:	csel	w1, w0, w1, eq  // eq = none
   49a58:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49a5c:	tbnz	w0, #21, 49d84 <aarch64_opcode_lookup@@Base+0x8dc>
   49a60:	mov	w1, #0x32a                 	// #810
   49a64:	tbz	w0, #25, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49a68:	ubfx	x0, x0, #10, #1
   49a6c:	add	w1, w0, #0x283
   49a70:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49a74:	tbnz	w0, #29, 49cc0 <aarch64_opcode_lookup@@Base+0x818>
   49a78:	tbnz	w0, #15, 4a21c <aarch64_opcode_lookup@@Base+0xd74>
   49a7c:	tbnz	w0, #21, 4a98c <aarch64_opcode_lookup@@Base+0x14e4>
   49a80:	tbnz	w0, #31, 4c658 <aarch64_opcode_lookup@@Base+0x31b0>
   49a84:	ubfx	x0, x0, #30, #1
   49a88:	add	w1, w0, #0x3c5
   49a8c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49a90:	tbnz	w0, #14, 49e60 <aarch64_opcode_lookup@@Base+0x9b8>
   49a94:	tbnz	w0, #15, 4a158 <aarch64_opcode_lookup@@Base+0xcb0>
   49a98:	tbnz	w0, #21, 4a660 <aarch64_opcode_lookup@@Base+0x11b8>
   49a9c:	tbnz	w0, #30, 4b4cc <aarch64_opcode_lookup@@Base+0x2024>
   49aa0:	tbnz	w0, #31, 4c504 <aarch64_opcode_lookup@@Base+0x305c>
   49aa4:	tbnz	w0, #17, 4c998 <aarch64_opcode_lookup@@Base+0x34f0>
   49aa8:	tbnz	w0, #19, 4dc0c <aarch64_opcode_lookup@@Base+0x4764>
   49aac:	tbnz	w0, #20, 4e994 <aarch64_opcode_lookup@@Base+0x54ec>
   49ab0:	tst	x0, #0x10000
   49ab4:	mov	w1, #0x7a7                 	// #1959
   49ab8:	mov	w0, #0x70f                 	// #1807
   49abc:	csel	w1, w0, w1, eq  // eq = none
   49ac0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49ac4:	mov	w1, #0x2e1                 	// #737
   49ac8:	tbnz	w0, #15, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49acc:	mov	w1, #0x2df                 	// #735
   49ad0:	tbz	w0, #22, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49ad4:	tst	x0, #0x800000
   49ad8:	mov	w1, #0x2ec                 	// #748
   49adc:	mov	w0, #0x2e7                 	// #743
   49ae0:	csel	w1, w0, w1, eq  // eq = none
   49ae4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49ae8:	tbnz	w0, #29, 49cd4 <aarch64_opcode_lookup@@Base+0x82c>
   49aec:	tbnz	w0, #15, 4a500 <aarch64_opcode_lookup@@Base+0x1058>
   49af0:	tbnz	w0, #21, 4aaa8 <aarch64_opcode_lookup@@Base+0x1600>
   49af4:	mvn	w0, w0
   49af8:	lsr	w1, w0, #31
   49afc:	add	w1, w1, #0x3c7
   49b00:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49b04:	tst	x0, #0x40000000
   49b08:	mov	w1, #0x3e3                 	// #995
   49b0c:	mov	w0, #0x3e0                 	// #992
   49b10:	csel	w1, w0, w1, eq  // eq = none
   49b14:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49b18:	mov	w1, #0x3d6                 	// #982
   49b1c:	tbnz	w0, #29, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49b20:	tbnz	w0, #21, 49fa8 <aarch64_opcode_lookup@@Base+0xb00>
   49b24:	mov	w1, #0x1c0                 	// #448
   49b28:	tbz	w0, #24, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49b2c:	ubfx	x0, x0, #13, #1
   49b30:	add	w1, w0, #0x1d4
   49b34:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49b38:	tbnz	w0, #29, 49f04 <aarch64_opcode_lookup@@Base+0xa5c>
   49b3c:	tbnz	w0, #30, 4a440 <aarch64_opcode_lookup@@Base+0xf98>
   49b40:	tst	x0, #0x200000
   49b44:	mov	w1, #0x35f                 	// #863
   49b48:	mov	w0, #0x35b                 	// #859
   49b4c:	csel	w1, w0, w1, eq  // eq = none
   49b50:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49b54:	tbnz	w0, #21, 49ce8 <aarch64_opcode_lookup@@Base+0x840>
   49b58:	tbnz	w0, #30, 4a410 <aarch64_opcode_lookup@@Base+0xf68>
   49b5c:	tbnz	w0, #14, 4a854 <aarch64_opcode_lookup@@Base+0x13ac>
   49b60:	tbnz	w0, #13, 4b658 <aarch64_opcode_lookup@@Base+0x21b0>
   49b64:	tst	x0, #0x10
   49b68:	mov	w1, #0x53e                 	// #1342
   49b6c:	mov	w0, #0x527                 	// #1319
   49b70:	csel	w1, w0, w1, eq  // eq = none
   49b74:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49b78:	tbnz	w0, #29, 49edc <aarch64_opcode_lookup@@Base+0xa34>
   49b7c:	tbnz	w0, #30, 49ff0 <aarch64_opcode_lookup@@Base+0xb48>
   49b80:	tbnz	w0, #16, 4a64c <aarch64_opcode_lookup@@Base+0x11a4>
   49b84:	tst	x0, #0x20000
   49b88:	mov	w1, #0x2f7                 	// #759
   49b8c:	mov	w0, #0x2fb                 	// #763
   49b90:	csel	w1, w0, w1, eq  // eq = none
   49b94:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49b98:	ubfx	x0, x0, #22, #1
   49b9c:	add	w1, w0, #0x368
   49ba0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49ba4:	mov	w1, #0x84                  	// #132
   49ba8:	tbz	w0, #10, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49bac:	tbnz	w0, #15, 4a5b8 <aarch64_opcode_lookup@@Base+0x1110>
   49bb0:	mov	w1, #0x9c                  	// #156
   49bb4:	tbz	w0, #22, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49bb8:	tbnz	w0, #11, 4ae24 <aarch64_opcode_lookup@@Base+0x197c>
   49bbc:	tbnz	w0, #12, 4b9a8 <aarch64_opcode_lookup@@Base+0x2500>
   49bc0:	tbnz	w0, #13, 4c77c <aarch64_opcode_lookup@@Base+0x32d4>
   49bc4:	tst	x0, #0x800000
   49bc8:	mov	w1, #0x167                 	// #359
   49bcc:	mov	w0, #0x157                 	// #343
   49bd0:	csel	w1, w0, w1, eq  // eq = none
   49bd4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49bd8:	tbnz	w0, #11, 4a0b4 <aarch64_opcode_lookup@@Base+0xc0c>
   49bdc:	tbnz	w0, #14, 4a8b0 <aarch64_opcode_lookup@@Base+0x1408>
   49be0:	tbnz	w0, #12, 4aea8 <aarch64_opcode_lookup@@Base+0x1a00>
   49be4:	tst	x0, #0x20000000
   49be8:	mov	w1, #0x8f                  	// #143
   49bec:	mov	w0, #0x87                  	// #135
   49bf0:	csel	w1, w0, w1, eq  // eq = none
   49bf4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49bf8:	tbnz	w0, #29, 4a4d4 <aarch64_opcode_lookup@@Base+0x102c>
   49bfc:	mov	w1, #0x375                 	// #885
   49c00:	tbnz	w0, #10, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49c04:	mov	w1, #0x371                 	// #881
   49c08:	tbnz	w0, #11, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49c0c:	mov	w1, #0x3a5                 	// #933
   49c10:	tbnz	w0, #21, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49c14:	tbnz	w0, #30, 4b688 <aarch64_opcode_lookup@@Base+0x21e0>
   49c18:	cmp	w0, #0x0
   49c1c:	mov	w1, #0x952                 	// #2386
   49c20:	mov	w0, #0x94a                 	// #2378
   49c24:	csel	w1, w0, w1, ge  // ge = tcont
   49c28:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49c2c:	tst	x0, #0x40000000
   49c30:	mov	w1, #0x1a                  	// #26
   49c34:	mov	w0, #0x16                  	// #22
   49c38:	csel	w1, w0, w1, eq  // eq = none
   49c3c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49c40:	tst	x0, #0x40000000
   49c44:	mov	w1, #0x3d3                 	// #979
   49c48:	mov	w0, #0x3ca                 	// #970
   49c4c:	csel	w1, w0, w1, eq  // eq = none
   49c50:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49c54:	tbnz	w0, #11, 4a38c <aarch64_opcode_lookup@@Base+0xee4>
   49c58:	tbnz	w0, #29, 4a6d4 <aarch64_opcode_lookup@@Base+0x122c>
   49c5c:	tbnz	w0, #30, 4b3f0 <aarch64_opcode_lookup@@Base+0x1f48>
   49c60:	tst	x0, #0x10
   49c64:	mov	w1, #0x320                 	// #800
   49c68:	mov	w0, #0x31e                 	// #798
   49c6c:	csel	w1, w0, w1, eq  // eq = none
   49c70:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49c74:	tbnz	w0, #30, 4a1a4 <aarch64_opcode_lookup@@Base+0xcfc>
   49c78:	cmp	w0, #0x0
   49c7c:	mov	w1, #0x382                 	// #898
   49c80:	mov	w0, #0x37a                 	// #890
   49c84:	csel	w1, w0, w1, ge  // ge = tcont
   49c88:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49c8c:	mov	w1, #0x3d1                 	// #977
   49c90:	tbnz	w0, #29, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49c94:	tbnz	w0, #13, 4a5a4 <aarch64_opcode_lookup@@Base+0x10fc>
   49c98:	tst	x0, #0x200000
   49c9c:	mov	w1, #0x1d0                 	// #464
   49ca0:	mov	w0, #0x1cc                 	// #460
   49ca4:	csel	w1, w0, w1, eq  // eq = none
   49ca8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49cac:	tst	x0, #0x40000000
   49cb0:	mov	w1, #0x3ee                 	// #1006
   49cb4:	mov	w0, #0x3e7                 	// #999
   49cb8:	csel	w1, w0, w1, eq  // eq = none
   49cbc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49cc0:	tst	x0, #0x40000000
   49cc4:	mov	w1, #0x3d8                 	// #984
   49cc8:	mov	w0, #0x3d5                 	// #981
   49ccc:	csel	w1, w0, w1, eq  // eq = none
   49cd0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49cd4:	tst	x0, #0x40000000
   49cd8:	mov	w1, #0x3d9                 	// #985
   49cdc:	mov	w0, #0x3d4                 	// #980
   49ce0:	csel	w1, w0, w1, eq  // eq = none
   49ce4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49ce8:	tbnz	w0, #30, 4a280 <aarch64_opcode_lookup@@Base+0xdd8>
   49cec:	tbnz	w0, #14, 4ab80 <aarch64_opcode_lookup@@Base+0x16d8>
   49cf0:	tbnz	w0, #20, 4af58 <aarch64_opcode_lookup@@Base+0x1ab0>
   49cf4:	tbnz	w0, #31, 4c1f0 <aarch64_opcode_lookup@@Base+0x2d48>
   49cf8:	tbnz	w0, #16, 4ca04 <aarch64_opcode_lookup@@Base+0x355c>
   49cfc:	tbnz	w0, #17, 4e498 <aarch64_opcode_lookup@@Base+0x4ff0>
   49d00:	tbnz	w0, #18, 4e2e0 <aarch64_opcode_lookup@@Base+0x4e38>
   49d04:	tbz	w0, #19, 4ede4 <aarch64_opcode_lookup@@Base+0x593c>
   49d08:	tbnz	w0, #10, 4f074 <aarch64_opcode_lookup@@Base+0x5bcc>
   49d0c:	tbnz	w0, #11, 4f06c <aarch64_opcode_lookup@@Base+0x5bc4>
   49d10:	tst	x0, #0x1000
   49d14:	mov	w1, #0x7ec                 	// #2028
   49d18:	mov	w0, #0x73f                 	// #1855
   49d1c:	csel	w1, w0, w1, eq  // eq = none
   49d20:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49d24:	tbnz	w0, #10, 4a040 <aarch64_opcode_lookup@@Base+0xb98>
   49d28:	mov	w1, #0x289                 	// #649
   49d2c:	tbnz	w0, #21, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49d30:	mov	w1, #0x28b                 	// #651
   49d34:	tbnz	w0, #22, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49d38:	tst	x0, #0x800000
   49d3c:	mov	w1, #0x28d                 	// #653
   49d40:	mov	w0, #0x287                 	// #647
   49d44:	csel	w1, w0, w1, eq  // eq = none
   49d48:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49d4c:	tbnz	w0, #11, 4a238 <aarch64_opcode_lookup@@Base+0xd90>
   49d50:	tbnz	w0, #22, 4a960 <aarch64_opcode_lookup@@Base+0x14b8>
   49d54:	mov	w1, #0x946                 	// #2374
   49d58:	tbz	w0, #23, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49d5c:	tst	x0, #0x40000000
   49d60:	mov	w1, #0x29d                 	// #669
   49d64:	mov	w0, #0x297                 	// #663
   49d68:	csel	w1, w0, w1, eq  // eq = none
   49d6c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49d70:	tst	x0, #0x40000000
   49d74:	mov	w1, #0x3d2                 	// #978
   49d78:	mov	w0, #0x3cb                 	// #971
   49d7c:	csel	w1, w0, w1, eq  // eq = none
   49d80:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49d84:	mov	w1, #0x4a4                 	// #1188
   49d88:	tbz	w0, #25, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49d8c:	ubfx	x0, x0, #10, #1
   49d90:	add	w1, w0, #0x285
   49d94:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49d98:	tbnz	w0, #10, 4a08c <aarch64_opcode_lookup@@Base+0xbe4>
   49d9c:	tbnz	w0, #11, 4a704 <aarch64_opcode_lookup@@Base+0x125c>
   49da0:	tbnz	w0, #12, 4aff0 <aarch64_opcode_lookup@@Base+0x1b48>
   49da4:	tbnz	w0, #13, 4bc60 <aarch64_opcode_lookup@@Base+0x27b8>
   49da8:	tbnz	w0, #14, 4d288 <aarch64_opcode_lookup@@Base+0x3de0>
   49dac:	tbnz	w0, #29, 4dadc <aarch64_opcode_lookup@@Base+0x4634>
   49db0:	tbz	w0, #30, 4f140 <aarch64_opcode_lookup@@Base+0x5c98>
   49db4:	cmp	w0, #0x0
   49db8:	mov	w1, #0x925                 	// #2341
   49dbc:	mov	w0, #0x3d                  	// #61
   49dc0:	csel	w1, w0, w1, ge  // ge = tcont
   49dc4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49dc8:	tbnz	w0, #14, 4a130 <aarch64_opcode_lookup@@Base+0xc88>
   49dcc:	tbnz	w0, #15, 4aa50 <aarch64_opcode_lookup@@Base+0x15a8>
   49dd0:	tbnz	w0, #21, 4b004 <aarch64_opcode_lookup@@Base+0x1b5c>
   49dd4:	tbnz	w0, #31, 4cbfc <aarch64_opcode_lookup@@Base+0x3754>
   49dd8:	tbnz	w0, #10, 4c198 <aarch64_opcode_lookup@@Base+0x2cf0>
   49ddc:	tst	x0, #0x800
   49de0:	mov	w1, #0x8ce                 	// #2254
   49de4:	mov	w0, #0x84b                 	// #2123
   49de8:	csel	w1, w0, w1, eq  // eq = none
   49dec:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49df0:	tbnz	w0, #21, 4a29c <aarch64_opcode_lookup@@Base+0xdf4>
   49df4:	tbnz	w0, #23, 4a894 <aarch64_opcode_lookup@@Base+0x13ec>
   49df8:	tbnz	w0, #22, 4b0bc <aarch64_opcode_lookup@@Base+0x1c14>
   49dfc:	tbnz	w0, #31, 4cc50 <aarch64_opcode_lookup@@Base+0x37a8>
   49e00:	tst	x0, #0x40000000
   49e04:	mov	w1, #0x36a                 	// #874
   49e08:	mov	w0, #0x365                 	// #869
   49e0c:	csel	w1, w0, w1, eq  // eq = none
   49e10:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49e14:	tbnz	w0, #12, 4a3b8 <aarch64_opcode_lookup@@Base+0xf10>
   49e18:	tbnz	w0, #13, 4a6f0 <aarch64_opcode_lookup@@Base+0x1248>
   49e1c:	tst	x0, #0x4000
   49e20:	mov	w1, #0x25e                 	// #606
   49e24:	mov	w0, #0x25a                 	// #602
   49e28:	csel	w1, w0, w1, eq  // eq = none
   49e2c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49e30:	tbnz	w0, #30, 4a30c <aarch64_opcode_lookup@@Base+0xe64>
   49e34:	tbnz	w0, #31, 4ad04 <aarch64_opcode_lookup@@Base+0x185c>
   49e38:	tst	x0, #0x10
   49e3c:	mov	w1, #0x539                 	// #1337
   49e40:	mov	w0, #0x537                 	// #1335
   49e44:	csel	w1, w0, w1, eq  // eq = none
   49e48:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49e4c:	tst	x0, #0x8000
   49e50:	mov	w1, #0x2e5                 	// #741
   49e54:	mov	w0, #0x2e3                 	// #739
   49e58:	csel	w1, w0, w1, eq  // eq = none
   49e5c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49e60:	tbnz	w0, #15, 4a2a8 <aarch64_opcode_lookup@@Base+0xe00>
   49e64:	tbnz	w0, #21, 4abec <aarch64_opcode_lookup@@Base+0x1744>
   49e68:	tbnz	w0, #30, 4b638 <aarch64_opcode_lookup@@Base+0x2190>
   49e6c:	tbz	w0, #31, 4c7f0 <aarch64_opcode_lookup@@Base+0x3348>
   49e70:	tst	x0, #0x800000
   49e74:	mov	w1, #0x66c                 	// #1644
   49e78:	mov	w0, #0x658                 	// #1624
   49e7c:	csel	w1, w0, w1, eq  // eq = none
   49e80:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49e84:	tbnz	w0, #12, 4a51c <aarch64_opcode_lookup@@Base+0x1074>
   49e88:	tst	x0, #0x20000000
   49e8c:	mov	w1, #0x8d                  	// #141
   49e90:	mov	w0, #0x85                  	// #133
   49e94:	csel	w1, w0, w1, eq  // eq = none
   49e98:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49e9c:	tbnz	w0, #13, 4a010 <aarch64_opcode_lookup@@Base+0xb68>
   49ea0:	tbnz	w0, #30, 4a9a4 <aarch64_opcode_lookup@@Base+0x14fc>
   49ea4:	tbnz	w0, #14, 4b0ec <aarch64_opcode_lookup@@Base+0x1c44>
   49ea8:	tst	x0, #0x10
   49eac:	mov	w1, #0x52c                 	// #1324
   49eb0:	mov	w0, #0x529                 	// #1321
   49eb4:	csel	w1, w0, w1, eq  // eq = none
   49eb8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49ebc:	mov	w1, #0x3d0                 	// #976
   49ec0:	tbnz	w0, #29, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49ec4:	tbnz	w0, #13, 4a590 <aarch64_opcode_lookup@@Base+0x10e8>
   49ec8:	tst	x0, #0x200000
   49ecc:	mov	w1, #0x1ca                 	// #458
   49ed0:	mov	w0, #0x1c8                 	// #456
   49ed4:	csel	w1, w0, w1, eq  // eq = none
   49ed8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49edc:	tbnz	w0, #11, 4a49c <aarch64_opcode_lookup@@Base+0xff4>
   49ee0:	mov	w1, #0x241                 	// #577
   49ee4:	tbnz	w0, #12, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49ee8:	mov	w1, #0x24c                 	// #588
   49eec:	tbz	w0, #13, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49ef0:	tst	x0, #0x800000
   49ef4:	mov	w1, #0x243                 	// #579
   49ef8:	mov	w0, #0x23d                 	// #573
   49efc:	csel	w1, w0, w1, eq  // eq = none
   49f00:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49f04:	tbnz	w0, #10, 4a530 <aarch64_opcode_lookup@@Base+0x1088>
   49f08:	mov	w1, #0x1b7                 	// #439
   49f0c:	tbnz	w0, #13, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49f10:	mov	w1, #0x1b6                 	// #438
   49f14:	tbnz	w0, #14, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   49f18:	tst	x0, #0x800000
   49f1c:	cset	w0, eq  // eq = none
   49f20:	add	w1, w0, #0x1b4
   49f24:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49f28:	tbnz	w0, #15, 4a358 <aarch64_opcode_lookup@@Base+0xeb0>
   49f2c:	tbnz	w0, #21, 4a6b8 <aarch64_opcode_lookup@@Base+0x1210>
   49f30:	tbnz	w0, #30, 4b280 <aarch64_opcode_lookup@@Base+0x1dd8>
   49f34:	tbz	w0, #31, 4c760 <aarch64_opcode_lookup@@Base+0x32b8>
   49f38:	tst	x0, #0x800000
   49f3c:	mov	w1, #0x5f0                 	// #1520
   49f40:	mov	w0, #0x5dc                 	// #1500
   49f44:	csel	w1, w0, w1, eq  // eq = none
   49f48:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49f4c:	tbnz	w0, #30, 4a1d8 <aarch64_opcode_lookup@@Base+0xd30>
   49f50:	tbnz	w0, #21, 4a9c4 <aarch64_opcode_lookup@@Base+0x151c>
   49f54:	tbnz	w0, #22, 4aef0 <aarch64_opcode_lookup@@Base+0x1a48>
   49f58:	tbnz	w0, #23, 4bbcc <aarch64_opcode_lookup@@Base+0x2724>
   49f5c:	tbnz	w0, #31, 4cb08 <aarch64_opcode_lookup@@Base+0x3660>
   49f60:	tbnz	w0, #9, 4dc6c <aarch64_opcode_lookup@@Base+0x47c4>
   49f64:	tbnz	w0, #20, 4d96c <aarch64_opcode_lookup@@Base+0x44c4>
   49f68:	tst	x0, #0x10
   49f6c:	mov	w1, #0x511                 	// #1297
   49f70:	mov	w0, #0x505                 	// #1285
   49f74:	csel	w1, w0, w1, eq  // eq = none
   49f78:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49f7c:	tbnz	w0, #13, 4a550 <aarch64_opcode_lookup@@Base+0x10a8>
   49f80:	tbnz	w0, #14, 4ad84 <aarch64_opcode_lookup@@Base+0x18dc>
   49f84:	tbnz	w0, #15, 4b7d8 <aarch64_opcode_lookup@@Base+0x2330>
   49f88:	tst	x0, #0x400000
   49f8c:	mov	w1, #0x6e8                 	// #1768
   49f90:	mov	w0, #0x6bc                 	// #1724
   49f94:	csel	w1, w0, w1, eq  // eq = none
   49f98:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49f9c:	ubfx	x0, x0, #13, #1
   49fa0:	add	w1, w0, #0x1dc
   49fa4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49fa8:	ubfx	x0, x0, #13, #1
   49fac:	add	w1, w0, #0x1d6
   49fb0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49fb4:	ubfx	x0, x0, #22, #1
   49fb8:	add	w1, w0, #0x387
   49fbc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49fc0:	tbnz	w0, #14, 4a5e0 <aarch64_opcode_lookup@@Base+0x1138>
   49fc4:	tbnz	w0, #13, 4ae50 <aarch64_opcode_lookup@@Base+0x19a8>
   49fc8:	tbnz	w0, #15, 4ba20 <aarch64_opcode_lookup@@Base+0x2578>
   49fcc:	tbnz	w0, #22, 4e538 <aarch64_opcode_lookup@@Base+0x5090>
   49fd0:	tbz	w0, #23, 4e09c <aarch64_opcode_lookup@@Base+0x4bf4>
   49fd4:	tbnz	w0, #10, 4cb98 <aarch64_opcode_lookup@@Base+0x36f0>
   49fd8:	tbz	w0, #11, 4edec <aarch64_opcode_lookup@@Base+0x5944>
   49fdc:	tst	x0, #0x1000
   49fe0:	mov	w1, #0x96b                 	// #2411
   49fe4:	mov	w0, #0x969                 	// #2409
   49fe8:	csel	w1, w0, w1, eq  // eq = none
   49fec:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   49ff0:	tbnz	w0, #10, 4acb8 <aarch64_opcode_lookup@@Base+0x1810>
   49ff4:	tbnz	w0, #12, 4ae90 <aarch64_opcode_lookup@@Base+0x19e8>
   49ff8:	tbnz	w0, #13, 4bca4 <aarch64_opcode_lookup@@Base+0x27fc>
   49ffc:	tst	x0, #0x4000
   4a000:	mov	w1, #0x2aa                 	// #682
   4a004:	mov	w0, #0x2a6                 	// #678
   4a008:	csel	w1, w0, w1, eq  // eq = none
   4a00c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a010:	tbnz	w0, #14, 4ac10 <aarch64_opcode_lookup@@Base+0x1768>
   4a014:	tbnz	w0, #30, 4b120 <aarch64_opcode_lookup@@Base+0x1c78>
   4a018:	tbnz	w0, #31, 4c1d4 <aarch64_opcode_lookup@@Base+0x2d2c>
   4a01c:	tst	x0, #0x10
   4a020:	mov	w1, #0x53d                 	// #1341
   4a024:	mov	w0, #0x526                 	// #1318
   4a028:	csel	w1, w0, w1, eq  // eq = none
   4a02c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a030:	tbnz	w0, #22, 4ac2c <aarch64_opcode_lookup@@Base+0x1784>
   4a034:	ubfx	x0, x0, #14, #1
   4a038:	add	w1, w0, #0x947
   4a03c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a040:	mov	w1, #0x28a                 	// #650
   4a044:	tbnz	w0, #21, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a048:	mov	w1, #0x28c                 	// #652
   4a04c:	tbnz	w0, #22, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a050:	tst	x0, #0x800000
   4a054:	mov	w1, #0x28e                 	// #654
   4a058:	mov	w0, #0x288                 	// #648
   4a05c:	csel	w1, w0, w1, eq  // eq = none
   4a060:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a064:	tbnz	w0, #15, 4a734 <aarch64_opcode_lookup@@Base+0x128c>
   4a068:	tbnz	w0, #21, 4b13c <aarch64_opcode_lookup@@Base+0x1c94>
   4a06c:	tbnz	w0, #31, 4c264 <aarch64_opcode_lookup@@Base+0x2dbc>
   4a070:	tbnz	w0, #10, 4c6bc <aarch64_opcode_lookup@@Base+0x3214>
   4a074:	tbnz	w0, #11, 4dc98 <aarch64_opcode_lookup@@Base+0x47f0>
   4a078:	tst	x0, #0x1000
   4a07c:	mov	w1, #0x8bd                 	// #2237
   4a080:	mov	w0, #0x851                 	// #2129
   4a084:	csel	w1, w0, w1, eq  // eq = none
   4a088:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a08c:	tbnz	w0, #11, 4a8c8 <aarch64_opcode_lookup@@Base+0x1420>
   4a090:	tbnz	w0, #12, 4aebc <aarch64_opcode_lookup@@Base+0x1a14>
   4a094:	tbnz	w0, #13, 4bcdc <aarch64_opcode_lookup@@Base+0x2834>
   4a098:	tbnz	w0, #14, 4ce74 <aarch64_opcode_lookup@@Base+0x39cc>
   4a09c:	tbnz	w0, #29, 4de14 <aarch64_opcode_lookup@@Base+0x496c>
   4a0a0:	cmp	w0, #0x0
   4a0a4:	mov	w1, #0x926                 	// #2342
   4a0a8:	mov	w0, #0x11b                 	// #283
   4a0ac:	csel	w1, w0, w1, ge  // ge = tcont
   4a0b0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a0b4:	tbnz	w0, #12, 4ab3c <aarch64_opcode_lookup@@Base+0x1694>
   4a0b8:	tbnz	w0, #29, 4af4c <aarch64_opcode_lookup@@Base+0x1aa4>
   4a0bc:	ubfx	x0, x0, #30, #1
   4a0c0:	add	w1, w0, #0x17e
   4a0c4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a0c8:	tbnz	w0, #21, 4a7c4 <aarch64_opcode_lookup@@Base+0x131c>
   4a0cc:	tbnz	w0, #23, 4b350 <aarch64_opcode_lookup@@Base+0x1ea8>
   4a0d0:	tbnz	w0, #22, 4be20 <aarch64_opcode_lookup@@Base+0x2978>
   4a0d4:	tbnz	w0, #31, 4df6c <aarch64_opcode_lookup@@Base+0x4ac4>
   4a0d8:	tst	x0, #0x40000000
   4a0dc:	mov	w1, #0x393                 	// #915
   4a0e0:	mov	w0, #0x390                 	// #912
   4a0e4:	csel	w1, w0, w1, eq  // eq = none
   4a0e8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a0ec:	tbnz	w0, #10, 4a820 <aarch64_opcode_lookup@@Base+0x1378>
   4a0f0:	tbnz	w0, #13, 4b608 <aarch64_opcode_lookup@@Base+0x2160>
   4a0f4:	tbnz	w0, #14, 4bda0 <aarch64_opcode_lookup@@Base+0x28f8>
   4a0f8:	tst	x0, #0x800000
   4a0fc:	cset	w0, eq  // eq = none
   4a100:	add	w1, w0, #0x1ae
   4a104:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a108:	mov	w1, #0x56a                 	// #1386
   4a10c:	tbz	w0, #31, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a110:	tbnz	w0, #13, 4adc0 <aarch64_opcode_lookup@@Base+0x1918>
   4a114:	mov	w1, #0x747                 	// #1863
   4a118:	tbz	w0, #22, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a11c:	tst	x0, #0x800000
   4a120:	mov	w1, #0x760                 	// #1888
   4a124:	mov	w0, #0x74b                 	// #1867
   4a128:	csel	w1, w0, w1, eq  // eq = none
   4a12c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a130:	tbnz	w0, #15, 4acd0 <aarch64_opcode_lookup@@Base+0x1828>
   4a134:	tbnz	w0, #21, 4b448 <aarch64_opcode_lookup@@Base+0x1fa0>
   4a138:	tbnz	w0, #31, 4c484 <aarch64_opcode_lookup@@Base+0x2fdc>
   4a13c:	tbnz	w0, #10, 4c8d4 <aarch64_opcode_lookup@@Base+0x342c>
   4a140:	tbnz	w0, #11, 4d5e0 <aarch64_opcode_lookup@@Base+0x4138>
   4a144:	tst	x0, #0x1000
   4a148:	mov	w1, #0x86c                 	// #2156
   4a14c:	mov	w0, #0x888                 	// #2184
   4a150:	csel	w1, w0, w1, eq  // eq = none
   4a154:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a158:	tbnz	w0, #30, 4a8ec <aarch64_opcode_lookup@@Base+0x1444>
   4a15c:	tbnz	w0, #31, 4b6d4 <aarch64_opcode_lookup@@Base+0x222c>
   4a160:	tbnz	w0, #21, 4baac <aarch64_opcode_lookup@@Base+0x2604>
   4a164:	tbnz	w0, #16, 4caa4 <aarch64_opcode_lookup@@Base+0x35fc>
   4a168:	tbnz	w0, #17, 4dba0 <aarch64_opcode_lookup@@Base+0x46f8>
   4a16c:	tbnz	w0, #18, 4db8c <aarch64_opcode_lookup@@Base+0x46e4>
   4a170:	tst	x0, #0x80000
   4a174:	mov	w1, #0x523                 	// #1315
   4a178:	mov	w0, #0x79e                 	// #1950
   4a17c:	csel	w1, w0, w1, eq  // eq = none
   4a180:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a184:	mov	w1, #0x83                  	// #131
   4a188:	tbnz	w0, #29, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a18c:	tbnz	w0, #13, 4ad98 <aarch64_opcode_lookup@@Base+0x18f0>
   4a190:	tbnz	w0, #14, 4b744 <aarch64_opcode_lookup@@Base+0x229c>
   4a194:	tst	x0, #0x800000
   4a198:	cset	w0, eq  // eq = none
   4a19c:	add	w1, w0, #0x71
   4a1a0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a1a4:	cmp	w0, #0x0
   4a1a8:	mov	w1, #0x383                 	// #899
   4a1ac:	mov	w0, #0x37f                 	// #895
   4a1b0:	csel	w1, w0, w1, ge  // ge = tcont
   4a1b4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a1b8:	tbnz	w0, #10, 4ac3c <aarch64_opcode_lookup@@Base+0x1794>
   4a1bc:	tbnz	w0, #11, 4b2bc <aarch64_opcode_lookup@@Base+0x1e14>
   4a1c0:	tbnz	w0, #12, 4bd60 <aarch64_opcode_lookup@@Base+0x28b8>
   4a1c4:	tbnz	w0, #13, 4cccc <aarch64_opcode_lookup@@Base+0x3824>
   4a1c8:	tbnz	w0, #14, 4d570 <aarch64_opcode_lookup@@Base+0x40c8>
   4a1cc:	ubfx	x0, x0, #30, #1
   4a1d0:	add	w1, w0, #0x4c
   4a1d4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a1d8:	tbnz	w0, #13, 4a69c <aarch64_opcode_lookup@@Base+0x11f4>
   4a1dc:	tbnz	w0, #31, 4b878 <aarch64_opcode_lookup@@Base+0x23d0>
   4a1e0:	mov	w1, #0x5b0                 	// #1456
   4a1e4:	tbnz	w0, #21, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a1e8:	tst	x0, #0x10
   4a1ec:	mov	w1, #0x572                 	// #1394
   4a1f0:	mov	w0, #0x570                 	// #1392
   4a1f4:	csel	w1, w0, w1, eq  // eq = none
   4a1f8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a1fc:	tbnz	w0, #13, 4ac70 <aarch64_opcode_lookup@@Base+0x17c8>
   4a200:	tbnz	w0, #14, 4b1c0 <aarch64_opcode_lookup@@Base+0x1d18>
   4a204:	tbnz	w0, #23, 4bfd4 <aarch64_opcode_lookup@@Base+0x2b2c>
   4a208:	tst	x0, #0x20000000
   4a20c:	mov	w1, #0x80                  	// #128
   4a210:	mov	w0, #0x76                  	// #118
   4a214:	csel	w1, w0, w1, eq  // eq = none
   4a218:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a21c:	tbnz	w0, #21, 4ab08 <aarch64_opcode_lookup@@Base+0x1660>
   4a220:	tbnz	w0, #31, 4c700 <aarch64_opcode_lookup@@Base+0x3258>
   4a224:	tst	x0, #0x40000000
   4a228:	mov	w1, #0x3b3                 	// #947
   4a22c:	mov	w0, #0x3ad                 	// #941
   4a230:	csel	w1, w0, w1, eq  // eq = none
   4a234:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a238:	tbnz	w0, #12, 4a838 <aarch64_opcode_lookup@@Base+0x1390>
   4a23c:	tbnz	w0, #13, 4b194 <aarch64_opcode_lookup@@Base+0x1cec>
   4a240:	tbnz	w0, #14, 4d130 <aarch64_opcode_lookup@@Base+0x3c88>
   4a244:	tbz	w0, #30, 4d128 <aarch64_opcode_lookup@@Base+0x3c80>
   4a248:	tst	x0, #0x10000
   4a24c:	mov	w1, #0x2b8                 	// #696
   4a250:	mov	w0, #0x2b0                 	// #688
   4a254:	csel	w1, w0, w1, eq  // eq = none
   4a258:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a25c:	tbnz	w0, #12, 4a7e4 <aarch64_opcode_lookup@@Base+0x133c>
   4a260:	tbnz	w0, #13, 4b330 <aarch64_opcode_lookup@@Base+0x1e88>
   4a264:	tbnz	w0, #14, 4bf70 <aarch64_opcode_lookup@@Base+0x2ac8>
   4a268:	tbnz	w0, #15, 4d378 <aarch64_opcode_lookup@@Base+0x3ed0>
   4a26c:	tst	x0, #0x40000000
   4a270:	mov	w1, #0x2a3                 	// #675
   4a274:	mov	w0, #0x347                 	// #839
   4a278:	csel	w1, w0, w1, eq  // eq = none
   4a27c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a280:	tbnz	w0, #13, 4aa74 <aarch64_opcode_lookup@@Base+0x15cc>
   4a284:	tbnz	w0, #31, 4b708 <aarch64_opcode_lookup@@Base+0x2260>
   4a288:	tst	x0, #0x4000
   4a28c:	mov	w1, #0x5af                 	// #1455
   4a290:	mov	w0, #0x591                 	// #1425
   4a294:	csel	w1, w0, w1, eq  // eq = none
   4a298:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a29c:	ubfx	x0, x0, #23, #1
   4a2a0:	add	w1, w0, #0x3a6
   4a2a4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a2a8:	tbnz	w0, #30, 4ab20 <aarch64_opcode_lookup@@Base+0x1678>
   4a2ac:	tbnz	w0, #31, 4b8b0 <aarch64_opcode_lookup@@Base+0x2408>
   4a2b0:	mov	w1, #0x6cf                 	// #1743
   4a2b4:	tbz	w0, #21, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a2b8:	tbnz	w0, #10, 4be70 <aarch64_opcode_lookup@@Base+0x29c8>
   4a2bc:	tbnz	w0, #11, 4d2f4 <aarch64_opcode_lookup@@Base+0x3e4c>
   4a2c0:	tbnz	w0, #12, 4d69c <aarch64_opcode_lookup@@Base+0x41f4>
   4a2c4:	tbnz	w0, #20, 4d684 <aarch64_opcode_lookup@@Base+0x41dc>
   4a2c8:	tbnz	w0, #22, 4ef60 <aarch64_opcode_lookup@@Base+0x5ab8>
   4a2cc:	tst	x0, #0x800000
   4a2d0:	mov	w1, #0x545                 	// #1349
   4a2d4:	mov	w0, #0x541                 	// #1345
   4a2d8:	csel	w1, w0, w1, eq  // eq = none
   4a2dc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a2e0:	tbnz	w0, #15, 4a9e0 <aarch64_opcode_lookup@@Base+0x1538>
   4a2e4:	tbnz	w0, #14, 4b068 <aarch64_opcode_lookup@@Base+0x1bc0>
   4a2e8:	tbnz	w0, #12, 4bb44 <aarch64_opcode_lookup@@Base+0x269c>
   4a2ec:	tbnz	w0, #10, 4d22c <aarch64_opcode_lookup@@Base+0x3d84>
   4a2f0:	tbz	w0, #23, 4d6cc <aarch64_opcode_lookup@@Base+0x4224>
   4a2f4:	ubfx	x0, x0, #22, #1
   4a2f8:	add	w1, w0, #0x5a0
   4a2fc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a300:	ubfx	x0, x0, #22, #1
   4a304:	add	w1, w0, #0x376
   4a308:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a30c:	tbnz	w0, #14, 4aab8 <aarch64_opcode_lookup@@Base+0x1610>
   4a310:	tbnz	w0, #15, 4b42c <aarch64_opcode_lookup@@Base+0x1f84>
   4a314:	tbz	w0, #23, 4cbc4 <aarch64_opcode_lookup@@Base+0x371c>
   4a318:	ubfx	x0, x0, #22, #1
   4a31c:	add	w1, w0, #0x5ab
   4a320:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a324:	tbnz	w0, #31, 4b9e0 <aarch64_opcode_lookup@@Base+0x2538>
   4a328:	tst	x0, #0x40000000
   4a32c:	mov	w1, #0x37d                 	// #893
   4a330:	mov	w0, #0x378                 	// #888
   4a334:	csel	w1, w0, w1, eq  // eq = none
   4a338:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a33c:	tbnz	w0, #21, 4a688 <aarch64_opcode_lookup@@Base+0x11e0>
   4a340:	tbnz	w0, #31, 4c758 <aarch64_opcode_lookup@@Base+0x32b0>
   4a344:	tst	x0, #0x40000000
   4a348:	mov	w1, #0x3b1                 	// #945
   4a34c:	mov	w0, #0x3ab                 	// #939
   4a350:	csel	w1, w0, w1, eq  // eq = none
   4a354:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a358:	tbnz	w0, #30, 4aaec <aarch64_opcode_lookup@@Base+0x1644>
   4a35c:	tbnz	w0, #31, 4b894 <aarch64_opcode_lookup@@Base+0x23ec>
   4a360:	mov	w1, #0x6ca                 	// #1738
   4a364:	tbz	w0, #21, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a368:	tbnz	w0, #10, 4bec4 <aarch64_opcode_lookup@@Base+0x2a1c>
   4a36c:	tbnz	w0, #11, 4d41c <aarch64_opcode_lookup@@Base+0x3f74>
   4a370:	tbnz	w0, #20, 4e4b8 <aarch64_opcode_lookup@@Base+0x5010>
   4a374:	tbz	w0, #22, 4ee7c <aarch64_opcode_lookup@@Base+0x59d4>
   4a378:	tst	x0, #0x800000
   4a37c:	mov	w1, #0x739                 	// #1849
   4a380:	mov	w0, #0x73c                 	// #1852
   4a384:	csel	w1, w0, w1, eq  // eq = none
   4a388:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a38c:	tbnz	w0, #29, 4abcc <aarch64_opcode_lookup@@Base+0x1724>
   4a390:	mov	w1, #0x363                 	// #867
   4a394:	tbz	w0, #30, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a398:	tbnz	w0, #12, 4b770 <aarch64_opcode_lookup@@Base+0x22c8>
   4a39c:	tbnz	w0, #13, 4d390 <aarch64_opcode_lookup@@Base+0x3ee8>
   4a3a0:	tbnz	w0, #14, 4e010 <aarch64_opcode_lookup@@Base+0x4b68>
   4a3a4:	tst	x0, #0x8000
   4a3a8:	mov	w1, #0x236                 	// #566
   4a3ac:	mov	w0, #0x224                 	// #548
   4a3b0:	csel	w1, w0, w1, eq  // eq = none
   4a3b4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a3b8:	tbnz	w0, #13, 4a75c <aarch64_opcode_lookup@@Base+0x12b4>
   4a3bc:	tst	x0, #0x4000
   4a3c0:	mov	w1, #0x25f                 	// #607
   4a3c4:	mov	w0, #0x25b                 	// #603
   4a3c8:	csel	w1, w0, w1, eq  // eq = none
   4a3cc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a3d0:	tbnz	w0, #21, 4ac5c <aarch64_opcode_lookup@@Base+0x17b4>
   4a3d4:	mov	w1, #0x280                 	// #640
   4a3d8:	tbnz	w0, #22, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a3dc:	tst	x0, #0x800000
   4a3e0:	mov	w1, #0x281                 	// #641
   4a3e4:	mov	w0, #0x27e                 	// #638
   4a3e8:	csel	w1, w0, w1, eq  // eq = none
   4a3ec:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a3f0:	tbnz	w0, #21, 4a928 <aarch64_opcode_lookup@@Base+0x1480>
   4a3f4:	tbnz	w0, #30, 4af8c <aarch64_opcode_lookup@@Base+0x1ae4>
   4a3f8:	tbnz	w0, #31, 4c224 <aarch64_opcode_lookup@@Base+0x2d7c>
   4a3fc:	tst	x0, #0x10
   4a400:	mov	w1, #0x535                 	// #1333
   4a404:	mov	w0, #0x53b                 	// #1339
   4a408:	csel	w1, w0, w1, eq  // eq = none
   4a40c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a410:	tbnz	w0, #13, 4a9fc <aarch64_opcode_lookup@@Base+0x1554>
   4a414:	tbnz	w0, #31, 4b6f0 <aarch64_opcode_lookup@@Base+0x2248>
   4a418:	tbnz	w0, #14, 4b938 <aarch64_opcode_lookup@@Base+0x2490>
   4a41c:	tbnz	w0, #19, 4c810 <aarch64_opcode_lookup@@Base+0x3368>
   4a420:	tbnz	w0, #20, 4d5a4 <aarch64_opcode_lookup@@Base+0x40fc>
   4a424:	tbnz	w0, #16, 4d58c <aarch64_opcode_lookup@@Base+0x40e4>
   4a428:	tbnz	w0, #17, 4e1a0 <aarch64_opcode_lookup@@Base+0x4cf8>
   4a42c:	tst	x0, #0x40000
   4a430:	mov	w1, #0x594                 	// #1428
   4a434:	mov	w0, #0x565                 	// #1381
   4a438:	csel	w1, w0, w1, eq  // eq = none
   4a43c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a440:	tbnz	w0, #10, 4a794 <aarch64_opcode_lookup@@Base+0x12ec>
   4a444:	mov	w1, #0x1ac                 	// #428
   4a448:	tbz	w0, #12, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a44c:	mov	w1, #0x1ab                 	// #427
   4a450:	tbnz	w0, #13, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a454:	mov	w1, #0x1ad                 	// #429
   4a458:	tbnz	w0, #14, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a45c:	tst	x0, #0x800000
   4a460:	cset	w0, eq  // eq = none
   4a464:	add	w1, w0, #0x1b2
   4a468:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a46c:	tbnz	w0, #31, 4ad18 <aarch64_opcode_lookup@@Base+0x1870>
   4a470:	tbnz	w0, #21, 4adf4 <aarch64_opcode_lookup@@Base+0x194c>
   4a474:	tbnz	w0, #16, 4b9e8 <aarch64_opcode_lookup@@Base+0x2540>
   4a478:	tbnz	w0, #17, 4c924 <aarch64_opcode_lookup@@Base+0x347c>
   4a47c:	tbnz	w0, #18, 4e1cc <aarch64_opcode_lookup@@Base+0x4d24>
   4a480:	tbnz	w0, #19, 4e1b4 <aarch64_opcode_lookup@@Base+0x4d0c>
   4a484:	tbz	w0, #20, 4ee24 <aarch64_opcode_lookup@@Base+0x597c>
   4a488:	tst	x0, #0x40000000
   4a48c:	mov	w1, #0x855                 	// #2133
   4a490:	mov	w0, #0x50a                 	// #1290
   4a494:	csel	w1, w0, w1, eq  // eq = none
   4a498:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a49c:	mov	w1, #0x24d                 	// #589
   4a4a0:	tbz	w0, #13, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a4a4:	tst	x0, #0x800000
   4a4a8:	mov	w1, #0x245                 	// #581
   4a4ac:	mov	w0, #0x23f                 	// #575
   4a4b0:	csel	w1, w0, w1, eq  // eq = none
   4a4b4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a4b8:	tbnz	w0, #21, 4ac80 <aarch64_opcode_lookup@@Base+0x17d8>
   4a4bc:	tbnz	w0, #31, 4c830 <aarch64_opcode_lookup@@Base+0x3388>
   4a4c0:	tst	x0, #0x40000000
   4a4c4:	mov	w1, #0x3af                 	// #943
   4a4c8:	mov	w0, #0x3a9                 	// #937
   4a4cc:	csel	w1, w0, w1, eq  // eq = none
   4a4d0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a4d4:	tbnz	w0, #31, 4b9c0 <aarch64_opcode_lookup@@Base+0x2518>
   4a4d8:	tst	x0, #0x40000000
   4a4dc:	mov	w1, #0x37e                 	// #894
   4a4e0:	mov	w0, #0x379                 	// #889
   4a4e4:	csel	w1, w0, w1, eq  // eq = none
   4a4e8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a4ec:	tst	x0, #0x40000000
   4a4f0:	mov	w1, #0xa                   	// #10
   4a4f4:	mov	w0, #0x7                   	// #7
   4a4f8:	csel	w1, w0, w1, eq  // eq = none
   4a4fc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a500:	tbnz	w0, #21, 4a7ac <aarch64_opcode_lookup@@Base+0x1304>
   4a504:	tbnz	w0, #31, 4c660 <aarch64_opcode_lookup@@Base+0x31b8>
   4a508:	tst	x0, #0x40000000
   4a50c:	mov	w1, #0x3b2                 	// #946
   4a510:	mov	w0, #0x3ac                 	// #940
   4a514:	csel	w1, w0, w1, eq  // eq = none
   4a518:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a51c:	tst	x0, #0x20000000
   4a520:	mov	w1, #0x8e                  	// #142
   4a524:	mov	w0, #0x86                  	// #134
   4a528:	csel	w1, w0, w1, eq  // eq = none
   4a52c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a530:	tbnz	w0, #11, 4ab64 <aarch64_opcode_lookup@@Base+0x16bc>
   4a534:	mov	w1, #0x264                 	// #612
   4a538:	tbnz	w0, #12, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a53c:	tst	x0, #0x2000
   4a540:	mov	w1, #0x266                 	// #614
   4a544:	mov	w0, #0x262                 	// #610
   4a548:	csel	w1, w0, w1, eq  // eq = none
   4a54c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a550:	tbnz	w0, #14, 4ad70 <aarch64_opcode_lookup@@Base+0x18c8>
   4a554:	mov	w1, #0x6f6                 	// #1782
   4a558:	tbz	w0, #15, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a55c:	mov	w1, #0x830                 	// #2096
   4a560:	tbz	w0, #22, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a564:	tst	x0, #0x800000
   4a568:	mov	w1, #0x60f                 	// #1551
   4a56c:	mov	w0, #0x612                 	// #1554
   4a570:	csel	w1, w0, w1, eq  // eq = none
   4a574:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a578:	tbnz	w0, #22, 4ad2c <aarch64_opcode_lookup@@Base+0x1884>
   4a57c:	tst	x0, #0x800000
   4a580:	mov	w1, #0x92b                 	// #2347
   4a584:	mov	w0, #0x929                 	// #2345
   4a588:	csel	w1, w0, w1, eq  // eq = none
   4a58c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a590:	tst	x0, #0x200000
   4a594:	mov	w1, #0x1cb                 	// #459
   4a598:	mov	w0, #0x1c9                 	// #457
   4a59c:	csel	w1, w0, w1, eq  // eq = none
   4a5a0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a5a4:	tst	x0, #0x200000
   4a5a8:	mov	w1, #0x1d1                 	// #465
   4a5ac:	mov	w0, #0x1cd                 	// #461
   4a5b0:	csel	w1, w0, w1, eq  // eq = none
   4a5b4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a5b8:	tbnz	w0, #13, 4ada8 <aarch64_opcode_lookup@@Base+0x1900>
   4a5bc:	mov	w1, #0x174                 	// #372
   4a5c0:	tbnz	w0, #14, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a5c4:	mov	w1, #0x173                 	// #371
   4a5c8:	tbnz	w0, #11, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a5cc:	tst	x0, #0x1000
   4a5d0:	mov	w1, #0x921                 	// #2337
   4a5d4:	mov	w0, #0x172                 	// #370
   4a5d8:	csel	w1, w0, w1, eq  // eq = none
   4a5dc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a5e0:	mov	w1, #0x71c                 	// #1820
   4a5e4:	tbnz	w0, #15, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a5e8:	tbnz	w0, #10, 4b69c <aarch64_opcode_lookup@@Base+0x21f4>
   4a5ec:	tbnz	w0, #11, 4bfc8 <aarch64_opcode_lookup@@Base+0x2b20>
   4a5f0:	tbnz	w0, #12, 4cfa0 <aarch64_opcode_lookup@@Base+0x3af8>
   4a5f4:	tbnz	w0, #13, 4ed80 <aarch64_opcode_lookup@@Base+0x58d8>
   4a5f8:	tbz	w0, #20, 4e958 <aarch64_opcode_lookup@@Base+0x54b0>
   4a5fc:	tbnz	w0, #16, 4e950 <aarch64_opcode_lookup@@Base+0x54a8>
   4a600:	tst	x0, #0x40000
   4a604:	mov	w1, #0x709                 	// #1801
   4a608:	mov	w0, #0x703                 	// #1795
   4a60c:	csel	w1, w0, w1, eq  // eq = none
   4a610:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a614:	tbnz	w0, #11, 4ae70 <aarch64_opcode_lookup@@Base+0x19c8>
   4a618:	tbnz	w0, #12, 4ba74 <aarch64_opcode_lookup@@Base+0x25cc>
   4a61c:	tbnz	w0, #13, 4c668 <aarch64_opcode_lookup@@Base+0x31c0>
   4a620:	tbz	w0, #22, 4ddf0 <aarch64_opcode_lookup@@Base+0x4948>
   4a624:	tst	x0, #0x800000
   4a628:	mov	w1, #0x134                 	// #308
   4a62c:	mov	w0, #0x124                 	// #292
   4a630:	csel	w1, w0, w1, eq  // eq = none
   4a634:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a638:	tst	x0, #0x8000
   4a63c:	mov	w1, #0x578                 	// #1400
   4a640:	mov	w0, #0x549                 	// #1353
   4a644:	csel	w1, w0, w1, eq  // eq = none
   4a648:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a64c:	tst	x0, #0x20000
   4a650:	mov	w1, #0x2f9                 	// #761
   4a654:	mov	w0, #0x2fd                 	// #765
   4a658:	csel	w1, w0, w1, eq  // eq = none
   4a65c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a660:	tbnz	w0, #30, 4b2a0 <aarch64_opcode_lookup@@Base+0x1df8>
   4a664:	tbnz	w0, #31, 4c408 <aarch64_opcode_lookup@@Base+0x2f60>
   4a668:	tbnz	w0, #10, 4c71c <aarch64_opcode_lookup@@Base+0x3274>
   4a66c:	tbnz	w0, #11, 4d8c0 <aarch64_opcode_lookup@@Base+0x4418>
   4a670:	tbnz	w0, #22, 4e380 <aarch64_opcode_lookup@@Base+0x4ed8>
   4a674:	tst	x0, #0x800000
   4a678:	mov	w1, #0x559                 	// #1369
   4a67c:	mov	w0, #0x502                 	// #1282
   4a680:	csel	w1, w0, w1, eq  // eq = none
   4a684:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a688:	cmp	w0, #0x0
   4a68c:	mov	w1, #0x3bb                 	// #955
   4a690:	mov	w0, #0x400                 	// #1024
   4a694:	csel	w1, w0, w1, ge  // ge = tcont
   4a698:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a69c:	tbnz	w0, #21, 4b178 <aarch64_opcode_lookup@@Base+0x1cd0>
   4a6a0:	tbnz	w0, #31, 4c3b0 <aarch64_opcode_lookup@@Base+0x2f08>
   4a6a4:	tst	x0, #0x10
   4a6a8:	mov	w1, #0x576                 	// #1398
   4a6ac:	mov	w0, #0x56e                 	// #1390
   4a6b0:	csel	w1, w0, w1, eq  // eq = none
   4a6b4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a6b8:	tbnz	w0, #30, 4b160 <aarch64_opcode_lookup@@Base+0x1cb8>
   4a6bc:	tbnz	w0, #31, 4c1c0 <aarch64_opcode_lookup@@Base+0x2d18>
   4a6c0:	tbnz	w0, #11, 4c6d4 <aarch64_opcode_lookup@@Base+0x322c>
   4a6c4:	tbnz	w0, #12, 4d750 <aarch64_opcode_lookup@@Base+0x42a8>
   4a6c8:	ubfx	x0, x0, #10, #1
   4a6cc:	add	w1, w0, #0x5d3
   4a6d0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a6d4:	tbnz	w0, #12, 4afd8 <aarch64_opcode_lookup@@Base+0x1b30>
   4a6d8:	tbnz	w0, #13, 4bb84 <aarch64_opcode_lookup@@Base+0x26dc>
   4a6dc:	tst	x0, #0x4000
   4a6e0:	mov	w1, #0x248                 	// #584
   4a6e4:	mov	w0, #0x24a                 	// #586
   4a6e8:	csel	w1, w0, w1, eq  // eq = none
   4a6ec:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a6f0:	tst	x0, #0x4000
   4a6f4:	mov	w1, #0x260                 	// #608
   4a6f8:	mov	w0, #0x25c                 	// #604
   4a6fc:	csel	w1, w0, w1, eq  // eq = none
   4a700:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a704:	tbnz	w0, #12, 4b59c <aarch64_opcode_lookup@@Base+0x20f4>
   4a708:	tbnz	w0, #13, 4c064 <aarch64_opcode_lookup@@Base+0x2bbc>
   4a70c:	tbnz	w0, #14, 4d1bc <aarch64_opcode_lookup@@Base+0x3d14>
   4a710:	tbnz	w0, #29, 4d6fc <aarch64_opcode_lookup@@Base+0x4254>
   4a714:	tbnz	w0, #31, 4e9b4 <aarch64_opcode_lookup@@Base+0x550c>
   4a718:	tbz	w0, #16, 4e9ac <aarch64_opcode_lookup@@Base+0x5504>
   4a71c:	tbnz	w0, #19, 4eff8 <aarch64_opcode_lookup@@Base+0x5b50>
   4a720:	tst	x0, #0x800000
   4a724:	mov	w1, #0xca                  	// #202
   4a728:	mov	w0, #0xb6                  	// #182
   4a72c:	csel	w1, w0, w1, eq  // eq = none
   4a730:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a734:	tbnz	w0, #21, 4b480 <aarch64_opcode_lookup@@Base+0x1fd8>
   4a738:	tbnz	w0, #31, 4c554 <aarch64_opcode_lookup@@Base+0x30ac>
   4a73c:	tbnz	w0, #11, 4c9b0 <aarch64_opcode_lookup@@Base+0x3508>
   4a740:	tbnz	w0, #10, 4e580 <aarch64_opcode_lookup@@Base+0x50d8>
   4a744:	tbz	w0, #12, 4f01c <aarch64_opcode_lookup@@Base+0x5b74>
   4a748:	tst	x0, #0x800000
   4a74c:	mov	w1, #0x853                 	// #2131
   4a750:	mov	w0, #0x7fe                 	// #2046
   4a754:	csel	w1, w0, w1, eq  // eq = none
   4a758:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a75c:	tst	x0, #0x4000
   4a760:	mov	w1, #0x261                 	// #609
   4a764:	mov	w0, #0x25d                 	// #605
   4a768:	csel	w1, w0, w1, eq  // eq = none
   4a76c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a770:	tbnz	w0, #30, 4af18 <aarch64_opcode_lookup@@Base+0x1a70>
   4a774:	tbnz	w0, #31, 4c28c <aarch64_opcode_lookup@@Base+0x2de4>
   4a778:	tbnz	w0, #10, 4c61c <aarch64_opcode_lookup@@Base+0x3174>
   4a77c:	tbnz	w0, #11, 4e6a0 <aarch64_opcode_lookup@@Base+0x51f8>
   4a780:	tst	x0, #0x1000
   4a784:	mov	w1, #0x727                 	// #1831
   4a788:	mov	w0, #0x4fa                 	// #1274
   4a78c:	csel	w1, w0, w1, eq  // eq = none
   4a790:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a794:	tbnz	w0, #11, 4af38 <aarch64_opcode_lookup@@Base+0x1a90>
   4a798:	tst	x0, #0x1000
   4a79c:	mov	w1, #0x254                 	// #596
   4a7a0:	mov	w0, #0x256                 	// #598
   4a7a4:	csel	w1, w0, w1, eq  // eq = none
   4a7a8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a7ac:	tbnz	w0, #31, 4ca2c <aarch64_opcode_lookup@@Base+0x3584>
   4a7b0:	tst	x0, #0x40000000
   4a7b4:	mov	w1, #0x3f8                 	// #1016
   4a7b8:	mov	w0, #0x3f5                 	// #1013
   4a7bc:	csel	w1, w0, w1, eq  // eq = none
   4a7c0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a7c4:	tbnz	w0, #23, 4b4b4 <aarch64_opcode_lookup@@Base+0x200c>
   4a7c8:	tbnz	w0, #22, 4badc <aarch64_opcode_lookup@@Base+0x2634>
   4a7cc:	tbnz	w0, #31, 4e300 <aarch64_opcode_lookup@@Base+0x4e58>
   4a7d0:	tst	x0, #0x40000000
   4a7d4:	mov	w1, #0x389                 	// #905
   4a7d8:	mov	w0, #0x384                 	// #900
   4a7dc:	csel	w1, w0, w1, eq  // eq = none
   4a7e0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a7e4:	tbnz	w0, #13, 4b40c <aarch64_opcode_lookup@@Base+0x1f64>
   4a7e8:	tbnz	w0, #14, 4bb08 <aarch64_opcode_lookup@@Base+0x2660>
   4a7ec:	tbnz	w0, #15, 4d1d8 <aarch64_opcode_lookup@@Base+0x3d30>
   4a7f0:	tst	x0, #0x40000000
   4a7f4:	mov	w1, #0x2a4                 	// #676
   4a7f8:	mov	w0, #0x349                 	// #841
   4a7fc:	csel	w1, w0, w1, eq  // eq = none
   4a800:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a804:	tbnz	w0, #14, 4b254 <aarch64_opcode_lookup@@Base+0x1dac>
   4a808:	tbnz	w0, #31, 4c118 <aarch64_opcode_lookup@@Base+0x2c70>
   4a80c:	tst	x0, #0x10
   4a810:	mov	w1, #0x53c                 	// #1340
   4a814:	mov	w0, #0x525                 	// #1317
   4a818:	csel	w1, w0, w1, eq  // eq = none
   4a81c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a820:	tbnz	w0, #12, 4b1a8 <aarch64_opcode_lookup@@Base+0x1d00>
   4a824:	tst	x0, #0x2000
   4a828:	mov	w1, #0x250                 	// #592
   4a82c:	mov	w0, #0x24e                 	// #590
   4a830:	csel	w1, w0, w1, eq  // eq = none
   4a834:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a838:	mov	w1, #0x2c4                 	// #708
   4a83c:	tbnz	w0, #13, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a840:	tst	x0, #0x4000
   4a844:	mov	w1, #0x2de                 	// #734
   4a848:	mov	w0, #0x2bc                 	// #700
   4a84c:	csel	w1, w0, w1, eq  // eq = none
   4a850:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a854:	tbnz	w0, #31, 4b824 <aarch64_opcode_lookup@@Base+0x237c>
   4a858:	tbnz	w0, #4, 4b90c <aarch64_opcode_lookup@@Base+0x2464>
   4a85c:	tbnz	w0, #20, 4c798 <aarch64_opcode_lookup@@Base+0x32f0>
   4a860:	ubfx	x0, x0, #22, #1
   4a864:	add	w1, w0, #0x519
   4a868:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a86c:	tbnz	w0, #31, 4c694 <aarch64_opcode_lookup@@Base+0x31ec>
   4a870:	mov	w1, #0x59e                 	// #1438
   4a874:	tbnz	w0, #21, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a878:	tbnz	w0, #10, 4b968 <aarch64_opcode_lookup@@Base+0x24c0>
   4a87c:	tbz	w0, #11, 4e0b4 <aarch64_opcode_lookup@@Base+0x4c0c>
   4a880:	tst	x0, #0x1000
   4a884:	mov	w1, #0x5b4                 	// #1460
   4a888:	mov	w0, #0x5a7                 	// #1447
   4a88c:	csel	w1, w0, w1, eq  // eq = none
   4a890:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a894:	mov	w1, #0x36c                 	// #876
   4a898:	tbnz	w0, #30, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a89c:	cmp	w0, #0x0
   4a8a0:	mov	w1, #0x36f                 	// #879
   4a8a4:	mov	w0, #0x367                 	// #871
   4a8a8:	csel	w1, w0, w1, ge  // ge = tcont
   4a8ac:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a8b0:	tbnz	w0, #13, 4aed8 <aarch64_opcode_lookup@@Base+0x1a30>
   4a8b4:	tst	x0, #0x20000000
   4a8b8:	mov	w1, #0x91                  	// #145
   4a8bc:	mov	w0, #0x89                  	// #137
   4a8c0:	csel	w1, w0, w1, eq  // eq = none
   4a8c4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a8c8:	tbnz	w0, #12, 4b498 <aarch64_opcode_lookup@@Base+0x1ff0>
   4a8cc:	tbnz	w0, #13, 4c0d0 <aarch64_opcode_lookup@@Base+0x2c28>
   4a8d0:	tbnz	w0, #14, 4cc60 <aarch64_opcode_lookup@@Base+0x37b8>
   4a8d4:	tbnz	w0, #29, 4dbb8 <aarch64_opcode_lookup@@Base+0x4710>
   4a8d8:	cmp	w0, #0x0
   4a8dc:	mov	w1, #0x92a                 	// #2346
   4a8e0:	mov	w0, #0x11c                 	// #284
   4a8e4:	csel	w1, w0, w1, ge  // ge = tcont
   4a8e8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a8ec:	tbnz	w0, #21, 4b548 <aarch64_opcode_lookup@@Base+0x20a0>
   4a8f0:	tbnz	w0, #31, 4c3e0 <aarch64_opcode_lookup@@Base+0x2f38>
   4a8f4:	tbnz	w0, #16, 4c904 <aarch64_opcode_lookup@@Base+0x345c>
   4a8f8:	tbnz	w0, #17, 4d5ac <aarch64_opcode_lookup@@Base+0x4104>
   4a8fc:	tbnz	w0, #18, 4e7d4 <aarch64_opcode_lookup@@Base+0x532c>
   4a900:	tst	x0, #0x80000
   4a904:	mov	w1, #0x871                 	// #2161
   4a908:	mov	w0, #0x8fb                 	// #2299
   4a90c:	csel	w1, w0, w1, eq  // eq = none
   4a910:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a914:	cmp	w0, #0x0
   4a918:	mov	w1, #0x3b6                 	// #950
   4a91c:	mov	w0, #0x3fd                 	// #1021
   4a920:	csel	w1, w0, w1, ge  // ge = tcont
   4a924:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a928:	mov	w1, #0x5a2                 	// #1442
   4a92c:	tbnz	w0, #30, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a930:	tbnz	w0, #31, 4b980 <aarch64_opcode_lookup@@Base+0x24d8>
   4a934:	tbnz	w0, #4, 4bd4c <aarch64_opcode_lookup@@Base+0x28a4>
   4a938:	tst	x0, #0x1000
   4a93c:	mov	w1, #0x913                 	// #2323
   4a940:	mov	w0, #0x54a                 	// #1354
   4a944:	csel	w1, w0, w1, eq  // eq = none
   4a948:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a94c:	tbnz	w0, #14, 4b088 <aarch64_opcode_lookup@@Base+0x1be0>
   4a950:	tbnz	w0, #29, 4bcb8 <aarch64_opcode_lookup@@Base+0x2810>
   4a954:	ubfx	x0, x0, #30, #1
   4a958:	add	w1, w0, #0x6b
   4a95c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a960:	tbnz	w0, #12, 4b204 <aarch64_opcode_lookup@@Base+0x1d5c>
   4a964:	tbnz	w0, #13, 4c034 <aarch64_opcode_lookup@@Base+0x2b8c>
   4a968:	tbnz	w0, #14, 4d450 <aarch64_opcode_lookup@@Base+0x3fa8>
   4a96c:	tst	x0, #0x10000
   4a970:	mov	w1, #0x2b6                 	// #694
   4a974:	mov	w0, #0x2ae                 	// #686
   4a978:	csel	w1, w0, w1, eq  // eq = none
   4a97c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a980:	ubfx	x0, x0, #22, #1
   4a984:	add	w1, w0, #0x372
   4a988:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a98c:	tbnz	w0, #31, 4c69c <aarch64_opcode_lookup@@Base+0x31f4>
   4a990:	tst	x0, #0x40000000
   4a994:	mov	w1, #0x3f7                 	// #1015
   4a998:	mov	w0, #0x3f4                 	// #1012
   4a99c:	csel	w1, w0, w1, eq  // eq = none
   4a9a0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a9a4:	tbnz	w0, #31, 4b7a4 <aarch64_opcode_lookup@@Base+0x22fc>
   4a9a8:	tbnz	w0, #17, 4ba40 <aarch64_opcode_lookup@@Base+0x2598>
   4a9ac:	tbnz	w0, #18, 4ca7c <aarch64_opcode_lookup@@Base+0x35d4>
   4a9b0:	tst	x0, #0x100000
   4a9b4:	mov	w1, #0x812                 	// #2066
   4a9b8:	mov	w0, #0x569                 	// #1385
   4a9bc:	csel	w1, w0, w1, eq  // eq = none
   4a9c0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a9c4:	tbnz	w0, #13, 4b56c <aarch64_opcode_lookup@@Base+0x20c4>
   4a9c8:	tbnz	w0, #22, 4bb50 <aarch64_opcode_lookup@@Base+0x26a8>
   4a9cc:	tst	x0, #0x800000
   4a9d0:	mov	w1, #0x618                 	// #1560
   4a9d4:	mov	w0, #0x624                 	// #1572
   4a9d8:	csel	w1, w0, w1, eq  // eq = none
   4a9dc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a9e0:	tbnz	w0, #22, 4b3bc <aarch64_opcode_lookup@@Base+0x1f14>
   4a9e4:	tbnz	w0, #31, 4d3c4 <aarch64_opcode_lookup@@Base+0x3f1c>
   4a9e8:	tst	x0, #0x400
   4a9ec:	mov	w1, #0x821                 	// #2081
   4a9f0:	mov	w0, #0x81f                 	// #2079
   4a9f4:	csel	w1, w0, w1, eq  // eq = none
   4a9f8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4a9fc:	tbnz	w0, #14, 4b37c <aarch64_opcode_lookup@@Base+0x1ed4>
   4aa00:	tbnz	w0, #31, 4c3c8 <aarch64_opcode_lookup@@Base+0x2f20>
   4aa04:	tbnz	w0, #16, 4c8a0 <aarch64_opcode_lookup@@Base+0x33f8>
   4aa08:	tbnz	w0, #19, 4d77c <aarch64_opcode_lookup@@Base+0x42d4>
   4aa0c:	tbnz	w0, #17, 4e084 <aarch64_opcode_lookup@@Base+0x4bdc>
   4aa10:	tbnz	w0, #18, 4e8b0 <aarch64_opcode_lookup@@Base+0x5408>
   4aa14:	tst	x0, #0x100000
   4aa18:	mov	w1, #0x713                 	// #1811
   4aa1c:	mov	w0, #0x5b9                 	// #1465
   4aa20:	csel	w1, w0, w1, eq  // eq = none
   4aa24:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4aa28:	tbnz	w0, #12, 4afb8 <aarch64_opcode_lookup@@Base+0x1b10>
   4aa2c:	tbnz	w0, #13, 4bbb0 <aarch64_opcode_lookup@@Base+0x2708>
   4aa30:	tbnz	w0, #14, 4cc34 <aarch64_opcode_lookup@@Base+0x378c>
   4aa34:	tbnz	w0, #15, 4e5a8 <aarch64_opcode_lookup@@Base+0x5100>
   4aa38:	tbnz	w0, #22, 4de1c <aarch64_opcode_lookup@@Base+0x4974>
   4aa3c:	tbnz	w0, #23, 4ea80 <aarch64_opcode_lookup@@Base+0x55d8>
   4aa40:	tbnz	w0, #31, 4ea6c <aarch64_opcode_lookup@@Base+0x55c4>
   4aa44:	ubfx	x0, x0, #30, #1
   4aa48:	add	w1, w0, #0x40d
   4aa4c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4aa50:	tbnz	w0, #21, 4b584 <aarch64_opcode_lookup@@Base+0x20dc>
   4aa54:	tbnz	w0, #31, 4d3cc <aarch64_opcode_lookup@@Base+0x3f24>
   4aa58:	tbnz	w0, #10, 4c300 <aarch64_opcode_lookup@@Base+0x2e58>
   4aa5c:	tbnz	w0, #11, 4d3d4 <aarch64_opcode_lookup@@Base+0x3f2c>
   4aa60:	tst	x0, #0x1000
   4aa64:	mov	w1, #0x91f                 	// #2335
   4aa68:	mov	w0, #0x8b6                 	// #2230
   4aa6c:	csel	w1, w0, w1, eq  // eq = none
   4aa70:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4aa74:	tbnz	w0, #14, 4b104 <aarch64_opcode_lookup@@Base+0x1c5c>
   4aa78:	tbz	w0, #31, 4c790 <aarch64_opcode_lookup@@Base+0x32e8>
   4aa7c:	tbnz	w0, #22, 4cffc <aarch64_opcode_lookup@@Base+0x3b54>
   4aa80:	tst	x0, #0x800000
   4aa84:	mov	w1, #0x757                 	// #1879
   4aa88:	mov	w0, #0x76c                 	// #1900
   4aa8c:	csel	w1, w0, w1, eq  // eq = none
   4aa90:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4aa94:	tbnz	w0, #14, 4b0ac <aarch64_opcode_lookup@@Base+0x1c04>
   4aa98:	tbnz	w0, #29, 4bba4 <aarch64_opcode_lookup@@Base+0x26fc>
   4aa9c:	ubfx	x0, x0, #30, #1
   4aaa0:	add	w1, w0, #0x62
   4aaa4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4aaa8:	tbnz	w0, #31, 4ca24 <aarch64_opcode_lookup@@Base+0x357c>
   4aaac:	ubfx	x0, x0, #30, #1
   4aab0:	add	w1, w0, #0x3f1
   4aab4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4aab8:	tbnz	w0, #15, 4b50c <aarch64_opcode_lookup@@Base+0x2064>
   4aabc:	tbnz	w0, #22, 4bee4 <aarch64_opcode_lookup@@Base+0x2a3c>
   4aac0:	tbz	w0, #23, 4e0ac <aarch64_opcode_lookup@@Base+0x4c04>
   4aac4:	tbnz	w0, #31, 4e0a4 <aarch64_opcode_lookup@@Base+0x4bfc>
   4aac8:	tst	x0, #0x400
   4aacc:	mov	w1, #0x824                 	// #2084
   4aad0:	mov	w0, #0x822                 	// #2082
   4aad4:	csel	w1, w0, w1, eq  // eq = none
   4aad8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4aadc:	tbnz	w0, #23, 4b4e4 <aarch64_opcode_lookup@@Base+0x203c>
   4aae0:	ubfx	x0, x0, #30, #1
   4aae4:	add	w1, w0, #0x294
   4aae8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4aaec:	tbnz	w0, #21, 4b614 <aarch64_opcode_lookup@@Base+0x216c>
   4aaf0:	tbnz	w0, #22, 4bdb0 <aarch64_opcode_lookup@@Base+0x2908>
   4aaf4:	tst	x0, #0x800000
   4aaf8:	mov	w1, #0x82c                 	// #2092
   4aafc:	mov	w0, #0x829                 	// #2089
   4ab00:	csel	w1, w0, w1, eq  // eq = none
   4ab04:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ab08:	tbnz	w0, #31, 4c738 <aarch64_opcode_lookup@@Base+0x3290>
   4ab0c:	tst	x0, #0x40000000
   4ab10:	mov	w1, #0x3f9                 	// #1017
   4ab14:	mov	w0, #0x3f6                 	// #1014
   4ab18:	csel	w1, w0, w1, eq  // eq = none
   4ab1c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ab20:	tbnz	w0, #21, 4b39c <aarch64_opcode_lookup@@Base+0x1ef4>
   4ab24:	tbnz	w0, #22, 4be38 <aarch64_opcode_lookup@@Base+0x2990>
   4ab28:	tst	x0, #0x800000
   4ab2c:	mov	w1, #0x6f7                 	// #1783
   4ab30:	mov	w0, #0x6e9                 	// #1769
   4ab34:	csel	w1, w0, w1, eq  // eq = none
   4ab38:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ab3c:	tbnz	w0, #13, 4b368 <aarch64_opcode_lookup@@Base+0x1ec0>
   4ab40:	tbnz	w0, #29, 4be14 <aarch64_opcode_lookup@@Base+0x296c>
   4ab44:	ubfx	x0, x0, #30, #1
   4ab48:	add	w1, w0, #0x182
   4ab4c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ab50:	cmp	w0, #0x0
   4ab54:	mov	w1, #0x3ba                 	// #954
   4ab58:	mov	w0, #0x3fe                 	// #1022
   4ab5c:	csel	w1, w0, w1, ge  // ge = tcont
   4ab60:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ab64:	mov	w1, #0x263                 	// #611
   4ab68:	tbz	w0, #12, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ab6c:	tst	x0, #0x2000
   4ab70:	mov	w1, #0x268                 	// #616
   4ab74:	mov	w0, #0x265                 	// #613
   4ab78:	csel	w1, w0, w1, eq  // eq = none
   4ab7c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ab80:	tbnz	w0, #31, 4b808 <aarch64_opcode_lookup@@Base+0x2360>
   4ab84:	tbnz	w0, #16, 4b918 <aarch64_opcode_lookup@@Base+0x2470>
   4ab88:	tbnz	w0, #17, 4c7bc <aarch64_opcode_lookup@@Base+0x3314>
   4ab8c:	tbnz	w0, #18, 4dd18 <aarch64_opcode_lookup@@Base+0x4870>
   4ab90:	tbnz	w0, #19, 4dab4 <aarch64_opcode_lookup@@Base+0x460c>
   4ab94:	tst	x0, #0x100000
   4ab98:	mov	w1, #0x6d0                 	// #1744
   4ab9c:	mov	w0, #0x4fb                 	// #1275
   4aba0:	csel	w1, w0, w1, eq  // eq = none
   4aba4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4aba8:	mov	w1, #0x361                 	// #865
   4abac:	tbz	w0, #30, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4abb0:	mov	w1, #0x1a7                 	// #423
   4abb4:	tbnz	w0, #13, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4abb8:	tst	x0, #0x4000
   4abbc:	mov	w1, #0x1a8                 	// #424
   4abc0:	mov	w0, #0x1a6                 	// #422
   4abc4:	csel	w1, w0, w1, eq  // eq = none
   4abc8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4abcc:	tbnz	w0, #12, 4b26c <aarch64_opcode_lookup@@Base+0x1dc4>
   4abd0:	tbnz	w0, #13, 4bef8 <aarch64_opcode_lookup@@Base+0x2a50>
   4abd4:	tbnz	w0, #14, 4e0bc <aarch64_opcode_lookup@@Base+0x4c14>
   4abd8:	tst	x0, #0x8000
   4abdc:	mov	w1, #0x24b                 	// #587
   4abe0:	mov	w0, #0x237                 	// #567
   4abe4:	csel	w1, w0, w1, eq  // eq = none
   4abe8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4abec:	tbnz	w0, #30, 4b300 <aarch64_opcode_lookup@@Base+0x1e58>
   4abf0:	tbnz	w0, #31, 4c158 <aarch64_opcode_lookup@@Base+0x2cb0>
   4abf4:	tbnz	w0, #10, 4c5f4 <aarch64_opcode_lookup@@Base+0x314c>
   4abf8:	tbnz	w0, #11, 4e5a0 <aarch64_opcode_lookup@@Base+0x50f8>
   4abfc:	tst	x0, #0x1000
   4ac00:	mov	w1, #0x885                 	// #2181
   4ac04:	mov	w0, #0x83c                 	// #2108
   4ac08:	csel	w1, w0, w1, eq  // eq = none
   4ac0c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ac10:	tbnz	w0, #30, 4af70 <aarch64_opcode_lookup@@Base+0x1ac8>
   4ac14:	tbnz	w0, #31, 4c2d0 <aarch64_opcode_lookup@@Base+0x2e28>
   4ac18:	tst	x0, #0x10
   4ac1c:	mov	w1, #0x538                 	// #1336
   4ac20:	mov	w0, #0x536                 	// #1334
   4ac24:	csel	w1, w0, w1, eq  // eq = none
   4ac28:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ac2c:	tbnz	w0, #23, 4b2d8 <aarch64_opcode_lookup@@Base+0x1e30>
   4ac30:	ubfx	x0, x0, #30, #1
   4ac34:	add	w1, w0, #0x292
   4ac38:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ac3c:	tbnz	w0, #11, 4b5d4 <aarch64_opcode_lookup@@Base+0x212c>
   4ac40:	tbnz	w0, #12, 4bf44 <aarch64_opcode_lookup@@Base+0x2a9c>
   4ac44:	tbnz	w0, #13, 4d350 <aarch64_opcode_lookup@@Base+0x3ea8>
   4ac48:	tst	x0, #0x4000
   4ac4c:	mov	w1, #0x147                 	// #327
   4ac50:	mov	w0, #0x140                 	// #320
   4ac54:	csel	w1, w0, w1, eq  // eq = none
   4ac58:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ac5c:	tst	x0, #0x800000
   4ac60:	mov	w1, #0x282                 	// #642
   4ac64:	mov	w0, #0x27f                 	// #639
   4ac68:	csel	w1, w0, w1, eq  // eq = none
   4ac6c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ac70:	tbnz	w0, #14, 4b5bc <aarch64_opcode_lookup@@Base+0x2114>
   4ac74:	ubfx	x0, x0, #30, #1
   4ac78:	add	w1, w0, #0x6d
   4ac7c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ac80:	cmp	w0, #0x0
   4ac84:	mov	w1, #0x3b7                 	// #951
   4ac88:	mov	w0, #0x3ff                 	// #1023
   4ac8c:	csel	w1, w0, w1, ge  // ge = tcont
   4ac90:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ac94:	tbnz	w0, #21, 4b318 <aarch64_opcode_lookup@@Base+0x1e70>
   4ac98:	tbnz	w0, #31, 4c1ac <aarch64_opcode_lookup@@Base+0x2d04>
   4ac9c:	tbnz	w0, #10, 4c708 <aarch64_opcode_lookup@@Base+0x3260>
   4aca0:	tbnz	w0, #11, 4d864 <aarch64_opcode_lookup@@Base+0x43bc>
   4aca4:	tst	x0, #0x1000
   4aca8:	mov	w1, #0x80f                 	// #2063
   4acac:	mov	w0, #0x84f                 	// #2127
   4acb0:	csel	w1, w0, w1, eq  // eq = none
   4acb4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4acb8:	tbnz	w0, #11, 4b468 <aarch64_opcode_lookup@@Base+0x1fc0>
   4acbc:	tst	x0, #0x2000
   4acc0:	mov	w1, #0x22c                 	// #556
   4acc4:	mov	w0, #0x217                 	// #535
   4acc8:	csel	w1, w0, w1, eq  // eq = none
   4accc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4acd0:	tbnz	w0, #21, 4b024 <aarch64_opcode_lookup@@Base+0x1b7c>
   4acd4:	tbnz	w0, #31, 4c2a0 <aarch64_opcode_lookup@@Base+0x2df8>
   4acd8:	tbnz	w0, #10, 4c67c <aarch64_opcode_lookup@@Base+0x31d4>
   4acdc:	tbnz	w0, #11, 4ddf8 <aarch64_opcode_lookup@@Base+0x4950>
   4ace0:	tst	x0, #0x1000
   4ace4:	mov	w1, #0x8b1                 	// #2225
   4ace8:	mov	w0, #0x8b8                 	// #2232
   4acec:	csel	w1, w0, w1, eq  // eq = none
   4acf0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4acf4:	tbnz	w0, #14, 4b754 <aarch64_opcode_lookup@@Base+0x22ac>
   4acf8:	ubfx	x0, x0, #23, #1
   4acfc:	add	w1, w0, #0x95f
   4ad00:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ad04:	tbnz	w0, #14, 4b85c <aarch64_opcode_lookup@@Base+0x23b4>
   4ad08:	tbnz	w0, #15, 4c5c4 <aarch64_opcode_lookup@@Base+0x311c>
   4ad0c:	ubfx	x0, x0, #23, #1
   4ad10:	add	w1, w0, #0x963
   4ad14:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ad18:	tbnz	w0, #22, 4b7bc <aarch64_opcode_lookup@@Base+0x2314>
   4ad1c:	tbnz	w0, #21, 4c16c <aarch64_opcode_lookup@@Base+0x2cc4>
   4ad20:	ubfx	x0, x0, #23, #1
   4ad24:	add	w1, w0, #0x82d
   4ad28:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ad2c:	mov	w1, #0x92d                 	// #2349
   4ad30:	tbz	w0, #15, 494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ad34:	tbnz	w0, #10, 4ba5c <aarch64_opcode_lookup@@Base+0x25b4>
   4ad38:	tbnz	w0, #11, 4d5f8 <aarch64_opcode_lookup@@Base+0x4150>
   4ad3c:	tst	x0, #0x800000
   4ad40:	mov	w1, #0x927                 	// #2343
   4ad44:	mov	w0, #0x92e                 	// #2350
   4ad48:	csel	w1, w0, w1, eq  // eq = none
   4ad4c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ad50:	tbnz	w0, #11, 4b788 <aarch64_opcode_lookup@@Base+0x22e0>
   4ad54:	tbnz	w0, #12, 4c398 <aarch64_opcode_lookup@@Base+0x2ef0>
   4ad58:	tbnz	w0, #13, 4d310 <aarch64_opcode_lookup@@Base+0x3e68>
   4ad5c:	tst	x0, #0x4000
   4ad60:	mov	w1, #0x113                 	// #275
   4ad64:	mov	w0, #0x10c                 	// #268
   4ad68:	csel	w1, w0, w1, eq  // eq = none
   4ad6c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ad70:	tbnz	w0, #15, 4b7ec <aarch64_opcode_lookup@@Base+0x2344>
   4ad74:	tbnz	w0, #23, 4d06c <aarch64_opcode_lookup@@Base+0x3bc4>
   4ad78:	ubfx	x0, x0, #21, #1
   4ad7c:	add	w1, w0, #0x698
   4ad80:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ad84:	tbnz	w0, #15, 4b840 <aarch64_opcode_lookup@@Base+0x2398>
   4ad88:	tbnz	w0, #23, 4c5b0 <aarch64_opcode_lookup@@Base+0x3108>
   4ad8c:	ubfx	x0, x0, #21, #1
   4ad90:	add	w1, w0, #0x634
   4ad94:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ad98:	tbnz	w0, #14, 4b738 <aarch64_opcode_lookup@@Base+0x2290>
   4ad9c:	ubfx	x0, x0, #30, #1
   4ada0:	add	w1, w0, #0x64
   4ada4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ada8:	tbnz	w0, #11, 4b720 <aarch64_opcode_lookup@@Base+0x2278>
   4adac:	tst	x0, #0x4000
   4adb0:	mov	w1, #0x175                 	// #373
   4adb4:	mov	w0, #0x96e                 	// #2414
   4adb8:	csel	w1, w0, w1, eq  // eq = none
   4adbc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4adc0:	tbnz	w0, #14, 4b8f4 <aarch64_opcode_lookup@@Base+0x244c>
   4adc4:	tbnz	w0, #22, 4c984 <aarch64_opcode_lookup@@Base+0x34dc>
   4adc8:	tst	x0, #0x800000
   4adcc:	mov	w1, #0x8c3                 	// #2243
   4add0:	mov	w0, #0x8c0                 	// #2240
   4add4:	csel	w1, w0, w1, eq  // eq = none
   4add8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4addc:	tbnz	w0, #1, 4b8cc <aarch64_opcode_lookup@@Base+0x2424>
   4ade0:	tst	x0, #0x200000
   4ade4:	mov	w1, #0x2f2                 	// #754
   4ade8:	mov	w0, #0x2ed                 	// #749
   4adec:	csel	w1, w0, w1, eq  // eq = none
   4adf0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4adf4:	tbnz	w0, #10, 4b94c <aarch64_opcode_lookup@@Base+0x24a4>
   4adf8:	tbnz	w0, #12, 4c60c <aarch64_opcode_lookup@@Base+0x3164>
   4adfc:	tbz	w0, #30, 4e07c <aarch64_opcode_lookup@@Base+0x4bd4>
   4ae00:	ubfx	x0, x0, #22, #1
   4ae04:	add	w1, w0, #0x85d
   4ae08:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ae0c:	tbnz	w0, #12, 4b9c8 <aarch64_opcode_lookup@@Base+0x2520>
   4ae10:	tst	x0, #0x4000
   4ae14:	mov	w1, #0x10a                 	// #266
   4ae18:	mov	w0, #0x107                 	// #263
   4ae1c:	csel	w1, w0, w1, eq  // eq = none
   4ae20:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ae24:	tbnz	w0, #12, 4ba0c <aarch64_opcode_lookup@@Base+0x2564>
   4ae28:	tst	x0, #0x800000
   4ae2c:	mov	w1, #0x16d                 	// #365
   4ae30:	mov	w0, #0x15f                 	// #351
   4ae34:	csel	w1, w0, w1, eq  // eq = none
   4ae38:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ae3c:	tst	x0, #0x800000
   4ae40:	mov	w1, #0x558                 	// #1368
   4ae44:	mov	w0, #0x55a                 	// #1370
   4ae48:	csel	w1, w0, w1, eq  // eq = none
   4ae4c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ae50:	tbnz	w0, #15, 4ba90 <aarch64_opcode_lookup@@Base+0x25e8>
   4ae54:	tbnz	w0, #10, 4d5d8 <aarch64_opcode_lookup@@Base+0x4130>
   4ae58:	tbnz	w0, #11, 4cf04 <aarch64_opcode_lookup@@Base+0x3a5c>
   4ae5c:	tst	x0, #0x1000
   4ae60:	mov	w1, #0x7a1                 	// #1953
   4ae64:	mov	w0, #0x556                 	// #1366
   4ae68:	csel	w1, w0, w1, eq  // eq = none
   4ae6c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ae70:	tbnz	w0, #12, 4b98c <aarch64_opcode_lookup@@Base+0x24e4>
   4ae74:	tbnz	w0, #13, 4c768 <aarch64_opcode_lookup@@Base+0x32c0>
   4ae78:	tbz	w0, #22, 4e798 <aarch64_opcode_lookup@@Base+0x52f0>
   4ae7c:	tst	x0, #0x800000
   4ae80:	mov	w1, #0x136                 	// #310
   4ae84:	mov	w0, #0x126                 	// #294
   4ae88:	csel	w1, w0, w1, eq  // eq = none
   4ae8c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ae90:	tbnz	w0, #13, 4cc7c <aarch64_opcode_lookup@@Base+0x37d4>
   4ae94:	tst	x0, #0x4000
   4ae98:	mov	w1, #0x2ab                 	// #683
   4ae9c:	mov	w0, #0x2a7                 	// #679
   4aea0:	csel	w1, w0, w1, eq  // eq = none
   4aea4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4aea8:	tst	x0, #0x20000000
   4aeac:	mov	w1, #0x90                  	// #144
   4aeb0:	mov	w0, #0x88                  	// #136
   4aeb4:	csel	w1, w0, w1, eq  // eq = none
   4aeb8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4aebc:	tbnz	w0, #13, 4bd34 <aarch64_opcode_lookup@@Base+0x288c>
   4aec0:	tbnz	w0, #14, 4cea4 <aarch64_opcode_lookup@@Base+0x39fc>
   4aec4:	tst	x0, #0x20000000
   4aec8:	mov	w1, #0x151                 	// #337
   4aecc:	mov	w0, #0x11d                 	// #285
   4aed0:	csel	w1, w0, w1, eq  // eq = none
   4aed4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4aed8:	tbnz	w0, #12, 4bbec <aarch64_opcode_lookup@@Base+0x2744>
   4aedc:	tst	x0, #0x20000000
   4aee0:	mov	w1, #0x92                  	// #146
   4aee4:	mov	w0, #0x8a                  	// #138
   4aee8:	csel	w1, w0, w1, eq  // eq = none
   4aeec:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4aef0:	tbnz	w0, #23, 4bb64 <aarch64_opcode_lookup@@Base+0x26bc>
   4aef4:	tbnz	w0, #31, 4ce60 <aarch64_opcode_lookup@@Base+0x39b8>
   4aef8:	tbnz	w0, #4, 4e598 <aarch64_opcode_lookup@@Base+0x50f0>
   4aefc:	tbnz	w0, #9, 4ec70 <aarch64_opcode_lookup@@Base+0x57c8>
   4af00:	tbz	w0, #20, 4ec90 <aarch64_opcode_lookup@@Base+0x57e8>
   4af04:	tst	x0, #0x80000
   4af08:	mov	w1, #0x518                 	// #1304
   4af0c:	mov	w0, #0x514                 	// #1300
   4af10:	csel	w1, w0, w1, eq  // eq = none
   4af14:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4af18:	tbnz	w0, #23, 4bc88 <aarch64_opcode_lookup@@Base+0x27e0>
   4af1c:	tbnz	w0, #31, 4dbd8 <aarch64_opcode_lookup@@Base+0x4730>
   4af20:	tbnz	w0, #10, 4ce1c <aarch64_opcode_lookup@@Base+0x3974>
   4af24:	tst	x0, #0x800
   4af28:	mov	w1, #0x833                 	// #2099
   4af2c:	mov	w0, #0x890                 	// #2192
   4af30:	csel	w1, w0, w1, eq  // eq = none
   4af34:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4af38:	tst	x0, #0x2000
   4af3c:	mov	w1, #0x258                 	// #600
   4af40:	mov	w0, #0x255                 	// #597
   4af44:	csel	w1, w0, w1, eq  // eq = none
   4af48:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4af4c:	ubfx	x0, x0, #30, #1
   4af50:	add	w1, w0, #0x196
   4af54:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4af58:	tbnz	w0, #22, 4bc38 <aarch64_opcode_lookup@@Base+0x2790>
   4af5c:	tst	x0, #0x800000
   4af60:	mov	w1, #0x6ad                 	// #1709
   4af64:	mov	w0, #0x6b0                 	// #1712
   4af68:	csel	w1, w0, w1, eq  // eq = none
   4af6c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4af70:	tbnz	w0, #20, 4bc20 <aarch64_opcode_lookup@@Base+0x2778>
   4af74:	tbz	w0, #22, 4de0c <aarch64_opcode_lookup@@Base+0x4964>
   4af78:	tst	x0, #0x800000
   4af7c:	mov	w1, #0x766                 	// #1894
   4af80:	mov	w0, #0x751                 	// #1873
   4af84:	csel	w1, w0, w1, eq  // eq = none
   4af88:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4af8c:	tbnz	w0, #31, 4c24c <aarch64_opcode_lookup@@Base+0x2da4>
   4af90:	tbnz	w0, #16, 4c640 <aarch64_opcode_lookup@@Base+0x3198>
   4af94:	tbnz	w0, #17, 4e5c8 <aarch64_opcode_lookup@@Base+0x5120>
   4af98:	tbnz	w0, #18, 4eb94 <aarch64_opcode_lookup@@Base+0x56ec>
   4af9c:	tbnz	w0, #19, 4eba4 <aarch64_opcode_lookup@@Base+0x56fc>
   4afa0:	tbz	w0, #20, 4eb9c <aarch64_opcode_lookup@@Base+0x56f4>
   4afa4:	tst	x0, #0x10
   4afa8:	mov	w1, #0x571                 	// #1393
   4afac:	mov	w0, #0x56f                 	// #1391
   4afb0:	csel	w1, w0, w1, eq  // eq = none
   4afb4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4afb8:	tbnz	w0, #13, 4bd0c <aarch64_opcode_lookup@@Base+0x2864>
   4afbc:	tbnz	w0, #14, 4cebc <aarch64_opcode_lookup@@Base+0x3a14>
   4afc0:	tbnz	w0, #22, 4d9d8 <aarch64_opcode_lookup@@Base+0x4530>
   4afc4:	tbnz	w0, #23, 4d9ac <aarch64_opcode_lookup@@Base+0x4504>
   4afc8:	tbnz	w0, #31, 4ed00 <aarch64_opcode_lookup@@Base+0x5858>
   4afcc:	ubfx	x0, x0, #30, #1
   4afd0:	add	w1, w0, #0x419
   4afd4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4afd8:	tbnz	w0, #13, 4bc74 <aarch64_opcode_lookup@@Base+0x27cc>
   4afdc:	tst	x0, #0x8000
   4afe0:	mov	w1, #0x240                 	// #576
   4afe4:	mov	w0, #0x249                 	// #585
   4afe8:	csel	w1, w0, w1, eq  // eq = none
   4afec:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4aff0:	tbnz	w0, #13, 4bb98 <aarch64_opcode_lookup@@Base+0x26f0>
   4aff4:	tbnz	w0, #14, 4cf74 <aarch64_opcode_lookup@@Base+0x3acc>
   4aff8:	ubfx	x0, x0, #30, #1
   4affc:	add	w1, w0, #0x3e
   4b000:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b004:	tbnz	w0, #31, 4cc84 <aarch64_opcode_lookup@@Base+0x37dc>
   4b008:	tbnz	w0, #10, 4c2b8 <aarch64_opcode_lookup@@Base+0x2e10>
   4b00c:	tbnz	w0, #11, 4d364 <aarch64_opcode_lookup@@Base+0x3ebc>
   4b010:	tst	x0, #0x1000
   4b014:	mov	w1, #0x8f5                 	// #2293
   4b018:	mov	w0, #0x8a6                 	// #2214
   4b01c:	csel	w1, w0, w1, eq  // eq = none
   4b020:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b024:	tbnz	w0, #22, 4bc00 <aarch64_opcode_lookup@@Base+0x2758>
   4b028:	tbnz	w0, #23, 4dde8 <aarch64_opcode_lookup@@Base+0x4940>
   4b02c:	tbnz	w0, #31, 4dcf4 <aarch64_opcode_lookup@@Base+0x484c>
   4b030:	tbnz	w0, #10, 4cd3c <aarch64_opcode_lookup@@Base+0x3894>
   4b034:	tbnz	w0, #12, 4ea54 <aarch64_opcode_lookup@@Base+0x55ac>
   4b038:	tbnz	w0, #16, 4ea4c <aarch64_opcode_lookup@@Base+0x55a4>
   4b03c:	tst	x0, #0x20000
   4b040:	mov	w1, #0x918                 	// #2328
   4b044:	mov	w0, #0x91a                 	// #2330
   4b048:	csel	w1, w0, w1, eq  // eq = none
   4b04c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b050:	tbnz	w0, #30, 4bc4c <aarch64_opcode_lookup@@Base+0x27a4>
   4b054:	cmp	w0, #0x0
   4b058:	mov	w1, #0x3a3                 	// #931
   4b05c:	mov	w0, #0x39b                 	// #923
   4b060:	csel	w1, w0, w1, ge  // ge = tcont
   4b064:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b068:	tbnz	w0, #22, 4bcc4 <aarch64_opcode_lookup@@Base+0x281c>
   4b06c:	tbz	w0, #23, 4d890 <aarch64_opcode_lookup@@Base+0x43e8>
   4b070:	tbnz	w0, #31, 4d888 <aarch64_opcode_lookup@@Base+0x43e0>
   4b074:	tst	x0, #0x400
   4b078:	mov	w1, #0x820                 	// #2080
   4b07c:	mov	w0, #0x81e                 	// #2078
   4b080:	csel	w1, w0, w1, eq  // eq = none
   4b084:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b088:	tst	x0, #0x20000000
   4b08c:	cset	w0, eq  // eq = none
   4b090:	add	w1, w0, #0x923
   4b094:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b098:	tst	x0, #0x40000000
   4b09c:	mov	w1, #0x29a                 	// #666
   4b0a0:	mov	w0, #0x296                 	// #662
   4b0a4:	csel	w1, w0, w1, eq  // eq = none
   4b0a8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b0ac:	tbnz	w0, #29, 4bc14 <aarch64_opcode_lookup@@Base+0x276c>
   4b0b0:	ubfx	x0, x0, #30, #1
   4b0b4:	add	w1, w0, #0x66
   4b0b8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b0bc:	tbnz	w0, #31, 4cb90 <aarch64_opcode_lookup@@Base+0x36e8>
   4b0c0:	tst	x0, #0x40000000
   4b0c4:	mov	w1, #0x36b                 	// #875
   4b0c8:	mov	w0, #0x366                 	// #870
   4b0cc:	csel	w1, w0, w1, eq  // eq = none
   4b0d0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b0d4:	tbz	w0, #29, 4cb5c <aarch64_opcode_lookup@@Base+0x36b4>
   4b0d8:	tst	x0, #0x40000000
   4b0dc:	mov	w1, #0x945                 	// #2373
   4b0e0:	mov	w0, #0x941                 	// #2369
   4b0e4:	csel	w1, w0, w1, eq  // eq = none
   4b0e8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b0ec:	tbnz	w0, #31, 4c380 <aarch64_opcode_lookup@@Base+0x2ed8>
   4b0f0:	tst	x0, #0x10
   4b0f4:	mov	w1, #0x52f                 	// #1327
   4b0f8:	mov	w0, #0x532                 	// #1330
   4b0fc:	csel	w1, w0, w1, eq  // eq = none
   4b100:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b104:	tbz	w0, #31, 4c97c <aarch64_opcode_lookup@@Base+0x34d4>
   4b108:	tbnz	w0, #20, 4c964 <aarch64_opcode_lookup@@Base+0x34bc>
   4b10c:	tst	x0, #0x800000
   4b110:	mov	w1, #0x75a                 	// #1882
   4b114:	mov	w0, #0x774                 	// #1908
   4b118:	csel	w1, w0, w1, eq  // eq = none
   4b11c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b120:	tbnz	w0, #22, 4c048 <aarch64_opcode_lookup@@Base+0x2ba0>
   4b124:	tbnz	w0, #23, 4d09c <aarch64_opcode_lookup@@Base+0x3bf4>
   4b128:	cmp	w0, #0x0
   4b12c:	mov	w1, #0x749                 	// #1865
   4b130:	mov	w0, #0x818                 	// #2072
   4b134:	csel	w1, w0, w1, ge  // ge = tcont
   4b138:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b13c:	tbnz	w0, #23, 4cf98 <aarch64_opcode_lookup@@Base+0x3af0>
   4b140:	tbnz	w0, #31, 4e1e8 <aarch64_opcode_lookup@@Base+0x4d40>
   4b144:	tbnz	w0, #10, 4c868 <aarch64_opcode_lookup@@Base+0x33c0>
   4b148:	tbnz	w0, #11, 4db68 <aarch64_opcode_lookup@@Base+0x46c0>
   4b14c:	tst	x0, #0x1000
   4b150:	mov	w1, #0x8ae                 	// #2222
   4b154:	mov	w0, #0x8ac                 	// #2220
   4b158:	csel	w1, w0, w1, eq  // eq = none
   4b15c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b160:	tbz	w0, #23, 4d32c <aarch64_opcode_lookup@@Base+0x3e84>
   4b164:	tbnz	w0, #31, 4e31c <aarch64_opcode_lookup@@Base+0x4e74>
   4b168:	tst	x0, #0x400000
   4b16c:	cset	w0, eq  // eq = none
   4b170:	add	w1, w0, #0x809
   4b174:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b178:	tbz	w0, #31, 4c9fc <aarch64_opcode_lookup@@Base+0x3554>
   4b17c:	tbnz	w0, #22, 4c8c0 <aarch64_opcode_lookup@@Base+0x3418>
   4b180:	tst	x0, #0x800000
   4b184:	mov	w1, #0x777                 	// #1911
   4b188:	mov	w0, #0x77b                 	// #1915
   4b18c:	csel	w1, w0, w1, eq  // eq = none
   4b190:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b194:	tst	x0, #0x40000000
   4b198:	mov	w1, #0x2c0                 	// #704
   4b19c:	mov	w0, #0x2cf                 	// #719
   4b1a0:	csel	w1, w0, w1, eq  // eq = none
   4b1a4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b1a8:	tbnz	w0, #13, 4baf4 <aarch64_opcode_lookup@@Base+0x264c>
   4b1ac:	tst	x0, #0x4000
   4b1b0:	mov	w1, #0x252                 	// #594
   4b1b4:	mov	w0, #0x24f                 	// #591
   4b1b8:	csel	w1, w0, w1, eq  // eq = none
   4b1bc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b1c0:	tst	x0, #0x20000000
   4b1c4:	mov	w1, #0x81                  	// #129
   4b1c8:	mov	w0, #0x70                  	// #112
   4b1cc:	csel	w1, w0, w1, eq  // eq = none
   4b1d0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b1d4:	tbnz	w0, #31, 4c45c <aarch64_opcode_lookup@@Base+0x2fb4>
   4b1d8:	tbnz	w0, #12, 4db24 <aarch64_opcode_lookup@@Base+0x467c>
   4b1dc:	tbnz	w0, #10, 4d464 <aarch64_opcode_lookup@@Base+0x3fbc>
   4b1e0:	tst	x0, #0x800
   4b1e4:	mov	w1, #0x877                 	// #2167
   4b1e8:	mov	w0, #0x719                 	// #1817
   4b1ec:	csel	w1, w0, w1, eq  // eq = none
   4b1f0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b1f4:	tst	x0, #0x400000
   4b1f8:	cset	w0, eq  // eq = none
   4b1fc:	add	w1, w0, #0x3c1
   4b200:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b204:	tbnz	w0, #13, 4d2a4 <aarch64_opcode_lookup@@Base+0x3dfc>
   4b208:	tbnz	w0, #14, 4d224 <aarch64_opcode_lookup@@Base+0x3d7c>
   4b20c:	tbz	w0, #30, 4dac8 <aarch64_opcode_lookup@@Base+0x4620>
   4b210:	tst	x0, #0x10000
   4b214:	mov	w1, #0x2ba                 	// #698
   4b218:	mov	w0, #0x2b3                 	// #691
   4b21c:	csel	w1, w0, w1, eq  // eq = none
   4b220:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b224:	tbnz	w0, #3, 4bfe8 <aarch64_opcode_lookup@@Base+0x2b40>
   4b228:	tst	x0, #0x10
   4b22c:	mov	w1, #0x324                 	// #804
   4b230:	mov	w0, #0x322                 	// #802
   4b234:	csel	w1, w0, w1, eq  // eq = none
   4b238:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b23c:	tbnz	w0, #31, 4c12c <aarch64_opcode_lookup@@Base+0x2c84>
   4b240:	tst	x0, #0x10
   4b244:	mov	w1, #0x52b                 	// #1323
   4b248:	mov	w0, #0x528                 	// #1320
   4b24c:	csel	w1, w0, w1, eq  // eq = none
   4b250:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b254:	tbnz	w0, #31, 4c318 <aarch64_opcode_lookup@@Base+0x2e70>
   4b258:	tst	x0, #0x10
   4b25c:	mov	w1, #0x534                 	// #1332
   4b260:	mov	w0, #0x53a                 	// #1338
   4b264:	csel	w1, w0, w1, eq  // eq = none
   4b268:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b26c:	tst	x0, #0x2000
   4b270:	mov	w1, #0x247                 	// #583
   4b274:	mov	w0, #0x23a                 	// #570
   4b278:	csel	w1, w0, w1, eq  // eq = none
   4b27c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b280:	tbnz	w0, #31, 4c518 <aarch64_opcode_lookup@@Base+0x3070>
   4b284:	tbnz	w0, #10, 4c740 <aarch64_opcode_lookup@@Base+0x3298>
   4b288:	tbnz	w0, #11, 4d8a4 <aarch64_opcode_lookup@@Base+0x43fc>
   4b28c:	tst	x0, #0x1000
   4b290:	mov	w1, #0x865                 	// #2149
   4b294:	mov	w0, #0x85f                 	// #2143
   4b298:	csel	w1, w0, w1, eq  // eq = none
   4b29c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b2a0:	tbz	w0, #23, 4d194 <aarch64_opcode_lookup@@Base+0x3cec>
   4b2a4:	tbnz	w0, #31, 4d584 <aarch64_opcode_lookup@@Base+0x40dc>
   4b2a8:	tbnz	w0, #10, 4ca6c <aarch64_opcode_lookup@@Base+0x35c4>
   4b2ac:	tbnz	w0, #12, 4d188 <aarch64_opcode_lookup@@Base+0x3ce0>
   4b2b0:	ubfx	x0, x0, #22, #1
   4b2b4:	add	w1, w0, #0x874
   4b2b8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b2bc:	tbnz	w0, #12, 4bcf4 <aarch64_opcode_lookup@@Base+0x284c>
   4b2c0:	tbnz	w0, #13, 4cca0 <aarch64_opcode_lookup@@Base+0x37f8>
   4b2c4:	tbz	w0, #14, 4d880 <aarch64_opcode_lookup@@Base+0x43d8>
   4b2c8:	tbz	w0, #16, 4f014 <aarch64_opcode_lookup@@Base+0x5b6c>
   4b2cc:	ubfx	x0, x0, #30, #1
   4b2d0:	add	w1, w0, #0xe2
   4b2d4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b2d8:	tbnz	w0, #12, 4bd88 <aarch64_opcode_lookup@@Base+0x28e0>
   4b2dc:	tbnz	w0, #13, 4d43c <aarch64_opcode_lookup@@Base+0x3f94>
   4b2e0:	tbnz	w0, #14, 4e2f8 <aarch64_opcode_lookup@@Base+0x4e50>
   4b2e4:	tbz	w0, #30, 4edd4 <aarch64_opcode_lookup@@Base+0x592c>
   4b2e8:	tbnz	w0, #16, 4edb4 <aarch64_opcode_lookup@@Base+0x590c>
   4b2ec:	cmp	w0, #0x0
   4b2f0:	mov	w1, #0x2b4                 	// #692
   4b2f4:	mov	w0, #0x2af                 	// #687
   4b2f8:	csel	w1, w0, w1, ge  // ge = tcont
   4b2fc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b300:	tbz	w0, #23, 4d0c0 <aarch64_opcode_lookup@@Base+0x3c18>
   4b304:	tbnz	w0, #31, 4d848 <aarch64_opcode_lookup@@Base+0x43a0>
   4b308:	tbnz	w0, #12, 4c634 <aarch64_opcode_lookup@@Base+0x318c>
   4b30c:	ubfx	x0, x0, #22, #1
   4b310:	add	w1, w0, #0x80c
   4b314:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b318:	tbnz	w0, #31, 4c430 <aarch64_opcode_lookup@@Base+0x2f88>
   4b31c:	tst	x0, #0x10
   4b320:	mov	w1, #0x83e                 	// #2110
   4b324:	mov	w0, #0x832                 	// #2098
   4b328:	csel	w1, w0, w1, eq  // eq = none
   4b32c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b330:	tbnz	w0, #14, 4c084 <aarch64_opcode_lookup@@Base+0x2bdc>
   4b334:	tbnz	w0, #15, 4d020 <aarch64_opcode_lookup@@Base+0x3b78>
   4b338:	tbnz	w0, #29, 4e4b0 <aarch64_opcode_lookup@@Base+0x5008>
   4b33c:	tst	x0, #0x40000000
   4b340:	mov	w1, #0x2a5                 	// #677
   4b344:	mov	w0, #0x34b                 	// #843
   4b348:	csel	w1, w0, w1, eq  // eq = none
   4b34c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b350:	tbnz	w0, #30, 4cfe0 <aarch64_opcode_lookup@@Base+0x3b38>
   4b354:	cmp	w0, #0x0
   4b358:	mov	w1, #0x398                 	// #920
   4b35c:	mov	w0, #0x392                 	// #914
   4b360:	csel	w1, w0, w1, ge  // ge = tcont
   4b364:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b368:	tst	x0, #0x20000000
   4b36c:	mov	w1, #0x1a2                 	// #418
   4b370:	mov	w0, #0x8c                  	// #140
   4b374:	csel	w1, w0, w1, eq  // eq = none
   4b378:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b37c:	tbz	w0, #31, 4ca64 <aarch64_opcode_lookup@@Base+0x35bc>
   4b380:	tbz	w0, #20, 4cac0 <aarch64_opcode_lookup@@Base+0x3618>
   4b384:	tbnz	w0, #22, 4ca90 <aarch64_opcode_lookup@@Base+0x35e8>
   4b388:	tst	x0, #0x800000
   4b38c:	mov	w1, #0x790                 	// #1936
   4b390:	mov	w0, #0x794                 	// #1940
   4b394:	csel	w1, w0, w1, eq  // eq = none
   4b398:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b39c:	tbnz	w0, #23, 4be4c <aarch64_opcode_lookup@@Base+0x29a4>
   4b3a0:	tbnz	w0, #31, 4d2e0 <aarch64_opcode_lookup@@Base+0x3e38>
   4b3a4:	tbnz	w0, #10, 4df3c <aarch64_opcode_lookup@@Base+0x4a94>
   4b3a8:	tst	x0, #0x800
   4b3ac:	mov	w1, #0x839                 	// #2105
   4b3b0:	mov	w0, #0x882                 	// #2178
   4b3b4:	csel	w1, w0, w1, eq  // eq = none
   4b3b8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b3bc:	tbz	w0, #23, 4cd98 <aarch64_opcode_lookup@@Base+0x38f0>
   4b3c0:	tbnz	w0, #31, 4de84 <aarch64_opcode_lookup@@Base+0x49dc>
   4b3c4:	tst	x0, #0x400
   4b3c8:	cset	w0, eq  // eq = none
   4b3cc:	add	w1, w0, #0x978
   4b3d0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b3d4:	tbnz	w0, #31, 4c360 <aarch64_opcode_lookup@@Base+0x2eb8>
   4b3d8:	tbnz	w0, #4, 4c9e8 <aarch64_opcode_lookup@@Base+0x3540>
   4b3dc:	tbnz	w0, #10, 4dd08 <aarch64_opcode_lookup@@Base+0x4860>
   4b3e0:	tbnz	w0, #11, 4dcfc <aarch64_opcode_lookup@@Base+0x4854>
   4b3e4:	ubfx	x0, x0, #12, #1
   4b3e8:	add	w1, w0, #0x90a
   4b3ec:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b3f0:	tbnz	w0, #12, 4c01c <aarch64_opcode_lookup@@Base+0x2b74>
   4b3f4:	tbnz	w0, #13, 4de68 <aarch64_opcode_lookup@@Base+0x49c0>
   4b3f8:	tst	x0, #0x4000
   4b3fc:	mov	w1, #0x233                 	// #563
   4b400:	mov	w0, #0x235                 	// #565
   4b404:	csel	w1, w0, w1, eq  // eq = none
   4b408:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b40c:	tbnz	w0, #14, 4bde0 <aarch64_opcode_lookup@@Base+0x2938>
   4b410:	tbnz	w0, #15, 4d48c <aarch64_opcode_lookup@@Base+0x3fe4>
   4b414:	tbnz	w0, #29, 4e25c <aarch64_opcode_lookup@@Base+0x4db4>
   4b418:	tst	x0, #0x40000000
   4b41c:	mov	w1, #0x1e0                 	// #480
   4b420:	mov	w0, #0x34d                 	// #845
   4b424:	csel	w1, w0, w1, eq  // eq = none
   4b428:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b42c:	tbnz	w0, #22, 4c0bc <aarch64_opcode_lookup@@Base+0x2c14>
   4b430:	tbnz	w0, #31, 4da54 <aarch64_opcode_lookup@@Base+0x45ac>
   4b434:	tst	x0, #0x400
   4b438:	mov	w1, #0x825                 	// #2085
   4b43c:	mov	w0, #0x823                 	// #2083
   4b440:	csel	w1, w0, w1, eq  // eq = none
   4b444:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b448:	tbnz	w0, #31, 4c4ac <aarch64_opcode_lookup@@Base+0x3004>
   4b44c:	tbnz	w0, #10, 4c7f8 <aarch64_opcode_lookup@@Base+0x3350>
   4b450:	tbnz	w0, #11, 4d658 <aarch64_opcode_lookup@@Base+0x41b0>
   4b454:	tst	x0, #0x1000
   4b458:	mov	w1, #0x8c6                 	// #2246
   4b45c:	mov	w0, #0x800                 	// #2048
   4b460:	csel	w1, w0, w1, eq  // eq = none
   4b464:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b468:	tbz	w0, #13, 4cac8 <aarch64_opcode_lookup@@Base+0x3620>
   4b46c:	tst	x0, #0x800000
   4b470:	mov	w1, #0x230                 	// #560
   4b474:	mov	w0, #0x22e                 	// #558
   4b478:	csel	w1, w0, w1, eq  // eq = none
   4b47c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b480:	tbnz	w0, #23, 4c0e8 <aarch64_opcode_lookup@@Base+0x2c40>
   4b484:	tst	x0, #0x400000
   4b488:	mov	w1, #0x63b                 	// #1595
   4b48c:	mov	w0, #0x63f                 	// #1599
   4b490:	csel	w1, w0, w1, eq  // eq = none
   4b494:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b498:	tbnz	w0, #13, 4bdc4 <aarch64_opcode_lookup@@Base+0x291c>
   4b49c:	tbnz	w0, #14, 4d3b0 <aarch64_opcode_lookup@@Base+0x3f08>
   4b4a0:	tst	x0, #0x20000000
   4b4a4:	mov	w1, #0x152                 	// #338
   4b4a8:	mov	w0, #0x11e                 	// #286
   4b4ac:	csel	w1, w0, w1, eq  // eq = none
   4b4b0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b4b4:	tbnz	w0, #30, 4bf5c <aarch64_opcode_lookup@@Base+0x2ab4>
   4b4b8:	cmp	w0, #0x0
   4b4bc:	mov	w1, #0x38e                 	// #910
   4b4c0:	mov	w0, #0x386                 	// #902
   4b4c4:	csel	w1, w0, w1, ge  // ge = tcont
   4b4c8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b4cc:	tbnz	w0, #31, 4c540 <aarch64_opcode_lookup@@Base+0x3098>
   4b4d0:	tst	x0, #0x1000
   4b4d4:	mov	w1, #0x88f                 	// #2191
   4b4d8:	mov	w0, #0x80b                 	// #2059
   4b4dc:	csel	w1, w0, w1, eq  // eq = none
   4b4e0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b4e4:	tbnz	w0, #12, 4c09c <aarch64_opcode_lookup@@Base+0x2bf4>
   4b4e8:	tbnz	w0, #13, 4cd28 <aarch64_opcode_lookup@@Base+0x3880>
   4b4ec:	tbnz	w0, #14, 4db78 <aarch64_opcode_lookup@@Base+0x46d0>
   4b4f0:	tbnz	w0, #29, 4eef0 <aarch64_opcode_lookup@@Base+0x5a48>
   4b4f4:	tbz	w0, #30, 4ef10 <aarch64_opcode_lookup@@Base+0x5a68>
   4b4f8:	tst	x0, #0x10000
   4b4fc:	mov	w1, #0x2b5                 	// #693
   4b500:	mov	w0, #0x2ad                 	// #685
   4b504:	csel	w1, w0, w1, eq  // eq = none
   4b508:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b50c:	tbnz	w0, #22, 4bac0 <aarch64_opcode_lookup@@Base+0x2618>
   4b510:	tbnz	w0, #23, 4d154 <aarch64_opcode_lookup@@Base+0x3cac>
   4b514:	tst	x0, #0x100000
   4b518:	mov	w1, #0x776                 	// #1910
   4b51c:	mov	w0, #0x74f                 	// #1871
   4b520:	csel	w1, w0, w1, eq  // eq = none
   4b524:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b528:	tbnz	w0, #31, 4cad0 <aarch64_opcode_lookup@@Base+0x3628>
   4b52c:	tbnz	w0, #10, 4c598 <aarch64_opcode_lookup@@Base+0x30f0>
   4b530:	tbnz	w0, #11, 4d4a4 <aarch64_opcode_lookup@@Base+0x3ffc>
   4b534:	tst	x0, #0x1000
   4b538:	mov	w1, #0x856                 	// #2134
   4b53c:	mov	w0, #0x8a8                 	// #2216
   4b540:	csel	w1, w0, w1, eq  // eq = none
   4b544:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b548:	tbnz	w0, #22, 4bf24 <aarch64_opcode_lookup@@Base+0x2a7c>
   4b54c:	tbz	w0, #23, 4e324 <aarch64_opcode_lookup@@Base+0x4e7c>
   4b550:	tbnz	w0, #31, 4df54 <aarch64_opcode_lookup@@Base+0x4aac>
   4b554:	tbnz	w0, #10, 4d334 <aarch64_opcode_lookup@@Base+0x3e8c>
   4b558:	tst	x0, #0x1000
   4b55c:	mov	w1, #0x8e0                 	// #2272
   4b560:	mov	w0, #0x863                 	// #2147
   4b564:	csel	w1, w0, w1, eq  // eq = none
   4b568:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b56c:	tbnz	w0, #22, 4bf10 <aarch64_opcode_lookup@@Base+0x2a68>
   4b570:	tst	x0, #0x800000
   4b574:	mov	w1, #0x67d                 	// #1661
   4b578:	mov	w0, #0x689                 	// #1673
   4b57c:	csel	w1, w0, w1, eq  // eq = none
   4b580:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b584:	tbnz	w0, #22, 4d0b8 <aarch64_opcode_lookup@@Base+0x3c10>
   4b588:	cmp	w0, #0x0
   4b58c:	mov	w1, #0x697                 	// #1687
   4b590:	mov	w0, #0x827                 	// #2087
   4b594:	csel	w1, w0, w1, ge  // ge = tcont
   4b598:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b59c:	tbnz	w0, #13, 4bfac <aarch64_opcode_lookup@@Base+0x2b04>
   4b5a0:	tbnz	w0, #14, 4d4cc <aarch64_opcode_lookup@@Base+0x4024>
   4b5a4:	tbnz	w0, #16, 4df74 <aarch64_opcode_lookup@@Base+0x4acc>
   4b5a8:	tst	x0, #0x20000000
   4b5ac:	mov	w1, #0xdc                  	// #220
   4b5b0:	mov	w0, #0xab                  	// #171
   4b5b4:	csel	w1, w0, w1, eq  // eq = none
   4b5b8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b5bc:	tbnz	w0, #29, 4d348 <aarch64_opcode_lookup@@Base+0x3ea0>
   4b5c0:	tbnz	w0, #22, 4c3f4 <aarch64_opcode_lookup@@Base+0x2f4c>
   4b5c4:	tst	x0, #0x800000
   4b5c8:	cset	w0, eq  // eq = none
   4b5cc:	add	w1, w0, #0x971
   4b5d0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b5d4:	tbnz	w0, #12, 4bffc <aarch64_opcode_lookup@@Base+0x2b54>
   4b5d8:	tbnz	w0, #13, 4d1ec <aarch64_opcode_lookup@@Base+0x3d44>
   4b5dc:	tst	x0, #0x4000
   4b5e0:	mov	w1, #0x148                 	// #328
   4b5e4:	mov	w0, #0x141                 	// #321
   4b5e8:	csel	w1, w0, w1, eq  // eq = none
   4b5ec:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b5f0:	tbnz	w0, #29, 4d138 <aarch64_opcode_lookup@@Base+0x3c90>
   4b5f4:	tst	x0, #0x40000000
   4b5f8:	mov	w1, #0x943                 	// #2371
   4b5fc:	mov	w0, #0x93f                 	// #2367
   4b600:	csel	w1, w0, w1, eq  // eq = none
   4b604:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b608:	ubfx	x0, x0, #14, #1
   4b60c:	add	w1, w0, #0x1a9
   4b610:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b614:	tbnz	w0, #22, 4bf8c <aarch64_opcode_lookup@@Base+0x2ae4>
   4b618:	tbz	w0, #23, 4e14c <aarch64_opcode_lookup@@Base+0x4ca4>
   4b61c:	tbnz	w0, #31, 4de8c <aarch64_opcode_lookup@@Base+0x49e4>
   4b620:	tbnz	w0, #10, 4cda0 <aarch64_opcode_lookup@@Base+0x38f8>
   4b624:	tst	x0, #0x1000
   4b628:	mov	w1, #0x8e7                 	// #2279
   4b62c:	mov	w0, #0x86a                 	// #2154
   4b630:	csel	w1, w0, w1, eq  // eq = none
   4b634:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b638:	tbnz	w0, #31, 4c498 <aarch64_opcode_lookup@@Base+0x2ff0>
   4b63c:	tbnz	w0, #10, 4c8ec <aarch64_opcode_lookup@@Base+0x3444>
   4b640:	tbnz	w0, #11, 4d6b8 <aarch64_opcode_lookup@@Base+0x4210>
   4b644:	tst	x0, #0x1000
   4b648:	mov	w1, #0x893                 	// #2195
   4b64c:	mov	w0, #0x876                 	// #2166
   4b650:	csel	w1, w0, w1, eq  // eq = none
   4b654:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b658:	tbnz	w0, #20, 4bb2c <aarch64_opcode_lookup@@Base+0x2684>
   4b65c:	tbnz	w0, #22, 4d140 <aarch64_opcode_lookup@@Base+0x3c98>
   4b660:	tst	x0, #0x800000
   4b664:	mov	w1, #0x61d                 	// #1565
   4b668:	mov	w0, #0x62a                 	// #1578
   4b66c:	csel	w1, w0, w1, eq  // eq = none
   4b670:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b674:	cmp	w0, #0x0
   4b678:	mov	w1, #0x954                 	// #2388
   4b67c:	mov	w0, #0x94d                 	// #2381
   4b680:	csel	w1, w0, w1, ge  // ge = tcont
   4b684:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b688:	cmp	w0, #0x0
   4b68c:	mov	w1, #0x955                 	// #2389
   4b690:	mov	w0, #0x94e                 	// #2382
   4b694:	csel	w1, w0, w1, ge  // ge = tcont
   4b698:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b69c:	tbnz	w0, #11, 4bd28 <aarch64_opcode_lookup@@Base+0x2880>
   4b6a0:	tbnz	w0, #12, 4ccdc <aarch64_opcode_lookup@@Base+0x3834>
   4b6a4:	ubfx	x0, x0, #13, #1
   4b6a8:	add	w1, w0, #0x7ef
   4b6ac:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b6b0:	tbnz	w0, #12, 4c208 <aarch64_opcode_lookup@@Base+0x2d60>
   4b6b4:	tbnz	w0, #13, 4cde8 <aarch64_opcode_lookup@@Base+0x3940>
   4b6b8:	tbz	w0, #14, 4e880 <aarch64_opcode_lookup@@Base+0x53d8>
   4b6bc:	tbnz	w0, #16, 4e5e0 <aarch64_opcode_lookup@@Base+0x5138>
   4b6c0:	tst	x0, #0x80000
   4b6c4:	mov	w1, #0x29f                 	// #671
   4b6c8:	mov	w0, #0xa6                  	// #166
   4b6cc:	csel	w1, w0, w1, eq  // eq = none
   4b6d0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b6d4:	tbnz	w0, #22, 4c238 <aarch64_opcode_lookup@@Base+0x2d90>
   4b6d8:	tbnz	w0, #21, 4cc20 <aarch64_opcode_lookup@@Base+0x3778>
   4b6dc:	tst	x0, #0x800000
   4b6e0:	mov	w1, #0x82b                 	// #2091
   4b6e4:	mov	w0, #0x828                 	// #2088
   4b6e8:	csel	w1, w0, w1, eq  // eq = none
   4b6ec:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b6f0:	tbnz	w0, #22, 4cc18 <aarch64_opcode_lookup@@Base+0x3770>
   4b6f4:	tst	x0, #0x800000
   4b6f8:	mov	w1, #0x754                 	// #1876
   4b6fc:	mov	w0, #0x769                 	// #1897
   4b700:	csel	w1, w0, w1, eq  // eq = none
   4b704:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b708:	tbnz	w0, #22, 4cc58 <aarch64_opcode_lookup@@Base+0x37b0>
   4b70c:	tst	x0, #0x800000
   4b710:	mov	w1, #0x756                 	// #1878
   4b714:	mov	w0, #0x76b                 	// #1899
   4b718:	csel	w1, w0, w1, eq  // eq = none
   4b71c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b720:	tbz	w0, #12, 4cbf4 <aarch64_opcode_lookup@@Base+0x374c>
   4b724:	tbz	w0, #23, 4e5c0 <aarch64_opcode_lookup@@Base+0x5118>
   4b728:	tst	x0, #0x40000000
   4b72c:	cset	w0, eq  // eq = none
   4b730:	add	w1, w0, #0x982
   4b734:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b738:	ubfx	x0, x0, #30, #1
   4b73c:	add	w1, w0, #0x68
   4b740:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b744:	tst	x0, #0x800000
   4b748:	cset	w0, eq  // eq = none
   4b74c:	add	w1, w0, #0x73
   4b750:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b754:	tbnz	w0, #15, 4c444 <aarch64_opcode_lookup@@Base+0x2f9c>
   4b758:	tbnz	w0, #22, 4d2cc <aarch64_opcode_lookup@@Base+0x3e24>
   4b75c:	tst	x0, #0x800000
   4b760:	mov	w1, #0x5f2                 	// #1522
   4b764:	mov	w0, #0x5de                 	// #1502
   4b768:	csel	w1, w0, w1, eq  // eq = none
   4b76c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b770:	tbnz	w0, #13, 4c4ec <aarch64_opcode_lookup@@Base+0x3044>
   4b774:	tst	x0, #0x8000
   4b778:	mov	w1, #0x229                 	// #553
   4b77c:	mov	w0, #0x227                 	// #551
   4b780:	csel	w1, w0, w1, eq  // eq = none
   4b784:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b788:	tbnz	w0, #12, 4c340 <aarch64_opcode_lookup@@Base+0x2e98>
   4b78c:	tbnz	w0, #13, 4d19c <aarch64_opcode_lookup@@Base+0x3cf4>
   4b790:	tst	x0, #0x4000
   4b794:	mov	w1, #0x114                 	// #276
   4b798:	mov	w0, #0x10d                 	// #269
   4b79c:	csel	w1, w0, w1, eq  // eq = none
   4b7a0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b7a4:	tbnz	w0, #22, 4c184 <aarch64_opcode_lookup@@Base+0x2cdc>
   4b7a8:	tst	x0, #0x800000
   4b7ac:	mov	w1, #0x75b                 	// #1883
   4b7b0:	mov	w0, #0x748                 	// #1864
   4b7b4:	csel	w1, w0, w1, eq  // eq = none
   4b7b8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b7bc:	tbnz	w0, #23, 4c330 <aarch64_opcode_lookup@@Base+0x2e88>
   4b7c0:	tbz	w0, #30, 4e11c <aarch64_opcode_lookup@@Base+0x4c74>
   4b7c4:	tst	x0, #0x200000
   4b7c8:	mov	w1, #0x6e6                 	// #1766
   4b7cc:	mov	w0, #0x61b                 	// #1563
   4b7d0:	csel	w1, w0, w1, eq  // eq = none
   4b7d4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b7d8:	tst	x0, #0x800000
   4b7dc:	mov	w1, #0x60e                 	// #1550
   4b7e0:	mov	w0, #0x611                 	// #1553
   4b7e4:	csel	w1, w0, w1, eq  // eq = none
   4b7e8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b7ec:	tbnz	w0, #22, 4c36c <aarch64_opcode_lookup@@Base+0x2ec4>
   4b7f0:	tbnz	w0, #21, 4df5c <aarch64_opcode_lookup@@Base+0x4ab4>
   4b7f4:	tst	x0, #0x800000
   4b7f8:	mov	w1, #0x6ee                 	// #1774
   4b7fc:	mov	w0, #0x6fc                 	// #1788
   4b800:	csel	w1, w0, w1, eq  // eq = none
   4b804:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b808:	tbnz	w0, #13, 4c56c <aarch64_opcode_lookup@@Base+0x30c4>
   4b80c:	tbnz	w0, #22, 4d4fc <aarch64_opcode_lookup@@Base+0x4054>
   4b810:	tst	x0, #0x800000
   4b814:	mov	w1, #0x642                 	// #1602
   4b818:	mov	w0, #0x646                 	// #1606
   4b81c:	csel	w1, w0, w1, eq  // eq = none
   4b820:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b824:	tbnz	w0, #13, 4c100 <aarch64_opcode_lookup@@Base+0x2c58>
   4b828:	tbnz	w0, #22, 4cce8 <aarch64_opcode_lookup@@Base+0x3840>
   4b82c:	tst	x0, #0x800000
   4b830:	mov	w1, #0x6b6                 	// #1718
   4b834:	mov	w0, #0x6ba                 	// #1722
   4b838:	csel	w1, w0, w1, eq  // eq = none
   4b83c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b840:	tbnz	w0, #22, 4c41c <aarch64_opcode_lookup@@Base+0x2f74>
   4b844:	tbnz	w0, #21, 4e2d8 <aarch64_opcode_lookup@@Base+0x4e30>
   4b848:	tst	x0, #0x800000
   4b84c:	mov	w1, #0x6eb                 	// #1771
   4b850:	mov	w0, #0x6f9                 	// #1785
   4b854:	csel	w1, w0, w1, eq  // eq = none
   4b858:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b85c:	tbnz	w0, #15, 4c4d4 <aarch64_opcode_lookup@@Base+0x302c>
   4b860:	tbnz	w0, #22, 4cf2c <aarch64_opcode_lookup@@Base+0x3a84>
   4b864:	tst	x0, #0x800000
   4b868:	mov	w1, #0x66e                 	// #1646
   4b86c:	mov	w0, #0x65b                 	// #1627
   4b870:	csel	w1, w0, w1, eq  // eq = none
   4b874:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b878:	tbz	w0, #22, 4d434 <aarch64_opcode_lookup@@Base+0x3f8c>
   4b87c:	tbz	w0, #21, 4df4c <aarch64_opcode_lookup@@Base+0x4aa4>
   4b880:	tst	x0, #0x800000
   4b884:	mov	w1, #0x758                 	// #1880
   4b888:	mov	w0, #0x76f                 	// #1903
   4b88c:	csel	w1, w0, w1, eq  // eq = none
   4b890:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b894:	tbnz	w0, #22, 4c470 <aarch64_opcode_lookup@@Base+0x2fc8>
   4b898:	tbnz	w0, #21, 4d4b8 <aarch64_opcode_lookup@@Base+0x4010>
   4b89c:	tst	x0, #0x800000
   4b8a0:	mov	w1, #0x6f2                 	// #1778
   4b8a4:	mov	w0, #0x6e3                 	// #1763
   4b8a8:	csel	w1, w0, w1, eq  // eq = none
   4b8ac:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b8b0:	tbnz	w0, #22, 4c278 <aarch64_opcode_lookup@@Base+0x2dd0>
   4b8b4:	tbnz	w0, #21, 4ced4 <aarch64_opcode_lookup@@Base+0x3a2c>
   4b8b8:	tst	x0, #0x800000
   4b8bc:	mov	w1, #0x6f5                 	// #1781
   4b8c0:	mov	w0, #0x6e7                 	// #1767
   4b8c4:	csel	w1, w0, w1, eq  // eq = none
   4b8c8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b8cc:	tst	x0, #0x200000
   4b8d0:	mov	w1, #0x2f4                 	// #756
   4b8d4:	mov	w0, #0x2ef                 	// #751
   4b8d8:	csel	w1, w0, w1, eq  // eq = none
   4b8dc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b8e0:	tst	x0, #0x200000
   4b8e4:	mov	w1, #0x2f3                 	// #755
   4b8e8:	mov	w0, #0x2ee                 	// #750
   4b8ec:	csel	w1, w0, w1, eq  // eq = none
   4b8f0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b8f4:	tbnz	w0, #22, 4c5e0 <aarch64_opcode_lookup@@Base+0x3138>
   4b8f8:	tst	x0, #0x800000
   4b8fc:	mov	w1, #0x791                 	// #1937
   4b900:	mov	w0, #0x78d                 	// #1933
   4b904:	csel	w1, w0, w1, eq  // eq = none
   4b908:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b90c:	ubfx	x0, x0, #22, #1
   4b910:	add	w1, w0, #0x51b
   4b914:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b918:	tbnz	w0, #17, 4ca34 <aarch64_opcode_lookup@@Base+0x358c>
   4b91c:	tbnz	w0, #18, 4d57c <aarch64_opcode_lookup@@Base+0x40d4>
   4b920:	tbz	w0, #19, 4ee98 <aarch64_opcode_lookup@@Base+0x59f0>
   4b924:	tst	x0, #0x100000
   4b928:	mov	w1, #0x58f                 	// #1423
   4b92c:	mov	w0, #0x7b4                 	// #1972
   4b930:	csel	w1, w0, w1, eq  // eq = none
   4b934:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b938:	tst	x0, #0x10
   4b93c:	mov	w1, #0x562                 	// #1378
   4b940:	mov	w0, #0x577                 	// #1399
   4b944:	csel	w1, w0, w1, eq  // eq = none
   4b948:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b94c:	tbnz	w0, #12, 4c6e8 <aarch64_opcode_lookup@@Base+0x3240>
   4b950:	tbnz	w0, #30, 4d858 <aarch64_opcode_lookup@@Base+0x43b0>
   4b954:	tst	x0, #0x800
   4b958:	mov	w1, #0x6be                 	// #1726
   4b95c:	mov	w0, #0x6c4                 	// #1732
   4b960:	csel	w1, w0, w1, eq  // eq = none
   4b964:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b968:	tbz	w0, #11, 4e114 <aarch64_opcode_lookup@@Base+0x4c6c>
   4b96c:	tst	x0, #0x1000
   4b970:	mov	w1, #0x5be                 	// #1470
   4b974:	mov	w0, #0x5c7                 	// #1479
   4b978:	csel	w1, w0, w1, eq  // eq = none
   4b97c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b980:	ubfx	x0, x0, #23, #1
   4b984:	add	w1, w0, #0x965
   4b988:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b98c:	tbnz	w0, #13, 4c6a4 <aarch64_opcode_lookup@@Base+0x31fc>
   4b990:	tbnz	w0, #15, 4dbe0 <aarch64_opcode_lookup@@Base+0x4738>
   4b994:	tst	x0, #0x400000
   4b998:	mov	w1, #0x12a                 	// #298
   4b99c:	mov	w0, #0x9a                  	// #154
   4b9a0:	csel	w1, w0, w1, eq  // eq = none
   4b9a4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b9a8:	tbnz	w0, #13, 4c9d4 <aarch64_opcode_lookup@@Base+0x352c>
   4b9ac:	tst	x0, #0x800000
   4b9b0:	mov	w1, #0x169                 	// #361
   4b9b4:	mov	w0, #0x159                 	// #345
   4b9b8:	csel	w1, w0, w1, eq  // eq = none
   4b9bc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b9c0:	mov	w1, #0x381                 	// #897
   4b9c4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b9c8:	tbnz	w0, #13, 4c9c0 <aarch64_opcode_lookup@@Base+0x3518>
   4b9cc:	tst	x0, #0x4000
   4b9d0:	mov	w1, #0x109                 	// #265
   4b9d4:	mov	w0, #0x106                 	// #262
   4b9d8:	csel	w1, w0, w1, eq  // eq = none
   4b9dc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b9e0:	mov	w1, #0x380                 	// #896
   4b9e4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4b9e8:	tbnz	w0, #17, 4c880 <aarch64_opcode_lookup@@Base+0x33d8>
   4b9ec:	tbnz	w0, #18, 4e0dc <aarch64_opcode_lookup@@Base+0x4c34>
   4b9f0:	tbnz	w0, #19, 4e0c4 <aarch64_opcode_lookup@@Base+0x4c1c>
   4b9f4:	tbz	w0, #20, 4e8cc <aarch64_opcode_lookup@@Base+0x5424>
   4b9f8:	tst	x0, #0x40000000
   4b9fc:	mov	w1, #0x8d5                 	// #2261
   4ba00:	mov	w0, #0x6c6                 	// #1734
   4ba04:	csel	w1, w0, w1, eq  // eq = none
   4ba08:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ba0c:	tst	x0, #0x2000
   4ba10:	mov	w1, #0x163                 	// #355
   4ba14:	mov	w0, #0x15b                 	// #347
   4ba18:	csel	w1, w0, w1, eq  // eq = none
   4ba1c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ba20:	tbnz	w0, #16, 4c838 <aarch64_opcode_lookup@@Base+0x3390>
   4ba24:	tbnz	w0, #17, 4da90 <aarch64_opcode_lookup@@Base+0x45e8>
   4ba28:	tbnz	w0, #18, 4da7c <aarch64_opcode_lookup@@Base+0x45d4>
   4ba2c:	tst	x0, #0x80000
   4ba30:	mov	w1, #0x51d                 	// #1309
   4ba34:	mov	w0, #0x547                 	// #1351
   4ba38:	csel	w1, w0, w1, eq  // eq = none
   4ba3c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ba40:	tst	x0, #0x10000
   4ba44:	mov	w1, #0x81d                 	// #2077
   4ba48:	mov	w0, #0x81b                 	// #2075
   4ba4c:	csel	w1, w0, w1, eq  // eq = none
   4ba50:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ba54:	mov	w1, #0x92c                 	// #2348
   4ba58:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ba5c:	tbnz	w0, #11, 4d9f4 <aarch64_opcode_lookup@@Base+0x454c>
   4ba60:	tst	x0, #0x800000
   4ba64:	mov	w1, #0x934                 	// #2356
   4ba68:	mov	w0, #0x92f                 	// #2351
   4ba6c:	csel	w1, w0, w1, eq  // eq = none
   4ba70:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ba74:	tbnz	w0, #13, 4c940 <aarch64_opcode_lookup@@Base+0x3498>
   4ba78:	tbnz	w0, #15, 4e008 <aarch64_opcode_lookup@@Base+0x4b60>
   4ba7c:	tst	x0, #0x800000
   4ba80:	mov	w1, #0x138                 	// #312
   4ba84:	mov	w0, #0x128                 	// #296
   4ba88:	csel	w1, w0, w1, eq  // eq = none
   4ba8c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ba90:	tbnz	w0, #16, 4c854 <aarch64_opcode_lookup@@Base+0x33ac>
   4ba94:	tbnz	w0, #19, 4db60 <aarch64_opcode_lookup@@Base+0x46b8>
   4ba98:	tst	x0, #0x100000
   4ba9c:	mov	w1, #0x51f                 	// #1311
   4baa0:	mov	w0, #0x5d8                 	// #1496
   4baa4:	csel	w1, w0, w1, eq  // eq = none
   4baa8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4baac:	tbnz	w0, #12, 4ca4c <aarch64_opcode_lookup@@Base+0x35a4>
   4bab0:	tbnz	w0, #23, 4d674 <aarch64_opcode_lookup@@Base+0x41cc>
   4bab4:	ubfx	x0, x0, #22, #1
   4bab8:	add	w1, w0, #0x4ff
   4babc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bac0:	tbnz	w0, #23, 4cfac <aarch64_opcode_lookup@@Base+0x3b04>
   4bac4:	tbz	w0, #31, 4e404 <aarch64_opcode_lookup@@Base+0x4f5c>
   4bac8:	tst	x0, #0x100000
   4bacc:	mov	w1, #0x786                 	// #1926
   4bad0:	mov	w0, #0x753                 	// #1875
   4bad4:	csel	w1, w0, w1, eq  // eq = none
   4bad8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4badc:	tbnz	w0, #31, 4e780 <aarch64_opcode_lookup@@Base+0x52d8>
   4bae0:	tst	x0, #0x40000000
   4bae4:	mov	w1, #0x38a                 	// #906
   4bae8:	mov	w0, #0x385                 	// #901
   4baec:	csel	w1, w0, w1, eq  // eq = none
   4baf0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4baf4:	tst	x0, #0x4000
   4baf8:	mov	w1, #0x253                 	// #595
   4bafc:	mov	w0, #0x251                 	// #593
   4bb00:	csel	w1, w0, w1, eq  // eq = none
   4bb04:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bb08:	tbz	w0, #15, 4e488 <aarch64_opcode_lookup@@Base+0x4fe0>
   4bb0c:	tbnz	w0, #16, 4cfc4 <aarch64_opcode_lookup@@Base+0x3b1c>
   4bb10:	tbnz	w0, #19, 4e474 <aarch64_opcode_lookup@@Base+0x4fcc>
   4bb14:	tbnz	w0, #20, 4ed9c <aarch64_opcode_lookup@@Base+0x58f4>
   4bb18:	tst	x0, #0x20000000
   4bb1c:	mov	w1, #0x20f                 	// #527
   4bb20:	mov	w0, #0x1f1                 	// #497
   4bb24:	csel	w1, w0, w1, eq  // eq = none
   4bb28:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bb2c:	tbnz	w0, #22, 4d23c <aarch64_opcode_lookup@@Base+0x3d94>
   4bb30:	tst	x0, #0x800000
   4bb34:	mov	w1, #0x6ac                 	// #1708
   4bb38:	mov	w0, #0x6af                 	// #1711
   4bb3c:	csel	w1, w0, w1, eq  // eq = none
   4bb40:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bb44:	ubfx	x0, x0, #22, #1
   4bb48:	add	w1, w0, #0x56b
   4bb4c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bb50:	tst	x0, #0x800000
   4bb54:	mov	w1, #0x5e9                 	// #1513
   4bb58:	mov	w0, #0x637                 	// #1591
   4bb5c:	csel	w1, w0, w1, eq  // eq = none
   4bb60:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bb64:	tbnz	w0, #31, 4cd54 <aarch64_opcode_lookup@@Base+0x38ac>
   4bb68:	tbnz	w0, #4, 4e68c <aarch64_opcode_lookup@@Base+0x51e4>
   4bb6c:	tbnz	w0, #9, 4ed08 <aarch64_opcode_lookup@@Base+0x5860>
   4bb70:	tst	x0, #0x100000
   4bb74:	mov	w1, #0x516                 	// #1302
   4bb78:	mov	w0, #0x6de                 	// #1758
   4bb7c:	csel	w1, w0, w1, eq  // eq = none
   4bb80:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bb84:	tst	x0, #0x800000
   4bb88:	mov	w1, #0x242                 	// #578
   4bb8c:	mov	w0, #0x23c                 	// #572
   4bb90:	csel	w1, w0, w1, eq  // eq = none
   4bb94:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bb98:	ubfx	x0, x0, #30, #1
   4bb9c:	add	w1, w0, #0x42
   4bba0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bba4:	ubfx	x0, x0, #30, #1
   4bba8:	add	w1, w0, #0x78
   4bbac:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bbb0:	tbnz	w0, #14, 4cf5c <aarch64_opcode_lookup@@Base+0x3ab4>
   4bbb4:	tbnz	w0, #22, 4dcac <aarch64_opcode_lookup@@Base+0x4804>
   4bbb8:	tbnz	w0, #23, 4d8f8 <aarch64_opcode_lookup@@Base+0x4450>
   4bbbc:	tbnz	w0, #31, 4efcc <aarch64_opcode_lookup@@Base+0x5b24>
   4bbc0:	ubfx	x0, x0, #30, #1
   4bbc4:	add	w1, w0, #0x425
   4bbc8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bbcc:	tbnz	w0, #31, 4cc04 <aarch64_opcode_lookup@@Base+0x375c>
   4bbd0:	tbnz	w0, #9, 4e068 <aarch64_opcode_lookup@@Base+0x4bc0>
   4bbd4:	tbnz	w0, #20, 4ed10 <aarch64_opcode_lookup@@Base+0x5868>
   4bbd8:	tst	x0, #0x10
   4bbdc:	mov	w1, #0x6d8                 	// #1752
   4bbe0:	mov	w0, #0x6dd                 	// #1757
   4bbe4:	csel	w1, w0, w1, eq  // eq = none
   4bbe8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bbec:	tst	x0, #0x20000000
   4bbf0:	mov	w1, #0x94                  	// #148
   4bbf4:	mov	w0, #0x8b                  	// #139
   4bbf8:	csel	w1, w0, w1, eq  // eq = none
   4bbfc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bc00:	tst	x0, #0x800000
   4bc04:	mov	w1, #0x66a                 	// #1642
   4bc08:	mov	w0, #0x6a1                 	// #1697
   4bc0c:	csel	w1, w0, w1, eq  // eq = none
   4bc10:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bc14:	ubfx	x0, x0, #30, #1
   4bc18:	add	w1, w0, #0x7b
   4bc1c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bc20:	tbnz	w0, #22, 4cbcc <aarch64_opcode_lookup@@Base+0x3724>
   4bc24:	tst	x0, #0x800000
   4bc28:	mov	w1, #0x792                 	// #1938
   4bc2c:	mov	w0, #0x78e                 	// #1934
   4bc30:	csel	w1, w0, w1, eq  // eq = none
   4bc34:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bc38:	tst	x0, #0x800000
   4bc3c:	mov	w1, #0x6a8                 	// #1704
   4bc40:	mov	w0, #0x6b3                 	// #1715
   4bc44:	csel	w1, w0, w1, eq  // eq = none
   4bc48:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bc4c:	cmp	w0, #0x0
   4bc50:	mov	w1, #0x3a4                 	// #932
   4bc54:	mov	w0, #0x3a0                 	// #928
   4bc58:	csel	w1, w0, w1, ge  // ge = tcont
   4bc5c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bc60:	tbnz	w0, #14, 4ce30 <aarch64_opcode_lookup@@Base+0x3988>
   4bc64:	tbnz	w0, #29, 4e824 <aarch64_opcode_lookup@@Base+0x537c>
   4bc68:	ubfx	x0, x0, #30, #1
   4bc6c:	add	w1, w0, #0x40
   4bc70:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bc74:	tst	x0, #0x8000
   4bc78:	mov	w1, #0x23b                 	// #571
   4bc7c:	mov	w0, #0x246                 	// #582
   4bc80:	csel	w1, w0, w1, eq  // eq = none
   4bc84:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bc88:	tbnz	w0, #31, 4de50 <aarch64_opcode_lookup@@Base+0x49a8>
   4bc8c:	tbnz	w0, #10, 4cdd4 <aarch64_opcode_lookup@@Base+0x392c>
   4bc90:	tbnz	w0, #11, 4dd98 <aarch64_opcode_lookup@@Base+0x48f0>
   4bc94:	tbnz	w0, #12, 4dd8c <aarch64_opcode_lookup@@Base+0x48e4>
   4bc98:	ubfx	x0, x0, #22, #1
   4bc9c:	add	w1, w0, #0x71a
   4bca0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bca4:	tst	x0, #0x4000
   4bca8:	mov	w1, #0x2ac                 	// #684
   4bcac:	mov	w0, #0x2a8                 	// #680
   4bcb0:	csel	w1, w0, w1, eq  // eq = none
   4bcb4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bcb8:	ubfx	x0, x0, #30, #1
   4bcbc:	add	w1, w0, #0x7d
   4bcc0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bcc4:	tbnz	w0, #23, 4ce90 <aarch64_opcode_lookup@@Base+0x39e8>
   4bcc8:	cmp	w0, #0x0
   4bccc:	mov	w1, #0x74d                 	// #1869
   4bcd0:	mov	w0, #0x974                 	// #2420
   4bcd4:	csel	w1, w0, w1, ge  // ge = tcont
   4bcd8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bcdc:	tbnz	w0, #14, 4ccb4 <aarch64_opcode_lookup@@Base+0x380c>
   4bce0:	tst	x0, #0x20000000
   4bce4:	mov	w1, #0x153                 	// #339
   4bce8:	mov	w0, #0x11f                 	// #287
   4bcec:	csel	w1, w0, w1, eq  // eq = none
   4bcf0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bcf4:	tbnz	w0, #13, 4cee8 <aarch64_opcode_lookup@@Base+0x3a40>
   4bcf8:	tst	x0, #0x400000
   4bcfc:	mov	w1, #0xf4                  	// #244
   4bd00:	mov	w0, #0xf2                  	// #242
   4bd04:	csel	w1, w0, w1, eq  // eq = none
   4bd08:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bd0c:	tbnz	w0, #14, 4d398 <aarch64_opcode_lookup@@Base+0x3ef0>
   4bd10:	tbnz	w0, #22, 4e154 <aarch64_opcode_lookup@@Base+0x4cac>
   4bd14:	tbnz	w0, #23, 4e170 <aarch64_opcode_lookup@@Base+0x4cc8>
   4bd18:	tbnz	w0, #31, 4ee34 <aarch64_opcode_lookup@@Base+0x598c>
   4bd1c:	ubfx	x0, x0, #30, #1
   4bd20:	add	w1, w0, #0x431
   4bd24:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bd28:	ubfx	x0, x0, #13, #1
   4bd2c:	add	w1, w0, #0x7e2
   4bd30:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bd34:	tbnz	w0, #14, 4d0c8 <aarch64_opcode_lookup@@Base+0x3c20>
   4bd38:	tst	x0, #0x20000000
   4bd3c:	mov	w1, #0x155                 	// #341
   4bd40:	mov	w0, #0x121                 	// #289
   4bd44:	csel	w1, w0, w1, eq  // eq = none
   4bd48:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bd4c:	tst	x0, #0x1000
   4bd50:	mov	w1, #0x912                 	// #2322
   4bd54:	mov	w0, #0x54b                 	// #1355
   4bd58:	csel	w1, w0, w1, eq  // eq = none
   4bd5c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bd60:	tbnz	w0, #13, 4d214 <aarch64_opcode_lookup@@Base+0x3d6c>
   4bd64:	tbnz	w0, #14, 4d800 <aarch64_opcode_lookup@@Base+0x4358>
   4bd68:	ubfx	x0, x0, #30, #1
   4bd6c:	add	w1, w0, #0x4e
   4bd70:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bd74:	tst	x0, #0x40000000
   4bd78:	mov	w1, #0x94f                 	// #2383
   4bd7c:	mov	w0, #0x94b                 	// #2379
   4bd80:	csel	w1, w0, w1, eq  // eq = none
   4bd84:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bd88:	tbnz	w0, #13, 4d734 <aarch64_opcode_lookup@@Base+0x428c>
   4bd8c:	tst	x0, #0x4000
   4bd90:	mov	w1, #0x2dd                 	// #733
   4bd94:	mov	w0, #0x2bb                 	// #699
   4bd98:	csel	w1, w0, w1, eq  // eq = none
   4bd9c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bda0:	tst	x0, #0x800000
   4bda4:	cset	w0, eq  // eq = none
   4bda8:	add	w1, w0, #0x1b0
   4bdac:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bdb0:	tst	x0, #0x800000
   4bdb4:	mov	w1, #0x5f7                 	// #1527
   4bdb8:	mov	w0, #0x5e2                 	// #1506
   4bdbc:	csel	w1, w0, w1, eq  // eq = none
   4bdc0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bdc4:	tbz	w0, #14, 4e4fc <aarch64_opcode_lookup@@Base+0x5054>
   4bdc8:	tbnz	w0, #23, 4e46c <aarch64_opcode_lookup@@Base+0x4fc4>
   4bdcc:	tst	x0, #0x20000000
   4bdd0:	mov	w1, #0x162                 	// #354
   4bdd4:	mov	w0, #0x12f                 	// #303
   4bdd8:	csel	w1, w0, w1, eq  // eq = none
   4bddc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bde0:	tbnz	w0, #15, 4d040 <aarch64_opcode_lookup@@Base+0x3b98>
   4bde4:	tbnz	w0, #29, 4e060 <aarch64_opcode_lookup@@Base+0x4bb8>
   4bde8:	tst	x0, #0x40000000
   4bdec:	mov	w1, #0x1e1                 	// #481
   4bdf0:	mov	w0, #0x355                 	// #853
   4bdf4:	csel	w1, w0, w1, eq  // eq = none
   4bdf8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bdfc:	tbnz	w0, #31, 4d948 <aarch64_opcode_lookup@@Base+0x44a0>
   4be00:	tst	x0, #0x40000000
   4be04:	mov	w1, #0x39f                 	// #927
   4be08:	mov	w0, #0x39a                 	// #922
   4be0c:	csel	w1, w0, w1, eq  // eq = none
   4be10:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4be14:	ubfx	x0, x0, #30, #1
   4be18:	add	w1, w0, #0x19a
   4be1c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4be20:	tbnz	w0, #31, 4d5d0 <aarch64_opcode_lookup@@Base+0x4128>
   4be24:	tst	x0, #0x40000000
   4be28:	mov	w1, #0x394                 	// #916
   4be2c:	mov	w0, #0x391                 	// #913
   4be30:	csel	w1, w0, w1, eq  // eq = none
   4be34:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4be38:	tst	x0, #0x800000
   4be3c:	mov	w1, #0x676                 	// #1654
   4be40:	mov	w0, #0x662                 	// #1634
   4be44:	csel	w1, w0, w1, eq  // eq = none
   4be48:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4be4c:	tbnz	w0, #22, 4d0f4 <aarch64_opcode_lookup@@Base+0x3c4c>
   4be50:	tbnz	w0, #31, 4e8a0 <aarch64_opcode_lookup@@Base+0x53f8>
   4be54:	tbnz	w0, #10, 4e138 <aarch64_opcode_lookup@@Base+0x4c90>
   4be58:	tbz	w0, #12, 4e898 <aarch64_opcode_lookup@@Base+0x53f0>
   4be5c:	tst	x0, #0x800
   4be60:	mov	w1, #0x83a                 	// #2106
   4be64:	mov	w0, #0x883                 	// #2179
   4be68:	csel	w1, w0, w1, eq  // eq = none
   4be6c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4be70:	tbnz	w0, #11, 4d004 <aarch64_opcode_lookup@@Base+0x3b5c>
   4be74:	tbnz	w0, #12, 4d950 <aarch64_opcode_lookup@@Base+0x44a8>
   4be78:	tbnz	w0, #22, 4d980 <aarch64_opcode_lookup@@Base+0x44d8>
   4be7c:	tst	x0, #0x800000
   4be80:	mov	w1, #0x554                 	// #1364
   4be84:	mov	w0, #0x54c                 	// #1356
   4be88:	csel	w1, w0, w1, eq  // eq = none
   4be8c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4be90:	tst	x0, #0x40000000
   4be94:	mov	w0, #0x4                   	// #4
   4be98:	csinc	w1, w0, wzr, ne  // ne = any
   4be9c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bea0:	tbnz	w0, #17, 4caec <aarch64_opcode_lookup@@Base+0x3644>
   4bea4:	tbnz	w0, #15, 4dc3c <aarch64_opcode_lookup@@Base+0x4794>
   4bea8:	tbnz	w0, #16, 4dc24 <aarch64_opcode_lookup@@Base+0x477c>
   4beac:	tbnz	w0, #18, 4e99c <aarch64_opcode_lookup@@Base+0x54f4>
   4beb0:	tst	x0, #0x80000
   4beb4:	mov	w1, #0x32c                 	// #812
   4beb8:	mov	w0, #0x330                 	// #816
   4bebc:	csel	w1, w0, w1, eq  // eq = none
   4bec0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bec4:	tbnz	w0, #11, 4cd10 <aarch64_opcode_lookup@@Base+0x3868>
   4bec8:	tbnz	w0, #20, 4dcdc <aarch64_opcode_lookup@@Base+0x4834>
   4becc:	tbz	w0, #22, 4ef18 <aarch64_opcode_lookup@@Base+0x5a70>
   4bed0:	tst	x0, #0x800000
   4bed4:	mov	w1, #0x7cd                 	// #1997
   4bed8:	mov	w0, #0x7d0                 	// #2000
   4bedc:	csel	w1, w0, w1, eq  // eq = none
   4bee0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bee4:	tst	x0, #0x800000
   4bee8:	mov	w1, #0x789                 	// #1929
   4beec:	mov	w0, #0x785                 	// #1925
   4bef0:	csel	w1, w0, w1, eq  // eq = none
   4bef4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bef8:	tbz	w0, #14, 4df44 <aarch64_opcode_lookup@@Base+0x4a9c>
   4befc:	tst	x0, #0x800000
   4bf00:	mov	w1, #0x244                 	// #580
   4bf04:	mov	w0, #0x23e                 	// #574
   4bf08:	csel	w1, w0, w1, eq  // eq = none
   4bf0c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bf10:	tst	x0, #0x800000
   4bf14:	mov	w1, #0x665                 	// #1637
   4bf18:	mov	w0, #0x69c                 	// #1692
   4bf1c:	csel	w1, w0, w1, eq  // eq = none
   4bf20:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bf24:	tbz	w0, #23, 4d8f0 <aarch64_opcode_lookup@@Base+0x4448>
   4bf28:	tbnz	w0, #31, 4d8e8 <aarch64_opcode_lookup@@Base+0x4440>
   4bf2c:	tbnz	w0, #10, 4cf48 <aarch64_opcode_lookup@@Base+0x3aa0>
   4bf30:	tst	x0, #0x1000
   4bf34:	mov	w1, #0x8e1                 	// #2273
   4bf38:	mov	w0, #0x864                 	// #2148
   4bf3c:	csel	w1, w0, w1, eq  // eq = none
   4bf40:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bf44:	tbnz	w0, #13, 4cb1c <aarch64_opcode_lookup@@Base+0x3674>
   4bf48:	tst	x0, #0x4000
   4bf4c:	mov	w1, #0x149                 	// #329
   4bf50:	mov	w0, #0x142                 	// #322
   4bf54:	csel	w1, w0, w1, eq  // eq = none
   4bf58:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bf5c:	cmp	w0, #0x0
   4bf60:	mov	w1, #0x38f                 	// #911
   4bf64:	mov	w0, #0x38b                 	// #907
   4bf68:	csel	w1, w0, w1, ge  // ge = tcont
   4bf6c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bf70:	tbnz	w0, #15, 4cdb4 <aarch64_opcode_lookup@@Base+0x390c>
   4bf74:	tbnz	w0, #29, 4db70 <aarch64_opcode_lookup@@Base+0x46c8>
   4bf78:	tst	x0, #0x40000000
   4bf7c:	mov	w1, #0x1e6                 	// #486
   4bf80:	mov	w0, #0x34f                 	// #847
   4bf84:	csel	w1, w0, w1, eq  // eq = none
   4bf88:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bf8c:	tbz	w0, #23, 4e028 <aarch64_opcode_lookup@@Base+0x4b80>
   4bf90:	tbnz	w0, #31, 4e020 <aarch64_opcode_lookup@@Base+0x4b78>
   4bf94:	tbnz	w0, #10, 4d4e8 <aarch64_opcode_lookup@@Base+0x4040>
   4bf98:	tst	x0, #0x1000
   4bf9c:	mov	w1, #0x8e8                 	// #2280
   4bfa0:	mov	w0, #0x86b                 	// #2155
   4bfa4:	csel	w1, w0, w1, eq  // eq = none
   4bfa8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bfac:	tbnz	w0, #14, 4d2ac <aarch64_opcode_lookup@@Base+0x3e04>
   4bfb0:	tbnz	w0, #16, 4e360 <aarch64_opcode_lookup@@Base+0x4eb8>
   4bfb4:	tst	x0, #0x20000000
   4bfb8:	mov	w1, #0xdd                  	// #221
   4bfbc:	mov	w0, #0xad                  	// #173
   4bfc0:	csel	w1, w0, w1, eq  // eq = none
   4bfc4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bfc8:	ubfx	x0, x0, #13, #1
   4bfcc:	add	w1, w0, #0x7e0
   4bfd0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bfd4:	tst	x0, #0x20000000
   4bfd8:	mov	w1, #0x7f                  	// #127
   4bfdc:	mov	w0, #0x75                  	// #117
   4bfe0:	csel	w1, w0, w1, eq  // eq = none
   4bfe4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bfe8:	tst	x0, #0x10
   4bfec:	mov	w1, #0x328                 	// #808
   4bff0:	mov	w0, #0x326                 	// #806
   4bff4:	csel	w1, w0, w1, eq  // eq = none
   4bff8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4bffc:	tbnz	w0, #13, 4ccfc <aarch64_opcode_lookup@@Base+0x3854>
   4c000:	tbnz	w0, #14, 4de60 <aarch64_opcode_lookup@@Base+0x49b8>
   4c004:	tbnz	w0, #22, 4de70 <aarch64_opcode_lookup@@Base+0x49c8>
   4c008:	tst	x0, #0x800000
   4c00c:	mov	w1, #0x170                 	// #368
   4c010:	mov	w0, #0x164                 	// #356
   4c014:	csel	w1, w0, w1, eq  // eq = none
   4c018:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c01c:	tbz	w0, #13, 4e394 <aarch64_opcode_lookup@@Base+0x4eec>
   4c020:	tst	x0, #0x8000
   4c024:	mov	w1, #0x228                 	// #552
   4c028:	mov	w0, #0x231                 	// #561
   4c02c:	csel	w1, w0, w1, eq  // eq = none
   4c030:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c034:	tst	x0, #0x40000000
   4c038:	mov	w1, #0x2be                 	// #702
   4c03c:	mov	w0, #0x2cb                 	// #715
   4c040:	csel	w1, w0, w1, eq  // eq = none
   4c044:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c048:	tbz	w0, #23, 4d72c <aarch64_opcode_lookup@@Base+0x4284>
   4c04c:	tbnz	w0, #31, 4d560 <aarch64_opcode_lookup@@Base+0x40b8>
   4c050:	tst	x0, #0x10000
   4c054:	mov	w1, #0x814                 	// #2068
   4c058:	mov	w0, #0x816                 	// #2070
   4c05c:	csel	w1, w0, w1, eq  // eq = none
   4c060:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c064:	tbnz	w0, #14, 4d264 <aarch64_opcode_lookup@@Base+0x3dbc>
   4c068:	tbnz	w0, #16, 4d814 <aarch64_opcode_lookup@@Base+0x436c>
   4c06c:	tbz	w0, #20, 4f138 <aarch64_opcode_lookup@@Base+0x5c90>
   4c070:	tst	x0, #0x20000000
   4c074:	mov	w1, #0x22                  	// #34
   4c078:	mov	w0, #0x1e                  	// #30
   4c07c:	csel	w1, w0, w1, eq  // eq = none
   4c080:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c084:	tbnz	w0, #15, 4ce10 <aarch64_opcode_lookup@@Base+0x3968>
   4c088:	tst	x0, #0x20000000
   4c08c:	mov	w1, #0x204                 	// #516
   4c090:	mov	w0, #0x353                 	// #851
   4c094:	csel	w1, w0, w1, eq  // eq = none
   4c098:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c09c:	tbnz	w0, #13, 4d250 <aarch64_opcode_lookup@@Base+0x3da8>
   4c0a0:	tbnz	w0, #14, 4d80c <aarch64_opcode_lookup@@Base+0x4364>
   4c0a4:	tbz	w0, #30, 4ef94 <aarch64_opcode_lookup@@Base+0x5aec>
   4c0a8:	tst	x0, #0x10000
   4c0ac:	mov	w1, #0x2b9                 	// #697
   4c0b0:	mov	w0, #0x2b2                 	// #690
   4c0b4:	csel	w1, w0, w1, eq  // eq = none
   4c0b8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c0bc:	tst	x0, #0x800000
   4c0c0:	mov	w1, #0x767                 	// #1895
   4c0c4:	mov	w0, #0x752                 	// #1874
   4c0c8:	csel	w1, w0, w1, eq  // eq = none
   4c0cc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c0d0:	tbnz	w0, #14, 4cd68 <aarch64_opcode_lookup@@Base+0x38c0>
   4c0d4:	tst	x0, #0x20000000
   4c0d8:	mov	w1, #0x154                 	// #340
   4c0dc:	mov	w0, #0x120                 	// #288
   4c0e0:	csel	w1, w0, w1, eq  // eq = none
   4c0e4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c0e8:	tbz	w0, #31, 4de58 <aarch64_opcode_lookup@@Base+0x49b0>
   4c0ec:	tst	x0, #0x400000
   4c0f0:	mov	w1, #0x5ed                 	// #1517
   4c0f4:	mov	w0, #0x5ef                 	// #1519
   4c0f8:	csel	w1, w0, w1, eq  // eq = none
   4c0fc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c100:	tbnz	w0, #22, 4cd84 <aarch64_opcode_lookup@@Base+0x38dc>
   4c104:	tst	x0, #0x800000
   4c108:	mov	w1, #0x6b7                 	// #1719
   4c10c:	mov	w0, #0x6bb                 	// #1723
   4c110:	csel	w1, w0, w1, eq  // eq = none
   4c114:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c118:	tst	x0, #0x800000
   4c11c:	mov	w1, #0x60a                 	// #1546
   4c120:	mov	w0, #0x606                 	// #1542
   4c124:	csel	w1, w0, w1, eq  // eq = none
   4c128:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c12c:	tbnz	w0, #22, 4d200 <aarch64_opcode_lookup@@Base+0x3d58>
   4c130:	tst	x0, #0x800000
   4c134:	mov	w1, #0x62d                 	// #1581
   4c138:	mov	w0, #0x5dd                 	// #1501
   4c13c:	csel	w1, w0, w1, eq  // eq = none
   4c140:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c144:	tst	x0, #0x800000
   4c148:	mov	w1, #0x60b                 	// #1547
   4c14c:	mov	w0, #0x607                 	// #1543
   4c150:	csel	w1, w0, w1, eq  // eq = none
   4c154:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c158:	tst	x0, #0x800000
   4c15c:	mov	w1, #0x66d                 	// #1645
   4c160:	mov	w0, #0x6ea                 	// #1770
   4c164:	csel	w1, w0, w1, eq  // eq = none
   4c168:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c16c:	tbnz	w0, #23, 4cbb0 <aarch64_opcode_lookup@@Base+0x3708>
   4c170:	tst	x0, #0x40000000
   4c174:	mov	w1, #0x620                 	// #1568
   4c178:	mov	w0, #0x61c                 	// #1564
   4c17c:	csel	w1, w0, w1, eq  // eq = none
   4c180:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c184:	tst	x0, #0x800000
   4c188:	mov	w1, #0x761                 	// #1889
   4c18c:	mov	w0, #0x74c                 	// #1868
   4c190:	csel	w1, w0, w1, eq  // eq = none
   4c194:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c198:	tst	x0, #0x800
   4c19c:	mov	w1, #0x8cf                 	// #2255
   4c1a0:	mov	w0, #0x84c                 	// #2124
   4c1a4:	csel	w1, w0, w1, eq  // eq = none
   4c1a8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c1ac:	tst	x0, #0x400000
   4c1b0:	mov	w1, #0x630                 	// #1584
   4c1b4:	mov	w0, #0x82f                 	// #2095
   4c1b8:	csel	w1, w0, w1, eq  // eq = none
   4c1bc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c1c0:	tst	x0, #0x800000
   4c1c4:	mov	w1, #0x5f1                 	// #1521
   4c1c8:	mov	w0, #0x6f8                 	// #1784
   4c1cc:	csel	w1, w0, w1, eq  // eq = none
   4c1d0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c1d4:	tbnz	w0, #20, 4cf80 <aarch64_opcode_lookup@@Base+0x3ad8>
   4c1d8:	tbnz	w0, #22, 4dcc8 <aarch64_opcode_lookup@@Base+0x4820>
   4c1dc:	tst	x0, #0x800000
   4c1e0:	mov	w1, #0x632                 	// #1586
   4c1e4:	mov	w0, #0x5e4                 	// #1508
   4c1e8:	csel	w1, w0, w1, eq  // eq = none
   4c1ec:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c1f0:	tbnz	w0, #22, 4cdfc <aarch64_opcode_lookup@@Base+0x3954>
   4c1f4:	tst	x0, #0x800000
   4c1f8:	mov	w1, #0x61e                 	// #1566
   4c1fc:	mov	w0, #0x62b                 	// #1579
   4c200:	csel	w1, w0, w1, eq  // eq = none
   4c204:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c208:	tbnz	w0, #13, 4ce48 <aarch64_opcode_lookup@@Base+0x39a0>
   4c20c:	tbz	w0, #14, 4e9d4 <aarch64_opcode_lookup@@Base+0x552c>
   4c210:	tst	x0, #0x80000
   4c214:	mov	w1, #0x2a0                 	// #672
   4c218:	mov	w0, #0xa7                  	// #167
   4c21c:	csel	w1, w0, w1, eq  // eq = none
   4c220:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c224:	tst	x0, #0x800000
   4c228:	mov	w1, #0x608                 	// #1544
   4c22c:	mov	w0, #0x60c                 	// #1548
   4c230:	csel	w1, w0, w1, eq  // eq = none
   4c234:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c238:	tst	x0, #0x800000
   4c23c:	mov	w1, #0x603                 	// #1539
   4c240:	mov	w0, #0x5ff                 	// #1535
   4c244:	csel	w1, w0, w1, eq  // eq = none
   4c248:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c24c:	tbnz	w0, #22, 4e6fc <aarch64_opcode_lookup@@Base+0x5254>
   4c250:	tst	x0, #0x800000
   4c254:	mov	w1, #0x8c1                 	// #2241
   4c258:	mov	w0, #0x8c5                 	// #2245
   4c25c:	csel	w1, w0, w1, eq  // eq = none
   4c260:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c264:	tst	x0, #0x800000
   4c268:	mov	w1, #0x5ea                 	// #1514
   4c26c:	mov	w0, #0x638                 	// #1592
   4c270:	csel	w1, w0, w1, eq  // eq = none
   4c274:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c278:	tst	x0, #0x800000
   4c27c:	mov	w1, #0x605                 	// #1541
   4c280:	mov	w0, #0x601                 	// #1537
   4c284:	csel	w1, w0, w1, eq  // eq = none
   4c288:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c28c:	tst	x0, #0x800000
   4c290:	mov	w1, #0x622                 	// #1570
   4c294:	mov	w0, #0x6e4                 	// #1764
   4c298:	csel	w1, w0, w1, eq  // eq = none
   4c29c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c2a0:	tbnz	w0, #22, 4cc8c <aarch64_opcode_lookup@@Base+0x37e4>
   4c2a4:	tst	x0, #0x800000
   4c2a8:	mov	w1, #0x6f0                 	// #1776
   4c2ac:	mov	w0, #0x6fe                 	// #1790
   4c2b0:	csel	w1, w0, w1, eq  // eq = none
   4c2b4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c2b8:	tbnz	w0, #11, 4cbe0 <aarch64_opcode_lookup@@Base+0x3738>
   4c2bc:	tst	x0, #0x1000
   4c2c0:	mov	w1, #0x8f6                 	// #2294
   4c2c4:	mov	w0, #0x8a7                 	// #2215
   4c2c8:	csel	w1, w0, w1, eq  // eq = none
   4c2cc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c2d0:	tbnz	w0, #22, 4d174 <aarch64_opcode_lookup@@Base+0x3ccc>
   4c2d4:	tst	x0, #0x800000
   4c2d8:	mov	w1, #0x6b9                 	// #1721
   4c2dc:	mov	w0, #0x6b5                 	// #1717
   4c2e0:	csel	w1, w0, w1, eq  // eq = none
   4c2e4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c2e8:	tbnz	w0, #11, 4d3e8 <aarch64_opcode_lookup@@Base+0x3f40>
   4c2ec:	tst	x0, #0x1000
   4c2f0:	mov	w1, #0x8bb                 	// #2235
   4c2f4:	mov	w0, #0x850                 	// #2128
   4c2f8:	csel	w1, w0, w1, eq  // eq = none
   4c2fc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c300:	tbnz	w0, #11, 4e32c <aarch64_opcode_lookup@@Base+0x4e84>
   4c304:	tst	x0, #0x1000
   4c308:	mov	w1, #0x91e                 	// #2334
   4c30c:	mov	w0, #0x8b7                 	// #2231
   4c310:	csel	w1, w0, w1, eq  // eq = none
   4c314:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c318:	tbnz	w0, #22, 4d114 <aarch64_opcode_lookup@@Base+0x3c6c>
   4c31c:	tst	x0, #0x800000
   4c320:	mov	w1, #0x691                 	// #1681
   4c324:	mov	w0, #0x659                 	// #1625
   4c328:	csel	w1, w0, w1, eq  // eq = none
   4c32c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c330:	tbz	w0, #30, 4d568 <aarch64_opcode_lookup@@Base+0x40c0>
   4c334:	ubfx	x0, x0, #21, #1
   4c338:	add	w1, w0, #0x627
   4c33c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c340:	tbnz	w0, #13, 4cad8 <aarch64_opcode_lookup@@Base+0x3630>
   4c344:	tbnz	w0, #14, 4e98c <aarch64_opcode_lookup@@Base+0x54e4>
   4c348:	tbnz	w0, #22, 4e234 <aarch64_opcode_lookup@@Base+0x4d8c>
   4c34c:	tst	x0, #0x800000
   4c350:	mov	w1, #0x13d                 	// #317
   4c354:	mov	w0, #0x131                 	// #305
   4c358:	csel	w1, w0, w1, eq  // eq = none
   4c35c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c360:	ubfx	x0, x0, #23, #1
   4c364:	add	w1, w0, #0x961
   4c368:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c36c:	tst	x0, #0x800000
   4c370:	mov	w1, #0x602                 	// #1538
   4c374:	mov	w0, #0x615                 	// #1557
   4c378:	csel	w1, w0, w1, eq  // eq = none
   4c37c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c380:	tbnz	w0, #22, 4d074 <aarch64_opcode_lookup@@Base+0x3bcc>
   4c384:	tst	x0, #0x800000
   4c388:	mov	w1, #0x6b8                 	// #1720
   4c38c:	mov	w0, #0x6b4                 	// #1716
   4c390:	csel	w1, w0, w1, eq  // eq = none
   4c394:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c398:	tbnz	w0, #13, 4d0e0 <aarch64_opcode_lookup@@Base+0x3c38>
   4c39c:	tst	x0, #0x4000
   4c3a0:	mov	w1, #0x115                 	// #277
   4c3a4:	mov	w0, #0x10e                 	// #270
   4c3a8:	csel	w1, w0, w1, eq  // eq = none
   4c3ac:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c3b0:	tbnz	w0, #22, 4d274 <aarch64_opcode_lookup@@Base+0x3dcc>
   4c3b4:	tst	x0, #0x800000
   4c3b8:	mov	w1, #0x78f                 	// #1935
   4c3bc:	mov	w0, #0x793                 	// #1939
   4c3c0:	csel	w1, w0, w1, eq  // eq = none
   4c3c4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c3c8:	tbnz	w0, #22, 4d534 <aarch64_opcode_lookup@@Base+0x408c>
   4c3cc:	tst	x0, #0x800000
   4c3d0:	mov	w1, #0x755                 	// #1877
   4c3d4:	mov	w0, #0x76a                 	// #1898
   4c3d8:	csel	w1, w0, w1, eq  // eq = none
   4c3dc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c3e0:	tst	x0, #0x800000
   4c3e4:	mov	w1, #0x68d                 	// #1677
   4c3e8:	mov	w0, #0x682                 	// #1666
   4c3ec:	csel	w1, w0, w1, eq  // eq = none
   4c3f0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c3f4:	tbz	w0, #23, 4d8b8 <aarch64_opcode_lookup@@Base+0x4410>
   4c3f8:	tst	x0, #0x40000000
   4c3fc:	cset	w0, eq  // eq = none
   4c400:	add	w1, w0, #0x984
   4c404:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c408:	tst	x0, #0x800000
   4c40c:	mov	w1, #0x686                 	// #1670
   4c410:	mov	w0, #0x6f1                 	// #1777
   4c414:	csel	w1, w0, w1, eq  // eq = none
   4c418:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c41c:	tst	x0, #0x800000
   4c420:	mov	w1, #0x610                 	// #1552
   4c424:	mov	w0, #0x614                 	// #1556
   4c428:	csel	w1, w0, w1, eq  // eq = none
   4c42c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c430:	tst	x0, #0x400000
   4c434:	mov	w1, #0x631                 	// #1585
   4c438:	mov	w0, #0x633                 	// #1587
   4c43c:	csel	w1, w0, w1, eq  // eq = none
   4c440:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c444:	tbnz	w0, #22, 4d478 <aarch64_opcode_lookup@@Base+0x3fd0>
   4c448:	tst	x0, #0x800000
   4c44c:	mov	w1, #0x644                 	// #1604
   4c450:	mov	w0, #0x640                 	// #1600
   4c454:	csel	w1, w0, w1, eq  // eq = none
   4c458:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c45c:	tst	x0, #0x800000
   4c460:	mov	w1, #0x625                 	// #1573
   4c464:	mov	w0, #0x61a                 	// #1562
   4c468:	csel	w1, w0, w1, eq  // eq = none
   4c46c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c470:	tst	x0, #0x800000
   4c474:	mov	w1, #0x604                 	// #1540
   4c478:	mov	w0, #0x600                 	// #1536
   4c47c:	csel	w1, w0, w1, eq  // eq = none
   4c480:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c484:	tst	x0, #0x800000
   4c488:	mov	w1, #0x667                 	// #1639
   4c48c:	mov	w0, #0x69e                 	// #1694
   4c490:	csel	w1, w0, w1, eq  // eq = none
   4c494:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c498:	tst	x0, #0x800000
   4c49c:	mov	w1, #0x674                 	// #1652
   4c4a0:	mov	w0, #0x661                 	// #1633
   4c4a4:	csel	w1, w0, w1, eq  // eq = none
   4c4a8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c4ac:	tst	x0, #0x800000
   4c4b0:	mov	w1, #0x668                 	// #1640
   4c4b4:	mov	w0, #0x69f                 	// #1695
   4c4b8:	csel	w1, w0, w1, eq  // eq = none
   4c4bc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c4c0:	tst	x0, #0x800000
   4c4c4:	mov	w1, #0x609                 	// #1545
   4c4c8:	mov	w0, #0x60d                 	// #1549
   4c4cc:	csel	w1, w0, w1, eq  // eq = none
   4c4d0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c4d4:	tbnz	w0, #22, 4d088 <aarch64_opcode_lookup@@Base+0x3be0>
   4c4d8:	tst	x0, #0x800000
   4c4dc:	mov	w1, #0x645                 	// #1605
   4c4e0:	mov	w0, #0x641                 	// #1601
   4c4e4:	csel	w1, w0, w1, eq  // eq = none
   4c4e8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c4ec:	tbz	w0, #14, 4e70c <aarch64_opcode_lookup@@Base+0x5264>
   4c4f0:	tst	x0, #0x800000
   4c4f4:	mov	w1, #0x22f                 	// #559
   4c4f8:	mov	w0, #0x22d                 	// #557
   4c4fc:	csel	w1, w0, w1, eq  // eq = none
   4c500:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c504:	tst	x0, #0x800000
   4c508:	mov	w1, #0x685                 	// #1669
   4c50c:	mov	w0, #0x67a                 	// #1658
   4c510:	csel	w1, w0, w1, eq  // eq = none
   4c514:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c518:	tst	x0, #0x800000
   4c51c:	mov	w1, #0x5f5                 	// #1525
   4c520:	mov	w0, #0x5e1                 	// #1505
   4c524:	csel	w1, w0, w1, eq  // eq = none
   4c528:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c52c:	tst	x0, #0x800000
   4c530:	mov	w1, #0x621                 	// #1569
   4c534:	mov	w0, #0x616                 	// #1558
   4c538:	csel	w1, w0, w1, eq  // eq = none
   4c53c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c540:	tst	x0, #0x800000
   4c544:	mov	w1, #0x68b                 	// #1675
   4c548:	mov	w0, #0x681                 	// #1665
   4c54c:	csel	w1, w0, w1, eq  // eq = none
   4c550:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c554:	tbnz	w0, #22, 4d510 <aarch64_opcode_lookup@@Base+0x4068>
   4c558:	tst	x0, #0x800000
   4c55c:	mov	w1, #0x82a                 	// #2090
   4c560:	mov	w0, #0x831                 	// #2097
   4c564:	csel	w1, w0, w1, eq  // eq = none
   4c568:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c56c:	tbnz	w0, #22, 4cb74 <aarch64_opcode_lookup@@Base+0x36cc>
   4c570:	tst	x0, #0x800000
   4c574:	mov	w1, #0x643                 	// #1603
   4c578:	mov	w0, #0x647                 	// #1607
   4c57c:	csel	w1, w0, w1, eq  // eq = none
   4c580:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c584:	tbnz	w0, #13, 4d524 <aarch64_opcode_lookup@@Base+0x407c>
   4c588:	tbnz	w0, #14, 4e39c <aarch64_opcode_lookup@@Base+0x4ef4>
   4c58c:	ubfx	x0, x0, #30, #1
   4c590:	add	w1, w0, #0x2e
   4c594:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c598:	tbnz	w0, #11, 4cb30 <aarch64_opcode_lookup@@Base+0x3688>
   4c59c:	tst	x0, #0x1000
   4c5a0:	mov	w1, #0x857                 	// #2135
   4c5a4:	mov	w0, #0x8a9                 	// #2217
   4c5a8:	csel	w1, w0, w1, eq  // eq = none
   4c5ac:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c5b0:	tst	x0, #0x400000
   4c5b4:	mov	w1, #0x6fd                 	// #1789
   4c5b8:	mov	w0, #0x6bd                 	// #1725
   4c5bc:	csel	w1, w0, w1, eq  // eq = none
   4c5c0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c5c4:	tbnz	w0, #20, 4cb44 <aarch64_opcode_lookup@@Base+0x369c>
   4c5c8:	tbnz	w0, #22, 4e504 <aarch64_opcode_lookup@@Base+0x505c>
   4c5cc:	tst	x0, #0x800000
   4c5d0:	mov	w1, #0x5fa                 	// #1530
   4c5d4:	mov	w0, #0x5e5                 	// #1509
   4c5d8:	csel	w1, w0, w1, eq  // eq = none
   4c5dc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c5e0:	tst	x0, #0x800000
   4c5e4:	mov	w1, #0x781                 	// #1921
   4c5e8:	mov	w0, #0x77d                 	// #1917
   4c5ec:	csel	w1, w0, w1, eq  // eq = none
   4c5f0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c5f4:	tbnz	w0, #11, 4de94 <aarch64_opcode_lookup@@Base+0x49ec>
   4c5f8:	tst	x0, #0x1000
   4c5fc:	mov	w1, #0x89b                 	// #2203
   4c600:	mov	w0, #0x83f                 	// #2111
   4c604:	csel	w1, w0, w1, eq  // eq = none
   4c608:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c60c:	tbz	w0, #30, 4e6a8 <aarch64_opcode_lookup@@Base+0x5200>
   4c610:	ubfx	x0, x0, #22, #1
   4c614:	add	w1, w0, #0x8da
   4c618:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c61c:	tbnz	w0, #11, 4d850 <aarch64_opcode_lookup@@Base+0x43a8>
   4c620:	tst	x0, #0x1000
   4c624:	mov	w1, #0x7bb                 	// #1979
   4c628:	mov	w0, #0x797                 	// #1943
   4c62c:	csel	w1, w0, w1, eq  // eq = none
   4c630:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c634:	ubfx	x0, x0, #22, #1
   4c638:	add	w1, w0, #0x88d
   4c63c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c640:	tbnz	w0, #17, 4e768 <aarch64_opcode_lookup@@Base+0x52c0>
   4c644:	tbnz	w0, #18, 4ed38 <aarch64_opcode_lookup@@Base+0x5890>
   4c648:	tst	x0, #0x10
   4c64c:	cset	w0, eq  // eq = none
   4c650:	add	w1, w0, #0x573
   4c654:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c658:	mov	w1, #0x3c4                 	// #964
   4c65c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c660:	mov	w1, #0x3bc                 	// #956
   4c664:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c668:	tst	x0, #0x8000
   4c66c:	mov	w1, #0x96d                 	// #2413
   4c670:	mov	w0, #0x12c                 	// #300
   4c674:	csel	w1, w0, w1, eq  // eq = none
   4c678:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c67c:	tbnz	w0, #11, 4de9c <aarch64_opcode_lookup@@Base+0x49f4>
   4c680:	tst	x0, #0x1000
   4c684:	mov	w1, #0x85a                 	// #2138
   4c688:	mov	w0, #0x905                 	// #2309
   4c68c:	csel	w1, w0, w1, eq  // eq = none
   4c690:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c694:	mov	w1, #0x795                 	// #1941
   4c698:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c69c:	mov	w1, #0x3fa                 	// #1018
   4c6a0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c6a4:	tbz	w0, #22, 4e704 <aarch64_opcode_lookup@@Base+0x525c>
   4c6a8:	tst	x0, #0x800000
   4c6ac:	mov	w1, #0x13c                 	// #316
   4c6b0:	mov	w0, #0x130                 	// #304
   4c6b4:	csel	w1, w0, w1, eq  // eq = none
   4c6b8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c6bc:	tbnz	w0, #11, 4d768 <aarch64_opcode_lookup@@Base+0x42c0>
   4c6c0:	tst	x0, #0x1000
   4c6c4:	mov	w1, #0x8be                 	// #2238
   4c6c8:	mov	w0, #0x852                 	// #2130
   4c6cc:	csel	w1, w0, w1, eq  // eq = none
   4c6d0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c6d4:	tst	x0, #0x400
   4c6d8:	mov	w1, #0x5d2                 	// #1490
   4c6dc:	mov	w0, #0x5d5                 	// #1493
   4c6e0:	csel	w1, w0, w1, eq  // eq = none
   4c6e4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c6e8:	tbnz	w0, #30, 4d898 <aarch64_opcode_lookup@@Base+0x43f0>
   4c6ec:	tst	x0, #0x800
   4c6f0:	mov	w1, #0x6bf                 	// #1727
   4c6f4:	mov	w0, #0x6c5                 	// #1733
   4c6f8:	csel	w1, w0, w1, eq  // eq = none
   4c6fc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c700:	mov	w1, #0x3bd                 	// #957
   4c704:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c708:	tst	x0, #0x800
   4c70c:	mov	w1, #0x8bc                 	// #2236
   4c710:	mov	w0, #0x810                 	// #2064
   4c714:	csel	w1, w0, w1, eq  // eq = none
   4c718:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c71c:	tbz	w0, #11, 4e73c <aarch64_opcode_lookup@@Base+0x5294>
   4c720:	tbnz	w0, #22, 4e728 <aarch64_opcode_lookup@@Base+0x5280>
   4c724:	tst	x0, #0x800000
   4c728:	mov	w1, #0x806                 	// #2054
   4c72c:	mov	w0, #0x804                 	// #2052
   4c730:	csel	w1, w0, w1, eq  // eq = none
   4c734:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c738:	mov	w1, #0x3fc                 	// #1020
   4c73c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c740:	tbnz	w0, #11, 4e440 <aarch64_opcode_lookup@@Base+0x4f98>
   4c744:	tst	x0, #0x1000
   4c748:	mov	w1, #0x868                 	// #2152
   4c74c:	mov	w0, #0x862                 	// #2146
   4c750:	csel	w1, w0, w1, eq  // eq = none
   4c754:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c758:	mov	w1, #0x3b9                 	// #953
   4c75c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c760:	mov	w1, #0x6cb                 	// #1739
   4c764:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c768:	tst	x0, #0x8000
   4c76c:	mov	w1, #0x96f                 	// #2415
   4c770:	mov	w0, #0x97                  	// #151
   4c774:	csel	w1, w0, w1, eq  // eq = none
   4c778:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c77c:	tst	x0, #0x800000
   4c780:	mov	w1, #0x16b                 	// #363
   4c784:	mov	w0, #0x15d                 	// #349
   4c788:	csel	w1, w0, w1, eq  // eq = none
   4c78c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c790:	mov	w1, #0x5a6                 	// #1446
   4c794:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c798:	tbnz	w0, #16, 4d928 <aarch64_opcode_lookup@@Base+0x4480>
   4c79c:	tbz	w0, #19, 4ef34 <aarch64_opcode_lookup@@Base+0x5a8c>
   4c7a0:	tbnz	w0, #10, 4ef2c <aarch64_opcode_lookup@@Base+0x5a84>
   4c7a4:	tbnz	w0, #12, 4ef20 <aarch64_opcode_lookup@@Base+0x5a78>
   4c7a8:	tst	x0, #0x2000
   4c7ac:	mov	w1, #0x700                 	// #1792
   4c7b0:	mov	w0, #0x6e1                 	// #1761
   4c7b4:	csel	w1, w0, w1, eq  // eq = none
   4c7b8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c7bc:	tst	x0, #0x40000
   4c7c0:	mov	w1, #0x746                 	// #1862
   4c7c4:	mov	w0, #0x722                 	// #1826
   4c7c8:	csel	w1, w0, w1, eq  // eq = none
   4c7cc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c7d0:	tbnz	w0, #17, 4dd5c <aarch64_opcode_lookup@@Base+0x48b4>
   4c7d4:	tbnz	w0, #18, 4dd48 <aarch64_opcode_lookup@@Base+0x48a0>
   4c7d8:	tbz	w0, #19, 4e984 <aarch64_opcode_lookup@@Base+0x54dc>
   4c7dc:	tst	x0, #0x100000
   4c7e0:	mov	w1, #0x55b                 	// #1371
   4c7e4:	mov	w0, #0x7b5                 	// #1973
   4c7e8:	csel	w1, w0, w1, eq  // eq = none
   4c7ec:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c7f0:	mov	w1, #0x6cc                 	// #1740
   4c7f4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c7f8:	tbnz	w0, #11, 4e4e8 <aarch64_opcode_lookup@@Base+0x5040>
   4c7fc:	tst	x0, #0x1000
   4c800:	mov	w1, #0x8c7                 	// #2247
   4c804:	mov	w0, #0x801                 	// #2049
   4c808:	csel	w1, w0, w1, eq  // eq = none
   4c80c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c810:	tbnz	w0, #16, 4dfa8 <aarch64_opcode_lookup@@Base+0x4b00>
   4c814:	tbnz	w0, #17, 4df90 <aarch64_opcode_lookup@@Base+0x4ae8>
   4c818:	tbnz	w0, #18, 4ead0 <aarch64_opcode_lookup@@Base+0x5628>
   4c81c:	tst	x0, #0x100000
   4c820:	mov	w1, #0x566                 	// #1382
   4c824:	mov	w0, #0x560                 	// #1376
   4c828:	csel	w1, w0, w1, eq  // eq = none
   4c82c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c830:	mov	w1, #0x3b5                 	// #949
   4c834:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c838:	tbnz	w0, #17, 4e348 <aarch64_opcode_lookup@@Base+0x4ea0>
   4c83c:	tbnz	w0, #18, 4e334 <aarch64_opcode_lookup@@Base+0x4e8c>
   4c840:	tst	x0, #0x80000
   4c844:	mov	w1, #0x520                 	// #1312
   4c848:	mov	w0, #0x546                 	// #1350
   4c84c:	csel	w1, w0, w1, eq  // eq = none
   4c850:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c854:	tst	x0, #0x100000
   4c858:	mov	w1, #0x522                 	// #1314
   4c85c:	mov	w0, #0x5da                 	// #1498
   4c860:	csel	w1, w0, w1, eq  // eq = none
   4c864:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c868:	tbnz	w0, #11, 4e0f4 <aarch64_opcode_lookup@@Base+0x4c4c>
   4c86c:	tst	x0, #0x1000
   4c870:	mov	w1, #0x8af                 	// #2223
   4c874:	mov	w0, #0x8ad                 	// #2221
   4c878:	csel	w1, w0, w1, eq  // eq = none
   4c87c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c880:	tbnz	w0, #18, 4d7b4 <aarch64_opcode_lookup@@Base+0x430c>
   4c884:	tbnz	w0, #19, 4d79c <aarch64_opcode_lookup@@Base+0x42f4>
   4c888:	tbnz	w0, #20, 4f148 <aarch64_opcode_lookup@@Base+0x5ca0>
   4c88c:	tst	x0, #0x40000000
   4c890:	mov	w1, #0x8fd                 	// #2301
   4c894:	mov	w0, #0x6c2                 	// #1730
   4c898:	csel	w1, w0, w1, eq  // eq = none
   4c89c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c8a0:	tbnz	w0, #17, 4e608 <aarch64_opcode_lookup@@Base+0x5160>
   4c8a4:	tbnz	w0, #18, 4e5ec <aarch64_opcode_lookup@@Base+0x5144>
   4c8a8:	tbnz	w0, #19, 4ee54 <aarch64_opcode_lookup@@Base+0x59ac>
   4c8ac:	tst	x0, #0x100000
   4c8b0:	mov	w1, #0x7ab                 	// #1963
   4c8b4:	mov	w0, #0x5ba                 	// #1466
   4c8b8:	csel	w1, w0, w1, eq  // eq = none
   4c8bc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c8c0:	tst	x0, #0x800000
   4c8c4:	mov	w1, #0x787                 	// #1927
   4c8c8:	mov	w0, #0x78b                 	// #1931
   4c8cc:	csel	w1, w0, w1, eq  // eq = none
   4c8d0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c8d4:	tbnz	w0, #11, 4dff0 <aarch64_opcode_lookup@@Base+0x4b48>
   4c8d8:	tst	x0, #0x1000
   4c8dc:	mov	w1, #0x86f                 	// #2159
   4c8e0:	mov	w0, #0x88b                 	// #2187
   4c8e4:	csel	w1, w0, w1, eq  // eq = none
   4c8e8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c8ec:	tbnz	w0, #11, 4d5b4 <aarch64_opcode_lookup@@Base+0x410c>
   4c8f0:	tst	x0, #0x1000
   4c8f4:	mov	w1, #0x897                 	// #2199
   4c8f8:	mov	w0, #0x87a                 	// #2170
   4c8fc:	csel	w1, w0, w1, eq  // eq = none
   4c900:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c904:	tbnz	w0, #17, 4e2a4 <aarch64_opcode_lookup@@Base+0x4dfc>
   4c908:	tbnz	w0, #18, 4e290 <aarch64_opcode_lookup@@Base+0x4de8>
   4c90c:	tbnz	w0, #19, 4eb0c <aarch64_opcode_lookup@@Base+0x5664>
   4c910:	tst	x0, #0x100000
   4c914:	mov	w1, #0x802                 	// #2050
   4c918:	mov	w0, #0x900                 	// #2304
   4c91c:	csel	w1, w0, w1, eq  // eq = none
   4c920:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c924:	tbnz	w0, #18, 4d614 <aarch64_opcode_lookup@@Base+0x416c>
   4c928:	tbnz	w0, #19, 4d600 <aarch64_opcode_lookup@@Base+0x4158>
   4c92c:	tst	x0, #0x100000
   4c930:	mov	w1, #0x858                 	// #2136
   4c934:	mov	w0, #0x8b2                 	// #2226
   4c938:	csel	w1, w0, w1, eq  // eq = none
   4c93c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c940:	tst	x0, #0x800000
   4c944:	mov	w1, #0x13a                 	// #314
   4c948:	mov	w0, #0x12e                 	// #302
   4c94c:	csel	w1, w0, w1, eq  // eq = none
   4c950:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c954:	mov	w1, #0x3b8                 	// #952
   4c958:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c95c:	mov	w1, #0x3b4                 	// #948
   4c960:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c964:	tbnz	w0, #22, 4d058 <aarch64_opcode_lookup@@Base+0x3bb0>
   4c968:	tst	x0, #0x800000
   4c96c:	mov	w1, #0x778                 	// #1912
   4c970:	mov	w0, #0x77c                 	// #1916
   4c974:	csel	w1, w0, w1, eq  // eq = none
   4c978:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c97c:	mov	w1, #0x5b2                 	// #1458
   4c980:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c984:	tst	x0, #0x800000
   4c988:	mov	w1, #0x8c2                 	// #2242
   4c98c:	mov	w0, #0x8bf                 	// #2239
   4c990:	csel	w1, w0, w1, eq  // eq = none
   4c994:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c998:	tbnz	w0, #16, 4e744 <aarch64_opcode_lookup@@Base+0x529c>
   4c99c:	tst	x0, #0x100000
   4c9a0:	mov	w1, #0x507                 	// #1287
   4c9a4:	mov	w0, #0x724                 	// #1828
   4c9a8:	csel	w1, w0, w1, eq  // eq = none
   4c9ac:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c9b0:	tbnz	w0, #12, 4e714 <aarch64_opcode_lookup@@Base+0x526c>
   4c9b4:	ubfx	x0, x0, #10, #1
   4c9b8:	add	w1, w0, #0x8cc
   4c9bc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c9c0:	tst	x0, #0x4000
   4c9c4:	mov	w1, #0x10b                 	// #267
   4c9c8:	mov	w0, #0x108                 	// #264
   4c9cc:	csel	w1, w0, w1, eq  // eq = none
   4c9d0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c9d4:	tst	x0, #0x800000
   4c9d8:	mov	w1, #0x16f                 	// #367
   4c9dc:	mov	w0, #0x161                 	// #353
   4c9e0:	csel	w1, w0, w1, eq  // eq = none
   4c9e4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c9e8:	tbnz	w0, #10, 4e630 <aarch64_opcode_lookup@@Base+0x5188>
   4c9ec:	tbnz	w0, #11, 4e624 <aarch64_opcode_lookup@@Base+0x517c>
   4c9f0:	ubfx	x0, x0, #12, #1
   4c9f4:	add	w1, w0, #0x90c
   4c9f8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4c9fc:	mov	w1, #0x5b1                 	// #1457
   4ca00:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ca04:	tbnz	w0, #10, 4e27c <aarch64_opcode_lookup@@Base+0x4dd4>
   4ca08:	tbnz	w0, #11, 4e264 <aarch64_opcode_lookup@@Base+0x4dbc>
   4ca0c:	tbnz	w0, #17, 4ee44 <aarch64_opcode_lookup@@Base+0x599c>
   4ca10:	tst	x0, #0x40000
   4ca14:	mov	w1, #0x551                 	// #1361
   4ca18:	mov	w0, #0x7d3                 	// #2003
   4ca1c:	csel	w1, w0, w1, eq  // eq = none
   4ca20:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ca24:	mov	w1, #0x3f3                 	// #1011
   4ca28:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ca2c:	mov	w1, #0x3fb                 	// #1019
   4ca30:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ca34:	tbnz	w0, #18, 4d67c <aarch64_opcode_lookup@@Base+0x41d4>
   4ca38:	tst	x0, #0x80000
   4ca3c:	mov	w1, #0x7b7                 	// #1975
   4ca40:	mov	w0, #0x79a                 	// #1946
   4ca44:	csel	w1, w0, w1, eq  // eq = none
   4ca48:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ca4c:	tbnz	w0, #10, 4dc04 <aarch64_opcode_lookup@@Base+0x475c>
   4ca50:	tst	x0, #0x800
   4ca54:	mov	w1, #0x590                 	// #1424
   4ca58:	mov	w0, #0x5c8                 	// #1480
   4ca5c:	csel	w1, w0, w1, eq  // eq = none
   4ca60:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ca64:	mov	w1, #0x563                 	// #1379
   4ca68:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ca6c:	tbnz	w0, #12, 4d1b0 <aarch64_opcode_lookup@@Base+0x3d08>
   4ca70:	ubfx	x0, x0, #22, #1
   4ca74:	add	w1, w0, #0x878
   4ca78:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ca7c:	tst	x0, #0x10000
   4ca80:	mov	w1, #0x81c                 	// #2076
   4ca84:	mov	w0, #0x81a                 	// #2074
   4ca88:	csel	w1, w0, w1, eq  // eq = none
   4ca8c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ca90:	tst	x0, #0x800000
   4ca94:	mov	w1, #0x780                 	// #1920
   4ca98:	mov	w0, #0x784                 	// #1924
   4ca9c:	csel	w1, w0, w1, eq  // eq = none
   4caa0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4caa4:	tbnz	w0, #17, 4e568 <aarch64_opcode_lookup@@Base+0x50c0>
   4caa8:	tbnz	w0, #18, 4e554 <aarch64_opcode_lookup@@Base+0x50ac>
   4caac:	tst	x0, #0x80000
   4cab0:	mov	w1, #0x524                 	// #1316
   4cab4:	mov	w0, #0x7dd                 	// #2013
   4cab8:	csel	w1, w0, w1, eq  // eq = none
   4cabc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cac0:	mov	w1, #0x772                 	// #1906
   4cac4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cac8:	mov	w1, #0x22a                 	// #554
   4cacc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cad0:	mov	w1, #0x62f                 	// #1583
   4cad4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cad8:	tst	x0, #0x4000
   4cadc:	mov	w1, #0x11a                 	// #282
   4cae0:	mov	w0, #0x112                 	// #274
   4cae4:	csel	w1, w0, w1, eq  // eq = none
   4cae8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4caec:	tbz	w0, #18, 4e684 <aarch64_opcode_lookup@@Base+0x51dc>
   4caf0:	tbnz	w0, #15, 4ecf0 <aarch64_opcode_lookup@@Base+0x5848>
   4caf4:	tst	x0, #0x10000
   4caf8:	mov	w1, #0x343                 	// #835
   4cafc:	mov	w0, #0x341                 	// #833
   4cb00:	csel	w1, w0, w1, eq  // eq = none
   4cb04:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cb08:	tst	x0, #0x2000
   4cb0c:	mov	w1, #0x687                 	// #1671
   4cb10:	mov	w0, #0x623                 	// #1571
   4cb14:	csel	w1, w0, w1, eq  // eq = none
   4cb18:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cb1c:	tst	x0, #0x4000
   4cb20:	mov	w1, #0x14d                 	// #333
   4cb24:	mov	w0, #0x145                 	// #325
   4cb28:	csel	w1, w0, w1, eq  // eq = none
   4cb2c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cb30:	tst	x0, #0x1000
   4cb34:	mov	w1, #0x845                 	// #2117
   4cb38:	mov	w0, #0x8a1                 	// #2209
   4cb3c:	csel	w1, w0, w1, eq  // eq = none
   4cb40:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cb44:	tbnz	w0, #22, 4e524 <aarch64_opcode_lookup@@Base+0x507c>
   4cb48:	tst	x0, #0x800000
   4cb4c:	mov	w1, #0x6a9                 	// #1705
   4cb50:	mov	w0, #0x6a5                 	// #1701
   4cb54:	csel	w1, w0, w1, eq  // eq = none
   4cb58:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cb5c:	mov	w1, #0x6f                  	// #111
   4cb60:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cb64:	tbnz	w0, #14, 4e518 <aarch64_opcode_lookup@@Base+0x5070>
   4cb68:	ubfx	x0, x0, #30, #1
   4cb6c:	add	w1, w0, #0x30
   4cb70:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cb74:	tst	x0, #0x800000
   4cb78:	mov	w1, #0x653                 	// #1619
   4cb7c:	mov	w0, #0x657                 	// #1623
   4cb80:	csel	w1, w0, w1, eq  // eq = none
   4cb84:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cb88:	mov	w1, #0x6a                  	// #106
   4cb8c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cb90:	mov	w1, #0x36e                 	// #878
   4cb94:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cb98:	tbz	w0, #11, 4edbc <aarch64_opcode_lookup@@Base+0x5914>
   4cb9c:	tst	x0, #0x1000
   4cba0:	mov	w1, #0x96c                 	// #2412
   4cba4:	mov	w0, #0x96a                 	// #2410
   4cba8:	csel	w1, w0, w1, eq  // eq = none
   4cbac:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cbb0:	tst	x0, #0x40000000
   4cbb4:	mov	w1, #0x62c                 	// #1580
   4cbb8:	mov	w0, #0x629                 	// #1577
   4cbbc:	csel	w1, w0, w1, eq  // eq = none
   4cbc0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cbc4:	mov	w1, #0x5aa                 	// #1450
   4cbc8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cbcc:	tst	x0, #0x800000
   4cbd0:	mov	w1, #0x782                 	// #1922
   4cbd4:	mov	w0, #0x77e                 	// #1918
   4cbd8:	csel	w1, w0, w1, eq  // eq = none
   4cbdc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cbe0:	tst	x0, #0x1000
   4cbe4:	mov	w1, #0x8f1                 	// #2289
   4cbe8:	mov	w0, #0x89f                 	// #2207
   4cbec:	csel	w1, w0, w1, eq  // eq = none
   4cbf0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cbf4:	mov	w1, #0x97e                 	// #2430
   4cbf8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cbfc:	mov	w1, #0x693                 	// #1683
   4cc00:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cc04:	tst	x0, #0x2000
   4cc08:	mov	w1, #0x67b                 	// #1659
   4cc0c:	mov	w0, #0x617                 	// #1559
   4cc10:	csel	w1, w0, w1, eq  // eq = none
   4cc14:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cc18:	mov	w1, #0x76e                 	// #1902
   4cc1c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cc20:	tst	x0, #0x800000
   4cc24:	mov	w1, #0x68f                 	// #1679
   4cc28:	mov	w0, #0x683                 	// #1667
   4cc2c:	csel	w1, w0, w1, eq  // eq = none
   4cc30:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cc34:	tbnz	w0, #15, 4e788 <aarch64_opcode_lookup@@Base+0x52e0>
   4cc38:	tbnz	w0, #22, 4e6e0 <aarch64_opcode_lookup@@Base+0x5238>
   4cc3c:	tbnz	w0, #23, 4ebe0 <aarch64_opcode_lookup@@Base+0x5738>
   4cc40:	tbnz	w0, #31, 4ebd8 <aarch64_opcode_lookup@@Base+0x5730>
   4cc44:	ubfx	x0, x0, #30, #1
   4cc48:	add	w1, w0, #0x43d
   4cc4c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cc50:	mov	w1, #0x36d                 	// #877
   4cc54:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cc58:	mov	w1, #0x770                 	// #1904
   4cc5c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cc60:	tbnz	w0, #23, 4ddc0 <aarch64_opcode_lookup@@Base+0x4918>
   4cc64:	tbz	w0, #29, 4ea5c <aarch64_opcode_lookup@@Base+0x55b4>
   4cc68:	tst	x0, #0x40000000
   4cc6c:	mov	w1, #0x93c                 	// #2364
   4cc70:	mov	w0, #0x938                 	// #2360
   4cc74:	csel	w1, w0, w1, eq  // eq = none
   4cc78:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cc7c:	mov	w1, #0x2a9                 	// #681
   4cc80:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cc84:	mov	w1, #0x694                 	// #1684
   4cc88:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cc8c:	tst	x0, #0x800000
   4cc90:	mov	w1, #0x669                 	// #1641
   4cc94:	mov	w0, #0x6a0                 	// #1696
   4cc98:	csel	w1, w0, w1, eq  // eq = none
   4cc9c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cca0:	tbnz	w0, #14, 4dbc0 <aarch64_opcode_lookup@@Base+0x4718>
   4cca4:	tbz	w0, #16, 4eef8 <aarch64_opcode_lookup@@Base+0x5a50>
   4cca8:	ubfx	x0, x0, #30, #1
   4ccac:	add	w1, w0, #0xde
   4ccb0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ccb4:	tbnz	w0, #23, 4dbfc <aarch64_opcode_lookup@@Base+0x4754>
   4ccb8:	tst	x0, #0x20000000
   4ccbc:	mov	w1, #0x15c                 	// #348
   4ccc0:	mov	w0, #0x12b                 	// #299
   4ccc4:	csel	w1, w0, w1, eq  // eq = none
   4ccc8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cccc:	tbnz	w0, #14, 4e818 <aarch64_opcode_lookup@@Base+0x5370>
   4ccd0:	ubfx	x0, x0, #30, #1
   4ccd4:	add	w1, w0, #0x50
   4ccd8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ccdc:	ubfx	x0, x0, #13, #1
   4cce0:	add	w1, w0, #0x7a4
   4cce4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cce8:	tst	x0, #0x800000
   4ccec:	mov	w1, #0x64a                 	// #1610
   4ccf0:	mov	w0, #0x64e                 	// #1614
   4ccf4:	csel	w1, w0, w1, eq  // eq = none
   4ccf8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ccfc:	tst	x0, #0x4000
   4cd00:	mov	w1, #0x14e                 	// #334
   4cd04:	mov	w0, #0x146                 	// #326
   4cd08:	csel	w1, w0, w1, eq  // eq = none
   4cd0c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cd10:	tbz	w0, #22, 4ef08 <aarch64_opcode_lookup@@Base+0x5a60>
   4cd14:	tst	x0, #0x800000
   4cd18:	mov	w1, #0x7bf                 	// #1983
   4cd1c:	mov	w0, #0x7c2                 	// #1986
   4cd20:	csel	w1, w0, w1, eq  // eq = none
   4cd24:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cd28:	tst	x0, #0x40000000
   4cd2c:	mov	w1, #0x2bd                 	// #701
   4cd30:	mov	w0, #0x2c9                 	// #713
   4cd34:	csel	w1, w0, w1, eq  // eq = none
   4cd38:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cd3c:	tbnz	w0, #12, 4ecf8 <aarch64_opcode_lookup@@Base+0x5850>
   4cd40:	tst	x0, #0x20000
   4cd44:	mov	w1, #0x917                 	// #2327
   4cd48:	mov	w0, #0x919                 	// #2329
   4cd4c:	csel	w1, w0, w1, eq  // eq = none
   4cd50:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cd54:	tst	x0, #0x2000
   4cd58:	mov	w1, #0x67f                 	// #1663
   4cd5c:	mov	w0, #0x619                 	// #1561
   4cd60:	csel	w1, w0, w1, eq  // eq = none
   4cd64:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cd68:	tbnz	w0, #23, 4de38 <aarch64_opcode_lookup@@Base+0x4990>
   4cd6c:	tbnz	w0, #29, 4e9cc <aarch64_opcode_lookup@@Base+0x5524>
   4cd70:	tst	x0, #0x40000000
   4cd74:	mov	w1, #0x93a                 	// #2362
   4cd78:	mov	w0, #0x936                 	// #2358
   4cd7c:	csel	w1, w0, w1, eq  // eq = none
   4cd80:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cd84:	tst	x0, #0x800000
   4cd88:	mov	w1, #0x64b                 	// #1611
   4cd8c:	mov	w0, #0x64f                 	// #1615
   4cd90:	csel	w1, w0, w1, eq  // eq = none
   4cd94:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cd98:	mov	w1, #0x973                 	// #2419
   4cd9c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cda0:	tst	x0, #0x1000
   4cda4:	mov	w1, #0x8ea                 	// #2282
   4cda8:	mov	w0, #0x86d                 	// #2157
   4cdac:	csel	w1, w0, w1, eq  // eq = none
   4cdb0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cdb4:	tbnz	w0, #16, 4ded8 <aarch64_opcode_lookup@@Base+0x4a30>
   4cdb8:	tbnz	w0, #19, 4dec4 <aarch64_opcode_lookup@@Base+0x4a1c>
   4cdbc:	tbnz	w0, #20, 4e9dc <aarch64_opcode_lookup@@Base+0x5534>
   4cdc0:	tst	x0, #0x20000000
   4cdc4:	mov	w1, #0x20d                 	// #525
   4cdc8:	mov	w0, #0x1ef                 	// #495
   4cdcc:	csel	w1, w0, w1, eq  // eq = none
   4cdd0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cdd4:	tbnz	w0, #11, 4e830 <aarch64_opcode_lookup@@Base+0x5388>
   4cdd8:	tbnz	w0, #12, 4e800 <aarch64_opcode_lookup@@Base+0x5358>
   4cddc:	ubfx	x0, x0, #22, #1
   4cde0:	add	w1, w0, #0x7b2
   4cde4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cde8:	tbnz	w0, #14, 4dda8 <aarch64_opcode_lookup@@Base+0x4900>
   4cdec:	tbz	w0, #16, 4ea08 <aarch64_opcode_lookup@@Base+0x5560>
   4cdf0:	ubfx	x0, x0, #30, #1
   4cdf4:	add	w1, w0, #0xae
   4cdf8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cdfc:	tst	x0, #0x800000
   4ce00:	mov	w1, #0x5ee                 	// #1518
   4ce04:	mov	w0, #0x63e                 	// #1598
   4ce08:	csel	w1, w0, w1, eq  // eq = none
   4ce0c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ce10:	ubfx	x0, x0, #19, #1
   4ce14:	add	w1, w0, #0x1f3
   4ce18:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ce1c:	tst	x0, #0x800
   4ce20:	mov	w1, #0x836                 	// #2102
   4ce24:	mov	w0, #0x894                 	// #2196
   4ce28:	csel	w1, w0, w1, eq  // eq = none
   4ce2c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ce30:	tbnz	w0, #22, 4deb0 <aarch64_opcode_lookup@@Base+0x4a08>
   4ce34:	tst	x0, #0x40000000
   4ce38:	mov	w1, #0x4a                  	// #74
   4ce3c:	mov	w0, #0x48                  	// #72
   4ce40:	csel	w1, w0, w1, eq  // eq = none
   4ce44:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ce48:	tbnz	w0, #14, 4e7bc <aarch64_opcode_lookup@@Base+0x5314>
   4ce4c:	tst	x0, #0x100000
   4ce50:	mov	w1, #0x1d                  	// #29
   4ce54:	mov	w0, #0xa5                  	// #165
   4ce58:	csel	w1, w0, w1, eq  // eq = none
   4ce5c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ce60:	tst	x0, #0x2000
   4ce64:	mov	w1, #0x69a                 	// #1690
   4ce68:	mov	w0, #0x636                 	// #1590
   4ce6c:	csel	w1, w0, w1, eq  // eq = none
   4ce70:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ce74:	tbnz	w0, #23, 4db10 <aarch64_opcode_lookup@@Base+0x4668>
   4ce78:	tbnz	w0, #29, 4e910 <aarch64_opcode_lookup@@Base+0x5468>
   4ce7c:	cmp	w0, #0x0
   4ce80:	mov	w1, #0x933                 	// #2355
   4ce84:	mov	w0, #0x123                 	// #291
   4ce88:	csel	w1, w0, w1, ge  // ge = tcont
   4ce8c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ce90:	tbnz	w0, #31, 4e858 <aarch64_opcode_lookup@@Base+0x53b0>
   4ce94:	tst	x0, #0x400
   4ce98:	cset	w0, eq  // eq = none
   4ce9c:	add	w1, w0, #0x97a
   4cea0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cea4:	tbnz	w0, #23, 4d9c4 <aarch64_opcode_lookup@@Base+0x451c>
   4cea8:	tst	x0, #0x20000000
   4ceac:	mov	w1, #0x158                 	// #344
   4ceb0:	mov	w0, #0x127                 	// #295
   4ceb4:	csel	w1, w0, w1, eq  // eq = none
   4ceb8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cebc:	tbnz	w0, #22, 4e7a0 <aarch64_opcode_lookup@@Base+0x52f8>
   4cec0:	tbnz	w0, #23, 4e6c8 <aarch64_opcode_lookup@@Base+0x5220>
   4cec4:	tbnz	w0, #31, 4ec98 <aarch64_opcode_lookup@@Base+0x57f0>
   4cec8:	ubfx	x0, x0, #30, #1
   4cecc:	add	w1, w0, #0x449
   4ced0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ced4:	tst	x0, #0x800000
   4ced8:	mov	w1, #0x678                 	// #1656
   4cedc:	mov	w0, #0x663                 	// #1635
   4cee0:	csel	w1, w0, w1, eq  // eq = none
   4cee4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cee8:	tbnz	w0, #14, 4d63c <aarch64_opcode_lookup@@Base+0x4194>
   4ceec:	tbnz	w0, #16, 4d630 <aarch64_opcode_lookup@@Base+0x4188>
   4cef0:	tst	x0, #0x100000
   4cef4:	mov	w1, #0x21                  	// #33
   4cef8:	mov	w0, #0xd7                  	// #215
   4cefc:	csel	w1, w0, w1, eq  // eq = none
   4cf00:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cf04:	tbz	w0, #12, 4ee08 <aarch64_opcode_lookup@@Base+0x5960>
   4cf08:	tbnz	w0, #16, 4e42c <aarch64_opcode_lookup@@Base+0x4f84>
   4cf0c:	tbnz	w0, #17, 4ee1c <aarch64_opcode_lookup@@Base+0x5974>
   4cf10:	tbnz	w0, #18, 4ee10 <aarch64_opcode_lookup@@Base+0x5968>
   4cf14:	tbnz	w0, #19, 4eb1c <aarch64_opcode_lookup@@Base+0x5674>
   4cf18:	tst	x0, #0x100000
   4cf1c:	mov	w1, #0x79d                 	// #1949
   4cf20:	mov	w0, #0x555                 	// #1365
   4cf24:	csel	w1, w0, w1, eq  // eq = none
   4cf28:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cf2c:	tst	x0, #0x800000
   4cf30:	mov	w1, #0x672                 	// #1650
   4cf34:	mov	w0, #0x65f                 	// #1631
   4cf38:	csel	w1, w0, w1, eq  // eq = none
   4cf3c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cf40:	mov	w1, #0x77                  	// #119
   4cf44:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cf48:	tst	x0, #0x1000
   4cf4c:	mov	w1, #0x8e4                 	// #2276
   4cf50:	mov	w0, #0x867                 	// #2151
   4cf54:	csel	w1, w0, w1, eq  // eq = none
   4cf58:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cf5c:	tbnz	w0, #22, 4daf4 <aarch64_opcode_lookup@@Base+0x464c>
   4cf60:	tbnz	w0, #23, 4d910 <aarch64_opcode_lookup@@Base+0x4468>
   4cf64:	tbnz	w0, #31, 4f00c <aarch64_opcode_lookup@@Base+0x5b64>
   4cf68:	ubfx	x0, x0, #30, #1
   4cf6c:	add	w1, w0, #0x455
   4cf70:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cf74:	ubfx	x0, x0, #30, #1
   4cf78:	add	w1, w0, #0x46
   4cf7c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cf80:	tbnz	w0, #22, 4e1f0 <aarch64_opcode_lookup@@Base+0x4d48>
   4cf84:	tst	x0, #0x800000
   4cf88:	mov	w1, #0x6b1                 	// #1713
   4cf8c:	mov	w0, #0x6a4                 	// #1700
   4cf90:	csel	w1, w0, w1, eq  // eq = none
   4cf94:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cf98:	mov	w1, #0x5eb                 	// #1515
   4cf9c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cfa0:	ubfx	x0, x0, #13, #1
   4cfa4:	add	w1, w0, #0x7a2
   4cfa8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cfac:	tbz	w0, #31, 4e490 <aarch64_opcode_lookup@@Base+0x4fe8>
   4cfb0:	tst	x0, #0x100000
   4cfb4:	mov	w1, #0x78a                 	// #1930
   4cfb8:	mov	w0, #0x768                 	// #1896
   4cfbc:	csel	w1, w0, w1, eq  // eq = none
   4cfc0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cfc4:	tbnz	w0, #19, 4d548 <aarch64_opcode_lookup@@Base+0x40a0>
   4cfc8:	tbnz	w0, #23, 4f034 <aarch64_opcode_lookup@@Base+0x5b8c>
   4cfcc:	tst	x0, #0x20000000
   4cfd0:	mov	w1, #0x20b                 	// #523
   4cfd4:	mov	w0, #0x1ed                 	// #493
   4cfd8:	csel	w1, w0, w1, eq  // eq = none
   4cfdc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cfe0:	mov	w1, #0x395                 	// #917
   4cfe4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cfe8:	tst	x0, #0x1000
   4cfec:	mov	w1, #0x906                 	// #2310
   4cff0:	mov	w0, #0x8d1                 	// #2257
   4cff4:	csel	w1, w0, w1, eq  // eq = none
   4cff8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4cffc:	mov	w1, #0x773                 	// #1907
   4d000:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d004:	tbnz	w0, #20, 4da24 <aarch64_opcode_lookup@@Base+0x457c>
   4d008:	tbnz	w0, #22, 4d834 <aarch64_opcode_lookup@@Base+0x438c>
   4d00c:	tst	x0, #0x800000
   4d010:	mov	w1, #0x7c9                 	// #1993
   4d014:	mov	w0, #0x7bd                 	// #1981
   4d018:	csel	w1, w0, w1, eq  // eq = none
   4d01c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d020:	tbz	w0, #16, 4e424 <aarch64_opcode_lookup@@Base+0x4f7c>
   4d024:	tbnz	w0, #19, 4e3ec <aarch64_opcode_lookup@@Base+0x4f44>
   4d028:	tbnz	w0, #23, 4ec4c <aarch64_opcode_lookup@@Base+0x57a4>
   4d02c:	tst	x0, #0x20000000
   4d030:	mov	w1, #0x205                 	// #517
   4d034:	mov	w0, #0x1e7                 	// #487
   4d038:	csel	w1, w0, w1, eq  // eq = none
   4d03c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d040:	tbnz	w0, #16, 4da70 <aarch64_opcode_lookup@@Base+0x45c8>
   4d044:	tbnz	w0, #23, 4da14 <aarch64_opcode_lookup@@Base+0x456c>
   4d048:	tst	x0, #0x20000000
   4d04c:	cset	w0, eq  // eq = none
   4d050:	add	w1, w0, #0x21e
   4d054:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d058:	tst	x0, #0x800000
   4d05c:	mov	w1, #0x788                 	// #1928
   4d060:	mov	w0, #0x78c                 	// #1932
   4d064:	csel	w1, w0, w1, eq  // eq = none
   4d068:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d06c:	mov	w1, #0x6ef                 	// #1775
   4d070:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d074:	tst	x0, #0x800000
   4d078:	mov	w1, #0x64c                 	// #1612
   4d07c:	mov	w0, #0x648                 	// #1608
   4d080:	csel	w1, w0, w1, eq  // eq = none
   4d084:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d088:	tst	x0, #0x800000
   4d08c:	mov	w1, #0x655                 	// #1621
   4d090:	mov	w0, #0x651                 	// #1617
   4d094:	csel	w1, w0, w1, eq  // eq = none
   4d098:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d09c:	tbnz	w0, #31, 4e9c4 <aarch64_opcode_lookup@@Base+0x551c>
   4d0a0:	tbnz	w0, #16, 4e9bc <aarch64_opcode_lookup@@Base+0x5514>
   4d0a4:	tst	x0, #0x20000
   4d0a8:	mov	w1, #0x977                 	// #2423
   4d0ac:	mov	w0, #0x815                 	// #2069
   4d0b0:	csel	w1, w0, w1, eq  // eq = none
   4d0b4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d0b8:	mov	w1, #0x696                 	// #1686
   4d0bc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d0c0:	mov	w1, #0x6ec                 	// #1772
   4d0c4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d0c8:	tbnz	w0, #23, 4d8d4 <aarch64_opcode_lookup@@Base+0x442c>
   4d0cc:	tst	x0, #0x20000000
   4d0d0:	mov	w1, #0x160                 	// #352
   4d0d4:	mov	w0, #0x12d                 	// #301
   4d0d8:	csel	w1, w0, w1, eq  // eq = none
   4d0dc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d0e0:	tst	x0, #0x4000
   4d0e4:	mov	w1, #0x119                 	// #281
   4d0e8:	mov	w0, #0x111                 	// #273
   4d0ec:	csel	w1, w0, w1, eq  // eq = none
   4d0f0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d0f4:	tbnz	w0, #31, 4e890 <aarch64_opcode_lookup@@Base+0x53e8>
   4d0f8:	tbnz	w0, #10, 4e124 <aarch64_opcode_lookup@@Base+0x4c7c>
   4d0fc:	tbz	w0, #12, 4e8ec <aarch64_opcode_lookup@@Base+0x5444>
   4d100:	tst	x0, #0x800
   4d104:	mov	w1, #0x83b                 	// #2107
   4d108:	mov	w0, #0x884                 	// #2180
   4d10c:	csel	w1, w0, w1, eq  // eq = none
   4d110:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d114:	tst	x0, #0x800000
   4d118:	mov	w1, #0x670                 	// #1648
   4d11c:	mov	w0, #0x65d                 	// #1629
   4d120:	csel	w1, w0, w1, eq  // eq = none
   4d124:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d128:	mov	w1, #0x2c8                 	// #712
   4d12c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d130:	mov	w1, #0x2da                 	// #730
   4d134:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d138:	mov	w1, #0x7a                  	// #122
   4d13c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d140:	tst	x0, #0x800000
   4d144:	mov	w1, #0x61f                 	// #1567
   4d148:	mov	w0, #0x63d                 	// #1597
   4d14c:	csel	w1, w0, w1, eq  // eq = none
   4d150:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d154:	tbz	w0, #31, 4d66c <aarch64_opcode_lookup@@Base+0x41c4>
   4d158:	tst	x0, #0x100000
   4d15c:	mov	w1, #0x77a                 	// #1914
   4d160:	mov	w0, #0x764                 	// #1892
   4d164:	csel	w1, w0, w1, eq  // eq = none
   4d168:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d16c:	mov	w1, #0x62e                 	// #1582
   4d170:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d174:	tst	x0, #0x800000
   4d178:	mov	w1, #0x64d                 	// #1613
   4d17c:	mov	w0, #0x649                 	// #1609
   4d180:	csel	w1, w0, w1, eq  // eq = none
   4d184:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d188:	ubfx	x0, x0, #22, #1
   4d18c:	add	w1, w0, #0x87b
   4d190:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d194:	mov	w1, #0x6f3                 	// #1779
   4d198:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d19c:	tst	x0, #0x4000
   4d1a0:	mov	w1, #0x118                 	// #280
   4d1a4:	mov	w0, #0x110                 	// #272
   4d1a8:	csel	w1, w0, w1, eq  // eq = none
   4d1ac:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d1b0:	ubfx	x0, x0, #22, #1
   4d1b4:	add	w1, w0, #0x87f
   4d1b8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d1bc:	tbnz	w0, #23, 4d70c <aarch64_opcode_lookup@@Base+0x4264>
   4d1c0:	tbnz	w0, #29, 4d6ec <aarch64_opcode_lookup@@Base+0x4244>
   4d1c4:	tbnz	w0, #31, 4f0d4 <aarch64_opcode_lookup@@Base+0x5c2c>
   4d1c8:	tbz	w0, #16, 4f0cc <aarch64_opcode_lookup@@Base+0x5c24>
   4d1cc:	ubfx	x0, x0, #19, #1
   4d1d0:	add	w1, w0, #0xbe
   4d1d4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d1d8:	tst	x0, #0x20000000
   4d1dc:	mov	w1, #0x200                 	// #512
   4d1e0:	mov	w0, #0x1e3                 	// #483
   4d1e4:	csel	w1, w0, w1, eq  // eq = none
   4d1e8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d1ec:	tst	x0, #0x4000
   4d1f0:	mov	w1, #0x14c                 	// #332
   4d1f4:	mov	w0, #0x144                 	// #324
   4d1f8:	csel	w1, w0, w1, eq  // eq = none
   4d1fc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d200:	tst	x0, #0x800000
   4d204:	mov	w1, #0x5f3                 	// #1523
   4d208:	mov	w0, #0x5df                 	// #1503
   4d20c:	csel	w1, w0, w1, eq  // eq = none
   4d210:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d214:	tbnz	w0, #14, 4dae8 <aarch64_opcode_lookup@@Base+0x4640>
   4d218:	ubfx	x0, x0, #30, #1
   4d21c:	add	w1, w0, #0x52
   4d220:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d224:	mov	w1, #0x2dc                 	// #732
   4d228:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d22c:	tbz	w0, #23, 4d940 <aarch64_opcode_lookup@@Base+0x4498>
   4d230:	ubfx	x0, x0, #22, #1
   4d234:	add	w1, w0, #0x5a4
   4d238:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d23c:	tst	x0, #0x800000
   4d240:	mov	w1, #0x6ae                 	// #1710
   4d244:	mov	w0, #0x6b2                 	// #1714
   4d248:	csel	w1, w0, w1, eq  // eq = none
   4d24c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d250:	tst	x0, #0x40000000
   4d254:	mov	w1, #0x2c1                 	// #705
   4d258:	mov	w0, #0x2d6                 	// #726
   4d25c:	csel	w1, w0, w1, eq  // eq = none
   4d260:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d264:	tbnz	w0, #16, 4daa8 <aarch64_opcode_lookup@@Base+0x4600>
   4d268:	ubfx	x0, x0, #19, #1
   4d26c:	add	w1, w0, #0xc6
   4d270:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d274:	tst	x0, #0x800000
   4d278:	mov	w1, #0x77f                 	// #1919
   4d27c:	mov	w0, #0x783                 	// #1923
   4d280:	csel	w1, w0, w1, eq  // eq = none
   4d284:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d288:	tbnz	w0, #29, 4dad0 <aarch64_opcode_lookup@@Base+0x4628>
   4d28c:	tbz	w0, #30, 4efe8 <aarch64_opcode_lookup@@Base+0x5b40>
   4d290:	cmp	w0, #0x0
   4d294:	mov	w1, #0x932                 	// #2354
   4d298:	mov	w0, #0x45                  	// #69
   4d29c:	csel	w1, w0, w1, ge  // ge = tcont
   4d2a0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d2a4:	mov	w1, #0x2c2                 	// #706
   4d2a8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d2ac:	tbnz	w0, #16, 4df28 <aarch64_opcode_lookup@@Base+0x4a80>
   4d2b0:	tbnz	w0, #19, 4df14 <aarch64_opcode_lookup@@Base+0x4a6c>
   4d2b4:	tbnz	w0, #20, 4eb24 <aarch64_opcode_lookup@@Base+0x567c>
   4d2b8:	tst	x0, #0x20000000
   4d2bc:	mov	w1, #0xf9                  	// #249
   4d2c0:	mov	w0, #0xc8                  	// #200
   4d2c4:	csel	w1, w0, w1, eq  // eq = none
   4d2c8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d2cc:	tst	x0, #0x800000
   4d2d0:	mov	w1, #0x5f4                 	// #1524
   4d2d4:	mov	w0, #0x5e0                 	// #1504
   4d2d8:	csel	w1, w0, w1, eq  // eq = none
   4d2dc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d2e0:	tst	x0, #0x400000
   4d2e4:	mov	w1, #0x6ed                 	// #1773
   4d2e8:	mov	w0, #0x664                 	// #1636
   4d2ec:	csel	w1, w0, w1, eq  // eq = none
   4d2f0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d2f4:	tbnz	w0, #20, 4e2c0 <aarch64_opcode_lookup@@Base+0x4e18>
   4d2f8:	tbnz	w0, #22, 4e2ac <aarch64_opcode_lookup@@Base+0x4e04>
   4d2fc:	tst	x0, #0x800000
   4d300:	mov	w1, #0x736                 	// #1846
   4d304:	mov	w0, #0x72a                 	// #1834
   4d308:	csel	w1, w0, w1, eq  // eq = none
   4d30c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d310:	tst	x0, #0x4000
   4d314:	mov	w1, #0x117                 	// #279
   4d318:	mov	w0, #0x10f                 	// #271
   4d31c:	csel	w1, w0, w1, eq  // eq = none
   4d320:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d324:	mov	w1, #0x2f1                 	// #753
   4d328:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d32c:	mov	w1, #0x6fa                 	// #1786
   4d330:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d334:	tst	x0, #0x1000
   4d338:	mov	w1, #0x8e3                 	// #2275
   4d33c:	mov	w0, #0x866                 	// #2150
   4d340:	csel	w1, w0, w1, eq  // eq = none
   4d344:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d348:	mov	w1, #0x82                  	// #130
   4d34c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d350:	tst	x0, #0x4000
   4d354:	mov	w1, #0x14b                 	// #331
   4d358:	mov	w0, #0x143                 	// #323
   4d35c:	csel	w1, w0, w1, eq  // eq = none
   4d360:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d364:	tst	x0, #0x1000
   4d368:	mov	w1, #0x8f0                 	// #2288
   4d36c:	mov	w0, #0x89e                 	// #2206
   4d370:	csel	w1, w0, w1, eq  // eq = none
   4d374:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d378:	tbnz	w0, #29, 4e018 <aarch64_opcode_lookup@@Base+0x4b70>
   4d37c:	tst	x0, #0x40000000
   4d380:	mov	w1, #0x1e2                 	// #482
   4d384:	mov	w0, #0x357                 	// #855
   4d388:	csel	w1, w0, w1, eq  // eq = none
   4d38c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d390:	mov	w1, #0x225                 	// #549
   4d394:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d398:	tbnz	w0, #22, 4db44 <aarch64_opcode_lookup@@Base+0x469c>
   4d39c:	tbnz	w0, #23, 4db2c <aarch64_opcode_lookup@@Base+0x4684>
   4d3a0:	tbnz	w0, #31, 4e918 <aarch64_opcode_lookup@@Base+0x5470>
   4d3a4:	ubfx	x0, x0, #30, #1
   4d3a8:	add	w1, w0, #0x461
   4d3ac:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d3b0:	tst	x0, #0x20000000
   4d3b4:	mov	w1, #0x15a                 	// #346
   4d3b8:	mov	w0, #0x129                 	// #297
   4d3bc:	csel	w1, w0, w1, eq  // eq = none
   4d3c0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d3c4:	mov	w1, #0x75e                 	// #1886
   4d3c8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d3cc:	mov	w1, #0x695                 	// #1685
   4d3d0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d3d4:	tst	x0, #0x1000
   4d3d8:	mov	w1, #0x920                 	// #2336
   4d3dc:	mov	w0, #0x902                 	// #2306
   4d3e0:	csel	w1, w0, w1, eq  // eq = none
   4d3e4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d3e8:	tst	x0, #0x1000
   4d3ec:	mov	w1, #0x907                 	// #2311
   4d3f0:	mov	w0, #0x8d2                 	// #2258
   4d3f4:	csel	w1, w0, w1, eq  // eq = none
   4d3f8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d3fc:	tbnz	w0, #17, 4defc <aarch64_opcode_lookup@@Base+0x4a54>
   4d400:	tbnz	w0, #18, 4eaa8 <aarch64_opcode_lookup@@Base+0x5600>
   4d404:	tbnz	w0, #19, 4e970 <aarch64_opcode_lookup@@Base+0x54c8>
   4d408:	tst	x0, #0x100000
   4d40c:	mov	w1, #0x315                 	// #789
   4d410:	mov	w0, #0x301                 	// #769
   4d414:	csel	w1, w0, w1, eq  // eq = none
   4d418:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d41c:	tbz	w0, #22, 4eac8 <aarch64_opcode_lookup@@Base+0x5620>
   4d420:	tst	x0, #0x800000
   4d424:	mov	w1, #0x72b                 	// #1835
   4d428:	mov	w0, #0x72e                 	// #1838
   4d42c:	csel	w1, w0, w1, eq  // eq = none
   4d430:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d434:	mov	w1, #0x796                 	// #1942
   4d438:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d43c:	tst	x0, #0x40000000
   4d440:	mov	w1, #0x2bf                 	// #703
   4d444:	mov	w0, #0x2cd                 	// #717
   4d448:	csel	w1, w0, w1, eq  // eq = none
   4d44c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d450:	tst	x0, #0x40000000
   4d454:	mov	w1, #0x2c6                 	// #710
   4d458:	mov	w0, #0x2d8                 	// #728
   4d45c:	csel	w1, w0, w1, eq  // eq = none
   4d460:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d464:	tst	x0, #0x800
   4d468:	mov	w1, #0x87e                 	// #2174
   4d46c:	mov	w0, #0x7b1                 	// #1969
   4d470:	csel	w1, w0, w1, eq  // eq = none
   4d474:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d478:	tst	x0, #0x800000
   4d47c:	mov	w1, #0x654                 	// #1620
   4d480:	mov	w0, #0x650                 	// #1616
   4d484:	csel	w1, w0, w1, eq  // eq = none
   4d488:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d48c:	tbnz	w0, #16, 4e3a8 <aarch64_opcode_lookup@@Base+0x4f00>
   4d490:	tst	x0, #0x20000000
   4d494:	mov	w1, #0x201                 	// #513
   4d498:	mov	w0, #0x1e5                 	// #485
   4d49c:	csel	w1, w0, w1, eq  // eq = none
   4d4a0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d4a4:	tst	x0, #0x1000
   4d4a8:	mov	w1, #0x844                 	// #2116
   4d4ac:	mov	w0, #0x8a0                 	// #2208
   4d4b0:	csel	w1, w0, w1, eq  // eq = none
   4d4b4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d4b8:	tst	x0, #0x800000
   4d4bc:	mov	w1, #0x5f9                 	// #1529
   4d4c0:	mov	w0, #0x5e3                 	// #1507
   4d4c4:	csel	w1, w0, w1, eq  // eq = none
   4d4c8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d4cc:	tbnz	w0, #16, 4e044 <aarch64_opcode_lookup@@Base+0x4b9c>
   4d4d0:	tbnz	w0, #19, 4e030 <aarch64_opcode_lookup@@Base+0x4b88>
   4d4d4:	tst	x0, #0x20000000
   4d4d8:	mov	w1, #0xf7                  	// #247
   4d4dc:	mov	w0, #0xc4                  	// #196
   4d4e0:	csel	w1, w0, w1, eq  // eq = none
   4d4e4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d4e8:	tst	x0, #0x1000
   4d4ec:	mov	w1, #0x8eb                 	// #2283
   4d4f0:	mov	w0, #0x86e                 	// #2158
   4d4f4:	csel	w1, w0, w1, eq  // eq = none
   4d4f8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d4fc:	tst	x0, #0x800000
   4d500:	mov	w1, #0x652                 	// #1618
   4d504:	mov	w0, #0x656                 	// #1622
   4d508:	csel	w1, w0, w1, eq  // eq = none
   4d50c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d510:	tst	x0, #0x800000
   4d514:	mov	w1, #0x5ec                 	// #1516
   4d518:	mov	w0, #0x63a                 	// #1594
   4d51c:	csel	w1, w0, w1, eq  // eq = none
   4d520:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d524:	tbnz	w0, #14, 4e3c8 <aarch64_opcode_lookup@@Base+0x4f20>
   4d528:	ubfx	x0, x0, #30, #1
   4d52c:	add	w1, w0, #0x32
   4d530:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d534:	tst	x0, #0x800000
   4d538:	mov	w1, #0x759                 	// #1881
   4d53c:	mov	w0, #0x771                 	// #1905
   4d540:	csel	w1, w0, w1, eq  // eq = none
   4d544:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d548:	tbnz	w0, #23, 4f0a8 <aarch64_opcode_lookup@@Base+0x5c00>
   4d54c:	tst	x0, #0x20000000
   4d550:	mov	w1, #0x20c                 	// #524
   4d554:	mov	w0, #0x1ee                 	// #494
   4d558:	csel	w1, w0, w1, eq  // eq = none
   4d55c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d560:	mov	w1, #0x765                 	// #1893
   4d564:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d568:	mov	w1, #0x613                 	// #1555
   4d56c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d570:	ubfx	x0, x0, #30, #1
   4d574:	add	w1, w0, #0x54
   4d578:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d57c:	mov	w1, #0x7bc                 	// #1980
   4d580:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d584:	mov	w1, #0x68c                 	// #1676
   4d588:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d58c:	tbnz	w0, #17, 4d5bc <aarch64_opcode_lookup@@Base+0x4114>
   4d590:	tst	x0, #0x40000
   4d594:	mov	w1, #0x59a                 	// #1434
   4d598:	mov	w0, #0x5c2                 	// #1474
   4d59c:	csel	w1, w0, w1, eq  // eq = none
   4d5a0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d5a4:	mov	w1, #0x5c6                 	// #1478
   4d5a8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d5ac:	mov	w1, #0x85c                 	// #2140
   4d5b0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d5b4:	mov	w1, #0x881                 	// #2177
   4d5b8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d5bc:	tst	x0, #0x40000
   4d5c0:	mov	w1, #0x598                 	// #1432
   4d5c4:	mov	w0, #0x5c4                 	// #1476
   4d5c8:	csel	w1, w0, w1, eq  // eq = none
   4d5cc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d5d0:	mov	w1, #0x397                 	// #919
   4d5d4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d5d8:	mov	w1, #0x8ca                 	// #2250
   4d5dc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d5e0:	tbnz	w0, #12, 4f048 <aarch64_opcode_lookup@@Base+0x5ba0>
   4d5e4:	tst	x0, #0x400000
   4d5e8:	mov	w1, #0x840                 	// #2112
   4d5ec:	mov	w0, #0x91b                 	// #2331
   4d5f0:	csel	w1, w0, w1, eq  // eq = none
   4d5f4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d5f8:	mov	w1, #0x930                 	// #2352
   4d5fc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d600:	tst	x0, #0x100000
   4d604:	mov	w1, #0x8aa                 	// #2218
   4d608:	mov	w0, #0x89c                 	// #2204
   4d60c:	csel	w1, w0, w1, eq  // eq = none
   4d610:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d614:	tbnz	w0, #19, 4d644 <aarch64_opcode_lookup@@Base+0x419c>
   4d618:	tbnz	w0, #20, 4f050 <aarch64_opcode_lookup@@Base+0x5ba8>
   4d61c:	tst	x0, #0x40000000
   4d620:	mov	w1, #0x8b3                 	// #2227
   4d624:	mov	w0, #0x8a2                 	// #2210
   4d628:	csel	w1, w0, w1, eq  // eq = none
   4d62c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d630:	ubfx	x0, x0, #30, #1
   4d634:	add	w1, w0, #0xe0
   4d638:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d63c:	mov	w1, #0xda                  	// #218
   4d640:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d644:	tst	x0, #0x100000
   4d648:	mov	w1, #0x8ab                 	// #2219
   4d64c:	mov	w0, #0x89d                 	// #2205
   4d650:	csel	w1, w0, w1, eq  // eq = none
   4d654:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d658:	tst	x0, #0x1000
   4d65c:	mov	w1, #0x846                 	// #2118
   4d660:	mov	w0, #0x842                 	// #2114
   4d664:	csel	w1, w0, w1, eq  // eq = none
   4d668:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d66c:	mov	w1, #0x95d                 	// #2397
   4d670:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d674:	mov	w1, #0x501                 	// #1281
   4d678:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d67c:	mov	w1, #0x7da                 	// #2010
   4d680:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d684:	tbnz	w0, #22, 4f058 <aarch64_opcode_lookup@@Base+0x5bb0>
   4d688:	tst	x0, #0x800000
   4d68c:	mov	w1, #0x5d1                 	// #1489
   4d690:	mov	w0, #0x5c9                 	// #1481
   4d694:	csel	w1, w0, w1, eq  // eq = none
   4d698:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d69c:	tbnz	w0, #20, 4d6d4 <aarch64_opcode_lookup@@Base+0x422c>
   4d6a0:	tbnz	w0, #22, 4f08c <aarch64_opcode_lookup@@Base+0x5be4>
   4d6a4:	tst	x0, #0x800000
   4d6a8:	mov	w1, #0x744                 	// #1860
   4d6ac:	mov	w0, #0x738                 	// #1848
   4d6b0:	csel	w1, w0, w1, eq  // eq = none
   4d6b4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d6b8:	tst	x0, #0x1000
   4d6bc:	mov	w1, #0x95a                 	// #2394
   4d6c0:	mov	w0, #0x87d                 	// #2173
   4d6c4:	csel	w1, w0, w1, eq  // eq = none
   4d6c8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d6cc:	mov	w1, #0x59f                 	// #1439
   4d6d0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d6d4:	tbnz	w0, #22, 4f0dc <aarch64_opcode_lookup@@Base+0x5c34>
   4d6d8:	tst	x0, #0x800000
   4d6dc:	mov	w1, #0x743                 	// #1859
   4d6e0:	mov	w0, #0x737                 	// #1847
   4d6e4:	csel	w1, w0, w1, eq  // eq = none
   4d6e8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d6ec:	tbz	w0, #16, 4f0a0 <aarch64_opcode_lookup@@Base+0x5bf8>
   4d6f0:	ubfx	x0, x0, #19, #1
   4d6f4:	add	w1, w0, #0xee
   4d6f8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d6fc:	tbz	w0, #16, 4f0f0 <aarch64_opcode_lookup@@Base+0x5c48>
   4d700:	ubfx	x0, x0, #19, #1
   4d704:	add	w1, w0, #0xe6
   4d708:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d70c:	tbnz	w0, #16, 4d73c <aarch64_opcode_lookup@@Base+0x4294>
   4d710:	tbnz	w0, #19, 4e8f4 <aarch64_opcode_lookup@@Base+0x544c>
   4d714:	tbnz	w0, #20, 4f0bc <aarch64_opcode_lookup@@Base+0x5c14>
   4d718:	tst	x0, #0x20000000
   4d71c:	mov	w1, #0xf5                  	// #245
   4d720:	mov	w0, #0xc2                  	// #194
   4d724:	csel	w1, w0, w1, eq  // eq = none
   4d728:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d72c:	mov	w1, #0x750                 	// #1872
   4d730:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d734:	mov	w1, #0x2c3                 	// #707
   4d738:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d73c:	tst	x0, #0x20000000
   4d740:	mov	w1, #0x101                 	// #257
   4d744:	mov	w0, #0xd2                  	// #210
   4d748:	csel	w1, w0, w1, eq  // eq = none
   4d74c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d750:	tbnz	w0, #22, 4e908 <aarch64_opcode_lookup@@Base+0x5460>
   4d754:	tst	x0, #0x800000
   4d758:	mov	w1, #0x708                 	// #1800
   4d75c:	mov	w0, #0x4fe                 	// #1278
   4d760:	csel	w1, w0, w1, eq  // eq = none
   4d764:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d768:	tst	x0, #0x1000
   4d76c:	mov	w1, #0x909                 	// #2313
   4d770:	mov	w0, #0x8d4                 	// #2260
   4d774:	csel	w1, w0, w1, eq  // eq = none
   4d778:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d77c:	tbnz	w0, #20, 4d7d0 <aarch64_opcode_lookup@@Base+0x4328>
   4d780:	tbnz	w0, #17, 4f15c <aarch64_opcode_lookup@@Base+0x5cb4>
   4d784:	tbnz	w0, #18, 4f0f8 <aarch64_opcode_lookup@@Base+0x5c50>
   4d788:	tst	x0, #0x400000
   4d78c:	mov	w1, #0x57b                 	// #1403
   4d790:	mov	w0, #0x579                 	// #1401
   4d794:	csel	w1, w0, w1, eq  // eq = none
   4d798:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d79c:	tbz	w0, #20, 4f100 <aarch64_opcode_lookup@@Base+0x5c58>
   4d7a0:	tst	x0, #0x40000000
   4d7a4:	mov	w1, #0x8f7                 	// #2295
   4d7a8:	mov	w0, #0x6c1                 	// #1729
   4d7ac:	csel	w1, w0, w1, eq  // eq = none
   4d7b0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d7b4:	tbnz	w0, #19, 4d7e8 <aarch64_opcode_lookup@@Base+0x4340>
   4d7b8:	tbnz	w0, #20, 4f108 <aarch64_opcode_lookup@@Base+0x5c60>
   4d7bc:	tst	x0, #0x40000000
   4d7c0:	mov	w1, #0x8fe                 	// #2302
   4d7c4:	mov	w0, #0x8f2                 	// #2290
   4d7c8:	csel	w1, w0, w1, eq  // eq = none
   4d7cc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d7d0:	tbnz	w0, #22, 4f11c <aarch64_opcode_lookup@@Base+0x5c74>
   4d7d4:	tst	x0, #0x800000
   4d7d8:	mov	w1, #0x582                 	// #1410
   4d7dc:	mov	w0, #0x819                 	// #2073
   4d7e0:	csel	w1, w0, w1, eq  // eq = none
   4d7e4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d7e8:	tbnz	w0, #20, 4f07c <aarch64_opcode_lookup@@Base+0x5bd4>
   4d7ec:	tst	x0, #0x40000000
   4d7f0:	mov	w1, #0x8ef                 	// #2287
   4d7f4:	mov	w0, #0x8a5                 	// #2213
   4d7f8:	csel	w1, w0, w1, eq  // eq = none
   4d7fc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d800:	ubfx	x0, x0, #30, #1
   4d804:	add	w1, w0, #0x56
   4d808:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d80c:	mov	w1, #0x2db                 	// #731
   4d810:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d814:	tbnz	w0, #19, 4da3c <aarch64_opcode_lookup@@Base+0x4594>
   4d818:	tbnz	w0, #20, 4ef78 <aarch64_opcode_lookup@@Base+0x5ad0>
   4d81c:	tbnz	w0, #23, 4ef4c <aarch64_opcode_lookup@@Base+0x5aa4>
   4d820:	tst	x0, #0x20000000
   4d824:	mov	w1, #0xea                  	// #234
   4d828:	mov	w0, #0xba                  	// #186
   4d82c:	csel	w1, w0, w1, eq  // eq = none
   4d830:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d834:	tst	x0, #0x800000
   4d838:	mov	w1, #0x7c0                 	// #1984
   4d83c:	mov	w0, #0x7c3                 	// #1987
   4d840:	csel	w1, w0, w1, eq  // eq = none
   4d844:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d848:	mov	w1, #0x675                 	// #1653
   4d84c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d850:	mov	w1, #0x7d9                 	// #2009
   4d854:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d858:	ubfx	x0, x0, #22, #1
   4d85c:	add	w1, w0, #0x860
   4d860:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d864:	tbz	w0, #12, 4f02c <aarch64_opcode_lookup@@Base+0x5b84>
   4d868:	tbnz	w0, #22, 4f024 <aarch64_opcode_lookup@@Base+0x5b7c>
   4d86c:	tst	x0, #0x800000
   4d870:	mov	w1, #0x959                 	// #2393
   4d874:	mov	w0, #0x957                 	// #2391
   4d878:	csel	w1, w0, w1, eq  // eq = none
   4d87c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d880:	mov	w1, #0xd5                  	// #213
   4d884:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d888:	mov	w1, #0x75d                 	// #1885
   4d88c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d890:	mov	w1, #0x74a                 	// #1866
   4d894:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d898:	ubfx	x0, x0, #22, #1
   4d89c:	add	w1, w0, #0x8dd
   4d8a0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d8a4:	tst	x0, #0x1000
   4d8a8:	mov	w1, #0x8e2                 	// #2274
   4d8ac:	mov	w0, #0x8dc                 	// #2268
   4d8b0:	csel	w1, w0, w1, eq  // eq = none
   4d8b4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d8b8:	mov	w1, #0x97d                 	// #2429
   4d8bc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d8c0:	tst	x0, #0x400000
   4d8c4:	mov	w1, #0x803                 	// #2051
   4d8c8:	mov	w0, #0x80e                 	// #2062
   4d8cc:	csel	w1, w0, w1, eq  // eq = none
   4d8d0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d8d4:	tst	x0, #0x20000000
   4d8d8:	mov	w1, #0x16e                 	// #366
   4d8dc:	mov	w0, #0x139                 	// #313
   4d8e0:	csel	w1, w0, w1, eq  // eq = none
   4d8e4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d8e8:	mov	w1, #0x68e                 	// #1678
   4d8ec:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d8f0:	mov	w1, #0x6f4                 	// #1780
   4d8f4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d8f8:	tbnz	w0, #31, 4eff0 <aarch64_opcode_lookup@@Base+0x5b48>
   4d8fc:	tst	x0, #0x40000000
   4d900:	mov	w1, #0x42b                 	// #1067
   4d904:	mov	w0, #0x428                 	// #1064
   4d908:	csel	w1, w0, w1, eq  // eq = none
   4d90c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d910:	tbnz	w0, #31, 4ef3c <aarch64_opcode_lookup@@Base+0x5a94>
   4d914:	tst	x0, #0x40000000
   4d918:	mov	w1, #0x45b                 	// #1115
   4d91c:	mov	w0, #0x458                 	// #1112
   4d920:	csel	w1, w0, w1, eq  // eq = none
   4d924:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d928:	tbnz	w0, #10, 4f084 <aarch64_opcode_lookup@@Base+0x5bdc>
   4d92c:	tst	x0, #0x1000
   4d930:	mov	w1, #0x705                 	// #1797
   4d934:	mov	w0, #0x701                 	// #1793
   4d938:	csel	w1, w0, w1, eq  // eq = none
   4d93c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d940:	mov	w1, #0x5a3                 	// #1443
   4d944:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d948:	mov	w1, #0x3a2                 	// #930
   4d94c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d950:	tbnz	w0, #20, 4d994 <aarch64_opcode_lookup@@Base+0x44ec>
   4d954:	tbnz	w0, #22, 4efd4 <aarch64_opcode_lookup@@Base+0x5b2c>
   4d958:	tst	x0, #0x800000
   4d95c:	mov	w1, #0x7d7                 	// #2007
   4d960:	mov	w0, #0x7cb                 	// #1995
   4d964:	csel	w1, w0, w1, eq  // eq = none
   4d968:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d96c:	tst	x0, #0x80000
   4d970:	mov	w1, #0x517                 	// #1303
   4d974:	mov	w0, #0x513                 	// #1299
   4d978:	csel	w1, w0, w1, eq  // eq = none
   4d97c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d980:	tst	x0, #0x800000
   4d984:	mov	w1, #0x54e                 	// #1358
   4d988:	mov	w0, #0x550                 	// #1360
   4d98c:	csel	w1, w0, w1, eq  // eq = none
   4d990:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d994:	tbnz	w0, #22, 4efb0 <aarch64_opcode_lookup@@Base+0x5b08>
   4d998:	tst	x0, #0x800000
   4d99c:	mov	w1, #0x7d8                 	// #2008
   4d9a0:	mov	w0, #0x7cc                 	// #1996
   4d9a4:	csel	w1, w0, w1, eq  // eq = none
   4d9a8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d9ac:	tbnz	w0, #31, 4efc4 <aarch64_opcode_lookup@@Base+0x5b1c>
   4d9b0:	tst	x0, #0x40000000
   4d9b4:	mov	w1, #0x41f                 	// #1055
   4d9b8:	mov	w0, #0x41c                 	// #1052
   4d9bc:	csel	w1, w0, w1, eq  // eq = none
   4d9c0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d9c4:	tst	x0, #0x20000000
   4d9c8:	mov	w1, #0x168                 	// #360
   4d9cc:	mov	w0, #0x137                 	// #311
   4d9d0:	csel	w1, w0, w1, eq  // eq = none
   4d9d4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d9d8:	tbnz	w0, #23, 4d9fc <aarch64_opcode_lookup@@Base+0x4554>
   4d9dc:	tbnz	w0, #31, 4ef44 <aarch64_opcode_lookup@@Base+0x5a9c>
   4d9e0:	tst	x0, #0x40000000
   4d9e4:	mov	w1, #0x420                 	// #1056
   4d9e8:	mov	w0, #0x41d                 	// #1053
   4d9ec:	csel	w1, w0, w1, eq  // eq = none
   4d9f0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d9f4:	mov	w1, #0x931                 	// #2353
   4d9f8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4d9fc:	tbnz	w0, #31, 4ef8c <aarch64_opcode_lookup@@Base+0x5ae4>
   4da00:	tst	x0, #0x40000000
   4da04:	mov	w1, #0x421                 	// #1057
   4da08:	mov	w0, #0x41e                 	// #1054
   4da0c:	csel	w1, w0, w1, eq  // eq = none
   4da10:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4da14:	tst	x0, #0x20000000
   4da18:	cset	w0, eq  // eq = none
   4da1c:	add	w1, w0, #0x222
   4da20:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4da24:	tbnz	w0, #22, 4da5c <aarch64_opcode_lookup@@Base+0x45b4>
   4da28:	tst	x0, #0x800000
   4da2c:	mov	w1, #0x7ca                 	// #1994
   4da30:	mov	w0, #0x7be                 	// #1982
   4da34:	csel	w1, w0, w1, eq  // eq = none
   4da38:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4da3c:	tbnz	w0, #23, 4ef9c <aarch64_opcode_lookup@@Base+0x5af4>
   4da40:	tst	x0, #0x20000000
   4da44:	mov	w1, #0xeb                  	// #235
   4da48:	mov	w0, #0xbb                  	// #187
   4da4c:	csel	w1, w0, w1, eq  // eq = none
   4da50:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4da54:	mov	w1, #0x75f                 	// #1887
   4da58:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4da5c:	tst	x0, #0x800000
   4da60:	mov	w1, #0x7c1                 	// #1985
   4da64:	mov	w0, #0x7c4                 	// #1988
   4da68:	csel	w1, w0, w1, eq  // eq = none
   4da6c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4da70:	ubfx	x0, x0, #19, #1
   4da74:	add	w1, w0, #0x1fb
   4da78:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4da7c:	tst	x0, #0x80000
   4da80:	mov	w1, #0x726                 	// #1830
   4da84:	mov	w0, #0x70b                 	// #1803
   4da88:	csel	w1, w0, w1, eq  // eq = none
   4da8c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4da90:	tbnz	w0, #18, 4ef70 <aarch64_opcode_lookup@@Base+0x5ac8>
   4da94:	tst	x0, #0x80000
   4da98:	mov	w1, #0x51e                 	// #1310
   4da9c:	mov	w0, #0x5d9                 	// #1497
   4daa0:	csel	w1, w0, w1, eq  // eq = none
   4daa4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4daa8:	ubfx	x0, x0, #29, #1
   4daac:	add	w1, w0, #0x9e
   4dab0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dab4:	tst	x0, #0x100000
   4dab8:	mov	w1, #0x557                 	// #1367
   4dabc:	mov	w0, #0x71f                 	// #1823
   4dac0:	csel	w1, w0, w1, eq  // eq = none
   4dac4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dac8:	mov	w1, #0x2d5                 	// #725
   4dacc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dad0:	ubfx	x0, x0, #30, #1
   4dad4:	add	w1, w0, #0x60
   4dad8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dadc:	ubfx	x0, x0, #30, #1
   4dae0:	add	w1, w0, #0x5c
   4dae4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dae8:	ubfx	x0, x0, #30, #1
   4daec:	add	w1, w0, #0x5a
   4daf0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4daf4:	tbnz	w0, #23, 4e6b0 <aarch64_opcode_lookup@@Base+0x5208>
   4daf8:	tbnz	w0, #31, 4ed78 <aarch64_opcode_lookup@@Base+0x58d0>
   4dafc:	tst	x0, #0x40000000
   4db00:	mov	w1, #0x45c                 	// #1116
   4db04:	mov	w0, #0x459                 	// #1113
   4db08:	csel	w1, w0, w1, eq  // eq = none
   4db0c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4db10:	tst	x0, #0x20000000
   4db14:	mov	w1, #0x166                 	// #358
   4db18:	mov	w0, #0x133                 	// #307
   4db1c:	csel	w1, w0, w1, eq  // eq = none
   4db20:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4db24:	mov	w1, #0x808                 	// #2056
   4db28:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4db2c:	tbnz	w0, #31, 4ef00 <aarch64_opcode_lookup@@Base+0x5a58>
   4db30:	tst	x0, #0x40000000
   4db34:	mov	w1, #0x467                 	// #1127
   4db38:	mov	w0, #0x464                 	// #1124
   4db3c:	csel	w1, w0, w1, eq  // eq = none
   4db40:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4db44:	tbnz	w0, #23, 4e204 <aarch64_opcode_lookup@@Base+0x4d5c>
   4db48:	tbnz	w0, #31, 4e940 <aarch64_opcode_lookup@@Base+0x5498>
   4db4c:	tst	x0, #0x40000000
   4db50:	mov	w1, #0x468                 	// #1128
   4db54:	mov	w0, #0x465                 	// #1125
   4db58:	csel	w1, w0, w1, eq  // eq = none
   4db5c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4db60:	mov	w1, #0x548                 	// #1352
   4db64:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4db68:	mov	w1, #0x8f9                 	// #2297
   4db6c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4db70:	mov	w1, #0x203                 	// #515
   4db74:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4db78:	tst	x0, #0x40000000
   4db7c:	mov	w1, #0x2c5                 	// #709
   4db80:	mov	w0, #0x2d7                 	// #727
   4db84:	csel	w1, w0, w1, eq  // eq = none
   4db88:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4db8c:	tst	x0, #0x80000
   4db90:	mov	w1, #0x561                 	// #1377
   4db94:	mov	w0, #0x7a0                 	// #1952
   4db98:	csel	w1, w0, w1, eq  // eq = none
   4db9c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dba0:	tbnz	w0, #18, 4dbe8 <aarch64_opcode_lookup@@Base+0x4740>
   4dba4:	tst	x0, #0x80000
   4dba8:	mov	w1, #0x540                 	// #1344
   4dbac:	mov	w0, #0x79f                 	// #1951
   4dbb0:	csel	w1, w0, w1, eq  // eq = none
   4dbb4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dbb8:	mov	w1, #0x150                 	// #336
   4dbbc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dbc0:	tbz	w0, #16, 4eee8 <aarch64_opcode_lookup@@Base+0x5a40>
   4dbc4:	ubfx	x0, x0, #30, #1
   4dbc8:	add	w1, w0, #0xe4
   4dbcc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dbd0:	mov	w1, #0x950                 	// #2384
   4dbd4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dbd8:	mov	w1, #0x6e5                 	// #1765
   4dbdc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dbe0:	mov	w1, #0x970                 	// #2416
   4dbe4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dbe8:	tst	x0, #0x80000
   4dbec:	mov	w1, #0x6d7                 	// #1751
   4dbf0:	mov	w0, #0x4f9                 	// #1273
   4dbf4:	csel	w1, w0, w1, eq  // eq = none
   4dbf8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dbfc:	mov	w1, #0x16a                 	// #362
   4dc00:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dc04:	mov	w1, #0x6cd                 	// #1741
   4dc08:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dc0c:	tbnz	w0, #16, 4dc58 <aarch64_opcode_lookup@@Base+0x47b0>
   4dc10:	tst	x0, #0x100000
   4dc14:	mov	w1, #0x6df                 	// #1759
   4dc18:	mov	w0, #0x721                 	// #1825
   4dc1c:	csel	w1, w0, w1, eq  // eq = none
   4dc20:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dc24:	tbnz	w0, #18, 4e9a4 <aarch64_opcode_lookup@@Base+0x54fc>
   4dc28:	tst	x0, #0x80000
   4dc2c:	mov	w1, #0x32e                 	// #814
   4dc30:	mov	w0, #0x334                 	// #820
   4dc34:	csel	w1, w0, w1, eq  // eq = none
   4dc38:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dc3c:	tbnz	w0, #16, 4dc80 <aarch64_opcode_lookup@@Base+0x47d8>
   4dc40:	tbnz	w0, #18, 4ed48 <aarch64_opcode_lookup@@Base+0x58a0>
   4dc44:	tst	x0, #0x80000
   4dc48:	mov	w1, #0x32d                 	// #813
   4dc4c:	mov	w0, #0x332                 	// #818
   4dc50:	csel	w1, w0, w1, eq  // eq = none
   4dc54:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dc58:	tst	x0, #0x100000
   4dc5c:	mov	w1, #0x55e                 	// #1374
   4dc60:	mov	w0, #0x7b6                 	// #1974
   4dc64:	csel	w1, w0, w1, eq  // eq = none
   4dc68:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dc6c:	tst	x0, #0x10
   4dc70:	mov	w1, #0x71d                 	// #1821
   4dc74:	mov	w0, #0x55c                 	// #1372
   4dc78:	csel	w1, w0, w1, eq  // eq = none
   4dc7c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dc80:	tbnz	w0, #18, 4eb8c <aarch64_opcode_lookup@@Base+0x56e4>
   4dc84:	tst	x0, #0x80000
   4dc88:	mov	w1, #0x32f                 	// #815
   4dc8c:	mov	w0, #0x336                 	// #822
   4dc90:	csel	w1, w0, w1, eq  // eq = none
   4dc94:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dc98:	tst	x0, #0x1000
   4dc9c:	mov	w1, #0x908                 	// #2312
   4dca0:	mov	w0, #0x8d3                 	// #2259
   4dca4:	csel	w1, w0, w1, eq  // eq = none
   4dca8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dcac:	tbnz	w0, #23, 4e4d0 <aarch64_opcode_lookup@@Base+0x5028>
   4dcb0:	tbnz	w0, #31, 4eec4 <aarch64_opcode_lookup@@Base+0x5a1c>
   4dcb4:	tst	x0, #0x40000000
   4dcb8:	mov	w1, #0x42c                 	// #1068
   4dcbc:	mov	w0, #0x429                 	// #1065
   4dcc0:	csel	w1, w0, w1, eq  // eq = none
   4dcc4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dcc8:	tst	x0, #0x800000
   4dccc:	mov	w1, #0x5fb                 	// #1531
   4dcd0:	mov	w0, #0x5e6                 	// #1510
   4dcd4:	csel	w1, w0, w1, eq  // eq = none
   4dcd8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dcdc:	tbz	w0, #22, 4ed50 <aarch64_opcode_lookup@@Base+0x58a8>
   4dce0:	tst	x0, #0x800000
   4dce4:	mov	w1, #0x54d                 	// #1357
   4dce8:	mov	w0, #0x54f                 	// #1359
   4dcec:	csel	w1, w0, w1, eq  // eq = none
   4dcf0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dcf4:	mov	w1, #0x6a3                 	// #1699
   4dcf8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dcfc:	ubfx	x0, x0, #12, #1
   4dd00:	add	w1, w0, #0x910
   4dd04:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dd08:	tbnz	w0, #11, 4dd3c <aarch64_opcode_lookup@@Base+0x4894>
   4dd0c:	ubfx	x0, x0, #12, #1
   4dd10:	add	w1, w0, #0x7ea
   4dd14:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dd18:	mov	w1, #0x728                 	// #1832
   4dd1c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dd20:	tbnz	w0, #18, 4e968 <aarch64_opcode_lookup@@Base+0x54c0>
   4dd24:	tbz	w0, #19, 4e960 <aarch64_opcode_lookup@@Base+0x54b8>
   4dd28:	tst	x0, #0x100000
   4dd2c:	mov	w1, #0x504                 	// #1284
   4dd30:	mov	w0, #0x723                 	// #1827
   4dd34:	csel	w1, w0, w1, eq  // eq = none
   4dd38:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dd3c:	ubfx	x0, x0, #12, #1
   4dd40:	add	w1, w0, #0x7e6
   4dd44:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dd48:	tst	x0, #0x80000
   4dd4c:	mov	w1, #0x7a6                 	// #1958
   4dd50:	mov	w0, #0x7af                 	// #1967
   4dd54:	csel	w1, w0, w1, eq  // eq = none
   4dd58:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dd5c:	tbnz	w0, #18, 4e948 <aarch64_opcode_lookup@@Base+0x54a0>
   4dd60:	tbnz	w0, #19, 4e248 <aarch64_opcode_lookup@@Base+0x4da0>
   4dd64:	tst	x0, #0x100000
   4dd68:	mov	w1, #0x7ba                 	// #1978
   4dd6c:	mov	w0, #0x79b                 	// #1947
   4dd70:	csel	w1, w0, w1, eq  // eq = none
   4dd74:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dd78:	tst	x0, #0x80000
   4dd7c:	mov	w1, #0x70e                 	// #1806
   4dd80:	mov	w0, #0x717                 	// #1815
   4dd84:	csel	w1, w0, w1, eq  // eq = none
   4dd88:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dd8c:	ubfx	x0, x0, #22, #1
   4dd90:	add	w1, w0, #0x891
   4dd94:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dd98:	tbnz	w0, #12, 4ea10 <aarch64_opcode_lookup@@Base+0x5568>
   4dd9c:	ubfx	x0, x0, #22, #1
   4dda0:	add	w1, w0, #0x834
   4dda4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dda8:	tbnz	w0, #16, 4ddd8 <aarch64_opcode_lookup@@Base+0x4930>
   4ddac:	tst	x0, #0x80000
   4ddb0:	mov	w1, #0x2a1                 	// #673
   4ddb4:	mov	w0, #0xa8                  	// #168
   4ddb8:	csel	w1, w0, w1, eq  // eq = none
   4ddbc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ddc0:	tbz	w0, #29, 4ea64 <aarch64_opcode_lookup@@Base+0x55bc>
   4ddc4:	tst	x0, #0x40000000
   4ddc8:	mov	w1, #0x93d                 	// #2365
   4ddcc:	mov	w0, #0x939                 	// #2361
   4ddd0:	csel	w1, w0, w1, eq  // eq = none
   4ddd4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ddd8:	tbnz	w0, #23, 4ea74 <aarch64_opcode_lookup@@Base+0x55cc>
   4dddc:	ubfx	x0, x0, #30, #1
   4dde0:	add	w1, w0, #0xb2
   4dde4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dde8:	mov	w1, #0x66b                 	// #1643
   4ddec:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ddf0:	mov	w1, #0x95                  	// #149
   4ddf4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ddf8:	tst	x0, #0x1000
   4ddfc:	mov	w1, #0x848                 	// #2120
   4de00:	mov	w0, #0x8b5                 	// #2229
   4de04:	csel	w1, w0, w1, eq  // eq = none
   4de08:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4de0c:	mov	w1, #0x74e                 	// #1870
   4de10:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4de14:	mov	w1, #0x14f                 	// #335
   4de18:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4de1c:	tbnz	w0, #23, 4ea20 <aarch64_opcode_lookup@@Base+0x5578>
   4de20:	tbnz	w0, #31, 4ea18 <aarch64_opcode_lookup@@Base+0x5570>
   4de24:	tst	x0, #0x40000000
   4de28:	mov	w1, #0x414                 	// #1044
   4de2c:	mov	w0, #0x411                 	// #1041
   4de30:	csel	w1, w0, w1, eq  // eq = none
   4de34:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4de38:	tbnz	w0, #29, 4e9f0 <aarch64_opcode_lookup@@Base+0x5548>
   4de3c:	tst	x0, #0x40000000
   4de40:	mov	w1, #0x93b                 	// #2363
   4de44:	mov	w0, #0x937                 	// #2359
   4de48:	csel	w1, w0, w1, eq  // eq = none
   4de4c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4de50:	mov	w1, #0x626                 	// #1574
   4de54:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4de58:	mov	w1, #0x826                 	// #2086
   4de5c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4de60:	mov	w1, #0x14a                 	// #330
   4de64:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4de68:	mov	w1, #0x22b                 	// #555
   4de6c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4de70:	tst	x0, #0x800000
   4de74:	mov	w1, #0x171                 	// #369
   4de78:	mov	w0, #0x165                 	// #357
   4de7c:	csel	w1, w0, w1, eq  // eq = none
   4de80:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4de84:	mov	w1, #0x763                 	// #1891
   4de88:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4de8c:	mov	w1, #0x5fd                 	// #1533
   4de90:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4de94:	mov	w1, #0x8e6                 	// #2278
   4de98:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4de9c:	tst	x0, #0x1000
   4dea0:	mov	w1, #0x8cb                 	// #2251
   4dea4:	mov	w0, #0x901                 	// #2305
   4dea8:	csel	w1, w0, w1, eq  // eq = none
   4deac:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4deb0:	tst	x0, #0x40000000
   4deb4:	mov	w1, #0x4b                  	// #75
   4deb8:	mov	w0, #0x49                  	// #73
   4debc:	csel	w1, w0, w1, eq  // eq = none
   4dec0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dec4:	tst	x0, #0x20000000
   4dec8:	mov	w1, #0x20e                 	// #526
   4decc:	mov	w0, #0x1f0                 	// #496
   4ded0:	csel	w1, w0, w1, eq  // eq = none
   4ded4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ded8:	tbnz	w0, #19, 4e540 <aarch64_opcode_lookup@@Base+0x5098>
   4dedc:	tst	x0, #0x20000000
   4dee0:	mov	w1, #0x209                 	// #521
   4dee4:	mov	w0, #0x1eb                 	// #491
   4dee8:	csel	w1, w0, w1, eq  // eq = none
   4deec:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4def0:	ubfx	x0, x0, #30, #1
   4def4:	add	w1, w0, #0x34
   4def8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4defc:	tbz	w0, #18, 4eab0 <aarch64_opcode_lookup@@Base+0x5608>
   4df00:	tst	x0, #0x80000
   4df04:	mov	w1, #0x31c                 	// #796
   4df08:	mov	w0, #0x30d                 	// #781
   4df0c:	csel	w1, w0, w1, eq  // eq = none
   4df10:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4df14:	tst	x0, #0x20000000
   4df18:	mov	w1, #0xfa                  	// #250
   4df1c:	mov	w0, #0xc9                  	// #201
   4df20:	csel	w1, w0, w1, eq  // eq = none
   4df24:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4df28:	tbnz	w0, #19, 4eac0 <aarch64_opcode_lookup@@Base+0x5618>
   4df2c:	tbnz	w0, #23, 4eab8 <aarch64_opcode_lookup@@Base+0x5610>
   4df30:	ubfx	x0, x0, #29, #1
   4df34:	add	w1, w0, #0xa0
   4df38:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4df3c:	mov	w1, #0x898                 	// #2200
   4df40:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4df44:	mov	w1, #0x238                 	// #568
   4df48:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4df4c:	mov	w1, #0x76d                 	// #1901
   4df50:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4df54:	mov	w1, #0x690                 	// #1680
   4df58:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4df5c:	mov	w1, #0x6a2                 	// #1698
   4df60:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4df64:	mov	w1, #0x3a1                 	// #929
   4df68:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4df6c:	mov	w1, #0x396                 	// #918
   4df70:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4df74:	tbnz	w0, #19, 4dfc4 <aarch64_opcode_lookup@@Base+0x4b1c>
   4df78:	tbnz	w0, #23, 4ec30 <aarch64_opcode_lookup@@Base+0x5788>
   4df7c:	tst	x0, #0x20000000
   4df80:	mov	w1, #0xe8                  	// #232
   4df84:	mov	w0, #0xb8                  	// #184
   4df88:	csel	w1, w0, w1, eq  // eq = none
   4df8c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4df90:	tbnz	w0, #18, 4ec28 <aarch64_opcode_lookup@@Base+0x5780>
   4df94:	tst	x0, #0x100000
   4df98:	mov	w1, #0x5a9                 	// #1449
   4df9c:	mov	w0, #0x5ad                 	// #1453
   4dfa0:	csel	w1, w0, w1, eq  // eq = none
   4dfa4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dfa8:	tbnz	w0, #17, 4dfdc <aarch64_opcode_lookup@@Base+0x4b34>
   4dfac:	tbnz	w0, #18, 4eae4 <aarch64_opcode_lookup@@Base+0x563c>
   4dfb0:	tst	x0, #0x100000
   4dfb4:	mov	w1, #0x5c3                 	// #1475
   4dfb8:	mov	w0, #0x5bf                 	// #1471
   4dfbc:	csel	w1, w0, w1, eq  // eq = none
   4dfc0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dfc4:	tbnz	w0, #23, 4eaf8 <aarch64_opcode_lookup@@Base+0x5650>
   4dfc8:	tst	x0, #0x20000000
   4dfcc:	mov	w1, #0xe9                  	// #233
   4dfd0:	mov	w0, #0xb9                  	// #185
   4dfd4:	csel	w1, w0, w1, eq  // eq = none
   4dfd8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dfdc:	tst	x0, #0x40000
   4dfe0:	mov	w1, #0x599                 	// #1433
   4dfe4:	mov	w0, #0x5c5                 	// #1477
   4dfe8:	csel	w1, w0, w1, eq  // eq = none
   4dfec:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4dff0:	tbnz	w0, #12, 4ec44 <aarch64_opcode_lookup@@Base+0x579c>
   4dff4:	tst	x0, #0x400000
   4dff8:	mov	w1, #0x841                 	// #2113
   4dffc:	mov	w0, #0x91c                 	// #2332
   4e000:	csel	w1, w0, w1, eq  // eq = none
   4e004:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e008:	mov	w1, #0x922                 	// #2338
   4e00c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e010:	mov	w1, #0x226                 	// #550
   4e014:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e018:	mov	w1, #0x1ff                 	// #511
   4e01c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e020:	mov	w1, #0x5f8                 	// #1528
   4e024:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e028:	mov	w1, #0x6fb                 	// #1787
   4e02c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e030:	tst	x0, #0x20000000
   4e034:	mov	w1, #0xf8                  	// #248
   4e038:	mov	w0, #0xc5                  	// #197
   4e03c:	csel	w1, w0, w1, eq  // eq = none
   4e040:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e044:	tbnz	w0, #19, 4e40c <aarch64_opcode_lookup@@Base+0x4f64>
   4e048:	tbnz	w0, #23, 4edf4 <aarch64_opcode_lookup@@Base+0x594c>
   4e04c:	tst	x0, #0x20000000
   4e050:	mov	w1, #0xf0                  	// #240
   4e054:	mov	w0, #0xc0                  	// #192
   4e058:	csel	w1, w0, w1, eq  // eq = none
   4e05c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e060:	mov	w1, #0x1fe                 	// #510
   4e064:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e068:	tst	x0, #0x10
   4e06c:	mov	w1, #0x6d2                 	// #1746
   4e070:	mov	w0, #0x6d5                 	// #1749
   4e074:	csel	w1, w0, w1, eq  // eq = none
   4e078:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e07c:	mov	w1, #0x508                 	// #1288
   4e080:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e084:	tbnz	w0, #18, 4e840 <aarch64_opcode_lookup@@Base+0x5398>
   4e088:	tst	x0, #0x100000
   4e08c:	mov	w1, #0x710                 	// #1808
   4e090:	mov	w0, #0x5b8                 	// #1464
   4e094:	csel	w1, w0, w1, eq  // eq = none
   4e098:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e09c:	mov	w1, #0x55f                 	// #1375
   4e0a0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e0a4:	mov	w1, #0x779                 	// #1913
   4e0a8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e0ac:	mov	w1, #0x775                 	// #1909
   4e0b0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e0b4:	mov	w1, #0x564                 	// #1380
   4e0b8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e0bc:	mov	w1, #0x239                 	// #569
   4e0c0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e0c4:	tbz	w0, #20, 4e8e4 <aarch64_opcode_lookup@@Base+0x543c>
   4e0c8:	tst	x0, #0x40000000
   4e0cc:	mov	w1, #0x8ed                 	// #2285
   4e0d0:	mov	w0, #0x6c7                 	// #1735
   4e0d4:	csel	w1, w0, w1, eq  // eq = none
   4e0d8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e0dc:	tbnz	w0, #19, 4e0fc <aarch64_opcode_lookup@@Base+0x4c54>
   4e0e0:	tst	x0, #0x40000000
   4e0e4:	mov	w1, #0x8fc                 	// #2300
   4e0e8:	mov	w0, #0x6c9                 	// #1737
   4e0ec:	csel	w1, w0, w1, eq  // eq = none
   4e0f0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e0f4:	mov	w1, #0x8fa                 	// #2298
   4e0f8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e0fc:	tbnz	w0, #20, 4e8a8 <aarch64_opcode_lookup@@Base+0x5400>
   4e100:	tst	x0, #0x40000000
   4e104:	mov	w1, #0x8f4                 	// #2292
   4e108:	mov	w0, #0x8ff                 	// #2303
   4e10c:	csel	w1, w0, w1, eq  // eq = none
   4e110:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e114:	mov	w1, #0x5c1                 	// #1473
   4e118:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e11c:	mov	w1, #0x5fe                 	// #1534
   4e120:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e124:	tst	x0, #0x1000
   4e128:	mov	w1, #0x89a                 	// #2202
   4e12c:	mov	w0, #0x88a                 	// #2186
   4e130:	csel	w1, w0, w1, eq  // eq = none
   4e134:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e138:	tst	x0, #0x1000
   4e13c:	mov	w1, #0x899                 	// #2201
   4e140:	mov	w0, #0x889                 	// #2185
   4e144:	csel	w1, w0, w1, eq  // eq = none
   4e148:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e14c:	mov	w1, #0x5e8                 	// #1512
   4e150:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e154:	tbnz	w0, #23, 4e188 <aarch64_opcode_lookup@@Base+0x4ce0>
   4e158:	tbnz	w0, #31, 4e920 <aarch64_opcode_lookup@@Base+0x5478>
   4e15c:	tst	x0, #0x40000000
   4e160:	mov	w1, #0x438                 	// #1080
   4e164:	mov	w0, #0x435                 	// #1077
   4e168:	csel	w1, w0, w1, eq  // eq = none
   4e16c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e170:	tbnz	w0, #31, 4e928 <aarch64_opcode_lookup@@Base+0x5480>
   4e174:	tst	x0, #0x40000000
   4e178:	mov	w1, #0x437                 	// #1079
   4e17c:	mov	w0, #0x434                 	// #1076
   4e180:	csel	w1, w0, w1, eq  // eq = none
   4e184:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e188:	tbnz	w0, #31, 4ee2c <aarch64_opcode_lookup@@Base+0x5984>
   4e18c:	tst	x0, #0x40000000
   4e190:	mov	w1, #0x439                 	// #1081
   4e194:	mov	w0, #0x436                 	// #1078
   4e198:	csel	w1, w0, w1, eq  // eq = none
   4e19c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e1a0:	tst	x0, #0x40000
   4e1a4:	mov	w1, #0x592                 	// #1426
   4e1a8:	mov	w0, #0x5a8                 	// #1448
   4e1ac:	csel	w1, w0, w1, eq  // eq = none
   4e1b0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e1b4:	tbz	w0, #20, 4ee3c <aarch64_opcode_lookup@@Base+0x5994>
   4e1b8:	tst	x0, #0x40000000
   4e1bc:	mov	w1, #0x872                 	// #2162
   4e1c0:	mov	w0, #0x50b                 	// #1291
   4e1c4:	csel	w1, w0, w1, eq  // eq = none
   4e1c8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e1cc:	tbnz	w0, #19, 4e21c <aarch64_opcode_lookup@@Base+0x4d74>
   4e1d0:	tbz	w0, #20, 4e930 <aarch64_opcode_lookup@@Base+0x5488>
   4e1d4:	tst	x0, #0x40000000
   4e1d8:	mov	w1, #0x8b0                 	// #2224
   4e1dc:	mov	w0, #0x50e                 	// #1294
   4e1e0:	csel	w1, w0, w1, eq  // eq = none
   4e1e4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e1e8:	mov	w1, #0x639                 	// #1593
   4e1ec:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e1f0:	tst	x0, #0x800000
   4e1f4:	mov	w1, #0x6aa                 	// #1706
   4e1f8:	mov	w0, #0x6a6                 	// #1702
   4e1fc:	csel	w1, w0, w1, eq  // eq = none
   4e200:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e204:	tbnz	w0, #31, 4e938 <aarch64_opcode_lookup@@Base+0x5490>
   4e208:	tst	x0, #0x40000000
   4e20c:	mov	w1, #0x469                 	// #1129
   4e210:	mov	w0, #0x466                 	// #1126
   4e214:	csel	w1, w0, w1, eq  // eq = none
   4e218:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e21c:	tbnz	w0, #20, 4ee6c <aarch64_opcode_lookup@@Base+0x59c4>
   4e220:	tst	x0, #0x40000000
   4e224:	mov	w1, #0x8a4                 	// #2212
   4e228:	mov	w0, #0x8b4                 	// #2228
   4e22c:	csel	w1, w0, w1, eq  // eq = none
   4e230:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e234:	tst	x0, #0x800000
   4e238:	mov	w1, #0x13f                 	// #319
   4e23c:	mov	w0, #0x132                 	// #306
   4e240:	csel	w1, w0, w1, eq  // eq = none
   4e244:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e248:	tst	x0, #0x100000
   4e24c:	mov	w1, #0x510                 	// #1296
   4e250:	mov	w0, #0x7b8                 	// #1976
   4e254:	csel	w1, w0, w1, eq  // eq = none
   4e258:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e25c:	mov	w1, #0x1fd                 	// #509
   4e260:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e264:	tbnz	w0, #17, 4ee4c <aarch64_opcode_lookup@@Base+0x59a4>
   4e268:	tst	x0, #0x40000
   4e26c:	mov	w1, #0x552                 	// #1362
   4e270:	mov	w0, #0x7d4                 	// #2004
   4e274:	csel	w1, w0, w1, eq  // eq = none
   4e278:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e27c:	tst	x0, #0x20000
   4e280:	mov	w1, #0x7c7                 	// #1991
   4e284:	mov	w0, #0x7d5                 	// #2005
   4e288:	csel	w1, w0, w1, eq  // eq = none
   4e28c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e290:	tst	x0, #0x100000
   4e294:	mov	w1, #0x8d8                 	// #2264
   4e298:	mov	w0, #0x8d0                 	// #2256
   4e29c:	csel	w1, w0, w1, eq  // eq = none
   4e2a0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e2a4:	mov	w1, #0x8d9                 	// #2265
   4e2a8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e2ac:	tst	x0, #0x800000
   4e2b0:	mov	w1, #0x72d                 	// #1837
   4e2b4:	mov	w0, #0x730                 	// #1840
   4e2b8:	csel	w1, w0, w1, eq  // eq = none
   4e2bc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e2c0:	tbnz	w0, #22, 4e308 <aarch64_opcode_lookup@@Base+0x4e60>
   4e2c4:	tst	x0, #0x800000
   4e2c8:	mov	w1, #0x735                 	// #1845
   4e2cc:	mov	w0, #0x729                 	// #1833
   4e2d0:	csel	w1, w0, w1, eq  // eq = none
   4e2d4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e2d8:	mov	w1, #0x63c                 	// #1596
   4e2dc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e2e0:	tbnz	w0, #11, 4eddc <aarch64_opcode_lookup@@Base+0x5934>
   4e2e4:	tst	x0, #0x1000
   4e2e8:	mov	w1, #0x71e                 	// #1822
   4e2ec:	mov	w0, #0x5ce                 	// #1486
   4e2f0:	csel	w1, w0, w1, eq  // eq = none
   4e2f4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e2f8:	mov	w1, #0x2d9                 	// #729
   4e2fc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e300:	mov	w1, #0x38c                 	// #908
   4e304:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e308:	tst	x0, #0x800000
   4e30c:	mov	w1, #0x72c                 	// #1836
   4e310:	mov	w0, #0x72f                 	// #1839
   4e314:	csel	w1, w0, w1, eq  // eq = none
   4e318:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e31c:	mov	w1, #0x5f6                 	// #1526
   4e320:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e324:	mov	w1, #0x684                 	// #1668
   4e328:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e32c:	mov	w1, #0x903                 	// #2307
   4e330:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e334:	tst	x0, #0x80000
   4e338:	mov	w1, #0x870                 	// #2160
   4e33c:	mov	w0, #0x70c                 	// #1804
   4e340:	csel	w1, w0, w1, eq  // eq = none
   4e344:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e348:	tbnz	w0, #18, 4eb14 <aarch64_opcode_lookup@@Base+0x566c>
   4e34c:	tst	x0, #0x80000
   4e350:	mov	w1, #0x521                 	// #1313
   4e354:	mov	w0, #0x5db                 	// #1499
   4e358:	csel	w1, w0, w1, eq  // eq = none
   4e35c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e360:	tbnz	w0, #19, 4e454 <aarch64_opcode_lookup@@Base+0x4fac>
   4e364:	tbnz	w0, #20, 4eebc <aarch64_opcode_lookup@@Base+0x5a14>
   4e368:	tbnz	w0, #23, 4eea8 <aarch64_opcode_lookup@@Base+0x5a00>
   4e36c:	tst	x0, #0x20000000
   4e370:	mov	w1, #0xec                  	// #236
   4e374:	mov	w0, #0xbc                  	// #188
   4e378:	csel	w1, w0, w1, eq  // eq = none
   4e37c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e380:	tst	x0, #0x800000
   4e384:	mov	w1, #0x50f                 	// #1295
   4e388:	mov	w0, #0x6da                 	// #1754
   4e38c:	csel	w1, w0, w1, eq  // eq = none
   4e390:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e394:	mov	w1, #0x234                 	// #564
   4e398:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e39c:	ubfx	x0, x0, #30, #1
   4e3a0:	add	w1, w0, #0x36
   4e3a4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e3a8:	tbnz	w0, #19, 4e3d4 <aarch64_opcode_lookup@@Base+0x4f2c>
   4e3ac:	tbnz	w0, #20, 4eb74 <aarch64_opcode_lookup@@Base+0x56cc>
   4e3b0:	tbnz	w0, #23, 4eb38 <aarch64_opcode_lookup@@Base+0x5690>
   4e3b4:	tst	x0, #0x20000000
   4e3b8:	mov	w1, #0x207                 	// #519
   4e3bc:	mov	w0, #0x1e9                 	// #489
   4e3c0:	csel	w1, w0, w1, eq  // eq = none
   4e3c4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e3c8:	ubfx	x0, x0, #30, #1
   4e3cc:	add	w1, w0, #0x3a
   4e3d0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e3d4:	tbnz	w0, #23, 4eb4c <aarch64_opcode_lookup@@Base+0x56a4>
   4e3d8:	tst	x0, #0x20000000
   4e3dc:	mov	w1, #0x208                 	// #520
   4e3e0:	mov	w0, #0x1ea                 	// #490
   4e3e4:	csel	w1, w0, w1, eq  // eq = none
   4e3e8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e3ec:	tbnz	w0, #23, 4ed88 <aarch64_opcode_lookup@@Base+0x58e0>
   4e3f0:	tst	x0, #0x20000000
   4e3f4:	mov	w1, #0x206                 	// #518
   4e3f8:	mov	w0, #0x1e8                 	// #488
   4e3fc:	csel	w1, w0, w1, eq  // eq = none
   4e400:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e404:	mov	w1, #0x975                 	// #2421
   4e408:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e40c:	tbnz	w0, #23, 4eb60 <aarch64_opcode_lookup@@Base+0x56b8>
   4e410:	tst	x0, #0x20000000
   4e414:	mov	w1, #0xf1                  	// #241
   4e418:	mov	w0, #0xc1                  	// #193
   4e41c:	csel	w1, w0, w1, eq  // eq = none
   4e420:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e424:	mov	w1, #0x1e4                 	// #484
   4e428:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e42c:	tst	x0, #0x20000
   4e430:	mov	w1, #0x7db                 	// #2011
   4e434:	mov	w0, #0x79c                 	// #1948
   4e438:	csel	w1, w0, w1, eq  // eq = none
   4e43c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e440:	tst	x0, #0x1000
   4e444:	mov	w1, #0x8e5                 	// #2277
   4e448:	mov	w0, #0x8df                 	// #2271
   4e44c:	csel	w1, w0, w1, eq  // eq = none
   4e450:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e454:	tbnz	w0, #23, 4ee84 <aarch64_opcode_lookup@@Base+0x59dc>
   4e458:	tst	x0, #0x20000000
   4e45c:	mov	w1, #0xed                  	// #237
   4e460:	mov	w0, #0xbd                  	// #189
   4e464:	csel	w1, w0, w1, eq  // eq = none
   4e468:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e46c:	mov	w1, #0x13b                 	// #315
   4e470:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e474:	tst	x0, #0x20000000
   4e478:	mov	w1, #0x210                 	// #528
   4e47c:	mov	w0, #0x1f2                 	// #498
   4e480:	csel	w1, w0, w1, eq  // eq = none
   4e484:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e488:	mov	w1, #0x351                 	// #849
   4e48c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e490:	mov	w1, #0x95e                 	// #2398
   4e494:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e498:	tbnz	w0, #10, 4edac <aarch64_opcode_lookup@@Base+0x5904>
   4e49c:	tst	x0, #0x800
   4e4a0:	mov	w1, #0x733                 	// #1843
   4e4a4:	mov	w0, #0x731                 	// #1841
   4e4a8:	csel	w1, w0, w1, eq  // eq = none
   4e4ac:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e4b0:	mov	w1, #0x202                 	// #514
   4e4b4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e4b8:	tbz	w0, #22, 4eecc <aarch64_opcode_lookup@@Base+0x5a24>
   4e4bc:	tst	x0, #0x800000
   4e4c0:	mov	w1, #0x5ca                 	// #1482
   4e4c4:	mov	w0, #0x5cc                 	// #1484
   4e4c8:	csel	w1, w0, w1, eq  // eq = none
   4e4cc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e4d0:	tbnz	w0, #31, 4eea0 <aarch64_opcode_lookup@@Base+0x59f8>
   4e4d4:	tst	x0, #0x40000000
   4e4d8:	mov	w1, #0x42d                 	// #1069
   4e4dc:	mov	w0, #0x42a                 	// #1066
   4e4e0:	csel	w1, w0, w1, eq  // eq = none
   4e4e4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e4e8:	tst	x0, #0x1000
   4e4ec:	mov	w1, #0x847                 	// #2119
   4e4f0:	mov	w0, #0x843                 	// #2115
   4e4f4:	csel	w1, w0, w1, eq  // eq = none
   4e4f8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e4fc:	mov	w1, #0x122                 	// #290
   4e500:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e504:	tst	x0, #0x800000
   4e508:	mov	w1, #0x5fc                 	// #1532
   4e50c:	mov	w0, #0x5e7                 	// #1511
   4e510:	csel	w1, w0, w1, eq  // eq = none
   4e514:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e518:	ubfx	x0, x0, #30, #1
   4e51c:	add	w1, w0, #0x38
   4e520:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e524:	tst	x0, #0x800000
   4e528:	mov	w1, #0x6ab                 	// #1707
   4e52c:	mov	w0, #0x6a7                 	// #1703
   4e530:	csel	w1, w0, w1, eq  // eq = none
   4e534:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e538:	mov	w1, #0x811                 	// #2065
   4e53c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e540:	tst	x0, #0x20000000
   4e544:	mov	w1, #0x20a                 	// #522
   4e548:	mov	w0, #0x1ec                 	// #492
   4e54c:	csel	w1, w0, w1, eq  // eq = none
   4e550:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e554:	tst	x0, #0x80000
   4e558:	mov	w1, #0x5ae                 	// #1454
   4e55c:	mov	w0, #0x7df                 	// #2015
   4e560:	csel	w1, w0, w1, eq  // eq = none
   4e564:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e568:	tbnz	w0, #18, 4edc4 <aarch64_opcode_lookup@@Base+0x591c>
   4e56c:	tst	x0, #0x80000
   4e570:	mov	w1, #0x53f                 	// #1343
   4e574:	mov	w0, #0x7de                 	// #2014
   4e578:	csel	w1, w0, w1, eq  // eq = none
   4e57c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e580:	tbz	w0, #12, 4ec78 <aarch64_opcode_lookup@@Base+0x57d0>
   4e584:	tst	x0, #0x800000
   4e588:	mov	w1, #0x854                 	// #2132
   4e58c:	mov	w0, #0x7ff                 	// #2047
   4e590:	csel	w1, w0, w1, eq  // eq = none
   4e594:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e598:	mov	w1, #0x512                 	// #1298
   4e59c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e5a0:	mov	w1, #0x869                 	// #2153
   4e5a4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e5a8:	tbnz	w0, #22, 4e74c <aarch64_opcode_lookup@@Base+0x52a4>
   4e5ac:	tbnz	w0, #23, 4ed20 <aarch64_opcode_lookup@@Base+0x5878>
   4e5b0:	tbnz	w0, #31, 4ed18 <aarch64_opcode_lookup@@Base+0x5870>
   4e5b4:	ubfx	x0, x0, #30, #1
   4e5b8:	add	w1, w0, #0x401
   4e5bc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e5c0:	mov	w1, #0x97c                 	// #2428
   4e5c4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e5c8:	tbz	w0, #18, 4e888 <aarch64_opcode_lookup@@Base+0x53e0>
   4e5cc:	tst	x0, #0x80000
   4e5d0:	mov	w1, #0x5b3                 	// #1459
   4e5d4:	mov	w0, #0x597                 	// #1431
   4e5d8:	csel	w1, w0, w1, eq  // eq = none
   4e5dc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e5e0:	ubfx	x0, x0, #30, #1
   4e5e4:	add	w1, w0, #0xb0
   4e5e8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e5ec:	tbnz	w0, #19, 4eca8 <aarch64_opcode_lookup@@Base+0x5800>
   4e5f0:	tbz	w0, #22, 4eca0 <aarch64_opcode_lookup@@Base+0x57f8>
   4e5f4:	tst	x0, #0x800000
   4e5f8:	mov	w1, #0x7ad                 	// #1965
   4e5fc:	mov	w0, #0x7a9                 	// #1961
   4e600:	csel	w1, w0, w1, eq  // eq = none
   4e604:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e608:	tbnz	w0, #18, 4e640 <aarch64_opcode_lookup@@Base+0x5198>
   4e60c:	tbnz	w0, #19, 4ebac <aarch64_opcode_lookup@@Base+0x5704>
   4e610:	tst	x0, #0x100000
   4e614:	mov	w1, #0x7a8                 	// #1960
   4e618:	mov	w0, #0x5bc                 	// #1468
   4e61c:	csel	w1, w0, w1, eq  // eq = none
   4e620:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e624:	ubfx	x0, x0, #12, #1
   4e628:	add	w1, w0, #0x90e
   4e62c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e630:	tbnz	w0, #11, 4e65c <aarch64_opcode_lookup@@Base+0x51b4>
   4e634:	ubfx	x0, x0, #12, #1
   4e638:	add	w1, w0, #0x7e4
   4e63c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e640:	tbnz	w0, #19, 4eccc <aarch64_opcode_lookup@@Base+0x5824>
   4e644:	tbz	w0, #20, 4ecc4 <aarch64_opcode_lookup@@Base+0x581c>
   4e648:	tst	x0, #0x800000
   4e64c:	mov	w1, #0x7ae                 	// #1966
   4e650:	mov	w0, #0x7ac                 	// #1964
   4e654:	csel	w1, w0, w1, eq  // eq = none
   4e658:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e65c:	ubfx	x0, x0, #12, #1
   4e660:	add	w1, w0, #0x7e8
   4e664:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e668:	tbz	w0, #18, 4ebd0 <aarch64_opcode_lookup@@Base+0x5728>
   4e66c:	tbz	w0, #19, 4ebc8 <aarch64_opcode_lookup@@Base+0x5720>
   4e670:	tst	x0, #0x100000
   4e674:	mov	w1, #0x31d                 	// #797
   4e678:	mov	w0, #0x31b                 	// #795
   4e67c:	csel	w1, w0, w1, eq  // eq = none
   4e680:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e684:	mov	w1, #0x338                 	// #824
   4e688:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e68c:	tst	x0, #0x200
   4e690:	mov	w1, #0x6d3                 	// #1747
   4e694:	mov	w0, #0x6d9                 	// #1753
   4e698:	csel	w1, w0, w1, eq  // eq = none
   4e69c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e6a0:	mov	w1, #0x745                 	// #1861
   4e6a4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e6a8:	mov	w1, #0x509                 	// #1289
   4e6ac:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e6b0:	tbnz	w0, #31, 4ec88 <aarch64_opcode_lookup@@Base+0x57e0>
   4e6b4:	tst	x0, #0x40000000
   4e6b8:	mov	w1, #0x45d                 	// #1117
   4e6bc:	mov	w0, #0x45a                 	// #1114
   4e6c0:	csel	w1, w0, w1, eq  // eq = none
   4e6c4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e6c8:	tbnz	w0, #31, 4ec80 <aarch64_opcode_lookup@@Base+0x57d8>
   4e6cc:	tst	x0, #0x40000000
   4e6d0:	mov	w1, #0x44f                 	// #1103
   4e6d4:	mov	w0, #0x44c                 	// #1100
   4e6d8:	csel	w1, w0, w1, eq  // eq = none
   4e6dc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e6e0:	tbnz	w0, #23, 4ec00 <aarch64_opcode_lookup@@Base+0x5758>
   4e6e4:	tbnz	w0, #31, 4ebf8 <aarch64_opcode_lookup@@Base+0x5750>
   4e6e8:	tst	x0, #0x40000000
   4e6ec:	mov	w1, #0x444                 	// #1092
   4e6f0:	mov	w0, #0x441                 	// #1089
   4e6f4:	csel	w1, w0, w1, eq  // eq = none
   4e6f8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e6fc:	mov	w1, #0x8c4                 	// #2244
   4e700:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e704:	mov	w1, #0x98                  	// #152
   4e708:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e70c:	mov	w1, #0x232                 	// #562
   4e710:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e714:	tst	x0, #0x10000
   4e718:	mov	w1, #0x873                 	// #2163
   4e71c:	mov	w0, #0x807                 	// #2055
   4e720:	csel	w1, w0, w1, eq  // eq = none
   4e724:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e728:	tst	x0, #0x800000
   4e72c:	mov	w1, #0x83d                 	// #2109
   4e730:	mov	w0, #0x805                 	// #2053
   4e734:	csel	w1, w0, w1, eq  // eq = none
   4e738:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e73c:	mov	w1, #0x914                 	// #2324
   4e740:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e744:	mov	w1, #0x7b9                 	// #1977
   4e748:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e74c:	tbnz	w0, #23, 4ed60 <aarch64_opcode_lookup@@Base+0x58b8>
   4e750:	tbnz	w0, #31, 4ed58 <aarch64_opcode_lookup@@Base+0x58b0>
   4e754:	tst	x0, #0x40000000
   4e758:	mov	w1, #0x408                 	// #1032
   4e75c:	mov	w0, #0x405                 	// #1029
   4e760:	csel	w1, w0, w1, eq  // eq = none
   4e764:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e768:	tbz	w0, #18, 4ec60 <aarch64_opcode_lookup@@Base+0x57b8>
   4e76c:	tst	x0, #0x80000
   4e770:	mov	w1, #0x5bd                 	// #1469
   4e774:	mov	w0, #0x59d                 	// #1437
   4e778:	csel	w1, w0, w1, eq  // eq = none
   4e77c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e780:	mov	w1, #0x38d                 	// #909
   4e784:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e788:	tbnz	w0, #31, 4e870 <aarch64_opcode_lookup@@Base+0x53c8>
   4e78c:	ubfx	x0, x0, #30, #1
   4e790:	add	w1, w0, #0x3be
   4e794:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e798:	mov	w1, #0x96                  	// #150
   4e79c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e7a0:	tbnz	w0, #23, 4e7e8 <aarch64_opcode_lookup@@Base+0x5340>
   4e7a4:	tbnz	w0, #31, 4ec68 <aarch64_opcode_lookup@@Base+0x57c0>
   4e7a8:	tst	x0, #0x40000000
   4e7ac:	mov	w1, #0x450                 	// #1104
   4e7b0:	mov	w0, #0x44d                 	// #1101
   4e7b4:	csel	w1, w0, w1, eq  // eq = none
   4e7b8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e7bc:	tbnz	w0, #16, 4e80c <aarch64_opcode_lookup@@Base+0x5364>
   4e7c0:	tst	x0, #0x80000
   4e7c4:	mov	w1, #0x2a2                 	// #674
   4e7c8:	mov	w0, #0xa9                  	// #169
   4e7cc:	csel	w1, w0, w1, eq  // eq = none
   4e7d0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e7d4:	tst	x0, #0x100000
   4e7d8:	mov	w1, #0x85b                 	// #2139
   4e7dc:	mov	w0, #0x84d                 	// #2125
   4e7e0:	csel	w1, w0, w1, eq  // eq = none
   4e7e4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e7e8:	tbnz	w0, #31, 4e878 <aarch64_opcode_lookup@@Base+0x53d0>
   4e7ec:	tst	x0, #0x40000000
   4e7f0:	mov	w1, #0x451                 	// #1105
   4e7f4:	mov	w0, #0x44e                 	// #1102
   4e7f8:	csel	w1, w0, w1, eq  // eq = none
   4e7fc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e800:	ubfx	x0, x0, #22, #1
   4e804:	add	w1, w0, #0x895
   4e808:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e80c:	ubfx	x0, x0, #30, #1
   4e810:	add	w1, w0, #0xb4
   4e814:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e818:	ubfx	x0, x0, #30, #1
   4e81c:	add	w1, w0, #0x58
   4e820:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e824:	ubfx	x0, x0, #30, #1
   4e828:	add	w1, w0, #0x5e
   4e82c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e830:	tbnz	w0, #12, 4e860 <aarch64_opcode_lookup@@Base+0x53b8>
   4e834:	ubfx	x0, x0, #22, #1
   4e838:	add	w1, w0, #0x837
   4e83c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e840:	tbz	w0, #20, 4e868 <aarch64_opcode_lookup@@Base+0x53c0>
   4e844:	tst	x0, #0x800000
   4e848:	mov	w1, #0x716                 	// #1814
   4e84c:	mov	w0, #0x714                 	// #1812
   4e850:	csel	w1, w0, w1, eq  // eq = none
   4e854:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e858:	mov	w1, #0x762                 	// #1890
   4e85c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e860:	mov	w1, #0x95c                 	// #2396
   4e864:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e868:	mov	w1, #0x5bb                 	// #1467
   4e86c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e870:	mov	w1, #0x3c0                 	// #960
   4e874:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e878:	mov	w1, #0x454                 	// #1108
   4e87c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e880:	mov	w1, #0xa2                  	// #162
   4e884:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e888:	mov	w1, #0x56d                 	// #1389
   4e88c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e890:	mov	w1, #0x677                 	// #1655
   4e894:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e898:	mov	w1, #0x886                 	// #2182
   4e89c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e8a0:	mov	w1, #0x679                 	// #1657
   4e8a4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e8a8:	mov	w1, #0x904                 	// #2308
   4e8ac:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e8b0:	tbz	w0, #20, 4e8dc <aarch64_opcode_lookup@@Base+0x5434>
   4e8b4:	tbz	w0, #22, 4e8d4 <aarch64_opcode_lookup@@Base+0x542c>
   4e8b8:	tst	x0, #0x800000
   4e8bc:	mov	w1, #0x715                 	// #1813
   4e8c0:	mov	w0, #0x711                 	// #1809
   4e8c4:	csel	w1, w0, w1, eq  // eq = none
   4e8c8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e8cc:	mov	w1, #0x6c8                 	// #1736
   4e8d0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e8d4:	mov	w1, #0x712                 	// #1810
   4e8d8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e8dc:	mov	w1, #0x5b6                 	// #1462
   4e8e0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e8e4:	mov	w1, #0x8f3                 	// #2291
   4e8e8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e8ec:	mov	w1, #0x887                 	// #2183
   4e8f0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e8f4:	tst	x0, #0x20000000
   4e8f8:	mov	w1, #0xf6                  	// #246
   4e8fc:	mov	w0, #0xc3                  	// #195
   4e900:	csel	w1, w0, w1, eq  // eq = none
   4e904:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e908:	mov	w1, #0x4fd                 	// #1277
   4e90c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e910:	mov	w1, #0x156                 	// #342
   4e914:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e918:	mov	w1, #0x463                 	// #1123
   4e91c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e920:	mov	w1, #0x43b                 	// #1083
   4e924:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e928:	mov	w1, #0x43a                 	// #1082
   4e92c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e930:	mov	w1, #0x50d                 	// #1293
   4e934:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e938:	mov	w1, #0x46c                 	// #1132
   4e93c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e940:	mov	w1, #0x46b                 	// #1131
   4e944:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e948:	mov	w1, #0x7b0                 	// #1968
   4e94c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e950:	mov	w1, #0x702                 	// #1794
   4e954:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e958:	mov	w1, #0x7ed                 	// #2029
   4e95c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e960:	mov	w1, #0x725                 	// #1829
   4e964:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e968:	mov	w1, #0x718                 	// #1816
   4e96c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e970:	tst	x0, #0x100000
   4e974:	mov	w1, #0x319                 	// #793
   4e978:	mov	w0, #0x311                 	// #785
   4e97c:	csel	w1, w0, w1, eq  // eq = none
   4e980:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e984:	mov	w1, #0x799                 	// #1945
   4e988:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e98c:	mov	w1, #0x116                 	// #278
   4e990:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e994:	mov	w1, #0x6ce                 	// #1742
   4e998:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e99c:	mov	w1, #0x339                 	// #825
   4e9a0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e9a4:	mov	w1, #0x33d                 	// #829
   4e9a8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e9ac:	mov	w1, #0xaa                  	// #170
   4e9b0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e9b4:	mov	w1, #0x928                 	// #2344
   4e9b8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e9bc:	mov	w1, #0x813                 	// #2067
   4e9c0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e9c4:	mov	w1, #0x75c                 	// #1884
   4e9c8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e9cc:	mov	w1, #0x15e                 	// #350
   4e9d0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e9d4:	mov	w1, #0xa3                  	// #163
   4e9d8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e9dc:	tbnz	w0, #23, 4e9f8 <aarch64_opcode_lookup@@Base+0x5550>
   4e9e0:	tst	x0, #0x20000000
   4e9e4:	cset	w0, eq  // eq = none
   4e9e8:	add	w1, w0, #0x21a
   4e9ec:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e9f0:	mov	w1, #0x16c                 	// #364
   4e9f4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4e9f8:	tst	x0, #0x20000000
   4e9fc:	cset	w0, eq  // eq = none
   4ea00:	add	w1, w0, #0x220
   4ea04:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ea08:	mov	w1, #0xa4                  	// #164
   4ea0c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ea10:	mov	w1, #0x95b                 	// #2395
   4ea14:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ea18:	mov	w1, #0x417                 	// #1047
   4ea1c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ea20:	tbnz	w0, #31, 4ea98 <aarch64_opcode_lookup@@Base+0x55f0>
   4ea24:	tst	x0, #0x40000000
   4ea28:	mov	w1, #0x415                 	// #1045
   4ea2c:	mov	w0, #0x412                 	// #1042
   4ea30:	csel	w1, w0, w1, eq  // eq = none
   4ea34:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ea38:	tst	x0, #0x100000
   4ea3c:	mov	w1, #0x6dc                 	// #1756
   4ea40:	mov	w0, #0x720                 	// #1824
   4ea44:	csel	w1, w0, w1, eq  // eq = none
   4ea48:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ea4c:	mov	w1, #0x915                 	// #2325
   4ea50:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ea54:	mov	w1, #0x916                 	// #2326
   4ea58:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ea5c:	mov	w1, #0x125                 	// #293
   4ea60:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ea64:	mov	w1, #0x135                 	// #309
   4ea68:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ea6c:	mov	w1, #0x40f                 	// #1039
   4ea70:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ea74:	ubfx	x0, x0, #30, #1
   4ea78:	add	w1, w0, #0x97f
   4ea7c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ea80:	tbnz	w0, #31, 4eaa0 <aarch64_opcode_lookup@@Base+0x55f8>
   4ea84:	tst	x0, #0x40000000
   4ea88:	mov	w1, #0x413                 	// #1043
   4ea8c:	mov	w0, #0x410                 	// #1040
   4ea90:	csel	w1, w0, w1, eq  // eq = none
   4ea94:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ea98:	mov	w1, #0x418                 	// #1048
   4ea9c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eaa0:	mov	w1, #0x416                 	// #1046
   4eaa4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eaa8:	mov	w1, #0x309                 	// #777
   4eaac:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eab0:	mov	w1, #0x305                 	// #773
   4eab4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eab8:	mov	w1, #0x104                 	// #260
   4eabc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eac0:	mov	w1, #0x105                 	// #261
   4eac4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eac8:	mov	w1, #0x734                 	// #1844
   4eacc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ead0:	tst	x0, #0x100000
   4ead4:	mov	w1, #0x595                 	// #1429
   4ead8:	mov	w0, #0x58e                 	// #1422
   4eadc:	csel	w1, w0, w1, eq  // eq = none
   4eae0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eae4:	tst	x0, #0x100000
   4eae8:	mov	w1, #0x59b                 	// #1435
   4eaec:	mov	w0, #0x58d                 	// #1421
   4eaf0:	csel	w1, w0, w1, eq  // eq = none
   4eaf4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eaf8:	tst	x0, #0x20000000
   4eafc:	mov	w1, #0xfc                  	// #252
   4eb00:	mov	w0, #0xcd                  	// #205
   4eb04:	csel	w1, w0, w1, eq  // eq = none
   4eb08:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eb0c:	mov	w1, #0x88c                 	// #2188
   4eb10:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eb14:	mov	w1, #0x704                 	// #1796
   4eb18:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eb1c:	mov	w1, #0x70a                 	// #1802
   4eb20:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eb24:	tbnz	w0, #23, 4eb7c <aarch64_opcode_lookup@@Base+0x56d4>
   4eb28:	tst	x0, #0x20000000
   4eb2c:	cset	w0, eq  // eq = none
   4eb30:	add	w1, w0, #0x26
   4eb34:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eb38:	tst	x0, #0x20000000
   4eb3c:	mov	w1, #0x213                 	// #531
   4eb40:	mov	w0, #0x1f7                 	// #503
   4eb44:	csel	w1, w0, w1, eq  // eq = none
   4eb48:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eb4c:	tst	x0, #0x20000000
   4eb50:	mov	w1, #0x214                 	// #532
   4eb54:	mov	w0, #0x1f8                 	// #504
   4eb58:	csel	w1, w0, w1, eq  // eq = none
   4eb5c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eb60:	tst	x0, #0x20000000
   4eb64:	mov	w1, #0x103                 	// #259
   4eb68:	mov	w0, #0xd4                  	// #212
   4eb6c:	csel	w1, w0, w1, eq  // eq = none
   4eb70:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eb74:	mov	w1, #0x219                 	// #537
   4eb78:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eb7c:	tst	x0, #0x20000000
   4eb80:	cset	w0, eq  // eq = none
   4eb84:	add	w1, w0, #0x2a
   4eb88:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eb8c:	mov	w1, #0x33f                 	// #831
   4eb90:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eb94:	mov	w1, #0x596                 	// #1430
   4eb98:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eb9c:	mov	w1, #0x568                 	// #1384
   4eba0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eba4:	mov	w1, #0x567                 	// #1383
   4eba8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ebac:	tst	x0, #0x100000
   4ebb0:	mov	w1, #0x586                 	// #1414
   4ebb4:	mov	w0, #0x57e                 	// #1406
   4ebb8:	csel	w1, w0, w1, eq  // eq = none
   4ebbc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ebc0:	mov	w1, #0x307                 	// #775
   4ebc4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ebc8:	mov	w1, #0x30b                 	// #779
   4ebcc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ebd0:	mov	w1, #0x303                 	// #771
   4ebd4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ebd8:	mov	w1, #0x43f                 	// #1087
   4ebdc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ebe0:	tbnz	w0, #31, 4ec18 <aarch64_opcode_lookup@@Base+0x5770>
   4ebe4:	tst	x0, #0x40000000
   4ebe8:	mov	w1, #0x443                 	// #1091
   4ebec:	mov	w0, #0x440                 	// #1088
   4ebf0:	csel	w1, w0, w1, eq  // eq = none
   4ebf4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ebf8:	mov	w1, #0x447                 	// #1095
   4ebfc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ec00:	tbnz	w0, #31, 4ec20 <aarch64_opcode_lookup@@Base+0x5778>
   4ec04:	tst	x0, #0x40000000
   4ec08:	mov	w1, #0x445                 	// #1093
   4ec0c:	mov	w0, #0x442                 	// #1090
   4ec10:	csel	w1, w0, w1, eq  // eq = none
   4ec14:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ec18:	mov	w1, #0x446                 	// #1094
   4ec1c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ec20:	mov	w1, #0x448                 	// #1096
   4ec24:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ec28:	mov	w1, #0x593                 	// #1427
   4ec2c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ec30:	tst	x0, #0x20000000
   4ec34:	mov	w1, #0xfb                  	// #251
   4ec38:	mov	w0, #0xcc                  	// #204
   4ec3c:	csel	w1, w0, w1, eq  // eq = none
   4ec40:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ec44:	mov	w1, #0x8ec                 	// #2284
   4ec48:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ec4c:	tst	x0, #0x20000000
   4ec50:	mov	w1, #0x211                 	// #529
   4ec54:	mov	w0, #0x1f5                 	// #501
   4ec58:	csel	w1, w0, w1, eq  // eq = none
   4ec5c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ec60:	mov	w1, #0x575                 	// #1397
   4ec64:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ec68:	mov	w1, #0x453                 	// #1107
   4ec6c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ec70:	mov	w1, #0x55d                 	// #1373
   4ec74:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ec78:	mov	w1, #0x84a                 	// #2122
   4ec7c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ec80:	mov	w1, #0x452                 	// #1106
   4ec84:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ec88:	mov	w1, #0x460                 	// #1120
   4ec8c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ec90:	mov	w1, #0x506                 	// #1286
   4ec94:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ec98:	mov	w1, #0x44b                 	// #1099
   4ec9c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eca0:	mov	w1, #0x7aa                 	// #1962
   4eca4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eca8:	tbz	w0, #20, 4ece8 <aarch64_opcode_lookup@@Base+0x5840>
   4ecac:	tbz	w0, #22, 4ece0 <aarch64_opcode_lookup@@Base+0x5838>
   4ecb0:	tst	x0, #0x800000
   4ecb4:	mov	w1, #0x58b                 	// #1419
   4ecb8:	mov	w0, #0x587                 	// #1415
   4ecbc:	csel	w1, w0, w1, eq  // eq = none
   4ecc0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ecc4:	mov	w1, #0x5b7                 	// #1463
   4ecc8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eccc:	tst	x0, #0x800000
   4ecd0:	mov	w1, #0x58c                 	// #1420
   4ecd4:	mov	w0, #0x588                 	// #1416
   4ecd8:	csel	w1, w0, w1, eq  // eq = none
   4ecdc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ece0:	mov	w1, #0x589                 	// #1417
   4ece4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ece8:	mov	w1, #0x5c0                 	// #1472
   4ecec:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ecf0:	mov	w1, #0x345                 	// #837
   4ecf4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ecf8:	mov	w1, #0x91d                 	// #2333
   4ecfc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ed00:	mov	w1, #0x41b                 	// #1051
   4ed04:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ed08:	mov	w1, #0x6d6                 	// #1750
   4ed0c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ed10:	mov	w1, #0x515                 	// #1301
   4ed14:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ed18:	mov	w1, #0x403                 	// #1027
   4ed1c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ed20:	tbnz	w0, #31, 4ed40 <aarch64_opcode_lookup@@Base+0x5898>
   4ed24:	tst	x0, #0x40000000
   4ed28:	mov	w1, #0x407                 	// #1031
   4ed2c:	mov	w0, #0x404                 	// #1028
   4ed30:	csel	w1, w0, w1, eq  // eq = none
   4ed34:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ed38:	mov	w1, #0x59c                 	// #1436
   4ed3c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ed40:	mov	w1, #0x40a                 	// #1034
   4ed44:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ed48:	mov	w1, #0x33b                 	// #827
   4ed4c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ed50:	mov	w1, #0x553                 	// #1363
   4ed54:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ed58:	mov	w1, #0x40b                 	// #1035
   4ed5c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ed60:	tbnz	w0, #31, 4edcc <aarch64_opcode_lookup@@Base+0x5924>
   4ed64:	tst	x0, #0x40000000
   4ed68:	mov	w1, #0x409                 	// #1033
   4ed6c:	mov	w0, #0x406                 	// #1030
   4ed70:	csel	w1, w0, w1, eq  // eq = none
   4ed74:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ed78:	mov	w1, #0x45f                 	// #1119
   4ed7c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ed80:	mov	w1, #0x7ee                 	// #2030
   4ed84:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ed88:	tst	x0, #0x20000000
   4ed8c:	mov	w1, #0x212                 	// #530
   4ed90:	mov	w0, #0x1f6                 	// #502
   4ed94:	csel	w1, w0, w1, eq  // eq = none
   4ed98:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ed9c:	tst	x0, #0x20000000
   4eda0:	cset	w0, eq  // eq = none
   4eda4:	add	w1, w0, #0x21c
   4eda8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4edac:	mov	w1, #0x732                 	// #1842
   4edb0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4edb4:	mov	w1, #0x2b7                 	// #695
   4edb8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4edbc:	mov	w1, #0x968                 	// #2408
   4edc0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4edc4:	mov	w1, #0x6d4                 	// #1748
   4edc8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4edcc:	mov	w1, #0x40c                 	// #1036
   4edd0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4edd4:	mov	w1, #0x2c7                 	// #711
   4edd8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eddc:	mov	w1, #0x5cf                 	// #1487
   4ede0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ede4:	mov	w1, #0x544                 	// #1348
   4ede8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4edec:	mov	w1, #0x967                 	// #2407
   4edf0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4edf4:	tst	x0, #0x20000000
   4edf8:	mov	w1, #0x102                 	// #258
   4edfc:	mov	w0, #0xd3                  	// #211
   4ee00:	csel	w1, w0, w1, eq  // eq = none
   4ee04:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ee08:	mov	w1, #0x8c9                 	// #2249
   4ee0c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ee10:	ubfx	x0, x0, #20, #1
   4ee14:	add	w1, w0, #0x5d6
   4ee18:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ee1c:	mov	w1, #0x7dc                 	// #2012
   4ee20:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ee24:	mov	w1, #0x50c                 	// #1292
   4ee28:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ee2c:	mov	w1, #0x43c                 	// #1084
   4ee30:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ee34:	mov	w1, #0x433                 	// #1075
   4ee38:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ee3c:	mov	w1, #0x8a3                 	// #2211
   4ee40:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ee44:	mov	w1, #0x7c5                 	// #1989
   4ee48:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ee4c:	mov	w1, #0x7c6                 	// #1990
   4ee50:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ee54:	tbnz	w0, #20, 4ee74 <aarch64_opcode_lookup@@Base+0x59cc>
   4ee58:	tst	x0, #0x400000
   4ee5c:	mov	w1, #0x57c                 	// #1404
   4ee60:	mov	w0, #0x57a                 	// #1402
   4ee64:	csel	w1, w0, w1, eq  // eq = none
   4ee68:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ee6c:	mov	w1, #0x8c8                 	// #2248
   4ee70:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ee74:	mov	w1, #0x58a                 	// #1418
   4ee78:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ee7c:	mov	w1, #0x742                 	// #1858
   4ee80:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ee84:	tst	x0, #0x20000000
   4ee88:	mov	w1, #0x100                 	// #256
   4ee8c:	mov	w0, #0xd1                  	// #209
   4ee90:	csel	w1, w0, w1, eq  // eq = none
   4ee94:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ee98:	mov	w1, #0x798                 	// #1944
   4ee9c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eea0:	mov	w1, #0x430                 	// #1072
   4eea4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eea8:	tst	x0, #0x20000000
   4eeac:	mov	w1, #0xff                  	// #255
   4eeb0:	mov	w0, #0xd0                  	// #208
   4eeb4:	csel	w1, w0, w1, eq  // eq = none
   4eeb8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eebc:	mov	w1, #0x20                  	// #32
   4eec0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eec4:	mov	w1, #0x42f                 	// #1071
   4eec8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eecc:	mov	w1, #0x5d0                 	// #1488
   4eed0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eed4:	tst	x0, #0x100000
   4eed8:	mov	w1, #0x317                 	// #791
   4eedc:	mov	w0, #0x30f                 	// #783
   4eee0:	csel	w1, w0, w1, eq  // eq = none
   4eee4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eee8:	mov	w1, #0xd9                  	// #217
   4eeec:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eef0:	mov	w1, #0x2d2                 	// #722
   4eef4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eef8:	mov	w1, #0xd6                  	// #214
   4eefc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ef00:	mov	w1, #0x46a                 	// #1130
   4ef04:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ef08:	mov	w1, #0x7c8                 	// #1992
   4ef0c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ef10:	mov	w1, #0x2d1                 	// #721
   4ef14:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ef18:	mov	w1, #0x7d6                 	// #2006
   4ef1c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ef20:	ubfx	x0, x0, #22, #1
   4ef24:	add	w1, w0, #0x706
   4ef28:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ef2c:	mov	w1, #0x6e0                 	// #1760
   4ef30:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ef34:	mov	w1, #0x6ff                 	// #1791
   4ef38:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ef3c:	mov	w1, #0x45e                 	// #1118
   4ef40:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ef44:	mov	w1, #0x423                 	// #1059
   4ef48:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ef4c:	tst	x0, #0x20000000
   4ef50:	mov	w1, #0xfd                  	// #253
   4ef54:	mov	w0, #0xce                  	// #206
   4ef58:	csel	w1, w0, w1, eq  // eq = none
   4ef5c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ef60:	tst	x0, #0x800000
   4ef64:	cset	w0, eq  // eq = none
   4ef68:	add	w1, w0, #0x542
   4ef6c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ef70:	mov	w1, #0x70d                 	// #1805
   4ef74:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ef78:	tst	x0, #0x20000000
   4ef7c:	mov	w1, #0x23                  	// #35
   4ef80:	mov	w0, #0x1f                  	// #31
   4ef84:	csel	w1, w0, w1, eq  // eq = none
   4ef88:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ef8c:	mov	w1, #0x424                 	// #1060
   4ef90:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ef94:	mov	w1, #0x2d4                 	// #724
   4ef98:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4ef9c:	tst	x0, #0x20000000
   4efa0:	mov	w1, #0xfe                  	// #254
   4efa4:	mov	w0, #0xcf                  	// #207
   4efa8:	csel	w1, w0, w1, eq  // eq = none
   4efac:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4efb0:	tst	x0, #0x800000
   4efb4:	mov	w1, #0x7cf                 	// #1999
   4efb8:	mov	w0, #0x7d2                 	// #2002
   4efbc:	csel	w1, w0, w1, eq  // eq = none
   4efc0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4efc4:	mov	w1, #0x422                 	// #1058
   4efc8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4efcc:	mov	w1, #0x427                 	// #1063
   4efd0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4efd4:	tst	x0, #0x800000
   4efd8:	mov	w1, #0x7ce                 	// #1998
   4efdc:	mov	w0, #0x7d1                 	// #2001
   4efe0:	csel	w1, w0, w1, eq  // eq = none
   4efe4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4efe8:	mov	w1, #0x44                  	// #68
   4efec:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eff0:	mov	w1, #0x42e                 	// #1070
   4eff4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4eff8:	tst	x0, #0x800000
   4effc:	mov	w1, #0xcb                  	// #203
   4f000:	mov	w0, #0xb7                  	// #183
   4f004:	csel	w1, w0, w1, eq  // eq = none
   4f008:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f00c:	mov	w1, #0x457                 	// #1111
   4f010:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f014:	mov	w1, #0xd8                  	// #216
   4f018:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f01c:	mov	w1, #0x849                 	// #2121
   4f020:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f024:	mov	w1, #0x958                 	// #2392
   4f028:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f02c:	mov	w1, #0x8ba                 	// #2234
   4f030:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f034:	tst	x0, #0x20000000
   4f038:	mov	w1, #0x215                 	// #533
   4f03c:	mov	w0, #0x1f9                 	// #505
   4f040:	csel	w1, w0, w1, eq  // eq = none
   4f044:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f048:	mov	w1, #0x8e9                 	// #2281
   4f04c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f050:	mov	w1, #0x859                 	// #2137
   4f054:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f058:	tst	x0, #0x800000
   4f05c:	mov	w1, #0x5cb                 	// #1483
   4f060:	mov	w0, #0x5cd                 	// #1485
   4f064:	csel	w1, w0, w1, eq  // eq = none
   4f068:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f06c:	mov	w1, #0x741                 	// #1857
   4f070:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f074:	mov	w1, #0x740                 	// #1856
   4f078:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f07c:	mov	w1, #0x8f8                 	// #2296
   4f080:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f084:	mov	w1, #0x6e2                 	// #1762
   4f088:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f08c:	tst	x0, #0x800000
   4f090:	mov	w1, #0x73b                 	// #1851
   4f094:	mov	w0, #0x73e                 	// #1854
   4f098:	csel	w1, w0, w1, eq  // eq = none
   4f09c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f0a0:	mov	w1, #0x24                  	// #36
   4f0a4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f0a8:	tst	x0, #0x20000000
   4f0ac:	mov	w1, #0x216                 	// #534
   4f0b0:	mov	w0, #0x1fa                 	// #506
   4f0b4:	csel	w1, w0, w1, eq  // eq = none
   4f0b8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f0bc:	tst	x0, #0x20000000
   4f0c0:	cset	w0, eq  // eq = none
   4f0c4:	add	w1, w0, #0x28
   4f0c8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f0cc:	mov	w1, #0x25                  	// #37
   4f0d0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f0d4:	mov	w1, #0x935                 	// #2357
   4f0d8:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f0dc:	tst	x0, #0x800000
   4f0e0:	mov	w1, #0x73a                 	// #1850
   4f0e4:	mov	w0, #0x73d                 	// #1853
   4f0e8:	csel	w1, w0, w1, eq  // eq = none
   4f0ec:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f0f0:	mov	w1, #0xdb                  	// #219
   4f0f4:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f0f8:	mov	w1, #0x5b5                 	// #1461
   4f0fc:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f100:	mov	w1, #0x8ee                 	// #2286
   4f104:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f108:	tst	x0, #0x40000000
   4f10c:	mov	w1, #0x8d7                 	// #2263
   4f110:	mov	w0, #0x6c3                 	// #1731
   4f114:	csel	w1, w0, w1, eq  // eq = none
   4f118:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f11c:	tbnz	w0, #17, 4f17c <aarch64_opcode_lookup@@Base+0x5cd4>
   4f120:	tbz	w0, #18, 4f174 <aarch64_opcode_lookup@@Base+0x5ccc>
   4f124:	tst	x0, #0x800000
   4f128:	mov	w1, #0x584                 	// #1412
   4f12c:	mov	w0, #0x580                 	// #1408
   4f130:	csel	w1, w0, w1, eq  // eq = none
   4f134:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f138:	mov	w1, #0xac                  	// #172
   4f13c:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f140:	mov	w1, #0x3c                  	// #60
   4f144:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f148:	tst	x0, #0x40000000
   4f14c:	mov	w1, #0x8d6                 	// #2262
   4f150:	mov	w0, #0x6c0                 	// #1728
   4f154:	csel	w1, w0, w1, eq  // eq = none
   4f158:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f15c:	tbnz	w0, #22, 4f194 <aarch64_opcode_lookup@@Base+0x5cec>
   4f160:	tst	x0, #0x800000
   4f164:	mov	w1, #0x976                 	// #2422
   4f168:	mov	w0, #0x817                 	// #2071
   4f16c:	csel	w1, w0, w1, eq  // eq = none
   4f170:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f174:	mov	w1, #0x583                 	// #1411
   4f178:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f17c:	tbz	w0, #18, 4f19c <aarch64_opcode_lookup@@Base+0x5cf4>
   4f180:	tst	x0, #0x800000
   4f184:	mov	w1, #0x585                 	// #1413
   4f188:	mov	w0, #0x581                 	// #1409
   4f18c:	csel	w1, w0, w1, eq  // eq = none
   4f190:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f194:	mov	w1, #0x57d                 	// #1405
   4f198:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f19c:	mov	w1, #0x57f                 	// #1407
   4f1a0:	b	494c0 <aarch64_opcode_lookup@@Base+0x18>
   4f1a4:	nop

000000000004f1a8 <aarch64_find_next_opcode@@Base>:
   4f1a8:	adrp	x2, a6000 <aarch64_operands@@Base+0x16bd0>
   4f1ac:	mov	x3, #0x8e39                	// #36409
   4f1b0:	movk	x3, #0x38e3, lsl #16
   4f1b4:	ldr	x1, [x2, #3848]
   4f1b8:	movk	x3, #0xe38e, lsl #32
   4f1bc:	movk	x3, #0x8e38, lsl #48
   4f1c0:	sub	x1, x0, x1
   4f1c4:	asr	x1, x1, #4
   4f1c8:	mul	x1, x1, x3
   4f1cc:	cmp	w1, #0x4ca
   4f1d0:	b.gt	4f278 <aarch64_find_next_opcode@@Base+0xd0>
   4f1d4:	cmp	w1, #0x175
   4f1d8:	b.le	4f244 <aarch64_find_next_opcode@@Base+0x9c>
   4f1dc:	sub	w1, w1, #0x176
   4f1e0:	cmp	w1, #0x354
   4f1e4:	b.hi	4f23c <aarch64_find_next_opcode@@Base+0x94>  // b.pmore
   4f1e8:	adrp	x0, 64000 <fields@@Base+0xf60>
   4f1ec:	add	x0, x0, #0x5d8
   4f1f0:	ldrh	w0, [x0, w1, uxtw #1]
   4f1f4:	adr	x1, 4f200 <aarch64_find_next_opcode@@Base+0x58>
   4f1f8:	add	x0, x1, w0, sxth #2
   4f1fc:	br	x0
   4f200:	mov	x0, #0x23e0                	// #9184
   4f204:	movk	x0, #0x2, lsl #16
   4f208:	ldr	x2, [x2, #3848]
   4f20c:	add	x0, x0, x2
   4f210:	ret
   4f214:	mov	x0, #0x2110                	// #8464
   4f218:	movk	x0, #0x2, lsl #16
   4f21c:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f220:	cmp	w1, #0x65d
   4f224:	b.eq	4f41c <aarch64_find_next_opcode@@Base+0x274>  // b.none
   4f228:	b.le	4f3b0 <aarch64_find_next_opcode@@Base+0x208>
   4f22c:	mov	x0, #0x9600                	// #38400
   4f230:	cmp	w1, #0x65f
   4f234:	movk	x0, #0x3, lsl #16
   4f238:	b.eq	4f208 <aarch64_find_next_opcode@@Base+0x60>  // b.none
   4f23c:	mov	x0, #0x0                   	// #0
   4f240:	ret
   4f244:	cmp	w1, #0x8c
   4f248:	b.eq	4f450 <aarch64_find_next_opcode@@Base+0x2a8>  // b.none
   4f24c:	b.le	4f2d4 <aarch64_find_next_opcode@@Base+0x12c>
   4f250:	cmp	w1, #0x90
   4f254:	b.eq	4f428 <aarch64_find_next_opcode@@Base+0x280>  // b.none
   4f258:	b.le	4f2ac <aarch64_find_next_opcode@@Base+0x104>
   4f25c:	cmp	w1, #0x92
   4f260:	b.eq	4f3d8 <aarch64_find_next_opcode@@Base+0x230>  // b.none
   4f264:	cmp	w1, #0x93
   4f268:	mov	x0, #0xea00                	// #59904
   4f26c:	b.eq	4f208 <aarch64_find_next_opcode@@Base+0x60>  // b.none
   4f270:	mov	x0, #0x0                   	// #0
   4f274:	b	4f240 <aarch64_find_next_opcode@@Base+0x98>
   4f278:	cmp	w1, #0x67b
   4f27c:	b.eq	4f458 <aarch64_find_next_opcode@@Base+0x2b0>  // b.none
   4f280:	b.le	4f324 <aarch64_find_next_opcode@@Base+0x17c>
   4f284:	cmp	w1, #0x689
   4f288:	b.eq	4f438 <aarch64_find_next_opcode@@Base+0x290>  // b.none
   4f28c:	b.le	4f308 <aarch64_find_next_opcode@@Base+0x160>
   4f290:	cmp	w1, #0x69a
   4f294:	b.eq	4f410 <aarch64_find_next_opcode@@Base+0x268>  // b.none
   4f298:	cmp	w1, #0x69c
   4f29c:	b.ne	4f374 <aarch64_find_next_opcode@@Base+0x1cc>  // b.any
   4f2a0:	mov	x0, #0xb850                	// #47184
   4f2a4:	movk	x0, #0x3, lsl #16
   4f2a8:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f2ac:	cmp	w1, #0x8e
   4f2b0:	b.eq	4f408 <aarch64_find_next_opcode@@Base+0x260>  // b.none
   4f2b4:	cmp	w1, #0x8f
   4f2b8:	mov	x0, #0xe340                	// #58176
   4f2bc:	b.eq	4f208 <aarch64_find_next_opcode@@Base+0x60>  // b.none
   4f2c0:	cmp	w1, #0x8d
   4f2c4:	mov	x0, #0xdec0                	// #57024
   4f2c8:	b.eq	4f208 <aarch64_find_next_opcode@@Base+0x60>  // b.none
   4f2cc:	mov	x0, #0x0                   	// #0
   4f2d0:	b	4f240 <aarch64_find_next_opcode@@Base+0x98>
   4f2d4:	cmp	w1, #0x86
   4f2d8:	b.eq	4f430 <aarch64_find_next_opcode@@Base+0x288>  // b.none
   4f2dc:	b.le	4f388 <aarch64_find_next_opcode@@Base+0x1e0>
   4f2e0:	cmp	w1, #0x88
   4f2e4:	b.eq	4f3f8 <aarch64_find_next_opcode@@Base+0x250>  // b.none
   4f2e8:	cmp	w1, #0x8a
   4f2ec:	mov	x0, #0xdc80                	// #56448
   4f2f0:	b.eq	4f208 <aarch64_find_next_opcode@@Base+0x60>  // b.none
   4f2f4:	cmp	w1, #0x87
   4f2f8:	mov	x0, #0xd5c0                	// #54720
   4f2fc:	b.eq	4f208 <aarch64_find_next_opcode@@Base+0x60>  // b.none
   4f300:	mov	x0, #0x0                   	// #0
   4f304:	b	4f240 <aarch64_find_next_opcode@@Base+0x98>
   4f308:	cmp	w1, #0x67f
   4f30c:	b.eq	4f3ec <aarch64_find_next_opcode@@Base+0x244>  // b.none
   4f310:	cmp	w1, #0x687
   4f314:	b.ne	4f34c <aarch64_find_next_opcode@@Base+0x1a4>  // b.any
   4f318:	mov	x0, #0xac80                	// #44160
   4f31c:	movk	x0, #0x3, lsl #16
   4f320:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f324:	cmp	w1, #0x665
   4f328:	b.eq	4f444 <aarch64_find_next_opcode@@Base+0x29c>  // b.none
   4f32c:	b.le	4f220 <aarch64_find_next_opcode@@Base+0x78>
   4f330:	cmp	w1, #0x670
   4f334:	b.eq	4f3e0 <aarch64_find_next_opcode@@Base+0x238>  // b.none
   4f338:	cmp	w1, #0x672
   4f33c:	b.ne	4f360 <aarch64_find_next_opcode@@Base+0x1b8>  // b.any
   4f340:	mov	x0, #0xa0b0                	// #41136
   4f344:	movk	x0, #0x3, lsl #16
   4f348:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f34c:	cmp	w1, #0x67d
   4f350:	b.ne	4f23c <aarch64_find_next_opcode@@Base+0x94>  // b.any
   4f354:	mov	x0, #0xa6e0                	// #42720
   4f358:	movk	x0, #0x3, lsl #16
   4f35c:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f360:	cmp	w1, #0x66e
   4f364:	b.ne	4f23c <aarch64_find_next_opcode@@Base+0x94>  // b.any
   4f368:	mov	x0, #0x9e70                	// #40560
   4f36c:	movk	x0, #0x3, lsl #16
   4f370:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f374:	cmp	w1, #0x691
   4f378:	b.ne	4f23c <aarch64_find_next_opcode@@Base+0x94>  // b.any
   4f37c:	mov	x0, #0xb220                	// #45600
   4f380:	movk	x0, #0x3, lsl #16
   4f384:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f388:	cmp	w1, #0x10
   4f38c:	b.eq	4f400 <aarch64_find_next_opcode@@Base+0x258>  // b.none
   4f390:	cmp	w1, #0x85
   4f394:	mov	x0, #0xd260                	// #53856
   4f398:	b.eq	4f208 <aarch64_find_next_opcode@@Base+0x60>  // b.none
   4f39c:	cmp	w1, #0xc
   4f3a0:	mov	x0, #0xab0                 	// #2736
   4f3a4:	b.eq	4f208 <aarch64_find_next_opcode@@Base+0x60>  // b.none
   4f3a8:	mov	x0, #0x0                   	// #0
   4f3ac:	b	4f240 <aarch64_find_next_opcode@@Base+0x98>
   4f3b0:	cmp	w1, #0x659
   4f3b4:	b.eq	4f3cc <aarch64_find_next_opcode@@Base+0x224>  // b.none
   4f3b8:	cmp	w1, #0x65b
   4f3bc:	b.ne	4f23c <aarch64_find_next_opcode@@Base+0x94>  // b.any
   4f3c0:	mov	x0, #0x93c0                	// #37824
   4f3c4:	movk	x0, #0x3, lsl #16
   4f3c8:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f3cc:	mov	x0, #0x92a0                	// #37536
   4f3d0:	movk	x0, #0x3, lsl #16
   4f3d4:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f3d8:	mov	x0, #0x52b0                	// #21168
   4f3dc:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f3e0:	mov	x0, #0x9f90                	// #40848
   4f3e4:	movk	x0, #0x3, lsl #16
   4f3e8:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f3ec:	mov	x0, #0xa800                	// #43008
   4f3f0:	movk	x0, #0x3, lsl #16
   4f3f4:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f3f8:	mov	x0, #0xd800                	// #55296
   4f3fc:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f400:	mov	x0, #0xb40                 	// #2880
   4f404:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f408:	mov	x0, #0xdf50                	// #57168
   4f40c:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f410:	mov	x0, #0xb730                	// #46896
   4f414:	movk	x0, #0x3, lsl #16
   4f418:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f41c:	mov	x0, #0x94e0                	// #38112
   4f420:	movk	x0, #0x3, lsl #16
   4f424:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f428:	mov	x0, #0xe580                	// #58752
   4f42c:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f430:	mov	x0, #0xd2f0                	// #54000
   4f434:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f438:	mov	x0, #0xada0                	// #44448
   4f43c:	movk	x0, #0x3, lsl #16
   4f440:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f444:	mov	x0, #0x9960                	// #39264
   4f448:	movk	x0, #0x3, lsl #16
   4f44c:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f450:	mov	x0, #0xdda0                	// #56736
   4f454:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f458:	mov	x0, #0xa5c0                	// #42432
   4f45c:	movk	x0, #0x3, lsl #16
   4f460:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f464:	mov	x0, #0xb230                	// #45616
   4f468:	movk	x0, #0x2, lsl #16
   4f46c:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f470:	mov	x0, #0x4060                	// #16480
   4f474:	movk	x0, #0x5, lsl #16
   4f478:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f47c:	mov	x0, #0xb110                	// #45328
   4f480:	movk	x0, #0x2, lsl #16
   4f484:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f488:	mov	x0, #0xb080                	// #45184
   4f48c:	movk	x0, #0x2, lsl #16
   4f490:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f494:	mov	x0, #0xac00                	// #44032
   4f498:	movk	x0, #0x2, lsl #16
   4f49c:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f4a0:	mov	x0, #0xab70                	// #43888
   4f4a4:	movk	x0, #0x2, lsl #16
   4f4a8:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f4ac:	mov	x0, #0xaae0                	// #43744
   4f4b0:	movk	x0, #0x2, lsl #16
   4f4b4:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f4b8:	mov	x0, #0xaa50                	// #43600
   4f4bc:	movk	x0, #0x2, lsl #16
   4f4c0:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f4c4:	mov	x0, #0xa8a0                	// #43168
   4f4c8:	movk	x0, #0x2, lsl #16
   4f4cc:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f4d0:	mov	x0, #0xa810                	// #43024
   4f4d4:	movk	x0, #0x2, lsl #16
   4f4d8:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f4dc:	mov	x0, #0x9f10                	// #40720
   4f4e0:	movk	x0, #0x2, lsl #16
   4f4e4:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f4e8:	mov	x0, #0xb1a0                	// #45472
   4f4ec:	movk	x0, #0x2, lsl #16
   4f4f0:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f4f4:	mov	x0, #0x9e80                	// #40576
   4f4f8:	movk	x0, #0x2, lsl #16
   4f4fc:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f500:	mov	x0, #0x9d60                	// #40288
   4f504:	movk	x0, #0x2, lsl #16
   4f508:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f50c:	mov	x0, #0x2470                	// #9328
   4f510:	movk	x0, #0x2, lsl #16
   4f514:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f518:	mov	x0, #0xe840                	// #59456
   4f51c:	movk	x0, #0x1, lsl #16
   4f520:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f524:	mov	x0, #0xe720                	// #59168
   4f528:	movk	x0, #0x1, lsl #16
   4f52c:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f530:	mov	x0, #0xe600                	// #58880
   4f534:	movk	x0, #0x1, lsl #16
   4f538:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f53c:	mov	x0, #0xe4e0                	// #58592
   4f540:	movk	x0, #0x1, lsl #16
   4f544:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f548:	mov	x0, #0xe3c0                	// #58304
   4f54c:	movk	x0, #0x1, lsl #16
   4f550:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f554:	mov	x0, #0xe2a0                	// #58016
   4f558:	movk	x0, #0x1, lsl #16
   4f55c:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f560:	mov	x0, #0xe180                	// #57728
   4f564:	movk	x0, #0x1, lsl #16
   4f568:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f56c:	mov	x0, #0xe060                	// #57440
   4f570:	movk	x0, #0x1, lsl #16
   4f574:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f578:	mov	x0, #0xdf40                	// #57152
   4f57c:	movk	x0, #0x1, lsl #16
   4f580:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f584:	mov	x0, #0xde20                	// #56864
   4f588:	movk	x0, #0x1, lsl #16
   4f58c:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f590:	mov	x0, #0xdd00                	// #56576
   4f594:	movk	x0, #0x1, lsl #16
   4f598:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f59c:	mov	x0, #0xdbe0                	// #56288
   4f5a0:	movk	x0, #0x1, lsl #16
   4f5a4:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f5a8:	mov	x0, #0xdac0                	// #56000
   4f5ac:	movk	x0, #0x1, lsl #16
   4f5b0:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f5b4:	mov	x0, #0xd9a0                	// #55712
   4f5b8:	movk	x0, #0x1, lsl #16
   4f5bc:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f5c0:	mov	x0, #0xd880                	// #55424
   4f5c4:	movk	x0, #0x1, lsl #16
   4f5c8:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f5cc:	mov	x0, #0xd760                	// #55136
   4f5d0:	movk	x0, #0x1, lsl #16
   4f5d4:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f5d8:	mov	x0, #0xd640                	// #54848
   4f5dc:	movk	x0, #0x1, lsl #16
   4f5e0:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f5e4:	mov	x0, #0xd520                	// #54560
   4f5e8:	movk	x0, #0x1, lsl #16
   4f5ec:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f5f0:	mov	x0, #0xd400                	// #54272
   4f5f4:	movk	x0, #0x1, lsl #16
   4f5f8:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f5fc:	mov	x0, #0xd2e0                	// #53984
   4f600:	movk	x0, #0x1, lsl #16
   4f604:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f608:	mov	x0, #0xd1c0                	// #53696
   4f60c:	movk	x0, #0x1, lsl #16
   4f610:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f614:	mov	x0, #0xd0a0                	// #53408
   4f618:	movk	x0, #0x1, lsl #16
   4f61c:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f620:	mov	x0, #0x5890                	// #22672
   4f624:	movk	x0, #0x5, lsl #16
   4f628:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f62c:	mov	x0, #0xcef0                	// #52976
   4f630:	movk	x0, #0x1, lsl #16
   4f634:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f638:	mov	x0, #0xcdd0                	// #52688
   4f63c:	movk	x0, #0x1, lsl #16
   4f640:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f644:	mov	x0, #0xccb0                	// #52400
   4f648:	movk	x0, #0x1, lsl #16
   4f64c:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f650:	mov	x0, #0xcb90                	// #52112
   4f654:	movk	x0, #0x1, lsl #16
   4f658:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f65c:	mov	x0, #0x9cd0                	// #40144
   4f660:	movk	x0, #0x2, lsl #16
   4f664:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f668:	mov	x0, #0xc830                	// #51248
   4f66c:	movk	x0, #0x1, lsl #16
   4f670:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f674:	mov	x0, #0xc710                	// #50960
   4f678:	movk	x0, #0x1, lsl #16
   4f67c:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f680:	mov	x0, #0xc5f0                	// #50672
   4f684:	movk	x0, #0x1, lsl #16
   4f688:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f68c:	mov	x0, #0xc4d0                	// #50384
   4f690:	movk	x0, #0x1, lsl #16
   4f694:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f698:	mov	x0, #0xc3b0                	// #50096
   4f69c:	movk	x0, #0x1, lsl #16
   4f6a0:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f6a4:	mov	x0, #0xc290                	// #49808
   4f6a8:	movk	x0, #0x1, lsl #16
   4f6ac:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f6b0:	mov	x0, #0xc170                	// #49520
   4f6b4:	movk	x0, #0x1, lsl #16
   4f6b8:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f6bc:	mov	x0, #0xbea0                	// #48800
   4f6c0:	movk	x0, #0x1, lsl #16
   4f6c4:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f6c8:	mov	x0, #0xbd80                	// #48512
   4f6cc:	movk	x0, #0x1, lsl #16
   4f6d0:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f6d4:	mov	x0, #0xbc60                	// #48224
   4f6d8:	movk	x0, #0x1, lsl #16
   4f6dc:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f6e0:	mov	x0, #0xbb40                	// #47936
   4f6e4:	movk	x0, #0x1, lsl #16
   4f6e8:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f6ec:	mov	x0, #0xba20                	// #47648
   4f6f0:	movk	x0, #0x1, lsl #16
   4f6f4:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f6f8:	mov	x0, #0xb900                	// #47360
   4f6fc:	movk	x0, #0x1, lsl #16
   4f700:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f704:	mov	x0, #0xb7e0                	// #47072
   4f708:	movk	x0, #0x1, lsl #16
   4f70c:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f710:	mov	x0, #0xb6c0                	// #46784
   4f714:	movk	x0, #0x1, lsl #16
   4f718:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f71c:	mov	x0, #0xb5a0                	// #46496
   4f720:	movk	x0, #0x1, lsl #16
   4f724:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f728:	mov	x0, #0xb480                	// #46208
   4f72c:	movk	x0, #0x1, lsl #16
   4f730:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f734:	mov	x0, #0xb360                	// #45920
   4f738:	movk	x0, #0x1, lsl #16
   4f73c:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f740:	mov	x0, #0xb240                	// #45632
   4f744:	movk	x0, #0x1, lsl #16
   4f748:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f74c:	mov	x0, #0xb120                	// #45344
   4f750:	movk	x0, #0x1, lsl #16
   4f754:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f758:	mov	x0, #0xb000                	// #45056
   4f75c:	movk	x0, #0x1, lsl #16
   4f760:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f764:	mov	x0, #0xaee0                	// #44768
   4f768:	movk	x0, #0x1, lsl #16
   4f76c:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f770:	mov	x0, #0xadc0                	// #44480
   4f774:	movk	x0, #0x1, lsl #16
   4f778:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f77c:	mov	x0, #0xaca0                	// #44192
   4f780:	movk	x0, #0x1, lsl #16
   4f784:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f788:	mov	x0, #0xab80                	// #43904
   4f78c:	movk	x0, #0x1, lsl #16
   4f790:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f794:	mov	x0, #0x5b10                	// #23312
   4f798:	movk	x0, #0x1, lsl #16
   4f79c:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f7a0:	mov	x0, #0x59f0                	// #23024
   4f7a4:	movk	x0, #0x1, lsl #16
   4f7a8:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f7ac:	mov	x0, #0x5210                	// #21008
   4f7b0:	movk	x0, #0x1, lsl #16
   4f7b4:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f7b8:	mov	x0, #0x50f0                	// #20720
   4f7bc:	movk	x0, #0x1, lsl #16
   4f7c0:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f7c4:	mov	x0, #0xd70                 	// #3440
   4f7c8:	movk	x0, #0x1, lsl #16
   4f7cc:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f7d0:	mov	x0, #0xce0                 	// #3296
   4f7d4:	movk	x0, #0x1, lsl #16
   4f7d8:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f7dc:	mov	x0, #0xb30                 	// #2864
   4f7e0:	movk	x0, #0x1, lsl #16
   4f7e4:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f7e8:	mov	x0, #0xaa0                 	// #2720
   4f7ec:	movk	x0, #0x1, lsl #16
   4f7f0:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f7f4:	mov	x0, #0x6b0                 	// #1712
   4f7f8:	movk	x0, #0x1, lsl #16
   4f7fc:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f800:	mov	x0, #0x620                 	// #1568
   4f804:	movk	x0, #0x1, lsl #16
   4f808:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f80c:	mov	x0, #0x470                 	// #1136
   4f810:	movk	x0, #0x1, lsl #16
   4f814:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f818:	mov	x0, #0x3e0                 	// #992
   4f81c:	movk	x0, #0x1, lsl #16
   4f820:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f824:	mov	x0, #0xfff0                	// #65520
   4f828:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f82c:	mov	x0, #0xff60                	// #65376
   4f830:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f834:	mov	x0, #0xfed0                	// #65232
   4f838:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f83c:	mov	x0, #0xfdb0                	// #64944
   4f840:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f844:	mov	x0, #0xfd20                	// #64800
   4f848:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f84c:	mov	x0, #0xfc90                	// #64656
   4f850:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f854:	mov	x0, #0xfb70                	// #64368
   4f858:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f85c:	mov	x0, #0xfae0                	// #64224
   4f860:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f864:	mov	x0, #0xfa50                	// #64080
   4f868:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f86c:	mov	x0, #0xf930                	// #63792
   4f870:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f874:	mov	x0, #0xf8a0                	// #63648
   4f878:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f87c:	mov	x0, #0xf810                	// #63504
   4f880:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f884:	mov	x0, #0xebb0                	// #60336
   4f888:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f88c:	mov	x0, #0xea90                	// #60048
   4f890:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f894:	mov	x0, #0xe8e0                	// #59616
   4f898:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f89c:	mov	x0, #0xe610                	// #58896
   4f8a0:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f8a4:	mov	x0, #0xe7c0                	// #59328
   4f8a8:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f8ac:	mov	x0, #0xe3d0                	// #58320
   4f8b0:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f8b4:	mov	x0, #0xe2b0                	// #58032
   4f8b8:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f8bc:	mov	x0, #0xe220                	// #57888
   4f8c0:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f8c4:	mov	x0, #0xe190                	// #57744
   4f8c8:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f8cc:	mov	x0, #0xe100                	// #57600
   4f8d0:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f8d4:	mov	x0, #0xe070                	// #57456
   4f8d8:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f8dc:	mov	x0, #0xdfe0                	// #57312
   4f8e0:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f8e4:	mov	x0, #0xde30                	// #56880
   4f8e8:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f8ec:	mov	x0, #0xdd10                	// #56592
   4f8f0:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f8f4:	mov	x0, #0xdb60                	// #56160
   4f8f8:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f8fc:	mov	x0, #0xd890                	// #55440
   4f900:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f904:	mov	x0, #0xda40                	// #55872
   4f908:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f90c:	mov	x0, #0xd650                	// #54864
   4f910:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f914:	mov	x0, #0xd530                	// #54576
   4f918:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f91c:	mov	x0, #0xd4a0                	// #54432
   4f920:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f924:	mov	x0, #0xd410                	// #54288
   4f928:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f92c:	mov	x0, #0xd380                	// #54144
   4f930:	b	4f208 <aarch64_find_next_opcode@@Base+0x60>
   4f934:	nop

000000000004f938 <aarch64_find_alias_opcode@@Base>:
   4f938:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   4f93c:	mov	x2, #0x8e39                	// #36409
   4f940:	movk	x2, #0x38e3, lsl #16
   4f944:	ldr	x3, [x1, #3848]
   4f948:	movk	x2, #0xe38e, lsl #32
   4f94c:	movk	x2, #0x8e38, lsl #48
   4f950:	sub	x0, x0, x3
   4f954:	asr	x0, x0, #4
   4f958:	mul	x0, x0, x2
   4f95c:	cmp	w0, #0x58f
   4f960:	b.gt	4f9ec <aarch64_find_alias_opcode@@Base+0xb4>
   4f964:	cmp	w0, #0x269
   4f968:	b.le	4f9b0 <aarch64_find_alias_opcode@@Base+0x78>
   4f96c:	sub	w0, w0, #0x26a
   4f970:	cmp	w0, #0x325
   4f974:	b.hi	4f9e4 <aarch64_find_alias_opcode@@Base+0xac>  // b.pmore
   4f978:	adrp	x2, 64000 <fields@@Base+0xf60>
   4f97c:	add	x2, x2, #0xc84
   4f980:	ldrh	w0, [x2, w0, uxtw #1]
   4f984:	adr	x2, 4f990 <aarch64_find_alias_opcode@@Base+0x58>
   4f988:	add	x0, x2, w0, sxth #2
   4f98c:	br	x0
   4f990:	mov	x0, #0x60b0                	// #24752
   4f994:	movk	x0, #0x1, lsl #16
   4f998:	ldr	x1, [x1, #3848]
   4f99c:	add	x0, x0, x1
   4f9a0:	ret
   4f9a4:	mov	x0, #0x5e70                	// #24176
   4f9a8:	movk	x0, #0x1, lsl #16
   4f9ac:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4f9b0:	cmp	w0, #0x98
   4f9b4:	b.eq	50048 <aarch64_find_alias_opcode@@Base+0x710>  // b.none
   4f9b8:	b.le	4fa6c <aarch64_find_alias_opcode@@Base+0x134>
   4f9bc:	cmp	w0, #0x184
   4f9c0:	b.eq	4fb94 <aarch64_find_alias_opcode@@Base+0x25c>  // b.none
   4f9c4:	b.le	4fa4c <aarch64_find_alias_opcode@@Base+0x114>
   4f9c8:	cmp	w0, #0x19e
   4f9cc:	b.eq	4fb78 <aarch64_find_alias_opcode@@Base+0x240>  // b.none
   4f9d0:	b.le	4fa14 <aarch64_find_alias_opcode@@Base+0xdc>
   4f9d4:	cmp	w0, #0x217
   4f9d8:	mov	x0, #0x2d80                	// #11648
   4f9dc:	movk	x0, #0x1, lsl #16
   4f9e0:	b.eq	4f998 <aarch64_find_alias_opcode@@Base+0x60>  // b.none
   4f9e4:	mov	x0, #0x0                   	// #0
   4f9e8:	ret
   4f9ec:	cmp	w0, #0x6de
   4f9f0:	b.eq	4fb88 <aarch64_find_alias_opcode@@Base+0x250>  // b.none
   4f9f4:	b.le	4fa30 <aarch64_find_alias_opcode@@Base+0xf8>
   4f9f8:	cmp	w0, #0x71c
   4f9fc:	b.eq	4fb50 <aarch64_find_alias_opcode@@Base+0x218>  // b.none
   4fa00:	cmp	w0, #0x71d
   4fa04:	b.ne	4f9e4 <aarch64_find_alias_opcode@@Base+0xac>  // b.any
   4fa08:	mov	x0, #0xc8b0                	// #51376
   4fa0c:	movk	x0, #0x2, lsl #16
   4fa10:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fa14:	cmp	w0, #0x186
   4fa18:	b.eq	4fb48 <aarch64_find_alias_opcode@@Base+0x210>  // b.none
   4fa1c:	cmp	w0, #0x19c
   4fa20:	mov	x0, #0xe850                	// #59472
   4fa24:	b.eq	4f998 <aarch64_find_alias_opcode@@Base+0x60>  // b.none
   4fa28:	mov	x0, #0x0                   	// #0
   4fa2c:	b	4f9e8 <aarch64_find_alias_opcode@@Base+0xb0>
   4fa30:	cmp	w0, #0x6db
   4fa34:	b.eq	4fb5c <aarch64_find_alias_opcode@@Base+0x224>  // b.none
   4fa38:	cmp	w0, #0x6dd
   4fa3c:	b.ne	4fa98 <aarch64_find_alias_opcode@@Base+0x160>  // b.any
   4fa40:	mov	x0, #0xc430                	// #50224
   4fa44:	movk	x0, #0x2, lsl #16
   4fa48:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fa4c:	cmp	w0, #0xf2
   4fa50:	b.eq	4fb68 <aarch64_find_alias_opcode@@Base+0x230>  // b.none
   4fa54:	b.le	4faac <aarch64_find_alias_opcode@@Base+0x174>
   4fa58:	cmp	w0, #0x13d
   4fa5c:	mov	x0, #0xb2e0                	// #45792
   4fa60:	b.eq	4f998 <aarch64_find_alias_opcode@@Base+0x60>  // b.none
   4fa64:	mov	x0, #0x0                   	// #0
   4fa68:	b	4f9e8 <aarch64_find_alias_opcode@@Base+0xb0>
   4fa6c:	cmp	w0, #0xe
   4fa70:	b.eq	4fb9c <aarch64_find_alias_opcode@@Base+0x264>  // b.none
   4fa74:	b.le	4fae4 <aarch64_find_alias_opcode@@Base+0x1ac>
   4fa78:	cmp	w0, #0x18
   4fa7c:	b.eq	4fb70 <aarch64_find_alias_opcode@@Base+0x238>  // b.none
   4fa80:	b.le	4fac8 <aarch64_find_alias_opcode@@Base+0x190>
   4fa84:	cmp	w0, #0x1a
   4fa88:	mov	x0, #0xf30                 	// #3888
   4fa8c:	b.eq	4f998 <aarch64_find_alias_opcode@@Base+0x60>  // b.none
   4fa90:	mov	x0, #0x0                   	// #0
   4fa94:	b	4f9e8 <aarch64_find_alias_opcode@@Base+0xb0>
   4fa98:	cmp	w0, #0x6da
   4fa9c:	b.ne	4f9e4 <aarch64_find_alias_opcode@@Base+0xac>  // b.any
   4faa0:	mov	x0, #0xc280                	// #49792
   4faa4:	movk	x0, #0x2, lsl #16
   4faa8:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4faac:	cmp	w0, #0x9a
   4fab0:	b.eq	4fb40 <aarch64_find_alias_opcode@@Base+0x208>  // b.none
   4fab4:	cmp	w0, #0x9c
   4fab8:	mov	x0, #0x5850                	// #22608
   4fabc:	b.eq	4f998 <aarch64_find_alias_opcode@@Base+0x60>  // b.none
   4fac0:	mov	x0, #0x0                   	// #0
   4fac4:	b	4f9e8 <aarch64_find_alias_opcode@@Base+0xb0>
   4fac8:	cmp	w0, #0x11
   4facc:	b.eq	4fb38 <aarch64_find_alias_opcode@@Base+0x200>  // b.none
   4fad0:	cmp	w0, #0x16
   4fad4:	mov	x0, #0xcf0                 	// #3312
   4fad8:	b.eq	4f998 <aarch64_find_alias_opcode@@Base+0x60>  // b.none
   4fadc:	mov	x0, #0x0                   	// #0
   4fae0:	b	4f9e8 <aarch64_find_alias_opcode@@Base+0xb0>
   4fae4:	cmp	w0, #0x7
   4fae8:	b.eq	4fb80 <aarch64_find_alias_opcode@@Base+0x248>  // b.none
   4faec:	b.le	4fb0c <aarch64_find_alias_opcode@@Base+0x1d4>
   4faf0:	cmp	w0, #0xa
   4faf4:	b.eq	4fb30 <aarch64_find_alias_opcode@@Base+0x1f8>  // b.none
   4faf8:	cmp	w0, #0xc
   4fafc:	mov	x0, #0x750                 	// #1872
   4fb00:	b.eq	4f998 <aarch64_find_alias_opcode@@Base+0x60>  // b.none
   4fb04:	mov	x0, #0x0                   	// #0
   4fb08:	b	4f9e8 <aarch64_find_alias_opcode@@Base+0xb0>
   4fb0c:	cmp	w0, #0x2
   4fb10:	b.eq	4fb28 <aarch64_find_alias_opcode@@Base+0x1f0>  // b.none
   4fb14:	cmp	w0, #0x4
   4fb18:	mov	x0, #0x2d0                 	// #720
   4fb1c:	b.eq	4f998 <aarch64_find_alias_opcode@@Base+0x60>  // b.none
   4fb20:	mov	x0, #0x0                   	// #0
   4fb24:	b	4f9e8 <aarch64_find_alias_opcode@@Base+0xb0>
   4fb28:	mov	x0, #0x1b0                 	// #432
   4fb2c:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fb30:	mov	x0, #0x630                 	// #1584
   4fb34:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fb38:	mov	x0, #0xa20                 	// #2592
   4fb3c:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fb40:	mov	x0, #0x5730                	// #22320
   4fb44:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fb48:	mov	x0, #0xdbf0                	// #56304
   4fb4c:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fb50:	mov	x0, #0xc700                	// #50944
   4fb54:	movk	x0, #0x2, lsl #16
   4fb58:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fb5c:	mov	x0, #0x7e50                	// #32336
   4fb60:	movk	x0, #0x4, lsl #16
   4fb64:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fb68:	mov	x0, #0x88b0                	// #34992
   4fb6c:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fb70:	mov	x0, #0xe10                 	// #3600
   4fb74:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fb78:	mov	x0, #0xe970                	// #59760
   4fb7c:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fb80:	mov	x0, #0x480                 	// #1152
   4fb84:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fb88:	mov	x0, #0xc9d0                	// #51664
   4fb8c:	movk	x0, #0x2, lsl #16
   4fb90:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fb94:	mov	x0, #0xdad0                	// #56016
   4fb98:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fb9c:	mov	x0, #0x870                 	// #2160
   4fba0:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fba4:	mov	x0, #0xc160                	// #49504
   4fba8:	movk	x0, #0x2, lsl #16
   4fbac:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fbb0:	mov	x0, #0xc1f0                	// #49648
   4fbb4:	movk	x0, #0x2, lsl #16
   4fbb8:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fbbc:	mov	x0, #0x7ca0                	// #31904
   4fbc0:	movk	x0, #0x4, lsl #16
   4fbc4:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fbc8:	mov	x0, #0x7c10                	// #31760
   4fbcc:	movk	x0, #0x4, lsl #16
   4fbd0:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fbd4:	mov	x0, #0x7b80                	// #31616
   4fbd8:	movk	x0, #0x4, lsl #16
   4fbdc:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fbe0:	mov	x0, #0x7af0                	// #31472
   4fbe4:	movk	x0, #0x4, lsl #16
   4fbe8:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fbec:	mov	x0, #0xcb80                	// #52096
   4fbf0:	movk	x0, #0x2, lsl #16
   4fbf4:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fbf8:	mov	x0, #0xcaf0                	// #51952
   4fbfc:	movk	x0, #0x2, lsl #16
   4fc00:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fc04:	mov	x0, #0x7a60                	// #31328
   4fc08:	movk	x0, #0x4, lsl #16
   4fc0c:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fc10:	mov	x0, #0xc550                	// #50512
   4fc14:	movk	x0, #0x2, lsl #16
   4fc18:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fc1c:	mov	x0, #0x7d30                	// #32048
   4fc20:	movk	x0, #0x4, lsl #16
   4fc24:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fc28:	mov	x0, #0xc4c0                	// #50368
   4fc2c:	movk	x0, #0x2, lsl #16
   4fc30:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fc34:	mov	x0, #0xc3a0                	// #50080
   4fc38:	movk	x0, #0x2, lsl #16
   4fc3c:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fc40:	mov	x0, #0x7dc0                	// #32192
   4fc44:	movk	x0, #0x4, lsl #16
   4fc48:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fc4c:	mov	x0, #0xc790                	// #51088
   4fc50:	movk	x0, #0x2, lsl #16
   4fc54:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fc58:	mov	x0, #0xc670                	// #50800
   4fc5c:	movk	x0, #0x2, lsl #16
   4fc60:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fc64:	mov	x0, #0x7940                	// #31040
   4fc68:	movk	x0, #0x4, lsl #16
   4fc6c:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fc70:	mov	x0, #0x78b0                	// #30896
   4fc74:	movk	x0, #0x4, lsl #16
   4fc78:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fc7c:	mov	x0, #0x79d0                	// #31184
   4fc80:	movk	x0, #0x4, lsl #16
   4fc84:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fc88:	mov	x0, #0x7820                	// #30752
   4fc8c:	movk	x0, #0x4, lsl #16
   4fc90:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fc94:	mov	x0, #0xca60                	// #51808
   4fc98:	movk	x0, #0x2, lsl #16
   4fc9c:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fca0:	mov	x0, #0xc820                	// #51232
   4fca4:	movk	x0, #0x2, lsl #16
   4fca8:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fcac:	mov	x0, #0x7790                	// #30608
   4fcb0:	movk	x0, #0x4, lsl #16
   4fcb4:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fcb8:	mov	x0, #0xaff0                	// #45040
   4fcbc:	movk	x0, #0x2, lsl #16
   4fcc0:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fcc4:	mov	x0, #0xa9c0                	// #43456
   4fcc8:	movk	x0, #0x2, lsl #16
   4fccc:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fcd0:	mov	x0, #0xb6b0                	// #46768
   4fcd4:	movk	x0, #0x2, lsl #16
   4fcd8:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fcdc:	mov	x0, #0x9a00                	// #39424
   4fce0:	movk	x0, #0x2, lsl #16
   4fce4:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fce8:	mov	x0, #0x98e0                	// #39136
   4fcec:	movk	x0, #0x2, lsl #16
   4fcf0:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fcf4:	mov	x0, #0x97c0                	// #38848
   4fcf8:	movk	x0, #0x2, lsl #16
   4fcfc:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fd00:	mov	x0, #0x9730                	// #38704
   4fd04:	movk	x0, #0x2, lsl #16
   4fd08:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fd0c:	mov	x0, #0x96a0                	// #38560
   4fd10:	movk	x0, #0x2, lsl #16
   4fd14:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fd18:	mov	x0, #0x9610                	// #38416
   4fd1c:	movk	x0, #0x2, lsl #16
   4fd20:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fd24:	mov	x0, #0x9580                	// #38272
   4fd28:	movk	x0, #0x2, lsl #16
   4fd2c:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fd30:	mov	x0, #0x94f0                	// #38128
   4fd34:	movk	x0, #0x2, lsl #16
   4fd38:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fd3c:	mov	x0, #0x9460                	// #37984
   4fd40:	movk	x0, #0x2, lsl #16
   4fd44:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fd48:	mov	x0, #0x93d0                	// #37840
   4fd4c:	movk	x0, #0x2, lsl #16
   4fd50:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fd54:	mov	x0, #0x9340                	// #37696
   4fd58:	movk	x0, #0x2, lsl #16
   4fd5c:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fd60:	mov	x0, #0x92b0                	// #37552
   4fd64:	movk	x0, #0x2, lsl #16
   4fd68:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fd6c:	mov	x0, #0x9220                	// #37408
   4fd70:	movk	x0, #0x2, lsl #16
   4fd74:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fd78:	mov	x0, #0x9190                	// #37264
   4fd7c:	movk	x0, #0x2, lsl #16
   4fd80:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fd84:	mov	x0, #0x9100                	// #37120
   4fd88:	movk	x0, #0x2, lsl #16
   4fd8c:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fd90:	mov	x0, #0x9070                	// #36976
   4fd94:	movk	x0, #0x2, lsl #16
   4fd98:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fd9c:	mov	x0, #0x8fe0                	// #36832
   4fda0:	movk	x0, #0x2, lsl #16
   4fda4:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fda8:	mov	x0, #0x8f50                	// #36688
   4fdac:	movk	x0, #0x2, lsl #16
   4fdb0:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fdb4:	mov	x0, #0x8ec0                	// #36544
   4fdb8:	movk	x0, #0x2, lsl #16
   4fdbc:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fdc0:	mov	x0, #0x8e30                	// #36400
   4fdc4:	movk	x0, #0x2, lsl #16
   4fdc8:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fdcc:	mov	x0, #0x8da0                	// #36256
   4fdd0:	movk	x0, #0x2, lsl #16
   4fdd4:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fdd8:	mov	x0, #0x8d10                	// #36112
   4fddc:	movk	x0, #0x2, lsl #16
   4fde0:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fde4:	mov	x0, #0x8c80                	// #35968
   4fde8:	movk	x0, #0x2, lsl #16
   4fdec:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fdf0:	mov	x0, #0x8bf0                	// #35824
   4fdf4:	movk	x0, #0x2, lsl #16
   4fdf8:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fdfc:	mov	x0, #0x8b60                	// #35680
   4fe00:	movk	x0, #0x2, lsl #16
   4fe04:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fe08:	mov	x0, #0x8ad0                	// #35536
   4fe0c:	movk	x0, #0x2, lsl #16
   4fe10:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fe14:	mov	x0, #0x8a40                	// #35392
   4fe18:	movk	x0, #0x2, lsl #16
   4fe1c:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fe20:	mov	x0, #0x89b0                	// #35248
   4fe24:	movk	x0, #0x2, lsl #16
   4fe28:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fe2c:	mov	x0, #0x8920                	// #35104
   4fe30:	movk	x0, #0x2, lsl #16
   4fe34:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fe38:	mov	x0, #0x8890                	// #34960
   4fe3c:	movk	x0, #0x2, lsl #16
   4fe40:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fe44:	mov	x0, #0x8800                	// #34816
   4fe48:	movk	x0, #0x2, lsl #16
   4fe4c:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fe50:	mov	x0, #0x8770                	// #34672
   4fe54:	movk	x0, #0x2, lsl #16
   4fe58:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fe5c:	mov	x0, #0x86e0                	// #34528
   4fe60:	movk	x0, #0x2, lsl #16
   4fe64:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fe68:	mov	x0, #0x8650                	// #34384
   4fe6c:	movk	x0, #0x2, lsl #16
   4fe70:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fe74:	mov	x0, #0x85c0                	// #34240
   4fe78:	movk	x0, #0x2, lsl #16
   4fe7c:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fe80:	mov	x0, #0x8530                	// #34096
   4fe84:	movk	x0, #0x2, lsl #16
   4fe88:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fe8c:	mov	x0, #0x84a0                	// #33952
   4fe90:	movk	x0, #0x2, lsl #16
   4fe94:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fe98:	mov	x0, #0x8410                	// #33808
   4fe9c:	movk	x0, #0x2, lsl #16
   4fea0:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fea4:	mov	x0, #0x8380                	// #33664
   4fea8:	movk	x0, #0x2, lsl #16
   4feac:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4feb0:	mov	x0, #0x82f0                	// #33520
   4feb4:	movk	x0, #0x2, lsl #16
   4feb8:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4febc:	mov	x0, #0x8260                	// #33376
   4fec0:	movk	x0, #0x2, lsl #16
   4fec4:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fec8:	mov	x0, #0x81d0                	// #33232
   4fecc:	movk	x0, #0x2, lsl #16
   4fed0:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fed4:	mov	x0, #0x8140                	// #33088
   4fed8:	movk	x0, #0x2, lsl #16
   4fedc:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fee0:	mov	x0, #0x80b0                	// #32944
   4fee4:	movk	x0, #0x2, lsl #16
   4fee8:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4feec:	mov	x0, #0x8020                	// #32800
   4fef0:	movk	x0, #0x2, lsl #16
   4fef4:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fef8:	mov	x0, #0x7f90                	// #32656
   4fefc:	movk	x0, #0x2, lsl #16
   4ff00:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4ff04:	mov	x0, #0x7f00                	// #32512
   4ff08:	movk	x0, #0x2, lsl #16
   4ff0c:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4ff10:	mov	x0, #0x7e70                	// #32368
   4ff14:	movk	x0, #0x2, lsl #16
   4ff18:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4ff1c:	mov	x0, #0x7de0                	// #32224
   4ff20:	movk	x0, #0x2, lsl #16
   4ff24:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4ff28:	mov	x0, #0x7d50                	// #32080
   4ff2c:	movk	x0, #0x2, lsl #16
   4ff30:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4ff34:	mov	x0, #0x3670                	// #13936
   4ff38:	movk	x0, #0x2, lsl #16
   4ff3c:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4ff40:	mov	x0, #0x3430                	// #13360
   4ff44:	movk	x0, #0x2, lsl #16
   4ff48:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4ff4c:	mov	x0, #0x3310                	// #13072
   4ff50:	movk	x0, #0x2, lsl #16
   4ff54:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4ff58:	mov	x0, #0x3040                	// #12352
   4ff5c:	movk	x0, #0x2, lsl #16
   4ff60:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4ff64:	mov	x0, #0x2e90                	// #11920
   4ff68:	movk	x0, #0x2, lsl #16
   4ff6c:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4ff70:	mov	x0, #0x2d70                	// #11632
   4ff74:	movk	x0, #0x2, lsl #16
   4ff78:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4ff7c:	mov	x0, #0xaa60                	// #43616
   4ff80:	movk	x0, #0x1, lsl #16
   4ff84:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4ff88:	mov	x0, #0xa430                	// #42032
   4ff8c:	movk	x0, #0x1, lsl #16
   4ff90:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4ff94:	mov	x0, #0xa310                	// #41744
   4ff98:	movk	x0, #0x1, lsl #16
   4ff9c:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4ffa0:	mov	x0, #0xa160                	// #41312
   4ffa4:	movk	x0, #0x1, lsl #16
   4ffa8:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4ffac:	mov	x0, #0xa040                	// #41024
   4ffb0:	movk	x0, #0x1, lsl #16
   4ffb4:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4ffb8:	mov	x0, #0x9f20                	// #40736
   4ffbc:	movk	x0, #0x1, lsl #16
   4ffc0:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4ffc4:	mov	x0, #0x9e00                	// #40448
   4ffc8:	movk	x0, #0x1, lsl #16
   4ffcc:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4ffd0:	mov	x0, #0x96b0                	// #38576
   4ffd4:	movk	x0, #0x1, lsl #16
   4ffd8:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4ffdc:	mov	x0, #0x9500                	// #38144
   4ffe0:	movk	x0, #0x1, lsl #16
   4ffe4:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4ffe8:	mov	x0, #0x93e0                	// #37856
   4ffec:	movk	x0, #0x1, lsl #16
   4fff0:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   4fff4:	mov	x0, #0x92c0                	// #37568
   4fff8:	movk	x0, #0x1, lsl #16
   4fffc:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   50000:	mov	x0, #0x91a0                	// #37280
   50004:	movk	x0, #0x1, lsl #16
   50008:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   5000c:	mov	x0, #0x8300                	// #33536
   50010:	movk	x0, #0x1, lsl #16
   50014:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   50018:	mov	x0, #0x78e0                	// #30944
   5001c:	movk	x0, #0x1, lsl #16
   50020:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   50024:	mov	x0, #0x77c0                	// #30656
   50028:	movk	x0, #0x1, lsl #16
   5002c:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   50030:	mov	x0, #0x7610                	// #30224
   50034:	movk	x0, #0x1, lsl #16
   50038:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   5003c:	mov	x0, #0x6410                	// #25616
   50040:	movk	x0, #0x1, lsl #16
   50044:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>
   50048:	mov	x0, #0x5610                	// #22032
   5004c:	b	4f998 <aarch64_find_alias_opcode@@Base+0x60>

0000000000050050 <aarch64_find_next_alias_opcode@@Base>:
   50050:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   50054:	mov	x2, #0x8e39                	// #36409
   50058:	movk	x2, #0x38e3, lsl #16
   5005c:	ldr	x3, [x1, #3848]
   50060:	movk	x2, #0xe38e, lsl #32
   50064:	movk	x2, #0x8e38, lsl #48
   50068:	sub	x0, x0, x3
   5006c:	asr	x0, x0, #4
   50070:	mul	x0, x0, x2
   50074:	cmp	w0, #0x4f8
   50078:	b.gt	500c8 <aarch64_find_next_alias_opcode@@Base+0x78>
   5007c:	cmp	w0, #0x2
   50080:	b.le	500c0 <aarch64_find_next_alias_opcode@@Base+0x70>
   50084:	sub	w0, w0, #0x3
   50088:	cmp	w0, #0x4f5
   5008c:	b.hi	500c0 <aarch64_find_next_alias_opcode@@Base+0x70>  // b.pmore
   50090:	adrp	x2, 65000 <fields@@Base+0x1f60>
   50094:	add	x2, x2, #0x2d0
   50098:	ldrh	w0, [x2, w0, uxtw #1]
   5009c:	adr	x2, 500a8 <aarch64_find_next_alias_opcode@@Base+0x58>
   500a0:	add	x0, x2, w0, sxth #2
   500a4:	br	x0
   500a8:	mov	x0, #0x240                 	// #576
   500ac:	ldr	x1, [x1, #3848]
   500b0:	add	x0, x0, x1
   500b4:	ret
   500b8:	mov	x0, #0x120                 	// #288
   500bc:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   500c0:	mov	x0, #0x0                   	// #0
   500c4:	ret
   500c8:	cmp	w0, #0x7f7
   500cc:	b.eq	501cc <aarch64_find_next_alias_opcode@@Base+0x17c>  // b.none
   500d0:	b.le	500fc <aarch64_find_next_alias_opcode@@Base+0xac>
   500d4:	cmp	w0, #0x7fb
   500d8:	b.eq	501c0 <aarch64_find_next_alias_opcode@@Base+0x170>  // b.none
   500dc:	b.le	50124 <aarch64_find_next_alias_opcode@@Base+0xd4>
   500e0:	cmp	w0, #0x7fc
   500e4:	b.eq	50190 <aarch64_find_next_alias_opcode@@Base+0x140>  // b.none
   500e8:	cmp	w0, #0x7fd
   500ec:	b.ne	500c0 <aarch64_find_next_alias_opcode@@Base+0x70>  // b.any
   500f0:	mov	x0, #0xdb30                	// #56112
   500f4:	movk	x0, #0x3, lsl #16
   500f8:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   500fc:	cmp	w0, #0x7f4
   50100:	b.eq	501b4 <aarch64_find_next_alias_opcode@@Base+0x164>  // b.none
   50104:	b.le	50140 <aarch64_find_next_alias_opcode@@Base+0xf0>
   50108:	cmp	w0, #0x7f5
   5010c:	b.eq	50184 <aarch64_find_next_alias_opcode@@Base+0x134>  // b.none
   50110:	cmp	w0, #0x7f6
   50114:	b.ne	500c0 <aarch64_find_next_alias_opcode@@Base+0x70>  // b.any
   50118:	mov	x0, #0x2a0                 	// #672
   5011c:	movk	x0, #0x3, lsl #16
   50120:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50124:	cmp	w0, #0x7f9
   50128:	b.eq	501a8 <aarch64_find_next_alias_opcode@@Base+0x158>  // b.none
   5012c:	cmp	w0, #0x7fa
   50130:	b.ne	5015c <aarch64_find_next_alias_opcode@@Base+0x10c>  // b.any
   50134:	mov	x0, #0x1020                	// #4128
   50138:	movk	x0, #0x3, lsl #16
   5013c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50140:	cmp	w0, #0x7f2
   50144:	b.eq	5019c <aarch64_find_next_alias_opcode@@Base+0x14c>  // b.none
   50148:	cmp	w0, #0x7f3
   5014c:	b.ne	50170 <aarch64_find_next_alias_opcode@@Base+0x120>  // b.any
   50150:	mov	x0, #0xe9e0                	// #59872
   50154:	movk	x0, #0x2, lsl #16
   50158:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5015c:	cmp	w0, #0x7f8
   50160:	b.ne	500c0 <aarch64_find_next_alias_opcode@@Base+0x70>  // b.any
   50164:	mov	x0, #0x7b0                 	// #1968
   50168:	movk	x0, #0x3, lsl #16
   5016c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50170:	cmp	w0, #0x7f1
   50174:	b.ne	500c0 <aarch64_find_next_alias_opcode@@Base+0x70>  // b.any
   50178:	mov	x0, #0xd1b0                	// #53680
   5017c:	movk	x0, #0x2, lsl #16
   50180:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50184:	mov	x0, #0xe8c0                	// #59584
   50188:	movk	x0, #0x2, lsl #16
   5018c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50190:	mov	x0, #0xc940                	// #51520
   50194:	movk	x0, #0x2, lsl #16
   50198:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5019c:	mov	x0, #0xe710                	// #59152
   501a0:	movk	x0, #0x2, lsl #16
   501a4:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   501a8:	mov	x0, #0xf00                 	// #3840
   501ac:	movk	x0, #0x3, lsl #16
   501b0:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   501b4:	mov	x0, #0xeb90                	// #60304
   501b8:	movk	x0, #0x2, lsl #16
   501bc:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   501c0:	mov	x0, #0xc5e0                	// #50656
   501c4:	movk	x0, #0x2, lsl #16
   501c8:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   501cc:	mov	x0, #0x720                 	// #1824
   501d0:	movk	x0, #0x3, lsl #16
   501d4:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   501d8:	mov	x0, #0x450                 	// #1104
   501dc:	movk	x0, #0x3, lsl #16
   501e0:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   501e4:	mov	x0, #0x3c0                 	// #960
   501e8:	movk	x0, #0x3, lsl #16
   501ec:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   501f0:	mov	x0, #0xd360                	// #54112
   501f4:	movk	x0, #0x2, lsl #16
   501f8:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   501fc:	mov	x0, #0xdce0                	// #56544
   50200:	movk	x0, #0x3, lsl #16
   50204:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50208:	mov	x0, #0xf910                	// #63760
   5020c:	movk	x0, #0x2, lsl #16
   50210:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50214:	mov	x0, #0x50                  	// #80
   50218:	movk	x0, #0x4, lsl #16
   5021c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50220:	mov	x0, #0xd2d0                	// #53968
   50224:	movk	x0, #0x2, lsl #16
   50228:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5022c:	mov	x0, #0xf880                	// #63616
   50230:	movk	x0, #0x2, lsl #16
   50234:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50238:	mov	x0, #0x3ffc0               	// #262080
   5023c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50240:	mov	x0, #0xf7f0                	// #63472
   50244:	movk	x0, #0x2, lsl #16
   50248:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5024c:	mov	x0, #0xf0                  	// #240
   50250:	movk	x0, #0x3, lsl #16
   50254:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50258:	mov	x0, #0x180                 	// #384
   5025c:	movk	x0, #0x3, lsl #16
   50260:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50264:	mov	x0, #0xc310                	// #49936
   50268:	movk	x0, #0x2, lsl #16
   5026c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50270:	mov	x0, #0xdc50                	// #56400
   50274:	movk	x0, #0x3, lsl #16
   50278:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5027c:	mov	x0, #0xffd0                	// #65488
   50280:	movk	x0, #0x2, lsl #16
   50284:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50288:	mov	x0, #0x60                  	// #96
   5028c:	movk	x0, #0x3, lsl #16
   50290:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50294:	mov	x0, #0xdaa0                	// #55968
   50298:	movk	x0, #0x3, lsl #16
   5029c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   502a0:	mov	x0, #0x1380                	// #4992
   502a4:	movk	x0, #0x3, lsl #16
   502a8:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   502ac:	mov	x0, #0x2070                	// #8304
   502b0:	movk	x0, #0x3, lsl #16
   502b4:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   502b8:	mov	x0, #0xb620                	// #46624
   502bc:	movk	x0, #0x2, lsl #16
   502c0:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   502c4:	mov	x0, #0xb590                	// #46480
   502c8:	movk	x0, #0x2, lsl #16
   502cc:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   502d0:	mov	x0, #0xb500                	// #46336
   502d4:	movk	x0, #0x2, lsl #16
   502d8:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   502dc:	mov	x0, #0xb470                	// #46192
   502e0:	movk	x0, #0x2, lsl #16
   502e4:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   502e8:	mov	x0, #0xb3e0                	// #46048
   502ec:	movk	x0, #0x2, lsl #16
   502f0:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   502f4:	mov	x0, #0xb350                	// #45904
   502f8:	movk	x0, #0x2, lsl #16
   502fc:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50300:	mov	x0, #0xb2c0                	// #45760
   50304:	movk	x0, #0x2, lsl #16
   50308:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5030c:	mov	x0, #0xa780                	// #42880
   50310:	movk	x0, #0x2, lsl #16
   50314:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50318:	mov	x0, #0xaf60                	// #44896
   5031c:	movk	x0, #0x2, lsl #16
   50320:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50324:	mov	x0, #0xaed0                	// #44752
   50328:	movk	x0, #0x2, lsl #16
   5032c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50330:	mov	x0, #0xae40                	// #44608
   50334:	movk	x0, #0x2, lsl #16
   50338:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5033c:	mov	x0, #0xadb0                	// #44464
   50340:	movk	x0, #0x2, lsl #16
   50344:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50348:	mov	x0, #0xad20                	// #44320
   5034c:	movk	x0, #0x2, lsl #16
   50350:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50354:	mov	x0, #0xac90                	// #44176
   50358:	movk	x0, #0x2, lsl #16
   5035c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50360:	mov	x0, #0xac00                	// #44032
   50364:	movk	x0, #0x2, lsl #16
   50368:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5036c:	mov	x0, #0xa930                	// #43312
   50370:	movk	x0, #0x2, lsl #16
   50374:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50378:	mov	x0, #0xa8a0                	// #43168
   5037c:	movk	x0, #0x2, lsl #16
   50380:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50384:	mov	x0, #0xa6f0                	// #42736
   50388:	movk	x0, #0x2, lsl #16
   5038c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50390:	mov	x0, #0xa660                	// #42592
   50394:	movk	x0, #0x2, lsl #16
   50398:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5039c:	mov	x0, #0xa5d0                	// #42448
   503a0:	movk	x0, #0x2, lsl #16
   503a4:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   503a8:	mov	x0, #0xa540                	// #42304
   503ac:	movk	x0, #0x2, lsl #16
   503b0:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   503b4:	mov	x0, #0xa4b0                	// #42160
   503b8:	movk	x0, #0x2, lsl #16
   503bc:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   503c0:	mov	x0, #0xa420                	// #42016
   503c4:	movk	x0, #0x2, lsl #16
   503c8:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   503cc:	mov	x0, #0xa390                	// #41872
   503d0:	movk	x0, #0x2, lsl #16
   503d4:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   503d8:	mov	x0, #0xa300                	// #41728
   503dc:	movk	x0, #0x2, lsl #16
   503e0:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   503e4:	mov	x0, #0xa270                	// #41584
   503e8:	movk	x0, #0x2, lsl #16
   503ec:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   503f0:	mov	x0, #0xa1e0                	// #41440
   503f4:	movk	x0, #0x2, lsl #16
   503f8:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   503fc:	mov	x0, #0xa150                	// #41296
   50400:	movk	x0, #0x2, lsl #16
   50404:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50408:	mov	x0, #0xa0c0                	// #41152
   5040c:	movk	x0, #0x2, lsl #16
   50410:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50414:	mov	x0, #0xa030                	// #41008
   50418:	movk	x0, #0x2, lsl #16
   5041c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50420:	mov	x0, #0x9fa0                	// #40864
   50424:	movk	x0, #0x2, lsl #16
   50428:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5042c:	mov	x0, #0x9f10                	// #40720
   50430:	movk	x0, #0x2, lsl #16
   50434:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50438:	mov	x0, #0x9970                	// #39280
   5043c:	movk	x0, #0x2, lsl #16
   50440:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50444:	mov	x0, #0x9850                	// #38992
   50448:	movk	x0, #0x2, lsl #16
   5044c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50450:	mov	x0, #0x7c30                	// #31792
   50454:	movk	x0, #0x2, lsl #16
   50458:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5045c:	mov	x0, #0x7a80                	// #31360
   50460:	movk	x0, #0x2, lsl #16
   50464:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50468:	mov	x0, #0x78d0                	// #30928
   5046c:	movk	x0, #0x2, lsl #16
   50470:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50474:	mov	x0, #0x77b0                	// #30640
   50478:	movk	x0, #0x2, lsl #16
   5047c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50480:	mov	x0, #0x7720                	// #30496
   50484:	movk	x0, #0x2, lsl #16
   50488:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5048c:	mov	x0, #0x7690                	// #30352
   50490:	movk	x0, #0x2, lsl #16
   50494:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50498:	mov	x0, #0x7570                	// #30064
   5049c:	movk	x0, #0x2, lsl #16
   504a0:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   504a4:	mov	x0, #0x73c0                	// #29632
   504a8:	movk	x0, #0x2, lsl #16
   504ac:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   504b0:	mov	x0, #0x7210                	// #29200
   504b4:	movk	x0, #0x2, lsl #16
   504b8:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   504bc:	mov	x0, #0x70f0                	// #28912
   504c0:	movk	x0, #0x2, lsl #16
   504c4:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   504c8:	mov	x0, #0x7060                	// #28768
   504cc:	movk	x0, #0x2, lsl #16
   504d0:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   504d4:	mov	x0, #0x6fd0                	// #28624
   504d8:	movk	x0, #0x2, lsl #16
   504dc:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   504e0:	mov	x0, #0x6eb0                	// #28336
   504e4:	movk	x0, #0x2, lsl #16
   504e8:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   504ec:	mov	x0, #0x6d00                	// #27904
   504f0:	movk	x0, #0x2, lsl #16
   504f4:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   504f8:	mov	x0, #0x6b50                	// #27472
   504fc:	movk	x0, #0x2, lsl #16
   50500:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50504:	mov	x0, #0x6a30                	// #27184
   50508:	movk	x0, #0x2, lsl #16
   5050c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50510:	mov	x0, #0x69a0                	// #27040
   50514:	movk	x0, #0x2, lsl #16
   50518:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5051c:	mov	x0, #0x6910                	// #26896
   50520:	movk	x0, #0x2, lsl #16
   50524:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50528:	mov	x0, #0x67f0                	// #26608
   5052c:	movk	x0, #0x2, lsl #16
   50530:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50534:	mov	x0, #0x6640                	// #26176
   50538:	movk	x0, #0x2, lsl #16
   5053c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50540:	mov	x0, #0x6490                	// #25744
   50544:	movk	x0, #0x2, lsl #16
   50548:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5054c:	mov	x0, #0x6370                	// #25456
   50550:	movk	x0, #0x2, lsl #16
   50554:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50558:	mov	x0, #0x62e0                	// #25312
   5055c:	movk	x0, #0x2, lsl #16
   50560:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50564:	mov	x0, #0x6250                	// #25168
   50568:	movk	x0, #0x2, lsl #16
   5056c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50570:	mov	x0, #0x6130                	// #24880
   50574:	movk	x0, #0x2, lsl #16
   50578:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5057c:	mov	x0, #0x5f80                	// #24448
   50580:	movk	x0, #0x2, lsl #16
   50584:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50588:	mov	x0, #0x5dd0                	// #24016
   5058c:	movk	x0, #0x2, lsl #16
   50590:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50594:	mov	x0, #0x5cb0                	// #23728
   50598:	movk	x0, #0x2, lsl #16
   5059c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   505a0:	mov	x0, #0x5c20                	// #23584
   505a4:	movk	x0, #0x2, lsl #16
   505a8:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   505ac:	mov	x0, #0x5b90                	// #23440
   505b0:	movk	x0, #0x2, lsl #16
   505b4:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   505b8:	mov	x0, #0x5a70                	// #23152
   505bc:	movk	x0, #0x2, lsl #16
   505c0:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   505c4:	mov	x0, #0x58c0                	// #22720
   505c8:	movk	x0, #0x2, lsl #16
   505cc:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   505d0:	mov	x0, #0x5710                	// #22288
   505d4:	movk	x0, #0x2, lsl #16
   505d8:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   505dc:	mov	x0, #0x55f0                	// #22000
   505e0:	movk	x0, #0x2, lsl #16
   505e4:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   505e8:	mov	x0, #0x5560                	// #21856
   505ec:	movk	x0, #0x2, lsl #16
   505f0:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   505f4:	mov	x0, #0x54d0                	// #21712
   505f8:	movk	x0, #0x2, lsl #16
   505fc:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50600:	mov	x0, #0x53b0                	// #21424
   50604:	movk	x0, #0x2, lsl #16
   50608:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5060c:	mov	x0, #0x5200                	// #20992
   50610:	movk	x0, #0x2, lsl #16
   50614:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50618:	mov	x0, #0x5050                	// #20560
   5061c:	movk	x0, #0x2, lsl #16
   50620:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50624:	mov	x0, #0x4f30                	// #20272
   50628:	movk	x0, #0x2, lsl #16
   5062c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50630:	mov	x0, #0x4ea0                	// #20128
   50634:	movk	x0, #0x2, lsl #16
   50638:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5063c:	mov	x0, #0x4e10                	// #19984
   50640:	movk	x0, #0x2, lsl #16
   50644:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50648:	mov	x0, #0x4cf0                	// #19696
   5064c:	movk	x0, #0x2, lsl #16
   50650:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50654:	mov	x0, #0x4b40                	// #19264
   50658:	movk	x0, #0x2, lsl #16
   5065c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50660:	mov	x0, #0x4990                	// #18832
   50664:	movk	x0, #0x2, lsl #16
   50668:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5066c:	mov	x0, #0x4870                	// #18544
   50670:	movk	x0, #0x2, lsl #16
   50674:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50678:	mov	x0, #0x47e0                	// #18400
   5067c:	movk	x0, #0x2, lsl #16
   50680:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50684:	mov	x0, #0x4750                	// #18256
   50688:	movk	x0, #0x2, lsl #16
   5068c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50690:	mov	x0, #0x35e0                	// #13792
   50694:	movk	x0, #0x2, lsl #16
   50698:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5069c:	mov	x0, #0x33a0                	// #13216
   506a0:	movk	x0, #0x2, lsl #16
   506a4:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   506a8:	mov	x0, #0x3280                	// #12928
   506ac:	movk	x0, #0x2, lsl #16
   506b0:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   506b4:	mov	x0, #0x31f0                	// #12784
   506b8:	movk	x0, #0x2, lsl #16
   506bc:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   506c0:	mov	x0, #0x2fb0                	// #12208
   506c4:	movk	x0, #0x2, lsl #16
   506c8:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   506cc:	mov	x0, #0x2e00                	// #11776
   506d0:	movk	x0, #0x2, lsl #16
   506d4:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   506d8:	mov	x0, #0x2ce0                	// #11488
   506dc:	movk	x0, #0x2, lsl #16
   506e0:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   506e4:	mov	x0, #0xa9d0                	// #43472
   506e8:	movk	x0, #0x1, lsl #16
   506ec:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   506f0:	mov	x0, #0xa3a0                	// #41888
   506f4:	movk	x0, #0x1, lsl #16
   506f8:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   506fc:	mov	x0, #0xa280                	// #41600
   50700:	movk	x0, #0x1, lsl #16
   50704:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50708:	mov	x0, #0xa0d0                	// #41168
   5070c:	movk	x0, #0x1, lsl #16
   50710:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50714:	mov	x0, #0x9fb0                	// #40880
   50718:	movk	x0, #0x1, lsl #16
   5071c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50720:	mov	x0, #0x9e90                	// #40592
   50724:	movk	x0, #0x1, lsl #16
   50728:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5072c:	mov	x0, #0x9d70                	// #40304
   50730:	movk	x0, #0x1, lsl #16
   50734:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50738:	mov	x0, #0x9620                	// #38432
   5073c:	movk	x0, #0x1, lsl #16
   50740:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50744:	mov	x0, #0x9470                	// #38000
   50748:	movk	x0, #0x1, lsl #16
   5074c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50750:	mov	x0, #0x9350                	// #37712
   50754:	movk	x0, #0x1, lsl #16
   50758:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5075c:	mov	x0, #0x9230                	// #37424
   50760:	movk	x0, #0x1, lsl #16
   50764:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50768:	mov	x0, #0x9110                	// #37136
   5076c:	movk	x0, #0x1, lsl #16
   50770:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50774:	mov	x0, #0x8390                	// #33680
   50778:	movk	x0, #0x1, lsl #16
   5077c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50780:	mov	x0, #0x7850                	// #30800
   50784:	movk	x0, #0x1, lsl #16
   50788:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5078c:	mov	x0, #0x7730                	// #30512
   50790:	movk	x0, #0x1, lsl #16
   50794:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50798:	mov	x0, #0x76a0                	// #30368
   5079c:	movk	x0, #0x1, lsl #16
   507a0:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   507a4:	mov	x0, #0x7580                	// #30080
   507a8:	movk	x0, #0x1, lsl #16
   507ac:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   507b0:	mov	x0, #0x74f0                	// #29936
   507b4:	movk	x0, #0x1, lsl #16
   507b8:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   507bc:	mov	x0, #0x64a0                	// #25760
   507c0:	movk	x0, #0x1, lsl #16
   507c4:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   507c8:	mov	x0, #0x62f0                	// #25328
   507cc:	movk	x0, #0x1, lsl #16
   507d0:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   507d4:	mov	x0, #0x6380                	// #25472
   507d8:	movk	x0, #0x1, lsl #16
   507dc:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   507e0:	mov	x0, #0x6530                	// #25904
   507e4:	movk	x0, #0x1, lsl #16
   507e8:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   507ec:	mov	x0, #0x6260                	// #25184
   507f0:	movk	x0, #0x1, lsl #16
   507f4:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   507f8:	mov	x0, #0x61d0                	// #25040
   507fc:	movk	x0, #0x1, lsl #16
   50800:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50804:	mov	x0, #0x6020                	// #24608
   50808:	movk	x0, #0x1, lsl #16
   5080c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50810:	mov	x0, #0x6140                	// #24896
   50814:	movk	x0, #0x1, lsl #16
   50818:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5081c:	mov	x0, #0x5f90                	// #24464
   50820:	movk	x0, #0x1, lsl #16
   50824:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50828:	mov	x0, #0x5cc0                	// #23744
   5082c:	movk	x0, #0x1, lsl #16
   50830:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50834:	mov	x0, #0x5de0                	// #24032
   50838:	movk	x0, #0x1, lsl #16
   5083c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50840:	mov	x0, #0x5d50                	// #23888
   50844:	movk	x0, #0x1, lsl #16
   50848:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5084c:	mov	x0, #0x5f00                	// #24320
   50850:	movk	x0, #0x1, lsl #16
   50854:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50858:	mov	x0, #0x5c30                	// #23600
   5085c:	movk	x0, #0x1, lsl #16
   50860:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50864:	mov	x0, #0x5ba0                	// #23456
   50868:	movk	x0, #0x1, lsl #16
   5086c:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50870:	mov	x0, #0x2cf0                	// #11504
   50874:	movk	x0, #0x1, lsl #16
   50878:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5087c:	mov	x0, #0xe8e0                	// #59616
   50880:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50884:	mov	x0, #0xe7c0                	// #59328
   50888:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5088c:	mov	x0, #0xdb60                	// #56160
   50890:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50894:	mov	x0, #0xda40                	// #55872
   50898:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5089c:	mov	x0, #0xb250                	// #45648
   508a0:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   508a4:	mov	x0, #0x8820                	// #34848
   508a8:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   508ac:	mov	x0, #0x57c0                	// #22464
   508b0:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   508b4:	mov	x0, #0x56a0                	// #22176
   508b8:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   508bc:	mov	x0, #0x5580                	// #21888
   508c0:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   508c4:	mov	x0, #0xea0                 	// #3744
   508c8:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   508cc:	mov	x0, #0xfc0                 	// #4032
   508d0:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   508d4:	mov	x0, #0xd80                 	// #3456
   508d8:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   508dc:	mov	x0, #0xc60                 	// #3168
   508e0:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   508e4:	mov	x0, #0x990                 	// #2448
   508e8:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   508ec:	mov	x0, #0x7e0                 	// #2016
   508f0:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   508f4:	mov	x0, #0x6c0                 	// #1728
   508f8:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   508fc:	mov	x0, #0x5a0                 	// #1440
   50900:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   50904:	mov	x0, #0x3f0                 	// #1008
   50908:	b	500ac <aarch64_find_next_alias_opcode@@Base+0x5c>
   5090c:	nop

0000000000050910 <aarch64_extract_operand@@Base>:
   50910:	adrp	x6, a6000 <aarch64_operands@@Base+0x16bd0>
   50914:	mov	x5, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
   50918:	movk	x5, #0xaaab
   5091c:	ldr	x6, [x6, #4032]
   50920:	sub	x6, x0, x6
   50924:	asr	x6, x6, #4
   50928:	mul	x6, x6, x5
   5092c:	sub	w5, w6, #0x1
   50930:	cmp	w5, #0xce
   50934:	b.ls	50960 <aarch64_extract_operand@@Base+0x50>  // b.plast
   50938:	stp	x29, x30, [sp, #-16]!
   5093c:	adrp	x3, 65000 <fields@@Base+0x1f60>
   50940:	adrp	x1, 65000 <fields@@Base+0x1f60>
   50944:	mov	x29, sp
   50948:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   5094c:	add	x3, x3, #0xd90
   50950:	add	x1, x1, #0xda8
   50954:	add	x0, x0, #0x870
   50958:	mov	w2, #0x5dcb                	// #24011
   5095c:	bl	35ac0 <__assert_fail@plt>
   50960:	adrp	x6, 65000 <fields@@Base+0x1f60>
   50964:	add	x6, x6, #0xcbc
   50968:	ldrb	w5, [x6, w5, uxtw]
   5096c:	adr	x6, 50978 <aarch64_extract_operand@@Base+0x68>
   50970:	add	x5, x6, w5, sxtb #2
   50974:	br	x5
   50978:	b	358c0 <aarch64_ext_regno@plt>
   5097c:	b	35720 <aarch64_ext_imm@plt>
   50980:	b	35900 <aarch64_ext_sve_addr_rr_lsl@plt>
   50984:	b	35a50 <aarch64_ext_sve_addr_rz_xtw@plt>
   50988:	b	354d0 <aarch64_ext_sve_quad_index@plt>
   5098c:	b	352b0 <aarch64_ext_reglane@plt>
   50990:	b	35020 <aarch64_ext_sysins_op@plt>
   50994:	b	352a0 <aarch64_ext_addr_simm@plt>
   50998:	b	35b60 <aarch64_ext_sve_addr_ri_u6@plt>
   5099c:	b	35460 <aarch64_ext_sve_addr_ri_s4xvl@plt>
   509a0:	b	35090 <aarch64_ext_sve_addr_zi_u5@plt>
   509a4:	b	35180 <aarch64_ext_sve_shrimm@plt>
   509a8:	b	35190 <aarch64_ext_sve_shlimm@plt>
   509ac:	b	35af0 <aarch64_ext_imm_rotate1@plt>
   509b0:	b	355c0 <aarch64_ext_imm_rotate2@plt>
   509b4:	b	35b10 <aarch64_ext_advsimd_imm_modified@plt>
   509b8:	b	35910 <aarch64_ext_sve_addr_ri_s4@plt>
   509bc:	b	355d0 <aarch64_ext_hint@plt>
   509c0:	b	359d0 <aarch64_ext_barrier@plt>
   509c4:	b	35420 <aarch64_ext_limm@plt>
   509c8:	b	35370 <aarch64_ext_fpimm@plt>
   509cc:	b	354c0 <aarch64_ext_sve_reglist@plt>
   509d0:	b	35800 <aarch64_ext_advsimd_imm_shift@plt>
   509d4:	b	35b90 <aarch64_ext_cond@plt>
   509d8:	b	358a0 <aarch64_ext_addr_simple@plt>
   509dc:	b	35ab0 <aarch64_ext_sve_limm_mov@plt>
   509e0:	b	35960 <aarch64_ext_imm_half@plt>
   509e4:	b	351c0 <aarch64_ext_aimm@plt>
   509e8:	b	35260 <aarch64_ext_sve_addr_ri_s9xvl@plt>
   509ec:	b	359c0 <aarch64_ext_sve_addr_ri_s6xvl@plt>
   509f0:	b	350c0 <aarch64_ext_sysreg@plt>
   509f4:	b	35b40 <aarch64_ext_simd_addr_post@plt>
   509f8:	b	35b20 <aarch64_ext_pstatefield@plt>
   509fc:	b	35320 <aarch64_ext_addr_simm10@plt>
   50a00:	b	35350 <aarch64_ext_addr_offset@plt>
   50a04:	b	351a0 <aarch64_ext_addr_uimm12@plt>
   50a08:	b	355b0 <aarch64_ext_sve_index@plt>
   50a0c:	b	35a70 <aarch64_ext_ft@plt>
   50a10:	b	35580 <aarch64_ext_ldst_reglist@plt>
   50a14:	b	35750 <aarch64_ext_reglist@plt>
   50a18:	b	35a90 <aarch64_ext_reg_shifted@plt>
   50a1c:	b	353c0 <aarch64_ext_reg_extended@plt>
   50a20:	b	35a60 <aarch64_ext_regno_pair@plt>
   50a24:	b	35110 <aarch64_ext_regrt_sysins@plt>
   50a28:	b	35500 <aarch64_ext_inv_limm@plt>
   50a2c:	b	357a0 <aarch64_ext_sve_float_zero_one@plt>
   50a30:	b	35510 <aarch64_ext_sve_float_half_two@plt>
   50a34:	b	359f0 <aarch64_ext_sve_float_half_one@plt>
   50a38:	b	351e0 <aarch64_ext_sve_asimm@plt>
   50a3c:	b	357c0 <aarch64_ext_addr_regoff@plt>
   50a40:	b	35880 <aarch64_ext_prfop@plt>
   50a44:	b	35660 <aarch64_ext_sve_addr_zz_lsl@plt>
   50a48:	b	35120 <aarch64_ext_fbits@plt>
   50a4c:	b	35770 <aarch64_ext_shll_imm@plt>
   50a50:	b	356c0 <aarch64_ext_ldst_elemlist@plt>
   50a54:	b	35150 <aarch64_ext_ldst_reglist_r@plt>
   50a58:	b	35930 <aarch64_ext_sve_scale@plt>
   50a5c:	b	356f0 <aarch64_ext_sve_aimm@plt>
   50a60:	b	357d0 <aarch64_ext_sve_addr_zz_uxtw@plt>
   50a64:	b	35280 <aarch64_ext_sve_addr_zz_sxtw@plt>

0000000000050a68 <aarch64_get_opcode@@Base>:
   50a68:	adrp	x2, 67000 <fields@@Base+0x3f60>
   50a6c:	add	x2, x2, #0xcd0
   50a70:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   50a74:	mov	w3, #0x90                  	// #144
   50a78:	ldr	x1, [x1, #3848]
   50a7c:	ldr	w0, [x2, w0, uxtw #2]
   50a80:	umaddl	x0, w0, w3, x1
   50a84:	ret
   50a88:	mov	x2, x0
   50a8c:	cmp	w1, #0xdb
   50a90:	b.ls	50a9c <aarch64_get_opcode@@Base+0x34>  // b.plast
   50a94:	mov	w0, #0x0                   	// #0
   50a98:	ret
   50a9c:	adrp	x0, 67000 <fields@@Base+0x3f60>
   50aa0:	add	x0, x0, #0xe20
   50aa4:	ldrh	w0, [x0, w1, uxtw #1]
   50aa8:	adr	x3, 50ab4 <aarch64_get_opcode@@Base+0x4c>
   50aac:	add	x0, x3, w0, sxth #2
   50ab0:	br	x0
   50ab4:	lsr	x3, x2, #22
   50ab8:	ubfx	x1, x2, #13, #3
   50abc:	mov	w0, #0x1                   	// #1
   50ac0:	ubfiz	x3, x3, #3, #1
   50ac4:	orr	x1, x3, x1
   50ac8:	cbz	x1, 50a98 <aarch64_get_opcode@@Base+0x30>
   50acc:	ubfx	x2, x2, #20, #2
   50ad0:	cmp	x2, #0x3
   50ad4:	cset	w0, eq  // eq = none
   50ad8:	ret
   50adc:	ubfx	x2, x2, #7, #2
   50ae0:	cmp	x2, #0x3
   50ae4:	cset	w0, eq  // eq = none
   50ae8:	ret
   50aec:	lsr	x3, x2, #22
   50af0:	ubfx	x1, x2, #13, #3
   50af4:	mov	w0, #0x1                   	// #1
   50af8:	ubfiz	x3, x3, #3, #1
   50afc:	orr	x1, x3, x1
   50b00:	cbz	x1, 50a98 <aarch64_get_opcode@@Base+0x30>
   50b04:	tst	x2, #0x1000
   50b08:	and	x0, x2, #0x1
   50b0c:	csel	w0, wzr, w0, ne  // ne = any
   50b10:	ret
   50b14:	lsr	x3, x2, #22
   50b18:	ubfx	x1, x2, #13, #3
   50b1c:	mov	w0, #0x1                   	// #1
   50b20:	ubfiz	x3, x3, #3, #1
   50b24:	orr	x1, x3, x1
   50b28:	cbz	x1, 50a98 <aarch64_get_opcode@@Base+0x30>
   50b2c:	and	x2, x2, #0xf
   50b30:	cmp	x2, #0xd
   50b34:	cset	w0, eq  // eq = none
   50b38:	ret
   50b3c:	ubfx	x2, x2, #18, #2
   50b40:	cmp	x2, #0x3
   50b44:	cset	w0, eq  // eq = none
   50b48:	ret
   50b4c:	ubfx	x2, x2, #9, #3
   50b50:	cmp	x2, #0x7
   50b54:	cset	w0, eq  // eq = none
   50b58:	ret
   50b5c:	tst	x2, #0x380000
   50b60:	cset	w0, eq  // eq = none
   50b64:	ret
   50b68:	ubfx	x2, x2, #20, #3
   50b6c:	cmp	x2, #0x7
   50b70:	cset	w0, eq  // eq = none
   50b74:	ret
   50b78:	lsr	x0, x2, #21
   50b7c:	orr	x0, x0, x2, lsr #24
   50b80:	mvn	x0, x0
   50b84:	and	w0, w0, #0x1
   50b88:	ret
   50b8c:	lsr	x0, x2, #21
   50b90:	orr	x0, x0, x2, lsr #24
   50b94:	tbnz	w0, #0, 50adc <aarch64_get_opcode@@Base+0x74>
   50b98:	mov	w0, #0x1                   	// #1
   50b9c:	ret
   50ba0:	lsr	x1, x2, #8
   50ba4:	mov	w0, #0x1                   	// #1
   50ba8:	tbz	w2, #8, 50a98 <aarch64_get_opcode@@Base+0x30>
   50bac:	and	x1, x1, #0xc
   50bb0:	cmp	x1, #0xc
   50bb4:	cset	w0, eq  // eq = none
   50bb8:	ret
   50bbc:	and	x3, x2, #0xf
   50bc0:	ubfx	x4, x2, #16, #4
   50bc4:	cmp	x3, #0xf
   50bc8:	mov	w0, #0x1                   	// #1
   50bcc:	ccmp	x4, #0xf, #0x0, eq  // eq = none
   50bd0:	b.eq	50a98 <aarch64_get_opcode@@Base+0x30>  // b.none
   50bd4:	cmp	x4, x3
   50bd8:	ccmp	x4, #0xf, #0x4, eq  // eq = none
   50bdc:	b.ne	50a98 <aarch64_get_opcode@@Base+0x30>  // b.any
   50be0:	cmp	x3, #0xd
   50be4:	mov	w0, #0x1                   	// #1
   50be8:	b.eq	50a98 <aarch64_get_opcode@@Base+0x30>  // b.none
   50bec:	cmp	w1, #0xda
   50bf0:	mov	w0, #0x0                   	// #0
   50bf4:	b.ne	50a98 <aarch64_get_opcode@@Base+0x30>  // b.any
   50bf8:	ubfx	x2, x2, #16, #4
   50bfc:	cmp	x2, x3
   50c00:	cset	w0, eq  // eq = none
   50c04:	ret
   50c08:	ubfx	x1, x2, #20, #2
   50c0c:	mov	w0, #0x1                   	// #1
   50c10:	cmp	x1, #0x3
   50c14:	b.eq	50a98 <aarch64_get_opcode@@Base+0x30>  // b.none
   50c18:	ubfx	x2, x2, #1, #3
   50c1c:	cmp	x2, #0x7
   50c20:	cset	w0, eq  // eq = none
   50c24:	ret
   50c28:	and	x3, x2, #0xf
   50c2c:	b	50be0 <aarch64_get_opcode@@Base+0x178>
   50c30:	mov	w0, #0x0                   	// #0
   50c34:	tbz	w2, #5, 50a98 <aarch64_get_opcode@@Base+0x30>
   50c38:	ubfx	x2, x2, #8, #4
   50c3c:	cmp	x2, #0xe
   50c40:	cset	w0, ne  // ne = any
   50c44:	ret
   50c48:	lsr	x2, x2, #16
   50c4c:	tst	x2, #0x38
   50c50:	cset	w0, eq  // eq = none
   50c54:	ret
   50c58:	tst	x2, #0x180000
   50c5c:	ubfx	x2, x2, #19, #2
   50c60:	ccmp	x2, #0x3, #0x4, ne  // ne = any
   50c64:	cset	w0, eq  // eq = none
   50c68:	ret
   50c6c:	lsr	x2, x2, #20
   50c70:	and	x2, x2, #0x6
   50c74:	cmp	x2, #0x6
   50c78:	cset	w0, eq  // eq = none
   50c7c:	ret
   50c80:	ubfx	x0, x2, #8, #4
   50c84:	lsr	x2, x2, #8
   50c88:	cmp	x0, #0xe
   50c8c:	mov	w0, #0x1                   	// #1
   50c90:	b.eq	50a98 <aarch64_get_opcode@@Base+0x30>  // b.none
   50c94:	mov	x1, #0x9                   	// #9
   50c98:	and	x1, x2, x1
   50c9c:	cmp	x1, #0x1
   50ca0:	b.eq	50a98 <aarch64_get_opcode@@Base+0x30>  // b.none
   50ca4:	mov	x0, #0xd                   	// #13
   50ca8:	and	x2, x2, x0
   50cac:	cmp	x2, #0x9
   50cb0:	cset	w0, eq  // eq = none
   50cb4:	ret
   50cb8:	lsr	x1, x2, #22
   50cbc:	ubfx	x2, x2, #13, #3
   50cc0:	ubfiz	x1, x1, #3, #1
   50cc4:	orr	x2, x1, x2
   50cc8:	cmp	x2, #0x0
   50ccc:	cset	w0, eq  // eq = none
   50cd0:	ret
   50cd4:	ubfx	x2, x2, #16, #4
   50cd8:	cmp	x2, #0xf
   50cdc:	cset	w0, eq  // eq = none
   50ce0:	ret
   50ce4:	tst	x2, #0x70000
   50ce8:	mov	w0, #0x0                   	// #0
   50cec:	b.ne	50a98 <aarch64_get_opcode@@Base+0x30>  // b.any
   50cf0:	ubfx	x0, x2, #19, #2
   50cf4:	sub	x0, x0, #0x1
   50cf8:	cmp	x0, #0x1
   50cfc:	cset	w0, ls  // ls = plast
   50d00:	ret
   50d04:	nop
   50d08:	mov	w4, #0x11                  	// #17
   50d0c:	str	w4, [x2]
   50d10:	sub	w1, w1, #0x11
   50d14:	mov	x3, x0
   50d18:	cmp	w1, #0xb0
   50d1c:	b.hi	50d48 <aarch64_get_opcode@@Base+0x2e0>  // b.pmore
   50d20:	adrp	x0, 67000 <fields@@Base+0x3f60>
   50d24:	add	x0, x0, #0xfd8
   50d28:	ldrh	w0, [x0, w1, uxtw #1]
   50d2c:	adr	x1, 50d38 <aarch64_get_opcode@@Base+0x2d0>
   50d30:	add	x0, x1, w0, sxth #2
   50d34:	br	x0
   50d38:	ubfx	x3, x3, #18, #2
   50d3c:	cmp	x3, #0x3
   50d40:	b.eq	50d6c <aarch64_get_opcode@@Base+0x304>  // b.none
   50d44:	nop
   50d48:	mov	w0, #0x0                   	// #0
   50d4c:	ret
   50d50:	lsr	x1, x3, #22
   50d54:	ubfx	x3, x3, #5, #1
   50d58:	mov	w0, #0x0                   	// #0
   50d5c:	ubfiz	x1, x1, #1, #1
   50d60:	orr	x3, x1, x3
   50d64:	cmp	x3, #0x3
   50d68:	b.ne	50d4c <aarch64_get_opcode@@Base+0x2e4>  // b.any
   50d6c:	mov	w1, #0x3                   	// #3
   50d70:	mov	w0, #0x1                   	// #1
   50d74:	str	w1, [x2]
   50d78:	ret
   50d7c:	mov	w0, #0x0                   	// #0
   50d80:	tbnz	w3, #8, 50d4c <aarch64_get_opcode@@Base+0x2e4>
   50d84:	mov	w1, #0x4                   	// #4
   50d88:	mov	w0, #0x1                   	// #1
   50d8c:	str	w1, [x2]
   50d90:	ret
   50d94:	ubfx	x3, x3, #7, #2
   50d98:	cmp	x3, #0x3
   50d9c:	b.eq	50d6c <aarch64_get_opcode@@Base+0x304>  // b.none
   50da0:	mov	w0, #0x0                   	// #0
   50da4:	b	50d4c <aarch64_get_opcode@@Base+0x2e4>
   50da8:	ubfx	x3, x3, #20, #2
   50dac:	cmp	x3, #0x3
   50db0:	b.eq	50d6c <aarch64_get_opcode@@Base+0x304>  // b.none
   50db4:	mov	w0, #0x0                   	// #0
   50db8:	b	50d4c <aarch64_get_opcode@@Base+0x2e4>
   50dbc:	ubfx	x0, x3, #19, #3
   50dc0:	lsr	x3, x3, #19
   50dc4:	cmp	x0, #0x1
   50dc8:	mov	w0, #0x0                   	// #0
   50dcc:	b.eq	50d4c <aarch64_get_opcode@@Base+0x2e4>  // b.none
   50dd0:	and	x1, x3, #0x6
   50dd4:	cmp	x1, #0x2
   50dd8:	b.eq	50d4c <aarch64_get_opcode@@Base+0x2e4>  // b.none
   50ddc:	tbnz	w3, #2, 50d4c <aarch64_get_opcode@@Base+0x2e4>
   50de0:	mov	w0, #0x1                   	// #1
   50de4:	str	wzr, [x2]
   50de8:	ret
   50dec:	ubfx	x0, x3, #19, #2
   50df0:	lsr	x3, x3, #19
   50df4:	cmp	x0, #0x1
   50df8:	mov	w0, #0x0                   	// #0
   50dfc:	b.eq	50d4c <aarch64_get_opcode@@Base+0x2e4>  // b.none
   50e00:	tbz	w3, #1, 50de0 <aarch64_get_opcode@@Base+0x378>
   50e04:	ret
   50e08:	tst	x3, #0xc0000
   50e0c:	ubfx	x3, x3, #18, #2
   50e10:	b.ne	50d3c <aarch64_get_opcode@@Base+0x2d4>  // b.any
   50e14:	mov	w1, #0x1                   	// #1
   50e18:	mov	w0, w1
   50e1c:	str	w1, [x2]
   50e20:	ret
   50e24:	mov	w1, #0x10001000            	// #268439552
   50e28:	mov	w0, #0x0                   	// #0
   50e2c:	bics	xzr, x1, x3
   50e30:	b.ne	50d4c <aarch64_get_opcode@@Base+0x2e4>  // b.any
   50e34:	mov	w1, #0x10                  	// #16
   50e38:	mov	w0, #0x1                   	// #1
   50e3c:	str	w1, [x2]
   50e40:	ret
   50e44:	tst	x3, #0x180000
   50e48:	b.eq	50e14 <aarch64_get_opcode@@Base+0x3ac>  // b.none
   50e4c:	mov	w0, #0x0                   	// #0
   50e50:	b	50d4c <aarch64_get_opcode@@Base+0x2e4>
   50e54:	ubfx	x3, x3, #18, #2
   50e58:	mov	w0, #0x0                   	// #0
   50e5c:	cmp	x3, #0x2
   50e60:	b.ne	50d4c <aarch64_get_opcode@@Base+0x2e4>  // b.any
   50e64:	mov	w1, #0x2                   	// #2
   50e68:	mov	w0, #0x1                   	// #1
   50e6c:	str	w1, [x2]
   50e70:	ret
   50e74:	ubfx	x0, x3, #7, #2
   50e78:	cmp	x0, #0x3
   50e7c:	b.eq	50d6c <aarch64_get_opcode@@Base+0x304>  // b.none
   50e80:	cmp	x0, #0x1
   50e84:	mvn	x3, x3, lsr #28
   50e88:	cset	w1, eq  // eq = none
   50e8c:	tst	w1, w3
   50e90:	b.ne	51078 <aarch64_get_opcode@@Base+0x610>  // b.any
   50e94:	cbz	x0, 50e14 <aarch64_get_opcode@@Base+0x3ac>
   50e98:	mov	w0, #0x0                   	// #0
   50e9c:	b	50d4c <aarch64_get_opcode@@Base+0x2e4>
   50ea0:	ubfx	x1, x3, #5, #2
   50ea4:	mov	w0, #0x0                   	// #0
   50ea8:	cmp	x1, #0x2
   50eac:	b.ne	50d4c <aarch64_get_opcode@@Base+0x2e4>  // b.any
   50eb0:	tbnz	w3, #22, 50d4c <aarch64_get_opcode@@Base+0x2e4>
   50eb4:	mov	w1, #0xd                   	// #13
   50eb8:	mov	w0, #0x1                   	// #1
   50ebc:	str	w1, [x2]
   50ec0:	ret
   50ec4:	lsr	x1, x3, #16
   50ec8:	tbz	w3, #21, 51068 <aarch64_get_opcode@@Base+0x600>
   50ecc:	mov	w0, #0x0                   	// #0
   50ed0:	tbnz	w3, #9, 50d4c <aarch64_get_opcode@@Base+0x2e4>
   50ed4:	and	x1, x1, #0x30
   50ed8:	cmp	x1, #0x20
   50edc:	b.ne	50d4c <aarch64_get_opcode@@Base+0x2e4>  // b.any
   50ee0:	mov	w1, #0xc                   	// #12
   50ee4:	mov	w0, #0x1                   	// #1
   50ee8:	str	w1, [x2]
   50eec:	ret
   50ef0:	ubfx	x3, x3, #7, #2
   50ef4:	cmp	x3, #0x3
   50ef8:	b.eq	50d48 <aarch64_get_opcode@@Base+0x2e0>  // b.none
   50efc:	mov	w1, #0x7                   	// #7
   50f00:	mov	w0, #0x1                   	// #1
   50f04:	str	w1, [x2]
   50f08:	ret
   50f0c:	tst	x3, #0x60
   50f10:	ubfx	w0, w3, #23, #1
   50f14:	lsr	x1, x3, #21
   50f18:	csel	w0, w0, wzr, eq  // eq = none
   50f1c:	ubfx	x3, x3, #5, #2
   50f20:	cbz	w0, 51054 <aarch64_get_opcode@@Base+0x5ec>
   50f24:	mov	w0, #0x0                   	// #0
   50f28:	tbnz	w1, #1, 50d4c <aarch64_get_opcode@@Base+0x2e4>
   50f2c:	mov	w1, #0xe                   	// #14
   50f30:	mov	w0, #0x1                   	// #1
   50f34:	str	w1, [x2]
   50f38:	ret
   50f3c:	lsr	x0, x3, #22
   50f40:	orr	x3, x0, x3, lsr #5
   50f44:	and	w0, w3, #0x1
   50f48:	ret
   50f4c:	ubfx	x3, x3, #7, #2
   50f50:	cmp	x3, #0x2
   50f54:	b.eq	50d48 <aarch64_get_opcode@@Base+0x2e0>  // b.none
   50f58:	mov	w1, #0x6                   	// #6
   50f5c:	mov	w0, #0x1                   	// #1
   50f60:	str	w1, [x2]
   50f64:	ret
   50f68:	mov	w0, #0x0                   	// #0
   50f6c:	tbnz	w3, #5, 50d4c <aarch64_get_opcode@@Base+0x2e4>
   50f70:	lsr	x1, x3, #8
   50f74:	mov	x3, #0x9                   	// #9
   50f78:	and	x3, x1, x3
   50f7c:	cmp	x3, #0x1
   50f80:	b.eq	50f94 <aarch64_get_opcode@@Base+0x52c>  // b.none
   50f84:	mov	x3, #0x5                   	// #5
   50f88:	and	x1, x1, x3
   50f8c:	cmp	x1, #0x1
   50f90:	b.ne	50d4c <aarch64_get_opcode@@Base+0x2e4>  // b.any
   50f94:	mov	w1, #0xf                   	// #15
   50f98:	mov	w0, #0x1                   	// #1
   50f9c:	str	w1, [x2]
   50fa0:	ret
   50fa4:	tst	x3, #0xc0000
   50fa8:	mov	w0, #0x0                   	// #0
   50fac:	b.eq	50d4c <aarch64_get_opcode@@Base+0x2e4>  // b.none
   50fb0:	mov	w1, #0x5                   	// #5
   50fb4:	mov	w0, #0x1                   	// #1
   50fb8:	str	w1, [x2]
   50fbc:	ret
   50fc0:	ubfx	x3, x3, #7, #2
   50fc4:	cmp	x3, #0x3
   50fc8:	b.eq	50d6c <aarch64_get_opcode@@Base+0x304>  // b.none
   50fcc:	cbz	x3, 50e14 <aarch64_get_opcode@@Base+0x3ac>
   50fd0:	mov	w0, #0x0                   	// #0
   50fd4:	b	50d4c <aarch64_get_opcode@@Base+0x2e4>
   50fd8:	ubfx	x0, x3, #7, #2
   50fdc:	cmp	x0, #0x3
   50fe0:	b.ne	50efc <aarch64_get_opcode@@Base+0x494>  // b.any
   50fe4:	mov	w0, #0x0                   	// #0
   50fe8:	tbnz	w3, #28, 50d4c <aarch64_get_opcode@@Base+0x2e4>
   50fec:	mov	w1, #0xa                   	// #10
   50ff0:	mov	w0, #0x1                   	// #1
   50ff4:	str	w1, [x2]
   50ff8:	ret
   50ffc:	ubfx	x0, x3, #7, #2
   51000:	cmp	x0, #0x2
   51004:	b.eq	50fe4 <aarch64_get_opcode@@Base+0x57c>  // b.none
   51008:	b	50f58 <aarch64_get_opcode@@Base+0x4f0>
   5100c:	tst	x3, #0x180
   51010:	mov	w0, #0x0                   	// #0
   51014:	b.eq	50e14 <aarch64_get_opcode@@Base+0x3ac>  // b.none
   51018:	ret
   5101c:	tbnz	w3, #19, 50e64 <aarch64_get_opcode@@Base+0x3fc>
   51020:	mov	w0, #0x0                   	// #0
   51024:	b	50d4c <aarch64_get_opcode@@Base+0x2e4>
   51028:	ubfx	x4, x3, #7, #2
   5102c:	cmp	x4, #0x3
   51030:	b.eq	50d6c <aarch64_get_opcode@@Base+0x304>  // b.none
   51034:	ubfx	x1, x3, #28, #1
   51038:	mov	w0, #0x0                   	// #0
   5103c:	orr	x1, x1, x4
   51040:	cbnz	x1, 50d4c <aarch64_get_opcode@@Base+0x2e4>
   51044:	mov	w1, #0x8                   	// #8
   51048:	mov	w0, #0x1                   	// #1
   5104c:	str	w1, [x2]
   51050:	ret
   51054:	cmp	x3, #0x2
   51058:	mov	w0, #0x0                   	// #0
   5105c:	b.ne	50d4c <aarch64_get_opcode@@Base+0x2e4>  // b.any
   51060:	tbz	w1, #1, 50eb4 <aarch64_get_opcode@@Base+0x44c>
   51064:	ret
   51068:	mov	w1, #0xb                   	// #11
   5106c:	mov	w0, #0x1                   	// #1
   51070:	str	w1, [x2]
   51074:	ret
   51078:	mov	w1, #0x9                   	// #9
   5107c:	mov	w0, #0x1                   	// #1
   51080:	str	w1, [x2]
   51084:	ret
   51088:	sub	w0, w0, #0xf
   5108c:	cmp	w0, #0x6f
   51090:	b.ls	5109c <aarch64_get_opcode@@Base+0x634>  // b.plast
   51094:	mov	x0, #0x0                   	// #0
   51098:	ret
   5109c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   510a0:	add	x1, x1, #0x13c
   510a4:	ldrb	w0, [x1, w0, uxtw]
   510a8:	adr	x1, 510b4 <aarch64_get_opcode@@Base+0x64c>
   510ac:	add	x0, x1, w0, sxtb #2
   510b0:	br	x0
   510b4:	adrp	x0, 68000 <fields@@Base+0x4f60>
   510b8:	add	x0, x0, #0xaf0
   510bc:	ret
   510c0:	adrp	x0, 68000 <fields@@Base+0x4f60>
   510c4:	add	x0, x0, #0xae0
   510c8:	ret
   510cc:	adrp	x0, 68000 <fields@@Base+0x4f60>
   510d0:	add	x0, x0, #0xad0
   510d4:	ret
   510d8:	adrp	x0, 68000 <fields@@Base+0x4f60>
   510dc:	add	x0, x0, #0xac0
   510e0:	ret
   510e4:	adrp	x0, 68000 <fields@@Base+0x4f60>
   510e8:	add	x0, x0, #0xab0
   510ec:	ret
   510f0:	adrp	x0, 68000 <fields@@Base+0x4f60>
   510f4:	add	x0, x0, #0xaa0
   510f8:	ret
   510fc:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51100:	add	x0, x0, #0xa90
   51104:	ret
   51108:	adrp	x0, 68000 <fields@@Base+0x4f60>
   5110c:	add	x0, x0, #0xa88
   51110:	ret
   51114:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51118:	add	x0, x0, #0xa80
   5111c:	ret
   51120:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51124:	add	x0, x0, #0xa78
   51128:	ret
   5112c:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51130:	add	x0, x0, #0xa70
   51134:	ret
   51138:	adrp	x0, 68000 <fields@@Base+0x4f60>
   5113c:	add	x0, x0, #0xa68
   51140:	ret
   51144:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51148:	add	x0, x0, #0xa60
   5114c:	ret
   51150:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51154:	add	x0, x0, #0xa58
   51158:	ret
   5115c:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51160:	add	x0, x0, #0xa50
   51164:	ret
   51168:	adrp	x0, 68000 <fields@@Base+0x4f60>
   5116c:	add	x0, x0, #0xa48
   51170:	ret
   51174:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51178:	add	x0, x0, #0xa40
   5117c:	ret
   51180:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51184:	add	x0, x0, #0xa38
   51188:	ret
   5118c:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51190:	add	x0, x0, #0xa30
   51194:	ret
   51198:	adrp	x0, 68000 <fields@@Base+0x4f60>
   5119c:	add	x0, x0, #0xa28
   511a0:	ret
   511a4:	adrp	x0, 68000 <fields@@Base+0x4f60>
   511a8:	add	x0, x0, #0xa20
   511ac:	ret
   511b0:	adrp	x0, 68000 <fields@@Base+0x4f60>
   511b4:	add	x0, x0, #0xa18
   511b8:	ret
   511bc:	adrp	x0, 68000 <fields@@Base+0x4f60>
   511c0:	add	x0, x0, #0xa10
   511c4:	ret
   511c8:	adrp	x0, 68000 <fields@@Base+0x4f60>
   511cc:	add	x0, x0, #0xa08
   511d0:	ret
   511d4:	adrp	x0, 68000 <fields@@Base+0x4f60>
   511d8:	add	x0, x0, #0xa00
   511dc:	ret
   511e0:	adrp	x0, 68000 <fields@@Base+0x4f60>
   511e4:	add	x0, x0, #0x9f8
   511e8:	ret
   511ec:	adrp	x0, 68000 <fields@@Base+0x4f60>
   511f0:	add	x0, x0, #0x9f0
   511f4:	ret
   511f8:	adrp	x0, 68000 <fields@@Base+0x4f60>
   511fc:	add	x0, x0, #0x9e8
   51200:	ret
   51204:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51208:	add	x0, x0, #0x9e0
   5120c:	ret
   51210:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51214:	add	x0, x0, #0x9d8
   51218:	ret
   5121c:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51220:	add	x0, x0, #0x9d0
   51224:	ret
   51228:	adrp	x0, 68000 <fields@@Base+0x4f60>
   5122c:	add	x0, x0, #0x9c8
   51230:	ret
   51234:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51238:	add	x0, x0, #0x9c0
   5123c:	ret
   51240:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51244:	add	x0, x0, #0x9b8
   51248:	ret
   5124c:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51250:	add	x0, x0, #0xb00
   51254:	ret
   51258:	cmp	w0, #0x98
   5125c:	b.ls	5126c <aarch64_get_opcode@@Base+0x804>  // b.plast
   51260:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51264:	add	x0, x0, #0xb08
   51268:	ret
   5126c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   51270:	add	x1, x1, #0x1ac
   51274:	ldrb	w0, [x1, w0, uxtw]
   51278:	adr	x1, 51284 <aarch64_get_opcode@@Base+0x81c>
   5127c:	add	x0, x1, w0, sxtb #2
   51280:	br	x0
   51284:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51288:	add	x0, x0, #0xc10
   5128c:	ret
   51290:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51294:	add	x0, x0, #0xc00
   51298:	ret
   5129c:	adrp	x0, 68000 <fields@@Base+0x4f60>
   512a0:	add	x0, x0, #0xbf0
   512a4:	ret
   512a8:	adrp	x0, 68000 <fields@@Base+0x4f60>
   512ac:	add	x0, x0, #0xbe0
   512b0:	ret
   512b4:	adrp	x0, 68000 <fields@@Base+0x4f60>
   512b8:	add	x0, x0, #0xbd0
   512bc:	ret
   512c0:	adrp	x0, 68000 <fields@@Base+0x4f60>
   512c4:	add	x0, x0, #0xbc0
   512c8:	ret
   512cc:	adrp	x0, 68000 <fields@@Base+0x4f60>
   512d0:	add	x0, x0, #0xbb0
   512d4:	ret
   512d8:	adrp	x0, 68000 <fields@@Base+0x4f60>
   512dc:	add	x0, x0, #0xba8
   512e0:	ret
   512e4:	adrp	x0, 68000 <fields@@Base+0x4f60>
   512e8:	add	x0, x0, #0xba0
   512ec:	ret
   512f0:	adrp	x0, 68000 <fields@@Base+0x4f60>
   512f4:	add	x0, x0, #0xb98
   512f8:	ret
   512fc:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51300:	add	x0, x0, #0xb88
   51304:	ret
   51308:	adrp	x0, 68000 <fields@@Base+0x4f60>
   5130c:	add	x0, x0, #0xb78
   51310:	ret
   51314:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51318:	add	x0, x0, #0xb70
   5131c:	ret
   51320:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51324:	add	x0, x0, #0xb68
   51328:	ret
   5132c:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51330:	add	x0, x0, #0xb60
   51334:	ret
   51338:	adrp	x0, 68000 <fields@@Base+0x4f60>
   5133c:	add	x0, x0, #0xb58
   51340:	ret
   51344:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51348:	add	x0, x0, #0xb50
   5134c:	ret
   51350:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51354:	add	x0, x0, #0xb48
   51358:	ret
   5135c:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51360:	add	x0, x0, #0xb40
   51364:	ret
   51368:	adrp	x0, 68000 <fields@@Base+0x4f60>
   5136c:	add	x0, x0, #0xb38
   51370:	ret
   51374:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51378:	add	x0, x0, #0xb30
   5137c:	ret
   51380:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51384:	add	x0, x0, #0xb28
   51388:	ret
   5138c:	adrp	x0, 68000 <fields@@Base+0x4f60>
   51390:	add	x0, x0, #0xb20
   51394:	ret
   51398:	adrp	x0, 68000 <fields@@Base+0x4f60>
   5139c:	add	x0, x0, #0xb18
   513a0:	ret
   513a4:	adrp	x0, 68000 <fields@@Base+0x4f60>
   513a8:	add	x0, x0, #0xc18
   513ac:	ret
   513b0:	mov	x7, x0
   513b4:	mov	w8, #0x0                   	// #0
   513b8:	mov	x10, #0x0                   	// #0
   513bc:	mov	x11, #0x2                   	// #2
   513c0:	ldrb	w5, [x7]
   513c4:	mov	w4, #0x0                   	// #0
   513c8:	sub	w0, w5, #0x30
   513cc:	and	w0, w0, #0xff
   513d0:	cmp	w0, #0x9
   513d4:	b.hi	513f8 <aarch64_get_opcode@@Base+0x990>  // b.pmore
   513d8:	add	w4, w4, w4, lsl #2
   513dc:	add	w4, w5, w4, lsl #1
   513e0:	ldrb	w5, [x7, #1]!
   513e4:	sub	w4, w4, #0x30
   513e8:	sub	w6, w5, #0x30
   513ec:	and	w6, w6, #0xff
   513f0:	cmp	w6, #0x9
   513f4:	b.ls	513d8 <aarch64_get_opcode@@Base+0x970>  // b.plast
   513f8:	cmp	w5, #0x2d
   513fc:	add	x0, x7, #0x1
   51400:	b.eq	51440 <aarch64_get_opcode@@Base+0x9d8>  // b.none
   51404:	mov	x6, x0
   51408:	mov	x9, #0x1                   	// #1
   5140c:	mov	x0, x7
   51410:	mov	x7, x6
   51414:	mov	w6, #0x1                   	// #1
   51418:	lsr	x4, x1, x4
   5141c:	and	x4, x4, x9
   51420:	cmp	w5, #0x2c
   51424:	lsl	x4, x4, x8
   51428:	add	w8, w8, w6
   5142c:	orr	x10, x10, x4
   51430:	b.eq	513c0 <aarch64_get_opcode@@Base+0x958>  // b.none
   51434:	str	x10, [x2]
   51438:	str	w8, [x3]
   5143c:	ret
   51440:	ldrb	w5, [x7, #1]
   51444:	sub	w6, w5, #0x30
   51448:	and	w6, w6, #0xff
   5144c:	cmp	w6, #0x9
   51450:	mov	w6, #0x0                   	// #0
   51454:	b.hi	51478 <aarch64_get_opcode@@Base+0xa10>  // b.pmore
   51458:	add	w6, w6, w6, lsl #2
   5145c:	add	w6, w5, w6, lsl #1
   51460:	ldrb	w5, [x0, #1]!
   51464:	sub	w6, w6, #0x30
   51468:	sub	w7, w5, #0x30
   5146c:	and	w7, w7, #0xff
   51470:	cmp	w7, #0x9
   51474:	b.ls	51458 <aarch64_get_opcode@@Base+0x9f0>  // b.plast
   51478:	subs	w6, w6, w4
   5147c:	b.mi	51494 <aarch64_get_opcode@@Base+0xa2c>  // b.first
   51480:	lsl	x9, x11, x6
   51484:	add	x7, x0, #0x1
   51488:	add	w6, w6, #0x1
   5148c:	sub	x9, x9, #0x1
   51490:	b	51418 <aarch64_get_opcode@@Base+0x9b0>
   51494:	stp	x29, x30, [sp, #-16]!
   51498:	mov	x29, sp
   5149c:	bl	35670 <abort@plt>
   514a0:	stp	x29, x30, [sp, #-192]!
   514a4:	adrp	x4, 68000 <fields@@Base+0x4f60>
   514a8:	mov	x29, sp
   514ac:	stp	x21, x22, [sp, #32]
   514b0:	mov	x21, x1
   514b4:	adrp	x22, 91000 <aarch64_operands@@Base+0x1bd0>
   514b8:	add	x1, x22, #0xb60
   514bc:	stp	x19, x20, [sp, #16]
   514c0:	stp	x25, x26, [sp, #64]
   514c4:	add	x25, x4, #0xc20
   514c8:	stp	x27, x28, [sp, #80]
   514cc:	mov	x28, x2
   514d0:	ldp	x20, x27, [x21]
   514d4:	b	514e4 <aarch64_get_opcode@@Base+0xa7c>
   514d8:	ldr	x25, [x1, #72]
   514dc:	add	x1, x1, #0x28
   514e0:	cbz	x25, 51770 <aarch64_get_opcode@@Base+0xd08>
   514e4:	ldrh	w2, [x1, #26]
   514e8:	ldrh	w3, [x1, #24]
   514ec:	and	x2, x2, x28
   514f0:	cmp	x2, x3
   514f4:	b.ne	514d8 <aarch64_get_opcode@@Base+0xa70>  // b.any
   514f8:	ldrb	w2, [x25]
   514fc:	cbz	w2, 5196c <aarch64_get_opcode@@Base+0xf04>
   51500:	asr	x3, x28, #3
   51504:	tst	x28, #0x7c0
   51508:	and	x9, x3, #0x7
   5150c:	ubfx	x8, x28, #6, #5
   51510:	mov	x10, #0x20                  	// #32
   51514:	ubfx	w11, w28, #8, #3
   51518:	asr	x1, x28, #2
   5151c:	csel	x4, x8, x10, ne  // ne = any
   51520:	and	x1, x1, #0x3e
   51524:	tst	x28, #0x40
   51528:	and	x3, x3, #0x40
   5152c:	add	x10, x9, #0x8
   51530:	mov	w7, #0x1                   	// #1
   51534:	str	x4, [sp, #160]
   51538:	lsl	w7, w7, w11
   5153c:	add	x4, x0, #0x4
   51540:	orr	x0, x1, x3
   51544:	csel	x1, x9, x10, eq  // eq = none
   51548:	and	x8, x28, #0x7
   5154c:	add	x0, x0, x4
   51550:	str	x1, [sp, #144]
   51554:	sxtw	x1, w7
   51558:	tst	x28, #0x80
   5155c:	add	x7, x8, #0x8
   51560:	str	x0, [sp, #168]
   51564:	and	x0, x1, x28
   51568:	str	x0, [sp, #136]
   5156c:	csel	x0, x8, x7, eq  // eq = none
   51570:	str	x0, [sp, #152]
   51574:	lsl	w0, w28, #1
   51578:	str	w0, [sp, #176]
   5157c:	ubfiz	w0, w28, #1, #3
   51580:	add	x5, x22, #0xb60
   51584:	str	w0, [sp, #180]
   51588:	ubfx	x0, x28, #4, #4
   5158c:	mov	x22, #0x0                   	// #0
   51590:	add	x26, x5, #0xe78
   51594:	stp	x23, x24, [sp, #48]
   51598:	stp	x22, x5, [sp, #104]
   5159c:	str	w28, [sp, #124]
   515a0:	str	x0, [sp, #128]
   515a4:	ubfx	w0, w28, #8, #1
   515a8:	str	w0, [sp, #120]
   515ac:	str	x4, [sp, #184]
   515b0:	b	515d8 <aarch64_get_opcode@@Base+0xb70>
   515b4:	mov	x0, x27
   515b8:	adrp	x1, 68000 <fields@@Base+0x4f60>
   515bc:	add	x1, x1, #0xc30
   515c0:	blr	x20
   515c4:	mov	x0, x19
   515c8:	mov	x19, x25
   515cc:	mov	x25, x0
   515d0:	ldrb	w2, [x19, #1]
   515d4:	cbz	w2, 51730 <aarch64_get_opcode@@Base+0xcc8>
   515d8:	cmp	w2, #0x25
   515dc:	add	x19, x25, #0x1
   515e0:	b.ne	515b4 <aarch64_get_opcode@@Base+0xb4c>  // b.any
   515e4:	ldrb	w0, [x25, #1]
   515e8:	cmp	w0, #0x4f
   515ec:	b.eq	51b28 <aarch64_get_opcode@@Base+0x10c0>  // b.none
   515f0:	b.hi	51848 <aarch64_get_opcode@@Base+0xde0>  // b.pmore
   515f4:	cmp	w0, #0x44
   515f8:	b.eq	519c8 <aarch64_get_opcode@@Base+0xf60>  // b.none
   515fc:	b.ls	51818 <aarch64_get_opcode@@Base+0xdb0>  // b.plast
   51600:	cmp	w0, #0x4d
   51604:	b.eq	51960 <aarch64_get_opcode@@Base+0xef8>  // b.none
   51608:	cmp	w0, #0x4e
   5160c:	b.ne	5179c <aarch64_get_opcode@@Base+0xd34>  // b.any
   51610:	ldr	w0, [sp, #120]
   51614:	stp	w0, wzr, [sp, #96]
   51618:	mov	x0, x27
   5161c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   51620:	adrp	x24, fd000 <aarch64_opcode_table@@Base+0x55a20>
   51624:	add	x1, x1, #0xc90
   51628:	add	x24, x24, #0x650
   5162c:	blr	x20
   51630:	mov	w22, #0x0                   	// #0
   51634:	mov	w1, #0x0                   	// #0
   51638:	mov	w23, #0x1                   	// #1
   5163c:	nop
   51640:	lsl	w0, w23, w22
   51644:	sxtw	x0, w0
   51648:	tst	x0, x28
   5164c:	b.eq	51690 <aarch64_get_opcode@@Base+0xc28>  // b.none
   51650:	cbz	w1, 51664 <aarch64_get_opcode@@Base+0xbfc>
   51654:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   51658:	mov	x0, x27
   5165c:	add	x1, x1, #0x438
   51660:	blr	x20
   51664:	ldr	w2, [x24]
   51668:	mov	x0, x27
   5166c:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   51670:	add	x1, x1, #0xe48
   51674:	add	x2, x2, x2, lsl #3
   51678:	lsl	x2, x2, #1
   5167c:	add	x2, x2, w22, sxtw
   51680:	add	x2, x2, #0x2
   51684:	ldr	x2, [x26, x2, lsl #3]
   51688:	blr	x20
   5168c:	mov	w1, #0x1                   	// #1
   51690:	add	w22, w22, #0x1
   51694:	cmp	w22, #0x8
   51698:	b.ne	51640 <aarch64_get_opcode@@Base+0xbd8>  // b.any
   5169c:	ldr	w0, [sp, #96]
   516a0:	cbz	w0, 51984 <aarch64_get_opcode@@Base+0xf1c>
   516a4:	cbz	w1, 516b8 <aarch64_get_opcode@@Base+0xc50>
   516a8:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   516ac:	mov	x0, x27
   516b0:	add	x1, x1, #0x438
   516b4:	blr	x20
   516b8:	adrp	x24, fd000 <aarch64_opcode_table@@Base+0x55a20>
   516bc:	mov	x0, x27
   516c0:	adrp	x23, 6d000 <fields@@Base+0x9f60>
   516c4:	add	x1, x23, #0xe48
   516c8:	ldr	w2, [x24, #1616]
   516cc:	add	x2, x2, x2, lsl #3
   516d0:	add	x2, x26, x2, lsl #4
   516d4:	ldr	x2, [x2, #128]
   516d8:	blr	x20
   516dc:	ldr	w0, [sp, #100]
   516e0:	cbz	w0, 51710 <aarch64_get_opcode@@Base+0xca8>
   516e4:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   516e8:	mov	x0, x27
   516ec:	add	x1, x1, #0x438
   516f0:	blr	x20
   516f4:	ldr	w2, [x24, #1616]
   516f8:	add	x1, x23, #0xe48
   516fc:	mov	x0, x27
   51700:	add	x2, x2, x2, lsl #3
   51704:	add	x2, x26, x2, lsl #4
   51708:	ldr	x2, [x2, #136]
   5170c:	blr	x20
   51710:	mov	x0, x27
   51714:	adrp	x1, 68000 <fields@@Base+0x4f60>
   51718:	add	x1, x1, #0xd70
   5171c:	blr	x20
   51720:	ldrb	w2, [x19, #1]
   51724:	add	x25, x25, #0x2
   51728:	cbnz	w2, 515d8 <aarch64_get_opcode@@Base+0xb70>
   5172c:	nop
   51730:	ldr	x22, [sp, #104]
   51734:	add	x0, x22, #0x10
   51738:	cmp	x0, #0x30
   5173c:	b.ls	51968 <aarch64_get_opcode@@Base+0xf00>  // b.plast
   51740:	mov	x2, x22
   51744:	mov	x0, x27
   51748:	mov	x16, x20
   5174c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   51750:	ldp	x19, x20, [sp, #16]
   51754:	add	x1, x1, #0xcb8
   51758:	ldp	x21, x22, [sp, #32]
   5175c:	ldp	x23, x24, [sp, #48]
   51760:	ldp	x25, x26, [sp, #64]
   51764:	ldp	x27, x28, [sp, #80]
   51768:	ldp	x29, x30, [sp], #192
   5176c:	br	x16
   51770:	mov	w2, w28
   51774:	mov	x0, x27
   51778:	mov	x16, x20
   5177c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   51780:	ldp	x19, x20, [sp, #16]
   51784:	add	x1, x1, #0xcc8
   51788:	ldp	x21, x22, [sp, #32]
   5178c:	ldp	x25, x26, [sp, #64]
   51790:	ldp	x27, x28, [sp, #80]
   51794:	ldp	x29, x30, [sp], #192
   51798:	br	x16
   5179c:	cmp	w0, #0x49
   517a0:	b.ne	51c7c <aarch64_get_opcode@@Base+0x1214>  // b.any
   517a4:	adrp	x0, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   517a8:	ldr	w1, [sp, #124]
   517ac:	ldr	w22, [sp, #176]
   517b0:	and	w1, w1, #0xff
   517b4:	str	w1, [x0, #1044]
   517b8:	ldr	w0, [sp, #180]
   517bc:	cbz	w0, 517f0 <aarch64_get_opcode@@Base+0xd88>
   517c0:	adrp	x24, 60000 <xexit@@Base+0x4a80>
   517c4:	adrp	x23, 72000 <fields@@Base+0xef60>
   517c8:	add	x24, x24, #0x60
   517cc:	add	x23, x23, #0xdd8
   517d0:	eor	x0, x28, x22
   517d4:	lsl	w22, w22, #1
   517d8:	tbz	w0, #4, 519b0 <aarch64_get_opcode@@Base+0xf48>
   517dc:	mov	x1, x23
   517e0:	mov	x0, x27
   517e4:	blr	x20
   517e8:	tst	w22, #0xe
   517ec:	b.ne	517d0 <aarch64_get_opcode@@Base+0xd68>  // b.any
   517f0:	ldr	x0, [sp, #112]
   517f4:	add	x25, x25, #0x2
   517f8:	ldr	x3, [sp, #128]
   517fc:	add	x2, x0, #0xdf0
   51800:	adrp	x1, 68000 <fields@@Base+0x4f60>
   51804:	mov	x0, x27
   51808:	add	x1, x1, #0xc40
   5180c:	ldr	x2, [x2, x3, lsl #3]
   51810:	blr	x20
   51814:	b	515d0 <aarch64_get_opcode@@Base+0xb68>
   51818:	cmp	w0, #0x39
   5181c:	b.hi	51888 <aarch64_get_opcode@@Base+0xe20>  // b.pmore
   51820:	cmp	w0, #0x2f
   51824:	b.hi	51a48 <aarch64_get_opcode@@Base+0xfe0>  // b.pmore
   51828:	cmp	w0, #0x25
   5182c:	b.ne	51c7c <aarch64_get_opcode@@Base+0x1214>  // b.any
   51830:	add	x25, x25, #0x2
   51834:	mov	x0, x27
   51838:	adrp	x1, 68000 <fields@@Base+0x4f60>
   5183c:	add	x1, x1, #0xc38
   51840:	blr	x20
   51844:	b	515d0 <aarch64_get_opcode@@Base+0xb68>
   51848:	cmp	w0, #0x62
   5184c:	b.eq	519fc <aarch64_get_opcode@@Base+0xf94>  // b.none
   51850:	b.ls	518e0 <aarch64_get_opcode@@Base+0xe78>  // b.plast
   51854:	cmp	w0, #0x73
   51858:	b.eq	51a2c <aarch64_get_opcode@@Base+0xfc4>  // b.none
   5185c:	cmp	w0, #0x78
   51860:	b.ne	518c4 <aarch64_get_opcode@@Base+0xe5c>  // b.any
   51864:	adrp	x0, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   51868:	add	x25, x25, #0x2
   5186c:	ldr	w0, [x0, #1044]
   51870:	cbz	w0, 515d0 <aarch64_get_opcode@@Base+0xb68>
   51874:	mov	x0, x27
   51878:	adrp	x1, 68000 <fields@@Base+0x4f60>
   5187c:	add	x1, x1, #0xc48
   51880:	blr	x20
   51884:	b	515d0 <aarch64_get_opcode@@Base+0xb68>
   51888:	cmp	w0, #0x43
   5188c:	b.ne	51c7c <aarch64_get_opcode@@Base+0x1214>  // b.any
   51890:	adrp	x0, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   51894:	add	x25, x25, #0x2
   51898:	ldr	w0, [x0, #1040]
   5189c:	cbz	w0, 5199c <aarch64_get_opcode@@Base+0xf34>
   518a0:	ubfx	x2, x0, #4, #4
   518a4:	ldr	x0, [sp, #112]
   518a8:	add	x3, x0, #0xdf0
   518ac:	ldr	x2, [x3, x2, lsl #3]
   518b0:	adrp	x23, 6d000 <fields@@Base+0x9f60>
   518b4:	mov	x0, x27
   518b8:	add	x1, x23, #0xe48
   518bc:	blr	x20
   518c0:	b	515d0 <aarch64_get_opcode@@Base+0xb68>
   518c4:	cmp	w0, #0x63
   518c8:	b.ne	51c7c <aarch64_get_opcode@@Base+0x1214>  // b.any
   518cc:	adrp	x0, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   518d0:	add	x25, x25, #0x2
   518d4:	ldr	w0, [x0, #1040]
   518d8:	cbz	w0, 515d0 <aarch64_get_opcode@@Base+0xb68>
   518dc:	b	518a0 <aarch64_get_opcode@@Base+0xe38>
   518e0:	cmp	w0, #0x57
   518e4:	b.eq	51acc <aarch64_get_opcode@@Base+0x1064>  // b.none
   518e8:	cmp	w0, #0x58
   518ec:	b.ne	51924 <aarch64_get_opcode@@Base+0xebc>  // b.any
   518f0:	adrp	x0, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   518f4:	add	x25, x25, #0x2
   518f8:	ldr	w0, [x0, #1040]
   518fc:	cbz	w0, 515d0 <aarch64_get_opcode@@Base+0xb68>
   51900:	ubfx	x2, x0, #4, #4
   51904:	adrp	x1, 68000 <fields@@Base+0x4f60>
   51908:	ldr	x0, [sp, #112]
   5190c:	add	x1, x1, #0xc70
   51910:	add	x3, x0, #0xdf0
   51914:	mov	x0, x27
   51918:	ldr	x2, [x3, x2, lsl #3]
   5191c:	blr	x20
   51920:	b	515d0 <aarch64_get_opcode@@Base+0xb68>
   51924:	cmp	w0, #0x53
   51928:	b.ne	51c7c <aarch64_get_opcode@@Base+0x1214>  // b.any
   5192c:	adrp	x24, fd000 <aarch64_opcode_table@@Base+0x55a20>
   51930:	adrp	x23, 6d000 <fields@@Base+0x9f60>
   51934:	ldr	x3, [sp, #144]
   51938:	add	x25, x25, #0x2
   5193c:	ldr	w2, [x24, #1616]
   51940:	mov	x0, x27
   51944:	add	x1, x23, #0xe48
   51948:	add	x2, x2, x2, lsl #3
   5194c:	add	x2, x3, x2, lsl #1
   51950:	add	x2, x2, #0x2
   51954:	ldr	x2, [x26, x2, lsl #3]
   51958:	blr	x20
   5195c:	b	515d0 <aarch64_get_opcode@@Base+0xb68>
   51960:	stp	wzr, wzr, [sp, #96]
   51964:	b	51618 <aarch64_get_opcode@@Base+0xbb0>
   51968:	ldp	x23, x24, [sp, #48]
   5196c:	ldp	x19, x20, [sp, #16]
   51970:	ldp	x21, x22, [sp, #32]
   51974:	ldp	x25, x26, [sp, #64]
   51978:	ldp	x27, x28, [sp, #80]
   5197c:	ldp	x29, x30, [sp], #192
   51980:	ret
   51984:	ldr	w0, [sp, #100]
   51988:	cbz	w0, 51710 <aarch64_get_opcode@@Base+0xca8>
   5198c:	adrp	x23, 6d000 <fields@@Base+0x9f60>
   51990:	adrp	x24, fd000 <aarch64_opcode_table@@Base+0x55a20>
   51994:	cbz	w1, 516f4 <aarch64_get_opcode@@Base+0xc8c>
   51998:	b	516e4 <aarch64_get_opcode@@Base+0xc7c>
   5199c:	mov	x0, x27
   519a0:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   519a4:	add	x1, x1, #0x460
   519a8:	blr	x20
   519ac:	b	515d0 <aarch64_get_opcode@@Base+0xb68>
   519b0:	mov	x1, x24
   519b4:	mov	x0, x27
   519b8:	blr	x20
   519bc:	tst	w22, #0xe
   519c0:	b.ne	517d0 <aarch64_get_opcode@@Base+0xd68>  // b.any
   519c4:	b	517f0 <aarch64_get_opcode@@Base+0xd88>
   519c8:	adrp	x24, fd000 <aarch64_opcode_table@@Base+0x55a20>
   519cc:	adrp	x23, 6d000 <fields@@Base+0x9f60>
   519d0:	ldr	x3, [sp, #152]
   519d4:	add	x25, x25, #0x2
   519d8:	ldr	w2, [x24, #1616]
   519dc:	mov	x0, x27
   519e0:	add	x1, x23, #0xe48
   519e4:	add	x2, x2, x2, lsl #3
   519e8:	add	x2, x3, x2, lsl #1
   519ec:	add	x2, x2, #0x2
   519f0:	ldr	x2, [x26, x2, lsl #3]
   519f4:	blr	x20
   519f8:	b	515d0 <aarch64_get_opcode@@Base+0xb68>
   519fc:	ldr	x2, [x21, #120]
   51a00:	mov	x1, x21
   51a04:	ldr	x22, [sp, #168]
   51a08:	add	x25, x25, #0x2
   51a0c:	mov	x0, x22
   51a10:	blr	x2
   51a14:	mov	w1, #0x1                   	// #1
   51a18:	mov	w0, #0x2                   	// #2
   51a1c:	strb	w1, [x21, #196]
   51a20:	str	w0, [x21, #200]
   51a24:	str	x22, [x21, #208]
   51a28:	b	515d0 <aarch64_get_opcode@@Base+0xb68>
   51a2c:	ldr	x2, [sp, #160]
   51a30:	add	x25, x25, #0x2
   51a34:	mov	x0, x27
   51a38:	adrp	x1, 68000 <fields@@Base+0x4f60>
   51a3c:	add	x1, x1, #0xca0
   51a40:	blr	x20
   51a44:	b	515d0 <aarch64_get_opcode@@Base+0xb68>
   51a48:	ldrb	w2, [x25, #2]
   51a4c:	sub	w0, w0, #0x30
   51a50:	add	x3, x25, #0x2
   51a54:	sub	w1, w2, #0x30
   51a58:	and	w1, w1, #0xff
   51a5c:	cmp	w1, #0x9
   51a60:	b.hi	51a88 <aarch64_get_opcode@@Base+0x1020>  // b.pmore
   51a64:	nop
   51a68:	add	w0, w0, w0, lsl #2
   51a6c:	add	w0, w2, w0, lsl #1
   51a70:	ldrb	w2, [x3, #1]!
   51a74:	sub	w0, w0, #0x30
   51a78:	sub	w1, w2, #0x30
   51a7c:	and	w1, w1, #0xff
   51a80:	cmp	w1, #0x9
   51a84:	b.ls	51a68 <aarch64_get_opcode@@Base+0x1000>  // b.plast
   51a88:	cmp	w2, #0x2d
   51a8c:	b.eq	51b34 <aarch64_get_opcode@@Base+0x10cc>  // b.none
   51a90:	cmp	w2, #0x3f
   51a94:	b.ne	51aec <aarch64_get_opcode@@Base+0x1084>  // b.any
   51a98:	mov	w1, #0x1                   	// #1
   51a9c:	add	x19, x3, #0x2
   51aa0:	lsl	w0, w1, w0
   51aa4:	add	x25, x3, #0x3
   51aa8:	sxtw	x0, w0
   51aac:	tst	x0, x28
   51ab0:	b.ne	51b10 <aarch64_get_opcode@@Base+0x10a8>  // b.any
   51ab4:	ldrb	w2, [x3, #2]
   51ab8:	mov	x0, x27
   51abc:	adrp	x1, 68000 <fields@@Base+0x4f60>
   51ac0:	add	x1, x1, #0xc30
   51ac4:	blr	x20
   51ac8:	b	515d0 <aarch64_get_opcode@@Base+0xb68>
   51acc:	ldr	x0, [sp, #136]
   51ad0:	add	x25, x25, #0x2
   51ad4:	cbnz	x0, 515d0 <aarch64_get_opcode@@Base+0xb68>
   51ad8:	mov	x0, x27
   51adc:	adrp	x1, 68000 <fields@@Base+0x4f60>
   51ae0:	add	x1, x1, #0xc98
   51ae4:	blr	x20
   51ae8:	b	515d0 <aarch64_get_opcode@@Base+0xb68>
   51aec:	cmp	w2, #0x27
   51af0:	b.ne	51c7c <aarch64_get_opcode@@Base+0x1214>  // b.any
   51af4:	mov	w1, #0x1                   	// #1
   51af8:	add	x19, x3, #0x1
   51afc:	lsl	w0, w1, w0
   51b00:	add	x25, x3, #0x2
   51b04:	sxtw	x0, w0
   51b08:	tst	x0, x28
   51b0c:	b.eq	515d0 <aarch64_get_opcode@@Base+0xb68>  // b.none
   51b10:	ldrb	w2, [x3, #1]
   51b14:	mov	x0, x27
   51b18:	adrp	x1, 68000 <fields@@Base+0x4f60>
   51b1c:	add	x1, x1, #0xc30
   51b20:	blr	x20
   51b24:	b	515d0 <aarch64_get_opcode@@Base+0xb68>
   51b28:	ldr	w0, [sp, #120]
   51b2c:	stp	wzr, w0, [sp, #96]
   51b30:	b	51618 <aarch64_get_opcode@@Base+0xbb0>
   51b34:	ldrb	w4, [x3, #1]
   51b38:	add	x19, x3, #0x1
   51b3c:	sub	w1, w4, #0x30
   51b40:	and	w1, w1, #0xff
   51b44:	cmp	w1, #0x9
   51b48:	b.hi	51c7c <aarch64_get_opcode@@Base+0x1214>  // b.pmore
   51b4c:	mov	w1, #0x0                   	// #0
   51b50:	add	w1, w1, w1, lsl #2
   51b54:	mov	x25, x19
   51b58:	add	w1, w4, w1, lsl #1
   51b5c:	ldrb	w4, [x19, #1]!
   51b60:	sub	w1, w1, #0x30
   51b64:	sub	w2, w4, #0x30
   51b68:	and	w2, w2, #0xff
   51b6c:	cmp	w2, #0x9
   51b70:	b.ls	51b50 <aarch64_get_opcode@@Base+0x10e8>  // b.plast
   51b74:	cbz	w1, 51c7c <aarch64_get_opcode@@Base+0x1214>
   51b78:	sub	w2, w1, w0
   51b7c:	mov	w24, #0x2                   	// #2
   51b80:	asr	x0, x28, x0
   51b84:	cmp	w4, #0x63
   51b88:	lsl	w2, w24, w2
   51b8c:	sub	w2, w2, #0x1
   51b90:	sxtw	x2, w2
   51b94:	and	x2, x2, x0
   51b98:	b.eq	51cb8 <aarch64_get_opcode@@Base+0x1250>  // b.none
   51b9c:	b.hi	51bf8 <aarch64_get_opcode@@Base+0x1190>  // b.pmore
   51ba0:	cmp	w4, #0x57
   51ba4:	b.eq	51c80 <aarch64_get_opcode@@Base+0x1218>  // b.none
   51ba8:	b.hi	51c48 <aarch64_get_opcode@@Base+0x11e0>  // b.pmore
   51bac:	cmp	w4, #0x42
   51bb0:	b.ne	51c20 <aarch64_get_opcode@@Base+0x11b8>  // b.any
   51bb4:	mov	w22, #0x1                   	// #1
   51bb8:	add	x25, x25, #0x2
   51bbc:	lsl	w0, w22, w1
   51bc0:	mov	x1, x21
   51bc4:	sxtw	x0, w0
   51bc8:	str	xzr, [sp, #104]
   51bcc:	eor	x2, x0, x2
   51bd0:	sub	x0, x2, x0
   51bd4:	ldr	x2, [sp, #184]
   51bd8:	ldr	x4, [x21, #120]
   51bdc:	add	x23, x2, x0, lsl #1
   51be0:	mov	x0, x23
   51be4:	blr	x4
   51be8:	strb	w22, [x21, #196]
   51bec:	str	w24, [x21, #200]
   51bf0:	str	x23, [x21, #208]
   51bf4:	b	515d0 <aarch64_get_opcode@@Base+0xb68>
   51bf8:	cmp	w4, #0x72
   51bfc:	b.eq	51c88 <aarch64_get_opcode@@Base+0x1220>  // b.none
   51c00:	cmp	w4, #0x78
   51c04:	b.ne	51c74 <aarch64_get_opcode@@Base+0x120c>  // b.any
   51c08:	add	x25, x25, #0x2
   51c0c:	mov	x0, x27
   51c10:	adrp	x1, 68000 <fields@@Base+0x4f60>
   51c14:	add	x1, x1, #0xcb0
   51c18:	blr	x20
   51c1c:	b	515d0 <aarch64_get_opcode@@Base+0xb68>
   51c20:	cmp	w4, #0x48
   51c24:	b.ne	51c7c <aarch64_get_opcode@@Base+0x1214>  // b.any
   51c28:	lsl	x2, x2, #1
   51c2c:	str	x2, [sp, #104]
   51c30:	add	x25, x25, #0x2
   51c34:	mov	x0, x27
   51c38:	adrp	x1, 68000 <fields@@Base+0x4f60>
   51c3c:	add	x1, x1, #0xca8
   51c40:	blr	x20
   51c44:	b	515d0 <aarch64_get_opcode@@Base+0xb68>
   51c48:	cmp	w4, #0x61
   51c4c:	b.ne	51c7c <aarch64_get_opcode@@Base+0x1214>  // b.any
   51c50:	ldr	x3, [x21, #120]
   51c54:	add	x25, x25, #0x2
   51c58:	ldr	x0, [sp, #184]
   51c5c:	mov	x1, x21
   51c60:	str	xzr, [sp, #104]
   51c64:	and	x0, x0, #0xfffffffffffffffc
   51c68:	add	x0, x0, x2, lsl #2
   51c6c:	blr	x3
   51c70:	b	515d0 <aarch64_get_opcode@@Base+0xb68>
   51c74:	cmp	w4, #0x64
   51c78:	b.eq	51c2c <aarch64_get_opcode@@Base+0x11c4>  // b.none
   51c7c:	bl	35670 <abort@plt>
   51c80:	lsl	x2, x2, #2
   51c84:	b	51c2c <aarch64_get_opcode@@Base+0x11c4>
   51c88:	adrp	x24, fd000 <aarch64_opcode_table@@Base+0x55a20>
   51c8c:	adrp	x23, 6d000 <fields@@Base+0x9f60>
   51c90:	add	x25, x25, #0x2
   51c94:	add	x1, x23, #0xe48
   51c98:	ldr	w3, [x24, #1616]
   51c9c:	mov	x0, x27
   51ca0:	add	x3, x3, x3, lsl #3
   51ca4:	add	x2, x2, x3, lsl #1
   51ca8:	add	x2, x2, #0x2
   51cac:	ldr	x2, [x26, x2, lsl #3]
   51cb0:	blr	x20
   51cb4:	b	515d0 <aarch64_get_opcode@@Base+0xb68>
   51cb8:	ldr	x0, [sp, #112]
   51cbc:	add	x25, x25, #0x2
   51cc0:	add	x3, x0, #0xdf0
   51cc4:	b	518ac <aarch64_get_opcode@@Base+0xe44>
   51cc8:	stp	x29, x30, [sp, #-400]!
   51ccc:	mov	x29, sp
   51cd0:	stp	x19, x20, [sp, #16]
   51cd4:	str	x1, [sp, #160]
   51cd8:	ldr	x20, [x0, #48]
   51cdc:	stp	x21, x22, [sp, #32]
   51ce0:	ldr	x1, [x2, #96]
   51ce4:	stp	x23, x24, [sp, #48]
   51ce8:	stp	x25, x26, [sp, #64]
   51cec:	str	xzr, [sp, #392]
   51cf0:	ldp	x23, x21, [x2]
   51cf4:	ldp	x13, x12, [x1]
   51cf8:	ldr	x25, [x1, #16]
   51cfc:	cbz	x20, 52ea0 <aarch64_get_opcode@@Base+0x2438>
   51d00:	ubfx	w5, w3, #8, #4
   51d04:	cmn	x13, #0x1
   51d08:	adrp	x1, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   51d0c:	mov	x19, x3
   51d10:	cset	w10, ne  // ne = any
   51d14:	mov	x24, x2
   51d18:	mov	x3, #0xffffffffffcfffff    	// #-3145729
   51d1c:	sub	w2, w5, #0xe
   51d20:	cmp	x12, x3
   51d24:	ldr	w1, [x1, #1040]
   51d28:	csinc	w10, w10, wzr, eq  // eq = none
   51d2c:	cmp	w2, #0x1
   51d30:	cset	w9, ls  // ls = plast
   51d34:	sub	w30, w5, #0x9
   51d38:	cmp	w5, #0x8
   51d3c:	lsr	x6, x19, #21
   51d40:	csinc	w9, w9, wzr, ne  // ne = any
   51d44:	cmp	w30, #0x2
   51d48:	cset	w2, ls  // ls = plast
   51d4c:	ubfx	x11, x1, #4, #4
   51d50:	cmp	w1, #0x0
   51d54:	orr	x6, x6, x19, lsr #24
   51d58:	and	x1, x6, #0x1
   51d5c:	mov	w7, #0x10                  	// #16
   51d60:	mov	x17, #0x10                  	// #16
   51d64:	csel	w11, w11, w7, ne  // ne = any
   51d68:	and	x15, x19, #0xf0000000
   51d6c:	lsr	w8, w19, #28
   51d70:	and	x18, x12, #0x8000
   51d74:	stp	x27, x28, [sp, #80]
   51d78:	mov	x27, #0x10                  	// #16
   51d7c:	movk	x17, #0xfe00, lsl #16
   51d80:	mov	x16, #0xfc000000            	// #4227858432
   51d84:	mov	x26, #0xe000000             	// #234881024
   51d88:	mov	x6, #0xfe000000            	// #4261412864
   51d8c:	movk	x27, #0xe10, lsl #16
   51d90:	mov	x14, #0xf0000000            	// #4026531840
   51d94:	str	w2, [sp, #108]
   51d98:	str	x1, [sp, #112]
   51d9c:	mov	w1, #0x0                   	// #0
   51da0:	str	w5, [sp, #168]
   51da4:	mov	x5, #0x0                   	// #0
   51da8:	ldr	x28, [x0, #8]
   51dac:	ldr	x3, [x0, #32]
   51db0:	cbnz	x28, 51df0 <aarch64_get_opcode@@Base+0x1388>
   51db4:	ldr	x2, [x0, #16]
   51db8:	cbnz	x2, 51df0 <aarch64_get_opcode@@Base+0x1388>
   51dbc:	ldr	x2, [x0, #24]
   51dc0:	cbnz	x2, 51df0 <aarch64_get_opcode@@Base+0x1388>
   51dc4:	cmp	x3, #0x1
   51dc8:	b.eq	52220 <aarch64_get_opcode@@Base+0x17b8>  // b.none
   51dcc:	sub	x3, x3, #0x2
   51dd0:	cmp	x3, #0x1
   51dd4:	b.hi	530b0 <aarch64_get_opcode@@Base+0x2648>  // b.pmore
   51dd8:	ldr	x20, [x0, #104]
   51ddc:	add	x0, x0, #0x38
   51de0:	cbnz	x20, 51da8 <aarch64_get_opcode@@Base+0x1340>
   51de4:	str	wzr, [sp, #108]
   51de8:	ldp	x27, x28, [sp, #80]
   51dec:	b	52158 <aarch64_get_opcode@@Base+0x16f0>
   51df0:	ldr	x2, [x0, #40]
   51df4:	cbz	w4, 520ec <aarch64_get_opcode@@Base+0x1684>
   51df8:	ldr	w1, [x0]
   51dfc:	orr	x2, x2, #0xf0000000
   51e00:	orr	x5, x3, #0xe0000000
   51e04:	cmp	w1, #0x2
   51e08:	b.ne	51e14 <aarch64_get_opcode@@Base+0x13ac>  // b.any
   51e0c:	mov	w1, #0x1                   	// #1
   51e10:	b	51dd8 <aarch64_get_opcode@@Base+0x1370>
   51e14:	mov	w22, w11
   51e18:	and	x2, x19, x2
   51e1c:	cmp	x2, x5
   51e20:	b.ne	51e0c <aarch64_get_opcode@@Base+0x13a4>  // b.any
   51e24:	tst	x28, x13
   51e28:	b.ne	51e38 <aarch64_get_opcode@@Base+0x13d0>  // b.any
   51e2c:	ldr	x1, [x0, #16]
   51e30:	tst	x12, x1
   51e34:	b.eq	521b8 <aarch64_get_opcode@@Base+0x1750>  // b.none
   51e38:	and	x2, x3, #0xffffffffffefffff
   51e3c:	cmp	x2, x17
   51e40:	ccmp	x2, x16, #0x4, ne  // ne = any
   51e44:	b.ne	52174 <aarch64_get_opcode@@Base+0x170c>  // b.any
   51e48:	cbz	x18, 51e54 <aarch64_get_opcode@@Base+0x13ec>
   51e4c:	cbz	w10, 51e54 <aarch64_get_opcode@@Base+0x13ec>
   51e50:	cbnz	w9, 521b0 <aarch64_get_opcode@@Base+0x1748>
   51e54:	str	x5, [sp, #392]
   51e58:	ldrb	w2, [x20]
   51e5c:	cbz	w2, 5213c <aarch64_get_opcode@@Base+0x16d4>
   51e60:	ands	x4, x19, #0x800000
   51e64:	mov	w3, #0x2b                  	// #43
   51e68:	mov	w1, #0x2d                  	// #45
   51e6c:	csel	w1, w3, w1, ne  // ne = any
   51e70:	str	w1, [sp, #196]
   51e74:	adrp	x1, 68000 <fields@@Base+0x4f60>
   51e78:	cmp	x4, #0x0
   51e7c:	add	x3, x1, #0xcf0
   51e80:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   51e84:	add	x1, x1, #0x6b8
   51e88:	csel	x3, x3, x1, eq  // eq = none
   51e8c:	asr	x0, x19, #4
   51e90:	and	x11, x19, #0xf
   51e94:	and	x0, x0, #0x10
   51e98:	str	x3, [sp, #296]
   51e9c:	ands	x3, x19, #0x200000
   51ea0:	orr	x0, x0, x11
   51ea4:	str	x3, [sp, #264]
   51ea8:	adrp	x3, 68000 <fields@@Base+0x4f60>
   51eac:	add	x3, x3, #0xc98
   51eb0:	csel	x1, x3, x1, ne  // ne = any
   51eb4:	cmp	x0, #0x0
   51eb8:	str	x4, [sp, #176]
   51ebc:	asr	x5, x19, #1
   51ec0:	ldr	w4, [sp, #168]
   51ec4:	mov	x8, #0x20                  	// #32
   51ec8:	csel	x0, x0, x8, ne  // ne = any
   51ecc:	cmp	w22, #0x10
   51ed0:	and	w6, w19, #0xf
   51ed4:	cset	w3, ne  // ne = any
   51ed8:	cmp	w4, #0x9
   51edc:	str	x1, [sp, #288]
   51ee0:	and	w1, w5, #0x70
   51ee4:	csel	w3, w3, wzr, eq  // eq = none
   51ee8:	str	x0, [sp, #240]
   51eec:	orr	w0, w1, w6
   51ef0:	ubfx	w28, w19, #16, #4
   51ef4:	tst	x1, #0x40
   51ef8:	str	w3, [sp, #172]
   51efc:	sub	w3, w0, #0x80
   51f00:	csel	w0, w0, w3, eq  // eq = none
   51f04:	cmp	w28, #0xf
   51f08:	cset	w1, eq  // eq = none
   51f0c:	str	w0, [sp, #232]
   51f10:	mov	x0, #0x1200000             	// #18874368
   51f14:	ands	x0, x19, x0
   51f18:	mov	w10, #0x10                  	// #16
   51f1c:	asr	x27, x19, #18
   51f20:	str	x0, [sp, #200]
   51f24:	csel	w0, w1, wzr, ne  // ne = any
   51f28:	asr	x1, x19, #22
   51f2c:	tst	x19, #0x80
   51f30:	ubfx	w7, w19, #12, #4
   51f34:	csel	w8, w8, w10, ne  // ne = any
   51f38:	and	w27, w27, #0x10
   51f3c:	and	w10, w1, #0x6
   51f40:	asr	x12, x19, #12
   51f44:	ubfx	w26, w19, #21, #1
   51f48:	asr	x4, x19, #16
   51f4c:	str	w0, [sp, #236]
   51f50:	asr	x0, x19, #5
   51f54:	and	w14, w5, #0x3f
   51f58:	orr	w13, w27, w7
   51f5c:	asr	x9, x19, #7
   51f60:	and	x4, x4, #0xf0
   51f64:	orr	w26, w26, w10
   51f68:	lsr	x3, x19, #22
   51f6c:	and	w10, w1, #0x1
   51f70:	add	w15, w13, w14
   51f74:	orr	x16, x4, x11
   51f78:	ubfiz	w12, w12, #1, #4
   51f7c:	str	x11, [sp, #224]
   51f80:	ubfiz	w11, w1, #4, #1
   51f84:	add	w1, w10, w7, lsl #1
   51f88:	stp	w13, w14, [sp, #248]
   51f8c:	ubfiz	w14, w0, #4, #1
   51f90:	and	w0, w0, #0x1
   51f94:	mov	x4, x9
   51f98:	and	w5, w5, #0x7f
   51f9c:	add	w0, w0, w6, lsl #1
   51fa0:	ubfx	x13, x19, #13, #3
   51fa4:	ubfiz	w9, w9, #4, #1
   51fa8:	ubfiz	x3, x3, #3, #1
   51fac:	str	w1, [sp, #340]
   51fb0:	orr	w1, w12, w10
   51fb4:	and	w4, w4, #0x1
   51fb8:	adrp	x25, 91000 <aarch64_operands@@Base+0x1bd0>
   51fbc:	add	x25, x25, #0xb60
   51fc0:	str	w1, [sp, #280]
   51fc4:	orr	w1, w9, w28
   51fc8:	str	w5, [sp, #284]
   51fcc:	sub	w5, w15, #0x1
   51fd0:	str	w0, [sp, #372]
   51fd4:	orr	x0, x3, x13
   51fd8:	ubfiz	x17, x19, #2, #8
   51fdc:	str	x0, [sp, #120]
   51fe0:	add	x0, x25, #0xe78
   51fe4:	str	w5, [sp, #260]
   51fe8:	and	w5, w26, #0xfffffffd
   51fec:	str	w1, [sp, #344]
   51ff0:	add	w1, w4, w28, lsl #1
   51ff4:	sxtw	x8, w8
   51ff8:	str	x0, [sp, #128]
   51ffc:	neg	x0, x17
   52000:	str	x16, [sp, #208]
   52004:	str	w16, [sp, #220]
   52008:	str	w15, [sp, #256]
   5200c:	str	x17, [sp, #304]
   52010:	str	w5, [sp, #320]
   52014:	orr	w5, w11, w7
   52018:	str	w5, [sp, #276]
   5201c:	str	w5, [sp, #324]
   52020:	str	x8, [sp, #360]
   52024:	str	w1, [sp, #368]
   52028:	orr	w1, w14, w6
   5202c:	str	w1, [sp, #348]
   52030:	str	x0, [sp, #312]
   52034:	mov	x0, #0x100                 	// #256
   52038:	movk	x0, #0x40, lsl #16
   5203c:	and	x0, x19, x0
   52040:	str	x0, [sp, #152]
   52044:	ubfx	w0, w19, #1, #7
   52048:	str	w0, [sp, #336]
   5204c:	ubfx	w0, w19, #4, #4
   52050:	str	w0, [sp, #192]
   52054:	ubfx	x0, x19, #16, #4
   52058:	str	x0, [sp, #136]
   5205c:	and	w0, w19, #0xff
   52060:	str	w0, [sp, #216]
   52064:	and	x0, x19, #0x100
   52068:	str	x0, [sp, #144]
   5206c:	and	x0, x19, #0x1000000
   52070:	str	x0, [sp, #184]
   52074:	and	x0, x19, #0x40
   52078:	str	xzr, [sp, #112]
   5207c:	str	w19, [sp, #272]
   52080:	str	x0, [sp, #352]
   52084:	mov	x0, #0x10                  	// #16
   52088:	str	x0, [sp, #328]
   5208c:	b	520b4 <aarch64_get_opcode@@Base+0x164c>
   52090:	mov	x0, x21
   52094:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52098:	add	x1, x1, #0xc30
   5209c:	blr	x23
   520a0:	mov	x0, x27
   520a4:	mov	x27, x20
   520a8:	mov	x20, x0
   520ac:	ldrb	w2, [x27, #1]
   520b0:	cbz	w2, 52118 <aarch64_get_opcode@@Base+0x16b0>
   520b4:	cmp	w2, #0x25
   520b8:	add	x27, x20, #0x1
   520bc:	b.ne	52090 <aarch64_get_opcode@@Base+0x1628>  // b.any
   520c0:	ldrb	w2, [x20, #1]
   520c4:	sub	w0, w2, #0x25
   520c8:	cmp	w0, #0x55
   520cc:	b.ls	520d4 <aarch64_get_opcode@@Base+0x166c>  // b.plast
   520d0:	bl	35670 <abort@plt>
   520d4:	adrp	x1, 68000 <fields@@Base+0x4f60>
   520d8:	add	x1, x1, #0x248
   520dc:	ldrh	w0, [x1, w0, uxtw #1]
   520e0:	adr	x1, 520ec <aarch64_get_opcode@@Base+0x1684>
   520e4:	add	x0, x1, w0, sxth #2
   520e8:	br	x0
   520ec:	cmp	w8, #0xe
   520f0:	csel	w22, w8, w7, ne  // ne = any
   520f4:	cmp	x15, x14
   520f8:	b.ne	52104 <aarch64_get_opcode@@Base+0x169c>  // b.any
   520fc:	orr	x2, x2, #0xf0000000
   52100:	mov	w22, #0x10                  	// #16
   52104:	ldr	w1, [x0]
   52108:	mov	x5, x3
   5210c:	cmp	w1, #0x1
   52110:	b.ne	51e18 <aarch64_get_opcode@@Base+0x13b0>  // b.any
   52114:	b	51dd8 <aarch64_get_opcode@@Base+0x1370>
   52118:	ldr	x1, [sp, #112]
   5211c:	add	x0, x1, #0x10
   52120:	cmp	x0, #0x30
   52124:	b.ls	5213c <aarch64_get_opcode@@Base+0x16d4>  // b.plast
   52128:	mov	w2, w1
   5212c:	mov	x0, x21
   52130:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52134:	add	x1, x1, #0xcb8
   52138:	blr	x23
   5213c:	ldr	w0, [sp, #108]
   52140:	cbz	w0, 521f8 <aarch64_get_opcode@@Base+0x1790>
   52144:	mov	x0, x21
   52148:	adrp	x1, 68000 <fields@@Base+0x4f60>
   5214c:	add	x1, x1, #0xf28
   52150:	blr	x23
   52154:	ldp	x27, x28, [sp, #80]
   52158:	ldr	w0, [sp, #108]
   5215c:	ldp	x19, x20, [sp, #16]
   52160:	ldp	x21, x22, [sp, #32]
   52164:	ldp	x23, x24, [sp, #48]
   52168:	ldp	x25, x26, [sp, #64]
   5216c:	ldp	x29, x30, [sp], #400
   52170:	ret
   52174:	and	x1, x3, #0xffffffffffffffef
   52178:	cmp	x1, x26
   5217c:	mov	x1, #0xc000000             	// #201326592
   52180:	ccmp	x2, x1, #0x4, ne  // ne = any
   52184:	cset	w1, eq  // eq = none
   52188:	cmp	x3, x6
   5218c:	ccmp	x3, x27, #0x4, ne  // ne = any
   52190:	csinc	w1, w1, wzr, ne  // ne = any
   52194:	cbz	w1, 521cc <aarch64_get_opcode@@Base+0x1764>
   52198:	cmp	w30, #0x2
   5219c:	b.ls	51dd8 <aarch64_get_opcode@@Base+0x1370>  // b.plast
   521a0:	cbz	x18, 521e8 <aarch64_get_opcode@@Base+0x1780>
   521a4:	cbz	w10, 521e8 <aarch64_get_opcode@@Base+0x1780>
   521a8:	cbz	w9, 521e8 <aarch64_get_opcode@@Base+0x1780>
   521ac:	nop
   521b0:	mov	w1, w9
   521b4:	b	51dd8 <aarch64_get_opcode@@Base+0x1370>
   521b8:	ldr	x1, [x0, #24]
   521bc:	tst	x25, x1
   521c0:	b.ne	51e38 <aarch64_get_opcode@@Base+0x13d0>  // b.any
   521c4:	mov	w1, #0x1                   	// #1
   521c8:	b	51dd8 <aarch64_get_opcode@@Base+0x1370>
   521cc:	mov	x1, #0xf80                 	// #3968
   521d0:	movk	x1, #0xec00, lsl #16
   521d4:	cmp	x2, x1
   521d8:	b.ne	521e8 <aarch64_get_opcode@@Base+0x1780>  // b.any
   521dc:	ldr	x1, [sp, #112]
   521e0:	cbz	x1, 51e0c <aarch64_get_opcode@@Base+0x13a4>
   521e4:	nop
   521e8:	str	x5, [sp, #392]
   521ec:	str	wzr, [sp, #108]
   521f0:	ldrb	w2, [x20]
   521f4:	cbnz	w2, 51e60 <aarch64_get_opcode@@Base+0x13f8>
   521f8:	mov	w0, #0x1                   	// #1
   521fc:	str	w0, [sp, #108]
   52200:	ldp	x19, x20, [sp, #16]
   52204:	ldr	w0, [sp, #108]
   52208:	ldp	x21, x22, [sp, #32]
   5220c:	ldp	x23, x24, [sp, #48]
   52210:	ldp	x25, x26, [sp, #64]
   52214:	ldp	x27, x28, [sp, #80]
   52218:	ldp	x29, x30, [sp], #400
   5221c:	ret
   52220:	ldr	x2, [x24, #32]
   52224:	sub	x3, x2, #0xc
   52228:	cmp	x3, #0x1
   5222c:	ccmp	x2, #0xa, #0x4, hi  // hi = pmore
   52230:	b.eq	51dd8 <aarch64_get_opcode@@Base+0x1370>  // b.none
   52234:	nop
   52238:	ldr	x2, [x0, #64]
   5223c:	add	x0, x0, #0x38
   52240:	cbnz	x2, 5224c <aarch64_get_opcode@@Base+0x17e4>
   52244:	ldr	x2, [x0, #16]
   52248:	cbz	x2, 522e0 <aarch64_get_opcode@@Base+0x1878>
   5224c:	ldr	x2, [x0, #32]
   52250:	cmp	x2, #0x2
   52254:	b.ne	52238 <aarch64_get_opcode@@Base+0x17d0>  // b.any
   52258:	b	51dd8 <aarch64_get_opcode@@Base+0x1370>
   5225c:	cmp	w22, #0x10
   52260:	b.eq	52280 <aarch64_get_opcode@@Base+0x1818>  // b.none
   52264:	mov	w0, #0x1                   	// #1
   52268:	str	w0, [sp, #108]
   5226c:	ldr	w0, [sp, #172]
   52270:	cmp	w0, #0x0
   52274:	ldr	w0, [sp, #108]
   52278:	csinc	w0, w0, wzr, eq  // eq = none
   5227c:	str	w0, [sp, #108]
   52280:	add	x2, x25, #0xdf0
   52284:	add	x20, x20, #0x2
   52288:	mov	x0, x21
   5228c:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   52290:	add	x1, x1, #0xe48
   52294:	ldr	x2, [x2, w22, sxtw #3]
   52298:	blr	x23
   5229c:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   522a0:	mov	x0, x27
   522a4:	add	x3, sp, #0x184
   522a8:	add	x2, sp, #0x188
   522ac:	mov	x1, x19
   522b0:	bl	513b0 <aarch64_get_opcode@@Base+0x948>
   522b4:	mov	x27, x0
   522b8:	ldrb	w0, [x0]
   522bc:	sub	w0, w0, #0x27
   522c0:	cmp	w0, #0x51
   522c4:	b.hi	520d0 <aarch64_get_opcode@@Base+0x1668>  // b.pmore
   522c8:	adrp	x1, 68000 <fields@@Base+0x4f60>
   522cc:	add	x1, x1, #0x2f4
   522d0:	ldrh	w0, [x1, w0, uxtw #1]
   522d4:	adr	x1, 522e0 <aarch64_get_opcode@@Base+0x1878>
   522d8:	add	x0, x1, w0, sxth #2
   522dc:	br	x0
   522e0:	ldr	x2, [x0, #24]
   522e4:	cbz	x2, 51dd8 <aarch64_get_opcode@@Base+0x1370>
   522e8:	ldr	x2, [x0, #32]
   522ec:	cmp	x2, #0x2
   522f0:	b.ne	52238 <aarch64_get_opcode@@Base+0x17d0>  // b.any
   522f4:	b	51dd8 <aarch64_get_opcode@@Base+0x1370>
   522f8:	ldrb	w0, [x20, #2]
   522fc:	add	x27, x20, #0x2
   52300:	cmp	w0, #0x32
   52304:	b.eq	52e0c <aarch64_get_opcode@@Base+0x23a4>  // b.none
   52308:	b.hi	527b0 <aarch64_get_opcode@@Base+0x1d48>  // b.pmore
   5230c:	cmp	w0, #0x30
   52310:	b.eq	52854 <aarch64_get_opcode@@Base+0x1dec>  // b.none
   52314:	cmp	w0, #0x31
   52318:	b.ne	520d0 <aarch64_get_opcode@@Base+0x1668>  // b.any
   5231c:	cmp	w2, #0x79
   52320:	b.eq	52a08 <aarch64_get_opcode@@Base+0x1fa0>  // b.none
   52324:	ldr	w3, [sp, #324]
   52328:	str	w3, [sp, #376]
   5232c:	mov	w2, #0x64                  	// #100
   52330:	mov	x0, x21
   52334:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52338:	add	x1, x1, #0xf40
   5233c:	blr	x23
   52340:	ldrb	w0, [x20, #2]
   52344:	mov	w2, #0x64                  	// #100
   52348:	ldr	w3, [sp, #376]
   5234c:	cmp	w0, #0x33
   52350:	b.eq	52e6c <aarch64_get_opcode@@Base+0x2404>  // b.none
   52354:	add	x20, x20, #0x3
   52358:	cmp	w0, #0x34
   5235c:	b.ne	520ac <aarch64_get_opcode@@Base+0x1644>  // b.any
   52360:	add	w3, w3, #0x1
   52364:	mov	x0, x21
   52368:	adrp	x1, 68000 <fields@@Base+0x4f60>
   5236c:	add	x1, x1, #0xec8
   52370:	blr	x23
   52374:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52378:	adrp	x1, fd000 <aarch64_opcode_table@@Base+0x55a20>
   5237c:	cmp	w2, #0x4b
   52380:	ldr	x3, [sp, #136]
   52384:	and	x0, x19, #0xff
   52388:	ldr	w2, [x1, #1616]
   5238c:	and	x4, x19, #0x7f
   52390:	csel	x4, x4, x0, eq  // eq = none
   52394:	str	x4, [sp, #376]
   52398:	mov	x0, x21
   5239c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   523a0:	add	x2, x2, x2, lsl #3
   523a4:	add	x1, x1, #0xcf8
   523a8:	add	x2, x3, x2, lsl #1
   523ac:	ldr	x3, [sp, #128]
   523b0:	add	x2, x2, #0x2
   523b4:	ldr	x2, [x3, x2, lsl #3]
   523b8:	blr	x23
   523bc:	ldr	x0, [sp, #200]
   523c0:	ldr	x4, [sp, #376]
   523c4:	cbz	x0, 523f8 <aarch64_get_opcode@@Base+0x1990>
   523c8:	ldr	w0, [sp, #168]
   523cc:	cmp	w0, #0x9
   523d0:	lsl	x0, x4, #1
   523d4:	lsl	x4, x4, #2
   523d8:	csel	x4, x4, x0, ne  // ne = any
   523dc:	ldr	x0, [sp, #176]
   523e0:	cmp	x0, #0x0
   523e4:	ldr	x0, [sp, #112]
   523e8:	cneg	x4, x4, eq  // eq = none
   523ec:	cmp	w28, #0xf
   523f0:	csel	x0, x0, x4, eq  // eq = none
   523f4:	str	x0, [sp, #112]
   523f8:	ldr	x0, [sp, #184]
   523fc:	cbz	x0, 52908 <aarch64_get_opcode@@Base+0x1ea0>
   52400:	cbnz	x4, 52988 <aarch64_get_opcode@@Base+0x1f20>
   52404:	ldr	x0, [sp, #176]
   52408:	str	x4, [sp, #376]
   5240c:	cbnz	x0, 52f14 <aarch64_get_opcode@@Base+0x24ac>
   52410:	mov	x0, x21
   52414:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52418:	add	x1, x1, #0xd10
   5241c:	blr	x23
   52420:	ldr	x4, [sp, #376]
   52424:	nop
   52428:	add	x20, x20, #0x2
   5242c:	ldr	w0, [sp, #236]
   52430:	cbz	w0, 520ac <aarch64_get_opcode@@Base+0x1644>
   52434:	str	x4, [sp, #376]
   52438:	mov	x0, x21
   5243c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52440:	add	x1, x1, #0xd38
   52444:	blr	x23
   52448:	ldr	w0, [x24, #172]
   5244c:	ldr	x1, [sp, #160]
   52450:	ldr	x3, [x24, #120]
   52454:	and	x2, x1, #0xfffffffffffffffc
   52458:	ldr	x4, [sp, #376]
   5245c:	lsl	w0, w0, #1
   52460:	mov	x1, x24
   52464:	add	x0, x2, w0, sxtw
   52468:	add	x0, x0, x4
   5246c:	blr	x3
   52470:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52474:	ldr	w0, [sp, #252]
   52478:	add	x20, x20, #0x2
   5247c:	cmp	w0, #0x1
   52480:	b.eq	52dc4 <aarch64_get_opcode@@Base+0x235c>  // b.none
   52484:	ldr	w0, [sp, #256]
   52488:	cmp	w0, #0x20
   5248c:	b.ls	5296c <aarch64_get_opcode@@Base+0x1f04>  // b.plast
   52490:	ldr	w2, [sp, #248]
   52494:	mov	x0, x21
   52498:	ldr	w3, [sp, #260]
   5249c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   524a0:	add	x1, x1, #0xd48
   524a4:	blr	x23
   524a8:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   524ac:	ldr	x0, [sp, #144]
   524b0:	cbz	x0, 528f0 <aarch64_get_opcode@@Base+0x1e88>
   524b4:	ldr	w3, [sp, #276]
   524b8:	mov	w2, #0x64                  	// #100
   524bc:	ldr	w0, [sp, #284]
   524c0:	mov	w1, #0xf                   	// #15
   524c4:	add	x20, x20, #0x2
   524c8:	cbnz	w0, 528b4 <aarch64_get_opcode@@Base+0x1e4c>
   524cc:	mov	x0, x21
   524d0:	adrp	x1, 68000 <fields@@Base+0x4f60>
   524d4:	add	x1, x1, #0xd78
   524d8:	blr	x23
   524dc:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   524e0:	and	x0, x19, #0x7f8000
   524e4:	add	x20, x20, #0x2
   524e8:	and	x0, x0, #0xffffffffffc0ffff
   524ec:	cmp	x0, #0x8, lsl #12
   524f0:	b.eq	52e30 <aarch64_get_opcode@@Base+0x23c8>  // b.none
   524f4:	cmp	x0, #0x400, lsl #12
   524f8:	b.eq	52e58 <aarch64_get_opcode@@Base+0x23f0>  // b.none
   524fc:	cbz	x0, 52e44 <aarch64_get_opcode@@Base+0x23dc>
   52500:	mov	x0, x21
   52504:	adrp	x1, 67000 <fields@@Base+0x3f60>
   52508:	add	x1, x1, #0xa88
   5250c:	blr	x23
   52510:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52514:	ldr	w2, [sp, #232]
   52518:	add	x20, x20, #0x2
   5251c:	mov	x0, x21
   52520:	adrp	x1, 6f000 <fields@@Base+0xbf60>
   52524:	add	x1, x1, #0x90
   52528:	blr	x23
   5252c:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52530:	adrp	x0, fd000 <aarch64_opcode_table@@Base+0x55a20>
   52534:	ldr	x1, [sp, #136]
   52538:	ldr	w0, [x0, #1616]
   5253c:	add	x0, x0, x0, lsl #3
   52540:	add	x0, x1, x0, lsl #1
   52544:	ldr	x1, [sp, #128]
   52548:	add	x0, x0, #0x2
   5254c:	ldr	x2, [x1, x0, lsl #3]
   52550:	ldr	x0, [sp, #144]
   52554:	cbnz	x0, 52864 <aarch64_get_opcode@@Base+0x1dfc>
   52558:	mov	x0, x21
   5255c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52560:	add	x1, x1, #0xcf8
   52564:	blr	x23
   52568:	mov	w0, #0x1                   	// #1
   5256c:	ldr	w1, [sp, #216]
   52570:	add	x20, x20, #0x2
   52574:	cbz	w1, 52948 <aarch64_get_opcode@@Base+0x1ee0>
   52578:	mul	w3, w1, w0
   5257c:	ldr	x0, [sp, #184]
   52580:	cbz	x0, 529ac <aarch64_get_opcode@@Base+0x1f44>
   52584:	ldp	x4, x2, [sp, #288]
   52588:	mov	x0, x21
   5258c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52590:	add	x1, x1, #0xed0
   52594:	blr	x23
   52598:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   5259c:	adrp	x0, fd000 <aarch64_opcode_table@@Base+0x55a20>
   525a0:	add	x20, x20, #0x2
   525a4:	ldr	x2, [sp, #136]
   525a8:	cmp	w26, #0x3
   525ac:	ldr	w0, [x0, #1616]
   525b0:	ldr	x1, [sp, #224]
   525b4:	add	x0, x0, x0, lsl #3
   525b8:	lsl	x0, x0, #1
   525bc:	add	x1, x0, x1
   525c0:	add	x0, x0, x2
   525c4:	ldr	x2, [sp, #128]
   525c8:	add	x1, x1, #0x2
   525cc:	add	x0, x0, #0x2
   525d0:	ldr	x4, [x2, x1, lsl #3]
   525d4:	ldr	x2, [x2, x0, lsl #3]
   525d8:	b.eq	52ddc <aarch64_get_opcode@@Base+0x2374>  // b.none
   525dc:	b.le	52814 <aarch64_get_opcode@@Base+0x1dac>
   525e0:	ldr	w3, [sp, #196]
   525e4:	mov	x0, x21
   525e8:	adrp	x1, 68000 <fields@@Base+0x4f60>
   525ec:	add	x1, x1, #0xef0
   525f0:	blr	x23
   525f4:	ldr	w0, [sp, #192]
   525f8:	cbz	w0, 52610 <aarch64_get_opcode@@Base+0x1ba8>
   525fc:	ldr	w2, [sp, #192]
   52600:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52604:	mov	x0, x21
   52608:	add	x1, x1, #0xf10
   5260c:	blr	x23
   52610:	mov	x0, x21
   52614:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   52618:	add	x1, x1, #0x8c0
   5261c:	blr	x23
   52620:	ldr	w0, [sp, #320]
   52624:	cmp	w0, #0x5
   52628:	b.ne	520ac <aarch64_get_opcode@@Base+0x1644>  // b.any
   5262c:	adrp	x0, 68000 <fields@@Base+0x4f60>
   52630:	add	x1, x0, #0xc98
   52634:	mov	x0, x21
   52638:	blr	x23
   5263c:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52640:	ldr	x0, [sp, #152]
   52644:	add	x20, x20, #0x2
   52648:	cmp	x0, #0x400, lsl #12
   5264c:	b.eq	52e8c <aarch64_get_opcode@@Base+0x2424>  // b.none
   52650:	b.gt	527f0 <aarch64_get_opcode@@Base+0x1d88>
   52654:	cbz	x0, 52e78 <aarch64_get_opcode@@Base+0x2410>
   52658:	cmp	x0, #0x100
   5265c:	b.ne	520ac <aarch64_get_opcode@@Base+0x1644>  // b.any
   52660:	mov	x0, x21
   52664:	adrp	x1, 6a000 <fields@@Base+0x6f60>
   52668:	add	x1, x1, #0x2c8
   5266c:	blr	x23
   52670:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52674:	and	x0, x19, #0xfff80
   52678:	add	x20, x20, #0x2
   5267c:	and	x0, x0, #0xfffffffffff800ff
   52680:	cmp	x0, #0x80
   52684:	b.eq	52800 <aarch64_get_opcode@@Base+0x1d98>  // b.none
   52688:	cmp	x0, #0x80, lsl #12
   5268c:	b.eq	528a0 <aarch64_get_opcode@@Base+0x1e38>  // b.none
   52690:	cbz	x0, 5288c <aarch64_get_opcode@@Base+0x1e24>
   52694:	mov	w2, #0x5                   	// #5
   52698:	adrp	x1, 68000 <fields@@Base+0x4f60>
   5269c:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   526a0:	add	x1, x1, #0xe18
   526a4:	add	x0, x0, #0x5d8
   526a8:	bl	359e0 <dcgettext@plt>
   526ac:	mov	x1, x0
   526b0:	mov	x0, x21
   526b4:	blr	x23
   526b8:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   526bc:	and	x0, x19, #0x7f8000
   526c0:	add	x20, x20, #0x2
   526c4:	and	x0, x0, #0xffffffffffc0ffff
   526c8:	cmp	x0, #0x8, lsl #12
   526cc:	b.eq	52800 <aarch64_get_opcode@@Base+0x1d98>  // b.none
   526d0:	cmp	x0, #0x400, lsl #12
   526d4:	b.eq	528a0 <aarch64_get_opcode@@Base+0x1e38>  // b.none
   526d8:	cbz	x0, 5288c <aarch64_get_opcode@@Base+0x1e24>
   526dc:	mov	x0, x21
   526e0:	adrp	x1, 62000 <xexit@@Base+0x6a80>
   526e4:	add	x1, x1, #0x6b8
   526e8:	blr	x23
   526ec:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   526f0:	ldr	x2, [sp, #240]
   526f4:	add	x20, x20, #0x2
   526f8:	mov	x0, x21
   526fc:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52700:	add	x1, x1, #0xca8
   52704:	blr	x23
   52708:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   5270c:	add	x20, x20, #0x2
   52710:	mov	x0, x21
   52714:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52718:	add	x1, x1, #0xc38
   5271c:	blr	x23
   52720:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52724:	ldr	x0, [sp, #120]
   52728:	add	x20, x20, #0x2
   5272c:	cmp	x0, #0xd
   52730:	b.eq	52ee8 <aarch64_get_opcode@@Base+0x2480>  // b.none
   52734:	b.hi	52830 <aarch64_get_opcode@@Base+0x1dc8>  // b.pmore
   52738:	cmp	x0, #0x2
   5273c:	b.eq	52ed4 <aarch64_get_opcode@@Base+0x246c>  // b.none
   52740:	cmp	x0, #0xc
   52744:	b.ne	527d4 <aarch64_get_opcode@@Base+0x1d6c>  // b.any
   52748:	mov	x0, x21
   5274c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52750:	add	x1, x1, #0xde0
   52754:	blr	x23
   52758:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   5275c:	ldr	w2, [sp, #220]
   52760:	add	x20, x20, #0x2
   52764:	ldr	x0, [sp, #208]
   52768:	str	x0, [sp, #392]
   5276c:	adrp	x1, 6f000 <fields@@Base+0xbf60>
   52770:	mov	x0, x21
   52774:	add	x1, x1, #0x90
   52778:	blr	x23
   5277c:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52780:	and	x0, x19, #0x60
   52784:	add	x20, x20, #0x2
   52788:	cmp	x0, #0x20
   5278c:	b.eq	526dc <aarch64_get_opcode@@Base+0x1c74>  // b.none
   52790:	cmp	x0, #0x40
   52794:	b.eq	52e1c <aarch64_get_opcode@@Base+0x23b4>  // b.none
   52798:	cbz	x0, 520ac <aarch64_get_opcode@@Base+0x1644>
   5279c:	mov	x0, x21
   527a0:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   527a4:	add	x1, x1, #0x20
   527a8:	blr	x23
   527ac:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   527b0:	cmp	w0, #0x33
   527b4:	b.ne	5284c <aarch64_get_opcode@@Base+0x1de4>  // b.any
   527b8:	str	w2, [sp, #376]
   527bc:	mov	x0, x21
   527c0:	adrp	x1, 68000 <fields@@Base+0x4f60>
   527c4:	add	x1, x1, #0xc90
   527c8:	blr	x23
   527cc:	ldr	w2, [sp, #376]
   527d0:	b	5231c <aarch64_get_opcode@@Base+0x18b4>
   527d4:	cmp	x0, #0x1
   527d8:	b.ne	52efc <aarch64_get_opcode@@Base+0x2494>  // b.any
   527dc:	mov	x0, x21
   527e0:	adrp	x1, 68000 <fields@@Base+0x4f60>
   527e4:	add	x1, x1, #0xdc8
   527e8:	blr	x23
   527ec:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   527f0:	mov	x1, #0x100                 	// #256
   527f4:	movk	x1, #0x40, lsl #16
   527f8:	cmp	x0, x1
   527fc:	b.ne	520ac <aarch64_get_opcode@@Base+0x1644>  // b.any
   52800:	mov	x0, x21
   52804:	adrp	x1, 70000 <fields@@Base+0xcf60>
   52808:	add	x1, x1, #0x720
   5280c:	blr	x23
   52810:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52814:	cmp	w26, #0x1
   52818:	b.eq	52ddc <aarch64_get_opcode@@Base+0x2374>  // b.none
   5281c:	mov	x0, x21
   52820:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52824:	add	x1, x1, #0xf20
   52828:	blr	x23
   5282c:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52830:	cmp	x0, #0xe
   52834:	b.eq	52ec0 <aarch64_get_opcode@@Base+0x2458>  // b.none
   52838:	mov	x0, x21
   5283c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52840:	add	x1, x1, #0xdf8
   52844:	blr	x23
   52848:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   5284c:	cmp	w0, #0x34
   52850:	b.ne	520d0 <aarch64_get_opcode@@Base+0x1668>  // b.any
   52854:	cmp	w2, #0x79
   52858:	b.eq	52a88 <aarch64_get_opcode@@Base+0x2020>  // b.none
   5285c:	ldr	w3, [sp, #348]
   52860:	b	52328 <aarch64_get_opcode@@Base+0x18c0>
   52864:	mov	x0, x21
   52868:	adrp	x1, 68000 <fields@@Base+0x4f60>
   5286c:	add	x1, x1, #0xcf8
   52870:	blr	x23
   52874:	ldr	x0, [sp, #176]
   52878:	cbnz	x0, 5295c <aarch64_get_opcode@@Base+0x1ef4>
   5287c:	ldr	x0, [sp, #312]
   52880:	str	x0, [sp, #112]
   52884:	mov	w0, #0x4                   	// #4
   52888:	b	5256c <aarch64_get_opcode@@Base+0x1b04>
   5288c:	mov	x0, x21
   52890:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   52894:	add	x1, x1, #0x460
   52898:	blr	x23
   5289c:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   528a0:	mov	x0, x21
   528a4:	adrp	x1, 72000 <fields@@Base+0xef60>
   528a8:	add	x1, x1, #0xdd8
   528ac:	blr	x23
   528b0:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   528b4:	cmp	w0, #0x1
   528b8:	b.eq	52a74 <aarch64_get_opcode@@Base+0x200c>  // b.none
   528bc:	add	w0, w3, w0
   528c0:	sub	w5, w0, #0x1
   528c4:	cmp	w1, w5
   528c8:	b.ge	52ea8 <aarch64_get_opcode@@Base+0x2440>  // b.tcont
   528cc:	ldr	x0, [sp, #144]
   528d0:	asr	w4, w5, #1
   528d4:	adrp	x1, 68000 <fields@@Base+0x4f60>
   528d8:	add	x1, x1, #0xd90
   528dc:	cmp	x0, #0x0
   528e0:	mov	x0, x21
   528e4:	csel	w4, w4, w5, eq  // eq = none
   528e8:	blr	x23
   528ec:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   528f0:	ldr	w0, [sp, #272]
   528f4:	mov	w2, #0x73                  	// #115
   528f8:	ldr	w3, [sp, #280]
   528fc:	mov	w1, #0x1f                  	// #31
   52900:	and	w0, w0, #0x7f
   52904:	b	524c4 <aarch64_get_opcode@@Base+0x1a5c>
   52908:	str	x4, [sp, #376]
   5290c:	mov	x0, x21
   52910:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   52914:	add	x1, x1, #0x8c0
   52918:	blr	x23
   5291c:	ldr	x0, [sp, #264]
   52920:	ldr	x4, [sp, #376]
   52924:	cbz	x0, 529c4 <aarch64_get_opcode@@Base+0x1f5c>
   52928:	cbz	x4, 52f2c <aarch64_get_opcode@@Base+0x24c4>
   5292c:	mov	w2, w4
   52930:	mov	x0, x21
   52934:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52938:	add	x1, x1, #0xd18
   5293c:	blr	x23
   52940:	ldr	x4, [sp, #376]
   52944:	b	52428 <aarch64_get_opcode@@Base+0x19c0>
   52948:	mov	x0, x21
   5294c:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   52950:	add	x1, x1, #0x8c0
   52954:	blr	x23
   52958:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   5295c:	ldr	x0, [sp, #304]
   52960:	str	x0, [sp, #112]
   52964:	mov	w0, #0x4                   	// #4
   52968:	b	5256c <aarch64_get_opcode@@Base+0x1b04>
   5296c:	ldr	w2, [sp, #248]
   52970:	mov	x0, x21
   52974:	ldr	w3, [sp, #260]
   52978:	adrp	x1, 68000 <fields@@Base+0x4f60>
   5297c:	add	x1, x1, #0xd68
   52980:	blr	x23
   52984:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52988:	ldr	x3, [sp, #288]
   5298c:	str	x4, [sp, #376]
   52990:	mov	w2, w4
   52994:	mov	x0, x21
   52998:	adrp	x1, 68000 <fields@@Base+0x4f60>
   5299c:	add	x1, x1, #0xd00
   529a0:	blr	x23
   529a4:	ldr	x4, [sp, #376]
   529a8:	b	52428 <aarch64_get_opcode@@Base+0x19c0>
   529ac:	ldr	x2, [sp, #296]
   529b0:	mov	x0, x21
   529b4:	adrp	x1, 68000 <fields@@Base+0x4f60>
   529b8:	add	x1, x1, #0xee0
   529bc:	blr	x23
   529c0:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   529c4:	ldr	x0, [sp, #176]
   529c8:	str	x4, [sp, #112]
   529cc:	str	x4, [sp, #376]
   529d0:	mov	w3, w4
   529d4:	orr	x1, x4, x0
   529d8:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   529dc:	cmp	x1, #0x0
   529e0:	add	x0, x0, #0x6b8
   529e4:	adrp	x1, 68000 <fields@@Base+0x4f60>
   529e8:	add	x2, x1, #0xcf0
   529ec:	csel	x2, x2, x0, eq  // eq = none
   529f0:	adrp	x1, 68000 <fields@@Base+0x4f60>
   529f4:	mov	x0, x21
   529f8:	add	x1, x1, #0xd28
   529fc:	blr	x23
   52a00:	ldr	x4, [sp, #376]
   52a04:	b	52428 <aarch64_get_opcode@@Base+0x19c0>
   52a08:	ldr	w3, [sp, #340]
   52a0c:	str	w3, [sp, #376]
   52a10:	mov	w2, #0x73                  	// #115
   52a14:	mov	x0, x21
   52a18:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52a1c:	add	x1, x1, #0xf40
   52a20:	blr	x23
   52a24:	ldrb	w0, [x20, #2]
   52a28:	mov	w2, #0x73                  	// #115
   52a2c:	ldr	w3, [sp, #376]
   52a30:	cmp	w0, #0x33
   52a34:	b.ne	52354 <aarch64_get_opcode@@Base+0x18ec>  // b.any
   52a38:	ldr	w0, [sp, #216]
   52a3c:	mov	w2, #0x73                  	// #115
   52a40:	subs	w0, w0, #0x1
   52a44:	b.eq	52a5c <aarch64_get_opcode@@Base+0x1ff4>  // b.none
   52a48:	add	w3, w0, w3
   52a4c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52a50:	mov	x0, x21
   52a54:	add	x1, x1, #0xec0
   52a58:	blr	x23
   52a5c:	add	x20, x20, #0x3
   52a60:	mov	x0, x21
   52a64:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52a68:	add	x1, x1, #0xd70
   52a6c:	blr	x23
   52a70:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52a74:	mov	x0, x21
   52a78:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52a7c:	add	x1, x1, #0xd80
   52a80:	blr	x23
   52a84:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52a88:	ldr	w3, [sp, #372]
   52a8c:	b	52a0c <aarch64_get_opcode@@Base+0x1fa4>
   52a90:	ldr	x0, [sp, #352]
   52a94:	cbnz	x0, 52ab4 <aarch64_get_opcode@@Base+0x204c>
   52a98:	ldr	x2, [sp, #392]
   52a9c:	mov	x0, x21
   52aa0:	add	x20, x27, #0x1
   52aa4:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52aa8:	add	x1, x1, #0xe30
   52aac:	blr	x23
   52ab0:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52ab4:	ldr	x0, [sp, #392]
   52ab8:	add	x20, x27, #0x1
   52abc:	lsr	x2, x0, #1
   52ac0:	tbz	w0, #0, 52f9c <aarch64_get_opcode@@Base+0x2534>
   52ac4:	mov	x0, x21
   52ac8:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52acc:	add	x1, x1, #0xe38
   52ad0:	blr	x23
   52ad4:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52ad8:	ldr	w2, [sp, #388]
   52adc:	mov	w20, #0x1                   	// #1
   52ae0:	ldr	x0, [sp, #392]
   52ae4:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52ae8:	lsl	w2, w20, w2
   52aec:	add	x1, x1, #0xc30
   52af0:	sub	w2, w2, w0
   52af4:	mov	x0, x21
   52af8:	ldrb	w2, [x27, w2, sxtw]
   52afc:	blr	x23
   52b00:	ldr	w0, [sp, #388]
   52b04:	lsl	w20, w20, w0
   52b08:	add	x27, x27, w20, sxtw
   52b0c:	add	x20, x27, #0x1
   52b10:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52b14:	ldr	x3, [sp, #392]
   52b18:	add	x20, x27, #0x1
   52b1c:	ldrb	w0, [x27, #1]
   52b20:	cmp	w0, #0x75
   52b24:	b.eq	52f74 <aarch64_get_opcode@@Base+0x250c>  // b.none
   52b28:	adrp	x2, fd000 <aarch64_opcode_table@@Base+0x55a20>
   52b2c:	mov	x0, x21
   52b30:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   52b34:	add	x1, x1, #0xe48
   52b38:	ldr	w2, [x2, #1616]
   52b3c:	add	x2, x2, x2, lsl #3
   52b40:	add	x2, x3, x2, lsl #1
   52b44:	ldr	x3, [sp, #128]
   52b48:	add	x2, x2, #0x2
   52b4c:	ldr	x2, [x3, x2, lsl #3]
   52b50:	blr	x23
   52b54:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52b58:	ldr	x3, [sp, #360]
   52b5c:	mov	x0, x21
   52b60:	ldr	x2, [sp, #392]
   52b64:	add	x20, x27, #0x1
   52b68:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52b6c:	add	x1, x1, #0xca8
   52b70:	sub	x2, x3, x2
   52b74:	blr	x23
   52b78:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52b7c:	adrp	x2, 92000 <aarch64_operands@@Base+0x2bd0>
   52b80:	add	x2, x2, #0xc60
   52b84:	ldr	x3, [sp, #392]
   52b88:	add	x2, x2, #0x2e0
   52b8c:	ldr	x2, [x2, x3, lsl #3]
   52b90:	mov	x0, x21
   52b94:	add	x20, x27, #0x1
   52b98:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   52b9c:	add	x1, x1, #0xe48
   52ba0:	blr	x23
   52ba4:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52ba8:	ldr	x2, [sp, #392]
   52bac:	add	x20, x27, #0x1
   52bb0:	cmp	x2, #0x7
   52bb4:	b.ls	53024 <aarch64_get_opcode@@Base+0x25bc>  // b.plast
   52bb8:	adrp	x3, 92000 <aarch64_operands@@Base+0x2bd0>
   52bbc:	add	x3, x3, #0xc60
   52bc0:	add	x3, x3, #0x200
   52bc4:	and	x2, x2, #0x7
   52bc8:	mov	x0, x21
   52bcc:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52bd0:	add	x1, x1, #0xea0
   52bd4:	ldr	x2, [x3, x2, lsl #3]
   52bd8:	blr	x23
   52bdc:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52be0:	ldr	w2, [sp, #392]
   52be4:	mov	x0, x21
   52be8:	add	x20, x27, #0x1
   52bec:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52bf0:	add	x1, x1, #0xeb0
   52bf4:	blr	x23
   52bf8:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52bfc:	ldr	w2, [sp, #388]
   52c00:	mov	x0, #0x1                   	// #1
   52c04:	ldr	x1, [sp, #392]
   52c08:	add	x20, x27, #0x2
   52c0c:	lsl	x0, x0, x2
   52c10:	sub	x0, x0, #0x1
   52c14:	cmp	x0, x1
   52c18:	add	x0, x27, #0x1
   52c1c:	b.eq	52c38 <aarch64_get_opcode@@Base+0x21d0>  // b.none
   52c20:	mov	x27, x0
   52c24:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52c28:	ldr	x1, [sp, #392]
   52c2c:	add	x0, x27, #0x1
   52c30:	add	x20, x27, #0x2
   52c34:	cbnz	x1, 52c20 <aarch64_get_opcode@@Base+0x21b8>
   52c38:	ldrb	w2, [x27, #1]
   52c3c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52c40:	mov	x27, x0
   52c44:	add	x1, x1, #0xc30
   52c48:	mov	x0, x21
   52c4c:	blr	x23
   52c50:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52c54:	ldr	x2, [sp, #392]
   52c58:	mov	x0, x21
   52c5c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52c60:	add	x1, x1, #0xca8
   52c64:	add	x20, x27, #0x1
   52c68:	blr	x23
   52c6c:	ldr	x0, [sp, #392]
   52c70:	str	x0, [sp, #112]
   52c74:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52c78:	ldr	x0, [sp, #392]
   52c7c:	add	x20, x27, #0x1
   52c80:	cmp	x0, #0x2
   52c84:	b.eq	53040 <aarch64_get_opcode@@Base+0x25d8>  // b.none
   52c88:	b.hi	52f58 <aarch64_get_opcode@@Base+0x24f0>  // b.pmore
   52c8c:	cbz	x0, 53068 <aarch64_get_opcode@@Base+0x2600>
   52c90:	mov	x0, x21
   52c94:	adrp	x1, 62000 <xexit@@Base+0x6a80>
   52c98:	add	x1, x1, #0x8e8
   52c9c:	blr	x23
   52ca0:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52ca4:	adrp	x2, 92000 <aarch64_operands@@Base+0x2bd0>
   52ca8:	add	x2, x2, #0xc60
   52cac:	add	x2, x2, #0x360
   52cb0:	ldr	x3, [sp, #392]
   52cb4:	b	52b8c <aarch64_get_opcode@@Base+0x2124>
   52cb8:	ldr	x2, [sp, #392]
   52cbc:	mov	w0, #0x40000000            	// #1073741824
   52cc0:	mov	w1, #0x3e000000            	// #1040187392
   52cc4:	mov	w7, #0x312d                	// #12589
   52cc8:	and	x4, x2, #0xf
   52ccc:	movk	w7, #0x1, lsl #16
   52cd0:	tst	x2, #0x40
   52cd4:	lsl	w3, w2, #24
   52cd8:	csel	w1, w1, w0, ne  // ne = any
   52cdc:	and	w3, w3, #0x80000000
   52ce0:	ubfiz	w0, w2, #19, #6
   52ce4:	add	x4, x4, #0x10
   52ce8:	orr	w3, w3, w0
   52cec:	mov	w0, #0x6139                	// #24889
   52cf0:	orr	w3, w3, w1
   52cf4:	movk	w0, #0x68c2, lsl #16
   52cf8:	mov	w5, #0x10c6                	// #4294
   52cfc:	ubfx	x1, x3, #23, #8
   52d00:	sub	w1, w1, #0x7c
   52d04:	lsl	w7, w7, w1
   52d08:	and	x1, x2, #0x80
   52d0c:	mul	w7, w7, w4
   52d10:	mul	w0, w7, w0
   52d14:	ror	w0, w0, #6
   52d18:	cmp	w0, w5
   52d1c:	b.hi	52fb0 <aarch64_get_opcode@@Base+0x2548>  // b.pmore
   52d20:	mov	w5, #0xca6b                	// #51819
   52d24:	mov	w6, #0x9680                	// #38528
   52d28:	movk	w5, #0x6b5f, lsl #16
   52d2c:	movk	w6, #0x98, lsl #16
   52d30:	mov	w8, #0xde83                	// #56963
   52d34:	cmp	x1, #0x0
   52d38:	umull	x5, w7, w5
   52d3c:	movk	w8, #0x431b, lsl #16
   52d40:	mov	w0, #0x20                  	// #32
   52d44:	add	x20, x27, #0x1
   52d48:	mov	w4, #0x2d                  	// #45
   52d4c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52d50:	lsr	x5, x5, #54
   52d54:	csel	w4, w4, w0, ne  // ne = any
   52d58:	add	x1, x1, #0xe58
   52d5c:	mov	x0, x21
   52d60:	msub	w6, w5, w6, w7
   52d64:	umull	x6, w6, w8
   52d68:	lsr	x6, x6, #50
   52d6c:	blr	x23
   52d70:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52d74:	ldr	x3, [sp, #392]
   52d78:	ldr	w0, [sp, #108]
   52d7c:	cmp	x3, #0xf
   52d80:	csinc	w0, w0, wzr, ne  // ne = any
   52d84:	str	w0, [sp, #108]
   52d88:	b	52b18 <aarch64_get_opcode@@Base+0x20b0>
   52d8c:	ldr	w0, [sp, #388]
   52d90:	adrp	x2, 92000 <aarch64_operands@@Base+0x2bd0>
   52d94:	add	x20, x27, #0x1
   52d98:	add	x2, x2, #0xc60
   52d9c:	cmp	w0, #0x2
   52da0:	ldr	x3, [sp, #392]
   52da4:	b.eq	53038 <aarch64_get_opcode@@Base+0x25d0>  // b.none
   52da8:	add	x2, x2, #0x260
   52dac:	ldr	x2, [x2, x3, lsl #3]
   52db0:	mov	x0, x21
   52db4:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   52db8:	add	x1, x1, #0xe48
   52dbc:	blr	x23
   52dc0:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52dc4:	ldr	w2, [sp, #248]
   52dc8:	mov	x0, x21
   52dcc:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52dd0:	add	x1, x1, #0xd40
   52dd4:	blr	x23
   52dd8:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52ddc:	ldr	w3, [sp, #196]
   52de0:	mov	x0, x21
   52de4:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52de8:	add	x1, x1, #0xf00
   52dec:	blr	x23
   52df0:	ldr	w2, [sp, #192]
   52df4:	cbz	w2, 520ac <aarch64_get_opcode@@Base+0x1644>
   52df8:	mov	x0, x21
   52dfc:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52e00:	add	x1, x1, #0xf10
   52e04:	blr	x23
   52e08:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52e0c:	cmp	w2, #0x79
   52e10:	b.eq	52f50 <aarch64_get_opcode@@Base+0x24e8>  // b.none
   52e14:	ldr	w3, [sp, #344]
   52e18:	b	52328 <aarch64_get_opcode@@Base+0x18c0>
   52e1c:	mov	x0, x21
   52e20:	adrp	x1, 6e000 <fields@@Base+0xaf60>
   52e24:	add	x1, x1, #0x340
   52e28:	blr	x23
   52e2c:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52e30:	mov	x0, x21
   52e34:	adrp	x1, 69000 <fields@@Base+0x5f60>
   52e38:	add	x1, x1, #0x5a0
   52e3c:	blr	x23
   52e40:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52e44:	mov	x0, x21
   52e48:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   52e4c:	add	x1, x1, #0x740
   52e50:	blr	x23
   52e54:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52e58:	mov	x0, x21
   52e5c:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   52e60:	add	x1, x1, #0x770
   52e64:	blr	x23
   52e68:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52e6c:	ldr	w0, [sp, #336]
   52e70:	mov	w2, #0x64                  	// #100
   52e74:	b	52a40 <aarch64_get_opcode@@Base+0x1fd8>
   52e78:	mov	x0, x21
   52e7c:	adrp	x1, 5f000 <xexit@@Base+0x3a80>
   52e80:	add	x1, x1, #0x228
   52e84:	blr	x23
   52e88:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52e8c:	mov	x0, x21
   52e90:	adrp	x1, 60000 <xexit@@Base+0x4a80>
   52e94:	add	x1, x1, #0xd0
   52e98:	blr	x23
   52e9c:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52ea0:	str	wzr, [sp, #108]
   52ea4:	b	52158 <aarch64_get_opcode@@Base+0x16f0>
   52ea8:	mov	w4, w2
   52eac:	mov	x0, x21
   52eb0:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52eb4:	add	x1, x1, #0xdb0
   52eb8:	blr	x23
   52ebc:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52ec0:	mov	x0, x21
   52ec4:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52ec8:	add	x1, x1, #0xdf0
   52ecc:	blr	x23
   52ed0:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52ed4:	mov	x0, x21
   52ed8:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52edc:	add	x1, x1, #0xdd0
   52ee0:	blr	x23
   52ee4:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52ee8:	mov	x0, x21
   52eec:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52ef0:	add	x1, x1, #0xde8
   52ef4:	blr	x23
   52ef8:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52efc:	mov	x2, x0
   52f00:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52f04:	mov	x0, x21
   52f08:	add	x1, x1, #0xe00
   52f0c:	blr	x23
   52f10:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52f14:	mov	x0, x21
   52f18:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   52f1c:	add	x1, x1, #0x8c0
   52f20:	blr	x23
   52f24:	ldr	x4, [sp, #376]
   52f28:	b	52428 <aarch64_get_opcode@@Base+0x19c0>
   52f2c:	ldr	x0, [sp, #176]
   52f30:	cbnz	x0, 52428 <aarch64_get_opcode@@Base+0x19c0>
   52f34:	str	x4, [sp, #376]
   52f38:	mov	x0, x21
   52f3c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52f40:	add	x1, x1, #0xd20
   52f44:	blr	x23
   52f48:	ldr	x4, [sp, #376]
   52f4c:	b	52428 <aarch64_get_opcode@@Base+0x19c0>
   52f50:	ldr	w3, [sp, #368]
   52f54:	b	52a0c <aarch64_get_opcode@@Base+0x1fa4>
   52f58:	cmp	x0, #0x3
   52f5c:	b.ne	53054 <aarch64_get_opcode@@Base+0x25ec>  // b.any
   52f60:	mov	x0, x21
   52f64:	adrp	x1, 62000 <xexit@@Base+0x6a80>
   52f68:	add	x1, x1, #0x938
   52f6c:	blr	x23
   52f70:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52f74:	ldr	x1, [sp, #328]
   52f78:	str	x3, [sp, #328]
   52f7c:	add	x0, x27, #0x2
   52f80:	mov	x27, x20
   52f84:	cmp	x3, x1
   52f88:	mov	x20, x0
   52f8c:	b.ne	52b28 <aarch64_get_opcode@@Base+0x20c0>  // b.any
   52f90:	mov	w0, #0x1                   	// #1
   52f94:	str	w0, [sp, #108]
   52f98:	b	52b28 <aarch64_get_opcode@@Base+0x20c0>
   52f9c:	mov	x0, x21
   52fa0:	adrp	x1, 68000 <fields@@Base+0x4f60>
   52fa4:	add	x1, x1, #0xe50
   52fa8:	blr	x23
   52fac:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   52fb0:	mov	w0, #0x7e91                	// #32401
   52fb4:	mov	w4, #0x8db8                	// #36280
   52fb8:	movk	w0, #0x3afb, lsl #16
   52fbc:	mov	w5, #0xca6b                	// #51819
   52fc0:	mov	w6, #0x9680                	// #38528
   52fc4:	movk	w4, #0x6, lsl #16
   52fc8:	mul	w0, w7, w0
   52fcc:	movk	w5, #0x6b5f, lsl #16
   52fd0:	movk	w6, #0x98, lsl #16
   52fd4:	ror	w0, w0, #4
   52fd8:	cmp	w0, w4
   52fdc:	b.hi	5307c <aarch64_get_opcode@@Base+0x2614>  // b.pmore
   52fe0:	umull	x5, w7, w5
   52fe4:	mov	w8, #0x1759                	// #5977
   52fe8:	movk	w8, #0xd1b7, lsl #16
   52fec:	cmp	x1, #0x0
   52ff0:	mov	w0, #0x20                  	// #32
   52ff4:	add	x20, x27, #0x1
   52ff8:	lsr	x5, x5, #54
   52ffc:	mov	w4, #0x2d                  	// #45
   53000:	adrp	x1, 68000 <fields@@Base+0x4f60>
   53004:	csel	w4, w4, w0, ne  // ne = any
   53008:	add	x1, x1, #0xe70
   5300c:	mov	x0, x21
   53010:	msub	w6, w5, w6, w7
   53014:	umull	x6, w6, w8
   53018:	lsr	x6, x6, #45
   5301c:	blr	x23
   53020:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   53024:	mov	x0, x21
   53028:	adrp	x1, 68000 <fields@@Base+0x4f60>
   5302c:	add	x1, x1, #0xea8
   53030:	blr	x23
   53034:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   53038:	add	x2, x2, #0x240
   5303c:	b	52dac <aarch64_get_opcode@@Base+0x2344>
   53040:	mov	x0, x21
   53044:	adrp	x1, 62000 <xexit@@Base+0x6a80>
   53048:	add	x1, x1, #0x918
   5304c:	blr	x23
   53050:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   53054:	mov	x0, x21
   53058:	adrp	x1, 68000 <fields@@Base+0x4f60>
   5305c:	add	x1, x1, #0xeb8
   53060:	blr	x23
   53064:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   53068:	mov	x0, x21
   5306c:	adrp	x1, 62000 <xexit@@Base+0x6a80>
   53070:	add	x1, x1, #0x878
   53074:	blr	x23
   53078:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   5307c:	umull	x5, w7, w5
   53080:	cmp	x1, #0x0
   53084:	mov	w0, #0x20                  	// #32
   53088:	add	x20, x27, #0x1
   5308c:	mov	w4, #0x2d                  	// #45
   53090:	adrp	x1, 68000 <fields@@Base+0x4f60>
   53094:	lsr	x5, x5, #54
   53098:	csel	w4, w4, w0, ne  // ne = any
   5309c:	add	x1, x1, #0xe88
   530a0:	mov	x0, x21
   530a4:	msub	w6, w5, w6, w7
   530a8:	blr	x23
   530ac:	b	520ac <aarch64_get_opcode@@Base+0x1644>
   530b0:	cbz	w1, 520d0 <aarch64_get_opcode@@Base+0x1668>
   530b4:	str	x5, [sp, #392]
   530b8:	bl	35670 <abort@plt>
   530bc:	nop
   530c0:	stp	x29, x30, [sp, #-64]!
   530c4:	and	x5, x0, #0xf
   530c8:	mov	x29, sp
   530cc:	stp	x21, x22, [sp, #32]
   530d0:	adrp	x22, fd000 <aarch64_opcode_table@@Base+0x55a20>
   530d4:	mov	x21, x1
   530d8:	ldr	w4, [x22, #1616]
   530dc:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   530e0:	stp	x19, x20, [sp, #16]
   530e4:	adrp	x20, 91000 <aarch64_operands@@Base+0x1bd0>
   530e8:	add	x20, x20, #0xb60
   530ec:	add	x4, x4, x4, lsl #3
   530f0:	add	x20, x20, #0xe78
   530f4:	mov	x19, x0
   530f8:	mov	x0, x2
   530fc:	add	x4, x5, x4, lsl #1
   53100:	stp	x23, x24, [sp, #48]
   53104:	add	x4, x4, #0x2
   53108:	mov	x23, x2
   5310c:	mov	w24, w3
   53110:	add	x1, x1, #0xe48
   53114:	ldr	x2, [x20, x4, lsl #3]
   53118:	blr	x21
   5311c:	tst	x19, #0xff0
   53120:	b.eq	53180 <aarch64_get_opcode@@Base+0x2718>  // b.none
   53124:	tbnz	w19, #4, 53194 <aarch64_get_opcode@@Base+0x272c>
   53128:	tst	w19, #0xf80
   5312c:	ubfx	w2, w19, #7, #5
   53130:	ubfx	w19, w19, #5, #2
   53134:	b.ne	53144 <aarch64_get_opcode@@Base+0x26dc>  // b.any
   53138:	cmp	w19, #0x3
   5313c:	mov	w2, #0x20                  	// #32
   53140:	b.eq	5325c <aarch64_get_opcode@@Base+0x27f4>  // b.none
   53144:	cbz	w24, 53214 <aarch64_get_opcode@@Base+0x27ac>
   53148:	adrp	x4, 92000 <aarch64_operands@@Base+0x2bd0>
   5314c:	add	x4, x4, #0xc60
   53150:	add	x4, x4, #0x3e0
   53154:	mov	w3, w2
   53158:	mov	x0, x23
   5315c:	mov	x16, x21
   53160:	ldp	x21, x22, [sp, #32]
   53164:	adrp	x1, 68000 <fields@@Base+0x4f60>
   53168:	ldr	x2, [x4, w19, sxtw #3]
   5316c:	add	x1, x1, #0xf50
   53170:	ldp	x19, x20, [sp, #16]
   53174:	ldp	x23, x24, [sp, #48]
   53178:	ldp	x29, x30, [sp], #64
   5317c:	br	x16
   53180:	ldp	x19, x20, [sp, #16]
   53184:	ldp	x21, x22, [sp, #32]
   53188:	ldp	x23, x24, [sp, #48]
   5318c:	ldp	x29, x30, [sp], #64
   53190:	ret
   53194:	tbz	w19, #7, 531bc <aarch64_get_opcode@@Base+0x2754>
   53198:	adrp	x1, 68000 <fields@@Base+0x4f60>
   5319c:	mov	x0, x23
   531a0:	add	x1, x1, #0xf60
   531a4:	mov	x16, x21
   531a8:	ldp	x19, x20, [sp, #16]
   531ac:	ldp	x21, x22, [sp, #32]
   531b0:	ldp	x23, x24, [sp, #48]
   531b4:	ldp	x29, x30, [sp], #64
   531b8:	br	x16
   531bc:	ldr	w0, [x22, #1616]
   531c0:	ubfx	x2, x19, #8, #4
   531c4:	add	x1, x0, x0, lsl #3
   531c8:	add	x0, x2, x1, lsl #1
   531cc:	add	x0, x0, #0x2
   531d0:	ldr	x2, [x20, x0, lsl #3]
   531d4:	cbz	w24, 53238 <aarch64_get_opcode@@Base+0x27d0>
   531d8:	adrp	x4, 92000 <aarch64_operands@@Base+0x2bd0>
   531dc:	add	x4, x4, #0xc60
   531e0:	ubfx	x19, x19, #5, #2
   531e4:	add	x4, x4, #0x3e0
   531e8:	mov	x3, x2
   531ec:	mov	x0, x23
   531f0:	mov	x16, x21
   531f4:	adrp	x1, 68000 <fields@@Base+0x4f60>
   531f8:	ldr	x2, [x4, x19, lsl #3]
   531fc:	add	x1, x1, #0xf80
   53200:	ldp	x19, x20, [sp, #16]
   53204:	ldp	x21, x22, [sp, #32]
   53208:	ldp	x23, x24, [sp, #48]
   5320c:	ldp	x29, x30, [sp], #64
   53210:	br	x16
   53214:	mov	x0, x23
   53218:	mov	x16, x21
   5321c:	ldp	x19, x20, [sp, #16]
   53220:	adrp	x1, 68000 <fields@@Base+0x4f60>
   53224:	ldp	x21, x22, [sp, #32]
   53228:	add	x1, x1, #0xd18
   5322c:	ldp	x23, x24, [sp, #48]
   53230:	ldp	x29, x30, [sp], #64
   53234:	br	x16
   53238:	mov	x0, x23
   5323c:	mov	x16, x21
   53240:	ldp	x19, x20, [sp, #16]
   53244:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   53248:	ldp	x21, x22, [sp, #32]
   5324c:	add	x1, x1, #0x160
   53250:	ldp	x23, x24, [sp, #48]
   53254:	ldp	x29, x30, [sp], #64
   53258:	br	x16
   5325c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   53260:	mov	x0, x23
   53264:	add	x1, x1, #0xf48
   53268:	b	531a4 <aarch64_get_opcode@@Base+0x273c>
   5326c:	nop
   53270:	stp	x29, x30, [sp, #-80]!
   53274:	mov	x29, sp
   53278:	stp	x19, x20, [sp, #16]
   5327c:	mov	x20, x1
   53280:	mov	x1, #0x20f0000             	// #34537472
   53284:	stp	x21, x22, [sp, #32]
   53288:	and	x1, x2, x1
   5328c:	mov	x19, x2
   53290:	stp	x23, x24, [sp, #48]
   53294:	cmp	x1, #0xf0, lsl #12
   53298:	and	x23, x2, #0x1000000
   5329c:	stp	x25, x26, [sp, #64]
   532a0:	and	x22, x2, #0x800000
   532a4:	ldp	x24, x25, [x20]
   532a8:	b.eq	533ac <aarch64_get_opcode@@Base+0x2944>  // b.none
   532ac:	adrp	x0, fd000 <aarch64_opcode_table@@Base+0x55a20>
   532b0:	ubfx	x5, x2, #16, #4
   532b4:	adrp	x4, 91000 <aarch64_operands@@Base+0x1bd0>
   532b8:	add	x4, x4, #0xb60
   532bc:	ldr	w2, [x0, #1616]
   532c0:	adrp	x1, 68000 <fields@@Base+0x4f60>
   532c4:	mov	x0, x25
   532c8:	add	x1, x1, #0xcf8
   532cc:	add	x3, x2, x2, lsl #3
   532d0:	add	x2, x5, x3, lsl #1
   532d4:	add	x2, x4, x2, lsl #3
   532d8:	ldr	x2, [x2, #3720]
   532dc:	blr	x24
   532e0:	and	x0, x19, #0x2000000
   532e4:	cbz	x23, 53374 <aarch64_get_opcode@@Base+0x290c>
   532e8:	cbz	x0, 534b0 <aarch64_get_opcode@@Base+0x2a48>
   532ec:	cmp	x22, #0x0
   532f0:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   532f4:	adrp	x2, 68000 <fields@@Base+0x4f60>
   532f8:	add	x0, x0, #0x6b8
   532fc:	add	x2, x2, #0xcf0
   53300:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   53304:	csel	x2, x2, x0, eq  // eq = none
   53308:	add	x1, x1, #0x160
   5330c:	mov	x0, x25
   53310:	blr	x24
   53314:	mov	x2, x25
   53318:	mov	x1, x24
   5331c:	mov	x0, x19
   53320:	mov	w3, #0x1                   	// #1
   53324:	mov	x20, #0x0                   	// #0
   53328:	bl	530c0 <aarch64_get_opcode@@Base+0x2658>
   5332c:	tst	x19, #0x200000
   53330:	adrp	x1, 68000 <fields@@Base+0x4f60>
   53334:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   53338:	add	x1, x1, #0xc98
   5333c:	add	x2, x2, #0x6b8
   53340:	mov	x0, x25
   53344:	csel	x2, x2, x1, eq  // eq = none
   53348:	adrp	x1, 68000 <fields@@Base+0x4f60>
   5334c:	add	x1, x1, #0xf98
   53350:	blr	x24
   53354:	cmp	x22, #0x0
   53358:	cneg	x0, x20, eq  // eq = none
   5335c:	ldp	x19, x20, [sp, #16]
   53360:	ldp	x21, x22, [sp, #32]
   53364:	ldp	x23, x24, [sp, #48]
   53368:	ldp	x25, x26, [sp, #64]
   5336c:	ldp	x29, x30, [sp], #80
   53370:	ret
   53374:	cmp	x22, #0x0
   53378:	cbnz	x0, 534f8 <aarch64_get_opcode@@Base+0x2a90>
   5337c:	and	x20, x19, #0xfff
   53380:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   53384:	adrp	x2, 68000 <fields@@Base+0x4f60>
   53388:	add	x1, x1, #0x6b8
   5338c:	add	x2, x2, #0xcf0
   53390:	mov	x0, x25
   53394:	csel	x2, x2, x1, eq  // eq = none
   53398:	mov	w3, w20
   5339c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   533a0:	add	x1, x1, #0xee0
   533a4:	blr	x24
   533a8:	b	53354 <aarch64_get_opcode@@Base+0x28ec>
   533ac:	mov	x21, x0
   533b0:	adrp	x1, 68000 <fields@@Base+0x4f60>
   533b4:	and	x26, x2, #0xfff
   533b8:	add	x1, x1, #0xf88
   533bc:	mov	x0, x25
   533c0:	blr	x24
   533c4:	cbz	x23, 53444 <aarch64_get_opcode@@Base+0x29dc>
   533c8:	mov	x0, #0xa00000              	// #10485760
   533cc:	and	x0, x19, x0
   533d0:	cmp	x0, #0x800, lsl #12
   533d4:	ccmp	x26, #0x0, #0x0, eq  // eq = none
   533d8:	b.eq	53408 <aarch64_get_opcode@@Base+0x29a0>  // b.none
   533dc:	cmp	x22, #0x0
   533e0:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   533e4:	adrp	x2, 68000 <fields@@Base+0x4f60>
   533e8:	add	x0, x0, #0x6b8
   533ec:	add	x2, x2, #0xcf0
   533f0:	adrp	x1, 68000 <fields@@Base+0x4f60>
   533f4:	csel	x2, x2, x0, eq  // eq = none
   533f8:	add	x1, x1, #0xf90
   533fc:	mov	w3, w26
   53400:	mov	x0, x25
   53404:	blr	x24
   53408:	cmp	x22, #0x0
   5340c:	add	x0, x21, #0x8
   53410:	cneg	x26, x26, eq  // eq = none
   53414:	tst	x19, #0x200000
   53418:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   5341c:	adrp	x2, 68000 <fields@@Base+0x4f60>
   53420:	add	x1, x1, #0x6b8
   53424:	add	x2, x2, #0xc98
   53428:	add	x21, x0, x26
   5342c:	csel	x2, x2, x1, ne  // ne = any
   53430:	mov	x0, x25
   53434:	adrp	x1, 68000 <fields@@Base+0x4f60>
   53438:	add	x1, x1, #0xf98
   5343c:	blr	x24
   53440:	b	53474 <aarch64_get_opcode@@Base+0x2a0c>
   53444:	cmp	x22, #0x0
   53448:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   5344c:	adrp	x2, 68000 <fields@@Base+0x4f60>
   53450:	add	x0, x0, #0x6b8
   53454:	add	x2, x2, #0xcf0
   53458:	adrp	x1, 68000 <fields@@Base+0x4f60>
   5345c:	csel	x2, x2, x0, eq  // eq = none
   53460:	add	x21, x21, #0x8
   53464:	mov	w3, w26
   53468:	mov	x0, x25
   5346c:	add	x1, x1, #0xee0
   53470:	blr	x24
   53474:	mov	x0, x25
   53478:	adrp	x1, 68000 <fields@@Base+0x4f60>
   5347c:	add	x1, x1, #0xd38
   53480:	blr	x24
   53484:	ldr	x2, [x20, #120]
   53488:	mov	x0, x21
   5348c:	mov	x1, x20
   53490:	blr	x2
   53494:	mov	x0, #0x0                   	// #0
   53498:	ldp	x19, x20, [sp, #16]
   5349c:	ldp	x21, x22, [sp, #32]
   534a0:	ldp	x23, x24, [sp, #48]
   534a4:	ldp	x25, x26, [sp, #64]
   534a8:	ldp	x29, x30, [sp], #80
   534ac:	ret
   534b0:	mov	x0, #0xa00000              	// #10485760
   534b4:	and	x0, x19, x0
   534b8:	cmp	x0, #0x800, lsl #12
   534bc:	and	x20, x19, #0xfff
   534c0:	ccmp	x20, #0x0, #0x0, eq  // eq = none
   534c4:	b.eq	53538 <aarch64_get_opcode@@Base+0x2ad0>  // b.none
   534c8:	cmp	x22, #0x0
   534cc:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   534d0:	adrp	x2, 68000 <fields@@Base+0x4f60>
   534d4:	add	x0, x0, #0x6b8
   534d8:	add	x2, x2, #0xcf0
   534dc:	mov	w3, w20
   534e0:	csel	x2, x2, x0, eq  // eq = none
   534e4:	adrp	x1, 68000 <fields@@Base+0x4f60>
   534e8:	mov	x0, x25
   534ec:	add	x1, x1, #0xf90
   534f0:	blr	x24
   534f4:	b	5332c <aarch64_get_opcode@@Base+0x28c4>
   534f8:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   534fc:	adrp	x2, 68000 <fields@@Base+0x4f60>
   53500:	add	x0, x0, #0x6b8
   53504:	add	x2, x2, #0xcf0
   53508:	csel	x2, x2, x0, eq  // eq = none
   5350c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   53510:	mov	x0, x25
   53514:	add	x1, x1, #0xfa0
   53518:	blr	x24
   5351c:	mov	x20, #0x0                   	// #0
   53520:	mov	x2, x25
   53524:	mov	x1, x24
   53528:	mov	x0, x19
   5352c:	mov	w3, #0x1                   	// #1
   53530:	bl	530c0 <aarch64_get_opcode@@Base+0x2658>
   53534:	b	53354 <aarch64_get_opcode@@Base+0x28ec>
   53538:	mov	x20, #0x0                   	// #0
   5353c:	b	5332c <aarch64_get_opcode@@Base+0x28c4>
   53540:	ldr	w0, [x1, #172]
   53544:	cmp	w0, #0x2
   53548:	b.eq	53584 <aarch64_get_opcode@@Base+0x2b1c>  // b.none
   5354c:	cmp	w0, #0x4
   53550:	b.ne	53568 <aarch64_get_opcode@@Base+0x2b00>  // b.any
   53554:	ldp	x3, x0, [x1]
   53558:	adrp	x4, 68000 <fields@@Base+0x4f60>
   5355c:	add	x1, x4, #0xfc8
   53560:	mov	x16, x3
   53564:	br	x16
   53568:	cmp	w0, #0x1
   5356c:	b.ne	53598 <aarch64_get_opcode@@Base+0x2b30>  // b.any
   53570:	ldp	x3, x0, [x1]
   53574:	adrp	x4, 68000 <fields@@Base+0x4f60>
   53578:	add	x1, x4, #0xfa8
   5357c:	mov	x16, x3
   53580:	br	x16
   53584:	ldp	x3, x0, [x1]
   53588:	adrp	x4, 68000 <fields@@Base+0x4f60>
   5358c:	add	x1, x4, #0xfb8
   53590:	mov	x16, x3
   53594:	br	x16
   53598:	stp	x29, x30, [sp, #-16]!
   5359c:	mov	x29, sp
   535a0:	bl	35670 <abort@plt>
   535a4:	nop
   535a8:	stp	x29, x30, [sp, #-400]!
   535ac:	mov	x29, sp
   535b0:	stp	x19, x20, [sp, #16]
   535b4:	mov	x19, x0
   535b8:	mov	x20, x1
   535bc:	stp	x21, x22, [sp, #32]
   535c0:	mov	x21, x2
   535c4:	str	w3, [sp, #112]
   535c8:	cbz	w3, 53600 <aarch64_get_opcode@@Base+0x2b98>
   535cc:	mov	x0, #0xef000000            	// #4009754624
   535d0:	bics	xzr, x0, x2
   535d4:	b.eq	54298 <aarch64_get_opcode@@Base+0x3830>  // b.none
   535d8:	and	x1, x2, #0xff000000
   535dc:	mov	x0, #0xf9000000            	// #4177526784
   535e0:	cmp	x1, x0
   535e4:	b.eq	54438 <aarch64_get_opcode@@Base+0x39d0>  // b.none
   535e8:	mov	x0, #0xfd000000            	// #4244635648
   535ec:	and	x0, x2, x0
   535f0:	mov	x1, #0xfc000000            	// #4227858432
   535f4:	cmp	x0, x1
   535f8:	b.ne	542ec <aarch64_get_opcode@@Base+0x3884>  // b.any
   535fc:	nop
   53600:	stp	x25, x26, [sp, #64]
   53604:	adrp	x5, 68000 <fields@@Base+0x4f60>
   53608:	adrp	x0, 9d000 <aarch64_operands@@Base+0xdbd0>
   5360c:	add	x26, x5, #0xfd8
   53610:	add	x0, x0, #0x570
   53614:	b	53624 <aarch64_get_opcode@@Base+0x2bbc>
   53618:	ldr	x26, [x0, #88]
   5361c:	add	x0, x0, #0x30
   53620:	cbz	x26, 54080 <aarch64_get_opcode@@Base+0x3618>
   53624:	ldp	x2, x1, [x0, #24]
   53628:	and	x1, x21, x1
   5362c:	cmp	x1, x2
   53630:	b.ne	53618 <aarch64_get_opcode@@Base+0x2bb0>  // b.any
   53634:	ldrb	w0, [x26]
   53638:	str	w0, [sp, #120]
   5363c:	cbz	w0, 54558 <aarch64_get_opcode@@Base+0x3af0>
   53640:	asr	x0, x21, #16
   53644:	stp	x23, x24, [sp, #48]
   53648:	asr	x23, x21, #24
   5364c:	ubfiz	w0, w0, #4, #3
   53650:	and	w22, w21, #0xf
   53654:	ubfiz	w23, w23, #7, #1
   53658:	mov	w4, #0x40                  	// #64
   5365c:	orr	w23, w23, w0
   53660:	mov	w12, #0x3c                  	// #60
   53664:	orr	w5, w23, w22
   53668:	mov	x0, #0xff                  	// #255
   5366c:	mov	x2, x5
   53670:	ubfx	w3, w21, #8, #1
   53674:	add	w3, w3, #0x1
   53678:	stp	x27, x28, [sp, #80]
   5367c:	tst	x2, #0x40
   53680:	csel	w12, w12, w4, ne  // ne = any
   53684:	tst	x2, #0x40
   53688:	csel	x9, x0, xzr, ne  // ne = any
   5368c:	cmp	wzr, w5, lsr #7
   53690:	csel	x11, x0, xzr, ne  // ne = any
   53694:	tst	x2, #0x20
   53698:	csel	x27, x0, xzr, ne  // ne = any
   5369c:	tst	x2, #0x10
   536a0:	csel	x18, x0, xzr, ne  // ne = any
   536a4:	tst	x2, #0x8
   536a8:	csel	x10, x0, xzr, ne  // ne = any
   536ac:	lsl	w3, w3, #3
   536b0:	tst	x2, #0x4
   536b4:	ubfx	w1, w21, #9, #2
   536b8:	sxtw	x23, w5
   536bc:	csel	x8, x0, xzr, ne  // ne = any
   536c0:	mov	x13, #0x1                   	// #1
   536c4:	tst	x2, #0x2
   536c8:	csel	x14, x0, xzr, ne  // ne = any
   536cc:	asr	x4, x21, #8
   536d0:	tst	x2, #0x1
   536d4:	lsl	x6, x13, x3
   536d8:	lsl	w1, w1, #3
   536dc:	sub	x6, x6, #0x1
   536e0:	csel	x0, x0, xzr, ne  // ne = any
   536e4:	lsl	x3, x23, x3
   536e8:	ands	w2, w4, #0x8
   536ec:	orr	x3, x6, x3
   536f0:	lsl	x1, x23, x1
   536f4:	str	w2, [sp, #200]
   536f8:	csel	x2, x1, x3, eq  // eq = none
   536fc:	str	x2, [sp, #216]
   53700:	mov	x2, x5
   53704:	sbfiz	x6, x5, #24, #32
   53708:	orr	x11, x9, x11, lsl #8
   5370c:	orr	x10, x8, x10, lsl #8
   53710:	ubfiz	x9, x2, #19, #7
   53714:	and	x6, x6, #0x80000000
   53718:	orr	x6, x6, x9
   5371c:	sbfiz	x12, x12, #24, #32
   53720:	ubfx	w28, w21, #8, #2
   53724:	orr	x12, x12, x6
   53728:	orr	x10, x14, x10, lsl #8
   5372c:	str	x12, [sp, #232]
   53730:	add	w25, w28, #0x1
   53734:	ubfx	w15, w21, #5, #1
   53738:	orr	x10, x0, x10, lsl #8
   5373c:	cmp	w28, #0x0
   53740:	asr	x7, x21, #22
   53744:	csel	w8, w15, wzr, eq  // eq = none
   53748:	ldr	x0, [sp, #232]
   5374c:	lsl	w16, w25, #3
   53750:	str	w15, [sp, #248]
   53754:	ubfx	w15, w21, #6, #2
   53758:	ubfiz	w7, w7, #4, #1
   5375c:	ubfx	w17, w21, #12, #4
   53760:	cmp	w8, #0x0
   53764:	mov	w2, w8
   53768:	lsl	w15, w16, w15
   5376c:	orr	x11, x27, x11, lsl #8
   53770:	ubfx	w6, w6, #16, #8
   53774:	orr	w27, w7, w17
   53778:	ubfx	w17, w21, #16, #4
   5377c:	str	w15, [sp, #184]
   53780:	asr	x3, x21, #1
   53784:	mov	w14, #0x2                   	// #2
   53788:	csel	w14, w25, w14, eq  // eq = none
   5378c:	str	w2, [sp, #188]
   53790:	mov	w2, w17
   53794:	sub	w17, w27, #0x1
   53798:	str	w6, [sp, #376]
   5379c:	ubfx	x6, x0, #24, #32
   537a0:	and	w3, w3, #0x10
   537a4:	ldr	w0, [sp, #184]
   537a8:	asr	x8, x21, #3
   537ac:	str	x6, [sp, #368]
   537b0:	add	w6, w14, w17
   537b4:	ubfx	w24, w21, #20, #2
   537b8:	orr	w3, w3, w22
   537bc:	and	w8, w8, #0x10
   537c0:	str	w22, [sp, #104]
   537c4:	ubfx	w22, w21, #4, #4
   537c8:	str	w6, [sp, #252]
   537cc:	and	x6, x1, #0x80000000
   537d0:	str	w5, [sp, #380]
   537d4:	ubfx	w5, w21, #10, #2
   537d8:	orr	w8, w8, w2
   537dc:	mov	w7, #0x4                   	// #4
   537e0:	str	x6, [sp, #256]
   537e4:	orr	x6, x1, #0xffffffff00000000
   537e8:	ubfx	w30, w21, #4, #2
   537ec:	asr	w16, w3, w24
   537f0:	lsl	w7, w7, w24
   537f4:	orr	x11, x18, x11, lsl #8
   537f8:	asr	w24, w22, w5
   537fc:	sub	w7, w7, #0x1
   53800:	and	w24, w24, #0x1
   53804:	str	w2, [sp, #116]
   53808:	adrp	x2, 91000 <aarch64_operands@@Base+0x1bd0>
   5380c:	add	x2, x2, #0xb60
   53810:	str	w27, [sp, #128]
   53814:	and	w3, w7, w3
   53818:	str	w8, [sp, #140]
   5381c:	mov	w8, w22
   53820:	lsl	w22, w13, w5
   53824:	sub	w22, w22, #0x1
   53828:	stp	w28, w30, [sp, #176]
   5382c:	asr	x12, x21, #6
   53830:	str	w5, [sp, #204]
   53834:	orr	w4, w4, w12
   53838:	str	w22, [sp, #224]
   5383c:	asr	x22, x21, #4
   53840:	str	x6, [sp, #264]
   53844:	asr	w6, w0, #1
   53848:	str	x2, [sp, #272]
   5384c:	ubfx	w9, w21, #9, #1
   53850:	str	w24, [sp, #288]
   53854:	cmp	w5, #0x0
   53858:	stp	x23, x11, [sp, #304]
   5385c:	lsl	w9, w9, #3
   53860:	add	w15, w5, #0x1
   53864:	str	x10, [sp, #320]
   53868:	ccmp	w25, #0x1, #0x4, gt
   5386c:	str	w6, [sp, #340]
   53870:	asr	w6, w16, #2
   53874:	stp	w3, w6, [sp, #192]
   53878:	add	w3, w27, w25, lsl #1
   5387c:	ldr	w0, [sp, #140]
   53880:	mov	x27, x26
   53884:	ldr	w1, [sp, #224]
   53888:	add	w0, w0, w28
   5388c:	str	w0, [sp, #228]
   53890:	and	w0, w4, #0x3
   53894:	str	w0, [sp, #284]
   53898:	and	w0, w12, #0x2
   5389c:	str	w0, [sp, #336]
   538a0:	add	x0, x2, #0xe78
   538a4:	str	x0, [sp, #96]
   538a8:	lsl	w0, w30, #6
   538ac:	str	w0, [sp, #364]
   538b0:	and	w0, w22, #0x2
   538b4:	str	w0, [sp, #360]
   538b8:	ubfx	w0, w21, #8, #4
   538bc:	str	w0, [sp, #132]
   538c0:	ubfx	w0, w21, #4, #1
   538c4:	str	w0, [sp, #136]
   538c8:	and	x0, x21, #0x40
   538cc:	str	x0, [sp, #344]
   538d0:	lsl	x0, x23, x9
   538d4:	mov	w4, #0x10                  	// #16
   538d8:	str	x0, [sp, #296]
   538dc:	asr	w0, w8, w15
   538e0:	str	w3, [sp, #352]
   538e4:	csinc	w3, w13, w24, le
   538e8:	and	w1, w8, w1
   538ec:	str	w0, [sp, #208]
   538f0:	lsl	w0, w4, w5
   538f4:	str	w3, [sp, #212]
   538f8:	mov	w3, #0x8                   	// #8
   538fc:	str	w0, [sp, #292]
   53900:	lsl	w0, w3, w5
   53904:	str	w1, [sp, #332]
   53908:	mov	w1, #0x20                  	// #32
   5390c:	str	w0, [sp, #356]
   53910:	lsl	w0, w1, w5
   53914:	adrp	x22, 68000 <fields@@Base+0x4f60>
   53918:	ldr	w2, [sp, #120]
   5391c:	add	x22, x22, #0xc30
   53920:	str	wzr, [sp, #108]
   53924:	str	xzr, [sp, #240]
   53928:	str	w0, [sp, #328]
   5392c:	lsl	w0, w1, w30
   53930:	str	w0, [sp, #280]
   53934:	b	53958 <aarch64_get_opcode@@Base+0x2ef0>
   53938:	mov	x1, x22
   5393c:	mov	x0, x20
   53940:	blr	x19
   53944:	mov	x0, x26
   53948:	mov	x26, x27
   5394c:	mov	x27, x0
   53950:	ldrb	w2, [x26, #1]
   53954:	cbz	w2, 539c8 <aarch64_get_opcode@@Base+0x2f60>
   53958:	cmp	w2, #0x25
   5395c:	add	x26, x27, #0x1
   53960:	b.ne	53938 <aarch64_get_opcode@@Base+0x2ed0>  // b.any
   53964:	ldrb	w1, [x27, #1]
   53968:	cmp	w1, #0x43
   5396c:	b.eq	53f68 <aarch64_get_opcode@@Base+0x3500>  // b.none
   53970:	b.ls	53a90 <aarch64_get_opcode@@Base+0x3028>  // b.plast
   53974:	cmp	w1, #0x46
   53978:	b.eq	53e38 <aarch64_get_opcode@@Base+0x33d0>  // b.none
   5397c:	b.ls	53a6c <aarch64_get_opcode@@Base+0x3004>  // b.plast
   53980:	cmp	w1, #0x63
   53984:	b.ne	53a20 <aarch64_get_opcode@@Base+0x2fb8>  // b.any
   53988:	ldr	w0, [sp, #112]
   5398c:	add	x27, x27, #0x2
   53990:	cbz	w0, 53950 <aarch64_get_opcode@@Base+0x2ee8>
   53994:	adrp	x0, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   53998:	ldr	w0, [x0, #1040]
   5399c:	cbz	w0, 53950 <aarch64_get_opcode@@Base+0x2ee8>
   539a0:	ubfx	x2, x0, #4, #4
   539a4:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   539a8:	ldr	x0, [sp, #272]
   539ac:	add	x1, x1, #0xe48
   539b0:	add	x3, x0, #0xdf0
   539b4:	mov	x0, x20
   539b8:	ldr	x2, [x3, x2, lsl #3]
   539bc:	blr	x19
   539c0:	ldrb	w2, [x26, #1]
   539c4:	cbnz	w2, 53958 <aarch64_get_opcode@@Base+0x2ef0>
   539c8:	ldr	x2, [sp, #240]
   539cc:	add	x0, x2, #0x10
   539d0:	cmp	x0, #0x30
   539d4:	b.ls	539e8 <aarch64_get_opcode@@Base+0x2f80>  // b.plast
   539d8:	adrp	x1, 68000 <fields@@Base+0x4f60>
   539dc:	mov	x0, x20
   539e0:	add	x1, x1, #0xcb8
   539e4:	blr	x19
   539e8:	ldr	w0, [sp, #108]
   539ec:	cbz	w0, 54238 <aarch64_get_opcode@@Base+0x37d0>
   539f0:	mov	x0, x20
   539f4:	adrp	x1, 68000 <fields@@Base+0x4f60>
   539f8:	add	x1, x1, #0xf28
   539fc:	blr	x19
   53a00:	ldp	x23, x24, [sp, #48]
   53a04:	ldp	x25, x26, [sp, #64]
   53a08:	ldp	x27, x28, [sp, #80]
   53a0c:	ldr	w0, [sp, #108]
   53a10:	ldp	x19, x20, [sp, #16]
   53a14:	ldp	x21, x22, [sp, #32]
   53a18:	ldp	x29, x30, [sp], #400
   53a1c:	ret
   53a20:	cmp	w1, #0x75
   53a24:	b.ne	54568 <aarch64_get_opcode@@Base+0x3b00>  // b.any
   53a28:	ldr	w0, [sp, #112]
   53a2c:	add	x27, x27, #0x2
   53a30:	cbz	w0, 53950 <aarch64_get_opcode@@Base+0x2ee8>
   53a34:	adrp	x0, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   53a38:	ldr	w0, [x0, #1040]
   53a3c:	cbz	w0, 53950 <aarch64_get_opcode@@Base+0x2ee8>
   53a40:	ubfx	x2, x0, #4, #4
   53a44:	ldr	w1, [sp, #112]
   53a48:	ldr	x0, [sp, #272]
   53a4c:	str	w1, [sp, #108]
   53a50:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   53a54:	add	x1, x1, #0xe48
   53a58:	add	x3, x0, #0xdf0
   53a5c:	mov	x0, x20
   53a60:	ldr	x2, [x3, x2, lsl #3]
   53a64:	blr	x19
   53a68:	b	539c0 <aarch64_get_opcode@@Base+0x2f58>
   53a6c:	cmp	w1, #0x44
   53a70:	b.ne	53c1c <aarch64_get_opcode@@Base+0x31b4>  // b.any
   53a74:	ldp	w2, w3, [sp, #192]
   53a78:	add	x27, x27, #0x2
   53a7c:	mov	x0, x20
   53a80:	adrp	x1, 69000 <fields@@Base+0x5f60>
   53a84:	add	x1, x1, #0x80
   53a88:	blr	x19
   53a8c:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   53a90:	cmp	w1, #0x41
   53a94:	b.eq	53e5c <aarch64_get_opcode@@Base+0x33f4>  // b.none
   53a98:	cmp	w1, #0x42
   53a9c:	b.ne	53c58 <aarch64_get_opcode@@Base+0x31f0>  // b.any
   53aa0:	cmp	w25, #0x3
   53aa4:	b.eq	54374 <aarch64_get_opcode@@Base+0x390c>  // b.none
   53aa8:	cmp	w25, #0x4
   53aac:	b.eq	54318 <aarch64_get_opcode@@Base+0x38b0>  // b.none
   53ab0:	cmp	w25, #0x2
   53ab4:	b.eq	54350 <aarch64_get_opcode@@Base+0x38e8>  // b.none
   53ab8:	ldr	w0, [sp, #288]
   53abc:	cbnz	w0, 54394 <aarch64_get_opcode@@Base+0x392c>
   53ac0:	ldr	w0, [sp, #204]
   53ac4:	cbz	w0, 53adc <aarch64_get_opcode@@Base+0x3074>
   53ac8:	ldr	w1, [sp, #224]
   53acc:	ldr	w0, [sp, #332]
   53ad0:	cmp	w1, w0
   53ad4:	b.eq	5449c <aarch64_get_opcode@@Base+0x3a34>  // b.none
   53ad8:	cbnz	w0, 54394 <aarch64_get_opcode@@Base+0x392c>
   53adc:	str	wzr, [sp, #144]
   53ae0:	ldr	w23, [sp, #128]
   53ae4:	mov	x0, x20
   53ae8:	adrp	x1, 68000 <fields@@Base+0x4f60>
   53aec:	add	x1, x1, #0xc90
   53af0:	blr	x19
   53af4:	mov	w28, #0x0                   	// #0
   53af8:	adrp	x1, 69000 <fields@@Base+0x5f60>
   53afc:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   53b00:	add	x24, x1, #0x38
   53b04:	add	x0, x0, #0x6b8
   53b08:	str	x0, [sp, #120]
   53b0c:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   53b10:	add	x0, x0, #0x498
   53b14:	stp	x26, x21, [sp, #152]
   53b18:	mov	x26, x24
   53b1c:	str	x22, [sp, #168]
   53b20:	mov	x22, x20
   53b24:	mov	w20, w23
   53b28:	mov	w21, w28
   53b2c:	ldp	w23, w24, [sp, #208]
   53b30:	mov	x28, x0
   53b34:	cbnz	w21, 53b60 <aarch64_get_opcode@@Base+0x30f8>
   53b38:	ldr	x2, [sp, #120]
   53b3c:	mov	w3, w20
   53b40:	mov	w4, w23
   53b44:	mov	x1, x26
   53b48:	mov	x0, x22
   53b4c:	add	w20, w20, w24
   53b50:	blr	x19
   53b54:	cmp	w25, #0x1
   53b58:	b.le	53b88 <aarch64_get_opcode@@Base+0x3120>
   53b5c:	mov	w21, #0x1                   	// #1
   53b60:	mov	w3, w20
   53b64:	add	w21, w21, #0x1
   53b68:	mov	w4, w23
   53b6c:	mov	x2, x28
   53b70:	mov	x1, x26
   53b74:	mov	x0, x22
   53b78:	blr	x19
   53b7c:	add	w20, w20, w24
   53b80:	cmp	w25, w21
   53b84:	b.gt	53b34 <aarch64_get_opcode@@Base+0x30cc>
   53b88:	adrp	x23, fd000 <aarch64_opcode_table@@Base+0x55a20>
   53b8c:	ldr	w3, [sp, #116]
   53b90:	mov	x0, x22
   53b94:	mov	x20, x22
   53b98:	ldr	w2, [x23, #1616]
   53b9c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   53ba0:	add	x1, x1, #0x28
   53ba4:	ldp	x26, x21, [sp, #152]
   53ba8:	add	x2, x2, x2, lsl #3
   53bac:	ldr	x22, [sp, #168]
   53bb0:	lsl	x2, x2, #1
   53bb4:	add	x2, x2, w3, sxtw
   53bb8:	ldr	x3, [sp, #96]
   53bbc:	add	x2, x2, #0x2
   53bc0:	ldr	x2, [x3, x2, lsl #3]
   53bc4:	blr	x19
   53bc8:	ldr	w0, [sp, #144]
   53bcc:	cbz	w0, 53f0c <aarch64_get_opcode@@Base+0x34a4>
   53bd0:	mov	w2, w0
   53bd4:	adrp	x1, 69000 <fields@@Base+0x5f60>
   53bd8:	mov	x0, x20
   53bdc:	add	x1, x1, #0x30
   53be0:	blr	x19
   53be4:	add	x27, x27, #0x2
   53be8:	mov	x0, x20
   53bec:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   53bf0:	add	x1, x1, #0x8c0
   53bf4:	blr	x19
   53bf8:	ldr	w0, [sp, #104]
   53bfc:	cmp	w0, #0xd
   53c00:	b.ne	53f2c <aarch64_get_opcode@@Base+0x34c4>  // b.any
   53c04:	nop
   53c08:	mov	x0, x20
   53c0c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   53c10:	add	x1, x1, #0xc98
   53c14:	blr	x19
   53c18:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   53c1c:	cmp	w1, #0x45
   53c20:	b.ne	54568 <aarch64_get_opcode@@Base+0x3b00>  // b.any
   53c24:	ldr	w0, [sp, #200]
   53c28:	add	x27, x27, #0x2
   53c2c:	cbnz	w0, 5412c <aarch64_get_opcode@@Base+0x36c4>
   53c30:	ldp	x0, x1, [sp, #256]
   53c34:	cmp	x0, #0x0
   53c38:	ldr	x0, [sp, #216]
   53c3c:	csel	x2, x0, x1, eq  // eq = none
   53c40:	mov	x3, x0
   53c44:	mov	x0, x20
   53c48:	adrp	x1, 69000 <fields@@Base+0x5f60>
   53c4c:	add	x1, x1, #0xe8
   53c50:	blr	x19
   53c54:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   53c58:	cmp	w1, #0x25
   53c5c:	b.ne	53c78 <aarch64_get_opcode@@Base+0x3210>  // b.any
   53c60:	add	x27, x27, #0x2
   53c64:	mov	x0, x20
   53c68:	adrp	x1, 68000 <fields@@Base+0x4f60>
   53c6c:	add	x1, x1, #0xc38
   53c70:	blr	x19
   53c74:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   53c78:	sub	w1, w1, #0x30
   53c7c:	and	w1, w1, #0xff
   53c80:	cmp	w1, #0x9
   53c84:	b.hi	54568 <aarch64_get_opcode@@Base+0x3b00>  // b.pmore
   53c88:	mov	x0, x26
   53c8c:	add	x3, sp, #0x180
   53c90:	add	x2, sp, #0x188
   53c94:	mov	x1, x21
   53c98:	bl	513b0 <aarch64_get_opcode@@Base+0x948>
   53c9c:	mov	x26, x0
   53ca0:	ldrb	w0, [x0]
   53ca4:	cmp	w0, #0x52
   53ca8:	b.eq	543c0 <aarch64_get_opcode@@Base+0x3958>  // b.none
   53cac:	b.ls	53d9c <aarch64_get_opcode@@Base+0x3334>  // b.plast
   53cb0:	cmp	w0, #0x64
   53cb4:	b.eq	54454 <aarch64_get_opcode@@Base+0x39ec>  // b.none
   53cb8:	b.ls	53d30 <aarch64_get_opcode@@Base+0x32c8>  // b.plast
   53cbc:	cmp	w0, #0x65
   53cc0:	b.ne	53cf0 <aarch64_get_opcode@@Base+0x3288>  // b.any
   53cc4:	ldr	w3, [sp, #384]
   53cc8:	mov	x0, #0x1                   	// #1
   53ccc:	ldr	x2, [sp, #392]
   53cd0:	adrp	x1, 68000 <fields@@Base+0x4f60>
   53cd4:	lsl	x0, x0, x3
   53cd8:	add	x1, x1, #0xca8
   53cdc:	sub	x2, x0, x2
   53ce0:	add	x27, x26, #0x1
   53ce4:	mov	x0, x20
   53ce8:	blr	x19
   53cec:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   53cf0:	cmp	w0, #0x72
   53cf4:	b.ne	54568 <aarch64_get_opcode@@Base+0x3b00>  // b.any
   53cf8:	adrp	x0, fd000 <aarch64_opcode_table@@Base+0x55a20>
   53cfc:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   53d00:	ldr	x3, [sp, #392]
   53d04:	add	x1, x1, #0xe48
   53d08:	ldr	w2, [x0, #1616]
   53d0c:	add	x27, x26, #0x1
   53d10:	mov	x0, x20
   53d14:	add	x2, x2, x2, lsl #3
   53d18:	add	x2, x3, x2, lsl #1
   53d1c:	ldr	x3, [sp, #96]
   53d20:	add	x2, x2, #0x2
   53d24:	ldr	x2, [x3, x2, lsl #3]
   53d28:	blr	x19
   53d2c:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   53d30:	cmp	w0, #0x55
   53d34:	b.hi	53dd4 <aarch64_get_opcode@@Base+0x336c>  // b.pmore
   53d38:	ldrb	w1, [x26, #1]
   53d3c:	sub	w0, w0, #0x53
   53d40:	mov	w2, #0x8                   	// #8
   53d44:	add	x5, x26, #0x1
   53d48:	sub	w3, w1, #0x30
   53d4c:	lsl	w0, w2, w0
   53d50:	and	w2, w3, #0xff
   53d54:	cmp	w2, #0x9
   53d58:	b.hi	544b4 <aarch64_get_opcode@@Base+0x3a4c>  // b.pmore
   53d5c:	mov	w1, w3
   53d60:	ldr	x4, [sp, #392]
   53d64:	asr	w3, w1, #2
   53d68:	mov	x26, x5
   53d6c:	cmp	x4, w3, sxtw
   53d70:	lsl	w2, w0, w4
   53d74:	b.cc	54508 <aarch64_get_opcode@@Base+0x3aa0>  // b.lo, b.ul, b.last
   53d78:	and	x1, x1, #0x3
   53d7c:	cmp	x4, x1
   53d80:	b.hi	54508 <aarch64_get_opcode@@Base+0x3aa0>  // b.pmore
   53d84:	mov	x0, x20
   53d88:	adrp	x1, 6f000 <fields@@Base+0xbf60>
   53d8c:	add	x27, x26, #0x1
   53d90:	add	x1, x1, #0x90
   53d94:	blr	x19
   53d98:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   53d9c:	cmp	w0, #0x44
   53da0:	b.eq	543c8 <aarch64_get_opcode@@Base+0x3960>  // b.none
   53da4:	b.ls	53e04 <aarch64_get_opcode@@Base+0x339c>  // b.plast
   53da8:	cmp	w0, #0x51
   53dac:	b.ne	54568 <aarch64_get_opcode@@Base+0x3b00>  // b.any
   53db0:	ldr	x0, [sp, #392]
   53db4:	lsr	x2, x0, #1
   53db8:	tbz	w0, #0, 54484 <aarch64_get_opcode@@Base+0x3a1c>
   53dbc:	mov	x0, x20
   53dc0:	adrp	x1, 68000 <fields@@Base+0x4f60>
   53dc4:	add	x27, x26, #0x1
   53dc8:	add	x1, x1, #0xe38
   53dcc:	blr	x19
   53dd0:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   53dd4:	cmp	w0, #0x60
   53dd8:	b.ne	54568 <aarch64_get_opcode@@Base+0x3b00>  // b.any
   53ddc:	ldr	x0, [sp, #392]
   53de0:	add	x3, x26, #0x1
   53de4:	cbnz	x0, 544a8 <aarch64_get_opcode@@Base+0x3a40>
   53de8:	ldrb	w2, [x26, #1]
   53dec:	mov	x26, x3
   53df0:	mov	x1, x22
   53df4:	mov	x0, x20
   53df8:	add	x27, x26, #0x1
   53dfc:	blr	x19
   53e00:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   53e04:	cmp	w0, #0x27
   53e08:	b.ne	54040 <aarch64_get_opcode@@Base+0x35d8>  // b.any
   53e0c:	ldr	w2, [sp, #384]
   53e10:	mov	x0, #0x1                   	// #1
   53e14:	ldr	x1, [sp, #392]
   53e18:	lsl	x0, x0, x2
   53e1c:	sub	x0, x0, #0x1
   53e20:	cmp	x0, x1
   53e24:	add	x0, x26, #0x1
   53e28:	b.eq	544ec <aarch64_get_opcode@@Base+0x3a84>  // b.none
   53e2c:	mov	x26, x0
   53e30:	add	x27, x26, #0x1
   53e34:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   53e38:	ldr	w0, [sp, #176]
   53e3c:	add	x27, x27, #0x2
   53e40:	cbnz	w0, 54198 <aarch64_get_opcode@@Base+0x3730>
   53e44:	ldr	w2, [sp, #140]
   53e48:	mov	x0, x20
   53e4c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   53e50:	add	x1, x1, #0xd40
   53e54:	blr	x19
   53e58:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   53e5c:	ldr	w3, [sp, #132]
   53e60:	adrp	x2, 68000 <fields@@Base+0x4f60>
   53e64:	add	x2, x2, #0x980
   53e68:	mov	x0, x20
   53e6c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   53e70:	add	x1, x1, #0xc90
   53e74:	ldrb	w23, [x2, w3, sxtw]
   53e78:	and	w28, w23, #0xf
   53e7c:	lsr	w23, w23, #4
   53e80:	add	w3, w23, #0x1
   53e84:	mov	w23, w3
   53e88:	blr	x19
   53e8c:	mov	w3, w23
   53e90:	cmp	w23, #0x1
   53e94:	b.ne	541bc <aarch64_get_opcode@@Base+0x3754>  // b.any
   53e98:	cmp	w28, #0x1
   53e9c:	b.eq	543a8 <aarch64_get_opcode@@Base+0x3940>  // b.none
   53ea0:	ldr	w2, [sp, #128]
   53ea4:	adrp	x1, 69000 <fields@@Base+0x5f60>
   53ea8:	mov	x0, x20
   53eac:	add	x1, x1, #0x20
   53eb0:	add	w3, w28, w2
   53eb4:	sub	w3, w3, #0x1
   53eb8:	blr	x19
   53ebc:	adrp	x23, fd000 <aarch64_opcode_table@@Base+0x55a20>
   53ec0:	ldr	w3, [sp, #116]
   53ec4:	mov	x0, x20
   53ec8:	adrp	x1, 69000 <fields@@Base+0x5f60>
   53ecc:	ldr	w2, [x23, #1616]
   53ed0:	add	x1, x1, #0x28
   53ed4:	add	x2, x2, x2, lsl #3
   53ed8:	lsl	x2, x2, #1
   53edc:	add	x2, x2, w3, sxtw
   53ee0:	ldr	x3, [sp, #96]
   53ee4:	add	x2, x2, #0x2
   53ee8:	ldr	x2, [x3, x2, lsl #3]
   53eec:	blr	x19
   53ef0:	ldr	w0, [sp, #180]
   53ef4:	cbz	w0, 53f0c <aarch64_get_opcode@@Base+0x34a4>
   53ef8:	ldr	w2, [sp, #280]
   53efc:	adrp	x1, 69000 <fields@@Base+0x5f60>
   53f00:	mov	x0, x20
   53f04:	add	x1, x1, #0x30
   53f08:	blr	x19
   53f0c:	mov	x0, x20
   53f10:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   53f14:	add	x1, x1, #0x8c0
   53f18:	blr	x19
   53f1c:	ldr	w0, [sp, #104]
   53f20:	add	x27, x27, #0x2
   53f24:	cmp	w0, #0xd
   53f28:	b.eq	53c08 <aarch64_get_opcode@@Base+0x31a0>  // b.none
   53f2c:	ldr	w3, [sp, #104]
   53f30:	cmp	w3, #0xf
   53f34:	b.eq	53950 <aarch64_get_opcode@@Base+0x2ee8>  // b.none
   53f38:	ldr	w2, [x23, #1616]
   53f3c:	mov	x0, x20
   53f40:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   53f44:	add	x1, x1, #0x160
   53f48:	add	x2, x2, x2, lsl #3
   53f4c:	lsl	x2, x2, #1
   53f50:	add	x2, x2, w3, sxtw
   53f54:	ldr	x3, [sp, #96]
   53f58:	add	x2, x2, #0x2
   53f5c:	ldr	x2, [x3, x2, lsl #3]
   53f60:	blr	x19
   53f64:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   53f68:	ldr	w0, [sp, #188]
   53f6c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   53f70:	cbnz	w0, 5409c <aarch64_get_opcode@@Base+0x3634>
   53f74:	mov	x0, x20
   53f78:	add	x1, x1, #0xc90
   53f7c:	blr	x19
   53f80:	ldr	w0, [sp, #248]
   53f84:	cbnz	w0, 543e4 <aarch64_get_opcode@@Base+0x397c>
   53f88:	cmp	w25, #0x1
   53f8c:	b.ne	540a8 <aarch64_get_opcode@@Base+0x3640>  // b.any
   53f90:	ldr	w2, [sp, #128]
   53f94:	adrp	x23, fd000 <aarch64_opcode_table@@Base+0x55a20>
   53f98:	mov	x0, x20
   53f9c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   53fa0:	add	x1, x1, #0x50
   53fa4:	blr	x19
   53fa8:	ldr	w2, [x23, #1616]
   53fac:	mov	x0, x20
   53fb0:	ldr	w3, [sp, #116]
   53fb4:	adrp	x1, 69000 <fields@@Base+0x5f60>
   53fb8:	add	x1, x1, #0x28
   53fbc:	add	x2, x2, x2, lsl #3
   53fc0:	lsl	x2, x2, #1
   53fc4:	add	x2, x2, w3, sxtw
   53fc8:	ldr	x3, [sp, #96]
   53fcc:	add	x2, x2, #0x2
   53fd0:	ldr	x2, [x3, x2, lsl #3]
   53fd4:	blr	x19
   53fd8:	ldr	w0, [sp, #136]
   53fdc:	cbnz	w0, 54310 <aarch64_get_opcode@@Base+0x38a8>
   53fe0:	mov	x0, x20
   53fe4:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   53fe8:	add	x1, x1, #0x8c0
   53fec:	blr	x19
   53ff0:	ldr	w0, [sp, #104]
   53ff4:	add	x27, x27, #0x2
   53ff8:	cmp	w0, #0xd
   53ffc:	b.eq	53c08 <aarch64_get_opcode@@Base+0x31a0>  // b.none
   54000:	ldr	w5, [sp, #104]
   54004:	cmp	w5, #0xf
   54008:	b.eq	53950 <aarch64_get_opcode@@Base+0x2ee8>  // b.none
   5400c:	ldr	w2, [x23, #1616]
   54010:	adrp	x0, 91000 <aarch64_operands@@Base+0x1bd0>
   54014:	add	x4, x0, #0xb60
   54018:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   5401c:	mov	x0, x20
   54020:	add	x1, x1, #0x160
   54024:	add	x3, x2, x2, lsl #3
   54028:	lsl	x3, x3, #1
   5402c:	add	x3, x3, w5, sxtw
   54030:	add	x2, x4, x3, lsl #3
   54034:	ldr	x2, [x2, #3720]
   54038:	blr	x19
   5403c:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   54040:	cmp	w0, #0x3f
   54044:	b.ne	54568 <aarch64_get_opcode@@Base+0x3b00>  // b.any
   54048:	ldr	w2, [sp, #384]
   5404c:	mov	w23, #0x1                   	// #1
   54050:	ldr	x3, [sp, #392]
   54054:	mov	x1, x22
   54058:	lsl	w2, w23, w2
   5405c:	mov	x0, x20
   54060:	sub	w2, w2, w3
   54064:	ldrb	w2, [x26, w2, sxtw]
   54068:	blr	x19
   5406c:	ldr	w0, [sp, #384]
   54070:	lsl	w23, w23, w0
   54074:	add	x26, x26, w23, sxtw
   54078:	add	x27, x26, #0x1
   5407c:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   54080:	ldp	x25, x26, [sp, #64]
   54084:	str	wzr, [sp, #108]
   54088:	ldr	w0, [sp, #108]
   5408c:	ldp	x19, x20, [sp, #16]
   54090:	ldp	x21, x22, [sp, #32]
   54094:	ldp	x29, x30, [sp], #400
   54098:	ret
   5409c:	mov	x0, x20
   540a0:	add	x1, x1, #0xc90
   540a4:	blr	x19
   540a8:	ldr	w2, [sp, #128]
   540ac:	adrp	x1, 69000 <fields@@Base+0x5f60>
   540b0:	ldr	w3, [sp, #252]
   540b4:	add	x1, x1, #0x58
   540b8:	mov	x0, x20
   540bc:	blr	x19
   540c0:	adrp	x23, fd000 <aarch64_opcode_table@@Base+0x55a20>
   540c4:	ldr	w3, [sp, #116]
   540c8:	mov	x0, x20
   540cc:	adrp	x1, 69000 <fields@@Base+0x5f60>
   540d0:	ldr	w2, [x23, #1616]
   540d4:	add	x1, x1, #0x28
   540d8:	add	x2, x2, x2, lsl #3
   540dc:	lsl	x2, x2, #1
   540e0:	add	x2, x2, w3, sxtw
   540e4:	ldr	x3, [sp, #96]
   540e8:	add	x2, x2, #0x2
   540ec:	ldr	x2, [x3, x2, lsl #3]
   540f0:	blr	x19
   540f4:	ldr	w0, [sp, #136]
   540f8:	cbz	w0, 53fe0 <aarch64_get_opcode@@Base+0x3578>
   540fc:	ldr	w0, [sp, #176]
   54100:	cmp	w0, #0x3
   54104:	b.eq	542bc <aarch64_get_opcode@@Base+0x3854>  // b.none
   54108:	ldr	w0, [sp, #176]
   5410c:	ldr	w2, [sp, #184]
   54110:	cmp	w0, #0x2
   54114:	b.ne	542d0 <aarch64_get_opcode@@Base+0x3868>  // b.any
   54118:	mov	x0, x20
   5411c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   54120:	add	x1, x1, #0x68
   54124:	blr	x19
   54128:	b	53fe0 <aarch64_get_opcode@@Base+0x3578>
   5412c:	ldr	w0, [sp, #132]
   54130:	cmp	w0, #0xb
   54134:	b.le	5427c <aarch64_get_opcode@@Base+0x3814>
   54138:	ldr	w0, [sp, #132]
   5413c:	cmp	w0, #0xd
   54140:	b.le	54448 <aarch64_get_opcode@@Base+0x39e0>
   54144:	cmp	w0, #0xe
   54148:	ldr	w0, [sp, #248]
   5414c:	b.eq	54520 <aarch64_get_opcode@@Base+0x3ab8>  // b.none
   54150:	cbnz	w0, 544cc <aarch64_get_opcode@@Base+0x3a64>
   54154:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   54158:	ldrb	w3, [sp, #376]
   5415c:	strb	w3, [sp, #386]
   54160:	add	x2, sp, #0x188
   54164:	ldrb	w3, [sp, #368]
   54168:	add	x1, sp, #0x180
   5416c:	ldr	x0, [x0, #3864]
   54170:	strh	wzr, [sp, #384]
   54174:	strb	w3, [sp, #387]
   54178:	bl	358d0 <floatformat_to_double@plt>
   5417c:	ldr	x2, [sp, #232]
   54180:	mov	x0, x20
   54184:	ldr	d0, [sp, #392]
   54188:	adrp	x1, 69000 <fields@@Base+0x5f60>
   5418c:	add	x1, x1, #0xb8
   54190:	blr	x19
   54194:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   54198:	ldr	w3, [sp, #228]
   5419c:	cmp	w3, #0x1f
   541a0:	b.ls	54260 <aarch64_get_opcode@@Base+0x37f8>  // b.plast
   541a4:	ldr	w2, [sp, #140]
   541a8:	mov	x0, x20
   541ac:	adrp	x1, 69000 <fields@@Base+0x5f60>
   541b0:	add	x1, x1, #0xf8
   541b4:	blr	x19
   541b8:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   541bc:	mov	w0, w28
   541c0:	cbz	w28, 53ebc <aarch64_get_opcode@@Base+0x3454>
   541c4:	ldr	w23, [sp, #128]
   541c8:	adrp	x1, 69000 <fields@@Base+0x5f60>
   541cc:	adrp	x28, 5c000 <xexit@@Base+0xa80>
   541d0:	add	x24, x1, #0x10
   541d4:	add	x1, x28, #0x498
   541d8:	mov	w28, #0x0                   	// #0
   541dc:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   541e0:	add	x2, x2, #0x6b8
   541e4:	str	w25, [sp, #120]
   541e8:	mov	x25, x24
   541ec:	mov	w24, w3
   541f0:	stp	x21, x22, [sp, #144]
   541f4:	mov	w21, w28
   541f8:	mov	w22, w23
   541fc:	mov	x28, x1
   54200:	mov	w23, w0
   54204:	nop
   54208:	mov	w3, w22
   5420c:	add	w21, w21, #0x1
   54210:	mov	x1, x25
   54214:	mov	x0, x20
   54218:	blr	x19
   5421c:	add	w22, w22, w24
   54220:	cmp	w23, w21
   54224:	mov	x2, x28
   54228:	b.ne	54208 <aarch64_get_opcode@@Base+0x37a0>  // b.any
   5422c:	ldr	w25, [sp, #120]
   54230:	ldp	x21, x22, [sp, #144]
   54234:	b	53ebc <aarch64_get_opcode@@Base+0x3454>
   54238:	mov	w0, #0x1                   	// #1
   5423c:	str	w0, [sp, #108]
   54240:	ldp	x19, x20, [sp, #16]
   54244:	ldr	w0, [sp, #108]
   54248:	ldp	x21, x22, [sp, #32]
   5424c:	ldp	x23, x24, [sp, #48]
   54250:	ldp	x25, x26, [sp, #64]
   54254:	ldp	x27, x28, [sp, #80]
   54258:	ldp	x29, x30, [sp], #400
   5425c:	ret
   54260:	ldr	w2, [sp, #140]
   54264:	mov	x0, x20
   54268:	ldr	w3, [sp, #228]
   5426c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   54270:	add	x1, x1, #0xd68
   54274:	blr	x19
   54278:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   5427c:	ldr	x2, [sp, #296]
   54280:	mov	x0, x20
   54284:	adrp	x1, 69000 <fields@@Base+0x5f60>
   54288:	add	x1, x1, #0x88
   5428c:	mov	x3, x2
   54290:	blr	x19
   54294:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   54298:	and	x0, x2, #0xffffff
   5429c:	tst	x2, #0x10000000
   542a0:	mov	x21, #0xf3000000            	// #4076863488
   542a4:	mov	x1, #0xf2000000            	// #4060086272
   542a8:	orr	x21, x0, x21
   542ac:	orr	x0, x0, x1
   542b0:	csel	x21, x0, x21, eq  // eq = none
   542b4:	stp	x25, x26, [sp, #64]
   542b8:	b	53604 <aarch64_get_opcode@@Base+0x2b9c>
   542bc:	ldr	w0, [sp, #336]
   542c0:	ldr	w1, [sp, #340]
   542c4:	cmp	w0, #0x0
   542c8:	ldr	w0, [sp, #184]
   542cc:	csel	w2, w0, w1, eq  // eq = none
   542d0:	ldr	w0, [sp, #284]
   542d4:	cbz	w0, 54118 <aarch64_get_opcode@@Base+0x36b0>
   542d8:	mov	x0, x20
   542dc:	adrp	x1, 69000 <fields@@Base+0x5f60>
   542e0:	add	x1, x1, #0x30
   542e4:	blr	x19
   542e8:	b	53fe0 <aarch64_get_opcode@@Base+0x3578>
   542ec:	mov	x0, #0xf5f                 	// #3935
   542f0:	mov	x1, #0xb10                 	// #2832
   542f4:	movk	x0, #0xff91, lsl #16
   542f8:	and	x0, x2, x0
   542fc:	movk	x1, #0xee80, lsl #16
   54300:	cmp	x0, x1
   54304:	b.eq	53600 <aarch64_get_opcode@@Base+0x2b98>  // b.none
   54308:	str	wzr, [sp, #108]
   5430c:	b	54088 <aarch64_get_opcode@@Base+0x3620>
   54310:	ldr	w2, [sp, #184]
   54314:	b	542d0 <aarch64_get_opcode@@Base+0x3868>
   54318:	ldr	w0, [sp, #136]
   5431c:	cmp	w0, #0x0
   54320:	ldr	w0, [sp, #328]
   54324:	csel	w0, w0, wzr, ne  // ne = any
   54328:	str	w0, [sp, #144]
   5432c:	ldr	w0, [sp, #204]
   54330:	cmp	w0, #0x2
   54334:	b.ne	53ae0 <aarch64_get_opcode@@Base+0x3078>  // b.any
   54338:	ldr	w0, [sp, #180]
   5433c:	cmp	w0, #0x3
   54340:	b.eq	54394 <aarch64_get_opcode@@Base+0x392c>  // b.none
   54344:	ldr	w0, [sp, #364]
   54348:	str	w0, [sp, #144]
   5434c:	b	53ae0 <aarch64_get_opcode@@Base+0x3078>
   54350:	ldr	w0, [sp, #204]
   54354:	cmp	w0, #0x2
   54358:	b.eq	54478 <aarch64_get_opcode@@Base+0x3a10>  // b.none
   5435c:	ldr	w0, [sp, #136]
   54360:	cmp	w0, #0x0
   54364:	ldr	w0, [sp, #292]
   54368:	csel	w0, w0, wzr, ne  // ne = any
   5436c:	str	w0, [sp, #144]
   54370:	b	53ae0 <aarch64_get_opcode@@Base+0x3078>
   54374:	ldr	w0, [sp, #204]
   54378:	cmp	w0, #0x2
   5437c:	b.eq	5438c <aarch64_get_opcode@@Base+0x3924>  // b.none
   54380:	ldr	w0, [sp, #136]
   54384:	cbz	w0, 53adc <aarch64_get_opcode@@Base+0x3074>
   54388:	b	54394 <aarch64_get_opcode@@Base+0x392c>
   5438c:	ldr	w0, [sp, #180]
   54390:	cbz	w0, 54380 <aarch64_get_opcode@@Base+0x3918>
   54394:	str	wzr, [sp, #108]
   54398:	ldp	x23, x24, [sp, #48]
   5439c:	ldp	x25, x26, [sp, #64]
   543a0:	ldp	x27, x28, [sp, #80]
   543a4:	b	54088 <aarch64_get_opcode@@Base+0x3620>
   543a8:	ldr	w2, [sp, #128]
   543ac:	mov	x0, x20
   543b0:	adrp	x1, 69000 <fields@@Base+0x5f60>
   543b4:	add	x1, x1, #0x18
   543b8:	blr	x19
   543bc:	b	53ebc <aarch64_get_opcode@@Base+0x3454>
   543c0:	ldr	x0, [sp, #344]
   543c4:	cbnz	x0, 53db0 <aarch64_get_opcode@@Base+0x3348>
   543c8:	ldr	x2, [sp, #392]
   543cc:	mov	x0, x20
   543d0:	adrp	x1, 68000 <fields@@Base+0x4f60>
   543d4:	add	x27, x26, #0x1
   543d8:	add	x1, x1, #0xe30
   543dc:	blr	x19
   543e0:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   543e4:	adrp	x28, 5c000 <xexit@@Base+0xa80>
   543e8:	add	x23, x28, #0x498
   543ec:	adrp	x28, 69000 <fields@@Base+0x5f60>
   543f0:	add	x28, x28, #0x48
   543f4:	ldr	w24, [sp, #128]
   543f8:	adrp	x2, 5c000 <xexit@@Base+0xa80>
   543fc:	str	x21, [sp, #120]
   54400:	mov	x21, x28
   54404:	mov	x28, x23
   54408:	ldr	w23, [sp, #352]
   5440c:	add	x2, x2, #0x6b8
   54410:	mov	w3, w24
   54414:	mov	x1, x21
   54418:	add	w24, w24, #0x2
   5441c:	mov	x0, x20
   54420:	blr	x19
   54424:	cmp	w23, w24
   54428:	mov	x2, x28
   5442c:	b.ne	54410 <aarch64_get_opcode@@Base+0x39a8>  // b.any
   54430:	ldr	x21, [sp, #120]
   54434:	b	540c0 <aarch64_get_opcode@@Base+0x3658>
   54438:	mov	x0, #0xd000000             	// #218103808
   5443c:	eor	x21, x2, x0
   54440:	stp	x25, x26, [sp, #64]
   54444:	b	53604 <aarch64_get_opcode@@Base+0x2b9c>
   54448:	ldr	x2, [sp, #216]
   5444c:	mov	x3, x2
   54450:	b	53c44 <aarch64_get_opcode@@Base+0x31dc>
   54454:	ldr	x2, [sp, #392]
   54458:	mov	x0, x20
   5445c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   54460:	add	x1, x1, #0xca8
   54464:	add	x27, x26, #0x1
   54468:	blr	x19
   5446c:	ldr	x0, [sp, #392]
   54470:	str	x0, [sp, #240]
   54474:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   54478:	ldr	w0, [sp, #360]
   5447c:	cbz	w0, 5435c <aarch64_get_opcode@@Base+0x38f4>
   54480:	b	54394 <aarch64_get_opcode@@Base+0x392c>
   54484:	mov	x0, x20
   54488:	adrp	x1, 68000 <fields@@Base+0x4f60>
   5448c:	add	x27, x26, #0x1
   54490:	add	x1, x1, #0xe50
   54494:	blr	x19
   54498:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   5449c:	ldr	w0, [sp, #356]
   544a0:	str	w0, [sp, #144]
   544a4:	b	53ae0 <aarch64_get_opcode@@Base+0x3078>
   544a8:	mov	x26, x3
   544ac:	add	x27, x26, #0x1
   544b0:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   544b4:	sub	w2, w1, #0x61
   544b8:	and	w2, w2, #0xff
   544bc:	cmp	w2, #0x5
   544c0:	b.hi	54568 <aarch64_get_opcode@@Base+0x3b00>  // b.pmore
   544c4:	sub	w1, w1, #0x57
   544c8:	b	53d60 <aarch64_get_opcode@@Base+0x32f8>
   544cc:	ldr	w2, [sp, #380]
   544d0:	mov	x0, x20
   544d4:	adrp	x1, 69000 <fields@@Base+0x5f60>
   544d8:	mov	w4, #0x1                   	// #1
   544dc:	add	x1, x1, #0xc8
   544e0:	mov	w3, #0xf                   	// #15
   544e4:	blr	x19
   544e8:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   544ec:	ldrb	w2, [x26, #1]
   544f0:	mov	x26, x0
   544f4:	mov	x1, x22
   544f8:	mov	x0, x20
   544fc:	add	x27, x26, #0x1
   54500:	blr	x19
   54504:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   54508:	mov	x0, x20
   5450c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   54510:	add	x27, x26, #0x1
   54514:	add	x1, x1, #0x110
   54518:	blr	x19
   5451c:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   54520:	cbnz	w0, 54540 <aarch64_get_opcode@@Base+0x3ad8>
   54524:	ldr	x2, [sp, #304]
   54528:	mov	x0, x20
   5452c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   54530:	add	x1, x1, #0xa8
   54534:	mov	x3, x2
   54538:	blr	x19
   5453c:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   54540:	ldp	x2, x3, [sp, #312]
   54544:	mov	x0, x20
   54548:	adrp	x1, 69000 <fields@@Base+0x5f60>
   5454c:	add	x1, x1, #0x98
   54550:	blr	x19
   54554:	b	53950 <aarch64_get_opcode@@Base+0x2ee8>
   54558:	mov	w0, #0x1                   	// #1
   5455c:	str	w0, [sp, #108]
   54560:	ldp	x25, x26, [sp, #64]
   54564:	b	53a0c <aarch64_get_opcode@@Base+0x2fa4>
   54568:	bl	35670 <abort@plt>
   5456c:	nop
   54570:	sub	sp, sp, #0x240
   54574:	mov	x3, x2
   54578:	mov	w4, #0x0                   	// #0
   5457c:	stp	x29, x30, [sp]
   54580:	mov	x29, sp
   54584:	stp	x23, x24, [sp, #48]
   54588:	mov	x24, x1
   5458c:	stp	x19, x20, [sp, #16]
   54590:	mov	x19, x0
   54594:	stp	x21, x22, [sp, #32]
   54598:	stp	x25, x26, [sp, #64]
   5459c:	stp	x27, x28, [sp, #80]
   545a0:	mov	x28, x2
   545a4:	mov	x2, x1
   545a8:	mov	x1, x0
   545ac:	adrp	x0, a0000 <aarch64_operands@@Base+0x10bd0>
   545b0:	add	x0, x0, #0xe70
   545b4:	ldp	x20, x21, [x24]
   545b8:	ldr	x26, [x24, #96]
   545bc:	bl	51cc8 <aarch64_get_opcode@@Base+0x1260>
   545c0:	cbz	w0, 545e4 <aarch64_get_opcode@@Base+0x3b7c>
   545c4:	ldp	x29, x30, [sp]
   545c8:	ldp	x19, x20, [sp, #16]
   545cc:	ldp	x21, x22, [sp, #32]
   545d0:	ldp	x23, x24, [sp, #48]
   545d4:	ldp	x25, x26, [sp, #64]
   545d8:	ldp	x27, x28, [sp, #80]
   545dc:	add	sp, sp, #0x240
   545e0:	ret
   545e4:	ldp	x0, x1, [x24]
   545e8:	mov	x2, x28
   545ec:	mov	w3, #0x0                   	// #0
   545f0:	bl	535a8 <aarch64_get_opcode@@Base+0x2b40>
   545f4:	cbnz	w0, 545c4 <aarch64_get_opcode@@Base+0x3b5c>
   545f8:	adrp	x0, 92000 <aarch64_operands@@Base+0x2bd0>
   545fc:	add	x0, x0, #0xc60
   54600:	add	x0, x0, #0x400
   54604:	mov	x3, x28
   54608:	mov	x2, x24
   5460c:	mov	x1, x19
   54610:	mov	w4, #0x0                   	// #0
   54614:	bl	51cc8 <aarch64_get_opcode@@Base+0x1260>
   54618:	cbnz	w0, 545c4 <aarch64_get_opcode@@Base+0x3b5c>
   5461c:	mov	x0, #0xf0000000            	// #4026531840
   54620:	and	x9, x28, #0xf0000000
   54624:	cmp	x9, x0
   54628:	adrp	x4, 69000 <fields@@Base+0x5f60>
   5462c:	adrp	x0, 96000 <aarch64_operands@@Base+0x6bd0>
   54630:	add	x27, x4, #0x128
   54634:	add	x0, x0, #0x280
   54638:	b.ne	546f4 <aarch64_get_opcode@@Base+0x3c8c>  // b.any
   5463c:	nop
   54640:	ldp	x1, x2, [x0, #24]
   54644:	and	x3, x2, x28
   54648:	cmp	x1, x3
   5464c:	b.ne	54694 <aarch64_get_opcode@@Base+0x3c2c>  // b.any
   54650:	ldr	x3, [x0]
   54654:	ldr	x4, [x26]
   54658:	tst	x4, x3
   5465c:	b.ne	54680 <aarch64_get_opcode@@Base+0x3c18>  // b.any
   54660:	ldr	x3, [x0, #8]
   54664:	ldr	x4, [x26, #8]
   54668:	tst	x4, x3
   5466c:	b.ne	54680 <aarch64_get_opcode@@Base+0x3c18>  // b.any
   54670:	ldr	x3, [x0, #16]
   54674:	ldr	x4, [x26, #16]
   54678:	tst	x4, x3
   5467c:	b.eq	54694 <aarch64_get_opcode@@Base+0x3c2c>  // b.none
   54680:	and	x3, x2, #0xf0000000
   54684:	cmp	x3, x9
   54688:	b.eq	54708 <aarch64_get_opcode@@Base+0x3ca0>  // b.none
   5468c:	orr	x1, x1, x2
   54690:	cbz	x1, 54708 <aarch64_get_opcode@@Base+0x3ca0>
   54694:	ldr	x27, [x0, #88]
   54698:	add	x0, x0, #0x30
   5469c:	cbnz	x27, 54640 <aarch64_get_opcode@@Base+0x3bd8>
   546a0:	mov	w2, w28
   546a4:	mov	x0, x21
   546a8:	adrp	x1, 69000 <fields@@Base+0x5f60>
   546ac:	add	x1, x1, #0x200
   546b0:	blr	x20
   546b4:	b	545c4 <aarch64_get_opcode@@Base+0x3b5c>
   546b8:	ldr	x2, [x0]
   546bc:	ldr	x1, [x26]
   546c0:	tst	x2, x1
   546c4:	b.ne	54708 <aarch64_get_opcode@@Base+0x3ca0>  // b.any
   546c8:	ldr	x2, [x0, #8]
   546cc:	ldr	x1, [x26, #8]
   546d0:	tst	x2, x1
   546d4:	b.ne	54708 <aarch64_get_opcode@@Base+0x3ca0>  // b.any
   546d8:	ldr	x2, [x0, #16]
   546dc:	ldr	x1, [x26, #16]
   546e0:	tst	x2, x1
   546e4:	b.ne	54708 <aarch64_get_opcode@@Base+0x3ca0>  // b.any
   546e8:	ldr	x27, [x0, #88]
   546ec:	add	x0, x0, #0x30
   546f0:	cbz	x27, 546a0 <aarch64_get_opcode@@Base+0x3c38>
   546f4:	ldp	x2, x1, [x0, #24]
   546f8:	and	x1, x28, x1
   546fc:	cmp	x1, x2
   54700:	b.eq	546b8 <aarch64_get_opcode@@Base+0x3c50>  // b.none
   54704:	b	546e8 <aarch64_get_opcode@@Base+0x3c80>
   54708:	ldrb	w2, [x27]
   5470c:	cbz	w2, 545c4 <aarch64_get_opcode@@Base+0x3b5c>
   54710:	ands	x4, x28, #0x800000
   54714:	asr	x1, x28, #4
   54718:	adrp	x3, 5c000 <xexit@@Base+0xa80>
   5471c:	adrp	x0, 68000 <fields@@Base+0x4f60>
   54720:	add	x9, x3, #0x6b8
   54724:	add	x0, x0, #0xcf0
   54728:	csel	x0, x0, x9, eq  // eq = none
   5472c:	and	w5, w28, #0xf
   54730:	and	w23, w1, #0xf0
   54734:	cmp	x4, #0x0
   54738:	orr	w23, w23, w5
   5473c:	str	x0, [sp, #216]
   54740:	mov	x0, #0xa00000              	// #10485760
   54744:	and	x0, x28, x0
   54748:	cneg	w10, w23, eq  // eq = none
   5474c:	cmp	x0, #0x800, lsl #12
   54750:	cset	w0, ne  // ne = any
   54754:	cmp	w23, #0x0
   54758:	csinc	w0, w0, wzr, eq  // eq = none
   5475c:	str	w0, [sp, #472]
   54760:	ands	x0, x28, #0x400000
   54764:	mov	w3, #0x53                  	// #83
   54768:	str	x0, [sp, #152]
   5476c:	mov	w0, #0x43                  	// #67
   54770:	csel	w0, w3, w0, ne  // ne = any
   54774:	cmp	x4, #0x0
   54778:	mov	x3, #0xffffffffff000000    	// #-16777216
   5477c:	csel	x3, x3, xzr, ne  // ne = any
   54780:	str	w0, [sp, #412]
   54784:	and	x0, x28, #0xffffff
   54788:	add	x0, x0, x3
   5478c:	asr	x11, x28, #16
   54790:	and	w13, w1, #0xfff0
   54794:	ands	x7, x28, #0x1000000
   54798:	add	x0, x19, x0, lsl #2
   5479c:	and	w12, w1, #0x30
   547a0:	add	x14, x0, #0x8
   547a4:	mov	w8, #0x4f                  	// #79
   547a8:	add	x0, x0, #0xa
   547ac:	and	w8, w11, w8
   547b0:	str	w5, [sp, #408]
   547b4:	orr	w5, w13, w5
   547b8:	csel	x0, x14, x0, eq  // eq = none
   547bc:	asr	x3, x28, #7
   547c0:	orr	w14, w12, w8
   547c4:	and	w6, w28, #0xff
   547c8:	and	x15, x28, #0xf
   547cc:	cmp	x4, #0x0
   547d0:	str	x7, [sp, #112]
   547d4:	and	w7, w3, #0x1e
   547d8:	str	w5, [sp, #228]
   547dc:	sxtw	x5, w5
   547e0:	stp	x4, x15, [sp, #272]
   547e4:	and	x4, x11, #0x1f
   547e8:	and	x17, x3, #0x1f
   547ec:	add	x11, x4, #0x1
   547f0:	str	x0, [sp, #208]
   547f4:	mov	x0, x6
   547f8:	str	x5, [sp, #232]
   547fc:	sxtw	x5, w14
   54800:	ror	w22, w6, w7
   54804:	str	x5, [sp, #392]
   54808:	sub	x5, x11, x17
   5480c:	ubfiz	x0, x0, #2, #8
   54810:	str	x5, [sp, #256]
   54814:	cneg	x16, x0, eq  // eq = none
   54818:	ror	w5, w22, #30
   5481c:	ands	x0, x28, #0x200000
   54820:	str	w5, [sp, #476]
   54824:	str	x0, [sp, #136]
   54828:	ror	w5, w22, #28
   5482c:	adrp	x0, 68000 <fields@@Base+0x4f60>
   54830:	str	w5, [sp, #480]
   54834:	add	x12, x0, #0xc98
   54838:	ror	w5, w22, #26
   5483c:	adrp	x0, 91000 <aarch64_operands@@Base+0x1bd0>
   54840:	str	w5, [sp, #484]
   54844:	and	x13, x1, #0xf0
   54848:	ror	w5, w22, #24
   5484c:	str	w7, [sp, #424]
   54850:	add	x7, x0, #0xb60
   54854:	eor	x0, x28, x28, asr #12
   54858:	str	w5, [sp, #488]
   5485c:	and	x0, x0, #0xf
   54860:	ror	w5, w22, #22
   54864:	sxtw	x10, w10
   54868:	csel	x9, x12, x9, ne  // ne = any
   5486c:	str	w6, [sp, #148]
   54870:	add	x6, x19, #0x8
   54874:	str	w14, [sp, #224]
   54878:	and	x1, x1, #0xf000
   5487c:	str	x16, [sp, #296]
   54880:	and	x8, x28, #0xfff
   54884:	str	x10, [sp, #304]
   54888:	orr	x1, x1, x8
   5488c:	str	x17, [sp, #312]
   54890:	sbfiz	x3, x28, #2, #24
   54894:	str	w16, [sp, #348]
   54898:	mov	x25, x27
   5489c:	str	x7, [sp, #416]
   548a0:	str	x9, [sp, #440]
   548a4:	str	x4, [sp, #464]
   548a8:	orr	x4, x13, x15
   548ac:	and	x13, x28, #0x7fffff
   548b0:	str	x4, [sp, #328]
   548b4:	str	w5, [sp, #492]
   548b8:	ror	w5, w22, #20
   548bc:	str	w5, [sp, #496]
   548c0:	and	x15, x28, #0x3fffe00
   548c4:	str	x6, [sp, #536]
   548c8:	ror	w5, w22, #18
   548cc:	str	w5, [sp, #500]
   548d0:	ror	w5, w22, #16
   548d4:	str	x0, [sp, #336]
   548d8:	and	x0, x13, #0xffffffffffc0000f
   548dc:	str	x0, [sp, #432]
   548e0:	and	x0, x15, #0xfffffffffe0003ff
   548e4:	str	x0, [sp, #192]
   548e8:	mov	x0, #0x4f0000              	// #5177344
   548ec:	and	x0, x28, x0
   548f0:	str	x0, [sp, #128]
   548f4:	mov	x0, #0x10                  	// #16
   548f8:	str	x0, [sp, #288]
   548fc:	str	x0, [sp, #400]
   54900:	and	x0, x28, #0x2000000
   54904:	str	x0, [sp, #168]
   54908:	lsr	w0, w28, #28
   5490c:	str	w5, [sp, #504]
   54910:	ror	w5, w22, #14
   54914:	str	x0, [sp, #160]
   54918:	and	x0, x28, #0xf0
   5491c:	str	w5, [sp, #508]
   54920:	ror	w5, w22, #12
   54924:	str	x0, [sp, #200]
   54928:	ubfx	x0, x28, #16, #4
   5492c:	str	w5, [sp, #512]
   54930:	ror	w5, w22, #10
   54934:	str	x0, [sp, #120]
   54938:	and	x0, x28, #0x80000
   5493c:	str	x1, [sp, #248]
   54940:	neg	x1, x4
   54944:	str	w5, [sp, #516]
   54948:	ror	w5, w22, #8
   5494c:	str	x0, [sp, #352]
   54950:	and	x0, x28, #0x40000
   54954:	str	x1, [sp, #456]
   54958:	add	x1, x7, #0xe78
   5495c:	str	w5, [sp, #520]
   54960:	ror	w5, w22, #6
   54964:	str	x1, [sp, #104]
   54968:	add	x1, x3, x6
   5496c:	str	x0, [sp, #360]
   54970:	and	x0, x28, #0x20000
   54974:	str	w5, [sp, #524]
   54978:	ror	w5, w22, #4
   5497c:	str	x1, [sp, #240]
   54980:	mov	x1, #0x1200000             	// #18874368
   54984:	and	x1, x28, x1
   54988:	str	x0, [sp, #368]
   5498c:	and	x0, x28, #0x10000
   54990:	str	w5, [sp, #528]
   54994:	str	x1, [sp, #184]
   54998:	ror	w5, w22, #2
   5499c:	and	x1, x28, #0xf000
   549a0:	str	x1, [sp, #176]
   549a4:	str	w4, [sp, #320]
   549a8:	str	w28, [sp, #344]
   549ac:	str	x0, [sp, #376]
   549b0:	and	x0, x28, #0xfffffff
   549b4:	str	x0, [sp, #384]
   549b8:	add	x0, sp, #0x234
   549bc:	str	w5, [sp, #532]
   549c0:	mov	w5, w22
   549c4:	str	x5, [sp, #448]
   549c8:	str	x0, [sp, #264]
   549cc:	str	xzr, [sp, #96]
   549d0:	str	wzr, [sp, #144]
   549d4:	str	w23, [sp, #324]
   549d8:	str	w22, [sp, #428]
   549dc:	str	x26, [sp, #544]
   549e0:	b	54a08 <aarch64_get_opcode@@Base+0x3fa0>
   549e4:	mov	x0, x21
   549e8:	adrp	x1, 68000 <fields@@Base+0x4f60>
   549ec:	add	x1, x1, #0xc30
   549f0:	blr	x20
   549f4:	mov	x0, x26
   549f8:	mov	x26, x25
   549fc:	mov	x25, x0
   54a00:	ldrb	w2, [x26, #1]
   54a04:	cbz	w2, 54a40 <aarch64_get_opcode@@Base+0x3fd8>
   54a08:	cmp	w2, #0x25
   54a0c:	add	x26, x25, #0x1
   54a10:	b.ne	549e4 <aarch64_get_opcode@@Base+0x3f7c>  // b.any
   54a14:	ldrb	w0, [x25, #1]
   54a18:	sub	w0, w0, #0x25
   54a1c:	cmp	w0, #0x4f
   54a20:	b.ls	54a28 <aarch64_get_opcode@@Base+0x3fc0>  // b.plast
   54a24:	bl	35670 <abort@plt>
   54a28:	adrp	x1, 68000 <fields@@Base+0x4f60>
   54a2c:	add	x1, x1, #0x398
   54a30:	ldrh	w0, [x1, w0, uxtw #1]
   54a34:	adr	x1, 54a40 <aarch64_get_opcode@@Base+0x3fd8>
   54a38:	add	x0, x1, w0, sxth #2
   54a3c:	br	x0
   54a40:	ldr	x1, [sp, #96]
   54a44:	add	x0, x1, #0x10
   54a48:	cmp	x0, #0x30
   54a4c:	b.ls	54a64 <aarch64_get_opcode@@Base+0x3ffc>  // b.plast
   54a50:	mov	w2, w1
   54a54:	mov	x0, x21
   54a58:	adrp	x1, 68000 <fields@@Base+0x4f60>
   54a5c:	add	x1, x1, #0xcb8
   54a60:	blr	x20
   54a64:	ldr	w0, [sp, #144]
   54a68:	cbz	w0, 545c4 <aarch64_get_opcode@@Base+0x3b5c>
   54a6c:	mov	x0, x21
   54a70:	adrp	x1, 68000 <fields@@Base+0x4f60>
   54a74:	add	x1, x1, #0xf28
   54a78:	blr	x20
   54a7c:	b	545c4 <aarch64_get_opcode@@Base+0x3b5c>
   54a80:	ldr	x3, [sp, #264]
   54a84:	mov	x0, x26
   54a88:	add	x2, sp, #0x238
   54a8c:	mov	x1, x28
   54a90:	bl	513b0 <aarch64_get_opcode@@Base+0x948>
   54a94:	mov	x26, x0
   54a98:	ldrb	w0, [x0]
   54a9c:	cmp	w0, #0x58
   54aa0:	b.eq	555e8 <aarch64_get_opcode@@Base+0x4b80>  // b.none
   54aa4:	b.hi	55040 <aarch64_get_opcode@@Base+0x45d8>  // b.pmore
   54aa8:	cmp	w0, #0x52
   54aac:	b.eq	555d0 <aarch64_get_opcode@@Base+0x4b68>  // b.none
   54ab0:	b.ls	54f94 <aarch64_get_opcode@@Base+0x452c>  // b.plast
   54ab4:	cmp	w0, #0x54
   54ab8:	b.eq	5565c <aarch64_get_opcode@@Base+0x4bf4>  // b.none
   54abc:	cmp	w0, #0x57
   54ac0:	b.ne	54a24 <aarch64_get_opcode@@Base+0x3fbc>  // b.any
   54ac4:	ldr	x2, [sp, #568]
   54ac8:	mov	x0, x21
   54acc:	adrp	x1, 68000 <fields@@Base+0x4f60>
   54ad0:	add	x1, x1, #0xca8
   54ad4:	add	x2, x2, #0x1
   54ad8:	blr	x20
   54adc:	ldr	x0, [sp, #568]
   54ae0:	add	x25, x26, #0x1
   54ae4:	add	x0, x0, #0x1
   54ae8:	str	x0, [sp, #96]
   54aec:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   54af0:	add	x25, x25, #0x2
   54af4:	mov	x0, x21
   54af8:	adrp	x1, 68000 <fields@@Base+0x4f60>
   54afc:	add	x1, x1, #0xc38
   54b00:	blr	x20
   54b04:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   54b08:	ldr	x0, [sp, #176]
   54b0c:	add	x25, x25, #0x2
   54b10:	cmp	x0, #0xf, lsl #12
   54b14:	b.ne	54a00 <aarch64_get_opcode@@Base+0x3f98>  // b.any
   54b18:	ldr	x0, [sp, #544]
   54b1c:	ldr	x0, [x0]
   54b20:	tbnz	w0, #12, 553f8 <aarch64_get_opcode@@Base+0x4990>
   54b24:	mov	x0, x21
   54b28:	adrp	x1, 62000 <xexit@@Base+0x6a80>
   54b2c:	add	x1, x1, #0x6b8
   54b30:	blr	x20
   54b34:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   54b38:	ldr	x0, [sp, #168]
   54b3c:	add	x25, x25, #0x2
   54b40:	cbnz	x0, 55218 <aarch64_get_opcode@@Base+0x47b0>
   54b44:	mov	x2, x21
   54b48:	mov	x1, x20
   54b4c:	mov	x0, x28
   54b50:	mov	w3, #0x1                   	// #1
   54b54:	bl	530c0 <aarch64_get_opcode@@Base+0x2658>
   54b58:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   54b5c:	mov	x0, x21
   54b60:	adrp	x1, 68000 <fields@@Base+0x4f60>
   54b64:	add	x1, x1, #0xc90
   54b68:	blr	x20
   54b6c:	ldr	x23, [sp, #104]
   54b70:	adrp	x27, fd000 <aarch64_opcode_table@@Base+0x55a20>
   54b74:	mov	w22, #0x0                   	// #0
   54b78:	add	x27, x27, #0x650
   54b7c:	str	x19, [sp, #552]
   54b80:	mov	w19, w22
   54b84:	nop
   54b88:	mov	w0, #0x1                   	// #1
   54b8c:	lsl	w0, w0, w22
   54b90:	sxtw	x0, w0
   54b94:	tst	x0, x28
   54b98:	b.eq	54bdc <aarch64_get_opcode@@Base+0x4174>  // b.none
   54b9c:	cbz	w19, 54bb0 <aarch64_get_opcode@@Base+0x4148>
   54ba0:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   54ba4:	mov	x0, x21
   54ba8:	add	x1, x1, #0x438
   54bac:	blr	x20
   54bb0:	ldr	w2, [x27]
   54bb4:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   54bb8:	mov	x0, x21
   54bbc:	add	x1, x1, #0xe48
   54bc0:	mov	w19, #0x1                   	// #1
   54bc4:	add	x2, x2, x2, lsl #3
   54bc8:	lsl	x2, x2, #1
   54bcc:	add	x2, x2, w22, sxtw
   54bd0:	add	x2, x2, #0x2
   54bd4:	ldr	x2, [x23, x2, lsl #3]
   54bd8:	blr	x20
   54bdc:	add	w22, w22, #0x1
   54be0:	cmp	w22, #0x10
   54be4:	b.ne	54b88 <aarch64_get_opcode@@Base+0x4120>  // b.any
   54be8:	mov	w22, w19
   54bec:	mov	x0, x21
   54bf0:	adrp	x1, 68000 <fields@@Base+0x4f60>
   54bf4:	add	x1, x1, #0xd70
   54bf8:	ldr	x19, [sp, #552]
   54bfc:	blr	x20
   54c00:	ldr	w0, [sp, #144]
   54c04:	cmp	w22, #0x0
   54c08:	add	x25, x25, #0x2
   54c0c:	csinc	w0, w0, wzr, ne  // ne = any
   54c10:	str	w0, [sp, #144]
   54c14:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   54c18:	ldr	w2, [sp, #228]
   54c1c:	mov	x0, x21
   54c20:	adrp	x1, 6f000 <fields@@Base+0xbf60>
   54c24:	add	x1, x1, #0x90
   54c28:	add	x25, x25, #0x2
   54c2c:	blr	x20
   54c30:	ldr	x0, [sp, #232]
   54c34:	str	x0, [sp, #96]
   54c38:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   54c3c:	add	x25, x25, #0x2
   54c40:	mov	x2, x21
   54c44:	mov	x1, x20
   54c48:	mov	x0, x28
   54c4c:	mov	w3, #0x0                   	// #0
   54c50:	bl	530c0 <aarch64_get_opcode@@Base+0x2658>
   54c54:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   54c58:	ldr	x0, [sp, #184]
   54c5c:	add	x25, x25, #0x2
   54c60:	cmp	x0, #0x200, lsl #12
   54c64:	b.ne	54a00 <aarch64_get_opcode@@Base+0x3f98>  // b.any
   54c68:	mov	x0, x21
   54c6c:	adrp	x1, 60000 <xexit@@Base+0x4a80>
   54c70:	add	x1, x1, #0x60
   54c74:	blr	x20
   54c78:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   54c7c:	ldr	x3, [sp, #256]
   54c80:	add	x25, x25, #0x2
   54c84:	cmp	x3, #0x0
   54c88:	b.le	55314 <aarch64_get_opcode@@Base+0x48ac>
   54c8c:	ldr	x2, [sp, #312]
   54c90:	mov	x0, x21
   54c94:	adrp	x1, 69000 <fields@@Base+0x5f60>
   54c98:	add	x1, x1, #0x1d0
   54c9c:	blr	x20
   54ca0:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   54ca4:	ldr	x0, [sp, #192]
   54ca8:	add	x25, x25, #0x2
   54cac:	cmp	x0, #0x200
   54cb0:	b.eq	5535c <aarch64_get_opcode@@Base+0x48f4>  // b.none
   54cb4:	ldr	w2, [sp, #412]
   54cb8:	mov	x0, x21
   54cbc:	adrp	x1, 69000 <fields@@Base+0x5f60>
   54cc0:	add	x1, x1, #0x1a0
   54cc4:	blr	x20
   54cc8:	ldr	x0, [sp, #352]
   54ccc:	cbz	x0, 54ce0 <aarch64_get_opcode@@Base+0x4278>
   54cd0:	adrp	x1, 75000 <fields@@Base+0x11f60>
   54cd4:	mov	x0, x21
   54cd8:	add	x1, x1, #0xf8
   54cdc:	blr	x20
   54ce0:	ldr	x0, [sp, #360]
   54ce4:	cbz	x0, 54cf8 <aarch64_get_opcode@@Base+0x4290>
   54ce8:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   54cec:	mov	x0, x21
   54cf0:	add	x1, x1, #0x460
   54cf4:	blr	x20
   54cf8:	ldr	x0, [sp, #368]
   54cfc:	cbz	x0, 54d10 <aarch64_get_opcode@@Base+0x42a8>
   54d00:	adrp	x1, 6b000 <fields@@Base+0x7f60>
   54d04:	mov	x0, x21
   54d08:	add	x1, x1, #0xa98
   54d0c:	blr	x20
   54d10:	ldr	x0, [sp, #376]
   54d14:	cbz	x0, 54a00 <aarch64_get_opcode@@Base+0x3f98>
   54d18:	mov	x0, x21
   54d1c:	adrp	x1, 62000 <xexit@@Base+0x6a80>
   54d20:	add	x1, x1, #0x7d8
   54d24:	blr	x20
   54d28:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   54d2c:	ldr	x3, [sp, #160]
   54d30:	add	x25, x25, #0x2
   54d34:	cmp	x3, #0xe
   54d38:	b.eq	54a00 <aarch64_get_opcode@@Base+0x3f98>  // b.none
   54d3c:	ldr	x0, [sp, #416]
   54d40:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   54d44:	add	x1, x1, #0xe48
   54d48:	add	x2, x0, #0xdf0
   54d4c:	mov	x0, x21
   54d50:	ldr	x2, [x2, x3, lsl #3]
   54d54:	blr	x20
   54d58:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   54d5c:	ldr	x2, [x24, #120]
   54d60:	add	x25, x25, #0x2
   54d64:	ldr	x22, [sp, #240]
   54d68:	mov	x1, x24
   54d6c:	mov	x0, x22
   54d70:	blr	x2
   54d74:	mov	w1, #0x1                   	// #1
   54d78:	mov	w0, #0x2                   	// #2
   54d7c:	strb	w1, [x24, #196]
   54d80:	str	w0, [x24, #200]
   54d84:	str	x22, [x24, #208]
   54d88:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   54d8c:	mov	x2, x28
   54d90:	mov	x1, x24
   54d94:	mov	x0, x19
   54d98:	add	x25, x25, #0x2
   54d9c:	bl	53270 <aarch64_get_opcode@@Base+0x2808>
   54da0:	str	x0, [sp, #96]
   54da4:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   54da8:	ldr	x22, [sp, #248]
   54dac:	mov	x0, x21
   54db0:	adrp	x1, 69000 <fields@@Base+0x5f60>
   54db4:	add	x25, x25, #0x2
   54db8:	add	x1, x1, #0x1f8
   54dbc:	mov	x2, x22
   54dc0:	blr	x20
   54dc4:	str	x22, [sp, #96]
   54dc8:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   54dcc:	ldr	x0, [sp, #200]
   54dd0:	add	x25, x25, #0x2
   54dd4:	cmp	x0, #0x60
   54dd8:	b.eq	55370 <aarch64_get_opcode@@Base+0x4908>  // b.none
   54ddc:	ldr	w0, [sp, #344]
   54de0:	and	w0, w0, #0xf
   54de4:	cmp	w0, #0x9
   54de8:	b.eq	5566c <aarch64_get_opcode@@Base+0x4c04>  // b.none
   54dec:	b.hi	55174 <aarch64_get_opcode@@Base+0x470c>  // b.pmore
   54df0:	cmp	w0, #0x5
   54df4:	b.eq	555a0 <aarch64_get_opcode@@Base+0x4b38>  // b.none
   54df8:	b.hi	5519c <aarch64_get_opcode@@Base+0x4734>  // b.pmore
   54dfc:	cmp	w0, #0x2
   54e00:	b.eq	5550c <aarch64_get_opcode@@Base+0x4aa4>  // b.none
   54e04:	cmp	w0, #0x3
   54e08:	b.ne	55160 <aarch64_get_opcode@@Base+0x46f8>  // b.any
   54e0c:	adrp	x2, 62000 <xexit@@Base+0x6a80>
   54e10:	add	x2, x2, #0x800
   54e14:	nop
   54e18:	mov	x0, x21
   54e1c:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   54e20:	add	x1, x1, #0xe48
   54e24:	blr	x20
   54e28:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   54e2c:	ldr	w0, [sp, #224]
   54e30:	add	x25, x25, #0x2
   54e34:	bl	51088 <aarch64_get_opcode@@Base+0x620>
   54e38:	mov	x2, x0
   54e3c:	cbnz	x0, 54e18 <aarch64_get_opcode@@Base+0x43b0>
   54e40:	ldr	x2, [sp, #392]
   54e44:	mov	x0, x21
   54e48:	adrp	x1, 69000 <fields@@Base+0x5f60>
   54e4c:	add	x1, x1, #0x190
   54e50:	blr	x20
   54e54:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   54e58:	add	x25, x25, #0x2
   54e5c:	mov	x1, x24
   54e60:	ldr	x2, [x24, #120]
   54e64:	ldr	x22, [sp, #208]
   54e68:	b	54d6c <aarch64_get_opcode@@Base+0x4304>
   54e6c:	adrp	x2, fd000 <aarch64_opcode_table@@Base+0x55a20>
   54e70:	mov	x0, x21
   54e74:	ldr	x3, [sp, #120]
   54e78:	adrp	x1, 68000 <fields@@Base+0x4f60>
   54e7c:	ldr	w2, [x2, #1616]
   54e80:	add	x1, x1, #0xcf8
   54e84:	add	x25, x25, #0x2
   54e88:	add	x2, x2, x2, lsl #3
   54e8c:	add	x2, x3, x2, lsl #1
   54e90:	ldr	x3, [sp, #104]
   54e94:	add	x2, x2, #0x2
   54e98:	ldr	x2, [x3, x2, lsl #3]
   54e9c:	blr	x20
   54ea0:	ldr	x0, [sp, #112]
   54ea4:	cbz	x0, 551d4 <aarch64_get_opcode@@Base+0x476c>
   54ea8:	ldr	w0, [sp, #148]
   54eac:	cbz	w0, 554cc <aarch64_get_opcode@@Base+0x4a64>
   54eb0:	ldr	w2, [sp, #348]
   54eb4:	mov	x0, x21
   54eb8:	ldr	x3, [sp, #440]
   54ebc:	adrp	x1, 68000 <fields@@Base+0x4f60>
   54ec0:	add	x1, x1, #0xd00
   54ec4:	blr	x20
   54ec8:	ldr	x0, [sp, #296]
   54ecc:	str	x0, [sp, #96]
   54ed0:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   54ed4:	orr	x2, x28, #0x1000000
   54ed8:	b	54d90 <aarch64_get_opcode@@Base+0x4328>
   54edc:	mov	w22, #0x0                   	// #0
   54ee0:	ldr	x0, [sp, #128]
   54ee4:	add	x25, x25, #0x2
   54ee8:	cmp	x0, #0x4f0, lsl #12
   54eec:	b.eq	550e0 <aarch64_get_opcode@@Base+0x4678>  // b.none
   54ef0:	adrp	x27, fd000 <aarch64_opcode_table@@Base+0x55a20>
   54ef4:	mov	x0, x21
   54ef8:	ldr	x3, [sp, #120]
   54efc:	adrp	x1, 68000 <fields@@Base+0x4f60>
   54f00:	ldr	w2, [x27, #1616]
   54f04:	add	x1, x1, #0xcf8
   54f08:	add	x2, x2, x2, lsl #3
   54f0c:	add	x2, x3, x2, lsl #1
   54f10:	ldr	x3, [sp, #104]
   54f14:	add	x2, x2, #0x2
   54f18:	ldr	x2, [x3, x2, lsl #3]
   54f1c:	blr	x20
   54f20:	ldr	x0, [sp, #112]
   54f24:	cbz	x0, 55124 <aarch64_get_opcode@@Base+0x46bc>
   54f28:	ldr	x0, [sp, #152]
   54f2c:	cbz	x0, 55404 <aarch64_get_opcode@@Base+0x499c>
   54f30:	ldr	w0, [sp, #472]
   54f34:	cbz	w0, 54f50 <aarch64_get_opcode@@Base+0x44e8>
   54f38:	ldr	w3, [sp, #324]
   54f3c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   54f40:	ldr	x2, [sp, #216]
   54f44:	add	x1, x1, #0xf90
   54f48:	mov	x0, x21
   54f4c:	blr	x20
   54f50:	ldr	x0, [sp, #304]
   54f54:	str	x0, [sp, #96]
   54f58:	ldr	x0, [sp, #136]
   54f5c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   54f60:	add	x2, x1, #0xc98
   54f64:	cmp	x0, #0x0
   54f68:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   54f6c:	add	x0, x0, #0x6b8
   54f70:	csel	x2, x2, x0, ne  // ne = any
   54f74:	mov	x0, x21
   54f78:	adrp	x1, 68000 <fields@@Base+0x4f60>
   54f7c:	add	x1, x1, #0xf98
   54f80:	blr	x20
   54f84:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   54f88:	mov	w0, #0x1                   	// #1
   54f8c:	mov	w22, w0
   54f90:	b	54ee0 <aarch64_get_opcode@@Base+0x4478>
   54f94:	cmp	w0, #0x27
   54f98:	b.ne	54ffc <aarch64_get_opcode@@Base+0x4594>  // b.any
   54f9c:	ldr	w2, [sp, #564]
   54fa0:	mov	x0, #0x1                   	// #1
   54fa4:	ldr	x1, [sp, #568]
   54fa8:	add	x25, x26, #0x2
   54fac:	lsl	x0, x0, x2
   54fb0:	sub	x0, x0, #0x1
   54fb4:	cmp	x0, x1
   54fb8:	add	x0, x26, #0x1
   54fbc:	b.eq	54fe0 <aarch64_get_opcode@@Base+0x4578>  // b.none
   54fc0:	mov	x26, x0
   54fc4:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   54fc8:	cmp	w0, #0x60
   54fcc:	b.ne	550ac <aarch64_get_opcode@@Base+0x4644>  // b.any
   54fd0:	ldr	x1, [sp, #568]
   54fd4:	add	x0, x26, #0x1
   54fd8:	add	x25, x26, #0x2
   54fdc:	cbnz	x1, 54fc0 <aarch64_get_opcode@@Base+0x4558>
   54fe0:	ldrb	w2, [x26, #1]
   54fe4:	adrp	x1, 68000 <fields@@Base+0x4f60>
   54fe8:	mov	x26, x0
   54fec:	add	x1, x1, #0xc30
   54ff0:	mov	x0, x21
   54ff4:	blr	x20
   54ff8:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   54ffc:	cmp	w0, #0x3f
   55000:	b.ne	54a24 <aarch64_get_opcode@@Base+0x3fbc>  // b.any
   55004:	ldr	w2, [sp, #564]
   55008:	mov	w27, #0x1                   	// #1
   5500c:	ldr	x0, [sp, #568]
   55010:	adrp	x1, 68000 <fields@@Base+0x4f60>
   55014:	lsl	w2, w27, w2
   55018:	add	x1, x1, #0xc30
   5501c:	sub	w2, w2, w0
   55020:	mov	x0, x21
   55024:	ldrb	w2, [x26, w2, sxtw]
   55028:	blr	x20
   5502c:	ldr	w0, [sp, #564]
   55030:	lsl	w27, w27, w0
   55034:	add	x26, x26, w27, sxtw
   55038:	add	x25, x26, #0x1
   5503c:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   55040:	cmp	w0, #0x64
   55044:	b.eq	555ac <aarch64_get_opcode@@Base+0x4b44>  // b.none
   55048:	b.ls	54fc8 <aarch64_get_opcode@@Base+0x4560>  // b.plast
   5504c:	cmp	w0, #0x72
   55050:	b.eq	55468 <aarch64_get_opcode@@Base+0x4a00>  // b.none
   55054:	cmp	w0, #0x78
   55058:	b.ne	54a24 <aarch64_get_opcode@@Base+0x3fbc>  // b.any
   5505c:	ldr	x2, [sp, #568]
   55060:	mov	x0, x21
   55064:	adrp	x1, 69000 <fields@@Base+0x5f60>
   55068:	add	x1, x1, #0x1a8
   5506c:	add	x25, x26, #0x1
   55070:	blr	x20
   55074:	ldr	x1, [sp, #384]
   55078:	mov	x0, #0xff00000             	// #267386880
   5507c:	cmp	x1, x0
   55080:	b.eq	55678 <aarch64_get_opcode@@Base+0x4c10>  // b.none
   55084:	ldr	x1, [sp, #384]
   55088:	mov	x0, #0x1                   	// #1
   5508c:	movk	x0, #0xff0, lsl #16
   55090:	cmp	x1, x0
   55094:	b.ne	54a00 <aarch64_get_opcode@@Base+0x3f98>  // b.any
   55098:	mov	x0, x21
   5509c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   550a0:	add	x1, x1, #0x1b8
   550a4:	blr	x20
   550a8:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   550ac:	cmp	w0, #0x62
   550b0:	b.ne	54a24 <aarch64_get_opcode@@Base+0x3fbc>  // b.any
   550b4:	ldr	x2, [sp, #568]
   550b8:	mov	x0, x21
   550bc:	adrp	x1, 68000 <fields@@Base+0x4f60>
   550c0:	add	x1, x1, #0xca8
   550c4:	add	x25, x26, #0x1
   550c8:	lsl	x2, x2, #3
   550cc:	blr	x20
   550d0:	ldr	x0, [sp, #568]
   550d4:	lsl	x0, x0, #3
   550d8:	str	x0, [sp, #96]
   550dc:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   550e0:	ldr	x0, [sp, #112]
   550e4:	cbz	x0, 55330 <aarch64_get_opcode@@Base+0x48c8>
   550e8:	ldr	x0, [sp, #328]
   550ec:	cbnz	x0, 55544 <aarch64_get_opcode@@Base+0x4adc>
   550f0:	ldr	x0, [sp, #272]
   550f4:	cbz	x0, 5557c <aarch64_get_opcode@@Base+0x4b14>
   550f8:	mov	x0, x21
   550fc:	adrp	x1, 69000 <fields@@Base+0x5f60>
   55100:	add	x1, x1, #0x150
   55104:	blr	x20
   55108:	mov	x0, #0x0                   	// #0
   5510c:	ldr	x2, [x24, #120]
   55110:	ldr	x1, [sp, #536]
   55114:	add	x0, x0, x1
   55118:	mov	x1, x24
   5511c:	blr	x2
   55120:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   55124:	ldr	x0, [sp, #152]
   55128:	cbz	x0, 55390 <aarch64_get_opcode@@Base+0x4928>
   5512c:	ldr	x0, [sp, #272]
   55130:	cbnz	x0, 55524 <aarch64_get_opcode@@Base+0x4abc>
   55134:	ldr	w3, [sp, #324]
   55138:	adrp	x0, 68000 <fields@@Base+0x4f60>
   5513c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   55140:	add	x2, x0, #0xcf0
   55144:	add	x1, x1, #0xee0
   55148:	mov	x0, x21
   5514c:	blr	x20
   55150:	cbz	w22, 55518 <aarch64_get_opcode@@Base+0x4ab0>
   55154:	ldr	x0, [sp, #304]
   55158:	str	x0, [sp, #96]
   5515c:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   55160:	cmp	w0, #0x1
   55164:	b.ne	552fc <aarch64_get_opcode@@Base+0x4894>  // b.any
   55168:	adrp	x2, 62000 <xexit@@Base+0x6a80>
   5516c:	add	x2, x2, #0x7f0
   55170:	b	54e18 <aarch64_get_opcode@@Base+0x43b0>
   55174:	cmp	w0, #0xd
   55178:	b.eq	55570 <aarch64_get_opcode@@Base+0x4b08>  // b.none
   5517c:	b.ls	551b8 <aarch64_get_opcode@@Base+0x4750>  // b.plast
   55180:	cmp	w0, #0xe
   55184:	adrp	x2, 62000 <xexit@@Base+0x6a80>
   55188:	adrp	x0, 66000 <fields@@Base+0x2f60>
   5518c:	add	x2, x2, #0x850
   55190:	add	x0, x0, #0xb0
   55194:	csel	x2, x2, x0, ne  // ne = any
   55198:	b	54e18 <aarch64_get_opcode@@Base+0x43b0>
   5519c:	cmp	w0, #0x6
   551a0:	b.eq	554b4 <aarch64_get_opcode@@Base+0x4a4c>  // b.none
   551a4:	cmp	w0, #0x7
   551a8:	b.ne	552fc <aarch64_get_opcode@@Base+0x4894>  // b.any
   551ac:	adrp	x2, 69000 <fields@@Base+0x5f60>
   551b0:	add	x2, x2, #0x140
   551b4:	b	54e18 <aarch64_get_opcode@@Base+0x43b0>
   551b8:	cmp	w0, #0xa
   551bc:	b.eq	554c0 <aarch64_get_opcode@@Base+0x4a58>  // b.none
   551c0:	cmp	w0, #0xb
   551c4:	b.ne	552fc <aarch64_get_opcode@@Base+0x4894>  // b.any
   551c8:	adrp	x2, 62000 <xexit@@Base+0x6a80>
   551cc:	add	x2, x2, #0x840
   551d0:	b	54e18 <aarch64_get_opcode@@Base+0x43b0>
   551d4:	mov	x0, x21
   551d8:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   551dc:	add	x1, x1, #0x8c0
   551e0:	blr	x20
   551e4:	ldr	x0, [sp, #136]
   551e8:	cbz	x0, 554e8 <aarch64_get_opcode@@Base+0x4a80>
   551ec:	ldr	w0, [sp, #148]
   551f0:	ldr	x22, [sp, #296]
   551f4:	str	x22, [sp, #96]
   551f8:	cbz	w0, 54a00 <aarch64_get_opcode@@Base+0x3f98>
   551fc:	ldr	w2, [sp, #348]
   55200:	mov	x0, x21
   55204:	adrp	x1, 68000 <fields@@Base+0x4f60>
   55208:	add	x1, x1, #0xd18
   5520c:	blr	x20
   55210:	str	x22, [sp, #96]
   55214:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   55218:	ldr	w0, [sp, #428]
   5521c:	cmp	w0, #0xff
   55220:	b.ls	5571c <aarch64_get_opcode@@Base+0x4cb4>  // b.plast
   55224:	ldr	w0, [sp, #476]
   55228:	cmp	w0, #0xff
   5522c:	b.ls	55714 <aarch64_get_opcode@@Base+0x4cac>  // b.plast
   55230:	ldr	w0, [sp, #480]
   55234:	cmp	w0, #0xff
   55238:	b.ls	5570c <aarch64_get_opcode@@Base+0x4ca4>  // b.plast
   5523c:	ldr	w0, [sp, #484]
   55240:	cmp	w0, #0xff
   55244:	b.ls	55704 <aarch64_get_opcode@@Base+0x4c9c>  // b.plast
   55248:	ldr	w0, [sp, #488]
   5524c:	cmp	w0, #0xff
   55250:	b.ls	556fc <aarch64_get_opcode@@Base+0x4c94>  // b.plast
   55254:	ldr	w0, [sp, #492]
   55258:	cmp	w0, #0xff
   5525c:	b.ls	556f4 <aarch64_get_opcode@@Base+0x4c8c>  // b.plast
   55260:	ldr	w0, [sp, #496]
   55264:	cmp	w0, #0xff
   55268:	b.ls	556ec <aarch64_get_opcode@@Base+0x4c84>  // b.plast
   5526c:	ldr	w0, [sp, #500]
   55270:	cmp	w0, #0xff
   55274:	b.ls	556e4 <aarch64_get_opcode@@Base+0x4c7c>  // b.plast
   55278:	ldr	w0, [sp, #504]
   5527c:	cmp	w0, #0xff
   55280:	b.ls	556dc <aarch64_get_opcode@@Base+0x4c74>  // b.plast
   55284:	ldr	w0, [sp, #508]
   55288:	cmp	w0, #0xff
   5528c:	b.ls	556d4 <aarch64_get_opcode@@Base+0x4c6c>  // b.plast
   55290:	ldr	w0, [sp, #512]
   55294:	cmp	w0, #0xff
   55298:	b.ls	556cc <aarch64_get_opcode@@Base+0x4c64>  // b.plast
   5529c:	ldr	w0, [sp, #516]
   552a0:	cmp	w0, #0xff
   552a4:	b.ls	556c4 <aarch64_get_opcode@@Base+0x4c5c>  // b.plast
   552a8:	ldr	w0, [sp, #520]
   552ac:	cmp	w0, #0xff
   552b0:	b.ls	5569c <aarch64_get_opcode@@Base+0x4c34>  // b.plast
   552b4:	ldr	w0, [sp, #524]
   552b8:	cmp	w0, #0xff
   552bc:	b.ls	55724 <aarch64_get_opcode@@Base+0x4cbc>  // b.plast
   552c0:	ldr	w0, [sp, #528]
   552c4:	cmp	w0, #0xff
   552c8:	b.ls	55734 <aarch64_get_opcode@@Base+0x4ccc>  // b.plast
   552cc:	ldr	w0, [sp, #532]
   552d0:	cmp	w0, #0xff
   552d4:	b.ls	5572c <aarch64_get_opcode@@Base+0x4cc4>  // b.plast
   552d8:	ldr	w2, [sp, #148]
   552dc:	adrp	x1, 69000 <fields@@Base+0x5f60>
   552e0:	ldr	w3, [sp, #424]
   552e4:	add	x1, x1, #0x178
   552e8:	mov	x0, x21
   552ec:	blr	x20
   552f0:	ldr	x0, [sp, #448]
   552f4:	str	x0, [sp, #96]
   552f8:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   552fc:	ldr	w2, [sp, #408]
   55300:	mov	x0, x21
   55304:	adrp	x1, 69000 <fields@@Base+0x5f60>
   55308:	add	x1, x1, #0x180
   5530c:	blr	x20
   55310:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   55314:	ldr	x2, [sp, #312]
   55318:	mov	x0, x21
   5531c:	ldr	x3, [sp, #464]
   55320:	adrp	x1, 69000 <fields@@Base+0x5f60>
   55324:	add	x1, x1, #0x1e0
   55328:	blr	x20
   5532c:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   55330:	ldr	w3, [sp, #320]
   55334:	mov	x0, x21
   55338:	ldr	x2, [sp, #216]
   5533c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   55340:	add	x1, x1, #0x158
   55344:	blr	x20
   55348:	ldr	w0, [sp, #144]
   5534c:	cmp	w22, #0x0
   55350:	csinc	w0, w0, wzr, ne  // ne = any
   55354:	str	w0, [sp, #144]
   55358:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   5535c:	ldr	w0, [sp, #224]
   55360:	bl	51088 <aarch64_get_opcode@@Base+0x620>
   55364:	mov	x2, x0
   55368:	cbnz	x0, 54e18 <aarch64_get_opcode@@Base+0x43b0>
   5536c:	b	54e40 <aarch64_get_opcode@@Base+0x43d8>
   55370:	ldr	x0, [sp, #280]
   55374:	cmp	x0, #0xf
   55378:	b.ne	552fc <aarch64_get_opcode@@Base+0x4894>  // b.any
   5537c:	mov	x0, x21
   55380:	adrp	x1, 62000 <xexit@@Base+0x6a80>
   55384:	add	x1, x1, #0x850
   55388:	blr	x20
   5538c:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   55390:	ldr	w3, [x27, #1616]
   55394:	adrp	x1, 69000 <fields@@Base+0x5f60>
   55398:	ldr	x4, [sp, #280]
   5539c:	add	x1, x1, #0x170
   553a0:	add	x3, x3, x3, lsl #3
   553a4:	mov	x0, x21
   553a8:	ldr	x2, [sp, #216]
   553ac:	add	x3, x4, x3, lsl #1
   553b0:	ldr	x4, [sp, #104]
   553b4:	add	x3, x3, #0x2
   553b8:	ldr	x3, [x4, x3, lsl #3]
   553bc:	blr	x20
   553c0:	cbnz	w22, 54a00 <aarch64_get_opcode@@Base+0x3f98>
   553c4:	ldr	x0, [sp, #336]
   553c8:	cmp	x0, #0x0
   553cc:	ldr	w0, [sp, #144]
   553d0:	csinc	w0, w0, wzr, ne  // ne = any
   553d4:	str	w0, [sp, #144]
   553d8:	ldr	x0, [sp, #136]
   553dc:	cbnz	x0, 553f8 <aarch64_get_opcode@@Base+0x4990>
   553e0:	ldr	x0, [sp, #432]
   553e4:	cmp	x0, #0xf
   553e8:	ldr	w0, [sp, #144]
   553ec:	csinc	w0, w0, wzr, ne  // ne = any
   553f0:	str	w0, [sp, #144]
   553f4:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   553f8:	mov	w0, #0x1                   	// #1
   553fc:	str	w0, [sp, #144]
   55400:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   55404:	ldr	w3, [x27, #1616]
   55408:	adrp	x1, 69000 <fields@@Base+0x5f60>
   5540c:	ldr	x4, [sp, #280]
   55410:	add	x1, x1, #0x168
   55414:	add	x3, x3, x3, lsl #3
   55418:	mov	x0, x21
   5541c:	ldr	x2, [sp, #216]
   55420:	add	x3, x4, x3, lsl #1
   55424:	ldr	x4, [sp, #104]
   55428:	add	x3, x3, #0x2
   5542c:	ldr	x3, [x4, x3, lsl #3]
   55430:	blr	x20
   55434:	cbnz	w22, 54f58 <aarch64_get_opcode@@Base+0x44f0>
   55438:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   5543c:	add	x2, x0, #0x6b8
   55440:	ldr	x0, [sp, #136]
   55444:	cbz	x0, 54f74 <aarch64_get_opcode@@Base+0x450c>
   55448:	ldr	x0, [sp, #336]
   5544c:	cmp	x0, #0x0
   55450:	adrp	x0, 68000 <fields@@Base+0x4f60>
   55454:	add	x2, x0, #0xc98
   55458:	ldr	w0, [sp, #144]
   5545c:	csinc	w0, w0, wzr, ne  // ne = any
   55460:	str	w0, [sp, #144]
   55464:	b	54f74 <aarch64_get_opcode@@Base+0x450c>
   55468:	ldr	x2, [sp, #568]
   5546c:	mov	x25, x26
   55470:	ldrb	w0, [x25, #1]!
   55474:	cmp	w0, #0x75
   55478:	b.eq	55638 <aarch64_get_opcode@@Base+0x4bd0>  // b.none
   5547c:	cmp	w0, #0x55
   55480:	b.eq	55610 <aarch64_get_opcode@@Base+0x4ba8>  // b.none
   55484:	adrp	x3, fd000 <aarch64_opcode_table@@Base+0x55a20>
   55488:	mov	x0, x21
   5548c:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   55490:	add	x1, x1, #0xe48
   55494:	ldr	w3, [x3, #1616]
   55498:	add	x3, x3, x3, lsl #3
   5549c:	add	x2, x2, x3, lsl #1
   554a0:	ldr	x3, [sp, #104]
   554a4:	add	x2, x2, #0x2
   554a8:	ldr	x2, [x3, x2, lsl #3]
   554ac:	blr	x20
   554b0:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   554b4:	adrp	x2, 69000 <fields@@Base+0x5f60>
   554b8:	add	x2, x2, #0x148
   554bc:	b	54e18 <aarch64_get_opcode@@Base+0x43b0>
   554c0:	adrp	x2, 62000 <xexit@@Base+0x6a80>
   554c4:	add	x2, x2, #0x838
   554c8:	b	54e18 <aarch64_get_opcode@@Base+0x43b0>
   554cc:	mov	x0, x21
   554d0:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   554d4:	add	x1, x1, #0x8c0
   554d8:	blr	x20
   554dc:	ldr	x0, [sp, #296]
   554e0:	str	x0, [sp, #96]
   554e4:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   554e8:	ldr	w22, [sp, #148]
   554ec:	mov	x0, x21
   554f0:	adrp	x1, 69000 <fields@@Base+0x5f60>
   554f4:	add	x1, x1, #0x188
   554f8:	mov	w2, w22
   554fc:	blr	x20
   55500:	sxtw	x0, w22
   55504:	str	x0, [sp, #96]
   55508:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   5550c:	adrp	x2, 62000 <xexit@@Base+0x6a80>
   55510:	add	x2, x2, #0x7f8
   55514:	b	54e18 <aarch64_get_opcode@@Base+0x43b0>
   55518:	ldr	x0, [sp, #304]
   5551c:	str	x0, [sp, #96]
   55520:	b	553d8 <aarch64_get_opcode@@Base+0x4970>
   55524:	ldr	w3, [sp, #324]
   55528:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   5552c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   55530:	add	x2, x0, #0x6b8
   55534:	add	x1, x1, #0xee0
   55538:	mov	x0, x21
   5553c:	blr	x20
   55540:	b	55150 <aarch64_get_opcode@@Base+0x46e8>
   55544:	ldr	x0, [sp, #272]
   55548:	cbz	x0, 5557c <aarch64_get_opcode@@Base+0x4b14>
   5554c:	ldr	w3, [sp, #320]
   55550:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   55554:	adrp	x1, 69000 <fields@@Base+0x5f60>
   55558:	add	x2, x0, #0x6b8
   5555c:	add	x1, x1, #0x228
   55560:	mov	x0, x21
   55564:	blr	x20
   55568:	ldr	x0, [sp, #328]
   5556c:	b	5510c <aarch64_get_opcode@@Base+0x46a4>
   55570:	adrp	x2, 66000 <fields@@Base+0x2f60>
   55574:	add	x2, x2, #0x348
   55578:	b	54e18 <aarch64_get_opcode@@Base+0x43b0>
   5557c:	ldr	w3, [sp, #320]
   55580:	adrp	x0, 68000 <fields@@Base+0x4f60>
   55584:	adrp	x1, 69000 <fields@@Base+0x5f60>
   55588:	add	x2, x0, #0xcf0
   5558c:	add	x1, x1, #0x228
   55590:	mov	x0, x21
   55594:	blr	x20
   55598:	ldr	x0, [sp, #456]
   5559c:	b	5510c <aarch64_get_opcode@@Base+0x46a4>
   555a0:	adrp	x2, 62000 <xexit@@Base+0x6a80>
   555a4:	add	x2, x2, #0x810
   555a8:	b	54e18 <aarch64_get_opcode@@Base+0x43b0>
   555ac:	ldr	x2, [sp, #568]
   555b0:	mov	x0, x21
   555b4:	adrp	x1, 68000 <fields@@Base+0x4f60>
   555b8:	add	x1, x1, #0xca8
   555bc:	add	x25, x26, #0x1
   555c0:	blr	x20
   555c4:	ldr	x0, [sp, #568]
   555c8:	str	x0, [sp, #96]
   555cc:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   555d0:	ldr	x2, [sp, #568]
   555d4:	ldr	w0, [sp, #144]
   555d8:	cmp	x2, #0xf
   555dc:	csinc	w0, w0, wzr, ne  // ne = any
   555e0:	str	w0, [sp, #144]
   555e4:	b	5546c <aarch64_get_opcode@@Base+0x4a04>
   555e8:	ldr	x2, [sp, #568]
   555ec:	mov	x0, x21
   555f0:	adrp	x1, 69000 <fields@@Base+0x5f60>
   555f4:	add	x1, x1, #0x1c8
   555f8:	and	x2, x2, #0xf
   555fc:	blr	x20
   55600:	ldr	x0, [sp, #568]
   55604:	add	x25, x26, #0x1
   55608:	str	x0, [sp, #96]
   5560c:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   55610:	ldr	x0, [sp, #288]
   55614:	str	x2, [sp, #288]
   55618:	mov	x26, x25
   5561c:	cmp	x2, x0
   55620:	add	x0, x25, #0x1
   55624:	mov	x25, x0
   55628:	b.ne	55484 <aarch64_get_opcode@@Base+0x4a1c>  // b.any
   5562c:	mov	w0, #0x1                   	// #1
   55630:	str	w0, [sp, #144]
   55634:	b	55484 <aarch64_get_opcode@@Base+0x4a1c>
   55638:	ldr	x0, [sp, #400]
   5563c:	add	x1, x26, #0x2
   55640:	cmp	x2, x0
   55644:	ldrb	w0, [x26, #2]
   55648:	mov	x26, x25
   5564c:	b.eq	5568c <aarch64_get_opcode@@Base+0x4c24>  // b.none
   55650:	mov	x25, x1
   55654:	str	x2, [sp, #400]
   55658:	b	5547c <aarch64_get_opcode@@Base+0x4a14>
   5565c:	ldr	x2, [sp, #568]
   55660:	add	x2, x2, #0x1
   55664:	str	x2, [sp, #568]
   55668:	b	5546c <aarch64_get_opcode@@Base+0x4a04>
   5566c:	adrp	x2, 62000 <xexit@@Base+0x6a80>
   55670:	add	x2, x2, #0x830
   55674:	b	54e18 <aarch64_get_opcode@@Base+0x43b0>
   55678:	mov	x0, x21
   5567c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   55680:	add	x1, x1, #0x1b0
   55684:	blr	x20
   55688:	b	54a00 <aarch64_get_opcode@@Base+0x3f98>
   5568c:	mov	w3, #0x1                   	// #1
   55690:	mov	x25, x1
   55694:	str	w3, [sp, #144]
   55698:	b	5547c <aarch64_get_opcode@@Base+0x4a14>
   5569c:	mov	w0, #0x18                  	// #24
   556a0:	ldr	w1, [sp, #424]
   556a4:	cmp	w0, w1
   556a8:	b.ne	552d8 <aarch64_get_opcode@@Base+0x4870>  // b.any
   556ac:	ldr	w2, [sp, #428]
   556b0:	mov	x0, x21
   556b4:	adrp	x1, 69000 <fields@@Base+0x5f60>
   556b8:	add	x1, x1, #0x180
   556bc:	blr	x20
   556c0:	b	552f0 <aarch64_get_opcode@@Base+0x4888>
   556c4:	mov	w0, #0x16                  	// #22
   556c8:	b	556a0 <aarch64_get_opcode@@Base+0x4c38>
   556cc:	mov	w0, #0x14                  	// #20
   556d0:	b	556a0 <aarch64_get_opcode@@Base+0x4c38>
   556d4:	mov	w0, #0x12                  	// #18
   556d8:	b	556a0 <aarch64_get_opcode@@Base+0x4c38>
   556dc:	mov	w0, #0x10                  	// #16
   556e0:	b	556a0 <aarch64_get_opcode@@Base+0x4c38>
   556e4:	mov	w0, #0xe                   	// #14
   556e8:	b	556a0 <aarch64_get_opcode@@Base+0x4c38>
   556ec:	mov	w0, #0xc                   	// #12
   556f0:	b	556a0 <aarch64_get_opcode@@Base+0x4c38>
   556f4:	mov	w0, #0xa                   	// #10
   556f8:	b	556a0 <aarch64_get_opcode@@Base+0x4c38>
   556fc:	mov	w0, #0x8                   	// #8
   55700:	b	556a0 <aarch64_get_opcode@@Base+0x4c38>
   55704:	mov	w0, #0x6                   	// #6
   55708:	b	556a0 <aarch64_get_opcode@@Base+0x4c38>
   5570c:	mov	w0, #0x4                   	// #4
   55710:	b	556a0 <aarch64_get_opcode@@Base+0x4c38>
   55714:	mov	w0, #0x2                   	// #2
   55718:	b	556a0 <aarch64_get_opcode@@Base+0x4c38>
   5571c:	mov	w0, #0x0                   	// #0
   55720:	b	556a0 <aarch64_get_opcode@@Base+0x4c38>
   55724:	mov	w0, #0x1a                  	// #26
   55728:	b	556a0 <aarch64_get_opcode@@Base+0x4c38>
   5572c:	mov	w0, #0x1e                  	// #30
   55730:	b	556a0 <aarch64_get_opcode@@Base+0x4c38>
   55734:	mov	w0, #0x1c                  	// #28
   55738:	b	556a0 <aarch64_get_opcode@@Base+0x4c38>
   5573c:	nop
   55740:	sub	sp, sp, #0x260
   55744:	lsr	x2, x1, #7
   55748:	and	x8, x1, #0xf
   5574c:	adrp	x3, 68000 <fields@@Base+0x4f60>
   55750:	ubfiz	x6, x2, #3, #1
   55754:	add	x10, sp, #0x24c
   55758:	stp	x29, x30, [sp]
   5575c:	mov	x29, sp
   55760:	mov	w11, #0x11                  	// #17
   55764:	stp	x19, x20, [sp, #16]
   55768:	mov	x19, x1
   5576c:	stp	x25, x26, [sp, #64]
   55770:	mov	x26, x0
   55774:	and	x0, x1, #0x1
   55778:	str	x0, [sp, #240]
   5577c:	lsr	x0, x19, #22
   55780:	stp	x23, x24, [sp, #48]
   55784:	lsr	x24, x1, #5
   55788:	ubfx	x9, x19, #17, #3
   5578c:	ubfx	x1, x1, #13, #3
   55790:	ubfiz	x0, x0, #3, #1
   55794:	orr	x0, x0, x1
   55798:	ubfx	x7, x19, #1, #3
   5579c:	orr	x6, x6, x9
   557a0:	ubfiz	x5, x24, #3, #1
   557a4:	cmp	x6, x0
   557a8:	orr	x5, x5, x7
   557ac:	cset	w13, eq  // eq = none
   557b0:	cmp	x5, x0
   557b4:	ubfx	x1, x19, #16, #4
   557b8:	csinc	w13, w13, wzr, ne  // ne = any
   557bc:	cmp	x8, #0xd
   557c0:	stp	x27, x28, [sp, #80]
   557c4:	cset	w28, eq  // eq = none
   557c8:	cmp	x1, #0xd
   557cc:	str	x2, [sp, #96]
   557d0:	lsr	x2, x19, #6
   557d4:	stp	x0, x1, [sp, #152]
   557d8:	csinc	w0, w28, wzr, ne  // ne = any
   557dc:	cmp	x8, #0xf
   557e0:	str	w0, [sp, #136]
   557e4:	cset	w0, eq  // eq = none
   557e8:	cmp	x1, #0xf
   557ec:	ubfiz	x25, x2, #3, #1
   557f0:	csinc	w0, w0, wzr, ne  // ne = any
   557f4:	str	w0, [sp, #172]
   557f8:	orr	x0, x25, x7
   557fc:	str	x0, [sp, #184]
   55800:	and	x0, x24, #0x1
   55804:	str	x0, [sp, #256]
   55808:	lsr	x0, x19, #16
   5580c:	str	x0, [sp, #104]
   55810:	ubfx	x0, x19, #20, #1
   55814:	str	x0, [sp, #112]
   55818:	ubfx	x0, x19, #20, #3
   5581c:	lsr	x18, x19, #9
   55820:	str	x0, [sp, #176]
   55824:	ubfx	x0, x19, #28, #1
   55828:	str	x0, [sp, #248]
   5582c:	lsr	x0, x19, #21
   55830:	ubfiz	x18, x18, #1, #3
   55834:	str	x0, [sp, #120]
   55838:	ubfx	x0, x19, #21, #1
   5583c:	orr	x18, x18, #0x1
   55840:	ubfx	x27, x19, #20, #2
   55844:	lsr	x12, x19, #28
   55848:	lsr	x14, x19, #12
   5584c:	ubfx	x15, x19, #12, #4
   55850:	add	x25, x3, #0x4e0
   55854:	stp	x21, x22, [sp, #32]
   55858:	adrp	x21, 9a000 <aarch64_operands@@Base+0xabd0>
   5585c:	add	x21, x21, #0x240
   55860:	str	x2, [sp, #128]
   55864:	str	x0, [sp, #144]
   55868:	ubfx	x0, x19, #12, #1
   5586c:	str	x18, [sp, #192]
   55870:	str	x0, [sp, #232]
   55874:	ldr	x28, [x26]
   55878:	ldr	x23, [x26, #8]
   5587c:	b	5588c <aarch64_get_opcode@@Base+0x4e24>
   55880:	ldr	x0, [x21, #104]
   55884:	add	x21, x21, #0x38
   55888:	cbz	x0, 55d1c <aarch64_get_opcode@@Base+0x52b4>
   5588c:	ldp	x1, x0, [x21, #32]
   55890:	and	x0, x19, x0
   55894:	cmp	x0, x1
   55898:	b.ne	55880 <aarch64_get_opcode@@Base+0x4e18>  // b.any
   5589c:	ldr	w20, [x21, #24]
   558a0:	mov	x0, x19
   558a4:	mov	w1, w20
   558a8:	bl	50a88 <aarch64_get_opcode@@Base+0x20>
   558ac:	mov	w18, w0
   558b0:	cbnz	w0, 55880 <aarch64_get_opcode@@Base+0x4e18>
   558b4:	adrp	x0, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   558b8:	str	w11, [sp, #588]
   558bc:	ldr	w0, [x0, #1040]
   558c0:	cbz	w0, 55cec <aarch64_get_opcode@@Base+0x5284>
   558c4:	cmp	w20, #0x41
   558c8:	b.hi	55ce0 <aarch64_get_opcode@@Base+0x5278>  // b.pmore
   558cc:	cmp	w20, #0x3e
   558d0:	b.hi	55cec <aarch64_get_opcode@@Base+0x5284>  // b.pmore
   558d4:	cmp	w20, #0x3c
   558d8:	b.eq	5683c <aarch64_get_opcode@@Base+0x5dd4>  // b.none
   558dc:	mov	w22, #0x0                   	// #0
   558e0:	mov	w18, #0x1                   	// #1
   558e4:	mov	w1, w20
   558e8:	mov	x2, x10
   558ec:	mov	x0, x19
   558f0:	bl	50d08 <aarch64_get_opcode@@Base+0x2a0>
   558f4:	ldr	w1, [x21, #24]
   558f8:	cmp	w1, #0x45
   558fc:	b.ne	55908 <aarch64_get_opcode@@Base+0x4ea0>  // b.any
   55900:	cmp	x9, x7
   55904:	b.eq	55880 <aarch64_get_opcode@@Base+0x4e18>  // b.none
   55908:	ldr	x20, [x21, #48]
   5590c:	stp	w18, w0, [sp, #172]
   55910:	ldrb	w0, [x20]
   55914:	str	w0, [sp, #200]
   55918:	cbz	w0, 55d5c <aarch64_get_opcode@@Base+0x52f4>
   5591c:	ldr	x8, [sp, #104]
   55920:	ubfiz	w1, w12, #7, #1
   55924:	and	w6, w19, #0xf
   55928:	mov	w17, #0x40                  	// #64
   5592c:	mov	w3, #0x30                  	// #48
   55930:	mov	w13, #0x3c                  	// #60
   55934:	ubfiz	w0, w8, #4, #3
   55938:	ubfiz	x18, x14, #2, #3
   5593c:	orr	w1, w1, w0
   55940:	ubfx	x15, x19, #8, #1
   55944:	ldr	x0, [sp, #96]
   55948:	orr	w25, w1, w6
   5594c:	add	w5, w15, #0x1
   55950:	str	x15, [sp, #208]
   55954:	ands	x30, x0, #0x1
   55958:	adrp	x0, 5c000 <xexit@@Base+0xa80>
   5595c:	csel	w2, w17, w3, eq  // eq = none
   55960:	add	x0, x0, #0x6b8
   55964:	tst	x19, #0x800000
   55968:	str	w2, [sp, #268]
   5596c:	adrp	x2, 68000 <fields@@Base+0x4f60>
   55970:	add	x3, x2, #0xcf0
   55974:	csel	x2, x0, x3, ne  // ne = any
   55978:	tst	x25, #0x40
   5597c:	csel	w13, w13, w17, ne  // ne = any
   55980:	tst	x25, #0x40
   55984:	mov	x0, #0xff                  	// #255
   55988:	csel	x7, x0, xzr, ne  // ne = any
   5598c:	cmp	wzr, w25, lsr #7
   55990:	str	x2, [sp, #328]
   55994:	csel	x11, x0, xzr, ne  // ne = any
   55998:	tst	x25, #0x20
   5599c:	csel	x9, x0, xzr, ne  // ne = any
   559a0:	tst	x25, #0x10
   559a4:	csel	x2, x0, xzr, ne  // ne = any
   559a8:	tst	x25, #0x8
   559ac:	csel	x10, x0, xzr, ne  // ne = any
   559b0:	tst	x25, #0x4
   559b4:	csel	x3, x0, xzr, ne  // ne = any
   559b8:	tst	x25, #0x2
   559bc:	orr	x10, x3, x10, lsl #8
   559c0:	orr	x11, x7, x11, lsl #8
   559c4:	ldr	x3, [sp, #128]
   559c8:	csel	x7, x0, xzr, ne  // ne = any
   559cc:	orr	x10, x7, x10, lsl #8
   559d0:	orr	w1, w1, w6
   559d4:	and	x14, x3, #0x3
   559d8:	lsl	w12, w25, #24
   559dc:	orr	w14, w18, w14
   559e0:	str	x1, [sp, #112]
   559e4:	ldr	x18, [sp, #128]
   559e8:	ubfiz	x1, x8, #1, #1
   559ec:	ldr	x7, [sp, #96]
   559f0:	orr	x11, x9, x11, lsl #8
   559f4:	ldr	x15, [sp, #144]
   559f8:	and	x9, x7, #0x4
   559fc:	ubfiz	x18, x18, #1, #1
   55a00:	and	x12, x12, #0x80000000
   55a04:	stp	x18, x2, [sp, #216]
   55a08:	ubfiz	x2, x25, #19, #7
   55a0c:	orr	x15, x1, x15
   55a10:	orr	x12, x12, x2
   55a14:	str	x9, [sp, #184]
   55a18:	ldp	x9, x2, [sp, #112]
   55a1c:	str	x15, [sp, #136]
   55a20:	ubfx	x15, x19, #7, #1
   55a24:	str	x15, [sp, #424]
   55a28:	ldr	x15, [sp, #184]
   55a2c:	lsr	x3, x19, #27
   55a30:	lsl	w5, w5, #3
   55a34:	and	x3, x3, #0x2
   55a38:	orr	x3, x3, x15
   55a3c:	ubfx	w27, w19, #9, #2
   55a40:	mov	x4, #0x1                   	// #1
   55a44:	tst	x25, #0x1
   55a48:	ldr	x15, [sp, #112]
   55a4c:	lsl	x4, x4, x5
   55a50:	lsl	x5, x9, x5
   55a54:	sub	x4, x4, #0x1
   55a58:	orr	x4, x4, x5
   55a5c:	lsl	w27, w27, #3
   55a60:	and	x5, x24, #0x3
   55a64:	lsr	x6, x19, #8
   55a68:	csel	x0, x0, xzr, ne  // ne = any
   55a6c:	ands	w6, w6, #0x8
   55a70:	str	x5, [sp, #376]
   55a74:	asr	x5, x19, #16
   55a78:	lsl	x27, x15, x27
   55a7c:	csel	x27, x27, x4, eq  // eq = none
   55a80:	mov	x4, x5
   55a84:	and	w5, w5, #0x3f
   55a88:	and	x2, x2, #0x2
   55a8c:	str	w5, [sp, #404]
   55a90:	adrp	x5, 91000 <aarch64_operands@@Base+0x1bd0>
   55a94:	str	x2, [sp, #128]
   55a98:	add	x2, x5, #0xb60
   55a9c:	sbfiz	x13, x13, #24, #32
   55aa0:	ldr	x5, [sp, #216]
   55aa4:	lsr	x16, x19, #18
   55aa8:	orr	x13, x13, x12
   55aac:	ubfx	x18, x19, #4, #1
   55ab0:	ldr	x12, [sp, #224]
   55ab4:	orr	x18, x5, x18
   55ab8:	str	x18, [sp, #336]
   55abc:	ubfiz	x18, x16, #1, #2
   55ac0:	orr	x18, x18, x30
   55ac4:	and	x16, x16, #0x3
   55ac8:	str	x27, [sp, #192]
   55acc:	orr	x12, x12, x11, lsl #8
   55ad0:	str	w6, [sp, #312]
   55ad4:	asr	x1, x19, #4
   55ad8:	str	x2, [sp, #320]
   55adc:	ubfx	x15, x19, #7, #1
   55ae0:	str	x18, [sp, #352]
   55ae4:	and	x1, x1, #0x2
   55ae8:	str	x16, [sp, #368]
   55aec:	asr	x7, x19, #10
   55af0:	str	x13, [sp, #496]
   55af4:	orr	x1, x1, x15
   55af8:	ldr	x27, [sp, #136]
   55afc:	str	x12, [sp, #440]
   55b00:	ldr	x5, [sp, #208]
   55b04:	orr	x12, x0, x10, lsl #8
   55b08:	ldr	x10, [sp, #104]
   55b0c:	str	x12, [sp, #448]
   55b10:	orr	x12, x3, x5
   55b14:	and	x3, x24, #0x3
   55b18:	and	x10, x10, #0x7
   55b1c:	lsl	x27, x27, #1
   55b20:	str	x10, [sp, #208]
   55b24:	add	x10, x27, x3, lsr #1
   55b28:	and	x7, x7, #0x4
   55b2c:	ubfiz	x6, x19, #1, #1
   55b30:	str	x10, [sp, #408]
   55b34:	and	w10, w24, #0x1
   55b38:	ldr	x5, [sp, #136]
   55b3c:	orr	x6, x6, x15
   55b40:	ldr	x11, [sp, #192]
   55b44:	str	w10, [sp, #492]
   55b48:	orr	x10, x1, #0x4
   55b4c:	orr	x1, x7, x1
   55b50:	str	x1, [sp, #520]
   55b54:	orr	x1, x7, x6
   55b58:	mov	w0, #0x20                  	// #32
   55b5c:	asr	x9, x19, #19
   55b60:	cmp	w14, #0x0
   55b64:	str	x12, [sp, #304]
   55b68:	and	x12, x11, #0x80000000
   55b6c:	str	x1, [sp, #512]
   55b70:	orr	x1, x6, #0x4
   55b74:	and	x9, x9, #0x8
   55b78:	str	x1, [sp, #528]
   55b7c:	mov	x1, x3
   55b80:	add	x3, x3, x5, lsl #2
   55b84:	str	x12, [sp, #560]
   55b88:	csel	w12, w14, w0, ne  // ne = any
   55b8c:	ubfx	x0, x19, #13, #3
   55b90:	and	w5, w4, #0x3f
   55b94:	str	x3, [sp, #344]
   55b98:	orr	x3, x9, x0
   55b9c:	str	x3, [sp, #272]
   55ba0:	sub	w3, w17, w5
   55ba4:	str	w3, [sp, #556]
   55ba8:	add	x3, x2, #0xe78
   55bac:	str	x3, [sp, #288]
   55bb0:	ldr	x2, [sp, #128]
   55bb4:	orr	x11, x11, #0xffffffff00000000
   55bb8:	ldr	x0, [sp, #96]
   55bbc:	orr	x1, x1, x2
   55bc0:	str	x1, [sp, #504]
   55bc4:	orr	x1, x15, #0x2
   55bc8:	str	x1, [sp, #416]
   55bcc:	and	w1, w4, #0x20
   55bd0:	str	w1, [sp, #552]
   55bd4:	and	w1, w4, #0x10
   55bd8:	ldr	w3, [sp, #120]
   55bdc:	ubfx	w8, w19, #9, #1
   55be0:	str	w1, [sp, #488]
   55be4:	ubfx	x1, x19, #23, #1
   55be8:	str	x1, [sp, #224]
   55bec:	and	x1, x0, #0x3
   55bf0:	and	x0, x0, #0x7
   55bf4:	and	w3, w3, #0x1
   55bf8:	str	w12, [sp, #264]
   55bfc:	lsl	w8, w8, #3
   55c00:	str	x0, [sp, #280]
   55c04:	ubfx	x0, x19, #8, #2
   55c08:	str	w4, [sp, #392]
   55c0c:	adrp	x24, 68000 <fields@@Base+0x4f60>
   55c10:	str	w3, [sp, #400]
   55c14:	add	x24, x24, #0xc30
   55c18:	str	x1, [sp, #464]
   55c1c:	str	x10, [sp, #536]
   55c20:	str	x11, [sp, #544]
   55c24:	str	x0, [sp, #360]
   55c28:	and	x0, x19, #0x7f
   55c2c:	str	x0, [sp, #216]
   55c30:	ubfiz	x0, x19, #2, #7
   55c34:	str	x0, [sp, #120]
   55c38:	ubfiz	x0, x19, #1, #7
   55c3c:	str	x0, [sp, #104]
   55c40:	ubfx	x0, x19, #24, #1
   55c44:	str	x0, [sp, #296]
   55c48:	ubfx	w0, w19, #8, #4
   55c4c:	str	w0, [sp, #316]
   55c50:	ldr	x0, [sp, #152]
   55c54:	str	xzr, [sp, #96]
   55c58:	ldr	x15, [sp, #112]
   55c5c:	add	x1, x0, #0x1
   55c60:	str	x1, [sp, #384]
   55c64:	add	x1, x0, #0x2
   55c68:	add	x0, x0, #0x3
   55c6c:	stp	x1, x0, [sp, #472]
   55c70:	ubfiz	x0, x19, #3, #7
   55c74:	ldr	w2, [sp, #200]
   55c78:	str	x0, [sp, #456]
   55c7c:	lsl	x0, x15, x8
   55c80:	str	x0, [sp, #432]
   55c84:	b	55ca8 <aarch64_get_opcode@@Base+0x5240>
   55c88:	mov	x1, x24
   55c8c:	mov	x0, x23
   55c90:	blr	x28
   55c94:	mov	x0, x27
   55c98:	mov	x27, x20
   55c9c:	mov	x20, x0
   55ca0:	ldrb	w2, [x27, #1]
   55ca4:	cbz	w2, 55d3c <aarch64_get_opcode@@Base+0x52d4>
   55ca8:	cmp	w2, #0x25
   55cac:	add	x27, x20, #0x1
   55cb0:	b.ne	55c88 <aarch64_get_opcode@@Base+0x5220>  // b.any
   55cb4:	ldrb	w0, [x20, #1]
   55cb8:	sub	w0, w0, #0x25
   55cbc:	cmp	w0, #0x52
   55cc0:	b.ls	55cc8 <aarch64_get_opcode@@Base+0x5260>  // b.plast
   55cc4:	bl	35670 <abort@plt>
   55cc8:	adrp	x1, 68000 <fields@@Base+0x4f60>
   55ccc:	add	x1, x1, #0x438
   55cd0:	ldrh	w0, [x1, w0, uxtw #1]
   55cd4:	adr	x1, 55ce0 <aarch64_get_opcode@@Base+0x5278>
   55cd8:	add	x0, x1, w0, sxth #2
   55cdc:	br	x0
   55ce0:	sub	w0, w20, #0xc2
   55ce4:	cmp	w0, #0x10
   55ce8:	b.hi	558dc <aarch64_get_opcode@@Base+0x4e74>  // b.pmore
   55cec:	sub	w2, w20, #0x2
   55cf0:	cmp	w2, #0xcf
   55cf4:	b.hi	55d08 <aarch64_get_opcode@@Base+0x52a0>  // b.pmore
   55cf8:	ldrh	w0, [x25, w2, uxtw #1]
   55cfc:	adr	x1, 55d08 <aarch64_get_opcode@@Base+0x52a0>
   55d00:	add	x0, x1, w0, sxth #2
   55d04:	br	x0
   55d08:	mov	w22, #0xc                   	// #12
   55d0c:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   55d10:	mov	x0, #0x2                   	// #2
   55d14:	str	x0, [x1, #24]
   55d18:	mov	w0, #0x1                   	// #1
   55d1c:	ldp	x29, x30, [sp]
   55d20:	ldp	x19, x20, [sp, #16]
   55d24:	ldp	x21, x22, [sp, #32]
   55d28:	ldp	x23, x24, [sp, #48]
   55d2c:	ldp	x25, x26, [sp, #64]
   55d30:	ldp	x27, x28, [sp, #80]
   55d34:	add	sp, sp, #0x260
   55d38:	ret
   55d3c:	ldr	x2, [sp, #96]
   55d40:	add	x0, x2, #0x10
   55d44:	cmp	x0, #0x30
   55d48:	b.ls	55d5c <aarch64_get_opcode@@Base+0x52f4>  // b.plast
   55d4c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   55d50:	mov	x0, x23
   55d54:	add	x1, x1, #0xcb8
   55d58:	blr	x28
   55d5c:	ldr	w0, [sp, #172]
   55d60:	cbnz	w0, 56480 <aarch64_get_opcode@@Base+0x5a18>
   55d64:	ldr	w0, [sp, #176]
   55d68:	cbnz	w0, 56560 <aarch64_get_opcode@@Base+0x5af8>
   55d6c:	adrp	x0, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   55d70:	add	x0, x0, #0x410
   55d74:	add	x2, x0, #0x10
   55d78:	ldr	w1, [x0, #16]
   55d7c:	cbnz	w1, 55f00 <aarch64_get_opcode@@Base+0x5498>
   55d80:	adrp	x0, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   55d84:	ldr	w0, [x0, #1040]
   55d88:	cbnz	w0, 55d18 <aarch64_get_opcode@@Base+0x52b0>
   55d8c:	and	x0, x19, #0x7fe000
   55d90:	and	x0, x0, #0xffffffffffc0ffff
   55d94:	cbz	x0, 55d18 <aarch64_get_opcode@@Base+0x52b0>
   55d98:	mov	x0, #0xf50                 	// #3920
   55d9c:	mov	x1, #0xf00                 	// #3840
   55da0:	movk	x0, #0xefb1, lsl #16
   55da4:	and	x0, x19, x0
   55da8:	movk	x1, #0xee31, lsl #16
   55dac:	cmp	x0, x1
   55db0:	b.eq	5724c <aarch64_get_opcode@@Base+0x67e4>  // b.none
   55db4:	mov	x1, #0xf40                 	// #3904
   55db8:	movk	x1, #0xee31, lsl #16
   55dbc:	cmp	x0, x1
   55dc0:	b.eq	55e40 <aarch64_get_opcode@@Base+0x53d8>  // b.none
   55dc4:	mov	x0, #0x1f51                	// #8017
   55dc8:	mov	x1, #0xf00                 	// #3840
   55dcc:	movk	x0, #0xff81, lsl #16
   55dd0:	and	x0, x19, x0
   55dd4:	movk	x1, #0xfe01, lsl #16
   55dd8:	cmp	x0, x1
   55ddc:	b.eq	55e40 <aarch64_get_opcode@@Base+0x53d8>  // b.none
   55de0:	add	x1, x1, #0x1
   55de4:	cmp	x0, x1
   55de8:	b.eq	56c14 <aarch64_get_opcode@@Base+0x61ac>  // b.none
   55dec:	mov	x1, #0x1f10                	// #7952
   55df0:	mov	x2, #0x1f00                	// #7936
   55df4:	movk	x1, #0xff81, lsl #16
   55df8:	mov	x0, #0x1f50                	// #8016
   55dfc:	and	x1, x19, x1
   55e00:	movk	x2, #0xfe01, lsl #16
   55e04:	movk	x0, #0xff81, lsl #16
   55e08:	cmp	x1, x2
   55e0c:	and	x0, x19, x0
   55e10:	b.eq	55e40 <aarch64_get_opcode@@Base+0x53d8>  // b.none
   55e14:	mov	x1, #0xf40                 	// #3904
   55e18:	movk	x1, #0xfe01, lsl #16
   55e1c:	cmp	x0, x1
   55e20:	b.eq	55e40 <aarch64_get_opcode@@Base+0x53d8>  // b.none
   55e24:	mov	x0, #0x1fff                	// #8191
   55e28:	mov	x1, #0xf4d                 	// #3917
   55e2c:	movk	x0, #0xffbf, lsl #16
   55e30:	and	x0, x19, x0
   55e34:	movk	x1, #0xfe31, lsl #16
   55e38:	cmp	x0, x1
   55e3c:	b.ne	55d18 <aarch64_get_opcode@@Base+0x52b0>  // b.any
   55e40:	adrp	x0, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   55e44:	add	x2, x0, #0x410
   55e48:	add	x1, x2, #0x10
   55e4c:	asr	x0, x19, #19
   55e50:	and	x0, x0, #0x8
   55e54:	ubfx	x19, x19, #13, #3
   55e58:	orr	x19, x0, x19
   55e5c:	mov	x3, #0x100000001           	// #4294967297
   55e60:	stp	x19, xzr, [x1, #8]
   55e64:	str	x3, [x2, #16]
   55e68:	cbz	x19, 55e90 <aarch64_get_opcode@@Base+0x5428>
   55e6c:	cmp	x19, #0x8
   55e70:	b.eq	573f4 <aarch64_get_opcode@@Base+0x698c>  // b.none
   55e74:	and	x0, x19, #0x7
   55e78:	cmp	x0, #0x4
   55e7c:	b.eq	55d10 <aarch64_get_opcode@@Base+0x52a8>  // b.none
   55e80:	and	x0, x19, #0x3
   55e84:	cmp	x0, #0x2
   55e88:	b.eq	574b4 <aarch64_get_opcode@@Base+0x6a4c>  // b.none
   55e8c:	tbnz	w19, #0, 574a4 <aarch64_get_opcode@@Base+0x6a3c>
   55e90:	adrp	x0, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   55e94:	add	x4, x0, #0x410
   55e98:	adrp	x3, 68000 <fields@@Base+0x4f60>
   55e9c:	add	x3, x3, #0x980
   55ea0:	adrp	x1, 69000 <fields@@Base+0x5f60>
   55ea4:	adrp	x0, 69000 <fields@@Base+0x5f60>
   55ea8:	add	x3, x3, #0x20
   55eac:	add	x1, x1, #0x3f8
   55eb0:	add	x0, x0, #0x748
   55eb4:	mov	w2, #0x148f                	// #5263
   55eb8:	str	xzr, [x4, #40]
   55ebc:	bl	35ac0 <__assert_fail@plt>
   55ec0:	mov	x0, x27
   55ec4:	add	x3, sp, #0x250
   55ec8:	add	x2, sp, #0x258
   55ecc:	mov	x1, x19
   55ed0:	bl	513b0 <aarch64_get_opcode@@Base+0x948>
   55ed4:	mov	x27, x0
   55ed8:	ldrb	w0, [x0]
   55edc:	sub	w0, w0, #0x41
   55ee0:	cmp	w0, #0x37
   55ee4:	b.hi	55cc4 <aarch64_get_opcode@@Base+0x525c>  // b.pmore
   55ee8:	adrp	x1, 68000 <fields@@Base+0x4f60>
   55eec:	add	x1, x1, #0x680
   55ef0:	ldrh	w0, [x1, w0, uxtw #1]
   55ef4:	adr	x1, 55f00 <aarch64_get_opcode@@Base+0x5498>
   55ef8:	add	x0, x1, w0, sxth #2
   55efc:	br	x0
   55f00:	cmp	w1, #0x1
   55f04:	b.ne	55d18 <aarch64_get_opcode@@Base+0x52b0>  // b.any
   55f08:	ldp	x1, x3, [x2, #16]
   55f0c:	add	x1, x1, #0x1
   55f10:	str	x1, [x2, #16]
   55f14:	cmp	x1, x3
   55f18:	b.eq	57260 <aarch64_get_opcode@@Base+0x67f8>  // b.none
   55f1c:	cmp	x1, #0x3
   55f20:	ldr	x0, [x2, #8]
   55f24:	b.eq	572ac <aarch64_get_opcode@@Base+0x6844>  // b.none
   55f28:	b.gt	567bc <aarch64_get_opcode@@Base+0x5d54>
   55f2c:	cmp	x1, #0x1
   55f30:	b.eq	572a4 <aarch64_get_opcode@@Base+0x683c>  // b.none
   55f34:	and	x0, x0, #0x4
   55f38:	cmp	x1, #0x2
   55f3c:	b.ne	567c8 <aarch64_get_opcode@@Base+0x5d60>  // b.any
   55f40:	adrp	x1, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   55f44:	add	x1, x1, #0x410
   55f48:	ldr	w1, [x1, #20]
   55f4c:	cbz	x0, 55f60 <aarch64_get_opcode@@Base+0x54f8>
   55f50:	cmp	w1, #0x1
   55f54:	b.eq	573ec <aarch64_get_opcode@@Base+0x6984>  // b.none
   55f58:	cmp	w1, #0x2
   55f5c:	cset	w1, eq  // eq = none
   55f60:	adrp	x0, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   55f64:	add	x0, x0, #0x410
   55f68:	str	w1, [x0, #20]
   55f6c:	mov	w0, #0x1                   	// #1
   55f70:	b	55d1c <aarch64_get_opcode@@Base+0x52b4>
   55f74:	add	x20, x20, #0x2
   55f78:	mov	x0, x23
   55f7c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   55f80:	add	x1, x1, #0xc38
   55f84:	blr	x28
   55f88:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   55f8c:	ldr	w0, [x21, #24]
   55f90:	add	x20, x20, #0x2
   55f94:	cmp	w0, #0x41
   55f98:	b.eq	566fc <aarch64_get_opcode@@Base+0x5c94>  // b.none
   55f9c:	ldr	x0, [sp, #248]
   55fa0:	cbnz	x0, 5675c <aarch64_get_opcode@@Base+0x5cf4>
   55fa4:	mov	x0, x23
   55fa8:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   55fac:	add	x1, x1, #0x460
   55fb0:	blr	x28
   55fb4:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   55fb8:	ldr	w1, [x21, #24]
   55fbc:	add	x20, x20, #0x2
   55fc0:	ldp	x2, x0, [x26]
   55fc4:	cmp	w1, #0x38
   55fc8:	b.eq	56bec <aarch64_get_opcode@@Base+0x6184>  // b.none
   55fcc:	b.hi	56020 <aarch64_get_opcode@@Base+0x55b8>  // b.pmore
   55fd0:	cmp	w1, #0x36
   55fd4:	b.eq	56b80 <aarch64_get_opcode@@Base+0x6118>  // b.none
   55fd8:	cmp	w1, #0x37
   55fdc:	b.ne	55ca0 <aarch64_get_opcode@@Base+0x5238>  // b.any
   55fe0:	ldr	x1, [sp, #368]
   55fe4:	cmp	x1, #0x1
   55fe8:	b.eq	56c24 <aarch64_get_opcode@@Base+0x61bc>  // b.none
   55fec:	cmp	x1, #0x2
   55ff0:	b.ne	55ca0 <aarch64_get_opcode@@Base+0x5238>  // b.any
   55ff4:	ldr	x1, [sp, #464]
   55ff8:	cmp	x1, #0x2
   55ffc:	b.eq	5723c <aarch64_get_opcode@@Base+0x67d4>  // b.none
   56000:	cmp	x1, #0x3
   56004:	b.eq	57214 <aarch64_get_opcode@@Base+0x67ac>  // b.none
   56008:	cmp	x1, #0x1
   5600c:	b.eq	5739c <aarch64_get_opcode@@Base+0x6934>  // b.none
   56010:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56014:	add	x1, x1, #0x2c0
   56018:	blr	x2
   5601c:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56020:	cmp	w1, #0x39
   56024:	b.ne	55ca0 <aarch64_get_opcode@@Base+0x5238>  // b.any
   56028:	ldr	x1, [sp, #352]
   5602c:	cmp	x1, #0x4
   56030:	b.eq	5723c <aarch64_get_opcode@@Base+0x67d4>  // b.none
   56034:	b.hi	5720c <aarch64_get_opcode@@Base+0x67a4>  // b.pmore
   56038:	cmp	x1, #0x2
   5603c:	b.eq	56ba8 <aarch64_get_opcode@@Base+0x6140>  // b.none
   56040:	cmp	x1, #0x3
   56044:	b.ne	55ca0 <aarch64_get_opcode@@Base+0x5238>  // b.any
   56048:	adrp	x1, 69000 <fields@@Base+0x5f60>
   5604c:	add	x1, x1, #0x2b8
   56050:	blr	x2
   56054:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56058:	ldr	x0, [sp, #240]
   5605c:	add	x20, x20, #0x2
   56060:	cbz	x0, 55ca0 <aarch64_get_opcode@@Base+0x5238>
   56064:	ldr	x2, [sp, #336]
   56068:	mov	x0, x23
   5606c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56070:	add	x1, x1, #0x290
   56074:	blr	x28
   56078:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   5607c:	ldr	w1, [x21, #24]
   56080:	add	x20, x20, #0x2
   56084:	ldp	x3, x0, [x26]
   56088:	cmp	w1, #0x9
   5608c:	b.eq	56b5c <aarch64_get_opcode@@Base+0x60f4>  // b.none
   56090:	b.hi	560ec <aarch64_get_opcode@@Base+0x5684>  // b.pmore
   56094:	cmp	w1, #0x5
   56098:	b.eq	57274 <aarch64_get_opcode@@Base+0x680c>  // b.none
   5609c:	b.hi	560b8 <aarch64_get_opcode@@Base+0x5650>  // b.pmore
   560a0:	cmp	w1, #0x3
   560a4:	b.eq	565e0 <aarch64_get_opcode@@Base+0x5b78>  // b.none
   560a8:	b.ls	56598 <aarch64_get_opcode@@Base+0x5b30>  // b.plast
   560ac:	cmp	w1, #0x4
   560b0:	b.eq	56124 <aarch64_get_opcode@@Base+0x56bc>  // b.none
   560b4:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   560b8:	cmp	w1, #0x7
   560bc:	b.eq	56124 <aarch64_get_opcode@@Base+0x56bc>  // b.none
   560c0:	cmp	w1, #0x8
   560c4:	b.ne	565d8 <aarch64_get_opcode@@Base+0x5b70>  // b.any
   560c8:	adrp	x2, 92000 <aarch64_operands@@Base+0x2bd0>
   560cc:	add	x2, x2, #0xc60
   560d0:	ldr	x4, [sp, #536]
   560d4:	add	x2, x2, #0x800
   560d8:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   560dc:	add	x1, x1, #0xe48
   560e0:	ldr	x2, [x2, x4, lsl #3]
   560e4:	blr	x3
   560e8:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   560ec:	cmp	w1, #0xd
   560f0:	b.eq	57274 <aarch64_get_opcode@@Base+0x680c>  // b.none
   560f4:	b.ls	56114 <aarch64_get_opcode@@Base+0x56ac>  // b.plast
   560f8:	cmp	w1, #0xf
   560fc:	b.eq	56124 <aarch64_get_opcode@@Base+0x56bc>  // b.none
   56100:	cmp	w1, #0x10
   56104:	b.eq	560c8 <aarch64_get_opcode@@Base+0x5660>  // b.none
   56108:	cmp	w1, #0xe
   5610c:	b.eq	565e0 <aarch64_get_opcode@@Base+0x5b78>  // b.none
   56110:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56114:	cmp	w1, #0xb
   56118:	b.eq	565e0 <aarch64_get_opcode@@Base+0x5b78>  // b.none
   5611c:	cmp	w1, #0xc
   56120:	b.ne	565cc <aarch64_get_opcode@@Base+0x5b64>  // b.any
   56124:	adrp	x2, 92000 <aarch64_operands@@Base+0x2bd0>
   56128:	add	x2, x2, #0xc60
   5612c:	ldr	x4, [sp, #416]
   56130:	add	x2, x2, #0x800
   56134:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   56138:	add	x1, x1, #0xe48
   5613c:	ldr	x2, [x2, x4, lsl #3]
   56140:	blr	x3
   56144:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56148:	ldr	x0, [sp, #144]
   5614c:	add	x20, x20, #0x2
   56150:	cbz	x0, 55ca0 <aarch64_get_opcode@@Base+0x5238>
   56154:	mov	x0, x23
   56158:	adrp	x1, 68000 <fields@@Base+0x4f60>
   5615c:	add	x1, x1, #0xc98
   56160:	blr	x28
   56164:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56168:	ldr	w1, [x21, #24]
   5616c:	add	x20, x20, #0x2
   56170:	ldp	x2, x0, [x26]
   56174:	cmp	w1, #0x39
   56178:	b.eq	56710 <aarch64_get_opcode@@Base+0x5ca8>  // b.none
   5617c:	cmp	w1, #0x3a
   56180:	b.ne	55ca0 <aarch64_get_opcode@@Base+0x5238>  // b.any
   56184:	ldr	x1, [sp, #280]
   56188:	cmp	x1, #0x3
   5618c:	b.eq	57344 <aarch64_get_opcode@@Base+0x68dc>  // b.none
   56190:	ldr	x3, [sp, #184]
   56194:	cbnz	x3, 56780 <aarch64_get_opcode@@Base+0x5d18>
   56198:	cmp	x1, #0x1
   5619c:	b.eq	57334 <aarch64_get_opcode@@Base+0x68cc>  // b.none
   561a0:	cmp	x1, #0x2
   561a4:	b.eq	5672c <aarch64_get_opcode@@Base+0x5cc4>  // b.none
   561a8:	cbnz	x1, 55ca0 <aarch64_get_opcode@@Base+0x5238>
   561ac:	adrp	x1, 69000 <fields@@Base+0x5f60>
   561b0:	add	x1, x1, #0xeb8
   561b4:	blr	x2
   561b8:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   561bc:	ldr	w2, [sp, #268]
   561c0:	add	x20, x20, #0x2
   561c4:	mov	x0, x23
   561c8:	adrp	x1, 69000 <fields@@Base+0x5f60>
   561cc:	add	x1, x1, #0x288
   561d0:	blr	x28
   561d4:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   561d8:	ldr	w2, [sp, #264]
   561dc:	add	x20, x20, #0x2
   561e0:	mov	x0, x23
   561e4:	adrp	x1, 69000 <fields@@Base+0x5f60>
   561e8:	add	x1, x1, #0x288
   561ec:	blr	x28
   561f0:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   561f4:	adrp	x2, 92000 <aarch64_operands@@Base+0x2bd0>
   561f8:	add	x2, x2, #0xc60
   561fc:	ldr	x3, [sp, #272]
   56200:	add	x2, x2, #0x780
   56204:	add	x20, x20, #0x2
   56208:	mov	x0, x23
   5620c:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   56210:	add	x1, x1, #0xe48
   56214:	ldr	x2, [x2, x3, lsl #3]
   56218:	blr	x28
   5621c:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56220:	ldr	w1, [x21, #24]
   56224:	add	x20, x20, #0x2
   56228:	ldp	x6, x0, [x26]
   5622c:	cmp	w1, #0x25
   56230:	b.eq	566e4 <aarch64_get_opcode@@Base+0x5c7c>  // b.none
   56234:	b.hi	56298 <aarch64_get_opcode@@Base+0x5830>  // b.pmore
   56238:	cmp	w1, #0x22
   5623c:	b.eq	562c8 <aarch64_get_opcode@@Base+0x5860>  // b.none
   56240:	b.ls	562d4 <aarch64_get_opcode@@Base+0x586c>  // b.plast
   56244:	cmp	w1, #0x23
   56248:	ldr	x3, [sp, #104]
   5624c:	ldr	x1, [sp, #120]
   56250:	ldr	x2, [sp, #160]
   56254:	csel	x4, x1, x3, ne  // ne = any
   56258:	ldr	x1, [sp, #296]
   5625c:	cbz	x1, 566ac <aarch64_get_opcode@@Base+0x5c44>
   56260:	adrp	x1, fd000 <aarch64_opcode_table@@Base+0x55a20>
   56264:	ldr	w1, [x1, #1616]
   56268:	add	x1, x1, x1, lsl #3
   5626c:	add	x1, x2, x1, lsl #1
   56270:	ldr	x2, [sp, #288]
   56274:	add	x1, x1, #0x2
   56278:	ldr	x2, [x2, x1, lsl #3]
   5627c:	ldr	x1, [sp, #144]
   56280:	cbnz	x1, 56bcc <aarch64_get_opcode@@Base+0x6164>
   56284:	ldr	x3, [sp, #328]
   56288:	adrp	x1, 69000 <fields@@Base+0x5f60>
   5628c:	add	x1, x1, #0x258
   56290:	blr	x6
   56294:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56298:	cmp	w1, #0x28
   5629c:	b.eq	56be0 <aarch64_get_opcode@@Base+0x6178>  // b.none
   562a0:	b.ls	562b8 <aarch64_get_opcode@@Base+0x5850>  // b.plast
   562a4:	cmp	w1, #0x29
   562a8:	b.ne	55ca0 <aarch64_get_opcode@@Base+0x5238>  // b.any
   562ac:	ldr	x4, [sp, #120]
   562b0:	ldr	x2, [sp, #160]
   562b4:	b	56258 <aarch64_get_opcode@@Base+0x57f0>
   562b8:	cmp	w1, #0x26
   562bc:	b.eq	562e4 <aarch64_get_opcode@@Base+0x587c>  // b.none
   562c0:	cmp	w1, #0x27
   562c4:	b.ne	55ca0 <aarch64_get_opcode@@Base+0x5238>  // b.any
   562c8:	ldr	x2, [sp, #160]
   562cc:	ldr	x4, [sp, #216]
   562d0:	b	56258 <aarch64_get_opcode@@Base+0x57f0>
   562d4:	cmp	w1, #0x20
   562d8:	b.eq	566e4 <aarch64_get_opcode@@Base+0x5c7c>  // b.none
   562dc:	cmp	w1, #0x21
   562e0:	b.ne	55ca0 <aarch64_get_opcode@@Base+0x5238>  // b.any
   562e4:	ldr	x4, [sp, #104]
   562e8:	ldr	x2, [sp, #208]
   562ec:	b	56258 <aarch64_get_opcode@@Base+0x57f0>
   562f0:	adrp	x0, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   562f4:	add	x20, x20, #0x2
   562f8:	ldr	w0, [x0, #1040]
   562fc:	cbz	w0, 55ca0 <aarch64_get_opcode@@Base+0x5238>
   56300:	ubfx	x2, x0, #4, #4
   56304:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   56308:	ldr	x0, [sp, #320]
   5630c:	add	x1, x1, #0xe48
   56310:	add	x3, x0, #0xdf0
   56314:	mov	x0, x23
   56318:	ldr	x2, [x3, x2, lsl #3]
   5631c:	blr	x28
   56320:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56324:	ldr	x0, [sp, #224]
   56328:	add	x20, x20, #0x2
   5632c:	cbnz	x0, 55ca0 <aarch64_get_opcode@@Base+0x5238>
   56330:	adrp	x0, 68000 <fields@@Base+0x4f60>
   56334:	add	x1, x0, #0xcf0
   56338:	mov	x0, x23
   5633c:	blr	x28
   56340:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56344:	ldr	x0, [sp, #232]
   56348:	add	x20, x20, #0x2
   5634c:	cbz	x0, 55ca0 <aarch64_get_opcode@@Base+0x5238>
   56350:	mov	x0, x23
   56354:	adrp	x1, 6b000 <fields@@Base+0x7f60>
   56358:	add	x1, x1, #0xa98
   5635c:	blr	x28
   56360:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56364:	ldr	x0, [sp, #232]
   56368:	add	x20, x20, #0x2
   5636c:	cbnz	x0, 56698 <aarch64_get_opcode@@Base+0x5c30>
   56370:	mov	x0, x23
   56374:	adrp	x1, 5f000 <xexit@@Base+0x3a80>
   56378:	add	x1, x1, #0x228
   5637c:	blr	x28
   56380:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56384:	ldr	x1, [sp, #128]
   56388:	add	x20, x20, #0x2
   5638c:	ldp	x3, x0, [x26]
   56390:	cbz	x1, 56674 <aarch64_get_opcode@@Base+0x5c0c>
   56394:	ldr	x2, [sp, #344]
   56398:	adrp	x1, 69000 <fields@@Base+0x5f60>
   5639c:	add	x1, x1, #0x298
   563a0:	blr	x3
   563a4:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   563a8:	ldr	w0, [sp, #312]
   563ac:	add	x20, x20, #0x2
   563b0:	ldp	x5, x3, [x26]
   563b4:	cbnz	w0, 56620 <aarch64_get_opcode@@Base+0x5bb8>
   563b8:	ldr	w0, [x21, #24]
   563bc:	sub	w2, w0, #0x3d
   563c0:	cmp	w2, #0xa
   563c4:	b.hi	563dc <aarch64_get_opcode@@Base+0x5974>  // b.pmore
   563c8:	mov	x0, #0x1                   	// #1
   563cc:	mov	x1, #0x4a1                 	// #1185
   563d0:	lsl	x0, x0, x2
   563d4:	tst	x0, x1
   563d8:	b.ne	567a0 <aarch64_get_opcode@@Base+0x5d38>  // b.any
   563dc:	ldr	x0, [sp, #560]
   563e0:	adrp	x1, 69000 <fields@@Base+0x5f60>
   563e4:	cbz	x0, 56c5c <aarch64_get_opcode@@Base+0x61f4>
   563e8:	add	x1, x1, #0xe8
   563ec:	ldr	x2, [sp, #544]
   563f0:	b	567ac <aarch64_get_opcode@@Base+0x5d44>
   563f4:	ldr	w1, [x21, #24]
   563f8:	add	x20, x20, #0x2
   563fc:	ldp	x6, x0, [x26]
   56400:	cmp	w1, #0x1e
   56404:	b.eq	5673c <aarch64_get_opcode@@Base+0x5cd4>  // b.none
   56408:	b.hi	56440 <aarch64_get_opcode@@Base+0x59d8>  // b.pmore
   5640c:	cmp	w1, #0x1c
   56410:	b.eq	5673c <aarch64_get_opcode@@Base+0x5cd4>  // b.none
   56414:	cmp	w1, #0x1d
   56418:	b.ne	55ca0 <aarch64_get_opcode@@Base+0x5238>  // b.any
   5641c:	ldr	x2, [sp, #152]
   56420:	cmp	x2, #0x4
   56424:	b.hi	56770 <aarch64_get_opcode@@Base+0x5d08>  // b.pmore
   56428:	ldp	x4, x5, [sp, #472]
   5642c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56430:	ldr	x3, [sp, #384]
   56434:	add	x1, x1, #0x318
   56438:	blr	x6
   5643c:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56440:	cmp	w1, #0x1f
   56444:	b.eq	5641c <aarch64_get_opcode@@Base+0x59b4>  // b.none
   56448:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   5644c:	adrp	x0, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   56450:	add	x0, x0, #0x410
   56454:	add	x20, x20, #0x2
   56458:	ldr	w1, [x0, #20]
   5645c:	ldp	x2, x0, [x26]
   56460:	cmp	w1, #0x1
   56464:	b.eq	566ec <aarch64_get_opcode@@Base+0x5c84>  // b.none
   56468:	cmp	w1, #0x2
   5646c:	b.ne	55ca0 <aarch64_get_opcode@@Base+0x5238>  // b.any
   56470:	adrp	x1, 72000 <fields@@Base+0xef60>
   56474:	add	x1, x1, #0xdd8
   56478:	blr	x2
   5647c:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56480:	ldp	x20, x21, [x26]
   56484:	adrp	x2, 68000 <fields@@Base+0x4f60>
   56488:	adrp	x1, 69000 <fields@@Base+0x5f60>
   5648c:	add	x2, x2, #0xf28
   56490:	add	x1, x1, #0x418
   56494:	mov	x0, x21
   56498:	blr	x20
   5649c:	cmp	w22, #0x6
   564a0:	b.eq	572d8 <aarch64_get_opcode@@Base+0x6870>  // b.none
   564a4:	b.hi	564fc <aarch64_get_opcode@@Base+0x5a94>  // b.pmore
   564a8:	cmp	w22, #0x3
   564ac:	b.eq	572c4 <aarch64_get_opcode@@Base+0x685c>  // b.none
   564b0:	b.hi	564d8 <aarch64_get_opcode@@Base+0x5a70>  // b.pmore
   564b4:	cmp	w22, #0x1
   564b8:	b.eq	56bb8 <aarch64_get_opcode@@Base+0x6150>  // b.none
   564bc:	cmp	w22, #0x2
   564c0:	b.ne	56548 <aarch64_get_opcode@@Base+0x5ae0>  // b.any
   564c4:	mov	x0, x21
   564c8:	adrp	x1, 69000 <fields@@Base+0x5f60>
   564cc:	add	x1, x1, #0x468
   564d0:	blr	x20
   564d4:	b	55d64 <aarch64_get_opcode@@Base+0x52fc>
   564d8:	cmp	w22, #0x4
   564dc:	b.eq	56b34 <aarch64_get_opcode@@Base+0x60cc>  // b.none
   564e0:	cmp	w22, #0x5
   564e4:	b.ne	55d64 <aarch64_get_opcode@@Base+0x52fc>  // b.any
   564e8:	mov	x0, x21
   564ec:	adrp	x1, 69000 <fields@@Base+0x5f60>
   564f0:	add	x1, x1, #0x4a8
   564f4:	blr	x20
   564f8:	b	55d64 <aarch64_get_opcode@@Base+0x52fc>
   564fc:	cmp	w22, #0x9
   56500:	b.eq	572ec <aarch64_get_opcode@@Base+0x6884>  // b.none
   56504:	b.ls	56524 <aarch64_get_opcode@@Base+0x5abc>  // b.plast
   56508:	cmp	w22, #0xc
   5650c:	b.eq	55d64 <aarch64_get_opcode@@Base+0x52fc>  // b.none
   56510:	mov	x0, x21
   56514:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56518:	add	x1, x1, #0x578
   5651c:	blr	x20
   56520:	b	55d64 <aarch64_get_opcode@@Base+0x52fc>
   56524:	cmp	w22, #0x7
   56528:	b.eq	56b48 <aarch64_get_opcode@@Base+0x60e0>  // b.none
   5652c:	cmp	w22, #0x8
   56530:	b.ne	55d64 <aarch64_get_opcode@@Base+0x52fc>  // b.any
   56534:	mov	x0, x21
   56538:	adrp	x1, 69000 <fields@@Base+0x5f60>
   5653c:	add	x1, x1, #0x528
   56540:	blr	x20
   56544:	b	55d64 <aarch64_get_opcode@@Base+0x52fc>
   56548:	cbnz	w22, 55d64 <aarch64_get_opcode@@Base+0x52fc>
   5654c:	mov	x0, x21
   56550:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56554:	add	x1, x1, #0x420
   56558:	blr	x20
   5655c:	b	55d64 <aarch64_get_opcode@@Base+0x52fc>
   56560:	ldp	x20, x21, [x26]
   56564:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56568:	ldr	w22, [sp, #588]
   5656c:	add	x1, x1, #0x3b8
   56570:	mov	x0, x21
   56574:	blr	x20
   56578:	cmp	w22, #0x10
   5657c:	b.hi	55d6c <aarch64_get_opcode@@Base+0x5304>  // b.pmore
   56580:	adrp	x0, 68000 <fields@@Base+0x4f60>
   56584:	add	x0, x0, #0x6f0
   56588:	ldrh	w0, [x0, w22, uxtw #1]
   5658c:	adr	x1, 56598 <aarch64_get_opcode@@Base+0x5b30>
   56590:	add	x0, x1, w0, sxth #2
   56594:	br	x0
   56598:	cmp	w1, #0x1
   5659c:	b.eq	56b5c <aarch64_get_opcode@@Base+0x60f4>  // b.none
   565a0:	cmp	w1, #0x2
   565a4:	b.ne	55ca0 <aarch64_get_opcode@@Base+0x5238>  // b.any
   565a8:	adrp	x2, 92000 <aarch64_operands@@Base+0x2bd0>
   565ac:	add	x2, x2, #0xc60
   565b0:	ldr	x4, [sp, #520]
   565b4:	add	x2, x2, #0x800
   565b8:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   565bc:	add	x1, x1, #0xe48
   565c0:	ldr	x2, [x2, x4, lsl #3]
   565c4:	blr	x3
   565c8:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   565cc:	cmp	w1, #0xa
   565d0:	b.eq	565a8 <aarch64_get_opcode@@Base+0x5b40>  // b.none
   565d4:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   565d8:	cmp	w1, #0x6
   565dc:	b.ne	55ca0 <aarch64_get_opcode@@Base+0x5238>  // b.any
   565e0:	adrp	x2, 92000 <aarch64_operands@@Base+0x2bd0>
   565e4:	add	x2, x2, #0xc60
   565e8:	ldr	x4, [sp, #424]
   565ec:	add	x2, x2, #0x800
   565f0:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   565f4:	add	x1, x1, #0xe48
   565f8:	ldr	x2, [x2, x4, lsl #3]
   565fc:	blr	x3
   56600:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56604:	ldr	x1, [sp, #160]
   56608:	cmp	x1, #0xf
   5660c:	mov	w22, #0xc                   	// #12
   56610:	mov	w0, #0x3                   	// #3
   56614:	cset	w18, eq  // eq = none
   56618:	csel	w22, w22, w0, ne  // ne = any
   5661c:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   56620:	ldr	w0, [sp, #316]
   56624:	cmp	w0, #0xb
   56628:	b.gt	567d0 <aarch64_get_opcode@@Base+0x5d68>
   5662c:	ldr	w0, [x21, #24]
   56630:	sub	w2, w0, #0x3d
   56634:	cmp	w2, #0xa
   56638:	b.hi	56c50 <aarch64_get_opcode@@Base+0x61e8>  // b.pmore
   5663c:	mov	x0, #0x1                   	// #1
   56640:	mov	x1, #0x4a1                 	// #1185
   56644:	lsl	x0, x0, x2
   56648:	tst	x0, x1
   5664c:	adrp	x0, 69000 <fields@@Base+0x5f60>
   56650:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56654:	add	x0, x0, #0x238
   56658:	add	x1, x1, #0x88
   5665c:	csel	x1, x1, x0, eq  // eq = none
   56660:	ldr	x2, [sp, #432]
   56664:	mov	x0, x3
   56668:	mov	x3, x2
   5666c:	blr	x5
   56670:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56674:	ldr	x1, [sp, #256]
   56678:	cbnz	x1, 56834 <aarch64_get_opcode@@Base+0x5dcc>
   5667c:	ldr	x1, [sp, #376]
   56680:	ldr	x2, [sp, #136]
   56684:	cbz	x1, 56398 <aarch64_get_opcode@@Base+0x5930>
   56688:	adrp	x1, 69000 <fields@@Base+0x5f60>
   5668c:	add	x1, x1, #0x338
   56690:	blr	x3
   56694:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56698:	mov	x0, x23
   5669c:	adrp	x1, 60000 <xexit@@Base+0x4a80>
   566a0:	add	x1, x1, #0x60
   566a4:	blr	x28
   566a8:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   566ac:	ldr	w1, [sp, #400]
   566b0:	cbz	w1, 55ca0 <aarch64_get_opcode@@Base+0x5238>
   566b4:	adrp	x3, fd000 <aarch64_opcode_table@@Base+0x55a20>
   566b8:	adrp	x1, 69000 <fields@@Base+0x5f60>
   566bc:	add	x1, x1, #0x278
   566c0:	ldr	w5, [x3, #1616]
   566c4:	ldr	x3, [sp, #328]
   566c8:	add	x5, x5, x5, lsl #3
   566cc:	add	x2, x2, x5, lsl #1
   566d0:	ldr	x5, [sp, #288]
   566d4:	add	x2, x2, #0x2
   566d8:	ldr	x2, [x5, x2, lsl #3]
   566dc:	blr	x6
   566e0:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   566e4:	ldp	x2, x4, [sp, #208]
   566e8:	b	56258 <aarch64_get_opcode@@Base+0x57f0>
   566ec:	adrp	x1, 60000 <xexit@@Base+0x4a80>
   566f0:	add	x1, x1, #0x60
   566f4:	blr	x2
   566f8:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   566fc:	ldr	x0, [sp, #224]
   56700:	cbnz	x0, 5675c <aarch64_get_opcode@@Base+0x5cf4>
   56704:	ldr	x0, [sp, #504]
   56708:	cbz	x0, 55ca0 <aarch64_get_opcode@@Base+0x5238>
   5670c:	b	55fa4 <aarch64_get_opcode@@Base+0x553c>
   56710:	ldr	x1, [sp, #360]
   56714:	cmp	x1, #0x2
   56718:	b.eq	56790 <aarch64_get_opcode@@Base+0x5d28>  // b.none
   5671c:	cmp	x1, #0x3
   56720:	b.eq	56c04 <aarch64_get_opcode@@Base+0x619c>  // b.none
   56724:	cmp	x1, #0x1
   56728:	b.eq	561ac <aarch64_get_opcode@@Base+0x5744>  // b.none
   5672c:	adrp	x1, 6a000 <fields@@Base+0x6f60>
   56730:	add	x1, x1, #0x2a0
   56734:	blr	x2
   56738:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   5673c:	ldr	x2, [sp, #152]
   56740:	cmp	x2, #0x6
   56744:	b.hi	56770 <aarch64_get_opcode@@Base+0x5d08>  // b.pmore
   56748:	ldr	x3, [sp, #384]
   5674c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56750:	add	x1, x1, #0x2f0
   56754:	blr	x6
   56758:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   5675c:	mov	x0, x23
   56760:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56764:	add	x1, x1, #0x7e0
   56768:	blr	x28
   5676c:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56770:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56774:	add	x1, x1, #0x300
   56778:	blr	x6
   5677c:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56780:	cmp	x1, #0x5
   56784:	b.eq	56c04 <aarch64_get_opcode@@Base+0x619c>  // b.none
   56788:	cmp	x1, #0x7
   5678c:	b.ne	55ca0 <aarch64_get_opcode@@Base+0x5238>  // b.any
   56790:	adrp	x1, 62000 <xexit@@Base+0x6a80>
   56794:	add	x1, x1, #0x6b8
   56798:	blr	x2
   5679c:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   567a0:	adrp	x1, 69000 <fields@@Base+0x5f60>
   567a4:	add	x1, x1, #0x248
   567a8:	ldr	x2, [sp, #192]
   567ac:	mov	x0, x3
   567b0:	ldr	x3, [sp, #192]
   567b4:	blr	x5
   567b8:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   567bc:	cmp	x1, #0x4
   567c0:	mov	w1, #0x0                   	// #0
   567c4:	b.eq	55f60 <aarch64_get_opcode@@Base+0x54f8>  // b.none
   567c8:	ldr	w1, [x2, #4]
   567cc:	b	55f60 <aarch64_get_opcode@@Base+0x54f8>
   567d0:	ldr	w0, [sp, #316]
   567d4:	cmp	w0, #0xd
   567d8:	b.le	563b8 <aarch64_get_opcode@@Base+0x5950>
   567dc:	cmp	w0, #0xe
   567e0:	ldr	w0, [sp, #492]
   567e4:	b.eq	57364 <aarch64_get_opcode@@Base+0x68fc>  // b.none
   567e8:	cbnz	w0, 573cc <aarch64_get_opcode@@Base+0x6964>
   567ec:	adrp	x0, a6000 <aarch64_operands@@Base+0x16bd0>
   567f0:	str	x3, [sp, #568]
   567f4:	ldr	w3, [sp, #496]
   567f8:	add	x2, sp, #0x258
   567fc:	ldr	x0, [x0, #3864]
   56800:	add	x1, sp, #0x250
   56804:	str	x5, [sp, #200]
   56808:	str	w3, [sp, #592]
   5680c:	bl	358d0 <floatformat_to_double@plt>
   56810:	ldr	x5, [sp, #200]
   56814:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56818:	ldr	x2, [sp, #496]
   5681c:	add	x1, x1, #0xb8
   56820:	ldr	x3, [sp, #568]
   56824:	ldr	d0, [sp, #600]
   56828:	mov	x0, x3
   5682c:	blr	x5
   56830:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56834:	ldr	x2, [sp, #408]
   56838:	b	56398 <aarch64_get_opcode@@Base+0x5930>
   5683c:	cmp	x15, #0xd
   56840:	b.eq	569e4 <aarch64_get_opcode@@Base+0x5f7c>  // b.none
   56844:	cmp	x15, #0xf
   56848:	mov	w22, #0x3                   	// #3
   5684c:	mov	w0, #0xc                   	// #12
   56850:	cset	w18, eq  // eq = none
   56854:	csel	w22, w22, w0, eq  // eq = none
   56858:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   5685c:	ldr	x0, [sp, #152]
   56860:	cmp	x5, x0
   56864:	b.ne	56604 <aarch64_get_opcode@@Base+0x5b9c>  // b.any
   56868:	mov	w22, #0x7                   	// #7
   5686c:	mov	w18, #0x1                   	// #1
   56870:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   56874:	ldr	x0, [sp, #160]
   56878:	mov	x1, x0
   5687c:	cmp	x0, #0xd
   56880:	b.ne	56608 <aarch64_get_opcode@@Base+0x5ba0>  // b.any
   56884:	ldr	x1, [sp, #144]
   56888:	mov	w22, #0x6                   	// #6
   5688c:	mov	w0, #0xc                   	// #12
   56890:	cmp	x1, #0x0
   56894:	mov	w18, w1
   56898:	csel	w22, w22, w0, ne  // ne = any
   5689c:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   568a0:	ldr	x0, [sp, #160]
   568a4:	cmp	x0, #0xd
   568a8:	b.eq	573c0 <aarch64_get_opcode@@Base+0x6958>  // b.none
   568ac:	cmp	x0, #0xf
   568b0:	b.eq	57298 <aarch64_get_opcode@@Base+0x6830>  // b.none
   568b4:	ldr	x1, [sp, #152]
   568b8:	mov	w22, #0x4                   	// #4
   568bc:	mov	w0, #0xc                   	// #12
   568c0:	cmp	x1, #0x4
   568c4:	csel	w22, w22, w0, hi  // hi = pmore
   568c8:	cset	w18, hi  // hi = pmore
   568cc:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   568d0:	ldr	x1, [sp, #152]
   568d4:	mov	w22, #0x7                   	// #7
   568d8:	ldr	x2, [sp, #184]
   568dc:	mov	w0, #0xc                   	// #12
   568e0:	cmp	x1, x2
   568e4:	csel	w22, w22, w0, eq  // eq = none
   568e8:	cset	w18, eq  // eq = none
   568ec:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   568f0:	ldr	x1, [sp, #160]
   568f4:	mov	w22, #0xc                   	// #12
   568f8:	mov	w0, #0x2                   	// #2
   568fc:	cmp	x1, #0xd
   56900:	csel	w22, w22, w0, ne  // ne = any
   56904:	cset	w18, eq  // eq = none
   56908:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   5690c:	ldr	x1, [sp, #152]
   56910:	mov	w22, #0xc                   	// #12
   56914:	mov	w0, #0x7                   	// #7
   56918:	cmp	x6, x1
   5691c:	csel	w22, w22, w0, ne  // ne = any
   56920:	cset	w18, eq  // eq = none
   56924:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   56928:	ldr	x0, [sp, #240]
   5692c:	cbz	x0, 5685c <aarch64_get_opcode@@Base+0x5df4>
   56930:	mov	w22, #0x8                   	// #8
   56934:	mov	w18, #0x1                   	// #1
   56938:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   5693c:	cmp	x27, #0x2
   56940:	mov	w22, #0xc                   	// #12
   56944:	b.ne	558e4 <aarch64_get_opcode@@Base+0x4e7c>  // b.any
   56948:	cmp	w13, #0x0
   5694c:	mov	w0, #0xb                   	// #11
   56950:	cset	w18, ne  // ne = any
   56954:	csel	w22, w22, w0, eq  // eq = none
   56958:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   5695c:	ldr	w0, [sp, #136]
   56960:	cbnz	w0, 569e4 <aarch64_get_opcode@@Base+0x5f7c>
   56964:	ldr	w0, [sp, #172]
   56968:	cbnz	w0, 57298 <aarch64_get_opcode@@Base+0x6830>
   5696c:	ldr	x1, [sp, #160]
   56970:	mov	w22, #0x9                   	// #9
   56974:	mov	w0, #0xc                   	// #12
   56978:	cmp	x8, x1
   5697c:	csel	w22, w22, w0, eq  // eq = none
   56980:	cset	w18, eq  // eq = none
   56984:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   56988:	ldr	x0, [sp, #160]
   5698c:	cmp	x0, #0xd
   56990:	b.eq	573ac <aarch64_get_opcode@@Base+0x6944>  // b.none
   56994:	cmp	x0, #0xf
   56998:	b.eq	57298 <aarch64_get_opcode@@Base+0x6830>  // b.none
   5699c:	ldr	x1, [sp, #152]
   569a0:	mov	w22, #0x5                   	// #5
   569a4:	mov	w0, #0xc                   	// #12
   569a8:	cmp	x1, #0x6
   569ac:	csel	w22, w22, w0, hi  // hi = pmore
   569b0:	cset	w18, hi  // hi = pmore
   569b4:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   569b8:	cmp	x8, #0xd
   569bc:	b.eq	569e4 <aarch64_get_opcode@@Base+0x5f7c>  // b.none
   569c0:	cmp	x8, #0xf
   569c4:	mov	w22, #0xc                   	// #12
   569c8:	mov	w0, #0x3                   	// #3
   569cc:	cset	w18, eq  // eq = none
   569d0:	csel	w22, w22, w0, ne  // ne = any
   569d4:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   569d8:	ldr	x1, [sp, #192]
   569dc:	cmp	x1, #0xd
   569e0:	b.ne	56608 <aarch64_get_opcode@@Base+0x5ba0>  // b.any
   569e4:	mov	w22, #0x2                   	// #2
   569e8:	mov	w18, #0x1                   	// #1
   569ec:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   569f0:	cmp	x8, #0xd
   569f4:	mov	w22, #0xc                   	// #12
   569f8:	mov	w0, #0x2                   	// #2
   569fc:	cset	w18, eq  // eq = none
   56a00:	csel	w22, w22, w0, ne  // ne = any
   56a04:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   56a08:	ldr	x0, [sp, #232]
   56a0c:	mov	w22, #0xc                   	// #12
   56a10:	cbnz	x0, 558e4 <aarch64_get_opcode@@Base+0x4e7c>
   56a14:	ldr	x0, [sp, #256]
   56a18:	cbz	x0, 558e4 <aarch64_get_opcode@@Base+0x4e7c>
   56a1c:	mov	w18, #0x1                   	// #1
   56a20:	mov	w22, w18
   56a24:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   56a28:	ldr	x0, [sp, #160]
   56a2c:	cmp	x0, #0xf
   56a30:	b.eq	57298 <aarch64_get_opcode@@Base+0x6830>  // b.none
   56a34:	ldr	x1, [sp, #240]
   56a38:	mov	w22, #0x8                   	// #8
   56a3c:	mov	w0, #0xc                   	// #12
   56a40:	cmp	x1, #0x0
   56a44:	mov	w18, w1
   56a48:	csel	w22, w22, w0, ne  // ne = any
   56a4c:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   56a50:	ldr	x0, [sp, #112]
   56a54:	mov	w22, #0xc                   	// #12
   56a58:	cbz	x0, 558e4 <aarch64_get_opcode@@Base+0x4e7c>
   56a5c:	cmp	w13, #0x0
   56a60:	mov	w0, #0xa                   	// #10
   56a64:	cset	w18, ne  // ne = any
   56a68:	csel	w22, w22, w0, eq  // eq = none
   56a6c:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   56a70:	ldr	x0, [sp, #152]
   56a74:	mov	w22, #0xc                   	// #12
   56a78:	cmp	x5, x0
   56a7c:	b.ne	558e4 <aarch64_get_opcode@@Base+0x4e7c>  // b.any
   56a80:	cmp	x27, #0x2
   56a84:	mov	w0, #0xb                   	// #11
   56a88:	cset	w18, eq  // eq = none
   56a8c:	csel	w22, w22, w0, ne  // ne = any
   56a90:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   56a94:	ldr	x0, [sp, #152]
   56a98:	mov	w22, #0xc                   	// #12
   56a9c:	cmp	x5, x0
   56aa0:	b.ne	558e4 <aarch64_get_opcode@@Base+0x4e7c>  // b.any
   56aa4:	ldr	x1, [sp, #112]
   56aa8:	mov	w0, #0xa                   	// #10
   56aac:	cmp	x1, #0x0
   56ab0:	mov	w18, w1
   56ab4:	csel	w22, w22, w0, eq  // eq = none
   56ab8:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   56abc:	cmp	x7, #0x6
   56ac0:	mov	w22, #0x2                   	// #2
   56ac4:	mov	w0, #0xc                   	// #12
   56ac8:	cset	w18, eq  // eq = none
   56acc:	csel	w22, w22, w0, eq  // eq = none
   56ad0:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   56ad4:	ldr	x1, [sp, #176]
   56ad8:	mov	w22, #0xc                   	// #12
   56adc:	mov	w0, #0x2                   	// #2
   56ae0:	cmp	x1, #0x6
   56ae4:	csel	w22, w22, w0, ne  // ne = any
   56ae8:	cset	w18, eq  // eq = none
   56aec:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   56af0:	cmp	x8, #0xd
   56af4:	b.eq	569e4 <aarch64_get_opcode@@Base+0x5f7c>  // b.none
   56af8:	cmp	x8, #0xf
   56afc:	b.eq	57298 <aarch64_get_opcode@@Base+0x6830>  // b.none
   56b00:	ldr	x0, [sp, #248]
   56b04:	mov	w22, #0xc                   	// #12
   56b08:	cbz	x0, 558e4 <aarch64_get_opcode@@Base+0x4e7c>
   56b0c:	ldr	x1, [sp, #152]
   56b10:	mov	w0, #0xa                   	// #10
   56b14:	cmp	x6, x1
   56b18:	csel	w22, w22, w0, ne  // ne = any
   56b1c:	cset	w18, eq  // eq = none
   56b20:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   56b24:	ldr	x0, [sp, #248]
   56b28:	mov	w22, #0xc                   	// #12
   56b2c:	cbnz	x0, 56a5c <aarch64_get_opcode@@Base+0x5ff4>
   56b30:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   56b34:	mov	x0, x21
   56b38:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56b3c:	add	x1, x1, #0x488
   56b40:	blr	x20
   56b44:	b	55d64 <aarch64_get_opcode@@Base+0x52fc>
   56b48:	mov	x0, x21
   56b4c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56b50:	add	x1, x1, #0x4e8
   56b54:	blr	x20
   56b58:	b	55d64 <aarch64_get_opcode@@Base+0x52fc>
   56b5c:	adrp	x2, 92000 <aarch64_operands@@Base+0x2bd0>
   56b60:	add	x2, x2, #0xc60
   56b64:	ldr	x4, [sp, #512]
   56b68:	add	x2, x2, #0x800
   56b6c:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   56b70:	add	x1, x1, #0xe48
   56b74:	ldr	x2, [x2, x4, lsl #3]
   56b78:	blr	x3
   56b7c:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56b80:	ldr	x1, [sp, #304]
   56b84:	cmp	x1, #0x4
   56b88:	b.eq	56010 <aarch64_get_opcode@@Base+0x55a8>  // b.none
   56b8c:	b.hi	57224 <aarch64_get_opcode@@Base+0x67bc>  // b.pmore
   56b90:	cmp	x1, #0x2
   56b94:	b.eq	57354 <aarch64_get_opcode@@Base+0x68ec>  // b.none
   56b98:	cmp	x1, #0x3
   56b9c:	b.eq	56048 <aarch64_get_opcode@@Base+0x55e0>  // b.none
   56ba0:	cmp	x1, #0x1
   56ba4:	b.ne	56c40 <aarch64_get_opcode@@Base+0x61d8>  // b.any
   56ba8:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56bac:	add	x1, x1, #0x2a8
   56bb0:	blr	x2
   56bb4:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56bb8:	mov	x0, x21
   56bbc:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56bc0:	add	x1, x1, #0x440
   56bc4:	blr	x20
   56bc8:	b	55d64 <aarch64_get_opcode@@Base+0x52fc>
   56bcc:	ldr	x3, [sp, #328]
   56bd0:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56bd4:	add	x1, x1, #0x268
   56bd8:	blr	x6
   56bdc:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56be0:	ldr	x4, [sp, #104]
   56be4:	ldr	x2, [sp, #160]
   56be8:	b	56258 <aarch64_get_opcode@@Base+0x57f0>
   56bec:	ldr	x1, [sp, #248]
   56bf0:	cbnz	x1, 572b4 <aarch64_get_opcode@@Base+0x684c>
   56bf4:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56bf8:	add	x1, x1, #0x2e0
   56bfc:	blr	x2
   56c00:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56c04:	adrp	x1, 6e000 <fields@@Base+0xaf60>
   56c08:	add	x1, x1, #0x340
   56c0c:	blr	x2
   56c10:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56c14:	and	x0, x19, #0x300000
   56c18:	cmp	x0, #0x300, lsl #12
   56c1c:	b.ne	55e40 <aarch64_get_opcode@@Base+0x53d8>  // b.any
   56c20:	b	55dec <aarch64_get_opcode@@Base+0x5384>
   56c24:	ldr	x1, [sp, #464]
   56c28:	cmp	x1, #0x2
   56c2c:	b.eq	56ba8 <aarch64_get_opcode@@Base+0x6140>  // b.none
   56c30:	cmp	x1, #0x3
   56c34:	b.eq	56048 <aarch64_get_opcode@@Base+0x55e0>  // b.none
   56c38:	cmp	x1, #0x1
   56c3c:	b.eq	57354 <aarch64_get_opcode@@Base+0x68ec>  // b.none
   56c40:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56c44:	add	x1, x1, #0x2a0
   56c48:	blr	x2
   56c4c:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56c50:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56c54:	add	x1, x1, #0x88
   56c58:	b	56660 <aarch64_get_opcode@@Base+0x5bf8>
   56c5c:	add	x1, x1, #0xe8
   56c60:	b	567a8 <aarch64_get_opcode@@Base+0x5d40>
   56c64:	mov	x0, x21
   56c68:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56c6c:	add	x1, x1, #0x6e0
   56c70:	blr	x20
   56c74:	b	55d6c <aarch64_get_opcode@@Base+0x5304>
   56c78:	mov	x0, x21
   56c7c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56c80:	add	x1, x1, #0x6b8
   56c84:	blr	x20
   56c88:	b	55d6c <aarch64_get_opcode@@Base+0x5304>
   56c8c:	mov	x0, x21
   56c90:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56c94:	add	x1, x1, #0x698
   56c98:	blr	x20
   56c9c:	b	55d6c <aarch64_get_opcode@@Base+0x5304>
   56ca0:	mov	x0, x21
   56ca4:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56ca8:	add	x1, x1, #0x688
   56cac:	blr	x20
   56cb0:	b	55d6c <aarch64_get_opcode@@Base+0x5304>
   56cb4:	mov	x0, x21
   56cb8:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56cbc:	add	x1, x1, #0x678
   56cc0:	blr	x20
   56cc4:	b	55d6c <aarch64_get_opcode@@Base+0x5304>
   56cc8:	mov	x0, x21
   56ccc:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56cd0:	add	x1, x1, #0x658
   56cd4:	blr	x20
   56cd8:	b	55d6c <aarch64_get_opcode@@Base+0x5304>
   56cdc:	mov	x0, x21
   56ce0:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56ce4:	add	x1, x1, #0x638
   56ce8:	blr	x20
   56cec:	b	55d6c <aarch64_get_opcode@@Base+0x5304>
   56cf0:	mov	x0, x21
   56cf4:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56cf8:	add	x1, x1, #0x620
   56cfc:	blr	x20
   56d00:	b	55d6c <aarch64_get_opcode@@Base+0x5304>
   56d04:	mov	x0, x21
   56d08:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56d0c:	add	x1, x1, #0x608
   56d10:	blr	x20
   56d14:	b	55d6c <aarch64_get_opcode@@Base+0x5304>
   56d18:	mov	x0, x21
   56d1c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56d20:	add	x1, x1, #0x5f0
   56d24:	blr	x20
   56d28:	b	55d6c <aarch64_get_opcode@@Base+0x5304>
   56d2c:	mov	x0, x21
   56d30:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56d34:	add	x1, x1, #0x5e0
   56d38:	blr	x20
   56d3c:	b	55d6c <aarch64_get_opcode@@Base+0x5304>
   56d40:	mov	x0, x21
   56d44:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56d48:	add	x1, x1, #0x5c8
   56d4c:	blr	x20
   56d50:	b	55d6c <aarch64_get_opcode@@Base+0x5304>
   56d54:	mov	x0, x21
   56d58:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56d5c:	add	x1, x1, #0x5b8
   56d60:	blr	x20
   56d64:	b	55d6c <aarch64_get_opcode@@Base+0x5304>
   56d68:	mov	x0, x21
   56d6c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56d70:	add	x1, x1, #0x3d8
   56d74:	blr	x20
   56d78:	b	55d6c <aarch64_get_opcode@@Base+0x5304>
   56d7c:	mov	x0, x21
   56d80:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56d84:	add	x1, x1, #0x5a8
   56d88:	blr	x20
   56d8c:	b	55d6c <aarch64_get_opcode@@Base+0x5304>
   56d90:	mov	x0, x21
   56d94:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56d98:	add	x1, x1, #0x728
   56d9c:	blr	x20
   56da0:	b	55d6c <aarch64_get_opcode@@Base+0x5304>
   56da4:	mov	x0, x21
   56da8:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56dac:	add	x1, x1, #0x708
   56db0:	blr	x20
   56db4:	b	55d6c <aarch64_get_opcode@@Base+0x5304>
   56db8:	ldr	x0, [sp, #600]
   56dbc:	cmp	x0, #0x1
   56dc0:	b.eq	56dcc <aarch64_get_opcode@@Base+0x6364>  // b.none
   56dc4:	add	x20, x27, #0x1
   56dc8:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56dcc:	mov	x0, x23
   56dd0:	adrp	x1, 6a000 <fields@@Base+0x6f60>
   56dd4:	add	x20, x27, #0x1
   56dd8:	add	x1, x1, #0x2a0
   56ddc:	blr	x28
   56de0:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56de4:	ldr	x2, [sp, #600]
   56de8:	mov	x0, x23
   56dec:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56df0:	add	x20, x27, #0x1
   56df4:	add	x1, x1, #0x1a8
   56df8:	blr	x28
   56dfc:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56e00:	ldr	x0, [sp, #600]
   56e04:	cmp	x0, #0x2
   56e08:	b.eq	57474 <aarch64_get_opcode@@Base+0x6a0c>  // b.none
   56e0c:	b.hi	57300 <aarch64_get_opcode@@Base+0x6898>  // b.pmore
   56e10:	cbz	x0, 5748c <aarch64_get_opcode@@Base+0x6a24>
   56e14:	mov	x0, x23
   56e18:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   56e1c:	add	x20, x27, #0x1
   56e20:	add	x1, x1, #0x770
   56e24:	blr	x28
   56e28:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56e2c:	ldr	w1, [x21, #24]
   56e30:	ldp	x4, x0, [x26]
   56e34:	sub	w1, w1, #0x1
   56e38:	cmp	w1, #0xc0
   56e3c:	ldr	x2, [sp, #600]
   56e40:	b.hi	56dc4 <aarch64_get_opcode@@Base+0x635c>  // b.pmore
   56e44:	adrp	x3, 68000 <fields@@Base+0x4f60>
   56e48:	add	x3, x3, #0x714
   56e4c:	ldrh	w1, [x3, w1, uxtw #1]
   56e50:	adr	x3, 56e5c <aarch64_get_opcode@@Base+0x63f4>
   56e54:	add	x1, x3, w1, sxth #2
   56e58:	br	x1
   56e5c:	cmp	x2, #0x3
   56e60:	b.hi	577a4 <aarch64_get_opcode@@Base+0x6d3c>  // b.pmore
   56e64:	adrp	x3, 92000 <aarch64_operands@@Base+0x2bd0>
   56e68:	add	x3, x3, #0xc60
   56e6c:	add	x3, x3, #0x840
   56e70:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   56e74:	add	x20, x27, #0x1
   56e78:	add	x1, x1, #0xe48
   56e7c:	ldr	x2, [x3, x2, lsl #3]
   56e80:	blr	x4
   56e84:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56e88:	adrp	x0, fd000 <aarch64_opcode_table@@Base+0x55a20>
   56e8c:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   56e90:	ldr	x3, [sp, #600]
   56e94:	add	x1, x1, #0xe48
   56e98:	ldr	w2, [x0, #1616]
   56e9c:	mov	x0, x23
   56ea0:	add	x2, x2, x2, lsl #3
   56ea4:	add	x2, x3, x2, lsl #1
   56ea8:	add	x20, x27, #0x1
   56eac:	ldr	x3, [sp, #288]
   56eb0:	add	x2, x2, #0x2
   56eb4:	ldr	x2, [x3, x2, lsl #3]
   56eb8:	blr	x28
   56ebc:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56ec0:	ldrsw	x3, [sp, #592]
   56ec4:	ldp	x2, x0, [x26]
   56ec8:	cmp	x3, #0x1
   56ecc:	ldr	x1, [sp, #600]
   56ed0:	b.eq	5743c <aarch64_get_opcode@@Base+0x69d4>  // b.none
   56ed4:	cmp	x3, #0x2
   56ed8:	b.ne	56dc4 <aarch64_get_opcode@@Base+0x635c>  // b.any
   56edc:	cmp	x1, #0x2
   56ee0:	b.eq	57720 <aarch64_get_opcode@@Base+0x6cb8>  // b.none
   56ee4:	b.hi	574c4 <aarch64_get_opcode@@Base+0x6a5c>  // b.pmore
   56ee8:	cbz	x1, 576d4 <aarch64_get_opcode@@Base+0x6c6c>
   56eec:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56ef0:	add	x20, x27, #0x1
   56ef4:	add	x1, x1, #0x3a0
   56ef8:	blr	x2
   56efc:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56f00:	ldr	w0, [x21, #24]
   56f04:	sub	w2, w0, #0x77
   56f08:	sub	w1, w0, #0x86
   56f0c:	cmp	w2, #0x1
   56f10:	sub	w4, w0, #0x7e
   56f14:	cset	w2, ls  // ls = plast
   56f18:	cmp	w0, #0x80
   56f1c:	cset	w3, eq  // eq = none
   56f20:	cmp	w0, #0x84
   56f24:	ccmp	w1, #0x3, #0x0, ne  // ne = any
   56f28:	cset	w1, ls  // ls = plast
   56f2c:	cmp	w2, #0x0
   56f30:	ccmp	w4, #0x2, #0x0, eq  // eq = none
   56f34:	cset	w4, ls  // ls = plast
   56f38:	orr	w1, w1, w4
   56f3c:	cbz	w1, 576e8 <aarch64_get_opcode@@Base+0x6c80>
   56f40:	cmp	w2, #0x0
   56f44:	ccmp	w3, #0x0, #0x0, eq  // eq = none
   56f48:	ldp	x20, x3, [x26]
   56f4c:	b.eq	5741c <aarch64_get_opcode@@Base+0x69b4>  // b.none
   56f50:	cmp	w0, #0x84
   56f54:	b.eq	57530 <aarch64_get_opcode@@Base+0x6ac8>  // b.none
   56f58:	ldr	w0, [sp, #552]
   56f5c:	cbz	w0, 5751c <aarch64_get_opcode@@Base+0x6ab4>
   56f60:	ldr	w0, [sp, #404]
   56f64:	sub	w2, w0, #0x20
   56f68:	mov	x0, x3
   56f6c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   56f70:	add	x1, x1, #0x3f0
   56f74:	blr	x20
   56f78:	add	x20, x27, #0x1
   56f7c:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56f80:	ldr	x0, [sp, #320]
   56f84:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   56f88:	ldr	x3, [sp, #600]
   56f8c:	add	x2, x0, #0xdf0
   56f90:	add	x1, x1, #0xe48
   56f94:	mov	x0, x23
   56f98:	add	x20, x27, #0x1
   56f9c:	ldr	x2, [x2, x3, lsl #3]
   56fa0:	blr	x28
   56fa4:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56fa8:	ldr	x3, [sp, #600]
   56fac:	cmp	x3, #0xd
   56fb0:	b.eq	56fe4 <aarch64_get_opcode@@Base+0x657c>  // b.none
   56fb4:	cmp	x3, #0xf
   56fb8:	b.eq	5745c <aarch64_get_opcode@@Base+0x69f4>  // b.none
   56fbc:	adrp	x2, fd000 <aarch64_opcode_table@@Base+0x55a20>
   56fc0:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   56fc4:	mov	x0, x23
   56fc8:	add	x1, x1, #0xe48
   56fcc:	ldr	w2, [x2, #1616]
   56fd0:	b	56ea0 <aarch64_get_opcode@@Base+0x6438>
   56fd4:	ldr	x3, [sp, #600]
   56fd8:	and	x0, x3, #0xfffffffffffffffd
   56fdc:	cmp	x0, #0xd
   56fe0:	b.ne	56fbc <aarch64_get_opcode@@Base+0x6554>  // b.any
   56fe4:	mov	w0, #0x1                   	// #1
   56fe8:	add	x20, x27, #0x1
   56fec:	str	w0, [sp, #172]
   56ff0:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   56ff4:	ldr	x3, [sp, #600]
   56ff8:	adrp	x0, fd000 <aarch64_opcode_table@@Base+0x55a20>
   56ffc:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   57000:	add	x1, x1, #0xe48
   57004:	ldr	w2, [x0, #1616]
   57008:	mov	x0, x23
   5700c:	lsl	w3, w3, #1
   57010:	b	56ea0 <aarch64_get_opcode@@Base+0x6438>
   57014:	ldr	x0, [sp, #600]
   57018:	mov	x2, #0x40                  	// #64
   5701c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   57020:	add	x20, x27, #0x1
   57024:	sub	x2, x2, x0
   57028:	add	x1, x1, #0x298
   5702c:	mov	x0, x23
   57030:	blr	x28
   57034:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   57038:	ldr	w0, [x21, #24]
   5703c:	cmp	w0, #0x34
   57040:	b.eq	574d4 <aarch64_get_opcode@@Base+0x6a6c>  // b.none
   57044:	b.hi	57320 <aarch64_get_opcode@@Base+0x68b8>  // b.pmore
   57048:	cmp	w0, #0x2e
   5704c:	ldr	x2, [sp, #120]
   57050:	b.eq	57064 <aarch64_get_opcode@@Base+0x65fc>  // b.none
   57054:	cmp	w0, #0x2f
   57058:	ldr	x0, [sp, #216]
   5705c:	ldr	x1, [sp, #456]
   57060:	csel	x2, x0, x1, ne  // ne = any
   57064:	mov	x0, x23
   57068:	adrp	x1, 69000 <fields@@Base+0x5f60>
   5706c:	add	x20, x27, #0x1
   57070:	add	x1, x1, #0x298
   57074:	blr	x28
   57078:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   5707c:	adrp	x0, fd000 <aarch64_opcode_table@@Base+0x55a20>
   57080:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   57084:	ldr	x3, [sp, #600]
   57088:	add	x1, x1, #0xe48
   5708c:	ldr	w2, [x0, #1616]
   57090:	mov	x0, x23
   57094:	lsl	w3, w3, #1
   57098:	add	x2, x2, x2, lsl #3
   5709c:	orr	w3, w3, #0x1
   570a0:	b	56ea4 <aarch64_get_opcode@@Base+0x643c>
   570a4:	ldr	x2, [sp, #600]
   570a8:	tbz	w2, #3, 57404 <aarch64_get_opcode@@Base+0x699c>
   570ac:	mov	x0, x23
   570b0:	adrp	x1, 68000 <fields@@Base+0x4f60>
   570b4:	add	x20, x27, #0x1
   570b8:	add	x1, x1, #0xe38
   570bc:	blr	x28
   570c0:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   570c4:	ldr	x0, [sp, #600]
   570c8:	cmp	x0, #0x1
   570cc:	b.ne	56dc4 <aarch64_get_opcode@@Base+0x635c>  // b.any
   570d0:	mov	x0, x23
   570d4:	adrp	x1, 74000 <fields@@Base+0x10f60>
   570d8:	add	x20, x27, #0x1
   570dc:	add	x1, x1, #0xc40
   570e0:	blr	x28
   570e4:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   570e8:	ldr	x2, [sp, #600]
   570ec:	mov	x0, x23
   570f0:	adrp	x1, 69000 <fields@@Base+0x5f60>
   570f4:	add	x20, x27, #0x1
   570f8:	add	x1, x1, #0x410
   570fc:	blr	x28
   57100:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   57104:	ldr	x0, [sp, #320]
   57108:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   5710c:	ldr	x2, [sp, #600]
   57110:	add	x3, x0, #0xdf0
   57114:	add	x1, x1, #0xe48
   57118:	mov	x0, x23
   5711c:	eor	x2, x2, #0x1
   57120:	str	x2, [sp, #600]
   57124:	add	x20, x27, #0x1
   57128:	ldr	x2, [x3, x2, lsl #3]
   5712c:	blr	x28
   57130:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   57134:	cbz	x2, 571f8 <aarch64_get_opcode@@Base+0x6790>
   57138:	cmp	x2, #0x1
   5713c:	b.ne	56dc4 <aarch64_get_opcode@@Base+0x635c>  // b.any
   57140:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   57144:	add	x20, x27, #0x1
   57148:	add	x1, x1, #0xcb0
   5714c:	blr	x4
   57150:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   57154:	cmp	x2, #0xb
   57158:	b.hi	56dc4 <aarch64_get_opcode@@Base+0x635c>  // b.pmore
   5715c:	mov	x1, #0x1                   	// #1
   57160:	mov	x3, #0xaa                  	// #170
   57164:	lsl	x2, x1, x2
   57168:	tst	x2, x3
   5716c:	b.ne	571f8 <aarch64_get_opcode@@Base+0x6790>  // b.any
   57170:	mov	x1, #0xa00                 	// #2560
   57174:	tst	x2, x1
   57178:	b.ne	57140 <aarch64_get_opcode@@Base+0x66d8>  // b.any
   5717c:	add	x20, x27, #0x1
   57180:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   57184:	cmp	x2, #0xd
   57188:	b.hi	56dc4 <aarch64_get_opcode@@Base+0x635c>  // b.pmore
   5718c:	mov	x1, #0x1                   	// #1
   57190:	mov	x3, #0x3055                	// #12373
   57194:	lsl	x2, x1, x2
   57198:	tst	x2, x3
   5719c:	b.ne	571f8 <aarch64_get_opcode@@Base+0x6790>  // b.any
   571a0:	mov	x1, #0x500                 	// #1280
   571a4:	tst	x2, x1
   571a8:	b.ne	57140 <aarch64_get_opcode@@Base+0x66d8>  // b.any
   571ac:	add	x20, x27, #0x1
   571b0:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   571b4:	cmp	x2, #0xf
   571b8:	b.hi	56dc4 <aarch64_get_opcode@@Base+0x635c>  // b.pmore
   571bc:	mov	x1, #0x1                   	// #1
   571c0:	lsl	x2, x1, x2
   571c4:	tst	x2, #0xff00
   571c8:	b.eq	571e0 <aarch64_get_opcode@@Base+0x6778>  // b.none
   571cc:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   571d0:	add	x20, x27, #0x1
   571d4:	add	x1, x1, #0x758
   571d8:	blr	x4
   571dc:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   571e0:	mov	x1, #0xaa                  	// #170
   571e4:	tst	x2, x1
   571e8:	b.ne	57140 <aarch64_get_opcode@@Base+0x66d8>  // b.any
   571ec:	mov	x1, #0x11                  	// #17
   571f0:	tst	x2, x1
   571f4:	b.eq	56dc4 <aarch64_get_opcode@@Base+0x635c>  // b.none
   571f8:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   571fc:	add	x20, x27, #0x1
   57200:	add	x1, x1, #0xb88
   57204:	blr	x4
   57208:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   5720c:	cmp	x1, #0x5
   57210:	b.ne	55ca0 <aarch64_get_opcode@@Base+0x5238>  // b.any
   57214:	adrp	x1, 69000 <fields@@Base+0x5f60>
   57218:	add	x1, x1, #0x2d8
   5721c:	blr	x2
   57220:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   57224:	cmp	x1, #0x6
   57228:	b.eq	5739c <aarch64_get_opcode@@Base+0x6934>  // b.none
   5722c:	cmp	x1, #0x7
   57230:	b.eq	57214 <aarch64_get_opcode@@Base+0x67ac>  // b.none
   57234:	cmp	x1, #0x5
   57238:	b.ne	56c40 <aarch64_get_opcode@@Base+0x61d8>  // b.any
   5723c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   57240:	add	x1, x1, #0x2c8
   57244:	blr	x2
   57248:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   5724c:	mov	x0, #0x1001                	// #4097
   57250:	and	x0, x19, x0
   57254:	cmp	x0, #0x1
   57258:	b.ne	55e40 <aarch64_get_opcode@@Base+0x53d8>  // b.any
   5725c:	b	55dc4 <aarch64_get_opcode@@Base+0x535c>
   57260:	stp	xzr, xzr, [x2, #8]
   57264:	str	xzr, [x0, #16]
   57268:	mov	w0, #0x1                   	// #1
   5726c:	str	xzr, [x2, #24]
   57270:	b	55d1c <aarch64_get_opcode@@Base+0x52b4>
   57274:	adrp	x2, 92000 <aarch64_operands@@Base+0x2bd0>
   57278:	add	x2, x2, #0xc60
   5727c:	ldr	x4, [sp, #528]
   57280:	add	x2, x2, #0x800
   57284:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   57288:	add	x1, x1, #0xe48
   5728c:	ldr	x2, [x2, x4, lsl #3]
   57290:	blr	x3
   57294:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   57298:	mov	w22, #0x3                   	// #3
   5729c:	mov	w18, #0x1                   	// #1
   572a0:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   572a4:	and	x0, x0, #0x8
   572a8:	b	55f40 <aarch64_get_opcode@@Base+0x54d8>
   572ac:	and	x0, x0, #0x2
   572b0:	b	55f40 <aarch64_get_opcode@@Base+0x54d8>
   572b4:	adrp	x1, 69000 <fields@@Base+0x5f60>
   572b8:	add	x1, x1, #0x2e8
   572bc:	blr	x2
   572c0:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   572c4:	mov	x0, x21
   572c8:	adrp	x1, 69000 <fields@@Base+0x5f60>
   572cc:	add	x1, x1, #0x478
   572d0:	blr	x20
   572d4:	b	55d64 <aarch64_get_opcode@@Base+0x52fc>
   572d8:	mov	x0, x21
   572dc:	adrp	x1, 69000 <fields@@Base+0x5f60>
   572e0:	add	x1, x1, #0x4c8
   572e4:	blr	x20
   572e8:	b	55d64 <aarch64_get_opcode@@Base+0x52fc>
   572ec:	mov	x0, x21
   572f0:	adrp	x1, 69000 <fields@@Base+0x5f60>
   572f4:	add	x1, x1, #0x540
   572f8:	blr	x20
   572fc:	b	55d64 <aarch64_get_opcode@@Base+0x52fc>
   57300:	cmp	x0, #0x3
   57304:	b.ne	56dc4 <aarch64_get_opcode@@Base+0x635c>  // b.any
   57308:	mov	x0, x23
   5730c:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   57310:	add	x20, x27, #0x1
   57314:	add	x1, x1, #0x758
   57318:	blr	x28
   5731c:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   57320:	cmp	w0, #0x35
   57324:	ldr	x0, [sp, #216]
   57328:	ldr	x1, [sp, #456]
   5732c:	csel	x2, x0, x1, ne  // ne = any
   57330:	b	57064 <aarch64_get_opcode@@Base+0x65fc>
   57334:	adrp	x1, 6b000 <fields@@Base+0x7f60>
   57338:	add	x1, x1, #0xa98
   5733c:	blr	x2
   57340:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   57344:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   57348:	add	x1, x1, #0x20
   5734c:	blr	x2
   57350:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   57354:	adrp	x1, 69000 <fields@@Base+0x5f60>
   57358:	add	x1, x1, #0x2b0
   5735c:	blr	x2
   57360:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   57364:	cbz	w0, 57380 <aarch64_get_opcode@@Base+0x6918>
   57368:	mov	x0, x3
   5736c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   57370:	ldp	x2, x3, [sp, #440]
   57374:	add	x1, x1, #0x98
   57378:	blr	x5
   5737c:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   57380:	ldr	x2, [sp, #112]
   57384:	mov	x0, x3
   57388:	adrp	x1, 69000 <fields@@Base+0x5f60>
   5738c:	add	x1, x1, #0xa8
   57390:	mov	x3, x2
   57394:	blr	x5
   57398:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   5739c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   573a0:	add	x1, x1, #0x2d0
   573a4:	blr	x2
   573a8:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   573ac:	ldr	x0, [sp, #144]
   573b0:	cbz	x0, 5699c <aarch64_get_opcode@@Base+0x5f34>
   573b4:	mov	w22, #0x6                   	// #6
   573b8:	mov	w18, #0x1                   	// #1
   573bc:	b	558e4 <aarch64_get_opcode@@Base+0x4e7c>
   573c0:	ldr	x0, [sp, #144]
   573c4:	cbz	x0, 568b4 <aarch64_get_opcode@@Base+0x5e4c>
   573c8:	b	573b4 <aarch64_get_opcode@@Base+0x694c>
   573cc:	mov	x0, x3
   573d0:	mov	w2, w25
   573d4:	adrp	x1, 69000 <fields@@Base+0x5f60>
   573d8:	mov	w4, #0x1                   	// #1
   573dc:	add	x1, x1, #0xc8
   573e0:	mov	w3, #0xf                   	// #15
   573e4:	blr	x5
   573e8:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   573ec:	mov	w1, #0x2                   	// #2
   573f0:	b	55f60 <aarch64_get_opcode@@Base+0x54f8>
   573f4:	mov	x0, #0x1                   	// #1
   573f8:	str	x0, [x1, #24]
   573fc:	mov	w0, #0x1                   	// #1
   57400:	b	55d1c <aarch64_get_opcode@@Base+0x52b4>
   57404:	mov	x0, x23
   57408:	adrp	x1, 68000 <fields@@Base+0x4f60>
   5740c:	add	x20, x27, #0x1
   57410:	add	x1, x1, #0xe50
   57414:	blr	x28
   57418:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   5741c:	subs	w1, w0, #0x84
   57420:	and	w1, w1, #0xfffffffb
   57424:	b.eq	574fc <aarch64_get_opcode@@Base+0x6a94>  // b.none
   57428:	ldr	w0, [sp, #552]
   5742c:	cbz	w0, 574dc <aarch64_get_opcode@@Base+0x6a74>
   57430:	ldr	w2, [sp, #556]
   57434:	cbnz	w1, 56f68 <aarch64_get_opcode@@Base+0x6500>
   57438:	b	56f60 <aarch64_get_opcode@@Base+0x64f8>
   5743c:	cbz	x1, 56eec <aarch64_get_opcode@@Base+0x6484>
   57440:	cmp	x1, #0x1
   57444:	b.ne	56dc4 <aarch64_get_opcode@@Base+0x635c>  // b.any
   57448:	adrp	x1, 69000 <fields@@Base+0x5f60>
   5744c:	add	x20, x27, #0x1
   57450:	add	x1, x1, #0x3a8
   57454:	blr	x2
   57458:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   5745c:	mov	x0, x23
   57460:	adrp	x1, 69000 <fields@@Base+0x5f60>
   57464:	add	x20, x27, #0x1
   57468:	add	x1, x1, #0x350
   5746c:	blr	x28
   57470:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   57474:	mov	x0, x23
   57478:	adrp	x1, 5b000 <floatformat_from_double@@Base+0x3e8>
   5747c:	add	x20, x27, #0x1
   57480:	add	x1, x1, #0x740
   57484:	blr	x28
   57488:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   5748c:	mov	x0, x23
   57490:	adrp	x1, 69000 <fields@@Base+0x5f60>
   57494:	add	x20, x27, #0x1
   57498:	add	x1, x1, #0x5a0
   5749c:	blr	x28
   574a0:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   574a4:	mov	x0, #0x4                   	// #4
   574a8:	str	x0, [x1, #24]
   574ac:	mov	w0, #0x1                   	// #1
   574b0:	b	55d1c <aarch64_get_opcode@@Base+0x52b4>
   574b4:	mov	x0, #0x3                   	// #3
   574b8:	str	x0, [x1, #24]
   574bc:	mov	w0, #0x1                   	// #1
   574c0:	b	55d1c <aarch64_get_opcode@@Base+0x52b4>
   574c4:	cmp	x1, #0x3
   574c8:	b.eq	57448 <aarch64_get_opcode@@Base+0x69e0>  // b.none
   574cc:	add	x20, x27, #0x1
   574d0:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   574d4:	ldr	x2, [sp, #120]
   574d8:	b	57064 <aarch64_get_opcode@@Base+0x65fc>
   574dc:	ldr	w0, [sp, #404]
   574e0:	ldr	w2, [sp, #488]
   574e4:	cbz	w2, 57508 <aarch64_get_opcode@@Base+0x6aa0>
   574e8:	mov	w2, #0x20                  	// #32
   574ec:	sub	w2, w2, w0
   574f0:	cbnz	w1, 56f68 <aarch64_get_opcode@@Base+0x6500>
   574f4:	sub	w2, w0, #0x10
   574f8:	b	56f68 <aarch64_get_opcode@@Base+0x6500>
   574fc:	ldr	w0, [sp, #392]
   57500:	and	w0, w0, #0x1f
   57504:	b	574e0 <aarch64_get_opcode@@Base+0x6a78>
   57508:	tbz	w0, #3, 57548 <aarch64_get_opcode@@Base+0x6ae0>
   5750c:	cbz	w1, 57588 <aarch64_get_opcode@@Base+0x6b20>
   57510:	mov	w2, #0x10                  	// #16
   57514:	sub	w2, w2, w0
   57518:	b	56f68 <aarch64_get_opcode@@Base+0x6500>
   5751c:	ldr	w0, [sp, #488]
   57520:	cbz	w0, 5757c <aarch64_get_opcode@@Base+0x6b14>
   57524:	ldr	w0, [sp, #404]
   57528:	sub	w2, w0, #0x10
   5752c:	b	56f68 <aarch64_get_opcode@@Base+0x6500>
   57530:	ldr	w1, [sp, #488]
   57534:	ldr	w0, [sp, #392]
   57538:	and	w0, w0, #0x1f
   5753c:	cbnz	w1, 574f4 <aarch64_get_opcode@@Base+0x6a8c>
   57540:	ldr	x1, [sp, #392]
   57544:	tbnz	w1, #3, 57588 <aarch64_get_opcode@@Base+0x6b20>
   57548:	mov	x0, x3
   5754c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   57550:	add	x1, x1, #0x3b8
   57554:	str	x3, [sp, #200]
   57558:	blr	x20
   5755c:	ldr	x3, [sp, #200]
   57560:	adrp	x1, 69000 <fields@@Base+0x5f60>
   57564:	add	x1, x1, #0x3d8
   57568:	mov	x0, x3
   5756c:	blr	x20
   57570:	mov	w2, #0x0                   	// #0
   57574:	ldr	x3, [sp, #200]
   57578:	b	56f68 <aarch64_get_opcode@@Base+0x6500>
   5757c:	ldr	x0, [sp, #392]
   57580:	tbz	w0, #3, 57548 <aarch64_get_opcode@@Base+0x6ae0>
   57584:	ldr	w0, [sp, #404]
   57588:	sub	w2, w0, #0x8
   5758c:	b	56f68 <aarch64_get_opcode@@Base+0x6500>
   57590:	cmp	x2, #0x1
   57594:	b.eq	57140 <aarch64_get_opcode@@Base+0x66d8>  // b.none
   57598:	cmp	x2, #0x2
   5759c:	b.eq	571cc <aarch64_get_opcode@@Base+0x6764>  // b.none
   575a0:	cbz	x2, 571f8 <aarch64_get_opcode@@Base+0x6790>
   575a4:	add	x20, x27, #0x1
   575a8:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   575ac:	cmp	x2, #0x1
   575b0:	b.eq	571cc <aarch64_get_opcode@@Base+0x6764>  // b.none
   575b4:	cmp	x2, #0x2
   575b8:	b.eq	57140 <aarch64_get_opcode@@Base+0x66d8>  // b.none
   575bc:	add	x20, x27, #0x1
   575c0:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   575c4:	cbnz	x2, 57788 <aarch64_get_opcode@@Base+0x6d20>
   575c8:	adrp	x1, 69000 <fields@@Base+0x5f60>
   575cc:	add	x20, x27, #0x1
   575d0:	add	x1, x1, #0x390
   575d4:	blr	x4
   575d8:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   575dc:	cbz	x2, 57140 <aarch64_get_opcode@@Base+0x66d8>
   575e0:	cmp	x2, #0x1
   575e4:	b.eq	571f8 <aarch64_get_opcode@@Base+0x6790>  // b.none
   575e8:	add	x20, x27, #0x1
   575ec:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   575f0:	cmp	x2, #0x3
   575f4:	b.hi	57628 <aarch64_get_opcode@@Base+0x6bc0>  // b.pmore
   575f8:	cmp	x2, #0x1
   575fc:	b.hi	57140 <aarch64_get_opcode@@Base+0x66d8>  // b.pmore
   57600:	b.eq	571cc <aarch64_get_opcode@@Base+0x6764>  // b.none
   57604:	add	x20, x27, #0x1
   57608:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   5760c:	cmp	x2, #0x1
   57610:	b.eq	57140 <aarch64_get_opcode@@Base+0x66d8>  // b.none
   57614:	sub	x2, x2, #0x2
   57618:	cmp	x2, #0x1
   5761c:	b.ls	571f8 <aarch64_get_opcode@@Base+0x6790>  // b.plast
   57620:	add	x20, x27, #0x1
   57624:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   57628:	sub	x2, x2, #0x4
   5762c:	cmp	x2, #0x3
   57630:	b.ls	571f8 <aarch64_get_opcode@@Base+0x6790>  // b.plast
   57634:	add	x20, x27, #0x1
   57638:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   5763c:	cmp	x2, #0x1c
   57640:	b.eq	576ac <aarch64_get_opcode@@Base+0x6c44>  // b.none
   57644:	b.hi	57688 <aarch64_get_opcode@@Base+0x6c20>  // b.pmore
   57648:	cmp	x2, #0x1b
   5764c:	b.eq	56dc4 <aarch64_get_opcode@@Base+0x635c>  // b.none
   57650:	mov	x1, #0x1                   	// #1
   57654:	mov	x3, #0x1111                	// #4369
   57658:	movk	x3, #0x500, lsl #16
   5765c:	lsl	x2, x1, x2
   57660:	tst	x2, x3
   57664:	b.ne	577b8 <aarch64_get_opcode@@Base+0x6d50>  // b.any
   57668:	mov	x1, #0x110000              	// #1114112
   5766c:	tst	x2, x1
   57670:	b.eq	56dc4 <aarch64_get_opcode@@Base+0x635c>  // b.none
   57674:	adrp	x1, 69000 <fields@@Base+0x5f60>
   57678:	add	x20, x27, #0x1
   5767c:	add	x1, x1, #0x370
   57680:	blr	x4
   57684:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   57688:	cmp	x2, #0x1d
   5768c:	b.eq	576c0 <aarch64_get_opcode@@Base+0x6c58>  // b.none
   57690:	cmp	x2, #0x1e
   57694:	b.ne	56dc4 <aarch64_get_opcode@@Base+0x635c>  // b.any
   57698:	adrp	x1, 69000 <fields@@Base+0x5f60>
   5769c:	add	x20, x27, #0x1
   576a0:	add	x1, x1, #0x388
   576a4:	blr	x4
   576a8:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   576ac:	adrp	x1, 69000 <fields@@Base+0x5f60>
   576b0:	add	x20, x27, #0x1
   576b4:	add	x1, x1, #0x378
   576b8:	blr	x4
   576bc:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   576c0:	adrp	x1, 69000 <fields@@Base+0x5f60>
   576c4:	add	x20, x27, #0x1
   576c8:	add	x1, x1, #0x380
   576cc:	blr	x4
   576d0:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   576d4:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   576d8:	add	x20, x27, #0x1
   576dc:	add	x1, x1, #0x870
   576e0:	blr	x2
   576e4:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   576e8:	cmp	w0, #0x85
   576ec:	ldr	x1, [sp, #600]
   576f0:	b.eq	57744 <aarch64_get_opcode@@Base+0x6cdc>  // b.none
   576f4:	cmp	w0, #0x83
   576f8:	b.eq	57734 <aarch64_get_opcode@@Base+0x6ccc>  // b.none
   576fc:	ldr	x2, [sp, #600]
   57700:	mov	x0, x23
   57704:	adrp	x1, 68000 <fields@@Base+0x4f60>
   57708:	add	x1, x1, #0xca8
   5770c:	add	x20, x27, #0x1
   57710:	blr	x28
   57714:	ldr	x0, [sp, #600]
   57718:	str	x0, [sp, #96]
   5771c:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   57720:	adrp	x1, 69000 <fields@@Base+0x5f60>
   57724:	add	x20, x27, #0x1
   57728:	add	x1, x1, #0x3b0
   5772c:	blr	x2
   57730:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   57734:	cbnz	x1, 576fc <aarch64_get_opcode@@Base+0x6c94>
   57738:	mov	x0, #0x20                  	// #32
   5773c:	str	x0, [sp, #600]
   57740:	b	576fc <aarch64_get_opcode@@Base+0x6c94>
   57744:	cmp	x1, #0x1
   57748:	b.eq	577f4 <aarch64_get_opcode@@Base+0x6d8c>  // b.none
   5774c:	cmp	x1, #0x10
   57750:	b.ne	577cc <aarch64_get_opcode@@Base+0x6d64>  // b.any
   57754:	ldp	x20, x2, [x26]
   57758:	adrp	x1, 69000 <fields@@Base+0x5f60>
   5775c:	add	x1, x1, #0x3b8
   57760:	str	x2, [sp, #200]
   57764:	mov	x0, x2
   57768:	blr	x20
   5776c:	ldr	x2, [sp, #200]
   57770:	adrp	x1, 69000 <fields@@Base+0x5f60>
   57774:	add	x1, x1, #0x3d8
   57778:	mov	x0, x2
   5777c:	blr	x20
   57780:	add	x20, x27, #0x1
   57784:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   57788:	cmp	x2, #0x1
   5778c:	b.ne	56dc4 <aarch64_get_opcode@@Base+0x635c>  // b.any
   57790:	adrp	x1, 69000 <fields@@Base+0x5f60>
   57794:	add	x20, x27, #0x1
   57798:	add	x1, x1, #0x398
   5779c:	blr	x4
   577a0:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   577a4:	adrp	x1, 69000 <fields@@Base+0x5f60>
   577a8:	add	x20, x27, #0x1
   577ac:	add	x1, x1, #0x358
   577b0:	blr	x4
   577b4:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   577b8:	adrp	x1, 69000 <fields@@Base+0x5f60>
   577bc:	add	x20, x27, #0x1
   577c0:	add	x1, x1, #0x368
   577c4:	blr	x4
   577c8:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   577cc:	cbz	x1, 57308 <aarch64_get_opcode@@Base+0x68a0>
   577d0:	adrp	x3, 68000 <fields@@Base+0x4f60>
   577d4:	add	x3, x3, #0x980
   577d8:	adrp	x1, 69000 <fields@@Base+0x5f60>
   577dc:	adrp	x0, 5d000 <xexit@@Base+0x1a80>
   577e0:	add	x3, x3, #0x10
   577e4:	add	x1, x1, #0x3f8
   577e8:	add	x0, x0, #0x870
   577ec:	mov	w2, #0x2570                	// #9584
   577f0:	bl	35ac0 <__assert_fail@plt>
   577f4:	mov	x0, x23
   577f8:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   577fc:	add	x20, x27, #0x1
   57800:	add	x1, x1, #0xcb0
   57804:	blr	x28
   57808:	b	55ca0 <aarch64_get_opcode@@Base+0x5238>
   5780c:	nop
   57810:	ldr	x3, [x1, #48]
   57814:	mov	x5, x0
   57818:	mov	w9, #0x0                   	// #0
   5781c:	cbz	x3, 57830 <aarch64_get_opcode@@Base+0x6dc8>
   57820:	ldr	w0, [x3, #32]
   57824:	tst	x0, #0x10
   57828:	cset	w9, eq  // eq = none
   5782c:	lsl	w9, w9, #1
   57830:	ldr	x12, [x1, #96]
   57834:	cbz	x12, 57958 <aarch64_get_opcode@@Base+0x6ef0>
   57838:	ldr	x11, [x1, #72]
   5783c:	mov	w0, #0x0                   	// #0
   57840:	ldr	x6, [x11]
   57844:	ldr	w4, [x6, #24]
   57848:	and	w7, w4, #0x200000
   5784c:	tbnz	w4, #21, 57868 <aarch64_get_opcode@@Base+0x6e00>
   57850:	ldr	x4, [x6]
   57854:	mov	w0, w7
   57858:	ldr	x4, [x4, #8]
   5785c:	ldr	w4, [x4, #8]
   57860:	cmp	w4, #0x5
   57864:	b.eq	5786c <aarch64_get_opcode@@Base+0x6e04>  // b.none
   57868:	ret
   5786c:	ldp	w13, w10, [x1, #80]
   57870:	ldr	x15, [x1, #240]
   57874:	cbz	w10, 5793c <aarch64_get_opcode@@Base+0x6ed4>
   57878:	ldr	x0, [x12, #40]
   5787c:	add	w1, w13, #0x1
   57880:	cmp	x0, x5
   57884:	b.cc	57a18 <aarch64_get_opcode@@Base+0x6fb0>  // b.lo, b.ul, b.last
   57888:	mov	w0, #0xffffffff            	// #-1
   5788c:	mov	w16, w0
   57890:	str	w0, [x12, #28]
   57894:	cmp	w10, w1
   57898:	mov	w18, #0x0                   	// #0
   5789c:	b.le	57ab8 <aarch64_get_opcode@@Base+0x7050>
   578a0:	sxtw	x1, w1
   578a4:	mov	w0, #0x0                   	// #0
   578a8:	mov	w14, #0xffffffff            	// #-1
   578ac:	mov	w17, #0x61                  	// #97
   578b0:	b	578c0 <aarch64_get_opcode@@Base+0x6e58>
   578b4:	add	x1, x1, #0x1
   578b8:	cmp	w10, w1
   578bc:	b.le	57960 <aarch64_get_opcode@@Base+0x6ef8>
   578c0:	ldr	x6, [x11, x1, lsl #3]
   578c4:	ldr	x7, [x6, #32]
   578c8:	ldr	x4, [x6, #16]
   578cc:	ldr	x8, [x7, #40]
   578d0:	add	x4, x4, x8
   578d4:	cmp	x5, x4
   578d8:	b.cc	57960 <aarch64_get_opcode@@Base+0x6ef8>  // b.lo, b.ul, b.last
   578dc:	cmp	x3, #0x0
   578e0:	ccmp	x3, x7, #0x4, ne  // ne = any
   578e4:	b.ne	578b4 <aarch64_get_opcode@@Base+0x6e4c>  // b.any
   578e8:	ldr	x4, [x6, #8]
   578ec:	ldrb	w6, [x4]
   578f0:	cmp	w6, #0x24
   578f4:	b.ne	578b4 <aarch64_get_opcode@@Base+0x6e4c>  // b.any
   578f8:	ldrb	w6, [x4, #1]
   578fc:	and	w7, w6, #0xffffffef
   57900:	cmp	w7, #0x64
   57904:	ccmp	w6, w17, #0x4, ne  // ne = any
   57908:	b.ne	578b4 <aarch64_get_opcode@@Base+0x6e4c>  // b.any
   5790c:	ldrb	w4, [x4, #2]
   57910:	cmp	w4, #0x2e
   57914:	ccmp	w4, #0x0, #0x4, ne  // ne = any
   57918:	b.ne	578b4 <aarch64_get_opcode@@Base+0x6e4c>  // b.any
   5791c:	cmp	w6, #0x61
   57920:	b.eq	57a8c <aarch64_get_opcode@@Base+0x7024>  // b.none
   57924:	cmp	w6, #0x74
   57928:	b.eq	57a9c <aarch64_get_opcode@@Base+0x7034>  // b.none
   5792c:	mov	w14, w1
   57930:	mov	w9, #0x2                   	// #2
   57934:	mov	w0, #0x1                   	// #1
   57938:	b	578b4 <aarch64_get_opcode@@Base+0x6e4c>
   5793c:	mov	w14, #0xffffffff            	// #-1
   57940:	mov	w0, #0x0                   	// #0
   57944:	tbz	w13, #31, 57a48 <aarch64_get_opcode@@Base+0x6fe0>
   57948:	stp	w9, w14, [x12, #24]
   5794c:	str	x15, [x12, #32]
   57950:	str	w9, [x2]
   57954:	ret
   57958:	mov	w0, #0x0                   	// #0
   5795c:	ret
   57960:	cbnz	w0, 57948 <aarch64_get_opcode@@Base+0x6ee0>
   57964:	cmp	w18, #0x0
   57968:	ccmp	w16, w13, #0x0, ne  // ne = any
   5796c:	csel	w16, w16, w13, le
   57970:	mov	x7, #0x0                   	// #0
   57974:	cbz	x3, 5797c <aarch64_get_opcode@@Base+0x6f14>
   57978:	ldr	x7, [x3, #40]
   5797c:	sxtw	x1, w16
   57980:	mov	w8, #0x61                  	// #97
   57984:	tbz	w16, #31, 57994 <aarch64_get_opcode@@Base+0x6f2c>
   57988:	b	57940 <aarch64_get_opcode@@Base+0x6ed8>
   5798c:	sub	x1, x1, #0x1
   57990:	tbnz	w1, #31, 57940 <aarch64_get_opcode@@Base+0x6ed8>
   57994:	ldr	x4, [x11, x1, lsl #3]
   57998:	ldr	x5, [x4, #32]
   5799c:	ldr	x0, [x4, #16]
   579a0:	ldr	x6, [x5, #40]
   579a4:	add	x0, x0, x6
   579a8:	cmp	x0, x7
   579ac:	b.cc	57940 <aarch64_get_opcode@@Base+0x6ed8>  // b.lo, b.ul, b.last
   579b0:	cmp	x3, #0x0
   579b4:	ccmp	x3, x5, #0x4, ne  // ne = any
   579b8:	b.ne	5798c <aarch64_get_opcode@@Base+0x6f24>  // b.any
   579bc:	ldr	x0, [x4, #8]
   579c0:	ldrb	w4, [x0]
   579c4:	cmp	w4, #0x24
   579c8:	b.ne	5798c <aarch64_get_opcode@@Base+0x6f24>  // b.any
   579cc:	ldrb	w4, [x0, #1]
   579d0:	and	w5, w4, #0xffffffef
   579d4:	cmp	w5, #0x64
   579d8:	ccmp	w4, w8, #0x4, ne  // ne = any
   579dc:	b.ne	5798c <aarch64_get_opcode@@Base+0x6f24>  // b.any
   579e0:	ldrb	w0, [x0, #2]
   579e4:	cmp	w0, #0x2e
   579e8:	ccmp	w0, #0x0, #0x4, ne  // ne = any
   579ec:	b.ne	5798c <aarch64_get_opcode@@Base+0x6f24>  // b.any
   579f0:	mov	w14, w1
   579f4:	cmp	w4, #0x61
   579f8:	b.eq	57aac <aarch64_get_opcode@@Base+0x7044>  // b.none
   579fc:	mov	w9, #0x1                   	// #1
   57a00:	cmp	w4, #0x74
   57a04:	mov	w0, w9
   57a08:	b.eq	57948 <aarch64_get_opcode@@Base+0x6ee0>  // b.none
   57a0c:	mov	w9, #0x2                   	// #2
   57a10:	mov	w0, #0x1                   	// #1
   57a14:	b	57948 <aarch64_get_opcode@@Base+0x6ee0>
   57a18:	ldr	w16, [x12, #28]
   57a1c:	tbnz	w16, #31, 57894 <aarch64_get_opcode@@Base+0x6e2c>
   57a20:	ldr	x0, [x12, #32]
   57a24:	cmp	x0, x15
   57a28:	b.ne	57894 <aarch64_get_opcode@@Base+0x6e2c>  // b.any
   57a2c:	cmp	w1, w16
   57a30:	mov	w18, #0x1                   	// #1
   57a34:	csel	w1, w1, w16, le
   57a38:	cmp	w10, w1
   57a3c:	b.gt	578a0 <aarch64_get_opcode@@Base+0x6e38>
   57a40:	mov	w14, #0xffffffff            	// #-1
   57a44:	b	57964 <aarch64_get_opcode@@Base+0x6efc>
   57a48:	ldr	x1, [x11, w13, sxtw #3]
   57a4c:	cbz	x3, 57a5c <aarch64_get_opcode@@Base+0x6ff4>
   57a50:	ldr	x4, [x1, #32]
   57a54:	cmp	x3, x4
   57a58:	b.ne	57948 <aarch64_get_opcode@@Base+0x6ee0>  // b.any
   57a5c:	ldrb	w3, [x1, #72]
   57a60:	mov	w0, #0x0                   	// #0
   57a64:	and	w3, w3, #0x7
   57a68:	cmp	w3, #0x2
   57a6c:	b.ne	57948 <aarch64_get_opcode@@Base+0x6ee0>  // b.any
   57a70:	ldrb	w1, [x1, #74]
   57a74:	mov	w0, #0x1                   	// #1
   57a78:	mov	w14, w13
   57a7c:	and	w1, w1, #0x3
   57a80:	cmp	w1, w0
   57a84:	cset	w9, eq  // eq = none
   57a88:	b	57948 <aarch64_get_opcode@@Base+0x6ee0>
   57a8c:	mov	w14, w1
   57a90:	mov	w9, #0x0                   	// #0
   57a94:	mov	w0, #0x1                   	// #1
   57a98:	b	578b4 <aarch64_get_opcode@@Base+0x6e4c>
   57a9c:	mov	w9, #0x1                   	// #1
   57aa0:	mov	w14, w1
   57aa4:	mov	w0, w9
   57aa8:	b	578b4 <aarch64_get_opcode@@Base+0x6e4c>
   57aac:	mov	w9, #0x0                   	// #0
   57ab0:	mov	w0, #0x1                   	// #1
   57ab4:	b	57948 <aarch64_get_opcode@@Base+0x6ee0>
   57ab8:	mov	w16, w13
   57abc:	mov	w14, #0xffffffff            	// #-1
   57ac0:	b	57970 <aarch64_get_opcode@@Base+0x6f08>
   57ac4:	nop
   57ac8:	stp	x29, x30, [sp, #-160]!
   57acc:	mov	x29, sp
   57ad0:	stp	x19, x20, [sp, #16]
   57ad4:	ldr	x19, [x1, #224]
   57ad8:	stp	x21, x22, [sp, #32]
   57adc:	mov	x21, x0
   57ae0:	stp	x23, x24, [sp, #48]
   57ae4:	stp	x25, x26, [sp, #64]
   57ae8:	mov	w26, w2
   57aec:	stp	x27, x28, [sp, #80]
   57af0:	mov	x28, x1
   57af4:	strh	wzr, [x1, #196]
   57af8:	strb	wzr, [x1, #198]
   57afc:	str	wzr, [x1, #200]
   57b00:	stp	xzr, xzr, [x1, #208]
   57b04:	cbz	x19, 57be4 <aarch64_get_opcode@@Base+0x717c>
   57b08:	adrp	x24, 69000 <fields@@Base+0x5f60>
   57b0c:	add	x24, x24, #0x770
   57b10:	adrp	x23, 69000 <fields@@Base+0x5f60>
   57b14:	adrp	x22, 69000 <fields@@Base+0x5f60>
   57b18:	add	x23, x23, #0x780
   57b1c:	add	x22, x22, #0x790
   57b20:	mov	x1, x24
   57b24:	mov	x0, x19
   57b28:	mov	x2, #0xa                   	// #10
   57b2c:	bl	35440 <strncmp@plt>
   57b30:	cbz	w0, 57b80 <aarch64_get_opcode@@Base+0x7118>
   57b34:	nop
   57b38:	mov	x1, x23
   57b3c:	mov	x0, x19
   57b40:	mov	x2, #0xb                   	// #11
   57b44:	bl	35440 <strncmp@plt>
   57b48:	cbnz	w0, 57d58 <aarch64_get_opcode@@Base+0x72f0>
   57b4c:	adrp	x0, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   57b50:	mov	w1, #0x1                   	// #1
   57b54:	str	w1, [x0, #1136]
   57b58:	mov	x0, x19
   57b5c:	mov	w1, #0x2c                  	// #44
   57b60:	bl	35840 <strchr@plt>
   57b64:	cbz	x0, 57be0 <aarch64_get_opcode@@Base+0x7178>
   57b68:	add	x19, x0, #0x1
   57b6c:	mov	x1, x24
   57b70:	mov	x0, x19
   57b74:	mov	x2, #0xa                   	// #10
   57b78:	bl	35440 <strncmp@plt>
   57b7c:	cbnz	w0, 57b38 <aarch64_get_opcode@@Base+0x70d0>
   57b80:	adrp	x20, 91000 <aarch64_operands@@Base+0x1bd0>
   57b84:	add	x20, x20, #0xb60
   57b88:	add	x20, x20, #0xe78
   57b8c:	mov	w25, #0x0                   	// #0
   57b90:	ldr	x1, [x20]
   57b94:	mov	x0, x19
   57b98:	bl	35970 <disassembler_options_cmp@plt>
   57b9c:	cbz	w0, 57efc <aarch64_get_opcode@@Base+0x7494>
   57ba0:	add	w25, w25, #0x1
   57ba4:	add	x20, x20, #0x90
   57ba8:	cmp	w25, #0x8
   57bac:	b.ne	57b90 <aarch64_get_opcode@@Base+0x7128>  // b.any
   57bb0:	mov	w2, #0x5                   	// #5
   57bb4:	adrp	x1, 69000 <fields@@Base+0x5f60>
   57bb8:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   57bbc:	add	x1, x1, #0x7a0
   57bc0:	add	x0, x0, #0x5d8
   57bc4:	bl	359e0 <dcgettext@plt>
   57bc8:	mov	x1, x19
   57bcc:	bl	35a10 <_bfd_error_handler@plt>
   57bd0:	mov	x0, x19
   57bd4:	mov	w1, #0x2c                  	// #44
   57bd8:	bl	35840 <strchr@plt>
   57bdc:	cbnz	x0, 57b68 <aarch64_get_opcode@@Base+0x7100>
   57be0:	str	xzr, [x28, #224]
   57be4:	ldr	x23, [x28, #96]
   57be8:	cbz	x23, 57f08 <aarch64_get_opcode@@Base+0x74a0>
   57bec:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   57bf0:	add	x0, x25, #0x410
   57bf4:	ldr	w24, [x0, #96]
   57bf8:	ldr	w20, [x28, #84]
   57bfc:	and	w19, w26, #0x1
   57c00:	ldr	w0, [x28, #44]
   57c04:	cmp	w0, #0x1
   57c08:	csinc	w19, w19, wzr, ne  // ne = any
   57c0c:	cbnz	w20, 57d9c <aarch64_get_opcode@@Base+0x7334>
   57c10:	mov	w0, #0x0                   	// #0
   57c14:	mov	w2, #0x0                   	// #0
   57c18:	mov	w22, #0x4                   	// #4
   57c1c:	ldr	x1, [x28, #56]
   57c20:	cbz	x1, 57c60 <aarch64_get_opcode@@Base+0x71f8>
   57c24:	ldr	x1, [x1]
   57c28:	ldr	w4, [x1, #24]
   57c2c:	tbnz	w4, #21, 57c60 <aarch64_get_opcode@@Base+0x71f8>
   57c30:	ldr	x4, [x1]
   57c34:	ldr	x4, [x4, #8]
   57c38:	ldr	w4, [x4, #8]
   57c3c:	cmp	w4, #0x2
   57c40:	b.eq	5814c <aarch64_get_opcode@@Base+0x76e4>  // b.none
   57c44:	cmp	w0, #0x0
   57c48:	ccmp	w4, #0x5, #0x0, eq  // eq = none
   57c4c:	b.eq	582b0 <aarch64_get_opcode@@Base+0x7848>  // b.none
   57c50:	cmp	w4, #0x11
   57c54:	b.ne	57c60 <aarch64_get_opcode@@Base+0x71f8>  // b.any
   57c58:	ldrh	w20, [x1, #50]
   57c5c:	and	w20, w20, #0x8
   57c60:	cmp	w24, #0x0
   57c64:	csinc	w20, w20, wzr, eq  // eq = none
   57c68:	ldr	x4, [x28, #104]
   57c6c:	cbz	w2, 57dd4 <aarch64_get_opcode@@Base+0x736c>
   57c70:	ldr	x0, [x28, #88]
   57c74:	mov	w1, #0x4                   	// #4
   57c78:	str	w1, [x28, #168]
   57c7c:	str	w26, [x28, #176]
   57c80:	and	x23, x0, #0x40000000
   57c84:	tbnz	w0, #30, 57de0 <aarch64_get_opcode@@Base+0x7378>
   57c88:	str	w22, [x28, #172]
   57c8c:	add	x19, sp, #0x98
   57c90:	mov	x1, x19
   57c94:	mov	x3, x28
   57c98:	mov	w2, w22
   57c9c:	mov	x0, x21
   57ca0:	blr	x4
   57ca4:	str	w0, [sp, #108]
   57ca8:	mov	w27, w22
   57cac:	cbnz	w26, 58070 <aarch64_get_opcode@@Base+0x7608>
   57cb0:	cmp	w22, #0x0
   57cb4:	b.le	57cec <aarch64_get_opcode@@Base+0x7284>
   57cb8:	ldrb	w23, [sp, #152]
   57cbc:	cmp	w22, #0x1
   57cc0:	b.eq	57cec <aarch64_get_opcode@@Base+0x7284>  // b.none
   57cc4:	ldrb	w0, [sp, #153]
   57cc8:	cmp	w22, #0x2
   57ccc:	orr	x23, x0, x23, lsl #8
   57cd0:	b.eq	57cec <aarch64_get_opcode@@Base+0x7284>  // b.none
   57cd4:	ldrb	w0, [sp, #154]
   57cd8:	cmp	w22, #0x3
   57cdc:	orr	x23, x0, x23, lsl #8
   57ce0:	b.eq	57cec <aarch64_get_opcode@@Base+0x7284>  // b.none
   57ce4:	ldrb	w0, [sp, #155]
   57ce8:	orr	x23, x0, x23, lsl #8
   57cec:	adrp	x0, 53000 <aarch64_get_opcode@@Base+0x2598>
   57cf0:	add	x0, x0, #0x540
   57cf4:	str	x0, [sp, #112]
   57cf8:	ldr	w0, [sp, #108]
   57cfc:	cbnz	w0, 58548 <aarch64_get_opcode@@Base+0x7ae0>
   57d00:	ldr	x0, [x28, #88]
   57d04:	mov	x2, x23
   57d08:	ldr	x3, [sp, #112]
   57d0c:	mov	x1, x28
   57d10:	tst	x0, #0x80000000
   57d14:	csel	x0, x21, xzr, eq  // eq = none
   57d18:	blr	x3
   57d1c:	cbz	w20, 57d38 <aarch64_get_opcode@@Base+0x72d0>
   57d20:	add	x0, x25, #0x410
   57d24:	ldr	x1, [x0, #104]
   57d28:	ldr	w2, [x0, #4]
   57d2c:	str	w2, [x25, #1040]
   57d30:	add	x22, x1, w22, uxtw
   57d34:	str	x22, [x0, #104]
   57d38:	mov	w0, w27
   57d3c:	ldp	x19, x20, [sp, #16]
   57d40:	ldp	x21, x22, [sp, #32]
   57d44:	ldp	x23, x24, [sp, #48]
   57d48:	ldp	x25, x26, [sp, #64]
   57d4c:	ldp	x27, x28, [sp, #80]
   57d50:	ldp	x29, x30, [sp], #160
   57d54:	ret
   57d58:	mov	x1, x22
   57d5c:	mov	x0, x19
   57d60:	mov	x2, #0xe                   	// #14
   57d64:	bl	35440 <strncmp@plt>
   57d68:	cbnz	w0, 57d78 <aarch64_get_opcode@@Base+0x7310>
   57d6c:	adrp	x0, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   57d70:	str	wzr, [x0, #1136]
   57d74:	b	57b58 <aarch64_get_opcode@@Base+0x70f0>
   57d78:	mov	w2, #0x5                   	// #5
   57d7c:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   57d80:	adrp	x0, 5b000 <floatformat_from_double@@Base+0x3e8>
   57d84:	add	x1, x1, #0x520
   57d88:	add	x0, x0, #0x5d8
   57d8c:	bl	359e0 <dcgettext@plt>
   57d90:	mov	x1, x19
   57d94:	bl	35a10 <_bfd_error_handler@plt>
   57d98:	b	57b58 <aarch64_get_opcode@@Base+0x70f0>
   57d9c:	ldr	x0, [x28, #72]
   57da0:	ldr	x0, [x0]
   57da4:	ldr	w1, [x0, #24]
   57da8:	tbnz	w1, #21, 57dc0 <aarch64_get_opcode@@Base+0x7358>
   57dac:	ldr	x0, [x0]
   57db0:	ldr	x0, [x0, #8]
   57db4:	ldr	w0, [x0, #8]
   57db8:	cmp	w0, #0x5
   57dbc:	b.eq	581c0 <aarch64_get_opcode@@Base+0x7758>  // b.none
   57dc0:	mov	w0, #0x0                   	// #0
   57dc4:	mov	w22, #0x4                   	// #4
   57dc8:	mov	w2, #0x0                   	// #0
   57dcc:	mov	w20, #0x0                   	// #0
   57dd0:	b	57c1c <aarch64_get_opcode@@Base+0x71b4>
   57dd4:	mov	w0, #0x4                   	// #4
   57dd8:	str	w0, [x28, #168]
   57ddc:	str	w19, [x28, #176]
   57de0:	cbnz	w20, 57e20 <aarch64_get_opcode@@Base+0x73b8>
   57de4:	mov	w27, #0x4                   	// #4
   57de8:	str	w27, [x28, #172]
   57dec:	mov	w2, w27
   57df0:	mov	x3, x28
   57df4:	add	x1, sp, #0x98
   57df8:	mov	x0, x21
   57dfc:	blr	x4
   57e00:	str	w0, [sp, #108]
   57e04:	cbz	w19, 57f7c <aarch64_get_opcode@@Base+0x7514>
   57e08:	adrp	x0, 54000 <aarch64_get_opcode@@Base+0x3598>
   57e0c:	ldr	w23, [sp, #152]
   57e10:	add	x0, x0, #0x570
   57e14:	mov	w22, w27
   57e18:	str	x0, [sp, #112]
   57e1c:	b	57cf8 <aarch64_get_opcode@@Base+0x7290>
   57e20:	mov	w2, #0x2                   	// #2
   57e24:	str	w2, [x28, #172]
   57e28:	add	x22, sp, #0x98
   57e2c:	mov	x3, x28
   57e30:	mov	x1, x22
   57e34:	mov	x0, x21
   57e38:	blr	x4
   57e3c:	str	w0, [sp, #108]
   57e40:	ldrh	w23, [sp, #152]
   57e44:	cbz	w19, 57f68 <aarch64_get_opcode@@Base+0x7500>
   57e48:	ldr	w0, [sp, #108]
   57e4c:	cbnz	w0, 57eac <aarch64_get_opcode@@Base+0x7444>
   57e50:	and	x0, x23, #0xf800
   57e54:	mov	x1, #0xe800                	// #59392
   57e58:	cmp	x0, #0xf, lsl #12
   57e5c:	and	x0, x23, x1
   57e60:	ccmp	x0, x1, #0x4, ne  // ne = any
   57e64:	b.ne	57eac <aarch64_get_opcode@@Base+0x7444>  // b.any
   57e68:	ldr	x4, [x28, #104]
   57e6c:	mov	x1, x22
   57e70:	mov	x3, x28
   57e74:	add	x0, x21, #0x2
   57e78:	mov	w2, #0x2                   	// #2
   57e7c:	lsl	x23, x23, #16
   57e80:	blr	x4
   57e84:	str	w0, [sp, #108]
   57e88:	cbz	w19, 58288 <aarch64_get_opcode@@Base+0x7820>
   57e8c:	ldrh	w1, [sp, #152]
   57e90:	mov	w27, #0x4                   	// #4
   57e94:	adrp	x0, 58000 <aarch64_get_opcode@@Base+0x7598>
   57e98:	mov	w22, w27
   57e9c:	add	x0, x0, #0x560
   57ea0:	orr	x23, x1, x23
   57ea4:	str	x0, [sp, #112]
   57ea8:	b	57ec0 <aarch64_get_opcode@@Base+0x7458>
   57eac:	mov	w27, #0x2                   	// #2
   57eb0:	mov	w22, w27
   57eb4:	adrp	x0, 51000 <aarch64_get_opcode@@Base+0x598>
   57eb8:	add	x0, x0, #0x4a0
   57ebc:	str	x0, [sp, #112]
   57ec0:	add	x0, x25, #0x410
   57ec4:	ldr	x1, [x0, #104]
   57ec8:	cmp	x1, x21
   57ecc:	b.ne	57f98 <aarch64_get_opcode@@Base+0x7530>  // b.any
   57ed0:	ldr	w26, [x25, #1040]
   57ed4:	cbz	w26, 57cf8 <aarch64_get_opcode@@Base+0x7290>
   57ed8:	and	w0, w26, #0xf
   57edc:	cmp	w0, #0x8
   57ee0:	b.eq	5827c <aarch64_get_opcode@@Base+0x7814>  // b.none
   57ee4:	add	x1, x25, #0x410
   57ee8:	ubfiz	w0, w26, #1, #4
   57eec:	and	w26, w26, #0xe0
   57ef0:	orr	w26, w0, w26
   57ef4:	str	w26, [x1, #4]
   57ef8:	b	57cf8 <aarch64_get_opcode@@Base+0x7290>
   57efc:	adrp	x0, fd000 <aarch64_opcode_table@@Base+0x55a20>
   57f00:	str	w25, [x0, #1616]
   57f04:	b	57b58 <aarch64_get_opcode@@Base+0x70f0>
   57f08:	ldr	x0, [x28, #88]
   57f0c:	tbnz	w0, #29, 57f50 <aarch64_get_opcode@@Base+0x74e8>
   57f10:	str	xzr, [x28, #32]
   57f14:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   57f18:	add	x0, x25, #0x410
   57f1c:	mov	x1, #0xffffffffffcfffff    	// #-3145729
   57f20:	mov	x5, #0xffffffffffffffff    	// #-1
   57f24:	ldr	w24, [x0, #96]
   57f28:	add	x2, x25, #0x410
   57f2c:	mov	x4, #0xffffffffffffffff    	// #-1
   57f30:	add	x0, x2, #0x30
   57f34:	str	x0, [x28, #96]
   57f38:	mov	x23, x0
   57f3c:	stp	x5, x1, [x2, #48]
   57f40:	str	x4, [x2, #64]
   57f44:	str	w4, [x2, #76]
   57f48:	stp	xzr, xzr, [x2, #80]
   57f4c:	b	57bf8 <aarch64_get_opcode@@Base+0x7190>
   57f50:	ldr	x1, [x28, #32]
   57f54:	cmp	x1, #0x1b
   57f58:	b.hi	57f64 <aarch64_get_opcode@@Base+0x74fc>  // b.pmore
   57f5c:	cmp	w1, #0x1b
   57f60:	b.ls	58058 <aarch64_get_opcode@@Base+0x75f0>  // b.plast
   57f64:	bl	35670 <abort@plt>
   57f68:	ldr	w0, [sp, #108]
   57f6c:	rev16	w23, w23
   57f70:	and	x23, x23, #0xffff
   57f74:	cbnz	w0, 57eac <aarch64_get_opcode@@Base+0x7444>
   57f78:	b	57e50 <aarch64_get_opcode@@Base+0x73e8>
   57f7c:	ldr	w23, [sp, #152]
   57f80:	adrp	x0, 54000 <aarch64_get_opcode@@Base+0x3598>
   57f84:	mov	w22, w27
   57f88:	add	x0, x0, #0x570
   57f8c:	rev	w23, w23
   57f90:	str	x0, [sp, #112]
   57f94:	b	57cf8 <aarch64_get_opcode@@Base+0x7290>
   57f98:	add	x1, sp, #0x90
   57f9c:	mov	x26, x21
   57fa0:	str	wzr, [x25, #1040]
   57fa4:	mov	w24, #0x1                   	// #1
   57fa8:	str	x21, [x0, #104]
   57fac:	str	wzr, [sp, #104]
   57fb0:	str	x1, [sp, #120]
   57fb4:	add	x1, sp, #0x9c
   57fb8:	str	x1, [sp, #128]
   57fbc:	str	wzr, [sp, #140]
   57fc0:	cbz	x26, 5818c <aarch64_get_opcode@@Base+0x7724>
   57fc4:	ldr	x2, [x28, #128]
   57fc8:	mov	x1, x28
   57fcc:	mov	x0, x26
   57fd0:	blr	x2
   57fd4:	cbnz	w0, 5818c <aarch64_get_opcode@@Base+0x7724>
   57fd8:	ldr	x4, [x28, #104]
   57fdc:	sub	x26, x26, #0x2
   57fe0:	ldr	x1, [sp, #120]
   57fe4:	mov	x0, x26
   57fe8:	mov	x3, x28
   57fec:	mov	w2, #0x2                   	// #2
   57ff0:	blr	x4
   57ff4:	cbnz	w0, 57ed0 <aarch64_get_opcode@@Base+0x7468>
   57ff8:	ldrh	w0, [sp, #144]
   57ffc:	cmp	w19, #0x0
   58000:	rev16	w4, w0
   58004:	and	w4, w4, #0xffff
   58008:	csel	w4, w4, w0, eq  // eq = none
   5800c:	ldr	w0, [sp, #104]
   58010:	cbz	w0, 580bc <aarch64_get_opcode@@Base+0x7654>
   58014:	and	w7, w4, #0xf800
   58018:	mov	w0, #0xe7ff                	// #59391
   5801c:	cmp	w7, w0
   58020:	b.hi	58140 <aarch64_get_opcode@@Base+0x76d8>  // b.pmore
   58024:	tbnz	w24, #0, 58198 <aarch64_get_opcode@@Base+0x7730>
   58028:	and	w1, w4, #0xff00
   5802c:	mov	w0, #0xbf00                	// #48896
   58030:	cmp	w1, w0
   58034:	b.eq	580e8 <aarch64_get_opcode@@Base+0x7680>  // b.none
   58038:	mov	w0, #0x1                   	// #1
   5803c:	str	wzr, [sp, #104]
   58040:	add	w5, w24, #0x2
   58044:	orr	w24, w5, #0x1
   58048:	cmp	w0, #0x0
   5804c:	ccmp	w24, #0x7, #0x4, ne  // ne = any
   58050:	b.le	57fc0 <aarch64_get_opcode@@Base+0x7558>
   58054:	b	57ed0 <aarch64_get_opcode@@Base+0x7468>
   58058:	adrp	x0, 68000 <fields@@Base+0x4f60>
   5805c:	add	x0, x0, #0x898
   58060:	ldrh	w0, [x0, w1, uxtw #1]
   58064:	adr	x2, 58070 <aarch64_get_opcode@@Base+0x7608>
   58068:	add	x0, x2, w0, sxth #2
   5806c:	br	x0
   58070:	subs	w0, w22, #0x1
   58074:	b.mi	57cec <aarch64_get_opcode@@Base+0x7284>  // b.first
   58078:	ldrb	w23, [x19, w0, sxtw]
   5807c:	cmp	w22, #0x1
   58080:	sub	w0, w22, #0x2
   58084:	b.eq	57cec <aarch64_get_opcode@@Base+0x7284>  // b.none
   58088:	ldrb	w0, [x19, w0, sxtw]
   5808c:	cmp	w22, #0x2
   58090:	sub	w1, w22, #0x3
   58094:	orr	x23, x0, x23, lsl #8
   58098:	b.eq	57cec <aarch64_get_opcode@@Base+0x7284>  // b.none
   5809c:	ldrb	w0, [x19, w1, sxtw]
   580a0:	cmp	w22, #0x3
   580a4:	sub	w1, w22, #0x4
   580a8:	orr	x23, x0, x23, lsl #8
   580ac:	b.eq	57cec <aarch64_get_opcode@@Base+0x7284>  // b.none
   580b0:	ldrb	w0, [x19, w1, sxtw]
   580b4:	orr	x23, x0, x23, lsl #8
   580b8:	b	57cec <aarch64_get_opcode@@Base+0x7284>
   580bc:	mov	w0, #0xbf00                	// #48896
   580c0:	and	w1, w4, #0xff00
   580c4:	cmp	w1, w0
   580c8:	and	w7, w4, #0xf800
   580cc:	mov	w0, #0x1                   	// #1
   580d0:	b.eq	580e8 <aarch64_get_opcode@@Base+0x7680>  // b.none
   580d4:	mov	w1, #0xe7ff                	// #59391
   580d8:	cmp	w7, w1
   580dc:	b.ls	58040 <aarch64_get_opcode@@Base+0x75d8>  // b.plast
   580e0:	add	w24, w24, #0x1
   580e4:	b	58048 <aarch64_get_opcode@@Base+0x75e0>
   580e8:	ands	w1, w4, #0xf
   580ec:	str	w1, [sp, #104]
   580f0:	mov	w0, #0x1                   	// #1
   580f4:	b.eq	580d4 <aarch64_get_opcode@@Base+0x766c>  // b.none
   580f8:	ldr	x2, [sp, #128]
   580fc:	mov	x1, x28
   58100:	mov	x0, x26
   58104:	str	w4, [sp, #104]
   58108:	str	w7, [sp, #136]
   5810c:	str	wzr, [sp, #156]
   58110:	bl	57810 <aarch64_get_opcode@@Base+0x6da8>
   58114:	ldr	w4, [sp, #104]
   58118:	ldr	w7, [sp, #136]
   5811c:	cbz	w0, 5817c <aarch64_get_opcode@@Base+0x7714>
   58120:	ldr	w0, [sp, #156]
   58124:	str	wzr, [sp, #104]
   58128:	cmp	w0, #0x1
   5812c:	b.eq	5817c <aarch64_get_opcode@@Base+0x7714>  // b.none
   58130:	ldr	w0, [sp, #104]
   58134:	cmp	w0, #0x0
   58138:	cset	w0, eq  // eq = none
   5813c:	b	580d4 <aarch64_get_opcode@@Base+0x766c>
   58140:	add	w24, w24, #0x1
   58144:	mov	w0, #0x0                   	// #0
   58148:	b	58048 <aarch64_get_opcode@@Base+0x75e0>
   5814c:	ldr	x0, [x1, #48]
   58150:	mov	w5, #0x86                  	// #134
   58154:	ldrb	w0, [x0, #40]
   58158:	add	w4, w0, #0x7e
   5815c:	add	w1, w0, #0x6a
   58160:	and	w4, w4, #0xff
   58164:	and	w1, w1, #0xff
   58168:	cmp	w4, #0x1
   5816c:	ccmp	w1, #0x1, #0x0, hi  // hi = pmore
   58170:	ccmp	w0, w5, #0x4, hi  // hi = pmore
   58174:	cset	w20, eq  // eq = none
   58178:	b	57c60 <aarch64_get_opcode@@Base+0x71f8>
   5817c:	asr	w0, w24, #1
   58180:	str	w4, [sp, #104]
   58184:	str	w0, [sp, #140]
   58188:	b	58130 <aarch64_get_opcode@@Base+0x76c8>
   5818c:	ldr	w0, [sp, #104]
   58190:	cbz	w0, 57ed0 <aarch64_get_opcode@@Base+0x7468>
   58194:	tbz	w24, #0, 57ed0 <aarch64_get_opcode@@Base+0x7468>
   58198:	ldr	w1, [sp, #104]
   5819c:	ldrb	w0, [sp, #140]
   581a0:	and	w26, w1, #0xe0
   581a4:	lsl	w0, w1, w0
   581a8:	and	w0, w0, #0x1f
   581ac:	orr	w26, w0, w26
   581b0:	ands	w0, w0, #0xf
   581b4:	b.eq	58540 <aarch64_get_opcode@@Base+0x7ad8>  // b.none
   581b8:	str	w26, [x25, #1040]
   581bc:	b	57edc <aarch64_get_opcode@@Base+0x7474>
   581c0:	add	x2, sp, #0x9c
   581c4:	mov	x1, x28
   581c8:	mov	x0, x21
   581cc:	str	wzr, [sp, #156]
   581d0:	bl	57810 <aarch64_get_opcode@@Base+0x6da8>
   581d4:	mov	w22, #0x4                   	// #4
   581d8:	ldr	w1, [x23, #24]
   581dc:	cmp	w1, #0x1
   581e0:	cset	w20, eq  // eq = none
   581e4:	cmp	w1, #0x2
   581e8:	cset	w2, eq  // eq = none
   581ec:	b.ne	57c1c <aarch64_get_opcode@@Base+0x71b4>  // b.any
   581f0:	ldr	w1, [x23, #28]
   581f4:	and	w4, w21, #0x3
   581f8:	ldr	w7, [x28, #84]
   581fc:	sub	w22, w22, w4
   58200:	add	w1, w1, #0x1
   58204:	mov	w9, w21
   58208:	cmp	w7, w1
   5820c:	b.le	58264 <aarch64_get_opcode@@Base+0x77fc>
   58210:	sxtw	x1, w1
   58214:	ldr	x8, [x28, #72]
   58218:	b	58228 <aarch64_get_opcode@@Base+0x77c0>
   5821c:	add	x1, x1, #0x1
   58220:	cmp	w7, w1
   58224:	b.le	58264 <aarch64_get_opcode@@Base+0x77fc>
   58228:	ldr	x4, [x8, x1, lsl #3]
   5822c:	ldr	x5, [x4, #32]
   58230:	ldr	x4, [x4, #16]
   58234:	ldr	x6, [x5, #40]
   58238:	add	x4, x4, x6
   5823c:	cmp	x21, x4
   58240:	b.cs	5821c <aarch64_get_opcode@@Base+0x77b4>  // b.hs, b.nlast
   58244:	ldr	x6, [x28, #48]
   58248:	cmp	x6, #0x0
   5824c:	ccmp	x6, x5, #0x4, ne  // ne = any
   58250:	b.ne	5821c <aarch64_get_opcode@@Base+0x77b4>  // b.any
   58254:	sub	x1, x4, x21
   58258:	sub	w4, w4, w9
   5825c:	cmp	x1, w22, uxtw
   58260:	csel	w22, w4, w22, cc  // cc = lo, ul, last
   58264:	and	x1, x21, #0x1
   58268:	cmp	w22, #0x3
   5826c:	mov	x4, #0x2                   	// #2
   58270:	sub	x1, x4, x1
   58274:	csel	w22, w22, w1, ne  // ne = any
   58278:	b	57c1c <aarch64_get_opcode@@Base+0x71b4>
   5827c:	add	x0, x25, #0x410
   58280:	str	wzr, [x0, #4]
   58284:	b	57cf8 <aarch64_get_opcode@@Base+0x7290>
   58288:	ldrh	w0, [sp, #152]
   5828c:	mov	w27, #0x4                   	// #4
   58290:	adrp	x1, 58000 <aarch64_get_opcode@@Base+0x7598>
   58294:	mov	w22, w27
   58298:	rev16	w0, w0
   5829c:	add	x1, x1, #0x560
   582a0:	and	x0, x0, #0xffff
   582a4:	str	x1, [sp, #112]
   582a8:	orr	x23, x0, x23
   582ac:	b	57ec0 <aarch64_get_opcode@@Base+0x7458>
   582b0:	ldrb	w4, [x1, #74]
   582b4:	ldrb	w0, [x1, #72]
   582b8:	and	w1, w4, #0x3
   582bc:	cmp	w1, #0x1
   582c0:	and	w0, w0, #0xf
   582c4:	ccmp	w0, #0xf, #0x4, ne  // ne = any
   582c8:	cset	w20, eq  // eq = none
   582cc:	b	57c60 <aarch64_get_opcode@@Base+0x71f8>
   582d0:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   582d4:	add	x0, x25, #0x410
   582d8:	mov	x5, #0x7ff                 	// #2047
   582dc:	mov	x1, #0x0                   	// #0
   582e0:	movk	x5, #0x2000, lsl #16
   582e4:	ldr	w24, [x0, #96]
   582e8:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   582ec:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   582f0:	add	x0, x25, #0x410
   582f4:	mov	x5, #0x7f                  	// #127
   582f8:	mov	x1, #0x0                   	// #0
   582fc:	movk	x5, #0x2000, lsl #16
   58300:	ldr	w24, [x0, #96]
   58304:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   58308:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   5830c:	add	x0, x25, #0x410
   58310:	mov	x5, #0x1ff                 	// #511
   58314:	mov	x1, #0x0                   	// #0
   58318:	movk	x5, #0x2000, lsl #16
   5831c:	ldr	w24, [x0, #96]
   58320:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   58324:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   58328:	add	x0, x25, #0x410
   5832c:	mov	x1, #0x0                   	// #0
   58330:	mov	x5, #0xbf                  	// #191
   58334:	ldr	w24, [x0, #96]
   58338:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   5833c:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   58340:	add	x0, x25, #0x410
   58344:	mov	x1, #0x0                   	// #0
   58348:	mov	x5, #0x3f                  	// #63
   5834c:	ldr	w24, [x0, #96]
   58350:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   58354:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   58358:	add	x0, x25, #0x410
   5835c:	mov	x1, #0x0                   	// #0
   58360:	mov	x5, #0x1f                  	// #31
   58364:	ldr	w24, [x0, #96]
   58368:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   5836c:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   58370:	add	x0, x25, #0x410
   58374:	mov	x1, #0x7fbb                	// #32699
   58378:	mov	w5, #0xff1dffff            	// #-14811137
   5837c:	movk	x1, #0xb, lsl #16
   58380:	ldr	w24, [x0, #96]
   58384:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   58388:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   5838c:	add	x0, x25, #0x410
   58390:	mov	x5, #0xb7c0                	// #47040
   58394:	mov	x1, #0x10                  	// #16
   58398:	movk	x5, #0x27c9, lsl #16
   5839c:	ldr	w24, [x0, #96]
   583a0:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   583a4:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   583a8:	add	x0, x25, #0x410
   583ac:	mov	x5, #0x35c0                	// #13760
   583b0:	mov	x1, #0x0                   	// #0
   583b4:	movk	x5, #0x2380, lsl #16
   583b8:	ldr	w24, [x0, #96]
   583bc:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   583c0:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   583c4:	add	x0, x25, #0x410
   583c8:	mov	x5, #0x35c0                	// #13760
   583cc:	mov	x1, #0x0                   	// #0
   583d0:	movk	x5, #0x380, lsl #16
   583d4:	ldr	w24, [x0, #96]
   583d8:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   583dc:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   583e0:	add	x0, x25, #0x410
   583e4:	mov	x5, #0x35c0                	// #13760
   583e8:	mov	x1, #0x1c                  	// #28
   583ec:	movk	x5, #0x2381, lsl #16
   583f0:	ldr	w24, [x0, #96]
   583f4:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   583f8:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   583fc:	add	x0, x25, #0x410
   58400:	mov	w5, #0xff1dffff            	// #-14811137
   58404:	ldr	w24, [x0, #96]
   58408:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   5840c:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   58410:	add	x0, x25, #0x410
   58414:	mov	x5, #0xb5c0                	// #46528
   58418:	mov	x1, #0x5c                  	// #92
   5841c:	movk	x5, #0x23c9, lsl #16
   58420:	ldr	w24, [x0, #96]
   58424:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   58428:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   5842c:	add	x0, x25, #0x410
   58430:	mov	x5, #0x1fff                	// #8191
   58434:	mov	x1, #0x0                   	// #0
   58438:	movk	x5, #0x2000, lsl #16
   5843c:	ldr	w24, [x0, #96]
   58440:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   58444:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   58448:	add	x0, x25, #0x410
   5844c:	mov	x5, #0xfff                 	// #4095
   58450:	mov	x1, #0x0                   	// #0
   58454:	movk	x5, #0x2000, lsl #16
   58458:	ldr	w24, [x0, #96]
   5845c:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   58460:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   58464:	add	x0, x25, #0x410
   58468:	mov	x1, #0x0                   	// #0
   5846c:	mov	x5, #0xf                   	// #15
   58470:	ldr	w24, [x0, #96]
   58474:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   58478:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   5847c:	add	x0, x25, #0x410
   58480:	mov	x1, #0x0                   	// #0
   58484:	mov	x5, #0x7                   	// #7
   58488:	ldr	w24, [x0, #96]
   5848c:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   58490:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   58494:	add	x0, x25, #0x410
   58498:	mov	x1, #0x0                   	// #0
   5849c:	mov	x5, #0x3                   	// #3
   584a0:	ldr	w24, [x0, #96]
   584a4:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   584a8:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   584ac:	add	x2, x25, #0x410
   584b0:	mov	x1, #0x807c                	// #32892
   584b4:	mov	x5, #0xb5c0                	// #46528
   584b8:	mov	w0, #0x1                   	// #1
   584bc:	movk	x1, #0x30, lsl #16
   584c0:	mov	w24, w0
   584c4:	movk	x5, #0x23c9, lsl #16
   584c8:	str	w0, [x2, #96]
   584cc:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   584d0:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   584d4:	add	x0, x25, #0x410
   584d8:	mov	x5, #0xbfff                	// #49151
   584dc:	mov	x1, #0x10                  	// #16
   584e0:	movk	x5, #0xff1d, lsl #16
   584e4:	ldr	w24, [x0, #96]
   584e8:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   584ec:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   584f0:	add	x0, x25, #0x410
   584f4:	mov	x5, #0x3fff                	// #16383
   584f8:	mov	x1, #0x0                   	// #0
   584fc:	movk	x5, #0x2000, lsl #16
   58500:	ldr	w24, [x0, #96]
   58504:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   58508:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   5850c:	add	x0, x25, #0x410
   58510:	mov	x5, #0xbfff                	// #49151
   58514:	mov	x1, #0x10                  	// #16
   58518:	movk	x5, #0x3604, lsl #16
   5851c:	ldr	w24, [x0, #96]
   58520:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   58524:	adrp	x25, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   58528:	add	x0, x25, #0x410
   5852c:	mov	x5, #0x3fff                	// #16383
   58530:	mov	x1, #0x0                   	// #0
   58534:	movk	x5, #0x3000, lsl #16
   58538:	ldr	w24, [x0, #96]
   5853c:	b	57f28 <aarch64_get_opcode@@Base+0x74c0>
   58540:	str	wzr, [x25, #1040]
   58544:	b	57cf8 <aarch64_get_opcode@@Base+0x7290>
   58548:	ldr	x4, [x28, #112]
   5854c:	mov	x1, x21
   58550:	mov	x2, x28
   58554:	mov	w27, #0xffffffff            	// #-1
   58558:	blr	x4
   5855c:	b	57d38 <aarch64_get_opcode@@Base+0x72d0>
   58560:	sub	sp, sp, #0x210
   58564:	stp	x29, x30, [sp]
   58568:	mov	x29, sp
   5856c:	stp	x21, x22, [sp, #32]
   58570:	mov	x21, x1
   58574:	mov	x22, x0
   58578:	ldr	x1, [x1, #96]
   5857c:	stp	x19, x20, [sp, #16]
   58580:	mov	x19, x2
   58584:	stp	x23, x24, [sp, #48]
   58588:	ldr	x0, [x1, #8]
   5858c:	ldp	x24, x23, [x21]
   58590:	tbz	w0, #15, 58ae8 <aarch64_get_opcode@@Base+0x8080>
   58594:	ldr	x1, [x1]
   58598:	mov	x2, #0xffffffffffcfffff    	// #-3145729
   5859c:	cmp	x0, x2
   585a0:	ccmn	x1, #0x1, #0x0, eq  // eq = none
   585a4:	b.eq	58ae8 <aarch64_get_opcode@@Base+0x8080>  // b.none
   585a8:	adrp	x0, a0000 <aarch64_operands@@Base+0x10bd0>
   585ac:	mov	x3, x19
   585b0:	add	x0, x0, #0xe70
   585b4:	mov	x2, x21
   585b8:	mov	x1, x22
   585bc:	mov	w4, #0x1                   	// #1
   585c0:	bl	51cc8 <aarch64_get_opcode@@Base+0x1260>
   585c4:	cbnz	w0, 58ad0 <aarch64_get_opcode@@Base+0x8068>
   585c8:	mov	x1, x19
   585cc:	mov	x0, x21
   585d0:	bl	55740 <aarch64_get_opcode@@Base+0x4cd8>
   585d4:	cbnz	w0, 58ad0 <aarch64_get_opcode@@Base+0x8068>
   585d8:	adrp	x0, 92000 <aarch64_operands@@Base+0x2bd0>
   585dc:	add	x0, x0, #0xc60
   585e0:	add	x0, x0, #0x400
   585e4:	mov	x3, x19
   585e8:	mov	x2, x21
   585ec:	mov	x1, x22
   585f0:	mov	w4, #0x1                   	// #1
   585f4:	bl	51cc8 <aarch64_get_opcode@@Base+0x1260>
   585f8:	cbnz	w0, 58ad0 <aarch64_get_opcode@@Base+0x8068>
   585fc:	adrp	x0, 93000 <aarch64_operands@@Base+0x3bd0>
   58600:	adrp	x20, 69000 <fields@@Base+0x5f60>
   58604:	add	x0, x0, #0x4c0
   58608:	add	x20, x20, #0x7c8
   5860c:	b	5861c <aarch64_get_opcode@@Base+0x7bb4>
   58610:	ldr	x20, [x0, #88]
   58614:	add	x0, x0, #0x30
   58618:	cbz	x20, 58b38 <aarch64_get_opcode@@Base+0x80d0>
   5861c:	ldp	x2, x1, [x0, #24]
   58620:	and	x1, x19, x1
   58624:	cmp	x1, x2
   58628:	b.ne	58610 <aarch64_get_opcode@@Base+0x7ba8>  // b.any
   5862c:	ldrb	w0, [x20]
   58630:	str	w0, [sp, #136]
   58634:	cbz	w0, 58ad0 <aarch64_get_opcode@@Base+0x8068>
   58638:	asr	x12, x19, #16
   5863c:	asr	x0, x19, #1
   58640:	asr	x1, x19, #11
   58644:	tst	w19, #0x1000000
   58648:	adrp	x5, 69000 <fields@@Base+0x5f60>
   5864c:	adrp	x4, 60000 <xexit@@Base+0x4a80>
   58650:	add	x5, x5, #0x7d0
   58654:	add	x4, x4, #0xd0
   58658:	csel	x2, x5, x4, ne  // ne = any
   5865c:	ubfiz	w3, w12, #12, #1
   58660:	ubfiz	w0, w0, #2, #10
   58664:	tst	w19, #0x1000000
   58668:	adrp	x5, 5f000 <xexit@@Base+0x3a80>
   5866c:	adrp	x4, 5f000 <xexit@@Base+0x3a80>
   58670:	add	x5, x5, #0x690
   58674:	add	x4, x4, #0x228
   58678:	orr	w3, w3, w0
   5867c:	mov	x13, x1
   58680:	ubfiz	w8, w1, #1, #1
   58684:	csel	x1, x5, x4, ne  // ne = any
   58688:	orr	w0, w0, w8
   5868c:	ubfiz	w7, w12, #12, #7
   58690:	orr	w8, w3, w8
   58694:	tst	w19, #0x4000000
   58698:	stp	x1, x2, [sp, #472]
   5869c:	mov	x1, #0x100000              	// #1048576
   586a0:	ubfiz	w6, w12, #12, #5
   586a4:	sub	x4, x8, #0x2, lsl #12
   586a8:	stp	x27, x28, [sp, #80]
   586ac:	csel	x28, x1, xzr, eq  // eq = none
   586b0:	orr	w1, w7, w0
   586b4:	tst	x3, #0x1000
   586b8:	csel	x8, x8, x4, eq  // eq = none
   586bc:	orr	w3, w6, w0
   586c0:	orr	w7, w7, w0
   586c4:	tst	w19, #0x20000
   586c8:	orr	w6, w6, w0
   586cc:	sub	x4, x7, #0x80, lsl #12
   586d0:	mov	w14, #0x4                   	// #4
   586d4:	mov	w5, #0x2                   	// #2
   586d8:	csel	w5, w14, w5, ne  // ne = any
   586dc:	tst	x1, #0x40000
   586e0:	csel	x7, x7, x4, eq  // eq = none
   586e4:	sub	x1, x6, #0x20, lsl #12
   586e8:	tst	x3, #0x10000
   586ec:	ubfiz	x9, x19, #2, #8
   586f0:	csel	x6, x6, x1, eq  // eq = none
   586f4:	ands	x14, x19, #0x800000
   586f8:	str	w5, [sp, #104]
   586fc:	asr	x5, x19, #13
   58700:	ubfx	w10, w19, #26, #1
   58704:	and	w1, w5, #0x1
   58708:	cneg	x9, x9, eq  // eq = none
   5870c:	tst	x19, #0x100000
   58710:	mov	w4, #0x53                  	// #83
   58714:	mov	w3, #0x43                  	// #67
   58718:	csel	w2, w4, w3, ne  // ne = any
   5871c:	cmp	w10, w1
   58720:	asr	x4, x19, #4
   58724:	mov	x3, #0x800000              	// #8388608
   58728:	csel	x3, x3, xzr, eq  // eq = none
   5872c:	cmp	w10, #0x0
   58730:	and	w16, w13, #0x1
   58734:	ubfiz	x11, x19, #1, #11
   58738:	and	x1, x4, #0x3ff000
   5873c:	mov	x15, #0x1000000             	// #16777216
   58740:	csel	x15, x15, xzr, eq  // eq = none
   58744:	orr	x1, x1, x11
   58748:	cmp	w10, w16
   5874c:	orr	x3, x3, x15
   58750:	orr	x3, x3, x1
   58754:	mov	x10, #0x400000              	// #4194304
   58758:	sub	x1, x22, #0xfff, lsl #12
   5875c:	csel	x10, x10, xzr, eq  // eq = none
   58760:	orr	x3, x3, x10
   58764:	sub	x1, x1, #0xffc
   58768:	add	x1, x1, x3
   5876c:	mov	x27, x11
   58770:	and	x11, x1, #0xffffffff
   58774:	tst	x19, #0x1000
   58778:	and	x11, x11, #0xfffffffffffffffd
   5877c:	asr	x3, x19, #15
   58780:	csel	x1, x1, x11, ne  // ne = any
   58784:	str	x1, [sp, #296]
   58788:	ubfiz	w1, w13, #19, #1
   5878c:	ubfiz	w13, w5, #18, #1
   58790:	asr	x5, x19, #14
   58794:	cmp	x14, #0x0
   58798:	and	w15, w5, #0x40
   5879c:	and	w5, w19, #0x30
   587a0:	and	x17, x12, #0xf
   587a4:	orr	w5, w15, w5
   587a8:	and	w11, w4, #0x700
   587ac:	ubfx	w15, w19, #16, #4
   587b0:	and	w3, w3, #0x800
   587b4:	mov	w10, #0xffffffff            	// #-1
   587b8:	csinc	w10, w10, wzr, eq  // eq = none
   587bc:	stp	x25, x26, [sp, #64]
   587c0:	and	w25, w19, #0xff
   587c4:	orr	w3, w3, w11
   587c8:	and	w30, w4, #0xf000
   587cc:	cmp	w25, #0x0
   587d0:	orr	w1, w1, w13
   587d4:	ubfiz	w13, w19, #12, #4
   587d8:	str	w15, [sp, #172]
   587dc:	ubfx	w15, w19, #8, #4
   587e0:	str	w2, [sp, #424]
   587e4:	mov	w2, w17
   587e8:	orr	w16, w25, w3
   587ec:	orr	w13, w13, w2
   587f0:	orr	x1, x1, x28
   587f4:	mov	w2, w15
   587f8:	cset	w28, ne  // ne = any
   587fc:	asr	x12, x19, #10
   58800:	cmp	x14, #0x0
   58804:	orr	w26, w25, w30
   58808:	str	x14, [sp, #200]
   5880c:	ubfx	w14, w19, #16, #4
   58810:	orr	w26, w26, w3
   58814:	orr	w14, w14, w5
   58818:	and	w12, w12, #0x1c
   5881c:	orr	w5, w2, w5
   58820:	mul	w10, w10, w25
   58824:	and	x11, x4, #0x3f000
   58828:	str	w16, [sp, #140]
   5882c:	ubfx	w16, w19, #6, #2
   58830:	orr	x11, x11, x27
   58834:	and	x27, x22, #0xfffffffffffffffc
   58838:	str	w26, [sp, #148]
   5883c:	sub	x26, x22, #0xff, lsl #12
   58840:	add	x22, x22, #0x4
   58844:	str	w5, [sp, #168]
   58848:	orr	w5, w16, w12
   5884c:	add	x6, x6, x22
   58850:	asr	x15, x19, #23
   58854:	str	w14, [sp, #152]
   58858:	mov	w14, w5
   5885c:	and	w5, w19, #0x1f
   58860:	str	w2, [sp, #376]
   58864:	csinc	w2, w28, wzr, ne  // ne = any
   58868:	orr	x1, x1, x11
   5886c:	sub	x26, x26, #0xffc
   58870:	add	w5, w5, #0x1
   58874:	and	w18, w19, #0xfff
   58878:	add	x27, x27, #0x4
   5887c:	add	x7, x7, x22
   58880:	stp	x6, x7, [sp, #232]
   58884:	lsl	w6, w10, #2
   58888:	str	x17, [sp, #288]
   5888c:	and	w17, w19, #0xff0
   58890:	str	w2, [sp, #384]
   58894:	and	x2, x19, #0x200000
   58898:	orr	w13, w13, w17
   5889c:	add	x1, x1, x26
   588a0:	orr	w18, w18, w30
   588a4:	ubfiz	w15, w15, #1, #4
   588a8:	cmp	w14, #0x0
   588ac:	add	x9, x27, x9
   588b0:	add	x8, x8, x22
   588b4:	str	w14, [sp, #120]
   588b8:	mov	w14, w5
   588bc:	adrp	x5, 91000 <aarch64_operands@@Base+0x1bd0>
   588c0:	str	w18, [sp, #124]
   588c4:	lsl	w18, w25, #16
   588c8:	str	x2, [sp, #128]
   588cc:	add	x2, x5, #0xb60
   588d0:	str	w13, [sp, #144]
   588d4:	lsl	w17, w25, #24
   588d8:	str	x2, [sp, #208]
   588dc:	lsl	w13, w25, #8
   588e0:	str	x8, [sp, #248]
   588e4:	orr	w11, w17, w18
   588e8:	str	x1, [sp, #312]
   588ec:	orr	w28, w13, w25
   588f0:	str	w15, [sp, #320]
   588f4:	orr	w16, w25, w3
   588f8:	str	w25, [sp, #324]
   588fc:	mov	w26, #0x0                   	// #0
   58900:	str	w14, [sp, #364]
   58904:	lsr	w12, w16, #7
   58908:	str	x9, [sp, #440]
   5890c:	orr	w16, w25, #0x80
   58910:	str	x6, [sp, #448]
   58914:	add	x6, x0, x22
   58918:	sub	x0, x22, x0
   5891c:	stp	x6, x0, [sp, #256]
   58920:	ldrsw	x0, [sp, #140]
   58924:	str	x0, [sp, #352]
   58928:	lsr	w0, w3, #8
   5892c:	str	w0, [sp, #192]
   58930:	ldrsw	x0, [sp, #148]
   58934:	str	x0, [sp, #344]
   58938:	ldrsw	x0, [sp, #144]
   5893c:	str	x0, [sp, #336]
   58940:	orr	w0, w18, w25
   58944:	str	w0, [sp, #332]
   58948:	orr	w0, w17, w13
   5894c:	str	w0, [sp, #500]
   58950:	orr	w0, w28, w11
   58954:	str	w0, [sp, #328]
   58958:	ldrsw	x0, [sp, #152]
   5895c:	ldr	w1, [sp, #120]
   58960:	str	x0, [sp, #464]
   58964:	ldrsw	x0, [sp, #168]
   58968:	str	x0, [sp, #456]
   5896c:	mov	w0, #0x20                  	// #32
   58970:	csel	w0, w1, w0, ne  // ne = any
   58974:	str	w0, [sp, #488]
   58978:	sub	w0, w14, w1
   5897c:	ldr	w1, [sp, #104]
   58980:	str	w0, [sp, #228]
   58984:	add	w0, w1, w15
   58988:	str	w0, [sp, #304]
   5898c:	add	x0, x2, #0xe78
   58990:	str	x0, [sp, #104]
   58994:	and	w0, w4, #0x3
   58998:	str	w0, [sp, #196]
   5899c:	ubfiz	w0, w4, #3, #2
   589a0:	str	w0, [sp, #388]
   589a4:	lsl	w0, w25, #2
   589a8:	str	w0, [sp, #380]
   589ac:	ldr	w0, [sp, #128]
   589b0:	str	w0, [sp, #360]
   589b4:	ubfx	w0, w19, #24, #1
   589b8:	str	w0, [sp, #492]
   589bc:	ubfx	w0, w19, #21, #2
   589c0:	ldrsw	x3, [sp, #124]
   589c4:	str	w0, [sp, #308]
   589c8:	ubfx	w0, w19, #4, #2
   589cc:	str	w19, [sp, #160]
   589d0:	str	x3, [sp, #184]
   589d4:	str	w0, [sp, #496]
   589d8:	and	x0, x19, #0xf0
   589dc:	str	w19, [sp, #428]
   589e0:	str	x0, [sp, #272]
   589e4:	and	x0, x19, #0xf
   589e8:	str	x0, [sp, #432]
   589ec:	and	x0, x19, #0xff
   589f0:	str	x0, [sp, #176]
   589f4:	and	x0, x19, #0x20
   589f8:	str	x0, [sp, #280]
   589fc:	and	x0, x19, #0x800
   58a00:	str	x0, [sp, #392]
   58a04:	and	x0, x19, #0x400
   58a08:	str	x0, [sp, #400]
   58a0c:	and	x0, x19, #0x200
   58a10:	str	x0, [sp, #408]
   58a14:	and	x0, x19, #0x100
   58a18:	str	x0, [sp, #416]
   58a1c:	and	x0, x19, #0x1000000
   58a20:	str	x0, [sp, #216]
   58a24:	add	x0, sp, #0x204
   58a28:	ldr	w2, [sp, #136]
   58a2c:	str	xzr, [sp, #112]
   58a30:	str	w25, [sp, #136]
   58a34:	str	wzr, [sp, #156]
   58a38:	str	x0, [sp, #368]
   58a3c:	ror	w0, w16, w12
   58a40:	str	w0, [sp, #224]
   58a44:	str	x22, [sp, #504]
   58a48:	b	58a70 <aarch64_get_opcode@@Base+0x8008>
   58a4c:	mov	x0, x23
   58a50:	adrp	x1, 68000 <fields@@Base+0x4f60>
   58a54:	add	x1, x1, #0xc30
   58a58:	blr	x24
   58a5c:	mov	x0, x22
   58a60:	mov	x22, x20
   58a64:	mov	x20, x0
   58a68:	ldrb	w2, [x22, #1]
   58a6c:	cbz	w2, 58a90 <aarch64_get_opcode@@Base+0x8028>
   58a70:	cmp	w2, #0x25
   58a74:	add	x22, x20, #0x1
   58a78:	b.ne	58a4c <aarch64_get_opcode@@Base+0x7fe4>  // b.any
   58a7c:	ldrb	w0, [x20, #1]
   58a80:	sub	w0, w0, #0x25
   58a84:	cmp	w0, #0x53
   58a88:	b.ls	58b20 <aarch64_get_opcode@@Base+0x80b8>  // b.plast
   58a8c:	bl	35670 <abort@plt>
   58a90:	ldr	x2, [sp, #112]
   58a94:	add	x0, x2, #0x10
   58a98:	cmp	x0, #0x30
   58a9c:	b.ls	58ab0 <aarch64_get_opcode@@Base+0x8048>  // b.plast
   58aa0:	adrp	x1, 68000 <fields@@Base+0x4f60>
   58aa4:	mov	x0, x23
   58aa8:	add	x1, x1, #0xcb8
   58aac:	blr	x24
   58ab0:	ldr	w0, [sp, #156]
   58ab4:	cbz	w0, 58b64 <aarch64_get_opcode@@Base+0x80fc>
   58ab8:	mov	x0, x23
   58abc:	adrp	x1, 68000 <fields@@Base+0x4f60>
   58ac0:	add	x1, x1, #0xf28
   58ac4:	blr	x24
   58ac8:	ldp	x25, x26, [sp, #64]
   58acc:	ldp	x27, x28, [sp, #80]
   58ad0:	ldp	x29, x30, [sp]
   58ad4:	ldp	x19, x20, [sp, #16]
   58ad8:	ldp	x21, x22, [sp, #32]
   58adc:	ldp	x23, x24, [sp, #48]
   58ae0:	add	sp, sp, #0x210
   58ae4:	ret
   58ae8:	adrp	x0, a0000 <aarch64_operands@@Base+0x10bd0>
   58aec:	mov	x3, x19
   58af0:	add	x0, x0, #0xe70
   58af4:	mov	x2, x21
   58af8:	mov	x1, x22
   58afc:	mov	w4, #0x1                   	// #1
   58b00:	bl	51cc8 <aarch64_get_opcode@@Base+0x1260>
   58b04:	cbnz	w0, 58ad0 <aarch64_get_opcode@@Base+0x8068>
   58b08:	ldp	x0, x1, [x21]
   58b0c:	mov	x2, x19
   58b10:	mov	w3, #0x1                   	// #1
   58b14:	bl	535a8 <aarch64_get_opcode@@Base+0x2b40>
   58b18:	cbz	w0, 585d8 <aarch64_get_opcode@@Base+0x7b70>
   58b1c:	b	58ad0 <aarch64_get_opcode@@Base+0x8068>
   58b20:	adrp	x1, 68000 <fields@@Base+0x4f60>
   58b24:	add	x1, x1, #0x8d0
   58b28:	ldrh	w0, [x1, w0, uxtw #1]
   58b2c:	adr	x1, 58b38 <aarch64_get_opcode@@Base+0x80d0>
   58b30:	add	x0, x1, w0, sxth #2
   58b34:	br	x0
   58b38:	mov	w2, w19
   58b3c:	mov	x0, x23
   58b40:	adrp	x1, 69000 <fields@@Base+0x5f60>
   58b44:	add	x1, x1, #0x200
   58b48:	blr	x24
   58b4c:	ldp	x29, x30, [sp]
   58b50:	ldp	x19, x20, [sp, #16]
   58b54:	ldp	x21, x22, [sp, #32]
   58b58:	ldp	x23, x24, [sp, #48]
   58b5c:	add	sp, sp, #0x210
   58b60:	ret
   58b64:	ldp	x25, x26, [sp, #64]
   58b68:	ldp	x27, x28, [sp, #80]
   58b6c:	b	58ad0 <aarch64_get_opcode@@Base+0x8068>
   58b70:	ldr	x3, [sp, #368]
   58b74:	mov	x0, x22
   58b78:	add	x2, sp, #0x208
   58b7c:	mov	x1, x19
   58b80:	bl	513b0 <aarch64_get_opcode@@Base+0x948>
   58b84:	mov	x22, x0
   58b88:	ldrb	w0, [x0]
   58b8c:	cmp	w0, #0x57
   58b90:	b.eq	59888 <aarch64_get_opcode@@Base+0x8e20>  // b.none
   58b94:	b.ls	59388 <aarch64_get_opcode@@Base+0x8920>  // b.plast
   58b98:	cmp	w0, #0x72
   58b9c:	b.eq	598b4 <aarch64_get_opcode@@Base+0x8e4c>  // b.none
   58ba0:	b.hi	5934c <aarch64_get_opcode@@Base+0x88e4>  // b.pmore
   58ba4:	cmp	w0, #0x63
   58ba8:	b.eq	598e8 <aarch64_get_opcode@@Base+0x8e80>  // b.none
   58bac:	cmp	w0, #0x64
   58bb0:	b.ne	5945c <aarch64_get_opcode@@Base+0x89f4>  // b.any
   58bb4:	ldr	x2, [sp, #520]
   58bb8:	mov	x0, x23
   58bbc:	adrp	x1, 69000 <fields@@Base+0x5f60>
   58bc0:	add	x1, x1, #0x298
   58bc4:	add	x20, x22, #0x1
   58bc8:	blr	x24
   58bcc:	ldr	x0, [sp, #520]
   58bd0:	str	x0, [sp, #112]
   58bd4:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   58bd8:	ldr	w2, [sp, #124]
   58bdc:	mov	x0, x23
   58be0:	adrp	x1, 69000 <fields@@Base+0x5f60>
   58be4:	add	x1, x1, #0x288
   58be8:	add	x20, x20, #0x2
   58bec:	blr	x24
   58bf0:	ldr	x0, [sp, #184]
   58bf4:	str	x0, [sp, #112]
   58bf8:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   58bfc:	mov	w26, #0x1                   	// #1
   58c00:	mov	x0, x23
   58c04:	mov	x25, x23
   58c08:	adrp	x1, 68000 <fields@@Base+0x4f60>
   58c0c:	adrp	x28, fd000 <aarch64_opcode_table@@Base+0x55a20>
   58c10:	add	x1, x1, #0xc90
   58c14:	add	x28, x28, #0x650
   58c18:	blr	x24
   58c1c:	mov	x23, x19
   58c20:	mov	w1, #0x0                   	// #0
   58c24:	mov	w27, #0x0                   	// #0
   58c28:	mov	w0, #0x1                   	// #1
   58c2c:	mov	w19, w27
   58c30:	lsl	w0, w0, w27
   58c34:	sxtw	x0, w0
   58c38:	tst	x0, x23
   58c3c:	b.eq	5933c <aarch64_get_opcode@@Base+0x88d4>  // b.none
   58c40:	cbnz	w1, 58cac <aarch64_get_opcode@@Base+0x8244>
   58c44:	cmp	w26, #0x0
   58c48:	ccmp	w27, #0xd, #0x0, ne  // ne = any
   58c4c:	b.ne	58cc8 <aarch64_get_opcode@@Base+0x8260>  // b.any
   58c50:	ldr	w2, [x28]
   58c54:	adrp	x1, 69000 <fields@@Base+0x5f60>
   58c58:	ldr	x3, [sp, #104]
   58c5c:	mov	w27, #0xe                   	// #14
   58c60:	add	x2, x2, x2, lsl #3
   58c64:	mov	x0, x25
   58c68:	add	x1, x1, #0x840
   58c6c:	mov	w19, w27
   58c70:	add	x2, x3, x2, lsl #4
   58c74:	ldr	x2, [x2, #120]
   58c78:	blr	x24
   58c7c:	tbnz	w23, #14, 58cac <aarch64_get_opcode@@Base+0x8244>
   58c80:	mov	w27, #0xf                   	// #15
   58c84:	mov	w19, w27
   58c88:	tbnz	w23, #15, 58cac <aarch64_get_opcode@@Base+0x8244>
   58c8c:	mov	x19, x23
   58c90:	mov	x23, x25
   58c94:	add	x20, x20, #0x2
   58c98:	mov	x0, x23
   58c9c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   58ca0:	add	x1, x1, #0xd70
   58ca4:	blr	x24
   58ca8:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   58cac:	mov	x0, x25
   58cb0:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   58cb4:	add	x1, x1, #0x438
   58cb8:	blr	x24
   58cbc:	cmp	w26, #0x0
   58cc0:	ccmp	w27, #0xd, #0x0, ne  // ne = any
   58cc4:	b.eq	58c50 <aarch64_get_opcode@@Base+0x81e8>  // b.none
   58cc8:	cmp	w26, #0x0
   58ccc:	ccmp	w27, #0xf, #0x0, ne  // ne = any
   58cd0:	b.ne	5930c <aarch64_get_opcode@@Base+0x88a4>  // b.any
   58cd4:	mov	x19, x23
   58cd8:	mov	x0, x25
   58cdc:	mov	x23, x25
   58ce0:	adrp	x2, 68000 <fields@@Base+0x4f60>
   58ce4:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   58ce8:	add	x2, x2, #0xb18
   58cec:	add	x1, x1, #0xe48
   58cf0:	blr	x24
   58cf4:	b	58c94 <aarch64_get_opcode@@Base+0x822c>
   58cf8:	adrp	x28, fd000 <aarch64_opcode_table@@Base+0x55a20>
   58cfc:	ldr	w25, [sp, #172]
   58d00:	ldr	w4, [sp, #160]
   58d04:	mov	x0, x23
   58d08:	ldr	w2, [x28, #1616]
   58d0c:	mov	w3, w25
   58d10:	and	w27, w4, #0xfff
   58d14:	adrp	x1, 68000 <fields@@Base+0x4f60>
   58d18:	add	x1, x1, #0xcf8
   58d1c:	add	x20, x20, #0x2
   58d20:	add	x2, x2, x2, lsl #3
   58d24:	add	x2, x3, x2, lsl #1
   58d28:	ldr	x3, [sp, #104]
   58d2c:	add	x2, x2, #0x2
   58d30:	ldr	x2, [x3, x2, lsl #3]
   58d34:	blr	x24
   58d38:	ldr	x0, [sp, #200]
   58d3c:	cbz	x0, 595fc <aarch64_get_opcode@@Base+0x8b94>
   58d40:	cmp	w25, #0xf
   58d44:	mov	w28, w27
   58d48:	b.eq	596ac <aarch64_get_opcode@@Base+0x8c44>  // b.none
   58d4c:	str	x28, [sp, #112]
   58d50:	cbz	w27, 59658 <aarch64_get_opcode@@Base+0x8bf0>
   58d54:	mov	w2, w28
   58d58:	mov	x0, x23
   58d5c:	adrp	x1, 68000 <fields@@Base+0x4f60>
   58d60:	add	x1, x1, #0xd18
   58d64:	blr	x24
   58d68:	mov	x0, x23
   58d6c:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   58d70:	add	x1, x1, #0x8c0
   58d74:	blr	x24
   58d78:	ldr	w0, [sp, #172]
   58d7c:	cmp	w0, #0xf
   58d80:	b.ne	58a68 <aarch64_get_opcode@@Base+0x8000>  // b.any
   58d84:	mov	x0, x23
   58d88:	adrp	x1, 68000 <fields@@Base+0x4f60>
   58d8c:	add	x1, x1, #0xd38
   58d90:	blr	x24
   58d94:	ldr	x2, [x21, #120]
   58d98:	mov	x1, x21
   58d9c:	ldr	x0, [sp, #504]
   58da0:	and	x0, x0, #0xfffffffffffffffc
   58da4:	add	x0, x0, x28
   58da8:	blr	x2
   58dac:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   58db0:	ldr	x2, [x21, #120]
   58db4:	mov	x1, x21
   58db8:	ldr	x0, [sp, #248]
   58dbc:	add	x20, x20, #0x2
   58dc0:	blr	x2
   58dc4:	mov	x0, x23
   58dc8:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   58dcc:	add	x1, x1, #0x438
   58dd0:	blr	x24
   58dd4:	ldr	w2, [sp, #304]
   58dd8:	mov	x0, x23
   58ddc:	adrp	x1, 6b000 <fields@@Base+0x7f60>
   58de0:	add	x1, x1, #0xa88
   58de4:	blr	x24
   58de8:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   58dec:	ldr	x2, [x21, #120]
   58df0:	add	x20, x20, #0x2
   58df4:	ldr	x0, [sp, #240]
   58df8:	mov	x1, x21
   58dfc:	blr	x2
   58e00:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   58e04:	adrp	x0, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   58e08:	add	x20, x20, #0x2
   58e0c:	ldr	w0, [x0, #1040]
   58e10:	cbz	w0, 58a68 <aarch64_get_opcode@@Base+0x8000>
   58e14:	ubfx	x2, x0, #4, #4
   58e18:	adrp	x1, 68000 <fields@@Base+0x4f60>
   58e1c:	ldr	x0, [sp, #208]
   58e20:	add	x1, x1, #0xc70
   58e24:	add	x3, x0, #0xdf0
   58e28:	mov	x0, x23
   58e2c:	ldr	x2, [x3, x2, lsl #3]
   58e30:	blr	x24
   58e34:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   58e38:	ldr	x0, [sp, #272]
   58e3c:	add	x20, x20, #0x2
   58e40:	cmp	x0, #0x60
   58e44:	b.eq	596c4 <aarch64_get_opcode@@Base+0x8c5c>  // b.none
   58e48:	ldr	w0, [sp, #160]
   58e4c:	and	w0, w0, #0xf
   58e50:	cmp	w0, #0x9
   58e54:	b.eq	59910 <aarch64_get_opcode@@Base+0x8ea8>  // b.none
   58e58:	b.hi	59544 <aarch64_get_opcode@@Base+0x8adc>  // b.pmore
   58e5c:	cmp	w0, #0x5
   58e60:	b.eq	5987c <aarch64_get_opcode@@Base+0x8e14>  // b.none
   58e64:	b.hi	59528 <aarch64_get_opcode@@Base+0x8ac0>  // b.pmore
   58e68:	cmp	w0, #0x2
   58e6c:	b.eq	59784 <aarch64_get_opcode@@Base+0x8d1c>  // b.none
   58e70:	cmp	w0, #0x3
   58e74:	b.ne	59514 <aarch64_get_opcode@@Base+0x8aac>  // b.any
   58e78:	adrp	x2, 62000 <xexit@@Base+0x6a80>
   58e7c:	add	x2, x2, #0x800
   58e80:	mov	x0, x23
   58e84:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   58e88:	add	x1, x1, #0xe48
   58e8c:	blr	x24
   58e90:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   58e94:	adrp	x0, fd000 <aarch64_opcode_table@@Base+0x55a20>
   58e98:	add	x20, x20, #0x2
   58e9c:	ldr	x1, [sp, #160]
   58ea0:	ldr	w2, [x0, #1616]
   58ea4:	mov	x0, x23
   58ea8:	and	x3, x1, #0xf
   58eac:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   58eb0:	add	x1, x1, #0xe48
   58eb4:	add	x2, x2, x2, lsl #3
   58eb8:	add	x2, x3, x2, lsl #1
   58ebc:	ldr	x3, [sp, #104]
   58ec0:	add	x2, x2, #0x2
   58ec4:	ldr	x2, [x3, x2, lsl #3]
   58ec8:	blr	x24
   58ecc:	ldr	w0, [sp, #196]
   58ed0:	cmp	w0, #0x2
   58ed4:	b.eq	59730 <aarch64_get_opcode@@Base+0x8cc8>  // b.none
   58ed8:	cmp	w0, #0x3
   58edc:	b.eq	59714 <aarch64_get_opcode@@Base+0x8cac>  // b.none
   58ee0:	cmp	w0, #0x1
   58ee4:	b.eq	596fc <aarch64_get_opcode@@Base+0x8c94>  // b.none
   58ee8:	ldr	w2, [sp, #120]
   58eec:	cbz	w2, 58a68 <aarch64_get_opcode@@Base+0x8000>
   58ef0:	mov	x0, x23
   58ef4:	adrp	x1, 69000 <fields@@Base+0x5f60>
   58ef8:	add	x1, x1, #0x7d8
   58efc:	blr	x24
   58f00:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   58f04:	adrp	x0, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   58f08:	add	x20, x20, #0x2
   58f0c:	ldr	w0, [x0, #1040]
   58f10:	cbz	w0, 58a68 <aarch64_get_opcode@@Base+0x8000>
   58f14:	ubfx	x2, x0, #4, #4
   58f18:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   58f1c:	ldr	x0, [sp, #208]
   58f20:	add	x1, x1, #0xe48
   58f24:	add	x3, x0, #0xdf0
   58f28:	mov	x0, x23
   58f2c:	ldr	x2, [x3, x2, lsl #3]
   58f30:	blr	x24
   58f34:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   58f38:	ldr	w0, [sp, #196]
   58f3c:	add	x20, x20, #0x2
   58f40:	cbz	w0, 58a68 <aarch64_get_opcode@@Base+0x8000>
   58f44:	ldr	w2, [sp, #388]
   58f48:	mov	x0, x23
   58f4c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   58f50:	add	x1, x1, #0x808
   58f54:	blr	x24
   58f58:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   58f5c:	ldr	x2, [x21, #120]
   58f60:	add	x20, x20, #0x2
   58f64:	ldr	x0, [sp, #256]
   58f68:	mov	x1, x21
   58f6c:	blr	x2
   58f70:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   58f74:	ldr	x2, [x21, #120]
   58f78:	add	x20, x20, #0x2
   58f7c:	ldr	x0, [sp, #264]
   58f80:	mov	x1, x21
   58f84:	blr	x2
   58f88:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   58f8c:	ldr	w0, [sp, #192]
   58f90:	cmp	w0, #0x2
   58f94:	b.eq	5977c <aarch64_get_opcode@@Base+0x8d14>  // b.none
   58f98:	b.hi	594d4 <aarch64_get_opcode@@Base+0x8a6c>  // b.pmore
   58f9c:	ldr	w2, [sp, #324]
   58fa0:	cbz	w0, 58fb4 <aarch64_get_opcode@@Base+0x854c>
   58fa4:	cmp	w0, #0x1
   58fa8:	ldr	w1, [sp, #332]
   58fac:	ldr	w0, [sp, #224]
   58fb0:	csel	w2, w0, w1, ne  // ne = any
   58fb4:	mov	w0, w2
   58fb8:	str	x0, [sp, #112]
   58fbc:	add	x20, x20, #0x2
   58fc0:	mov	x0, x23
   58fc4:	adrp	x1, 69000 <fields@@Base+0x5f60>
   58fc8:	add	x1, x1, #0x288
   58fcc:	blr	x24
   58fd0:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   58fd4:	ldr	x0, [sp, #288]
   58fd8:	add	x20, x20, #0x2
   58fdc:	cmp	x0, #0xf
   58fe0:	b.ne	58a68 <aarch64_get_opcode@@Base+0x8000>  // b.any
   58fe4:	mov	x0, x23
   58fe8:	adrp	x1, 68000 <fields@@Base+0x4f60>
   58fec:	add	x1, x1, #0xd38
   58ff0:	blr	x24
   58ff4:	ldr	x2, [x21, #120]
   58ff8:	mov	x1, x21
   58ffc:	ldr	x0, [sp, #440]
   59000:	blr	x2
   59004:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   59008:	ldr	w2, [sp, #144]
   5900c:	mov	x0, x23
   59010:	adrp	x1, 69000 <fields@@Base+0x5f60>
   59014:	add	x1, x1, #0x288
   59018:	add	x20, x20, #0x2
   5901c:	blr	x24
   59020:	ldr	x0, [sp, #336]
   59024:	str	x0, [sp, #112]
   59028:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   5902c:	ldr	w2, [sp, #148]
   59030:	mov	x0, x23
   59034:	adrp	x1, 69000 <fields@@Base+0x5f60>
   59038:	add	x1, x1, #0x288
   5903c:	add	x20, x20, #0x2
   59040:	blr	x24
   59044:	ldr	x0, [sp, #344]
   59048:	str	x0, [sp, #112]
   5904c:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   59050:	ldr	w2, [sp, #140]
   59054:	mov	x0, x23
   59058:	adrp	x1, 69000 <fields@@Base+0x5f60>
   5905c:	add	x1, x1, #0x288
   59060:	add	x20, x20, #0x2
   59064:	blr	x24
   59068:	ldr	x0, [sp, #352]
   5906c:	str	x0, [sp, #112]
   59070:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   59074:	adrp	x0, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   59078:	add	x20, x20, #0x2
   5907c:	ldr	w0, [x0, #1044]
   59080:	cbz	w0, 58a68 <aarch64_get_opcode@@Base+0x8000>
   59084:	mov	x0, x23
   59088:	adrp	x1, 68000 <fields@@Base+0x4f60>
   5908c:	add	x1, x1, #0xc48
   59090:	blr	x24
   59094:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   59098:	ldr	w2, [sp, #320]
   5909c:	add	x20, x20, #0x2
   590a0:	mov	x0, x23
   590a4:	adrp	x1, 6b000 <fields@@Base+0x7f60>
   590a8:	add	x1, x1, #0xa88
   590ac:	blr	x24
   590b0:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   590b4:	ldr	w2, [sp, #120]
   590b8:	add	x20, x20, #0x2
   590bc:	ldr	w3, [sp, #364]
   590c0:	mov	x0, x23
   590c4:	adrp	x1, 69000 <fields@@Base+0x5f60>
   590c8:	add	x1, x1, #0x850
   590cc:	blr	x24
   590d0:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   590d4:	ldr	w2, [sp, #120]
   590d8:	add	x20, x20, #0x2
   590dc:	ldr	w3, [sp, #228]
   590e0:	mov	x0, x23
   590e4:	adrp	x1, 69000 <fields@@Base+0x5f60>
   590e8:	add	x1, x1, #0x850
   590ec:	blr	x24
   590f0:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   590f4:	ldr	x0, [sp, #176]
   590f8:	add	x20, x20, #0x2
   590fc:	cbz	x0, 594ec <aarch64_get_opcode@@Base+0x8a84>
   59100:	ldr	x0, [sp, #280]
   59104:	cbnz	x0, 594ec <aarch64_get_opcode@@Base+0x8a84>
   59108:	ldr	w0, [sp, #136]
   5910c:	bl	51258 <aarch64_get_opcode@@Base+0x7f0>
   59110:	mov	x2, x0
   59114:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   59118:	mov	x0, x23
   5911c:	add	x1, x1, #0xe48
   59120:	blr	x24
   59124:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   59128:	ldr	x0, [sp, #176]
   5912c:	add	x20, x20, #0x2
   59130:	cbnz	x0, 595cc <aarch64_get_opcode@@Base+0x8b64>
   59134:	ldr	w2, [sp, #424]
   59138:	mov	x0, x23
   5913c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   59140:	add	x1, x1, #0x1a0
   59144:	blr	x24
   59148:	ldr	x0, [sp, #392]
   5914c:	cbz	x0, 59160 <aarch64_get_opcode@@Base+0x86f8>
   59150:	adrp	x1, 75000 <fields@@Base+0x11f60>
   59154:	mov	x0, x23
   59158:	add	x1, x1, #0xf8
   5915c:	blr	x24
   59160:	ldr	x0, [sp, #400]
   59164:	cbz	x0, 59178 <aarch64_get_opcode@@Base+0x8710>
   59168:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   5916c:	mov	x0, x23
   59170:	add	x1, x1, #0x460
   59174:	blr	x24
   59178:	ldr	x0, [sp, #408]
   5917c:	cbz	x0, 59190 <aarch64_get_opcode@@Base+0x8728>
   59180:	adrp	x1, 6b000 <fields@@Base+0x7f60>
   59184:	mov	x0, x23
   59188:	add	x1, x1, #0xa98
   5918c:	blr	x24
   59190:	ldr	x0, [sp, #416]
   59194:	cbz	x0, 58a68 <aarch64_get_opcode@@Base+0x8000>
   59198:	mov	x0, x23
   5919c:	adrp	x1, 62000 <xexit@@Base+0x6a80>
   591a0:	add	x1, x1, #0x7d8
   591a4:	blr	x24
   591a8:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   591ac:	ldr	x2, [x21, #120]
   591b0:	add	x20, x20, #0x2
   591b4:	ldr	x0, [sp, #232]
   591b8:	mov	x1, x21
   591bc:	blr	x2
   591c0:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   591c4:	add	x20, x20, #0x2
   591c8:	mov	x0, x23
   591cc:	adrp	x1, 68000 <fields@@Base+0x4f60>
   591d0:	add	x1, x1, #0xc38
   591d4:	blr	x24
   591d8:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   591dc:	ldr	w0, [sp, #308]
   591e0:	add	x20, x20, #0x2
   591e4:	cmp	w0, #0x2
   591e8:	b.eq	59688 <aarch64_get_opcode@@Base+0x8c20>  // b.none
   591ec:	cmp	w0, #0x3
   591f0:	b.eq	59690 <aarch64_get_opcode@@Base+0x8c28>  // b.none
   591f4:	cmp	w0, #0x1
   591f8:	b.eq	59748 <aarch64_get_opcode@@Base+0x8ce0>  // b.none
   591fc:	ldr	x1, [sp, #472]
   59200:	mov	x0, x23
   59204:	blr	x24
   59208:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   5920c:	ldr	x0, [sp, #128]
   59210:	add	x20, x20, #0x2
   59214:	cbz	x0, 58ee8 <aarch64_get_opcode@@Base+0x8480>
   59218:	ldr	w2, [sp, #120]
   5921c:	mov	x0, x23
   59220:	adrp	x1, 69000 <fields@@Base+0x5f60>
   59224:	add	x1, x1, #0x7f8
   59228:	blr	x24
   5922c:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   59230:	ldr	x2, [x21, #120]
   59234:	add	x20, x20, #0x2
   59238:	ldr	x25, [sp, #296]
   5923c:	mov	x1, x21
   59240:	mov	x0, x25
   59244:	blr	x2
   59248:	mov	w1, #0x1                   	// #1
   5924c:	mov	w0, #0x2                   	// #2
   59250:	strb	w1, [x21, #196]
   59254:	str	w0, [x21, #200]
   59258:	str	x25, [x21, #208]
   5925c:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   59260:	adrp	x0, fd000 <aarch64_opcode_table@@Base+0x55a20>
   59264:	ldr	w3, [sp, #172]
   59268:	adrp	x1, 68000 <fields@@Base+0x4f60>
   5926c:	add	x1, x1, #0xcf8
   59270:	ldr	w2, [x0, #1616]
   59274:	mov	x0, x23
   59278:	add	x20, x20, #0x2
   5927c:	add	x2, x2, x2, lsl #3
   59280:	add	x2, x3, x2, lsl #1
   59284:	ldr	x3, [sp, #104]
   59288:	add	x2, x2, #0x2
   5928c:	ldr	x2, [x3, x2, lsl #3]
   59290:	blr	x24
   59294:	ldr	x0, [sp, #216]
   59298:	cbz	x0, 59588 <aarch64_get_opcode@@Base+0x8b20>
   5929c:	ldr	w0, [sp, #384]
   592a0:	cbz	w0, 592cc <aarch64_get_opcode@@Base+0x8864>
   592a4:	ldr	x0, [sp, #200]
   592a8:	cbz	x0, 59844 <aarch64_get_opcode@@Base+0x8ddc>
   592ac:	ldr	w3, [sp, #380]
   592b0:	adrp	x1, 69000 <fields@@Base+0x5f60>
   592b4:	mov	x0, x23
   592b8:	add	x1, x1, #0x860
   592bc:	mov	w2, #0x2b                  	// #43
   592c0:	blr	x24
   592c4:	ldr	x0, [sp, #448]
   592c8:	str	x0, [sp, #112]
   592cc:	mov	x0, x23
   592d0:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   592d4:	add	x1, x1, #0x8c0
   592d8:	blr	x24
   592dc:	ldr	w0, [sp, #360]
   592e0:	cbz	w0, 58a68 <aarch64_get_opcode@@Base+0x8000>
   592e4:	mov	x0, x23
   592e8:	adrp	x1, 68000 <fields@@Base+0x4f60>
   592ec:	add	x1, x1, #0xc98
   592f0:	blr	x24
   592f4:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   592f8:	add	x20, x20, #0x2
   592fc:	mov	x1, x21
   59300:	ldr	x2, [x21, #120]
   59304:	ldr	x25, [sp, #312]
   59308:	b	59240 <aarch64_get_opcode@@Base+0x87d8>
   5930c:	ldr	w2, [x28]
   59310:	mov	x0, x25
   59314:	ldr	x3, [sp, #104]
   59318:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   5931c:	add	x2, x2, x2, lsl #3
   59320:	add	x1, x1, #0xe48
   59324:	lsl	x2, x2, #1
   59328:	add	x2, x2, w19, sxtw
   5932c:	add	x2, x2, #0x2
   59330:	ldr	x2, [x3, x2, lsl #3]
   59334:	blr	x24
   59338:	mov	w1, #0x1                   	// #1
   5933c:	add	w27, w27, #0x1
   59340:	cmp	w27, #0x10
   59344:	b.ne	58c28 <aarch64_get_opcode@@Base+0x81c0>  // b.any
   59348:	b	58c8c <aarch64_get_opcode@@Base+0x8224>
   5934c:	cmp	w0, #0x73
   59350:	b.ne	593e4 <aarch64_get_opcode@@Base+0x897c>  // b.any
   59354:	ldr	x3, [sp, #520]
   59358:	cmp	x3, #0x3
   5935c:	b.hi	5991c <aarch64_get_opcode@@Base+0x8eb4>  // b.pmore
   59360:	adrp	x0, 92000 <aarch64_operands@@Base+0x2bd0>
   59364:	add	x2, x0, #0xc60
   59368:	add	x2, x2, #0x840
   5936c:	mov	x0, x23
   59370:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   59374:	add	x20, x22, #0x1
   59378:	add	x1, x1, #0xe48
   5937c:	ldr	x2, [x2, x3, lsl #3]
   59380:	blr	x24
   59384:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   59388:	cmp	w0, #0x44
   5938c:	b.eq	598bc <aarch64_get_opcode@@Base+0x8e54>  // b.none
   59390:	b.ls	59428 <aarch64_get_opcode@@Base+0x89c0>  // b.plast
   59394:	cmp	w0, #0x52
   59398:	b.ne	59408 <aarch64_get_opcode@@Base+0x89a0>  // b.any
   5939c:	ldr	x3, [sp, #520]
   593a0:	cmp	x3, #0xf
   593a4:	ldr	w0, [sp, #156]
   593a8:	csinc	w0, w0, wzr, ne  // ne = any
   593ac:	str	w0, [sp, #156]
   593b0:	adrp	x2, fd000 <aarch64_opcode_table@@Base+0x55a20>
   593b4:	mov	x0, x23
   593b8:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   593bc:	add	x20, x22, #0x1
   593c0:	ldr	w2, [x2, #1616]
   593c4:	add	x1, x1, #0xe48
   593c8:	add	x2, x2, x2, lsl #3
   593cc:	add	x2, x3, x2, lsl #1
   593d0:	ldr	x3, [sp, #104]
   593d4:	add	x2, x2, #0x2
   593d8:	ldr	x2, [x3, x2, lsl #3]
   593dc:	blr	x24
   593e0:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   593e4:	cmp	w0, #0x78
   593e8:	b.ne	58a8c <aarch64_get_opcode@@Base+0x8024>  // b.any
   593ec:	ldr	w2, [sp, #520]
   593f0:	mov	x0, x23
   593f4:	adrp	x1, 68000 <fields@@Base+0x4f60>
   593f8:	add	x20, x22, #0x1
   593fc:	add	x1, x1, #0xeb0
   59400:	blr	x24
   59404:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   59408:	cmp	w0, #0x53
   5940c:	b.ne	58a8c <aarch64_get_opcode@@Base+0x8024>  // b.any
   59410:	ldr	x3, [sp, #520]
   59414:	cmp	x3, #0xd
   59418:	b.ne	593a0 <aarch64_get_opcode@@Base+0x8938>  // b.any
   5941c:	mov	w0, #0x1                   	// #1
   59420:	str	w0, [sp, #156]
   59424:	b	593b0 <aarch64_get_opcode@@Base+0x8948>
   59428:	cmp	w0, #0x27
   5942c:	b.ne	59490 <aarch64_get_opcode@@Base+0x8a28>  // b.any
   59430:	ldr	w2, [sp, #516]
   59434:	mov	x0, #0x1                   	// #1
   59438:	ldr	x1, [sp, #520]
   5943c:	lsl	x0, x0, x2
   59440:	sub	x0, x0, #0x1
   59444:	cmp	x0, x1
   59448:	add	x0, x22, #0x1
   5944c:	b.eq	59470 <aarch64_get_opcode@@Base+0x8a08>  // b.none
   59450:	mov	x22, x0
   59454:	add	x20, x22, #0x1
   59458:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   5945c:	cmp	w0, #0x60
   59460:	b.ne	58a8c <aarch64_get_opcode@@Base+0x8024>  // b.any
   59464:	ldr	x1, [sp, #520]
   59468:	add	x0, x22, #0x1
   5946c:	cbnz	x1, 59450 <aarch64_get_opcode@@Base+0x89e8>
   59470:	ldrb	w2, [x22, #1]
   59474:	mov	x22, x0
   59478:	adrp	x1, 68000 <fields@@Base+0x4f60>
   5947c:	mov	x0, x23
   59480:	add	x1, x1, #0xc30
   59484:	add	x20, x22, #0x1
   59488:	blr	x24
   5948c:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   59490:	cmp	w0, #0x3f
   59494:	b.ne	58a8c <aarch64_get_opcode@@Base+0x8024>  // b.any
   59498:	ldr	w2, [sp, #516]
   5949c:	mov	w20, #0x1                   	// #1
   594a0:	ldr	x0, [sp, #520]
   594a4:	adrp	x1, 68000 <fields@@Base+0x4f60>
   594a8:	lsl	w2, w20, w2
   594ac:	add	x1, x1, #0xc30
   594b0:	sub	w2, w2, w0
   594b4:	mov	x0, x23
   594b8:	ldrb	w2, [x22, w2, sxtw]
   594bc:	blr	x24
   594c0:	ldr	w0, [sp, #516]
   594c4:	lsl	w20, w20, w0
   594c8:	add	x22, x22, w20, sxtw
   594cc:	add	x20, x22, #0x1
   594d0:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   594d4:	ldr	w0, [sp, #192]
   594d8:	ldr	w1, [sp, #328]
   594dc:	cmp	w0, #0x3
   594e0:	ldr	w0, [sp, #224]
   594e4:	csel	w2, w0, w1, ne  // ne = any
   594e8:	b	58fb4 <aarch64_get_opcode@@Base+0x854c>
   594ec:	ldr	w0, [sp, #152]
   594f0:	bl	51088 <aarch64_get_opcode@@Base+0x620>
   594f4:	mov	x2, x0
   594f8:	cbnz	x0, 58e80 <aarch64_get_opcode@@Base+0x8418>
   594fc:	ldr	x2, [sp, #464]
   59500:	mov	x0, x23
   59504:	adrp	x1, 69000 <fields@@Base+0x5f60>
   59508:	add	x1, x1, #0x190
   5950c:	blr	x24
   59510:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   59514:	cmp	w0, #0x1
   59518:	b.ne	5966c <aarch64_get_opcode@@Base+0x8c04>  // b.any
   5951c:	adrp	x2, 62000 <xexit@@Base+0x6a80>
   59520:	add	x2, x2, #0x7f0
   59524:	b	58e80 <aarch64_get_opcode@@Base+0x8418>
   59528:	cmp	w0, #0x6
   5952c:	b.eq	596e4 <aarch64_get_opcode@@Base+0x8c7c>  // b.none
   59530:	cmp	w0, #0x7
   59534:	b.ne	5966c <aarch64_get_opcode@@Base+0x8c04>  // b.any
   59538:	adrp	x2, 69000 <fields@@Base+0x5f60>
   5953c:	add	x2, x2, #0x140
   59540:	b	58e80 <aarch64_get_opcode@@Base+0x8418>
   59544:	cmp	w0, #0xd
   59548:	b.eq	59820 <aarch64_get_opcode@@Base+0x8db8>  // b.none
   5954c:	b.ls	5956c <aarch64_get_opcode@@Base+0x8b04>  // b.plast
   59550:	cmp	w0, #0xe
   59554:	adrp	x2, 62000 <xexit@@Base+0x6a80>
   59558:	adrp	x0, 66000 <fields@@Base+0x2f60>
   5955c:	add	x2, x2, #0x850
   59560:	add	x0, x0, #0xb0
   59564:	csel	x2, x2, x0, ne  // ne = any
   59568:	b	58e80 <aarch64_get_opcode@@Base+0x8418>
   5956c:	cmp	w0, #0xa
   59570:	b.eq	596f0 <aarch64_get_opcode@@Base+0x8c88>  // b.none
   59574:	cmp	w0, #0xb
   59578:	b.ne	5966c <aarch64_get_opcode@@Base+0x8c04>  // b.any
   5957c:	adrp	x2, 62000 <xexit@@Base+0x6a80>
   59580:	add	x2, x2, #0x840
   59584:	b	58e80 <aarch64_get_opcode@@Base+0x8418>
   59588:	mov	x0, x23
   5958c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   59590:	add	x1, x1, #0x830
   59594:	blr	x24
   59598:	ldr	w0, [sp, #360]
   5959c:	cbz	w0, 59758 <aarch64_get_opcode@@Base+0x8cf0>
   595a0:	ldr	x0, [sp, #200]
   595a4:	cbz	x0, 59860 <aarch64_get_opcode@@Base+0x8df8>
   595a8:	ldr	w3, [sp, #380]
   595ac:	adrp	x1, 69000 <fields@@Base+0x5f60>
   595b0:	mov	x0, x23
   595b4:	add	x1, x1, #0x868
   595b8:	mov	w2, #0x2b                  	// #43
   595bc:	blr	x24
   595c0:	ldr	x0, [sp, #448]
   595c4:	str	x0, [sp, #112]
   595c8:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   595cc:	ldr	x0, [sp, #280]
   595d0:	cbz	x0, 59108 <aarch64_get_opcode@@Base+0x86a0>
   595d4:	ldr	w0, [sp, #168]
   595d8:	bl	51088 <aarch64_get_opcode@@Base+0x620>
   595dc:	mov	x2, x0
   595e0:	cbnz	x0, 58e80 <aarch64_get_opcode@@Base+0x8418>
   595e4:	ldr	x2, [sp, #456]
   595e8:	mov	x0, x23
   595ec:	adrp	x1, 69000 <fields@@Base+0x5f60>
   595f0:	add	x1, x1, #0x190
   595f4:	blr	x24
   595f8:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   595fc:	ldr	w0, [sp, #172]
   59600:	cmp	w0, #0xf
   59604:	b.eq	596a4 <aarch64_get_opcode@@Base+0x8c3c>  // b.none
   59608:	ldr	w0, [sp, #376]
   5960c:	cbnz	w0, 59790 <aarch64_get_opcode@@Base+0x8d28>
   59610:	ldr	w2, [x28, #1616]
   59614:	adrp	x1, 5d000 <xexit@@Base+0x1a80>
   59618:	ldr	x0, [sp, #160]
   5961c:	add	x1, x1, #0x160
   59620:	add	x2, x2, x2, lsl #3
   59624:	and	x3, x0, #0xf
   59628:	mov	x0, x23
   5962c:	add	x2, x3, x2, lsl #1
   59630:	ldr	x3, [sp, #104]
   59634:	add	x2, x2, #0x2
   59638:	ldr	x2, [x3, x2, lsl #3]
   5963c:	blr	x24
   59640:	ldr	w2, [sp, #496]
   59644:	cbz	w2, 59658 <aarch64_get_opcode@@Base+0x8bf0>
   59648:	adrp	x1, 69000 <fields@@Base+0x5f60>
   5964c:	mov	x0, x23
   59650:	add	x1, x1, #0x7d8
   59654:	blr	x24
   59658:	mov	x0, x23
   5965c:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   59660:	add	x1, x1, #0x8c0
   59664:	blr	x24
   59668:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   5966c:	ldr	w0, [sp, #428]
   59670:	adrp	x1, 69000 <fields@@Base+0x5f60>
   59674:	add	x1, x1, #0x180
   59678:	and	w2, w0, #0xf
   5967c:	mov	x0, x23
   59680:	blr	x24
   59684:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   59688:	ldr	w0, [sp, #492]
   5968c:	cbz	w0, 58a68 <aarch64_get_opcode@@Base+0x8000>
   59690:	mov	x0, x23
   59694:	adrp	x1, 68000 <fields@@Base+0x4f60>
   59698:	add	x1, x1, #0xeb8
   5969c:	blr	x24
   596a0:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   596a4:	neg	w5, w27
   596a8:	sxtw	x28, w5
   596ac:	cbnz	x28, 58d54 <aarch64_get_opcode@@Base+0x82ec>
   596b0:	mov	x0, x23
   596b4:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   596b8:	add	x1, x1, #0x8c0
   596bc:	blr	x24
   596c0:	b	58d84 <aarch64_get_opcode@@Base+0x831c>
   596c4:	ldr	x0, [sp, #432]
   596c8:	cmp	x0, #0xf
   596cc:	b.ne	5966c <aarch64_get_opcode@@Base+0x8c04>  // b.any
   596d0:	mov	x0, x23
   596d4:	adrp	x1, 62000 <xexit@@Base+0x6a80>
   596d8:	add	x1, x1, #0x850
   596dc:	blr	x24
   596e0:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   596e4:	adrp	x2, 69000 <fields@@Base+0x5f60>
   596e8:	add	x2, x2, #0x148
   596ec:	b	58e80 <aarch64_get_opcode@@Base+0x8418>
   596f0:	adrp	x2, 62000 <xexit@@Base+0x6a80>
   596f4:	add	x2, x2, #0x838
   596f8:	b	58e80 <aarch64_get_opcode@@Base+0x8418>
   596fc:	ldr	w2, [sp, #488]
   59700:	mov	x0, x23
   59704:	adrp	x1, 69000 <fields@@Base+0x5f60>
   59708:	add	x1, x1, #0x7e8
   5970c:	blr	x24
   59710:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   59714:	ldr	w0, [sp, #120]
   59718:	cbnz	w0, 5982c <aarch64_get_opcode@@Base+0x8dc4>
   5971c:	mov	x0, x23
   59720:	adrp	x1, 68000 <fields@@Base+0x4f60>
   59724:	add	x1, x1, #0xf48
   59728:	blr	x24
   5972c:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   59730:	ldr	w2, [sp, #488]
   59734:	mov	x0, x23
   59738:	adrp	x1, 69000 <fields@@Base+0x5f60>
   5973c:	add	x1, x1, #0x7f8
   59740:	blr	x24
   59744:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   59748:	ldr	x1, [sp, #480]
   5974c:	mov	x0, x23
   59750:	blr	x24
   59754:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   59758:	ldr	w25, [sp, #136]
   5975c:	mov	x0, x23
   59760:	adrp	x1, 69000 <fields@@Base+0x5f60>
   59764:	add	x1, x1, #0x838
   59768:	mov	w2, w25
   5976c:	blr	x24
   59770:	mov	w0, w25
   59774:	str	x0, [sp, #112]
   59778:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   5977c:	ldr	w2, [sp, #500]
   59780:	b	58fb4 <aarch64_get_opcode@@Base+0x854c>
   59784:	adrp	x2, 62000 <xexit@@Base+0x6a80>
   59788:	add	x2, x2, #0x7f8
   5978c:	b	58e80 <aarch64_get_opcode@@Base+0x8418>
   59790:	ldr	w0, [sp, #376]
   59794:	cmp	w0, #0xd
   59798:	b.eq	59950 <aarch64_get_opcode@@Base+0x8ee8>  // b.none
   5979c:	b.hi	597f4 <aarch64_get_opcode@@Base+0x8d8c>  // b.pmore
   597a0:	cmp	w0, #0xb
   597a4:	b.eq	59934 <aarch64_get_opcode@@Base+0x8ecc>  // b.none
   597a8:	cmp	w0, #0xc
   597ac:	ldr	w0, [sp, #136]
   597b0:	neg	w28, w0
   597b4:	b.ne	597d0 <aarch64_get_opcode@@Base+0x8d68>  // b.any
   597b8:	cbnz	x28, 58d54 <aarch64_get_opcode@@Base+0x82ec>
   597bc:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   597c0:	add	x1, x1, #0x8c0
   597c4:	mov	x0, x23
   597c8:	blr	x24
   597cc:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   597d0:	ldr	w0, [sp, #376]
   597d4:	mov	x2, x28
   597d8:	cmp	w0, #0x9
   597dc:	b.ne	5993c <aarch64_get_opcode@@Base+0x8ed4>  // b.any
   597e0:	mov	x0, x23
   597e4:	adrp	x1, 69000 <fields@@Base+0x5f60>
   597e8:	add	x1, x1, #0x828
   597ec:	blr	x24
   597f0:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   597f4:	ldr	w2, [sp, #136]
   597f8:	ldr	w0, [sp, #376]
   597fc:	mov	x28, x2
   59800:	cmp	w0, #0xe
   59804:	b.eq	597b8 <aarch64_get_opcode@@Base+0x8d50>  // b.none
   59808:	cbnz	x2, 5995c <aarch64_get_opcode@@Base+0x8ef4>
   5980c:	mov	x0, x23
   59810:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   59814:	add	x1, x1, #0xbe8
   59818:	blr	x24
   5981c:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   59820:	adrp	x2, 66000 <fields@@Base+0x2f60>
   59824:	add	x2, x2, #0x348
   59828:	b	58e80 <aarch64_get_opcode@@Base+0x8418>
   5982c:	ldr	w2, [sp, #120]
   59830:	mov	x0, x23
   59834:	adrp	x1, 69000 <fields@@Base+0x5f60>
   59838:	add	x1, x1, #0x808
   5983c:	blr	x24
   59840:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   59844:	ldr	w3, [sp, #380]
   59848:	mov	x0, x23
   5984c:	adrp	x1, 69000 <fields@@Base+0x5f60>
   59850:	mov	w2, #0x2d                  	// #45
   59854:	add	x1, x1, #0x860
   59858:	blr	x24
   5985c:	b	592c4 <aarch64_get_opcode@@Base+0x885c>
   59860:	ldr	w3, [sp, #380]
   59864:	mov	x0, x23
   59868:	adrp	x1, 69000 <fields@@Base+0x5f60>
   5986c:	mov	w2, #0x2d                  	// #45
   59870:	add	x1, x1, #0x868
   59874:	blr	x24
   59878:	b	595c0 <aarch64_get_opcode@@Base+0x8b58>
   5987c:	adrp	x2, 62000 <xexit@@Base+0x6a80>
   59880:	add	x2, x2, #0x810
   59884:	b	58e80 <aarch64_get_opcode@@Base+0x8418>
   59888:	ldr	x2, [sp, #520]
   5988c:	mov	x0, x23
   59890:	adrp	x1, 69000 <fields@@Base+0x5f60>
   59894:	add	x1, x1, #0x298
   59898:	add	x20, x22, #0x1
   5989c:	lsl	x2, x2, #2
   598a0:	blr	x24
   598a4:	ldr	x0, [sp, #520]
   598a8:	lsl	x0, x0, #2
   598ac:	str	x0, [sp, #112]
   598b0:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   598b4:	ldr	x3, [sp, #520]
   598b8:	b	593b0 <aarch64_get_opcode@@Base+0x8948>
   598bc:	ldr	x2, [sp, #520]
   598c0:	mov	x0, x23
   598c4:	adrp	x1, 69000 <fields@@Base+0x5f60>
   598c8:	add	x1, x1, #0x298
   598cc:	add	x2, x2, #0x1
   598d0:	blr	x24
   598d4:	ldr	x0, [sp, #520]
   598d8:	add	x20, x22, #0x1
   598dc:	add	x0, x0, #0x1
   598e0:	str	x0, [sp, #112]
   598e4:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   598e8:	ldr	x0, [sp, #208]
   598ec:	adrp	x1, 6d000 <fields@@Base+0x9f60>
   598f0:	ldr	x3, [sp, #520]
   598f4:	add	x2, x0, #0xdf0
   598f8:	add	x1, x1, #0xe48
   598fc:	mov	x0, x23
   59900:	add	x20, x22, #0x1
   59904:	ldr	x2, [x2, x3, lsl #3]
   59908:	blr	x24
   5990c:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   59910:	adrp	x2, 62000 <xexit@@Base+0x6a80>
   59914:	add	x2, x2, #0x830
   59918:	b	58e80 <aarch64_get_opcode@@Base+0x8418>
   5991c:	mov	x0, x23
   59920:	adrp	x1, 69000 <fields@@Base+0x5f60>
   59924:	add	x20, x22, #0x1
   59928:	add	x1, x1, #0x358
   5992c:	blr	x24
   59930:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   59934:	ldr	w2, [sp, #136]
   59938:	b	597e0 <aarch64_get_opcode@@Base+0x8d78>
   5993c:	mov	x0, x23
   59940:	adrp	x1, 69000 <fields@@Base+0x5f60>
   59944:	add	x1, x1, #0x818
   59948:	blr	x24
   5994c:	b	58a68 <aarch64_get_opcode@@Base+0x8000>
   59950:	ldr	w0, [sp, #136]
   59954:	neg	w2, w0
   59958:	b	59808 <aarch64_get_opcode@@Base+0x8da0>
   5995c:	mov	x0, x23
   59960:	adrp	x1, 68000 <fields@@Base+0x4f60>
   59964:	add	x1, x1, #0xd18
   59968:	blr	x24
   5996c:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   59970:	add	x1, x1, #0xbe8
   59974:	b	597c4 <aarch64_get_opcode@@Base+0x8d5c>

0000000000059978 <arm_symbol_is_valid@@Base>:
   59978:	cbz	x0, 599c4 <arm_symbol_is_valid@@Base+0x4c>
   5997c:	ldr	x1, [x0, #8]
   59980:	mov	w0, #0x0                   	// #0
   59984:	cbz	x1, 599c0 <arm_symbol_is_valid@@Base+0x48>
   59988:	ldrb	w2, [x1]
   5998c:	cmp	w2, #0x24
   59990:	b.eq	599c0 <arm_symbol_is_valid@@Base+0x48>  // b.none
   59994:	stp	x29, x30, [sp, #-16]!
   59998:	mov	x0, x1
   5999c:	mov	x2, #0xa                   	// #10
   599a0:	mov	x29, sp
   599a4:	adrp	x1, 69000 <fields@@Base+0x5f60>
   599a8:	add	x1, x1, #0x870
   599ac:	bl	35440 <strncmp@plt>
   599b0:	cmp	w0, #0x0
   599b4:	cset	w0, ne  // ne = any
   599b8:	ldp	x29, x30, [sp], #16
   599bc:	ret
   599c0:	ret
   599c4:	mov	w0, #0x0                   	// #0
   599c8:	ret
   599cc:	nop

00000000000599d0 <print_insn_big_arm@@Base>:
   599d0:	ldr	w2, [x1, #24]
   599d4:	cmp	w2, #0x5
   599d8:	b.eq	599e4 <print_insn_big_arm@@Base+0x14>  // b.none
   599dc:	mov	w2, #0x0                   	// #0
   599e0:	b	57ac8 <aarch64_get_opcode@@Base+0x7060>
   599e4:	ldr	x2, [x1, #48]
   599e8:	cbz	x2, 599dc <print_insn_big_arm@@Base+0xc>
   599ec:	ldr	x2, [x2, #240]
   599f0:	ldr	x2, [x2, #248]
   599f4:	ldr	x2, [x2, #48]
   599f8:	tbz	w2, #23, 599dc <print_insn_big_arm@@Base+0xc>
   599fc:	mov	w2, #0x1                   	// #1
   59a00:	str	w2, [x1, #44]
   59a04:	mov	w2, #0x0                   	// #0
   59a08:	b	57ac8 <aarch64_get_opcode@@Base+0x7060>
   59a0c:	nop

0000000000059a10 <print_insn_little_arm@@Base>:
   59a10:	mov	w2, #0x1                   	// #1
   59a14:	b	57ac8 <aarch64_get_opcode@@Base+0x7060>

0000000000059a18 <disassembler_options_arm@@Base>:
   59a18:	stp	x29, x30, [sp, #-64]!
   59a1c:	mov	x29, sp
   59a20:	stp	x19, x20, [sp, #16]
   59a24:	stp	x23, x24, [sp, #48]
   59a28:	adrp	x23, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   59a2c:	add	x19, x23, #0x410
   59a30:	ldr	x0, [x19, #112]
   59a34:	cbz	x0, 59a48 <disassembler_options_arm@@Base+0x30>
   59a38:	ldp	x19, x20, [sp, #16]
   59a3c:	ldp	x23, x24, [sp, #48]
   59a40:	ldp	x29, x30, [sp], #64
   59a44:	ret
   59a48:	mov	x0, #0x20                  	// #32
   59a4c:	stp	x21, x22, [sp, #32]
   59a50:	bl	35480 <xmalloc@plt>
   59a54:	mov	x21, x0
   59a58:	mov	x0, #0x48                  	// #72
   59a5c:	str	x21, [x19, #112]
   59a60:	adrp	x20, 91000 <aarch64_operands@@Base+0x1bd0>
   59a64:	add	x20, x20, #0xb60
   59a68:	adrp	x24, 5b000 <floatformat_from_double@@Base+0x3e8>
   59a6c:	str	xzr, [x21, #24]
   59a70:	add	x20, x20, #0xe80
   59a74:	add	x24, x24, #0x5d8
   59a78:	mov	x19, #0x0                   	// #0
   59a7c:	bl	35480 <xmalloc@plt>
   59a80:	mov	x1, x0
   59a84:	str	x1, [x21]
   59a88:	mov	x0, #0x48                  	// #72
   59a8c:	bl	35480 <xmalloc@plt>
   59a90:	mov	x22, x0
   59a94:	stp	x0, xzr, [x21, #8]
   59a98:	ldr	x3, [x21]
   59a9c:	b	59abc <disassembler_options_arm@@Base+0xa4>
   59aa0:	bl	359e0 <dcgettext@plt>
   59aa4:	str	x0, [x22, x19]
   59aa8:	add	x19, x19, #0x8
   59aac:	add	x20, x20, #0x90
   59ab0:	cmp	x19, #0x40
   59ab4:	ldp	x3, x22, [x21]
   59ab8:	b.eq	59ae8 <disassembler_options_arm@@Base+0xd0>  // b.none
   59abc:	ldur	x0, [x20, #-8]
   59ac0:	str	x0, [x3, x19]
   59ac4:	mov	w2, #0x5                   	// #5
   59ac8:	mov	x0, x24
   59acc:	ldr	x1, [x20]
   59ad0:	cbnz	x1, 59aa0 <disassembler_options_arm@@Base+0x88>
   59ad4:	str	xzr, [x22, x19]
   59ad8:	add	x19, x19, #0x8
   59adc:	add	x20, x20, #0x90
   59ae0:	cmp	x19, #0x40
   59ae4:	b.ne	59abc <disassembler_options_arm@@Base+0xa4>  // b.any
   59ae8:	add	x23, x23, #0x410
   59aec:	str	xzr, [x3, #64]
   59af0:	str	xzr, [x22, #64]
   59af4:	ldp	x19, x20, [sp, #16]
   59af8:	ldp	x21, x22, [sp, #32]
   59afc:	ldr	x0, [x23, #112]
   59b00:	ldp	x23, x24, [sp, #48]
   59b04:	ldp	x29, x30, [sp], #64
   59b08:	ret
   59b0c:	nop

0000000000059b10 <print_arm_disassembler_options@@Base>:
   59b10:	stp	x29, x30, [sp, #-80]!
   59b14:	mov	w2, #0x5                   	// #5
   59b18:	adrp	x1, 69000 <fields@@Base+0x5f60>
   59b1c:	mov	x29, sp
   59b20:	stp	x19, x20, [sp, #16]
   59b24:	adrp	x19, 91000 <aarch64_operands@@Base+0x1bd0>
   59b28:	add	x19, x19, #0xb60
   59b2c:	stp	x21, x22, [sp, #32]
   59b30:	adrp	x22, 5b000 <floatformat_from_double@@Base+0x3e8>
   59b34:	add	x22, x22, #0x5d8
   59b38:	add	x1, x1, #0x880
   59b3c:	add	x19, x19, #0xe78
   59b40:	stp	x23, x24, [sp, #48]
   59b44:	mov	x23, x0
   59b48:	mov	x0, x22
   59b4c:	stp	x25, x26, [sp, #64]
   59b50:	bl	359e0 <dcgettext@plt>
   59b54:	adrp	x24, 69000 <fields@@Base+0x5f60>
   59b58:	mov	x1, x0
   59b5c:	add	x25, x19, #0x480
   59b60:	mov	x0, x23
   59b64:	add	x24, x24, #0x8e0
   59b68:	mov	x20, #0xd                   	// #13
   59b6c:	mov	w26, #0x18                  	// #24
   59b70:	bl	35b80 <fprintf@plt>
   59b74:	b	59b84 <print_arm_disassembler_options@@Base+0x74>
   59b78:	ldr	x0, [x19]
   59b7c:	bl	350a0 <strlen@plt>
   59b80:	mov	x20, x0
   59b84:	ldp	x21, x1, [x19]
   59b88:	mov	w2, #0x5                   	// #5
   59b8c:	mov	x0, x22
   59b90:	add	x19, x19, #0x90
   59b94:	bl	359e0 <dcgettext@plt>
   59b98:	mov	x5, x0
   59b9c:	mov	x2, x21
   59ba0:	sub	w3, w26, w20
   59ba4:	mov	x1, x24
   59ba8:	mov	x0, x23
   59bac:	mov	w4, #0x20                  	// #32
   59bb0:	bl	35b80 <fprintf@plt>
   59bb4:	cmp	x19, x25
   59bb8:	b.ne	59b78 <print_arm_disassembler_options@@Base+0x68>  // b.any
   59bbc:	ldp	x19, x20, [sp, #16]
   59bc0:	ldp	x21, x22, [sp, #32]
   59bc4:	ldp	x23, x24, [sp, #48]
   59bc8:	ldp	x25, x26, [sp, #64]
   59bcc:	ldp	x29, x30, [sp], #80
   59bd0:	ret
   59bd4:	nop
   59bd8:	mov	w0, #0x1                   	// #1
   59bdc:	ret
   59be0:	ldp	w11, w8, [x0, #28]
   59be4:	cmp	w8, #0x0
   59be8:	b.le	59c8c <print_arm_disassembler_options@@Base+0x17c>
   59bec:	ldp	w15, w17, [x0]
   59bf0:	mov	w14, #0x1                   	// #1
   59bf4:	mov	w13, w14
   59bf8:	mov	w16, #0x20                  	// #32
   59bfc:	cmp	w15, #0x0
   59c00:	mov	w12, #0x8                   	// #8
   59c04:	csinv	w14, w14, wzr, eq  // eq = none
   59c08:	cmp	w8, #0x20
   59c0c:	csel	w9, w8, w16, le
   59c10:	add	w11, w11, w9
   59c14:	sub	w0, w17, w11
   59c18:	cbnz	w15, 59c94 <print_arm_disassembler_options@@Base+0x184>
   59c1c:	and	w4, w0, #0x7
   59c20:	lsr	w0, w0, #3
   59c24:	add	w5, w4, w9
   59c28:	cmp	w5, #0x8
   59c2c:	csel	w5, w5, w12, ls  // ls = plast
   59c30:	mov	w3, w9
   59c34:	mov	w10, #0x0                   	// #0
   59c38:	mov	x6, #0x0                   	// #0
   59c3c:	nop
   59c40:	sub	w7, w5, w4
   59c44:	ldrb	w2, [x1, w0, uxtw]
   59c48:	sub	w3, w3, w7
   59c4c:	add	w0, w0, #0x1
   59c50:	lsl	w5, w13, w7
   59c54:	sub	w5, w5, #0x1
   59c58:	asr	w2, w2, w4
   59c5c:	and	w2, w2, w5
   59c60:	cmp	w3, #0x8
   59c64:	mov	w4, #0x0                   	// #0
   59c68:	lsl	w2, w2, w10
   59c6c:	csel	w5, w3, w12, ls  // ls = plast
   59c70:	orr	x6, x6, x2
   59c74:	add	w10, w10, w7
   59c78:	cbnz	w3, 59c40 <print_arm_disassembler_options@@Base+0x130>
   59c7c:	cbnz	x6, 59d00 <print_arm_disassembler_options@@Base+0x1f0>
   59c80:	sub	w8, w8, w9
   59c84:	cmp	w8, #0x0
   59c88:	b.gt	59c08 <print_arm_disassembler_options@@Base+0xf8>
   59c8c:	mov	w0, #0x0                   	// #0
   59c90:	ret
   59c94:	and	w4, w0, #0x7
   59c98:	sub	w0, w11, #0x1
   59c9c:	add	w5, w4, w9
   59ca0:	cmp	w5, #0x8
   59ca4:	lsr	w0, w0, #3
   59ca8:	csel	w5, w5, w12, ls  // ls = plast
   59cac:	cmp	w14, #0x1
   59cb0:	b.eq	59c30 <print_arm_disassembler_options@@Base+0x120>  // b.none
   59cb4:	mov	w7, w9
   59cb8:	mov	w18, #0x0                   	// #0
   59cbc:	mov	x6, #0x0                   	// #0
   59cc0:	sub	w10, w5, w4
   59cc4:	ldrb	w3, [x1, w0, uxtw]
   59cc8:	sub	w7, w7, w10
   59ccc:	add	w0, w0, w14
   59cd0:	lsl	w2, w13, w10
   59cd4:	sub	w2, w2, #0x1
   59cd8:	asr	w3, w3, w4
   59cdc:	and	w3, w3, w2
   59ce0:	cmp	w7, #0x8
   59ce4:	mov	w4, #0x0                   	// #0
   59ce8:	lsl	w3, w3, w18
   59cec:	csel	w5, w7, w12, ls  // ls = plast
   59cf0:	orr	x6, x6, x3
   59cf4:	add	w18, w18, w10
   59cf8:	cbnz	w7, 59cc0 <print_arm_disassembler_options@@Base+0x1b0>
   59cfc:	cbz	x6, 59c80 <print_arm_disassembler_options@@Base+0x170>
   59d00:	mov	w0, #0x1                   	// #1
   59d04:	ret
   59d08:	ldp	w5, w6, [x0]
   59d0c:	ldp	w4, w2, [x0, #12]
   59d10:	add	w4, w2, w4
   59d14:	sub	w3, w6, w4
   59d18:	cbnz	w5, 59e08 <print_arm_disassembler_options@@Base+0x2f8>
   59d1c:	and	w8, w3, #0x7
   59d20:	mov	w4, #0x8                   	// #8
   59d24:	add	w5, w8, w2
   59d28:	lsr	w3, w3, #3
   59d2c:	cmp	w5, w4
   59d30:	mov	w12, w4
   59d34:	csel	w5, w5, w4, ls  // ls = plast
   59d38:	mov	w10, #0x0                   	// #0
   59d3c:	mov	x7, #0x0                   	// #0
   59d40:	mov	w11, #0x1                   	// #1
   59d44:	nop
   59d48:	sub	w9, w5, w8
   59d4c:	ldrb	w4, [x1, w3, uxtw]
   59d50:	sub	w2, w2, w9
   59d54:	add	w3, w3, #0x1
   59d58:	lsl	w5, w11, w9
   59d5c:	sub	w5, w5, #0x1
   59d60:	asr	w4, w4, w8
   59d64:	and	w4, w4, w5
   59d68:	cmp	w2, #0x8
   59d6c:	mov	w8, #0x0                   	// #0
   59d70:	lsl	w4, w4, w10
   59d74:	csel	w5, w2, w12, ls  // ls = plast
   59d78:	orr	x7, x7, x4
   59d7c:	add	w10, w10, w9
   59d80:	cbnz	w2, 59d48 <print_arm_disassembler_options@@Base+0x238>
   59d84:	ldr	w2, [x0, #28]
   59d88:	sub	w0, w6, #0x1
   59d8c:	mov	w3, #0x1                   	// #1
   59d90:	mov	w11, w3
   59d94:	sub	w0, w0, w2
   59d98:	mov	w9, #0x0                   	// #0
   59d9c:	and	w5, w0, #0x7
   59da0:	mov	x4, #0x0                   	// #0
   59da4:	lsr	w0, w0, #3
   59da8:	add	w8, w5, w3
   59dac:	mov	w10, #0x8                   	// #8
   59db0:	sub	w6, w8, w5
   59db4:	ldrb	w2, [x1, w0, uxtw]
   59db8:	sub	w3, w3, w6
   59dbc:	add	w0, w0, #0x1
   59dc0:	lsl	w8, w11, w6
   59dc4:	sub	w8, w8, #0x1
   59dc8:	asr	w2, w2, w5
   59dcc:	and	w2, w2, w8
   59dd0:	cmp	w3, #0x8
   59dd4:	mov	w5, #0x0                   	// #0
   59dd8:	lsl	w2, w2, w9
   59ddc:	csel	w8, w3, w10, ls  // ls = plast
   59de0:	orr	x4, x4, x2
   59de4:	add	w9, w9, w6
   59de8:	cbnz	w3, 59db0 <print_arm_disassembler_options@@Base+0x2a0>
   59dec:	cmp	x7, #0x0
   59df0:	cset	w1, eq  // eq = none
   59df4:	cmp	x4, #0x0
   59df8:	cset	w0, eq  // eq = none
   59dfc:	cmp	w1, w0
   59e00:	cset	w0, eq  // eq = none
   59e04:	ret
   59e08:	and	w3, w3, #0x7
   59e0c:	sub	w4, w4, #0x1
   59e10:	add	w8, w3, w2
   59e14:	mov	w11, #0x8                   	// #8
   59e18:	cmp	w8, w11
   59e1c:	lsr	w4, w4, #3
   59e20:	csel	w8, w8, w11, ls  // ls = plast
   59e24:	mov	w10, #0x0                   	// #0
   59e28:	mov	x7, #0x0                   	// #0
   59e2c:	mov	w12, #0x1                   	// #1
   59e30:	sub	w9, w8, w3
   59e34:	ldrb	w5, [x1, w4, uxtw]
   59e38:	sub	w2, w2, w9
   59e3c:	sub	w4, w4, #0x1
   59e40:	lsl	w8, w12, w9
   59e44:	sub	w8, w8, #0x1
   59e48:	asr	w5, w5, w3
   59e4c:	and	w5, w5, w8
   59e50:	cmp	w2, #0x8
   59e54:	mov	w3, #0x0                   	// #0
   59e58:	lsl	w5, w5, w10
   59e5c:	csel	w8, w2, w11, ls  // ls = plast
   59e60:	orr	x7, x7, x5
   59e64:	add	w10, w10, w9
   59e68:	cbnz	w2, 59e30 <print_arm_disassembler_options@@Base+0x320>
   59e6c:	ldr	w5, [x0, #28]
   59e70:	sub	w0, w6, #0x1
   59e74:	mov	w3, #0x1                   	// #1
   59e78:	mov	w11, w3
   59e7c:	sub	w0, w0, w5
   59e80:	mov	w9, #0x0                   	// #0
   59e84:	and	w2, w0, #0x7
   59e88:	lsr	w5, w5, #3
   59e8c:	add	w8, w2, w3
   59e90:	mov	x4, #0x0                   	// #0
   59e94:	mov	w10, #0x8                   	// #8
   59e98:	sub	w6, w8, w2
   59e9c:	ldrb	w0, [x1, w5, uxtw]
   59ea0:	sub	w3, w3, w6
   59ea4:	sub	w5, w5, #0x1
   59ea8:	lsl	w8, w11, w6
   59eac:	sub	w8, w8, #0x1
   59eb0:	asr	w0, w0, w2
   59eb4:	and	w0, w0, w8
   59eb8:	cmp	w3, #0x8
   59ebc:	mov	w2, #0x0                   	// #0
   59ec0:	lsl	w0, w0, w9
   59ec4:	csel	w8, w3, w10, ls  // ls = plast
   59ec8:	orr	x4, x4, x0
   59ecc:	add	w9, w9, w6
   59ed0:	cbnz	w3, 59e98 <print_arm_disassembler_options@@Base+0x388>
   59ed4:	cmp	x7, #0x0
   59ed8:	cset	w1, eq  // eq = none
   59edc:	cmp	x4, #0x0
   59ee0:	cset	w0, eq  // eq = none
   59ee4:	cmp	w1, w0
   59ee8:	cset	w0, eq  // eq = none
   59eec:	ret
   59ef0:	stp	x29, x30, [sp, #-48]!
   59ef4:	mov	x29, sp
   59ef8:	ldr	x11, [x0, #56]
   59efc:	ldp	w5, w6, [x11]
   59f00:	ldp	w8, w2, [x11, #12]
   59f04:	add	w8, w2, w8
   59f08:	sub	w3, w6, w8
   59f0c:	cbnz	w5, 5a1d0 <print_arm_disassembler_options@@Base+0x6c0>
   59f10:	and	w8, w3, #0x7
   59f14:	mov	w0, #0x8                   	// #8
   59f18:	add	w12, w8, w2
   59f1c:	lsr	w3, w3, #3
   59f20:	cmp	w12, w0
   59f24:	mov	w17, w0
   59f28:	csel	w12, w12, w0, ls  // ls = plast
   59f2c:	mov	w15, w8
   59f30:	mov	w9, w12
   59f34:	mov	w14, w3
   59f38:	mov	w0, w2
   59f3c:	mov	w13, #0x0                   	// #0
   59f40:	mov	x10, #0x0                   	// #0
   59f44:	mov	w16, #0x1                   	// #1
   59f48:	sub	w7, w9, w15
   59f4c:	ldrb	w4, [x1, w14, uxtw]
   59f50:	sub	w0, w0, w7
   59f54:	add	w14, w14, #0x1
   59f58:	lsl	w9, w16, w7
   59f5c:	sub	w9, w9, #0x1
   59f60:	asr	w4, w4, w15
   59f64:	and	w4, w4, w9
   59f68:	cmp	w0, #0x8
   59f6c:	mov	w15, #0x0                   	// #0
   59f70:	lsl	w4, w4, w13
   59f74:	csel	w9, w0, w17, ls  // ls = plast
   59f78:	orr	x10, x10, x4
   59f7c:	add	w13, w13, w7
   59f80:	cbnz	w0, 59f48 <print_arm_disassembler_options@@Base+0x438>
   59f84:	add	x4, x1, #0x8
   59f88:	mov	w13, #0x0                   	// #0
   59f8c:	mov	x9, #0x0                   	// #0
   59f90:	mov	w15, #0x1                   	// #1
   59f94:	mov	w14, #0x8                   	// #8
   59f98:	sub	w0, w12, w8
   59f9c:	ldrb	w7, [x4, w3, uxtw]
   59fa0:	sub	w2, w2, w0
   59fa4:	add	w3, w3, #0x1
   59fa8:	lsl	w12, w15, w0
   59fac:	sub	w12, w12, #0x1
   59fb0:	asr	w7, w7, w8
   59fb4:	and	w7, w7, w12
   59fb8:	cmp	w2, #0x8
   59fbc:	mov	w8, #0x0                   	// #0
   59fc0:	lsl	w7, w7, w13
   59fc4:	csel	w12, w2, w14, ls  // ls = plast
   59fc8:	orr	x9, x9, x7
   59fcc:	add	w13, w13, w0
   59fd0:	cbnz	w2, 59f98 <print_arm_disassembler_options@@Base+0x488>
   59fd4:	ldr	w0, [x11, #24]
   59fd8:	mov	w7, #0x1                   	// #1
   59fdc:	cmp	x0, x10
   59fe0:	b.eq	5a2a8 <print_arm_disassembler_options@@Base+0x798>  // b.none
   59fe4:	cbz	x10, 5a10c <print_arm_disassembler_options@@Base+0x5fc>
   59fe8:	sub	x14, x10, #0x35
   59fec:	mov	w0, #0x1                   	// #1
   59ff0:	cmp	x14, x9
   59ff4:	b.gt	5a104 <print_arm_disassembler_options@@Base+0x5f4>
   59ff8:	sub	x10, x10, #0x34
   59ffc:	cmp	x10, x9
   5a000:	cset	w13, le
   5a004:	cmp	x9, #0x0
   5a008:	csel	w13, w13, wzr, ne  // ne = any
   5a00c:	cbnz	w13, 5a378 <print_arm_disassembler_options@@Base+0x868>
   5a010:	ldr	w12, [x11, #32]
   5a014:	cbnz	x9, 5a394 <print_arm_disassembler_options@@Base+0x884>
   5a018:	cbz	w12, 5a104 <print_arm_disassembler_options@@Base+0x5f4>
   5a01c:	ldr	w11, [x11, #28]
   5a020:	cmp	w7, w0
   5a024:	stp	x19, x20, [sp, #16]
   5a028:	sub	w17, w6, #0x1
   5a02c:	str	x21, [sp, #32]
   5a030:	b.ne	5a5ec <print_arm_disassembler_options@@Base+0xadc>  // b.any
   5a034:	sub	w17, w17, w11
   5a038:	mov	w21, w7
   5a03c:	mov	w19, #0x0                   	// #0
   5a040:	mov	w9, #0xffffffff            	// #-1
   5a044:	mov	w20, #0x8                   	// #8
   5a048:	add	w2, w19, w11
   5a04c:	cmp	w5, #0x0
   5a050:	lsr	w0, w17, #3
   5a054:	and	w16, w17, #0x7
   5a058:	lsr	w2, w2, #3
   5a05c:	add	w15, w16, #0x1
   5a060:	csel	w0, w2, w0, ne  // ne = any
   5a064:	mov	w3, #0x1                   	// #1
   5a068:	mov	w18, #0x0                   	// #0
   5a06c:	mov	x30, #0x0                   	// #0
   5a070:	sub	w8, w15, w16
   5a074:	ldrb	w2, [x4, w0, uxtw]
   5a078:	sub	w3, w3, w8
   5a07c:	add	w0, w0, #0x1
   5a080:	lsl	w15, w21, w8
   5a084:	sub	w15, w15, #0x1
   5a088:	asr	w2, w2, w16
   5a08c:	and	w2, w2, w15
   5a090:	cmp	w3, #0x8
   5a094:	mov	w16, #0x0                   	// #0
   5a098:	lsl	w2, w2, w18
   5a09c:	csel	w15, w3, w20, ls  // ls = plast
   5a0a0:	orr	x30, x30, x2
   5a0a4:	add	w18, w18, w8
   5a0a8:	cbnz	w3, 5a070 <print_arm_disassembler_options@@Base+0x560>
   5a0ac:	cbz	x30, 5a0bc <print_arm_disassembler_options@@Base+0x5ac>
   5a0b0:	cmn	w9, #0x1
   5a0b4:	b.ne	5a5e4 <print_arm_disassembler_options@@Base+0xad4>  // b.any
   5a0b8:	mov	w9, w19
   5a0bc:	add	w19, w19, #0x1
   5a0c0:	sub	w17, w17, #0x1
   5a0c4:	cmp	w12, w19
   5a0c8:	b.ne	5a048 <print_arm_disassembler_options@@Base+0x538>  // b.any
   5a0cc:	cmn	w9, #0x1
   5a0d0:	mov	w0, #0x1                   	// #1
   5a0d4:	b.eq	5a0fc <print_arm_disassembler_options@@Base+0x5ec>  // b.none
   5a0d8:	neg	w9, w9
   5a0dc:	mov	w0, #0x1                   	// #1
   5a0e0:	cmp	x14, w9, sxtw
   5a0e4:	sxtw	x9, w9
   5a0e8:	b.gt	5a0fc <print_arm_disassembler_options@@Base+0x5ec>
   5a0ec:	cmp	w13, #0x0
   5a0f0:	mov	w0, #0x0                   	// #0
   5a0f4:	ccmp	x10, x9, #0x4, eq  // eq = none
   5a0f8:	b.gt	5a688 <print_arm_disassembler_options@@Base+0xb78>
   5a0fc:	ldp	x19, x20, [sp, #16]
   5a100:	ldr	x21, [sp, #32]
   5a104:	ldp	x29, x30, [sp], #48
   5a108:	ret
   5a10c:	mov	w0, #0x0                   	// #0
   5a110:	cbnz	x9, 5a104 <print_arm_disassembler_options@@Base+0x5f4>
   5a114:	ldp	w8, w3, [x11, #28]
   5a118:	cmp	w3, #0x0
   5a11c:	b.le	5a1c4 <print_arm_disassembler_options@@Base+0x6b4>
   5a120:	cmp	w7, #0x1
   5a124:	b.ne	5a540 <print_arm_disassembler_options@@Base+0xa30>  // b.any
   5a128:	mov	w16, #0x20                  	// #32
   5a12c:	mov	w14, #0x8                   	// #8
   5a130:	mov	w15, #0x1                   	// #1
   5a134:	nop
   5a138:	cmp	w3, #0x20
   5a13c:	mov	w13, #0x0                   	// #0
   5a140:	csel	w11, w3, w16, le
   5a144:	cmp	w5, #0x0
   5a148:	add	w8, w8, w11
   5a14c:	mov	w7, w11
   5a150:	sub	w1, w6, w8
   5a154:	sub	w0, w8, #0x1
   5a158:	and	w10, w1, #0x7
   5a15c:	mov	x12, #0x0                   	// #0
   5a160:	lsr	w9, w1, #3
   5a164:	lsr	w0, w0, #3
   5a168:	add	w1, w10, w11
   5a16c:	csel	w0, w0, w9, ne  // ne = any
   5a170:	cmp	w1, #0x8
   5a174:	csel	w1, w1, w14, ls  // ls = plast
   5a178:	sub	w9, w1, w10
   5a17c:	ldrb	w2, [x4, w0, uxtw]
   5a180:	sub	w7, w7, w9
   5a184:	add	w0, w0, #0x1
   5a188:	lsl	w1, w15, w9
   5a18c:	sub	w1, w1, #0x1
   5a190:	asr	w2, w2, w10
   5a194:	and	w2, w2, w1
   5a198:	cmp	w7, #0x8
   5a19c:	mov	w10, #0x0                   	// #0
   5a1a0:	lsl	w2, w2, w13
   5a1a4:	csel	w1, w7, w14, ls  // ls = plast
   5a1a8:	orr	x12, x12, x2
   5a1ac:	add	w13, w13, w9
   5a1b0:	cbnz	w7, 5a178 <print_arm_disassembler_options@@Base+0x668>
   5a1b4:	cbnz	x12, 5a378 <print_arm_disassembler_options@@Base+0x868>
   5a1b8:	sub	w3, w3, w11
   5a1bc:	cmp	w3, #0x0
   5a1c0:	b.gt	5a138 <print_arm_disassembler_options@@Base+0x628>
   5a1c4:	mov	w0, #0x1                   	// #1
   5a1c8:	ldp	x29, x30, [sp], #48
   5a1cc:	ret
   5a1d0:	and	w3, w3, #0x7
   5a1d4:	sub	w8, w8, #0x1
   5a1d8:	add	w12, w3, w2
   5a1dc:	mov	w16, #0x8                   	// #8
   5a1e0:	cmp	w12, w16
   5a1e4:	lsr	w8, w8, #3
   5a1e8:	csel	w12, w12, w16, ls  // ls = plast
   5a1ec:	mov	w15, w8
   5a1f0:	mov	w9, w12
   5a1f4:	mov	w14, w3
   5a1f8:	mov	w0, w2
   5a1fc:	mov	w13, #0x0                   	// #0
   5a200:	mov	x10, #0x0                   	// #0
   5a204:	mov	w17, #0x1                   	// #1
   5a208:	sub	w7, w9, w14
   5a20c:	ldrb	w4, [x1, w15, uxtw]
   5a210:	sub	w0, w0, w7
   5a214:	sub	w15, w15, #0x1
   5a218:	lsl	w9, w17, w7
   5a21c:	sub	w9, w9, #0x1
   5a220:	asr	w4, w4, w14
   5a224:	and	w4, w4, w9
   5a228:	cmp	w0, #0x8
   5a22c:	mov	w14, #0x0                   	// #0
   5a230:	lsl	w4, w4, w13
   5a234:	csel	w9, w0, w16, ls  // ls = plast
   5a238:	orr	x10, x10, x4
   5a23c:	add	w13, w13, w7
   5a240:	cbnz	w0, 5a208 <print_arm_disassembler_options@@Base+0x6f8>
   5a244:	add	x4, x1, #0x8
   5a248:	mov	w13, #0x0                   	// #0
   5a24c:	mov	x9, #0x0                   	// #0
   5a250:	mov	w15, #0x1                   	// #1
   5a254:	mov	w14, #0x8                   	// #8
   5a258:	sub	w0, w12, w3
   5a25c:	ldrb	w7, [x4, w8, uxtw]
   5a260:	sub	w2, w2, w0
   5a264:	sub	w8, w8, #0x1
   5a268:	lsl	w12, w15, w0
   5a26c:	sub	w12, w12, #0x1
   5a270:	asr	w7, w7, w3
   5a274:	and	w7, w7, w12
   5a278:	cmp	w2, #0x8
   5a27c:	mov	w3, #0x0                   	// #0
   5a280:	lsl	w7, w7, w13
   5a284:	csel	w12, w2, w14, ls  // ls = plast
   5a288:	orr	x9, x9, x7
   5a28c:	add	w13, w13, w0
   5a290:	cbnz	w2, 5a258 <print_arm_disassembler_options@@Base+0x748>
   5a294:	ldr	w0, [x11, #24]
   5a298:	mov	w7, #0xffffffff            	// #-1
   5a29c:	cmp	x0, x10
   5a2a0:	b.ne	59fe4 <print_arm_disassembler_options@@Base+0x4d4>  // b.any
   5a2a4:	nop
   5a2a8:	ldp	w8, w3, [x11, #28]
   5a2ac:	cmp	w3, #0x0
   5a2b0:	b.le	5a480 <print_arm_disassembler_options@@Base+0x970>
   5a2b4:	stp	x19, x20, [sp, #16]
   5a2b8:	cmp	w7, #0x1
   5a2bc:	mov	w15, w8
   5a2c0:	str	x21, [sp, #32]
   5a2c4:	mov	w11, w3
   5a2c8:	b.ne	5a48c <print_arm_disassembler_options@@Base+0x97c>  // b.any
   5a2cc:	mov	w21, w7
   5a2d0:	mov	w20, #0x20                  	// #32
   5a2d4:	mov	w19, #0x8                   	// #8
   5a2d8:	cmp	w11, #0x20
   5a2dc:	mov	w17, #0x0                   	// #0
   5a2e0:	csel	w14, w11, w20, le
   5a2e4:	cmp	w5, #0x0
   5a2e8:	add	w15, w15, w14
   5a2ec:	mov	w10, w14
   5a2f0:	sub	w12, w6, w15
   5a2f4:	sub	w0, w15, #0x1
   5a2f8:	and	w13, w12, #0x7
   5a2fc:	mov	x16, #0x0                   	// #0
   5a300:	add	w7, w13, w14
   5a304:	lsr	w12, w12, #3
   5a308:	lsr	w0, w0, #3
   5a30c:	csel	w0, w0, w12, ne  // ne = any
   5a310:	cmp	w7, #0x8
   5a314:	csel	w7, w7, w19, ls  // ls = plast
   5a318:	sub	w12, w7, w13
   5a31c:	ldrb	w2, [x1, w0, uxtw]
   5a320:	sub	w10, w10, w12
   5a324:	add	w0, w0, #0x1
   5a328:	lsl	w18, w21, w12
   5a32c:	sub	w18, w18, #0x1
   5a330:	asr	w2, w2, w13
   5a334:	and	w2, w2, w18
   5a338:	cmp	w10, #0x8
   5a33c:	mov	w13, #0x0                   	// #0
   5a340:	lsl	w2, w2, w17
   5a344:	csel	w7, w10, w19, ls  // ls = plast
   5a348:	orr	x16, x16, x2
   5a34c:	add	w17, w17, w12
   5a350:	cbnz	w10, 5a318 <print_arm_disassembler_options@@Base+0x808>
   5a354:	cbnz	x16, 5a384 <print_arm_disassembler_options@@Base+0x874>
   5a358:	sub	w11, w11, w14
   5a35c:	cmp	w11, #0x0
   5a360:	b.gt	5a2d8 <print_arm_disassembler_options@@Base+0x7c8>
   5a364:	mov	w0, #0x0                   	// #0
   5a368:	ldp	x19, x20, [sp, #16]
   5a36c:	ldr	x21, [sp, #32]
   5a370:	cbnz	x9, 5a104 <print_arm_disassembler_options@@Base+0x5f4>
   5a374:	b	5a128 <print_arm_disassembler_options@@Base+0x618>
   5a378:	mov	w0, #0x0                   	// #0
   5a37c:	ldp	x29, x30, [sp], #48
   5a380:	ret
   5a384:	mov	w0, #0x1                   	// #1
   5a388:	ldp	x19, x20, [sp, #16]
   5a38c:	ldr	x21, [sp, #32]
   5a390:	b	5a104 <print_arm_disassembler_options@@Base+0x5f4>
   5a394:	ldr	w2, [x11, #28]
   5a398:	cmp	w5, #0x0
   5a39c:	mov	w13, w7
   5a3a0:	mov	w8, #0x0                   	// #0
   5a3a4:	add	w12, w12, w2
   5a3a8:	mov	x9, #0x0                   	// #0
   5a3ac:	sub	w6, w6, w12
   5a3b0:	sub	w12, w12, #0x1
   5a3b4:	and	w3, w6, #0x7
   5a3b8:	mov	w10, #0x8                   	// #8
   5a3bc:	lsr	w6, w6, #3
   5a3c0:	lsr	w2, w12, #3
   5a3c4:	csel	w2, w2, w6, ne  // ne = any
   5a3c8:	add	w6, w3, #0x1
   5a3cc:	cmp	w7, #0x1
   5a3d0:	b.ne	5a434 <print_arm_disassembler_options@@Base+0x924>  // b.any
   5a3d4:	nop
   5a3d8:	sub	w5, w6, w3
   5a3dc:	ldrb	w0, [x1, w2, uxtw]
   5a3e0:	sub	w7, w7, w5
   5a3e4:	add	w2, w2, #0x1
   5a3e8:	lsl	w6, w13, w5
   5a3ec:	sub	w6, w6, #0x1
   5a3f0:	asr	w0, w0, w3
   5a3f4:	and	w0, w0, w6
   5a3f8:	cmp	w7, #0x8
   5a3fc:	mov	w3, #0x0                   	// #0
   5a400:	lsl	w0, w0, w8
   5a404:	csel	w6, w7, w10, ls  // ls = plast
   5a408:	orr	x9, x9, x0
   5a40c:	add	w8, w8, w5
   5a410:	cbnz	w7, 5a3d8 <print_arm_disassembler_options@@Base+0x8c8>
   5a414:	mov	w0, #0x0                   	// #0
   5a418:	cbnz	x9, 5a104 <print_arm_disassembler_options@@Base+0x5f4>
   5a41c:	mov	x1, x4
   5a420:	mov	x0, x11
   5a424:	bl	59be0 <print_arm_disassembler_options@@Base+0xd0>
   5a428:	cmp	w0, #0x0
   5a42c:	cset	w0, eq  // eq = none
   5a430:	b	5a104 <print_arm_disassembler_options@@Base+0x5f4>
   5a434:	mov	w13, w0
   5a438:	mov	w10, #0x0                   	// #0
   5a43c:	mov	w12, #0x8                   	// #8
   5a440:	sub	w8, w6, w3
   5a444:	ldrb	w5, [x1, w2, uxtw]
   5a448:	sub	w0, w0, w8
   5a44c:	add	w2, w2, w7
   5a450:	lsl	w6, w13, w8
   5a454:	sub	w6, w6, #0x1
   5a458:	asr	w5, w5, w3
   5a45c:	and	w5, w5, w6
   5a460:	cmp	w0, #0x8
   5a464:	mov	w3, #0x0                   	// #0
   5a468:	lsl	w5, w5, w10
   5a46c:	csel	w6, w0, w12, ls  // ls = plast
   5a470:	orr	x9, x9, x5
   5a474:	add	w10, w10, w8
   5a478:	cbnz	w0, 5a440 <print_arm_disassembler_options@@Base+0x930>
   5a47c:	b	5a414 <print_arm_disassembler_options@@Base+0x904>
   5a480:	cmp	x9, #0x0
   5a484:	cset	w0, eq  // eq = none
   5a488:	b	5a104 <print_arm_disassembler_options@@Base+0x5f4>
   5a48c:	mov	w19, w8
   5a490:	mov	w18, w3
   5a494:	mov	w21, #0x20                  	// #32
   5a498:	mov	w16, #0x8                   	// #8
   5a49c:	mov	w20, #0x1                   	// #1
   5a4a0:	cmp	w18, #0x20
   5a4a4:	mov	w14, #0x0                   	// #0
   5a4a8:	csel	w17, w18, w21, le
   5a4ac:	cmp	w5, #0x0
   5a4b0:	add	w19, w19, w17
   5a4b4:	mov	w2, w17
   5a4b8:	sub	w0, w6, w19
   5a4bc:	sub	w10, w19, #0x1
   5a4c0:	and	w13, w0, #0x7
   5a4c4:	mov	x15, #0x0                   	// #0
   5a4c8:	add	w12, w13, w17
   5a4cc:	lsr	w0, w0, #3
   5a4d0:	lsr	w10, w10, #3
   5a4d4:	csel	w10, w10, w0, ne  // ne = any
   5a4d8:	cmp	w12, #0x8
   5a4dc:	csel	w12, w12, w16, ls  // ls = plast
   5a4e0:	sub	w11, w12, w13
   5a4e4:	ldrb	w0, [x1, w10, uxtw]
   5a4e8:	sub	w2, w2, w11
   5a4ec:	add	w10, w10, w7
   5a4f0:	lsl	w12, w20, w11
   5a4f4:	sub	w12, w12, #0x1
   5a4f8:	asr	w0, w0, w13
   5a4fc:	and	w0, w0, w12
   5a500:	cmp	w2, #0x8
   5a504:	mov	w13, #0x0                   	// #0
   5a508:	lsl	w0, w0, w14
   5a50c:	csel	w12, w2, w16, ls  // ls = plast
   5a510:	orr	x15, x15, x0
   5a514:	add	w14, w14, w11
   5a518:	cbnz	w2, 5a4e0 <print_arm_disassembler_options@@Base+0x9d0>
   5a51c:	cbnz	x15, 5a384 <print_arm_disassembler_options@@Base+0x874>
   5a520:	sub	w18, w18, w17
   5a524:	cmp	w18, #0x0
   5a528:	b.gt	5a4a0 <print_arm_disassembler_options@@Base+0x990>
   5a52c:	mov	w0, #0x0                   	// #0
   5a530:	ldp	x19, x20, [sp, #16]
   5a534:	ldr	x21, [sp, #32]
   5a538:	cbnz	x9, 5a104 <print_arm_disassembler_options@@Base+0x5f4>
   5a53c:	nop
   5a540:	mov	w17, #0x20                  	// #32
   5a544:	mov	w15, #0x8                   	// #8
   5a548:	mov	w16, #0x1                   	// #1
   5a54c:	nop
   5a550:	cmp	w3, #0x20
   5a554:	mov	w12, #0x0                   	// #0
   5a558:	csel	w14, w3, w17, le
   5a55c:	cmp	w5, #0x0
   5a560:	add	w8, w8, w14
   5a564:	mov	w1, w14
   5a568:	sub	w0, w6, w8
   5a56c:	sub	w2, w8, #0x1
   5a570:	and	w11, w0, #0x7
   5a574:	mov	x13, #0x0                   	// #0
   5a578:	add	w10, w11, w14
   5a57c:	lsr	w0, w0, #3
   5a580:	lsr	w2, w2, #3
   5a584:	csel	w2, w2, w0, ne  // ne = any
   5a588:	cmp	w10, #0x8
   5a58c:	csel	w10, w10, w15, ls  // ls = plast
   5a590:	sub	w9, w10, w11
   5a594:	ldrb	w0, [x4, w2, uxtw]
   5a598:	sub	w1, w1, w9
   5a59c:	add	w2, w2, w7
   5a5a0:	lsl	w10, w16, w9
   5a5a4:	sub	w10, w10, #0x1
   5a5a8:	asr	w0, w0, w11
   5a5ac:	and	w0, w0, w10
   5a5b0:	cmp	w1, #0x8
   5a5b4:	mov	w11, #0x0                   	// #0
   5a5b8:	lsl	w0, w0, w12
   5a5bc:	csel	w10, w1, w15, ls  // ls = plast
   5a5c0:	orr	x13, x13, x0
   5a5c4:	add	w12, w12, w9
   5a5c8:	cbnz	w1, 5a590 <print_arm_disassembler_options@@Base+0xa80>
   5a5cc:	cbnz	x13, 5a378 <print_arm_disassembler_options@@Base+0x868>
   5a5d0:	sub	w3, w3, w14
   5a5d4:	cmp	w3, #0x0
   5a5d8:	b.gt	5a550 <print_arm_disassembler_options@@Base+0xa40>
   5a5dc:	mov	w0, #0x1                   	// #1
   5a5e0:	b	5a1c8 <print_arm_disassembler_options@@Base+0x6b8>
   5a5e4:	mov	w13, #0x1                   	// #1
   5a5e8:	b	5a0d8 <print_arm_disassembler_options@@Base+0x5c8>
   5a5ec:	sub	w21, w17, w11
   5a5f0:	mov	w30, #0x0                   	// #0
   5a5f4:	mov	w9, #0xffffffff            	// #-1
   5a5f8:	mov	w20, #0x8                   	// #8
   5a5fc:	nop
   5a600:	add	w3, w30, w11
   5a604:	and	w17, w21, #0x7
   5a608:	cmp	w5, #0x0
   5a60c:	lsr	w8, w21, #3
   5a610:	lsr	w3, w3, #3
   5a614:	add	w16, w17, #0x1
   5a618:	csel	w8, w3, w8, ne  // ne = any
   5a61c:	mov	w18, #0x0                   	// #0
   5a620:	mov	x19, #0x0                   	// #0
   5a624:	mov	w3, #0x1                   	// #1
   5a628:	sub	w15, w16, w17
   5a62c:	ldrb	w2, [x4, w8, uxtw]
   5a630:	sub	w3, w3, w15
   5a634:	add	w8, w8, w7
   5a638:	lsl	w16, w0, w15
   5a63c:	sub	w16, w16, #0x1
   5a640:	asr	w2, w2, w17
   5a644:	and	w2, w2, w16
   5a648:	cmp	w3, #0x8
   5a64c:	mov	w17, #0x0                   	// #0
   5a650:	lsl	w2, w2, w18
   5a654:	csel	w16, w3, w20, ls  // ls = plast
   5a658:	orr	x19, x19, x2
   5a65c:	add	w18, w18, w15
   5a660:	cbnz	w3, 5a628 <print_arm_disassembler_options@@Base+0xb18>
   5a664:	cbz	x19, 5a674 <print_arm_disassembler_options@@Base+0xb64>
   5a668:	cmn	w9, #0x1
   5a66c:	b.ne	5a5e4 <print_arm_disassembler_options@@Base+0xad4>  // b.any
   5a670:	mov	w9, w30
   5a674:	add	w30, w30, #0x1
   5a678:	sub	w21, w21, #0x1
   5a67c:	cmp	w30, w12
   5a680:	b.ne	5a600 <print_arm_disassembler_options@@Base+0xaf0>  // b.any
   5a684:	b	5a0cc <print_arm_disassembler_options@@Base+0x5bc>
   5a688:	add	w11, w11, w12
   5a68c:	cmp	w5, #0x0
   5a690:	sub	w6, w6, w11
   5a694:	sub	w0, w11, #0x1
   5a698:	and	w5, w6, #0x7
   5a69c:	mov	w10, w7
   5a6a0:	lsr	w6, w6, #3
   5a6a4:	lsr	w0, w0, #3
   5a6a8:	csel	w0, w0, w6, ne  // ne = any
   5a6ac:	add	w4, w5, #0x1
   5a6b0:	cmp	w7, #0x1
   5a6b4:	mov	w8, #0x0                   	// #0
   5a6b8:	mov	x6, #0x0                   	// #0
   5a6bc:	mov	w9, #0x8                   	// #8
   5a6c0:	b.ne	5a718 <print_arm_disassembler_options@@Base+0xc08>  // b.any
   5a6c4:	nop
   5a6c8:	sub	w3, w4, w5
   5a6cc:	ldrb	w2, [x1, w0, uxtw]
   5a6d0:	sub	w7, w7, w3
   5a6d4:	add	w0, w0, #0x1
   5a6d8:	lsl	w4, w10, w3
   5a6dc:	sub	w4, w4, #0x1
   5a6e0:	asr	w2, w2, w5
   5a6e4:	and	w2, w2, w4
   5a6e8:	cmp	w7, #0x8
   5a6ec:	mov	w5, #0x0                   	// #0
   5a6f0:	lsl	w2, w2, w8
   5a6f4:	csel	w4, w7, w9, ls  // ls = plast
   5a6f8:	orr	x6, x6, x2
   5a6fc:	add	w8, w8, w3
   5a700:	cbnz	w7, 5a6c8 <print_arm_disassembler_options@@Base+0xbb8>
   5a704:	cmp	x6, #0x0
   5a708:	cset	w0, eq  // eq = none
   5a70c:	ldp	x19, x20, [sp, #16]
   5a710:	ldr	x21, [sp, #32]
   5a714:	b	5a104 <print_arm_disassembler_options@@Base+0x5f4>
   5a718:	mov	w3, #0x1                   	// #1
   5a71c:	mov	w11, w3
   5a720:	mov	w9, #0x0                   	// #0
   5a724:	mov	w10, #0x8                   	// #8
   5a728:	sub	w8, w4, w5
   5a72c:	ldrb	w2, [x1, w0, uxtw]
   5a730:	sub	w3, w3, w8
   5a734:	add	w0, w0, w7
   5a738:	lsl	w4, w11, w8
   5a73c:	sub	w4, w4, #0x1
   5a740:	asr	w2, w2, w5
   5a744:	and	w2, w2, w4
   5a748:	cmp	w3, #0x8
   5a74c:	mov	w5, #0x0                   	// #0
   5a750:	lsl	w2, w2, w9
   5a754:	csel	w4, w3, w10, ls  // ls = plast
   5a758:	orr	x6, x6, x2
   5a75c:	add	w9, w9, w8
   5a760:	cbnz	w3, 5a728 <print_arm_disassembler_options@@Base+0xc18>
   5a764:	b	5a704 <print_arm_disassembler_options@@Base+0xbf4>

000000000005a768 <floatformat_to_double@@Base>:
   5a768:	stp	x29, x30, [sp, #-128]!
   5a76c:	mov	x29, sp
   5a770:	stp	x19, x20, [sp, #16]
   5a774:	mov	x20, x2
   5a778:	ldp	w2, w4, [x0, #12]
   5a77c:	stp	x27, x28, [sp, #80]
   5a780:	ldp	w28, w3, [x0]
   5a784:	stp	x21, x22, [sp, #32]
   5a788:	add	w2, w4, w2
   5a78c:	stp	x23, x24, [sp, #48]
   5a790:	mov	x22, x1
   5a794:	mov	x23, x0
   5a798:	sub	w0, w3, w2
   5a79c:	cbnz	w28, 5a994 <floatformat_to_double@@Base+0x22c>
   5a7a0:	and	w6, w0, #0x7
   5a7a4:	mov	w1, #0x8                   	// #8
   5a7a8:	add	w5, w6, w4
   5a7ac:	lsr	w0, w0, #3
   5a7b0:	cmp	w5, w1
   5a7b4:	mov	w9, w1
   5a7b8:	csel	w5, w5, w1, ls  // ls = plast
   5a7bc:	mov	w7, #0x0                   	// #0
   5a7c0:	mov	x21, #0x0                   	// #0
   5a7c4:	mov	w8, #0x1                   	// #1
   5a7c8:	sub	w1, w5, w6
   5a7cc:	ldrb	w2, [x22, w0, uxtw]
   5a7d0:	sub	w4, w4, w1
   5a7d4:	add	w0, w0, #0x1
   5a7d8:	lsl	w5, w8, w1
   5a7dc:	sub	w5, w5, #0x1
   5a7e0:	asr	w2, w2, w6
   5a7e4:	and	w2, w2, w5
   5a7e8:	cmp	w4, #0x8
   5a7ec:	mov	w6, #0x0                   	// #0
   5a7f0:	lsl	w2, w2, w7
   5a7f4:	csel	w5, w4, w9, ls  // ls = plast
   5a7f8:	orr	x21, x21, x2
   5a7fc:	add	w7, w7, w1
   5a800:	cbnz	w4, 5a7c8 <floatformat_to_double@@Base+0x60>
   5a804:	ldr	w0, [x23, #24]
   5a808:	mov	w19, #0x1                   	// #1
   5a80c:	cmp	x0, x21
   5a810:	b.eq	5aa08 <floatformat_to_double@@Base+0x2a0>  // b.none
   5a814:	stp	x25, x26, [sp, #64]
   5a818:	ldr	w0, [x23, #20]
   5a81c:	ldp	w25, w24, [x23, #28]
   5a820:	str	d8, [sp, #96]
   5a824:	cbz	x21, 5aad4 <floatformat_to_double@@Base+0x36c>
   5a828:	ldr	w1, [x23, #36]
   5a82c:	sub	x21, x21, w0, sxtw
   5a830:	cmp	w1, #0x1
   5a834:	b.eq	5abb0 <floatformat_to_double@@Base+0x448>  // b.none
   5a838:	movi	d8, #0x0
   5a83c:	add	x21, x21, #0x1
   5a840:	cmp	w24, #0x0
   5a844:	b.le	5a8f4 <floatformat_to_double@@Base+0x18c>
   5a848:	mov	w19, #0x20                  	// #32
   5a84c:	mov	w26, #0x8                   	// #8
   5a850:	mov	w27, #0x1                   	// #1
   5a854:	nop
   5a858:	cmp	w24, #0x20
   5a85c:	csel	w5, w24, w19, le
   5a860:	add	w25, w25, w5
   5a864:	sub	w3, w3, w25
   5a868:	cbnz	w28, 5aae8 <floatformat_to_double@@Base+0x380>
   5a86c:	and	w6, w3, #0x7
   5a870:	mov	w0, w5
   5a874:	add	w2, w6, w5
   5a878:	lsr	w3, w3, #3
   5a87c:	cmp	w2, #0x8
   5a880:	mov	w7, #0x0                   	// #0
   5a884:	csel	w2, w2, w26, ls  // ls = plast
   5a888:	fmov	d0, xzr
   5a88c:	nop
   5a890:	sub	w1, w2, w6
   5a894:	ldrb	w4, [x22, w3, uxtw]
   5a898:	sub	w0, w0, w1
   5a89c:	add	w3, w3, #0x1
   5a8a0:	lsl	w2, w27, w1
   5a8a4:	sub	w2, w2, #0x1
   5a8a8:	asr	w4, w4, w6
   5a8ac:	and	w4, w4, w2
   5a8b0:	cmp	w0, #0x8
   5a8b4:	mov	w6, #0x0                   	// #0
   5a8b8:	lsl	w4, w4, w7
   5a8bc:	fmov	d1, x4
   5a8c0:	csel	w2, w0, w26, ls  // ls = plast
   5a8c4:	add	w7, w7, w1
   5a8c8:	orr	v0.8b, v0.8b, v1.8b
   5a8cc:	cbnz	w0, 5a890 <floatformat_to_double@@Base+0x128>
   5a8d0:	ucvtf	d0, d0
   5a8d4:	sub	w0, w21, w5
   5a8d8:	sub	w24, w24, w5
   5a8dc:	sub	x21, x21, w5, sxtw
   5a8e0:	bl	351d0 <ldexp@plt>
   5a8e4:	fadd	d8, d8, d0
   5a8e8:	ldp	w28, w3, [x23]
   5a8ec:	cmp	w24, #0x0
   5a8f0:	b.gt	5a858 <floatformat_to_double@@Base+0xf0>
   5a8f4:	ldr	w2, [x23, #8]
   5a8f8:	mvn	w0, w2
   5a8fc:	add	w3, w0, w3
   5a900:	cbnz	w28, 5ab50 <floatformat_to_double@@Base+0x3e8>
   5a904:	and	w5, w3, #0x7
   5a908:	mov	w1, #0x1                   	// #1
   5a90c:	lsr	w3, w3, #3
   5a910:	add	w4, w5, #0x1
   5a914:	mov	w9, w1
   5a918:	mov	w6, #0x0                   	// #0
   5a91c:	mov	x7, #0x0                   	// #0
   5a920:	mov	w8, #0x8                   	// #8
   5a924:	nop
   5a928:	sub	w2, w4, w5
   5a92c:	ldrb	w0, [x22, w3, uxtw]
   5a930:	sub	w1, w1, w2
   5a934:	add	w3, w3, #0x1
   5a938:	lsl	w4, w9, w2
   5a93c:	sub	w4, w4, #0x1
   5a940:	asr	w0, w0, w5
   5a944:	and	w0, w0, w4
   5a948:	cmp	w1, #0x8
   5a94c:	mov	w5, #0x0                   	// #0
   5a950:	lsl	w0, w0, w6
   5a954:	csel	w4, w1, w8, ls  // ls = plast
   5a958:	orr	x7, x7, x0
   5a95c:	add	w6, w6, w2
   5a960:	cbnz	w1, 5a928 <floatformat_to_double@@Base+0x1c0>
   5a964:	fneg	d0, d8
   5a968:	cmp	x7, #0x0
   5a96c:	ldp	x25, x26, [sp, #64]
   5a970:	ldp	x21, x22, [sp, #32]
   5a974:	fcsel	d8, d0, d8, ne  // ne = any
   5a978:	ldp	x23, x24, [sp, #48]
   5a97c:	ldp	x27, x28, [sp, #80]
   5a980:	str	d8, [x20]
   5a984:	ldp	x19, x20, [sp, #16]
   5a988:	ldr	d8, [sp, #96]
   5a98c:	ldp	x29, x30, [sp], #128
   5a990:	ret
   5a994:	and	w0, w0, #0x7
   5a998:	sub	w2, w2, #0x1
   5a99c:	add	w6, w0, w4
   5a9a0:	mov	w8, #0x8                   	// #8
   5a9a4:	cmp	w6, w8
   5a9a8:	lsr	w2, w2, #3
   5a9ac:	csel	w6, w6, w8, ls  // ls = plast
   5a9b0:	mov	w7, #0x0                   	// #0
   5a9b4:	mov	x21, #0x0                   	// #0
   5a9b8:	mov	w9, #0x1                   	// #1
   5a9bc:	sub	w5, w6, w0
   5a9c0:	ldrb	w1, [x22, w2, uxtw]
   5a9c4:	sub	w4, w4, w5
   5a9c8:	sub	w2, w2, #0x1
   5a9cc:	lsl	w6, w9, w5
   5a9d0:	sub	w6, w6, #0x1
   5a9d4:	asr	w1, w1, w0
   5a9d8:	and	w1, w1, w6
   5a9dc:	cmp	w4, #0x8
   5a9e0:	mov	w0, #0x0                   	// #0
   5a9e4:	lsl	w1, w1, w7
   5a9e8:	csel	w6, w4, w8, ls  // ls = plast
   5a9ec:	orr	x21, x21, x1
   5a9f0:	add	w7, w7, w5
   5a9f4:	cbnz	w4, 5a9bc <floatformat_to_double@@Base+0x254>
   5a9f8:	ldr	w0, [x23, #24]
   5a9fc:	mov	w19, #0xffffffff            	// #-1
   5aa00:	cmp	x0, x21
   5aa04:	b.ne	5a814 <floatformat_to_double@@Base+0xac>  // b.any
   5aa08:	mov	x1, x22
   5aa0c:	mov	x0, x23
   5aa10:	str	w3, [sp, #124]
   5aa14:	bl	59be0 <print_arm_disassembler_options@@Base+0xd0>
   5aa18:	ldr	w3, [sp, #124]
   5aa1c:	cmp	w0, #0x0
   5aa20:	ldr	w1, [x23, #8]
   5aa24:	mov	x2, #0x7ff8000000000000    	// #9221120237041090560
   5aa28:	sub	w3, w3, #0x1
   5aa2c:	fmov	d0, x2
   5aa30:	sub	w0, w3, w1
   5aa34:	mov	x2, #0x7ff0000000000000    	// #9218868437227405312
   5aa38:	fmov	d1, x2
   5aa3c:	lsr	w2, w1, #3
   5aa40:	lsr	w3, w0, #3
   5aa44:	and	w1, w0, #0x7
   5aa48:	fcsel	d0, d0, d1, ne  // ne = any
   5aa4c:	cmp	w28, #0x0
   5aa50:	csel	w2, w2, w3, ne  // ne = any
   5aa54:	mov	w8, w19
   5aa58:	add	w4, w1, #0x1
   5aa5c:	cmp	w19, #0x1
   5aa60:	mov	w5, #0x0                   	// #0
   5aa64:	mov	x6, #0x0                   	// #0
   5aa68:	mov	w7, #0x8                   	// #8
   5aa6c:	b.ne	5abc8 <floatformat_to_double@@Base+0x460>  // b.any
   5aa70:	sub	w3, w4, w1
   5aa74:	ldrb	w0, [x22, w2, uxtw]
   5aa78:	sub	w19, w19, w3
   5aa7c:	add	w2, w2, #0x1
   5aa80:	lsl	w4, w8, w3
   5aa84:	sub	w4, w4, #0x1
   5aa88:	asr	w0, w0, w1
   5aa8c:	and	w0, w0, w4
   5aa90:	cmp	w19, #0x8
   5aa94:	mov	w1, #0x0                   	// #0
   5aa98:	lsl	w0, w0, w5
   5aa9c:	csel	w4, w19, w7, ls  // ls = plast
   5aaa0:	orr	x6, x6, x0
   5aaa4:	add	w5, w5, w3
   5aaa8:	cbnz	w19, 5aa70 <floatformat_to_double@@Base+0x308>
   5aaac:	fneg	d1, d0
   5aab0:	cmp	x6, #0x0
   5aab4:	ldp	x21, x22, [sp, #32]
   5aab8:	ldp	x23, x24, [sp, #48]
   5aabc:	fcsel	d0, d1, d0, ne  // ne = any
   5aac0:	ldp	x27, x28, [sp, #80]
   5aac4:	str	d0, [x20]
   5aac8:	ldp	x19, x20, [sp, #16]
   5aacc:	ldp	x29, x30, [sp], #128
   5aad0:	ret
   5aad4:	mov	w21, #0x1                   	// #1
   5aad8:	sub	w21, w21, w0
   5aadc:	movi	d8, #0x0
   5aae0:	sxtw	x21, w21
   5aae4:	b	5a840 <floatformat_to_double@@Base+0xd8>
   5aae8:	and	w3, w3, #0x7
   5aaec:	sub	w0, w25, #0x1
   5aaf0:	add	w6, w3, w5
   5aaf4:	mov	w1, w5
   5aaf8:	cmp	w6, #0x8
   5aafc:	lsr	w0, w0, #3
   5ab00:	csel	w6, w6, w26, ls  // ls = plast
   5ab04:	mov	w7, #0x0                   	// #0
   5ab08:	fmov	d0, xzr
   5ab0c:	sub	w4, w6, w3
   5ab10:	ldrb	w2, [x22, w0, uxtw]
   5ab14:	sub	w1, w1, w4
   5ab18:	sub	w0, w0, #0x1
   5ab1c:	lsl	w6, w27, w4
   5ab20:	sub	w6, w6, #0x1
   5ab24:	asr	w2, w2, w3
   5ab28:	and	w2, w2, w6
   5ab2c:	cmp	w1, #0x8
   5ab30:	mov	w3, #0x0                   	// #0
   5ab34:	lsl	w2, w2, w7
   5ab38:	fmov	d1, x2
   5ab3c:	csel	w6, w1, w26, ls  // ls = plast
   5ab40:	add	w7, w7, w4
   5ab44:	orr	v0.8b, v0.8b, v1.8b
   5ab48:	cbnz	w1, 5ab0c <floatformat_to_double@@Base+0x3a4>
   5ab4c:	b	5a8d0 <floatformat_to_double@@Base+0x168>
   5ab50:	and	w3, w3, #0x7
   5ab54:	mov	w1, #0x1                   	// #1
   5ab58:	lsr	w2, w2, #3
   5ab5c:	add	w5, w3, #0x1
   5ab60:	mov	w9, w1
   5ab64:	mov	w6, #0x0                   	// #0
   5ab68:	mov	x7, #0x0                   	// #0
   5ab6c:	mov	w8, #0x8                   	// #8
   5ab70:	sub	w4, w5, w3
   5ab74:	ldrb	w0, [x22, w2, uxtw]
   5ab78:	sub	w1, w1, w4
   5ab7c:	sub	w2, w2, #0x1
   5ab80:	lsl	w5, w9, w4
   5ab84:	sub	w5, w5, #0x1
   5ab88:	asr	w3, w0, w3
   5ab8c:	and	w0, w3, w5
   5ab90:	cmp	w1, #0x8
   5ab94:	mov	w3, #0x0                   	// #0
   5ab98:	lsl	w0, w0, w6
   5ab9c:	csel	w5, w1, w8, ls  // ls = plast
   5aba0:	orr	x7, x7, x0
   5aba4:	add	w6, w6, w4
   5aba8:	cbnz	w1, 5ab70 <floatformat_to_double@@Base+0x408>
   5abac:	b	5a964 <floatformat_to_double@@Base+0x1fc>
   5abb0:	fmov	d0, #1.000000000000000000e+00
   5abb4:	mov	w0, w21
   5abb8:	bl	351d0 <ldexp@plt>
   5abbc:	fmov	d8, d0
   5abc0:	ldp	w28, w3, [x23]
   5abc4:	b	5a840 <floatformat_to_double@@Base+0xd8>
   5abc8:	mov	w3, #0x1                   	// #1
   5abcc:	mov	w9, w3
   5abd0:	mov	w7, #0x0                   	// #0
   5abd4:	mov	w8, #0x8                   	// #8
   5abd8:	sub	w5, w4, w1
   5abdc:	ldrb	w0, [x22, w2, uxtw]
   5abe0:	sub	w3, w3, w5
   5abe4:	add	w2, w2, w19
   5abe8:	lsl	w4, w9, w5
   5abec:	sub	w4, w4, #0x1
   5abf0:	asr	w0, w0, w1
   5abf4:	and	w0, w0, w4
   5abf8:	cmp	w3, #0x8
   5abfc:	mov	w1, #0x0                   	// #0
   5ac00:	lsl	w0, w0, w7
   5ac04:	csel	w4, w3, w8, ls  // ls = plast
   5ac08:	orr	x6, x6, x0
   5ac0c:	add	w7, w7, w5
   5ac10:	cbnz	w3, 5abd8 <floatformat_to_double@@Base+0x470>
   5ac14:	b	5aaac <floatformat_to_double@@Base+0x344>

000000000005ac18 <floatformat_from_double@@Base>:
   5ac18:	stp	x29, x30, [sp, #-96]!
   5ac1c:	mov	x3, x1
   5ac20:	mov	w1, #0x0                   	// #0
   5ac24:	mov	x29, sp
   5ac28:	stp	x21, x22, [sp, #32]
   5ac2c:	mov	x22, x0
   5ac30:	mov	x0, x2
   5ac34:	stp	x19, x20, [sp, #16]
   5ac38:	mov	x19, x2
   5ac3c:	ldr	w2, [x22, #4]
   5ac40:	str	d8, [sp, #72]
   5ac44:	ldr	d8, [x3]
   5ac48:	lsr	w2, w2, #3
   5ac4c:	bl	35470 <memset@plt>
   5ac50:	fcmpe	d8, #0.0
   5ac54:	b.mi	5af0c <floatformat_from_double@@Base+0x2f4>  // b.first
   5ac58:	fcmp	d8, #0.0
   5ac5c:	b.eq	5aef8 <floatformat_from_double@@Base+0x2e0>  // b.none
   5ac60:	fcmp	d8, d8
   5ac64:	stp	x23, x24, [sp, #48]
   5ac68:	ldr	w1, [x22, #4]
   5ac6c:	ldp	w24, w20, [x22, #12]
   5ac70:	str	x25, [sp, #64]
   5ac74:	ldr	w25, [x22]
   5ac78:	add	w24, w20, w24
   5ac7c:	sub	w21, w1, w24
   5ac80:	b.ne	5b150 <floatformat_from_double@@Base+0x538>  // b.any
   5ac84:	fadd	d0, d8, d8
   5ac88:	fcmp	d0, d8
   5ac8c:	b.eq	5af8c <floatformat_from_double@@Base+0x374>  // b.none
   5ac90:	fmov	d0, d8
   5ac94:	add	x0, sp, #0x5c
   5ac98:	bl	35850 <frexp@plt>
   5ac9c:	ldr	w23, [sp, #92]
   5aca0:	ldr	w3, [x22, #20]
   5aca4:	add	w3, w23, w3
   5aca8:	cmp	w3, #0x1
   5acac:	b.le	5b0e0 <floatformat_from_double@@Base+0x4c8>
   5acb0:	sub	w3, w3, #0x1
   5acb4:	sxtw	x3, w3
   5acb8:	cbnz	w25, 5b070 <floatformat_from_double@@Base+0x458>
   5acbc:	and	w5, w21, #0x7
   5acc0:	mov	w0, #0x8                   	// #8
   5acc4:	add	w2, w5, w20
   5acc8:	lsr	w1, w21, #3
   5accc:	cmp	w2, w0
   5acd0:	mov	w8, w0
   5acd4:	csel	w2, w2, w0, ls  // ls = plast
   5acd8:	mov	w7, #0x1                   	// #1
   5acdc:	nop
   5ace0:	sub	w2, w2, w5
   5ace4:	ldrb	w4, [x19, w1, uxtw]
   5ace8:	lsl	x6, x3, x5
   5acec:	sub	w20, w20, w2
   5acf0:	lsl	w0, w7, w2
   5acf4:	sub	w0, w0, #0x1
   5acf8:	eor	w6, w4, w6
   5acfc:	cmp	w20, #0x8
   5ad00:	lsl	w0, w0, w5
   5ad04:	and	w0, w0, w6
   5ad08:	eor	w0, w4, w0
   5ad0c:	strb	w0, [x19, w1, uxtw]
   5ad10:	lsr	x3, x3, x2
   5ad14:	add	w1, w1, #0x1
   5ad18:	csel	w2, w20, w8, ls  // ls = plast
   5ad1c:	mov	w5, #0x0                   	// #0
   5ad20:	cbnz	w20, 5ace0 <floatformat_from_double@@Base+0xc8>
   5ad24:	ldp	w7, w0, [x22, #28]
   5ad28:	cmp	w0, #0x0
   5ad2c:	mov	w4, w0
   5ad30:	b.le	5aef0 <floatformat_from_double@@Base+0x2d8>
   5ad34:	mov	x1, #0x41f0000000000000    	// #4751297606875873280
   5ad38:	fmov	d3, x1
   5ad3c:	cmp	w4, #0x20
   5ad40:	mov	w10, #0x20                  	// #32
   5ad44:	fmul	d0, d0, d3
   5ad48:	csel	w6, w4, w10, le
   5ad4c:	mov	w8, #0x8                   	// #8
   5ad50:	cmp	w4, w0
   5ad54:	mov	w9, #0x1                   	// #1
   5ad58:	fcvtzu	d1, d0
   5ad5c:	ucvtf	d2, d1
   5ad60:	fsub	d0, d0, d2
   5ad64:	b.eq	5ae34 <floatformat_from_double@@Base+0x21c>  // b.none
   5ad68:	cmp	w4, #0x1f
   5ad6c:	b.gt	5b0d8 <floatformat_from_double@@Base+0x4c0>
   5ad70:	sub	w0, w10, w6
   5ad74:	dup	v2.8b, w0
   5ad78:	neg	d2, d2
   5ad7c:	ushl	d2, d1, d2
   5ad80:	fmov	d1, d2
   5ad84:	ldp	w0, w1, [x22]
   5ad88:	add	w7, w7, w6
   5ad8c:	sub	w1, w1, w7
   5ad90:	cbnz	w0, 5ae70 <floatformat_from_double@@Base+0x258>
   5ad94:	and	w11, w1, #0x7
   5ad98:	mov	w3, w6
   5ad9c:	add	w0, w11, w6
   5ada0:	lsr	w1, w1, #3
   5ada4:	cmp	w0, #0x8
   5ada8:	csel	w0, w0, w8, ls  // ls = plast
   5adac:	nop
   5adb0:	sub	w0, w0, w11
   5adb4:	fmov	x2, d1
   5adb8:	ldrb	w5, [x19, w1, uxtw]
   5adbc:	sub	w3, w3, w0
   5adc0:	dup	v2.8b, w0
   5adc4:	cmp	w3, #0x8
   5adc8:	lsl	x12, x2, x11
   5adcc:	eor	w12, w5, w12
   5add0:	lsl	w2, w9, w0
   5add4:	sub	w2, w2, #0x1
   5add8:	neg	d2, d2
   5addc:	csel	w0, w3, w8, ls  // ls = plast
   5ade0:	lsl	w2, w2, w11
   5ade4:	and	w2, w2, w12
   5ade8:	eor	w2, w5, w2
   5adec:	strb	w2, [x19, w1, uxtw]
   5adf0:	mov	w11, #0x0                   	// #0
   5adf4:	add	w1, w1, #0x1
   5adf8:	ushl	d2, d1, d2
   5adfc:	fmov	d1, d2
   5ae00:	cbnz	w3, 5adb0 <floatformat_from_double@@Base+0x198>
   5ae04:	sub	w4, w4, w6
   5ae08:	cmp	w4, #0x0
   5ae0c:	b.le	5aef0 <floatformat_from_double@@Base+0x2d8>
   5ae10:	fmul	d0, d0, d3
   5ae14:	ldr	w0, [x22, #32]
   5ae18:	cmp	w4, #0x20
   5ae1c:	csel	w6, w4, w10, le
   5ae20:	cmp	w4, w0
   5ae24:	fcvtzu	d1, d0
   5ae28:	ucvtf	d2, d1
   5ae2c:	fsub	d0, d0, d2
   5ae30:	b.ne	5ad68 <floatformat_from_double@@Base+0x150>  // b.any
   5ae34:	ldr	w0, [x22, #36]
   5ae38:	cmp	w0, #0x1
   5ae3c:	b.ne	5ad68 <floatformat_from_double@@Base+0x150>  // b.any
   5ae40:	ldr	w0, [x22, #20]
   5ae44:	add	w0, w23, w0
   5ae48:	cmp	w0, #0x1
   5ae4c:	b.le	5ad68 <floatformat_from_double@@Base+0x150>
   5ae50:	mov	x0, #0x7fffffff            	// #2147483647
   5ae54:	fmov	d2, x0
   5ae58:	ldp	w0, w1, [x22]
   5ae5c:	sub	w6, w6, #0x1
   5ae60:	add	w7, w7, w6
   5ae64:	and	v1.8b, v1.8b, v2.8b
   5ae68:	sub	w1, w1, w7
   5ae6c:	cbz	w0, 5ad94 <floatformat_from_double@@Base+0x17c>
   5ae70:	and	w1, w1, #0x7
   5ae74:	sub	w0, w7, #0x1
   5ae78:	add	w3, w1, w6
   5ae7c:	mov	w5, w6
   5ae80:	cmp	w3, #0x8
   5ae84:	lsr	w0, w0, #3
   5ae88:	csel	w3, w3, w8, ls  // ls = plast
   5ae8c:	sub	w3, w3, w1
   5ae90:	fmov	x2, d1
   5ae94:	ldrb	w11, [x19, w0, uxtw]
   5ae98:	sub	w5, w5, w3
   5ae9c:	dup	v2.8b, w3
   5aea0:	cmp	w5, #0x8
   5aea4:	lsl	x12, x2, x1
   5aea8:	eor	w12, w11, w12
   5aeac:	lsl	w2, w9, w3
   5aeb0:	sub	w2, w2, #0x1
   5aeb4:	neg	d2, d2
   5aeb8:	csel	w3, w5, w8, ls  // ls = plast
   5aebc:	lsl	w1, w2, w1
   5aec0:	and	w1, w1, w12
   5aec4:	eor	w1, w11, w1
   5aec8:	strb	w1, [x19, w0, uxtw]
   5aecc:	sub	w0, w0, #0x1
   5aed0:	mov	w1, #0x0                   	// #0
   5aed4:	ushl	d2, d1, d2
   5aed8:	fmov	d1, d2
   5aedc:	cbnz	w5, 5ae8c <floatformat_from_double@@Base+0x274>
   5aee0:	sub	w4, w4, w6
   5aee4:	cmp	w4, #0x0
   5aee8:	b.gt	5ae10 <floatformat_from_double@@Base+0x1f8>
   5aeec:	nop
   5aef0:	ldp	x23, x24, [sp, #48]
   5aef4:	ldr	x25, [sp, #64]
   5aef8:	ldp	x19, x20, [sp, #16]
   5aefc:	ldp	x21, x22, [sp, #32]
   5af00:	ldr	d8, [sp, #72]
   5af04:	ldp	x29, x30, [sp], #96
   5af08:	ret
   5af0c:	ldp	w0, w1, [x22]
   5af10:	ldr	w3, [x22, #8]
   5af14:	sub	w1, w1, #0x1
   5af18:	sub	w1, w1, w3
   5af1c:	cbnz	w0, 5b008 <floatformat_from_double@@Base+0x3f0>
   5af20:	and	w5, w1, #0x7
   5af24:	mov	x7, #0x1                   	// #1
   5af28:	lsr	w1, w1, #3
   5af2c:	add	w2, w5, #0x1
   5af30:	mov	w3, w7
   5af34:	mov	w8, w7
   5af38:	mov	w9, #0x8                   	// #8
   5af3c:	nop
   5af40:	sub	w2, w2, w5
   5af44:	ldrb	w4, [x19, w1, uxtw]
   5af48:	lsl	x6, x7, x5
   5af4c:	sub	w3, w3, w2
   5af50:	lsl	w0, w8, w2
   5af54:	sub	w0, w0, #0x1
   5af58:	eor	w6, w4, w6
   5af5c:	cmp	w3, #0x8
   5af60:	lsl	w0, w0, w5
   5af64:	and	w0, w0, w6
   5af68:	eor	w0, w4, w0
   5af6c:	strb	w0, [x19, w1, uxtw]
   5af70:	lsr	x7, x7, x2
   5af74:	add	w1, w1, #0x1
   5af78:	csel	w2, w3, w9, ls  // ls = plast
   5af7c:	mov	w5, #0x0                   	// #0
   5af80:	cbnz	w3, 5af40 <floatformat_from_double@@Base+0x328>
   5af84:	fneg	d8, d8
   5af88:	b	5ac58 <floatformat_from_double@@Base+0x40>
   5af8c:	ldr	w6, [x22, #24]
   5af90:	cbnz	w25, 5b240 <floatformat_from_double@@Base+0x628>
   5af94:	and	w4, w21, #0x7
   5af98:	mov	w1, #0x8                   	// #8
   5af9c:	add	w2, w4, w20
   5afa0:	lsr	w0, w21, #3
   5afa4:	cmp	w2, w1
   5afa8:	mov	w8, w1
   5afac:	csel	w2, w2, w1, ls  // ls = plast
   5afb0:	mov	w7, #0x1                   	// #1
   5afb4:	nop
   5afb8:	sub	w2, w2, w4
   5afbc:	ldrb	w3, [x19, w0, uxtw]
   5afc0:	lsl	x5, x6, x4
   5afc4:	sub	w20, w20, w2
   5afc8:	lsl	w1, w7, w2
   5afcc:	sub	w1, w1, #0x1
   5afd0:	eor	w5, w3, w5
   5afd4:	cmp	w20, #0x8
   5afd8:	lsl	w1, w1, w4
   5afdc:	and	w1, w1, w5
   5afe0:	eor	w1, w3, w1
   5afe4:	strb	w1, [x19, w0, uxtw]
   5afe8:	lsr	x6, x6, x2
   5afec:	add	w0, w0, #0x1
   5aff0:	csel	w2, w20, w8, ls  // ls = plast
   5aff4:	mov	w4, #0x0                   	// #0
   5aff8:	cbnz	w20, 5afb8 <floatformat_from_double@@Base+0x3a0>
   5affc:	ldp	x23, x24, [sp, #48]
   5b000:	ldr	x25, [sp, #64]
   5b004:	b	5aef8 <floatformat_from_double@@Base+0x2e0>
   5b008:	and	w1, w1, #0x7
   5b00c:	mov	x7, #0x1                   	// #1
   5b010:	lsr	w3, w3, #3
   5b014:	add	w2, w1, #0x1
   5b018:	mov	w4, w7
   5b01c:	mov	w8, w7
   5b020:	mov	w9, #0x8                   	// #8
   5b024:	sub	w2, w2, w1
   5b028:	ldrb	w5, [x19, w3, uxtw]
   5b02c:	lsl	x6, x7, x1
   5b030:	sub	w4, w4, w2
   5b034:	lsl	w0, w8, w2
   5b038:	sub	w0, w0, #0x1
   5b03c:	eor	w6, w5, w6
   5b040:	cmp	w4, #0x8
   5b044:	lsl	w1, w0, w1
   5b048:	and	w1, w1, w6
   5b04c:	eor	w1, w5, w1
   5b050:	strb	w1, [x19, w3, uxtw]
   5b054:	lsr	x7, x7, x2
   5b058:	sub	w3, w3, #0x1
   5b05c:	csel	w2, w4, w9, ls  // ls = plast
   5b060:	mov	w1, #0x0                   	// #0
   5b064:	cbnz	w4, 5b024 <floatformat_from_double@@Base+0x40c>
   5b068:	fneg	d8, d8
   5b06c:	b	5ac58 <floatformat_from_double@@Base+0x40>
   5b070:	and	w1, w21, #0x7
   5b074:	sub	w24, w24, #0x1
   5b078:	add	w2, w1, w20
   5b07c:	mov	w6, #0x8                   	// #8
   5b080:	cmp	w2, w6
   5b084:	lsr	w24, w24, #3
   5b088:	csel	w2, w2, w6, ls  // ls = plast
   5b08c:	mov	w7, #0x1                   	// #1
   5b090:	sub	w2, w2, w1
   5b094:	ldrb	w4, [x19, w24, uxtw]
   5b098:	lsl	x5, x3, x1
   5b09c:	sub	w20, w20, w2
   5b0a0:	lsl	w0, w7, w2
   5b0a4:	sub	w0, w0, #0x1
   5b0a8:	eor	w5, w4, w5
   5b0ac:	cmp	w20, #0x8
   5b0b0:	lsl	w1, w0, w1
   5b0b4:	and	w1, w1, w5
   5b0b8:	eor	w1, w4, w1
   5b0bc:	strb	w1, [x19, w24, uxtw]
   5b0c0:	lsr	x3, x3, x2
   5b0c4:	sub	w24, w24, #0x1
   5b0c8:	csel	w2, w20, w6, ls  // ls = plast
   5b0cc:	mov	w1, #0x0                   	// #0
   5b0d0:	cbnz	w20, 5b090 <floatformat_from_double@@Base+0x478>
   5b0d4:	b	5ad24 <floatformat_from_double@@Base+0x10c>
   5b0d8:	mov	w6, #0x20                  	// #32
   5b0dc:	b	5ad84 <floatformat_from_double@@Base+0x16c>
   5b0e0:	cbnz	w25, 5b2a8 <floatformat_from_double@@Base+0x690>
   5b0e4:	and	w2, w21, #0x7
   5b0e8:	mov	w3, #0x8                   	// #8
   5b0ec:	add	w0, w2, w20
   5b0f0:	lsr	w1, w21, #3
   5b0f4:	cmp	w0, w3
   5b0f8:	mov	w5, w3
   5b0fc:	csel	w0, w0, w3, ls  // ls = plast
   5b100:	mov	w4, #0x1                   	// #1
   5b104:	nop
   5b108:	sub	w0, w0, w2
   5b10c:	ldrb	w3, [x19, w1, uxtw]
   5b110:	sub	w20, w20, w0
   5b114:	lsl	w0, w4, w0
   5b118:	sub	w0, w0, #0x1
   5b11c:	cmp	w20, #0x8
   5b120:	lsl	w0, w0, w2
   5b124:	bic	w0, w3, w0
   5b128:	strb	w0, [x19, w1, uxtw]
   5b12c:	mov	w2, #0x0                   	// #0
   5b130:	csel	w0, w20, w5, ls  // ls = plast
   5b134:	add	w1, w1, #0x1
   5b138:	cbnz	w20, 5b108 <floatformat_from_double@@Base+0x4f0>
   5b13c:	ldr	w0, [x22, #20]
   5b140:	add	w0, w23, w0
   5b144:	sub	w0, w0, #0x1
   5b148:	bl	351d0 <ldexp@plt>
   5b14c:	b	5ad24 <floatformat_from_double@@Base+0x10c>
   5b150:	ldr	w6, [x22, #24]
   5b154:	cbnz	w25, 5b300 <floatformat_from_double@@Base+0x6e8>
   5b158:	and	w4, w21, #0x7
   5b15c:	mov	w0, #0x8                   	// #8
   5b160:	add	w2, w4, w20
   5b164:	lsr	w1, w21, #3
   5b168:	cmp	w2, w0
   5b16c:	mov	w8, w0
   5b170:	csel	w2, w2, w0, ls  // ls = plast
   5b174:	mov	w7, #0x1                   	// #1
   5b178:	sub	w2, w2, w4
   5b17c:	ldrb	w3, [x19, w1, uxtw]
   5b180:	lsl	x5, x6, x4
   5b184:	sub	w20, w20, w2
   5b188:	lsl	w0, w7, w2
   5b18c:	sub	w0, w0, #0x1
   5b190:	eor	w5, w3, w5
   5b194:	cmp	w20, #0x8
   5b198:	lsl	w0, w0, w4
   5b19c:	and	w0, w0, w5
   5b1a0:	eor	w0, w3, w0
   5b1a4:	strb	w0, [x19, w1, uxtw]
   5b1a8:	lsr	x6, x6, x2
   5b1ac:	add	w1, w1, #0x1
   5b1b0:	csel	w2, w20, w8, ls  // ls = plast
   5b1b4:	mov	w4, #0x0                   	// #0
   5b1b8:	cbnz	w20, 5b178 <floatformat_from_double@@Base+0x560>
   5b1bc:	ldp	w2, w0, [x22]
   5b1c0:	ldr	w1, [x22, #28]
   5b1c4:	sub	w0, w0, #0x20
   5b1c8:	sub	w0, w0, w1
   5b1cc:	cbnz	w2, 5b368 <floatformat_from_double@@Base+0x750>
   5b1d0:	mov	w1, #0x8                   	// #8
   5b1d4:	mov	x7, #0x1                   	// #1
   5b1d8:	mov	w9, w1
   5b1dc:	mov	w8, w7
   5b1e0:	lsr	w5, w0, #3
   5b1e4:	and	w2, w0, #0x7
   5b1e8:	mov	w3, #0x20                  	// #32
   5b1ec:	nop
   5b1f0:	sub	w1, w1, w2
   5b1f4:	ldrb	w4, [x19, w5, uxtw]
   5b1f8:	lsl	x6, x7, x2
   5b1fc:	sub	w3, w3, w1
   5b200:	lsl	w0, w8, w1
   5b204:	sub	w0, w0, #0x1
   5b208:	eor	w6, w4, w6
   5b20c:	cmp	w3, #0x8
   5b210:	lsl	w0, w0, w2
   5b214:	and	w0, w0, w6
   5b218:	eor	w0, w4, w0
   5b21c:	strb	w0, [x19, w5, uxtw]
   5b220:	lsr	x7, x7, x1
   5b224:	add	w5, w5, #0x1
   5b228:	csel	w1, w3, w9, ls  // ls = plast
   5b22c:	mov	w2, #0x0                   	// #0
   5b230:	cbnz	w3, 5b1f0 <floatformat_from_double@@Base+0x5d8>
   5b234:	ldp	x23, x24, [sp, #48]
   5b238:	ldr	x25, [sp, #64]
   5b23c:	b	5aef8 <floatformat_from_double@@Base+0x2e0>
   5b240:	and	w1, w21, #0x7
   5b244:	sub	w0, w24, #0x1
   5b248:	add	w2, w1, w20
   5b24c:	mov	w5, #0x8                   	// #8
   5b250:	cmp	w2, w5
   5b254:	lsr	w0, w0, #3
   5b258:	csel	w2, w2, w5, ls  // ls = plast
   5b25c:	mov	w7, #0x1                   	// #1
   5b260:	sub	w2, w2, w1
   5b264:	ldrb	w3, [x19, w0, uxtw]
   5b268:	lsl	x4, x6, x1
   5b26c:	sub	w20, w20, w2
   5b270:	lsl	w21, w7, w2
   5b274:	sub	w21, w21, #0x1
   5b278:	eor	w4, w3, w4
   5b27c:	cmp	w20, #0x8
   5b280:	lsl	w1, w21, w1
   5b284:	and	w1, w1, w4
   5b288:	eor	w1, w3, w1
   5b28c:	strb	w1, [x19, w0, uxtw]
   5b290:	lsr	x6, x6, x2
   5b294:	sub	w0, w0, #0x1
   5b298:	csel	w2, w20, w5, ls  // ls = plast
   5b29c:	mov	w1, #0x0                   	// #0
   5b2a0:	cbnz	w20, 5b260 <floatformat_from_double@@Base+0x648>
   5b2a4:	b	5aef0 <floatformat_from_double@@Base+0x2d8>
   5b2a8:	and	w1, w21, #0x7
   5b2ac:	sub	w0, w24, #0x1
   5b2b0:	add	w2, w1, w20
   5b2b4:	mov	w3, #0x8                   	// #8
   5b2b8:	cmp	w2, w3
   5b2bc:	lsr	w0, w0, #3
   5b2c0:	csel	w2, w2, w3, ls  // ls = plast
   5b2c4:	mov	w5, #0x1                   	// #1
   5b2c8:	sub	w2, w2, w1
   5b2cc:	ldrb	w4, [x19, w0, uxtw]
   5b2d0:	sub	w20, w20, w2
   5b2d4:	lsl	w2, w5, w2
   5b2d8:	sub	w2, w2, #0x1
   5b2dc:	cmp	w20, #0x8
   5b2e0:	lsl	w1, w2, w1
   5b2e4:	bic	w1, w4, w1
   5b2e8:	strb	w1, [x19, w0, uxtw]
   5b2ec:	csel	w2, w20, w3, ls  // ls = plast
   5b2f0:	sub	w0, w0, #0x1
   5b2f4:	mov	w1, #0x0                   	// #0
   5b2f8:	cbnz	w20, 5b2c8 <floatformat_from_double@@Base+0x6b0>
   5b2fc:	b	5b13c <floatformat_from_double@@Base+0x524>
   5b300:	and	w1, w21, #0x7
   5b304:	sub	w0, w24, #0x1
   5b308:	add	w2, w1, w20
   5b30c:	mov	w5, #0x8                   	// #8
   5b310:	cmp	w2, w5
   5b314:	lsr	w0, w0, #3
   5b318:	csel	w2, w2, w5, ls  // ls = plast
   5b31c:	mov	w7, #0x1                   	// #1
   5b320:	sub	w2, w2, w1
   5b324:	ldrb	w3, [x19, w0, uxtw]
   5b328:	lsl	x4, x6, x1
   5b32c:	sub	w20, w20, w2
   5b330:	lsl	w21, w7, w2
   5b334:	sub	w21, w21, #0x1
   5b338:	eor	w4, w3, w4
   5b33c:	cmp	w20, #0x8
   5b340:	lsl	w1, w21, w1
   5b344:	and	w1, w1, w4
   5b348:	eor	w1, w3, w1
   5b34c:	strb	w1, [x19, w0, uxtw]
   5b350:	lsr	x6, x6, x2
   5b354:	sub	w0, w0, #0x1
   5b358:	csel	w2, w20, w5, ls  // ls = plast
   5b35c:	mov	w1, #0x0                   	// #0
   5b360:	cbnz	w20, 5b320 <floatformat_from_double@@Base+0x708>
   5b364:	b	5b1bc <floatformat_from_double@@Base+0x5a4>
   5b368:	add	w1, w1, #0x1f
   5b36c:	mov	w2, #0x8                   	// #8
   5b370:	mov	x7, #0x1                   	// #1
   5b374:	and	w0, w0, #0x7
   5b378:	lsr	w3, w1, #3
   5b37c:	mov	w9, w2
   5b380:	mov	w8, w7
   5b384:	mov	w4, #0x20                  	// #32
   5b388:	sub	w2, w2, w0
   5b38c:	ldrb	w5, [x19, w3, uxtw]
   5b390:	lsl	x6, x7, x0
   5b394:	sub	w4, w4, w2
   5b398:	lsl	w1, w8, w2
   5b39c:	sub	w1, w1, #0x1
   5b3a0:	eor	w6, w5, w6
   5b3a4:	cmp	w4, #0x8
   5b3a8:	lsl	w0, w1, w0
   5b3ac:	and	w0, w0, w6
   5b3b0:	eor	w0, w5, w0
   5b3b4:	strb	w0, [x19, w3, uxtw]
   5b3b8:	lsr	x7, x7, x2
   5b3bc:	sub	w3, w3, #0x1
   5b3c0:	csel	w2, w4, w9, ls  // ls = plast
   5b3c4:	mov	w0, #0x0                   	// #0
   5b3c8:	cbnz	w4, 5b388 <floatformat_from_double@@Base+0x770>
   5b3cc:	b	5aef0 <floatformat_from_double@@Base+0x2d8>

000000000005b3d0 <floatformat_is_valid@@Base>:
   5b3d0:	ldr	x2, [x0, #48]
   5b3d4:	mov	x16, x2
   5b3d8:	br	x16
   5b3dc:	nop

000000000005b3e0 <xmalloc_set_program_name@@Base>:
   5b3e0:	stp	x29, x30, [sp, #-32]!
   5b3e4:	adrp	x2, fd000 <aarch64_opcode_table@@Base+0x55a20>
   5b3e8:	mov	x29, sp
   5b3ec:	str	x19, [sp, #16]
   5b3f0:	adrp	x19, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   5b3f4:	str	x0, [x2, #1624]
   5b3f8:	ldr	x1, [x19, #1160]
   5b3fc:	cbz	x1, 5b40c <xmalloc_set_program_name@@Base+0x2c>
   5b400:	ldr	x19, [sp, #16]
   5b404:	ldp	x29, x30, [sp], #32
   5b408:	ret
   5b40c:	mov	x0, #0x0                   	// #0
   5b410:	bl	35160 <sbrk@plt>
   5b414:	str	x0, [x19, #1160]
   5b418:	ldr	x19, [sp, #16]
   5b41c:	ldp	x29, x30, [sp], #32
   5b420:	ret
   5b424:	nop

000000000005b428 <xmalloc_failed@@Base>:
   5b428:	stp	x29, x30, [sp, #-32]!
   5b42c:	adrp	x1, 112000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   5b430:	mov	x29, sp
   5b434:	stp	x19, x20, [sp, #16]
   5b438:	mov	x19, x0
   5b43c:	mov	x0, #0x0                   	// #0
   5b440:	ldr	x20, [x1, #1160]
   5b444:	cbz	x20, 5b498 <xmalloc_failed@@Base+0x70>
   5b448:	bl	35160 <sbrk@plt>
   5b44c:	sub	x5, x0, x20
   5b450:	adrp	x0, fd000 <aarch64_opcode_table@@Base+0x55a20>
   5b454:	adrp	x6, a6000 <aarch64_operands@@Base+0x16bd0>
   5b458:	adrp	x1, 5c000 <xexit@@Base+0xa80>
   5b45c:	adrp	x3, 77000 <fields@@Base+0x13f60>
   5b460:	ldr	x2, [x0, #1624]
   5b464:	add	x1, x1, #0x6b8
   5b468:	ldr	x6, [x6, #3840]
   5b46c:	add	x3, x3, #0xff8
   5b470:	ldrb	w7, [x2]
   5b474:	mov	x4, x19
   5b478:	ldr	x0, [x6]
   5b47c:	cmp	w7, #0x0
   5b480:	csel	x3, x3, x1, ne  // ne = any
   5b484:	adrp	x1, 78000 <_sch_istable@@Base+0x208>
   5b488:	add	x1, x1, #0x0
   5b48c:	bl	35b80 <fprintf@plt>
   5b490:	mov	w0, #0x1                   	// #1
   5b494:	bl	35950 <xexit@plt>
   5b498:	bl	35160 <sbrk@plt>
   5b49c:	adrp	x5, a6000 <aarch64_operands@@Base+0x16bd0>
   5b4a0:	ldr	x5, [x5, #4008]
   5b4a4:	sub	x5, x0, x5
   5b4a8:	b	5b450 <xmalloc_failed@@Base+0x28>
   5b4ac:	nop

000000000005b4b0 <xmalloc@@Base>:
   5b4b0:	stp	x29, x30, [sp, #-32]!
   5b4b4:	cmp	x0, #0x0
   5b4b8:	mov	x29, sp
   5b4bc:	str	x19, [sp, #16]
   5b4c0:	csinc	x19, x0, xzr, ne  // ne = any
   5b4c4:	mov	x0, x19
   5b4c8:	bl	353e0 <malloc@plt>
   5b4cc:	cbz	x0, 5b4dc <xmalloc@@Base+0x2c>
   5b4d0:	ldr	x19, [sp, #16]
   5b4d4:	ldp	x29, x30, [sp], #32
   5b4d8:	ret
   5b4dc:	mov	x0, x19
   5b4e0:	bl	359a0 <xmalloc_failed@plt>
   5b4e4:	nop

000000000005b4e8 <xcalloc@@Base>:
   5b4e8:	stp	x29, x30, [sp, #-32]!
   5b4ec:	cmp	x0, #0x0
   5b4f0:	ccmp	x1, #0x0, #0x4, ne  // ne = any
   5b4f4:	mov	x29, sp
   5b4f8:	stp	x19, x20, [sp, #16]
   5b4fc:	b.ne	5b524 <xcalloc@@Base+0x3c>  // b.any
   5b500:	mov	x19, #0x1                   	// #1
   5b504:	mov	x20, x19
   5b508:	mov	x1, x19
   5b50c:	mov	x0, x20
   5b510:	bl	35520 <calloc@plt>
   5b514:	cbz	x0, 5b530 <xcalloc@@Base+0x48>
   5b518:	ldp	x19, x20, [sp, #16]
   5b51c:	ldp	x29, x30, [sp], #32
   5b520:	ret
   5b524:	mov	x20, x0
   5b528:	mov	x19, x1
   5b52c:	b	5b508 <xcalloc@@Base+0x20>
   5b530:	mul	x0, x20, x19
   5b534:	bl	359a0 <xmalloc_failed@plt>

000000000005b538 <xrealloc@@Base>:
   5b538:	stp	x29, x30, [sp, #-32]!
   5b53c:	cmp	x1, #0x0
   5b540:	mov	x29, sp
   5b544:	str	x19, [sp, #16]
   5b548:	csinc	x19, x1, xzr, ne  // ne = any
   5b54c:	cbz	x0, 5b568 <xrealloc@@Base+0x30>
   5b550:	mov	x1, x19
   5b554:	bl	35590 <realloc@plt>
   5b558:	cbz	x0, 5b574 <xrealloc@@Base+0x3c>
   5b55c:	ldr	x19, [sp, #16]
   5b560:	ldp	x29, x30, [sp], #32
   5b564:	ret
   5b568:	mov	x0, x19
   5b56c:	bl	353e0 <malloc@plt>
   5b570:	b	5b558 <xrealloc@@Base+0x20>
   5b574:	mov	x0, x19
   5b578:	bl	359a0 <xmalloc_failed@plt>
   5b57c:	nop

000000000005b580 <xexit@@Base>:
   5b580:	stp	x29, x30, [sp, #-32]!
   5b584:	adrp	x1, a6000 <aarch64_operands@@Base+0x16bd0>
   5b588:	mov	x29, sp
   5b58c:	ldr	x1, [x1, #3984]
   5b590:	str	x19, [sp, #16]
   5b594:	mov	w19, w0
   5b598:	ldr	x0, [x1]
   5b59c:	cbz	x0, 5b5a4 <xexit@@Base+0x24>
   5b5a0:	blr	x0
   5b5a4:	mov	w0, w19
   5b5a8:	bl	350f0 <exit@plt>

Disassembly of section .fini:

000000000005b5ac <.fini>:
   5b5ac:	stp	x29, x30, [sp, #-16]!
   5b5b0:	mov	x29, sp
   5b5b4:	ldp	x29, x30, [sp], #16
   5b5b8:	ret
