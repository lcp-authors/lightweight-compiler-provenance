
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//_md5.cpython-38-aarch64-linux-gnu.so_gcc_-O3:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000000d00 <.init>:
 d00:	stp	x29, x30, [sp, #-16]!
 d04:	mov	x29, sp
 d08:	bl	e70 <_Py_strhex@plt+0x10>
 d0c:	ldp	x29, x30, [sp], #16
 d10:	ret

Disassembly of section .plt:

0000000000000d20 <memcpy@plt-0x20>:
 d20:	stp	x16, x30, [sp, #-16]!
 d24:	adrp	x16, 12000 <PyInit__md5@@Base+0xfe38>
 d28:	ldr	x17, [x16, #4088]
 d2c:	add	x16, x16, #0xff8
 d30:	br	x17
 d34:	nop
 d38:	nop
 d3c:	nop

0000000000000d40 <memcpy@plt>:
 d40:	adrp	x16, 13000 <memcpy@GLIBC_2.17>
 d44:	ldr	x17, [x16]
 d48:	add	x16, x16, #0x0
 d4c:	br	x17

0000000000000d50 <PyBuffer_Release@plt>:
 d50:	adrp	x16, 13000 <memcpy@GLIBC_2.17>
 d54:	ldr	x17, [x16, #8]
 d58:	add	x16, x16, #0x8
 d5c:	br	x17

0000000000000d60 <__cxa_finalize@plt>:
 d60:	adrp	x16, 13000 <memcpy@GLIBC_2.17>
 d64:	ldr	x17, [x16, #16]
 d68:	add	x16, x16, #0x10
 d6c:	br	x17

0000000000000d70 <PyBytes_FromStringAndSize@plt>:
 d70:	adrp	x16, 13000 <memcpy@GLIBC_2.17>
 d74:	ldr	x17, [x16, #24]
 d78:	add	x16, x16, #0x18
 d7c:	br	x17

0000000000000d80 <_Py_Dealloc@plt>:
 d80:	adrp	x16, 13000 <memcpy@GLIBC_2.17>
 d84:	ldr	x17, [x16, #32]
 d88:	add	x16, x16, #0x20
 d8c:	br	x17

0000000000000d90 <_PyArg_UnpackKeywords@plt>:
 d90:	adrp	x16, 13000 <memcpy@GLIBC_2.17>
 d94:	ldr	x17, [x16, #40]
 d98:	add	x16, x16, #0x28
 d9c:	br	x17

0000000000000da0 <PyErr_SetString@plt>:
 da0:	adrp	x16, 13000 <memcpy@GLIBC_2.17>
 da4:	ldr	x17, [x16, #48]
 da8:	add	x16, x16, #0x30
 dac:	br	x17

0000000000000db0 <memset@plt>:
 db0:	adrp	x16, 13000 <memcpy@GLIBC_2.17>
 db4:	ldr	x17, [x16, #56]
 db8:	add	x16, x16, #0x38
 dbc:	br	x17

0000000000000dc0 <PyObject_Free@plt>:
 dc0:	adrp	x16, 13000 <memcpy@GLIBC_2.17>
 dc4:	ldr	x17, [x16, #64]
 dc8:	add	x16, x16, #0x40
 dcc:	br	x17

0000000000000dd0 <PyType_Ready@plt>:
 dd0:	adrp	x16, 13000 <memcpy@GLIBC_2.17>
 dd4:	ldr	x17, [x16, #72]
 dd8:	add	x16, x16, #0x48
 ddc:	br	x17

0000000000000de0 <PyLong_FromLong@plt>:
 de0:	adrp	x16, 13000 <memcpy@GLIBC_2.17>
 de4:	ldr	x17, [x16, #80]
 de8:	add	x16, x16, #0x50
 dec:	br	x17

0000000000000df0 <__gmon_start__@plt>:
 df0:	adrp	x16, 13000 <memcpy@GLIBC_2.17>
 df4:	ldr	x17, [x16, #88]
 df8:	add	x16, x16, #0x58
 dfc:	br	x17

0000000000000e00 <PyErr_Occurred@plt>:
 e00:	adrp	x16, 13000 <memcpy@GLIBC_2.17>
 e04:	ldr	x17, [x16, #96]
 e08:	add	x16, x16, #0x60
 e0c:	br	x17

0000000000000e10 <PyModule_Create2@plt>:
 e10:	adrp	x16, 13000 <memcpy@GLIBC_2.17>
 e14:	ldr	x17, [x16, #104]
 e18:	add	x16, x16, #0x68
 e1c:	br	x17

0000000000000e20 <PyObject_GetBuffer@plt>:
 e20:	adrp	x16, 13000 <memcpy@GLIBC_2.17>
 e24:	ldr	x17, [x16, #112]
 e28:	add	x16, x16, #0x70
 e2c:	br	x17

0000000000000e30 <_PyObject_New@plt>:
 e30:	adrp	x16, 13000 <memcpy@GLIBC_2.17>
 e34:	ldr	x17, [x16, #120]
 e38:	add	x16, x16, #0x78
 e3c:	br	x17

0000000000000e40 <PyModule_AddObject@plt>:
 e40:	adrp	x16, 13000 <memcpy@GLIBC_2.17>
 e44:	ldr	x17, [x16, #128]
 e48:	add	x16, x16, #0x80
 e4c:	br	x17

0000000000000e50 <PyUnicode_FromStringAndSize@plt>:
 e50:	adrp	x16, 13000 <memcpy@GLIBC_2.17>
 e54:	ldr	x17, [x16, #136]
 e58:	add	x16, x16, #0x88
 e5c:	br	x17

0000000000000e60 <_Py_strhex@plt>:
 e60:	adrp	x16, 13000 <memcpy@GLIBC_2.17>
 e64:	ldr	x17, [x16, #144]
 e68:	add	x16, x16, #0x90
 e6c:	br	x17

Disassembly of section .text:

0000000000000e70 <PyInit__md5@@Base-0x1358>:
     e70:	adrp	x0, 12000 <PyInit__md5@@Base+0xfe38>
     e74:	ldr	x0, [x0, #4040]
     e78:	cbz	x0, e80 <_Py_strhex@plt+0x20>
     e7c:	b	df0 <__gmon_start__@plt>
     e80:	ret
     e84:	nop
     e88:	adrp	x0, 13000 <PyInit__md5@@Base+0x10e38>
     e8c:	add	x0, x0, #0x468
     e90:	adrp	x1, 13000 <PyInit__md5@@Base+0x10e38>
     e94:	add	x1, x1, #0x468
     e98:	cmp	x1, x0
     e9c:	b.eq	eb4 <_Py_strhex@plt+0x54>  // b.none
     ea0:	adrp	x1, 12000 <PyInit__md5@@Base+0xfe38>
     ea4:	ldr	x1, [x1, #4008]
     ea8:	cbz	x1, eb4 <_Py_strhex@plt+0x54>
     eac:	mov	x16, x1
     eb0:	br	x16
     eb4:	ret
     eb8:	adrp	x0, 13000 <PyInit__md5@@Base+0x10e38>
     ebc:	add	x0, x0, #0x468
     ec0:	adrp	x1, 13000 <PyInit__md5@@Base+0x10e38>
     ec4:	add	x1, x1, #0x468
     ec8:	sub	x1, x1, x0
     ecc:	lsr	x2, x1, #63
     ed0:	add	x1, x2, x1, asr #3
     ed4:	cmp	xzr, x1, asr #1
     ed8:	asr	x1, x1, #1
     edc:	b.eq	ef4 <_Py_strhex@plt+0x94>  // b.none
     ee0:	adrp	x2, 12000 <PyInit__md5@@Base+0xfe38>
     ee4:	ldr	x2, [x2, #4064]
     ee8:	cbz	x2, ef4 <_Py_strhex@plt+0x94>
     eec:	mov	x16, x2
     ef0:	br	x16
     ef4:	ret
     ef8:	stp	x29, x30, [sp, #-32]!
     efc:	mov	x29, sp
     f00:	str	x19, [sp, #16]
     f04:	adrp	x19, 13000 <PyInit__md5@@Base+0x10e38>
     f08:	ldrb	w0, [x19, #1128]
     f0c:	cbnz	w0, f34 <_Py_strhex@plt+0xd4>
     f10:	adrp	x0, 12000 <PyInit__md5@@Base+0xfe38>
     f14:	ldr	x0, [x0, #4016]
     f18:	cbz	x0, f28 <_Py_strhex@plt+0xc8>
     f1c:	adrp	x0, 13000 <PyInit__md5@@Base+0x10e38>
     f20:	ldr	x0, [x0, #152]
     f24:	bl	d60 <__cxa_finalize@plt>
     f28:	bl	e88 <_Py_strhex@plt+0x28>
     f2c:	mov	w0, #0x1                   	// #1
     f30:	strb	w0, [x19, #1128]
     f34:	ldr	x19, [sp, #16]
     f38:	ldp	x29, x30, [sp], #32
     f3c:	ret
     f40:	b	eb8 <_Py_strhex@plt+0x58>
     f44:	nop
     f48:	stp	x29, x30, [sp, #-160]!
     f4c:	mov	w2, #0xa478                	// #42104
     f50:	movk	w2, #0xd76a, lsl #16
     f54:	mov	x29, sp
     f58:	stp	x19, x20, [sp, #16]
     f5c:	mov	w4, #0xb756                	// #46934
     f60:	movk	w4, #0xe8c7, lsl #16
     f64:	stp	x21, x22, [sp, #32]
     f68:	mov	w6, #0x70db                	// #28891
     f6c:	movk	w6, #0x2420, lsl #16
     f70:	stp	x23, x24, [sp, #48]
     f74:	mov	w5, #0xceee                	// #52974
     f78:	movk	w5, #0xc1bd, lsl #16
     f7c:	stp	x25, x26, [sp, #64]
     f80:	mov	w3, #0xfaf                 	// #4015
     f84:	movk	w3, #0xf57c, lsl #16
     f88:	stp	x27, x28, [sp, #80]
     f8c:	mov	w18, #0xc62a                	// #50730
     f90:	movk	w18, #0x4787, lsl #16
     f94:	ld4	{v4.16b-v7.16b}, [x1]
     f98:	mov	w8, #0x4613                	// #17939
     f9c:	ldp	w13, w14, [x0, #16]
     fa0:	movk	w8, #0xa830, lsl #16
     fa4:	uxtl	v0.8h, v7.8b
     fa8:	mov	w7, #0x9501                	// #38145
     fac:	uxtl	v1.8h, v6.8b
     fb0:	eor	w1, w13, w14
     fb4:	uxtl	v3.8h, v5.8b
     fb8:	movk	w7, #0xfd46, lsl #16
     fbc:	uxtl	v18.8h, v4.8b
     fc0:	mov	w17, #0x98d8                	// #39128
     fc4:	uxtl	v17.4s, v0.4h
     fc8:	movk	w17, #0x6980, lsl #16
     fcc:	uxtl	v2.4s, v1.4h
     fd0:	mov	w10, #0xf7af                	// #63407
     fd4:	shl	v3.8h, v3.8h, #8
     fd8:	movk	w10, #0x8b44, lsl #16
     fdc:	uxtl2	v16.4s, v0.8h
     fe0:	mov	w22, #0xd7be                	// #55230
     fe4:	shl	v17.4s, v17.4s, #24
     fe8:	movk	w22, #0x895c, lsl #16
     fec:	shl	v2.4s, v2.4s, #16
     ff0:	mov	w27, #0x1122                	// #4386
     ff4:	orr	v3.16b, v3.16b, v18.16b
     ff8:	movk	w27, #0x6b90, lsl #16
     ffc:	uxtl2	v0.4s, v1.8h
    1000:	mov	w23, #0x7193                	// #29075
    1004:	ldp	w15, w12, [x0, #8]
    1008:	movk	w23, #0xfd98, lsl #16
    100c:	uxtl	v18.4s, v3.4h
    1010:	mov	w30, #0x438e                	// #17294
    1014:	orr	v2.16b, v2.16b, v17.16b
    1018:	and	w1, w1, w12
    101c:	shl	v1.4s, v16.4s, #24
    1020:	eor	w1, w1, w14
    1024:	shl	v0.4s, v0.4s, #16
    1028:	add	w1, w1, w15
    102c:	uxtl2	v16.4s, v3.8h
    1030:	eor	w19, w12, w13
    1034:	orr	v2.16b, v2.16b, v18.16b
    1038:	movk	w30, #0xa679, lsl #16
    103c:	uxtl2	v17.8h, v7.16b
    1040:	mov	w9, #0x821                 	// #2081
    1044:	orr	v0.16b, v0.16b, v1.16b
    1048:	movk	w9, #0x49b4, lsl #16
    104c:	uxtl2	v1.8h, v6.16b
    1050:	mov	w26, #0x2562                	// #9570
    1054:	fmov	w25, s2
    1058:	fmov	x16, d2
    105c:	uxtl2	v3.8h, v5.16b
    1060:	movk	w26, #0xf61e, lsl #16
    1064:	orr	v0.16b, v0.16b, v16.16b
    1068:	mov	w11, #0xb340                	// #45888
    106c:	uxtl	v16.4s, v17.4h
    1070:	movk	w11, #0xc040, lsl #16
    1074:	add	w2, w25, w2
    1078:	lsr	x20, x16, #32
    107c:	add	w2, w2, w1
    1080:	add	w4, w20, w4
    1084:	stp	q2, q0, [sp, #96]
    1088:	add	w26, w20, w26
    108c:	ror	w2, w2, #25
    1090:	add	w2, w2, w12
    1094:	ldr	w24, [sp, #124]
    1098:	and	w19, w19, w2
    109c:	eor	w19, w19, w13
    10a0:	add	w7, w24, w7
    10a4:	add	w19, w19, w14
    10a8:	ldp	w16, w21, [sp, #104]
    10ac:	add	w4, w4, w19
    10b0:	uxtl	v2.4s, v1.4h
    10b4:	add	w1, w16, w6
    10b8:	ror	w4, w4, #20
    10bc:	add	w4, w4, w2
    10c0:	eor	w6, w12, w2
    10c4:	and	w6, w6, w4
    10c8:	eor	w19, w2, w4
    10cc:	eor	w6, w6, w12
    10d0:	add	w5, w21, w5
    10d4:	uxtl2	v4.8h, v4.16b
    10d8:	add	w6, w6, w13
    10dc:	shl	v2.4s, v2.4s, #16
    10e0:	add	w6, w1, w6
    10e4:	fmov	w1, s0
    10e8:	uxtl2	v17.4s, v17.8h
    10ec:	ror	w6, w6, #15
    10f0:	add	w6, w6, w4
    10f4:	and	w19, w19, w6
    10f8:	eor	w19, w19, w2
    10fc:	add	w3, w1, w3
    1100:	shl	v17.4s, v17.4s, #24
    1104:	add	w19, w19, w12
    1108:	add	w5, w5, w19
    110c:	eor	w19, w4, w6
    1110:	ror	w5, w5, #10
    1114:	add	w5, w5, w6
    1118:	and	w19, w19, w5
    111c:	eor	w19, w19, w4
    1120:	add	w2, w19, w2
    1124:	eor	w19, w6, w5
    1128:	add	w2, w3, w2
    112c:	fmov	x3, d0
    1130:	shl	v0.8h, v3.8h, #8
    1134:	shl	v3.4s, v16.4s, #24
    1138:	ror	w2, w2, #25
    113c:	add	w2, w2, w5
    1140:	and	w19, w19, w2
    1144:	lsr	x3, x3, #32
    1148:	eor	w19, w19, w6
    114c:	add	w18, w3, w18
    1150:	orr	v4.16b, v0.16b, v4.16b
    1154:	add	w4, w19, w4
    1158:	add	w4, w18, w4
    115c:	eor	w19, w5, w2
    1160:	orr	v2.16b, v2.16b, v3.16b
    1164:	ldr	w18, [sp, #120]
    1168:	ror	w4, w4, #20
    116c:	add	w4, w4, w2
    1170:	add	w8, w18, w8
    1174:	and	w19, w19, w4
    1178:	add	w11, w18, w11
    117c:	uxtl	v0.4s, v4.4h
    1180:	eor	w19, w19, w5
    1184:	uxtl2	v4.4s, v4.8h
    1188:	add	w19, w19, w6
    118c:	add	w8, w8, w19
    1190:	eor	w6, w2, w4
    1194:	orr	v2.16b, v2.16b, v0.16b
    1198:	ror	w8, w8, #15
    119c:	uxtl2	v0.4s, v1.8h
    11a0:	add	w8, w8, w4
    11a4:	and	w6, w6, w8
    11a8:	eor	w6, w6, w2
    11ac:	add	w5, w6, w5
    11b0:	fmov	w19, s2
    11b4:	shl	v0.4s, v0.4s, #16
    11b8:	add	w7, w7, w5
    11bc:	eor	w5, w4, w8
    11c0:	ror	w7, w7, #10
    11c4:	add	w7, w7, w8
    11c8:	and	w5, w5, w7
    11cc:	eor	w6, w8, w7
    11d0:	orr	v0.16b, v0.16b, v17.16b
    11d4:	eor	w5, w5, w4
    11d8:	add	w5, w5, w2
    11dc:	add	w2, w19, w17
    11e0:	add	w2, w2, w5
    11e4:	fmov	x5, d2
    11e8:	orr	v0.16b, v0.16b, v4.16b
    11ec:	ror	w2, w2, #25
    11f0:	add	w2, w2, w7
    11f4:	and	w6, w6, w2
    11f8:	lsr	x5, x5, #32
    11fc:	eor	w6, w6, w8
    1200:	add	w28, w5, w10
    1204:	add	w4, w6, w4
    1208:	eor	w10, w7, w2
    120c:	add	w6, w28, w4
    1210:	stp	q2, q0, [sp, #128]
    1214:	ror	w6, w6, #20
    1218:	ldp	w4, w17, [sp, #136]
    121c:	add	w6, w6, w2
    1220:	and	w10, w10, w6
    1224:	eor	w10, w10, w7
    1228:	add	w8, w10, w8
    122c:	mov	w10, #0xffff5bb1            	// #-42063
    1230:	add	w10, w4, w10
    1234:	add	w10, w10, w8
    1238:	eor	w8, w2, w6
    123c:	ror	w10, w10, #15
    1240:	add	w10, w10, w6
    1244:	and	w8, w8, w10
    1248:	eor	w8, w8, w2
    124c:	add	w7, w8, w7
    1250:	add	w8, w17, w22
    1254:	add	w8, w8, w7
    1258:	fmov	w22, s0
    125c:	eor	w7, w6, w10
    1260:	ror	w8, w8, #10
    1264:	add	w8, w8, w10
    1268:	and	w7, w7, w8
    126c:	eor	w28, w10, w8
    1270:	eor	w7, w7, w6
    1274:	add	w2, w7, w2
    1278:	add	w7, w22, w27
    127c:	add	w7, w7, w2
    1280:	fmov	x2, d0
    1284:	ror	w7, w7, #25
    1288:	add	w7, w7, w8
    128c:	and	w28, w28, w7
    1290:	lsr	x2, x2, #32
    1294:	eor	w28, w28, w10
    1298:	add	w27, w2, w23
    129c:	add	w6, w28, w6
    12a0:	eor	w28, w8, w7
    12a4:	add	w27, w27, w6
    12a8:	ldr	w23, [sp, #152]
    12ac:	add	w6, w23, w30
    12b0:	ror	w27, w27, #20
    12b4:	add	w27, w27, w7
    12b8:	ldr	w30, [sp, #156]
    12bc:	and	w28, w28, w27
    12c0:	eor	w28, w28, w8
    12c4:	add	w9, w30, w9
    12c8:	add	w10, w28, w10
    12cc:	add	w6, w6, w10
    12d0:	eor	w10, w7, w27
    12d4:	ror	w6, w6, #15
    12d8:	add	w6, w6, w27
    12dc:	and	w10, w10, w6
    12e0:	eor	w10, w10, w7
    12e4:	add	w8, w10, w8
    12e8:	mov	w10, #0x5a51                	// #23121
    12ec:	add	w9, w9, w8
    12f0:	movk	w10, #0x265e, lsl #16
    12f4:	add	w10, w17, w10
    12f8:	ror	w9, w9, #10
    12fc:	add	w9, w9, w6
    1300:	eor	w8, w6, w9
    1304:	and	w8, w8, w27
    1308:	eor	w8, w8, w6
    130c:	add	w7, w8, w7
    1310:	add	w7, w26, w7
    1314:	mov	w26, #0xc7aa                	// #51114
    1318:	movk	w26, #0xe9b6, lsl #16
    131c:	add	w26, w25, w26
    1320:	ror	w8, w7, #27
    1324:	add	w8, w8, w9
    1328:	eor	w7, w9, w8
    132c:	and	w7, w7, w6
    1330:	eor	w7, w7, w9
    1334:	add	w27, w7, w27
    1338:	add	w27, w11, w27
    133c:	mov	w11, #0x105d                	// #4189
    1340:	movk	w11, #0xd62f, lsl #16
    1344:	add	w11, w3, w11
    1348:	ror	w7, w27, #23
    134c:	add	w7, w7, w8
    1350:	eor	w27, w8, w7
    1354:	and	w27, w27, w9
    1358:	eor	w27, w27, w8
    135c:	add	w6, w27, w6
    1360:	add	w6, w10, w6
    1364:	mov	w10, #0x1453                	// #5203
    1368:	movk	w10, #0x244, lsl #16
    136c:	add	w10, w4, w10
    1370:	ror	w6, w6, #18
    1374:	add	w6, w6, w7
    1378:	eor	w27, w7, w6
    137c:	and	w27, w27, w8
    1380:	eor	w27, w27, w7
    1384:	add	w9, w27, w9
    1388:	add	w26, w26, w9
    138c:	mov	w9, #0xe681                	// #59009
    1390:	movk	w9, #0xd8a1, lsl #16
    1394:	add	w9, w30, w9
    1398:	ror	w26, w26, #12
    139c:	add	w26, w26, w6
    13a0:	eor	w27, w6, w26
    13a4:	and	w27, w27, w7
    13a8:	eor	w27, w27, w6
    13ac:	add	w8, w27, w8
    13b0:	add	w11, w11, w8
    13b4:	mov	w8, #0xfbc8                	// #64456
    13b8:	movk	w8, #0xe7d3, lsl #16
    13bc:	add	w8, w1, w8
    13c0:	ror	w11, w11, #27
    13c4:	add	w11, w11, w26
    13c8:	eor	w27, w26, w11
    13cc:	and	w27, w27, w6
    13d0:	eor	w27, w27, w26
    13d4:	add	w7, w27, w7
    13d8:	add	w10, w10, w7
    13dc:	mov	w7, #0xcde6                	// #52710
    13e0:	movk	w7, #0x21e1, lsl #16
    13e4:	add	w7, w5, w7
    13e8:	ror	w10, w10, #23
    13ec:	add	w10, w10, w11
    13f0:	eor	w27, w11, w10
    13f4:	and	w27, w27, w26
    13f8:	eor	w27, w27, w11
    13fc:	add	w6, w27, w6
    1400:	add	w9, w9, w6
    1404:	mov	w6, #0x7d6                 	// #2006
    1408:	movk	w6, #0xc337, lsl #16
    140c:	add	w6, w23, w6
    1410:	ror	w9, w9, #18
    1414:	add	w9, w9, w10
    1418:	eor	w27, w10, w9
    141c:	and	w27, w27, w11
    1420:	eor	w27, w27, w10
    1424:	add	w26, w27, w26
    1428:	add	w26, w8, w26
    142c:	mov	w8, #0xd87                 	// #3463
    1430:	movk	w8, #0xf4d5, lsl #16
    1434:	add	w8, w21, w8
    1438:	ror	w26, w26, #12
    143c:	add	w26, w26, w9
    1440:	eor	w27, w9, w26
    1444:	and	w27, w27, w10
    1448:	eor	w27, w27, w9
    144c:	add	w11, w27, w11
    1450:	add	w11, w7, w11
    1454:	mov	w7, #0x14ed                	// #5357
    1458:	movk	w7, #0x455a, lsl #16
    145c:	add	w7, w19, w7
    1460:	ror	w11, w11, #27
    1464:	add	w11, w11, w26
    1468:	eor	w27, w26, w11
    146c:	and	w27, w27, w9
    1470:	eor	w27, w27, w26
    1474:	add	w10, w27, w10
    1478:	add	w10, w6, w10
    147c:	mov	w6, #0xe905                	// #59653
    1480:	movk	w6, #0xa9e3, lsl #16
    1484:	add	w6, w2, w6
    1488:	ror	w10, w10, #23
    148c:	add	w10, w10, w11
    1490:	eor	w27, w11, w10
    1494:	and	w27, w27, w26
    1498:	eor	w27, w27, w11
    149c:	add	w9, w27, w9
    14a0:	add	w27, w8, w9
    14a4:	mov	w9, #0xa3f8                	// #41976
    14a8:	movk	w9, #0xfcef, lsl #16
    14ac:	add	w9, w16, w9
    14b0:	ror	w27, w27, #18
    14b4:	add	w27, w27, w10
    14b8:	eor	w8, w10, w27
    14bc:	and	w8, w8, w11
    14c0:	eor	w8, w8, w10
    14c4:	add	w26, w8, w26
    14c8:	mov	w8, #0x2d9                 	// #729
    14cc:	add	w26, w7, w26
    14d0:	movk	w8, #0x676f, lsl #16
    14d4:	add	w8, w24, w8
    14d8:	ror	w26, w26, #12
    14dc:	add	w26, w26, w27
    14e0:	eor	w7, w27, w26
    14e4:	and	w7, w7, w10
    14e8:	eor	w7, w7, w27
    14ec:	add	w11, w7, w11
    14f0:	mov	w7, #0x4c8a                	// #19594
    14f4:	add	w11, w6, w11
    14f8:	movk	w7, #0x8d2a, lsl #16
    14fc:	add	w7, w22, w7
    1500:	ror	w11, w11, #27
    1504:	add	w11, w11, w26
    1508:	eor	w6, w26, w11
    150c:	and	w6, w6, w27
    1510:	eor	w6, w6, w26
    1514:	add	w10, w6, w10
    1518:	add	w28, w9, w10
    151c:	sub	w10, w3, #0x5c, lsl #12
    1520:	sub	w10, w10, #0x6be
    1524:	ror	w28, w28, #23
    1528:	add	w28, w28, w11
    152c:	eor	w6, w11, w28
    1530:	and	w6, w6, w26
    1534:	eor	w6, w6, w11
    1538:	add	w27, w6, w27
    153c:	add	w27, w8, w27
    1540:	ror	w27, w27, #18
    1544:	add	w27, w27, w28
    1548:	eor	w8, w28, w27
    154c:	and	w6, w8, w11
    1550:	eor	w6, w6, w28
    1554:	add	w26, w6, w26
    1558:	mov	w6, #0xf681                	// #63105
    155c:	add	w26, w7, w26
    1560:	movk	w6, #0x8771, lsl #16
    1564:	add	w6, w19, w6
    1568:	mov	w7, #0x6122                	// #24866
    156c:	movk	w7, #0x6d9d, lsl #16
    1570:	ror	w26, w26, #12
    1574:	add	w26, w26, w27
    1578:	add	w7, w17, w7
    157c:	eor	w8, w8, w26
    1580:	add	w11, w8, w11
    1584:	eor	w8, w27, w26
    1588:	add	w11, w10, w11
    158c:	ror	w9, w11, #28
    1590:	add	w9, w9, w26
    1594:	eor	w8, w8, w9
    1598:	eor	w10, w26, w9
    159c:	add	w8, w8, w28
    15a0:	add	w8, w6, w8
    15a4:	mov	w6, #0x380c                	// #14348
    15a8:	movk	w6, #0xfde5, lsl #16
    15ac:	add	w6, w23, w6
    15b0:	ror	w8, w8, #21
    15b4:	add	w8, w8, w9
    15b8:	eor	w10, w10, w8
    15bc:	add	w27, w10, w27
    15c0:	eor	w10, w9, w8
    15c4:	add	w7, w7, w27
    15c8:	mov	w27, #0xea44                	// #59972
    15cc:	movk	w27, #0xa4be, lsl #16
    15d0:	add	w27, w20, w27
    15d4:	ror	w7, w7, #16
    15d8:	add	w7, w7, w8
    15dc:	eor	w10, w10, w7
    15e0:	eor	w11, w8, w7
    15e4:	add	w26, w10, w26
    15e8:	mov	w10, #0xcfa9                	// #53161
    15ec:	add	w6, w6, w26
    15f0:	movk	w10, #0x4bde, lsl #16
    15f4:	add	w10, w1, w10
    15f8:	mov	w26, #0x4b60                	// #19296
    15fc:	movk	w26, #0xf6bb, lsl #16
    1600:	ror	w6, w6, #9
    1604:	add	w6, w6, w7
    1608:	add	w26, w24, w26
    160c:	eor	w11, w11, w6
    1610:	add	w9, w11, w9
    1614:	eor	w11, w7, w6
    1618:	add	w9, w27, w9
    161c:	ror	w9, w9, #28
    1620:	add	w9, w9, w6
    1624:	eor	w11, w11, w9
    1628:	add	w8, w11, w8
    162c:	eor	w11, w6, w9
    1630:	add	w8, w10, w8
    1634:	mov	w10, #0xbc70                	// #48240
    1638:	movk	w10, #0xbebf, lsl #16
    163c:	add	w10, w4, w10
    1640:	sub	w4, w4, #0x100, lsl #12
    1644:	ror	w8, w8, #21
    1648:	add	w8, w8, w9
    164c:	sub	w4, w4, #0xb83
    1650:	eor	w11, w11, w8
    1654:	add	w7, w11, w7
    1658:	eor	w11, w9, w8
    165c:	add	w7, w26, w7
    1660:	mov	w26, #0x7ec6                	// #32454
    1664:	movk	w26, #0x289b, lsl #16
    1668:	add	w26, w2, w26
    166c:	ror	w7, w7, #16
    1670:	add	w7, w7, w8
    1674:	eor	w11, w11, w7
    1678:	add	w6, w11, w6
    167c:	eor	w11, w8, w7
    1680:	add	w6, w10, w6
    1684:	mov	w10, #0x27fa                	// #10234
    1688:	movk	w10, #0xeaa1, lsl #16
    168c:	add	w10, w25, w10
    1690:	ror	w6, w6, #9
    1694:	add	w6, w6, w7
    1698:	eor	w11, w11, w6
    169c:	add	w9, w11, w9
    16a0:	eor	w11, w7, w6
    16a4:	add	w9, w26, w9
    16a8:	mov	w26, #0x3085                	// #12421
    16ac:	movk	w26, #0xd4ef, lsl #16
    16b0:	add	w26, w21, w26
    16b4:	ror	w9, w9, #28
    16b8:	add	w9, w9, w6
    16bc:	eor	w11, w11, w9
    16c0:	add	w8, w11, w8
    16c4:	eor	w11, w6, w9
    16c8:	add	w8, w10, w8
    16cc:	mov	w10, #0x1d05                	// #7429
    16d0:	movk	w10, #0x488, lsl #16
    16d4:	add	w10, w18, w10
    16d8:	ror	w8, w8, #21
    16dc:	add	w8, w8, w9
    16e0:	eor	w11, w11, w8
    16e4:	add	w7, w11, w7
    16e8:	eor	w11, w9, w8
    16ec:	add	w7, w26, w7
    16f0:	mov	w26, #0xd039                	// #53305
    16f4:	movk	w26, #0xd9d4, lsl #16
    16f8:	add	w26, w5, w26
    16fc:	ror	w7, w7, #16
    1700:	add	w7, w7, w8
    1704:	eor	w11, w11, w7
    1708:	add	w6, w11, w6
    170c:	eor	w11, w8, w7
    1710:	add	w6, w10, w6
    1714:	mov	w10, #0x99e5                	// #39397
    1718:	movk	w10, #0xe6db, lsl #16
    171c:	add	w10, w22, w10
    1720:	ror	w6, w6, #9
    1724:	add	w6, w6, w7
    1728:	eor	w11, w11, w6
    172c:	add	w9, w11, w9
    1730:	eor	w11, w7, w6
    1734:	add	w9, w26, w9
    1738:	mov	w26, #0x7cf8                	// #31992
    173c:	movk	w26, #0x1fa2, lsl #16
    1740:	add	w26, w30, w26
    1744:	ror	w9, w9, #28
    1748:	add	w9, w9, w6
    174c:	eor	w11, w11, w9
    1750:	add	w8, w11, w8
    1754:	eor	w11, w6, w9
    1758:	add	w8, w10, w8
    175c:	mov	w10, #0x5665                	// #22117
    1760:	movk	w10, #0xc4ac, lsl #16
    1764:	add	w10, w16, w10
    1768:	ror	w8, w8, #21
    176c:	add	w8, w8, w9
    1770:	eor	w11, w11, w8
    1774:	add	w7, w11, w7
    1778:	eor	w11, w9, w8
    177c:	add	w7, w26, w7
    1780:	mov	w26, #0x2244                	// #8772
    1784:	movk	w26, #0xf429, lsl #16
    1788:	add	w25, w25, w26
    178c:	mov	w26, #0xff97                	// #65431
    1790:	ror	w7, w7, #16
    1794:	add	w7, w7, w8
    1798:	movk	w26, #0x432a, lsl #16
    179c:	eor	w11, w11, w7
    17a0:	add	w24, w24, w26
    17a4:	add	w6, w11, w6
    17a8:	mov	w26, #0x23a7                	// #9127
    17ac:	add	w6, w10, w6
    17b0:	mov	w10, #0xa039                	// #41017
    17b4:	movk	w10, #0xfc93, lsl #16
    17b8:	add	w3, w3, w10
    17bc:	mov	w10, #0x59c3                	// #22979
    17c0:	ror	w6, w6, #9
    17c4:	add	w6, w6, w7
    17c8:	movk	w10, #0x655b, lsl #16
    17cc:	add	w22, w22, w10
    17d0:	orn	w10, w6, w8
    17d4:	eor	w10, w10, w7
    17d8:	movk	w26, #0xab94, lsl #16
    17dc:	add	w9, w10, w9
    17e0:	mov	w10, #0x5dd1                	// #24017
    17e4:	add	w9, w25, w9
    17e8:	movk	w10, #0x8584, lsl #16
    17ec:	add	w20, w20, w10
    17f0:	mov	w10, #0x7e4f                	// #32335
    17f4:	movk	w10, #0x6fa8, lsl #16
    17f8:	ror	w9, w9, #26
    17fc:	add	w9, w9, w6
    1800:	add	w19, w19, w10
    1804:	orn	w10, w9, w7
    1808:	add	w23, w23, w26
    180c:	eor	w10, w10, w6
    1810:	mov	w11, #0xcc92                	// #52370
    1814:	add	w8, w10, w8
    1818:	mov	w10, #0x11a1                	// #4513
    181c:	add	w8, w24, w8
    1820:	movk	w10, #0x4e08, lsl #16
    1824:	add	w2, w2, w10
    1828:	mov	w10, #0x7e82                	// #32386
    182c:	movk	w10, #0xf753, lsl #16
    1830:	ror	w8, w8, #22
    1834:	add	w8, w8, w9
    1838:	add	w1, w1, w10
    183c:	orn	w10, w8, w6
    1840:	movk	w11, #0x8f0c, lsl #16
    1844:	eor	w10, w10, w9
    1848:	add	w21, w21, w11
    184c:	add	w10, w10, w7
    1850:	mov	w7, #0xd2bb                	// #53947
    1854:	add	w23, w23, w10
    1858:	movk	w7, #0x2ad7, lsl #16
    185c:	add	w16, w16, w7
    1860:	mov	w7, #0xd391                	// #54161
    1864:	movk	w7, #0xeb86, lsl #16
    1868:	ror	w10, w23, #17
    186c:	add	w10, w10, w8
    1870:	add	w5, w5, w7
    1874:	orn	w7, w10, w9
    1878:	mov	w11, #0xe6e0                	// #59104
    187c:	eor	w7, w7, w8
    1880:	movk	w11, #0xfe2c, lsl #16
    1884:	add	w7, w7, w6
    1888:	add	w30, w30, w11
    188c:	add	w3, w3, w7
    1890:	mov	w11, #0x4314                	// #17172
    1894:	movk	w11, #0xa301, lsl #16
    1898:	add	w18, w18, w11
    189c:	mov	w11, #0xf235                	// #62005
    18a0:	ror	w7, w3, #11
    18a4:	add	w7, w7, w10
    18a8:	movk	w11, #0xbd3a, lsl #16
    18ac:	orn	w6, w7, w8
    18b0:	add	w17, w17, w11
    18b4:	eor	w6, w6, w10
    18b8:	add	w6, w6, w9
    18bc:	add	w22, w22, w6
    18c0:	ror	w6, w22, #26
    18c4:	add	w6, w6, w7
    18c8:	orn	w3, w6, w10
    18cc:	eor	w3, w3, w7
    18d0:	add	w8, w3, w8
    18d4:	add	w8, w21, w8
    18d8:	ror	w8, w8, #22
    18dc:	add	w8, w8, w6
    18e0:	orn	w3, w8, w7
    18e4:	eor	w3, w3, w6
    18e8:	add	w3, w3, w10
    18ec:	add	w4, w4, w3
    18f0:	ror	w3, w4, #17
    18f4:	add	w3, w3, w8
    18f8:	orn	w4, w3, w6
    18fc:	eor	w4, w4, w8
    1900:	add	w7, w4, w7
    1904:	add	w7, w20, w7
    1908:	ror	w7, w7, #11
    190c:	add	w7, w7, w3
    1910:	orn	w4, w7, w8
    1914:	eor	w4, w4, w3
    1918:	add	w6, w4, w6
    191c:	add	w6, w19, w6
    1920:	ror	w6, w6, #26
    1924:	add	w6, w6, w7
    1928:	orn	w4, w6, w3
    192c:	eor	w4, w4, w7
    1930:	add	w4, w4, w8
    1934:	add	w30, w30, w4
    1938:	ror	w4, w30, #22
    193c:	add	w4, w4, w6
    1940:	orn	w8, w4, w7
    1944:	eor	w8, w8, w6
    1948:	add	w3, w8, w3
    194c:	add	w3, w18, w3
    1950:	ror	w3, w3, #17
    1954:	add	w3, w3, w4
    1958:	orn	w8, w3, w6
    195c:	eor	w8, w8, w4
    1960:	add	w7, w8, w7
    1964:	add	w2, w2, w7
    1968:	ror	w2, w2, #11
    196c:	add	w2, w2, w3
    1970:	orn	w7, w2, w4
    1974:	eor	w7, w7, w3
    1978:	add	w6, w7, w6
    197c:	add	w1, w1, w6
    1980:	ror	w1, w1, #26
    1984:	add	w1, w1, w2
    1988:	orn	w6, w1, w3
    198c:	add	w15, w15, w1
    1990:	eor	w6, w6, w2
    1994:	str	w15, [x0, #8]
    1998:	add	w4, w6, w4
    199c:	add	w4, w17, w4
    19a0:	ror	w4, w4, #22
    19a4:	add	w4, w4, w1
    19a8:	orn	w6, w4, w2
    19ac:	add	w14, w14, w4
    19b0:	eor	w6, w6, w1
    19b4:	add	w3, w6, w3
    19b8:	add	w3, w16, w3
    19bc:	ror	w3, w3, #17
    19c0:	add	w3, w3, w4
    19c4:	orn	w1, w3, w1
    19c8:	add	w12, w12, w3
    19cc:	eor	w1, w1, w4
    19d0:	add	w13, w13, w3
    19d4:	add	w1, w1, w2
    19d8:	stp	w13, w14, [x0, #16]
    19dc:	add	w5, w5, w1
    19e0:	ldp	x19, x20, [sp, #16]
    19e4:	ror	w5, w5, #11
    19e8:	add	w12, w5, w12
    19ec:	str	w12, [x0, #12]
    19f0:	ldp	x21, x22, [sp, #32]
    19f4:	ldp	x23, x24, [sp, #48]
    19f8:	ldp	x25, x26, [sp, #64]
    19fc:	ldp	x27, x28, [sp, #80]
    1a00:	ldp	x29, x30, [sp], #160
    1a04:	ret
    1a08:	stp	x29, x30, [sp, #-32]!
    1a0c:	adrp	x1, 13000 <PyInit__md5@@Base+0x10e38>
    1a10:	mov	x29, sp
    1a14:	str	x19, [sp, #16]
    1a18:	mov	x19, x0
    1a1c:	add	x0, x1, #0xa0
    1a20:	bl	e30 <_PyObject_New@plt>
    1a24:	cbz	x0, 1a5c <_Py_strhex@plt+0xbfc>
    1a28:	add	x2, x19, #0x10
    1a2c:	ldp	x4, x5, [x19, #16]
    1a30:	stp	x4, x5, [x0, #16]
    1a34:	ldp	x4, x5, [x2, #16]
    1a38:	stp	x4, x5, [x0, #32]
    1a3c:	ldp	x4, x5, [x2, #32]
    1a40:	stp	x4, x5, [x0, #48]
    1a44:	ldp	x4, x5, [x2, #48]
    1a48:	stp	x4, x5, [x0, #64]
    1a4c:	ldp	x4, x5, [x2, #64]
    1a50:	stp	x4, x5, [x0, #80]
    1a54:	ldp	x2, x3, [x2, #80]
    1a58:	stp	x2, x3, [x0, #96]
    1a5c:	ldr	x19, [sp, #16]
    1a60:	ldp	x29, x30, [sp], #32
    1a64:	ret
    1a68:	mov	x0, #0x10                  	// #16
    1a6c:	b	de0 <PyLong_FromLong@plt>
    1a70:	mov	x0, #0x40                  	// #64
    1a74:	b	de0 <PyLong_FromLong@plt>
    1a78:	adrp	x0, 2000 <_Py_strhex@plt+0x11a0>
    1a7c:	mov	x1, #0x3                   	// #3
    1a80:	add	x0, x0, #0x250
    1a84:	b	e50 <PyUnicode_FromStringAndSize@plt>
    1a88:	stp	x29, x30, [sp, #-144]!
    1a8c:	add	x1, x0, #0x10
    1a90:	mov	w5, #0xffffff80            	// #-128
    1a94:	mov	x29, sp
    1a98:	ldp	x2, x3, [x0, #32]
    1a9c:	stp	x2, x3, [sp, #64]
    1aa0:	ldp	x4, x6, [x0, #16]
    1aa4:	stp	x19, x20, [sp, #16]
    1aa8:	ldr	w2, [sp, #72]
    1aac:	add	x20, sp, #0x4c
    1ab0:	add	x19, sp, #0x30
    1ab4:	ldp	x12, x13, [x1, #32]
    1ab8:	lsl	w3, w2, #3
    1abc:	add	x3, x3, x4
    1ac0:	stp	x3, x6, [sp, #48]
    1ac4:	add	w0, w2, #0x1
    1ac8:	ldp	x10, x11, [x1, #48]
    1acc:	str	w0, [sp, #72]
    1ad0:	ldp	x8, x9, [x1, #64]
    1ad4:	stp	x12, x13, [sp, #80]
    1ad8:	cmp	w0, #0x38
    1adc:	ldp	x6, x7, [x1, #80]
    1ae0:	stp	x10, x11, [sp, #96]
    1ae4:	stp	x8, x9, [sp, #112]
    1ae8:	stp	x6, x7, [sp, #128]
    1aec:	strb	w5, [x20, w2, uxtw]
    1af0:	b.ls	1b94 <_Py_strhex@plt+0xd34>  // b.plast
    1af4:	cmp	w0, #0x3f
    1af8:	b.hi	1b20 <_Py_strhex@plt+0xcc0>  // b.pmore
    1afc:	mov	w1, #0x3e                  	// #62
    1b00:	add	x0, x0, #0x1c
    1b04:	sub	w2, w1, w2
    1b08:	add	x0, x19, x0
    1b0c:	add	x2, x2, #0x1
    1b10:	mov	w1, #0x0                   	// #0
    1b14:	bl	db0 <memset@plt>
    1b18:	mov	w0, #0x40                  	// #64
    1b1c:	str	w0, [sp, #72]
    1b20:	mov	x0, x19
    1b24:	add	x1, x19, #0x1c
    1b28:	bl	f48 <_Py_strhex@plt+0xe8>
    1b2c:	ldr	x3, [sp, #48]
    1b30:	mov	w0, #0x0                   	// #0
    1b34:	mov	w1, w0
    1b38:	strb	wzr, [x20, w1, uxtw]
    1b3c:	add	w1, w1, #0x1
    1b40:	cmp	w1, #0x38
    1b44:	b.ne	1b38 <_Py_strhex@plt+0xcd8>  // b.any
    1b48:	add	w2, w0, #0x1
    1b4c:	mov	w1, #0x37                  	// #55
    1b50:	cmp	w2, #0x38
    1b54:	sub	w0, w1, w0
    1b58:	csel	w0, w0, wzr, ls  // ls = plast
    1b5c:	add	w0, w0, w2
    1b60:	str	w0, [sp, #72]
    1b64:	add	x1, x19, #0x1c
    1b68:	mov	x0, x19
    1b6c:	stur	x3, [sp, #132]
    1b70:	bl	f48 <_Py_strhex@plt+0xe8>
    1b74:	ldp	x3, x2, [sp, #56]
    1b78:	add	x0, sp, #0x20
    1b7c:	mov	x1, #0x10                  	// #16
    1b80:	stp	x3, x2, [sp, #32]
    1b84:	bl	d70 <PyBytes_FromStringAndSize@plt>
    1b88:	ldp	x19, x20, [sp, #16]
    1b8c:	ldp	x29, x30, [sp], #144
    1b90:	ret
    1b94:	b.ne	1b34 <_Py_strhex@plt+0xcd4>  // b.any
    1b98:	b	1b64 <_Py_strhex@plt+0xd04>
    1b9c:	nop
    1ba0:	b	dc0 <PyObject_Free@plt>
    1ba4:	nop
    1ba8:	sub	sp, sp, #0xc0
    1bac:	mov	x0, x1
    1bb0:	mov	x1, x2
    1bb4:	mov	x2, x3
    1bb8:	stp	x29, x30, [sp, #16]
    1bbc:	add	x29, sp, #0x10
    1bc0:	stp	x19, x20, [sp, #32]
    1bc4:	stp	x21, x22, [sp, #48]
    1bc8:	cbz	x3, 1d44 <_Py_strhex@plt+0xee4>
    1bcc:	ldr	x19, [x3, #16]
    1bd0:	add	x19, x1, x19
    1bd4:	add	x3, sp, #0x68
    1bd8:	str	x3, [sp]
    1bdc:	adrp	x4, 13000 <PyInit__md5@@Base+0x10e38>
    1be0:	add	x4, x4, #0xa0
    1be4:	mov	x3, x2
    1be8:	add	x4, x4, #0x1a0
    1bec:	mov	w7, #0x0                   	// #0
    1bf0:	mov	w6, #0x1                   	// #1
    1bf4:	mov	w5, #0x0                   	// #0
    1bf8:	mov	x2, #0x0                   	// #0
    1bfc:	bl	d90 <_PyArg_UnpackKeywords@plt>
    1c00:	cbz	x0, 1da8 <_Py_strhex@plt+0xf48>
    1c04:	cbz	x19, 1d5c <_Py_strhex@plt+0xefc>
    1c08:	ldr	x0, [x0]
    1c0c:	cbz	x0, 1d5c <_Py_strhex@plt+0xefc>
    1c10:	ldr	x1, [x0, #8]
    1c14:	ldr	x2, [x1, #168]
    1c18:	tbnz	w2, #28, 1e7c <_Py_strhex@plt+0x101c>
    1c1c:	ldr	x1, [x1, #160]
    1c20:	cbz	x1, 1e48 <_Py_strhex@plt+0xfe8>
    1c24:	ldr	x1, [x1]
    1c28:	cbz	x1, 1e48 <_Py_strhex@plt+0xfe8>
    1c2c:	stp	x23, x24, [sp, #64]
    1c30:	add	x23, sp, #0x70
    1c34:	mov	x1, x23
    1c38:	mov	w2, #0x0                   	// #0
    1c3c:	bl	e20 <PyObject_GetBuffer@plt>
    1c40:	cmn	w0, #0x1
    1c44:	b.eq	1e9c <_Py_strhex@plt+0x103c>  // b.none
    1c48:	ldr	w0, [sp, #148]
    1c4c:	cmp	w0, #0x1
    1c50:	b.gt	1dc4 <_Py_strhex@plt+0xf64>
    1c54:	adrp	x0, 13000 <PyInit__md5@@Base+0x10e38>
    1c58:	add	x0, x0, #0xa0
    1c5c:	bl	e30 <_PyObject_New@plt>
    1c60:	mov	x21, x0
    1c64:	cbz	x0, 1e20 <_Py_strhex@plt+0xfc0>
    1c68:	adrp	x0, 2000 <_Py_strhex@plt+0x11a0>
    1c6c:	add	x22, x21, #0x10
    1c70:	ldr	q0, [x0, #848]
    1c74:	stur	q0, [x21, #24]
    1c78:	str	wzr, [x22, #24]
    1c7c:	str	xzr, [x21, #16]
    1c80:	bl	e00 <PyErr_Occurred@plt>
    1c84:	cbnz	x0, 1e10 <_Py_strhex@plt+0xfb0>
    1c88:	ldr	x20, [sp, #128]
    1c8c:	stp	x25, x26, [sp, #80]
    1c90:	cmp	x20, #0x0
    1c94:	ldr	x26, [sp, #112]
    1c98:	b.le	1d1c <_Py_strhex@plt+0xebc>
    1c9c:	add	x24, x21, #0x2c
    1ca0:	mov	w25, #0x40                  	// #64
    1ca4:	b	1cdc <_Py_strhex@plt+0xe7c>
    1ca8:	cmp	x19, x20
    1cac:	csel	x19, x19, x20, le
    1cb0:	mov	x2, x19
    1cb4:	add	x26, x26, x19
    1cb8:	bl	d40 <memcpy@plt>
    1cbc:	sub	x20, x20, x19
    1cc0:	ldr	w2, [x22, #24]
    1cc4:	add	w19, w2, w19
    1cc8:	str	w19, [x22, #24]
    1ccc:	cmp	w19, #0x40
    1cd0:	b.eq	1df0 <_Py_strhex@plt+0xf90>  // b.none
    1cd4:	cmp	x20, #0x0
    1cd8:	b.le	1d1c <_Py_strhex@plt+0xebc>
    1cdc:	ldr	w0, [x22, #24]
    1ce0:	cmp	x20, #0x3f
    1ce4:	mov	x1, x26
    1ce8:	sub	w19, w25, w0
    1cec:	ccmp	w0, #0x0, #0x0, gt
    1cf0:	add	x0, x24, w0, uxtw
    1cf4:	b.ne	1ca8 <_Py_strhex@plt+0xe48>  // b.any
    1cf8:	mov	x0, x22
    1cfc:	bl	f48 <_Py_strhex@plt+0xe8>
    1d00:	ldr	x0, [x22]
    1d04:	sub	x20, x20, #0x40
    1d08:	add	x26, x26, #0x40
    1d0c:	cmp	x20, #0x0
    1d10:	add	x0, x0, #0x200
    1d14:	str	x0, [x22]
    1d18:	b.gt	1cdc <_Py_strhex@plt+0xe7c>
    1d1c:	mov	x0, x23
    1d20:	bl	d50 <PyBuffer_Release@plt>
    1d24:	mov	x0, x21
    1d28:	ldp	x29, x30, [sp, #16]
    1d2c:	ldp	x19, x20, [sp, #32]
    1d30:	ldp	x21, x22, [sp, #48]
    1d34:	ldp	x23, x24, [sp, #64]
    1d38:	ldp	x25, x26, [sp, #80]
    1d3c:	add	sp, sp, #0xc0
    1d40:	ret
    1d44:	tbnz	x1, #63, 1ea4 <_Py_strhex@plt+0x1044>
    1d48:	cmp	x0, #0x0
    1d4c:	mov	x19, x1
    1d50:	ccmp	x1, #0x1, #0x0, ne  // ne = any
    1d54:	b.gt	1bd4 <_Py_strhex@plt+0xd74>
    1d58:	cbnz	x19, 1c08 <_Py_strhex@plt+0xda8>
    1d5c:	adrp	x0, 13000 <PyInit__md5@@Base+0x10e38>
    1d60:	add	x0, x0, #0xa0
    1d64:	bl	e30 <_PyObject_New@plt>
    1d68:	mov	x21, x0
    1d6c:	cbz	x0, 1da8 <_Py_strhex@plt+0xf48>
    1d70:	adrp	x0, 2000 <_Py_strhex@plt+0x11a0>
    1d74:	str	xzr, [x21, #16]
    1d78:	str	wzr, [x21, #40]
    1d7c:	ldr	q0, [x0, #848]
    1d80:	stur	q0, [x21, #24]
    1d84:	bl	e00 <PyErr_Occurred@plt>
    1d88:	cbz	x0, 1dac <_Py_strhex@plt+0xf4c>
    1d8c:	ldr	x0, [x21]
    1d90:	sub	x0, x0, #0x1
    1d94:	str	x0, [x21]
    1d98:	cbnz	x0, 1da8 <_Py_strhex@plt+0xf48>
    1d9c:	mov	x0, x21
    1da0:	bl	d80 <_Py_Dealloc@plt>
    1da4:	nop
    1da8:	mov	x21, #0x0                   	// #0
    1dac:	mov	x0, x21
    1db0:	ldp	x29, x30, [sp, #16]
    1db4:	ldp	x19, x20, [sp, #32]
    1db8:	ldp	x21, x22, [sp, #48]
    1dbc:	add	sp, sp, #0xc0
    1dc0:	ret
    1dc4:	adrp	x0, 12000 <PyInit__md5@@Base+0xfe38>
    1dc8:	adrp	x1, 2000 <_Py_strhex@plt+0x11a0>
    1dcc:	add	x1, x1, #0x2b8
    1dd0:	mov	x21, #0x0                   	// #0
    1dd4:	ldr	x0, [x0, #4024]
    1dd8:	ldr	x0, [x0]
    1ddc:	bl	da0 <PyErr_SetString@plt>
    1de0:	mov	x0, x23
    1de4:	bl	d50 <PyBuffer_Release@plt>
    1de8:	ldp	x23, x24, [sp, #64]
    1dec:	b	1dac <_Py_strhex@plt+0xf4c>
    1df0:	mov	x0, x22
    1df4:	mov	x1, x24
    1df8:	bl	f48 <_Py_strhex@plt+0xe8>
    1dfc:	str	wzr, [x22, #24]
    1e00:	ldr	x0, [x22]
    1e04:	add	x0, x0, #0x200
    1e08:	str	x0, [x22]
    1e0c:	b	1cd4 <_Py_strhex@plt+0xe74>
    1e10:	ldr	x0, [x21]
    1e14:	sub	x0, x0, #0x1
    1e18:	str	x0, [x21]
    1e1c:	cbz	x0, 1ed4 <_Py_strhex@plt+0x1074>
    1e20:	mov	x0, x23
    1e24:	mov	x21, #0x0                   	// #0
    1e28:	bl	d50 <PyBuffer_Release@plt>
    1e2c:	mov	x0, x21
    1e30:	ldp	x29, x30, [sp, #16]
    1e34:	ldp	x19, x20, [sp, #32]
    1e38:	ldp	x21, x22, [sp, #48]
    1e3c:	ldp	x23, x24, [sp, #64]
    1e40:	add	sp, sp, #0xc0
    1e44:	ret
    1e48:	adrp	x0, 12000 <PyInit__md5@@Base+0xfe38>
    1e4c:	mov	x21, #0x0                   	// #0
    1e50:	adrp	x1, 2000 <_Py_strhex@plt+0x11a0>
    1e54:	add	x1, x1, #0x288
    1e58:	ldr	x0, [x0, #4032]
    1e5c:	ldr	x0, [x0]
    1e60:	bl	da0 <PyErr_SetString@plt>
    1e64:	mov	x0, x21
    1e68:	ldp	x29, x30, [sp, #16]
    1e6c:	ldp	x19, x20, [sp, #32]
    1e70:	ldp	x21, x22, [sp, #48]
    1e74:	add	sp, sp, #0xc0
    1e78:	ret
    1e7c:	adrp	x0, 12000 <PyInit__md5@@Base+0xfe38>
    1e80:	adrp	x1, 2000 <_Py_strhex@plt+0x11a0>
    1e84:	mov	x21, #0x0                   	// #0
    1e88:	add	x1, x1, #0x258
    1e8c:	ldr	x0, [x0, #4032]
    1e90:	ldr	x0, [x0]
    1e94:	bl	da0 <PyErr_SetString@plt>
    1e98:	b	1dac <_Py_strhex@plt+0xf4c>
    1e9c:	ldp	x23, x24, [sp, #64]
    1ea0:	b	1da8 <_Py_strhex@plt+0xf48>
    1ea4:	add	x2, sp, #0x68
    1ea8:	str	x2, [sp]
    1eac:	adrp	x4, 13000 <PyInit__md5@@Base+0x10e38>
    1eb0:	add	x4, x4, #0xa0
    1eb4:	add	x4, x4, #0x1a0
    1eb8:	mov	w7, #0x0                   	// #0
    1ebc:	mov	w6, #0x1                   	// #1
    1ec0:	mov	w5, #0x0                   	// #0
    1ec4:	mov	x2, #0x0                   	// #0
    1ec8:	bl	d90 <_PyArg_UnpackKeywords@plt>
    1ecc:	cbnz	x0, 1c08 <_Py_strhex@plt+0xda8>
    1ed0:	b	1da8 <_Py_strhex@plt+0xf48>
    1ed4:	mov	x0, x21
    1ed8:	bl	d80 <_Py_Dealloc@plt>
    1edc:	b	1e20 <_Py_strhex@plt+0xfc0>
    1ee0:	stp	x29, x30, [sp, #-160]!
    1ee4:	mov	x29, sp
    1ee8:	stp	x23, x24, [sp, #48]
    1eec:	mov	x23, x0
    1ef0:	ldr	x0, [x1, #8]
    1ef4:	ldr	x2, [x0, #168]
    1ef8:	tbnz	w2, #28, 2084 <_Py_strhex@plt+0x1224>
    1efc:	ldr	x0, [x0, #160]
    1f00:	cbz	x0, 202c <_Py_strhex@plt+0x11cc>
    1f04:	ldr	x0, [x0]
    1f08:	cbz	x0, 202c <_Py_strhex@plt+0x11cc>
    1f0c:	add	x24, sp, #0x50
    1f10:	mov	x0, x1
    1f14:	mov	w2, #0x0                   	// #0
    1f18:	mov	x1, x24
    1f1c:	bl	e20 <PyObject_GetBuffer@plt>
    1f20:	cmn	w0, #0x1
    1f24:	b.eq	20a4 <_Py_strhex@plt+0x1244>  // b.none
    1f28:	ldr	w0, [sp, #116]
    1f2c:	cmp	w0, #0x1
    1f30:	b.gt	2054 <_Py_strhex@plt+0x11f4>
    1f34:	stp	x19, x20, [sp, #16]
    1f38:	add	x20, x23, #0x10
    1f3c:	ldr	x19, [sp, #96]
    1f40:	stp	x21, x22, [sp, #32]
    1f44:	cmp	x19, #0x0
    1f48:	ldr	x22, [sp, #80]
    1f4c:	b.le	1fd8 <_Py_strhex@plt+0x1178>
    1f50:	add	x23, x23, #0x2c
    1f54:	str	x25, [sp, #64]
    1f58:	mov	w25, #0x40                  	// #64
    1f5c:	b	1f94 <_Py_strhex@plt+0x1134>
    1f60:	cmp	x21, x19
    1f64:	csel	x21, x21, x19, le
    1f68:	mov	x2, x21
    1f6c:	add	x22, x22, x21
    1f70:	bl	d40 <memcpy@plt>
    1f74:	sub	x19, x19, x21
    1f78:	ldr	w2, [x20, #24]
    1f7c:	add	w21, w2, w21
    1f80:	str	w21, [x20, #24]
    1f84:	cmp	w21, #0x40
    1f88:	b.eq	200c <_Py_strhex@plt+0x11ac>  // b.none
    1f8c:	cmp	x19, #0x0
    1f90:	b.le	1fd4 <_Py_strhex@plt+0x1174>
    1f94:	ldr	w0, [x20, #24]
    1f98:	cmp	x19, #0x3f
    1f9c:	mov	x1, x22
    1fa0:	sub	w21, w25, w0
    1fa4:	ccmp	w0, #0x0, #0x0, gt
    1fa8:	add	x0, x23, w0, uxtw
    1fac:	b.ne	1f60 <_Py_strhex@plt+0x1100>  // b.any
    1fb0:	mov	x0, x20
    1fb4:	bl	f48 <_Py_strhex@plt+0xe8>
    1fb8:	ldr	x0, [x20]
    1fbc:	sub	x19, x19, #0x40
    1fc0:	add	x22, x22, #0x40
    1fc4:	cmp	x19, #0x0
    1fc8:	add	x0, x0, #0x200
    1fcc:	str	x0, [x20]
    1fd0:	b.gt	1f94 <_Py_strhex@plt+0x1134>
    1fd4:	ldr	x25, [sp, #64]
    1fd8:	mov	x0, x24
    1fdc:	bl	d50 <PyBuffer_Release@plt>
    1fe0:	adrp	x1, 12000 <PyInit__md5@@Base+0xfe38>
    1fe4:	ldp	x19, x20, [sp, #16]
    1fe8:	ldr	x1, [x1, #4056]
    1fec:	ldp	x21, x22, [sp, #32]
    1ff0:	mov	x0, x1
    1ff4:	ldr	x2, [x1]
    1ff8:	add	x2, x2, #0x1
    1ffc:	str	x2, [x1]
    2000:	ldp	x23, x24, [sp, #48]
    2004:	ldp	x29, x30, [sp], #160
    2008:	ret
    200c:	mov	x0, x20
    2010:	mov	x1, x23
    2014:	bl	f48 <_Py_strhex@plt+0xe8>
    2018:	str	wzr, [x20, #24]
    201c:	ldr	x0, [x20]
    2020:	add	x0, x0, #0x200
    2024:	str	x0, [x20]
    2028:	b	1f8c <_Py_strhex@plt+0x112c>
    202c:	adrp	x0, 12000 <PyInit__md5@@Base+0xfe38>
    2030:	adrp	x1, 2000 <_Py_strhex@plt+0x11a0>
    2034:	add	x1, x1, #0x288
    2038:	ldr	x0, [x0, #4032]
    203c:	ldr	x0, [x0]
    2040:	bl	da0 <PyErr_SetString@plt>
    2044:	mov	x0, #0x0                   	// #0
    2048:	ldp	x23, x24, [sp, #48]
    204c:	ldp	x29, x30, [sp], #160
    2050:	ret
    2054:	adrp	x0, 12000 <PyInit__md5@@Base+0xfe38>
    2058:	adrp	x1, 2000 <_Py_strhex@plt+0x11a0>
    205c:	add	x1, x1, #0x2b8
    2060:	ldr	x0, [x0, #4024]
    2064:	ldr	x0, [x0]
    2068:	bl	da0 <PyErr_SetString@plt>
    206c:	mov	x0, x24
    2070:	bl	d50 <PyBuffer_Release@plt>
    2074:	mov	x0, #0x0                   	// #0
    2078:	ldp	x23, x24, [sp, #48]
    207c:	ldp	x29, x30, [sp], #160
    2080:	ret
    2084:	adrp	x0, 12000 <PyInit__md5@@Base+0xfe38>
    2088:	adrp	x1, 2000 <_Py_strhex@plt+0x11a0>
    208c:	add	x1, x1, #0x258
    2090:	ldr	x0, [x0, #4032]
    2094:	ldr	x0, [x0]
    2098:	bl	da0 <PyErr_SetString@plt>
    209c:	mov	x0, #0x0                   	// #0
    20a0:	b	2000 <_Py_strhex@plt+0x11a0>
    20a4:	mov	x0, #0x0                   	// #0
    20a8:	b	2000 <_Py_strhex@plt+0x11a0>
    20ac:	nop
    20b0:	stp	x29, x30, [sp, #-144]!
    20b4:	add	x1, x0, #0x10
    20b8:	mov	w5, #0xffffff80            	// #-128
    20bc:	mov	x29, sp
    20c0:	ldp	x2, x3, [x0, #32]
    20c4:	stp	x2, x3, [sp, #64]
    20c8:	ldp	x4, x6, [x0, #16]
    20cc:	stp	x19, x20, [sp, #16]
    20d0:	ldr	w2, [sp, #72]
    20d4:	add	x20, sp, #0x4c
    20d8:	add	x19, sp, #0x30
    20dc:	ldp	x12, x13, [x1, #32]
    20e0:	lsl	w3, w2, #3
    20e4:	add	x3, x3, x4
    20e8:	stp	x3, x6, [sp, #48]
    20ec:	add	w0, w2, #0x1
    20f0:	ldp	x10, x11, [x1, #48]
    20f4:	str	w0, [sp, #72]
    20f8:	ldp	x8, x9, [x1, #64]
    20fc:	stp	x12, x13, [sp, #80]
    2100:	cmp	w0, #0x38
    2104:	ldp	x6, x7, [x1, #80]
    2108:	stp	x10, x11, [sp, #96]
    210c:	stp	x8, x9, [sp, #112]
    2110:	stp	x6, x7, [sp, #128]
    2114:	strb	w5, [x20, w2, uxtw]
    2118:	b.ls	21bc <_Py_strhex@plt+0x135c>  // b.plast
    211c:	cmp	w0, #0x3f
    2120:	b.hi	2148 <_Py_strhex@plt+0x12e8>  // b.pmore
    2124:	mov	w1, #0x3e                  	// #62
    2128:	add	x0, x0, #0x1c
    212c:	sub	w2, w1, w2
    2130:	add	x0, x19, x0
    2134:	add	x2, x2, #0x1
    2138:	mov	w1, #0x0                   	// #0
    213c:	bl	db0 <memset@plt>
    2140:	mov	w0, #0x40                  	// #64
    2144:	str	w0, [sp, #72]
    2148:	mov	x0, x19
    214c:	add	x1, x19, #0x1c
    2150:	bl	f48 <_Py_strhex@plt+0xe8>
    2154:	ldr	x3, [sp, #48]
    2158:	mov	w0, #0x0                   	// #0
    215c:	mov	w1, w0
    2160:	strb	wzr, [x20, w1, uxtw]
    2164:	add	w1, w1, #0x1
    2168:	cmp	w1, #0x38
    216c:	b.ne	2160 <_Py_strhex@plt+0x1300>  // b.any
    2170:	add	w2, w0, #0x1
    2174:	mov	w1, #0x37                  	// #55
    2178:	cmp	w2, #0x38
    217c:	sub	w0, w1, w0
    2180:	csel	w0, w0, wzr, ls  // ls = plast
    2184:	add	w0, w0, w2
    2188:	str	w0, [sp, #72]
    218c:	add	x1, x19, #0x1c
    2190:	mov	x0, x19
    2194:	stur	x3, [sp, #132]
    2198:	bl	f48 <_Py_strhex@plt+0xe8>
    219c:	ldp	x3, x2, [sp, #56]
    21a0:	add	x0, sp, #0x20
    21a4:	mov	x1, #0x10                  	// #16
    21a8:	stp	x3, x2, [sp, #32]
    21ac:	bl	e60 <_Py_strhex@plt>
    21b0:	ldp	x19, x20, [sp, #16]
    21b4:	ldp	x29, x30, [sp], #144
    21b8:	ret
    21bc:	b.ne	215c <_Py_strhex@plt+0x12fc>  // b.any
    21c0:	b	218c <_Py_strhex@plt+0x132c>
    21c4:	nop

00000000000021c8 <PyInit__md5@@Base>:
    21c8:	stp	x29, x30, [sp, #-48]!
    21cc:	adrp	x1, 12000 <PyInit__md5@@Base+0xfe38>
    21d0:	mov	x29, sp
    21d4:	ldr	x1, [x1, #4048]
    21d8:	stp	x19, x20, [sp, #16]
    21dc:	mov	x19, #0x0                   	// #0
    21e0:	str	x21, [sp, #32]
    21e4:	adrp	x21, 13000 <PyInit__md5@@Base+0x10e38>
    21e8:	add	x20, x21, #0xa0
    21ec:	mov	x0, x20
    21f0:	str	x1, [x20, #8]
    21f4:	bl	dd0 <PyType_Ready@plt>
    21f8:	tbnz	w0, #31, 222c <PyInit__md5@@Base+0x64>
    21fc:	add	x0, x20, #0x1e0
    2200:	mov	w1, #0x3f5                 	// #1013
    2204:	bl	e10 <PyModule_Create2@plt>
    2208:	mov	x19, x0
    220c:	cbz	x0, 222c <PyInit__md5@@Base+0x64>
    2210:	ldr	x3, [x21, #160]
    2214:	adrp	x1, 2000 <_Py_strhex@plt+0x11a0>
    2218:	mov	x2, x20
    221c:	add	x1, x1, #0x2d8
    2220:	add	x3, x3, #0x1
    2224:	str	x3, [x21, #160]
    2228:	bl	e40 <PyModule_AddObject@plt>
    222c:	mov	x0, x19
    2230:	ldp	x19, x20, [sp, #16]
    2234:	ldr	x21, [sp, #32]
    2238:	ldp	x29, x30, [sp], #48
    223c:	ret

Disassembly of section .fini:

0000000000002240 <.fini>:
    2240:	stp	x29, x30, [sp, #-16]!
    2244:	mov	x29, sp
    2248:	ldp	x29, x30, [sp], #16
    224c:	ret
