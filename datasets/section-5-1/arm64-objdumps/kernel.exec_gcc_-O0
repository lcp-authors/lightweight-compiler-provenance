
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//kernel.exec_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_start>:
       0:	ldr	x2, 28 <efi_image_handle_val>
       4:	str	x0, [x2]
       8:	ldr	x2, 20 <efi_system_table_val>
       c:	str	x1, [x2]
      10:	ldr	x2, 18 <grub_main_val>
      14:	br	x2

0000000000000018 <grub_main_val>:
	...

0000000000000020 <efi_system_table_val>:
	...

0000000000000028 <efi_image_handle_val>:
	...

0000000000000030 <grub_efi_get_time_ms>:
      30:	sub	sp, sp, #0x10
      34:	mrs	x0, cntvct_el0
      38:	str	x0, [sp, #8]
      3c:	adrp	x0, 0 <_start>
      40:	add	x0, x0, #0x0
      44:	ldr	x0, [x0]
      48:	ldr	x0, [x0]
      4c:	ldr	x1, [sp, #8]
      50:	udiv	x0, x1, x0
      54:	add	sp, sp, #0x10
      58:	ret
      5c:	nop
	...

0000000000000068 <grub_machine_init>:
      68:	stp	x29, x30, [sp, #-32]!
      6c:	mov	x29, sp
      70:	bl	5268 <grub_efi_init>
      74:	mrs	x0, cntfrq_el0
      78:	str	x0, [sp, #24]
      7c:	ldr	x0, [sp, #24]
      80:	lsr	x1, x0, #3
      84:	mov	x0, #0xf7cf                	// #63439
      88:	movk	x0, #0xe353, lsl #16
      8c:	movk	x0, #0x9ba5, lsl #32
      90:	movk	x0, #0x20c4, lsl #48
      94:	umulh	x0, x1, x0
      98:	lsr	x1, x0, #4
      9c:	adrp	x0, 0 <_start>
      a0:	add	x0, x0, #0x0
      a4:	ldr	x0, [x0]
      a8:	str	x1, [x0]
      ac:	adrp	x0, 0 <_start>
      b0:	add	x0, x0, #0x0
      b4:	ldr	x0, [x0]
      b8:	bl	8738 <grub_install_get_time_ms>
      bc:	nop
      c0:	ldp	x29, x30, [sp], #32
      c4:	ret
	...

00000000000000d8 <grub_machine_fini>:
      d8:	stp	x29, x30, [sp, #-32]!
      dc:	mov	x29, sp
      e0:	str	w0, [sp, #28]
      e4:	ldr	w0, [sp, #28]
      e8:	and	w0, w0, #0x1
      ec:	cmp	w0, #0x0
      f0:	b.eq	fc <grub_machine_fini+0x24>  // b.none
      f4:	bl	53f0 <grub_efi_fini>
      f8:	b	100 <grub_machine_fini+0x28>
      fc:	nop
     100:	ldp	x29, x30, [sp], #32
     104:	ret

0000000000000108 <grub_efi_get_firmware_fdt>:
     108:	stp	x29, x30, [sp, #-64]!
     10c:	mov	x29, sp
     110:	mov	w0, #0x21d5                	// #8661
     114:	movk	w0, #0xb1b6, lsl #16
     118:	str	w0, [sp, #24]
     11c:	mov	w0, #0xfffff19c            	// #-3684
     120:	strh	w0, [sp, #28]
     124:	mov	w0, #0x41a5                	// #16805
     128:	strh	w0, [sp, #30]
     12c:	mov	x0, #0xb83                 	// #2947
     130:	movk	x0, #0x15d9, lsl #16
     134:	movk	x0, #0x692c, lsl #32
     138:	movk	x0, #0xe0aa, lsl #48
     13c:	str	x0, [sp, #32]
     140:	str	xzr, [sp, #56]
     144:	adrp	x0, 0 <_start>
     148:	add	x0, x0, #0x0
     14c:	ldr	x0, [x0]
     150:	ldr	x0, [x0]
     154:	ldr	x0, [x0, #112]
     158:	str	x0, [sp, #40]
     15c:	str	wzr, [sp, #52]
     160:	b	20c <grub_efi_get_firmware_fdt+0x104>
     164:	ldr	w1, [sp, #52]
     168:	mov	x0, x1
     16c:	lsl	x0, x0, #1
     170:	add	x0, x0, x1
     174:	lsl	x0, x0, #3
     178:	mov	x1, x0
     17c:	ldr	x0, [sp, #40]
     180:	add	x0, x0, x1
     184:	mov	x3, x0
     188:	add	x0, sp, #0x18
     18c:	mov	x2, #0x10                  	// #16
     190:	mov	x1, x0
     194:	mov	x0, x3
     198:	bl	f5d0 <grub_memcmp>
     19c:	cmp	w0, #0x0
     1a0:	b.ne	200 <grub_efi_get_firmware_fdt+0xf8>  // b.any
     1a4:	ldr	w1, [sp, #52]
     1a8:	mov	x0, x1
     1ac:	lsl	x0, x0, #1
     1b0:	add	x0, x0, x1
     1b4:	lsl	x0, x0, #3
     1b8:	mov	x1, x0
     1bc:	ldr	x0, [sp, #40]
     1c0:	add	x0, x0, x1
     1c4:	ldr	x0, [x0, #16]
     1c8:	str	x0, [sp, #56]
     1cc:	ldr	x4, [sp, #56]
     1d0:	adrp	x0, 0 <_start>
     1d4:	add	x0, x0, #0x0
     1d8:	ldr	x3, [x0]
     1dc:	adrp	x0, 0 <_start>
     1e0:	add	x0, x0, #0x0
     1e4:	ldr	x2, [x0]
     1e8:	mov	w1, #0x26                  	// #38
     1ec:	adrp	x0, 0 <_start>
     1f0:	add	x0, x0, #0x0
     1f4:	ldr	x0, [x0]
     1f8:	bl	f328 <grub_real_dprintf>
     1fc:	b	22c <grub_efi_get_firmware_fdt+0x124>
     200:	ldr	w0, [sp, #52]
     204:	add	w0, w0, #0x1
     208:	str	w0, [sp, #52]
     20c:	ldr	w1, [sp, #52]
     210:	adrp	x0, 0 <_start>
     214:	add	x0, x0, #0x0
     218:	ldr	x0, [x0]
     21c:	ldr	x0, [x0]
     220:	ldr	x0, [x0, #104]
     224:	cmp	x1, x0
     228:	b.cc	164 <grub_efi_get_firmware_fdt+0x5c>  // b.lo, b.ul, b.last
     22c:	ldr	x0, [sp, #56]
     230:	ldp	x29, x30, [sp], #64
     234:	ret
	...

0000000000000258 <probe_caches>:
     258:	stp	x29, x30, [sp, #-32]!
     25c:	mov	x29, sp
     260:	mrs	x0, ctr_el0
     264:	str	x0, [sp, #24]
     268:	ldr	x0, [sp, #24]
     26c:	lsr	x0, x0, #16
     270:	and	w0, w0, #0xf
     274:	mov	w1, #0x4                   	// #4
     278:	lsl	w0, w1, w0
     27c:	sxtw	x1, w0
     280:	adrp	x0, 0 <_start>
     284:	add	x0, x0, #0x0
     288:	ldr	x0, [x0]
     28c:	str	x1, [x0]
     290:	ldr	x0, [sp, #24]
     294:	and	w0, w0, #0xf
     298:	mov	w1, #0x4                   	// #4
     29c:	lsl	w0, w1, w0
     2a0:	sxtw	x1, w0
     2a4:	adrp	x0, 0 <_start>
     2a8:	add	x0, x0, #0x0
     2ac:	ldr	x0, [x0]
     2b0:	str	x1, [x0]
     2b4:	adrp	x0, 0 <_start>
     2b8:	add	x0, x0, #0x0
     2bc:	ldr	x0, [x0]
     2c0:	ldr	x0, [x0]
     2c4:	mov	x4, x0
     2c8:	adrp	x0, 0 <_start>
     2cc:	add	x0, x0, #0x0
     2d0:	ldr	x3, [x0]
     2d4:	adrp	x0, 0 <_start>
     2d8:	add	x0, x0, #0x0
     2dc:	ldr	x2, [x0]
     2e0:	mov	w1, #0x2a                  	// #42
     2e4:	adrp	x0, 0 <_start>
     2e8:	add	x0, x0, #0x0
     2ec:	ldr	x0, [x0]
     2f0:	bl	f328 <grub_real_dprintf>
     2f4:	adrp	x0, 0 <_start>
     2f8:	add	x0, x0, #0x0
     2fc:	ldr	x0, [x0]
     300:	ldr	x0, [x0]
     304:	mov	x4, x0
     308:	adrp	x0, 0 <_start>
     30c:	add	x0, x0, #0x0
     310:	ldr	x3, [x0]
     314:	adrp	x0, 0 <_start>
     318:	add	x0, x0, #0x0
     31c:	ldr	x2, [x0]
     320:	mov	w1, #0x2b                  	// #43
     324:	adrp	x0, 0 <_start>
     328:	add	x0, x0, #0x0
     32c:	ldr	x0, [x0]
     330:	bl	f328 <grub_real_dprintf>
     334:	nop
     338:	ldp	x29, x30, [sp], #32
     33c:	ret
	...

0000000000000370 <grub_arch_sync_caches>:
     370:	stp	x29, x30, [sp, #-64]!
     374:	mov	x29, sp
     378:	str	x0, [sp, #24]
     37c:	str	x1, [sp, #16]
     380:	adrp	x0, 0 <_start>
     384:	add	x0, x0, #0x0
     388:	ldr	x0, [x0]
     38c:	ldr	x0, [x0]
     390:	cmp	x0, #0x0
     394:	b.ne	39c <grub_arch_sync_caches+0x2c>  // b.any
     398:	bl	258 <probe_caches>
     39c:	adrp	x0, 0 <_start>
     3a0:	add	x0, x0, #0x0
     3a4:	ldr	x0, [x0]
     3a8:	ldr	x0, [x0]
     3ac:	cmp	x0, #0x0
     3b0:	b.ne	3c4 <grub_arch_sync_caches+0x54>  // b.any
     3b4:	adrp	x0, 0 <_start>
     3b8:	add	x0, x0, #0x0
     3bc:	ldr	x0, [x0]
     3c0:	bl	117e8 <grub_fatal>
     3c4:	adrp	x0, 0 <_start>
     3c8:	add	x0, x0, #0x0
     3cc:	ldr	x0, [x0]
     3d0:	ldr	x1, [x0]
     3d4:	adrp	x0, 0 <_start>
     3d8:	add	x0, x0, #0x0
     3dc:	ldr	x0, [x0]
     3e0:	ldr	x0, [x0]
     3e4:	cmp	x1, x0
     3e8:	csel	x0, x1, x0, ge  // ge = tcont
     3ec:	str	x0, [sp, #56]
     3f0:	ldr	x0, [sp, #56]
     3f4:	neg	x1, x0
     3f8:	ldr	x0, [sp, #24]
     3fc:	and	x0, x1, x0
     400:	str	x0, [sp, #48]
     404:	ldr	x1, [sp, #24]
     408:	ldr	x0, [sp, #16]
     40c:	add	x1, x1, x0
     410:	ldr	x0, [sp, #56]
     414:	add	x0, x1, x0
     418:	sub	x1, x0, #0x1
     41c:	ldr	x0, [sp, #56]
     420:	neg	x0, x0
     424:	and	x0, x1, x0
     428:	str	x0, [sp, #40]
     42c:	adrp	x0, 0 <_start>
     430:	add	x0, x0, #0x0
     434:	ldr	x0, [x0]
     438:	ldr	x0, [x0]
     43c:	mov	x2, x0
     440:	ldr	x1, [sp, #40]
     444:	ldr	x0, [sp, #48]
     448:	bl	490 <grub_arch_clean_dcache_range>
     44c:	adrp	x0, 0 <_start>
     450:	add	x0, x0, #0x0
     454:	ldr	x0, [x0]
     458:	ldr	x0, [x0]
     45c:	mov	x2, x0
     460:	ldr	x1, [sp, #40]
     464:	ldr	x0, [sp, #48]
     468:	bl	4b0 <grub_arch_invalidate_icache_range>
     46c:	nop
     470:	ldp	x29, x30, [sp], #64
     474:	ret
	...

0000000000000490 <grub_arch_clean_dcache_range>:
     490:	cmp	x0, x1
     494:	b.ge	4a4 <grub_arch_clean_dcache_range+0x14>  // b.tcont
     498:	dc	cvau, x0
     49c:	add	x0, x0, x2
     4a0:	b	490 <grub_arch_clean_dcache_range>
     4a4:	dsb	ish
     4a8:	isb
     4ac:	ret

00000000000004b0 <grub_arch_invalidate_icache_range>:
     4b0:	cmp	x0, x1
     4b4:	b.ge	4c4 <grub_arch_invalidate_icache_range+0x14>  // b.tcont
     4b8:	ic	ivau, x0
     4bc:	add	x0, x0, x2
     4c0:	b	4b0 <grub_arch_invalidate_icache_range>
     4c4:	dsb	ish
     4c8:	isb
     4cc:	ret

00000000000004d0 <grub_arch_dl_check_header>:
     4d0:	stp	x29, x30, [sp, #-48]!
     4d4:	mov	x29, sp
     4d8:	str	x0, [sp, #24]
     4dc:	ldr	x0, [sp, #24]
     4e0:	str	x0, [sp, #40]
     4e4:	ldr	x0, [sp, #40]
     4e8:	ldrb	w0, [x0, #4]
     4ec:	cmp	w0, #0x2
     4f0:	b.ne	514 <grub_arch_dl_check_header+0x44>  // b.any
     4f4:	ldr	x0, [sp, #40]
     4f8:	ldrb	w0, [x0, #5]
     4fc:	cmp	w0, #0x1
     500:	b.ne	514 <grub_arch_dl_check_header+0x44>  // b.any
     504:	ldr	x0, [sp, #40]
     508:	ldrh	w0, [x0, #18]
     50c:	cmp	w0, #0xb7
     510:	b.eq	52c <grub_arch_dl_check_header+0x5c>  // b.none
     514:	adrp	x0, 0 <_start>
     518:	add	x0, x0, #0x0
     51c:	ldr	x1, [x0]
     520:	mov	w0, #0x15                  	// #21
     524:	bl	ce54 <grub_error>
     528:	b	530 <grub_arch_dl_check_header+0x60>
     52c:	mov	w0, #0x0                   	// #0
     530:	ldp	x29, x30, [sp], #48
     534:	ret
	...

0000000000000540 <grub_arch_dl_relocate_symbols>:
     540:	stp	x29, x30, [sp, #-176]!
     544:	mov	x29, sp
     548:	str	x0, [sp, #40]
     54c:	str	x1, [sp, #32]
     550:	str	x2, [sp, #24]
     554:	str	x3, [sp, #16]
     558:	str	wzr, [sp, #164]
     55c:	ldr	x0, [sp, #24]
     560:	ldr	x0, [x0, #24]
     564:	ldr	x1, [sp, #32]
     568:	add	x0, x1, x0
     56c:	str	x0, [sp, #168]
     570:	ldr	x0, [sp, #24]
     574:	ldr	x0, [x0, #32]
     578:	ldr	x1, [sp, #168]
     57c:	add	x0, x1, x0
     580:	str	x0, [sp, #128]
     584:	b	ae0 <grub_arch_dl_relocate_symbols+0x5a0>
     588:	ldr	x0, [sp, #168]
     58c:	ldr	x1, [x0]
     590:	ldr	x0, [sp, #16]
     594:	ldr	x0, [x0, #16]
     598:	cmp	x1, x0
     59c:	b.cc	5b8 <grub_arch_dl_relocate_symbols+0x78>  // b.lo, b.ul, b.last
     5a0:	adrp	x0, 0 <_start>
     5a4:	add	x0, x0, #0x0
     5a8:	ldr	x1, [x0]
     5ac:	mov	w0, #0x2                   	// #2
     5b0:	bl	ce54 <grub_error>
     5b4:	b	af4 <grub_arch_dl_relocate_symbols+0x5b4>
     5b8:	ldr	x0, [sp, #40]
     5bc:	ldr	x1, [x0, #32]
     5c0:	ldr	x0, [sp, #40]
     5c4:	ldr	x2, [x0, #40]
     5c8:	ldr	x0, [sp, #168]
     5cc:	ldr	x0, [x0, #8]
     5d0:	lsr	x0, x0, #32
     5d4:	mul	x0, x2, x0
     5d8:	add	x0, x1, x0
     5dc:	str	x0, [sp, #120]
     5e0:	ldr	x0, [sp, #120]
     5e4:	ldr	x0, [x0, #8]
     5e8:	str	x0, [sp, #152]
     5ec:	ldr	x0, [sp, #24]
     5f0:	ldr	w0, [x0, #4]
     5f4:	cmp	w0, #0x4
     5f8:	b.ne	614 <grub_arch_dl_relocate_symbols+0xd4>  // b.any
     5fc:	ldr	x0, [sp, #168]
     600:	ldr	x0, [x0, #16]
     604:	mov	x1, x0
     608:	ldr	x0, [sp, #152]
     60c:	add	x0, x0, x1
     610:	str	x0, [sp, #152]
     614:	ldr	x0, [sp, #16]
     618:	ldr	x0, [x0, #8]
     61c:	mov	x1, x0
     620:	ldr	x0, [sp, #168]
     624:	ldr	x0, [x0]
     628:	add	x0, x1, x0
     62c:	str	x0, [sp, #112]
     630:	ldr	x0, [sp, #168]
     634:	ldr	x0, [x0, #8]
     638:	and	x0, x0, #0xffffffff
     63c:	cmp	x0, #0x138
     640:	b.eq	a1c <grub_arch_dl_relocate_symbols+0x4dc>  // b.none
     644:	cmp	x0, #0x138
     648:	b.hi	aa0 <grub_arch_dl_relocate_symbols+0x560>  // b.pmore
     64c:	cmp	x0, #0x137
     650:	b.eq	880 <grub_arch_dl_relocate_symbols+0x340>  // b.none
     654:	cmp	x0, #0x137
     658:	b.hi	aa0 <grub_arch_dl_relocate_symbols+0x560>  // b.pmore
     65c:	cmp	x0, #0x11e
     660:	b.eq	710 <grub_arch_dl_relocate_symbols+0x1d0>  // b.none
     664:	cmp	x0, #0x11e
     668:	b.hi	aa0 <grub_arch_dl_relocate_symbols+0x560>  // b.pmore
     66c:	cmp	x0, #0x11b
     670:	b.hi	aa0 <grub_arch_dl_relocate_symbols+0x560>  // b.pmore
     674:	cmp	x0, #0x11a
     678:	b.cs	724 <grub_arch_dl_relocate_symbols+0x1e4>  // b.hs, b.nlast
     67c:	cmp	x0, #0x115
     680:	b.eq	6fc <grub_arch_dl_relocate_symbols+0x1bc>  // b.none
     684:	cmp	x0, #0x115
     688:	b.hi	aa0 <grub_arch_dl_relocate_symbols+0x560>  // b.pmore
     68c:	cmp	x0, #0x113
     690:	b.eq	a50 <grub_arch_dl_relocate_symbols+0x510>  // b.none
     694:	cmp	x0, #0x113
     698:	b.hi	aa0 <grub_arch_dl_relocate_symbols+0x560>  // b.pmore
     69c:	cmp	x0, #0x101
     6a0:	b.eq	6b0 <grub_arch_dl_relocate_symbols+0x170>  // b.none
     6a4:	cmp	x0, #0x105
     6a8:	b.eq	7d4 <grub_arch_dl_relocate_symbols+0x294>  // b.none
     6ac:	b	aa0 <grub_arch_dl_relocate_symbols+0x560>
     6b0:	ldr	x0, [sp, #112]
     6b4:	str	x0, [sp, #56]
     6b8:	ldr	x5, [sp, #152]
     6bc:	ldr	x4, [sp, #112]
     6c0:	adrp	x0, 0 <_start>
     6c4:	add	x0, x0, #0x0
     6c8:	ldr	x3, [x0]
     6cc:	adrp	x0, 0 <_start>
     6d0:	add	x0, x0, #0x0
     6d4:	ldr	x2, [x0]
     6d8:	mov	w1, #0x59                  	// #89
     6dc:	adrp	x0, 0 <_start>
     6e0:	add	x0, x0, #0x0
     6e4:	ldr	x0, [x0]
     6e8:	bl	f328 <grub_real_dprintf>
     6ec:	ldr	x0, [sp, #56]
     6f0:	ldr	x1, [sp, #152]
     6f4:	str	x1, [x0]
     6f8:	b	acc <grub_arch_dl_relocate_symbols+0x58c>
     6fc:	ldr	x0, [sp, #152]
     700:	mov	x1, x0
     704:	ldr	x0, [sp, #112]
     708:	bl	d58 <grub_arm64_set_abs_lo12>
     70c:	b	acc <grub_arch_dl_relocate_symbols+0x58c>
     710:	ldr	x0, [sp, #152]
     714:	mov	x1, x0
     718:	ldr	x0, [sp, #112]
     71c:	bl	db8 <grub_arm64_set_abs_lo12_ldst64>
     720:	b	acc <grub_arch_dl_relocate_symbols+0x58c>
     724:	ldr	x0, [sp, #112]
     728:	ldr	x1, [sp, #152]
     72c:	sub	x0, x1, x0
     730:	str	x0, [sp, #144]
     734:	ldr	x0, [sp, #144]
     738:	bl	b60 <grub_arm_64_check_xxxx26_offset>
     73c:	cmp	w0, #0x0
     740:	b.ne	79c <grub_arch_dl_relocate_symbols+0x25c>  // b.any
     744:	ldr	x0, [sp, #40]
     748:	ldr	x0, [x0, #88]
     74c:	str	x0, [sp, #88]
     750:	ldr	x0, [sp, #88]
     754:	add	x1, x0, #0x10
     758:	ldr	x0, [sp, #40]
     75c:	str	x1, [x0, #88]
     760:	ldr	x0, [sp, #88]
     764:	mov	w1, #0x50                  	// #80
     768:	movk	w1, #0x5800, lsl #16
     76c:	str	w1, [x0]
     770:	ldr	x0, [sp, #88]
     774:	mov	w1, #0x200                 	// #512
     778:	movk	w1, #0xd61f, lsl #16
     77c:	str	w1, [x0, #4]
     780:	ldr	x0, [sp, #88]
     784:	ldr	x1, [sp, #152]
     788:	str	x1, [x0, #8]
     78c:	ldr	x1, [sp, #88]
     790:	ldr	x0, [sp, #112]
     794:	sub	x0, x1, x0
     798:	str	x0, [sp, #144]
     79c:	ldr	x0, [sp, #144]
     7a0:	bl	b60 <grub_arm_64_check_xxxx26_offset>
     7a4:	cmp	w0, #0x0
     7a8:	b.ne	7c4 <grub_arch_dl_relocate_symbols+0x284>  // b.any
     7ac:	adrp	x0, 0 <_start>
     7b0:	add	x0, x0, #0x0
     7b4:	ldr	x1, [x0]
     7b8:	mov	w0, #0x2                   	// #2
     7bc:	bl	ce54 <grub_error>
     7c0:	b	af4 <grub_arch_dl_relocate_symbols+0x5b4>
     7c4:	ldr	x1, [sp, #144]
     7c8:	ldr	x0, [sp, #112]
     7cc:	bl	bac <grub_arm64_set_xxxx26_offset>
     7d0:	b	acc <grub_arch_dl_relocate_symbols+0x58c>
     7d4:	ldr	x0, [sp, #112]
     7d8:	str	x0, [sp, #72]
     7dc:	ldr	x0, [sp, #72]
     7e0:	ldr	w0, [x0]
     7e4:	sxtw	x1, w0
     7e8:	ldr	x0, [sp, #152]
     7ec:	add	x0, x1, x0
     7f0:	ldr	x1, [sp, #16]
     7f4:	ldr	x1, [x1, #8]
     7f8:	sub	x1, x0, x1
     7fc:	ldr	x0, [sp, #168]
     800:	ldr	x0, [x0]
     804:	sub	x0, x1, x0
     808:	str	x0, [sp, #64]
     80c:	ldr	x0, [sp, #64]
     810:	sxtw	x0, w0
     814:	ldr	x1, [sp, #64]
     818:	cmp	x1, x0
     81c:	b.eq	838 <grub_arch_dl_relocate_symbols+0x2f8>  // b.none
     820:	adrp	x0, 0 <_start>
     824:	add	x0, x0, #0x0
     828:	ldr	x1, [x0]
     82c:	mov	w0, #0x2                   	// #2
     830:	bl	ce54 <grub_error>
     834:	b	af4 <grub_arch_dl_relocate_symbols+0x5b4>
     838:	ldr	x5, [sp, #152]
     83c:	ldr	x4, [sp, #112]
     840:	adrp	x0, 0 <_start>
     844:	add	x0, x0, #0x0
     848:	ldr	x3, [x0]
     84c:	adrp	x0, 0 <_start>
     850:	add	x0, x0, #0x0
     854:	ldr	x2, [x0]
     858:	mov	w1, #0x83                  	// #131
     85c:	adrp	x0, 0 <_start>
     860:	add	x0, x0, #0x0
     864:	ldr	x0, [x0]
     868:	bl	f328 <grub_real_dprintf>
     86c:	ldr	x0, [sp, #64]
     870:	mov	w1, w0
     874:	ldr	x0, [sp, #72]
     878:	str	w1, [x0]
     87c:	b	acc <grub_arch_dl_relocate_symbols+0x58c>
     880:	ldr	x0, [sp, #40]
     884:	ldr	x0, [x0, #72]
     888:	str	x0, [sp, #104]
     88c:	ldr	x0, [sp, #104]
     890:	and	x1, x0, #0xfffffffffffff000
     894:	ldr	x0, [sp, #112]
     898:	and	x0, x0, #0xfffffffffffff000
     89c:	sub	x0, x1, x0
     8a0:	str	x0, [sp, #96]
     8a4:	ldr	x0, [sp, #104]
     8a8:	ldr	x1, [sp, #152]
     8ac:	str	x1, [x0]
     8b0:	ldr	x0, [sp, #104]
     8b4:	add	x1, x0, #0x8
     8b8:	ldr	x0, [sp, #40]
     8bc:	str	x1, [x0, #72]
     8c0:	ldr	w0, [sp, #164]
     8c4:	add	w0, w0, #0x1
     8c8:	str	w0, [sp, #164]
     8cc:	ldr	x0, [sp, #104]
     8d0:	mov	x6, x0
     8d4:	ldr	x5, [sp, #152]
     8d8:	ldr	x4, [sp, #112]
     8dc:	adrp	x0, 0 <_start>
     8e0:	add	x0, x0, #0x0
     8e4:	ldr	x3, [x0]
     8e8:	adrp	x0, 0 <_start>
     8ec:	add	x0, x0, #0x0
     8f0:	ldr	x2, [x0]
     8f4:	mov	w1, #0x90                  	// #144
     8f8:	adrp	x0, 0 <_start>
     8fc:	add	x0, x0, #0x0
     900:	ldr	x0, [x0]
     904:	bl	f328 <grub_real_dprintf>
     908:	ldr	x0, [sp, #96]
     90c:	bl	c98 <grub_arm64_check_hi21_signed>
     910:	cmp	w0, #0x0
     914:	b.ne	930 <grub_arch_dl_relocate_symbols+0x3f0>  // b.any
     918:	adrp	x0, 0 <_start>
     91c:	add	x0, x0, #0x0
     920:	ldr	x1, [x0]
     924:	mov	w0, #0x2                   	// #2
     928:	bl	ce54 <grub_error>
     92c:	b	af4 <grub_arch_dl_relocate_symbols+0x5b4>
     930:	ldr	x1, [sp, #96]
     934:	ldr	x0, [sp, #112]
     938:	bl	cc8 <grub_arm64_set_hi21>
     93c:	ldr	x0, [sp, #24]
     940:	ldr	x0, [x0, #56]
     944:	ldr	x1, [sp, #168]
     948:	add	x0, x1, x0
     94c:	str	x0, [sp, #136]
     950:	b	9e4 <grub_arch_dl_relocate_symbols+0x4a4>
     954:	ldr	x0, [sp, #136]
     958:	ldr	x0, [x0, #8]
     95c:	lsr	x1, x0, #32
     960:	ldr	x0, [sp, #168]
     964:	ldr	x0, [x0, #8]
     968:	lsr	x0, x0, #32
     96c:	cmp	x1, x0
     970:	b.ne	9d0 <grub_arch_dl_relocate_symbols+0x490>  // b.any
     974:	ldr	x0, [sp, #168]
     978:	ldr	x1, [x0, #16]
     97c:	ldr	x0, [sp, #136]
     980:	ldr	x0, [x0, #16]
     984:	cmp	x1, x0
     988:	b.ne	9d0 <grub_arch_dl_relocate_symbols+0x490>  // b.any
     98c:	ldr	x0, [sp, #136]
     990:	ldr	x0, [x0, #8]
     994:	and	x0, x0, #0xffffffff
     998:	cmp	x0, #0x138
     99c:	b.ne	9d0 <grub_arch_dl_relocate_symbols+0x490>  // b.any
     9a0:	ldr	x0, [sp, #16]
     9a4:	ldr	x0, [x0, #8]
     9a8:	mov	x1, x0
     9ac:	ldr	x0, [sp, #136]
     9b0:	ldr	x0, [x0]
     9b4:	add	x0, x1, x0
     9b8:	mov	x2, x0
     9bc:	ldr	x0, [sp, #104]
     9c0:	mov	x1, x0
     9c4:	mov	x0, x2
     9c8:	bl	db8 <grub_arm64_set_abs_lo12_ldst64>
     9cc:	b	9f4 <grub_arch_dl_relocate_symbols+0x4b4>
     9d0:	ldr	x0, [sp, #24]
     9d4:	ldr	x0, [x0, #56]
     9d8:	ldr	x1, [sp, #136]
     9dc:	add	x0, x1, x0
     9e0:	str	x0, [sp, #136]
     9e4:	ldr	x1, [sp, #136]
     9e8:	ldr	x0, [sp, #128]
     9ec:	cmp	x1, x0
     9f0:	b.cc	954 <grub_arch_dl_relocate_symbols+0x414>  // b.lo, b.ul, b.last
     9f4:	ldr	x1, [sp, #136]
     9f8:	ldr	x0, [sp, #128]
     9fc:	cmp	x1, x0
     a00:	b.cc	ac8 <grub_arch_dl_relocate_symbols+0x588>  // b.lo, b.ul, b.last
     a04:	adrp	x0, 0 <_start>
     a08:	add	x0, x0, #0x0
     a0c:	ldr	x1, [x0]
     a10:	mov	w0, #0x2                   	// #2
     a14:	bl	ce54 <grub_error>
     a18:	b	af4 <grub_arch_dl_relocate_symbols+0x5b4>
     a1c:	ldr	w0, [sp, #164]
     a20:	cmp	w0, #0x0
     a24:	b.ne	a40 <grub_arch_dl_relocate_symbols+0x500>  // b.any
     a28:	adrp	x0, 0 <_start>
     a2c:	add	x0, x0, #0x0
     a30:	ldr	x1, [x0]
     a34:	mov	w0, #0x2                   	// #2
     a38:	bl	ce54 <grub_error>
     a3c:	b	af4 <grub_arch_dl_relocate_symbols+0x5b4>
     a40:	ldr	w0, [sp, #164]
     a44:	sub	w0, w0, #0x1
     a48:	str	w0, [sp, #164]
     a4c:	b	acc <grub_arch_dl_relocate_symbols+0x58c>
     a50:	ldr	x0, [sp, #152]
     a54:	and	x1, x0, #0xfffffffffffff000
     a58:	ldr	x0, [sp, #112]
     a5c:	and	x0, x0, #0xfffffffffffff000
     a60:	sub	x0, x1, x0
     a64:	str	x0, [sp, #80]
     a68:	ldr	x0, [sp, #80]
     a6c:	bl	c98 <grub_arm64_check_hi21_signed>
     a70:	cmp	w0, #0x0
     a74:	b.ne	a90 <grub_arch_dl_relocate_symbols+0x550>  // b.any
     a78:	adrp	x0, 0 <_start>
     a7c:	add	x0, x0, #0x0
     a80:	ldr	x1, [x0]
     a84:	mov	w0, #0x2                   	// #2
     a88:	bl	ce54 <grub_error>
     a8c:	b	af4 <grub_arch_dl_relocate_symbols+0x5b4>
     a90:	ldr	x1, [sp, #80]
     a94:	ldr	x0, [sp, #112]
     a98:	bl	cc8 <grub_arm64_set_hi21>
     a9c:	b	acc <grub_arch_dl_relocate_symbols+0x58c>
     aa0:	ldr	x0, [sp, #168]
     aa4:	ldr	x0, [x0, #8]
     aa8:	and	x0, x0, #0xffffffff
     aac:	mov	x2, x0
     ab0:	adrp	x0, 0 <_start>
     ab4:	add	x0, x0, #0x0
     ab8:	ldr	x1, [x0]
     abc:	mov	w0, #0x18                  	// #24
     ac0:	bl	ce54 <grub_error>
     ac4:	b	af4 <grub_arch_dl_relocate_symbols+0x5b4>
     ac8:	nop
     acc:	ldr	x0, [sp, #24]
     ad0:	ldr	x0, [x0, #56]
     ad4:	ldr	x1, [sp, #168]
     ad8:	add	x0, x1, x0
     adc:	str	x0, [sp, #168]
     ae0:	ldr	x1, [sp, #168]
     ae4:	ldr	x0, [sp, #128]
     ae8:	cmp	x1, x0
     aec:	b.cc	588 <grub_arch_dl_relocate_symbols+0x48>  // b.lo, b.ul, b.last
     af0:	mov	w0, #0x0                   	// #0
     af4:	ldp	x29, x30, [sp], #176
     af8:	ret
     afc:	nop
	...

0000000000000b60 <grub_arm_64_check_xxxx26_offset>:
     b60:	sub	sp, sp, #0x20
     b64:	str	x0, [sp, #8]
     b68:	mov	x0, #0xfffffffff8000000    	// #-134217728
     b6c:	str	x0, [sp, #24]
     b70:	mov	x0, #0x7ffffff             	// #134217727
     b74:	str	x0, [sp, #16]
     b78:	ldr	x1, [sp, #8]
     b7c:	ldr	x0, [sp, #24]
     b80:	cmp	x1, x0
     b84:	b.lt	b98 <grub_arm_64_check_xxxx26_offset+0x38>  // b.tstop
     b88:	ldr	x1, [sp, #8]
     b8c:	ldr	x0, [sp, #16]
     b90:	cmp	x1, x0
     b94:	b.le	ba0 <grub_arm_64_check_xxxx26_offset+0x40>
     b98:	mov	w0, #0x0                   	// #0
     b9c:	b	ba4 <grub_arm_64_check_xxxx26_offset+0x44>
     ba0:	mov	w0, #0x1                   	// #1
     ba4:	add	sp, sp, #0x20
     ba8:	ret

0000000000000bac <grub_arm64_set_xxxx26_offset>:
     bac:	stp	x29, x30, [sp, #-48]!
     bb0:	mov	x29, sp
     bb4:	str	x0, [sp, #24]
     bb8:	str	x1, [sp, #16]
     bbc:	mov	w0, #0xfc000000            	// #-67108864
     bc0:	str	w0, [sp, #44]
     bc4:	ldr	x0, [sp, #16]
     bc8:	cmp	x0, #0x0
     bcc:	b.le	bd8 <grub_arm64_set_xxxx26_offset+0x2c>
     bd0:	mov	w0, #0x2b                  	// #43
     bd4:	b	bdc <grub_arm64_set_xxxx26_offset+0x30>
     bd8:	mov	w0, #0x2d                  	// #45
     bdc:	ldr	x1, [sp, #16]
     be0:	cmp	x1, #0x0
     be4:	b.ge	bf4 <grub_arm64_set_xxxx26_offset+0x48>  // b.tcont
     be8:	ldr	x1, [sp, #16]
     bec:	neg	x1, x1
     bf0:	b	bf8 <grub_arm64_set_xxxx26_offset+0x4c>
     bf4:	ldr	x1, [sp, #16]
     bf8:	mov	x6, x1
     bfc:	mov	w5, w0
     c00:	ldr	x4, [sp, #24]
     c04:	adrp	x0, 0 <_start>
     c08:	add	x0, x0, #0x0
     c0c:	ldr	x3, [x0]
     c10:	adrp	x0, 0 <_start>
     c14:	add	x0, x0, #0x0
     c18:	ldr	x2, [x0]
     c1c:	mov	w1, #0x31                  	// #49
     c20:	adrp	x0, 0 <_start>
     c24:	add	x0, x0, #0x0
     c28:	ldr	x0, [x0]
     c2c:	bl	f328 <grub_real_dprintf>
     c30:	ldr	x0, [sp, #24]
     c34:	ldr	w1, [x0]
     c38:	ldr	w0, [sp, #44]
     c3c:	and	w1, w1, w0
     c40:	ldr	x0, [sp, #24]
     c44:	str	w1, [x0]
     c48:	ldr	x0, [sp, #24]
     c4c:	ldr	w1, [x0]
     c50:	ldr	x0, [sp, #16]
     c54:	asr	x0, x0, #2
     c58:	mov	w2, w0
     c5c:	ldr	w0, [sp, #44]
     c60:	mvn	w0, w0
     c64:	and	w0, w2, w0
     c68:	orr	w1, w1, w0
     c6c:	ldr	x0, [sp, #24]
     c70:	str	w1, [x0]
     c74:	nop
     c78:	ldp	x29, x30, [sp], #48
     c7c:	ret
	...

0000000000000c98 <grub_arm64_check_hi21_signed>:
     c98:	sub	sp, sp, #0x10
     c9c:	str	x0, [sp, #8]
     ca0:	ldr	x0, [sp, #8]
     ca4:	sxtw	x0, w0
     ca8:	ldr	x1, [sp, #8]
     cac:	cmp	x1, x0
     cb0:	b.eq	cbc <grub_arm64_check_hi21_signed+0x24>  // b.none
     cb4:	mov	w0, #0x0                   	// #0
     cb8:	b	cc0 <grub_arm64_check_hi21_signed+0x28>
     cbc:	mov	w0, #0x1                   	// #1
     cc0:	add	sp, sp, #0x10
     cc4:	ret

0000000000000cc8 <grub_arm64_set_hi21>:
     cc8:	sub	sp, sp, #0x20
     ccc:	str	x0, [sp, #8]
     cd0:	str	x1, [sp]
     cd4:	mov	w0, #0x1f                  	// #31
     cd8:	movk	w0, #0x9f00, lsl #16
     cdc:	str	w0, [sp, #28]
     ce0:	ldr	x0, [sp]
     ce4:	asr	x0, x0, #12
     ce8:	str	x0, [sp]
     cec:	ldr	x0, [sp]
     cf0:	lsl	x0, x0, #29
     cf4:	and	w1, w0, #0x60000000
     cf8:	ldr	x0, [sp]
     cfc:	asr	x0, x0, #2
     d00:	lsl	x0, x0, #5
     d04:	and	w0, w0, #0xffffe0
     d08:	orr	w0, w1, w0
     d0c:	str	w0, [sp, #24]
     d10:	ldr	x0, [sp, #8]
     d14:	ldr	w1, [x0]
     d18:	ldr	w0, [sp, #28]
     d1c:	and	w1, w1, w0
     d20:	ldr	x0, [sp, #8]
     d24:	str	w1, [x0]
     d28:	ldr	x0, [sp, #8]
     d2c:	ldr	w1, [x0]
     d30:	ldr	w0, [sp, #28]
     d34:	mvn	w2, w0
     d38:	ldr	w0, [sp, #24]
     d3c:	and	w0, w2, w0
     d40:	orr	w1, w1, w0
     d44:	ldr	x0, [sp, #8]
     d48:	str	w1, [x0]
     d4c:	nop
     d50:	add	sp, sp, #0x20
     d54:	ret

0000000000000d58 <grub_arm64_set_abs_lo12>:
     d58:	sub	sp, sp, #0x20
     d5c:	str	x0, [sp, #8]
     d60:	str	x1, [sp]
     d64:	mov	w0, #0xffc003ff            	// #-4193281
     d68:	str	w0, [sp, #28]
     d6c:	ldr	x0, [sp, #8]
     d70:	ldr	w1, [x0]
     d74:	ldr	w0, [sp, #28]
     d78:	and	w1, w1, w0
     d7c:	ldr	x0, [sp, #8]
     d80:	str	w1, [x0]
     d84:	ldr	x0, [sp, #8]
     d88:	ldr	w1, [x0]
     d8c:	ldr	x0, [sp]
     d90:	lsl	w2, w0, #10
     d94:	ldr	w0, [sp, #28]
     d98:	mvn	w0, w0
     d9c:	and	w0, w2, w0
     da0:	orr	w1, w1, w0
     da4:	ldr	x0, [sp, #8]
     da8:	str	w1, [x0]
     dac:	nop
     db0:	add	sp, sp, #0x20
     db4:	ret

0000000000000db8 <grub_arm64_set_abs_lo12_ldst64>:
     db8:	sub	sp, sp, #0x20
     dbc:	str	x0, [sp, #8]
     dc0:	str	x1, [sp]
     dc4:	mov	w0, #0xfff803ff            	// #-523265
     dc8:	str	w0, [sp, #28]
     dcc:	ldr	x0, [sp, #8]
     dd0:	ldr	w1, [x0]
     dd4:	ldr	w0, [sp, #28]
     dd8:	and	w1, w1, w0
     ddc:	ldr	x0, [sp, #8]
     de0:	str	w1, [x0]
     de4:	ldr	x0, [sp, #8]
     de8:	ldr	w1, [x0]
     dec:	ldr	x0, [sp]
     df0:	lsl	w2, w0, #7
     df4:	ldr	w0, [sp, #28]
     df8:	mvn	w0, w0
     dfc:	and	w0, w2, w0
     e00:	orr	w1, w1, w0
     e04:	ldr	x0, [sp, #8]
     e08:	str	w1, [x0]
     e0c:	nop
     e10:	add	sp, sp, #0x20
     e14:	ret

0000000000000e18 <grub_arm64_dl_get_tramp_got_size>:
     e18:	sub	sp, sp, #0x50
     e1c:	str	x0, [sp, #24]
     e20:	str	x1, [sp, #16]
     e24:	str	x2, [sp, #8]
     e28:	ldr	x0, [sp, #24]
     e2c:	str	x0, [sp, #48]
     e30:	ldr	x0, [sp, #16]
     e34:	str	xzr, [x0]
     e38:	ldr	x0, [sp, #8]
     e3c:	str	xzr, [x0]
     e40:	str	wzr, [sp, #68]
     e44:	ldr	x0, [sp, #48]
     e48:	ldr	x0, [x0, #40]
     e4c:	ldr	x1, [sp, #48]
     e50:	add	x0, x1, x0
     e54:	str	x0, [sp, #72]
     e58:	b	f4c <grub_arm64_dl_get_tramp_got_size+0x134>
     e5c:	ldr	x0, [sp, #72]
     e60:	ldr	w0, [x0, #4]
     e64:	cmp	w0, #0x9
     e68:	b.eq	e7c <grub_arm64_dl_get_tramp_got_size+0x64>  // b.none
     e6c:	ldr	x0, [sp, #72]
     e70:	ldr	w0, [x0, #4]
     e74:	cmp	w0, #0x4
     e78:	b.ne	f28 <grub_arm64_dl_get_tramp_got_size+0x110>  // b.any
     e7c:	ldr	x0, [sp, #72]
     e80:	ldr	x0, [x0, #24]
     e84:	ldr	x1, [sp, #48]
     e88:	add	x0, x1, x0
     e8c:	str	x0, [sp, #56]
     e90:	ldr	x0, [sp, #72]
     e94:	ldr	x0, [x0, #32]
     e98:	ldr	x1, [sp, #56]
     e9c:	add	x0, x1, x0
     ea0:	str	x0, [sp, #40]
     ea4:	b	f18 <grub_arm64_dl_get_tramp_got_size+0x100>
     ea8:	ldr	x0, [sp, #56]
     eac:	ldr	x0, [x0, #8]
     eb0:	and	x0, x0, #0xffffffff
     eb4:	cmp	x0, #0x11b
     eb8:	b.hi	ec8 <grub_arm64_dl_get_tramp_got_size+0xb0>  // b.pmore
     ebc:	cmp	x0, #0x11a
     ec0:	b.cs	ed4 <grub_arm64_dl_get_tramp_got_size+0xbc>  // b.hs, b.nlast
     ec4:	b	f04 <grub_arm64_dl_get_tramp_got_size+0xec>
     ec8:	cmp	x0, #0x137
     ecc:	b.eq	eec <grub_arm64_dl_get_tramp_got_size+0xd4>  // b.none
     ed0:	b	f04 <grub_arm64_dl_get_tramp_got_size+0xec>
     ed4:	ldr	x0, [sp, #16]
     ed8:	ldr	x0, [x0]
     edc:	add	x1, x0, #0x10
     ee0:	ldr	x0, [sp, #16]
     ee4:	str	x1, [x0]
     ee8:	b	f04 <grub_arm64_dl_get_tramp_got_size+0xec>
     eec:	ldr	x0, [sp, #8]
     ef0:	ldr	x0, [x0]
     ef4:	add	x1, x0, #0x8
     ef8:	ldr	x0, [sp, #8]
     efc:	str	x1, [x0]
     f00:	nop
     f04:	ldr	x0, [sp, #72]
     f08:	ldr	x0, [x0, #56]
     f0c:	ldr	x1, [sp, #56]
     f10:	add	x0, x1, x0
     f14:	str	x0, [sp, #56]
     f18:	ldr	x1, [sp, #56]
     f1c:	ldr	x0, [sp, #40]
     f20:	cmp	x1, x0
     f24:	b.cc	ea8 <grub_arm64_dl_get_tramp_got_size+0x90>  // b.lo, b.ul, b.last
     f28:	ldr	w0, [sp, #68]
     f2c:	add	w0, w0, #0x1
     f30:	str	w0, [sp, #68]
     f34:	ldr	x0, [sp, #48]
     f38:	ldrh	w0, [x0, #58]
     f3c:	and	x0, x0, #0xffff
     f40:	ldr	x1, [sp, #72]
     f44:	add	x0, x1, x0
     f48:	str	x0, [sp, #72]
     f4c:	ldr	x0, [sp, #48]
     f50:	ldrh	w0, [x0, #60]
     f54:	mov	w1, w0
     f58:	ldr	w0, [sp, #68]
     f5c:	cmp	w0, w1
     f60:	b.cc	e5c <grub_arm64_dl_get_tramp_got_size+0x44>  // b.lo, b.ul, b.last
     f64:	mov	w0, #0x0                   	// #0
     f68:	add	sp, sp, #0x50
     f6c:	ret

0000000000000f70 <grub_memcpy>:
     f70:	stp	x29, x30, [sp, #-48]!
     f74:	mov	x29, sp
     f78:	str	x0, [sp, #40]
     f7c:	str	x1, [sp, #32]
     f80:	str	x2, [sp, #24]
     f84:	ldr	x2, [sp, #24]
     f88:	ldr	x1, [sp, #32]
     f8c:	ldr	x0, [sp, #40]
     f90:	bl	f08c <grub_memmove>
     f94:	ldp	x29, x30, [sp], #48
     f98:	ret

0000000000000f9c <grub_partition_get_start>:
     f9c:	sub	sp, sp, #0x20
     fa0:	str	x0, [sp, #8]
     fa4:	str	xzr, [sp, #16]
     fa8:	ldr	x0, [sp, #8]
     fac:	str	x0, [sp, #24]
     fb0:	b	fd4 <grub_partition_get_start+0x38>
     fb4:	ldr	x0, [sp, #24]
     fb8:	ldr	x0, [x0, #8]
     fbc:	ldr	x1, [sp, #16]
     fc0:	add	x0, x1, x0
     fc4:	str	x0, [sp, #16]
     fc8:	ldr	x0, [sp, #24]
     fcc:	ldr	x0, [x0, #40]
     fd0:	str	x0, [sp, #24]
     fd4:	ldr	x0, [sp, #24]
     fd8:	cmp	x0, #0x0
     fdc:	b.ne	fb4 <grub_partition_get_start+0x18>  // b.any
     fe0:	ldr	x0, [sp, #16]
     fe4:	add	sp, sp, #0x20
     fe8:	ret

0000000000000fec <grub_partition_get_len>:
     fec:	sub	sp, sp, #0x10
     ff0:	str	x0, [sp, #8]
     ff4:	ldr	x0, [sp, #8]
     ff8:	ldr	x0, [x0, #16]
     ffc:	add	sp, sp, #0x10
    1000:	ret

0000000000001004 <make_devices>:
    1004:	stp	x29, x30, [sp, #-80]!
    1008:	mov	x29, sp
    100c:	str	xzr, [sp, #64]
    1010:	add	x0, sp, #0x10
    1014:	mov	x3, x0
    1018:	mov	x2, #0x0                   	// #0
    101c:	adrp	x0, 0 <_start>
    1020:	add	x0, x0, #0x0
    1024:	ldr	x1, [x0]
    1028:	mov	w0, #0x2                   	// #2
    102c:	bl	3328 <grub_efi_locate_handle>
    1030:	str	x0, [sp, #56]
    1034:	ldr	x0, [sp, #56]
    1038:	cmp	x0, #0x0
    103c:	b.ne	1048 <make_devices+0x44>  // b.any
    1040:	mov	x0, #0x0                   	// #0
    1044:	b	11e0 <make_devices+0x1dc>
    1048:	ldr	x0, [sp, #56]
    104c:	str	x0, [sp, #72]
    1050:	b	11c0 <make_devices+0x1bc>
    1054:	ldr	x0, [sp, #72]
    1058:	ldr	x0, [x0]
    105c:	bl	3e54 <grub_efi_get_device_path>
    1060:	str	x0, [sp, #48]
    1064:	ldr	x0, [sp, #48]
    1068:	cmp	x0, #0x0
    106c:	b.eq	1198 <make_devices+0x194>  // b.none
    1070:	ldr	x0, [sp, #48]
    1074:	bl	3e88 <grub_efi_find_last_device_path>
    1078:	str	x0, [sp, #40]
    107c:	ldr	x0, [sp, #40]
    1080:	cmp	x0, #0x0
    1084:	b.eq	11a0 <make_devices+0x19c>  // b.none
    1088:	ldr	x0, [sp, #72]
    108c:	ldr	x3, [x0]
    1090:	mov	w2, #0x2                   	// #2
    1094:	adrp	x0, 0 <_start>
    1098:	add	x0, x0, #0x0
    109c:	ldr	x1, [x0]
    10a0:	mov	x0, x3
    10a4:	bl	3450 <grub_efi_open_protocol>
    10a8:	str	x0, [sp, #32]
    10ac:	ldr	x0, [sp, #32]
    10b0:	cmp	x0, #0x0
    10b4:	b.eq	11a8 <make_devices+0x1a4>  // b.none
    10b8:	ldr	x0, [sp, #32]
    10bc:	ldr	x0, [x0, #8]
    10c0:	cmp	x0, #0x0
    10c4:	b.eq	10f8 <make_devices+0xf4>  // b.none
    10c8:	ldr	x0, [sp, #32]
    10cc:	ldr	x0, [x0, #8]
    10d0:	ldr	w1, [x0]
    10d4:	mov	w0, #0x5845                	// #22597
    10d8:	movk	w0, #0x6950, lsl #16
    10dc:	cmp	w1, w0
    10e0:	b.ne	10f8 <make_devices+0xf4>  // b.any
    10e4:	ldr	x0, [sp, #32]
    10e8:	ldr	x0, [x0, #8]
    10ec:	ldr	w0, [x0, #12]
    10f0:	cmp	w0, #0x1
    10f4:	b.eq	11b0 <make_devices+0x1ac>  // b.none
    10f8:	mov	x0, #0x28                  	// #40
    10fc:	bl	8348 <grub_malloc>
    1100:	str	x0, [sp, #24]
    1104:	ldr	x0, [sp, #24]
    1108:	cmp	x0, #0x0
    110c:	b.ne	114c <make_devices+0x148>  // b.any
    1110:	ldr	x0, [sp, #56]
    1114:	bl	83ac <grub_free>
    1118:	b	1138 <make_devices+0x134>
    111c:	ldr	x0, [sp, #64]
    1120:	ldr	x0, [x0, #32]
    1124:	str	x0, [sp, #24]
    1128:	ldr	x0, [sp, #64]
    112c:	bl	83ac <grub_free>
    1130:	ldr	x0, [sp, #24]
    1134:	str	x0, [sp, #64]
    1138:	ldr	x0, [sp, #64]
    113c:	cmp	x0, #0x0
    1140:	b.ne	111c <make_devices+0x118>  // b.any
    1144:	mov	x0, #0x0                   	// #0
    1148:	b	11e0 <make_devices+0x1dc>
    114c:	ldr	x0, [sp, #72]
    1150:	ldr	x1, [x0]
    1154:	ldr	x0, [sp, #24]
    1158:	str	x1, [x0]
    115c:	ldr	x0, [sp, #24]
    1160:	ldr	x1, [sp, #48]
    1164:	str	x1, [x0, #8]
    1168:	ldr	x0, [sp, #24]
    116c:	ldr	x1, [sp, #40]
    1170:	str	x1, [x0, #16]
    1174:	ldr	x0, [sp, #24]
    1178:	ldr	x1, [sp, #32]
    117c:	str	x1, [x0, #24]
    1180:	ldr	x0, [sp, #24]
    1184:	ldr	x1, [sp, #64]
    1188:	str	x1, [x0, #32]
    118c:	ldr	x0, [sp, #24]
    1190:	str	x0, [sp, #64]
    1194:	b	11b4 <make_devices+0x1b0>
    1198:	nop
    119c:	b	11b4 <make_devices+0x1b0>
    11a0:	nop
    11a4:	b	11b4 <make_devices+0x1b0>
    11a8:	nop
    11ac:	b	11b4 <make_devices+0x1b0>
    11b0:	nop
    11b4:	ldr	x0, [sp, #72]
    11b8:	add	x0, x0, #0x8
    11bc:	str	x0, [sp, #72]
    11c0:	ldr	x0, [sp, #16]
    11c4:	sub	x1, x0, #0x1
    11c8:	str	x1, [sp, #16]
    11cc:	cmp	x0, #0x0
    11d0:	b.ne	1054 <make_devices+0x50>  // b.any
    11d4:	ldr	x0, [sp, #56]
    11d8:	bl	83ac <grub_free>
    11dc:	ldr	x0, [sp, #64]
    11e0:	ldp	x29, x30, [sp], #80
    11e4:	ret
	...

00000000000011f0 <find_parent_device>:
    11f0:	stp	x29, x30, [sp, #-64]!
    11f4:	mov	x29, sp
    11f8:	str	x0, [sp, #24]
    11fc:	str	x1, [sp, #16]
    1200:	ldr	x0, [sp, #16]
    1204:	ldr	x0, [x0, #8]
    1208:	bl	3f30 <grub_efi_duplicate_device_path>
    120c:	str	x0, [sp, #48]
    1210:	ldr	x0, [sp, #48]
    1214:	cmp	x0, #0x0
    1218:	b.ne	1224 <find_parent_device+0x34>  // b.any
    121c:	mov	x0, #0x0                   	// #0
    1220:	b	12d0 <find_parent_device+0xe0>
    1224:	ldr	x0, [sp, #48]
    1228:	bl	3e88 <grub_efi_find_last_device_path>
    122c:	str	x0, [sp, #40]
    1230:	ldr	x0, [sp, #40]
    1234:	cmp	x0, #0x0
    1238:	b.ne	1244 <find_parent_device+0x54>  // b.any
    123c:	mov	x0, #0x0                   	// #0
    1240:	b	12d0 <find_parent_device+0xe0>
    1244:	ldr	x0, [sp, #40]
    1248:	mov	w1, #0x7f                  	// #127
    124c:	strb	w1, [x0]
    1250:	ldr	x0, [sp, #40]
    1254:	mov	w1, #0xffffffff            	// #-1
    1258:	strb	w1, [x0, #1]
    125c:	ldr	x0, [sp, #40]
    1260:	mov	w1, #0x4                   	// #4
    1264:	strh	w1, [x0, #2]
    1268:	ldr	x0, [sp, #24]
    126c:	str	x0, [sp, #56]
    1270:	b	12b0 <find_parent_device+0xc0>
    1274:	ldr	x1, [sp, #56]
    1278:	ldr	x0, [sp, #16]
    127c:	cmp	x1, x0
    1280:	b.eq	12a0 <find_parent_device+0xb0>  // b.none
    1284:	ldr	x0, [sp, #56]
    1288:	ldr	x0, [x0, #8]
    128c:	ldr	x1, [sp, #48]
    1290:	bl	5100 <grub_efi_compare_device_paths>
    1294:	cmp	w0, #0x0
    1298:	b.eq	12c0 <find_parent_device+0xd0>  // b.none
    129c:	b	12a4 <find_parent_device+0xb4>
    12a0:	nop
    12a4:	ldr	x0, [sp, #56]
    12a8:	ldr	x0, [x0, #32]
    12ac:	str	x0, [sp, #56]
    12b0:	ldr	x0, [sp, #56]
    12b4:	cmp	x0, #0x0
    12b8:	b.ne	1274 <find_parent_device+0x84>  // b.any
    12bc:	b	12c4 <find_parent_device+0xd4>
    12c0:	nop
    12c4:	ldr	x0, [sp, #48]
    12c8:	bl	83ac <grub_free>
    12cc:	ldr	x0, [sp, #56]
    12d0:	ldp	x29, x30, [sp], #64
    12d4:	ret

00000000000012d8 <is_child>:
    12d8:	stp	x29, x30, [sp, #-64]!
    12dc:	mov	x29, sp
    12e0:	str	x0, [sp, #24]
    12e4:	str	x1, [sp, #16]
    12e8:	ldr	x0, [sp, #24]
    12ec:	ldr	x0, [x0, #8]
    12f0:	bl	3f30 <grub_efi_duplicate_device_path>
    12f4:	str	x0, [sp, #56]
    12f8:	ldr	x0, [sp, #56]
    12fc:	cmp	x0, #0x0
    1300:	b.ne	130c <is_child+0x34>  // b.any
    1304:	mov	w0, #0x0                   	// #0
    1308:	b	1380 <is_child+0xa8>
    130c:	ldr	x0, [sp, #56]
    1310:	bl	3e88 <grub_efi_find_last_device_path>
    1314:	str	x0, [sp, #48]
    1318:	ldr	x0, [sp, #48]
    131c:	cmp	x0, #0x0
    1320:	b.ne	132c <is_child+0x54>  // b.any
    1324:	mov	w0, #0x0                   	// #0
    1328:	b	1380 <is_child+0xa8>
    132c:	ldr	x0, [sp, #48]
    1330:	mov	w1, #0x7f                  	// #127
    1334:	strb	w1, [x0]
    1338:	ldr	x0, [sp, #48]
    133c:	mov	w1, #0xffffffff            	// #-1
    1340:	strb	w1, [x0, #1]
    1344:	ldr	x0, [sp, #48]
    1348:	mov	w1, #0x4                   	// #4
    134c:	strh	w1, [x0, #2]
    1350:	ldr	x0, [sp, #16]
    1354:	ldr	x0, [x0, #8]
    1358:	mov	x1, x0
    135c:	ldr	x0, [sp, #56]
    1360:	bl	5100 <grub_efi_compare_device_paths>
    1364:	cmp	w0, #0x0
    1368:	cset	w0, eq  // eq = none
    136c:	and	w0, w0, #0xff
    1370:	str	w0, [sp, #44]
    1374:	ldr	x0, [sp, #56]
    1378:	bl	83ac <grub_free>
    137c:	ldr	w0, [sp, #44]
    1380:	ldp	x29, x30, [sp], #64
    1384:	ret

0000000000001388 <add_device>:
    1388:	stp	x29, x30, [sp, #-80]!
    138c:	mov	x29, sp
    1390:	str	x19, [sp, #16]
    1394:	str	x0, [sp, #40]
    1398:	str	x1, [sp, #32]
    139c:	ldr	x0, [sp, #40]
    13a0:	str	x0, [sp, #72]
    13a4:	b	1430 <add_device+0xa8>
    13a8:	ldr	x0, [sp, #72]
    13ac:	ldr	x0, [x0]
    13b0:	ldr	x0, [x0, #8]
    13b4:	bl	3e88 <grub_efi_find_last_device_path>
    13b8:	mov	x19, x0
    13bc:	ldr	x0, [sp, #32]
    13c0:	ldr	x0, [x0, #8]
    13c4:	bl	3e88 <grub_efi_find_last_device_path>
    13c8:	mov	x1, x0
    13cc:	mov	x0, x19
    13d0:	bl	5100 <grub_efi_compare_device_paths>
    13d4:	str	w0, [sp, #68]
    13d8:	ldr	w0, [sp, #68]
    13dc:	cmp	w0, #0x0
    13e0:	b.ne	1408 <add_device+0x80>  // b.any
    13e4:	ldr	x0, [sp, #72]
    13e8:	ldr	x0, [x0]
    13ec:	ldr	x2, [x0, #8]
    13f0:	ldr	x0, [sp, #32]
    13f4:	ldr	x0, [x0, #8]
    13f8:	mov	x1, x0
    13fc:	mov	x0, x2
    1400:	bl	5100 <grub_efi_compare_device_paths>
    1404:	str	w0, [sp, #68]
    1408:	ldr	w0, [sp, #68]
    140c:	cmp	w0, #0x0
    1410:	b.eq	1490 <add_device+0x108>  // b.none
    1414:	ldr	w0, [sp, #68]
    1418:	cmp	w0, #0x0
    141c:	b.gt	1444 <add_device+0xbc>
    1420:	ldr	x0, [sp, #72]
    1424:	ldr	x0, [x0]
    1428:	add	x0, x0, #0x20
    142c:	str	x0, [sp, #72]
    1430:	ldr	x0, [sp, #72]
    1434:	ldr	x0, [x0]
    1438:	cmp	x0, #0x0
    143c:	b.ne	13a8 <add_device+0x20>  // b.any
    1440:	b	1448 <add_device+0xc0>
    1444:	nop
    1448:	mov	x0, #0x28                  	// #40
    144c:	bl	8348 <grub_malloc>
    1450:	str	x0, [sp, #56]
    1454:	ldr	x0, [sp, #56]
    1458:	cmp	x0, #0x0
    145c:	b.eq	1498 <add_device+0x110>  // b.none
    1460:	mov	x2, #0x28                  	// #40
    1464:	ldr	x1, [sp, #32]
    1468:	ldr	x0, [sp, #56]
    146c:	bl	f70 <grub_memcpy>
    1470:	ldr	x0, [sp, #72]
    1474:	ldr	x1, [x0]
    1478:	ldr	x0, [sp, #56]
    147c:	str	x1, [x0, #32]
    1480:	ldr	x0, [sp, #72]
    1484:	ldr	x1, [sp, #56]
    1488:	str	x1, [x0]
    148c:	b	149c <add_device+0x114>
    1490:	nop
    1494:	b	149c <add_device+0x114>
    1498:	nop
    149c:	ldr	x19, [sp, #16]
    14a0:	ldp	x29, x30, [sp], #80
    14a4:	ret

00000000000014a8 <name_devices>:
    14a8:	stp	x29, x30, [sp, #-128]!
    14ac:	mov	x29, sp
    14b0:	str	x0, [sp, #24]
    14b4:	ldr	x0, [sp, #24]
    14b8:	str	x0, [sp, #120]
    14bc:	b	15d8 <name_devices+0x130>
    14c0:	ldr	x0, [sp, #120]
    14c4:	ldr	x0, [x0, #16]
    14c8:	str	x0, [sp, #72]
    14cc:	ldr	x0, [sp, #72]
    14d0:	cmp	x0, #0x0
    14d4:	b.eq	15c0 <name_devices+0x118>  // b.none
    14d8:	ldr	x0, [sp, #72]
    14dc:	ldrb	w0, [x0]
    14e0:	and	w0, w0, #0x7f
    14e4:	cmp	w0, #0x4
    14e8:	b.ne	15cc <name_devices+0x124>  // b.any
    14ec:	str	wzr, [sp, #116]
    14f0:	ldr	x0, [sp, #72]
    14f4:	ldrb	w0, [x0, #1]
    14f8:	cmp	w0, #0x1
    14fc:	b.eq	150c <name_devices+0x64>  // b.none
    1500:	cmp	w0, #0x2
    1504:	b.eq	1514 <name_devices+0x6c>  // b.none
    1508:	b	15cc <name_devices+0x124>
    150c:	mov	w0, #0x1                   	// #1
    1510:	str	w0, [sp, #116]
    1514:	ldr	x1, [sp, #120]
    1518:	ldr	x0, [sp, #24]
    151c:	bl	11f0 <find_parent_device>
    1520:	str	x0, [sp, #64]
    1524:	ldr	x0, [sp, #64]
    1528:	cmp	x0, #0x0
    152c:	b.eq	15c8 <name_devices+0x120>  // b.none
    1530:	ldr	x1, [sp, #64]
    1534:	ldr	x0, [sp, #24]
    1538:	bl	11f0 <find_parent_device>
    153c:	str	x0, [sp, #56]
    1540:	ldr	x0, [sp, #56]
    1544:	cmp	x0, #0x0
    1548:	b.eq	1558 <name_devices+0xb0>  // b.none
    154c:	ldr	x0, [sp, #120]
    1550:	str	xzr, [x0, #16]
    1554:	b	15cc <name_devices+0x124>
    1558:	ldr	x0, [sp, #64]
    155c:	ldr	x0, [x0, #16]
    1560:	cmp	x0, #0x0
    1564:	b.ne	1574 <name_devices+0xcc>  // b.any
    1568:	ldr	x0, [sp, #120]
    156c:	str	xzr, [x0, #16]
    1570:	b	15cc <name_devices+0x124>
    1574:	ldr	w0, [sp, #116]
    1578:	cmp	w0, #0x0
    157c:	b.eq	1598 <name_devices+0xf0>  // b.none
    1580:	ldr	x1, [sp, #64]
    1584:	adrp	x0, 0 <_start>
    1588:	add	x0, x0, #0x0
    158c:	ldr	x0, [x0]
    1590:	bl	1388 <add_device>
    1594:	b	15ac <name_devices+0x104>
    1598:	ldr	x1, [sp, #64]
    159c:	adrp	x0, 0 <_start>
    15a0:	add	x0, x0, #0x0
    15a4:	ldr	x0, [x0]
    15a8:	bl	1388 <add_device>
    15ac:	ldr	x0, [sp, #64]
    15b0:	str	xzr, [x0, #16]
    15b4:	ldr	x0, [sp, #120]
    15b8:	str	xzr, [x0, #16]
    15bc:	b	15cc <name_devices+0x124>
    15c0:	nop
    15c4:	b	15cc <name_devices+0x124>
    15c8:	nop
    15cc:	ldr	x0, [sp, #120]
    15d0:	ldr	x0, [x0, #32]
    15d4:	str	x0, [sp, #120]
    15d8:	ldr	x0, [sp, #120]
    15dc:	cmp	x0, #0x0
    15e0:	b.ne	14c0 <name_devices+0x18>  // b.any
    15e4:	ldr	x0, [sp, #24]
    15e8:	str	x0, [sp, #120]
    15ec:	b	17c0 <name_devices+0x318>
    15f0:	str	wzr, [sp, #112]
    15f4:	ldr	x0, [sp, #120]
    15f8:	ldr	x0, [x0, #16]
    15fc:	str	x0, [sp, #104]
    1600:	ldr	x0, [sp, #104]
    1604:	cmp	x0, #0x0
    1608:	b.eq	17a8 <name_devices+0x300>  // b.none
    160c:	ldr	x0, [sp, #104]
    1610:	ldrb	w0, [x0]
    1614:	and	w0, w0, #0x7f
    1618:	cmp	w0, #0x4
    161c:	b.ne	16a8 <name_devices+0x200>  // b.any
    1620:	ldr	x0, [sp, #104]
    1624:	ldrb	w0, [x0, #1]
    1628:	cmp	w0, #0x3
    162c:	b.ne	16a8 <name_devices+0x200>  // b.any
    1630:	ldr	x0, [sp, #104]
    1634:	str	x0, [sp, #96]
    1638:	mov	w0, #0x85eb                	// #34283
    163c:	movk	w0, #0x2b05, lsl #16
    1640:	str	w0, [sp, #40]
    1644:	mov	w0, #0xffffd8b8            	// #-10056
    1648:	strh	w0, [sp, #44]
    164c:	mov	w0, #0x49a9                	// #18857
    1650:	strh	w0, [sp, #46]
    1654:	mov	x0, #0x8c8b                	// #35979
    1658:	movk	x0, #0x1be2, lsl #16
    165c:	movk	x0, #0xae01, lsl #32
    1660:	movk	x0, #0xb7f2, lsl #48
    1664:	str	x0, [sp, #48]
    1668:	ldr	x0, [sp, #96]
    166c:	ldrh	w0, [x0, #2]
    1670:	cmp	w0, #0x14
    1674:	b.ne	16a8 <name_devices+0x200>  // b.any
    1678:	ldr	x0, [sp, #96]
    167c:	add	x0, x0, #0x4
    1680:	add	x1, sp, #0x28
    1684:	mov	x2, #0x10                  	// #16
    1688:	bl	f5d0 <grub_memcmp>
    168c:	cmp	w0, #0x0
    1690:	b.ne	16a8 <name_devices+0x200>  // b.any
    1694:	ldr	x1, [sp, #120]
    1698:	ldr	x0, [sp, #24]
    169c:	bl	11f0 <find_parent_device>
    16a0:	cmp	x0, #0x0
    16a4:	b.ne	17b0 <name_devices+0x308>  // b.any
    16a8:	ldr	x0, [sp, #120]
    16ac:	ldr	x0, [x0, #24]
    16b0:	ldr	x0, [x0, #8]
    16b4:	str	x0, [sp, #88]
    16b8:	ldr	x0, [sp, #104]
    16bc:	ldrb	w0, [x0]
    16c0:	and	w0, w0, #0x7f
    16c4:	cmp	w0, #0x2
    16c8:	b.ne	1734 <name_devices+0x28c>  // b.any
    16cc:	ldr	x0, [sp, #104]
    16d0:	ldrb	w0, [x0, #1]
    16d4:	cmp	w0, #0x1
    16d8:	b.ne	1734 <name_devices+0x28c>  // b.any
    16dc:	ldr	x0, [sp, #104]
    16e0:	str	x0, [sp, #80]
    16e4:	ldr	x0, [sp, #80]
    16e8:	ldr	w1, [x0, #4]
    16ec:	mov	w0, #0x41d0                	// #16848
    16f0:	movk	w0, #0x604, lsl #16
    16f4:	cmp	w1, w0
    16f8:	b.eq	172c <name_devices+0x284>  // b.none
    16fc:	ldr	x0, [sp, #80]
    1700:	ldr	w1, [x0, #4]
    1704:	mov	w0, #0x41d0                	// #16848
    1708:	movk	w0, #0x700, lsl #16
    170c:	cmp	w1, w0
    1710:	b.eq	172c <name_devices+0x284>  // b.none
    1714:	ldr	x0, [sp, #80]
    1718:	ldr	w1, [x0, #4]
    171c:	mov	w0, #0x41d1                	// #16849
    1720:	movk	w0, #0x701, lsl #16
    1724:	cmp	w1, w0
    1728:	b.ne	1734 <name_devices+0x28c>  // b.any
    172c:	mov	w0, #0x1                   	// #1
    1730:	str	w0, [sp, #112]
    1734:	ldr	w0, [sp, #112]
    1738:	cmp	w0, #0x0
    173c:	b.eq	1758 <name_devices+0x2b0>  // b.none
    1740:	ldr	x1, [sp, #120]
    1744:	adrp	x0, 0 <_start>
    1748:	add	x0, x0, #0x0
    174c:	ldr	x0, [x0]
    1750:	bl	1388 <add_device>
    1754:	b	17b4 <name_devices+0x30c>
    1758:	ldr	x0, [sp, #88]
    175c:	ldrb	w0, [x0, #7]
    1760:	cmp	w0, #0x0
    1764:	b.eq	1790 <name_devices+0x2e8>  // b.none
    1768:	ldr	x0, [sp, #88]
    176c:	ldr	w0, [x0, #12]
    1770:	cmp	w0, #0x200
    1774:	b.ls	1790 <name_devices+0x2e8>  // b.plast
    1778:	ldr	x1, [sp, #120]
    177c:	adrp	x0, 0 <_start>
    1780:	add	x0, x0, #0x0
    1784:	ldr	x0, [x0]
    1788:	bl	1388 <add_device>
    178c:	b	17b4 <name_devices+0x30c>
    1790:	ldr	x1, [sp, #120]
    1794:	adrp	x0, 0 <_start>
    1798:	add	x0, x0, #0x0
    179c:	ldr	x0, [x0]
    17a0:	bl	1388 <add_device>
    17a4:	b	17b4 <name_devices+0x30c>
    17a8:	nop
    17ac:	b	17b4 <name_devices+0x30c>
    17b0:	nop
    17b4:	ldr	x0, [sp, #120]
    17b8:	ldr	x0, [x0, #32]
    17bc:	str	x0, [sp, #120]
    17c0:	ldr	x0, [sp, #120]
    17c4:	cmp	x0, #0x0
    17c8:	b.ne	15f0 <name_devices+0x148>  // b.any
    17cc:	nop
    17d0:	nop
    17d4:	ldp	x29, x30, [sp], #128
    17d8:	ret
    17dc:	nop
	...

00000000000017f8 <free_devices>:
    17f8:	stp	x29, x30, [sp, #-48]!
    17fc:	mov	x29, sp
    1800:	str	x0, [sp, #24]
    1804:	ldr	x0, [sp, #24]
    1808:	str	x0, [sp, #40]
    180c:	b	182c <free_devices+0x34>
    1810:	ldr	x0, [sp, #40]
    1814:	ldr	x0, [x0, #32]
    1818:	str	x0, [sp, #32]
    181c:	ldr	x0, [sp, #40]
    1820:	bl	83ac <grub_free>
    1824:	ldr	x0, [sp, #32]
    1828:	str	x0, [sp, #40]
    182c:	ldr	x0, [sp, #40]
    1830:	cmp	x0, #0x0
    1834:	b.ne	1810 <free_devices+0x18>  // b.any
    1838:	nop
    183c:	nop
    1840:	ldp	x29, x30, [sp], #48
    1844:	ret

0000000000001848 <enumerate_disks>:
    1848:	stp	x29, x30, [sp, #-32]!
    184c:	mov	x29, sp
    1850:	bl	1004 <make_devices>
    1854:	str	x0, [sp, #24]
    1858:	ldr	x0, [sp, #24]
    185c:	cmp	x0, #0x0
    1860:	b.eq	1878 <enumerate_disks+0x30>  // b.none
    1864:	ldr	x0, [sp, #24]
    1868:	bl	14a8 <name_devices>
    186c:	ldr	x0, [sp, #24]
    1870:	bl	17f8 <free_devices>
    1874:	b	187c <enumerate_disks+0x34>
    1878:	nop
    187c:	ldp	x29, x30, [sp], #32
    1880:	ret

0000000000001884 <grub_efidisk_iterate>:
    1884:	stp	x29, x30, [sp, #-80]!
    1888:	mov	x29, sp
    188c:	str	x0, [sp, #40]
    1890:	str	x1, [sp, #32]
    1894:	str	w2, [sp, #28]
    1898:	ldr	w0, [sp, #28]
    189c:	cmp	w0, #0x0
    18a0:	b.eq	18b4 <grub_efidisk_iterate+0x30>  // b.none
    18a4:	ldr	w0, [sp, #28]
    18a8:	cmp	w0, #0x1
    18ac:	b.eq	196c <grub_efidisk_iterate+0xe8>  // b.none
    18b0:	b	1ad8 <grub_efidisk_iterate+0x254>
    18b4:	adrp	x0, 0 <_start>
    18b8:	add	x0, x0, #0x0
    18bc:	ldr	x0, [x0]
    18c0:	ldr	x0, [x0]
    18c4:	str	x0, [sp, #72]
    18c8:	str	wzr, [sp, #68]
    18cc:	b	195c <grub_efidisk_iterate+0xd8>
    18d0:	add	x4, sp, #0x30
    18d4:	ldr	w3, [sp, #68]
    18d8:	adrp	x0, 0 <_start>
    18dc:	add	x0, x0, #0x0
    18e0:	ldr	x2, [x0]
    18e4:	mov	x1, #0x10                  	// #16
    18e8:	mov	x0, x4
    18ec:	bl	1159c <grub_snprintf>
    18f0:	add	x0, sp, #0x30
    18f4:	mov	x4, x0
    18f8:	adrp	x0, 0 <_start>
    18fc:	add	x0, x0, #0x0
    1900:	ldr	x3, [x0]
    1904:	adrp	x0, 0 <_start>
    1908:	add	x0, x0, #0x0
    190c:	ldr	x2, [x0]
    1910:	mov	w1, #0x19d                 	// #413
    1914:	adrp	x0, 0 <_start>
    1918:	add	x0, x0, #0x0
    191c:	ldr	x0, [x0]
    1920:	bl	f328 <grub_real_dprintf>
    1924:	add	x0, sp, #0x30
    1928:	ldr	x2, [sp, #40]
    192c:	ldr	x1, [sp, #32]
    1930:	blr	x2
    1934:	cmp	w0, #0x0
    1938:	b.eq	1944 <grub_efidisk_iterate+0xc0>  // b.none
    193c:	mov	w0, #0x1                   	// #1
    1940:	b	1ae4 <grub_efidisk_iterate+0x260>
    1944:	ldr	x0, [sp, #72]
    1948:	ldr	x0, [x0, #32]
    194c:	str	x0, [sp, #72]
    1950:	ldr	w0, [sp, #68]
    1954:	add	w0, w0, #0x1
    1958:	str	w0, [sp, #68]
    195c:	ldr	x0, [sp, #72]
    1960:	cmp	x0, #0x0
    1964:	b.ne	18d0 <grub_efidisk_iterate+0x4c>  // b.any
    1968:	b	1ae0 <grub_efidisk_iterate+0x25c>
    196c:	adrp	x0, 0 <_start>
    1970:	add	x0, x0, #0x0
    1974:	ldr	x0, [x0]
    1978:	ldr	x0, [x0]
    197c:	str	x0, [sp, #72]
    1980:	str	wzr, [sp, #68]
    1984:	b	1a14 <grub_efidisk_iterate+0x190>
    1988:	add	x4, sp, #0x30
    198c:	ldr	w3, [sp, #68]
    1990:	adrp	x0, 0 <_start>
    1994:	add	x0, x0, #0x0
    1998:	ldr	x2, [x0]
    199c:	mov	x1, #0x10                  	// #16
    19a0:	mov	x0, x4
    19a4:	bl	1159c <grub_snprintf>
    19a8:	add	x0, sp, #0x30
    19ac:	mov	x4, x0
    19b0:	adrp	x0, 0 <_start>
    19b4:	add	x0, x0, #0x0
    19b8:	ldr	x3, [x0]
    19bc:	adrp	x0, 0 <_start>
    19c0:	add	x0, x0, #0x0
    19c4:	ldr	x2, [x0]
    19c8:	mov	w1, #0x1a6                 	// #422
    19cc:	adrp	x0, 0 <_start>
    19d0:	add	x0, x0, #0x0
    19d4:	ldr	x0, [x0]
    19d8:	bl	f328 <grub_real_dprintf>
    19dc:	add	x0, sp, #0x30
    19e0:	ldr	x2, [sp, #40]
    19e4:	ldr	x1, [sp, #32]
    19e8:	blr	x2
    19ec:	cmp	w0, #0x0
    19f0:	b.eq	19fc <grub_efidisk_iterate+0x178>  // b.none
    19f4:	mov	w0, #0x1                   	// #1
    19f8:	b	1ae4 <grub_efidisk_iterate+0x260>
    19fc:	ldr	x0, [sp, #72]
    1a00:	ldr	x0, [x0, #32]
    1a04:	str	x0, [sp, #72]
    1a08:	ldr	w0, [sp, #68]
    1a0c:	add	w0, w0, #0x1
    1a10:	str	w0, [sp, #68]
    1a14:	ldr	x0, [sp, #72]
    1a18:	cmp	x0, #0x0
    1a1c:	b.ne	1988 <grub_efidisk_iterate+0x104>  // b.any
    1a20:	adrp	x0, 0 <_start>
    1a24:	add	x0, x0, #0x0
    1a28:	ldr	x0, [x0]
    1a2c:	ldr	x0, [x0]
    1a30:	str	x0, [sp, #72]
    1a34:	str	wzr, [sp, #68]
    1a38:	b	1ac8 <grub_efidisk_iterate+0x244>
    1a3c:	add	x4, sp, #0x30
    1a40:	ldr	w3, [sp, #68]
    1a44:	adrp	x0, 0 <_start>
    1a48:	add	x0, x0, #0x0
    1a4c:	ldr	x2, [x0]
    1a50:	mov	x1, #0x10                  	// #16
    1a54:	mov	x0, x4
    1a58:	bl	1159c <grub_snprintf>
    1a5c:	add	x0, sp, #0x30
    1a60:	mov	x4, x0
    1a64:	adrp	x0, 0 <_start>
    1a68:	add	x0, x0, #0x0
    1a6c:	ldr	x3, [x0]
    1a70:	adrp	x0, 0 <_start>
    1a74:	add	x0, x0, #0x0
    1a78:	ldr	x2, [x0]
    1a7c:	mov	w1, #0x1ae                 	// #430
    1a80:	adrp	x0, 0 <_start>
    1a84:	add	x0, x0, #0x0
    1a88:	ldr	x0, [x0]
    1a8c:	bl	f328 <grub_real_dprintf>
    1a90:	add	x0, sp, #0x30
    1a94:	ldr	x2, [sp, #40]
    1a98:	ldr	x1, [sp, #32]
    1a9c:	blr	x2
    1aa0:	cmp	w0, #0x0
    1aa4:	b.eq	1ab0 <grub_efidisk_iterate+0x22c>  // b.none
    1aa8:	mov	w0, #0x1                   	// #1
    1aac:	b	1ae4 <grub_efidisk_iterate+0x260>
    1ab0:	ldr	x0, [sp, #72]
    1ab4:	ldr	x0, [x0, #32]
    1ab8:	str	x0, [sp, #72]
    1abc:	ldr	w0, [sp, #68]
    1ac0:	add	w0, w0, #0x1
    1ac4:	str	w0, [sp, #68]
    1ac8:	ldr	x0, [sp, #72]
    1acc:	cmp	x0, #0x0
    1ad0:	b.ne	1a3c <grub_efidisk_iterate+0x1b8>  // b.any
    1ad4:	b	1ae0 <grub_efidisk_iterate+0x25c>
    1ad8:	mov	w0, #0x0                   	// #0
    1adc:	b	1ae4 <grub_efidisk_iterate+0x260>
    1ae0:	mov	w0, #0x0                   	// #0
    1ae4:	ldp	x29, x30, [sp], #80
    1ae8:	ret
    1aec:	nop
	...

0000000000001b38 <get_drive_number>:
    1b38:	stp	x29, x30, [sp, #-48]!
    1b3c:	mov	x29, sp
    1b40:	str	x0, [sp, #24]
    1b44:	ldr	x0, [sp, #24]
    1b48:	ldrb	w0, [x0]
    1b4c:	cmp	w0, #0x66
    1b50:	b.eq	1b74 <get_drive_number+0x3c>  // b.none
    1b54:	ldr	x0, [sp, #24]
    1b58:	ldrb	w0, [x0]
    1b5c:	cmp	w0, #0x68
    1b60:	b.eq	1b74 <get_drive_number+0x3c>  // b.none
    1b64:	ldr	x0, [sp, #24]
    1b68:	ldrb	w0, [x0]
    1b6c:	cmp	w0, #0x63
    1b70:	b.ne	1bc0 <get_drive_number+0x88>  // b.any
    1b74:	ldr	x0, [sp, #24]
    1b78:	add	x0, x0, #0x1
    1b7c:	ldrb	w0, [x0]
    1b80:	cmp	w0, #0x64
    1b84:	b.ne	1bc0 <get_drive_number+0x88>  // b.any
    1b88:	ldr	x0, [sp, #24]
    1b8c:	add	x0, x0, #0x2
    1b90:	mov	w2, #0xa                   	// #10
    1b94:	mov	x1, #0x0                   	// #0
    1b98:	bl	f9ec <grub_strtoul>
    1b9c:	str	x0, [sp, #40]
    1ba0:	adrp	x0, 0 <_start>
    1ba4:	add	x0, x0, #0x0
    1ba8:	ldr	x0, [x0]
    1bac:	ldr	w0, [x0]
    1bb0:	cmp	w0, #0x0
    1bb4:	b.ne	1bc8 <get_drive_number+0x90>  // b.any
    1bb8:	ldr	x0, [sp, #40]
    1bbc:	b	1be4 <get_drive_number+0xac>
    1bc0:	nop
    1bc4:	b	1bcc <get_drive_number+0x94>
    1bc8:	nop
    1bcc:	adrp	x0, 0 <_start>
    1bd0:	add	x0, x0, #0x0
    1bd4:	ldr	x1, [x0]
    1bd8:	mov	w0, #0xc                   	// #12
    1bdc:	bl	ce54 <grub_error>
    1be0:	mov	w0, #0xffffffff            	// #-1
    1be4:	ldp	x29, x30, [sp], #48
    1be8:	ret
    1bec:	nop
	...

0000000000001c00 <get_device>:
    1c00:	sub	sp, sp, #0x20
    1c04:	str	x0, [sp, #8]
    1c08:	str	w1, [sp, #4]
    1c0c:	ldr	x0, [sp, #8]
    1c10:	str	x0, [sp, #24]
    1c14:	b	1c30 <get_device+0x30>
    1c18:	ldr	x0, [sp, #24]
    1c1c:	ldr	x0, [x0, #32]
    1c20:	str	x0, [sp, #24]
    1c24:	ldr	w0, [sp, #4]
    1c28:	sub	w0, w0, #0x1
    1c2c:	str	w0, [sp, #4]
    1c30:	ldr	x0, [sp, #24]
    1c34:	cmp	x0, #0x0
    1c38:	b.eq	1c48 <get_device+0x48>  // b.none
    1c3c:	ldr	w0, [sp, #4]
    1c40:	cmp	w0, #0x0
    1c44:	b.ne	1c18 <get_device+0x18>  // b.any
    1c48:	ldr	w0, [sp, #4]
    1c4c:	cmp	w0, #0x0
    1c50:	b.ne	1c5c <get_device+0x5c>  // b.any
    1c54:	ldr	x0, [sp, #24]
    1c58:	b	1c60 <get_device+0x60>
    1c5c:	mov	x0, #0x0                   	// #0
    1c60:	add	sp, sp, #0x20
    1c64:	ret

0000000000001c68 <grub_efidisk_open>:
    1c68:	stp	x29, x30, [sp, #-64]!
    1c6c:	mov	x29, sp
    1c70:	str	x0, [sp, #24]
    1c74:	str	x1, [sp, #16]
    1c78:	str	xzr, [sp, #56]
    1c7c:	ldr	x4, [sp, #24]
    1c80:	adrp	x0, 0 <_start>
    1c84:	add	x0, x0, #0x0
    1c88:	ldr	x3, [x0]
    1c8c:	adrp	x0, 0 <_start>
    1c90:	add	x0, x0, #0x0
    1c94:	ldr	x2, [x0]
    1c98:	mov	w1, #0x1e2                 	// #482
    1c9c:	adrp	x0, 0 <_start>
    1ca0:	add	x0, x0, #0x0
    1ca4:	ldr	x0, [x0]
    1ca8:	bl	f328 <grub_real_dprintf>
    1cac:	ldr	x0, [sp, #24]
    1cb0:	bl	1b38 <get_drive_number>
    1cb4:	str	w0, [sp, #52]
    1cb8:	ldr	w0, [sp, #52]
    1cbc:	cmp	w0, #0x0
    1cc0:	b.ge	1cd8 <grub_efidisk_open+0x70>  // b.tcont
    1cc4:	adrp	x0, 0 <_start>
    1cc8:	add	x0, x0, #0x0
    1ccc:	ldr	x0, [x0]
    1cd0:	ldr	w0, [x0]
    1cd4:	b	1f44 <grub_efidisk_open+0x2dc>
    1cd8:	ldr	x0, [sp, #24]
    1cdc:	ldrb	w0, [x0]
    1ce0:	cmp	w0, #0x68
    1ce4:	b.eq	1d40 <grub_efidisk_open+0xd8>  // b.none
    1ce8:	cmp	w0, #0x68
    1cec:	b.gt	1d60 <grub_efidisk_open+0xf8>
    1cf0:	cmp	w0, #0x63
    1cf4:	b.eq	1d20 <grub_efidisk_open+0xb8>  // b.none
    1cf8:	cmp	w0, #0x66
    1cfc:	b.ne	1d60 <grub_efidisk_open+0xf8>  // b.any
    1d00:	adrp	x0, 0 <_start>
    1d04:	add	x0, x0, #0x0
    1d08:	ldr	x0, [x0]
    1d0c:	ldr	x0, [x0]
    1d10:	ldr	w1, [sp, #52]
    1d14:	bl	1c00 <get_device>
    1d18:	str	x0, [sp, #56]
    1d1c:	b	1d64 <grub_efidisk_open+0xfc>
    1d20:	adrp	x0, 0 <_start>
    1d24:	add	x0, x0, #0x0
    1d28:	ldr	x0, [x0]
    1d2c:	ldr	x0, [x0]
    1d30:	ldr	w1, [sp, #52]
    1d34:	bl	1c00 <get_device>
    1d38:	str	x0, [sp, #56]
    1d3c:	b	1d64 <grub_efidisk_open+0xfc>
    1d40:	adrp	x0, 0 <_start>
    1d44:	add	x0, x0, #0x0
    1d48:	ldr	x0, [x0]
    1d4c:	ldr	x0, [x0]
    1d50:	ldr	w1, [sp, #52]
    1d54:	bl	1c00 <get_device>
    1d58:	str	x0, [sp, #56]
    1d5c:	b	1d64 <grub_efidisk_open+0xfc>
    1d60:	nop
    1d64:	ldr	x0, [sp, #56]
    1d68:	cmp	x0, #0x0
    1d6c:	b.ne	1d88 <grub_efidisk_open+0x120>  // b.any
    1d70:	adrp	x0, 0 <_start>
    1d74:	add	x0, x0, #0x0
    1d78:	ldr	x1, [x0]
    1d7c:	mov	w0, #0xc                   	// #12
    1d80:	bl	ce54 <grub_error>
    1d84:	b	1f44 <grub_efidisk_open+0x2dc>
    1d88:	ldr	w0, [sp, #52]
    1d8c:	lsl	w0, w0, #8
    1d90:	ldr	x1, [sp, #24]
    1d94:	ldrb	w1, [x1]
    1d98:	orr	w0, w0, w1
    1d9c:	sxtw	x1, w0
    1da0:	ldr	x0, [sp, #16]
    1da4:	str	x1, [x0, #32]
    1da8:	ldr	x0, [sp, #56]
    1dac:	ldr	x0, [x0, #24]
    1db0:	ldr	x0, [x0, #8]
    1db4:	str	x0, [sp, #40]
    1db8:	ldr	x0, [sp, #40]
    1dbc:	ldr	x1, [x0, #24]
    1dc0:	ldr	x0, [sp, #40]
    1dc4:	ldr	w2, [x0, #12]
    1dc8:	ldr	x0, [sp, #40]
    1dcc:	ldr	w0, [x0, #16]
    1dd0:	mov	w7, w0
    1dd4:	mov	w6, w2
    1dd8:	mov	x5, x1
    1ddc:	ldr	x4, [sp, #40]
    1de0:	adrp	x0, 0 <_start>
    1de4:	add	x0, x0, #0x0
    1de8:	ldr	x3, [x0]
    1dec:	adrp	x0, 0 <_start>
    1df0:	add	x0, x0, #0x0
    1df4:	ldr	x2, [x0]
    1df8:	mov	w1, #0x1ff                 	// #511
    1dfc:	adrp	x0, 0 <_start>
    1e00:	add	x0, x0, #0x0
    1e04:	ldr	x0, [x0]
    1e08:	bl	f328 <grub_real_dprintf>
    1e0c:	ldr	x0, [sp, #40]
    1e10:	ldr	w1, [x0, #16]
    1e14:	ldr	x0, [sp, #40]
    1e18:	ldr	w0, [x0, #16]
    1e1c:	sub	w0, w0, #0x1
    1e20:	and	w0, w1, w0
    1e24:	cmp	w0, #0x0
    1e28:	b.eq	1e50 <grub_efidisk_open+0x1e8>  // b.none
    1e2c:	ldr	x0, [sp, #40]
    1e30:	ldr	w0, [x0, #16]
    1e34:	mov	w2, w0
    1e38:	adrp	x0, 0 <_start>
    1e3c:	add	x0, x0, #0x0
    1e40:	ldr	x1, [x0]
    1e44:	mov	w0, #0x1d                  	// #29
    1e48:	bl	ce54 <grub_error>
    1e4c:	b	1f44 <grub_efidisk_open+0x2dc>
    1e50:	ldr	x0, [sp, #40]
    1e54:	ldr	x0, [x0, #24]
    1e58:	add	x1, x0, #0x1
    1e5c:	ldr	x0, [sp, #16]
    1e60:	str	x1, [x0, #16]
    1e64:	ldr	x0, [sp, #16]
    1e68:	mov	w1, #0x14                  	// #20
    1e6c:	str	w1, [x0, #28]
    1e70:	ldr	x0, [sp, #40]
    1e74:	ldr	w1, [x0, #12]
    1e78:	ldr	x0, [sp, #40]
    1e7c:	ldr	w0, [x0, #12]
    1e80:	sub	w0, w0, #0x1
    1e84:	and	w0, w1, w0
    1e88:	cmp	w0, #0x0
    1e8c:	b.ne	1ea0 <grub_efidisk_open+0x238>  // b.any
    1e90:	ldr	x0, [sp, #40]
    1e94:	ldr	w0, [x0, #12]
    1e98:	cmp	w0, #0x0
    1e9c:	b.ne	1ec4 <grub_efidisk_open+0x25c>  // b.any
    1ea0:	ldr	x0, [sp, #40]
    1ea4:	ldr	w0, [x0, #12]
    1ea8:	mov	w2, w0
    1eac:	adrp	x0, 0 <_start>
    1eb0:	add	x0, x0, #0x0
    1eb4:	ldr	x1, [x0]
    1eb8:	mov	w0, #0x1d                  	// #29
    1ebc:	bl	ce54 <grub_error>
    1ec0:	b	1f44 <grub_efidisk_open+0x2dc>
    1ec4:	ldr	x0, [sp, #16]
    1ec8:	str	wzr, [x0, #24]
    1ecc:	b	1ee4 <grub_efidisk_open+0x27c>
    1ed0:	ldr	x0, [sp, #16]
    1ed4:	ldr	w0, [x0, #24]
    1ed8:	add	w1, w0, #0x1
    1edc:	ldr	x0, [sp, #16]
    1ee0:	str	w1, [x0, #24]
    1ee4:	ldr	x0, [sp, #16]
    1ee8:	ldr	w0, [x0, #24]
    1eec:	mov	w1, #0x1                   	// #1
    1ef0:	lsl	w1, w1, w0
    1ef4:	ldr	x0, [sp, #40]
    1ef8:	ldr	w0, [x0, #12]
    1efc:	cmp	w1, w0
    1f00:	b.cc	1ed0 <grub_efidisk_open+0x268>  // b.lo, b.ul, b.last
    1f04:	ldr	x0, [sp, #16]
    1f08:	ldr	x1, [sp, #56]
    1f0c:	str	x1, [x0, #64]
    1f10:	ldr	x4, [sp, #24]
    1f14:	adrp	x0, 0 <_start>
    1f18:	add	x0, x0, #0x0
    1f1c:	ldr	x3, [x0]
    1f20:	adrp	x0, 0 <_start>
    1f24:	add	x0, x0, #0x0
    1f28:	ldr	x2, [x0]
    1f2c:	mov	w1, #0x213                 	// #531
    1f30:	adrp	x0, 0 <_start>
    1f34:	add	x0, x0, #0x0
    1f38:	ldr	x0, [x0]
    1f3c:	bl	f328 <grub_real_dprintf>
    1f40:	mov	w0, #0x0                   	// #0
    1f44:	ldp	x29, x30, [sp], #64
    1f48:	ret
    1f4c:	nop
	...

0000000000001fb0 <grub_efidisk_close>:
    1fb0:	stp	x29, x30, [sp, #-32]!
    1fb4:	mov	x29, sp
    1fb8:	str	x0, [sp, #24]
    1fbc:	ldr	x0, [sp, #24]
    1fc0:	ldr	x0, [x0]
    1fc4:	mov	x4, x0
    1fc8:	adrp	x0, 0 <_start>
    1fcc:	add	x0, x0, #0x0
    1fd0:	ldr	x3, [x0]
    1fd4:	adrp	x0, 0 <_start>
    1fd8:	add	x0, x0, #0x0
    1fdc:	ldr	x2, [x0]
    1fe0:	mov	w1, #0x21c                 	// #540
    1fe4:	adrp	x0, 0 <_start>
    1fe8:	add	x0, x0, #0x0
    1fec:	ldr	x0, [x0]
    1ff0:	bl	f328 <grub_real_dprintf>
    1ff4:	nop
    1ff8:	ldp	x29, x30, [sp], #32
    1ffc:	ret
	...

0000000000002018 <grub_efidisk_readwrite>:
    2018:	stp	x29, x30, [sp, #-112]!
    201c:	mov	x29, sp
    2020:	str	x0, [sp, #56]
    2024:	str	x1, [sp, #48]
    2028:	str	x2, [sp, #40]
    202c:	str	x3, [sp, #32]
    2030:	str	w4, [sp, #28]
    2034:	ldr	x0, [sp, #56]
    2038:	ldr	x0, [x0, #64]
    203c:	str	x0, [sp, #96]
    2040:	ldr	x0, [sp, #96]
    2044:	ldr	x0, [x0, #24]
    2048:	str	x0, [sp, #88]
    204c:	ldr	x0, [sp, #88]
    2050:	ldr	x0, [x0, #8]
    2054:	ldr	w0, [x0, #16]
    2058:	cmp	w0, #0x0
    205c:	b.eq	2074 <grub_efidisk_readwrite+0x5c>  // b.none
    2060:	ldr	x0, [sp, #88]
    2064:	ldr	x0, [x0, #8]
    2068:	ldr	w0, [x0, #16]
    206c:	mov	w0, w0
    2070:	b	2078 <grub_efidisk_readwrite+0x60>
    2074:	mov	x0, #0x1                   	// #1
    2078:	str	x0, [sp, #80]
    207c:	ldr	x0, [sp, #56]
    2080:	ldr	w0, [x0, #24]
    2084:	ldr	x1, [sp, #40]
    2088:	lsl	x0, x1, x0
    208c:	str	x0, [sp, #72]
    2090:	ldr	x0, [sp, #80]
    2094:	sub	x1, x0, #0x1
    2098:	ldr	x0, [sp, #32]
    209c:	and	x0, x1, x0
    20a0:	cmp	x0, #0x0
    20a4:	b.eq	20f0 <grub_efidisk_readwrite+0xd8>  // b.none
    20a8:	ldr	x1, [sp, #72]
    20ac:	ldr	x0, [sp, #80]
    20b0:	bl	81f0 <grub_memalign>
    20b4:	str	x0, [sp, #104]
    20b8:	ldr	x0, [sp, #104]
    20bc:	cmp	x0, #0x0
    20c0:	b.ne	20d0 <grub_efidisk_readwrite+0xb8>  // b.any
    20c4:	mov	x0, #0x9                   	// #9
    20c8:	movk	x0, #0x8000, lsl #48
    20cc:	b	2180 <grub_efidisk_readwrite+0x168>
    20d0:	ldr	w0, [sp, #28]
    20d4:	cmp	w0, #0x0
    20d8:	b.eq	20f8 <grub_efidisk_readwrite+0xe0>  // b.none
    20dc:	ldr	x2, [sp, #72]
    20e0:	ldr	x1, [sp, #32]
    20e4:	ldr	x0, [sp, #104]
    20e8:	bl	f70 <grub_memcpy>
    20ec:	b	20f8 <grub_efidisk_readwrite+0xe0>
    20f0:	ldr	x0, [sp, #32]
    20f4:	str	x0, [sp, #104]
    20f8:	ldr	w0, [sp, #28]
    20fc:	cmp	w0, #0x0
    2100:	b.eq	2110 <grub_efidisk_readwrite+0xf8>  // b.none
    2104:	ldr	x0, [sp, #88]
    2108:	ldr	x5, [x0, #32]
    210c:	b	2118 <grub_efidisk_readwrite+0x100>
    2110:	ldr	x0, [sp, #88]
    2114:	ldr	x5, [x0, #24]
    2118:	ldr	x0, [sp, #88]
    211c:	ldr	x0, [x0, #8]
    2120:	ldr	w0, [x0]
    2124:	ldr	x4, [sp, #104]
    2128:	ldr	x3, [sp, #72]
    212c:	ldr	x2, [sp, #48]
    2130:	mov	w1, w0
    2134:	ldr	x0, [sp, #88]
    2138:	blr	x5
    213c:	str	x0, [sp, #64]
    2140:	ldr	x0, [sp, #80]
    2144:	sub	x1, x0, #0x1
    2148:	ldr	x0, [sp, #32]
    214c:	and	x0, x1, x0
    2150:	cmp	x0, #0x0
    2154:	b.eq	217c <grub_efidisk_readwrite+0x164>  // b.none
    2158:	ldr	w0, [sp, #28]
    215c:	cmp	w0, #0x0
    2160:	b.ne	2174 <grub_efidisk_readwrite+0x15c>  // b.any
    2164:	ldr	x2, [sp, #72]
    2168:	ldr	x1, [sp, #104]
    216c:	ldr	x0, [sp, #32]
    2170:	bl	f70 <grub_memcpy>
    2174:	ldr	x0, [sp, #104]
    2178:	bl	83ac <grub_free>
    217c:	ldr	x0, [sp, #64]
    2180:	ldp	x29, x30, [sp], #112
    2184:	ret

0000000000002188 <grub_efidisk_read>:
    2188:	stp	x29, x30, [sp, #-64]!
    218c:	mov	x29, sp
    2190:	str	x0, [sp, #40]
    2194:	str	x1, [sp, #32]
    2198:	str	x2, [sp, #24]
    219c:	str	x3, [sp, #16]
    21a0:	ldr	x0, [sp, #40]
    21a4:	ldr	x0, [x0]
    21a8:	mov	x6, x0
    21ac:	ldr	x5, [sp, #32]
    21b0:	ldr	x4, [sp, #24]
    21b4:	adrp	x0, 0 <_start>
    21b8:	add	x0, x0, #0x0
    21bc:	ldr	x3, [x0]
    21c0:	adrp	x0, 0 <_start>
    21c4:	add	x0, x0, #0x0
    21c8:	ldr	x2, [x0]
    21cc:	mov	w1, #0x251                 	// #593
    21d0:	adrp	x0, 0 <_start>
    21d4:	add	x0, x0, #0x0
    21d8:	ldr	x0, [x0]
    21dc:	bl	f328 <grub_real_dprintf>
    21e0:	mov	w4, #0x0                   	// #0
    21e4:	ldr	x3, [sp, #16]
    21e8:	ldr	x2, [sp, #24]
    21ec:	ldr	x1, [sp, #32]
    21f0:	ldr	x0, [sp, #40]
    21f4:	bl	2018 <grub_efidisk_readwrite>
    21f8:	str	x0, [sp, #56]
    21fc:	ldr	x1, [sp, #56]
    2200:	mov	x0, #0xc                   	// #12
    2204:	movk	x0, #0x8000, lsl #48
    2208:	cmp	x1, x0
    220c:	b.ne	2234 <grub_efidisk_read+0xac>  // b.any
    2210:	ldr	x0, [sp, #40]
    2214:	ldr	x0, [x0]
    2218:	mov	x2, x0
    221c:	adrp	x0, 0 <_start>
    2220:	add	x0, x0, #0x0
    2224:	ldr	x1, [x0]
    2228:	mov	w0, #0xb                   	// #11
    222c:	bl	ce54 <grub_error>
    2230:	b	226c <grub_efidisk_read+0xe4>
    2234:	ldr	x0, [sp, #56]
    2238:	cmp	x0, #0x0
    223c:	b.eq	2268 <grub_efidisk_read+0xe0>  // b.none
    2240:	ldr	x0, [sp, #40]
    2244:	ldr	x0, [x0]
    2248:	mov	x3, x0
    224c:	ldr	x2, [sp, #32]
    2250:	adrp	x0, 0 <_start>
    2254:	add	x0, x0, #0x0
    2258:	ldr	x1, [x0]
    225c:	mov	w0, #0xe                   	// #14
    2260:	bl	ce54 <grub_error>
    2264:	b	226c <grub_efidisk_read+0xe4>
    2268:	mov	w0, #0x0                   	// #0
    226c:	ldp	x29, x30, [sp], #64
    2270:	ret
    2274:	nop
	...

00000000000022a0 <grub_efidisk_write>:
    22a0:	stp	x29, x30, [sp, #-64]!
    22a4:	mov	x29, sp
    22a8:	str	x0, [sp, #40]
    22ac:	str	x1, [sp, #32]
    22b0:	str	x2, [sp, #24]
    22b4:	str	x3, [sp, #16]
    22b8:	ldr	x0, [sp, #40]
    22bc:	ldr	x0, [x0]
    22c0:	mov	x6, x0
    22c4:	ldr	x5, [sp, #32]
    22c8:	ldr	x4, [sp, #24]
    22cc:	adrp	x0, 0 <_start>
    22d0:	add	x0, x0, #0x0
    22d4:	ldr	x3, [x0]
    22d8:	adrp	x0, 0 <_start>
    22dc:	add	x0, x0, #0x0
    22e0:	ldr	x2, [x0]
    22e4:	mov	w1, #0x268                 	// #616
    22e8:	adrp	x0, 0 <_start>
    22ec:	add	x0, x0, #0x0
    22f0:	ldr	x0, [x0]
    22f4:	bl	f328 <grub_real_dprintf>
    22f8:	mov	w4, #0x1                   	// #1
    22fc:	ldr	x3, [sp, #16]
    2300:	ldr	x2, [sp, #24]
    2304:	ldr	x1, [sp, #32]
    2308:	ldr	x0, [sp, #40]
    230c:	bl	2018 <grub_efidisk_readwrite>
    2310:	str	x0, [sp, #56]
    2314:	ldr	x1, [sp, #56]
    2318:	mov	x0, #0xc                   	// #12
    231c:	movk	x0, #0x8000, lsl #48
    2320:	cmp	x1, x0
    2324:	b.ne	234c <grub_efidisk_write+0xac>  // b.any
    2328:	ldr	x0, [sp, #40]
    232c:	ldr	x0, [x0]
    2330:	mov	x2, x0
    2334:	adrp	x0, 0 <_start>
    2338:	add	x0, x0, #0x0
    233c:	ldr	x1, [x0]
    2340:	mov	w0, #0xb                   	// #11
    2344:	bl	ce54 <grub_error>
    2348:	b	2384 <grub_efidisk_write+0xe4>
    234c:	ldr	x0, [sp, #56]
    2350:	cmp	x0, #0x0
    2354:	b.eq	2380 <grub_efidisk_write+0xe0>  // b.none
    2358:	ldr	x0, [sp, #40]
    235c:	ldr	x0, [x0]
    2360:	mov	x3, x0
    2364:	ldr	x2, [sp, #32]
    2368:	adrp	x0, 0 <_start>
    236c:	add	x0, x0, #0x0
    2370:	ldr	x1, [x0]
    2374:	mov	w0, #0xf                   	// #15
    2378:	bl	ce54 <grub_error>
    237c:	b	2384 <grub_efidisk_write+0xe4>
    2380:	mov	w0, #0x0                   	// #0
    2384:	ldp	x29, x30, [sp], #64
    2388:	ret
    238c:	nop
	...

00000000000023b8 <grub_efidisk_fini>:
    23b8:	stp	x29, x30, [sp, #-16]!
    23bc:	mov	x29, sp
    23c0:	adrp	x0, 0 <_start>
    23c4:	add	x0, x0, #0x0
    23c8:	ldr	x0, [x0]
    23cc:	ldr	x0, [x0]
    23d0:	bl	17f8 <free_devices>
    23d4:	adrp	x0, 0 <_start>
    23d8:	add	x0, x0, #0x0
    23dc:	ldr	x0, [x0]
    23e0:	ldr	x0, [x0]
    23e4:	bl	17f8 <free_devices>
    23e8:	adrp	x0, 0 <_start>
    23ec:	add	x0, x0, #0x0
    23f0:	ldr	x0, [x0]
    23f4:	ldr	x0, [x0]
    23f8:	bl	17f8 <free_devices>
    23fc:	adrp	x0, 0 <_start>
    2400:	add	x0, x0, #0x0
    2404:	ldr	x0, [x0]
    2408:	str	xzr, [x0]
    240c:	adrp	x0, 0 <_start>
    2410:	add	x0, x0, #0x0
    2414:	ldr	x0, [x0]
    2418:	str	xzr, [x0]
    241c:	adrp	x0, 0 <_start>
    2420:	add	x0, x0, #0x0
    2424:	ldr	x0, [x0]
    2428:	str	xzr, [x0]
    242c:	adrp	x0, 0 <_start>
    2430:	add	x0, x0, #0x0
    2434:	ldr	x0, [x0]
    2438:	bl	9c88 <grub_disk_dev_unregister>
    243c:	nop
    2440:	ldp	x29, x30, [sp], #16
    2444:	ret
	...

0000000000002468 <grub_efidisk_init>:
    2468:	stp	x29, x30, [sp, #-16]!
    246c:	mov	x29, sp
    2470:	adrp	x0, 0 <_start>
    2474:	add	x0, x0, #0x0
    2478:	ldr	x0, [x0]
    247c:	adrp	x1, 0 <_start>
    2480:	add	x1, x1, #0x0
    2484:	ldr	x1, [x1]
    2488:	str	x1, [x0]
    248c:	bl	1848 <enumerate_disks>
    2490:	adrp	x0, 0 <_start>
    2494:	add	x0, x0, #0x0
    2498:	ldr	x0, [x0]
    249c:	bl	9c40 <grub_disk_dev_register>
    24a0:	nop
    24a4:	ldp	x29, x30, [sp], #16
    24a8:	ret
    24ac:	nop
	...

00000000000024c8 <grub_efidisk_get_device_handle>:
    24c8:	stp	x29, x30, [sp, #-80]!
    24cc:	mov	x29, sp
    24d0:	str	x0, [sp, #24]
    24d4:	ldr	x0, [sp, #24]
    24d8:	ldr	x0, [x0, #8]
    24dc:	ldr	w0, [x0, #8]
    24e0:	cmp	w0, #0x3
    24e4:	b.eq	24f0 <grub_efidisk_get_device_handle+0x28>  // b.none
    24e8:	mov	x0, #0x0                   	// #0
    24ec:	b	267c <grub_efidisk_get_device_handle+0x1b4>
    24f0:	ldr	x0, [sp, #24]
    24f4:	ldr	x0, [x0, #64]
    24f8:	str	x0, [sp, #56]
    24fc:	ldr	x0, [sp, #24]
    2500:	ldr	x0, [x0]
    2504:	ldrb	w0, [x0]
    2508:	strb	w0, [sp, #55]
    250c:	ldrb	w0, [sp, #55]
    2510:	cmp	w0, #0x68
    2514:	b.eq	2548 <grub_efidisk_get_device_handle+0x80>  // b.none
    2518:	cmp	w0, #0x68
    251c:	b.gt	266c <grub_efidisk_get_device_handle+0x1a4>
    2520:	cmp	w0, #0x63
    2524:	b.eq	253c <grub_efidisk_get_device_handle+0x74>  // b.none
    2528:	cmp	w0, #0x66
    252c:	b.ne	266c <grub_efidisk_get_device_handle+0x1a4>  // b.any
    2530:	ldr	x0, [sp, #56]
    2534:	ldr	x0, [x0]
    2538:	b	267c <grub_efidisk_get_device_handle+0x1b4>
    253c:	ldr	x0, [sp, #56]
    2540:	ldr	x0, [x0]
    2544:	b	267c <grub_efidisk_get_device_handle+0x1b4>
    2548:	ldr	x0, [sp, #24]
    254c:	ldr	x0, [x0, #40]
    2550:	cmp	x0, #0x0
    2554:	b.ne	2564 <grub_efidisk_get_device_handle+0x9c>  // b.any
    2558:	ldr	x0, [sp, #56]
    255c:	ldr	x0, [x0]
    2560:	b	267c <grub_efidisk_get_device_handle+0x1b4>
    2564:	str	xzr, [sp, #72]
    2568:	bl	1004 <make_devices>
    256c:	str	x0, [sp, #40]
    2570:	ldr	x0, [sp, #40]
    2574:	str	x0, [sp, #64]
    2578:	b	2644 <grub_efidisk_get_device_handle+0x17c>
    257c:	ldr	x1, [sp, #56]
    2580:	ldr	x0, [sp, #64]
    2584:	bl	12d8 <is_child>
    2588:	cmp	w0, #0x0
    258c:	b.eq	2638 <grub_efidisk_get_device_handle+0x170>  // b.none
    2590:	ldr	x0, [sp, #64]
    2594:	ldr	x0, [x0, #16]
    2598:	str	x0, [sp, #32]
    259c:	ldr	x0, [sp, #64]
    25a0:	ldr	x0, [x0, #16]
    25a4:	ldrb	w0, [x0]
    25a8:	and	w0, w0, #0x7f
    25ac:	cmp	w0, #0x4
    25b0:	b.ne	2638 <grub_efidisk_get_device_handle+0x170>  // b.any
    25b4:	ldr	x0, [sp, #64]
    25b8:	ldr	x0, [x0, #16]
    25bc:	ldrb	w0, [x0, #1]
    25c0:	cmp	w0, #0x1
    25c4:	b.ne	2638 <grub_efidisk_get_device_handle+0x170>  // b.any
    25c8:	ldr	x0, [sp, #24]
    25cc:	ldr	x0, [x0, #40]
    25d0:	bl	f9c <grub_partition_get_start>
    25d4:	mov	x2, x0
    25d8:	ldr	x0, [sp, #32]
    25dc:	ldr	x1, [x0, #8]
    25e0:	ldr	x0, [sp, #24]
    25e4:	ldr	w0, [x0, #24]
    25e8:	sub	w0, w0, #0x9
    25ec:	lsl	x0, x1, x0
    25f0:	cmp	x2, x0
    25f4:	b.ne	2638 <grub_efidisk_get_device_handle+0x170>  // b.any
    25f8:	ldr	x0, [sp, #24]
    25fc:	ldr	x0, [x0, #40]
    2600:	bl	fec <grub_partition_get_len>
    2604:	mov	x2, x0
    2608:	ldr	x0, [sp, #32]
    260c:	ldr	x1, [x0, #16]
    2610:	ldr	x0, [sp, #24]
    2614:	ldr	w0, [x0, #24]
    2618:	sub	w0, w0, #0x9
    261c:	lsl	x0, x1, x0
    2620:	cmp	x2, x0
    2624:	b.ne	2638 <grub_efidisk_get_device_handle+0x170>  // b.any
    2628:	ldr	x0, [sp, #64]
    262c:	ldr	x0, [x0]
    2630:	str	x0, [sp, #72]
    2634:	b	2650 <grub_efidisk_get_device_handle+0x188>
    2638:	ldr	x0, [sp, #64]
    263c:	ldr	x0, [x0, #32]
    2640:	str	x0, [sp, #64]
    2644:	ldr	x0, [sp, #64]
    2648:	cmp	x0, #0x0
    264c:	b.ne	257c <grub_efidisk_get_device_handle+0xb4>  // b.any
    2650:	ldr	x0, [sp, #40]
    2654:	bl	17f8 <free_devices>
    2658:	ldr	x0, [sp, #72]
    265c:	cmp	x0, #0x0
    2660:	b.eq	2674 <grub_efidisk_get_device_handle+0x1ac>  // b.none
    2664:	ldr	x0, [sp, #72]
    2668:	b	267c <grub_efidisk_get_device_handle+0x1b4>
    266c:	nop
    2670:	b	2678 <grub_efidisk_get_device_handle+0x1b0>
    2674:	nop
    2678:	mov	x0, #0x0                   	// #0
    267c:	ldp	x29, x30, [sp], #80
    2680:	ret

0000000000002684 <get_diskname_from_path_real>:
    2684:	stp	x29, x30, [sp, #-64]!
    2688:	mov	x29, sp
    268c:	str	x0, [sp, #40]
    2690:	str	x1, [sp, #32]
    2694:	str	x2, [sp, #24]
    2698:	str	wzr, [sp, #60]
    269c:	ldr	x0, [sp, #32]
    26a0:	str	x0, [sp, #48]
    26a4:	str	wzr, [sp, #60]
    26a8:	b	2700 <get_diskname_from_path_real+0x7c>
    26ac:	ldr	x0, [sp, #48]
    26b0:	ldr	x0, [x0, #8]
    26b4:	ldr	x1, [sp, #40]
    26b8:	bl	5100 <grub_efi_compare_device_paths>
    26bc:	cmp	w0, #0x0
    26c0:	b.ne	26e8 <get_diskname_from_path_real+0x64>  // b.any
    26c4:	ldr	w3, [sp, #60]
    26c8:	adrp	x0, 0 <_start>
    26cc:	add	x0, x0, #0x0
    26d0:	ldr	x2, [x0]
    26d4:	mov	x1, #0xc                   	// #12
    26d8:	ldr	x0, [sp, #24]
    26dc:	bl	1159c <grub_snprintf>
    26e0:	mov	w0, #0x1                   	// #1
    26e4:	b	2710 <get_diskname_from_path_real+0x8c>
    26e8:	ldr	x0, [sp, #48]
    26ec:	ldr	x0, [x0, #32]
    26f0:	str	x0, [sp, #48]
    26f4:	ldr	w0, [sp, #60]
    26f8:	add	w0, w0, #0x1
    26fc:	str	w0, [sp, #60]
    2700:	ldr	x0, [sp, #48]
    2704:	cmp	x0, #0x0
    2708:	b.ne	26ac <get_diskname_from_path_real+0x28>  // b.any
    270c:	mov	w0, #0x0                   	// #0
    2710:	ldp	x29, x30, [sp], #64
    2714:	ret
	...

0000000000002720 <get_diskname_from_path>:
    2720:	stp	x29, x30, [sp, #-32]!
    2724:	mov	x29, sp
    2728:	str	x0, [sp, #24]
    272c:	str	x1, [sp, #16]
    2730:	adrp	x0, 0 <_start>
    2734:	add	x0, x0, #0x0
    2738:	ldr	x0, [x0]
    273c:	ldr	x1, [x0]
    2740:	ldr	x0, [sp, #16]
    2744:	add	x0, x0, #0x1
    2748:	mov	x2, x0
    274c:	ldr	x0, [sp, #24]
    2750:	bl	2684 <get_diskname_from_path_real>
    2754:	cmp	w0, #0x0
    2758:	b.eq	2770 <get_diskname_from_path+0x50>  // b.none
    275c:	ldr	x0, [sp, #16]
    2760:	mov	w1, #0x68                  	// #104
    2764:	strb	w1, [x0]
    2768:	mov	w0, #0x1                   	// #1
    276c:	b	27f4 <get_diskname_from_path+0xd4>
    2770:	adrp	x0, 0 <_start>
    2774:	add	x0, x0, #0x0
    2778:	ldr	x0, [x0]
    277c:	ldr	x1, [x0]
    2780:	ldr	x0, [sp, #16]
    2784:	add	x0, x0, #0x1
    2788:	mov	x2, x0
    278c:	ldr	x0, [sp, #24]
    2790:	bl	2684 <get_diskname_from_path_real>
    2794:	cmp	w0, #0x0
    2798:	b.eq	27b0 <get_diskname_from_path+0x90>  // b.none
    279c:	ldr	x0, [sp, #16]
    27a0:	mov	w1, #0x66                  	// #102
    27a4:	strb	w1, [x0]
    27a8:	mov	w0, #0x1                   	// #1
    27ac:	b	27f4 <get_diskname_from_path+0xd4>
    27b0:	adrp	x0, 0 <_start>
    27b4:	add	x0, x0, #0x0
    27b8:	ldr	x0, [x0]
    27bc:	ldr	x1, [x0]
    27c0:	ldr	x0, [sp, #16]
    27c4:	add	x0, x0, #0x1
    27c8:	mov	x2, x0
    27cc:	ldr	x0, [sp, #24]
    27d0:	bl	2684 <get_diskname_from_path_real>
    27d4:	cmp	w0, #0x0
    27d8:	b.eq	27f0 <get_diskname_from_path+0xd0>  // b.none
    27dc:	ldr	x0, [sp, #16]
    27e0:	mov	w1, #0x63                  	// #99
    27e4:	strb	w1, [x0]
    27e8:	mov	w0, #0x1                   	// #1
    27ec:	b	27f4 <get_diskname_from_path+0xd4>
    27f0:	mov	w0, #0x0                   	// #0
    27f4:	ldp	x29, x30, [sp], #32
    27f8:	ret
    27fc:	nop
	...

0000000000002818 <grub_efidisk_get_device_name_iter>:
    2818:	stp	x29, x30, [sp, #-64]!
    281c:	mov	x29, sp
    2820:	str	x0, [sp, #40]
    2824:	str	x1, [sp, #32]
    2828:	str	x2, [sp, #24]
    282c:	ldr	x0, [sp, #24]
    2830:	str	x0, [sp, #56]
    2834:	ldr	x0, [sp, #32]
    2838:	bl	f9c <grub_partition_get_start>
    283c:	mov	x2, x0
    2840:	ldr	x0, [sp, #56]
    2844:	ldr	x0, [x0, #8]
    2848:	ldr	x1, [x0, #8]
    284c:	ldr	x0, [sp, #40]
    2850:	ldr	w0, [x0, #24]
    2854:	sub	w0, w0, #0x9
    2858:	lsl	x0, x1, x0
    285c:	cmp	x2, x0
    2860:	b.ne	28b0 <grub_efidisk_get_device_name_iter+0x98>  // b.any
    2864:	ldr	x0, [sp, #32]
    2868:	bl	fec <grub_partition_get_len>
    286c:	mov	x2, x0
    2870:	ldr	x0, [sp, #56]
    2874:	ldr	x0, [x0, #8]
    2878:	ldr	x1, [x0, #16]
    287c:	ldr	x0, [sp, #40]
    2880:	ldr	w0, [x0, #24]
    2884:	sub	w0, w0, #0x9
    2888:	lsl	x0, x1, x0
    288c:	cmp	x2, x0
    2890:	b.ne	28b0 <grub_efidisk_get_device_name_iter+0x98>  // b.any
    2894:	ldr	x0, [sp, #32]
    2898:	bl	127c0 <grub_partition_get_name>
    289c:	mov	x1, x0
    28a0:	ldr	x0, [sp, #56]
    28a4:	str	x1, [x0]
    28a8:	mov	w0, #0x1                   	// #1
    28ac:	b	28b4 <grub_efidisk_get_device_name_iter+0x9c>
    28b0:	mov	w0, #0x0                   	// #0
    28b4:	ldp	x29, x30, [sp], #64
    28b8:	ret

00000000000028bc <grub_efidisk_get_device_name>:
    28bc:	stp	x29, x30, [sp, #-128]!
    28c0:	mov	x29, sp
    28c4:	str	x19, [sp, #16]
    28c8:	str	x0, [sp, #40]
    28cc:	ldr	x0, [sp, #40]
    28d0:	bl	3e54 <grub_efi_get_device_path>
    28d4:	str	x0, [sp, #112]
    28d8:	ldr	x0, [sp, #112]
    28dc:	cmp	x0, #0x0
    28e0:	b.ne	28ec <grub_efidisk_get_device_name+0x30>  // b.any
    28e4:	mov	x0, #0x0                   	// #0
    28e8:	b	2b28 <grub_efidisk_get_device_name+0x26c>
    28ec:	ldr	x0, [sp, #112]
    28f0:	bl	3e88 <grub_efi_find_last_device_path>
    28f4:	str	x0, [sp, #104]
    28f8:	ldr	x0, [sp, #104]
    28fc:	cmp	x0, #0x0
    2900:	b.ne	290c <grub_efidisk_get_device_name+0x50>  // b.any
    2904:	mov	x0, #0x0                   	// #0
    2908:	b	2b28 <grub_efidisk_get_device_name+0x26c>
    290c:	ldr	x0, [sp, #104]
    2910:	ldrb	w0, [x0]
    2914:	and	w0, w0, #0x7f
    2918:	cmp	w0, #0x4
    291c:	b.ne	2b00 <grub_efidisk_get_device_name+0x244>  // b.any
    2920:	ldr	x0, [sp, #104]
    2924:	ldrb	w0, [x0, #1]
    2928:	cmp	w0, #0x2
    292c:	b.eq	2940 <grub_efidisk_get_device_name+0x84>  // b.none
    2930:	ldr	x0, [sp, #104]
    2934:	ldrb	w0, [x0, #1]
    2938:	cmp	w0, #0x1
    293c:	b.ne	2b00 <grub_efidisk_get_device_name+0x244>  // b.any
    2940:	str	xzr, [sp, #96]
    2944:	ldr	x0, [sp, #112]
    2948:	bl	3f30 <grub_efi_duplicate_device_path>
    294c:	str	x0, [sp, #88]
    2950:	ldr	x0, [sp, #88]
    2954:	cmp	x0, #0x0
    2958:	b.ne	2964 <grub_efidisk_get_device_name+0xa8>  // b.any
    295c:	mov	x0, #0x0                   	// #0
    2960:	b	2b28 <grub_efidisk_get_device_name+0x26c>
    2964:	ldr	x0, [sp, #88]
    2968:	bl	3e88 <grub_efi_find_last_device_path>
    296c:	str	x0, [sp, #80]
    2970:	ldr	x0, [sp, #80]
    2974:	cmp	x0, #0x0
    2978:	b.eq	29d8 <grub_efidisk_get_device_name+0x11c>  // b.none
    297c:	ldr	x0, [sp, #80]
    2980:	ldrb	w0, [x0]
    2984:	and	w0, w0, #0x7f
    2988:	cmp	w0, #0x4
    298c:	b.ne	29dc <grub_efidisk_get_device_name+0x120>  // b.any
    2990:	ldr	x0, [sp, #80]
    2994:	ldrb	w0, [x0, #1]
    2998:	cmp	w0, #0x2
    299c:	b.eq	29b0 <grub_efidisk_get_device_name+0xf4>  // b.none
    29a0:	ldr	x0, [sp, #80]
    29a4:	ldrb	w0, [x0, #1]
    29a8:	cmp	w0, #0x1
    29ac:	b.ne	29dc <grub_efidisk_get_device_name+0x120>  // b.any
    29b0:	ldr	x0, [sp, #80]
    29b4:	mov	w1, #0x7f                  	// #127
    29b8:	strb	w1, [x0]
    29bc:	ldr	x0, [sp, #80]
    29c0:	mov	w1, #0xffffffff            	// #-1
    29c4:	strb	w1, [x0, #1]
    29c8:	ldr	x0, [sp, #80]
    29cc:	mov	w1, #0x4                   	// #4
    29d0:	strh	w1, [x0, #2]
    29d4:	b	2964 <grub_efidisk_get_device_name+0xa8>
    29d8:	nop
    29dc:	add	x0, sp, #0x40
    29e0:	mov	x1, x0
    29e4:	ldr	x0, [sp, #88]
    29e8:	bl	2720 <get_diskname_from_path>
    29ec:	cmp	w0, #0x0
    29f0:	b.ne	2a04 <grub_efidisk_get_device_name+0x148>  // b.any
    29f4:	ldr	x0, [sp, #88]
    29f8:	bl	83ac <grub_free>
    29fc:	mov	x0, #0x0                   	// #0
    2a00:	b	2b28 <grub_efidisk_get_device_name+0x26c>
    2a04:	add	x0, sp, #0x40
    2a08:	bl	9d94 <grub_disk_open>
    2a0c:	str	x0, [sp, #96]
    2a10:	ldr	x0, [sp, #88]
    2a14:	bl	83ac <grub_free>
    2a18:	ldr	x0, [sp, #96]
    2a1c:	cmp	x0, #0x0
    2a20:	b.ne	2a2c <grub_efidisk_get_device_name+0x170>  // b.any
    2a24:	mov	x0, #0x0                   	// #0
    2a28:	b	2b28 <grub_efidisk_get_device_name+0x26c>
    2a2c:	str	xzr, [sp, #48]
    2a30:	ldr	x0, [sp, #104]
    2a34:	str	x0, [sp, #56]
    2a38:	ldr	x0, [sp, #56]
    2a3c:	ldr	x0, [x0, #8]
    2a40:	cmp	x0, #0x0
    2a44:	b.ne	2a84 <grub_efidisk_get_device_name+0x1c8>  // b.any
    2a48:	ldr	x0, [sp, #56]
    2a4c:	ldr	x1, [x0, #16]
    2a50:	ldr	x0, [sp, #96]
    2a54:	ldr	w0, [x0, #24]
    2a58:	sub	w0, w0, #0x9
    2a5c:	lsl	x19, x1, x0
    2a60:	ldr	x0, [sp, #96]
    2a64:	bl	ab60 <grub_disk_get_size>
    2a68:	cmp	x19, x0
    2a6c:	b.ne	2a84 <grub_efidisk_get_device_name+0x1c8>  // b.any
    2a70:	ldr	x0, [sp, #96]
    2a74:	ldr	x0, [x0]
    2a78:	bl	fc40 <grub_strdup>
    2a7c:	str	x0, [sp, #120]
    2a80:	b	2af0 <grub_efidisk_get_device_name+0x234>
    2a84:	add	x0, sp, #0x30
    2a88:	mov	x2, x0
    2a8c:	adrp	x0, 0 <_start>
    2a90:	add	x0, x0, #0x0
    2a94:	ldr	x1, [x0]
    2a98:	ldr	x0, [sp, #96]
    2a9c:	bl	126e8 <grub_partition_iterate>
    2aa0:	ldr	x0, [sp, #48]
    2aa4:	cmp	x0, #0x0
    2aa8:	b.ne	2ac0 <grub_efidisk_get_device_name+0x204>  // b.any
    2aac:	ldr	x0, [sp, #96]
    2ab0:	bl	a138 <grub_disk_close>
    2ab4:	add	x0, sp, #0x40
    2ab8:	bl	fc40 <grub_strdup>
    2abc:	b	2b28 <grub_efidisk_get_device_name+0x26c>
    2ac0:	ldr	x0, [sp, #96]
    2ac4:	ldr	x0, [x0]
    2ac8:	ldr	x1, [sp, #48]
    2acc:	mov	x2, x1
    2ad0:	mov	x1, x0
    2ad4:	adrp	x0, 0 <_start>
    2ad8:	add	x0, x0, #0x0
    2adc:	ldr	x0, [x0]
    2ae0:	bl	11700 <grub_xasprintf>
    2ae4:	str	x0, [sp, #120]
    2ae8:	ldr	x0, [sp, #48]
    2aec:	bl	83ac <grub_free>
    2af0:	ldr	x0, [sp, #96]
    2af4:	bl	a138 <grub_disk_close>
    2af8:	ldr	x0, [sp, #120]
    2afc:	b	2b28 <grub_efidisk_get_device_name+0x26c>
    2b00:	add	x0, sp, #0x40
    2b04:	mov	x1, x0
    2b08:	ldr	x0, [sp, #112]
    2b0c:	bl	2720 <get_diskname_from_path>
    2b10:	cmp	w0, #0x0
    2b14:	b.ne	2b20 <grub_efidisk_get_device_name+0x264>  // b.any
    2b18:	mov	x0, #0x0                   	// #0
    2b1c:	b	2b28 <grub_efidisk_get_device_name+0x26c>
    2b20:	add	x0, sp, #0x40
    2b24:	bl	fc40 <grub_strdup>
    2b28:	ldr	x19, [sp, #16]
    2b2c:	ldp	x29, x30, [sp], #128
    2b30:	ret
    2b34:	nop
	...

0000000000002b48 <grub_memcpy>:
    2b48:	stp	x29, x30, [sp, #-48]!
    2b4c:	mov	x29, sp
    2b50:	str	x0, [sp, #40]
    2b54:	str	x1, [sp, #32]
    2b58:	str	x2, [sp, #24]
    2b5c:	ldr	x2, [sp, #24]
    2b60:	ldr	x1, [sp, #32]
    2b64:	ldr	x0, [sp, #40]
    2b68:	bl	f08c <grub_memmove>
    2b6c:	ldp	x29, x30, [sp], #48
    2b70:	ret

0000000000002b74 <grub_utf8_process>:
    2b74:	sub	sp, sp, #0x20
    2b78:	strb	w0, [sp, #31]
    2b7c:	str	x1, [sp, #16]
    2b80:	str	x2, [sp, #8]
    2b84:	ldr	x0, [sp, #8]
    2b88:	ldr	w0, [x0]
    2b8c:	cmp	w0, #0x0
    2b90:	b.eq	2c58 <grub_utf8_process+0xe4>  // b.none
    2b94:	ldrb	w0, [sp, #31]
    2b98:	and	w0, w0, #0xc0
    2b9c:	cmp	w0, #0x80
    2ba0:	b.eq	2bb4 <grub_utf8_process+0x40>  // b.none
    2ba4:	ldr	x0, [sp, #8]
    2ba8:	str	wzr, [x0]
    2bac:	mov	w0, #0x0                   	// #0
    2bb0:	b	2d40 <grub_utf8_process+0x1cc>
    2bb4:	ldr	x0, [sp, #16]
    2bb8:	ldr	w0, [x0]
    2bbc:	lsl	w1, w0, #6
    2bc0:	ldr	x0, [sp, #16]
    2bc4:	str	w1, [x0]
    2bc8:	ldr	x0, [sp, #16]
    2bcc:	ldr	w1, [x0]
    2bd0:	ldrb	w0, [sp, #31]
    2bd4:	and	w0, w0, #0x3f
    2bd8:	orr	w1, w1, w0
    2bdc:	ldr	x0, [sp, #16]
    2be0:	str	w1, [x0]
    2be4:	ldr	x0, [sp, #8]
    2be8:	ldr	w0, [x0]
    2bec:	sub	w1, w0, #0x1
    2bf0:	ldr	x0, [sp, #8]
    2bf4:	str	w1, [x0]
    2bf8:	ldr	x0, [sp, #8]
    2bfc:	ldr	w0, [x0]
    2c00:	cmp	w0, #0x1
    2c04:	b.ne	2c18 <grub_utf8_process+0xa4>  // b.any
    2c08:	ldr	x0, [sp, #16]
    2c0c:	ldr	w0, [x0]
    2c10:	cmp	w0, #0x1f
    2c14:	b.ls	2c38 <grub_utf8_process+0xc4>  // b.plast
    2c18:	ldr	x0, [sp, #8]
    2c1c:	ldr	w0, [x0]
    2c20:	cmp	w0, #0x2
    2c24:	b.ne	2c50 <grub_utf8_process+0xdc>  // b.any
    2c28:	ldr	x0, [sp, #16]
    2c2c:	ldr	w0, [x0]
    2c30:	cmp	w0, #0xf
    2c34:	b.hi	2c50 <grub_utf8_process+0xdc>  // b.pmore
    2c38:	ldr	x0, [sp, #16]
    2c3c:	str	wzr, [x0]
    2c40:	ldr	x0, [sp, #8]
    2c44:	str	wzr, [x0]
    2c48:	mov	w0, #0x0                   	// #0
    2c4c:	b	2d40 <grub_utf8_process+0x1cc>
    2c50:	mov	w0, #0x1                   	// #1
    2c54:	b	2d40 <grub_utf8_process+0x1cc>
    2c58:	ldrsb	w0, [sp, #31]
    2c5c:	cmp	w0, #0x0
    2c60:	b.lt	2c78 <grub_utf8_process+0x104>  // b.tstop
    2c64:	ldrb	w1, [sp, #31]
    2c68:	ldr	x0, [sp, #16]
    2c6c:	str	w1, [x0]
    2c70:	mov	w0, #0x1                   	// #1
    2c74:	b	2d40 <grub_utf8_process+0x1cc>
    2c78:	ldrb	w0, [sp, #31]
    2c7c:	and	w0, w0, #0xe0
    2c80:	cmp	w0, #0xc0
    2c84:	b.ne	2cd4 <grub_utf8_process+0x160>  // b.any
    2c88:	ldr	x0, [sp, #8]
    2c8c:	mov	w1, #0x1                   	// #1
    2c90:	str	w1, [x0]
    2c94:	ldrb	w0, [sp, #31]
    2c98:	and	w1, w0, #0x1f
    2c9c:	ldr	x0, [sp, #16]
    2ca0:	str	w1, [x0]
    2ca4:	ldr	x0, [sp, #16]
    2ca8:	ldr	w0, [x0]
    2cac:	cmp	w0, #0x1
    2cb0:	b.hi	2ccc <grub_utf8_process+0x158>  // b.pmore
    2cb4:	ldr	x0, [sp, #8]
    2cb8:	str	wzr, [x0]
    2cbc:	ldr	x0, [sp, #16]
    2cc0:	str	wzr, [x0]
    2cc4:	mov	w0, #0x0                   	// #0
    2cc8:	b	2d40 <grub_utf8_process+0x1cc>
    2ccc:	mov	w0, #0x1                   	// #1
    2cd0:	b	2d40 <grub_utf8_process+0x1cc>
    2cd4:	ldrb	w0, [sp, #31]
    2cd8:	and	w0, w0, #0xf0
    2cdc:	cmp	w0, #0xe0
    2ce0:	b.ne	2d08 <grub_utf8_process+0x194>  // b.any
    2ce4:	ldr	x0, [sp, #8]
    2ce8:	mov	w1, #0x2                   	// #2
    2cec:	str	w1, [x0]
    2cf0:	ldrb	w0, [sp, #31]
    2cf4:	and	w1, w0, #0xf
    2cf8:	ldr	x0, [sp, #16]
    2cfc:	str	w1, [x0]
    2d00:	mov	w0, #0x1                   	// #1
    2d04:	b	2d40 <grub_utf8_process+0x1cc>
    2d08:	ldrb	w0, [sp, #31]
    2d0c:	and	w0, w0, #0xf8
    2d10:	cmp	w0, #0xf0
    2d14:	b.ne	2d3c <grub_utf8_process+0x1c8>  // b.any
    2d18:	ldr	x0, [sp, #8]
    2d1c:	mov	w1, #0x3                   	// #3
    2d20:	str	w1, [x0]
    2d24:	ldrb	w0, [sp, #31]
    2d28:	and	w1, w0, #0x7
    2d2c:	ldr	x0, [sp, #16]
    2d30:	str	w1, [x0]
    2d34:	mov	w0, #0x1                   	// #1
    2d38:	b	2d40 <grub_utf8_process+0x1cc>
    2d3c:	mov	w0, #0x0                   	// #0
    2d40:	add	sp, sp, #0x20
    2d44:	ret

0000000000002d48 <grub_utf8_to_utf16>:
    2d48:	stp	x29, x30, [sp, #-96]!
    2d4c:	mov	x29, sp
    2d50:	str	x0, [sp, #56]
    2d54:	str	x1, [sp, #48]
    2d58:	str	x2, [sp, #40]
    2d5c:	str	x3, [sp, #32]
    2d60:	str	x4, [sp, #24]
    2d64:	ldr	x0, [sp, #56]
    2d68:	str	x0, [sp, #88]
    2d6c:	str	wzr, [sp, #80]
    2d70:	str	wzr, [sp, #76]
    2d74:	ldr	x0, [sp, #24]
    2d78:	cmp	x0, #0x0
    2d7c:	b.eq	2ee0 <grub_utf8_to_utf16+0x198>  // b.none
    2d80:	ldr	x0, [sp, #24]
    2d84:	ldr	x1, [sp, #40]
    2d88:	str	x1, [x0]
    2d8c:	b	2ee0 <grub_utf8_to_utf16+0x198>
    2d90:	ldr	w0, [sp, #80]
    2d94:	str	w0, [sp, #84]
    2d98:	ldr	x0, [sp, #32]
    2d9c:	cmn	x0, #0x1
    2da0:	b.eq	2db0 <grub_utf8_to_utf16+0x68>  // b.none
    2da4:	ldr	x0, [sp, #32]
    2da8:	sub	x0, x0, #0x1
    2dac:	str	x0, [sp, #32]
    2db0:	ldr	x0, [sp, #40]
    2db4:	add	x1, x0, #0x1
    2db8:	str	x1, [sp, #40]
    2dbc:	ldrb	w3, [x0]
    2dc0:	add	x1, sp, #0x50
    2dc4:	add	x0, sp, #0x4c
    2dc8:	mov	x2, x1
    2dcc:	mov	x1, x0
    2dd0:	mov	w0, w3
    2dd4:	bl	2b74 <grub_utf8_process>
    2dd8:	cmp	w0, #0x0
    2ddc:	b.ne	2e04 <grub_utf8_to_utf16+0xbc>  // b.any
    2de0:	mov	w0, #0x3f                  	// #63
    2de4:	str	w0, [sp, #76]
    2de8:	str	wzr, [sp, #80]
    2dec:	ldr	w0, [sp, #84]
    2df0:	cmp	w0, #0x0
    2df4:	b.eq	2e04 <grub_utf8_to_utf16+0xbc>  // b.none
    2df8:	ldr	x0, [sp, #40]
    2dfc:	sub	x0, x0, #0x1
    2e00:	str	x0, [sp, #40]
    2e04:	ldr	w0, [sp, #80]
    2e08:	cmp	w0, #0x0
    2e0c:	b.eq	2e14 <grub_utf8_to_utf16+0xcc>  // b.none
    2e10:	b	2ee0 <grub_utf8_to_utf16+0x198>
    2e14:	ldr	w0, [sp, #76]
    2e18:	cmp	w0, #0x0
    2e1c:	b.eq	2efc <grub_utf8_to_utf16+0x1b4>  // b.none
    2e20:	ldr	x0, [sp, #48]
    2e24:	cmp	x0, #0x1
    2e28:	b.hi	2e3c <grub_utf8_to_utf16+0xf4>  // b.pmore
    2e2c:	ldr	w1, [sp, #76]
    2e30:	mov	w0, #0xffff                	// #65535
    2e34:	cmp	w1, w0
    2e38:	b.hi	2f04 <grub_utf8_to_utf16+0x1bc>  // b.pmore
    2e3c:	ldr	w1, [sp, #76]
    2e40:	mov	w0, #0xffff                	// #65535
    2e44:	cmp	w1, w0
    2e48:	b.ls	2ebc <grub_utf8_to_utf16+0x174>  // b.plast
    2e4c:	ldr	w0, [sp, #76]
    2e50:	sub	w0, w0, #0x10, lsl #12
    2e54:	lsr	w0, w0, #10
    2e58:	and	w0, w0, #0xffff
    2e5c:	and	w0, w0, #0x3ff
    2e60:	and	w2, w0, #0xffff
    2e64:	ldr	x0, [sp, #88]
    2e68:	add	x1, x0, #0x2
    2e6c:	str	x1, [sp, #88]
    2e70:	mov	w1, #0xffffd800            	// #-10240
    2e74:	orr	w1, w2, w1
    2e78:	and	w1, w1, #0xffff
    2e7c:	strh	w1, [x0]
    2e80:	ldr	w0, [sp, #76]
    2e84:	and	w0, w0, #0xffff
    2e88:	and	w0, w0, #0x3ff
    2e8c:	and	w2, w0, #0xffff
    2e90:	ldr	x0, [sp, #88]
    2e94:	add	x1, x0, #0x2
    2e98:	str	x1, [sp, #88]
    2e9c:	mov	w1, #0xffffdc00            	// #-9216
    2ea0:	orr	w1, w2, w1
    2ea4:	and	w1, w1, #0xffff
    2ea8:	strh	w1, [x0]
    2eac:	ldr	x0, [sp, #48]
    2eb0:	sub	x0, x0, #0x2
    2eb4:	str	x0, [sp, #48]
    2eb8:	b	2ee0 <grub_utf8_to_utf16+0x198>
    2ebc:	ldr	w2, [sp, #76]
    2ec0:	ldr	x0, [sp, #88]
    2ec4:	add	x1, x0, #0x2
    2ec8:	str	x1, [sp, #88]
    2ecc:	and	w1, w2, #0xffff
    2ed0:	strh	w1, [x0]
    2ed4:	ldr	x0, [sp, #48]
    2ed8:	sub	x0, x0, #0x1
    2edc:	str	x0, [sp, #48]
    2ee0:	ldr	x0, [sp, #32]
    2ee4:	cmp	x0, #0x0
    2ee8:	b.eq	2f08 <grub_utf8_to_utf16+0x1c0>  // b.none
    2eec:	ldr	x0, [sp, #48]
    2ef0:	cmp	x0, #0x0
    2ef4:	b.ne	2d90 <grub_utf8_to_utf16+0x48>  // b.any
    2ef8:	b	2f08 <grub_utf8_to_utf16+0x1c0>
    2efc:	nop
    2f00:	b	2f08 <grub_utf8_to_utf16+0x1c0>
    2f04:	nop
    2f08:	ldr	x0, [sp, #24]
    2f0c:	cmp	x0, #0x0
    2f10:	b.eq	2f20 <grub_utf8_to_utf16+0x1d8>  // b.none
    2f14:	ldr	x0, [sp, #24]
    2f18:	ldr	x1, [sp, #40]
    2f1c:	str	x1, [x0]
    2f20:	ldr	x1, [sp, #88]
    2f24:	ldr	x0, [sp, #56]
    2f28:	sub	x0, x1, x0
    2f2c:	asr	x0, x0, #1
    2f30:	ldp	x29, x30, [sp], #96
    2f34:	ret

0000000000002f38 <grub_utf16_to_utf8>:
    2f38:	sub	sp, sp, #0x30
    2f3c:	str	x0, [sp, #24]
    2f40:	str	x1, [sp, #16]
    2f44:	str	x2, [sp, #8]
    2f48:	str	wzr, [sp, #44]
    2f4c:	b	329c <grub_utf16_to_utf8+0x364>
    2f50:	ldr	x0, [sp, #16]
    2f54:	add	x1, x0, #0x2
    2f58:	str	x1, [sp, #16]
    2f5c:	ldrh	w0, [x0]
    2f60:	str	w0, [sp, #40]
    2f64:	ldr	w0, [sp, #44]
    2f68:	cmp	w0, #0x0
    2f6c:	b.eq	3084 <grub_utf16_to_utf8+0x14c>  // b.none
    2f70:	ldr	w1, [sp, #40]
    2f74:	mov	w0, #0xdbff                	// #56319
    2f78:	cmp	w1, w0
    2f7c:	b.ls	305c <grub_utf16_to_utf8+0x124>  // b.plast
    2f80:	ldr	w1, [sp, #40]
    2f84:	mov	w0, #0xdfff                	// #57343
    2f88:	cmp	w1, w0
    2f8c:	b.hi	305c <grub_utf16_to_utf8+0x124>  // b.pmore
    2f90:	ldr	w1, [sp, #44]
    2f94:	mov	w0, #0xffff2800            	// #-55296
    2f98:	add	w0, w1, w0
    2f9c:	lsl	w1, w0, #10
    2fa0:	ldr	w0, [sp, #40]
    2fa4:	add	w1, w1, w0
    2fa8:	mov	w0, #0x2400                	// #9216
    2fac:	add	w0, w1, w0
    2fb0:	str	w0, [sp, #40]
    2fb4:	ldr	w0, [sp, #40]
    2fb8:	lsr	w0, w0, #18
    2fbc:	and	w1, w0, #0xff
    2fc0:	ldr	x0, [sp, #24]
    2fc4:	add	x2, x0, #0x1
    2fc8:	str	x2, [sp, #24]
    2fcc:	orr	w1, w1, #0xfffffff0
    2fd0:	and	w1, w1, #0xff
    2fd4:	strb	w1, [x0]
    2fd8:	ldr	w0, [sp, #40]
    2fdc:	lsr	w0, w0, #12
    2fe0:	and	w0, w0, #0xff
    2fe4:	and	w0, w0, #0x3f
    2fe8:	and	w1, w0, #0xff
    2fec:	ldr	x0, [sp, #24]
    2ff0:	add	x2, x0, #0x1
    2ff4:	str	x2, [sp, #24]
    2ff8:	orr	w1, w1, #0xffffff80
    2ffc:	and	w1, w1, #0xff
    3000:	strb	w1, [x0]
    3004:	ldr	w0, [sp, #40]
    3008:	lsr	w0, w0, #6
    300c:	and	w0, w0, #0xff
    3010:	and	w0, w0, #0x3f
    3014:	and	w1, w0, #0xff
    3018:	ldr	x0, [sp, #24]
    301c:	add	x2, x0, #0x1
    3020:	str	x2, [sp, #24]
    3024:	orr	w1, w1, #0xffffff80
    3028:	and	w1, w1, #0xff
    302c:	strb	w1, [x0]
    3030:	ldr	w0, [sp, #40]
    3034:	and	w0, w0, #0xff
    3038:	and	w0, w0, #0x3f
    303c:	and	w1, w0, #0xff
    3040:	ldr	x0, [sp, #24]
    3044:	add	x2, x0, #0x1
    3048:	str	x2, [sp, #24]
    304c:	orr	w1, w1, #0xffffff80
    3050:	and	w1, w1, #0xff
    3054:	strb	w1, [x0]
    3058:	b	307c <grub_utf16_to_utf8+0x144>
    305c:	ldr	x0, [sp, #24]
    3060:	add	x1, x0, #0x1
    3064:	str	x1, [sp, #24]
    3068:	mov	w1, #0x3f                  	// #63
    306c:	strb	w1, [x0]
    3070:	ldr	x0, [sp, #16]
    3074:	sub	x0, x0, #0x2
    3078:	str	x0, [sp, #16]
    307c:	str	wzr, [sp, #44]
    3080:	b	329c <grub_utf16_to_utf8+0x364>
    3084:	ldr	w0, [sp, #40]
    3088:	cmp	w0, #0x7f
    308c:	b.hi	30ac <grub_utf16_to_utf8+0x174>  // b.pmore
    3090:	ldr	x0, [sp, #24]
    3094:	add	x1, x0, #0x1
    3098:	str	x1, [sp, #24]
    309c:	ldr	w1, [sp, #40]
    30a0:	and	w1, w1, #0xff
    30a4:	strb	w1, [x0]
    30a8:	b	329c <grub_utf16_to_utf8+0x364>
    30ac:	ldr	w0, [sp, #40]
    30b0:	cmp	w0, #0x7ff
    30b4:	b.hi	3108 <grub_utf16_to_utf8+0x1d0>  // b.pmore
    30b8:	ldr	w0, [sp, #40]
    30bc:	lsr	w0, w0, #6
    30c0:	and	w1, w0, #0xff
    30c4:	ldr	x0, [sp, #24]
    30c8:	add	x2, x0, #0x1
    30cc:	str	x2, [sp, #24]
    30d0:	orr	w1, w1, #0xffffffc0
    30d4:	and	w1, w1, #0xff
    30d8:	strb	w1, [x0]
    30dc:	ldr	w0, [sp, #40]
    30e0:	and	w0, w0, #0xff
    30e4:	and	w0, w0, #0x3f
    30e8:	and	w1, w0, #0xff
    30ec:	ldr	x0, [sp, #24]
    30f0:	add	x2, x0, #0x1
    30f4:	str	x2, [sp, #24]
    30f8:	orr	w1, w1, #0xffffff80
    30fc:	and	w1, w1, #0xff
    3100:	strb	w1, [x0]
    3104:	b	329c <grub_utf16_to_utf8+0x364>
    3108:	ldr	w1, [sp, #40]
    310c:	mov	w0, #0xd7ff                	// #55295
    3110:	cmp	w1, w0
    3114:	b.ls	3134 <grub_utf16_to_utf8+0x1fc>  // b.plast
    3118:	ldr	w1, [sp, #40]
    311c:	mov	w0, #0xdbff                	// #56319
    3120:	cmp	w1, w0
    3124:	b.hi	3134 <grub_utf16_to_utf8+0x1fc>  // b.pmore
    3128:	ldr	w0, [sp, #40]
    312c:	str	w0, [sp, #44]
    3130:	b	329c <grub_utf16_to_utf8+0x364>
    3134:	ldr	w1, [sp, #40]
    3138:	mov	w0, #0xdbff                	// #56319
    313c:	cmp	w1, w0
    3140:	b.ls	316c <grub_utf16_to_utf8+0x234>  // b.plast
    3144:	ldr	w1, [sp, #40]
    3148:	mov	w0, #0xdfff                	// #57343
    314c:	cmp	w1, w0
    3150:	b.hi	316c <grub_utf16_to_utf8+0x234>  // b.pmore
    3154:	ldr	x0, [sp, #24]
    3158:	add	x1, x0, #0x1
    315c:	str	x1, [sp, #24]
    3160:	mov	w1, #0x3f                  	// #63
    3164:	strb	w1, [x0]
    3168:	b	329c <grub_utf16_to_utf8+0x364>
    316c:	ldr	w1, [sp, #40]
    3170:	mov	w0, #0xffff                	// #65535
    3174:	cmp	w1, w0
    3178:	b.hi	31f8 <grub_utf16_to_utf8+0x2c0>  // b.pmore
    317c:	ldr	w0, [sp, #40]
    3180:	lsr	w0, w0, #12
    3184:	and	w1, w0, #0xff
    3188:	ldr	x0, [sp, #24]
    318c:	add	x2, x0, #0x1
    3190:	str	x2, [sp, #24]
    3194:	orr	w1, w1, #0xffffffe0
    3198:	and	w1, w1, #0xff
    319c:	strb	w1, [x0]
    31a0:	ldr	w0, [sp, #40]
    31a4:	lsr	w0, w0, #6
    31a8:	and	w0, w0, #0xff
    31ac:	and	w0, w0, #0x3f
    31b0:	and	w1, w0, #0xff
    31b4:	ldr	x0, [sp, #24]
    31b8:	add	x2, x0, #0x1
    31bc:	str	x2, [sp, #24]
    31c0:	orr	w1, w1, #0xffffff80
    31c4:	and	w1, w1, #0xff
    31c8:	strb	w1, [x0]
    31cc:	ldr	w0, [sp, #40]
    31d0:	and	w0, w0, #0xff
    31d4:	and	w0, w0, #0x3f
    31d8:	and	w1, w0, #0xff
    31dc:	ldr	x0, [sp, #24]
    31e0:	add	x2, x0, #0x1
    31e4:	str	x2, [sp, #24]
    31e8:	orr	w1, w1, #0xffffff80
    31ec:	and	w1, w1, #0xff
    31f0:	strb	w1, [x0]
    31f4:	b	329c <grub_utf16_to_utf8+0x364>
    31f8:	ldr	w0, [sp, #40]
    31fc:	lsr	w0, w0, #18
    3200:	and	w1, w0, #0xff
    3204:	ldr	x0, [sp, #24]
    3208:	add	x2, x0, #0x1
    320c:	str	x2, [sp, #24]
    3210:	orr	w1, w1, #0xfffffff0
    3214:	and	w1, w1, #0xff
    3218:	strb	w1, [x0]
    321c:	ldr	w0, [sp, #40]
    3220:	lsr	w0, w0, #12
    3224:	and	w0, w0, #0xff
    3228:	and	w0, w0, #0x3f
    322c:	and	w1, w0, #0xff
    3230:	ldr	x0, [sp, #24]
    3234:	add	x2, x0, #0x1
    3238:	str	x2, [sp, #24]
    323c:	orr	w1, w1, #0xffffff80
    3240:	and	w1, w1, #0xff
    3244:	strb	w1, [x0]
    3248:	ldr	w0, [sp, #40]
    324c:	lsr	w0, w0, #6
    3250:	and	w0, w0, #0xff
    3254:	and	w0, w0, #0x3f
    3258:	and	w1, w0, #0xff
    325c:	ldr	x0, [sp, #24]
    3260:	add	x2, x0, #0x1
    3264:	str	x2, [sp, #24]
    3268:	orr	w1, w1, #0xffffff80
    326c:	and	w1, w1, #0xff
    3270:	strb	w1, [x0]
    3274:	ldr	w0, [sp, #40]
    3278:	and	w0, w0, #0xff
    327c:	and	w0, w0, #0x3f
    3280:	and	w1, w0, #0xff
    3284:	ldr	x0, [sp, #24]
    3288:	add	x2, x0, #0x1
    328c:	str	x2, [sp, #24]
    3290:	orr	w1, w1, #0xffffff80
    3294:	and	w1, w1, #0xff
    3298:	strb	w1, [x0]
    329c:	ldr	x0, [sp, #8]
    32a0:	sub	x1, x0, #0x1
    32a4:	str	x1, [sp, #8]
    32a8:	cmp	x0, #0x0
    32ac:	b.ne	2f50 <grub_utf16_to_utf8+0x18>  // b.any
    32b0:	ldr	x0, [sp, #24]
    32b4:	add	sp, sp, #0x30
    32b8:	ret

00000000000032bc <grub_efi_locate_protocol>:
    32bc:	stp	x29, x30, [sp, #-48]!
    32c0:	mov	x29, sp
    32c4:	str	x0, [sp, #24]
    32c8:	str	x1, [sp, #16]
    32cc:	adrp	x0, 0 <_start>
    32d0:	add	x0, x0, #0x0
    32d4:	ldr	x0, [x0]
    32d8:	ldr	x0, [x0]
    32dc:	ldr	x0, [x0, #96]
    32e0:	ldr	x3, [x0, #320]
    32e4:	add	x0, sp, #0x20
    32e8:	mov	x2, x0
    32ec:	ldr	x1, [sp, #16]
    32f0:	ldr	x0, [sp, #24]
    32f4:	blr	x3
    32f8:	str	x0, [sp, #40]
    32fc:	ldr	x0, [sp, #40]
    3300:	cmp	x0, #0x0
    3304:	b.eq	3310 <grub_efi_locate_protocol+0x54>  // b.none
    3308:	mov	x0, #0x0                   	// #0
    330c:	b	3314 <grub_efi_locate_protocol+0x58>
    3310:	ldr	x0, [sp, #32]
    3314:	ldp	x29, x30, [sp], #48
    3318:	ret
    331c:	nop
	...

0000000000003328 <grub_efi_locate_handle>:
    3328:	stp	x29, x30, [sp, #-80]!
    332c:	mov	x29, sp
    3330:	str	w0, [sp, #44]
    3334:	str	x1, [sp, #32]
    3338:	str	x2, [sp, #24]
    333c:	str	x3, [sp, #16]
    3340:	mov	x0, #0x40                  	// #64
    3344:	str	x0, [sp, #48]
    3348:	ldr	x0, [sp, #48]
    334c:	bl	8348 <grub_malloc>
    3350:	str	x0, [sp, #64]
    3354:	ldr	x0, [sp, #64]
    3358:	cmp	x0, #0x0
    335c:	b.ne	3368 <grub_efi_locate_handle+0x40>  // b.any
    3360:	mov	x0, #0x0                   	// #0
    3364:	b	343c <grub_efi_locate_handle+0x114>
    3368:	adrp	x0, 0 <_start>
    336c:	add	x0, x0, #0x0
    3370:	ldr	x0, [x0]
    3374:	ldr	x0, [x0]
    3378:	ldr	x0, [x0, #96]
    337c:	str	x0, [sp, #56]
    3380:	ldr	x0, [sp, #56]
    3384:	ldr	x5, [x0, #176]
    3388:	add	x0, sp, #0x30
    338c:	ldr	x4, [sp, #64]
    3390:	mov	x3, x0
    3394:	ldr	x2, [sp, #24]
    3398:	ldr	x1, [sp, #32]
    339c:	ldr	w0, [sp, #44]
    33a0:	blr	x5
    33a4:	str	x0, [sp, #72]
    33a8:	ldr	x1, [sp, #72]
    33ac:	mov	x0, #0x5                   	// #5
    33b0:	movk	x0, #0x8000, lsl #48
    33b4:	cmp	x1, x0
    33b8:	b.ne	340c <grub_efi_locate_handle+0xe4>  // b.any
    33bc:	ldr	x0, [sp, #64]
    33c0:	bl	83ac <grub_free>
    33c4:	ldr	x0, [sp, #48]
    33c8:	bl	8348 <grub_malloc>
    33cc:	str	x0, [sp, #64]
    33d0:	ldr	x0, [sp, #64]
    33d4:	cmp	x0, #0x0
    33d8:	b.ne	33e4 <grub_efi_locate_handle+0xbc>  // b.any
    33dc:	mov	x0, #0x0                   	// #0
    33e0:	b	343c <grub_efi_locate_handle+0x114>
    33e4:	ldr	x0, [sp, #56]
    33e8:	ldr	x5, [x0, #176]
    33ec:	add	x0, sp, #0x30
    33f0:	ldr	x4, [sp, #64]
    33f4:	mov	x3, x0
    33f8:	ldr	x2, [sp, #24]
    33fc:	ldr	x1, [sp, #32]
    3400:	ldr	w0, [sp, #44]
    3404:	blr	x5
    3408:	str	x0, [sp, #72]
    340c:	ldr	x0, [sp, #72]
    3410:	cmp	x0, #0x0
    3414:	b.eq	3428 <grub_efi_locate_handle+0x100>  // b.none
    3418:	ldr	x0, [sp, #64]
    341c:	bl	83ac <grub_free>
    3420:	mov	x0, #0x0                   	// #0
    3424:	b	343c <grub_efi_locate_handle+0x114>
    3428:	ldr	x0, [sp, #48]
    342c:	lsr	x1, x0, #3
    3430:	ldr	x0, [sp, #16]
    3434:	str	x1, [x0]
    3438:	ldr	x0, [sp, #64]
    343c:	ldp	x29, x30, [sp], #80
    3440:	ret
    3444:	nop
	...

0000000000003450 <grub_efi_open_protocol>:
    3450:	stp	x29, x30, [sp, #-80]!
    3454:	mov	x29, sp
    3458:	str	x0, [sp, #40]
    345c:	str	x1, [sp, #32]
    3460:	str	w2, [sp, #28]
    3464:	adrp	x0, 0 <_start>
    3468:	add	x0, x0, #0x0
    346c:	ldr	x0, [x0]
    3470:	ldr	x0, [x0]
    3474:	ldr	x0, [x0, #96]
    3478:	str	x0, [sp, #72]
    347c:	ldr	x0, [sp, #72]
    3480:	ldr	x6, [x0, #280]
    3484:	adrp	x0, 0 <_start>
    3488:	add	x0, x0, #0x0
    348c:	ldr	x0, [x0]
    3490:	ldr	x1, [x0]
    3494:	add	x0, sp, #0x38
    3498:	ldr	w5, [sp, #28]
    349c:	mov	x4, #0x0                   	// #0
    34a0:	mov	x3, x1
    34a4:	mov	x2, x0
    34a8:	ldr	x1, [sp, #32]
    34ac:	ldr	x0, [sp, #40]
    34b0:	blr	x6
    34b4:	str	x0, [sp, #64]
    34b8:	ldr	x0, [sp, #64]
    34bc:	cmp	x0, #0x0
    34c0:	b.eq	34cc <grub_efi_open_protocol+0x7c>  // b.none
    34c4:	mov	x0, #0x0                   	// #0
    34c8:	b	34d0 <grub_efi_open_protocol+0x80>
    34cc:	ldr	x0, [sp, #56]
    34d0:	ldp	x29, x30, [sp], #80
    34d4:	ret
	...

00000000000034e8 <grub_efi_set_text_mode>:
    34e8:	stp	x29, x30, [sp, #-48]!
    34ec:	mov	x29, sp
    34f0:	str	w0, [sp, #28]
    34f4:	mov	x1, #0x0                   	// #0
    34f8:	adrp	x0, 0 <_start>
    34fc:	add	x0, x0, #0x0
    3500:	ldr	x0, [x0]
    3504:	bl	32bc <grub_efi_locate_protocol>
    3508:	str	x0, [sp, #40]
    350c:	ldr	x0, [sp, #40]
    3510:	cmp	x0, #0x0
    3514:	b.ne	3520 <grub_efi_set_text_mode+0x38>  // b.any
    3518:	mov	w0, #0x1                   	// #1
    351c:	b	359c <grub_efi_set_text_mode+0xb4>
    3520:	ldr	x0, [sp, #40]
    3524:	ldr	x4, [x0]
    3528:	add	x0, sp, #0x20
    352c:	mov	x3, #0x0                   	// #0
    3530:	mov	x2, #0x0                   	// #0
    3534:	mov	x1, x0
    3538:	ldr	x0, [sp, #40]
    353c:	blr	x4
    3540:	cmp	x0, #0x0
    3544:	b.eq	3550 <grub_efi_set_text_mode+0x68>  // b.none
    3548:	mov	w0, #0x0                   	// #0
    354c:	b	359c <grub_efi_set_text_mode+0xb4>
    3550:	ldr	w0, [sp, #28]
    3554:	cmp	w0, #0x0
    3558:	cset	w0, eq  // eq = none
    355c:	and	w0, w0, #0xff
    3560:	str	w0, [sp, #36]
    3564:	ldr	w0, [sp, #32]
    3568:	ldr	w1, [sp, #36]
    356c:	cmp	w1, w0
    3570:	b.eq	3598 <grub_efi_set_text_mode+0xb0>  // b.none
    3574:	ldr	x0, [sp, #40]
    3578:	ldr	x2, [x0, #8]
    357c:	ldr	w1, [sp, #36]
    3580:	ldr	x0, [sp, #40]
    3584:	blr	x2
    3588:	cmp	x0, #0x0
    358c:	b.eq	3598 <grub_efi_set_text_mode+0xb0>  // b.none
    3590:	mov	w0, #0x0                   	// #0
    3594:	b	359c <grub_efi_set_text_mode+0xb4>
    3598:	mov	w0, #0x1                   	// #1
    359c:	ldp	x29, x30, [sp], #48
    35a0:	ret
    35a4:	nop
	...

00000000000035b0 <grub_efi_stall>:
    35b0:	stp	x29, x30, [sp, #-32]!
    35b4:	mov	x29, sp
    35b8:	str	x0, [sp, #24]
    35bc:	adrp	x0, 0 <_start>
    35c0:	add	x0, x0, #0x0
    35c4:	ldr	x0, [x0]
    35c8:	ldr	x0, [x0]
    35cc:	ldr	x0, [x0, #96]
    35d0:	ldr	x1, [x0, #248]
    35d4:	ldr	x0, [sp, #24]
    35d8:	blr	x1
    35dc:	nop
    35e0:	ldp	x29, x30, [sp], #32
    35e4:	ret
	...

00000000000035f0 <grub_efi_get_loaded_image>:
    35f0:	stp	x29, x30, [sp, #-32]!
    35f4:	mov	x29, sp
    35f8:	str	x0, [sp, #24]
    35fc:	mov	w2, #0x2                   	// #2
    3600:	adrp	x0, 0 <_start>
    3604:	add	x0, x0, #0x0
    3608:	ldr	x1, [x0]
    360c:	ldr	x0, [sp, #24]
    3610:	bl	3450 <grub_efi_open_protocol>
    3614:	ldp	x29, x30, [sp], #32
    3618:	ret
    361c:	nop
	...

0000000000003628 <grub_reboot>:
    3628:	stp	x29, x30, [sp, #-16]!
    362c:	mov	x29, sp
    3630:	mov	w0, #0x1                   	// #1
    3634:	bl	d8 <grub_machine_fini>
    3638:	adrp	x0, 0 <_start>
    363c:	add	x0, x0, #0x0
    3640:	ldr	x0, [x0]
    3644:	ldr	x0, [x0]
    3648:	ldr	x0, [x0, #88]
    364c:	ldr	x4, [x0, #104]
    3650:	mov	x3, #0x0                   	// #0
    3654:	mov	x2, #0x0                   	// #0
    3658:	mov	x1, #0x0                   	// #0
    365c:	mov	w0, #0x0                   	// #0
    3660:	blr	x4
    3664:	b	3664 <grub_reboot+0x3c>
	...

0000000000003670 <grub_exit>:
    3670:	stp	x29, x30, [sp, #-16]!
    3674:	mov	x29, sp
    3678:	mov	w0, #0x1                   	// #1
    367c:	bl	d8 <grub_machine_fini>
    3680:	adrp	x0, 0 <_start>
    3684:	add	x0, x0, #0x0
    3688:	ldr	x0, [x0]
    368c:	ldr	x0, [x0]
    3690:	ldr	x0, [x0, #96]
    3694:	ldr	x4, [x0, #216]
    3698:	adrp	x0, 0 <_start>
    369c:	add	x0, x0, #0x0
    36a0:	ldr	x0, [x0]
    36a4:	ldr	x0, [x0]
    36a8:	mov	x3, #0x0                   	// #0
    36ac:	mov	x2, #0x0                   	// #0
    36b0:	mov	x1, #0x0                   	// #0
    36b4:	blr	x4
	...

00000000000036c8 <grub_efi_set_virtual_address_map>:
    36c8:	stp	x29, x30, [sp, #-64]!
    36cc:	mov	x29, sp
    36d0:	str	x0, [sp, #40]
    36d4:	str	x1, [sp, #32]
    36d8:	str	w2, [sp, #28]
    36dc:	str	x3, [sp, #16]
    36e0:	adrp	x0, 0 <_start>
    36e4:	add	x0, x0, #0x0
    36e8:	ldr	x0, [x0]
    36ec:	ldr	x0, [x0]
    36f0:	ldr	x0, [x0, #88]
    36f4:	str	x0, [sp, #56]
    36f8:	ldr	x0, [sp, #56]
    36fc:	ldr	x4, [x0, #56]
    3700:	ldr	x3, [sp, #16]
    3704:	ldr	w2, [sp, #28]
    3708:	ldr	x1, [sp, #32]
    370c:	ldr	x0, [sp, #40]
    3710:	blr	x4
    3714:	str	x0, [sp, #48]
    3718:	ldr	x0, [sp, #48]
    371c:	cmp	x0, #0x0
    3720:	b.ne	372c <grub_efi_set_virtual_address_map+0x64>  // b.any
    3724:	mov	w0, #0x0                   	// #0
    3728:	b	3740 <grub_efi_set_virtual_address_map+0x78>
    372c:	adrp	x0, 0 <_start>
    3730:	add	x0, x0, #0x0
    3734:	ldr	x1, [x0]
    3738:	mov	w0, #0x1d                  	// #29
    373c:	bl	ce54 <grub_error>
    3740:	ldp	x29, x30, [sp], #64
    3744:	ret
	...

0000000000003758 <grub_efi_set_variable>:
    3758:	stp	x29, x30, [sp, #-96]!
    375c:	mov	x29, sp
    3760:	str	x0, [sp, #40]
    3764:	str	x1, [sp, #32]
    3768:	str	x2, [sp, #24]
    376c:	str	x3, [sp, #16]
    3770:	ldr	x0, [sp, #40]
    3774:	bl	fe3c <grub_strlen>
    3778:	str	x0, [sp, #88]
    377c:	ldr	x0, [sp, #88]
    3780:	str	x0, [sp, #80]
    3784:	ldr	x0, [sp, #80]
    3788:	add	x0, x0, #0x1
    378c:	lsl	x0, x0, #1
    3790:	bl	8348 <grub_malloc>
    3794:	str	x0, [sp, #72]
    3798:	ldr	x0, [sp, #72]
    379c:	cmp	x0, #0x0
    37a0:	b.ne	37b8 <grub_efi_set_variable+0x60>  // b.any
    37a4:	adrp	x0, 0 <_start>
    37a8:	add	x0, x0, #0x0
    37ac:	ldr	x0, [x0]
    37b0:	ldr	w0, [x0]
    37b4:	b	3858 <grub_efi_set_variable+0x100>
    37b8:	mov	x4, #0x0                   	// #0
    37bc:	ldr	x3, [sp, #88]
    37c0:	ldr	x2, [sp, #40]
    37c4:	ldr	x1, [sp, #80]
    37c8:	ldr	x0, [sp, #72]
    37cc:	bl	2d48 <grub_utf8_to_utf16>
    37d0:	str	x0, [sp, #80]
    37d4:	ldr	x0, [sp, #80]
    37d8:	lsl	x0, x0, #1
    37dc:	ldr	x1, [sp, #72]
    37e0:	add	x0, x1, x0
    37e4:	strh	wzr, [x0]
    37e8:	adrp	x0, 0 <_start>
    37ec:	add	x0, x0, #0x0
    37f0:	ldr	x0, [x0]
    37f4:	ldr	x0, [x0]
    37f8:	ldr	x0, [x0, #88]
    37fc:	str	x0, [sp, #64]
    3800:	ldr	x0, [sp, #64]
    3804:	ldr	x5, [x0, #88]
    3808:	ldr	x4, [sp, #24]
    380c:	ldr	x3, [sp, #16]
    3810:	mov	w2, #0x7                   	// #7
    3814:	ldr	x1, [sp, #32]
    3818:	ldr	x0, [sp, #72]
    381c:	blr	x5
    3820:	str	x0, [sp, #56]
    3824:	ldr	x0, [sp, #72]
    3828:	bl	83ac <grub_free>
    382c:	ldr	x0, [sp, #56]
    3830:	cmp	x0, #0x0
    3834:	b.ne	3840 <grub_efi_set_variable+0xe8>  // b.any
    3838:	mov	w0, #0x0                   	// #0
    383c:	b	3858 <grub_efi_set_variable+0x100>
    3840:	ldr	x2, [sp, #40]
    3844:	adrp	x0, 0 <_start>
    3848:	add	x0, x0, #0x0
    384c:	ldr	x1, [x0]
    3850:	mov	w0, #0x1d                  	// #29
    3854:	bl	ce54 <grub_error>
    3858:	ldp	x29, x30, [sp], #96
    385c:	ret
	...

0000000000003878 <grub_efi_get_variable>:
    3878:	stp	x29, x30, [sp, #-112]!
    387c:	mov	x29, sp
    3880:	str	x0, [sp, #40]
    3884:	str	x1, [sp, #32]
    3888:	str	x2, [sp, #24]
    388c:	str	xzr, [sp, #56]
    3890:	ldr	x0, [sp, #24]
    3894:	str	xzr, [x0]
    3898:	ldr	x0, [sp, #40]
    389c:	bl	fe3c <grub_strlen>
    38a0:	str	x0, [sp, #104]
    38a4:	ldr	x0, [sp, #104]
    38a8:	str	x0, [sp, #96]
    38ac:	ldr	x0, [sp, #96]
    38b0:	add	x0, x0, #0x1
    38b4:	lsl	x0, x0, #1
    38b8:	bl	8348 <grub_malloc>
    38bc:	str	x0, [sp, #88]
    38c0:	ldr	x0, [sp, #88]
    38c4:	cmp	x0, #0x0
    38c8:	b.ne	38d4 <grub_efi_get_variable+0x5c>  // b.any
    38cc:	mov	x0, #0x0                   	// #0
    38d0:	b	39f8 <grub_efi_get_variable+0x180>
    38d4:	mov	x4, #0x0                   	// #0
    38d8:	ldr	x3, [sp, #104]
    38dc:	ldr	x2, [sp, #40]
    38e0:	ldr	x1, [sp, #96]
    38e4:	ldr	x0, [sp, #88]
    38e8:	bl	2d48 <grub_utf8_to_utf16>
    38ec:	str	x0, [sp, #96]
    38f0:	ldr	x0, [sp, #96]
    38f4:	lsl	x0, x0, #1
    38f8:	ldr	x1, [sp, #88]
    38fc:	add	x0, x1, x0
    3900:	strh	wzr, [x0]
    3904:	adrp	x0, 0 <_start>
    3908:	add	x0, x0, #0x0
    390c:	ldr	x0, [x0]
    3910:	ldr	x0, [x0]
    3914:	ldr	x0, [x0, #88]
    3918:	str	x0, [sp, #80]
    391c:	ldr	x0, [sp, #80]
    3920:	ldr	x5, [x0, #72]
    3924:	add	x0, sp, #0x38
    3928:	mov	x4, #0x0                   	// #0
    392c:	mov	x3, x0
    3930:	mov	x2, #0x0                   	// #0
    3934:	ldr	x1, [sp, #32]
    3938:	ldr	x0, [sp, #88]
    393c:	blr	x5
    3940:	str	x0, [sp, #72]
    3944:	ldr	x1, [sp, #72]
    3948:	mov	x0, #0x5                   	// #5
    394c:	movk	x0, #0x8000, lsl #48
    3950:	cmp	x1, x0
    3954:	b.ne	3964 <grub_efi_get_variable+0xec>  // b.any
    3958:	ldr	x0, [sp, #56]
    395c:	cmp	x0, #0x0
    3960:	b.ne	3974 <grub_efi_get_variable+0xfc>  // b.any
    3964:	ldr	x0, [sp, #88]
    3968:	bl	83ac <grub_free>
    396c:	mov	x0, #0x0                   	// #0
    3970:	b	39f8 <grub_efi_get_variable+0x180>
    3974:	ldr	x0, [sp, #56]
    3978:	bl	8348 <grub_malloc>
    397c:	str	x0, [sp, #64]
    3980:	ldr	x0, [sp, #64]
    3984:	cmp	x0, #0x0
    3988:	b.ne	399c <grub_efi_get_variable+0x124>  // b.any
    398c:	ldr	x0, [sp, #88]
    3990:	bl	83ac <grub_free>
    3994:	mov	x0, #0x0                   	// #0
    3998:	b	39f8 <grub_efi_get_variable+0x180>
    399c:	ldr	x0, [sp, #80]
    39a0:	ldr	x5, [x0, #72]
    39a4:	add	x0, sp, #0x38
    39a8:	ldr	x4, [sp, #64]
    39ac:	mov	x3, x0
    39b0:	mov	x2, #0x0                   	// #0
    39b4:	ldr	x1, [sp, #32]
    39b8:	ldr	x0, [sp, #88]
    39bc:	blr	x5
    39c0:	str	x0, [sp, #72]
    39c4:	ldr	x0, [sp, #88]
    39c8:	bl	83ac <grub_free>
    39cc:	ldr	x0, [sp, #72]
    39d0:	cmp	x0, #0x0
    39d4:	b.ne	39ec <grub_efi_get_variable+0x174>  // b.any
    39d8:	ldr	x1, [sp, #56]
    39dc:	ldr	x0, [sp, #24]
    39e0:	str	x1, [x0]
    39e4:	ldr	x0, [sp, #64]
    39e8:	b	39f8 <grub_efi_get_variable+0x180>
    39ec:	ldr	x0, [sp, #64]
    39f0:	bl	83ac <grub_free>
    39f4:	mov	x0, #0x0                   	// #0
    39f8:	ldp	x29, x30, [sp], #112
    39fc:	ret
	...

0000000000003a08 <grub_efi_modules_addr>:
    3a08:	stp	x29, x30, [sp, #-80]!
    3a0c:	mov	x29, sp
    3a10:	adrp	x0, 0 <_start>
    3a14:	add	x0, x0, #0x0
    3a18:	ldr	x0, [x0]
    3a1c:	ldr	x0, [x0]
    3a20:	bl	35f0 <grub_efi_get_loaded_image>
    3a24:	str	x0, [sp, #56]
    3a28:	ldr	x0, [sp, #56]
    3a2c:	cmp	x0, #0x0
    3a30:	b.ne	3a3c <grub_efi_modules_addr+0x34>  // b.any
    3a34:	mov	x0, #0x0                   	// #0
    3a38:	b	3b30 <grub_efi_modules_addr+0x128>
    3a3c:	ldr	x0, [sp, #56]
    3a40:	ldr	x0, [x0, #64]
    3a44:	str	x0, [sp, #48]
    3a48:	ldr	x0, [sp, #48]
    3a4c:	add	x0, x0, #0x84
    3a50:	str	x0, [sp, #40]
    3a54:	ldr	x0, [sp, #40]
    3a58:	ldrh	w0, [x0, #16]
    3a5c:	and	x0, x0, #0xffff
    3a60:	add	x0, x0, #0x14
    3a64:	ldr	x1, [sp, #40]
    3a68:	add	x0, x1, x0
    3a6c:	str	x0, [sp, #32]
    3a70:	strh	wzr, [sp, #70]
    3a74:	ldr	x0, [sp, #32]
    3a78:	str	x0, [sp, #72]
    3a7c:	b	3ab8 <grub_efi_modules_addr+0xb0>
    3a80:	ldr	x2, [sp, #72]
    3a84:	adrp	x0, 0 <_start>
    3a88:	add	x0, x0, #0x0
    3a8c:	ldr	x1, [x0]
    3a90:	mov	x0, x2
    3a94:	bl	f660 <grub_strcmp>
    3a98:	cmp	w0, #0x0
    3a9c:	b.eq	3ad0 <grub_efi_modules_addr+0xc8>  // b.none
    3aa0:	ldrh	w0, [sp, #70]
    3aa4:	add	w0, w0, #0x1
    3aa8:	strh	w0, [sp, #70]
    3aac:	ldr	x0, [sp, #72]
    3ab0:	add	x0, x0, #0x28
    3ab4:	str	x0, [sp, #72]
    3ab8:	ldr	x0, [sp, #40]
    3abc:	ldrh	w0, [x0, #2]
    3ac0:	ldrh	w1, [sp, #70]
    3ac4:	cmp	w1, w0
    3ac8:	b.cc	3a80 <grub_efi_modules_addr+0x78>  // b.lo, b.ul, b.last
    3acc:	b	3ad4 <grub_efi_modules_addr+0xcc>
    3ad0:	nop
    3ad4:	ldr	x0, [sp, #40]
    3ad8:	ldrh	w0, [x0, #2]
    3adc:	ldrh	w1, [sp, #70]
    3ae0:	cmp	w1, w0
    3ae4:	b.ne	3af0 <grub_efi_modules_addr+0xe8>  // b.any
    3ae8:	mov	x0, #0x0                   	// #0
    3aec:	b	3b30 <grub_efi_modules_addr+0x128>
    3af0:	ldr	x0, [sp, #56]
    3af4:	ldr	x1, [x0, #64]
    3af8:	ldr	x0, [sp, #72]
    3afc:	ldr	w0, [x0, #12]
    3b00:	mov	w0, w0
    3b04:	add	x0, x1, x0
    3b08:	str	x0, [sp, #24]
    3b0c:	ldr	x0, [sp, #24]
    3b10:	ldr	w1, [x0]
    3b14:	mov	w0, #0x696d                	// #26989
    3b18:	movk	w0, #0x676d, lsl #16
    3b1c:	cmp	w1, w0
    3b20:	b.eq	3b2c <grub_efi_modules_addr+0x124>  // b.none
    3b24:	mov	x0, #0x0                   	// #0
    3b28:	b	3b30 <grub_efi_modules_addr+0x128>
    3b2c:	ldr	x0, [sp, #24]
    3b30:	ldp	x29, x30, [sp], #80
    3b34:	ret
	...

0000000000003b48 <grub_efi_get_filename>:
    3b48:	stp	x29, x30, [sp, #-112]!
    3b4c:	mov	x29, sp
    3b50:	str	x0, [sp, #24]
    3b54:	str	xzr, [sp, #64]
    3b58:	str	xzr, [sp, #88]
    3b5c:	ldr	x0, [sp, #24]
    3b60:	cmp	x0, #0x0
    3b64:	b.ne	3b70 <grub_efi_get_filename+0x28>  // b.any
    3b68:	mov	x0, #0x0                   	// #0
    3b6c:	b	3e4c <grub_efi_get_filename+0x304>
    3b70:	ldr	x0, [sp, #24]
    3b74:	str	x0, [sp, #80]
    3b78:	ldr	x0, [sp, #80]
    3b7c:	ldrb	w0, [x0]
    3b80:	and	w0, w0, #0x7f
    3b84:	strb	w0, [sp, #63]
    3b88:	ldr	x0, [sp, #80]
    3b8c:	ldrb	w0, [x0, #1]
    3b90:	strb	w0, [sp, #62]
    3b94:	ldrb	w0, [sp, #63]
    3b98:	cmp	w0, #0x7f
    3b9c:	b.eq	3c08 <grub_efi_get_filename+0xc0>  // b.none
    3ba0:	ldrb	w0, [sp, #63]
    3ba4:	cmp	w0, #0x4
    3ba8:	b.ne	3bec <grub_efi_get_filename+0xa4>  // b.any
    3bac:	ldrb	w0, [sp, #62]
    3bb0:	cmp	w0, #0x4
    3bb4:	b.ne	3bec <grub_efi_get_filename+0xa4>  // b.any
    3bb8:	ldr	x0, [sp, #80]
    3bbc:	ldrh	w0, [x0, #2]
    3bc0:	sub	w0, w0, #0x4
    3bc4:	sxtw	x0, w0
    3bc8:	lsr	x0, x0, #1
    3bcc:	strh	w0, [sp, #60]
    3bd0:	ldrh	w0, [sp, #60]
    3bd4:	lsl	w0, w0, #2
    3bd8:	add	w0, w0, #0x2
    3bdc:	sxtw	x0, w0
    3be0:	ldr	x1, [sp, #88]
    3be4:	add	x0, x1, x0
    3be8:	str	x0, [sp, #88]
    3bec:	ldr	x0, [sp, #80]
    3bf0:	ldrh	w0, [x0, #2]
    3bf4:	and	x0, x0, #0xffff
    3bf8:	ldr	x1, [sp, #80]
    3bfc:	add	x0, x1, x0
    3c00:	str	x0, [sp, #80]
    3c04:	b	3b78 <grub_efi_get_filename+0x30>
    3c08:	nop
    3c0c:	ldr	x0, [sp, #88]
    3c10:	cmp	x0, #0x0
    3c14:	b.ne	3c20 <grub_efi_get_filename+0xd8>  // b.any
    3c18:	mov	x0, #0x0                   	// #0
    3c1c:	b	3e4c <grub_efi_get_filename+0x304>
    3c20:	ldr	x0, [sp, #24]
    3c24:	str	x0, [sp, #80]
    3c28:	ldr	x0, [sp, #88]
    3c2c:	bl	8348 <grub_malloc>
    3c30:	str	x0, [sp, #64]
    3c34:	ldr	x0, [sp, #64]
    3c38:	str	x0, [sp, #104]
    3c3c:	ldr	x0, [sp, #64]
    3c40:	cmp	x0, #0x0
    3c44:	b.ne	3c50 <grub_efi_get_filename+0x108>  // b.any
    3c48:	mov	x0, #0x0                   	// #0
    3c4c:	b	3e4c <grub_efi_get_filename+0x304>
    3c50:	ldr	x0, [sp, #80]
    3c54:	ldrb	w0, [x0]
    3c58:	and	w0, w0, #0x7f
    3c5c:	strb	w0, [sp, #59]
    3c60:	ldr	x0, [sp, #80]
    3c64:	ldrb	w0, [x0, #1]
    3c68:	strb	w0, [sp, #58]
    3c6c:	ldrb	w0, [sp, #59]
    3c70:	cmp	w0, #0x7f
    3c74:	b.eq	3d88 <grub_efi_get_filename+0x240>  // b.none
    3c78:	ldrb	w0, [sp, #59]
    3c7c:	cmp	w0, #0x4
    3c80:	b.ne	3d6c <grub_efi_get_filename+0x224>  // b.any
    3c84:	ldrb	w0, [sp, #58]
    3c88:	cmp	w0, #0x4
    3c8c:	b.ne	3d6c <grub_efi_get_filename+0x224>  // b.any
    3c90:	ldr	x0, [sp, #104]
    3c94:	add	x1, x0, #0x1
    3c98:	str	x1, [sp, #104]
    3c9c:	mov	w1, #0x2f                  	// #47
    3ca0:	strb	w1, [x0]
    3ca4:	ldr	x0, [sp, #80]
    3ca8:	ldrh	w0, [x0, #2]
    3cac:	sub	w0, w0, #0x4
    3cb0:	sxtw	x0, w0
    3cb4:	lsr	x0, x0, #1
    3cb8:	strh	w0, [sp, #78]
    3cbc:	ldr	x0, [sp, #80]
    3cc0:	str	x0, [sp, #48]
    3cc4:	b	3cd4 <grub_efi_get_filename+0x18c>
    3cc8:	ldrh	w0, [sp, #78]
    3ccc:	sub	w0, w0, #0x1
    3cd0:	strh	w0, [sp, #78]
    3cd4:	ldrh	w0, [sp, #78]
    3cd8:	cmp	w0, #0x0
    3cdc:	b.eq	3d04 <grub_efi_get_filename+0x1bc>  // b.none
    3ce0:	ldrh	w0, [sp, #78]
    3ce4:	sub	w0, w0, #0x1
    3ce8:	ldr	x1, [sp, #48]
    3cec:	sxtw	x0, w0
    3cf0:	lsl	x0, x0, #1
    3cf4:	add	x0, x1, x0
    3cf8:	ldrh	w0, [x0, #4]
    3cfc:	cmp	w0, #0x0
    3d00:	b.eq	3cc8 <grub_efi_get_filename+0x180>  // b.none
    3d04:	ldrh	w0, [sp, #78]
    3d08:	lsl	x0, x0, #1
    3d0c:	bl	8348 <grub_malloc>
    3d10:	str	x0, [sp, #40]
    3d14:	ldr	x0, [sp, #40]
    3d18:	cmp	x0, #0x0
    3d1c:	b.ne	3d30 <grub_efi_get_filename+0x1e8>  // b.any
    3d20:	ldr	x0, [sp, #64]
    3d24:	bl	83ac <grub_free>
    3d28:	mov	x0, #0x0                   	// #0
    3d2c:	b	3e4c <grub_efi_get_filename+0x304>
    3d30:	ldr	x0, [sp, #48]
    3d34:	add	x1, x0, #0x4
    3d38:	ldrh	w0, [sp, #78]
    3d3c:	lsl	x0, x0, #1
    3d40:	mov	x2, x0
    3d44:	ldr	x0, [sp, #40]
    3d48:	bl	2b48 <grub_memcpy>
    3d4c:	mov	x1, x0
    3d50:	ldrh	w0, [sp, #78]
    3d54:	mov	x2, x0
    3d58:	ldr	x0, [sp, #104]
    3d5c:	bl	2f38 <grub_utf16_to_utf8>
    3d60:	str	x0, [sp, #104]
    3d64:	ldr	x0, [sp, #40]
    3d68:	bl	83ac <grub_free>
    3d6c:	ldr	x0, [sp, #80]
    3d70:	ldrh	w0, [x0, #2]
    3d74:	and	x0, x0, #0xffff
    3d78:	ldr	x1, [sp, #80]
    3d7c:	add	x0, x1, x0
    3d80:	str	x0, [sp, #80]
    3d84:	b	3c50 <grub_efi_get_filename+0x108>
    3d88:	nop
    3d8c:	ldr	x0, [sp, #104]
    3d90:	strb	wzr, [x0]
    3d94:	ldr	x0, [sp, #64]
    3d98:	str	x0, [sp, #96]
    3d9c:	ldr	x0, [sp, #64]
    3da0:	str	x0, [sp, #104]
    3da4:	b	3e30 <grub_efi_get_filename+0x2e8>
    3da8:	ldr	x0, [sp, #96]
    3dac:	ldrb	w0, [x0]
    3db0:	cmp	w0, #0x5c
    3db4:	b.eq	3dc8 <grub_efi_get_filename+0x280>  // b.none
    3db8:	ldr	x0, [sp, #96]
    3dbc:	ldrb	w0, [x0]
    3dc0:	cmp	w0, #0x2f
    3dc4:	b.ne	3e10 <grub_efi_get_filename+0x2c8>  // b.any
    3dc8:	ldr	x0, [sp, #104]
    3dcc:	add	x1, x0, #0x1
    3dd0:	str	x1, [sp, #104]
    3dd4:	mov	w1, #0x2f                  	// #47
    3dd8:	strb	w1, [x0]
    3ddc:	b	3dec <grub_efi_get_filename+0x2a4>
    3de0:	ldr	x0, [sp, #96]
    3de4:	add	x0, x0, #0x1
    3de8:	str	x0, [sp, #96]
    3dec:	ldr	x0, [sp, #96]
    3df0:	ldrb	w0, [x0]
    3df4:	cmp	w0, #0x5c
    3df8:	b.eq	3de0 <grub_efi_get_filename+0x298>  // b.none
    3dfc:	ldr	x0, [sp, #96]
    3e00:	ldrb	w0, [x0]
    3e04:	cmp	w0, #0x2f
    3e08:	b.eq	3de0 <grub_efi_get_filename+0x298>  // b.none
    3e0c:	b	3e30 <grub_efi_get_filename+0x2e8>
    3e10:	ldr	x1, [sp, #96]
    3e14:	add	x0, x1, #0x1
    3e18:	str	x0, [sp, #96]
    3e1c:	ldr	x0, [sp, #104]
    3e20:	add	x2, x0, #0x1
    3e24:	str	x2, [sp, #104]
    3e28:	ldrb	w1, [x1]
    3e2c:	strb	w1, [x0]
    3e30:	ldr	x0, [sp, #96]
    3e34:	ldrb	w0, [x0]
    3e38:	cmp	w0, #0x0
    3e3c:	b.ne	3da8 <grub_efi_get_filename+0x260>  // b.any
    3e40:	ldr	x0, [sp, #104]
    3e44:	strb	wzr, [x0]
    3e48:	ldr	x0, [sp, #64]
    3e4c:	ldp	x29, x30, [sp], #112
    3e50:	ret

0000000000003e54 <grub_efi_get_device_path>:
    3e54:	stp	x29, x30, [sp, #-32]!
    3e58:	mov	x29, sp
    3e5c:	str	x0, [sp, #24]
    3e60:	mov	w2, #0x2                   	// #2
    3e64:	adrp	x0, 0 <_start>
    3e68:	add	x0, x0, #0x0
    3e6c:	ldr	x1, [x0]
    3e70:	ldr	x0, [sp, #24]
    3e74:	bl	3450 <grub_efi_open_protocol>
    3e78:	ldp	x29, x30, [sp], #32
    3e7c:	ret
	...

0000000000003e88 <grub_efi_find_last_device_path>:
    3e88:	sub	sp, sp, #0x20
    3e8c:	str	x0, [sp, #8]
    3e90:	ldr	x0, [sp, #8]
    3e94:	ldrb	w0, [x0]
    3e98:	and	w0, w0, #0x7f
    3e9c:	cmp	w0, #0x7f
    3ea0:	b.ne	3ebc <grub_efi_find_last_device_path+0x34>  // b.any
    3ea4:	ldr	x0, [sp, #8]
    3ea8:	ldrb	w0, [x0, #1]
    3eac:	cmp	w0, #0xff
    3eb0:	b.ne	3ebc <grub_efi_find_last_device_path+0x34>  // b.any
    3eb4:	mov	x0, #0x0                   	// #0
    3eb8:	b	3f28 <grub_efi_find_last_device_path+0xa0>
    3ebc:	ldr	x0, [sp, #8]
    3ec0:	str	x0, [sp, #16]
    3ec4:	ldr	x0, [sp, #16]
    3ec8:	ldrh	w0, [x0, #2]
    3ecc:	and	x0, x0, #0xffff
    3ed0:	ldr	x1, [sp, #16]
    3ed4:	add	x0, x1, x0
    3ed8:	str	x0, [sp, #24]
    3edc:	b	3f00 <grub_efi_find_last_device_path+0x78>
    3ee0:	ldr	x0, [sp, #24]
    3ee4:	str	x0, [sp, #16]
    3ee8:	ldr	x0, [sp, #24]
    3eec:	ldrh	w0, [x0, #2]
    3ef0:	and	x0, x0, #0xffff
    3ef4:	ldr	x1, [sp, #24]
    3ef8:	add	x0, x1, x0
    3efc:	str	x0, [sp, #24]
    3f00:	ldr	x0, [sp, #24]
    3f04:	ldrb	w0, [x0]
    3f08:	and	w0, w0, #0x7f
    3f0c:	cmp	w0, #0x7f
    3f10:	b.ne	3ee0 <grub_efi_find_last_device_path+0x58>  // b.any
    3f14:	ldr	x0, [sp, #24]
    3f18:	ldrb	w0, [x0, #1]
    3f1c:	cmp	w0, #0xff
    3f20:	b.ne	3ee0 <grub_efi_find_last_device_path+0x58>  // b.any
    3f24:	ldr	x0, [sp, #16]
    3f28:	add	sp, sp, #0x20
    3f2c:	ret

0000000000003f30 <grub_efi_duplicate_device_path>:
    3f30:	stp	x29, x30, [sp, #-48]!
    3f34:	mov	x29, sp
    3f38:	str	x0, [sp, #24]
    3f3c:	str	xzr, [sp, #32]
    3f40:	ldr	x0, [sp, #24]
    3f44:	str	x0, [sp, #40]
    3f48:	ldr	x0, [sp, #40]
    3f4c:	ldrh	w0, [x0, #2]
    3f50:	and	x0, x0, #0xffff
    3f54:	ldr	x1, [sp, #32]
    3f58:	add	x0, x1, x0
    3f5c:	str	x0, [sp, #32]
    3f60:	ldr	x0, [sp, #40]
    3f64:	ldrb	w0, [x0]
    3f68:	and	w0, w0, #0x7f
    3f6c:	cmp	w0, #0x7f
    3f70:	b.ne	3f84 <grub_efi_duplicate_device_path+0x54>  // b.any
    3f74:	ldr	x0, [sp, #40]
    3f78:	ldrb	w0, [x0, #1]
    3f7c:	cmp	w0, #0xff
    3f80:	b.eq	3fa0 <grub_efi_duplicate_device_path+0x70>  // b.none
    3f84:	ldr	x0, [sp, #40]
    3f88:	ldrh	w0, [x0, #2]
    3f8c:	and	x0, x0, #0xffff
    3f90:	ldr	x1, [sp, #40]
    3f94:	add	x0, x1, x0
    3f98:	str	x0, [sp, #40]
    3f9c:	b	3f48 <grub_efi_duplicate_device_path+0x18>
    3fa0:	nop
    3fa4:	ldr	x0, [sp, #32]
    3fa8:	bl	8348 <grub_malloc>
    3fac:	str	x0, [sp, #40]
    3fb0:	ldr	x0, [sp, #40]
    3fb4:	cmp	x0, #0x0
    3fb8:	b.ne	3fc4 <grub_efi_duplicate_device_path+0x94>  // b.any
    3fbc:	mov	x0, #0x0                   	// #0
    3fc0:	b	3fd8 <grub_efi_duplicate_device_path+0xa8>
    3fc4:	ldr	x2, [sp, #32]
    3fc8:	ldr	x1, [sp, #24]
    3fcc:	ldr	x0, [sp, #40]
    3fd0:	bl	2b48 <grub_memcpy>
    3fd4:	ldr	x0, [sp, #40]
    3fd8:	ldp	x29, x30, [sp], #48
    3fdc:	ret

0000000000003fe0 <dump_vendor_path>:
    3fe0:	sub	sp, sp, #0x60
    3fe4:	stp	x29, x30, [sp, #48]
    3fe8:	add	x29, sp, #0x30
    3fec:	str	x0, [sp, #72]
    3ff0:	str	x1, [sp, #64]
    3ff4:	ldr	x0, [sp, #64]
    3ff8:	ldrh	w0, [x0, #2]
    3ffc:	sub	w0, w0, #0x14
    4000:	str	w0, [sp, #88]
    4004:	ldr	x0, [sp, #64]
    4008:	ldr	w1, [x0, #4]
    400c:	ldr	x0, [sp, #64]
    4010:	ldrh	w0, [x0, #8]
    4014:	mov	w8, w0
    4018:	ldr	x0, [sp, #64]
    401c:	ldrh	w0, [x0, #10]
    4020:	mov	w9, w0
    4024:	ldr	x0, [sp, #64]
    4028:	ldrb	w0, [x0, #12]
    402c:	mov	w10, w0
    4030:	ldr	x0, [sp, #64]
    4034:	ldrb	w0, [x0, #13]
    4038:	mov	w11, w0
    403c:	ldr	x0, [sp, #64]
    4040:	ldrb	w0, [x0, #14]
    4044:	mov	w7, w0
    4048:	ldr	x0, [sp, #64]
    404c:	ldrb	w0, [x0, #15]
    4050:	mov	w2, w0
    4054:	ldr	x0, [sp, #64]
    4058:	ldrb	w0, [x0, #16]
    405c:	mov	w3, w0
    4060:	ldr	x0, [sp, #64]
    4064:	ldrb	w0, [x0, #17]
    4068:	mov	w4, w0
    406c:	ldr	x0, [sp, #64]
    4070:	ldrb	w0, [x0, #18]
    4074:	mov	w5, w0
    4078:	ldr	x0, [sp, #64]
    407c:	ldrb	w0, [x0, #19]
    4080:	mov	w6, w0
    4084:	ldr	w0, [sp, #88]
    4088:	str	w0, [sp, #40]
    408c:	str	w6, [sp, #32]
    4090:	str	w5, [sp, #24]
    4094:	str	w4, [sp, #16]
    4098:	str	w3, [sp, #8]
    409c:	str	w2, [sp]
    40a0:	mov	w6, w11
    40a4:	mov	w5, w10
    40a8:	mov	w4, w9
    40ac:	mov	w3, w8
    40b0:	mov	w2, w1
    40b4:	ldr	x1, [sp, #72]
    40b8:	adrp	x0, 0 <_start>
    40bc:	add	x0, x0, #0x0
    40c0:	ldr	x0, [x0]
    40c4:	bl	f1b4 <grub_err_printf>
    40c8:	ldr	x0, [sp, #64]
    40cc:	ldrh	w0, [x0, #2]
    40d0:	cmp	w0, #0x14
    40d4:	b.ls	4120 <dump_vendor_path+0x140>  // b.plast
    40d8:	str	wzr, [sp, #92]
    40dc:	b	4110 <dump_vendor_path+0x130>
    40e0:	ldr	x1, [sp, #64]
    40e4:	ldr	w0, [sp, #92]
    40e8:	add	x0, x1, x0
    40ec:	ldrb	w0, [x0, #20]
    40f0:	mov	w1, w0
    40f4:	adrp	x0, 0 <_start>
    40f8:	add	x0, x0, #0x0
    40fc:	ldr	x0, [x0]
    4100:	bl	f1b4 <grub_err_printf>
    4104:	ldr	w0, [sp, #92]
    4108:	add	w0, w0, #0x1
    410c:	str	w0, [sp, #92]
    4110:	ldr	w1, [sp, #92]
    4114:	ldr	w0, [sp, #88]
    4118:	cmp	w1, w0
    411c:	b.cc	40e0 <dump_vendor_path+0x100>  // b.lo, b.ul, b.last
    4120:	adrp	x0, 0 <_start>
    4124:	add	x0, x0, #0x0
    4128:	ldr	x0, [x0]
    412c:	bl	f1b4 <grub_err_printf>
    4130:	nop
    4134:	ldp	x29, x30, [sp, #48]
    4138:	add	sp, sp, #0x60
    413c:	ret
	...

0000000000004158 <grub_efi_print_device_path>:
    4158:	sub	sp, sp, #0x190
    415c:	stp	x29, x30, [sp, #112]
    4160:	add	x29, sp, #0x70
    4164:	stp	x19, x20, [sp, #128]
    4168:	str	x21, [sp, #144]
    416c:	str	x0, [sp, #168]
    4170:	ldr	x0, [sp, #168]
    4174:	ldrb	w0, [x0]
    4178:	and	w0, w0, #0x7f
    417c:	strb	w0, [sp, #399]
    4180:	ldr	x0, [sp, #168]
    4184:	ldrb	w0, [x0, #1]
    4188:	strb	w0, [sp, #398]
    418c:	ldr	x0, [sp, #168]
    4190:	ldrh	w0, [x0, #2]
    4194:	strh	w0, [sp, #396]
    4198:	ldrb	w0, [sp, #399]
    419c:	cmp	w0, #0x7f
    41a0:	b.eq	41f0 <grub_efi_print_device_path+0x98>  // b.none
    41a4:	cmp	w0, #0x7f
    41a8:	b.gt	4f38 <grub_efi_print_device_path+0xde0>
    41ac:	cmp	w0, #0x5
    41b0:	b.eq	4ecc <grub_efi_print_device_path+0xd74>  // b.none
    41b4:	cmp	w0, #0x5
    41b8:	b.gt	4f38 <grub_efi_print_device_path+0xde0>
    41bc:	cmp	w0, #0x4
    41c0:	b.eq	4b94 <grub_efi_print_device_path+0xa3c>  // b.none
    41c4:	cmp	w0, #0x4
    41c8:	b.gt	4f38 <grub_efi_print_device_path+0xde0>
    41cc:	cmp	w0, #0x3
    41d0:	b.eq	4598 <grub_efi_print_device_path+0x440>  // b.none
    41d4:	cmp	w0, #0x3
    41d8:	b.gt	4f38 <grub_efi_print_device_path+0xde0>
    41dc:	cmp	w0, #0x1
    41e0:	b.eq	424c <grub_efi_print_device_path+0xf4>  // b.none
    41e4:	cmp	w0, #0x2
    41e8:	b.eq	4388 <grub_efi_print_device_path+0x230>  // b.none
    41ec:	b	4f38 <grub_efi_print_device_path+0xde0>
    41f0:	ldrb	w0, [sp, #398]
    41f4:	cmp	w0, #0x1
    41f8:	b.eq	4218 <grub_efi_print_device_path+0xc0>  // b.none
    41fc:	cmp	w0, #0xff
    4200:	b.ne	422c <grub_efi_print_device_path+0xd4>  // b.any
    4204:	adrp	x0, 0 <_start>
    4208:	add	x0, x0, #0x0
    420c:	ldr	x0, [x0]
    4210:	bl	f1b4 <grub_err_printf>
    4214:	b	4248 <grub_efi_print_device_path+0xf0>
    4218:	adrp	x0, 0 <_start>
    421c:	add	x0, x0, #0x0
    4220:	ldr	x0, [x0]
    4224:	bl	f1b4 <grub_err_printf>
    4228:	b	4248 <grub_efi_print_device_path+0xf0>
    422c:	ldrb	w0, [sp, #398]
    4230:	mov	w1, w0
    4234:	adrp	x0, 0 <_start>
    4238:	add	x0, x0, #0x0
    423c:	ldr	x0, [x0]
    4240:	bl	f1b4 <grub_err_printf>
    4244:	nop
    4248:	b	4f5c <grub_efi_print_device_path+0xe04>
    424c:	ldrb	w0, [sp, #398]
    4250:	cmp	w0, #0x5
    4254:	b.eq	4340 <grub_efi_print_device_path+0x1e8>  // b.none
    4258:	cmp	w0, #0x5
    425c:	b.gt	4368 <grub_efi_print_device_path+0x210>
    4260:	cmp	w0, #0x4
    4264:	b.eq	4328 <grub_efi_print_device_path+0x1d0>  // b.none
    4268:	cmp	w0, #0x4
    426c:	b.gt	4368 <grub_efi_print_device_path+0x210>
    4270:	cmp	w0, #0x3
    4274:	b.eq	42f0 <grub_efi_print_device_path+0x198>  // b.none
    4278:	cmp	w0, #0x3
    427c:	b.gt	4368 <grub_efi_print_device_path+0x210>
    4280:	cmp	w0, #0x1
    4284:	b.eq	4294 <grub_efi_print_device_path+0x13c>  // b.none
    4288:	cmp	w0, #0x2
    428c:	b.eq	42c8 <grub_efi_print_device_path+0x170>  // b.none
    4290:	b	4368 <grub_efi_print_device_path+0x210>
    4294:	ldr	x0, [sp, #168]
    4298:	str	x0, [sp, #184]
    429c:	ldr	x0, [sp, #184]
    42a0:	ldrb	w0, [x0, #4]
    42a4:	mov	w1, w0
    42a8:	ldr	x0, [sp, #184]
    42ac:	ldrb	w0, [x0, #5]
    42b0:	mov	w2, w0
    42b4:	adrp	x0, 0 <_start>
    42b8:	add	x0, x0, #0x0
    42bc:	ldr	x0, [x0]
    42c0:	bl	f1b4 <grub_err_printf>
    42c4:	b	4384 <grub_efi_print_device_path+0x22c>
    42c8:	ldr	x0, [sp, #168]
    42cc:	str	x0, [sp, #192]
    42d0:	ldr	x0, [sp, #192]
    42d4:	ldrb	w0, [x0, #4]
    42d8:	mov	w1, w0
    42dc:	adrp	x0, 0 <_start>
    42e0:	add	x0, x0, #0x0
    42e4:	ldr	x0, [x0]
    42e8:	bl	f1b4 <grub_err_printf>
    42ec:	b	4384 <grub_efi_print_device_path+0x22c>
    42f0:	ldr	x0, [sp, #168]
    42f4:	str	x0, [sp, #200]
    42f8:	ldr	x0, [sp, #200]
    42fc:	ldr	w1, [x0, #4]
    4300:	ldr	x0, [sp, #200]
    4304:	ldr	x2, [x0, #8]
    4308:	ldr	x0, [sp, #200]
    430c:	ldr	x0, [x0, #16]
    4310:	mov	x3, x0
    4314:	adrp	x0, 0 <_start>
    4318:	add	x0, x0, #0x0
    431c:	ldr	x0, [x0]
    4320:	bl	f1b4 <grub_err_printf>
    4324:	b	4384 <grub_efi_print_device_path+0x22c>
    4328:	ldr	x1, [sp, #168]
    432c:	adrp	x0, 0 <_start>
    4330:	add	x0, x0, #0x0
    4334:	ldr	x0, [x0]
    4338:	bl	3fe0 <dump_vendor_path>
    433c:	b	4384 <grub_efi_print_device_path+0x22c>
    4340:	ldr	x0, [sp, #168]
    4344:	str	x0, [sp, #208]
    4348:	ldr	x0, [sp, #208]
    434c:	ldr	w0, [x0, #4]
    4350:	mov	w1, w0
    4354:	adrp	x0, 0 <_start>
    4358:	add	x0, x0, #0x0
    435c:	ldr	x0, [x0]
    4360:	bl	f1b4 <grub_err_printf>
    4364:	b	4384 <grub_efi_print_device_path+0x22c>
    4368:	ldrb	w0, [sp, #398]
    436c:	mov	w1, w0
    4370:	adrp	x0, 0 <_start>
    4374:	add	x0, x0, #0x0
    4378:	ldr	x0, [x0]
    437c:	bl	f1b4 <grub_err_printf>
    4380:	nop
    4384:	b	4f5c <grub_efi_print_device_path+0xe04>
    4388:	ldrb	w0, [sp, #398]
    438c:	cmp	w0, #0x1
    4390:	b.eq	43a0 <grub_efi_print_device_path+0x248>  // b.none
    4394:	cmp	w0, #0x2
    4398:	b.eq	43d0 <grub_efi_print_device_path+0x278>  // b.none
    439c:	b	4578 <grub_efi_print_device_path+0x420>
    43a0:	ldr	x0, [sp, #168]
    43a4:	str	x0, [sp, #216]
    43a8:	ldr	x0, [sp, #216]
    43ac:	ldr	w1, [x0, #4]
    43b0:	ldr	x0, [sp, #216]
    43b4:	ldr	w0, [x0, #8]
    43b8:	mov	w2, w0
    43bc:	adrp	x0, 0 <_start>
    43c0:	add	x0, x0, #0x0
    43c4:	ldr	x0, [x0]
    43c8:	bl	f1b4 <grub_err_printf>
    43cc:	b	4594 <grub_efi_print_device_path+0x43c>
    43d0:	ldr	x0, [sp, #168]
    43d4:	str	x0, [sp, #224]
    43d8:	adrp	x0, 0 <_start>
    43dc:	add	x0, x0, #0x0
    43e0:	ldr	x0, [x0]
    43e4:	bl	f1b4 <grub_err_printf>
    43e8:	ldr	x0, [sp, #168]
    43ec:	ldrb	w0, [x0, #16]
    43f0:	cmp	w0, #0x0
    43f4:	b.ne	4418 <grub_efi_print_device_path+0x2c0>  // b.any
    43f8:	ldr	x0, [sp, #224]
    43fc:	ldr	w0, [x0, #4]
    4400:	mov	w1, w0
    4404:	adrp	x0, 0 <_start>
    4408:	add	x0, x0, #0x0
    440c:	ldr	x0, [x0]
    4410:	bl	f1b4 <grub_err_printf>
    4414:	b	4434 <grub_efi_print_device_path+0x2dc>
    4418:	ldr	x0, [sp, #168]
    441c:	add	x0, x0, #0x10
    4420:	mov	x1, x0
    4424:	adrp	x0, 0 <_start>
    4428:	add	x0, x0, #0x0
    442c:	ldr	x0, [x0]
    4430:	bl	f1b4 <grub_err_printf>
    4434:	ldr	x0, [sp, #168]
    4438:	add	x19, x0, #0x10
    443c:	ldr	x0, [sp, #168]
    4440:	add	x0, x0, #0x10
    4444:	bl	fe3c <grub_strlen>
    4448:	add	x0, x0, #0x1
    444c:	add	x0, x19, x0
    4450:	ldrb	w0, [x0]
    4454:	cmp	w0, #0x0
    4458:	b.ne	447c <grub_efi_print_device_path+0x324>  // b.any
    445c:	ldr	x0, [sp, #224]
    4460:	ldr	w0, [x0, #8]
    4464:	mov	w1, w0
    4468:	adrp	x0, 0 <_start>
    446c:	add	x0, x0, #0x0
    4470:	ldr	x0, [x0]
    4474:	bl	f1b4 <grub_err_printf>
    4478:	b	44ac <grub_efi_print_device_path+0x354>
    447c:	ldr	x0, [sp, #168]
    4480:	add	x19, x0, #0x10
    4484:	ldr	x0, [sp, #168]
    4488:	add	x0, x0, #0x10
    448c:	bl	fe3c <grub_strlen>
    4490:	add	x0, x0, #0x1
    4494:	add	x0, x19, x0
    4498:	mov	x1, x0
    449c:	adrp	x0, 0 <_start>
    44a0:	add	x0, x0, #0x0
    44a4:	ldr	x0, [x0]
    44a8:	bl	f1b4 <grub_err_printf>
    44ac:	ldr	x0, [sp, #168]
    44b0:	add	x19, x0, #0x10
    44b4:	ldr	x0, [sp, #168]
    44b8:	add	x0, x0, #0x10
    44bc:	bl	fe3c <grub_strlen>
    44c0:	mov	x21, x0
    44c4:	ldr	x0, [sp, #168]
    44c8:	add	x20, x0, #0x10
    44cc:	ldr	x0, [sp, #168]
    44d0:	add	x0, x0, #0x10
    44d4:	bl	fe3c <grub_strlen>
    44d8:	add	x0, x0, #0x1
    44dc:	add	x0, x20, x0
    44e0:	bl	fe3c <grub_strlen>
    44e4:	add	x0, x21, x0
    44e8:	add	x0, x0, #0x2
    44ec:	add	x0, x19, x0
    44f0:	ldrb	w0, [x0]
    44f4:	cmp	w0, #0x0
    44f8:	b.ne	451c <grub_efi_print_device_path+0x3c4>  // b.any
    44fc:	ldr	x0, [sp, #224]
    4500:	ldr	w0, [x0, #12]
    4504:	mov	w1, w0
    4508:	adrp	x0, 0 <_start>
    450c:	add	x0, x0, #0x0
    4510:	ldr	x0, [x0]
    4514:	bl	f1b4 <grub_err_printf>
    4518:	b	4594 <grub_efi_print_device_path+0x43c>
    451c:	ldr	x0, [sp, #168]
    4520:	add	x19, x0, #0x10
    4524:	ldr	x0, [sp, #168]
    4528:	add	x0, x0, #0x10
    452c:	bl	fe3c <grub_strlen>
    4530:	mov	x21, x0
    4534:	ldr	x0, [sp, #168]
    4538:	add	x20, x0, #0x10
    453c:	ldr	x0, [sp, #168]
    4540:	add	x0, x0, #0x10
    4544:	bl	fe3c <grub_strlen>
    4548:	add	x0, x0, #0x1
    454c:	add	x0, x20, x0
    4550:	bl	fe3c <grub_strlen>
    4554:	add	x0, x21, x0
    4558:	add	x0, x0, #0x2
    455c:	add	x0, x19, x0
    4560:	mov	x1, x0
    4564:	adrp	x0, 0 <_start>
    4568:	add	x0, x0, #0x0
    456c:	ldr	x0, [x0]
    4570:	bl	f1b4 <grub_err_printf>
    4574:	b	4594 <grub_efi_print_device_path+0x43c>
    4578:	ldrb	w0, [sp, #398]
    457c:	mov	w1, w0
    4580:	adrp	x0, 0 <_start>
    4584:	add	x0, x0, #0x0
    4588:	ldr	x0, [x0]
    458c:	bl	f1b4 <grub_err_printf>
    4590:	nop
    4594:	b	4f5c <grub_efi_print_device_path+0xe04>
    4598:	ldrb	w0, [sp, #398]
    459c:	cmp	w0, #0x12
    45a0:	b.eq	4b1c <grub_efi_print_device_path+0x9c4>  // b.none
    45a4:	cmp	w0, #0x12
    45a8:	b.gt	4b74 <grub_efi_print_device_path+0xa1c>
    45ac:	cmp	w0, #0xf
    45b0:	b.eq	4770 <grub_efi_print_device_path+0x618>  // b.none
    45b4:	cmp	w0, #0xf
    45b8:	b.gt	4b74 <grub_efi_print_device_path+0xa1c>
    45bc:	cmp	w0, #0xe
    45c0:	b.eq	4ad4 <grub_efi_print_device_path+0x97c>  // b.none
    45c4:	cmp	w0, #0xe
    45c8:	b.gt	4b74 <grub_efi_print_device_path+0xa1c>
    45cc:	cmp	w0, #0xd
    45d0:	b.eq	492c <grub_efi_print_device_path+0x7d4>  // b.none
    45d4:	cmp	w0, #0xd
    45d8:	b.gt	4b74 <grub_efi_print_device_path+0xa1c>
    45dc:	cmp	w0, #0xc
    45e0:	b.eq	4860 <grub_efi_print_device_path+0x708>  // b.none
    45e4:	cmp	w0, #0xc
    45e8:	b.gt	4b74 <grub_efi_print_device_path+0xa1c>
    45ec:	cmp	w0, #0xb
    45f0:	b.eq	47f0 <grub_efi_print_device_path+0x698>  // b.none
    45f4:	cmp	w0, #0xb
    45f8:	b.gt	4b74 <grub_efi_print_device_path+0xa1c>
    45fc:	cmp	w0, #0xa
    4600:	b.eq	4b5c <grub_efi_print_device_path+0xa04>  // b.none
    4604:	cmp	w0, #0xa
    4608:	b.gt	4b74 <grub_efi_print_device_path+0xa1c>
    460c:	cmp	w0, #0x9
    4610:	b.eq	4a84 <grub_efi_print_device_path+0x92c>  // b.none
    4614:	cmp	w0, #0x9
    4618:	b.gt	4b74 <grub_efi_print_device_path+0xa1c>
    461c:	cmp	w0, #0x6
    4620:	b.eq	47c8 <grub_efi_print_device_path+0x670>  // b.none
    4624:	cmp	w0, #0x6
    4628:	b.gt	4b74 <grub_efi_print_device_path+0xa1c>
    462c:	cmp	w0, #0x5
    4630:	b.eq	473c <grub_efi_print_device_path+0x5e4>  // b.none
    4634:	cmp	w0, #0x5
    4638:	b.gt	4b74 <grub_efi_print_device_path+0xa1c>
    463c:	cmp	w0, #0x4
    4640:	b.eq	4714 <grub_efi_print_device_path+0x5bc>  // b.none
    4644:	cmp	w0, #0x4
    4648:	b.gt	4b74 <grub_efi_print_device_path+0xa1c>
    464c:	cmp	w0, #0x3
    4650:	b.eq	46e4 <grub_efi_print_device_path+0x58c>  // b.none
    4654:	cmp	w0, #0x3
    4658:	b.gt	4b74 <grub_efi_print_device_path+0xa1c>
    465c:	cmp	w0, #0x1
    4660:	b.eq	4670 <grub_efi_print_device_path+0x518>  // b.none
    4664:	cmp	w0, #0x2
    4668:	b.eq	46b0 <grub_efi_print_device_path+0x558>  // b.none
    466c:	b	4b74 <grub_efi_print_device_path+0xa1c>
    4670:	ldr	x0, [sp, #168]
    4674:	str	x0, [sp, #232]
    4678:	ldr	x0, [sp, #232]
    467c:	ldrb	w0, [x0, #4]
    4680:	mov	w1, w0
    4684:	ldr	x0, [sp, #232]
    4688:	ldrb	w0, [x0, #5]
    468c:	mov	w2, w0
    4690:	ldr	x0, [sp, #232]
    4694:	ldrh	w0, [x0, #6]
    4698:	mov	w3, w0
    469c:	adrp	x0, 0 <_start>
    46a0:	add	x0, x0, #0x0
    46a4:	ldr	x0, [x0]
    46a8:	bl	f1b4 <grub_err_printf>
    46ac:	b	4b90 <grub_efi_print_device_path+0xa38>
    46b0:	ldr	x0, [sp, #168]
    46b4:	str	x0, [sp, #240]
    46b8:	ldr	x0, [sp, #240]
    46bc:	ldrh	w0, [x0, #4]
    46c0:	mov	w1, w0
    46c4:	ldr	x0, [sp, #240]
    46c8:	ldrh	w0, [x0, #6]
    46cc:	mov	w2, w0
    46d0:	adrp	x0, 0 <_start>
    46d4:	add	x0, x0, #0x0
    46d8:	ldr	x0, [x0]
    46dc:	bl	f1b4 <grub_err_printf>
    46e0:	b	4b90 <grub_efi_print_device_path+0xa38>
    46e4:	ldr	x0, [sp, #168]
    46e8:	str	x0, [sp, #248]
    46ec:	ldr	x0, [sp, #248]
    46f0:	ldr	x1, [x0, #8]
    46f4:	ldr	x0, [sp, #248]
    46f8:	ldr	x0, [x0, #16]
    46fc:	mov	x2, x0
    4700:	adrp	x0, 0 <_start>
    4704:	add	x0, x0, #0x0
    4708:	ldr	x0, [x0]
    470c:	bl	f1b4 <grub_err_printf>
    4710:	b	4b90 <grub_efi_print_device_path+0xa38>
    4714:	ldr	x0, [sp, #168]
    4718:	str	x0, [sp, #256]
    471c:	ldr	x0, [sp, #256]
    4720:	ldr	x0, [x0, #8]
    4724:	mov	x1, x0
    4728:	adrp	x0, 0 <_start>
    472c:	add	x0, x0, #0x0
    4730:	ldr	x0, [x0]
    4734:	bl	f1b4 <grub_err_printf>
    4738:	b	4b90 <grub_efi_print_device_path+0xa38>
    473c:	ldr	x0, [sp, #168]
    4740:	str	x0, [sp, #264]
    4744:	ldr	x0, [sp, #264]
    4748:	ldrb	w0, [x0, #4]
    474c:	mov	w1, w0
    4750:	ldr	x0, [sp, #264]
    4754:	ldrb	w0, [x0, #5]
    4758:	mov	w2, w0
    475c:	adrp	x0, 0 <_start>
    4760:	add	x0, x0, #0x0
    4764:	ldr	x0, [x0]
    4768:	bl	f1b4 <grub_err_printf>
    476c:	b	4b90 <grub_efi_print_device_path+0xa38>
    4770:	ldr	x0, [sp, #168]
    4774:	str	x0, [sp, #320]
    4778:	ldr	x0, [sp, #320]
    477c:	ldrh	w0, [x0, #4]
    4780:	mov	w1, w0
    4784:	ldr	x0, [sp, #320]
    4788:	ldrh	w0, [x0, #6]
    478c:	mov	w2, w0
    4790:	ldr	x0, [sp, #320]
    4794:	ldrb	w0, [x0, #8]
    4798:	mov	w3, w0
    479c:	ldr	x0, [sp, #320]
    47a0:	ldrb	w0, [x0, #9]
    47a4:	mov	w4, w0
    47a8:	ldr	x0, [sp, #320]
    47ac:	ldrb	w0, [x0, #10]
    47b0:	mov	w5, w0
    47b4:	adrp	x0, 0 <_start>
    47b8:	add	x0, x0, #0x0
    47bc:	ldr	x0, [x0]
    47c0:	bl	f1b4 <grub_err_printf>
    47c4:	b	4b90 <grub_efi_print_device_path+0xa38>
    47c8:	ldr	x0, [sp, #168]
    47cc:	str	x0, [sp, #272]
    47d0:	ldr	x0, [sp, #272]
    47d4:	ldr	w0, [x0, #4]
    47d8:	mov	w1, w0
    47dc:	adrp	x0, 0 <_start>
    47e0:	add	x0, x0, #0x0
    47e4:	ldr	x0, [x0]
    47e8:	bl	f1b4 <grub_err_printf>
    47ec:	b	4b90 <grub_efi_print_device_path+0xa38>
    47f0:	ldr	x0, [sp, #168]
    47f4:	str	x0, [sp, #288]
    47f8:	ldr	x0, [sp, #288]
    47fc:	ldrb	w0, [x0, #4]
    4800:	mov	w1, w0
    4804:	ldr	x0, [sp, #288]
    4808:	ldrb	w0, [x0, #5]
    480c:	mov	w2, w0
    4810:	ldr	x0, [sp, #288]
    4814:	ldrb	w0, [x0, #6]
    4818:	mov	w3, w0
    481c:	ldr	x0, [sp, #288]
    4820:	ldrb	w0, [x0, #7]
    4824:	mov	w4, w0
    4828:	ldr	x0, [sp, #288]
    482c:	ldrb	w0, [x0, #8]
    4830:	mov	w5, w0
    4834:	ldr	x0, [sp, #288]
    4838:	ldrb	w0, [x0, #9]
    483c:	mov	w6, w0
    4840:	ldr	x0, [sp, #288]
    4844:	ldrb	w0, [x0, #36]
    4848:	mov	w7, w0
    484c:	adrp	x0, 0 <_start>
    4850:	add	x0, x0, #0x0
    4854:	ldr	x0, [x0]
    4858:	bl	f1b4 <grub_err_printf>
    485c:	b	4b90 <grub_efi_print_device_path+0xa38>
    4860:	ldr	x0, [sp, #168]
    4864:	str	x0, [sp, #296]
    4868:	ldr	x0, [sp, #296]
    486c:	ldrb	w0, [x0, #4]
    4870:	mov	w8, w0
    4874:	ldr	x0, [sp, #296]
    4878:	ldrb	w0, [x0, #5]
    487c:	mov	w9, w0
    4880:	ldr	x0, [sp, #296]
    4884:	ldrb	w0, [x0, #6]
    4888:	mov	w10, w0
    488c:	ldr	x0, [sp, #296]
    4890:	ldrb	w0, [x0, #7]
    4894:	mov	w11, w0
    4898:	ldr	x0, [sp, #296]
    489c:	ldrb	w0, [x0, #8]
    48a0:	mov	w5, w0
    48a4:	ldr	x0, [sp, #296]
    48a8:	ldrb	w0, [x0, #9]
    48ac:	mov	w6, w0
    48b0:	ldr	x0, [sp, #296]
    48b4:	ldrb	w0, [x0, #10]
    48b8:	mov	w7, w0
    48bc:	ldr	x0, [sp, #296]
    48c0:	ldrb	w0, [x0, #11]
    48c4:	mov	w1, w0
    48c8:	ldr	x0, [sp, #296]
    48cc:	ldrh	w0, [x0, #12]
    48d0:	mov	w2, w0
    48d4:	ldr	x0, [sp, #296]
    48d8:	ldrh	w0, [x0, #14]
    48dc:	mov	w3, w0
    48e0:	ldr	x0, [sp, #296]
    48e4:	ldrh	w0, [x0, #16]
    48e8:	mov	w4, w0
    48ec:	ldr	x0, [sp, #296]
    48f0:	ldrb	w0, [x0, #18]
    48f4:	str	w0, [sp, #32]
    48f8:	str	w4, [sp, #24]
    48fc:	str	w3, [sp, #16]
    4900:	str	w2, [sp, #8]
    4904:	str	w1, [sp]
    4908:	mov	w4, w11
    490c:	mov	w3, w10
    4910:	mov	w2, w9
    4914:	mov	w1, w8
    4918:	adrp	x0, 0 <_start>
    491c:	add	x0, x0, #0x0
    4920:	ldr	x0, [x0]
    4924:	bl	f1b4 <grub_err_printf>
    4928:	b	4b90 <grub_efi_print_device_path+0xa38>
    492c:	ldr	x0, [sp, #168]
    4930:	str	x0, [sp, #304]
    4934:	ldr	x0, [sp, #304]
    4938:	ldrh	w0, [x0, #4]
    493c:	mov	w13, w0
    4940:	ldr	x0, [sp, #304]
    4944:	ldrh	w0, [x0, #6]
    4948:	mov	w14, w0
    494c:	ldr	x0, [sp, #304]
    4950:	ldrh	w0, [x0, #8]
    4954:	mov	w15, w0
    4958:	ldr	x0, [sp, #304]
    495c:	ldrh	w0, [x0, #10]
    4960:	mov	w16, w0
    4964:	ldr	x0, [sp, #304]
    4968:	ldrh	w0, [x0, #12]
    496c:	mov	w17, w0
    4970:	ldr	x0, [sp, #304]
    4974:	ldrh	w0, [x0, #14]
    4978:	mov	w18, w0
    497c:	ldr	x0, [sp, #304]
    4980:	ldrh	w0, [x0, #16]
    4984:	mov	w19, w0
    4988:	ldr	x0, [sp, #304]
    498c:	ldrh	w0, [x0, #18]
    4990:	mov	w1, w0
    4994:	ldr	x0, [sp, #304]
    4998:	ldrh	w0, [x0, #20]
    499c:	mov	w2, w0
    49a0:	ldr	x0, [sp, #304]
    49a4:	ldrh	w0, [x0, #22]
    49a8:	mov	w3, w0
    49ac:	ldr	x0, [sp, #304]
    49b0:	ldrh	w0, [x0, #24]
    49b4:	mov	w4, w0
    49b8:	ldr	x0, [sp, #304]
    49bc:	ldrh	w0, [x0, #26]
    49c0:	mov	w5, w0
    49c4:	ldr	x0, [sp, #304]
    49c8:	ldrh	w0, [x0, #28]
    49cc:	mov	w6, w0
    49d0:	ldr	x0, [sp, #304]
    49d4:	ldrh	w0, [x0, #30]
    49d8:	mov	w7, w0
    49dc:	ldr	x0, [sp, #304]
    49e0:	ldrh	w0, [x0, #32]
    49e4:	mov	w8, w0
    49e8:	ldr	x0, [sp, #304]
    49ec:	ldrh	w0, [x0, #34]
    49f0:	mov	w9, w0
    49f4:	ldr	x0, [sp, #304]
    49f8:	ldrh	w0, [x0, #36]
    49fc:	mov	w10, w0
    4a00:	ldr	x0, [sp, #304]
    4a04:	ldrh	w0, [x0, #38]
    4a08:	mov	w11, w0
    4a0c:	ldr	x0, [sp, #304]
    4a10:	ldrh	w0, [x0, #40]
    4a14:	mov	w12, w0
    4a18:	ldr	x0, [sp, #304]
    4a1c:	ldrb	w0, [x0, #42]
    4a20:	str	w0, [sp, #96]
    4a24:	str	w12, [sp, #88]
    4a28:	str	w11, [sp, #80]
    4a2c:	str	w10, [sp, #72]
    4a30:	str	w9, [sp, #64]
    4a34:	str	w8, [sp, #56]
    4a38:	str	w7, [sp, #48]
    4a3c:	str	w6, [sp, #40]
    4a40:	str	w5, [sp, #32]
    4a44:	str	w4, [sp, #24]
    4a48:	str	w3, [sp, #16]
    4a4c:	str	w2, [sp, #8]
    4a50:	str	w1, [sp]
    4a54:	mov	w7, w19
    4a58:	mov	w6, w18
    4a5c:	mov	w5, w17
    4a60:	mov	w4, w16
    4a64:	mov	w3, w15
    4a68:	mov	w2, w14
    4a6c:	mov	w1, w13
    4a70:	adrp	x0, 0 <_start>
    4a74:	add	x0, x0, #0x0
    4a78:	ldr	x0, [x0]
    4a7c:	bl	f1b4 <grub_err_printf>
    4a80:	b	4b90 <grub_efi_print_device_path+0xa38>
    4a84:	ldr	x0, [sp, #168]
    4a88:	str	x0, [sp, #280]
    4a8c:	ldr	x0, [sp, #280]
    4a90:	ldrb	w0, [x0, #8]
    4a94:	mov	w5, w0
    4a98:	ldr	x0, [sp, #280]
    4a9c:	ldr	x1, [x0, #24]
    4aa0:	ldr	x0, [sp, #280]
    4aa4:	ldr	x2, [x0, #32]
    4aa8:	ldr	x0, [sp, #280]
    4aac:	ldr	x0, [x0, #40]
    4ab0:	mov	x4, x0
    4ab4:	mov	x3, x2
    4ab8:	mov	x2, x1
    4abc:	mov	w1, w5
    4ac0:	adrp	x0, 0 <_start>
    4ac4:	add	x0, x0, #0x0
    4ac8:	ldr	x0, [x0]
    4acc:	bl	f1b4 <grub_err_printf>
    4ad0:	b	4b90 <grub_efi_print_device_path+0xa38>
    4ad4:	ldr	x0, [sp, #168]
    4ad8:	str	x0, [sp, #312]
    4adc:	ldr	x0, [sp, #312]
    4ae0:	ldr	x1, [x0, #8]
    4ae4:	ldr	x0, [sp, #312]
    4ae8:	ldrb	w0, [x0, #16]
    4aec:	mov	w2, w0
    4af0:	ldr	x0, [sp, #312]
    4af4:	ldrb	w0, [x0, #17]
    4af8:	mov	w3, w0
    4afc:	ldr	x0, [sp, #312]
    4b00:	ldrb	w0, [x0, #18]
    4b04:	mov	w4, w0
    4b08:	adrp	x0, 0 <_start>
    4b0c:	add	x0, x0, #0x0
    4b10:	ldr	x0, [x0]
    4b14:	bl	f1b4 <grub_err_printf>
    4b18:	b	4b90 <grub_efi_print_device_path+0xa38>
    4b1c:	ldr	x0, [sp, #168]
    4b20:	str	x0, [sp, #328]
    4b24:	ldr	x0, [sp, #328]
    4b28:	ldrh	w0, [x0, #4]
    4b2c:	mov	w1, w0
    4b30:	ldr	x0, [sp, #328]
    4b34:	ldrh	w0, [x0, #6]
    4b38:	mov	w2, w0
    4b3c:	ldr	x0, [sp, #328]
    4b40:	ldrh	w0, [x0, #8]
    4b44:	mov	w3, w0
    4b48:	adrp	x0, 0 <_start>
    4b4c:	add	x0, x0, #0x0
    4b50:	ldr	x0, [x0]
    4b54:	bl	f1b4 <grub_err_printf>
    4b58:	b	4b90 <grub_efi_print_device_path+0xa38>
    4b5c:	ldr	x1, [sp, #168]
    4b60:	adrp	x0, 0 <_start>
    4b64:	add	x0, x0, #0x0
    4b68:	ldr	x0, [x0]
    4b6c:	bl	3fe0 <dump_vendor_path>
    4b70:	b	4b90 <grub_efi_print_device_path+0xa38>
    4b74:	ldrb	w0, [sp, #398]
    4b78:	mov	w1, w0
    4b7c:	adrp	x0, 0 <_start>
    4b80:	add	x0, x0, #0x0
    4b84:	ldr	x0, [x0]
    4b88:	bl	f1b4 <grub_err_printf>
    4b8c:	nop
    4b90:	b	4f5c <grub_efi_print_device_path+0xe04>
    4b94:	ldrb	w0, [sp, #398]
    4b98:	cmp	w0, #0x5
    4b9c:	b.eq	4df8 <grub_efi_print_device_path+0xca0>  // b.none
    4ba0:	cmp	w0, #0x5
    4ba4:	b.gt	4eac <grub_efi_print_device_path+0xd54>
    4ba8:	cmp	w0, #0x4
    4bac:	b.eq	4cfc <grub_efi_print_device_path+0xba4>  // b.none
    4bb0:	cmp	w0, #0x4
    4bb4:	b.gt	4eac <grub_efi_print_device_path+0xd54>
    4bb8:	cmp	w0, #0x3
    4bbc:	b.eq	4ce4 <grub_efi_print_device_path+0xb8c>  // b.none
    4bc0:	cmp	w0, #0x3
    4bc4:	b.gt	4eac <grub_efi_print_device_path+0xd54>
    4bc8:	cmp	w0, #0x1
    4bcc:	b.eq	4bdc <grub_efi_print_device_path+0xa84>  // b.none
    4bd0:	cmp	w0, #0x2
    4bd4:	b.eq	4cac <grub_efi_print_device_path+0xb54>  // b.none
    4bd8:	b	4eac <grub_efi_print_device_path+0xd54>
    4bdc:	ldr	x0, [sp, #168]
    4be0:	str	x0, [sp, #336]
    4be4:	ldr	x0, [sp, #336]
    4be8:	ldr	w1, [x0, #4]
    4bec:	ldr	x0, [sp, #336]
    4bf0:	ldr	x2, [x0, #8]
    4bf4:	ldr	x0, [sp, #336]
    4bf8:	ldr	x3, [x0, #16]
    4bfc:	ldr	x0, [sp, #336]
    4c00:	ldrb	w0, [x0, #24]
    4c04:	mov	w9, w0
    4c08:	ldr	x0, [sp, #336]
    4c0c:	ldrb	w0, [x0, #25]
    4c10:	mov	w10, w0
    4c14:	ldr	x0, [sp, #336]
    4c18:	ldrb	w0, [x0, #26]
    4c1c:	mov	w11, w0
    4c20:	ldr	x0, [sp, #336]
    4c24:	ldrb	w0, [x0, #27]
    4c28:	mov	w12, w0
    4c2c:	ldr	x0, [sp, #336]
    4c30:	ldrb	w0, [x0, #28]
    4c34:	mov	w4, w0
    4c38:	ldr	x0, [sp, #336]
    4c3c:	ldrb	w0, [x0, #29]
    4c40:	mov	w5, w0
    4c44:	ldr	x0, [sp, #336]
    4c48:	ldrb	w0, [x0, #30]
    4c4c:	mov	w6, w0
    4c50:	ldr	x0, [sp, #336]
    4c54:	ldrb	w0, [x0, #31]
    4c58:	mov	w7, w0
    4c5c:	ldr	x0, [sp, #336]
    4c60:	ldrb	w0, [x0, #40]
    4c64:	mov	w8, w0
    4c68:	ldr	x0, [sp, #336]
    4c6c:	ldrb	w0, [x0, #41]
    4c70:	str	w0, [sp, #40]
    4c74:	str	w8, [sp, #32]
    4c78:	str	w7, [sp, #24]
    4c7c:	str	w6, [sp, #16]
    4c80:	str	w5, [sp, #8]
    4c84:	str	w4, [sp]
    4c88:	mov	w7, w12
    4c8c:	mov	w6, w11
    4c90:	mov	w5, w10
    4c94:	mov	w4, w9
    4c98:	adrp	x0, 0 <_start>
    4c9c:	add	x0, x0, #0x0
    4ca0:	ldr	x0, [x0]
    4ca4:	bl	f1b4 <grub_err_printf>
    4ca8:	b	4ec8 <grub_efi_print_device_path+0xd70>
    4cac:	ldr	x0, [sp, #168]
    4cb0:	str	x0, [sp, #344]
    4cb4:	ldr	x0, [sp, #344]
    4cb8:	ldr	w1, [x0, #4]
    4cbc:	ldr	x0, [sp, #344]
    4cc0:	ldr	x2, [x0, #8]
    4cc4:	ldr	x0, [sp, #344]
    4cc8:	ldr	x0, [x0, #16]
    4ccc:	mov	x3, x0
    4cd0:	adrp	x0, 0 <_start>
    4cd4:	add	x0, x0, #0x0
    4cd8:	ldr	x0, [x0]
    4cdc:	bl	f1b4 <grub_err_printf>
    4ce0:	b	4ec8 <grub_efi_print_device_path+0xd70>
    4ce4:	ldr	x1, [sp, #168]
    4ce8:	adrp	x0, 0 <_start>
    4cec:	add	x0, x0, #0x0
    4cf0:	ldr	x0, [x0]
    4cf4:	bl	3fe0 <dump_vendor_path>
    4cf8:	b	4ec8 <grub_efi_print_device_path+0xd70>
    4cfc:	ldr	x0, [sp, #168]
    4d00:	str	x0, [sp, #368]
    4d04:	ldrh	w0, [sp, #396]
    4d08:	sub	w0, w0, #0x4
    4d0c:	lsl	w0, w0, #1
    4d10:	add	w0, w0, #0x1
    4d14:	sxtw	x0, w0
    4d18:	bl	8348 <grub_malloc>
    4d1c:	str	x0, [sp, #360]
    4d20:	ldr	x0, [sp, #360]
    4d24:	cmp	x0, #0x0
    4d28:	b.eq	4dc8 <grub_efi_print_device_path+0xc70>  // b.none
    4d2c:	ldrh	w0, [sp, #396]
    4d30:	sub	w0, w0, #0x4
    4d34:	sxtw	x0, w0
    4d38:	bl	8348 <grub_malloc>
    4d3c:	str	x0, [sp, #352]
    4d40:	ldr	x0, [sp, #352]
    4d44:	cmp	x0, #0x0
    4d48:	b.ne	4d78 <grub_efi_print_device_path+0xc20>  // b.any
    4d4c:	adrp	x0, 0 <_start>
    4d50:	add	x0, x0, #0x0
    4d54:	ldr	x0, [x0]
    4d58:	str	wzr, [x0]
    4d5c:	adrp	x0, 0 <_start>
    4d60:	add	x0, x0, #0x0
    4d64:	ldr	x0, [x0]
    4d68:	bl	f1b4 <grub_err_printf>
    4d6c:	ldr	x0, [sp, #360]
    4d70:	bl	83ac <grub_free>
    4d74:	b	4ec8 <grub_efi_print_device_path+0xd70>
    4d78:	ldr	x0, [sp, #368]
    4d7c:	add	x1, x0, #0x4
    4d80:	ldrh	w0, [sp, #396]
    4d84:	sub	w0, w0, #0x4
    4d88:	sxtw	x0, w0
    4d8c:	mov	x2, x0
    4d90:	ldr	x0, [sp, #352]
    4d94:	bl	2b48 <grub_memcpy>
    4d98:	mov	x1, x0
    4d9c:	ldrh	w0, [sp, #396]
    4da0:	sub	w0, w0, #0x4
    4da4:	sxtw	x0, w0
    4da8:	lsr	x0, x0, #1
    4dac:	mov	x2, x0
    4db0:	ldr	x0, [sp, #360]
    4db4:	bl	2f38 <grub_utf16_to_utf8>
    4db8:	strb	wzr, [x0]
    4dbc:	ldr	x0, [sp, #352]
    4dc0:	bl	83ac <grub_free>
    4dc4:	b	4dd8 <grub_efi_print_device_path+0xc80>
    4dc8:	adrp	x0, 0 <_start>
    4dcc:	add	x0, x0, #0x0
    4dd0:	ldr	x0, [x0]
    4dd4:	str	wzr, [x0]
    4dd8:	ldr	x1, [sp, #360]
    4ddc:	adrp	x0, 0 <_start>
    4de0:	add	x0, x0, #0x0
    4de4:	ldr	x0, [x0]
    4de8:	bl	f1b4 <grub_err_printf>
    4dec:	ldr	x0, [sp, #360]
    4df0:	bl	83ac <grub_free>
    4df4:	b	4ec8 <grub_efi_print_device_path+0xd70>
    4df8:	ldr	x0, [sp, #168]
    4dfc:	str	x0, [sp, #376]
    4e00:	ldr	x0, [sp, #376]
    4e04:	ldr	w1, [x0, #4]
    4e08:	ldr	x0, [sp, #376]
    4e0c:	ldrh	w0, [x0, #8]
    4e10:	mov	w8, w0
    4e14:	ldr	x0, [sp, #376]
    4e18:	ldrh	w0, [x0, #10]
    4e1c:	mov	w9, w0
    4e20:	ldr	x0, [sp, #376]
    4e24:	ldrb	w0, [x0, #12]
    4e28:	mov	w10, w0
    4e2c:	ldr	x0, [sp, #376]
    4e30:	ldrb	w0, [x0, #13]
    4e34:	mov	w5, w0
    4e38:	ldr	x0, [sp, #376]
    4e3c:	ldrb	w0, [x0, #14]
    4e40:	mov	w6, w0
    4e44:	ldr	x0, [sp, #376]
    4e48:	ldrb	w0, [x0, #15]
    4e4c:	mov	w7, w0
    4e50:	ldr	x0, [sp, #376]
    4e54:	ldrb	w0, [x0, #16]
    4e58:	mov	w2, w0
    4e5c:	ldr	x0, [sp, #376]
    4e60:	ldrb	w0, [x0, #17]
    4e64:	mov	w3, w0
    4e68:	ldr	x0, [sp, #376]
    4e6c:	ldrb	w0, [x0, #18]
    4e70:	mov	w4, w0
    4e74:	ldr	x0, [sp, #376]
    4e78:	ldrb	w0, [x0, #19]
    4e7c:	str	w0, [sp, #24]
    4e80:	str	w4, [sp, #16]
    4e84:	str	w3, [sp, #8]
    4e88:	str	w2, [sp]
    4e8c:	mov	w4, w10
    4e90:	mov	w3, w9
    4e94:	mov	w2, w8
    4e98:	adrp	x0, 0 <_start>
    4e9c:	add	x0, x0, #0x0
    4ea0:	ldr	x0, [x0]
    4ea4:	bl	f1b4 <grub_err_printf>
    4ea8:	b	4ec8 <grub_efi_print_device_path+0xd70>
    4eac:	ldrb	w0, [sp, #398]
    4eb0:	mov	w1, w0
    4eb4:	adrp	x0, 0 <_start>
    4eb8:	add	x0, x0, #0x0
    4ebc:	ldr	x0, [x0]
    4ec0:	bl	f1b4 <grub_err_printf>
    4ec4:	nop
    4ec8:	b	4f5c <grub_efi_print_device_path+0xe04>
    4ecc:	ldrb	w0, [sp, #398]
    4ed0:	cmp	w0, #0x1
    4ed4:	b.ne	4f18 <grub_efi_print_device_path+0xdc0>  // b.any
    4ed8:	ldr	x0, [sp, #168]
    4edc:	str	x0, [sp, #384]
    4ee0:	ldr	x0, [sp, #384]
    4ee4:	ldrh	w0, [x0, #4]
    4ee8:	mov	w1, w0
    4eec:	ldr	x0, [sp, #384]
    4ef0:	ldrh	w0, [x0, #6]
    4ef4:	mov	w2, w0
    4ef8:	ldr	x0, [sp, #168]
    4efc:	add	x0, x0, #0x4
    4f00:	mov	x3, x0
    4f04:	adrp	x0, 0 <_start>
    4f08:	add	x0, x0, #0x0
    4f0c:	ldr	x0, [x0]
    4f10:	bl	f1b4 <grub_err_printf>
    4f14:	b	4f34 <grub_efi_print_device_path+0xddc>
    4f18:	ldrb	w0, [sp, #398]
    4f1c:	mov	w1, w0
    4f20:	adrp	x0, 0 <_start>
    4f24:	add	x0, x0, #0x0
    4f28:	ldr	x0, [x0]
    4f2c:	bl	f1b4 <grub_err_printf>
    4f30:	nop
    4f34:	b	4f5c <grub_efi_print_device_path+0xe04>
    4f38:	ldrb	w0, [sp, #399]
    4f3c:	ldrb	w1, [sp, #398]
    4f40:	mov	w2, w1
    4f44:	mov	w1, w0
    4f48:	adrp	x0, 0 <_start>
    4f4c:	add	x0, x0, #0x0
    4f50:	ldr	x0, [x0]
    4f54:	bl	f1b4 <grub_err_printf>
    4f58:	b	4f98 <grub_efi_print_device_path+0xe40>
    4f5c:	ldr	x0, [sp, #168]
    4f60:	ldrb	w0, [x0]
    4f64:	and	w0, w0, #0x7f
    4f68:	cmp	w0, #0x7f
    4f6c:	b.ne	4f80 <grub_efi_print_device_path+0xe28>  // b.any
    4f70:	ldr	x0, [sp, #168]
    4f74:	ldrb	w0, [x0, #1]
    4f78:	cmp	w0, #0xff
    4f7c:	b.eq	4f94 <grub_efi_print_device_path+0xe3c>  // b.none
    4f80:	ldrh	w0, [sp, #396]
    4f84:	ldr	x1, [sp, #168]
    4f88:	add	x0, x1, x0
    4f8c:	str	x0, [sp, #168]
    4f90:	b	4170 <grub_efi_print_device_path+0x18>
    4f94:	nop
    4f98:	ldp	x19, x20, [sp, #128]
    4f9c:	ldr	x21, [sp, #144]
    4fa0:	ldp	x29, x30, [sp, #112]
    4fa4:	add	sp, sp, #0x190
    4fa8:	ret
    4fac:	nop
	...

0000000000005100 <grub_efi_compare_device_paths>:
    5100:	stp	x29, x30, [sp, #-48]!
    5104:	mov	x29, sp
    5108:	str	x0, [sp, #24]
    510c:	str	x1, [sp, #16]
    5110:	ldr	x0, [sp, #24]
    5114:	cmp	x0, #0x0
    5118:	b.eq	5128 <grub_efi_compare_device_paths+0x28>  // b.none
    511c:	ldr	x0, [sp, #16]
    5120:	cmp	x0, #0x0
    5124:	b.ne	5130 <grub_efi_compare_device_paths+0x30>  // b.any
    5128:	mov	w0, #0x1                   	// #1
    512c:	b	525c <grub_efi_compare_device_paths+0x15c>
    5130:	ldr	x0, [sp, #24]
    5134:	ldrb	w0, [x0]
    5138:	and	w0, w0, #0x7f
    513c:	strb	w0, [sp, #47]
    5140:	ldr	x0, [sp, #16]
    5144:	ldrb	w0, [x0]
    5148:	and	w0, w0, #0x7f
    514c:	strb	w0, [sp, #46]
    5150:	ldrb	w1, [sp, #47]
    5154:	ldrb	w0, [sp, #46]
    5158:	cmp	w1, w0
    515c:	b.eq	5170 <grub_efi_compare_device_paths+0x70>  // b.none
    5160:	ldrb	w1, [sp, #46]
    5164:	ldrb	w0, [sp, #47]
    5168:	sub	w0, w1, w0
    516c:	b	525c <grub_efi_compare_device_paths+0x15c>
    5170:	ldr	x0, [sp, #24]
    5174:	ldrb	w0, [x0, #1]
    5178:	strb	w0, [sp, #45]
    517c:	ldr	x0, [sp, #16]
    5180:	ldrb	w0, [x0, #1]
    5184:	strb	w0, [sp, #44]
    5188:	ldrb	w1, [sp, #45]
    518c:	ldrb	w0, [sp, #44]
    5190:	cmp	w1, w0
    5194:	b.eq	51a8 <grub_efi_compare_device_paths+0xa8>  // b.none
    5198:	ldrb	w1, [sp, #45]
    519c:	ldrb	w0, [sp, #44]
    51a0:	sub	w0, w1, w0
    51a4:	b	525c <grub_efi_compare_device_paths+0x15c>
    51a8:	ldr	x0, [sp, #24]
    51ac:	ldrh	w0, [x0, #2]
    51b0:	strh	w0, [sp, #42]
    51b4:	ldr	x0, [sp, #16]
    51b8:	ldrh	w0, [x0, #2]
    51bc:	strh	w0, [sp, #40]
    51c0:	ldrh	w1, [sp, #42]
    51c4:	ldrh	w0, [sp, #40]
    51c8:	cmp	w1, w0
    51cc:	b.eq	51e0 <grub_efi_compare_device_paths+0xe0>  // b.none
    51d0:	ldrh	w1, [sp, #42]
    51d4:	ldrh	w0, [sp, #40]
    51d8:	sub	w0, w1, w0
    51dc:	b	525c <grub_efi_compare_device_paths+0x15c>
    51e0:	ldrh	w0, [sp, #42]
    51e4:	mov	x2, x0
    51e8:	ldr	x1, [sp, #16]
    51ec:	ldr	x0, [sp, #24]
    51f0:	bl	f5d0 <grub_memcmp>
    51f4:	str	w0, [sp, #36]
    51f8:	ldr	w0, [sp, #36]
    51fc:	cmp	w0, #0x0
    5200:	b.eq	520c <grub_efi_compare_device_paths+0x10c>  // b.none
    5204:	ldr	w0, [sp, #36]
    5208:	b	525c <grub_efi_compare_device_paths+0x15c>
    520c:	ldr	x0, [sp, #24]
    5210:	ldrb	w0, [x0]
    5214:	and	w0, w0, #0x7f
    5218:	cmp	w0, #0x7f
    521c:	b.ne	5230 <grub_efi_compare_device_paths+0x130>  // b.any
    5220:	ldr	x0, [sp, #24]
    5224:	ldrb	w0, [x0, #1]
    5228:	cmp	w0, #0xff
    522c:	b.eq	5254 <grub_efi_compare_device_paths+0x154>  // b.none
    5230:	ldrh	w0, [sp, #42]
    5234:	ldr	x1, [sp, #24]
    5238:	add	x0, x1, x0
    523c:	str	x0, [sp, #24]
    5240:	ldrh	w0, [sp, #40]
    5244:	ldr	x1, [sp, #16]
    5248:	add	x0, x1, x0
    524c:	str	x0, [sp, #16]
    5250:	b	5130 <grub_efi_compare_device_paths+0x30>
    5254:	nop
    5258:	mov	w0, #0x0                   	// #0
    525c:	ldp	x29, x30, [sp], #48
    5260:	ret
    5264:	nop

0000000000005268 <grub_efi_init>:
    5268:	stp	x29, x30, [sp, #-16]!
    526c:	mov	x29, sp
    5270:	bl	3a08 <grub_efi_modules_addr>
    5274:	mov	x1, x0
    5278:	adrp	x0, 0 <_start>
    527c:	add	x0, x0, #0x0
    5280:	ldr	x0, [x0]
    5284:	str	x1, [x0]
    5288:	bl	7340 <grub_console_init>
    528c:	bl	62c8 <grub_efi_mm_init>
    5290:	adrp	x0, 0 <_start>
    5294:	add	x0, x0, #0x0
    5298:	ldr	x0, [x0]
    529c:	ldr	x0, [x0]
    52a0:	ldr	x0, [x0, #96]
    52a4:	ldr	x4, [x0, #256]
    52a8:	mov	x3, #0x0                   	// #0
    52ac:	mov	x2, #0x0                   	// #0
    52b0:	mov	x1, #0x0                   	// #0
    52b4:	mov	x0, #0x0                   	// #0
    52b8:	blr	x4
    52bc:	bl	2468 <grub_efidisk_init>
    52c0:	nop
    52c4:	ldp	x29, x30, [sp], #16
    52c8:	ret
    52cc:	nop
	...

00000000000052e0 <grub_machine_get_bootlocation>:
    52e0:	stp	x29, x30, [sp, #-48]!
    52e4:	mov	x29, sp
    52e8:	str	x0, [sp, #24]
    52ec:	str	x1, [sp, #16]
    52f0:	str	xzr, [sp, #40]
    52f4:	adrp	x0, 0 <_start>
    52f8:	add	x0, x0, #0x0
    52fc:	ldr	x0, [x0]
    5300:	ldr	x0, [x0]
    5304:	bl	35f0 <grub_efi_get_loaded_image>
    5308:	str	x0, [sp, #40]
    530c:	ldr	x0, [sp, #40]
    5310:	cmp	x0, #0x0
    5314:	b.eq	53d4 <grub_machine_get_bootlocation+0xf4>  // b.none
    5318:	ldr	x0, [sp, #40]
    531c:	ldr	x0, [x0, #24]
    5320:	bl	28bc <grub_efidisk_get_device_name>
    5324:	mov	x1, x0
    5328:	ldr	x0, [sp, #24]
    532c:	str	x1, [x0]
    5330:	ldr	x0, [sp, #24]
    5334:	ldr	x0, [x0]
    5338:	cmp	x0, #0x0
    533c:	b.ne	5380 <grub_machine_get_bootlocation+0xa0>  // b.any
    5340:	adrp	x0, 0 <_start>
    5344:	add	x0, x0, #0x0
    5348:	ldr	x0, [x0]
    534c:	ldr	x0, [x0]
    5350:	cmp	x0, #0x0
    5354:	b.eq	5380 <grub_machine_get_bootlocation+0xa0>  // b.none
    5358:	adrp	x0, 0 <_start>
    535c:	add	x0, x0, #0x0
    5360:	ldr	x0, [x0]
    5364:	ldr	x3, [x0]
    5368:	ldr	x0, [sp, #40]
    536c:	ldr	x0, [x0, #24]
    5370:	ldr	x2, [sp, #16]
    5374:	ldr	x1, [sp, #24]
    5378:	blr	x3
    537c:	b	53d8 <grub_machine_get_bootlocation+0xf8>
    5380:	ldr	x0, [sp, #40]
    5384:	ldr	x0, [x0, #32]
    5388:	bl	3b48 <grub_efi_get_filename>
    538c:	mov	x1, x0
    5390:	ldr	x0, [sp, #16]
    5394:	str	x1, [x0]
    5398:	ldr	x0, [sp, #16]
    539c:	ldr	x0, [x0]
    53a0:	cmp	x0, #0x0
    53a4:	b.eq	53d8 <grub_machine_get_bootlocation+0xf8>  // b.none
    53a8:	ldr	x0, [sp, #16]
    53ac:	ldr	x0, [x0]
    53b0:	mov	w1, #0x2f                  	// #47
    53b4:	bl	f7ec <grub_strrchr>
    53b8:	str	x0, [sp, #32]
    53bc:	ldr	x0, [sp, #32]
    53c0:	cmp	x0, #0x0
    53c4:	b.eq	53d8 <grub_machine_get_bootlocation+0xf8>  // b.none
    53c8:	ldr	x0, [sp, #32]
    53cc:	strb	wzr, [x0]
    53d0:	b	53d8 <grub_machine_get_bootlocation+0xf8>
    53d4:	nop
    53d8:	ldp	x29, x30, [sp], #48
    53dc:	ret
	...

00000000000053f0 <grub_efi_fini>:
    53f0:	stp	x29, x30, [sp, #-16]!
    53f4:	mov	x29, sp
    53f8:	bl	23b8 <grub_efidisk_fini>
    53fc:	bl	73d0 <grub_console_fini>
    5400:	bl	6258 <grub_efi_memory_fini>
    5404:	nop
    5408:	ldp	x29, x30, [sp], #16
    540c:	ret

0000000000005410 <grub_memcpy>:
    5410:	stp	x29, x30, [sp, #-48]!
    5414:	mov	x29, sp
    5418:	str	x0, [sp, #40]
    541c:	str	x1, [sp, #32]
    5420:	str	x2, [sp, #24]
    5424:	ldr	x2, [sp, #24]
    5428:	ldr	x1, [sp, #32]
    542c:	ldr	x0, [sp, #40]
    5430:	bl	f08c <grub_memmove>
    5434:	ldp	x29, x30, [sp], #48
    5438:	ret

000000000000543c <grub_efi_store_alloc>:
    543c:	stp	x29, x30, [sp, #-64]!
    5440:	mov	x29, sp
    5444:	str	x0, [sp, #24]
    5448:	str	x1, [sp, #16]
    544c:	adrp	x0, 0 <_start>
    5450:	add	x0, x0, #0x0
    5454:	ldr	x0, [x0]
    5458:	ldr	x0, [x0]
    545c:	ldr	x0, [x0, #96]
    5460:	str	x0, [sp, #56]
    5464:	ldr	x0, [sp, #56]
    5468:	ldr	x3, [x0, #64]
    546c:	add	x0, sp, #0x28
    5470:	mov	x2, x0
    5474:	mov	x1, #0x18                  	// #24
    5478:	mov	w0, #0x2                   	// #2
    547c:	blr	x3
    5480:	str	x0, [sp, #48]
    5484:	ldr	x0, [sp, #48]
    5488:	cmp	x0, #0x0
    548c:	b.ne	54d8 <grub_efi_store_alloc+0x9c>  // b.any
    5490:	ldr	x0, [sp, #40]
    5494:	adrp	x1, 0 <_start>
    5498:	add	x1, x1, #0x0
    549c:	ldr	x1, [x1]
    54a0:	ldr	x1, [x1]
    54a4:	str	x1, [x0, #16]
    54a8:	ldr	x0, [sp, #40]
    54ac:	ldr	x1, [sp, #24]
    54b0:	str	x1, [x0]
    54b4:	ldr	x0, [sp, #40]
    54b8:	ldr	x1, [sp, #16]
    54bc:	str	x1, [x0, #8]
    54c0:	ldr	x1, [sp, #40]
    54c4:	adrp	x0, 0 <_start>
    54c8:	add	x0, x0, #0x0
    54cc:	ldr	x0, [x0]
    54d0:	str	x1, [x0]
    54d4:	b	54e8 <grub_efi_store_alloc+0xac>
    54d8:	adrp	x0, 0 <_start>
    54dc:	add	x0, x0, #0x0
    54e0:	ldr	x0, [x0]
    54e4:	bl	f1b4 <grub_err_printf>
    54e8:	nop
    54ec:	ldp	x29, x30, [sp], #64
    54f0:	ret
    54f4:	nop
	...

0000000000005510 <grub_efi_drop_alloc>:
    5510:	stp	x29, x30, [sp, #-64]!
    5514:	mov	x29, sp
    5518:	str	x0, [sp, #24]
    551c:	str	x1, [sp, #16]
    5520:	adrp	x0, 0 <_start>
    5524:	add	x0, x0, #0x0
    5528:	ldr	x0, [x0]
    552c:	ldr	x0, [x0]
    5530:	ldr	x0, [x0, #96]
    5534:	str	x0, [sp, #40]
    5538:	str	xzr, [sp, #48]
    553c:	adrp	x0, 0 <_start>
    5540:	add	x0, x0, #0x0
    5544:	ldr	x0, [x0]
    5548:	ldr	x0, [x0]
    554c:	str	x0, [sp, #56]
    5550:	b	55e0 <grub_efi_drop_alloc+0xd0>
    5554:	ldr	x0, [sp, #56]
    5558:	ldr	x0, [x0]
    555c:	ldr	x1, [sp, #24]
    5560:	cmp	x1, x0
    5564:	b.ne	557c <grub_efi_drop_alloc+0x6c>  // b.any
    5568:	ldr	x0, [sp, #56]
    556c:	ldr	x0, [x0, #8]
    5570:	ldr	x1, [sp, #16]
    5574:	cmp	x1, x0
    5578:	b.eq	5594 <grub_efi_drop_alloc+0x84>  // b.none
    557c:	ldr	x0, [sp, #56]
    5580:	str	x0, [sp, #48]
    5584:	ldr	x0, [sp, #56]
    5588:	ldr	x0, [x0, #16]
    558c:	str	x0, [sp, #56]
    5590:	b	55e0 <grub_efi_drop_alloc+0xd0>
    5594:	ldr	x0, [sp, #48]
    5598:	cmp	x0, #0x0
    559c:	b.eq	55b4 <grub_efi_drop_alloc+0xa4>  // b.none
    55a0:	ldr	x0, [sp, #56]
    55a4:	ldr	x1, [x0, #16]
    55a8:	ldr	x0, [sp, #48]
    55ac:	str	x1, [x0, #16]
    55b0:	b	55cc <grub_efi_drop_alloc+0xbc>
    55b4:	ldr	x0, [sp, #56]
    55b8:	ldr	x1, [x0, #16]
    55bc:	adrp	x0, 0 <_start>
    55c0:	add	x0, x0, #0x0
    55c4:	ldr	x0, [x0]
    55c8:	str	x1, [x0]
    55cc:	ldr	x0, [sp, #40]
    55d0:	ldr	x1, [x0, #72]
    55d4:	ldr	x0, [sp, #56]
    55d8:	blr	x1
    55dc:	b	55f0 <grub_efi_drop_alloc+0xe0>
    55e0:	ldr	x0, [sp, #56]
    55e4:	cmp	x0, #0x0
    55e8:	b.ne	5554 <grub_efi_drop_alloc+0x44>  // b.any
    55ec:	nop
    55f0:	nop
    55f4:	ldp	x29, x30, [sp], #64
    55f8:	ret
    55fc:	nop
	...

0000000000005610 <grub_efi_allocate_pages_real>:
    5610:	stp	x29, x30, [sp, #-64]!
    5614:	mov	x29, sp
    5618:	str	x0, [sp, #40]
    561c:	str	x1, [sp, #32]
    5620:	str	w2, [sp, #28]
    5624:	str	w3, [sp, #24]
    5628:	ldr	x1, [sp, #40]
    562c:	mov	x0, #0xffffffffffff        	// #281474976710655
    5630:	cmp	x1, x0
    5634:	b.ls	5640 <grub_efi_allocate_pages_real+0x30>  // b.plast
    5638:	mov	x0, #0x0                   	// #0
    563c:	b	56f8 <grub_efi_allocate_pages_real+0xe8>
    5640:	adrp	x0, 0 <_start>
    5644:	add	x0, x0, #0x0
    5648:	ldr	x0, [x0]
    564c:	ldr	x0, [x0]
    5650:	ldr	x0, [x0, #96]
    5654:	str	x0, [sp, #56]
    5658:	ldr	x0, [sp, #56]
    565c:	ldr	x4, [x0, #40]
    5660:	add	x0, sp, #0x28
    5664:	mov	x3, x0
    5668:	ldr	x2, [sp, #32]
    566c:	ldr	w1, [sp, #24]
    5670:	ldr	w0, [sp, #28]
    5674:	blr	x4
    5678:	str	x0, [sp, #48]
    567c:	ldr	x0, [sp, #48]
    5680:	cmp	x0, #0x0
    5684:	b.eq	5690 <grub_efi_allocate_pages_real+0x80>  // b.none
    5688:	mov	x0, #0x0                   	// #0
    568c:	b	56f8 <grub_efi_allocate_pages_real+0xe8>
    5690:	ldr	x0, [sp, #40]
    5694:	cmp	x0, #0x0
    5698:	b.ne	56e8 <grub_efi_allocate_pages_real+0xd8>  // b.any
    569c:	mov	x0, #0xffffffffffff        	// #281474976710655
    56a0:	str	x0, [sp, #40]
    56a4:	ldr	x0, [sp, #56]
    56a8:	ldr	x4, [x0, #40]
    56ac:	add	x0, sp, #0x28
    56b0:	mov	x3, x0
    56b4:	ldr	x2, [sp, #32]
    56b8:	ldr	w1, [sp, #24]
    56bc:	ldr	w0, [sp, #28]
    56c0:	blr	x4
    56c4:	str	x0, [sp, #48]
    56c8:	ldr	x1, [sp, #32]
    56cc:	mov	x0, #0x0                   	// #0
    56d0:	bl	575c <grub_efi_free_pages>
    56d4:	ldr	x0, [sp, #48]
    56d8:	cmp	x0, #0x0
    56dc:	b.eq	56e8 <grub_efi_allocate_pages_real+0xd8>  // b.none
    56e0:	mov	x0, #0x0                   	// #0
    56e4:	b	56f8 <grub_efi_allocate_pages_real+0xe8>
    56e8:	ldr	x0, [sp, #40]
    56ec:	ldr	x1, [sp, #32]
    56f0:	bl	543c <grub_efi_store_alloc>
    56f4:	ldr	x0, [sp, #40]
    56f8:	ldp	x29, x30, [sp], #64
    56fc:	ret
	...

0000000000005708 <grub_efi_allocate_any_pages>:
    5708:	stp	x29, x30, [sp, #-32]!
    570c:	mov	x29, sp
    5710:	str	x0, [sp, #24]
    5714:	mov	w3, #0x2                   	// #2
    5718:	mov	w2, #0x1                   	// #1
    571c:	ldr	x1, [sp, #24]
    5720:	mov	x0, #0xffffffffffff        	// #281474976710655
    5724:	bl	5610 <grub_efi_allocate_pages_real>
    5728:	ldp	x29, x30, [sp], #32
    572c:	ret

0000000000005730 <grub_efi_allocate_fixed>:
    5730:	stp	x29, x30, [sp, #-32]!
    5734:	mov	x29, sp
    5738:	str	x0, [sp, #24]
    573c:	str	x1, [sp, #16]
    5740:	mov	w3, #0x2                   	// #2
    5744:	mov	w2, #0x2                   	// #2
    5748:	ldr	x1, [sp, #16]
    574c:	ldr	x0, [sp, #24]
    5750:	bl	5610 <grub_efi_allocate_pages_real>
    5754:	ldp	x29, x30, [sp], #32
    5758:	ret

000000000000575c <grub_efi_free_pages>:
    575c:	stp	x29, x30, [sp, #-48]!
    5760:	mov	x29, sp
    5764:	str	x0, [sp, #24]
    5768:	str	x1, [sp, #16]
    576c:	adrp	x0, 0 <_start>
    5770:	add	x0, x0, #0x0
    5774:	ldr	x0, [x0]
    5778:	ldr	x0, [x0]
    577c:	ldr	x0, [x0, #96]
    5780:	str	x0, [sp, #40]
    5784:	ldr	x0, [sp, #40]
    5788:	ldr	x2, [x0, #48]
    578c:	ldr	x1, [sp, #16]
    5790:	ldr	x0, [sp, #24]
    5794:	blr	x2
    5798:	ldr	x1, [sp, #16]
    579c:	ldr	x0, [sp, #24]
    57a0:	bl	5510 <grub_efi_drop_alloc>
    57a4:	nop
    57a8:	ldp	x29, x30, [sp], #48
    57ac:	ret
	...

00000000000057b8 <grub_efi_finish_boot_services>:
    57b8:	stp	x29, x30, [sp, #-80]!
    57bc:	mov	x29, sp
    57c0:	str	x0, [sp, #56]
    57c4:	str	x1, [sp, #48]
    57c8:	str	x2, [sp, #40]
    57cc:	str	x3, [sp, #32]
    57d0:	str	x4, [sp, #24]
    57d4:	adrp	x0, 0 <_start>
    57d8:	add	x0, x0, #0x0
    57dc:	ldr	x0, [x0]
    57e0:	ldr	x1, [x0]
    57e4:	adrp	x0, 0 <_start>
    57e8:	add	x0, x0, #0x0
    57ec:	ldr	x4, [x0]
    57f0:	adrp	x0, 0 <_start>
    57f4:	add	x0, x0, #0x0
    57f8:	ldr	x3, [x0]
    57fc:	adrp	x0, 0 <_start>
    5800:	add	x0, x0, #0x0
    5804:	ldr	x2, [x0]
    5808:	adrp	x0, 0 <_start>
    580c:	add	x0, x0, #0x0
    5810:	ldr	x0, [x0]
    5814:	bl	5bd0 <grub_efi_get_memory_map>
    5818:	cmp	w0, #0x0
    581c:	b.ge	5838 <grub_efi_finish_boot_services+0x80>  // b.tcont
    5820:	adrp	x0, 0 <_start>
    5824:	add	x0, x0, #0x0
    5828:	ldr	x1, [x0]
    582c:	mov	w0, #0x1d                  	// #29
    5830:	bl	ce54 <grub_error>
    5834:	b	5af0 <grub_efi_finish_boot_services+0x338>
    5838:	ldr	x0, [sp, #48]
    583c:	cmp	x0, #0x0
    5840:	b.eq	587c <grub_efi_finish_boot_services+0xc4>  // b.none
    5844:	ldr	x0, [sp, #56]
    5848:	ldr	x1, [x0]
    584c:	adrp	x0, 0 <_start>
    5850:	add	x0, x0, #0x0
    5854:	ldr	x0, [x0]
    5858:	ldr	x0, [x0]
    585c:	cmp	x1, x0
    5860:	b.cs	587c <grub_efi_finish_boot_services+0xc4>  // b.hs, b.nlast
    5864:	adrp	x0, 0 <_start>
    5868:	add	x0, x0, #0x0
    586c:	ldr	x1, [x0]
    5870:	mov	w0, #0x1d                  	// #29
    5874:	bl	ce54 <grub_error>
    5878:	b	5af0 <grub_efi_finish_boot_services+0x338>
    587c:	adrp	x0, 0 <_start>
    5880:	add	x0, x0, #0x0
    5884:	ldr	x0, [x0]
    5888:	ldr	x0, [x0]
    588c:	bl	8348 <grub_malloc>
    5890:	mov	x1, x0
    5894:	adrp	x0, 0 <_start>
    5898:	add	x0, x0, #0x0
    589c:	ldr	x0, [x0]
    58a0:	str	x1, [x0]
    58a4:	adrp	x0, 0 <_start>
    58a8:	add	x0, x0, #0x0
    58ac:	ldr	x0, [x0]
    58b0:	ldr	x0, [x0]
    58b4:	cmp	x0, #0x0
    58b8:	b.ne	58d0 <grub_efi_finish_boot_services+0x118>  // b.any
    58bc:	adrp	x0, 0 <_start>
    58c0:	add	x0, x0, #0x0
    58c4:	ldr	x0, [x0]
    58c8:	ldr	w0, [x0]
    58cc:	b	5af0 <grub_efi_finish_boot_services+0x338>
    58d0:	adrp	x0, 0 <_start>
    58d4:	add	x0, x0, #0x0
    58d8:	ldr	x0, [x0]
    58dc:	ldr	x1, [x0]
    58e0:	adrp	x0, 0 <_start>
    58e4:	add	x0, x0, #0x0
    58e8:	ldr	x4, [x0]
    58ec:	adrp	x0, 0 <_start>
    58f0:	add	x0, x0, #0x0
    58f4:	ldr	x3, [x0]
    58f8:	adrp	x0, 0 <_start>
    58fc:	add	x0, x0, #0x0
    5900:	ldr	x2, [x0]
    5904:	adrp	x0, 0 <_start>
    5908:	add	x0, x0, #0x0
    590c:	ldr	x0, [x0]
    5910:	bl	5bd0 <grub_efi_get_memory_map>
    5914:	cmp	w0, #0x0
    5918:	b.gt	5948 <grub_efi_finish_boot_services+0x190>
    591c:	adrp	x0, 0 <_start>
    5920:	add	x0, x0, #0x0
    5924:	ldr	x0, [x0]
    5928:	ldr	x0, [x0]
    592c:	bl	83ac <grub_free>
    5930:	adrp	x0, 0 <_start>
    5934:	add	x0, x0, #0x0
    5938:	ldr	x1, [x0]
    593c:	mov	w0, #0x1d                  	// #29
    5940:	bl	ce54 <grub_error>
    5944:	b	5af0 <grub_efi_finish_boot_services+0x338>
    5948:	adrp	x0, 0 <_start>
    594c:	add	x0, x0, #0x0
    5950:	ldr	x0, [x0]
    5954:	ldr	x0, [x0]
    5958:	ldr	x0, [x0, #96]
    595c:	str	x0, [sp, #72]
    5960:	ldr	x0, [sp, #72]
    5964:	ldr	x2, [x0, #232]
    5968:	adrp	x0, 0 <_start>
    596c:	add	x0, x0, #0x0
    5970:	ldr	x0, [x0]
    5974:	ldr	x3, [x0]
    5978:	adrp	x0, 0 <_start>
    597c:	add	x0, x0, #0x0
    5980:	ldr	x0, [x0]
    5984:	ldr	x0, [x0]
    5988:	mov	x1, x0
    598c:	mov	x0, x3
    5990:	blr	x2
    5994:	str	x0, [sp, #64]
    5998:	ldr	x0, [sp, #64]
    599c:	cmp	x0, #0x0
    59a0:	b.eq	5a0c <grub_efi_finish_boot_services+0x254>  // b.none
    59a4:	ldr	x1, [sp, #64]
    59a8:	mov	x0, #0x2                   	// #2
    59ac:	movk	x0, #0x8000, lsl #48
    59b0:	cmp	x1, x0
    59b4:	b.eq	59e4 <grub_efi_finish_boot_services+0x22c>  // b.none
    59b8:	adrp	x0, 0 <_start>
    59bc:	add	x0, x0, #0x0
    59c0:	ldr	x0, [x0]
    59c4:	ldr	x0, [x0]
    59c8:	bl	83ac <grub_free>
    59cc:	adrp	x0, 0 <_start>
    59d0:	add	x0, x0, #0x0
    59d4:	ldr	x1, [x0]
    59d8:	mov	w0, #0x1d                  	// #29
    59dc:	bl	ce54 <grub_error>
    59e0:	b	5af0 <grub_efi_finish_boot_services+0x338>
    59e4:	adrp	x0, 0 <_start>
    59e8:	add	x0, x0, #0x0
    59ec:	ldr	x0, [x0]
    59f0:	ldr	x0, [x0]
    59f4:	bl	83ac <grub_free>
    59f8:	adrp	x0, 0 <_start>
    59fc:	add	x0, x0, #0x0
    5a00:	ldr	x0, [x0]
    5a04:	bl	f1b4 <grub_err_printf>
    5a08:	b	57d4 <grub_efi_finish_boot_services+0x1c>
    5a0c:	nop
    5a10:	adrp	x0, 0 <_start>
    5a14:	add	x0, x0, #0x0
    5a18:	ldr	x0, [x0]
    5a1c:	mov	w1, #0x1                   	// #1
    5a20:	str	w1, [x0]
    5a24:	ldr	x0, [sp, #56]
    5a28:	cmp	x0, #0x0
    5a2c:	b.eq	5a48 <grub_efi_finish_boot_services+0x290>  // b.none
    5a30:	adrp	x0, 0 <_start>
    5a34:	add	x0, x0, #0x0
    5a38:	ldr	x0, [x0]
    5a3c:	ldr	x1, [x0]
    5a40:	ldr	x0, [sp, #56]
    5a44:	str	x1, [x0]
    5a48:	ldr	x0, [sp, #48]
    5a4c:	cmp	x0, #0x0
    5a50:	b.eq	5a80 <grub_efi_finish_boot_services+0x2c8>  // b.none
    5a54:	adrp	x0, 0 <_start>
    5a58:	add	x0, x0, #0x0
    5a5c:	ldr	x0, [x0]
    5a60:	ldr	x1, [x0]
    5a64:	adrp	x0, 0 <_start>
    5a68:	add	x0, x0, #0x0
    5a6c:	ldr	x0, [x0]
    5a70:	ldr	x0, [x0]
    5a74:	mov	x2, x0
    5a78:	ldr	x0, [sp, #48]
    5a7c:	bl	5410 <grub_memcpy>
    5a80:	ldr	x0, [sp, #40]
    5a84:	cmp	x0, #0x0
    5a88:	b.eq	5aa4 <grub_efi_finish_boot_services+0x2ec>  // b.none
    5a8c:	adrp	x0, 0 <_start>
    5a90:	add	x0, x0, #0x0
    5a94:	ldr	x0, [x0]
    5a98:	ldr	x1, [x0]
    5a9c:	ldr	x0, [sp, #40]
    5aa0:	str	x1, [x0]
    5aa4:	ldr	x0, [sp, #32]
    5aa8:	cmp	x0, #0x0
    5aac:	b.eq	5ac8 <grub_efi_finish_boot_services+0x310>  // b.none
    5ab0:	adrp	x0, 0 <_start>
    5ab4:	add	x0, x0, #0x0
    5ab8:	ldr	x0, [x0]
    5abc:	ldr	x1, [x0]
    5ac0:	ldr	x0, [sp, #32]
    5ac4:	str	x1, [x0]
    5ac8:	ldr	x0, [sp, #24]
    5acc:	cmp	x0, #0x0
    5ad0:	b.eq	5aec <grub_efi_finish_boot_services+0x334>  // b.none
    5ad4:	adrp	x0, 0 <_start>
    5ad8:	add	x0, x0, #0x0
    5adc:	ldr	x0, [x0]
    5ae0:	ldr	w1, [x0]
    5ae4:	ldr	x0, [sp, #24]
    5ae8:	str	w1, [x0]
    5aec:	mov	w0, #0x0                   	// #0
    5af0:	ldp	x29, x30, [sp], #80
    5af4:	ret
	...

0000000000005b60 <grub_efi_find_mmap_size>:
    5b60:	stp	x29, x30, [sp, #-32]!
    5b64:	mov	x29, sp
    5b68:	str	xzr, [sp, #24]
    5b6c:	add	x1, sp, #0x10
    5b70:	add	x0, sp, #0x18
    5b74:	mov	x4, #0x0                   	// #0
    5b78:	mov	x3, x1
    5b7c:	mov	x2, #0x0                   	// #0
    5b80:	mov	x1, #0x0                   	// #0
    5b84:	bl	5bd0 <grub_efi_get_memory_map>
    5b88:	cmp	w0, #0x0
    5b8c:	b.ge	5bac <grub_efi_find_mmap_size+0x4c>  // b.tcont
    5b90:	adrp	x0, 0 <_start>
    5b94:	add	x0, x0, #0x0
    5b98:	ldr	x1, [x0]
    5b9c:	mov	w0, #0x1d                  	// #29
    5ba0:	bl	ce54 <grub_error>
    5ba4:	mov	x0, #0x0                   	// #0
    5ba8:	b	5bbc <grub_efi_find_mmap_size+0x5c>
    5bac:	ldr	x1, [sp, #24]
    5bb0:	mov	x0, #0x1fff                	// #8191
    5bb4:	add	x0, x1, x0
    5bb8:	and	x0, x0, #0xfffffffffffff000
    5bbc:	ldp	x29, x30, [sp], #32
    5bc0:	ret
    5bc4:	nop
	...

0000000000005bd0 <grub_efi_get_memory_map>:
    5bd0:	stp	x29, x30, [sp, #-112]!
    5bd4:	mov	x29, sp
    5bd8:	str	x0, [sp, #56]
    5bdc:	str	x1, [sp, #48]
    5be0:	str	x2, [sp, #40]
    5be4:	str	x3, [sp, #32]
    5be8:	str	x4, [sp, #24]
    5bec:	adrp	x0, 0 <_start>
    5bf0:	add	x0, x0, #0x0
    5bf4:	ldr	x0, [x0]
    5bf8:	ldr	w0, [x0]
    5bfc:	cmp	w0, #0x0
    5c00:	b.eq	5d18 <grub_efi_get_memory_map+0x148>  // b.none
    5c04:	mov	w0, #0x1                   	// #1
    5c08:	str	w0, [sp, #108]
    5c0c:	ldr	x0, [sp, #56]
    5c10:	ldr	x1, [x0]
    5c14:	adrp	x0, 0 <_start>
    5c18:	add	x0, x0, #0x0
    5c1c:	ldr	x0, [x0]
    5c20:	ldr	x0, [x0]
    5c24:	cmp	x1, x0
    5c28:	b.cs	5c58 <grub_efi_get_memory_map+0x88>  // b.hs, b.nlast
    5c2c:	adrp	x0, 0 <_start>
    5c30:	add	x0, x0, #0x0
    5c34:	ldr	x0, [x0]
    5c38:	ldr	x1, [x0]
    5c3c:	ldr	x0, [sp, #56]
    5c40:	ldr	x0, [x0]
    5c44:	mov	x2, x0
    5c48:	ldr	x0, [sp, #48]
    5c4c:	bl	5410 <grub_memcpy>
    5c50:	str	wzr, [sp, #108]
    5c54:	b	5c8c <grub_efi_get_memory_map+0xbc>
    5c58:	adrp	x0, 0 <_start>
    5c5c:	add	x0, x0, #0x0
    5c60:	ldr	x0, [x0]
    5c64:	ldr	x1, [x0]
    5c68:	adrp	x0, 0 <_start>
    5c6c:	add	x0, x0, #0x0
    5c70:	ldr	x0, [x0]
    5c74:	ldr	x0, [x0]
    5c78:	mov	x2, x0
    5c7c:	ldr	x0, [sp, #48]
    5c80:	bl	5410 <grub_memcpy>
    5c84:	mov	w0, #0x1                   	// #1
    5c88:	str	w0, [sp, #108]
    5c8c:	adrp	x0, 0 <_start>
    5c90:	add	x0, x0, #0x0
    5c94:	ldr	x0, [x0]
    5c98:	ldr	x1, [x0]
    5c9c:	ldr	x0, [sp, #56]
    5ca0:	str	x1, [x0]
    5ca4:	ldr	x0, [sp, #40]
    5ca8:	cmp	x0, #0x0
    5cac:	b.eq	5cc8 <grub_efi_get_memory_map+0xf8>  // b.none
    5cb0:	adrp	x0, 0 <_start>
    5cb4:	add	x0, x0, #0x0
    5cb8:	ldr	x0, [x0]
    5cbc:	ldr	x1, [x0]
    5cc0:	ldr	x0, [sp, #40]
    5cc4:	str	x1, [x0]
    5cc8:	ldr	x0, [sp, #32]
    5ccc:	cmp	x0, #0x0
    5cd0:	b.eq	5cec <grub_efi_get_memory_map+0x11c>  // b.none
    5cd4:	adrp	x0, 0 <_start>
    5cd8:	add	x0, x0, #0x0
    5cdc:	ldr	x0, [x0]
    5ce0:	ldr	x1, [x0]
    5ce4:	ldr	x0, [sp, #32]
    5ce8:	str	x1, [x0]
    5cec:	ldr	x0, [sp, #24]
    5cf0:	cmp	x0, #0x0
    5cf4:	b.eq	5d10 <grub_efi_get_memory_map+0x140>  // b.none
    5cf8:	adrp	x0, 0 <_start>
    5cfc:	add	x0, x0, #0x0
    5d00:	ldr	x0, [x0]
    5d04:	ldr	w1, [x0]
    5d08:	ldr	x0, [sp, #24]
    5d0c:	str	w1, [x0]
    5d10:	ldr	w0, [sp, #108]
    5d14:	b	5de0 <grub_efi_get_memory_map+0x210>
    5d18:	ldr	x0, [sp, #40]
    5d1c:	cmp	x0, #0x0
    5d20:	b.ne	5d2c <grub_efi_get_memory_map+0x15c>  // b.any
    5d24:	add	x0, sp, #0x50
    5d28:	str	x0, [sp, #40]
    5d2c:	ldr	x0, [sp, #24]
    5d30:	cmp	x0, #0x0
    5d34:	b.ne	5d40 <grub_efi_get_memory_map+0x170>  // b.any
    5d38:	add	x0, sp, #0x4c
    5d3c:	str	x0, [sp, #24]
    5d40:	ldr	x0, [sp, #32]
    5d44:	cmp	x0, #0x0
    5d48:	b.ne	5d54 <grub_efi_get_memory_map+0x184>  // b.any
    5d4c:	add	x0, sp, #0x40
    5d50:	str	x0, [sp, #32]
    5d54:	adrp	x0, 0 <_start>
    5d58:	add	x0, x0, #0x0
    5d5c:	ldr	x0, [x0]
    5d60:	ldr	x0, [x0]
    5d64:	ldr	x0, [x0, #96]
    5d68:	str	x0, [sp, #96]
    5d6c:	ldr	x0, [sp, #96]
    5d70:	ldr	x5, [x0, #56]
    5d74:	ldr	x4, [sp, #24]
    5d78:	ldr	x3, [sp, #32]
    5d7c:	ldr	x2, [sp, #40]
    5d80:	ldr	x1, [sp, #48]
    5d84:	ldr	x0, [sp, #56]
    5d88:	blr	x5
    5d8c:	str	x0, [sp, #88]
    5d90:	ldr	x0, [sp, #32]
    5d94:	ldr	x0, [x0]
    5d98:	cmp	x0, #0x0
    5d9c:	b.ne	5dac <grub_efi_get_memory_map+0x1dc>  // b.any
    5da0:	ldr	x0, [sp, #32]
    5da4:	mov	x1, #0x28                  	// #40
    5da8:	str	x1, [x0]
    5dac:	ldr	x0, [sp, #88]
    5db0:	cmp	x0, #0x0
    5db4:	b.ne	5dc0 <grub_efi_get_memory_map+0x1f0>  // b.any
    5db8:	mov	w0, #0x1                   	// #1
    5dbc:	b	5de0 <grub_efi_get_memory_map+0x210>
    5dc0:	ldr	x1, [sp, #88]
    5dc4:	mov	x0, #0x5                   	// #5
    5dc8:	movk	x0, #0x8000, lsl #48
    5dcc:	cmp	x1, x0
    5dd0:	b.ne	5ddc <grub_efi_get_memory_map+0x20c>  // b.any
    5dd4:	mov	w0, #0x0                   	// #0
    5dd8:	b	5de0 <grub_efi_get_memory_map+0x210>
    5ddc:	mov	w0, #0xffffffff            	// #-1
    5de0:	ldp	x29, x30, [sp], #112
    5de4:	ret
	...

0000000000005e20 <sort_memory_map>:
    5e20:	sub	sp, sp, #0x60
    5e24:	str	x0, [sp, #24]
    5e28:	str	x1, [sp, #16]
    5e2c:	str	x2, [sp, #8]
    5e30:	ldr	x0, [sp, #24]
    5e34:	str	x0, [sp, #88]
    5e38:	b	5f1c <sort_memory_map+0xfc>
    5e3c:	ldr	x0, [sp, #88]
    5e40:	str	x0, [sp, #72]
    5e44:	ldr	x1, [sp, #88]
    5e48:	ldr	x0, [sp, #16]
    5e4c:	add	x0, x1, x0
    5e50:	str	x0, [sp, #80]
    5e54:	b	5e88 <sort_memory_map+0x68>
    5e58:	ldr	x0, [sp, #72]
    5e5c:	ldr	x1, [x0, #24]
    5e60:	ldr	x0, [sp, #80]
    5e64:	ldr	x0, [x0, #24]
    5e68:	cmp	x1, x0
    5e6c:	b.cs	5e78 <sort_memory_map+0x58>  // b.hs, b.nlast
    5e70:	ldr	x0, [sp, #80]
    5e74:	str	x0, [sp, #72]
    5e78:	ldr	x1, [sp, #80]
    5e7c:	ldr	x0, [sp, #16]
    5e80:	add	x0, x1, x0
    5e84:	str	x0, [sp, #80]
    5e88:	ldr	x1, [sp, #80]
    5e8c:	ldr	x0, [sp, #8]
    5e90:	cmp	x1, x0
    5e94:	b.cc	5e58 <sort_memory_map+0x38>  // b.lo, b.ul, b.last
    5e98:	ldr	x1, [sp, #72]
    5e9c:	ldr	x0, [sp, #88]
    5ea0:	cmp	x1, x0
    5ea4:	b.eq	5f0c <sort_memory_map+0xec>  // b.none
    5ea8:	ldr	x1, [sp, #88]
    5eac:	add	x0, sp, #0x20
    5eb0:	ldp	x2, x3, [x1]
    5eb4:	stp	x2, x3, [x0]
    5eb8:	ldp	x2, x3, [x1, #16]
    5ebc:	stp	x2, x3, [x0, #16]
    5ec0:	ldr	x1, [x1, #32]
    5ec4:	str	x1, [x0, #32]
    5ec8:	ldr	x0, [sp, #88]
    5ecc:	ldr	x1, [sp, #72]
    5ed0:	ldp	x2, x3, [x1]
    5ed4:	stp	x2, x3, [x0]
    5ed8:	ldp	x2, x3, [x1, #16]
    5edc:	stp	x2, x3, [x0, #16]
    5ee0:	ldr	x1, [x1, #32]
    5ee4:	str	x1, [x0, #32]
    5ee8:	ldr	x0, [sp, #72]
    5eec:	mov	x1, x0
    5ef0:	add	x0, sp, #0x20
    5ef4:	ldp	x2, x3, [x0]
    5ef8:	stp	x2, x3, [x1]
    5efc:	ldp	x2, x3, [x0, #16]
    5f00:	stp	x2, x3, [x1, #16]
    5f04:	ldr	x0, [x0, #32]
    5f08:	str	x0, [x1, #32]
    5f0c:	ldr	x1, [sp, #88]
    5f10:	ldr	x0, [sp, #16]
    5f14:	add	x0, x1, x0
    5f18:	str	x0, [sp, #88]
    5f1c:	ldr	x1, [sp, #88]
    5f20:	ldr	x0, [sp, #8]
    5f24:	cmp	x1, x0
    5f28:	b.cc	5e3c <sort_memory_map+0x1c>  // b.lo, b.ul, b.last
    5f2c:	nop
    5f30:	nop
    5f34:	add	sp, sp, #0x60
    5f38:	ret

0000000000005f3c <filter_memory_map>:
    5f3c:	stp	x29, x30, [sp, #-64]!
    5f40:	mov	x29, sp
    5f44:	str	x0, [sp, #40]
    5f48:	str	x1, [sp, #32]
    5f4c:	str	x2, [sp, #24]
    5f50:	str	x3, [sp, #16]
    5f54:	ldr	x0, [sp, #40]
    5f58:	str	x0, [sp, #56]
    5f5c:	ldr	x0, [sp, #32]
    5f60:	str	x0, [sp, #48]
    5f64:	b	6098 <filter_memory_map+0x15c>
    5f68:	ldr	x0, [sp, #56]
    5f6c:	ldr	w0, [x0]
    5f70:	cmp	w0, #0x7
    5f74:	b.ne	6088 <filter_memory_map+0x14c>  // b.any
    5f78:	ldr	x0, [sp, #56]
    5f7c:	ldr	x1, [x0, #8]
    5f80:	mov	x0, #0xffffffffffff        	// #281474976710655
    5f84:	cmp	x1, x0
    5f88:	b.hi	6088 <filter_memory_map+0x14c>  // b.pmore
    5f8c:	ldr	x0, [sp, #56]
    5f90:	ldr	x1, [x0, #8]
    5f94:	ldr	x0, [sp, #56]
    5f98:	ldr	x0, [x0, #24]
    5f9c:	lsl	x0, x0, #12
    5fa0:	add	x0, x1, x0
    5fa4:	cmp	x0, #0x100, lsl #12
    5fa8:	b.ls	6088 <filter_memory_map+0x14c>  // b.plast
    5fac:	ldr	x0, [sp, #56]
    5fb0:	ldr	x0, [x0, #24]
    5fb4:	cmp	x0, #0x0
    5fb8:	b.eq	6088 <filter_memory_map+0x14c>  // b.none
    5fbc:	ldr	x2, [sp, #24]
    5fc0:	ldr	x1, [sp, #56]
    5fc4:	ldr	x0, [sp, #48]
    5fc8:	bl	5410 <grub_memcpy>
    5fcc:	ldr	x0, [sp, #56]
    5fd0:	ldr	x1, [x0, #8]
    5fd4:	mov	x0, #0xfffff               	// #1048575
    5fd8:	cmp	x1, x0
    5fdc:	b.hi	6018 <filter_memory_map+0xdc>  // b.pmore
    5fe0:	ldr	x0, [sp, #56]
    5fe4:	ldr	x1, [x0, #24]
    5fe8:	ldr	x0, [sp, #56]
    5fec:	ldr	x0, [x0, #8]
    5ff0:	mov	x2, #0xfff                 	// #4095
    5ff4:	movk	x2, #0x10, lsl #16
    5ff8:	sub	x0, x2, x0
    5ffc:	lsr	x0, x0, #12
    6000:	sub	x1, x1, x0
    6004:	ldr	x0, [sp, #56]
    6008:	str	x1, [x0, #24]
    600c:	ldr	x0, [sp, #56]
    6010:	mov	x1, #0x100000              	// #1048576
    6014:	str	x1, [x0, #8]
    6018:	ldr	x0, [sp, #48]
    601c:	ldr	x0, [x0, #8]
    6020:	add	x0, x0, #0xfff
    6024:	lsr	x1, x0, #12
    6028:	ldr	x0, [sp, #48]
    602c:	ldr	x0, [x0, #24]
    6030:	add	x1, x1, x0
    6034:	mov	x0, #0xfffffffff           	// #68719476735
    6038:	cmp	x1, x0
    603c:	b.ls	6060 <filter_memory_map+0x124>  // b.plast
    6040:	ldr	x0, [sp, #48]
    6044:	ldr	x0, [x0, #8]
    6048:	add	x0, x0, #0xfff
    604c:	lsr	x0, x0, #12
    6050:	mov	x1, #0xfffffffff           	// #68719476735
    6054:	sub	x1, x1, x0
    6058:	ldr	x0, [sp, #48]
    605c:	str	x1, [x0, #24]
    6060:	ldr	x0, [sp, #48]
    6064:	ldr	x0, [x0, #24]
    6068:	cmp	x0, #0x0
    606c:	b.eq	6084 <filter_memory_map+0x148>  // b.none
    6070:	ldr	x1, [sp, #48]
    6074:	ldr	x0, [sp, #24]
    6078:	add	x0, x1, x0
    607c:	str	x0, [sp, #48]
    6080:	b	6088 <filter_memory_map+0x14c>
    6084:	nop
    6088:	ldr	x1, [sp, #56]
    608c:	ldr	x0, [sp, #24]
    6090:	add	x0, x1, x0
    6094:	str	x0, [sp, #56]
    6098:	ldr	x1, [sp, #56]
    609c:	ldr	x0, [sp, #16]
    60a0:	cmp	x1, x0
    60a4:	b.cc	5f68 <filter_memory_map+0x2c>  // b.lo, b.ul, b.last
    60a8:	ldr	x0, [sp, #48]
    60ac:	ldp	x29, x30, [sp], #64
    60b0:	ret

00000000000060b4 <get_total_pages>:
    60b4:	sub	sp, sp, #0x30
    60b8:	str	x0, [sp, #24]
    60bc:	str	x1, [sp, #16]
    60c0:	str	x2, [sp, #8]
    60c4:	str	xzr, [sp, #32]
    60c8:	ldr	x0, [sp, #24]
    60cc:	str	x0, [sp, #40]
    60d0:	b	60f8 <get_total_pages+0x44>
    60d4:	ldr	x0, [sp, #40]
    60d8:	ldr	x0, [x0, #24]
    60dc:	ldr	x1, [sp, #32]
    60e0:	add	x0, x1, x0
    60e4:	str	x0, [sp, #32]
    60e8:	ldr	x1, [sp, #40]
    60ec:	ldr	x0, [sp, #16]
    60f0:	add	x0, x1, x0
    60f4:	str	x0, [sp, #40]
    60f8:	ldr	x1, [sp, #40]
    60fc:	ldr	x0, [sp, #8]
    6100:	cmp	x1, x0
    6104:	b.cc	60d4 <get_total_pages+0x20>  // b.lo, b.ul, b.last
    6108:	ldr	x0, [sp, #32]
    610c:	add	sp, sp, #0x30
    6110:	ret

0000000000006114 <add_memory_regions>:
    6114:	stp	x29, x30, [sp, #-80]!
    6118:	mov	x29, sp
    611c:	str	x0, [sp, #40]
    6120:	str	x1, [sp, #32]
    6124:	str	x2, [sp, #24]
    6128:	str	x3, [sp, #16]
    612c:	ldr	x0, [sp, #40]
    6130:	str	x0, [sp, #72]
    6134:	b	6208 <add_memory_regions+0xf4>
    6138:	ldr	x0, [sp, #72]
    613c:	ldr	x0, [x0, #8]
    6140:	str	x0, [sp, #56]
    6144:	ldr	x0, [sp, #72]
    6148:	ldr	x0, [x0, #24]
    614c:	str	x0, [sp, #64]
    6150:	ldr	x1, [sp, #64]
    6154:	ldr	x0, [sp, #16]
    6158:	cmp	x1, x0
    615c:	b.ls	6184 <add_memory_regions+0x70>  // b.plast
    6160:	ldr	x1, [sp, #64]
    6164:	ldr	x0, [sp, #16]
    6168:	sub	x0, x1, x0
    616c:	lsl	x0, x0, #12
    6170:	ldr	x1, [sp, #56]
    6174:	add	x0, x1, x0
    6178:	str	x0, [sp, #56]
    617c:	ldr	x0, [sp, #16]
    6180:	str	x0, [sp, #64]
    6184:	mov	w3, #0x1                   	// #1
    6188:	mov	w2, #0x2                   	// #2
    618c:	ldr	x1, [sp, #64]
    6190:	ldr	x0, [sp, #56]
    6194:	bl	5610 <grub_efi_allocate_pages_real>
    6198:	str	x0, [sp, #48]
    619c:	ldr	x0, [sp, #48]
    61a0:	cmp	x0, #0x0
    61a4:	b.ne	61c8 <add_memory_regions+0xb4>  // b.any
    61a8:	ldr	x0, [sp, #56]
    61ac:	ldr	x1, [sp, #64]
    61b0:	mov	w2, w1
    61b4:	mov	x1, x0
    61b8:	adrp	x0, 0 <_start>
    61bc:	add	x0, x0, #0x0
    61c0:	ldr	x0, [x0]
    61c4:	bl	117e8 <grub_fatal>
    61c8:	ldr	x0, [sp, #64]
    61cc:	lsl	x0, x0, #12
    61d0:	mov	x1, x0
    61d4:	ldr	x0, [sp, #48]
    61d8:	bl	7b88 <grub_mm_init_region>
    61dc:	ldr	x1, [sp, #16]
    61e0:	ldr	x0, [sp, #64]
    61e4:	sub	x0, x1, x0
    61e8:	str	x0, [sp, #16]
    61ec:	ldr	x0, [sp, #16]
    61f0:	cmp	x0, #0x0
    61f4:	b.eq	621c <add_memory_regions+0x108>  // b.none
    61f8:	ldr	x1, [sp, #72]
    61fc:	ldr	x0, [sp, #32]
    6200:	add	x0, x1, x0
    6204:	str	x0, [sp, #72]
    6208:	ldr	x1, [sp, #72]
    620c:	ldr	x0, [sp, #24]
    6210:	cmp	x1, x0
    6214:	b.cc	6138 <add_memory_regions+0x24>  // b.lo, b.ul, b.last
    6218:	b	6220 <add_memory_regions+0x10c>
    621c:	nop
    6220:	ldr	x0, [sp, #16]
    6224:	cmp	x0, #0x0
    6228:	b.eq	623c <add_memory_regions+0x128>  // b.none
    622c:	adrp	x0, 0 <_start>
    6230:	add	x0, x0, #0x0
    6234:	ldr	x0, [x0]
    6238:	bl	117e8 <grub_fatal>
    623c:	nop
    6240:	ldp	x29, x30, [sp], #80
    6244:	ret
	...

0000000000006258 <grub_efi_memory_fini>:
    6258:	stp	x29, x30, [sp, #-16]!
    625c:	mov	x29, sp
    6260:	b	6298 <grub_efi_memory_fini+0x40>
    6264:	adrp	x0, 0 <_start>
    6268:	add	x0, x0, #0x0
    626c:	ldr	x0, [x0]
    6270:	ldr	x0, [x0]
    6274:	ldr	x2, [x0]
    6278:	adrp	x0, 0 <_start>
    627c:	add	x0, x0, #0x0
    6280:	ldr	x0, [x0]
    6284:	ldr	x0, [x0]
    6288:	ldr	x0, [x0, #8]
    628c:	mov	x1, x0
    6290:	mov	x0, x2
    6294:	bl	575c <grub_efi_free_pages>
    6298:	adrp	x0, 0 <_start>
    629c:	add	x0, x0, #0x0
    62a0:	ldr	x0, [x0]
    62a4:	ldr	x0, [x0]
    62a8:	cmp	x0, #0x0
    62ac:	b.ne	6264 <grub_efi_memory_fini+0xc>  // b.any
    62b0:	nop
    62b4:	nop
    62b8:	ldp	x29, x30, [sp], #16
    62bc:	ret
	...

00000000000062c8 <grub_efi_mm_init>:
    62c8:	stp	x29, x30, [sp, #-96]!
    62cc:	mov	x29, sp
    62d0:	mov	x0, #0x6                   	// #6
    62d4:	bl	5708 <grub_efi_allocate_any_pages>
    62d8:	str	x0, [sp, #88]
    62dc:	ldr	x0, [sp, #88]
    62e0:	cmp	x0, #0x0
    62e4:	b.ne	62f8 <grub_efi_mm_init+0x30>  // b.any
    62e8:	adrp	x0, 0 <_start>
    62ec:	add	x0, x0, #0x0
    62f0:	ldr	x0, [x0]
    62f4:	bl	117e8 <grub_fatal>
    62f8:	mov	x0, #0x3000                	// #12288
    62fc:	str	x0, [sp, #32]
    6300:	add	x1, sp, #0x18
    6304:	add	x0, sp, #0x20
    6308:	mov	x4, #0x0                   	// #0
    630c:	mov	x3, x1
    6310:	mov	x2, #0x0                   	// #0
    6314:	ldr	x1, [sp, #88]
    6318:	bl	5bd0 <grub_efi_get_memory_map>
    631c:	str	w0, [sp, #76]
    6320:	ldr	w0, [sp, #76]
    6324:	cmp	w0, #0x0
    6328:	b.ne	63a0 <grub_efi_mm_init+0xd8>  // b.any
    632c:	ldr	x0, [sp, #88]
    6330:	mov	x1, #0x6                   	// #6
    6334:	bl	575c <grub_efi_free_pages>
    6338:	ldr	x0, [sp, #24]
    633c:	lsl	x1, x0, #5
    6340:	ldr	x0, [sp, #32]
    6344:	add	x0, x1, x0
    6348:	str	x0, [sp, #32]
    634c:	ldr	x0, [sp, #32]
    6350:	add	x0, x0, #0xfff
    6354:	lsr	x0, x0, #12
    6358:	lsl	x0, x0, #1
    635c:	bl	5708 <grub_efi_allocate_any_pages>
    6360:	str	x0, [sp, #88]
    6364:	ldr	x0, [sp, #88]
    6368:	cmp	x0, #0x0
    636c:	b.ne	6380 <grub_efi_mm_init+0xb8>  // b.any
    6370:	adrp	x0, 0 <_start>
    6374:	add	x0, x0, #0x0
    6378:	ldr	x0, [x0]
    637c:	bl	117e8 <grub_fatal>
    6380:	add	x1, sp, #0x18
    6384:	add	x0, sp, #0x20
    6388:	mov	x4, #0x0                   	// #0
    638c:	mov	x3, x1
    6390:	mov	x2, #0x0                   	// #0
    6394:	ldr	x1, [sp, #88]
    6398:	bl	5bd0 <grub_efi_get_memory_map>
    639c:	str	w0, [sp, #76]
    63a0:	ldr	w0, [sp, #76]
    63a4:	cmp	w0, #0x0
    63a8:	b.ge	63bc <grub_efi_mm_init+0xf4>  // b.tcont
    63ac:	adrp	x0, 0 <_start>
    63b0:	add	x0, x0, #0x0
    63b4:	ldr	x0, [x0]
    63b8:	bl	117e8 <grub_fatal>
    63bc:	ldr	x0, [sp, #32]
    63c0:	ldr	x1, [sp, #88]
    63c4:	add	x0, x1, x0
    63c8:	str	x0, [sp, #64]
    63cc:	ldr	x0, [sp, #64]
    63d0:	str	x0, [sp, #56]
    63d4:	ldr	x0, [sp, #24]
    63d8:	ldr	x3, [sp, #64]
    63dc:	mov	x2, x0
    63e0:	ldr	x1, [sp, #56]
    63e4:	ldr	x0, [sp, #88]
    63e8:	bl	5f3c <filter_memory_map>
    63ec:	str	x0, [sp, #48]
    63f0:	ldr	x0, [sp, #24]
    63f4:	ldr	x2, [sp, #48]
    63f8:	mov	x1, x0
    63fc:	ldr	x0, [sp, #56]
    6400:	bl	60b4 <get_total_pages>
    6404:	str	x0, [sp, #40]
    6408:	ldr	x0, [sp, #40]
    640c:	lsr	x0, x0, #2
    6410:	str	x0, [sp, #80]
    6414:	ldr	x0, [sp, #80]
    6418:	cmp	x0, #0xff
    641c:	b.hi	642c <grub_efi_mm_init+0x164>  // b.pmore
    6420:	mov	x0, #0x100                 	// #256
    6424:	str	x0, [sp, #80]
    6428:	b	6444 <grub_efi_mm_init+0x17c>
    642c:	ldr	x0, [sp, #80]
    6430:	cmp	x0, #0x64, lsl #12
    6434:	b.ls	6444 <grub_efi_mm_init+0x17c>  // b.plast
    6438:	mov	x0, #0x4000                	// #16384
    643c:	movk	x0, #0x6, lsl #16
    6440:	str	x0, [sp, #80]
    6444:	ldr	x0, [sp, #24]
    6448:	ldr	x2, [sp, #48]
    644c:	mov	x1, x0
    6450:	ldr	x0, [sp, #56]
    6454:	bl	5e20 <sort_memory_map>
    6458:	ldr	x0, [sp, #24]
    645c:	ldr	x3, [sp, #80]
    6460:	ldr	x2, [sp, #48]
    6464:	mov	x1, x0
    6468:	ldr	x0, [sp, #56]
    646c:	bl	6114 <add_memory_regions>
    6470:	ldr	x0, [sp, #88]
    6474:	mov	x1, #0x6                   	// #6
    6478:	bl	575c <grub_efi_free_pages>
    647c:	nop
    6480:	ldp	x29, x30, [sp], #96
    6484:	ret
	...

0000000000006498 <grub_efi_get_ram_base>:
    6498:	stp	x29, x30, [sp, #-80]!
    649c:	mov	x29, sp
    64a0:	str	x0, [sp, #24]
    64a4:	bl	5b60 <grub_efi_find_mmap_size>
    64a8:	str	x0, [sp, #48]
    64ac:	ldr	x0, [sp, #48]
    64b0:	bl	8348 <grub_malloc>
    64b4:	str	x0, [sp, #64]
    64b8:	ldr	x0, [sp, #64]
    64bc:	cmp	x0, #0x0
    64c0:	b.ne	64cc <grub_efi_get_ram_base+0x34>  // b.any
    64c4:	mov	w0, #0x3                   	// #3
    64c8:	b	6580 <grub_efi_get_ram_base+0xe8>
    64cc:	add	x1, sp, #0x28
    64d0:	add	x0, sp, #0x30
    64d4:	mov	x4, #0x0                   	// #0
    64d8:	mov	x3, x1
    64dc:	mov	x2, #0x0                   	// #0
    64e0:	ldr	x1, [sp, #64]
    64e4:	bl	5bd0 <grub_efi_get_memory_map>
    64e8:	str	w0, [sp, #60]
    64ec:	ldr	w0, [sp, #60]
    64f0:	cmp	w0, #0x0
    64f4:	b.gt	6500 <grub_efi_get_ram_base+0x68>
    64f8:	mov	w0, #0x26                  	// #38
    64fc:	b	6580 <grub_efi_get_ram_base+0xe8>
    6500:	ldr	x0, [sp, #64]
    6504:	str	x0, [sp, #72]
    6508:	ldr	x0, [sp, #24]
    650c:	mov	x1, #0xffffffffffff        	// #281474976710655
    6510:	str	x1, [x0]
    6514:	b	655c <grub_efi_get_ram_base+0xc4>
    6518:	ldr	x0, [sp, #72]
    651c:	ldr	x0, [x0, #32]
    6520:	and	x0, x0, #0x8
    6524:	cmp	x0, #0x0
    6528:	b.eq	654c <grub_efi_get_ram_base+0xb4>  // b.none
    652c:	ldr	x0, [sp, #72]
    6530:	ldr	x1, [x0, #8]
    6534:	ldr	x0, [sp, #24]
    6538:	ldr	x0, [x0]
    653c:	cmp	x1, x0
    6540:	csel	x1, x1, x0, ls  // ls = plast
    6544:	ldr	x0, [sp, #24]
    6548:	str	x1, [x0]
    654c:	ldr	x0, [sp, #40]
    6550:	ldr	x1, [sp, #72]
    6554:	add	x0, x1, x0
    6558:	str	x0, [sp, #72]
    655c:	ldr	x1, [sp, #64]
    6560:	ldr	x0, [sp, #48]
    6564:	add	x1, x1, x0
    6568:	ldr	x0, [sp, #72]
    656c:	cmp	x1, x0
    6570:	b.hi	6518 <grub_efi_get_ram_base+0x80>  // b.pmore
    6574:	ldr	x0, [sp, #64]
    6578:	bl	83ac <grub_free>
    657c:	mov	w0, #0x0                   	// #0
    6580:	ldp	x29, x30, [sp], #80
    6584:	ret

0000000000006588 <grub_unicode_get_comb>:
    6588:	sub	sp, sp, #0x10
    658c:	str	x0, [sp, #8]
    6590:	ldr	x0, [sp, #8]
    6594:	ldrh	w0, [x0, #6]
    6598:	and	w0, w0, #0x7f8
    659c:	and	w0, w0, #0xffff
    65a0:	cmp	w0, #0x0
    65a4:	b.ne	65b0 <grub_unicode_get_comb+0x28>  // b.any
    65a8:	mov	x0, #0x0                   	// #0
    65ac:	b	65dc <grub_unicode_get_comb+0x54>
    65b0:	ldr	x0, [sp, #8]
    65b4:	ldrh	w0, [x0, #6]
    65b8:	ubfx	x0, x0, #3, #8
    65bc:	and	w0, w0, #0xff
    65c0:	cmp	w0, #0x2
    65c4:	b.ls	65d4 <grub_unicode_get_comb+0x4c>  // b.plast
    65c8:	ldr	x0, [sp, #8]
    65cc:	ldr	x0, [x0, #24]
    65d0:	b	65dc <grub_unicode_get_comb+0x54>
    65d4:	ldr	x0, [sp, #8]
    65d8:	add	x0, x0, #0x18
    65dc:	add	sp, sp, #0x10
    65e0:	ret

00000000000065e4 <grub_term_register_input>:
    65e4:	stp	x29, x30, [sp, #-32]!
    65e8:	mov	x29, sp
    65ec:	str	x0, [sp, #24]
    65f0:	str	x1, [sp, #16]
    65f4:	adrp	x0, 0 <_start>
    65f8:	add	x0, x0, #0x0
    65fc:	ldr	x0, [x0]
    6600:	ldr	x0, [x0]
    6604:	cmp	x0, #0x0
    6608:	b.eq	6624 <grub_term_register_input+0x40>  // b.none
    660c:	ldr	x1, [sp, #16]
    6610:	adrp	x0, 0 <_start>
    6614:	add	x0, x0, #0x0
    6618:	ldr	x0, [x0]
    661c:	bl	e1a8 <grub_list_push>
    6620:	b	6660 <grub_term_register_input+0x7c>
    6624:	ldr	x0, [sp, #16]
    6628:	ldr	x0, [x0, #24]
    662c:	cmp	x0, #0x0
    6630:	b.eq	664c <grub_term_register_input+0x68>  // b.none
    6634:	ldr	x0, [sp, #16]
    6638:	ldr	x1, [x0, #24]
    663c:	ldr	x0, [sp, #16]
    6640:	blr	x1
    6644:	cmp	w0, #0x0
    6648:	b.ne	6660 <grub_term_register_input+0x7c>  // b.any
    664c:	ldr	x1, [sp, #16]
    6650:	adrp	x0, 0 <_start>
    6654:	add	x0, x0, #0x0
    6658:	ldr	x0, [x0]
    665c:	bl	e1a8 <grub_list_push>
    6660:	nop
    6664:	ldp	x29, x30, [sp], #32
    6668:	ret
    666c:	nop
	...

0000000000006680 <grub_term_register_output>:
    6680:	stp	x29, x30, [sp, #-32]!
    6684:	mov	x29, sp
    6688:	str	x0, [sp, #24]
    668c:	str	x1, [sp, #16]
    6690:	adrp	x0, 0 <_start>
    6694:	add	x0, x0, #0x0
    6698:	ldr	x0, [x0]
    669c:	ldr	x0, [x0]
    66a0:	cmp	x0, #0x0
    66a4:	b.eq	66c0 <grub_term_register_output+0x40>  // b.none
    66a8:	ldr	x1, [sp, #16]
    66ac:	adrp	x0, 0 <_start>
    66b0:	add	x0, x0, #0x0
    66b4:	ldr	x0, [x0]
    66b8:	bl	e1a8 <grub_list_push>
    66bc:	b	66fc <grub_term_register_output+0x7c>
    66c0:	ldr	x0, [sp, #16]
    66c4:	ldr	x0, [x0, #24]
    66c8:	cmp	x0, #0x0
    66cc:	b.eq	66e8 <grub_term_register_output+0x68>  // b.none
    66d0:	ldr	x0, [sp, #16]
    66d4:	ldr	x1, [x0, #24]
    66d8:	ldr	x0, [sp, #16]
    66dc:	blr	x1
    66e0:	cmp	w0, #0x0
    66e4:	b.ne	66fc <grub_term_register_output+0x7c>  // b.any
    66e8:	ldr	x1, [sp, #16]
    66ec:	adrp	x0, 0 <_start>
    66f0:	add	x0, x0, #0x0
    66f4:	ldr	x0, [x0]
    66f8:	bl	e1a8 <grub_list_push>
    66fc:	nop
    6700:	ldp	x29, x30, [sp], #32
    6704:	ret
	...

0000000000006718 <grub_term_unregister_input>:
    6718:	stp	x29, x30, [sp, #-32]!
    671c:	mov	x29, sp
    6720:	str	x0, [sp, #24]
    6724:	ldr	x0, [sp, #24]
    6728:	bl	e208 <grub_list_remove>
    672c:	ldr	x0, [sp, #24]
    6730:	bl	e208 <grub_list_remove>
    6734:	nop
    6738:	ldp	x29, x30, [sp], #32
    673c:	ret

0000000000006740 <grub_term_unregister_output>:
    6740:	stp	x29, x30, [sp, #-32]!
    6744:	mov	x29, sp
    6748:	str	x0, [sp, #24]
    674c:	ldr	x0, [sp, #24]
    6750:	bl	e208 <grub_list_remove>
    6754:	ldr	x0, [sp, #24]
    6758:	bl	e208 <grub_list_remove>
    675c:	nop
    6760:	ldp	x29, x30, [sp], #32
    6764:	ret

0000000000006768 <map_char>:
    6768:	sub	sp, sp, #0x10
    676c:	str	w0, [sp, #12]
    6770:	ldr	w1, [sp, #12]
    6774:	mov	w0, #0x251b                	// #9499
    6778:	cmp	w1, w0
    677c:	b.eq	6900 <map_char+0x198>  // b.none
    6780:	ldr	w1, [sp, #12]
    6784:	mov	w0, #0x251b                	// #9499
    6788:	cmp	w1, w0
    678c:	b.hi	690c <map_char+0x1a4>  // b.pmore
    6790:	ldr	w1, [sp, #12]
    6794:	mov	w0, #0x2517                	// #9495
    6798:	cmp	w1, w0
    679c:	b.eq	68f4 <map_char+0x18c>  // b.none
    67a0:	ldr	w1, [sp, #12]
    67a4:	mov	w0, #0x2517                	// #9495
    67a8:	cmp	w1, w0
    67ac:	b.hi	690c <map_char+0x1a4>  // b.pmore
    67b0:	ldr	w1, [sp, #12]
    67b4:	mov	w0, #0x2513                	// #9491
    67b8:	cmp	w1, w0
    67bc:	b.eq	68e8 <map_char+0x180>  // b.none
    67c0:	ldr	w1, [sp, #12]
    67c4:	mov	w0, #0x2513                	// #9491
    67c8:	cmp	w1, w0
    67cc:	b.hi	690c <map_char+0x1a4>  // b.pmore
    67d0:	ldr	w1, [sp, #12]
    67d4:	mov	w0, #0x250f                	// #9487
    67d8:	cmp	w1, w0
    67dc:	b.eq	68dc <map_char+0x174>  // b.none
    67e0:	ldr	w1, [sp, #12]
    67e4:	mov	w0, #0x250f                	// #9487
    67e8:	cmp	w1, w0
    67ec:	b.hi	690c <map_char+0x1a4>  // b.pmore
    67f0:	ldr	w1, [sp, #12]
    67f4:	mov	w0, #0x2503                	// #9475
    67f8:	cmp	w1, w0
    67fc:	b.eq	68d0 <map_char+0x168>  // b.none
    6800:	ldr	w1, [sp, #12]
    6804:	mov	w0, #0x2503                	// #9475
    6808:	cmp	w1, w0
    680c:	b.hi	690c <map_char+0x1a4>  // b.pmore
    6810:	ldr	w1, [sp, #12]
    6814:	mov	w0, #0x2501                	// #9473
    6818:	cmp	w1, w0
    681c:	b.eq	68c4 <map_char+0x15c>  // b.none
    6820:	ldr	w1, [sp, #12]
    6824:	mov	w0, #0x2501                	// #9473
    6828:	cmp	w1, w0
    682c:	b.hi	690c <map_char+0x1a4>  // b.pmore
    6830:	ldr	w1, [sp, #12]
    6834:	mov	w0, #0x2193                	// #8595
    6838:	cmp	w1, w0
    683c:	b.eq	68b8 <map_char+0x150>  // b.none
    6840:	ldr	w1, [sp, #12]
    6844:	mov	w0, #0x2193                	// #8595
    6848:	cmp	w1, w0
    684c:	b.hi	690c <map_char+0x1a4>  // b.pmore
    6850:	ldr	w1, [sp, #12]
    6854:	mov	w0, #0x2192                	// #8594
    6858:	cmp	w1, w0
    685c:	b.eq	68ac <map_char+0x144>  // b.none
    6860:	ldr	w1, [sp, #12]
    6864:	mov	w0, #0x2192                	// #8594
    6868:	cmp	w1, w0
    686c:	b.hi	690c <map_char+0x1a4>  // b.pmore
    6870:	ldr	w1, [sp, #12]
    6874:	mov	w0, #0x2190                	// #8592
    6878:	cmp	w1, w0
    687c:	b.eq	6894 <map_char+0x12c>  // b.none
    6880:	ldr	w1, [sp, #12]
    6884:	mov	w0, #0x2191                	// #8593
    6888:	cmp	w1, w0
    688c:	b.eq	68a0 <map_char+0x138>  // b.none
    6890:	b	690c <map_char+0x1a4>
    6894:	mov	w0, #0x25c4                	// #9668
    6898:	str	w0, [sp, #12]
    689c:	b	690c <map_char+0x1a4>
    68a0:	mov	w0, #0x25b2                	// #9650
    68a4:	str	w0, [sp, #12]
    68a8:	b	690c <map_char+0x1a4>
    68ac:	mov	w0, #0x25ba                	// #9658
    68b0:	str	w0, [sp, #12]
    68b4:	b	690c <map_char+0x1a4>
    68b8:	mov	w0, #0x25bc                	// #9660
    68bc:	str	w0, [sp, #12]
    68c0:	b	690c <map_char+0x1a4>
    68c4:	mov	w0, #0x2500                	// #9472
    68c8:	str	w0, [sp, #12]
    68cc:	b	690c <map_char+0x1a4>
    68d0:	mov	w0, #0x2502                	// #9474
    68d4:	str	w0, [sp, #12]
    68d8:	b	690c <map_char+0x1a4>
    68dc:	mov	w0, #0x250c                	// #9484
    68e0:	str	w0, [sp, #12]
    68e4:	b	690c <map_char+0x1a4>
    68e8:	mov	w0, #0x2510                	// #9488
    68ec:	str	w0, [sp, #12]
    68f0:	b	690c <map_char+0x1a4>
    68f4:	mov	w0, #0x2514                	// #9492
    68f8:	str	w0, [sp, #12]
    68fc:	b	690c <map_char+0x1a4>
    6900:	mov	w0, #0x2518                	// #9496
    6904:	str	w0, [sp, #12]
    6908:	nop
    690c:	ldr	w0, [sp, #12]
    6910:	add	sp, sp, #0x10
    6914:	ret

0000000000006918 <grub_console_putchar>:
    6918:	stp	x29, x30, [sp, #-112]!
    691c:	mov	x29, sp
    6920:	str	x0, [sp, #24]
    6924:	str	x1, [sp, #16]
    6928:	adrp	x0, 0 <_start>
    692c:	add	x0, x0, #0x0
    6930:	ldr	x0, [x0]
    6934:	ldr	w0, [x0]
    6938:	cmp	w0, #0x0
    693c:	b.ne	6ab4 <grub_console_putchar+0x19c>  // b.any
    6940:	adrp	x0, 0 <_start>
    6944:	add	x0, x0, #0x0
    6948:	ldr	x0, [x0]
    694c:	ldr	x0, [x0]
    6950:	ldr	x0, [x0, #64]
    6954:	str	x0, [sp, #96]
    6958:	ldr	x0, [sp, #16]
    695c:	ldr	w0, [x0]
    6960:	ubfx	x1, x0, #0, #23
    6964:	mov	w0, #0xffff                	// #65535
    6968:	cmp	w1, w0
    696c:	b.ls	697c <grub_console_putchar+0x64>  // b.plast
    6970:	mov	w0, #0x3f                  	// #63
    6974:	strh	w0, [sp, #32]
    6978:	b	6998 <grub_console_putchar+0x80>
    697c:	ldr	x0, [sp, #16]
    6980:	ldr	w0, [x0]
    6984:	ubfx	x0, x0, #0, #23
    6988:	and	w0, w0, #0xffff
    698c:	bl	6768 <map_char>
    6990:	and	w0, w0, #0xffff
    6994:	strh	w0, [sp, #32]
    6998:	mov	w0, #0x1                   	// #1
    699c:	str	w0, [sp, #104]
    69a0:	str	wzr, [sp, #108]
    69a4:	b	6a0c <grub_console_putchar+0xf4>
    69a8:	ldr	x0, [sp, #16]
    69ac:	ldr	w0, [x0]
    69b0:	ubfx	x1, x0, #0, #23
    69b4:	mov	w0, #0xfffe                	// #65534
    69b8:	cmp	w1, w0
    69bc:	b.hi	6a00 <grub_console_putchar+0xe8>  // b.pmore
    69c0:	ldr	x0, [sp, #16]
    69c4:	bl	6588 <grub_unicode_get_comb>
    69c8:	mov	x1, x0
    69cc:	ldr	w0, [sp, #108]
    69d0:	lsl	x0, x0, #2
    69d4:	add	x0, x1, x0
    69d8:	ldr	w0, [x0]
    69dc:	ubfx	x2, x0, #0, #21
    69e0:	ldr	w0, [sp, #104]
    69e4:	add	w1, w0, #0x1
    69e8:	str	w1, [sp, #104]
    69ec:	and	w2, w2, #0xffff
    69f0:	mov	w0, w0
    69f4:	lsl	x0, x0, #1
    69f8:	add	x1, sp, #0x20
    69fc:	strh	w2, [x1, x0]
    6a00:	ldr	w0, [sp, #108]
    6a04:	add	w0, w0, #0x1
    6a08:	str	w0, [sp, #108]
    6a0c:	ldr	x0, [sp, #16]
    6a10:	ldrh	w0, [x0, #6]
    6a14:	ubfx	x0, x0, #3, #8
    6a18:	and	w0, w0, #0xff
    6a1c:	mov	w1, w0
    6a20:	ldr	w0, [sp, #108]
    6a24:	cmp	w0, w1
    6a28:	b.cs	6a3c <grub_console_putchar+0x124>  // b.hs, b.nlast
    6a2c:	ldr	w0, [sp, #104]
    6a30:	add	w0, w0, #0x1
    6a34:	cmp	w0, #0x1f
    6a38:	b.ls	69a8 <grub_console_putchar+0x90>  // b.plast
    6a3c:	ldr	w0, [sp, #104]
    6a40:	lsl	x0, x0, #1
    6a44:	add	x1, sp, #0x20
    6a48:	strh	wzr, [x1, x0]
    6a4c:	ldr	x0, [sp, #16]
    6a50:	ldr	w0, [x0]
    6a54:	ubfx	x0, x0, #0, #23
    6a58:	cmp	w0, #0x7f
    6a5c:	b.hi	6a78 <grub_console_putchar+0x160>  // b.pmore
    6a60:	ldr	x0, [sp, #16]
    6a64:	ldrh	w0, [x0, #6]
    6a68:	and	w0, w0, #0x7f8
    6a6c:	and	w0, w0, #0xffff
    6a70:	cmp	w0, #0x0
    6a74:	b.eq	6a98 <grub_console_putchar+0x180>  // b.none
    6a78:	ldr	x0, [sp, #96]
    6a7c:	ldr	x2, [x0, #16]
    6a80:	add	x0, sp, #0x20
    6a84:	mov	x1, x0
    6a88:	ldr	x0, [sp, #96]
    6a8c:	blr	x2
    6a90:	cmp	x0, #0x0
    6a94:	b.ne	6abc <grub_console_putchar+0x1a4>  // b.any
    6a98:	ldr	x0, [sp, #96]
    6a9c:	ldr	x2, [x0, #8]
    6aa0:	add	x0, sp, #0x20
    6aa4:	mov	x1, x0
    6aa8:	ldr	x0, [sp, #96]
    6aac:	blr	x2
    6ab0:	b	6ac0 <grub_console_putchar+0x1a8>
    6ab4:	nop
    6ab8:	b	6ac0 <grub_console_putchar+0x1a8>
    6abc:	nop
    6ac0:	ldp	x29, x30, [sp], #112
    6ac4:	ret
	...

0000000000006ad8 <grub_efi_translate_key>:
    6ad8:	sub	sp, sp, #0x10
    6adc:	str	w0, [sp, #8]
    6ae0:	ldrh	w0, [sp, #8]
    6ae4:	cmp	w0, #0x0
    6ae8:	b.ne	6b4c <grub_efi_translate_key+0x74>  // b.any
    6aec:	ldrh	w0, [sp, #10]
    6af0:	cmp	w0, #0x1f
    6af4:	b.hi	6b44 <grub_efi_translate_key+0x6c>  // b.pmore
    6af8:	ldrh	w0, [sp, #10]
    6afc:	cmp	w0, #0x0
    6b00:	b.eq	6b44 <grub_efi_translate_key+0x6c>  // b.none
    6b04:	ldrh	w0, [sp, #10]
    6b08:	cmp	w0, #0x9
    6b0c:	b.eq	6b44 <grub_efi_translate_key+0x6c>  // b.none
    6b10:	ldrh	w0, [sp, #10]
    6b14:	cmp	w0, #0x8
    6b18:	b.eq	6b44 <grub_efi_translate_key+0x6c>  // b.none
    6b1c:	ldrh	w0, [sp, #10]
    6b20:	cmp	w0, #0xa
    6b24:	b.eq	6b44 <grub_efi_translate_key+0x6c>  // b.none
    6b28:	ldrh	w0, [sp, #10]
    6b2c:	cmp	w0, #0xd
    6b30:	b.eq	6b44 <grub_efi_translate_key+0x6c>  // b.none
    6b34:	ldrh	w0, [sp, #10]
    6b38:	add	w0, w0, #0x60
    6b3c:	orr	w0, w0, #0x2000000
    6b40:	b	6bec <grub_efi_translate_key+0x114>
    6b44:	ldrh	w0, [sp, #10]
    6b48:	b	6bec <grub_efi_translate_key+0x114>
    6b4c:	ldrh	w0, [sp, #8]
    6b50:	cmp	w0, #0xd
    6b54:	b.ne	6b6c <grub_efi_translate_key+0x94>  // b.any
    6b58:	ldrh	w0, [sp, #10]
    6b5c:	cmp	w0, #0xd
    6b60:	b.ne	6b6c <grub_efi_translate_key+0x94>  // b.any
    6b64:	ldrh	w0, [sp, #10]
    6b68:	b	6bec <grub_efi_translate_key+0x114>
    6b6c:	ldrh	w0, [sp, #8]
    6b70:	cmp	w0, #0x17
    6b74:	b.hi	6b98 <grub_efi_translate_key+0xc0>  // b.pmore
    6b78:	ldrh	w0, [sp, #8]
    6b7c:	mov	w1, w0
    6b80:	adrp	x0, 0 <_start>
    6b84:	add	x0, x0, #0x0
    6b88:	ldr	x0, [x0]
    6b8c:	sxtw	x1, w1
    6b90:	ldr	w0, [x0, x1, lsl #2]
    6b94:	b	6bec <grub_efi_translate_key+0x114>
    6b98:	ldrh	w0, [sp, #10]
    6b9c:	cmp	w0, #0x1f
    6ba0:	b.ls	6bb0 <grub_efi_translate_key+0xd8>  // b.plast
    6ba4:	ldrh	w0, [sp, #10]
    6ba8:	cmp	w0, #0x7f
    6bac:	b.ls	6be0 <grub_efi_translate_key+0x108>  // b.plast
    6bb0:	ldrh	w0, [sp, #10]
    6bb4:	cmp	w0, #0x9
    6bb8:	b.eq	6be0 <grub_efi_translate_key+0x108>  // b.none
    6bbc:	ldrh	w0, [sp, #10]
    6bc0:	cmp	w0, #0x8
    6bc4:	b.eq	6be0 <grub_efi_translate_key+0x108>  // b.none
    6bc8:	ldrh	w0, [sp, #10]
    6bcc:	cmp	w0, #0xa
    6bd0:	b.eq	6be0 <grub_efi_translate_key+0x108>  // b.none
    6bd4:	ldrh	w0, [sp, #10]
    6bd8:	cmp	w0, #0xd
    6bdc:	b.ne	6be8 <grub_efi_translate_key+0x110>  // b.any
    6be0:	ldrh	w0, [sp, #10]
    6be4:	b	6bec <grub_efi_translate_key+0x114>
    6be8:	mov	w0, #0x0                   	// #0
    6bec:	add	sp, sp, #0x10
    6bf0:	ret
    6bf4:	nop
	...

0000000000006c00 <grub_console_getkey_con>:
    6c00:	stp	x29, x30, [sp, #-64]!
    6c04:	mov	x29, sp
    6c08:	str	x0, [sp, #24]
    6c0c:	adrp	x0, 0 <_start>
    6c10:	add	x0, x0, #0x0
    6c14:	ldr	x0, [x0]
    6c18:	ldr	x0, [x0]
    6c1c:	ldr	x0, [x0, #48]
    6c20:	str	x0, [sp, #56]
    6c24:	ldr	x0, [sp, #56]
    6c28:	ldr	x2, [x0, #8]
    6c2c:	add	x0, sp, #0x28
    6c30:	mov	x1, x0
    6c34:	ldr	x0, [sp, #56]
    6c38:	blr	x2
    6c3c:	str	x0, [sp, #48]
    6c40:	ldr	x0, [sp, #48]
    6c44:	cmp	x0, #0x0
    6c48:	b.eq	6c54 <grub_console_getkey_con+0x54>  // b.none
    6c4c:	mov	w0, #0x0                   	// #0
    6c50:	b	6c5c <grub_console_getkey_con+0x5c>
    6c54:	ldr	w0, [sp, #40]
    6c58:	bl	6ad8 <grub_efi_translate_key>
    6c5c:	ldp	x29, x30, [sp], #64
    6c60:	ret
    6c64:	nop
	...

0000000000006c70 <grub_console_getkey_ex>:
    6c70:	stp	x29, x30, [sp, #-80]!
    6c74:	mov	x29, sp
    6c78:	str	x0, [sp, #24]
    6c7c:	mov	w0, #0xffffffff            	// #-1
    6c80:	str	w0, [sp, #76]
    6c84:	ldr	x0, [sp, #24]
    6c88:	ldr	x0, [x0, #56]
    6c8c:	str	x0, [sp, #64]
    6c90:	ldr	x0, [sp, #64]
    6c94:	ldr	x2, [x0, #8]
    6c98:	add	x0, sp, #0x28
    6c9c:	mov	x1, x0
    6ca0:	ldr	x0, [sp, #64]
    6ca4:	blr	x2
    6ca8:	str	x0, [sp, #56]
    6cac:	ldr	x0, [sp, #56]
    6cb0:	cmp	x0, #0x0
    6cb4:	b.eq	6cc0 <grub_console_getkey_ex+0x50>  // b.none
    6cb8:	mov	w0, #0x0                   	// #0
    6cbc:	b	6d8c <grub_console_getkey_ex+0x11c>
    6cc0:	ldr	w0, [sp, #44]
    6cc4:	str	w0, [sp, #52]
    6cc8:	ldr	w0, [sp, #40]
    6ccc:	bl	6ad8 <grub_efi_translate_key>
    6cd0:	str	w0, [sp, #76]
    6cd4:	ldr	w0, [sp, #76]
    6cd8:	cmp	w0, #0x0
    6cdc:	b.ne	6ce8 <grub_console_getkey_ex+0x78>  // b.any
    6ce0:	mov	w0, #0x0                   	// #0
    6ce4:	b	6d8c <grub_console_getkey_ex+0x11c>
    6ce8:	ldr	w0, [sp, #52]
    6cec:	cmp	w0, #0x0
    6cf0:	b.ge	6d88 <grub_console_getkey_ex+0x118>  // b.tcont
    6cf4:	ldr	w0, [sp, #52]
    6cf8:	and	w0, w0, #0x2
    6cfc:	cmp	w0, #0x0
    6d00:	b.ne	6d14 <grub_console_getkey_ex+0xa4>  // b.any
    6d04:	ldr	w0, [sp, #52]
    6d08:	and	w0, w0, #0x1
    6d0c:	cmp	w0, #0x0
    6d10:	b.eq	6d30 <grub_console_getkey_ex+0xc0>  // b.none
    6d14:	ldr	w0, [sp, #76]
    6d18:	and	w0, w0, #0x800000
    6d1c:	cmp	w0, #0x0
    6d20:	b.eq	6d30 <grub_console_getkey_ex+0xc0>  // b.none
    6d24:	ldr	w0, [sp, #76]
    6d28:	orr	w0, w0, #0x1000000
    6d2c:	str	w0, [sp, #76]
    6d30:	ldr	w0, [sp, #52]
    6d34:	and	w0, w0, #0x20
    6d38:	cmp	w0, #0x0
    6d3c:	b.ne	6d50 <grub_console_getkey_ex+0xe0>  // b.any
    6d40:	ldr	w0, [sp, #52]
    6d44:	and	w0, w0, #0x10
    6d48:	cmp	w0, #0x0
    6d4c:	b.eq	6d5c <grub_console_getkey_ex+0xec>  // b.none
    6d50:	ldr	w0, [sp, #76]
    6d54:	orr	w0, w0, #0x4000000
    6d58:	str	w0, [sp, #76]
    6d5c:	ldr	w0, [sp, #52]
    6d60:	and	w0, w0, #0x8
    6d64:	cmp	w0, #0x0
    6d68:	b.ne	6d7c <grub_console_getkey_ex+0x10c>  // b.any
    6d6c:	ldr	w0, [sp, #52]
    6d70:	and	w0, w0, #0x4
    6d74:	cmp	w0, #0x0
    6d78:	b.eq	6d88 <grub_console_getkey_ex+0x118>  // b.none
    6d7c:	ldr	w0, [sp, #76]
    6d80:	orr	w0, w0, #0x2000000
    6d84:	str	w0, [sp, #76]
    6d88:	ldr	w0, [sp, #76]
    6d8c:	ldp	x29, x30, [sp], #80
    6d90:	ret

0000000000006d94 <grub_efi_console_input_init>:
    6d94:	stp	x29, x30, [sp, #-64]!
    6d98:	mov	x29, sp
    6d9c:	str	x0, [sp, #24]
    6da0:	mov	w0, #0x7534                	// #30004
    6da4:	movk	w0, #0xdd9e, lsl #16
    6da8:	str	w0, [sp, #40]
    6dac:	mov	w0, #0x7762                	// #30562
    6db0:	strh	w0, [sp, #44]
    6db4:	mov	w0, #0x4698                	// #18072
    6db8:	strh	w0, [sp, #46]
    6dbc:	mov	x0, #0x148c                	// #5260
    6dc0:	movk	x0, #0x85f5, lsl #16
    6dc4:	movk	x0, #0xa617, lsl #32
    6dc8:	movk	x0, #0xaa25, lsl #48
    6dcc:	str	x0, [sp, #48]
    6dd0:	adrp	x0, 0 <_start>
    6dd4:	add	x0, x0, #0x0
    6dd8:	ldr	x0, [x0]
    6ddc:	ldr	w0, [x0]
    6de0:	cmp	w0, #0x0
    6de4:	b.eq	6df0 <grub_efi_console_input_init+0x5c>  // b.none
    6de8:	mov	w0, #0x0                   	// #0
    6dec:	b	6e44 <grub_efi_console_input_init+0xb0>
    6df0:	ldr	x0, [sp, #24]
    6df4:	ldr	x0, [x0, #56]
    6df8:	str	x0, [sp, #56]
    6dfc:	ldr	x0, [sp, #56]
    6e00:	cmp	x0, #0x0
    6e04:	b.eq	6e10 <grub_efi_console_input_init+0x7c>  // b.none
    6e08:	mov	w0, #0x0                   	// #0
    6e0c:	b	6e44 <grub_efi_console_input_init+0xb0>
    6e10:	adrp	x0, 0 <_start>
    6e14:	add	x0, x0, #0x0
    6e18:	ldr	x0, [x0]
    6e1c:	ldr	x0, [x0]
    6e20:	ldr	x0, [x0, #40]
    6e24:	add	x1, sp, #0x28
    6e28:	mov	w2, #0x2                   	// #2
    6e2c:	bl	3450 <grub_efi_open_protocol>
    6e30:	str	x0, [sp, #56]
    6e34:	ldr	x0, [sp, #24]
    6e38:	ldr	x1, [sp, #56]
    6e3c:	str	x1, [x0, #56]
    6e40:	mov	w0, #0x0                   	// #0
    6e44:	ldp	x29, x30, [sp], #64
    6e48:	ret
    6e4c:	nop
	...

0000000000006e60 <grub_console_getkey>:
    6e60:	stp	x29, x30, [sp, #-32]!
    6e64:	mov	x29, sp
    6e68:	str	x0, [sp, #24]
    6e6c:	adrp	x0, 0 <_start>
    6e70:	add	x0, x0, #0x0
    6e74:	ldr	x0, [x0]
    6e78:	ldr	w0, [x0]
    6e7c:	cmp	w0, #0x0
    6e80:	b.eq	6e8c <grub_console_getkey+0x2c>  // b.none
    6e84:	mov	w0, #0x0                   	// #0
    6e88:	b	6eb0 <grub_console_getkey+0x50>
    6e8c:	ldr	x0, [sp, #24]
    6e90:	ldr	x0, [x0, #56]
    6e94:	cmp	x0, #0x0
    6e98:	b.eq	6ea8 <grub_console_getkey+0x48>  // b.none
    6e9c:	ldr	x0, [sp, #24]
    6ea0:	bl	6c70 <grub_console_getkey_ex>
    6ea4:	b	6eb0 <grub_console_getkey+0x50>
    6ea8:	ldr	x0, [sp, #24]
    6eac:	bl	6c00 <grub_console_getkey_con>
    6eb0:	ldp	x29, x30, [sp], #32
    6eb4:	ret
	...

0000000000006ec0 <grub_console_getwh>:
    6ec0:	stp	x29, x30, [sp, #-80]!
    6ec4:	mov	x29, sp
    6ec8:	str	x19, [sp, #16]
    6ecc:	str	x0, [sp, #40]
    6ed0:	adrp	x0, 0 <_start>
    6ed4:	add	x0, x0, #0x0
    6ed8:	ldr	x0, [x0]
    6edc:	ldr	x0, [x0]
    6ee0:	ldr	x0, [x0, #64]
    6ee4:	str	x0, [sp, #72]
    6ee8:	adrp	x0, 0 <_start>
    6eec:	add	x0, x0, #0x0
    6ef0:	ldr	x0, [x0]
    6ef4:	ldr	w0, [x0]
    6ef8:	cmp	w0, #0x0
    6efc:	b.ne	6f3c <grub_console_getwh+0x7c>  // b.any
    6f00:	ldr	x0, [sp, #72]
    6f04:	ldr	x4, [x0, #24]
    6f08:	ldr	x0, [sp, #72]
    6f0c:	ldr	x0, [x0, #72]
    6f10:	ldr	w0, [x0, #4]
    6f14:	sxtw	x0, w0
    6f18:	add	x2, sp, #0x38
    6f1c:	add	x1, sp, #0x40
    6f20:	mov	x3, x2
    6f24:	mov	x2, x1
    6f28:	mov	x1, x0
    6f2c:	ldr	x0, [sp, #72]
    6f30:	blr	x4
    6f34:	cmp	x0, #0x0
    6f38:	b.eq	6f4c <grub_console_getwh+0x8c>  // b.none
    6f3c:	mov	x0, #0x50                  	// #80
    6f40:	str	x0, [sp, #64]
    6f44:	mov	x0, #0x19                  	// #25
    6f48:	str	x0, [sp, #56]
    6f4c:	ldr	x0, [sp, #64]
    6f50:	and	w1, w0, #0xffff
    6f54:	ldr	x0, [sp, #56]
    6f58:	and	w0, w0, #0xffff
    6f5c:	bfxil	w19, w1, #0, #16
    6f60:	bfi	w19, w0, #16, #16
    6f64:	mov	w0, w19
    6f68:	ldr	x19, [sp, #16]
    6f6c:	ldp	x29, x30, [sp], #80
    6f70:	ret
    6f74:	nop
	...

0000000000006f88 <grub_console_getxy>:
    6f88:	sub	sp, sp, #0x20
    6f8c:	str	x0, [sp, #8]
    6f90:	adrp	x0, 0 <_start>
    6f94:	add	x0, x0, #0x0
    6f98:	ldr	x0, [x0]
    6f9c:	ldr	w0, [x0]
    6fa0:	cmp	w0, #0x0
    6fa4:	b.eq	6fbc <grub_console_getxy+0x34>  // b.none
    6fa8:	and	w0, w1, #0xffff0000
    6fac:	mov	w1, w0
    6fb0:	and	w0, w1, #0xffff
    6fb4:	mov	w1, w0
    6fb8:	b	6ffc <grub_console_getxy+0x74>
    6fbc:	adrp	x0, 0 <_start>
    6fc0:	add	x0, x0, #0x0
    6fc4:	ldr	x0, [x0]
    6fc8:	ldr	x0, [x0]
    6fcc:	ldr	x0, [x0, #64]
    6fd0:	str	x0, [sp, #24]
    6fd4:	ldr	x0, [sp, #24]
    6fd8:	ldr	x0, [x0, #72]
    6fdc:	ldr	w0, [x0, #12]
    6fe0:	and	w2, w0, #0xffff
    6fe4:	ldr	x0, [sp, #24]
    6fe8:	ldr	x0, [x0, #72]
    6fec:	ldr	w0, [x0, #16]
    6ff0:	and	w0, w0, #0xffff
    6ff4:	bfxil	w1, w2, #0, #16
    6ff8:	bfi	w1, w0, #16, #16
    6ffc:	mov	w0, w1
    7000:	add	sp, sp, #0x20
    7004:	ret
	...

0000000000007018 <grub_console_gotoxy>:
    7018:	stp	x29, x30, [sp, #-48]!
    701c:	mov	x29, sp
    7020:	str	x0, [sp, #24]
    7024:	str	w1, [sp, #16]
    7028:	adrp	x0, 0 <_start>
    702c:	add	x0, x0, #0x0
    7030:	ldr	x0, [x0]
    7034:	ldr	w0, [x0]
    7038:	cmp	w0, #0x0
    703c:	b.ne	7084 <grub_console_gotoxy+0x6c>  // b.any
    7040:	adrp	x0, 0 <_start>
    7044:	add	x0, x0, #0x0
    7048:	ldr	x0, [x0]
    704c:	ldr	x0, [x0]
    7050:	ldr	x0, [x0, #64]
    7054:	str	x0, [sp, #40]
    7058:	ldr	x0, [sp, #40]
    705c:	ldr	x3, [x0, #56]
    7060:	ldrh	w0, [sp, #16]
    7064:	and	x0, x0, #0xffff
    7068:	ldrh	w1, [sp, #18]
    706c:	and	x1, x1, #0xffff
    7070:	mov	x2, x1
    7074:	mov	x1, x0
    7078:	ldr	x0, [sp, #40]
    707c:	blr	x3
    7080:	b	7088 <grub_console_gotoxy+0x70>
    7084:	nop
    7088:	ldp	x29, x30, [sp], #48
    708c:	ret
	...

00000000000070a0 <grub_console_cls>:
    70a0:	stp	x29, x30, [sp, #-48]!
    70a4:	mov	x29, sp
    70a8:	str	x0, [sp, #24]
    70ac:	adrp	x0, 0 <_start>
    70b0:	add	x0, x0, #0x0
    70b4:	ldr	x0, [x0]
    70b8:	ldr	w0, [x0]
    70bc:	cmp	w0, #0x0
    70c0:	b.ne	712c <grub_console_cls+0x8c>  // b.any
    70c4:	adrp	x0, 0 <_start>
    70c8:	add	x0, x0, #0x0
    70cc:	ldr	x0, [x0]
    70d0:	ldr	x0, [x0]
    70d4:	ldr	x0, [x0, #64]
    70d8:	str	x0, [sp, #40]
    70dc:	ldr	x0, [sp, #40]
    70e0:	ldr	x0, [x0, #72]
    70e4:	ldr	w0, [x0, #8]
    70e8:	str	w0, [sp, #36]
    70ec:	ldr	x0, [sp, #40]
    70f0:	ldr	x2, [x0, #40]
    70f4:	mov	x1, #0x0                   	// #0
    70f8:	ldr	x0, [sp, #40]
    70fc:	blr	x2
    7100:	ldr	x0, [sp, #40]
    7104:	ldr	x1, [x0, #48]
    7108:	ldr	x0, [sp, #40]
    710c:	blr	x1
    7110:	ldr	x0, [sp, #40]
    7114:	ldr	x2, [x0, #40]
    7118:	ldrsw	x0, [sp, #36]
    711c:	mov	x1, x0
    7120:	ldr	x0, [sp, #40]
    7124:	blr	x2
    7128:	b	7130 <grub_console_cls+0x90>
    712c:	nop
    7130:	ldp	x29, x30, [sp], #48
    7134:	ret
	...

0000000000007148 <grub_console_setcolorstate>:
    7148:	stp	x29, x30, [sp, #-48]!
    714c:	mov	x29, sp
    7150:	str	x0, [sp, #24]
    7154:	str	w1, [sp, #20]
    7158:	adrp	x0, 0 <_start>
    715c:	add	x0, x0, #0x0
    7160:	ldr	x0, [x0]
    7164:	ldr	w0, [x0]
    7168:	cmp	w0, #0x0
    716c:	b.ne	7234 <grub_console_setcolorstate+0xec>  // b.any
    7170:	adrp	x0, 0 <_start>
    7174:	add	x0, x0, #0x0
    7178:	ldr	x0, [x0]
    717c:	ldr	x0, [x0]
    7180:	ldr	x0, [x0, #64]
    7184:	str	x0, [sp, #40]
    7188:	ldr	w0, [sp, #20]
    718c:	cmp	w0, #0x2
    7190:	b.eq	7204 <grub_console_setcolorstate+0xbc>  // b.none
    7194:	ldr	w0, [sp, #20]
    7198:	cmp	w0, #0x2
    719c:	b.hi	723c <grub_console_setcolorstate+0xf4>  // b.pmore
    71a0:	ldr	w0, [sp, #20]
    71a4:	cmp	w0, #0x0
    71a8:	b.eq	71bc <grub_console_setcolorstate+0x74>  // b.none
    71ac:	ldr	w0, [sp, #20]
    71b0:	cmp	w0, #0x1
    71b4:	b.eq	71d4 <grub_console_setcolorstate+0x8c>  // b.none
    71b8:	b	723c <grub_console_setcolorstate+0xf4>
    71bc:	ldr	x0, [sp, #40]
    71c0:	ldr	x2, [x0, #40]
    71c4:	mov	x1, #0x7                   	// #7
    71c8:	ldr	x0, [sp, #40]
    71cc:	blr	x2
    71d0:	b	7240 <grub_console_setcolorstate+0xf8>
    71d4:	ldr	x0, [sp, #40]
    71d8:	ldr	x2, [x0, #40]
    71dc:	adrp	x0, 0 <_start>
    71e0:	add	x0, x0, #0x0
    71e4:	ldr	x0, [x0]
    71e8:	ldrb	w0, [x0]
    71ec:	and	x0, x0, #0xff
    71f0:	and	x0, x0, #0x7f
    71f4:	mov	x1, x0
    71f8:	ldr	x0, [sp, #40]
    71fc:	blr	x2
    7200:	b	7240 <grub_console_setcolorstate+0xf8>
    7204:	ldr	x0, [sp, #40]
    7208:	ldr	x2, [x0, #40]
    720c:	adrp	x0, 0 <_start>
    7210:	add	x0, x0, #0x0
    7214:	ldr	x0, [x0]
    7218:	ldrb	w0, [x0]
    721c:	and	x0, x0, #0xff
    7220:	and	x0, x0, #0x7f
    7224:	mov	x1, x0
    7228:	ldr	x0, [sp, #40]
    722c:	blr	x2
    7230:	b	7240 <grub_console_setcolorstate+0xf8>
    7234:	nop
    7238:	b	7240 <grub_console_setcolorstate+0xf8>
    723c:	nop
    7240:	ldp	x29, x30, [sp], #48
    7244:	ret
	...

0000000000007268 <grub_console_setcursor>:
    7268:	stp	x29, x30, [sp, #-48]!
    726c:	mov	x29, sp
    7270:	str	x0, [sp, #24]
    7274:	str	w1, [sp, #20]
    7278:	adrp	x0, 0 <_start>
    727c:	add	x0, x0, #0x0
    7280:	ldr	x0, [x0]
    7284:	ldr	w0, [x0]
    7288:	cmp	w0, #0x0
    728c:	b.ne	72c8 <grub_console_setcursor+0x60>  // b.any
    7290:	adrp	x0, 0 <_start>
    7294:	add	x0, x0, #0x0
    7298:	ldr	x0, [x0]
    729c:	ldr	x0, [x0]
    72a0:	ldr	x0, [x0, #64]
    72a4:	str	x0, [sp, #40]
    72a8:	ldr	x0, [sp, #40]
    72ac:	ldr	x2, [x0, #64]
    72b0:	ldr	w0, [sp, #20]
    72b4:	and	w0, w0, #0xff
    72b8:	mov	w1, w0
    72bc:	ldr	x0, [sp, #40]
    72c0:	blr	x2
    72c4:	b	72cc <grub_console_setcursor+0x64>
    72c8:	nop
    72cc:	ldp	x29, x30, [sp], #48
    72d0:	ret
    72d4:	nop
	...

00000000000072e8 <grub_efi_console_output_init>:
    72e8:	stp	x29, x30, [sp, #-32]!
    72ec:	mov	x29, sp
    72f0:	str	x0, [sp, #24]
    72f4:	mov	w0, #0x1                   	// #1
    72f8:	bl	34e8 <grub_efi_set_text_mode>
    72fc:	mov	w1, #0x1                   	// #1
    7300:	ldr	x0, [sp, #24]
    7304:	bl	7268 <grub_console_setcursor>
    7308:	mov	w0, #0x0                   	// #0
    730c:	ldp	x29, x30, [sp], #32
    7310:	ret

0000000000007314 <grub_efi_console_output_fini>:
    7314:	stp	x29, x30, [sp, #-32]!
    7318:	mov	x29, sp
    731c:	str	x0, [sp, #24]
    7320:	mov	w1, #0x0                   	// #0
    7324:	ldr	x0, [sp, #24]
    7328:	bl	7268 <grub_console_setcursor>
    732c:	mov	w0, #0x0                   	// #0
    7330:	bl	34e8 <grub_efi_set_text_mode>
    7334:	mov	w0, #0x0                   	// #0
    7338:	ldp	x29, x30, [sp], #32
    733c:	ret

0000000000007340 <grub_console_init>:
    7340:	stp	x29, x30, [sp, #-16]!
    7344:	mov	x29, sp
    7348:	mov	w0, #0x1                   	// #1
    734c:	bl	34e8 <grub_efi_set_text_mode>
    7350:	cmp	w0, #0x0
    7354:	b.ne	7370 <grub_console_init+0x30>  // b.any
    7358:	adrp	x0, 0 <_start>
    735c:	add	x0, x0, #0x0
    7360:	ldr	x1, [x0]
    7364:	mov	w0, #0xd                   	// #13
    7368:	bl	ce54 <grub_error>
    736c:	b	73a8 <grub_console_init+0x68>
    7370:	adrp	x0, 0 <_start>
    7374:	add	x0, x0, #0x0
    7378:	ldr	x1, [x0]
    737c:	adrp	x0, 0 <_start>
    7380:	add	x0, x0, #0x0
    7384:	ldr	x0, [x0]
    7388:	bl	6680 <grub_term_register_output>
    738c:	adrp	x0, 0 <_start>
    7390:	add	x0, x0, #0x0
    7394:	ldr	x1, [x0]
    7398:	adrp	x0, 0 <_start>
    739c:	add	x0, x0, #0x0
    73a0:	ldr	x0, [x0]
    73a4:	bl	65e4 <grub_term_register_input>
    73a8:	ldp	x29, x30, [sp], #16
    73ac:	ret
	...

00000000000073d0 <grub_console_fini>:
    73d0:	stp	x29, x30, [sp, #-16]!
    73d4:	mov	x29, sp
    73d8:	adrp	x0, 0 <_start>
    73dc:	add	x0, x0, #0x0
    73e0:	ldr	x0, [x0]
    73e4:	bl	6718 <grub_term_unregister_input>
    73e8:	adrp	x0, 0 <_start>
    73ec:	add	x0, x0, #0x0
    73f0:	ldr	x0, [x0]
    73f4:	bl	6740 <grub_term_unregister_output>
    73f8:	nop
    73fc:	ldp	x29, x30, [sp], #16
    7400:	ret
    7404:	nop
	...

0000000000007418 <grub_byte_checksum>:
    7418:	sub	sp, sp, #0x20
    741c:	str	x0, [sp, #8]
    7420:	str	x1, [sp]
    7424:	strb	wzr, [sp, #23]
    7428:	ldr	x0, [sp, #8]
    742c:	str	x0, [sp, #24]
    7430:	b	7454 <grub_byte_checksum+0x3c>
    7434:	ldr	x0, [sp, #24]
    7438:	ldrb	w0, [x0]
    743c:	ldrb	w1, [sp, #23]
    7440:	add	w0, w0, w1
    7444:	strb	w0, [sp, #23]
    7448:	ldr	x0, [sp, #24]
    744c:	add	x0, x0, #0x1
    7450:	str	x0, [sp, #24]
    7454:	ldr	x1, [sp, #8]
    7458:	ldr	x0, [sp]
    745c:	add	x0, x1, x0
    7460:	ldr	x1, [sp, #24]
    7464:	cmp	x1, x0
    7468:	b.cc	7434 <grub_byte_checksum+0x1c>  // b.lo, b.ul, b.last
    746c:	ldrb	w0, [sp, #23]
    7470:	add	sp, sp, #0x20
    7474:	ret

0000000000007478 <grub_acpi_rsdt_find_table>:
    7478:	stp	x29, x30, [sp, #-64]!
    747c:	mov	x29, sp
    7480:	str	x0, [sp, #24]
    7484:	str	x1, [sp, #16]
    7488:	ldr	x0, [sp, #24]
    748c:	cmp	x0, #0x0
    7490:	b.ne	749c <grub_acpi_rsdt_find_table+0x24>  // b.any
    7494:	mov	x0, #0x0                   	// #0
    7498:	b	7548 <grub_acpi_rsdt_find_table+0xd0>
    749c:	ldr	x3, [sp, #24]
    74a0:	mov	x2, #0x4                   	// #4
    74a4:	adrp	x0, 0 <_start>
    74a8:	add	x0, x0, #0x0
    74ac:	ldr	x1, [x0]
    74b0:	mov	x0, x3
    74b4:	bl	f5d0 <grub_memcmp>
    74b8:	cmp	w0, #0x0
    74bc:	b.eq	74c8 <grub_acpi_rsdt_find_table+0x50>  // b.none
    74c0:	mov	x0, #0x0                   	// #0
    74c4:	b	7548 <grub_acpi_rsdt_find_table+0xd0>
    74c8:	ldr	x0, [sp, #24]
    74cc:	add	x0, x0, #0x24
    74d0:	str	x0, [sp, #48]
    74d4:	ldr	x0, [sp, #24]
    74d8:	ldr	w0, [x0, #4]
    74dc:	mov	w0, w0
    74e0:	sub	x0, x0, #0x24
    74e4:	lsr	x0, x0, #2
    74e8:	str	x0, [sp, #56]
    74ec:	b	7538 <grub_acpi_rsdt_find_table+0xc0>
    74f0:	ldr	x0, [sp, #48]
    74f4:	ldr	w0, [x0]
    74f8:	mov	w0, w0
    74fc:	str	x0, [sp, #40]
    7500:	ldr	x0, [sp, #40]
    7504:	mov	x2, #0x4                   	// #4
    7508:	ldr	x1, [sp, #16]
    750c:	bl	f5d0 <grub_memcmp>
    7510:	cmp	w0, #0x0
    7514:	b.ne	7520 <grub_acpi_rsdt_find_table+0xa8>  // b.any
    7518:	ldr	x0, [sp, #40]
    751c:	b	7548 <grub_acpi_rsdt_find_table+0xd0>
    7520:	ldr	x0, [sp, #56]
    7524:	sub	x0, x0, #0x1
    7528:	str	x0, [sp, #56]
    752c:	ldr	x0, [sp, #48]
    7530:	add	x0, x0, #0x4
    7534:	str	x0, [sp, #48]
    7538:	ldr	x0, [sp, #56]
    753c:	cmp	x0, #0x0
    7540:	b.ne	74f0 <grub_acpi_rsdt_find_table+0x78>  // b.any
    7544:	mov	x0, #0x0                   	// #0
    7548:	ldp	x29, x30, [sp], #64
    754c:	ret
	...

0000000000007558 <grub_acpi_xsdt_find_table>:
    7558:	stp	x29, x30, [sp, #-64]!
    755c:	mov	x29, sp
    7560:	str	x0, [sp, #24]
    7564:	str	x1, [sp, #16]
    7568:	ldr	x0, [sp, #24]
    756c:	cmp	x0, #0x0
    7570:	b.ne	757c <grub_acpi_xsdt_find_table+0x24>  // b.any
    7574:	mov	x0, #0x0                   	// #0
    7578:	b	7624 <grub_acpi_xsdt_find_table+0xcc>
    757c:	ldr	x3, [sp, #24]
    7580:	mov	x2, #0x4                   	// #4
    7584:	adrp	x0, 0 <_start>
    7588:	add	x0, x0, #0x0
    758c:	ldr	x1, [x0]
    7590:	mov	x0, x3
    7594:	bl	f5d0 <grub_memcmp>
    7598:	cmp	w0, #0x0
    759c:	b.eq	75a8 <grub_acpi_xsdt_find_table+0x50>  // b.none
    75a0:	mov	x0, #0x0                   	// #0
    75a4:	b	7624 <grub_acpi_xsdt_find_table+0xcc>
    75a8:	ldr	x0, [sp, #24]
    75ac:	add	x0, x0, #0x24
    75b0:	str	x0, [sp, #48]
    75b4:	ldr	x0, [sp, #24]
    75b8:	ldr	w0, [x0, #4]
    75bc:	mov	w0, w0
    75c0:	sub	x0, x0, #0x24
    75c4:	lsr	x0, x0, #2
    75c8:	str	x0, [sp, #56]
    75cc:	b	7614 <grub_acpi_xsdt_find_table+0xbc>
    75d0:	ldr	x0, [sp, #48]
    75d4:	ldr	x0, [x0]
    75d8:	str	x0, [sp, #40]
    75dc:	ldr	x0, [sp, #40]
    75e0:	mov	x2, #0x4                   	// #4
    75e4:	ldr	x1, [sp, #16]
    75e8:	bl	f5d0 <grub_memcmp>
    75ec:	cmp	w0, #0x0
    75f0:	b.ne	75fc <grub_acpi_xsdt_find_table+0xa4>  // b.any
    75f4:	ldr	x0, [sp, #40]
    75f8:	b	7624 <grub_acpi_xsdt_find_table+0xcc>
    75fc:	ldr	x0, [sp, #56]
    7600:	sub	x0, x0, #0x1
    7604:	str	x0, [sp, #56]
    7608:	ldr	x0, [sp, #48]
    760c:	add	x0, x0, #0x8
    7610:	str	x0, [sp, #48]
    7614:	ldr	x0, [sp, #56]
    7618:	cmp	x0, #0x0
    761c:	b.ne	75d0 <grub_acpi_xsdt_find_table+0x78>  // b.any
    7620:	mov	x0, #0x0                   	// #0
    7624:	ldp	x29, x30, [sp], #64
    7628:	ret
    762c:	nop
	...

0000000000007638 <grub_acpi_find_fadt>:
    7638:	stp	x29, x30, [sp, #-48]!
    763c:	mov	x29, sp
    7640:	str	xzr, [sp, #40]
    7644:	bl	7740 <grub_machine_acpi_get_rsdpv1>
    7648:	str	x0, [sp, #32]
    764c:	ldr	x0, [sp, #32]
    7650:	cmp	x0, #0x0
    7654:	b.eq	7680 <grub_acpi_find_fadt+0x48>  // b.none
    7658:	ldr	x0, [sp, #32]
    765c:	ldr	w0, [x0, #16]
    7660:	mov	w0, w0
    7664:	mov	x2, x0
    7668:	adrp	x0, 0 <_start>
    766c:	add	x0, x0, #0x0
    7670:	ldr	x1, [x0]
    7674:	mov	x0, x2
    7678:	bl	7478 <grub_acpi_rsdt_find_table>
    767c:	str	x0, [sp, #40]
    7680:	ldr	x0, [sp, #40]
    7684:	cmp	x0, #0x0
    7688:	b.eq	7694 <grub_acpi_find_fadt+0x5c>  // b.none
    768c:	ldr	x0, [sp, #40]
    7690:	b	772c <grub_acpi_find_fadt+0xf4>
    7694:	bl	7820 <grub_machine_acpi_get_rsdpv2>
    7698:	str	x0, [sp, #24]
    769c:	ldr	x0, [sp, #24]
    76a0:	cmp	x0, #0x0
    76a4:	b.eq	76d0 <grub_acpi_find_fadt+0x98>  // b.none
    76a8:	ldr	x0, [sp, #24]
    76ac:	ldr	w0, [x0, #16]
    76b0:	mov	w0, w0
    76b4:	mov	x2, x0
    76b8:	adrp	x0, 0 <_start>
    76bc:	add	x0, x0, #0x0
    76c0:	ldr	x1, [x0]
    76c4:	mov	x0, x2
    76c8:	bl	7478 <grub_acpi_rsdt_find_table>
    76cc:	str	x0, [sp, #40]
    76d0:	ldr	x0, [sp, #40]
    76d4:	cmp	x0, #0x0
    76d8:	b.eq	76e4 <grub_acpi_find_fadt+0xac>  // b.none
    76dc:	ldr	x0, [sp, #40]
    76e0:	b	772c <grub_acpi_find_fadt+0xf4>
    76e4:	ldr	x0, [sp, #24]
    76e8:	cmp	x0, #0x0
    76ec:	b.eq	7714 <grub_acpi_find_fadt+0xdc>  // b.none
    76f0:	ldr	x0, [sp, #24]
    76f4:	ldr	x0, [x0, #24]
    76f8:	mov	x2, x0
    76fc:	adrp	x0, 0 <_start>
    7700:	add	x0, x0, #0x0
    7704:	ldr	x1, [x0]
    7708:	mov	x0, x2
    770c:	bl	7558 <grub_acpi_xsdt_find_table>
    7710:	str	x0, [sp, #40]
    7714:	ldr	x0, [sp, #40]
    7718:	cmp	x0, #0x0
    771c:	b.eq	7728 <grub_acpi_find_fadt+0xf0>  // b.none
    7720:	ldr	x0, [sp, #40]
    7724:	b	772c <grub_acpi_find_fadt+0xf4>
    7728:	mov	x0, #0x0                   	// #0
    772c:	ldp	x29, x30, [sp], #48
    7730:	ret
    7734:	nop
	...

0000000000007740 <grub_machine_acpi_get_rsdpv1>:
    7740:	stp	x29, x30, [sp, #-32]!
    7744:	mov	x29, sp
    7748:	str	wzr, [sp, #28]
    774c:	b	77e0 <grub_machine_acpi_get_rsdpv1+0xa0>
    7750:	adrp	x0, 0 <_start>
    7754:	add	x0, x0, #0x0
    7758:	ldr	x0, [x0]
    775c:	ldr	x0, [x0]
    7760:	ldr	x2, [x0, #112]
    7764:	ldr	w1, [sp, #28]
    7768:	mov	x0, x1
    776c:	lsl	x0, x0, #1
    7770:	add	x0, x0, x1
    7774:	lsl	x0, x0, #3
    7778:	add	x0, x2, x0
    777c:	str	x0, [sp, #16]
    7780:	mov	x2, #0x10                  	// #16
    7784:	adrp	x0, 0 <_start>
    7788:	add	x0, x0, #0x0
    778c:	ldr	x1, [x0]
    7790:	ldr	x0, [sp, #16]
    7794:	bl	f5d0 <grub_memcmp>
    7798:	cmp	w0, #0x0
    779c:	b.ne	77d4 <grub_machine_acpi_get_rsdpv1+0x94>  // b.any
    77a0:	adrp	x0, 0 <_start>
    77a4:	add	x0, x0, #0x0
    77a8:	ldr	x0, [x0]
    77ac:	ldr	x0, [x0]
    77b0:	ldr	x2, [x0, #112]
    77b4:	ldr	w1, [sp, #28]
    77b8:	mov	x0, x1
    77bc:	lsl	x0, x0, #1
    77c0:	add	x0, x0, x1
    77c4:	lsl	x0, x0, #3
    77c8:	add	x0, x2, x0
    77cc:	ldr	x0, [x0, #16]
    77d0:	b	7804 <grub_machine_acpi_get_rsdpv1+0xc4>
    77d4:	ldr	w0, [sp, #28]
    77d8:	add	w0, w0, #0x1
    77dc:	str	w0, [sp, #28]
    77e0:	ldr	w1, [sp, #28]
    77e4:	adrp	x0, 0 <_start>
    77e8:	add	x0, x0, #0x0
    77ec:	ldr	x0, [x0]
    77f0:	ldr	x0, [x0]
    77f4:	ldr	x0, [x0, #104]
    77f8:	cmp	x1, x0
    77fc:	b.cc	7750 <grub_machine_acpi_get_rsdpv1+0x10>  // b.lo, b.ul, b.last
    7800:	mov	x0, #0x0                   	// #0
    7804:	ldp	x29, x30, [sp], #32
    7808:	ret
    780c:	nop
	...

0000000000007820 <grub_machine_acpi_get_rsdpv2>:
    7820:	stp	x29, x30, [sp, #-32]!
    7824:	mov	x29, sp
    7828:	str	wzr, [sp, #28]
    782c:	b	78c0 <grub_machine_acpi_get_rsdpv2+0xa0>
    7830:	adrp	x0, 0 <_start>
    7834:	add	x0, x0, #0x0
    7838:	ldr	x0, [x0]
    783c:	ldr	x0, [x0]
    7840:	ldr	x2, [x0, #112]
    7844:	ldr	w1, [sp, #28]
    7848:	mov	x0, x1
    784c:	lsl	x0, x0, #1
    7850:	add	x0, x0, x1
    7854:	lsl	x0, x0, #3
    7858:	add	x0, x2, x0
    785c:	str	x0, [sp, #16]
    7860:	mov	x2, #0x10                  	// #16
    7864:	adrp	x0, 0 <_start>
    7868:	add	x0, x0, #0x0
    786c:	ldr	x1, [x0]
    7870:	ldr	x0, [sp, #16]
    7874:	bl	f5d0 <grub_memcmp>
    7878:	cmp	w0, #0x0
    787c:	b.ne	78b4 <grub_machine_acpi_get_rsdpv2+0x94>  // b.any
    7880:	adrp	x0, 0 <_start>
    7884:	add	x0, x0, #0x0
    7888:	ldr	x0, [x0]
    788c:	ldr	x0, [x0]
    7890:	ldr	x2, [x0, #112]
    7894:	ldr	w1, [sp, #28]
    7898:	mov	x0, x1
    789c:	lsl	x0, x0, #1
    78a0:	add	x0, x0, x1
    78a4:	lsl	x0, x0, #3
    78a8:	add	x0, x2, x0
    78ac:	ldr	x0, [x0, #16]
    78b0:	b	78e4 <grub_machine_acpi_get_rsdpv2+0xc4>
    78b4:	ldr	w0, [sp, #28]
    78b8:	add	w0, w0, #0x1
    78bc:	str	w0, [sp, #28]
    78c0:	ldr	w1, [sp, #28]
    78c4:	adrp	x0, 0 <_start>
    78c8:	add	x0, x0, #0x0
    78cc:	ldr	x0, [x0]
    78d0:	ldr	x0, [x0]
    78d4:	ldr	x0, [x0, #104]
    78d8:	cmp	x1, x0
    78dc:	b.cc	7830 <grub_machine_acpi_get_rsdpv2+0x10>  // b.lo, b.ul, b.last
    78e0:	mov	x0, #0x0                   	// #0
    78e4:	ldp	x29, x30, [sp], #32
    78e8:	ret
    78ec:	nop
	...

0000000000007900 <memcpy>:
    7900:	stp	x29, x30, [sp, #-48]!
    7904:	mov	x29, sp
    7908:	str	x0, [sp, #40]
    790c:	str	x1, [sp, #32]
    7910:	str	x2, [sp, #24]
    7914:	ldr	x2, [sp, #24]
    7918:	ldr	x1, [sp, #32]
    791c:	ldr	x0, [sp, #40]
    7920:	bl	f08c <grub_memmove>
    7924:	ldp	x29, x30, [sp], #48
    7928:	ret

000000000000792c <memmove>:
    792c:	stp	x29, x30, [sp, #-48]!
    7930:	mov	x29, sp
    7934:	str	x0, [sp, #40]
    7938:	str	x1, [sp, #32]
    793c:	str	x2, [sp, #24]
    7940:	ldr	x2, [sp, #24]
    7944:	ldr	x1, [sp, #32]
    7948:	ldr	x0, [sp, #40]
    794c:	bl	f08c <grub_memmove>
    7950:	ldp	x29, x30, [sp], #48
    7954:	ret

0000000000007958 <memcmp>:
    7958:	stp	x29, x30, [sp, #-48]!
    795c:	mov	x29, sp
    7960:	str	x0, [sp, #40]
    7964:	str	x1, [sp, #32]
    7968:	str	x2, [sp, #24]
    796c:	ldr	x2, [sp, #24]
    7970:	ldr	x1, [sp, #32]
    7974:	ldr	x0, [sp, #40]
    7978:	bl	f5d0 <grub_memcmp>
    797c:	ldp	x29, x30, [sp], #48
    7980:	ret

0000000000007984 <memset>:
    7984:	stp	x29, x30, [sp, #-48]!
    7988:	mov	x29, sp
    798c:	str	x0, [sp, #40]
    7990:	str	w1, [sp, #36]
    7994:	str	x2, [sp, #24]
    7998:	ldr	x2, [sp, #24]
    799c:	ldr	w1, [sp, #36]
    79a0:	ldr	x0, [sp, #40]
    79a4:	bl	fd18 <grub_memset>
    79a8:	ldp	x29, x30, [sp], #48
    79ac:	ret

00000000000079b0 <grub_memcpy>:
    79b0:	stp	x29, x30, [sp, #-48]!
    79b4:	mov	x29, sp
    79b8:	str	x0, [sp, #40]
    79bc:	str	x1, [sp, #32]
    79c0:	str	x2, [sp, #24]
    79c4:	ldr	x2, [sp, #24]
    79c8:	ldr	x1, [sp, #32]
    79cc:	ldr	x0, [sp, #40]
    79d0:	bl	f08c <grub_memmove>
    79d4:	ldp	x29, x30, [sp], #48
    79d8:	ret

00000000000079dc <get_header_from_pointer>:
    79dc:	stp	x29, x30, [sp, #-48]!
    79e0:	mov	x29, sp
    79e4:	str	x0, [sp, #40]
    79e8:	str	x1, [sp, #32]
    79ec:	str	x2, [sp, #24]
    79f0:	ldr	x0, [sp, #40]
    79f4:	and	x0, x0, #0x1f
    79f8:	cmp	x0, #0x0
    79fc:	b.eq	7a14 <get_header_from_pointer+0x38>  // b.none
    7a00:	ldr	x1, [sp, #40]
    7a04:	adrp	x0, 0 <_start>
    7a08:	add	x0, x0, #0x0
    7a0c:	ldr	x0, [x0]
    7a10:	bl	117e8 <grub_fatal>
    7a14:	adrp	x0, 0 <_start>
    7a18:	add	x0, x0, #0x0
    7a1c:	ldr	x0, [x0]
    7a20:	ldr	x1, [x0]
    7a24:	ldr	x0, [sp, #24]
    7a28:	str	x1, [x0]
    7a2c:	b	7a8c <get_header_from_pointer+0xb0>
    7a30:	ldr	x0, [sp, #24]
    7a34:	ldr	x0, [x0]
    7a38:	add	x0, x0, #0x20
    7a3c:	mov	x1, x0
    7a40:	ldr	x0, [sp, #40]
    7a44:	cmp	x1, x0
    7a48:	b.cs	7a78 <get_header_from_pointer+0x9c>  // b.hs, b.nlast
    7a4c:	ldr	x0, [sp, #24]
    7a50:	ldr	x0, [x0]
    7a54:	mov	x1, x0
    7a58:	ldr	x0, [sp, #24]
    7a5c:	ldr	x0, [x0]
    7a60:	ldr	x0, [x0, #24]
    7a64:	add	x0, x1, x0
    7a68:	add	x1, x0, #0x20
    7a6c:	ldr	x0, [sp, #40]
    7a70:	cmp	x1, x0
    7a74:	b.cs	7aa0 <get_header_from_pointer+0xc4>  // b.hs, b.nlast
    7a78:	ldr	x0, [sp, #24]
    7a7c:	ldr	x0, [x0]
    7a80:	ldr	x1, [x0, #8]
    7a84:	ldr	x0, [sp, #24]
    7a88:	str	x1, [x0]
    7a8c:	ldr	x0, [sp, #24]
    7a90:	ldr	x0, [x0]
    7a94:	cmp	x0, #0x0
    7a98:	b.ne	7a30 <get_header_from_pointer+0x54>  // b.any
    7a9c:	b	7aa4 <get_header_from_pointer+0xc8>
    7aa0:	nop
    7aa4:	ldr	x0, [sp, #24]
    7aa8:	ldr	x0, [x0]
    7aac:	cmp	x0, #0x0
    7ab0:	b.ne	7ac8 <get_header_from_pointer+0xec>  // b.any
    7ab4:	ldr	x1, [sp, #40]
    7ab8:	adrp	x0, 0 <_start>
    7abc:	add	x0, x0, #0x0
    7ac0:	ldr	x0, [x0]
    7ac4:	bl	117e8 <grub_fatal>
    7ac8:	ldr	x0, [sp, #40]
    7acc:	sub	x1, x0, #0x20
    7ad0:	ldr	x0, [sp, #32]
    7ad4:	str	x1, [x0]
    7ad8:	ldr	x0, [sp, #32]
    7adc:	ldr	x0, [x0]
    7ae0:	ldr	x1, [x0, #16]
    7ae4:	mov	x0, #0x2808                	// #10248
    7ae8:	movk	x0, #0x2d3c, lsl #16
    7aec:	cmp	x1, x0
    7af0:	b.ne	7b10 <get_header_from_pointer+0x134>  // b.any
    7af4:	ldr	x0, [sp, #32]
    7af8:	ldr	x0, [x0]
    7afc:	mov	x1, x0
    7b00:	adrp	x0, 0 <_start>
    7b04:	add	x0, x0, #0x0
    7b08:	ldr	x0, [x0]
    7b0c:	bl	117e8 <grub_fatal>
    7b10:	ldr	x0, [sp, #32]
    7b14:	ldr	x0, [x0]
    7b18:	ldr	x1, [x0, #16]
    7b1c:	mov	x0, #0x8fa4                	// #36772
    7b20:	movk	x0, #0x6db0, lsl #16
    7b24:	cmp	x1, x0
    7b28:	b.eq	7b54 <get_header_from_pointer+0x178>  // b.none
    7b2c:	ldr	x0, [sp, #32]
    7b30:	ldr	x1, [x0]
    7b34:	ldr	x0, [sp, #32]
    7b38:	ldr	x0, [x0]
    7b3c:	ldr	x0, [x0, #16]
    7b40:	mov	x2, x0
    7b44:	adrp	x0, 0 <_start>
    7b48:	add	x0, x0, #0x0
    7b4c:	ldr	x0, [x0]
    7b50:	bl	117e8 <grub_fatal>
    7b54:	nop
    7b58:	ldp	x29, x30, [sp], #48
    7b5c:	ret
	...

0000000000007b88 <grub_mm_init_region>:
    7b88:	stp	x29, x30, [sp, #-64]!
    7b8c:	mov	x29, sp
    7b90:	str	x0, [sp, #24]
    7b94:	str	x1, [sp, #16]
    7b98:	ldr	x1, [sp, #24]
    7b9c:	mov	x0, #0xffffffffffffefff    	// #-4097
    7ba0:	cmp	x1, x0
    7ba4:	b.hi	7e5c <grub_mm_init_region+0x2d4>  // b.pmore
    7ba8:	ldr	x0, [sp, #24]
    7bac:	add	x1, x0, #0x1, lsl #12
    7bb0:	ldr	x0, [sp, #16]
    7bb4:	mvn	x0, x0
    7bb8:	cmp	x1, x0
    7bbc:	b.ls	7bd0 <grub_mm_init_region+0x48>  // b.plast
    7bc0:	ldr	x0, [sp, #24]
    7bc4:	mov	x1, #0xfffffffffffff000    	// #-4096
    7bc8:	sub	x0, x1, x0
    7bcc:	str	x0, [sp, #16]
    7bd0:	adrp	x0, 0 <_start>
    7bd4:	add	x0, x0, #0x0
    7bd8:	ldr	x0, [x0]
    7bdc:	str	x0, [sp, #56]
    7be0:	ldr	x0, [sp, #56]
    7be4:	ldr	x0, [x0]
    7be8:	str	x0, [sp, #48]
    7bec:	b	7d14 <grub_mm_init_region+0x18c>
    7bf0:	ldr	x0, [sp, #48]
    7bf4:	ldr	x1, [x0, #16]
    7bf8:	ldr	x0, [sp, #16]
    7bfc:	add	x0, x1, x0
    7c00:	ldr	x1, [sp, #24]
    7c04:	add	x0, x1, x0
    7c08:	ldr	x1, [sp, #48]
    7c0c:	cmp	x1, x0
    7c10:	b.ne	7cfc <grub_mm_init_region+0x174>  // b.any
    7c14:	ldr	x0, [sp, #24]
    7c18:	add	x0, x0, #0x1f
    7c1c:	and	x0, x0, #0xffffffffffffffe0
    7c20:	str	x0, [sp, #40]
    7c24:	ldr	x1, [sp, #40]
    7c28:	ldr	x0, [sp, #48]
    7c2c:	mov	x2, x1
    7c30:	mov	x3, x0
    7c34:	ldp	x0, x1, [x3]
    7c38:	stp	x0, x1, [x2]
    7c3c:	ldp	x0, x1, [x3, #16]
    7c40:	stp	x0, x1, [x2, #16]
    7c44:	ldr	x0, [sp, #40]
    7c48:	ldr	x1, [x0, #16]
    7c4c:	ldr	x0, [sp, #16]
    7c50:	add	x1, x1, x0
    7c54:	ldr	x0, [sp, #40]
    7c58:	str	x1, [x0, #16]
    7c5c:	ldr	x0, [sp, #40]
    7c60:	ldr	x0, [x0, #16]
    7c64:	lsr	x0, x0, #5
    7c68:	cmp	x0, #0x0
    7c6c:	b.eq	7cec <grub_mm_init_region+0x164>  // b.none
    7c70:	ldr	x0, [sp, #40]
    7c74:	add	x0, x0, #0x20
    7c78:	str	x0, [sp, #32]
    7c7c:	ldr	x0, [sp, #40]
    7c80:	ldr	x0, [x0, #16]
    7c84:	lsr	x1, x0, #5
    7c88:	ldr	x0, [sp, #32]
    7c8c:	str	x1, [x0, #8]
    7c90:	ldr	x0, [sp, #32]
    7c94:	mov	x1, #0x8fa4                	// #36772
    7c98:	movk	x1, #0x6db0, lsl #16
    7c9c:	str	x1, [x0, #16]
    7ca0:	ldr	x0, [sp, #40]
    7ca4:	ldr	x1, [x0, #24]
    7ca8:	ldr	x0, [sp, #32]
    7cac:	ldr	x0, [x0, #8]
    7cb0:	lsl	x0, x0, #5
    7cb4:	add	x1, x1, x0
    7cb8:	ldr	x0, [sp, #40]
    7cbc:	str	x1, [x0, #24]
    7cc0:	ldr	x0, [sp, #40]
    7cc4:	ldr	x0, [x0, #16]
    7cc8:	and	x1, x0, #0x1f
    7ccc:	ldr	x0, [sp, #40]
    7cd0:	str	x1, [x0, #16]
    7cd4:	ldr	x0, [sp, #56]
    7cd8:	ldr	x1, [sp, #40]
    7cdc:	str	x1, [x0]
    7ce0:	ldr	x0, [sp, #32]
    7ce4:	add	x0, x0, #0x20
    7ce8:	bl	83ac <grub_free>
    7cec:	ldr	x0, [sp, #56]
    7cf0:	ldr	x1, [sp, #40]
    7cf4:	str	x1, [x0]
    7cf8:	b	7e68 <grub_mm_init_region+0x2e0>
    7cfc:	ldr	x0, [sp, #48]
    7d00:	add	x0, x0, #0x8
    7d04:	str	x0, [sp, #56]
    7d08:	ldr	x0, [sp, #56]
    7d0c:	ldr	x0, [x0]
    7d10:	str	x0, [sp, #48]
    7d14:	ldr	x0, [sp, #48]
    7d18:	cmp	x0, #0x0
    7d1c:	b.ne	7bf0 <grub_mm_init_region+0x68>  // b.any
    7d20:	ldr	x0, [sp, #24]
    7d24:	add	x0, x0, #0x1f
    7d28:	and	x0, x0, #0xffffffffffffffe0
    7d2c:	str	x0, [sp, #40]
    7d30:	ldr	x0, [sp, #40]
    7d34:	add	x1, x0, #0x20
    7d38:	ldr	x0, [sp, #24]
    7d3c:	sub	x0, x1, x0
    7d40:	add	x0, x0, #0x20
    7d44:	ldr	x1, [sp, #16]
    7d48:	cmp	x1, x0
    7d4c:	b.cc	7e64 <grub_mm_init_region+0x2dc>  // b.lo, b.ul, b.last
    7d50:	ldr	x1, [sp, #40]
    7d54:	ldr	x0, [sp, #24]
    7d58:	sub	x0, x1, x0
    7d5c:	mov	x1, x0
    7d60:	ldr	x0, [sp, #16]
    7d64:	sub	x0, x0, x1
    7d68:	sub	x0, x0, #0x20
    7d6c:	str	x0, [sp, #16]
    7d70:	ldr	x0, [sp, #40]
    7d74:	add	x0, x0, #0x20
    7d78:	str	x0, [sp, #32]
    7d7c:	ldr	x0, [sp, #32]
    7d80:	ldr	x1, [sp, #32]
    7d84:	str	x1, [x0]
    7d88:	ldr	x0, [sp, #32]
    7d8c:	mov	x1, #0x2808                	// #10248
    7d90:	movk	x1, #0x2d3c, lsl #16
    7d94:	str	x1, [x0, #16]
    7d98:	ldr	x0, [sp, #16]
    7d9c:	lsr	x1, x0, #5
    7da0:	ldr	x0, [sp, #32]
    7da4:	str	x1, [x0, #8]
    7da8:	ldr	x0, [sp, #40]
    7dac:	ldr	x1, [sp, #32]
    7db0:	str	x1, [x0]
    7db4:	ldr	x1, [sp, #40]
    7db8:	ldr	x0, [sp, #24]
    7dbc:	sub	x1, x1, x0
    7dc0:	ldr	x0, [sp, #40]
    7dc4:	str	x1, [x0, #16]
    7dc8:	ldr	x0, [sp, #32]
    7dcc:	ldr	x0, [x0, #8]
    7dd0:	lsl	x1, x0, #5
    7dd4:	ldr	x0, [sp, #40]
    7dd8:	str	x1, [x0, #24]
    7ddc:	adrp	x0, 0 <_start>
    7de0:	add	x0, x0, #0x0
    7de4:	ldr	x0, [x0]
    7de8:	str	x0, [sp, #56]
    7dec:	ldr	x0, [sp, #56]
    7df0:	ldr	x0, [x0]
    7df4:	str	x0, [sp, #48]
    7df8:	b	7e2c <grub_mm_init_region+0x2a4>
    7dfc:	ldr	x0, [sp, #48]
    7e00:	ldr	x1, [x0, #24]
    7e04:	ldr	x0, [sp, #40]
    7e08:	ldr	x0, [x0, #24]
    7e0c:	cmp	x1, x0
    7e10:	b.hi	7e3c <grub_mm_init_region+0x2b4>  // b.pmore
    7e14:	ldr	x0, [sp, #48]
    7e18:	add	x0, x0, #0x8
    7e1c:	str	x0, [sp, #56]
    7e20:	ldr	x0, [sp, #56]
    7e24:	ldr	x0, [x0]
    7e28:	str	x0, [sp, #48]
    7e2c:	ldr	x0, [sp, #48]
    7e30:	cmp	x0, #0x0
    7e34:	b.ne	7dfc <grub_mm_init_region+0x274>  // b.any
    7e38:	b	7e40 <grub_mm_init_region+0x2b8>
    7e3c:	nop
    7e40:	ldr	x0, [sp, #56]
    7e44:	ldr	x1, [sp, #40]
    7e48:	str	x1, [x0]
    7e4c:	ldr	x0, [sp, #40]
    7e50:	ldr	x1, [sp, #48]
    7e54:	str	x1, [x0, #8]
    7e58:	b	7e68 <grub_mm_init_region+0x2e0>
    7e5c:	nop
    7e60:	b	7e68 <grub_mm_init_region+0x2e0>
    7e64:	nop
    7e68:	ldp	x29, x30, [sp], #64
    7e6c:	ret
	...

0000000000007e78 <grub_real_malloc>:
    7e78:	stp	x29, x30, [sp, #-96]!
    7e7c:	mov	x29, sp
    7e80:	str	x0, [sp, #40]
    7e84:	str	x1, [sp, #32]
    7e88:	str	x2, [sp, #24]
    7e8c:	ldr	x0, [sp, #40]
    7e90:	ldr	x0, [x0]
    7e94:	ldr	x1, [x0, #16]
    7e98:	mov	x0, #0x8fa4                	// #36772
    7e9c:	movk	x0, #0x6db0, lsl #16
    7ea0:	cmp	x1, x0
    7ea4:	b.ne	7eb0 <grub_real_malloc+0x38>  // b.any
    7ea8:	mov	x0, #0x0                   	// #0
    7eac:	b	81d8 <grub_real_malloc+0x360>
    7eb0:	ldr	x0, [sp, #40]
    7eb4:	ldr	x0, [x0]
    7eb8:	str	x0, [sp, #80]
    7ebc:	ldr	x0, [sp, #80]
    7ec0:	ldr	x0, [x0]
    7ec4:	str	x0, [sp, #88]
    7ec8:	ldr	x0, [sp, #88]
    7ecc:	add	x0, x0, #0x20
    7ed0:	lsr	x1, x0, #5
    7ed4:	ldr	x0, [sp, #24]
    7ed8:	sub	x0, x0, #0x1
    7edc:	and	x0, x1, x0
    7ee0:	str	x0, [sp, #72]
    7ee4:	ldr	x0, [sp, #72]
    7ee8:	cmp	x0, #0x0
    7eec:	b.eq	7f00 <grub_real_malloc+0x88>  // b.none
    7ef0:	ldr	x1, [sp, #24]
    7ef4:	ldr	x0, [sp, #72]
    7ef8:	sub	x0, x1, x0
    7efc:	str	x0, [sp, #72]
    7f00:	ldr	x0, [sp, #88]
    7f04:	cmp	x0, #0x0
    7f08:	b.ne	7f1c <grub_real_malloc+0xa4>  // b.any
    7f0c:	adrp	x0, 0 <_start>
    7f10:	add	x0, x0, #0x0
    7f14:	ldr	x0, [x0]
    7f18:	bl	117e8 <grub_fatal>
    7f1c:	ldr	x0, [sp, #88]
    7f20:	ldr	x1, [x0, #16]
    7f24:	mov	x0, #0x2808                	// #10248
    7f28:	movk	x0, #0x2d3c, lsl #16
    7f2c:	cmp	x1, x0
    7f30:	b.eq	7f54 <grub_real_malloc+0xdc>  // b.none
    7f34:	ldr	x0, [sp, #88]
    7f38:	ldr	x0, [x0, #16]
    7f3c:	mov	x2, x0
    7f40:	ldr	x1, [sp, #88]
    7f44:	adrp	x0, 0 <_start>
    7f48:	add	x0, x0, #0x0
    7f4c:	ldr	x0, [x0]
    7f50:	bl	117e8 <grub_fatal>
    7f54:	ldr	x0, [sp, #88]
    7f58:	ldr	x1, [x0, #8]
    7f5c:	ldr	x2, [sp, #32]
    7f60:	ldr	x0, [sp, #72]
    7f64:	add	x0, x2, x0
    7f68:	cmp	x1, x0
    7f6c:	b.cc	81a4 <grub_real_malloc+0x32c>  // b.lo, b.ul, b.last
    7f70:	ldr	x0, [sp, #88]
    7f74:	ldr	x1, [x0, #8]
    7f78:	ldr	x0, [sp, #72]
    7f7c:	sub	x1, x1, x0
    7f80:	ldr	x0, [sp, #32]
    7f84:	sub	x1, x1, x0
    7f88:	ldr	x0, [sp, #24]
    7f8c:	neg	x0, x0
    7f90:	and	x0, x1, x0
    7f94:	ldr	x1, [sp, #72]
    7f98:	add	x0, x1, x0
    7f9c:	str	x0, [sp, #72]
    7fa0:	ldr	x0, [sp, #72]
    7fa4:	cmp	x0, #0x0
    7fa8:	b.ne	7fd4 <grub_real_malloc+0x15c>  // b.any
    7fac:	ldr	x0, [sp, #88]
    7fb0:	ldr	x0, [x0, #8]
    7fb4:	ldr	x1, [sp, #32]
    7fb8:	cmp	x1, x0
    7fbc:	b.ne	7fd4 <grub_real_malloc+0x15c>  // b.any
    7fc0:	ldr	x0, [sp, #88]
    7fc4:	ldr	x1, [x0]
    7fc8:	ldr	x0, [sp, #80]
    7fcc:	str	x1, [x0]
    7fd0:	b	8150 <grub_real_malloc+0x2d8>
    7fd4:	ldr	x0, [sp, #24]
    7fd8:	cmp	x0, #0x1
    7fdc:	b.eq	7ffc <grub_real_malloc+0x184>  // b.none
    7fe0:	ldr	x0, [sp, #88]
    7fe4:	ldr	x1, [x0, #8]
    7fe8:	ldr	x2, [sp, #32]
    7fec:	ldr	x0, [sp, #72]
    7ff0:	add	x0, x2, x0
    7ff4:	cmp	x1, x0
    7ff8:	b.ne	8030 <grub_real_malloc+0x1b8>  // b.any
    7ffc:	ldr	x0, [sp, #88]
    8000:	ldr	x1, [x0, #8]
    8004:	ldr	x0, [sp, #32]
    8008:	sub	x1, x1, x0
    800c:	ldr	x0, [sp, #88]
    8010:	str	x1, [x0, #8]
    8014:	ldr	x0, [sp, #88]
    8018:	ldr	x0, [x0, #8]
    801c:	lsl	x0, x0, #5
    8020:	ldr	x1, [sp, #88]
    8024:	add	x0, x1, x0
    8028:	str	x0, [sp, #88]
    802c:	b	8150 <grub_real_malloc+0x2d8>
    8030:	ldr	x0, [sp, #72]
    8034:	cmp	x0, #0x0
    8038:	b.ne	80cc <grub_real_malloc+0x254>  // b.any
    803c:	ldr	x1, [sp, #72]
    8040:	ldr	x0, [sp, #32]
    8044:	add	x0, x1, x0
    8048:	lsl	x0, x0, #5
    804c:	ldr	x1, [sp, #88]
    8050:	add	x0, x1, x0
    8054:	str	x0, [sp, #56]
    8058:	ldr	x0, [sp, #56]
    805c:	mov	x1, #0x2808                	// #10248
    8060:	movk	x1, #0x2d3c, lsl #16
    8064:	str	x1, [x0, #16]
    8068:	ldr	x0, [sp, #88]
    806c:	ldr	x1, [x0, #8]
    8070:	ldr	x0, [sp, #72]
    8074:	sub	x1, x1, x0
    8078:	ldr	x0, [sp, #32]
    807c:	sub	x1, x1, x0
    8080:	ldr	x0, [sp, #56]
    8084:	str	x1, [x0, #8]
    8088:	ldr	x0, [sp, #88]
    808c:	ldr	x1, [x0]
    8090:	ldr	x0, [sp, #56]
    8094:	str	x1, [x0]
    8098:	ldr	x0, [sp, #80]
    809c:	ldr	x1, [sp, #56]
    80a0:	str	x1, [x0]
    80a4:	ldr	x1, [sp, #80]
    80a8:	ldr	x0, [sp, #88]
    80ac:	cmp	x1, x0
    80b0:	b.ne	8150 <grub_real_malloc+0x2d8>  // b.any
    80b4:	ldr	x0, [sp, #56]
    80b8:	str	x0, [sp, #80]
    80bc:	ldr	x0, [sp, #56]
    80c0:	ldr	x1, [sp, #56]
    80c4:	str	x1, [x0]
    80c8:	b	8150 <grub_real_malloc+0x2d8>
    80cc:	ldr	x1, [sp, #72]
    80d0:	ldr	x0, [sp, #32]
    80d4:	add	x0, x1, x0
    80d8:	lsl	x0, x0, #5
    80dc:	ldr	x1, [sp, #88]
    80e0:	add	x0, x1, x0
    80e4:	str	x0, [sp, #64]
    80e8:	ldr	x0, [sp, #64]
    80ec:	mov	x1, #0x2808                	// #10248
    80f0:	movk	x1, #0x2d3c, lsl #16
    80f4:	str	x1, [x0, #16]
    80f8:	ldr	x0, [sp, #88]
    80fc:	ldr	x1, [x0, #8]
    8100:	ldr	x0, [sp, #72]
    8104:	sub	x1, x1, x0
    8108:	ldr	x0, [sp, #32]
    810c:	sub	x1, x1, x0
    8110:	ldr	x0, [sp, #64]
    8114:	str	x1, [x0, #8]
    8118:	ldr	x0, [sp, #64]
    811c:	ldr	x1, [sp, #88]
    8120:	str	x1, [x0]
    8124:	ldr	x0, [sp, #88]
    8128:	ldr	x1, [sp, #72]
    812c:	str	x1, [x0, #8]
    8130:	ldr	x0, [sp, #80]
    8134:	ldr	x1, [sp, #64]
    8138:	str	x1, [x0]
    813c:	ldr	x0, [sp, #72]
    8140:	lsl	x0, x0, #5
    8144:	ldr	x1, [sp, #88]
    8148:	add	x0, x1, x0
    814c:	str	x0, [sp, #88]
    8150:	ldr	x0, [sp, #88]
    8154:	mov	x1, #0x8fa4                	// #36772
    8158:	movk	x1, #0x6db0, lsl #16
    815c:	str	x1, [x0, #16]
    8160:	ldr	x0, [sp, #88]
    8164:	ldr	x1, [sp, #32]
    8168:	str	x1, [x0, #8]
    816c:	ldr	x0, [sp, #32]
    8170:	cmp	x0, #0x3ff
    8174:	b.ls	818c <grub_real_malloc+0x314>  // b.plast
    8178:	ldr	x0, [sp, #40]
    817c:	ldr	x0, [x0]
    8180:	ldr	x1, [sp, #88]
    8184:	cmp	x1, x0
    8188:	b.ne	8198 <grub_real_malloc+0x320>  // b.any
    818c:	ldr	x0, [sp, #40]
    8190:	ldr	x1, [sp, #80]
    8194:	str	x1, [x0]
    8198:	ldr	x0, [sp, #88]
    819c:	add	x0, x0, #0x20
    81a0:	b	81d8 <grub_real_malloc+0x360>
    81a4:	ldr	x0, [sp, #40]
    81a8:	ldr	x0, [x0]
    81ac:	ldr	x1, [sp, #88]
    81b0:	cmp	x1, x0
    81b4:	b.eq	81d0 <grub_real_malloc+0x358>  // b.none
    81b8:	ldr	x0, [sp, #88]
    81bc:	str	x0, [sp, #80]
    81c0:	ldr	x0, [sp, #88]
    81c4:	ldr	x0, [x0]
    81c8:	str	x0, [sp, #88]
    81cc:	b	7ec8 <grub_real_malloc+0x50>
    81d0:	nop
    81d4:	mov	x0, #0x0                   	// #0
    81d8:	ldp	x29, x30, [sp], #96
    81dc:	ret
	...

00000000000081f0 <grub_memalign>:
    81f0:	stp	x29, x30, [sp, #-64]!
    81f4:	mov	x29, sp
    81f8:	str	x0, [sp, #24]
    81fc:	str	x1, [sp, #16]
    8200:	ldr	x0, [sp, #16]
    8204:	add	x0, x0, #0x1f
    8208:	lsr	x0, x0, #5
    820c:	add	x0, x0, #0x1
    8210:	str	x0, [sp, #40]
    8214:	str	wzr, [sp, #52]
    8218:	adrp	x0, 0 <_start>
    821c:	add	x0, x0, #0x0
    8220:	ldr	x0, [x0]
    8224:	ldr	x0, [x0]
    8228:	cmp	x0, #0x0
    822c:	b.eq	82fc <grub_memalign+0x10c>  // b.none
    8230:	ldr	x0, [sp, #24]
    8234:	mvn	x0, x0
    8238:	ldr	x1, [sp, #16]
    823c:	cmp	x1, x0
    8240:	b.hi	8304 <grub_memalign+0x114>  // b.pmore
    8244:	ldr	x1, [sp, #16]
    8248:	ldr	x0, [sp, #24]
    824c:	add	x1, x1, x0
    8250:	mov	x0, #0xffffffffffefffff    	// #-1048577
    8254:	cmp	x1, x0
    8258:	b.hi	830c <grub_memalign+0x11c>  // b.pmore
    825c:	ldr	x0, [sp, #24]
    8260:	lsr	x0, x0, #5
    8264:	str	x0, [sp, #24]
    8268:	ldr	x0, [sp, #24]
    826c:	cmp	x0, #0x0
    8270:	b.ne	8280 <grub_memalign+0x90>  // b.any
    8274:	mov	x0, #0x1                   	// #1
    8278:	str	x0, [sp, #24]
    827c:	b	8284 <grub_memalign+0x94>
    8280:	nop
    8284:	adrp	x0, 0 <_start>
    8288:	add	x0, x0, #0x0
    828c:	ldr	x0, [x0]
    8290:	ldr	x0, [x0]
    8294:	str	x0, [sp, #56]
    8298:	b	82d0 <grub_memalign+0xe0>
    829c:	ldr	x0, [sp, #56]
    82a0:	ldr	x2, [sp, #24]
    82a4:	ldr	x1, [sp, #40]
    82a8:	bl	7e78 <grub_real_malloc>
    82ac:	str	x0, [sp, #32]
    82b0:	ldr	x0, [sp, #32]
    82b4:	cmp	x0, #0x0
    82b8:	b.eq	82c4 <grub_memalign+0xd4>  // b.none
    82bc:	ldr	x0, [sp, #32]
    82c0:	b	8330 <grub_memalign+0x140>
    82c4:	ldr	x0, [sp, #56]
    82c8:	ldr	x0, [x0, #8]
    82cc:	str	x0, [sp, #56]
    82d0:	ldr	x0, [sp, #56]
    82d4:	cmp	x0, #0x0
    82d8:	b.ne	829c <grub_memalign+0xac>  // b.any
    82dc:	ldr	w0, [sp, #52]
    82e0:	cmp	w0, #0x0
    82e4:	b.ne	8314 <grub_memalign+0x124>  // b.any
    82e8:	bl	991c <grub_disk_cache_invalidate_all>
    82ec:	ldr	w0, [sp, #52]
    82f0:	add	w0, w0, #0x1
    82f4:	str	w0, [sp, #52]
    82f8:	b	8284 <grub_memalign+0x94>
    82fc:	nop
    8300:	b	8318 <grub_memalign+0x128>
    8304:	nop
    8308:	b	8318 <grub_memalign+0x128>
    830c:	nop
    8310:	b	8318 <grub_memalign+0x128>
    8314:	nop
    8318:	adrp	x0, 0 <_start>
    831c:	add	x0, x0, #0x0
    8320:	ldr	x1, [x0]
    8324:	mov	w0, #0x3                   	// #3
    8328:	bl	ce54 <grub_error>
    832c:	mov	x0, #0x0                   	// #0
    8330:	ldp	x29, x30, [sp], #64
    8334:	ret
	...

0000000000008348 <grub_malloc>:
    8348:	stp	x29, x30, [sp, #-32]!
    834c:	mov	x29, sp
    8350:	str	x0, [sp, #24]
    8354:	ldr	x1, [sp, #24]
    8358:	mov	x0, #0x0                   	// #0
    835c:	bl	81f0 <grub_memalign>
    8360:	ldp	x29, x30, [sp], #32
    8364:	ret

0000000000008368 <grub_zalloc>:
    8368:	stp	x29, x30, [sp, #-48]!
    836c:	mov	x29, sp
    8370:	str	x0, [sp, #24]
    8374:	ldr	x1, [sp, #24]
    8378:	mov	x0, #0x0                   	// #0
    837c:	bl	81f0 <grub_memalign>
    8380:	str	x0, [sp, #40]
    8384:	ldr	x0, [sp, #40]
    8388:	cmp	x0, #0x0
    838c:	b.eq	83a0 <grub_zalloc+0x38>  // b.none
    8390:	ldr	x2, [sp, #24]
    8394:	mov	w1, #0x0                   	// #0
    8398:	ldr	x0, [sp, #40]
    839c:	bl	fd18 <grub_memset>
    83a0:	ldr	x0, [sp, #40]
    83a4:	ldp	x29, x30, [sp], #48
    83a8:	ret

00000000000083ac <grub_free>:
    83ac:	stp	x29, x30, [sp, #-64]!
    83b0:	mov	x29, sp
    83b4:	str	x0, [sp, #24]
    83b8:	ldr	x0, [sp, #24]
    83bc:	cmp	x0, #0x0
    83c0:	b.eq	8610 <grub_free+0x264>  // b.none
    83c4:	add	x1, sp, #0x20
    83c8:	add	x0, sp, #0x28
    83cc:	mov	x2, x1
    83d0:	mov	x1, x0
    83d4:	ldr	x0, [sp, #24]
    83d8:	bl	79dc <get_header_from_pointer>
    83dc:	ldr	x0, [sp, #32]
    83e0:	ldr	x0, [x0]
    83e4:	ldr	x1, [x0, #16]
    83e8:	mov	x0, #0x8fa4                	// #36772
    83ec:	movk	x0, #0x6db0, lsl #16
    83f0:	cmp	x1, x0
    83f4:	b.ne	8424 <grub_free+0x78>  // b.any
    83f8:	ldr	x0, [sp, #40]
    83fc:	mov	x1, #0x2808                	// #10248
    8400:	movk	x1, #0x2d3c, lsl #16
    8404:	str	x1, [x0, #16]
    8408:	ldr	x0, [sp, #40]
    840c:	ldr	x1, [sp, #40]
    8410:	str	x1, [x0]
    8414:	ldr	x1, [sp, #32]
    8418:	ldr	x0, [x0]
    841c:	str	x0, [x1]
    8420:	b	8614 <grub_free+0x268>
    8424:	ldr	x0, [sp, #32]
    8428:	ldr	x0, [x0]
    842c:	str	x0, [sp, #48]
    8430:	ldr	x0, [sp, #48]
    8434:	ldr	x0, [x0]
    8438:	str	x0, [sp, #56]
    843c:	b	84c4 <grub_free+0x118>
    8440:	ldr	x0, [sp, #56]
    8444:	ldr	x1, [x0, #16]
    8448:	mov	x0, #0x2808                	// #10248
    844c:	movk	x0, #0x2d3c, lsl #16
    8450:	cmp	x1, x0
    8454:	b.eq	8478 <grub_free+0xcc>  // b.none
    8458:	ldr	x0, [sp, #56]
    845c:	ldr	x0, [x0, #16]
    8460:	mov	x2, x0
    8464:	ldr	x1, [sp, #56]
    8468:	adrp	x0, 0 <_start>
    846c:	add	x0, x0, #0x0
    8470:	ldr	x0, [x0]
    8474:	bl	117e8 <grub_fatal>
    8478:	ldr	x0, [sp, #56]
    847c:	ldr	x0, [x0]
    8480:	ldr	x1, [sp, #56]
    8484:	cmp	x1, x0
    8488:	b.hi	84b0 <grub_free+0x104>  // b.pmore
    848c:	ldr	x0, [sp, #40]
    8490:	ldr	x1, [sp, #56]
    8494:	cmp	x1, x0
    8498:	b.hi	84e8 <grub_free+0x13c>  // b.pmore
    849c:	ldr	x0, [sp, #56]
    84a0:	ldr	x1, [x0]
    84a4:	ldr	x0, [sp, #40]
    84a8:	cmp	x1, x0
    84ac:	b.cc	84e8 <grub_free+0x13c>  // b.lo, b.ul, b.last
    84b0:	ldr	x0, [sp, #56]
    84b4:	str	x0, [sp, #48]
    84b8:	ldr	x0, [sp, #48]
    84bc:	ldr	x0, [x0]
    84c0:	str	x0, [sp, #56]
    84c4:	ldr	x0, [sp, #40]
    84c8:	ldr	x1, [sp, #56]
    84cc:	cmp	x1, x0
    84d0:	b.ls	8440 <grub_free+0x94>  // b.plast
    84d4:	ldr	x0, [sp, #56]
    84d8:	ldr	x1, [x0]
    84dc:	ldr	x0, [sp, #40]
    84e0:	cmp	x1, x0
    84e4:	b.cs	8440 <grub_free+0x94>  // b.hs, b.nlast
    84e8:	ldr	x0, [sp, #40]
    84ec:	mov	x1, #0x2808                	// #10248
    84f0:	movk	x1, #0x2d3c, lsl #16
    84f4:	str	x1, [x0, #16]
    84f8:	ldr	x0, [sp, #40]
    84fc:	ldr	x1, [sp, #56]
    8500:	ldr	x1, [x1]
    8504:	str	x1, [x0]
    8508:	ldr	x1, [sp, #40]
    850c:	ldr	x0, [sp, #56]
    8510:	str	x1, [x0]
    8514:	ldr	x0, [sp, #40]
    8518:	ldr	x1, [x0]
    851c:	ldr	x0, [sp, #40]
    8520:	ldr	x0, [x0]
    8524:	ldr	x0, [x0, #8]
    8528:	lsl	x0, x0, #5
    852c:	add	x1, x1, x0
    8530:	ldr	x0, [sp, #40]
    8534:	cmp	x1, x0
    8538:	b.ne	8584 <grub_free+0x1d8>  // b.any
    853c:	ldr	x0, [sp, #40]
    8540:	str	xzr, [x0, #16]
    8544:	ldr	x0, [sp, #40]
    8548:	ldr	x0, [x0]
    854c:	ldr	x2, [x0, #8]
    8550:	ldr	x0, [sp, #40]
    8554:	ldr	x1, [x0, #8]
    8558:	ldr	x0, [sp, #40]
    855c:	ldr	x0, [x0]
    8560:	add	x1, x2, x1
    8564:	str	x1, [x0, #8]
    8568:	ldr	x0, [sp, #40]
    856c:	ldr	x1, [x0]
    8570:	ldr	x0, [sp, #56]
    8574:	str	x1, [x0]
    8578:	ldr	x0, [sp, #40]
    857c:	ldr	x0, [x0]
    8580:	str	x0, [sp, #40]
    8584:	ldr	x0, [sp, #32]
    8588:	ldr	x1, [sp, #56]
    858c:	str	x1, [x0]
    8590:	ldr	x1, [sp, #40]
    8594:	ldr	x0, [sp, #40]
    8598:	ldr	x0, [x0, #8]
    859c:	lsl	x0, x0, #5
    85a0:	add	x0, x1, x0
    85a4:	ldr	x1, [sp, #56]
    85a8:	cmp	x1, x0
    85ac:	b.ne	8600 <grub_free+0x254>  // b.any
    85b0:	ldr	x0, [sp, #56]
    85b4:	str	xzr, [x0, #16]
    85b8:	ldr	x0, [sp, #40]
    85bc:	ldr	x2, [x0, #8]
    85c0:	ldr	x0, [sp, #56]
    85c4:	ldr	x1, [x0, #8]
    85c8:	ldr	x0, [sp, #40]
    85cc:	add	x1, x2, x1
    85d0:	str	x1, [x0, #8]
    85d4:	ldr	x1, [sp, #56]
    85d8:	ldr	x0, [sp, #48]
    85dc:	cmp	x1, x0
    85e0:	b.ne	85ec <grub_free+0x240>  // b.any
    85e4:	ldr	x0, [sp, #40]
    85e8:	str	x0, [sp, #48]
    85ec:	ldr	x1, [sp, #40]
    85f0:	ldr	x0, [sp, #48]
    85f4:	str	x1, [x0]
    85f8:	ldr	x0, [sp, #48]
    85fc:	str	x0, [sp, #56]
    8600:	ldr	x0, [sp, #32]
    8604:	ldr	x1, [sp, #56]
    8608:	str	x1, [x0]
    860c:	b	8614 <grub_free+0x268>
    8610:	nop
    8614:	ldp	x29, x30, [sp], #64
    8618:	ret
    861c:	nop
	...

0000000000008628 <grub_realloc>:
    8628:	stp	x29, x30, [sp, #-64]!
    862c:	mov	x29, sp
    8630:	str	x0, [sp, #24]
    8634:	str	x1, [sp, #16]
    8638:	ldr	x0, [sp, #24]
    863c:	cmp	x0, #0x0
    8640:	b.ne	8650 <grub_realloc+0x28>  // b.any
    8644:	ldr	x0, [sp, #16]
    8648:	bl	8348 <grub_malloc>
    864c:	b	86fc <grub_realloc+0xd4>
    8650:	ldr	x0, [sp, #16]
    8654:	cmp	x0, #0x0
    8658:	b.ne	866c <grub_realloc+0x44>  // b.any
    865c:	ldr	x0, [sp, #24]
    8660:	bl	83ac <grub_free>
    8664:	mov	x0, #0x0                   	// #0
    8668:	b	86fc <grub_realloc+0xd4>
    866c:	ldr	x0, [sp, #16]
    8670:	add	x0, x0, #0x1f
    8674:	lsr	x0, x0, #5
    8678:	add	x0, x0, #0x1
    867c:	str	x0, [sp, #56]
    8680:	add	x1, sp, #0x20
    8684:	add	x0, sp, #0x28
    8688:	mov	x2, x1
    868c:	mov	x1, x0
    8690:	ldr	x0, [sp, #24]
    8694:	bl	79dc <get_header_from_pointer>
    8698:	ldr	x0, [sp, #40]
    869c:	ldr	x0, [x0, #8]
    86a0:	ldr	x1, [sp, #56]
    86a4:	cmp	x1, x0
    86a8:	b.hi	86b4 <grub_realloc+0x8c>  // b.pmore
    86ac:	ldr	x0, [sp, #24]
    86b0:	b	86fc <grub_realloc+0xd4>
    86b4:	ldr	x0, [sp, #16]
    86b8:	bl	8348 <grub_malloc>
    86bc:	str	x0, [sp, #48]
    86c0:	ldr	x0, [sp, #48]
    86c4:	cmp	x0, #0x0
    86c8:	b.ne	86d4 <grub_realloc+0xac>  // b.any
    86cc:	ldr	x0, [sp, #48]
    86d0:	b	86fc <grub_realloc+0xd4>
    86d4:	ldr	x0, [sp, #40]
    86d8:	ldr	x0, [x0, #8]
    86dc:	lsl	x0, x0, #5
    86e0:	mov	x2, x0
    86e4:	ldr	x1, [sp, #24]
    86e8:	ldr	x0, [sp, #48]
    86ec:	bl	79b0 <grub_memcpy>
    86f0:	ldr	x0, [sp, #24]
    86f4:	bl	83ac <grub_free>
    86f8:	ldr	x0, [sp, #48]
    86fc:	ldp	x29, x30, [sp], #64
    8700:	ret
    8704:	nop

0000000000008708 <grub_get_time_ms>:
    8708:	stp	x29, x30, [sp, #-16]!
    870c:	mov	x29, sp
    8710:	adrp	x0, 0 <_start>
    8714:	add	x0, x0, #0x0
    8718:	ldr	x0, [x0]
    871c:	ldr	x0, [x0]
    8720:	blr	x0
    8724:	ldp	x29, x30, [sp], #16
    8728:	ret
    872c:	nop
	...

0000000000008738 <grub_install_get_time_ms>:
    8738:	sub	sp, sp, #0x10
    873c:	str	x0, [sp, #8]
    8740:	adrp	x0, 0 <_start>
    8744:	add	x0, x0, #0x0
    8748:	ldr	x0, [x0]
    874c:	ldr	x1, [sp, #8]
    8750:	str	x1, [x0]
    8754:	nop
    8758:	add	sp, sp, #0x10
    875c:	ret
	...

0000000000008768 <grub_cpu_idle>:
    8768:	nop
    876c:	ret

0000000000008770 <grub_millisleep>:
    8770:	stp	x29, x30, [sp, #-48]!
    8774:	mov	x29, sp
    8778:	str	w0, [sp, #28]
    877c:	bl	8708 <grub_get_time_ms>
    8780:	str	x0, [sp, #40]
    8784:	b	878c <grub_millisleep+0x1c>
    8788:	bl	8768 <grub_cpu_idle>
    878c:	bl	8708 <grub_get_time_ms>
    8790:	mov	x1, x0
    8794:	ldr	x0, [sp, #40]
    8798:	sub	x1, x1, x0
    879c:	ldr	w0, [sp, #28]
    87a0:	cmp	x1, x0
    87a4:	b.cc	8788 <grub_millisleep+0x18>  // b.lo, b.ul, b.last
    87a8:	nop
    87ac:	nop
    87b0:	ldp	x29, x30, [sp], #48
    87b4:	ret

00000000000087b8 <grub_register_command_prio>:
    87b8:	stp	x29, x30, [sp, #-112]!
    87bc:	mov	x29, sp
    87c0:	str	x0, [sp, #56]
    87c4:	str	x1, [sp, #48]
    87c8:	str	x2, [sp, #40]
    87cc:	str	x3, [sp, #32]
    87d0:	str	w4, [sp, #28]
    87d4:	str	wzr, [sp, #108]
    87d8:	mov	x0, #0x48                  	// #72
    87dc:	bl	8368 <grub_zalloc>
    87e0:	str	x0, [sp, #80]
    87e4:	ldr	x0, [sp, #80]
    87e8:	cmp	x0, #0x0
    87ec:	b.ne	87f8 <grub_register_command_prio+0x40>  // b.any
    87f0:	mov	x0, #0x0                   	// #0
    87f4:	b	897c <grub_register_command_prio+0x1c4>
    87f8:	ldr	x0, [sp, #80]
    87fc:	ldr	x1, [sp, #56]
    8800:	str	x1, [x0, #16]
    8804:	ldr	x0, [sp, #80]
    8808:	ldr	x1, [sp, #48]
    880c:	str	x1, [x0, #32]
    8810:	ldr	x0, [sp, #40]
    8814:	cmp	x0, #0x0
    8818:	b.eq	8824 <grub_register_command_prio+0x6c>  // b.none
    881c:	ldr	x0, [sp, #40]
    8820:	b	8830 <grub_register_command_prio+0x78>
    8824:	adrp	x0, 0 <_start>
    8828:	add	x0, x0, #0x0
    882c:	ldr	x0, [x0]
    8830:	ldr	x1, [sp, #80]
    8834:	str	x0, [x1, #48]
    8838:	ldr	x0, [sp, #80]
    883c:	ldr	x1, [sp, #32]
    8840:	str	x1, [x0, #56]
    8844:	ldr	x0, [sp, #80]
    8848:	str	wzr, [x0, #40]
    884c:	ldr	x0, [sp, #80]
    8850:	ldr	w1, [sp, #28]
    8854:	str	w1, [x0, #24]
    8858:	adrp	x0, 0 <_start>
    885c:	add	x0, x0, #0x0
    8860:	ldr	x0, [x0]
    8864:	str	x0, [sp, #96]
    8868:	ldr	x0, [sp, #96]
    886c:	ldr	x0, [x0]
    8870:	str	x0, [sp, #88]
    8874:	b	8908 <grub_register_command_prio+0x150>
    8878:	ldr	x0, [sp, #80]
    887c:	ldr	x2, [x0, #16]
    8880:	ldr	x0, [sp, #88]
    8884:	ldr	x0, [x0, #16]
    8888:	mov	x1, x0
    888c:	mov	x0, x2
    8890:	bl	f660 <grub_strcmp>
    8894:	str	w0, [sp, #76]
    8898:	ldr	w0, [sp, #76]
    889c:	cmp	w0, #0x0
    88a0:	b.lt	8918 <grub_register_command_prio+0x160>  // b.tstop
    88a4:	ldr	w0, [sp, #76]
    88a8:	cmp	w0, #0x0
    88ac:	b.gt	88f0 <grub_register_command_prio+0x138>
    88b0:	ldr	x0, [sp, #80]
    88b4:	ldr	w1, [x0, #24]
    88b8:	ldr	x0, [sp, #88]
    88bc:	ldr	w0, [x0, #24]
    88c0:	and	w0, w0, #0xff
    88c4:	cmp	w1, w0
    88c8:	b.lt	88e4 <grub_register_command_prio+0x12c>  // b.tstop
    88cc:	ldr	x0, [sp, #88]
    88d0:	ldr	w0, [x0, #24]
    88d4:	and	w1, w0, #0xfffffeff
    88d8:	ldr	x0, [sp, #88]
    88dc:	str	w1, [x0, #24]
    88e0:	b	891c <grub_register_command_prio+0x164>
    88e4:	mov	w0, #0x1                   	// #1
    88e8:	str	w0, [sp, #108]
    88ec:	b	88f4 <grub_register_command_prio+0x13c>
    88f0:	nop
    88f4:	ldr	x0, [sp, #88]
    88f8:	str	x0, [sp, #96]
    88fc:	ldr	x0, [sp, #88]
    8900:	ldr	x0, [x0]
    8904:	str	x0, [sp, #88]
    8908:	ldr	x0, [sp, #88]
    890c:	cmp	x0, #0x0
    8910:	b.ne	8878 <grub_register_command_prio+0xc0>  // b.any
    8914:	b	891c <grub_register_command_prio+0x164>
    8918:	nop
    891c:	ldr	x0, [sp, #96]
    8920:	ldr	x1, [sp, #80]
    8924:	str	x1, [x0]
    8928:	ldr	x0, [sp, #80]
    892c:	ldr	x1, [sp, #88]
    8930:	str	x1, [x0]
    8934:	ldr	x0, [sp, #88]
    8938:	cmp	x0, #0x0
    893c:	b.eq	894c <grub_register_command_prio+0x194>  // b.none
    8940:	ldr	x1, [sp, #80]
    8944:	ldr	x0, [sp, #88]
    8948:	str	x1, [x0, #8]
    894c:	ldr	x0, [sp, #80]
    8950:	ldr	x1, [sp, #96]
    8954:	str	x1, [x0, #8]
    8958:	ldr	w0, [sp, #108]
    895c:	cmp	w0, #0x0
    8960:	b.ne	8978 <grub_register_command_prio+0x1c0>  // b.any
    8964:	ldr	x0, [sp, #80]
    8968:	ldr	w0, [x0, #24]
    896c:	orr	w1, w0, #0x100
    8970:	ldr	x0, [sp, #80]
    8974:	str	w1, [x0, #24]
    8978:	ldr	x0, [sp, #80]
    897c:	ldp	x29, x30, [sp], #112
    8980:	ret
    8984:	nop
	...

0000000000008998 <grub_unregister_command>:
    8998:	stp	x29, x30, [sp, #-32]!
    899c:	mov	x29, sp
    89a0:	str	x0, [sp, #24]
    89a4:	ldr	x0, [sp, #24]
    89a8:	ldr	w0, [x0, #24]
    89ac:	and	w0, w0, #0x100
    89b0:	cmp	w0, #0x0
    89b4:	b.eq	89e4 <grub_unregister_command+0x4c>  // b.none
    89b8:	ldr	x0, [sp, #24]
    89bc:	ldr	x0, [x0]
    89c0:	cmp	x0, #0x0
    89c4:	b.eq	89e4 <grub_unregister_command+0x4c>  // b.none
    89c8:	ldr	x0, [sp, #24]
    89cc:	ldr	x0, [x0]
    89d0:	ldr	w1, [x0, #24]
    89d4:	ldr	x0, [sp, #24]
    89d8:	ldr	x0, [x0]
    89dc:	orr	w1, w1, #0x100
    89e0:	str	w1, [x0, #24]
    89e4:	ldr	x0, [sp, #24]
    89e8:	bl	e208 <grub_list_remove>
    89ec:	ldr	x0, [sp, #24]
    89f0:	bl	83ac <grub_free>
    89f4:	nop
    89f8:	ldp	x29, x30, [sp], #32
    89fc:	ret

0000000000008a00 <grub_register_command>:
    8a00:	stp	x29, x30, [sp, #-48]!
    8a04:	mov	x29, sp
    8a08:	str	x0, [sp, #40]
    8a0c:	str	x1, [sp, #32]
    8a10:	str	x2, [sp, #24]
    8a14:	str	x3, [sp, #16]
    8a18:	mov	w4, #0x0                   	// #0
    8a1c:	ldr	x3, [sp, #16]
    8a20:	ldr	x2, [sp, #24]
    8a24:	ldr	x1, [sp, #32]
    8a28:	ldr	x0, [sp, #40]
    8a2c:	bl	87b8 <grub_register_command_prio>
    8a30:	ldp	x29, x30, [sp], #48
    8a34:	ret

0000000000008a38 <grub_core_cmd_set>:
    8a38:	stp	x29, x30, [sp, #-96]!
    8a3c:	mov	x29, sp
    8a40:	str	x19, [sp, #16]
    8a44:	str	x0, [sp, #56]
    8a48:	str	w1, [sp, #52]
    8a4c:	str	x2, [sp, #40]
    8a50:	ldr	w0, [sp, #52]
    8a54:	cmp	w0, #0x0
    8a58:	b.gt	8ab4 <grub_core_cmd_set+0x7c>
    8a5c:	bl	cc08 <grub_env_update_get_sorted>
    8a60:	str	x0, [sp, #88]
    8a64:	b	8aa0 <grub_core_cmd_set+0x68>
    8a68:	ldr	x0, [sp, #88]
    8a6c:	ldr	x19, [x0]
    8a70:	ldr	x0, [sp, #88]
    8a74:	ldr	x0, [x0]
    8a78:	bl	cb00 <grub_env_get>
    8a7c:	mov	x2, x0
    8a80:	mov	x1, x19
    8a84:	adrp	x0, 0 <_start>
    8a88:	add	x0, x0, #0x0
    8a8c:	ldr	x0, [x0]
    8a90:	bl	f1b4 <grub_err_printf>
    8a94:	ldr	x0, [sp, #88]
    8a98:	ldr	x0, [x0, #48]
    8a9c:	str	x0, [sp, #88]
    8aa0:	ldr	x0, [sp, #88]
    8aa4:	cmp	x0, #0x0
    8aa8:	b.ne	8a68 <grub_core_cmd_set+0x30>  // b.any
    8aac:	mov	w0, #0x0                   	// #0
    8ab0:	b	8b20 <grub_core_cmd_set+0xe8>
    8ab4:	ldr	x0, [sp, #40]
    8ab8:	ldr	x0, [x0]
    8abc:	str	x0, [sp, #80]
    8ac0:	mov	w1, #0x3d                  	// #61
    8ac4:	ldr	x0, [sp, #80]
    8ac8:	bl	f79c <grub_strchr>
    8acc:	str	x0, [sp, #72]
    8ad0:	ldr	x0, [sp, #72]
    8ad4:	cmp	x0, #0x0
    8ad8:	b.ne	8af4 <grub_core_cmd_set+0xbc>  // b.any
    8adc:	adrp	x0, 0 <_start>
    8ae0:	add	x0, x0, #0x0
    8ae4:	ldr	x1, [x0]
    8ae8:	mov	w0, #0x12                  	// #18
    8aec:	bl	ce54 <grub_error>
    8af0:	b	8b20 <grub_core_cmd_set+0xe8>
    8af4:	ldr	x0, [sp, #72]
    8af8:	strb	wzr, [x0]
    8afc:	ldr	x0, [sp, #72]
    8b00:	add	x0, x0, #0x1
    8b04:	mov	x1, x0
    8b08:	ldr	x0, [sp, #80]
    8b0c:	bl	c958 <grub_env_set>
    8b10:	ldr	x0, [sp, #72]
    8b14:	mov	w1, #0x3d                  	// #61
    8b18:	strb	w1, [x0]
    8b1c:	mov	w0, #0x0                   	// #0
    8b20:	ldr	x19, [sp, #16]
    8b24:	ldp	x29, x30, [sp], #96
    8b28:	ret
    8b2c:	nop
	...

0000000000008b40 <grub_core_cmd_unset>:
    8b40:	stp	x29, x30, [sp, #-48]!
    8b44:	mov	x29, sp
    8b48:	str	x0, [sp, #40]
    8b4c:	str	w1, [sp, #36]
    8b50:	str	x2, [sp, #24]
    8b54:	ldr	w0, [sp, #36]
    8b58:	cmp	w0, #0x0
    8b5c:	b.gt	8b78 <grub_core_cmd_unset+0x38>
    8b60:	adrp	x0, 0 <_start>
    8b64:	add	x0, x0, #0x0
    8b68:	ldr	x1, [x0]
    8b6c:	mov	w0, #0x12                  	// #18
    8b70:	bl	ce54 <grub_error>
    8b74:	b	8b88 <grub_core_cmd_unset+0x48>
    8b78:	ldr	x0, [sp, #24]
    8b7c:	ldr	x0, [x0]
    8b80:	bl	cb6c <grub_env_unset>
    8b84:	mov	w0, #0x0                   	// #0
    8b88:	ldp	x29, x30, [sp], #48
    8b8c:	ret
	...

0000000000008b98 <grub_core_cmd_insmod>:
    8b98:	stp	x29, x30, [sp, #-64]!
    8b9c:	mov	x29, sp
    8ba0:	str	x0, [sp, #40]
    8ba4:	str	w1, [sp, #36]
    8ba8:	str	x2, [sp, #24]
    8bac:	ldr	w0, [sp, #36]
    8bb0:	cmp	w0, #0x0
    8bb4:	b.ne	8bd0 <grub_core_cmd_insmod+0x38>  // b.any
    8bb8:	adrp	x0, 0 <_start>
    8bbc:	add	x0, x0, #0x0
    8bc0:	ldr	x1, [x0]
    8bc4:	mov	w0, #0x12                  	// #18
    8bc8:	bl	ce54 <grub_error>
    8bcc:	b	8c48 <grub_core_cmd_insmod+0xb0>
    8bd0:	ldr	x0, [sp, #24]
    8bd4:	ldr	x0, [x0]
    8bd8:	ldrb	w0, [x0]
    8bdc:	cmp	w0, #0x2f
    8be0:	b.eq	8c0c <grub_core_cmd_insmod+0x74>  // b.none
    8be4:	ldr	x0, [sp, #24]
    8be8:	ldr	x0, [x0]
    8bec:	ldrb	w0, [x0]
    8bf0:	cmp	w0, #0x28
    8bf4:	b.eq	8c0c <grub_core_cmd_insmod+0x74>  // b.none
    8bf8:	ldr	x0, [sp, #24]
    8bfc:	ldr	x0, [x0]
    8c00:	ldrb	w0, [x0]
    8c04:	cmp	w0, #0x2b
    8c08:	b.ne	8c20 <grub_core_cmd_insmod+0x88>  // b.any
    8c0c:	ldr	x0, [sp, #24]
    8c10:	ldr	x0, [x0]
    8c14:	bl	c418 <grub_dl_load_file>
    8c18:	str	x0, [sp, #56]
    8c1c:	b	8c30 <grub_core_cmd_insmod+0x98>
    8c20:	ldr	x0, [sp, #24]
    8c24:	ldr	x0, [x0]
    8c28:	bl	c520 <grub_dl_load>
    8c2c:	str	x0, [sp, #56]
    8c30:	ldr	x0, [sp, #56]
    8c34:	cmp	x0, #0x0
    8c38:	b.eq	8c44 <grub_core_cmd_insmod+0xac>  // b.none
    8c3c:	ldr	x0, [sp, #56]
    8c40:	bl	be50 <grub_dl_ref>
    8c44:	mov	w0, #0x0                   	// #0
    8c48:	ldp	x29, x30, [sp], #64
    8c4c:	ret
	...

0000000000008c58 <grub_mini_print_devices>:
    8c58:	stp	x29, x30, [sp, #-32]!
    8c5c:	mov	x29, sp
    8c60:	str	x0, [sp, #24]
    8c64:	str	x1, [sp, #16]
    8c68:	ldr	x1, [sp, #24]
    8c6c:	adrp	x0, 0 <_start>
    8c70:	add	x0, x0, #0x0
    8c74:	ldr	x0, [x0]
    8c78:	bl	f1b4 <grub_err_printf>
    8c7c:	mov	w0, #0x0                   	// #0
    8c80:	ldp	x29, x30, [sp], #32
    8c84:	ret
	...

0000000000008c90 <grub_mini_print_files>:
    8c90:	stp	x29, x30, [sp, #-48]!
    8c94:	mov	x29, sp
    8c98:	str	x0, [sp, #40]
    8c9c:	str	x1, [sp, #32]
    8ca0:	str	x2, [sp, #24]
    8ca4:	ldr	x0, [sp, #32]
    8ca8:	ldrb	w0, [x0]
    8cac:	and	w0, w0, #0x1
    8cb0:	and	w0, w0, #0xff
    8cb4:	cmp	w0, #0x0
    8cb8:	b.eq	8ccc <grub_mini_print_files+0x3c>  // b.none
    8cbc:	adrp	x0, 0 <_start>
    8cc0:	add	x0, x0, #0x0
    8cc4:	ldr	x0, [x0]
    8cc8:	b	8cd8 <grub_mini_print_files+0x48>
    8ccc:	adrp	x0, 0 <_start>
    8cd0:	add	x0, x0, #0x0
    8cd4:	ldr	x0, [x0]
    8cd8:	mov	x2, x0
    8cdc:	ldr	x1, [sp, #40]
    8ce0:	adrp	x0, 0 <_start>
    8ce4:	add	x0, x0, #0x0
    8ce8:	ldr	x0, [x0]
    8cec:	bl	f1b4 <grub_err_printf>
    8cf0:	mov	w0, #0x0                   	// #0
    8cf4:	ldp	x29, x30, [sp], #48
    8cf8:	ret
    8cfc:	nop
	...

0000000000008d18 <grub_core_cmd_ls>:
    8d18:	stp	x29, x30, [sp, #-80]!
    8d1c:	mov	x29, sp
    8d20:	str	x0, [sp, #40]
    8d24:	str	w1, [sp, #36]
    8d28:	str	x2, [sp, #24]
    8d2c:	ldr	w0, [sp, #36]
    8d30:	cmp	w0, #0x0
    8d34:	b.gt	8d74 <grub_core_cmd_ls+0x5c>
    8d38:	mov	x1, #0x0                   	// #0
    8d3c:	adrp	x0, 0 <_start>
    8d40:	add	x0, x0, #0x0
    8d44:	ldr	x0, [x0]
    8d48:	bl	9618 <grub_device_iterate>
    8d4c:	adrp	x0, 0 <_start>
    8d50:	add	x0, x0, #0x0
    8d54:	ldr	x0, [x0]
    8d58:	ldr	x1, [x0]
    8d5c:	adrp	x0, 0 <_start>
    8d60:	add	x0, x0, #0x0
    8d64:	ldr	x0, [x0]
    8d68:	blr	x1
    8d6c:	bl	13120 <grub_refresh>
    8d70:	b	8f34 <grub_core_cmd_ls+0x21c>
    8d74:	str	xzr, [sp, #72]
    8d78:	ldr	x0, [sp, #24]
    8d7c:	ldr	x0, [x0]
    8d80:	bl	d2cc <grub_file_get_device_name>
    8d84:	str	x0, [sp, #56]
    8d88:	adrp	x0, 0 <_start>
    8d8c:	add	x0, x0, #0x0
    8d90:	ldr	x0, [x0]
    8d94:	ldr	w0, [x0]
    8d98:	cmp	w0, #0x0
    8d9c:	b.ne	8f04 <grub_core_cmd_ls+0x1ec>  // b.any
    8da0:	ldr	x0, [sp, #56]
    8da4:	bl	91c8 <grub_device_open>
    8da8:	str	x0, [sp, #72]
    8dac:	ldr	x0, [sp, #72]
    8db0:	cmp	x0, #0x0
    8db4:	b.eq	8f0c <grub_core_cmd_ls+0x1f4>  // b.none
    8db8:	ldr	x0, [sp, #72]
    8dbc:	bl	d904 <grub_fs_probe>
    8dc0:	str	x0, [sp, #48]
    8dc4:	ldr	x0, [sp, #24]
    8dc8:	ldr	x0, [x0]
    8dcc:	mov	w1, #0x29                  	// #41
    8dd0:	bl	f79c <grub_strchr>
    8dd4:	str	x0, [sp, #64]
    8dd8:	ldr	x0, [sp, #64]
    8ddc:	cmp	x0, #0x0
    8de0:	b.ne	8df4 <grub_core_cmd_ls+0xdc>  // b.any
    8de4:	ldr	x0, [sp, #24]
    8de8:	ldr	x0, [x0]
    8dec:	str	x0, [sp, #64]
    8df0:	b	8e00 <grub_core_cmd_ls+0xe8>
    8df4:	ldr	x0, [sp, #64]
    8df8:	add	x0, x0, #0x1
    8dfc:	str	x0, [sp, #64]
    8e00:	ldr	x0, [sp, #64]
    8e04:	ldrb	w0, [x0]
    8e08:	cmp	w0, #0x0
    8e0c:	b.ne	8e34 <grub_core_cmd_ls+0x11c>  // b.any
    8e10:	ldr	x0, [sp, #56]
    8e14:	cmp	x0, #0x0
    8e18:	b.ne	8e34 <grub_core_cmd_ls+0x11c>  // b.any
    8e1c:	adrp	x0, 0 <_start>
    8e20:	add	x0, x0, #0x0
    8e24:	ldr	x1, [x0]
    8e28:	mov	w0, #0x12                  	// #18
    8e2c:	bl	ce54 <grub_error>
    8e30:	b	8f18 <grub_core_cmd_ls+0x200>
    8e34:	ldr	x0, [sp, #64]
    8e38:	ldrb	w0, [x0]
    8e3c:	cmp	w0, #0x0
    8e40:	b.ne	8eac <grub_core_cmd_ls+0x194>  // b.any
    8e44:	adrp	x0, 0 <_start>
    8e48:	add	x0, x0, #0x0
    8e4c:	ldr	x0, [x0]
    8e50:	ldr	w0, [x0]
    8e54:	cmp	w0, #0x8
    8e58:	b.ne	8e6c <grub_core_cmd_ls+0x154>  // b.any
    8e5c:	adrp	x0, 0 <_start>
    8e60:	add	x0, x0, #0x0
    8e64:	ldr	x0, [x0]
    8e68:	str	wzr, [x0]
    8e6c:	ldr	x0, [sp, #48]
    8e70:	cmp	x0, #0x0
    8e74:	b.eq	8e84 <grub_core_cmd_ls+0x16c>  // b.none
    8e78:	ldr	x0, [sp, #48]
    8e7c:	ldr	x0, [x0, #16]
    8e80:	b	8e90 <grub_core_cmd_ls+0x178>
    8e84:	adrp	x0, 0 <_start>
    8e88:	add	x0, x0, #0x0
    8e8c:	ldr	x0, [x0]
    8e90:	mov	x2, x0
    8e94:	ldr	x1, [sp, #56]
    8e98:	adrp	x0, 0 <_start>
    8e9c:	add	x0, x0, #0x0
    8ea0:	ldr	x0, [x0]
    8ea4:	bl	f1b4 <grub_err_printf>
    8ea8:	b	8f18 <grub_core_cmd_ls+0x200>
    8eac:	ldr	x0, [sp, #48]
    8eb0:	cmp	x0, #0x0
    8eb4:	b.eq	8f14 <grub_core_cmd_ls+0x1fc>  // b.none
    8eb8:	ldr	x0, [sp, #48]
    8ebc:	ldr	x4, [x0, #24]
    8ec0:	mov	x3, #0x0                   	// #0
    8ec4:	adrp	x0, 0 <_start>
    8ec8:	add	x0, x0, #0x0
    8ecc:	ldr	x2, [x0]
    8ed0:	ldr	x1, [sp, #64]
    8ed4:	ldr	x0, [sp, #72]
    8ed8:	blr	x4
    8edc:	adrp	x0, 0 <_start>
    8ee0:	add	x0, x0, #0x0
    8ee4:	ldr	x0, [x0]
    8ee8:	ldr	x1, [x0]
    8eec:	adrp	x0, 0 <_start>
    8ef0:	add	x0, x0, #0x0
    8ef4:	ldr	x0, [x0]
    8ef8:	blr	x1
    8efc:	bl	13120 <grub_refresh>
    8f00:	b	8f18 <grub_core_cmd_ls+0x200>
    8f04:	nop
    8f08:	b	8f18 <grub_core_cmd_ls+0x200>
    8f0c:	nop
    8f10:	b	8f18 <grub_core_cmd_ls+0x200>
    8f14:	nop
    8f18:	ldr	x0, [sp, #72]
    8f1c:	cmp	x0, #0x0
    8f20:	b.eq	8f2c <grub_core_cmd_ls+0x214>  // b.none
    8f24:	ldr	x0, [sp, #72]
    8f28:	bl	9340 <grub_device_close>
    8f2c:	ldr	x0, [sp, #56]
    8f30:	bl	83ac <grub_free>
    8f34:	adrp	x0, 0 <_start>
    8f38:	add	x0, x0, #0x0
    8f3c:	ldr	x0, [x0]
    8f40:	ldr	w0, [x0]
    8f44:	ldp	x29, x30, [sp], #80
    8f48:	ret
    8f4c:	nop
	...

0000000000008f90 <grub_register_core_commands>:
    8f90:	stp	x29, x30, [sp, #-32]!
    8f94:	mov	x29, sp
    8f98:	adrp	x0, 0 <_start>
    8f9c:	add	x0, x0, #0x0
    8fa0:	ldr	x3, [x0]
    8fa4:	adrp	x0, 0 <_start>
    8fa8:	add	x0, x0, #0x0
    8fac:	ldr	x2, [x0]
    8fb0:	adrp	x0, 0 <_start>
    8fb4:	add	x0, x0, #0x0
    8fb8:	ldr	x1, [x0]
    8fbc:	adrp	x0, 0 <_start>
    8fc0:	add	x0, x0, #0x0
    8fc4:	ldr	x0, [x0]
    8fc8:	bl	8a00 <grub_register_command>
    8fcc:	str	x0, [sp, #24]
    8fd0:	ldr	x0, [sp, #24]
    8fd4:	cmp	x0, #0x0
    8fd8:	b.eq	8ff0 <grub_register_core_commands+0x60>  // b.none
    8fdc:	ldr	x0, [sp, #24]
    8fe0:	ldr	w0, [x0, #40]
    8fe4:	orr	w1, w0, #0x200
    8fe8:	ldr	x0, [sp, #24]
    8fec:	str	w1, [x0, #40]
    8ff0:	adrp	x0, 0 <_start>
    8ff4:	add	x0, x0, #0x0
    8ff8:	ldr	x3, [x0]
    8ffc:	adrp	x0, 0 <_start>
    9000:	add	x0, x0, #0x0
    9004:	ldr	x2, [x0]
    9008:	adrp	x0, 0 <_start>
    900c:	add	x0, x0, #0x0
    9010:	ldr	x1, [x0]
    9014:	adrp	x0, 0 <_start>
    9018:	add	x0, x0, #0x0
    901c:	ldr	x0, [x0]
    9020:	bl	8a00 <grub_register_command>
    9024:	adrp	x0, 0 <_start>
    9028:	add	x0, x0, #0x0
    902c:	ldr	x3, [x0]
    9030:	adrp	x0, 0 <_start>
    9034:	add	x0, x0, #0x0
    9038:	ldr	x2, [x0]
    903c:	adrp	x0, 0 <_start>
    9040:	add	x0, x0, #0x0
    9044:	ldr	x1, [x0]
    9048:	adrp	x0, 0 <_start>
    904c:	add	x0, x0, #0x0
    9050:	ldr	x0, [x0]
    9054:	bl	8a00 <grub_register_command>
    9058:	adrp	x0, 0 <_start>
    905c:	add	x0, x0, #0x0
    9060:	ldr	x3, [x0]
    9064:	adrp	x0, 0 <_start>
    9068:	add	x0, x0, #0x0
    906c:	ldr	x2, [x0]
    9070:	adrp	x0, 0 <_start>
    9074:	add	x0, x0, #0x0
    9078:	ldr	x1, [x0]
    907c:	adrp	x0, 0 <_start>
    9080:	add	x0, x0, #0x0
    9084:	ldr	x0, [x0]
    9088:	bl	8a00 <grub_register_command>
    908c:	nop
    9090:	ldp	x29, x30, [sp], #32
    9094:	ret
	...

0000000000009118 <grub_disk_dev_iterate>:
    9118:	stp	x29, x30, [sp, #-48]!
    911c:	mov	x29, sp
    9120:	str	x0, [sp, #24]
    9124:	str	x1, [sp, #16]
    9128:	str	wzr, [sp, #36]
    912c:	b	91a4 <grub_disk_dev_iterate+0x8c>
    9130:	adrp	x0, 0 <_start>
    9134:	add	x0, x0, #0x0
    9138:	ldr	x0, [x0]
    913c:	ldr	x0, [x0]
    9140:	str	x0, [sp, #40]
    9144:	b	918c <grub_disk_dev_iterate+0x74>
    9148:	ldr	x0, [sp, #40]
    914c:	ldr	x0, [x0, #16]
    9150:	cmp	x0, #0x0
    9154:	b.eq	9180 <grub_disk_dev_iterate+0x68>  // b.none
    9158:	ldr	x0, [sp, #40]
    915c:	ldr	x3, [x0, #16]
    9160:	ldr	w2, [sp, #36]
    9164:	ldr	x1, [sp, #16]
    9168:	ldr	x0, [sp, #24]
    916c:	blr	x3
    9170:	cmp	w0, #0x0
    9174:	b.eq	9180 <grub_disk_dev_iterate+0x68>  // b.none
    9178:	mov	w0, #0x1                   	// #1
    917c:	b	91b4 <grub_disk_dev_iterate+0x9c>
    9180:	ldr	x0, [sp, #40]
    9184:	ldr	x0, [x0, #56]
    9188:	str	x0, [sp, #40]
    918c:	ldr	x0, [sp, #40]
    9190:	cmp	x0, #0x0
    9194:	b.ne	9148 <grub_disk_dev_iterate+0x30>  // b.any
    9198:	ldr	w0, [sp, #36]
    919c:	add	w0, w0, #0x1
    91a0:	str	w0, [sp, #36]
    91a4:	ldr	w0, [sp, #36]
    91a8:	cmp	w0, #0x2
    91ac:	b.ls	9130 <grub_disk_dev_iterate+0x18>  // b.plast
    91b0:	mov	w0, #0x0                   	// #0
    91b4:	ldp	x29, x30, [sp], #48
    91b8:	ret
    91bc:	nop
	...

00000000000091c8 <grub_device_open>:
    91c8:	stp	x29, x30, [sp, #-48]!
    91cc:	mov	x29, sp
    91d0:	str	x0, [sp, #24]
    91d4:	str	xzr, [sp, #40]
    91d8:	ldr	x0, [sp, #24]
    91dc:	cmp	x0, #0x0
    91e0:	b.ne	9238 <grub_device_open+0x70>  // b.any
    91e4:	adrp	x0, 0 <_start>
    91e8:	add	x0, x0, #0x0
    91ec:	ldr	x0, [x0]
    91f0:	bl	cb00 <grub_env_get>
    91f4:	str	x0, [sp, #24]
    91f8:	ldr	x0, [sp, #24]
    91fc:	cmp	x0, #0x0
    9200:	b.eq	9214 <grub_device_open+0x4c>  // b.none
    9204:	ldr	x0, [sp, #24]
    9208:	ldrb	w0, [x0]
    920c:	cmp	w0, #0x0
    9210:	b.ne	9238 <grub_device_open+0x70>  // b.any
    9214:	adrp	x0, 0 <_start>
    9218:	add	x0, x0, #0x0
    921c:	ldr	x2, [x0]
    9220:	adrp	x0, 0 <_start>
    9224:	add	x0, x0, #0x0
    9228:	ldr	x1, [x0]
    922c:	mov	w0, #0xd                   	// #13
    9230:	bl	ce54 <grub_error>
    9234:	b	930c <grub_device_open+0x144>
    9238:	mov	x0, #0x10                  	// #16
    923c:	bl	8348 <grub_malloc>
    9240:	str	x0, [sp, #40]
    9244:	ldr	x0, [sp, #40]
    9248:	cmp	x0, #0x0
    924c:	b.eq	9300 <grub_device_open+0x138>  // b.none
    9250:	ldr	x0, [sp, #40]
    9254:	str	xzr, [x0, #8]
    9258:	ldr	x0, [sp, #24]
    925c:	bl	9d94 <grub_disk_open>
    9260:	mov	x1, x0
    9264:	ldr	x0, [sp, #40]
    9268:	str	x1, [x0]
    926c:	ldr	x0, [sp, #40]
    9270:	ldr	x0, [x0]
    9274:	cmp	x0, #0x0
    9278:	b.eq	9284 <grub_device_open+0xbc>  // b.none
    927c:	ldr	x0, [sp, #40]
    9280:	b	9318 <grub_device_open+0x150>
    9284:	adrp	x0, 0 <_start>
    9288:	add	x0, x0, #0x0
    928c:	ldr	x0, [x0]
    9290:	ldr	x0, [x0]
    9294:	cmp	x0, #0x0
    9298:	b.eq	92e8 <grub_device_open+0x120>  // b.none
    929c:	adrp	x0, 0 <_start>
    92a0:	add	x0, x0, #0x0
    92a4:	ldr	x0, [x0]
    92a8:	ldr	w0, [x0]
    92ac:	cmp	w0, #0xc
    92b0:	b.ne	92e8 <grub_device_open+0x120>  // b.any
    92b4:	adrp	x0, 0 <_start>
    92b8:	add	x0, x0, #0x0
    92bc:	ldr	x0, [x0]
    92c0:	str	wzr, [x0]
    92c4:	adrp	x0, 0 <_start>
    92c8:	add	x0, x0, #0x0
    92cc:	ldr	x0, [x0]
    92d0:	ldr	x1, [x0]
    92d4:	ldr	x0, [sp, #24]
    92d8:	blr	x1
    92dc:	mov	x1, x0
    92e0:	ldr	x0, [sp, #40]
    92e4:	str	x1, [x0, #8]
    92e8:	ldr	x0, [sp, #40]
    92ec:	ldr	x0, [x0, #8]
    92f0:	cmp	x0, #0x0
    92f4:	b.eq	9308 <grub_device_open+0x140>  // b.none
    92f8:	ldr	x0, [sp, #40]
    92fc:	b	9318 <grub_device_open+0x150>
    9300:	nop
    9304:	b	930c <grub_device_open+0x144>
    9308:	nop
    930c:	ldr	x0, [sp, #40]
    9310:	bl	83ac <grub_free>
    9314:	mov	x0, #0x0                   	// #0
    9318:	ldp	x29, x30, [sp], #48
    931c:	ret
	...

0000000000009340 <grub_device_close>:
    9340:	stp	x29, x30, [sp, #-32]!
    9344:	mov	x29, sp
    9348:	str	x0, [sp, #24]
    934c:	ldr	x0, [sp, #24]
    9350:	ldr	x0, [x0]
    9354:	cmp	x0, #0x0
    9358:	b.eq	9368 <grub_device_close+0x28>  // b.none
    935c:	ldr	x0, [sp, #24]
    9360:	ldr	x0, [x0]
    9364:	bl	a138 <grub_disk_close>
    9368:	ldr	x0, [sp, #24]
    936c:	ldr	x0, [x0, #8]
    9370:	cmp	x0, #0x0
    9374:	b.eq	9394 <grub_device_close+0x54>  // b.none
    9378:	ldr	x0, [sp, #24]
    937c:	ldr	x0, [x0, #8]
    9380:	ldr	x0, [x0]
    9384:	bl	83ac <grub_free>
    9388:	ldr	x0, [sp, #24]
    938c:	ldr	x0, [x0, #8]
    9390:	bl	83ac <grub_free>
    9394:	ldr	x0, [sp, #24]
    9398:	bl	83ac <grub_free>
    939c:	adrp	x0, 0 <_start>
    93a0:	add	x0, x0, #0x0
    93a4:	ldr	x0, [x0]
    93a8:	ldr	w0, [x0]
    93ac:	ldp	x29, x30, [sp], #32
    93b0:	ret
    93b4:	nop
	...

00000000000093c0 <iterate_partition>:
    93c0:	stp	x29, x30, [sp, #-80]!
    93c4:	mov	x29, sp
    93c8:	str	x0, [sp, #40]
    93cc:	str	x1, [sp, #32]
    93d0:	str	x2, [sp, #24]
    93d4:	ldr	x0, [sp, #24]
    93d8:	str	x0, [sp, #72]
    93dc:	mov	x0, #0x10                  	// #16
    93e0:	bl	8348 <grub_malloc>
    93e4:	str	x0, [sp, #64]
    93e8:	ldr	x0, [sp, #64]
    93ec:	cmp	x0, #0x0
    93f0:	b.ne	93fc <iterate_partition+0x3c>  // b.any
    93f4:	mov	w0, #0x1                   	// #1
    93f8:	b	9498 <iterate_partition+0xd8>
    93fc:	ldr	x0, [sp, #32]
    9400:	bl	127c0 <grub_partition_get_name>
    9404:	str	x0, [sp, #56]
    9408:	ldr	x0, [sp, #56]
    940c:	cmp	x0, #0x0
    9410:	b.ne	9424 <iterate_partition+0x64>  // b.any
    9414:	ldr	x0, [sp, #64]
    9418:	bl	83ac <grub_free>
    941c:	mov	w0, #0x1                   	// #1
    9420:	b	9498 <iterate_partition+0xd8>
    9424:	ldr	x0, [sp, #40]
    9428:	ldr	x0, [x0]
    942c:	ldr	x2, [sp, #56]
    9430:	mov	x1, x0
    9434:	adrp	x0, 0 <_start>
    9438:	add	x0, x0, #0x0
    943c:	ldr	x0, [x0]
    9440:	bl	11700 <grub_xasprintf>
    9444:	mov	x1, x0
    9448:	ldr	x0, [sp, #64]
    944c:	str	x1, [x0, #8]
    9450:	ldr	x0, [sp, #56]
    9454:	bl	83ac <grub_free>
    9458:	ldr	x0, [sp, #64]
    945c:	ldr	x0, [x0, #8]
    9460:	cmp	x0, #0x0
    9464:	b.ne	9478 <iterate_partition+0xb8>  // b.any
    9468:	ldr	x0, [sp, #64]
    946c:	bl	83ac <grub_free>
    9470:	mov	w0, #0x1                   	// #1
    9474:	b	9498 <iterate_partition+0xd8>
    9478:	ldr	x0, [sp, #72]
    947c:	ldr	x1, [x0, #16]
    9480:	ldr	x0, [sp, #64]
    9484:	str	x1, [x0]
    9488:	ldr	x0, [sp, #72]
    948c:	ldr	x1, [sp, #64]
    9490:	str	x1, [x0, #16]
    9494:	mov	w0, #0x0                   	// #0
    9498:	ldp	x29, x30, [sp], #80
    949c:	ret
	...

00000000000094a8 <iterate_disk>:
    94a8:	stp	x29, x30, [sp, #-80]!
    94ac:	mov	x29, sp
    94b0:	str	x0, [sp, #24]
    94b4:	str	x1, [sp, #16]
    94b8:	ldr	x0, [sp, #16]
    94bc:	str	x0, [sp, #56]
    94c0:	ldr	x0, [sp, #56]
    94c4:	ldr	x2, [x0]
    94c8:	ldr	x0, [sp, #56]
    94cc:	ldr	x0, [x0, #8]
    94d0:	mov	x1, x0
    94d4:	ldr	x0, [sp, #24]
    94d8:	blr	x2
    94dc:	cmp	w0, #0x0
    94e0:	b.eq	94ec <iterate_disk+0x44>  // b.none
    94e4:	mov	w0, #0x1                   	// #1
    94e8:	b	95fc <iterate_disk+0x154>
    94ec:	ldr	x0, [sp, #24]
    94f0:	bl	91c8 <grub_device_open>
    94f4:	str	x0, [sp, #48]
    94f8:	ldr	x0, [sp, #48]
    94fc:	cmp	x0, #0x0
    9500:	b.ne	951c <iterate_disk+0x74>  // b.any
    9504:	adrp	x0, 0 <_start>
    9508:	add	x0, x0, #0x0
    950c:	ldr	x0, [x0]
    9510:	str	wzr, [x0]
    9514:	mov	w0, #0x0                   	// #0
    9518:	b	95fc <iterate_disk+0x154>
    951c:	ldr	x0, [sp, #48]
    9520:	ldr	x0, [x0]
    9524:	cmp	x0, #0x0
    9528:	b.eq	95f0 <iterate_disk+0x148>  // b.none
    952c:	str	wzr, [sp, #68]
    9530:	ldr	x0, [sp, #56]
    9534:	str	xzr, [x0, #16]
    9538:	ldr	x0, [sp, #48]
    953c:	ldr	x3, [x0]
    9540:	ldr	x2, [sp, #56]
    9544:	adrp	x0, 0 <_start>
    9548:	add	x0, x0, #0x0
    954c:	ldr	x1, [x0]
    9550:	mov	x0, x3
    9554:	bl	126e8 <grub_partition_iterate>
    9558:	ldr	x0, [sp, #48]
    955c:	bl	9340 <grub_device_close>
    9560:	adrp	x0, 0 <_start>
    9564:	add	x0, x0, #0x0
    9568:	ldr	x0, [x0]
    956c:	str	wzr, [x0]
    9570:	ldr	x0, [sp, #56]
    9574:	ldr	x0, [x0, #16]
    9578:	str	x0, [sp, #72]
    957c:	b	95dc <iterate_disk+0x134>
    9580:	ldr	x0, [sp, #72]
    9584:	ldr	x0, [x0]
    9588:	str	x0, [sp, #40]
    958c:	ldr	w0, [sp, #68]
    9590:	cmp	w0, #0x0
    9594:	b.ne	95c0 <iterate_disk+0x118>  // b.any
    9598:	ldr	x0, [sp, #56]
    959c:	ldr	x2, [x0]
    95a0:	ldr	x0, [sp, #72]
    95a4:	ldr	x3, [x0, #8]
    95a8:	ldr	x0, [sp, #56]
    95ac:	ldr	x0, [x0, #8]
    95b0:	mov	x1, x0
    95b4:	mov	x0, x3
    95b8:	blr	x2
    95bc:	str	w0, [sp, #68]
    95c0:	ldr	x0, [sp, #72]
    95c4:	ldr	x0, [x0, #8]
    95c8:	bl	83ac <grub_free>
    95cc:	ldr	x0, [sp, #72]
    95d0:	bl	83ac <grub_free>
    95d4:	ldr	x0, [sp, #40]
    95d8:	str	x0, [sp, #72]
    95dc:	ldr	x0, [sp, #72]
    95e0:	cmp	x0, #0x0
    95e4:	b.ne	9580 <iterate_disk+0xd8>  // b.any
    95e8:	ldr	w0, [sp, #68]
    95ec:	b	95fc <iterate_disk+0x154>
    95f0:	ldr	x0, [sp, #48]
    95f4:	bl	9340 <grub_device_close>
    95f8:	mov	w0, #0x0                   	// #0
    95fc:	ldp	x29, x30, [sp], #80
    9600:	ret
    9604:	nop
	...

0000000000009618 <grub_device_iterate>:
    9618:	stp	x29, x30, [sp, #-64]!
    961c:	mov	x29, sp
    9620:	str	x0, [sp, #24]
    9624:	str	x1, [sp, #16]
    9628:	ldr	x0, [sp, #24]
    962c:	str	x0, [sp, #40]
    9630:	ldr	x0, [sp, #16]
    9634:	str	x0, [sp, #48]
    9638:	str	xzr, [sp, #56]
    963c:	add	x0, sp, #0x28
    9640:	mov	x1, x0
    9644:	adrp	x0, 0 <_start>
    9648:	add	x0, x0, #0x0
    964c:	ldr	x0, [x0]
    9650:	bl	9118 <grub_disk_dev_iterate>
    9654:	ldp	x29, x30, [sp], #64
    9658:	ret
    965c:	nop
	...

0000000000009668 <grub_memcpy>:
    9668:	stp	x29, x30, [sp, #-48]!
    966c:	mov	x29, sp
    9670:	str	x0, [sp, #40]
    9674:	str	x1, [sp, #32]
    9678:	str	x2, [sp, #24]
    967c:	ldr	x2, [sp, #24]
    9680:	ldr	x1, [sp, #32]
    9684:	ldr	x0, [sp, #40]
    9688:	bl	f08c <grub_memmove>
    968c:	ldp	x29, x30, [sp], #48
    9690:	ret

0000000000009694 <grub_partition_get_len>:
    9694:	sub	sp, sp, #0x10
    9698:	str	x0, [sp, #8]
    969c:	ldr	x0, [sp, #8]
    96a0:	ldr	x0, [x0, #16]
    96a4:	add	sp, sp, #0x10
    96a8:	ret

00000000000096ac <grub_disk_adjust_range>:
    96ac:	stp	x29, x30, [sp, #-80]!
    96b0:	mov	x29, sp
    96b4:	str	x0, [sp, #40]
    96b8:	str	x1, [sp, #32]
    96bc:	str	x2, [sp, #24]
    96c0:	str	x3, [sp, #16]
    96c4:	ldr	x0, [sp, #32]
    96c8:	ldr	x1, [x0]
    96cc:	ldr	x0, [sp, #24]
    96d0:	ldr	x0, [x0]
    96d4:	lsr	x0, x0, #9
    96d8:	add	x1, x1, x0
    96dc:	ldr	x0, [sp, #32]
    96e0:	str	x1, [x0]
    96e4:	ldr	x0, [sp, #24]
    96e8:	ldr	x0, [x0]
    96ec:	and	x1, x0, #0x1ff
    96f0:	ldr	x0, [sp, #24]
    96f4:	str	x1, [x0]
    96f8:	ldr	x0, [sp, #40]
    96fc:	ldr	x0, [x0, #40]
    9700:	str	x0, [sp, #72]
    9704:	b	97a0 <grub_disk_adjust_range+0xf4>
    9708:	ldr	x0, [sp, #72]
    970c:	ldr	x0, [x0, #8]
    9710:	str	x0, [sp, #56]
    9714:	ldr	x0, [sp, #72]
    9718:	ldr	x0, [x0, #16]
    971c:	str	x0, [sp, #48]
    9720:	ldr	x0, [sp, #32]
    9724:	ldr	x0, [x0]
    9728:	ldr	x1, [sp, #48]
    972c:	cmp	x1, x0
    9730:	b.ls	9764 <grub_disk_adjust_range+0xb8>  // b.plast
    9734:	ldr	x0, [sp, #32]
    9738:	ldr	x0, [x0]
    973c:	ldr	x1, [sp, #48]
    9740:	sub	x1, x1, x0
    9744:	ldr	x0, [sp, #24]
    9748:	ldr	x2, [x0]
    974c:	ldr	x0, [sp, #16]
    9750:	add	x0, x2, x0
    9754:	add	x0, x0, #0x1ff
    9758:	lsr	x0, x0, #9
    975c:	cmp	x1, x0
    9760:	b.cs	977c <grub_disk_adjust_range+0xd0>  // b.hs, b.nlast
    9764:	adrp	x0, 0 <_start>
    9768:	add	x0, x0, #0x0
    976c:	ldr	x1, [x0]
    9770:	mov	w0, #0xb                   	// #11
    9774:	bl	ce54 <grub_error>
    9778:	b	984c <grub_disk_adjust_range+0x1a0>
    977c:	ldr	x0, [sp, #32]
    9780:	ldr	x1, [x0]
    9784:	ldr	x0, [sp, #56]
    9788:	add	x1, x1, x0
    978c:	ldr	x0, [sp, #32]
    9790:	str	x1, [x0]
    9794:	ldr	x0, [sp, #72]
    9798:	ldr	x0, [x0, #40]
    979c:	str	x0, [sp, #72]
    97a0:	ldr	x0, [sp, #72]
    97a4:	cmp	x0, #0x0
    97a8:	b.ne	9708 <grub_disk_adjust_range+0x5c>  // b.any
    97ac:	ldr	x0, [sp, #40]
    97b0:	ldr	x1, [x0, #16]
    97b4:	ldr	x0, [sp, #40]
    97b8:	ldr	w0, [x0, #24]
    97bc:	sub	w0, w0, #0x9
    97c0:	lsl	x0, x1, x0
    97c4:	str	x0, [sp, #64]
    97c8:	ldr	x1, [sp, #64]
    97cc:	mov	x0, #0x8000000000000       	// #2251799813685248
    97d0:	cmp	x1, x0
    97d4:	b.ls	97e0 <grub_disk_adjust_range+0x134>  // b.plast
    97d8:	mov	x0, #0x8000000000000       	// #2251799813685248
    97dc:	str	x0, [sp, #64]
    97e0:	ldr	x0, [sp, #32]
    97e4:	ldr	x0, [x0]
    97e8:	ldr	x1, [sp, #64]
    97ec:	cmp	x1, x0
    97f0:	b.ls	9824 <grub_disk_adjust_range+0x178>  // b.plast
    97f4:	ldr	x0, [sp, #24]
    97f8:	ldr	x1, [x0]
    97fc:	ldr	x0, [sp, #16]
    9800:	add	x0, x1, x0
    9804:	add	x0, x0, #0x1ff
    9808:	lsr	x1, x0, #9
    980c:	ldr	x0, [sp, #32]
    9810:	ldr	x0, [x0]
    9814:	ldr	x2, [sp, #64]
    9818:	sub	x0, x2, x0
    981c:	cmp	x1, x0
    9820:	b.ls	9848 <grub_disk_adjust_range+0x19c>  // b.plast
    9824:	ldr	x0, [sp, #40]
    9828:	ldr	x0, [x0]
    982c:	mov	x2, x0
    9830:	adrp	x0, 0 <_start>
    9834:	add	x0, x0, #0x0
    9838:	ldr	x1, [x0]
    983c:	mov	w0, #0xb                   	// #11
    9840:	bl	ce54 <grub_error>
    9844:	b	984c <grub_disk_adjust_range+0x1a0>
    9848:	mov	w0, #0x0                   	// #0
    984c:	ldp	x29, x30, [sp], #80
    9850:	ret
    9854:	nop
	...

0000000000009868 <transform_sector>:
    9868:	sub	sp, sp, #0x10
    986c:	str	x0, [sp, #8]
    9870:	str	x1, [sp]
    9874:	ldr	x0, [sp, #8]
    9878:	ldr	w0, [x0, #24]
    987c:	sub	w0, w0, #0x9
    9880:	ldr	x1, [sp]
    9884:	lsr	x0, x1, x0
    9888:	add	sp, sp, #0x10
    988c:	ret

0000000000009890 <grub_disk_cache_get_index>:
    9890:	sub	sp, sp, #0x20
    9894:	str	x0, [sp, #24]
    9898:	str	x1, [sp, #16]
    989c:	str	x2, [sp, #8]
    98a0:	ldr	x1, [sp, #24]
    98a4:	mov	x0, x1
    98a8:	lsl	x0, x0, #19
    98ac:	sub	x1, x0, x1
    98b0:	ldr	x2, [sp, #16]
    98b4:	mov	x0, #0xc57b                	// #50555
    98b8:	movk	x0, #0x27, lsl #16
    98bc:	mul	x0, x2, x0
    98c0:	add	x1, x1, x0
    98c4:	ldr	x0, [sp, #8]
    98c8:	lsr	x0, x0, #6
    98cc:	mov	w0, w0
    98d0:	add	x2, x1, x0
    98d4:	mov	x0, #0xedb3                	// #60851
    98d8:	movk	x0, #0x513c, lsl #16
    98dc:	movk	x0, #0x906c, lsl #32
    98e0:	movk	x0, #0xc0, lsl #48
    98e4:	umulh	x0, x2, x0
    98e8:	sub	x1, x2, x0
    98ec:	lsr	x1, x1, #1
    98f0:	add	x0, x0, x1
    98f4:	lsr	x1, x0, #9
    98f8:	mov	x0, x1
    98fc:	lsl	x0, x0, #8
    9900:	sub	x0, x0, x1
    9904:	lsl	x0, x0, #2
    9908:	add	x0, x0, x1
    990c:	sub	x1, x2, x0
    9910:	mov	w0, w1
    9914:	add	sp, sp, #0x20
    9918:	ret

000000000000991c <grub_disk_cache_invalidate_all>:
    991c:	stp	x29, x30, [sp, #-32]!
    9920:	mov	x29, sp
    9924:	str	wzr, [sp, #28]
    9928:	b	9998 <grub_disk_cache_invalidate_all+0x7c>
    992c:	ldr	w1, [sp, #28]
    9930:	mov	x0, x1
    9934:	lsl	x0, x0, #2
    9938:	add	x0, x0, x1
    993c:	lsl	x0, x0, #3
    9940:	mov	x1, x0
    9944:	adrp	x0, 0 <_start>
    9948:	add	x0, x0, #0x0
    994c:	ldr	x0, [x0]
    9950:	add	x0, x1, x0
    9954:	str	x0, [sp, #16]
    9958:	ldr	x0, [sp, #16]
    995c:	ldr	x0, [x0, #24]
    9960:	cmp	x0, #0x0
    9964:	b.eq	998c <grub_disk_cache_invalidate_all+0x70>  // b.none
    9968:	ldr	x0, [sp, #16]
    996c:	ldr	w0, [x0, #32]
    9970:	cmp	w0, #0x0
    9974:	b.ne	998c <grub_disk_cache_invalidate_all+0x70>  // b.any
    9978:	ldr	x0, [sp, #16]
    997c:	ldr	x0, [x0, #24]
    9980:	bl	83ac <grub_free>
    9984:	ldr	x0, [sp, #16]
    9988:	str	xzr, [x0, #24]
    998c:	ldr	w0, [sp, #28]
    9990:	add	w0, w0, #0x1
    9994:	str	w0, [sp, #28]
    9998:	ldr	w0, [sp, #28]
    999c:	cmp	w0, #0x3fc
    99a0:	b.ls	992c <grub_disk_cache_invalidate_all+0x10>  // b.plast
    99a4:	nop
    99a8:	nop
    99ac:	ldp	x29, x30, [sp], #32
    99b0:	ret
    99b4:	nop
	...

00000000000099c0 <grub_disk_cache_fetch>:
    99c0:	stp	x29, x30, [sp, #-64]!
    99c4:	mov	x29, sp
    99c8:	str	x0, [sp, #40]
    99cc:	str	x1, [sp, #32]
    99d0:	str	x2, [sp, #24]
    99d4:	ldr	x2, [sp, #24]
    99d8:	ldr	x1, [sp, #32]
    99dc:	ldr	x0, [sp, #40]
    99e0:	bl	9890 <grub_disk_cache_get_index>
    99e4:	str	w0, [sp, #60]
    99e8:	ldr	w1, [sp, #60]
    99ec:	mov	x0, x1
    99f0:	lsl	x0, x0, #2
    99f4:	add	x0, x0, x1
    99f8:	lsl	x0, x0, #3
    99fc:	mov	x1, x0
    9a00:	adrp	x0, 0 <_start>
    9a04:	add	x0, x0, #0x0
    9a08:	ldr	x0, [x0]
    9a0c:	add	x0, x1, x0
    9a10:	str	x0, [sp, #48]
    9a14:	ldr	x0, [sp, #48]
    9a18:	ldr	w0, [x0]
    9a1c:	mov	w0, w0
    9a20:	ldr	x1, [sp, #40]
    9a24:	cmp	x1, x0
    9a28:	b.ne	9a6c <grub_disk_cache_fetch+0xac>  // b.any
    9a2c:	ldr	x0, [sp, #48]
    9a30:	ldr	x0, [x0, #8]
    9a34:	ldr	x1, [sp, #32]
    9a38:	cmp	x1, x0
    9a3c:	b.ne	9a6c <grub_disk_cache_fetch+0xac>  // b.any
    9a40:	ldr	x0, [sp, #48]
    9a44:	ldr	x0, [x0, #16]
    9a48:	ldr	x1, [sp, #24]
    9a4c:	cmp	x1, x0
    9a50:	b.ne	9a6c <grub_disk_cache_fetch+0xac>  // b.any
    9a54:	ldr	x0, [sp, #48]
    9a58:	mov	w1, #0x1                   	// #1
    9a5c:	str	w1, [x0, #32]
    9a60:	ldr	x0, [sp, #48]
    9a64:	ldr	x0, [x0, #24]
    9a68:	b	9a70 <grub_disk_cache_fetch+0xb0>
    9a6c:	mov	x0, #0x0                   	// #0
    9a70:	ldp	x29, x30, [sp], #64
    9a74:	ret
	...

0000000000009a80 <grub_disk_cache_unlock>:
    9a80:	stp	x29, x30, [sp, #-64]!
    9a84:	mov	x29, sp
    9a88:	str	x0, [sp, #40]
    9a8c:	str	x1, [sp, #32]
    9a90:	str	x2, [sp, #24]
    9a94:	ldr	x2, [sp, #24]
    9a98:	ldr	x1, [sp, #32]
    9a9c:	ldr	x0, [sp, #40]
    9aa0:	bl	9890 <grub_disk_cache_get_index>
    9aa4:	str	w0, [sp, #60]
    9aa8:	ldr	w1, [sp, #60]
    9aac:	mov	x0, x1
    9ab0:	lsl	x0, x0, #2
    9ab4:	add	x0, x0, x1
    9ab8:	lsl	x0, x0, #3
    9abc:	mov	x1, x0
    9ac0:	adrp	x0, 0 <_start>
    9ac4:	add	x0, x0, #0x0
    9ac8:	ldr	x0, [x0]
    9acc:	add	x0, x1, x0
    9ad0:	str	x0, [sp, #48]
    9ad4:	ldr	x0, [sp, #48]
    9ad8:	ldr	w0, [x0]
    9adc:	mov	w0, w0
    9ae0:	ldr	x1, [sp, #40]
    9ae4:	cmp	x1, x0
    9ae8:	b.ne	9b1c <grub_disk_cache_unlock+0x9c>  // b.any
    9aec:	ldr	x0, [sp, #48]
    9af0:	ldr	x0, [x0, #8]
    9af4:	ldr	x1, [sp, #32]
    9af8:	cmp	x1, x0
    9afc:	b.ne	9b1c <grub_disk_cache_unlock+0x9c>  // b.any
    9b00:	ldr	x0, [sp, #48]
    9b04:	ldr	x0, [x0, #16]
    9b08:	ldr	x1, [sp, #24]
    9b0c:	cmp	x1, x0
    9b10:	b.ne	9b1c <grub_disk_cache_unlock+0x9c>  // b.any
    9b14:	ldr	x0, [sp, #48]
    9b18:	str	wzr, [x0, #32]
    9b1c:	nop
    9b20:	ldp	x29, x30, [sp], #64
    9b24:	ret
	...

0000000000009b30 <grub_disk_cache_store>:
    9b30:	stp	x29, x30, [sp, #-64]!
    9b34:	mov	x29, sp
    9b38:	str	x0, [sp, #40]
    9b3c:	str	x1, [sp, #32]
    9b40:	str	x2, [sp, #24]
    9b44:	str	x3, [sp, #16]
    9b48:	ldr	x2, [sp, #24]
    9b4c:	ldr	x1, [sp, #32]
    9b50:	ldr	x0, [sp, #40]
    9b54:	bl	9890 <grub_disk_cache_get_index>
    9b58:	str	w0, [sp, #60]
    9b5c:	ldr	w1, [sp, #60]
    9b60:	mov	x0, x1
    9b64:	lsl	x0, x0, #2
    9b68:	add	x0, x0, x1
    9b6c:	lsl	x0, x0, #3
    9b70:	mov	x1, x0
    9b74:	adrp	x0, 0 <_start>
    9b78:	add	x0, x0, #0x0
    9b7c:	ldr	x0, [x0]
    9b80:	add	x0, x1, x0
    9b84:	str	x0, [sp, #48]
    9b88:	ldr	x0, [sp, #48]
    9b8c:	mov	w1, #0x1                   	// #1
    9b90:	str	w1, [x0, #32]
    9b94:	ldr	x0, [sp, #48]
    9b98:	ldr	x0, [x0, #24]
    9b9c:	bl	83ac <grub_free>
    9ba0:	ldr	x0, [sp, #48]
    9ba4:	str	xzr, [x0, #24]
    9ba8:	ldr	x0, [sp, #48]
    9bac:	str	wzr, [x0, #32]
    9bb0:	mov	x0, #0x8000                	// #32768
    9bb4:	bl	8348 <grub_malloc>
    9bb8:	mov	x1, x0
    9bbc:	ldr	x0, [sp, #48]
    9bc0:	str	x1, [x0, #24]
    9bc4:	ldr	x0, [sp, #48]
    9bc8:	ldr	x0, [x0, #24]
    9bcc:	cmp	x0, #0x0
    9bd0:	b.ne	9be8 <grub_disk_cache_store+0xb8>  // b.any
    9bd4:	adrp	x0, 0 <_start>
    9bd8:	add	x0, x0, #0x0
    9bdc:	ldr	x0, [x0]
    9be0:	ldr	w0, [x0]
    9be4:	b	9c28 <grub_disk_cache_store+0xf8>
    9be8:	ldr	x0, [sp, #48]
    9bec:	ldr	x0, [x0, #24]
    9bf0:	mov	x2, #0x8000                	// #32768
    9bf4:	ldr	x1, [sp, #16]
    9bf8:	bl	9668 <grub_memcpy>
    9bfc:	ldr	x0, [sp, #40]
    9c00:	mov	w1, w0
    9c04:	ldr	x0, [sp, #48]
    9c08:	str	w1, [x0]
    9c0c:	ldr	x0, [sp, #48]
    9c10:	ldr	x1, [sp, #32]
    9c14:	str	x1, [x0, #8]
    9c18:	ldr	x0, [sp, #48]
    9c1c:	ldr	x1, [sp, #24]
    9c20:	str	x1, [x0, #16]
    9c24:	mov	w0, #0x0                   	// #0
    9c28:	ldp	x29, x30, [sp], #64
    9c2c:	ret
	...

0000000000009c40 <grub_disk_dev_register>:
    9c40:	sub	sp, sp, #0x10
    9c44:	str	x0, [sp, #8]
    9c48:	adrp	x0, 0 <_start>
    9c4c:	add	x0, x0, #0x0
    9c50:	ldr	x0, [x0]
    9c54:	ldr	x1, [x0]
    9c58:	ldr	x0, [sp, #8]
    9c5c:	str	x1, [x0, #56]
    9c60:	adrp	x0, 0 <_start>
    9c64:	add	x0, x0, #0x0
    9c68:	ldr	x0, [x0]
    9c6c:	ldr	x1, [sp, #8]
    9c70:	str	x1, [x0]
    9c74:	nop
    9c78:	add	sp, sp, #0x10
    9c7c:	ret
	...

0000000000009c88 <grub_disk_dev_unregister>:
    9c88:	sub	sp, sp, #0x20
    9c8c:	str	x0, [sp, #8]
    9c90:	adrp	x0, 0 <_start>
    9c94:	add	x0, x0, #0x0
    9c98:	ldr	x0, [x0]
    9c9c:	str	x0, [sp, #24]
    9ca0:	ldr	x0, [sp, #24]
    9ca4:	ldr	x0, [x0]
    9ca8:	str	x0, [sp, #16]
    9cac:	b	9cec <grub_disk_dev_unregister+0x64>
    9cb0:	ldr	x1, [sp, #16]
    9cb4:	ldr	x0, [sp, #8]
    9cb8:	cmp	x1, x0
    9cbc:	b.ne	9cd4 <grub_disk_dev_unregister+0x4c>  // b.any
    9cc0:	ldr	x0, [sp, #16]
    9cc4:	ldr	x1, [x0, #56]
    9cc8:	ldr	x0, [sp, #24]
    9ccc:	str	x1, [x0]
    9cd0:	b	9cfc <grub_disk_dev_unregister+0x74>
    9cd4:	ldr	x0, [sp, #16]
    9cd8:	add	x0, x0, #0x38
    9cdc:	str	x0, [sp, #24]
    9ce0:	ldr	x0, [sp, #16]
    9ce4:	ldr	x0, [x0, #56]
    9ce8:	str	x0, [sp, #16]
    9cec:	ldr	x0, [sp, #16]
    9cf0:	cmp	x0, #0x0
    9cf4:	b.ne	9cb0 <grub_disk_dev_unregister+0x28>  // b.any
    9cf8:	nop
    9cfc:	nop
    9d00:	add	sp, sp, #0x20
    9d04:	ret
	...

0000000000009d10 <find_part_sep>:
    9d10:	sub	sp, sp, #0x20
    9d14:	str	x0, [sp, #8]
    9d18:	ldr	x0, [sp, #8]
    9d1c:	str	x0, [sp, #24]
    9d20:	b	9d68 <find_part_sep+0x58>
    9d24:	ldrb	w0, [sp, #23]
    9d28:	cmp	w0, #0x5c
    9d2c:	b.ne	9d50 <find_part_sep+0x40>  // b.any
    9d30:	ldr	x0, [sp, #24]
    9d34:	ldrb	w0, [x0]
    9d38:	cmp	w0, #0x2c
    9d3c:	b.ne	9d50 <find_part_sep+0x40>  // b.any
    9d40:	ldr	x0, [sp, #24]
    9d44:	add	x0, x0, #0x1
    9d48:	str	x0, [sp, #24]
    9d4c:	b	9d68 <find_part_sep+0x58>
    9d50:	ldrb	w0, [sp, #23]
    9d54:	cmp	w0, #0x2c
    9d58:	b.ne	9d68 <find_part_sep+0x58>  // b.any
    9d5c:	ldr	x0, [sp, #24]
    9d60:	sub	x0, x0, #0x1
    9d64:	b	9d8c <find_part_sep+0x7c>
    9d68:	ldr	x0, [sp, #24]
    9d6c:	add	x1, x0, #0x1
    9d70:	str	x1, [sp, #24]
    9d74:	ldrb	w0, [x0]
    9d78:	strb	w0, [sp, #23]
    9d7c:	ldrb	w0, [sp, #23]
    9d80:	cmp	w0, #0x0
    9d84:	b.ne	9d24 <find_part_sep+0x14>  // b.any
    9d88:	mov	x0, #0x0                   	// #0
    9d8c:	add	sp, sp, #0x20
    9d90:	ret

0000000000009d94 <grub_disk_open>:
    9d94:	stp	x29, x30, [sp, #-80]!
    9d98:	mov	x29, sp
    9d9c:	str	x0, [sp, #24]
    9da0:	ldr	x0, [sp, #24]
    9da4:	str	x0, [sp, #64]
    9da8:	ldr	x4, [sp, #24]
    9dac:	adrp	x0, 0 <_start>
    9db0:	add	x0, x0, #0x0
    9db4:	ldr	x3, [x0]
    9db8:	adrp	x0, 0 <_start>
    9dbc:	add	x0, x0, #0x0
    9dc0:	ldr	x2, [x0]
    9dc4:	mov	w1, #0xc4                  	// #196
    9dc8:	adrp	x0, 0 <_start>
    9dcc:	add	x0, x0, #0x0
    9dd0:	ldr	x0, [x0]
    9dd4:	bl	f328 <grub_real_dprintf>
    9dd8:	mov	x0, #0x48                  	// #72
    9ddc:	bl	8368 <grub_zalloc>
    9de0:	str	x0, [sp, #56]
    9de4:	ldr	x0, [sp, #56]
    9de8:	cmp	x0, #0x0
    9dec:	b.ne	9df8 <grub_disk_open+0x64>  // b.any
    9df0:	mov	x0, #0x0                   	// #0
    9df4:	b	a0e0 <grub_disk_open+0x34c>
    9df8:	ldr	x0, [sp, #56]
    9dfc:	mov	w1, #0x9                   	// #9
    9e00:	str	w1, [x0, #24]
    9e04:	ldr	x0, [sp, #56]
    9e08:	mov	w1, #0x20                  	// #32
    9e0c:	str	w1, [x0, #28]
    9e10:	ldr	x0, [sp, #24]
    9e14:	bl	9d10 <find_part_sep>
    9e18:	str	x0, [sp, #48]
    9e1c:	ldr	x0, [sp, #48]
    9e20:	cmp	x0, #0x0
    9e24:	b.eq	9e8c <grub_disk_open+0xf8>  // b.none
    9e28:	ldr	x1, [sp, #48]
    9e2c:	ldr	x0, [sp, #24]
    9e30:	sub	x0, x1, x0
    9e34:	str	x0, [sp, #40]
    9e38:	ldr	x0, [sp, #40]
    9e3c:	add	x0, x0, #0x1
    9e40:	bl	8348 <grub_malloc>
    9e44:	str	x0, [sp, #64]
    9e48:	ldr	x0, [sp, #64]
    9e4c:	cmp	x0, #0x0
    9e50:	b.eq	a044 <grub_disk_open+0x2b0>  // b.none
    9e54:	ldr	x2, [sp, #40]
    9e58:	ldr	x1, [sp, #24]
    9e5c:	ldr	x0, [sp, #64]
    9e60:	bl	9668 <grub_memcpy>
    9e64:	ldr	x1, [sp, #64]
    9e68:	ldr	x0, [sp, #40]
    9e6c:	add	x0, x1, x0
    9e70:	strb	wzr, [x0]
    9e74:	ldr	x0, [sp, #64]
    9e78:	bl	fc40 <grub_strdup>
    9e7c:	mov	x1, x0
    9e80:	ldr	x0, [sp, #56]
    9e84:	str	x1, [x0]
    9e88:	b	9ea0 <grub_disk_open+0x10c>
    9e8c:	ldr	x0, [sp, #24]
    9e90:	bl	fc40 <grub_strdup>
    9e94:	mov	x1, x0
    9e98:	ldr	x0, [sp, #56]
    9e9c:	str	x1, [x0]
    9ea0:	ldr	x0, [sp, #56]
    9ea4:	ldr	x0, [x0]
    9ea8:	cmp	x0, #0x0
    9eac:	b.eq	a04c <grub_disk_open+0x2b8>  // b.none
    9eb0:	adrp	x0, 0 <_start>
    9eb4:	add	x0, x0, #0x0
    9eb8:	ldr	x0, [x0]
    9ebc:	ldr	x0, [x0]
    9ec0:	str	x0, [sp, #72]
    9ec4:	b	9f18 <grub_disk_open+0x184>
    9ec8:	ldr	x0, [sp, #72]
    9ecc:	ldr	x2, [x0, #24]
    9ed0:	ldr	x1, [sp, #56]
    9ed4:	ldr	x0, [sp, #64]
    9ed8:	blr	x2
    9edc:	cmp	w0, #0x0
    9ee0:	b.eq	9f28 <grub_disk_open+0x194>  // b.none
    9ee4:	adrp	x0, 0 <_start>
    9ee8:	add	x0, x0, #0x0
    9eec:	ldr	x0, [x0]
    9ef0:	ldr	w0, [x0]
    9ef4:	cmp	w0, #0xc
    9ef8:	b.ne	a054 <grub_disk_open+0x2c0>  // b.any
    9efc:	adrp	x0, 0 <_start>
    9f00:	add	x0, x0, #0x0
    9f04:	ldr	x0, [x0]
    9f08:	str	wzr, [x0]
    9f0c:	ldr	x0, [sp, #72]
    9f10:	ldr	x0, [x0, #56]
    9f14:	str	x0, [sp, #72]
    9f18:	ldr	x0, [sp, #72]
    9f1c:	cmp	x0, #0x0
    9f20:	b.ne	9ec8 <grub_disk_open+0x134>  // b.any
    9f24:	b	9f2c <grub_disk_open+0x198>
    9f28:	nop
    9f2c:	ldr	x0, [sp, #72]
    9f30:	cmp	x0, #0x0
    9f34:	b.ne	9f54 <grub_disk_open+0x1c0>  // b.any
    9f38:	ldr	x2, [sp, #24]
    9f3c:	adrp	x0, 0 <_start>
    9f40:	add	x0, x0, #0x0
    9f44:	ldr	x1, [x0]
    9f48:	mov	w0, #0xc                   	// #12
    9f4c:	bl	ce54 <grub_error>
    9f50:	b	a058 <grub_disk_open+0x2c4>
    9f54:	ldr	x0, [sp, #56]
    9f58:	ldr	w0, [x0, #24]
    9f5c:	cmp	w0, #0xf
    9f60:	b.hi	9f74 <grub_disk_open+0x1e0>  // b.pmore
    9f64:	ldr	x0, [sp, #56]
    9f68:	ldr	w0, [x0, #24]
    9f6c:	cmp	w0, #0x8
    9f70:	b.hi	9fa0 <grub_disk_open+0x20c>  // b.pmore
    9f74:	ldr	x0, [sp, #56]
    9f78:	ldr	w0, [x0, #24]
    9f7c:	mov	w1, #0x1                   	// #1
    9f80:	lsl	w0, w1, w0
    9f84:	mov	w2, w0
    9f88:	adrp	x0, 0 <_start>
    9f8c:	add	x0, x0, #0x0
    9f90:	ldr	x1, [x0]
    9f94:	mov	w0, #0x18                  	// #24
    9f98:	bl	ce54 <grub_error>
    9f9c:	b	a058 <grub_disk_open+0x2c4>
    9fa0:	ldr	x0, [sp, #56]
    9fa4:	ldr	x1, [sp, #72]
    9fa8:	str	x1, [x0, #8]
    9fac:	ldr	x0, [sp, #48]
    9fb0:	cmp	x0, #0x0
    9fb4:	b.eq	a000 <grub_disk_open+0x26c>  // b.none
    9fb8:	ldr	x0, [sp, #48]
    9fbc:	add	x0, x0, #0x1
    9fc0:	mov	x1, x0
    9fc4:	ldr	x0, [sp, #56]
    9fc8:	bl	12318 <grub_partition_probe>
    9fcc:	mov	x1, x0
    9fd0:	ldr	x0, [sp, #56]
    9fd4:	str	x1, [x0, #40]
    9fd8:	ldr	x0, [sp, #56]
    9fdc:	ldr	x0, [x0, #40]
    9fe0:	cmp	x0, #0x0
    9fe4:	b.ne	a000 <grub_disk_open+0x26c>  // b.any
    9fe8:	adrp	x0, 0 <_start>
    9fec:	add	x0, x0, #0x0
    9ff0:	ldr	x1, [x0]
    9ff4:	mov	w0, #0xc                   	// #12
    9ff8:	bl	ce54 <grub_error>
    9ffc:	b	a058 <grub_disk_open+0x2c4>
    a000:	bl	8708 <grub_get_time_ms>
    a004:	str	x0, [sp, #32]
    a008:	adrp	x0, 0 <_start>
    a00c:	add	x0, x0, #0x0
    a010:	ldr	x0, [x0]
    a014:	ldr	x0, [x0]
    a018:	add	x0, x0, #0x7d0
    a01c:	ldr	x1, [sp, #32]
    a020:	cmp	x1, x0
    a024:	b.ls	a02c <grub_disk_open+0x298>  // b.plast
    a028:	bl	991c <grub_disk_cache_invalidate_all>
    a02c:	adrp	x0, 0 <_start>
    a030:	add	x0, x0, #0x0
    a034:	ldr	x0, [x0]
    a038:	ldr	x1, [sp, #32]
    a03c:	str	x1, [x0]
    a040:	b	a058 <grub_disk_open+0x2c4>
    a044:	nop
    a048:	b	a058 <grub_disk_open+0x2c4>
    a04c:	nop
    a050:	b	a058 <grub_disk_open+0x2c4>
    a054:	nop
    a058:	ldr	x0, [sp, #64]
    a05c:	cmp	x0, #0x0
    a060:	b.eq	a07c <grub_disk_open+0x2e8>  // b.none
    a064:	ldr	x1, [sp, #64]
    a068:	ldr	x0, [sp, #24]
    a06c:	cmp	x1, x0
    a070:	b.eq	a07c <grub_disk_open+0x2e8>  // b.none
    a074:	ldr	x0, [sp, #64]
    a078:	bl	83ac <grub_free>
    a07c:	adrp	x0, 0 <_start>
    a080:	add	x0, x0, #0x0
    a084:	ldr	x0, [x0]
    a088:	ldr	w0, [x0]
    a08c:	cmp	w0, #0x0
    a090:	b.eq	a0dc <grub_disk_open+0x348>  // b.none
    a094:	bl	cf38 <grub_error_push>
    a098:	ldr	x4, [sp, #24]
    a09c:	adrp	x0, 0 <_start>
    a0a0:	add	x0, x0, #0x0
    a0a4:	ldr	x3, [x0]
    a0a8:	adrp	x0, 0 <_start>
    a0ac:	add	x0, x0, #0x0
    a0b0:	ldr	x2, [x0]
    a0b4:	mov	w1, #0x119                 	// #281
    a0b8:	adrp	x0, 0 <_start>
    a0bc:	add	x0, x0, #0x0
    a0c0:	ldr	x0, [x0]
    a0c4:	bl	f328 <grub_real_dprintf>
    a0c8:	bl	d070 <grub_error_pop>
    a0cc:	ldr	x0, [sp, #56]
    a0d0:	bl	a138 <grub_disk_close>
    a0d4:	mov	x0, #0x0                   	// #0
    a0d8:	b	a0e0 <grub_disk_open+0x34c>
    a0dc:	ldr	x0, [sp, #56]
    a0e0:	ldp	x29, x30, [sp], #80
    a0e4:	ret
	...

000000000000a138 <grub_disk_close>:
    a138:	stp	x29, x30, [sp, #-48]!
    a13c:	mov	x29, sp
    a140:	str	x0, [sp, #24]
    a144:	ldr	x0, [sp, #24]
    a148:	ldr	x0, [x0]
    a14c:	mov	x4, x0
    a150:	adrp	x0, 0 <_start>
    a154:	add	x0, x0, #0x0
    a158:	ldr	x3, [x0]
    a15c:	adrp	x0, 0 <_start>
    a160:	add	x0, x0, #0x0
    a164:	ldr	x2, [x0]
    a168:	mov	w1, #0x127                 	// #295
    a16c:	adrp	x0, 0 <_start>
    a170:	add	x0, x0, #0x0
    a174:	ldr	x0, [x0]
    a178:	bl	f328 <grub_real_dprintf>
    a17c:	ldr	x0, [sp, #24]
    a180:	ldr	x0, [x0, #8]
    a184:	cmp	x0, #0x0
    a188:	b.eq	a1b4 <grub_disk_close+0x7c>  // b.none
    a18c:	ldr	x0, [sp, #24]
    a190:	ldr	x0, [x0, #8]
    a194:	ldr	x0, [x0, #32]
    a198:	cmp	x0, #0x0
    a19c:	b.eq	a1b4 <grub_disk_close+0x7c>  // b.none
    a1a0:	ldr	x0, [sp, #24]
    a1a4:	ldr	x0, [x0, #8]
    a1a8:	ldr	x1, [x0, #32]
    a1ac:	ldr	x0, [sp, #24]
    a1b0:	blr	x1
    a1b4:	bl	8708 <grub_get_time_ms>
    a1b8:	mov	x1, x0
    a1bc:	adrp	x0, 0 <_start>
    a1c0:	add	x0, x0, #0x0
    a1c4:	ldr	x0, [x0]
    a1c8:	str	x1, [x0]
    a1cc:	b	a1f8 <grub_disk_close+0xc0>
    a1d0:	ldr	x0, [sp, #24]
    a1d4:	ldr	x0, [x0, #40]
    a1d8:	ldr	x0, [x0, #40]
    a1dc:	str	x0, [sp, #40]
    a1e0:	ldr	x0, [sp, #24]
    a1e4:	ldr	x0, [x0, #40]
    a1e8:	bl	83ac <grub_free>
    a1ec:	ldr	x0, [sp, #24]
    a1f0:	ldr	x1, [sp, #40]
    a1f4:	str	x1, [x0, #40]
    a1f8:	ldr	x0, [sp, #24]
    a1fc:	ldr	x0, [x0, #40]
    a200:	cmp	x0, #0x0
    a204:	b.ne	a1d0 <grub_disk_close+0x98>  // b.any
    a208:	ldr	x0, [sp, #24]
    a20c:	ldr	x0, [x0]
    a210:	bl	83ac <grub_free>
    a214:	ldr	x0, [sp, #24]
    a218:	bl	83ac <grub_free>
    a21c:	nop
    a220:	ldp	x29, x30, [sp], #48
    a224:	ret
	...

000000000000a248 <grub_disk_read_small_real>:
    a248:	stp	x29, x30, [sp, #-128]!
    a24c:	mov	x29, sp
    a250:	str	x19, [sp, #16]
    a254:	str	x0, [sp, #72]
    a258:	str	x1, [sp, #64]
    a25c:	str	x2, [sp, #56]
    a260:	str	x3, [sp, #48]
    a264:	str	x4, [sp, #40]
    a268:	ldr	x0, [sp, #72]
    a26c:	ldr	x0, [x0, #8]
    a270:	ldr	w0, [x0, #8]
    a274:	mov	w3, w0
    a278:	ldr	x0, [sp, #72]
    a27c:	ldr	x0, [x0, #32]
    a280:	ldr	x2, [sp, #64]
    a284:	mov	x1, x0
    a288:	mov	x0, x3
    a28c:	bl	99c0 <grub_disk_cache_fetch>
    a290:	str	x0, [sp, #120]
    a294:	ldr	x0, [sp, #120]
    a298:	cmp	x0, #0x0
    a29c:	b.eq	a2ec <grub_disk_read_small_real+0xa4>  // b.none
    a2a0:	ldr	x1, [sp, #120]
    a2a4:	ldr	x0, [sp, #56]
    a2a8:	add	x0, x1, x0
    a2ac:	ldr	x2, [sp, #48]
    a2b0:	mov	x1, x0
    a2b4:	ldr	x0, [sp, #40]
    a2b8:	bl	9668 <grub_memcpy>
    a2bc:	ldr	x0, [sp, #72]
    a2c0:	ldr	x0, [x0, #8]
    a2c4:	ldr	w0, [x0, #8]
    a2c8:	mov	w3, w0
    a2cc:	ldr	x0, [sp, #72]
    a2d0:	ldr	x0, [x0, #32]
    a2d4:	ldr	x2, [sp, #64]
    a2d8:	mov	x1, x0
    a2dc:	mov	x0, x3
    a2e0:	bl	9a80 <grub_disk_cache_unlock>
    a2e4:	mov	w0, #0x0                   	// #0
    a2e8:	b	a5a8 <grub_disk_read_small_real+0x360>
    a2ec:	mov	x0, #0x8000                	// #32768
    a2f0:	bl	8348 <grub_malloc>
    a2f4:	str	x0, [sp, #112]
    a2f8:	ldr	x0, [sp, #112]
    a2fc:	cmp	x0, #0x0
    a300:	b.ne	a318 <grub_disk_read_small_real+0xd0>  // b.any
    a304:	adrp	x0, 0 <_start>
    a308:	add	x0, x0, #0x0
    a30c:	ldr	x0, [x0]
    a310:	ldr	w0, [x0]
    a314:	b	a5a8 <grub_disk_read_small_real+0x360>
    a318:	ldr	x0, [sp, #72]
    a31c:	ldr	x0, [x0, #16]
    a320:	cmn	x0, #0x1
    a324:	b.eq	a350 <grub_disk_read_small_real+0x108>  // b.none
    a328:	ldr	x0, [sp, #64]
    a32c:	add	x1, x0, #0x40
    a330:	ldr	x0, [sp, #72]
    a334:	ldr	x2, [x0, #16]
    a338:	ldr	x0, [sp, #72]
    a33c:	ldr	w0, [x0, #24]
    a340:	sub	w0, w0, #0x9
    a344:	lsl	x0, x2, x0
    a348:	cmp	x1, x0
    a34c:	b.cs	a404 <grub_disk_read_small_real+0x1bc>  // b.hs, b.nlast
    a350:	ldr	x0, [sp, #72]
    a354:	ldr	x0, [x0, #8]
    a358:	ldr	x19, [x0, #40]
    a35c:	ldr	x1, [sp, #64]
    a360:	ldr	x0, [sp, #72]
    a364:	bl	9868 <transform_sector>
    a368:	mov	x4, x0
    a36c:	ldr	x0, [sp, #72]
    a370:	ldr	w0, [x0, #24]
    a374:	mov	w1, #0xf                   	// #15
    a378:	sub	w0, w1, w0
    a37c:	mov	w1, #0x1                   	// #1
    a380:	lsl	w0, w1, w0
    a384:	mov	w0, w0
    a388:	ldr	x3, [sp, #112]
    a38c:	mov	x2, x0
    a390:	mov	x1, x4
    a394:	ldr	x0, [sp, #72]
    a398:	blr	x19
    a39c:	str	w0, [sp, #108]
    a3a0:	ldr	w0, [sp, #108]
    a3a4:	cmp	w0, #0x0
    a3a8:	b.ne	a404 <grub_disk_read_small_real+0x1bc>  // b.any
    a3ac:	ldr	x1, [sp, #112]
    a3b0:	ldr	x0, [sp, #56]
    a3b4:	add	x0, x1, x0
    a3b8:	ldr	x2, [sp, #48]
    a3bc:	mov	x1, x0
    a3c0:	ldr	x0, [sp, #40]
    a3c4:	bl	9668 <grub_memcpy>
    a3c8:	ldr	x0, [sp, #72]
    a3cc:	ldr	x0, [x0, #8]
    a3d0:	ldr	w0, [x0, #8]
    a3d4:	mov	w4, w0
    a3d8:	ldr	x0, [sp, #72]
    a3dc:	ldr	x0, [x0, #32]
    a3e0:	ldr	x3, [sp, #112]
    a3e4:	ldr	x2, [sp, #64]
    a3e8:	mov	x1, x0
    a3ec:	mov	x0, x4
    a3f0:	bl	9b30 <grub_disk_cache_store>
    a3f4:	ldr	x0, [sp, #112]
    a3f8:	bl	83ac <grub_free>
    a3fc:	mov	w0, #0x0                   	// #0
    a400:	b	a5a8 <grub_disk_read_small_real+0x360>
    a404:	ldr	x0, [sp, #112]
    a408:	bl	83ac <grub_free>
    a40c:	adrp	x0, 0 <_start>
    a410:	add	x0, x0, #0x0
    a414:	ldr	x0, [x0]
    a418:	str	wzr, [x0]
    a41c:	ldr	x0, [sp, #56]
    a420:	lsr	x0, x0, #9
    a424:	ldr	x1, [sp, #64]
    a428:	add	x0, x1, x0
    a42c:	str	x0, [sp, #64]
    a430:	ldr	x0, [sp, #56]
    a434:	and	x0, x0, #0x1ff
    a438:	str	x0, [sp, #56]
    a43c:	ldr	x0, [sp, #72]
    a440:	ldr	w0, [x0, #24]
    a444:	sub	w0, w0, #0x9
    a448:	mov	x1, #0x1                   	// #1
    a44c:	lsl	x0, x1, x0
    a450:	neg	x0, x0
    a454:	ldr	x1, [sp, #64]
    a458:	and	x0, x1, x0
    a45c:	str	x0, [sp, #96]
    a460:	ldr	x1, [sp, #64]
    a464:	ldr	x0, [sp, #96]
    a468:	sub	x0, x1, x0
    a46c:	lsl	x0, x0, #9
    a470:	ldr	x1, [sp, #56]
    a474:	add	x0, x1, x0
    a478:	str	x0, [sp, #56]
    a47c:	ldr	x1, [sp, #48]
    a480:	ldr	x0, [sp, #56]
    a484:	add	x1, x1, x0
    a488:	ldr	x0, [sp, #72]
    a48c:	ldr	w0, [x0, #24]
    a490:	mov	x2, #0x1                   	// #1
    a494:	lsl	x0, x2, x0
    a498:	add	x0, x1, x0
    a49c:	sub	x1, x0, #0x1
    a4a0:	ldr	x0, [sp, #72]
    a4a4:	ldr	w0, [x0, #24]
    a4a8:	lsr	x0, x1, x0
    a4ac:	str	w0, [sp, #92]
    a4b0:	ldr	x0, [sp, #72]
    a4b4:	ldr	w0, [x0, #24]
    a4b8:	ldr	w1, [sp, #92]
    a4bc:	lsl	w0, w1, w0
    a4c0:	mov	w0, w0
    a4c4:	bl	8348 <grub_malloc>
    a4c8:	str	x0, [sp, #112]
    a4cc:	ldr	x0, [sp, #112]
    a4d0:	cmp	x0, #0x0
    a4d4:	b.ne	a4ec <grub_disk_read_small_real+0x2a4>  // b.any
    a4d8:	adrp	x0, 0 <_start>
    a4dc:	add	x0, x0, #0x0
    a4e0:	ldr	x0, [x0]
    a4e4:	ldr	w0, [x0]
    a4e8:	b	a5a8 <grub_disk_read_small_real+0x360>
    a4ec:	ldr	x0, [sp, #72]
    a4f0:	ldr	x0, [x0, #8]
    a4f4:	ldr	x19, [x0, #40]
    a4f8:	ldr	x1, [sp, #96]
    a4fc:	ldr	x0, [sp, #72]
    a500:	bl	9868 <transform_sector>
    a504:	mov	x1, x0
    a508:	ldr	w0, [sp, #92]
    a50c:	ldr	x3, [sp, #112]
    a510:	mov	x2, x0
    a514:	ldr	x0, [sp, #72]
    a518:	blr	x19
    a51c:	cmp	w0, #0x0
    a520:	b.eq	a580 <grub_disk_read_small_real+0x338>  // b.none
    a524:	bl	cf38 <grub_error_push>
    a528:	ldr	x0, [sp, #72]
    a52c:	ldr	x0, [x0]
    a530:	mov	x4, x0
    a534:	adrp	x0, 0 <_start>
    a538:	add	x0, x0, #0x0
    a53c:	ldr	x3, [x0]
    a540:	adrp	x0, 0 <_start>
    a544:	add	x0, x0, #0x0
    a548:	ldr	x2, [x0]
    a54c:	mov	w1, #0x180                 	// #384
    a550:	adrp	x0, 0 <_start>
    a554:	add	x0, x0, #0x0
    a558:	ldr	x0, [x0]
    a55c:	bl	f328 <grub_real_dprintf>
    a560:	bl	d070 <grub_error_pop>
    a564:	ldr	x0, [sp, #112]
    a568:	bl	83ac <grub_free>
    a56c:	adrp	x0, 0 <_start>
    a570:	add	x0, x0, #0x0
    a574:	ldr	x0, [x0]
    a578:	ldr	w0, [x0]
    a57c:	b	a5a8 <grub_disk_read_small_real+0x360>
    a580:	ldr	x1, [sp, #112]
    a584:	ldr	x0, [sp, #56]
    a588:	add	x0, x1, x0
    a58c:	ldr	x2, [sp, #48]
    a590:	mov	x1, x0
    a594:	ldr	x0, [sp, #40]
    a598:	bl	9668 <grub_memcpy>
    a59c:	ldr	x0, [sp, #112]
    a5a0:	bl	83ac <grub_free>
    a5a4:	mov	w0, #0x0                   	// #0
    a5a8:	ldr	x19, [sp, #16]
    a5ac:	ldp	x29, x30, [sp], #128
    a5b0:	ret
    a5b4:	nop
	...

000000000000a5d8 <grub_disk_read_small>:
    a5d8:	stp	x29, x30, [sp, #-80]!
    a5dc:	mov	x29, sp
    a5e0:	str	x0, [sp, #56]
    a5e4:	str	x1, [sp, #48]
    a5e8:	str	x2, [sp, #40]
    a5ec:	str	x3, [sp, #32]
    a5f0:	str	x4, [sp, #24]
    a5f4:	ldr	x4, [sp, #24]
    a5f8:	ldr	x3, [sp, #32]
    a5fc:	ldr	x2, [sp, #40]
    a600:	ldr	x1, [sp, #48]
    a604:	ldr	x0, [sp, #56]
    a608:	bl	a248 <grub_disk_read_small_real>
    a60c:	str	w0, [sp, #76]
    a610:	ldr	w0, [sp, #76]
    a614:	cmp	w0, #0x0
    a618:	b.eq	a624 <grub_disk_read_small+0x4c>  // b.none
    a61c:	ldr	w0, [sp, #76]
    a620:	b	a674 <grub_disk_read_small+0x9c>
    a624:	ldr	x0, [sp, #56]
    a628:	ldr	x0, [x0, #48]
    a62c:	cmp	x0, #0x0
    a630:	b.eq	a670 <grub_disk_read_small+0x98>  // b.none
    a634:	ldr	x0, [sp, #56]
    a638:	ldr	x4, [x0, #48]
    a63c:	ldr	x0, [sp, #40]
    a640:	lsr	x1, x0, #9
    a644:	ldr	x0, [sp, #48]
    a648:	add	x5, x1, x0
    a64c:	ldr	x0, [sp, #40]
    a650:	and	w1, w0, #0x1ff
    a654:	ldr	x0, [sp, #32]
    a658:	mov	w2, w0
    a65c:	ldr	x0, [sp, #56]
    a660:	ldr	x0, [x0, #56]
    a664:	mov	x3, x0
    a668:	mov	x0, x5
    a66c:	blr	x4
    a670:	mov	w0, #0x0                   	// #0
    a674:	ldp	x29, x30, [sp], #80
    a678:	ret

000000000000a67c <grub_disk_read>:
    a67c:	stp	x29, x30, [sp, #-144]!
    a680:	mov	x29, sp
    a684:	str	x19, [sp, #16]
    a688:	str	x0, [sp, #72]
    a68c:	str	x1, [sp, #64]
    a690:	str	x2, [sp, #56]
    a694:	str	x3, [sp, #48]
    a698:	str	x4, [sp, #40]
    a69c:	add	x1, sp, #0x38
    a6a0:	add	x0, sp, #0x40
    a6a4:	ldr	x3, [sp, #48]
    a6a8:	mov	x2, x1
    a6ac:	mov	x1, x0
    a6b0:	ldr	x0, [sp, #72]
    a6b4:	bl	96ac <grub_disk_adjust_range>
    a6b8:	cmp	w0, #0x0
    a6bc:	b.eq	a71c <grub_disk_read+0xa0>  // b.none
    a6c0:	bl	cf38 <grub_error_push>
    a6c4:	ldr	x1, [sp, #64]
    a6c8:	adrp	x0, 0 <_start>
    a6cc:	add	x0, x0, #0x0
    a6d0:	ldr	x5, [x0]
    a6d4:	mov	x4, x1
    a6d8:	adrp	x0, 0 <_start>
    a6dc:	add	x0, x0, #0x0
    a6e0:	ldr	x3, [x0]
    a6e4:	adrp	x0, 0 <_start>
    a6e8:	add	x0, x0, #0x0
    a6ec:	ldr	x2, [x0]
    a6f0:	mov	w1, #0x1a4                 	// #420
    a6f4:	adrp	x0, 0 <_start>
    a6f8:	add	x0, x0, #0x0
    a6fc:	ldr	x0, [x0]
    a700:	bl	f328 <grub_real_dprintf>
    a704:	bl	d070 <grub_error_pop>
    a708:	adrp	x0, 0 <_start>
    a70c:	add	x0, x0, #0x0
    a710:	ldr	x0, [x0]
    a714:	ldr	w0, [x0]
    a718:	b	ab2c <grub_disk_read+0x4b0>
    a71c:	ldr	x0, [sp, #56]
    a720:	cmp	x0, #0x0
    a724:	b.ne	a738 <grub_disk_read+0xbc>  // b.any
    a728:	ldr	x0, [sp, #64]
    a72c:	and	x0, x0, #0x3f
    a730:	cmp	x0, #0x0
    a734:	b.eq	aacc <grub_disk_read+0x450>  // b.none
    a738:	ldr	x0, [sp, #64]
    a73c:	and	x0, x0, #0xffffffffffffffc0
    a740:	str	x0, [sp, #104]
    a744:	ldr	x1, [sp, #64]
    a748:	ldr	x0, [sp, #104]
    a74c:	sub	x0, x1, x0
    a750:	lsl	x0, x0, #9
    a754:	str	x0, [sp, #96]
    a758:	ldr	x1, [sp, #56]
    a75c:	ldr	x0, [sp, #96]
    a760:	add	x0, x1, x0
    a764:	mov	x1, #0x8000                	// #32768
    a768:	sub	x0, x1, x0
    a76c:	str	x0, [sp, #136]
    a770:	ldr	x1, [sp, #136]
    a774:	ldr	x0, [sp, #48]
    a778:	cmp	x1, x0
    a77c:	b.ls	a788 <grub_disk_read+0x10c>  // b.plast
    a780:	ldr	x0, [sp, #48]
    a784:	str	x0, [sp, #136]
    a788:	ldr	x1, [sp, #56]
    a78c:	ldr	x0, [sp, #96]
    a790:	add	x0, x1, x0
    a794:	ldr	x4, [sp, #40]
    a798:	ldr	x3, [sp, #136]
    a79c:	mov	x2, x0
    a7a0:	ldr	x1, [sp, #104]
    a7a4:	ldr	x0, [sp, #72]
    a7a8:	bl	a5d8 <grub_disk_read_small>
    a7ac:	str	w0, [sp, #92]
    a7b0:	ldr	w0, [sp, #92]
    a7b4:	cmp	w0, #0x0
    a7b8:	b.eq	a7c4 <grub_disk_read+0x148>  // b.none
    a7bc:	ldr	w0, [sp, #92]
    a7c0:	b	ab2c <grub_disk_read+0x4b0>
    a7c4:	ldr	x1, [sp, #40]
    a7c8:	ldr	x0, [sp, #136]
    a7cc:	add	x0, x1, x0
    a7d0:	str	x0, [sp, #40]
    a7d4:	ldr	x1, [sp, #48]
    a7d8:	ldr	x0, [sp, #136]
    a7dc:	sub	x0, x1, x0
    a7e0:	str	x0, [sp, #48]
    a7e4:	ldr	x1, [sp, #56]
    a7e8:	ldr	x0, [sp, #136]
    a7ec:	add	x0, x1, x0
    a7f0:	str	x0, [sp, #56]
    a7f4:	ldr	x0, [sp, #56]
    a7f8:	lsr	x1, x0, #9
    a7fc:	ldr	x0, [sp, #64]
    a800:	add	x0, x1, x0
    a804:	str	x0, [sp, #64]
    a808:	ldr	x0, [sp, #56]
    a80c:	and	x0, x0, #0x1ff
    a810:	str	x0, [sp, #56]
    a814:	b	aacc <grub_disk_read+0x450>
    a818:	str	xzr, [sp, #128]
    a81c:	str	xzr, [sp, #120]
    a820:	b	a878 <grub_disk_read+0x1fc>
    a824:	ldr	x0, [sp, #72]
    a828:	ldr	x0, [x0, #8]
    a82c:	ldr	w0, [x0, #8]
    a830:	mov	w3, w0
    a834:	ldr	x0, [sp, #72]
    a838:	ldr	x4, [x0, #32]
    a83c:	ldr	x0, [sp, #120]
    a840:	lsl	x1, x0, #6
    a844:	ldr	x0, [sp, #64]
    a848:	add	x0, x1, x0
    a84c:	mov	x2, x0
    a850:	mov	x1, x4
    a854:	mov	x0, x3
    a858:	bl	99c0 <grub_disk_cache_fetch>
    a85c:	str	x0, [sp, #128]
    a860:	ldr	x0, [sp, #128]
    a864:	cmp	x0, #0x0
    a868:	b.ne	a8a8 <grub_disk_read+0x22c>  // b.any
    a86c:	ldr	x0, [sp, #120]
    a870:	add	x0, x0, #0x1
    a874:	str	x0, [sp, #120]
    a878:	ldr	x0, [sp, #48]
    a87c:	lsr	x0, x0, #15
    a880:	ldr	x1, [sp, #120]
    a884:	cmp	x1, x0
    a888:	b.cs	a8ac <grub_disk_read+0x230>  // b.hs, b.nlast
    a88c:	ldr	x0, [sp, #72]
    a890:	ldr	w0, [x0, #28]
    a894:	mov	w0, w0
    a898:	ldr	x1, [sp, #120]
    a89c:	cmp	x1, x0
    a8a0:	b.cc	a824 <grub_disk_read+0x1a8>  // b.lo, b.ul, b.last
    a8a4:	b	a8ac <grub_disk_read+0x230>
    a8a8:	nop
    a8ac:	ldr	x0, [sp, #128]
    a8b0:	cmp	x0, #0x0
    a8b4:	b.eq	a90c <grub_disk_read+0x290>  // b.none
    a8b8:	ldr	x0, [sp, #120]
    a8bc:	lsl	x0, x0, #15
    a8c0:	ldr	x1, [sp, #40]
    a8c4:	add	x0, x1, x0
    a8c8:	mov	x2, #0x8000                	// #32768
    a8cc:	ldr	x1, [sp, #128]
    a8d0:	bl	9668 <grub_memcpy>
    a8d4:	ldr	x0, [sp, #72]
    a8d8:	ldr	x0, [x0, #8]
    a8dc:	ldr	w0, [x0, #8]
    a8e0:	mov	w3, w0
    a8e4:	ldr	x0, [sp, #72]
    a8e8:	ldr	x4, [x0, #32]
    a8ec:	ldr	x0, [sp, #120]
    a8f0:	lsl	x1, x0, #6
    a8f4:	ldr	x0, [sp, #64]
    a8f8:	add	x0, x1, x0
    a8fc:	mov	x2, x0
    a900:	mov	x1, x4
    a904:	mov	x0, x3
    a908:	bl	9a80 <grub_disk_cache_unlock>
    a90c:	ldr	x0, [sp, #120]
    a910:	cmp	x0, #0x0
    a914:	b.eq	aa64 <grub_disk_read+0x3e8>  // b.none
    a918:	ldr	x0, [sp, #72]
    a91c:	ldr	x0, [x0, #8]
    a920:	ldr	x19, [x0, #40]
    a924:	ldr	x0, [sp, #64]
    a928:	mov	x1, x0
    a92c:	ldr	x0, [sp, #72]
    a930:	bl	9868 <transform_sector>
    a934:	mov	x4, x0
    a938:	ldr	x0, [sp, #72]
    a93c:	ldr	w0, [x0, #24]
    a940:	mov	w1, #0xf                   	// #15
    a944:	sub	w0, w1, w0
    a948:	ldr	x1, [sp, #120]
    a94c:	lsl	x0, x1, x0
    a950:	ldr	x3, [sp, #40]
    a954:	mov	x2, x0
    a958:	mov	x1, x4
    a95c:	ldr	x0, [sp, #72]
    a960:	blr	x19
    a964:	str	w0, [sp, #84]
    a968:	ldr	w0, [sp, #84]
    a96c:	cmp	w0, #0x0
    a970:	b.eq	a97c <grub_disk_read+0x300>  // b.none
    a974:	ldr	w0, [sp, #84]
    a978:	b	ab2c <grub_disk_read+0x4b0>
    a97c:	str	xzr, [sp, #112]
    a980:	b	a9d8 <grub_disk_read+0x35c>
    a984:	ldr	x0, [sp, #72]
    a988:	ldr	x0, [x0, #8]
    a98c:	ldr	w0, [x0, #8]
    a990:	mov	w4, w0
    a994:	ldr	x0, [sp, #72]
    a998:	ldr	x5, [x0, #32]
    a99c:	ldr	x0, [sp, #112]
    a9a0:	lsl	x1, x0, #6
    a9a4:	ldr	x0, [sp, #64]
    a9a8:	add	x2, x1, x0
    a9ac:	ldr	x0, [sp, #112]
    a9b0:	lsl	x0, x0, #15
    a9b4:	ldr	x1, [sp, #40]
    a9b8:	add	x0, x1, x0
    a9bc:	mov	x3, x0
    a9c0:	mov	x1, x5
    a9c4:	mov	x0, x4
    a9c8:	bl	9b30 <grub_disk_cache_store>
    a9cc:	ldr	x0, [sp, #112]
    a9d0:	add	x0, x0, #0x1
    a9d4:	str	x0, [sp, #112]
    a9d8:	ldr	x1, [sp, #112]
    a9dc:	ldr	x0, [sp, #120]
    a9e0:	cmp	x1, x0
    a9e4:	b.cc	a984 <grub_disk_read+0x308>  // b.lo, b.ul, b.last
    a9e8:	ldr	x0, [sp, #72]
    a9ec:	ldr	x0, [x0, #48]
    a9f0:	cmp	x0, #0x0
    a9f4:	b.eq	aa28 <grub_disk_read+0x3ac>  // b.none
    a9f8:	ldr	x0, [sp, #72]
    a9fc:	ldr	x4, [x0, #48]
    aa00:	ldr	x5, [sp, #64]
    aa04:	ldr	x0, [sp, #120]
    aa08:	lsl	w1, w0, #15
    aa0c:	ldr	x0, [sp, #72]
    aa10:	ldr	x0, [x0, #56]
    aa14:	mov	x3, x0
    aa18:	mov	w2, w1
    aa1c:	mov	w1, #0x0                   	// #0
    aa20:	mov	x0, x5
    aa24:	blr	x4
    aa28:	ldr	x0, [sp, #120]
    aa2c:	lsl	x1, x0, #6
    aa30:	ldr	x0, [sp, #64]
    aa34:	add	x0, x1, x0
    aa38:	str	x0, [sp, #64]
    aa3c:	ldr	x0, [sp, #120]
    aa40:	lsl	x0, x0, #15
    aa44:	ldr	x1, [sp, #48]
    aa48:	sub	x0, x1, x0
    aa4c:	str	x0, [sp, #48]
    aa50:	ldr	x0, [sp, #120]
    aa54:	lsl	x0, x0, #15
    aa58:	ldr	x1, [sp, #40]
    aa5c:	add	x0, x1, x0
    aa60:	str	x0, [sp, #40]
    aa64:	ldr	x0, [sp, #128]
    aa68:	cmp	x0, #0x0
    aa6c:	b.eq	aacc <grub_disk_read+0x450>  // b.none
    aa70:	ldr	x0, [sp, #72]
    aa74:	ldr	x0, [x0, #48]
    aa78:	cmp	x0, #0x0
    aa7c:	b.eq	aaa8 <grub_disk_read+0x42c>  // b.none
    aa80:	ldr	x0, [sp, #72]
    aa84:	ldr	x4, [x0, #48]
    aa88:	ldr	x5, [sp, #64]
    aa8c:	ldr	x0, [sp, #72]
    aa90:	ldr	x0, [x0, #56]
    aa94:	mov	x3, x0
    aa98:	mov	w2, #0x8000                	// #32768
    aa9c:	mov	w1, #0x0                   	// #0
    aaa0:	mov	x0, x5
    aaa4:	blr	x4
    aaa8:	ldr	x0, [sp, #64]
    aaac:	add	x0, x0, #0x40
    aab0:	str	x0, [sp, #64]
    aab4:	ldr	x0, [sp, #40]
    aab8:	add	x0, x0, #0x8, lsl #12
    aabc:	str	x0, [sp, #40]
    aac0:	ldr	x0, [sp, #48]
    aac4:	sub	x0, x0, #0x8, lsl #12
    aac8:	str	x0, [sp, #48]
    aacc:	ldr	x1, [sp, #48]
    aad0:	mov	x0, #0x7fff                	// #32767
    aad4:	cmp	x1, x0
    aad8:	b.hi	a818 <grub_disk_read+0x19c>  // b.pmore
    aadc:	ldr	x0, [sp, #48]
    aae0:	cmp	x0, #0x0
    aae4:	b.eq	ab1c <grub_disk_read+0x4a0>  // b.none
    aae8:	ldr	x0, [sp, #64]
    aaec:	ldr	x4, [sp, #40]
    aaf0:	ldr	x3, [sp, #48]
    aaf4:	mov	x2, #0x0                   	// #0
    aaf8:	mov	x1, x0
    aafc:	ldr	x0, [sp, #72]
    ab00:	bl	a5d8 <grub_disk_read_small>
    ab04:	str	w0, [sp, #88]
    ab08:	ldr	w0, [sp, #88]
    ab0c:	cmp	w0, #0x0
    ab10:	b.eq	ab1c <grub_disk_read+0x4a0>  // b.none
    ab14:	ldr	w0, [sp, #88]
    ab18:	b	ab2c <grub_disk_read+0x4b0>
    ab1c:	adrp	x0, 0 <_start>
    ab20:	add	x0, x0, #0x0
    ab24:	ldr	x0, [x0]
    ab28:	ldr	w0, [x0]
    ab2c:	ldr	x19, [sp, #16]
    ab30:	ldp	x29, x30, [sp], #144
    ab34:	ret
	...

000000000000ab60 <grub_disk_get_size>:
    ab60:	stp	x29, x30, [sp, #-32]!
    ab64:	mov	x29, sp
    ab68:	str	x0, [sp, #24]
    ab6c:	ldr	x0, [sp, #24]
    ab70:	ldr	x0, [x0, #40]
    ab74:	cmp	x0, #0x0
    ab78:	b.eq	ab8c <grub_disk_get_size+0x2c>  // b.none
    ab7c:	ldr	x0, [sp, #24]
    ab80:	ldr	x0, [x0, #40]
    ab84:	bl	9694 <grub_partition_get_len>
    ab88:	b	abbc <grub_disk_get_size+0x5c>
    ab8c:	ldr	x0, [sp, #24]
    ab90:	ldr	x0, [x0, #16]
    ab94:	cmn	x0, #0x1
    ab98:	b.eq	abb8 <grub_disk_get_size+0x58>  // b.none
    ab9c:	ldr	x0, [sp, #24]
    aba0:	ldr	x1, [x0, #16]
    aba4:	ldr	x0, [sp, #24]
    aba8:	ldr	w0, [x0, #24]
    abac:	sub	w0, w0, #0x9
    abb0:	lsl	x0, x1, x0
    abb4:	b	abbc <grub_disk_get_size+0x5c>
    abb8:	mov	x0, #0xffffffffffffffff    	// #-1
    abbc:	ldp	x29, x30, [sp], #32
    abc0:	ret
    abc4:	nop

000000000000abc8 <grub_memcpy>:
    abc8:	stp	x29, x30, [sp, #-48]!
    abcc:	mov	x29, sp
    abd0:	str	x0, [sp, #40]
    abd4:	str	x1, [sp, #32]
    abd8:	str	x2, [sp, #24]
    abdc:	ldr	x2, [sp, #24]
    abe0:	ldr	x1, [sp, #32]
    abe4:	ldr	x0, [sp, #40]
    abe8:	bl	f08c <grub_memmove>
    abec:	ldp	x29, x30, [sp], #48
    abf0:	ret

000000000000abf4 <grub_dl_init>:
    abf4:	stp	x29, x30, [sp, #-32]!
    abf8:	mov	x29, sp
    abfc:	str	x0, [sp, #24]
    ac00:	ldr	x0, [sp, #24]
    ac04:	ldr	x0, [x0, #48]
    ac08:	cmp	x0, #0x0
    ac0c:	b.eq	ac20 <grub_dl_init+0x2c>  // b.none
    ac10:	ldr	x0, [sp, #24]
    ac14:	ldr	x1, [x0, #48]
    ac18:	ldr	x0, [sp, #24]
    ac1c:	blr	x1
    ac20:	adrp	x0, 0 <_start>
    ac24:	add	x0, x0, #0x0
    ac28:	ldr	x0, [x0]
    ac2c:	ldr	x1, [x0]
    ac30:	ldr	x0, [sp, #24]
    ac34:	str	x1, [x0, #112]
    ac38:	adrp	x0, 0 <_start>
    ac3c:	add	x0, x0, #0x0
    ac40:	ldr	x0, [x0]
    ac44:	ldr	x1, [sp, #24]
    ac48:	str	x1, [x0]
    ac4c:	nop
    ac50:	ldp	x29, x30, [sp], #32
    ac54:	ret
	...

000000000000ac60 <grub_dl_get>:
    ac60:	stp	x29, x30, [sp, #-48]!
    ac64:	mov	x29, sp
    ac68:	str	x0, [sp, #24]
    ac6c:	adrp	x0, 0 <_start>
    ac70:	add	x0, x0, #0x0
    ac74:	ldr	x0, [x0]
    ac78:	ldr	x0, [x0]
    ac7c:	str	x0, [sp, #40]
    ac80:	b	acb4 <grub_dl_get+0x54>
    ac84:	ldr	x0, [sp, #40]
    ac88:	ldr	x0, [x0]
    ac8c:	mov	x1, x0
    ac90:	ldr	x0, [sp, #24]
    ac94:	bl	f660 <grub_strcmp>
    ac98:	cmp	w0, #0x0
    ac9c:	b.ne	aca8 <grub_dl_get+0x48>  // b.any
    aca0:	ldr	x0, [sp, #40]
    aca4:	b	acc4 <grub_dl_get+0x64>
    aca8:	ldr	x0, [sp, #40]
    acac:	ldr	x0, [x0, #112]
    acb0:	str	x0, [sp, #40]
    acb4:	ldr	x0, [sp, #40]
    acb8:	cmp	x0, #0x0
    acbc:	b.ne	ac84 <grub_dl_get+0x24>  // b.any
    acc0:	mov	x0, #0x0                   	// #0
    acc4:	ldp	x29, x30, [sp], #48
    acc8:	ret
    accc:	nop
	...

000000000000acd8 <grub_file_size>:
    acd8:	sub	sp, sp, #0x10
    acdc:	str	x0, [sp, #8]
    ace0:	ldr	x0, [sp, #8]
    ace4:	ldr	x0, [x0, #64]
    ace8:	add	sp, sp, #0x10
    acec:	ret

000000000000acf0 <grub_dl_add>:
    acf0:	stp	x29, x30, [sp, #-32]!
    acf4:	mov	x29, sp
    acf8:	str	x0, [sp, #24]
    acfc:	ldr	x0, [sp, #24]
    ad00:	ldr	x0, [x0]
    ad04:	bl	ac60 <grub_dl_get>
    ad08:	cmp	x0, #0x0
    ad0c:	b.eq	ad34 <grub_dl_add+0x44>  // b.none
    ad10:	ldr	x0, [sp, #24]
    ad14:	ldr	x0, [x0]
    ad18:	mov	x2, x0
    ad1c:	adrp	x0, 0 <_start>
    ad20:	add	x0, x0, #0x0
    ad24:	ldr	x1, [x0]
    ad28:	mov	w0, #0x2                   	// #2
    ad2c:	bl	ce54 <grub_error>
    ad30:	b	ad38 <grub_dl_add+0x48>
    ad34:	mov	w0, #0x0                   	// #0
    ad38:	ldp	x29, x30, [sp], #32
    ad3c:	ret
	...

000000000000ad48 <grub_dl_remove>:
    ad48:	sub	sp, sp, #0x20
    ad4c:	str	x0, [sp, #8]
    ad50:	adrp	x0, 0 <_start>
    ad54:	add	x0, x0, #0x0
    ad58:	ldr	x0, [x0]
    ad5c:	str	x0, [sp, #24]
    ad60:	ldr	x0, [sp, #24]
    ad64:	ldr	x0, [x0]
    ad68:	str	x0, [sp, #16]
    ad6c:	b	adac <grub_dl_remove+0x64>
    ad70:	ldr	x1, [sp, #16]
    ad74:	ldr	x0, [sp, #8]
    ad78:	cmp	x1, x0
    ad7c:	b.ne	ad94 <grub_dl_remove+0x4c>  // b.any
    ad80:	ldr	x0, [sp, #16]
    ad84:	ldr	x1, [x0, #112]
    ad88:	ldr	x0, [sp, #24]
    ad8c:	str	x1, [x0]
    ad90:	b	adb8 <grub_dl_remove+0x70>
    ad94:	ldr	x0, [sp, #16]
    ad98:	add	x0, x0, #0x70
    ad9c:	str	x0, [sp, #24]
    ada0:	ldr	x0, [sp, #24]
    ada4:	ldr	x0, [x0]
    ada8:	str	x0, [sp, #16]
    adac:	ldr	x0, [sp, #16]
    adb0:	cmp	x0, #0x0
    adb4:	b.ne	ad70 <grub_dl_remove+0x28>  // b.any
    adb8:	add	sp, sp, #0x20
    adbc:	ret
	...

000000000000adc8 <grub_symbol_hash>:
    adc8:	sub	sp, sp, #0x20
    adcc:	str	x0, [sp, #8]
    add0:	str	wzr, [sp, #28]
    add4:	b	ae08 <grub_symbol_hash+0x40>
    add8:	ldr	w1, [sp, #28]
    addc:	mov	w0, w1
    ade0:	lsl	w0, w0, #10
    ade4:	add	w0, w0, w1
    ade8:	lsl	w0, w0, #6
    adec:	sub	w1, w0, w1
    adf0:	ldr	x0, [sp, #8]
    adf4:	add	x2, x0, #0x1
    adf8:	str	x2, [sp, #8]
    adfc:	ldrb	w0, [x0]
    ae00:	add	w0, w1, w0
    ae04:	str	w0, [sp, #28]
    ae08:	ldr	x0, [sp, #8]
    ae0c:	ldrb	w0, [x0]
    ae10:	cmp	w0, #0x0
    ae14:	b.ne	add8 <grub_symbol_hash+0x10>  // b.any
    ae18:	ldr	w0, [sp, #28]
    ae1c:	lsr	w1, w0, #5
    ae20:	ldr	w0, [sp, #28]
    ae24:	add	w1, w1, w0
    ae28:	mov	w0, #0x21b3                	// #8627
    ae2c:	movk	w0, #0x80c1, lsl #16
    ae30:	umull	x0, w1, w0
    ae34:	lsr	x0, x0, #32
    ae38:	lsr	w0, w0, #8
    ae3c:	mov	w2, #0x1fd                 	// #509
    ae40:	mul	w0, w0, w2
    ae44:	sub	w0, w1, w0
    ae48:	add	sp, sp, #0x20
    ae4c:	ret

000000000000ae50 <grub_dl_resolve_symbol>:
    ae50:	stp	x29, x30, [sp, #-48]!
    ae54:	mov	x29, sp
    ae58:	str	x0, [sp, #24]
    ae5c:	ldr	x0, [sp, #24]
    ae60:	bl	adc8 <grub_symbol_hash>
    ae64:	mov	w1, w0
    ae68:	adrp	x0, 0 <_start>
    ae6c:	add	x0, x0, #0x0
    ae70:	ldr	x0, [x0]
    ae74:	mov	w1, w1
    ae78:	ldr	x0, [x0, x1, lsl #3]
    ae7c:	str	x0, [sp, #40]
    ae80:	b	aeb0 <grub_dl_resolve_symbol+0x60>
    ae84:	ldr	x0, [sp, #40]
    ae88:	ldr	x0, [x0, #8]
    ae8c:	ldr	x1, [sp, #24]
    ae90:	bl	f660 <grub_strcmp>
    ae94:	cmp	w0, #0x0
    ae98:	b.ne	aea4 <grub_dl_resolve_symbol+0x54>  // b.any
    ae9c:	ldr	x0, [sp, #40]
    aea0:	b	aec0 <grub_dl_resolve_symbol+0x70>
    aea4:	ldr	x0, [sp, #40]
    aea8:	ldr	x0, [x0]
    aeac:	str	x0, [sp, #40]
    aeb0:	ldr	x0, [sp, #40]
    aeb4:	cmp	x0, #0x0
    aeb8:	b.ne	ae84 <grub_dl_resolve_symbol+0x34>  // b.any
    aebc:	mov	x0, #0x0                   	// #0
    aec0:	ldp	x29, x30, [sp], #48
    aec4:	ret
	...

000000000000aed0 <grub_dl_register_symbol>:
    aed0:	stp	x29, x30, [sp, #-64]!
    aed4:	mov	x29, sp
    aed8:	str	x0, [sp, #40]
    aedc:	str	x1, [sp, #32]
    aee0:	str	w2, [sp, #28]
    aee4:	str	x3, [sp, #16]
    aee8:	mov	x0, #0x28                  	// #40
    aeec:	bl	8348 <grub_malloc>
    aef0:	str	x0, [sp, #56]
    aef4:	ldr	x0, [sp, #56]
    aef8:	cmp	x0, #0x0
    aefc:	b.ne	af14 <grub_dl_register_symbol+0x44>  // b.any
    af00:	adrp	x0, 0 <_start>
    af04:	add	x0, x0, #0x0
    af08:	ldr	x0, [x0]
    af0c:	ldr	w0, [x0]
    af10:	b	afd4 <grub_dl_register_symbol+0x104>
    af14:	ldr	x0, [sp, #16]
    af18:	cmp	x0, #0x0
    af1c:	b.eq	af60 <grub_dl_register_symbol+0x90>  // b.none
    af20:	ldr	x0, [sp, #40]
    af24:	bl	fc40 <grub_strdup>
    af28:	mov	x1, x0
    af2c:	ldr	x0, [sp, #56]
    af30:	str	x1, [x0, #8]
    af34:	ldr	x0, [sp, #56]
    af38:	ldr	x0, [x0, #8]
    af3c:	cmp	x0, #0x0
    af40:	b.ne	af6c <grub_dl_register_symbol+0x9c>  // b.any
    af44:	ldr	x0, [sp, #56]
    af48:	bl	83ac <grub_free>
    af4c:	adrp	x0, 0 <_start>
    af50:	add	x0, x0, #0x0
    af54:	ldr	x0, [x0]
    af58:	ldr	w0, [x0]
    af5c:	b	afd4 <grub_dl_register_symbol+0x104>
    af60:	ldr	x0, [sp, #56]
    af64:	ldr	x1, [sp, #40]
    af68:	str	x1, [x0, #8]
    af6c:	ldr	x0, [sp, #56]
    af70:	ldr	x1, [sp, #32]
    af74:	str	x1, [x0, #16]
    af78:	ldr	x0, [sp, #56]
    af7c:	ldr	x1, [sp, #16]
    af80:	str	x1, [x0, #32]
    af84:	ldr	x0, [sp, #56]
    af88:	ldr	w1, [sp, #28]
    af8c:	str	w1, [x0, #24]
    af90:	ldr	x0, [sp, #40]
    af94:	bl	adc8 <grub_symbol_hash>
    af98:	str	w0, [sp, #52]
    af9c:	adrp	x0, 0 <_start>
    afa0:	add	x0, x0, #0x0
    afa4:	ldr	x0, [x0]
    afa8:	ldr	w1, [sp, #52]
    afac:	ldr	x1, [x0, x1, lsl #3]
    afb0:	ldr	x0, [sp, #56]
    afb4:	str	x1, [x0]
    afb8:	adrp	x0, 0 <_start>
    afbc:	add	x0, x0, #0x0
    afc0:	ldr	x0, [x0]
    afc4:	ldr	w1, [sp, #52]
    afc8:	ldr	x2, [sp, #56]
    afcc:	str	x2, [x0, x1, lsl #3]
    afd0:	mov	w0, #0x0                   	// #0
    afd4:	ldp	x29, x30, [sp], #64
    afd8:	ret
    afdc:	nop
	...

000000000000aff0 <grub_dl_unregister_symbols>:
    aff0:	stp	x29, x30, [sp, #-64]!
    aff4:	mov	x29, sp
    aff8:	str	x0, [sp, #24]
    affc:	ldr	x0, [sp, #24]
    b000:	cmp	x0, #0x0
    b004:	b.ne	b018 <grub_dl_unregister_symbols+0x28>  // b.any
    b008:	adrp	x0, 0 <_start>
    b00c:	add	x0, x0, #0x0
    b010:	ldr	x0, [x0]
    b014:	bl	117e8 <grub_fatal>
    b018:	str	wzr, [sp, #60]
    b01c:	b	b0b8 <grub_dl_unregister_symbols+0xc8>
    b020:	ldr	w0, [sp, #60]
    b024:	lsl	x1, x0, #3
    b028:	adrp	x0, 0 <_start>
    b02c:	add	x0, x0, #0x0
    b030:	ldr	x0, [x0]
    b034:	add	x0, x1, x0
    b038:	str	x0, [sp, #40]
    b03c:	ldr	x0, [sp, #40]
    b040:	ldr	x0, [x0]
    b044:	str	x0, [sp, #48]
    b048:	b	b0a0 <grub_dl_unregister_symbols+0xb0>
    b04c:	ldr	x0, [sp, #48]
    b050:	ldr	x0, [x0]
    b054:	str	x0, [sp, #32]
    b058:	ldr	x0, [sp, #48]
    b05c:	ldr	x0, [x0, #32]
    b060:	ldr	x1, [sp, #24]
    b064:	cmp	x1, x0
    b068:	b.ne	b090 <grub_dl_unregister_symbols+0xa0>  // b.any
    b06c:	ldr	x0, [sp, #40]
    b070:	ldr	x1, [sp, #32]
    b074:	str	x1, [x0]
    b078:	ldr	x0, [sp, #48]
    b07c:	ldr	x0, [x0, #8]
    b080:	bl	83ac <grub_free>
    b084:	ldr	x0, [sp, #48]
    b088:	bl	83ac <grub_free>
    b08c:	b	b098 <grub_dl_unregister_symbols+0xa8>
    b090:	ldr	x0, [sp, #48]
    b094:	str	x0, [sp, #40]
    b098:	ldr	x0, [sp, #32]
    b09c:	str	x0, [sp, #48]
    b0a0:	ldr	x0, [sp, #48]
    b0a4:	cmp	x0, #0x0
    b0a8:	b.ne	b04c <grub_dl_unregister_symbols+0x5c>  // b.any
    b0ac:	ldr	w0, [sp, #60]
    b0b0:	add	w0, w0, #0x1
    b0b4:	str	w0, [sp, #60]
    b0b8:	ldr	w0, [sp, #60]
    b0bc:	cmp	w0, #0x1fc
    b0c0:	b.ls	b020 <grub_dl_unregister_symbols+0x30>  // b.plast
    b0c4:	nop
    b0c8:	nop
    b0cc:	ldp	x29, x30, [sp], #64
    b0d0:	ret
    b0d4:	nop
	...

000000000000b0e8 <grub_dl_get_section_addr>:
    b0e8:	sub	sp, sp, #0x20
    b0ec:	str	x0, [sp, #8]
    b0f0:	str	w1, [sp, #4]
    b0f4:	ldr	x0, [sp, #8]
    b0f8:	ldr	x0, [x0, #24]
    b0fc:	str	x0, [sp, #24]
    b100:	b	b130 <grub_dl_get_section_addr+0x48>
    b104:	ldr	x0, [sp, #24]
    b108:	ldr	w0, [x0, #24]
    b10c:	ldr	w1, [sp, #4]
    b110:	cmp	w1, w0
    b114:	b.ne	b124 <grub_dl_get_section_addr+0x3c>  // b.any
    b118:	ldr	x0, [sp, #24]
    b11c:	ldr	x0, [x0, #8]
    b120:	b	b140 <grub_dl_get_section_addr+0x58>
    b124:	ldr	x0, [sp, #24]
    b128:	ldr	x0, [x0]
    b12c:	str	x0, [sp, #24]
    b130:	ldr	x0, [sp, #24]
    b134:	cmp	x0, #0x0
    b138:	b.ne	b104 <grub_dl_get_section_addr+0x1c>  // b.any
    b13c:	mov	x0, #0x0                   	// #0
    b140:	add	sp, sp, #0x20
    b144:	ret

000000000000b148 <grub_dl_check_header>:
    b148:	stp	x29, x30, [sp, #-48]!
    b14c:	mov	x29, sp
    b150:	str	x0, [sp, #24]
    b154:	str	x1, [sp, #16]
    b158:	ldr	x0, [sp, #24]
    b15c:	str	x0, [sp, #40]
    b160:	ldr	x0, [sp, #16]
    b164:	cmp	x0, #0x3f
    b168:	b.hi	b184 <grub_dl_check_header+0x3c>  // b.pmore
    b16c:	adrp	x0, 0 <_start>
    b170:	add	x0, x0, #0x0
    b174:	ldr	x1, [x0]
    b178:	mov	w0, #0x15                  	// #21
    b17c:	bl	ce54 <grub_error>
    b180:	b	b220 <grub_dl_check_header+0xd8>
    b184:	ldr	x0, [sp, #40]
    b188:	ldrb	w0, [x0]
    b18c:	cmp	w0, #0x7f
    b190:	b.ne	b1e4 <grub_dl_check_header+0x9c>  // b.any
    b194:	ldr	x0, [sp, #40]
    b198:	ldrb	w0, [x0, #1]
    b19c:	cmp	w0, #0x45
    b1a0:	b.ne	b1e4 <grub_dl_check_header+0x9c>  // b.any
    b1a4:	ldr	x0, [sp, #40]
    b1a8:	ldrb	w0, [x0, #2]
    b1ac:	cmp	w0, #0x4c
    b1b0:	b.ne	b1e4 <grub_dl_check_header+0x9c>  // b.any
    b1b4:	ldr	x0, [sp, #40]
    b1b8:	ldrb	w0, [x0, #3]
    b1bc:	cmp	w0, #0x46
    b1c0:	b.ne	b1e4 <grub_dl_check_header+0x9c>  // b.any
    b1c4:	ldr	x0, [sp, #40]
    b1c8:	ldrb	w0, [x0, #6]
    b1cc:	cmp	w0, #0x1
    b1d0:	b.ne	b1e4 <grub_dl_check_header+0x9c>  // b.any
    b1d4:	ldr	x0, [sp, #40]
    b1d8:	ldr	w0, [x0, #20]
    b1dc:	cmp	w0, #0x1
    b1e0:	b.eq	b1fc <grub_dl_check_header+0xb4>  // b.none
    b1e4:	adrp	x0, 0 <_start>
    b1e8:	add	x0, x0, #0x0
    b1ec:	ldr	x1, [x0]
    b1f0:	mov	w0, #0x15                  	// #21
    b1f4:	bl	ce54 <grub_error>
    b1f8:	b	b220 <grub_dl_check_header+0xd8>
    b1fc:	ldr	x0, [sp, #24]
    b200:	bl	4d0 <grub_arch_dl_check_header>
    b204:	str	w0, [sp, #36]
    b208:	ldr	w0, [sp, #36]
    b20c:	cmp	w0, #0x0
    b210:	b.eq	b21c <grub_dl_check_header+0xd4>  // b.none
    b214:	ldr	w0, [sp, #36]
    b218:	b	b220 <grub_dl_check_header+0xd8>
    b21c:	mov	w0, #0x0                   	// #0
    b220:	ldp	x29, x30, [sp], #48
    b224:	ret
	...

000000000000b238 <grub_dl_load_segments>:
    b238:	stp	x29, x30, [sp, #-112]!
    b23c:	mov	x29, sp
    b240:	str	x0, [sp, #24]
    b244:	str	x1, [sp, #16]
    b248:	str	xzr, [sp, #88]
    b24c:	mov	x0, #0x1                   	// #1
    b250:	str	x0, [sp, #80]
    b254:	str	wzr, [sp, #108]
    b258:	ldr	x0, [sp, #16]
    b25c:	ldr	x0, [x0, #40]
    b260:	ldr	x1, [sp, #16]
    b264:	add	x0, x1, x0
    b268:	str	x0, [sp, #96]
    b26c:	b	b2e8 <grub_dl_load_segments+0xb0>
    b270:	ldr	x0, [sp, #96]
    b274:	ldr	x1, [x0, #48]
    b278:	ldr	x0, [sp, #88]
    b27c:	add	x0, x1, x0
    b280:	sub	x1, x0, #0x1
    b284:	ldr	x0, [sp, #96]
    b288:	ldr	x0, [x0, #48]
    b28c:	neg	x0, x0
    b290:	and	x1, x1, x0
    b294:	ldr	x0, [sp, #96]
    b298:	ldr	x0, [x0, #32]
    b29c:	add	x0, x1, x0
    b2a0:	str	x0, [sp, #88]
    b2a4:	ldr	x0, [sp, #96]
    b2a8:	ldr	x0, [x0, #48]
    b2ac:	ldr	x1, [sp, #80]
    b2b0:	cmp	x1, x0
    b2b4:	b.cs	b2c4 <grub_dl_load_segments+0x8c>  // b.hs, b.nlast
    b2b8:	ldr	x0, [sp, #96]
    b2bc:	ldr	x0, [x0, #48]
    b2c0:	str	x0, [sp, #80]
    b2c4:	ldr	w0, [sp, #108]
    b2c8:	add	w0, w0, #0x1
    b2cc:	str	w0, [sp, #108]
    b2d0:	ldr	x0, [sp, #16]
    b2d4:	ldrh	w0, [x0, #58]
    b2d8:	and	x0, x0, #0xffff
    b2dc:	ldr	x1, [sp, #96]
    b2e0:	add	x0, x1, x0
    b2e4:	str	x0, [sp, #96]
    b2e8:	ldr	x0, [sp, #16]
    b2ec:	ldrh	w0, [x0, #60]
    b2f0:	mov	w1, w0
    b2f4:	ldr	w0, [sp, #108]
    b2f8:	cmp	w0, w1
    b2fc:	b.cc	b270 <grub_dl_load_segments+0x38>  // b.lo, b.ul, b.last
    b300:	add	x1, sp, #0x20
    b304:	add	x0, sp, #0x28
    b308:	mov	x2, x1
    b30c:	mov	x1, x0
    b310:	ldr	x0, [sp, #16]
    b314:	bl	e18 <grub_arm64_dl_get_tramp_got_size>
    b318:	str	w0, [sp, #68]
    b31c:	ldr	w0, [sp, #68]
    b320:	cmp	w0, #0x0
    b324:	b.eq	b330 <grub_dl_load_segments+0xf8>  // b.none
    b328:	ldr	w0, [sp, #68]
    b32c:	b	b5ec <grub_dl_load_segments+0x3b4>
    b330:	ldr	x0, [sp, #40]
    b334:	add	x0, x0, #0x7
    b338:	and	x0, x0, #0xfffffffffffffff8
    b33c:	ldr	x1, [sp, #88]
    b340:	add	x0, x1, x0
    b344:	str	x0, [sp, #88]
    b348:	ldr	x0, [sp, #80]
    b34c:	cmp	x0, #0x7
    b350:	b.hi	b35c <grub_dl_load_segments+0x124>  // b.pmore
    b354:	mov	x0, #0x8                   	// #8
    b358:	str	x0, [sp, #80]
    b35c:	ldr	x0, [sp, #32]
    b360:	add	x0, x0, #0x7
    b364:	and	x0, x0, #0xfffffffffffffff8
    b368:	ldr	x1, [sp, #88]
    b36c:	add	x0, x1, x0
    b370:	str	x0, [sp, #88]
    b374:	ldr	x0, [sp, #80]
    b378:	cmp	x0, #0x7
    b37c:	b.hi	b388 <grub_dl_load_segments+0x150>  // b.pmore
    b380:	mov	x0, #0x8                   	// #8
    b384:	str	x0, [sp, #80]
    b388:	ldr	x1, [sp, #88]
    b38c:	ldr	x0, [sp, #80]
    b390:	bl	81f0 <grub_memalign>
    b394:	mov	x1, x0
    b398:	ldr	x0, [sp, #24]
    b39c:	str	x1, [x0, #96]
    b3a0:	ldr	x0, [sp, #24]
    b3a4:	ldr	x0, [x0, #96]
    b3a8:	cmp	x0, #0x0
    b3ac:	b.ne	b3c4 <grub_dl_load_segments+0x18c>  // b.any
    b3b0:	adrp	x0, 0 <_start>
    b3b4:	add	x0, x0, #0x0
    b3b8:	ldr	x0, [x0]
    b3bc:	ldr	w0, [x0]
    b3c0:	b	b5ec <grub_dl_load_segments+0x3b4>
    b3c4:	ldr	x0, [sp, #24]
    b3c8:	ldr	x1, [sp, #88]
    b3cc:	str	x1, [x0, #104]
    b3d0:	ldr	x0, [sp, #24]
    b3d4:	ldr	x0, [x0, #96]
    b3d8:	str	x0, [sp, #72]
    b3dc:	str	wzr, [sp, #108]
    b3e0:	ldr	x0, [sp, #16]
    b3e4:	ldr	x0, [x0, #40]
    b3e8:	ldr	x1, [sp, #16]
    b3ec:	add	x0, x1, x0
    b3f0:	str	x0, [sp, #96]
    b3f4:	b	b560 <grub_dl_load_segments+0x328>
    b3f8:	ldr	x0, [sp, #96]
    b3fc:	ldr	x0, [x0, #8]
    b400:	and	x0, x0, #0x2
    b404:	cmp	x0, #0x0
    b408:	b.eq	b53c <grub_dl_load_segments+0x304>  // b.none
    b40c:	mov	x0, #0x20                  	// #32
    b410:	bl	8348 <grub_malloc>
    b414:	str	x0, [sp, #56]
    b418:	ldr	x0, [sp, #56]
    b41c:	cmp	x0, #0x0
    b420:	b.ne	b438 <grub_dl_load_segments+0x200>  // b.any
    b424:	adrp	x0, 0 <_start>
    b428:	add	x0, x0, #0x0
    b42c:	ldr	x0, [x0]
    b430:	ldr	w0, [x0]
    b434:	b	b5ec <grub_dl_load_segments+0x3b4>
    b438:	ldr	x0, [sp, #96]
    b43c:	ldr	x0, [x0, #32]
    b440:	cmp	x0, #0x0
    b444:	b.eq	b4fc <grub_dl_load_segments+0x2c4>  // b.none
    b448:	ldr	x0, [sp, #96]
    b44c:	ldr	x1, [x0, #48]
    b450:	ldr	x0, [sp, #72]
    b454:	add	x0, x1, x0
    b458:	sub	x1, x0, #0x1
    b45c:	ldr	x0, [sp, #96]
    b460:	ldr	x0, [x0, #48]
    b464:	neg	x0, x0
    b468:	and	x0, x1, x0
    b46c:	str	x0, [sp, #72]
    b470:	ldr	x0, [sp, #72]
    b474:	str	x0, [sp, #48]
    b478:	ldr	x0, [sp, #96]
    b47c:	ldr	x0, [x0, #32]
    b480:	ldr	x1, [sp, #72]
    b484:	add	x0, x1, x0
    b488:	str	x0, [sp, #72]
    b48c:	ldr	x0, [sp, #96]
    b490:	ldr	w0, [x0, #4]
    b494:	cmp	w0, #0x1
    b498:	b.eq	b4a8 <grub_dl_load_segments+0x270>  // b.none
    b49c:	cmp	w0, #0x8
    b4a0:	b.eq	b4d0 <grub_dl_load_segments+0x298>  // b.none
    b4a4:	b	b4ec <grub_dl_load_segments+0x2b4>
    b4a8:	ldr	x0, [sp, #96]
    b4ac:	ldr	x0, [x0, #24]
    b4b0:	ldr	x1, [sp, #16]
    b4b4:	add	x1, x1, x0
    b4b8:	ldr	x0, [sp, #96]
    b4bc:	ldr	x0, [x0, #32]
    b4c0:	mov	x2, x0
    b4c4:	ldr	x0, [sp, #48]
    b4c8:	bl	abc8 <grub_memcpy>
    b4cc:	b	b4ec <grub_dl_load_segments+0x2b4>
    b4d0:	ldr	x0, [sp, #96]
    b4d4:	ldr	x0, [x0, #32]
    b4d8:	mov	x2, x0
    b4dc:	mov	w1, #0x0                   	// #0
    b4e0:	ldr	x0, [sp, #48]
    b4e4:	bl	fd18 <grub_memset>
    b4e8:	nop
    b4ec:	ldr	x0, [sp, #56]
    b4f0:	ldr	x1, [sp, #48]
    b4f4:	str	x1, [x0, #8]
    b4f8:	b	b504 <grub_dl_load_segments+0x2cc>
    b4fc:	ldr	x0, [sp, #56]
    b500:	str	xzr, [x0, #8]
    b504:	ldr	x0, [sp, #96]
    b508:	ldr	x1, [x0, #32]
    b50c:	ldr	x0, [sp, #56]
    b510:	str	x1, [x0, #16]
    b514:	ldr	x0, [sp, #56]
    b518:	ldr	w1, [sp, #108]
    b51c:	str	w1, [x0, #24]
    b520:	ldr	x0, [sp, #24]
    b524:	ldr	x1, [x0, #24]
    b528:	ldr	x0, [sp, #56]
    b52c:	str	x1, [x0]
    b530:	ldr	x0, [sp, #24]
    b534:	ldr	x1, [sp, #56]
    b538:	str	x1, [x0, #24]
    b53c:	ldr	w0, [sp, #108]
    b540:	add	w0, w0, #0x1
    b544:	str	w0, [sp, #108]
    b548:	ldr	x0, [sp, #16]
    b54c:	ldrh	w0, [x0, #58]
    b550:	and	x0, x0, #0xffff
    b554:	ldr	x1, [sp, #96]
    b558:	add	x0, x1, x0
    b55c:	str	x0, [sp, #96]
    b560:	ldr	x0, [sp, #16]
    b564:	ldrh	w0, [x0, #60]
    b568:	mov	w1, w0
    b56c:	ldr	w0, [sp, #108]
    b570:	cmp	w0, w1
    b574:	b.cc	b3f8 <grub_dl_load_segments+0x1c0>  // b.lo, b.ul, b.last
    b578:	ldr	x0, [sp, #72]
    b57c:	add	x0, x0, #0x7
    b580:	and	x0, x0, #0xfffffffffffffff8
    b584:	str	x0, [sp, #72]
    b588:	ldr	x0, [sp, #24]
    b58c:	ldr	x1, [sp, #72]
    b590:	str	x1, [x0, #80]
    b594:	ldr	x0, [sp, #24]
    b598:	ldr	x1, [sp, #72]
    b59c:	str	x1, [x0, #88]
    b5a0:	ldr	x0, [sp, #40]
    b5a4:	ldr	x1, [sp, #72]
    b5a8:	add	x0, x1, x0
    b5ac:	str	x0, [sp, #72]
    b5b0:	ldr	x0, [sp, #72]
    b5b4:	add	x0, x0, #0x7
    b5b8:	and	x0, x0, #0xfffffffffffffff8
    b5bc:	str	x0, [sp, #72]
    b5c0:	ldr	x0, [sp, #24]
    b5c4:	ldr	x1, [sp, #72]
    b5c8:	str	x1, [x0, #64]
    b5cc:	ldr	x0, [sp, #24]
    b5d0:	ldr	x1, [sp, #72]
    b5d4:	str	x1, [x0, #72]
    b5d8:	ldr	x0, [sp, #32]
    b5dc:	ldr	x1, [sp, #72]
    b5e0:	add	x0, x1, x0
    b5e4:	str	x0, [sp, #72]
    b5e8:	mov	w0, #0x0                   	// #0
    b5ec:	ldp	x29, x30, [sp], #112
    b5f0:	ret
    b5f4:	nop
	...

000000000000b600 <grub_dl_resolve_symbols>:
    b600:	stp	x29, x30, [sp, #-96]!
    b604:	mov	x29, sp
    b608:	str	x0, [sp, #24]
    b60c:	str	x1, [sp, #16]
    b610:	str	wzr, [sp, #92]
    b614:	ldr	x0, [sp, #16]
    b618:	ldr	x0, [x0, #40]
    b61c:	ldr	x1, [sp, #16]
    b620:	add	x0, x1, x0
    b624:	str	x0, [sp, #80]
    b628:	b	b660 <grub_dl_resolve_symbols+0x60>
    b62c:	ldr	x0, [sp, #80]
    b630:	ldr	w0, [x0, #4]
    b634:	cmp	w0, #0x2
    b638:	b.eq	b67c <grub_dl_resolve_symbols+0x7c>  // b.none
    b63c:	ldr	w0, [sp, #92]
    b640:	add	w0, w0, #0x1
    b644:	str	w0, [sp, #92]
    b648:	ldr	x0, [sp, #16]
    b64c:	ldrh	w0, [x0, #58]
    b650:	and	x0, x0, #0xffff
    b654:	ldr	x1, [sp, #80]
    b658:	add	x0, x1, x0
    b65c:	str	x0, [sp, #80]
    b660:	ldr	x0, [sp, #16]
    b664:	ldrh	w0, [x0, #60]
    b668:	mov	w1, w0
    b66c:	ldr	w0, [sp, #92]
    b670:	cmp	w0, w1
    b674:	b.cc	b62c <grub_dl_resolve_symbols+0x2c>  // b.lo, b.ul, b.last
    b678:	b	b680 <grub_dl_resolve_symbols+0x80>
    b67c:	nop
    b680:	ldr	x0, [sp, #16]
    b684:	ldrh	w0, [x0, #60]
    b688:	mov	w1, w0
    b68c:	ldr	w0, [sp, #92]
    b690:	cmp	w0, w1
    b694:	b.ne	b6a0 <grub_dl_resolve_symbols+0xa0>  // b.any
    b698:	mov	w0, #0x0                   	// #0
    b69c:	b	ba34 <grub_dl_resolve_symbols+0x434>
    b6a0:	ldr	x0, [sp, #80]
    b6a4:	ldr	x0, [x0, #24]
    b6a8:	ldr	x1, [sp, #16]
    b6ac:	add	x1, x1, x0
    b6b0:	ldr	x0, [sp, #24]
    b6b4:	str	x1, [x0, #32]
    b6b8:	ldr	x0, [sp, #80]
    b6bc:	ldr	x1, [x0, #56]
    b6c0:	ldr	x0, [sp, #24]
    b6c4:	str	x1, [x0, #40]
    b6c8:	ldr	x0, [sp, #24]
    b6cc:	ldr	x0, [x0, #32]
    b6d0:	str	x0, [sp, #72]
    b6d4:	ldr	x0, [sp, #80]
    b6d8:	ldr	x0, [x0, #32]
    b6dc:	str	w0, [sp, #68]
    b6e0:	ldr	x0, [sp, #80]
    b6e4:	ldr	x0, [x0, #56]
    b6e8:	str	w0, [sp, #64]
    b6ec:	ldr	x0, [sp, #16]
    b6f0:	ldr	x1, [x0, #40]
    b6f4:	ldr	x0, [sp, #16]
    b6f8:	ldrh	w0, [x0, #58]
    b6fc:	mov	w2, w0
    b700:	ldr	x0, [sp, #80]
    b704:	ldr	w0, [x0, #40]
    b708:	mul	w0, w2, w0
    b70c:	mov	w0, w0
    b710:	add	x0, x1, x0
    b714:	ldr	x1, [sp, #16]
    b718:	add	x0, x1, x0
    b71c:	str	x0, [sp, #80]
    b720:	ldr	x0, [sp, #80]
    b724:	ldr	x0, [x0, #24]
    b728:	ldr	x1, [sp, #16]
    b72c:	add	x0, x1, x0
    b730:	str	x0, [sp, #56]
    b734:	str	wzr, [sp, #92]
    b738:	b	ba18 <grub_dl_resolve_symbols+0x418>
    b73c:	ldr	x0, [sp, #72]
    b740:	ldrb	w0, [x0, #4]
    b744:	and	w0, w0, #0xf
    b748:	strb	w0, [sp, #55]
    b74c:	ldr	x0, [sp, #72]
    b750:	ldrb	w0, [x0, #4]
    b754:	lsr	w0, w0, #4
    b758:	strb	w0, [sp, #54]
    b75c:	ldr	x0, [sp, #72]
    b760:	ldr	w0, [x0]
    b764:	mov	w0, w0
    b768:	ldr	x1, [sp, #56]
    b76c:	add	x0, x1, x0
    b770:	str	x0, [sp, #40]
    b774:	ldrb	w0, [sp, #55]
    b778:	cmp	w0, #0x4
    b77c:	b.eq	b9c4 <grub_dl_resolve_symbols+0x3c4>  // b.none
    b780:	cmp	w0, #0x4
    b784:	b.gt	b9d0 <grub_dl_resolve_symbols+0x3d0>
    b788:	cmp	w0, #0x3
    b78c:	b.eq	b9a0 <grub_dl_resolve_symbols+0x3a0>  // b.none
    b790:	cmp	w0, #0x3
    b794:	b.gt	b9d0 <grub_dl_resolve_symbols+0x3d0>
    b798:	cmp	w0, #0x1
    b79c:	b.gt	b7ac <grub_dl_resolve_symbols+0x1ac>
    b7a0:	cmp	w0, #0x0
    b7a4:	b.ge	b7b8 <grub_dl_resolve_symbols+0x1b8>  // b.tcont
    b7a8:	b	b9d0 <grub_dl_resolve_symbols+0x3d0>
    b7ac:	cmp	w0, #0x2
    b7b0:	b.eq	b8c8 <grub_dl_resolve_symbols+0x2c8>  // b.none
    b7b4:	b	b9d0 <grub_dl_resolve_symbols+0x3d0>
    b7b8:	ldr	x0, [sp, #72]
    b7bc:	ldr	w0, [x0]
    b7c0:	cmp	w0, #0x0
    b7c4:	b.eq	b850 <grub_dl_resolve_symbols+0x250>  // b.none
    b7c8:	ldr	x0, [sp, #72]
    b7cc:	ldrh	w0, [x0, #6]
    b7d0:	cmp	w0, #0x0
    b7d4:	b.ne	b850 <grub_dl_resolve_symbols+0x250>  // b.any
    b7d8:	ldr	x0, [sp, #40]
    b7dc:	bl	ae50 <grub_dl_resolve_symbol>
    b7e0:	str	x0, [sp, #32]
    b7e4:	ldr	x0, [sp, #32]
    b7e8:	cmp	x0, #0x0
    b7ec:	b.ne	b80c <grub_dl_resolve_symbols+0x20c>  // b.any
    b7f0:	ldr	x2, [sp, #40]
    b7f4:	adrp	x0, 0 <_start>
    b7f8:	add	x0, x0, #0x0
    b7fc:	ldr	x1, [x0]
    b800:	mov	w0, #0x2                   	// #2
    b804:	bl	ce54 <grub_error>
    b808:	b	ba34 <grub_dl_resolve_symbols+0x434>
    b80c:	ldr	x0, [sp, #32]
    b810:	ldr	x0, [x0, #16]
    b814:	mov	x1, x0
    b818:	ldr	x0, [sp, #72]
    b81c:	str	x1, [x0, #8]
    b820:	ldr	x0, [sp, #32]
    b824:	ldr	w0, [x0, #24]
    b828:	cmp	w0, #0x0
    b82c:	b.eq	b8c0 <grub_dl_resolve_symbols+0x2c0>  // b.none
    b830:	ldrb	w0, [sp, #54]
    b834:	ubfiz	w0, w0, #4, #4
    b838:	and	w0, w0, #0xff
    b83c:	add	w0, w0, #0x2
    b840:	and	w1, w0, #0xff
    b844:	ldr	x0, [sp, #72]
    b848:	strb	w1, [x0, #4]
    b84c:	b	b8c0 <grub_dl_resolve_symbols+0x2c0>
    b850:	ldr	x0, [sp, #72]
    b854:	ldrh	w0, [x0, #6]
    b858:	mov	w1, w0
    b85c:	ldr	x0, [sp, #24]
    b860:	bl	b0e8 <grub_dl_get_section_addr>
    b864:	mov	x1, x0
    b868:	ldr	x0, [sp, #72]
    b86c:	ldr	x0, [x0, #8]
    b870:	add	x1, x1, x0
    b874:	ldr	x0, [sp, #72]
    b878:	str	x1, [x0, #8]
    b87c:	ldrb	w0, [sp, #54]
    b880:	cmp	w0, #0x0
    b884:	b.eq	b9f0 <grub_dl_resolve_symbols+0x3f0>  // b.none
    b888:	ldr	x0, [sp, #72]
    b88c:	ldr	x0, [x0, #8]
    b890:	ldr	x3, [sp, #24]
    b894:	mov	w2, #0x0                   	// #0
    b898:	mov	x1, x0
    b89c:	ldr	x0, [sp, #40]
    b8a0:	bl	aed0 <grub_dl_register_symbol>
    b8a4:	cmp	w0, #0x0
    b8a8:	b.eq	b9f0 <grub_dl_resolve_symbols+0x3f0>  // b.none
    b8ac:	adrp	x0, 0 <_start>
    b8b0:	add	x0, x0, #0x0
    b8b4:	ldr	x0, [x0]
    b8b8:	ldr	w0, [x0]
    b8bc:	b	ba34 <grub_dl_resolve_symbols+0x434>
    b8c0:	nop
    b8c4:	b	b9f0 <grub_dl_resolve_symbols+0x3f0>
    b8c8:	ldr	x0, [sp, #72]
    b8cc:	ldrh	w0, [x0, #6]
    b8d0:	mov	w1, w0
    b8d4:	ldr	x0, [sp, #24]
    b8d8:	bl	b0e8 <grub_dl_get_section_addr>
    b8dc:	mov	x1, x0
    b8e0:	ldr	x0, [sp, #72]
    b8e4:	ldr	x0, [x0, #8]
    b8e8:	add	x1, x1, x0
    b8ec:	ldr	x0, [sp, #72]
    b8f0:	str	x1, [x0, #8]
    b8f4:	ldrb	w0, [sp, #54]
    b8f8:	cmp	w0, #0x0
    b8fc:	b.eq	b938 <grub_dl_resolve_symbols+0x338>  // b.none
    b900:	ldr	x0, [sp, #72]
    b904:	ldr	x0, [x0, #8]
    b908:	ldr	x3, [sp, #24]
    b90c:	mov	w2, #0x1                   	// #1
    b910:	mov	x1, x0
    b914:	ldr	x0, [sp, #40]
    b918:	bl	aed0 <grub_dl_register_symbol>
    b91c:	cmp	w0, #0x0
    b920:	b.eq	b938 <grub_dl_resolve_symbols+0x338>  // b.none
    b924:	adrp	x0, 0 <_start>
    b928:	add	x0, x0, #0x0
    b92c:	ldr	x0, [x0]
    b930:	ldr	w0, [x0]
    b934:	b	ba34 <grub_dl_resolve_symbols+0x434>
    b938:	adrp	x0, 0 <_start>
    b93c:	add	x0, x0, #0x0
    b940:	ldr	x1, [x0]
    b944:	ldr	x0, [sp, #40]
    b948:	bl	f660 <grub_strcmp>
    b94c:	cmp	w0, #0x0
    b950:	b.ne	b96c <grub_dl_resolve_symbols+0x36c>  // b.any
    b954:	ldr	x0, [sp, #72]
    b958:	ldr	x0, [x0, #8]
    b95c:	mov	x1, x0
    b960:	ldr	x0, [sp, #24]
    b964:	str	x1, [x0, #48]
    b968:	b	b9f8 <grub_dl_resolve_symbols+0x3f8>
    b96c:	adrp	x0, 0 <_start>
    b970:	add	x0, x0, #0x0
    b974:	ldr	x1, [x0]
    b978:	ldr	x0, [sp, #40]
    b97c:	bl	f660 <grub_strcmp>
    b980:	cmp	w0, #0x0
    b984:	b.ne	b9f8 <grub_dl_resolve_symbols+0x3f8>  // b.any
    b988:	ldr	x0, [sp, #72]
    b98c:	ldr	x0, [x0, #8]
    b990:	mov	x1, x0
    b994:	ldr	x0, [sp, #24]
    b998:	str	x1, [x0, #56]
    b99c:	b	b9f8 <grub_dl_resolve_symbols+0x3f8>
    b9a0:	ldr	x0, [sp, #72]
    b9a4:	ldrh	w0, [x0, #6]
    b9a8:	mov	w1, w0
    b9ac:	ldr	x0, [sp, #24]
    b9b0:	bl	b0e8 <grub_dl_get_section_addr>
    b9b4:	mov	x1, x0
    b9b8:	ldr	x0, [sp, #72]
    b9bc:	str	x1, [x0, #8]
    b9c0:	b	b9fc <grub_dl_resolve_symbols+0x3fc>
    b9c4:	ldr	x0, [sp, #72]
    b9c8:	str	xzr, [x0, #8]
    b9cc:	b	b9fc <grub_dl_resolve_symbols+0x3fc>
    b9d0:	ldrb	w0, [sp, #55]
    b9d4:	mov	w2, w0
    b9d8:	adrp	x0, 0 <_start>
    b9dc:	add	x0, x0, #0x0
    b9e0:	ldr	x1, [x0]
    b9e4:	mov	w0, #0x2                   	// #2
    b9e8:	bl	ce54 <grub_error>
    b9ec:	b	ba34 <grub_dl_resolve_symbols+0x434>
    b9f0:	nop
    b9f4:	b	b9fc <grub_dl_resolve_symbols+0x3fc>
    b9f8:	nop
    b9fc:	ldr	w0, [sp, #92]
    ba00:	add	w0, w0, #0x1
    ba04:	str	w0, [sp, #92]
    ba08:	ldr	w0, [sp, #64]
    ba0c:	ldr	x1, [sp, #72]
    ba10:	add	x0, x1, x0
    ba14:	str	x0, [sp, #72]
    ba18:	ldr	w1, [sp, #68]
    ba1c:	ldr	w0, [sp, #64]
    ba20:	udiv	w0, w1, w0
    ba24:	ldr	w1, [sp, #92]
    ba28:	cmp	w1, w0
    ba2c:	b.cc	b73c <grub_dl_resolve_symbols+0x13c>  // b.lo, b.ul, b.last
    ba30:	mov	w0, #0x0                   	// #0
    ba34:	ldp	x29, x30, [sp], #96
    ba38:	ret
    ba3c:	nop
	...

000000000000ba68 <grub_dl_find_section>:
    ba68:	stp	x29, x30, [sp, #-64]!
    ba6c:	mov	x29, sp
    ba70:	str	x0, [sp, #24]
    ba74:	str	x1, [sp, #16]
    ba78:	ldr	x0, [sp, #24]
    ba7c:	ldr	x1, [x0, #40]
    ba80:	ldr	x0, [sp, #24]
    ba84:	ldrh	w0, [x0, #62]
    ba88:	mov	w2, w0
    ba8c:	ldr	x0, [sp, #24]
    ba90:	ldrh	w0, [x0, #58]
    ba94:	mul	w0, w2, w0
    ba98:	sxtw	x0, w0
    ba9c:	add	x0, x1, x0
    baa0:	ldr	x1, [sp, #24]
    baa4:	add	x0, x1, x0
    baa8:	str	x0, [sp, #56]
    baac:	ldr	x0, [sp, #56]
    bab0:	ldr	x0, [x0, #24]
    bab4:	ldr	x1, [sp, #24]
    bab8:	add	x0, x1, x0
    babc:	str	x0, [sp, #40]
    bac0:	str	wzr, [sp, #52]
    bac4:	ldr	x0, [sp, #24]
    bac8:	ldr	x0, [x0, #40]
    bacc:	ldr	x1, [sp, #24]
    bad0:	add	x0, x1, x0
    bad4:	str	x0, [sp, #56]
    bad8:	b	bb2c <grub_dl_find_section+0xc4>
    badc:	ldr	x0, [sp, #56]
    bae0:	ldr	w0, [x0]
    bae4:	mov	w0, w0
    bae8:	ldr	x1, [sp, #40]
    baec:	add	x0, x1, x0
    baf0:	ldr	x1, [sp, #16]
    baf4:	bl	f660 <grub_strcmp>
    baf8:	cmp	w0, #0x0
    bafc:	b.ne	bb08 <grub_dl_find_section+0xa0>  // b.any
    bb00:	ldr	x0, [sp, #56]
    bb04:	b	bb48 <grub_dl_find_section+0xe0>
    bb08:	ldr	w0, [sp, #52]
    bb0c:	add	w0, w0, #0x1
    bb10:	str	w0, [sp, #52]
    bb14:	ldr	x0, [sp, #24]
    bb18:	ldrh	w0, [x0, #58]
    bb1c:	and	x0, x0, #0xffff
    bb20:	ldr	x1, [sp, #56]
    bb24:	add	x0, x1, x0
    bb28:	str	x0, [sp, #56]
    bb2c:	ldr	x0, [sp, #24]
    bb30:	ldrh	w0, [x0, #60]
    bb34:	mov	w1, w0
    bb38:	ldr	w0, [sp, #52]
    bb3c:	cmp	w0, w1
    bb40:	b.cc	badc <grub_dl_find_section+0x74>  // b.lo, b.ul, b.last
    bb44:	mov	x0, #0x0                   	// #0
    bb48:	ldp	x29, x30, [sp], #64
    bb4c:	ret

000000000000bb50 <grub_dl_check_license>:
    bb50:	stp	x29, x30, [sp, #-48]!
    bb54:	mov	x29, sp
    bb58:	str	x0, [sp, #24]
    bb5c:	adrp	x0, 0 <_start>
    bb60:	add	x0, x0, #0x0
    bb64:	ldr	x1, [x0]
    bb68:	ldr	x0, [sp, #24]
    bb6c:	bl	ba68 <grub_dl_find_section>
    bb70:	str	x0, [sp, #40]
    bb74:	ldr	x0, [sp, #40]
    bb78:	cmp	x0, #0x0
    bb7c:	b.eq	bc0c <grub_dl_check_license+0xbc>  // b.none
    bb80:	ldr	x0, [sp, #40]
    bb84:	ldr	x0, [x0, #24]
    bb88:	ldr	x1, [sp, #24]
    bb8c:	add	x2, x1, x0
    bb90:	adrp	x0, 0 <_start>
    bb94:	add	x0, x0, #0x0
    bb98:	ldr	x1, [x0]
    bb9c:	mov	x0, x2
    bba0:	bl	f660 <grub_strcmp>
    bba4:	cmp	w0, #0x0
    bba8:	b.eq	bc04 <grub_dl_check_license+0xb4>  // b.none
    bbac:	ldr	x0, [sp, #40]
    bbb0:	ldr	x0, [x0, #24]
    bbb4:	ldr	x1, [sp, #24]
    bbb8:	add	x2, x1, x0
    bbbc:	adrp	x0, 0 <_start>
    bbc0:	add	x0, x0, #0x0
    bbc4:	ldr	x1, [x0]
    bbc8:	mov	x0, x2
    bbcc:	bl	f660 <grub_strcmp>
    bbd0:	cmp	w0, #0x0
    bbd4:	b.eq	bc04 <grub_dl_check_license+0xb4>  // b.none
    bbd8:	ldr	x0, [sp, #40]
    bbdc:	ldr	x0, [x0, #24]
    bbe0:	ldr	x1, [sp, #24]
    bbe4:	add	x2, x1, x0
    bbe8:	adrp	x0, 0 <_start>
    bbec:	add	x0, x0, #0x0
    bbf0:	ldr	x1, [x0]
    bbf4:	mov	x0, x2
    bbf8:	bl	f660 <grub_strcmp>
    bbfc:	cmp	w0, #0x0
    bc00:	b.ne	bc0c <grub_dl_check_license+0xbc>  // b.any
    bc04:	mov	w0, #0x0                   	// #0
    bc08:	b	bc20 <grub_dl_check_license+0xd0>
    bc0c:	adrp	x0, 0 <_start>
    bc10:	add	x0, x0, #0x0
    bc14:	ldr	x1, [x0]
    bc18:	mov	w0, #0x2                   	// #2
    bc1c:	bl	ce54 <grub_error>
    bc20:	ldp	x29, x30, [sp], #48
    bc24:	ret
	...

000000000000bc50 <grub_dl_resolve_name>:
    bc50:	stp	x29, x30, [sp, #-48]!
    bc54:	mov	x29, sp
    bc58:	str	x0, [sp, #24]
    bc5c:	str	x1, [sp, #16]
    bc60:	adrp	x0, 0 <_start>
    bc64:	add	x0, x0, #0x0
    bc68:	ldr	x1, [x0]
    bc6c:	ldr	x0, [sp, #16]
    bc70:	bl	ba68 <grub_dl_find_section>
    bc74:	str	x0, [sp, #40]
    bc78:	ldr	x0, [sp, #40]
    bc7c:	cmp	x0, #0x0
    bc80:	b.ne	bc9c <grub_dl_resolve_name+0x4c>  // b.any
    bc84:	adrp	x0, 0 <_start>
    bc88:	add	x0, x0, #0x0
    bc8c:	ldr	x1, [x0]
    bc90:	mov	w0, #0x2                   	// #2
    bc94:	bl	ce54 <grub_error>
    bc98:	b	bce4 <grub_dl_resolve_name+0x94>
    bc9c:	ldr	x0, [sp, #40]
    bca0:	ldr	x0, [x0, #24]
    bca4:	ldr	x1, [sp, #16]
    bca8:	add	x0, x1, x0
    bcac:	bl	fc40 <grub_strdup>
    bcb0:	mov	x1, x0
    bcb4:	ldr	x0, [sp, #24]
    bcb8:	str	x1, [x0]
    bcbc:	ldr	x0, [sp, #24]
    bcc0:	ldr	x0, [x0]
    bcc4:	cmp	x0, #0x0
    bcc8:	b.ne	bce0 <grub_dl_resolve_name+0x90>  // b.any
    bccc:	adrp	x0, 0 <_start>
    bcd0:	add	x0, x0, #0x0
    bcd4:	ldr	x0, [x0]
    bcd8:	ldr	w0, [x0]
    bcdc:	b	bce4 <grub_dl_resolve_name+0x94>
    bce0:	mov	w0, #0x0                   	// #0
    bce4:	ldp	x29, x30, [sp], #48
    bce8:	ret
    bcec:	nop
	...

000000000000bd08 <grub_dl_resolve_dependencies>:
    bd08:	stp	x29, x30, [sp, #-80]!
    bd0c:	mov	x29, sp
    bd10:	str	x0, [sp, #24]
    bd14:	str	x1, [sp, #16]
    bd18:	adrp	x0, 0 <_start>
    bd1c:	add	x0, x0, #0x0
    bd20:	ldr	x1, [x0]
    bd24:	ldr	x0, [sp, #16]
    bd28:	bl	ba68 <grub_dl_find_section>
    bd2c:	str	x0, [sp, #64]
    bd30:	ldr	x0, [sp, #64]
    bd34:	cmp	x0, #0x0
    bd38:	b.ne	bd44 <grub_dl_resolve_dependencies+0x3c>  // b.any
    bd3c:	mov	w0, #0x0                   	// #0
    bd40:	b	be34 <grub_dl_resolve_dependencies+0x12c>
    bd44:	ldr	x0, [sp, #64]
    bd48:	ldr	x0, [x0, #24]
    bd4c:	ldr	x1, [sp, #16]
    bd50:	add	x0, x1, x0
    bd54:	str	x0, [sp, #72]
    bd58:	ldr	x0, [sp, #64]
    bd5c:	ldr	x0, [x0, #32]
    bd60:	ldr	x1, [sp, #72]
    bd64:	add	x0, x1, x0
    bd68:	str	x0, [sp, #56]
    bd6c:	b	be10 <grub_dl_resolve_dependencies+0x108>
    bd70:	ldr	x0, [sp, #72]
    bd74:	bl	c520 <grub_dl_load>
    bd78:	str	x0, [sp, #48]
    bd7c:	ldr	x0, [sp, #48]
    bd80:	cmp	x0, #0x0
    bd84:	b.ne	bd9c <grub_dl_resolve_dependencies+0x94>  // b.any
    bd88:	adrp	x0, 0 <_start>
    bd8c:	add	x0, x0, #0x0
    bd90:	ldr	x0, [x0]
    bd94:	ldr	w0, [x0]
    bd98:	b	be34 <grub_dl_resolve_dependencies+0x12c>
    bd9c:	ldr	x0, [sp, #48]
    bda0:	bl	be50 <grub_dl_ref>
    bda4:	mov	x0, #0x10                  	// #16
    bda8:	bl	8348 <grub_malloc>
    bdac:	str	x0, [sp, #40]
    bdb0:	ldr	x0, [sp, #40]
    bdb4:	cmp	x0, #0x0
    bdb8:	b.ne	bdd0 <grub_dl_resolve_dependencies+0xc8>  // b.any
    bdbc:	adrp	x0, 0 <_start>
    bdc0:	add	x0, x0, #0x0
    bdc4:	ldr	x0, [x0]
    bdc8:	ldr	w0, [x0]
    bdcc:	b	be34 <grub_dl_resolve_dependencies+0x12c>
    bdd0:	ldr	x0, [sp, #40]
    bdd4:	ldr	x1, [sp, #48]
    bdd8:	str	x1, [x0, #8]
    bddc:	ldr	x0, [sp, #24]
    bde0:	ldr	x1, [x0, #16]
    bde4:	ldr	x0, [sp, #40]
    bde8:	str	x1, [x0]
    bdec:	ldr	x0, [sp, #24]
    bdf0:	ldr	x1, [sp, #40]
    bdf4:	str	x1, [x0, #16]
    bdf8:	ldr	x0, [sp, #72]
    bdfc:	bl	fe3c <grub_strlen>
    be00:	add	x0, x0, #0x1
    be04:	ldr	x1, [sp, #72]
    be08:	add	x0, x1, x0
    be0c:	str	x0, [sp, #72]
    be10:	ldr	x1, [sp, #72]
    be14:	ldr	x0, [sp, #56]
    be18:	cmp	x1, x0
    be1c:	b.cs	be30 <grub_dl_resolve_dependencies+0x128>  // b.hs, b.nlast
    be20:	ldr	x0, [sp, #72]
    be24:	ldrb	w0, [x0]
    be28:	cmp	w0, #0x0
    be2c:	b.ne	bd70 <grub_dl_resolve_dependencies+0x68>  // b.any
    be30:	mov	w0, #0x0                   	// #0
    be34:	ldp	x29, x30, [sp], #80
    be38:	ret
    be3c:	nop
	...

000000000000be50 <grub_dl_ref>:
    be50:	stp	x29, x30, [sp, #-48]!
    be54:	mov	x29, sp
    be58:	str	x0, [sp, #24]
    be5c:	ldr	x0, [sp, #24]
    be60:	cmp	x0, #0x0
    be64:	b.ne	be70 <grub_dl_ref+0x20>  // b.any
    be68:	mov	w0, #0x0                   	// #0
    be6c:	b	bec0 <grub_dl_ref+0x70>
    be70:	ldr	x0, [sp, #24]
    be74:	ldr	x0, [x0, #16]
    be78:	str	x0, [sp, #40]
    be7c:	b	be98 <grub_dl_ref+0x48>
    be80:	ldr	x0, [sp, #40]
    be84:	ldr	x0, [x0, #8]
    be88:	bl	be50 <grub_dl_ref>
    be8c:	ldr	x0, [sp, #40]
    be90:	ldr	x0, [x0]
    be94:	str	x0, [sp, #40]
    be98:	ldr	x0, [sp, #40]
    be9c:	cmp	x0, #0x0
    bea0:	b.ne	be80 <grub_dl_ref+0x30>  // b.any
    bea4:	ldr	x0, [sp, #24]
    bea8:	ldr	w0, [x0, #8]
    beac:	add	w1, w0, #0x1
    beb0:	ldr	x0, [sp, #24]
    beb4:	str	w1, [x0, #8]
    beb8:	ldr	x0, [sp, #24]
    bebc:	ldr	w0, [x0, #8]
    bec0:	ldp	x29, x30, [sp], #48
    bec4:	ret

000000000000bec8 <grub_dl_unref>:
    bec8:	stp	x29, x30, [sp, #-48]!
    becc:	mov	x29, sp
    bed0:	str	x0, [sp, #24]
    bed4:	ldr	x0, [sp, #24]
    bed8:	cmp	x0, #0x0
    bedc:	b.ne	bee8 <grub_dl_unref+0x20>  // b.any
    bee0:	mov	w0, #0x0                   	// #0
    bee4:	b	bf38 <grub_dl_unref+0x70>
    bee8:	ldr	x0, [sp, #24]
    beec:	ldr	x0, [x0, #16]
    bef0:	str	x0, [sp, #40]
    bef4:	b	bf10 <grub_dl_unref+0x48>
    bef8:	ldr	x0, [sp, #40]
    befc:	ldr	x0, [x0, #8]
    bf00:	bl	bec8 <grub_dl_unref>
    bf04:	ldr	x0, [sp, #40]
    bf08:	ldr	x0, [x0]
    bf0c:	str	x0, [sp, #40]
    bf10:	ldr	x0, [sp, #40]
    bf14:	cmp	x0, #0x0
    bf18:	b.ne	bef8 <grub_dl_unref+0x30>  // b.any
    bf1c:	ldr	x0, [sp, #24]
    bf20:	ldr	w0, [x0, #8]
    bf24:	sub	w1, w0, #0x1
    bf28:	ldr	x0, [sp, #24]
    bf2c:	str	w1, [x0, #8]
    bf30:	ldr	x0, [sp, #24]
    bf34:	ldr	w0, [x0, #8]
    bf38:	ldp	x29, x30, [sp], #48
    bf3c:	ret

000000000000bf40 <grub_dl_flush_cache>:
    bf40:	stp	x29, x30, [sp, #-32]!
    bf44:	mov	x29, sp
    bf48:	str	x0, [sp, #24]
    bf4c:	ldr	x0, [sp, #24]
    bf50:	ldr	x1, [x0, #104]
    bf54:	ldr	x0, [sp, #24]
    bf58:	ldr	x0, [x0, #96]
    bf5c:	mov	x5, x0
    bf60:	mov	x4, x1
    bf64:	adrp	x0, 0 <_start>
    bf68:	add	x0, x0, #0x0
    bf6c:	ldr	x3, [x0]
    bf70:	adrp	x0, 0 <_start>
    bf74:	add	x0, x0, #0x0
    bf78:	ldr	x2, [x0]
    bf7c:	mov	w1, #0x22b                 	// #555
    bf80:	adrp	x0, 0 <_start>
    bf84:	add	x0, x0, #0x0
    bf88:	ldr	x0, [x0]
    bf8c:	bl	f328 <grub_real_dprintf>
    bf90:	ldr	x0, [sp, #24]
    bf94:	ldr	x2, [x0, #96]
    bf98:	ldr	x0, [sp, #24]
    bf9c:	ldr	x0, [x0, #104]
    bfa0:	mov	x1, x0
    bfa4:	mov	x0, x2
    bfa8:	bl	370 <grub_arch_sync_caches>
    bfac:	nop
    bfb0:	ldp	x29, x30, [sp], #32
    bfb4:	ret
	...

000000000000bfd0 <grub_dl_relocate_symbols>:
    bfd0:	stp	x29, x30, [sp, #-80]!
    bfd4:	mov	x29, sp
    bfd8:	str	x0, [sp, #24]
    bfdc:	str	x1, [sp, #16]
    bfe0:	ldr	x0, [sp, #16]
    bfe4:	str	x0, [sp, #48]
    bfe8:	str	wzr, [sp, #68]
    bfec:	ldr	x0, [sp, #48]
    bff0:	ldr	x0, [x0, #40]
    bff4:	ldr	x1, [sp, #48]
    bff8:	add	x0, x1, x0
    bffc:	str	x0, [sp, #72]
    c000:	b	c0f0 <grub_dl_relocate_symbols+0x120>
    c004:	ldr	x0, [sp, #72]
    c008:	ldr	w0, [x0, #4]
    c00c:	cmp	w0, #0x9
    c010:	b.eq	c024 <grub_dl_relocate_symbols+0x54>  // b.none
    c014:	ldr	x0, [sp, #72]
    c018:	ldr	w0, [x0, #4]
    c01c:	cmp	w0, #0x4
    c020:	b.ne	c0cc <grub_dl_relocate_symbols+0xfc>  // b.any
    c024:	ldr	x0, [sp, #24]
    c028:	ldr	x0, [x0, #24]
    c02c:	str	x0, [sp, #56]
    c030:	b	c058 <grub_dl_relocate_symbols+0x88>
    c034:	ldr	x0, [sp, #56]
    c038:	ldr	w1, [x0, #24]
    c03c:	ldr	x0, [sp, #72]
    c040:	ldr	w0, [x0, #44]
    c044:	cmp	w1, w0
    c048:	b.eq	c068 <grub_dl_relocate_symbols+0x98>  // b.none
    c04c:	ldr	x0, [sp, #56]
    c050:	ldr	x0, [x0]
    c054:	str	x0, [sp, #56]
    c058:	ldr	x0, [sp, #56]
    c05c:	cmp	x0, #0x0
    c060:	b.ne	c034 <grub_dl_relocate_symbols+0x64>  // b.any
    c064:	b	c06c <grub_dl_relocate_symbols+0x9c>
    c068:	nop
    c06c:	ldr	x0, [sp, #56]
    c070:	cmp	x0, #0x0
    c074:	b.eq	c0cc <grub_dl_relocate_symbols+0xfc>  // b.none
    c078:	ldr	x0, [sp, #24]
    c07c:	ldr	x0, [x0, #32]
    c080:	cmp	x0, #0x0
    c084:	b.ne	c0a0 <grub_dl_relocate_symbols+0xd0>  // b.any
    c088:	adrp	x0, 0 <_start>
    c08c:	add	x0, x0, #0x0
    c090:	ldr	x1, [x0]
    c094:	mov	w0, #0x2                   	// #2
    c098:	bl	ce54 <grub_error>
    c09c:	b	c10c <grub_dl_relocate_symbols+0x13c>
    c0a0:	ldr	x3, [sp, #56]
    c0a4:	ldr	x2, [sp, #72]
    c0a8:	ldr	x1, [sp, #16]
    c0ac:	ldr	x0, [sp, #24]
    c0b0:	bl	540 <grub_arch_dl_relocate_symbols>
    c0b4:	str	w0, [sp, #44]
    c0b8:	ldr	w0, [sp, #44]
    c0bc:	cmp	w0, #0x0
    c0c0:	b.eq	c0cc <grub_dl_relocate_symbols+0xfc>  // b.none
    c0c4:	ldr	w0, [sp, #44]
    c0c8:	b	c10c <grub_dl_relocate_symbols+0x13c>
    c0cc:	ldr	w0, [sp, #68]
    c0d0:	add	w0, w0, #0x1
    c0d4:	str	w0, [sp, #68]
    c0d8:	ldr	x0, [sp, #48]
    c0dc:	ldrh	w0, [x0, #58]
    c0e0:	and	x0, x0, #0xffff
    c0e4:	ldr	x1, [sp, #72]
    c0e8:	add	x0, x1, x0
    c0ec:	str	x0, [sp, #72]
    c0f0:	ldr	x0, [sp, #48]
    c0f4:	ldrh	w0, [x0, #60]
    c0f8:	mov	w1, w0
    c0fc:	ldr	w0, [sp, #68]
    c100:	cmp	w0, w1
    c104:	b.cc	c004 <grub_dl_relocate_symbols+0x34>  // b.lo, b.ul, b.last
    c108:	mov	w0, #0x0                   	// #0
    c10c:	ldp	x29, x30, [sp], #80
    c110:	ret
    c114:	nop
	...

000000000000c120 <grub_dl_load_core_noinit>:
    c120:	stp	x29, x30, [sp, #-48]!
    c124:	mov	x29, sp
    c128:	str	x0, [sp, #24]
    c12c:	str	x1, [sp, #16]
    c130:	ldr	x5, [sp, #16]
    c134:	ldr	x4, [sp, #24]
    c138:	adrp	x0, 0 <_start>
    c13c:	add	x0, x0, #0x0
    c140:	ldr	x3, [x0]
    c144:	adrp	x0, 0 <_start>
    c148:	add	x0, x0, #0x0
    c14c:	ldr	x2, [x0]
    c150:	mov	w1, #0x259                 	// #601
    c154:	adrp	x0, 0 <_start>
    c158:	add	x0, x0, #0x0
    c15c:	ldr	x0, [x0]
    c160:	bl	f328 <grub_real_dprintf>
    c164:	ldr	x0, [sp, #24]
    c168:	str	x0, [sp, #40]
    c16c:	ldr	x1, [sp, #16]
    c170:	ldr	x0, [sp, #40]
    c174:	bl	b148 <grub_dl_check_header>
    c178:	cmp	w0, #0x0
    c17c:	b.eq	c188 <grub_dl_load_core_noinit+0x68>  // b.none
    c180:	mov	x0, #0x0                   	// #0
    c184:	b	c388 <grub_dl_load_core_noinit+0x268>
    c188:	ldr	x0, [sp, #40]
    c18c:	ldrh	w0, [x0, #16]
    c190:	cmp	w0, #0x1
    c194:	b.eq	c1b4 <grub_dl_load_core_noinit+0x94>  // b.none
    c198:	adrp	x0, 0 <_start>
    c19c:	add	x0, x0, #0x0
    c1a0:	ldr	x1, [x0]
    c1a4:	mov	w0, #0x2                   	// #2
    c1a8:	bl	ce54 <grub_error>
    c1ac:	mov	x0, #0x0                   	// #0
    c1b0:	b	c388 <grub_dl_load_core_noinit+0x268>
    c1b4:	ldr	x0, [sp, #40]
    c1b8:	ldr	x1, [x0, #40]
    c1bc:	ldr	x0, [sp, #40]
    c1c0:	ldrh	w0, [x0, #58]
    c1c4:	mov	w2, w0
    c1c8:	ldr	x0, [sp, #40]
    c1cc:	ldrh	w0, [x0, #60]
    c1d0:	mul	w0, w2, w0
    c1d4:	mov	w0, w0
    c1d8:	add	x0, x1, x0
    c1dc:	ldr	x1, [sp, #16]
    c1e0:	cmp	x1, x0
    c1e4:	b.cs	c204 <grub_dl_load_core_noinit+0xe4>  // b.hs, b.nlast
    c1e8:	adrp	x0, 0 <_start>
    c1ec:	add	x0, x0, #0x0
    c1f0:	ldr	x1, [x0]
    c1f4:	mov	w0, #0x15                  	// #21
    c1f8:	bl	ce54 <grub_error>
    c1fc:	mov	x0, #0x0                   	// #0
    c200:	b	c388 <grub_dl_load_core_noinit+0x268>
    c204:	mov	x0, #0x78                  	// #120
    c208:	bl	8368 <grub_zalloc>
    c20c:	str	x0, [sp, #32]
    c210:	ldr	x0, [sp, #32]
    c214:	cmp	x0, #0x0
    c218:	b.ne	c224 <grub_dl_load_core_noinit+0x104>  // b.any
    c21c:	mov	x0, #0x0                   	// #0
    c220:	b	c388 <grub_dl_load_core_noinit+0x268>
    c224:	ldr	x0, [sp, #32]
    c228:	mov	w1, #0x1                   	// #1
    c22c:	str	w1, [x0, #8]
    c230:	ldr	x4, [sp, #32]
    c234:	adrp	x0, 0 <_start>
    c238:	add	x0, x0, #0x0
    c23c:	ldr	x3, [x0]
    c240:	adrp	x0, 0 <_start>
    c244:	add	x0, x0, #0x0
    c248:	ldr	x2, [x0]
    c24c:	mov	w1, #0x272                 	// #626
    c250:	adrp	x0, 0 <_start>
    c254:	add	x0, x0, #0x0
    c258:	ldr	x0, [x0]
    c25c:	bl	f328 <grub_real_dprintf>
    c260:	ldr	x0, [sp, #40]
    c264:	bl	bb50 <grub_dl_check_license>
    c268:	cmp	w0, #0x0
    c26c:	b.ne	c2d4 <grub_dl_load_core_noinit+0x1b4>  // b.any
    c270:	ldr	x1, [sp, #40]
    c274:	ldr	x0, [sp, #32]
    c278:	bl	bc50 <grub_dl_resolve_name>
    c27c:	cmp	w0, #0x0
    c280:	b.ne	c2d4 <grub_dl_load_core_noinit+0x1b4>  // b.any
    c284:	ldr	x1, [sp, #40]
    c288:	ldr	x0, [sp, #32]
    c28c:	bl	bd08 <grub_dl_resolve_dependencies>
    c290:	cmp	w0, #0x0
    c294:	b.ne	c2d4 <grub_dl_load_core_noinit+0x1b4>  // b.any
    c298:	ldr	x1, [sp, #40]
    c29c:	ldr	x0, [sp, #32]
    c2a0:	bl	b238 <grub_dl_load_segments>
    c2a4:	cmp	w0, #0x0
    c2a8:	b.ne	c2d4 <grub_dl_load_core_noinit+0x1b4>  // b.any
    c2ac:	ldr	x1, [sp, #40]
    c2b0:	ldr	x0, [sp, #32]
    c2b4:	bl	b600 <grub_dl_resolve_symbols>
    c2b8:	cmp	w0, #0x0
    c2bc:	b.ne	c2d4 <grub_dl_load_core_noinit+0x1b4>  // b.any
    c2c0:	ldr	x1, [sp, #40]
    c2c4:	ldr	x0, [sp, #32]
    c2c8:	bl	bfd0 <grub_dl_relocate_symbols>
    c2cc:	cmp	w0, #0x0
    c2d0:	b.eq	c2ec <grub_dl_load_core_noinit+0x1cc>  // b.none
    c2d4:	ldr	x0, [sp, #32]
    c2d8:	str	xzr, [x0, #56]
    c2dc:	ldr	x0, [sp, #32]
    c2e0:	bl	c648 <grub_dl_unload>
    c2e4:	mov	x0, #0x0                   	// #0
    c2e8:	b	c388 <grub_dl_load_core_noinit+0x268>
    c2ec:	ldr	x0, [sp, #32]
    c2f0:	bl	bf40 <grub_dl_flush_cache>
    c2f4:	ldr	x0, [sp, #32]
    c2f8:	ldr	x0, [x0]
    c2fc:	mov	x4, x0
    c300:	adrp	x0, 0 <_start>
    c304:	add	x0, x0, #0x0
    c308:	ldr	x3, [x0]
    c30c:	adrp	x0, 0 <_start>
    c310:	add	x0, x0, #0x0
    c314:	ldr	x2, [x0]
    c318:	mov	w1, #0x289                 	// #649
    c31c:	adrp	x0, 0 <_start>
    c320:	add	x0, x0, #0x0
    c324:	ldr	x0, [x0]
    c328:	bl	f328 <grub_real_dprintf>
    c32c:	ldr	x0, [sp, #32]
    c330:	ldr	x0, [x0, #48]
    c334:	mov	x4, x0
    c338:	adrp	x0, 0 <_start>
    c33c:	add	x0, x0, #0x0
    c340:	ldr	x3, [x0]
    c344:	adrp	x0, 0 <_start>
    c348:	add	x0, x0, #0x0
    c34c:	ldr	x2, [x0]
    c350:	mov	w1, #0x28a                 	// #650
    c354:	adrp	x0, 0 <_start>
    c358:	add	x0, x0, #0x0
    c35c:	ldr	x0, [x0]
    c360:	bl	f328 <grub_real_dprintf>
    c364:	ldr	x0, [sp, #32]
    c368:	bl	acf0 <grub_dl_add>
    c36c:	cmp	w0, #0x0
    c370:	b.eq	c384 <grub_dl_load_core_noinit+0x264>  // b.none
    c374:	ldr	x0, [sp, #32]
    c378:	bl	c648 <grub_dl_unload>
    c37c:	mov	x0, #0x0                   	// #0
    c380:	b	c388 <grub_dl_load_core_noinit+0x268>
    c384:	ldr	x0, [sp, #32]
    c388:	ldp	x29, x30, [sp], #48
    c38c:	ret
	...

000000000000c3d0 <grub_dl_load_core>:
    c3d0:	stp	x29, x30, [sp, #-48]!
    c3d4:	mov	x29, sp
    c3d8:	str	x0, [sp, #24]
    c3dc:	str	x1, [sp, #16]
    c3e0:	ldr	x1, [sp, #16]
    c3e4:	ldr	x0, [sp, #24]
    c3e8:	bl	c120 <grub_dl_load_core_noinit>
    c3ec:	str	x0, [sp, #40]
    c3f0:	ldr	x0, [sp, #40]
    c3f4:	cmp	x0, #0x0
    c3f8:	b.ne	c404 <grub_dl_load_core+0x34>  // b.any
    c3fc:	mov	x0, #0x0                   	// #0
    c400:	b	c410 <grub_dl_load_core+0x40>
    c404:	ldr	x0, [sp, #40]
    c408:	bl	abf4 <grub_dl_init>
    c40c:	ldr	x0, [sp, #40]
    c410:	ldp	x29, x30, [sp], #48
    c414:	ret

000000000000c418 <grub_dl_load_file>:
    c418:	stp	x29, x30, [sp, #-64]!
    c41c:	mov	x29, sp
    c420:	str	x0, [sp, #24]
    c424:	str	xzr, [sp, #56]
    c428:	str	xzr, [sp, #48]
    c42c:	str	xzr, [sp, #40]
    c430:	mov	w1, #0x1                   	// #1
    c434:	ldr	x0, [sp, #24]
    c438:	bl	d3b0 <grub_file_open>
    c43c:	str	x0, [sp, #56]
    c440:	ldr	x0, [sp, #56]
    c444:	cmp	x0, #0x0
    c448:	b.ne	c454 <grub_dl_load_file+0x3c>  // b.any
    c44c:	mov	x0, #0x0                   	// #0
    c450:	b	c518 <grub_dl_load_file+0x100>
    c454:	ldr	x0, [sp, #56]
    c458:	bl	acd8 <grub_file_size>
    c45c:	str	x0, [sp, #32]
    c460:	ldr	x0, [sp, #32]
    c464:	bl	8348 <grub_malloc>
    c468:	str	x0, [sp, #48]
    c46c:	ldr	x0, [sp, #48]
    c470:	cmp	x0, #0x0
    c474:	b.ne	c488 <grub_dl_load_file+0x70>  // b.any
    c478:	ldr	x0, [sp, #56]
    c47c:	bl	d7f0 <grub_file_close>
    c480:	mov	x0, #0x0                   	// #0
    c484:	b	c518 <grub_dl_load_file+0x100>
    c488:	ldr	x0, [sp, #32]
    c48c:	mov	x2, x0
    c490:	ldr	x1, [sp, #48]
    c494:	ldr	x0, [sp, #56]
    c498:	bl	d658 <grub_file_read>
    c49c:	mov	x1, x0
    c4a0:	ldr	x0, [sp, #32]
    c4a4:	sxtw	x0, w0
    c4a8:	cmp	x1, x0
    c4ac:	b.eq	c4c8 <grub_dl_load_file+0xb0>  // b.none
    c4b0:	ldr	x0, [sp, #56]
    c4b4:	bl	d7f0 <grub_file_close>
    c4b8:	ldr	x0, [sp, #48]
    c4bc:	bl	83ac <grub_free>
    c4c0:	mov	x0, #0x0                   	// #0
    c4c4:	b	c518 <grub_dl_load_file+0x100>
    c4c8:	ldr	x0, [sp, #56]
    c4cc:	bl	d7f0 <grub_file_close>
    c4d0:	ldr	x0, [sp, #32]
    c4d4:	mov	x1, x0
    c4d8:	ldr	x0, [sp, #48]
    c4dc:	bl	c3d0 <grub_dl_load_core>
    c4e0:	str	x0, [sp, #40]
    c4e4:	ldr	x0, [sp, #48]
    c4e8:	bl	83ac <grub_free>
    c4ec:	ldr	x0, [sp, #40]
    c4f0:	cmp	x0, #0x0
    c4f4:	b.ne	c500 <grub_dl_load_file+0xe8>  // b.any
    c4f8:	mov	x0, #0x0                   	// #0
    c4fc:	b	c518 <grub_dl_load_file+0x100>
    c500:	ldr	x0, [sp, #40]
    c504:	ldr	w0, [x0, #8]
    c508:	sub	w1, w0, #0x1
    c50c:	ldr	x0, [sp, #40]
    c510:	str	w1, [x0, #8]
    c514:	ldr	x0, [sp, #40]
    c518:	ldp	x29, x30, [sp], #64
    c51c:	ret

000000000000c520 <grub_dl_load>:
    c520:	stp	x29, x30, [sp, #-64]!
    c524:	mov	x29, sp
    c528:	str	x0, [sp, #24]
    c52c:	adrp	x0, 0 <_start>
    c530:	add	x0, x0, #0x0
    c534:	ldr	x0, [x0]
    c538:	bl	cb00 <grub_env_get>
    c53c:	str	x0, [sp, #56]
    c540:	ldr	x0, [sp, #24]
    c544:	bl	ac60 <grub_dl_get>
    c548:	str	x0, [sp, #48]
    c54c:	ldr	x0, [sp, #48]
    c550:	cmp	x0, #0x0
    c554:	b.eq	c560 <grub_dl_load+0x40>  // b.none
    c558:	ldr	x0, [sp, #48]
    c55c:	b	c61c <grub_dl_load+0xfc>
    c560:	ldr	x0, [sp, #56]
    c564:	cmp	x0, #0x0
    c568:	b.ne	c594 <grub_dl_load+0x74>  // b.any
    c56c:	adrp	x0, 0 <_start>
    c570:	add	x0, x0, #0x0
    c574:	ldr	x2, [x0]
    c578:	adrp	x0, 0 <_start>
    c57c:	add	x0, x0, #0x0
    c580:	ldr	x1, [x0]
    c584:	mov	w0, #0x5                   	// #5
    c588:	bl	ce54 <grub_error>
    c58c:	mov	x0, #0x0                   	// #0
    c590:	b	c61c <grub_dl_load+0xfc>
    c594:	ldr	x2, [sp, #24]
    c598:	ldr	x1, [sp, #56]
    c59c:	adrp	x0, 0 <_start>
    c5a0:	add	x0, x0, #0x0
    c5a4:	ldr	x0, [x0]
    c5a8:	bl	11700 <grub_xasprintf>
    c5ac:	str	x0, [sp, #40]
    c5b0:	ldr	x0, [sp, #40]
    c5b4:	cmp	x0, #0x0
    c5b8:	b.ne	c5c4 <grub_dl_load+0xa4>  // b.any
    c5bc:	mov	x0, #0x0                   	// #0
    c5c0:	b	c61c <grub_dl_load+0xfc>
    c5c4:	ldr	x0, [sp, #40]
    c5c8:	bl	c418 <grub_dl_load_file>
    c5cc:	str	x0, [sp, #48]
    c5d0:	ldr	x0, [sp, #40]
    c5d4:	bl	83ac <grub_free>
    c5d8:	ldr	x0, [sp, #48]
    c5dc:	cmp	x0, #0x0
    c5e0:	b.ne	c5ec <grub_dl_load+0xcc>  // b.any
    c5e4:	mov	x0, #0x0                   	// #0
    c5e8:	b	c61c <grub_dl_load+0xfc>
    c5ec:	ldr	x0, [sp, #48]
    c5f0:	ldr	x0, [x0]
    c5f4:	ldr	x1, [sp, #24]
    c5f8:	bl	f660 <grub_strcmp>
    c5fc:	cmp	w0, #0x0
    c600:	b.eq	c618 <grub_dl_load+0xf8>  // b.none
    c604:	adrp	x0, 0 <_start>
    c608:	add	x0, x0, #0x0
    c60c:	ldr	x1, [x0]
    c610:	mov	w0, #0x2                   	// #2
    c614:	bl	ce54 <grub_error>
    c618:	ldr	x0, [sp, #48]
    c61c:	ldp	x29, x30, [sp], #64
    c620:	ret
    c624:	nop
	...

000000000000c648 <grub_dl_unload>:
    c648:	stp	x29, x30, [sp, #-48]!
    c64c:	mov	x29, sp
    c650:	str	x0, [sp, #24]
    c654:	ldr	x0, [sp, #24]
    c658:	ldr	w0, [x0, #8]
    c65c:	cmp	w0, #0x0
    c660:	b.le	c66c <grub_dl_unload+0x24>
    c664:	mov	w0, #0x0                   	// #0
    c668:	b	c700 <grub_dl_unload+0xb8>
    c66c:	ldr	x0, [sp, #24]
    c670:	ldr	x0, [x0, #56]
    c674:	cmp	x0, #0x0
    c678:	b.eq	c688 <grub_dl_unload+0x40>  // b.none
    c67c:	ldr	x0, [sp, #24]
    c680:	ldr	x0, [x0, #56]
    c684:	blr	x0
    c688:	ldr	x0, [sp, #24]
    c68c:	bl	ad48 <grub_dl_remove>
    c690:	ldr	x0, [sp, #24]
    c694:	bl	aff0 <grub_dl_unregister_symbols>
    c698:	ldr	x0, [sp, #24]
    c69c:	ldr	x0, [x0, #16]
    c6a0:	str	x0, [sp, #40]
    c6a4:	b	c6d0 <grub_dl_unload+0x88>
    c6a8:	ldr	x0, [sp, #40]
    c6ac:	ldr	x0, [x0]
    c6b0:	str	x0, [sp, #32]
    c6b4:	ldr	x0, [sp, #40]
    c6b8:	ldr	x0, [x0, #8]
    c6bc:	bl	c648 <grub_dl_unload>
    c6c0:	ldr	x0, [sp, #40]
    c6c4:	bl	83ac <grub_free>
    c6c8:	ldr	x0, [sp, #32]
    c6cc:	str	x0, [sp, #40]
    c6d0:	ldr	x0, [sp, #40]
    c6d4:	cmp	x0, #0x0
    c6d8:	b.ne	c6a8 <grub_dl_unload+0x60>  // b.any
    c6dc:	ldr	x0, [sp, #24]
    c6e0:	ldr	x0, [x0, #96]
    c6e4:	bl	83ac <grub_free>
    c6e8:	ldr	x0, [sp, #24]
    c6ec:	ldr	x0, [x0]
    c6f0:	bl	83ac <grub_free>
    c6f4:	ldr	x0, [sp, #24]
    c6f8:	bl	83ac <grub_free>
    c6fc:	mov	w0, #0x1                   	// #1
    c700:	ldp	x29, x30, [sp], #48
    c704:	ret

000000000000c708 <grub_dl_unload_unneeded>:
    c708:	stp	x29, x30, [sp, #-32]!
    c70c:	mov	x29, sp
    c710:	adrp	x0, 0 <_start>
    c714:	add	x0, x0, #0x0
    c718:	ldr	x0, [x0]
    c71c:	ldr	x0, [x0]
    c720:	str	x0, [sp, #24]
    c724:	b	c75c <grub_dl_unload_unneeded+0x54>
    c728:	ldr	x0, [sp, #24]
    c72c:	bl	c648 <grub_dl_unload>
    c730:	cmp	w0, #0x0
    c734:	b.eq	c750 <grub_dl_unload_unneeded+0x48>  // b.none
    c738:	adrp	x0, 0 <_start>
    c73c:	add	x0, x0, #0x0
    c740:	ldr	x0, [x0]
    c744:	ldr	x0, [x0]
    c748:	str	x0, [sp, #24]
    c74c:	b	c75c <grub_dl_unload_unneeded+0x54>
    c750:	ldr	x0, [sp, #24]
    c754:	ldr	x0, [x0, #112]
    c758:	str	x0, [sp, #24]
    c75c:	ldr	x0, [sp, #24]
    c760:	cmp	x0, #0x0
    c764:	b.ne	c728 <grub_dl_unload_unneeded+0x20>  // b.any
    c768:	nop
    c76c:	nop
    c770:	ldp	x29, x30, [sp], #32
    c774:	ret
	...

000000000000c780 <grub_env_hashval>:
    c780:	sub	sp, sp, #0x20
    c784:	str	x0, [sp, #8]
    c788:	str	wzr, [sp, #28]
    c78c:	b	c7c0 <grub_env_hashval+0x40>
    c790:	ldr	x0, [sp, #8]
    c794:	add	x1, x0, #0x1
    c798:	str	x1, [sp, #8]
    c79c:	ldrb	w0, [x0]
    c7a0:	mov	w1, w0
    c7a4:	mov	w0, w1
    c7a8:	lsl	w0, w0, #2
    c7ac:	add	w0, w0, w1
    c7b0:	mov	w1, w0
    c7b4:	ldr	w0, [sp, #28]
    c7b8:	add	w0, w0, w1
    c7bc:	str	w0, [sp, #28]
    c7c0:	ldr	x0, [sp, #8]
    c7c4:	ldrb	w0, [x0]
    c7c8:	cmp	w0, #0x0
    c7cc:	b.ne	c790 <grub_env_hashval+0x10>  // b.any
    c7d0:	ldr	w1, [sp, #28]
    c7d4:	mov	w0, #0xec4f                	// #60495
    c7d8:	movk	w0, #0x4ec4, lsl #16
    c7dc:	umull	x0, w1, w0
    c7e0:	lsr	x0, x0, #32
    c7e4:	lsr	w0, w0, #2
    c7e8:	mov	w2, #0xd                   	// #13
    c7ec:	mul	w0, w0, w2
    c7f0:	sub	w0, w1, w0
    c7f4:	add	sp, sp, #0x20
    c7f8:	ret

000000000000c7fc <grub_env_find>:
    c7fc:	stp	x29, x30, [sp, #-48]!
    c800:	mov	x29, sp
    c804:	str	x0, [sp, #24]
    c808:	ldr	x0, [sp, #24]
    c80c:	bl	c780 <grub_env_hashval>
    c810:	str	w0, [sp, #36]
    c814:	adrp	x0, 0 <_start>
    c818:	add	x0, x0, #0x0
    c81c:	ldr	x0, [x0]
    c820:	ldr	x0, [x0]
    c824:	ldrsw	x1, [sp, #36]
    c828:	ldr	x0, [x0, x1, lsl #3]
    c82c:	str	x0, [sp, #40]
    c830:	b	c860 <grub_env_find+0x64>
    c834:	ldr	x0, [sp, #40]
    c838:	ldr	x0, [x0]
    c83c:	ldr	x1, [sp, #24]
    c840:	bl	f660 <grub_strcmp>
    c844:	cmp	w0, #0x0
    c848:	b.ne	c854 <grub_env_find+0x58>  // b.any
    c84c:	ldr	x0, [sp, #40]
    c850:	b	c870 <grub_env_find+0x74>
    c854:	ldr	x0, [sp, #40]
    c858:	ldr	x0, [x0, #32]
    c85c:	str	x0, [sp, #40]
    c860:	ldr	x0, [sp, #40]
    c864:	cmp	x0, #0x0
    c868:	b.ne	c834 <grub_env_find+0x38>  // b.any
    c86c:	mov	x0, #0x0                   	// #0
    c870:	ldp	x29, x30, [sp], #48
    c874:	ret
	...

000000000000c880 <grub_env_insert>:
    c880:	stp	x29, x30, [sp, #-48]!
    c884:	mov	x29, sp
    c888:	str	x0, [sp, #24]
    c88c:	str	x1, [sp, #16]
    c890:	ldr	x0, [sp, #16]
    c894:	ldr	x0, [x0]
    c898:	bl	c780 <grub_env_hashval>
    c89c:	str	w0, [sp, #44]
    c8a0:	ldrsw	x0, [sp, #44]
    c8a4:	lsl	x0, x0, #3
    c8a8:	ldr	x1, [sp, #24]
    c8ac:	add	x1, x1, x0
    c8b0:	ldr	x0, [sp, #16]
    c8b4:	str	x1, [x0, #40]
    c8b8:	ldr	x0, [sp, #24]
    c8bc:	ldrsw	x1, [sp, #44]
    c8c0:	ldr	x1, [x0, x1, lsl #3]
    c8c4:	ldr	x0, [sp, #16]
    c8c8:	str	x1, [x0, #32]
    c8cc:	ldr	x0, [sp, #16]
    c8d0:	ldr	x0, [x0, #32]
    c8d4:	cmp	x0, #0x0
    c8d8:	b.eq	c8f0 <grub_env_insert+0x70>  // b.none
    c8dc:	ldr	x0, [sp, #16]
    c8e0:	ldr	x0, [x0, #32]
    c8e4:	ldr	x1, [sp, #16]
    c8e8:	add	x1, x1, #0x20
    c8ec:	str	x1, [x0, #40]
    c8f0:	ldr	x0, [sp, #24]
    c8f4:	ldrsw	x1, [sp, #44]
    c8f8:	ldr	x2, [sp, #16]
    c8fc:	str	x2, [x0, x1, lsl #3]
    c900:	nop
    c904:	ldp	x29, x30, [sp], #48
    c908:	ret

000000000000c90c <grub_env_remove>:
    c90c:	sub	sp, sp, #0x10
    c910:	str	x0, [sp, #8]
    c914:	ldr	x0, [sp, #8]
    c918:	ldr	x0, [x0, #40]
    c91c:	ldr	x1, [sp, #8]
    c920:	ldr	x1, [x1, #32]
    c924:	str	x1, [x0]
    c928:	ldr	x0, [sp, #8]
    c92c:	ldr	x0, [x0, #32]
    c930:	cmp	x0, #0x0
    c934:	b.eq	c94c <grub_env_remove+0x40>  // b.none
    c938:	ldr	x0, [sp, #8]
    c93c:	ldr	x0, [x0, #32]
    c940:	ldr	x1, [sp, #8]
    c944:	ldr	x1, [x1, #40]
    c948:	str	x1, [x0, #40]
    c94c:	nop
    c950:	add	sp, sp, #0x10
    c954:	ret

000000000000c958 <grub_env_set>:
    c958:	stp	x29, x30, [sp, #-48]!
    c95c:	mov	x29, sp
    c960:	str	x0, [sp, #24]
    c964:	str	x1, [sp, #16]
    c968:	ldr	x0, [sp, #24]
    c96c:	bl	c7fc <grub_env_find>
    c970:	str	x0, [sp, #40]
    c974:	ldr	x0, [sp, #40]
    c978:	cmp	x0, #0x0
    c97c:	b.eq	ca14 <grub_env_set+0xbc>  // b.none
    c980:	ldr	x0, [sp, #40]
    c984:	ldr	x0, [x0, #8]
    c988:	str	x0, [sp, #32]
    c98c:	ldr	x0, [sp, #40]
    c990:	ldr	x0, [x0, #24]
    c994:	cmp	x0, #0x0
    c998:	b.eq	c9c0 <grub_env_set+0x68>  // b.none
    c99c:	ldr	x0, [sp, #40]
    c9a0:	ldr	x2, [x0, #24]
    c9a4:	ldr	x1, [sp, #16]
    c9a8:	ldr	x0, [sp, #40]
    c9ac:	blr	x2
    c9b0:	mov	x1, x0
    c9b4:	ldr	x0, [sp, #40]
    c9b8:	str	x1, [x0, #8]
    c9bc:	b	c9d4 <grub_env_set+0x7c>
    c9c0:	ldr	x0, [sp, #16]
    c9c4:	bl	fc40 <grub_strdup>
    c9c8:	mov	x1, x0
    c9cc:	ldr	x0, [sp, #40]
    c9d0:	str	x1, [x0, #8]
    c9d4:	ldr	x0, [sp, #40]
    c9d8:	ldr	x0, [x0, #8]
    c9dc:	cmp	x0, #0x0
    c9e0:	b.ne	ca04 <grub_env_set+0xac>  // b.any
    c9e4:	ldr	x0, [sp, #40]
    c9e8:	ldr	x1, [sp, #32]
    c9ec:	str	x1, [x0, #8]
    c9f0:	adrp	x0, 0 <_start>
    c9f4:	add	x0, x0, #0x0
    c9f8:	ldr	x0, [x0]
    c9fc:	ldr	w0, [x0]
    ca00:	b	cae4 <grub_env_set+0x18c>
    ca04:	ldr	x0, [sp, #32]
    ca08:	bl	83ac <grub_free>
    ca0c:	mov	w0, #0x0                   	// #0
    ca10:	b	cae4 <grub_env_set+0x18c>
    ca14:	mov	x0, #0x40                  	// #64
    ca18:	bl	8368 <grub_zalloc>
    ca1c:	str	x0, [sp, #40]
    ca20:	ldr	x0, [sp, #40]
    ca24:	cmp	x0, #0x0
    ca28:	b.ne	ca40 <grub_env_set+0xe8>  // b.any
    ca2c:	adrp	x0, 0 <_start>
    ca30:	add	x0, x0, #0x0
    ca34:	ldr	x0, [x0]
    ca38:	ldr	w0, [x0]
    ca3c:	b	cae4 <grub_env_set+0x18c>
    ca40:	ldr	x0, [sp, #24]
    ca44:	bl	fc40 <grub_strdup>
    ca48:	mov	x1, x0
    ca4c:	ldr	x0, [sp, #40]
    ca50:	str	x1, [x0]
    ca54:	ldr	x0, [sp, #40]
    ca58:	ldr	x0, [x0]
    ca5c:	cmp	x0, #0x0
    ca60:	b.eq	caa8 <grub_env_set+0x150>  // b.none
    ca64:	ldr	x0, [sp, #16]
    ca68:	bl	fc40 <grub_strdup>
    ca6c:	mov	x1, x0
    ca70:	ldr	x0, [sp, #40]
    ca74:	str	x1, [x0, #8]
    ca78:	ldr	x0, [sp, #40]
    ca7c:	ldr	x0, [x0, #8]
    ca80:	cmp	x0, #0x0
    ca84:	b.eq	cab0 <grub_env_set+0x158>  // b.none
    ca88:	adrp	x0, 0 <_start>
    ca8c:	add	x0, x0, #0x0
    ca90:	ldr	x0, [x0]
    ca94:	ldr	x0, [x0]
    ca98:	ldr	x1, [sp, #40]
    ca9c:	bl	c880 <grub_env_insert>
    caa0:	mov	w0, #0x0                   	// #0
    caa4:	b	cae4 <grub_env_set+0x18c>
    caa8:	nop
    caac:	b	cab4 <grub_env_set+0x15c>
    cab0:	nop
    cab4:	ldr	x0, [sp, #40]
    cab8:	ldr	x0, [x0]
    cabc:	bl	83ac <grub_free>
    cac0:	ldr	x0, [sp, #40]
    cac4:	ldr	x0, [x0, #8]
    cac8:	bl	83ac <grub_free>
    cacc:	ldr	x0, [sp, #40]
    cad0:	bl	83ac <grub_free>
    cad4:	adrp	x0, 0 <_start>
    cad8:	add	x0, x0, #0x0
    cadc:	ldr	x0, [x0]
    cae0:	ldr	w0, [x0]
    cae4:	ldp	x29, x30, [sp], #48
    cae8:	ret
    caec:	nop
	...

000000000000cb00 <grub_env_get>:
    cb00:	stp	x29, x30, [sp, #-48]!
    cb04:	mov	x29, sp
    cb08:	str	x0, [sp, #24]
    cb0c:	ldr	x0, [sp, #24]
    cb10:	bl	c7fc <grub_env_find>
    cb14:	str	x0, [sp, #40]
    cb18:	ldr	x0, [sp, #40]
    cb1c:	cmp	x0, #0x0
    cb20:	b.ne	cb2c <grub_env_get+0x2c>  // b.any
    cb24:	mov	x0, #0x0                   	// #0
    cb28:	b	cb64 <grub_env_get+0x64>
    cb2c:	ldr	x0, [sp, #40]
    cb30:	ldr	x0, [x0, #16]
    cb34:	cmp	x0, #0x0
    cb38:	b.eq	cb5c <grub_env_get+0x5c>  // b.none
    cb3c:	ldr	x0, [sp, #40]
    cb40:	ldr	x2, [x0, #16]
    cb44:	ldr	x0, [sp, #40]
    cb48:	ldr	x0, [x0, #8]
    cb4c:	mov	x1, x0
    cb50:	ldr	x0, [sp, #40]
    cb54:	blr	x2
    cb58:	b	cb64 <grub_env_get+0x64>
    cb5c:	ldr	x0, [sp, #40]
    cb60:	ldr	x0, [x0, #8]
    cb64:	ldp	x29, x30, [sp], #48
    cb68:	ret

000000000000cb6c <grub_env_unset>:
    cb6c:	stp	x29, x30, [sp, #-48]!
    cb70:	mov	x29, sp
    cb74:	str	x0, [sp, #24]
    cb78:	ldr	x0, [sp, #24]
    cb7c:	bl	c7fc <grub_env_find>
    cb80:	str	x0, [sp, #40]
    cb84:	ldr	x0, [sp, #40]
    cb88:	cmp	x0, #0x0
    cb8c:	b.eq	cbf4 <grub_env_unset+0x88>  // b.none
    cb90:	ldr	x0, [sp, #40]
    cb94:	ldr	x0, [x0, #16]
    cb98:	cmp	x0, #0x0
    cb9c:	b.ne	cbb0 <grub_env_unset+0x44>  // b.any
    cba0:	ldr	x0, [sp, #40]
    cba4:	ldr	x0, [x0, #24]
    cba8:	cmp	x0, #0x0
    cbac:	b.eq	cbc8 <grub_env_unset+0x5c>  // b.none
    cbb0:	adrp	x0, 0 <_start>
    cbb4:	add	x0, x0, #0x0
    cbb8:	ldr	x1, [x0]
    cbbc:	ldr	x0, [sp, #24]
    cbc0:	bl	c958 <grub_env_set>
    cbc4:	b	cbf8 <grub_env_unset+0x8c>
    cbc8:	ldr	x0, [sp, #40]
    cbcc:	bl	c90c <grub_env_remove>
    cbd0:	ldr	x0, [sp, #40]
    cbd4:	ldr	x0, [x0]
    cbd8:	bl	83ac <grub_free>
    cbdc:	ldr	x0, [sp, #40]
    cbe0:	ldr	x0, [x0, #8]
    cbe4:	bl	83ac <grub_free>
    cbe8:	ldr	x0, [sp, #40]
    cbec:	bl	83ac <grub_free>
    cbf0:	b	cbf8 <grub_env_unset+0x8c>
    cbf4:	nop
    cbf8:	ldp	x29, x30, [sp], #48
    cbfc:	ret
	...

000000000000cc08 <grub_env_update_get_sorted>:
    cc08:	stp	x29, x30, [sp, #-64]!
    cc0c:	mov	x29, sp
    cc10:	str	xzr, [sp, #24]
    cc14:	str	wzr, [sp, #60]
    cc18:	b	cce8 <grub_env_update_get_sorted+0xe0>
    cc1c:	adrp	x0, 0 <_start>
    cc20:	add	x0, x0, #0x0
    cc24:	ldr	x0, [x0]
    cc28:	ldr	x0, [x0]
    cc2c:	ldrsw	x1, [sp, #60]
    cc30:	ldr	x0, [x0, x1, lsl #3]
    cc34:	str	x0, [sp, #48]
    cc38:	b	ccd0 <grub_env_update_get_sorted+0xc8>
    cc3c:	add	x0, sp, #0x18
    cc40:	str	x0, [sp, #32]
    cc44:	ldr	x0, [sp, #32]
    cc48:	ldr	x0, [x0]
    cc4c:	str	x0, [sp, #40]
    cc50:	b	cc94 <grub_env_update_get_sorted+0x8c>
    cc54:	ldr	x0, [sp, #40]
    cc58:	ldr	x2, [x0]
    cc5c:	ldr	x0, [sp, #48]
    cc60:	ldr	x0, [x0]
    cc64:	mov	x1, x0
    cc68:	mov	x0, x2
    cc6c:	bl	f660 <grub_strcmp>
    cc70:	cmp	w0, #0x0
    cc74:	b.gt	cca4 <grub_env_update_get_sorted+0x9c>
    cc78:	ldr	x0, [sp, #32]
    cc7c:	ldr	x0, [x0]
    cc80:	add	x0, x0, #0x30
    cc84:	str	x0, [sp, #32]
    cc88:	ldr	x0, [sp, #32]
    cc8c:	ldr	x0, [x0]
    cc90:	str	x0, [sp, #40]
    cc94:	ldr	x0, [sp, #40]
    cc98:	cmp	x0, #0x0
    cc9c:	b.ne	cc54 <grub_env_update_get_sorted+0x4c>  // b.any
    cca0:	b	cca8 <grub_env_update_get_sorted+0xa0>
    cca4:	nop
    cca8:	ldr	x0, [sp, #32]
    ccac:	ldr	x1, [x0]
    ccb0:	ldr	x0, [sp, #48]
    ccb4:	str	x1, [x0, #48]
    ccb8:	ldr	x0, [sp, #32]
    ccbc:	ldr	x1, [sp, #48]
    ccc0:	str	x1, [x0]
    ccc4:	ldr	x0, [sp, #48]
    ccc8:	ldr	x0, [x0, #32]
    cccc:	str	x0, [sp, #48]
    ccd0:	ldr	x0, [sp, #48]
    ccd4:	cmp	x0, #0x0
    ccd8:	b.ne	cc3c <grub_env_update_get_sorted+0x34>  // b.any
    ccdc:	ldr	w0, [sp, #60]
    cce0:	add	w0, w0, #0x1
    cce4:	str	w0, [sp, #60]
    cce8:	ldr	w0, [sp, #60]
    ccec:	cmp	w0, #0xc
    ccf0:	b.le	cc1c <grub_env_update_get_sorted+0x14>
    ccf4:	ldr	x0, [sp, #24]
    ccf8:	ldp	x29, x30, [sp], #64
    ccfc:	ret
	...

000000000000cd08 <grub_register_variable_hook>:
    cd08:	stp	x29, x30, [sp, #-64]!
    cd0c:	mov	x29, sp
    cd10:	str	x0, [sp, #40]
    cd14:	str	x1, [sp, #32]
    cd18:	str	x2, [sp, #24]
    cd1c:	ldr	x0, [sp, #40]
    cd20:	bl	c7fc <grub_env_find>
    cd24:	str	x0, [sp, #56]
    cd28:	ldr	x0, [sp, #56]
    cd2c:	cmp	x0, #0x0
    cd30:	b.ne	cd70 <grub_register_variable_hook+0x68>  // b.any
    cd34:	adrp	x0, 0 <_start>
    cd38:	add	x0, x0, #0x0
    cd3c:	ldr	x1, [x0]
    cd40:	ldr	x0, [sp, #40]
    cd44:	bl	c958 <grub_env_set>
    cd48:	cmp	w0, #0x0
    cd4c:	b.eq	cd64 <grub_register_variable_hook+0x5c>  // b.none
    cd50:	adrp	x0, 0 <_start>
    cd54:	add	x0, x0, #0x0
    cd58:	ldr	x0, [x0]
    cd5c:	ldr	w0, [x0]
    cd60:	b	cd8c <grub_register_variable_hook+0x84>
    cd64:	ldr	x0, [sp, #40]
    cd68:	bl	c7fc <grub_env_find>
    cd6c:	str	x0, [sp, #56]
    cd70:	ldr	x0, [sp, #56]
    cd74:	ldr	x1, [sp, #32]
    cd78:	str	x1, [x0, #16]
    cd7c:	ldr	x0, [sp, #56]
    cd80:	ldr	x1, [sp, #24]
    cd84:	str	x1, [x0, #24]
    cd88:	mov	w0, #0x0                   	// #0
    cd8c:	ldp	x29, x30, [sp], #64
    cd90:	ret
    cd94:	nop
	...

000000000000cda8 <grub_env_export>:
    cda8:	stp	x29, x30, [sp, #-48]!
    cdac:	mov	x29, sp
    cdb0:	str	x0, [sp, #24]
    cdb4:	ldr	x0, [sp, #24]
    cdb8:	bl	c7fc <grub_env_find>
    cdbc:	str	x0, [sp, #40]
    cdc0:	ldr	x0, [sp, #40]
    cdc4:	cmp	x0, #0x0
    cdc8:	b.ne	ce04 <grub_env_export+0x5c>  // b.any
    cdcc:	adrp	x0, 0 <_start>
    cdd0:	add	x0, x0, #0x0
    cdd4:	ldr	x1, [x0]
    cdd8:	ldr	x0, [sp, #24]
    cddc:	bl	c958 <grub_env_set>
    cde0:	str	w0, [sp, #36]
    cde4:	ldr	w0, [sp, #36]
    cde8:	cmp	w0, #0x0
    cdec:	b.eq	cdf8 <grub_env_export+0x50>  // b.none
    cdf0:	ldr	w0, [sp, #36]
    cdf4:	b	ce14 <grub_env_export+0x6c>
    cdf8:	ldr	x0, [sp, #24]
    cdfc:	bl	c7fc <grub_env_find>
    ce00:	str	x0, [sp, #40]
    ce04:	ldr	x0, [sp, #40]
    ce08:	mov	w1, #0x1                   	// #1
    ce0c:	str	w1, [x0, #56]
    ce10:	mov	w0, #0x0                   	// #0
    ce14:	ldp	x29, x30, [sp], #48
    ce18:	ret
    ce1c:	nop
	...

000000000000ce28 <grub_memcpy>:
    ce28:	stp	x29, x30, [sp, #-48]!
    ce2c:	mov	x29, sp
    ce30:	str	x0, [sp, #40]
    ce34:	str	x1, [sp, #32]
    ce38:	str	x2, [sp, #24]
    ce3c:	ldr	x2, [sp, #24]
    ce40:	ldr	x1, [sp, #32]
    ce44:	ldr	x0, [sp, #40]
    ce48:	bl	f08c <grub_memmove>
    ce4c:	ldp	x29, x30, [sp], #48
    ce50:	ret

000000000000ce54 <grub_error>:
    ce54:	stp	x29, x30, [sp, #-160]!
    ce58:	mov	x29, sp
    ce5c:	str	w0, [sp, #60]
    ce60:	str	x1, [sp, #48]
    ce64:	str	x2, [sp, #112]
    ce68:	str	x3, [sp, #120]
    ce6c:	str	x4, [sp, #128]
    ce70:	str	x5, [sp, #136]
    ce74:	str	x6, [sp, #144]
    ce78:	str	x7, [sp, #152]
    ce7c:	adrp	x0, 0 <_start>
    ce80:	add	x0, x0, #0x0
    ce84:	ldr	x0, [x0]
    ce88:	ldr	w1, [sp, #60]
    ce8c:	str	w1, [x0]
    ce90:	add	x0, sp, #0xa0
    ce94:	str	x0, [sp, #72]
    ce98:	add	x0, sp, #0xa0
    ce9c:	str	x0, [sp, #80]
    cea0:	add	x0, sp, #0x70
    cea4:	str	x0, [sp, #88]
    cea8:	mov	w0, #0xffffffd0            	// #-48
    ceac:	str	w0, [sp, #96]
    ceb0:	str	wzr, [sp, #100]
    ceb4:	ldr	x0, [sp, #48]
    ceb8:	str	x0, [sp, #104]
    cebc:	adrp	x0, 0 <_start>
    cec0:	add	x0, x0, #0x0
    cec4:	ldr	x0, [x0]
    cec8:	ldr	x1, [x0]
    cecc:	ldr	x0, [sp, #104]
    ced0:	blr	x1
    ced4:	mov	x4, x0
    ced8:	add	x2, sp, #0x10
    cedc:	add	x3, sp, #0x48
    cee0:	ldp	x0, x1, [x3]
    cee4:	stp	x0, x1, [x2]
    cee8:	ldp	x0, x1, [x3, #16]
    ceec:	stp	x0, x1, [x2, #16]
    cef0:	add	x0, sp, #0x10
    cef4:	mov	x3, x0
    cef8:	mov	x2, x4
    cefc:	mov	x1, #0x100                 	// #256
    cf00:	adrp	x0, 0 <_start>
    cf04:	add	x0, x0, #0x0
    cf08:	ldr	x0, [x0]
    cf0c:	bl	114e8 <grub_vsnprintf>
    cf10:	ldr	w0, [sp, #60]
    cf14:	ldp	x29, x30, [sp], #160
    cf18:	ret
    cf1c:	nop
	...

000000000000cf38 <grub_error_push>:
    cf38:	stp	x29, x30, [sp, #-16]!
    cf3c:	mov	x29, sp
    cf40:	adrp	x0, 0 <_start>
    cf44:	add	x0, x0, #0x0
    cf48:	ldr	x0, [x0]
    cf4c:	ldr	w0, [x0]
    cf50:	cmp	w0, #0x9
    cf54:	b.gt	d018 <grub_error_push+0xe0>
    cf58:	adrp	x0, 0 <_start>
    cf5c:	add	x0, x0, #0x0
    cf60:	ldr	x0, [x0]
    cf64:	ldr	w1, [x0]
    cf68:	adrp	x0, 0 <_start>
    cf6c:	add	x0, x0, #0x0
    cf70:	ldr	x0, [x0]
    cf74:	ldr	w2, [x0]
    cf78:	adrp	x0, 0 <_start>
    cf7c:	add	x0, x0, #0x0
    cf80:	ldr	x3, [x0]
    cf84:	sxtw	x1, w1
    cf88:	mov	x0, x1
    cf8c:	lsl	x0, x0, #6
    cf90:	add	x0, x0, x1
    cf94:	lsl	x0, x0, #2
    cf98:	add	x0, x3, x0
    cf9c:	str	w2, [x0]
    cfa0:	adrp	x0, 0 <_start>
    cfa4:	add	x0, x0, #0x0
    cfa8:	ldr	x0, [x0]
    cfac:	ldr	w0, [x0]
    cfb0:	sxtw	x1, w0
    cfb4:	mov	x0, x1
    cfb8:	lsl	x0, x0, #6
    cfbc:	add	x0, x0, x1
    cfc0:	lsl	x0, x0, #2
    cfc4:	adrp	x1, 0 <_start>
    cfc8:	add	x1, x1, #0x0
    cfcc:	ldr	x1, [x1]
    cfd0:	add	x0, x0, x1
    cfd4:	add	x3, x0, #0x4
    cfd8:	mov	x2, #0x100                 	// #256
    cfdc:	adrp	x0, 0 <_start>
    cfe0:	add	x0, x0, #0x0
    cfe4:	ldr	x1, [x0]
    cfe8:	mov	x0, x3
    cfec:	bl	ce28 <grub_memcpy>
    cff0:	adrp	x0, 0 <_start>
    cff4:	add	x0, x0, #0x0
    cff8:	ldr	x0, [x0]
    cffc:	ldr	w0, [x0]
    d000:	add	w1, w0, #0x1
    d004:	adrp	x0, 0 <_start>
    d008:	add	x0, x0, #0x0
    d00c:	ldr	x0, [x0]
    d010:	str	w1, [x0]
    d014:	b	d02c <grub_error_push+0xf4>
    d018:	adrp	x0, 0 <_start>
    d01c:	add	x0, x0, #0x0
    d020:	ldr	x0, [x0]
    d024:	mov	w1, #0x1                   	// #1
    d028:	str	w1, [x0]
    d02c:	adrp	x0, 0 <_start>
    d030:	add	x0, x0, #0x0
    d034:	ldr	x0, [x0]
    d038:	str	wzr, [x0]
    d03c:	nop
    d040:	ldp	x29, x30, [sp], #16
    d044:	ret
	...

000000000000d070 <grub_error_pop>:
    d070:	stp	x29, x30, [sp, #-16]!
    d074:	mov	x29, sp
    d078:	adrp	x0, 0 <_start>
    d07c:	add	x0, x0, #0x0
    d080:	ldr	x0, [x0]
    d084:	ldr	w0, [x0]
    d088:	cmp	w0, #0x0
    d08c:	b.le	d154 <grub_error_pop+0xe4>
    d090:	adrp	x0, 0 <_start>
    d094:	add	x0, x0, #0x0
    d098:	ldr	x0, [x0]
    d09c:	ldr	w0, [x0]
    d0a0:	sub	w1, w0, #0x1
    d0a4:	adrp	x0, 0 <_start>
    d0a8:	add	x0, x0, #0x0
    d0ac:	ldr	x0, [x0]
    d0b0:	str	w1, [x0]
    d0b4:	adrp	x0, 0 <_start>
    d0b8:	add	x0, x0, #0x0
    d0bc:	ldr	x0, [x0]
    d0c0:	ldr	w1, [x0]
    d0c4:	adrp	x0, 0 <_start>
    d0c8:	add	x0, x0, #0x0
    d0cc:	ldr	x2, [x0]
    d0d0:	sxtw	x1, w1
    d0d4:	mov	x0, x1
    d0d8:	lsl	x0, x0, #6
    d0dc:	add	x0, x0, x1
    d0e0:	lsl	x0, x0, #2
    d0e4:	add	x0, x2, x0
    d0e8:	ldr	w1, [x0]
    d0ec:	adrp	x0, 0 <_start>
    d0f0:	add	x0, x0, #0x0
    d0f4:	ldr	x0, [x0]
    d0f8:	str	w1, [x0]
    d0fc:	adrp	x0, 0 <_start>
    d100:	add	x0, x0, #0x0
    d104:	ldr	x0, [x0]
    d108:	ldr	w0, [x0]
    d10c:	sxtw	x1, w0
    d110:	mov	x0, x1
    d114:	lsl	x0, x0, #6
    d118:	add	x0, x0, x1
    d11c:	lsl	x0, x0, #2
    d120:	adrp	x1, 0 <_start>
    d124:	add	x1, x1, #0x0
    d128:	ldr	x1, [x1]
    d12c:	add	x0, x0, x1
    d130:	add	x0, x0, #0x4
    d134:	mov	x2, #0x100                 	// #256
    d138:	mov	x1, x0
    d13c:	adrp	x0, 0 <_start>
    d140:	add	x0, x0, #0x0
    d144:	ldr	x0, [x0]
    d148:	bl	ce28 <grub_memcpy>
    d14c:	mov	w0, #0x1                   	// #1
    d150:	b	d168 <grub_error_pop+0xf8>
    d154:	adrp	x0, 0 <_start>
    d158:	add	x0, x0, #0x0
    d15c:	ldr	x0, [x0]
    d160:	str	wzr, [x0]
    d164:	mov	w0, #0x0                   	// #0
    d168:	ldp	x29, x30, [sp], #16
    d16c:	ret
	...

000000000000d190 <grub_print_error>:
    d190:	stp	x29, x30, [sp, #-32]!
    d194:	mov	x29, sp
    d198:	adrp	x0, 0 <_start>
    d19c:	add	x0, x0, #0x0
    d1a0:	ldr	x0, [x0]
    d1a4:	ldr	w0, [x0]
    d1a8:	cmp	w0, #0x0
    d1ac:	b.eq	d214 <grub_print_error+0x84>  // b.none
    d1b0:	adrp	x0, 0 <_start>
    d1b4:	add	x0, x0, #0x0
    d1b8:	ldr	x0, [x0]
    d1bc:	str	x0, [sp, #24]
    d1c0:	adrp	x0, 0 <_start>
    d1c4:	add	x0, x0, #0x0
    d1c8:	ldr	x0, [x0]
    d1cc:	ldr	x1, [x0]
    d1d0:	ldr	x0, [sp, #24]
    d1d4:	blr	x1
    d1d8:	mov	x2, x0
    d1dc:	adrp	x0, 0 <_start>
    d1e0:	add	x0, x0, #0x0
    d1e4:	ldr	x1, [x0]
    d1e8:	mov	x0, x2
    d1ec:	bl	f1b4 <grub_err_printf>
    d1f0:	adrp	x0, 0 <_start>
    d1f4:	add	x0, x0, #0x0
    d1f8:	ldr	x0, [x0]
    d1fc:	ldr	w0, [x0]
    d200:	add	w1, w0, #0x1
    d204:	adrp	x0, 0 <_start>
    d208:	add	x0, x0, #0x0
    d20c:	ldr	x0, [x0]
    d210:	str	w1, [x0]
    d214:	bl	d070 <grub_error_pop>
    d218:	cmp	w0, #0x0
    d21c:	b.ne	d198 <grub_print_error+0x8>  // b.any
    d220:	adrp	x0, 0 <_start>
    d224:	add	x0, x0, #0x0
    d228:	ldr	x0, [x0]
    d22c:	ldr	w0, [x0]
    d230:	cmp	w0, #0x0
    d234:	b.eq	d258 <grub_print_error+0xc8>  // b.none
    d238:	adrp	x0, 0 <_start>
    d23c:	add	x0, x0, #0x0
    d240:	ldr	x0, [x0]
    d244:	bl	f1b4 <grub_err_printf>
    d248:	adrp	x0, 0 <_start>
    d24c:	add	x0, x0, #0x0
    d250:	ldr	x0, [x0]
    d254:	str	wzr, [x0]
    d258:	nop
    d25c:	ldp	x29, x30, [sp], #32
    d260:	ret
    d264:	nop
	...

000000000000d2a0 <grub_memcpy>:
    d2a0:	stp	x29, x30, [sp, #-48]!
    d2a4:	mov	x29, sp
    d2a8:	str	x0, [sp, #40]
    d2ac:	str	x1, [sp, #32]
    d2b0:	str	x2, [sp, #24]
    d2b4:	ldr	x2, [sp, #24]
    d2b8:	ldr	x1, [sp, #32]
    d2bc:	ldr	x0, [sp, #40]
    d2c0:	bl	f08c <grub_memmove>
    d2c4:	ldp	x29, x30, [sp], #48
    d2c8:	ret

000000000000d2cc <grub_file_get_device_name>:
    d2cc:	stp	x29, x30, [sp, #-48]!
    d2d0:	mov	x29, sp
    d2d4:	str	x0, [sp, #24]
    d2d8:	ldr	x0, [sp, #24]
    d2dc:	ldrb	w0, [x0]
    d2e0:	cmp	w0, #0x28
    d2e4:	b.ne	d398 <grub_file_get_device_name+0xcc>  // b.any
    d2e8:	mov	w1, #0x29                  	// #41
    d2ec:	ldr	x0, [sp, #24]
    d2f0:	bl	f79c <grub_strchr>
    d2f4:	str	x0, [sp, #40]
    d2f8:	ldr	x0, [sp, #40]
    d2fc:	cmp	x0, #0x0
    d300:	b.ne	d324 <grub_file_get_device_name+0x58>  // b.any
    d304:	mov	w2, #0x29                  	// #41
    d308:	adrp	x0, 0 <_start>
    d30c:	add	x0, x0, #0x0
    d310:	ldr	x1, [x0]
    d314:	mov	w0, #0x7                   	// #7
    d318:	bl	ce54 <grub_error>
    d31c:	mov	x0, #0x0                   	// #0
    d320:	b	d39c <grub_file_get_device_name+0xd0>
    d324:	ldr	x1, [sp, #40]
    d328:	ldr	x0, [sp, #24]
    d32c:	sub	x0, x1, x0
    d330:	bl	8348 <grub_malloc>
    d334:	str	x0, [sp, #32]
    d338:	ldr	x0, [sp, #32]
    d33c:	cmp	x0, #0x0
    d340:	b.ne	d34c <grub_file_get_device_name+0x80>  // b.any
    d344:	mov	x0, #0x0                   	// #0
    d348:	b	d39c <grub_file_get_device_name+0xd0>
    d34c:	ldr	x0, [sp, #24]
    d350:	add	x3, x0, #0x1
    d354:	ldr	x1, [sp, #40]
    d358:	ldr	x0, [sp, #24]
    d35c:	sub	x0, x1, x0
    d360:	sub	x0, x0, #0x1
    d364:	mov	x2, x0
    d368:	mov	x1, x3
    d36c:	ldr	x0, [sp, #32]
    d370:	bl	d2a0 <grub_memcpy>
    d374:	ldr	x1, [sp, #40]
    d378:	ldr	x0, [sp, #24]
    d37c:	sub	x0, x1, x0
    d380:	sub	x0, x0, #0x1
    d384:	ldr	x1, [sp, #32]
    d388:	add	x0, x1, x0
    d38c:	strb	wzr, [x0]
    d390:	ldr	x0, [sp, #32]
    d394:	b	d39c <grub_file_get_device_name+0xd0>
    d398:	mov	x0, #0x0                   	// #0
    d39c:	ldp	x29, x30, [sp], #48
    d3a0:	ret
    d3a4:	nop
	...

000000000000d3b0 <grub_file_open>:
    d3b0:	stp	x29, x30, [sp, #-80]!
    d3b4:	mov	x29, sp
    d3b8:	str	x0, [sp, #24]
    d3bc:	str	w1, [sp, #20]
    d3c0:	str	xzr, [sp, #72]
    d3c4:	str	xzr, [sp, #64]
    d3c8:	str	xzr, [sp, #56]
    d3cc:	ldr	x0, [sp, #24]
    d3d0:	bl	d2cc <grub_file_get_device_name>
    d3d4:	str	x0, [sp, #32]
    d3d8:	adrp	x0, 0 <_start>
    d3dc:	add	x0, x0, #0x0
    d3e0:	ldr	x0, [x0]
    d3e4:	ldr	w0, [x0]
    d3e8:	cmp	w0, #0x0
    d3ec:	b.ne	d5f0 <grub_file_open+0x240>  // b.any
    d3f0:	ldr	x0, [sp, #24]
    d3f4:	ldrb	w0, [x0]
    d3f8:	cmp	w0, #0x28
    d3fc:	b.ne	d410 <grub_file_open+0x60>  // b.any
    d400:	mov	w1, #0x29                  	// #41
    d404:	ldr	x0, [sp, #24]
    d408:	bl	f79c <grub_strchr>
    d40c:	b	d414 <grub_file_open+0x64>
    d410:	mov	x0, #0x0                   	// #0
    d414:	str	x0, [sp, #48]
    d418:	ldr	x0, [sp, #48]
    d41c:	cmp	x0, #0x0
    d420:	b.eq	d434 <grub_file_open+0x84>  // b.none
    d424:	ldr	x0, [sp, #48]
    d428:	add	x0, x0, #0x1
    d42c:	str	x0, [sp, #48]
    d430:	b	d43c <grub_file_open+0x8c>
    d434:	ldr	x0, [sp, #24]
    d438:	str	x0, [sp, #48]
    d43c:	ldr	x0, [sp, #32]
    d440:	bl	91c8 <grub_device_open>
    d444:	str	x0, [sp, #72]
    d448:	ldr	x0, [sp, #32]
    d44c:	bl	83ac <grub_free>
    d450:	ldr	x0, [sp, #72]
    d454:	cmp	x0, #0x0
    d458:	b.eq	d5f8 <grub_file_open+0x248>  // b.none
    d45c:	mov	x0, #0x68                  	// #104
    d460:	bl	8368 <grub_zalloc>
    d464:	str	x0, [sp, #64]
    d468:	ldr	x0, [sp, #64]
    d46c:	cmp	x0, #0x0
    d470:	b.eq	d600 <grub_file_open+0x250>  // b.none
    d474:	ldr	x0, [sp, #64]
    d478:	ldr	x1, [sp, #72]
    d47c:	str	x1, [x0, #8]
    d480:	ldr	x0, [sp, #72]
    d484:	ldr	x0, [x0]
    d488:	cmp	x0, #0x0
    d48c:	b.eq	d4b8 <grub_file_open+0x108>  // b.none
    d490:	ldr	x0, [sp, #48]
    d494:	ldrb	w0, [x0]
    d498:	cmp	w0, #0x2f
    d49c:	b.eq	d4b8 <grub_file_open+0x108>  // b.none
    d4a0:	ldr	x0, [sp, #64]
    d4a4:	adrp	x1, 0 <_start>
    d4a8:	add	x1, x1, #0x0
    d4ac:	ldr	x1, [x1]
    d4b0:	str	x1, [x0, #16]
    d4b4:	b	d4dc <grub_file_open+0x12c>
    d4b8:	ldr	x0, [sp, #72]
    d4bc:	bl	d904 <grub_fs_probe>
    d4c0:	mov	x1, x0
    d4c4:	ldr	x0, [sp, #64]
    d4c8:	str	x1, [x0, #16]
    d4cc:	ldr	x0, [sp, #64]
    d4d0:	ldr	x0, [x0, #16]
    d4d4:	cmp	x0, #0x0
    d4d8:	b.eq	d608 <grub_file_open+0x258>  // b.none
    d4dc:	ldr	x0, [sp, #64]
    d4e0:	ldr	x0, [x0, #16]
    d4e4:	ldr	x2, [x0, #32]
    d4e8:	ldr	x1, [sp, #48]
    d4ec:	ldr	x0, [sp, #64]
    d4f0:	blr	x2
    d4f4:	cmp	w0, #0x0
    d4f8:	b.ne	d610 <grub_file_open+0x260>  // b.any
    d4fc:	ldr	x0, [sp, #24]
    d500:	bl	fc40 <grub_strdup>
    d504:	mov	x1, x0
    d508:	ldr	x0, [sp, #64]
    d50c:	str	x1, [x0]
    d510:	adrp	x0, 0 <_start>
    d514:	add	x0, x0, #0x0
    d518:	ldr	x0, [x0]
    d51c:	str	wzr, [x0]
    d520:	str	wzr, [sp, #44]
    d524:	b	d5bc <grub_file_open+0x20c>
    d528:	adrp	x0, 0 <_start>
    d52c:	add	x0, x0, #0x0
    d530:	ldr	x0, [x0]
    d534:	ldr	w1, [sp, #44]
    d538:	ldr	x0, [x0, x1, lsl #3]
    d53c:	cmp	x0, #0x0
    d540:	b.eq	d5b0 <grub_file_open+0x200>  // b.none
    d544:	ldr	x0, [sp, #64]
    d548:	str	x0, [sp, #56]
    d54c:	adrp	x0, 0 <_start>
    d550:	add	x0, x0, #0x0
    d554:	ldr	x0, [x0]
    d558:	ldr	w1, [sp, #44]
    d55c:	ldr	x2, [x0, x1, lsl #3]
    d560:	ldr	w1, [sp, #20]
    d564:	ldr	x0, [sp, #64]
    d568:	blr	x2
    d56c:	str	x0, [sp, #64]
    d570:	ldr	x0, [sp, #64]
    d574:	cmp	x0, #0x0
    d578:	b.eq	d5b0 <grub_file_open+0x200>  // b.none
    d57c:	ldr	x1, [sp, #64]
    d580:	ldr	x0, [sp, #56]
    d584:	cmp	x1, x0
    d588:	b.eq	d5b0 <grub_file_open+0x200>  // b.none
    d58c:	ldr	x0, [sp, #24]
    d590:	bl	fc40 <grub_strdup>
    d594:	mov	x1, x0
    d598:	ldr	x0, [sp, #64]
    d59c:	str	x1, [x0]
    d5a0:	adrp	x0, 0 <_start>
    d5a4:	add	x0, x0, #0x0
    d5a8:	ldr	x0, [x0]
    d5ac:	str	wzr, [x0]
    d5b0:	ldr	w0, [sp, #44]
    d5b4:	add	w0, w0, #0x1
    d5b8:	str	w0, [sp, #44]
    d5bc:	ldr	x0, [sp, #64]
    d5c0:	cmp	x0, #0x0
    d5c4:	b.eq	d5d4 <grub_file_open+0x224>  // b.none
    d5c8:	ldr	w0, [sp, #44]
    d5cc:	cmp	w0, #0x3
    d5d0:	b.ls	d528 <grub_file_open+0x178>  // b.plast
    d5d4:	ldr	x0, [sp, #64]
    d5d8:	cmp	x0, #0x0
    d5dc:	b.ne	d5e8 <grub_file_open+0x238>  // b.any
    d5e0:	ldr	x0, [sp, #56]
    d5e4:	bl	d7f0 <grub_file_close>
    d5e8:	ldr	x0, [sp, #64]
    d5ec:	b	d634 <grub_file_open+0x284>
    d5f0:	nop
    d5f4:	b	d614 <grub_file_open+0x264>
    d5f8:	nop
    d5fc:	b	d614 <grub_file_open+0x264>
    d600:	nop
    d604:	b	d614 <grub_file_open+0x264>
    d608:	nop
    d60c:	b	d614 <grub_file_open+0x264>
    d610:	nop
    d614:	ldr	x0, [sp, #72]
    d618:	cmp	x0, #0x0
    d61c:	b.eq	d628 <grub_file_open+0x278>  // b.none
    d620:	ldr	x0, [sp, #72]
    d624:	bl	9340 <grub_device_close>
    d628:	ldr	x0, [sp, #64]
    d62c:	bl	83ac <grub_free>
    d630:	mov	x0, #0x0                   	// #0
    d634:	ldp	x29, x30, [sp], #80
    d638:	ret
    d63c:	nop
	...

000000000000d658 <grub_file_read>:
    d658:	stp	x29, x30, [sp, #-80]!
    d65c:	mov	x29, sp
    d660:	str	x0, [sp, #40]
    d664:	str	x1, [sp, #32]
    d668:	str	x2, [sp, #24]
    d66c:	ldr	x0, [sp, #40]
    d670:	ldr	x1, [x0, #24]
    d674:	ldr	x0, [sp, #40]
    d678:	ldr	x0, [x0, #64]
    d67c:	cmp	x1, x0
    d680:	b.ls	d6a0 <grub_file_read+0x48>  // b.plast
    d684:	adrp	x0, 0 <_start>
    d688:	add	x0, x0, #0x0
    d68c:	ldr	x1, [x0]
    d690:	mov	w0, #0xb                   	// #11
    d694:	bl	ce54 <grub_error>
    d698:	mov	x0, #0xffffffffffffffff    	// #-1
    d69c:	b	d7d4 <grub_file_read+0x17c>
    d6a0:	ldr	x0, [sp, #24]
    d6a4:	cmp	x0, #0x0
    d6a8:	b.ne	d6b4 <grub_file_read+0x5c>  // b.any
    d6ac:	mov	x0, #0x0                   	// #0
    d6b0:	b	d7d4 <grub_file_read+0x17c>
    d6b4:	ldr	x0, [sp, #40]
    d6b8:	ldr	x1, [x0, #64]
    d6bc:	ldr	x0, [sp, #40]
    d6c0:	ldr	x0, [x0, #24]
    d6c4:	sub	x0, x1, x0
    d6c8:	ldr	x1, [sp, #24]
    d6cc:	cmp	x1, x0
    d6d0:	b.ls	d6ec <grub_file_read+0x94>  // b.plast
    d6d4:	ldr	x0, [sp, #40]
    d6d8:	ldr	x1, [x0, #64]
    d6dc:	ldr	x0, [sp, #40]
    d6e0:	ldr	x0, [x0, #24]
    d6e4:	sub	x0, x1, x0
    d6e8:	str	x0, [sp, #24]
    d6ec:	ldr	x0, [sp, #24]
    d6f0:	cmp	x0, #0x0
    d6f4:	b.ge	d704 <grub_file_read+0xac>  // b.tcont
    d6f8:	ldr	x0, [sp, #24]
    d6fc:	lsr	x0, x0, #1
    d700:	str	x0, [sp, #24]
    d704:	ldr	x0, [sp, #24]
    d708:	cmp	x0, #0x0
    d70c:	b.ne	d718 <grub_file_read+0xc0>  // b.any
    d710:	mov	x0, #0x0                   	// #0
    d714:	b	d7d4 <grub_file_read+0x17c>
    d718:	ldr	x0, [sp, #40]
    d71c:	ldr	x0, [x0, #88]
    d720:	str	x0, [sp, #72]
    d724:	ldr	x0, [sp, #40]
    d728:	ldr	x0, [x0, #96]
    d72c:	str	x0, [sp, #64]
    d730:	ldr	x0, [sp, #40]
    d734:	ldr	x0, [x0, #88]
    d738:	cmp	x0, #0x0
    d73c:	b.ne	d774 <grub_file_read+0x11c>  // b.any
    d740:	adrp	x0, 0 <_start>
    d744:	add	x0, x0, #0x0
    d748:	ldr	x0, [x0]
    d74c:	ldr	x1, [x0]
    d750:	ldr	x0, [sp, #40]
    d754:	str	x1, [x0, #88]
    d758:	ldr	x0, [sp, #40]
    d75c:	ldr	x1, [sp, #40]
    d760:	str	x1, [x0, #96]
    d764:	ldr	x0, [sp, #40]
    d768:	ldr	x1, [x0, #24]
    d76c:	ldr	x0, [sp, #40]
    d770:	str	x1, [x0, #32]
    d774:	ldr	x0, [sp, #40]
    d778:	ldr	x0, [x0, #16]
    d77c:	ldr	x3, [x0, #40]
    d780:	ldr	x2, [sp, #24]
    d784:	ldr	x1, [sp, #32]
    d788:	ldr	x0, [sp, #40]
    d78c:	blr	x3
    d790:	str	x0, [sp, #56]
    d794:	ldr	x0, [sp, #40]
    d798:	ldr	x1, [sp, #72]
    d79c:	str	x1, [x0, #88]
    d7a0:	ldr	x0, [sp, #40]
    d7a4:	ldr	x1, [sp, #64]
    d7a8:	str	x1, [x0, #96]
    d7ac:	ldr	x0, [sp, #56]
    d7b0:	cmp	x0, #0x0
    d7b4:	b.le	d7d0 <grub_file_read+0x178>
    d7b8:	ldr	x0, [sp, #40]
    d7bc:	ldr	x1, [x0, #24]
    d7c0:	ldr	x0, [sp, #56]
    d7c4:	add	x1, x1, x0
    d7c8:	ldr	x0, [sp, #40]
    d7cc:	str	x1, [x0, #24]
    d7d0:	ldr	x0, [sp, #56]
    d7d4:	ldp	x29, x30, [sp], #80
    d7d8:	ret
    d7dc:	nop
	...

000000000000d7f0 <grub_file_close>:
    d7f0:	stp	x29, x30, [sp, #-32]!
    d7f4:	mov	x29, sp
    d7f8:	str	x0, [sp, #24]
    d7fc:	ldr	x0, [sp, #24]
    d800:	ldr	x0, [x0, #16]
    d804:	ldr	x0, [x0, #48]
    d808:	cmp	x0, #0x0
    d80c:	b.eq	d824 <grub_file_close+0x34>  // b.none
    d810:	ldr	x0, [sp, #24]
    d814:	ldr	x0, [x0, #16]
    d818:	ldr	x1, [x0, #48]
    d81c:	ldr	x0, [sp, #24]
    d820:	blr	x1
    d824:	ldr	x0, [sp, #24]
    d828:	ldr	x0, [x0, #8]
    d82c:	cmp	x0, #0x0
    d830:	b.eq	d840 <grub_file_close+0x50>  // b.none
    d834:	ldr	x0, [sp, #24]
    d838:	ldr	x0, [x0, #8]
    d83c:	bl	9340 <grub_device_close>
    d840:	ldr	x0, [sp, #24]
    d844:	ldr	x0, [x0]
    d848:	bl	83ac <grub_free>
    d84c:	ldr	x0, [sp, #24]
    d850:	bl	83ac <grub_free>
    d854:	adrp	x0, 0 <_start>
    d858:	add	x0, x0, #0x0
    d85c:	ldr	x0, [x0]
    d860:	ldr	w0, [x0]
    d864:	ldp	x29, x30, [sp], #32
    d868:	ret
    d86c:	nop
	...

000000000000d878 <grub_file_seek>:
    d878:	stp	x29, x30, [sp, #-48]!
    d87c:	mov	x29, sp
    d880:	str	x0, [sp, #24]
    d884:	str	x1, [sp, #16]
    d888:	ldr	x0, [sp, #24]
    d88c:	ldr	x0, [x0, #64]
    d890:	ldr	x1, [sp, #16]
    d894:	cmp	x1, x0
    d898:	b.ls	d8b8 <grub_file_seek+0x40>  // b.plast
    d89c:	adrp	x0, 0 <_start>
    d8a0:	add	x0, x0, #0x0
    d8a4:	ldr	x1, [x0]
    d8a8:	mov	w0, #0xb                   	// #11
    d8ac:	bl	ce54 <grub_error>
    d8b0:	mov	x0, #0xffffffffffffffff    	// #-1
    d8b4:	b	d8d4 <grub_file_seek+0x5c>
    d8b8:	ldr	x0, [sp, #24]
    d8bc:	ldr	x0, [x0, #24]
    d8c0:	str	x0, [sp, #40]
    d8c4:	ldr	x0, [sp, #24]
    d8c8:	ldr	x1, [sp, #16]
    d8cc:	str	x1, [x0, #24]
    d8d0:	ldr	x0, [sp, #40]
    d8d4:	ldp	x29, x30, [sp], #48
    d8d8:	ret
    d8dc:	nop
	...

000000000000d8e8 <probe_dummy_iter>:
    d8e8:	sub	sp, sp, #0x20
    d8ec:	str	x0, [sp, #24]
    d8f0:	str	x1, [sp, #16]
    d8f4:	str	x2, [sp, #8]
    d8f8:	mov	w0, #0x1                   	// #1
    d8fc:	add	sp, sp, #0x20
    d900:	ret

000000000000d904 <grub_fs_probe>:
    d904:	stp	x29, x30, [sp, #-48]!
    d908:	mov	x29, sp
    d90c:	str	x0, [sp, #24]
    d910:	ldr	x0, [sp, #24]
    d914:	ldr	x0, [x0]
    d918:	cmp	x0, #0x0
    d91c:	b.eq	dbe8 <grub_fs_probe+0x2e4>  // b.none
    d920:	adrp	x0, 0 <_start>
    d924:	add	x0, x0, #0x0
    d928:	ldr	x0, [x0]
    d92c:	ldr	x0, [x0]
    d930:	str	x0, [sp, #40]
    d934:	b	da50 <grub_fs_probe+0x14c>
    d938:	ldr	x0, [sp, #40]
    d93c:	ldr	x0, [x0, #16]
    d940:	mov	x4, x0
    d944:	adrp	x0, 0 <_start>
    d948:	add	x0, x0, #0x0
    d94c:	ldr	x3, [x0]
    d950:	adrp	x0, 0 <_start>
    d954:	add	x0, x0, #0x0
    d958:	ldr	x2, [x0]
    d95c:	mov	w1, #0x38                  	// #56
    d960:	adrp	x0, 0 <_start>
    d964:	add	x0, x0, #0x0
    d968:	ldr	x0, [x0]
    d96c:	bl	f328 <grub_real_dprintf>
    d970:	ldr	x0, [sp, #40]
    d974:	ldr	x4, [x0, #24]
    d978:	mov	x3, #0x0                   	// #0
    d97c:	adrp	x0, 0 <_start>
    d980:	add	x0, x0, #0x0
    d984:	ldr	x2, [x0]
    d988:	adrp	x0, 0 <_start>
    d98c:	add	x0, x0, #0x0
    d990:	ldr	x1, [x0]
    d994:	ldr	x0, [sp, #24]
    d998:	blr	x4
    d99c:	adrp	x0, 0 <_start>
    d9a0:	add	x0, x0, #0x0
    d9a4:	ldr	x0, [x0]
    d9a8:	ldr	w0, [x0]
    d9ac:	cmp	w0, #0x0
    d9b0:	b.ne	d9bc <grub_fs_probe+0xb8>  // b.any
    d9b4:	ldr	x0, [sp, #40]
    d9b8:	b	dc34 <grub_fs_probe+0x330>
    d9bc:	bl	cf38 <grub_error_push>
    d9c0:	ldr	x0, [sp, #40]
    d9c4:	ldr	x0, [x0, #16]
    d9c8:	mov	x4, x0
    d9cc:	adrp	x0, 0 <_start>
    d9d0:	add	x0, x0, #0x0
    d9d4:	ldr	x3, [x0]
    d9d8:	adrp	x0, 0 <_start>
    d9dc:	add	x0, x0, #0x0
    d9e0:	ldr	x2, [x0]
    d9e4:	mov	w1, #0x4e                  	// #78
    d9e8:	adrp	x0, 0 <_start>
    d9ec:	add	x0, x0, #0x0
    d9f0:	ldr	x0, [x0]
    d9f4:	bl	f328 <grub_real_dprintf>
    d9f8:	bl	d070 <grub_error_pop>
    d9fc:	adrp	x0, 0 <_start>
    da00:	add	x0, x0, #0x0
    da04:	ldr	x0, [x0]
    da08:	ldr	w0, [x0]
    da0c:	cmp	w0, #0x9
    da10:	b.eq	da34 <grub_fs_probe+0x130>  // b.none
    da14:	adrp	x0, 0 <_start>
    da18:	add	x0, x0, #0x0
    da1c:	ldr	x0, [x0]
    da20:	ldr	w0, [x0]
    da24:	cmp	w0, #0xb
    da28:	b.eq	da34 <grub_fs_probe+0x130>  // b.none
    da2c:	mov	x0, #0x0                   	// #0
    da30:	b	dc34 <grub_fs_probe+0x330>
    da34:	adrp	x0, 0 <_start>
    da38:	add	x0, x0, #0x0
    da3c:	ldr	x0, [x0]
    da40:	str	wzr, [x0]
    da44:	ldr	x0, [sp, #40]
    da48:	ldr	x0, [x0]
    da4c:	str	x0, [sp, #40]
    da50:	ldr	x0, [sp, #40]
    da54:	cmp	x0, #0x0
    da58:	b.ne	d938 <grub_fs_probe+0x34>  // b.any
    da5c:	adrp	x0, 0 <_start>
    da60:	add	x0, x0, #0x0
    da64:	ldr	x0, [x0]
    da68:	ldr	x0, [x0]
    da6c:	cmp	x0, #0x0
    da70:	b.eq	dc1c <grub_fs_probe+0x318>  // b.none
    da74:	adrp	x0, 0 <_start>
    da78:	add	x0, x0, #0x0
    da7c:	ldr	x0, [x0]
    da80:	ldr	w0, [x0]
    da84:	cmp	w0, #0x0
    da88:	b.ne	dc1c <grub_fs_probe+0x318>  // b.any
    da8c:	adrp	x0, 0 <_start>
    da90:	add	x0, x0, #0x0
    da94:	ldr	x0, [x0]
    da98:	ldr	w0, [x0]
    da9c:	add	w1, w0, #0x1
    daa0:	adrp	x0, 0 <_start>
    daa4:	add	x0, x0, #0x0
    daa8:	ldr	x0, [x0]
    daac:	str	w1, [x0]
    dab0:	b	dba4 <grub_fs_probe+0x2a0>
    dab4:	adrp	x0, 0 <_start>
    dab8:	add	x0, x0, #0x0
    dabc:	ldr	x0, [x0]
    dac0:	ldr	x0, [x0]
    dac4:	str	x0, [sp, #40]
    dac8:	ldr	x0, [sp, #40]
    dacc:	ldr	x4, [x0, #24]
    dad0:	mov	x3, #0x0                   	// #0
    dad4:	adrp	x0, 0 <_start>
    dad8:	add	x0, x0, #0x0
    dadc:	ldr	x2, [x0]
    dae0:	adrp	x0, 0 <_start>
    dae4:	add	x0, x0, #0x0
    dae8:	ldr	x1, [x0]
    daec:	ldr	x0, [sp, #24]
    daf0:	blr	x4
    daf4:	adrp	x0, 0 <_start>
    daf8:	add	x0, x0, #0x0
    dafc:	ldr	x0, [x0]
    db00:	ldr	w0, [x0]
    db04:	cmp	w0, #0x0
    db08:	b.ne	db38 <grub_fs_probe+0x234>  // b.any
    db0c:	adrp	x0, 0 <_start>
    db10:	add	x0, x0, #0x0
    db14:	ldr	x0, [x0]
    db18:	ldr	w0, [x0]
    db1c:	sub	w1, w0, #0x1
    db20:	adrp	x0, 0 <_start>
    db24:	add	x0, x0, #0x0
    db28:	ldr	x0, [x0]
    db2c:	str	w1, [x0]
    db30:	ldr	x0, [sp, #40]
    db34:	b	dc34 <grub_fs_probe+0x330>
    db38:	adrp	x0, 0 <_start>
    db3c:	add	x0, x0, #0x0
    db40:	ldr	x0, [x0]
    db44:	ldr	w0, [x0]
    db48:	cmp	w0, #0x9
    db4c:	b.eq	db94 <grub_fs_probe+0x290>  // b.none
    db50:	adrp	x0, 0 <_start>
    db54:	add	x0, x0, #0x0
    db58:	ldr	x0, [x0]
    db5c:	ldr	w0, [x0]
    db60:	cmp	w0, #0xb
    db64:	b.eq	db94 <grub_fs_probe+0x290>  // b.none
    db68:	adrp	x0, 0 <_start>
    db6c:	add	x0, x0, #0x0
    db70:	ldr	x0, [x0]
    db74:	ldr	w0, [x0]
    db78:	sub	w1, w0, #0x1
    db7c:	adrp	x0, 0 <_start>
    db80:	add	x0, x0, #0x0
    db84:	ldr	x0, [x0]
    db88:	str	w1, [x0]
    db8c:	mov	x0, #0x0                   	// #0
    db90:	b	dc34 <grub_fs_probe+0x330>
    db94:	adrp	x0, 0 <_start>
    db98:	add	x0, x0, #0x0
    db9c:	ldr	x0, [x0]
    dba0:	str	wzr, [x0]
    dba4:	adrp	x0, 0 <_start>
    dba8:	add	x0, x0, #0x0
    dbac:	ldr	x0, [x0]
    dbb0:	ldr	x0, [x0]
    dbb4:	blr	x0
    dbb8:	cmp	w0, #0x0
    dbbc:	b.ne	dab4 <grub_fs_probe+0x1b0>  // b.any
    dbc0:	adrp	x0, 0 <_start>
    dbc4:	add	x0, x0, #0x0
    dbc8:	ldr	x0, [x0]
    dbcc:	ldr	w0, [x0]
    dbd0:	sub	w1, w0, #0x1
    dbd4:	adrp	x0, 0 <_start>
    dbd8:	add	x0, x0, #0x0
    dbdc:	ldr	x0, [x0]
    dbe0:	str	w1, [x0]
    dbe4:	b	dc1c <grub_fs_probe+0x318>
    dbe8:	ldr	x0, [sp, #24]
    dbec:	ldr	x0, [x0, #8]
    dbf0:	cmp	x0, #0x0
    dbf4:	b.eq	dc1c <grub_fs_probe+0x318>  // b.none
    dbf8:	ldr	x0, [sp, #24]
    dbfc:	ldr	x0, [x0, #8]
    dc00:	ldr	x0, [x0, #56]
    dc04:	cmp	x0, #0x0
    dc08:	b.eq	dc1c <grub_fs_probe+0x318>  // b.none
    dc0c:	ldr	x0, [sp, #24]
    dc10:	ldr	x0, [x0, #8]
    dc14:	ldr	x0, [x0, #56]
    dc18:	b	dc34 <grub_fs_probe+0x330>
    dc1c:	adrp	x0, 0 <_start>
    dc20:	add	x0, x0, #0x0
    dc24:	ldr	x1, [x0]
    dc28:	mov	w0, #0x8                   	// #8
    dc2c:	bl	ce54 <grub_error>
    dc30:	mov	x0, #0x0                   	// #0
    dc34:	ldp	x29, x30, [sp], #48
    dc38:	ret
    dc3c:	nop
	...

000000000000dc98 <grub_fs_blocklist_open>:
    dc98:	stp	x29, x30, [sp, #-80]!
    dc9c:	mov	x29, sp
    dca0:	str	x19, [sp, #16]
    dca4:	str	x0, [sp, #40]
    dca8:	str	x1, [sp, #32]
    dcac:	ldr	x0, [sp, #32]
    dcb0:	str	x0, [sp, #48]
    dcb4:	str	wzr, [sp, #76]
    dcb8:	ldr	x0, [sp, #40]
    dcbc:	ldr	x0, [x0, #8]
    dcc0:	ldr	x0, [x0]
    dcc4:	str	x0, [sp, #64]
    dcc8:	ldr	w0, [sp, #76]
    dccc:	add	w0, w0, #0x1
    dcd0:	str	w0, [sp, #76]
    dcd4:	ldr	x0, [sp, #48]
    dcd8:	mov	w1, #0x2c                  	// #44
    dcdc:	bl	f79c <grub_strchr>
    dce0:	str	x0, [sp, #48]
    dce4:	ldr	x0, [sp, #48]
    dce8:	cmp	x0, #0x0
    dcec:	b.eq	dcfc <grub_fs_blocklist_open+0x64>  // b.none
    dcf0:	ldr	x0, [sp, #48]
    dcf4:	add	x0, x0, #0x1
    dcf8:	str	x0, [sp, #48]
    dcfc:	ldr	x0, [sp, #48]
    dd00:	cmp	x0, #0x0
    dd04:	b.ne	dcc8 <grub_fs_blocklist_open+0x30>  // b.any
    dd08:	ldr	w0, [sp, #76]
    dd0c:	add	w0, w0, #0x1
    dd10:	mov	w0, w0
    dd14:	lsl	x0, x0, #4
    dd18:	bl	8368 <grub_zalloc>
    dd1c:	str	x0, [sp, #56]
    dd20:	ldr	x0, [sp, #56]
    dd24:	cmp	x0, #0x0
    dd28:	b.ne	dd34 <grub_fs_blocklist_open+0x9c>  // b.any
    dd2c:	mov	w0, #0x0                   	// #0
    dd30:	b	df5c <grub_fs_blocklist_open+0x2c4>
    dd34:	ldr	x0, [sp, #40]
    dd38:	str	xzr, [x0, #64]
    dd3c:	ldr	x0, [sp, #32]
    dd40:	str	x0, [sp, #48]
    dd44:	str	wzr, [sp, #72]
    dd48:	b	df20 <grub_fs_blocklist_open+0x288>
    dd4c:	ldr	x0, [sp, #48]
    dd50:	ldrb	w0, [x0]
    dd54:	cmp	w0, #0x2b
    dd58:	b.eq	ddcc <grub_fs_blocklist_open+0x134>  // b.none
    dd5c:	ldr	x3, [sp, #48]
    dd60:	ldr	w0, [sp, #72]
    dd64:	lsl	x0, x0, #4
    dd68:	ldr	x1, [sp, #56]
    dd6c:	add	x19, x1, x0
    dd70:	add	x0, sp, #0x30
    dd74:	mov	w2, #0x0                   	// #0
    dd78:	mov	x1, x0
    dd7c:	mov	x0, x3
    dd80:	bl	fa20 <grub_strtoull>
    dd84:	str	x0, [x19]
    dd88:	adrp	x0, 0 <_start>
    dd8c:	add	x0, x0, #0x0
    dd90:	ldr	x0, [x0]
    dd94:	ldr	w0, [x0]
    dd98:	cmp	w0, #0x0
    dd9c:	b.ne	ddb0 <grub_fs_blocklist_open+0x118>  // b.any
    dda0:	ldr	x0, [sp, #48]
    dda4:	ldrb	w0, [x0]
    dda8:	cmp	w0, #0x2b
    ddac:	b.eq	ddcc <grub_fs_blocklist_open+0x134>  // b.none
    ddb0:	ldr	x2, [sp, #32]
    ddb4:	adrp	x0, 0 <_start>
    ddb8:	add	x0, x0, #0x0
    ddbc:	ldr	x1, [x0]
    ddc0:	mov	w0, #0x7                   	// #7
    ddc4:	bl	ce54 <grub_error>
    ddc8:	b	df44 <grub_fs_blocklist_open+0x2ac>
    ddcc:	ldr	x0, [sp, #48]
    ddd0:	add	x0, x0, #0x1
    ddd4:	str	x0, [sp, #48]
    ddd8:	ldr	x3, [sp, #48]
    dddc:	ldr	w0, [sp, #72]
    dde0:	lsl	x0, x0, #4
    dde4:	ldr	x1, [sp, #56]
    dde8:	add	x19, x1, x0
    ddec:	add	x0, sp, #0x30
    ddf0:	mov	w2, #0x0                   	// #0
    ddf4:	mov	x1, x0
    ddf8:	mov	x0, x3
    ddfc:	bl	f9ec <grub_strtoul>
    de00:	str	x0, [x19, #8]
    de04:	adrp	x0, 0 <_start>
    de08:	add	x0, x0, #0x0
    de0c:	ldr	x0, [x0]
    de10:	ldr	w0, [x0]
    de14:	cmp	w0, #0x0
    de18:	b.ne	de6c <grub_fs_blocklist_open+0x1d4>  // b.any
    de1c:	ldr	w0, [sp, #72]
    de20:	lsl	x0, x0, #4
    de24:	ldr	x1, [sp, #56]
    de28:	add	x0, x1, x0
    de2c:	ldr	x0, [x0, #8]
    de30:	cmp	x0, #0x0
    de34:	b.eq	de6c <grub_fs_blocklist_open+0x1d4>  // b.none
    de38:	ldr	x0, [sp, #48]
    de3c:	ldrb	w0, [x0]
    de40:	cmp	w0, #0x0
    de44:	b.eq	de88 <grub_fs_blocklist_open+0x1f0>  // b.none
    de48:	ldr	x0, [sp, #48]
    de4c:	ldrb	w0, [x0]
    de50:	cmp	w0, #0x2c
    de54:	b.eq	de88 <grub_fs_blocklist_open+0x1f0>  // b.none
    de58:	ldr	x0, [sp, #48]
    de5c:	ldrb	w0, [x0]
    de60:	bl	f9a0 <grub_isspace>
    de64:	cmp	w0, #0x0
    de68:	b.ne	de88 <grub_fs_blocklist_open+0x1f0>  // b.any
    de6c:	ldr	x2, [sp, #32]
    de70:	adrp	x0, 0 <_start>
    de74:	add	x0, x0, #0x0
    de78:	ldr	x1, [x0]
    de7c:	mov	w0, #0x7                   	// #7
    de80:	bl	ce54 <grub_error>
    de84:	b	df44 <grub_fs_blocklist_open+0x2ac>
    de88:	ldr	x0, [sp, #64]
    de8c:	ldr	x1, [x0, #16]
    de90:	ldr	w0, [sp, #72]
    de94:	lsl	x0, x0, #4
    de98:	ldr	x2, [sp, #56]
    de9c:	add	x0, x2, x0
    dea0:	ldr	x2, [x0]
    dea4:	ldr	w0, [sp, #72]
    dea8:	lsl	x0, x0, #4
    deac:	ldr	x3, [sp, #56]
    deb0:	add	x0, x3, x0
    deb4:	ldr	x0, [x0, #8]
    deb8:	add	x0, x2, x0
    debc:	cmp	x1, x0
    dec0:	b.cs	dedc <grub_fs_blocklist_open+0x244>  // b.hs, b.nlast
    dec4:	adrp	x0, 0 <_start>
    dec8:	add	x0, x0, #0x0
    decc:	ldr	x1, [x0]
    ded0:	mov	w0, #0x7                   	// #7
    ded4:	bl	ce54 <grub_error>
    ded8:	b	df44 <grub_fs_blocklist_open+0x2ac>
    dedc:	ldr	x0, [sp, #40]
    dee0:	ldr	x1, [x0, #64]
    dee4:	ldr	w0, [sp, #72]
    dee8:	lsl	x0, x0, #4
    deec:	ldr	x2, [sp, #56]
    def0:	add	x0, x2, x0
    def4:	ldr	x0, [x0, #8]
    def8:	lsl	x0, x0, #9
    defc:	add	x1, x1, x0
    df00:	ldr	x0, [sp, #40]
    df04:	str	x1, [x0, #64]
    df08:	ldr	x0, [sp, #48]
    df0c:	add	x0, x0, #0x1
    df10:	str	x0, [sp, #48]
    df14:	ldr	w0, [sp, #72]
    df18:	add	w0, w0, #0x1
    df1c:	str	w0, [sp, #72]
    df20:	ldr	w1, [sp, #72]
    df24:	ldr	w0, [sp, #76]
    df28:	cmp	w1, w0
    df2c:	b.cc	dd4c <grub_fs_blocklist_open+0xb4>  // b.lo, b.ul, b.last
    df30:	ldr	x0, [sp, #40]
    df34:	ldr	x1, [sp, #56]
    df38:	str	x1, [x0, #80]
    df3c:	mov	w0, #0x0                   	// #0
    df40:	b	df5c <grub_fs_blocklist_open+0x2c4>
    df44:	ldr	x0, [sp, #56]
    df48:	bl	83ac <grub_free>
    df4c:	adrp	x0, 0 <_start>
    df50:	add	x0, x0, #0x0
    df54:	ldr	x0, [x0]
    df58:	ldr	w0, [x0]
    df5c:	ldr	x19, [sp, #16]
    df60:	ldp	x29, x30, [sp], #80
    df64:	ret
	...

000000000000df80 <grub_fs_blocklist_read>:
    df80:	stp	x29, x30, [sp, #-96]!
    df84:	mov	x29, sp
    df88:	str	x0, [sp, #40]
    df8c:	str	x1, [sp, #32]
    df90:	str	x2, [sp, #24]
    df94:	str	xzr, [sp, #64]
    df98:	ldr	x0, [sp, #40]
    df9c:	ldr	x1, [x0, #64]
    dfa0:	ldr	x0, [sp, #40]
    dfa4:	ldr	x0, [x0, #24]
    dfa8:	sub	x0, x1, x0
    dfac:	ldr	x1, [sp, #24]
    dfb0:	cmp	x1, x0
    dfb4:	b.ls	dfd0 <grub_fs_blocklist_read+0x50>  // b.plast
    dfb8:	ldr	x0, [sp, #40]
    dfbc:	ldr	x1, [x0, #64]
    dfc0:	ldr	x0, [sp, #40]
    dfc4:	ldr	x0, [x0, #24]
    dfc8:	sub	x0, x1, x0
    dfcc:	str	x0, [sp, #24]
    dfd0:	ldr	x0, [sp, #40]
    dfd4:	ldr	x0, [x0, #24]
    dfd8:	lsr	x0, x0, #9
    dfdc:	str	x0, [sp, #80]
    dfe0:	ldr	x0, [sp, #40]
    dfe4:	ldr	x0, [x0, #24]
    dfe8:	and	x0, x0, #0x1ff
    dfec:	str	x0, [sp, #72]
    dff0:	ldr	x0, [sp, #40]
    dff4:	ldr	x0, [x0, #80]
    dff8:	str	x0, [sp, #88]
    dffc:	b	e120 <grub_fs_blocklist_read+0x1a0>
    e000:	ldr	x0, [sp, #88]
    e004:	ldr	x0, [x0, #8]
    e008:	ldr	x1, [sp, #80]
    e00c:	cmp	x1, x0
    e010:	b.cs	e100 <grub_fs_blocklist_read+0x180>  // b.hs, b.nlast
    e014:	ldr	x0, [sp, #24]
    e018:	str	x0, [sp, #56]
    e01c:	ldr	x1, [sp, #56]
    e020:	ldr	x0, [sp, #72]
    e024:	add	x0, x1, x0
    e028:	add	x0, x0, #0x1ff
    e02c:	lsr	x1, x0, #9
    e030:	ldr	x0, [sp, #88]
    e034:	ldr	x2, [x0, #8]
    e038:	ldr	x0, [sp, #80]
    e03c:	sub	x0, x2, x0
    e040:	cmp	x1, x0
    e044:	b.ls	e068 <grub_fs_blocklist_read+0xe8>  // b.plast
    e048:	ldr	x0, [sp, #88]
    e04c:	ldr	x1, [x0, #8]
    e050:	ldr	x0, [sp, #80]
    e054:	sub	x0, x1, x0
    e058:	lsl	x1, x0, #9
    e05c:	ldr	x0, [sp, #72]
    e060:	sub	x0, x1, x0
    e064:	str	x0, [sp, #56]
    e068:	ldr	x0, [sp, #40]
    e06c:	ldr	x0, [x0, #8]
    e070:	ldr	x5, [x0]
    e074:	ldr	x0, [sp, #88]
    e078:	ldr	x1, [x0]
    e07c:	ldr	x0, [sp, #80]
    e080:	add	x0, x1, x0
    e084:	ldr	x4, [sp, #32]
    e088:	ldr	x3, [sp, #56]
    e08c:	ldr	x2, [sp, #72]
    e090:	mov	x1, x0
    e094:	mov	x0, x5
    e098:	bl	a67c <grub_disk_read>
    e09c:	cmp	w0, #0x0
    e0a0:	b.eq	e0ac <grub_fs_blocklist_read+0x12c>  // b.none
    e0a4:	mov	x0, #0xffffffffffffffff    	// #-1
    e0a8:	b	e140 <grub_fs_blocklist_read+0x1c0>
    e0ac:	ldr	x1, [sp, #64]
    e0b0:	ldr	x0, [sp, #56]
    e0b4:	add	x0, x1, x0
    e0b8:	str	x0, [sp, #64]
    e0bc:	ldr	x1, [sp, #24]
    e0c0:	ldr	x0, [sp, #56]
    e0c4:	sub	x0, x1, x0
    e0c8:	str	x0, [sp, #24]
    e0cc:	ldr	x1, [sp, #56]
    e0d0:	ldr	x0, [sp, #72]
    e0d4:	add	x0, x1, x0
    e0d8:	lsr	x0, x0, #9
    e0dc:	ldr	x1, [sp, #80]
    e0e0:	sub	x0, x1, x0
    e0e4:	str	x0, [sp, #80]
    e0e8:	ldr	x1, [sp, #56]
    e0ec:	ldr	x0, [sp, #72]
    e0f0:	add	x0, x1, x0
    e0f4:	and	x0, x0, #0x1ff
    e0f8:	str	x0, [sp, #72]
    e0fc:	b	e114 <grub_fs_blocklist_read+0x194>
    e100:	ldr	x0, [sp, #88]
    e104:	ldr	x0, [x0, #8]
    e108:	ldr	x1, [sp, #80]
    e10c:	sub	x0, x1, x0
    e110:	str	x0, [sp, #80]
    e114:	ldr	x0, [sp, #88]
    e118:	add	x0, x0, #0x10
    e11c:	str	x0, [sp, #88]
    e120:	ldr	x0, [sp, #88]
    e124:	ldr	x0, [x0, #8]
    e128:	cmp	x0, #0x0
    e12c:	b.eq	e13c <grub_fs_blocklist_read+0x1bc>  // b.none
    e130:	ldr	x0, [sp, #24]
    e134:	cmp	x0, #0x0
    e138:	b.ne	e000 <grub_fs_blocklist_read+0x80>  // b.any
    e13c:	ldr	x0, [sp, #64]
    e140:	ldp	x29, x30, [sp], #96
    e144:	ret

000000000000e148 <grub_named_list_find>:
    e148:	stp	x29, x30, [sp, #-48]!
    e14c:	mov	x29, sp
    e150:	str	x0, [sp, #24]
    e154:	str	x1, [sp, #16]
    e158:	ldr	x0, [sp, #24]
    e15c:	str	x0, [sp, #40]
    e160:	b	e190 <grub_named_list_find+0x48>
    e164:	ldr	x0, [sp, #40]
    e168:	ldr	x0, [x0, #16]
    e16c:	ldr	x1, [sp, #16]
    e170:	bl	f660 <grub_strcmp>
    e174:	cmp	w0, #0x0
    e178:	b.ne	e184 <grub_named_list_find+0x3c>  // b.any
    e17c:	ldr	x0, [sp, #40]
    e180:	b	e1a0 <grub_named_list_find+0x58>
    e184:	ldr	x0, [sp, #40]
    e188:	ldr	x0, [x0]
    e18c:	str	x0, [sp, #40]
    e190:	ldr	x0, [sp, #40]
    e194:	cmp	x0, #0x0
    e198:	b.ne	e164 <grub_named_list_find+0x1c>  // b.any
    e19c:	mov	x0, #0x0                   	// #0
    e1a0:	ldp	x29, x30, [sp], #48
    e1a4:	ret

000000000000e1a8 <grub_list_push>:
    e1a8:	sub	sp, sp, #0x10
    e1ac:	str	x0, [sp, #8]
    e1b0:	str	x1, [sp]
    e1b4:	ldr	x0, [sp]
    e1b8:	ldr	x1, [sp, #8]
    e1bc:	str	x1, [x0, #8]
    e1c0:	ldr	x0, [sp, #8]
    e1c4:	ldr	x0, [x0]
    e1c8:	cmp	x0, #0x0
    e1cc:	b.eq	e1e0 <grub_list_push+0x38>  // b.none
    e1d0:	ldr	x0, [sp, #8]
    e1d4:	ldr	x0, [x0]
    e1d8:	ldr	x1, [sp]
    e1dc:	str	x1, [x0, #8]
    e1e0:	ldr	x0, [sp, #8]
    e1e4:	ldr	x1, [x0]
    e1e8:	ldr	x0, [sp]
    e1ec:	str	x1, [x0]
    e1f0:	ldr	x0, [sp, #8]
    e1f4:	ldr	x1, [sp]
    e1f8:	str	x1, [x0]
    e1fc:	nop
    e200:	add	sp, sp, #0x10
    e204:	ret

000000000000e208 <grub_list_remove>:
    e208:	sub	sp, sp, #0x10
    e20c:	str	x0, [sp, #8]
    e210:	ldr	x0, [sp, #8]
    e214:	ldr	x0, [x0, #8]
    e218:	cmp	x0, #0x0
    e21c:	b.eq	e234 <grub_list_remove+0x2c>  // b.none
    e220:	ldr	x0, [sp, #8]
    e224:	ldr	x0, [x0, #8]
    e228:	ldr	x1, [sp, #8]
    e22c:	ldr	x1, [x1]
    e230:	str	x1, [x0]
    e234:	ldr	x0, [sp, #8]
    e238:	ldr	x0, [x0]
    e23c:	cmp	x0, #0x0
    e240:	b.eq	e258 <grub_list_remove+0x50>  // b.none
    e244:	ldr	x0, [sp, #8]
    e248:	ldr	x0, [x0]
    e24c:	ldr	x1, [sp, #8]
    e250:	ldr	x1, [x1, #8]
    e254:	str	x1, [x0, #8]
    e258:	ldr	x0, [sp, #8]
    e25c:	str	xzr, [x0]
    e260:	ldr	x0, [sp, #8]
    e264:	str	xzr, [x0, #8]
    e268:	nop
    e26c:	add	sp, sp, #0x10
    e270:	ret
    e274:	nop

000000000000e278 <grub_memcpy>:
    e278:	stp	x29, x30, [sp, #-48]!
    e27c:	mov	x29, sp
    e280:	str	x0, [sp, #40]
    e284:	str	x1, [sp, #32]
    e288:	str	x2, [sp, #24]
    e28c:	ldr	x2, [sp, #24]
    e290:	ldr	x1, [sp, #32]
    e294:	ldr	x0, [sp, #40]
    e298:	bl	f08c <grub_memmove>
    e29c:	ldp	x29, x30, [sp], #48
    e2a0:	ret

000000000000e2a4 <grub_term_setcolorstate>:
    e2a4:	stp	x29, x30, [sp, #-32]!
    e2a8:	mov	x29, sp
    e2ac:	str	x0, [sp, #24]
    e2b0:	str	w1, [sp, #20]
    e2b4:	ldr	x0, [sp, #24]
    e2b8:	ldr	x0, [x0, #88]
    e2bc:	cmp	x0, #0x0
    e2c0:	b.eq	e2d8 <grub_term_setcolorstate+0x34>  // b.none
    e2c4:	ldr	x0, [sp, #24]
    e2c8:	ldr	x2, [x0, #88]
    e2cc:	ldr	w1, [sp, #20]
    e2d0:	ldr	x0, [sp, #24]
    e2d4:	blr	x2
    e2d8:	nop
    e2dc:	ldp	x29, x30, [sp], #32
    e2e0:	ret

000000000000e2e4 <grub_setcolorstate>:
    e2e4:	stp	x29, x30, [sp, #-48]!
    e2e8:	mov	x29, sp
    e2ec:	str	w0, [sp, #28]
    e2f0:	adrp	x0, 0 <_start>
    e2f4:	add	x0, x0, #0x0
    e2f8:	ldr	x0, [x0]
    e2fc:	ldr	x0, [x0]
    e300:	str	x0, [sp, #40]
    e304:	b	e320 <grub_setcolorstate+0x3c>
    e308:	ldr	w1, [sp, #28]
    e30c:	ldr	x0, [sp, #40]
    e310:	bl	e2a4 <grub_term_setcolorstate>
    e314:	ldr	x0, [sp, #40]
    e318:	ldr	x0, [x0]
    e31c:	str	x0, [sp, #40]
    e320:	ldr	x0, [sp, #40]
    e324:	cmp	x0, #0x0
    e328:	b.ne	e308 <grub_setcolorstate+0x24>  // b.any
    e32c:	nop
    e330:	nop
    e334:	ldp	x29, x30, [sp], #48
    e338:	ret
    e33c:	nop
	...

000000000000e348 <grub_command_find>:
    e348:	stp	x29, x30, [sp, #-32]!
    e34c:	mov	x29, sp
    e350:	str	x0, [sp, #24]
    e354:	adrp	x0, 0 <_start>
    e358:	add	x0, x0, #0x0
    e35c:	ldr	x0, [x0]
    e360:	ldr	x0, [x0]
    e364:	ldr	x1, [sp, #24]
    e368:	bl	e148 <grub_named_list_find>
    e36c:	ldp	x29, x30, [sp], #32
    e370:	ret
    e374:	nop
	...

000000000000e380 <grub_command_execute>:
    e380:	stp	x29, x30, [sp, #-64]!
    e384:	mov	x29, sp
    e388:	str	x0, [sp, #40]
    e38c:	str	w1, [sp, #36]
    e390:	str	x2, [sp, #24]
    e394:	ldr	x0, [sp, #40]
    e398:	bl	e348 <grub_command_find>
    e39c:	str	x0, [sp, #56]
    e3a0:	ldr	x0, [sp, #56]
    e3a4:	cmp	x0, #0x0
    e3a8:	b.eq	e3c8 <grub_command_execute+0x48>  // b.none
    e3ac:	ldr	x0, [sp, #56]
    e3b0:	ldr	x3, [x0, #32]
    e3b4:	ldr	x2, [sp, #24]
    e3b8:	ldr	w1, [sp, #36]
    e3bc:	ldr	x0, [sp, #56]
    e3c0:	blr	x3
    e3c4:	b	e3cc <grub_command_execute+0x4c>
    e3c8:	mov	w0, #0x5                   	// #5
    e3cc:	ldp	x29, x30, [sp], #64
    e3d0:	ret

000000000000e3d4 <grub_modules_get_end>:
    e3d4:	sub	sp, sp, #0x10
    e3d8:	adrp	x0, 0 <_start>
    e3dc:	add	x0, x0, #0x0
    e3e0:	ldr	x0, [x0]
    e3e4:	ldr	x0, [x0]
    e3e8:	str	x0, [sp, #8]
    e3ec:	ldr	x0, [sp, #8]
    e3f0:	cmp	x0, #0x0
    e3f4:	b.eq	e410 <grub_modules_get_end+0x3c>  // b.none
    e3f8:	ldr	x0, [sp, #8]
    e3fc:	ldr	w1, [x0]
    e400:	mov	w0, #0x696d                	// #26989
    e404:	movk	w0, #0x676d, lsl #16
    e408:	cmp	w1, w0
    e40c:	b.eq	e424 <grub_modules_get_end+0x50>  // b.none
    e410:	adrp	x0, 0 <_start>
    e414:	add	x0, x0, #0x0
    e418:	ldr	x0, [x0]
    e41c:	ldr	x0, [x0]
    e420:	b	e440 <grub_modules_get_end+0x6c>
    e424:	ldr	x0, [sp, #8]
    e428:	ldr	x1, [x0, #16]
    e42c:	adrp	x0, 0 <_start>
    e430:	add	x0, x0, #0x0
    e434:	ldr	x0, [x0]
    e438:	ldr	x0, [x0]
    e43c:	add	x0, x1, x0
    e440:	add	sp, sp, #0x10
    e444:	ret
	...

000000000000e450 <grub_load_modules>:
    e450:	stp	x29, x30, [sp, #-32]!
    e454:	mov	x29, sp
    e458:	adrp	x0, 0 <_start>
    e45c:	add	x0, x0, #0x0
    e460:	ldr	x0, [x0]
    e464:	ldr	x0, [x0]
    e468:	cmp	x0, #0x0
    e46c:	b.eq	e4c0 <grub_load_modules+0x70>  // b.none
    e470:	adrp	x0, 0 <_start>
    e474:	add	x0, x0, #0x0
    e478:	ldr	x0, [x0]
    e47c:	ldr	x0, [x0]
    e480:	ldr	w1, [x0]
    e484:	mov	w0, #0x696d                	// #26989
    e488:	movk	w0, #0x676d, lsl #16
    e48c:	cmp	w1, w0
    e490:	b.ne	e4c0 <grub_load_modules+0x70>  // b.any
    e494:	adrp	x0, 0 <_start>
    e498:	add	x0, x0, #0x0
    e49c:	ldr	x0, [x0]
    e4a0:	ldr	x0, [x0]
    e4a4:	ldr	x1, [x0, #8]
    e4a8:	adrp	x0, 0 <_start>
    e4ac:	add	x0, x0, #0x0
    e4b0:	ldr	x0, [x0]
    e4b4:	ldr	x0, [x0]
    e4b8:	add	x0, x1, x0
    e4bc:	b	e4c4 <grub_load_modules+0x74>
    e4c0:	mov	x0, #0x0                   	// #0
    e4c4:	str	x0, [sp, #24]
    e4c8:	b	e568 <grub_load_modules+0x118>
    e4cc:	ldr	x0, [sp, #24]
    e4d0:	ldr	w0, [x0]
    e4d4:	cmp	w0, #0x0
    e4d8:	b.ne	e544 <grub_load_modules+0xf4>  // b.any
    e4dc:	ldr	x0, [sp, #24]
    e4e0:	add	x2, x0, #0x8
    e4e4:	ldr	x0, [sp, #24]
    e4e8:	ldr	w0, [x0, #4]
    e4ec:	mov	w0, w0
    e4f0:	sub	x0, x0, #0x8
    e4f4:	mov	x1, x0
    e4f8:	mov	x0, x2
    e4fc:	bl	c3d0 <grub_dl_load_core>
    e500:	cmp	x0, #0x0
    e504:	b.ne	e524 <grub_load_modules+0xd4>  // b.any
    e508:	adrp	x0, 0 <_start>
    e50c:	add	x0, x0, #0x0
    e510:	ldr	x1, [x0]
    e514:	adrp	x0, 0 <_start>
    e518:	add	x0, x0, #0x0
    e51c:	ldr	x0, [x0]
    e520:	bl	117e8 <grub_fatal>
    e524:	adrp	x0, 0 <_start>
    e528:	add	x0, x0, #0x0
    e52c:	ldr	x0, [x0]
    e530:	ldr	w0, [x0]
    e534:	cmp	w0, #0x0
    e538:	b.eq	e548 <grub_load_modules+0xf8>  // b.none
    e53c:	bl	d190 <grub_print_error>
    e540:	b	e548 <grub_load_modules+0xf8>
    e544:	nop
    e548:	ldr	x0, [sp, #24]
    e54c:	ldr	w0, [x0, #4]
    e550:	mov	w0, w0
    e554:	add	x0, x0, #0x7
    e558:	and	x0, x0, #0xfffffffffffffff8
    e55c:	ldr	x1, [sp, #24]
    e560:	add	x0, x1, x0
    e564:	str	x0, [sp, #24]
    e568:	ldr	x0, [sp, #24]
    e56c:	cmp	x0, #0x0
    e570:	b.eq	e5a8 <grub_load_modules+0x158>  // b.none
    e574:	adrp	x0, 0 <_start>
    e578:	add	x0, x0, #0x0
    e57c:	ldr	x0, [x0]
    e580:	ldr	x0, [x0]
    e584:	ldr	x1, [x0, #16]
    e588:	adrp	x0, 0 <_start>
    e58c:	add	x0, x0, #0x0
    e590:	ldr	x0, [x0]
    e594:	ldr	x0, [x0]
    e598:	add	x1, x1, x0
    e59c:	ldr	x0, [sp, #24]
    e5a0:	cmp	x1, x0
    e5a4:	b.hi	e4cc <grub_load_modules+0x7c>  // b.pmore
    e5a8:	nop
    e5ac:	ldp	x29, x30, [sp], #32
    e5b0:	ret
    e5b4:	nop
	...

000000000000e5d8 <grub_load_config>:
    e5d8:	stp	x29, x30, [sp, #-32]!
    e5dc:	mov	x29, sp
    e5e0:	adrp	x0, 0 <_start>
    e5e4:	add	x0, x0, #0x0
    e5e8:	ldr	x0, [x0]
    e5ec:	ldr	x0, [x0]
    e5f0:	cmp	x0, #0x0
    e5f4:	b.eq	e648 <grub_load_config+0x70>  // b.none
    e5f8:	adrp	x0, 0 <_start>
    e5fc:	add	x0, x0, #0x0
    e600:	ldr	x0, [x0]
    e604:	ldr	x0, [x0]
    e608:	ldr	w1, [x0]
    e60c:	mov	w0, #0x696d                	// #26989
    e610:	movk	w0, #0x676d, lsl #16
    e614:	cmp	w1, w0
    e618:	b.ne	e648 <grub_load_config+0x70>  // b.any
    e61c:	adrp	x0, 0 <_start>
    e620:	add	x0, x0, #0x0
    e624:	ldr	x0, [x0]
    e628:	ldr	x0, [x0]
    e62c:	ldr	x1, [x0, #8]
    e630:	adrp	x0, 0 <_start>
    e634:	add	x0, x0, #0x0
    e638:	ldr	x0, [x0]
    e63c:	ldr	x0, [x0]
    e640:	add	x0, x1, x0
    e644:	b	e64c <grub_load_config+0x74>
    e648:	mov	x0, #0x0                   	// #0
    e64c:	str	x0, [sp, #24]
    e650:	b	e730 <grub_load_config+0x158>
    e654:	ldr	x0, [sp, #24]
    e658:	ldr	w0, [x0]
    e65c:	cmp	w0, #0x2
    e660:	b.eq	e688 <grub_load_config+0xb0>  // b.none
    e664:	ldr	x0, [sp, #24]
    e668:	ldr	w0, [x0, #4]
    e66c:	mov	w0, w0
    e670:	add	x0, x0, #0x7
    e674:	and	x0, x0, #0xfffffffffffffff8
    e678:	ldr	x1, [sp, #24]
    e67c:	add	x0, x1, x0
    e680:	str	x0, [sp, #24]
    e684:	b	e730 <grub_load_config+0x158>
    e688:	ldr	x0, [sp, #24]
    e68c:	ldr	w0, [x0, #4]
    e690:	mov	w0, w0
    e694:	sub	x0, x0, #0x7
    e698:	bl	8348 <grub_malloc>
    e69c:	mov	x1, x0
    e6a0:	adrp	x0, 0 <_start>
    e6a4:	add	x0, x0, #0x0
    e6a8:	ldr	x0, [x0]
    e6ac:	str	x1, [x0]
    e6b0:	adrp	x0, 0 <_start>
    e6b4:	add	x0, x0, #0x0
    e6b8:	ldr	x0, [x0]
    e6bc:	ldr	x0, [x0]
    e6c0:	cmp	x0, #0x0
    e6c4:	b.ne	e6d0 <grub_load_config+0xf8>  // b.any
    e6c8:	bl	d190 <grub_print_error>
    e6cc:	b	e774 <grub_load_config+0x19c>
    e6d0:	adrp	x0, 0 <_start>
    e6d4:	add	x0, x0, #0x0
    e6d8:	ldr	x0, [x0]
    e6dc:	ldr	x3, [x0]
    e6e0:	ldr	x0, [sp, #24]
    e6e4:	add	x1, x0, #0x8
    e6e8:	ldr	x0, [sp, #24]
    e6ec:	ldr	w0, [x0, #4]
    e6f0:	mov	w0, w0
    e6f4:	sub	x0, x0, #0x8
    e6f8:	mov	x2, x0
    e6fc:	mov	x0, x3
    e700:	bl	e278 <grub_memcpy>
    e704:	adrp	x0, 0 <_start>
    e708:	add	x0, x0, #0x0
    e70c:	ldr	x0, [x0]
    e710:	ldr	x1, [x0]
    e714:	ldr	x0, [sp, #24]
    e718:	ldr	w0, [x0, #4]
    e71c:	mov	w0, w0
    e720:	sub	x0, x0, #0x8
    e724:	add	x0, x1, x0
    e728:	strb	wzr, [x0]
    e72c:	b	e774 <grub_load_config+0x19c>
    e730:	ldr	x0, [sp, #24]
    e734:	cmp	x0, #0x0
    e738:	b.eq	e774 <grub_load_config+0x19c>  // b.none
    e73c:	adrp	x0, 0 <_start>
    e740:	add	x0, x0, #0x0
    e744:	ldr	x0, [x0]
    e748:	ldr	x0, [x0]
    e74c:	ldr	x1, [x0, #16]
    e750:	adrp	x0, 0 <_start>
    e754:	add	x0, x0, #0x0
    e758:	ldr	x0, [x0]
    e75c:	ldr	x0, [x0]
    e760:	add	x1, x1, x0
    e764:	ldr	x0, [sp, #24]
    e768:	cmp	x1, x0
    e76c:	b.hi	e654 <grub_load_config+0x7c>  // b.pmore
    e770:	b	e774 <grub_load_config+0x19c>
    e774:	nop
    e778:	ldp	x29, x30, [sp], #32
    e77c:	ret
	...

000000000000e790 <grub_env_write_root>:
    e790:	stp	x29, x30, [sp, #-48]!
    e794:	mov	x29, sp
    e798:	str	x0, [sp, #24]
    e79c:	str	x1, [sp, #16]
    e7a0:	ldr	x0, [sp, #16]
    e7a4:	bl	fe3c <grub_strlen>
    e7a8:	str	x0, [sp, #40]
    e7ac:	ldr	x0, [sp, #16]
    e7b0:	ldrb	w0, [x0]
    e7b4:	cmp	w0, #0x28
    e7b8:	b.ne	e7f8 <grub_env_write_root+0x68>  // b.any
    e7bc:	ldr	x0, [sp, #40]
    e7c0:	sub	x0, x0, #0x1
    e7c4:	ldr	x1, [sp, #16]
    e7c8:	add	x0, x1, x0
    e7cc:	ldrb	w0, [x0]
    e7d0:	cmp	w0, #0x29
    e7d4:	b.ne	e7f8 <grub_env_write_root+0x68>  // b.any
    e7d8:	ldr	x0, [sp, #16]
    e7dc:	add	x2, x0, #0x1
    e7e0:	ldr	x0, [sp, #40]
    e7e4:	sub	x0, x0, #0x2
    e7e8:	mov	x1, x0
    e7ec:	mov	x0, x2
    e7f0:	bl	fc94 <grub_strndup>
    e7f4:	b	e800 <grub_env_write_root+0x70>
    e7f8:	ldr	x0, [sp, #16]
    e7fc:	bl	fc40 <grub_strdup>
    e800:	ldp	x29, x30, [sp], #48
    e804:	ret

000000000000e808 <grub_set_prefix_and_root>:
    e808:	stp	x29, x30, [sp, #-128]!
    e80c:	mov	x29, sp
    e810:	str	xzr, [sp, #120]
    e814:	str	xzr, [sp, #112]
    e818:	str	xzr, [sp, #32]
    e81c:	str	xzr, [sp, #24]
    e820:	str	xzr, [sp, #104]
    e824:	adrp	x0, 0 <_start>
    e828:	add	x0, x0, #0x0
    e82c:	ldr	x0, [x0]
    e830:	ldr	x0, [x0]
    e834:	cmp	x0, #0x0
    e838:	b.eq	e88c <grub_set_prefix_and_root+0x84>  // b.none
    e83c:	adrp	x0, 0 <_start>
    e840:	add	x0, x0, #0x0
    e844:	ldr	x0, [x0]
    e848:	ldr	x0, [x0]
    e84c:	ldr	w1, [x0]
    e850:	mov	w0, #0x696d                	// #26989
    e854:	movk	w0, #0x676d, lsl #16
    e858:	cmp	w1, w0
    e85c:	b.ne	e88c <grub_set_prefix_and_root+0x84>  // b.any
    e860:	adrp	x0, 0 <_start>
    e864:	add	x0, x0, #0x0
    e868:	ldr	x0, [x0]
    e86c:	ldr	x0, [x0]
    e870:	ldr	x1, [x0, #8]
    e874:	adrp	x0, 0 <_start>
    e878:	add	x0, x0, #0x0
    e87c:	ldr	x0, [x0]
    e880:	ldr	x0, [x0]
    e884:	add	x0, x1, x0
    e888:	b	e890 <grub_set_prefix_and_root+0x88>
    e88c:	mov	x0, #0x0                   	// #0
    e890:	str	x0, [sp, #96]
    e894:	b	e8d4 <grub_set_prefix_and_root+0xcc>
    e898:	ldr	x0, [sp, #96]
    e89c:	ldr	w0, [x0]
    e8a0:	cmp	w0, #0x3
    e8a4:	b.ne	e8b4 <grub_set_prefix_and_root+0xac>  // b.any
    e8a8:	ldr	x0, [sp, #96]
    e8ac:	add	x0, x0, #0x8
    e8b0:	str	x0, [sp, #104]
    e8b4:	ldr	x0, [sp, #96]
    e8b8:	ldr	w0, [x0, #4]
    e8bc:	mov	w0, w0
    e8c0:	add	x0, x0, #0x7
    e8c4:	and	x0, x0, #0xfffffffffffffff8
    e8c8:	ldr	x1, [sp, #96]
    e8cc:	add	x0, x1, x0
    e8d0:	str	x0, [sp, #96]
    e8d4:	ldr	x0, [sp, #96]
    e8d8:	cmp	x0, #0x0
    e8dc:	b.eq	e914 <grub_set_prefix_and_root+0x10c>  // b.none
    e8e0:	adrp	x0, 0 <_start>
    e8e4:	add	x0, x0, #0x0
    e8e8:	ldr	x0, [x0]
    e8ec:	ldr	x0, [x0]
    e8f0:	ldr	x1, [x0, #16]
    e8f4:	adrp	x0, 0 <_start>
    e8f8:	add	x0, x0, #0x0
    e8fc:	ldr	x0, [x0]
    e900:	ldr	x0, [x0]
    e904:	add	x1, x1, x0
    e908:	ldr	x0, [sp, #96]
    e90c:	cmp	x1, x0
    e910:	b.hi	e898 <grub_set_prefix_and_root+0x90>  // b.pmore
    e914:	adrp	x0, 0 <_start>
    e918:	add	x0, x0, #0x0
    e91c:	ldr	x2, [x0]
    e920:	mov	x1, #0x0                   	// #0
    e924:	adrp	x0, 0 <_start>
    e928:	add	x0, x0, #0x0
    e92c:	ldr	x0, [x0]
    e930:	bl	cd08 <grub_register_variable_hook>
    e934:	add	x1, sp, #0x18
    e938:	add	x0, sp, #0x20
    e93c:	bl	52e0 <grub_machine_get_bootlocation>
    e940:	ldr	x0, [sp, #32]
    e944:	cmp	x0, #0x0
    e948:	b.eq	e9b8 <grub_set_prefix_and_root+0x1b0>  // b.none
    e94c:	ldr	x1, [sp, #32]
    e950:	ldr	x0, [sp, #24]
    e954:	cmp	x0, #0x0
    e958:	b.ne	e968 <grub_set_prefix_and_root+0x160>  // b.any
    e95c:	adrp	x0, 0 <_start>
    e960:	add	x0, x0, #0x0
    e964:	ldr	x0, [x0]
    e968:	mov	x2, x0
    e96c:	adrp	x0, 0 <_start>
    e970:	add	x0, x0, #0x0
    e974:	ldr	x0, [x0]
    e978:	bl	11700 <grub_xasprintf>
    e97c:	str	x0, [sp, #56]
    e980:	ldr	x0, [sp, #56]
    e984:	cmp	x0, #0x0
    e988:	b.eq	e9b8 <grub_set_prefix_and_root+0x1b0>  // b.none
    e98c:	ldr	x1, [sp, #56]
    e990:	adrp	x0, 0 <_start>
    e994:	add	x0, x0, #0x0
    e998:	ldr	x0, [x0]
    e99c:	bl	c958 <grub_env_set>
    e9a0:	adrp	x0, 0 <_start>
    e9a4:	add	x0, x0, #0x0
    e9a8:	ldr	x0, [x0]
    e9ac:	bl	cda8 <grub_env_export>
    e9b0:	ldr	x0, [sp, #56]
    e9b4:	bl	83ac <grub_free>
    e9b8:	ldr	x0, [sp, #104]
    e9bc:	cmp	x0, #0x0
    e9c0:	b.eq	ea58 <grub_set_prefix_and_root+0x250>  // b.none
    e9c4:	str	xzr, [sp, #88]
    e9c8:	ldr	x0, [sp, #104]
    e9cc:	ldrb	w0, [x0]
    e9d0:	cmp	w0, #0x28
    e9d4:	b.ne	ea28 <grub_set_prefix_and_root+0x220>  // b.any
    e9d8:	mov	w1, #0x29                  	// #41
    e9dc:	ldr	x0, [sp, #104]
    e9e0:	bl	f7ec <grub_strrchr>
    e9e4:	str	x0, [sp, #88]
    e9e8:	ldr	x0, [sp, #88]
    e9ec:	cmp	x0, #0x0
    e9f0:	b.eq	ea28 <grub_set_prefix_and_root+0x220>  // b.none
    e9f4:	ldr	x0, [sp, #104]
    e9f8:	add	x2, x0, #0x1
    e9fc:	ldr	x1, [sp, #88]
    ea00:	ldr	x0, [sp, #104]
    ea04:	sub	x0, x1, x0
    ea08:	sub	x0, x0, #0x1
    ea0c:	mov	x1, x0
    ea10:	mov	x0, x2
    ea14:	bl	fc94 <grub_strndup>
    ea18:	str	x0, [sp, #120]
    ea1c:	ldr	x0, [sp, #88]
    ea20:	add	x0, x0, #0x1
    ea24:	str	x0, [sp, #88]
    ea28:	ldr	x0, [sp, #88]
    ea2c:	cmp	x0, #0x0
    ea30:	b.ne	ea3c <grub_set_prefix_and_root+0x234>  // b.any
    ea34:	ldr	x0, [sp, #104]
    ea38:	str	x0, [sp, #88]
    ea3c:	ldr	x0, [sp, #88]
    ea40:	ldrb	w0, [x0]
    ea44:	cmp	w0, #0x0
    ea48:	b.eq	ea58 <grub_set_prefix_and_root+0x250>  // b.none
    ea4c:	ldr	x0, [sp, #88]
    ea50:	bl	fc40 <grub_strdup>
    ea54:	str	x0, [sp, #112]
    ea58:	ldr	x0, [sp, #120]
    ea5c:	cmp	x0, #0x0
    ea60:	b.ne	ea7c <grub_set_prefix_and_root+0x274>  // b.any
    ea64:	ldr	x0, [sp, #32]
    ea68:	cmp	x0, #0x0
    ea6c:	b.eq	ea7c <grub_set_prefix_and_root+0x274>  // b.none
    ea70:	ldr	x0, [sp, #32]
    ea74:	str	x0, [sp, #120]
    ea78:	b	ebb8 <grub_set_prefix_and_root+0x3b0>
    ea7c:	ldr	x0, [sp, #32]
    ea80:	cmp	x0, #0x0
    ea84:	b.eq	ebb0 <grub_set_prefix_and_root+0x3a8>  // b.none
    ea88:	ldr	x0, [sp, #120]
    ea8c:	ldrb	w0, [x0]
    ea90:	cmp	w0, #0x2c
    ea94:	b.eq	eaa8 <grub_set_prefix_and_root+0x2a0>  // b.none
    ea98:	ldr	x0, [sp, #120]
    ea9c:	ldrb	w0, [x0]
    eaa0:	cmp	w0, #0x0
    eaa4:	b.ne	ebb0 <grub_set_prefix_and_root+0x3a8>  // b.any
    eaa8:	ldr	x0, [sp, #32]
    eaac:	str	x0, [sp, #80]
    eab0:	b	eb04 <grub_set_prefix_and_root+0x2fc>
    eab4:	ldr	x0, [sp, #80]
    eab8:	ldrb	w0, [x0]
    eabc:	cmp	w0, #0x5c
    eac0:	b.ne	eae8 <grub_set_prefix_and_root+0x2e0>  // b.any
    eac4:	ldr	x0, [sp, #80]
    eac8:	add	x0, x0, #0x1
    eacc:	ldrb	w0, [x0]
    ead0:	cmp	w0, #0x2c
    ead4:	b.ne	eae8 <grub_set_prefix_and_root+0x2e0>  // b.any
    ead8:	ldr	x0, [sp, #80]
    eadc:	add	x0, x0, #0x2
    eae0:	str	x0, [sp, #80]
    eae4:	b	eb04 <grub_set_prefix_and_root+0x2fc>
    eae8:	ldr	x0, [sp, #80]
    eaec:	ldrb	w0, [x0]
    eaf0:	cmp	w0, #0x2c
    eaf4:	b.eq	eb18 <grub_set_prefix_and_root+0x310>  // b.none
    eaf8:	ldr	x0, [sp, #80]
    eafc:	add	x0, x0, #0x1
    eb00:	str	x0, [sp, #80]
    eb04:	ldr	x0, [sp, #80]
    eb08:	ldrb	w0, [x0]
    eb0c:	cmp	w0, #0x0
    eb10:	b.ne	eab4 <grub_set_prefix_and_root+0x2ac>  // b.any
    eb14:	b	eb1c <grub_set_prefix_and_root+0x314>
    eb18:	nop
    eb1c:	ldr	x0, [sp, #80]
    eb20:	ldrb	w0, [x0]
    eb24:	cmp	w0, #0x0
    eb28:	b.eq	eb74 <grub_set_prefix_and_root+0x36c>  // b.none
    eb2c:	ldr	x2, [sp, #32]
    eb30:	ldr	x0, [sp, #32]
    eb34:	ldr	x1, [sp, #80]
    eb38:	sub	x0, x1, x0
    eb3c:	mov	x1, x0
    eb40:	mov	x0, x2
    eb44:	bl	fc94 <grub_strndup>
    eb48:	str	x0, [sp, #48]
    eb4c:	ldr	x2, [sp, #120]
    eb50:	ldr	x1, [sp, #48]
    eb54:	adrp	x0, 0 <_start>
    eb58:	add	x0, x0, #0x0
    eb5c:	ldr	x0, [x0]
    eb60:	bl	11700 <grub_xasprintf>
    eb64:	str	x0, [sp, #72]
    eb68:	ldr	x0, [sp, #48]
    eb6c:	bl	83ac <grub_free>
    eb70:	b	eb94 <grub_set_prefix_and_root+0x38c>
    eb74:	ldr	x0, [sp, #32]
    eb78:	ldr	x2, [sp, #120]
    eb7c:	mov	x1, x0
    eb80:	adrp	x0, 0 <_start>
    eb84:	add	x0, x0, #0x0
    eb88:	ldr	x0, [x0]
    eb8c:	bl	11700 <grub_xasprintf>
    eb90:	str	x0, [sp, #72]
    eb94:	ldr	x0, [sp, #32]
    eb98:	bl	83ac <grub_free>
    eb9c:	ldr	x0, [sp, #120]
    eba0:	bl	83ac <grub_free>
    eba4:	ldr	x0, [sp, #72]
    eba8:	str	x0, [sp, #120]
    ebac:	b	ebb8 <grub_set_prefix_and_root+0x3b0>
    ebb0:	ldr	x0, [sp, #32]
    ebb4:	bl	83ac <grub_free>
    ebb8:	ldr	x0, [sp, #24]
    ebbc:	cmp	x0, #0x0
    ebc0:	b.eq	ec80 <grub_set_prefix_and_root+0x478>  // b.none
    ebc4:	ldr	x0, [sp, #112]
    ebc8:	cmp	x0, #0x0
    ebcc:	b.ne	ec80 <grub_set_prefix_and_root+0x478>  // b.any
    ebd0:	ldr	x0, [sp, #24]
    ebd4:	bl	fe3c <grub_strlen>
    ebd8:	str	x0, [sp, #64]
    ebdc:	b	ebfc <grub_set_prefix_and_root+0x3f4>
    ebe0:	ldr	x1, [sp, #24]
    ebe4:	ldr	x0, [sp, #64]
    ebe8:	sub	x0, x0, #0x1
    ebec:	str	x0, [sp, #64]
    ebf0:	ldr	x0, [sp, #64]
    ebf4:	add	x0, x1, x0
    ebf8:	strb	wzr, [x0]
    ebfc:	ldr	x0, [sp, #64]
    ec00:	cmp	x0, #0x1
    ec04:	b.ls	ec24 <grub_set_prefix_and_root+0x41c>  // b.plast
    ec08:	ldr	x1, [sp, #24]
    ec0c:	ldr	x0, [sp, #64]
    ec10:	sub	x0, x0, #0x1
    ec14:	add	x0, x1, x0
    ec18:	ldrb	w0, [x0]
    ec1c:	cmp	w0, #0x2f
    ec20:	b.eq	ebe0 <grub_set_prefix_and_root+0x3d8>  // b.none
    ec24:	ldr	x0, [sp, #64]
    ec28:	cmp	x0, #0x8
    ec2c:	b.ls	ec74 <grub_set_prefix_and_root+0x46c>  // b.plast
    ec30:	ldr	x1, [sp, #24]
    ec34:	ldr	x0, [sp, #64]
    ec38:	sub	x0, x0, #0x9
    ec3c:	add	x3, x1, x0
    ec40:	mov	x2, #0x9                   	// #9
    ec44:	adrp	x0, 0 <_start>
    ec48:	add	x0, x0, #0x0
    ec4c:	ldr	x1, [x0]
    ec50:	mov	x0, x3
    ec54:	bl	f5d0 <grub_memcmp>
    ec58:	cmp	w0, #0x0
    ec5c:	b.ne	ec74 <grub_set_prefix_and_root+0x46c>  // b.any
    ec60:	ldr	x1, [sp, #24]
    ec64:	ldr	x0, [sp, #64]
    ec68:	sub	x0, x0, #0x9
    ec6c:	add	x0, x1, x0
    ec70:	strb	wzr, [x0]
    ec74:	ldr	x0, [sp, #24]
    ec78:	str	x0, [sp, #112]
    ec7c:	b	ec88 <grub_set_prefix_and_root+0x480>
    ec80:	ldr	x0, [sp, #24]
    ec84:	bl	83ac <grub_free>
    ec88:	ldr	x0, [sp, #120]
    ec8c:	cmp	x0, #0x0
    ec90:	b.eq	ed04 <grub_set_prefix_and_root+0x4fc>  // b.none
    ec94:	ldr	x0, [sp, #112]
    ec98:	cmp	x0, #0x0
    ec9c:	b.ne	ecac <grub_set_prefix_and_root+0x4a4>  // b.any
    eca0:	adrp	x0, 0 <_start>
    eca4:	add	x0, x0, #0x0
    eca8:	ldr	x0, [x0]
    ecac:	mov	x2, x0
    ecb0:	ldr	x1, [sp, #120]
    ecb4:	adrp	x0, 0 <_start>
    ecb8:	add	x0, x0, #0x0
    ecbc:	ldr	x0, [x0]
    ecc0:	bl	11700 <grub_xasprintf>
    ecc4:	str	x0, [sp, #40]
    ecc8:	ldr	x0, [sp, #40]
    eccc:	cmp	x0, #0x0
    ecd0:	b.eq	ecf0 <grub_set_prefix_and_root+0x4e8>  // b.none
    ecd4:	ldr	x1, [sp, #40]
    ecd8:	adrp	x0, 0 <_start>
    ecdc:	add	x0, x0, #0x0
    ece0:	ldr	x0, [x0]
    ece4:	bl	c958 <grub_env_set>
    ece8:	ldr	x0, [sp, #40]
    ecec:	bl	83ac <grub_free>
    ecf0:	ldr	x1, [sp, #120]
    ecf4:	adrp	x0, 0 <_start>
    ecf8:	add	x0, x0, #0x0
    ecfc:	ldr	x0, [x0]
    ed00:	bl	c958 <grub_env_set>
    ed04:	ldr	x0, [sp, #120]
    ed08:	bl	83ac <grub_free>
    ed0c:	ldr	x0, [sp, #112]
    ed10:	bl	83ac <grub_free>
    ed14:	bl	d190 <grub_print_error>
    ed18:	nop
    ed1c:	ldp	x29, x30, [sp], #128
    ed20:	ret
    ed24:	nop
	...

000000000000ed70 <grub_load_normal_mode>:
    ed70:	stp	x29, x30, [sp, #-16]!
    ed74:	mov	x29, sp
    ed78:	adrp	x0, 0 <_start>
    ed7c:	add	x0, x0, #0x0
    ed80:	ldr	x0, [x0]
    ed84:	bl	c520 <grub_dl_load>
    ed88:	bl	d190 <grub_print_error>
    ed8c:	adrp	x0, 0 <_start>
    ed90:	add	x0, x0, #0x0
    ed94:	ldr	x0, [x0]
    ed98:	str	wzr, [x0]
    ed9c:	mov	x2, #0x0                   	// #0
    eda0:	mov	w1, #0x0                   	// #0
    eda4:	adrp	x0, 0 <_start>
    eda8:	add	x0, x0, #0x0
    edac:	ldr	x0, [x0]
    edb0:	bl	e380 <grub_command_execute>
    edb4:	nop
    edb8:	ldp	x29, x30, [sp], #16
    edbc:	ret
	...

000000000000edd0 <reclaim_module_space>:
    edd0:	stp	x29, x30, [sp, #-32]!
    edd4:	mov	x29, sp
    edd8:	adrp	x0, 0 <_start>
    eddc:	add	x0, x0, #0x0
    ede0:	ldr	x0, [x0]
    ede4:	ldr	x0, [x0]
    ede8:	cmp	x0, #0x0
    edec:	b.eq	ee20 <reclaim_module_space+0x50>  // b.none
    edf0:	adrp	x0, 0 <_start>
    edf4:	add	x0, x0, #0x0
    edf8:	ldr	x0, [x0]
    edfc:	ldr	x0, [x0]
    ee00:	str	x0, [sp, #24]
    ee04:	bl	e3d4 <grub_modules_get_end>
    ee08:	str	x0, [sp, #16]
    ee0c:	adrp	x0, 0 <_start>
    ee10:	add	x0, x0, #0x0
    ee14:	ldr	x0, [x0]
    ee18:	str	xzr, [x0]
    ee1c:	b	ee24 <reclaim_module_space+0x54>
    ee20:	nop
    ee24:	ldp	x29, x30, [sp], #32
    ee28:	ret
    ee2c:	nop
	...

000000000000ee38 <grub_main>:
    ee38:	stp	x29, x30, [sp, #-16]!
    ee3c:	mov	x29, sp
    ee40:	bl	68 <grub_machine_init>
    ee44:	mov	w0, #0x2                   	// #2
    ee48:	bl	e2e4 <grub_setcolorstate>
    ee4c:	adrp	x0, 0 <_start>
    ee50:	add	x0, x0, #0x0
    ee54:	ldr	x0, [x0]
    ee58:	bl	f1b4 <grub_err_printf>
    ee5c:	mov	w0, #0x0                   	// #0
    ee60:	bl	e2e4 <grub_setcolorstate>
    ee64:	bl	e5d8 <grub_load_config>
    ee68:	bl	13178 <grub_register_exported_symbols>
    ee6c:	bl	e450 <grub_load_modules>
    ee70:	bl	e808 <grub_set_prefix_and_root>
    ee74:	adrp	x0, 0 <_start>
    ee78:	add	x0, x0, #0x0
    ee7c:	ldr	x0, [x0]
    ee80:	bl	cda8 <grub_env_export>
    ee84:	adrp	x0, 0 <_start>
    ee88:	add	x0, x0, #0x0
    ee8c:	ldr	x0, [x0]
    ee90:	bl	cda8 <grub_env_export>
    ee94:	bl	edd0 <reclaim_module_space>
    ee98:	bl	8f90 <grub_register_core_commands>
    ee9c:	adrp	x0, 0 <_start>
    eea0:	add	x0, x0, #0x0
    eea4:	ldr	x0, [x0]
    eea8:	ldr	x0, [x0]
    eeac:	cmp	x0, #0x0
    eeb0:	b.eq	eec8 <grub_main+0x90>  // b.none
    eeb4:	adrp	x0, 0 <_start>
    eeb8:	add	x0, x0, #0x0
    eebc:	ldr	x0, [x0]
    eec0:	ldr	x0, [x0]
    eec4:	bl	11ff8 <grub_parser_execute>
    eec8:	bl	ed70 <grub_load_normal_mode>
    eecc:	bl	12db0 <grub_rescue_run>
	...

000000000000eef0 <grub_memcpy>:
    eef0:	stp	x29, x30, [sp, #-48]!
    eef4:	mov	x29, sp
    eef8:	str	x0, [sp, #40]
    eefc:	str	x1, [sp, #32]
    ef00:	str	x2, [sp, #24]
    ef04:	ldr	x2, [sp, #24]
    ef08:	ldr	x1, [sp, #32]
    ef0c:	ldr	x0, [sp, #40]
    ef10:	bl	f08c <grub_memmove>
    ef14:	ldp	x29, x30, [sp], #48
    ef18:	ret

000000000000ef1c <grub_isdigit>:
    ef1c:	sub	sp, sp, #0x10
    ef20:	str	w0, [sp, #12]
    ef24:	ldr	w0, [sp, #12]
    ef28:	cmp	w0, #0x2f
    ef2c:	b.le	ef44 <grub_isdigit+0x28>
    ef30:	ldr	w0, [sp, #12]
    ef34:	cmp	w0, #0x39
    ef38:	b.gt	ef44 <grub_isdigit+0x28>
    ef3c:	mov	w0, #0x1                   	// #1
    ef40:	b	ef48 <grub_isdigit+0x2c>
    ef44:	mov	w0, #0x0                   	// #0
    ef48:	add	sp, sp, #0x10
    ef4c:	ret

000000000000ef50 <grub_tolower>:
    ef50:	sub	sp, sp, #0x10
    ef54:	str	w0, [sp, #12]
    ef58:	ldr	w0, [sp, #12]
    ef5c:	cmp	w0, #0x40
    ef60:	b.le	ef7c <grub_tolower+0x2c>
    ef64:	ldr	w0, [sp, #12]
    ef68:	cmp	w0, #0x5a
    ef6c:	b.gt	ef7c <grub_tolower+0x2c>
    ef70:	ldr	w0, [sp, #12]
    ef74:	add	w0, w0, #0x20
    ef78:	b	ef80 <grub_tolower+0x30>
    ef7c:	ldr	w0, [sp, #12]
    ef80:	add	sp, sp, #0x10
    ef84:	ret

000000000000ef88 <grub_puts>:
    ef88:	stp	x29, x30, [sp, #-48]!
    ef8c:	mov	x29, sp
    ef90:	str	x0, [sp, #24]
    ef94:	mov	w0, #0xa                   	// #10
    ef98:	strh	w0, [sp, #40]
    ef9c:	adrp	x0, 0 <_start>
    efa0:	add	x0, x0, #0x0
    efa4:	ldr	x0, [x0]
    efa8:	ldr	x1, [x0]
    efac:	ldr	x0, [sp, #24]
    efb0:	blr	x1
    efb4:	adrp	x0, 0 <_start>
    efb8:	add	x0, x0, #0x0
    efbc:	ldr	x0, [x0]
    efc0:	ldr	x1, [x0]
    efc4:	add	x0, sp, #0x28
    efc8:	blr	x1
    efcc:	mov	w0, #0x1                   	// #1
    efd0:	ldp	x29, x30, [sp], #48
    efd4:	ret
	...

000000000000efe0 <free_printf_args>:
    efe0:	stp	x29, x30, [sp, #-32]!
    efe4:	mov	x29, sp
    efe8:	str	x0, [sp, #24]
    efec:	ldr	x0, [sp, #24]
    eff0:	ldr	x1, [x0, #256]
    eff4:	ldr	x0, [sp, #24]
    eff8:	cmp	x1, x0
    effc:	b.eq	f00c <free_printf_args+0x2c>  // b.none
    f000:	ldr	x0, [sp, #24]
    f004:	ldr	x0, [x0, #256]
    f008:	bl	83ac <grub_free>
    f00c:	nop
    f010:	ldp	x29, x30, [sp], #32
    f014:	ret

000000000000f018 <grub_iswordseparator>:
    f018:	stp	x29, x30, [sp, #-32]!
    f01c:	mov	x29, sp
    f020:	str	w0, [sp, #28]
    f024:	ldr	w0, [sp, #28]
    f028:	bl	f9a0 <grub_isspace>
    f02c:	cmp	w0, #0x0
    f030:	b.ne	f064 <grub_iswordseparator+0x4c>  // b.any
    f034:	ldr	w0, [sp, #28]
    f038:	cmp	w0, #0x2c
    f03c:	b.eq	f064 <grub_iswordseparator+0x4c>  // b.none
    f040:	ldr	w0, [sp, #28]
    f044:	cmp	w0, #0x3b
    f048:	b.eq	f064 <grub_iswordseparator+0x4c>  // b.none
    f04c:	ldr	w0, [sp, #28]
    f050:	cmp	w0, #0x7c
    f054:	b.eq	f064 <grub_iswordseparator+0x4c>  // b.none
    f058:	ldr	w0, [sp, #28]
    f05c:	cmp	w0, #0x26
    f060:	b.ne	f06c <grub_iswordseparator+0x54>  // b.any
    f064:	mov	w0, #0x1                   	// #1
    f068:	b	f070 <grub_iswordseparator+0x58>
    f06c:	mov	w0, #0x0                   	// #0
    f070:	ldp	x29, x30, [sp], #32
    f074:	ret

000000000000f078 <grub_gettext_dummy>:
    f078:	sub	sp, sp, #0x10
    f07c:	str	x0, [sp, #8]
    f080:	ldr	x0, [sp, #8]
    f084:	add	sp, sp, #0x10
    f088:	ret

000000000000f08c <grub_memmove>:
    f08c:	sub	sp, sp, #0x30
    f090:	str	x0, [sp, #24]
    f094:	str	x1, [sp, #16]
    f098:	str	x2, [sp, #8]
    f09c:	ldr	x0, [sp, #24]
    f0a0:	str	x0, [sp, #40]
    f0a4:	ldr	x0, [sp, #16]
    f0a8:	str	x0, [sp, #32]
    f0ac:	ldr	x1, [sp, #40]
    f0b0:	ldr	x0, [sp, #32]
    f0b4:	cmp	x1, x0
    f0b8:	b.cs	f0f8 <grub_memmove+0x6c>  // b.hs, b.nlast
    f0bc:	b	f0e0 <grub_memmove+0x54>
    f0c0:	ldr	x1, [sp, #32]
    f0c4:	add	x0, x1, #0x1
    f0c8:	str	x0, [sp, #32]
    f0cc:	ldr	x0, [sp, #40]
    f0d0:	add	x2, x0, #0x1
    f0d4:	str	x2, [sp, #40]
    f0d8:	ldrb	w1, [x1]
    f0dc:	strb	w1, [x0]
    f0e0:	ldr	x0, [sp, #8]
    f0e4:	sub	x1, x0, #0x1
    f0e8:	str	x1, [sp, #8]
    f0ec:	cmp	x0, #0x0
    f0f0:	b.ne	f0c0 <grub_memmove+0x34>  // b.any
    f0f4:	b	f158 <grub_memmove+0xcc>
    f0f8:	ldr	x1, [sp, #40]
    f0fc:	ldr	x0, [sp, #8]
    f100:	add	x0, x1, x0
    f104:	str	x0, [sp, #40]
    f108:	ldr	x1, [sp, #32]
    f10c:	ldr	x0, [sp, #8]
    f110:	add	x0, x1, x0
    f114:	str	x0, [sp, #32]
    f118:	b	f144 <grub_memmove+0xb8>
    f11c:	ldr	x0, [sp, #32]
    f120:	sub	x0, x0, #0x1
    f124:	str	x0, [sp, #32]
    f128:	ldr	x0, [sp, #40]
    f12c:	sub	x0, x0, #0x1
    f130:	str	x0, [sp, #40]
    f134:	ldr	x0, [sp, #32]
    f138:	ldrb	w1, [x0]
    f13c:	ldr	x0, [sp, #40]
    f140:	strb	w1, [x0]
    f144:	ldr	x0, [sp, #8]
    f148:	sub	x1, x0, #0x1
    f14c:	str	x1, [sp, #8]
    f150:	cmp	x0, #0x0
    f154:	b.ne	f11c <grub_memmove+0x90>  // b.any
    f158:	ldr	x0, [sp, #24]
    f15c:	add	sp, sp, #0x30
    f160:	ret

000000000000f164 <grub_strcpy>:
    f164:	sub	sp, sp, #0x20
    f168:	str	x0, [sp, #8]
    f16c:	str	x1, [sp]
    f170:	ldr	x0, [sp, #8]
    f174:	str	x0, [sp, #24]
    f178:	nop
    f17c:	ldr	x1, [sp]
    f180:	add	x0, x1, #0x1
    f184:	str	x0, [sp]
    f188:	ldr	x0, [sp, #24]
    f18c:	add	x2, x0, #0x1
    f190:	str	x2, [sp, #24]
    f194:	ldrb	w1, [x1]
    f198:	strb	w1, [x0]
    f19c:	ldrb	w0, [x0]
    f1a0:	cmp	w0, #0x0
    f1a4:	b.ne	f17c <grub_strcpy+0x18>  // b.any
    f1a8:	ldr	x0, [sp, #8]
    f1ac:	add	sp, sp, #0x20
    f1b0:	ret

000000000000f1b4 <grub_err_printf>:
    f1b4:	stp	x29, x30, [sp, #-176]!
    f1b8:	mov	x29, sp
    f1bc:	str	x0, [sp, #56]
    f1c0:	str	x1, [sp, #120]
    f1c4:	str	x2, [sp, #128]
    f1c8:	str	x3, [sp, #136]
    f1cc:	str	x4, [sp, #144]
    f1d0:	str	x5, [sp, #152]
    f1d4:	str	x6, [sp, #160]
    f1d8:	str	x7, [sp, #168]
    f1dc:	add	x0, sp, #0xb0
    f1e0:	str	x0, [sp, #72]
    f1e4:	add	x0, sp, #0xb0
    f1e8:	str	x0, [sp, #80]
    f1ec:	add	x0, sp, #0x70
    f1f0:	str	x0, [sp, #88]
    f1f4:	mov	w0, #0xffffffc8            	// #-56
    f1f8:	str	w0, [sp, #96]
    f1fc:	str	wzr, [sp, #100]
    f200:	add	x2, sp, #0x10
    f204:	add	x3, sp, #0x48
    f208:	ldp	x0, x1, [x3]
    f20c:	stp	x0, x1, [x2]
    f210:	ldp	x0, x1, [x3, #16]
    f214:	stp	x0, x1, [x2, #16]
    f218:	add	x0, sp, #0x10
    f21c:	mov	x1, x0
    f220:	ldr	x0, [sp, #56]
    f224:	bl	f430 <grub_vprintf>
    f228:	str	w0, [sp, #108]
    f22c:	ldr	w0, [sp, #108]
    f230:	ldp	x29, x30, [sp], #176
    f234:	ret

000000000000f238 <grub_printf_>:
    f238:	stp	x29, x30, [sp, #-176]!
    f23c:	mov	x29, sp
    f240:	str	x0, [sp, #56]
    f244:	str	x1, [sp, #120]
    f248:	str	x2, [sp, #128]
    f24c:	str	x3, [sp, #136]
    f250:	str	x4, [sp, #144]
    f254:	str	x5, [sp, #152]
    f258:	str	x6, [sp, #160]
    f25c:	str	x7, [sp, #168]
    f260:	add	x0, sp, #0xb0
    f264:	str	x0, [sp, #64]
    f268:	add	x0, sp, #0xb0
    f26c:	str	x0, [sp, #72]
    f270:	add	x0, sp, #0x70
    f274:	str	x0, [sp, #80]
    f278:	mov	w0, #0xffffffc8            	// #-56
    f27c:	str	w0, [sp, #88]
    f280:	str	wzr, [sp, #92]
    f284:	ldr	x0, [sp, #56]
    f288:	str	x0, [sp, #96]
    f28c:	adrp	x0, 0 <_start>
    f290:	add	x0, x0, #0x0
    f294:	ldr	x0, [x0]
    f298:	ldr	x1, [x0]
    f29c:	ldr	x0, [sp, #96]
    f2a0:	blr	x1
    f2a4:	mov	x4, x0
    f2a8:	add	x2, sp, #0x10
    f2ac:	add	x3, sp, #0x40
    f2b0:	ldp	x0, x1, [x3]
    f2b4:	stp	x0, x1, [x2]
    f2b8:	ldp	x0, x1, [x3, #16]
    f2bc:	stp	x0, x1, [x2, #16]
    f2c0:	add	x0, sp, #0x10
    f2c4:	mov	x1, x0
    f2c8:	mov	x0, x4
    f2cc:	bl	f430 <grub_vprintf>
    f2d0:	str	w0, [sp, #108]
    f2d4:	ldr	w0, [sp, #108]
    f2d8:	ldp	x29, x30, [sp], #176
    f2dc:	ret
	...

000000000000f2e8 <grub_puts_>:
    f2e8:	stp	x29, x30, [sp, #-48]!
    f2ec:	mov	x29, sp
    f2f0:	str	x0, [sp, #24]
    f2f4:	ldr	x0, [sp, #24]
    f2f8:	str	x0, [sp, #40]
    f2fc:	adrp	x0, 0 <_start>
    f300:	add	x0, x0, #0x0
    f304:	ldr	x0, [x0]
    f308:	ldr	x1, [x0]
    f30c:	ldr	x0, [sp, #40]
    f310:	blr	x1
    f314:	bl	ef88 <grub_puts>
    f318:	ldp	x29, x30, [sp], #48
    f31c:	ret
	...

000000000000f328 <grub_real_dprintf>:
    f328:	stp	x29, x30, [sp, #-160]!
    f32c:	mov	x29, sp
    f330:	str	x0, [sp, #72]
    f334:	str	w1, [sp, #68]
    f338:	str	x2, [sp, #56]
    f33c:	str	x3, [sp, #48]
    f340:	str	x4, [sp, #128]
    f344:	str	x5, [sp, #136]
    f348:	str	x6, [sp, #144]
    f34c:	str	x7, [sp, #152]
    f350:	adrp	x0, 0 <_start>
    f354:	add	x0, x0, #0x0
    f358:	ldr	x0, [x0]
    f35c:	bl	cb00 <grub_env_get>
    f360:	str	x0, [sp, #120]
    f364:	ldr	x0, [sp, #120]
    f368:	cmp	x0, #0x0
    f36c:	b.eq	f40c <grub_real_dprintf+0xe4>  // b.none
    f370:	adrp	x0, 0 <_start>
    f374:	add	x0, x0, #0x0
    f378:	ldr	x1, [x0]
    f37c:	ldr	x0, [sp, #120]
    f380:	bl	f840 <grub_strword>
    f384:	cmp	w0, #0x0
    f388:	b.ne	f3a0 <grub_real_dprintf+0x78>  // b.any
    f38c:	ldr	x1, [sp, #56]
    f390:	ldr	x0, [sp, #120]
    f394:	bl	f840 <grub_strword>
    f398:	cmp	w0, #0x0
    f39c:	b.eq	f410 <grub_real_dprintf+0xe8>  // b.none
    f3a0:	ldr	w2, [sp, #68]
    f3a4:	ldr	x1, [sp, #72]
    f3a8:	adrp	x0, 0 <_start>
    f3ac:	add	x0, x0, #0x0
    f3b0:	ldr	x0, [x0]
    f3b4:	bl	f1b4 <grub_err_printf>
    f3b8:	add	x0, sp, #0xa0
    f3bc:	str	x0, [sp, #88]
    f3c0:	add	x0, sp, #0xa0
    f3c4:	str	x0, [sp, #96]
    f3c8:	add	x0, sp, #0x80
    f3cc:	str	x0, [sp, #104]
    f3d0:	mov	w0, #0xffffffe0            	// #-32
    f3d4:	str	w0, [sp, #112]
    f3d8:	str	wzr, [sp, #116]
    f3dc:	add	x2, sp, #0x10
    f3e0:	add	x3, sp, #0x58
    f3e4:	ldp	x0, x1, [x3]
    f3e8:	stp	x0, x1, [x2]
    f3ec:	ldp	x0, x1, [x3, #16]
    f3f0:	stp	x0, x1, [x2, #16]
    f3f4:	add	x0, sp, #0x10
    f3f8:	mov	x1, x0
    f3fc:	ldr	x0, [sp, #48]
    f400:	bl	f430 <grub_vprintf>
    f404:	bl	13120 <grub_refresh>
    f408:	b	f410 <grub_real_dprintf+0xe8>
    f40c:	nop
    f410:	ldp	x29, x30, [sp], #160
    f414:	ret
	...

000000000000f430 <grub_vprintf>:
    f430:	stp	x29, x30, [sp, #-368]!
    f434:	mov	x29, sp
    f438:	str	x19, [sp, #16]
    f43c:	str	x0, [sp, #72]
    f440:	mov	x19, x1
    f444:	adrp	x0, 0 <_start>
    f448:	add	x0, x0, #0x0
    f44c:	ldr	x0, [x0]
    f450:	str	x0, [sp, #352]
    f454:	add	x2, sp, #0x20
    f458:	mov	x3, x19
    f45c:	ldp	x0, x1, [x3]
    f460:	stp	x0, x1, [x2]
    f464:	ldp	x0, x1, [x3, #16]
    f468:	stp	x0, x1, [x2, #16]
    f46c:	add	x1, sp, #0x20
    f470:	add	x0, sp, #0x50
    f474:	mov	x2, x1
    f478:	mov	x1, x0
    f47c:	ldr	x0, [sp, #72]
    f480:	bl	10170 <parse_printf_args>
    f484:	add	x0, sp, #0x50
    f488:	mov	x3, x0
    f48c:	ldr	x2, [sp, #72]
    f490:	mov	x1, #0xff                  	// #255
    f494:	adrp	x0, 0 <_start>
    f498:	add	x0, x0, #0x0
    f49c:	ldr	x0, [x0]
    f4a0:	bl	109c0 <grub_vsnprintf_real>
    f4a4:	sxtw	x0, w0
    f4a8:	str	x0, [sp, #360]
    f4ac:	ldr	x0, [sp, #360]
    f4b0:	cmp	x0, #0xff
    f4b4:	b.ls	f564 <grub_vprintf+0x134>  // b.plast
    f4b8:	ldr	x0, [sp, #360]
    f4bc:	add	x0, x0, #0x1
    f4c0:	bl	8348 <grub_malloc>
    f4c4:	str	x0, [sp, #352]
    f4c8:	ldr	x0, [sp, #352]
    f4cc:	cmp	x0, #0x0
    f4d0:	b.ne	f544 <grub_vprintf+0x114>  // b.any
    f4d4:	adrp	x0, 0 <_start>
    f4d8:	add	x0, x0, #0x0
    f4dc:	ldr	x0, [x0]
    f4e0:	str	wzr, [x0]
    f4e4:	adrp	x0, 0 <_start>
    f4e8:	add	x0, x0, #0x0
    f4ec:	ldr	x0, [x0]
    f4f0:	mov	w1, #0x2e                  	// #46
    f4f4:	strb	w1, [x0, #252]
    f4f8:	adrp	x0, 0 <_start>
    f4fc:	add	x0, x0, #0x0
    f500:	ldr	x0, [x0]
    f504:	mov	w1, #0x2e                  	// #46
    f508:	strb	w1, [x0, #253]
    f50c:	adrp	x0, 0 <_start>
    f510:	add	x0, x0, #0x0
    f514:	ldr	x0, [x0]
    f518:	mov	w1, #0x2e                  	// #46
    f51c:	strb	w1, [x0, #254]
    f520:	adrp	x0, 0 <_start>
    f524:	add	x0, x0, #0x0
    f528:	ldr	x0, [x0]
    f52c:	strb	wzr, [x0, #255]
    f530:	adrp	x0, 0 <_start>
    f534:	add	x0, x0, #0x0
    f538:	ldr	x0, [x0]
    f53c:	str	x0, [sp, #352]
    f540:	b	f564 <grub_vprintf+0x134>
    f544:	add	x0, sp, #0x50
    f548:	mov	x3, x0
    f54c:	ldr	x2, [sp, #72]
    f550:	ldr	x1, [sp, #360]
    f554:	ldr	x0, [sp, #352]
    f558:	bl	109c0 <grub_vsnprintf_real>
    f55c:	sxtw	x0, w0
    f560:	str	x0, [sp, #360]
    f564:	add	x0, sp, #0x50
    f568:	bl	efe0 <free_printf_args>
    f56c:	adrp	x0, 0 <_start>
    f570:	add	x0, x0, #0x0
    f574:	ldr	x0, [x0]
    f578:	ldr	x1, [x0]
    f57c:	ldr	x0, [sp, #352]
    f580:	blr	x1
    f584:	ldr	x1, [sp, #352]
    f588:	adrp	x0, 0 <_start>
    f58c:	add	x0, x0, #0x0
    f590:	ldr	x0, [x0]
    f594:	cmp	x1, x0
    f598:	b.eq	f5a4 <grub_vprintf+0x174>  // b.none
    f59c:	ldr	x0, [sp, #352]
    f5a0:	bl	83ac <grub_free>
    f5a4:	ldr	x0, [sp, #360]
    f5a8:	ldr	x19, [sp, #16]
    f5ac:	ldp	x29, x30, [sp], #368
    f5b0:	ret
    f5b4:	nop
	...

000000000000f5d0 <grub_memcmp>:
    f5d0:	sub	sp, sp, #0x30
    f5d4:	str	x0, [sp, #24]
    f5d8:	str	x1, [sp, #16]
    f5dc:	str	x2, [sp, #8]
    f5e0:	ldr	x0, [sp, #24]
    f5e4:	str	x0, [sp, #40]
    f5e8:	ldr	x0, [sp, #16]
    f5ec:	str	x0, [sp, #32]
    f5f0:	b	f640 <grub_memcmp+0x70>
    f5f4:	ldr	x0, [sp, #40]
    f5f8:	ldrb	w1, [x0]
    f5fc:	ldr	x0, [sp, #32]
    f600:	ldrb	w0, [x0]
    f604:	cmp	w1, w0
    f608:	b.eq	f628 <grub_memcmp+0x58>  // b.none
    f60c:	ldr	x0, [sp, #40]
    f610:	ldrb	w0, [x0]
    f614:	mov	w1, w0
    f618:	ldr	x0, [sp, #32]
    f61c:	ldrb	w0, [x0]
    f620:	sub	w0, w1, w0
    f624:	b	f658 <grub_memcmp+0x88>
    f628:	ldr	x0, [sp, #40]
    f62c:	add	x0, x0, #0x1
    f630:	str	x0, [sp, #40]
    f634:	ldr	x0, [sp, #32]
    f638:	add	x0, x0, #0x1
    f63c:	str	x0, [sp, #32]
    f640:	ldr	x0, [sp, #8]
    f644:	sub	x1, x0, #0x1
    f648:	str	x1, [sp, #8]
    f64c:	cmp	x0, #0x0
    f650:	b.ne	f5f4 <grub_memcmp+0x24>  // b.any
    f654:	mov	w0, #0x0                   	// #0
    f658:	add	sp, sp, #0x30
    f65c:	ret

000000000000f660 <grub_strcmp>:
    f660:	sub	sp, sp, #0x10
    f664:	str	x0, [sp, #8]
    f668:	str	x1, [sp]
    f66c:	b	f6a0 <grub_strcmp+0x40>
    f670:	ldr	x0, [sp, #8]
    f674:	ldrb	w1, [x0]
    f678:	ldr	x0, [sp]
    f67c:	ldrb	w0, [x0]
    f680:	cmp	w1, w0
    f684:	b.ne	f6c4 <grub_strcmp+0x64>  // b.any
    f688:	ldr	x0, [sp, #8]
    f68c:	add	x0, x0, #0x1
    f690:	str	x0, [sp, #8]
    f694:	ldr	x0, [sp]
    f698:	add	x0, x0, #0x1
    f69c:	str	x0, [sp]
    f6a0:	ldr	x0, [sp, #8]
    f6a4:	ldrb	w0, [x0]
    f6a8:	cmp	w0, #0x0
    f6ac:	b.eq	f6c8 <grub_strcmp+0x68>  // b.none
    f6b0:	ldr	x0, [sp]
    f6b4:	ldrb	w0, [x0]
    f6b8:	cmp	w0, #0x0
    f6bc:	b.ne	f670 <grub_strcmp+0x10>  // b.any
    f6c0:	b	f6c8 <grub_strcmp+0x68>
    f6c4:	nop
    f6c8:	ldr	x0, [sp, #8]
    f6cc:	ldrb	w0, [x0]
    f6d0:	mov	w1, w0
    f6d4:	ldr	x0, [sp]
    f6d8:	ldrb	w0, [x0]
    f6dc:	sub	w0, w1, w0
    f6e0:	add	sp, sp, #0x10
    f6e4:	ret

000000000000f6e8 <grub_strncmp>:
    f6e8:	sub	sp, sp, #0x20
    f6ec:	str	x0, [sp, #24]
    f6f0:	str	x1, [sp, #16]
    f6f4:	str	x2, [sp, #8]
    f6f8:	ldr	x0, [sp, #8]
    f6fc:	cmp	x0, #0x0
    f700:	b.ne	f73c <grub_strncmp+0x54>  // b.any
    f704:	mov	w0, #0x0                   	// #0
    f708:	b	f794 <grub_strncmp+0xac>
    f70c:	ldr	x0, [sp, #24]
    f710:	ldrb	w1, [x0]
    f714:	ldr	x0, [sp, #16]
    f718:	ldrb	w0, [x0]
    f71c:	cmp	w1, w0
    f720:	b.ne	f778 <grub_strncmp+0x90>  // b.any
    f724:	ldr	x0, [sp, #24]
    f728:	add	x0, x0, #0x1
    f72c:	str	x0, [sp, #24]
    f730:	ldr	x0, [sp, #16]
    f734:	add	x0, x0, #0x1
    f738:	str	x0, [sp, #16]
    f73c:	ldr	x0, [sp, #24]
    f740:	ldrb	w0, [x0]
    f744:	cmp	w0, #0x0
    f748:	b.eq	f77c <grub_strncmp+0x94>  // b.none
    f74c:	ldr	x0, [sp, #16]
    f750:	ldrb	w0, [x0]
    f754:	cmp	w0, #0x0
    f758:	b.eq	f77c <grub_strncmp+0x94>  // b.none
    f75c:	ldr	x0, [sp, #8]
    f760:	sub	x0, x0, #0x1
    f764:	str	x0, [sp, #8]
    f768:	ldr	x0, [sp, #8]
    f76c:	cmp	x0, #0x0
    f770:	b.ne	f70c <grub_strncmp+0x24>  // b.any
    f774:	b	f77c <grub_strncmp+0x94>
    f778:	nop
    f77c:	ldr	x0, [sp, #24]
    f780:	ldrb	w0, [x0]
    f784:	mov	w1, w0
    f788:	ldr	x0, [sp, #16]
    f78c:	ldrb	w0, [x0]
    f790:	sub	w0, w1, w0
    f794:	add	sp, sp, #0x20
    f798:	ret

000000000000f79c <grub_strchr>:
    f79c:	sub	sp, sp, #0x10
    f7a0:	str	x0, [sp, #8]
    f7a4:	str	w1, [sp, #4]
    f7a8:	ldr	x0, [sp, #8]
    f7ac:	ldrb	w0, [x0]
    f7b0:	mov	w1, w0
    f7b4:	ldr	w0, [sp, #4]
    f7b8:	cmp	w0, w1
    f7bc:	b.ne	f7c8 <grub_strchr+0x2c>  // b.any
    f7c0:	ldr	x0, [sp, #8]
    f7c4:	b	f7e4 <grub_strchr+0x48>
    f7c8:	ldr	x0, [sp, #8]
    f7cc:	add	x1, x0, #0x1
    f7d0:	str	x1, [sp, #8]
    f7d4:	ldrb	w0, [x0]
    f7d8:	cmp	w0, #0x0
    f7dc:	b.ne	f7a8 <grub_strchr+0xc>  // b.any
    f7e0:	mov	x0, #0x0                   	// #0
    f7e4:	add	sp, sp, #0x10
    f7e8:	ret

000000000000f7ec <grub_strrchr>:
    f7ec:	sub	sp, sp, #0x20
    f7f0:	str	x0, [sp, #8]
    f7f4:	str	w1, [sp, #4]
    f7f8:	str	xzr, [sp, #24]
    f7fc:	ldr	x0, [sp, #8]
    f800:	ldrb	w0, [x0]
    f804:	mov	w1, w0
    f808:	ldr	w0, [sp, #4]
    f80c:	cmp	w0, w1
    f810:	b.ne	f81c <grub_strrchr+0x30>  // b.any
    f814:	ldr	x0, [sp, #8]
    f818:	str	x0, [sp, #24]
    f81c:	ldr	x0, [sp, #8]
    f820:	add	x1, x0, #0x1
    f824:	str	x1, [sp, #8]
    f828:	ldrb	w0, [x0]
    f82c:	cmp	w0, #0x0
    f830:	b.ne	f7fc <grub_strrchr+0x10>  // b.any
    f834:	ldr	x0, [sp, #24]
    f838:	add	sp, sp, #0x20
    f83c:	ret

000000000000f840 <grub_strword>:
    f840:	stp	x29, x30, [sp, #-48]!
    f844:	mov	x29, sp
    f848:	str	x0, [sp, #24]
    f84c:	str	x1, [sp, #16]
    f850:	ldr	x0, [sp, #16]
    f854:	str	x0, [sp, #40]
    f858:	b	f868 <grub_strword+0x28>
    f85c:	ldr	x0, [sp, #24]
    f860:	add	x0, x0, #0x1
    f864:	str	x0, [sp, #24]
    f868:	ldr	x0, [sp, #24]
    f86c:	ldrb	w0, [x0]
    f870:	bl	f018 <grub_iswordseparator>
    f874:	cmp	w0, #0x0
    f878:	b.ne	f85c <grub_strword+0x1c>  // b.any
    f87c:	b	f984 <grub_strword+0x144>
    f880:	ldr	x0, [sp, #24]
    f884:	add	x0, x0, #0x1
    f888:	str	x0, [sp, #24]
    f88c:	ldr	x0, [sp, #40]
    f890:	add	x0, x0, #0x1
    f894:	str	x0, [sp, #40]
    f898:	ldr	x0, [sp, #24]
    f89c:	ldrb	w0, [x0]
    f8a0:	cmp	w0, #0x0
    f8a4:	b.eq	f8d4 <grub_strword+0x94>  // b.none
    f8a8:	ldr	x0, [sp, #24]
    f8ac:	ldrb	w0, [x0]
    f8b0:	bl	f018 <grub_iswordseparator>
    f8b4:	cmp	w0, #0x0
    f8b8:	b.ne	f8d4 <grub_strword+0x94>  // b.any
    f8bc:	ldr	x0, [sp, #24]
    f8c0:	ldrb	w1, [x0]
    f8c4:	ldr	x0, [sp, #40]
    f8c8:	ldrb	w0, [x0]
    f8cc:	cmp	w1, w0
    f8d0:	b.eq	f880 <grub_strword+0x40>  // b.none
    f8d4:	ldr	x0, [sp, #24]
    f8d8:	ldrb	w0, [x0]
    f8dc:	cmp	w0, #0x0
    f8e0:	b.eq	f8f8 <grub_strword+0xb8>  // b.none
    f8e4:	ldr	x0, [sp, #24]
    f8e8:	ldrb	w0, [x0]
    f8ec:	bl	f018 <grub_iswordseparator>
    f8f0:	cmp	w0, #0x0
    f8f4:	b.eq	f924 <grub_strword+0xe4>  // b.none
    f8f8:	ldr	x0, [sp, #40]
    f8fc:	ldrb	w0, [x0]
    f900:	cmp	w0, #0x0
    f904:	b.eq	f91c <grub_strword+0xdc>  // b.none
    f908:	ldr	x0, [sp, #40]
    f90c:	ldrb	w0, [x0]
    f910:	bl	f018 <grub_iswordseparator>
    f914:	cmp	w0, #0x0
    f918:	b.eq	f924 <grub_strword+0xe4>  // b.none
    f91c:	mov	w0, #0x1                   	// #1
    f920:	b	f998 <grub_strword+0x158>
    f924:	ldr	x0, [sp, #16]
    f928:	str	x0, [sp, #40]
    f92c:	b	f93c <grub_strword+0xfc>
    f930:	ldr	x0, [sp, #24]
    f934:	add	x0, x0, #0x1
    f938:	str	x0, [sp, #24]
    f93c:	ldr	x0, [sp, #24]
    f940:	ldrb	w0, [x0]
    f944:	cmp	w0, #0x0
    f948:	b.eq	f970 <grub_strword+0x130>  // b.none
    f94c:	ldr	x0, [sp, #24]
    f950:	ldrb	w0, [x0]
    f954:	bl	f018 <grub_iswordseparator>
    f958:	cmp	w0, #0x0
    f95c:	b.eq	f930 <grub_strword+0xf0>  // b.none
    f960:	b	f970 <grub_strword+0x130>
    f964:	ldr	x0, [sp, #24]
    f968:	add	x0, x0, #0x1
    f96c:	str	x0, [sp, #24]
    f970:	ldr	x0, [sp, #24]
    f974:	ldrb	w0, [x0]
    f978:	bl	f018 <grub_iswordseparator>
    f97c:	cmp	w0, #0x0
    f980:	b.ne	f964 <grub_strword+0x124>  // b.any
    f984:	ldr	x0, [sp, #24]
    f988:	ldrb	w0, [x0]
    f98c:	cmp	w0, #0x0
    f990:	b.ne	f898 <grub_strword+0x58>  // b.any
    f994:	mov	w0, #0x0                   	// #0
    f998:	ldp	x29, x30, [sp], #48
    f99c:	ret

000000000000f9a0 <grub_isspace>:
    f9a0:	sub	sp, sp, #0x10
    f9a4:	str	w0, [sp, #12]
    f9a8:	ldr	w0, [sp, #12]
    f9ac:	cmp	w0, #0xa
    f9b0:	b.eq	f9d8 <grub_isspace+0x38>  // b.none
    f9b4:	ldr	w0, [sp, #12]
    f9b8:	cmp	w0, #0xd
    f9bc:	b.eq	f9d8 <grub_isspace+0x38>  // b.none
    f9c0:	ldr	w0, [sp, #12]
    f9c4:	cmp	w0, #0x20
    f9c8:	b.eq	f9d8 <grub_isspace+0x38>  // b.none
    f9cc:	ldr	w0, [sp, #12]
    f9d0:	cmp	w0, #0x9
    f9d4:	b.ne	f9e0 <grub_isspace+0x40>  // b.any
    f9d8:	mov	w0, #0x1                   	// #1
    f9dc:	b	f9e4 <grub_isspace+0x44>
    f9e0:	mov	w0, #0x0                   	// #0
    f9e4:	add	sp, sp, #0x10
    f9e8:	ret

000000000000f9ec <grub_strtoul>:
    f9ec:	stp	x29, x30, [sp, #-64]!
    f9f0:	mov	x29, sp
    f9f4:	str	x0, [sp, #40]
    f9f8:	str	x1, [sp, #32]
    f9fc:	str	w2, [sp, #28]
    fa00:	ldr	w2, [sp, #28]
    fa04:	ldr	x1, [sp, #32]
    fa08:	ldr	x0, [sp, #40]
    fa0c:	bl	fa20 <grub_strtoull>
    fa10:	str	x0, [sp, #56]
    fa14:	ldr	x0, [sp, #56]
    fa18:	ldp	x29, x30, [sp], #64
    fa1c:	ret

000000000000fa20 <grub_strtoull>:
    fa20:	stp	x29, x30, [sp, #-80]!
    fa24:	mov	x29, sp
    fa28:	str	x0, [sp, #40]
    fa2c:	str	x1, [sp, #32]
    fa30:	str	w2, [sp, #28]
    fa34:	str	xzr, [sp, #72]
    fa38:	str	wzr, [sp, #68]
    fa3c:	b	fa4c <grub_strtoull+0x2c>
    fa40:	ldr	x0, [sp, #40]
    fa44:	add	x0, x0, #0x1
    fa48:	str	x0, [sp, #40]
    fa4c:	ldr	x0, [sp, #40]
    fa50:	ldrb	w0, [x0]
    fa54:	bl	f9a0 <grub_isspace>
    fa58:	cmp	w0, #0x0
    fa5c:	b.ne	fa40 <grub_strtoull+0x20>  // b.any
    fa60:	ldr	x0, [sp, #40]
    fa64:	ldrb	w0, [x0]
    fa68:	cmp	w0, #0x30
    fa6c:	b.ne	faf0 <grub_strtoull+0xd0>  // b.any
    fa70:	ldr	x0, [sp, #40]
    fa74:	add	x0, x0, #0x1
    fa78:	ldrb	w0, [x0]
    fa7c:	cmp	w0, #0x78
    fa80:	b.ne	fab4 <grub_strtoull+0x94>  // b.any
    fa84:	ldr	w0, [sp, #28]
    fa88:	cmp	w0, #0x0
    fa8c:	b.eq	fa9c <grub_strtoull+0x7c>  // b.none
    fa90:	ldr	w0, [sp, #28]
    fa94:	cmp	w0, #0x10
    fa98:	b.ne	faf0 <grub_strtoull+0xd0>  // b.any
    fa9c:	mov	w0, #0x10                  	// #16
    faa0:	str	w0, [sp, #28]
    faa4:	ldr	x0, [sp, #40]
    faa8:	add	x0, x0, #0x2
    faac:	str	x0, [sp, #40]
    fab0:	b	faf0 <grub_strtoull+0xd0>
    fab4:	ldr	w0, [sp, #28]
    fab8:	cmp	w0, #0x0
    fabc:	b.ne	faf0 <grub_strtoull+0xd0>  // b.any
    fac0:	ldr	x0, [sp, #40]
    fac4:	add	x0, x0, #0x1
    fac8:	ldrb	w0, [x0]
    facc:	cmp	w0, #0x2f
    fad0:	b.ls	faf0 <grub_strtoull+0xd0>  // b.plast
    fad4:	ldr	x0, [sp, #40]
    fad8:	add	x0, x0, #0x1
    fadc:	ldrb	w0, [x0]
    fae0:	cmp	w0, #0x37
    fae4:	b.hi	faf0 <grub_strtoull+0xd0>  // b.pmore
    fae8:	mov	w0, #0x8                   	// #8
    faec:	str	w0, [sp, #28]
    faf0:	ldr	w0, [sp, #28]
    faf4:	cmp	w0, #0x0
    faf8:	b.ne	fbc4 <grub_strtoull+0x1a4>  // b.any
    fafc:	mov	w0, #0xa                   	// #10
    fb00:	str	w0, [sp, #28]
    fb04:	b	fbc4 <grub_strtoull+0x1a4>
    fb08:	ldr	x0, [sp, #40]
    fb0c:	ldrb	w0, [x0]
    fb10:	bl	ef50 <grub_tolower>
    fb14:	sub	w0, w0, #0x30
    fb18:	sxtw	x0, w0
    fb1c:	str	x0, [sp, #56]
    fb20:	ldr	x0, [sp, #56]
    fb24:	cmp	x0, #0x30
    fb28:	b.ls	fb3c <grub_strtoull+0x11c>  // b.plast
    fb2c:	ldr	x0, [sp, #56]
    fb30:	sub	x0, x0, #0x27
    fb34:	str	x0, [sp, #56]
    fb38:	b	fb48 <grub_strtoull+0x128>
    fb3c:	ldr	x0, [sp, #56]
    fb40:	cmp	x0, #0x9
    fb44:	b.hi	fbd8 <grub_strtoull+0x1b8>  // b.pmore
    fb48:	ldrsw	x0, [sp, #28]
    fb4c:	ldr	x1, [sp, #56]
    fb50:	cmp	x1, x0
    fb54:	b.cs	fbe0 <grub_strtoull+0x1c0>  // b.hs, b.nlast
    fb58:	mov	w0, #0x1                   	// #1
    fb5c:	str	w0, [sp, #68]
    fb60:	ldr	x0, [sp, #56]
    fb64:	mvn	x0, x0
    fb68:	ldrsw	x1, [sp, #28]
    fb6c:	mov	x2, #0x0                   	// #0
    fb70:	bl	ff08 <grub_divmod64>
    fb74:	mov	x1, x0
    fb78:	ldr	x0, [sp, #72]
    fb7c:	cmp	x0, x1
    fb80:	b.ls	fba0 <grub_strtoull+0x180>  // b.plast
    fb84:	adrp	x0, 0 <_start>
    fb88:	add	x0, x0, #0x0
    fb8c:	ldr	x1, [x0]
    fb90:	mov	w0, #0xb                   	// #11
    fb94:	bl	ce54 <grub_error>
    fb98:	mov	x0, #0xffffffffffffffff    	// #-1
    fb9c:	b	fc28 <grub_strtoull+0x208>
    fba0:	ldrsw	x1, [sp, #28]
    fba4:	ldr	x0, [sp, #72]
    fba8:	mul	x0, x1, x0
    fbac:	ldr	x1, [sp, #56]
    fbb0:	add	x0, x1, x0
    fbb4:	str	x0, [sp, #72]
    fbb8:	ldr	x0, [sp, #40]
    fbbc:	add	x0, x0, #0x1
    fbc0:	str	x0, [sp, #40]
    fbc4:	ldr	x0, [sp, #40]
    fbc8:	ldrb	w0, [x0]
    fbcc:	cmp	w0, #0x0
    fbd0:	b.ne	fb08 <grub_strtoull+0xe8>  // b.any
    fbd4:	b	fbe4 <grub_strtoull+0x1c4>
    fbd8:	nop
    fbdc:	b	fbe4 <grub_strtoull+0x1c4>
    fbe0:	nop
    fbe4:	ldr	w0, [sp, #68]
    fbe8:	cmp	w0, #0x0
    fbec:	b.ne	fc0c <grub_strtoull+0x1ec>  // b.any
    fbf0:	adrp	x0, 0 <_start>
    fbf4:	add	x0, x0, #0x0
    fbf8:	ldr	x1, [x0]
    fbfc:	mov	w0, #0xa                   	// #10
    fc00:	bl	ce54 <grub_error>
    fc04:	mov	x0, #0x0                   	// #0
    fc08:	b	fc28 <grub_strtoull+0x208>
    fc0c:	ldr	x0, [sp, #32]
    fc10:	cmp	x0, #0x0
    fc14:	b.eq	fc24 <grub_strtoull+0x204>  // b.none
    fc18:	ldr	x0, [sp, #32]
    fc1c:	ldr	x1, [sp, #40]
    fc20:	str	x1, [x0]
    fc24:	ldr	x0, [sp, #72]
    fc28:	ldp	x29, x30, [sp], #80
    fc2c:	ret
	...

000000000000fc40 <grub_strdup>:
    fc40:	stp	x29, x30, [sp, #-48]!
    fc44:	mov	x29, sp
    fc48:	str	x0, [sp, #24]
    fc4c:	ldr	x0, [sp, #24]
    fc50:	bl	fe3c <grub_strlen>
    fc54:	add	x0, x0, #0x1
    fc58:	str	x0, [sp, #40]
    fc5c:	ldr	x0, [sp, #40]
    fc60:	bl	8348 <grub_malloc>
    fc64:	str	x0, [sp, #32]
    fc68:	ldr	x0, [sp, #32]
    fc6c:	cmp	x0, #0x0
    fc70:	b.ne	fc7c <grub_strdup+0x3c>  // b.any
    fc74:	mov	x0, #0x0                   	// #0
    fc78:	b	fc8c <grub_strdup+0x4c>
    fc7c:	ldr	x2, [sp, #40]
    fc80:	ldr	x1, [sp, #24]
    fc84:	ldr	x0, [sp, #32]
    fc88:	bl	eef0 <grub_memcpy>
    fc8c:	ldp	x29, x30, [sp], #48
    fc90:	ret

000000000000fc94 <grub_strndup>:
    fc94:	stp	x29, x30, [sp, #-48]!
    fc98:	mov	x29, sp
    fc9c:	str	x0, [sp, #24]
    fca0:	str	x1, [sp, #16]
    fca4:	ldr	x0, [sp, #24]
    fca8:	bl	fe3c <grub_strlen>
    fcac:	str	x0, [sp, #40]
    fcb0:	ldr	x1, [sp, #40]
    fcb4:	ldr	x0, [sp, #16]
    fcb8:	cmp	x1, x0
    fcbc:	b.ls	fcc8 <grub_strndup+0x34>  // b.plast
    fcc0:	ldr	x0, [sp, #16]
    fcc4:	str	x0, [sp, #40]
    fcc8:	ldr	x0, [sp, #40]
    fccc:	add	x0, x0, #0x1
    fcd0:	bl	8348 <grub_malloc>
    fcd4:	str	x0, [sp, #32]
    fcd8:	ldr	x0, [sp, #32]
    fcdc:	cmp	x0, #0x0
    fce0:	b.ne	fcec <grub_strndup+0x58>  // b.any
    fce4:	mov	x0, #0x0                   	// #0
    fce8:	b	fd10 <grub_strndup+0x7c>
    fcec:	ldr	x2, [sp, #40]
    fcf0:	ldr	x1, [sp, #24]
    fcf4:	ldr	x0, [sp, #32]
    fcf8:	bl	eef0 <grub_memcpy>
    fcfc:	ldr	x1, [sp, #32]
    fd00:	ldr	x0, [sp, #40]
    fd04:	add	x0, x1, x0
    fd08:	strb	wzr, [x0]
    fd0c:	ldr	x0, [sp, #32]
    fd10:	ldp	x29, x30, [sp], #48
    fd14:	ret

000000000000fd18 <grub_memset>:
    fd18:	sub	sp, sp, #0x40
    fd1c:	str	x0, [sp, #24]
    fd20:	str	w1, [sp, #20]
    fd24:	str	x2, [sp, #8]
    fd28:	ldr	x0, [sp, #24]
    fd2c:	str	x0, [sp, #56]
    fd30:	ldr	w0, [sp, #20]
    fd34:	strb	w0, [sp, #39]
    fd38:	ldr	x0, [sp, #8]
    fd3c:	cmp	x0, #0x17
    fd40:	b.ls	fe24 <grub_memset+0x10c>  // b.plast
    fd44:	str	xzr, [sp, #48]
    fd48:	str	xzr, [sp, #40]
    fd4c:	b	fd78 <grub_memset+0x60>
    fd50:	ldrb	w1, [sp, #39]
    fd54:	ldr	x0, [sp, #40]
    fd58:	lsl	w0, w0, #3
    fd5c:	lsl	x0, x1, x0
    fd60:	ldr	x1, [sp, #48]
    fd64:	orr	x0, x1, x0
    fd68:	str	x0, [sp, #48]
    fd6c:	ldr	x0, [sp, #40]
    fd70:	add	x0, x0, #0x1
    fd74:	str	x0, [sp, #40]
    fd78:	ldr	x0, [sp, #40]
    fd7c:	cmp	x0, #0x7
    fd80:	b.ls	fd50 <grub_memset+0x38>  // b.plast
    fd84:	b	fdac <grub_memset+0x94>
    fd88:	ldr	x0, [sp, #56]
    fd8c:	ldrb	w1, [sp, #39]
    fd90:	strb	w1, [x0]
    fd94:	ldr	x0, [sp, #56]
    fd98:	add	x0, x0, #0x1
    fd9c:	str	x0, [sp, #56]
    fda0:	ldr	x0, [sp, #8]
    fda4:	sub	x0, x0, #0x1
    fda8:	str	x0, [sp, #8]
    fdac:	ldr	x0, [sp, #8]
    fdb0:	cmp	x0, #0x0
    fdb4:	b.eq	fdf0 <grub_memset+0xd8>  // b.none
    fdb8:	ldr	x0, [sp, #56]
    fdbc:	and	x0, x0, #0x7
    fdc0:	cmp	x0, #0x0
    fdc4:	b.ne	fd88 <grub_memset+0x70>  // b.any
    fdc8:	b	fdf0 <grub_memset+0xd8>
    fdcc:	ldr	x0, [sp, #56]
    fdd0:	ldr	x1, [sp, #48]
    fdd4:	str	x1, [x0]
    fdd8:	ldr	x0, [sp, #56]
    fddc:	add	x0, x0, #0x8
    fde0:	str	x0, [sp, #56]
    fde4:	ldr	x0, [sp, #8]
    fde8:	sub	x0, x0, #0x8
    fdec:	str	x0, [sp, #8]
    fdf0:	ldr	x0, [sp, #8]
    fdf4:	cmp	x0, #0x7
    fdf8:	b.hi	fdcc <grub_memset+0xb4>  // b.pmore
    fdfc:	b	fe24 <grub_memset+0x10c>
    fe00:	ldr	x0, [sp, #56]
    fe04:	ldrb	w1, [sp, #39]
    fe08:	strb	w1, [x0]
    fe0c:	ldr	x0, [sp, #56]
    fe10:	add	x0, x0, #0x1
    fe14:	str	x0, [sp, #56]
    fe18:	ldr	x0, [sp, #8]
    fe1c:	sub	x0, x0, #0x1
    fe20:	str	x0, [sp, #8]
    fe24:	ldr	x0, [sp, #8]
    fe28:	cmp	x0, #0x0
    fe2c:	b.ne	fe00 <grub_memset+0xe8>  // b.any
    fe30:	ldr	x0, [sp, #24]
    fe34:	add	sp, sp, #0x40
    fe38:	ret

000000000000fe3c <grub_strlen>:
    fe3c:	sub	sp, sp, #0x20
    fe40:	str	x0, [sp, #8]
    fe44:	ldr	x0, [sp, #8]
    fe48:	str	x0, [sp, #24]
    fe4c:	b	fe5c <grub_strlen+0x20>
    fe50:	ldr	x0, [sp, #24]
    fe54:	add	x0, x0, #0x1
    fe58:	str	x0, [sp, #24]
    fe5c:	ldr	x0, [sp, #24]
    fe60:	ldrb	w0, [x0]
    fe64:	cmp	w0, #0x0
    fe68:	b.ne	fe50 <grub_strlen+0x14>  // b.any
    fe6c:	ldr	x1, [sp, #24]
    fe70:	ldr	x0, [sp, #8]
    fe74:	sub	x0, x1, x0
    fe78:	add	sp, sp, #0x20
    fe7c:	ret

000000000000fe80 <grub_reverse>:
    fe80:	stp	x29, x30, [sp, #-48]!
    fe84:	mov	x29, sp
    fe88:	str	x0, [sp, #24]
    fe8c:	ldr	x0, [sp, #24]
    fe90:	bl	fe3c <grub_strlen>
    fe94:	sub	x0, x0, #0x1
    fe98:	ldr	x1, [sp, #24]
    fe9c:	add	x0, x1, x0
    fea0:	str	x0, [sp, #40]
    fea4:	b	fee8 <grub_reverse+0x68>
    fea8:	ldr	x0, [sp, #24]
    feac:	ldrb	w0, [x0]
    feb0:	strb	w0, [sp, #39]
    feb4:	ldr	x0, [sp, #40]
    feb8:	ldrb	w1, [x0]
    febc:	ldr	x0, [sp, #24]
    fec0:	strb	w1, [x0]
    fec4:	ldr	x0, [sp, #40]
    fec8:	ldrb	w1, [sp, #39]
    fecc:	strb	w1, [x0]
    fed0:	ldr	x0, [sp, #24]
    fed4:	add	x0, x0, #0x1
    fed8:	str	x0, [sp, #24]
    fedc:	ldr	x0, [sp, #40]
    fee0:	sub	x0, x0, #0x1
    fee4:	str	x0, [sp, #40]
    fee8:	ldr	x1, [sp, #24]
    feec:	ldr	x0, [sp, #40]
    fef0:	cmp	x1, x0
    fef4:	b.cc	fea8 <grub_reverse+0x28>  // b.lo, b.ul, b.last
    fef8:	nop
    fefc:	nop
    ff00:	ldp	x29, x30, [sp], #48
    ff04:	ret

000000000000ff08 <grub_divmod64>:
    ff08:	sub	sp, sp, #0x40
    ff0c:	str	x0, [sp, #24]
    ff10:	str	x1, [sp, #16]
    ff14:	str	x2, [sp, #8]
    ff18:	mov	w0, #0x40                  	// #64
    ff1c:	str	w0, [sp, #60]
    ff20:	str	xzr, [sp, #48]
    ff24:	str	xzr, [sp, #40]
    ff28:	ldr	x1, [sp, #24]
    ff2c:	mov	x0, #0xfffffffe            	// #4294967294
    ff30:	cmp	x1, x0
    ff34:	b.hi	fff4 <grub_divmod64+0xec>  // b.pmore
    ff38:	ldr	x1, [sp, #16]
    ff3c:	mov	x0, #0xfffffffe            	// #4294967294
    ff40:	cmp	x1, x0
    ff44:	b.hi	fff4 <grub_divmod64+0xec>  // b.pmore
    ff48:	ldr	x0, [sp, #8]
    ff4c:	cmp	x0, #0x0
    ff50:	b.eq	ff74 <grub_divmod64+0x6c>  // b.none
    ff54:	ldr	x0, [sp, #24]
    ff58:	ldr	x1, [sp, #16]
    ff5c:	udiv	w2, w0, w1
    ff60:	mul	w1, w2, w1
    ff64:	sub	w0, w0, w1
    ff68:	mov	w1, w0
    ff6c:	ldr	x0, [sp, #8]
    ff70:	str	x1, [x0]
    ff74:	ldr	x0, [sp, #24]
    ff78:	mov	w1, w0
    ff7c:	ldr	x0, [sp, #16]
    ff80:	udiv	w0, w1, w0
    ff84:	mov	w0, w0
    ff88:	b	10024 <grub_divmod64+0x11c>
    ff8c:	ldr	x0, [sp, #40]
    ff90:	lsl	x0, x0, #1
    ff94:	str	x0, [sp, #40]
    ff98:	ldr	x0, [sp, #24]
    ff9c:	cmp	x0, #0x0
    ffa0:	b.ge	ffb0 <grub_divmod64+0xa8>  // b.tcont
    ffa4:	ldr	x0, [sp, #40]
    ffa8:	orr	x0, x0, #0x1
    ffac:	str	x0, [sp, #40]
    ffb0:	ldr	x0, [sp, #48]
    ffb4:	lsl	x0, x0, #1
    ffb8:	str	x0, [sp, #48]
    ffbc:	ldr	x0, [sp, #24]
    ffc0:	lsl	x0, x0, #1
    ffc4:	str	x0, [sp, #24]
    ffc8:	ldr	x1, [sp, #40]
    ffcc:	ldr	x0, [sp, #16]
    ffd0:	cmp	x1, x0
    ffd4:	b.cc	fff4 <grub_divmod64+0xec>  // b.lo, b.ul, b.last
    ffd8:	ldr	x0, [sp, #48]
    ffdc:	orr	x0, x0, #0x1
    ffe0:	str	x0, [sp, #48]
    ffe4:	ldr	x1, [sp, #40]
    ffe8:	ldr	x0, [sp, #16]
    ffec:	sub	x0, x1, x0
    fff0:	str	x0, [sp, #40]
    fff4:	ldr	w0, [sp, #60]
    fff8:	sub	w1, w0, #0x1
    fffc:	str	w1, [sp, #60]
   10000:	cmp	w0, #0x0
   10004:	b.ne	ff8c <grub_divmod64+0x84>  // b.any
   10008:	ldr	x0, [sp, #8]
   1000c:	cmp	x0, #0x0
   10010:	b.eq	10020 <grub_divmod64+0x118>  // b.none
   10014:	ldr	x0, [sp, #8]
   10018:	ldr	x1, [sp, #40]
   1001c:	str	x1, [x0]
   10020:	ldr	x0, [sp, #48]
   10024:	add	sp, sp, #0x40
   10028:	ret

000000000001002c <grub_lltoa>:
   1002c:	stp	x29, x30, [sp, #-80]!
   10030:	mov	x29, sp
   10034:	str	x0, [sp, #40]
   10038:	str	w1, [sp, #36]
   1003c:	str	x2, [sp, #24]
   10040:	ldr	w0, [sp, #36]
   10044:	cmp	w0, #0x78
   10048:	b.ne	10054 <grub_lltoa+0x28>  // b.any
   1004c:	mov	w0, #0x10                  	// #16
   10050:	b	10058 <grub_lltoa+0x2c>
   10054:	mov	w0, #0xa                   	// #10
   10058:	str	w0, [sp, #68]
   1005c:	ldr	x0, [sp, #24]
   10060:	cmp	x0, #0x0
   10064:	b.ge	10094 <grub_lltoa+0x68>  // b.tcont
   10068:	ldr	w0, [sp, #36]
   1006c:	cmp	w0, #0x64
   10070:	b.ne	10094 <grub_lltoa+0x68>  // b.any
   10074:	ldr	x0, [sp, #24]
   10078:	neg	x0, x0
   1007c:	str	x0, [sp, #24]
   10080:	ldr	x0, [sp, #40]
   10084:	add	x1, x0, #0x1
   10088:	str	x1, [sp, #40]
   1008c:	mov	w1, #0x2d                  	// #45
   10090:	strb	w1, [x0]
   10094:	ldr	x0, [sp, #40]
   10098:	str	x0, [sp, #72]
   1009c:	ldr	w0, [sp, #68]
   100a0:	cmp	w0, #0x10
   100a4:	b.ne	10110 <grub_lltoa+0xe4>  // b.any
   100a8:	ldr	x0, [sp, #24]
   100ac:	and	w0, w0, #0xf
   100b0:	str	w0, [sp, #64]
   100b4:	ldr	w0, [sp, #64]
   100b8:	cmp	w0, #0x9
   100bc:	b.ls	100d4 <grub_lltoa+0xa8>  // b.plast
   100c0:	ldr	w0, [sp, #64]
   100c4:	and	w0, w0, #0xff
   100c8:	add	w0, w0, #0x57
   100cc:	and	w1, w0, #0xff
   100d0:	b	100e4 <grub_lltoa+0xb8>
   100d4:	ldr	w0, [sp, #64]
   100d8:	and	w0, w0, #0xff
   100dc:	add	w0, w0, #0x30
   100e0:	and	w1, w0, #0xff
   100e4:	ldr	x0, [sp, #72]
   100e8:	add	x2, x0, #0x1
   100ec:	str	x2, [sp, #72]
   100f0:	strb	w1, [x0]
   100f4:	ldr	x0, [sp, #24]
   100f8:	lsr	x0, x0, #4
   100fc:	str	x0, [sp, #24]
   10100:	ldr	x0, [sp, #24]
   10104:	cmp	x0, #0x0
   10108:	b.ne	100a8 <grub_lltoa+0x7c>  // b.any
   1010c:	b	10154 <grub_lltoa+0x128>
   10110:	add	x0, sp, #0x38
   10114:	mov	x2, x0
   10118:	mov	x1, #0xa                   	// #10
   1011c:	ldr	x0, [sp, #24]
   10120:	bl	ff08 <grub_divmod64>
   10124:	str	x0, [sp, #24]
   10128:	ldr	x0, [sp, #56]
   1012c:	and	w1, w0, #0xff
   10130:	ldr	x0, [sp, #72]
   10134:	add	x2, x0, #0x1
   10138:	str	x2, [sp, #72]
   1013c:	add	w1, w1, #0x30
   10140:	and	w1, w1, #0xff
   10144:	strb	w1, [x0]
   10148:	ldr	x0, [sp, #24]
   1014c:	cmp	x0, #0x0
   10150:	b.ne	10110 <grub_lltoa+0xe4>  // b.any
   10154:	ldr	x0, [sp, #72]
   10158:	strb	wzr, [x0]
   1015c:	ldr	x0, [sp, #40]
   10160:	bl	fe80 <grub_reverse>
   10164:	ldr	x0, [sp, #72]
   10168:	ldp	x29, x30, [sp], #80
   1016c:	ret

0000000000010170 <parse_printf_args>:
   10170:	stp	x29, x30, [sp, #-96]!
   10174:	mov	x29, sp
   10178:	str	x19, [sp, #16]
   1017c:	str	x0, [sp, #40]
   10180:	str	x1, [sp, #32]
   10184:	mov	x19, x2
   10188:	str	xzr, [sp, #72]
   1018c:	ldr	x0, [sp, #32]
   10190:	str	xzr, [x0, #264]
   10194:	ldr	x0, [sp, #40]
   10198:	str	x0, [sp, #88]
   1019c:	nop
   101a0:	b	10344 <parse_printf_args+0x1d4>
   101a4:	ldrb	w0, [sp, #87]
   101a8:	cmp	w0, #0x25
   101ac:	b.eq	101b4 <parse_printf_args+0x44>  // b.none
   101b0:	b	10344 <parse_printf_args+0x1d4>
   101b4:	ldr	x0, [sp, #88]
   101b8:	ldrb	w0, [x0]
   101bc:	cmp	w0, #0x2d
   101c0:	b.ne	101e0 <parse_printf_args+0x70>  // b.any
   101c4:	ldr	x0, [sp, #88]
   101c8:	add	x0, x0, #0x1
   101cc:	str	x0, [sp, #88]
   101d0:	b	101e0 <parse_printf_args+0x70>
   101d4:	ldr	x0, [sp, #88]
   101d8:	add	x0, x0, #0x1
   101dc:	str	x0, [sp, #88]
   101e0:	ldr	x0, [sp, #88]
   101e4:	ldrb	w0, [x0]
   101e8:	bl	ef1c <grub_isdigit>
   101ec:	cmp	w0, #0x0
   101f0:	b.ne	101d4 <parse_printf_args+0x64>  // b.any
   101f4:	ldr	x0, [sp, #88]
   101f8:	ldrb	w0, [x0]
   101fc:	cmp	w0, #0x24
   10200:	b.ne	10210 <parse_printf_args+0xa0>  // b.any
   10204:	ldr	x0, [sp, #88]
   10208:	add	x0, x0, #0x1
   1020c:	str	x0, [sp, #88]
   10210:	ldr	x0, [sp, #88]
   10214:	ldrb	w0, [x0]
   10218:	cmp	w0, #0x2d
   1021c:	b.ne	1023c <parse_printf_args+0xcc>  // b.any
   10220:	ldr	x0, [sp, #88]
   10224:	add	x0, x0, #0x1
   10228:	str	x0, [sp, #88]
   1022c:	b	1023c <parse_printf_args+0xcc>
   10230:	ldr	x0, [sp, #88]
   10234:	add	x0, x0, #0x1
   10238:	str	x0, [sp, #88]
   1023c:	ldr	x0, [sp, #88]
   10240:	ldrb	w0, [x0]
   10244:	bl	ef1c <grub_isdigit>
   10248:	cmp	w0, #0x0
   1024c:	b.ne	10230 <parse_printf_args+0xc0>  // b.any
   10250:	ldr	x0, [sp, #88]
   10254:	ldrb	w0, [x0]
   10258:	cmp	w0, #0x2e
   1025c:	b.ne	1027c <parse_printf_args+0x10c>  // b.any
   10260:	ldr	x0, [sp, #88]
   10264:	add	x0, x0, #0x1
   10268:	str	x0, [sp, #88]
   1026c:	b	1027c <parse_printf_args+0x10c>
   10270:	ldr	x0, [sp, #88]
   10274:	add	x0, x0, #0x1
   10278:	str	x0, [sp, #88]
   1027c:	ldr	x0, [sp, #88]
   10280:	ldrb	w0, [x0]
   10284:	bl	ef1c <grub_isdigit>
   10288:	cmp	w0, #0x0
   1028c:	b.ne	10270 <parse_printf_args+0x100>  // b.any
   10290:	ldr	x0, [sp, #88]
   10294:	add	x1, x0, #0x1
   10298:	str	x1, [sp, #88]
   1029c:	ldrb	w0, [x0]
   102a0:	strb	w0, [sp, #87]
   102a4:	ldrb	w0, [sp, #87]
   102a8:	cmp	w0, #0x6c
   102ac:	b.ne	102c4 <parse_printf_args+0x154>  // b.any
   102b0:	ldr	x0, [sp, #88]
   102b4:	add	x1, x0, #0x1
   102b8:	str	x1, [sp, #88]
   102bc:	ldrb	w0, [x0]
   102c0:	strb	w0, [sp, #87]
   102c4:	ldrb	w0, [sp, #87]
   102c8:	cmp	w0, #0x6c
   102cc:	b.ne	102e4 <parse_printf_args+0x174>  // b.any
   102d0:	ldr	x0, [sp, #88]
   102d4:	add	x1, x0, #0x1
   102d8:	str	x1, [sp, #88]
   102dc:	ldrb	w0, [x0]
   102e0:	strb	w0, [sp, #87]
   102e4:	ldrb	w0, [sp, #87]
   102e8:	sub	w0, w0, #0x43
   102ec:	cmp	w0, #0x35
   102f0:	cset	w1, hi  // hi = pmore
   102f4:	and	w1, w1, #0xff
   102f8:	cmp	w1, #0x0
   102fc:	b.ne	10344 <parse_printf_args+0x1d4>  // b.any
   10300:	mov	x1, #0x1                   	// #1
   10304:	lsl	x1, x1, x0
   10308:	mov	x0, #0x1                   	// #1
   1030c:	movk	x0, #0x2003, lsl #32
   10310:	movk	x0, #0x25, lsl #48
   10314:	and	x0, x1, x0
   10318:	cmp	x0, #0x0
   1031c:	cset	w0, ne  // ne = any
   10320:	and	w0, w0, #0xff
   10324:	cmp	w0, #0x0
   10328:	b.eq	10344 <parse_printf_args+0x1d4>  // b.none
   1032c:	ldr	x0, [sp, #32]
   10330:	ldr	x0, [x0, #264]
   10334:	add	x1, x0, #0x1
   10338:	ldr	x0, [sp, #32]
   1033c:	str	x1, [x0, #264]
   10340:	nop
   10344:	ldr	x0, [sp, #88]
   10348:	add	x1, x0, #0x1
   1034c:	str	x1, [sp, #88]
   10350:	ldrb	w0, [x0]
   10354:	strb	w0, [sp, #87]
   10358:	ldrb	w0, [sp, #87]
   1035c:	cmp	w0, #0x0
   10360:	b.ne	101a4 <parse_printf_args+0x34>  // b.any
   10364:	ldr	x0, [sp, #32]
   10368:	ldr	x0, [x0, #264]
   1036c:	cmp	x0, #0x20
   10370:	b.hi	10384 <parse_printf_args+0x214>  // b.pmore
   10374:	ldr	x1, [sp, #32]
   10378:	ldr	x0, [sp, #32]
   1037c:	str	x1, [x0, #256]
   10380:	b	103d8 <parse_printf_args+0x268>
   10384:	ldr	x0, [sp, #32]
   10388:	ldr	x0, [x0, #264]
   1038c:	lsl	x0, x0, #3
   10390:	bl	8348 <grub_malloc>
   10394:	mov	x1, x0
   10398:	ldr	x0, [sp, #32]
   1039c:	str	x1, [x0, #256]
   103a0:	ldr	x0, [sp, #32]
   103a4:	ldr	x0, [x0, #256]
   103a8:	cmp	x0, #0x0
   103ac:	b.ne	103d8 <parse_printf_args+0x268>  // b.any
   103b0:	adrp	x0, 0 <_start>
   103b4:	add	x0, x0, #0x0
   103b8:	ldr	x0, [x0]
   103bc:	str	wzr, [x0]
   103c0:	ldr	x1, [sp, #32]
   103c4:	ldr	x0, [sp, #32]
   103c8:	str	x1, [x0, #256]
   103cc:	ldr	x0, [sp, #32]
   103d0:	mov	x1, #0x20                  	// #32
   103d4:	str	x1, [x0, #264]
   103d8:	ldr	x0, [sp, #32]
   103dc:	ldr	x3, [x0, #256]
   103e0:	ldr	x0, [sp, #32]
   103e4:	ldr	x0, [x0, #264]
   103e8:	lsl	x0, x0, #3
   103ec:	mov	x2, x0
   103f0:	mov	w1, #0x0                   	// #0
   103f4:	mov	x0, x3
   103f8:	bl	fd18 <grub_memset>
   103fc:	ldr	x0, [sp, #40]
   10400:	str	x0, [sp, #88]
   10404:	str	xzr, [sp, #72]
   10408:	b	106b0 <parse_printf_args+0x540>
   1040c:	str	wzr, [sp, #68]
   10410:	ldrb	w0, [sp, #87]
   10414:	cmp	w0, #0x25
   10418:	b.eq	10420 <parse_printf_args+0x2b0>  // b.none
   1041c:	b	106b0 <parse_printf_args+0x540>
   10420:	ldr	x0, [sp, #72]
   10424:	add	x1, x0, #0x1
   10428:	str	x1, [sp, #72]
   1042c:	str	x0, [sp, #56]
   10430:	ldr	x0, [sp, #88]
   10434:	ldrb	w0, [x0]
   10438:	cmp	w0, #0x2d
   1043c:	b.ne	1044c <parse_printf_args+0x2dc>  // b.any
   10440:	ldr	x0, [sp, #88]
   10444:	add	x0, x0, #0x1
   10448:	str	x0, [sp, #88]
   1044c:	ldr	x0, [sp, #88]
   10450:	str	x0, [sp, #48]
   10454:	b	10464 <parse_printf_args+0x2f4>
   10458:	ldr	x0, [sp, #88]
   1045c:	add	x0, x0, #0x1
   10460:	str	x0, [sp, #88]
   10464:	ldr	x0, [sp, #88]
   10468:	ldrb	w0, [x0]
   1046c:	bl	ef1c <grub_isdigit>
   10470:	cmp	w0, #0x0
   10474:	b.ne	10458 <parse_printf_args+0x2e8>  // b.any
   10478:	ldr	x0, [sp, #88]
   1047c:	ldrb	w0, [x0]
   10480:	cmp	w0, #0x24
   10484:	b.ne	104ac <parse_printf_args+0x33c>  // b.any
   10488:	mov	w2, #0xa                   	// #10
   1048c:	mov	x1, #0x0                   	// #0
   10490:	ldr	x0, [sp, #48]
   10494:	bl	fa20 <grub_strtoull>
   10498:	sub	x0, x0, #0x1
   1049c:	str	x0, [sp, #56]
   104a0:	ldr	x0, [sp, #88]
   104a4:	add	x0, x0, #0x1
   104a8:	str	x0, [sp, #88]
   104ac:	ldr	x0, [sp, #88]
   104b0:	ldrb	w0, [x0]
   104b4:	cmp	w0, #0x2d
   104b8:	b.ne	104d8 <parse_printf_args+0x368>  // b.any
   104bc:	ldr	x0, [sp, #88]
   104c0:	add	x0, x0, #0x1
   104c4:	str	x0, [sp, #88]
   104c8:	b	104d8 <parse_printf_args+0x368>
   104cc:	ldr	x0, [sp, #88]
   104d0:	add	x0, x0, #0x1
   104d4:	str	x0, [sp, #88]
   104d8:	ldr	x0, [sp, #88]
   104dc:	ldrb	w0, [x0]
   104e0:	bl	ef1c <grub_isdigit>
   104e4:	cmp	w0, #0x0
   104e8:	b.ne	104cc <parse_printf_args+0x35c>  // b.any
   104ec:	ldr	x0, [sp, #88]
   104f0:	ldrb	w0, [x0]
   104f4:	cmp	w0, #0x2e
   104f8:	b.ne	10518 <parse_printf_args+0x3a8>  // b.any
   104fc:	ldr	x0, [sp, #88]
   10500:	add	x0, x0, #0x1
   10504:	str	x0, [sp, #88]
   10508:	b	10518 <parse_printf_args+0x3a8>
   1050c:	ldr	x0, [sp, #88]
   10510:	add	x0, x0, #0x1
   10514:	str	x0, [sp, #88]
   10518:	ldr	x0, [sp, #88]
   1051c:	ldrb	w0, [x0]
   10520:	bl	ef1c <grub_isdigit>
   10524:	cmp	w0, #0x0
   10528:	b.ne	1050c <parse_printf_args+0x39c>  // b.any
   1052c:	ldr	x0, [sp, #88]
   10530:	add	x1, x0, #0x1
   10534:	str	x1, [sp, #88]
   10538:	ldrb	w0, [x0]
   1053c:	strb	w0, [sp, #87]
   10540:	ldrb	w0, [sp, #87]
   10544:	cmp	w0, #0x25
   10548:	b.ne	1055c <parse_printf_args+0x3ec>  // b.any
   1054c:	ldr	x0, [sp, #72]
   10550:	sub	x0, x0, #0x1
   10554:	str	x0, [sp, #72]
   10558:	b	106b0 <parse_printf_args+0x540>
   1055c:	ldrb	w0, [sp, #87]
   10560:	cmp	w0, #0x6c
   10564:	b.ne	10584 <parse_printf_args+0x414>  // b.any
   10568:	ldr	x0, [sp, #88]
   1056c:	add	x1, x0, #0x1
   10570:	str	x1, [sp, #88]
   10574:	ldrb	w0, [x0]
   10578:	strb	w0, [sp, #87]
   1057c:	mov	w0, #0x1                   	// #1
   10580:	str	w0, [sp, #68]
   10584:	ldrb	w0, [sp, #87]
   10588:	cmp	w0, #0x6c
   1058c:	b.ne	105ac <parse_printf_args+0x43c>  // b.any
   10590:	ldr	x0, [sp, #88]
   10594:	add	x1, x0, #0x1
   10598:	str	x1, [sp, #88]
   1059c:	ldrb	w0, [x0]
   105a0:	strb	w0, [sp, #87]
   105a4:	mov	w0, #0x2                   	// #2
   105a8:	str	w0, [sp, #68]
   105ac:	ldr	x0, [sp, #32]
   105b0:	ldr	x0, [x0, #264]
   105b4:	ldr	x1, [sp, #56]
   105b8:	cmp	x1, x0
   105bc:	b.cc	105c4 <parse_printf_args+0x454>  // b.lo, b.ul, b.last
   105c0:	b	106b0 <parse_printf_args+0x540>
   105c4:	ldrb	w0, [sp, #87]
   105c8:	cmp	w0, #0x78
   105cc:	b.eq	1062c <parse_printf_args+0x4bc>  // b.none
   105d0:	cmp	w0, #0x78
   105d4:	b.gt	106b0 <parse_printf_args+0x540>
   105d8:	cmp	w0, #0x75
   105dc:	b.eq	1062c <parse_printf_args+0x4bc>  // b.none
   105e0:	cmp	w0, #0x75
   105e4:	b.gt	106b0 <parse_printf_args+0x540>
   105e8:	cmp	w0, #0x73
   105ec:	b.eq	10674 <parse_printf_args+0x504>  // b.none
   105f0:	cmp	w0, #0x73
   105f4:	b.gt	106b0 <parse_printf_args+0x540>
   105f8:	cmp	w0, #0x70
   105fc:	b.eq	10674 <parse_printf_args+0x504>  // b.none
   10600:	cmp	w0, #0x70
   10604:	b.gt	106b0 <parse_printf_args+0x540>
   10608:	cmp	w0, #0x64
   1060c:	b.eq	10654 <parse_printf_args+0x4e4>  // b.none
   10610:	cmp	w0, #0x64
   10614:	b.gt	106b0 <parse_printf_args+0x540>
   10618:	cmp	w0, #0x43
   1061c:	b.eq	10694 <parse_printf_args+0x524>  // b.none
   10620:	cmp	w0, #0x63
   10624:	b.eq	10694 <parse_printf_args+0x524>  // b.none
   10628:	b	106b0 <parse_printf_args+0x540>
   1062c:	ldr	w0, [sp, #68]
   10630:	add	w2, w0, #0x3
   10634:	ldr	x0, [sp, #32]
   10638:	ldr	x1, [x0, #256]
   1063c:	ldr	x0, [sp, #56]
   10640:	lsl	x0, x0, #3
   10644:	add	x0, x1, x0
   10648:	mov	w1, w2
   1064c:	str	w1, [x0]
   10650:	b	106b0 <parse_printf_args+0x540>
   10654:	ldr	x0, [sp, #32]
   10658:	ldr	x1, [x0, #256]
   1065c:	ldr	x0, [sp, #56]
   10660:	lsl	x0, x0, #3
   10664:	add	x0, x1, x0
   10668:	ldr	w1, [sp, #68]
   1066c:	str	w1, [x0]
   10670:	b	106b0 <parse_printf_args+0x540>
   10674:	ldr	x0, [sp, #32]
   10678:	ldr	x1, [x0, #256]
   1067c:	ldr	x0, [sp, #56]
   10680:	lsl	x0, x0, #3
   10684:	add	x0, x1, x0
   10688:	mov	w1, #0x5                   	// #5
   1068c:	str	w1, [x0]
   10690:	b	106b0 <parse_printf_args+0x540>
   10694:	ldr	x0, [sp, #32]
   10698:	ldr	x1, [x0, #256]
   1069c:	ldr	x0, [sp, #56]
   106a0:	lsl	x0, x0, #3
   106a4:	add	x0, x1, x0
   106a8:	str	wzr, [x0]
   106ac:	nop
   106b0:	ldr	x0, [sp, #88]
   106b4:	add	x1, x0, #0x1
   106b8:	str	x1, [sp, #88]
   106bc:	ldrb	w0, [x0]
   106c0:	strb	w0, [sp, #87]
   106c4:	ldrb	w0, [sp, #87]
   106c8:	cmp	w0, #0x0
   106cc:	b.ne	1040c <parse_printf_args+0x29c>  // b.any
   106d0:	str	xzr, [sp, #72]
   106d4:	b	1098c <parse_printf_args+0x81c>
   106d8:	ldr	x0, [sp, #32]
   106dc:	ldr	x1, [x0, #256]
   106e0:	ldr	x0, [sp, #72]
   106e4:	lsl	x0, x0, #3
   106e8:	add	x0, x1, x0
   106ec:	ldr	w0, [x0]
   106f0:	cmp	w0, #0x5
   106f4:	b.eq	10910 <parse_printf_args+0x7a0>  // b.none
   106f8:	cmp	w0, #0x5
   106fc:	b.hi	10980 <parse_printf_args+0x810>  // b.pmore
   10700:	cmp	w0, #0x4
   10704:	b.eq	1089c <parse_printf_args+0x72c>  // b.none
   10708:	cmp	w0, #0x4
   1070c:	b.hi	10980 <parse_printf_args+0x810>  // b.pmore
   10710:	cmp	w0, #0x3
   10714:	b.eq	10828 <parse_printf_args+0x6b8>  // b.none
   10718:	cmp	w0, #0x3
   1071c:	b.hi	10980 <parse_printf_args+0x810>  // b.pmore
   10720:	cmp	w0, #0x2
   10724:	b.eq	10910 <parse_printf_args+0x7a0>  // b.none
   10728:	cmp	w0, #0x2
   1072c:	b.hi	10980 <parse_printf_args+0x810>  // b.pmore
   10730:	cmp	w0, #0x0
   10734:	b.eq	10744 <parse_printf_args+0x5d4>  // b.none
   10738:	cmp	w0, #0x1
   1073c:	b.eq	107b8 <parse_printf_args+0x648>  // b.none
   10740:	b	10980 <parse_printf_args+0x810>
   10744:	ldr	w1, [x19, #24]
   10748:	ldr	x0, [x19]
   1074c:	cmp	w1, #0x0
   10750:	b.lt	10764 <parse_printf_args+0x5f4>  // b.tstop
   10754:	add	x1, x0, #0xb
   10758:	and	x1, x1, #0xfffffffffffffff8
   1075c:	str	x1, [x19]
   10760:	b	10794 <parse_printf_args+0x624>
   10764:	add	w2, w1, #0x8
   10768:	str	w2, [x19, #24]
   1076c:	ldr	w2, [x19, #24]
   10770:	cmp	w2, #0x0
   10774:	b.le	10788 <parse_printf_args+0x618>
   10778:	add	x1, x0, #0xb
   1077c:	and	x1, x1, #0xfffffffffffffff8
   10780:	str	x1, [x19]
   10784:	b	10794 <parse_printf_args+0x624>
   10788:	ldr	x2, [x19, #8]
   1078c:	sxtw	x0, w1
   10790:	add	x0, x2, x0
   10794:	ldr	w2, [x0]
   10798:	ldr	x0, [sp, #32]
   1079c:	ldr	x1, [x0, #256]
   107a0:	ldr	x0, [sp, #72]
   107a4:	lsl	x0, x0, #3
   107a8:	add	x0, x1, x0
   107ac:	sxtw	x1, w2
   107b0:	str	x1, [x0]
   107b4:	b	10980 <parse_printf_args+0x810>
   107b8:	ldr	x0, [sp, #32]
   107bc:	ldr	x1, [x0, #256]
   107c0:	ldr	x0, [sp, #72]
   107c4:	lsl	x0, x0, #3
   107c8:	add	x2, x1, x0
   107cc:	ldr	w1, [x19, #24]
   107d0:	ldr	x0, [x19]
   107d4:	cmp	w1, #0x0
   107d8:	b.lt	107ec <parse_printf_args+0x67c>  // b.tstop
   107dc:	add	x1, x0, #0xf
   107e0:	and	x1, x1, #0xfffffffffffffff8
   107e4:	str	x1, [x19]
   107e8:	b	1081c <parse_printf_args+0x6ac>
   107ec:	add	w3, w1, #0x8
   107f0:	str	w3, [x19, #24]
   107f4:	ldr	w3, [x19, #24]
   107f8:	cmp	w3, #0x0
   107fc:	b.le	10810 <parse_printf_args+0x6a0>
   10800:	add	x1, x0, #0xf
   10804:	and	x1, x1, #0xfffffffffffffff8
   10808:	str	x1, [x19]
   1080c:	b	1081c <parse_printf_args+0x6ac>
   10810:	ldr	x3, [x19, #8]
   10814:	sxtw	x0, w1
   10818:	add	x0, x3, x0
   1081c:	ldr	x0, [x0]
   10820:	str	x0, [x2]
   10824:	b	10980 <parse_printf_args+0x810>
   10828:	ldr	w1, [x19, #24]
   1082c:	ldr	x0, [x19]
   10830:	cmp	w1, #0x0
   10834:	b.lt	10848 <parse_printf_args+0x6d8>  // b.tstop
   10838:	add	x1, x0, #0xb
   1083c:	and	x1, x1, #0xfffffffffffffff8
   10840:	str	x1, [x19]
   10844:	b	10878 <parse_printf_args+0x708>
   10848:	add	w2, w1, #0x8
   1084c:	str	w2, [x19, #24]
   10850:	ldr	w2, [x19, #24]
   10854:	cmp	w2, #0x0
   10858:	b.le	1086c <parse_printf_args+0x6fc>
   1085c:	add	x1, x0, #0xb
   10860:	and	x1, x1, #0xfffffffffffffff8
   10864:	str	x1, [x19]
   10868:	b	10878 <parse_printf_args+0x708>
   1086c:	ldr	x2, [x19, #8]
   10870:	sxtw	x0, w1
   10874:	add	x0, x2, x0
   10878:	ldr	w2, [x0]
   1087c:	ldr	x0, [sp, #32]
   10880:	ldr	x1, [x0, #256]
   10884:	ldr	x0, [sp, #72]
   10888:	lsl	x0, x0, #3
   1088c:	add	x0, x1, x0
   10890:	mov	w1, w2
   10894:	str	x1, [x0]
   10898:	b	10980 <parse_printf_args+0x810>
   1089c:	ldr	w1, [x19, #24]
   108a0:	ldr	x0, [x19]
   108a4:	cmp	w1, #0x0
   108a8:	b.lt	108bc <parse_printf_args+0x74c>  // b.tstop
   108ac:	add	x1, x0, #0xf
   108b0:	and	x1, x1, #0xfffffffffffffff8
   108b4:	str	x1, [x19]
   108b8:	b	108ec <parse_printf_args+0x77c>
   108bc:	add	w2, w1, #0x8
   108c0:	str	w2, [x19, #24]
   108c4:	ldr	w2, [x19, #24]
   108c8:	cmp	w2, #0x0
   108cc:	b.le	108e0 <parse_printf_args+0x770>
   108d0:	add	x1, x0, #0xf
   108d4:	and	x1, x1, #0xfffffffffffffff8
   108d8:	str	x1, [x19]
   108dc:	b	108ec <parse_printf_args+0x77c>
   108e0:	ldr	x2, [x19, #8]
   108e4:	sxtw	x0, w1
   108e8:	add	x0, x2, x0
   108ec:	ldr	x2, [x0]
   108f0:	ldr	x0, [sp, #32]
   108f4:	ldr	x1, [x0, #256]
   108f8:	ldr	x0, [sp, #72]
   108fc:	lsl	x0, x0, #3
   10900:	add	x0, x1, x0
   10904:	mov	x1, x2
   10908:	str	x1, [x0]
   1090c:	b	10980 <parse_printf_args+0x810>
   10910:	ldr	x0, [sp, #32]
   10914:	ldr	x1, [x0, #256]
   10918:	ldr	x0, [sp, #72]
   1091c:	lsl	x0, x0, #3
   10920:	add	x2, x1, x0
   10924:	ldr	w1, [x19, #24]
   10928:	ldr	x0, [x19]
   1092c:	cmp	w1, #0x0
   10930:	b.lt	10944 <parse_printf_args+0x7d4>  // b.tstop
   10934:	add	x1, x0, #0xf
   10938:	and	x1, x1, #0xfffffffffffffff8
   1093c:	str	x1, [x19]
   10940:	b	10974 <parse_printf_args+0x804>
   10944:	add	w3, w1, #0x8
   10948:	str	w3, [x19, #24]
   1094c:	ldr	w3, [x19, #24]
   10950:	cmp	w3, #0x0
   10954:	b.le	10968 <parse_printf_args+0x7f8>
   10958:	add	x1, x0, #0xf
   1095c:	and	x1, x1, #0xfffffffffffffff8
   10960:	str	x1, [x19]
   10964:	b	10974 <parse_printf_args+0x804>
   10968:	ldr	x3, [x19, #8]
   1096c:	sxtw	x0, w1
   10970:	add	x0, x3, x0
   10974:	ldr	x0, [x0]
   10978:	str	x0, [x2]
   1097c:	nop
   10980:	ldr	x0, [sp, #72]
   10984:	add	x0, x0, #0x1
   10988:	str	x0, [sp, #72]
   1098c:	ldr	x0, [sp, #32]
   10990:	ldr	x0, [x0, #264]
   10994:	ldr	x1, [sp, #72]
   10998:	cmp	x1, x0
   1099c:	b.cc	106d8 <parse_printf_args+0x568>  // b.lo, b.ul, b.last
   109a0:	nop
   109a4:	nop
   109a8:	ldr	x19, [sp, #16]
   109ac:	ldp	x29, x30, [sp], #96
   109b0:	ret
   109b4:	nop
	...

00000000000109c0 <grub_vsnprintf_real>:
   109c0:	sub	sp, sp, #0x2a0
   109c4:	stp	x29, x30, [sp]
   109c8:	mov	x29, sp
   109cc:	str	x0, [sp, #40]
   109d0:	str	x1, [sp, #32]
   109d4:	str	x2, [sp, #24]
   109d8:	str	x3, [sp, #16]
   109dc:	str	xzr, [sp, #656]
   109e0:	str	xzr, [sp, #96]
   109e4:	ldr	x0, [sp, #24]
   109e8:	str	x0, [sp, #88]
   109ec:	b	11478 <grub_vsnprintf_real+0xab8>
   109f0:	str	wzr, [sp, #652]
   109f4:	mov	w0, #0xffffffff            	// #-1
   109f8:	str	w0, [sp, #648]
   109fc:	mov	w0, #0x20                  	// #32
   10a00:	strb	w0, [sp, #647]
   10a04:	strb	wzr, [sp, #646]
   10a08:	ldrb	w0, [sp, #671]
   10a0c:	cmp	w0, #0x25
   10a10:	b.eq	10a7c <grub_vsnprintf_real+0xbc>  // b.none
   10a14:	ldr	x0, [sp, #40]
   10a18:	str	x0, [sp, #544]
   10a1c:	add	x0, sp, #0x60
   10a20:	str	x0, [sp, #536]
   10a24:	ldr	x0, [sp, #32]
   10a28:	str	x0, [sp, #528]
   10a2c:	ldrb	w0, [sp, #671]
   10a30:	strb	w0, [sp, #527]
   10a34:	ldr	x0, [sp, #536]
   10a38:	ldr	x0, [x0]
   10a3c:	ldr	x1, [sp, #528]
   10a40:	cmp	x1, x0
   10a44:	b.ls	10a60 <grub_vsnprintf_real+0xa0>  // b.plast
   10a48:	ldr	x0, [sp, #536]
   10a4c:	ldr	x0, [x0]
   10a50:	ldr	x1, [sp, #544]
   10a54:	add	x0, x1, x0
   10a58:	ldrb	w1, [sp, #527]
   10a5c:	strb	w1, [x0]
   10a60:	ldr	x0, [sp, #536]
   10a64:	ldr	x0, [x0]
   10a68:	add	x1, x0, #0x1
   10a6c:	ldr	x0, [sp, #536]
   10a70:	str	x1, [x0]
   10a74:	nop
   10a78:	b	11478 <grub_vsnprintf_real+0xab8>
   10a7c:	ldr	x0, [sp, #656]
   10a80:	add	x1, x0, #0x1
   10a84:	str	x1, [sp, #656]
   10a88:	str	x0, [sp, #632]
   10a8c:	ldr	x0, [sp, #88]
   10a90:	ldrb	w0, [x0]
   10a94:	cmp	w0, #0x2d
   10a98:	b.ne	10ab0 <grub_vsnprintf_real+0xf0>  // b.any
   10a9c:	mov	w0, #0x1                   	// #1
   10aa0:	strb	w0, [sp, #646]
   10aa4:	ldr	x0, [sp, #88]
   10aa8:	add	x0, x0, #0x1
   10aac:	str	x0, [sp, #88]
   10ab0:	ldr	x0, [sp, #88]
   10ab4:	ldrb	w0, [x0]
   10ab8:	bl	ef1c <grub_isdigit>
   10abc:	cmp	w0, #0x0
   10ac0:	b.eq	10af0 <grub_vsnprintf_real+0x130>  // b.none
   10ac4:	ldr	x0, [sp, #88]
   10ac8:	ldrb	w0, [x0]
   10acc:	cmp	w0, #0x30
   10ad0:	b.ne	10adc <grub_vsnprintf_real+0x11c>  // b.any
   10ad4:	mov	w0, #0x30                  	// #48
   10ad8:	strb	w0, [sp, #647]
   10adc:	ldr	x0, [sp, #88]
   10ae0:	add	x1, sp, #0x58
   10ae4:	mov	w2, #0xa                   	// #10
   10ae8:	bl	f9ec <grub_strtoul>
   10aec:	str	w0, [sp, #652]
   10af0:	ldr	x0, [sp, #88]
   10af4:	ldrb	w0, [x0]
   10af8:	cmp	w0, #0x2e
   10afc:	b.ne	10b0c <grub_vsnprintf_real+0x14c>  // b.any
   10b00:	ldr	x0, [sp, #88]
   10b04:	add	x0, x0, #0x1
   10b08:	str	x0, [sp, #88]
   10b0c:	ldr	x0, [sp, #88]
   10b10:	ldrb	w0, [x0]
   10b14:	bl	ef1c <grub_isdigit>
   10b18:	cmp	w0, #0x0
   10b1c:	b.eq	10b34 <grub_vsnprintf_real+0x174>  // b.none
   10b20:	ldr	x0, [sp, #88]
   10b24:	add	x1, sp, #0x58
   10b28:	mov	w2, #0xa                   	// #10
   10b2c:	bl	f9ec <grub_strtoul>
   10b30:	str	w0, [sp, #648]
   10b34:	ldr	x0, [sp, #88]
   10b38:	ldrb	w0, [x0]
   10b3c:	cmp	w0, #0x24
   10b40:	b.ne	10b7c <grub_vsnprintf_real+0x1bc>  // b.any
   10b44:	ldr	w0, [sp, #652]
   10b48:	sub	w0, w0, #0x1
   10b4c:	mov	w0, w0
   10b50:	str	x0, [sp, #632]
   10b54:	ldr	x0, [sp, #88]
   10b58:	add	x0, x0, #0x1
   10b5c:	str	x0, [sp, #88]
   10b60:	str	wzr, [sp, #652]
   10b64:	mov	w0, #0xffffffff            	// #-1
   10b68:	str	w0, [sp, #648]
   10b6c:	mov	w0, #0x20                  	// #32
   10b70:	strb	w0, [sp, #647]
   10b74:	strb	wzr, [sp, #646]
   10b78:	b	10a8c <grub_vsnprintf_real+0xcc>
   10b7c:	ldr	x0, [sp, #88]
   10b80:	add	x1, x0, #0x1
   10b84:	str	x1, [sp, #88]
   10b88:	ldrb	w0, [x0]
   10b8c:	strb	w0, [sp, #671]
   10b90:	ldrb	w0, [sp, #671]
   10b94:	cmp	w0, #0x6c
   10b98:	b.ne	10bb0 <grub_vsnprintf_real+0x1f0>  // b.any
   10b9c:	ldr	x0, [sp, #88]
   10ba0:	add	x1, x0, #0x1
   10ba4:	str	x1, [sp, #88]
   10ba8:	ldrb	w0, [x0]
   10bac:	strb	w0, [sp, #671]
   10bb0:	ldrb	w0, [sp, #671]
   10bb4:	cmp	w0, #0x6c
   10bb8:	b.ne	10bd0 <grub_vsnprintf_real+0x210>  // b.any
   10bbc:	ldr	x0, [sp, #88]
   10bc0:	add	x1, x0, #0x1
   10bc4:	str	x1, [sp, #88]
   10bc8:	ldrb	w0, [x0]
   10bcc:	strb	w0, [sp, #671]
   10bd0:	ldrb	w0, [sp, #671]
   10bd4:	cmp	w0, #0x25
   10bd8:	b.ne	10c50 <grub_vsnprintf_real+0x290>  // b.any
   10bdc:	ldr	x0, [sp, #40]
   10be0:	str	x0, [sp, #512]
   10be4:	add	x0, sp, #0x60
   10be8:	str	x0, [sp, #504]
   10bec:	ldr	x0, [sp, #32]
   10bf0:	str	x0, [sp, #496]
   10bf4:	ldrb	w0, [sp, #671]
   10bf8:	strb	w0, [sp, #495]
   10bfc:	ldr	x0, [sp, #504]
   10c00:	ldr	x0, [x0]
   10c04:	ldr	x1, [sp, #496]
   10c08:	cmp	x1, x0
   10c0c:	b.ls	10c28 <grub_vsnprintf_real+0x268>  // b.plast
   10c10:	ldr	x0, [sp, #504]
   10c14:	ldr	x0, [x0]
   10c18:	ldr	x1, [sp, #512]
   10c1c:	add	x0, x1, x0
   10c20:	ldrb	w1, [sp, #495]
   10c24:	strb	w1, [x0]
   10c28:	ldr	x0, [sp, #504]
   10c2c:	ldr	x0, [x0]
   10c30:	add	x1, x0, #0x1
   10c34:	ldr	x0, [sp, #504]
   10c38:	str	x1, [x0]
   10c3c:	nop
   10c40:	ldr	x0, [sp, #656]
   10c44:	sub	x0, x0, #0x1
   10c48:	str	x0, [sp, #656]
   10c4c:	b	11478 <grub_vsnprintf_real+0xab8>
   10c50:	ldr	x0, [sp, #16]
   10c54:	ldr	x0, [x0, #264]
   10c58:	ldr	x1, [sp, #632]
   10c5c:	cmp	x1, x0
   10c60:	b.cc	10c68 <grub_vsnprintf_real+0x2a8>  // b.lo, b.ul, b.last
   10c64:	b	11478 <grub_vsnprintf_real+0xab8>
   10c68:	ldr	x0, [sp, #16]
   10c6c:	ldr	x1, [x0, #256]
   10c70:	ldr	x0, [sp, #632]
   10c74:	lsl	x0, x0, #3
   10c78:	add	x0, x1, x0
   10c7c:	ldr	x0, [x0]
   10c80:	str	x0, [sp, #560]
   10c84:	ldrb	w0, [sp, #671]
   10c88:	cmp	w0, #0x78
   10c8c:	b.eq	10dbc <grub_vsnprintf_real+0x3fc>  // b.none
   10c90:	cmp	w0, #0x78
   10c94:	b.gt	11410 <grub_vsnprintf_real+0xa50>
   10c98:	cmp	w0, #0x75
   10c9c:	b.eq	10dbc <grub_vsnprintf_real+0x3fc>  // b.none
   10ca0:	cmp	w0, #0x75
   10ca4:	b.gt	11410 <grub_vsnprintf_real+0xa50>
   10ca8:	cmp	w0, #0x73
   10cac:	b.eq	111e4 <grub_vsnprintf_real+0x824>  // b.none
   10cb0:	cmp	w0, #0x73
   10cb4:	b.gt	11410 <grub_vsnprintf_real+0xa50>
   10cb8:	cmp	w0, #0x70
   10cbc:	b.eq	10cec <grub_vsnprintf_real+0x32c>  // b.none
   10cc0:	cmp	w0, #0x70
   10cc4:	b.gt	11410 <grub_vsnprintf_real+0xa50>
   10cc8:	cmp	w0, #0x64
   10ccc:	b.eq	10dbc <grub_vsnprintf_real+0x3fc>  // b.none
   10cd0:	cmp	w0, #0x64
   10cd4:	b.gt	11410 <grub_vsnprintf_real+0xa50>
   10cd8:	cmp	w0, #0x43
   10cdc:	b.eq	11018 <grub_vsnprintf_real+0x658>  // b.none
   10ce0:	cmp	w0, #0x63
   10ce4:	b.eq	10fa8 <grub_vsnprintf_real+0x5e8>  // b.none
   10ce8:	b	11410 <grub_vsnprintf_real+0xa50>
   10cec:	ldr	x0, [sp, #40]
   10cf0:	str	x0, [sp, #448]
   10cf4:	add	x0, sp, #0x60
   10cf8:	str	x0, [sp, #440]
   10cfc:	ldr	x0, [sp, #32]
   10d00:	str	x0, [sp, #432]
   10d04:	mov	w0, #0x30                  	// #48
   10d08:	strb	w0, [sp, #431]
   10d0c:	ldr	x0, [sp, #440]
   10d10:	ldr	x0, [x0]
   10d14:	ldr	x1, [sp, #432]
   10d18:	cmp	x1, x0
   10d1c:	b.ls	10d38 <grub_vsnprintf_real+0x378>  // b.plast
   10d20:	ldr	x0, [sp, #440]
   10d24:	ldr	x0, [x0]
   10d28:	ldr	x1, [sp, #448]
   10d2c:	add	x0, x1, x0
   10d30:	ldrb	w1, [sp, #431]
   10d34:	strb	w1, [x0]
   10d38:	ldr	x0, [sp, #440]
   10d3c:	ldr	x0, [x0]
   10d40:	add	x1, x0, #0x1
   10d44:	ldr	x0, [sp, #440]
   10d48:	str	x1, [x0]
   10d4c:	nop
   10d50:	ldr	x0, [sp, #40]
   10d54:	str	x0, [sp, #480]
   10d58:	add	x0, sp, #0x60
   10d5c:	str	x0, [sp, #472]
   10d60:	ldr	x0, [sp, #32]
   10d64:	str	x0, [sp, #464]
   10d68:	mov	w0, #0x78                  	// #120
   10d6c:	strb	w0, [sp, #463]
   10d70:	ldr	x0, [sp, #472]
   10d74:	ldr	x0, [x0]
   10d78:	ldr	x1, [sp, #464]
   10d7c:	cmp	x1, x0
   10d80:	b.ls	10d9c <grub_vsnprintf_real+0x3dc>  // b.plast
   10d84:	ldr	x0, [sp, #472]
   10d88:	ldr	x0, [x0]
   10d8c:	ldr	x1, [sp, #480]
   10d90:	add	x0, x1, x0
   10d94:	ldrb	w1, [sp, #463]
   10d98:	strb	w1, [x0]
   10d9c:	ldr	x0, [sp, #472]
   10da0:	ldr	x0, [x0]
   10da4:	add	x1, x0, #0x1
   10da8:	ldr	x0, [sp, #472]
   10dac:	str	x1, [x0]
   10db0:	nop
   10db4:	mov	w0, #0x78                  	// #120
   10db8:	strb	w0, [sp, #671]
   10dbc:	add	x0, sp, #0x38
   10dc0:	str	x0, [sp, #624]
   10dc4:	ldrb	w1, [sp, #671]
   10dc8:	ldr	x2, [sp, #560]
   10dcc:	add	x0, sp, #0x38
   10dd0:	bl	1002c <grub_lltoa>
   10dd4:	mov	x1, x0
   10dd8:	add	x0, sp, #0x38
   10ddc:	sub	x0, x1, x0
   10de0:	str	x0, [sp, #552]
   10de4:	ldr	w0, [sp, #652]
   10de8:	ldr	x1, [sp, #552]
   10dec:	cmp	x1, x0
   10df0:	b.cs	10e04 <grub_vsnprintf_real+0x444>  // b.hs, b.nlast
   10df4:	ldr	w1, [sp, #652]
   10df8:	ldr	x0, [sp, #552]
   10dfc:	sub	x0, x1, x0
   10e00:	b	10e08 <grub_vsnprintf_real+0x448>
   10e04:	mov	x0, #0x0                   	// #0
   10e08:	str	x0, [sp, #616]
   10e0c:	ldrb	w0, [sp, #646]
   10e10:	cmp	w0, #0x0
   10e14:	b.ne	10f0c <grub_vsnprintf_real+0x54c>  // b.any
   10e18:	b	10e80 <grub_vsnprintf_real+0x4c0>
   10e1c:	ldr	x0, [sp, #40]
   10e20:	str	x0, [sp, #416]
   10e24:	add	x0, sp, #0x60
   10e28:	str	x0, [sp, #408]
   10e2c:	ldr	x0, [sp, #32]
   10e30:	str	x0, [sp, #400]
   10e34:	ldrb	w0, [sp, #647]
   10e38:	strb	w0, [sp, #399]
   10e3c:	ldr	x0, [sp, #408]
   10e40:	ldr	x0, [x0]
   10e44:	ldr	x1, [sp, #400]
   10e48:	cmp	x1, x0
   10e4c:	b.ls	10e68 <grub_vsnprintf_real+0x4a8>  // b.plast
   10e50:	ldr	x0, [sp, #408]
   10e54:	ldr	x0, [x0]
   10e58:	ldr	x1, [sp, #416]
   10e5c:	add	x0, x1, x0
   10e60:	ldrb	w1, [sp, #399]
   10e64:	strb	w1, [x0]
   10e68:	ldr	x0, [sp, #408]
   10e6c:	ldr	x0, [x0]
   10e70:	add	x1, x0, #0x1
   10e74:	ldr	x0, [sp, #408]
   10e78:	str	x1, [x0]
   10e7c:	nop
   10e80:	ldr	x0, [sp, #616]
   10e84:	sub	x1, x0, #0x1
   10e88:	str	x1, [sp, #616]
   10e8c:	cmp	x0, #0x0
   10e90:	b.ne	10e1c <grub_vsnprintf_real+0x45c>  // b.any
   10e94:	b	10f0c <grub_vsnprintf_real+0x54c>
   10e98:	ldr	x0, [sp, #624]
   10e9c:	add	x1, x0, #0x1
   10ea0:	str	x1, [sp, #624]
   10ea4:	ldrb	w1, [x0]
   10ea8:	ldr	x0, [sp, #40]
   10eac:	str	x0, [sp, #384]
   10eb0:	add	x0, sp, #0x60
   10eb4:	str	x0, [sp, #376]
   10eb8:	ldr	x0, [sp, #32]
   10ebc:	str	x0, [sp, #368]
   10ec0:	mov	w0, w1
   10ec4:	strb	w0, [sp, #367]
   10ec8:	ldr	x0, [sp, #376]
   10ecc:	ldr	x0, [x0]
   10ed0:	ldr	x1, [sp, #368]
   10ed4:	cmp	x1, x0
   10ed8:	b.ls	10ef4 <grub_vsnprintf_real+0x534>  // b.plast
   10edc:	ldr	x0, [sp, #376]
   10ee0:	ldr	x0, [x0]
   10ee4:	ldr	x1, [sp, #384]
   10ee8:	add	x0, x1, x0
   10eec:	ldrb	w1, [sp, #367]
   10ef0:	strb	w1, [x0]
   10ef4:	ldr	x0, [sp, #376]
   10ef8:	ldr	x0, [x0]
   10efc:	add	x1, x0, #0x1
   10f00:	ldr	x0, [sp, #376]
   10f04:	str	x1, [x0]
   10f08:	nop
   10f0c:	ldr	x0, [sp, #624]
   10f10:	ldrb	w0, [x0]
   10f14:	cmp	w0, #0x0
   10f18:	b.ne	10e98 <grub_vsnprintf_real+0x4d8>  // b.any
   10f1c:	ldrb	w0, [sp, #646]
   10f20:	cmp	w0, #0x0
   10f24:	b.eq	11478 <grub_vsnprintf_real+0xab8>  // b.none
   10f28:	b	10f90 <grub_vsnprintf_real+0x5d0>
   10f2c:	ldr	x0, [sp, #40]
   10f30:	str	x0, [sp, #352]
   10f34:	add	x0, sp, #0x60
   10f38:	str	x0, [sp, #344]
   10f3c:	ldr	x0, [sp, #32]
   10f40:	str	x0, [sp, #336]
   10f44:	ldrb	w0, [sp, #647]
   10f48:	strb	w0, [sp, #335]
   10f4c:	ldr	x0, [sp, #344]
   10f50:	ldr	x0, [x0]
   10f54:	ldr	x1, [sp, #336]
   10f58:	cmp	x1, x0
   10f5c:	b.ls	10f78 <grub_vsnprintf_real+0x5b8>  // b.plast
   10f60:	ldr	x0, [sp, #344]
   10f64:	ldr	x0, [x0]
   10f68:	ldr	x1, [sp, #352]
   10f6c:	add	x0, x1, x0
   10f70:	ldrb	w1, [sp, #335]
   10f74:	strb	w1, [x0]
   10f78:	ldr	x0, [sp, #344]
   10f7c:	ldr	x0, [x0]
   10f80:	add	x1, x0, #0x1
   10f84:	ldr	x0, [sp, #344]
   10f88:	str	x1, [x0]
   10f8c:	nop
   10f90:	ldr	x0, [sp, #616]
   10f94:	sub	x1, x0, #0x1
   10f98:	str	x1, [sp, #616]
   10f9c:	cmp	x0, #0x0
   10fa0:	b.ne	10f2c <grub_vsnprintf_real+0x56c>  // b.any
   10fa4:	b	11478 <grub_vsnprintf_real+0xab8>
   10fa8:	ldr	x0, [sp, #560]
   10fac:	and	w1, w0, #0xff
   10fb0:	ldr	x0, [sp, #40]
   10fb4:	str	x0, [sp, #320]
   10fb8:	add	x0, sp, #0x60
   10fbc:	str	x0, [sp, #312]
   10fc0:	ldr	x0, [sp, #32]
   10fc4:	str	x0, [sp, #304]
   10fc8:	mov	w0, w1
   10fcc:	strb	w0, [sp, #303]
   10fd0:	ldr	x0, [sp, #312]
   10fd4:	ldr	x0, [x0]
   10fd8:	ldr	x1, [sp, #304]
   10fdc:	cmp	x1, x0
   10fe0:	b.ls	10ffc <grub_vsnprintf_real+0x63c>  // b.plast
   10fe4:	ldr	x0, [sp, #312]
   10fe8:	ldr	x0, [x0]
   10fec:	ldr	x1, [sp, #320]
   10ff0:	add	x0, x1, x0
   10ff4:	ldrb	w1, [sp, #303]
   10ff8:	strb	w1, [x0]
   10ffc:	ldr	x0, [sp, #312]
   11000:	ldr	x0, [x0]
   11004:	add	x1, x0, #0x1
   11008:	ldr	x0, [sp, #312]
   1100c:	str	x1, [x0]
   11010:	nop
   11014:	b	11478 <grub_vsnprintf_real+0xab8>
   11018:	ldr	x0, [sp, #560]
   1101c:	str	w0, [sp, #612]
   11020:	ldr	w0, [sp, #612]
   11024:	cmp	w0, #0x7f
   11028:	b.hi	11038 <grub_vsnprintf_real+0x678>  // b.pmore
   1102c:	str	wzr, [sp, #608]
   11030:	str	wzr, [sp, #604]
   11034:	b	110b0 <grub_vsnprintf_real+0x6f0>
   11038:	ldr	w0, [sp, #612]
   1103c:	cmp	w0, #0x7ff
   11040:	b.hi	11058 <grub_vsnprintf_real+0x698>  // b.pmore
   11044:	mov	w0, #0x6                   	// #6
   11048:	str	w0, [sp, #608]
   1104c:	mov	w0, #0xc0                  	// #192
   11050:	str	w0, [sp, #604]
   11054:	b	110b0 <grub_vsnprintf_real+0x6f0>
   11058:	ldr	w1, [sp, #612]
   1105c:	mov	w0, #0xffff                	// #65535
   11060:	cmp	w1, w0
   11064:	b.hi	1107c <grub_vsnprintf_real+0x6bc>  // b.pmore
   11068:	mov	w0, #0xc                   	// #12
   1106c:	str	w0, [sp, #608]
   11070:	mov	w0, #0xe0                  	// #224
   11074:	str	w0, [sp, #604]
   11078:	b	110b0 <grub_vsnprintf_real+0x6f0>
   1107c:	ldr	w1, [sp, #612]
   11080:	mov	w0, #0x10ffff              	// #1114111
   11084:	cmp	w1, w0
   11088:	b.hi	110a0 <grub_vsnprintf_real+0x6e0>  // b.pmore
   1108c:	mov	w0, #0x12                  	// #18
   11090:	str	w0, [sp, #608]
   11094:	mov	w0, #0xf0                  	// #240
   11098:	str	w0, [sp, #604]
   1109c:	b	110b0 <grub_vsnprintf_real+0x6f0>
   110a0:	mov	w0, #0x3f                  	// #63
   110a4:	str	w0, [sp, #612]
   110a8:	str	wzr, [sp, #608]
   110ac:	str	wzr, [sp, #604]
   110b0:	ldr	w0, [sp, #608]
   110b4:	ldr	w1, [sp, #612]
   110b8:	lsr	w0, w1, w0
   110bc:	and	w1, w0, #0xff
   110c0:	ldr	w0, [sp, #604]
   110c4:	and	w0, w0, #0xff
   110c8:	orr	w0, w1, w0
   110cc:	and	w1, w0, #0xff
   110d0:	ldr	x0, [sp, #40]
   110d4:	str	x0, [sp, #288]
   110d8:	add	x0, sp, #0x60
   110dc:	str	x0, [sp, #280]
   110e0:	ldr	x0, [sp, #32]
   110e4:	str	x0, [sp, #272]
   110e8:	mov	w0, w1
   110ec:	strb	w0, [sp, #271]
   110f0:	ldr	x0, [sp, #280]
   110f4:	ldr	x0, [x0]
   110f8:	ldr	x1, [sp, #272]
   110fc:	cmp	x1, x0
   11100:	b.ls	1111c <grub_vsnprintf_real+0x75c>  // b.plast
   11104:	ldr	x0, [sp, #280]
   11108:	ldr	x0, [x0]
   1110c:	ldr	x1, [sp, #288]
   11110:	add	x0, x1, x0
   11114:	ldrb	w1, [sp, #271]
   11118:	strb	w1, [x0]
   1111c:	ldr	x0, [sp, #280]
   11120:	ldr	x0, [x0]
   11124:	add	x1, x0, #0x1
   11128:	ldr	x0, [sp, #280]
   1112c:	str	x1, [x0]
   11130:	nop
   11134:	ldr	w0, [sp, #608]
   11138:	sub	w0, w0, #0x6
   1113c:	str	w0, [sp, #608]
   11140:	b	111d4 <grub_vsnprintf_real+0x814>
   11144:	ldr	w0, [sp, #608]
   11148:	ldr	w1, [sp, #612]
   1114c:	lsr	w0, w1, w0
   11150:	and	w0, w0, #0xff
   11154:	and	w0, w0, #0x3f
   11158:	and	w0, w0, #0xff
   1115c:	orr	w0, w0, #0xffffff80
   11160:	and	w1, w0, #0xff
   11164:	ldr	x0, [sp, #40]
   11168:	str	x0, [sp, #256]
   1116c:	add	x0, sp, #0x60
   11170:	str	x0, [sp, #248]
   11174:	ldr	x0, [sp, #32]
   11178:	str	x0, [sp, #240]
   1117c:	mov	w0, w1
   11180:	strb	w0, [sp, #239]
   11184:	ldr	x0, [sp, #248]
   11188:	ldr	x0, [x0]
   1118c:	ldr	x1, [sp, #240]
   11190:	cmp	x1, x0
   11194:	b.ls	111b0 <grub_vsnprintf_real+0x7f0>  // b.plast
   11198:	ldr	x0, [sp, #248]
   1119c:	ldr	x0, [x0]
   111a0:	ldr	x1, [sp, #256]
   111a4:	add	x0, x1, x0
   111a8:	ldrb	w1, [sp, #239]
   111ac:	strb	w1, [x0]
   111b0:	ldr	x0, [sp, #248]
   111b4:	ldr	x0, [x0]
   111b8:	add	x1, x0, #0x1
   111bc:	ldr	x0, [sp, #248]
   111c0:	str	x1, [x0]
   111c4:	nop
   111c8:	ldr	w0, [sp, #608]
   111cc:	sub	w0, w0, #0x6
   111d0:	str	w0, [sp, #608]
   111d4:	ldr	w0, [sp, #608]
   111d8:	cmp	w0, #0x0
   111dc:	b.ge	11144 <grub_vsnprintf_real+0x784>  // b.tcont
   111e0:	b	11478 <grub_vsnprintf_real+0xab8>
   111e4:	str	xzr, [sp, #592]
   111e8:	ldr	x0, [sp, #560]
   111ec:	cmp	x0, #0x0
   111f0:	b.ne	11200 <grub_vsnprintf_real+0x840>  // b.any
   111f4:	adrp	x0, 0 <_start>
   111f8:	add	x0, x0, #0x0
   111fc:	ldr	x0, [x0]
   11200:	str	x0, [sp, #576]
   11204:	b	11214 <grub_vsnprintf_real+0x854>
   11208:	ldr	x0, [sp, #592]
   1120c:	add	x0, x0, #0x1
   11210:	str	x0, [sp, #592]
   11214:	ldr	w0, [sp, #648]
   11218:	ldr	x1, [sp, #592]
   1121c:	cmp	x1, x0
   11220:	b.cs	1123c <grub_vsnprintf_real+0x87c>  // b.hs, b.nlast
   11224:	ldr	x1, [sp, #576]
   11228:	ldr	x0, [sp, #592]
   1122c:	add	x0, x1, x0
   11230:	ldrb	w0, [x0]
   11234:	cmp	w0, #0x0
   11238:	b.ne	11208 <grub_vsnprintf_real+0x848>  // b.any
   1123c:	ldr	w0, [sp, #652]
   11240:	ldr	x1, [sp, #592]
   11244:	cmp	x1, x0
   11248:	b.cs	1125c <grub_vsnprintf_real+0x89c>  // b.hs, b.nlast
   1124c:	ldr	w1, [sp, #652]
   11250:	ldr	x0, [sp, #592]
   11254:	sub	x0, x1, x0
   11258:	b	11260 <grub_vsnprintf_real+0x8a0>
   1125c:	mov	x0, #0x0                   	// #0
   11260:	str	x0, [sp, #584]
   11264:	ldrb	w0, [sp, #646]
   11268:	cmp	w0, #0x0
   1126c:	b.ne	112ec <grub_vsnprintf_real+0x92c>  // b.any
   11270:	b	112d8 <grub_vsnprintf_real+0x918>
   11274:	ldr	x0, [sp, #40]
   11278:	str	x0, [sp, #224]
   1127c:	add	x0, sp, #0x60
   11280:	str	x0, [sp, #216]
   11284:	ldr	x0, [sp, #32]
   11288:	str	x0, [sp, #208]
   1128c:	ldrb	w0, [sp, #647]
   11290:	strb	w0, [sp, #207]
   11294:	ldr	x0, [sp, #216]
   11298:	ldr	x0, [x0]
   1129c:	ldr	x1, [sp, #208]
   112a0:	cmp	x1, x0
   112a4:	b.ls	112c0 <grub_vsnprintf_real+0x900>  // b.plast
   112a8:	ldr	x0, [sp, #216]
   112ac:	ldr	x0, [x0]
   112b0:	ldr	x1, [sp, #224]
   112b4:	add	x0, x1, x0
   112b8:	ldrb	w1, [sp, #207]
   112bc:	strb	w1, [x0]
   112c0:	ldr	x0, [sp, #216]
   112c4:	ldr	x0, [x0]
   112c8:	add	x1, x0, #0x1
   112cc:	ldr	x0, [sp, #216]
   112d0:	str	x1, [x0]
   112d4:	nop
   112d8:	ldr	x0, [sp, #584]
   112dc:	sub	x1, x0, #0x1
   112e0:	str	x1, [sp, #584]
   112e4:	cmp	x0, #0x0
   112e8:	b.ne	11274 <grub_vsnprintf_real+0x8b4>  // b.any
   112ec:	str	xzr, [sp, #568]
   112f0:	b	11374 <grub_vsnprintf_real+0x9b4>
   112f4:	ldr	x0, [sp, #576]
   112f8:	add	x1, x0, #0x1
   112fc:	str	x1, [sp, #576]
   11300:	ldrb	w1, [x0]
   11304:	ldr	x0, [sp, #40]
   11308:	str	x0, [sp, #192]
   1130c:	add	x0, sp, #0x60
   11310:	str	x0, [sp, #184]
   11314:	ldr	x0, [sp, #32]
   11318:	str	x0, [sp, #176]
   1131c:	mov	w0, w1
   11320:	strb	w0, [sp, #175]
   11324:	ldr	x0, [sp, #184]
   11328:	ldr	x0, [x0]
   1132c:	ldr	x1, [sp, #176]
   11330:	cmp	x1, x0
   11334:	b.ls	11350 <grub_vsnprintf_real+0x990>  // b.plast
   11338:	ldr	x0, [sp, #184]
   1133c:	ldr	x0, [x0]
   11340:	ldr	x1, [sp, #192]
   11344:	add	x0, x1, x0
   11348:	ldrb	w1, [sp, #175]
   1134c:	strb	w1, [x0]
   11350:	ldr	x0, [sp, #184]
   11354:	ldr	x0, [x0]
   11358:	add	x1, x0, #0x1
   1135c:	ldr	x0, [sp, #184]
   11360:	str	x1, [x0]
   11364:	nop
   11368:	ldr	x0, [sp, #568]
   1136c:	add	x0, x0, #0x1
   11370:	str	x0, [sp, #568]
   11374:	ldr	x1, [sp, #568]
   11378:	ldr	x0, [sp, #592]
   1137c:	cmp	x1, x0
   11380:	b.cc	112f4 <grub_vsnprintf_real+0x934>  // b.lo, b.ul, b.last
   11384:	ldrb	w0, [sp, #646]
   11388:	cmp	w0, #0x0
   1138c:	b.eq	11478 <grub_vsnprintf_real+0xab8>  // b.none
   11390:	b	113f8 <grub_vsnprintf_real+0xa38>
   11394:	ldr	x0, [sp, #40]
   11398:	str	x0, [sp, #160]
   1139c:	add	x0, sp, #0x60
   113a0:	str	x0, [sp, #152]
   113a4:	ldr	x0, [sp, #32]
   113a8:	str	x0, [sp, #144]
   113ac:	ldrb	w0, [sp, #647]
   113b0:	strb	w0, [sp, #143]
   113b4:	ldr	x0, [sp, #152]
   113b8:	ldr	x0, [x0]
   113bc:	ldr	x1, [sp, #144]
   113c0:	cmp	x1, x0
   113c4:	b.ls	113e0 <grub_vsnprintf_real+0xa20>  // b.plast
   113c8:	ldr	x0, [sp, #152]
   113cc:	ldr	x0, [x0]
   113d0:	ldr	x1, [sp, #160]
   113d4:	add	x0, x1, x0
   113d8:	ldrb	w1, [sp, #143]
   113dc:	strb	w1, [x0]
   113e0:	ldr	x0, [sp, #152]
   113e4:	ldr	x0, [x0]
   113e8:	add	x1, x0, #0x1
   113ec:	ldr	x0, [sp, #152]
   113f0:	str	x1, [x0]
   113f4:	nop
   113f8:	ldr	x0, [sp, #584]
   113fc:	sub	x1, x0, #0x1
   11400:	str	x1, [sp, #584]
   11404:	cmp	x0, #0x0
   11408:	b.ne	11394 <grub_vsnprintf_real+0x9d4>  // b.any
   1140c:	b	11478 <grub_vsnprintf_real+0xab8>
   11410:	ldr	x0, [sp, #40]
   11414:	str	x0, [sp, #128]
   11418:	add	x0, sp, #0x60
   1141c:	str	x0, [sp, #120]
   11420:	ldr	x0, [sp, #32]
   11424:	str	x0, [sp, #112]
   11428:	ldrb	w0, [sp, #671]
   1142c:	strb	w0, [sp, #111]
   11430:	ldr	x0, [sp, #120]
   11434:	ldr	x0, [x0]
   11438:	ldr	x1, [sp, #112]
   1143c:	cmp	x1, x0
   11440:	b.ls	1145c <grub_vsnprintf_real+0xa9c>  // b.plast
   11444:	ldr	x0, [sp, #120]
   11448:	ldr	x0, [x0]
   1144c:	ldr	x1, [sp, #128]
   11450:	add	x0, x1, x0
   11454:	ldrb	w1, [sp, #111]
   11458:	strb	w1, [x0]
   1145c:	ldr	x0, [sp, #120]
   11460:	ldr	x0, [x0]
   11464:	add	x1, x0, #0x1
   11468:	ldr	x0, [sp, #120]
   1146c:	str	x1, [x0]
   11470:	nop
   11474:	nop
   11478:	ldr	x0, [sp, #88]
   1147c:	add	x1, x0, #0x1
   11480:	str	x1, [sp, #88]
   11484:	ldrb	w0, [x0]
   11488:	strb	w0, [sp, #671]
   1148c:	ldrb	w0, [sp, #671]
   11490:	cmp	w0, #0x0
   11494:	b.ne	109f0 <grub_vsnprintf_real+0x30>  // b.any
   11498:	ldr	x0, [sp, #96]
   1149c:	ldr	x1, [sp, #32]
   114a0:	cmp	x1, x0
   114a4:	b.ls	114bc <grub_vsnprintf_real+0xafc>  // b.plast
   114a8:	ldr	x0, [sp, #96]
   114ac:	ldr	x1, [sp, #40]
   114b0:	add	x0, x1, x0
   114b4:	strb	wzr, [x0]
   114b8:	b	114cc <grub_vsnprintf_real+0xb0c>
   114bc:	ldr	x1, [sp, #40]
   114c0:	ldr	x0, [sp, #32]
   114c4:	add	x0, x1, x0
   114c8:	strb	wzr, [x0]
   114cc:	ldr	x0, [sp, #96]
   114d0:	ldp	x29, x30, [sp]
   114d4:	add	sp, sp, #0x2a0
   114d8:	ret
   114dc:	nop
	...

00000000000114e8 <grub_vsnprintf>:
   114e8:	stp	x29, x30, [sp, #-384]!
   114ec:	mov	x29, sp
   114f0:	str	x19, [sp, #16]
   114f4:	str	x0, [sp, #88]
   114f8:	str	x1, [sp, #80]
   114fc:	str	x2, [sp, #72]
   11500:	mov	x19, x3
   11504:	ldr	x0, [sp, #80]
   11508:	cmp	x0, #0x0
   1150c:	b.ne	11518 <grub_vsnprintf+0x30>  // b.any
   11510:	mov	w0, #0x0                   	// #0
   11514:	b	11590 <grub_vsnprintf+0xa8>
   11518:	ldr	x0, [sp, #80]
   1151c:	sub	x0, x0, #0x1
   11520:	str	x0, [sp, #80]
   11524:	add	x2, sp, #0x20
   11528:	mov	x3, x19
   1152c:	ldp	x0, x1, [x3]
   11530:	stp	x0, x1, [x2]
   11534:	ldp	x0, x1, [x3, #16]
   11538:	stp	x0, x1, [x2, #16]
   1153c:	add	x1, sp, #0x20
   11540:	add	x0, sp, #0x68
   11544:	mov	x2, x1
   11548:	mov	x1, x0
   1154c:	ldr	x0, [sp, #72]
   11550:	bl	10170 <parse_printf_args>
   11554:	add	x0, sp, #0x68
   11558:	mov	x3, x0
   1155c:	ldr	x2, [sp, #72]
   11560:	ldr	x1, [sp, #80]
   11564:	ldr	x0, [sp, #88]
   11568:	bl	109c0 <grub_vsnprintf_real>
   1156c:	sxtw	x0, w0
   11570:	str	x0, [sp, #376]
   11574:	add	x0, sp, #0x68
   11578:	bl	efe0 <free_printf_args>
   1157c:	ldr	x0, [sp, #376]
   11580:	ldr	x2, [sp, #80]
   11584:	ldr	x1, [sp, #80]
   11588:	cmp	x2, x0
   1158c:	csel	x0, x1, x0, ls  // ls = plast
   11590:	ldr	x19, [sp, #16]
   11594:	ldp	x29, x30, [sp], #384
   11598:	ret

000000000001159c <grub_snprintf>:
   1159c:	stp	x29, x30, [sp, #-176]!
   115a0:	mov	x29, sp
   115a4:	str	x0, [sp, #72]
   115a8:	str	x1, [sp, #64]
   115ac:	str	x2, [sp, #56]
   115b0:	str	x3, [sp, #136]
   115b4:	str	x4, [sp, #144]
   115b8:	str	x5, [sp, #152]
   115bc:	str	x6, [sp, #160]
   115c0:	str	x7, [sp, #168]
   115c4:	add	x0, sp, #0xb0
   115c8:	str	x0, [sp, #88]
   115cc:	add	x0, sp, #0xb0
   115d0:	str	x0, [sp, #96]
   115d4:	add	x0, sp, #0x80
   115d8:	str	x0, [sp, #104]
   115dc:	mov	w0, #0xffffffd8            	// #-40
   115e0:	str	w0, [sp, #112]
   115e4:	str	wzr, [sp, #116]
   115e8:	add	x2, sp, #0x10
   115ec:	add	x3, sp, #0x58
   115f0:	ldp	x0, x1, [x3]
   115f4:	stp	x0, x1, [x2]
   115f8:	ldp	x0, x1, [x3, #16]
   115fc:	stp	x0, x1, [x2, #16]
   11600:	add	x0, sp, #0x10
   11604:	mov	x3, x0
   11608:	ldr	x2, [sp, #56]
   1160c:	ldr	x1, [sp, #64]
   11610:	ldr	x0, [sp, #72]
   11614:	bl	114e8 <grub_vsnprintf>
   11618:	str	w0, [sp, #124]
   1161c:	ldr	w0, [sp, #124]
   11620:	ldp	x29, x30, [sp], #176
   11624:	ret

0000000000011628 <grub_xvasprintf>:
   11628:	stp	x29, x30, [sp, #-384]!
   1162c:	mov	x29, sp
   11630:	str	x19, [sp, #16]
   11634:	str	x0, [sp, #72]
   11638:	mov	x19, x1
   1163c:	mov	x0, #0xff                  	// #255
   11640:	str	x0, [sp, #376]
   11644:	add	x2, sp, #0x20
   11648:	mov	x3, x19
   1164c:	ldp	x0, x1, [x3]
   11650:	stp	x0, x1, [x2]
   11654:	ldp	x0, x1, [x3, #16]
   11658:	stp	x0, x1, [x2, #16]
   1165c:	add	x1, sp, #0x20
   11660:	add	x0, sp, #0x58
   11664:	mov	x2, x1
   11668:	mov	x1, x0
   1166c:	ldr	x0, [sp, #72]
   11670:	bl	10170 <parse_printf_args>
   11674:	ldr	x0, [sp, #376]
   11678:	add	x0, x0, #0x1
   1167c:	bl	8348 <grub_malloc>
   11680:	str	x0, [sp, #368]
   11684:	ldr	x0, [sp, #368]
   11688:	cmp	x0, #0x0
   1168c:	b.ne	116a0 <grub_xvasprintf+0x78>  // b.any
   11690:	add	x0, sp, #0x58
   11694:	bl	efe0 <free_printf_args>
   11698:	mov	x0, #0x0                   	// #0
   1169c:	b	116f4 <grub_xvasprintf+0xcc>
   116a0:	add	x0, sp, #0x58
   116a4:	mov	x3, x0
   116a8:	ldr	x2, [sp, #72]
   116ac:	ldr	x1, [sp, #376]
   116b0:	ldr	x0, [sp, #368]
   116b4:	bl	109c0 <grub_vsnprintf_real>
   116b8:	sxtw	x0, w0
   116bc:	str	x0, [sp, #360]
   116c0:	ldr	x1, [sp, #360]
   116c4:	ldr	x0, [sp, #376]
   116c8:	cmp	x1, x0
   116cc:	b.hi	116e0 <grub_xvasprintf+0xb8>  // b.pmore
   116d0:	add	x0, sp, #0x58
   116d4:	bl	efe0 <free_printf_args>
   116d8:	ldr	x0, [sp, #368]
   116dc:	b	116f4 <grub_xvasprintf+0xcc>
   116e0:	ldr	x0, [sp, #368]
   116e4:	bl	83ac <grub_free>
   116e8:	ldr	x0, [sp, #360]
   116ec:	str	x0, [sp, #376]
   116f0:	b	11674 <grub_xvasprintf+0x4c>
   116f4:	ldr	x19, [sp, #16]
   116f8:	ldp	x29, x30, [sp], #384
   116fc:	ret

0000000000011700 <grub_xasprintf>:
   11700:	stp	x29, x30, [sp, #-176]!
   11704:	mov	x29, sp
   11708:	str	x0, [sp, #56]
   1170c:	str	x1, [sp, #120]
   11710:	str	x2, [sp, #128]
   11714:	str	x3, [sp, #136]
   11718:	str	x4, [sp, #144]
   1171c:	str	x5, [sp, #152]
   11720:	str	x6, [sp, #160]
   11724:	str	x7, [sp, #168]
   11728:	add	x0, sp, #0xb0
   1172c:	str	x0, [sp, #72]
   11730:	add	x0, sp, #0xb0
   11734:	str	x0, [sp, #80]
   11738:	add	x0, sp, #0x70
   1173c:	str	x0, [sp, #88]
   11740:	mov	w0, #0xffffffc8            	// #-56
   11744:	str	w0, [sp, #96]
   11748:	str	wzr, [sp, #100]
   1174c:	add	x2, sp, #0x10
   11750:	add	x3, sp, #0x48
   11754:	ldp	x0, x1, [x3]
   11758:	stp	x0, x1, [x2]
   1175c:	ldp	x0, x1, [x3, #16]
   11760:	stp	x0, x1, [x2, #16]
   11764:	add	x0, sp, #0x10
   11768:	mov	x1, x0
   1176c:	ldr	x0, [sp, #56]
   11770:	bl	11628 <grub_xvasprintf>
   11774:	str	x0, [sp, #104]
   11778:	ldr	x0, [sp, #104]
   1177c:	ldp	x29, x30, [sp], #176
   11780:	ret

0000000000011784 <grub_abort>:
   11784:	stp	x29, x30, [sp, #-16]!
   11788:	mov	x29, sp
   1178c:	adrp	x0, 0 <_start>
   11790:	add	x0, x0, #0x0
   11794:	ldr	x0, [x0]
   11798:	bl	f1b4 <grub_err_printf>
   1179c:	adrp	x0, 0 <_start>
   117a0:	add	x0, x0, #0x0
   117a4:	ldr	x0, [x0]
   117a8:	ldr	x0, [x0]
   117ac:	cmp	x0, #0x0
   117b0:	b.eq	117c8 <grub_abort+0x44>  // b.none
   117b4:	adrp	x0, 0 <_start>
   117b8:	add	x0, x0, #0x0
   117bc:	ldr	x0, [x0]
   117c0:	bl	f1b4 <grub_err_printf>
   117c4:	bl	130e8 <grub_getkey>
   117c8:	bl	3670 <grub_exit>
   117cc:	nop
	...

00000000000117e8 <grub_fatal>:
   117e8:	stp	x29, x30, [sp, #-176]!
   117ec:	mov	x29, sp
   117f0:	str	x0, [sp, #56]
   117f4:	str	x1, [sp, #120]
   117f8:	str	x2, [sp, #128]
   117fc:	str	x3, [sp, #136]
   11800:	str	x4, [sp, #144]
   11804:	str	x5, [sp, #152]
   11808:	str	x6, [sp, #160]
   1180c:	str	x7, [sp, #168]
   11810:	add	x0, sp, #0xb0
   11814:	str	x0, [sp, #72]
   11818:	add	x0, sp, #0xb0
   1181c:	str	x0, [sp, #80]
   11820:	add	x0, sp, #0x70
   11824:	str	x0, [sp, #88]
   11828:	mov	w0, #0xffffffc8            	// #-56
   1182c:	str	w0, [sp, #96]
   11830:	str	wzr, [sp, #100]
   11834:	ldr	x0, [sp, #56]
   11838:	str	x0, [sp, #104]
   1183c:	adrp	x0, 0 <_start>
   11840:	add	x0, x0, #0x0
   11844:	ldr	x0, [x0]
   11848:	ldr	x1, [x0]
   1184c:	ldr	x0, [sp, #104]
   11850:	blr	x1
   11854:	mov	x4, x0
   11858:	add	x2, sp, #0x10
   1185c:	add	x3, sp, #0x48
   11860:	ldp	x0, x1, [x3]
   11864:	stp	x0, x1, [x2]
   11868:	ldp	x0, x1, [x3, #16]
   1186c:	stp	x0, x1, [x2, #16]
   11870:	add	x0, sp, #0x10
   11874:	mov	x1, x0
   11878:	mov	x0, x4
   1187c:	bl	f430 <grub_vprintf>
   11880:	bl	13120 <grub_refresh>
   11884:	bl	11784 <grub_abort>
	...

0000000000011890 <grub_memcpy>:
   11890:	stp	x29, x30, [sp, #-48]!
   11894:	mov	x29, sp
   11898:	str	x0, [sp, #40]
   1189c:	str	x1, [sp, #32]
   118a0:	str	x2, [sp, #24]
   118a4:	ldr	x2, [sp, #24]
   118a8:	ldr	x1, [sp, #32]
   118ac:	ldr	x0, [sp, #40]
   118b0:	bl	f08c <grub_memmove>
   118b4:	ldp	x29, x30, [sp], #48
   118b8:	ret

00000000000118bc <grub_isalpha>:
   118bc:	sub	sp, sp, #0x10
   118c0:	str	w0, [sp, #12]
   118c4:	ldr	w0, [sp, #12]
   118c8:	cmp	w0, #0x60
   118cc:	b.le	118dc <grub_isalpha+0x20>
   118d0:	ldr	w0, [sp, #12]
   118d4:	cmp	w0, #0x7a
   118d8:	b.le	118f4 <grub_isalpha+0x38>
   118dc:	ldr	w0, [sp, #12]
   118e0:	cmp	w0, #0x40
   118e4:	b.le	118fc <grub_isalpha+0x40>
   118e8:	ldr	w0, [sp, #12]
   118ec:	cmp	w0, #0x5a
   118f0:	b.gt	118fc <grub_isalpha+0x40>
   118f4:	mov	w0, #0x1                   	// #1
   118f8:	b	11900 <grub_isalpha+0x44>
   118fc:	mov	w0, #0x0                   	// #0
   11900:	add	sp, sp, #0x10
   11904:	ret

0000000000011908 <grub_isdigit>:
   11908:	sub	sp, sp, #0x10
   1190c:	str	w0, [sp, #12]
   11910:	ldr	w0, [sp, #12]
   11914:	cmp	w0, #0x2f
   11918:	b.le	11930 <grub_isdigit+0x28>
   1191c:	ldr	w0, [sp, #12]
   11920:	cmp	w0, #0x39
   11924:	b.gt	11930 <grub_isdigit+0x28>
   11928:	mov	w0, #0x1                   	// #1
   1192c:	b	11934 <grub_isdigit+0x2c>
   11930:	mov	w0, #0x0                   	// #0
   11934:	add	sp, sp, #0x10
   11938:	ret

000000000001193c <grub_parser_cmdline_state>:
   1193c:	stp	x29, x30, [sp, #-64]!
   11940:	mov	x29, sp
   11944:	str	w0, [sp, #28]
   11948:	strb	w1, [sp, #27]
   1194c:	str	x2, [sp, #16]
   11950:	ldr	w0, [sp, #28]
   11954:	str	w0, [sp, #44]
   11958:	mov	w0, #0x1                   	// #1
   1195c:	str	w0, [sp, #52]
   11960:	adrp	x0, 0 <_start>
   11964:	add	x0, x0, #0x0
   11968:	ldr	x0, [x0]
   1196c:	str	x0, [sp, #56]
   11970:	b	11a00 <grub_parser_cmdline_state+0xc4>
   11974:	ldr	x0, [sp, #56]
   11978:	ldr	w0, [x0]
   1197c:	ldr	w1, [sp, #28]
   11980:	cmp	w1, w0
   11984:	b.ne	119f0 <grub_parser_cmdline_state+0xb4>  // b.any
   11988:	ldr	x0, [sp, #56]
   1198c:	ldrb	w0, [x0, #8]
   11990:	ldrb	w1, [sp, #27]
   11994:	cmp	w1, w0
   11998:	b.eq	11a14 <grub_parser_cmdline_state+0xd8>  // b.none
   1199c:	ldr	x0, [sp, #56]
   119a0:	ldrb	w0, [x0, #8]
   119a4:	bl	f9a0 <grub_isspace>
   119a8:	cmp	w0, #0x0
   119ac:	b.eq	119dc <grub_parser_cmdline_state+0xa0>  // b.none
   119b0:	ldrb	w0, [sp, #27]
   119b4:	bl	118bc <grub_isalpha>
   119b8:	cmp	w0, #0x0
   119bc:	b.ne	119dc <grub_parser_cmdline_state+0xa0>  // b.any
   119c0:	ldrb	w0, [sp, #27]
   119c4:	bl	11908 <grub_isdigit>
   119c8:	cmp	w0, #0x0
   119cc:	b.ne	119dc <grub_parser_cmdline_state+0xa0>  // b.any
   119d0:	ldrb	w0, [sp, #27]
   119d4:	cmp	w0, #0x5f
   119d8:	b.ne	11a1c <grub_parser_cmdline_state+0xe0>  // b.any
   119dc:	ldr	x0, [sp, #56]
   119e0:	ldrb	w0, [x0, #8]
   119e4:	cmp	w0, #0x0
   119e8:	b.eq	11a24 <grub_parser_cmdline_state+0xe8>  // b.none
   119ec:	b	119f4 <grub_parser_cmdline_state+0xb8>
   119f0:	nop
   119f4:	ldr	x0, [sp, #56]
   119f8:	add	x0, x0, #0x10
   119fc:	str	x0, [sp, #56]
   11a00:	ldr	x0, [sp, #56]
   11a04:	ldr	w0, [x0]
   11a08:	cmp	w0, #0x0
   11a0c:	b.ne	11974 <grub_parser_cmdline_state+0x38>  // b.any
   11a10:	b	11a28 <grub_parser_cmdline_state+0xec>
   11a14:	nop
   11a18:	b	11a28 <grub_parser_cmdline_state+0xec>
   11a1c:	nop
   11a20:	b	11a28 <grub_parser_cmdline_state+0xec>
   11a24:	nop
   11a28:	ldr	x0, [sp, #56]
   11a2c:	ldr	w0, [x0]
   11a30:	cmp	w0, #0x0
   11a34:	b.ne	11a40 <grub_parser_cmdline_state+0x104>  // b.any
   11a38:	add	x0, sp, #0x28
   11a3c:	str	x0, [sp, #56]
   11a40:	ldr	x0, [sp, #56]
   11a44:	ldr	w0, [x0, #12]
   11a48:	cmp	w0, #0x0
   11a4c:	b.eq	11a60 <grub_parser_cmdline_state+0x124>  // b.none
   11a50:	ldr	x0, [sp, #16]
   11a54:	ldrb	w1, [sp, #27]
   11a58:	strb	w1, [x0]
   11a5c:	b	11a68 <grub_parser_cmdline_state+0x12c>
   11a60:	ldr	x0, [sp, #16]
   11a64:	strb	wzr, [x0]
   11a68:	ldr	x0, [sp, #56]
   11a6c:	ldr	w0, [x0, #4]
   11a70:	ldp	x29, x30, [sp], #64
   11a74:	ret
	...

0000000000011a80 <check_varstate>:
   11a80:	sub	sp, sp, #0x10
   11a84:	str	w0, [sp, #12]
   11a88:	ldr	w0, [sp, #12]
   11a8c:	cmp	w0, #0x6
   11a90:	b.eq	11ab8 <check_varstate+0x38>  // b.none
   11a94:	ldr	w0, [sp, #12]
   11a98:	cmp	w0, #0x7
   11a9c:	b.eq	11ab8 <check_varstate+0x38>  // b.none
   11aa0:	ldr	w0, [sp, #12]
   11aa4:	cmp	w0, #0x9
   11aa8:	b.eq	11ab8 <check_varstate+0x38>  // b.none
   11aac:	ldr	w0, [sp, #12]
   11ab0:	cmp	w0, #0xa
   11ab4:	b.ne	11ac0 <check_varstate+0x40>  // b.any
   11ab8:	mov	w0, #0x1                   	// #1
   11abc:	b	11ac4 <check_varstate+0x44>
   11ac0:	mov	w0, #0x0                   	// #0
   11ac4:	add	sp, sp, #0x10
   11ac8:	ret

0000000000011acc <add_var>:
   11acc:	stp	x29, x30, [sp, #-64]!
   11ad0:	mov	x29, sp
   11ad4:	str	x0, [sp, #40]
   11ad8:	str	x1, [sp, #32]
   11adc:	str	x2, [sp, #24]
   11ae0:	str	w3, [sp, #20]
   11ae4:	str	w4, [sp, #16]
   11ae8:	ldr	w0, [sp, #20]
   11aec:	bl	11a80 <check_varstate>
   11af0:	cmp	w0, #0x0
   11af4:	b.eq	11b88 <add_var+0xbc>  // b.none
   11af8:	ldr	w0, [sp, #16]
   11afc:	bl	11a80 <check_varstate>
   11b00:	cmp	w0, #0x0
   11b04:	b.ne	11b88 <add_var+0xbc>  // b.any
   11b08:	ldr	x0, [sp, #24]
   11b0c:	ldr	x0, [x0]
   11b10:	add	x2, x0, #0x1
   11b14:	ldr	x1, [sp, #24]
   11b18:	str	x2, [x1]
   11b1c:	strb	wzr, [x0]
   11b20:	ldr	x0, [sp, #40]
   11b24:	bl	cb00 <grub_env_get>
   11b28:	str	x0, [sp, #56]
   11b2c:	ldr	x0, [sp, #24]
   11b30:	ldr	x1, [sp, #40]
   11b34:	str	x1, [x0]
   11b38:	ldr	x0, [sp, #56]
   11b3c:	cmp	x0, #0x0
   11b40:	b.eq	11b90 <add_var+0xc4>  // b.none
   11b44:	b	11b74 <add_var+0xa8>
   11b48:	ldr	x0, [sp, #32]
   11b4c:	ldr	x0, [x0]
   11b50:	add	x2, x0, #0x1
   11b54:	ldr	x1, [sp, #32]
   11b58:	str	x2, [x1]
   11b5c:	ldr	x1, [sp, #56]
   11b60:	ldrb	w1, [x1]
   11b64:	strb	w1, [x0]
   11b68:	ldr	x0, [sp, #56]
   11b6c:	add	x0, x0, #0x1
   11b70:	str	x0, [sp, #56]
   11b74:	ldr	x0, [sp, #56]
   11b78:	ldrb	w0, [x0]
   11b7c:	cmp	w0, #0x0
   11b80:	b.ne	11b48 <add_var+0x7c>  // b.any
   11b84:	b	11b94 <add_var+0xc8>
   11b88:	nop
   11b8c:	b	11b94 <add_var+0xc8>
   11b90:	nop
   11b94:	ldp	x29, x30, [sp], #64
   11b98:	ret

0000000000011b9c <grub_parser_split_cmdline>:
   11b9c:	sub	sp, sp, #0x540
   11ba0:	stp	x29, x30, [sp]
   11ba4:	mov	x29, sp
   11ba8:	str	x0, [sp, #56]
   11bac:	str	x1, [sp, #48]
   11bb0:	str	x2, [sp, #40]
   11bb4:	str	x3, [sp, #32]
   11bb8:	str	x4, [sp, #24]
   11bbc:	mov	w0, #0x1                   	// #1
   11bc0:	str	w0, [sp, #1340]
   11bc4:	add	x0, sp, #0x128
   11bc8:	str	x0, [sp, #288]
   11bcc:	ldr	x0, [sp, #56]
   11bd0:	str	x0, [sp, #280]
   11bd4:	add	x0, sp, #0x50
   11bd8:	str	x0, [sp, #72]
   11bdc:	ldr	x0, [sp, #32]
   11be0:	str	wzr, [x0]
   11be4:	ldr	x0, [sp, #280]
   11be8:	cmp	x0, #0x0
   11bec:	b.eq	11c00 <grub_parser_split_cmdline+0x64>  // b.none
   11bf0:	ldr	x0, [sp, #280]
   11bf4:	ldrb	w0, [x0]
   11bf8:	cmp	w0, #0x0
   11bfc:	b.ne	11c20 <grub_parser_split_cmdline+0x84>  // b.any
   11c00:	ldr	x0, [sp, #48]
   11c04:	cmp	x0, #0x0
   11c08:	b.eq	11d78 <grub_parser_split_cmdline+0x1dc>  // b.none
   11c0c:	add	x0, sp, #0x118
   11c10:	ldr	x3, [sp, #48]
   11c14:	ldr	x2, [sp, #40]
   11c18:	mov	w1, #0x1                   	// #1
   11c1c:	blr	x3
   11c20:	ldr	x0, [sp, #280]
   11c24:	cmp	x0, #0x0
   11c28:	b.eq	11d80 <grub_parser_split_cmdline+0x1e4>  // b.none
   11c2c:	b	11d48 <grub_parser_split_cmdline+0x1ac>
   11c30:	ldr	x0, [sp, #280]
   11c34:	ldrb	w1, [x0]
   11c38:	add	x0, sp, #0x47
   11c3c:	mov	x2, x0
   11c40:	ldr	w0, [sp, #1340]
   11c44:	bl	1193c <grub_parser_cmdline_state>
   11c48:	str	w0, [sp, #1332]
   11c4c:	add	x2, sp, #0x48
   11c50:	add	x1, sp, #0x120
   11c54:	add	x0, sp, #0x50
   11c58:	ldr	w4, [sp, #1332]
   11c5c:	ldr	w3, [sp, #1340]
   11c60:	bl	11acc <add_var>
   11c64:	ldr	w0, [sp, #1332]
   11c68:	bl	11a80 <check_varstate>
   11c6c:	cmp	w0, #0x0
   11c70:	b.eq	11c98 <grub_parser_split_cmdline+0xfc>  // b.none
   11c74:	ldrb	w0, [sp, #71]
   11c78:	cmp	w0, #0x0
   11c7c:	b.eq	11d34 <grub_parser_split_cmdline+0x198>  // b.none
   11c80:	ldr	x0, [sp, #72]
   11c84:	add	x1, x0, #0x1
   11c88:	str	x1, [sp, #72]
   11c8c:	ldrb	w1, [sp, #71]
   11c90:	strb	w1, [x0]
   11c94:	b	11d34 <grub_parser_split_cmdline+0x198>
   11c98:	ldr	w0, [sp, #1332]
   11c9c:	cmp	w0, #0x1
   11ca0:	b.ne	11d0c <grub_parser_split_cmdline+0x170>  // b.any
   11ca4:	ldr	w0, [sp, #1340]
   11ca8:	cmp	w0, #0x2
   11cac:	b.eq	11d0c <grub_parser_split_cmdline+0x170>  // b.none
   11cb0:	ldrb	w0, [sp, #71]
   11cb4:	bl	f9a0 <grub_isspace>
   11cb8:	cmp	w0, #0x0
   11cbc:	b.eq	11d0c <grub_parser_split_cmdline+0x170>  // b.none
   11cc0:	ldr	x1, [sp, #288]
   11cc4:	add	x0, sp, #0x128
   11cc8:	cmp	x1, x0
   11ccc:	b.eq	11d30 <grub_parser_split_cmdline+0x194>  // b.none
   11cd0:	ldr	x0, [sp, #288]
   11cd4:	sub	x0, x0, #0x1
   11cd8:	ldrb	w0, [x0]
   11cdc:	cmp	w0, #0x0
   11ce0:	b.eq	11d30 <grub_parser_split_cmdline+0x194>  // b.none
   11ce4:	ldr	x0, [sp, #288]
   11ce8:	add	x1, x0, #0x1
   11cec:	str	x1, [sp, #288]
   11cf0:	strb	wzr, [x0]
   11cf4:	ldr	x0, [sp, #32]
   11cf8:	ldr	w0, [x0]
   11cfc:	add	w1, w0, #0x1
   11d00:	ldr	x0, [sp, #32]
   11d04:	str	w1, [x0]
   11d08:	b	11d30 <grub_parser_split_cmdline+0x194>
   11d0c:	ldrb	w0, [sp, #71]
   11d10:	cmp	w0, #0x0
   11d14:	b.eq	11d34 <grub_parser_split_cmdline+0x198>  // b.none
   11d18:	ldr	x0, [sp, #288]
   11d1c:	add	x1, x0, #0x1
   11d20:	str	x1, [sp, #288]
   11d24:	ldrb	w1, [sp, #71]
   11d28:	strb	w1, [x0]
   11d2c:	b	11d34 <grub_parser_split_cmdline+0x198>
   11d30:	nop
   11d34:	ldr	w0, [sp, #1332]
   11d38:	str	w0, [sp, #1340]
   11d3c:	ldr	x0, [sp, #280]
   11d40:	add	x0, x0, #0x1
   11d44:	str	x0, [sp, #280]
   11d48:	ldr	x0, [sp, #280]
   11d4c:	ldrb	w0, [x0]
   11d50:	cmp	w0, #0x0
   11d54:	b.ne	11c30 <grub_parser_split_cmdline+0x94>  // b.any
   11d58:	ldr	w0, [sp, #1340]
   11d5c:	cmp	w0, #0x1
   11d60:	b.eq	11d84 <grub_parser_split_cmdline+0x1e8>  // b.none
   11d64:	ldr	w0, [sp, #1340]
   11d68:	bl	11a80 <check_varstate>
   11d6c:	cmp	w0, #0x0
   11d70:	b.eq	11be4 <grub_parser_split_cmdline+0x48>  // b.none
   11d74:	b	11d84 <grub_parser_split_cmdline+0x1e8>
   11d78:	nop
   11d7c:	b	11d84 <grub_parser_split_cmdline+0x1e8>
   11d80:	nop
   11d84:	add	x2, sp, #0x48
   11d88:	add	x1, sp, #0x120
   11d8c:	add	x0, sp, #0x50
   11d90:	mov	w4, #0x1                   	// #1
   11d94:	ldr	w3, [sp, #1340]
   11d98:	bl	11acc <add_var>
   11d9c:	ldr	x1, [sp, #288]
   11da0:	add	x0, sp, #0x128
   11da4:	cmp	x1, x0
   11da8:	b.eq	11de4 <grub_parser_split_cmdline+0x248>  // b.none
   11dac:	ldr	x0, [sp, #288]
   11db0:	sub	x0, x0, #0x1
   11db4:	ldrb	w0, [x0]
   11db8:	cmp	w0, #0x0
   11dbc:	b.eq	11de4 <grub_parser_split_cmdline+0x248>  // b.none
   11dc0:	ldr	x0, [sp, #288]
   11dc4:	add	x1, x0, #0x1
   11dc8:	str	x1, [sp, #288]
   11dcc:	strb	wzr, [x0]
   11dd0:	ldr	x0, [sp, #32]
   11dd4:	ldr	w0, [x0]
   11dd8:	add	w1, w0, #0x1
   11ddc:	ldr	x0, [sp, #32]
   11de0:	str	w1, [x0]
   11de4:	ldr	x1, [sp, #288]
   11de8:	add	x0, sp, #0x128
   11dec:	sub	x0, x1, x0
   11df0:	bl	8348 <grub_malloc>
   11df4:	str	x0, [sp, #1320]
   11df8:	ldr	x0, [sp, #1320]
   11dfc:	cmp	x0, #0x0
   11e00:	b.ne	11e18 <grub_parser_split_cmdline+0x27c>  // b.any
   11e04:	adrp	x0, 0 <_start>
   11e08:	add	x0, x0, #0x0
   11e0c:	ldr	x0, [x0]
   11e10:	ldr	w0, [x0]
   11e14:	b	11f08 <grub_parser_split_cmdline+0x36c>
   11e18:	ldr	x1, [sp, #288]
   11e1c:	add	x0, sp, #0x128
   11e20:	sub	x0, x1, x0
   11e24:	mov	x1, x0
   11e28:	add	x0, sp, #0x128
   11e2c:	mov	x2, x1
   11e30:	mov	x1, x0
   11e34:	ldr	x0, [sp, #1320]
   11e38:	bl	11890 <grub_memcpy>
   11e3c:	ldr	x0, [sp, #32]
   11e40:	ldr	w0, [x0]
   11e44:	add	w0, w0, #0x1
   11e48:	sxtw	x0, w0
   11e4c:	lsl	x0, x0, #3
   11e50:	bl	8348 <grub_malloc>
   11e54:	mov	x1, x0
   11e58:	ldr	x0, [sp, #24]
   11e5c:	str	x1, [x0]
   11e60:	ldr	x0, [sp, #24]
   11e64:	ldr	x0, [x0]
   11e68:	cmp	x0, #0x0
   11e6c:	b.ne	11e8c <grub_parser_split_cmdline+0x2f0>  // b.any
   11e70:	ldr	x0, [sp, #1320]
   11e74:	bl	83ac <grub_free>
   11e78:	adrp	x0, 0 <_start>
   11e7c:	add	x0, x0, #0x0
   11e80:	ldr	x0, [x0]
   11e84:	ldr	w0, [x0]
   11e88:	b	11f08 <grub_parser_split_cmdline+0x36c>
   11e8c:	ldr	x0, [sp, #1320]
   11e90:	str	x0, [sp, #288]
   11e94:	str	wzr, [sp, #1336]
   11e98:	b	11ef0 <grub_parser_split_cmdline+0x354>
   11e9c:	ldr	x0, [sp, #24]
   11ea0:	ldr	x1, [x0]
   11ea4:	ldrsw	x0, [sp, #1336]
   11ea8:	lsl	x0, x0, #3
   11eac:	add	x0, x1, x0
   11eb0:	ldr	x1, [sp, #288]
   11eb4:	str	x1, [x0]
   11eb8:	b	11ec8 <grub_parser_split_cmdline+0x32c>
   11ebc:	ldr	x0, [sp, #288]
   11ec0:	add	x0, x0, #0x1
   11ec4:	str	x0, [sp, #288]
   11ec8:	ldr	x0, [sp, #288]
   11ecc:	ldrb	w0, [x0]
   11ed0:	cmp	w0, #0x0
   11ed4:	b.ne	11ebc <grub_parser_split_cmdline+0x320>  // b.any
   11ed8:	ldr	x0, [sp, #288]
   11edc:	add	x0, x0, #0x1
   11ee0:	str	x0, [sp, #288]
   11ee4:	ldr	w0, [sp, #1336]
   11ee8:	add	w0, w0, #0x1
   11eec:	str	w0, [sp, #1336]
   11ef0:	ldr	x0, [sp, #32]
   11ef4:	ldr	w0, [x0]
   11ef8:	ldr	w1, [sp, #1336]
   11efc:	cmp	w1, w0
   11f00:	b.lt	11e9c <grub_parser_split_cmdline+0x300>  // b.tstop
   11f04:	mov	w0, #0x0                   	// #0
   11f08:	ldp	x29, x30, [sp]
   11f0c:	add	sp, sp, #0x540
   11f10:	ret
   11f14:	nop
	...

0000000000011f20 <grub_parser_execute_getline>:
   11f20:	stp	x29, x30, [sp, #-64]!
   11f24:	mov	x29, sp
   11f28:	str	x0, [sp, #40]
   11f2c:	str	w1, [sp, #36]
   11f30:	str	x2, [sp, #24]
   11f34:	ldr	x0, [sp, #24]
   11f38:	str	x0, [sp, #56]
   11f3c:	ldr	x0, [sp, #56]
   11f40:	ldr	x0, [x0]
   11f44:	cmp	x0, #0x0
   11f48:	b.ne	11f5c <grub_parser_execute_getline+0x3c>  // b.any
   11f4c:	ldr	x0, [sp, #40]
   11f50:	str	xzr, [x0]
   11f54:	mov	w0, #0x0                   	// #0
   11f58:	b	11ff0 <grub_parser_execute_getline+0xd0>
   11f5c:	ldr	x0, [sp, #56]
   11f60:	ldr	x0, [x0]
   11f64:	mov	w1, #0xa                   	// #10
   11f68:	bl	f79c <grub_strchr>
   11f6c:	str	x0, [sp, #48]
   11f70:	ldr	x0, [sp, #48]
   11f74:	cmp	x0, #0x0
   11f78:	b.eq	11fb0 <grub_parser_execute_getline+0x90>  // b.none
   11f7c:	ldr	x0, [sp, #56]
   11f80:	ldr	x2, [x0]
   11f84:	ldr	x0, [sp, #56]
   11f88:	ldr	x0, [x0]
   11f8c:	ldr	x1, [sp, #48]
   11f90:	sub	x0, x1, x0
   11f94:	mov	x1, x0
   11f98:	mov	x0, x2
   11f9c:	bl	fc94 <grub_strndup>
   11fa0:	mov	x1, x0
   11fa4:	ldr	x0, [sp, #40]
   11fa8:	str	x1, [x0]
   11fac:	b	11fc8 <grub_parser_execute_getline+0xa8>
   11fb0:	ldr	x0, [sp, #56]
   11fb4:	ldr	x0, [x0]
   11fb8:	bl	fc40 <grub_strdup>
   11fbc:	mov	x1, x0
   11fc0:	ldr	x0, [sp, #40]
   11fc4:	str	x1, [x0]
   11fc8:	ldr	x0, [sp, #48]
   11fcc:	cmp	x0, #0x0
   11fd0:	b.eq	11fe0 <grub_parser_execute_getline+0xc0>  // b.none
   11fd4:	ldr	x0, [sp, #48]
   11fd8:	add	x0, x0, #0x1
   11fdc:	b	11fe4 <grub_parser_execute_getline+0xc4>
   11fe0:	mov	x0, #0x0                   	// #0
   11fe4:	ldr	x1, [sp, #56]
   11fe8:	str	x0, [x1]
   11fec:	mov	w0, #0x0                   	// #0
   11ff0:	ldp	x29, x30, [sp], #64
   11ff4:	ret

0000000000011ff8 <grub_parser_execute>:
   11ff8:	stp	x29, x30, [sp, #-48]!
   11ffc:	mov	x29, sp
   12000:	str	x0, [sp, #24]
   12004:	b	12048 <grub_parser_execute+0x50>
   12008:	add	x1, sp, #0x18
   1200c:	add	x0, sp, #0x28
   12010:	mov	x2, x1
   12014:	mov	w1, #0x0                   	// #0
   12018:	bl	11f20 <grub_parser_execute_getline>
   1201c:	ldr	x3, [sp, #40]
   12020:	add	x0, sp, #0x18
   12024:	mov	x2, x0
   12028:	adrp	x0, 0 <_start>
   1202c:	add	x0, x0, #0x0
   12030:	ldr	x1, [x0]
   12034:	mov	x0, x3
   12038:	bl	129d8 <grub_rescue_parse_line>
   1203c:	ldr	x0, [sp, #40]
   12040:	bl	83ac <grub_free>
   12044:	bl	d190 <grub_print_error>
   12048:	ldr	x0, [sp, #24]
   1204c:	cmp	x0, #0x0
   12050:	b.ne	12008 <grub_parser_execute+0x10>  // b.any
   12054:	adrp	x0, 0 <_start>
   12058:	add	x0, x0, #0x0
   1205c:	ldr	x0, [x0]
   12060:	ldr	w0, [x0]
   12064:	ldp	x29, x30, [sp], #48
   12068:	ret
   1206c:	nop
	...

0000000000012080 <grub_memcpy>:
   12080:	stp	x29, x30, [sp, #-48]!
   12084:	mov	x29, sp
   12088:	str	x0, [sp, #40]
   1208c:	str	x1, [sp, #32]
   12090:	str	x2, [sp, #24]
   12094:	ldr	x2, [sp, #24]
   12098:	ldr	x1, [sp, #32]
   1209c:	ldr	x0, [sp, #40]
   120a0:	bl	f08c <grub_memmove>
   120a4:	ldp	x29, x30, [sp], #48
   120a8:	ret

00000000000120ac <grub_isalpha>:
   120ac:	sub	sp, sp, #0x10
   120b0:	str	w0, [sp, #12]
   120b4:	ldr	w0, [sp, #12]
   120b8:	cmp	w0, #0x60
   120bc:	b.le	120cc <grub_isalpha+0x20>
   120c0:	ldr	w0, [sp, #12]
   120c4:	cmp	w0, #0x7a
   120c8:	b.le	120e4 <grub_isalpha+0x38>
   120cc:	ldr	w0, [sp, #12]
   120d0:	cmp	w0, #0x40
   120d4:	b.le	120ec <grub_isalpha+0x40>
   120d8:	ldr	w0, [sp, #12]
   120dc:	cmp	w0, #0x5a
   120e0:	b.gt	120ec <grub_isalpha+0x40>
   120e4:	mov	w0, #0x1                   	// #1
   120e8:	b	120f0 <grub_isalpha+0x44>
   120ec:	mov	w0, #0x0                   	// #0
   120f0:	add	sp, sp, #0x10
   120f4:	ret

00000000000120f8 <grub_partition_check_containment>:
   120f8:	stp	x29, x30, [sp, #-48]!
   120fc:	mov	x29, sp
   12100:	str	x0, [sp, #24]
   12104:	str	x1, [sp, #16]
   12108:	ldr	x0, [sp, #24]
   1210c:	ldr	x0, [x0, #40]
   12110:	cmp	x0, #0x0
   12114:	b.ne	12120 <grub_partition_check_containment+0x28>  // b.any
   12118:	mov	w0, #0x1                   	// #1
   1211c:	b	121c8 <grub_partition_check_containment+0xd0>
   12120:	ldr	x0, [sp, #16]
   12124:	ldr	x1, [x0, #8]
   12128:	ldr	x0, [sp, #16]
   1212c:	ldr	x0, [x0, #16]
   12130:	add	x1, x1, x0
   12134:	ldr	x0, [sp, #24]
   12138:	ldr	x0, [x0, #40]
   1213c:	ldr	x0, [x0, #16]
   12140:	cmp	x1, x0
   12144:	b.ls	121c4 <grub_partition_check_containment+0xcc>  // b.plast
   12148:	ldr	x0, [sp, #24]
   1214c:	ldr	x0, [x0, #40]
   12150:	bl	127c0 <grub_partition_get_name>
   12154:	str	x0, [sp, #40]
   12158:	ldr	x0, [sp, #16]
   1215c:	ldr	x0, [x0, #48]
   12160:	ldr	x1, [x0, #16]
   12164:	ldr	x0, [sp, #16]
   12168:	ldr	w0, [x0]
   1216c:	add	w2, w0, #0x1
   12170:	ldr	x0, [sp, #24]
   12174:	ldr	x0, [x0]
   12178:	ldr	x7, [sp, #40]
   1217c:	mov	x6, x0
   12180:	mov	w5, w2
   12184:	mov	x4, x1
   12188:	adrp	x0, 0 <_start>
   1218c:	add	x0, x0, #0x0
   12190:	ldr	x3, [x0]
   12194:	adrp	x0, 0 <_start>
   12198:	add	x0, x0, #0x0
   1219c:	ldr	x2, [x0]
   121a0:	mov	w1, #0x30                  	// #48
   121a4:	adrp	x0, 0 <_start>
   121a8:	add	x0, x0, #0x0
   121ac:	ldr	x0, [x0]
   121b0:	bl	f328 <grub_real_dprintf>
   121b4:	ldr	x0, [sp, #40]
   121b8:	bl	83ac <grub_free>
   121bc:	mov	w0, #0x0                   	// #0
   121c0:	b	121c8 <grub_partition_check_containment+0xd0>
   121c4:	mov	w0, #0x1                   	// #1
   121c8:	ldp	x29, x30, [sp], #48
   121cc:	ret
	...

00000000000121e8 <probe_iter>:
   121e8:	stp	x29, x30, [sp, #-64]!
   121ec:	mov	x29, sp
   121f0:	str	x0, [sp, #40]
   121f4:	str	x1, [sp, #32]
   121f8:	str	x2, [sp, #24]
   121fc:	ldr	x0, [sp, #24]
   12200:	str	x0, [sp, #56]
   12204:	ldr	x0, [sp, #56]
   12208:	ldr	w1, [x0]
   1220c:	ldr	x0, [sp, #32]
   12210:	ldr	w0, [x0]
   12214:	cmp	w1, w0
   12218:	b.eq	12224 <probe_iter+0x3c>  // b.none
   1221c:	mov	w0, #0x0                   	// #0
   12220:	b	12284 <probe_iter+0x9c>
   12224:	ldr	x1, [sp, #32]
   12228:	ldr	x0, [sp, #40]
   1222c:	bl	120f8 <grub_partition_check_containment>
   12230:	cmp	w0, #0x0
   12234:	b.ne	12240 <probe_iter+0x58>  // b.any
   12238:	mov	w0, #0x0                   	// #0
   1223c:	b	12284 <probe_iter+0x9c>
   12240:	mov	x0, #0x40                  	// #64
   12244:	bl	8348 <grub_malloc>
   12248:	mov	x1, x0
   1224c:	ldr	x0, [sp, #56]
   12250:	str	x1, [x0, #8]
   12254:	ldr	x0, [sp, #56]
   12258:	ldr	x0, [x0, #8]
   1225c:	cmp	x0, #0x0
   12260:	b.ne	1226c <probe_iter+0x84>  // b.any
   12264:	mov	w0, #0x1                   	// #1
   12268:	b	12284 <probe_iter+0x9c>
   1226c:	ldr	x0, [sp, #56]
   12270:	ldr	x0, [x0, #8]
   12274:	mov	x2, #0x40                  	// #64
   12278:	ldr	x1, [sp, #32]
   1227c:	bl	12080 <grub_memcpy>
   12280:	mov	w0, #0x1                   	// #1
   12284:	ldp	x29, x30, [sp], #64
   12288:	ret

000000000001228c <grub_partition_map_probe>:
   1228c:	stp	x29, x30, [sp, #-64]!
   12290:	mov	x29, sp
   12294:	str	x0, [sp, #40]
   12298:	str	x1, [sp, #32]
   1229c:	str	w2, [sp, #28]
   122a0:	ldr	w0, [sp, #28]
   122a4:	str	w0, [sp, #48]
   122a8:	str	xzr, [sp, #56]
   122ac:	ldr	x0, [sp, #40]
   122b0:	ldr	x3, [x0, #24]
   122b4:	add	x0, sp, #0x30
   122b8:	mov	x2, x0
   122bc:	adrp	x0, 0 <_start>
   122c0:	add	x0, x0, #0x0
   122c4:	ldr	x1, [x0]
   122c8:	ldr	x0, [sp, #32]
   122cc:	blr	x3
   122d0:	adrp	x0, 0 <_start>
   122d4:	add	x0, x0, #0x0
   122d8:	ldr	x0, [x0]
   122dc:	ldr	w0, [x0]
   122e0:	cmp	w0, #0x0
   122e4:	b.ne	122f0 <grub_partition_map_probe+0x64>  // b.any
   122e8:	ldr	x0, [sp, #56]
   122ec:	b	12300 <grub_partition_map_probe+0x74>
   122f0:	nop
   122f4:	ldr	x0, [sp, #56]
   122f8:	bl	83ac <grub_free>
   122fc:	mov	x0, #0x0                   	// #0
   12300:	ldp	x29, x30, [sp], #64
   12304:	ret
	...

0000000000012318 <grub_partition_probe>:
   12318:	stp	x29, x30, [sp, #-96]!
   1231c:	mov	x29, sp
   12320:	str	x0, [sp, #24]
   12324:	str	x1, [sp, #16]
   12328:	str	xzr, [sp, #88]
   1232c:	str	xzr, [sp, #80]
   12330:	ldr	x0, [sp, #24]
   12334:	ldr	x0, [x0, #40]
   12338:	str	x0, [sp, #64]
   1233c:	ldr	x0, [sp, #64]
   12340:	str	x0, [sp, #88]
   12344:	ldr	x0, [sp, #16]
   12348:	str	x0, [sp, #32]
   1234c:	b	12534 <grub_partition_probe+0x21c>
   12350:	ldr	x0, [sp, #32]
   12354:	str	x0, [sp, #56]
   12358:	b	12368 <grub_partition_probe+0x50>
   1235c:	ldr	x0, [sp, #32]
   12360:	add	x0, x0, #0x1
   12364:	str	x0, [sp, #32]
   12368:	ldr	x0, [sp, #32]
   1236c:	ldrb	w0, [x0]
   12370:	cmp	w0, #0x0
   12374:	b.eq	1238c <grub_partition_probe+0x74>  // b.none
   12378:	ldr	x0, [sp, #32]
   1237c:	ldrb	w0, [x0]
   12380:	bl	120ac <grub_isalpha>
   12384:	cmp	w0, #0x0
   12388:	b.ne	1235c <grub_partition_probe+0x44>  // b.any
   1238c:	ldr	x0, [sp, #32]
   12390:	str	x0, [sp, #48]
   12394:	ldr	x0, [sp, #32]
   12398:	add	x1, sp, #0x20
   1239c:	mov	w2, #0x0                   	// #0
   123a0:	bl	f9ec <grub_strtoul>
   123a4:	sub	w0, w0, #0x1
   123a8:	str	w0, [sp, #44]
   123ac:	str	xzr, [sp, #80]
   123b0:	adrp	x0, 0 <_start>
   123b4:	add	x0, x0, #0x0
   123b8:	ldr	x0, [x0]
   123bc:	ldr	x0, [x0]
   123c0:	str	x0, [sp, #72]
   123c4:	b	1249c <grub_partition_probe+0x184>
   123c8:	ldr	x1, [sp, #48]
   123cc:	ldr	x0, [sp, #56]
   123d0:	cmp	x1, x0
   123d4:	b.eq	12428 <grub_partition_probe+0x110>  // b.none
   123d8:	ldr	x0, [sp, #72]
   123dc:	ldr	x3, [x0, #16]
   123e0:	ldr	x1, [sp, #48]
   123e4:	ldr	x0, [sp, #56]
   123e8:	sub	x0, x1, x0
   123ec:	mov	x2, x0
   123f0:	ldr	x1, [sp, #56]
   123f4:	mov	x0, x3
   123f8:	bl	f6e8 <grub_strncmp>
   123fc:	cmp	w0, #0x0
   12400:	b.ne	1248c <grub_partition_probe+0x174>  // b.any
   12404:	ldr	x0, [sp, #72]
   12408:	ldr	x0, [x0, #16]
   1240c:	ldr	x2, [sp, #48]
   12410:	ldr	x1, [sp, #56]
   12414:	sub	x1, x2, x1
   12418:	add	x0, x0, x1
   1241c:	ldrb	w0, [x0]
   12420:	cmp	w0, #0x0
   12424:	b.ne	1248c <grub_partition_probe+0x174>  // b.any
   12428:	ldr	x0, [sp, #24]
   1242c:	ldr	x1, [sp, #88]
   12430:	str	x1, [x0, #40]
   12434:	ldr	w2, [sp, #44]
   12438:	ldr	x1, [sp, #24]
   1243c:	ldr	x0, [sp, #72]
   12440:	bl	1228c <grub_partition_map_probe>
   12444:	str	x0, [sp, #80]
   12448:	ldr	x0, [sp, #24]
   1244c:	ldr	x1, [sp, #64]
   12450:	str	x1, [x0, #40]
   12454:	ldr	x0, [sp, #80]
   12458:	cmp	x0, #0x0
   1245c:	b.ne	124ac <grub_partition_probe+0x194>  // b.any
   12460:	adrp	x0, 0 <_start>
   12464:	add	x0, x0, #0x0
   12468:	ldr	x0, [x0]
   1246c:	ldr	w0, [x0]
   12470:	cmp	w0, #0x13
   12474:	b.ne	124b4 <grub_partition_probe+0x19c>  // b.any
   12478:	adrp	x0, 0 <_start>
   1247c:	add	x0, x0, #0x0
   12480:	ldr	x0, [x0]
   12484:	str	wzr, [x0]
   12488:	b	12490 <grub_partition_probe+0x178>
   1248c:	nop
   12490:	ldr	x0, [sp, #72]
   12494:	ldr	x0, [x0]
   12498:	str	x0, [sp, #72]
   1249c:	ldr	x0, [sp, #72]
   124a0:	cmp	x0, #0x0
   124a4:	b.ne	123c8 <grub_partition_probe+0xb0>  // b.any
   124a8:	b	124b8 <grub_partition_probe+0x1a0>
   124ac:	nop
   124b0:	b	124b8 <grub_partition_probe+0x1a0>
   124b4:	nop
   124b8:	ldr	x0, [sp, #80]
   124bc:	cmp	x0, #0x0
   124c0:	b.ne	124f8 <grub_partition_probe+0x1e0>  // b.any
   124c4:	b	124e4 <grub_partition_probe+0x1cc>
   124c8:	ldr	x0, [sp, #88]
   124cc:	ldr	x0, [x0, #40]
   124d0:	str	x0, [sp, #80]
   124d4:	ldr	x0, [sp, #88]
   124d8:	bl	83ac <grub_free>
   124dc:	ldr	x0, [sp, #80]
   124e0:	str	x0, [sp, #88]
   124e4:	ldr	x0, [sp, #88]
   124e8:	cmp	x0, #0x0
   124ec:	b.ne	124c8 <grub_partition_probe+0x1b0>  // b.any
   124f0:	mov	x0, #0x0                   	// #0
   124f4:	b	12548 <grub_partition_probe+0x230>
   124f8:	ldr	x0, [sp, #80]
   124fc:	ldr	x1, [sp, #88]
   12500:	str	x1, [x0, #40]
   12504:	ldr	x0, [sp, #80]
   12508:	str	x0, [sp, #88]
   1250c:	ldr	x0, [sp, #32]
   12510:	cmp	x0, #0x0
   12514:	b.eq	12544 <grub_partition_probe+0x22c>  // b.none
   12518:	ldr	x0, [sp, #32]
   1251c:	ldrb	w0, [x0]
   12520:	cmp	w0, #0x2c
   12524:	b.ne	12544 <grub_partition_probe+0x22c>  // b.any
   12528:	ldr	x0, [sp, #32]
   1252c:	add	x0, x0, #0x1
   12530:	str	x0, [sp, #32]
   12534:	ldr	x0, [sp, #32]
   12538:	ldrb	w0, [x0]
   1253c:	cmp	w0, #0x0
   12540:	b.ne	12350 <grub_partition_probe+0x38>  // b.any
   12544:	ldr	x0, [sp, #88]
   12548:	ldp	x29, x30, [sp], #96
   1254c:	ret
	...

0000000000012560 <part_iterate>:
   12560:	stp	x29, x30, [sp, #-144]!
   12564:	mov	x29, sp
   12568:	str	x0, [sp, #40]
   1256c:	str	x1, [sp, #32]
   12570:	str	x2, [sp, #24]
   12574:	ldr	x0, [sp, #24]
   12578:	str	x0, [sp, #128]
   1257c:	ldr	x1, [sp, #32]
   12580:	add	x0, sp, #0x38
   12584:	ldp	x2, x3, [x1]
   12588:	stp	x2, x3, [x0]
   1258c:	ldp	x2, x3, [x1, #16]
   12590:	stp	x2, x3, [x0, #16]
   12594:	ldp	x2, x3, [x1, #32]
   12598:	stp	x2, x3, [x0, #32]
   1259c:	ldp	x2, x3, [x1, #48]
   125a0:	stp	x2, x3, [x0, #48]
   125a4:	ldr	x1, [sp, #32]
   125a8:	ldr	x0, [sp, #40]
   125ac:	bl	120f8 <grub_partition_check_containment>
   125b0:	cmp	w0, #0x0
   125b4:	b.ne	125c0 <part_iterate+0x60>  // b.any
   125b8:	mov	w0, #0x0                   	// #0
   125bc:	b	126c8 <part_iterate+0x168>
   125c0:	ldr	x0, [sp, #40]
   125c4:	ldr	x0, [x0, #40]
   125c8:	str	x0, [sp, #96]
   125cc:	ldr	x0, [sp, #40]
   125d0:	str	xzr, [x0, #40]
   125d4:	ldr	x0, [sp, #128]
   125d8:	ldr	x3, [x0, #8]
   125dc:	ldr	x0, [sp, #128]
   125e0:	ldr	x1, [x0, #16]
   125e4:	add	x0, sp, #0x38
   125e8:	mov	x2, x1
   125ec:	mov	x1, x0
   125f0:	ldr	x0, [sp, #40]
   125f4:	blr	x3
   125f8:	cmp	w0, #0x0
   125fc:	b.eq	12614 <part_iterate+0xb4>  // b.none
   12600:	ldr	x0, [sp, #128]
   12604:	mov	w1, #0x1                   	// #1
   12608:	str	w1, [x0]
   1260c:	mov	w0, #0x1                   	// #1
   12610:	b	126c8 <part_iterate+0x168>
   12614:	ldr	x0, [sp, #64]
   12618:	cmp	x0, #0x0
   1261c:	b.eq	126b4 <part_iterate+0x154>  // b.none
   12620:	ldr	x0, [sp, #40]
   12624:	add	x1, sp, #0x38
   12628:	str	x1, [x0, #40]
   1262c:	adrp	x0, 0 <_start>
   12630:	add	x0, x0, #0x0
   12634:	ldr	x0, [x0]
   12638:	ldr	x0, [x0]
   1263c:	str	x0, [sp, #136]
   12640:	b	126a0 <part_iterate+0x140>
   12644:	ldr	x0, [sp, #136]
   12648:	ldr	x3, [x0, #24]
   1264c:	ldr	x2, [sp, #128]
   12650:	adrp	x0, 0 <_start>
   12654:	add	x0, x0, #0x0
   12658:	ldr	x1, [x0]
   1265c:	ldr	x0, [sp, #40]
   12660:	blr	x3
   12664:	str	w0, [sp, #124]
   12668:	ldr	w0, [sp, #124]
   1266c:	cmp	w0, #0x0
   12670:	b.eq	12684 <part_iterate+0x124>  // b.none
   12674:	adrp	x0, 0 <_start>
   12678:	add	x0, x0, #0x0
   1267c:	ldr	x0, [x0]
   12680:	str	wzr, [x0]
   12684:	ldr	x0, [sp, #128]
   12688:	ldr	w0, [x0]
   1268c:	cmp	w0, #0x0
   12690:	b.ne	126b0 <part_iterate+0x150>  // b.any
   12694:	ldr	x0, [sp, #136]
   12698:	ldr	x0, [x0]
   1269c:	str	x0, [sp, #136]
   126a0:	ldr	x0, [sp, #136]
   126a4:	cmp	x0, #0x0
   126a8:	b.ne	12644 <part_iterate+0xe4>  // b.any
   126ac:	b	126b4 <part_iterate+0x154>
   126b0:	nop
   126b4:	ldr	x1, [sp, #96]
   126b8:	ldr	x0, [sp, #40]
   126bc:	str	x1, [x0, #40]
   126c0:	ldr	x0, [sp, #128]
   126c4:	ldr	w0, [x0]
   126c8:	ldp	x29, x30, [sp], #144
   126cc:	ret
	...

00000000000126e8 <grub_partition_iterate>:
   126e8:	stp	x29, x30, [sp, #-96]!
   126ec:	mov	x29, sp
   126f0:	str	x0, [sp, #40]
   126f4:	str	x1, [sp, #32]
   126f8:	str	x2, [sp, #24]
   126fc:	str	wzr, [sp, #56]
   12700:	ldr	x0, [sp, #32]
   12704:	str	x0, [sp, #64]
   12708:	ldr	x0, [sp, #24]
   1270c:	str	x0, [sp, #72]
   12710:	adrp	x0, 0 <_start>
   12714:	add	x0, x0, #0x0
   12718:	ldr	x0, [x0]
   1271c:	ldr	x0, [x0]
   12720:	str	x0, [sp, #88]
   12724:	b	12784 <grub_partition_iterate+0x9c>
   12728:	ldr	x0, [sp, #88]
   1272c:	ldr	x3, [x0, #24]
   12730:	add	x0, sp, #0x38
   12734:	mov	x2, x0
   12738:	adrp	x0, 0 <_start>
   1273c:	add	x0, x0, #0x0
   12740:	ldr	x1, [x0]
   12744:	ldr	x0, [sp, #40]
   12748:	blr	x3
   1274c:	str	w0, [sp, #84]
   12750:	ldr	w0, [sp, #84]
   12754:	cmp	w0, #0x0
   12758:	b.eq	1276c <grub_partition_iterate+0x84>  // b.none
   1275c:	adrp	x0, 0 <_start>
   12760:	add	x0, x0, #0x0
   12764:	ldr	x0, [x0]
   12768:	str	wzr, [x0]
   1276c:	ldr	w0, [sp, #56]
   12770:	cmp	w0, #0x0
   12774:	b.ne	12794 <grub_partition_iterate+0xac>  // b.any
   12778:	ldr	x0, [sp, #88]
   1277c:	ldr	x0, [x0]
   12780:	str	x0, [sp, #88]
   12784:	ldr	x0, [sp, #88]
   12788:	cmp	x0, #0x0
   1278c:	b.ne	12728 <grub_partition_iterate+0x40>  // b.any
   12790:	b	12798 <grub_partition_iterate+0xb0>
   12794:	nop
   12798:	ldr	w0, [sp, #56]
   1279c:	ldp	x29, x30, [sp], #96
   127a0:	ret
   127a4:	nop
	...

00000000000127c0 <grub_partition_get_name>:
   127c0:	stp	x29, x30, [sp, #-112]!
   127c4:	mov	x29, sp
   127c8:	str	x0, [sp, #24]
   127cc:	str	xzr, [sp, #80]
   127d0:	str	xzr, [sp, #96]
   127d4:	ldr	x0, [sp, #24]
   127d8:	cmp	x0, #0x0
   127dc:	b.ne	127f4 <grub_partition_get_name+0x34>  // b.any
   127e0:	adrp	x0, 0 <_start>
   127e4:	add	x0, x0, #0x0
   127e8:	ldr	x0, [x0]
   127ec:	bl	fc40 <grub_strdup>
   127f0:	b	12984 <grub_partition_get_name+0x1c4>
   127f4:	ldr	x0, [sp, #24]
   127f8:	str	x0, [sp, #88]
   127fc:	b	1282c <grub_partition_get_name+0x6c>
   12800:	ldr	x0, [sp, #88]
   12804:	ldr	x0, [x0, #48]
   12808:	ldr	x0, [x0, #16]
   1280c:	bl	fe3c <grub_strlen>
   12810:	add	x0, x0, #0x1c
   12814:	ldr	x1, [sp, #96]
   12818:	add	x0, x1, x0
   1281c:	str	x0, [sp, #96]
   12820:	ldr	x0, [sp, #88]
   12824:	ldr	x0, [x0, #40]
   12828:	str	x0, [sp, #88]
   1282c:	ldr	x0, [sp, #88]
   12830:	cmp	x0, #0x0
   12834:	b.ne	12800 <grub_partition_get_name+0x40>  // b.any
   12838:	ldr	x0, [sp, #96]
   1283c:	add	x0, x0, #0x1
   12840:	bl	8348 <grub_malloc>
   12844:	str	x0, [sp, #80]
   12848:	ldr	x0, [sp, #80]
   1284c:	cmp	x0, #0x0
   12850:	b.ne	1285c <grub_partition_get_name+0x9c>  // b.any
   12854:	mov	x0, #0x0                   	// #0
   12858:	b	12984 <grub_partition_get_name+0x1c4>
   1285c:	ldr	x1, [sp, #80]
   12860:	ldr	x0, [sp, #96]
   12864:	add	x0, x1, x0
   12868:	str	x0, [sp, #104]
   1286c:	ldr	x0, [sp, #104]
   12870:	strb	wzr, [x0]
   12874:	ldr	x0, [sp, #24]
   12878:	str	x0, [sp, #88]
   1287c:	b	12948 <grub_partition_get_name+0x188>
   12880:	ldr	x0, [sp, #88]
   12884:	ldr	w0, [x0]
   12888:	add	w0, w0, #0x1
   1288c:	add	x4, sp, #0x28
   12890:	mov	w3, w0
   12894:	adrp	x0, 0 <_start>
   12898:	add	x0, x0, #0x0
   1289c:	ldr	x2, [x0]
   128a0:	mov	x1, #0x1b                  	// #27
   128a4:	mov	x0, x4
   128a8:	bl	1159c <grub_snprintf>
   128ac:	add	x0, sp, #0x28
   128b0:	bl	fe3c <grub_strlen>
   128b4:	str	x0, [sp, #72]
   128b8:	ldr	x0, [sp, #72]
   128bc:	neg	x0, x0
   128c0:	ldr	x1, [sp, #104]
   128c4:	add	x0, x1, x0
   128c8:	str	x0, [sp, #104]
   128cc:	add	x0, sp, #0x28
   128d0:	ldr	x2, [sp, #72]
   128d4:	mov	x1, x0
   128d8:	ldr	x0, [sp, #104]
   128dc:	bl	12080 <grub_memcpy>
   128e0:	ldr	x0, [sp, #88]
   128e4:	ldr	x0, [x0, #48]
   128e8:	ldr	x0, [x0, #16]
   128ec:	bl	fe3c <grub_strlen>
   128f0:	str	x0, [sp, #72]
   128f4:	ldr	x0, [sp, #72]
   128f8:	neg	x0, x0
   128fc:	ldr	x1, [sp, #104]
   12900:	add	x0, x1, x0
   12904:	str	x0, [sp, #104]
   12908:	ldr	x0, [sp, #88]
   1290c:	ldr	x0, [x0, #48]
   12910:	ldr	x0, [x0, #16]
   12914:	ldr	x2, [sp, #72]
   12918:	mov	x1, x0
   1291c:	ldr	x0, [sp, #104]
   12920:	bl	12080 <grub_memcpy>
   12924:	ldr	x0, [sp, #104]
   12928:	sub	x0, x0, #0x1
   1292c:	str	x0, [sp, #104]
   12930:	ldr	x0, [sp, #104]
   12934:	mov	w1, #0x2c                  	// #44
   12938:	strb	w1, [x0]
   1293c:	ldr	x0, [sp, #88]
   12940:	ldr	x0, [x0, #40]
   12944:	str	x0, [sp, #88]
   12948:	ldr	x0, [sp, #88]
   1294c:	cmp	x0, #0x0
   12950:	b.ne	12880 <grub_partition_get_name+0xc0>  // b.any
   12954:	ldr	x0, [sp, #104]
   12958:	add	x3, x0, #0x1
   1295c:	ldr	x1, [sp, #80]
   12960:	ldr	x0, [sp, #96]
   12964:	add	x1, x1, x0
   12968:	ldr	x0, [sp, #104]
   1296c:	sub	x0, x1, x0
   12970:	mov	x2, x0
   12974:	mov	x1, x3
   12978:	ldr	x0, [sp, #80]
   1297c:	bl	f08c <grub_memmove>
   12980:	ldr	x0, [sp, #80]
   12984:	ldp	x29, x30, [sp], #112
   12988:	ret
   1298c:	nop
	...

00000000000129a0 <grub_command_find>:
   129a0:	stp	x29, x30, [sp, #-32]!
   129a4:	mov	x29, sp
   129a8:	str	x0, [sp, #24]
   129ac:	adrp	x0, 0 <_start>
   129b0:	add	x0, x0, #0x0
   129b4:	ldr	x0, [x0]
   129b8:	ldr	x0, [x0]
   129bc:	ldr	x1, [sp, #24]
   129c0:	bl	e148 <grub_named_list_find>
   129c4:	ldp	x29, x30, [sp], #32
   129c8:	ret
   129cc:	nop
	...

00000000000129d8 <grub_rescue_parse_line>:
   129d8:	stp	x29, x30, [sp, #-96]!
   129dc:	mov	x29, sp
   129e0:	str	x0, [sp, #40]
   129e4:	str	x1, [sp, #32]
   129e8:	str	x2, [sp, #24]
   129ec:	add	x1, sp, #0x38
   129f0:	add	x0, sp, #0x44
   129f4:	mov	x4, x1
   129f8:	mov	x3, x0
   129fc:	ldr	x2, [sp, #24]
   12a00:	ldr	x1, [sp, #32]
   12a04:	ldr	x0, [sp, #40]
   12a08:	bl	11b9c <grub_parser_split_cmdline>
   12a0c:	cmp	w0, #0x0
   12a10:	b.ne	12a20 <grub_rescue_parse_line+0x48>  // b.any
   12a14:	ldr	w0, [sp, #68]
   12a18:	cmp	w0, #0x0
   12a1c:	b.ge	12a34 <grub_rescue_parse_line+0x5c>  // b.tcont
   12a20:	adrp	x0, 0 <_start>
   12a24:	add	x0, x0, #0x0
   12a28:	ldr	x0, [x0]
   12a2c:	ldr	w0, [x0]
   12a30:	b	12b74 <grub_rescue_parse_line+0x19c>
   12a34:	ldr	w0, [sp, #68]
   12a38:	cmp	w0, #0x0
   12a3c:	b.ne	12a48 <grub_rescue_parse_line+0x70>  // b.any
   12a40:	mov	w0, #0x0                   	// #0
   12a44:	b	12b74 <grub_rescue_parse_line+0x19c>
   12a48:	ldr	w0, [sp, #68]
   12a4c:	cmp	w0, #0x1
   12a50:	b.ne	12aa8 <grub_rescue_parse_line+0xd0>  // b.any
   12a54:	ldr	x0, [sp, #56]
   12a58:	ldr	x0, [x0]
   12a5c:	mov	w1, #0x3d                  	// #61
   12a60:	bl	f79c <grub_strchr>
   12a64:	str	x0, [sp, #88]
   12a68:	ldr	x0, [sp, #88]
   12a6c:	cmp	x0, #0x0
   12a70:	b.eq	12aa8 <grub_rescue_parse_line+0xd0>  // b.none
   12a74:	ldr	x0, [sp, #88]
   12a78:	strb	wzr, [x0]
   12a7c:	ldr	x0, [sp, #56]
   12a80:	ldr	x2, [x0]
   12a84:	ldr	x0, [sp, #88]
   12a88:	add	x0, x0, #0x1
   12a8c:	mov	x1, x0
   12a90:	mov	x0, x2
   12a94:	bl	c958 <grub_env_set>
   12a98:	ldr	x0, [sp, #88]
   12a9c:	mov	w1, #0x3d                  	// #61
   12aa0:	strb	w1, [x0]
   12aa4:	b	12b50 <grub_rescue_parse_line+0x178>
   12aa8:	ldr	x0, [sp, #56]
   12aac:	ldr	x0, [x0]
   12ab0:	str	x0, [sp, #80]
   12ab4:	ldr	x0, [sp, #80]
   12ab8:	ldrb	w0, [x0]
   12abc:	cmp	w0, #0x0
   12ac0:	b.eq	12b44 <grub_rescue_parse_line+0x16c>  // b.none
   12ac4:	ldr	x0, [sp, #80]
   12ac8:	bl	129a0 <grub_command_find>
   12acc:	str	x0, [sp, #72]
   12ad0:	ldr	x0, [sp, #72]
   12ad4:	cmp	x0, #0x0
   12ad8:	b.eq	12b04 <grub_rescue_parse_line+0x12c>  // b.none
   12adc:	ldr	x0, [sp, #72]
   12ae0:	ldr	x3, [x0, #32]
   12ae4:	ldr	w0, [sp, #68]
   12ae8:	sub	w1, w0, #0x1
   12aec:	ldr	x0, [sp, #56]
   12af0:	add	x0, x0, #0x8
   12af4:	mov	x2, x0
   12af8:	ldr	x0, [sp, #72]
   12afc:	blr	x3
   12b00:	b	12b50 <grub_rescue_parse_line+0x178>
   12b04:	ldr	x1, [sp, #80]
   12b08:	adrp	x0, 0 <_start>
   12b0c:	add	x0, x0, #0x0
   12b10:	ldr	x0, [x0]
   12b14:	bl	f238 <grub_printf_>
   12b18:	adrp	x0, 0 <_start>
   12b1c:	add	x0, x0, #0x0
   12b20:	ldr	x0, [x0]
   12b24:	bl	129a0 <grub_command_find>
   12b28:	cmp	x0, #0x0
   12b2c:	b.eq	12b4c <grub_rescue_parse_line+0x174>  // b.none
   12b30:	adrp	x0, 0 <_start>
   12b34:	add	x0, x0, #0x0
   12b38:	ldr	x0, [x0]
   12b3c:	bl	f1b4 <grub_err_printf>
   12b40:	b	12b50 <grub_rescue_parse_line+0x178>
   12b44:	nop
   12b48:	b	12b50 <grub_rescue_parse_line+0x178>
   12b4c:	nop
   12b50:	ldr	x0, [sp, #56]
   12b54:	ldr	x0, [x0]
   12b58:	bl	83ac <grub_free>
   12b5c:	ldr	x0, [sp, #56]
   12b60:	bl	83ac <grub_free>
   12b64:	adrp	x0, 0 <_start>
   12b68:	add	x0, x0, #0x0
   12b6c:	ldr	x0, [x0]
   12b70:	ldr	w0, [x0]
   12b74:	ldp	x29, x30, [sp], #96
   12b78:	ret
   12b7c:	nop
	...

0000000000012ba0 <grub_isprint>:
   12ba0:	sub	sp, sp, #0x10
   12ba4:	str	w0, [sp, #12]
   12ba8:	ldr	w0, [sp, #12]
   12bac:	cmp	w0, #0x1f
   12bb0:	b.le	12bc8 <grub_isprint+0x28>
   12bb4:	ldr	w0, [sp, #12]
   12bb8:	cmp	w0, #0x7e
   12bbc:	b.gt	12bc8 <grub_isprint+0x28>
   12bc0:	mov	w0, #0x1                   	// #1
   12bc4:	b	12bcc <grub_isprint+0x2c>
   12bc8:	mov	w0, #0x0                   	// #0
   12bcc:	add	sp, sp, #0x10
   12bd0:	ret

0000000000012bd4 <grub_rescue_read_line>:
   12bd4:	stp	x29, x30, [sp, #-64]!
   12bd8:	mov	x29, sp
   12bdc:	str	x0, [sp, #40]
   12be0:	str	w1, [sp, #36]
   12be4:	str	x2, [sp, #24]
   12be8:	str	wzr, [sp, #60]
   12bec:	ldr	w0, [sp, #36]
   12bf0:	cmp	w0, #0x0
   12bf4:	b.eq	12c08 <grub_rescue_read_line+0x34>  // b.none
   12bf8:	adrp	x0, 0 <_start>
   12bfc:	add	x0, x0, #0x0
   12c00:	ldr	x0, [x0]
   12c04:	b	12c14 <grub_rescue_read_line+0x40>
   12c08:	adrp	x0, 0 <_start>
   12c0c:	add	x0, x0, #0x0
   12c10:	ldr	x0, [x0]
   12c14:	bl	f1b4 <grub_err_printf>
   12c18:	mov	x2, #0x100                 	// #256
   12c1c:	mov	w1, #0x0                   	// #0
   12c20:	adrp	x0, 0 <_start>
   12c24:	add	x0, x0, #0x0
   12c28:	ldr	x0, [x0]
   12c2c:	bl	fd18 <grub_memset>
   12c30:	b	12d1c <grub_rescue_read_line+0x148>
   12c34:	ldr	w0, [sp, #56]
   12c38:	bl	12ba0 <grub_isprint>
   12c3c:	cmp	w0, #0x0
   12c40:	b.eq	12ca4 <grub_rescue_read_line+0xd0>  // b.none
   12c44:	ldr	w0, [sp, #60]
   12c48:	cmp	w0, #0xfe
   12c4c:	b.gt	12d18 <grub_rescue_read_line+0x144>
   12c50:	ldr	w0, [sp, #56]
   12c54:	and	w0, w0, #0xff
   12c58:	strb	w0, [sp, #48]
   12c5c:	strb	wzr, [sp, #49]
   12c60:	ldr	w0, [sp, #60]
   12c64:	add	w1, w0, #0x1
   12c68:	str	w1, [sp, #60]
   12c6c:	ldr	w1, [sp, #56]
   12c70:	and	w2, w1, #0xff
   12c74:	adrp	x1, 0 <_start>
   12c78:	add	x1, x1, #0x0
   12c7c:	ldr	x1, [x1]
   12c80:	sxtw	x0, w0
   12c84:	strb	w2, [x1, x0]
   12c88:	adrp	x0, 0 <_start>
   12c8c:	add	x0, x0, #0x0
   12c90:	ldr	x0, [x0]
   12c94:	ldr	x1, [x0]
   12c98:	add	x0, sp, #0x30
   12c9c:	blr	x1
   12ca0:	b	12d18 <grub_rescue_read_line+0x144>
   12ca4:	ldr	w0, [sp, #56]
   12ca8:	cmp	w0, #0x8
   12cac:	b.ne	12d18 <grub_rescue_read_line+0x144>  // b.any
   12cb0:	ldr	w0, [sp, #60]
   12cb4:	cmp	w0, #0x0
   12cb8:	b.le	12d18 <grub_rescue_read_line+0x144>
   12cbc:	ldr	w0, [sp, #56]
   12cc0:	and	w0, w0, #0xff
   12cc4:	strb	w0, [sp, #48]
   12cc8:	mov	w0, #0x20                  	// #32
   12ccc:	strb	w0, [sp, #49]
   12cd0:	ldr	w0, [sp, #56]
   12cd4:	and	w0, w0, #0xff
   12cd8:	strb	w0, [sp, #50]
   12cdc:	strb	wzr, [sp, #51]
   12ce0:	ldr	w0, [sp, #60]
   12ce4:	sub	w0, w0, #0x1
   12ce8:	str	w0, [sp, #60]
   12cec:	adrp	x0, 0 <_start>
   12cf0:	add	x0, x0, #0x0
   12cf4:	ldr	x1, [x0]
   12cf8:	ldrsw	x0, [sp, #60]
   12cfc:	strb	wzr, [x1, x0]
   12d00:	adrp	x0, 0 <_start>
   12d04:	add	x0, x0, #0x0
   12d08:	ldr	x0, [x0]
   12d0c:	ldr	x1, [x0]
   12d10:	add	x0, sp, #0x30
   12d14:	blr	x1
   12d18:	bl	13120 <grub_refresh>
   12d1c:	bl	130e8 <grub_getkey>
   12d20:	str	w0, [sp, #56]
   12d24:	ldr	w0, [sp, #56]
   12d28:	cmp	w0, #0xa
   12d2c:	b.eq	12d3c <grub_rescue_read_line+0x168>  // b.none
   12d30:	ldr	w0, [sp, #56]
   12d34:	cmp	w0, #0xd
   12d38:	b.ne	12c34 <grub_rescue_read_line+0x60>  // b.any
   12d3c:	adrp	x0, 0 <_start>
   12d40:	add	x0, x0, #0x0
   12d44:	ldr	x0, [x0]
   12d48:	ldr	x1, [x0]
   12d4c:	adrp	x0, 0 <_start>
   12d50:	add	x0, x0, #0x0
   12d54:	ldr	x0, [x0]
   12d58:	blr	x1
   12d5c:	bl	13120 <grub_refresh>
   12d60:	adrp	x0, 0 <_start>
   12d64:	add	x0, x0, #0x0
   12d68:	ldr	x0, [x0]
   12d6c:	bl	fc40 <grub_strdup>
   12d70:	mov	x1, x0
   12d74:	ldr	x0, [sp, #40]
   12d78:	str	x1, [x0]
   12d7c:	mov	w0, #0x0                   	// #0
   12d80:	ldp	x29, x30, [sp], #64
   12d84:	ret
	...

0000000000012db0 <grub_rescue_run>:
   12db0:	stp	x29, x30, [sp, #-32]!
   12db4:	mov	x29, sp
   12db8:	adrp	x0, 0 <_start>
   12dbc:	add	x0, x0, #0x0
   12dc0:	ldr	x0, [x0]
   12dc4:	bl	f1b4 <grub_err_printf>
   12dc8:	bl	d190 <grub_print_error>
   12dcc:	adrp	x0, 0 <_start>
   12dd0:	add	x0, x0, #0x0
   12dd4:	ldr	x0, [x0]
   12dd8:	str	wzr, [x0]
   12ddc:	add	x0, sp, #0x18
   12de0:	mov	x2, #0x0                   	// #0
   12de4:	mov	w1, #0x0                   	// #0
   12de8:	bl	12bd4 <grub_rescue_read_line>
   12dec:	ldr	x0, [sp, #24]
   12df0:	cmp	x0, #0x0
   12df4:	b.eq	12e30 <grub_rescue_run+0x80>  // b.none
   12df8:	ldr	x0, [sp, #24]
   12dfc:	ldrb	w0, [x0]
   12e00:	cmp	w0, #0x0
   12e04:	b.eq	12e30 <grub_rescue_run+0x80>  // b.none
   12e08:	ldr	x3, [sp, #24]
   12e0c:	mov	x2, #0x0                   	// #0
   12e10:	adrp	x0, 0 <_start>
   12e14:	add	x0, x0, #0x0
   12e18:	ldr	x1, [x0]
   12e1c:	mov	x0, x3
   12e20:	bl	129d8 <grub_rescue_parse_line>
   12e24:	ldr	x0, [sp, #24]
   12e28:	bl	83ac <grub_free>
   12e2c:	b	12dc8 <grub_rescue_run+0x18>
   12e30:	nop
   12e34:	b	12dc8 <grub_rescue_run+0x18>
	...

0000000000012e50 <grub_term_refresh>:
   12e50:	stp	x29, x30, [sp, #-32]!
   12e54:	mov	x29, sp
   12e58:	str	x0, [sp, #24]
   12e5c:	ldr	x0, [sp, #24]
   12e60:	ldr	x0, [x0, #104]
   12e64:	cmp	x0, #0x0
   12e68:	b.eq	12e7c <grub_term_refresh+0x2c>  // b.none
   12e6c:	ldr	x0, [sp, #24]
   12e70:	ldr	x1, [x0, #104]
   12e74:	ldr	x0, [sp, #24]
   12e78:	blr	x1
   12e7c:	nop
   12e80:	ldp	x29, x30, [sp], #32
   12e84:	ret

0000000000012e88 <grub_cpu_idle>:
   12e88:	nop
   12e8c:	ret

0000000000012e90 <grub_putcode_dumb>:
   12e90:	stp	x29, x30, [sp, #-80]!
   12e94:	mov	x29, sp
   12e98:	str	w0, [sp, #28]
   12e9c:	str	x1, [sp, #16]
   12ea0:	stp	xzr, xzr, [sp, #40]
   12ea4:	stp	xzr, xzr, [sp, #56]
   12ea8:	ldr	w0, [sp, #28]
   12eac:	and	w1, w0, #0x7fffff
   12eb0:	ldr	w0, [sp, #40]
   12eb4:	bfxil	w0, w1, #0, #23
   12eb8:	str	w0, [sp, #40]
   12ebc:	mov	w0, #0x1                   	// #1
   12ec0:	strb	w0, [sp, #48]
   12ec4:	ldr	w0, [sp, #28]
   12ec8:	cmp	w0, #0x9
   12ecc:	b.ne	12f2c <grub_putcode_dumb+0x9c>  // b.any
   12ed0:	ldr	x0, [sp, #16]
   12ed4:	ldr	x0, [x0, #64]
   12ed8:	cmp	x0, #0x0
   12edc:	b.eq	12f2c <grub_putcode_dumb+0x9c>  // b.none
   12ee0:	ldr	x0, [sp, #16]
   12ee4:	ldr	x1, [x0, #64]
   12ee8:	ldr	x0, [sp, #16]
   12eec:	blr	x1
   12ef0:	and	w0, w0, #0xffff
   12ef4:	and	w0, w0, #0x7
   12ef8:	mov	w1, #0x8                   	// #8
   12efc:	sub	w0, w1, w0
   12f00:	str	w0, [sp, #76]
   12f04:	b	12f14 <grub_putcode_dumb+0x84>
   12f08:	ldr	x1, [sp, #16]
   12f0c:	mov	w0, #0x20                  	// #32
   12f10:	bl	12e90 <grub_putcode_dumb>
   12f14:	ldr	w0, [sp, #76]
   12f18:	sub	w1, w0, #0x1
   12f1c:	str	w1, [sp, #76]
   12f20:	cmp	w0, #0x0
   12f24:	b.ne	12f08 <grub_putcode_dumb+0x78>  // b.any
   12f28:	b	12f5c <grub_putcode_dumb+0xcc>
   12f2c:	ldr	x0, [sp, #16]
   12f30:	ldr	x2, [x0, #40]
   12f34:	add	x0, sp, #0x28
   12f38:	mov	x1, x0
   12f3c:	ldr	x0, [sp, #16]
   12f40:	blr	x2
   12f44:	ldr	w0, [sp, #28]
   12f48:	cmp	w0, #0xa
   12f4c:	b.ne	12f5c <grub_putcode_dumb+0xcc>  // b.any
   12f50:	ldr	x1, [sp, #16]
   12f54:	mov	w0, #0xd                   	// #13
   12f58:	bl	12e90 <grub_putcode_dumb>
   12f5c:	ldp	x29, x30, [sp], #80
   12f60:	ret

0000000000012f64 <grub_xputs_dumb>:
   12f64:	stp	x29, x30, [sp, #-48]!
   12f68:	mov	x29, sp
   12f6c:	str	x0, [sp, #24]
   12f70:	b	12fdc <grub_xputs_dumb+0x78>
   12f74:	ldr	x0, [sp, #24]
   12f78:	ldrb	w0, [x0]
   12f7c:	str	w0, [sp, #36]
   12f80:	ldr	w0, [sp, #36]
   12f84:	cmp	w0, #0x7f
   12f88:	b.ls	12f94 <grub_xputs_dumb+0x30>  // b.plast
   12f8c:	mov	w0, #0x3f                  	// #63
   12f90:	str	w0, [sp, #36]
   12f94:	adrp	x0, 0 <_start>
   12f98:	add	x0, x0, #0x0
   12f9c:	ldr	x0, [x0]
   12fa0:	ldr	x0, [x0]
   12fa4:	str	x0, [sp, #40]
   12fa8:	b	12fc4 <grub_xputs_dumb+0x60>
   12fac:	ldr	x1, [sp, #40]
   12fb0:	ldr	w0, [sp, #36]
   12fb4:	bl	12e90 <grub_putcode_dumb>
   12fb8:	ldr	x0, [sp, #40]
   12fbc:	ldr	x0, [x0]
   12fc0:	str	x0, [sp, #40]
   12fc4:	ldr	x0, [sp, #40]
   12fc8:	cmp	x0, #0x0
   12fcc:	b.ne	12fac <grub_xputs_dumb+0x48>  // b.any
   12fd0:	ldr	x0, [sp, #24]
   12fd4:	add	x0, x0, #0x1
   12fd8:	str	x0, [sp, #24]
   12fdc:	ldr	x0, [sp, #24]
   12fe0:	ldrb	w0, [x0]
   12fe4:	cmp	w0, #0x0
   12fe8:	b.ne	12f74 <grub_xputs_dumb+0x10>  // b.any
   12fec:	nop
   12ff0:	nop
   12ff4:	ldp	x29, x30, [sp], #48
   12ff8:	ret
   12ffc:	nop
	...

0000000000013008 <grub_getkey_noblock>:
   13008:	stp	x29, x30, [sp, #-32]!
   1300c:	mov	x29, sp
   13010:	adrp	x0, 0 <_start>
   13014:	add	x0, x0, #0x0
   13018:	ldr	x0, [x0]
   1301c:	ldr	x0, [x0]
   13020:	cmp	x0, #0x0
   13024:	b.eq	13040 <grub_getkey_noblock+0x38>  // b.none
   13028:	adrp	x0, 0 <_start>
   1302c:	add	x0, x0, #0x0
   13030:	ldr	x0, [x0]
   13034:	ldr	x1, [x0]
   13038:	mov	w0, #0x0                   	// #0
   1303c:	blr	x1
   13040:	adrp	x0, 0 <_start>
   13044:	add	x0, x0, #0x0
   13048:	ldr	x0, [x0]
   1304c:	ldr	x0, [x0]
   13050:	cmp	x0, #0x0
   13054:	b.eq	1306c <grub_getkey_noblock+0x64>  // b.none
   13058:	adrp	x0, 0 <_start>
   1305c:	add	x0, x0, #0x0
   13060:	ldr	x0, [x0]
   13064:	ldr	x0, [x0]
   13068:	blr	x0
   1306c:	adrp	x0, 0 <_start>
   13070:	add	x0, x0, #0x0
   13074:	ldr	x0, [x0]
   13078:	ldr	x0, [x0]
   1307c:	str	x0, [sp, #24]
   13080:	b	130b8 <grub_getkey_noblock+0xb0>
   13084:	ldr	x0, [sp, #24]
   13088:	ldr	x1, [x0, #40]
   1308c:	ldr	x0, [sp, #24]
   13090:	blr	x1
   13094:	str	w0, [sp, #20]
   13098:	ldr	w0, [sp, #20]
   1309c:	cmp	w0, #0x0
   130a0:	b.eq	130ac <grub_getkey_noblock+0xa4>  // b.none
   130a4:	ldr	w0, [sp, #20]
   130a8:	b	130c8 <grub_getkey_noblock+0xc0>
   130ac:	ldr	x0, [sp, #24]
   130b0:	ldr	x0, [x0]
   130b4:	str	x0, [sp, #24]
   130b8:	ldr	x0, [sp, #24]
   130bc:	cmp	x0, #0x0
   130c0:	b.ne	13084 <grub_getkey_noblock+0x7c>  // b.any
   130c4:	mov	w0, #0x0                   	// #0
   130c8:	ldp	x29, x30, [sp], #32
   130cc:	ret
	...

00000000000130e8 <grub_getkey>:
   130e8:	stp	x29, x30, [sp, #-32]!
   130ec:	mov	x29, sp
   130f0:	bl	13120 <grub_refresh>
   130f4:	bl	13008 <grub_getkey_noblock>
   130f8:	str	w0, [sp, #28]
   130fc:	ldr	w0, [sp, #28]
   13100:	cmp	w0, #0x0
   13104:	b.eq	13110 <grub_getkey+0x28>  // b.none
   13108:	ldr	w0, [sp, #28]
   1310c:	b	13118 <grub_getkey+0x30>
   13110:	bl	12e88 <grub_cpu_idle>
   13114:	b	130f4 <grub_getkey+0xc>
   13118:	ldp	x29, x30, [sp], #32
   1311c:	ret

0000000000013120 <grub_refresh>:
   13120:	stp	x29, x30, [sp, #-32]!
   13124:	mov	x29, sp
   13128:	adrp	x0, 0 <_start>
   1312c:	add	x0, x0, #0x0
   13130:	ldr	x0, [x0]
   13134:	ldr	x0, [x0]
   13138:	str	x0, [sp, #24]
   1313c:	b	13154 <grub_refresh+0x34>
   13140:	ldr	x0, [sp, #24]
   13144:	bl	12e50 <grub_term_refresh>
   13148:	ldr	x0, [sp, #24]
   1314c:	ldr	x0, [x0]
   13150:	str	x0, [sp, #24]
   13154:	ldr	x0, [sp, #24]
   13158:	cmp	x0, #0x0
   1315c:	b.ne	13140 <grub_refresh+0x20>  // b.any
   13160:	nop
   13164:	nop
   13168:	ldp	x29, x30, [sp], #32
   1316c:	ret
	...

0000000000013178 <grub_register_exported_symbols>:
   13178:	stp	x29, x30, [sp, #-32]!
   1317c:	mov	x29, sp
   13180:	adrp	x0, 0 <_start>
   13184:	add	x0, x0, #0x0
   13188:	ldr	x0, [x0]
   1318c:	str	x0, [sp, #24]
   13190:	b	131c8 <grub_register_exported_symbols+0x50>
   13194:	ldr	x0, [sp, #24]
   13198:	ldr	x4, [x0]
   1319c:	ldr	x0, [sp, #24]
   131a0:	ldr	x1, [x0, #8]
   131a4:	ldr	x0, [sp, #24]
   131a8:	ldr	w0, [x0, #16]
   131ac:	mov	x3, #0x0                   	// #0
   131b0:	mov	w2, w0
   131b4:	mov	x0, x4
   131b8:	bl	aed0 <grub_dl_register_symbol>
   131bc:	ldr	x0, [sp, #24]
   131c0:	add	x0, x0, #0x18
   131c4:	str	x0, [sp, #24]
   131c8:	ldr	x0, [sp, #24]
   131cc:	ldr	x0, [x0]
   131d0:	cmp	x0, #0x0
   131d4:	b.ne	13194 <grub_register_exported_symbols+0x1c>  // b.any
   131d8:	nop
   131dc:	nop
   131e0:	ldp	x29, x30, [sp], #32
   131e4:	ret
	...
