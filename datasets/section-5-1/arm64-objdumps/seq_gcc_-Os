
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//seq_gcc_-Os:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000000fc8 <_init>:
 fc8:	stp	x29, x30, [sp, #-16]!
 fcc:	mov	x29, sp
 fd0:	bl	11f0 <call_weak_fn>
 fd4:	ldp	x29, x30, [sp], #16
 fd8:	ret

Disassembly of section .plt:

0000000000000fe0 <.plt>:
     fe0:	stp	x16, x30, [sp, #-16]!
     fe4:	adrp	x16, 13000 <__FRAME_END__+0xf514>
     fe8:	ldr	x17, [x16, #4088]
     fec:	add	x16, x16, #0xff8
     ff0:	br	x17
     ff4:	nop
     ff8:	nop
     ffc:	nop

0000000000001000 <memcpy@plt>:
    1000:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    1004:	ldr	x17, [x16]
    1008:	add	x16, x16, #0x0
    100c:	br	x17

0000000000001010 <all_digits@plt>:
    1010:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    1014:	ldr	x17, [x16, #8]
    1018:	add	x16, x16, #0x8
    101c:	br	x17

0000000000001020 <fputs@plt>:
    1020:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    1024:	ldr	x17, [x16, #16]
    1028:	add	x16, x16, #0x10
    102c:	br	x17

0000000000001030 <builtin_error@plt>:
    1030:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    1034:	ldr	x17, [x16, #24]
    1038:	add	x16, x16, #0x18
    103c:	br	x17

0000000000001040 <builtin_warning@plt>:
    1040:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    1044:	ldr	x17, [x16, #32]
    1048:	add	x16, x16, #0x20
    104c:	br	x17

0000000000001050 <__cxa_finalize@plt>:
    1050:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    1054:	ldr	x17, [x16, #40]
    1058:	add	x16, x16, #0x28
    105c:	br	x17

0000000000001060 <sprintf@plt>:
    1060:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    1064:	ldr	x17, [x16, #48]
    1068:	add	x16, x16, #0x30
    106c:	br	x17

0000000000001070 <snprintf@plt>:
    1070:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    1074:	ldr	x17, [x16, #56]
    1078:	add	x16, x16, #0x38
    107c:	br	x17

0000000000001080 <locale_decpoint@plt>:
    1080:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    1084:	ldr	x17, [x16, #64]
    1088:	add	x16, x16, #0x40
    108c:	br	x17

0000000000001090 <print_intseq@plt>:
    1090:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    1094:	ldr	x17, [x16, #72]
    1098:	add	x16, x16, #0x48
    109c:	br	x17

00000000000010a0 <builtin_help@plt>:
    10a0:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    10a4:	ldr	x17, [x16, #80]
    10a8:	add	x16, x16, #0x50
    10ac:	br	x17

00000000000010b0 <xmalloc@plt>:
    10b0:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    10b4:	ldr	x17, [x16, #88]
    10b8:	add	x16, x16, #0x58
    10bc:	br	x17

00000000000010c0 <builtin_usage@plt>:
    10c0:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    10c4:	ldr	x17, [x16, #96]
    10c8:	add	x16, x16, #0x60
    10cc:	br	x17

00000000000010d0 <strerror@plt>:
    10d0:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    10d4:	ldr	x17, [x16, #104]
    10d8:	add	x16, x16, #0x68
    10dc:	br	x17

00000000000010e0 <__gmon_start__@plt>:
    10e0:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    10e4:	ldr	x17, [x16, #112]
    10e8:	add	x16, x16, #0x70
    10ec:	br	x17

00000000000010f0 <__ctype_b_loc@plt>:
    10f0:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    10f4:	ldr	x17, [x16, #120]
    10f8:	add	x16, x16, #0x78
    10fc:	br	x17

0000000000001100 <strtold@plt>:
    1100:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    1104:	ldr	x17, [x16, #128]
    1108:	add	x16, x16, #0x80
    110c:	br	x17

0000000000001110 <print_fltseq@plt>:
    1110:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    1114:	ldr	x17, [x16, #136]
    1118:	add	x16, x16, #0x88
    111c:	br	x17

0000000000001120 <free@plt>:
    1120:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    1124:	ldr	x17, [x16, #144]
    1128:	add	x16, x16, #0x90
    112c:	br	x17

0000000000001130 <internal_getopt@plt>:
    1130:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    1134:	ldr	x17, [x16, #152]
    1138:	add	x16, x16, #0x98
    113c:	br	x17

0000000000001140 <reset_internal_getopt@plt>:
    1140:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    1144:	ldr	x17, [x16, #160]
    1148:	add	x16, x16, #0xa0
    114c:	br	x17

0000000000001150 <strspn@plt>:
    1150:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    1154:	ldr	x17, [x16, #168]
    1158:	add	x16, x16, #0xa8
    115c:	br	x17

0000000000001160 <strchr@plt>:
    1160:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    1164:	ldr	x17, [x16, #176]
    1168:	add	x16, x16, #0xb0
    116c:	br	x17

0000000000001170 <sh_chkwrite@plt>:
    1170:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    1174:	ldr	x17, [x16, #184]
    1178:	add	x16, x16, #0xb8
    117c:	br	x17

0000000000001180 <strcpy@plt>:
    1180:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    1184:	ldr	x17, [x16, #192]
    1188:	add	x16, x16, #0xc0
    118c:	br	x17

0000000000001190 <termsig_handler@plt>:
    1190:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    1194:	ldr	x17, [x16, #200]
    1198:	add	x16, x16, #0xc8
    119c:	br	x17

00000000000011a0 <width_needed@plt>:
    11a0:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    11a4:	ldr	x17, [x16, #208]
    11a8:	add	x16, x16, #0xd0
    11ac:	br	x17

00000000000011b0 <throw_to_top_level@plt>:
    11b0:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    11b4:	ldr	x17, [x16, #216]
    11b8:	add	x16, x16, #0xd8
    11bc:	br	x17

00000000000011c0 <printf@plt>:
    11c0:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    11c4:	ldr	x17, [x16, #224]
    11c8:	add	x16, x16, #0xe0
    11cc:	br	x17

00000000000011d0 <__errno_location@plt>:
    11d0:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    11d4:	ldr	x17, [x16, #232]
    11d8:	add	x16, x16, #0xe8
    11dc:	br	x17

00000000000011e0 <sh_invalidnum@plt>:
    11e0:	adrp	x16, 14000 <memcpy@GLIBC_2.17>
    11e4:	ldr	x17, [x16, #240]
    11e8:	add	x16, x16, #0xf0
    11ec:	br	x17

Disassembly of section .text:

00000000000011f0 <call_weak_fn>:
    11f0:	adrp	x0, 13000 <__FRAME_END__+0xf514>
    11f4:	ldr	x0, [x0, #4032]
    11f8:	cbz	x0, 1200 <call_weak_fn+0x10>
    11fc:	b	10e0 <__gmon_start__@plt>
    1200:	ret

0000000000001204 <deregister_tm_clones>:
    1204:	adrp	x0, 14000 <memcpy@GLIBC_2.17>
    1208:	add	x0, x0, #0x1b0
    120c:	adrp	x1, 14000 <memcpy@GLIBC_2.17>
    1210:	add	x1, x1, #0x1b0
    1214:	cmp	x1, x0
    1218:	b.eq	1230 <deregister_tm_clones+0x2c>  // b.none
    121c:	adrp	x1, 13000 <__FRAME_END__+0xf514>
    1220:	ldr	x1, [x1, #3992]
    1224:	cbz	x1, 1230 <deregister_tm_clones+0x2c>
    1228:	mov	x16, x1
    122c:	br	x16
    1230:	ret

0000000000001234 <register_tm_clones>:
    1234:	adrp	x0, 14000 <memcpy@GLIBC_2.17>
    1238:	add	x0, x0, #0x1b0
    123c:	adrp	x1, 14000 <memcpy@GLIBC_2.17>
    1240:	add	x1, x1, #0x1b0
    1244:	sub	x1, x1, x0
    1248:	mov	x2, #0x2                   	// #2
    124c:	asr	x1, x1, #3
    1250:	sdiv	x1, x1, x2
    1254:	cbz	x1, 126c <register_tm_clones+0x38>
    1258:	adrp	x2, 13000 <__FRAME_END__+0xf514>
    125c:	ldr	x2, [x2, #4064]
    1260:	cbz	x2, 126c <register_tm_clones+0x38>
    1264:	mov	x16, x2
    1268:	br	x16
    126c:	ret

0000000000001270 <__do_global_dtors_aux>:
    1270:	adrp	x0, 14000 <memcpy@GLIBC_2.17>
    1274:	ldrb	w1, [x0, #432]
    1278:	cbnz	w1, 12bc <__do_global_dtors_aux+0x4c>
    127c:	stp	x29, x30, [sp, #-32]!
    1280:	mov	x29, sp
    1284:	str	x19, [sp, #16]
    1288:	mov	x19, x0
    128c:	adrp	x0, 13000 <__FRAME_END__+0xf514>
    1290:	ldr	x0, [x0, #4000]
    1294:	cbz	x0, 12a4 <__do_global_dtors_aux+0x34>
    1298:	adrp	x0, 14000 <memcpy@GLIBC_2.17>
    129c:	ldr	x0, [x0, #248]
    12a0:	bl	1050 <__cxa_finalize@plt>
    12a4:	bl	1204 <deregister_tm_clones>
    12a8:	mov	w0, #0x1                   	// #1
    12ac:	strb	w0, [x19, #432]
    12b0:	ldr	x19, [sp, #16]
    12b4:	ldp	x29, x30, [sp], #32
    12b8:	ret
    12bc:	ret

00000000000012c0 <frame_dummy>:
    12c0:	b	1234 <register_tm_clones>

00000000000012c4 <getfloatmax>:
    12c4:	stp	x29, x30, [sp, #-64]!
    12c8:	mov	x29, sp
    12cc:	stp	x19, x20, [sp, #16]
    12d0:	mov	x19, x0
    12d4:	bl	11d0 <__errno_location@plt>
    12d8:	str	wzr, [x0]
    12dc:	mov	x20, x0
    12e0:	add	x1, sp, #0x38
    12e4:	mov	x0, x19
    12e8:	bl	1100 <strtold@plt>
    12ec:	ldr	x0, [sp, #56]
    12f0:	ldrb	w0, [x0]
    12f4:	cbz	w0, 1338 <getfloatmax+0x74>
    12f8:	mov	x0, x19
    12fc:	str	q0, [sp, #32]
    1300:	bl	11e0 <sh_invalidnum@plt>
    1304:	adrp	x0, 14000 <memcpy@GLIBC_2.17>
    1308:	ldr	q0, [sp, #32]
    130c:	mov	w1, #0x1                   	// #1
    1310:	str	w1, [x0, #440]
    1314:	movi	v1.2d, #0x0
    1318:	str	q0, [sp, #32]
    131c:	bl	26f4 <__eqtf2>
    1320:	ldr	q0, [sp, #32]
    1324:	cbnz	w0, 132c <getfloatmax+0x68>
    1328:	movi	v0.2d, #0x0
    132c:	ldp	x19, x20, [sp, #16]
    1330:	ldp	x29, x30, [sp], #64
    1334:	ret
    1338:	ldr	w0, [x20]
    133c:	cmp	w0, #0x22
    1340:	b.ne	1314 <getfloatmax+0x50>  // b.any
    1344:	str	q0, [sp, #32]
    1348:	bl	10d0 <strerror@plt>
    134c:	mov	x1, x19
    1350:	mov	x2, x0
    1354:	adrp	x0, 3000 <__multf3+0x58c>
    1358:	add	x0, x0, #0x300
    135c:	bl	1030 <builtin_error@plt>
    1360:	b	1304 <getfloatmax+0x40>

0000000000001364 <getprec.constprop.0>:
    1364:	stp	x29, x30, [sp, #-48]!
    1368:	adrp	x0, 14000 <memcpy@GLIBC_2.17>
    136c:	add	x0, x0, #0x1b8
    1370:	mov	x29, sp
    1374:	stp	x19, x20, [sp, #16]
    1378:	add	x0, x0, #0x5
    137c:	str	x21, [sp, #32]
    1380:	ldurb	w1, [x0, #-1]
    1384:	bl	1160 <strchr@plt>
    1388:	cbz	x0, 13d0 <getprec.constprop.0+0x6c>
    138c:	add	x19, x0, #0x1
    1390:	mov	w20, #0x0                   	// #0
    1394:	ldrb	w21, [x19]
    1398:	cbz	w21, 13b0 <getprec.constprop.0+0x4c>
    139c:	bl	10f0 <__ctype_b_loc@plt>
    13a0:	ubfiz	x21, x21, #1, #8
    13a4:	ldr	x0, [x0]
    13a8:	ldrh	w0, [x0, x21]
    13ac:	tbnz	w0, #11, 13c4 <getprec.constprop.0+0x60>
    13b0:	mov	w0, w20
    13b4:	ldp	x19, x20, [sp, #16]
    13b8:	ldr	x21, [sp, #32]
    13bc:	ldp	x29, x30, [sp], #48
    13c0:	ret
    13c4:	add	w20, w20, #0x1
    13c8:	add	x19, x19, #0x1
    13cc:	b	1394 <getprec.constprop.0+0x30>
    13d0:	mov	w20, #0x0                   	// #0
    13d4:	b	13b0 <getprec.constprop.0+0x4c>

00000000000013d8 <print_fltseq>:
    13d8:	stp	x29, x30, [sp, #-128]!
    13dc:	mov	x29, sp
    13e0:	stp	x21, x22, [sp, #32]
    13e4:	adrp	x21, 13000 <__FRAME_END__+0xf514>
    13e8:	mov	x22, x0
    13ec:	str	x23, [sp, #48]
    13f0:	adrp	x23, 13000 <__FRAME_END__+0xf514>
    13f4:	ldr	x21, [x21, #4048]
    13f8:	stp	x19, x20, [sp, #16]
    13fc:	adrp	x19, 3000 <__multf3+0x58c>
    1400:	ldr	x23, [x23, #4024]
    1404:	add	x19, x19, #0x32c
    1408:	mov	w20, #0x0                   	// #0
    140c:	str	q0, [sp, #64]
    1410:	str	q0, [sp, #80]
    1414:	str	q1, [sp, #96]
    1418:	str	q2, [sp, #112]
    141c:	movi	v1.2d, #0x0
    1420:	ldr	q0, [sp, #112]
    1424:	bl	27f4 <__getf2>
    1428:	ldr	q0, [sp, #64]
    142c:	ldr	q1, [sp, #96]
    1430:	tbnz	w0, #31, 1504 <print_fltseq+0x12c>
    1434:	bl	2934 <__letf2>
    1438:	cmp	w0, #0x0
    143c:	cset	w1, le
    1440:	cbnz	w1, 1470 <print_fltseq+0x98>
    1444:	cbz	w20, 1468 <print_fltseq+0x90>
    1448:	adrp	x0, 13000 <__FRAME_END__+0xf514>
    144c:	ldr	x0, [x0, #4016]
    1450:	ldr	x1, [x0]
    1454:	adrp	x0, 3000 <__multf3+0x58c>
    1458:	add	x0, x0, #0x770
    145c:	bl	1020 <fputs@plt>
    1460:	cmn	w0, #0x1
    1464:	b.eq	14b0 <print_fltseq+0xd8>  // b.none
    1468:	mov	w0, #0x0                   	// #0
    146c:	b	14b4 <print_fltseq+0xdc>
    1470:	ldr	w0, [x21]
    1474:	cbz	w0, 1480 <print_fltseq+0xa8>
    1478:	ldr	w0, [x21]
    147c:	bl	1190 <termsig_handler@plt>
    1480:	ldr	w0, [x23]
    1484:	cbz	w0, 148c <print_fltseq+0xb4>
    1488:	bl	11b0 <throw_to_top_level@plt>
    148c:	ldrb	w0, [x19]
    1490:	cbz	w0, 14c8 <print_fltseq+0xf0>
    1494:	adrp	x0, 13000 <__FRAME_END__+0xf514>
    1498:	ldr	x0, [x0, #4016]
    149c:	ldr	x1, [x0]
    14a0:	mov	x0, x19
    14a4:	bl	1020 <fputs@plt>
    14a8:	cmn	w0, #0x1
    14ac:	b.ne	14c8 <print_fltseq+0xf0>  // b.any
    14b0:	mov	w0, #0x1                   	// #1
    14b4:	ldp	x19, x20, [sp, #16]
    14b8:	ldp	x21, x22, [sp, #32]
    14bc:	ldr	x23, [sp, #48]
    14c0:	ldp	x29, x30, [sp], #128
    14c4:	b	1170 <sh_chkwrite@plt>
    14c8:	ldr	q0, [sp, #64]
    14cc:	mov	x0, x22
    14d0:	bl	11c0 <printf@plt>
    14d4:	tbnz	w0, #31, 14b0 <print_fltseq+0xd8>
    14d8:	adrp	x0, 14000 <memcpy@GLIBC_2.17>
    14dc:	add	w20, w20, #0x1
    14e0:	ldr	x19, [x0, #480]
    14e4:	mov	w0, w20
    14e8:	bl	3100 <__floatsitf>
    14ec:	ldr	q1, [sp, #112]
    14f0:	bl	2a74 <__multf3>
    14f4:	ldr	q1, [sp, #80]
    14f8:	bl	1cd4 <__addtf3>
    14fc:	str	q0, [sp, #64]
    1500:	b	141c <print_fltseq+0x44>
    1504:	bl	27f4 <__getf2>
    1508:	mvn	w1, w0
    150c:	lsr	w1, w1, #31
    1510:	b	1440 <print_fltseq+0x68>

0000000000001514 <width_needed>:
    1514:	mov	x1, x0
    1518:	lsr	x0, x0, #63
    151c:	cmp	x1, #0x0
    1520:	mov	x2, #0xa                   	// #10
    1524:	cneg	x1, x1, lt  // lt = tstop
    1528:	udiv	x1, x1, x2
    152c:	add	w0, w0, #0x1
    1530:	cbnz	x1, 1528 <width_needed+0x14>
    1534:	ret

0000000000001538 <print_intseq>:
    1538:	stp	x29, x30, [sp, #-128]!
    153c:	mov	x29, sp
    1540:	stp	x19, x20, [sp, #16]
    1544:	mov	x19, x1
    1548:	stp	x23, x24, [sp, #48]
    154c:	adrp	x23, 14000 <memcpy@GLIBC_2.17>
    1550:	add	x1, x23, #0x1b8
    1554:	stp	x21, x22, [sp, #32]
    1558:	mov	x22, x0
    155c:	ldr	w1, [x1, #48]
    1560:	stp	x25, x26, [sp, #64]
    1564:	mov	x25, x2
    1568:	stp	x27, x28, [sp, #80]
    156c:	cbz	w1, 159c <print_intseq+0x64>
    1570:	bl	11a0 <width_needed@plt>
    1574:	mov	w20, w0
    1578:	mov	x0, x19
    157c:	bl	11a0 <width_needed@plt>
    1580:	cmp	w20, w0
    1584:	adrp	x2, 3000 <__multf3+0x58c>
    1588:	csel	w3, w20, w0, ge  // ge = tcont
    158c:	add	x2, x2, #0x316
    1590:	add	x0, sp, #0x68
    1594:	mov	x1, #0x14                  	// #20
    1598:	bl	1070 <snprintf@plt>
    159c:	adrp	x24, 13000 <__FRAME_END__+0xf514>
    15a0:	adrp	x26, 13000 <__FRAME_END__+0xf514>
    15a4:	adrp	x21, 3000 <__multf3+0x58c>
    15a8:	mov	x20, x22
    15ac:	ldr	x24, [x24, #4048]
    15b0:	add	x21, x21, #0x32c
    15b4:	ldr	x26, [x26, #4024]
    15b8:	add	x27, sp, #0x68
    15bc:	cmp	x22, x19
    15c0:	b.gt	166c <print_intseq+0x134>
    15c4:	cmp	x20, x19
    15c8:	cset	w0, le
    15cc:	cbnz	w0, 15f8 <print_intseq+0xc0>
    15d0:	adrp	x0, 13000 <__FRAME_END__+0xf514>
    15d4:	ldr	x0, [x0, #4016]
    15d8:	ldr	x1, [x0]
    15dc:	adrp	x0, 3000 <__multf3+0x58c>
    15e0:	add	x0, x0, #0x770
    15e4:	bl	1020 <fputs@plt>
    15e8:	cmn	w0, #0x1
    15ec:	b.eq	163c <print_intseq+0x104>  // b.none
    15f0:	mov	w0, #0x0                   	// #0
    15f4:	b	1640 <print_intseq+0x108>
    15f8:	ldr	w0, [x24]
    15fc:	cbz	w0, 1608 <print_intseq+0xd0>
    1600:	ldr	w0, [x24]
    1604:	bl	1190 <termsig_handler@plt>
    1608:	ldr	w0, [x26]
    160c:	cbz	w0, 1614 <print_intseq+0xdc>
    1610:	bl	11b0 <throw_to_top_level@plt>
    1614:	add	x28, x23, #0x1b8
    1618:	adrp	x0, 3000 <__multf3+0x58c>
    161c:	add	x0, x0, #0x310
    1620:	mov	x2, x20
    1624:	ldr	w1, [x28, #48]
    1628:	cmp	w1, #0x0
    162c:	mov	x1, x21
    1630:	csel	x0, x27, x0, ne  // ne = any
    1634:	bl	11c0 <printf@plt>
    1638:	tbz	w0, #31, 1660 <print_intseq+0x128>
    163c:	mov	w0, #0x1                   	// #1
    1640:	bl	1170 <sh_chkwrite@plt>
    1644:	ldp	x19, x20, [sp, #16]
    1648:	ldp	x21, x22, [sp, #32]
    164c:	ldp	x23, x24, [sp, #48]
    1650:	ldp	x25, x26, [sp, #64]
    1654:	ldp	x27, x28, [sp, #80]
    1658:	ldp	x29, x30, [sp], #128
    165c:	ret
    1660:	add	x20, x20, x25
    1664:	ldr	x21, [x28, #40]
    1668:	b	15bc <print_intseq+0x84>
    166c:	cmp	x20, x19
    1670:	cset	w0, ge  // ge = tcont
    1674:	b	15cc <print_intseq+0x94>

0000000000001678 <seq_builtin>:
    1678:	stp	x29, x30, [sp, #-128]!
    167c:	mov	x29, sp
    1680:	stp	x19, x20, [sp, #16]
    1684:	mov	x20, x0
    1688:	adrp	x19, 14000 <memcpy@GLIBC_2.17>
    168c:	adrp	x0, 3000 <__multf3+0x58c>
    1690:	add	x1, x19, #0x1b8
    1694:	add	x0, x0, #0x32b
    1698:	stp	x21, x22, [sp, #32]
    169c:	adrp	x21, 13000 <__FRAME_END__+0xf514>
    16a0:	stp	x23, x24, [sp, #48]
    16a4:	adrp	x23, 13000 <__FRAME_END__+0xf514>
    16a8:	adrp	x22, 3000 <__multf3+0x58c>
    16ac:	stp	x25, x26, [sp, #64]
    16b0:	add	x22, x22, #0x32d
    16b4:	mov	x25, #0x0                   	// #0
    16b8:	str	x0, [x1, #40]
    16bc:	str	wzr, [x1, #48]
    16c0:	bl	1140 <reset_internal_getopt@plt>
    16c4:	ldr	x21, [x21, #4008]
    16c8:	ldr	x24, [x23, #4040]
    16cc:	ldr	x0, [x21]
    16d0:	cbnz	x0, 16dc <seq_builtin+0x64>
    16d4:	cbz	x20, 1738 <seq_builtin+0xc0>
    16d8:	mov	x0, x20
    16dc:	ldr	x1, [x0, #8]
    16e0:	cbz	x1, 1738 <seq_builtin+0xc0>
    16e4:	ldr	x1, [x1]
    16e8:	cbz	x1, 1738 <seq_builtin+0xc0>
    16ec:	ldrb	w2, [x1]
    16f0:	cmp	w2, #0x2d
    16f4:	b.ne	1738 <seq_builtin+0xc0>  // b.any
    16f8:	ldrb	w2, [x1, #1]
    16fc:	sub	w1, w2, #0x30
    1700:	cmp	w2, #0x2e
    1704:	and	w1, w1, #0xff
    1708:	ccmp	w1, #0x9, #0x0, ne  // ne = any
    170c:	b.hi	1738 <seq_builtin+0xc0>  // b.pmore
    1710:	adrp	x1, 13000 <__FRAME_END__+0xf514>
    1714:	ldr	x1, [x1, #4056]
    1718:	str	x0, [x1]
    171c:	adrp	x0, 13000 <__FRAME_END__+0xf514>
    1720:	ldr	x0, [x0, #4056]
    1724:	ldr	x21, [x0]
    1728:	cbnz	x21, 1888 <seq_builtin+0x210>
    172c:	bl	10c0 <builtin_usage@plt>
    1730:	mov	w0, #0x1                   	// #1
    1734:	b	17ac <seq_builtin+0x134>
    1738:	mov	x1, x22
    173c:	mov	x0, x20
    1740:	bl	1130 <internal_getopt@plt>
    1744:	cmn	w0, #0x1
    1748:	b.eq	171c <seq_builtin+0xa4>  // b.none
    174c:	cmp	w0, #0x73
    1750:	b.eq	1794 <seq_builtin+0x11c>  // b.none
    1754:	b.gt	1770 <seq_builtin+0xf8>
    1758:	cmn	w0, #0x63
    175c:	b.eq	17a4 <seq_builtin+0x12c>  // b.none
    1760:	cmp	w0, #0x66
    1764:	b.eq	1788 <seq_builtin+0x110>  // b.none
    1768:	bl	10c0 <builtin_usage@plt>
    176c:	b	17a8 <seq_builtin+0x130>
    1770:	cmp	w0, #0x77
    1774:	b.ne	1768 <seq_builtin+0xf0>  // b.any
    1778:	add	x0, x19, #0x1b8
    177c:	mov	w1, #0x1                   	// #1
    1780:	str	w1, [x0, #48]
    1784:	b	16cc <seq_builtin+0x54>
    1788:	ldr	x0, [x23, #4040]
    178c:	ldr	x25, [x0]
    1790:	b	16cc <seq_builtin+0x54>
    1794:	add	x0, x19, #0x1b8
    1798:	ldr	x1, [x24]
    179c:	str	x1, [x0, #40]
    17a0:	b	16cc <seq_builtin+0x54>
    17a4:	bl	10a0 <builtin_help@plt>
    17a8:	mov	w0, #0x102                 	// #258
    17ac:	ldp	x19, x20, [sp, #16]
    17b0:	ldp	x21, x22, [sp, #32]
    17b4:	ldp	x23, x24, [sp, #48]
    17b8:	ldp	x25, x26, [sp, #64]
    17bc:	ldp	x29, x30, [sp], #128
    17c0:	ret
    17c4:	add	w20, w20, #0x1
    17c8:	mov	x0, x22
    17cc:	ldr	x22, [x0]
    17d0:	cbnz	x22, 17c4 <seq_builtin+0x14c>
    17d4:	cmp	w20, #0x3
    17d8:	b.gt	172c <seq_builtin+0xb4>
    17dc:	ldr	x0, [x0, #8]
    17e0:	str	wzr, [x19, #440]
    17e4:	ldr	x24, [x0]
    17e8:	mov	x0, x24
    17ec:	bl	12c4 <getfloatmax>
    17f0:	ldr	w26, [x19, #440]
    17f4:	str	q0, [sp, #96]
    17f8:	cbnz	w26, 1730 <seq_builtin+0xb8>
    17fc:	cmp	w20, #0x1
    1800:	b.eq	1894 <seq_builtin+0x21c>  // b.none
    1804:	ldr	x0, [x21, #8]
    1808:	ldr	x23, [x0]
    180c:	mov	x0, x23
    1810:	bl	12c4 <getfloatmax>
    1814:	ldr	w0, [x19, #440]
    1818:	str	q0, [sp, #80]
    181c:	cbnz	w0, 1730 <seq_builtin+0xb8>
    1820:	cmp	w20, #0x3
    1824:	b.ne	18a8 <seq_builtin+0x230>  // b.any
    1828:	ldr	x0, [x21]
    182c:	ldr	x0, [x0, #8]
    1830:	ldr	x22, [x0]
    1834:	mov	x0, x22
    1838:	bl	12c4 <getfloatmax>
    183c:	ldr	w0, [x19, #440]
    1840:	str	q0, [sp, #112]
    1844:	cbnz	w0, 1730 <seq_builtin+0xb8>
    1848:	movi	v1.2d, #0x0
    184c:	bl	26f4 <__eqtf2>
    1850:	cbnz	w0, 18e0 <seq_builtin+0x268>
    1854:	ldr	q1, [sp, #80]
    1858:	ldr	q0, [sp, #96]
    185c:	bl	27f4 <__getf2>
    1860:	cmp	w0, #0x0
    1864:	adrp	x1, 3000 <__multf3+0x58c>
    1868:	adrp	x2, 3000 <__multf3+0x58c>
    186c:	add	x1, x1, #0x324
    1870:	add	x2, x2, #0x321
    1874:	adrp	x0, 3000 <__multf3+0x58c>
    1878:	csel	x1, x2, x1, gt
    187c:	add	x0, x0, #0x333
    1880:	bl	1030 <builtin_error@plt>
    1884:	b	1730 <seq_builtin+0xb8>
    1888:	mov	x0, x21
    188c:	mov	w20, #0x1                   	// #1
    1890:	b	17cc <seq_builtin+0x154>
    1894:	adrp	x0, 3000 <__multf3+0x58c>
    1898:	add	x0, x0, #0x750
    189c:	mov	x23, #0x0                   	// #0
    18a0:	ldr	q0, [x0]
    18a4:	str	q0, [sp, #80]
    18a8:	ldr	q0, [sp, #80]
    18ac:	ldr	q1, [sp, #96]
    18b0:	bl	2934 <__letf2>
    18b4:	cmp	w0, #0x0
    18b8:	b.le	1990 <seq_builtin+0x318>
    18bc:	ldr	q0, [sp, #80]
    18c0:	ldr	q1, [sp, #96]
    18c4:	bl	2934 <__letf2>
    18c8:	tbnz	w0, #31, 1904 <seq_builtin+0x28c>
    18cc:	adrp	x0, 3000 <__multf3+0x58c>
    18d0:	add	x0, x0, #0x760
    18d4:	ldr	q0, [x0]
    18d8:	str	q0, [sp, #112]
    18dc:	b	192c <seq_builtin+0x2b4>
    18e0:	movi	v1.2d, #0x0
    18e4:	ldr	q0, [sp, #112]
    18e8:	bl	2934 <__letf2>
    18ec:	tbz	w0, #31, 1918 <seq_builtin+0x2a0>
    18f0:	ldr	q1, [sp, #80]
    18f4:	ldr	q0, [sp, #96]
    18f8:	bl	27f4 <__getf2>
    18fc:	cmp	w0, #0x0
    1900:	b.le	1918 <seq_builtin+0x2a0>
    1904:	adrp	x1, 3000 <__multf3+0x58c>
    1908:	add	x1, x1, #0x321
    190c:	adrp	x0, 3000 <__multf3+0x58c>
    1910:	add	x0, x0, #0x342
    1914:	b	1880 <seq_builtin+0x208>
    1918:	movi	v1.2d, #0x0
    191c:	ldr	q0, [sp, #112]
    1920:	bl	27f4 <__getf2>
    1924:	cmp	w0, #0x0
    1928:	b.gt	19a0 <seq_builtin+0x328>
    192c:	cbnz	x25, 1ac0 <seq_builtin+0x448>
    1930:	mov	x21, #0x0                   	// #0
    1934:	cbz	x24, 1b68 <seq_builtin+0x4f0>
    1938:	mov	x0, x24
    193c:	bl	1010 <all_digits@plt>
    1940:	cbz	w0, 1b68 <seq_builtin+0x4f0>
    1944:	cbnz	x23, 1b5c <seq_builtin+0x4e4>
    1948:	cbnz	x22, 1c94 <seq_builtin+0x61c>
    194c:	cbnz	x21, 1b68 <seq_builtin+0x4f0>
    1950:	ldr	q0, [sp, #112]
    1954:	bl	315c <__fixtfdi>
    1958:	mov	x20, x0
    195c:	ldr	q0, [sp, #96]
    1960:	bl	315c <__fixtfdi>
    1964:	mov	x19, x0
    1968:	ldr	q0, [sp, #80]
    196c:	bl	315c <__fixtfdi>
    1970:	mov	x2, x20
    1974:	mov	x1, x19
    1978:	ldp	x19, x20, [sp, #16]
    197c:	ldp	x21, x22, [sp, #32]
    1980:	ldp	x23, x24, [sp, #48]
    1984:	ldp	x25, x26, [sp, #64]
    1988:	ldp	x29, x30, [sp], #128
    198c:	b	1090 <print_intseq@plt>
    1990:	adrp	x0, 3000 <__multf3+0x58c>
    1994:	add	x0, x0, #0x750
    1998:	ldr	q0, [x0]
    199c:	str	q0, [sp, #112]
    19a0:	ldr	q1, [sp, #80]
    19a4:	ldr	q0, [sp, #96]
    19a8:	bl	2934 <__letf2>
    19ac:	tbz	w0, #31, 192c <seq_builtin+0x2b4>
    19b0:	ldr	q1, [sp, #80]
    19b4:	ldr	q0, [sp, #96]
    19b8:	bl	27f4 <__getf2>
    19bc:	cmp	w0, #0x0
    19c0:	b.gt	1904 <seq_builtin+0x28c>
    19c4:	adrp	x1, 3000 <__multf3+0x58c>
    19c8:	add	x1, x1, #0x324
    19cc:	b	190c <seq_builtin+0x294>
    19d0:	adrp	x0, 3000 <__multf3+0x58c>
    19d4:	mov	x1, x25
    19d8:	add	x0, x0, #0x356
    19dc:	b	1880 <seq_builtin+0x208>
    19e0:	mov	x0, #0x2                   	// #2
    19e4:	add	x1, x1, x0
    19e8:	ldrb	w0, [x25, x1]
    19ec:	cmp	w0, #0x25
    19f0:	b.ne	1cc8 <seq_builtin+0x650>  // b.any
    19f4:	add	x20, x1, #0x1
    19f8:	add	x0, x25, x20
    19fc:	ldrb	w2, [x25, x20]
    1a00:	cmp	w2, #0x25
    1a04:	b.eq	19e0 <seq_builtin+0x368>  // b.none
    1a08:	adrp	x1, 3000 <__multf3+0x58c>
    1a0c:	adrp	x21, 3000 <__multf3+0x58c>
    1a10:	add	x1, x1, #0x374
    1a14:	add	x21, x21, #0x37b
    1a18:	bl	1150 <strspn@plt>
    1a1c:	add	x20, x20, x0
    1a20:	add	x0, x25, x20
    1a24:	mov	x1, x21
    1a28:	bl	1150 <strspn@plt>
    1a2c:	add	x20, x20, x0
    1a30:	ldrb	w0, [x25, x20]
    1a34:	cmp	w0, #0x2e
    1a38:	b.ne	1a50 <seq_builtin+0x3d8>  // b.any
    1a3c:	add	x20, x20, #0x1
    1a40:	mov	x1, x21
    1a44:	add	x0, x25, x20
    1a48:	bl	1150 <strspn@plt>
    1a4c:	add	x20, x20, x0
    1a50:	ldrb	w0, [x25, x20]
    1a54:	cmp	w0, #0x4c
    1a58:	cinc	x0, x20, eq  // eq = none
    1a5c:	add	x26, x25, x0
    1a60:	ldrb	w2, [x25, x0]
    1a64:	cbz	w2, 1ac8 <seq_builtin+0x450>
    1a68:	sub	w1, w2, #0x41
    1a6c:	and	w1, w1, #0xff
    1a70:	cmp	w1, #0x26
    1a74:	b.hi	1ad8 <seq_builtin+0x460>  // b.pmore
    1a78:	mov	x3, #0x1                   	// #1
    1a7c:	lsl	x1, x3, x1
    1a80:	mov	x3, #0x71                  	// #113
    1a84:	movk	x3, #0x71, lsl #32
    1a88:	tst	x1, x3
    1a8c:	b.eq	1ad8 <seq_builtin+0x460>  // b.none
    1a90:	add	x0, x0, #0x1
    1a94:	ldrb	w1, [x25, x0]
    1a98:	cmp	w1, #0x25
    1a9c:	b.ne	1aec <seq_builtin+0x474>  // b.any
    1aa0:	add	x1, x25, x0
    1aa4:	ldrb	w1, [x1, #1]
    1aa8:	cmp	w1, #0x25
    1aac:	b.eq	1b34 <seq_builtin+0x4bc>  // b.none
    1ab0:	adrp	x0, 3000 <__multf3+0x58c>
    1ab4:	mov	x1, x25
    1ab8:	add	x0, x0, #0x3c2
    1abc:	b	1880 <seq_builtin+0x208>
    1ac0:	mov	x1, #0x0                   	// #0
    1ac4:	b	19e8 <seq_builtin+0x370>
    1ac8:	adrp	x0, 3000 <__multf3+0x58c>
    1acc:	mov	x1, x25
    1ad0:	add	x0, x0, #0x386
    1ad4:	b	1880 <seq_builtin+0x208>
    1ad8:	mov	x1, x25
    1adc:	adrp	x0, 3000 <__multf3+0x58c>
    1ae0:	add	x0, x0, #0x39b
    1ae4:	bl	1030 <builtin_error@plt>
    1ae8:	b	1730 <seq_builtin+0xb8>
    1aec:	cbnz	w1, 1b40 <seq_builtin+0x4c8>
    1af0:	add	x0, x0, #0x2
    1af4:	bl	10b0 <xmalloc@plt>
    1af8:	mov	x21, x0
    1afc:	mov	x2, x20
    1b00:	mov	x1, x25
    1b04:	bl	1000 <memcpy@plt>
    1b08:	mov	w0, #0x4c                  	// #76
    1b0c:	mov	x1, x26
    1b10:	strb	w0, [x21, x20]
    1b14:	add	x20, x20, #0x1
    1b18:	add	x0, x21, x20
    1b1c:	add	x20, x19, #0x1b8
    1b20:	bl	1180 <strcpy@plt>
    1b24:	ldr	w0, [x20, #48]
    1b28:	cbnz	w0, 1b48 <seq_builtin+0x4d0>
    1b2c:	mov	w26, #0x1                   	// #1
    1b30:	b	1934 <seq_builtin+0x2bc>
    1b34:	mov	x1, #0x2                   	// #2
    1b38:	add	x0, x0, x1
    1b3c:	b	1a94 <seq_builtin+0x41c>
    1b40:	mov	x1, #0x1                   	// #1
    1b44:	b	1b38 <seq_builtin+0x4c0>
    1b48:	adrp	x0, 3000 <__multf3+0x58c>
    1b4c:	add	x0, x0, #0x3e7
    1b50:	bl	1040 <builtin_warning@plt>
    1b54:	str	wzr, [x20, #48]
    1b58:	b	1b2c <seq_builtin+0x4b4>
    1b5c:	mov	x0, x23
    1b60:	bl	1010 <all_digits@plt>
    1b64:	cbnz	w0, 1948 <seq_builtin+0x2d0>
    1b68:	add	x19, x19, #0x1b8
    1b6c:	bl	1080 <locale_decpoint@plt>
    1b70:	strb	w0, [x19, #4]
    1b74:	cbnz	x21, 1c58 <seq_builtin+0x5e0>
    1b78:	ldr	w0, [x19, #48]
    1b7c:	adrp	x22, 3000 <__multf3+0x58c>
    1b80:	cbz	w0, 1cc0 <seq_builtin+0x648>
    1b84:	add	x22, x22, #0x327
    1b88:	ldr	q0, [sp, #112]
    1b8c:	mov	x2, x22
    1b90:	add	x21, x19, #0x5
    1b94:	mov	x1, #0x1c                  	// #28
    1b98:	mov	x0, x21
    1b9c:	bl	1070 <snprintf@plt>
    1ba0:	bl	1364 <getprec.constprop.0>
    1ba4:	mov	w20, w0
    1ba8:	ldr	q0, [sp, #80]
    1bac:	mov	x2, x22
    1bb0:	mov	x1, #0x1c                  	// #28
    1bb4:	mov	x0, x21
    1bb8:	bl	1070 <snprintf@plt>
    1bbc:	mov	w23, w0
    1bc0:	bl	1364 <getprec.constprop.0>
    1bc4:	cmp	w20, w0
    1bc8:	ldr	q0, [sp, #96]
    1bcc:	mov	x2, x22
    1bd0:	mov	x1, #0x1c                  	// #28
    1bd4:	csel	w20, w20, w0, ge  // ge = tcont
    1bd8:	mov	w19, w0
    1bdc:	mov	x0, x21
    1be0:	bl	1070 <snprintf@plt>
    1be4:	mov	w22, w0
    1be8:	bl	1364 <getprec.constprop.0>
    1bec:	cmp	w0, #0x0
    1bf0:	sub	w1, w20, w0
    1bf4:	ccmp	w20, #0x0, #0x0, ne  // ne = any
    1bf8:	mov	w3, w0
    1bfc:	add	w1, w1, w22
    1c00:	cset	w0, eq  // eq = none
    1c04:	cmp	w20, #0x0
    1c08:	sub	w1, w1, w0
    1c0c:	cset	w0, ne  // ne = any
    1c10:	cmp	w3, #0x0
    1c14:	sub	w2, w20, w19
    1c18:	ccmp	w0, #0x0, #0x4, eq  // eq = none
    1c1c:	add	w2, w2, w23
    1c20:	cinc	w1, w1, ne  // ne = any
    1c24:	cmp	w19, #0x0
    1c28:	ccmp	w0, #0x0, #0x4, eq  // eq = none
    1c2c:	adrp	x3, 3000 <__multf3+0x58c>
    1c30:	cinc	w2, w2, ne  // ne = any
    1c34:	cmp	w2, w1
    1c38:	csel	w2, w2, w1, ge  // ge = tcont
    1c3c:	cbz	w2, 1ca4 <seq_builtin+0x62c>
    1c40:	add	x4, x3, #0x416
    1c44:	adrp	x1, 3000 <__multf3+0x58c>
    1c48:	mov	w3, w20
    1c4c:	add	x1, x1, #0x418
    1c50:	mov	x0, x21
    1c54:	bl	1060 <sprintf@plt>
    1c58:	ldr	q0, [sp, #80]
    1c5c:	mov	x0, x21
    1c60:	ldr	q1, [sp, #96]
    1c64:	ldr	q2, [sp, #112]
    1c68:	bl	1110 <print_fltseq@plt>
    1c6c:	cbz	w26, 1c78 <seq_builtin+0x600>
    1c70:	mov	x0, x21
    1c74:	bl	1120 <free@plt>
    1c78:	ldp	x19, x20, [sp, #16]
    1c7c:	mov	w0, #0x0                   	// #0
    1c80:	ldp	x21, x22, [sp, #32]
    1c84:	ldp	x23, x24, [sp, #48]
    1c88:	ldp	x25, x26, [sp, #64]
    1c8c:	ldp	x29, x30, [sp], #128
    1c90:	b	1170 <sh_chkwrite@plt>
    1c94:	mov	x0, x22
    1c98:	bl	1010 <all_digits@plt>
    1c9c:	cbnz	w0, 194c <seq_builtin+0x2d4>
    1ca0:	b	1b68 <seq_builtin+0x4f0>
    1ca4:	add	x3, x3, #0x416
    1ca8:	mov	w2, w20
    1cac:	mov	x0, x21
    1cb0:	adrp	x1, 3000 <__multf3+0x58c>
    1cb4:	add	x1, x1, #0x424
    1cb8:	bl	1060 <sprintf@plt>
    1cbc:	b	1c58 <seq_builtin+0x5e0>
    1cc0:	add	x21, x22, #0x327
    1cc4:	b	1c58 <seq_builtin+0x5e0>
    1cc8:	cbz	w0, 19d0 <seq_builtin+0x358>
    1ccc:	mov	x0, #0x1                   	// #1
    1cd0:	b	19e4 <seq_builtin+0x36c>

0000000000001cd4 <__addtf3>:
    1cd4:	stp	x29, x30, [sp, #-32]!
    1cd8:	mov	x29, sp
    1cdc:	str	q0, [sp, #16]
    1ce0:	ldp	x9, x5, [sp, #16]
    1ce4:	str	q1, [sp, #16]
    1ce8:	ldp	x1, x2, [sp, #16]
    1cec:	mrs	x10, fpcr
    1cf0:	ubfx	x0, x5, #48, #15
    1cf4:	ubfx	x12, x2, #48, #15
    1cf8:	ubfiz	x3, x5, #3, #48
    1cfc:	lsr	x11, x2, #63
    1d00:	mov	x4, x0
    1d04:	ubfiz	x2, x2, #3, #48
    1d08:	sub	w0, w0, w12
    1d0c:	lsr	x8, x5, #63
    1d10:	mov	x14, x1
    1d14:	orr	x2, x2, x1, lsr #61
    1d18:	cmp	x11, x5, lsr #63
    1d1c:	orr	x3, x3, x9, lsr #61
    1d20:	lsl	x7, x9, #3
    1d24:	mov	x6, x12
    1d28:	lsl	x1, x1, #3
    1d2c:	mov	w5, w0
    1d30:	b.ne	2138 <__addtf3+0x464>  // b.any
    1d34:	cmp	w0, #0x0
    1d38:	b.le	1e78 <__addtf3+0x1a4>
    1d3c:	mov	x9, #0x7fff                	// #32767
    1d40:	cbnz	x12, 1de0 <__addtf3+0x10c>
    1d44:	orr	x5, x2, x1
    1d48:	cbnz	x5, 1d74 <__addtf3+0xa0>
    1d4c:	cmp	x4, x9
    1d50:	b.ne	2524 <__addtf3+0x850>  // b.any
    1d54:	orr	x1, x3, x7
    1d58:	cbz	x1, 25a8 <__addtf3+0x8d4>
    1d5c:	lsr	x0, x3, #50
    1d60:	mov	x2, x3
    1d64:	eor	x0, x0, #0x1
    1d68:	mov	x1, x7
    1d6c:	and	w0, w0, #0x1
    1d70:	b	1fbc <__addtf3+0x2e8>
    1d74:	subs	w5, w0, #0x1
    1d78:	b.ne	1db8 <__addtf3+0xe4>  // b.any
    1d7c:	adds	x1, x7, x1
    1d80:	mov	x7, x1
    1d84:	adc	x3, x3, x2
    1d88:	tbz	x3, #51, 2524 <__addtf3+0x850>
    1d8c:	add	x4, x4, #0x1
    1d90:	mov	x0, #0x7fff                	// #32767
    1d94:	cmp	x4, x0
    1d98:	b.eq	20fc <__addtf3+0x428>  // b.none
    1d9c:	and	x2, x3, #0xfff7ffffffffffff
    1da0:	and	x1, x7, #0x1
    1da4:	orr	x1, x1, x7, lsr #1
    1da8:	orr	x1, x1, x3, lsl #63
    1dac:	lsr	x2, x2, #1
    1db0:	mov	w0, #0x0                   	// #0
    1db4:	b	1eac <__addtf3+0x1d8>
    1db8:	cmp	x4, x9
    1dbc:	b.ne	1dec <__addtf3+0x118>  // b.any
    1dc0:	orr	x1, x3, x7
    1dc4:	cbz	x1, 25a8 <__addtf3+0x8d4>
    1dc8:	lsr	x0, x3, #50
    1dcc:	mov	x2, x3
    1dd0:	eor	x0, x0, #0x1
    1dd4:	mov	x1, x7
    1dd8:	and	w0, w0, #0x1
    1ddc:	b	1eac <__addtf3+0x1d8>
    1de0:	cmp	x4, x9
    1de4:	b.eq	1dc0 <__addtf3+0xec>  // b.none
    1de8:	orr	x2, x2, #0x8000000000000
    1dec:	cmp	w5, #0x74
    1df0:	b.gt	1e68 <__addtf3+0x194>
    1df4:	cmp	w5, #0x3f
    1df8:	b.gt	1e34 <__addtf3+0x160>
    1dfc:	mov	w6, #0x40                  	// #64
    1e00:	sub	w6, w6, w5
    1e04:	lsr	x9, x1, x5
    1e08:	lsl	x1, x1, x6
    1e0c:	cmp	x1, #0x0
    1e10:	lsl	x0, x2, x6
    1e14:	cset	x1, ne  // ne = any
    1e18:	orr	x0, x0, x9
    1e1c:	lsr	x2, x2, x5
    1e20:	orr	x0, x0, x1
    1e24:	adds	x1, x0, x7
    1e28:	mov	x7, x1
    1e2c:	adc	x3, x2, x3
    1e30:	b	1d88 <__addtf3+0xb4>
    1e34:	sub	w0, w5, #0x40
    1e38:	mov	w6, #0x80                  	// #128
    1e3c:	sub	w6, w6, w5
    1e40:	cmp	w5, #0x40
    1e44:	lsr	x0, x2, x0
    1e48:	lsl	x2, x2, x6
    1e4c:	csel	x2, x2, xzr, ne  // ne = any
    1e50:	orr	x1, x2, x1
    1e54:	cmp	x1, #0x0
    1e58:	cset	x1, ne  // ne = any
    1e5c:	orr	x0, x0, x1
    1e60:	mov	x2, #0x0                   	// #0
    1e64:	b	1e24 <__addtf3+0x150>
    1e68:	orr	x1, x2, x1
    1e6c:	cmp	x1, #0x0
    1e70:	cset	x0, ne  // ne = any
    1e74:	b	1e60 <__addtf3+0x18c>
    1e78:	b.eq	1f7c <__addtf3+0x2a8>  // b.none
    1e7c:	mov	x5, #0x7fff                	// #32767
    1e80:	cbnz	x4, 1f24 <__addtf3+0x250>
    1e84:	orr	x4, x3, x7
    1e88:	cbnz	x4, 1eb4 <__addtf3+0x1e0>
    1e8c:	cmp	x12, x5
    1e90:	b.ne	2534 <__addtf3+0x860>  // b.any
    1e94:	orr	x0, x2, x1
    1e98:	cbz	x0, 257c <__addtf3+0x8a8>
    1e9c:	lsr	x0, x2, #50
    1ea0:	mov	x4, x6
    1ea4:	eor	x0, x0, #0x1
    1ea8:	and	w0, w0, #0x1
    1eac:	mov	w5, #0x0                   	// #0
    1eb0:	b	1fbc <__addtf3+0x2e8>
    1eb4:	cmn	w0, #0x1
    1eb8:	b.ne	1ed0 <__addtf3+0x1fc>  // b.any
    1ebc:	adds	x1, x7, x1
    1ec0:	mov	x7, x1
    1ec4:	adc	x3, x3, x2
    1ec8:	mov	x4, x6
    1ecc:	b	1d88 <__addtf3+0xb4>
    1ed0:	cmp	x12, x5
    1ed4:	b.eq	1e94 <__addtf3+0x1c0>  // b.none
    1ed8:	mvn	w0, w0
    1edc:	cmp	w0, #0x74
    1ee0:	b.gt	1f6c <__addtf3+0x298>
    1ee4:	cmp	w0, #0x3f
    1ee8:	b.gt	1f38 <__addtf3+0x264>
    1eec:	mov	w5, #0x40                  	// #64
    1ef0:	sub	w5, w5, w0
    1ef4:	lsr	x9, x7, x0
    1ef8:	lsl	x7, x7, x5
    1efc:	cmp	x7, #0x0
    1f00:	cset	x7, ne  // ne = any
    1f04:	lsl	x4, x3, x5
    1f08:	orr	x4, x4, x9
    1f0c:	lsr	x0, x3, x0
    1f10:	orr	x7, x4, x7
    1f14:	adds	x1, x7, x1
    1f18:	mov	x7, x1
    1f1c:	adc	x3, x0, x2
    1f20:	b	1ec8 <__addtf3+0x1f4>
    1f24:	cmp	x12, x5
    1f28:	b.eq	1e94 <__addtf3+0x1c0>  // b.none
    1f2c:	neg	w0, w0
    1f30:	orr	x3, x3, #0x8000000000000
    1f34:	b	1edc <__addtf3+0x208>
    1f38:	sub	w4, w0, #0x40
    1f3c:	mov	w5, #0x80                  	// #128
    1f40:	sub	w5, w5, w0
    1f44:	cmp	w0, #0x40
    1f48:	lsr	x4, x3, x4
    1f4c:	lsl	x3, x3, x5
    1f50:	csel	x3, x3, xzr, ne  // ne = any
    1f54:	orr	x3, x3, x7
    1f58:	cmp	x3, #0x0
    1f5c:	cset	x7, ne  // ne = any
    1f60:	orr	x7, x4, x7
    1f64:	mov	x0, #0x0                   	// #0
    1f68:	b	1f14 <__addtf3+0x240>
    1f6c:	orr	x3, x3, x7
    1f70:	cmp	x3, #0x0
    1f74:	cset	x7, ne  // ne = any
    1f78:	b	1f64 <__addtf3+0x290>
    1f7c:	add	x0, x4, #0x1
    1f80:	mov	x13, #0x7fff                	// #32767
    1f84:	tst	x0, #0x7ffe
    1f88:	b.ne	2098 <__addtf3+0x3c4>  // b.any
    1f8c:	orr	x12, x3, x7
    1f90:	cbnz	x4, 1ffc <__addtf3+0x328>
    1f94:	cbz	x12, 2558 <__addtf3+0x884>
    1f98:	orr	x0, x2, x1
    1f9c:	cbz	x0, 2344 <__addtf3+0x670>
    1fa0:	adds	x1, x7, x1
    1fa4:	mov	x7, x1
    1fa8:	adc	x3, x3, x2
    1fac:	tbz	x3, #51, 2344 <__addtf3+0x670>
    1fb0:	and	x2, x3, #0xfff7ffffffffffff
    1fb4:	mov	w0, #0x0                   	// #0
    1fb8:	mov	x4, #0x1                   	// #1
    1fbc:	tst	x1, #0x7
    1fc0:	b.eq	25d8 <__addtf3+0x904>  // b.none
    1fc4:	and	x3, x10, #0xc00000
    1fc8:	orr	w0, w0, #0x10
    1fcc:	cmp	x3, #0x400, lsl #12
    1fd0:	b.eq	25c4 <__addtf3+0x8f0>  // b.none
    1fd4:	cmp	x3, #0x800, lsl #12
    1fd8:	b.eq	25d0 <__addtf3+0x8fc>  // b.none
    1fdc:	cbnz	x3, 1ff4 <__addtf3+0x320>
    1fe0:	and	x3, x1, #0xf
    1fe4:	cmp	x3, #0x4
    1fe8:	b.eq	1ff4 <__addtf3+0x320>  // b.none
    1fec:	adds	x1, x1, #0x4
    1ff0:	cinc	x2, x2, cs  // cs = hs, nlast
    1ff4:	cbz	w5, 25e8 <__addtf3+0x914>
    1ff8:	b	25e4 <__addtf3+0x910>
    1ffc:	cmp	x4, x13
    2000:	b.ne	2064 <__addtf3+0x390>  // b.any
    2004:	cbz	x12, 26c8 <__addtf3+0x9f4>
    2008:	lsr	x0, x3, #50
    200c:	cmp	x6, x4
    2010:	eor	x0, x0, #0x1
    2014:	and	w0, w0, #0x1
    2018:	b.ne	2084 <__addtf3+0x3b0>  // b.any
    201c:	orr	x4, x2, x1
    2020:	cbz	x4, 26c0 <__addtf3+0x9ec>
    2024:	tst	x2, #0x4000000000000
    2028:	csinc	w0, w0, wzr, ne  // ne = any
    202c:	cbz	x12, 207c <__addtf3+0x3a8>
    2030:	and	x9, x9, #0x1fffffffffffffff
    2034:	lsr	x1, x3, #3
    2038:	orr	x9, x9, x3, lsl #61
    203c:	tbz	x3, #50, 2058 <__addtf3+0x384>
    2040:	lsr	x3, x2, #3
    2044:	tbnz	x2, #50, 2058 <__addtf3+0x384>
    2048:	and	x1, x14, #0x1fffffffffffffff
    204c:	mov	x8, x11
    2050:	orr	x9, x1, x2, lsl #61
    2054:	mov	x1, x3
    2058:	extr	x2, x1, x9, #61
    205c:	lsl	x1, x9, #3
    2060:	b	207c <__addtf3+0x3a8>
    2064:	cmp	x6, x13
    2068:	b.ne	2074 <__addtf3+0x3a0>  // b.any
    206c:	mov	w0, #0x0                   	// #0
    2070:	b	201c <__addtf3+0x348>
    2074:	mov	w0, #0x0                   	// #0
    2078:	cbnz	x12, 2084 <__addtf3+0x3b0>
    207c:	mov	x4, #0x7fff                	// #32767
    2080:	b	1fbc <__addtf3+0x2e8>
    2084:	orr	x1, x2, x1
    2088:	cbnz	x1, 2030 <__addtf3+0x35c>
    208c:	mov	x2, x3
    2090:	mov	x1, x7
    2094:	b	207c <__addtf3+0x3a8>
    2098:	cmp	x0, x13
    209c:	b.eq	20bc <__addtf3+0x3e8>  // b.none
    20a0:	adds	x1, x7, x1
    20a4:	mov	x4, x0
    20a8:	adc	x2, x3, x2
    20ac:	extr	x1, x2, x1, #1
    20b0:	lsr	x2, x2, #1
    20b4:	mov	w0, #0x0                   	// #0
    20b8:	b	1fbc <__addtf3+0x2e8>
    20bc:	ands	x1, x10, #0xc00000
    20c0:	b.eq	258c <__addtf3+0x8b8>  // b.none
    20c4:	cmp	x1, #0x400, lsl #12
    20c8:	b.ne	20e0 <__addtf3+0x40c>  // b.any
    20cc:	cbnz	x8, 20ec <__addtf3+0x418>
    20d0:	mov	x4, x0
    20d4:	mov	x2, #0x0                   	// #0
    20d8:	mov	x1, #0x0                   	// #0
    20dc:	b	2594 <__addtf3+0x8c0>
    20e0:	cmp	x1, #0x800, lsl #12
    20e4:	b.ne	20ec <__addtf3+0x418>  // b.any
    20e8:	cbnz	x8, 20d0 <__addtf3+0x3fc>
    20ec:	mov	x2, #0xffffffffffffffff    	// #-1
    20f0:	mov	x4, #0x7ffe                	// #32766
    20f4:	mov	x1, x2
    20f8:	b	2594 <__addtf3+0x8c0>
    20fc:	ands	x1, x10, #0xc00000
    2100:	b.eq	259c <__addtf3+0x8c8>  // b.none
    2104:	cmp	x1, #0x400, lsl #12
    2108:	b.ne	211c <__addtf3+0x448>  // b.any
    210c:	cbnz	x8, 2128 <__addtf3+0x454>
    2110:	mov	x2, #0x0                   	// #0
    2114:	mov	x1, #0x0                   	// #0
    2118:	b	25a0 <__addtf3+0x8cc>
    211c:	cmp	x1, #0x800, lsl #12
    2120:	b.ne	2128 <__addtf3+0x454>  // b.any
    2124:	cbnz	x8, 2110 <__addtf3+0x43c>
    2128:	mov	x2, #0xffffffffffffffff    	// #-1
    212c:	mov	x4, #0x7ffe                	// #32766
    2130:	mov	x1, x2
    2134:	b	25a0 <__addtf3+0x8cc>
    2138:	cmp	w0, #0x0
    213c:	b.le	2210 <__addtf3+0x53c>
    2140:	mov	x9, #0x7fff                	// #32767
    2144:	cbnz	x12, 21bc <__addtf3+0x4e8>
    2148:	orr	x5, x2, x1
    214c:	cbz	x5, 1d4c <__addtf3+0x78>
    2150:	subs	w5, w0, #0x1
    2154:	b.ne	2170 <__addtf3+0x49c>  // b.any
    2158:	subs	x7, x7, x1
    215c:	sbc	x3, x3, x2
    2160:	tbz	x3, #51, 2524 <__addtf3+0x850>
    2164:	and	x5, x3, #0x7ffffffffffff
    2168:	mov	x6, x7
    216c:	b	2454 <__addtf3+0x780>
    2170:	cmp	x4, x9
    2174:	b.eq	1dc0 <__addtf3+0xec>  // b.none
    2178:	cmp	w5, #0x74
    217c:	b.gt	2200 <__addtf3+0x52c>
    2180:	cmp	w5, #0x3f
    2184:	b.gt	21cc <__addtf3+0x4f8>
    2188:	mov	w6, #0x40                  	// #64
    218c:	sub	w6, w6, w5
    2190:	lsr	x9, x1, x5
    2194:	lsl	x1, x1, x6
    2198:	cmp	x1, #0x0
    219c:	lsl	x0, x2, x6
    21a0:	cset	x1, ne  // ne = any
    21a4:	orr	x0, x0, x9
    21a8:	lsr	x2, x2, x5
    21ac:	orr	x0, x0, x1
    21b0:	subs	x7, x7, x0
    21b4:	sbc	x3, x3, x2
    21b8:	b	2160 <__addtf3+0x48c>
    21bc:	cmp	x4, x9
    21c0:	b.eq	1dc0 <__addtf3+0xec>  // b.none
    21c4:	orr	x2, x2, #0x8000000000000
    21c8:	b	2178 <__addtf3+0x4a4>
    21cc:	sub	w0, w5, #0x40
    21d0:	mov	w6, #0x80                  	// #128
    21d4:	sub	w6, w6, w5
    21d8:	cmp	w5, #0x40
    21dc:	lsr	x0, x2, x0
    21e0:	lsl	x2, x2, x6
    21e4:	csel	x2, x2, xzr, ne  // ne = any
    21e8:	orr	x1, x2, x1
    21ec:	cmp	x1, #0x0
    21f0:	cset	x1, ne  // ne = any
    21f4:	orr	x0, x0, x1
    21f8:	mov	x2, #0x0                   	// #0
    21fc:	b	21b0 <__addtf3+0x4dc>
    2200:	orr	x1, x2, x1
    2204:	cmp	x1, #0x0
    2208:	cset	x0, ne  // ne = any
    220c:	b	21f8 <__addtf3+0x524>
    2210:	b.eq	2310 <__addtf3+0x63c>  // b.none
    2214:	mov	x5, #0x7fff                	// #32767
    2218:	cbnz	x4, 22b8 <__addtf3+0x5e4>
    221c:	orr	x4, x3, x7
    2220:	cbnz	x4, 224c <__addtf3+0x578>
    2224:	cmp	x12, x5
    2228:	b.ne	2544 <__addtf3+0x870>  // b.any
    222c:	orr	x0, x2, x1
    2230:	cbz	x0, 25b0 <__addtf3+0x8dc>
    2234:	lsr	x0, x2, #50
    2238:	mov	x4, x6
    223c:	eor	x0, x0, #0x1
    2240:	mov	x8, x11
    2244:	and	w0, w0, #0x1
    2248:	b	1eac <__addtf3+0x1d8>
    224c:	cmn	w0, #0x1
    2250:	b.ne	2268 <__addtf3+0x594>  // b.any
    2254:	subs	x7, x1, x7
    2258:	sbc	x3, x2, x3
    225c:	mov	x4, x6
    2260:	mov	x8, x11
    2264:	b	2160 <__addtf3+0x48c>
    2268:	cmp	x12, x5
    226c:	b.eq	222c <__addtf3+0x558>  // b.none
    2270:	mvn	w0, w0
    2274:	cmp	w0, #0x74
    2278:	b.gt	2300 <__addtf3+0x62c>
    227c:	cmp	w0, #0x3f
    2280:	b.gt	22cc <__addtf3+0x5f8>
    2284:	mov	w5, #0x40                  	// #64
    2288:	sub	w5, w5, w0
    228c:	lsr	x8, x7, x0
    2290:	lsl	x7, x7, x5
    2294:	cmp	x7, #0x0
    2298:	lsl	x4, x3, x5
    229c:	cset	x5, ne  // ne = any
    22a0:	orr	x4, x4, x8
    22a4:	lsr	x0, x3, x0
    22a8:	orr	x4, x4, x5
    22ac:	subs	x7, x1, x4
    22b0:	sbc	x3, x2, x0
    22b4:	b	225c <__addtf3+0x588>
    22b8:	cmp	x12, x5
    22bc:	b.eq	222c <__addtf3+0x558>  // b.none
    22c0:	neg	w0, w0
    22c4:	orr	x3, x3, #0x8000000000000
    22c8:	b	2274 <__addtf3+0x5a0>
    22cc:	sub	w4, w0, #0x40
    22d0:	mov	w5, #0x80                  	// #128
    22d4:	sub	w5, w5, w0
    22d8:	cmp	w0, #0x40
    22dc:	lsr	x4, x3, x4
    22e0:	lsl	x3, x3, x5
    22e4:	csel	x3, x3, xzr, ne  // ne = any
    22e8:	orr	x3, x3, x7
    22ec:	cmp	x3, #0x0
    22f0:	cset	x0, ne  // ne = any
    22f4:	orr	x4, x4, x0
    22f8:	mov	x0, #0x0                   	// #0
    22fc:	b	22ac <__addtf3+0x5d8>
    2300:	orr	x3, x3, x7
    2304:	cmp	x3, #0x0
    2308:	cset	x4, ne  // ne = any
    230c:	b	22f8 <__addtf3+0x624>
    2310:	add	x0, x4, #0x1
    2314:	tst	x0, #0x7ffe
    2318:	b.ne	2434 <__addtf3+0x760>  // b.any
    231c:	orr	x12, x3, x7
    2320:	orr	x13, x2, x1
    2324:	cbnz	x4, 23a0 <__addtf3+0x6cc>
    2328:	cbnz	x12, 2360 <__addtf3+0x68c>
    232c:	cbnz	x13, 2564 <__addtf3+0x890>
    2330:	and	x0, x10, #0xc00000
    2334:	mov	x3, #0x0                   	// #0
    2338:	cmp	x0, #0x800, lsl #12
    233c:	mov	x7, #0x0                   	// #0
    2340:	cset	x8, eq  // eq = none
    2344:	orr	x0, x7, x3
    2348:	mov	x2, x3
    234c:	cmp	x0, #0x0
    2350:	mov	x1, x7
    2354:	cset	w5, ne  // ne = any
    2358:	mov	x4, #0x0                   	// #0
    235c:	b	20b4 <__addtf3+0x3e0>
    2360:	cbz	x13, 2344 <__addtf3+0x670>
    2364:	subs	x4, x7, x1
    2368:	cmp	x7, x1
    236c:	sbc	x0, x3, x2
    2370:	tbz	x0, #51, 2384 <__addtf3+0x6b0>
    2374:	subs	x7, x1, x7
    2378:	sbc	x3, x2, x3
    237c:	mov	x8, x11
    2380:	b	2344 <__addtf3+0x670>
    2384:	orr	x7, x4, x0
    2388:	cbnz	x7, 2570 <__addtf3+0x89c>
    238c:	and	x0, x10, #0xc00000
    2390:	cmp	x0, #0x800, lsl #12
    2394:	cset	x8, eq  // eq = none
    2398:	mov	x3, #0x0                   	// #0
    239c:	b	2344 <__addtf3+0x670>
    23a0:	mov	x0, #0x7fff                	// #32767
    23a4:	cmp	x4, x0
    23a8:	b.ne	2408 <__addtf3+0x734>  // b.any
    23ac:	cbz	x12, 26b0 <__addtf3+0x9dc>
    23b0:	lsr	x0, x3, #50
    23b4:	cmp	x6, x4
    23b8:	eor	x0, x0, #0x1
    23bc:	and	w0, w0, #0x1
    23c0:	b.ne	242c <__addtf3+0x758>  // b.any
    23c4:	cbz	x13, 26d8 <__addtf3+0xa04>
    23c8:	tst	x2, #0x4000000000000
    23cc:	csinc	w0, w0, wzr, ne  // ne = any
    23d0:	cbz	x12, 2420 <__addtf3+0x74c>
    23d4:	and	x9, x9, #0x1fffffffffffffff
    23d8:	lsr	x4, x3, #3
    23dc:	orr	x1, x9, x3, lsl #61
    23e0:	tbz	x3, #50, 23fc <__addtf3+0x728>
    23e4:	lsr	x3, x2, #3
    23e8:	tbnz	x2, #50, 23fc <__addtf3+0x728>
    23ec:	and	x1, x14, #0x1fffffffffffffff
    23f0:	mov	x4, x3
    23f4:	orr	x1, x1, x2, lsl #61
    23f8:	mov	x8, x11
    23fc:	extr	x2, x4, x1, #61
    2400:	lsl	x1, x1, #3
    2404:	b	207c <__addtf3+0x3a8>
    2408:	cmp	x6, x0
    240c:	b.ne	2418 <__addtf3+0x744>  // b.any
    2410:	mov	w0, #0x0                   	// #0
    2414:	b	23c4 <__addtf3+0x6f0>
    2418:	mov	w0, #0x0                   	// #0
    241c:	cbnz	x12, 242c <__addtf3+0x758>
    2420:	cbz	x13, 26dc <__addtf3+0xa08>
    2424:	mov	x8, x11
    2428:	b	207c <__addtf3+0x3a8>
    242c:	cbnz	x13, 23d4 <__addtf3+0x700>
    2430:	b	208c <__addtf3+0x3b8>
    2434:	subs	x0, x7, x1
    2438:	cmp	x7, x1
    243c:	mov	x6, x0
    2440:	sbc	x5, x3, x2
    2444:	tbz	x5, #51, 24d0 <__addtf3+0x7fc>
    2448:	subs	x6, x1, x7
    244c:	mov	x8, x11
    2450:	sbc	x5, x2, x3
    2454:	clz	x0, x6
    2458:	cmp	x5, #0x0
    245c:	add	w0, w0, #0x40
    2460:	clz	x3, x5
    2464:	csel	w3, w0, w3, eq  // eq = none
    2468:	sub	w0, w3, #0xc
    246c:	cmp	w0, #0x3f
    2470:	b.gt	24dc <__addtf3+0x808>
    2474:	neg	w3, w0
    2478:	lsl	x5, x5, x0
    247c:	lsl	x7, x6, x0
    2480:	lsr	x3, x6, x3
    2484:	orr	x3, x3, x5
    2488:	sxtw	x1, w0
    248c:	cmp	x4, w0, sxtw
    2490:	b.gt	251c <__addtf3+0x848>
    2494:	sub	w4, w0, w4
    2498:	add	w2, w4, #0x1
    249c:	cmp	w2, #0x3f
    24a0:	b.gt	24ec <__addtf3+0x818>
    24a4:	mov	w1, #0x40                  	// #64
    24a8:	sub	w1, w1, w2
    24ac:	lsr	x4, x7, x2
    24b0:	lsl	x0, x3, x1
    24b4:	orr	x0, x0, x4
    24b8:	lsl	x1, x7, x1
    24bc:	cmp	x1, #0x0
    24c0:	cset	x1, ne  // ne = any
    24c4:	lsr	x3, x3, x2
    24c8:	orr	x7, x0, x1
    24cc:	b	2344 <__addtf3+0x670>
    24d0:	orr	x7, x0, x5
    24d4:	cbnz	x7, 2454 <__addtf3+0x780>
    24d8:	b	238c <__addtf3+0x6b8>
    24dc:	sub	w3, w3, #0x4c
    24e0:	mov	x7, #0x0                   	// #0
    24e4:	lsl	x3, x6, x3
    24e8:	b	2488 <__addtf3+0x7b4>
    24ec:	sub	w4, w4, #0x3f
    24f0:	mov	w0, #0x80                  	// #128
    24f4:	sub	w0, w0, w2
    24f8:	cmp	w2, #0x40
    24fc:	lsr	x4, x3, x4
    2500:	lsl	x3, x3, x0
    2504:	csel	x3, x3, xzr, ne  // ne = any
    2508:	orr	x3, x7, x3
    250c:	cmp	x3, #0x0
    2510:	cset	x3, ne  // ne = any
    2514:	orr	x7, x4, x3
    2518:	b	2398 <__addtf3+0x6c4>
    251c:	sub	x4, x4, x1
    2520:	and	x3, x3, #0xfff7ffffffffffff
    2524:	cbz	x4, 2344 <__addtf3+0x670>
    2528:	mov	x2, x3
    252c:	mov	x1, x7
    2530:	b	1db0 <__addtf3+0xdc>
    2534:	mov	x3, x2
    2538:	mov	x7, x1
    253c:	mov	x4, x12
    2540:	b	2524 <__addtf3+0x850>
    2544:	mov	x3, x2
    2548:	mov	x7, x1
    254c:	mov	x4, x12
    2550:	mov	x8, x11
    2554:	b	2524 <__addtf3+0x850>
    2558:	mov	x3, x2
    255c:	mov	x7, x1
    2560:	b	2344 <__addtf3+0x670>
    2564:	mov	x3, x2
    2568:	mov	x7, x1
    256c:	b	237c <__addtf3+0x6a8>
    2570:	mov	x3, x0
    2574:	mov	x7, x4
    2578:	b	2344 <__addtf3+0x670>
    257c:	mov	x4, x6
    2580:	mov	x2, #0x0                   	// #0
    2584:	mov	x1, #0x0                   	// #0
    2588:	b	1db0 <__addtf3+0xdc>
    258c:	mov	x4, x0
    2590:	mov	x2, #0x0                   	// #0
    2594:	mov	w0, #0x14                  	// #20
    2598:	b	1fbc <__addtf3+0x2e8>
    259c:	mov	x2, #0x0                   	// #0
    25a0:	mov	w0, #0x14                  	// #20
    25a4:	b	1eac <__addtf3+0x1d8>
    25a8:	mov	x2, #0x0                   	// #0
    25ac:	b	1db0 <__addtf3+0xdc>
    25b0:	mov	x4, x6
    25b4:	mov	x8, x11
    25b8:	mov	x2, #0x0                   	// #0
    25bc:	mov	x1, #0x0                   	// #0
    25c0:	b	1db0 <__addtf3+0xdc>
    25c4:	cbnz	x8, 1ff4 <__addtf3+0x320>
    25c8:	adds	x1, x1, #0x8
    25cc:	b	1ff0 <__addtf3+0x31c>
    25d0:	cbz	x8, 1ff4 <__addtf3+0x320>
    25d4:	b	25c8 <__addtf3+0x8f4>
    25d8:	cbz	w5, 25e8 <__addtf3+0x914>
    25dc:	tbnz	w0, #4, 25e4 <__addtf3+0x910>
    25e0:	tbz	w10, #11, 25e8 <__addtf3+0x914>
    25e4:	orr	w0, w0, #0x8
    25e8:	tbz	x2, #51, 2600 <__addtf3+0x92c>
    25ec:	add	x4, x4, #0x1
    25f0:	mov	x3, #0x7fff                	// #32767
    25f4:	cmp	x4, x3
    25f8:	b.eq	2658 <__addtf3+0x984>  // b.none
    25fc:	and	x2, x2, #0xfff7ffffffffffff
    2600:	mov	x3, #0x7fff                	// #32767
    2604:	extr	x1, x2, x1, #3
    2608:	cmp	x4, x3
    260c:	lsr	x2, x2, #3
    2610:	b.ne	2624 <__addtf3+0x950>  // b.any
    2614:	orr	x3, x1, x2
    2618:	orr	x2, x2, #0x800000000000
    261c:	cmp	x3, #0x0
    2620:	csel	x2, x2, xzr, ne  // ne = any
    2624:	and	x4, x4, #0x7fff
    2628:	mov	x7, #0x0                   	// #0
    262c:	bfxil	x7, x2, #0, #48
    2630:	orr	w8, w4, w8, lsl #15
    2634:	fmov	d0, x1
    2638:	bfi	x7, x8, #48, #16
    263c:	fmov	v0.d[1], x7
    2640:	cbz	w0, 2650 <__addtf3+0x97c>
    2644:	str	q0, [sp, #16]
    2648:	bl	327c <__sfp_handle_exceptions>
    264c:	ldr	q0, [sp, #16]
    2650:	ldp	x29, x30, [sp], #32
    2654:	ret
    2658:	ands	x1, x10, #0xc00000
    265c:	b.eq	2678 <__addtf3+0x9a4>  // b.none
    2660:	cmp	x1, #0x400, lsl #12
    2664:	b.ne	2688 <__addtf3+0x9b4>  // b.any
    2668:	cmp	x8, #0x0
    266c:	mov	x2, #0x7ffe                	// #32766
    2670:	csetm	x1, ne  // ne = any
    2674:	csel	x4, x4, x2, eq  // eq = none
    2678:	mov	w2, #0x14                  	// #20
    267c:	orr	w0, w0, w2
    2680:	mov	x2, x1
    2684:	b	2600 <__addtf3+0x92c>
    2688:	cmp	x1, #0x800, lsl #12
    268c:	b.ne	26a4 <__addtf3+0x9d0>  // b.any
    2690:	cmp	x8, #0x0
    2694:	mov	x2, #0x7ffe                	// #32766
    2698:	csetm	x1, eq  // eq = none
    269c:	csel	x4, x4, x2, ne  // ne = any
    26a0:	b	2678 <__addtf3+0x9a4>
    26a4:	mov	x1, #0xffffffffffffffff    	// #-1
    26a8:	mov	x4, #0x7ffe                	// #32766
    26ac:	b	2678 <__addtf3+0x9a4>
    26b0:	cmp	x6, x4
    26b4:	b.eq	2410 <__addtf3+0x73c>  // b.none
    26b8:	mov	w0, #0x0                   	// #0
    26bc:	b	2420 <__addtf3+0x74c>
    26c0:	cbz	x12, 207c <__addtf3+0x3a8>
    26c4:	b	208c <__addtf3+0x3b8>
    26c8:	cmp	x6, x4
    26cc:	b.eq	206c <__addtf3+0x398>  // b.none
    26d0:	mov	w0, #0x0                   	// #0
    26d4:	b	207c <__addtf3+0x3a8>
    26d8:	cbnz	x12, 208c <__addtf3+0x3b8>
    26dc:	mov	x8, #0x0                   	// #0
    26e0:	mov	x2, #0x7ffffffffffff       	// #2251799813685247
    26e4:	mov	x1, #0xfffffffffffffff8    	// #-8
    26e8:	mov	x4, #0x7fff                	// #32767
    26ec:	mov	w0, #0x1                   	// #1
    26f0:	b	1fbc <__addtf3+0x2e8>

00000000000026f4 <__eqtf2>:
    26f4:	stp	x29, x30, [sp, #-32]!
    26f8:	mov	x29, sp
    26fc:	str	q0, [sp, #16]
    2700:	ldp	x8, x0, [sp, #16]
    2704:	str	q1, [sp, #16]
    2708:	ldp	x9, x1, [sp, #16]
    270c:	mrs	x2, fpcr
    2710:	ubfx	x3, x0, #48, #15
    2714:	ubfx	x2, x0, #0, #48
    2718:	ubfx	x7, x1, #0, #48
    271c:	lsr	x0, x0, #63
    2720:	ubfx	x5, x1, #48, #15
    2724:	lsr	x1, x1, #63
    2728:	mov	x10, #0x7fff                	// #32767
    272c:	mov	x4, x8
    2730:	and	w0, w0, #0xff
    2734:	mov	x6, x9
    2738:	and	w1, w1, #0xff
    273c:	cmp	x3, x10
    2740:	b.ne	2758 <__eqtf2+0x64>  // b.any
    2744:	orr	x10, x2, x8
    2748:	cbnz	x10, 27c4 <__eqtf2+0xd0>
    274c:	cmp	x5, x3
    2750:	b.ne	27ec <__eqtf2+0xf8>  // b.any
    2754:	b	2760 <__eqtf2+0x6c>
    2758:	cmp	x5, x10
    275c:	b.ne	2768 <__eqtf2+0x74>  // b.any
    2760:	orr	x10, x7, x6
    2764:	cbnz	x10, 27b0 <__eqtf2+0xbc>
    2768:	cmp	x3, x5
    276c:	b.ne	27ec <__eqtf2+0xf8>  // b.any
    2770:	cmp	x2, x7
    2774:	ccmp	x8, x9, #0x0, eq  // eq = none
    2778:	b.ne	27ec <__eqtf2+0xf8>  // b.any
    277c:	cmp	w0, w1
    2780:	b.eq	27a8 <__eqtf2+0xb4>  // b.none
    2784:	cbnz	x3, 27ec <__eqtf2+0xf8>
    2788:	orr	x2, x2, x4
    278c:	cmp	x2, #0x0
    2790:	cset	w0, ne  // ne = any
    2794:	ldp	x29, x30, [sp], #32
    2798:	ret
    279c:	mov	w0, #0x1                   	// #1
    27a0:	bl	327c <__sfp_handle_exceptions>
    27a4:	b	27ec <__eqtf2+0xf8>
    27a8:	mov	w0, #0x0                   	// #0
    27ac:	b	2794 <__eqtf2+0xa0>
    27b0:	mov	x0, #0x7fff                	// #32767
    27b4:	cmp	x3, x0
    27b8:	b.ne	27e4 <__eqtf2+0xf0>  // b.any
    27bc:	orr	x4, x2, x4
    27c0:	cbz	x4, 27e4 <__eqtf2+0xf0>
    27c4:	tst	x2, #0x800000000000
    27c8:	b.eq	279c <__eqtf2+0xa8>  // b.none
    27cc:	mov	x1, #0x7fff                	// #32767
    27d0:	mov	w0, #0x1                   	// #1
    27d4:	cmp	x5, x1
    27d8:	b.ne	2794 <__eqtf2+0xa0>  // b.any
    27dc:	orr	x6, x7, x6
    27e0:	cbz	x6, 2794 <__eqtf2+0xa0>
    27e4:	tst	x7, #0x800000000000
    27e8:	b.eq	279c <__eqtf2+0xa8>  // b.none
    27ec:	mov	w0, #0x1                   	// #1
    27f0:	b	2794 <__eqtf2+0xa0>

00000000000027f4 <__getf2>:
    27f4:	stp	x29, x30, [sp, #-32]!
    27f8:	mov	x29, sp
    27fc:	str	q0, [sp, #16]
    2800:	ldp	x8, x1, [sp, #16]
    2804:	str	q1, [sp, #16]
    2808:	ldp	x7, x0, [sp, #16]
    280c:	mrs	x2, fpcr
    2810:	ubfx	x10, x1, #48, #15
    2814:	lsr	x2, x0, #63
    2818:	ubfx	x4, x1, #0, #48
    281c:	lsr	x1, x1, #63
    2820:	ubfx	x3, x0, #0, #48
    2824:	ubfx	x9, x0, #48, #15
    2828:	mov	x5, x8
    282c:	mov	x0, #0x7fff                	// #32767
    2830:	and	w1, w1, #0xff
    2834:	mov	x6, x7
    2838:	and	w2, w2, #0xff
    283c:	cmp	x10, x0
    2840:	b.ne	284c <__getf2+0x58>  // b.any
    2844:	orr	x11, x4, x8
    2848:	cbnz	x11, 291c <__getf2+0x128>
    284c:	cmp	x9, x0
    2850:	b.ne	285c <__getf2+0x68>  // b.any
    2854:	orr	x0, x3, x6
    2858:	cbnz	x0, 291c <__getf2+0x128>
    285c:	cbnz	x10, 289c <__getf2+0xa8>
    2860:	orr	x5, x4, x5
    2864:	cmp	x5, #0x0
    2868:	cset	w5, eq  // eq = none
    286c:	cbnz	x9, 28a4 <__getf2+0xb0>
    2870:	orr	x6, x3, x6
    2874:	cmp	x6, #0x0
    2878:	cset	w0, eq  // eq = none
    287c:	csel	w6, w5, wzr, eq  // eq = none
    2880:	cbnz	w6, 292c <__getf2+0x138>
    2884:	and	x2, x2, #0xff
    2888:	cbz	w5, 28ac <__getf2+0xb8>
    288c:	cmp	x2, #0x0
    2890:	csinv	w0, w5, wzr, ne  // ne = any
    2894:	ldp	x29, x30, [sp], #32
    2898:	ret
    289c:	mov	w5, #0x0                   	// #0
    28a0:	b	286c <__getf2+0x78>
    28a4:	mov	w0, #0x0                   	// #0
    28a8:	b	2884 <__getf2+0x90>
    28ac:	and	x1, x1, #0xff
    28b0:	cbz	w0, 28c0 <__getf2+0xcc>
    28b4:	cmp	x1, #0x0
    28b8:	csinv	w0, w0, wzr, eq  // eq = none
    28bc:	b	2894 <__getf2+0xa0>
    28c0:	cmp	x1, x2
    28c4:	b.eq	28d8 <__getf2+0xe4>  // b.none
    28c8:	mov	w0, #0xffffffff            	// #-1
    28cc:	cmp	x1, #0x0
    28d0:	cneg	w0, w0, eq  // eq = none
    28d4:	b	2894 <__getf2+0xa0>
    28d8:	cmp	x10, x9
    28dc:	b.gt	28c8 <__getf2+0xd4>
    28e0:	b.ge	28ec <__getf2+0xf8>  // b.tcont
    28e4:	mov	w0, #0x1                   	// #1
    28e8:	b	28cc <__getf2+0xd8>
    28ec:	cmp	x4, x3
    28f0:	b.hi	28c8 <__getf2+0xd4>  // b.pmore
    28f4:	cset	w2, eq  // eq = none
    28f8:	cmp	w2, #0x0
    28fc:	ccmp	x8, x7, #0x0, ne  // ne = any
    2900:	b.hi	28c8 <__getf2+0xd4>  // b.pmore
    2904:	cmp	x4, x3
    2908:	b.cc	28e4 <__getf2+0xf0>  // b.lo, b.ul, b.last
    290c:	cmp	w2, #0x0
    2910:	ccmp	x8, x7, #0x2, ne  // ne = any
    2914:	b.cs	2894 <__getf2+0xa0>  // b.hs, b.nlast
    2918:	b	28e4 <__getf2+0xf0>
    291c:	mov	w0, #0x1                   	// #1
    2920:	bl	327c <__sfp_handle_exceptions>
    2924:	mov	w0, #0xfffffffe            	// #-2
    2928:	b	2894 <__getf2+0xa0>
    292c:	mov	w0, #0x0                   	// #0
    2930:	b	2894 <__getf2+0xa0>

0000000000002934 <__letf2>:
    2934:	stp	x29, x30, [sp, #-32]!
    2938:	mov	x29, sp
    293c:	str	q0, [sp, #16]
    2940:	ldp	x8, x1, [sp, #16]
    2944:	str	q1, [sp, #16]
    2948:	ldp	x7, x0, [sp, #16]
    294c:	mrs	x2, fpcr
    2950:	ubfx	x10, x1, #48, #15
    2954:	lsr	x2, x0, #63
    2958:	ubfx	x4, x1, #0, #48
    295c:	lsr	x1, x1, #63
    2960:	ubfx	x3, x0, #0, #48
    2964:	ubfx	x9, x0, #48, #15
    2968:	mov	x5, x8
    296c:	mov	x0, #0x7fff                	// #32767
    2970:	and	w1, w1, #0xff
    2974:	mov	x6, x7
    2978:	and	w2, w2, #0xff
    297c:	cmp	x10, x0
    2980:	b.ne	298c <__letf2+0x58>  // b.any
    2984:	orr	x11, x4, x8
    2988:	cbnz	x11, 2a5c <__letf2+0x128>
    298c:	cmp	x9, x0
    2990:	b.ne	299c <__letf2+0x68>  // b.any
    2994:	orr	x0, x3, x6
    2998:	cbnz	x0, 2a5c <__letf2+0x128>
    299c:	cbnz	x10, 29dc <__letf2+0xa8>
    29a0:	orr	x5, x4, x5
    29a4:	cmp	x5, #0x0
    29a8:	cset	w5, eq  // eq = none
    29ac:	cbnz	x9, 29e4 <__letf2+0xb0>
    29b0:	orr	x6, x3, x6
    29b4:	cmp	x6, #0x0
    29b8:	cset	w0, eq  // eq = none
    29bc:	csel	w6, w5, wzr, eq  // eq = none
    29c0:	cbnz	w6, 2a6c <__letf2+0x138>
    29c4:	and	x2, x2, #0xff
    29c8:	cbz	w5, 29ec <__letf2+0xb8>
    29cc:	cmp	x2, #0x0
    29d0:	csinv	w0, w5, wzr, ne  // ne = any
    29d4:	ldp	x29, x30, [sp], #32
    29d8:	ret
    29dc:	mov	w5, #0x0                   	// #0
    29e0:	b	29ac <__letf2+0x78>
    29e4:	mov	w0, #0x0                   	// #0
    29e8:	b	29c4 <__letf2+0x90>
    29ec:	and	x1, x1, #0xff
    29f0:	cbz	w0, 2a00 <__letf2+0xcc>
    29f4:	cmp	x1, #0x0
    29f8:	csinv	w0, w0, wzr, eq  // eq = none
    29fc:	b	29d4 <__letf2+0xa0>
    2a00:	cmp	x1, x2
    2a04:	b.eq	2a18 <__letf2+0xe4>  // b.none
    2a08:	mov	w0, #0xffffffff            	// #-1
    2a0c:	cmp	x1, #0x0
    2a10:	cneg	w0, w0, eq  // eq = none
    2a14:	b	29d4 <__letf2+0xa0>
    2a18:	cmp	x10, x9
    2a1c:	b.gt	2a08 <__letf2+0xd4>
    2a20:	b.ge	2a2c <__letf2+0xf8>  // b.tcont
    2a24:	mov	w0, #0x1                   	// #1
    2a28:	b	2a0c <__letf2+0xd8>
    2a2c:	cmp	x4, x3
    2a30:	b.hi	2a08 <__letf2+0xd4>  // b.pmore
    2a34:	cset	w2, eq  // eq = none
    2a38:	cmp	w2, #0x0
    2a3c:	ccmp	x8, x7, #0x0, ne  // ne = any
    2a40:	b.hi	2a08 <__letf2+0xd4>  // b.pmore
    2a44:	cmp	x4, x3
    2a48:	b.cc	2a24 <__letf2+0xf0>  // b.lo, b.ul, b.last
    2a4c:	cmp	w2, #0x0
    2a50:	ccmp	x8, x7, #0x2, ne  // ne = any
    2a54:	b.cs	29d4 <__letf2+0xa0>  // b.hs, b.nlast
    2a58:	b	2a24 <__letf2+0xf0>
    2a5c:	mov	w0, #0x1                   	// #1
    2a60:	bl	327c <__sfp_handle_exceptions>
    2a64:	mov	w0, #0x2                   	// #2
    2a68:	b	29d4 <__letf2+0xa0>
    2a6c:	mov	w0, #0x0                   	// #0
    2a70:	b	29d4 <__letf2+0xa0>

0000000000002a74 <__multf3>:
    2a74:	stp	x29, x30, [sp, #-32]!
    2a78:	mov	x29, sp
    2a7c:	str	q0, [sp, #16]
    2a80:	ldp	x8, x4, [sp, #16]
    2a84:	str	q1, [sp, #16]
    2a88:	ldp	x1, x9, [sp, #16]
    2a8c:	mrs	x6, fpcr
    2a90:	ubfx	x11, x4, #0, #48
    2a94:	ubfx	x10, x4, #48, #15
    2a98:	lsr	x4, x4, #63
    2a9c:	and	w5, w4, #0xff
    2aa0:	cbz	w10, 2ad4 <__multf3+0x60>
    2aa4:	mov	w2, #0x7fff                	// #32767
    2aa8:	cmp	w10, w2
    2aac:	b.eq	2b34 <__multf3+0xc0>  // b.none
    2ab0:	and	x10, x10, #0xffff
    2ab4:	extr	x11, x11, x8, #61
    2ab8:	mov	x12, #0xffffffffffffc001    	// #-16383
    2abc:	orr	x11, x11, #0x8000000000000
    2ac0:	lsl	x2, x8, #3
    2ac4:	add	x10, x10, x12
    2ac8:	mov	x15, #0x0                   	// #0
    2acc:	mov	w0, #0x0                   	// #0
    2ad0:	b	2b54 <__multf3+0xe0>
    2ad4:	orr	x2, x11, x8
    2ad8:	cbz	x2, 2bd4 <__multf3+0x160>
    2adc:	clz	x2, x8
    2ae0:	cmp	x11, #0x0
    2ae4:	clz	x0, x11
    2ae8:	add	x2, x2, #0x40
    2aec:	csel	x0, x2, x0, eq  // eq = none
    2af0:	sub	x7, x0, #0xf
    2af4:	cmp	x7, #0x3c
    2af8:	b.gt	2b24 <__multf3+0xb0>
    2afc:	add	w2, w7, #0x3
    2b00:	mov	w10, #0x3d                  	// #61
    2b04:	sub	w7, w10, w7
    2b08:	lsl	x11, x11, x2
    2b0c:	lsr	x7, x8, x7
    2b10:	orr	x11, x7, x11
    2b14:	lsl	x2, x8, x2
    2b18:	mov	x10, #0xffffffffffffc011    	// #-16367
    2b1c:	sub	x10, x10, x0
    2b20:	b	2ac8 <__multf3+0x54>
    2b24:	sub	w11, w7, #0x3d
    2b28:	mov	x2, #0x0                   	// #0
    2b2c:	lsl	x11, x8, x11
    2b30:	b	2b18 <__multf3+0xa4>
    2b34:	orr	x2, x11, x8
    2b38:	cbz	x2, 2be4 <__multf3+0x170>
    2b3c:	lsr	x0, x11, #47
    2b40:	mov	x2, x8
    2b44:	eor	x0, x0, #0x1
    2b48:	mov	x10, #0x7fff                	// #32767
    2b4c:	and	w0, w0, #0x1
    2b50:	mov	x15, #0x3                   	// #3
    2b54:	lsr	x8, x9, #63
    2b58:	ubfx	x12, x9, #0, #48
    2b5c:	ubfx	x7, x9, #48, #15
    2b60:	and	w3, w8, #0xff
    2b64:	mov	x16, x8
    2b68:	cbz	w7, 2bf4 <__multf3+0x180>
    2b6c:	mov	w8, #0x7fff                	// #32767
    2b70:	cmp	w7, w8
    2b74:	b.eq	2c54 <__multf3+0x1e0>  // b.none
    2b78:	and	x7, x7, #0xffff
    2b7c:	extr	x12, x12, x1, #61
    2b80:	mov	x8, #0xffffffffffffc001    	// #-16383
    2b84:	orr	x12, x12, #0x8000000000000
    2b88:	lsl	x1, x1, #3
    2b8c:	add	x7, x7, x8
    2b90:	mov	x8, #0x0                   	// #0
    2b94:	eor	w5, w5, w3
    2b98:	orr	x3, x8, x15, lsl #2
    2b9c:	add	x10, x7, x10
    2ba0:	sub	x3, x3, #0x1
    2ba4:	and	x5, x5, #0xff
    2ba8:	add	x9, x10, #0x1
    2bac:	cmp	x3, #0xe
    2bb0:	b.hi	2cc8 <__multf3+0x254>  // b.pmore
    2bb4:	cmp	w3, #0xe
    2bb8:	b.hi	2cc8 <__multf3+0x254>  // b.pmore
    2bbc:	adrp	x7, 3000 <__multf3+0x58c>
    2bc0:	add	x7, x7, #0x774
    2bc4:	ldrh	w3, [x7, w3, uxtw #1]
    2bc8:	adr	x7, 2bd4 <__multf3+0x160>
    2bcc:	add	x3, x7, w3, sxth #2
    2bd0:	br	x3
    2bd4:	mov	x11, #0x0                   	// #0
    2bd8:	mov	x10, #0x0                   	// #0
    2bdc:	mov	x15, #0x1                   	// #1
    2be0:	b	2acc <__multf3+0x58>
    2be4:	mov	x11, #0x0                   	// #0
    2be8:	mov	x10, #0x7fff                	// #32767
    2bec:	mov	x15, #0x2                   	// #2
    2bf0:	b	2acc <__multf3+0x58>
    2bf4:	orr	x7, x12, x1
    2bf8:	cbz	x7, 2c70 <__multf3+0x1fc>
    2bfc:	clz	x13, x1
    2c00:	cmp	x12, #0x0
    2c04:	add	x13, x13, #0x40
    2c08:	clz	x7, x12
    2c0c:	csel	x9, x13, x7, eq  // eq = none
    2c10:	sub	x13, x9, #0xf
    2c14:	cmp	x13, #0x3c
    2c18:	b.gt	2c44 <__multf3+0x1d0>
    2c1c:	add	w7, w13, #0x3
    2c20:	mov	w14, #0x3d                  	// #61
    2c24:	sub	w13, w14, w13
    2c28:	lsl	x12, x12, x7
    2c2c:	lsr	x13, x1, x13
    2c30:	orr	x12, x13, x12
    2c34:	lsl	x1, x1, x7
    2c38:	mov	x7, #0xffffffffffffc011    	// #-16367
    2c3c:	sub	x7, x7, x9
    2c40:	b	2b90 <__multf3+0x11c>
    2c44:	sub	w12, w13, #0x3d
    2c48:	lsl	x12, x1, x12
    2c4c:	mov	x1, #0x0                   	// #0
    2c50:	b	2c38 <__multf3+0x1c4>
    2c54:	orr	x7, x12, x1
    2c58:	cbz	x7, 2c84 <__multf3+0x210>
    2c5c:	tst	x12, #0x800000000000
    2c60:	mov	x7, #0x7fff                	// #32767
    2c64:	csinc	w0, w0, wzr, ne  // ne = any
    2c68:	mov	x8, #0x3                   	// #3
    2c6c:	b	2b94 <__multf3+0x120>
    2c70:	mov	x12, #0x0                   	// #0
    2c74:	mov	x1, #0x0                   	// #0
    2c78:	mov	x7, #0x0                   	// #0
    2c7c:	mov	x8, #0x1                   	// #1
    2c80:	b	2b94 <__multf3+0x120>
    2c84:	mov	x12, #0x0                   	// #0
    2c88:	mov	x1, #0x0                   	// #0
    2c8c:	mov	x7, #0x7fff                	// #32767
    2c90:	mov	x8, #0x2                   	// #2
    2c94:	b	2b94 <__multf3+0x120>
    2c98:	mov	x12, x11
    2c9c:	mov	x1, x2
    2ca0:	mov	x8, x15
    2ca4:	cmp	x8, #0x2
    2ca8:	b.eq	30f4 <__multf3+0x680>  // b.none
    2cac:	cmp	x8, #0x3
    2cb0:	b.eq	30e4 <__multf3+0x670>  // b.none
    2cb4:	cmp	x8, #0x1
    2cb8:	b.ne	2e28 <__multf3+0x3b4>  // b.any
    2cbc:	mov	x1, #0x0                   	// #0
    2cc0:	mov	x2, #0x0                   	// #0
    2cc4:	b	30a8 <__multf3+0x634>
    2cc8:	lsr	x14, x2, #32
    2ccc:	and	x15, x1, #0xffffffff
    2cd0:	lsr	x4, x1, #32
    2cd4:	and	x2, x2, #0xffffffff
    2cd8:	mul	x1, x14, x15
    2cdc:	mul	x3, x15, x2
    2ce0:	madd	x13, x4, x2, x1
    2ce4:	mul	x17, x14, x4
    2ce8:	add	x13, x13, x3, lsr #32
    2cec:	cmp	x1, x13
    2cf0:	b.ls	2cfc <__multf3+0x288>  // b.plast
    2cf4:	mov	x1, #0x100000000           	// #4294967296
    2cf8:	add	x17, x17, x1
    2cfc:	and	x3, x3, #0xffffffff
    2d00:	and	x1, x12, #0xffffffff
    2d04:	lsr	x7, x13, #32
    2d08:	add	x13, x3, x13, lsl #32
    2d0c:	lsr	x3, x12, #32
    2d10:	mul	x12, x14, x1
    2d14:	mul	x18, x2, x1
    2d18:	madd	x2, x3, x2, x12
    2d1c:	mul	x14, x14, x3
    2d20:	add	x8, x2, x18, lsr #32
    2d24:	cmp	x12, x8
    2d28:	b.ls	2d34 <__multf3+0x2c0>  // b.plast
    2d2c:	mov	x2, #0x100000000           	// #4294967296
    2d30:	add	x14, x14, x2
    2d34:	lsr	x16, x11, #32
    2d38:	and	x11, x11, #0xffffffff
    2d3c:	and	x18, x18, #0xffffffff
    2d40:	add	x14, x14, x8, lsr #32
    2d44:	add	x18, x18, x8, lsl #32
    2d48:	mul	x8, x15, x11
    2d4c:	add	x7, x7, x18
    2d50:	mul	x15, x16, x15
    2d54:	mul	x2, x4, x16
    2d58:	madd	x4, x4, x11, x15
    2d5c:	add	x4, x4, x8, lsr #32
    2d60:	cmp	x15, x4
    2d64:	b.ls	2d70 <__multf3+0x2fc>  // b.plast
    2d68:	mov	x12, #0x100000000           	// #4294967296
    2d6c:	add	x2, x2, x12
    2d70:	mul	x12, x16, x1
    2d74:	and	x8, x8, #0xffffffff
    2d78:	mul	x16, x3, x16
    2d7c:	add	x15, x2, x4, lsr #32
    2d80:	madd	x3, x3, x11, x12
    2d84:	add	x8, x8, x4, lsl #32
    2d88:	mul	x4, x11, x1
    2d8c:	add	x3, x3, x4, lsr #32
    2d90:	cmp	x12, x3
    2d94:	b.ls	2da0 <__multf3+0x32c>  // b.plast
    2d98:	mov	x1, #0x100000000           	// #4294967296
    2d9c:	add	x16, x16, x1
    2da0:	and	x2, x4, #0xffffffff
    2da4:	add	x7, x17, x7
    2da8:	add	x2, x2, x3, lsl #32
    2dac:	lsr	x3, x3, #32
    2db0:	adds	x2, x2, x14
    2db4:	cset	x4, cs  // cs = hs, nlast
    2db8:	cmp	x7, x18
    2dbc:	cset	x1, cc  // cc = lo, ul, last
    2dc0:	adds	x2, x2, x1
    2dc4:	cset	x1, cs  // cs = hs, nlast
    2dc8:	cmp	x4, #0x0
    2dcc:	ccmp	x1, #0x0, #0x0, eq  // eq = none
    2dd0:	cinc	x3, x3, ne  // ne = any
    2dd4:	adds	x7, x7, x8
    2dd8:	cset	x1, cs  // cs = hs, nlast
    2ddc:	adds	x2, x2, x15
    2de0:	cset	x4, cs  // cs = hs, nlast
    2de4:	adds	x2, x2, x1
    2de8:	cset	x1, cs  // cs = hs, nlast
    2dec:	cmp	x4, #0x0
    2df0:	ccmp	x1, #0x0, #0x0, eq  // eq = none
    2df4:	orr	x13, x13, x7, lsl #13
    2df8:	cinc	x1, x16, ne  // ne = any
    2dfc:	cmp	x13, #0x0
    2e00:	add	x3, x1, x3
    2e04:	cset	x1, ne  // ne = any
    2e08:	orr	x7, x1, x7, lsr #51
    2e0c:	orr	x1, x7, x2, lsl #13
    2e10:	extr	x12, x3, x2, #51
    2e14:	tbz	x3, #39, 2eb0 <__multf3+0x43c>
    2e18:	and	x2, x1, #0x1
    2e1c:	orr	x1, x2, x1, lsr #1
    2e20:	orr	x1, x1, x12, lsl #63
    2e24:	lsr	x12, x12, #1
    2e28:	mov	x2, #0x3fff                	// #16383
    2e2c:	add	x3, x9, x2
    2e30:	cmp	x3, #0x0
    2e34:	b.le	2f7c <__multf3+0x508>
    2e38:	tst	x1, #0x7
    2e3c:	b.eq	2ec8 <__multf3+0x454>  // b.none
    2e40:	and	x2, x6, #0xc00000
    2e44:	orr	w0, w0, #0x10
    2e48:	cmp	x2, #0x400, lsl #12
    2e4c:	b.eq	2eb8 <__multf3+0x444>  // b.none
    2e50:	cmp	x2, #0x800, lsl #12
    2e54:	b.eq	2ec4 <__multf3+0x450>  // b.none
    2e58:	cbnz	x2, 2ec8 <__multf3+0x454>
    2e5c:	and	x2, x1, #0xf
    2e60:	cmp	x2, #0x4
    2e64:	b.eq	2ec8 <__multf3+0x454>  // b.none
    2e68:	adds	x1, x1, #0x4
    2e6c:	cinc	x12, x12, cs  // cs = hs, nlast
    2e70:	b	2ec8 <__multf3+0x454>
    2e74:	tbz	x11, #47, 2e88 <__multf3+0x414>
    2e78:	tbnz	x12, #47, 2e88 <__multf3+0x414>
    2e7c:	mov	x11, x12
    2e80:	mov	x2, x1
    2e84:	mov	x4, x16
    2e88:	orr	x1, x11, #0x800000000000
    2e8c:	mov	x5, x4
    2e90:	mov	x3, #0x7fff                	// #32767
    2e94:	b	2ee8 <__multf3+0x474>
    2e98:	mov	x12, x11
    2e9c:	mov	x1, x2
    2ea0:	mov	x5, x4
    2ea4:	b	2ca0 <__multf3+0x22c>
    2ea8:	mov	x5, x16
    2eac:	b	2ca4 <__multf3+0x230>
    2eb0:	mov	x9, x10
    2eb4:	b	2e28 <__multf3+0x3b4>
    2eb8:	cbnz	x5, 2ec8 <__multf3+0x454>
    2ebc:	adds	x1, x1, #0x8
    2ec0:	b	2e6c <__multf3+0x3f8>
    2ec4:	cbnz	x5, 2ebc <__multf3+0x448>
    2ec8:	tbz	x12, #52, 2ed4 <__multf3+0x460>
    2ecc:	and	x12, x12, #0xffefffffffffffff
    2ed0:	add	x3, x9, #0x4, lsl #12
    2ed4:	mov	x4, #0x7ffe                	// #32766
    2ed8:	cmp	x3, x4
    2edc:	b.gt	2f1c <__multf3+0x4a8>
    2ee0:	extr	x2, x12, x1, #3
    2ee4:	lsr	x1, x12, #3
    2ee8:	and	x3, x3, #0x7fff
    2eec:	mov	x7, #0x0                   	// #0
    2ef0:	bfxil	x7, x1, #0, #48
    2ef4:	orr	w3, w3, w5, lsl #15
    2ef8:	fmov	d0, x2
    2efc:	bfi	x7, x3, #48, #16
    2f00:	fmov	v0.d[1], x7
    2f04:	cbz	w0, 2f14 <__multf3+0x4a0>
    2f08:	str	q0, [sp, #16]
    2f0c:	bl	327c <__sfp_handle_exceptions>
    2f10:	ldr	q0, [sp, #16]
    2f14:	ldp	x29, x30, [sp], #32
    2f18:	ret
    2f1c:	and	x2, x6, #0xc00000
    2f20:	cmp	x2, #0x400, lsl #12
    2f24:	b.eq	2f48 <__multf3+0x4d4>  // b.none
    2f28:	cmp	x2, #0x800, lsl #12
    2f2c:	b.eq	2f5c <__multf3+0x4e8>  // b.none
    2f30:	cbnz	x2, 2f70 <__multf3+0x4fc>
    2f34:	mov	x3, #0x7fff                	// #32767
    2f38:	mov	w1, #0x14                  	// #20
    2f3c:	orr	w0, w0, w1
    2f40:	mov	x1, x2
    2f44:	b	2ee8 <__multf3+0x474>
    2f48:	cmp	x5, #0x0
    2f4c:	mov	x3, #0x7fff                	// #32767
    2f50:	csetm	x2, ne  // ne = any
    2f54:	csel	x3, x3, x4, eq  // eq = none
    2f58:	b	2f38 <__multf3+0x4c4>
    2f5c:	cmp	x5, #0x0
    2f60:	mov	x3, #0x7fff                	// #32767
    2f64:	csetm	x2, eq  // eq = none
    2f68:	csel	x3, x3, x4, ne  // ne = any
    2f6c:	b	2f38 <__multf3+0x4c4>
    2f70:	mov	x3, x4
    2f74:	mov	x2, #0xffffffffffffffff    	// #-1
    2f78:	b	2f38 <__multf3+0x4c4>
    2f7c:	mov	x4, #0x1                   	// #1
    2f80:	sub	x3, x4, x3
    2f84:	cmp	x3, #0x74
    2f88:	b.gt	3070 <__multf3+0x5fc>
    2f8c:	cmp	x3, #0x3f
    2f90:	b.gt	2ff8 <__multf3+0x584>
    2f94:	mov	w4, #0x40                  	// #64
    2f98:	sub	w4, w4, w3
    2f9c:	lsr	x7, x1, x3
    2fa0:	lsl	x1, x1, x4
    2fa4:	cmp	x1, #0x0
    2fa8:	cset	x1, ne  // ne = any
    2fac:	lsl	x2, x12, x4
    2fb0:	orr	x2, x2, x7
    2fb4:	orr	x2, x2, x1
    2fb8:	lsr	x1, x12, x3
    2fbc:	tst	x2, #0x7
    2fc0:	b.eq	303c <__multf3+0x5c8>  // b.none
    2fc4:	and	x3, x6, #0xc00000
    2fc8:	orr	w0, w0, #0x10
    2fcc:	cmp	x3, #0x400, lsl #12
    2fd0:	b.eq	302c <__multf3+0x5b8>  // b.none
    2fd4:	cmp	x3, #0x800, lsl #12
    2fd8:	b.eq	3038 <__multf3+0x5c4>  // b.none
    2fdc:	cbnz	x3, 303c <__multf3+0x5c8>
    2fe0:	and	x3, x2, #0xf
    2fe4:	cmp	x3, #0x4
    2fe8:	b.eq	303c <__multf3+0x5c8>  // b.none
    2fec:	adds	x2, x2, #0x4
    2ff0:	cinc	x1, x1, cs  // cs = hs, nlast
    2ff4:	b	303c <__multf3+0x5c8>
    2ff8:	sub	w2, w3, #0x40
    2ffc:	mov	w4, #0x80                  	// #128
    3000:	sub	w4, w4, w3
    3004:	cmp	x3, #0x40
    3008:	lsr	x2, x12, x2
    300c:	lsl	x12, x12, x4
    3010:	csel	x12, x12, xzr, ne  // ne = any
    3014:	orr	x1, x12, x1
    3018:	cmp	x1, #0x0
    301c:	cset	x1, ne  // ne = any
    3020:	orr	x2, x2, x1
    3024:	mov	x1, #0x0                   	// #0
    3028:	b	2fbc <__multf3+0x548>
    302c:	cbnz	x5, 303c <__multf3+0x5c8>
    3030:	adds	x2, x2, #0x8
    3034:	b	2ff0 <__multf3+0x57c>
    3038:	cbnz	x5, 3030 <__multf3+0x5bc>
    303c:	tbz	x1, #51, 3058 <__multf3+0x5e4>
    3040:	orr	w0, w0, #0x10
    3044:	mov	x1, #0x0                   	// #0
    3048:	mov	x2, #0x0                   	// #0
    304c:	mov	x3, #0x1                   	// #1
    3050:	orr	w0, w0, #0x8
    3054:	b	2ee8 <__multf3+0x474>
    3058:	mov	x3, #0x0                   	// #0
    305c:	extr	x2, x1, x2, #3
    3060:	lsr	x1, x1, #3
    3064:	tbnz	w0, #4, 3050 <__multf3+0x5dc>
    3068:	tbz	w6, #11, 2ee8 <__multf3+0x474>
    306c:	b	3050 <__multf3+0x5dc>
    3070:	orr	x2, x1, x12
    3074:	cbz	x2, 30a0 <__multf3+0x62c>
    3078:	and	x6, x6, #0xc00000
    307c:	orr	w0, w0, #0x10
    3080:	cmp	x6, #0x400, lsl #12
    3084:	b.eq	30b0 <__multf3+0x63c>  // b.none
    3088:	cmp	x6, #0x800, lsl #12
    308c:	b.eq	30c0 <__multf3+0x64c>  // b.none
    3090:	cmp	x6, #0x0
    3094:	mov	x2, #0x5                   	// #5
    3098:	csel	x4, x4, x2, ne  // ne = any
    309c:	lsr	x2, x4, #3
    30a0:	orr	w0, w0, #0x8
    30a4:	mov	x1, #0x0                   	// #0
    30a8:	mov	x3, #0x0                   	// #0
    30ac:	b	2ee8 <__multf3+0x474>
    30b0:	cmp	x5, #0x0
    30b4:	mov	x2, #0x9                   	// #9
    30b8:	csel	x4, x2, x4, eq  // eq = none
    30bc:	b	309c <__multf3+0x628>
    30c0:	cmp	x5, #0x0
    30c4:	mov	x2, #0x9                   	// #9
    30c8:	csel	x4, x2, x4, ne  // ne = any
    30cc:	b	309c <__multf3+0x628>
    30d0:	mov	x11, #0xffffffffffff        	// #281474976710655
    30d4:	mov	x2, #0xffffffffffffffff    	// #-1
    30d8:	mov	w0, #0x1                   	// #1
    30dc:	mov	x4, #0x0                   	// #0
    30e0:	b	2e88 <__multf3+0x414>
    30e4:	mov	x11, x12
    30e8:	mov	x2, x1
    30ec:	mov	x4, x5
    30f0:	b	2e88 <__multf3+0x414>
    30f4:	mov	x1, #0x0                   	// #0
    30f8:	mov	x2, #0x0                   	// #0
    30fc:	b	2e90 <__multf3+0x41c>

0000000000003100 <__floatsitf>:
    3100:	cmp	w0, #0x0
    3104:	cbz	w0, 314c <__floatsitf+0x4c>
    3108:	lsr	w1, w0, #31
    310c:	cneg	w0, w0, lt  // lt = tstop
    3110:	clz	x3, x0
    3114:	mov	w2, #0x403e                	// #16446
    3118:	sub	w2, w2, w3
    311c:	mov	w3, #0x402f                	// #16431
    3120:	sxtw	x4, w2
    3124:	sub	w2, w3, w2
    3128:	lsl	x0, x0, x2
    312c:	mov	x3, #0x0                   	// #0
    3130:	orr	w1, w4, w1, lsl #15
    3134:	bfxil	x3, x0, #0, #48
    3138:	mov	x2, #0x0                   	// #0
    313c:	fmov	d0, x2
    3140:	bfi	x3, x1, #48, #16
    3144:	fmov	v0.d[1], x3
    3148:	ret
    314c:	mov	x0, #0x0                   	// #0
    3150:	mov	x4, #0x0                   	// #0
    3154:	mov	x1, #0x0                   	// #0
    3158:	b	312c <__floatsitf+0x2c>

000000000000315c <__fixtfdi>:
    315c:	stp	x29, x30, [sp, #-48]!
    3160:	mov	x29, sp
    3164:	str	x19, [sp, #16]
    3168:	str	q0, [sp, #32]
    316c:	ldp	x2, x1, [sp, #32]
    3170:	mrs	x0, fpcr
    3174:	ubfx	x4, x1, #48, #15
    3178:	mov	x5, #0x3ffe                	// #16382
    317c:	ubfx	x0, x1, #0, #48
    3180:	mov	x3, x4
    3184:	cmp	x4, x5
    3188:	b.gt	31a8 <__fixtfdi+0x4c>
    318c:	cbnz	x4, 3268 <__fixtfdi+0x10c>
    3190:	orr	x19, x0, x2
    3194:	cbnz	x19, 3268 <__fixtfdi+0x10c>
    3198:	mov	x0, x19
    319c:	ldr	x19, [sp, #16]
    31a0:	ldp	x29, x30, [sp], #48
    31a4:	ret
    31a8:	lsr	x1, x1, #63
    31ac:	mov	x5, #0x403d                	// #16445
    31b0:	and	w1, w1, #0xff
    31b4:	cmp	x4, x5
    31b8:	b.le	31f0 <__fixtfdi+0x94>
    31bc:	and	x19, x1, #0xff
    31c0:	mov	x4, #0x7fffffffffffffff    	// #9223372036854775807
    31c4:	add	x19, x19, x4
    31c8:	mov	x4, #0x403e                	// #16446
    31cc:	cmp	x3, x4
    31d0:	csel	w1, w1, wzr, eq  // eq = none
    31d4:	cbz	w1, 3270 <__fixtfdi+0x114>
    31d8:	extr	x0, x0, x2, #49
    31dc:	cbnz	x0, 3270 <__fixtfdi+0x114>
    31e0:	cmp	xzr, x2, lsl #15
    31e4:	b.eq	3198 <__fixtfdi+0x3c>  // b.none
    31e8:	mov	w0, #0x10                  	// #16
    31ec:	b	3274 <__fixtfdi+0x118>
    31f0:	mov	x5, #0x406f                	// #16495
    31f4:	sub	x3, x5, x4
    31f8:	orr	x0, x0, #0x1000000000000
    31fc:	cmp	x3, #0x3f
    3200:	b.gt	3238 <__fixtfdi+0xdc>
    3204:	mov	w6, #0xffffbfd1            	// #-16431
    3208:	add	w19, w4, w6
    320c:	sub	w4, w5, w4
    3210:	lsl	x3, x2, x19
    3214:	cmp	x3, #0x0
    3218:	lsr	x2, x2, x4
    321c:	cset	w3, ne  // ne = any
    3220:	lsl	x19, x0, x19
    3224:	orr	x19, x2, x19
    3228:	cbz	w1, 3230 <__fixtfdi+0xd4>
    322c:	neg	x19, x19
    3230:	cbz	w3, 3198 <__fixtfdi+0x3c>
    3234:	b	31e8 <__fixtfdi+0x8c>
    3238:	mov	w5, #0xffffc011            	// #-16367
    323c:	add	w19, w4, w5
    3240:	cmp	x3, #0x40
    3244:	lsl	x19, x0, x19
    3248:	csel	x19, x19, xzr, ne  // ne = any
    324c:	orr	x2, x19, x2
    3250:	mov	w19, #0x402f                	// #16431
    3254:	sub	w19, w19, w4
    3258:	cmp	x2, #0x0
    325c:	cset	w3, ne  // ne = any
    3260:	lsr	x19, x0, x19
    3264:	b	3228 <__fixtfdi+0xcc>
    3268:	mov	x19, #0x0                   	// #0
    326c:	b	31e8 <__fixtfdi+0x8c>
    3270:	mov	w0, #0x1                   	// #1
    3274:	bl	327c <__sfp_handle_exceptions>
    3278:	b	3198 <__fixtfdi+0x3c>

000000000000327c <__sfp_handle_exceptions>:
    327c:	tbz	w0, #0, 328c <__sfp_handle_exceptions+0x10>
    3280:	movi	v1.2s, #0x0
    3284:	fdiv	s0, s1, s1
    3288:	mrs	x1, fpsr
    328c:	tbz	w0, #1, 32a0 <__sfp_handle_exceptions+0x24>
    3290:	fmov	s1, #1.000000000000000000e+00
    3294:	movi	v2.2s, #0x0
    3298:	fdiv	s0, s1, s2
    329c:	mrs	x1, fpsr
    32a0:	tbz	w0, #2, 32c0 <__sfp_handle_exceptions+0x44>
    32a4:	mov	w1, #0x7f7fffff            	// #2139095039
    32a8:	fmov	s1, w1
    32ac:	mov	w1, #0xc5ae                	// #50606
    32b0:	movk	w1, #0x749d, lsl #16
    32b4:	fmov	s2, w1
    32b8:	fadd	s0, s1, s2
    32bc:	mrs	x1, fpsr
    32c0:	tbz	w0, #3, 32d0 <__sfp_handle_exceptions+0x54>
    32c4:	movi	v1.2s, #0x80, lsl #16
    32c8:	fmul	s0, s1, s1
    32cc:	mrs	x1, fpsr
    32d0:	tbz	w0, #4, 32e8 <__sfp_handle_exceptions+0x6c>
    32d4:	mov	w0, #0x7f7fffff            	// #2139095039
    32d8:	fmov	s2, #1.000000000000000000e+00
    32dc:	fmov	s1, w0
    32e0:	fsub	s0, s1, s2
    32e4:	mrs	x0, fpsr
    32e8:	ret

Disassembly of section .fini:

00000000000032ec <_fini>:
    32ec:	stp	x29, x30, [sp, #-16]!
    32f0:	mov	x29, sp
    32f4:	ldp	x29, x30, [sp], #16
    32f8:	ret
