In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libsupc++.a_clang_-O1:

array_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv117__array_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv117__array_type_infoD1Ev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x1, 0 <_ZN10__cxxabiv117__array_type_infoD1Ev>
   c:	ldr	x1, [x1]
  10:	add	x1, x1, #0x10
  14:	str	x1, [x0]
  18:	bl	0 <_ZNSt9type_infoD2Ev>
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

Disassembly of section .text._ZN10__cxxabiv117__array_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv117__array_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv117__array_type_infoD0Ev>
  14:	mov	x1, #0x10                  	// #16
  18:	mov	x0, x19
  1c:	bl	0 <_ZdlPvm>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

atexit_arm.o:     file format elf64-littleaarch64


atexit_thread.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_thread_atexit:

0000000000000000 <__cxa_thread_atexit>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_thread_atexit_impl>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

bad_alloc.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt9bad_alloc4whatEv:

0000000000000000 <_ZNKSt9bad_alloc4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt9bad_alloc4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt9bad_allocD2Ev:

0000000000000000 <_ZNSt9bad_allocD1Ev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x1, 0 <_ZNSt9bad_allocD1Ev>
   c:	ldr	x1, [x1]
  10:	add	x1, x1, #0x10
  14:	str	x1, [x0]
  18:	bl	0 <_ZNSt9exceptionD2Ev>
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

Disassembly of section .text._ZNSt9bad_allocD0Ev:

0000000000000000 <_ZNSt9bad_allocD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt9bad_allocD0Ev>
  14:	mov	x1, #0x8                   	// #8
  18:	mov	x0, x19
  1c:	bl	0 <_ZdlPvm>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

bad_array_length.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt16bad_array_length4whatEv:

0000000000000000 <_ZNKSt16bad_array_length4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt16bad_array_length4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt16bad_array_lengthD2Ev:

0000000000000000 <_ZNSt16bad_array_lengthD1Ev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x1, 0 <_ZNSt16bad_array_lengthD1Ev>
   c:	ldr	x1, [x1]
  10:	add	x1, x1, #0x10
  14:	str	x1, [x0]
  18:	bl	0 <_ZNSt9bad_allocD2Ev>
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

Disassembly of section .text._ZNSt16bad_array_lengthD0Ev:

0000000000000000 <_ZNSt16bad_array_lengthD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt16bad_array_lengthD0Ev>
  14:	mov	x1, #0x8                   	// #8
  18:	mov	x0, x19
  1c:	bl	0 <_ZdlPvm>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

Disassembly of section .text.__cxa_throw_bad_array_length:

0000000000000000 <__cxa_throw_bad_array_length>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	mov	x0, #0x8                   	// #8
   c:	bl	0 <__cxa_allocate_exception>
  10:	adrp	x1, 0 <__cxa_throw_bad_array_length>
  14:	ldr	x1, [x1]
  18:	add	x1, x1, #0x10
  1c:	str	x1, [x0]
  20:	adrp	x2, 0 <__cxa_throw_bad_array_length>
  24:	ldr	x2, [x2]
  28:	adrp	x1, 0 <__cxa_throw_bad_array_length>
  2c:	ldr	x1, [x1]
  30:	bl	0 <__cxa_throw>

bad_array_new.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt20bad_array_new_length4whatEv:

0000000000000000 <_ZNKSt20bad_array_new_length4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt20bad_array_new_length4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt20bad_array_new_lengthD2Ev:

0000000000000000 <_ZNSt20bad_array_new_lengthD1Ev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x1, 0 <_ZNSt20bad_array_new_lengthD1Ev>
   c:	ldr	x1, [x1]
  10:	add	x1, x1, #0x10
  14:	str	x1, [x0]
  18:	bl	0 <_ZNSt9bad_allocD2Ev>
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

Disassembly of section .text._ZNSt20bad_array_new_lengthD0Ev:

0000000000000000 <_ZNSt20bad_array_new_lengthD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt20bad_array_new_lengthD0Ev>
  14:	mov	x1, #0x8                   	// #8
  18:	mov	x0, x19
  1c:	bl	0 <_ZdlPvm>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

bad_cast.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt8bad_cast4whatEv:

0000000000000000 <_ZNKSt8bad_cast4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt8bad_cast4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt8bad_castD2Ev:

0000000000000000 <_ZNSt8bad_castD1Ev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x1, 0 <_ZNSt8bad_castD1Ev>
   c:	ldr	x1, [x1]
  10:	add	x1, x1, #0x10
  14:	str	x1, [x0]
  18:	bl	0 <_ZNSt9exceptionD2Ev>
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

Disassembly of section .text._ZNSt8bad_castD0Ev:

0000000000000000 <_ZNSt8bad_castD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt8bad_castD0Ev>
  14:	mov	x1, #0x8                   	// #8
  18:	mov	x0, x19
  1c:	bl	0 <_ZdlPvm>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

bad_typeid.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNKSt10bad_typeid4whatEv:

0000000000000000 <_ZNKSt10bad_typeid4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt10bad_typeid4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt10bad_typeidD2Ev:

0000000000000000 <_ZNSt10bad_typeidD1Ev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x1, 0 <_ZNSt10bad_typeidD1Ev>
   c:	ldr	x1, [x1]
  10:	add	x1, x1, #0x10
  14:	str	x1, [x0]
  18:	bl	0 <_ZNSt9exceptionD2Ev>
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

Disassembly of section .text._ZNSt10bad_typeidD0Ev:

0000000000000000 <_ZNSt10bad_typeidD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt10bad_typeidD0Ev>
  14:	mov	x1, #0x8                   	// #8
  18:	mov	x0, x19
  1c:	bl	0 <_ZdlPvm>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

class_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x2
  10:	str	xzr, [sp, #40]
  14:	str	wzr, [sp, #48]
  18:	mov	w2, #0x10                  	// #16
  1c:	str	w2, [sp, #52]
  20:	str	xzr, [sp, #56]
  24:	ldr	x2, [x0]
  28:	ldr	x4, [x2, #48]
  2c:	add	x3, sp, #0x28
  30:	ldr	x2, [x19]
  34:	blr	x4
  38:	ldr	w0, [sp, #48]
  3c:	and	w0, w0, #0x6
  40:	cmp	w0, #0x6
  44:	b.ne	60 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x60>  // b.any
  48:	ldr	x0, [sp, #40]
  4c:	str	x0, [x19]
  50:	mov	w0, #0x1                   	// #1
  54:	ldr	x19, [sp, #16]
  58:	ldp	x29, x30, [sp], #64
  5c:	ret
  60:	mov	w0, #0x0                   	// #0
  64:	b	54 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x54>

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
   0:	cmp	x4, x2
   4:	mov	w0, #0x6                   	// #6
   8:	csinc	w0, w0, wzr, eq  // eq = none
   c:	ret

Disassembly of section .text._ZN10__cxxabiv117__class_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x1, 0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c:	ldr	x1, [x1]
  10:	add	x1, x1, #0x10
  14:	str	x1, [x0]
  18:	bl	0 <_ZNSt9type_infoD2Ev>
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

Disassembly of section .text._ZN10__cxxabiv117__class_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv117__class_type_infoD0Ev>
  14:	mov	x1, #0x10                  	// #16
  18:	mov	x0, x19
  1c:	bl	0 <_ZdlPvm>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x2
  10:	mov	x19, x3
  14:	ldr	x2, [x0, #8]
  18:	ldr	x1, [x1, #8]
  1c:	cmp	x2, x1
  20:	b.eq	48 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x48>  // b.none
  24:	ldrb	w3, [x2]
  28:	mov	w0, #0x0                   	// #0
  2c:	cmp	w3, #0x2a
  30:	b.eq	60 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x60>  // b.none
  34:	mov	x0, x2
  38:	bl	0 <strcmp>
  3c:	cbz	w0, 48 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x48>
  40:	mov	w0, #0x0                   	// #0
  44:	b	60 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x60>
  48:	str	x20, [x19]
  4c:	mov	x0, #0x10                  	// #16
  50:	str	x0, [x19, #16]
  54:	mov	w0, #0x6                   	// #6
  58:	str	w0, [x19, #8]
  5c:	mov	w0, #0x1                   	// #1
  60:	ldp	x19, x20, [sp, #16]
  64:	ldp	x29, x30, [sp], #32
  68:	ret

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	mov	x22, x0
  14:	mov	x19, x1
  18:	ldr	x0, [x0, #8]
  1c:	ldr	x1, [x1, #8]
  20:	cmp	x0, x1
  24:	b.eq	84 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x84>  // b.none
  28:	mov	x21, x2
  2c:	mov	w20, w3
  30:	ldrb	w2, [x0]
  34:	cmp	w2, #0x2a
  38:	b.eq	48 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x48>  // b.none
  3c:	bl	0 <strcmp>
  40:	mov	w1, #0x1                   	// #1
  44:	cbz	w0, 70 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x70>
  48:	mov	w1, #0x0                   	// #0
  4c:	cmp	w20, #0x3
  50:	b.hi	70 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x70>  // b.pmore
  54:	ldr	x0, [x19]
  58:	ldr	x3, [x0, #40]
  5c:	mov	x2, x21
  60:	mov	x1, x22
  64:	mov	x0, x19
  68:	blr	x3
  6c:	and	w1, w0, #0xff
  70:	mov	w0, w1
  74:	ldp	x19, x20, [sp, #16]
  78:	ldp	x21, x22, [sp, #32]
  7c:	ldp	x29, x30, [sp], #48
  80:	ret
  84:	mov	w1, #0x1                   	// #1
  88:	b	70 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x70>

Disassembly of section .text._ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE:

0000000000000000 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	str	x23, [sp, #48]
  14:	mov	x20, x0
  18:	mov	w22, w2
  1c:	mov	x23, x3
  20:	mov	x19, x4
  24:	mov	x21, x7
  28:	cmp	x4, x6
  2c:	b.eq	7c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>  // b.none
  30:	ldr	x0, [x0, #8]
  34:	ldr	x1, [x3, #8]
  38:	cmp	x0, x1
  3c:	b.eq	54 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x54>  // b.none
  40:	ldrb	w2, [x0]
  44:	cmp	w2, #0x2a
  48:	b.eq	64 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x64>  // b.none
  4c:	bl	0 <strcmp>
  50:	cbnz	w0, 64 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x64>
  54:	str	x19, [x21]
  58:	str	w22, [x21, #8]
  5c:	mov	w0, #0x1                   	// #1
  60:	str	w0, [x21, #16]
  64:	mov	w0, #0x0                   	// #0
  68:	ldp	x19, x20, [sp, #16]
  6c:	ldp	x21, x22, [sp, #32]
  70:	ldr	x23, [sp, #48]
  74:	ldp	x29, x30, [sp], #64
  78:	ret
  7c:	ldr	x0, [x0, #8]
  80:	ldr	x1, [x5, #8]
  84:	cmp	x0, x1
  88:	b.eq	b4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb4>  // b.none
  8c:	ldrb	w2, [x0]
  90:	cmp	w2, #0x2a
  94:	b.eq	bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xbc>  // b.none
  98:	bl	0 <strcmp>
  9c:	cbz	w0, b4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb4>
  a0:	ldr	x0, [x20, #8]
  a4:	ldr	x1, [x23, #8]
  a8:	cmp	x0, x1
  ac:	b.ne	4c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x4c>  // b.any
  b0:	b	54 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x54>
  b4:	str	w22, [x21, #12]
  b8:	b	64 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x64>
  bc:	ldr	x1, [x3, #8]
  c0:	ldr	x0, [x20, #8]
  c4:	cmp	x1, x0
  c8:	b.ne	64 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x64>  // b.any
  cc:	b	54 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x54>

del_op.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPv:

0000000000000000 <_ZdlPv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <free>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

del_ops.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvm:

0000000000000000 <_ZdlPvm>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZdlPv>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

del_opnt.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvRKSt9nothrow_t:

0000000000000000 <_ZdlPvRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZdlPv>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

del_opv.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPv:

0000000000000000 <_ZdaPv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZdlPv>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

del_opvs.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvm:

0000000000000000 <_ZdaPvm>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZdaPv>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

del_opvnt.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvRKSt9nothrow_t:

0000000000000000 <_ZdaPvRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZdaPv>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

dyncast.o:     file format elf64-littleaarch64


Disassembly of section .text.__dynamic_cast:

0000000000000000 <__dynamic_cast>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	mov	x19, x0
  14:	mov	x22, x1
  18:	mov	x21, x2
  1c:	ldr	x0, [x0]
  20:	ldur	x1, [x0, #-16]
  24:	add	x4, x19, x1
  28:	ldur	x0, [x0, #-8]
  2c:	str	xzr, [sp, #56]
  30:	str	wzr, [sp, #64]
  34:	str	wzr, [sp, #68]
  38:	str	wzr, [sp, #72]
  3c:	mov	w2, #0x10                  	// #16
  40:	str	w2, [sp, #76]
  44:	ldr	x1, [x19, x1]
  48:	ldur	x1, [x1, #-8]
  4c:	cmp	x1, x0
  50:	b.ne	11c <__dynamic_cast+0x11c>  // b.any
  54:	mov	x20, x3
  58:	ldr	x1, [x0]
  5c:	ldr	x8, [x1, #56]
  60:	add	x7, sp, #0x38
  64:	mov	x6, x19
  68:	mov	x5, x22
  6c:	mov	x3, x21
  70:	mov	w2, #0x6                   	// #6
  74:	mov	x1, x20
  78:	blr	x8
  7c:	ldr	x0, [sp, #56]
  80:	cbz	x0, 120 <__dynamic_cast+0x120>
  84:	ldr	w3, [sp, #72]
  88:	and	w1, w3, #0x6
  8c:	cmp	w1, #0x6
  90:	b.eq	120 <__dynamic_cast+0x120>  // b.none
  94:	ldr	w2, [sp, #68]
  98:	ldr	w1, [sp, #64]
  9c:	and	w1, w2, w1
  a0:	and	w1, w1, #0x6
  a4:	cmp	w1, #0x6
  a8:	b.eq	120 <__dynamic_cast+0x120>  // b.none
  ac:	mov	w1, #0x5                   	// #5
  b0:	and	w2, w2, w1
  b4:	cmp	w2, #0x4
  b8:	b.eq	130 <__dynamic_cast+0x130>  // b.none
  bc:	cbnz	w3, 138 <__dynamic_cast+0x138>
  c0:	tbnz	x20, #63, e8 <__dynamic_cast+0xe8>
  c4:	add	x0, x0, x20
  c8:	cmp	x19, x0
  cc:	mov	w1, #0x6                   	// #6
  d0:	csinc	w1, w1, wzr, eq  // eq = none
  d4:	and	w1, w1, #0x6
  d8:	cmp	w1, #0x6
  dc:	ldr	x0, [sp, #56]
  e0:	csel	x0, x0, xzr, eq  // eq = none
  e4:	b	120 <__dynamic_cast+0x120>
  e8:	mov	w1, #0x1                   	// #1
  ec:	cmn	x20, #0x2
  f0:	b.eq	d4 <__dynamic_cast+0xd4>  // b.none
  f4:	ldr	x1, [x21]
  f8:	ldr	x5, [x1, #64]
  fc:	mov	x4, x19
 100:	mov	x3, x22
 104:	mov	x2, x0
 108:	mov	x1, x20
 10c:	mov	x0, x21
 110:	blr	x5
 114:	mov	w1, w0
 118:	b	d4 <__dynamic_cast+0xd4>
 11c:	mov	x0, #0x0                   	// #0
 120:	ldp	x19, x20, [sp, #16]
 124:	ldp	x21, x22, [sp, #32]
 128:	ldp	x29, x30, [sp], #80
 12c:	ret
 130:	mov	x0, #0x0                   	// #0
 134:	b	120 <__dynamic_cast+0x120>
 138:	mov	x0, #0x0                   	// #0
 13c:	b	120 <__dynamic_cast+0x120>

eh_alloc.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNK9__gnu_cxx24__concurrence_lock_error4whatEv:

0000000000000000 <_ZNK9__gnu_cxx24__concurrence_lock_error4whatEv>:
   0:	adrp	x0, 0 <_ZNK9__gnu_cxx24__concurrence_lock_error4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNK9__gnu_cxx26__concurrence_unlock_error4whatEv:

0000000000000000 <_ZNK9__gnu_cxx26__concurrence_unlock_error4whatEv>:
   0:	adrp	x0, 0 <_ZNK9__gnu_cxx26__concurrence_unlock_error4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZN9__gnu_cxx24__concurrence_lock_errorD2Ev:

0000000000000000 <_ZN9__gnu_cxx24__concurrence_lock_errorD1Ev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x1, 0 <_ZN9__gnu_cxx24__concurrence_lock_errorD1Ev>
   c:	ldr	x1, [x1]
  10:	add	x1, x1, #0x10
  14:	str	x1, [x0]
  18:	bl	0 <_ZNSt9exceptionD2Ev>
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

Disassembly of section .text._ZN9__gnu_cxx26__concurrence_unlock_errorD2Ev:

0000000000000000 <_ZN9__gnu_cxx26__concurrence_unlock_errorD1Ev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x1, 0 <_ZN9__gnu_cxx26__concurrence_unlock_errorD1Ev>
   c:	ldr	x1, [x1]
  10:	add	x1, x1, #0x10
  14:	str	x1, [x0]
  18:	bl	0 <_ZNSt9exceptionD2Ev>
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

Disassembly of section .text._ZN9__gnu_cxx24__concurrence_lock_errorD0Ev:

0000000000000000 <_ZN9__gnu_cxx24__concurrence_lock_errorD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	adrp	x1, 0 <_ZN9__gnu_cxx24__concurrence_lock_errorD0Ev>
  14:	ldr	x1, [x1]
  18:	add	x1, x1, #0x10
  1c:	str	x1, [x0]
  20:	bl	0 <_ZNSt9exceptionD2Ev>
  24:	mov	x1, #0x8                   	// #8
  28:	mov	x0, x19
  2c:	bl	0 <_ZdlPvm>
  30:	ldr	x19, [sp, #16]
  34:	ldp	x29, x30, [sp], #32
  38:	ret

Disassembly of section .text._ZN9__gnu_cxx26__concurrence_unlock_errorD0Ev:

0000000000000000 <_ZN9__gnu_cxx26__concurrence_unlock_errorD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	adrp	x1, 0 <_ZN9__gnu_cxx26__concurrence_unlock_errorD0Ev>
  14:	ldr	x1, [x1]
  18:	add	x1, x1, #0x10
  1c:	str	x1, [x0]
  20:	bl	0 <_ZNSt9exceptionD2Ev>
  24:	mov	x1, #0x8                   	// #8
  28:	mov	x0, x19
  2c:	bl	0 <_ZdlPvm>
  30:	ldr	x19, [sp, #16]
  34:	ldp	x29, x30, [sp], #32
  38:	ret

Disassembly of section .text._ZN9__gnu_cxx30__throw_concurrence_lock_errorEv:

0000000000000000 <_ZN9__gnu_cxx30__throw_concurrence_lock_errorEv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	mov	x0, #0x8                   	// #8
   c:	bl	0 <_ZN9__gnu_cxx30__throw_concurrence_lock_errorEv>
  10:	adrp	x1, 0 <_ZN9__gnu_cxx30__throw_concurrence_lock_errorEv>
  14:	ldr	x1, [x1]
  18:	add	x1, x1, #0x10
  1c:	str	x1, [x0]
  20:	adrp	x2, 0 <_ZN9__gnu_cxx30__throw_concurrence_lock_errorEv>
  24:	ldr	x2, [x2]
  28:	adrp	x1, 0 <_ZN9__gnu_cxx30__throw_concurrence_lock_errorEv>
  2c:	ldr	x1, [x1]
  30:	bl	0 <__cxa_throw>

Disassembly of section .text._ZN12_GLOBAL__N_14pool8allocateEm:

0000000000000000 <_ZN12_GLOBAL__N_14pool8allocateEm>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x0
  10:	mov	x19, x1
  14:	adrp	x0, 0 <__pthread_key_create>
  18:	ldr	x0, [x0]
  1c:	cbz	x0, 2c <_ZN12_GLOBAL__N_14pool8allocateEm+0x2c>
  20:	mov	x0, x20
  24:	bl	0 <pthread_mutex_lock>
  28:	cbnz	w0, 68 <_ZN12_GLOBAL__N_14pool8allocateEm+0x68>
  2c:	adds	x1, x19, #0x10
  30:	mov	x19, #0x10                  	// #16
  34:	csel	x1, x1, x19, cc  // cc = lo, ul, last
  38:	add	x1, x1, #0xf
  3c:	and	x1, x1, #0xfffffffffffffff0
  40:	add	x0, x20, #0x30
  44:	ldr	x19, [x20, #48]
  48:	cbz	x19, 8c <_ZN12_GLOBAL__N_14pool8allocateEm+0x8c>
  4c:	ldr	x2, [x19]
  50:	cmp	x2, x1
  54:	b.cs	f0 <_ZN12_GLOBAL__N_14pool8allocateEm+0xf0>  // b.hs, b.nlast
  58:	add	x0, x19, #0x8
  5c:	ldr	x19, [x19, #8]
  60:	cbnz	x19, 4c <_ZN12_GLOBAL__N_14pool8allocateEm+0x4c>
  64:	b	8c <_ZN12_GLOBAL__N_14pool8allocateEm+0x8c>
  68:	bl	0 <_ZN12_GLOBAL__N_14pool8allocateEm>
  6c:	add	x3, x19, x1
  70:	ldr	x4, [x19, #8]
  74:	str	x4, [x3, #8]
  78:	str	x2, [x19, x1]
  7c:	ldr	x19, [x0]
  80:	str	x1, [x19]
  84:	str	x3, [x0]
  88:	add	x19, x19, #0x10
  8c:	adrp	x0, 0 <__pthread_key_create>
  90:	ldr	x0, [x0]
  94:	cbz	x0, a4 <_ZN12_GLOBAL__N_14pool8allocateEm+0xa4>
  98:	mov	x0, x20
  9c:	bl	0 <pthread_mutex_unlock>
  a0:	cbnz	w0, b4 <_ZN12_GLOBAL__N_14pool8allocateEm+0xb4>
  a4:	mov	x0, x19
  a8:	ldp	x19, x20, [sp, #16]
  ac:	ldp	x29, x30, [sp], #32
  b0:	ret
  b4:	mov	x0, #0x8                   	// #8
  b8:	bl	0 <_ZN12_GLOBAL__N_14pool8allocateEm>
  bc:	adrp	x1, 0 <_ZN12_GLOBAL__N_14pool8allocateEm>
  c0:	ldr	x1, [x1]
  c4:	add	x1, x1, #0x10
  c8:	str	x1, [x0]
  cc:	adrp	x2, 0 <_ZN12_GLOBAL__N_14pool8allocateEm>
  d0:	ldr	x2, [x2]
  d4:	adrp	x1, 0 <_ZN12_GLOBAL__N_14pool8allocateEm>
  d8:	ldr	x1, [x1]
  dc:	bl	0 <__cxa_throw>
  e0:	cmn	x1, #0x1
  e4:	b.eq	ec <_ZN12_GLOBAL__N_14pool8allocateEm+0xec>  // b.none
  e8:	bl	0 <_Unwind_Resume>
  ec:	bl	0 <__cxa_call_unexpected>
  f0:	sub	x2, x2, x1
  f4:	cmp	x2, #0xf
  f8:	b.hi	6c <_ZN12_GLOBAL__N_14pool8allocateEm+0x6c>  // b.pmore
  fc:	ldr	x1, [x19, #8]
 100:	str	x1, [x0]
 104:	b	88 <_ZN12_GLOBAL__N_14pool8allocateEm+0x88>

Disassembly of section .text._ZN12_GLOBAL__N_14pool4freeEPv:

0000000000000000 <_ZN12_GLOBAL__N_14pool4freeEPv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x1
  14:	adrp	x0, 0 <__pthread_key_create>
  18:	ldr	x0, [x0]
  1c:	cbz	x0, 2c <_ZN12_GLOBAL__N_14pool4freeEPv+0x2c>
  20:	mov	x0, x19
  24:	bl	0 <pthread_mutex_lock>
  28:	cbnz	w0, 74 <_ZN12_GLOBAL__N_14pool4freeEPv+0x74>
  2c:	sub	x4, x20, #0x10
  30:	ldr	x0, [x19, #48]
  34:	cbz	x0, 48 <_ZN12_GLOBAL__N_14pool4freeEPv+0x48>
  38:	ldur	x5, [x20, #-16]
  3c:	add	x1, x4, x5
  40:	cmp	x0, x1
  44:	b.ls	78 <_ZN12_GLOBAL__N_14pool4freeEPv+0x78>  // b.plast
  48:	stur	x0, [x20, #-8]
  4c:	str	x4, [x19, #48]
  50:	adrp	x0, 0 <__pthread_key_create>
  54:	ldr	x0, [x0]
  58:	cbz	x0, 68 <_ZN12_GLOBAL__N_14pool4freeEPv+0x68>
  5c:	mov	x0, x19
  60:	bl	0 <pthread_mutex_unlock>
  64:	cbnz	w0, 12c <_ZN12_GLOBAL__N_14pool4freeEPv+0x12c>
  68:	ldp	x19, x20, [sp, #16]
  6c:	ldp	x29, x30, [sp], #32
  70:	ret
  74:	bl	0 <_ZN12_GLOBAL__N_14pool4freeEPv>
  78:	b.eq	98 <_ZN12_GLOBAL__N_14pool4freeEPv+0x98>  // b.none
  7c:	ldr	x2, [x0, #8]
  80:	cmp	x2, #0x0
  84:	ccmp	x1, x2, #0x2, ne  // ne = any
  88:	b.cc	bc <_ZN12_GLOBAL__N_14pool4freeEPv+0xbc>  // b.lo, b.ul, b.last
  8c:	add	x6, x19, #0x30
  90:	mov	x3, x0
  94:	b	d4 <_ZN12_GLOBAL__N_14pool4freeEPv+0xd4>
  98:	ldr	x0, [x0]
  9c:	add	x5, x0, x5
  a0:	stur	x5, [x20, #-16]
  a4:	ldr	x0, [x19, #48]
  a8:	ldr	x0, [x0, #8]
  ac:	stur	x0, [x20, #-8]
  b0:	str	x4, [x19, #48]
  b4:	b	50 <_ZN12_GLOBAL__N_14pool4freeEPv+0x50>
  b8:	mov	x0, x3
  bc:	mov	x3, x2
  c0:	ldr	x2, [x2, #8]
  c4:	cmp	x2, #0x0
  c8:	ccmp	x1, x2, #0x2, ne  // ne = any
  cc:	b.cc	b8 <_ZN12_GLOBAL__N_14pool4freeEPv+0xb8>  // b.lo, b.ul, b.last
  d0:	add	x6, x0, #0x8
  d4:	cmp	x1, x2
  d8:	b.eq	10c <_ZN12_GLOBAL__N_14pool4freeEPv+0x10c>  // b.none
  dc:	ldr	x0, [x6]
  e0:	ldr	x1, [x0]
  e4:	add	x2, x0, x1
  e8:	cmp	x4, x2
  ec:	b.eq	120 <_ZN12_GLOBAL__N_14pool4freeEPv+0x120>  // b.none
  f0:	stur	x5, [x20, #-16]
  f4:	ldr	x0, [x6]
  f8:	ldr	x0, [x0, #8]
  fc:	stur	x0, [x20, #-8]
 100:	ldr	x0, [x6]
 104:	str	x4, [x0, #8]
 108:	b	50 <_ZN12_GLOBAL__N_14pool4freeEPv+0x50>
 10c:	ldr	x0, [x2]
 110:	add	x5, x5, x0
 114:	ldr	x0, [x2, #8]
 118:	str	x0, [x3, #8]
 11c:	b	dc <_ZN12_GLOBAL__N_14pool4freeEPv+0xdc>
 120:	add	x5, x1, x5
 124:	str	x5, [x0]
 128:	b	50 <_ZN12_GLOBAL__N_14pool4freeEPv+0x50>
 12c:	mov	x0, #0x8                   	// #8
 130:	bl	0 <_ZN12_GLOBAL__N_14pool4freeEPv>
 134:	adrp	x1, 0 <_ZN12_GLOBAL__N_14pool4freeEPv>
 138:	ldr	x1, [x1]
 13c:	add	x1, x1, #0x10
 140:	str	x1, [x0]
 144:	adrp	x2, 0 <_ZN12_GLOBAL__N_14pool4freeEPv>
 148:	ldr	x2, [x2]
 14c:	adrp	x1, 0 <_ZN12_GLOBAL__N_14pool4freeEPv>
 150:	ldr	x1, [x1]
 154:	bl	0 <__cxa_throw>
 158:	cmn	x1, #0x1
 15c:	b.eq	164 <_ZN12_GLOBAL__N_14pool4freeEPv+0x164>  // b.none
 160:	bl	0 <_Unwind_Resume>
 164:	bl	0 <__cxa_call_unexpected>

Disassembly of section .text._ZN9__gnu_cxx9__freeresEv:

0000000000000000 <_ZN9__gnu_cxx9__freeresEv>:
   0:	adrp	x0, 0 <_ZN9__gnu_cxx9__freeresEv>
   4:	ldr	x0, [x0]
   8:	cbz	x0, 28 <_ZN9__gnu_cxx9__freeresEv+0x28>
   c:	stp	x29, x30, [sp, #-16]!
  10:	mov	x29, sp
  14:	bl	0 <free>
  18:	adrp	x0, 0 <_ZN9__gnu_cxx9__freeresEv>
  1c:	str	xzr, [x0]
  20:	ldp	x29, x30, [sp], #16
  24:	ret
  28:	ret

Disassembly of section .text.__cxa_allocate_exception:

0000000000000000 <__cxa_allocate_exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	add	x19, x0, #0x80
  10:	mov	x0, x19
  14:	bl	0 <malloc>
  18:	cbz	x0, 4c <__cxa_allocate_exception+0x4c>
  1c:	stp	xzr, xzr, [x0]
  20:	stp	xzr, xzr, [x0, #16]
  24:	stp	xzr, xzr, [x0, #32]
  28:	stp	xzr, xzr, [x0, #48]
  2c:	stp	xzr, xzr, [x0, #64]
  30:	stp	xzr, xzr, [x0, #80]
  34:	stp	xzr, xzr, [x0, #96]
  38:	stp	xzr, xzr, [x0, #112]
  3c:	add	x0, x0, #0x80
  40:	ldr	x19, [sp, #16]
  44:	ldp	x29, x30, [sp], #32
  48:	ret
  4c:	mov	x1, x19
  50:	adrp	x0, 0 <__cxa_allocate_exception>
  54:	add	x0, x0, #0x0
  58:	bl	0 <__cxa_allocate_exception>
  5c:	cbnz	x0, 1c <__cxa_allocate_exception+0x1c>
  60:	bl	0 <_ZSt9terminatev>

Disassembly of section .text.__cxa_free_exception:

0000000000000000 <__cxa_free_exception>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	sub	x0, x0, #0x80
   c:	adrp	x1, 0 <__cxa_free_exception>
  10:	ldr	x1, [x1]
  14:	cmp	x0, x1
  18:	b.ls	30 <__cxa_free_exception+0x30>  // b.plast
  1c:	adrp	x2, 0 <__cxa_free_exception>
  20:	ldr	x2, [x2]
  24:	add	x1, x1, x2
  28:	cmp	x0, x1
  2c:	b.cc	3c <__cxa_free_exception+0x3c>  // b.lo, b.ul, b.last
  30:	bl	0 <free>
  34:	ldp	x29, x30, [sp], #16
  38:	ret
  3c:	mov	x1, x0
  40:	adrp	x0, 0 <__cxa_free_exception>
  44:	add	x0, x0, #0x0
  48:	bl	0 <__cxa_free_exception>
  4c:	b	34 <__cxa_free_exception+0x34>

Disassembly of section .text.__cxa_allocate_dependent_exception:

0000000000000000 <__cxa_allocate_dependent_exception>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	mov	x0, #0x70                  	// #112
   c:	bl	0 <malloc>
  10:	cbz	x0, 38 <__cxa_allocate_dependent_exception+0x38>
  14:	stp	xzr, xzr, [x0]
  18:	stp	xzr, xzr, [x0, #16]
  1c:	stp	xzr, xzr, [x0, #32]
  20:	stp	xzr, xzr, [x0, #48]
  24:	stp	xzr, xzr, [x0, #64]
  28:	stp	xzr, xzr, [x0, #80]
  2c:	stp	xzr, xzr, [x0, #96]
  30:	ldp	x29, x30, [sp], #16
  34:	ret
  38:	mov	x1, #0x70                  	// #112
  3c:	adrp	x0, 0 <__cxa_allocate_dependent_exception>
  40:	add	x0, x0, #0x0
  44:	bl	0 <__cxa_allocate_dependent_exception>
  48:	cbnz	x0, 14 <__cxa_allocate_dependent_exception+0x14>
  4c:	bl	0 <_ZSt9terminatev>

Disassembly of section .text.__cxa_free_dependent_exception:

0000000000000000 <__cxa_free_dependent_exception>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x1, 0 <__cxa_free_dependent_exception>
   c:	ldr	x1, [x1]
  10:	cmp	x0, x1
  14:	b.ls	2c <__cxa_free_dependent_exception+0x2c>  // b.plast
  18:	adrp	x2, 0 <__cxa_free_dependent_exception>
  1c:	ldr	x2, [x2]
  20:	add	x1, x1, x2
  24:	cmp	x0, x1
  28:	b.cc	38 <__cxa_free_dependent_exception+0x38>  // b.lo, b.ul, b.last
  2c:	bl	0 <free>
  30:	ldp	x29, x30, [sp], #16
  34:	ret
  38:	mov	x1, x0
  3c:	adrp	x0, 0 <__cxa_free_dependent_exception>
  40:	add	x0, x0, #0x0
  44:	bl	0 <__cxa_free_dependent_exception>
  48:	b	30 <__cxa_free_dependent_exception+0x30>

Disassembly of section .text._GLOBAL__sub_I_eh_alloc.cc:

0000000000000000 <_GLOBAL__sub_I_eh_alloc.cc>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	adrp	x19, 0 <_GLOBAL__sub_I_eh_alloc.cc>
  10:	add	x19, x19, #0x0
  14:	stp	xzr, xzr, [x19]
  18:	stp	xzr, xzr, [x19, #16]
  1c:	stp	xzr, xzr, [x19, #32]
  20:	mov	x0, #0x1c00                	// #7168
  24:	movk	x0, #0x1, lsl #16
  28:	str	x0, [x19, #64]
  2c:	bl	0 <malloc>
  30:	str	x0, [x19, #56]
  34:	cbz	x0, 5c <_GLOBAL__sub_I_eh_alloc.cc+0x5c>
  38:	adrp	x1, 0 <_GLOBAL__sub_I_eh_alloc.cc>
  3c:	str	x0, [x1]
  40:	mov	x1, #0x1c00                	// #7168
  44:	movk	x1, #0x1, lsl #16
  48:	str	x1, [x0]
  4c:	str	xzr, [x0, #8]
  50:	ldr	x19, [sp, #16]
  54:	ldp	x29, x30, [sp], #32
  58:	ret
  5c:	str	xzr, [x19, #64]
  60:	str	xzr, [x19, #48]
  64:	b	50 <_GLOBAL__sub_I_eh_alloc.cc+0x50>

eh_arm.o:     file format elf64-littleaarch64


eh_aux_runtime.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_bad_cast:

0000000000000000 <__cxa_bad_cast>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	mov	x0, #0x8                   	// #8
   c:	bl	0 <__cxa_allocate_exception>
  10:	adrp	x1, 0 <_ZTVSt8bad_cast>
  14:	ldr	x1, [x1]
  18:	add	x1, x1, #0x10
  1c:	str	x1, [x0]
  20:	adrp	x2, 0 <_ZNSt8bad_castD1Ev>
  24:	ldr	x2, [x2]
  28:	adrp	x1, 0 <_ZTISt8bad_cast>
  2c:	ldr	x1, [x1]
  30:	bl	0 <__cxa_throw>

Disassembly of section .text.__cxa_bad_typeid:

0000000000000000 <__cxa_bad_typeid>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	mov	x0, #0x8                   	// #8
   c:	bl	0 <__cxa_allocate_exception>
  10:	adrp	x1, 0 <_ZTVSt10bad_typeid>
  14:	ldr	x1, [x1]
  18:	add	x1, x1, #0x10
  1c:	str	x1, [x0]
  20:	adrp	x2, 0 <_ZNSt10bad_typeidD1Ev>
  24:	ldr	x2, [x2]
  28:	adrp	x1, 0 <_ZTISt10bad_typeid>
  2c:	ldr	x1, [x1]
  30:	bl	0 <__cxa_throw>

Disassembly of section .text.__cxa_throw_bad_array_new_length:

0000000000000000 <__cxa_throw_bad_array_new_length>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	mov	x0, #0x8                   	// #8
   c:	bl	0 <__cxa_allocate_exception>
  10:	adrp	x1, 0 <_ZTVSt20bad_array_new_length>
  14:	ldr	x1, [x1]
  18:	add	x1, x1, #0x10
  1c:	str	x1, [x0]
  20:	adrp	x2, 0 <_ZNSt20bad_array_new_lengthD1Ev>
  24:	ldr	x2, [x2]
  28:	adrp	x1, 0 <_ZTISt20bad_array_new_length>
  2c:	ldr	x1, [x1]
  30:	bl	0 <__cxa_throw>

eh_call.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_call_terminate:

0000000000000000 <__cxa_call_terminate>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	cbz	x0, 38 <__cxa_call_terminate+0x38>
  10:	mov	x19, x0
  14:	bl	0 <__cxa_begin_catch>
  18:	ldr	x0, [x19]
  1c:	mov	x1, #0xd500                	// #54528
  20:	movk	x1, #0xbcd4, lsl #16
  24:	movk	x1, #0xaabc, lsl #32
  28:	movk	x1, #0xb8b1, lsl #48
  2c:	add	x0, x0, x1
  30:	cmp	x0, #0x1
  34:	b.ls	3c <__cxa_call_terminate+0x3c>  // b.plast
  38:	bl	0 <_ZSt9terminatev>
  3c:	ldur	x0, [x19, #-56]
  40:	bl	0 <_ZN10__cxxabiv111__terminateEPFvvE>

eh_catch.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_get_exception_ptr:

0000000000000000 <__cxa_get_exception_ptr>:
   0:	ldur	x0, [x0, #-8]
   4:	ret

Disassembly of section .text.__cxa_begin_catch:

0000000000000000 <__cxa_begin_catch>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <__cxa_get_globals>
  14:	mov	x1, x0
  18:	ldr	x0, [x0]
  1c:	mov	x2, x19
  20:	ldr	x3, [x2], #-80
  24:	mov	x4, #0xd500                	// #54528
  28:	movk	x4, #0xbcd4, lsl #16
  2c:	movk	x4, #0xaabc, lsl #32
  30:	movk	x4, #0xb8b1, lsl #48
  34:	add	x3, x3, x4
  38:	cmp	x3, #0x1
  3c:	b.ls	58 <__cxa_begin_catch+0x58>  // b.plast
  40:	cbnz	x0, 54 <__cxa_begin_catch+0x54>
  44:	str	x2, [x1]
  48:	ldr	x19, [sp, #16]
  4c:	ldp	x29, x30, [sp], #32
  50:	ret
  54:	bl	0 <_ZSt9terminatev>
  58:	ldur	w3, [x19, #-40]
  5c:	mov	w4, #0x1                   	// #1
  60:	sub	w4, w4, w3
  64:	cmp	w3, #0x0
  68:	csinc	w3, w4, w3, lt  // lt = tstop
  6c:	stur	w3, [x19, #-40]
  70:	ldr	w3, [x1, #8]
  74:	sub	w3, w3, #0x1
  78:	str	w3, [x1, #8]
  7c:	cmp	x0, x2
  80:	b.eq	8c <__cxa_begin_catch+0x8c>  // b.none
  84:	stur	x0, [x19, #-48]
  88:	str	x2, [x1]
  8c:	ldur	x0, [x19, #-8]
  90:	b	48 <__cxa_begin_catch+0x48>

Disassembly of section .text.__cxa_end_catch:

0000000000000000 <__cxa_end_catch>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals_fast>
   c:	ldr	x1, [x0]
  10:	cbz	x1, 4c <__cxa_end_catch+0x4c>
  14:	ldr	x2, [x1, #80]
  18:	mov	x3, #0xd500                	// #54528
  1c:	movk	x3, #0xbcd4, lsl #16
  20:	movk	x3, #0xaabc, lsl #32
  24:	movk	x3, #0xb8b1, lsl #48
  28:	add	x2, x2, x3
  2c:	cmp	x2, #0x1
  30:	b.hi	54 <__cxa_end_catch+0x54>  // b.pmore
  34:	ldr	w2, [x1, #40]
  38:	tbnz	w2, #31, 64 <__cxa_end_catch+0x64>
  3c:	subs	w2, w2, #0x1
  40:	b.eq	78 <__cxa_end_catch+0x78>  // b.none
  44:	tbnz	w2, #31, 8c <__cxa_end_catch+0x8c>
  48:	str	w2, [x1, #40]
  4c:	ldp	x29, x30, [sp], #16
  50:	ret
  54:	str	xzr, [x0]
  58:	add	x0, x1, #0x50
  5c:	bl	0 <_Unwind_DeleteException>
  60:	b	4c <__cxa_end_catch+0x4c>
  64:	adds	w2, w2, #0x1
  68:	b.ne	48 <__cxa_end_catch+0x48>  // b.any
  6c:	ldr	x3, [x1, #32]
  70:	str	x3, [x0]
  74:	b	48 <__cxa_end_catch+0x48>
  78:	ldr	x2, [x1, #32]
  7c:	str	x2, [x0]
  80:	add	x0, x1, #0x50
  84:	bl	0 <_Unwind_DeleteException>
  88:	b	4c <__cxa_end_catch+0x4c>
  8c:	bl	0 <_ZSt9terminatev>

Disassembly of section .text._ZSt18uncaught_exceptionv:

0000000000000000 <_ZSt18uncaught_exceptionv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals>
   c:	ldr	w0, [x0, #8]
  10:	cmp	w0, #0x0
  14:	cset	w0, ne  // ne = any
  18:	ldp	x29, x30, [sp], #16
  1c:	ret

Disassembly of section .text._ZSt19uncaught_exceptionsv:

0000000000000000 <_ZSt19uncaught_exceptionsv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals>
   c:	ldr	w0, [x0, #8]
  10:	ldp	x29, x30, [sp], #16
  14:	ret

eh_exception.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt9exceptionD2Ev:

0000000000000000 <_ZNSt9exceptionD1Ev>:
   0:	ret

Disassembly of section .text._ZNSt13bad_exceptionD2Ev:

0000000000000000 <_ZNSt13bad_exceptionD1Ev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x1, 0 <_ZNSt13bad_exceptionD1Ev>
   c:	ldr	x1, [x1]
  10:	add	x1, x1, #0x10
  14:	str	x1, [x0]
  18:	bl	0 <_ZNSt13bad_exceptionD1Ev>
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

Disassembly of section .text._ZNKSt9exception4whatEv:

0000000000000000 <_ZNKSt9exception4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt9exception4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNKSt13bad_exception4whatEv:

0000000000000000 <_ZNKSt13bad_exception4whatEv>:
   0:	adrp	x0, 0 <_ZNKSt13bad_exception4whatEv>
   4:	add	x0, x0, #0x0
   8:	ret

Disassembly of section .text._ZNSt9exceptionD0Ev:

0000000000000000 <_ZNSt9exceptionD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt9exceptionD0Ev>
  14:	mov	x1, #0x8                   	// #8
  18:	mov	x0, x19
  1c:	bl	0 <_ZdlPvm>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

Disassembly of section .text._ZNSt13bad_exceptionD0Ev:

0000000000000000 <_ZNSt13bad_exceptionD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt13bad_exceptionD0Ev>
  14:	mov	x1, #0x8                   	// #8
  18:	mov	x0, x19
  1c:	bl	0 <_ZdlPvm>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

Disassembly of section .text._ZN10__cxxabiv115__forced_unwindD2Ev:

0000000000000000 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
   0:	ret

Disassembly of section .text._ZN10__cxxabiv115__forced_unwindD0Ev:

0000000000000000 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv115__forced_unwindD0Ev>
  14:	mov	x1, #0x8                   	// #8
  18:	mov	x0, x19
  1c:	bl	0 <_ZdlPvm>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

Disassembly of section .text._ZN10__cxxabiv119__foreign_exceptionD2Ev:

0000000000000000 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
   0:	ret

Disassembly of section .text._ZN10__cxxabiv119__foreign_exceptionD0Ev:

0000000000000000 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>
  14:	mov	x1, #0x8                   	// #8
  18:	mov	x0, x19
  1c:	bl	0 <_ZdlPvm>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

Disassembly of section .text._ZGTtNKSt9exceptionD1Ev:

0000000000000000 <_ZGTtNKSt9exceptionD1Ev>:
   0:	ret

Disassembly of section .text._ZGTtNKSt9exception4whatEv:

0000000000000000 <_ZGTtNKSt9exception4whatEv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZGTtNKSt9exception4whatEv>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

Disassembly of section .text._ZGTtNKSt13bad_exceptionD1Ev:

0000000000000000 <_ZGTtNKSt13bad_exceptionD1Ev>:
   0:	ret

Disassembly of section .text._ZGTtNKSt13bad_exception4whatEv:

0000000000000000 <_ZGTtNKSt13bad_exception4whatEv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZGTtNKSt13bad_exception4whatEv>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

eh_globals.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_get_globals_fast:

0000000000000000 <__cxa_get_globals_fast>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x0, 0 <__cxa_get_globals_fast>
   c:	ldr	x1, [x0]
  10:	add	x0, x0, #0x0
  14:	blr	x1
  18:	mrs	x1, tpidr_el0
  1c:	add	x0, x1, x0
  20:	ldp	x29, x30, [sp], #16
  24:	ret

Disassembly of section .text.__cxa_get_globals:

0000000000000000 <__cxa_get_globals>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x0, 0 <__cxa_get_globals>
   c:	ldr	x1, [x0]
  10:	add	x0, x0, #0x0
  14:	blr	x1
  18:	mrs	x1, tpidr_el0
  1c:	add	x0, x1, x0
  20:	ldp	x29, x30, [sp], #16
  24:	ret

eh_personality.o:     file format elf64-littleaarch64


Disassembly of section .text._ZL12read_uleb128PKhPm:

0000000000000000 <_ZL12read_uleb128PKhPm>:
   0:	mov	x5, #0x0                   	// #0
   4:	mov	w3, #0x0                   	// #0
   8:	ldrb	w4, [x0], #1
   c:	and	x2, x4, #0x7f
  10:	lsl	x2, x2, x3
  14:	orr	x5, x5, x2
  18:	add	w3, w3, #0x7
  1c:	tbnz	w4, #7, 8 <_ZL12read_uleb128PKhPm+0x8>
  20:	str	x5, [x1]
  24:	ret

Disassembly of section .text._ZL12read_sleb128PKhPl:

0000000000000000 <_ZL12read_sleb128PKhPl>:
   0:	mov	x5, #0x0                   	// #0
   4:	mov	w3, #0x0                   	// #0
   8:	ldrb	w4, [x0], #1
   c:	and	x2, x4, #0x7f
  10:	lsl	x2, x2, x3
  14:	orr	x5, x5, x2
  18:	add	w3, w3, #0x7
  1c:	tbnz	w4, #7, 8 <_ZL12read_sleb128PKhPl+0x8>
  20:	cmp	w3, #0x3f
  24:	b.hi	3c <_ZL12read_sleb128PKhPl+0x3c>  // b.pmore
  28:	mov	x2, #0xffffffffffffffff    	// #-1
  2c:	lsl	x3, x2, x3
  30:	orr	x3, x5, x3
  34:	tst	x4, #0x40
  38:	csel	x5, x3, x5, ne  // ne = any
  3c:	str	x5, [x1]
  40:	ret

Disassembly of section .text._ZL16get_adjusted_ptrPKSt9type_infoS1_PPv:

0000000000000000 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	str	x21, [sp, #32]
  10:	mov	x20, x0
  14:	mov	x19, x1
  18:	mov	x21, x2
  1c:	ldr	x0, [x2]
  20:	str	x0, [sp, #56]
  24:	ldr	x0, [x1]
  28:	ldr	x1, [x0, #16]
  2c:	mov	x0, x19
  30:	blr	x1
  34:	and	w0, w0, #0xff
  38:	cbz	w0, 48 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x48>
  3c:	ldr	x0, [sp, #56]
  40:	ldr	x0, [x0]
  44:	str	x0, [sp, #56]
  48:	ldr	x0, [x20]
  4c:	ldr	x4, [x0, #32]
  50:	mov	w3, #0x1                   	// #1
  54:	add	x2, sp, #0x38
  58:	mov	x1, x19
  5c:	mov	x0, x20
  60:	blr	x4
  64:	mov	w1, w0
  68:	tst	w0, #0xff
  6c:	b.ne	84 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x84>  // b.any
  70:	mov	w0, w1
  74:	ldp	x19, x20, [sp, #16]
  78:	ldr	x21, [sp, #32]
  7c:	ldp	x29, x30, [sp], #64
  80:	ret
  84:	ldr	x0, [sp, #56]
  88:	str	x0, [x21]
  8c:	b	70 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x70>

Disassembly of section .text._ZL28read_encoded_value_with_basehmPKhPm:

0000000000000000 <_ZL28read_encoded_value_with_basehmPKhPm>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	and	w22, w0, #0xff
  14:	mov	x19, x2
  18:	mov	x20, x3
  1c:	cmp	w22, #0x50
  20:	b.eq	60 <_ZL28read_encoded_value_with_basehmPKhPm+0x60>  // b.none
  24:	mov	x21, x1
  28:	and	w0, w22, #0xf
  2c:	cmp	w0, #0x4
  30:	b.eq	128 <_ZL28read_encoded_value_with_basehmPKhPm+0x128>  // b.none
  34:	cmp	w0, #0x4
  38:	b.ls	80 <_ZL28read_encoded_value_with_basehmPKhPm+0x80>  // b.plast
  3c:	cmp	w0, #0xb
  40:	b.eq	134 <_ZL28read_encoded_value_with_basehmPKhPm+0x134>  // b.none
  44:	cmp	w0, #0xb
  48:	b.ls	c4 <_ZL28read_encoded_value_with_basehmPKhPm+0xc4>  // b.plast
  4c:	cmp	w0, #0xc
  50:	b.ne	140 <_ZL28read_encoded_value_with_basehmPKhPm+0x140>  // b.any
  54:	mov	x0, x2
  58:	ldr	x2, [x0], #8
  5c:	b	e8 <_ZL28read_encoded_value_with_basehmPKhPm+0xe8>
  60:	add	x0, x2, #0x7
  64:	and	x0, x0, #0xfffffffffffffff8
  68:	ldr	x2, [x0], #8
  6c:	str	x2, [x20]
  70:	ldp	x19, x20, [sp, #16]
  74:	ldp	x21, x22, [sp, #32]
  78:	ldp	x29, x30, [sp], #64
  7c:	ret
  80:	cmp	w0, #0x2
  84:	b.eq	11c <_ZL28read_encoded_value_with_basehmPKhPm+0x11c>  // b.none
  88:	cmp	w0, #0x2
  8c:	b.ls	a4 <_ZL28read_encoded_value_with_basehmPKhPm+0xa4>  // b.plast
  90:	cmp	w0, #0x3
  94:	b.ne	140 <_ZL28read_encoded_value_with_basehmPKhPm+0x140>  // b.any
  98:	mov	x0, x2
  9c:	ldr	w2, [x0], #4
  a0:	b	e8 <_ZL28read_encoded_value_with_basehmPKhPm+0xe8>
  a4:	cbz	w0, e0 <_ZL28read_encoded_value_with_basehmPKhPm+0xe0>
  a8:	cmp	w0, #0x1
  ac:	b.ne	140 <_ZL28read_encoded_value_with_basehmPKhPm+0x140>  // b.any
  b0:	add	x1, sp, #0x38
  b4:	mov	x0, x2
  b8:	bl	0 <_ZL28read_encoded_value_with_basehmPKhPm>
  bc:	ldr	x2, [sp, #56]
  c0:	b	e8 <_ZL28read_encoded_value_with_basehmPKhPm+0xe8>
  c4:	cmp	w0, #0x9
  c8:	b.eq	108 <_ZL28read_encoded_value_with_basehmPKhPm+0x108>  // b.none
  cc:	cmp	w0, #0xa
  d0:	b.ne	140 <_ZL28read_encoded_value_with_basehmPKhPm+0x140>  // b.any
  d4:	mov	x0, x2
  d8:	ldrsh	x2, [x0], #2
  dc:	b	e8 <_ZL28read_encoded_value_with_basehmPKhPm+0xe8>
  e0:	mov	x0, x2
  e4:	ldr	x2, [x0], #8
  e8:	cbz	x2, 6c <_ZL28read_encoded_value_with_basehmPKhPm+0x6c>
  ec:	and	w1, w22, #0x70
  f0:	cmp	w1, #0x10
  f4:	csel	x21, x19, x21, eq  // eq = none
  f8:	add	x2, x2, x21
  fc:	tbz	w22, #7, 6c <_ZL28read_encoded_value_with_basehmPKhPm+0x6c>
 100:	ldr	x2, [x2]
 104:	b	6c <_ZL28read_encoded_value_with_basehmPKhPm+0x6c>
 108:	add	x1, sp, #0x38
 10c:	mov	x0, x2
 110:	bl	0 <_ZL28read_encoded_value_with_basehmPKhPm>
 114:	ldr	x2, [sp, #56]
 118:	b	e8 <_ZL28read_encoded_value_with_basehmPKhPm+0xe8>
 11c:	mov	x0, x2
 120:	ldrh	w2, [x0], #2
 124:	b	e8 <_ZL28read_encoded_value_with_basehmPKhPm+0xe8>
 128:	mov	x0, x2
 12c:	ldr	x2, [x0], #8
 130:	b	e8 <_ZL28read_encoded_value_with_basehmPKhPm+0xe8>
 134:	mov	x0, x2
 138:	ldrsw	x2, [x0], #4
 13c:	b	e8 <_ZL28read_encoded_value_with_basehmPKhPm+0xe8>
 140:	bl	0 <abort>

Disassembly of section .text._ZL15get_ttype_entryP16lsda_header_infom:

0000000000000000 <_ZL15get_ttype_entryP16lsda_header_infom>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	mov	x4, x0
   c:	ldrb	w0, [x0, #40]
  10:	cmp	w0, #0xff
  14:	b.eq	70 <_ZL15get_ttype_entryP16lsda_header_infom+0x70>  // b.none
  18:	and	w5, w0, #0x7
  1c:	cmp	w5, #0x2
  20:	b.eq	78 <_ZL15get_ttype_entryP16lsda_header_infom+0x78>  // b.none
  24:	b.ls	44 <_ZL15get_ttype_entryP16lsda_header_infom+0x44>  // b.plast
  28:	mov	w3, #0x4                   	// #4
  2c:	cmp	w5, #0x3
  30:	b.eq	4c <_ZL15get_ttype_entryP16lsda_header_infom+0x4c>  // b.none
  34:	mov	w3, #0x8                   	// #8
  38:	cmp	w5, #0x4
  3c:	b.eq	4c <_ZL15get_ttype_entryP16lsda_header_infom+0x4c>  // b.none
  40:	bl	0 <abort>
  44:	mov	w3, #0x8                   	// #8
  48:	cbnz	w5, 40 <_ZL15get_ttype_entryP16lsda_header_infom+0x40>
  4c:	mov	w5, w3
  50:	ldr	x2, [x4, #24]
  54:	add	x3, sp, #0x18
  58:	msub	x2, x5, x1, x2
  5c:	ldr	x1, [x4, #16]
  60:	bl	0 <_ZL15get_ttype_entryP16lsda_header_infom>
  64:	ldr	x0, [sp, #24]
  68:	ldp	x29, x30, [sp], #32
  6c:	ret
  70:	mov	w3, #0x0                   	// #0
  74:	b	4c <_ZL15get_ttype_entryP16lsda_header_infom+0x4c>
  78:	mov	w3, #0x2                   	// #2
  7c:	b	4c <_ZL15get_ttype_entryP16lsda_header_infom+0x4c>

Disassembly of section .text._ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl:

0000000000000000 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	str	x23, [sp, #48]
  14:	mov	x20, x0
  18:	mov	x21, x1
  1c:	str	x2, [sp, #72]
  20:	mvn	x3, x3
  24:	ldr	x19, [x0, #24]
  28:	add	x19, x19, x3
  2c:	add	x22, sp, #0x58
  30:	add	x23, sp, #0x48
  34:	mov	x1, x22
  38:	mov	x0, x19
  3c:	bl	0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
  40:	mov	x19, x0
  44:	ldr	x1, [sp, #88]
  48:	cbz	x1, 6c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x6c>
  4c:	mov	x0, x20
  50:	bl	0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
  54:	mov	x2, x23
  58:	mov	x1, x21
  5c:	bl	0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
  60:	ands	w0, w0, #0xff
  64:	b.eq	34 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x34>  // b.none
  68:	b	70 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x70>
  6c:	mov	w0, #0x0                   	// #0
  70:	ldp	x19, x20, [sp, #16]
  74:	ldp	x21, x22, [sp, #32]
  78:	ldr	x23, [sp, #48]
  7c:	ldp	x29, x30, [sp], #96
  80:	ret

Disassembly of section .text._ZL21base_of_encoded_valuehP15_Unwind_Context:

0000000000000000 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   0:	and	w3, w0, #0xff
   4:	cmp	w3, #0xff
   8:	b.eq	74 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x74>  // b.none
   c:	stp	x29, x30, [sp, #-16]!
  10:	mov	x29, sp
  14:	mov	x0, x1
  18:	and	w2, w3, #0x70
  1c:	cmp	w2, #0x30
  20:	b.eq	6c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>  // b.none
  24:	b.hi	48 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>  // b.pmore
  28:	cmp	w2, #0x20
  2c:	b.ne	38 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>  // b.any
  30:	bl	0 <_Unwind_GetTextRelBase>
  34:	b	64 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
  38:	b.hi	44 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x44>  // b.pmore
  3c:	tst	w3, #0x60
  40:	b.eq	7c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>  // b.none
  44:	bl	0 <abort>
  48:	cmp	w2, #0x40
  4c:	b.ne	58 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x58>  // b.any
  50:	bl	0 <_Unwind_GetRegionStart>
  54:	b	64 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
  58:	mov	x0, #0x0                   	// #0
  5c:	cmp	w2, #0x50
  60:	b.ne	44 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x44>  // b.any
  64:	ldp	x29, x30, [sp], #16
  68:	ret
  6c:	bl	0 <_Unwind_GetDataRelBase>
  70:	b	64 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
  74:	mov	x0, #0x0                   	// #0
  78:	ret
  7c:	mov	x0, #0x0                   	// #0
  80:	b	64 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>

Disassembly of section .text._ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info:

0000000000000000 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	mov	x21, x0
  14:	mov	x19, x1
  18:	mov	x20, x2
  1c:	mov	x0, #0x0                   	// #0
  20:	cbz	x21, 2c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x2c>
  24:	mov	x0, x21
  28:	bl	0 <_Unwind_GetRegionStart>
  2c:	str	x0, [x20]
  30:	ldrb	w22, [x19], #1
  34:	cmp	w22, #0xff
  38:	b.ne	84 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x84>  // b.any
  3c:	str	x0, [x20, #8]
  40:	mov	x0, x19
  44:	ldrb	w1, [x0], #1
  48:	strb	w1, [x20, #40]
  4c:	cmp	w1, #0xff
  50:	b.ne	ac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xac>  // b.any
  54:	str	xzr, [x20, #24]
  58:	ldrb	w1, [x0], #1
  5c:	strb	w1, [x20, #41]
  60:	add	x1, sp, #0x38
  64:	bl	0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  68:	ldr	x1, [sp, #56]
  6c:	add	x1, x0, x1
  70:	str	x1, [x20, #32]
  74:	ldp	x19, x20, [sp, #16]
  78:	ldp	x21, x22, [sp, #32]
  7c:	ldp	x29, x30, [sp], #64
  80:	ret
  84:	mov	x1, x21
  88:	mov	w0, w22
  8c:	bl	0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  90:	add	x3, x20, #0x8
  94:	mov	x2, x19
  98:	mov	x1, x0
  9c:	mov	w0, w22
  a0:	bl	0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  a4:	mov	x19, x0
  a8:	b	40 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x40>
  ac:	add	x1, sp, #0x38
  b0:	bl	0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  b4:	ldr	x1, [sp, #56]
  b8:	add	x1, x0, x1
  bc:	str	x1, [x20, #24]
  c0:	b	58 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>

Disassembly of section .text.__gxx_personality_v0:

0000000000000000 <__gxx_personality_v0>:
   0:	stp	x29, x30, [sp, #-256]!
   4:	mov	x29, sp
   8:	str	w1, [sp, #112]
   c:	str	x3, [sp, #104]
  10:	str	xzr, [sp, #200]
  14:	str	wzr, [sp, #196]
  18:	cmp	w0, #0x1
  1c:	b.ne	448 <__gxx_personality_v0+0x448>  // b.any
  20:	stp	x19, x20, [sp, #16]
  24:	stp	x21, x22, [sp, #32]
  28:	stp	x23, x24, [sp, #48]
  2c:	mov	x21, x4
  30:	mov	x20, #0xd500                	// #54528
  34:	movk	x20, #0xbcd4, lsl #16
  38:	movk	x20, #0xaabc, lsl #32
  3c:	movk	x20, #0xb8b1, lsl #48
  40:	add	x20, x2, x20
  44:	cmp	x20, #0x1
  48:	cset	w0, ls  // ls = plast
  4c:	str	w0, [sp, #124]
  50:	cmp	w1, #0x6
  54:	csel	w22, w0, wzr, eq  // eq = none
  58:	cbz	w22, b0 <__gxx_personality_v0+0xb0>
  5c:	ldur	x19, [x3, #-16]
  60:	cbz	x19, 438 <__gxx_personality_v0+0x438>
  64:	ldr	x0, [sp, #104]
  68:	ldur	w23, [x0, #-36]
  6c:	ldur	x0, [x0, #-24]
  70:	str	x0, [sp, #128]
  74:	tbz	w23, #31, 3d0 <__gxx_personality_v0+0x3d0>
  78:	add	x2, sp, #0xd0
  7c:	ldr	x1, [sp, #128]
  80:	mov	x0, x21
  84:	bl	0 <__gxx_personality_v0>
  88:	mov	x1, x21
  8c:	ldrb	w0, [sp, #248]
  90:	bl	0 <__gxx_personality_v0>
  94:	str	x0, [sp, #224]
  98:	mov	x1, x21
  9c:	ldrb	w0, [sp, #248]
  a0:	bl	0 <__gxx_personality_v0>
  a4:	ldr	x1, [sp, #104]
  a8:	stur	x0, [x1, #-16]
  ac:	b	3d0 <__gxx_personality_v0+0x3d0>
  b0:	mov	x0, x4
  b4:	bl	0 <_Unwind_GetLanguageSpecificData>
  b8:	str	x0, [sp, #128]
  bc:	cbz	x0, 454 <__gxx_personality_v0+0x454>
  c0:	add	x2, sp, #0xd0
  c4:	mov	x1, x0
  c8:	mov	x0, x21
  cc:	bl	0 <__gxx_personality_v0>
  d0:	mov	x19, x0
  d4:	mov	x1, x21
  d8:	ldrb	w0, [sp, #248]
  dc:	bl	0 <__gxx_personality_v0>
  e0:	str	x0, [sp, #224]
  e4:	add	x1, sp, #0xc4
  e8:	mov	x0, x21
  ec:	bl	0 <_Unwind_GetIPInfo>
  f0:	ldr	w1, [sp, #196]
  f4:	cmp	w1, #0x0
  f8:	cset	x1, eq  // eq = none
  fc:	sub	x23, x0, x1
 100:	ldr	x0, [sp, #240]
 104:	cmp	x19, x0
 108:	b.cs	484 <__gxx_personality_v0+0x484>  // b.hs, b.nlast
 10c:	stp	x25, x26, [sp, #64]
 110:	stp	x27, x28, [sp, #80]
 114:	add	x27, sp, #0xa0
 118:	add	x26, sp, #0xa8
 11c:	add	x25, sp, #0xb0
 120:	add	x24, sp, #0xb8
 124:	b	144 <__gxx_personality_v0+0x144>
 128:	ldr	x1, [sp, #168]
 12c:	add	x0, x0, x1
 130:	cmp	x0, x23
 134:	b.hi	220 <__gxx_personality_v0+0x220>  // b.pmore
 138:	ldr	x0, [sp, #240]
 13c:	cmp	x0, x19
 140:	b.ls	490 <__gxx_personality_v0+0x490>  // b.plast
 144:	ldrb	w28, [sp, #249]
 148:	mov	x1, #0x0                   	// #0
 14c:	mov	w0, w28
 150:	bl	0 <__gxx_personality_v0>
 154:	mov	x3, x27
 158:	mov	x2, x19
 15c:	mov	x1, x0
 160:	mov	w0, w28
 164:	bl	0 <__gxx_personality_v0>
 168:	mov	x19, x0
 16c:	ldrb	w28, [sp, #249]
 170:	mov	x1, #0x0                   	// #0
 174:	mov	w0, w28
 178:	bl	0 <__gxx_personality_v0>
 17c:	mov	x3, x26
 180:	mov	x2, x19
 184:	mov	x1, x0
 188:	mov	w0, w28
 18c:	bl	0 <__gxx_personality_v0>
 190:	mov	x19, x0
 194:	ldrb	w28, [sp, #249]
 198:	mov	x1, #0x0                   	// #0
 19c:	mov	w0, w28
 1a0:	bl	0 <__gxx_personality_v0>
 1a4:	mov	x3, x25
 1a8:	mov	x2, x19
 1ac:	mov	x1, x0
 1b0:	mov	w0, w28
 1b4:	bl	0 <__gxx_personality_v0>
 1b8:	mov	x1, x24
 1bc:	bl	0 <__gxx_personality_v0>
 1c0:	mov	x19, x0
 1c4:	ldr	x0, [sp, #208]
 1c8:	ldr	x1, [sp, #160]
 1cc:	add	x0, x0, x1
 1d0:	cmp	x0, x23
 1d4:	b.ls	128 <__gxx_personality_v0+0x128>  // b.plast
 1d8:	mov	x19, #0x0                   	// #0
 1dc:	mov	w1, #0x1                   	// #1
 1e0:	ldp	x25, x26, [sp, #64]
 1e4:	ldp	x27, x28, [sp, #80]
 1e8:	mov	w23, #0x0                   	// #0
 1ec:	mov	x24, #0x0                   	// #0
 1f0:	ldr	x0, [sp, #112]
 1f4:	tbz	w0, #0, 3b4 <__gxx_personality_v0+0x3b4>
 1f8:	mov	w0, #0x8                   	// #8
 1fc:	cmp	w1, #0x2
 200:	b.eq	518 <__gxx_personality_v0+0x518>  // b.none
 204:	mov	w0, #0x6                   	// #6
 208:	cmp	x20, #0x1
 20c:	b.ls	380 <__gxx_personality_v0+0x380>  // b.plast
 210:	ldp	x19, x20, [sp, #16]
 214:	ldp	x21, x22, [sp, #32]
 218:	ldp	x23, x24, [sp, #48]
 21c:	b	44c <__gxx_personality_v0+0x44c>
 220:	ldr	x19, [sp, #176]
 224:	cbz	x19, 230 <__gxx_personality_v0+0x230>
 228:	ldr	x0, [sp, #216]
 22c:	add	x19, x19, x0
 230:	ldr	x0, [sp, #184]
 234:	cbz	x0, 4e8 <__gxx_personality_v0+0x4e8>
 238:	sub	x0, x0, #0x1
 23c:	ldr	x24, [sp, #240]
 240:	add	x24, x24, x0
 244:	cbz	x19, 468 <__gxx_personality_v0+0x468>
 248:	cbz	x24, 4a4 <__gxx_personality_v0+0x4a4>
 24c:	ldr	w0, [sp, #112]
 250:	and	w28, w0, #0x8
 254:	tbnz	w0, #3, 288 <__gxx_personality_v0+0x288>
 258:	adrp	x27, 0 <_ZTIN10__cxxabiv119__foreign_exceptionE>
 25c:	ldr	x27, [x27]
 260:	cmp	x20, #0x1
 264:	b.hi	290 <__gxx_personality_v0+0x290>  // b.pmore
 268:	ldr	x2, [sp, #104]
 26c:	mov	x0, x2
 270:	ldr	x1, [x0], #32
 274:	tbz	w1, #0, 27c <__gxx_personality_v0+0x27c>
 278:	ldur	x0, [x2, #-80]
 27c:	str	x0, [sp, #200]
 280:	ldur	x27, [x0, #-112]
 284:	b	290 <__gxx_personality_v0+0x290>
 288:	adrp	x27, 0 <_ZTIN10__cxxabiv115__forced_unwindE>
 28c:	ldr	x27, [x27]
 290:	add	x25, sp, #0xa8
 294:	add	x26, sp, #0xb0
 298:	add	x0, sp, #0xb8
 29c:	str	x0, [sp, #136]
 2a0:	add	x0, sp, #0xd0
 2a4:	str	x0, [sp, #144]
 2a8:	add	x0, sp, #0xc8
 2ac:	str	x0, [sp, #152]
 2b0:	b	30c <__gxx_personality_v0+0x30c>
 2b4:	ldr	x0, [sp, #144]
 2b8:	bl	0 <__gxx_personality_v0>
 2bc:	cbz	x0, 36c <__gxx_personality_v0+0x36c>
 2c0:	cbz	x27, 300 <__gxx_personality_v0+0x300>
 2c4:	ldr	x2, [sp, #152]
 2c8:	mov	x1, x27
 2cc:	bl	0 <__gxx_personality_v0>
 2d0:	and	w0, w0, #0xff
 2d4:	cbz	w0, 300 <__gxx_personality_v0+0x300>
 2d8:	b	36c <__gxx_personality_v0+0x36c>
 2dc:	mov	x3, x1
 2e0:	ldr	x2, [sp, #200]
 2e4:	mov	x1, x27
 2e8:	ldr	x0, [sp, #144]
 2ec:	bl	0 <__gxx_personality_v0>
 2f0:	and	w0, w0, #0xff
 2f4:	eor	w0, w0, #0x1
 2f8:	b	368 <__gxx_personality_v0+0x368>
 2fc:	mov	w22, #0x1                   	// #1
 300:	ldr	x0, [sp, #176]
 304:	cbz	x0, 4b4 <__gxx_personality_v0+0x4b4>
 308:	add	x24, x23, x0
 30c:	mov	x1, x25
 310:	mov	x0, x24
 314:	bl	0 <__gxx_personality_v0>
 318:	mov	x23, x0
 31c:	mov	x1, x26
 320:	bl	0 <__gxx_personality_v0>
 324:	ldr	x1, [sp, #168]
 328:	cbz	x1, 2fc <__gxx_personality_v0+0x2fc>
 32c:	cmp	x1, #0x0
 330:	b.gt	2b4 <__gxx_personality_v0+0x2b4>
 334:	cmp	w28, #0x0
 338:	ldr	w0, [sp, #124]
 33c:	ccmp	w0, #0x0, #0x4, eq  // eq = none
 340:	ccmp	x27, #0x0, #0x4, ne  // ne = any
 344:	b.ne	2dc <__gxx_personality_v0+0x2dc>  // b.any
 348:	mvn	x0, x1
 34c:	ldr	x1, [sp, #136]
 350:	ldr	x2, [sp, #232]
 354:	add	x0, x2, x0
 358:	bl	0 <__gxx_personality_v0>
 35c:	ldr	x0, [sp, #184]
 360:	cmp	x0, #0x0
 364:	cset	w0, eq  // eq = none
 368:	cbz	w0, 300 <__gxx_personality_v0+0x300>
 36c:	ldr	w23, [sp, #168]
 370:	mov	w1, #0x3                   	// #3
 374:	ldp	x25, x26, [sp, #64]
 378:	ldp	x27, x28, [sp, #80]
 37c:	b	1f0 <__gxx_personality_v0+0x1f0>
 380:	ldr	x1, [sp, #104]
 384:	stur	w23, [x1, #-36]
 388:	stur	x24, [x1, #-32]
 38c:	ldr	x0, [sp, #128]
 390:	stur	x0, [x1, #-24]
 394:	ldr	x0, [sp, #200]
 398:	stur	x0, [x1, #-8]
 39c:	stur	x19, [x1, #-16]
 3a0:	mov	w0, #0x6                   	// #6
 3a4:	ldp	x19, x20, [sp, #16]
 3a8:	ldp	x21, x22, [sp, #32]
 3ac:	ldp	x23, x24, [sp, #48]
 3b0:	b	44c <__gxx_personality_v0+0x44c>
 3b4:	ldr	x0, [sp, #112]
 3b8:	tst	x0, #0x8
 3bc:	ccmp	x20, #0x1, #0x2, eq  // eq = none
 3c0:	b.ls	430 <__gxx_personality_v0+0x430>  // b.plast
 3c4:	cmp	w1, #0x1
 3c8:	b.eq	410 <__gxx_personality_v0+0x410>  // b.none
 3cc:	tbnz	w23, #31, 41c <__gxx_personality_v0+0x41c>
 3d0:	ldr	x2, [sp, #104]
 3d4:	mov	w1, #0x0                   	// #0
 3d8:	mov	x0, x21
 3dc:	bl	0 <_Unwind_SetGR>
 3e0:	sxtw	x2, w23
 3e4:	mov	w1, #0x1                   	// #1
 3e8:	mov	x0, x21
 3ec:	bl	0 <_Unwind_SetGR>
 3f0:	mov	x1, x19
 3f4:	mov	x0, x21
 3f8:	bl	0 <_Unwind_SetIP>
 3fc:	mov	w0, #0x7                   	// #7
 400:	ldp	x19, x20, [sp, #16]
 404:	ldp	x21, x22, [sp, #32]
 408:	ldp	x23, x24, [sp, #48]
 40c:	b	44c <__gxx_personality_v0+0x44c>
 410:	stp	x25, x26, [sp, #64]
 414:	stp	x27, x28, [sp, #80]
 418:	bl	0 <_ZSt9terminatev>
 41c:	stp	x25, x26, [sp, #64]
 420:	stp	x27, x28, [sp, #80]
 424:	bl	0 <_ZSt10unexpectedv>
 428:	bl	0 <__cxa_begin_catch>
 42c:	bl	0 <_ZSt9terminatev>
 430:	cmp	w1, #0x1
 434:	b.ne	74 <__gxx_personality_v0+0x74>  // b.any
 438:	stp	x25, x26, [sp, #64]
 43c:	stp	x27, x28, [sp, #80]
 440:	ldr	x0, [sp, #104]
 444:	bl	0 <__cxa_call_terminate>
 448:	mov	w0, #0x3                   	// #3
 44c:	ldp	x29, x30, [sp], #256
 450:	ret
 454:	mov	w0, #0x8                   	// #8
 458:	ldp	x19, x20, [sp, #16]
 45c:	ldp	x21, x22, [sp, #32]
 460:	ldp	x23, x24, [sp, #48]
 464:	b	44c <__gxx_personality_v0+0x44c>
 468:	mov	w0, #0x8                   	// #8
 46c:	ldp	x19, x20, [sp, #16]
 470:	ldp	x21, x22, [sp, #32]
 474:	ldp	x23, x24, [sp, #48]
 478:	ldp	x25, x26, [sp, #64]
 47c:	ldp	x27, x28, [sp, #80]
 480:	b	44c <__gxx_personality_v0+0x44c>
 484:	mov	x19, #0x0                   	// #0
 488:	mov	w1, #0x1                   	// #1
 48c:	b	1e8 <__gxx_personality_v0+0x1e8>
 490:	mov	x19, #0x0                   	// #0
 494:	mov	w1, #0x1                   	// #1
 498:	ldp	x25, x26, [sp, #64]
 49c:	ldp	x27, x28, [sp, #80]
 4a0:	b	1e8 <__gxx_personality_v0+0x1e8>
 4a4:	mov	w1, #0x2                   	// #2
 4a8:	ldp	x25, x26, [sp, #64]
 4ac:	ldp	x27, x28, [sp, #80]
 4b0:	b	1e8 <__gxx_personality_v0+0x1e8>
 4b4:	cbz	w22, 4cc <__gxx_personality_v0+0x4cc>
 4b8:	mov	w23, #0x0                   	// #0
 4bc:	mov	w1, #0x2                   	// #2
 4c0:	ldp	x25, x26, [sp, #64]
 4c4:	ldp	x27, x28, [sp, #80]
 4c8:	b	1f0 <__gxx_personality_v0+0x1f0>
 4cc:	mov	w0, #0x8                   	// #8
 4d0:	ldp	x19, x20, [sp, #16]
 4d4:	ldp	x21, x22, [sp, #32]
 4d8:	ldp	x23, x24, [sp, #48]
 4dc:	ldp	x25, x26, [sp, #64]
 4e0:	ldp	x27, x28, [sp, #80]
 4e4:	b	44c <__gxx_personality_v0+0x44c>
 4e8:	mov	w0, #0x8                   	// #8
 4ec:	cbnz	x19, 508 <__gxx_personality_v0+0x508>
 4f0:	ldp	x19, x20, [sp, #16]
 4f4:	ldp	x21, x22, [sp, #32]
 4f8:	ldp	x23, x24, [sp, #48]
 4fc:	ldp	x25, x26, [sp, #64]
 500:	ldp	x27, x28, [sp, #80]
 504:	b	44c <__gxx_personality_v0+0x44c>
 508:	mov	w1, #0x2                   	// #2
 50c:	ldp	x25, x26, [sp, #64]
 510:	ldp	x27, x28, [sp, #80]
 514:	b	1e8 <__gxx_personality_v0+0x1e8>
 518:	ldp	x19, x20, [sp, #16]
 51c:	ldp	x21, x22, [sp, #32]
 520:	ldp	x23, x24, [sp, #48]
 524:	b	44c <__gxx_personality_v0+0x44c>

Disassembly of section .text.__cxa_call_unexpected:

0000000000000000 <__cxa_call_unexpected>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	mov	x19, x0
  14:	bl	0 <__cxa_begin_catch>
  18:	ldur	x22, [x19, #-24]
  1c:	ldur	w20, [x19, #-36]
  20:	ldur	x21, [x19, #-56]
  24:	ldur	x0, [x19, #-16]
  28:	str	x0, [sp, #64]
  2c:	ldur	x0, [x19, #-64]
  30:	bl	0 <_ZN10__cxxabiv112__unexpectedEPFvvE>
  34:	bl	0 <__cxa_begin_catch>
  38:	bl	0 <__cxa_get_globals_fast>
  3c:	ldr	x19, [x0]
  40:	ldr	x0, [x19, #80]
  44:	tbz	w0, #0, 60 <__cxa_call_unexpected+0x60>
  48:	ldr	x19, [x19]
  4c:	add	x2, sp, #0x30
  50:	mov	x1, x22
  54:	mov	x0, #0x0                   	// #0
  58:	bl	0 <__cxa_call_unexpected>
  5c:	b	68 <__cxa_call_unexpected+0x68>
  60:	add	x19, x19, #0x70
  64:	b	4c <__cxa_call_unexpected+0x4c>
  68:	sxtw	x20, w20
  6c:	mov	x3, x20
  70:	mov	x2, x19
  74:	ldur	x1, [x19, #-112]
  78:	add	x0, sp, #0x30
  7c:	bl	0 <__cxa_call_unexpected>
  80:	and	w0, w0, #0xff
  84:	cbz	w0, a0 <__cxa_call_unexpected+0xa0>
  88:	bl	0 <__cxa_rethrow>
  8c:	mov	x19, x0
  90:	bl	0 <__cxa_end_catch>
  94:	bl	0 <__cxa_end_catch>
  98:	mov	x0, x19
  9c:	bl	0 <_Unwind_Resume>
  a0:	mov	x3, x20
  a4:	mov	x2, #0x0                   	// #0
  a8:	adrp	x1, 0 <_ZTISt13bad_exception>
  ac:	ldr	x1, [x1]
  b0:	add	x0, sp, #0x30
  b4:	bl	0 <__cxa_call_unexpected>
  b8:	and	w0, w0, #0xff
  bc:	cbz	w0, ec <__cxa_call_unexpected+0xec>
  c0:	mov	x0, #0x8                   	// #8
  c4:	bl	0 <__cxa_allocate_exception>
  c8:	adrp	x1, 0 <_ZTVSt13bad_exception>
  cc:	ldr	x1, [x1]
  d0:	add	x1, x1, #0x10
  d4:	str	x1, [x0]
  d8:	adrp	x2, 0 <_ZNSt13bad_exceptionD1Ev>
  dc:	ldr	x2, [x2]
  e0:	adrp	x1, 0 <_ZTISt13bad_exception>
  e4:	ldr	x1, [x1]
  e8:	bl	0 <__cxa_throw>
  ec:	mov	x0, x21
  f0:	bl	0 <_ZN10__cxxabiv111__terminateEPFvvE>

eh_ptr.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt15__exception_ptr13exception_ptr18_M_safe_bool_dummyEv:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptr18_M_safe_bool_dummyEv>:
   0:	ret

Disassembly of section .text._ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception:

0000000000000000 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	ldur	x19, [x1, #-80]
  10:	cmp	w0, #0x1
  14:	b.hi	60 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x60>  // b.pmore
  18:	sub	x2, x1, #0x50
  1c:	mov	x0, x2
  20:	bl	0 <__cxa_free_dependent_exception>
  24:	sub	x0, x19, #0x80
  28:	ldaxr	w1, [x0]
  2c:	sub	w1, w1, #0x1
  30:	stlxr	w2, w1, [x0]
  34:	cbnz	w2, 28 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
  38:	cbnz	w1, 54 <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x54>
  3c:	ldur	x1, [x19, #-104]
  40:	cbz	x1, 4c <_ZL33__gxx_dependent_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x4c>
  44:	mov	x0, x19
  48:	blr	x1
  4c:	mov	x0, x19
  50:	bl	0 <__cxa_free_exception>
  54:	ldr	x19, [sp, #16]
  58:	ldp	x29, x30, [sp], #32
  5c:	ret
  60:	ldur	x0, [x19, #-88]
  64:	bl	0 <_ZN10__cxxabiv111__terminateEPFvvE>

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrC2Ev:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrC1Ev>:
   0:	str	xzr, [x0]
   4:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrC2EMS0_FvvE:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrC1EMS0_FvvE>:
   0:	str	xzr, [x0]
   4:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptr9_M_addrefEv:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv>:
   0:	ldr	x0, [x0]
   4:	cbz	x0, 1c <_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv+0x1c>
   8:	sub	x0, x0, #0x80
   c:	ldaxr	w1, [x0]
  10:	add	w1, w1, #0x1
  14:	stlxr	w2, w1, [x0]
  18:	cbnz	w2, c <_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv+0xc>
  1c:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrC2EPv:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrC1EPv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	str	x1, [x0]
   c:	bl	0 <_ZNSt15__exception_ptr13exception_ptrC1EPv>
  10:	ldp	x29, x30, [sp], #16
  14:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrC2ERKS0_:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrC1ERKS0_>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	ldr	x1, [x1]
   c:	str	x1, [x0]
  10:	bl	0 <_ZNSt15__exception_ptr13exception_ptrC1ERKS0_>
  14:	ldp	x29, x30, [sp], #16
  18:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptr10_M_releaseEv:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	ldr	x0, [x0]
  14:	cbz	x0, 4c <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv+0x4c>
  18:	sub	x1, x0, #0x80
  1c:	ldaxr	w2, [x1]
  20:	sub	w2, w2, #0x1
  24:	stlxr	w3, w2, [x1]
  28:	cbnz	w3, 1c <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv+0x1c>
  2c:	cbnz	w2, 4c <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv+0x4c>
  30:	ldur	x1, [x0, #-104]
  34:	cbz	x1, 40 <_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv+0x40>
  38:	ldr	x0, [x19]
  3c:	blr	x1
  40:	ldr	x0, [x19]
  44:	bl	0 <__cxa_free_exception>
  48:	str	xzr, [x19]
  4c:	ldr	x19, [sp, #16]
  50:	ldp	x29, x30, [sp], #32
  54:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptrD2Ev:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrD1Ev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZNSt15__exception_ptr13exception_ptrD1Ev>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

Disassembly of section .text._ZNKSt15__exception_ptr13exception_ptr6_M_getEv:

0000000000000000 <_ZNKSt15__exception_ptr13exception_ptr6_M_getEv>:
   0:	ldr	x0, [x0]
   4:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptr4swapERS0_:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptr4swapERS0_>:
   0:	ldr	x2, [x0]
   4:	ldr	x3, [x1]
   8:	str	x3, [x0]
   c:	str	x2, [x1]
  10:	ret

Disassembly of section .text._ZNSt15__exception_ptr13exception_ptraSERKS0_:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptraSERKS0_>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	add	x20, sp, #0x28
  14:	mov	x0, x20
  18:	bl	0 <_ZNSt15__exception_ptr13exception_ptraSERKS0_>
  1c:	mov	x1, x19
  20:	mov	x0, x20
  24:	bl	0 <_ZNSt15__exception_ptr13exception_ptraSERKS0_>
  28:	mov	x0, x20
  2c:	bl	0 <_ZNSt15__exception_ptr13exception_ptraSERKS0_>
  30:	mov	x0, x19
  34:	ldp	x19, x20, [sp, #16]
  38:	ldp	x29, x30, [sp], #48
  3c:	ret

Disassembly of section .text._ZNKSt15__exception_ptr13exception_ptrntEv:

0000000000000000 <_ZNKSt15__exception_ptr13exception_ptrntEv>:
   0:	ldr	x0, [x0]
   4:	cmp	x0, #0x0
   8:	cset	w0, eq  // eq = none
   c:	ret

Disassembly of section .text._ZNKSt15__exception_ptr13exception_ptrcvMS0_FvvEEv:

0000000000000000 <_ZNKSt15__exception_ptr13exception_ptrcvMS0_FvvEEv>:
   0:	ldr	x0, [x0]
   4:	mov	x1, #0x0                   	// #0
   8:	cbz	x0, 18 <_ZNKSt15__exception_ptr13exception_ptrcvMS0_FvvEEv+0x18>
   c:	adrp	x0, 0 <_ZNKSt15__exception_ptr13exception_ptrcvMS0_FvvEEv>
  10:	ldr	x0, [x0]
  14:	mov	x1, #0x0                   	// #0
  18:	ret

Disassembly of section .text._ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv:

0000000000000000 <_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv>:
   0:	ldr	x0, [x0]
   4:	ldur	x0, [x0, #-112]
   8:	ret

Disassembly of section .text._ZNSt15__exception_ptreqERKNS_13exception_ptrES2_:

0000000000000000 <_ZNSt15__exception_ptreqERKNS_13exception_ptrES2_>:
   0:	ldr	x2, [x0]
   4:	ldr	x0, [x1]
   8:	cmp	x2, x0
   c:	cset	w0, eq  // eq = none
  10:	ret

Disassembly of section .text._ZNSt15__exception_ptrneERKNS_13exception_ptrES2_:

0000000000000000 <_ZNSt15__exception_ptrneERKNS_13exception_ptrES2_>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZNSt15__exception_ptrneERKNS_13exception_ptrES2_>
   c:	and	w0, w0, #0xff
  10:	eor	w0, w0, #0x1
  14:	ldp	x29, x30, [sp], #16
  18:	ret

Disassembly of section .text._ZSt17current_exceptionv:

0000000000000000 <_ZSt17current_exceptionv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x8
  10:	bl	0 <__cxa_get_globals>
  14:	ldr	x0, [x0]
  18:	cbz	x0, 60 <_ZSt17current_exceptionv+0x60>
  1c:	ldr	x2, [x0, #80]
  20:	mov	x1, #0xd500                	// #54528
  24:	movk	x1, #0xbcd4, lsl #16
  28:	movk	x1, #0xaabc, lsl #32
  2c:	movk	x1, #0xb8b1, lsl #48
  30:	add	x1, x2, x1
  34:	cmp	x1, #0x1
  38:	b.hi	6c <_ZSt17current_exceptionv+0x6c>  // b.pmore
  3c:	add	x1, x0, #0x70
  40:	tbz	w2, #0, 48 <_ZSt17current_exceptionv+0x48>
  44:	ldr	x1, [x0]
  48:	mov	x0, x19
  4c:	bl	0 <_ZSt17current_exceptionv>
  50:	mov	x0, x19
  54:	ldr	x19, [sp, #16]
  58:	ldp	x29, x30, [sp], #32
  5c:	ret
  60:	mov	x0, x19
  64:	bl	0 <_ZSt17current_exceptionv>
  68:	b	50 <_ZSt17current_exceptionv+0x50>
  6c:	mov	x0, x19
  70:	bl	0 <_ZSt17current_exceptionv>
  74:	b	50 <_ZSt17current_exceptionv+0x50>

Disassembly of section .text._ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE:

0000000000000000 <_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	bl	0 <_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE>
  10:	mov	x20, x0
  14:	bl	0 <__cxa_allocate_dependent_exception>
  18:	mov	x19, x0
  1c:	str	x20, [x0]
  20:	sub	x20, x20, #0x80
  24:	ldaxr	w0, [x20]
  28:	add	w0, w0, #0x1
  2c:	stlxr	w1, w0, [x20]
  30:	cbnz	w1, 24 <_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE+0x24>
  34:	bl	0 <_ZSt14get_unexpectedv>
  38:	str	x0, [x19, #16]
  3c:	bl	0 <_ZSt13get_terminatev>
  40:	str	x0, [x19, #24]
  44:	mov	x0, #0x2b01                	// #11009
  48:	movk	x0, #0x432b, lsl #16
  4c:	movk	x0, #0x5543, lsl #32
  50:	movk	x0, #0x474e, lsl #48
  54:	str	x0, [x19, #80]
  58:	adrp	x0, 0 <_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE>
  5c:	add	x0, x0, #0x0
  60:	str	x0, [x19, #88]
  64:	bl	0 <__cxa_get_globals>
  68:	ldr	w1, [x0, #8]
  6c:	add	w1, w1, #0x1
  70:	str	w1, [x0, #8]
  74:	add	x19, x19, #0x50
  78:	mov	x0, x19
  7c:	bl	0 <_Unwind_RaiseException>
  80:	mov	x0, x19
  84:	bl	0 <__cxa_begin_catch>
  88:	bl	0 <_ZSt9terminatev>

eh_term_handler.o:     file format elf64-littleaarch64


eh_terminate.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv111__terminateEPFvvE:

0000000000000000 <_ZN10__cxxabiv111__terminateEPFvvE>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	blr	x0
   c:	bl	0 <abort>
  10:	bl	0 <__cxa_begin_catch>
  14:	bl	0 <abort>

Disassembly of section .text._ZSt13set_terminatePFvvE:

0000000000000000 <_ZSt13set_terminatePFvvE>:
   0:	mov	x2, x0
   4:	adrp	x1, 0 <_ZN10__cxxabiv119__terminate_handlerE>
   8:	ldr	x1, [x1]
   c:	ldaxr	x0, [x1]
  10:	stlxr	w3, x2, [x1]
  14:	cbnz	w3, c <_ZSt13set_terminatePFvvE+0xc>
  18:	ret

Disassembly of section .text._ZSt13get_terminatev:

0000000000000000 <_ZSt13get_terminatev>:
   0:	adrp	x0, 0 <_ZN10__cxxabiv119__terminate_handlerE>
   4:	ldr	x0, [x0]
   8:	ldar	x0, [x0]
   c:	ret

Disassembly of section .text._ZSt9terminatev:

0000000000000000 <_ZSt9terminatev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZSt9terminatev>
   c:	bl	0 <_ZSt9terminatev>

Disassembly of section .text._ZN10__cxxabiv112__unexpectedEPFvvE:

0000000000000000 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	blr	x0
   c:	bl	0 <_ZN10__cxxabiv112__unexpectedEPFvvE>

Disassembly of section .text._ZSt14set_unexpectedPFvvE:

0000000000000000 <_ZSt14set_unexpectedPFvvE>:
   0:	mov	x2, x0
   4:	adrp	x1, 0 <_ZN10__cxxabiv120__unexpected_handlerE>
   8:	ldr	x1, [x1]
   c:	ldaxr	x0, [x1]
  10:	stlxr	w3, x2, [x1]
  14:	cbnz	w3, c <_ZSt14set_unexpectedPFvvE+0xc>
  18:	ret

Disassembly of section .text._ZSt14get_unexpectedv:

0000000000000000 <_ZSt14get_unexpectedv>:
   0:	adrp	x0, 0 <_ZN10__cxxabiv120__unexpected_handlerE>
   4:	ldr	x0, [x0]
   8:	ldar	x0, [x0]
   c:	ret

Disassembly of section .text._ZSt10unexpectedv:

0000000000000000 <_ZSt10unexpectedv>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZSt10unexpectedv>
   c:	bl	0 <_ZSt10unexpectedv>

eh_tm.o:     file format elf64-littleaarch64


Disassembly of section .text._ZL22free_any_cxa_exceptionP17_Unwind_Exception:

0000000000000000 <_ZL22free_any_cxa_exceptionP17_Unwind_Exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	ldr	x1, [x0]
  10:	tbnz	w1, #0, 38 <_ZL22free_any_cxa_exceptionP17_Unwind_Exception+0x38>
  14:	sub	x19, x0, #0x60
  18:	ldaxr	w0, [x19]
  1c:	sub	w0, w0, #0x1
  20:	stlxr	w1, w0, [x19]
  24:	cbnz	w1, 18 <_ZL22free_any_cxa_exceptionP17_Unwind_Exception+0x18>
  28:	cbz	w0, 4c <_ZL22free_any_cxa_exceptionP17_Unwind_Exception+0x4c>
  2c:	ldr	x19, [sp, #16]
  30:	ldp	x29, x30, [sp], #32
  34:	ret
  38:	ldur	x19, [x0, #-80]
  3c:	sub	x19, x19, #0x80
  40:	sub	x0, x0, #0x50
  44:	bl	0 <__cxa_free_dependent_exception>
  48:	b	18 <_ZL22free_any_cxa_exceptionP17_Unwind_Exception+0x18>
  4c:	add	x0, x19, #0x80
  50:	bl	0 <__cxa_free_exception>
  54:	b	2c <_ZL22free_any_cxa_exceptionP17_Unwind_Exception+0x2c>

Disassembly of section .text.__cxa_tm_cleanup:

0000000000000000 <__cxa_tm_cleanup>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	mov	x22, x0
  14:	mov	x20, x1
  18:	mov	w19, w2
  1c:	bl	0 <__cxa_get_globals_fast>
  20:	mov	x21, x0
  24:	cbz	x22, 3c <__cxa_tm_cleanup+0x3c>
  28:	ldr	w0, [x0, #8]
  2c:	sub	w0, w0, #0x1
  30:	str	w0, [x21, #8]
  34:	mov	x0, x22
  38:	bl	0 <__cxa_free_exception>
  3c:	cbz	x20, 74 <__cxa_tm_cleanup+0x74>
  40:	ldr	x0, [x20]
  44:	mov	x1, #0xd500                	// #54528
  48:	movk	x1, #0xbcd4, lsl #16
  4c:	movk	x1, #0xaabc, lsl #32
  50:	movk	x1, #0xb8b1, lsl #48
  54:	add	x0, x0, x1
  58:	cmp	x0, #0x1
  5c:	b.ls	6c <__cxa_tm_cleanup+0x6c>  // b.plast
  60:	mov	x0, x20
  64:	bl	0 <_Unwind_DeleteException>
  68:	b	74 <__cxa_tm_cleanup+0x74>
  6c:	mov	x0, x20
  70:	bl	0 <__cxa_tm_cleanup>
  74:	cbz	w19, cc <__cxa_tm_cleanup+0xcc>
  78:	ldr	x20, [x21]
  7c:	cbz	x20, cc <__cxa_tm_cleanup+0xcc>
  80:	mov	x22, #0xd500                	// #54528
  84:	movk	x22, #0xbcd4, lsl #16
  88:	movk	x22, #0xaabc, lsl #32
  8c:	movk	x22, #0xb8b1, lsl #48
  90:	b	ac <__cxa_tm_cleanup+0xac>
  94:	ldr	x20, [x20, #32]
  98:	bl	0 <__cxa_tm_cleanup>
  9c:	b	a4 <__cxa_tm_cleanup+0xa4>
  a0:	mov	x20, #0x0                   	// #0
  a4:	subs	w19, w19, #0x1
  a8:	b.eq	c8 <__cxa_tm_cleanup+0xc8>  // b.none
  ac:	add	x0, x20, #0x50
  b0:	ldr	x1, [x20, #80]
  b4:	add	x1, x1, x22
  b8:	cmp	x1, #0x1
  bc:	b.ls	94 <__cxa_tm_cleanup+0x94>  // b.plast
  c0:	bl	0 <_Unwind_DeleteException>
  c4:	b	a0 <__cxa_tm_cleanup+0xa0>
  c8:	str	x20, [x21]
  cc:	ldp	x19, x20, [sp, #16]
  d0:	ldp	x21, x22, [sp, #32]
  d4:	ldp	x29, x30, [sp], #48
  d8:	ret
  dc:	cmn	x1, #0x1
  e0:	b.eq	e8 <__cxa_tm_cleanup+0xe8>  // b.none
  e4:	bl	0 <_Unwind_Resume>
  e8:	bl	0 <__cxa_call_unexpected>

eh_throw.o:     file format elf64-littleaarch64


Disassembly of section .text._ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception:

0000000000000000 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x1
  10:	cmp	w0, #0x1
  14:	b.hi	54 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x54>  // b.pmore
  18:	sub	x0, x1, #0x60
  1c:	ldaxr	w1, [x0]
  20:	sub	w1, w1, #0x1
  24:	stlxr	w2, w1, [x0]
  28:	cbnz	w2, 1c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x1c>
  2c:	cbnz	w1, 48 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x48>
  30:	ldur	x1, [x19, #-72]
  34:	cbz	x1, 40 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x40>
  38:	add	x0, x19, #0x20
  3c:	blr	x1
  40:	add	x0, x19, #0x20
  44:	bl	0 <__cxa_free_exception>
  48:	ldr	x19, [sp, #16]
  4c:	ldp	x29, x30, [sp], #32
  50:	ret
  54:	ldur	x0, [x1, #-56]
  58:	bl	0 <_ZN10__cxxabiv111__terminateEPFvvE>

Disassembly of section .text.__cxa_init_primary_exception:

0000000000000000 <__cxa_init_primary_exception>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	sub	x20, x0, #0x80
  14:	stur	wzr, [x0, #-128]
  18:	stur	x1, [x0, #-112]
  1c:	stur	x2, [x0, #-104]
  20:	bl	0 <_ZSt14get_unexpectedv>
  24:	stur	x0, [x19, #-96]
  28:	bl	0 <_ZSt13get_terminatev>
  2c:	stur	x0, [x19, #-88]
  30:	mov	x0, #0x2b00                	// #11008
  34:	movk	x0, #0x432b, lsl #16
  38:	movk	x0, #0x5543, lsl #32
  3c:	movk	x0, #0x474e, lsl #48
  40:	stur	x0, [x19, #-32]
  44:	adrp	x0, 0 <__cxa_init_primary_exception>
  48:	add	x0, x0, #0x0
  4c:	stur	x0, [x19, #-24]
  50:	mov	x0, x20
  54:	ldp	x19, x20, [sp, #16]
  58:	ldp	x29, x30, [sp], #32
  5c:	ret

Disassembly of section .text.__cxa_throw:

0000000000000000 <__cxa_throw>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	str	x21, [sp, #32]
  10:	mov	x19, x0
  14:	mov	x20, x1
  18:	mov	x21, x2
  1c:	bl	0 <__cxa_get_globals>
  20:	ldr	w1, [x0, #8]
  24:	add	w1, w1, #0x1
  28:	str	w1, [x0, #8]
  2c:	mov	x2, x21
  30:	mov	x1, x20
  34:	mov	x0, x19
  38:	bl	0 <__cxa_throw>
  3c:	mov	x19, x0
  40:	mov	w0, #0x1                   	// #1
  44:	str	w0, [x19], #96
  48:	mov	x0, x19
  4c:	bl	0 <_Unwind_RaiseException>
  50:	mov	x0, x19
  54:	bl	0 <__cxa_begin_catch>
  58:	bl	0 <_ZSt9terminatev>

Disassembly of section .text.__cxa_rethrow:

0000000000000000 <__cxa_rethrow>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	bl	0 <__cxa_get_globals>
  10:	ldr	x1, [x0]
  14:	ldr	w2, [x0, #8]
  18:	add	w2, w2, #0x1
  1c:	str	w2, [x0, #8]
  20:	cbz	x1, 5c <__cxa_rethrow+0x5c>
  24:	ldr	x2, [x1, #80]
  28:	mov	x3, #0xd500                	// #54528
  2c:	movk	x3, #0xbcd4, lsl #16
  30:	movk	x3, #0xaabc, lsl #32
  34:	movk	x3, #0xb8b1, lsl #48
  38:	add	x2, x2, x3
  3c:	cmp	x2, #0x1
  40:	b.ls	60 <__cxa_rethrow+0x60>  // b.plast
  44:	str	xzr, [x0]
  48:	add	x19, x1, #0x50
  4c:	mov	x0, x19
  50:	bl	0 <_Unwind_Resume_or_Rethrow>
  54:	mov	x0, x19
  58:	bl	0 <__cxa_begin_catch>
  5c:	bl	0 <_ZSt9terminatev>
  60:	ldr	w0, [x1, #40]
  64:	neg	w0, w0
  68:	str	w0, [x1, #40]
  6c:	b	48 <__cxa_rethrow+0x48>

eh_type.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_current_exception_type:

0000000000000000 <__cxa_current_exception_type>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__cxa_get_globals>
   c:	ldr	x0, [x0]
  10:	cbz	x0, 28 <__cxa_current_exception_type+0x28>
  14:	ldr	x1, [x0, #80]
  18:	tbz	w1, #0, 24 <__cxa_current_exception_type+0x24>
  1c:	ldr	x0, [x0]
  20:	sub	x0, x0, #0x70
  24:	ldr	x0, [x0]
  28:	ldp	x29, x30, [sp], #16
  2c:	ret

eh_unex_handler.o:     file format elf64-littleaarch64


enum_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv116__enum_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv116__enum_type_infoD1Ev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x1, 0 <_ZN10__cxxabiv116__enum_type_infoD1Ev>
   c:	ldr	x1, [x1]
  10:	add	x1, x1, #0x10
  14:	str	x1, [x0]
  18:	bl	0 <_ZNSt9type_infoD2Ev>
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

Disassembly of section .text._ZN10__cxxabiv116__enum_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv116__enum_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv116__enum_type_infoD0Ev>
  14:	mov	x1, #0x10                  	// #16
  18:	mov	x0, x19
  1c:	bl	0 <_ZdlPvm>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

function_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNK10__cxxabiv120__function_type_info15__is_function_pEv:

0000000000000000 <_ZNK10__cxxabiv120__function_type_info15__is_function_pEv>:
   0:	mov	w0, #0x1                   	// #1
   4:	ret

Disassembly of section .text._ZN10__cxxabiv120__function_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv120__function_type_infoD1Ev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x1, 0 <_ZN10__cxxabiv120__function_type_infoD1Ev>
   c:	ldr	x1, [x1]
  10:	add	x1, x1, #0x10
  14:	str	x1, [x0]
  18:	bl	0 <_ZNSt9type_infoD2Ev>
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

Disassembly of section .text._ZN10__cxxabiv120__function_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv120__function_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv120__function_type_infoD0Ev>
  14:	mov	x1, #0x10                  	// #16
  18:	mov	x0, x19
  1c:	bl	0 <_ZdlPvm>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

fundamental_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv123__fundamental_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x1, 0 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
   c:	ldr	x1, [x1]
  10:	add	x1, x1, #0x10
  14:	str	x1, [x0]
  18:	bl	0 <_ZNSt9type_infoD2Ev>
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

Disassembly of section .text._ZN10__cxxabiv123__fundamental_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>
  14:	mov	x1, #0x10                  	// #16
  18:	mov	x0, x19
  1c:	bl	0 <_ZdlPvm>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

guard.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_guard_acquire:

0000000000000000 <__cxa_guard_acquire>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	ldarb	w0, [x0]
  14:	and	w0, w0, #0xff
  18:	cbnz	w0, 158 <__cxa_guard_acquire+0x158>
  1c:	adrp	x0, 0 <__pthread_key_create>
  20:	ldr	x0, [x0]
  24:	cbz	x0, 108 <__cxa_guard_acquire+0x108>
  28:	stp	x21, x22, [sp, #32]
  2c:	stp	x23, x24, [sp, #48]
  30:	mov	w1, #0x1                   	// #1
  34:	mov	w23, w1
  38:	mov	w0, #0x0                   	// #0
  3c:	bfi	w0, w1, #8, #8
  40:	mov	w22, w0
  44:	lsl	w21, w1, #16
  48:	mov	w20, w0
  4c:	ldaxr	w1, [x19]
  50:	cbnz	w1, 5c <__cxa_guard_acquire+0x5c>
  54:	stlxr	w0, w22, [x19]
  58:	cbnz	w0, 4c <__cxa_guard_acquire+0x4c>
  5c:	cmp	w1, #0x0
  60:	mov	w0, w23
  64:	b.ne	7c <__cxa_guard_acquire+0x7c>  // b.any
  68:	ldp	x21, x22, [sp, #32]
  6c:	ldp	x23, x24, [sp, #48]
  70:	ldp	x19, x20, [sp, #16]
  74:	ldp	x29, x30, [sp], #64
  78:	ret
  7c:	mov	w0, w1
  80:	mov	w3, w1
  84:	mov	x24, #0x62                  	// #98
  88:	cmp	w23, w3
  8c:	b.eq	160 <__cxa_guard_acquire+0x160>  // b.none
  90:	cmp	w22, w3
  94:	b.ne	b4 <__cxa_guard_acquire+0xb4>  // b.any
  98:	orr	w3, w3, w21
  9c:	ldaxr	w1, [x19]
  a0:	cmp	w1, w0
  a4:	b.ne	b0 <__cxa_guard_acquire+0xb0>  // b.any
  a8:	stlxr	w2, w3, [x19]
  ac:	cbnz	w2, 9c <__cxa_guard_acquire+0x9c>
  b0:	b.ne	f8 <__cxa_guard_acquire+0xf8>  // b.any
  b4:	mov	w4, #0x0                   	// #0
  b8:	mov	w2, #0x0                   	// #0
  bc:	mov	x1, x19
  c0:	mov	x0, x24
  c4:	bl	0 <syscall>
  c8:	ldaxr	w1, [x19]
  cc:	cbnz	w1, d8 <__cxa_guard_acquire+0xd8>
  d0:	stlxr	w0, w20, [x19]
  d4:	cbnz	w0, c8 <__cxa_guard_acquire+0xc8>
  d8:	cmp	w1, #0x0
  dc:	mov	w0, w1
  e0:	mov	w3, w1
  e4:	b.ne	88 <__cxa_guard_acquire+0x88>  // b.any
  e8:	mov	w0, #0x1                   	// #1
  ec:	ldp	x21, x22, [sp, #32]
  f0:	ldp	x23, x24, [sp, #48]
  f4:	b	70 <__cxa_guard_acquire+0x70>
  f8:	cmp	w23, w1
  fc:	b.eq	170 <__cxa_guard_acquire+0x170>  // b.none
 100:	cbnz	w1, b4 <__cxa_guard_acquire+0xb4>
 104:	b	c8 <__cxa_guard_acquire+0xc8>
 108:	ldrb	w0, [x19]
 10c:	cbnz	w0, 180 <__cxa_guard_acquire+0x180>
 110:	ldrb	w0, [x19, #1]
 114:	cbnz	w0, 128 <__cxa_guard_acquire+0x128>
 118:	mov	w0, #0x1                   	// #1
 11c:	strb	w0, [x19, #1]
 120:	mov	w0, #0x1                   	// #1
 124:	b	70 <__cxa_guard_acquire+0x70>
 128:	stp	x21, x22, [sp, #32]
 12c:	stp	x23, x24, [sp, #48]
 130:	mov	x0, #0x8                   	// #8
 134:	bl	0 <__cxa_allocate_exception>
 138:	mov	x19, x0
 13c:	bl	0 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>
 140:	adrp	x2, 0 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>
 144:	ldr	x2, [x2]
 148:	adrp	x1, 0 <_ZTIN9__gnu_cxx20recursive_init_errorE>
 14c:	ldr	x1, [x1]
 150:	mov	x0, x19
 154:	bl	0 <__cxa_throw>
 158:	mov	w0, #0x0                   	// #0
 15c:	b	70 <__cxa_guard_acquire+0x70>
 160:	mov	w0, #0x0                   	// #0
 164:	ldp	x21, x22, [sp, #32]
 168:	ldp	x23, x24, [sp, #48]
 16c:	b	70 <__cxa_guard_acquire+0x70>
 170:	mov	w0, #0x0                   	// #0
 174:	ldp	x21, x22, [sp, #32]
 178:	ldp	x23, x24, [sp, #48]
 17c:	b	70 <__cxa_guard_acquire+0x70>
 180:	mov	w0, #0x0                   	// #0
 184:	b	70 <__cxa_guard_acquire+0x70>

Disassembly of section .text.__cxa_guard_abort:

0000000000000000 <__cxa_guard_abort>:
   0:	adrp	x1, 0 <__pthread_key_create>
   4:	ldr	x1, [x1]
   8:	cbnz	x1, 14 <__cxa_guard_abort+0x14>
   c:	strb	wzr, [x0, #1]
  10:	ret
  14:	mov	w1, #0x0                   	// #0
  18:	mov	w2, #0x1                   	// #1
  1c:	bfi	w1, w2, #16, #8
  20:	ldaxr	w2, [x0]
  24:	stlxr	w3, wzr, [x0]
  28:	cbnz	w3, 20 <__cxa_guard_abort+0x20>
  2c:	tst	w2, w1
  30:	b.ne	38 <__cxa_guard_abort+0x38>  // b.any
  34:	ret
  38:	stp	x29, x30, [sp, #-16]!
  3c:	mov	x29, sp
  40:	mov	w3, #0x7fffffff            	// #2147483647
  44:	mov	w2, #0x1                   	// #1
  48:	mov	x1, x0
  4c:	mov	x0, #0x62                  	// #98
  50:	bl	0 <syscall>
  54:	ldp	x29, x30, [sp], #16
  58:	ret

Disassembly of section .text.__cxa_guard_release:

0000000000000000 <__cxa_guard_release>:
   0:	adrp	x1, 0 <__pthread_key_create>
   4:	ldr	x1, [x1]
   8:	cbz	x1, 5c <__cxa_guard_release+0x5c>
   c:	mov	w2, #0x0                   	// #0
  10:	mov	w3, #0x1                   	// #1
  14:	bfxil	w2, w3, #0, #8
  18:	mov	w1, #0x0                   	// #0
  1c:	bfi	w1, w3, #16, #8
  20:	ldaxr	w3, [x0]
  24:	stlxr	w4, w2, [x0]
  28:	cbnz	w4, 20 <__cxa_guard_release+0x20>
  2c:	tst	w3, w1
  30:	b.ne	38 <__cxa_guard_release+0x38>  // b.any
  34:	ret
  38:	stp	x29, x30, [sp, #-16]!
  3c:	mov	x29, sp
  40:	mov	w3, #0x7fffffff            	// #2147483647
  44:	mov	w2, #0x1                   	// #1
  48:	mov	x1, x0
  4c:	mov	x0, #0x62                  	// #98
  50:	bl	0 <syscall>
  54:	ldp	x29, x30, [sp], #16
  58:	ret
  5c:	strb	wzr, [x0, #1]
  60:	mov	w1, #0x1                   	// #1
  64:	stlrb	w1, [x0]
  68:	ret

guard_error.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN9__gnu_cxx20recursive_init_errorD2Ev:

0000000000000000 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x1, 0 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>
   c:	ldr	x1, [x1]
  10:	add	x1, x1, #0x10
  14:	str	x1, [x0]
  18:	bl	0 <_ZNSt9exceptionD2Ev>
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

Disassembly of section .text._ZN9__gnu_cxx20recursive_init_errorD0Ev:

0000000000000000 <_ZN9__gnu_cxx20recursive_init_errorD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN9__gnu_cxx20recursive_init_errorD0Ev>
  14:	mov	x1, #0x8                   	// #8
  18:	mov	x0, x19
  1c:	bl	0 <_ZdlPvm>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

Disassembly of section .text._ZN9__gnu_cxx20recursive_init_errorC2Ev:

0000000000000000 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>:
   0:	adrp	x1, 0 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>
   4:	ldr	x1, [x1]
   8:	add	x1, x1, #0x10
   c:	str	x1, [x0]
  10:	ret

hash_bytes.o:     file format elf64-littleaarch64


Disassembly of section .text._ZSt11_Hash_bytesPKvmm:

0000000000000000 <_ZSt11_Hash_bytesPKvmm>:
   0:	and	x5, x1, #0xfffffffffffffff8
   4:	add	x5, x0, x5
   8:	mov	x3, #0xe995                	// #59797
   c:	movk	x3, #0x5bd1, lsl #16
  10:	movk	x3, #0xa793, lsl #32
  14:	movk	x3, #0xc6a4, lsl #48
  18:	mul	x3, x1, x3
  1c:	eor	x2, x3, x2
  20:	cmp	x0, x5
  24:	b.eq	58 <_ZSt11_Hash_bytesPKvmm+0x58>  // b.none
  28:	mov	x4, #0xe995                	// #59797
  2c:	movk	x4, #0x5bd1, lsl #16
  30:	movk	x4, #0xa793, lsl #32
  34:	movk	x4, #0xc6a4, lsl #48
  38:	ldr	x3, [x0], #8
  3c:	mul	x3, x3, x4
  40:	eor	x3, x3, x3, lsr #47
  44:	mul	x3, x3, x4
  48:	eor	x2, x3, x2
  4c:	mul	x2, x2, x4
  50:	cmp	x5, x0
  54:	b.ne	38 <_ZSt11_Hash_bytesPKvmm+0x38>  // b.any
  58:	tst	x1, #0x7
  5c:	b.eq	98 <_ZSt11_Hash_bytesPKvmm+0x98>  // b.none
  60:	and	w0, w1, #0x7
  64:	sub	w0, w0, #0x1
  68:	sxtw	x0, w0
  6c:	mov	x1, #0x0                   	// #0
  70:	ldrb	w3, [x5, x0]
  74:	add	x1, x3, x1, lsl #8
  78:	sub	x0, x0, #0x1
  7c:	tbz	w0, #31, 70 <_ZSt11_Hash_bytesPKvmm+0x70>
  80:	eor	x2, x1, x2
  84:	mov	x3, #0xe995                	// #59797
  88:	movk	x3, #0x5bd1, lsl #16
  8c:	movk	x3, #0xa793, lsl #32
  90:	movk	x3, #0xc6a4, lsl #48
  94:	mul	x2, x2, x3
  98:	eor	x2, x2, x2, lsr #47
  9c:	mov	x0, #0xe995                	// #59797
  a0:	movk	x0, #0x5bd1, lsl #16
  a4:	movk	x0, #0xa793, lsl #32
  a8:	movk	x0, #0xc6a4, lsl #48
  ac:	mul	x0, x2, x0
  b0:	eor	x0, x0, x0, lsr #47
  b4:	ret

Disassembly of section .text._ZSt15_Fnv_hash_bytesPKvmm:

0000000000000000 <_ZSt15_Fnv_hash_bytesPKvmm>:
   0:	mov	x3, x0
   4:	cbz	x1, 30 <_ZSt15_Fnv_hash_bytesPKvmm+0x30>
   8:	add	x1, x0, x1
   c:	mov	x0, x2
  10:	mov	x4, #0x1b3                 	// #435
  14:	movk	x4, #0x100, lsl #32
  18:	ldrb	w2, [x3], #1
  1c:	eor	x0, x2, x0
  20:	mul	x0, x0, x4
  24:	cmp	x1, x3
  28:	b.ne	18 <_ZSt15_Fnv_hash_bytesPKvmm+0x18>  // b.any
  2c:	ret
  30:	mov	x0, x2
  34:	b	2c <_ZSt15_Fnv_hash_bytesPKvmm+0x2c>

nested_exception.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt16nested_exceptionD2Ev:

0000000000000000 <_ZNSt16nested_exceptionD1Ev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x1, 0 <_ZNSt16nested_exceptionD1Ev>
   c:	ldr	x1, [x1]
  10:	add	x1, x1, #0x10
  14:	str	x1, [x0], #8
  18:	bl	0 <_ZNSt15__exception_ptr13exception_ptrD1Ev>
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

Disassembly of section .text._ZNSt16nested_exceptionD0Ev:

0000000000000000 <_ZNSt16nested_exceptionD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt16nested_exceptionD0Ev>
  14:	mov	x1, #0x10                  	// #16
  18:	mov	x0, x19
  1c:	bl	0 <_ZdlPvm>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

new_handler.o:     file format elf64-littleaarch64


Disassembly of section .text._ZSt15set_new_handlerPFvvE:

0000000000000000 <_ZSt15set_new_handlerPFvvE>:
   0:	mov	x2, x0
   4:	adrp	x1, 0 <_ZSt15set_new_handlerPFvvE>
   8:	add	x1, x1, #0x0
   c:	ldaxr	x0, [x1]
  10:	stlxr	w3, x2, [x1]
  14:	cbnz	w3, c <_ZSt15set_new_handlerPFvvE+0xc>
  18:	ret

Disassembly of section .text._ZSt15get_new_handlerv:

0000000000000000 <_ZSt15get_new_handlerv>:
   0:	adrp	x0, 0 <_ZSt15get_new_handlerv>
   4:	add	x0, x0, #0x0
   8:	ldar	x0, [x0]
   c:	ret

new_op.o:     file format elf64-littleaarch64


Disassembly of section .text._Znwm:

0000000000000000 <_Znwm>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	cmp	x0, #0x0
  10:	csinc	x19, x0, xzr, ne  // ne = any
  14:	mov	x0, x19
  18:	bl	0 <malloc>
  1c:	cbz	x0, 2c <_Znwm+0x2c>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret
  2c:	bl	0 <_ZSt15get_new_handlerv>
  30:	cbz	x0, 3c <_Znwm+0x3c>
  34:	blr	x0
  38:	b	14 <_Znwm+0x14>
  3c:	mov	x0, #0x8                   	// #8
  40:	bl	0 <__cxa_allocate_exception>
  44:	adrp	x1, 0 <_ZTVSt9bad_alloc>
  48:	ldr	x1, [x1]
  4c:	add	x1, x1, #0x10
  50:	str	x1, [x0]
  54:	adrp	x2, 0 <_ZNSt9bad_allocD1Ev>
  58:	ldr	x2, [x2]
  5c:	adrp	x1, 0 <_ZTISt9bad_alloc>
  60:	ldr	x1, [x1]
  64:	bl	0 <__cxa_throw>

new_opnt.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnwmRKSt9nothrow_t:

0000000000000000 <_ZnwmRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_Znwm>
   c:	b	1c <_ZnwmRKSt9nothrow_t+0x1c>
  10:	bl	0 <__cxa_begin_catch>
  14:	bl	0 <__cxa_end_catch>
  18:	mov	x0, #0x0                   	// #0
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

new_opv.o:     file format elf64-littleaarch64


Disassembly of section .text._Znam:

0000000000000000 <_Znam>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_Znwm>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

new_opvnt.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnamRKSt9nothrow_t:

0000000000000000 <_ZnamRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_Znam>
   c:	b	1c <_ZnamRKSt9nothrow_t+0x1c>
  10:	bl	0 <__cxa_begin_catch>
  14:	bl	0 <__cxa_end_catch>
  18:	mov	x0, #0x0                   	// #0
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

new_opa.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnwmSt11align_val_t:

0000000000000000 <_ZnwmSt11align_val_t>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	d8, [sp, #24]
  10:	fmov	d8, x1
  14:	cnt	v0.8b, v8.8b
  18:	addv	b0, v0.8b
  1c:	umov	w1, v0.b[0]
  20:	cmp	w1, #0x1
  24:	b.ne	64 <_ZnwmSt11align_val_t+0x64>  // b.any
  28:	cmp	x0, #0x0
  2c:	csinc	x0, x0, xzr, ne  // ne = any
  30:	sub	x0, x0, #0x1
  34:	fmov	x1, d8
  38:	add	x0, x0, x1
  3c:	neg	x19, x1
  40:	and	x19, x19, x0
  44:	mov	x1, x19
  48:	fmov	x0, d8
  4c:	bl	0 <aligned_alloc>
  50:	cbz	x0, 90 <_ZnwmSt11align_val_t+0x90>
  54:	ldr	x19, [sp, #16]
  58:	ldr	d8, [sp, #24]
  5c:	ldp	x29, x30, [sp], #32
  60:	ret
  64:	mov	x0, #0x8                   	// #8
  68:	bl	0 <__cxa_allocate_exception>
  6c:	adrp	x1, 0 <_ZTVSt9bad_alloc>
  70:	ldr	x1, [x1]
  74:	add	x1, x1, #0x10
  78:	str	x1, [x0]
  7c:	adrp	x2, 0 <_ZNSt9bad_allocD1Ev>
  80:	ldr	x2, [x2]
  84:	adrp	x1, 0 <_ZTISt9bad_alloc>
  88:	ldr	x1, [x1]
  8c:	bl	0 <__cxa_throw>
  90:	bl	0 <_ZSt15get_new_handlerv>
  94:	cbz	x0, a0 <_ZnwmSt11align_val_t+0xa0>
  98:	blr	x0
  9c:	b	44 <_ZnwmSt11align_val_t+0x44>
  a0:	mov	x0, #0x8                   	// #8
  a4:	bl	0 <__cxa_allocate_exception>
  a8:	adrp	x1, 0 <_ZTVSt9bad_alloc>
  ac:	ldr	x1, [x1]
  b0:	add	x1, x1, #0x10
  b4:	str	x1, [x0]
  b8:	adrp	x2, 0 <_ZNSt9bad_allocD1Ev>
  bc:	ldr	x2, [x2]
  c0:	adrp	x1, 0 <_ZTISt9bad_alloc>
  c4:	ldr	x1, [x1]
  c8:	bl	0 <__cxa_throw>

new_opant.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnwmSt11align_val_tRKSt9nothrow_t:

0000000000000000 <_ZnwmSt11align_val_tRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZnwmSt11align_val_t>
   c:	b	1c <_ZnwmSt11align_val_tRKSt9nothrow_t+0x1c>
  10:	bl	0 <__cxa_begin_catch>
  14:	bl	0 <__cxa_end_catch>
  18:	mov	x0, #0x0                   	// #0
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

new_opva.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnamSt11align_val_t:

0000000000000000 <_ZnamSt11align_val_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZnwmSt11align_val_t>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

new_opvant.o:     file format elf64-littleaarch64


Disassembly of section .text._ZnamSt11align_val_tRKSt9nothrow_t:

0000000000000000 <_ZnamSt11align_val_tRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZnamSt11align_val_t>
   c:	b	1c <_ZnamSt11align_val_tRKSt9nothrow_t+0x1c>
  10:	bl	0 <__cxa_begin_catch>
  14:	bl	0 <__cxa_end_catch>
  18:	mov	x0, #0x0                   	// #0
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

del_opa.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvSt11align_val_t:

0000000000000000 <_ZdlPvSt11align_val_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <free>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

del_opant.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvSt11align_val_tRKSt9nothrow_t:

0000000000000000 <_ZdlPvSt11align_val_tRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZdlPvSt11align_val_t>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

del_opsa.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdlPvmSt11align_val_t:

0000000000000000 <_ZdlPvmSt11align_val_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	mov	x1, x2
   c:	bl	0 <_ZdlPvSt11align_val_t>
  10:	ldp	x29, x30, [sp], #16
  14:	ret

del_opva.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvSt11align_val_t:

0000000000000000 <_ZdaPvSt11align_val_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZdlPvSt11align_val_t>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

del_opvant.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvSt11align_val_tRKSt9nothrow_t:

0000000000000000 <_ZdaPvSt11align_val_tRKSt9nothrow_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZdaPvSt11align_val_t>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

del_opvsa.o:     file format elf64-littleaarch64


Disassembly of section .text._ZdaPvmSt11align_val_t:

0000000000000000 <_ZdaPvmSt11align_val_t>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	mov	x1, x2
   c:	bl	0 <_ZdaPvSt11align_val_t>
  10:	ldp	x29, x30, [sp], #16
  14:	ret

pbase_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj:

0000000000000000 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	ldr	x0, [x0, #24]
   c:	ldr	x4, [x0]
  10:	ldr	x4, [x4, #32]
  14:	add	w3, w3, #0x2
  18:	ldr	x1, [x1, #24]
  1c:	blr	x4
  20:	ldp	x29, x30, [sp], #16
  24:	ret

Disassembly of section .text._ZN10__cxxabiv117__pbase_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x1, 0 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
   c:	ldr	x1, [x1]
  10:	add	x1, x1, #0x10
  14:	str	x1, [x0]
  18:	bl	0 <_ZNSt9type_infoD2Ev>
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

Disassembly of section .text._ZN10__cxxabiv117__pbase_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>
  14:	mov	x1, #0x20                  	// #32
  18:	mov	x0, x19
  1c:	bl	0 <_ZdlPvm>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

Disassembly of section .text._ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj:

0000000000000000 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	mov	x19, x0
  14:	ldr	x0, [x0, #8]
  18:	ldr	x21, [x1, #8]
  1c:	mov	w4, #0x1                   	// #1
  20:	cmp	x0, x21
  24:	b.eq	248 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x248>  // b.none
  28:	str	x23, [sp, #48]
  2c:	mov	x20, x1
  30:	mov	x22, x2
  34:	mov	w23, w3
  38:	ldrb	w1, [x0]
  3c:	cmp	w1, #0x2a
  40:	b.eq	54 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x54>  // b.none
  44:	mov	x1, x21
  48:	bl	0 <strcmp>
  4c:	mov	w4, #0x1                   	// #1
  50:	cbz	w0, 244 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x244>
  54:	adrp	x0, 0 <_ZTIDn>
  58:	ldr	x0, [x0]
  5c:	ldr	x1, [x0, #8]
  60:	cmp	x21, x1
  64:	b.eq	168 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x168>  // b.none
  68:	ldrb	w0, [x21]
  6c:	cmp	w0, #0x2a
  70:	b.eq	80 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x80>  // b.none
  74:	mov	x0, x21
  78:	bl	0 <strcmp>
  7c:	cbz	w0, 168 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x168>
  80:	ldr	x21, [x19]
  84:	ldur	x0, [x21, #-8]
  88:	ldr	x0, [x0, #8]
  8c:	ldr	x1, [x20]
  90:	ldur	x1, [x1, #-8]
  94:	ldr	x1, [x1, #8]
  98:	cmp	x0, x1
  9c:	b.eq	1e0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1e0>  // b.none
  a0:	ldrb	w2, [x0]
  a4:	mov	w4, #0x0                   	// #0
  a8:	cmp	w2, #0x2a
  ac:	b.eq	25c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x25c>  // b.none
  b0:	bl	0 <strcmp>
  b4:	cbz	w0, 1e0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1e0>
  b8:	mov	w4, #0x0                   	// #0
  bc:	ldr	x23, [sp, #48]
  c0:	b	248 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x248>
  c4:	adrp	x0, 0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>
  c8:	add	x0, x0, #0x0
  cc:	str	x0, [x22]
  d0:	ldr	x23, [sp, #48]
  d4:	b	248 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x248>
  d8:	ldr	x23, [sp, #48]
  dc:	b	248 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x248>
  e0:	ldr	x0, [x19, #24]
  e4:	ldr	x1, [x0]
  e8:	ldr	x1, [x1, #24]
  ec:	blr	x1
  f0:	ands	w4, w0, #0xff
  f4:	b.ne	c4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc4>  // b.any
  f8:	adrp	x0, 0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>
  fc:	add	x0, x0, #0x0
 100:	str	x0, [x22]
 104:	mov	w4, #0x1                   	// #1
 108:	ldr	x23, [sp, #48]
 10c:	b	248 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x248>
 110:	str	xzr, [x22]
 114:	mov	w4, #0x1                   	// #1
 118:	ldr	x23, [sp, #48]
 11c:	b	248 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x248>
 120:	adrp	x0, 0 <_ZTIN10__cxxabiv129__pointer_to_member_type_infoE>
 124:	ldr	x0, [x0]
 128:	ldr	x1, [x0, #8]
 12c:	cmp	x21, x1
 130:	b.eq	e0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xe0>  // b.none
 134:	cmp	w2, #0x2a
 138:	b.ne	1b4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1b4>  // b.any
 13c:	ldr	x21, [x19]
 140:	ldur	x1, [x21, #-8]
 144:	ldr	x0, [x20]
 148:	ldur	x0, [x0, #-8]
 14c:	ldr	x1, [x1, #8]
 150:	ldr	x0, [x0, #8]
 154:	cmp	x1, x0
 158:	b.eq	1e0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1e0>  // b.none
 15c:	mov	w4, #0x0                   	// #0
 160:	ldr	x23, [sp, #48]
 164:	b	248 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x248>
 168:	ldr	x0, [x19]
 16c:	ldur	x0, [x0, #-8]
 170:	ldr	x21, [x0, #8]
 174:	adrp	x0, 0 <_ZTIN10__cxxabiv119__pointer_type_infoE>
 178:	ldr	x0, [x0]
 17c:	ldr	x1, [x0, #8]
 180:	cmp	x21, x1
 184:	b.eq	110 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x110>  // b.none
 188:	ldrb	w2, [x21]
 18c:	cmp	w2, #0x2a
 190:	b.eq	120 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x120>  // b.none
 194:	mov	x0, x21
 198:	bl	0 <strcmp>
 19c:	cbz	w0, 110 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x110>
 1a0:	adrp	x0, 0 <_ZTIN10__cxxabiv129__pointer_to_member_type_infoE>
 1a4:	ldr	x0, [x0]
 1a8:	ldr	x1, [x0, #8]
 1ac:	cmp	x1, x21
 1b0:	b.eq	e0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xe0>  // b.none
 1b4:	mov	x0, x21
 1b8:	bl	0 <strcmp>
 1bc:	cbz	w0, e0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xe0>
 1c0:	ldr	x21, [x19]
 1c4:	ldur	x0, [x21, #-8]
 1c8:	ldr	x0, [x0, #8]
 1cc:	ldr	x1, [x20]
 1d0:	ldur	x1, [x1, #-8]
 1d4:	ldr	x1, [x1, #8]
 1d8:	cmp	x1, x0
 1dc:	b.ne	b0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>  // b.any
 1e0:	mov	w4, #0x0                   	// #0
 1e4:	tbz	w23, #0, d8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xd8>
 1e8:	ldr	w0, [x20, #16]
 1ec:	and	w1, w0, #0x60
 1f0:	ldr	w5, [x19, #16]
 1f4:	and	w2, w5, #0x60
 1f8:	and	w3, w0, w2
 1fc:	bics	wzr, w1, w2
 200:	csel	w0, w3, w0, ne  // ne = any
 204:	bic	w1, w2, w1
 208:	bic	w0, w0, w5
 20c:	orr	w0, w1, w0
 210:	mov	w4, #0x0                   	// #0
 214:	cbnz	w0, 264 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x264>
 218:	and	w3, w23, #0xfffffffe
 21c:	tst	x5, #0x1
 220:	ldr	x4, [x21, #48]
 224:	csel	w3, w3, w23, eq  // eq = none
 228:	mov	x2, x22
 22c:	mov	x1, x20
 230:	mov	x0, x19
 234:	blr	x4
 238:	and	w4, w0, #0xff
 23c:	ldr	x23, [sp, #48]
 240:	b	248 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x248>
 244:	ldr	x23, [sp, #48]
 248:	mov	w0, w4
 24c:	ldp	x19, x20, [sp, #16]
 250:	ldp	x21, x22, [sp, #32]
 254:	ldp	x29, x30, [sp], #64
 258:	ret
 25c:	ldr	x23, [sp, #48]
 260:	b	248 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x248>
 264:	ldr	x23, [sp, #48]
 268:	b	248 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x248>

pmem_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x1, 0 <_ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev>
   c:	ldr	x1, [x1]
  10:	add	x1, x1, #0x10
  14:	str	x1, [x0]
  18:	bl	0 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

Disassembly of section .text._ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev>
  14:	mov	x1, #0x28                  	// #40
  18:	mov	x0, x19
  1c:	bl	0 <_ZdlPvm>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

Disassembly of section .text._ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj:

0000000000000000 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	mov	x20, x0
  14:	mov	x19, x1
  18:	mov	x22, x2
  1c:	mov	w21, w3
  20:	ldr	x0, [x0, #32]
  24:	ldr	x4, [x0, #8]
  28:	ldr	x0, [x1, #32]
  2c:	ldr	x1, [x0, #8]
  30:	cmp	x4, x1
  34:	b.eq	5c <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x5c>  // b.none
  38:	ldrb	w2, [x4]
  3c:	mov	w0, #0x0                   	// #0
  40:	cmp	w2, #0x2a
  44:	b.eq	7c <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x7c>  // b.none
  48:	mov	x0, x4
  4c:	bl	0 <strcmp>
  50:	cbz	w0, 5c <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x5c>
  54:	mov	w0, #0x0                   	// #0
  58:	b	7c <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x7c>
  5c:	ldr	x0, [x20, #24]
  60:	ldr	x1, [x0]
  64:	ldr	x4, [x1, #32]
  68:	add	w3, w21, #0x2
  6c:	mov	x2, x22
  70:	ldr	x1, [x19, #24]
  74:	blr	x4
  78:	and	w0, w0, #0xff
  7c:	ldp	x19, x20, [sp, #16]
  80:	ldp	x21, x22, [sp, #32]
  84:	ldp	x29, x30, [sp], #48
  88:	ret

pointer_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv:

0000000000000000 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
   0:	mov	w0, #0x1                   	// #1
   4:	ret

Disassembly of section .text._ZN10__cxxabiv119__pointer_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x1, 0 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>
   c:	ldr	x1, [x1]
  10:	add	x1, x1, #0x10
  14:	str	x1, [x0]
  18:	bl	0 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

Disassembly of section .text._ZN10__cxxabiv119__pointer_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>
  14:	mov	x1, #0x20                  	// #32
  18:	mov	x0, x19
  1c:	bl	0 <_ZdlPvm>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

Disassembly of section .text._ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj:

0000000000000000 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	mov	x20, x0
  14:	mov	x21, x1
  18:	mov	x22, x2
  1c:	mov	w19, w3
  20:	cmp	w3, #0x1
  24:	b.ls	58 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x58>  // b.plast
  28:	ldr	x0, [x20, #24]
  2c:	ldr	x1, [x0]
  30:	ldr	x4, [x1, #32]
  34:	add	w3, w19, #0x2
  38:	mov	x2, x22
  3c:	ldr	x1, [x21, #24]
  40:	blr	x4
  44:	and	w0, w0, #0xff
  48:	ldp	x19, x20, [sp, #16]
  4c:	ldp	x21, x22, [sp, #32]
  50:	ldp	x29, x30, [sp], #48
  54:	ret
  58:	ldr	x0, [x0, #24]
  5c:	ldr	x0, [x0, #8]
  60:	adrp	x1, 0 <_ZTIv>
  64:	ldr	x1, [x1]
  68:	ldr	x1, [x1, #8]
  6c:	cmp	x0, x1
  70:	b.eq	88 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x88>  // b.none
  74:	ldrb	w2, [x0]
  78:	cmp	w2, #0x2a
  7c:	b.eq	28 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x28>  // b.none
  80:	bl	0 <strcmp>
  84:	cbnz	w0, 28 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x28>
  88:	ldr	x0, [x21, #24]
  8c:	ldr	x1, [x0]
  90:	ldr	x1, [x1, #24]
  94:	blr	x1
  98:	and	w0, w0, #0xff
  9c:	eor	w0, w0, #0x1
  a0:	b	48 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x48>

pure.o:     file format elf64-littleaarch64


Disassembly of section .text.__cxa_pure_virtual:

0000000000000000 <__cxa_pure_virtual>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	mov	x2, #0x1b                  	// #27
   c:	adrp	x1, 0 <__cxa_pure_virtual>
  10:	add	x1, x1, #0x0
  14:	mov	w0, #0x2                   	// #2
  18:	bl	0 <write>
  1c:	bl	0 <_ZSt9terminatev>

Disassembly of section .text.__cxa_deleted_virtual:

0000000000000000 <__cxa_deleted_virtual>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	mov	x2, #0x1e                  	// #30
   c:	adrp	x1, 0 <__cxa_deleted_virtual>
  10:	add	x1, x1, #0x0
  14:	mov	w0, #0x2                   	// #2
  18:	bl	0 <write>
  1c:	bl	0 <_ZSt9terminatev>

si_class_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv120__si_class_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x1, 0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   c:	ldr	x1, [x1]
  10:	add	x1, x1, #0x10
  14:	str	x1, [x0]
  18:	bl	0 <_ZN10__cxxabiv117__class_type_infoD2Ev>
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

Disassembly of section .text._ZN10__cxxabiv120__si_class_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>
  14:	mov	x1, #0x18                  	// #24
  18:	mov	x0, x19
  1c:	bl	0 <_ZdlPvm>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

Disassembly of section .text._ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE:

0000000000000000 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	stp	x25, x26, [sp, #64]
  18:	stp	x27, x28, [sp, #80]
  1c:	mov	x24, x1
  20:	mov	w25, w2
  24:	mov	x19, x4
  28:	mov	x23, x6
  2c:	mov	x22, x7
  30:	ldr	x27, [x0, #8]
  34:	ldr	x1, [x3, #8]
  38:	cmp	x27, x1
  3c:	b.eq	100 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x100>  // b.none
  40:	mov	x20, x0
  44:	mov	x21, x3
  48:	mov	x26, x5
  4c:	ldrb	w28, [x27]
  50:	cmp	w28, #0x2a
  54:	b.eq	64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>  // b.none
  58:	mov	x0, x27
  5c:	bl	0 <strcmp>
  60:	cbz	w0, 100 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x100>
  64:	cmp	x19, x23
  68:	b.eq	d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd4>  // b.none
  6c:	ldr	x0, [x20, #16]
  70:	ldr	x1, [x0]
  74:	ldr	x8, [x1, #56]
  78:	mov	x7, x22
  7c:	mov	x6, x23
  80:	mov	x5, x26
  84:	mov	x4, x19
  88:	mov	x3, x21
  8c:	mov	w2, w25
  90:	mov	x1, x24
  94:	blr	x8
  98:	and	w0, w0, #0xff
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x21, x22, [sp, #32]
  a4:	ldp	x23, x24, [sp, #48]
  a8:	ldp	x25, x26, [sp, #64]
  ac:	ldp	x27, x28, [sp, #80]
  b0:	ldp	x29, x30, [sp], #96
  b4:	ret
  b8:	mov	w0, #0x0                   	// #0
  bc:	cmn	x24, #0x2
  c0:	b.ne	9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>  // b.any
  c4:	mov	w0, #0x1                   	// #1
  c8:	str	w0, [x22, #16]
  cc:	mov	w0, #0x0                   	// #0
  d0:	b	9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>
  d4:	ldr	x1, [x26, #8]
  d8:	cmp	x27, x1
  dc:	b.eq	f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf4>  // b.none
  e0:	cmp	w28, #0x2a
  e4:	b.eq	6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>  // b.none
  e8:	mov	x0, x27
  ec:	bl	0 <strcmp>
  f0:	cbnz	w0, 6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
  f4:	str	w25, [x22, #12]
  f8:	mov	w0, #0x0                   	// #0
  fc:	b	9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>
 100:	str	x19, [x22]
 104:	str	w25, [x22, #8]
 108:	tbnz	x24, #63, b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb8>
 10c:	add	x19, x19, x24
 110:	cmp	x23, x19
 114:	mov	w0, #0x6                   	// #6
 118:	csinc	w0, w0, wzr, eq  // eq = none
 11c:	str	w0, [x22, #16]
 120:	mov	w0, #0x0                   	// #0
 124:	b	9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>

Disassembly of section .text._ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_:

0000000000000000 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	str	x23, [sp, #48]
  14:	mov	x22, x0
  18:	mov	x23, x1
  1c:	mov	x19, x2
  20:	mov	x21, x3
  24:	mov	x20, x4
  28:	cmp	x4, x2
  2c:	b.eq	64 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x64>  // b.none
  30:	ldr	x0, [x22, #16]
  34:	ldr	x1, [x0]
  38:	ldr	x5, [x1, #64]
  3c:	mov	x4, x20
  40:	mov	x3, x21
  44:	mov	x2, x19
  48:	mov	x1, x23
  4c:	blr	x5
  50:	ldp	x19, x20, [sp, #16]
  54:	ldp	x21, x22, [sp, #32]
  58:	ldr	x23, [sp, #48]
  5c:	ldp	x29, x30, [sp], #64
  60:	ret
  64:	ldr	x2, [x0, #8]
  68:	ldr	x1, [x3, #8]
  6c:	mov	w0, #0x6                   	// #6
  70:	cmp	x2, x1
  74:	b.eq	50 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x50>  // b.none
  78:	ldrb	w0, [x2]
  7c:	cmp	w0, #0x2a
  80:	b.eq	30 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x30>  // b.none
  84:	mov	x0, x2
  88:	bl	0 <strcmp>
  8c:	mov	w1, w0
  90:	mov	w0, #0x6                   	// #6
  94:	cbz	w1, 50 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x50>
  98:	b	30 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x30>

Disassembly of section .text._ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE:

0000000000000000 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	mov	x21, x0
  14:	mov	x22, x1
  18:	mov	x19, x2
  1c:	mov	x20, x3
  20:	bl	0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
  24:	ands	w0, w0, #0xff
  28:	b.ne	4c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x4c>  // b.any
  2c:	ldr	x0, [x21, #16]
  30:	ldr	x1, [x0]
  34:	ldr	x4, [x1, #48]
  38:	mov	x3, x20
  3c:	mov	x2, x19
  40:	mov	x1, x22
  44:	blr	x4
  48:	and	w0, w0, #0xff
  4c:	ldp	x19, x20, [sp, #16]
  50:	ldp	x21, x22, [sp, #32]
  54:	ldp	x29, x30, [sp], #48
  58:	ret

tinfo.o:     file format elf64-littleaarch64


Disassembly of section .text._ZNSt9type_infoD2Ev:

0000000000000000 <_ZNSt9type_infoD1Ev>:
   0:	ret

Disassembly of section .text._ZNKSt9type_info14__is_pointer_pEv:

0000000000000000 <_ZNKSt9type_info14__is_pointer_pEv>:
   0:	mov	w0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZNKSt9type_info15__is_function_pEv:

0000000000000000 <_ZNKSt9type_info15__is_function_pEv>:
   0:	mov	w0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv:

0000000000000000 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   0:	mov	w0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZNSt9type_infoD0Ev:

0000000000000000 <_ZNSt9type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZNSt9type_infoD0Ev>
  14:	mov	x1, #0x10                  	// #16
  18:	mov	x0, x19
  1c:	bl	0 <_ZdlPvm>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

Disassembly of section .text._ZNKSt9type_info10__do_catchEPKS_PPvj:

0000000000000000 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   0:	ldr	x2, [x0, #8]
   4:	ldr	x1, [x1, #8]
   8:	cmp	x2, x1
   c:	b.eq	40 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x40>  // b.none
  10:	ldrb	w3, [x2]
  14:	mov	w0, #0x0                   	// #0
  18:	cmp	w3, #0x2a
  1c:	b.eq	48 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x48>  // b.none
  20:	stp	x29, x30, [sp, #-16]!
  24:	mov	x29, sp
  28:	mov	x0, x2
  2c:	bl	0 <strcmp>
  30:	cmp	w0, #0x0
  34:	cset	w0, eq  // eq = none
  38:	ldp	x29, x30, [sp], #16
  3c:	ret
  40:	mov	w0, #0x1                   	// #1
  44:	ret
  48:	ret

tinfo2.o:     file format elf64-littleaarch64


vec.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm>:
   0:	mov	x3, x0
   4:	mov	x0, x2
   8:	cbz	x1, 88 <_ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm+0x88>
   c:	stp	x29, x30, [sp, #-16]!
  10:	mov	x29, sp
  14:	umulh	x2, x3, x1
  18:	cbnz	x2, 30 <_ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm+0x30>
  1c:	mul	x1, x1, x3
  20:	adds	x0, x0, x1
  24:	b.cs	5c <_ZN10__cxxabiv112_GLOBAL__N_112compute_sizeEmmm+0x5c>  // b.hs, b.nlast
  28:	ldp	x29, x30, [sp], #16
  2c:	ret
  30:	mov	x0, #0x8                   	// #8
  34:	bl	0 <__cxa_allocate_exception>
  38:	adrp	x1, 0 <_ZTVSt9bad_alloc>
  3c:	ldr	x1, [x1]
  40:	add	x1, x1, #0x10
  44:	str	x1, [x0]
  48:	adrp	x2, 0 <_ZNSt9bad_allocD1Ev>
  4c:	ldr	x2, [x2]
  50:	adrp	x1, 0 <_ZTISt9bad_alloc>
  54:	ldr	x1, [x1]
  58:	bl	0 <__cxa_throw>
  5c:	mov	x0, #0x8                   	// #8
  60:	bl	0 <__cxa_allocate_exception>
  64:	adrp	x1, 0 <_ZTVSt9bad_alloc>
  68:	ldr	x1, [x1]
  6c:	add	x1, x1, #0x10
  70:	str	x1, [x0]
  74:	adrp	x2, 0 <_ZNSt9bad_allocD1Ev>
  78:	ldr	x2, [x2]
  7c:	adrp	x1, 0 <_ZTISt9bad_alloc>
  80:	ldr	x1, [x1]
  84:	bl	0 <__cxa_throw>
  88:	ret

Disassembly of section .text._ZN10__cxxabiv112_GLOBAL__N_117uncatch_exceptionC2Ev:

0000000000000000 <_ZN10__cxxabiv112_GLOBAL__N_117uncatch_exceptionC1Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <__cxa_get_globals_fast>
  14:	ldr	x1, [x0]
  18:	str	x1, [x19]
  1c:	ldr	w2, [x1, #40]
  20:	sub	w2, w2, #0x1
  24:	str	w2, [x1, #40]
  28:	ldr	x1, [x1, #32]
  2c:	str	x1, [x0]
  30:	ldr	w1, [x0, #8]
  34:	add	w1, w1, #0x1
  38:	str	w1, [x0, #8]
  3c:	ldr	x19, [sp, #16]
  40:	ldp	x29, x30, [sp], #32
  44:	ret

Disassembly of section .text.__cxa_vec_cleanup:

0000000000000000 <__cxa_vec_cleanup>:
   0:	cbz	x3, 58 <__cxa_vec_cleanup+0x58>
   4:	stp	x29, x30, [sp, #-48]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	stp	x21, x22, [sp, #32]
  14:	mov	x20, x1
  18:	mov	x22, x2
  1c:	mov	x21, x3
  20:	madd	x19, x1, x2, x0
  24:	b	2c <__cxa_vec_cleanup+0x2c>
  28:	sub	x20, x20, #0x1
  2c:	cbz	x20, 48 <__cxa_vec_cleanup+0x48>
  30:	sub	x19, x19, x22
  34:	mov	x0, x19
  38:	blr	x21
  3c:	b	28 <__cxa_vec_cleanup+0x28>
  40:	bl	0 <__cxa_begin_catch>
  44:	bl	0 <_ZSt9terminatev>
  48:	ldp	x19, x20, [sp, #16]
  4c:	ldp	x21, x22, [sp, #32]
  50:	ldp	x29, x30, [sp], #48
  54:	ret
  58:	ret

Disassembly of section .text.__cxa_vec_ctor:

0000000000000000 <__cxa_vec_ctor>:
   0:	cbz	x3, b4 <__cxa_vec_ctor+0xb4>
   4:	stp	x29, x30, [sp, #-96]!
   8:	mov	x29, sp
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	str	x25, [sp, #64]
  18:	mov	x24, x0
  1c:	mov	x22, x1
  20:	mov	x23, x2
  24:	mov	x21, x3
  28:	mov	x25, x4
  2c:	cbz	x1, 60 <__cxa_vec_ctor+0x60>
  30:	stp	x19, x20, [sp, #16]
  34:	mov	x20, x0
  38:	mov	x19, #0x0                   	// #0
  3c:	b	50 <__cxa_vec_ctor+0x50>
  40:	add	x19, x19, #0x1
  44:	add	x20, x20, x23
  48:	cmp	x22, x19
  4c:	b.eq	5c <__cxa_vec_ctor+0x5c>  // b.none
  50:	mov	x0, x20
  54:	blr	x21
  58:	b	40 <__cxa_vec_ctor+0x40>
  5c:	ldp	x19, x20, [sp, #16]
  60:	ldp	x21, x22, [sp, #32]
  64:	ldp	x23, x24, [sp, #48]
  68:	ldr	x25, [sp, #64]
  6c:	ldp	x29, x30, [sp], #96
  70:	ret
  74:	bl	0 <__cxa_begin_catch>
  78:	add	x0, sp, #0x58
  7c:	bl	0 <__cxa_vec_ctor>
  80:	mov	x3, x25
  84:	mov	x2, x23
  88:	mov	x1, x19
  8c:	mov	x0, x24
  90:	bl	0 <__cxa_vec_ctor>
  94:	ldr	x0, [sp, #88]
  98:	add	x0, x0, #0x50
  9c:	bl	0 <__cxa_begin_catch>
  a0:	bl	0 <__cxa_rethrow>
  a4:	mov	x19, x0
  a8:	bl	0 <__cxa_end_catch>
  ac:	mov	x0, x19
  b0:	bl	0 <_Unwind_Resume>
  b4:	ret

Disassembly of section .text.__cxa_vec_new2:

0000000000000000 <__cxa_vec_new2>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	str	x25, [sp, #64]
  18:	mov	x21, x0
  1c:	mov	x22, x1
  20:	mov	x20, x2
  24:	mov	x23, x3
  28:	mov	x24, x4
  2c:	mov	x19, x5
  30:	mov	x25, x6
  34:	bl	0 <__cxa_vec_new2>
  38:	blr	x19
  3c:	mov	x19, x0
  40:	cbz	x0, b8 <__cxa_vec_new2+0xb8>
  44:	cbz	x20, 50 <__cxa_vec_new2+0x50>
  48:	add	x19, x0, x20
  4c:	stur	x21, [x19, #-8]
  50:	mov	x4, x24
  54:	mov	x3, x23
  58:	mov	x2, x22
  5c:	mov	x1, x21
  60:	mov	x0, x19
  64:	bl	0 <__cxa_vec_new2>
  68:	b	b8 <__cxa_vec_new2+0xb8>
  6c:	bl	0 <__cxa_begin_catch>
  70:	add	x0, sp, #0x58
  74:	bl	0 <__cxa_vec_new2>
  78:	cbz	x25, 84 <__cxa_vec_new2+0x84>
  7c:	sub	x0, x19, x20
  80:	blr	x25
  84:	ldr	x0, [sp, #88]
  88:	add	x0, x0, #0x50
  8c:	bl	0 <__cxa_begin_catch>
  90:	bl	0 <__cxa_rethrow>
  94:	mov	x19, x0
  98:	b	ac <__cxa_vec_new2+0xac>
  9c:	mov	x19, x0
  a0:	ldr	x0, [sp, #88]
  a4:	add	x0, x0, #0x50
  a8:	bl	0 <__cxa_begin_catch>
  ac:	bl	0 <__cxa_end_catch>
  b0:	mov	x0, x19
  b4:	bl	0 <_Unwind_Resume>
  b8:	mov	x0, x19
  bc:	ldp	x19, x20, [sp, #16]
  c0:	ldp	x21, x22, [sp, #32]
  c4:	ldp	x23, x24, [sp, #48]
  c8:	ldr	x25, [sp, #64]
  cc:	ldp	x29, x30, [sp], #96
  d0:	ret

Disassembly of section .text.__cxa_vec_new:

0000000000000000 <__cxa_vec_new>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x6, 0 <_ZdaPv>
   c:	ldr	x6, [x6]
  10:	adrp	x5, 0 <_Znam>
  14:	ldr	x5, [x5]
  18:	bl	0 <__cxa_vec_new>
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

Disassembly of section .text.__cxa_vec_new3:

0000000000000000 <__cxa_vec_new3>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	stp	x25, x26, [sp, #64]
  18:	mov	x21, x0
  1c:	mov	x22, x1
  20:	mov	x20, x2
  24:	mov	x23, x3
  28:	mov	x24, x4
  2c:	mov	x19, x5
  30:	mov	x25, x6
  34:	bl	0 <__cxa_vec_new3>
  38:	mov	x26, x0
  3c:	blr	x19
  40:	mov	x19, x0
  44:	cbz	x0, c0 <__cxa_vec_new3+0xc0>
  48:	cbz	x20, 54 <__cxa_vec_new3+0x54>
  4c:	add	x19, x0, x20
  50:	stur	x21, [x19, #-8]
  54:	mov	x4, x24
  58:	mov	x3, x23
  5c:	mov	x2, x22
  60:	mov	x1, x21
  64:	mov	x0, x19
  68:	bl	0 <__cxa_vec_new3>
  6c:	b	c0 <__cxa_vec_new3+0xc0>
  70:	bl	0 <__cxa_begin_catch>
  74:	add	x0, sp, #0x58
  78:	bl	0 <__cxa_vec_new3>
  7c:	cbz	x25, 8c <__cxa_vec_new3+0x8c>
  80:	mov	x1, x26
  84:	sub	x0, x19, x20
  88:	blr	x25
  8c:	ldr	x0, [sp, #88]
  90:	add	x0, x0, #0x50
  94:	bl	0 <__cxa_begin_catch>
  98:	bl	0 <__cxa_rethrow>
  9c:	mov	x19, x0
  a0:	b	b4 <__cxa_vec_new3+0xb4>
  a4:	mov	x19, x0
  a8:	ldr	x0, [sp, #88]
  ac:	add	x0, x0, #0x50
  b0:	bl	0 <__cxa_begin_catch>
  b4:	bl	0 <__cxa_end_catch>
  b8:	mov	x0, x19
  bc:	bl	0 <_Unwind_Resume>
  c0:	mov	x0, x19
  c4:	ldp	x19, x20, [sp, #16]
  c8:	ldp	x21, x22, [sp, #32]
  cc:	ldp	x23, x24, [sp, #48]
  d0:	ldp	x25, x26, [sp, #64]
  d4:	ldp	x29, x30, [sp], #96
  d8:	ret

Disassembly of section .text.__cxa_vec_cctor:

0000000000000000 <__cxa_vec_cctor>:
   0:	cbz	x4, c0 <__cxa_vec_cctor+0xc0>
   4:	stp	x29, x30, [sp, #-96]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	stp	x21, x22, [sp, #32]
  14:	stp	x23, x24, [sp, #48]
  18:	stp	x25, x26, [sp, #64]
  1c:	mov	x25, x0
  20:	mov	x19, x1
  24:	mov	x24, x2
  28:	mov	x22, x3
  2c:	mov	x23, x4
  30:	mov	x26, x5
  34:	cbz	x2, a8 <__cxa_vec_cctor+0xa8>
  38:	mov	x21, x0
  3c:	mov	x20, #0x0                   	// #0
  40:	b	58 <__cxa_vec_cctor+0x58>
  44:	add	x20, x20, #0x1
  48:	add	x19, x19, x22
  4c:	add	x21, x21, x22
  50:	cmp	x24, x20
  54:	b.eq	a8 <__cxa_vec_cctor+0xa8>  // b.none
  58:	mov	x1, x19
  5c:	mov	x0, x21
  60:	blr	x23
  64:	b	44 <__cxa_vec_cctor+0x44>
  68:	bl	0 <__cxa_begin_catch>
  6c:	add	x0, sp, #0x58
  70:	bl	0 <__cxa_vec_cctor>
  74:	mov	x3, x26
  78:	mov	x2, x22
  7c:	mov	x1, x20
  80:	mov	x0, x25
  84:	bl	0 <__cxa_vec_cctor>
  88:	ldr	x0, [sp, #88]
  8c:	add	x0, x0, #0x50
  90:	bl	0 <__cxa_begin_catch>
  94:	bl	0 <__cxa_rethrow>
  98:	mov	x19, x0
  9c:	bl	0 <__cxa_end_catch>
  a0:	mov	x0, x19
  a4:	bl	0 <_Unwind_Resume>
  a8:	ldp	x19, x20, [sp, #16]
  ac:	ldp	x21, x22, [sp, #32]
  b0:	ldp	x23, x24, [sp, #48]
  b4:	ldp	x25, x26, [sp, #64]
  b8:	ldp	x29, x30, [sp], #96
  bc:	ret
  c0:	ret

Disassembly of section .text.__cxa_vec_dtor:

0000000000000000 <__cxa_vec_dtor>:
   0:	cbz	x3, a0 <__cxa_vec_dtor+0xa0>
   4:	stp	x29, x30, [sp, #-80]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	stp	x21, x22, [sp, #32]
  14:	str	x23, [sp, #48]
  18:	mov	x23, x0
  1c:	mov	x22, x2
  20:	mov	x21, x3
  24:	madd	x20, x1, x2, x0
  28:	sub	x19, x1, #0x1
  2c:	b	34 <__cxa_vec_dtor+0x34>
  30:	sub	x19, x19, #0x1
  34:	cmn	x19, #0x1
  38:	b.eq	8c <__cxa_vec_dtor+0x8c>  // b.none
  3c:	sub	x20, x20, x22
  40:	mov	x0, x20
  44:	blr	x21
  48:	b	30 <__cxa_vec_dtor+0x30>
  4c:	bl	0 <__cxa_begin_catch>
  50:	add	x0, sp, #0x48
  54:	bl	0 <__cxa_vec_dtor>
  58:	mov	x3, x21
  5c:	mov	x2, x22
  60:	mov	x1, x19
  64:	mov	x0, x23
  68:	bl	0 <__cxa_vec_dtor>
  6c:	ldr	x0, [sp, #72]
  70:	add	x0, x0, #0x50
  74:	bl	0 <__cxa_begin_catch>
  78:	bl	0 <__cxa_rethrow>
  7c:	mov	x19, x0
  80:	bl	0 <__cxa_end_catch>
  84:	mov	x0, x19
  88:	bl	0 <_Unwind_Resume>
  8c:	ldp	x19, x20, [sp, #16]
  90:	ldp	x21, x22, [sp, #32]
  94:	ldr	x23, [sp, #48]
  98:	ldp	x29, x30, [sp], #80
  9c:	ret
  a0:	ret

Disassembly of section .text.__cxa_vec_delete2:

0000000000000000 <__cxa_vec_delete2>:
   0:	cbz	x0, 88 <__cxa_vec_delete2+0x88>
   4:	stp	x29, x30, [sp, #-48]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x20, x4
  14:	cbnz	x2, 28 <__cxa_vec_delete2+0x28>
  18:	blr	x20
  1c:	ldp	x19, x20, [sp, #16]
  20:	ldp	x29, x30, [sp], #48
  24:	ret
  28:	sub	x19, x0, x2
  2c:	mov	x2, x1
  30:	ldur	x1, [x0, #-8]
  34:	bl	0 <__cxa_vec_delete2>
  38:	mov	x0, x19
  3c:	b	18 <__cxa_vec_delete2+0x18>
  40:	bl	0 <__cxa_begin_catch>
  44:	add	x0, sp, #0x28
  48:	bl	0 <__cxa_vec_delete2>
  4c:	mov	x0, x19
  50:	blr	x20
  54:	ldr	x0, [sp, #40]
  58:	add	x0, x0, #0x50
  5c:	bl	0 <__cxa_begin_catch>
  60:	bl	0 <__cxa_rethrow>
  64:	mov	x19, x0
  68:	b	7c <__cxa_vec_delete2+0x7c>
  6c:	mov	x19, x0
  70:	ldr	x0, [sp, #40]
  74:	add	x0, x0, #0x50
  78:	bl	0 <__cxa_begin_catch>
  7c:	bl	0 <__cxa_end_catch>
  80:	mov	x0, x19
  84:	bl	0 <_Unwind_Resume>
  88:	ret

Disassembly of section .text.__cxa_vec_delete:

0000000000000000 <__cxa_vec_delete>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x4, 0 <_ZdaPv>
   c:	ldr	x4, [x4]
  10:	bl	0 <__cxa_vec_delete>
  14:	ldp	x29, x30, [sp], #16
  18:	ret

Disassembly of section .text.__cxa_vec_delete3:

0000000000000000 <__cxa_vec_delete3>:
   0:	cbz	x0, a4 <__cxa_vec_delete3+0xa4>
   4:	stp	x29, x30, [sp, #-64]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x2
  14:	mov	x20, x4
  18:	cbnz	x2, 30 <__cxa_vec_delete3+0x30>
  1c:	mov	x1, x19
  20:	blr	x20
  24:	ldp	x19, x20, [sp, #16]
  28:	ldp	x29, x30, [sp], #64
  2c:	ret
  30:	str	x21, [sp, #32]
  34:	ldur	x4, [x0, #-8]
  38:	sub	x21, x0, x2
  3c:	madd	x19, x4, x1, x2
  40:	mov	x2, x1
  44:	mov	x1, x4
  48:	bl	0 <__cxa_vec_delete3>
  4c:	mov	x0, x21
  50:	ldr	x21, [sp, #32]
  54:	b	1c <__cxa_vec_delete3+0x1c>
  58:	bl	0 <__cxa_begin_catch>
  5c:	add	x0, sp, #0x38
  60:	bl	0 <__cxa_vec_delete3>
  64:	mov	x1, x19
  68:	mov	x0, x21
  6c:	blr	x20
  70:	ldr	x0, [sp, #56]
  74:	add	x0, x0, #0x50
  78:	bl	0 <__cxa_begin_catch>
  7c:	bl	0 <__cxa_rethrow>
  80:	mov	x19, x0
  84:	b	98 <__cxa_vec_delete3+0x98>
  88:	mov	x19, x0
  8c:	ldr	x0, [sp, #56]
  90:	add	x0, x0, #0x50
  94:	bl	0 <__cxa_begin_catch>
  98:	bl	0 <__cxa_end_catch>
  9c:	mov	x0, x19
  a0:	bl	0 <_Unwind_Resume>
  a4:	ret

vmi_class_type_info.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN10__cxxabiv121__vmi_class_type_infoD2Ev:

0000000000000000 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x1, 0 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
   c:	ldr	x1, [x1]
  10:	add	x1, x1, #0x10
  14:	str	x1, [x0]
  18:	bl	0 <_ZN10__cxxabiv117__class_type_infoD2Ev>
  1c:	ldp	x29, x30, [sp], #16
  20:	ret

Disassembly of section .text._ZN10__cxxabiv121__vmi_class_type_infoD0Ev:

0000000000000000 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>
  14:	mov	x1, #0x28                  	// #40
  18:	mov	x0, x19
  1c:	bl	0 <_ZdlPvm>
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

Disassembly of section .text._ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_:

0000000000000000 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	str	x25, [sp, #64]
  18:	mov	x20, x0
  1c:	mov	x22, x1
  20:	mov	x23, x2
  24:	mov	x25, x3
  28:	mov	x24, x4
  2c:	cmp	x2, x4
  30:	b.eq	48 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x48>  // b.none
  34:	ldr	w21, [x20, #20]
  38:	cbz	x21, f0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xf0>
  3c:	add	x20, x20, x21, lsl #4
  40:	add	x20, x20, #0x8
  44:	b	b4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xb4>
  48:	ldr	x2, [x0, #8]
  4c:	ldr	x1, [x3, #8]
  50:	mov	w0, #0x6                   	// #6
  54:	cmp	x2, x1
  58:	b.eq	fc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xfc>  // b.none
  5c:	ldrb	w0, [x2]
  60:	cmp	w0, #0x2a
  64:	b.eq	34 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x34>  // b.none
  68:	mov	x0, x2
  6c:	bl	0 <strcmp>
  70:	mov	w1, w0
  74:	mov	w0, #0x6                   	// #6
  78:	cbz	w1, fc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xfc>
  7c:	b	34 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x34>
  80:	ldr	x0, [x1]
  84:	ldr	x1, [x0]
  88:	ldr	x5, [x1, #64]
  8c:	mov	x4, x24
  90:	mov	x3, x25
  94:	add	x2, x23, x2
  98:	mov	x1, x22
  9c:	blr	x5
  a0:	cmp	w0, #0x3
  a4:	b.gt	e0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xe0>
  a8:	sub	x20, x20, #0x10
  ac:	subs	x21, x21, #0x1
  b0:	b.eq	f8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xf8>  // b.none
  b4:	mov	x1, x20
  b8:	ldr	x0, [x20, #8]
  bc:	tbz	w0, #1, a8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xa8>
  c0:	asr	x2, x0, #8
  c4:	ands	x19, x0, #0x1
  c8:	ccmn	x22, #0x3, #0x0, ne  // ne = any
  cc:	b.eq	a8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xa8>  // b.none
  d0:	cbz	x19, 80 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x80>
  d4:	ldr	x0, [x23]
  d8:	ldr	x2, [x0, x2]
  dc:	b	80 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x80>
  e0:	orr	w1, w0, #0x1
  e4:	cmp	x19, #0x0
  e8:	csel	w0, w1, w0, ne  // ne = any
  ec:	b	fc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xfc>
  f0:	mov	w0, #0x1                   	// #1
  f4:	b	fc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xfc>
  f8:	mov	w0, #0x1                   	// #1
  fc:	ldp	x19, x20, [sp, #16]
 100:	ldp	x21, x22, [sp, #32]
 104:	ldp	x23, x24, [sp, #48]
 108:	ldr	x25, [sp, #64]
 10c:	ldp	x29, x30, [sp], #80
 110:	ret

Disassembly of section .text._ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE:

0000000000000000 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   0:	stp	x29, x30, [sp, #-192]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x25, x26, [sp, #64]
  10:	stp	x27, x28, [sp, #80]
  14:	mov	x8, x0
  18:	str	x0, [sp, #136]
  1c:	mov	x25, x1
  20:	str	w2, [sp, #108]
  24:	str	x3, [sp, #112]
  28:	mov	x26, x4
  2c:	str	x5, [sp, #120]
  30:	mov	x28, x6
  34:	mov	x19, x7
  38:	ldr	w0, [x7, #20]
  3c:	tbz	w0, #4, 48 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x48>
  40:	ldr	w0, [x8, #16]
  44:	str	w0, [x7, #20]
  48:	cmp	x26, x28
  4c:	b.eq	c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xc8>  // b.none
  50:	ldr	x0, [sp, #136]
  54:	ldr	x0, [x0, #8]
  58:	ldr	x1, [sp, #112]
  5c:	ldr	x1, [x1, #8]
  60:	cmp	x0, x1
  64:	b.eq	10c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x10c>  // b.none
  68:	ldrb	w2, [x0]
  6c:	cmp	w2, #0x2a
  70:	b.eq	374 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x374>  // b.none
  74:	bl	0 <strcmp>
  78:	cbz	w0, 10c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x10c>
  7c:	stp	x21, x22, [sp, #32]
  80:	stp	x23, x24, [sp, #48]
  84:	sub	x24, x28, x25
  88:	cmp	x25, #0x0
  8c:	csel	x24, x24, xzr, ge  // ge = tcont
  90:	mov	w27, #0x0                   	// #0
  94:	str	wzr, [sp, #152]
  98:	mov	w0, #0x1                   	// #1
  9c:	str	w0, [sp, #144]
  a0:	str	w0, [sp, #156]
  a4:	add	x1, sp, #0xa8
  a8:	str	x1, [sp, #128]
  ac:	str	w0, [sp, #148]
  b0:	ldr	x0, [sp, #136]
  b4:	ldr	w22, [x0, #20]
  b8:	cbz	x22, 314 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
  bc:	add	x20, x0, x22, lsl #4
  c0:	add	x20, x20, #0x8
  c4:	b	3d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d8>
  c8:	ldr	x0, [sp, #136]
  cc:	ldr	x0, [x0, #8]
  d0:	ldr	x1, [sp, #120]
  d4:	ldr	x1, [x1, #8]
  d8:	cmp	x0, x1
  dc:	b.eq	380 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x380>  // b.none
  e0:	ldrb	w2, [x0]
  e4:	cmp	w2, #0x2a
  e8:	b.eq	548 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x548>  // b.none
  ec:	bl	0 <strcmp>
  f0:	cbz	w0, 380 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x380>
  f4:	ldr	x0, [sp, #136]
  f8:	ldr	x0, [x0, #8]
  fc:	ldr	x1, [sp, #112]
 100:	ldr	x1, [x1, #8]
 104:	cmp	x0, x1
 108:	b.ne	74 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x74>  // b.any
 10c:	str	x26, [x19]
 110:	ldr	w0, [sp, #108]
 114:	str	w0, [x19, #8]
 118:	tbnz	x25, #63, 138 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x138>
 11c:	add	x25, x26, x25
 120:	cmp	x28, x25
 124:	mov	w0, #0x6                   	// #6
 128:	csinc	w0, w0, wzr, eq  // eq = none
 12c:	str	w0, [x19, #16]
 130:	mov	w27, #0x0                   	// #0
 134:	b	17c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17c>
 138:	mov	w27, #0x0                   	// #0
 13c:	cmn	x25, #0x2
 140:	b.ne	17c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17c>  // b.any
 144:	mov	w0, #0x1                   	// #1
 148:	str	w0, [x19, #16]
 14c:	b	17c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17c>
 150:	tst	x1, #0x3
 154:	b.ne	43c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x43c>  // b.any
 158:	b	3cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3cc>
 15c:	ldr	x1, [sp, #168]
 160:	str	x1, [x19]
 164:	ldr	w1, [sp, #176]
 168:	str	w1, [x19, #8]
 16c:	str	w21, [x19, #16]
 170:	mov	w27, w0
 174:	ldp	x21, x22, [sp, #32]
 178:	ldp	x23, x24, [sp, #48]
 17c:	mov	w0, w27
 180:	ldp	x19, x20, [sp, #16]
 184:	ldp	x25, x26, [sp, #64]
 188:	ldp	x27, x28, [sp, #80]
 18c:	ldp	x29, x30, [sp], #192
 190:	ret
 194:	ldr	x2, [sp, #168]
 198:	str	x2, [x19]
 19c:	ldr	w3, [sp, #176]
 1a0:	str	w3, [x19, #8]
 1a4:	cmp	x2, #0x0
 1a8:	mov	w27, w0
 1ac:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 1b0:	b.eq	3c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c0>  // b.none
 1b4:	ldr	x1, [sp, #136]
 1b8:	ldr	w1, [x1, #16]
 1bc:	tbnz	w1, #0, 3c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c0>
 1c0:	ldp	x21, x22, [sp, #32]
 1c4:	ldp	x23, x24, [sp, #48]
 1c8:	b	17c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17c>
 1cc:	ldr	x2, [x19]
 1d0:	cbnz	x2, 494 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x494>
 1d4:	ldr	x0, [sp, #168]
 1d8:	cbz	x0, 3c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c0>
 1dc:	b	4ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ac>
 1e0:	ldr	w0, [x19, #8]
 1e4:	ldr	w1, [sp, #176]
 1e8:	orr	w0, w0, w1
 1ec:	str	w0, [x19, #8]
 1f0:	b	3c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c0>
 1f4:	cmp	w23, #0x0
 1f8:	csinc	w23, w23, wzr, ne  // ne = any
 1fc:	cmp	w21, #0x0
 200:	csinc	w21, w21, wzr, ne  // ne = any
 204:	mov	w0, w21
 208:	mov	w2, w23
 20c:	eor	w1, w21, w23
 210:	cmp	w1, #0x3
 214:	b.le	3a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3a4>
 218:	cmp	w0, #0x3
 21c:	b.le	238 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x238>
 220:	ldr	x0, [sp, #168]
 224:	str	x0, [x19]
 228:	ldr	w0, [sp, #176]
 22c:	str	w0, [x19, #8]
 230:	mov	w23, w21
 234:	mov	w27, #0x0                   	// #0
 238:	str	w23, [x19, #16]
 23c:	tbnz	w23, #1, 304 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x304>
 240:	tbnz	w23, #0, 3c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c0>
 244:	mov	w27, #0x0                   	// #0
 248:	ldp	x21, x22, [sp, #32]
 24c:	ldp	x23, x24, [sp, #48]
 250:	b	17c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17c>
 254:	mov	w0, w21
 258:	cmp	w21, #0x3
 25c:	b.le	270 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x270>
 260:	tbz	w21, #0, 390 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x390>
 264:	ldr	x1, [sp, #136]
 268:	ldr	w1, [x1, #16]
 26c:	tbz	w1, #1, 390 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x390>
 270:	tbnz	x25, #63, 2a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a0>
 274:	add	x2, x2, x25
 278:	cmp	x28, x2
 27c:	b.eq	354 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x354>  // b.none
 280:	cmp	w0, #0x0
 284:	b.le	524 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x524>
 288:	mov	w0, w21
 28c:	eor	w1, w21, #0x1
 290:	mov	w23, #0x1                   	// #1
 294:	cmp	w1, #0x3
 298:	b.gt	218 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x218>
 29c:	b	3b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3b0>
 2a0:	cmn	x25, #0x2
 2a4:	b.eq	364 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x364>  // b.none
 2a8:	ldr	x6, [sp, #112]
 2ac:	ldr	x0, [x6]
 2b0:	ldr	x5, [x0, #64]
 2b4:	mov	x4, x28
 2b8:	ldr	x3, [sp, #120]
 2bc:	mov	x1, x25
 2c0:	mov	x0, x6
 2c4:	blr	x5
 2c8:	mov	w23, w0
 2cc:	b	4cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4cc>
 2d0:	str	xzr, [x19]
 2d4:	mov	w0, #0x2                   	// #2
 2d8:	str	w0, [x19, #16]
 2dc:	mov	w27, #0x1                   	// #1
 2e0:	ldp	x21, x22, [sp, #32]
 2e4:	ldp	x23, x24, [sp, #48]
 2e8:	b	17c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17c>
 2ec:	ldp	x21, x22, [sp, #32]
 2f0:	ldp	x23, x24, [sp, #48]
 2f4:	b	17c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17c>
 2f8:	ldr	w0, [sp, #156]
 2fc:	str	w0, [sp, #152]
 300:	b	3cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3cc>
 304:	mov	w27, #0x0                   	// #0
 308:	ldp	x21, x22, [sp, #32]
 30c:	ldp	x23, x24, [sp, #48]
 310:	b	17c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17c>
 314:	ldr	w0, [sp, #144]
 318:	ldr	w1, [sp, #152]
 31c:	and	w0, w0, w1
 320:	str	w0, [sp, #152]
 324:	str	wzr, [sp, #144]
 328:	cbnz	w0, b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
 32c:	ldp	x21, x22, [sp, #32]
 330:	ldp	x23, x24, [sp, #48]
 334:	b	17c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17c>
 338:	mov	w2, w23
 33c:	eor	w23, w23, #0x6
 340:	mov	w0, #0x6                   	// #6
 344:	cmp	w23, #0x3
 348:	b.le	3a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3a4>
 34c:	mov	w21, #0x6                   	// #6
 350:	b	220 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x220>
 354:	mov	w23, #0x6                   	// #6
 358:	cmp	w0, #0x0
 35c:	b.gt	204 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x204>
 360:	b	538 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
 364:	mov	w23, #0x1                   	// #1
 368:	cmp	w0, #0x0
 36c:	b.gt	288 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x288>
 370:	b	4ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ec>
 374:	stp	x21, x22, [sp, #32]
 378:	stp	x23, x24, [sp, #48]
 37c:	b	84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x84>
 380:	ldr	w0, [sp, #108]
 384:	str	w0, [x19, #12]
 388:	mov	w27, #0x0                   	// #0
 38c:	b	17c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17c>
 390:	mov	w0, w21
 394:	eor	w1, w21, #0x1
 398:	cmp	w1, #0x3
 39c:	b.gt	220 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x220>
 3a0:	ldr	w2, [sp, #156]
 3a4:	and	w0, w0, w2
 3a8:	cmp	w0, #0x3
 3ac:	b.gt	2d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d0>
 3b0:	str	xzr, [x19]
 3b4:	mov	w0, #0x1                   	// #1
 3b8:	str	w0, [x19, #16]
 3bc:	ldr	w27, [sp, #148]
 3c0:	ldr	w0, [x19, #12]
 3c4:	cmp	w0, #0x4
 3c8:	b.eq	2ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2ec>  // b.none
 3cc:	sub	x20, x20, #0x10
 3d0:	subs	x22, x22, #0x1
 3d4:	b.eq	314 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>  // b.none
 3d8:	ldr	w1, [x19, #20]
 3dc:	str	xzr, [sp, #168]
 3e0:	str	wzr, [sp, #176]
 3e4:	str	wzr, [sp, #180]
 3e8:	str	wzr, [sp, #184]
 3ec:	str	w1, [sp, #188]
 3f0:	mov	x3, x20
 3f4:	ldr	x0, [x20, #8]
 3f8:	asr	x4, x0, #8
 3fc:	ldr	w5, [sp, #108]
 400:	mov	w2, w5
 404:	tbz	w0, #0, 414 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x414>
 408:	orr	w2, w5, #0x1
 40c:	ldr	x5, [x26]
 410:	ldr	x4, [x5, x4]
 414:	add	x4, x26, x4
 418:	cbz	x24, 430 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x430>
 41c:	cmp	x24, x4
 420:	cset	w5, cc  // cc = lo, ul, last
 424:	ldr	w6, [sp, #144]
 428:	cmp	w5, w6
 42c:	b.eq	2f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>  // b.none
 430:	tbnz	w0, #1, 440 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x440>
 434:	cmn	x25, #0x2
 438:	b.eq	150 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>  // b.none
 43c:	and	w2, w2, #0xfffffffd
 440:	ldr	x0, [x3]
 444:	ldr	x1, [x0]
 448:	ldr	x8, [x1, #56]
 44c:	ldr	x7, [sp, #128]
 450:	mov	x6, x28
 454:	ldr	x5, [sp, #120]
 458:	ldr	x3, [sp, #112]
 45c:	mov	x1, x25
 460:	blr	x8
 464:	and	w0, w0, #0xff
 468:	ldr	w1, [x19, #12]
 46c:	ldr	w2, [sp, #180]
 470:	orr	w1, w1, w2
 474:	str	w1, [x19, #12]
 478:	ldr	w21, [sp, #184]
 47c:	and	w2, w21, #0xfffffffb
 480:	cmp	w2, #0x2
 484:	b.eq	15c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15c>  // b.none
 488:	cbnz	w27, 1cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1cc>
 48c:	ldr	x2, [x19]
 490:	cbz	x2, 194 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x194>
 494:	ldr	x3, [sp, #168]
 498:	cmp	x3, x2
 49c:	b.eq	1e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e0>  // b.none
 4a0:	cmp	x3, #0x0
 4a4:	ccmp	w0, #0x0, #0x0, eq  // eq = none
 4a8:	b.eq	3c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c0>  // b.none
 4ac:	ldr	w23, [x19, #16]
 4b0:	cmp	w1, #0x3
 4b4:	b.le	4c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c4>
 4b8:	tbz	w1, #0, 1f4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f4>
 4bc:	ldr	w0, [x19, #20]
 4c0:	tbz	w0, #1, 1f4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f4>
 4c4:	cmp	w23, #0x0
 4c8:	b.le	254 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x254>
 4cc:	cmp	w21, #0x0
 4d0:	b.gt	204 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x204>
 4d4:	cmp	w23, #0x3
 4d8:	b.le	4ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ec>
 4dc:	tbz	w23, #0, 538 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
 4e0:	ldr	x0, [sp, #136]
 4e4:	ldr	w0, [x0, #16]
 4e8:	tbz	w0, #1, 538 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
 4ec:	ldr	x2, [sp, #168]
 4f0:	tbz	x25, #63, 52c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x52c>
 4f4:	cmn	x25, #0x2
 4f8:	b.eq	538 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>  // b.none
 4fc:	ldr	x6, [sp, #112]
 500:	ldr	x0, [x6]
 504:	ldr	x5, [x0, #64]
 508:	mov	x4, x28
 50c:	ldr	x3, [sp, #120]
 510:	mov	x1, x25
 514:	mov	x0, x6
 518:	blr	x5
 51c:	mov	w21, w0
 520:	b	204 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x204>
 524:	ldr	x2, [sp, #168]
 528:	mov	w23, #0x1                   	// #1
 52c:	add	x2, x2, x25
 530:	cmp	x28, x2
 534:	b.eq	338 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x338>  // b.none
 538:	eor	w0, w23, #0x1
 53c:	cmp	w0, #0x3
 540:	b.gt	238 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x238>
 544:	b	3b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3b0>
 548:	ldr	x0, [sp, #136]
 54c:	ldr	x1, [x0, #8]
 550:	ldr	x0, [sp, #112]
 554:	ldr	x0, [x0, #8]
 558:	cmp	x1, x0
 55c:	b.eq	10c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x10c>  // b.none
 560:	stp	x21, x22, [sp, #32]
 564:	stp	x23, x24, [sp, #48]
 568:	b	84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x84>

Disassembly of section .text._ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE:

0000000000000000 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   0:	stp	x29, x30, [sp, #-160]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x23, x24, [sp, #48]
  10:	stp	x25, x26, [sp, #64]
  14:	mov	x19, x0
  18:	str	x0, [sp, #120]
  1c:	str	x1, [sp, #96]
  20:	mov	x23, x2
  24:	mov	x25, x3
  28:	bl	0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
  2c:	ands	w20, w0, #0xff
  30:	b.ne	150 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x150>  // b.any
  34:	stp	x21, x22, [sp, #32]
  38:	stp	x27, x28, [sp, #80]
  3c:	ldr	w27, [x25, #12]
  40:	tbz	w27, #4, 48 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x48>
  44:	ldr	w27, [x19, #16]
  48:	ldr	x0, [sp, #120]
  4c:	ldr	w21, [x0, #20]
  50:	cbz	x21, 13c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x13c>
  54:	add	x19, x0, x21, lsl #4
  58:	add	x19, x19, #0x8
  5c:	str	x23, [sp, #104]
  60:	add	x28, sp, #0x88
  64:	and	w0, w27, #0x1
  68:	str	w0, [sp, #116]
  6c:	b	184 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x184>
  70:	ldr	x0, [x24]
  74:	str	x0, [sp, #152]
  78:	b	1fc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1fc>
  7c:	and	w0, w0, #0xfffffffd
  80:	str	w0, [sp, #144]
  84:	b	20c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x20c>
  88:	ldp	x0, x1, [x28]
  8c:	stp	x0, x1, [x25]
  90:	ldr	x0, [x28, #16]
  94:	str	x0, [x25, #16]
  98:	ldr	w0, [x25, #8]
  9c:	cmp	w0, #0x3
  a0:	b.le	23c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x23c>
  a4:	tbz	w0, #1, c0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc0>
  a8:	ldr	x0, [sp, #120]
  ac:	ldr	w0, [x0, #16]
  b0:	tbnz	w0, #0, 178 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x178>
  b4:	ldp	x21, x22, [sp, #32]
  b8:	ldp	x27, x28, [sp, #80]
  bc:	b	150 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x150>
  c0:	tbz	w0, #0, 248 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x248>
  c4:	ldr	x0, [sp, #120]
  c8:	ldr	w0, [x0, #16]
  cc:	tbnz	w0, #1, 178 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x178>
  d0:	ldp	x21, x22, [sp, #32]
  d4:	ldp	x27, x28, [sp, #80]
  d8:	b	150 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x150>
  dc:	str	xzr, [x25]
  e0:	mov	w0, #0x2                   	// #2
  e4:	str	w0, [x25, #8]
  e8:	ldp	x21, x22, [sp, #32]
  ec:	ldp	x27, x28, [sp, #80]
  f0:	b	150 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x150>
  f4:	ldr	x0, [sp, #152]
  f8:	cmp	x1, #0x10
  fc:	ccmp	x0, #0x10, #0x4, ne  // ne = any
 100:	b.eq	128 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x128>  // b.none
 104:	ldr	x0, [x0, #8]
 108:	ldr	x1, [x1, #8]
 10c:	cmp	x0, x1
 110:	b.eq	168 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x168>  // b.none
 114:	ldrb	w2, [x0]
 118:	cmp	w2, #0x2a
 11c:	b.eq	128 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x128>  // b.none
 120:	bl	0 <strcmp>
 124:	cbz	w0, 168 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x168>
 128:	mov	w0, #0x2                   	// #2
 12c:	str	w0, [x25, #8]
 130:	ldp	x21, x22, [sp, #32]
 134:	ldp	x27, x28, [sp, #80]
 138:	b	150 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x150>
 13c:	ldr	w0, [x25, #8]
 140:	cmp	w0, #0x0
 144:	cset	w20, ne  // ne = any
 148:	ldp	x21, x22, [sp, #32]
 14c:	ldp	x27, x28, [sp, #80]
 150:	mov	w0, w20
 154:	ldp	x19, x20, [sp, #16]
 158:	ldp	x23, x24, [sp, #48]
 15c:	ldp	x25, x26, [sp, #64]
 160:	ldp	x29, x30, [sp], #160
 164:	ret
 168:	ldr	w0, [x25, #8]
 16c:	ldr	w1, [sp, #144]
 170:	orr	w0, w0, w1
 174:	str	w0, [x25, #8]
 178:	sub	x19, x19, #0x10
 17c:	subs	x21, x21, #0x1
 180:	b.eq	13c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x13c>  // b.none
 184:	str	xzr, [sp, #136]
 188:	str	wzr, [sp, #144]
 18c:	str	w27, [sp, #148]
 190:	str	xzr, [sp, #152]
 194:	mov	x24, x19
 198:	ldr	x0, [x19, #8]
 19c:	and	x22, x0, #0x1
 1a0:	and	x26, x0, #0x2
 1a4:	tbnz	w0, #1, 1b0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1b0>
 1a8:	ldr	w1, [sp, #116]
 1ac:	cbz	w1, 178 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x178>
 1b0:	ldr	x2, [sp, #104]
 1b4:	cbz	x23, 1cc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1cc>
 1b8:	asr	x2, x0, #8
 1bc:	cbz	x22, 1c8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1c8>
 1c0:	ldr	x0, [x23]
 1c4:	ldr	x2, [x0, x2]
 1c8:	add	x2, x23, x2
 1cc:	ldr	x0, [x24]
 1d0:	ldr	x1, [x0]
 1d4:	ldr	x4, [x1, #48]
 1d8:	mov	x3, x28
 1dc:	ldr	x1, [sp, #96]
 1e0:	blr	x4
 1e4:	ands	w20, w0, #0xff
 1e8:	b.eq	178 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x178>  // b.none
 1ec:	cmp	x22, #0x0
 1f0:	ldr	x0, [sp, #152]
 1f4:	ccmp	x0, #0x10, #0x0, ne  // ne = any
 1f8:	b.eq	70 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x70>  // b.none
 1fc:	ldr	w0, [sp, #144]
 200:	cmp	x26, #0x0
 204:	ccmp	w0, #0x3, #0x4, eq  // eq = none
 208:	b.gt	7c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x7c>
 20c:	ldr	x1, [x25, #16]
 210:	cbz	x1, 88 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x88>
 214:	ldr	x0, [x25]
 218:	ldr	x2, [sp, #136]
 21c:	cmp	x0, x2
 220:	b.ne	dc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xdc>  // b.any
 224:	cbz	x0, f4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf4>
 228:	ldr	w0, [x25, #8]
 22c:	ldr	w1, [sp, #144]
 230:	orr	w0, w0, w1
 234:	str	w0, [x25, #8]
 238:	b	178 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x178>
 23c:	ldp	x21, x22, [sp, #32]
 240:	ldp	x27, x28, [sp, #80]
 244:	b	150 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x150>
 248:	ldp	x21, x22, [sp, #32]
 24c:	ldp	x27, x28, [sp, #80]
 250:	b	150 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x150>

vterminate.o:     file format elf64-littleaarch64


Disassembly of section .text._ZN9__gnu_cxx27__verbose_terminate_handlerEv:

0000000000000000 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
   c:	ldrb	w0, [x0]
  10:	cbnz	w0, 10c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>
  14:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
  18:	mov	w1, #0x1                   	// #1
  1c:	strb	w1, [x0]
  20:	bl	0 <__cxa_current_exception_type>
  24:	cbz	x0, 14c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x14c>
  28:	stp	x19, x20, [sp, #16]
  2c:	ldr	x19, [x0, #8]
  30:	ldrb	w0, [x19]
  34:	cmp	w0, #0x2a
  38:	cinc	x19, x19, eq  // eq = none
  3c:	mov	w0, #0xffffffff            	// #-1
  40:	str	w0, [sp, #44]
  44:	add	x3, sp, #0x2c
  48:	mov	x2, #0x0                   	// #0
  4c:	mov	x1, #0x0                   	// #0
  50:	mov	x0, x19
  54:	bl	0 <__cxa_demangle>
  58:	mov	x20, x0
  5c:	adrp	x1, 0 <stderr>
  60:	ldr	x1, [x1]
  64:	ldr	x3, [x1]
  68:	mov	x2, #0x30                  	// #48
  6c:	mov	x1, #0x1                   	// #1
  70:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
  74:	add	x0, x0, #0x0
  78:	bl	0 <fwrite>
  7c:	ldr	w1, [sp, #44]
  80:	cbnz	w1, 134 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x134>
  84:	adrp	x0, 0 <stderr>
  88:	ldr	x0, [x0]
  8c:	ldr	x1, [x0]
  90:	mov	x0, x20
  94:	bl	0 <fputs>
  98:	adrp	x1, 0 <stderr>
  9c:	ldr	x1, [x1]
  a0:	ldr	x3, [x1]
  a4:	mov	x2, #0x2                   	// #2
  a8:	mov	x1, #0x1                   	// #1
  ac:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
  b0:	add	x0, x0, #0x0
  b4:	bl	0 <fwrite>
  b8:	ldr	w1, [sp, #44]
  bc:	cbnz	w1, c8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xc8>
  c0:	mov	x0, x20
  c4:	bl	0 <free>
  c8:	bl	0 <__cxa_rethrow>
  cc:	cmp	x1, #0x1
  d0:	b.ne	1a4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x1a4>  // b.any
  d4:	bl	0 <__cxa_begin_catch>
  d8:	ldr	x1, [x0]
  dc:	ldr	x1, [x1, #16]
  e0:	blr	x1
  e4:	mov	x19, x0
  e8:	adrp	x0, 0 <stderr>
  ec:	ldr	x0, [x0]
  f0:	ldr	x3, [x0]
  f4:	mov	x2, #0xb                   	// #11
  f8:	mov	x1, #0x1                   	// #1
  fc:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
 100:	add	x0, x0, #0x0
 104:	bl	0 <fwrite>
 108:	b	174 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x174>
 10c:	stp	x19, x20, [sp, #16]
 110:	adrp	x0, 0 <stderr>
 114:	ldr	x0, [x0]
 118:	ldr	x3, [x0]
 11c:	mov	x2, #0x1d                  	// #29
 120:	mov	x1, #0x1                   	// #1
 124:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
 128:	add	x0, x0, #0x0
 12c:	bl	0 <fwrite>
 130:	bl	0 <abort>
 134:	adrp	x0, 0 <stderr>
 138:	ldr	x0, [x0]
 13c:	ldr	x1, [x0]
 140:	mov	x0, x19
 144:	bl	0 <fputs>
 148:	b	98 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x98>
 14c:	adrp	x0, 0 <stderr>
 150:	ldr	x0, [x0]
 154:	ldr	x3, [x0]
 158:	mov	x2, #0x2d                  	// #45
 15c:	mov	x1, #0x1                   	// #1
 160:	adrp	x0, 0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>
 164:	add	x0, x0, #0x0
 168:	bl	0 <fwrite>
 16c:	stp	x19, x20, [sp, #16]
 170:	bl	0 <abort>
 174:	adrp	x0, 0 <stderr>
 178:	ldr	x0, [x0]
 17c:	ldr	x1, [x0]
 180:	mov	x0, x19
 184:	bl	0 <fputs>
 188:	adrp	x0, 0 <stderr>
 18c:	ldr	x0, [x0]
 190:	ldr	x1, [x0]
 194:	mov	w0, #0xa                   	// #10
 198:	bl	0 <fputc>
 19c:	bl	0 <__cxa_end_catch>
 1a0:	b	170 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x170>
 1a4:	bl	0 <__cxa_begin_catch>
 1a8:	bl	0 <__cxa_end_catch>
 1ac:	b	170 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x170>
 1b0:	mov	x19, x0
 1b4:	bl	0 <__cxa_end_catch>
 1b8:	mov	x0, x19
 1bc:	bl	0 <_Unwind_Resume>

cp-demangle.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <is_fnqual_component_type>:
       0:	sub	w0, w0, #0x1c
       4:	cmp	w0, #0x34
       8:	b.hi	28 <is_fnqual_component_type+0x28>  // b.pmore
       c:	mov	x1, #0x1                   	// #1
      10:	lsl	x0, x1, x0
      14:	mov	x1, #0x1f                  	// #31
      18:	movk	x1, #0x1a, lsl #48
      1c:	tst	x0, x1
      20:	cset	w0, ne  // ne = any
      24:	b	2c <is_fnqual_component_type+0x2c>
      28:	mov	w0, #0x0                   	// #0
      2c:	ret

0000000000000030 <d_make_empty>:
      30:	mov	x2, x0
      34:	ldr	w1, [x0, #40]
      38:	ldr	w0, [x0, #44]
      3c:	cmp	w1, w0
      40:	b.ge	68 <d_make_empty+0x38>  // b.tcont
      44:	sbfiz	x0, x1, #1, #32
      48:	add	x1, x0, w1, sxtw
      4c:	ldr	x0, [x2, #32]
      50:	add	x0, x0, x1, lsl #3
      54:	str	wzr, [x0, #4]
      58:	ldr	w1, [x2, #40]
      5c:	add	w1, w1, #0x1
      60:	str	w1, [x2, #40]
      64:	ret
      68:	mov	x0, #0x0                   	// #0
      6c:	b	64 <d_make_empty+0x34>

0000000000000070 <d_make_comp>:
      70:	stp	x29, x30, [sp, #-48]!
      74:	mov	x29, sp
      78:	stp	x19, x20, [sp, #16]
      7c:	mov	w19, w1
      80:	sub	w1, w1, #0x1
      84:	cmp	w1, #0x4f
      88:	b.hi	104 <d_make_comp+0x94>  // b.pmore
      8c:	str	x21, [sp, #32]
      90:	mov	x21, x2
      94:	mov	x20, x3
      98:	adrp	x2, 0 <is_fnqual_component_type>
      9c:	add	x2, x2, #0x0
      a0:	ldrb	w1, [x2, w1, uxtw]
      a4:	adr	x2, b0 <d_make_comp+0x40>
      a8:	add	x1, x2, w1, sxtb #2
      ac:	br	x1
      b0:	cmp	x21, #0x0
      b4:	ccmp	x3, #0x0, #0x4, ne  // ne = any
      b8:	b.ne	cc <d_make_comp+0x5c>  // b.any
      bc:	mov	x0, #0x0                   	// #0
      c0:	ldr	x21, [sp, #32]
      c4:	b	e4 <d_make_comp+0x74>
      c8:	cbz	x21, 10c <d_make_comp+0x9c>
      cc:	bl	30 <d_make_empty>
      d0:	cbz	x0, 118 <d_make_comp+0xa8>
      d4:	str	w19, [x0]
      d8:	str	x21, [x0, #8]
      dc:	str	x20, [x0, #16]
      e0:	ldr	x21, [sp, #32]
      e4:	ldp	x19, x20, [sp, #16]
      e8:	ldp	x29, x30, [sp], #48
      ec:	ret
      f0:	cbnz	x3, cc <d_make_comp+0x5c>
      f4:	mov	x0, x3
      f8:	ldr	x21, [sp, #32]
      fc:	b	e4 <d_make_comp+0x74>
     100:	ldr	x21, [sp, #32]
     104:	mov	x0, #0x0                   	// #0
     108:	b	e4 <d_make_comp+0x74>
     10c:	mov	x0, x21
     110:	ldr	x21, [sp, #32]
     114:	b	e4 <d_make_comp+0x74>
     118:	ldr	x21, [sp, #32]
     11c:	b	e4 <d_make_comp+0x74>

0000000000000120 <d_make_name>:
     120:	stp	x29, x30, [sp, #-32]!
     124:	mov	x29, sp
     128:	stp	x19, x20, [sp, #16]
     12c:	mov	x20, x1
     130:	mov	w19, w2
     134:	bl	30 <d_make_empty>
     138:	cmp	x20, #0x0
     13c:	ccmp	w19, #0x0, #0x4, ne  // ne = any
     140:	ccmp	x0, #0x0, #0x4, gt
     144:	b.ne	158 <d_make_name+0x38>  // b.any
     148:	mov	x0, #0x0                   	// #0
     14c:	ldp	x19, x20, [sp, #16]
     150:	ldp	x29, x30, [sp], #32
     154:	ret
     158:	str	wzr, [x0, #4]
     15c:	str	wzr, [x0]
     160:	str	x20, [x0, #8]
     164:	str	w19, [x0, #16]
     168:	b	14c <d_make_name+0x2c>

000000000000016c <d_make_builtin_type>:
     16c:	stp	x29, x30, [sp, #-32]!
     170:	mov	x29, sp
     174:	str	x19, [sp, #16]
     178:	mov	x19, x1
     17c:	cbz	x1, 1a0 <d_make_builtin_type+0x34>
     180:	bl	30 <d_make_empty>
     184:	cbz	x0, 194 <d_make_builtin_type+0x28>
     188:	mov	w1, #0x27                  	// #39
     18c:	str	w1, [x0]
     190:	str	x19, [x0, #8]
     194:	ldr	x19, [sp, #16]
     198:	ldp	x29, x30, [sp], #32
     19c:	ret
     1a0:	mov	x0, x1
     1a4:	b	194 <d_make_builtin_type+0x28>

00000000000001a8 <is_ctor_dtor_or_conversion>:
     1a8:	cbz	x0, 1fc <is_ctor_dtor_or_conversion+0x54>
     1ac:	mov	x2, x0
     1b0:	ldr	w1, [x0]
     1b4:	cmp	w1, #0x8
     1b8:	b.hi	1f0 <is_ctor_dtor_or_conversion+0x48>  // b.pmore
     1bc:	cmp	w1, #0x6
     1c0:	b.hi	204 <is_ctor_dtor_or_conversion+0x5c>  // b.pmore
     1c4:	sub	w1, w1, #0x1
     1c8:	mov	w0, #0x0                   	// #0
     1cc:	cmp	w1, #0x1
     1d0:	b.hi	1ec <is_ctor_dtor_or_conversion+0x44>  // b.pmore
     1d4:	stp	x29, x30, [sp, #-16]!
     1d8:	mov	x29, sp
     1dc:	ldr	x0, [x2, #16]
     1e0:	bl	1a8 <is_ctor_dtor_or_conversion>
     1e4:	ldp	x29, x30, [sp], #16
     1e8:	ret
     1ec:	ret
     1f0:	cmp	w1, #0x35
     1f4:	cset	w0, eq  // eq = none
     1f8:	ret
     1fc:	mov	w0, #0x0                   	// #0
     200:	ret
     204:	mov	w0, #0x1                   	// #1
     208:	ret

000000000000020c <has_return_type>:
     20c:	cbz	x0, 29c <has_return_type+0x90>
     210:	stp	x29, x30, [sp, #-16]!
     214:	mov	x29, sp
     218:	ldr	w1, [x0]
     21c:	cmp	w1, #0x4
     220:	b.eq	27c <has_return_type+0x70>  // b.none
     224:	b.ls	254 <has_return_type+0x48>  // b.plast
     228:	sub	w1, w1, #0x1c
     22c:	cmp	w1, #0x34
     230:	b.hi	274 <has_return_type+0x68>  // b.pmore
     234:	mov	x2, #0x1                   	// #1
     238:	lsl	x1, x2, x1
     23c:	mov	x2, #0x1f                  	// #31
     240:	movk	x2, #0x1a, lsl #48
     244:	tst	x1, x2
     248:	b.ne	290 <has_return_type+0x84>  // b.any
     24c:	mov	w0, #0x0                   	// #0
     250:	b	26c <has_return_type+0x60>
     254:	cmp	w1, #0x2
     258:	b.ne	268 <has_return_type+0x5c>  // b.any
     25c:	ldr	x0, [x0, #16]
     260:	bl	20c <has_return_type>
     264:	b	26c <has_return_type+0x60>
     268:	mov	w0, #0x0                   	// #0
     26c:	ldp	x29, x30, [sp], #16
     270:	ret
     274:	mov	w0, #0x0                   	// #0
     278:	b	26c <has_return_type+0x60>
     27c:	ldr	x0, [x0, #8]
     280:	bl	1a8 <is_ctor_dtor_or_conversion>
     284:	cmp	w0, #0x0
     288:	cset	w0, eq  // eq = none
     28c:	b	26c <has_return_type+0x60>
     290:	ldr	x0, [x0, #8]
     294:	bl	20c <has_return_type>
     298:	b	26c <has_return_type+0x60>
     29c:	mov	w0, #0x0                   	// #0
     2a0:	ret

00000000000002a4 <d_number>:
     2a4:	mov	x4, x0
     2a8:	ldr	x1, [x0, #24]
     2ac:	ldrb	w0, [x1]
     2b0:	cmp	w0, #0x6e
     2b4:	b.eq	334 <d_number+0x90>  // b.none
     2b8:	sub	w1, w0, #0x30
     2bc:	and	w1, w1, #0xff
     2c0:	cmp	w1, #0x9
     2c4:	b.hi	36c <d_number+0xc8>  // b.pmore
     2c8:	mov	w7, #0x0                   	// #0
     2cc:	mov	w3, w0
     2d0:	mov	w0, #0x0                   	// #0
     2d4:	mov	w6, #0x7fffffff            	// #2147483647
     2d8:	mov	w5, #0x6667                	// #26215
     2dc:	movk	w5, #0x6666, lsl #16
     2e0:	add	w0, w0, w0, lsl #2
     2e4:	add	w0, w3, w0, lsl #1
     2e8:	sub	w0, w0, #0x30
     2ec:	ldr	x1, [x4, #24]
     2f0:	add	x2, x1, #0x1
     2f4:	str	x2, [x4, #24]
     2f8:	ldrb	w1, [x1, #1]
     2fc:	sub	w2, w1, #0x30
     300:	and	w2, w2, #0xff
     304:	cmp	w2, #0x9
     308:	b.hi	358 <d_number+0xb4>  // b.pmore
     30c:	mov	w3, w1
     310:	sub	w1, w1, #0x30
     314:	sub	w1, w6, w1
     318:	smull	x2, w1, w5
     31c:	asr	x2, x2, #34
     320:	sub	w1, w2, w1, asr #31
     324:	cmp	w1, w0
     328:	b.ge	2e0 <d_number+0x3c>  // b.tcont
     32c:	mov	w0, #0xffffffff            	// #-1
     330:	ret
     334:	add	x0, x1, #0x1
     338:	str	x0, [x4, #24]
     33c:	ldrb	w0, [x1, #1]
     340:	sub	w1, w0, #0x30
     344:	and	w1, w1, #0xff
     348:	cmp	w1, #0x9
     34c:	b.hi	364 <d_number+0xc0>  // b.pmore
     350:	mov	w7, #0x1                   	// #1
     354:	b	2cc <d_number+0x28>
     358:	cbz	w7, 330 <d_number+0x8c>
     35c:	neg	w0, w0
     360:	b	330 <d_number+0x8c>
     364:	mov	w0, #0x0                   	// #0
     368:	b	35c <d_number+0xb8>
     36c:	mov	w0, #0x0                   	// #0
     370:	b	330 <d_number+0x8c>

0000000000000374 <d_number_component>:
     374:	stp	x29, x30, [sp, #-32]!
     378:	mov	x29, sp
     37c:	stp	x19, x20, [sp, #16]
     380:	mov	x20, x0
     384:	bl	30 <d_make_empty>
     388:	mov	x19, x0
     38c:	cbz	x0, 3a8 <d_number_component+0x34>
     390:	mov	w0, #0x42                  	// #66
     394:	str	w0, [x19]
     398:	mov	x0, x20
     39c:	bl	2a4 <d_number>
     3a0:	sxtw	x0, w0
     3a4:	str	x0, [x19, #8]
     3a8:	mov	x0, x19
     3ac:	ldp	x19, x20, [sp, #16]
     3b0:	ldp	x29, x30, [sp], #32
     3b4:	ret

00000000000003b8 <d_call_offset>:
     3b8:	stp	x29, x30, [sp, #-32]!
     3bc:	mov	x29, sp
     3c0:	str	x19, [sp, #16]
     3c4:	mov	x19, x0
     3c8:	cbnz	w1, 3e8 <d_call_offset+0x30>
     3cc:	ldr	x2, [x0, #24]
     3d0:	ldrb	w3, [x2]
     3d4:	mov	w0, w1
     3d8:	cbz	w3, 3fc <d_call_offset+0x44>
     3dc:	add	x0, x2, #0x1
     3e0:	str	x0, [x19, #24]
     3e4:	ldrb	w1, [x2]
     3e8:	cmp	w1, #0x68
     3ec:	b.eq	408 <d_call_offset+0x50>  // b.none
     3f0:	mov	w0, #0x0                   	// #0
     3f4:	cmp	w1, #0x76
     3f8:	b.eq	434 <d_call_offset+0x7c>  // b.none
     3fc:	ldr	x19, [sp, #16]
     400:	ldp	x29, x30, [sp], #32
     404:	ret
     408:	mov	x0, x19
     40c:	bl	2a4 <d_number>
     410:	ldr	x1, [x19, #24]
     414:	ldrb	w2, [x1]
     418:	mov	w0, #0x0                   	// #0
     41c:	cmp	w2, #0x5f
     420:	b.ne	3fc <d_call_offset+0x44>  // b.any
     424:	add	x1, x1, #0x1
     428:	str	x1, [x19, #24]
     42c:	mov	w0, #0x1                   	// #1
     430:	b	3fc <d_call_offset+0x44>
     434:	mov	x0, x19
     438:	bl	2a4 <d_number>
     43c:	ldr	x1, [x19, #24]
     440:	ldrb	w2, [x1]
     444:	mov	w0, #0x0                   	// #0
     448:	cmp	w2, #0x5f
     44c:	b.ne	3fc <d_call_offset+0x44>  // b.any
     450:	add	x1, x1, #0x1
     454:	str	x1, [x19, #24]
     458:	mov	x0, x19
     45c:	bl	2a4 <d_number>
     460:	b	410 <d_call_offset+0x58>

0000000000000464 <next_is_type_qual>:
     464:	ldr	x2, [x0, #24]
     468:	ldrb	w1, [x2]
     46c:	cmp	w1, #0x72
     470:	mov	w0, #0x56                  	// #86
     474:	ccmp	w1, w0, #0x4, ne  // ne = any
     478:	mov	w0, #0x4b                  	// #75
     47c:	ccmp	w1, w0, #0x4, ne  // ne = any
     480:	mov	w0, #0x1                   	// #1
     484:	b.eq	494 <next_is_type_qual+0x30>  // b.none
     488:	mov	w0, #0x0                   	// #0
     48c:	cmp	w1, #0x44
     490:	b.eq	498 <next_is_type_qual+0x34>  // b.none
     494:	ret
     498:	ldrb	w0, [x2, #1]
     49c:	and	w1, w0, #0xffffffdf
     4a0:	and	w1, w1, #0xff
     4a4:	sub	w0, w0, #0x77
     4a8:	and	w0, w0, #0xff
     4ac:	cmp	w1, #0x4f
     4b0:	ccmp	w0, #0x1, #0x0, ne  // ne = any
     4b4:	cset	w0, ls  // ls = plast
     4b8:	b	494 <next_is_type_qual+0x30>

00000000000004bc <d_ref_qualifier>:
     4bc:	mov	x2, x1
     4c0:	ldr	x3, [x0, #24]
     4c4:	ldrb	w1, [x3]
     4c8:	cmp	w1, #0x52
     4cc:	mov	w4, #0x4f                  	// #79
     4d0:	ccmp	w1, w4, #0x4, ne  // ne = any
     4d4:	b.ne	520 <d_ref_qualifier+0x64>  // b.any
     4d8:	stp	x29, x30, [sp, #-16]!
     4dc:	mov	x29, sp
     4e0:	cmp	w1, #0x52
     4e4:	b.eq	510 <d_ref_qualifier+0x54>  // b.none
     4e8:	ldr	w4, [x0, #72]
     4ec:	add	w4, w4, #0x3
     4f0:	mov	w1, #0x20                  	// #32
     4f4:	str	w4, [x0, #72]
     4f8:	add	x3, x3, #0x1
     4fc:	str	x3, [x0, #24]
     500:	mov	x3, #0x0                   	// #0
     504:	bl	70 <d_make_comp>
     508:	ldp	x29, x30, [sp], #16
     50c:	ret
     510:	ldr	w4, [x0, #72]
     514:	add	w4, w4, #0x2
     518:	mov	w1, #0x1f                  	// #31
     51c:	b	4f4 <d_ref_qualifier+0x38>
     520:	mov	x0, x2
     524:	ret

0000000000000528 <d_compact_number>:
     528:	stp	x29, x30, [sp, #-32]!
     52c:	mov	x29, sp
     530:	str	x19, [sp, #16]
     534:	mov	x19, x0
     538:	ldr	x1, [x0, #24]
     53c:	ldrb	w0, [x1]
     540:	cmp	w0, #0x5f
     544:	b.eq	584 <d_compact_number+0x5c>  // b.none
     548:	cmp	w0, #0x6e
     54c:	b.eq	58c <d_compact_number+0x64>  // b.none
     550:	mov	x0, x19
     554:	bl	2a4 <d_number>
     558:	adds	w0, w0, #0x1
     55c:	b.mi	594 <d_compact_number+0x6c>  // b.first
     560:	ldr	x1, [x19, #24]
     564:	ldrb	w2, [x1]
     568:	cmp	w2, #0x5f
     56c:	b.ne	59c <d_compact_number+0x74>  // b.any
     570:	add	x1, x1, #0x1
     574:	str	x1, [x19, #24]
     578:	ldr	x19, [sp, #16]
     57c:	ldp	x29, x30, [sp], #32
     580:	ret
     584:	mov	w0, #0x0                   	// #0
     588:	b	570 <d_compact_number+0x48>
     58c:	mov	w0, #0xffffffff            	// #-1
     590:	b	578 <d_compact_number+0x50>
     594:	mov	w0, #0xffffffff            	// #-1
     598:	b	578 <d_compact_number+0x50>
     59c:	mov	w0, #0xffffffff            	// #-1
     5a0:	b	578 <d_compact_number+0x50>

00000000000005a4 <d_template_param>:
     5a4:	stp	x29, x30, [sp, #-32]!
     5a8:	mov	x29, sp
     5ac:	stp	x19, x20, [sp, #16]
     5b0:	mov	x19, x0
     5b4:	ldr	x0, [x0, #24]
     5b8:	ldrb	w1, [x0]
     5bc:	cmp	w1, #0x54
     5c0:	b.ne	600 <d_template_param+0x5c>  // b.any
     5c4:	add	x0, x0, #0x1
     5c8:	str	x0, [x19, #24]
     5cc:	mov	x0, x19
     5d0:	bl	528 <d_compact_number>
     5d4:	mov	w20, w0
     5d8:	mov	x0, #0x0                   	// #0
     5dc:	tbnz	w20, #31, 604 <d_template_param+0x60>
     5e0:	mov	x0, x19
     5e4:	bl	30 <d_make_empty>
     5e8:	cbz	x0, 604 <d_template_param+0x60>
     5ec:	mov	w1, #0x5                   	// #5
     5f0:	str	w1, [x0]
     5f4:	sxtw	x20, w20
     5f8:	str	x20, [x0, #8]
     5fc:	b	604 <d_template_param+0x60>
     600:	mov	x0, #0x0                   	// #0
     604:	ldp	x19, x20, [sp, #16]
     608:	ldp	x29, x30, [sp], #32
     60c:	ret

0000000000000610 <op_is_new_cast>:
     610:	ldr	x0, [x0, #8]
     614:	ldr	x0, [x0]
     618:	ldrb	w1, [x0, #1]
     61c:	cmp	w1, #0x63
     620:	b.eq	62c <op_is_new_cast+0x1c>  // b.none
     624:	mov	w0, #0x0                   	// #0
     628:	ret
     62c:	ldrb	w0, [x0]
     630:	sub	w1, w0, #0x63
     634:	and	w1, w1, #0xff
     638:	sub	w0, w0, #0x72
     63c:	and	w0, w0, #0xff
     640:	cmp	w1, #0x1
     644:	ccmp	w0, #0x1, #0x0, hi  // hi = pmore
     648:	cset	w0, ls  // ls = plast
     64c:	b	628 <op_is_new_cast+0x18>

0000000000000650 <d_discriminator>:
     650:	stp	x29, x30, [sp, #-32]!
     654:	mov	x29, sp
     658:	stp	x19, x20, [sp, #16]
     65c:	mov	x19, x0
     660:	ldr	x0, [x0, #24]
     664:	ldrb	w1, [x0]
     668:	cmp	w1, #0x5f
     66c:	b.ne	6e0 <d_discriminator+0x90>  // b.any
     670:	add	x1, x0, #0x1
     674:	str	x1, [x19, #24]
     678:	ldrb	w1, [x0, #1]
     67c:	mov	w20, #0x1                   	// #1
     680:	cmp	w1, #0x5f
     684:	b.eq	6d0 <d_discriminator+0x80>  // b.none
     688:	mov	x0, x19
     68c:	bl	2a4 <d_number>
     690:	mov	w1, w0
     694:	mov	w0, #0x0                   	// #0
     698:	tbnz	w1, #31, 6e4 <d_discriminator+0x94>
     69c:	cmp	w20, #0x1
     6a0:	mov	w0, #0x1                   	// #1
     6a4:	ccmp	w1, #0x9, #0x4, gt
     6a8:	b.le	6e4 <d_discriminator+0x94>
     6ac:	ldr	x1, [x19, #24]
     6b0:	ldrb	w2, [x1]
     6b4:	mov	w0, #0x0                   	// #0
     6b8:	cmp	w2, #0x5f
     6bc:	b.ne	6e4 <d_discriminator+0x94>  // b.any
     6c0:	add	x1, x1, #0x1
     6c4:	str	x1, [x19, #24]
     6c8:	mov	w0, #0x1                   	// #1
     6cc:	b	6e4 <d_discriminator+0x94>
     6d0:	add	x0, x0, #0x2
     6d4:	str	x0, [x19, #24]
     6d8:	mov	w20, #0x2                   	// #2
     6dc:	b	688 <d_discriminator+0x38>
     6e0:	mov	w0, #0x1                   	// #1
     6e4:	ldp	x19, x20, [sp, #16]
     6e8:	ldp	x29, x30, [sp], #32
     6ec:	ret

00000000000006f0 <d_add_substitution>:
     6f0:	mov	x2, x0
     6f4:	cbz	x1, 728 <d_add_substitution+0x38>
     6f8:	ldr	w3, [x0, #56]
     6fc:	ldr	w4, [x0, #60]
     700:	mov	w0, #0x0                   	// #0
     704:	cmp	w3, w4
     708:	b.ge	724 <d_add_substitution+0x34>  // b.tcont
     70c:	ldr	x0, [x2, #48]
     710:	str	x1, [x0, w3, sxtw #3]
     714:	ldr	w0, [x2, #56]
     718:	add	w0, w0, #0x1
     71c:	str	w0, [x2, #56]
     720:	mov	w0, #0x1                   	// #1
     724:	ret
     728:	mov	w0, #0x0                   	// #0
     72c:	b	724 <d_add_substitution+0x34>

0000000000000730 <d_count_templates_scopes>:
     730:	cbz	x1, 844 <d_count_templates_scopes+0x114>
     734:	stp	x29, x30, [sp, #-32]!
     738:	mov	x29, sp
     73c:	stp	x19, x20, [sp, #16]
     740:	mov	x20, x0
     744:	mov	x19, x1
     748:	ldr	w1, [x1]
     74c:	sub	w1, w1, #0x1
     750:	cmp	w1, #0x4f
     754:	b.hi	788 <d_count_templates_scopes+0x58>  // b.pmore
     758:	adrp	x0, 0 <is_fnqual_component_type>
     75c:	add	x0, x0, #0x0
     760:	ldrb	w0, [x0, w1, uxtw]
     764:	adr	x1, 770 <d_count_templates_scopes+0x40>
     768:	add	x0, x1, w0, sxtb #2
     76c:	br	x0
     770:	ldr	w0, [x20, #364]
     774:	add	w0, w0, #0x1
     778:	str	w0, [x20, #364]
     77c:	ldr	w0, [x20, #308]
     780:	cmp	w0, #0x800
     784:	b.le	7b4 <d_count_templates_scopes+0x84>
     788:	ldp	x19, x20, [sp, #16]
     78c:	ldp	x29, x30, [sp], #32
     790:	ret
     794:	ldr	x0, [x19, #8]
     798:	ldr	w0, [x0]
     79c:	cmp	w0, #0x5
     7a0:	b.ne	77c <d_count_templates_scopes+0x4c>  // b.any
     7a4:	ldr	w0, [x20, #348]
     7a8:	add	w0, w0, #0x1
     7ac:	str	w0, [x20, #348]
     7b0:	b	77c <d_count_templates_scopes+0x4c>
     7b4:	add	w0, w0, #0x1
     7b8:	str	w0, [x20, #308]
     7bc:	ldr	x1, [x19, #8]
     7c0:	mov	x0, x20
     7c4:	bl	730 <d_count_templates_scopes>
     7c8:	ldr	x1, [x19, #16]
     7cc:	mov	x0, x20
     7d0:	bl	730 <d_count_templates_scopes>
     7d4:	ldr	w0, [x20, #308]
     7d8:	sub	w0, w0, #0x1
     7dc:	str	w0, [x20, #308]
     7e0:	b	788 <d_count_templates_scopes+0x58>
     7e4:	ldr	x1, [x19, #16]
     7e8:	mov	x0, x20
     7ec:	bl	730 <d_count_templates_scopes>
     7f0:	b	788 <d_count_templates_scopes+0x58>
     7f4:	ldr	x1, [x19, #16]
     7f8:	mov	x0, x20
     7fc:	bl	730 <d_count_templates_scopes>
     800:	b	788 <d_count_templates_scopes+0x58>
     804:	ldr	x1, [x19, #16]
     808:	mov	x0, x20
     80c:	bl	730 <d_count_templates_scopes>
     810:	b	788 <d_count_templates_scopes+0x58>
     814:	ldr	x1, [x19, #8]
     818:	mov	x0, x20
     81c:	bl	730 <d_count_templates_scopes>
     820:	b	788 <d_count_templates_scopes+0x58>
     824:	ldr	x1, [x19, #8]
     828:	mov	x0, x20
     82c:	bl	730 <d_count_templates_scopes>
     830:	b	788 <d_count_templates_scopes+0x58>
     834:	ldr	x1, [x19, #8]
     838:	mov	x0, x20
     83c:	bl	730 <d_count_templates_scopes>
     840:	b	788 <d_count_templates_scopes+0x58>
     844:	ret

0000000000000848 <d_append_buffer>:
     848:	cbz	x2, 8e4 <d_append_buffer+0x9c>
     84c:	stp	x29, x30, [sp, #-64]!
     850:	mov	x29, sp
     854:	stp	x19, x20, [sp, #16]
     858:	stp	x21, x22, [sp, #32]
     85c:	str	x23, [sp, #48]
     860:	mov	x19, x0
     864:	mov	x20, x1
     868:	add	x22, x1, x2
     86c:	mov	x23, #0xff                  	// #255
     870:	b	894 <d_append_buffer+0x4c>
     874:	ldr	x0, [x19, #256]
     878:	add	x1, x0, #0x1
     87c:	str	x1, [x19, #256]
     880:	strb	w21, [x19, x0]
     884:	strb	w21, [x19, #264]
     888:	add	x20, x20, #0x1
     88c:	cmp	x20, x22
     890:	b.eq	8d0 <d_append_buffer+0x88>  // b.none
     894:	ldrb	w21, [x20]
     898:	ldr	x0, [x19, #256]
     89c:	cmp	x0, #0xff
     8a0:	b.ne	874 <d_append_buffer+0x2c>  // b.any
     8a4:	strb	wzr, [x19, #255]
     8a8:	ldr	x3, [x19, #272]
     8ac:	ldr	x2, [x19, #280]
     8b0:	mov	x1, x23
     8b4:	mov	x0, x19
     8b8:	blr	x3
     8bc:	str	xzr, [x19, #256]
     8c0:	ldr	x0, [x19, #320]
     8c4:	add	x0, x0, #0x1
     8c8:	str	x0, [x19, #320]
     8cc:	b	874 <d_append_buffer+0x2c>
     8d0:	ldp	x19, x20, [sp, #16]
     8d4:	ldp	x21, x22, [sp, #32]
     8d8:	ldr	x23, [sp, #48]
     8dc:	ldp	x29, x30, [sp], #64
     8e0:	ret
     8e4:	ret

00000000000008e8 <d_index_template_argument>:
     8e8:	tbnz	w1, #31, 914 <d_index_template_argument+0x2c>
     8ec:	cbz	x0, 914 <d_index_template_argument+0x2c>
     8f0:	ldr	w2, [x0]
     8f4:	cmp	w2, #0x2f
     8f8:	b.ne	918 <d_index_template_argument+0x30>  // b.any
     8fc:	cbz	w1, 910 <d_index_template_argument+0x28>
     900:	sub	w1, w1, #0x1
     904:	ldr	x0, [x0, #16]
     908:	cbnz	x0, 8f0 <d_index_template_argument+0x8>
     90c:	b	914 <d_index_template_argument+0x2c>
     910:	ldr	x0, [x0, #8]
     914:	ret
     918:	mov	x0, #0x0                   	// #0
     91c:	b	914 <d_index_template_argument+0x2c>

0000000000000920 <d_lookup_template_argument>:
     920:	mov	x2, x0
     924:	ldr	x0, [x0, #288]
     928:	cbz	x0, 94c <d_lookup_template_argument+0x2c>
     92c:	stp	x29, x30, [sp, #-16]!
     930:	mov	x29, sp
     934:	ldr	x0, [x0, #8]
     938:	ldr	w1, [x1, #8]
     93c:	ldr	x0, [x0, #16]
     940:	bl	8e8 <d_index_template_argument>
     944:	ldp	x29, x30, [sp], #16
     948:	ret
     94c:	mov	w1, #0x1                   	// #1
     950:	str	w1, [x2, #304]
     954:	ret

0000000000000958 <d_find_pack>:
     958:	stp	x29, x30, [sp, #-32]!
     95c:	mov	x29, sp
     960:	stp	x19, x20, [sp, #16]
     964:	mov	x19, x1
     968:	cbz	x1, a30 <d_find_pack+0xd8>
     96c:	mov	x20, x0
     970:	ldr	w2, [x1]
     974:	cmp	w2, #0x8
     978:	b.eq	a04 <d_find_pack+0xac>  // b.none
     97c:	b.hi	9bc <d_find_pack+0x64>  // b.pmore
     980:	cmp	w2, #0x6
     984:	b.eq	a38 <d_find_pack+0xe0>  // b.none
     988:	b.ls	998 <d_find_pack+0x40>  // b.plast
     98c:	ldr	x1, [x1, #16]
     990:	bl	958 <d_find_pack>
     994:	b	9f8 <d_find_pack+0xa0>
     998:	cbz	w2, a40 <d_find_pack+0xe8>
     99c:	cmp	w2, #0x5
     9a0:	b.ne	a10 <d_find_pack+0xb8>  // b.any
     9a4:	bl	920 <d_lookup_template_argument>
     9a8:	cbz	x0, 9f8 <d_find_pack+0xa0>
     9ac:	ldr	w1, [x0]
     9b0:	cmp	w1, #0x2f
     9b4:	csel	x0, x0, xzr, eq  // eq = none
     9b8:	b	9f8 <d_find_pack+0xa0>
     9bc:	sub	w2, w2, #0x18
     9c0:	cmp	w2, #0x34
     9c4:	b.hi	a10 <d_find_pack+0xb8>  // b.pmore
     9c8:	mov	x1, #0x1                   	// #1
     9cc:	lsl	x2, x1, x2
     9d0:	mov	x0, #0x8001                	// #32769
     9d4:	movk	x0, #0x410, lsl #16
     9d8:	movk	x0, #0xc600, lsl #32
     9dc:	movk	x0, #0x19, lsl #48
     9e0:	tst	x2, x0
     9e4:	b.ne	a48 <d_find_pack+0xf0>  // b.any
     9e8:	tbz	w2, #27, a10 <d_find_pack+0xb8>
     9ec:	ldr	x1, [x19, #16]
     9f0:	mov	x0, x20
     9f4:	bl	958 <d_find_pack>
     9f8:	ldp	x19, x20, [sp, #16]
     9fc:	ldp	x29, x30, [sp], #32
     a00:	ret
     a04:	ldr	x1, [x1, #16]
     a08:	bl	958 <d_find_pack>
     a0c:	b	9f8 <d_find_pack+0xa0>
     a10:	ldr	x1, [x19, #8]
     a14:	mov	x0, x20
     a18:	bl	958 <d_find_pack>
     a1c:	cbnz	x0, 9f8 <d_find_pack+0xa0>
     a20:	ldr	x1, [x19, #16]
     a24:	mov	x0, x20
     a28:	bl	958 <d_find_pack>
     a2c:	b	9f8 <d_find_pack+0xa0>
     a30:	mov	x0, x1
     a34:	b	9f8 <d_find_pack+0xa0>
     a38:	mov	x0, #0x0                   	// #0
     a3c:	b	9f8 <d_find_pack+0xa0>
     a40:	mov	x0, #0x0                   	// #0
     a44:	b	9f8 <d_find_pack+0xa0>
     a48:	mov	x0, #0x0                   	// #0
     a4c:	b	9f8 <d_find_pack+0xa0>

0000000000000a50 <d_pack_length>:
     a50:	mov	x1, x0
     a54:	mov	w0, #0x0                   	// #0
     a58:	cbz	x1, a7c <d_pack_length+0x2c>
     a5c:	ldr	w2, [x1]
     a60:	cmp	w2, #0x2f
     a64:	b.ne	a7c <d_pack_length+0x2c>  // b.any
     a68:	ldr	x2, [x1, #8]
     a6c:	cbz	x2, a7c <d_pack_length+0x2c>
     a70:	add	w0, w0, #0x1
     a74:	ldr	x1, [x1, #16]
     a78:	cbnz	x1, a5c <d_pack_length+0xc>
     a7c:	ret

0000000000000a80 <d_source_name>:
     a80:	stp	x29, x30, [sp, #-48]!
     a84:	mov	x29, sp
     a88:	stp	x19, x20, [sp, #16]
     a8c:	mov	x19, x0
     a90:	bl	2a4 <d_number>
     a94:	cmp	w0, #0x0
     a98:	b.le	b7c <d_source_name+0xfc>
     a9c:	str	x21, [sp, #32]
     aa0:	mov	w20, w0
     aa4:	ldr	x21, [x19, #24]
     aa8:	ldr	x0, [x19, #8]
     aac:	sub	x0, x0, x21
     ab0:	cmp	x0, w20, sxtw
     ab4:	b.lt	b74 <d_source_name+0xf4>  // b.tstop
     ab8:	add	x0, x21, w20, sxtw
     abc:	str	x0, [x19, #24]
     ac0:	ldr	w1, [x19, #16]
     ac4:	tbz	w1, #2, ad4 <d_source_name+0x54>
     ac8:	ldrb	w1, [x21, w20, sxtw]
     acc:	cmp	w1, #0x24
     ad0:	b.eq	b40 <d_source_name+0xc0>  // b.none
     ad4:	cmp	w20, #0x9
     ad8:	b.le	b1c <d_source_name+0x9c>
     adc:	mov	x2, #0x8                   	// #8
     ae0:	adrp	x1, 0 <is_fnqual_component_type>
     ae4:	add	x1, x1, #0x0
     ae8:	mov	x0, x21
     aec:	bl	0 <memcmp>
     af0:	cbnz	w0, b1c <d_source_name+0x9c>
     af4:	ldrb	w0, [x21, #8]
     af8:	cmp	w0, #0x2e
     afc:	mov	w1, #0x5f                  	// #95
     b00:	ccmp	w0, w1, #0x4, ne  // ne = any
     b04:	mov	w1, #0x24                  	// #36
     b08:	ccmp	w0, w1, #0x4, ne  // ne = any
     b0c:	b.ne	b1c <d_source_name+0x9c>  // b.any
     b10:	ldrb	w0, [x21, #9]
     b14:	cmp	w0, #0x4e
     b18:	b.eq	b4c <d_source_name+0xcc>  // b.none
     b1c:	mov	w2, w20
     b20:	mov	x1, x21
     b24:	mov	x0, x19
     b28:	bl	120 <d_make_name>
     b2c:	str	x0, [x19, #64]
     b30:	ldr	x21, [sp, #32]
     b34:	ldp	x19, x20, [sp, #16]
     b38:	ldp	x29, x30, [sp], #48
     b3c:	ret
     b40:	add	x0, x0, #0x1
     b44:	str	x0, [x19, #24]
     b48:	b	ad4 <d_source_name+0x54>
     b4c:	ldr	w0, [x19, #72]
     b50:	add	w0, w0, #0x16
     b54:	sub	w20, w0, w20
     b58:	str	w20, [x19, #72]
     b5c:	mov	w2, #0x15                  	// #21
     b60:	adrp	x1, 0 <is_fnqual_component_type>
     b64:	add	x1, x1, #0x0
     b68:	mov	x0, x19
     b6c:	bl	120 <d_make_name>
     b70:	b	b2c <d_source_name+0xac>
     b74:	mov	x0, #0x0                   	// #0
     b78:	b	b2c <d_source_name+0xac>
     b7c:	mov	x0, #0x0                   	// #0
     b80:	b	b34 <d_source_name+0xb4>

0000000000000b84 <d_abi_tags>:
     b84:	stp	x29, x30, [sp, #-48]!
     b88:	mov	x29, sp
     b8c:	stp	x19, x20, [sp, #16]
     b90:	stp	x21, x22, [sp, #32]
     b94:	mov	x19, x0
     b98:	mov	x20, x1
     b9c:	ldr	x22, [x0, #64]
     ba0:	ldr	x2, [x0, #24]
     ba4:	ldrb	w0, [x2]
     ba8:	cmp	w0, #0x42
     bac:	b.ne	bec <d_abi_tags+0x68>  // b.any
     bb0:	mov	w21, #0x4c                  	// #76
     bb4:	add	x2, x2, #0x1
     bb8:	str	x2, [x19, #24]
     bbc:	mov	x0, x19
     bc0:	bl	a80 <d_source_name>
     bc4:	mov	x3, x0
     bc8:	mov	x2, x20
     bcc:	mov	w1, w21
     bd0:	mov	x0, x19
     bd4:	bl	70 <d_make_comp>
     bd8:	mov	x20, x0
     bdc:	ldr	x2, [x19, #24]
     be0:	ldrb	w0, [x2]
     be4:	cmp	w0, #0x42
     be8:	b.eq	bb4 <d_abi_tags+0x30>  // b.none
     bec:	str	x22, [x19, #64]
     bf0:	mov	x0, x20
     bf4:	ldp	x19, x20, [sp, #16]
     bf8:	ldp	x21, x22, [sp, #32]
     bfc:	ldp	x29, x30, [sp], #48
     c00:	ret

0000000000000c04 <d_growable_string_callback_adapter>:
     c04:	stp	x29, x30, [sp, #-48]!
     c08:	mov	x29, sp
     c0c:	stp	x19, x20, [sp, #16]
     c10:	stp	x21, x22, [sp, #32]
     c14:	mov	x22, x0
     c18:	mov	x21, x1
     c1c:	mov	x19, x2
     c20:	add	x2, x1, #0x1
     c24:	ldr	x3, [x19, #8]
     c28:	add	x2, x2, x3
     c2c:	ldr	x20, [x19, #16]
     c30:	cmp	x2, x20
     c34:	b.hi	c84 <d_growable_string_callback_adapter+0x80>  // b.pmore
     c38:	ldr	w0, [x19, #24]
     c3c:	cbnz	w0, c74 <d_growable_string_callback_adapter+0x70>
     c40:	ldr	x3, [x19]
     c44:	ldr	x0, [x19, #8]
     c48:	mov	x2, x21
     c4c:	mov	x1, x22
     c50:	add	x0, x3, x0
     c54:	bl	0 <memcpy>
     c58:	ldr	x0, [x19]
     c5c:	ldr	x1, [x19, #8]
     c60:	add	x0, x0, x21
     c64:	strb	wzr, [x0, x1]
     c68:	ldr	x1, [x19, #8]
     c6c:	add	x21, x1, x21
     c70:	str	x21, [x19, #8]
     c74:	ldp	x19, x20, [sp, #16]
     c78:	ldp	x21, x22, [sp, #32]
     c7c:	ldp	x29, x30, [sp], #48
     c80:	ret
     c84:	ldr	w0, [x19, #24]
     c88:	cbnz	w0, c74 <d_growable_string_callback_adapter+0x70>
     c8c:	cbnz	x20, c9c <d_growable_string_callback_adapter+0x98>
     c90:	mov	x20, #0x2                   	// #2
     c94:	cmp	x2, x20
     c98:	b.ls	ca8 <d_growable_string_callback_adapter+0xa4>  // b.plast
     c9c:	lsl	x20, x20, #1
     ca0:	cmp	x2, x20
     ca4:	b.hi	c9c <d_growable_string_callback_adapter+0x98>  // b.pmore
     ca8:	mov	x1, x20
     cac:	ldr	x0, [x19]
     cb0:	bl	0 <realloc>
     cb4:	cbz	x0, cc4 <d_growable_string_callback_adapter+0xc0>
     cb8:	str	x0, [x19]
     cbc:	str	x20, [x19, #16]
     cc0:	b	c38 <d_growable_string_callback_adapter+0x34>
     cc4:	ldr	x0, [x19]
     cc8:	bl	0 <free>
     ccc:	str	xzr, [x19]
     cd0:	str	xzr, [x19, #8]
     cd4:	str	xzr, [x19, #16]
     cd8:	mov	w0, #0x1                   	// #1
     cdc:	str	w0, [x19, #24]
     ce0:	b	c74 <d_growable_string_callback_adapter+0x70>

0000000000000ce4 <d_print_comp_inner>:
     ce4:	stp	x29, x30, [sp, #-256]!
     ce8:	mov	x29, sp
     cec:	stp	x19, x20, [sp, #16]
     cf0:	mov	x19, x0
     cf4:	cbz	x2, d38 <d_print_comp_inner+0x54>
     cf8:	stp	x21, x22, [sp, #32]
     cfc:	mov	w20, w1
     d00:	mov	x22, x2
     d04:	ldr	w21, [x0, #304]
     d08:	cbnz	w21, 4e9c <d_print_comp_inner+0x41b8>
     d0c:	ldr	w0, [x2]
     d10:	cmp	w0, #0x50
     d14:	b.hi	4db4 <d_print_comp_inner+0x40d0>  // b.pmore
     d18:	stp	x23, x24, [sp, #48]
     d1c:	stp	x25, x26, [sp, #64]
     d20:	adrp	x1, 0 <is_fnqual_component_type>
     d24:	add	x1, x1, #0x0
     d28:	ldrh	w1, [x1, w0, uxtw #1]
     d2c:	adr	x2, d38 <d_print_comp_inner+0x54>
     d30:	add	x1, x2, w1, sxth #2
     d34:	br	x1
     d38:	mov	w0, #0x1                   	// #1
     d3c:	str	w0, [x19, #304]
     d40:	b	4ea0 <d_print_comp_inner+0x41bc>
     d44:	tbnz	w20, #2, dd0 <d_print_comp_inner+0xec>
     d48:	ldr	x1, [x22, #8]
     d4c:	ldrsw	x0, [x22, #16]
     d50:	cbz	x0, 4eac <d_print_comp_inner+0x41c8>
     d54:	mov	x20, x1
     d58:	add	x22, x1, x0
     d5c:	mov	x23, #0xff                  	// #255
     d60:	b	d84 <d_print_comp_inner+0xa0>
     d64:	ldr	x0, [x19, #256]
     d68:	add	x1, x0, #0x1
     d6c:	str	x1, [x19, #256]
     d70:	strb	w21, [x19, x0]
     d74:	strb	w21, [x19, #264]
     d78:	add	x20, x20, #0x1
     d7c:	cmp	x22, x20
     d80:	b.eq	dc0 <d_print_comp_inner+0xdc>  // b.none
     d84:	ldrb	w21, [x20]
     d88:	ldr	x0, [x19, #256]
     d8c:	cmp	x0, #0xff
     d90:	b.ne	d64 <d_print_comp_inner+0x80>  // b.any
     d94:	strb	wzr, [x19, #255]
     d98:	ldr	x3, [x19, #272]
     d9c:	ldr	x2, [x19, #280]
     da0:	mov	x1, x23
     da4:	mov	x0, x19
     da8:	blr	x3
     dac:	str	xzr, [x19, #256]
     db0:	ldr	x0, [x19, #320]
     db4:	add	x0, x0, #0x1
     db8:	str	x0, [x19, #320]
     dbc:	b	d64 <d_print_comp_inner+0x80>
     dc0:	ldp	x21, x22, [sp, #32]
     dc4:	ldp	x23, x24, [sp, #48]
     dc8:	ldp	x25, x26, [sp, #64]
     dcc:	b	4ea0 <d_print_comp_inner+0x41bc>
     dd0:	ldr	x20, [x22, #8]
     dd4:	ldrsw	x22, [x22, #16]
     dd8:	add	x22, x20, x22
     ddc:	cmp	x20, x22
     de0:	b.cs	4ebc <d_print_comp_inner+0x41d8>  // b.hs, b.nlast
     de4:	mov	x23, #0xff                  	// #255
     de8:	mov	x24, #0x0                   	// #0
     dec:	b	e94 <d_print_comp_inner+0x1b0>
     df0:	sub	w1, w0, #0x41
     df4:	and	w1, w1, #0xff
     df8:	cmp	w1, #0x5
     dfc:	b.hi	e34 <d_print_comp_inner+0x150>  // b.pmore
     e00:	sub	w0, w0, #0x37
     e04:	sxtw	x0, w0
     e08:	add	x2, x0, x2, lsl #4
     e0c:	add	x21, x21, #0x1
     e10:	cmp	x22, x21
     e14:	b.eq	e64 <d_print_comp_inner+0x180>  // b.none
     e18:	ldrb	w0, [x21]
     e1c:	sub	w1, w0, #0x30
     e20:	and	w1, w1, #0xff
     e24:	cmp	w1, #0x9
     e28:	b.hi	df0 <d_print_comp_inner+0x10c>  // b.pmore
     e2c:	sub	w0, w0, #0x30
     e30:	b	e04 <d_print_comp_inner+0x120>
     e34:	sub	w1, w0, #0x61
     e38:	and	w1, w1, #0xff
     e3c:	cmp	w1, #0x5
     e40:	b.hi	e4c <d_print_comp_inner+0x168>  // b.pmore
     e44:	sub	w0, w0, #0x57
     e48:	b	e04 <d_print_comp_inner+0x120>
     e4c:	cmp	x22, x21
     e50:	b.ls	e64 <d_print_comp_inner+0x180>  // b.plast
     e54:	ldrb	w0, [x21]
     e58:	cmp	w0, #0x5f
     e5c:	ccmp	x2, x23, #0x2, eq  // eq = none
     e60:	b.ls	ed8 <d_print_comp_inner+0x1f4>  // b.plast
     e64:	ldrb	w21, [x20]
     e68:	ldr	x0, [x19, #256]
     e6c:	cmp	x0, #0xff
     e70:	b.eq	f30 <d_print_comp_inner+0x24c>  // b.none
     e74:	ldr	x0, [x19, #256]
     e78:	add	x1, x0, #0x1
     e7c:	str	x1, [x19, #256]
     e80:	strb	w21, [x19, x0]
     e84:	strb	w21, [x19, #264]
     e88:	add	x20, x20, #0x1
     e8c:	cmp	x22, x20
     e90:	b.ls	f5c <d_print_comp_inner+0x278>  // b.plast
     e94:	sub	x0, x22, x20
     e98:	cmp	x0, #0x3
     e9c:	b.le	e64 <d_print_comp_inner+0x180>
     ea0:	ldrb	w0, [x20]
     ea4:	cmp	w0, #0x5f
     ea8:	b.ne	e64 <d_print_comp_inner+0x180>  // b.any
     eac:	ldrb	w0, [x20, #1]
     eb0:	cmp	w0, #0x5f
     eb4:	b.ne	e64 <d_print_comp_inner+0x180>  // b.any
     eb8:	ldrb	w0, [x20, #2]
     ebc:	cmp	w0, #0x55
     ec0:	b.ne	e64 <d_print_comp_inner+0x180>  // b.any
     ec4:	add	x21, x20, #0x3
     ec8:	cmp	x22, x21
     ecc:	b.ls	e64 <d_print_comp_inner+0x180>  // b.plast
     ed0:	mov	x2, x24
     ed4:	b	e18 <d_print_comp_inner+0x134>
     ed8:	and	w20, w2, #0xff
     edc:	ldr	x0, [x19, #256]
     ee0:	cmp	x0, #0xff
     ee4:	b.eq	f04 <d_print_comp_inner+0x220>  // b.none
     ee8:	ldr	x0, [x19, #256]
     eec:	add	x1, x0, #0x1
     ef0:	str	x1, [x19, #256]
     ef4:	strb	w20, [x19, x0]
     ef8:	strb	w20, [x19, #264]
     efc:	mov	x20, x21
     f00:	b	e88 <d_print_comp_inner+0x1a4>
     f04:	strb	wzr, [x19, #255]
     f08:	ldr	x3, [x19, #272]
     f0c:	ldr	x2, [x19, #280]
     f10:	mov	x1, x23
     f14:	mov	x0, x19
     f18:	blr	x3
     f1c:	str	xzr, [x19, #256]
     f20:	ldr	x0, [x19, #320]
     f24:	add	x0, x0, #0x1
     f28:	str	x0, [x19, #320]
     f2c:	b	ee8 <d_print_comp_inner+0x204>
     f30:	strb	wzr, [x19, #255]
     f34:	ldr	x3, [x19, #272]
     f38:	ldr	x2, [x19, #280]
     f3c:	mov	x1, x23
     f40:	mov	x0, x19
     f44:	blr	x3
     f48:	str	xzr, [x19, #256]
     f4c:	ldr	x0, [x19, #320]
     f50:	add	x0, x0, #0x1
     f54:	str	x0, [x19, #320]
     f58:	b	e74 <d_print_comp_inner+0x190>
     f5c:	ldp	x21, x22, [sp, #32]
     f60:	ldp	x23, x24, [sp, #48]
     f64:	ldp	x25, x26, [sp, #64]
     f68:	b	4ea0 <d_print_comp_inner+0x41bc>
     f6c:	ldr	x2, [x22, #8]
     f70:	mov	w1, w20
     f74:	mov	x0, x19
     f78:	bl	4fe0 <d_print_comp>
     f7c:	adrp	x21, 0 <is_fnqual_component_type>
     f80:	add	x21, x21, #0x0
     f84:	add	x24, x21, #0x5
     f88:	mov	x25, #0xff                  	// #255
     f8c:	b	fb0 <d_print_comp_inner+0x2cc>
     f90:	ldr	x0, [x19, #256]
     f94:	add	x1, x0, #0x1
     f98:	str	x1, [x19, #256]
     f9c:	strb	w23, [x19, x0]
     fa0:	strb	w23, [x19, #264]
     fa4:	add	x21, x21, #0x1
     fa8:	cmp	x21, x24
     fac:	b.eq	fec <d_print_comp_inner+0x308>  // b.none
     fb0:	ldrb	w23, [x21]
     fb4:	ldr	x0, [x19, #256]
     fb8:	cmp	x0, #0xff
     fbc:	b.ne	f90 <d_print_comp_inner+0x2ac>  // b.any
     fc0:	strb	wzr, [x19, #255]
     fc4:	ldr	x3, [x19, #272]
     fc8:	ldr	x2, [x19, #280]
     fcc:	mov	x1, x25
     fd0:	mov	x0, x19
     fd4:	blr	x3
     fd8:	str	xzr, [x19, #256]
     fdc:	ldr	x0, [x19, #320]
     fe0:	add	x0, x0, #0x1
     fe4:	str	x0, [x19, #320]
     fe8:	b	f90 <d_print_comp_inner+0x2ac>
     fec:	ldr	x2, [x22, #16]
     ff0:	mov	w1, w20
     ff4:	mov	x0, x19
     ff8:	bl	4fe0 <d_print_comp>
     ffc:	ldr	x0, [x19, #256]
    1000:	cmp	x0, #0xff
    1004:	b.eq	1030 <d_print_comp_inner+0x34c>  // b.none
    1008:	ldr	x1, [x19, #256]
    100c:	add	x0, x1, #0x1
    1010:	str	x0, [x19, #256]
    1014:	mov	w0, #0x5d                  	// #93
    1018:	strb	w0, [x19, x1]
    101c:	strb	w0, [x19, #264]
    1020:	ldp	x21, x22, [sp, #32]
    1024:	ldp	x23, x24, [sp, #48]
    1028:	ldp	x25, x26, [sp, #64]
    102c:	b	4ea0 <d_print_comp_inner+0x41bc>
    1030:	strb	wzr, [x19, #255]
    1034:	ldr	x3, [x19, #272]
    1038:	ldr	x2, [x19, #280]
    103c:	mov	x1, #0xff                  	// #255
    1040:	mov	x0, x19
    1044:	blr	x3
    1048:	str	xzr, [x19, #256]
    104c:	ldr	x0, [x19, #320]
    1050:	add	x0, x0, #0x1
    1054:	str	x0, [x19, #320]
    1058:	b	1008 <d_print_comp_inner+0x324>
    105c:	ldr	x2, [x22, #8]
    1060:	mov	w1, w20
    1064:	mov	x0, x19
    1068:	bl	4fe0 <d_print_comp>
    106c:	tbz	w20, #2, 10c4 <d_print_comp_inner+0x3e0>
    1070:	ldr	x0, [x19, #256]
    1074:	cmp	x0, #0xff
    1078:	b.eq	1134 <d_print_comp_inner+0x450>  // b.none
    107c:	ldr	x1, [x19, #256]
    1080:	add	x0, x1, #0x1
    1084:	str	x0, [x19, #256]
    1088:	mov	w0, #0x2e                  	// #46
    108c:	strb	w0, [x19, x1]
    1090:	strb	w0, [x19, #264]
    1094:	ldr	x23, [x22, #16]
    1098:	ldr	w0, [x23]
    109c:	cmp	w0, #0x47
    10a0:	b.eq	1160 <d_print_comp_inner+0x47c>  // b.none
    10a4:	mov	x2, x23
    10a8:	mov	w1, w20
    10ac:	mov	x0, x19
    10b0:	bl	4fe0 <d_print_comp>
    10b4:	ldp	x21, x22, [sp, #32]
    10b8:	ldp	x23, x24, [sp, #48]
    10bc:	ldp	x25, x26, [sp, #64]
    10c0:	b	4ea0 <d_print_comp_inner+0x41bc>
    10c4:	adrp	x21, 0 <is_fnqual_component_type>
    10c8:	add	x21, x21, #0x0
    10cc:	add	x24, x21, #0x2
    10d0:	mov	x25, #0xff                  	// #255
    10d4:	b	10f8 <d_print_comp_inner+0x414>
    10d8:	ldr	x0, [x19, #256]
    10dc:	add	x1, x0, #0x1
    10e0:	str	x1, [x19, #256]
    10e4:	strb	w23, [x19, x0]
    10e8:	strb	w23, [x19, #264]
    10ec:	add	x21, x21, #0x1
    10f0:	cmp	x24, x21
    10f4:	b.eq	1094 <d_print_comp_inner+0x3b0>  // b.none
    10f8:	ldrb	w23, [x21]
    10fc:	ldr	x0, [x19, #256]
    1100:	cmp	x0, #0xff
    1104:	b.ne	10d8 <d_print_comp_inner+0x3f4>  // b.any
    1108:	strb	wzr, [x19, #255]
    110c:	ldr	x3, [x19, #272]
    1110:	ldr	x2, [x19, #280]
    1114:	mov	x1, x25
    1118:	mov	x0, x19
    111c:	blr	x3
    1120:	str	xzr, [x19, #256]
    1124:	ldr	x0, [x19, #320]
    1128:	add	x0, x0, #0x1
    112c:	str	x0, [x19, #320]
    1130:	b	10d8 <d_print_comp_inner+0x3f4>
    1134:	strb	wzr, [x19, #255]
    1138:	ldr	x3, [x19, #272]
    113c:	ldr	x2, [x19, #280]
    1140:	mov	x1, #0xff                  	// #255
    1144:	mov	x0, x19
    1148:	blr	x3
    114c:	str	xzr, [x19, #256]
    1150:	ldr	x0, [x19, #320]
    1154:	add	x0, x0, #0x1
    1158:	str	x0, [x19, #320]
    115c:	b	107c <d_print_comp_inner+0x398>
    1160:	adrp	x21, 0 <is_fnqual_component_type>
    1164:	add	x21, x21, #0x0
    1168:	add	x24, x21, #0xd
    116c:	mov	x25, #0xff                  	// #255
    1170:	b	1194 <d_print_comp_inner+0x4b0>
    1174:	ldr	x0, [x19, #256]
    1178:	add	x1, x0, #0x1
    117c:	str	x1, [x19, #256]
    1180:	strb	w22, [x19, x0]
    1184:	strb	w22, [x19, #264]
    1188:	add	x21, x21, #0x1
    118c:	cmp	x21, x24
    1190:	b.eq	11d0 <d_print_comp_inner+0x4ec>  // b.none
    1194:	ldrb	w22, [x21]
    1198:	ldr	x0, [x19, #256]
    119c:	cmp	x0, #0xff
    11a0:	b.ne	1174 <d_print_comp_inner+0x490>  // b.any
    11a4:	strb	wzr, [x19, #255]
    11a8:	ldr	x3, [x19, #272]
    11ac:	ldr	x2, [x19, #280]
    11b0:	mov	x1, x25
    11b4:	mov	x0, x19
    11b8:	blr	x3
    11bc:	str	xzr, [x19, #256]
    11c0:	ldr	x0, [x19, #320]
    11c4:	add	x0, x0, #0x1
    11c8:	str	x0, [x19, #320]
    11cc:	b	1174 <d_print_comp_inner+0x490>
    11d0:	ldr	w2, [x23, #16]
    11d4:	add	x21, sp, #0x80
    11d8:	add	w2, w2, #0x1
    11dc:	adrp	x1, 0 <is_fnqual_component_type>
    11e0:	add	x1, x1, #0x0
    11e4:	mov	x0, x21
    11e8:	bl	0 <sprintf>
    11ec:	mov	x0, x21
    11f0:	bl	0 <strlen>
    11f4:	cbz	x0, 1264 <d_print_comp_inner+0x580>
    11f8:	add	x21, sp, #0x80
    11fc:	add	x24, x0, x21
    1200:	mov	x25, #0xff                  	// #255
    1204:	b	1228 <d_print_comp_inner+0x544>
    1208:	ldr	x0, [x19, #256]
    120c:	add	x1, x0, #0x1
    1210:	str	x1, [x19, #256]
    1214:	strb	w22, [x19, x0]
    1218:	strb	w22, [x19, #264]
    121c:	add	x21, x21, #0x1
    1220:	cmp	x24, x21
    1224:	b.eq	1264 <d_print_comp_inner+0x580>  // b.none
    1228:	ldrb	w22, [x21]
    122c:	ldr	x0, [x19, #256]
    1230:	cmp	x0, #0xff
    1234:	b.ne	1208 <d_print_comp_inner+0x524>  // b.any
    1238:	strb	wzr, [x19, #255]
    123c:	ldr	x3, [x19, #272]
    1240:	ldr	x2, [x19, #280]
    1244:	mov	x1, x25
    1248:	mov	x0, x19
    124c:	blr	x3
    1250:	str	xzr, [x19, #256]
    1254:	ldr	x0, [x19, #320]
    1258:	add	x0, x0, #0x1
    125c:	str	x0, [x19, #320]
    1260:	b	1208 <d_print_comp_inner+0x524>
    1264:	adrp	x21, 0 <is_fnqual_component_type>
    1268:	add	x21, x21, #0x0
    126c:	add	x24, x21, #0x3
    1270:	mov	x25, #0xff                  	// #255
    1274:	b	1298 <d_print_comp_inner+0x5b4>
    1278:	ldr	x0, [x19, #256]
    127c:	add	x1, x0, #0x1
    1280:	str	x1, [x19, #256]
    1284:	strb	w22, [x19, x0]
    1288:	strb	w22, [x19, #264]
    128c:	add	x21, x21, #0x1
    1290:	cmp	x21, x24
    1294:	b.eq	12d4 <d_print_comp_inner+0x5f0>  // b.none
    1298:	ldrb	w22, [x21]
    129c:	ldr	x0, [x19, #256]
    12a0:	cmp	x0, #0xff
    12a4:	b.ne	1278 <d_print_comp_inner+0x594>  // b.any
    12a8:	strb	wzr, [x19, #255]
    12ac:	ldr	x3, [x19, #272]
    12b0:	ldr	x2, [x19, #280]
    12b4:	mov	x1, x25
    12b8:	mov	x0, x19
    12bc:	blr	x3
    12c0:	str	xzr, [x19, #256]
    12c4:	ldr	x0, [x19, #320]
    12c8:	add	x0, x0, #0x1
    12cc:	str	x0, [x19, #320]
    12d0:	b	1278 <d_print_comp_inner+0x594>
    12d4:	ldr	x23, [x23, #8]
    12d8:	b	10a4 <d_print_comp_inner+0x3c0>
    12dc:	ldr	x26, [x19, #296]
    12e0:	str	xzr, [x19, #296]
    12e4:	ldr	x21, [x22, #8]
    12e8:	cbz	x21, 135c <d_print_comp_inner+0x678>
    12ec:	stp	x27, x28, [sp, #80]
    12f0:	ldr	x24, [x19, #288]
    12f4:	add	x25, sp, #0x80
    12f8:	mov	w23, #0x0                   	// #0
    12fc:	ldr	x0, [x19, #296]
    1300:	str	x0, [x25]
    1304:	str	x25, [x19, #296]
    1308:	str	x21, [x25, #8]
    130c:	str	wzr, [x25, #16]
    1310:	str	x24, [x25, #24]
    1314:	add	w23, w23, #0x1
    1318:	ldr	w27, [x21]
    131c:	mov	w0, w27
    1320:	bl	0 <is_fnqual_component_type>
    1324:	cbz	w0, 4dc4 <d_print_comp_inner+0x40e0>
    1328:	ldr	x21, [x21, #8]
    132c:	cbz	x21, 1358 <d_print_comp_inner+0x674>
    1330:	add	x25, x25, #0x20
    1334:	cmp	w23, #0x4
    1338:	b.ne	12fc <d_print_comp_inner+0x618>  // b.any
    133c:	mov	w0, #0x1                   	// #1
    1340:	str	w0, [x19, #304]
    1344:	ldp	x21, x22, [sp, #32]
    1348:	ldp	x23, x24, [sp, #48]
    134c:	ldp	x25, x26, [sp, #64]
    1350:	ldp	x27, x28, [sp, #80]
    1354:	b	4ea0 <d_print_comp_inner+0x41bc>
    1358:	ldp	x27, x28, [sp, #80]
    135c:	mov	w0, #0x1                   	// #1
    1360:	str	w0, [x19, #304]
    1364:	ldp	x21, x22, [sp, #32]
    1368:	ldp	x23, x24, [sp, #48]
    136c:	ldp	x25, x26, [sp, #64]
    1370:	b	4ea0 <d_print_comp_inner+0x41bc>
    1374:	ldr	x21, [x21, #16]
    1378:	ldr	w0, [x21]
    137c:	cmp	w0, #0x47
    1380:	b.eq	1404 <d_print_comp_inner+0x720>  // b.none
    1384:	ubfiz	x0, x23, #5, #32
    1388:	add	x25, sp, #0x80
    138c:	add	x25, x25, x0
    1390:	add	x28, sp, #0x80
    1394:	add	x27, sp, #0x88
    1398:	add	x0, sp, #0x90
    139c:	str	x0, [sp, #96]
    13a0:	add	x0, sp, #0x98
    13a4:	str	x0, [sp, #104]
    13a8:	ldr	w0, [x21]
    13ac:	bl	0 <is_fnqual_component_type>
    13b0:	cbz	w0, 4dcc <d_print_comp_inner+0x40e8>
    13b4:	cmp	w23, #0x3
    13b8:	b.hi	1428 <d_print_comp_inner+0x744>  // b.pmore
    13bc:	sub	w0, w23, #0x1
    13c0:	lsl	x0, x0, #5
    13c4:	add	x1, x28, x0
    13c8:	ldp	x2, x3, [x1]
    13cc:	stp	x2, x3, [x25]
    13d0:	ldp	x2, x3, [x1, #16]
    13d4:	stp	x2, x3, [x25, #16]
    13d8:	str	x1, [x25]
    13dc:	str	x25, [x19, #296]
    13e0:	str	x21, [x27, x0]
    13e4:	ldr	x1, [sp, #96]
    13e8:	str	wzr, [x1, x0]
    13ec:	ldr	x1, [sp, #104]
    13f0:	str	x24, [x1, x0]
    13f4:	add	w23, w23, #0x1
    13f8:	ldr	x21, [x21, #8]
    13fc:	add	x25, x25, #0x20
    1400:	b	13a8 <d_print_comp_inner+0x6c4>
    1404:	ldr	x21, [x21, #8]
    1408:	cbnz	x21, 1384 <d_print_comp_inner+0x6a0>
    140c:	mov	w0, #0x1                   	// #1
    1410:	str	w0, [x19, #304]
    1414:	ldp	x21, x22, [sp, #32]
    1418:	ldp	x23, x24, [sp, #48]
    141c:	ldp	x25, x26, [sp, #64]
    1420:	ldp	x27, x28, [sp, #80]
    1424:	b	4ea0 <d_print_comp_inner+0x41bc>
    1428:	mov	w0, #0x1                   	// #1
    142c:	str	w0, [x19, #304]
    1430:	ldp	x21, x22, [sp, #32]
    1434:	ldp	x23, x24, [sp, #48]
    1438:	ldp	x25, x26, [sp, #64]
    143c:	ldp	x27, x28, [sp, #80]
    1440:	b	4ea0 <d_print_comp_inner+0x41bc>
    1444:	str	x24, [sp, #112]
    1448:	add	x0, sp, #0x70
    144c:	str	x0, [x19, #288]
    1450:	str	x21, [sp, #120]
    1454:	b	4dd8 <d_print_comp_inner+0x40f4>
    1458:	ldr	x0, [sp, #112]
    145c:	str	x0, [x19, #288]
    1460:	b	4df4 <d_print_comp_inner+0x4110>
    1464:	ldr	x0, [x19, #256]
    1468:	add	x1, x0, #0x1
    146c:	str	x1, [x19, #256]
    1470:	strb	w22, [x19, x0]
    1474:	strb	w22, [x19, #264]
    1478:	ldr	x2, [x24, #8]
    147c:	mov	w1, w20
    1480:	mov	x0, x19
    1484:	bl	507c <d_print_mod>
    1488:	sub	x21, x21, #0x20
    148c:	cbz	w23, 14d8 <d_print_comp_inner+0x7f4>
    1490:	sub	w23, w23, #0x1
    1494:	mov	x24, x21
    1498:	ldr	w0, [x21, #16]
    149c:	cbnz	w0, 1488 <d_print_comp_inner+0x7a4>
    14a0:	ldr	x0, [x19, #256]
    14a4:	cmp	x0, #0xff
    14a8:	b.ne	1464 <d_print_comp_inner+0x780>  // b.any
    14ac:	strb	wzr, [x19, #255]
    14b0:	ldr	x3, [x19, #272]
    14b4:	ldr	x2, [x19, #280]
    14b8:	mov	x1, x25
    14bc:	mov	x0, x19
    14c0:	blr	x3
    14c4:	str	xzr, [x19, #256]
    14c8:	ldr	x0, [x19, #320]
    14cc:	add	x0, x0, #0x1
    14d0:	str	x0, [x19, #320]
    14d4:	b	1464 <d_print_comp_inner+0x780>
    14d8:	str	x26, [x19, #296]
    14dc:	ldp	x21, x22, [sp, #32]
    14e0:	ldp	x23, x24, [sp, #48]
    14e4:	ldp	x25, x26, [sp, #64]
    14e8:	ldp	x27, x28, [sp, #80]
    14ec:	b	4ea0 <d_print_comp_inner+0x41bc>
    14f0:	ldr	x23, [x19, #368]
    14f4:	str	x22, [x19, #368]
    14f8:	ldr	x24, [x19, #296]
    14fc:	str	xzr, [x19, #296]
    1500:	ldr	x21, [x22, #8]
    1504:	tbz	w20, #2, 151c <d_print_comp_inner+0x838>
    1508:	ldr	w0, [x21]
    150c:	cbnz	w0, 151c <d_print_comp_inner+0x838>
    1510:	ldr	w0, [x21, #16]
    1514:	cmp	w0, #0x6
    1518:	b.eq	15b4 <d_print_comp_inner+0x8d0>  // b.none
    151c:	mov	x2, x21
    1520:	mov	w1, w20
    1524:	mov	x0, x19
    1528:	bl	4fe0 <d_print_comp>
    152c:	ldrb	w0, [x19, #264]
    1530:	cmp	w0, #0x3c
    1534:	b.eq	15f4 <d_print_comp_inner+0x910>  // b.none
    1538:	ldr	x0, [x19, #256]
    153c:	cmp	x0, #0xff
    1540:	b.eq	1648 <d_print_comp_inner+0x964>  // b.none
    1544:	ldr	x1, [x19, #256]
    1548:	add	x0, x1, #0x1
    154c:	str	x0, [x19, #256]
    1550:	mov	w0, #0x3c                  	// #60
    1554:	strb	w0, [x19, x1]
    1558:	strb	w0, [x19, #264]
    155c:	ldr	x2, [x22, #16]
    1560:	mov	w1, w20
    1564:	mov	x0, x19
    1568:	bl	4fe0 <d_print_comp>
    156c:	ldrb	w0, [x19, #264]
    1570:	cmp	w0, #0x3e
    1574:	b.eq	1674 <d_print_comp_inner+0x990>  // b.none
    1578:	ldr	x0, [x19, #256]
    157c:	cmp	x0, #0xff
    1580:	b.eq	16c8 <d_print_comp_inner+0x9e4>  // b.none
    1584:	ldr	x1, [x19, #256]
    1588:	add	x0, x1, #0x1
    158c:	str	x0, [x19, #256]
    1590:	mov	w0, #0x3e                  	// #62
    1594:	strb	w0, [x19, x1]
    1598:	strb	w0, [x19, #264]
    159c:	str	x24, [x19, #296]
    15a0:	str	x23, [x19, #368]
    15a4:	ldp	x21, x22, [sp, #32]
    15a8:	ldp	x23, x24, [sp, #48]
    15ac:	ldp	x25, x26, [sp, #64]
    15b0:	b	4ea0 <d_print_comp_inner+0x41bc>
    15b4:	mov	x2, #0x6                   	// #6
    15b8:	adrp	x1, 0 <is_fnqual_component_type>
    15bc:	add	x1, x1, #0x0
    15c0:	ldr	x0, [x21, #8]
    15c4:	bl	0 <strncmp>
    15c8:	cbnz	w0, 151c <d_print_comp_inner+0x838>
    15cc:	ldr	x2, [x22, #16]
    15d0:	mov	w1, w20
    15d4:	mov	x0, x19
    15d8:	bl	4fe0 <d_print_comp>
    15dc:	mov	x2, #0x2                   	// #2
    15e0:	adrp	x1, 0 <is_fnqual_component_type>
    15e4:	add	x1, x1, #0x0
    15e8:	mov	x0, x19
    15ec:	bl	848 <d_append_buffer>
    15f0:	b	159c <d_print_comp_inner+0x8b8>
    15f4:	ldr	x0, [x19, #256]
    15f8:	cmp	x0, #0xff
    15fc:	b.eq	161c <d_print_comp_inner+0x938>  // b.none
    1600:	ldr	x1, [x19, #256]
    1604:	add	x0, x1, #0x1
    1608:	str	x0, [x19, #256]
    160c:	mov	w0, #0x20                  	// #32
    1610:	strb	w0, [x19, x1]
    1614:	strb	w0, [x19, #264]
    1618:	b	1538 <d_print_comp_inner+0x854>
    161c:	strb	wzr, [x19, #255]
    1620:	ldr	x3, [x19, #272]
    1624:	ldr	x2, [x19, #280]
    1628:	mov	x1, #0xff                  	// #255
    162c:	mov	x0, x19
    1630:	blr	x3
    1634:	str	xzr, [x19, #256]
    1638:	ldr	x0, [x19, #320]
    163c:	add	x0, x0, #0x1
    1640:	str	x0, [x19, #320]
    1644:	b	1600 <d_print_comp_inner+0x91c>
    1648:	strb	wzr, [x19, #255]
    164c:	ldr	x3, [x19, #272]
    1650:	ldr	x2, [x19, #280]
    1654:	mov	x1, #0xff                  	// #255
    1658:	mov	x0, x19
    165c:	blr	x3
    1660:	str	xzr, [x19, #256]
    1664:	ldr	x0, [x19, #320]
    1668:	add	x0, x0, #0x1
    166c:	str	x0, [x19, #320]
    1670:	b	1544 <d_print_comp_inner+0x860>
    1674:	ldr	x0, [x19, #256]
    1678:	cmp	x0, #0xff
    167c:	b.eq	169c <d_print_comp_inner+0x9b8>  // b.none
    1680:	ldr	x1, [x19, #256]
    1684:	add	x0, x1, #0x1
    1688:	str	x0, [x19, #256]
    168c:	mov	w0, #0x20                  	// #32
    1690:	strb	w0, [x19, x1]
    1694:	strb	w0, [x19, #264]
    1698:	b	1578 <d_print_comp_inner+0x894>
    169c:	strb	wzr, [x19, #255]
    16a0:	ldr	x3, [x19, #272]
    16a4:	ldr	x2, [x19, #280]
    16a8:	mov	x1, #0xff                  	// #255
    16ac:	mov	x0, x19
    16b0:	blr	x3
    16b4:	str	xzr, [x19, #256]
    16b8:	ldr	x0, [x19, #320]
    16bc:	add	x0, x0, #0x1
    16c0:	str	x0, [x19, #320]
    16c4:	b	1680 <d_print_comp_inner+0x99c>
    16c8:	strb	wzr, [x19, #255]
    16cc:	ldr	x3, [x19, #272]
    16d0:	ldr	x2, [x19, #280]
    16d4:	mov	x1, #0xff                  	// #255
    16d8:	mov	x0, x19
    16dc:	blr	x3
    16e0:	str	xzr, [x19, #256]
    16e4:	ldr	x0, [x19, #320]
    16e8:	add	x0, x0, #0x1
    16ec:	str	x0, [x19, #320]
    16f0:	b	1584 <d_print_comp_inner+0x8a0>
    16f4:	ldr	w0, [x19, #312]
    16f8:	cbz	w0, 1810 <d_print_comp_inner+0xb2c>
    16fc:	adrp	x20, 0 <is_fnqual_component_type>
    1700:	add	x20, x20, #0x0
    1704:	add	x23, x20, #0x5
    1708:	mov	x24, #0xff                  	// #255
    170c:	b	1730 <d_print_comp_inner+0xa4c>
    1710:	ldr	x0, [x19, #256]
    1714:	add	x1, x0, #0x1
    1718:	str	x1, [x19, #256]
    171c:	strb	w21, [x19, x0]
    1720:	strb	w21, [x19, #264]
    1724:	add	x20, x20, #0x1
    1728:	cmp	x23, x20
    172c:	b.eq	176c <d_print_comp_inner+0xa88>  // b.none
    1730:	ldrb	w21, [x20]
    1734:	ldr	x0, [x19, #256]
    1738:	cmp	x0, #0xff
    173c:	b.ne	1710 <d_print_comp_inner+0xa2c>  // b.any
    1740:	strb	wzr, [x19, #255]
    1744:	ldr	x3, [x19, #272]
    1748:	ldr	x2, [x19, #280]
    174c:	mov	x1, x24
    1750:	mov	x0, x19
    1754:	blr	x3
    1758:	str	xzr, [x19, #256]
    175c:	ldr	x0, [x19, #320]
    1760:	add	x0, x0, #0x1
    1764:	str	x0, [x19, #320]
    1768:	b	1710 <d_print_comp_inner+0xa2c>
    176c:	ldr	x2, [x22, #8]
    1770:	add	x20, sp, #0x80
    1774:	add	w2, w2, #0x1
    1778:	adrp	x1, 0 <is_fnqual_component_type>
    177c:	add	x1, x1, #0x0
    1780:	mov	x0, x20
    1784:	bl	0 <sprintf>
    1788:	mov	x0, x20
    178c:	bl	0 <strlen>
    1790:	cbz	x0, 4ecc <d_print_comp_inner+0x41e8>
    1794:	add	x20, sp, #0x80
    1798:	add	x22, x0, x20
    179c:	mov	x23, #0xff                  	// #255
    17a0:	b	17c4 <d_print_comp_inner+0xae0>
    17a4:	ldr	x0, [x19, #256]
    17a8:	add	x1, x0, #0x1
    17ac:	str	x1, [x19, #256]
    17b0:	strb	w21, [x19, x0]
    17b4:	strb	w21, [x19, #264]
    17b8:	add	x20, x20, #0x1
    17bc:	cmp	x20, x22
    17c0:	b.eq	1800 <d_print_comp_inner+0xb1c>  // b.none
    17c4:	ldrb	w21, [x20]
    17c8:	ldr	x0, [x19, #256]
    17cc:	cmp	x0, #0xff
    17d0:	b.ne	17a4 <d_print_comp_inner+0xac0>  // b.any
    17d4:	strb	wzr, [x19, #255]
    17d8:	ldr	x3, [x19, #272]
    17dc:	ldr	x2, [x19, #280]
    17e0:	mov	x1, x23
    17e4:	mov	x0, x19
    17e8:	blr	x3
    17ec:	str	xzr, [x19, #256]
    17f0:	ldr	x0, [x19, #320]
    17f4:	add	x0, x0, #0x1
    17f8:	str	x0, [x19, #320]
    17fc:	b	17a4 <d_print_comp_inner+0xac0>
    1800:	ldp	x21, x22, [sp, #32]
    1804:	ldp	x23, x24, [sp, #48]
    1808:	ldp	x25, x26, [sp, #64]
    180c:	b	4ea0 <d_print_comp_inner+0x41bc>
    1810:	mov	x1, x22
    1814:	mov	x0, x19
    1818:	bl	920 <d_lookup_template_argument>
    181c:	cbz	x0, 1868 <d_print_comp_inner+0xb84>
    1820:	ldr	w1, [x0]
    1824:	cmp	w1, #0x2f
    1828:	b.eq	185c <d_print_comp_inner+0xb78>  // b.none
    182c:	ldr	x21, [x19, #288]
    1830:	ldr	x1, [x21]
    1834:	str	x1, [x19, #288]
    1838:	mov	x2, x0
    183c:	mov	w1, w20
    1840:	mov	x0, x19
    1844:	bl	4fe0 <d_print_comp>
    1848:	str	x21, [x19, #288]
    184c:	ldp	x21, x22, [sp, #32]
    1850:	ldp	x23, x24, [sp, #48]
    1854:	ldp	x25, x26, [sp, #64]
    1858:	b	4ea0 <d_print_comp_inner+0x41bc>
    185c:	ldr	w1, [x19, #316]
    1860:	bl	8e8 <d_index_template_argument>
    1864:	cbnz	x0, 182c <d_print_comp_inner+0xb48>
    1868:	mov	w0, #0x1                   	// #1
    186c:	str	w0, [x19, #304]
    1870:	ldp	x21, x22, [sp, #32]
    1874:	ldp	x23, x24, [sp, #48]
    1878:	ldp	x25, x26, [sp, #64]
    187c:	b	4ea0 <d_print_comp_inner+0x41bc>
    1880:	adrp	x21, 0 <is_fnqual_component_type>
    1884:	add	x21, x21, #0x0
    1888:	add	x24, x21, #0x1e
    188c:	mov	x25, #0xff                  	// #255
    1890:	b	18b4 <d_print_comp_inner+0xbd0>
    1894:	ldr	x0, [x19, #256]
    1898:	add	x1, x0, #0x1
    189c:	str	x1, [x19, #256]
    18a0:	strb	w23, [x19, x0]
    18a4:	strb	w23, [x19, #264]
    18a8:	add	x21, x21, #0x1
    18ac:	cmp	x21, x24
    18b0:	b.eq	18f0 <d_print_comp_inner+0xc0c>  // b.none
    18b4:	ldrb	w23, [x21]
    18b8:	ldr	x0, [x19, #256]
    18bc:	cmp	x0, #0xff
    18c0:	b.ne	1894 <d_print_comp_inner+0xbb0>  // b.any
    18c4:	strb	wzr, [x19, #255]
    18c8:	ldr	x3, [x19, #272]
    18cc:	ldr	x2, [x19, #280]
    18d0:	mov	x1, x25
    18d4:	mov	x0, x19
    18d8:	blr	x3
    18dc:	str	xzr, [x19, #256]
    18e0:	ldr	x0, [x19, #320]
    18e4:	add	x0, x0, #0x1
    18e8:	str	x0, [x19, #320]
    18ec:	b	1894 <d_print_comp_inner+0xbb0>
    18f0:	ldr	x2, [x22, #8]
    18f4:	mov	w1, w20
    18f8:	mov	x0, x19
    18fc:	bl	4fe0 <d_print_comp>
    1900:	ldp	x21, x22, [sp, #32]
    1904:	ldp	x23, x24, [sp, #48]
    1908:	ldp	x25, x26, [sp, #64]
    190c:	b	4ea0 <d_print_comp_inner+0x41bc>
    1910:	ldr	x2, [x22, #16]
    1914:	mov	w1, w20
    1918:	mov	x0, x19
    191c:	bl	4fe0 <d_print_comp>
    1920:	ldp	x21, x22, [sp, #32]
    1924:	ldp	x23, x24, [sp, #48]
    1928:	ldp	x25, x26, [sp, #64]
    192c:	b	4ea0 <d_print_comp_inner+0x41bc>
    1930:	ldr	x0, [x19, #256]
    1934:	cmp	x0, #0xff
    1938:	b.eq	1974 <d_print_comp_inner+0xc90>  // b.none
    193c:	ldr	x1, [x19, #256]
    1940:	add	x0, x1, #0x1
    1944:	str	x0, [x19, #256]
    1948:	mov	w0, #0x7e                  	// #126
    194c:	strb	w0, [x19, x1]
    1950:	strb	w0, [x19, #264]
    1954:	ldr	x2, [x22, #16]
    1958:	mov	w1, w20
    195c:	mov	x0, x19
    1960:	bl	4fe0 <d_print_comp>
    1964:	ldp	x21, x22, [sp, #32]
    1968:	ldp	x23, x24, [sp, #48]
    196c:	ldp	x25, x26, [sp, #64]
    1970:	b	4ea0 <d_print_comp_inner+0x41bc>
    1974:	strb	wzr, [x19, #255]
    1978:	ldr	x3, [x19, #272]
    197c:	ldr	x2, [x19, #280]
    1980:	mov	x1, #0xff                  	// #255
    1984:	mov	x0, x19
    1988:	blr	x3
    198c:	str	xzr, [x19, #256]
    1990:	ldr	x0, [x19, #320]
    1994:	add	x0, x0, #0x1
    1998:	str	x0, [x19, #320]
    199c:	b	193c <d_print_comp_inner+0xc58>
    19a0:	adrp	x21, 0 <is_fnqual_component_type>
    19a4:	add	x21, x21, #0x0
    19a8:	add	x24, x21, #0xb
    19ac:	mov	x25, #0xff                  	// #255
    19b0:	b	19d4 <d_print_comp_inner+0xcf0>
    19b4:	ldr	x0, [x19, #256]
    19b8:	add	x1, x0, #0x1
    19bc:	str	x1, [x19, #256]
    19c0:	strb	w23, [x19, x0]
    19c4:	strb	w23, [x19, #264]
    19c8:	add	x21, x21, #0x1
    19cc:	cmp	x24, x21
    19d0:	b.eq	1a10 <d_print_comp_inner+0xd2c>  // b.none
    19d4:	ldrb	w23, [x21]
    19d8:	ldr	x0, [x19, #256]
    19dc:	cmp	x0, #0xff
    19e0:	b.ne	19b4 <d_print_comp_inner+0xcd0>  // b.any
    19e4:	strb	wzr, [x19, #255]
    19e8:	ldr	x3, [x19, #272]
    19ec:	ldr	x2, [x19, #280]
    19f0:	mov	x1, x25
    19f4:	mov	x0, x19
    19f8:	blr	x3
    19fc:	str	xzr, [x19, #256]
    1a00:	ldr	x0, [x19, #320]
    1a04:	add	x0, x0, #0x1
    1a08:	str	x0, [x19, #320]
    1a0c:	b	19b4 <d_print_comp_inner+0xcd0>
    1a10:	ldr	x2, [x22, #8]
    1a14:	mov	w1, w20
    1a18:	mov	x0, x19
    1a1c:	bl	4fe0 <d_print_comp>
    1a20:	ldp	x21, x22, [sp, #32]
    1a24:	ldp	x23, x24, [sp, #48]
    1a28:	ldp	x25, x26, [sp, #64]
    1a2c:	b	4ea0 <d_print_comp_inner+0x41bc>
    1a30:	adrp	x21, 0 <is_fnqual_component_type>
    1a34:	add	x21, x21, #0x0
    1a38:	add	x24, x21, #0x8
    1a3c:	mov	x25, #0xff                  	// #255
    1a40:	b	1a64 <d_print_comp_inner+0xd80>
    1a44:	ldr	x0, [x19, #256]
    1a48:	add	x1, x0, #0x1
    1a4c:	str	x1, [x19, #256]
    1a50:	strb	w23, [x19, x0]
    1a54:	strb	w23, [x19, #264]
    1a58:	add	x21, x21, #0x1
    1a5c:	cmp	x24, x21
    1a60:	b.eq	1aa0 <d_print_comp_inner+0xdbc>  // b.none
    1a64:	ldrb	w23, [x21]
    1a68:	ldr	x0, [x19, #256]
    1a6c:	cmp	x0, #0xff
    1a70:	b.ne	1a44 <d_print_comp_inner+0xd60>  // b.any
    1a74:	strb	wzr, [x19, #255]
    1a78:	ldr	x3, [x19, #272]
    1a7c:	ldr	x2, [x19, #280]
    1a80:	mov	x1, x25
    1a84:	mov	x0, x19
    1a88:	blr	x3
    1a8c:	str	xzr, [x19, #256]
    1a90:	ldr	x0, [x19, #320]
    1a94:	add	x0, x0, #0x1
    1a98:	str	x0, [x19, #320]
    1a9c:	b	1a44 <d_print_comp_inner+0xd60>
    1aa0:	ldr	x2, [x22, #8]
    1aa4:	mov	w1, w20
    1aa8:	mov	x0, x19
    1aac:	bl	4fe0 <d_print_comp>
    1ab0:	ldp	x21, x22, [sp, #32]
    1ab4:	ldp	x23, x24, [sp, #48]
    1ab8:	ldp	x25, x26, [sp, #64]
    1abc:	b	4ea0 <d_print_comp_inner+0x41bc>
    1ac0:	adrp	x21, 0 <is_fnqual_component_type>
    1ac4:	add	x21, x21, #0x0
    1ac8:	add	x24, x21, #0x18
    1acc:	mov	x25, #0xff                  	// #255
    1ad0:	b	1af4 <d_print_comp_inner+0xe10>
    1ad4:	ldr	x0, [x19, #256]
    1ad8:	add	x1, x0, #0x1
    1adc:	str	x1, [x19, #256]
    1ae0:	strb	w23, [x19, x0]
    1ae4:	strb	w23, [x19, #264]
    1ae8:	add	x21, x21, #0x1
    1aec:	cmp	x24, x21
    1af0:	b.eq	1b30 <d_print_comp_inner+0xe4c>  // b.none
    1af4:	ldrb	w23, [x21]
    1af8:	ldr	x0, [x19, #256]
    1afc:	cmp	x0, #0xff
    1b00:	b.ne	1ad4 <d_print_comp_inner+0xdf0>  // b.any
    1b04:	strb	wzr, [x19, #255]
    1b08:	ldr	x3, [x19, #272]
    1b0c:	ldr	x2, [x19, #280]
    1b10:	mov	x1, x25
    1b14:	mov	x0, x19
    1b18:	blr	x3
    1b1c:	str	xzr, [x19, #256]
    1b20:	ldr	x0, [x19, #320]
    1b24:	add	x0, x0, #0x1
    1b28:	str	x0, [x19, #320]
    1b2c:	b	1ad4 <d_print_comp_inner+0xdf0>
    1b30:	ldr	x2, [x22, #8]
    1b34:	mov	w1, w20
    1b38:	mov	x0, x19
    1b3c:	bl	4fe0 <d_print_comp>
    1b40:	adrp	x21, 0 <is_fnqual_component_type>
    1b44:	add	x21, x21, #0x0
    1b48:	add	x24, x21, #0x4
    1b4c:	mov	x25, #0xff                  	// #255
    1b50:	b	1b74 <d_print_comp_inner+0xe90>
    1b54:	ldr	x0, [x19, #256]
    1b58:	add	x1, x0, #0x1
    1b5c:	str	x1, [x19, #256]
    1b60:	strb	w23, [x19, x0]
    1b64:	strb	w23, [x19, #264]
    1b68:	add	x21, x21, #0x1
    1b6c:	cmp	x21, x24
    1b70:	b.eq	1bb0 <d_print_comp_inner+0xecc>  // b.none
    1b74:	ldrb	w23, [x21]
    1b78:	ldr	x0, [x19, #256]
    1b7c:	cmp	x0, #0xff
    1b80:	b.ne	1b54 <d_print_comp_inner+0xe70>  // b.any
    1b84:	strb	wzr, [x19, #255]
    1b88:	ldr	x3, [x19, #272]
    1b8c:	ldr	x2, [x19, #280]
    1b90:	mov	x1, x25
    1b94:	mov	x0, x19
    1b98:	blr	x3
    1b9c:	str	xzr, [x19, #256]
    1ba0:	ldr	x0, [x19, #320]
    1ba4:	add	x0, x0, #0x1
    1ba8:	str	x0, [x19, #320]
    1bac:	b	1b54 <d_print_comp_inner+0xe70>
    1bb0:	ldr	x2, [x22, #16]
    1bb4:	mov	w1, w20
    1bb8:	mov	x0, x19
    1bbc:	bl	4fe0 <d_print_comp>
    1bc0:	ldp	x21, x22, [sp, #32]
    1bc4:	ldp	x23, x24, [sp, #48]
    1bc8:	ldp	x25, x26, [sp, #64]
    1bcc:	b	4ea0 <d_print_comp_inner+0x41bc>
    1bd0:	adrp	x21, 0 <is_fnqual_component_type>
    1bd4:	add	x21, x21, #0x0
    1bd8:	add	x24, x21, #0xd
    1bdc:	mov	x25, #0xff                  	// #255
    1be0:	b	1c04 <d_print_comp_inner+0xf20>
    1be4:	ldr	x0, [x19, #256]
    1be8:	add	x1, x0, #0x1
    1bec:	str	x1, [x19, #256]
    1bf0:	strb	w23, [x19, x0]
    1bf4:	strb	w23, [x19, #264]
    1bf8:	add	x21, x21, #0x1
    1bfc:	cmp	x24, x21
    1c00:	b.eq	1c40 <d_print_comp_inner+0xf5c>  // b.none
    1c04:	ldrb	w23, [x21]
    1c08:	ldr	x0, [x19, #256]
    1c0c:	cmp	x0, #0xff
    1c10:	b.ne	1be4 <d_print_comp_inner+0xf00>  // b.any
    1c14:	strb	wzr, [x19, #255]
    1c18:	ldr	x3, [x19, #272]
    1c1c:	ldr	x2, [x19, #280]
    1c20:	mov	x1, x25
    1c24:	mov	x0, x19
    1c28:	blr	x3
    1c2c:	str	xzr, [x19, #256]
    1c30:	ldr	x0, [x19, #320]
    1c34:	add	x0, x0, #0x1
    1c38:	str	x0, [x19, #320]
    1c3c:	b	1be4 <d_print_comp_inner+0xf00>
    1c40:	ldr	x2, [x22, #8]
    1c44:	mov	w1, w20
    1c48:	mov	x0, x19
    1c4c:	bl	4fe0 <d_print_comp>
    1c50:	ldp	x21, x22, [sp, #32]
    1c54:	ldp	x23, x24, [sp, #48]
    1c58:	ldp	x25, x26, [sp, #64]
    1c5c:	b	4ea0 <d_print_comp_inner+0x41bc>
    1c60:	adrp	x21, 0 <is_fnqual_component_type>
    1c64:	add	x21, x21, #0x0
    1c68:	add	x24, x21, #0x12
    1c6c:	mov	x25, #0xff                  	// #255
    1c70:	b	1c94 <d_print_comp_inner+0xfb0>
    1c74:	ldr	x0, [x19, #256]
    1c78:	add	x1, x0, #0x1
    1c7c:	str	x1, [x19, #256]
    1c80:	strb	w23, [x19, x0]
    1c84:	strb	w23, [x19, #264]
    1c88:	add	x21, x21, #0x1
    1c8c:	cmp	x24, x21
    1c90:	b.eq	1cd0 <d_print_comp_inner+0xfec>  // b.none
    1c94:	ldrb	w23, [x21]
    1c98:	ldr	x0, [x19, #256]
    1c9c:	cmp	x0, #0xff
    1ca0:	b.ne	1c74 <d_print_comp_inner+0xf90>  // b.any
    1ca4:	strb	wzr, [x19, #255]
    1ca8:	ldr	x3, [x19, #272]
    1cac:	ldr	x2, [x19, #280]
    1cb0:	mov	x1, x25
    1cb4:	mov	x0, x19
    1cb8:	blr	x3
    1cbc:	str	xzr, [x19, #256]
    1cc0:	ldr	x0, [x19, #320]
    1cc4:	add	x0, x0, #0x1
    1cc8:	str	x0, [x19, #320]
    1ccc:	b	1c74 <d_print_comp_inner+0xf90>
    1cd0:	ldr	x2, [x22, #8]
    1cd4:	mov	w1, w20
    1cd8:	mov	x0, x19
    1cdc:	bl	4fe0 <d_print_comp>
    1ce0:	ldp	x21, x22, [sp, #32]
    1ce4:	ldp	x23, x24, [sp, #48]
    1ce8:	ldp	x25, x26, [sp, #64]
    1cec:	b	4ea0 <d_print_comp_inner+0x41bc>
    1cf0:	adrp	x21, 0 <is_fnqual_component_type>
    1cf4:	add	x21, x21, #0x0
    1cf8:	add	x24, x21, #0x10
    1cfc:	mov	x25, #0xff                  	// #255
    1d00:	b	1d24 <d_print_comp_inner+0x1040>
    1d04:	ldr	x0, [x19, #256]
    1d08:	add	x1, x0, #0x1
    1d0c:	str	x1, [x19, #256]
    1d10:	strb	w23, [x19, x0]
    1d14:	strb	w23, [x19, #264]
    1d18:	add	x21, x21, #0x1
    1d1c:	cmp	x21, x24
    1d20:	b.eq	1d60 <d_print_comp_inner+0x107c>  // b.none
    1d24:	ldrb	w23, [x21]
    1d28:	ldr	x0, [x19, #256]
    1d2c:	cmp	x0, #0xff
    1d30:	b.ne	1d04 <d_print_comp_inner+0x1020>  // b.any
    1d34:	strb	wzr, [x19, #255]
    1d38:	ldr	x3, [x19, #272]
    1d3c:	ldr	x2, [x19, #280]
    1d40:	mov	x1, x25
    1d44:	mov	x0, x19
    1d48:	blr	x3
    1d4c:	str	xzr, [x19, #256]
    1d50:	ldr	x0, [x19, #320]
    1d54:	add	x0, x0, #0x1
    1d58:	str	x0, [x19, #320]
    1d5c:	b	1d04 <d_print_comp_inner+0x1020>
    1d60:	ldr	x2, [x22, #8]
    1d64:	mov	w1, w20
    1d68:	mov	x0, x19
    1d6c:	bl	4fe0 <d_print_comp>
    1d70:	ldp	x21, x22, [sp, #32]
    1d74:	ldp	x23, x24, [sp, #48]
    1d78:	ldp	x25, x26, [sp, #64]
    1d7c:	b	4ea0 <d_print_comp_inner+0x41bc>
    1d80:	adrp	x21, 0 <is_fnqual_component_type>
    1d84:	add	x21, x21, #0x0
    1d88:	add	x24, x21, #0x15
    1d8c:	mov	x25, #0xff                  	// #255
    1d90:	b	1db4 <d_print_comp_inner+0x10d0>
    1d94:	ldr	x0, [x19, #256]
    1d98:	add	x1, x0, #0x1
    1d9c:	str	x1, [x19, #256]
    1da0:	strb	w23, [x19, x0]
    1da4:	strb	w23, [x19, #264]
    1da8:	add	x21, x21, #0x1
    1dac:	cmp	x24, x21
    1db0:	b.eq	1df0 <d_print_comp_inner+0x110c>  // b.none
    1db4:	ldrb	w23, [x21]
    1db8:	ldr	x0, [x19, #256]
    1dbc:	cmp	x0, #0xff
    1dc0:	b.ne	1d94 <d_print_comp_inner+0x10b0>  // b.any
    1dc4:	strb	wzr, [x19, #255]
    1dc8:	ldr	x3, [x19, #272]
    1dcc:	ldr	x2, [x19, #280]
    1dd0:	mov	x1, x25
    1dd4:	mov	x0, x19
    1dd8:	blr	x3
    1ddc:	str	xzr, [x19, #256]
    1de0:	ldr	x0, [x19, #320]
    1de4:	add	x0, x0, #0x1
    1de8:	str	x0, [x19, #320]
    1dec:	b	1d94 <d_print_comp_inner+0x10b0>
    1df0:	ldr	x2, [x22, #8]
    1df4:	mov	w1, w20
    1df8:	mov	x0, x19
    1dfc:	bl	4fe0 <d_print_comp>
    1e00:	ldp	x21, x22, [sp, #32]
    1e04:	ldp	x23, x24, [sp, #48]
    1e08:	ldp	x25, x26, [sp, #64]
    1e0c:	b	4ea0 <d_print_comp_inner+0x41bc>
    1e10:	adrp	x21, 0 <is_fnqual_component_type>
    1e14:	add	x21, x21, #0x0
    1e18:	add	x24, x21, #0x11
    1e1c:	mov	x25, #0xff                  	// #255
    1e20:	b	1e44 <d_print_comp_inner+0x1160>
    1e24:	ldr	x0, [x19, #256]
    1e28:	add	x1, x0, #0x1
    1e2c:	str	x1, [x19, #256]
    1e30:	strb	w23, [x19, x0]
    1e34:	strb	w23, [x19, #264]
    1e38:	add	x21, x21, #0x1
    1e3c:	cmp	x24, x21
    1e40:	b.eq	1e80 <d_print_comp_inner+0x119c>  // b.none
    1e44:	ldrb	w23, [x21]
    1e48:	ldr	x0, [x19, #256]
    1e4c:	cmp	x0, #0xff
    1e50:	b.ne	1e24 <d_print_comp_inner+0x1140>  // b.any
    1e54:	strb	wzr, [x19, #255]
    1e58:	ldr	x3, [x19, #272]
    1e5c:	ldr	x2, [x19, #280]
    1e60:	mov	x1, x25
    1e64:	mov	x0, x19
    1e68:	blr	x3
    1e6c:	str	xzr, [x19, #256]
    1e70:	ldr	x0, [x19, #320]
    1e74:	add	x0, x0, #0x1
    1e78:	str	x0, [x19, #320]
    1e7c:	b	1e24 <d_print_comp_inner+0x1140>
    1e80:	ldr	x2, [x22, #8]
    1e84:	mov	w1, w20
    1e88:	mov	x0, x19
    1e8c:	bl	4fe0 <d_print_comp>
    1e90:	ldp	x21, x22, [sp, #32]
    1e94:	ldp	x23, x24, [sp, #48]
    1e98:	ldp	x25, x26, [sp, #64]
    1e9c:	b	4ea0 <d_print_comp_inner+0x41bc>
    1ea0:	adrp	x21, 0 <is_fnqual_component_type>
    1ea4:	add	x21, x21, #0x0
    1ea8:	add	x24, x21, #0x1a
    1eac:	mov	x25, #0xff                  	// #255
    1eb0:	b	1ed4 <d_print_comp_inner+0x11f0>
    1eb4:	ldr	x0, [x19, #256]
    1eb8:	add	x1, x0, #0x1
    1ebc:	str	x1, [x19, #256]
    1ec0:	strb	w23, [x19, x0]
    1ec4:	strb	w23, [x19, #264]
    1ec8:	add	x21, x21, #0x1
    1ecc:	cmp	x24, x21
    1ed0:	b.eq	1f10 <d_print_comp_inner+0x122c>  // b.none
    1ed4:	ldrb	w23, [x21]
    1ed8:	ldr	x0, [x19, #256]
    1edc:	cmp	x0, #0xff
    1ee0:	b.ne	1eb4 <d_print_comp_inner+0x11d0>  // b.any
    1ee4:	strb	wzr, [x19, #255]
    1ee8:	ldr	x3, [x19, #272]
    1eec:	ldr	x2, [x19, #280]
    1ef0:	mov	x1, x25
    1ef4:	mov	x0, x19
    1ef8:	blr	x3
    1efc:	str	xzr, [x19, #256]
    1f00:	ldr	x0, [x19, #320]
    1f04:	add	x0, x0, #0x1
    1f08:	str	x0, [x19, #320]
    1f0c:	b	1eb4 <d_print_comp_inner+0x11d0>
    1f10:	ldr	x2, [x22, #8]
    1f14:	mov	w1, w20
    1f18:	mov	x0, x19
    1f1c:	bl	4fe0 <d_print_comp>
    1f20:	ldp	x21, x22, [sp, #32]
    1f24:	ldp	x23, x24, [sp, #48]
    1f28:	ldp	x25, x26, [sp, #64]
    1f2c:	b	4ea0 <d_print_comp_inner+0x41bc>
    1f30:	adrp	x21, 0 <is_fnqual_component_type>
    1f34:	add	x21, x21, #0x0
    1f38:	add	x24, x21, #0xf
    1f3c:	mov	x25, #0xff                  	// #255
    1f40:	b	1f64 <d_print_comp_inner+0x1280>
    1f44:	ldr	x0, [x19, #256]
    1f48:	add	x1, x0, #0x1
    1f4c:	str	x1, [x19, #256]
    1f50:	strb	w23, [x19, x0]
    1f54:	strb	w23, [x19, #264]
    1f58:	add	x21, x21, #0x1
    1f5c:	cmp	x24, x21
    1f60:	b.eq	1fa0 <d_print_comp_inner+0x12bc>  // b.none
    1f64:	ldrb	w23, [x21]
    1f68:	ldr	x0, [x19, #256]
    1f6c:	cmp	x0, #0xff
    1f70:	b.ne	1f44 <d_print_comp_inner+0x1260>  // b.any
    1f74:	strb	wzr, [x19, #255]
    1f78:	ldr	x3, [x19, #272]
    1f7c:	ldr	x2, [x19, #280]
    1f80:	mov	x1, x25
    1f84:	mov	x0, x19
    1f88:	blr	x3
    1f8c:	str	xzr, [x19, #256]
    1f90:	ldr	x0, [x19, #320]
    1f94:	add	x0, x0, #0x1
    1f98:	str	x0, [x19, #320]
    1f9c:	b	1f44 <d_print_comp_inner+0x1260>
    1fa0:	ldr	x2, [x22, #8]
    1fa4:	mov	w1, w20
    1fa8:	mov	x0, x19
    1fac:	bl	4fe0 <d_print_comp>
    1fb0:	ldp	x21, x22, [sp, #32]
    1fb4:	ldp	x23, x24, [sp, #48]
    1fb8:	ldp	x25, x26, [sp, #64]
    1fbc:	b	4ea0 <d_print_comp_inner+0x41bc>
    1fc0:	adrp	x21, 0 <is_fnqual_component_type>
    1fc4:	add	x21, x21, #0x0
    1fc8:	add	x24, x21, #0x13
    1fcc:	mov	x25, #0xff                  	// #255
    1fd0:	b	1ff4 <d_print_comp_inner+0x1310>
    1fd4:	ldr	x0, [x19, #256]
    1fd8:	add	x1, x0, #0x1
    1fdc:	str	x1, [x19, #256]
    1fe0:	strb	w23, [x19, x0]
    1fe4:	strb	w23, [x19, #264]
    1fe8:	add	x21, x21, #0x1
    1fec:	cmp	x24, x21
    1ff0:	b.eq	2030 <d_print_comp_inner+0x134c>  // b.none
    1ff4:	ldrb	w23, [x21]
    1ff8:	ldr	x0, [x19, #256]
    1ffc:	cmp	x0, #0xff
    2000:	b.ne	1fd4 <d_print_comp_inner+0x12f0>  // b.any
    2004:	strb	wzr, [x19, #255]
    2008:	ldr	x3, [x19, #272]
    200c:	ldr	x2, [x19, #280]
    2010:	mov	x1, x25
    2014:	mov	x0, x19
    2018:	blr	x3
    201c:	str	xzr, [x19, #256]
    2020:	ldr	x0, [x19, #320]
    2024:	add	x0, x0, #0x1
    2028:	str	x0, [x19, #320]
    202c:	b	1fd4 <d_print_comp_inner+0x12f0>
    2030:	ldr	x2, [x22, #8]
    2034:	mov	w1, w20
    2038:	mov	x0, x19
    203c:	bl	4fe0 <d_print_comp>
    2040:	ldp	x21, x22, [sp, #32]
    2044:	ldp	x23, x24, [sp, #48]
    2048:	ldp	x25, x26, [sp, #64]
    204c:	b	4ea0 <d_print_comp_inner+0x41bc>
    2050:	adrp	x21, 0 <is_fnqual_component_type>
    2054:	add	x21, x21, #0x0
    2058:	add	x24, x21, #0x16
    205c:	mov	x25, #0xff                  	// #255
    2060:	b	2084 <d_print_comp_inner+0x13a0>
    2064:	ldr	x0, [x19, #256]
    2068:	add	x1, x0, #0x1
    206c:	str	x1, [x19, #256]
    2070:	strb	w23, [x19, x0]
    2074:	strb	w23, [x19, #264]
    2078:	add	x21, x21, #0x1
    207c:	cmp	x24, x21
    2080:	b.eq	20c0 <d_print_comp_inner+0x13dc>  // b.none
    2084:	ldrb	w23, [x21]
    2088:	ldr	x0, [x19, #256]
    208c:	cmp	x0, #0xff
    2090:	b.ne	2064 <d_print_comp_inner+0x1380>  // b.any
    2094:	strb	wzr, [x19, #255]
    2098:	ldr	x3, [x19, #272]
    209c:	ldr	x2, [x19, #280]
    20a0:	mov	x1, x25
    20a4:	mov	x0, x19
    20a8:	blr	x3
    20ac:	str	xzr, [x19, #256]
    20b0:	ldr	x0, [x19, #320]
    20b4:	add	x0, x0, #0x1
    20b8:	str	x0, [x19, #320]
    20bc:	b	2064 <d_print_comp_inner+0x1380>
    20c0:	ldr	x2, [x22, #8]
    20c4:	mov	w1, w20
    20c8:	mov	x0, x19
    20cc:	bl	4fe0 <d_print_comp>
    20d0:	ldp	x21, x22, [sp, #32]
    20d4:	ldp	x23, x24, [sp, #48]
    20d8:	ldp	x25, x26, [sp, #64]
    20dc:	b	4ea0 <d_print_comp_inner+0x41bc>
    20e0:	adrp	x21, 0 <is_fnqual_component_type>
    20e4:	add	x21, x21, #0x0
    20e8:	add	x24, x21, #0x19
    20ec:	mov	x25, #0xff                  	// #255
    20f0:	b	2114 <d_print_comp_inner+0x1430>
    20f4:	ldr	x0, [x19, #256]
    20f8:	add	x1, x0, #0x1
    20fc:	str	x1, [x19, #256]
    2100:	strb	w23, [x19, x0]
    2104:	strb	w23, [x19, #264]
    2108:	add	x21, x21, #0x1
    210c:	cmp	x24, x21
    2110:	b.eq	2150 <d_print_comp_inner+0x146c>  // b.none
    2114:	ldrb	w23, [x21]
    2118:	ldr	x0, [x19, #256]
    211c:	cmp	x0, #0xff
    2120:	b.ne	20f4 <d_print_comp_inner+0x1410>  // b.any
    2124:	strb	wzr, [x19, #255]
    2128:	ldr	x3, [x19, #272]
    212c:	ldr	x2, [x19, #280]
    2130:	mov	x1, x25
    2134:	mov	x0, x19
    2138:	blr	x3
    213c:	str	xzr, [x19, #256]
    2140:	ldr	x0, [x19, #320]
    2144:	add	x0, x0, #0x1
    2148:	str	x0, [x19, #320]
    214c:	b	20f4 <d_print_comp_inner+0x1410>
    2150:	ldr	x2, [x22, #8]
    2154:	mov	w1, w20
    2158:	mov	x0, x19
    215c:	bl	4fe0 <d_print_comp>
    2160:	ldp	x21, x22, [sp, #32]
    2164:	ldp	x23, x24, [sp, #48]
    2168:	ldp	x25, x26, [sp, #64]
    216c:	b	4ea0 <d_print_comp_inner+0x41bc>
    2170:	adrp	x21, 0 <is_fnqual_component_type>
    2174:	add	x21, x21, #0x0
    2178:	add	x24, x21, #0x15
    217c:	mov	x25, #0xff                  	// #255
    2180:	b	21a4 <d_print_comp_inner+0x14c0>
    2184:	ldr	x0, [x19, #256]
    2188:	add	x1, x0, #0x1
    218c:	str	x1, [x19, #256]
    2190:	strb	w23, [x19, x0]
    2194:	strb	w23, [x19, #264]
    2198:	add	x21, x21, #0x1
    219c:	cmp	x21, x24
    21a0:	b.eq	21e0 <d_print_comp_inner+0x14fc>  // b.none
    21a4:	ldrb	w23, [x21]
    21a8:	ldr	x0, [x19, #256]
    21ac:	cmp	x0, #0xff
    21b0:	b.ne	2184 <d_print_comp_inner+0x14a0>  // b.any
    21b4:	strb	wzr, [x19, #255]
    21b8:	ldr	x3, [x19, #272]
    21bc:	ldr	x2, [x19, #280]
    21c0:	mov	x1, x25
    21c4:	mov	x0, x19
    21c8:	blr	x3
    21cc:	str	xzr, [x19, #256]
    21d0:	ldr	x0, [x19, #320]
    21d4:	add	x0, x0, #0x1
    21d8:	str	x0, [x19, #320]
    21dc:	b	2184 <d_print_comp_inner+0x14a0>
    21e0:	ldr	x2, [x22, #16]
    21e4:	mov	w1, w20
    21e8:	mov	x0, x19
    21ec:	bl	4fe0 <d_print_comp>
    21f0:	adrp	x21, 0 <is_fnqual_component_type>
    21f4:	add	x21, x21, #0x0
    21f8:	add	x24, x21, #0x5
    21fc:	mov	x25, #0xff                  	// #255
    2200:	b	2224 <d_print_comp_inner+0x1540>
    2204:	ldr	x0, [x19, #256]
    2208:	add	x1, x0, #0x1
    220c:	str	x1, [x19, #256]
    2210:	strb	w23, [x19, x0]
    2214:	strb	w23, [x19, #264]
    2218:	add	x21, x21, #0x1
    221c:	cmp	x24, x21
    2220:	b.eq	2260 <d_print_comp_inner+0x157c>  // b.none
    2224:	ldrb	w23, [x21]
    2228:	ldr	x0, [x19, #256]
    222c:	cmp	x0, #0xff
    2230:	b.ne	2204 <d_print_comp_inner+0x1520>  // b.any
    2234:	strb	wzr, [x19, #255]
    2238:	ldr	x3, [x19, #272]
    223c:	ldr	x2, [x19, #280]
    2240:	mov	x1, x25
    2244:	mov	x0, x19
    2248:	blr	x3
    224c:	str	xzr, [x19, #256]
    2250:	ldr	x0, [x19, #320]
    2254:	add	x0, x0, #0x1
    2258:	str	x0, [x19, #320]
    225c:	b	2204 <d_print_comp_inner+0x1520>
    2260:	ldr	x2, [x22, #8]
    2264:	mov	w1, w20
    2268:	mov	x0, x19
    226c:	bl	4fe0 <d_print_comp>
    2270:	ldp	x21, x22, [sp, #32]
    2274:	ldp	x23, x24, [sp, #48]
    2278:	ldp	x25, x26, [sp, #64]
    227c:	b	4ea0 <d_print_comp_inner+0x41bc>
    2280:	adrp	x21, 0 <is_fnqual_component_type>
    2284:	add	x21, x21, #0x0
    2288:	add	x24, x21, #0x11
    228c:	mov	x25, #0xff                  	// #255
    2290:	b	22b4 <d_print_comp_inner+0x15d0>
    2294:	ldr	x0, [x19, #256]
    2298:	add	x1, x0, #0x1
    229c:	str	x1, [x19, #256]
    22a0:	strb	w23, [x19, x0]
    22a4:	strb	w23, [x19, #264]
    22a8:	add	x21, x21, #0x1
    22ac:	cmp	x21, x24
    22b0:	b.eq	22f0 <d_print_comp_inner+0x160c>  // b.none
    22b4:	ldrb	w23, [x21]
    22b8:	ldr	x0, [x19, #256]
    22bc:	cmp	x0, #0xff
    22c0:	b.ne	2294 <d_print_comp_inner+0x15b0>  // b.any
    22c4:	strb	wzr, [x19, #255]
    22c8:	ldr	x3, [x19, #272]
    22cc:	ldr	x2, [x19, #280]
    22d0:	mov	x1, x25
    22d4:	mov	x0, x19
    22d8:	blr	x3
    22dc:	str	xzr, [x19, #256]
    22e0:	ldr	x0, [x19, #320]
    22e4:	add	x0, x0, #0x1
    22e8:	str	x0, [x19, #320]
    22ec:	b	2294 <d_print_comp_inner+0x15b0>
    22f0:	ldr	x2, [x22, #8]
    22f4:	mov	w1, w20
    22f8:	mov	x0, x19
    22fc:	bl	4fe0 <d_print_comp>
    2300:	ldp	x21, x22, [sp, #32]
    2304:	ldp	x23, x24, [sp, #48]
    2308:	ldp	x25, x26, [sp, #64]
    230c:	b	4ea0 <d_print_comp_inner+0x41bc>
    2310:	adrp	x21, 0 <is_fnqual_component_type>
    2314:	add	x21, x21, #0x0
    2318:	add	x24, x21, #0x16
    231c:	mov	x25, #0xff                  	// #255
    2320:	b	2344 <d_print_comp_inner+0x1660>
    2324:	ldr	x0, [x19, #256]
    2328:	add	x1, x0, #0x1
    232c:	str	x1, [x19, #256]
    2330:	strb	w23, [x19, x0]
    2334:	strb	w23, [x19, #264]
    2338:	add	x21, x21, #0x1
    233c:	cmp	x21, x24
    2340:	b.eq	2380 <d_print_comp_inner+0x169c>  // b.none
    2344:	ldrb	w23, [x21]
    2348:	ldr	x0, [x19, #256]
    234c:	cmp	x0, #0xff
    2350:	b.ne	2324 <d_print_comp_inner+0x1640>  // b.any
    2354:	strb	wzr, [x19, #255]
    2358:	ldr	x3, [x19, #272]
    235c:	ldr	x2, [x19, #280]
    2360:	mov	x1, x25
    2364:	mov	x0, x19
    2368:	blr	x3
    236c:	str	xzr, [x19, #256]
    2370:	ldr	x0, [x19, #320]
    2374:	add	x0, x0, #0x1
    2378:	str	x0, [x19, #320]
    237c:	b	2324 <d_print_comp_inner+0x1640>
    2380:	ldr	x2, [x22, #8]
    2384:	mov	w1, w20
    2388:	mov	x0, x19
    238c:	bl	4fe0 <d_print_comp>
    2390:	ldp	x21, x22, [sp, #32]
    2394:	ldp	x23, x24, [sp, #48]
    2398:	ldp	x25, x26, [sp, #64]
    239c:	b	4ea0 <d_print_comp_inner+0x41bc>
    23a0:	adrp	x21, 0 <is_fnqual_component_type>
    23a4:	add	x21, x21, #0x0
    23a8:	add	x24, x21, #0x1a
    23ac:	mov	x25, #0xff                  	// #255
    23b0:	b	23d4 <d_print_comp_inner+0x16f0>
    23b4:	ldr	x0, [x19, #256]
    23b8:	add	x1, x0, #0x1
    23bc:	str	x1, [x19, #256]
    23c0:	strb	w23, [x19, x0]
    23c4:	strb	w23, [x19, #264]
    23c8:	add	x21, x21, #0x1
    23cc:	cmp	x21, x24
    23d0:	b.eq	2410 <d_print_comp_inner+0x172c>  // b.none
    23d4:	ldrb	w23, [x21]
    23d8:	ldr	x0, [x19, #256]
    23dc:	cmp	x0, #0xff
    23e0:	b.ne	23b4 <d_print_comp_inner+0x16d0>  // b.any
    23e4:	strb	wzr, [x19, #255]
    23e8:	ldr	x3, [x19, #272]
    23ec:	ldr	x2, [x19, #280]
    23f0:	mov	x1, x25
    23f4:	mov	x0, x19
    23f8:	blr	x3
    23fc:	str	xzr, [x19, #256]
    2400:	ldr	x0, [x19, #320]
    2404:	add	x0, x0, #0x1
    2408:	str	x0, [x19, #320]
    240c:	b	23b4 <d_print_comp_inner+0x16d0>
    2410:	ldr	x2, [x22, #8]
    2414:	mov	w1, w20
    2418:	mov	x0, x19
    241c:	bl	4fe0 <d_print_comp>
    2420:	ldp	x21, x22, [sp, #32]
    2424:	ldp	x23, x24, [sp, #48]
    2428:	ldp	x25, x26, [sp, #64]
    242c:	b	4ea0 <d_print_comp_inner+0x41bc>
    2430:	ldr	x1, [x22, #8]
    2434:	ldrsw	x0, [x22, #16]
    2438:	cbz	x0, 4edc <d_print_comp_inner+0x41f8>
    243c:	mov	x20, x1
    2440:	add	x22, x1, x0
    2444:	mov	x23, #0xff                  	// #255
    2448:	b	246c <d_print_comp_inner+0x1788>
    244c:	ldr	x0, [x19, #256]
    2450:	add	x1, x0, #0x1
    2454:	str	x1, [x19, #256]
    2458:	strb	w21, [x19, x0]
    245c:	strb	w21, [x19, #264]
    2460:	add	x20, x20, #0x1
    2464:	cmp	x20, x22
    2468:	b.eq	24a8 <d_print_comp_inner+0x17c4>  // b.none
    246c:	ldrb	w21, [x20]
    2470:	ldr	x0, [x19, #256]
    2474:	cmp	x0, #0xff
    2478:	b.ne	244c <d_print_comp_inner+0x1768>  // b.any
    247c:	strb	wzr, [x19, #255]
    2480:	ldr	x3, [x19, #272]
    2484:	ldr	x2, [x19, #280]
    2488:	mov	x1, x23
    248c:	mov	x0, x19
    2490:	blr	x3
    2494:	str	xzr, [x19, #256]
    2498:	ldr	x0, [x19, #320]
    249c:	add	x0, x0, #0x1
    24a0:	str	x0, [x19, #320]
    24a4:	b	244c <d_print_comp_inner+0x1768>
    24a8:	ldp	x21, x22, [sp, #32]
    24ac:	ldp	x23, x24, [sp, #48]
    24b0:	ldp	x25, x26, [sp, #64]
    24b4:	b	4ea0 <d_print_comp_inner+0x41bc>
    24b8:	ldr	x1, [x19, #296]
    24bc:	cbnz	x1, 24cc <d_print_comp_inner+0x17e8>
    24c0:	b	4e1c <d_print_comp_inner+0x4138>
    24c4:	ldr	x1, [x1]
    24c8:	cbz	x1, 4e1c <d_print_comp_inner+0x4138>
    24cc:	ldr	w2, [x1, #16]
    24d0:	cbnz	w2, 24c4 <d_print_comp_inner+0x17e0>
    24d4:	ldr	x3, [x1, #8]
    24d8:	ldr	w3, [x3]
    24dc:	sub	w4, w3, #0x19
    24e0:	cmp	w4, #0x2
    24e4:	b.hi	4e10 <d_print_comp_inner+0x412c>  // b.pmore
    24e8:	cmp	w0, w3
    24ec:	b.ne	24c4 <d_print_comp_inner+0x17e0>  // b.any
    24f0:	ldr	x2, [x22, #8]
    24f4:	mov	w1, w20
    24f8:	mov	x0, x19
    24fc:	bl	4fe0 <d_print_comp>
    2500:	ldp	x21, x22, [sp, #32]
    2504:	ldp	x23, x24, [sp, #48]
    2508:	ldp	x25, x26, [sp, #64]
    250c:	b	4ea0 <d_print_comp_inner+0x41bc>
    2510:	ldr	x0, [x22, #8]
    2514:	ldr	w24, [x19, #312]
    2518:	cbnz	w24, 252c <d_print_comp_inner+0x1848>
    251c:	ldr	w1, [x0]
    2520:	mov	w21, w24
    2524:	cmp	w1, #0x5
    2528:	b.eq	2554 <d_print_comp_inner+0x1870>  // b.none
    252c:	ldr	w1, [x0]
    2530:	cmp	w1, #0x23
    2534:	b.eq	4e18 <d_print_comp_inner+0x4134>  // b.none
    2538:	ldr	w2, [x22]
    253c:	cmp	w1, w2
    2540:	b.eq	4e44 <d_print_comp_inner+0x4160>  // b.none
    2544:	cmp	w1, #0x24
    2548:	b.ne	4e1c <d_print_comp_inner+0x4138>  // b.any
    254c:	ldr	x2, [x0, #8]
    2550:	b	2690 <d_print_comp_inner+0x19ac>
    2554:	ldr	w5, [x19, #344]
    2558:	cmp	w5, #0x0
    255c:	b.le	258c <d_print_comp_inner+0x18a8>
    2560:	ldr	x1, [x19, #336]
    2564:	sub	w3, w5, #0x1
    2568:	add	x2, x1, #0x10
    256c:	add	x3, x2, x3, lsl #4
    2570:	mov	x4, x1
    2574:	ldr	x2, [x1]
    2578:	cmp	x0, x2
    257c:	b.eq	4e4c <d_print_comp_inner+0x4168>  // b.none
    2580:	add	x1, x1, #0x10
    2584:	cmp	x1, x3
    2588:	b.ne	2570 <d_print_comp_inner+0x188c>  // b.any
    258c:	ldr	w1, [x19, #348]
    2590:	cmp	w1, w5
    2594:	b.le	264c <d_print_comp_inner+0x1968>
    2598:	sbfiz	x3, x5, #4, #32
    259c:	ldr	x2, [x19, #336]
    25a0:	add	x1, x2, w5, sxtw #4
    25a4:	add	w5, w5, #0x1
    25a8:	str	w5, [x19, #344]
    25ac:	str	x0, [x2, x3]
    25b0:	add	x1, x1, #0x8
    25b4:	ldr	x2, [x19, #288]
    25b8:	cbz	x2, 25f4 <d_print_comp_inner+0x1910>
    25bc:	ldr	w4, [x19, #360]
    25c0:	ldr	w3, [x19, #364]
    25c4:	cmp	w4, w3
    25c8:	b.ge	2664 <d_print_comp_inner+0x1980>  // b.tcont
    25cc:	ldr	x3, [x19, #352]
    25d0:	add	x3, x3, w4, sxtw #4
    25d4:	add	w4, w4, #0x1
    25d8:	str	w4, [x19, #360]
    25dc:	ldr	x4, [x2, #8]
    25e0:	str	x4, [x3, #8]
    25e4:	str	x3, [x1]
    25e8:	mov	x1, x3
    25ec:	ldr	x2, [x2]
    25f0:	cbnz	x2, 25bc <d_print_comp_inner+0x18d8>
    25f4:	str	xzr, [x1]
    25f8:	ldr	w1, [x19, #304]
    25fc:	cbnz	w1, 267c <d_print_comp_inner+0x1998>
    2600:	mov	x1, x0
    2604:	mov	x0, x19
    2608:	bl	920 <d_lookup_template_argument>
    260c:	cbz	x0, 2634 <d_print_comp_inner+0x1950>
    2610:	mov	w21, w24
    2614:	ldr	w1, [x0]
    2618:	cmp	w1, #0x2f
    261c:	b.ne	252c <d_print_comp_inner+0x1848>  // b.any
    2620:	ldr	w1, [x19, #316]
    2624:	bl	8e8 <d_index_template_argument>
    2628:	cbnz	x0, 252c <d_print_comp_inner+0x1848>
    262c:	cbz	w21, 2634 <d_print_comp_inner+0x1950>
    2630:	str	x23, [x19, #288]
    2634:	mov	w0, #0x1                   	// #1
    2638:	str	w0, [x19, #304]
    263c:	ldp	x21, x22, [sp, #32]
    2640:	ldp	x23, x24, [sp, #48]
    2644:	ldp	x25, x26, [sp, #64]
    2648:	b	4ea0 <d_print_comp_inner+0x41bc>
    264c:	mov	w0, #0x1                   	// #1
    2650:	str	w0, [x19, #304]
    2654:	ldp	x21, x22, [sp, #32]
    2658:	ldp	x23, x24, [sp, #48]
    265c:	ldp	x25, x26, [sp, #64]
    2660:	b	4ea0 <d_print_comp_inner+0x41bc>
    2664:	mov	w0, #0x1                   	// #1
    2668:	str	w0, [x19, #304]
    266c:	ldp	x21, x22, [sp, #32]
    2670:	ldp	x23, x24, [sp, #48]
    2674:	ldp	x25, x26, [sp, #64]
    2678:	b	4ea0 <d_print_comp_inner+0x41bc>
    267c:	ldp	x21, x22, [sp, #32]
    2680:	ldp	x23, x24, [sp, #48]
    2684:	ldp	x25, x26, [sp, #64]
    2688:	b	4ea0 <d_print_comp_inner+0x41bc>
    268c:	mov	x2, #0x0                   	// #0
    2690:	ldr	x0, [x19, #296]
    2694:	str	x0, [sp, #128]
    2698:	add	x0, sp, #0x80
    269c:	str	x0, [x19, #296]
    26a0:	str	x22, [sp, #136]
    26a4:	str	wzr, [sp, #144]
    26a8:	ldr	x0, [x19, #288]
    26ac:	str	x0, [sp, #152]
    26b0:	cbz	x2, 4e3c <d_print_comp_inner+0x4158>
    26b4:	mov	w1, w20
    26b8:	mov	x0, x19
    26bc:	bl	4fe0 <d_print_comp>
    26c0:	ldr	w0, [sp, #144]
    26c4:	cbz	w0, 26e8 <d_print_comp_inner+0x1a04>
    26c8:	ldr	x0, [sp, #128]
    26cc:	str	x0, [x19, #296]
    26d0:	cbz	w21, 4eec <d_print_comp_inner+0x4208>
    26d4:	str	x23, [x19, #288]
    26d8:	ldp	x21, x22, [sp, #32]
    26dc:	ldp	x23, x24, [sp, #48]
    26e0:	ldp	x25, x26, [sp, #64]
    26e4:	b	4ea0 <d_print_comp_inner+0x41bc>
    26e8:	mov	x2, x22
    26ec:	mov	w1, w20
    26f0:	mov	x0, x19
    26f4:	bl	507c <d_print_mod>
    26f8:	b	26c8 <d_print_comp_inner+0x19e4>
    26fc:	tbnz	w20, #2, 278c <d_print_comp_inner+0x1aa8>
    2700:	ldr	x0, [x22, #8]
    2704:	ldr	x22, [x0]
    2708:	ldrsw	x0, [x0, #8]
    270c:	cbz	x0, 4efc <d_print_comp_inner+0x4218>
    2710:	mov	x20, x22
    2714:	add	x22, x22, x0
    2718:	mov	x23, #0xff                  	// #255
    271c:	b	2740 <d_print_comp_inner+0x1a5c>
    2720:	ldr	x0, [x19, #256]
    2724:	add	x1, x0, #0x1
    2728:	str	x1, [x19, #256]
    272c:	strb	w21, [x19, x0]
    2730:	strb	w21, [x19, #264]
    2734:	add	x20, x20, #0x1
    2738:	cmp	x20, x22
    273c:	b.eq	277c <d_print_comp_inner+0x1a98>  // b.none
    2740:	ldrb	w21, [x20]
    2744:	ldr	x0, [x19, #256]
    2748:	cmp	x0, #0xff
    274c:	b.ne	2720 <d_print_comp_inner+0x1a3c>  // b.any
    2750:	strb	wzr, [x19, #255]
    2754:	ldr	x3, [x19, #272]
    2758:	ldr	x2, [x19, #280]
    275c:	mov	x1, x23
    2760:	mov	x0, x19
    2764:	blr	x3
    2768:	str	xzr, [x19, #256]
    276c:	ldr	x0, [x19, #320]
    2770:	add	x0, x0, #0x1
    2774:	str	x0, [x19, #320]
    2778:	b	2720 <d_print_comp_inner+0x1a3c>
    277c:	ldp	x21, x22, [sp, #32]
    2780:	ldp	x23, x24, [sp, #48]
    2784:	ldp	x25, x26, [sp, #64]
    2788:	b	4ea0 <d_print_comp_inner+0x41bc>
    278c:	ldr	x0, [x22, #8]
    2790:	ldr	x22, [x0, #16]
    2794:	ldrsw	x0, [x0, #24]
    2798:	cbz	x0, 4f0c <d_print_comp_inner+0x4228>
    279c:	mov	x20, x22
    27a0:	add	x22, x22, x0
    27a4:	mov	x23, #0xff                  	// #255
    27a8:	b	27cc <d_print_comp_inner+0x1ae8>
    27ac:	ldr	x0, [x19, #256]
    27b0:	add	x1, x0, #0x1
    27b4:	str	x1, [x19, #256]
    27b8:	strb	w21, [x19, x0]
    27bc:	strb	w21, [x19, #264]
    27c0:	add	x20, x20, #0x1
    27c4:	cmp	x20, x22
    27c8:	b.eq	2808 <d_print_comp_inner+0x1b24>  // b.none
    27cc:	ldrb	w21, [x20]
    27d0:	ldr	x0, [x19, #256]
    27d4:	cmp	x0, #0xff
    27d8:	b.ne	27ac <d_print_comp_inner+0x1ac8>  // b.any
    27dc:	strb	wzr, [x19, #255]
    27e0:	ldr	x3, [x19, #272]
    27e4:	ldr	x2, [x19, #280]
    27e8:	mov	x1, x23
    27ec:	mov	x0, x19
    27f0:	blr	x3
    27f4:	str	xzr, [x19, #256]
    27f8:	ldr	x0, [x19, #320]
    27fc:	add	x0, x0, #0x1
    2800:	str	x0, [x19, #320]
    2804:	b	27ac <d_print_comp_inner+0x1ac8>
    2808:	ldp	x21, x22, [sp, #32]
    280c:	ldp	x23, x24, [sp, #48]
    2810:	ldp	x25, x26, [sp, #64]
    2814:	b	4ea0 <d_print_comp_inner+0x41bc>
    2818:	ldr	x2, [x22, #8]
    281c:	mov	w1, w20
    2820:	mov	x0, x19
    2824:	bl	4fe0 <d_print_comp>
    2828:	ldp	x21, x22, [sp, #32]
    282c:	ldp	x23, x24, [sp, #48]
    2830:	ldp	x25, x26, [sp, #64]
    2834:	b	4ea0 <d_print_comp_inner+0x41bc>
    2838:	and	w21, w20, #0x20
    283c:	tbnz	w20, #5, 2860 <d_print_comp_inner+0x1b7c>
    2840:	ldr	x0, [x22, #8]
    2844:	cbz	x0, 2934 <d_print_comp_inner+0x1c50>
    2848:	tbz	w20, #6, 289c <d_print_comp_inner+0x1bb8>
    284c:	cbz	w21, 2934 <d_print_comp_inner+0x1c50>
    2850:	ldp	x21, x22, [sp, #32]
    2854:	ldp	x23, x24, [sp, #48]
    2858:	ldp	x25, x26, [sp, #64]
    285c:	b	4ea0 <d_print_comp_inner+0x41bc>
    2860:	and	w23, w20, #0xffffff9f
    2864:	ldr	x3, [x19, #296]
    2868:	mov	x2, x22
    286c:	mov	w1, w23
    2870:	mov	x0, x19
    2874:	bl	5a48 <d_print_function_type>
    2878:	ldr	x2, [x22, #8]
    287c:	cbz	x2, 284c <d_print_comp_inner+0x1b68>
    2880:	mov	w1, w23
    2884:	mov	x0, x19
    2888:	bl	4fe0 <d_print_comp>
    288c:	ldp	x21, x22, [sp, #32]
    2890:	ldp	x23, x24, [sp, #48]
    2894:	ldp	x25, x26, [sp, #64]
    2898:	b	4ea0 <d_print_comp_inner+0x41bc>
    289c:	ldr	x0, [x19, #296]
    28a0:	str	x0, [sp, #128]
    28a4:	add	x0, sp, #0x80
    28a8:	str	x0, [x19, #296]
    28ac:	str	x22, [sp, #136]
    28b0:	str	wzr, [sp, #144]
    28b4:	ldr	x0, [x19, #288]
    28b8:	str	x0, [sp, #152]
    28bc:	ldr	x2, [x22, #8]
    28c0:	and	w1, w20, #0xffffff9f
    28c4:	mov	x0, x19
    28c8:	bl	4fe0 <d_print_comp>
    28cc:	ldr	x0, [sp, #128]
    28d0:	str	x0, [x19, #296]
    28d4:	ldr	w0, [sp, #144]
    28d8:	cbnz	w0, 4f1c <d_print_comp_inner+0x4238>
    28dc:	cbnz	w21, 284c <d_print_comp_inner+0x1b68>
    28e0:	ldr	x0, [x19, #256]
    28e4:	cmp	x0, #0xff
    28e8:	b.eq	2908 <d_print_comp_inner+0x1c24>  // b.none
    28ec:	ldr	x1, [x19, #256]
    28f0:	add	x0, x1, #0x1
    28f4:	str	x0, [x19, #256]
    28f8:	mov	w0, #0x20                  	// #32
    28fc:	strb	w0, [x19, x1]
    2900:	strb	w0, [x19, #264]
    2904:	b	284c <d_print_comp_inner+0x1b68>
    2908:	strb	wzr, [x19, #255]
    290c:	ldr	x3, [x19, #272]
    2910:	ldr	x2, [x19, #280]
    2914:	mov	x1, #0xff                  	// #255
    2918:	mov	x0, x19
    291c:	blr	x3
    2920:	str	xzr, [x19, #256]
    2924:	ldr	x0, [x19, #320]
    2928:	add	x0, x0, #0x1
    292c:	str	x0, [x19, #320]
    2930:	b	28ec <d_print_comp_inner+0x1c08>
    2934:	ldr	x3, [x19, #296]
    2938:	mov	x2, x22
    293c:	and	w1, w20, #0xffffff9f
    2940:	mov	x0, x19
    2944:	bl	5a48 <d_print_function_type>
    2948:	ldp	x21, x22, [sp, #32]
    294c:	ldp	x23, x24, [sp, #48]
    2950:	ldp	x25, x26, [sp, #64]
    2954:	b	4ea0 <d_print_comp_inner+0x41bc>
    2958:	ldr	x23, [x19, #296]
    295c:	str	x23, [sp, #128]
    2960:	add	x0, sp, #0x80
    2964:	str	x0, [x19, #296]
    2968:	str	x22, [sp, #136]
    296c:	str	wzr, [sp, #144]
    2970:	ldr	x0, [x19, #288]
    2974:	str	x0, [sp, #152]
    2978:	mov	x0, x23
    297c:	mov	w21, #0x1                   	// #1
    2980:	add	x3, sp, #0x80
    2984:	mov	w6, w21
    2988:	cbnz	x23, 29d8 <d_print_comp_inner+0x1cf4>
    298c:	ldr	x2, [x22, #16]
    2990:	mov	w1, w20
    2994:	mov	x0, x19
    2998:	bl	4fe0 <d_print_comp>
    299c:	str	xzr, [x19, #296]
    29a0:	ldr	w0, [sp, #144]
    29a4:	cbz	w0, 2a7c <d_print_comp_inner+0x1d98>
    29a8:	ldp	x21, x22, [sp, #32]
    29ac:	ldp	x23, x24, [sp, #48]
    29b0:	ldp	x25, x26, [sp, #64]
    29b4:	b	4ea0 <d_print_comp_inner+0x41bc>
    29b8:	mov	w0, #0x1                   	// #1
    29bc:	str	w0, [x19, #304]
    29c0:	ldp	x21, x22, [sp, #32]
    29c4:	ldp	x23, x24, [sp, #48]
    29c8:	ldp	x25, x26, [sp, #64]
    29cc:	b	4ea0 <d_print_comp_inner+0x41bc>
    29d0:	ldr	x0, [x0]
    29d4:	cbz	x0, 2a2c <d_print_comp_inner+0x1d48>
    29d8:	ldr	x1, [x0, #8]
    29dc:	ldr	w1, [x1]
    29e0:	sub	w1, w1, #0x19
    29e4:	cmp	w1, #0x2
    29e8:	b.hi	2a2c <d_print_comp_inner+0x1d48>  // b.pmore
    29ec:	ldr	w1, [x0, #16]
    29f0:	cbnz	w1, 29d0 <d_print_comp_inner+0x1cec>
    29f4:	cmp	w21, #0x3
    29f8:	b.hi	29b8 <d_print_comp_inner+0x1cd4>  // b.pmore
    29fc:	ubfiz	x2, x21, #5, #32
    2a00:	add	x1, x3, x2
    2a04:	ldp	x4, x5, [x0]
    2a08:	stp	x4, x5, [x1]
    2a0c:	ldp	x4, x5, [x0, #16]
    2a10:	stp	x4, x5, [x1, #16]
    2a14:	ldr	x4, [x19, #296]
    2a18:	str	x4, [x3, x2]
    2a1c:	str	x1, [x19, #296]
    2a20:	str	w6, [x0, #16]
    2a24:	add	w21, w21, #0x1
    2a28:	b	29d0 <d_print_comp_inner+0x1cec>
    2a2c:	ldr	x2, [x22, #16]
    2a30:	mov	w1, w20
    2a34:	mov	x0, x19
    2a38:	bl	4fe0 <d_print_comp>
    2a3c:	str	x23, [x19, #296]
    2a40:	ldr	w0, [sp, #144]
    2a44:	cbnz	w0, 4f2c <d_print_comp_inner+0x4248>
    2a48:	cmp	w21, #0x1
    2a4c:	b.ls	2a7c <d_print_comp_inner+0x1d98>  // b.plast
    2a50:	sub	w23, w21, #0x1
    2a54:	add	x0, sp, #0x80
    2a58:	add	x23, x0, x23, lsl #5
    2a5c:	sub	w21, w21, #0x1
    2a60:	ldr	x2, [x23, #8]
    2a64:	mov	w1, w20
    2a68:	mov	x0, x19
    2a6c:	bl	507c <d_print_mod>
    2a70:	sub	x23, x23, #0x20
    2a74:	cmp	w21, #0x1
    2a78:	b.ne	2a5c <d_print_comp_inner+0x1d78>  // b.any
    2a7c:	ldr	x3, [x19, #296]
    2a80:	mov	x2, x22
    2a84:	mov	w1, w20
    2a88:	mov	x0, x19
    2a8c:	bl	60a4 <d_print_array_type>
    2a90:	ldp	x21, x22, [sp, #32]
    2a94:	ldp	x23, x24, [sp, #48]
    2a98:	ldp	x25, x26, [sp, #64]
    2a9c:	b	4ea0 <d_print_comp_inner+0x41bc>
    2aa0:	ldr	x0, [x19, #296]
    2aa4:	str	x0, [sp, #128]
    2aa8:	add	x0, sp, #0x80
    2aac:	str	x0, [x19, #296]
    2ab0:	str	x22, [sp, #136]
    2ab4:	str	wzr, [sp, #144]
    2ab8:	ldr	x0, [x19, #288]
    2abc:	str	x0, [sp, #152]
    2ac0:	ldr	x2, [x22, #16]
    2ac4:	mov	w1, w20
    2ac8:	mov	x0, x19
    2acc:	bl	4fe0 <d_print_comp>
    2ad0:	ldr	w0, [sp, #144]
    2ad4:	cbz	w0, 2af0 <d_print_comp_inner+0x1e0c>
    2ad8:	ldr	x0, [sp, #128]
    2adc:	str	x0, [x19, #296]
    2ae0:	ldp	x21, x22, [sp, #32]
    2ae4:	ldp	x23, x24, [sp, #48]
    2ae8:	ldp	x25, x26, [sp, #64]
    2aec:	b	4ea0 <d_print_comp_inner+0x41bc>
    2af0:	mov	x2, x22
    2af4:	mov	w1, w20
    2af8:	mov	x0, x19
    2afc:	bl	507c <d_print_mod>
    2b00:	b	2ad8 <d_print_comp_inner+0x1df4>
    2b04:	ldrsh	w0, [x22, #18]
    2b08:	cbnz	w0, 2b74 <d_print_comp_inner+0x1e90>
    2b0c:	ldr	x2, [x22, #8]
    2b10:	adrp	x0, 0 <is_fnqual_component_type>
    2b14:	add	x0, x0, #0x0
    2b18:	ldr	x1, [x2, #8]
    2b1c:	add	x0, x0, #0x100
    2b20:	cmp	x1, x0
    2b24:	b.eq	2b58 <d_print_comp_inner+0x1e74>  // b.none
    2b28:	mov	w1, w20
    2b2c:	mov	x0, x19
    2b30:	bl	4fe0 <d_print_comp>
    2b34:	ldr	x0, [x19, #256]
    2b38:	cmp	x0, #0xff
    2b3c:	b.eq	2be4 <d_print_comp_inner+0x1f00>  // b.none
    2b40:	ldr	x1, [x19, #256]
    2b44:	add	x0, x1, #0x1
    2b48:	str	x0, [x19, #256]
    2b4c:	mov	w0, #0x20                  	// #32
    2b50:	strb	w0, [x19, x1]
    2b54:	strb	w0, [x19, #264]
    2b58:	ldrsh	w0, [x22, #16]
    2b5c:	cbz	w0, 2c7c <d_print_comp_inner+0x1f98>
    2b60:	adrp	x20, 0 <is_fnqual_component_type>
    2b64:	add	x20, x20, #0x0
    2b68:	add	x22, x20, #0x6
    2b6c:	mov	x23, #0xff                  	// #255
    2b70:	b	2c30 <d_print_comp_inner+0x1f4c>
    2b74:	adrp	x21, 0 <is_fnqual_component_type>
    2b78:	add	x21, x21, #0x0
    2b7c:	add	x24, x21, #0x5
    2b80:	mov	x25, #0xff                  	// #255
    2b84:	b	2ba8 <d_print_comp_inner+0x1ec4>
    2b88:	ldr	x0, [x19, #256]
    2b8c:	add	x1, x0, #0x1
    2b90:	str	x1, [x19, #256]
    2b94:	strb	w23, [x19, x0]
    2b98:	strb	w23, [x19, #264]
    2b9c:	add	x21, x21, #0x1
    2ba0:	cmp	x21, x24
    2ba4:	b.eq	2b0c <d_print_comp_inner+0x1e28>  // b.none
    2ba8:	ldrb	w23, [x21]
    2bac:	ldr	x0, [x19, #256]
    2bb0:	cmp	x0, #0xff
    2bb4:	b.ne	2b88 <d_print_comp_inner+0x1ea4>  // b.any
    2bb8:	strb	wzr, [x19, #255]
    2bbc:	ldr	x3, [x19, #272]
    2bc0:	ldr	x2, [x19, #280]
    2bc4:	mov	x1, x25
    2bc8:	mov	x0, x19
    2bcc:	blr	x3
    2bd0:	str	xzr, [x19, #256]
    2bd4:	ldr	x0, [x19, #320]
    2bd8:	add	x0, x0, #0x1
    2bdc:	str	x0, [x19, #320]
    2be0:	b	2b88 <d_print_comp_inner+0x1ea4>
    2be4:	strb	wzr, [x19, #255]
    2be8:	ldr	x3, [x19, #272]
    2bec:	ldr	x2, [x19, #280]
    2bf0:	mov	x1, #0xff                  	// #255
    2bf4:	mov	x0, x19
    2bf8:	blr	x3
    2bfc:	str	xzr, [x19, #256]
    2c00:	ldr	x0, [x19, #320]
    2c04:	add	x0, x0, #0x1
    2c08:	str	x0, [x19, #320]
    2c0c:	b	2b40 <d_print_comp_inner+0x1e5c>
    2c10:	ldr	x0, [x19, #256]
    2c14:	add	x1, x0, #0x1
    2c18:	str	x1, [x19, #256]
    2c1c:	strb	w21, [x19, x0]
    2c20:	strb	w21, [x19, #264]
    2c24:	add	x20, x20, #0x1
    2c28:	cmp	x20, x22
    2c2c:	b.eq	2c6c <d_print_comp_inner+0x1f88>  // b.none
    2c30:	ldrb	w21, [x20]
    2c34:	ldr	x0, [x19, #256]
    2c38:	cmp	x0, #0xff
    2c3c:	b.ne	2c10 <d_print_comp_inner+0x1f2c>  // b.any
    2c40:	strb	wzr, [x19, #255]
    2c44:	ldr	x3, [x19, #272]
    2c48:	ldr	x2, [x19, #280]
    2c4c:	mov	x1, x23
    2c50:	mov	x0, x19
    2c54:	blr	x3
    2c58:	str	xzr, [x19, #256]
    2c5c:	ldr	x0, [x19, #320]
    2c60:	add	x0, x0, #0x1
    2c64:	str	x0, [x19, #320]
    2c68:	b	2c10 <d_print_comp_inner+0x1f2c>
    2c6c:	ldp	x21, x22, [sp, #32]
    2c70:	ldp	x23, x24, [sp, #48]
    2c74:	ldp	x25, x26, [sp, #64]
    2c78:	b	4ea0 <d_print_comp_inner+0x41bc>
    2c7c:	adrp	x20, 0 <is_fnqual_component_type>
    2c80:	add	x20, x20, #0x0
    2c84:	add	x22, x20, #0x6
    2c88:	mov	x23, #0xff                  	// #255
    2c8c:	b	2cb0 <d_print_comp_inner+0x1fcc>
    2c90:	ldr	x0, [x19, #256]
    2c94:	add	x1, x0, #0x1
    2c98:	str	x1, [x19, #256]
    2c9c:	strb	w21, [x19, x0]
    2ca0:	strb	w21, [x19, #264]
    2ca4:	add	x20, x20, #0x1
    2ca8:	cmp	x20, x22
    2cac:	b.eq	2cec <d_print_comp_inner+0x2008>  // b.none
    2cb0:	ldrb	w21, [x20]
    2cb4:	ldr	x0, [x19, #256]
    2cb8:	cmp	x0, #0xff
    2cbc:	b.ne	2c90 <d_print_comp_inner+0x1fac>  // b.any
    2cc0:	strb	wzr, [x19, #255]
    2cc4:	ldr	x3, [x19, #272]
    2cc8:	ldr	x2, [x19, #280]
    2ccc:	mov	x1, x23
    2cd0:	mov	x0, x19
    2cd4:	blr	x3
    2cd8:	str	xzr, [x19, #256]
    2cdc:	ldr	x0, [x19, #320]
    2ce0:	add	x0, x0, #0x1
    2ce4:	str	x0, [x19, #320]
    2ce8:	b	2c90 <d_print_comp_inner+0x1fac>
    2cec:	ldp	x21, x22, [sp, #32]
    2cf0:	ldp	x23, x24, [sp, #48]
    2cf4:	ldp	x25, x26, [sp, #64]
    2cf8:	b	4ea0 <d_print_comp_inner+0x41bc>
    2cfc:	ldr	x2, [x22, #8]
    2d00:	cbz	x2, 2d10 <d_print_comp_inner+0x202c>
    2d04:	mov	w1, w20
    2d08:	mov	x0, x19
    2d0c:	bl	4fe0 <d_print_comp>
    2d10:	ldr	x0, [x22, #16]
    2d14:	cbz	x0, 4f3c <d_print_comp_inner+0x4258>
    2d18:	ldr	x1, [x19, #256]
    2d1c:	cmp	x1, #0xfd
    2d20:	b.ls	2d48 <d_print_comp_inner+0x2064>  // b.plast
    2d24:	strb	wzr, [x19, x1]
    2d28:	ldr	x3, [x19, #272]
    2d2c:	ldr	x2, [x19, #280]
    2d30:	mov	x0, x19
    2d34:	blr	x3
    2d38:	str	xzr, [x19, #256]
    2d3c:	ldr	x0, [x19, #320]
    2d40:	add	x0, x0, #0x1
    2d44:	str	x0, [x19, #320]
    2d48:	adrp	x21, 0 <is_fnqual_component_type>
    2d4c:	add	x21, x21, #0x0
    2d50:	add	x25, x21, #0x2
    2d54:	mov	x26, #0xff                  	// #255
    2d58:	b	2d7c <d_print_comp_inner+0x2098>
    2d5c:	ldr	x0, [x19, #256]
    2d60:	add	x24, x0, #0x1
    2d64:	str	x24, [x19, #256]
    2d68:	strb	w23, [x19, x0]
    2d6c:	strb	w23, [x19, #264]
    2d70:	add	x21, x21, #0x1
    2d74:	cmp	x21, x25
    2d78:	b.eq	2db8 <d_print_comp_inner+0x20d4>  // b.none
    2d7c:	ldrb	w23, [x21]
    2d80:	ldr	x0, [x19, #256]
    2d84:	cmp	x0, #0xff
    2d88:	b.ne	2d5c <d_print_comp_inner+0x2078>  // b.any
    2d8c:	strb	wzr, [x19, #255]
    2d90:	ldr	x3, [x19, #272]
    2d94:	ldr	x2, [x19, #280]
    2d98:	mov	x1, x26
    2d9c:	mov	x0, x19
    2da0:	blr	x3
    2da4:	str	xzr, [x19, #256]
    2da8:	ldr	x0, [x19, #320]
    2dac:	add	x0, x0, #0x1
    2db0:	str	x0, [x19, #320]
    2db4:	b	2d5c <d_print_comp_inner+0x2078>
    2db8:	ldr	x21, [x19, #320]
    2dbc:	ldr	x2, [x22, #16]
    2dc0:	mov	w1, w20
    2dc4:	mov	x0, x19
    2dc8:	bl	4fe0 <d_print_comp>
    2dcc:	ldr	x0, [x19, #320]
    2dd0:	cmp	x0, x21
    2dd4:	b.eq	2de8 <d_print_comp_inner+0x2104>  // b.none
    2dd8:	ldp	x21, x22, [sp, #32]
    2ddc:	ldp	x23, x24, [sp, #48]
    2de0:	ldp	x25, x26, [sp, #64]
    2de4:	b	4ea0 <d_print_comp_inner+0x41bc>
    2de8:	ldr	x0, [x19, #256]
    2dec:	cmp	x0, x24
    2df0:	b.eq	2e04 <d_print_comp_inner+0x2120>  // b.none
    2df4:	ldp	x21, x22, [sp, #32]
    2df8:	ldp	x23, x24, [sp, #48]
    2dfc:	ldp	x25, x26, [sp, #64]
    2e00:	b	4ea0 <d_print_comp_inner+0x41bc>
    2e04:	sub	x0, x0, #0x2
    2e08:	str	x0, [x19, #256]
    2e0c:	ldp	x21, x22, [sp, #32]
    2e10:	ldp	x23, x24, [sp, #48]
    2e14:	ldp	x25, x26, [sp, #64]
    2e18:	b	4ea0 <d_print_comp_inner+0x41bc>
    2e1c:	ldr	x2, [x22, #8]
    2e20:	ldr	x21, [x22, #16]
    2e24:	cbz	x2, 2e34 <d_print_comp_inner+0x2150>
    2e28:	mov	w1, w20
    2e2c:	mov	x0, x19
    2e30:	bl	4fe0 <d_print_comp>
    2e34:	ldr	x0, [x19, #256]
    2e38:	cmp	x0, #0xff
    2e3c:	b.eq	2e9c <d_print_comp_inner+0x21b8>  // b.none
    2e40:	ldr	x1, [x19, #256]
    2e44:	add	x0, x1, #0x1
    2e48:	str	x0, [x19, #256]
    2e4c:	mov	w0, #0x7b                  	// #123
    2e50:	strb	w0, [x19, x1]
    2e54:	strb	w0, [x19, #264]
    2e58:	mov	x2, x21
    2e5c:	mov	w1, w20
    2e60:	mov	x0, x19
    2e64:	bl	4fe0 <d_print_comp>
    2e68:	ldr	x0, [x19, #256]
    2e6c:	cmp	x0, #0xff
    2e70:	b.eq	2ec8 <d_print_comp_inner+0x21e4>  // b.none
    2e74:	ldr	x1, [x19, #256]
    2e78:	add	x0, x1, #0x1
    2e7c:	str	x0, [x19, #256]
    2e80:	mov	w0, #0x7d                  	// #125
    2e84:	strb	w0, [x19, x1]
    2e88:	strb	w0, [x19, #264]
    2e8c:	ldp	x21, x22, [sp, #32]
    2e90:	ldp	x23, x24, [sp, #48]
    2e94:	ldp	x25, x26, [sp, #64]
    2e98:	b	4ea0 <d_print_comp_inner+0x41bc>
    2e9c:	strb	wzr, [x19, #255]
    2ea0:	ldr	x3, [x19, #272]
    2ea4:	ldr	x2, [x19, #280]
    2ea8:	mov	x1, #0xff                  	// #255
    2eac:	mov	x0, x19
    2eb0:	blr	x3
    2eb4:	str	xzr, [x19, #256]
    2eb8:	ldr	x0, [x19, #320]
    2ebc:	add	x0, x0, #0x1
    2ec0:	str	x0, [x19, #320]
    2ec4:	b	2e40 <d_print_comp_inner+0x215c>
    2ec8:	strb	wzr, [x19, #255]
    2ecc:	ldr	x3, [x19, #272]
    2ed0:	ldr	x2, [x19, #280]
    2ed4:	mov	x1, #0xff                  	// #255
    2ed8:	mov	x0, x19
    2edc:	blr	x3
    2ee0:	str	xzr, [x19, #256]
    2ee4:	ldr	x0, [x19, #320]
    2ee8:	add	x0, x0, #0x1
    2eec:	str	x0, [x19, #320]
    2ef0:	b	2e74 <d_print_comp_inner+0x2190>
    2ef4:	ldr	x24, [x22, #8]
    2ef8:	ldr	w23, [x24, #16]
    2efc:	adrp	x20, 0 <is_fnqual_component_type>
    2f00:	add	x20, x20, #0x0
    2f04:	add	x22, x20, #0x8
    2f08:	mov	x25, #0xff                  	// #255
    2f0c:	b	2f30 <d_print_comp_inner+0x224c>
    2f10:	ldr	x0, [x19, #256]
    2f14:	add	x1, x0, #0x1
    2f18:	str	x1, [x19, #256]
    2f1c:	strb	w21, [x19, x0]
    2f20:	strb	w21, [x19, #264]
    2f24:	add	x20, x20, #0x1
    2f28:	cmp	x20, x22
    2f2c:	b.eq	2f6c <d_print_comp_inner+0x2288>  // b.none
    2f30:	ldrb	w21, [x20]
    2f34:	ldr	x0, [x19, #256]
    2f38:	cmp	x0, #0xff
    2f3c:	b.ne	2f10 <d_print_comp_inner+0x222c>  // b.any
    2f40:	strb	wzr, [x19, #255]
    2f44:	ldr	x3, [x19, #272]
    2f48:	ldr	x2, [x19, #280]
    2f4c:	mov	x1, x25
    2f50:	mov	x0, x19
    2f54:	blr	x3
    2f58:	str	xzr, [x19, #256]
    2f5c:	ldr	x0, [x19, #320]
    2f60:	add	x0, x0, #0x1
    2f64:	str	x0, [x19, #320]
    2f68:	b	2f10 <d_print_comp_inner+0x222c>
    2f6c:	ldr	x0, [x24, #8]
    2f70:	ldrb	w0, [x0]
    2f74:	sub	w0, w0, #0x61
    2f78:	and	w0, w0, #0xff
    2f7c:	cmp	w0, #0x19
    2f80:	b.hi	2fa4 <d_print_comp_inner+0x22c0>  // b.pmore
    2f84:	cmp	x1, #0xff
    2f88:	b.eq	2fd4 <d_print_comp_inner+0x22f0>  // b.none
    2f8c:	ldr	x1, [x19, #256]
    2f90:	add	x0, x1, #0x1
    2f94:	str	x0, [x19, #256]
    2f98:	mov	w0, #0x20                  	// #32
    2f9c:	strb	w0, [x19, x1]
    2fa0:	strb	w0, [x19, #264]
    2fa4:	ldr	x22, [x24, #8]
    2fa8:	add	x0, x22, w23, sxtw
    2fac:	ldurb	w0, [x0, #-1]
    2fb0:	cmp	w0, #0x20
    2fb4:	cset	w0, eq  // eq = none
    2fb8:	sub	w23, w23, w0
    2fbc:	sxtw	x0, w23
    2fc0:	cbz	w23, 4f4c <d_print_comp_inner+0x4268>
    2fc4:	mov	x20, x22
    2fc8:	add	x22, x22, x0
    2fcc:	mov	x23, #0xff                  	// #255
    2fd0:	b	301c <d_print_comp_inner+0x2338>
    2fd4:	strb	wzr, [x19, #255]
    2fd8:	ldr	x3, [x19, #272]
    2fdc:	ldr	x2, [x19, #280]
    2fe0:	mov	x0, x19
    2fe4:	blr	x3
    2fe8:	str	xzr, [x19, #256]
    2fec:	ldr	x0, [x19, #320]
    2ff0:	add	x0, x0, #0x1
    2ff4:	str	x0, [x19, #320]
    2ff8:	b	2f8c <d_print_comp_inner+0x22a8>
    2ffc:	ldr	x0, [x19, #256]
    3000:	add	x1, x0, #0x1
    3004:	str	x1, [x19, #256]
    3008:	strb	w21, [x19, x0]
    300c:	strb	w21, [x19, #264]
    3010:	add	x20, x20, #0x1
    3014:	cmp	x20, x22
    3018:	b.eq	3058 <d_print_comp_inner+0x2374>  // b.none
    301c:	ldrb	w21, [x20]
    3020:	ldr	x0, [x19, #256]
    3024:	cmp	x0, #0xff
    3028:	b.ne	2ffc <d_print_comp_inner+0x2318>  // b.any
    302c:	strb	wzr, [x19, #255]
    3030:	ldr	x3, [x19, #272]
    3034:	ldr	x2, [x19, #280]
    3038:	mov	x1, x23
    303c:	mov	x0, x19
    3040:	blr	x3
    3044:	str	xzr, [x19, #256]
    3048:	ldr	x0, [x19, #320]
    304c:	add	x0, x0, #0x1
    3050:	str	x0, [x19, #320]
    3054:	b	2ffc <d_print_comp_inner+0x2318>
    3058:	ldp	x21, x22, [sp, #32]
    305c:	ldp	x23, x24, [sp, #48]
    3060:	ldp	x25, x26, [sp, #64]
    3064:	b	4ea0 <d_print_comp_inner+0x41bc>
    3068:	adrp	x21, 0 <is_fnqual_component_type>
    306c:	add	x21, x21, #0x0
    3070:	add	x24, x21, #0x9
    3074:	mov	x25, #0xff                  	// #255
    3078:	b	309c <d_print_comp_inner+0x23b8>
    307c:	ldr	x0, [x19, #256]
    3080:	add	x1, x0, #0x1
    3084:	str	x1, [x19, #256]
    3088:	strb	w23, [x19, x0]
    308c:	strb	w23, [x19, #264]
    3090:	add	x21, x21, #0x1
    3094:	cmp	x21, x24
    3098:	b.eq	30d8 <d_print_comp_inner+0x23f4>  // b.none
    309c:	ldrb	w23, [x21]
    30a0:	ldr	x0, [x19, #256]
    30a4:	cmp	x0, #0xff
    30a8:	b.ne	307c <d_print_comp_inner+0x2398>  // b.any
    30ac:	strb	wzr, [x19, #255]
    30b0:	ldr	x3, [x19, #272]
    30b4:	ldr	x2, [x19, #280]
    30b8:	mov	x1, x25
    30bc:	mov	x0, x19
    30c0:	blr	x3
    30c4:	str	xzr, [x19, #256]
    30c8:	ldr	x0, [x19, #320]
    30cc:	add	x0, x0, #0x1
    30d0:	str	x0, [x19, #320]
    30d4:	b	307c <d_print_comp_inner+0x2398>
    30d8:	ldr	x2, [x22, #16]
    30dc:	mov	w1, w20
    30e0:	mov	x0, x19
    30e4:	bl	4fe0 <d_print_comp>
    30e8:	ldp	x21, x22, [sp, #32]
    30ec:	ldp	x23, x24, [sp, #48]
    30f0:	ldp	x25, x26, [sp, #64]
    30f4:	b	4ea0 <d_print_comp_inner+0x41bc>
    30f8:	adrp	x21, 0 <is_fnqual_component_type>
    30fc:	add	x21, x21, #0x0
    3100:	add	x24, x21, #0x9
    3104:	mov	x25, #0xff                  	// #255
    3108:	b	312c <d_print_comp_inner+0x2448>
    310c:	ldr	x0, [x19, #256]
    3110:	add	x1, x0, #0x1
    3114:	str	x1, [x19, #256]
    3118:	strb	w23, [x19, x0]
    311c:	strb	w23, [x19, #264]
    3120:	add	x21, x21, #0x1
    3124:	cmp	x21, x24
    3128:	b.eq	3168 <d_print_comp_inner+0x2484>  // b.none
    312c:	ldrb	w23, [x21]
    3130:	ldr	x0, [x19, #256]
    3134:	cmp	x0, #0xff
    3138:	b.ne	310c <d_print_comp_inner+0x2428>  // b.any
    313c:	strb	wzr, [x19, #255]
    3140:	ldr	x3, [x19, #272]
    3144:	ldr	x2, [x19, #280]
    3148:	mov	x1, x25
    314c:	mov	x0, x19
    3150:	blr	x3
    3154:	str	xzr, [x19, #256]
    3158:	ldr	x0, [x19, #320]
    315c:	add	x0, x0, #0x1
    3160:	str	x0, [x19, #320]
    3164:	b	310c <d_print_comp_inner+0x2428>
    3168:	ldr	x0, [x19, #368]
    316c:	cbz	x0, 3184 <d_print_comp_inner+0x24a0>
    3170:	ldr	x1, [x19, #288]
    3174:	str	x1, [sp, #128]
    3178:	add	x1, sp, #0x80
    317c:	str	x1, [x19, #288]
    3180:	str	x0, [sp, #136]
    3184:	ldr	x2, [x22, #8]
    3188:	ldr	w0, [x2]
    318c:	cmp	w0, #0x4
    3190:	b.eq	31c0 <d_print_comp_inner+0x24dc>  // b.none
    3194:	mov	w1, w20
    3198:	mov	x0, x19
    319c:	bl	4fe0 <d_print_comp>
    31a0:	ldr	x0, [x19, #368]
    31a4:	cbz	x0, 4f5c <d_print_comp_inner+0x4278>
    31a8:	ldr	x0, [sp, #128]
    31ac:	str	x0, [x19, #288]
    31b0:	ldp	x21, x22, [sp, #32]
    31b4:	ldp	x23, x24, [sp, #48]
    31b8:	ldp	x25, x26, [sp, #64]
    31bc:	b	4ea0 <d_print_comp_inner+0x41bc>
    31c0:	ldr	x2, [x2, #8]
    31c4:	mov	w1, w20
    31c8:	mov	x0, x19
    31cc:	bl	4fe0 <d_print_comp>
    31d0:	ldr	x0, [x19, #368]
    31d4:	cbz	x0, 31e0 <d_print_comp_inner+0x24fc>
    31d8:	ldr	x0, [sp, #128]
    31dc:	str	x0, [x19, #288]
    31e0:	ldrb	w0, [x19, #264]
    31e4:	cmp	w0, #0x3c
    31e8:	b.eq	3264 <d_print_comp_inner+0x2580>  // b.none
    31ec:	ldr	x0, [x19, #256]
    31f0:	cmp	x0, #0xff
    31f4:	b.eq	32b8 <d_print_comp_inner+0x25d4>  // b.none
    31f8:	ldr	x1, [x19, #256]
    31fc:	add	x0, x1, #0x1
    3200:	str	x0, [x19, #256]
    3204:	mov	w0, #0x3c                  	// #60
    3208:	strb	w0, [x19, x1]
    320c:	strb	w0, [x19, #264]
    3210:	ldr	x0, [x22, #8]
    3214:	ldr	x2, [x0, #16]
    3218:	mov	w1, w20
    321c:	mov	x0, x19
    3220:	bl	4fe0 <d_print_comp>
    3224:	ldrb	w0, [x19, #264]
    3228:	cmp	w0, #0x3e
    322c:	b.eq	32e4 <d_print_comp_inner+0x2600>  // b.none
    3230:	ldr	x0, [x19, #256]
    3234:	cmp	x0, #0xff
    3238:	b.eq	3338 <d_print_comp_inner+0x2654>  // b.none
    323c:	ldr	x1, [x19, #256]
    3240:	add	x0, x1, #0x1
    3244:	str	x0, [x19, #256]
    3248:	mov	w0, #0x3e                  	// #62
    324c:	strb	w0, [x19, x1]
    3250:	strb	w0, [x19, #264]
    3254:	ldp	x21, x22, [sp, #32]
    3258:	ldp	x23, x24, [sp, #48]
    325c:	ldp	x25, x26, [sp, #64]
    3260:	b	4ea0 <d_print_comp_inner+0x41bc>
    3264:	ldr	x0, [x19, #256]
    3268:	cmp	x0, #0xff
    326c:	b.eq	328c <d_print_comp_inner+0x25a8>  // b.none
    3270:	ldr	x1, [x19, #256]
    3274:	add	x0, x1, #0x1
    3278:	str	x0, [x19, #256]
    327c:	mov	w0, #0x20                  	// #32
    3280:	strb	w0, [x19, x1]
    3284:	strb	w0, [x19, #264]
    3288:	b	31ec <d_print_comp_inner+0x2508>
    328c:	strb	wzr, [x19, #255]
    3290:	ldr	x3, [x19, #272]
    3294:	ldr	x2, [x19, #280]
    3298:	mov	x1, #0xff                  	// #255
    329c:	mov	x0, x19
    32a0:	blr	x3
    32a4:	str	xzr, [x19, #256]
    32a8:	ldr	x0, [x19, #320]
    32ac:	add	x0, x0, #0x1
    32b0:	str	x0, [x19, #320]
    32b4:	b	3270 <d_print_comp_inner+0x258c>
    32b8:	strb	wzr, [x19, #255]
    32bc:	ldr	x3, [x19, #272]
    32c0:	ldr	x2, [x19, #280]
    32c4:	mov	x1, #0xff                  	// #255
    32c8:	mov	x0, x19
    32cc:	blr	x3
    32d0:	str	xzr, [x19, #256]
    32d4:	ldr	x0, [x19, #320]
    32d8:	add	x0, x0, #0x1
    32dc:	str	x0, [x19, #320]
    32e0:	b	31f8 <d_print_comp_inner+0x2514>
    32e4:	ldr	x0, [x19, #256]
    32e8:	cmp	x0, #0xff
    32ec:	b.eq	330c <d_print_comp_inner+0x2628>  // b.none
    32f0:	ldr	x1, [x19, #256]
    32f4:	add	x0, x1, #0x1
    32f8:	str	x0, [x19, #256]
    32fc:	mov	w0, #0x20                  	// #32
    3300:	strb	w0, [x19, x1]
    3304:	strb	w0, [x19, #264]
    3308:	b	3230 <d_print_comp_inner+0x254c>
    330c:	strb	wzr, [x19, #255]
    3310:	ldr	x3, [x19, #272]
    3314:	ldr	x2, [x19, #280]
    3318:	mov	x1, #0xff                  	// #255
    331c:	mov	x0, x19
    3320:	blr	x3
    3324:	str	xzr, [x19, #256]
    3328:	ldr	x0, [x19, #320]
    332c:	add	x0, x0, #0x1
    3330:	str	x0, [x19, #320]
    3334:	b	32f0 <d_print_comp_inner+0x260c>
    3338:	strb	wzr, [x19, #255]
    333c:	ldr	x3, [x19, #272]
    3340:	ldr	x2, [x19, #280]
    3344:	mov	x1, #0xff                  	// #255
    3348:	mov	x0, x19
    334c:	blr	x3
    3350:	str	xzr, [x19, #256]
    3354:	ldr	x0, [x19, #320]
    3358:	add	x0, x0, #0x1
    335c:	str	x0, [x19, #320]
    3360:	b	323c <d_print_comp_inner+0x2558>
    3364:	ldr	x2, [x22, #8]
    3368:	mov	w1, w20
    336c:	mov	x0, x19
    3370:	bl	6304 <d_print_expr_op>
    3374:	ldp	x21, x22, [sp, #32]
    3378:	ldp	x23, x24, [sp, #48]
    337c:	ldp	x25, x26, [sp, #64]
    3380:	b	4ea0 <d_print_comp_inner+0x41bc>
    3384:	ldr	x24, [x22, #8]
    3388:	ldr	x21, [x22, #16]
    338c:	ldr	w0, [x24]
    3390:	cmp	w0, #0x32
    3394:	b.eq	3490 <d_print_comp_inner+0x27ac>  // b.none
    3398:	cmp	w0, #0x34
    339c:	b.ne	36ec <d_print_comp_inner+0x2a08>  // b.any
    33a0:	ldr	x0, [x19, #256]
    33a4:	cmp	x0, #0xff
    33a8:	b.eq	36f4 <d_print_comp_inner+0x2a10>  // b.none
    33ac:	ldr	x1, [x19, #256]
    33b0:	add	x0, x1, #0x1
    33b4:	str	x0, [x19, #256]
    33b8:	mov	w0, #0x28                  	// #40
    33bc:	strb	w0, [x19, x1]
    33c0:	strb	w0, [x19, #264]
    33c4:	ldr	x2, [x24, #8]
    33c8:	mov	w1, w20
    33cc:	mov	x0, x19
    33d0:	bl	4fe0 <d_print_comp>
    33d4:	ldr	x0, [x19, #256]
    33d8:	cmp	x0, #0xff
    33dc:	b.eq	3720 <d_print_comp_inner+0x2a3c>  // b.none
    33e0:	ldr	x1, [x19, #256]
    33e4:	add	x0, x1, #0x1
    33e8:	str	x0, [x19, #256]
    33ec:	mov	w0, #0x29                  	// #41
    33f0:	strb	w0, [x19, x1]
    33f4:	strb	w0, [x19, #264]
    33f8:	mov	x23, #0x0                   	// #0
    33fc:	cbz	x23, 37c4 <d_print_comp_inner+0x2ae0>
    3400:	adrp	x1, 0 <is_fnqual_component_type>
    3404:	add	x1, x1, #0x0
    3408:	mov	x0, x23
    340c:	bl	0 <strcmp>
    3410:	cbz	w0, 374c <d_print_comp_inner+0x2a68>
    3414:	adrp	x1, 0 <is_fnqual_component_type>
    3418:	add	x1, x1, #0x0
    341c:	mov	x0, x23
    3420:	bl	0 <strcmp>
    3424:	cbnz	w0, 37c4 <d_print_comp_inner+0x2ae0>
    3428:	ldr	x0, [x19, #256]
    342c:	cmp	x0, #0xff
    3430:	b.eq	376c <d_print_comp_inner+0x2a88>  // b.none
    3434:	ldr	x1, [x19, #256]
    3438:	add	x0, x1, #0x1
    343c:	str	x0, [x19, #256]
    3440:	mov	w0, #0x28                  	// #40
    3444:	strb	w0, [x19, x1]
    3448:	strb	w0, [x19, #264]
    344c:	mov	x2, x21
    3450:	mov	w1, w20
    3454:	mov	x0, x19
    3458:	bl	4fe0 <d_print_comp>
    345c:	ldr	x0, [x19, #256]
    3460:	cmp	x0, #0xff
    3464:	b.eq	3798 <d_print_comp_inner+0x2ab4>  // b.none
    3468:	ldr	x1, [x19, #256]
    346c:	add	x0, x1, #0x1
    3470:	str	x0, [x19, #256]
    3474:	mov	w0, #0x29                  	// #41
    3478:	strb	w0, [x19, x1]
    347c:	strb	w0, [x19, #264]
    3480:	ldp	x21, x22, [sp, #32]
    3484:	ldp	x23, x24, [sp, #48]
    3488:	ldp	x25, x26, [sp, #64]
    348c:	b	4ea0 <d_print_comp_inner+0x41bc>
    3490:	ldr	x0, [x24, #8]
    3494:	ldr	x23, [x0]
    3498:	adrp	x1, 0 <is_fnqual_component_type>
    349c:	add	x1, x1, #0x0
    34a0:	mov	x0, x23
    34a4:	bl	0 <strcmp>
    34a8:	cbnz	w0, 34b8 <d_print_comp_inner+0x27d4>
    34ac:	ldr	w0, [x21]
    34b0:	cmp	w0, #0x3
    34b4:	b.eq	3504 <d_print_comp_inner+0x2820>  // b.none
    34b8:	ldr	w0, [x21]
    34bc:	cmp	w0, #0x39
    34c0:	b.eq	3528 <d_print_comp_inner+0x2844>  // b.none
    34c4:	adrp	x1, 0 <is_fnqual_component_type>
    34c8:	add	x1, x1, #0x0
    34cc:	mov	x0, x23
    34d0:	bl	0 <strcmp>
    34d4:	cbz	w0, 3558 <d_print_comp_inner+0x2874>
    34d8:	adrp	x1, 0 <is_fnqual_component_type>
    34dc:	add	x1, x1, #0x0
    34e0:	mov	x0, x23
    34e4:	bl	0 <strcmp>
    34e8:	mov	w22, w0
    34ec:	cbz	w0, 3624 <d_print_comp_inner+0x2940>
    34f0:	mov	x2, x24
    34f4:	mov	w1, w20
    34f8:	mov	x0, x19
    34fc:	bl	6304 <d_print_expr_op>
    3500:	b	33fc <d_print_comp_inner+0x2718>
    3504:	ldr	x0, [x21, #8]
    3508:	ldr	w1, [x0]
    350c:	cmp	w1, #0x1
    3510:	b.ne	34c4 <d_print_comp_inner+0x27e0>  // b.any
    3514:	ldr	x1, [x21, #16]
    3518:	ldr	w1, [x1]
    351c:	cmp	w1, #0x29
    3520:	csel	x21, x21, x0, ne  // ne = any
    3524:	b	34c4 <d_print_comp_inner+0x27e0>
    3528:	ldr	x2, [x21, #8]
    352c:	mov	w1, w20
    3530:	mov	x0, x19
    3534:	bl	63cc <d_print_subexpr>
    3538:	mov	x2, x24
    353c:	mov	w1, w20
    3540:	mov	x0, x19
    3544:	bl	6304 <d_print_expr_op>
    3548:	ldp	x21, x22, [sp, #32]
    354c:	ldp	x23, x24, [sp, #48]
    3550:	ldp	x25, x26, [sp, #64]
    3554:	b	4ea0 <d_print_comp_inner+0x41bc>
    3558:	mov	x1, x21
    355c:	mov	x0, x19
    3560:	bl	958 <d_find_pack>
    3564:	bl	a50 <d_pack_length>
    3568:	add	x20, sp, #0x80
    356c:	mov	w2, w0
    3570:	adrp	x1, 0 <is_fnqual_component_type>
    3574:	add	x1, x1, #0x0
    3578:	mov	x0, x20
    357c:	bl	0 <sprintf>
    3580:	mov	x0, x20
    3584:	bl	0 <strlen>
    3588:	cbz	x0, 4f6c <d_print_comp_inner+0x4288>
    358c:	add	x20, sp, #0x80
    3590:	add	x21, x0, x20
    3594:	mov	x23, #0xff                  	// #255
    3598:	b	35bc <d_print_comp_inner+0x28d8>
    359c:	ldr	x0, [x19, #256]
    35a0:	add	x1, x0, #0x1
    35a4:	str	x1, [x19, #256]
    35a8:	strb	w22, [x19, x0]
    35ac:	strb	w22, [x19, #264]
    35b0:	add	x20, x20, #0x1
    35b4:	cmp	x20, x21
    35b8:	b.eq	35f8 <d_print_comp_inner+0x2914>  // b.none
    35bc:	ldrb	w22, [x20]
    35c0:	ldr	x0, [x19, #256]
    35c4:	cmp	x0, #0xff
    35c8:	b.ne	359c <d_print_comp_inner+0x28b8>  // b.any
    35cc:	strb	wzr, [x19, #255]
    35d0:	ldr	x3, [x19, #272]
    35d4:	ldr	x2, [x19, #280]
    35d8:	mov	x1, x23
    35dc:	mov	x0, x19
    35e0:	blr	x3
    35e4:	str	xzr, [x19, #256]
    35e8:	ldr	x0, [x19, #320]
    35ec:	add	x0, x0, #0x1
    35f0:	str	x0, [x19, #320]
    35f4:	b	359c <d_print_comp_inner+0x28b8>
    35f8:	ldp	x21, x22, [sp, #32]
    35fc:	ldp	x23, x24, [sp, #48]
    3600:	ldp	x25, x26, [sp, #64]
    3604:	b	4ea0 <d_print_comp_inner+0x41bc>
    3608:	ldr	x1, [x0, #8]
    360c:	mov	x0, x19
    3610:	bl	958 <d_find_pack>
    3614:	bl	a50 <d_pack_length>
    3618:	add	w22, w22, w0
    361c:	ldr	x21, [x21, #16]
    3620:	cbz	x21, 364c <d_print_comp_inner+0x2968>
    3624:	ldr	w0, [x21]
    3628:	cmp	w0, #0x2f
    362c:	b.ne	364c <d_print_comp_inner+0x2968>  // b.any
    3630:	ldr	x0, [x21, #8]
    3634:	cbz	x0, 364c <d_print_comp_inner+0x2968>
    3638:	ldr	w1, [x0]
    363c:	cmp	w1, #0x4b
    3640:	b.eq	3608 <d_print_comp_inner+0x2924>  // b.none
    3644:	add	w22, w22, #0x1
    3648:	b	361c <d_print_comp_inner+0x2938>
    364c:	add	x20, sp, #0x80
    3650:	mov	w2, w22
    3654:	adrp	x1, 0 <is_fnqual_component_type>
    3658:	add	x1, x1, #0x0
    365c:	mov	x0, x20
    3660:	bl	0 <sprintf>
    3664:	mov	x0, x20
    3668:	bl	0 <strlen>
    366c:	cbz	x0, 4f7c <d_print_comp_inner+0x4298>
    3670:	add	x20, sp, #0x80
    3674:	add	x22, x0, x20
    3678:	mov	x23, #0xff                  	// #255
    367c:	b	36a0 <d_print_comp_inner+0x29bc>
    3680:	ldr	x0, [x19, #256]
    3684:	add	x1, x0, #0x1
    3688:	str	x1, [x19, #256]
    368c:	strb	w21, [x19, x0]
    3690:	strb	w21, [x19, #264]
    3694:	add	x20, x20, #0x1
    3698:	cmp	x20, x22
    369c:	b.eq	36dc <d_print_comp_inner+0x29f8>  // b.none
    36a0:	ldrb	w21, [x20]
    36a4:	ldr	x0, [x19, #256]
    36a8:	cmp	x0, #0xff
    36ac:	b.ne	3680 <d_print_comp_inner+0x299c>  // b.any
    36b0:	strb	wzr, [x19, #255]
    36b4:	ldr	x3, [x19, #272]
    36b8:	ldr	x2, [x19, #280]
    36bc:	mov	x1, x23
    36c0:	mov	x0, x19
    36c4:	blr	x3
    36c8:	str	xzr, [x19, #256]
    36cc:	ldr	x0, [x19, #320]
    36d0:	add	x0, x0, #0x1
    36d4:	str	x0, [x19, #320]
    36d8:	b	3680 <d_print_comp_inner+0x299c>
    36dc:	ldp	x21, x22, [sp, #32]
    36e0:	ldp	x23, x24, [sp, #48]
    36e4:	ldp	x25, x26, [sp, #64]
    36e8:	b	4ea0 <d_print_comp_inner+0x41bc>
    36ec:	mov	x23, #0x0                   	// #0
    36f0:	b	34f0 <d_print_comp_inner+0x280c>
    36f4:	strb	wzr, [x19, #255]
    36f8:	ldr	x3, [x19, #272]
    36fc:	ldr	x2, [x19, #280]
    3700:	mov	x1, #0xff                  	// #255
    3704:	mov	x0, x19
    3708:	blr	x3
    370c:	str	xzr, [x19, #256]
    3710:	ldr	x0, [x19, #320]
    3714:	add	x0, x0, #0x1
    3718:	str	x0, [x19, #320]
    371c:	b	33ac <d_print_comp_inner+0x26c8>
    3720:	strb	wzr, [x19, #255]
    3724:	ldr	x3, [x19, #272]
    3728:	ldr	x2, [x19, #280]
    372c:	mov	x1, #0xff                  	// #255
    3730:	mov	x0, x19
    3734:	blr	x3
    3738:	str	xzr, [x19, #256]
    373c:	ldr	x0, [x19, #320]
    3740:	add	x0, x0, #0x1
    3744:	str	x0, [x19, #320]
    3748:	b	33e0 <d_print_comp_inner+0x26fc>
    374c:	mov	x2, x21
    3750:	mov	w1, w20
    3754:	mov	x0, x19
    3758:	bl	4fe0 <d_print_comp>
    375c:	ldp	x21, x22, [sp, #32]
    3760:	ldp	x23, x24, [sp, #48]
    3764:	ldp	x25, x26, [sp, #64]
    3768:	b	4ea0 <d_print_comp_inner+0x41bc>
    376c:	strb	wzr, [x19, #255]
    3770:	ldr	x3, [x19, #272]
    3774:	ldr	x2, [x19, #280]
    3778:	mov	x1, #0xff                  	// #255
    377c:	mov	x0, x19
    3780:	blr	x3
    3784:	str	xzr, [x19, #256]
    3788:	ldr	x0, [x19, #320]
    378c:	add	x0, x0, #0x1
    3790:	str	x0, [x19, #320]
    3794:	b	3434 <d_print_comp_inner+0x2750>
    3798:	strb	wzr, [x19, #255]
    379c:	ldr	x3, [x19, #272]
    37a0:	ldr	x2, [x19, #280]
    37a4:	mov	x1, #0xff                  	// #255
    37a8:	mov	x0, x19
    37ac:	blr	x3
    37b0:	str	xzr, [x19, #256]
    37b4:	ldr	x0, [x19, #320]
    37b8:	add	x0, x0, #0x1
    37bc:	str	x0, [x19, #320]
    37c0:	b	3468 <d_print_comp_inner+0x2784>
    37c4:	mov	x2, x21
    37c8:	mov	w1, w20
    37cc:	mov	x0, x19
    37d0:	bl	63cc <d_print_subexpr>
    37d4:	ldp	x21, x22, [sp, #32]
    37d8:	ldp	x23, x24, [sp, #48]
    37dc:	ldp	x25, x26, [sp, #64]
    37e0:	b	4ea0 <d_print_comp_inner+0x41bc>
    37e4:	ldr	x0, [x22, #16]
    37e8:	ldr	w0, [x0]
    37ec:	cmp	w0, #0x39
    37f0:	b.eq	380c <d_print_comp_inner+0x2b28>  // b.none
    37f4:	mov	w0, #0x1                   	// #1
    37f8:	str	w0, [x19, #304]
    37fc:	ldp	x21, x22, [sp, #32]
    3800:	ldp	x23, x24, [sp, #48]
    3804:	ldp	x25, x26, [sp, #64]
    3808:	b	4ea0 <d_print_comp_inner+0x41bc>
    380c:	ldr	x21, [x22, #8]
    3810:	mov	x0, x21
    3814:	bl	610 <op_is_new_cast>
    3818:	cbnz	w0, 3920 <d_print_comp_inner+0x2c3c>
    381c:	mov	x2, x22
    3820:	mov	w1, w20
    3824:	mov	x0, x19
    3828:	bl	64c8 <d_maybe_print_fold_expression>
    382c:	cbnz	w0, 4f8c <d_print_comp_inner+0x42a8>
    3830:	ldr	x0, [x22, #8]
    3834:	ldr	w1, [x0]
    3838:	cmp	w1, #0x32
    383c:	b.eq	3a78 <d_print_comp_inner+0x2d94>  // b.none
    3840:	ldr	x0, [x22, #8]
    3844:	ldr	x0, [x0, #8]
    3848:	adrp	x1, 0 <is_fnqual_component_type>
    384c:	add	x1, x1, #0x0
    3850:	ldr	x0, [x0]
    3854:	bl	0 <strcmp>
    3858:	cbnz	w0, 3870 <d_print_comp_inner+0x2b8c>
    385c:	ldr	x0, [x22, #16]
    3860:	ldr	x0, [x0, #8]
    3864:	ldr	w1, [x0]
    3868:	cmp	w1, #0x3
    386c:	b.eq	3aec <d_print_comp_inner+0x2e08>  // b.none
    3870:	ldr	x0, [x22, #16]
    3874:	ldr	x2, [x0, #8]
    3878:	mov	w1, w20
    387c:	mov	x0, x19
    3880:	bl	63cc <d_print_subexpr>
    3884:	ldr	x21, [x22, #8]
    3888:	ldr	x0, [x21, #8]
    388c:	ldr	x23, [x0]
    3890:	adrp	x1, 0 <is_fnqual_component_type>
    3894:	add	x1, x1, #0x0
    3898:	mov	x0, x23
    389c:	bl	0 <strcmp>
    38a0:	cbnz	w0, 3b70 <d_print_comp_inner+0x2e8c>
    38a4:	ldr	x0, [x19, #256]
    38a8:	cmp	x0, #0xff
    38ac:	b.eq	3b18 <d_print_comp_inner+0x2e34>  // b.none
    38b0:	ldr	x1, [x19, #256]
    38b4:	add	x0, x1, #0x1
    38b8:	str	x0, [x19, #256]
    38bc:	mov	w0, #0x5b                  	// #91
    38c0:	strb	w0, [x19, x1]
    38c4:	strb	w0, [x19, #264]
    38c8:	ldr	x0, [x22, #16]
    38cc:	ldr	x2, [x0, #16]
    38d0:	mov	w1, w20
    38d4:	mov	x0, x19
    38d8:	bl	4fe0 <d_print_comp>
    38dc:	ldr	x0, [x19, #256]
    38e0:	cmp	x0, #0xff
    38e4:	b.eq	3b44 <d_print_comp_inner+0x2e60>  // b.none
    38e8:	ldr	x1, [x19, #256]
    38ec:	add	x0, x1, #0x1
    38f0:	str	x0, [x19, #256]
    38f4:	mov	w0, #0x5d                  	// #93
    38f8:	strb	w0, [x19, x1]
    38fc:	strb	w0, [x19, #264]
    3900:	ldr	x0, [x22, #8]
    3904:	ldr	w1, [x0]
    3908:	cmp	w1, #0x32
    390c:	b.eq	3bb0 <d_print_comp_inner+0x2ecc>  // b.none
    3910:	ldp	x21, x22, [sp, #32]
    3914:	ldp	x23, x24, [sp, #48]
    3918:	ldp	x25, x26, [sp, #64]
    391c:	b	4ea0 <d_print_comp_inner+0x41bc>
    3920:	mov	x2, x21
    3924:	mov	w1, w20
    3928:	mov	x0, x19
    392c:	bl	6304 <d_print_expr_op>
    3930:	ldr	x0, [x19, #256]
    3934:	cmp	x0, #0xff
    3938:	b.eq	397c <d_print_comp_inner+0x2c98>  // b.none
    393c:	ldr	x1, [x19, #256]
    3940:	add	x0, x1, #0x1
    3944:	str	x0, [x19, #256]
    3948:	mov	w0, #0x3c                  	// #60
    394c:	strb	w0, [x19, x1]
    3950:	strb	w0, [x19, #264]
    3954:	ldr	x0, [x22, #16]
    3958:	ldr	x2, [x0, #8]
    395c:	mov	w1, w20
    3960:	mov	x0, x19
    3964:	bl	4fe0 <d_print_comp>
    3968:	adrp	x21, 0 <is_fnqual_component_type>
    396c:	add	x21, x21, #0x0
    3970:	add	x24, x21, #0x2
    3974:	mov	x25, #0xff                  	// #255
    3978:	b	39c8 <d_print_comp_inner+0x2ce4>
    397c:	strb	wzr, [x19, #255]
    3980:	ldr	x3, [x19, #272]
    3984:	ldr	x2, [x19, #280]
    3988:	mov	x1, #0xff                  	// #255
    398c:	mov	x0, x19
    3990:	blr	x3
    3994:	str	xzr, [x19, #256]
    3998:	ldr	x0, [x19, #320]
    399c:	add	x0, x0, #0x1
    39a0:	str	x0, [x19, #320]
    39a4:	b	393c <d_print_comp_inner+0x2c58>
    39a8:	ldr	x0, [x19, #256]
    39ac:	add	x1, x0, #0x1
    39b0:	str	x1, [x19, #256]
    39b4:	strb	w23, [x19, x0]
    39b8:	strb	w23, [x19, #264]
    39bc:	add	x21, x21, #0x1
    39c0:	cmp	x21, x24
    39c4:	b.eq	3a04 <d_print_comp_inner+0x2d20>  // b.none
    39c8:	ldrb	w23, [x21]
    39cc:	ldr	x0, [x19, #256]
    39d0:	cmp	x0, #0xff
    39d4:	b.ne	39a8 <d_print_comp_inner+0x2cc4>  // b.any
    39d8:	strb	wzr, [x19, #255]
    39dc:	ldr	x3, [x19, #272]
    39e0:	ldr	x2, [x19, #280]
    39e4:	mov	x1, x25
    39e8:	mov	x0, x19
    39ec:	blr	x3
    39f0:	str	xzr, [x19, #256]
    39f4:	ldr	x0, [x19, #320]
    39f8:	add	x0, x0, #0x1
    39fc:	str	x0, [x19, #320]
    3a00:	b	39a8 <d_print_comp_inner+0x2cc4>
    3a04:	ldr	x0, [x22, #16]
    3a08:	ldr	x2, [x0, #16]
    3a0c:	mov	w1, w20
    3a10:	mov	x0, x19
    3a14:	bl	4fe0 <d_print_comp>
    3a18:	ldr	x0, [x19, #256]
    3a1c:	cmp	x0, #0xff
    3a20:	b.eq	3a4c <d_print_comp_inner+0x2d68>  // b.none
    3a24:	ldr	x1, [x19, #256]
    3a28:	add	x0, x1, #0x1
    3a2c:	str	x0, [x19, #256]
    3a30:	mov	w0, #0x29                  	// #41
    3a34:	strb	w0, [x19, x1]
    3a38:	strb	w0, [x19, #264]
    3a3c:	ldp	x21, x22, [sp, #32]
    3a40:	ldp	x23, x24, [sp, #48]
    3a44:	ldp	x25, x26, [sp, #64]
    3a48:	b	4ea0 <d_print_comp_inner+0x41bc>
    3a4c:	strb	wzr, [x19, #255]
    3a50:	ldr	x3, [x19, #272]
    3a54:	ldr	x2, [x19, #280]
    3a58:	mov	x1, #0xff                  	// #255
    3a5c:	mov	x0, x19
    3a60:	blr	x3
    3a64:	str	xzr, [x19, #256]
    3a68:	ldr	x0, [x19, #320]
    3a6c:	add	x0, x0, #0x1
    3a70:	str	x0, [x19, #320]
    3a74:	b	3a24 <d_print_comp_inner+0x2d40>
    3a78:	ldr	x0, [x0, #8]
    3a7c:	ldr	w1, [x0, #16]
    3a80:	cmp	w1, #0x1
    3a84:	b.ne	3840 <d_print_comp_inner+0x2b5c>  // b.any
    3a88:	ldr	x0, [x0, #8]
    3a8c:	ldrb	w0, [x0]
    3a90:	cmp	w0, #0x3e
    3a94:	b.ne	3840 <d_print_comp_inner+0x2b5c>  // b.any
    3a98:	ldr	x0, [x19, #256]
    3a9c:	cmp	x0, #0xff
    3aa0:	b.eq	3ac0 <d_print_comp_inner+0x2ddc>  // b.none
    3aa4:	ldr	x1, [x19, #256]
    3aa8:	add	x0, x1, #0x1
    3aac:	str	x0, [x19, #256]
    3ab0:	mov	w0, #0x28                  	// #40
    3ab4:	strb	w0, [x19, x1]
    3ab8:	strb	w0, [x19, #264]
    3abc:	b	3840 <d_print_comp_inner+0x2b5c>
    3ac0:	strb	wzr, [x19, #255]
    3ac4:	ldr	x3, [x19, #272]
    3ac8:	ldr	x2, [x19, #280]
    3acc:	mov	x1, #0xff                  	// #255
    3ad0:	mov	x0, x19
    3ad4:	blr	x3
    3ad8:	str	xzr, [x19, #256]
    3adc:	ldr	x0, [x19, #320]
    3ae0:	add	x0, x0, #0x1
    3ae4:	str	x0, [x19, #320]
    3ae8:	b	3aa4 <d_print_comp_inner+0x2dc0>
    3aec:	ldr	x1, [x0, #16]
    3af0:	ldr	w1, [x1]
    3af4:	cmp	w1, #0x29
    3af8:	b.eq	3b04 <d_print_comp_inner+0x2e20>  // b.none
    3afc:	mov	w1, #0x1                   	// #1
    3b00:	str	w1, [x19, #304]
    3b04:	ldr	x2, [x0, #8]
    3b08:	mov	w1, w20
    3b0c:	mov	x0, x19
    3b10:	bl	63cc <d_print_subexpr>
    3b14:	b	3884 <d_print_comp_inner+0x2ba0>
    3b18:	strb	wzr, [x19, #255]
    3b1c:	ldr	x3, [x19, #272]
    3b20:	ldr	x2, [x19, #280]
    3b24:	mov	x1, #0xff                  	// #255
    3b28:	mov	x0, x19
    3b2c:	blr	x3
    3b30:	str	xzr, [x19, #256]
    3b34:	ldr	x0, [x19, #320]
    3b38:	add	x0, x0, #0x1
    3b3c:	str	x0, [x19, #320]
    3b40:	b	38b0 <d_print_comp_inner+0x2bcc>
    3b44:	strb	wzr, [x19, #255]
    3b48:	ldr	x3, [x19, #272]
    3b4c:	ldr	x2, [x19, #280]
    3b50:	mov	x1, #0xff                  	// #255
    3b54:	mov	x0, x19
    3b58:	blr	x3
    3b5c:	str	xzr, [x19, #256]
    3b60:	ldr	x0, [x19, #320]
    3b64:	add	x0, x0, #0x1
    3b68:	str	x0, [x19, #320]
    3b6c:	b	38e8 <d_print_comp_inner+0x2c04>
    3b70:	adrp	x1, 0 <is_fnqual_component_type>
    3b74:	add	x1, x1, #0x0
    3b78:	mov	x0, x23
    3b7c:	bl	0 <strcmp>
    3b80:	cbnz	w0, 3b9c <d_print_comp_inner+0x2eb8>
    3b84:	ldr	x0, [x22, #16]
    3b88:	ldr	x2, [x0, #16]
    3b8c:	mov	w1, w20
    3b90:	mov	x0, x19
    3b94:	bl	63cc <d_print_subexpr>
    3b98:	b	3900 <d_print_comp_inner+0x2c1c>
    3b9c:	mov	x2, x21
    3ba0:	mov	w1, w20
    3ba4:	mov	x0, x19
    3ba8:	bl	6304 <d_print_expr_op>
    3bac:	b	3b84 <d_print_comp_inner+0x2ea0>
    3bb0:	ldr	x0, [x0, #8]
    3bb4:	ldr	w1, [x0, #16]
    3bb8:	cmp	w1, #0x1
    3bbc:	b.eq	3bd0 <d_print_comp_inner+0x2eec>  // b.none
    3bc0:	ldp	x21, x22, [sp, #32]
    3bc4:	ldp	x23, x24, [sp, #48]
    3bc8:	ldp	x25, x26, [sp, #64]
    3bcc:	b	4ea0 <d_print_comp_inner+0x41bc>
    3bd0:	ldr	x0, [x0, #8]
    3bd4:	ldrb	w0, [x0]
    3bd8:	cmp	w0, #0x3e
    3bdc:	b.eq	3bf0 <d_print_comp_inner+0x2f0c>  // b.none
    3be0:	ldp	x21, x22, [sp, #32]
    3be4:	ldp	x23, x24, [sp, #48]
    3be8:	ldp	x25, x26, [sp, #64]
    3bec:	b	4ea0 <d_print_comp_inner+0x41bc>
    3bf0:	ldr	x0, [x19, #256]
    3bf4:	cmp	x0, #0xff
    3bf8:	b.eq	3c24 <d_print_comp_inner+0x2f40>  // b.none
    3bfc:	ldr	x1, [x19, #256]
    3c00:	add	x0, x1, #0x1
    3c04:	str	x0, [x19, #256]
    3c08:	mov	w0, #0x29                  	// #41
    3c0c:	strb	w0, [x19, x1]
    3c10:	strb	w0, [x19, #264]
    3c14:	ldp	x21, x22, [sp, #32]
    3c18:	ldp	x23, x24, [sp, #48]
    3c1c:	ldp	x25, x26, [sp, #64]
    3c20:	b	4ea0 <d_print_comp_inner+0x41bc>
    3c24:	strb	wzr, [x19, #255]
    3c28:	ldr	x3, [x19, #272]
    3c2c:	ldr	x2, [x19, #280]
    3c30:	mov	x1, #0xff                  	// #255
    3c34:	mov	x0, x19
    3c38:	blr	x3
    3c3c:	str	xzr, [x19, #256]
    3c40:	ldr	x0, [x19, #320]
    3c44:	add	x0, x0, #0x1
    3c48:	str	x0, [x19, #320]
    3c4c:	b	3bfc <d_print_comp_inner+0x2f18>
    3c50:	mov	w0, #0x1                   	// #1
    3c54:	str	w0, [x19, #304]
    3c58:	ldp	x21, x22, [sp, #32]
    3c5c:	ldp	x23, x24, [sp, #48]
    3c60:	ldp	x25, x26, [sp, #64]
    3c64:	b	4ea0 <d_print_comp_inner+0x41bc>
    3c68:	ldr	x0, [x22, #16]
    3c6c:	ldr	w1, [x0]
    3c70:	cmp	w1, #0x3b
    3c74:	b.ne	3c88 <d_print_comp_inner+0x2fa4>  // b.any
    3c78:	ldr	x0, [x0, #16]
    3c7c:	ldr	w0, [x0]
    3c80:	cmp	w0, #0x3c
    3c84:	b.eq	3ca0 <d_print_comp_inner+0x2fbc>  // b.none
    3c88:	mov	w0, #0x1                   	// #1
    3c8c:	str	w0, [x19, #304]
    3c90:	ldp	x21, x22, [sp, #32]
    3c94:	ldp	x23, x24, [sp, #48]
    3c98:	ldp	x25, x26, [sp, #64]
    3c9c:	b	4ea0 <d_print_comp_inner+0x41bc>
    3ca0:	mov	x2, x22
    3ca4:	mov	w1, w20
    3ca8:	mov	x0, x19
    3cac:	bl	64c8 <d_maybe_print_fold_expression>
    3cb0:	cbnz	w0, 4f9c <d_print_comp_inner+0x42b8>
    3cb4:	ldr	x24, [x22, #8]
    3cb8:	ldr	x0, [x22, #16]
    3cbc:	ldr	x22, [x0, #8]
    3cc0:	ldr	x0, [x0, #16]
    3cc4:	ldr	x23, [x0, #8]
    3cc8:	ldr	x21, [x0, #16]
    3ccc:	ldr	x0, [x24, #8]
    3cd0:	adrp	x1, 0 <is_fnqual_component_type>
    3cd4:	add	x1, x1, #0x0
    3cd8:	ldr	x0, [x0]
    3cdc:	bl	0 <strcmp>
    3ce0:	cbnz	w0, 3d48 <d_print_comp_inner+0x3064>
    3ce4:	mov	x2, x22
    3ce8:	mov	w1, w20
    3cec:	mov	x0, x19
    3cf0:	bl	63cc <d_print_subexpr>
    3cf4:	mov	x2, x24
    3cf8:	mov	w1, w20
    3cfc:	mov	x0, x19
    3d00:	bl	6304 <d_print_expr_op>
    3d04:	mov	x2, x23
    3d08:	mov	w1, w20
    3d0c:	mov	x0, x19
    3d10:	bl	63cc <d_print_subexpr>
    3d14:	mov	x2, #0x3                   	// #3
    3d18:	adrp	x1, 0 <is_fnqual_component_type>
    3d1c:	add	x1, x1, #0x0
    3d20:	mov	x0, x19
    3d24:	bl	848 <d_append_buffer>
    3d28:	mov	x2, x21
    3d2c:	mov	w1, w20
    3d30:	mov	x0, x19
    3d34:	bl	63cc <d_print_subexpr>
    3d38:	ldp	x21, x22, [sp, #32]
    3d3c:	ldp	x23, x24, [sp, #48]
    3d40:	ldp	x25, x26, [sp, #64]
    3d44:	b	4ea0 <d_print_comp_inner+0x41bc>
    3d48:	mov	x2, #0x4                   	// #4
    3d4c:	adrp	x1, 0 <is_fnqual_component_type>
    3d50:	add	x1, x1, #0x0
    3d54:	mov	x0, x19
    3d58:	bl	848 <d_append_buffer>
    3d5c:	ldr	x0, [x22, #8]
    3d60:	cbz	x0, 3d98 <d_print_comp_inner+0x30b4>
    3d64:	mov	x2, x22
    3d68:	mov	w1, w20
    3d6c:	mov	x0, x19
    3d70:	bl	63cc <d_print_subexpr>
    3d74:	ldr	x0, [x19, #256]
    3d78:	cmp	x0, #0xff
    3d7c:	b.eq	3dcc <d_print_comp_inner+0x30e8>  // b.none
    3d80:	ldr	x1, [x19, #256]
    3d84:	add	x0, x1, #0x1
    3d88:	str	x0, [x19, #256]
    3d8c:	mov	w0, #0x20                  	// #32
    3d90:	strb	w0, [x19, x1]
    3d94:	strb	w0, [x19, #264]
    3d98:	mov	x2, x23
    3d9c:	mov	w1, w20
    3da0:	mov	x0, x19
    3da4:	bl	4fe0 <d_print_comp>
    3da8:	cbz	x21, 4fac <d_print_comp_inner+0x42c8>
    3dac:	mov	x2, x21
    3db0:	mov	w1, w20
    3db4:	mov	x0, x19
    3db8:	bl	63cc <d_print_subexpr>
    3dbc:	ldp	x21, x22, [sp, #32]
    3dc0:	ldp	x23, x24, [sp, #48]
    3dc4:	ldp	x25, x26, [sp, #64]
    3dc8:	b	4ea0 <d_print_comp_inner+0x41bc>
    3dcc:	strb	wzr, [x19, #255]
    3dd0:	ldr	x3, [x19, #272]
    3dd4:	ldr	x2, [x19, #280]
    3dd8:	mov	x1, #0xff                  	// #255
    3ddc:	mov	x0, x19
    3de0:	blr	x3
    3de4:	str	xzr, [x19, #256]
    3de8:	ldr	x0, [x19, #320]
    3dec:	add	x0, x0, #0x1
    3df0:	str	x0, [x19, #320]
    3df4:	b	3d80 <d_print_comp_inner+0x309c>
    3df8:	mov	w0, #0x1                   	// #1
    3dfc:	str	w0, [x19, #304]
    3e00:	ldp	x21, x22, [sp, #32]
    3e04:	ldp	x23, x24, [sp, #48]
    3e08:	ldp	x25, x26, [sp, #64]
    3e0c:	b	4ea0 <d_print_comp_inner+0x41bc>
    3e10:	ldr	x1, [x22, #8]
    3e14:	ldr	w2, [x1]
    3e18:	mov	w21, #0x0                   	// #0
    3e1c:	cmp	w2, #0x27
    3e20:	b.eq	3eac <d_print_comp_inner+0x31c8>  // b.none
    3e24:	ldr	x0, [x19, #256]
    3e28:	cmp	x0, #0xff
    3e2c:	b.eq	411c <d_print_comp_inner+0x3438>  // b.none
    3e30:	ldr	x1, [x19, #256]
    3e34:	add	x0, x1, #0x1
    3e38:	str	x0, [x19, #256]
    3e3c:	mov	w0, #0x28                  	// #40
    3e40:	strb	w0, [x19, x1]
    3e44:	strb	w0, [x19, #264]
    3e48:	ldr	x2, [x22, #8]
    3e4c:	mov	w1, w20
    3e50:	mov	x0, x19
    3e54:	bl	4fe0 <d_print_comp>
    3e58:	ldr	x0, [x19, #256]
    3e5c:	cmp	x0, #0xff
    3e60:	b.eq	4148 <d_print_comp_inner+0x3464>  // b.none
    3e64:	add	x2, x0, #0x1
    3e68:	str	x2, [x19, #256]
    3e6c:	mov	w1, #0x29                  	// #41
    3e70:	strb	w1, [x19, x0]
    3e74:	strb	w1, [x19, #264]
    3e78:	ldr	w0, [x22]
    3e7c:	cmp	w0, #0x3e
    3e80:	b.eq	4198 <d_print_comp_inner+0x34b4>  // b.none
    3e84:	cmp	w21, #0x8
    3e88:	b.eq	41e4 <d_print_comp_inner+0x3500>  // b.none
    3e8c:	ldr	x2, [x22, #16]
    3e90:	mov	w1, w20
    3e94:	mov	x0, x19
    3e98:	bl	4fe0 <d_print_comp>
    3e9c:	ldp	x21, x22, [sp, #32]
    3ea0:	ldp	x23, x24, [sp, #48]
    3ea4:	ldp	x25, x26, [sp, #64]
    3ea8:	b	4ea0 <d_print_comp_inner+0x41bc>
    3eac:	ldr	x1, [x1, #8]
    3eb0:	ldr	w21, [x1, #28]
    3eb4:	cmp	w21, #0x6
    3eb8:	b.ls	3f1c <d_print_comp_inner+0x3238>  // b.plast
    3ebc:	cmp	w21, #0x7
    3ec0:	b.ne	3e24 <d_print_comp_inner+0x3140>  // b.any
    3ec4:	ldr	x1, [x22, #16]
    3ec8:	ldr	w2, [x1]
    3ecc:	cbnz	w2, 3e24 <d_print_comp_inner+0x3140>
    3ed0:	ldr	w2, [x1, #16]
    3ed4:	cmp	w0, #0x3d
    3ed8:	ccmp	w2, #0x1, #0x0, eq  // eq = none
    3edc:	b.ne	3e24 <d_print_comp_inner+0x3140>  // b.any
    3ee0:	ldr	x0, [x1, #8]
    3ee4:	ldrb	w0, [x0]
    3ee8:	cmp	w0, #0x30
    3eec:	b.eq	40f8 <d_print_comp_inner+0x3414>  // b.none
    3ef0:	cmp	w0, #0x31
    3ef4:	b.ne	3e24 <d_print_comp_inner+0x3140>  // b.any
    3ef8:	mov	x2, #0x4                   	// #4
    3efc:	adrp	x1, 0 <is_fnqual_component_type>
    3f00:	add	x1, x1, #0x0
    3f04:	mov	x0, x19
    3f08:	bl	848 <d_append_buffer>
    3f0c:	ldp	x21, x22, [sp, #32]
    3f10:	ldp	x23, x24, [sp, #48]
    3f14:	ldp	x25, x26, [sp, #64]
    3f18:	b	4ea0 <d_print_comp_inner+0x41bc>
    3f1c:	cbz	w21, 3e24 <d_print_comp_inner+0x3140>
    3f20:	ldr	x1, [x22, #16]
    3f24:	ldr	w1, [x1]
    3f28:	cbnz	w1, 3e24 <d_print_comp_inner+0x3140>
    3f2c:	cmp	w0, #0x3e
    3f30:	b.eq	3f7c <d_print_comp_inner+0x3298>  // b.none
    3f34:	ldr	x2, [x22, #16]
    3f38:	mov	w1, w20
    3f3c:	mov	x0, x19
    3f40:	bl	4fe0 <d_print_comp>
    3f44:	cmp	w21, #0x4
    3f48:	b.eq	40b0 <d_print_comp_inner+0x33cc>  // b.none
    3f4c:	b.ls	3fd0 <d_print_comp_inner+0x32ec>  // b.plast
    3f50:	cmp	w21, #0x5
    3f54:	b.eq	40d4 <d_print_comp_inner+0x33f0>  // b.none
    3f58:	mov	x2, #0x3                   	// #3
    3f5c:	adrp	x1, 0 <is_fnqual_component_type>
    3f60:	add	x1, x1, #0x0
    3f64:	mov	x0, x19
    3f68:	bl	848 <d_append_buffer>
    3f6c:	ldp	x21, x22, [sp, #32]
    3f70:	ldp	x23, x24, [sp, #48]
    3f74:	ldp	x25, x26, [sp, #64]
    3f78:	b	4ea0 <d_print_comp_inner+0x41bc>
    3f7c:	ldr	x0, [x19, #256]
    3f80:	cmp	x0, #0xff
    3f84:	b.eq	3fa4 <d_print_comp_inner+0x32c0>  // b.none
    3f88:	ldr	x1, [x19, #256]
    3f8c:	add	x0, x1, #0x1
    3f90:	str	x0, [x19, #256]
    3f94:	mov	w0, #0x2d                  	// #45
    3f98:	strb	w0, [x19, x1]
    3f9c:	strb	w0, [x19, #264]
    3fa0:	b	3f34 <d_print_comp_inner+0x3250>
    3fa4:	strb	wzr, [x19, #255]
    3fa8:	ldr	x3, [x19, #272]
    3fac:	ldr	x2, [x19, #280]
    3fb0:	mov	x1, #0xff                  	// #255
    3fb4:	mov	x0, x19
    3fb8:	blr	x3
    3fbc:	str	xzr, [x19, #256]
    3fc0:	ldr	x0, [x19, #320]
    3fc4:	add	x0, x0, #0x1
    3fc8:	str	x0, [x19, #320]
    3fcc:	b	3f88 <d_print_comp_inner+0x32a4>
    3fd0:	cmp	w21, #0x2
    3fd4:	b.eq	4024 <d_print_comp_inner+0x3340>  // b.none
    3fd8:	cmp	w21, #0x3
    3fdc:	b.ne	4014 <d_print_comp_inner+0x3330>  // b.any
    3fe0:	ldr	x0, [x19, #256]
    3fe4:	cmp	x0, #0xff
    3fe8:	b.eq	4084 <d_print_comp_inner+0x33a0>  // b.none
    3fec:	ldr	x1, [x19, #256]
    3ff0:	add	x0, x1, #0x1
    3ff4:	str	x0, [x19, #256]
    3ff8:	mov	w0, #0x6c                  	// #108
    3ffc:	strb	w0, [x19, x1]
    4000:	strb	w0, [x19, #264]
    4004:	ldp	x21, x22, [sp, #32]
    4008:	ldp	x23, x24, [sp, #48]
    400c:	ldp	x25, x26, [sp, #64]
    4010:	b	4ea0 <d_print_comp_inner+0x41bc>
    4014:	ldp	x21, x22, [sp, #32]
    4018:	ldp	x23, x24, [sp, #48]
    401c:	ldp	x25, x26, [sp, #64]
    4020:	b	4ea0 <d_print_comp_inner+0x41bc>
    4024:	ldr	x0, [x19, #256]
    4028:	cmp	x0, #0xff
    402c:	b.eq	4058 <d_print_comp_inner+0x3374>  // b.none
    4030:	ldr	x1, [x19, #256]
    4034:	add	x0, x1, #0x1
    4038:	str	x0, [x19, #256]
    403c:	mov	w0, #0x75                  	// #117
    4040:	strb	w0, [x19, x1]
    4044:	strb	w0, [x19, #264]
    4048:	ldp	x21, x22, [sp, #32]
    404c:	ldp	x23, x24, [sp, #48]
    4050:	ldp	x25, x26, [sp, #64]
    4054:	b	4ea0 <d_print_comp_inner+0x41bc>
    4058:	strb	wzr, [x19, #255]
    405c:	ldr	x3, [x19, #272]
    4060:	ldr	x2, [x19, #280]
    4064:	mov	x1, #0xff                  	// #255
    4068:	mov	x0, x19
    406c:	blr	x3
    4070:	str	xzr, [x19, #256]
    4074:	ldr	x0, [x19, #320]
    4078:	add	x0, x0, #0x1
    407c:	str	x0, [x19, #320]
    4080:	b	4030 <d_print_comp_inner+0x334c>
    4084:	strb	wzr, [x19, #255]
    4088:	ldr	x3, [x19, #272]
    408c:	ldr	x2, [x19, #280]
    4090:	mov	x1, #0xff                  	// #255
    4094:	mov	x0, x19
    4098:	blr	x3
    409c:	str	xzr, [x19, #256]
    40a0:	ldr	x0, [x19, #320]
    40a4:	add	x0, x0, #0x1
    40a8:	str	x0, [x19, #320]
    40ac:	b	3fec <d_print_comp_inner+0x3308>
    40b0:	mov	x2, #0x2                   	// #2
    40b4:	adrp	x1, 0 <is_fnqual_component_type>
    40b8:	add	x1, x1, #0x0
    40bc:	mov	x0, x19
    40c0:	bl	848 <d_append_buffer>
    40c4:	ldp	x21, x22, [sp, #32]
    40c8:	ldp	x23, x24, [sp, #48]
    40cc:	ldp	x25, x26, [sp, #64]
    40d0:	b	4ea0 <d_print_comp_inner+0x41bc>
    40d4:	mov	x2, #0x2                   	// #2
    40d8:	adrp	x1, 0 <is_fnqual_component_type>
    40dc:	add	x1, x1, #0x0
    40e0:	mov	x0, x19
    40e4:	bl	848 <d_append_buffer>
    40e8:	ldp	x21, x22, [sp, #32]
    40ec:	ldp	x23, x24, [sp, #48]
    40f0:	ldp	x25, x26, [sp, #64]
    40f4:	b	4ea0 <d_print_comp_inner+0x41bc>
    40f8:	mov	x2, #0x5                   	// #5
    40fc:	adrp	x1, 0 <is_fnqual_component_type>
    4100:	add	x1, x1, #0x0
    4104:	mov	x0, x19
    4108:	bl	848 <d_append_buffer>
    410c:	ldp	x21, x22, [sp, #32]
    4110:	ldp	x23, x24, [sp, #48]
    4114:	ldp	x25, x26, [sp, #64]
    4118:	b	4ea0 <d_print_comp_inner+0x41bc>
    411c:	strb	wzr, [x19, #255]
    4120:	ldr	x3, [x19, #272]
    4124:	ldr	x2, [x19, #280]
    4128:	mov	x1, #0xff                  	// #255
    412c:	mov	x0, x19
    4130:	blr	x3
    4134:	str	xzr, [x19, #256]
    4138:	ldr	x0, [x19, #320]
    413c:	add	x0, x0, #0x1
    4140:	str	x0, [x19, #320]
    4144:	b	3e30 <d_print_comp_inner+0x314c>
    4148:	strb	wzr, [x19, #255]
    414c:	ldr	x3, [x19, #272]
    4150:	ldr	x2, [x19, #280]
    4154:	mov	x1, #0xff                  	// #255
    4158:	mov	x0, x19
    415c:	blr	x3
    4160:	ldr	x0, [x19, #320]
    4164:	add	x0, x0, #0x1
    4168:	str	x0, [x19, #320]
    416c:	mov	x0, #0x1                   	// #1
    4170:	str	x0, [x19, #256]
    4174:	mov	w0, #0x29                  	// #41
    4178:	strb	w0, [x19]
    417c:	strb	w0, [x19, #264]
    4180:	ldr	w0, [x22]
    4184:	cmp	w0, #0x3e
    4188:	b.eq	41c8 <d_print_comp_inner+0x34e4>  // b.none
    418c:	cmp	w21, #0x8
    4190:	b.ne	3e8c <d_print_comp_inner+0x31a8>  // b.any
    4194:	b	41f0 <d_print_comp_inner+0x350c>
    4198:	cmp	x2, #0xff
    419c:	b.ne	41c8 <d_print_comp_inner+0x34e4>  // b.any
    41a0:	strb	wzr, [x19, #255]
    41a4:	ldr	x3, [x19, #272]
    41a8:	ldr	x2, [x19, #280]
    41ac:	mov	x1, #0xff                  	// #255
    41b0:	mov	x0, x19
    41b4:	blr	x3
    41b8:	str	xzr, [x19, #256]
    41bc:	ldr	x0, [x19, #320]
    41c0:	add	x0, x0, #0x1
    41c4:	str	x0, [x19, #320]
    41c8:	ldr	x1, [x19, #256]
    41cc:	add	x0, x1, #0x1
    41d0:	str	x0, [x19, #256]
    41d4:	mov	w0, #0x2d                  	// #45
    41d8:	strb	w0, [x19, x1]
    41dc:	strb	w0, [x19, #264]
    41e0:	b	3e84 <d_print_comp_inner+0x31a0>
    41e4:	ldr	x0, [x19, #256]
    41e8:	cmp	x0, #0xff
    41ec:	b.eq	424c <d_print_comp_inner+0x3568>  // b.none
    41f0:	ldr	x1, [x19, #256]
    41f4:	add	x0, x1, #0x1
    41f8:	str	x0, [x19, #256]
    41fc:	mov	w0, #0x5b                  	// #91
    4200:	strb	w0, [x19, x1]
    4204:	strb	w0, [x19, #264]
    4208:	ldr	x2, [x22, #16]
    420c:	mov	w1, w20
    4210:	mov	x0, x19
    4214:	bl	4fe0 <d_print_comp>
    4218:	ldr	x0, [x19, #256]
    421c:	cmp	x0, #0xff
    4220:	b.eq	4278 <d_print_comp_inner+0x3594>  // b.none
    4224:	ldr	x1, [x19, #256]
    4228:	add	x0, x1, #0x1
    422c:	str	x0, [x19, #256]
    4230:	mov	w0, #0x5d                  	// #93
    4234:	strb	w0, [x19, x1]
    4238:	strb	w0, [x19, #264]
    423c:	ldp	x21, x22, [sp, #32]
    4240:	ldp	x23, x24, [sp, #48]
    4244:	ldp	x25, x26, [sp, #64]
    4248:	b	4ea0 <d_print_comp_inner+0x41bc>
    424c:	strb	wzr, [x19, #255]
    4250:	ldr	x3, [x19, #272]
    4254:	ldr	x2, [x19, #280]
    4258:	mov	x1, #0xff                  	// #255
    425c:	mov	x0, x19
    4260:	blr	x3
    4264:	str	xzr, [x19, #256]
    4268:	ldr	x0, [x19, #320]
    426c:	add	x0, x0, #0x1
    4270:	str	x0, [x19, #320]
    4274:	b	41f0 <d_print_comp_inner+0x350c>
    4278:	strb	wzr, [x19, #255]
    427c:	ldr	x3, [x19, #272]
    4280:	ldr	x2, [x19, #280]
    4284:	mov	x1, #0xff                  	// #255
    4288:	mov	x0, x19
    428c:	blr	x3
    4290:	str	xzr, [x19, #256]
    4294:	ldr	x0, [x19, #320]
    4298:	add	x0, x0, #0x1
    429c:	str	x0, [x19, #320]
    42a0:	b	4224 <d_print_comp_inner+0x3540>
    42a4:	add	x20, sp, #0x80
    42a8:	ldr	w2, [x22, #8]
    42ac:	adrp	x1, 0 <is_fnqual_component_type>
    42b0:	add	x1, x1, #0x0
    42b4:	mov	x0, x20
    42b8:	bl	0 <sprintf>
    42bc:	mov	x0, x20
    42c0:	bl	0 <strlen>
    42c4:	cbz	x0, 4fbc <d_print_comp_inner+0x42d8>
    42c8:	add	x20, sp, #0x80
    42cc:	add	x22, x0, x20
    42d0:	mov	x23, #0xff                  	// #255
    42d4:	b	42f8 <d_print_comp_inner+0x3614>
    42d8:	ldr	x0, [x19, #256]
    42dc:	add	x1, x0, #0x1
    42e0:	str	x1, [x19, #256]
    42e4:	strb	w21, [x19, x0]
    42e8:	strb	w21, [x19, #264]
    42ec:	add	x20, x20, #0x1
    42f0:	cmp	x20, x22
    42f4:	b.eq	4334 <d_print_comp_inner+0x3650>  // b.none
    42f8:	ldrb	w21, [x20]
    42fc:	ldr	x0, [x19, #256]
    4300:	cmp	x0, #0xff
    4304:	b.ne	42d8 <d_print_comp_inner+0x35f4>  // b.any
    4308:	strb	wzr, [x19, #255]
    430c:	ldr	x3, [x19, #272]
    4310:	ldr	x2, [x19, #280]
    4314:	mov	x1, x23
    4318:	mov	x0, x19
    431c:	blr	x3
    4320:	str	xzr, [x19, #256]
    4324:	ldr	x0, [x19, #320]
    4328:	add	x0, x0, #0x1
    432c:	str	x0, [x19, #320]
    4330:	b	42d8 <d_print_comp_inner+0x35f4>
    4334:	ldp	x21, x22, [sp, #32]
    4338:	ldp	x23, x24, [sp, #48]
    433c:	ldp	x25, x26, [sp, #64]
    4340:	b	4ea0 <d_print_comp_inner+0x41bc>
    4344:	adrp	x21, 0 <is_fnqual_component_type>
    4348:	add	x21, x21, #0x0
    434c:	add	x24, x21, #0xe
    4350:	mov	x25, #0xff                  	// #255
    4354:	b	4378 <d_print_comp_inner+0x3694>
    4358:	ldr	x0, [x19, #256]
    435c:	add	x1, x0, #0x1
    4360:	str	x1, [x19, #256]
    4364:	strb	w23, [x19, x0]
    4368:	strb	w23, [x19, #264]
    436c:	add	x21, x21, #0x1
    4370:	cmp	x21, x24
    4374:	b.eq	43b4 <d_print_comp_inner+0x36d0>  // b.none
    4378:	ldrb	w23, [x21]
    437c:	ldr	x0, [x19, #256]
    4380:	cmp	x0, #0xff
    4384:	b.ne	4358 <d_print_comp_inner+0x3674>  // b.any
    4388:	strb	wzr, [x19, #255]
    438c:	ldr	x3, [x19, #272]
    4390:	ldr	x2, [x19, #280]
    4394:	mov	x1, x25
    4398:	mov	x0, x19
    439c:	blr	x3
    43a0:	str	xzr, [x19, #256]
    43a4:	ldr	x0, [x19, #320]
    43a8:	add	x0, x0, #0x1
    43ac:	str	x0, [x19, #320]
    43b0:	b	4358 <d_print_comp_inner+0x3674>
    43b4:	ldr	x2, [x22, #8]
    43b8:	mov	w1, w20
    43bc:	mov	x0, x19
    43c0:	bl	4fe0 <d_print_comp>
    43c4:	ldp	x21, x22, [sp, #32]
    43c8:	ldp	x23, x24, [sp, #48]
    43cc:	ldp	x25, x26, [sp, #64]
    43d0:	b	4ea0 <d_print_comp_inner+0x41bc>
    43d4:	ldr	x2, [x22, #8]
    43d8:	mov	w1, w20
    43dc:	mov	x0, x19
    43e0:	bl	4fe0 <d_print_comp>
    43e4:	ldr	x2, [x22, #16]
    43e8:	mov	w1, w20
    43ec:	mov	x0, x19
    43f0:	bl	4fe0 <d_print_comp>
    43f4:	ldp	x21, x22, [sp, #32]
    43f8:	ldp	x23, x24, [sp, #48]
    43fc:	ldp	x25, x26, [sp, #64]
    4400:	b	4ea0 <d_print_comp_inner+0x41bc>
    4404:	ldrb	w20, [x22, #8]
    4408:	ldr	x0, [x19, #256]
    440c:	cmp	x0, #0xff
    4410:	b.eq	4438 <d_print_comp_inner+0x3754>  // b.none
    4414:	ldr	x0, [x19, #256]
    4418:	add	x1, x0, #0x1
    441c:	str	x1, [x19, #256]
    4420:	strb	w20, [x19, x0]
    4424:	strb	w20, [x19, #264]
    4428:	ldp	x21, x22, [sp, #32]
    442c:	ldp	x23, x24, [sp, #48]
    4430:	ldp	x25, x26, [sp, #64]
    4434:	b	4ea0 <d_print_comp_inner+0x41bc>
    4438:	strb	wzr, [x19, #255]
    443c:	ldr	x3, [x19, #272]
    4440:	ldr	x2, [x19, #280]
    4444:	mov	x1, #0xff                  	// #255
    4448:	mov	x0, x19
    444c:	blr	x3
    4450:	str	xzr, [x19, #256]
    4454:	ldr	x0, [x19, #320]
    4458:	add	x0, x0, #0x1
    445c:	str	x0, [x19, #320]
    4460:	b	4414 <d_print_comp_inner+0x3730>
    4464:	adrp	x21, 0 <is_fnqual_component_type>
    4468:	add	x21, x21, #0x0
    446c:	add	x24, x21, #0xa
    4470:	mov	x25, #0xff                  	// #255
    4474:	b	4498 <d_print_comp_inner+0x37b4>
    4478:	ldr	x0, [x19, #256]
    447c:	add	x1, x0, #0x1
    4480:	str	x1, [x19, #256]
    4484:	strb	w23, [x19, x0]
    4488:	strb	w23, [x19, #264]
    448c:	add	x21, x21, #0x1
    4490:	cmp	x21, x24
    4494:	b.eq	44d4 <d_print_comp_inner+0x37f0>  // b.none
    4498:	ldrb	w23, [x21]
    449c:	ldr	x0, [x19, #256]
    44a0:	cmp	x0, #0xff
    44a4:	b.ne	4478 <d_print_comp_inner+0x3794>  // b.any
    44a8:	strb	wzr, [x19, #255]
    44ac:	ldr	x3, [x19, #272]
    44b0:	ldr	x2, [x19, #280]
    44b4:	mov	x1, x25
    44b8:	mov	x0, x19
    44bc:	blr	x3
    44c0:	str	xzr, [x19, #256]
    44c4:	ldr	x0, [x19, #320]
    44c8:	add	x0, x0, #0x1
    44cc:	str	x0, [x19, #320]
    44d0:	b	4478 <d_print_comp_inner+0x3794>
    44d4:	ldr	x2, [x22, #8]
    44d8:	mov	w1, w20
    44dc:	mov	x0, x19
    44e0:	bl	4fe0 <d_print_comp>
    44e4:	ldr	x0, [x19, #256]
    44e8:	cmp	x0, #0xff
    44ec:	b.eq	4518 <d_print_comp_inner+0x3834>  // b.none
    44f0:	ldr	x1, [x19, #256]
    44f4:	add	x0, x1, #0x1
    44f8:	str	x0, [x19, #256]
    44fc:	mov	w0, #0x29                  	// #41
    4500:	strb	w0, [x19, x1]
    4504:	strb	w0, [x19, #264]
    4508:	ldp	x21, x22, [sp, #32]
    450c:	ldp	x23, x24, [sp, #48]
    4510:	ldp	x25, x26, [sp, #64]
    4514:	b	4ea0 <d_print_comp_inner+0x41bc>
    4518:	strb	wzr, [x19, #255]
    451c:	ldr	x3, [x19, #272]
    4520:	ldr	x2, [x19, #280]
    4524:	mov	x1, #0xff                  	// #255
    4528:	mov	x0, x19
    452c:	blr	x3
    4530:	str	xzr, [x19, #256]
    4534:	ldr	x0, [x19, #320]
    4538:	add	x0, x0, #0x1
    453c:	str	x0, [x19, #320]
    4540:	b	44f0 <d_print_comp_inner+0x380c>
    4544:	ldr	x1, [x22, #8]
    4548:	mov	x0, x19
    454c:	bl	958 <d_find_pack>
    4550:	cbz	x0, 4578 <d_print_comp_inner+0x3894>
    4554:	stp	x27, x28, [sp, #80]
    4558:	bl	a50 <d_pack_length>
    455c:	mov	w25, w0
    4560:	ldr	x27, [x22, #8]
    4564:	cmp	w0, #0x0
    4568:	b.le	4fcc <d_print_comp_inner+0x42e8>
    456c:	sub	w28, w0, #0x1
    4570:	mov	x26, #0xff                  	// #255
    4574:	b	4614 <d_print_comp_inner+0x3930>
    4578:	ldr	x2, [x22, #8]
    457c:	mov	w1, w20
    4580:	mov	x0, x19
    4584:	bl	63cc <d_print_subexpr>
    4588:	mov	x2, #0x3                   	// #3
    458c:	adrp	x1, 0 <is_fnqual_component_type>
    4590:	add	x1, x1, #0x0
    4594:	mov	x0, x19
    4598:	bl	848 <d_append_buffer>
    459c:	ldp	x21, x22, [sp, #32]
    45a0:	ldp	x23, x24, [sp, #48]
    45a4:	ldp	x25, x26, [sp, #64]
    45a8:	b	4ea0 <d_print_comp_inner+0x41bc>
    45ac:	ldr	x0, [x19, #256]
    45b0:	add	x1, x0, #0x1
    45b4:	str	x1, [x19, #256]
    45b8:	strb	w23, [x19, x0]
    45bc:	strb	w23, [x19, #264]
    45c0:	add	x22, x22, #0x1
    45c4:	cmp	x22, x24
    45c8:	b.eq	4608 <d_print_comp_inner+0x3924>  // b.none
    45cc:	ldrb	w23, [x22]
    45d0:	ldr	x0, [x19, #256]
    45d4:	cmp	x0, #0xff
    45d8:	b.ne	45ac <d_print_comp_inner+0x38c8>  // b.any
    45dc:	strb	wzr, [x19, #255]
    45e0:	ldr	x3, [x19, #272]
    45e4:	ldr	x2, [x19, #280]
    45e8:	mov	x1, x26
    45ec:	mov	x0, x19
    45f0:	blr	x3
    45f4:	str	xzr, [x19, #256]
    45f8:	ldr	x0, [x19, #320]
    45fc:	add	x0, x0, #0x1
    4600:	str	x0, [x19, #320]
    4604:	b	45ac <d_print_comp_inner+0x38c8>
    4608:	add	w21, w21, #0x1
    460c:	cmp	w25, w21
    4610:	b.eq	4640 <d_print_comp_inner+0x395c>  // b.none
    4614:	str	w21, [x19, #316]
    4618:	mov	x2, x27
    461c:	mov	w1, w20
    4620:	mov	x0, x19
    4624:	bl	4fe0 <d_print_comp>
    4628:	cmp	w28, w21
    462c:	b.le	4608 <d_print_comp_inner+0x3924>
    4630:	adrp	x0, 0 <is_fnqual_component_type>
    4634:	add	x22, x0, #0x0
    4638:	add	x24, x22, #0x2
    463c:	b	45cc <d_print_comp_inner+0x38e8>
    4640:	ldp	x21, x22, [sp, #32]
    4644:	ldp	x23, x24, [sp, #48]
    4648:	ldp	x25, x26, [sp, #64]
    464c:	ldp	x27, x28, [sp, #80]
    4650:	b	4ea0 <d_print_comp_inner+0x41bc>
    4654:	ldr	x23, [x22, #8]
    4658:	cbnz	x23, 46dc <d_print_comp_inner+0x39f8>
    465c:	adrp	x20, 0 <is_fnqual_component_type>
    4660:	add	x20, x20, #0x0
    4664:	add	x22, x20, #0x4
    4668:	mov	x23, #0xff                  	// #255
    466c:	b	4690 <d_print_comp_inner+0x39ac>
    4670:	ldr	x0, [x19, #256]
    4674:	add	x1, x0, #0x1
    4678:	str	x1, [x19, #256]
    467c:	strb	w21, [x19, x0]
    4680:	strb	w21, [x19, #264]
    4684:	add	x20, x20, #0x1
    4688:	cmp	x22, x20
    468c:	b.eq	46cc <d_print_comp_inner+0x39e8>  // b.none
    4690:	ldrb	w21, [x20]
    4694:	ldr	x0, [x19, #256]
    4698:	cmp	x0, #0xff
    469c:	b.ne	4670 <d_print_comp_inner+0x398c>  // b.any
    46a0:	strb	wzr, [x19, #255]
    46a4:	ldr	x3, [x19, #272]
    46a8:	ldr	x2, [x19, #280]
    46ac:	mov	x1, x23
    46b0:	mov	x0, x19
    46b4:	blr	x3
    46b8:	str	xzr, [x19, #256]
    46bc:	ldr	x0, [x19, #320]
    46c0:	add	x0, x0, #0x1
    46c4:	str	x0, [x19, #320]
    46c8:	b	4670 <d_print_comp_inner+0x398c>
    46cc:	ldp	x21, x22, [sp, #32]
    46d0:	ldp	x23, x24, [sp, #48]
    46d4:	ldp	x25, x26, [sp, #64]
    46d8:	b	4ea0 <d_print_comp_inner+0x41bc>
    46dc:	adrp	x20, 0 <is_fnqual_component_type>
    46e0:	add	x20, x20, #0x0
    46e4:	add	x22, x20, #0x6
    46e8:	mov	x24, #0xff                  	// #255
    46ec:	b	4710 <d_print_comp_inner+0x3a2c>
    46f0:	ldr	x0, [x19, #256]
    46f4:	add	x1, x0, #0x1
    46f8:	str	x1, [x19, #256]
    46fc:	strb	w21, [x19, x0]
    4700:	strb	w21, [x19, #264]
    4704:	add	x20, x20, #0x1
    4708:	cmp	x22, x20
    470c:	b.eq	474c <d_print_comp_inner+0x3a68>  // b.none
    4710:	ldrb	w21, [x20]
    4714:	ldr	x0, [x19, #256]
    4718:	cmp	x0, #0xff
    471c:	b.ne	46f0 <d_print_comp_inner+0x3a0c>  // b.any
    4720:	strb	wzr, [x19, #255]
    4724:	ldr	x3, [x19, #272]
    4728:	ldr	x2, [x19, #280]
    472c:	mov	x1, x24
    4730:	mov	x0, x19
    4734:	blr	x3
    4738:	str	xzr, [x19, #256]
    473c:	ldr	x0, [x19, #320]
    4740:	add	x0, x0, #0x1
    4744:	str	x0, [x19, #320]
    4748:	b	46f0 <d_print_comp_inner+0x3a0c>
    474c:	add	x20, sp, #0x80
    4750:	mov	w2, w23
    4754:	adrp	x1, 0 <is_fnqual_component_type>
    4758:	add	x1, x1, #0x0
    475c:	mov	x0, x20
    4760:	bl	0 <sprintf>
    4764:	mov	x0, x20
    4768:	bl	0 <strlen>
    476c:	cbz	x0, 47dc <d_print_comp_inner+0x3af8>
    4770:	add	x20, sp, #0x80
    4774:	add	x22, x20, x0
    4778:	mov	x23, #0xff                  	// #255
    477c:	b	47a0 <d_print_comp_inner+0x3abc>
    4780:	ldr	x0, [x19, #256]
    4784:	add	x1, x0, #0x1
    4788:	str	x1, [x19, #256]
    478c:	strb	w21, [x19, x0]
    4790:	strb	w21, [x19, #264]
    4794:	add	x20, x20, #0x1
    4798:	cmp	x22, x20
    479c:	b.eq	47dc <d_print_comp_inner+0x3af8>  // b.none
    47a0:	ldrb	w21, [x20]
    47a4:	ldr	x0, [x19, #256]
    47a8:	cmp	x0, #0xff
    47ac:	b.ne	4780 <d_print_comp_inner+0x3a9c>  // b.any
    47b0:	strb	wzr, [x19, #255]
    47b4:	ldr	x3, [x19, #272]
    47b8:	ldr	x2, [x19, #280]
    47bc:	mov	x1, x23
    47c0:	mov	x0, x19
    47c4:	blr	x3
    47c8:	str	xzr, [x19, #256]
    47cc:	ldr	x0, [x19, #320]
    47d0:	add	x0, x0, #0x1
    47d4:	str	x0, [x19, #320]
    47d8:	b	4780 <d_print_comp_inner+0x3a9c>
    47dc:	ldr	x0, [x19, #256]
    47e0:	cmp	x0, #0xff
    47e4:	b.eq	4810 <d_print_comp_inner+0x3b2c>  // b.none
    47e8:	ldr	x1, [x19, #256]
    47ec:	add	x0, x1, #0x1
    47f0:	str	x0, [x19, #256]
    47f4:	mov	w0, #0x7d                  	// #125
    47f8:	strb	w0, [x19, x1]
    47fc:	strb	w0, [x19, #264]
    4800:	ldp	x21, x22, [sp, #32]
    4804:	ldp	x23, x24, [sp, #48]
    4808:	ldp	x25, x26, [sp, #64]
    480c:	b	4ea0 <d_print_comp_inner+0x41bc>
    4810:	strb	wzr, [x19, #255]
    4814:	ldr	x3, [x19, #272]
    4818:	ldr	x2, [x19, #280]
    481c:	mov	x1, #0xff                  	// #255
    4820:	mov	x0, x19
    4824:	blr	x3
    4828:	str	xzr, [x19, #256]
    482c:	ldr	x0, [x19, #320]
    4830:	add	x0, x0, #0x1
    4834:	str	x0, [x19, #320]
    4838:	b	47e8 <d_print_comp_inner+0x3b04>
    483c:	adrp	x21, 0 <is_fnqual_component_type>
    4840:	add	x21, x21, #0x0
    4844:	add	x24, x21, #0x1d
    4848:	mov	x25, #0xff                  	// #255
    484c:	b	4870 <d_print_comp_inner+0x3b8c>
    4850:	ldr	x0, [x19, #256]
    4854:	add	x1, x0, #0x1
    4858:	str	x1, [x19, #256]
    485c:	strb	w23, [x19, x0]
    4860:	strb	w23, [x19, #264]
    4864:	add	x21, x21, #0x1
    4868:	cmp	x21, x24
    486c:	b.eq	48ac <d_print_comp_inner+0x3bc8>  // b.none
    4870:	ldrb	w23, [x21]
    4874:	ldr	x0, [x19, #256]
    4878:	cmp	x0, #0xff
    487c:	b.ne	4850 <d_print_comp_inner+0x3b6c>  // b.any
    4880:	strb	wzr, [x19, #255]
    4884:	ldr	x3, [x19, #272]
    4888:	ldr	x2, [x19, #280]
    488c:	mov	x1, x25
    4890:	mov	x0, x19
    4894:	blr	x3
    4898:	str	xzr, [x19, #256]
    489c:	ldr	x0, [x19, #320]
    48a0:	add	x0, x0, #0x1
    48a4:	str	x0, [x19, #320]
    48a8:	b	4850 <d_print_comp_inner+0x3b6c>
    48ac:	ldr	x2, [x22, #8]
    48b0:	mov	w1, w20
    48b4:	mov	x0, x19
    48b8:	bl	4fe0 <d_print_comp>
    48bc:	ldp	x21, x22, [sp, #32]
    48c0:	ldp	x23, x24, [sp, #48]
    48c4:	ldp	x25, x26, [sp, #64]
    48c8:	b	4ea0 <d_print_comp_inner+0x41bc>
    48cc:	adrp	x21, 0 <is_fnqual_component_type>
    48d0:	add	x21, x21, #0x0
    48d4:	add	x24, x21, #0x1c
    48d8:	mov	x25, #0xff                  	// #255
    48dc:	b	4900 <d_print_comp_inner+0x3c1c>
    48e0:	ldr	x0, [x19, #256]
    48e4:	add	x1, x0, #0x1
    48e8:	str	x1, [x19, #256]
    48ec:	strb	w23, [x19, x0]
    48f0:	strb	w23, [x19, #264]
    48f4:	add	x21, x21, #0x1
    48f8:	cmp	x21, x24
    48fc:	b.eq	493c <d_print_comp_inner+0x3c58>  // b.none
    4900:	ldrb	w23, [x21]
    4904:	ldr	x0, [x19, #256]
    4908:	cmp	x0, #0xff
    490c:	b.ne	48e0 <d_print_comp_inner+0x3bfc>  // b.any
    4910:	strb	wzr, [x19, #255]
    4914:	ldr	x3, [x19, #272]
    4918:	ldr	x2, [x19, #280]
    491c:	mov	x1, x25
    4920:	mov	x0, x19
    4924:	blr	x3
    4928:	str	xzr, [x19, #256]
    492c:	ldr	x0, [x19, #320]
    4930:	add	x0, x0, #0x1
    4934:	str	x0, [x19, #320]
    4938:	b	48e0 <d_print_comp_inner+0x3bfc>
    493c:	ldr	x2, [x22, #8]
    4940:	mov	w1, w20
    4944:	mov	x0, x19
    4948:	bl	4fe0 <d_print_comp>
    494c:	ldp	x21, x22, [sp, #32]
    4950:	ldp	x23, x24, [sp, #48]
    4954:	ldp	x25, x26, [sp, #64]
    4958:	b	4ea0 <d_print_comp_inner+0x41bc>
    495c:	adrp	x21, 0 <is_fnqual_component_type>
    4960:	add	x21, x21, #0x0
    4964:	add	x24, x21, #0x8
    4968:	mov	x25, #0xff                  	// #255
    496c:	b	4990 <d_print_comp_inner+0x3cac>
    4970:	ldr	x0, [x19, #256]
    4974:	add	x1, x0, #0x1
    4978:	str	x1, [x19, #256]
    497c:	strb	w23, [x19, x0]
    4980:	strb	w23, [x19, #264]
    4984:	add	x21, x21, #0x1
    4988:	cmp	x21, x24
    498c:	b.eq	49cc <d_print_comp_inner+0x3ce8>  // b.none
    4990:	ldrb	w23, [x21]
    4994:	ldr	x0, [x19, #256]
    4998:	cmp	x0, #0xff
    499c:	b.ne	4970 <d_print_comp_inner+0x3c8c>  // b.any
    49a0:	strb	wzr, [x19, #255]
    49a4:	ldr	x3, [x19, #272]
    49a8:	ldr	x2, [x19, #280]
    49ac:	mov	x1, x25
    49b0:	mov	x0, x19
    49b4:	blr	x3
    49b8:	str	xzr, [x19, #256]
    49bc:	ldr	x0, [x19, #320]
    49c0:	add	x0, x0, #0x1
    49c4:	str	x0, [x19, #320]
    49c8:	b	4970 <d_print_comp_inner+0x3c8c>
    49cc:	ldr	w0, [x19, #312]
    49d0:	add	w0, w0, #0x1
    49d4:	str	w0, [x19, #312]
    49d8:	ldr	x2, [x22, #8]
    49dc:	mov	w1, w20
    49e0:	mov	x0, x19
    49e4:	bl	4fe0 <d_print_comp>
    49e8:	ldr	w0, [x19, #312]
    49ec:	sub	w0, w0, #0x1
    49f0:	str	w0, [x19, #312]
    49f4:	adrp	x20, 0 <is_fnqual_component_type>
    49f8:	add	x20, x20, #0x0
    49fc:	add	x23, x20, #0x2
    4a00:	mov	x24, #0xff                  	// #255
    4a04:	b	4a28 <d_print_comp_inner+0x3d44>
    4a08:	ldr	x0, [x19, #256]
    4a0c:	add	x1, x0, #0x1
    4a10:	str	x1, [x19, #256]
    4a14:	strb	w21, [x19, x0]
    4a18:	strb	w21, [x19, #264]
    4a1c:	add	x20, x20, #0x1
    4a20:	cmp	x20, x23
    4a24:	b.eq	4a64 <d_print_comp_inner+0x3d80>  // b.none
    4a28:	ldrb	w21, [x20]
    4a2c:	ldr	x0, [x19, #256]
    4a30:	cmp	x0, #0xff
    4a34:	b.ne	4a08 <d_print_comp_inner+0x3d24>  // b.any
    4a38:	strb	wzr, [x19, #255]
    4a3c:	ldr	x3, [x19, #272]
    4a40:	ldr	x2, [x19, #280]
    4a44:	mov	x1, x24
    4a48:	mov	x0, x19
    4a4c:	blr	x3
    4a50:	str	xzr, [x19, #256]
    4a54:	ldr	x0, [x19, #320]
    4a58:	add	x0, x0, #0x1
    4a5c:	str	x0, [x19, #320]
    4a60:	b	4a08 <d_print_comp_inner+0x3d24>
    4a64:	ldr	w2, [x22, #16]
    4a68:	add	x20, sp, #0x80
    4a6c:	add	w2, w2, #0x1
    4a70:	adrp	x1, 0 <is_fnqual_component_type>
    4a74:	add	x1, x1, #0x0
    4a78:	mov	x0, x20
    4a7c:	bl	0 <sprintf>
    4a80:	mov	x0, x20
    4a84:	bl	0 <strlen>
    4a88:	cbz	x0, 4af8 <d_print_comp_inner+0x3e14>
    4a8c:	add	x20, sp, #0x80
    4a90:	add	x22, x0, x20
    4a94:	mov	x23, #0xff                  	// #255
    4a98:	b	4abc <d_print_comp_inner+0x3dd8>
    4a9c:	ldr	x0, [x19, #256]
    4aa0:	add	x1, x0, #0x1
    4aa4:	str	x1, [x19, #256]
    4aa8:	strb	w21, [x19, x0]
    4aac:	strb	w21, [x19, #264]
    4ab0:	add	x20, x20, #0x1
    4ab4:	cmp	x20, x22
    4ab8:	b.eq	4af8 <d_print_comp_inner+0x3e14>  // b.none
    4abc:	ldrb	w21, [x20]
    4ac0:	ldr	x0, [x19, #256]
    4ac4:	cmp	x0, #0xff
    4ac8:	b.ne	4a9c <d_print_comp_inner+0x3db8>  // b.any
    4acc:	strb	wzr, [x19, #255]
    4ad0:	ldr	x3, [x19, #272]
    4ad4:	ldr	x2, [x19, #280]
    4ad8:	mov	x1, x23
    4adc:	mov	x0, x19
    4ae0:	blr	x3
    4ae4:	str	xzr, [x19, #256]
    4ae8:	ldr	x0, [x19, #320]
    4aec:	add	x0, x0, #0x1
    4af0:	str	x0, [x19, #320]
    4af4:	b	4a9c <d_print_comp_inner+0x3db8>
    4af8:	ldr	x0, [x19, #256]
    4afc:	cmp	x0, #0xff
    4b00:	b.eq	4b2c <d_print_comp_inner+0x3e48>  // b.none
    4b04:	ldr	x1, [x19, #256]
    4b08:	add	x0, x1, #0x1
    4b0c:	str	x0, [x19, #256]
    4b10:	mov	w0, #0x7d                  	// #125
    4b14:	strb	w0, [x19, x1]
    4b18:	strb	w0, [x19, #264]
    4b1c:	ldp	x21, x22, [sp, #32]
    4b20:	ldp	x23, x24, [sp, #48]
    4b24:	ldp	x25, x26, [sp, #64]
    4b28:	b	4ea0 <d_print_comp_inner+0x41bc>
    4b2c:	strb	wzr, [x19, #255]
    4b30:	ldr	x3, [x19, #272]
    4b34:	ldr	x2, [x19, #280]
    4b38:	mov	x1, #0xff                  	// #255
    4b3c:	mov	x0, x19
    4b40:	blr	x3
    4b44:	str	xzr, [x19, #256]
    4b48:	ldr	x0, [x19, #320]
    4b4c:	add	x0, x0, #0x1
    4b50:	str	x0, [x19, #320]
    4b54:	b	4b04 <d_print_comp_inner+0x3e20>
    4b58:	adrp	x20, 0 <is_fnqual_component_type>
    4b5c:	add	x20, x20, #0x0
    4b60:	add	x23, x20, #0xe
    4b64:	mov	x24, #0xff                  	// #255
    4b68:	b	4b8c <d_print_comp_inner+0x3ea8>
    4b6c:	ldr	x0, [x19, #256]
    4b70:	add	x1, x0, #0x1
    4b74:	str	x1, [x19, #256]
    4b78:	strb	w21, [x19, x0]
    4b7c:	strb	w21, [x19, #264]
    4b80:	add	x20, x20, #0x1
    4b84:	cmp	x20, x23
    4b88:	b.eq	4bc8 <d_print_comp_inner+0x3ee4>  // b.none
    4b8c:	ldrb	w21, [x20]
    4b90:	ldr	x0, [x19, #256]
    4b94:	cmp	x0, #0xff
    4b98:	b.ne	4b6c <d_print_comp_inner+0x3e88>  // b.any
    4b9c:	strb	wzr, [x19, #255]
    4ba0:	ldr	x3, [x19, #272]
    4ba4:	ldr	x2, [x19, #280]
    4ba8:	mov	x1, x24
    4bac:	mov	x0, x19
    4bb0:	blr	x3
    4bb4:	str	xzr, [x19, #256]
    4bb8:	ldr	x0, [x19, #320]
    4bbc:	add	x0, x0, #0x1
    4bc0:	str	x0, [x19, #320]
    4bc4:	b	4b6c <d_print_comp_inner+0x3e88>
    4bc8:	ldr	x2, [x22, #8]
    4bcc:	add	x20, sp, #0x80
    4bd0:	add	w2, w2, #0x1
    4bd4:	adrp	x1, 0 <is_fnqual_component_type>
    4bd8:	add	x1, x1, #0x0
    4bdc:	mov	x0, x20
    4be0:	bl	0 <sprintf>
    4be4:	mov	x0, x20
    4be8:	bl	0 <strlen>
    4bec:	cbz	x0, 4c5c <d_print_comp_inner+0x3f78>
    4bf0:	add	x20, sp, #0x80
    4bf4:	add	x22, x0, x20
    4bf8:	mov	x23, #0xff                  	// #255
    4bfc:	b	4c20 <d_print_comp_inner+0x3f3c>
    4c00:	ldr	x0, [x19, #256]
    4c04:	add	x1, x0, #0x1
    4c08:	str	x1, [x19, #256]
    4c0c:	strb	w21, [x19, x0]
    4c10:	strb	w21, [x19, #264]
    4c14:	add	x20, x20, #0x1
    4c18:	cmp	x20, x22
    4c1c:	b.eq	4c5c <d_print_comp_inner+0x3f78>  // b.none
    4c20:	ldrb	w21, [x20]
    4c24:	ldr	x0, [x19, #256]
    4c28:	cmp	x0, #0xff
    4c2c:	b.ne	4c00 <d_print_comp_inner+0x3f1c>  // b.any
    4c30:	strb	wzr, [x19, #255]
    4c34:	ldr	x3, [x19, #272]
    4c38:	ldr	x2, [x19, #280]
    4c3c:	mov	x1, x23
    4c40:	mov	x0, x19
    4c44:	blr	x3
    4c48:	str	xzr, [x19, #256]
    4c4c:	ldr	x0, [x19, #320]
    4c50:	add	x0, x0, #0x1
    4c54:	str	x0, [x19, #320]
    4c58:	b	4c00 <d_print_comp_inner+0x3f1c>
    4c5c:	ldr	x0, [x19, #256]
    4c60:	cmp	x0, #0xff
    4c64:	b.eq	4c90 <d_print_comp_inner+0x3fac>  // b.none
    4c68:	ldr	x1, [x19, #256]
    4c6c:	add	x0, x1, #0x1
    4c70:	str	x0, [x19, #256]
    4c74:	mov	w0, #0x7d                  	// #125
    4c78:	strb	w0, [x19, x1]
    4c7c:	strb	w0, [x19, #264]
    4c80:	ldp	x21, x22, [sp, #32]
    4c84:	ldp	x23, x24, [sp, #48]
    4c88:	ldp	x25, x26, [sp, #64]
    4c8c:	b	4ea0 <d_print_comp_inner+0x41bc>
    4c90:	strb	wzr, [x19, #255]
    4c94:	ldr	x3, [x19, #272]
    4c98:	ldr	x2, [x19, #280]
    4c9c:	mov	x1, #0xff                  	// #255
    4ca0:	mov	x0, x19
    4ca4:	blr	x3
    4ca8:	str	xzr, [x19, #256]
    4cac:	ldr	x0, [x19, #320]
    4cb0:	add	x0, x0, #0x1
    4cb4:	str	x0, [x19, #320]
    4cb8:	b	4c68 <d_print_comp_inner+0x3f84>
    4cbc:	ldr	x2, [x22, #8]
    4cc0:	mov	w1, w20
    4cc4:	mov	x0, x19
    4cc8:	bl	4fe0 <d_print_comp>
    4ccc:	adrp	x21, 0 <is_fnqual_component_type>
    4cd0:	add	x21, x21, #0x0
    4cd4:	add	x24, x21, #0x8
    4cd8:	mov	x25, #0xff                  	// #255
    4cdc:	b	4d00 <d_print_comp_inner+0x401c>
    4ce0:	ldr	x0, [x19, #256]
    4ce4:	add	x1, x0, #0x1
    4ce8:	str	x1, [x19, #256]
    4cec:	strb	w23, [x19, x0]
    4cf0:	strb	w23, [x19, #264]
    4cf4:	add	x21, x21, #0x1
    4cf8:	cmp	x21, x24
    4cfc:	b.eq	4d3c <d_print_comp_inner+0x4058>  // b.none
    4d00:	ldrb	w23, [x21]
    4d04:	ldr	x0, [x19, #256]
    4d08:	cmp	x0, #0xff
    4d0c:	b.ne	4ce0 <d_print_comp_inner+0x3ffc>  // b.any
    4d10:	strb	wzr, [x19, #255]
    4d14:	ldr	x3, [x19, #272]
    4d18:	ldr	x2, [x19, #280]
    4d1c:	mov	x1, x25
    4d20:	mov	x0, x19
    4d24:	blr	x3
    4d28:	str	xzr, [x19, #256]
    4d2c:	ldr	x0, [x19, #320]
    4d30:	add	x0, x0, #0x1
    4d34:	str	x0, [x19, #320]
    4d38:	b	4ce0 <d_print_comp_inner+0x3ffc>
    4d3c:	ldr	x2, [x22, #16]
    4d40:	mov	w1, w20
    4d44:	mov	x0, x19
    4d48:	bl	4fe0 <d_print_comp>
    4d4c:	ldr	x0, [x19, #256]
    4d50:	cmp	x0, #0xff
    4d54:	b.eq	4d80 <d_print_comp_inner+0x409c>  // b.none
    4d58:	ldr	x1, [x19, #256]
    4d5c:	add	x0, x1, #0x1
    4d60:	str	x0, [x19, #256]
    4d64:	mov	w0, #0x5d                  	// #93
    4d68:	strb	w0, [x19, x1]
    4d6c:	strb	w0, [x19, #264]
    4d70:	ldp	x21, x22, [sp, #32]
    4d74:	ldp	x23, x24, [sp, #48]
    4d78:	ldp	x25, x26, [sp, #64]
    4d7c:	b	4ea0 <d_print_comp_inner+0x41bc>
    4d80:	strb	wzr, [x19, #255]
    4d84:	ldr	x3, [x19, #272]
    4d88:	ldr	x2, [x19, #280]
    4d8c:	mov	x1, #0xff                  	// #255
    4d90:	mov	x0, x19
    4d94:	blr	x3
    4d98:	str	xzr, [x19, #256]
    4d9c:	ldr	x0, [x19, #320]
    4da0:	add	x0, x0, #0x1
    4da4:	str	x0, [x19, #320]
    4da8:	b	4d58 <d_print_comp_inner+0x4074>
    4dac:	ldp	x23, x24, [sp, #48]
    4db0:	ldp	x25, x26, [sp, #64]
    4db4:	mov	w0, #0x1                   	// #1
    4db8:	str	w0, [x19, #304]
    4dbc:	ldp	x21, x22, [sp, #32]
    4dc0:	b	4ea0 <d_print_comp_inner+0x41bc>
    4dc4:	cmp	w27, #0x2
    4dc8:	b.eq	1374 <d_print_comp_inner+0x690>  // b.none
    4dcc:	ldr	w0, [x21]
    4dd0:	cmp	w0, #0x4
    4dd4:	b.eq	1444 <d_print_comp_inner+0x760>  // b.none
    4dd8:	ldr	x2, [x22, #16]
    4ddc:	mov	w1, w20
    4de0:	mov	x0, x19
    4de4:	bl	4fe0 <d_print_comp>
    4de8:	ldr	w0, [x21]
    4dec:	cmp	w0, #0x4
    4df0:	b.eq	1458 <d_print_comp_inner+0x774>  // b.none
    4df4:	cbz	w23, 14d8 <d_print_comp_inner+0x7f4>
    4df8:	sub	w21, w23, #0x1
    4dfc:	add	x0, sp, #0x80
    4e00:	add	x21, x0, x21, lsl #5
    4e04:	mov	w22, #0x20                  	// #32
    4e08:	mov	x25, #0xff                  	// #255
    4e0c:	b	1490 <d_print_comp_inner+0x7ac>
    4e10:	mov	w21, w2
    4e14:	b	4e1c <d_print_comp_inner+0x4138>
    4e18:	mov	x22, x0
    4e1c:	ldr	x0, [x19, #296]
    4e20:	str	x0, [sp, #128]
    4e24:	add	x0, sp, #0x80
    4e28:	str	x0, [x19, #296]
    4e2c:	str	x22, [sp, #136]
    4e30:	str	wzr, [sp, #144]
    4e34:	ldr	x0, [x19, #288]
    4e38:	str	x0, [sp, #152]
    4e3c:	ldr	x2, [x22, #8]
    4e40:	b	26b4 <d_print_comp_inner+0x19d0>
    4e44:	mov	x22, x0
    4e48:	b	4e1c <d_print_comp_inner+0x4138>
    4e4c:	ldr	x3, [x19, #328]
    4e50:	mov	x1, x3
    4e54:	cbz	x3, 4e78 <d_print_comp_inner+0x4194>
    4e58:	ldr	x2, [x1]
    4e5c:	cmp	x2, x0
    4e60:	b.eq	2600 <d_print_comp_inner+0x191c>  // b.none
    4e64:	cmp	x3, x1
    4e68:	ccmp	x2, x22, #0x0, ne  // ne = any
    4e6c:	b.eq	2600 <d_print_comp_inner+0x191c>  // b.none
    4e70:	ldr	x1, [x1, #8]
    4e74:	cbnz	x1, 4e58 <d_print_comp_inner+0x4174>
    4e78:	ldr	x23, [x19, #288]
    4e7c:	ldr	x1, [x4, #8]
    4e80:	str	x1, [x19, #288]
    4e84:	mov	x1, x0
    4e88:	mov	x0, x19
    4e8c:	bl	920 <d_lookup_template_argument>
    4e90:	cbz	x0, 2630 <d_print_comp_inner+0x194c>
    4e94:	mov	w21, #0x1                   	// #1
    4e98:	b	2614 <d_print_comp_inner+0x1930>
    4e9c:	ldp	x21, x22, [sp, #32]
    4ea0:	ldp	x19, x20, [sp, #16]
    4ea4:	ldp	x29, x30, [sp], #256
    4ea8:	ret
    4eac:	ldp	x21, x22, [sp, #32]
    4eb0:	ldp	x23, x24, [sp, #48]
    4eb4:	ldp	x25, x26, [sp, #64]
    4eb8:	b	4ea0 <d_print_comp_inner+0x41bc>
    4ebc:	ldp	x21, x22, [sp, #32]
    4ec0:	ldp	x23, x24, [sp, #48]
    4ec4:	ldp	x25, x26, [sp, #64]
    4ec8:	b	4ea0 <d_print_comp_inner+0x41bc>
    4ecc:	ldp	x21, x22, [sp, #32]
    4ed0:	ldp	x23, x24, [sp, #48]
    4ed4:	ldp	x25, x26, [sp, #64]
    4ed8:	b	4ea0 <d_print_comp_inner+0x41bc>
    4edc:	ldp	x21, x22, [sp, #32]
    4ee0:	ldp	x23, x24, [sp, #48]
    4ee4:	ldp	x25, x26, [sp, #64]
    4ee8:	b	4ea0 <d_print_comp_inner+0x41bc>
    4eec:	ldp	x21, x22, [sp, #32]
    4ef0:	ldp	x23, x24, [sp, #48]
    4ef4:	ldp	x25, x26, [sp, #64]
    4ef8:	b	4ea0 <d_print_comp_inner+0x41bc>
    4efc:	ldp	x21, x22, [sp, #32]
    4f00:	ldp	x23, x24, [sp, #48]
    4f04:	ldp	x25, x26, [sp, #64]
    4f08:	b	4ea0 <d_print_comp_inner+0x41bc>
    4f0c:	ldp	x21, x22, [sp, #32]
    4f10:	ldp	x23, x24, [sp, #48]
    4f14:	ldp	x25, x26, [sp, #64]
    4f18:	b	4ea0 <d_print_comp_inner+0x41bc>
    4f1c:	ldp	x21, x22, [sp, #32]
    4f20:	ldp	x23, x24, [sp, #48]
    4f24:	ldp	x25, x26, [sp, #64]
    4f28:	b	4ea0 <d_print_comp_inner+0x41bc>
    4f2c:	ldp	x21, x22, [sp, #32]
    4f30:	ldp	x23, x24, [sp, #48]
    4f34:	ldp	x25, x26, [sp, #64]
    4f38:	b	4ea0 <d_print_comp_inner+0x41bc>
    4f3c:	ldp	x21, x22, [sp, #32]
    4f40:	ldp	x23, x24, [sp, #48]
    4f44:	ldp	x25, x26, [sp, #64]
    4f48:	b	4ea0 <d_print_comp_inner+0x41bc>
    4f4c:	ldp	x21, x22, [sp, #32]
    4f50:	ldp	x23, x24, [sp, #48]
    4f54:	ldp	x25, x26, [sp, #64]
    4f58:	b	4ea0 <d_print_comp_inner+0x41bc>
    4f5c:	ldp	x21, x22, [sp, #32]
    4f60:	ldp	x23, x24, [sp, #48]
    4f64:	ldp	x25, x26, [sp, #64]
    4f68:	b	4ea0 <d_print_comp_inner+0x41bc>
    4f6c:	ldp	x21, x22, [sp, #32]
    4f70:	ldp	x23, x24, [sp, #48]
    4f74:	ldp	x25, x26, [sp, #64]
    4f78:	b	4ea0 <d_print_comp_inner+0x41bc>
    4f7c:	ldp	x21, x22, [sp, #32]
    4f80:	ldp	x23, x24, [sp, #48]
    4f84:	ldp	x25, x26, [sp, #64]
    4f88:	b	4ea0 <d_print_comp_inner+0x41bc>
    4f8c:	ldp	x21, x22, [sp, #32]
    4f90:	ldp	x23, x24, [sp, #48]
    4f94:	ldp	x25, x26, [sp, #64]
    4f98:	b	4ea0 <d_print_comp_inner+0x41bc>
    4f9c:	ldp	x21, x22, [sp, #32]
    4fa0:	ldp	x23, x24, [sp, #48]
    4fa4:	ldp	x25, x26, [sp, #64]
    4fa8:	b	4ea0 <d_print_comp_inner+0x41bc>
    4fac:	ldp	x21, x22, [sp, #32]
    4fb0:	ldp	x23, x24, [sp, #48]
    4fb4:	ldp	x25, x26, [sp, #64]
    4fb8:	b	4ea0 <d_print_comp_inner+0x41bc>
    4fbc:	ldp	x21, x22, [sp, #32]
    4fc0:	ldp	x23, x24, [sp, #48]
    4fc4:	ldp	x25, x26, [sp, #64]
    4fc8:	b	4ea0 <d_print_comp_inner+0x41bc>
    4fcc:	ldp	x21, x22, [sp, #32]
    4fd0:	ldp	x23, x24, [sp, #48]
    4fd4:	ldp	x25, x26, [sp, #64]
    4fd8:	ldp	x27, x28, [sp, #80]
    4fdc:	b	4ea0 <d_print_comp_inner+0x41bc>

0000000000004fe0 <d_print_comp>:
    4fe0:	stp	x29, x30, [sp, #-48]!
    4fe4:	mov	x29, sp
    4fe8:	stp	x19, x20, [sp, #16]
    4fec:	mov	x19, x0
    4ff0:	cbz	x2, 5010 <d_print_comp+0x30>
    4ff4:	mov	x20, x2
    4ff8:	ldr	w0, [x2, #4]
    4ffc:	cmp	w0, #0x1
    5000:	b.gt	5010 <d_print_comp+0x30>
    5004:	ldr	w2, [x19, #308]
    5008:	cmp	w2, #0x400
    500c:	b.le	5024 <d_print_comp+0x44>
    5010:	mov	w0, #0x1                   	// #1
    5014:	str	w0, [x19, #304]
    5018:	ldp	x19, x20, [sp, #16]
    501c:	ldp	x29, x30, [sp], #48
    5020:	ret
    5024:	add	w0, w0, #0x1
    5028:	str	w0, [x20, #4]
    502c:	ldr	w0, [x19, #308]
    5030:	add	w0, w0, #0x1
    5034:	str	w0, [x19, #308]
    5038:	str	x20, [sp, #32]
    503c:	ldr	x0, [x19, #328]
    5040:	str	x0, [sp, #40]
    5044:	add	x0, sp, #0x20
    5048:	str	x0, [x19, #328]
    504c:	mov	x2, x20
    5050:	mov	x0, x19
    5054:	bl	ce4 <d_print_comp_inner>
    5058:	ldr	x0, [sp, #40]
    505c:	str	x0, [x19, #328]
    5060:	ldr	w0, [x20, #4]
    5064:	sub	w0, w0, #0x1
    5068:	str	w0, [x20, #4]
    506c:	ldr	w0, [x19, #308]
    5070:	sub	w0, w0, #0x1
    5074:	str	w0, [x19, #308]
    5078:	b	5018 <d_print_comp+0x38>

000000000000507c <d_print_mod>:
    507c:	stp	x29, x30, [sp, #-80]!
    5080:	mov	x29, sp
    5084:	stp	x19, x20, [sp, #16]
    5088:	stp	x21, x22, [sp, #32]
    508c:	mov	x19, x0
    5090:	mov	w22, w1
    5094:	mov	x20, x2
    5098:	ldr	w0, [x2]
    509c:	sub	w0, w0, #0x3
    50a0:	cmp	w0, #0x4d
    50a4:	b.hi	5a14 <d_print_mod+0x998>  // b.pmore
    50a8:	stp	x23, x24, [sp, #48]
    50ac:	adrp	x1, 0 <is_fnqual_component_type>
    50b0:	add	x1, x1, #0x0
    50b4:	ldrh	w0, [x1, w0, uxtw #1]
    50b8:	adr	x1, 50c4 <d_print_mod+0x48>
    50bc:	add	x0, x1, w0, sxth #2
    50c0:	br	x0
    50c4:	adrp	x20, 0 <is_fnqual_component_type>
    50c8:	add	x20, x20, #0x0
    50cc:	add	x22, x20, #0x9
    50d0:	mov	x23, #0xff                  	// #255
    50d4:	b	50f8 <d_print_mod+0x7c>
    50d8:	ldr	x0, [x19, #256]
    50dc:	add	x1, x0, #0x1
    50e0:	str	x1, [x19, #256]
    50e4:	strb	w21, [x19, x0]
    50e8:	strb	w21, [x19, #264]
    50ec:	add	x20, x20, #0x1
    50f0:	cmp	x20, x22
    50f4:	b.eq	5134 <d_print_mod+0xb8>  // b.none
    50f8:	ldrb	w21, [x20]
    50fc:	ldr	x0, [x19, #256]
    5100:	cmp	x0, #0xff
    5104:	b.ne	50d8 <d_print_mod+0x5c>  // b.any
    5108:	strb	wzr, [x19, #255]
    510c:	ldr	x3, [x19, #272]
    5110:	ldr	x2, [x19, #280]
    5114:	mov	x1, x23
    5118:	mov	x0, x19
    511c:	blr	x3
    5120:	str	xzr, [x19, #256]
    5124:	ldr	x0, [x19, #320]
    5128:	add	x0, x0, #0x1
    512c:	str	x0, [x19, #320]
    5130:	b	50d8 <d_print_mod+0x5c>
    5134:	ldp	x23, x24, [sp, #48]
    5138:	b	5614 <d_print_mod+0x598>
    513c:	adrp	x20, 0 <is_fnqual_component_type>
    5140:	add	x20, x20, #0x0
    5144:	add	x22, x20, #0x9
    5148:	mov	x23, #0xff                  	// #255
    514c:	b	5170 <d_print_mod+0xf4>
    5150:	ldr	x0, [x19, #256]
    5154:	add	x1, x0, #0x1
    5158:	str	x1, [x19, #256]
    515c:	strb	w21, [x19, x0]
    5160:	strb	w21, [x19, #264]
    5164:	add	x20, x20, #0x1
    5168:	cmp	x22, x20
    516c:	b.eq	51ac <d_print_mod+0x130>  // b.none
    5170:	ldrb	w21, [x20]
    5174:	ldr	x0, [x19, #256]
    5178:	cmp	x0, #0xff
    517c:	b.ne	5150 <d_print_mod+0xd4>  // b.any
    5180:	strb	wzr, [x19, #255]
    5184:	ldr	x3, [x19, #272]
    5188:	ldr	x2, [x19, #280]
    518c:	mov	x1, x23
    5190:	mov	x0, x19
    5194:	blr	x3
    5198:	str	xzr, [x19, #256]
    519c:	ldr	x0, [x19, #320]
    51a0:	add	x0, x0, #0x1
    51a4:	str	x0, [x19, #320]
    51a8:	b	5150 <d_print_mod+0xd4>
    51ac:	ldp	x23, x24, [sp, #48]
    51b0:	b	5614 <d_print_mod+0x598>
    51b4:	adrp	x20, 0 <is_fnqual_component_type>
    51b8:	add	x20, x20, #0x0
    51bc:	add	x22, x20, #0x6
    51c0:	mov	x23, #0xff                  	// #255
    51c4:	b	51e8 <d_print_mod+0x16c>
    51c8:	ldr	x0, [x19, #256]
    51cc:	add	x1, x0, #0x1
    51d0:	str	x1, [x19, #256]
    51d4:	strb	w21, [x19, x0]
    51d8:	strb	w21, [x19, #264]
    51dc:	add	x20, x20, #0x1
    51e0:	cmp	x20, x22
    51e4:	b.eq	5224 <d_print_mod+0x1a8>  // b.none
    51e8:	ldrb	w21, [x20]
    51ec:	ldr	x0, [x19, #256]
    51f0:	cmp	x0, #0xff
    51f4:	b.ne	51c8 <d_print_mod+0x14c>  // b.any
    51f8:	strb	wzr, [x19, #255]
    51fc:	ldr	x3, [x19, #272]
    5200:	ldr	x2, [x19, #280]
    5204:	mov	x1, x23
    5208:	mov	x0, x19
    520c:	blr	x3
    5210:	str	xzr, [x19, #256]
    5214:	ldr	x0, [x19, #320]
    5218:	add	x0, x0, #0x1
    521c:	str	x0, [x19, #320]
    5220:	b	51c8 <d_print_mod+0x14c>
    5224:	ldp	x23, x24, [sp, #48]
    5228:	b	5614 <d_print_mod+0x598>
    522c:	adrp	x20, 0 <is_fnqual_component_type>
    5230:	add	x20, x20, #0x0
    5234:	add	x22, x20, #0x11
    5238:	mov	x23, #0xff                  	// #255
    523c:	b	5260 <d_print_mod+0x1e4>
    5240:	ldr	x0, [x19, #256]
    5244:	add	x1, x0, #0x1
    5248:	str	x1, [x19, #256]
    524c:	strb	w21, [x19, x0]
    5250:	strb	w21, [x19, #264]
    5254:	add	x20, x20, #0x1
    5258:	cmp	x20, x22
    525c:	b.eq	529c <d_print_mod+0x220>  // b.none
    5260:	ldrb	w21, [x20]
    5264:	ldr	x0, [x19, #256]
    5268:	cmp	x0, #0xff
    526c:	b.ne	5240 <d_print_mod+0x1c4>  // b.any
    5270:	strb	wzr, [x19, #255]
    5274:	ldr	x3, [x19, #272]
    5278:	ldr	x2, [x19, #280]
    527c:	mov	x1, x23
    5280:	mov	x0, x19
    5284:	blr	x3
    5288:	str	xzr, [x19, #256]
    528c:	ldr	x0, [x19, #320]
    5290:	add	x0, x0, #0x1
    5294:	str	x0, [x19, #320]
    5298:	b	5240 <d_print_mod+0x1c4>
    529c:	ldp	x23, x24, [sp, #48]
    52a0:	b	5614 <d_print_mod+0x598>
    52a4:	str	x25, [sp, #64]
    52a8:	adrp	x21, 0 <is_fnqual_component_type>
    52ac:	add	x21, x21, #0x0
    52b0:	add	x24, x21, #0x9
    52b4:	mov	x25, #0xff                  	// #255
    52b8:	b	52dc <d_print_mod+0x260>
    52bc:	ldr	x0, [x19, #256]
    52c0:	add	x1, x0, #0x1
    52c4:	str	x1, [x19, #256]
    52c8:	strb	w23, [x19, x0]
    52cc:	strb	w23, [x19, #264]
    52d0:	add	x21, x21, #0x1
    52d4:	cmp	x21, x24
    52d8:	b.eq	5318 <d_print_mod+0x29c>  // b.none
    52dc:	ldrb	w23, [x21]
    52e0:	ldr	x0, [x19, #256]
    52e4:	cmp	x0, #0xff
    52e8:	b.ne	52bc <d_print_mod+0x240>  // b.any
    52ec:	strb	wzr, [x19, #255]
    52f0:	ldr	x3, [x19, #272]
    52f4:	ldr	x2, [x19, #280]
    52f8:	mov	x1, x25
    52fc:	mov	x0, x19
    5300:	blr	x3
    5304:	str	xzr, [x19, #256]
    5308:	ldr	x0, [x19, #320]
    530c:	add	x0, x0, #0x1
    5310:	str	x0, [x19, #320]
    5314:	b	52bc <d_print_mod+0x240>
    5318:	ldr	x0, [x20, #16]
    531c:	cbz	x0, 5a28 <d_print_mod+0x9ac>
    5320:	cmp	x1, #0xff
    5324:	b.eq	5380 <d_print_mod+0x304>  // b.none
    5328:	ldr	x1, [x19, #256]
    532c:	add	x0, x1, #0x1
    5330:	str	x0, [x19, #256]
    5334:	mov	w0, #0x28                  	// #40
    5338:	strb	w0, [x19, x1]
    533c:	strb	w0, [x19, #264]
    5340:	ldr	x2, [x20, #16]
    5344:	mov	w1, w22
    5348:	mov	x0, x19
    534c:	bl	4fe0 <d_print_comp>
    5350:	ldr	x0, [x19, #256]
    5354:	cmp	x0, #0xff
    5358:	b.eq	53a8 <d_print_mod+0x32c>  // b.none
    535c:	ldr	x1, [x19, #256]
    5360:	add	x0, x1, #0x1
    5364:	str	x0, [x19, #256]
    5368:	mov	w0, #0x29                  	// #41
    536c:	strb	w0, [x19, x1]
    5370:	strb	w0, [x19, #264]
    5374:	ldp	x23, x24, [sp, #48]
    5378:	ldr	x25, [sp, #64]
    537c:	b	5614 <d_print_mod+0x598>
    5380:	strb	wzr, [x19, #255]
    5384:	ldr	x3, [x19, #272]
    5388:	ldr	x2, [x19, #280]
    538c:	mov	x0, x19
    5390:	blr	x3
    5394:	str	xzr, [x19, #256]
    5398:	ldr	x0, [x19, #320]
    539c:	add	x0, x0, #0x1
    53a0:	str	x0, [x19, #320]
    53a4:	b	5328 <d_print_mod+0x2ac>
    53a8:	strb	wzr, [x19, #255]
    53ac:	ldr	x3, [x19, #272]
    53b0:	ldr	x2, [x19, #280]
    53b4:	mov	x1, #0xff                  	// #255
    53b8:	mov	x0, x19
    53bc:	blr	x3
    53c0:	str	xzr, [x19, #256]
    53c4:	ldr	x0, [x19, #320]
    53c8:	add	x0, x0, #0x1
    53cc:	str	x0, [x19, #320]
    53d0:	b	535c <d_print_mod+0x2e0>
    53d4:	str	x25, [sp, #64]
    53d8:	adrp	x21, 0 <is_fnqual_component_type>
    53dc:	add	x21, x21, #0x0
    53e0:	add	x24, x21, #0x6
    53e4:	mov	x25, #0xff                  	// #255
    53e8:	b	540c <d_print_mod+0x390>
    53ec:	ldr	x0, [x19, #256]
    53f0:	add	x1, x0, #0x1
    53f4:	str	x1, [x19, #256]
    53f8:	strb	w23, [x19, x0]
    53fc:	strb	w23, [x19, #264]
    5400:	add	x21, x21, #0x1
    5404:	cmp	x21, x24
    5408:	b.eq	5448 <d_print_mod+0x3cc>  // b.none
    540c:	ldrb	w23, [x21]
    5410:	ldr	x0, [x19, #256]
    5414:	cmp	x0, #0xff
    5418:	b.ne	53ec <d_print_mod+0x370>  // b.any
    541c:	strb	wzr, [x19, #255]
    5420:	ldr	x3, [x19, #272]
    5424:	ldr	x2, [x19, #280]
    5428:	mov	x1, x25
    542c:	mov	x0, x19
    5430:	blr	x3
    5434:	str	xzr, [x19, #256]
    5438:	ldr	x0, [x19, #320]
    543c:	add	x0, x0, #0x1
    5440:	str	x0, [x19, #320]
    5444:	b	53ec <d_print_mod+0x370>
    5448:	ldr	x0, [x20, #16]
    544c:	cbz	x0, 5a34 <d_print_mod+0x9b8>
    5450:	cmp	x1, #0xff
    5454:	b.eq	54b0 <d_print_mod+0x434>  // b.none
    5458:	ldr	x1, [x19, #256]
    545c:	add	x0, x1, #0x1
    5460:	str	x0, [x19, #256]
    5464:	mov	w0, #0x28                  	// #40
    5468:	strb	w0, [x19, x1]
    546c:	strb	w0, [x19, #264]
    5470:	ldr	x2, [x20, #16]
    5474:	mov	w1, w22
    5478:	mov	x0, x19
    547c:	bl	4fe0 <d_print_comp>
    5480:	ldr	x0, [x19, #256]
    5484:	cmp	x0, #0xff
    5488:	b.eq	54d8 <d_print_mod+0x45c>  // b.none
    548c:	ldr	x1, [x19, #256]
    5490:	add	x0, x1, #0x1
    5494:	str	x0, [x19, #256]
    5498:	mov	w0, #0x29                  	// #41
    549c:	strb	w0, [x19, x1]
    54a0:	strb	w0, [x19, #264]
    54a4:	ldp	x23, x24, [sp, #48]
    54a8:	ldr	x25, [sp, #64]
    54ac:	b	5614 <d_print_mod+0x598>
    54b0:	strb	wzr, [x19, #255]
    54b4:	ldr	x3, [x19, #272]
    54b8:	ldr	x2, [x19, #280]
    54bc:	mov	x0, x19
    54c0:	blr	x3
    54c4:	str	xzr, [x19, #256]
    54c8:	ldr	x0, [x19, #320]
    54cc:	add	x0, x0, #0x1
    54d0:	str	x0, [x19, #320]
    54d4:	b	5458 <d_print_mod+0x3dc>
    54d8:	strb	wzr, [x19, #255]
    54dc:	ldr	x3, [x19, #272]
    54e0:	ldr	x2, [x19, #280]
    54e4:	mov	x1, #0xff                  	// #255
    54e8:	mov	x0, x19
    54ec:	blr	x3
    54f0:	str	xzr, [x19, #256]
    54f4:	ldr	x0, [x19, #320]
    54f8:	add	x0, x0, #0x1
    54fc:	str	x0, [x19, #320]
    5500:	b	548c <d_print_mod+0x410>
    5504:	ldr	x0, [x19, #256]
    5508:	cmp	x0, #0xff
    550c:	b.eq	5540 <d_print_mod+0x4c4>  // b.none
    5510:	ldr	x1, [x19, #256]
    5514:	add	x0, x1, #0x1
    5518:	str	x0, [x19, #256]
    551c:	mov	w0, #0x20                  	// #32
    5520:	strb	w0, [x19, x1]
    5524:	strb	w0, [x19, #264]
    5528:	ldr	x2, [x20, #16]
    552c:	mov	w1, w22
    5530:	mov	x0, x19
    5534:	bl	4fe0 <d_print_comp>
    5538:	ldp	x23, x24, [sp, #48]
    553c:	b	5614 <d_print_mod+0x598>
    5540:	strb	wzr, [x19, #255]
    5544:	ldr	x3, [x19, #272]
    5548:	ldr	x2, [x19, #280]
    554c:	mov	x1, #0xff                  	// #255
    5550:	mov	x0, x19
    5554:	blr	x3
    5558:	str	xzr, [x19, #256]
    555c:	ldr	x0, [x19, #320]
    5560:	add	x0, x0, #0x1
    5564:	str	x0, [x19, #320]
    5568:	b	5510 <d_print_mod+0x494>
    556c:	tbnz	w22, #2, 5a40 <d_print_mod+0x9c4>
    5570:	ldr	x0, [x19, #256]
    5574:	cmp	x0, #0xff
    5578:	b.eq	559c <d_print_mod+0x520>  // b.none
    557c:	ldr	x1, [x19, #256]
    5580:	add	x0, x1, #0x1
    5584:	str	x0, [x19, #256]
    5588:	mov	w0, #0x2a                  	// #42
    558c:	strb	w0, [x19, x1]
    5590:	strb	w0, [x19, #264]
    5594:	ldp	x23, x24, [sp, #48]
    5598:	b	5614 <d_print_mod+0x598>
    559c:	strb	wzr, [x19, #255]
    55a0:	ldr	x3, [x19, #272]
    55a4:	ldr	x2, [x19, #280]
    55a8:	mov	x1, #0xff                  	// #255
    55ac:	mov	x0, x19
    55b0:	blr	x3
    55b4:	str	xzr, [x19, #256]
    55b8:	ldr	x0, [x19, #320]
    55bc:	add	x0, x0, #0x1
    55c0:	str	x0, [x19, #320]
    55c4:	b	557c <d_print_mod+0x500>
    55c8:	ldr	x0, [x19, #256]
    55cc:	cmp	x0, #0xff
    55d0:	b.eq	5624 <d_print_mod+0x5a8>  // b.none
    55d4:	ldr	x1, [x19, #256]
    55d8:	add	x0, x1, #0x1
    55dc:	str	x0, [x19, #256]
    55e0:	mov	w0, #0x20                  	// #32
    55e4:	strb	w0, [x19, x1]
    55e8:	strb	w0, [x19, #264]
    55ec:	ldr	x0, [x19, #256]
    55f0:	cmp	x0, #0xff
    55f4:	b.eq	5650 <d_print_mod+0x5d4>  // b.none
    55f8:	ldr	x1, [x19, #256]
    55fc:	add	x0, x1, #0x1
    5600:	str	x0, [x19, #256]
    5604:	mov	w0, #0x26                  	// #38
    5608:	strb	w0, [x19, x1]
    560c:	strb	w0, [x19, #264]
    5610:	ldp	x23, x24, [sp, #48]
    5614:	ldp	x19, x20, [sp, #16]
    5618:	ldp	x21, x22, [sp, #32]
    561c:	ldp	x29, x30, [sp], #80
    5620:	ret
    5624:	strb	wzr, [x19, #255]
    5628:	ldr	x3, [x19, #272]
    562c:	ldr	x2, [x19, #280]
    5630:	mov	x1, #0xff                  	// #255
    5634:	mov	x0, x19
    5638:	blr	x3
    563c:	str	xzr, [x19, #256]
    5640:	ldr	x0, [x19, #320]
    5644:	add	x0, x0, #0x1
    5648:	str	x0, [x19, #320]
    564c:	b	55d4 <d_print_mod+0x558>
    5650:	strb	wzr, [x19, #255]
    5654:	ldr	x3, [x19, #272]
    5658:	ldr	x2, [x19, #280]
    565c:	mov	x1, #0xff                  	// #255
    5660:	mov	x0, x19
    5664:	blr	x3
    5668:	str	xzr, [x19, #256]
    566c:	ldr	x0, [x19, #320]
    5670:	add	x0, x0, #0x1
    5674:	str	x0, [x19, #320]
    5678:	b	55f8 <d_print_mod+0x57c>
    567c:	ldr	x0, [x19, #256]
    5680:	cmp	x0, #0xff
    5684:	b.eq	56b4 <d_print_mod+0x638>  // b.none
    5688:	ldr	x1, [x19, #256]
    568c:	add	x0, x1, #0x1
    5690:	str	x0, [x19, #256]
    5694:	mov	w0, #0x20                  	// #32
    5698:	strb	w0, [x19, x1]
    569c:	strb	w0, [x19, #264]
    56a0:	adrp	x20, 0 <is_fnqual_component_type>
    56a4:	add	x20, x20, #0x0
    56a8:	add	x22, x20, #0x2
    56ac:	mov	x23, #0xff                  	// #255
    56b0:	b	5700 <d_print_mod+0x684>
    56b4:	strb	wzr, [x19, #255]
    56b8:	ldr	x3, [x19, #272]
    56bc:	ldr	x2, [x19, #280]
    56c0:	mov	x1, #0xff                  	// #255
    56c4:	mov	x0, x19
    56c8:	blr	x3
    56cc:	str	xzr, [x19, #256]
    56d0:	ldr	x0, [x19, #320]
    56d4:	add	x0, x0, #0x1
    56d8:	str	x0, [x19, #320]
    56dc:	b	5688 <d_print_mod+0x60c>
    56e0:	ldr	x0, [x19, #256]
    56e4:	add	x1, x0, #0x1
    56e8:	str	x1, [x19, #256]
    56ec:	strb	w21, [x19, x0]
    56f0:	strb	w21, [x19, #264]
    56f4:	add	x20, x20, #0x1
    56f8:	cmp	x22, x20
    56fc:	b.eq	573c <d_print_mod+0x6c0>  // b.none
    5700:	ldrb	w21, [x20]
    5704:	ldr	x0, [x19, #256]
    5708:	cmp	x0, #0xff
    570c:	b.ne	56e0 <d_print_mod+0x664>  // b.any
    5710:	strb	wzr, [x19, #255]
    5714:	ldr	x3, [x19, #272]
    5718:	ldr	x2, [x19, #280]
    571c:	mov	x1, x23
    5720:	mov	x0, x19
    5724:	blr	x3
    5728:	str	xzr, [x19, #256]
    572c:	ldr	x0, [x19, #320]
    5730:	add	x0, x0, #0x1
    5734:	str	x0, [x19, #320]
    5738:	b	56e0 <d_print_mod+0x664>
    573c:	ldp	x23, x24, [sp, #48]
    5740:	b	5614 <d_print_mod+0x598>
    5744:	adrp	x20, 0 <is_fnqual_component_type>
    5748:	add	x20, x20, #0x0
    574c:	add	x22, x20, #0x8
    5750:	mov	x23, #0xff                  	// #255
    5754:	b	5778 <d_print_mod+0x6fc>
    5758:	ldr	x0, [x19, #256]
    575c:	add	x1, x0, #0x1
    5760:	str	x1, [x19, #256]
    5764:	strb	w21, [x19, x0]
    5768:	strb	w21, [x19, #264]
    576c:	add	x20, x20, #0x1
    5770:	cmp	x20, x22
    5774:	b.eq	57b4 <d_print_mod+0x738>  // b.none
    5778:	ldrb	w21, [x20]
    577c:	ldr	x0, [x19, #256]
    5780:	cmp	x0, #0xff
    5784:	b.ne	5758 <d_print_mod+0x6dc>  // b.any
    5788:	strb	wzr, [x19, #255]
    578c:	ldr	x3, [x19, #272]
    5790:	ldr	x2, [x19, #280]
    5794:	mov	x1, x23
    5798:	mov	x0, x19
    579c:	blr	x3
    57a0:	str	xzr, [x19, #256]
    57a4:	ldr	x0, [x19, #320]
    57a8:	add	x0, x0, #0x1
    57ac:	str	x0, [x19, #320]
    57b0:	b	5758 <d_print_mod+0x6dc>
    57b4:	ldp	x23, x24, [sp, #48]
    57b8:	b	5614 <d_print_mod+0x598>
    57bc:	adrp	x20, 0 <is_fnqual_component_type>
    57c0:	add	x20, x20, #0x0
    57c4:	add	x22, x20, #0xa
    57c8:	mov	x23, #0xff                  	// #255
    57cc:	b	57f0 <d_print_mod+0x774>
    57d0:	ldr	x0, [x19, #256]
    57d4:	add	x1, x0, #0x1
    57d8:	str	x1, [x19, #256]
    57dc:	strb	w21, [x19, x0]
    57e0:	strb	w21, [x19, #264]
    57e4:	add	x20, x20, #0x1
    57e8:	cmp	x20, x22
    57ec:	b.eq	582c <d_print_mod+0x7b0>  // b.none
    57f0:	ldrb	w21, [x20]
    57f4:	ldr	x0, [x19, #256]
    57f8:	cmp	x0, #0xff
    57fc:	b.ne	57d0 <d_print_mod+0x754>  // b.any
    5800:	strb	wzr, [x19, #255]
    5804:	ldr	x3, [x19, #272]
    5808:	ldr	x2, [x19, #280]
    580c:	mov	x1, x23
    5810:	mov	x0, x19
    5814:	blr	x3
    5818:	str	xzr, [x19, #256]
    581c:	ldr	x0, [x19, #320]
    5820:	add	x0, x0, #0x1
    5824:	str	x0, [x19, #320]
    5828:	b	57d0 <d_print_mod+0x754>
    582c:	ldp	x23, x24, [sp, #48]
    5830:	b	5614 <d_print_mod+0x598>
    5834:	ldrb	w0, [x19, #264]
    5838:	cmp	w0, #0x28
    583c:	b.eq	5864 <d_print_mod+0x7e8>  // b.none
    5840:	ldr	x0, [x19, #256]
    5844:	cmp	x0, #0xff
    5848:	b.eq	5888 <d_print_mod+0x80c>  // b.none
    584c:	ldr	x1, [x19, #256]
    5850:	add	x0, x1, #0x1
    5854:	str	x0, [x19, #256]
    5858:	mov	w0, #0x20                  	// #32
    585c:	strb	w0, [x19, x1]
    5860:	strb	w0, [x19, #264]
    5864:	ldr	x2, [x20, #8]
    5868:	mov	w1, w22
    586c:	mov	x0, x19
    5870:	bl	4fe0 <d_print_comp>
    5874:	adrp	x20, 0 <is_fnqual_component_type>
    5878:	add	x20, x20, #0x0
    587c:	add	x22, x20, #0x3
    5880:	mov	x23, #0xff                  	// #255
    5884:	b	58d4 <d_print_mod+0x858>
    5888:	strb	wzr, [x19, #255]
    588c:	ldr	x3, [x19, #272]
    5890:	ldr	x2, [x19, #280]
    5894:	mov	x1, #0xff                  	// #255
    5898:	mov	x0, x19
    589c:	blr	x3
    58a0:	str	xzr, [x19, #256]
    58a4:	ldr	x0, [x19, #320]
    58a8:	add	x0, x0, #0x1
    58ac:	str	x0, [x19, #320]
    58b0:	b	584c <d_print_mod+0x7d0>
    58b4:	ldr	x0, [x19, #256]
    58b8:	add	x1, x0, #0x1
    58bc:	str	x1, [x19, #256]
    58c0:	strb	w21, [x19, x0]
    58c4:	strb	w21, [x19, #264]
    58c8:	add	x20, x20, #0x1
    58cc:	cmp	x20, x22
    58d0:	b.eq	5910 <d_print_mod+0x894>  // b.none
    58d4:	ldrb	w21, [x20]
    58d8:	ldr	x0, [x19, #256]
    58dc:	cmp	x0, #0xff
    58e0:	b.ne	58b4 <d_print_mod+0x838>  // b.any
    58e4:	strb	wzr, [x19, #255]
    58e8:	ldr	x3, [x19, #272]
    58ec:	ldr	x2, [x19, #280]
    58f0:	mov	x1, x23
    58f4:	mov	x0, x19
    58f8:	blr	x3
    58fc:	str	xzr, [x19, #256]
    5900:	ldr	x0, [x19, #320]
    5904:	add	x0, x0, #0x1
    5908:	str	x0, [x19, #320]
    590c:	b	58b4 <d_print_mod+0x838>
    5910:	ldp	x23, x24, [sp, #48]
    5914:	b	5614 <d_print_mod+0x598>
    5918:	ldr	x2, [x2, #8]
    591c:	mov	w1, w22
    5920:	mov	x0, x19
    5924:	bl	4fe0 <d_print_comp>
    5928:	ldp	x23, x24, [sp, #48]
    592c:	b	5614 <d_print_mod+0x598>
    5930:	str	x25, [sp, #64]
    5934:	adrp	x21, 0 <is_fnqual_component_type>
    5938:	add	x21, x21, #0x0
    593c:	add	x24, x21, #0xa
    5940:	mov	x25, #0xff                  	// #255
    5944:	b	5968 <d_print_mod+0x8ec>
    5948:	ldr	x0, [x19, #256]
    594c:	add	x1, x0, #0x1
    5950:	str	x1, [x19, #256]
    5954:	strb	w23, [x19, x0]
    5958:	strb	w23, [x19, #264]
    595c:	add	x21, x21, #0x1
    5960:	cmp	x21, x24
    5964:	b.eq	59a4 <d_print_mod+0x928>  // b.none
    5968:	ldrb	w23, [x21]
    596c:	ldr	x0, [x19, #256]
    5970:	cmp	x0, #0xff
    5974:	b.ne	5948 <d_print_mod+0x8cc>  // b.any
    5978:	strb	wzr, [x19, #255]
    597c:	ldr	x3, [x19, #272]
    5980:	ldr	x2, [x19, #280]
    5984:	mov	x1, x25
    5988:	mov	x0, x19
    598c:	blr	x3
    5990:	str	xzr, [x19, #256]
    5994:	ldr	x0, [x19, #320]
    5998:	add	x0, x0, #0x1
    599c:	str	x0, [x19, #320]
    59a0:	b	5948 <d_print_mod+0x8cc>
    59a4:	ldr	x2, [x20, #8]
    59a8:	mov	w1, w22
    59ac:	mov	x0, x19
    59b0:	bl	4fe0 <d_print_comp>
    59b4:	ldr	x0, [x19, #256]
    59b8:	cmp	x0, #0xff
    59bc:	b.eq	59e4 <d_print_mod+0x968>  // b.none
    59c0:	ldr	x1, [x19, #256]
    59c4:	add	x0, x1, #0x1
    59c8:	str	x0, [x19, #256]
    59cc:	mov	w0, #0x29                  	// #41
    59d0:	strb	w0, [x19, x1]
    59d4:	strb	w0, [x19, #264]
    59d8:	ldp	x23, x24, [sp, #48]
    59dc:	ldr	x25, [sp, #64]
    59e0:	b	5614 <d_print_mod+0x598>
    59e4:	strb	wzr, [x19, #255]
    59e8:	ldr	x3, [x19, #272]
    59ec:	ldr	x2, [x19, #280]
    59f0:	mov	x1, #0xff                  	// #255
    59f4:	mov	x0, x19
    59f8:	blr	x3
    59fc:	str	xzr, [x19, #256]
    5a00:	ldr	x0, [x19, #320]
    5a04:	add	x0, x0, #0x1
    5a08:	str	x0, [x19, #320]
    5a0c:	b	59c0 <d_print_mod+0x944>
    5a10:	ldp	x23, x24, [sp, #48]
    5a14:	mov	x2, x20
    5a18:	mov	w1, w22
    5a1c:	mov	x0, x19
    5a20:	bl	4fe0 <d_print_comp>
    5a24:	b	5614 <d_print_mod+0x598>
    5a28:	ldp	x23, x24, [sp, #48]
    5a2c:	ldr	x25, [sp, #64]
    5a30:	b	5614 <d_print_mod+0x598>
    5a34:	ldp	x23, x24, [sp, #48]
    5a38:	ldr	x25, [sp, #64]
    5a3c:	b	5614 <d_print_mod+0x598>
    5a40:	ldp	x23, x24, [sp, #48]
    5a44:	b	5614 <d_print_mod+0x598>

0000000000005a48 <d_print_function_type>:
    5a48:	stp	x29, x30, [sp, #-64]!
    5a4c:	mov	x29, sp
    5a50:	stp	x19, x20, [sp, #16]
    5a54:	stp	x21, x22, [sp, #32]
    5a58:	str	x23, [sp, #48]
    5a5c:	mov	x19, x0
    5a60:	mov	w21, w1
    5a64:	mov	x22, x2
    5a68:	mov	x20, x3
    5a6c:	cbz	x3, 5ab4 <d_print_function_type+0x6c>
    5a70:	mov	x1, x3
    5a74:	mov	x3, #0x1                   	// #1
    5a78:	mov	x2, #0xe000000             	// #234881024
    5a7c:	movk	x2, #0x862, lsl #32
    5a80:	ldr	w0, [x1, #16]
    5a84:	cbnz	w0, 5ab4 <d_print_function_type+0x6c>
    5a88:	ldr	x0, [x1, #8]
    5a8c:	ldr	w0, [x0]
    5a90:	cmp	w0, #0x2b
    5a94:	b.hi	5aac <d_print_function_type+0x64>  // b.pmore
    5a98:	lsl	x0, x3, x0
    5a9c:	tst	x0, x2
    5aa0:	b.ne	5ae8 <d_print_function_type+0xa0>  // b.any
    5aa4:	tst	x0, #0x1c00000000
    5aa8:	b.ne	5ad4 <d_print_function_type+0x8c>  // b.any
    5aac:	ldr	x1, [x1]
    5ab0:	cbnz	x1, 5a80 <d_print_function_type+0x38>
    5ab4:	ldr	x23, [x19, #296]
    5ab8:	str	xzr, [x19, #296]
    5abc:	mov	w3, #0x0                   	// #0
    5ac0:	mov	x2, x20
    5ac4:	mov	w1, w21
    5ac8:	mov	x0, x19
    5acc:	bl	5ce0 <d_print_mod_list>
    5ad0:	b	5b7c <d_print_function_type+0x134>
    5ad4:	ldrb	w0, [x19, #264]
    5ad8:	and	w0, w0, #0xfffffffd
    5adc:	and	w0, w0, #0xff
    5ae0:	cmp	w0, #0x28
    5ae4:	b.eq	5b18 <d_print_function_type+0xd0>  // b.none
    5ae8:	ldrb	w0, [x19, #264]
    5aec:	cmp	w0, #0x20
    5af0:	b.eq	5b18 <d_print_function_type+0xd0>  // b.none
    5af4:	ldr	x0, [x19, #256]
    5af8:	cmp	x0, #0xff
    5afc:	b.eq	5c04 <d_print_function_type+0x1bc>  // b.none
    5b00:	ldr	x1, [x19, #256]
    5b04:	add	x0, x1, #0x1
    5b08:	str	x0, [x19, #256]
    5b0c:	mov	w0, #0x20                  	// #32
    5b10:	strb	w0, [x19, x1]
    5b14:	strb	w0, [x19, #264]
    5b18:	ldr	x0, [x19, #256]
    5b1c:	cmp	x0, #0xff
    5b20:	b.eq	5c30 <d_print_function_type+0x1e8>  // b.none
    5b24:	ldr	x1, [x19, #256]
    5b28:	add	x0, x1, #0x1
    5b2c:	str	x0, [x19, #256]
    5b30:	mov	w0, #0x28                  	// #40
    5b34:	strb	w0, [x19, x1]
    5b38:	strb	w0, [x19, #264]
    5b3c:	ldr	x23, [x19, #296]
    5b40:	str	xzr, [x19, #296]
    5b44:	mov	w3, #0x0                   	// #0
    5b48:	mov	x2, x20
    5b4c:	mov	w1, w21
    5b50:	mov	x0, x19
    5b54:	bl	5ce0 <d_print_mod_list>
    5b58:	ldr	x0, [x19, #256]
    5b5c:	cmp	x0, #0xff
    5b60:	b.eq	5c5c <d_print_function_type+0x214>  // b.none
    5b64:	ldr	x1, [x19, #256]
    5b68:	add	x0, x1, #0x1
    5b6c:	str	x0, [x19, #256]
    5b70:	mov	w0, #0x29                  	// #41
    5b74:	strb	w0, [x19, x1]
    5b78:	strb	w0, [x19, #264]
    5b7c:	ldr	x0, [x19, #256]
    5b80:	cmp	x0, #0xff
    5b84:	b.eq	5c88 <d_print_function_type+0x240>  // b.none
    5b88:	ldr	x1, [x19, #256]
    5b8c:	add	x0, x1, #0x1
    5b90:	str	x0, [x19, #256]
    5b94:	mov	w0, #0x28                  	// #40
    5b98:	strb	w0, [x19, x1]
    5b9c:	strb	w0, [x19, #264]
    5ba0:	ldr	x2, [x22, #16]
    5ba4:	cbz	x2, 5bb4 <d_print_function_type+0x16c>
    5ba8:	mov	w1, w21
    5bac:	mov	x0, x19
    5bb0:	bl	4fe0 <d_print_comp>
    5bb4:	ldr	x0, [x19, #256]
    5bb8:	cmp	x0, #0xff
    5bbc:	b.eq	5cb4 <d_print_function_type+0x26c>  // b.none
    5bc0:	ldr	x1, [x19, #256]
    5bc4:	add	x0, x1, #0x1
    5bc8:	str	x0, [x19, #256]
    5bcc:	mov	w0, #0x29                  	// #41
    5bd0:	strb	w0, [x19, x1]
    5bd4:	strb	w0, [x19, #264]
    5bd8:	mov	w3, #0x1                   	// #1
    5bdc:	mov	x2, x20
    5be0:	mov	w1, w21
    5be4:	mov	x0, x19
    5be8:	bl	5ce0 <d_print_mod_list>
    5bec:	str	x23, [x19, #296]
    5bf0:	ldp	x19, x20, [sp, #16]
    5bf4:	ldp	x21, x22, [sp, #32]
    5bf8:	ldr	x23, [sp, #48]
    5bfc:	ldp	x29, x30, [sp], #64
    5c00:	ret
    5c04:	strb	wzr, [x19, #255]
    5c08:	ldr	x3, [x19, #272]
    5c0c:	ldr	x2, [x19, #280]
    5c10:	mov	x1, #0xff                  	// #255
    5c14:	mov	x0, x19
    5c18:	blr	x3
    5c1c:	str	xzr, [x19, #256]
    5c20:	ldr	x0, [x19, #320]
    5c24:	add	x0, x0, #0x1
    5c28:	str	x0, [x19, #320]
    5c2c:	b	5b00 <d_print_function_type+0xb8>
    5c30:	strb	wzr, [x19, #255]
    5c34:	ldr	x3, [x19, #272]
    5c38:	ldr	x2, [x19, #280]
    5c3c:	mov	x1, #0xff                  	// #255
    5c40:	mov	x0, x19
    5c44:	blr	x3
    5c48:	str	xzr, [x19, #256]
    5c4c:	ldr	x0, [x19, #320]
    5c50:	add	x0, x0, #0x1
    5c54:	str	x0, [x19, #320]
    5c58:	b	5b24 <d_print_function_type+0xdc>
    5c5c:	strb	wzr, [x19, #255]
    5c60:	ldr	x3, [x19, #272]
    5c64:	ldr	x2, [x19, #280]
    5c68:	mov	x1, #0xff                  	// #255
    5c6c:	mov	x0, x19
    5c70:	blr	x3
    5c74:	str	xzr, [x19, #256]
    5c78:	ldr	x0, [x19, #320]
    5c7c:	add	x0, x0, #0x1
    5c80:	str	x0, [x19, #320]
    5c84:	b	5b64 <d_print_function_type+0x11c>
    5c88:	strb	wzr, [x19, #255]
    5c8c:	ldr	x3, [x19, #272]
    5c90:	ldr	x2, [x19, #280]
    5c94:	mov	x1, #0xff                  	// #255
    5c98:	mov	x0, x19
    5c9c:	blr	x3
    5ca0:	str	xzr, [x19, #256]
    5ca4:	ldr	x0, [x19, #320]
    5ca8:	add	x0, x0, #0x1
    5cac:	str	x0, [x19, #320]
    5cb0:	b	5b88 <d_print_function_type+0x140>
    5cb4:	strb	wzr, [x19, #255]
    5cb8:	ldr	x3, [x19, #272]
    5cbc:	ldr	x2, [x19, #280]
    5cc0:	mov	x1, #0xff                  	// #255
    5cc4:	mov	x0, x19
    5cc8:	blr	x3
    5ccc:	str	xzr, [x19, #256]
    5cd0:	ldr	x0, [x19, #320]
    5cd4:	add	x0, x0, #0x1
    5cd8:	str	x0, [x19, #320]
    5cdc:	b	5bc0 <d_print_function_type+0x178>

0000000000005ce0 <d_print_mod_list>:
    5ce0:	cbz	x2, 60a0 <d_print_mod_list+0x3c0>
    5ce4:	stp	x29, x30, [sp, #-112]!
    5ce8:	mov	x29, sp
    5cec:	stp	x19, x20, [sp, #16]
    5cf0:	stp	x21, x22, [sp, #32]
    5cf4:	mov	x19, x0
    5cf8:	mov	w22, w1
    5cfc:	mov	x20, x2
    5d00:	mov	w21, w3
    5d04:	ldr	w0, [x0, #304]
    5d08:	cbnz	w0, 5d88 <d_print_mod_list+0xa8>
    5d0c:	ldr	w0, [x2, #16]
    5d10:	cbnz	w0, 5d98 <d_print_mod_list+0xb8>
    5d14:	cbnz	w3, 5d28 <d_print_mod_list+0x48>
    5d18:	ldr	x0, [x2, #8]
    5d1c:	ldr	w0, [x0]
    5d20:	bl	0 <is_fnqual_component_type>
    5d24:	cbnz	w0, 5d98 <d_print_mod_list+0xb8>
    5d28:	stp	x23, x24, [sp, #48]
    5d2c:	mov	w0, #0x1                   	// #1
    5d30:	str	w0, [x20, #16]
    5d34:	ldr	x23, [x19, #288]
    5d38:	ldr	x0, [x20, #24]
    5d3c:	str	x0, [x19, #288]
    5d40:	ldr	x2, [x20, #8]
    5d44:	ldr	w0, [x2]
    5d48:	cmp	w0, #0x29
    5d4c:	b.eq	5db0 <d_print_mod_list+0xd0>  // b.none
    5d50:	cmp	w0, #0x2a
    5d54:	b.eq	5dcc <d_print_mod_list+0xec>  // b.none
    5d58:	cmp	w0, #0x2
    5d5c:	b.eq	5de8 <d_print_mod_list+0x108>  // b.none
    5d60:	mov	w1, w22
    5d64:	mov	x0, x19
    5d68:	bl	507c <d_print_mod>
    5d6c:	str	x23, [x19, #288]
    5d70:	mov	w3, w21
    5d74:	ldr	x2, [x20]
    5d78:	mov	w1, w22
    5d7c:	mov	x0, x19
    5d80:	bl	5ce0 <d_print_mod_list>
    5d84:	ldp	x23, x24, [sp, #48]
    5d88:	ldp	x19, x20, [sp, #16]
    5d8c:	ldp	x21, x22, [sp, #32]
    5d90:	ldp	x29, x30, [sp], #112
    5d94:	ret
    5d98:	mov	w3, w21
    5d9c:	ldr	x2, [x20]
    5da0:	mov	w1, w22
    5da4:	mov	x0, x19
    5da8:	bl	5ce0 <d_print_mod_list>
    5dac:	b	5d88 <d_print_mod_list+0xa8>
    5db0:	ldr	x3, [x20]
    5db4:	mov	w1, w22
    5db8:	mov	x0, x19
    5dbc:	bl	5a48 <d_print_function_type>
    5dc0:	str	x23, [x19, #288]
    5dc4:	ldp	x23, x24, [sp, #48]
    5dc8:	b	5d88 <d_print_mod_list+0xa8>
    5dcc:	ldr	x3, [x20]
    5dd0:	mov	w1, w22
    5dd4:	mov	x0, x19
    5dd8:	bl	60a4 <d_print_array_type>
    5ddc:	str	x23, [x19, #288]
    5de0:	ldp	x23, x24, [sp, #48]
    5de4:	b	5d88 <d_print_mod_list+0xa8>
    5de8:	ldr	x21, [x19, #296]
    5dec:	str	xzr, [x19, #296]
    5df0:	ldr	x0, [x20, #8]
    5df4:	ldr	x2, [x0, #8]
    5df8:	mov	w1, w22
    5dfc:	mov	x0, x19
    5e00:	bl	4fe0 <d_print_comp>
    5e04:	str	x21, [x19, #296]
    5e08:	tbz	w22, #2, 5e58 <d_print_mod_list+0x178>
    5e0c:	ldr	x0, [x19, #256]
    5e10:	cmp	x0, #0xff
    5e14:	b.eq	5ed4 <d_print_mod_list+0x1f4>  // b.none
    5e18:	ldr	x1, [x19, #256]
    5e1c:	add	x0, x1, #0x1
    5e20:	str	x0, [x19, #256]
    5e24:	mov	w0, #0x2e                  	// #46
    5e28:	strb	w0, [x19, x1]
    5e2c:	strb	w0, [x19, #264]
    5e30:	ldr	x0, [x20, #8]
    5e34:	ldr	x20, [x0, #16]
    5e38:	ldr	w0, [x20]
    5e3c:	cmp	w0, #0x47
    5e40:	b.eq	5f00 <d_print_mod_list+0x220>  // b.none
    5e44:	ldr	w0, [x20]
    5e48:	bl	0 <is_fnqual_component_type>
    5e4c:	cbz	w0, 6084 <d_print_mod_list+0x3a4>
    5e50:	ldr	x20, [x20, #8]
    5e54:	b	5e44 <d_print_mod_list+0x164>
    5e58:	stp	x25, x26, [sp, #64]
    5e5c:	adrp	x21, 0 <is_fnqual_component_type>
    5e60:	add	x21, x21, #0x0
    5e64:	add	x25, x21, #0x2
    5e68:	mov	x26, #0xff                  	// #255
    5e6c:	b	5e90 <d_print_mod_list+0x1b0>
    5e70:	ldr	x0, [x19, #256]
    5e74:	add	x1, x0, #0x1
    5e78:	str	x1, [x19, #256]
    5e7c:	strb	w24, [x19, x0]
    5e80:	strb	w24, [x19, #264]
    5e84:	add	x21, x21, #0x1
    5e88:	cmp	x21, x25
    5e8c:	b.eq	5ecc <d_print_mod_list+0x1ec>  // b.none
    5e90:	ldrb	w24, [x21]
    5e94:	ldr	x0, [x19, #256]
    5e98:	cmp	x0, #0xff
    5e9c:	b.ne	5e70 <d_print_mod_list+0x190>  // b.any
    5ea0:	strb	wzr, [x19, #255]
    5ea4:	ldr	x3, [x19, #272]
    5ea8:	ldr	x2, [x19, #280]
    5eac:	mov	x1, x26
    5eb0:	mov	x0, x19
    5eb4:	blr	x3
    5eb8:	str	xzr, [x19, #256]
    5ebc:	ldr	x0, [x19, #320]
    5ec0:	add	x0, x0, #0x1
    5ec4:	str	x0, [x19, #320]
    5ec8:	b	5e70 <d_print_mod_list+0x190>
    5ecc:	ldp	x25, x26, [sp, #64]
    5ed0:	b	5e30 <d_print_mod_list+0x150>
    5ed4:	strb	wzr, [x19, #255]
    5ed8:	ldr	x3, [x19, #272]
    5edc:	ldr	x2, [x19, #280]
    5ee0:	mov	x1, #0xff                  	// #255
    5ee4:	mov	x0, x19
    5ee8:	blr	x3
    5eec:	str	xzr, [x19, #256]
    5ef0:	ldr	x0, [x19, #320]
    5ef4:	add	x0, x0, #0x1
    5ef8:	str	x0, [x19, #320]
    5efc:	b	5e18 <d_print_mod_list+0x138>
    5f00:	stp	x25, x26, [sp, #64]
    5f04:	adrp	x21, 0 <is_fnqual_component_type>
    5f08:	add	x21, x21, #0x0
    5f0c:	add	x25, x21, #0xd
    5f10:	mov	x26, #0xff                  	// #255
    5f14:	b	5f38 <d_print_mod_list+0x258>
    5f18:	ldr	x0, [x19, #256]
    5f1c:	add	x1, x0, #0x1
    5f20:	str	x1, [x19, #256]
    5f24:	strb	w24, [x19, x0]
    5f28:	strb	w24, [x19, #264]
    5f2c:	add	x21, x21, #0x1
    5f30:	cmp	x21, x25
    5f34:	b.eq	5f74 <d_print_mod_list+0x294>  // b.none
    5f38:	ldrb	w24, [x21]
    5f3c:	ldr	x0, [x19, #256]
    5f40:	cmp	x0, #0xff
    5f44:	b.ne	5f18 <d_print_mod_list+0x238>  // b.any
    5f48:	strb	wzr, [x19, #255]
    5f4c:	ldr	x3, [x19, #272]
    5f50:	ldr	x2, [x19, #280]
    5f54:	mov	x1, x26
    5f58:	mov	x0, x19
    5f5c:	blr	x3
    5f60:	str	xzr, [x19, #256]
    5f64:	ldr	x0, [x19, #320]
    5f68:	add	x0, x0, #0x1
    5f6c:	str	x0, [x19, #320]
    5f70:	b	5f18 <d_print_mod_list+0x238>
    5f74:	ldr	w2, [x20, #16]
    5f78:	add	x21, sp, #0x50
    5f7c:	add	w2, w2, #0x1
    5f80:	adrp	x1, 0 <is_fnqual_component_type>
    5f84:	add	x1, x1, #0x0
    5f88:	mov	x0, x21
    5f8c:	bl	0 <sprintf>
    5f90:	mov	x0, x21
    5f94:	bl	0 <strlen>
    5f98:	cbz	x0, 6008 <d_print_mod_list+0x328>
    5f9c:	add	x21, sp, #0x50
    5fa0:	add	x25, x0, x21
    5fa4:	mov	x26, #0xff                  	// #255
    5fa8:	b	5fcc <d_print_mod_list+0x2ec>
    5fac:	ldr	x0, [x19, #256]
    5fb0:	add	x1, x0, #0x1
    5fb4:	str	x1, [x19, #256]
    5fb8:	strb	w24, [x19, x0]
    5fbc:	strb	w24, [x19, #264]
    5fc0:	add	x21, x21, #0x1
    5fc4:	cmp	x25, x21
    5fc8:	b.eq	6008 <d_print_mod_list+0x328>  // b.none
    5fcc:	ldrb	w24, [x21]
    5fd0:	ldr	x0, [x19, #256]
    5fd4:	cmp	x0, #0xff
    5fd8:	b.ne	5fac <d_print_mod_list+0x2cc>  // b.any
    5fdc:	strb	wzr, [x19, #255]
    5fe0:	ldr	x3, [x19, #272]
    5fe4:	ldr	x2, [x19, #280]
    5fe8:	mov	x1, x26
    5fec:	mov	x0, x19
    5ff0:	blr	x3
    5ff4:	str	xzr, [x19, #256]
    5ff8:	ldr	x0, [x19, #320]
    5ffc:	add	x0, x0, #0x1
    6000:	str	x0, [x19, #320]
    6004:	b	5fac <d_print_mod_list+0x2cc>
    6008:	adrp	x21, 0 <is_fnqual_component_type>
    600c:	add	x21, x21, #0x0
    6010:	add	x25, x21, #0x3
    6014:	mov	x26, #0xff                  	// #255
    6018:	b	603c <d_print_mod_list+0x35c>
    601c:	ldr	x0, [x19, #256]
    6020:	add	x1, x0, #0x1
    6024:	str	x1, [x19, #256]
    6028:	strb	w24, [x19, x0]
    602c:	strb	w24, [x19, #264]
    6030:	add	x21, x21, #0x1
    6034:	cmp	x25, x21
    6038:	b.eq	6078 <d_print_mod_list+0x398>  // b.none
    603c:	ldrb	w24, [x21]
    6040:	ldr	x0, [x19, #256]
    6044:	cmp	x0, #0xff
    6048:	b.ne	601c <d_print_mod_list+0x33c>  // b.any
    604c:	strb	wzr, [x19, #255]
    6050:	ldr	x3, [x19, #272]
    6054:	ldr	x2, [x19, #280]
    6058:	mov	x1, x26
    605c:	mov	x0, x19
    6060:	blr	x3
    6064:	str	xzr, [x19, #256]
    6068:	ldr	x0, [x19, #320]
    606c:	add	x0, x0, #0x1
    6070:	str	x0, [x19, #320]
    6074:	b	601c <d_print_mod_list+0x33c>
    6078:	ldr	x20, [x20, #8]
    607c:	ldp	x25, x26, [sp, #64]
    6080:	b	5e44 <d_print_mod_list+0x164>
    6084:	mov	x2, x20
    6088:	mov	w1, w22
    608c:	mov	x0, x19
    6090:	bl	4fe0 <d_print_comp>
    6094:	str	x23, [x19, #288]
    6098:	ldp	x23, x24, [sp, #48]
    609c:	b	5d88 <d_print_mod_list+0xa8>
    60a0:	ret

00000000000060a4 <d_print_array_type>:
    60a4:	stp	x29, x30, [sp, #-80]!
    60a8:	mov	x29, sp
    60ac:	stp	x19, x20, [sp, #16]
    60b0:	stp	x21, x22, [sp, #32]
    60b4:	stp	x23, x24, [sp, #48]
    60b8:	mov	x19, x0
    60bc:	mov	w22, w1
    60c0:	mov	x24, x2
    60c4:	cbz	x3, 6270 <d_print_array_type+0x1cc>
    60c8:	mov	x21, x3
    60cc:	mov	x0, x3
    60d0:	ldr	w20, [x0, #16]
    60d4:	cbz	w20, 6100 <d_print_array_type+0x5c>
    60d8:	ldr	x0, [x0]
    60dc:	cbnz	x0, 60d0 <d_print_array_type+0x2c>
    60e0:	mov	w20, #0x1                   	// #1
    60e4:	mov	w3, #0x0                   	// #0
    60e8:	mov	x2, x21
    60ec:	mov	w1, w22
    60f0:	mov	x0, x19
    60f4:	bl	5ce0 <d_print_mod_list>
    60f8:	cbz	w20, 6294 <d_print_array_type+0x1f0>
    60fc:	b	6270 <d_print_array_type+0x1cc>
    6100:	ldr	x0, [x0, #8]
    6104:	ldr	w0, [x0]
    6108:	cmp	w0, #0x2a
    610c:	b.eq	60e4 <d_print_array_type+0x40>  // b.none
    6110:	stp	x25, x26, [sp, #64]
    6114:	adrp	x20, 0 <is_fnqual_component_type>
    6118:	add	x20, x20, #0x0
    611c:	add	x25, x20, #0x2
    6120:	mov	x26, #0xff                  	// #255
    6124:	b	6148 <d_print_array_type+0xa4>
    6128:	ldr	x0, [x19, #256]
    612c:	add	x1, x0, #0x1
    6130:	str	x1, [x19, #256]
    6134:	strb	w23, [x19, x0]
    6138:	strb	w23, [x19, #264]
    613c:	add	x20, x20, #0x1
    6140:	cmp	x20, x25
    6144:	b.eq	6234 <d_print_array_type+0x190>  // b.none
    6148:	ldrb	w23, [x20]
    614c:	ldr	x0, [x19, #256]
    6150:	cmp	x0, #0xff
    6154:	b.ne	6128 <d_print_array_type+0x84>  // b.any
    6158:	strb	wzr, [x19, #255]
    615c:	ldr	x3, [x19, #272]
    6160:	ldr	x2, [x19, #280]
    6164:	mov	x1, x26
    6168:	mov	x0, x19
    616c:	blr	x3
    6170:	str	xzr, [x19, #256]
    6174:	ldr	x0, [x19, #320]
    6178:	add	x0, x0, #0x1
    617c:	str	x0, [x19, #320]
    6180:	b	6128 <d_print_array_type+0x84>
    6184:	strb	wzr, [x19, #255]
    6188:	ldr	x3, [x19, #272]
    618c:	ldr	x2, [x19, #280]
    6190:	mov	x1, #0xff                  	// #255
    6194:	mov	x0, x19
    6198:	blr	x3
    619c:	str	xzr, [x19, #256]
    61a0:	ldr	x0, [x19, #320]
    61a4:	add	x0, x0, #0x1
    61a8:	str	x0, [x19, #320]
    61ac:	b	6254 <d_print_array_type+0x1b0>
    61b0:	strb	wzr, [x19, #255]
    61b4:	ldr	x3, [x19, #272]
    61b8:	ldr	x2, [x19, #280]
    61bc:	mov	x1, #0xff                  	// #255
    61c0:	mov	x0, x19
    61c4:	blr	x3
    61c8:	str	xzr, [x19, #256]
    61cc:	ldr	x0, [x19, #320]
    61d0:	add	x0, x0, #0x1
    61d4:	str	x0, [x19, #320]
    61d8:	b	627c <d_print_array_type+0x1d8>
    61dc:	strb	wzr, [x19, #255]
    61e0:	ldr	x3, [x19, #272]
    61e4:	ldr	x2, [x19, #280]
    61e8:	mov	x1, #0xff                  	// #255
    61ec:	mov	x0, x19
    61f0:	blr	x3
    61f4:	str	xzr, [x19, #256]
    61f8:	ldr	x0, [x19, #320]
    61fc:	add	x0, x0, #0x1
    6200:	str	x0, [x19, #320]
    6204:	b	62a0 <d_print_array_type+0x1fc>
    6208:	strb	wzr, [x19, #255]
    620c:	ldr	x3, [x19, #272]
    6210:	ldr	x2, [x19, #280]
    6214:	mov	x1, #0xff                  	// #255
    6218:	mov	x0, x19
    621c:	blr	x3
    6220:	str	xzr, [x19, #256]
    6224:	ldr	x0, [x19, #320]
    6228:	add	x0, x0, #0x1
    622c:	str	x0, [x19, #320]
    6230:	b	62d8 <d_print_array_type+0x234>
    6234:	mov	w3, #0x0                   	// #0
    6238:	mov	x2, x21
    623c:	mov	w1, w22
    6240:	mov	x0, x19
    6244:	bl	5ce0 <d_print_mod_list>
    6248:	ldr	x0, [x19, #256]
    624c:	cmp	x0, #0xff
    6250:	b.eq	6184 <d_print_array_type+0xe0>  // b.none
    6254:	ldr	x1, [x19, #256]
    6258:	add	x0, x1, #0x1
    625c:	str	x0, [x19, #256]
    6260:	mov	w0, #0x29                  	// #41
    6264:	strb	w0, [x19, x1]
    6268:	strb	w0, [x19, #264]
    626c:	ldp	x25, x26, [sp, #64]
    6270:	ldr	x0, [x19, #256]
    6274:	cmp	x0, #0xff
    6278:	b.eq	61b0 <d_print_array_type+0x10c>  // b.none
    627c:	ldr	x1, [x19, #256]
    6280:	add	x0, x1, #0x1
    6284:	str	x0, [x19, #256]
    6288:	mov	w0, #0x20                  	// #32
    628c:	strb	w0, [x19, x1]
    6290:	strb	w0, [x19, #264]
    6294:	ldr	x0, [x19, #256]
    6298:	cmp	x0, #0xff
    629c:	b.eq	61dc <d_print_array_type+0x138>  // b.none
    62a0:	ldr	x1, [x19, #256]
    62a4:	add	x0, x1, #0x1
    62a8:	str	x0, [x19, #256]
    62ac:	mov	w0, #0x5b                  	// #91
    62b0:	strb	w0, [x19, x1]
    62b4:	strb	w0, [x19, #264]
    62b8:	ldr	x2, [x24, #8]
    62bc:	cbz	x2, 62cc <d_print_array_type+0x228>
    62c0:	mov	w1, w22
    62c4:	mov	x0, x19
    62c8:	bl	4fe0 <d_print_comp>
    62cc:	ldr	x0, [x19, #256]
    62d0:	cmp	x0, #0xff
    62d4:	b.eq	6208 <d_print_array_type+0x164>  // b.none
    62d8:	ldr	x1, [x19, #256]
    62dc:	add	x0, x1, #0x1
    62e0:	str	x0, [x19, #256]
    62e4:	mov	w0, #0x5d                  	// #93
    62e8:	strb	w0, [x19, x1]
    62ec:	strb	w0, [x19, #264]
    62f0:	ldp	x19, x20, [sp, #16]
    62f4:	ldp	x21, x22, [sp, #32]
    62f8:	ldp	x23, x24, [sp, #48]
    62fc:	ldp	x29, x30, [sp], #80
    6300:	ret

0000000000006304 <d_print_expr_op>:
    6304:	stp	x29, x30, [sp, #-64]!
    6308:	mov	x29, sp
    630c:	stp	x19, x20, [sp, #16]
    6310:	mov	x19, x0
    6314:	ldr	w0, [x2]
    6318:	cmp	w0, #0x32
    631c:	b.eq	6334 <d_print_expr_op+0x30>  // b.none
    6320:	mov	x0, x19
    6324:	bl	4fe0 <d_print_comp>
    6328:	ldp	x19, x20, [sp, #16]
    632c:	ldp	x29, x30, [sp], #64
    6330:	ret
    6334:	stp	x21, x22, [sp, #32]
    6338:	ldr	x0, [x2, #8]
    633c:	ldr	x22, [x0, #8]
    6340:	ldrsw	x0, [x0, #16]
    6344:	cbz	x0, 63c4 <d_print_expr_op+0xc0>
    6348:	str	x23, [sp, #48]
    634c:	mov	x20, x22
    6350:	add	x22, x22, x0
    6354:	mov	x23, #0xff                  	// #255
    6358:	b	637c <d_print_expr_op+0x78>
    635c:	ldr	x0, [x19, #256]
    6360:	add	x1, x0, #0x1
    6364:	str	x1, [x19, #256]
    6368:	strb	w21, [x19, x0]
    636c:	strb	w21, [x19, #264]
    6370:	add	x20, x20, #0x1
    6374:	cmp	x20, x22
    6378:	b.eq	63b8 <d_print_expr_op+0xb4>  // b.none
    637c:	ldrb	w21, [x20]
    6380:	ldr	x0, [x19, #256]
    6384:	cmp	x0, #0xff
    6388:	b.ne	635c <d_print_expr_op+0x58>  // b.any
    638c:	strb	wzr, [x19, #255]
    6390:	ldr	x3, [x19, #272]
    6394:	ldr	x2, [x19, #280]
    6398:	mov	x1, x23
    639c:	mov	x0, x19
    63a0:	blr	x3
    63a4:	str	xzr, [x19, #256]
    63a8:	ldr	x0, [x19, #320]
    63ac:	add	x0, x0, #0x1
    63b0:	str	x0, [x19, #320]
    63b4:	b	635c <d_print_expr_op+0x58>
    63b8:	ldp	x21, x22, [sp, #32]
    63bc:	ldr	x23, [sp, #48]
    63c0:	b	6328 <d_print_expr_op+0x24>
    63c4:	ldp	x21, x22, [sp, #32]
    63c8:	b	6328 <d_print_expr_op+0x24>

00000000000063cc <d_print_subexpr>:
    63cc:	stp	x29, x30, [sp, #-48]!
    63d0:	mov	x29, sp
    63d4:	stp	x19, x20, [sp, #16]
    63d8:	str	x21, [sp, #32]
    63dc:	mov	x19, x0
    63e0:	mov	w21, w1
    63e4:	mov	x20, x2
    63e8:	ldr	w0, [x2]
    63ec:	cmp	w0, #0x31
    63f0:	ccmp	w0, #0x1, #0x0, ne  // ne = any
    63f4:	ccmp	w0, #0x6, #0x4, hi  // hi = pmore
    63f8:	b.ne	6408 <d_print_subexpr+0x3c>  // b.any
    63fc:	mov	x0, x19
    6400:	bl	4fe0 <d_print_comp>
    6404:	b	6460 <d_print_subexpr+0x94>
    6408:	ldr	x0, [x19, #256]
    640c:	cmp	x0, #0xff
    6410:	b.eq	6470 <d_print_subexpr+0xa4>  // b.none
    6414:	ldr	x1, [x19, #256]
    6418:	add	x0, x1, #0x1
    641c:	str	x0, [x19, #256]
    6420:	mov	w0, #0x28                  	// #40
    6424:	strb	w0, [x19, x1]
    6428:	strb	w0, [x19, #264]
    642c:	mov	x2, x20
    6430:	mov	w1, w21
    6434:	mov	x0, x19
    6438:	bl	4fe0 <d_print_comp>
    643c:	ldr	x0, [x19, #256]
    6440:	cmp	x0, #0xff
    6444:	b.eq	649c <d_print_subexpr+0xd0>  // b.none
    6448:	ldr	x1, [x19, #256]
    644c:	add	x0, x1, #0x1
    6450:	str	x0, [x19, #256]
    6454:	mov	w0, #0x29                  	// #41
    6458:	strb	w0, [x19, x1]
    645c:	strb	w0, [x19, #264]
    6460:	ldp	x19, x20, [sp, #16]
    6464:	ldr	x21, [sp, #32]
    6468:	ldp	x29, x30, [sp], #48
    646c:	ret
    6470:	strb	wzr, [x19, #255]
    6474:	ldr	x3, [x19, #272]
    6478:	ldr	x2, [x19, #280]
    647c:	mov	x1, #0xff                  	// #255
    6480:	mov	x0, x19
    6484:	blr	x3
    6488:	str	xzr, [x19, #256]
    648c:	ldr	x0, [x19, #320]
    6490:	add	x0, x0, #0x1
    6494:	str	x0, [x19, #320]
    6498:	b	6414 <d_print_subexpr+0x48>
    649c:	strb	wzr, [x19, #255]
    64a0:	ldr	x3, [x19, #272]
    64a4:	ldr	x2, [x19, #280]
    64a8:	mov	x1, #0xff                  	// #255
    64ac:	mov	x0, x19
    64b0:	blr	x3
    64b4:	str	xzr, [x19, #256]
    64b8:	ldr	x0, [x19, #320]
    64bc:	add	x0, x0, #0x1
    64c0:	str	x0, [x19, #320]
    64c4:	b	6448 <d_print_subexpr+0x7c>

00000000000064c8 <d_maybe_print_fold_expression>:
    64c8:	stp	x29, x30, [sp, #-96]!
    64cc:	mov	x29, sp
    64d0:	stp	x19, x20, [sp, #16]
    64d4:	stp	x21, x22, [sp, #32]
    64d8:	mov	x19, x0
    64dc:	mov	w21, w1
    64e0:	ldr	x0, [x2, #8]
    64e4:	ldr	x0, [x0, #8]
    64e8:	ldr	x0, [x0]
    64ec:	ldrb	w1, [x0]
    64f0:	cmp	w1, #0x66
    64f4:	b.ne	68a0 <d_maybe_print_fold_expression+0x3d8>  // b.any
    64f8:	stp	x23, x24, [sp, #48]
    64fc:	stp	x25, x26, [sp, #64]
    6500:	ldr	x1, [x2, #16]
    6504:	ldr	x24, [x1, #8]
    6508:	ldr	x25, [x1, #16]
    650c:	ldr	w1, [x25]
    6510:	mov	x26, #0x0                   	// #0
    6514:	cmp	w1, #0x3c
    6518:	b.eq	65a4 <d_maybe_print_fold_expression+0xdc>  // b.none
    651c:	ldr	w23, [x19, #316]
    6520:	mov	w1, #0xffffffff            	// #-1
    6524:	str	w1, [x19, #316]
    6528:	ldrb	w0, [x0, #1]
    652c:	cmp	w0, #0x6c
    6530:	b.eq	6610 <d_maybe_print_fold_expression+0x148>  // b.none
    6534:	b.hi	65b0 <d_maybe_print_fold_expression+0xe8>  // b.pmore
    6538:	cmp	w0, #0x4c
    653c:	b.eq	6548 <d_maybe_print_fold_expression+0x80>  // b.none
    6540:	cmp	w0, #0x52
    6544:	b.ne	66cc <d_maybe_print_fold_expression+0x204>  // b.any
    6548:	str	x27, [sp, #80]
    654c:	ldr	x0, [x19, #256]
    6550:	cmp	x0, #0xff
    6554:	b.eq	67a0 <d_maybe_print_fold_expression+0x2d8>  // b.none
    6558:	ldr	x1, [x19, #256]
    655c:	add	x0, x1, #0x1
    6560:	str	x0, [x19, #256]
    6564:	mov	w0, #0x28                  	// #40
    6568:	strb	w0, [x19, x1]
    656c:	strb	w0, [x19, #264]
    6570:	mov	x2, x25
    6574:	mov	w1, w21
    6578:	mov	x0, x19
    657c:	bl	63cc <d_print_subexpr>
    6580:	mov	x2, x24
    6584:	mov	w1, w21
    6588:	mov	x0, x19
    658c:	bl	6304 <d_print_expr_op>
    6590:	adrp	x20, 0 <is_fnqual_component_type>
    6594:	add	x20, x20, #0x0
    6598:	add	x25, x20, #0x3
    659c:	mov	x27, #0xff                  	// #255
    65a0:	b	67ec <d_maybe_print_fold_expression+0x324>
    65a4:	ldr	x26, [x25, #16]
    65a8:	ldr	x25, [x25, #8]
    65ac:	b	651c <d_maybe_print_fold_expression+0x54>
    65b0:	cmp	w0, #0x72
    65b4:	b.ne	66cc <d_maybe_print_fold_expression+0x204>  // b.any
    65b8:	ldr	x0, [x19, #256]
    65bc:	cmp	x0, #0xff
    65c0:	b.eq	6718 <d_maybe_print_fold_expression+0x250>  // b.none
    65c4:	ldr	x1, [x19, #256]
    65c8:	add	x0, x1, #0x1
    65cc:	str	x0, [x19, #256]
    65d0:	mov	w0, #0x28                  	// #40
    65d4:	strb	w0, [x19, x1]
    65d8:	strb	w0, [x19, #264]
    65dc:	mov	x2, x25
    65e0:	mov	w1, w21
    65e4:	mov	x0, x19
    65e8:	bl	63cc <d_print_subexpr>
    65ec:	mov	x2, x24
    65f0:	mov	w1, w21
    65f4:	mov	x0, x19
    65f8:	bl	6304 <d_print_expr_op>
    65fc:	adrp	x20, 0 <is_fnqual_component_type>
    6600:	add	x20, x20, #0x0
    6604:	add	x22, x20, #0x4
    6608:	mov	x24, #0xff                  	// #255
    660c:	b	6764 <d_maybe_print_fold_expression+0x29c>
    6610:	str	x27, [sp, #80]
    6614:	adrp	x20, 0 <is_fnqual_component_type>
    6618:	add	x20, x20, #0x0
    661c:	add	x26, x20, #0x4
    6620:	mov	x27, #0xff                  	// #255
    6624:	b	6648 <d_maybe_print_fold_expression+0x180>
    6628:	ldr	x0, [x19, #256]
    662c:	add	x1, x0, #0x1
    6630:	str	x1, [x19, #256]
    6634:	strb	w22, [x19, x0]
    6638:	strb	w22, [x19, #264]
    663c:	add	x20, x20, #0x1
    6640:	cmp	x20, x26
    6644:	b.eq	6684 <d_maybe_print_fold_expression+0x1bc>  // b.none
    6648:	ldrb	w22, [x20]
    664c:	ldr	x0, [x19, #256]
    6650:	cmp	x0, #0xff
    6654:	b.ne	6628 <d_maybe_print_fold_expression+0x160>  // b.any
    6658:	strb	wzr, [x19, #255]
    665c:	ldr	x3, [x19, #272]
    6660:	ldr	x2, [x19, #280]
    6664:	mov	x1, x27
    6668:	mov	x0, x19
    666c:	blr	x3
    6670:	str	xzr, [x19, #256]
    6674:	ldr	x0, [x19, #320]
    6678:	add	x0, x0, #0x1
    667c:	str	x0, [x19, #320]
    6680:	b	6628 <d_maybe_print_fold_expression+0x160>
    6684:	mov	x2, x24
    6688:	mov	w1, w21
    668c:	mov	x0, x19
    6690:	bl	6304 <d_print_expr_op>
    6694:	mov	x2, x25
    6698:	mov	w1, w21
    669c:	mov	x0, x19
    66a0:	bl	63cc <d_print_subexpr>
    66a4:	ldr	x0, [x19, #256]
    66a8:	cmp	x0, #0xff
    66ac:	b.eq	66ec <d_maybe_print_fold_expression+0x224>  // b.none
    66b0:	ldr	x1, [x19, #256]
    66b4:	add	x0, x1, #0x1
    66b8:	str	x0, [x19, #256]
    66bc:	mov	w0, #0x29                  	// #41
    66c0:	strb	w0, [x19, x1]
    66c4:	strb	w0, [x19, #264]
    66c8:	ldr	x27, [sp, #80]
    66cc:	str	w23, [x19, #316]
    66d0:	mov	w0, #0x1                   	// #1
    66d4:	ldp	x23, x24, [sp, #48]
    66d8:	ldp	x25, x26, [sp, #64]
    66dc:	ldp	x19, x20, [sp, #16]
    66e0:	ldp	x21, x22, [sp, #32]
    66e4:	ldp	x29, x30, [sp], #96
    66e8:	ret
    66ec:	strb	wzr, [x19, #255]
    66f0:	ldr	x3, [x19, #272]
    66f4:	ldr	x2, [x19, #280]
    66f8:	mov	x1, #0xff                  	// #255
    66fc:	mov	x0, x19
    6700:	blr	x3
    6704:	str	xzr, [x19, #256]
    6708:	ldr	x0, [x19, #320]
    670c:	add	x0, x0, #0x1
    6710:	str	x0, [x19, #320]
    6714:	b	66b0 <d_maybe_print_fold_expression+0x1e8>
    6718:	strb	wzr, [x19, #255]
    671c:	ldr	x3, [x19, #272]
    6720:	ldr	x2, [x19, #280]
    6724:	mov	x1, #0xff                  	// #255
    6728:	mov	x0, x19
    672c:	blr	x3
    6730:	str	xzr, [x19, #256]
    6734:	ldr	x0, [x19, #320]
    6738:	add	x0, x0, #0x1
    673c:	str	x0, [x19, #320]
    6740:	b	65c4 <d_maybe_print_fold_expression+0xfc>
    6744:	ldr	x0, [x19, #256]
    6748:	add	x1, x0, #0x1
    674c:	str	x1, [x19, #256]
    6750:	strb	w21, [x19, x0]
    6754:	strb	w21, [x19, #264]
    6758:	add	x20, x20, #0x1
    675c:	cmp	x20, x22
    6760:	b.eq	66cc <d_maybe_print_fold_expression+0x204>  // b.none
    6764:	ldrb	w21, [x20]
    6768:	ldr	x0, [x19, #256]
    676c:	cmp	x0, #0xff
    6770:	b.ne	6744 <d_maybe_print_fold_expression+0x27c>  // b.any
    6774:	strb	wzr, [x19, #255]
    6778:	ldr	x3, [x19, #272]
    677c:	ldr	x2, [x19, #280]
    6780:	mov	x1, x24
    6784:	mov	x0, x19
    6788:	blr	x3
    678c:	str	xzr, [x19, #256]
    6790:	ldr	x0, [x19, #320]
    6794:	add	x0, x0, #0x1
    6798:	str	x0, [x19, #320]
    679c:	b	6744 <d_maybe_print_fold_expression+0x27c>
    67a0:	strb	wzr, [x19, #255]
    67a4:	ldr	x3, [x19, #272]
    67a8:	ldr	x2, [x19, #280]
    67ac:	mov	x1, #0xff                  	// #255
    67b0:	mov	x0, x19
    67b4:	blr	x3
    67b8:	str	xzr, [x19, #256]
    67bc:	ldr	x0, [x19, #320]
    67c0:	add	x0, x0, #0x1
    67c4:	str	x0, [x19, #320]
    67c8:	b	6558 <d_maybe_print_fold_expression+0x90>
    67cc:	ldr	x0, [x19, #256]
    67d0:	add	x1, x0, #0x1
    67d4:	str	x1, [x19, #256]
    67d8:	strb	w22, [x19, x0]
    67dc:	strb	w22, [x19, #264]
    67e0:	add	x20, x20, #0x1
    67e4:	cmp	x20, x25
    67e8:	b.eq	6828 <d_maybe_print_fold_expression+0x360>  // b.none
    67ec:	ldrb	w22, [x20]
    67f0:	ldr	x0, [x19, #256]
    67f4:	cmp	x0, #0xff
    67f8:	b.ne	67cc <d_maybe_print_fold_expression+0x304>  // b.any
    67fc:	strb	wzr, [x19, #255]
    6800:	ldr	x3, [x19, #272]
    6804:	ldr	x2, [x19, #280]
    6808:	mov	x1, x27
    680c:	mov	x0, x19
    6810:	blr	x3
    6814:	str	xzr, [x19, #256]
    6818:	ldr	x0, [x19, #320]
    681c:	add	x0, x0, #0x1
    6820:	str	x0, [x19, #320]
    6824:	b	67cc <d_maybe_print_fold_expression+0x304>
    6828:	mov	x2, x24
    682c:	mov	w1, w21
    6830:	mov	x0, x19
    6834:	bl	6304 <d_print_expr_op>
    6838:	mov	x2, x26
    683c:	mov	w1, w21
    6840:	mov	x0, x19
    6844:	bl	63cc <d_print_subexpr>
    6848:	ldr	x0, [x19, #256]
    684c:	cmp	x0, #0xff
    6850:	b.eq	6874 <d_maybe_print_fold_expression+0x3ac>  // b.none
    6854:	ldr	x1, [x19, #256]
    6858:	add	x0, x1, #0x1
    685c:	str	x0, [x19, #256]
    6860:	mov	w0, #0x29                  	// #41
    6864:	strb	w0, [x19, x1]
    6868:	strb	w0, [x19, #264]
    686c:	ldr	x27, [sp, #80]
    6870:	b	66cc <d_maybe_print_fold_expression+0x204>
    6874:	strb	wzr, [x19, #255]
    6878:	ldr	x3, [x19, #272]
    687c:	ldr	x2, [x19, #280]
    6880:	mov	x1, #0xff                  	// #255
    6884:	mov	x0, x19
    6888:	blr	x3
    688c:	str	xzr, [x19, #256]
    6890:	ldr	x0, [x19, #320]
    6894:	add	x0, x0, #0x1
    6898:	str	x0, [x19, #320]
    689c:	b	6854 <d_maybe_print_fold_expression+0x38c>
    68a0:	mov	w0, #0x0                   	// #0
    68a4:	b	66dc <d_maybe_print_fold_expression+0x214>

00000000000068a8 <d_substitution>:
    68a8:	stp	x29, x30, [sp, #-64]!
    68ac:	mov	x29, sp
    68b0:	stp	x19, x20, [sp, #16]
    68b4:	mov	x19, x0
    68b8:	ldr	x0, [x0, #24]
    68bc:	ldrb	w2, [x0]
    68c0:	mov	x20, #0x0                   	// #0
    68c4:	cmp	w2, #0x53
    68c8:	b.ne	6920 <d_substitution+0x78>  // b.any
    68cc:	add	x2, x0, #0x1
    68d0:	str	x2, [x19, #24]
    68d4:	ldrb	w2, [x0, #1]
    68d8:	cbz	w2, 69c4 <d_substitution+0x11c>
    68dc:	add	x2, x0, #0x2
    68e0:	str	x2, [x19, #24]
    68e4:	ldrb	w2, [x0, #1]
    68e8:	sub	w0, w2, #0x30
    68ec:	and	w0, w0, #0xff
    68f0:	cmp	w2, #0x5f
    68f4:	ccmp	w0, #0x9, #0x0, ne  // ne = any
    68f8:	b.hi	6930 <d_substitution+0x88>  // b.pmore
    68fc:	mov	w1, #0x0                   	// #0
    6900:	cmp	w2, #0x5f
    6904:	b.ne	699c <d_substitution+0xf4>  // b.any
    6908:	ldr	w0, [x19, #56]
    690c:	mov	x20, #0x0                   	// #0
    6910:	cmp	w0, w1
    6914:	b.ls	6920 <d_substitution+0x78>  // b.plast
    6918:	ldr	x0, [x19, #48]
    691c:	ldr	x20, [x0, w1, uxtw #3]
    6920:	mov	x0, x20
    6924:	ldp	x19, x20, [sp, #16]
    6928:	ldp	x29, x30, [sp], #64
    692c:	ret
    6930:	sub	w3, w2, #0x41
    6934:	and	w3, w3, #0xff
    6938:	mov	w0, #0x0                   	// #0
    693c:	cmp	w3, #0x19
    6940:	b.ls	6950 <d_substitution+0xa8>  // b.plast
    6944:	stp	x21, x22, [sp, #32]
    6948:	b	69c8 <d_substitution+0x120>
    694c:	mov	w0, w1
    6950:	sub	w1, w2, #0x30
    6954:	and	w1, w1, #0xff
    6958:	cmp	w1, #0x9
    695c:	b.hi	69a4 <d_substitution+0xfc>  // b.pmore
    6960:	add	w1, w0, w0, lsl #3
    6964:	add	w1, w2, w1, lsl #2
    6968:	sub	w1, w1, #0x30
    696c:	cmp	w0, w1
    6970:	b.hi	6af4 <d_substitution+0x24c>  // b.pmore
    6974:	ldr	x0, [x19, #24]
    6978:	ldrb	w2, [x0]
    697c:	cbz	w2, 694c <d_substitution+0xa4>
    6980:	add	x2, x0, #0x1
    6984:	str	x2, [x19, #24]
    6988:	ldrb	w2, [x0]
    698c:	cmp	w2, #0x5f
    6990:	b.ne	694c <d_substitution+0xa4>  // b.any
    6994:	add	w1, w1, #0x1
    6998:	b	6908 <d_substitution+0x60>
    699c:	mov	w0, #0x0                   	// #0
    69a0:	b	6950 <d_substitution+0xa8>
    69a4:	sub	w1, w2, #0x41
    69a8:	and	w1, w1, #0xff
    69ac:	cmp	w1, #0x19
    69b0:	b.hi	6aec <d_substitution+0x244>  // b.pmore
    69b4:	add	w1, w0, w0, lsl #3
    69b8:	add	w1, w2, w1, lsl #2
    69bc:	sub	w1, w1, #0x37
    69c0:	b	696c <d_substitution+0xc4>
    69c4:	stp	x21, x22, [sp, #32]
    69c8:	ldr	w21, [x19, #16]
    69cc:	ands	w0, w21, #0x8
    69d0:	ubfx	x21, x21, #3, #1
    69d4:	ccmp	w1, #0x0, #0x4, eq  // eq = none
    69d8:	b.eq	69f4 <d_substitution+0x14c>  // b.none
    69dc:	ldr	x0, [x19, #24]
    69e0:	ldrb	w0, [x0]
    69e4:	sub	w0, w0, #0x43
    69e8:	and	w0, w0, #0xff
    69ec:	cmp	w0, #0x1
    69f0:	csinc	w21, w21, wzr, hi  // hi = pmore
    69f4:	adrp	x20, 0 <is_fnqual_component_type>
    69f8:	add	x20, x20, #0x0
    69fc:	add	x20, x20, #0x440
    6a00:	adrp	x1, 0 <is_fnqual_component_type>
    6a04:	add	x1, x1, #0x0
    6a08:	add	x1, x1, #0x5c8
    6a0c:	ldrb	w0, [x20]
    6a10:	cmp	w0, w2
    6a14:	b.eq	6a30 <d_substitution+0x188>  // b.none
    6a18:	add	x20, x20, #0x38
    6a1c:	cmp	x20, x1
    6a20:	b.ne	6a0c <d_substitution+0x164>  // b.any
    6a24:	mov	x20, #0x0                   	// #0
    6a28:	ldp	x21, x22, [sp, #32]
    6a2c:	b	6920 <d_substitution+0x78>
    6a30:	ldr	x22, [x20, #40]
    6a34:	cbz	x22, 6a64 <d_substitution+0x1bc>
    6a38:	str	x23, [sp, #48]
    6a3c:	ldr	w23, [x20, #48]
    6a40:	mov	x0, x19
    6a44:	bl	30 <d_make_empty>
    6a48:	cbz	x0, 6a5c <d_substitution+0x1b4>
    6a4c:	mov	w1, #0x18                  	// #24
    6a50:	str	w1, [x0]
    6a54:	str	x22, [x0, #8]
    6a58:	str	w23, [x0, #16]
    6a5c:	str	x0, [x19, #64]
    6a60:	ldr	x23, [sp, #48]
    6a64:	cbz	w21, 6ab4 <d_substitution+0x20c>
    6a68:	ldr	x22, [x20, #24]
    6a6c:	ldr	w21, [x20, #32]
    6a70:	ldr	w0, [x19, #72]
    6a74:	add	w0, w0, w21
    6a78:	str	w0, [x19, #72]
    6a7c:	mov	x0, x19
    6a80:	bl	30 <d_make_empty>
    6a84:	mov	x20, x0
    6a88:	cbz	x0, 6a9c <d_substitution+0x1f4>
    6a8c:	mov	w0, #0x18                  	// #24
    6a90:	str	w0, [x20]
    6a94:	str	x22, [x20, #8]
    6a98:	str	w21, [x20, #16]
    6a9c:	ldr	x0, [x19, #24]
    6aa0:	ldrb	w0, [x0]
    6aa4:	cmp	w0, #0x42
    6aa8:	b.eq	6ac0 <d_substitution+0x218>  // b.none
    6aac:	ldp	x21, x22, [sp, #32]
    6ab0:	b	6920 <d_substitution+0x78>
    6ab4:	ldr	x22, [x20, #8]
    6ab8:	ldr	w21, [x20, #16]
    6abc:	b	6a70 <d_substitution+0x1c8>
    6ac0:	mov	x1, x20
    6ac4:	mov	x0, x19
    6ac8:	bl	b84 <d_abi_tags>
    6acc:	mov	x20, x0
    6ad0:	mov	x1, x0
    6ad4:	mov	x0, x19
    6ad8:	bl	6f0 <d_add_substitution>
    6adc:	cmp	w0, #0x0
    6ae0:	csel	x20, x20, xzr, ne  // ne = any
    6ae4:	ldp	x21, x22, [sp, #32]
    6ae8:	b	6920 <d_substitution+0x78>
    6aec:	mov	x20, #0x0                   	// #0
    6af0:	b	6920 <d_substitution+0x78>
    6af4:	mov	x20, #0x0                   	// #0
    6af8:	b	6920 <d_substitution+0x78>

0000000000006afc <d_expression>:
    6afc:	stp	x29, x30, [sp, #-64]!
    6b00:	mov	x29, sp
    6b04:	stp	x19, x20, [sp, #16]
    6b08:	stp	x21, x22, [sp, #32]
    6b0c:	mov	x19, x0
    6b10:	ldr	w21, [x0, #76]
    6b14:	mov	w0, #0x1                   	// #1
    6b18:	str	w0, [x19, #76]
    6b1c:	ldr	x0, [x19, #24]
    6b20:	ldrb	w1, [x0]
    6b24:	cmp	w1, #0x4c
    6b28:	b.eq	6b8c <d_expression+0x90>  // b.none
    6b2c:	cmp	w1, #0x54
    6b30:	b.eq	6b9c <d_expression+0xa0>  // b.none
    6b34:	cmp	w1, #0x73
    6b38:	b.eq	6bac <d_expression+0xb0>  // b.none
    6b3c:	cmp	w1, #0x66
    6b40:	b.eq	6cd8 <d_expression+0x1dc>  // b.none
    6b44:	sub	w2, w1, #0x30
    6b48:	and	w2, w2, #0xff
    6b4c:	cmp	w2, #0x9
    6b50:	b.hi	6d7c <d_expression+0x280>  // b.pmore
    6b54:	mov	x0, x19
    6b58:	bl	83b0 <d_unqualified_name>
    6b5c:	mov	x20, x0
    6b60:	cbz	x0, 6b74 <d_expression+0x78>
    6b64:	ldr	x0, [x19, #24]
    6b68:	ldrb	w0, [x0]
    6b6c:	cmp	w0, #0x49
    6b70:	b.eq	6d9c <d_expression+0x2a0>  // b.none
    6b74:	str	w21, [x19, #76]
    6b78:	mov	x0, x20
    6b7c:	ldp	x19, x20, [sp, #16]
    6b80:	ldp	x21, x22, [sp, #32]
    6b84:	ldp	x29, x30, [sp], #64
    6b88:	ret
    6b8c:	mov	x0, x19
    6b90:	bl	9600 <d_expr_primary>
    6b94:	mov	x20, x0
    6b98:	b	6b74 <d_expression+0x78>
    6b9c:	mov	x0, x19
    6ba0:	bl	5a4 <d_template_param>
    6ba4:	mov	x20, x0
    6ba8:	b	6b74 <d_expression+0x78>
    6bac:	ldrb	w2, [x0, #1]
    6bb0:	cmp	w2, #0x72
    6bb4:	b.eq	6c28 <d_expression+0x12c>  // b.none
    6bb8:	cmp	w2, #0x70
    6bbc:	b.eq	6cac <d_expression+0x1b0>  // b.none
    6bc0:	cmp	w1, #0x69
    6bc4:	mov	w2, #0x74                  	// #116
    6bc8:	ccmp	w1, w2, #0x4, ne  // ne = any
    6bcc:	b.ne	6ce4 <d_expression+0x1e8>  // b.any
    6bd0:	ldrb	w2, [x0, #1]
    6bd4:	cmp	w2, #0x6c
    6bd8:	b.ne	6ce4 <d_expression+0x1e8>  // b.any
    6bdc:	add	x0, x0, #0x2
    6be0:	str	x0, [x19, #24]
    6be4:	mov	x22, #0x0                   	// #0
    6be8:	cmp	w1, #0x74
    6bec:	b.eq	6dc0 <d_expression+0x2c4>  // b.none
    6bf0:	ldr	x0, [x19, #24]
    6bf4:	ldrb	w0, [x0, #1]
    6bf8:	mov	x20, #0x0                   	// #0
    6bfc:	cbz	w0, 6b74 <d_expression+0x78>
    6c00:	mov	w1, #0x45                  	// #69
    6c04:	mov	x0, x19
    6c08:	bl	72c8 <d_exprlist>
    6c0c:	mov	x3, x0
    6c10:	mov	x2, x22
    6c14:	mov	w1, #0x31                  	// #49
    6c18:	mov	x0, x19
    6c1c:	bl	70 <d_make_comp>
    6c20:	mov	x20, x0
    6c24:	b	6b74 <d_expression+0x78>
    6c28:	add	x0, x0, #0x2
    6c2c:	str	x0, [x19, #24]
    6c30:	mov	x0, x19
    6c34:	bl	7374 <d_type>
    6c38:	mov	x20, x0
    6c3c:	mov	x0, x19
    6c40:	bl	83b0 <d_unqualified_name>
    6c44:	mov	x22, x0
    6c48:	ldr	x0, [x19, #24]
    6c4c:	ldrb	w0, [x0]
    6c50:	cmp	w0, #0x49
    6c54:	b.eq	6c74 <d_expression+0x178>  // b.none
    6c58:	mov	x3, x22
    6c5c:	mov	x2, x20
    6c60:	mov	w1, #0x1                   	// #1
    6c64:	mov	x0, x19
    6c68:	bl	70 <d_make_comp>
    6c6c:	mov	x20, x0
    6c70:	b	6b74 <d_expression+0x78>
    6c74:	mov	x0, x19
    6c78:	bl	98cc <d_template_args>
    6c7c:	mov	x3, x0
    6c80:	mov	x2, x22
    6c84:	mov	w1, #0x4                   	// #4
    6c88:	mov	x0, x19
    6c8c:	bl	70 <d_make_comp>
    6c90:	mov	x3, x0
    6c94:	mov	x2, x20
    6c98:	mov	w1, #0x1                   	// #1
    6c9c:	mov	x0, x19
    6ca0:	bl	70 <d_make_comp>
    6ca4:	mov	x20, x0
    6ca8:	b	6b74 <d_expression+0x78>
    6cac:	add	x0, x0, #0x2
    6cb0:	str	x0, [x19, #24]
    6cb4:	mov	x0, x19
    6cb8:	bl	9908 <d_expression_1>
    6cbc:	mov	x3, #0x0                   	// #0
    6cc0:	mov	x2, x0
    6cc4:	mov	w1, #0x4b                  	// #75
    6cc8:	mov	x0, x19
    6ccc:	bl	70 <d_make_comp>
    6cd0:	mov	x20, x0
    6cd4:	b	6b74 <d_expression+0x78>
    6cd8:	ldrb	w1, [x0, #1]
    6cdc:	cmp	w1, #0x70
    6ce0:	b.eq	6d18 <d_expression+0x21c>  // b.none
    6ce4:	mov	x0, x19
    6ce8:	bl	7cd4 <d_operator_name>
    6cec:	mov	x20, x0
    6cf0:	cbz	x0, 6b74 <d_expression+0x78>
    6cf4:	ldr	w0, [x0]
    6cf8:	cmp	w0, #0x32
    6cfc:	b.eq	6dd0 <d_expression+0x2d4>  // b.none
    6d00:	cmp	w0, #0x33
    6d04:	b.eq	6ee0 <d_expression+0x3e4>  // b.none
    6d08:	cmp	w0, #0x34
    6d0c:	b.eq	7260 <d_expression+0x764>  // b.none
    6d10:	mov	x20, #0x0                   	// #0
    6d14:	b	6b74 <d_expression+0x78>
    6d18:	add	x1, x0, #0x2
    6d1c:	str	x1, [x19, #24]
    6d20:	ldrb	w1, [x0, #2]
    6d24:	cmp	w1, #0x54
    6d28:	b.eq	6d6c <d_expression+0x270>  // b.none
    6d2c:	mov	x0, x19
    6d30:	bl	528 <d_compact_number>
    6d34:	mvn	x1, x0
    6d38:	mov	x20, #0x0                   	// #0
    6d3c:	tst	x1, #0x7fffffff
    6d40:	b.eq	6b74 <d_expression+0x78>  // b.none
    6d44:	add	w22, w0, #0x1
    6d48:	mov	x0, x19
    6d4c:	bl	30 <d_make_empty>
    6d50:	mov	x20, x0
    6d54:	cbz	x0, 6b74 <d_expression+0x78>
    6d58:	mov	w0, #0x6                   	// #6
    6d5c:	str	w0, [x20]
    6d60:	sxtw	x0, w22
    6d64:	str	x0, [x20, #8]
    6d68:	b	6b74 <d_expression+0x78>
    6d6c:	add	x0, x0, #0x3
    6d70:	str	x0, [x19, #24]
    6d74:	mov	w22, #0x0                   	// #0
    6d78:	b	6d48 <d_expression+0x24c>
    6d7c:	cmp	w1, #0x6f
    6d80:	b.ne	6bc0 <d_expression+0xc4>  // b.any
    6d84:	ldrb	w1, [x0, #1]
    6d88:	cmp	w1, #0x6e
    6d8c:	b.ne	6ce4 <d_expression+0x1e8>  // b.any
    6d90:	add	x0, x0, #0x2
    6d94:	str	x0, [x19, #24]
    6d98:	b	6b54 <d_expression+0x58>
    6d9c:	mov	x0, x19
    6da0:	bl	98cc <d_template_args>
    6da4:	mov	x3, x0
    6da8:	mov	x2, x20
    6dac:	mov	w1, #0x4                   	// #4
    6db0:	mov	x0, x19
    6db4:	bl	70 <d_make_comp>
    6db8:	mov	x20, x0
    6dbc:	b	6b74 <d_expression+0x78>
    6dc0:	mov	x0, x19
    6dc4:	bl	7374 <d_type>
    6dc8:	mov	x22, x0
    6dcc:	b	6bf0 <d_expression+0xf4>
    6dd0:	ldr	x0, [x20, #8]
    6dd4:	ldr	x22, [x0]
    6dd8:	ldr	w0, [x0, #16]
    6ddc:	sub	w1, w0, #0x2
    6de0:	ldr	w0, [x19, #72]
    6de4:	add	w0, w0, w1
    6de8:	str	w0, [x19, #72]
    6dec:	adrp	x1, 0 <is_fnqual_component_type>
    6df0:	add	x1, x1, #0x0
    6df4:	mov	x0, x22
    6df8:	bl	0 <strcmp>
    6dfc:	cbz	w0, 6e24 <d_expression+0x328>
    6e00:	ldr	w0, [x20]
    6e04:	cmp	w0, #0x33
    6e08:	b.eq	6ee4 <d_expression+0x3e8>  // b.none
    6e0c:	cmp	w0, #0x34
    6e10:	b.eq	6e6c <d_expression+0x370>  // b.none
    6e14:	cmp	w0, #0x32
    6e18:	b.eq	6e48 <d_expression+0x34c>  // b.none
    6e1c:	mov	x20, #0x0                   	// #0
    6e20:	b	6b74 <d_expression+0x78>
    6e24:	mov	x0, x19
    6e28:	bl	7374 <d_type>
    6e2c:	mov	x3, x0
    6e30:	mov	x2, x20
    6e34:	mov	w1, #0x37                  	// #55
    6e38:	mov	x0, x19
    6e3c:	bl	70 <d_make_comp>
    6e40:	mov	x20, x0
    6e44:	b	6b74 <d_expression+0x78>
    6e48:	ldr	x0, [x20, #8]
    6e4c:	ldr	w0, [x0, #20]
    6e50:	cmp	w0, #0x2
    6e54:	b.eq	700c <d_expression+0x510>  // b.none
    6e58:	b.gt	6ef4 <d_expression+0x3f8>
    6e5c:	cbz	w0, 6f9c <d_expression+0x4a0>
    6e60:	cmp	w0, #0x1
    6e64:	b.ne	6eec <d_expression+0x3f0>  // b.any
    6e68:	cbz	x22, 7260 <d_expression+0x764>
    6e6c:	str	x23, [sp, #48]
    6e70:	ldrb	w0, [x22]
    6e74:	cmp	w0, #0x70
    6e78:	mov	w1, #0x6d                  	// #109
    6e7c:	ccmp	w0, w1, #0x4, ne  // ne = any
    6e80:	b.ne	6e90 <d_expression+0x394>  // b.any
    6e84:	ldrb	w1, [x22, #1]
    6e88:	cmp	w1, w0
    6e8c:	b.eq	6fb8 <d_expression+0x4bc>  // b.none
    6e90:	ldr	w0, [x20]
    6e94:	cmp	w0, #0x34
    6e98:	b.eq	7278 <d_expression+0x77c>  // b.none
    6e9c:	mov	w23, #0x0                   	// #0
    6ea0:	adrp	x1, 0 <is_fnqual_component_type>
    6ea4:	add	x1, x1, #0x0
    6ea8:	mov	x0, x22
    6eac:	bl	0 <strcmp>
    6eb0:	cbz	w0, 6fe0 <d_expression+0x4e4>
    6eb4:	mov	x0, x19
    6eb8:	bl	9908 <d_expression_1>
    6ebc:	mov	x3, x0
    6ec0:	cbnz	w23, 6ff0 <d_expression+0x4f4>
    6ec4:	ldr	x23, [sp, #48]
    6ec8:	mov	x2, x20
    6ecc:	mov	w1, #0x37                  	// #55
    6ed0:	mov	x0, x19
    6ed4:	bl	70 <d_make_comp>
    6ed8:	mov	x20, x0
    6edc:	b	6b74 <d_expression+0x78>
    6ee0:	mov	x22, #0x0                   	// #0
    6ee4:	ldr	w0, [x20, #8]
    6ee8:	b	6e50 <d_expression+0x354>
    6eec:	mov	x20, #0x0                   	// #0
    6ef0:	b	6b74 <d_expression+0x78>
    6ef4:	cmp	w0, #0x3
    6ef8:	b.ne	6f94 <d_expression+0x498>  // b.any
    6efc:	cbz	x22, 7228 <d_expression+0x72c>
    6f00:	str	x23, [sp, #48]
    6f04:	adrp	x1, 0 <is_fnqual_component_type>
    6f08:	add	x1, x1, #0x0
    6f0c:	mov	x0, x22
    6f10:	bl	0 <strcmp>
    6f14:	cbz	w0, 712c <d_expression+0x630>
    6f18:	ldrb	w0, [x22]
    6f1c:	cmp	w0, #0x66
    6f20:	b.eq	7198 <d_expression+0x69c>  // b.none
    6f24:	cmp	w0, #0x6e
    6f28:	b.ne	723c <d_expression+0x740>  // b.any
    6f2c:	ldrb	w0, [x22, #1]
    6f30:	cmp	w0, #0x77
    6f34:	mov	w1, #0x61                  	// #97
    6f38:	ccmp	w0, w1, #0x4, ne  // ne = any
    6f3c:	b.ne	7248 <d_expression+0x74c>  // b.any
    6f40:	mov	w1, #0x5f                  	// #95
    6f44:	mov	x0, x19
    6f48:	bl	72c8 <d_exprlist>
    6f4c:	mov	x22, x0
    6f50:	mov	x0, x19
    6f54:	bl	7374 <d_type>
    6f58:	mov	x23, x0
    6f5c:	ldr	x0, [x19, #24]
    6f60:	ldrb	w1, [x0]
    6f64:	cmp	w1, #0x45
    6f68:	b.eq	71cc <d_expression+0x6d0>  // b.none
    6f6c:	cmp	w1, #0x70
    6f70:	b.eq	71dc <d_expression+0x6e0>  // b.none
    6f74:	cmp	w1, #0x69
    6f78:	b.ne	7254 <d_expression+0x758>  // b.any
    6f7c:	ldrb	w0, [x0, #1]
    6f80:	cmp	w0, #0x6c
    6f84:	b.eq	7210 <d_expression+0x714>  // b.none
    6f88:	mov	x20, #0x0                   	// #0
    6f8c:	ldr	x23, [sp, #48]
    6f90:	b	6b74 <d_expression+0x78>
    6f94:	mov	x20, #0x0                   	// #0
    6f98:	b	6b74 <d_expression+0x78>
    6f9c:	mov	x3, #0x0                   	// #0
    6fa0:	mov	x2, x20
    6fa4:	mov	w1, #0x36                  	// #54
    6fa8:	mov	x0, x19
    6fac:	bl	70 <d_make_comp>
    6fb0:	mov	x20, x0
    6fb4:	b	6b74 <d_expression+0x78>
    6fb8:	ldr	x0, [x19, #24]
    6fbc:	ldrb	w1, [x0]
    6fc0:	mov	w23, #0x1                   	// #1
    6fc4:	cmp	w1, #0x5f
    6fc8:	b.ne	6ea0 <d_expression+0x3a4>  // b.any
    6fcc:	add	x0, x0, #0x1
    6fd0:	str	x0, [x19, #24]
    6fd4:	b	6e90 <d_expression+0x394>
    6fd8:	ldr	x23, [sp, #48]
    6fdc:	b	72a0 <d_expression+0x7a4>
    6fe0:	mov	x0, x19
    6fe4:	bl	981c <d_template_args_1>
    6fe8:	mov	x3, x0
    6fec:	b	6ec0 <d_expression+0x3c4>
    6ff0:	mov	x2, x3
    6ff4:	mov	w1, #0x39                  	// #57
    6ff8:	mov	x0, x19
    6ffc:	bl	70 <d_make_comp>
    7000:	mov	x3, x0
    7004:	ldr	x23, [sp, #48]
    7008:	b	6ec8 <d_expression+0x3cc>
    700c:	cbz	x22, 7220 <d_expression+0x724>
    7010:	str	x23, [sp, #48]
    7014:	mov	x0, x20
    7018:	bl	610 <op_is_new_cast>
    701c:	cbnz	w0, 70c4 <d_expression+0x5c8>
    7020:	ldrb	w0, [x22]
    7024:	cmp	w0, #0x66
    7028:	b.eq	70d4 <d_expression+0x5d8>  // b.none
    702c:	mov	x0, x19
    7030:	bl	9908 <d_expression_1>
    7034:	mov	x23, x0
    7038:	adrp	x1, 0 <is_fnqual_component_type>
    703c:	add	x1, x1, #0x0
    7040:	mov	x0, x22
    7044:	bl	0 <strcmp>
    7048:	cbz	w0, 70e4 <d_expression+0x5e8>
    704c:	adrp	x1, 0 <is_fnqual_component_type>
    7050:	add	x1, x1, #0x0
    7054:	mov	x0, x22
    7058:	bl	0 <strcmp>
    705c:	cbz	w0, 7074 <d_expression+0x578>
    7060:	adrp	x1, 0 <is_fnqual_component_type>
    7064:	add	x1, x1, #0x0
    7068:	mov	x0, x22
    706c:	bl	0 <strcmp>
    7070:	cbnz	w0, 711c <d_expression+0x620>
    7074:	mov	x0, x19
    7078:	bl	83b0 <d_unqualified_name>
    707c:	mov	x22, x0
    7080:	ldr	x0, [x19, #24]
    7084:	ldrb	w0, [x0]
    7088:	cmp	w0, #0x49
    708c:	b.eq	70f8 <d_expression+0x5fc>  // b.none
    7090:	mov	x3, x22
    7094:	mov	x2, x23
    7098:	mov	w1, #0x39                  	// #57
    709c:	mov	x0, x19
    70a0:	bl	70 <d_make_comp>
    70a4:	mov	x3, x0
    70a8:	mov	x2, x20
    70ac:	mov	w1, #0x38                  	// #56
    70b0:	mov	x0, x19
    70b4:	bl	70 <d_make_comp>
    70b8:	mov	x20, x0
    70bc:	ldr	x23, [sp, #48]
    70c0:	b	6b74 <d_expression+0x78>
    70c4:	mov	x0, x19
    70c8:	bl	7374 <d_type>
    70cc:	mov	x23, x0
    70d0:	b	7038 <d_expression+0x53c>
    70d4:	mov	x0, x19
    70d8:	bl	7cd4 <d_operator_name>
    70dc:	mov	x23, x0
    70e0:	b	7038 <d_expression+0x53c>
    70e4:	mov	w1, #0x45                  	// #69
    70e8:	mov	x0, x19
    70ec:	bl	72c8 <d_exprlist>
    70f0:	mov	x22, x0
    70f4:	b	7090 <d_expression+0x594>
    70f8:	mov	x0, x19
    70fc:	bl	98cc <d_template_args>
    7100:	mov	x3, x0
    7104:	mov	x2, x22
    7108:	mov	w1, #0x4                   	// #4
    710c:	mov	x0, x19
    7110:	bl	70 <d_make_comp>
    7114:	mov	x22, x0
    7118:	b	7090 <d_expression+0x594>
    711c:	mov	x0, x19
    7120:	bl	9908 <d_expression_1>
    7124:	mov	x22, x0
    7128:	b	7090 <d_expression+0x594>
    712c:	mov	x0, x19
    7130:	bl	9908 <d_expression_1>
    7134:	mov	x22, x0
    7138:	mov	x0, x19
    713c:	bl	9908 <d_expression_1>
    7140:	mov	x23, x0
    7144:	mov	x0, x19
    7148:	bl	9908 <d_expression_1>
    714c:	mov	x3, x0
    7150:	cbz	x0, 7230 <d_expression+0x734>
    7154:	mov	x2, x23
    7158:	mov	w1, #0x3c                  	// #60
    715c:	mov	x0, x19
    7160:	bl	70 <d_make_comp>
    7164:	mov	x3, x0
    7168:	mov	x2, x22
    716c:	mov	w1, #0x3b                  	// #59
    7170:	mov	x0, x19
    7174:	bl	70 <d_make_comp>
    7178:	mov	x3, x0
    717c:	mov	x2, x20
    7180:	mov	w1, #0x3a                  	// #58
    7184:	mov	x0, x19
    7188:	bl	70 <d_make_comp>
    718c:	mov	x20, x0
    7190:	ldr	x23, [sp, #48]
    7194:	b	6b74 <d_expression+0x78>
    7198:	mov	x0, x19
    719c:	bl	7cd4 <d_operator_name>
    71a0:	mov	x22, x0
    71a4:	mov	x0, x19
    71a8:	bl	9908 <d_expression_1>
    71ac:	mov	x23, x0
    71b0:	mov	x0, x19
    71b4:	bl	9908 <d_expression_1>
    71b8:	mov	x3, x0
    71bc:	cbnz	x0, 7154 <d_expression+0x658>
    71c0:	mov	x20, x0
    71c4:	ldr	x23, [sp, #48]
    71c8:	b	6b74 <d_expression+0x78>
    71cc:	add	x0, x0, #0x1
    71d0:	str	x0, [x19, #24]
    71d4:	mov	x3, #0x0                   	// #0
    71d8:	b	7154 <d_expression+0x658>
    71dc:	ldrb	w1, [x0, #1]
    71e0:	cmp	w1, #0x69
    71e4:	b.eq	71f4 <d_expression+0x6f8>  // b.none
    71e8:	mov	x20, #0x0                   	// #0
    71ec:	ldr	x23, [sp, #48]
    71f0:	b	6b74 <d_expression+0x78>
    71f4:	add	x0, x0, #0x2
    71f8:	str	x0, [x19, #24]
    71fc:	mov	w1, #0x45                  	// #69
    7200:	mov	x0, x19
    7204:	bl	72c8 <d_exprlist>
    7208:	mov	x3, x0
    720c:	b	7154 <d_expression+0x658>
    7210:	mov	x0, x19
    7214:	bl	9908 <d_expression_1>
    7218:	mov	x3, x0
    721c:	b	7154 <d_expression+0x658>
    7220:	mov	x20, x22
    7224:	b	6b74 <d_expression+0x78>
    7228:	mov	x20, x22
    722c:	b	6b74 <d_expression+0x78>
    7230:	mov	x20, x0
    7234:	ldr	x23, [sp, #48]
    7238:	b	6b74 <d_expression+0x78>
    723c:	mov	x20, #0x0                   	// #0
    7240:	ldr	x23, [sp, #48]
    7244:	b	6b74 <d_expression+0x78>
    7248:	mov	x20, #0x0                   	// #0
    724c:	ldr	x23, [sp, #48]
    7250:	b	6b74 <d_expression+0x78>
    7254:	mov	x20, #0x0                   	// #0
    7258:	ldr	x23, [sp, #48]
    725c:	b	6b74 <d_expression+0x78>
    7260:	ldr	w0, [x20]
    7264:	cmp	w0, #0x34
    7268:	b.eq	7290 <d_expression+0x794>  // b.none
    726c:	str	x23, [sp, #48]
    7270:	mov	w23, #0x0                   	// #0
    7274:	b	6eb4 <d_expression+0x3b8>
    7278:	ldr	x0, [x19, #24]
    727c:	ldrb	w1, [x0]
    7280:	cmp	w1, #0x5f
    7284:	b.eq	6fd8 <d_expression+0x4dc>  // b.none
    7288:	mov	w23, #0x0                   	// #0
    728c:	b	6ea0 <d_expression+0x3a4>
    7290:	ldr	x0, [x19, #24]
    7294:	ldrb	w1, [x0]
    7298:	cmp	w1, #0x5f
    729c:	b.ne	72bc <d_expression+0x7c0>  // b.any
    72a0:	add	x0, x0, #0x1
    72a4:	str	x0, [x19, #24]
    72a8:	mov	w1, #0x45                  	// #69
    72ac:	mov	x0, x19
    72b0:	bl	72c8 <d_exprlist>
    72b4:	mov	x3, x0
    72b8:	b	6ec8 <d_expression+0x3cc>
    72bc:	str	x23, [sp, #48]
    72c0:	mov	w23, #0x0                   	// #0
    72c4:	b	6eb4 <d_expression+0x3b8>

00000000000072c8 <d_exprlist>:
    72c8:	stp	x29, x30, [sp, #-64]!
    72cc:	mov	x29, sp
    72d0:	stp	x19, x20, [sp, #16]
    72d4:	stp	x21, x22, [sp, #32]
    72d8:	mov	x19, x0
    72dc:	and	w22, w1, #0xff
    72e0:	str	xzr, [sp, #56]
    72e4:	ldr	x0, [x0, #24]
    72e8:	ldrb	w2, [x0]
    72ec:	add	x20, sp, #0x38
    72f0:	mov	w21, #0x2e                  	// #46
    72f4:	cmp	w2, w1, uxtb
    72f8:	b.eq	7354 <d_exprlist+0x8c>  // b.none
    72fc:	mov	x0, x19
    7300:	bl	6afc <d_expression>
    7304:	cbz	x0, 7344 <d_exprlist+0x7c>
    7308:	mov	x3, #0x0                   	// #0
    730c:	mov	x2, x0
    7310:	mov	w1, w21
    7314:	mov	x0, x19
    7318:	bl	70 <d_make_comp>
    731c:	str	x0, [x20]
    7320:	cbz	x0, 7344 <d_exprlist+0x7c>
    7324:	add	x20, x0, #0x10
    7328:	ldr	x0, [x19, #24]
    732c:	ldrb	w1, [x0]
    7330:	cmp	w1, w22
    7334:	b.ne	72fc <d_exprlist+0x34>  // b.any
    7338:	add	x0, x0, #0x1
    733c:	str	x0, [x19, #24]
    7340:	ldr	x0, [sp, #56]
    7344:	ldp	x19, x20, [sp, #16]
    7348:	ldp	x21, x22, [sp, #32]
    734c:	ldp	x29, x30, [sp], #64
    7350:	ret
    7354:	add	x0, x0, #0x1
    7358:	str	x0, [x19, #24]
    735c:	mov	x3, #0x0                   	// #0
    7360:	mov	x2, #0x0                   	// #0
    7364:	mov	w1, w21
    7368:	mov	x0, x19
    736c:	bl	70 <d_make_comp>
    7370:	b	7344 <d_exprlist+0x7c>

0000000000007374 <d_type>:
    7374:	stp	x29, x30, [sp, #-80]!
    7378:	mov	x29, sp
    737c:	stp	x19, x20, [sp, #16]
    7380:	mov	x19, x0
    7384:	bl	464 <next_is_type_qual>
    7388:	cbnz	w0, 73b8 <d_type+0x44>
    738c:	ldr	x0, [x19, #24]
    7390:	ldrb	w2, [x0]
    7394:	sub	w1, w2, #0x30
    7398:	cmp	w1, #0x4a
    739c:	b.hi	7cbc <d_type+0x948>  // b.pmore
    73a0:	adrp	x3, 0 <is_fnqual_component_type>
    73a4:	add	x3, x3, #0x0
    73a8:	ldrh	w1, [x3, w1, uxtw #1]
    73ac:	adr	x3, 73b8 <d_type+0x44>
    73b0:	add	x1, x3, w1, sxth #2
    73b4:	br	x1
    73b8:	mov	w2, #0x0                   	// #0
    73bc:	add	x1, sp, #0x48
    73c0:	mov	x0, x19
    73c4:	bl	7fd4 <d_cv_qualifiers>
    73c8:	mov	x20, x0
    73cc:	cbz	x0, 74cc <d_type+0x158>
    73d0:	ldr	x0, [x19, #24]
    73d4:	ldrb	w0, [x0]
    73d8:	cmp	w0, #0x46
    73dc:	b.eq	7420 <d_type+0xac>  // b.none
    73e0:	mov	x0, x19
    73e4:	bl	7374 <d_type>
    73e8:	str	x0, [x20]
    73ec:	ldr	x0, [x20]
    73f0:	cbz	x0, 7cb4 <d_type+0x940>
    73f4:	ldr	w1, [x0]
    73f8:	sub	w1, w1, #0x1f
    73fc:	cmp	w1, #0x1
    7400:	b.ls	7430 <d_type+0xbc>  // b.plast
    7404:	ldr	x1, [sp, #72]
    7408:	mov	x0, x19
    740c:	bl	6f0 <d_add_substitution>
    7410:	cmp	w0, #0x0
    7414:	ldr	x20, [sp, #72]
    7418:	csel	x20, x20, xzr, ne  // ne = any
    741c:	b	74cc <d_type+0x158>
    7420:	mov	x0, x19
    7424:	bl	82d8 <d_function_type>
    7428:	str	x0, [x20]
    742c:	b	73ec <d_type+0x78>
    7430:	ldr	x1, [x0, #8]
    7434:	ldr	x2, [sp, #72]
    7438:	str	x2, [x0, #8]
    743c:	ldr	x0, [x20]
    7440:	str	x0, [sp, #72]
    7444:	str	x1, [x20]
    7448:	b	7404 <d_type+0x90>
    744c:	sub	w2, w2, #0x61
    7450:	sbfiz	x2, x2, #5, #32
    7454:	adrp	x1, 0 <is_fnqual_component_type>
    7458:	add	x1, x1, #0x0
    745c:	add	x1, x1, x2
    7460:	mov	x0, x19
    7464:	bl	16c <d_make_builtin_type>
    7468:	str	x0, [sp, #72]
    746c:	ldr	x1, [x0, #8]
    7470:	ldr	w0, [x19, #72]
    7474:	ldr	w1, [x1, #8]
    7478:	add	w0, w0, w1
    747c:	str	w0, [x19, #72]
    7480:	ldr	x0, [x19, #24]
    7484:	add	x0, x0, #0x1
    7488:	str	x0, [x19, #24]
    748c:	b	74c8 <d_type+0x154>
    7490:	add	x0, x0, #0x1
    7494:	str	x0, [x19, #24]
    7498:	mov	x0, x19
    749c:	bl	a80 <d_source_name>
    74a0:	mov	x3, #0x0                   	// #0
    74a4:	mov	x2, x0
    74a8:	mov	w1, #0x28                  	// #40
    74ac:	mov	x0, x19
    74b0:	bl	70 <d_make_comp>
    74b4:	str	x0, [sp, #72]
    74b8:	ldr	x1, [sp, #72]
    74bc:	mov	x0, x19
    74c0:	bl	6f0 <d_add_substitution>
    74c4:	cbz	w0, 7ccc <d_type+0x958>
    74c8:	ldr	x20, [sp, #72]
    74cc:	mov	x0, x20
    74d0:	ldp	x19, x20, [sp, #16]
    74d4:	ldp	x29, x30, [sp], #80
    74d8:	ret
    74dc:	mov	x0, x19
    74e0:	bl	82d8 <d_function_type>
    74e4:	str	x0, [sp, #72]
    74e8:	b	74b8 <d_type+0x144>
    74ec:	mov	x0, x19
    74f0:	bl	88d8 <d_name>
    74f4:	str	x0, [sp, #72]
    74f8:	b	74b8 <d_type+0x144>
    74fc:	add	x1, x0, #0x1
    7500:	str	x1, [x19, #24]
    7504:	ldrb	w0, [x0, #1]
    7508:	cmp	w0, #0x5f
    750c:	b.eq	75a8 <d_type+0x234>  // b.none
    7510:	sub	w0, w0, #0x30
    7514:	and	w0, w0, #0xff
    7518:	cmp	w0, #0x9
    751c:	b.hi	7594 <d_type+0x220>  // b.pmore
    7520:	ldr	x0, [x19, #24]
    7524:	add	x2, x0, #0x1
    7528:	str	x2, [x19, #24]
    752c:	ldrb	w0, [x0, #1]
    7530:	sub	w0, w0, #0x30
    7534:	and	w0, w0, #0xff
    7538:	cmp	w0, #0x9
    753c:	b.ls	7520 <d_type+0x1ac>  // b.plast
    7540:	sub	w2, w2, w1
    7544:	mov	x0, x19
    7548:	bl	120 <d_make_name>
    754c:	mov	x20, x0
    7550:	cbz	x0, 758c <d_type+0x218>
    7554:	ldr	x0, [x19, #24]
    7558:	ldrb	w1, [x0]
    755c:	cmp	w1, #0x5f
    7560:	b.ne	75b0 <d_type+0x23c>  // b.any
    7564:	add	x0, x0, #0x1
    7568:	str	x0, [x19, #24]
    756c:	mov	x0, x19
    7570:	bl	7374 <d_type>
    7574:	mov	x3, x0
    7578:	mov	x2, x20
    757c:	mov	w1, #0x2a                  	// #42
    7580:	mov	x0, x19
    7584:	bl	70 <d_make_comp>
    7588:	mov	x20, x0
    758c:	str	x20, [sp, #72]
    7590:	b	74b8 <d_type+0x144>
    7594:	mov	x0, x19
    7598:	bl	6afc <d_expression>
    759c:	mov	x20, x0
    75a0:	cbnz	x0, 7554 <d_type+0x1e0>
    75a4:	b	758c <d_type+0x218>
    75a8:	mov	x20, #0x0                   	// #0
    75ac:	b	7554 <d_type+0x1e0>
    75b0:	mov	x20, #0x0                   	// #0
    75b4:	b	758c <d_type+0x218>
    75b8:	add	x0, x0, #0x1
    75bc:	str	x0, [x19, #24]
    75c0:	mov	x0, x19
    75c4:	bl	7374 <d_type>
    75c8:	mov	x20, x0
    75cc:	cbz	x0, 75f4 <d_type+0x280>
    75d0:	mov	x0, x19
    75d4:	bl	7374 <d_type>
    75d8:	mov	x3, x0
    75dc:	cbz	x0, 75fc <d_type+0x288>
    75e0:	mov	x2, x20
    75e4:	mov	w1, #0x2b                  	// #43
    75e8:	mov	x0, x19
    75ec:	bl	70 <d_make_comp>
    75f0:	mov	x20, x0
    75f4:	str	x20, [sp, #72]
    75f8:	b	74b8 <d_type+0x144>
    75fc:	mov	x20, x0
    7600:	b	75f4 <d_type+0x280>
    7604:	mov	x0, x19
    7608:	bl	5a4 <d_template_param>
    760c:	str	x0, [sp, #72]
    7610:	ldr	x20, [x19, #24]
    7614:	ldrb	w1, [x20]
    7618:	cmp	w1, #0x49
    761c:	b.ne	74b8 <d_type+0x144>  // b.any
    7620:	ldr	w1, [x19, #80]
    7624:	cbnz	w1, 7664 <d_type+0x2f0>
    7628:	mov	x1, x0
    762c:	mov	x0, x19
    7630:	bl	6f0 <d_add_substitution>
    7634:	mov	x20, #0x0                   	// #0
    7638:	cbz	w0, 74cc <d_type+0x158>
    763c:	ldr	x20, [sp, #72]
    7640:	mov	x0, x19
    7644:	bl	98cc <d_template_args>
    7648:	mov	x3, x0
    764c:	mov	x2, x20
    7650:	mov	w1, #0x4                   	// #4
    7654:	mov	x0, x19
    7658:	bl	70 <d_make_comp>
    765c:	str	x0, [sp, #72]
    7660:	b	74b8 <d_type+0x144>
    7664:	stp	x21, x22, [sp, #32]
    7668:	stp	x23, x24, [sp, #48]
    766c:	ldr	w24, [x19, #40]
    7670:	ldr	w23, [x19, #56]
    7674:	ldr	w22, [x19, #72]
    7678:	mov	x0, x19
    767c:	bl	98cc <d_template_args>
    7680:	mov	x21, x0
    7684:	ldr	x0, [x19, #24]
    7688:	ldrb	w0, [x0]
    768c:	cmp	w0, #0x49
    7690:	b.eq	76b0 <d_type+0x33c>  // b.none
    7694:	str	x20, [x19, #24]
    7698:	str	w24, [x19, #40]
    769c:	str	w23, [x19, #56]
    76a0:	str	w22, [x19, #72]
    76a4:	ldp	x21, x22, [sp, #32]
    76a8:	ldp	x23, x24, [sp, #48]
    76ac:	b	74b8 <d_type+0x144>
    76b0:	ldr	x1, [sp, #72]
    76b4:	mov	x0, x19
    76b8:	bl	6f0 <d_add_substitution>
    76bc:	cbz	w0, 76e4 <d_type+0x370>
    76c0:	mov	x3, x21
    76c4:	ldr	x2, [sp, #72]
    76c8:	mov	w1, #0x4                   	// #4
    76cc:	mov	x0, x19
    76d0:	bl	70 <d_make_comp>
    76d4:	str	x0, [sp, #72]
    76d8:	ldp	x21, x22, [sp, #32]
    76dc:	ldp	x23, x24, [sp, #48]
    76e0:	b	74b8 <d_type+0x144>
    76e4:	mov	x20, #0x0                   	// #0
    76e8:	ldp	x21, x22, [sp, #32]
    76ec:	ldp	x23, x24, [sp, #48]
    76f0:	b	74cc <d_type+0x158>
    76f4:	ldrb	w0, [x0, #1]
    76f8:	sub	w1, w0, #0x30
    76fc:	and	w1, w1, #0xff
    7700:	cmp	w0, #0x5f
    7704:	ccmp	w1, #0x9, #0x0, ne  // ne = any
    7708:	b.ls	771c <d_type+0x3a8>  // b.plast
    770c:	sub	w0, w0, #0x41
    7710:	and	w0, w0, #0xff
    7714:	cmp	w0, #0x19
    7718:	b.hi	7764 <d_type+0x3f0>  // b.pmore
    771c:	mov	w1, #0x0                   	// #0
    7720:	mov	x0, x19
    7724:	bl	68a8 <d_substitution>
    7728:	mov	x20, x0
    772c:	str	x0, [sp, #72]
    7730:	ldr	x0, [x19, #24]
    7734:	ldrb	w0, [x0]
    7738:	cmp	w0, #0x49
    773c:	b.ne	74c8 <d_type+0x154>  // b.any
    7740:	mov	x0, x19
    7744:	bl	98cc <d_template_args>
    7748:	mov	x3, x0
    774c:	mov	x2, x20
    7750:	mov	w1, #0x4                   	// #4
    7754:	mov	x0, x19
    7758:	bl	70 <d_make_comp>
    775c:	str	x0, [sp, #72]
    7760:	b	74b8 <d_type+0x144>
    7764:	mov	x0, x19
    7768:	bl	88d8 <d_name>
    776c:	str	x0, [sp, #72]
    7770:	cbz	x0, 74b8 <d_type+0x144>
    7774:	ldr	w0, [x0]
    7778:	cmp	w0, #0x18
    777c:	b.ne	74b8 <d_type+0x144>  // b.any
    7780:	b	74c8 <d_type+0x154>
    7784:	add	x0, x0, #0x1
    7788:	str	x0, [x19, #24]
    778c:	mov	x0, x19
    7790:	bl	7374 <d_type>
    7794:	mov	x3, #0x0                   	// #0
    7798:	mov	x2, x0
    779c:	mov	w1, #0x24                  	// #36
    77a0:	mov	x0, x19
    77a4:	bl	70 <d_make_comp>
    77a8:	str	x0, [sp, #72]
    77ac:	b	74b8 <d_type+0x144>
    77b0:	add	x0, x0, #0x1
    77b4:	str	x0, [x19, #24]
    77b8:	mov	x0, x19
    77bc:	bl	7374 <d_type>
    77c0:	mov	x3, #0x0                   	// #0
    77c4:	mov	x2, x0
    77c8:	mov	w1, #0x22                  	// #34
    77cc:	mov	x0, x19
    77d0:	bl	70 <d_make_comp>
    77d4:	str	x0, [sp, #72]
    77d8:	b	74b8 <d_type+0x144>
    77dc:	add	x0, x0, #0x1
    77e0:	str	x0, [x19, #24]
    77e4:	mov	x0, x19
    77e8:	bl	7374 <d_type>
    77ec:	mov	x3, #0x0                   	// #0
    77f0:	mov	x2, x0
    77f4:	mov	w1, #0x23                  	// #35
    77f8:	mov	x0, x19
    77fc:	bl	70 <d_make_comp>
    7800:	str	x0, [sp, #72]
    7804:	b	74b8 <d_type+0x144>
    7808:	add	x0, x0, #0x1
    780c:	str	x0, [x19, #24]
    7810:	mov	x0, x19
    7814:	bl	7374 <d_type>
    7818:	mov	x3, #0x0                   	// #0
    781c:	mov	x2, x0
    7820:	mov	w1, #0x25                  	// #37
    7824:	mov	x0, x19
    7828:	bl	70 <d_make_comp>
    782c:	str	x0, [sp, #72]
    7830:	b	74b8 <d_type+0x144>
    7834:	add	x0, x0, #0x1
    7838:	str	x0, [x19, #24]
    783c:	mov	x0, x19
    7840:	bl	7374 <d_type>
    7844:	mov	x3, #0x0                   	// #0
    7848:	mov	x2, x0
    784c:	mov	w1, #0x26                  	// #38
    7850:	mov	x0, x19
    7854:	bl	70 <d_make_comp>
    7858:	str	x0, [sp, #72]
    785c:	b	74b8 <d_type+0x144>
    7860:	add	x0, x0, #0x1
    7864:	str	x0, [x19, #24]
    7868:	mov	x0, x19
    786c:	bl	a80 <d_source_name>
    7870:	mov	x20, x0
    7874:	str	x0, [sp, #72]
    7878:	ldr	x0, [x19, #24]
    787c:	ldrb	w0, [x0]
    7880:	cmp	w0, #0x49
    7884:	b.eq	78ac <d_type+0x538>  // b.none
    7888:	mov	x0, x19
    788c:	bl	7374 <d_type>
    7890:	ldr	x3, [sp, #72]
    7894:	mov	x2, x0
    7898:	mov	w1, #0x21                  	// #33
    789c:	mov	x0, x19
    78a0:	bl	70 <d_make_comp>
    78a4:	str	x0, [sp, #72]
    78a8:	b	74b8 <d_type+0x144>
    78ac:	mov	x0, x19
    78b0:	bl	98cc <d_template_args>
    78b4:	mov	x3, x0
    78b8:	mov	x2, x20
    78bc:	mov	w1, #0x4                   	// #4
    78c0:	mov	x0, x19
    78c4:	bl	70 <d_make_comp>
    78c8:	str	x0, [sp, #72]
    78cc:	b	7888 <d_type+0x514>
    78d0:	add	x1, x0, #0x1
    78d4:	str	x1, [x19, #24]
    78d8:	ldrb	w1, [x0, #1]
    78dc:	mov	x20, #0x0                   	// #0
    78e0:	cbz	w1, 74cc <d_type+0x158>
    78e4:	add	x1, x0, #0x2
    78e8:	str	x1, [x19, #24]
    78ec:	ldrb	w1, [x0, #1]
    78f0:	cmp	w1, #0x68
    78f4:	b.eq	7bc8 <d_type+0x854>  // b.none
    78f8:	b.hi	7a40 <d_type+0x6cc>  // b.pmore
    78fc:	cmp	w1, #0x63
    7900:	b.eq	7b7c <d_type+0x808>  // b.none
    7904:	b.ls	7948 <d_type+0x5d4>  // b.plast
    7908:	cmp	w1, #0x65
    790c:	b.eq	7b98 <d_type+0x824>  // b.none
    7910:	cmp	w1, #0x66
    7914:	b.ne	7a04 <d_type+0x690>  // b.any
    7918:	adrp	x1, 0 <is_fnqual_component_type>
    791c:	add	x1, x1, #0x0
    7920:	add	x1, x1, #0x340
    7924:	mov	x0, x19
    7928:	bl	16c <d_make_builtin_type>
    792c:	str	x0, [sp, #72]
    7930:	ldr	x1, [x0, #8]
    7934:	ldr	w0, [x19, #72]
    7938:	ldr	w1, [x1, #8]
    793c:	add	w0, w0, w1
    7940:	str	w0, [x19, #72]
    7944:	b	74c8 <d_type+0x154>
    7948:	cmp	w1, #0x54
    794c:	b.eq	7b30 <d_type+0x7bc>  // b.none
    7950:	cmp	w1, #0x61
    7954:	b.ne	7974 <d_type+0x600>  // b.any
    7958:	mov	w2, #0x4                   	// #4
    795c:	adrp	x1, 0 <is_fnqual_component_type>
    7960:	add	x1, x1, #0x0
    7964:	mov	x0, x19
    7968:	bl	120 <d_make_name>
    796c:	str	x0, [sp, #72]
    7970:	b	74c8 <d_type+0x154>
    7974:	cmp	w1, #0x46
    7978:	b.ne	74cc <d_type+0x158>  // b.any
    797c:	mov	x0, x19
    7980:	bl	30 <d_make_empty>
    7984:	str	x0, [sp, #72]
    7988:	mov	w1, #0x2c                  	// #44
    798c:	str	w1, [x0]
    7990:	ldr	x0, [x19, #24]
    7994:	ldrb	w0, [x0]
    7998:	sub	w0, w0, #0x30
    799c:	and	w0, w0, #0xff
    79a0:	cmp	w0, #0x9
    79a4:	cset	w2, ls  // ls = plast
    79a8:	ldr	x1, [sp, #72]
    79ac:	strh	w2, [x1, #16]
    79b0:	b.ls	7c58 <d_type+0x8e4>  // b.plast
    79b4:	ldr	x20, [sp, #72]
    79b8:	mov	x0, x19
    79bc:	bl	7374 <d_type>
    79c0:	str	x0, [x20, #8]
    79c4:	ldr	x0, [sp, #72]
    79c8:	ldr	x20, [x0, #8]
    79cc:	cbz	x20, 74cc <d_type+0x158>
    79d0:	mov	x0, x19
    79d4:	bl	2a4 <d_number>
    79d8:	ldr	x1, [x19, #24]
    79dc:	ldrb	w0, [x1]
    79e0:	cbz	w0, 79f0 <d_type+0x67c>
    79e4:	add	x0, x1, #0x1
    79e8:	str	x0, [x19, #24]
    79ec:	ldrb	w0, [x1]
    79f0:	cmp	w0, #0x73
    79f4:	cset	w1, eq  // eq = none
    79f8:	ldr	x0, [sp, #72]
    79fc:	strh	w1, [x0, #18]
    7a00:	b	74c8 <d_type+0x154>
    7a04:	mov	x20, #0x0                   	// #0
    7a08:	cmp	w1, #0x64
    7a0c:	b.ne	74cc <d_type+0x158>  // b.any
    7a10:	adrp	x1, 0 <is_fnqual_component_type>
    7a14:	add	x1, x1, #0x0
    7a18:	add	x1, x1, #0x360
    7a1c:	mov	x0, x19
    7a20:	bl	16c <d_make_builtin_type>
    7a24:	str	x0, [sp, #72]
    7a28:	ldr	x1, [x0, #8]
    7a2c:	ldr	w0, [x19, #72]
    7a30:	ldr	w1, [x1, #8]
    7a34:	add	w0, w0, w1
    7a38:	str	w0, [x19, #72]
    7a3c:	b	74c8 <d_type+0x154>
    7a40:	cmp	w1, #0x73
    7a44:	b.eq	7c28 <d_type+0x8b4>  // b.none
    7a48:	b.ls	7ab8 <d_type+0x744>  // b.plast
    7a4c:	cmp	w1, #0x75
    7a50:	b.eq	7bf8 <d_type+0x884>  // b.none
    7a54:	cmp	w1, #0x76
    7a58:	b.ne	7b28 <d_type+0x7b4>  // b.any
    7a5c:	ldrb	w1, [x0, #2]
    7a60:	cmp	w1, #0x5f
    7a64:	b.eq	7c64 <d_type+0x8f0>  // b.none
    7a68:	mov	x0, x19
    7a6c:	bl	374 <d_number_component>
    7a70:	mov	x20, x0
    7a74:	cbz	x20, 7ab0 <d_type+0x73c>
    7a78:	ldr	x0, [x19, #24]
    7a7c:	ldrb	w1, [x0]
    7a80:	cmp	w1, #0x5f
    7a84:	b.ne	7c7c <d_type+0x908>  // b.any
    7a88:	add	x0, x0, #0x1
    7a8c:	str	x0, [x19, #24]
    7a90:	mov	x0, x19
    7a94:	bl	7374 <d_type>
    7a98:	mov	x3, x0
    7a9c:	mov	x2, x20
    7aa0:	mov	w1, #0x2d                  	// #45
    7aa4:	mov	x0, x19
    7aa8:	bl	70 <d_make_comp>
    7aac:	mov	x20, x0
    7ab0:	str	x20, [sp, #72]
    7ab4:	b	74b8 <d_type+0x144>
    7ab8:	cmp	w1, #0x6e
    7abc:	b.eq	7c84 <d_type+0x910>  // b.none
    7ac0:	cmp	w1, #0x70
    7ac4:	b.ne	7aec <d_type+0x778>  // b.any
    7ac8:	mov	x0, x19
    7acc:	bl	7374 <d_type>
    7ad0:	mov	x3, #0x0                   	// #0
    7ad4:	mov	x2, x0
    7ad8:	mov	w1, #0x4b                  	// #75
    7adc:	mov	x0, x19
    7ae0:	bl	70 <d_make_comp>
    7ae4:	str	x0, [sp, #72]
    7ae8:	b	74b8 <d_type+0x144>
    7aec:	mov	x20, #0x0                   	// #0
    7af0:	cmp	w1, #0x69
    7af4:	b.ne	74cc <d_type+0x158>  // b.any
    7af8:	adrp	x1, 0 <is_fnqual_component_type>
    7afc:	add	x1, x1, #0x0
    7b00:	add	x1, x1, #0x400
    7b04:	mov	x0, x19
    7b08:	bl	16c <d_make_builtin_type>
    7b0c:	str	x0, [sp, #72]
    7b10:	ldr	x1, [x0, #8]
    7b14:	ldr	w0, [x19, #72]
    7b18:	ldr	w1, [x1, #8]
    7b1c:	add	w0, w0, w1
    7b20:	str	w0, [x19, #72]
    7b24:	b	74c8 <d_type+0x154>
    7b28:	cmp	w1, #0x74
    7b2c:	b.ne	7cc4 <d_type+0x950>  // b.any
    7b30:	mov	x0, x19
    7b34:	bl	6afc <d_expression>
    7b38:	mov	x3, #0x0                   	// #0
    7b3c:	mov	x2, x0
    7b40:	mov	w1, #0x43                  	// #67
    7b44:	mov	x0, x19
    7b48:	bl	70 <d_make_comp>
    7b4c:	str	x0, [sp, #72]
    7b50:	cbz	x0, 74b8 <d_type+0x144>
    7b54:	ldr	x0, [x19, #24]
    7b58:	ldrb	w1, [x0]
    7b5c:	cbz	w1, 7b74 <d_type+0x800>
    7b60:	add	x1, x0, #0x1
    7b64:	str	x1, [x19, #24]
    7b68:	ldrb	w0, [x0]
    7b6c:	cmp	w0, #0x45
    7b70:	b.eq	74b8 <d_type+0x144>  // b.none
    7b74:	str	xzr, [sp, #72]
    7b78:	b	74b8 <d_type+0x144>
    7b7c:	mov	w2, #0xe                   	// #14
    7b80:	adrp	x1, 0 <is_fnqual_component_type>
    7b84:	add	x1, x1, #0x0
    7b88:	mov	x0, x19
    7b8c:	bl	120 <d_make_name>
    7b90:	str	x0, [sp, #72]
    7b94:	b	74c8 <d_type+0x154>
    7b98:	adrp	x1, 0 <is_fnqual_component_type>
    7b9c:	add	x1, x1, #0x0
    7ba0:	add	x1, x1, #0x380
    7ba4:	mov	x0, x19
    7ba8:	bl	16c <d_make_builtin_type>
    7bac:	str	x0, [sp, #72]
    7bb0:	ldr	x1, [x0, #8]
    7bb4:	ldr	w0, [x19, #72]
    7bb8:	ldr	w1, [x1, #8]
    7bbc:	add	w0, w0, w1
    7bc0:	str	w0, [x19, #72]
    7bc4:	b	74c8 <d_type+0x154>
    7bc8:	adrp	x1, 0 <is_fnqual_component_type>
    7bcc:	add	x1, x1, #0x0
    7bd0:	add	x1, x1, #0x3a0
    7bd4:	mov	x0, x19
    7bd8:	bl	16c <d_make_builtin_type>
    7bdc:	str	x0, [sp, #72]
    7be0:	ldr	x1, [x0, #8]
    7be4:	ldr	w0, [x19, #72]
    7be8:	ldr	w1, [x1, #8]
    7bec:	add	w0, w0, w1
    7bf0:	str	w0, [x19, #72]
    7bf4:	b	74c8 <d_type+0x154>
    7bf8:	adrp	x1, 0 <is_fnqual_component_type>
    7bfc:	add	x1, x1, #0x0
    7c00:	add	x1, x1, #0x3c0
    7c04:	mov	x0, x19
    7c08:	bl	16c <d_make_builtin_type>
    7c0c:	str	x0, [sp, #72]
    7c10:	ldr	x1, [x0, #8]
    7c14:	ldr	w0, [x19, #72]
    7c18:	ldr	w1, [x1, #8]
    7c1c:	add	w0, w0, w1
    7c20:	str	w0, [x19, #72]
    7c24:	b	74c8 <d_type+0x154>
    7c28:	adrp	x1, 0 <is_fnqual_component_type>
    7c2c:	add	x1, x1, #0x0
    7c30:	add	x1, x1, #0x3e0
    7c34:	mov	x0, x19
    7c38:	bl	16c <d_make_builtin_type>
    7c3c:	str	x0, [sp, #72]
    7c40:	ldr	x1, [x0, #8]
    7c44:	ldr	w0, [x19, #72]
    7c48:	ldr	w1, [x1, #8]
    7c4c:	add	w0, w0, w1
    7c50:	str	w0, [x19, #72]
    7c54:	b	74c8 <d_type+0x154>
    7c58:	mov	x0, x19
    7c5c:	bl	2a4 <d_number>
    7c60:	b	79b4 <d_type+0x640>
    7c64:	add	x0, x0, #0x3
    7c68:	str	x0, [x19, #24]
    7c6c:	mov	x0, x19
    7c70:	bl	6afc <d_expression>
    7c74:	mov	x20, x0
    7c78:	b	7a74 <d_type+0x700>
    7c7c:	mov	x20, #0x0                   	// #0
    7c80:	b	7ab0 <d_type+0x73c>
    7c84:	adrp	x1, 0 <is_fnqual_component_type>
    7c88:	add	x1, x1, #0x0
    7c8c:	add	x1, x1, #0x420
    7c90:	mov	x0, x19
    7c94:	bl	16c <d_make_builtin_type>
    7c98:	str	x0, [sp, #72]
    7c9c:	ldr	x1, [x0, #8]
    7ca0:	ldr	w0, [x19, #72]
    7ca4:	ldr	w1, [x1, #8]
    7ca8:	add	w0, w0, w1
    7cac:	str	w0, [x19, #72]
    7cb0:	b	74c8 <d_type+0x154>
    7cb4:	mov	x20, x0
    7cb8:	b	74cc <d_type+0x158>
    7cbc:	mov	x20, #0x0                   	// #0
    7cc0:	b	74cc <d_type+0x158>
    7cc4:	mov	x20, #0x0                   	// #0
    7cc8:	b	74cc <d_type+0x158>
    7ccc:	mov	x20, #0x0                   	// #0
    7cd0:	b	74cc <d_type+0x158>

0000000000007cd4 <d_operator_name>:
    7cd4:	stp	x29, x30, [sp, #-48]!
    7cd8:	mov	x29, sp
    7cdc:	stp	x19, x20, [sp, #16]
    7ce0:	mov	x20, x0
    7ce4:	ldr	x0, [x0, #24]
    7ce8:	ldrb	w19, [x0]
    7cec:	cbz	w19, 7d6c <d_operator_name+0x98>
    7cf0:	add	x1, x0, #0x1
    7cf4:	str	x1, [x20, #24]
    7cf8:	ldrb	w6, [x0]
    7cfc:	ldrb	w19, [x0, #1]
    7d00:	cbz	w19, 7e88 <d_operator_name+0x1b4>
    7d04:	add	x1, x0, #0x2
    7d08:	str	x1, [x20, #24]
    7d0c:	ldrb	w19, [x0, #1]
    7d10:	cmp	w6, #0x76
    7d14:	b.ne	7d70 <d_operator_name+0x9c>  // b.any
    7d18:	str	x21, [sp, #32]
    7d1c:	sub	w0, w19, #0x30
    7d20:	and	w0, w0, #0xff
    7d24:	cmp	w0, #0x9
    7d28:	b.hi	7d84 <d_operator_name+0xb0>  // b.pmore
    7d2c:	mov	x0, x20
    7d30:	bl	a80 <d_source_name>
    7d34:	mov	x21, x0
    7d38:	mov	x0, x20
    7d3c:	bl	30 <d_make_empty>
    7d40:	cmp	x21, #0x0
    7d44:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    7d48:	b.eq	7e7c <d_operator_name+0x1a8>  // b.none
    7d4c:	str	wzr, [x0, #4]
    7d50:	mov	w1, #0x33                  	// #51
    7d54:	str	w1, [x0]
    7d58:	sub	w19, w19, #0x30
    7d5c:	str	w19, [x0, #8]
    7d60:	str	x21, [x0, #16]
    7d64:	ldr	x21, [sp, #32]
    7d68:	b	7e70 <d_operator_name+0x19c>
    7d6c:	mov	w6, w19
    7d70:	cmp	w6, #0x63
    7d74:	mov	w0, #0x76                  	// #118
    7d78:	ccmp	w19, w0, #0x0, eq  // eq = none
    7d7c:	b.eq	7d9c <d_operator_name+0xc8>  // b.none
    7d80:	str	x21, [sp, #32]
    7d84:	mov	w4, #0x43                  	// #67
    7d88:	mov	w3, #0x0                   	// #0
    7d8c:	adrp	x0, 0 <is_fnqual_component_type>
    7d90:	add	x0, x0, #0x0
    7d94:	add	x0, x0, #0x5c8
    7d98:	b	7e0c <d_operator_name+0x138>
    7d9c:	ldr	w19, [x20, #80]
    7da0:	ldr	w0, [x20, #76]
    7da4:	cmp	w0, #0x0
    7da8:	cset	w0, eq  // eq = none
    7dac:	str	w0, [x20, #80]
    7db0:	mov	x0, x20
    7db4:	bl	7374 <d_type>
    7db8:	mov	x2, x0
    7dbc:	ldr	w0, [x20, #80]
    7dc0:	cbz	w0, 7ddc <d_operator_name+0x108>
    7dc4:	mov	x3, #0x0                   	// #0
    7dc8:	mov	w1, #0x35                  	// #53
    7dcc:	mov	x0, x20
    7dd0:	bl	70 <d_make_comp>
    7dd4:	str	w19, [x20, #80]
    7dd8:	b	7e70 <d_operator_name+0x19c>
    7ddc:	mov	x3, #0x0                   	// #0
    7de0:	mov	w1, #0x34                  	// #52
    7de4:	mov	x0, x20
    7de8:	bl	70 <d_make_comp>
    7dec:	b	7dd4 <d_operator_name+0x100>
    7df0:	ldrb	w2, [x5, #1]
    7df4:	cmp	w2, w19
    7df8:	b.eq	7e40 <d_operator_name+0x16c>  // b.none
    7dfc:	b.hi	7e60 <d_operator_name+0x18c>  // b.pmore
    7e00:	add	w3, w1, #0x1
    7e04:	cmp	w3, w4
    7e08:	b.eq	7e68 <d_operator_name+0x194>  // b.none
    7e0c:	sub	w1, w4, w3
    7e10:	add	w1, w1, w1, lsr #31
    7e14:	add	w1, w3, w1, asr #1
    7e18:	sbfiz	x2, x1, #1, #32
    7e1c:	add	x2, x2, w1, sxtw
    7e20:	add	x21, x0, x2, lsl #3
    7e24:	ldr	x5, [x0, x2, lsl #3]
    7e28:	ldrb	w2, [x5]
    7e2c:	cmp	w2, w6
    7e30:	b.eq	7df0 <d_operator_name+0x11c>  // b.none
    7e34:	b.ls	7e00 <d_operator_name+0x12c>  // b.plast
    7e38:	mov	w4, w1
    7e3c:	b	7e04 <d_operator_name+0x130>
    7e40:	mov	x0, x20
    7e44:	bl	30 <d_make_empty>
    7e48:	cbz	x0, 7e98 <d_operator_name+0x1c4>
    7e4c:	mov	w1, #0x32                  	// #50
    7e50:	str	w1, [x0]
    7e54:	str	x21, [x0, #8]
    7e58:	ldr	x21, [sp, #32]
    7e5c:	b	7e70 <d_operator_name+0x19c>
    7e60:	mov	w4, w1
    7e64:	b	7e04 <d_operator_name+0x130>
    7e68:	mov	x0, #0x0                   	// #0
    7e6c:	ldr	x21, [sp, #32]
    7e70:	ldp	x19, x20, [sp, #16]
    7e74:	ldp	x29, x30, [sp], #48
    7e78:	ret
    7e7c:	mov	x0, #0x0                   	// #0
    7e80:	ldr	x21, [sp, #32]
    7e84:	b	7e70 <d_operator_name+0x19c>
    7e88:	cmp	w6, #0x76
    7e8c:	b.ne	7d70 <d_operator_name+0x9c>  // b.any
    7e90:	str	x21, [sp, #32]
    7e94:	b	7d84 <d_operator_name+0xb0>
    7e98:	ldr	x21, [sp, #32]
    7e9c:	b	7e70 <d_operator_name+0x19c>

0000000000007ea0 <d_parmlist>:
    7ea0:	stp	x29, x30, [sp, #-64]!
    7ea4:	mov	x29, sp
    7ea8:	stp	x19, x20, [sp, #16]
    7eac:	mov	x19, x0
    7eb0:	str	xzr, [sp, #56]
    7eb4:	ldr	x0, [x0, #24]
    7eb8:	ldrb	w1, [x0]
    7ebc:	cmp	w1, #0x45
    7ec0:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    7ec4:	mov	w2, #0x2e                  	// #46
    7ec8:	ccmp	w1, w2, #0x4, ne  // ne = any
    7ecc:	b.eq	7fb4 <d_parmlist+0x114>  // b.none
    7ed0:	stp	x21, x22, [sp, #32]
    7ed4:	add	x21, sp, #0x38
    7ed8:	mov	w22, #0x4f                  	// #79
    7edc:	mov	w20, w2
    7ee0:	b	7f2c <d_parmlist+0x8c>
    7ee4:	mov	x0, x19
    7ee8:	bl	7374 <d_type>
    7eec:	mov	x2, x0
    7ef0:	cbz	x0, 7fbc <d_parmlist+0x11c>
    7ef4:	mov	x3, #0x0                   	// #0
    7ef8:	mov	w1, w20
    7efc:	mov	x0, x19
    7f00:	bl	70 <d_make_comp>
    7f04:	mov	x2, x0
    7f08:	str	x0, [x21]
    7f0c:	cbz	x0, 7fc4 <d_parmlist+0x124>
    7f10:	add	x21, x0, #0x10
    7f14:	ldr	x0, [x19, #24]
    7f18:	ldrb	w1, [x0]
    7f1c:	cmp	w1, #0x45
    7f20:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    7f24:	ccmp	w1, w20, #0x4, ne  // ne = any
    7f28:	b.eq	7f44 <d_parmlist+0xa4>  // b.none
    7f2c:	cmp	w1, #0x52
    7f30:	ccmp	w1, w22, #0x4, ne  // ne = any
    7f34:	b.ne	7ee4 <d_parmlist+0x44>  // b.any
    7f38:	ldrb	w0, [x0, #1]
    7f3c:	cmp	w0, #0x45
    7f40:	b.ne	7ee4 <d_parmlist+0x44>  // b.any
    7f44:	ldr	x2, [sp, #56]
    7f48:	cbz	x2, 7fcc <d_parmlist+0x12c>
    7f4c:	ldr	x0, [x2, #16]
    7f50:	cbz	x0, 7f68 <d_parmlist+0xc8>
    7f54:	ldp	x21, x22, [sp, #32]
    7f58:	mov	x0, x2
    7f5c:	ldp	x19, x20, [sp, #16]
    7f60:	ldp	x29, x30, [sp], #64
    7f64:	ret
    7f68:	ldr	x0, [x2, #8]
    7f6c:	ldr	w1, [x0]
    7f70:	cmp	w1, #0x27
    7f74:	b.eq	7f80 <d_parmlist+0xe0>  // b.none
    7f78:	ldp	x21, x22, [sp, #32]
    7f7c:	b	7f58 <d_parmlist+0xb8>
    7f80:	ldr	x0, [x0, #8]
    7f84:	ldr	w1, [x0, #28]
    7f88:	cmp	w1, #0x9
    7f8c:	b.eq	7f98 <d_parmlist+0xf8>  // b.none
    7f90:	ldp	x21, x22, [sp, #32]
    7f94:	b	7f58 <d_parmlist+0xb8>
    7f98:	ldr	w1, [x19, #72]
    7f9c:	ldr	w0, [x0, #8]
    7fa0:	sub	w0, w1, w0
    7fa4:	str	w0, [x19, #72]
    7fa8:	str	xzr, [x2, #8]
    7fac:	ldp	x21, x22, [sp, #32]
    7fb0:	b	7f58 <d_parmlist+0xb8>
    7fb4:	mov	x2, #0x0                   	// #0
    7fb8:	b	7f58 <d_parmlist+0xb8>
    7fbc:	ldp	x21, x22, [sp, #32]
    7fc0:	b	7f58 <d_parmlist+0xb8>
    7fc4:	ldp	x21, x22, [sp, #32]
    7fc8:	b	7f58 <d_parmlist+0xb8>
    7fcc:	ldp	x21, x22, [sp, #32]
    7fd0:	b	7f58 <d_parmlist+0xb8>

0000000000007fd4 <d_cv_qualifiers>:
    7fd4:	stp	x29, x30, [sp, #-112]!
    7fd8:	mov	x29, sp
    7fdc:	stp	x19, x20, [sp, #16]
    7fe0:	stp	x21, x22, [sp, #32]
    7fe4:	stp	x23, x24, [sp, #48]
    7fe8:	stp	x25, x26, [sp, #64]
    7fec:	stp	x27, x28, [sp, #80]
    7ff0:	mov	x19, x0
    7ff4:	mov	x23, x1
    7ff8:	mov	w26, w2
    7ffc:	ldr	x0, [x0, #24]
    8000:	ldrb	w20, [x0]
    8004:	cmp	w2, #0x0
    8008:	mov	w0, #0x1e                  	// #30
    800c:	mov	w1, #0x1b                  	// #27
    8010:	csel	w0, w0, w1, ne  // ne = any
    8014:	mov	w25, #0x1d                  	// #29
    8018:	mov	w1, #0x1a                  	// #26
    801c:	csel	w25, w25, w1, ne  // ne = any
    8020:	mov	w24, #0x1c                  	// #28
    8024:	mov	w1, #0x19                  	// #25
    8028:	csel	w24, w24, w1, ne  // ne = any
    802c:	mov	x21, x23
    8030:	mov	w28, #0x50                  	// #80
    8034:	mov	x22, #0x0                   	// #0
    8038:	mov	w27, #0x4f                  	// #79
    803c:	str	w0, [sp, #108]
    8040:	b	807c <d_cv_qualifiers+0xa8>
    8044:	ldr	w0, [x19, #72]
    8048:	add	w0, w0, #0x9
    804c:	str	w0, [x19, #72]
    8050:	mov	w1, w24
    8054:	mov	x3, x22
    8058:	mov	x2, x22
    805c:	mov	x0, x19
    8060:	bl	70 <d_make_comp>
    8064:	mov	x3, x0
    8068:	str	x0, [x21]
    806c:	cbz	x0, 8228 <d_cv_qualifiers+0x254>
    8070:	add	x21, x0, #0x8
    8074:	ldr	x0, [x19, #24]
    8078:	ldrb	w20, [x0]
    807c:	mov	x0, x19
    8080:	bl	464 <next_is_type_qual>
    8084:	cbz	w0, 81b0 <d_cv_qualifiers+0x1dc>
    8088:	ldr	x0, [x19, #24]
    808c:	add	x1, x0, #0x1
    8090:	str	x1, [x19, #24]
    8094:	cmp	w20, #0x72
    8098:	b.eq	8044 <d_cv_qualifiers+0x70>  // b.none
    809c:	cmp	w20, #0x56
    80a0:	b.eq	8124 <d_cv_qualifiers+0x150>  // b.none
    80a4:	cmp	w20, #0x4b
    80a8:	b.eq	813c <d_cv_qualifiers+0x168>  // b.none
    80ac:	ldrb	w1, [x0, #1]
    80b0:	cbz	w1, 8224 <d_cv_qualifiers+0x250>
    80b4:	add	x1, x0, #0x2
    80b8:	str	x1, [x19, #24]
    80bc:	ldrb	w2, [x0, #1]
    80c0:	cmp	w2, #0x78
    80c4:	b.eq	8154 <d_cv_qualifiers+0x180>  // b.none
    80c8:	and	w0, w2, #0xffffffdf
    80cc:	and	w0, w0, #0xff
    80d0:	cmp	w0, #0x4f
    80d4:	b.ne	816c <d_cv_qualifiers+0x198>  // b.any
    80d8:	ldr	w0, [x19, #72]
    80dc:	add	w0, w0, #0x9
    80e0:	str	w0, [x19, #72]
    80e4:	mov	x3, x22
    80e8:	mov	w1, w27
    80ec:	cmp	w2, #0x4f
    80f0:	b.ne	8058 <d_cv_qualifiers+0x84>  // b.any
    80f4:	mov	x0, x19
    80f8:	bl	6afc <d_expression>
    80fc:	mov	x3, x0
    8100:	cbz	x0, 8228 <d_cv_qualifiers+0x254>
    8104:	ldr	x0, [x19, #24]
    8108:	ldrb	w1, [x0]
    810c:	cmp	w1, #0x45
    8110:	b.ne	8248 <d_cv_qualifiers+0x274>  // b.any
    8114:	add	x0, x0, #0x1
    8118:	str	x0, [x19, #24]
    811c:	mov	w1, w27
    8120:	b	8058 <d_cv_qualifiers+0x84>
    8124:	ldr	w0, [x19, #72]
    8128:	add	w0, w0, #0x9
    812c:	str	w0, [x19, #72]
    8130:	mov	w1, w25
    8134:	mov	x3, x22
    8138:	b	8058 <d_cv_qualifiers+0x84>
    813c:	ldr	w0, [x19, #72]
    8140:	add	w0, w0, #0x6
    8144:	str	w0, [x19, #72]
    8148:	ldr	w1, [sp, #108]
    814c:	mov	x3, x22
    8150:	b	8058 <d_cv_qualifiers+0x84>
    8154:	ldr	w0, [x19, #72]
    8158:	add	w0, w0, #0x11
    815c:	str	w0, [x19, #72]
    8160:	mov	x3, x22
    8164:	mov	w1, #0x4d                  	// #77
    8168:	b	8058 <d_cv_qualifiers+0x84>
    816c:	cmp	w2, #0x77
    8170:	b.ne	8250 <d_cv_qualifiers+0x27c>  // b.any
    8174:	ldr	w0, [x19, #72]
    8178:	add	w0, w0, #0x6
    817c:	str	w0, [x19, #72]
    8180:	mov	x0, x19
    8184:	bl	7ea0 <d_parmlist>
    8188:	mov	x3, x0
    818c:	cbz	x0, 8228 <d_cv_qualifiers+0x254>
    8190:	ldr	x0, [x19, #24]
    8194:	ldrb	w1, [x0]
    8198:	cmp	w1, #0x45
    819c:	b.ne	8258 <d_cv_qualifiers+0x284>  // b.any
    81a0:	add	x0, x0, #0x1
    81a4:	str	x0, [x19, #24]
    81a8:	mov	w1, w28
    81ac:	b	8058 <d_cv_qualifiers+0x84>
    81b0:	cmp	w20, #0x46
    81b4:	mov	x3, x21
    81b8:	ccmp	w26, #0x0, #0x0, eq  // eq = none
    81bc:	b.ne	8228 <d_cv_qualifiers+0x254>  // b.any
    81c0:	cmp	x21, x23
    81c4:	b.eq	8260 <d_cv_qualifiers+0x28c>  // b.none
    81c8:	mov	w4, #0x1d                  	// #29
    81cc:	mov	w3, #0x1e                  	// #30
    81d0:	mov	w2, #0x1c                  	// #28
    81d4:	b	81ec <d_cv_qualifiers+0x218>
    81d8:	str	w4, [x1]
    81dc:	ldr	x23, [x23]
    81e0:	add	x23, x23, #0x8
    81e4:	cmp	x21, x23
    81e8:	b.eq	821c <d_cv_qualifiers+0x248>  // b.none
    81ec:	ldr	x1, [x23]
    81f0:	ldr	w0, [x1]
    81f4:	cmp	w0, #0x1a
    81f8:	b.eq	81d8 <d_cv_qualifiers+0x204>  // b.none
    81fc:	cmp	w0, #0x1b
    8200:	b.eq	8214 <d_cv_qualifiers+0x240>  // b.none
    8204:	cmp	w0, #0x19
    8208:	b.ne	81dc <d_cv_qualifiers+0x208>  // b.any
    820c:	str	w2, [x1]
    8210:	b	81dc <d_cv_qualifiers+0x208>
    8214:	str	w3, [x1]
    8218:	b	81dc <d_cv_qualifiers+0x208>
    821c:	mov	x3, x23
    8220:	b	8228 <d_cv_qualifiers+0x254>
    8224:	mov	x3, #0x0                   	// #0
    8228:	mov	x0, x3
    822c:	ldp	x19, x20, [sp, #16]
    8230:	ldp	x21, x22, [sp, #32]
    8234:	ldp	x23, x24, [sp, #48]
    8238:	ldp	x25, x26, [sp, #64]
    823c:	ldp	x27, x28, [sp, #80]
    8240:	ldp	x29, x30, [sp], #112
    8244:	ret
    8248:	mov	x3, #0x0                   	// #0
    824c:	b	8228 <d_cv_qualifiers+0x254>
    8250:	mov	x3, #0x0                   	// #0
    8254:	b	8228 <d_cv_qualifiers+0x254>
    8258:	mov	x3, #0x0                   	// #0
    825c:	b	8228 <d_cv_qualifiers+0x254>
    8260:	mov	x3, x23
    8264:	b	8228 <d_cv_qualifiers+0x254>

0000000000008268 <d_bare_function_type>:
    8268:	stp	x29, x30, [sp, #-32]!
    826c:	mov	x29, sp
    8270:	stp	x19, x20, [sp, #16]
    8274:	mov	x19, x0
    8278:	ldr	x0, [x0, #24]
    827c:	ldrb	w2, [x0]
    8280:	cmp	w2, #0x4a
    8284:	b.eq	8294 <d_bare_function_type+0x2c>  // b.none
    8288:	cbnz	w1, 829c <d_bare_function_type+0x34>
    828c:	mov	x20, #0x0                   	// #0
    8290:	b	82ac <d_bare_function_type+0x44>
    8294:	add	x0, x0, #0x1
    8298:	str	x0, [x19, #24]
    829c:	mov	x0, x19
    82a0:	bl	7374 <d_type>
    82a4:	mov	x20, x0
    82a8:	cbz	x0, 82cc <d_bare_function_type+0x64>
    82ac:	mov	x0, x19
    82b0:	bl	7ea0 <d_parmlist>
    82b4:	cbz	x0, 82cc <d_bare_function_type+0x64>
    82b8:	mov	x3, x0
    82bc:	mov	x2, x20
    82c0:	mov	w1, #0x29                  	// #41
    82c4:	mov	x0, x19
    82c8:	bl	70 <d_make_comp>
    82cc:	ldp	x19, x20, [sp, #16]
    82d0:	ldp	x29, x30, [sp], #32
    82d4:	ret

00000000000082d8 <d_function_type>:
    82d8:	stp	x29, x30, [sp, #-32]!
    82dc:	mov	x29, sp
    82e0:	str	x19, [sp, #16]
    82e4:	mov	x19, x0
    82e8:	ldr	w0, [x0, #16]
    82ec:	tbnz	w0, #18, 8398 <d_function_type+0xc0>
    82f0:	ldr	w0, [x19, #84]
    82f4:	cmp	w0, #0x800
    82f8:	b.hi	8390 <d_function_type+0xb8>  // b.pmore
    82fc:	add	w0, w0, #0x1
    8300:	str	w0, [x19, #84]
    8304:	ldr	x1, [x19, #24]
    8308:	ldrb	w2, [x1]
    830c:	mov	x0, #0x0                   	// #0
    8310:	cmp	w2, #0x46
    8314:	b.eq	8330 <d_function_type+0x58>  // b.none
    8318:	ldr	w1, [x19, #84]
    831c:	sub	w1, w1, #0x1
    8320:	str	w1, [x19, #84]
    8324:	ldr	x19, [sp, #16]
    8328:	ldp	x29, x30, [sp], #32
    832c:	ret
    8330:	add	x0, x1, #0x1
    8334:	str	x0, [x19, #24]
    8338:	ldrb	w2, [x1, #1]
    833c:	add	x1, x1, #0x2
    8340:	cmp	w2, #0x59
    8344:	csel	x1, x1, x0, eq  // eq = none
    8348:	str	x1, [x19, #24]
    834c:	mov	w1, #0x1                   	// #1
    8350:	mov	x0, x19
    8354:	bl	8268 <d_bare_function_type>
    8358:	mov	x1, x0
    835c:	mov	x0, x19
    8360:	bl	4bc <d_ref_qualifier>
    8364:	ldr	x1, [x19, #24]
    8368:	ldrb	w2, [x1]
    836c:	cmp	w2, #0x45
    8370:	b.eq	8384 <d_function_type+0xac>  // b.none
    8374:	mov	x0, #0x0                   	// #0
    8378:	ldr	w1, [x19, #16]
    837c:	tbz	w1, #18, 8318 <d_function_type+0x40>
    8380:	b	8324 <d_function_type+0x4c>
    8384:	add	x1, x1, #0x1
    8388:	str	x1, [x19, #24]
    838c:	b	8378 <d_function_type+0xa0>
    8390:	mov	x0, #0x0                   	// #0
    8394:	b	8324 <d_function_type+0x4c>
    8398:	ldr	x1, [x19, #24]
    839c:	ldrb	w0, [x1]
    83a0:	cmp	w0, #0x46
    83a4:	b.eq	8330 <d_function_type+0x58>  // b.none
    83a8:	mov	x0, #0x0                   	// #0
    83ac:	b	8324 <d_function_type+0x4c>

00000000000083b0 <d_unqualified_name>:
    83b0:	stp	x29, x30, [sp, #-48]!
    83b4:	mov	x29, sp
    83b8:	stp	x19, x20, [sp, #16]
    83bc:	mov	x19, x0
    83c0:	ldr	x2, [x0, #24]
    83c4:	ldrb	w1, [x2]
    83c8:	sub	w0, w1, #0x30
    83cc:	and	w0, w0, #0xff
    83d0:	cmp	w0, #0x9
    83d4:	b.ls	8460 <d_unqualified_name+0xb0>  // b.plast
    83d8:	sub	w0, w1, #0x61
    83dc:	and	w0, w0, #0xff
    83e0:	cmp	w0, #0x19
    83e4:	b.hi	84a4 <d_unqualified_name+0xf4>  // b.pmore
    83e8:	cmp	w1, #0x6f
    83ec:	b.eq	848c <d_unqualified_name+0xdc>  // b.none
    83f0:	mov	x0, x19
    83f4:	bl	7cd4 <d_operator_name>
    83f8:	mov	x20, x0
    83fc:	cbz	x0, 846c <d_unqualified_name+0xbc>
    8400:	ldr	w0, [x0]
    8404:	cmp	w0, #0x32
    8408:	b.ne	846c <d_unqualified_name+0xbc>  // b.any
    840c:	ldr	x2, [x20, #8]
    8410:	ldr	w0, [x19, #72]
    8414:	add	w1, w0, #0x7
    8418:	ldr	w0, [x2, #16]
    841c:	add	w0, w0, w1
    8420:	str	w0, [x19, #72]
    8424:	ldr	x0, [x20, #8]
    8428:	adrp	x1, 0 <is_fnqual_component_type>
    842c:	add	x1, x1, #0x0
    8430:	ldr	x0, [x0]
    8434:	bl	0 <strcmp>
    8438:	cbnz	w0, 846c <d_unqualified_name+0xbc>
    843c:	mov	x0, x19
    8440:	bl	a80 <d_source_name>
    8444:	mov	x3, x0
    8448:	mov	x2, x20
    844c:	mov	w1, #0x37                  	// #55
    8450:	mov	x0, x19
    8454:	bl	70 <d_make_comp>
    8458:	mov	x20, x0
    845c:	b	846c <d_unqualified_name+0xbc>
    8460:	mov	x0, x19
    8464:	bl	a80 <d_source_name>
    8468:	mov	x20, x0
    846c:	ldr	x0, [x19, #24]
    8470:	ldrb	w0, [x0]
    8474:	cmp	w0, #0x42
    8478:	b.eq	889c <d_unqualified_name+0x4ec>  // b.none
    847c:	mov	x0, x20
    8480:	ldp	x19, x20, [sp, #16]
    8484:	ldp	x29, x30, [sp], #48
    8488:	ret
    848c:	ldrb	w0, [x2, #1]
    8490:	cmp	w0, #0x6e
    8494:	b.ne	83f0 <d_unqualified_name+0x40>  // b.any
    8498:	add	x2, x2, #0x2
    849c:	str	x2, [x19, #24]
    84a0:	b	83f0 <d_unqualified_name+0x40>
    84a4:	sub	w0, w1, #0x43
    84a8:	and	w0, w0, #0xff
    84ac:	cmp	w0, #0x1
    84b0:	b.ls	854c <d_unqualified_name+0x19c>  // b.plast
    84b4:	cmp	w1, #0x4c
    84b8:	b.eq	8790 <d_unqualified_name+0x3e0>  // b.none
    84bc:	mov	x20, #0x0                   	// #0
    84c0:	cmp	w1, #0x55
    84c4:	b.ne	847c <d_unqualified_name+0xcc>  // b.any
    84c8:	ldrb	w0, [x2, #1]
    84cc:	cmp	w0, #0x6c
    84d0:	b.eq	87bc <d_unqualified_name+0x40c>  // b.none
    84d4:	cmp	w0, #0x74
    84d8:	b.ne	847c <d_unqualified_name+0xcc>  // b.any
    84dc:	add	x0, x2, #0x1
    84e0:	str	x0, [x19, #24]
    84e4:	ldrb	w0, [x2, #1]
    84e8:	mov	x20, #0x0                   	// #0
    84ec:	cmp	w0, #0x74
    84f0:	b.ne	846c <d_unqualified_name+0xbc>  // b.any
    84f4:	stp	x21, x22, [sp, #32]
    84f8:	add	x2, x2, #0x2
    84fc:	str	x2, [x19, #24]
    8500:	mov	x0, x19
    8504:	bl	528 <d_compact_number>
    8508:	mov	w21, w0
    850c:	tbnz	w0, #31, 8894 <d_unqualified_name+0x4e4>
    8510:	mov	x0, x19
    8514:	bl	30 <d_make_empty>
    8518:	mov	x20, x0
    851c:	cbz	x0, 8530 <d_unqualified_name+0x180>
    8520:	mov	w0, #0x48                  	// #72
    8524:	str	w0, [x20]
    8528:	sxtw	x21, w21
    852c:	str	x21, [x20, #8]
    8530:	mov	x1, x20
    8534:	mov	x0, x19
    8538:	bl	6f0 <d_add_substitution>
    853c:	cmp	w0, #0x0
    8540:	csel	x20, x20, xzr, ne  // ne = any
    8544:	ldp	x21, x22, [sp, #32]
    8548:	b	846c <d_unqualified_name+0xbc>
    854c:	stp	x21, x22, [sp, #32]
    8550:	ldr	x21, [x19, #64]
    8554:	cbz	x21, 8598 <d_unqualified_name+0x1e8>
    8558:	ldr	w0, [x21]
    855c:	cbnz	w0, 8590 <d_unqualified_name+0x1e0>
    8560:	ldr	w0, [x19, #72]
    8564:	ldr	w1, [x21, #16]
    8568:	add	w0, w0, w1
    856c:	str	w0, [x19, #72]
    8570:	ldrb	w0, [x2]
    8574:	cmp	w0, #0x43
    8578:	b.eq	85dc <d_unqualified_name+0x22c>  // b.none
    857c:	cmp	w0, #0x44
    8580:	b.eq	85a0 <d_unqualified_name+0x1f0>  // b.none
    8584:	mov	x20, #0x0                   	// #0
    8588:	ldp	x21, x22, [sp, #32]
    858c:	b	846c <d_unqualified_name+0xbc>
    8590:	cmp	w0, #0x18
    8594:	b.eq	85c8 <d_unqualified_name+0x218>  // b.none
    8598:	cmp	w1, #0x43
    859c:	b.eq	85dc <d_unqualified_name+0x22c>  // b.none
    85a0:	ldrb	w0, [x2, #1]
    85a4:	cmp	w0, #0x32
    85a8:	b.eq	8778 <d_unqualified_name+0x3c8>  // b.none
    85ac:	b.ls	871c <d_unqualified_name+0x36c>  // b.plast
    85b0:	cmp	w0, #0x34
    85b4:	b.eq	8788 <d_unqualified_name+0x3d8>  // b.none
    85b8:	cmp	w0, #0x35
    85bc:	b.ne	8860 <d_unqualified_name+0x4b0>  // b.any
    85c0:	mov	w22, #0x5                   	// #5
    85c4:	b	8730 <d_unqualified_name+0x380>
    85c8:	ldr	w0, [x19, #72]
    85cc:	ldr	w1, [x21, #16]
    85d0:	add	w0, w0, w1
    85d4:	str	w0, [x19, #72]
    85d8:	b	8570 <d_unqualified_name+0x1c0>
    85dc:	ldrb	w0, [x2, #1]
    85e0:	cmp	w0, #0x49
    85e4:	b.eq	8610 <d_unqualified_name+0x260>  // b.none
    85e8:	cmp	w0, #0x33
    85ec:	b.eq	86f8 <d_unqualified_name+0x348>  // b.none
    85f0:	b.ls	8678 <d_unqualified_name+0x2c8>  // b.plast
    85f4:	cmp	w0, #0x34
    85f8:	b.eq	8710 <d_unqualified_name+0x360>  // b.none
    85fc:	mov	w1, #0x0                   	// #0
    8600:	cmp	w0, #0x35
    8604:	b.ne	86e0 <d_unqualified_name+0x330>  // b.any
    8608:	mov	w22, #0x5                   	// #5
    860c:	b	8690 <d_unqualified_name+0x2e0>
    8610:	add	x1, x2, #0x1
    8614:	str	x1, [x19, #24]
    8618:	ldrb	w0, [x2, #2]
    861c:	cmp	w0, #0x33
    8620:	b.eq	86ec <d_unqualified_name+0x33c>  // b.none
    8624:	b.hi	8650 <d_unqualified_name+0x2a0>  // b.pmore
    8628:	cmp	w0, #0x31
    862c:	b.eq	88b0 <d_unqualified_name+0x500>  // b.none
    8630:	cmp	w0, #0x32
    8634:	b.ne	8644 <d_unqualified_name+0x294>  // b.any
    8638:	mov	x2, x1
    863c:	mov	w1, #0x1                   	// #1
    8640:	b	868c <d_unqualified_name+0x2dc>
    8644:	mov	x20, #0x0                   	// #0
    8648:	ldp	x21, x22, [sp, #32]
    864c:	b	846c <d_unqualified_name+0xbc>
    8650:	cmp	w0, #0x34
    8654:	b.eq	8704 <d_unqualified_name+0x354>  // b.none
    8658:	cmp	w0, #0x35
    865c:	b.ne	866c <d_unqualified_name+0x2bc>  // b.any
    8660:	mov	x2, x1
    8664:	mov	w1, #0x1                   	// #1
    8668:	b	8608 <d_unqualified_name+0x258>
    866c:	mov	x20, #0x0                   	// #0
    8670:	ldp	x21, x22, [sp, #32]
    8674:	b	846c <d_unqualified_name+0xbc>
    8678:	cmp	w0, #0x31
    867c:	b.eq	88c8 <d_unqualified_name+0x518>  // b.none
    8680:	mov	w1, #0x0                   	// #0
    8684:	cmp	w0, #0x32
    8688:	b.ne	86d4 <d_unqualified_name+0x324>  // b.any
    868c:	mov	w22, #0x2                   	// #2
    8690:	add	x2, x2, #0x2
    8694:	str	x2, [x19, #24]
    8698:	cbnz	w1, 88bc <d_unqualified_name+0x50c>
    869c:	ldr	x21, [x19, #64]
    86a0:	mov	x0, x19
    86a4:	bl	30 <d_make_empty>
    86a8:	mov	x20, x0
    86ac:	cmp	x0, #0x0
    86b0:	ccmp	x21, #0x0, #0x4, ne  // ne = any
    86b4:	b.eq	8854 <d_unqualified_name+0x4a4>  // b.none
    86b8:	str	wzr, [x0, #4]
    86bc:	mov	w0, #0x7                   	// #7
    86c0:	str	w0, [x20]
    86c4:	str	w22, [x20, #8]
    86c8:	str	x21, [x20, #16]
    86cc:	ldp	x21, x22, [sp, #32]
    86d0:	b	846c <d_unqualified_name+0xbc>
    86d4:	mov	x20, #0x0                   	// #0
    86d8:	ldp	x21, x22, [sp, #32]
    86dc:	b	846c <d_unqualified_name+0xbc>
    86e0:	mov	x20, #0x0                   	// #0
    86e4:	ldp	x21, x22, [sp, #32]
    86e8:	b	846c <d_unqualified_name+0xbc>
    86ec:	mov	x2, x1
    86f0:	mov	w1, #0x1                   	// #1
    86f4:	b	86fc <d_unqualified_name+0x34c>
    86f8:	mov	w1, #0x0                   	// #0
    86fc:	mov	w22, #0x3                   	// #3
    8700:	b	8690 <d_unqualified_name+0x2e0>
    8704:	mov	x2, x1
    8708:	mov	w1, #0x1                   	// #1
    870c:	b	8714 <d_unqualified_name+0x364>
    8710:	mov	w1, #0x0                   	// #0
    8714:	mov	w22, #0x4                   	// #4
    8718:	b	8690 <d_unqualified_name+0x2e0>
    871c:	cmp	w0, #0x30
    8720:	b.eq	8780 <d_unqualified_name+0x3d0>  // b.none
    8724:	mov	w22, #0x2                   	// #2
    8728:	cmp	w0, #0x31
    872c:	b.ne	876c <d_unqualified_name+0x3bc>  // b.any
    8730:	add	x2, x2, #0x2
    8734:	str	x2, [x19, #24]
    8738:	mov	x0, x19
    873c:	bl	30 <d_make_empty>
    8740:	mov	x20, x0
    8744:	cmp	x0, #0x0
    8748:	ccmp	x21, #0x0, #0x4, ne  // ne = any
    874c:	b.eq	886c <d_unqualified_name+0x4bc>  // b.none
    8750:	str	wzr, [x0, #4]
    8754:	mov	w0, #0x8                   	// #8
    8758:	str	w0, [x20]
    875c:	str	w22, [x20, #8]
    8760:	str	x21, [x20, #16]
    8764:	ldp	x21, x22, [sp, #32]
    8768:	b	846c <d_unqualified_name+0xbc>
    876c:	mov	x20, #0x0                   	// #0
    8770:	ldp	x21, x22, [sp, #32]
    8774:	b	846c <d_unqualified_name+0xbc>
    8778:	mov	w22, #0x3                   	// #3
    877c:	b	8730 <d_unqualified_name+0x380>
    8780:	mov	w22, #0x1                   	// #1
    8784:	b	8730 <d_unqualified_name+0x380>
    8788:	mov	w22, #0x4                   	// #4
    878c:	b	8730 <d_unqualified_name+0x380>
    8790:	add	x2, x2, #0x1
    8794:	str	x2, [x19, #24]
    8798:	mov	x0, x19
    879c:	bl	a80 <d_source_name>
    87a0:	mov	x20, x0
    87a4:	cbz	x0, 847c <d_unqualified_name+0xcc>
    87a8:	mov	x0, x19
    87ac:	bl	650 <d_discriminator>
    87b0:	cbnz	w0, 846c <d_unqualified_name+0xbc>
    87b4:	mov	x20, #0x0                   	// #0
    87b8:	b	847c <d_unqualified_name+0xcc>
    87bc:	add	x0, x2, #0x1
    87c0:	str	x0, [x19, #24]
    87c4:	ldrb	w0, [x2, #1]
    87c8:	mov	x20, #0x0                   	// #0
    87cc:	cmp	w0, #0x6c
    87d0:	b.ne	846c <d_unqualified_name+0xbc>  // b.any
    87d4:	stp	x21, x22, [sp, #32]
    87d8:	add	x2, x2, #0x2
    87dc:	str	x2, [x19, #24]
    87e0:	mov	x0, x19
    87e4:	bl	7ea0 <d_parmlist>
    87e8:	mov	x21, x0
    87ec:	cbz	x0, 8878 <d_unqualified_name+0x4c8>
    87f0:	ldr	x0, [x19, #24]
    87f4:	ldrb	w1, [x0]
    87f8:	cmp	w1, #0x45
    87fc:	b.ne	8884 <d_unqualified_name+0x4d4>  // b.any
    8800:	add	x0, x0, #0x1
    8804:	str	x0, [x19, #24]
    8808:	mov	x0, x19
    880c:	bl	528 <d_compact_number>
    8810:	mov	w22, w0
    8814:	tbnz	w0, #31, 888c <d_unqualified_name+0x4dc>
    8818:	mov	x0, x19
    881c:	bl	30 <d_make_empty>
    8820:	mov	x20, x0
    8824:	cbz	x0, 8838 <d_unqualified_name+0x488>
    8828:	mov	w0, #0x46                  	// #70
    882c:	str	w0, [x20]
    8830:	str	x21, [x20, #8]
    8834:	str	w22, [x20, #16]
    8838:	mov	x1, x20
    883c:	mov	x0, x19
    8840:	bl	6f0 <d_add_substitution>
    8844:	cmp	w0, #0x0
    8848:	csel	x20, x20, xzr, ne  // ne = any
    884c:	ldp	x21, x22, [sp, #32]
    8850:	b	846c <d_unqualified_name+0xbc>
    8854:	mov	x20, #0x0                   	// #0
    8858:	ldp	x21, x22, [sp, #32]
    885c:	b	846c <d_unqualified_name+0xbc>
    8860:	mov	x20, #0x0                   	// #0
    8864:	ldp	x21, x22, [sp, #32]
    8868:	b	846c <d_unqualified_name+0xbc>
    886c:	mov	x20, #0x0                   	// #0
    8870:	ldp	x21, x22, [sp, #32]
    8874:	b	846c <d_unqualified_name+0xbc>
    8878:	mov	x20, x0
    887c:	ldp	x21, x22, [sp, #32]
    8880:	b	846c <d_unqualified_name+0xbc>
    8884:	ldp	x21, x22, [sp, #32]
    8888:	b	846c <d_unqualified_name+0xbc>
    888c:	ldp	x21, x22, [sp, #32]
    8890:	b	846c <d_unqualified_name+0xbc>
    8894:	ldp	x21, x22, [sp, #32]
    8898:	b	846c <d_unqualified_name+0xbc>
    889c:	mov	x1, x20
    88a0:	mov	x0, x19
    88a4:	bl	b84 <d_abi_tags>
    88a8:	mov	x20, x0
    88ac:	b	847c <d_unqualified_name+0xcc>
    88b0:	add	x2, x2, #0x3
    88b4:	str	x2, [x19, #24]
    88b8:	mov	w22, #0x1                   	// #1
    88bc:	mov	x0, x19
    88c0:	bl	7374 <d_type>
    88c4:	b	869c <d_unqualified_name+0x2ec>
    88c8:	add	x2, x2, #0x2
    88cc:	str	x2, [x19, #24]
    88d0:	mov	w22, #0x1                   	// #1
    88d4:	b	869c <d_unqualified_name+0x2ec>

00000000000088d8 <d_name>:
    88d8:	stp	x29, x30, [sp, #-112]!
    88dc:	mov	x29, sp
    88e0:	stp	x19, x20, [sp, #16]
    88e4:	stp	x21, x22, [sp, #32]
    88e8:	mov	x19, x0
    88ec:	ldr	x1, [x0, #24]
    88f0:	ldrb	w0, [x1]
    88f4:	cmp	w0, #0x55
    88f8:	b.eq	8cd4 <d_name+0x3fc>  // b.none
    88fc:	b.hi	8960 <d_name+0x88>  // b.pmore
    8900:	cmp	w0, #0x4e
    8904:	b.eq	89f4 <d_name+0x11c>  // b.none
    8908:	cmp	w0, #0x53
    890c:	b.ne	8d68 <d_name+0x490>  // b.any
    8910:	ldrb	w0, [x1, #1]
    8914:	cmp	w0, #0x74
    8918:	b.eq	8cf4 <d_name+0x41c>  // b.none
    891c:	mov	w1, #0x0                   	// #0
    8920:	mov	x0, x19
    8924:	bl	68a8 <d_substitution>
    8928:	mov	x22, x0
    892c:	ldr	x0, [x19, #24]
    8930:	ldrb	w0, [x0]
    8934:	cmp	w0, #0x49
    8938:	b.ne	8ce0 <d_name+0x408>  // b.any
    893c:	mov	x0, x19
    8940:	bl	98cc <d_template_args>
    8944:	mov	x3, x0
    8948:	mov	x2, x22
    894c:	mov	w1, #0x4                   	// #4
    8950:	mov	x0, x19
    8954:	bl	70 <d_make_comp>
    8958:	mov	x22, x0
    895c:	b	8ce0 <d_name+0x408>
    8960:	cmp	w0, #0x5a
    8964:	b.ne	8d68 <d_name+0x490>  // b.any
    8968:	add	x1, x1, #0x1
    896c:	str	x1, [x19, #24]
    8970:	mov	w1, #0x0                   	// #0
    8974:	mov	x0, x19
    8978:	bl	8e20 <d_encoding>
    897c:	mov	x22, x0
    8980:	cbz	x0, 8ce0 <d_name+0x408>
    8984:	ldr	x0, [x19, #24]
    8988:	ldrb	w1, [x0]
    898c:	cmp	w1, #0x45
    8990:	b.ne	8db8 <d_name+0x4e0>  // b.any
    8994:	add	x1, x0, #0x1
    8998:	str	x1, [x19, #24]
    899c:	ldrb	w1, [x0, #1]
    89a0:	cmp	w1, #0x73
    89a4:	b.eq	8c0c <d_name+0x334>  // b.none
    89a8:	cmp	w1, #0x64
    89ac:	b.eq	8c3c <d_name+0x364>  // b.none
    89b0:	mov	x0, x19
    89b4:	bl	88d8 <d_name>
    89b8:	mov	x3, x0
    89bc:	cbz	x0, 89d0 <d_name+0xf8>
    89c0:	ldr	w0, [x0]
    89c4:	sub	w0, w0, #0x46
    89c8:	tst	w0, #0xfffffffd
    89cc:	b.ne	8c78 <d_name+0x3a0>  // b.any
    89d0:	ldr	w0, [x22]
    89d4:	cmp	w0, #0x3
    89d8:	b.eq	8cbc <d_name+0x3e4>  // b.none
    89dc:	mov	x2, x22
    89e0:	mov	w1, #0x2                   	// #2
    89e4:	mov	x0, x19
    89e8:	bl	70 <d_make_comp>
    89ec:	mov	x22, x0
    89f0:	b	8ce0 <d_name+0x408>
    89f4:	add	x1, x1, #0x1
    89f8:	str	x1, [x19, #24]
    89fc:	mov	w2, #0x1                   	// #1
    8a00:	add	x1, sp, #0x68
    8a04:	mov	x0, x19
    8a08:	bl	7fd4 <d_cv_qualifiers>
    8a0c:	mov	x22, x0
    8a10:	cbz	x0, 8ce0 <d_name+0x408>
    8a14:	stp	x27, x28, [sp, #80]
    8a18:	mov	x1, #0x0                   	// #0
    8a1c:	mov	x0, x19
    8a20:	bl	4bc <d_ref_qualifier>
    8a24:	mov	x27, x0
    8a28:	ldr	x0, [x19, #24]
    8a2c:	ldrb	w20, [x0]
    8a30:	cbz	w20, 8de8 <d_name+0x510>
    8a34:	stp	x23, x24, [sp, #48]
    8a38:	stp	x25, x26, [sp, #64]
    8a3c:	mov	x23, #0x0                   	// #0
    8a40:	mov	w24, #0x1                   	// #1
    8a44:	mov	w26, #0x55                  	// #85
    8a48:	mov	w25, #0x4c                  	// #76
    8a4c:	mov	w28, #0x4                   	// #4
    8a50:	b	8ac8 <d_name+0x1f0>
    8a54:	ldrb	w0, [x0, #1]
    8a58:	and	w0, w0, #0xffffffdf
    8a5c:	and	w0, w0, #0xff
    8a60:	cmp	w0, #0x54
    8a64:	b.ne	8b14 <d_name+0x23c>  // b.any
    8a68:	mov	x0, x19
    8a6c:	bl	7374 <d_type>
    8a70:	mov	x21, x0
    8a74:	mov	w1, w24
    8a78:	cbz	x23, 8a98 <d_name+0x1c0>
    8a7c:	mov	x3, x21
    8a80:	mov	x2, x23
    8a84:	mov	x0, x19
    8a88:	bl	70 <d_make_comp>
    8a8c:	mov	x21, x0
    8a90:	cmp	w20, #0x53
    8a94:	b.eq	8ab8 <d_name+0x1e0>  // b.none
    8a98:	ldr	x0, [x19, #24]
    8a9c:	ldrb	w20, [x0]
    8aa0:	cmp	w20, #0x45
    8aa4:	b.eq	8ac4 <d_name+0x1ec>  // b.none
    8aa8:	mov	x1, x21
    8aac:	mov	x0, x19
    8ab0:	bl	6f0 <d_add_substitution>
    8ab4:	cbz	w0, 8ba4 <d_name+0x2cc>
    8ab8:	ldr	x0, [x19, #24]
    8abc:	ldrb	w20, [x0]
    8ac0:	cbz	w20, 8de0 <d_name+0x508>
    8ac4:	mov	x23, x21
    8ac8:	cmp	w20, #0x44
    8acc:	b.eq	8a54 <d_name+0x17c>  // b.none
    8ad0:	sub	w2, w20, #0x30
    8ad4:	and	w2, w2, #0xff
    8ad8:	sub	w1, w20, #0x61
    8adc:	and	w1, w1, #0xff
    8ae0:	cmp	w2, #0x9
    8ae4:	ccmp	w1, #0x19, #0x0, hi  // hi = pmore
    8ae8:	b.ls	8afc <d_name+0x224>  // b.plast
    8aec:	cmp	w20, #0x43
    8af0:	ccmp	w20, w26, #0x4, ne  // ne = any
    8af4:	ccmp	w20, w25, #0x4, ne  // ne = any
    8af8:	b.ne	8b24 <d_name+0x24c>  // b.any
    8afc:	mov	x0, x19
    8b00:	bl	83b0 <d_unqualified_name>
    8b04:	mov	x21, x0
    8b08:	mov	w1, w24
    8b0c:	cbnz	x23, 8a7c <d_name+0x1a4>
    8b10:	b	8a90 <d_name+0x1b8>
    8b14:	mov	x0, x19
    8b18:	bl	83b0 <d_unqualified_name>
    8b1c:	mov	x21, x0
    8b20:	b	8a74 <d_name+0x19c>
    8b24:	cmp	w20, #0x53
    8b28:	b.eq	8b60 <d_name+0x288>  // b.none
    8b2c:	cmp	w20, #0x49
    8b30:	b.eq	8b7c <d_name+0x2a4>  // b.none
    8b34:	cmp	w20, #0x54
    8b38:	b.eq	8b94 <d_name+0x2bc>  // b.none
    8b3c:	cmp	w20, #0x45
    8b40:	b.eq	8bb0 <d_name+0x2d8>  // b.none
    8b44:	cmp	w20, #0x4d
    8b48:	ccmp	x23, #0x0, #0x4, eq  // eq = none
    8b4c:	b.eq	8e04 <d_name+0x52c>  // b.none
    8b50:	add	x0, x0, #0x1
    8b54:	str	x0, [x19, #24]
    8b58:	mov	x21, x23
    8b5c:	b	8ab8 <d_name+0x1e0>
    8b60:	mov	w1, w24
    8b64:	mov	x0, x19
    8b68:	bl	68a8 <d_substitution>
    8b6c:	mov	x21, x0
    8b70:	mov	w1, w24
    8b74:	cbnz	x23, 8a7c <d_name+0x1a4>
    8b78:	b	8ab8 <d_name+0x1e0>
    8b7c:	cbz	x23, 8df8 <d_name+0x520>
    8b80:	mov	x0, x19
    8b84:	bl	98cc <d_template_args>
    8b88:	mov	x21, x0
    8b8c:	mov	w1, w28
    8b90:	b	8a7c <d_name+0x1a4>
    8b94:	mov	x0, x19
    8b98:	bl	5a4 <d_template_param>
    8b9c:	mov	x21, x0
    8ba0:	b	8a74 <d_name+0x19c>
    8ba4:	ldp	x23, x24, [sp, #48]
    8ba8:	ldp	x25, x26, [sp, #64]
    8bac:	b	8de8 <d_name+0x510>
    8bb0:	str	x23, [x22]
    8bb4:	cbz	x23, 8bf8 <d_name+0x320>
    8bb8:	cbz	x27, 8bc8 <d_name+0x2f0>
    8bbc:	ldr	x0, [sp, #104]
    8bc0:	str	x0, [x27, #8]
    8bc4:	str	x27, [sp, #104]
    8bc8:	ldr	x0, [x19, #24]
    8bcc:	ldrb	w1, [x0]
    8bd0:	mov	x22, #0x0                   	// #0
    8bd4:	cmp	w1, #0x45
    8bd8:	b.ne	8e10 <d_name+0x538>  // b.any
    8bdc:	add	x0, x0, #0x1
    8be0:	str	x0, [x19, #24]
    8be4:	ldr	x22, [sp, #104]
    8be8:	ldp	x23, x24, [sp, #48]
    8bec:	ldp	x25, x26, [sp, #64]
    8bf0:	ldp	x27, x28, [sp, #80]
    8bf4:	b	8ce0 <d_name+0x408>
    8bf8:	mov	x22, x23
    8bfc:	ldp	x23, x24, [sp, #48]
    8c00:	ldp	x25, x26, [sp, #64]
    8c04:	ldp	x27, x28, [sp, #80]
    8c08:	b	8ce0 <d_name+0x408>
    8c0c:	add	x0, x0, #0x2
    8c10:	str	x0, [x19, #24]
    8c14:	mov	x0, x19
    8c18:	bl	650 <d_discriminator>
    8c1c:	cbz	w0, 8dc0 <d_name+0x4e8>
    8c20:	mov	w2, #0xe                   	// #14
    8c24:	adrp	x1, 0 <is_fnqual_component_type>
    8c28:	add	x1, x1, #0x0
    8c2c:	mov	x0, x19
    8c30:	bl	120 <d_make_name>
    8c34:	mov	x3, x0
    8c38:	b	89d0 <d_name+0xf8>
    8c3c:	add	x0, x0, #0x2
    8c40:	str	x0, [x19, #24]
    8c44:	mov	x0, x19
    8c48:	bl	528 <d_compact_number>
    8c4c:	mov	w20, w0
    8c50:	tbnz	w0, #31, 8dc8 <d_name+0x4f0>
    8c54:	mov	x0, x19
    8c58:	bl	88d8 <d_name>
    8c5c:	mov	x21, x0
    8c60:	cbz	x0, 8c90 <d_name+0x3b8>
    8c64:	ldr	w0, [x0]
    8c68:	sub	w0, w0, #0x46
    8c6c:	tst	w0, #0xfffffffd
    8c70:	b.eq	8c90 <d_name+0x3b8>  // b.none
    8c74:	b	8c80 <d_name+0x3a8>
    8c78:	mov	x21, x3
    8c7c:	mov	w20, #0xffffffff            	// #-1
    8c80:	mov	x0, x19
    8c84:	bl	650 <d_discriminator>
    8c88:	cbz	w0, 8dd0 <d_name+0x4f8>
    8c8c:	tbnz	w20, #31, 8cb4 <d_name+0x3dc>
    8c90:	mov	x0, x19
    8c94:	bl	30 <d_make_empty>
    8c98:	mov	x3, x0
    8c9c:	cbz	x0, 89d0 <d_name+0xf8>
    8ca0:	mov	w0, #0x47                  	// #71
    8ca4:	str	w0, [x3]
    8ca8:	str	w20, [x3, #16]
    8cac:	str	x21, [x3, #8]
    8cb0:	b	89d0 <d_name+0xf8>
    8cb4:	mov	x3, x21
    8cb8:	b	89d0 <d_name+0xf8>
    8cbc:	ldr	x0, [x22, #16]
    8cc0:	ldr	w1, [x0]
    8cc4:	cmp	w1, #0x29
    8cc8:	b.ne	89dc <d_name+0x104>  // b.any
    8ccc:	str	xzr, [x0, #8]
    8cd0:	b	89dc <d_name+0x104>
    8cd4:	mov	x0, x19
    8cd8:	bl	83b0 <d_unqualified_name>
    8cdc:	mov	x22, x0
    8ce0:	mov	x0, x22
    8ce4:	ldp	x19, x20, [sp, #16]
    8ce8:	ldp	x21, x22, [sp, #32]
    8cec:	ldp	x29, x30, [sp], #112
    8cf0:	ret
    8cf4:	add	x1, x1, #0x2
    8cf8:	str	x1, [x19, #24]
    8cfc:	mov	w2, #0x3                   	// #3
    8d00:	adrp	x1, 0 <is_fnqual_component_type>
    8d04:	add	x1, x1, #0x0
    8d08:	mov	x0, x19
    8d0c:	bl	120 <d_make_name>
    8d10:	mov	x20, x0
    8d14:	mov	x0, x19
    8d18:	bl	83b0 <d_unqualified_name>
    8d1c:	mov	x3, x0
    8d20:	mov	x2, x20
    8d24:	mov	w1, #0x1                   	// #1
    8d28:	mov	x0, x19
    8d2c:	bl	70 <d_make_comp>
    8d30:	mov	x22, x0
    8d34:	ldr	w0, [x19, #72]
    8d38:	add	w0, w0, #0x3
    8d3c:	str	w0, [x19, #72]
    8d40:	ldr	x0, [x19, #24]
    8d44:	ldrb	w0, [x0]
    8d48:	cmp	w0, #0x49
    8d4c:	b.ne	8ce0 <d_name+0x408>  // b.any
    8d50:	mov	x1, x22
    8d54:	mov	x0, x19
    8d58:	bl	6f0 <d_add_substitution>
    8d5c:	cbnz	w0, 893c <d_name+0x64>
    8d60:	mov	x22, #0x0                   	// #0
    8d64:	b	8ce0 <d_name+0x408>
    8d68:	mov	x0, x19
    8d6c:	bl	83b0 <d_unqualified_name>
    8d70:	mov	x22, x0
    8d74:	ldr	x0, [x19, #24]
    8d78:	ldrb	w0, [x0]
    8d7c:	cmp	w0, #0x49
    8d80:	b.ne	8ce0 <d_name+0x408>  // b.any
    8d84:	mov	x1, x22
    8d88:	mov	x0, x19
    8d8c:	bl	6f0 <d_add_substitution>
    8d90:	cbz	w0, 8dd8 <d_name+0x500>
    8d94:	mov	x0, x19
    8d98:	bl	98cc <d_template_args>
    8d9c:	mov	x3, x0
    8da0:	mov	x2, x22
    8da4:	mov	w1, #0x4                   	// #4
    8da8:	mov	x0, x19
    8dac:	bl	70 <d_make_comp>
    8db0:	mov	x22, x0
    8db4:	b	8ce0 <d_name+0x408>
    8db8:	mov	x22, #0x0                   	// #0
    8dbc:	b	8ce0 <d_name+0x408>
    8dc0:	mov	x22, #0x0                   	// #0
    8dc4:	b	8ce0 <d_name+0x408>
    8dc8:	mov	x22, #0x0                   	// #0
    8dcc:	b	8ce0 <d_name+0x408>
    8dd0:	mov	x22, #0x0                   	// #0
    8dd4:	b	8ce0 <d_name+0x408>
    8dd8:	mov	x22, #0x0                   	// #0
    8ddc:	b	8ce0 <d_name+0x408>
    8de0:	ldp	x23, x24, [sp, #48]
    8de4:	ldp	x25, x26, [sp, #64]
    8de8:	str	xzr, [x22]
    8dec:	mov	x22, #0x0                   	// #0
    8df0:	ldp	x27, x28, [sp, #80]
    8df4:	b	8ce0 <d_name+0x408>
    8df8:	ldp	x23, x24, [sp, #48]
    8dfc:	ldp	x25, x26, [sp, #64]
    8e00:	b	8de8 <d_name+0x510>
    8e04:	ldp	x23, x24, [sp, #48]
    8e08:	ldp	x25, x26, [sp, #64]
    8e0c:	b	8de8 <d_name+0x510>
    8e10:	ldp	x23, x24, [sp, #48]
    8e14:	ldp	x25, x26, [sp, #64]
    8e18:	ldp	x27, x28, [sp, #80]
    8e1c:	b	8ce0 <d_name+0x408>

0000000000008e20 <d_encoding>:
    8e20:	stp	x29, x30, [sp, #-96]!
    8e24:	mov	x29, sp
    8e28:	stp	x19, x20, [sp, #16]
    8e2c:	mov	x19, x0
    8e30:	ldr	x0, [x0, #24]
    8e34:	ldrb	w2, [x0]
    8e38:	cmp	w2, #0x47
    8e3c:	mov	w3, #0x54                  	// #84
    8e40:	ccmp	w2, w3, #0x4, ne  // ne = any
    8e44:	b.ne	9468 <d_encoding+0x648>  // b.any
    8e48:	ldr	w2, [x19, #72]
    8e4c:	add	w1, w2, #0x14
    8e50:	str	w1, [x19, #72]
    8e54:	ldrb	w1, [x0]
    8e58:	cmp	w1, w3
    8e5c:	b.eq	8f0c <d_encoding+0xec>  // b.none
    8e60:	mov	x20, #0x0                   	// #0
    8e64:	cmp	w1, #0x47
    8e68:	b.ne	94a4 <d_encoding+0x684>  // b.any
    8e6c:	add	x1, x0, #0x1
    8e70:	str	x1, [x19, #24]
    8e74:	ldrb	w1, [x0, #1]
    8e78:	cbz	w1, 9568 <d_encoding+0x748>
    8e7c:	add	x1, x0, #0x2
    8e80:	str	x1, [x19, #24]
    8e84:	ldrb	w1, [x0, #1]
    8e88:	cmp	w1, #0x54
    8e8c:	b.eq	92cc <d_encoding+0x4ac>  // b.none
    8e90:	cmp	w1, #0x54
    8e94:	b.ls	923c <d_encoding+0x41c>  // b.plast
    8e98:	cmp	w1, #0x56
    8e9c:	b.eq	9280 <d_encoding+0x460>  // b.none
    8ea0:	mov	x20, #0x0                   	// #0
    8ea4:	cmp	w1, #0x72
    8ea8:	b.ne	94a4 <d_encoding+0x684>  // b.any
    8eac:	mov	x0, x19
    8eb0:	bl	2a4 <d_number>
    8eb4:	cmp	w0, #0x1
    8eb8:	b.le	9570 <d_encoding+0x750>
    8ebc:	ldr	x1, [x19, #24]
    8ec0:	ldrb	w2, [x1]
    8ec4:	cbz	w2, 9578 <d_encoding+0x758>
    8ec8:	stp	x21, x22, [sp, #32]
    8ecc:	add	x21, x1, #0x1
    8ed0:	str	x21, [x19, #24]
    8ed4:	ldrb	w1, [x1]
    8ed8:	mov	x20, #0x0                   	// #0
    8edc:	cmp	w1, #0x5f
    8ee0:	b.ne	95dc <d_encoding+0x7bc>  // b.any
    8ee4:	stp	x23, x24, [sp, #48]
    8ee8:	stp	x25, x26, [sp, #64]
    8eec:	stp	x27, x28, [sp, #80]
    8ef0:	sub	w22, w0, #0x1
    8ef4:	mov	x24, #0x0                   	// #0
    8ef8:	mov	w26, #0x41                  	// #65
    8efc:	mov	w28, #0x2f                  	// #47
    8f00:	mov	w27, #0x2e                  	// #46
    8f04:	mov	w25, #0x40                  	// #64
    8f08:	b	93b8 <d_encoding+0x598>
    8f0c:	add	x1, x0, #0x1
    8f10:	str	x1, [x19, #24]
    8f14:	ldrb	w1, [x0, #1]
    8f18:	mov	x20, #0x0                   	// #0
    8f1c:	cbz	w1, 94a4 <d_encoding+0x684>
    8f20:	add	x1, x0, #0x2
    8f24:	str	x1, [x19, #24]
    8f28:	ldrb	w0, [x0, #1]
    8f2c:	cmp	w0, #0x53
    8f30:	b.eq	90f8 <d_encoding+0x2d8>  // b.none
    8f34:	b.ls	8f94 <d_encoding+0x174>  // b.plast
    8f38:	cmp	w0, #0x63
    8f3c:	b.eq	9158 <d_encoding+0x338>  // b.none
    8f40:	b.ls	903c <d_encoding+0x21c>  // b.plast
    8f44:	cmp	w0, #0x68
    8f48:	b.eq	911c <d_encoding+0x2fc>  // b.none
    8f4c:	mov	x20, #0x0                   	// #0
    8f50:	cmp	w0, #0x76
    8f54:	b.ne	94a4 <d_encoding+0x684>  // b.any
    8f58:	mov	w1, #0x76                  	// #118
    8f5c:	mov	x0, x19
    8f60:	bl	3b8 <d_call_offset>
    8f64:	mov	x20, #0x0                   	// #0
    8f68:	cbz	w0, 94a4 <d_encoding+0x684>
    8f6c:	mov	w1, #0x0                   	// #0
    8f70:	mov	x0, x19
    8f74:	bl	8e20 <d_encoding>
    8f78:	mov	x3, #0x0                   	// #0
    8f7c:	mov	x2, x0
    8f80:	mov	w1, #0x10                  	// #16
    8f84:	mov	x0, x19
    8f88:	bl	70 <d_make_comp>
    8f8c:	mov	x20, x0
    8f90:	b	94a4 <d_encoding+0x684>
    8f94:	cmp	w0, #0x48
    8f98:	b.eq	9218 <d_encoding+0x3f8>  // b.none
    8f9c:	b.ls	8fd8 <d_encoding+0x1b8>  // b.plast
    8fa0:	cmp	w0, #0x49
    8fa4:	b.eq	90d4 <d_encoding+0x2b4>  // b.none
    8fa8:	mov	x20, #0x0                   	// #0
    8fac:	cmp	w0, #0x4a
    8fb0:	b.ne	94a4 <d_encoding+0x684>  // b.any
    8fb4:	mov	x0, x19
    8fb8:	bl	7374 <d_type>
    8fbc:	mov	x3, #0x0                   	// #0
    8fc0:	mov	x2, x0
    8fc4:	mov	w1, #0x12                  	// #18
    8fc8:	mov	x0, x19
    8fcc:	bl	70 <d_make_comp>
    8fd0:	mov	x20, x0
    8fd4:	b	94a4 <d_encoding+0x684>
    8fd8:	cmp	w0, #0x43
    8fdc:	b.eq	91a4 <d_encoding+0x384>  // b.none
    8fe0:	cmp	w0, #0x46
    8fe4:	b.ne	900c <d_encoding+0x1ec>  // b.any
    8fe8:	mov	x0, x19
    8fec:	bl	7374 <d_type>
    8ff0:	mov	x3, #0x0                   	// #0
    8ff4:	mov	x2, x0
    8ff8:	mov	w1, #0xe                   	// #14
    8ffc:	mov	x0, x19
    9000:	bl	70 <d_make_comp>
    9004:	mov	x20, x0
    9008:	b	94a4 <d_encoding+0x684>
    900c:	mov	x20, #0x0                   	// #0
    9010:	cmp	w0, #0x41
    9014:	b.ne	94a4 <d_encoding+0x684>  // b.any
    9018:	mov	x0, x19
    901c:	bl	9780 <d_template_arg>
    9020:	mov	x3, #0x0                   	// #0
    9024:	mov	x2, x0
    9028:	mov	w1, #0x30                  	// #48
    902c:	mov	x0, x19
    9030:	bl	70 <d_make_comp>
    9034:	mov	x20, x0
    9038:	b	94a4 <d_encoding+0x684>
    903c:	cmp	w0, #0x56
    9040:	b.eq	90a8 <d_encoding+0x288>  // b.none
    9044:	cmp	w0, #0x57
    9048:	b.ne	9070 <d_encoding+0x250>  // b.any
    904c:	mov	x0, x19
    9050:	bl	88d8 <d_name>
    9054:	mov	x3, #0x0                   	// #0
    9058:	mov	x2, x0
    905c:	mov	w1, #0x15                  	// #21
    9060:	mov	x0, x19
    9064:	bl	70 <d_make_comp>
    9068:	mov	x20, x0
    906c:	b	94a4 <d_encoding+0x684>
    9070:	mov	x20, #0x0                   	// #0
    9074:	cmp	w0, #0x54
    9078:	b.ne	94a4 <d_encoding+0x684>  // b.any
    907c:	add	w2, w2, #0xa
    9080:	str	w2, [x19, #72]
    9084:	mov	x0, x19
    9088:	bl	7374 <d_type>
    908c:	mov	x3, #0x0                   	// #0
    9090:	mov	x2, x0
    9094:	mov	w1, #0xa                   	// #10
    9098:	mov	x0, x19
    909c:	bl	70 <d_make_comp>
    90a0:	mov	x20, x0
    90a4:	b	94a4 <d_encoding+0x684>
    90a8:	add	w2, w2, #0xf
    90ac:	str	w2, [x19, #72]
    90b0:	mov	x0, x19
    90b4:	bl	7374 <d_type>
    90b8:	mov	x3, #0x0                   	// #0
    90bc:	mov	x2, x0
    90c0:	mov	w1, #0x9                   	// #9
    90c4:	mov	x0, x19
    90c8:	bl	70 <d_make_comp>
    90cc:	mov	x20, x0
    90d0:	b	94a4 <d_encoding+0x684>
    90d4:	mov	x0, x19
    90d8:	bl	7374 <d_type>
    90dc:	mov	x3, #0x0                   	// #0
    90e0:	mov	x2, x0
    90e4:	mov	w1, #0xc                   	// #12
    90e8:	mov	x0, x19
    90ec:	bl	70 <d_make_comp>
    90f0:	mov	x20, x0
    90f4:	b	94a4 <d_encoding+0x684>
    90f8:	mov	x0, x19
    90fc:	bl	7374 <d_type>
    9100:	mov	x3, #0x0                   	// #0
    9104:	mov	x2, x0
    9108:	mov	w1, #0xd                   	// #13
    910c:	mov	x0, x19
    9110:	bl	70 <d_make_comp>
    9114:	mov	x20, x0
    9118:	b	94a4 <d_encoding+0x684>
    911c:	mov	w1, #0x68                  	// #104
    9120:	mov	x0, x19
    9124:	bl	3b8 <d_call_offset>
    9128:	mov	x20, #0x0                   	// #0
    912c:	cbz	w0, 94a4 <d_encoding+0x684>
    9130:	mov	w1, #0x0                   	// #0
    9134:	mov	x0, x19
    9138:	bl	8e20 <d_encoding>
    913c:	mov	x3, #0x0                   	// #0
    9140:	mov	x2, x0
    9144:	mov	w1, #0xf                   	// #15
    9148:	mov	x0, x19
    914c:	bl	70 <d_make_comp>
    9150:	mov	x20, x0
    9154:	b	94a4 <d_encoding+0x684>
    9158:	mov	w1, #0x0                   	// #0
    915c:	mov	x0, x19
    9160:	bl	3b8 <d_call_offset>
    9164:	mov	x20, #0x0                   	// #0
    9168:	cbz	w0, 94a4 <d_encoding+0x684>
    916c:	mov	w1, #0x0                   	// #0
    9170:	mov	x0, x19
    9174:	bl	3b8 <d_call_offset>
    9178:	cbz	w0, 94a4 <d_encoding+0x684>
    917c:	mov	w1, #0x0                   	// #0
    9180:	mov	x0, x19
    9184:	bl	8e20 <d_encoding>
    9188:	mov	x3, #0x0                   	// #0
    918c:	mov	x2, x0
    9190:	mov	w1, #0x11                  	// #17
    9194:	mov	x0, x19
    9198:	bl	70 <d_make_comp>
    919c:	mov	x20, x0
    91a0:	b	94a4 <d_encoding+0x684>
    91a4:	stp	x21, x22, [sp, #32]
    91a8:	mov	x0, x19
    91ac:	bl	7374 <d_type>
    91b0:	mov	x21, x0
    91b4:	mov	x0, x19
    91b8:	bl	2a4 <d_number>
    91bc:	tbnz	w0, #31, 955c <d_encoding+0x73c>
    91c0:	ldr	x0, [x19, #24]
    91c4:	ldrb	w1, [x0]
    91c8:	mov	x20, #0x0                   	// #0
    91cc:	cmp	w1, #0x5f
    91d0:	b.eq	91dc <d_encoding+0x3bc>  // b.none
    91d4:	ldp	x21, x22, [sp, #32]
    91d8:	b	94a4 <d_encoding+0x684>
    91dc:	add	x0, x0, #0x1
    91e0:	str	x0, [x19, #24]
    91e4:	mov	x0, x19
    91e8:	bl	7374 <d_type>
    91ec:	ldr	w1, [x19, #72]
    91f0:	add	w1, w1, #0x5
    91f4:	str	w1, [x19, #72]
    91f8:	mov	x3, x21
    91fc:	mov	x2, x0
    9200:	mov	w1, #0xb                   	// #11
    9204:	mov	x0, x19
    9208:	bl	70 <d_make_comp>
    920c:	mov	x20, x0
    9210:	ldp	x21, x22, [sp, #32]
    9214:	b	94a4 <d_encoding+0x684>
    9218:	mov	x0, x19
    921c:	bl	88d8 <d_name>
    9220:	mov	x3, #0x0                   	// #0
    9224:	mov	x2, x0
    9228:	mov	w1, #0x14                  	// #20
    922c:	mov	x0, x19
    9230:	bl	70 <d_make_comp>
    9234:	mov	x20, x0
    9238:	b	94a4 <d_encoding+0x684>
    923c:	cmp	w1, #0x41
    9240:	b.eq	92a4 <d_encoding+0x484>  // b.none
    9244:	mov	x20, #0x0                   	// #0
    9248:	cmp	w1, #0x52
    924c:	b.ne	94a4 <d_encoding+0x684>  // b.any
    9250:	mov	x0, x19
    9254:	bl	88d8 <d_name>
    9258:	mov	x20, x0
    925c:	mov	x0, x19
    9260:	bl	374 <d_number_component>
    9264:	mov	x3, x0
    9268:	mov	x2, x20
    926c:	mov	w1, #0x16                  	// #22
    9270:	mov	x0, x19
    9274:	bl	70 <d_make_comp>
    9278:	mov	x20, x0
    927c:	b	94a4 <d_encoding+0x684>
    9280:	mov	x0, x19
    9284:	bl	88d8 <d_name>
    9288:	mov	x3, #0x0                   	// #0
    928c:	mov	x2, x0
    9290:	mov	w1, #0x13                  	// #19
    9294:	mov	x0, x19
    9298:	bl	70 <d_make_comp>
    929c:	mov	x20, x0
    92a0:	b	94a4 <d_encoding+0x684>
    92a4:	mov	w1, #0x0                   	// #0
    92a8:	mov	x0, x19
    92ac:	bl	8e20 <d_encoding>
    92b0:	mov	x3, #0x0                   	// #0
    92b4:	mov	x2, x0
    92b8:	mov	w1, #0x17                  	// #23
    92bc:	mov	x0, x19
    92c0:	bl	70 <d_make_comp>
    92c4:	mov	x20, x0
    92c8:	b	94a4 <d_encoding+0x684>
    92cc:	ldrb	w1, [x0, #2]
    92d0:	cbz	w1, 92e8 <d_encoding+0x4c8>
    92d4:	add	x1, x0, #0x3
    92d8:	str	x1, [x19, #24]
    92dc:	ldrb	w0, [x0, #2]
    92e0:	cmp	w0, #0x6e
    92e4:	b.eq	9310 <d_encoding+0x4f0>  // b.none
    92e8:	mov	w1, #0x0                   	// #0
    92ec:	mov	x0, x19
    92f0:	bl	8e20 <d_encoding>
    92f4:	mov	x3, #0x0                   	// #0
    92f8:	mov	x2, x0
    92fc:	mov	w1, #0x49                  	// #73
    9300:	mov	x0, x19
    9304:	bl	70 <d_make_comp>
    9308:	mov	x20, x0
    930c:	b	94a4 <d_encoding+0x684>
    9310:	mov	w1, #0x0                   	// #0
    9314:	mov	x0, x19
    9318:	bl	8e20 <d_encoding>
    931c:	mov	x3, #0x0                   	// #0
    9320:	mov	x2, x0
    9324:	mov	w1, #0x4a                  	// #74
    9328:	mov	x0, x19
    932c:	bl	70 <d_make_comp>
    9330:	mov	x20, x0
    9334:	b	94a4 <d_encoding+0x684>
    9338:	mov	x0, #0x1                   	// #1
    933c:	mov	w23, #0x0                   	// #0
    9340:	cmp	w22, #0x0
    9344:	b.le	9368 <d_encoding+0x548>
    9348:	mov	w23, w0
    934c:	cmp	w22, w0
    9350:	b.le	9368 <d_encoding+0x548>
    9354:	ldrb	w1, [x21, x0]
    9358:	add	x0, x0, #0x1
    935c:	cmp	w1, #0x24
    9360:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    9364:	b.ne	9348 <d_encoding+0x528>  // b.any
    9368:	mov	w2, w23
    936c:	mov	x1, x21
    9370:	mov	x0, x19
    9374:	bl	120 <d_make_name>
    9378:	mov	x20, x0
    937c:	ldr	x21, [x19, #24]
    9380:	add	x21, x21, w23, sxtw
    9384:	str	x21, [x19, #24]
    9388:	sub	w22, w22, w23
    938c:	cbz	x0, 95e4 <d_encoding+0x7c4>
    9390:	cbz	x24, 9434 <d_encoding+0x614>
    9394:	mov	x3, x20
    9398:	mov	x2, x24
    939c:	mov	w1, w25
    93a0:	mov	x0, x19
    93a4:	bl	70 <d_make_comp>
    93a8:	mov	x24, x0
    93ac:	cbz	x0, 9598 <d_encoding+0x778>
    93b0:	cmp	w22, #0x0
    93b4:	b.le	943c <d_encoding+0x61c>
    93b8:	ldrb	w0, [x21]
    93bc:	cbz	w0, 9580 <d_encoding+0x760>
    93c0:	cmp	w0, #0x24
    93c4:	b.ne	9338 <d_encoding+0x518>  // b.any
    93c8:	ldrb	w21, [x21, #1]
    93cc:	cmp	w21, #0x53
    93d0:	b.eq	93fc <d_encoding+0x5dc>  // b.none
    93d4:	cmp	w21, #0x5f
    93d8:	b.eq	9404 <d_encoding+0x5e4>  // b.none
    93dc:	cmp	w21, #0x24
    93e0:	b.eq	9408 <d_encoding+0x5e8>  // b.none
    93e4:	mov	x20, #0x0                   	// #0
    93e8:	ldp	x21, x22, [sp, #32]
    93ec:	ldp	x23, x24, [sp, #48]
    93f0:	ldp	x25, x26, [sp, #64]
    93f4:	ldp	x27, x28, [sp, #80]
    93f8:	b	94a4 <d_encoding+0x684>
    93fc:	mov	w21, w28
    9400:	b	9408 <d_encoding+0x5e8>
    9404:	mov	w21, w27
    9408:	mov	x0, x19
    940c:	bl	30 <d_make_empty>
    9410:	mov	x20, x0
    9414:	cbz	x0, 95bc <d_encoding+0x79c>
    9418:	str	w26, [x0]
    941c:	str	w21, [x0, #8]
    9420:	ldr	x21, [x19, #24]
    9424:	add	x21, x21, #0x2
    9428:	str	x21, [x19, #24]
    942c:	sub	w22, w22, #0x2
    9430:	b	9390 <d_encoding+0x570>
    9434:	mov	x24, x20
    9438:	b	93b0 <d_encoding+0x590>
    943c:	mov	x3, #0x0                   	// #0
    9440:	mov	x2, x24
    9444:	mov	w1, #0x3f                  	// #63
    9448:	mov	x0, x19
    944c:	bl	70 <d_make_comp>
    9450:	mov	x20, x0
    9454:	ldp	x21, x22, [sp, #32]
    9458:	ldp	x23, x24, [sp, #48]
    945c:	ldp	x25, x26, [sp, #64]
    9460:	ldp	x27, x28, [sp, #80]
    9464:	b	94a4 <d_encoding+0x684>
    9468:	stp	x21, x22, [sp, #32]
    946c:	mov	w21, w1
    9470:	mov	x0, x19
    9474:	bl	88d8 <d_name>
    9478:	mov	x20, x0
    947c:	cbz	x0, 95f8 <d_encoding+0x7d8>
    9480:	cbz	w21, 948c <d_encoding+0x66c>
    9484:	ldr	w0, [x19, #16]
    9488:	tbz	w0, #0, 94b4 <d_encoding+0x694>
    948c:	ldr	x0, [x19, #24]
    9490:	ldrb	w0, [x0]
    9494:	cmp	w0, #0x45
    9498:	ccmp	w0, #0x0, #0x4, ne  // ne = any
    949c:	b.ne	9500 <d_encoding+0x6e0>  // b.any
    94a0:	ldp	x21, x22, [sp, #32]
    94a4:	mov	x0, x20
    94a8:	ldp	x19, x20, [sp, #16]
    94ac:	ldp	x29, x30, [sp], #96
    94b0:	ret
    94b4:	ldr	w19, [x20]
    94b8:	mov	w0, w19
    94bc:	bl	0 <is_fnqual_component_type>
    94c0:	cbz	w0, 94cc <d_encoding+0x6ac>
    94c4:	ldr	x20, [x20, #8]
    94c8:	b	94b4 <d_encoding+0x694>
    94cc:	cmp	w19, #0x2
    94d0:	b.eq	94dc <d_encoding+0x6bc>  // b.none
    94d4:	ldp	x21, x22, [sp, #32]
    94d8:	b	94a4 <d_encoding+0x684>
    94dc:	ldr	x19, [x20, #16]
    94e0:	ldr	w0, [x19]
    94e4:	bl	0 <is_fnqual_component_type>
    94e8:	cbz	w0, 94f8 <d_encoding+0x6d8>
    94ec:	ldr	x0, [x19, #8]
    94f0:	str	x0, [x20, #16]
    94f4:	b	94dc <d_encoding+0x6bc>
    94f8:	ldp	x21, x22, [sp, #32]
    94fc:	b	94a4 <d_encoding+0x684>
    9500:	mov	x0, x20
    9504:	bl	20c <has_return_type>
    9508:	mov	w1, w0
    950c:	mov	x0, x19
    9510:	bl	8268 <d_bare_function_type>
    9514:	mov	x3, x0
    9518:	cbz	x0, 95b0 <d_encoding+0x790>
    951c:	cbnz	w21, 952c <d_encoding+0x70c>
    9520:	ldr	w0, [x20]
    9524:	cmp	w0, #0x2
    9528:	b.eq	9548 <d_encoding+0x728>  // b.none
    952c:	mov	x2, x20
    9530:	mov	w1, #0x3                   	// #3
    9534:	mov	x0, x19
    9538:	bl	70 <d_make_comp>
    953c:	mov	x20, x0
    9540:	ldp	x21, x22, [sp, #32]
    9544:	b	94a4 <d_encoding+0x684>
    9548:	ldr	w0, [x3]
    954c:	cmp	w0, #0x29
    9550:	b.ne	952c <d_encoding+0x70c>  // b.any
    9554:	str	xzr, [x3, #8]
    9558:	b	952c <d_encoding+0x70c>
    955c:	mov	x20, #0x0                   	// #0
    9560:	ldp	x21, x22, [sp, #32]
    9564:	b	94a4 <d_encoding+0x684>
    9568:	mov	x20, #0x0                   	// #0
    956c:	b	94a4 <d_encoding+0x684>
    9570:	mov	x20, #0x0                   	// #0
    9574:	b	94a4 <d_encoding+0x684>
    9578:	mov	x20, #0x0                   	// #0
    957c:	b	94a4 <d_encoding+0x684>
    9580:	mov	x20, #0x0                   	// #0
    9584:	ldp	x21, x22, [sp, #32]
    9588:	ldp	x23, x24, [sp, #48]
    958c:	ldp	x25, x26, [sp, #64]
    9590:	ldp	x27, x28, [sp, #80]
    9594:	b	94a4 <d_encoding+0x684>
    9598:	mov	x20, x0
    959c:	ldp	x21, x22, [sp, #32]
    95a0:	ldp	x23, x24, [sp, #48]
    95a4:	ldp	x25, x26, [sp, #64]
    95a8:	ldp	x27, x28, [sp, #80]
    95ac:	b	94a4 <d_encoding+0x684>
    95b0:	mov	x20, x0
    95b4:	ldp	x21, x22, [sp, #32]
    95b8:	b	94a4 <d_encoding+0x684>
    95bc:	ldr	x0, [x19, #24]
    95c0:	add	x0, x0, #0x2
    95c4:	str	x0, [x19, #24]
    95c8:	ldp	x21, x22, [sp, #32]
    95cc:	ldp	x23, x24, [sp, #48]
    95d0:	ldp	x25, x26, [sp, #64]
    95d4:	ldp	x27, x28, [sp, #80]
    95d8:	b	94a4 <d_encoding+0x684>
    95dc:	ldp	x21, x22, [sp, #32]
    95e0:	b	94a4 <d_encoding+0x684>
    95e4:	ldp	x21, x22, [sp, #32]
    95e8:	ldp	x23, x24, [sp, #48]
    95ec:	ldp	x25, x26, [sp, #64]
    95f0:	ldp	x27, x28, [sp, #80]
    95f4:	b	94a4 <d_encoding+0x684>
    95f8:	ldp	x21, x22, [sp, #32]
    95fc:	b	94a4 <d_encoding+0x684>

0000000000009600 <d_expr_primary>:
    9600:	stp	x29, x30, [sp, #-48]!
    9604:	mov	x29, sp
    9608:	stp	x19, x20, [sp, #16]
    960c:	mov	x19, x0
    9610:	ldr	x0, [x0, #24]
    9614:	ldrb	w1, [x0]
    9618:	mov	x20, #0x0                   	// #0
    961c:	cmp	w1, #0x4c
    9620:	b.ne	968c <d_expr_primary+0x8c>  // b.any
    9624:	add	x1, x0, #0x1
    9628:	str	x1, [x19, #24]
    962c:	ldrb	w1, [x0, #1]
    9630:	cmp	w1, #0x5f
    9634:	mov	w2, #0x5a                  	// #90
    9638:	ccmp	w1, w2, #0x4, ne  // ne = any
    963c:	b.ne	96a8 <d_expr_primary+0xa8>  // b.any
    9640:	cmp	w1, #0x5f
    9644:	b.eq	969c <d_expr_primary+0x9c>  // b.none
    9648:	ldr	x0, [x19, #24]
    964c:	ldrb	w1, [x0]
    9650:	mov	x20, #0x0                   	// #0
    9654:	cmp	w1, #0x5a
    9658:	b.ne	9674 <d_expr_primary+0x74>  // b.any
    965c:	add	x0, x0, #0x1
    9660:	str	x0, [x19, #24]
    9664:	mov	w1, #0x0                   	// #0
    9668:	mov	x0, x19
    966c:	bl	8e20 <d_encoding>
    9670:	mov	x20, x0
    9674:	ldr	x0, [x19, #24]
    9678:	ldrb	w1, [x0]
    967c:	cmp	w1, #0x45
    9680:	b.ne	9778 <d_expr_primary+0x178>  // b.any
    9684:	add	x0, x0, #0x1
    9688:	str	x0, [x19, #24]
    968c:	mov	x0, x20
    9690:	ldp	x19, x20, [sp, #16]
    9694:	ldp	x29, x30, [sp], #48
    9698:	ret
    969c:	add	x0, x0, #0x2
    96a0:	str	x0, [x19, #24]
    96a4:	b	9648 <d_expr_primary+0x48>
    96a8:	mov	x0, x19
    96ac:	bl	7374 <d_type>
    96b0:	mov	x20, x0
    96b4:	cbz	x0, 968c <d_expr_primary+0x8c>
    96b8:	str	x21, [sp, #32]
    96bc:	ldr	w0, [x0]
    96c0:	cmp	w0, #0x27
    96c4:	b.eq	9734 <d_expr_primary+0x134>  // b.none
    96c8:	ldr	x0, [x19, #24]
    96cc:	ldrb	w1, [x0]
    96d0:	mov	w21, #0x3d                  	// #61
    96d4:	cmp	w1, #0x6e
    96d8:	b.eq	9754 <d_expr_primary+0x154>  // b.none
    96dc:	ldr	x1, [x19, #24]
    96e0:	ldrb	w4, [x1]
    96e4:	cmp	w4, #0x45
    96e8:	b.eq	9764 <d_expr_primary+0x164>  // b.none
    96ec:	add	x3, x1, #0x1
    96f0:	cbz	w4, 976c <d_expr_primary+0x16c>
    96f4:	mov	x2, x3
    96f8:	str	x3, [x19, #24]
    96fc:	ldrb	w4, [x3], #1
    9700:	cmp	w4, #0x45
    9704:	b.ne	96f0 <d_expr_primary+0xf0>  // b.any
    9708:	sub	w2, w2, w1
    970c:	mov	x0, x19
    9710:	bl	120 <d_make_name>
    9714:	mov	x3, x0
    9718:	mov	x2, x20
    971c:	mov	w1, w21
    9720:	mov	x0, x19
    9724:	bl	70 <d_make_comp>
    9728:	mov	x20, x0
    972c:	ldr	x21, [sp, #32]
    9730:	b	9674 <d_expr_primary+0x74>
    9734:	ldr	x0, [x20, #8]
    9738:	ldr	w1, [x0, #28]
    973c:	cbz	w1, 96c8 <d_expr_primary+0xc8>
    9740:	ldr	w1, [x19, #72]
    9744:	ldr	w0, [x0, #8]
    9748:	sub	w0, w1, w0
    974c:	str	w0, [x19, #72]
    9750:	b	96c8 <d_expr_primary+0xc8>
    9754:	add	x0, x0, #0x1
    9758:	str	x0, [x19, #24]
    975c:	mov	w21, #0x3e                  	// #62
    9760:	b	96dc <d_expr_primary+0xdc>
    9764:	mov	x2, x1
    9768:	b	9708 <d_expr_primary+0x108>
    976c:	mov	x20, #0x0                   	// #0
    9770:	ldr	x21, [sp, #32]
    9774:	b	968c <d_expr_primary+0x8c>
    9778:	mov	x20, #0x0                   	// #0
    977c:	b	968c <d_expr_primary+0x8c>

0000000000009780 <d_template_arg>:
    9780:	stp	x29, x30, [sp, #-32]!
    9784:	mov	x29, sp
    9788:	str	x19, [sp, #16]
    978c:	mov	x19, x0
    9790:	ldr	x0, [x0, #24]
    9794:	ldrb	w1, [x0]
    9798:	cmp	w1, #0x4c
    979c:	b.eq	97f4 <d_template_arg+0x74>  // b.none
    97a0:	b.hi	97c0 <d_template_arg+0x40>  // b.pmore
    97a4:	sub	w1, w1, #0x49
    97a8:	and	w1, w1, #0xff
    97ac:	cmp	w1, #0x1
    97b0:	b.hi	9808 <d_template_arg+0x88>  // b.pmore
    97b4:	mov	x0, x19
    97b8:	bl	98cc <d_template_args>
    97bc:	b	97fc <d_template_arg+0x7c>
    97c0:	cmp	w1, #0x58
    97c4:	b.ne	9808 <d_template_arg+0x88>  // b.any
    97c8:	add	x0, x0, #0x1
    97cc:	str	x0, [x19, #24]
    97d0:	mov	x0, x19
    97d4:	bl	6afc <d_expression>
    97d8:	ldr	x1, [x19, #24]
    97dc:	ldrb	w2, [x1]
    97e0:	cmp	w2, #0x45
    97e4:	b.ne	9814 <d_template_arg+0x94>  // b.any
    97e8:	add	x1, x1, #0x1
    97ec:	str	x1, [x19, #24]
    97f0:	b	97fc <d_template_arg+0x7c>
    97f4:	mov	x0, x19
    97f8:	bl	9600 <d_expr_primary>
    97fc:	ldr	x19, [sp, #16]
    9800:	ldp	x29, x30, [sp], #32
    9804:	ret
    9808:	mov	x0, x19
    980c:	bl	7374 <d_type>
    9810:	b	97fc <d_template_arg+0x7c>
    9814:	mov	x0, #0x0                   	// #0
    9818:	b	97fc <d_template_arg+0x7c>

000000000000981c <d_template_args_1>:
    981c:	stp	x29, x30, [sp, #-64]!
    9820:	mov	x29, sp
    9824:	stp	x19, x20, [sp, #16]
    9828:	stp	x21, x22, [sp, #32]
    982c:	mov	x19, x0
    9830:	ldr	x22, [x0, #64]
    9834:	ldr	x0, [x0, #24]
    9838:	ldrb	w1, [x0]
    983c:	cmp	w1, #0x45
    9840:	b.eq	98ac <d_template_args_1+0x90>  // b.none
    9844:	str	xzr, [sp, #56]
    9848:	add	x20, sp, #0x38
    984c:	mov	w21, #0x2f                  	// #47
    9850:	mov	x0, x19
    9854:	bl	9780 <d_template_arg>
    9858:	cbz	x0, 989c <d_template_args_1+0x80>
    985c:	mov	x3, #0x0                   	// #0
    9860:	mov	x2, x0
    9864:	mov	w1, w21
    9868:	mov	x0, x19
    986c:	bl	70 <d_make_comp>
    9870:	str	x0, [x20]
    9874:	cbz	x0, 989c <d_template_args_1+0x80>
    9878:	add	x20, x0, #0x10
    987c:	ldr	x0, [x19, #24]
    9880:	ldrb	w1, [x0]
    9884:	cmp	w1, #0x45
    9888:	b.ne	9850 <d_template_args_1+0x34>  // b.any
    988c:	add	x0, x0, #0x1
    9890:	str	x0, [x19, #24]
    9894:	str	x22, [x19, #64]
    9898:	ldr	x0, [sp, #56]
    989c:	ldp	x19, x20, [sp, #16]
    98a0:	ldp	x21, x22, [sp, #32]
    98a4:	ldp	x29, x30, [sp], #64
    98a8:	ret
    98ac:	add	x0, x0, #0x1
    98b0:	str	x0, [x19, #24]
    98b4:	mov	x3, #0x0                   	// #0
    98b8:	mov	x2, #0x0                   	// #0
    98bc:	mov	w1, #0x2f                  	// #47
    98c0:	mov	x0, x19
    98c4:	bl	70 <d_make_comp>
    98c8:	b	989c <d_template_args_1+0x80>

00000000000098cc <d_template_args>:
    98cc:	ldr	x2, [x0, #24]
    98d0:	ldrb	w1, [x2]
    98d4:	sub	w1, w1, #0x49
    98d8:	and	w1, w1, #0xff
    98dc:	cmp	w1, #0x1
    98e0:	b.hi	9900 <d_template_args+0x34>  // b.pmore
    98e4:	stp	x29, x30, [sp, #-16]!
    98e8:	mov	x29, sp
    98ec:	add	x2, x2, #0x1
    98f0:	str	x2, [x0, #24]
    98f4:	bl	981c <d_template_args_1>
    98f8:	ldp	x29, x30, [sp], #16
    98fc:	ret
    9900:	mov	x0, #0x0                   	// #0
    9904:	ret

0000000000009908 <d_expression_1>:
    9908:	stp	x29, x30, [sp, #-48]!
    990c:	mov	x29, sp
    9910:	stp	x19, x20, [sp, #16]
    9914:	mov	x19, x0
    9918:	ldr	x0, [x0, #24]
    991c:	ldrb	w1, [x0]
    9920:	cmp	w1, #0x4c
    9924:	b.eq	9980 <d_expression_1+0x78>  // b.none
    9928:	cmp	w1, #0x54
    992c:	b.eq	9990 <d_expression_1+0x88>  // b.none
    9930:	cmp	w1, #0x73
    9934:	b.eq	99a0 <d_expression_1+0x98>  // b.none
    9938:	cmp	w1, #0x66
    993c:	b.eq	9ae0 <d_expression_1+0x1d8>  // b.none
    9940:	sub	w2, w1, #0x30
    9944:	and	w2, w2, #0xff
    9948:	cmp	w2, #0x9
    994c:	b.hi	9b94 <d_expression_1+0x28c>  // b.pmore
    9950:	mov	x0, x19
    9954:	bl	83b0 <d_unqualified_name>
    9958:	mov	x20, x0
    995c:	cbz	x0, 9970 <d_expression_1+0x68>
    9960:	ldr	x0, [x19, #24]
    9964:	ldrb	w0, [x0]
    9968:	cmp	w0, #0x49
    996c:	b.eq	9bb4 <d_expression_1+0x2ac>  // b.none
    9970:	mov	x0, x20
    9974:	ldp	x19, x20, [sp, #16]
    9978:	ldp	x29, x30, [sp], #48
    997c:	ret
    9980:	mov	x0, x19
    9984:	bl	9600 <d_expr_primary>
    9988:	mov	x20, x0
    998c:	b	9970 <d_expression_1+0x68>
    9990:	mov	x0, x19
    9994:	bl	5a4 <d_template_param>
    9998:	mov	x20, x0
    999c:	b	9970 <d_expression_1+0x68>
    99a0:	ldrb	w2, [x0, #1]
    99a4:	cmp	w2, #0x72
    99a8:	b.eq	9a24 <d_expression_1+0x11c>  // b.none
    99ac:	cmp	w2, #0x70
    99b0:	b.eq	9ab4 <d_expression_1+0x1ac>  // b.none
    99b4:	cmp	w1, #0x69
    99b8:	mov	w2, #0x74                  	// #116
    99bc:	ccmp	w1, w2, #0x4, ne  // ne = any
    99c0:	b.ne	9aec <d_expression_1+0x1e4>  // b.any
    99c4:	ldrb	w2, [x0, #1]
    99c8:	cmp	w2, #0x6c
    99cc:	b.ne	9aec <d_expression_1+0x1e4>  // b.any
    99d0:	stp	x21, x22, [sp, #32]
    99d4:	add	x0, x0, #0x2
    99d8:	str	x0, [x19, #24]
    99dc:	mov	x21, #0x0                   	// #0
    99e0:	cmp	w1, #0x74
    99e4:	b.eq	9bd8 <d_expression_1+0x2d0>  // b.none
    99e8:	ldr	x0, [x19, #24]
    99ec:	ldrb	w0, [x0, #1]
    99f0:	mov	x20, #0x0                   	// #0
    99f4:	cbz	w0, a0e4 <d_expression_1+0x7dc>
    99f8:	mov	w1, #0x45                  	// #69
    99fc:	mov	x0, x19
    9a00:	bl	72c8 <d_exprlist>
    9a04:	mov	x3, x0
    9a08:	mov	x2, x21
    9a0c:	mov	w1, #0x31                  	// #49
    9a10:	mov	x0, x19
    9a14:	bl	70 <d_make_comp>
    9a18:	mov	x20, x0
    9a1c:	ldp	x21, x22, [sp, #32]
    9a20:	b	9970 <d_expression_1+0x68>
    9a24:	stp	x21, x22, [sp, #32]
    9a28:	add	x0, x0, #0x2
    9a2c:	str	x0, [x19, #24]
    9a30:	mov	x0, x19
    9a34:	bl	7374 <d_type>
    9a38:	mov	x20, x0
    9a3c:	mov	x0, x19
    9a40:	bl	83b0 <d_unqualified_name>
    9a44:	mov	x21, x0
    9a48:	ldr	x0, [x19, #24]
    9a4c:	ldrb	w0, [x0]
    9a50:	cmp	w0, #0x49
    9a54:	b.eq	9a78 <d_expression_1+0x170>  // b.none
    9a58:	mov	x3, x21
    9a5c:	mov	x2, x20
    9a60:	mov	w1, #0x1                   	// #1
    9a64:	mov	x0, x19
    9a68:	bl	70 <d_make_comp>
    9a6c:	mov	x20, x0
    9a70:	ldp	x21, x22, [sp, #32]
    9a74:	b	9970 <d_expression_1+0x68>
    9a78:	mov	x0, x19
    9a7c:	bl	98cc <d_template_args>
    9a80:	mov	x3, x0
    9a84:	mov	x2, x21
    9a88:	mov	w1, #0x4                   	// #4
    9a8c:	mov	x0, x19
    9a90:	bl	70 <d_make_comp>
    9a94:	mov	x3, x0
    9a98:	mov	x2, x20
    9a9c:	mov	w1, #0x1                   	// #1
    9aa0:	mov	x0, x19
    9aa4:	bl	70 <d_make_comp>
    9aa8:	mov	x20, x0
    9aac:	ldp	x21, x22, [sp, #32]
    9ab0:	b	9970 <d_expression_1+0x68>
    9ab4:	add	x0, x0, #0x2
    9ab8:	str	x0, [x19, #24]
    9abc:	mov	x0, x19
    9ac0:	bl	9908 <d_expression_1>
    9ac4:	mov	x3, #0x0                   	// #0
    9ac8:	mov	x2, x0
    9acc:	mov	w1, #0x4b                  	// #75
    9ad0:	mov	x0, x19
    9ad4:	bl	70 <d_make_comp>
    9ad8:	mov	x20, x0
    9adc:	b	9970 <d_expression_1+0x68>
    9ae0:	ldrb	w1, [x0, #1]
    9ae4:	cmp	w1, #0x70
    9ae8:	b.eq	9b28 <d_expression_1+0x220>  // b.none
    9aec:	mov	x0, x19
    9af0:	bl	7cd4 <d_operator_name>
    9af4:	mov	x20, x0
    9af8:	cbz	x0, 9970 <d_expression_1+0x68>
    9afc:	stp	x21, x22, [sp, #32]
    9b00:	ldr	w0, [x0]
    9b04:	cmp	w0, #0x32
    9b08:	b.eq	9be8 <d_expression_1+0x2e0>  // b.none
    9b0c:	cmp	w0, #0x33
    9b10:	b.eq	9cfc <d_expression_1+0x3f4>  // b.none
    9b14:	cmp	w0, #0x34
    9b18:	b.eq	a07c <d_expression_1+0x774>  // b.none
    9b1c:	mov	x20, #0x0                   	// #0
    9b20:	ldp	x21, x22, [sp, #32]
    9b24:	b	9970 <d_expression_1+0x68>
    9b28:	stp	x21, x22, [sp, #32]
    9b2c:	add	x1, x0, #0x2
    9b30:	str	x1, [x19, #24]
    9b34:	ldrb	w1, [x0, #2]
    9b38:	cmp	w1, #0x54
    9b3c:	b.eq	9b84 <d_expression_1+0x27c>  // b.none
    9b40:	mov	x0, x19
    9b44:	bl	528 <d_compact_number>
    9b48:	mvn	x1, x0
    9b4c:	mov	x20, #0x0                   	// #0
    9b50:	tst	x1, #0x7fffffff
    9b54:	b.eq	a0d4 <d_expression_1+0x7cc>  // b.none
    9b58:	add	w21, w0, #0x1
    9b5c:	mov	x0, x19
    9b60:	bl	30 <d_make_empty>
    9b64:	mov	x20, x0
    9b68:	cbz	x0, a0dc <d_expression_1+0x7d4>
    9b6c:	mov	w0, #0x6                   	// #6
    9b70:	str	w0, [x20]
    9b74:	sxtw	x0, w21
    9b78:	str	x0, [x20, #8]
    9b7c:	ldp	x21, x22, [sp, #32]
    9b80:	b	9970 <d_expression_1+0x68>
    9b84:	add	x0, x0, #0x3
    9b88:	str	x0, [x19, #24]
    9b8c:	mov	w21, #0x0                   	// #0
    9b90:	b	9b5c <d_expression_1+0x254>
    9b94:	cmp	w1, #0x6f
    9b98:	b.ne	99b4 <d_expression_1+0xac>  // b.any
    9b9c:	ldrb	w1, [x0, #1]
    9ba0:	cmp	w1, #0x6e
    9ba4:	b.ne	9aec <d_expression_1+0x1e4>  // b.any
    9ba8:	add	x0, x0, #0x2
    9bac:	str	x0, [x19, #24]
    9bb0:	b	9950 <d_expression_1+0x48>
    9bb4:	mov	x0, x19
    9bb8:	bl	98cc <d_template_args>
    9bbc:	mov	x3, x0
    9bc0:	mov	x2, x20
    9bc4:	mov	w1, #0x4                   	// #4
    9bc8:	mov	x0, x19
    9bcc:	bl	70 <d_make_comp>
    9bd0:	mov	x20, x0
    9bd4:	b	9970 <d_expression_1+0x68>
    9bd8:	mov	x0, x19
    9bdc:	bl	7374 <d_type>
    9be0:	mov	x21, x0
    9be4:	b	99e8 <d_expression_1+0xe0>
    9be8:	ldr	x0, [x20, #8]
    9bec:	ldr	x21, [x0]
    9bf0:	ldr	w0, [x0, #16]
    9bf4:	sub	w1, w0, #0x2
    9bf8:	ldr	w0, [x19, #72]
    9bfc:	add	w0, w0, w1
    9c00:	str	w0, [x19, #72]
    9c04:	adrp	x1, 0 <is_fnqual_component_type>
    9c08:	add	x1, x1, #0x0
    9c0c:	mov	x0, x21
    9c10:	bl	0 <strcmp>
    9c14:	cbz	w0, 9c40 <d_expression_1+0x338>
    9c18:	ldr	w0, [x20]
    9c1c:	cmp	w0, #0x33
    9c20:	b.eq	9d00 <d_expression_1+0x3f8>  // b.none
    9c24:	cmp	w0, #0x34
    9c28:	b.eq	9c8c <d_expression_1+0x384>  // b.none
    9c2c:	cmp	w0, #0x32
    9c30:	b.eq	9c68 <d_expression_1+0x360>  // b.none
    9c34:	mov	x20, #0x0                   	// #0
    9c38:	ldp	x21, x22, [sp, #32]
    9c3c:	b	9970 <d_expression_1+0x68>
    9c40:	mov	x0, x19
    9c44:	bl	7374 <d_type>
    9c48:	mov	x3, x0
    9c4c:	mov	x2, x20
    9c50:	mov	w1, #0x37                  	// #55
    9c54:	mov	x0, x19
    9c58:	bl	70 <d_make_comp>
    9c5c:	mov	x20, x0
    9c60:	ldp	x21, x22, [sp, #32]
    9c64:	b	9970 <d_expression_1+0x68>
    9c68:	ldr	x0, [x20, #8]
    9c6c:	ldr	w0, [x0, #20]
    9c70:	cmp	w0, #0x2
    9c74:	b.eq	9e24 <d_expression_1+0x51c>  // b.none
    9c78:	b.gt	9d14 <d_expression_1+0x40c>
    9c7c:	cbz	w0, 9dbc <d_expression_1+0x4b4>
    9c80:	cmp	w0, #0x1
    9c84:	b.ne	9d08 <d_expression_1+0x400>  // b.any
    9c88:	cbz	x21, a07c <d_expression_1+0x774>
    9c8c:	ldrb	w0, [x21]
    9c90:	cmp	w0, #0x70
    9c94:	mov	w1, #0x6d                  	// #109
    9c98:	ccmp	w0, w1, #0x4, ne  // ne = any
    9c9c:	b.ne	9cac <d_expression_1+0x3a4>  // b.any
    9ca0:	ldrb	w1, [x21, #1]
    9ca4:	cmp	w1, w0
    9ca8:	b.eq	9ddc <d_expression_1+0x4d4>  // b.none
    9cac:	ldr	w0, [x20]
    9cb0:	cmp	w0, #0x34
    9cb4:	b.eq	a0bc <d_expression_1+0x7b4>  // b.none
    9cb8:	mov	w22, #0x0                   	// #0
    9cbc:	adrp	x1, 0 <is_fnqual_component_type>
    9cc0:	add	x1, x1, #0x0
    9cc4:	mov	x0, x21
    9cc8:	bl	0 <strcmp>
    9ccc:	cbz	w0, 9dfc <d_expression_1+0x4f4>
    9cd0:	mov	x0, x19
    9cd4:	bl	9908 <d_expression_1>
    9cd8:	mov	x3, x0
    9cdc:	cbnz	w22, 9e0c <d_expression_1+0x504>
    9ce0:	mov	x2, x20
    9ce4:	mov	w1, #0x37                  	// #55
    9ce8:	mov	x0, x19
    9cec:	bl	70 <d_make_comp>
    9cf0:	mov	x20, x0
    9cf4:	ldp	x21, x22, [sp, #32]
    9cf8:	b	9970 <d_expression_1+0x68>
    9cfc:	mov	x21, #0x0                   	// #0
    9d00:	ldr	w0, [x20, #8]
    9d04:	b	9c70 <d_expression_1+0x368>
    9d08:	mov	x20, #0x0                   	// #0
    9d0c:	ldp	x21, x22, [sp, #32]
    9d10:	b	9970 <d_expression_1+0x68>
    9d14:	cmp	w0, #0x3
    9d18:	b.ne	9db0 <d_expression_1+0x4a8>  // b.any
    9d1c:	cbz	x21, a040 <d_expression_1+0x738>
    9d20:	adrp	x1, 0 <is_fnqual_component_type>
    9d24:	add	x1, x1, #0x0
    9d28:	mov	x0, x21
    9d2c:	bl	0 <strcmp>
    9d30:	cbz	w0, 9f40 <d_expression_1+0x638>
    9d34:	ldrb	w0, [x21]
    9d38:	cmp	w0, #0x66
    9d3c:	b.eq	9fac <d_expression_1+0x6a4>  // b.none
    9d40:	cmp	w0, #0x6e
    9d44:	b.ne	a058 <d_expression_1+0x750>  // b.any
    9d48:	ldrb	w0, [x21, #1]
    9d4c:	cmp	w0, #0x77
    9d50:	mov	w1, #0x61                  	// #97
    9d54:	ccmp	w0, w1, #0x4, ne  // ne = any
    9d58:	b.ne	a064 <d_expression_1+0x75c>  // b.any
    9d5c:	mov	w1, #0x5f                  	// #95
    9d60:	mov	x0, x19
    9d64:	bl	72c8 <d_exprlist>
    9d68:	mov	x21, x0
    9d6c:	mov	x0, x19
    9d70:	bl	7374 <d_type>
    9d74:	mov	x22, x0
    9d78:	ldr	x0, [x19, #24]
    9d7c:	ldrb	w1, [x0]
    9d80:	cmp	w1, #0x45
    9d84:	b.eq	9fe0 <d_expression_1+0x6d8>  // b.none
    9d88:	cmp	w1, #0x70
    9d8c:	b.eq	9ff0 <d_expression_1+0x6e8>  // b.none
    9d90:	cmp	w1, #0x69
    9d94:	b.ne	a070 <d_expression_1+0x768>  // b.any
    9d98:	ldrb	w0, [x0, #1]
    9d9c:	cmp	w0, #0x6c
    9da0:	b.eq	a024 <d_expression_1+0x71c>  // b.none
    9da4:	mov	x20, #0x0                   	// #0
    9da8:	ldp	x21, x22, [sp, #32]
    9dac:	b	9970 <d_expression_1+0x68>
    9db0:	mov	x20, #0x0                   	// #0
    9db4:	ldp	x21, x22, [sp, #32]
    9db8:	b	9970 <d_expression_1+0x68>
    9dbc:	mov	x3, #0x0                   	// #0
    9dc0:	mov	x2, x20
    9dc4:	mov	w1, #0x36                  	// #54
    9dc8:	mov	x0, x19
    9dcc:	bl	70 <d_make_comp>
    9dd0:	mov	x20, x0
    9dd4:	ldp	x21, x22, [sp, #32]
    9dd8:	b	9970 <d_expression_1+0x68>
    9ddc:	ldr	x0, [x19, #24]
    9de0:	ldrb	w1, [x0]
    9de4:	mov	w22, #0x1                   	// #1
    9de8:	cmp	w1, #0x5f
    9dec:	b.ne	9cbc <d_expression_1+0x3b4>  // b.any
    9df0:	add	x0, x0, #0x1
    9df4:	str	x0, [x19, #24]
    9df8:	b	9cac <d_expression_1+0x3a4>
    9dfc:	mov	x0, x19
    9e00:	bl	981c <d_template_args_1>
    9e04:	mov	x3, x0
    9e08:	b	9cdc <d_expression_1+0x3d4>
    9e0c:	mov	x2, x3
    9e10:	mov	w1, #0x39                  	// #57
    9e14:	mov	x0, x19
    9e18:	bl	70 <d_make_comp>
    9e1c:	mov	x3, x0
    9e20:	b	9ce0 <d_expression_1+0x3d8>
    9e24:	cbz	x21, a034 <d_expression_1+0x72c>
    9e28:	mov	x0, x20
    9e2c:	bl	610 <op_is_new_cast>
    9e30:	cbnz	w0, 9ed8 <d_expression_1+0x5d0>
    9e34:	ldrb	w0, [x21]
    9e38:	cmp	w0, #0x66
    9e3c:	b.eq	9ee8 <d_expression_1+0x5e0>  // b.none
    9e40:	mov	x0, x19
    9e44:	bl	9908 <d_expression_1>
    9e48:	mov	x22, x0
    9e4c:	adrp	x1, 0 <is_fnqual_component_type>
    9e50:	add	x1, x1, #0x0
    9e54:	mov	x0, x21
    9e58:	bl	0 <strcmp>
    9e5c:	cbz	w0, 9ef8 <d_expression_1+0x5f0>
    9e60:	adrp	x1, 0 <is_fnqual_component_type>
    9e64:	add	x1, x1, #0x0
    9e68:	mov	x0, x21
    9e6c:	bl	0 <strcmp>
    9e70:	cbz	w0, 9e88 <d_expression_1+0x580>
    9e74:	adrp	x1, 0 <is_fnqual_component_type>
    9e78:	add	x1, x1, #0x0
    9e7c:	mov	x0, x21
    9e80:	bl	0 <strcmp>
    9e84:	cbnz	w0, 9f30 <d_expression_1+0x628>
    9e88:	mov	x0, x19
    9e8c:	bl	83b0 <d_unqualified_name>
    9e90:	mov	x21, x0
    9e94:	ldr	x0, [x19, #24]
    9e98:	ldrb	w0, [x0]
    9e9c:	cmp	w0, #0x49
    9ea0:	b.eq	9f0c <d_expression_1+0x604>  // b.none
    9ea4:	mov	x3, x21
    9ea8:	mov	x2, x22
    9eac:	mov	w1, #0x39                  	// #57
    9eb0:	mov	x0, x19
    9eb4:	bl	70 <d_make_comp>
    9eb8:	mov	x3, x0
    9ebc:	mov	x2, x20
    9ec0:	mov	w1, #0x38                  	// #56
    9ec4:	mov	x0, x19
    9ec8:	bl	70 <d_make_comp>
    9ecc:	mov	x20, x0
    9ed0:	ldp	x21, x22, [sp, #32]
    9ed4:	b	9970 <d_expression_1+0x68>
    9ed8:	mov	x0, x19
    9edc:	bl	7374 <d_type>
    9ee0:	mov	x22, x0
    9ee4:	b	9e4c <d_expression_1+0x544>
    9ee8:	mov	x0, x19
    9eec:	bl	7cd4 <d_operator_name>
    9ef0:	mov	x22, x0
    9ef4:	b	9e4c <d_expression_1+0x544>
    9ef8:	mov	w1, #0x45                  	// #69
    9efc:	mov	x0, x19
    9f00:	bl	72c8 <d_exprlist>
    9f04:	mov	x21, x0
    9f08:	b	9ea4 <d_expression_1+0x59c>
    9f0c:	mov	x0, x19
    9f10:	bl	98cc <d_template_args>
    9f14:	mov	x3, x0
    9f18:	mov	x2, x21
    9f1c:	mov	w1, #0x4                   	// #4
    9f20:	mov	x0, x19
    9f24:	bl	70 <d_make_comp>
    9f28:	mov	x21, x0
    9f2c:	b	9ea4 <d_expression_1+0x59c>
    9f30:	mov	x0, x19
    9f34:	bl	9908 <d_expression_1>
    9f38:	mov	x21, x0
    9f3c:	b	9ea4 <d_expression_1+0x59c>
    9f40:	mov	x0, x19
    9f44:	bl	9908 <d_expression_1>
    9f48:	mov	x21, x0
    9f4c:	mov	x0, x19
    9f50:	bl	9908 <d_expression_1>
    9f54:	mov	x22, x0
    9f58:	mov	x0, x19
    9f5c:	bl	9908 <d_expression_1>
    9f60:	mov	x3, x0
    9f64:	cbz	x0, a04c <d_expression_1+0x744>
    9f68:	mov	x2, x22
    9f6c:	mov	w1, #0x3c                  	// #60
    9f70:	mov	x0, x19
    9f74:	bl	70 <d_make_comp>
    9f78:	mov	x3, x0
    9f7c:	mov	x2, x21
    9f80:	mov	w1, #0x3b                  	// #59
    9f84:	mov	x0, x19
    9f88:	bl	70 <d_make_comp>
    9f8c:	mov	x3, x0
    9f90:	mov	x2, x20
    9f94:	mov	w1, #0x3a                  	// #58
    9f98:	mov	x0, x19
    9f9c:	bl	70 <d_make_comp>
    9fa0:	mov	x20, x0
    9fa4:	ldp	x21, x22, [sp, #32]
    9fa8:	b	9970 <d_expression_1+0x68>
    9fac:	mov	x0, x19
    9fb0:	bl	7cd4 <d_operator_name>
    9fb4:	mov	x21, x0
    9fb8:	mov	x0, x19
    9fbc:	bl	9908 <d_expression_1>
    9fc0:	mov	x22, x0
    9fc4:	mov	x0, x19
    9fc8:	bl	9908 <d_expression_1>
    9fcc:	mov	x3, x0
    9fd0:	cbnz	x0, 9f68 <d_expression_1+0x660>
    9fd4:	mov	x20, x0
    9fd8:	ldp	x21, x22, [sp, #32]
    9fdc:	b	9970 <d_expression_1+0x68>
    9fe0:	add	x0, x0, #0x1
    9fe4:	str	x0, [x19, #24]
    9fe8:	mov	x3, #0x0                   	// #0
    9fec:	b	9f68 <d_expression_1+0x660>
    9ff0:	ldrb	w1, [x0, #1]
    9ff4:	cmp	w1, #0x69
    9ff8:	b.eq	a008 <d_expression_1+0x700>  // b.none
    9ffc:	mov	x20, #0x0                   	// #0
    a000:	ldp	x21, x22, [sp, #32]
    a004:	b	9970 <d_expression_1+0x68>
    a008:	add	x0, x0, #0x2
    a00c:	str	x0, [x19, #24]
    a010:	mov	w1, #0x45                  	// #69
    a014:	mov	x0, x19
    a018:	bl	72c8 <d_exprlist>
    a01c:	mov	x3, x0
    a020:	b	9f68 <d_expression_1+0x660>
    a024:	mov	x0, x19
    a028:	bl	9908 <d_expression_1>
    a02c:	mov	x3, x0
    a030:	b	9f68 <d_expression_1+0x660>
    a034:	mov	x20, x21
    a038:	ldp	x21, x22, [sp, #32]
    a03c:	b	9970 <d_expression_1+0x68>
    a040:	mov	x20, x21
    a044:	ldp	x21, x22, [sp, #32]
    a048:	b	9970 <d_expression_1+0x68>
    a04c:	mov	x20, x0
    a050:	ldp	x21, x22, [sp, #32]
    a054:	b	9970 <d_expression_1+0x68>
    a058:	mov	x20, #0x0                   	// #0
    a05c:	ldp	x21, x22, [sp, #32]
    a060:	b	9970 <d_expression_1+0x68>
    a064:	mov	x20, #0x0                   	// #0
    a068:	ldp	x21, x22, [sp, #32]
    a06c:	b	9970 <d_expression_1+0x68>
    a070:	mov	x20, #0x0                   	// #0
    a074:	ldp	x21, x22, [sp, #32]
    a078:	b	9970 <d_expression_1+0x68>
    a07c:	ldr	w0, [x20]
    a080:	mov	w22, #0x0                   	// #0
    a084:	cmp	w0, #0x34
    a088:	b.ne	9cd0 <d_expression_1+0x3c8>  // b.any
    a08c:	ldr	x0, [x19, #24]
    a090:	ldrb	w1, [x0]
    a094:	mov	w22, #0x0                   	// #0
    a098:	cmp	w1, #0x5f
    a09c:	b.ne	9cd0 <d_expression_1+0x3c8>  // b.any
    a0a0:	add	x0, x0, #0x1
    a0a4:	str	x0, [x19, #24]
    a0a8:	mov	w1, #0x45                  	// #69
    a0ac:	mov	x0, x19
    a0b0:	bl	72c8 <d_exprlist>
    a0b4:	mov	x3, x0
    a0b8:	b	9ce0 <d_expression_1+0x3d8>
    a0bc:	ldr	x0, [x19, #24]
    a0c0:	ldrb	w1, [x0]
    a0c4:	cmp	w1, #0x5f
    a0c8:	b.eq	a0a0 <d_expression_1+0x798>  // b.none
    a0cc:	mov	w22, #0x0                   	// #0
    a0d0:	b	9cbc <d_expression_1+0x3b4>
    a0d4:	ldp	x21, x22, [sp, #32]
    a0d8:	b	9970 <d_expression_1+0x68>
    a0dc:	ldp	x21, x22, [sp, #32]
    a0e0:	b	9970 <d_expression_1+0x68>
    a0e4:	ldp	x21, x22, [sp, #32]
    a0e8:	b	9970 <d_expression_1+0x68>

000000000000a0ec <d_demangle_callback>:
    a0ec:	sub	sp, sp, #0x220
    a0f0:	stp	x29, x30, [sp]
    a0f4:	mov	x29, sp
    a0f8:	stp	x19, x20, [sp, #16]
    a0fc:	stp	x21, x22, [sp, #32]
    a100:	stp	x23, x24, [sp, #48]
    a104:	str	x25, [sp, #64]
    a108:	mov	x19, x0
    a10c:	mov	w20, w1
    a110:	mov	x21, x2
    a114:	mov	x22, x3
    a118:	ldrb	w24, [x0]
    a11c:	cmp	w24, #0x5f
    a120:	b.eq	a288 <d_demangle_callback+0x19c>  // b.none
    a124:	mov	x2, #0x8                   	// #8
    a128:	adrp	x1, 0 <is_fnqual_component_type>
    a12c:	add	x1, x1, #0x0
    a130:	mov	x0, x19
    a134:	bl	0 <strncmp>
    a138:	cbnz	w0, a178 <d_demangle_callback+0x8c>
    a13c:	ldrb	w0, [x19, #8]
    a140:	cmp	w0, #0x2e
    a144:	mov	w1, #0x5f                  	// #95
    a148:	ccmp	w0, w1, #0x4, ne  // ne = any
    a14c:	mov	w1, #0x24                  	// #36
    a150:	ccmp	w0, w1, #0x4, ne  // ne = any
    a154:	b.ne	a178 <d_demangle_callback+0x8c>  // b.any
    a158:	ldrb	w0, [x19, #9]
    a15c:	cmp	w0, #0x44
    a160:	mov	w1, #0x49                  	// #73
    a164:	ccmp	w0, w1, #0x4, ne  // ne = any
    a168:	b.ne	a178 <d_demangle_callback+0x8c>  // b.any
    a16c:	ldrb	w1, [x19, #10]
    a170:	cmp	w1, #0x5f
    a174:	b.eq	a29c <d_demangle_callback+0x1b0>  // b.none
    a178:	and	w0, w20, #0x10
    a17c:	mov	w23, #0x0                   	// #0
    a180:	tbz	w20, #4, a3c0 <d_demangle_callback+0x2d4>
    a184:	mov	x0, x19
    a188:	bl	0 <strlen>
    a18c:	str	x19, [x29, #456]
    a190:	add	x1, x19, x0
    a194:	str	x1, [x29, #464]
    a198:	str	w20, [x29, #472]
    a19c:	str	x19, [x29, #480]
    a1a0:	lsl	w1, w0, #1
    a1a4:	str	w1, [x29, #500]
    a1a8:	str	wzr, [x29, #496]
    a1ac:	str	w0, [x29, #516]
    a1b0:	str	wzr, [x29, #512]
    a1b4:	str	xzr, [x29, #520]
    a1b8:	str	wzr, [x29, #528]
    a1bc:	str	wzr, [x29, #532]
    a1c0:	str	wzr, [x29, #536]
    a1c4:	str	wzr, [x29, #540]
    a1c8:	and	w2, w20, #0x40000
    a1cc:	cmp	w1, #0x800
    a1d0:	ccmp	w2, #0x0, #0x0, hi  // hi = pmore
    a1d4:	b.eq	a570 <d_demangle_callback+0x484>  // b.none
    a1d8:	mov	x25, sp
    a1dc:	sbfiz	x2, x1, #1, #32
    a1e0:	add	x1, x2, w1, sxtw
    a1e4:	sub	x1, x25, x1, lsl #3
    a1e8:	mov	sp, x1
    a1ec:	sbfiz	x0, x0, #3, #32
    a1f0:	add	x0, x0, #0xf
    a1f4:	and	x0, x0, #0xfffffffffffffff0
    a1f8:	sub	sp, sp, x0
    a1fc:	str	x1, [x29, #488]
    a200:	mov	x0, sp
    a204:	str	x0, [x29, #504]
    a208:	cmp	w23, #0x1
    a20c:	b.eq	a3e0 <d_demangle_callback+0x2f4>  // b.none
    a210:	b.ls	a2ac <d_demangle_callback+0x1c0>  // b.plast
    a214:	add	x24, x19, #0xb
    a218:	str	x24, [x29, #480]
    a21c:	cmp	w23, #0x2
    a220:	cset	w1, ne  // ne = any
    a224:	add	w23, w1, #0x44
    a228:	ldrb	w0, [x19, #11]
    a22c:	cmp	w0, #0x5f
    a230:	b.ne	a240 <d_demangle_callback+0x154>  // b.any
    a234:	ldrb	w0, [x19, #12]
    a238:	cmp	w0, #0x5a
    a23c:	b.eq	a550 <d_demangle_callback+0x464>  // b.none
    a240:	mov	x0, x24
    a244:	bl	0 <strlen>
    a248:	mov	w2, w0
    a24c:	mov	x1, x24
    a250:	add	x0, x29, #0x1c8
    a254:	bl	120 <d_make_name>
    a258:	mov	x2, x0
    a25c:	mov	x3, #0x0                   	// #0
    a260:	mov	w1, w23
    a264:	add	x0, x29, #0x1c8
    a268:	bl	70 <d_make_comp>
    a26c:	mov	x19, x0
    a270:	ldr	x23, [x29, #480]
    a274:	mov	x0, x23
    a278:	bl	0 <strlen>
    a27c:	add	x23, x23, x0
    a280:	str	x23, [x29, #480]
    a284:	b	a2bc <d_demangle_callback+0x1d0>
    a288:	ldrb	w0, [x0, #1]
    a28c:	cmp	w0, #0x5a
    a290:	b.ne	a124 <d_demangle_callback+0x38>  // b.any
    a294:	mov	w23, #0x1                   	// #1
    a298:	b	a184 <d_demangle_callback+0x98>
    a29c:	cmp	w0, #0x49
    a2a0:	cset	w23, ne  // ne = any
    a2a4:	add	w23, w23, #0x2
    a2a8:	b	a184 <d_demangle_callback+0x98>
    a2ac:	cbnz	w23, a56c <d_demangle_callback+0x480>
    a2b0:	add	x0, x29, #0x1c8
    a2b4:	bl	7374 <d_type>
    a2b8:	mov	x19, x0
    a2bc:	tbz	w20, #0, a2d0 <d_demangle_callback+0x1e4>
    a2c0:	ldr	x0, [x29, #480]
    a2c4:	ldrb	w1, [x0]
    a2c8:	mov	w0, #0x0                   	// #0
    a2cc:	cbnz	w1, a3bc <d_demangle_callback+0x2d0>
    a2d0:	mov	w0, #0x0                   	// #0
    a2d4:	cbz	x19, a3bc <d_demangle_callback+0x2d0>
    a2d8:	str	xzr, [x29, #336]
    a2dc:	strb	wzr, [x29, #344]
    a2e0:	str	xzr, [x29, #368]
    a2e4:	str	xzr, [x29, #376]
    a2e8:	str	wzr, [x29, #396]
    a2ec:	str	xzr, [x29, #400]
    a2f0:	str	x21, [x29, #352]
    a2f4:	str	x22, [x29, #360]
    a2f8:	str	wzr, [x29, #384]
    a2fc:	str	wzr, [x29, #388]
    a300:	str	wzr, [x29, #392]
    a304:	str	xzr, [x29, #408]
    a308:	str	xzr, [x29, #416]
    a30c:	str	wzr, [x29, #424]
    a310:	str	wzr, [x29, #428]
    a314:	str	xzr, [x29, #432]
    a318:	str	wzr, [x29, #440]
    a31c:	str	wzr, [x29, #444]
    a320:	mov	x1, x19
    a324:	add	x0, x29, #0x50
    a328:	bl	730 <d_count_templates_scopes>
    a32c:	ldr	w0, [x29, #388]
    a330:	cmp	w0, #0x7ff
    a334:	b.gt	a33c <d_demangle_callback+0x250>
    a338:	str	wzr, [x29, #388]
    a33c:	ldr	w1, [x29, #428]
    a340:	ldr	w0, [x29, #444]
    a344:	mul	w0, w1, w0
    a348:	str	w0, [x29, #444]
    a34c:	str	xzr, [x29, #448]
    a350:	mov	x21, sp
    a354:	mov	w2, #0x1                   	// #1
    a358:	cmp	w1, #0x0
    a35c:	csel	w1, w1, w2, gt
    a360:	sub	sp, sp, w1, sxtw #4
    a364:	mov	x1, sp
    a368:	cmp	w0, #0x0
    a36c:	csel	w0, w0, w2, gt
    a370:	sub	sp, sp, w0, sxtw #4
    a374:	str	x1, [x29, #416]
    a378:	mov	x0, sp
    a37c:	str	x0, [x29, #432]
    a380:	add	x0, x29, #0x50
    a384:	mov	x2, x19
    a388:	mov	w1, w20
    a38c:	mov	x19, x0
    a390:	bl	4fe0 <d_print_comp>
    a394:	mov	sp, x21
    a398:	ldr	x1, [x29, #336]
    a39c:	strb	wzr, [x19, x1]
    a3a0:	ldr	x2, [x29, #360]
    a3a4:	mov	x0, x19
    a3a8:	ldr	x3, [x29, #352]
    a3ac:	blr	x3
    a3b0:	ldr	w0, [x29, #384]
    a3b4:	cmp	w0, #0x0
    a3b8:	cset	w0, eq  // eq = none
    a3bc:	mov	sp, x25
    a3c0:	mov	sp, x29
    a3c4:	ldp	x19, x20, [sp, #16]
    a3c8:	ldp	x21, x22, [sp, #32]
    a3cc:	ldp	x23, x24, [sp, #48]
    a3d0:	ldr	x25, [sp, #64]
    a3d4:	ldp	x29, x30, [sp]
    a3d8:	add	sp, sp, #0x220
    a3dc:	ret
    a3e0:	cmp	w24, #0x5f
    a3e4:	b.eq	a3f8 <d_demangle_callback+0x30c>  // b.none
    a3e8:	and	w0, w20, #0x1
    a3ec:	tbz	w20, #0, a3bc <d_demangle_callback+0x2d0>
    a3f0:	mov	x19, #0x0                   	// #0
    a3f4:	b	a2c0 <d_demangle_callback+0x1d4>
    a3f8:	add	x0, x19, #0x1
    a3fc:	str	x0, [x29, #480]
    a400:	ldrb	w0, [x19, #1]
    a404:	cmp	w0, #0x5a
    a408:	b.ne	a3e8 <d_demangle_callback+0x2fc>  // b.any
    a40c:	add	x19, x19, #0x2
    a410:	str	x19, [x29, #480]
    a414:	mov	w1, #0x1                   	// #1
    a418:	add	x0, x29, #0x1c8
    a41c:	bl	8e20 <d_encoding>
    a420:	mov	x19, x0
    a424:	ldr	w0, [x29, #472]
    a428:	tbz	w0, #0, a2bc <d_demangle_callback+0x1d0>
    a42c:	ldr	x1, [x29, #480]
    a430:	ldrb	w0, [x1]
    a434:	add	x23, x29, #0x1c8
    a438:	mov	w24, #0x4e                  	// #78
    a43c:	cmp	w0, #0x2e
    a440:	b.eq	a510 <d_demangle_callback+0x424>  // b.none
    a444:	b	a2bc <d_demangle_callback+0x1d0>
    a448:	add	x0, x1, #0x2
    a44c:	ldrb	w3, [x1, #2]
    a450:	sub	w2, w3, #0x61
    a454:	and	w2, w2, #0xff
    a458:	cmp	w3, #0x5f
    a45c:	ccmp	w2, #0x19, #0x0, ne  // ne = any
    a460:	b.hi	a53c <d_demangle_callback+0x450>  // b.pmore
    a464:	ldrb	w3, [x0, #1]!
    a468:	sub	w2, w3, #0x61
    a46c:	and	w2, w2, #0xff
    a470:	cmp	w3, #0x5f
    a474:	ccmp	w2, #0x19, #0x0, ne  // ne = any
    a478:	b.ls	a464 <d_demangle_callback+0x378>  // b.plast
    a47c:	b	a53c <d_demangle_callback+0x450>
    a480:	ldrb	w0, [x2, #1]!
    a484:	sub	w0, w0, #0x30
    a488:	and	w0, w0, #0xff
    a48c:	cmp	w0, #0x9
    a490:	b.ls	a480 <d_demangle_callback+0x394>  // b.plast
    a494:	ldrb	w0, [x2]
    a498:	cmp	w0, #0x2e
    a49c:	b.ne	a4d8 <d_demangle_callback+0x3ec>  // b.any
    a4a0:	mov	x0, x2
    a4a4:	ldrb	w2, [x0, #1]
    a4a8:	sub	w2, w2, #0x30
    a4ac:	and	w2, w2, #0xff
    a4b0:	cmp	w2, #0x9
    a4b4:	b.hi	a4d4 <d_demangle_callback+0x3e8>  // b.pmore
    a4b8:	add	x2, x0, #0x2
    a4bc:	ldrb	w0, [x0, #2]
    a4c0:	sub	w0, w0, #0x30
    a4c4:	and	w0, w0, #0xff
    a4c8:	cmp	w0, #0x9
    a4cc:	b.ls	a480 <d_demangle_callback+0x394>  // b.plast
    a4d0:	b	a494 <d_demangle_callback+0x3a8>
    a4d4:	mov	x2, x0
    a4d8:	str	x2, [x29, #480]
    a4dc:	sub	w2, w2, w1
    a4e0:	mov	x0, x23
    a4e4:	bl	120 <d_make_name>
    a4e8:	mov	x3, x0
    a4ec:	mov	x2, x19
    a4f0:	mov	w1, w24
    a4f4:	mov	x0, x23
    a4f8:	bl	70 <d_make_comp>
    a4fc:	mov	x19, x0
    a500:	ldr	x1, [x29, #480]
    a504:	ldrb	w0, [x1]
    a508:	cmp	w0, #0x2e
    a50c:	b.ne	a2bc <d_demangle_callback+0x1d0>  // b.any
    a510:	ldrb	w0, [x1, #1]
    a514:	sub	w2, w0, #0x61
    a518:	and	w2, w2, #0xff
    a51c:	cmp	w0, #0x5f
    a520:	ccmp	w2, #0x19, #0x0, ne  // ne = any
    a524:	b.ls	a448 <d_demangle_callback+0x35c>  // b.plast
    a528:	sub	w0, w0, #0x30
    a52c:	and	w0, w0, #0xff
    a530:	cmp	w0, #0x9
    a534:	b.hi	a2bc <d_demangle_callback+0x1d0>  // b.pmore
    a538:	mov	x0, x1
    a53c:	ldrb	w2, [x0]
    a540:	cmp	w2, #0x2e
    a544:	b.eq	a4a4 <d_demangle_callback+0x3b8>  // b.none
    a548:	mov	x2, x0
    a54c:	b	a4d8 <d_demangle_callback+0x3ec>
    a550:	add	x19, x19, #0xd
    a554:	str	x19, [x29, #480]
    a558:	mov	w1, #0x0                   	// #0
    a55c:	add	x0, x29, #0x1c8
    a560:	bl	8e20 <d_encoding>
    a564:	mov	x2, x0
    a568:	b	a25c <d_demangle_callback+0x170>
    a56c:	bl	0 <abort>
    a570:	mov	w0, #0x0                   	// #0
    a574:	b	a3c0 <d_demangle_callback+0x2d4>

000000000000a578 <__cxa_demangle>:
    a578:	stp	x29, x30, [sp, #-96]!
    a57c:	mov	x29, sp
    a580:	stp	x19, x20, [sp, #16]
    a584:	stp	x21, x22, [sp, #32]
    a588:	mov	x20, x3
    a58c:	cbz	x0, a638 <__cxa_demangle+0xc0>
    a590:	str	x23, [sp, #48]
    a594:	mov	x19, x1
    a598:	mov	x23, x2
    a59c:	cmp	x1, #0x0
    a5a0:	ccmp	x2, #0x0, #0x0, ne  // ne = any
    a5a4:	b.eq	a650 <__cxa_demangle+0xd8>  // b.none
    a5a8:	str	xzr, [sp, #64]
    a5ac:	str	xzr, [sp, #72]
    a5b0:	str	xzr, [sp, #80]
    a5b4:	str	wzr, [sp, #88]
    a5b8:	add	x3, sp, #0x40
    a5bc:	adrp	x2, 0 <is_fnqual_component_type>
    a5c0:	add	x2, x2, #0x0
    a5c4:	mov	w1, #0x11                  	// #17
    a5c8:	bl	a0ec <d_demangle_callback>
    a5cc:	cbz	w0, a66c <__cxa_demangle+0xf4>
    a5d0:	ldr	w0, [sp, #88]
    a5d4:	cmp	w0, #0x0
    a5d8:	ldr	x0, [sp, #80]
    a5dc:	csinc	x22, x0, xzr, eq  // eq = none
    a5e0:	ldr	x21, [sp, #64]
    a5e4:	cbz	x21, a684 <__cxa_demangle+0x10c>
    a5e8:	cbz	x19, a6b4 <__cxa_demangle+0x13c>
    a5ec:	mov	x0, x21
    a5f0:	bl	0 <strlen>
    a5f4:	ldr	x1, [x23]
    a5f8:	cmp	x0, x1
    a5fc:	b.cs	a6c0 <__cxa_demangle+0x148>  // b.hs, b.nlast
    a600:	mov	x1, x21
    a604:	mov	x0, x19
    a608:	bl	0 <strcpy>
    a60c:	mov	x0, x21
    a610:	bl	0 <free>
    a614:	mov	x21, x19
    a618:	cbz	x20, a6e4 <__cxa_demangle+0x16c>
    a61c:	str	wzr, [x20]
    a620:	ldr	x23, [sp, #48]
    a624:	mov	x0, x21
    a628:	ldp	x19, x20, [sp, #16]
    a62c:	ldp	x21, x22, [sp, #32]
    a630:	ldp	x29, x30, [sp], #96
    a634:	ret
    a638:	mov	x21, x3
    a63c:	cbz	x3, a624 <__cxa_demangle+0xac>
    a640:	mov	w1, #0xfffffffd            	// #-3
    a644:	str	w1, [x3]
    a648:	mov	x21, x0
    a64c:	b	a624 <__cxa_demangle+0xac>
    a650:	mov	x21, x3
    a654:	cbz	x3, a6dc <__cxa_demangle+0x164>
    a658:	mov	w0, #0xfffffffd            	// #-3
    a65c:	str	w0, [x3]
    a660:	mov	x21, #0x0                   	// #0
    a664:	ldr	x23, [sp, #48]
    a668:	b	a624 <__cxa_demangle+0xac>
    a66c:	ldr	x0, [sp, #64]
    a670:	bl	0 <free>
    a674:	cbnz	x20, a6a0 <__cxa_demangle+0x128>
    a678:	mov	x21, x20
    a67c:	ldr	x23, [sp, #48]
    a680:	b	a624 <__cxa_demangle+0xac>
    a684:	cbz	x20, a6d0 <__cxa_demangle+0x158>
    a688:	cmp	x22, #0x1
    a68c:	b.ne	a6a0 <__cxa_demangle+0x128>  // b.any
    a690:	mov	w0, #0xffffffff            	// #-1
    a694:	str	w0, [x20]
    a698:	ldr	x23, [sp, #48]
    a69c:	b	a624 <__cxa_demangle+0xac>
    a6a0:	mov	w0, #0xfffffffe            	// #-2
    a6a4:	str	w0, [x20]
    a6a8:	mov	x21, #0x0                   	// #0
    a6ac:	ldr	x23, [sp, #48]
    a6b0:	b	a624 <__cxa_demangle+0xac>
    a6b4:	cbz	x23, a618 <__cxa_demangle+0xa0>
    a6b8:	str	x22, [x23]
    a6bc:	b	a618 <__cxa_demangle+0xa0>
    a6c0:	mov	x0, x19
    a6c4:	bl	0 <free>
    a6c8:	str	x22, [x23]
    a6cc:	b	a618 <__cxa_demangle+0xa0>
    a6d0:	mov	x21, x20
    a6d4:	ldr	x23, [sp, #48]
    a6d8:	b	a624 <__cxa_demangle+0xac>
    a6dc:	ldr	x23, [sp, #48]
    a6e0:	b	a624 <__cxa_demangle+0xac>
    a6e4:	ldr	x23, [sp, #48]
    a6e8:	b	a624 <__cxa_demangle+0xac>

000000000000a6ec <__gcclibcxx_demangle_callback>:
    a6ec:	cmp	x0, #0x0
    a6f0:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    a6f4:	b.eq	a724 <__gcclibcxx_demangle_callback+0x38>  // b.none
    a6f8:	stp	x29, x30, [sp, #-16]!
    a6fc:	mov	x29, sp
    a700:	mov	x3, x2
    a704:	mov	x2, x1
    a708:	mov	w1, #0x11                  	// #17
    a70c:	bl	a0ec <d_demangle_callback>
    a710:	cmp	w0, #0x0
    a714:	mov	w0, #0xfffffffe            	// #-2
    a718:	csel	w0, w0, wzr, eq  // eq = none
    a71c:	ldp	x29, x30, [sp], #16
    a720:	ret
    a724:	mov	w0, #0xfffffffd            	// #-3
    a728:	ret
