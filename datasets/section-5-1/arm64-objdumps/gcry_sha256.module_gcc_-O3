
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//gcry_sha256.module_gcc_-O3:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <sha256_init>:
   0:	mov	x4, #0xe667                	// #58983
   4:	mov	x3, #0xf372                	// #62322
   8:	mov	x2, #0x527f                	// #21119
   c:	mov	x1, #0xd9ab                	// #55723
  10:	movk	x4, #0x6a09, lsl #16
  14:	movk	x3, #0x3c6e, lsl #16
  18:	movk	x2, #0x510e, lsl #16
  1c:	movk	x1, #0x1f83, lsl #16
  20:	movk	x4, #0xae85, lsl #32
  24:	movk	x3, #0xf53a, lsl #32
  28:	movk	x2, #0x688c, lsl #32
  2c:	movk	x1, #0xcd19, lsl #32
  30:	movk	x4, #0xbb67, lsl #48
  34:	movk	x3, #0xa54f, lsl #48
  38:	movk	x2, #0x9b05, lsl #48
  3c:	movk	x1, #0x5be0, lsl #48
  40:	stp	x4, x3, [x0]
  44:	stp	x2, x1, [x0, #16]
  48:	str	wzr, [x0, #32]
  4c:	str	wzr, [x0, #100]
  50:	ret
  54:	nop

0000000000000058 <sha224_init>:
  58:	mov	x4, #0x9ed8                	// #40664
  5c:	mov	x3, #0xdd17                	// #56599
  60:	mov	x2, #0xb31                 	// #2865
  64:	mov	x1, #0x8fa7                	// #36775
  68:	movk	x4, #0xc105, lsl #16
  6c:	movk	x3, #0x3070, lsl #16
  70:	movk	x2, #0xffc0, lsl #16
  74:	movk	x1, #0x64f9, lsl #16
  78:	movk	x4, #0xd507, lsl #32
  7c:	movk	x3, #0x5939, lsl #32
  80:	movk	x2, #0x1511, lsl #32
  84:	movk	x1, #0x4fa4, lsl #32
  88:	movk	x4, #0x367c, lsl #48
  8c:	movk	x3, #0xf70e, lsl #48
  90:	movk	x2, #0x6858, lsl #48
  94:	movk	x1, #0xbefa, lsl #48
  98:	stp	x4, x3, [x0]
  9c:	stp	x2, x1, [x0, #16]
  a0:	str	wzr, [x0, #32]
  a4:	str	wzr, [x0, #100]
  a8:	ret
  ac:	nop

00000000000000b0 <transform>:
  b0:	stp	x29, x30, [sp, #-384]!
  b4:	mov	w9, #0x10                  	// #16
  b8:	mov	x29, sp
  bc:	stp	x19, x20, [sp, #16]
  c0:	add	x12, sp, #0x80
  c4:	mov	x2, x12
  c8:	stp	x21, x22, [sp, #32]
  cc:	stp	x23, x24, [sp, #48]
  d0:	ldp	w16, w15, [x1]
  d4:	ldp	w14, w13, [x1, #8]
  d8:	rev	w16, w16
  dc:	ldp	w11, w10, [x1, #16]
  e0:	rev	w15, w15
  e4:	ldp	w8, w7, [x1, #24]
  e8:	rev	w14, w14
  ec:	ldp	w6, w5, [x1, #32]
  f0:	rev	w11, w11
  f4:	ldp	w4, w3, [x1, #40]
  f8:	rev	w10, w10
  fc:	rev	w8, w8
 100:	rev	w7, w7
 104:	rev	w6, w6
 108:	rev	w5, w5
 10c:	rev	w4, w4
 110:	rev	w3, w3
 114:	rev	w13, w13
 118:	stp	w16, w15, [sp, #64]
 11c:	stp	w14, w13, [sp, #72]
 120:	stp	w11, w10, [sp, #80]
 124:	stp	w8, w7, [sp, #88]
 128:	stp	w6, w5, [sp, #96]
 12c:	stp	w4, w3, [sp, #104]
 130:	ldp	w5, w4, [x1, #48]
 134:	ldp	w3, w1, [x1, #56]
 138:	rev	w5, w5
 13c:	rev	w4, w4
 140:	stp	w5, w4, [sp, #112]
 144:	rev	w3, w3
 148:	rev	w1, w1
 14c:	stp	w3, w1, [sp, #120]
 150:	ldp	x1, x10, [sp, #104]
 154:	stp	x1, x10, [sp, #168]
 158:	ldr	x7, [sp, #120]
 15c:	str	x7, [sp, #184]
 160:	ldr	x8, [sp, #96]
 164:	mov	w11, w7
 168:	lsr	x3, x7, #32
 16c:	mov	w5, w10
 170:	ldr	x7, [sp, #72]
 174:	str	x7, [sp, #136]
 178:	ldp	w20, w19, [x0]
 17c:	lsr	x4, x10, #32
 180:	ldp	w30, w18, [x0, #8]
 184:	mov	w10, w1
 188:	ldp	w17, w16, [x0, #16]
 18c:	lsr	x1, x1, #32
 190:	ldp	w15, w14, [x0, #24]
 194:	str	x8, [sp, #160]
 198:	ldr	x7, [sp, #80]
 19c:	lsr	x8, x8, #32
 1a0:	str	x7, [sp, #144]
 1a4:	ldr	x6, [sp, #64]
 1a8:	str	x6, [sp, #128]
 1ac:	ldr	x7, [sp, #88]
 1b0:	str	x7, [sp, #152]
 1b4:	ldp	w21, w13, [x2, #4]
 1b8:	ror	w7, w11, #19
 1bc:	eor	w7, w7, w11, ror #17
 1c0:	add	w6, w6, w8
 1c4:	eor	w8, w7, w11, lsr #10
 1c8:	ldr	w22, [x2, #12]
 1cc:	add	w23, w13, w1
 1d0:	ror	w7, w21, #18
 1d4:	eor	w7, w7, w21, ror #7
 1d8:	add	w9, w9, #0x7
 1dc:	eor	w7, w7, w21, lsr #3
 1e0:	ror	w1, w22, #7
 1e4:	add	w8, w8, w7
 1e8:	eor	w1, w1, w22, ror #18
 1ec:	add	w8, w8, w6
 1f0:	ror	w6, w3, #17
 1f4:	eor	w6, w6, w3, ror #19
 1f8:	ror	w7, w13, #7
 1fc:	eor	w6, w6, w3, lsr #10
 200:	eor	w7, w7, w13, ror #18
 204:	add	w6, w6, w21
 208:	ror	w21, w8, #17
 20c:	eor	w21, w21, w8, ror #19
 210:	eor	w1, w1, w22, lsr #3
 214:	eor	w21, w21, w8, lsr #10
 218:	eor	w7, w7, w13, lsr #3
 21c:	add	w1, w1, w21
 220:	add	w10, w7, w10
 224:	ldp	w21, w13, [x2, #16]
 228:	add	w10, w10, w6
 22c:	add	w1, w1, w23
 230:	add	w6, w22, w5
 234:	add	w22, w21, w4
 238:	ror	w23, w10, #17
 23c:	eor	w23, w23, w10, ror #19
 240:	ror	w5, w21, #7
 244:	eor	w5, w5, w21, ror #18
 248:	eor	w23, w23, w10, lsr #10
 24c:	eor	w5, w5, w21, lsr #3
 250:	ror	w7, w1, #17
 254:	add	w5, w5, w23
 258:	ror	w4, w13, #7
 25c:	add	w5, w5, w6
 260:	eor	w7, w7, w1, ror #19
 264:	ldp	w21, w6, [x2, #24]
 268:	eor	w4, w4, w13, ror #18
 26c:	eor	w7, w7, w1, lsr #10
 270:	eor	w4, w4, w13, lsr #3
 274:	add	w4, w4, w7
 278:	ror	w23, w5, #17
 27c:	add	w4, w4, w22
 280:	ror	w7, w21, #7
 284:	eor	w7, w7, w21, ror #18
 288:	eor	w23, w23, w5, ror #19
 28c:	eor	w7, w7, w21, lsr #3
 290:	ror	w22, w4, #17
 294:	add	w21, w21, w3
 298:	ror	w3, w6, #7
 29c:	eor	w22, w22, w4, ror #19
 2a0:	eor	w3, w3, w6, ror #18
 2a4:	eor	w23, w23, w5, lsr #10
 2a8:	eor	w22, w22, w4, lsr #10
 2ac:	eor	w3, w3, w6, lsr #3
 2b0:	add	w11, w13, w11
 2b4:	add	w7, w7, w23
 2b8:	add	w3, w3, w22
 2bc:	add	w11, w7, w11
 2c0:	add	w3, w3, w21
 2c4:	stp	w8, w10, [x2, #64]
 2c8:	cmp	w9, #0x3a
 2cc:	stp	w1, w5, [x2, #72]
 2d0:	stp	w4, w11, [x2, #80]
 2d4:	add	x2, x2, #0x1c
 2d8:	str	w3, [x2, #60]
 2dc:	b.ne	1b4 <transform+0x104>  // b.any
 2e0:	add	x5, sp, #0x148
 2e4:	ldr	w13, [sp, #296]
 2e8:	adrp	x2, 0 <sha256_init>
 2ec:	mov	w8, w14
 2f0:	mov	w7, w15
 2f4:	ldp	w4, w1, [x5, #24]
 2f8:	ldp	w6, w3, [x5, #-28]
 2fc:	ror	w11, w1, #19
 300:	eor	w11, w11, w1, ror #17
 304:	ror	w9, w4, #19
 308:	ror	w10, w6, #18
 30c:	eor	w9, w9, w4, ror #17
 310:	ror	w5, w3, #18
 314:	eor	w10, w10, w6, ror #7
 318:	eor	w5, w5, w3, ror #7
 31c:	eor	w1, w11, w1, lsr #10
 320:	ldr	w11, [sp, #332]
 324:	eor	w10, w10, w6, lsr #3
 328:	eor	w5, w5, w3, lsr #3
 32c:	eor	w9, w9, w4, lsr #10
 330:	add	w11, w11, w13
 334:	add	w9, w9, w10
 338:	add	w1, w1, w5
 33c:	ldr	w10, [sp, #336]
 340:	add	w9, w9, w11
 344:	ldr	w5, [sp, #308]
 348:	add	w10, w6, w10
 34c:	ror	w21, w9, #19
 350:	add	w1, w1, w10
 354:	eor	w21, w21, w9, ror #17
 358:	ldr	w11, [sp, #340]
 35c:	ror	w10, w5, #7
 360:	eor	w10, w10, w5, ror #18
 364:	ldr	w6, [sp, #312]
 368:	eor	w21, w21, w9, lsr #10
 36c:	eor	w10, w10, w5, lsr #3
 370:	add	w11, w3, w11
 374:	add	w10, w10, w21
 378:	add	w10, w10, w11
 37c:	ror	w13, w1, #17
 380:	ldr	x11, [x2]
 384:	ror	w3, w6, #7
 388:	ldr	w2, [sp, #316]
 38c:	eor	w13, w13, w1, ror #19
 390:	eor	w3, w3, w6, ror #18
 394:	eor	w13, w13, w1, lsr #10
 398:	add	w21, w2, w4
 39c:	eor	w3, w3, w6, lsr #3
 3a0:	ror	w4, w2, #7
 3a4:	add	w3, w3, w13
 3a8:	ror	w22, w10, #17
 3ac:	ldr	w13, [sp, #344]
 3b0:	eor	w4, w4, w2, ror #18
 3b4:	eor	w22, w22, w10, ror #19
 3b8:	eor	w4, w4, w2, lsr #3
 3bc:	eor	w22, w22, w10, lsr #10
 3c0:	add	w5, w5, w13
 3c4:	add	w4, w4, w22
 3c8:	add	x22, sp, #0x170
 3cc:	add	w3, w3, w5
 3d0:	ldr	w5, [sp, #320]
 3d4:	mov	w2, w30
 3d8:	stp	w9, w1, [x22, #-8]
 3dc:	ror	w13, w3, #19
 3e0:	ldr	w1, [sp, #348]
 3e4:	ror	w9, w5, #7
 3e8:	eor	w13, w13, w3, ror #17
 3ec:	eor	w9, w9, w5, ror #18
 3f0:	add	w1, w6, w1
 3f4:	eor	w13, w13, w3, lsr #10
 3f8:	add	w4, w4, w1
 3fc:	eor	w9, w9, w5, lsr #3
 400:	add	w9, w9, w13
 404:	mov	w5, w17
 408:	add	x13, x11, #0x100
 40c:	mov	w6, w16
 410:	mov	w1, w18
 414:	stp	w10, w3, [x22]
 418:	mov	w3, w19
 41c:	str	w4, [sp, #376]
 420:	mov	w4, w20
 424:	add	w9, w9, w21
 428:	str	w9, [sp, #380]
 42c:	nop
 430:	eor	w22, w6, w7
 434:	ror	w9, w5, #11
 438:	ldr	w23, [x11]
 43c:	eor	w9, w9, w5, ror #6
 440:	ldr	w24, [x12]
 444:	and	w22, w22, w5
 448:	eor	w22, w22, w7
 44c:	orr	w21, w4, w3
 450:	eor	w9, w9, w5, ror #25
 454:	ror	w10, w4, #13
 458:	add	w9, w9, w22
 45c:	eor	w10, w10, w4, ror #2
 460:	add	w22, w23, w24
 464:	and	w21, w21, w2
 468:	and	w23, w4, w3
 46c:	eor	w10, w10, w4, ror #22
 470:	add	w9, w9, w22
 474:	orr	w21, w21, w23
 478:	add	w8, w9, w8
 47c:	add	w9, w10, w21
 480:	add	w10, w8, w1
 484:	add	w8, w9, w8
 488:	eor	w1, w5, w6
 48c:	ldr	w23, [x11, #4]
 490:	ldr	w24, [x12, #4]
 494:	and	w1, w1, w10
 498:	eor	w1, w1, w6
 49c:	ror	w22, w10, #11
 4a0:	orr	w21, w8, w4
 4a4:	ror	w9, w8, #13
 4a8:	add	w23, w23, w24
 4ac:	add	w7, w1, w7
 4b0:	and	w21, w21, w3
 4b4:	eor	w1, w22, w10, ror #6
 4b8:	eor	w9, w9, w8, ror #2
 4bc:	and	w22, w8, w4
 4c0:	orr	w21, w21, w22
 4c4:	eor	w9, w9, w8, ror #22
 4c8:	add	w7, w7, w23
 4cc:	eor	w1, w1, w10, ror #25
 4d0:	add	w1, w7, w1
 4d4:	add	w7, w9, w21
 4d8:	add	w7, w7, w1
 4dc:	add	w9, w1, w2
 4e0:	eor	w1, w10, w5
 4e4:	ldr	w23, [x11, #8]
 4e8:	ldr	w24, [x12, #8]
 4ec:	and	w1, w1, w9
 4f0:	eor	w1, w1, w5
 4f4:	ror	w22, w9, #11
 4f8:	orr	w21, w8, w7
 4fc:	ror	w2, w7, #13
 500:	add	w23, w23, w24
 504:	add	w6, w1, w6
 508:	and	w21, w21, w4
 50c:	eor	w1, w22, w9, ror #6
 510:	eor	w2, w2, w7, ror #2
 514:	and	w22, w8, w7
 518:	orr	w21, w21, w22
 51c:	eor	w2, w2, w7, ror #22
 520:	add	w6, w6, w23
 524:	eor	w1, w1, w9, ror #25
 528:	add	w1, w6, w1
 52c:	add	w6, w2, w21
 530:	add	w3, w1, w3
 534:	add	w6, w6, w1
 538:	eor	w2, w10, w9
 53c:	ldr	w23, [x11, #12]
 540:	ldr	w24, [x12, #12]
 544:	and	w2, w2, w3
 548:	orr	w21, w7, w6
 54c:	ror	w1, w6, #13
 550:	eor	w2, w2, w10
 554:	ror	w22, w3, #11
 558:	and	w21, w21, w8
 55c:	add	w23, w23, w24
 560:	add	w2, w2, w5
 564:	and	w24, w7, w6
 568:	eor	w5, w1, w6, ror #2
 56c:	eor	w22, w22, w3, ror #6
 570:	orr	w1, w21, w24
 574:	eor	w22, w22, w3, ror #25
 578:	eor	w5, w5, w6, ror #22
 57c:	add	w2, w2, w23
 580:	add	w2, w2, w22
 584:	add	w5, w5, w1
 588:	add	w4, w2, w4
 58c:	add	w5, w5, w2
 590:	eor	w1, w9, w3
 594:	ldr	w23, [x11, #16]
 598:	ldr	w24, [x12, #16]
 59c:	and	w1, w1, w4
 5a0:	orr	w21, w6, w5
 5a4:	eor	w1, w1, w9
 5a8:	ror	w22, w4, #11
 5ac:	eor	w22, w22, w4, ror #6
 5b0:	ror	w2, w5, #13
 5b4:	add	w23, w23, w24
 5b8:	add	w1, w1, w10
 5bc:	and	w24, w6, w5
 5c0:	and	w10, w21, w7
 5c4:	eor	w2, w2, w5, ror #2
 5c8:	eor	w21, w22, w4, ror #25
 5cc:	orr	w10, w10, w24
 5d0:	eor	w2, w2, w5, ror #22
 5d4:	add	w1, w1, w23
 5d8:	add	w2, w2, w10
 5dc:	add	w1, w1, w21
 5e0:	ldr	w23, [x11, #20]
 5e4:	add	w8, w8, w1
 5e8:	add	w1, w2, w1
 5ec:	eor	w2, w3, w4
 5f0:	ldr	w24, [x12, #20]
 5f4:	and	w2, w2, w8
 5f8:	orr	w21, w5, w1
 5fc:	eor	w2, w2, w3
 600:	ror	w10, w1, #13
 604:	and	w21, w21, w6
 608:	ror	w22, w8, #11
 60c:	add	w23, w23, w24
 610:	add	w2, w2, w9
 614:	and	w24, w5, w1
 618:	eor	w9, w10, w1, ror #2
 61c:	eor	w22, w22, w8, ror #6
 620:	orr	w10, w21, w24
 624:	eor	w22, w22, w8, ror #25
 628:	add	w2, w2, w23
 62c:	eor	w9, w9, w1, ror #22
 630:	add	w2, w2, w22
 634:	add	w9, w9, w10
 638:	add	w7, w7, w2
 63c:	eor	w10, w4, w8
 640:	add	w2, w9, w2
 644:	ldr	w23, [x11, #24]
 648:	and	w10, w10, w7
 64c:	ldr	w24, [x12, #24]
 650:	eor	w10, w10, w4
 654:	ror	w9, w2, #2
 658:	orr	w21, w1, w2
 65c:	ror	w22, w7, #6
 660:	and	w21, w21, w5
 664:	add	w23, w23, w24
 668:	add	w10, w10, w3
 66c:	and	w24, w1, w2
 670:	eor	w3, w9, w2, ror #13
 674:	eor	w22, w22, w7, ror #11
 678:	orr	w9, w21, w24
 67c:	eor	w22, w22, w7, ror #25
 680:	add	w10, w10, w23
 684:	eor	w3, w3, w2, ror #22
 688:	add	w10, w10, w22
 68c:	add	w3, w3, w9
 690:	add	w6, w6, w10
 694:	add	w3, w3, w10
 698:	eor	w9, w8, w7
 69c:	ldr	w23, [x11, #28]
 6a0:	ldr	w24, [x12, #28]
 6a4:	and	w9, w9, w6
 6a8:	eor	w9, w9, w8
 6ac:	ror	w10, w3, #2
 6b0:	orr	w21, w2, w3
 6b4:	ror	w22, w6, #6
 6b8:	add	w9, w9, w4
 6bc:	add	w23, w23, w24
 6c0:	eor	w4, w10, w3, ror #13
 6c4:	eor	w22, w22, w6, ror #11
 6c8:	and	w21, w21, w1
 6cc:	and	w24, w2, w3
 6d0:	eor	w22, w22, w6, ror #25
 6d4:	eor	w4, w4, w3, ror #22
 6d8:	add	w9, w9, w23
 6dc:	orr	w10, w21, w24
 6e0:	add	w9, w9, w22
 6e4:	add	x11, x11, #0x20
 6e8:	add	w4, w4, w10
 6ec:	cmp	x11, x13
 6f0:	add	x12, x12, #0x20
 6f4:	add	w5, w5, w9
 6f8:	add	w4, w4, w9
 6fc:	b.ne	430 <transform+0x380>  // b.any
 700:	add	w4, w20, w4
 704:	add	w3, w19, w3
 708:	add	w2, w30, w2
 70c:	add	w1, w18, w1
 710:	add	w5, w17, w5
 714:	add	w6, w16, w6
 718:	add	w7, w15, w7
 71c:	add	w8, w14, w8
 720:	stp	w4, w3, [x0]
 724:	stp	w2, w1, [x0, #8]
 728:	stp	w5, w6, [x0, #16]
 72c:	stp	w7, w8, [x0, #24]
 730:	ldp	x19, x20, [sp, #16]
 734:	ldp	x21, x22, [sp, #32]
 738:	ldp	x23, x24, [sp, #48]
 73c:	ldp	x29, x30, [sp], #384
 740:	ret
 744:	nop
	...

0000000000000750 <sha256_read>:
 750:	add	x0, x0, #0x24
 754:	ret

0000000000000758 <sha256_write>:
 758:	stp	x29, x30, [sp, #-48]!
 75c:	mov	x29, sp
 760:	stp	x19, x20, [sp, #16]
 764:	mov	x20, x1
 768:	ldr	w1, [x0, #100]
 76c:	stp	x21, x22, [sp, #32]
 770:	mov	x19, x0
 774:	mov	x21, x2
 778:	cmp	w1, #0x40
 77c:	b.eq	860 <sha256_write+0x108>  // b.none
 780:	cbz	x20, 850 <sha256_write+0xf8>
 784:	cbz	w1, 7c4 <sha256_write+0x6c>
 788:	cbz	x2, 850 <sha256_write+0xf8>
 78c:	sxtw	x0, w1
 790:	add	x1, x19, #0x24
 794:	b	7b0 <sha256_write+0x58>
 798:	str	w2, [x19, #100]
 79c:	subs	x21, x21, #0x1
 7a0:	ldrb	w3, [x20], #1
 7a4:	strb	w3, [x1, x0]
 7a8:	add	x0, x0, #0x1
 7ac:	b.eq	8c4 <sha256_write+0x16c>  // b.none
 7b0:	add	w2, w0, #0x1
 7b4:	cmp	w0, #0x3f
 7b8:	b.le	798 <sha256_write+0x40>
 7bc:	cmp	w0, #0x40
 7c0:	b.eq	888 <sha256_write+0x130>  // b.none
 7c4:	mov	x22, x20
 7c8:	cmp	x21, #0x3f
 7cc:	b.ls	80c <sha256_write+0xb4>  // b.plast
 7d0:	sub	x22, x21, #0x40
 7d4:	and	x22, x22, #0xffffffffffffffc0
 7d8:	add	x22, x22, #0x40
 7dc:	add	x22, x20, x22
 7e0:	mov	x1, x20
 7e4:	mov	x0, x19
 7e8:	bl	b0 <transform>
 7ec:	str	wzr, [x19, #100]
 7f0:	ldr	w0, [x19, #32]
 7f4:	add	x20, x20, #0x40
 7f8:	cmp	x20, x22
 7fc:	add	w0, w0, #0x1
 800:	str	w0, [x19, #32]
 804:	b.ne	7e0 <sha256_write+0x88>  // b.any
 808:	and	x21, x21, #0x3f
 80c:	mov	w0, #0x148                 	// #328
 810:	bl	0 <_gcry_burn_stack>
 814:	cbz	x21, 850 <sha256_write+0xf8>
 818:	ldrsw	x1, [x19, #100]
 81c:	add	x2, x19, #0x24
 820:	sub	x22, x22, x1
 824:	add	x21, x21, x1
 828:	b	844 <sha256_write+0xec>
 82c:	str	w0, [x19, #100]
 830:	ldrb	w0, [x22, x1]
 834:	strb	w0, [x2, x1]
 838:	add	x1, x1, #0x1
 83c:	cmp	x1, x21
 840:	b.eq	850 <sha256_write+0xf8>  // b.none
 844:	add	w0, w1, #0x1
 848:	cmp	w1, #0x3f
 84c:	b.le	82c <sha256_write+0xd4>
 850:	ldp	x19, x20, [sp, #16]
 854:	ldp	x21, x22, [sp, #32]
 858:	ldp	x29, x30, [sp], #48
 85c:	ret
 860:	add	x1, x0, #0x24
 864:	bl	b0 <transform>
 868:	mov	w0, #0x148                 	// #328
 86c:	bl	0 <_gcry_burn_stack>
 870:	str	wzr, [x19, #100]
 874:	ldr	w0, [x19, #32]
 878:	add	w0, w0, #0x1
 87c:	str	w0, [x19, #32]
 880:	cbnz	x20, 7c4 <sha256_write+0x6c>
 884:	b	850 <sha256_write+0xf8>
 888:	add	x1, x19, #0x24
 88c:	mov	x0, x19
 890:	bl	b0 <transform>
 894:	mov	w0, #0x148                 	// #328
 898:	bl	0 <_gcry_burn_stack>
 89c:	str	wzr, [x19, #100]
 8a0:	ldr	w0, [x19, #32]
 8a4:	cmp	x21, #0x3f
 8a8:	add	w0, w0, #0x1
 8ac:	str	w0, [x19, #32]
 8b0:	b.hi	7d0 <sha256_write+0x78>  // b.pmore
 8b4:	mov	x22, x20
 8b8:	mov	w0, #0x148                 	// #328
 8bc:	bl	0 <_gcry_burn_stack>
 8c0:	b	818 <sha256_write+0xc0>
 8c4:	cmp	w2, #0x40
 8c8:	b.ne	850 <sha256_write+0xf8>  // b.any
 8cc:	mov	x0, x19
 8d0:	bl	b0 <transform>
 8d4:	mov	w0, #0x148                 	// #328
 8d8:	bl	0 <_gcry_burn_stack>
 8dc:	ldr	w0, [x19, #32]
 8e0:	str	wzr, [x19, #100]
 8e4:	add	w0, w0, #0x1
 8e8:	str	w0, [x19, #32]
 8ec:	b	850 <sha256_write+0xf8>

00000000000008f0 <sha256_final>:
 8f0:	stp	x29, x30, [sp, #-48]!
 8f4:	mov	x29, sp
 8f8:	ldr	w1, [x0, #100]
 8fc:	stp	x19, x20, [sp, #16]
 900:	mov	x19, x0
 904:	add	x20, x0, #0x24
 908:	stp	x21, x22, [sp, #32]
 90c:	cmp	w1, #0x40
 910:	b.eq	d08 <sha256_final+0x418>  // b.none
 914:	ldr	w2, [x0, #32]
 918:	add	w3, w1, #0x1
 91c:	lsl	w0, w2, #6
 920:	adds	w0, w1, w0
 924:	cset	w4, cs  // cs = hs, nlast
 928:	cmp	w1, #0x37
 92c:	add	w2, w4, w2, lsr #26
 930:	lsl	w22, w0, #3
 934:	extr	w21, w2, w0, #29
 938:	b.le	a94 <sha256_final+0x1a4>
 93c:	add	x0, x19, w1, sxtw
 940:	str	w3, [x19, #100]
 944:	mov	w2, #0xffffff80            	// #-128
 948:	cmp	w3, #0x3f
 94c:	strb	w2, [x0, #36]
 950:	b.gt	a88 <sha256_final+0x198>
 954:	add	x3, x19, w3, sxtw
 958:	cmp	w1, #0x3e
 95c:	add	w0, w1, #0x2
 960:	strb	wzr, [x3, #36]
 964:	b.eq	9d4 <sha256_final+0xe4>  // b.none
 968:	add	x0, x19, w0, sxtw
 96c:	cmp	w1, #0x3d
 970:	add	w2, w1, #0x3
 974:	strb	wzr, [x0, #36]
 978:	b.eq	9d4 <sha256_final+0xe4>  // b.none
 97c:	add	x2, x19, w2, sxtw
 980:	cmp	w1, #0x3c
 984:	add	w0, w1, #0x4
 988:	strb	wzr, [x2, #36]
 98c:	b.eq	9d4 <sha256_final+0xe4>  // b.none
 990:	add	x0, x19, w0, sxtw
 994:	cmp	w1, #0x3b
 998:	add	w2, w1, #0x5
 99c:	strb	wzr, [x0, #36]
 9a0:	b.eq	9d4 <sha256_final+0xe4>  // b.none
 9a4:	add	x2, x19, w2, sxtw
 9a8:	cmp	w1, #0x3a
 9ac:	add	w0, w1, #0x6
 9b0:	strb	wzr, [x2, #36]
 9b4:	b.eq	9d4 <sha256_final+0xe4>  // b.none
 9b8:	add	x0, x19, w0, sxtw
 9bc:	cmp	w1, #0x39
 9c0:	add	w1, w1, #0x7
 9c4:	strb	wzr, [x0, #36]
 9c8:	b.eq	9d4 <sha256_final+0xe4>  // b.none
 9cc:	add	x1, x19, w1, sxtw
 9d0:	strb	wzr, [x1, #36]
 9d4:	mov	w0, #0x40                  	// #64
 9d8:	str	w0, [x19, #100]
 9dc:	mov	x1, x20
 9e0:	mov	x0, x19
 9e4:	bl	b0 <transform>
 9e8:	mov	w0, #0x148                 	// #328
 9ec:	bl	0 <_gcry_burn_stack>
 9f0:	str	wzr, [x19, #100]
 9f4:	ldr	w0, [x19, #32]
 9f8:	add	w0, w0, #0x1
 9fc:	str	w0, [x19, #32]
 a00:	mov	x0, x20
 a04:	mov	x2, #0x38                  	// #56
 a08:	mov	w1, #0x0                   	// #0
 a0c:	bl	0 <grub_memset>
 a10:	rev	w2, w22
 a14:	mov	x1, x20
 a18:	rev16	w0, w21
 a1c:	strh	wzr, [x19, #92]
 a20:	strh	w0, [x19, #94]
 a24:	mov	x0, x19
 a28:	str	w2, [x19, #96]
 a2c:	bl	b0 <transform>
 a30:	mov	w0, #0x148                 	// #328
 a34:	bl	0 <_gcry_burn_stack>
 a38:	ldp	w7, w6, [x19]
 a3c:	ldp	w5, w4, [x19, #8]
 a40:	rev	w7, w7
 a44:	ldp	w3, w2, [x19, #16]
 a48:	rev	w6, w6
 a4c:	ldp	w1, w0, [x19, #24]
 a50:	rev	w5, w5
 a54:	rev	w4, w4
 a58:	rev	w3, w3
 a5c:	rev	w2, w2
 a60:	rev	w1, w1
 a64:	rev	w0, w0
 a68:	stp	w7, w6, [x19, #36]
 a6c:	stp	w5, w4, [x19, #44]
 a70:	stp	w3, w2, [x19, #52]
 a74:	stp	w1, w0, [x19, #60]
 a78:	ldp	x19, x20, [sp, #16]
 a7c:	ldp	x21, x22, [sp, #32]
 a80:	ldp	x29, x30, [sp], #48
 a84:	ret
 a88:	cmp	w3, #0x40
 a8c:	b.ne	a00 <sha256_final+0x110>  // b.any
 a90:	b	9dc <sha256_final+0xec>
 a94:	sxtw	x5, w1
 a98:	str	w3, [x19, #100]
 a9c:	add	x0, x19, x5
 aa0:	mov	w2, #0xffffff80            	// #-128
 aa4:	cmp	w3, #0x37
 aa8:	strb	w2, [x0, #36]
 aac:	b.gt	a10 <sha256_final+0x120>
 ab0:	add	x6, x5, #0x25
 ab4:	mov	w7, #0xb                   	// #11
 ab8:	add	x2, x19, x6
 abc:	mov	w5, #0x36                  	// #54
 ac0:	neg	x2, x2
 ac4:	sub	w5, w5, w1
 ac8:	and	w2, w2, #0x7
 acc:	mov	w4, #0x37                  	// #55
 ad0:	add	w0, w2, #0x7
 ad4:	sub	w4, w4, w1
 ad8:	cmp	w0, w7
 adc:	csel	w0, w0, w7, cs  // cs = hs, nlast
 ae0:	cmp	w5, w0
 ae4:	b.cc	d64 <sha256_final+0x474>  // b.lo, b.ul, b.last
 ae8:	cbz	w2, d5c <sha256_final+0x46c>
 aec:	add	x5, x19, w3, sxtw
 af0:	cmp	w2, #0x1
 af4:	add	w0, w3, #0x1
 af8:	strb	wzr, [x5, #36]
 afc:	b.eq	b70 <sha256_final+0x280>  // b.none
 b00:	add	x5, x19, w0, sxtw
 b04:	cmp	w2, #0x2
 b08:	add	w0, w3, #0x2
 b0c:	strb	wzr, [x5, #36]
 b10:	b.eq	b70 <sha256_final+0x280>  // b.none
 b14:	add	x5, x19, w0, sxtw
 b18:	cmp	w2, #0x3
 b1c:	add	w0, w3, #0x3
 b20:	strb	wzr, [x5, #36]
 b24:	b.eq	b70 <sha256_final+0x280>  // b.none
 b28:	add	x5, x19, w0, sxtw
 b2c:	cmp	w2, #0x4
 b30:	add	w0, w3, #0x4
 b34:	strb	wzr, [x5, #36]
 b38:	b.eq	b70 <sha256_final+0x280>  // b.none
 b3c:	add	x5, x19, w0, sxtw
 b40:	cmp	w2, #0x5
 b44:	add	w0, w3, #0x5
 b48:	strb	wzr, [x5, #36]
 b4c:	b.eq	b70 <sha256_final+0x280>  // b.none
 b50:	add	x5, x19, w0, sxtw
 b54:	cmp	w2, #0x7
 b58:	add	w0, w3, #0x6
 b5c:	strb	wzr, [x5, #36]
 b60:	b.ne	b70 <sha256_final+0x280>  // b.any
 b64:	add	x5, x19, w0, sxtw
 b68:	add	w0, w3, #0x7
 b6c:	strb	wzr, [x5, #36]
 b70:	mov	w5, w2
 b74:	sub	w2, w4, w2
 b78:	add	x5, x5, x6
 b7c:	lsr	w4, w2, #3
 b80:	add	x6, x19, x5
 b84:	cmp	w4, #0x1
 b88:	str	xzr, [x19, x5]
 b8c:	b.eq	bdc <sha256_final+0x2ec>  // b.none
 b90:	str	xzr, [x6, #8]
 b94:	cmp	w4, #0x2
 b98:	b.eq	bdc <sha256_final+0x2ec>  // b.none
 b9c:	str	xzr, [x6, #16]
 ba0:	cmp	w4, #0x3
 ba4:	b.eq	bdc <sha256_final+0x2ec>  // b.none
 ba8:	str	xzr, [x6, #24]
 bac:	cmp	w4, #0x4
 bb0:	b.eq	bdc <sha256_final+0x2ec>  // b.none
 bb4:	str	xzr, [x6, #32]
 bb8:	cmp	w4, #0x5
 bbc:	b.eq	bdc <sha256_final+0x2ec>  // b.none
 bc0:	str	xzr, [x6, #40]
 bc4:	cmp	w4, #0x6
 bc8:	b.eq	bdc <sha256_final+0x2ec>  // b.none
 bcc:	str	xzr, [x6, #48]
 bd0:	cmp	w4, #0x7
 bd4:	b.eq	bdc <sha256_final+0x2ec>  // b.none
 bd8:	str	xzr, [x6, #56]
 bdc:	and	w4, w2, #0xfffffff8
 be0:	add	w0, w4, w0
 be4:	cmp	w4, w2
 be8:	b.eq	cf8 <sha256_final+0x408>  // b.none
 bec:	add	x2, x19, w0, sxtw
 bf0:	cmp	w0, #0x37
 bf4:	add	w4, w0, #0x1
 bf8:	strb	wzr, [x2, #36]
 bfc:	b.eq	cf8 <sha256_final+0x408>  // b.none
 c00:	add	x4, x19, w4, sxtw
 c04:	cmp	w0, #0x36
 c08:	add	w2, w0, #0x2
 c0c:	strb	wzr, [x4, #36]
 c10:	b.eq	cf8 <sha256_final+0x408>  // b.none
 c14:	add	x2, x19, w2, sxtw
 c18:	cmp	w0, #0x35
 c1c:	add	w4, w0, #0x3
 c20:	strb	wzr, [x2, #36]
 c24:	b.eq	cf8 <sha256_final+0x408>  // b.none
 c28:	add	x4, x19, w4, sxtw
 c2c:	cmp	w0, #0x34
 c30:	add	w2, w0, #0x4
 c34:	strb	wzr, [x4, #36]
 c38:	b.eq	cf8 <sha256_final+0x408>  // b.none
 c3c:	add	x2, x19, w2, sxtw
 c40:	cmp	w0, #0x33
 c44:	add	w4, w0, #0x5
 c48:	strb	wzr, [x2, #36]
 c4c:	b.eq	cf8 <sha256_final+0x408>  // b.none
 c50:	add	x4, x19, w4, sxtw
 c54:	cmp	w0, #0x32
 c58:	add	w2, w0, #0x6
 c5c:	strb	wzr, [x4, #36]
 c60:	b.eq	cf8 <sha256_final+0x408>  // b.none
 c64:	add	x2, x19, w2, sxtw
 c68:	cmp	w0, #0x31
 c6c:	add	w4, w0, #0x7
 c70:	strb	wzr, [x2, #36]
 c74:	b.eq	cf8 <sha256_final+0x408>  // b.none
 c78:	add	x4, x19, w4, sxtw
 c7c:	cmp	w0, #0x30
 c80:	add	w2, w0, #0x8
 c84:	strb	wzr, [x4, #36]
 c88:	b.eq	cf8 <sha256_final+0x408>  // b.none
 c8c:	add	x2, x19, w2, sxtw
 c90:	cmp	w0, #0x2f
 c94:	add	w4, w0, #0x9
 c98:	strb	wzr, [x2, #36]
 c9c:	b.eq	cf8 <sha256_final+0x408>  // b.none
 ca0:	add	x4, x19, w4, sxtw
 ca4:	cmp	w0, #0x2e
 ca8:	add	w2, w0, #0xa
 cac:	strb	wzr, [x4, #36]
 cb0:	b.eq	cf8 <sha256_final+0x408>  // b.none
 cb4:	add	x2, x19, w2, sxtw
 cb8:	cmp	w0, #0x2d
 cbc:	add	w4, w0, #0xb
 cc0:	strb	wzr, [x2, #36]
 cc4:	b.eq	cf8 <sha256_final+0x408>  // b.none
 cc8:	add	x4, x19, w4, sxtw
 ccc:	cmp	w0, #0x2c
 cd0:	add	w2, w0, #0xc
 cd4:	strb	wzr, [x4, #36]
 cd8:	b.eq	cf8 <sha256_final+0x408>  // b.none
 cdc:	add	x2, x19, w2, sxtw
 ce0:	cmp	w0, #0x2b
 ce4:	add	w0, w0, #0xd
 ce8:	strb	wzr, [x2, #36]
 cec:	b.eq	cf8 <sha256_final+0x408>  // b.none
 cf0:	add	x0, x19, w0, sxtw
 cf4:	strb	wzr, [x0, #36]
 cf8:	sub	w1, w3, w1
 cfc:	add	w1, w1, #0x37
 d00:	str	w1, [x19, #100]
 d04:	b	a10 <sha256_final+0x120>
 d08:	mov	x1, x20
 d0c:	bl	b0 <transform>
 d10:	mov	w0, #0x148                 	// #328
 d14:	bl	0 <_gcry_burn_stack>
 d18:	ldr	w0, [x19, #32]
 d1c:	mov	w5, #0x1                   	// #1
 d20:	add	x2, x19, #0x25
 d24:	mov	w7, #0xffffff80            	// #-128
 d28:	add	w0, w0, w5
 d2c:	neg	x2, x2
 d30:	and	w2, w2, #0x7
 d34:	mov	w3, w5
 d38:	lsl	w22, w0, #9
 d3c:	lsr	w21, w0, #23
 d40:	mov	w4, #0x37                  	// #55
 d44:	mov	w1, #0x0                   	// #0
 d48:	mov	x6, #0x25                  	// #37
 d4c:	str	w0, [x19, #32]
 d50:	strb	w7, [x19, #36]
 d54:	str	w5, [x19, #100]
 d58:	b	ae8 <sha256_final+0x1f8>
 d5c:	mov	w0, w3
 d60:	b	b70 <sha256_final+0x280>
 d64:	mov	w0, w3
 d68:	b	bec <sha256_final+0x2fc>
 d6c:	nop

0000000000000d70 <grub_mod_init>:
 d70:	stp	x29, x30, [sp, #-32]!
 d74:	adrp	x0, 0 <sha256_init>
 d78:	mov	x29, sp
 d7c:	str	x19, [sp, #16]
 d80:	ldr	x19, [x0]
 d84:	mov	x0, x19
 d88:	bl	0 <grub_md_register>
 d8c:	add	x0, x19, #0x60
 d90:	ldr	x19, [sp, #16]
 d94:	ldp	x29, x30, [sp], #32
 d98:	b	0 <grub_md_register>
 d9c:	nop
	...

0000000000000da8 <grub_mod_fini>:
 da8:	stp	x29, x30, [sp, #-32]!
 dac:	adrp	x0, 0 <sha256_init>
 db0:	mov	x29, sp
 db4:	str	x19, [sp, #16]
 db8:	ldr	x19, [x0]
 dbc:	mov	x0, x19
 dc0:	bl	0 <grub_md_unregister>
 dc4:	add	x0, x19, #0x60
 dc8:	ldr	x19, [sp, #16]
 dcc:	ldp	x29, x30, [sp], #32
 dd0:	b	0 <grub_md_unregister>
 dd4:	nop
	...
