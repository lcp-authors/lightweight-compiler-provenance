In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libgcc_eh.a_gcc_-Os:

unwind-dw2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <read_uleb128>:
       0:	mov	x2, #0x0                   	// #0
       4:	mov	w3, #0x0                   	// #0
       8:	ldrb	w5, [x0], #1
       c:	and	x4, x5, #0x7f
      10:	lsl	x4, x4, x3
      14:	add	w3, w3, #0x7
      18:	orr	x2, x2, x4
      1c:	tbnz	w5, #7, 8 <read_uleb128+0x8>
      20:	str	x2, [x1]
      24:	ret

0000000000000028 <read_sleb128>:
      28:	mov	x2, #0x0                   	// #0
      2c:	mov	w3, #0x0                   	// #0
      30:	ldrb	w4, [x0], #1
      34:	and	x5, x4, #0x7f
      38:	lsl	x5, x5, x3
      3c:	add	w3, w3, #0x7
      40:	orr	x2, x2, x5
      44:	tbnz	w4, #7, 30 <read_sleb128+0x8>
      48:	cmp	w3, #0x3f
      4c:	b.hi	60 <read_sleb128+0x38>  // b.pmore
      50:	tbz	w4, #6, 60 <read_sleb128+0x38>
      54:	mov	x4, #0xffffffffffffffff    	// #-1
      58:	lsl	x3, x4, x3
      5c:	orr	x2, x2, x3
      60:	str	x2, [x1]
      64:	ret

0000000000000068 <_Unwind_GetGRPtr>:
      68:	ldr	x2, [x0, #832]
      6c:	sxtw	x1, w1
      70:	tbz	x2, #62, 88 <_Unwind_GetGRPtr+0x20>
      74:	add	x2, x0, x1
      78:	ldrb	w2, [x2, #856]
      7c:	cbz	w2, 88 <_Unwind_GetGRPtr+0x20>
      80:	add	x0, x0, x1, lsl #3
      84:	ret
      88:	ldr	x0, [x0, x1, lsl #3]
      8c:	b	84 <_Unwind_GetGRPtr+0x1c>

0000000000000090 <read_encoded_value>:
      90:	stp	x29, x30, [sp, #-32]!
      94:	and	w8, w1, #0xff
      98:	cmp	w8, #0xff
      9c:	mov	x29, sp
      a0:	b.eq	d0 <read_encoded_value+0x40>  // b.none
      a4:	and	w9, w8, #0x70
      a8:	mov	x6, x2
      ac:	mov	x10, x3
      b0:	cmp	w9, #0x30
      b4:	b.eq	110 <read_encoded_value+0x80>  // b.none
      b8:	b.hi	d4 <read_encoded_value+0x44>  // b.pmore
      bc:	cmp	w9, #0x20
      c0:	b.eq	108 <read_encoded_value+0x78>  // b.none
      c4:	b.hi	d0 <read_encoded_value+0x40>  // b.pmore
      c8:	tst	w8, #0x60
      cc:	b.eq	120 <read_encoded_value+0x90>  // b.none
      d0:	bl	0 <abort>
      d4:	cmp	w9, #0x40
      d8:	b.eq	118 <read_encoded_value+0x88>  // b.none
      dc:	cmp	w9, #0x50
      e0:	mov	x7, #0x0                   	// #0
      e4:	b.ne	d0 <read_encoded_value+0x40>  // b.any
      e8:	cmp	w8, #0x50
      ec:	b.ne	128 <read_encoded_value+0x98>  // b.any
      f0:	add	x0, x6, #0x7
      f4:	and	x0, x0, #0xfffffffffffffff8
      f8:	ldr	x1, [x0], #8
      fc:	str	x1, [x10]
     100:	ldp	x29, x30, [sp], #32
     104:	ret
     108:	ldr	x7, [x0, #808]
     10c:	b	e8 <read_encoded_value+0x58>
     110:	ldr	x7, [x0, #816]
     114:	b	e8 <read_encoded_value+0x58>
     118:	ldr	x7, [x0, #824]
     11c:	b	e8 <read_encoded_value+0x58>
     120:	mov	x7, #0x0                   	// #0
     124:	b	e8 <read_encoded_value+0x58>
     128:	and	w1, w8, #0xf
     12c:	cmp	w1, #0xc
     130:	b.hi	d0 <read_encoded_value+0x40>  // b.pmore
     134:	adrp	x0, 0 <read_uleb128>
     138:	add	x0, x0, #0x0
     13c:	ldrb	w0, [x0, w1, uxtw]
     140:	adr	x1, 14c <read_encoded_value+0xbc>
     144:	add	x0, x1, w0, sxtb #2
     148:	br	x0
     14c:	add	x1, sp, #0x18
     150:	mov	x0, x6
     154:	bl	0 <read_uleb128>
     158:	ldr	x1, [sp, #24]
     15c:	cbz	x1, fc <read_encoded_value+0x6c>
     160:	cmp	w9, #0x10
     164:	csel	x7, x6, x7, eq  // eq = none
     168:	add	x1, x1, x7
     16c:	tbz	w8, #7, fc <read_encoded_value+0x6c>
     170:	ldr	x1, [x1]
     174:	b	fc <read_encoded_value+0x6c>
     178:	add	x1, sp, #0x18
     17c:	mov	x0, x6
     180:	bl	28 <read_sleb128>
     184:	b	158 <read_encoded_value+0xc8>
     188:	mov	x0, x6
     18c:	ldrh	w1, [x0], #2
     190:	b	15c <read_encoded_value+0xcc>
     194:	mov	x0, x6
     198:	ldr	w1, [x0], #4
     19c:	b	15c <read_encoded_value+0xcc>
     1a0:	mov	x0, x6
     1a4:	ldrsh	x1, [x0], #2
     1a8:	b	15c <read_encoded_value+0xcc>
     1ac:	mov	x0, x6
     1b0:	ldrsw	x1, [x0], #4
     1b4:	b	15c <read_encoded_value+0xcc>
     1b8:	mov	x0, x6
     1bc:	ldr	x1, [x0], #8
     1c0:	b	15c <read_encoded_value+0xcc>

00000000000001c4 <execute_cfa_program>:
     1c4:	stp	x29, x30, [sp, #-128]!
     1c8:	mov	x29, sp
     1cc:	stp	x19, x20, [sp, #16]
     1d0:	mov	x20, x3
     1d4:	stp	x21, x22, [sp, #32]
     1d8:	add	x22, x29, #0x68
     1dc:	add	x21, x29, #0x70
     1e0:	stp	x23, x24, [sp, #48]
     1e4:	mov	x23, x2
     1e8:	mov	x24, #0x0                   	// #0
     1ec:	stp	x25, x26, [sp, #64]
     1f0:	mov	x26, x1
     1f4:	add	x25, x29, #0x78
     1f8:	stp	x27, x28, [sp, #80]
     1fc:	adrp	x27, 0 <read_uleb128>
     200:	add	x27, x27, #0x0
     204:	str	xzr, [x3, #1568]
     208:	cmp	x0, x26
     20c:	b.cs	228 <execute_cfa_program+0x64>  // b.hs, b.nlast
     210:	ldr	x3, [x23, #792]
     214:	ldr	x2, [x23, #832]
     218:	ldr	x1, [x20, #1608]
     21c:	add	x2, x3, x2, lsr #63
     220:	cmp	x1, x2
     224:	b.cc	248 <execute_cfa_program+0x84>  // b.lo, b.ul, b.last
     228:	mov	sp, x29
     22c:	ldp	x19, x20, [sp, #16]
     230:	ldp	x21, x22, [sp, #32]
     234:	ldp	x23, x24, [sp, #48]
     238:	ldp	x25, x26, [sp, #64]
     23c:	ldp	x27, x28, [sp, #80]
     240:	ldp	x29, x30, [sp], #128
     244:	ret
     248:	mov	x19, x0
     24c:	ldrb	w3, [x19], #1
     250:	and	w2, w3, #0xc0
     254:	cmp	w2, #0x40
     258:	b.ne	274 <execute_cfa_program+0xb0>  // b.any
     25c:	ldr	x0, [x20, #1632]
     260:	and	x3, x3, #0x3f
     264:	madd	x3, x3, x0, x1
     268:	str	x3, [x20, #1608]
     26c:	mov	x0, x19
     270:	b	208 <execute_cfa_program+0x44>
     274:	cmp	w2, #0x80
     278:	b.ne	2c4 <execute_cfa_program+0x100>  // b.any
     27c:	mov	x1, x21
     280:	mov	x0, x19
     284:	and	x3, x3, #0x3f
     288:	str	x3, [x29, #104]
     28c:	bl	0 <read_uleb128>
     290:	mov	x19, x0
     294:	ldr	x0, [x29, #112]
     298:	ldr	x1, [x20, #1624]
     29c:	mul	x1, x1, x0
     2a0:	ldr	x0, [x29, #104]
     2a4:	cmp	x0, #0x61
     2a8:	b.hi	26c <execute_cfa_program+0xa8>  // b.pmore
     2ac:	lsl	x2, x0, #4
     2b0:	add	x0, x20, x0, lsl #4
     2b4:	mov	w3, #0x1                   	// #1
     2b8:	str	w3, [x0, #8]
     2bc:	str	x1, [x20, x2]
     2c0:	b	26c <execute_cfa_program+0xa8>
     2c4:	cmp	w2, #0xc0
     2c8:	b.ne	2dc <execute_cfa_program+0x118>  // b.any
     2cc:	ubfiz	x3, x3, #4, #6
     2d0:	add	x3, x20, x3
     2d4:	str	wzr, [x3, #8]
     2d8:	b	26c <execute_cfa_program+0xa8>
     2dc:	cmp	w3, #0x2f
     2e0:	b.hi	698 <execute_cfa_program+0x4d4>  // b.pmore
     2e4:	ldrh	w2, [x27, w3, uxtw #1]
     2e8:	adr	x3, 2f4 <execute_cfa_program+0x130>
     2ec:	add	x2, x3, w2, sxth #2
     2f0:	br	x2
     2f4:	ldrb	w1, [x20, #1648]
     2f8:	mov	x2, x19
     2fc:	mov	x3, x25
     300:	mov	x0, x23
     304:	bl	90 <read_encoded_value>
     308:	mov	x19, x0
     30c:	ldr	x0, [x29, #120]
     310:	str	x0, [x20, #1608]
     314:	b	26c <execute_cfa_program+0xa8>
     318:	ldrb	w3, [x0, #1]
     31c:	add	x19, x0, #0x2
     320:	ldr	x2, [x20, #1632]
     324:	madd	x3, x3, x2, x1
     328:	str	x3, [x20, #1608]
     32c:	b	26c <execute_cfa_program+0xa8>
     330:	ldurh	w3, [x0, #1]
     334:	add	x19, x0, #0x3
     338:	ldr	x2, [x20, #1632]
     33c:	madd	x3, x3, x2, x1
     340:	str	x3, [x20, #1608]
     344:	b	26c <execute_cfa_program+0xa8>
     348:	ldur	w3, [x0, #1]
     34c:	add	x19, x0, #0x5
     350:	ldr	x2, [x20, #1632]
     354:	madd	x3, x3, x2, x1
     358:	str	x3, [x20, #1608]
     35c:	b	26c <execute_cfa_program+0xa8>
     360:	mov	x1, x22
     364:	mov	x0, x19
     368:	bl	0 <read_uleb128>
     36c:	mov	x1, x21
     370:	b	28c <execute_cfa_program+0xc8>
     374:	mov	x0, x19
     378:	mov	x1, x22
     37c:	bl	0 <read_uleb128>
     380:	mov	x19, x0
     384:	ldr	x0, [x29, #104]
     388:	cmp	x0, #0x61
     38c:	b.hi	26c <execute_cfa_program+0xa8>  // b.pmore
     390:	add	x0, x20, x0, lsl #4
     394:	str	wzr, [x0, #8]
     398:	b	26c <execute_cfa_program+0xa8>
     39c:	mov	x0, x19
     3a0:	mov	x1, x22
     3a4:	bl	0 <read_uleb128>
     3a8:	mov	x19, x0
     3ac:	ldr	x0, [x29, #104]
     3b0:	cmp	x0, #0x61
     3b4:	b.hi	26c <execute_cfa_program+0xa8>  // b.pmore
     3b8:	add	x0, x20, x0, lsl #4
     3bc:	mov	w1, #0x6                   	// #6
     3c0:	str	w1, [x0, #8]
     3c4:	b	26c <execute_cfa_program+0xa8>
     3c8:	mov	x1, x22
     3cc:	mov	x0, x19
     3d0:	bl	0 <read_uleb128>
     3d4:	mov	x1, x25
     3d8:	bl	0 <read_uleb128>
     3dc:	mov	x19, x0
     3e0:	ldr	x0, [x29, #104]
     3e4:	cmp	x0, #0x61
     3e8:	b.hi	26c <execute_cfa_program+0xa8>  // b.pmore
     3ec:	lsl	x1, x0, #4
     3f0:	add	x0, x20, x0, lsl #4
     3f4:	mov	w2, #0x2                   	// #2
     3f8:	str	w2, [x0, #8]
     3fc:	ldr	x0, [x29, #120]
     400:	str	x0, [x20, x1]
     404:	b	26c <execute_cfa_program+0xa8>
     408:	cbz	x24, 42c <execute_cfa_program+0x268>
     40c:	mov	x3, x24
     410:	ldr	x24, [x24, #1568]
     414:	mov	x1, x20
     418:	mov	x0, x3
     41c:	mov	x2, #0x648                 	// #1608
     420:	bl	0 <memcpy>
     424:	str	x0, [x20, #1568]
     428:	b	26c <execute_cfa_program+0xa8>
     42c:	sub	sp, sp, #0x650
     430:	mov	x3, sp
     434:	b	414 <execute_cfa_program+0x250>
     438:	ldr	x28, [x20, #1568]
     43c:	mov	x0, x20
     440:	mov	x2, #0x648                 	// #1608
     444:	mov	x1, x28
     448:	bl	0 <memcpy>
     44c:	str	x24, [x28, #1568]
     450:	mov	x24, x28
     454:	b	26c <execute_cfa_program+0xa8>
     458:	mov	x1, x21
     45c:	mov	x0, x19
     460:	bl	0 <read_uleb128>
     464:	ldr	x1, [x29, #112]
     468:	str	x1, [x20, #1584]
     46c:	mov	x1, x21
     470:	bl	0 <read_uleb128>
     474:	mov	x19, x0
     478:	ldr	x0, [x29, #112]
     47c:	str	x0, [x20, #1576]
     480:	mov	w0, #0x1                   	// #1
     484:	str	w0, [x20, #1600]
     488:	b	26c <execute_cfa_program+0xa8>
     48c:	mov	x0, x19
     490:	mov	x1, x21
     494:	bl	0 <read_uleb128>
     498:	mov	x19, x0
     49c:	ldr	x0, [x29, #112]
     4a0:	str	x0, [x20, #1584]
     4a4:	b	480 <execute_cfa_program+0x2bc>
     4a8:	mov	x0, x19
     4ac:	mov	x1, x21
     4b0:	bl	0 <read_uleb128>
     4b4:	mov	x19, x0
     4b8:	ldr	x0, [x29, #112]
     4bc:	str	x0, [x20, #1576]
     4c0:	b	26c <execute_cfa_program+0xa8>
     4c4:	mov	w0, #0x2                   	// #2
     4c8:	mov	x1, x21
     4cc:	str	w0, [x20, #1600]
     4d0:	mov	x0, x19
     4d4:	str	x19, [x20, #1592]
     4d8:	bl	0 <read_uleb128>
     4dc:	ldr	x1, [x29, #112]
     4e0:	add	x19, x0, x1
     4e4:	b	26c <execute_cfa_program+0xa8>
     4e8:	mov	x1, x22
     4ec:	mov	x0, x19
     4f0:	bl	0 <read_uleb128>
     4f4:	ldr	x1, [x29, #104]
     4f8:	cmp	x1, #0x61
     4fc:	b.hi	514 <execute_cfa_program+0x350>  // b.pmore
     500:	lsl	x2, x1, #4
     504:	add	x1, x20, x1, lsl #4
     508:	mov	w3, #0x3                   	// #3
     50c:	str	w3, [x1, #8]
     510:	str	x0, [x20, x2]
     514:	mov	x1, x21
     518:	b	4d8 <execute_cfa_program+0x314>
     51c:	mov	x1, x22
     520:	mov	x0, x19
     524:	bl	0 <read_uleb128>
     528:	mov	x1, x25
     52c:	bl	28 <read_sleb128>
     530:	mov	x19, x0
     534:	ldr	x0, [x29, #120]
     538:	ldr	x1, [x20, #1624]
     53c:	b	29c <execute_cfa_program+0xd8>
     540:	mov	x1, x21
     544:	mov	x0, x19
     548:	bl	0 <read_uleb128>
     54c:	ldr	x1, [x29, #112]
     550:	str	x1, [x20, #1584]
     554:	mov	x1, x25
     558:	bl	28 <read_sleb128>
     55c:	mov	x19, x0
     560:	mov	w0, #0x1                   	// #1
     564:	str	w0, [x20, #1600]
     568:	ldr	x1, [x29, #120]
     56c:	ldr	x0, [x20, #1624]
     570:	mul	x0, x0, x1
     574:	b	4bc <execute_cfa_program+0x2f8>
     578:	mov	x1, x25
     57c:	mov	x0, x19
     580:	bl	28 <read_sleb128>
     584:	mov	x19, x0
     588:	ldr	x0, [x29, #120]
     58c:	ldr	x1, [x20, #1624]
     590:	b	570 <execute_cfa_program+0x3ac>
     594:	mov	x1, x22
     598:	mov	x0, x19
     59c:	bl	0 <read_uleb128>
     5a0:	mov	x1, x21
     5a4:	bl	0 <read_uleb128>
     5a8:	mov	x19, x0
     5ac:	ldr	x0, [x29, #112]
     5b0:	ldr	x1, [x20, #1624]
     5b4:	mul	x1, x1, x0
     5b8:	ldr	x0, [x29, #104]
     5bc:	cmp	x0, #0x61
     5c0:	b.hi	26c <execute_cfa_program+0xa8>  // b.pmore
     5c4:	lsl	x2, x0, #4
     5c8:	mov	w3, #0x4                   	// #4
     5cc:	add	x0, x20, x0, lsl #4
     5d0:	b	2b8 <execute_cfa_program+0xf4>
     5d4:	mov	x1, x22
     5d8:	mov	x0, x19
     5dc:	bl	0 <read_uleb128>
     5e0:	mov	x1, x25
     5e4:	bl	28 <read_sleb128>
     5e8:	mov	x19, x0
     5ec:	ldr	x0, [x29, #120]
     5f0:	ldr	x1, [x20, #1624]
     5f4:	b	5b4 <execute_cfa_program+0x3f0>
     5f8:	mov	x1, x22
     5fc:	mov	x0, x19
     600:	bl	0 <read_uleb128>
     604:	ldr	x1, [x29, #104]
     608:	cmp	x1, #0x61
     60c:	b.hi	514 <execute_cfa_program+0x350>  // b.pmore
     610:	lsl	x2, x1, #4
     614:	mov	w3, #0x5                   	// #5
     618:	add	x1, x20, x1, lsl #4
     61c:	b	50c <execute_cfa_program+0x348>
     620:	ldr	x0, [x20, #544]
     624:	eor	x0, x0, #0x1
     628:	str	x0, [x20, #544]
     62c:	b	26c <execute_cfa_program+0xa8>
     630:	mov	x0, x19
     634:	mov	x1, x21
     638:	bl	0 <read_uleb128>
     63c:	mov	x19, x0
     640:	ldr	x0, [x29, #112]
     644:	str	x0, [x23, #848]
     648:	b	26c <execute_cfa_program+0xa8>
     64c:	mov	x1, x22
     650:	mov	x0, x19
     654:	bl	0 <read_uleb128>
     658:	mov	x1, x21
     65c:	bl	0 <read_uleb128>
     660:	mov	x19, x0
     664:	ldr	x1, [x29, #112]
     668:	ldr	x0, [x20, #1624]
     66c:	mul	x0, x0, x1
     670:	ldr	x1, [x29, #104]
     674:	cmp	x1, #0x61
     678:	b.hi	26c <execute_cfa_program+0xa8>  // b.pmore
     67c:	lsl	x2, x1, #4
     680:	add	x1, x20, x1, lsl #4
     684:	mov	w3, #0x1                   	// #1
     688:	neg	x0, x0
     68c:	str	w3, [x1, #8]
     690:	str	x0, [x20, x2]
     694:	b	26c <execute_cfa_program+0xa8>
     698:	bl	0 <abort>

000000000000069c <uw_frame_state_for>:
     69c:	stp	x29, x30, [sp, #-112]!
     6a0:	mov	x2, #0x680                 	// #1664
     6a4:	mov	x29, sp
     6a8:	stp	x19, x20, [sp, #16]
     6ac:	mov	x19, x0
     6b0:	stp	x21, x22, [sp, #32]
     6b4:	mov	x22, x1
     6b8:	mov	x0, x22
     6bc:	mov	w1, #0x0                   	// #0
     6c0:	stp	x23, x24, [sp, #48]
     6c4:	stp	x25, x26, [sp, #64]
     6c8:	bl	0 <memset>
     6cc:	ldr	x2, [x19, #792]
     6d0:	str	xzr, [x19, #800]
     6d4:	str	xzr, [x19, #848]
     6d8:	cbnz	x2, 6f8 <uw_frame_state_for+0x5c>
     6dc:	mov	w0, #0x5                   	// #5
     6e0:	ldp	x19, x20, [sp, #16]
     6e4:	ldp	x21, x22, [sp, #32]
     6e8:	ldp	x23, x24, [sp, #48]
     6ec:	ldp	x25, x26, [sp, #64]
     6f0:	ldp	x29, x30, [sp], #112
     6f4:	ret
     6f8:	ldr	d0, [x19, #832]
     6fc:	add	x1, x19, #0x328
     700:	cmge	d0, d0, #0
     704:	fmov	x0, d0
     708:	add	x0, x2, x0
     70c:	bl	0 <_Unwind_Find_FDE>
     710:	mov	x21, x0
     714:	cbnz	x0, 810 <uw_frame_state_for+0x174>
     718:	ldr	x0, [x19, #792]
     71c:	mov	w1, #0x1168                	// #4456
     720:	movk	w1, #0xd280, lsl #16
     724:	ldr	w2, [x0]
     728:	cmp	w2, w1
     72c:	b.ne	6dc <uw_frame_state_for+0x40>  // b.any
     730:	ldr	w1, [x0, #4]
     734:	mov	w0, #0x1                   	// #1
     738:	movk	w0, #0xd400, lsl #16
     73c:	cmp	w1, w0
     740:	b.ne	6dc <uw_frame_state_for+0x40>  // b.any
     744:	ldr	x1, [x19, #784]
     748:	mov	x0, #0x1f                  	// #31
     74c:	mov	x4, x22
     750:	str	x0, [x22, #1584]
     754:	add	x3, x1, #0x130
     758:	mov	x0, #0x130                 	// #304
     75c:	mov	w2, #0x1                   	// #1
     760:	str	x0, [x22, #1576]
     764:	mov	x0, #0x8                   	// #8
     768:	str	w2, [x22, #1600]
     76c:	str	w2, [x4, #8]
     770:	str	x0, [x4], #16
     774:	add	x0, x0, #0x8
     778:	cmp	x0, #0x100
     77c:	b.ne	76c <uw_frame_state_for+0xd0>  // b.any
     780:	mov	w6, #0x8001                	// #32769
     784:	mov	x4, #0xfffffffffffffee0    	// #-288
     788:	add	x2, x1, #0x250
     78c:	sub	x4, x4, x1
     790:	add	x7, x22, #0x600
     794:	movk	w6, #0x4650, lsl #16
     798:	mov	w8, #0x1                   	// #1
     79c:	ldr	w0, [x2]
     7a0:	cbnz	w0, 7dc <uw_frame_state_for+0x140>
     7a4:	add	x1, x1, #0x230
     7a8:	mov	w2, #0x1                   	// #1
     7ac:	sub	x1, x1, x3
     7b0:	strb	w2, [x22, #1651]
     7b4:	str	x1, [x22, #496]
     7b8:	mov	w1, #0x4                   	// #4
     7bc:	str	w1, [x22, #1544]
     7c0:	ldr	x1, [x3, #264]
     7c4:	str	w2, [x22, #504]
     7c8:	sub	x1, x1, x3
     7cc:	str	x1, [x22, #1536]
     7d0:	mov	x1, #0x60                  	// #96
     7d4:	str	x1, [x22, #1640]
     7d8:	b	6e0 <uw_frame_state_for+0x44>
     7dc:	cmp	w0, w6
     7e0:	b.eq	7f0 <uw_frame_state_for+0x154>  // b.none
     7e4:	ldr	w0, [x2, #4]
     7e8:	add	x2, x2, x0
     7ec:	b	79c <uw_frame_state_for+0x100>
     7f0:	add	x0, x22, #0x400
     7f4:	add	x5, x2, x4
     7f8:	str	w8, [x0, #8]
     7fc:	str	x5, [x0], #16
     800:	add	x5, x5, #0x10
     804:	cmp	x7, x0
     808:	b.ne	7f8 <uw_frame_state_for+0x15c>  // b.any
     80c:	b	7e4 <uw_frame_state_for+0x148>
     810:	add	x20, x0, #0x4
     814:	ldr	x0, [x19, #824]
     818:	str	x0, [x22, #1608]
     81c:	ldrsw	x0, [x21, #4]
     820:	sub	x20, x20, x0
     824:	add	x23, x20, #0x9
     828:	mov	x0, x23
     82c:	bl	0 <strlen>
     830:	ldrb	w1, [x20, #9]
     834:	add	x0, x0, #0x1
     838:	add	x0, x23, x0
     83c:	cmp	w1, #0x65
     840:	b.ne	85c <uw_frame_state_for+0x1c0>  // b.any
     844:	ldrb	w1, [x20, #10]
     848:	cmp	w1, #0x68
     84c:	b.ne	85c <uw_frame_state_for+0x1c0>  // b.any
     850:	add	x23, x20, #0xb
     854:	ldr	x1, [x0], #8
     858:	str	x1, [x22, #1656]
     85c:	ldrb	w1, [x20, #8]
     860:	cmp	w1, #0x3
     864:	b.ls	888 <uw_frame_state_for+0x1ec>  // b.plast
     868:	ldrb	w1, [x0]
     86c:	cmp	w1, #0x8
     870:	b.eq	87c <uw_frame_state_for+0x1e0>  // b.none
     874:	mov	w0, #0x3                   	// #3
     878:	b	6e0 <uw_frame_state_for+0x44>
     87c:	ldrb	w1, [x0, #1]
     880:	cbnz	w1, 874 <uw_frame_state_for+0x1d8>
     884:	add	x0, x0, #0x2
     888:	add	x6, sp, #0x58
     88c:	mov	x1, x6
     890:	bl	0 <read_uleb128>
     894:	ldr	x1, [sp, #88]
     898:	str	x1, [x22, #1632]
     89c:	add	x1, sp, #0x60
     8a0:	bl	28 <read_sleb128>
     8a4:	ldr	x1, [sp, #96]
     8a8:	str	x1, [x22, #1624]
     8ac:	ldrb	w1, [x20, #8]
     8b0:	cmp	w1, #0x1
     8b4:	b.ne	954 <uw_frame_state_for+0x2b8>  // b.any
     8b8:	ldrb	w1, [x0], #1
     8bc:	str	x1, [x22, #1640]
     8c0:	mov	w1, #0xffffffff            	// #-1
     8c4:	strb	w1, [x22, #1649]
     8c8:	ldrb	w1, [x23]
     8cc:	cmp	w1, #0x7a
     8d0:	b.ne	9c8 <uw_frame_state_for+0x32c>  // b.any
     8d4:	mov	x1, x6
     8d8:	bl	0 <read_uleb128>
     8dc:	ldr	x24, [sp, #88]
     8e0:	add	x23, x23, #0x1
     8e4:	mov	w1, #0x1                   	// #1
     8e8:	strb	w1, [x22, #1650]
     8ec:	add	x24, x0, x24
     8f0:	add	x23, x23, #0x1
     8f4:	add	x26, sp, #0x68
     8f8:	mov	w25, #0x1                   	// #1
     8fc:	ldurb	w1, [x23, #-1]
     900:	cbnz	w1, 964 <uw_frame_state_for+0x2c8>
     904:	cbnz	x24, a70 <uw_frame_state_for+0x3d4>
     908:	cbz	x0, 874 <uw_frame_state_for+0x1d8>
     90c:	ldr	w1, [x20]
     910:	mov	x3, x22
     914:	mov	x2, x19
     918:	add	x1, x1, #0x4
     91c:	add	x1, x20, x1
     920:	bl	1c4 <execute_cfa_program>
     924:	ldrb	w0, [x22, #1648]
     928:	cmp	w0, #0xff
     92c:	b.eq	a58 <uw_frame_state_for+0x3bc>  // b.none
     930:	and	w0, w0, #0x7
     934:	cmp	w0, #0x4
     938:	b.hi	a54 <uw_frame_state_for+0x3b8>  // b.pmore
     93c:	adrp	x1, 0 <read_uleb128>
     940:	add	x1, x1, #0x0
     944:	ldrb	w0, [x1, w0, uxtw]
     948:	adr	x1, 954 <uw_frame_state_for+0x2b8>
     94c:	add	x0, x1, w0, sxtb #2
     950:	br	x0
     954:	mov	x1, x6
     958:	bl	0 <read_uleb128>
     95c:	ldr	x1, [sp, #88]
     960:	b	8bc <uw_frame_state_for+0x220>
     964:	cmp	w1, #0x4c
     968:	b.ne	97c <uw_frame_state_for+0x2e0>  // b.any
     96c:	ldrb	w1, [x0], #1
     970:	strb	w1, [x22, #1649]
     974:	add	x23, x23, #0x1
     978:	b	8fc <uw_frame_state_for+0x260>
     97c:	cmp	w1, #0x52
     980:	b.ne	990 <uw_frame_state_for+0x2f4>  // b.any
     984:	ldrb	w1, [x0], #1
     988:	strb	w1, [x22, #1648]
     98c:	b	974 <uw_frame_state_for+0x2d8>
     990:	cmp	w1, #0x50
     994:	b.ne	9b8 <uw_frame_state_for+0x31c>  // b.any
     998:	ldrb	w1, [x0]
     99c:	add	x2, x0, #0x1
     9a0:	mov	x3, x26
     9a4:	mov	x0, x19
     9a8:	bl	90 <read_encoded_value>
     9ac:	ldr	x1, [sp, #104]
     9b0:	str	x1, [x22, #1616]
     9b4:	b	974 <uw_frame_state_for+0x2d8>
     9b8:	cmp	w1, #0x53
     9bc:	b.ne	9d0 <uw_frame_state_for+0x334>  // b.any
     9c0:	strb	w25, [x22, #1651]
     9c4:	b	974 <uw_frame_state_for+0x2d8>
     9c8:	mov	x24, #0x0                   	// #0
     9cc:	b	8f0 <uw_frame_state_for+0x254>
     9d0:	mov	x0, x24
     9d4:	b	908 <uw_frame_state_for+0x26c>
     9d8:	mov	w0, #0x2                   	// #2
     9dc:	ldrb	w1, [x22, #1650]
     9e0:	lsl	w0, w0, #1
     9e4:	add	x0, x0, #0x8
     9e8:	add	x0, x21, x0
     9ec:	cbz	w1, a68 <uw_frame_state_for+0x3cc>
     9f0:	add	x1, sp, #0x68
     9f4:	bl	0 <read_uleb128>
     9f8:	ldr	x20, [sp, #104]
     9fc:	add	x20, x0, x20
     a00:	ldrb	w1, [x22, #1649]
     a04:	cmp	w1, #0xff
     a08:	b.eq	a24 <uw_frame_state_for+0x388>  // b.none
     a0c:	mov	x2, x0
     a10:	add	x3, sp, #0x68
     a14:	mov	x0, x19
     a18:	bl	90 <read_encoded_value>
     a1c:	ldr	x1, [sp, #104]
     a20:	str	x1, [x19, #800]
     a24:	ldr	w1, [x21]
     a28:	cmp	x20, #0x0
     a2c:	csel	x0, x20, x0, ne  // ne = any
     a30:	mov	x3, x22
     a34:	add	x1, x1, #0x4
     a38:	mov	x2, x19
     a3c:	add	x1, x21, x1
     a40:	bl	1c4 <execute_cfa_program>
     a44:	mov	w0, #0x0                   	// #0
     a48:	b	6e0 <uw_frame_state_for+0x44>
     a4c:	mov	w0, #0x4                   	// #4
     a50:	b	9dc <uw_frame_state_for+0x340>
     a54:	bl	0 <abort>
     a58:	mov	w0, #0x0                   	// #0
     a5c:	b	9dc <uw_frame_state_for+0x340>
     a60:	mov	w0, #0x8                   	// #8
     a64:	b	9dc <uw_frame_state_for+0x340>
     a68:	mov	x20, #0x0                   	// #0
     a6c:	b	a00 <uw_frame_state_for+0x364>
     a70:	mov	x0, x24
     a74:	b	90c <uw_frame_state_for+0x270>

0000000000000a78 <init_dwarf_reg_size_table>:
     a78:	adrp	x2, 0 <read_uleb128>
     a7c:	add	x1, x2, #0x0
     a80:	mov	w0, #0x8                   	// #8
     a84:	strb	w0, [x2]
     a88:	strb	w0, [x1, #1]
     a8c:	strb	w0, [x1, #2]
     a90:	strb	w0, [x1, #3]
     a94:	strb	w0, [x1, #4]
     a98:	strb	w0, [x1, #5]
     a9c:	strb	w0, [x1, #6]
     aa0:	strb	w0, [x1, #7]
     aa4:	strb	w0, [x1, #8]
     aa8:	strb	w0, [x1, #9]
     aac:	strb	w0, [x1, #10]
     ab0:	strb	w0, [x1, #11]
     ab4:	strb	w0, [x1, #12]
     ab8:	strb	w0, [x1, #13]
     abc:	strb	w0, [x1, #14]
     ac0:	strb	w0, [x1, #15]
     ac4:	strb	w0, [x1, #16]
     ac8:	strb	w0, [x1, #17]
     acc:	strb	w0, [x1, #18]
     ad0:	strb	w0, [x1, #19]
     ad4:	strb	w0, [x1, #20]
     ad8:	strb	w0, [x1, #21]
     adc:	strb	w0, [x1, #22]
     ae0:	strb	w0, [x1, #23]
     ae4:	strb	w0, [x1, #24]
     ae8:	strb	w0, [x1, #25]
     aec:	strb	w0, [x1, #26]
     af0:	strb	w0, [x1, #27]
     af4:	strb	w0, [x1, #28]
     af8:	strb	w0, [x1, #29]
     afc:	strb	w0, [x1, #30]
     b00:	strb	w0, [x1, #31]
     b04:	strb	w0, [x1, #64]
     b08:	strb	w0, [x1, #46]
     b0c:	strb	w0, [x1, #65]
     b10:	strb	w0, [x1, #66]
     b14:	strb	w0, [x1, #67]
     b18:	strb	w0, [x1, #68]
     b1c:	strb	w0, [x1, #69]
     b20:	strb	w0, [x1, #70]
     b24:	strb	w0, [x1, #71]
     b28:	strb	w0, [x1, #72]
     b2c:	strb	w0, [x1, #73]
     b30:	strb	w0, [x1, #74]
     b34:	strb	w0, [x1, #75]
     b38:	strb	w0, [x1, #76]
     b3c:	strb	w0, [x1, #77]
     b40:	strb	w0, [x1, #78]
     b44:	strb	w0, [x1, #79]
     b48:	strb	w0, [x1, #80]
     b4c:	strb	w0, [x1, #81]
     b50:	strb	w0, [x1, #82]
     b54:	strb	w0, [x1, #83]
     b58:	strb	w0, [x1, #84]
     b5c:	strb	w0, [x1, #85]
     b60:	strb	w0, [x1, #86]
     b64:	strb	w0, [x1, #87]
     b68:	strb	w0, [x1, #88]
     b6c:	strb	w0, [x1, #89]
     b70:	strb	w0, [x1, #90]
     b74:	strb	w0, [x1, #91]
     b78:	strb	w0, [x1, #92]
     b7c:	strb	w0, [x1, #93]
     b80:	strb	w0, [x1, #94]
     b84:	strb	w0, [x1, #95]
     b88:	strb	w0, [x1, #48]
     b8c:	strb	w0, [x1, #49]
     b90:	strb	w0, [x1, #50]
     b94:	strb	w0, [x1, #51]
     b98:	strb	w0, [x1, #52]
     b9c:	strb	w0, [x1, #53]
     ba0:	strb	w0, [x1, #54]
     ba4:	strb	w0, [x1, #55]
     ba8:	strb	w0, [x1, #56]
     bac:	strb	w0, [x1, #57]
     bb0:	strb	w0, [x1, #58]
     bb4:	strb	w0, [x1, #59]
     bb8:	strb	w0, [x1, #60]
     bbc:	strb	w0, [x1, #61]
     bc0:	strb	w0, [x1, #62]
     bc4:	strb	w0, [x1, #63]
     bc8:	strb	w0, [x1, #96]
     bcc:	ret

0000000000000bd0 <_Unwind_SetSpColumn>:
     bd0:	adrp	x3, 0 <read_uleb128>
     bd4:	ldrb	w3, [x3]
     bd8:	cmp	w3, #0x8
     bdc:	b.ne	bf8 <_Unwind_SetSpColumn+0x28>  // b.any
     be0:	str	x1, [x2]
     be4:	ldr	x1, [x0, #832]
     be8:	tbz	x1, #62, bf0 <_Unwind_SetSpColumn+0x20>
     bec:	strb	wzr, [x0, #887]
     bf0:	str	x2, [x0, #248]
     bf4:	ret
     bf8:	stp	x29, x30, [sp, #-16]!
     bfc:	mov	x29, sp
     c00:	bl	0 <abort>

0000000000000c04 <_Unwind_GetGR>:
     c04:	cmp	w1, #0x61
     c08:	b.le	c18 <_Unwind_GetGR+0x14>
     c0c:	stp	x29, x30, [sp, #-16]!
     c10:	mov	x29, sp
     c14:	bl	0 <abort>
     c18:	mov	x2, x0
     c1c:	sxtw	x3, w1
     c20:	ldr	x4, [x2, #832]
     c24:	ldr	x0, [x0, x3, lsl #3]
     c28:	tbz	x4, #62, c38 <_Unwind_GetGR+0x34>
     c2c:	add	x2, x2, x3
     c30:	ldrb	w2, [x2, #856]
     c34:	cbnz	w2, c64 <_Unwind_GetGR+0x60>
     c38:	cmp	w1, #0x2e
     c3c:	b.ne	c4c <_Unwind_GetGR+0x48>  // b.any
     c40:	cntd	x0
     c44:	sxtw	x0, w0
     c48:	ret
     c4c:	adrp	x1, 0 <read_uleb128>
     c50:	add	x1, x1, #0x0
     c54:	ldrb	w1, [x1, x3]
     c58:	cmp	w1, #0x8
     c5c:	b.ne	c0c <_Unwind_GetGR+0x8>  // b.any
     c60:	ldr	x0, [x0]
     c64:	ret

0000000000000c68 <uw_install_context_1>:
     c68:	stp	x29, x30, [sp, #-80]!
     c6c:	mov	x29, sp
     c70:	stp	x19, x20, [sp, #16]
     c74:	mov	x19, x1
     c78:	mov	w1, #0x1f                  	// #31
     c7c:	stp	x21, x22, [sp, #32]
     c80:	mov	x21, x0
     c84:	mov	x0, x19
     c88:	stp	x23, x24, [sp, #48]
     c8c:	bl	68 <_Unwind_GetGRPtr>
     c90:	cbnz	x0, ca4 <uw_install_context_1+0x3c>
     c94:	ldr	x1, [x19, #784]
     c98:	add	x2, sp, #0x48
     c9c:	mov	x0, x19
     ca0:	bl	bd0 <_Unwind_SetSpColumn>
     ca4:	adrp	x22, 0 <read_uleb128>
     ca8:	add	x23, x21, #0x358
     cac:	add	x22, x22, #0x0
     cb0:	add	x24, x19, #0x358
     cb4:	mov	x20, #0x0                   	// #0
     cb8:	ldrb	w2, [x23, x20]
     cbc:	ldr	x0, [x21, x20, lsl #3]
     cc0:	ldr	x1, [x19, x20, lsl #3]
     cc4:	cbz	w2, ccc <uw_install_context_1+0x64>
     cc8:	bl	0 <abort>
     ccc:	ldrb	w2, [x24, x20]
     cd0:	cbz	w2, d40 <uw_install_context_1+0xd8>
     cd4:	cbz	x0, ce8 <uw_install_context_1+0x80>
     cd8:	ldrb	w2, [x22]
     cdc:	cmp	w2, #0x8
     ce0:	b.ne	cc8 <uw_install_context_1+0x60>  // b.any
     ce4:	str	x1, [x0]
     ce8:	add	x20, x20, #0x1
     cec:	add	x22, x22, #0x1
     cf0:	cmp	x20, #0x61
     cf4:	b.ne	cb8 <uw_install_context_1+0x50>  // b.any
     cf8:	mov	w1, #0x1f                  	// #31
     cfc:	mov	x0, x21
     d00:	bl	68 <_Unwind_GetGRPtr>
     d04:	mov	x1, #0x0                   	// #0
     d08:	cbnz	x0, d28 <uw_install_context_1+0xc0>
     d0c:	mov	w1, #0x1f                  	// #31
     d10:	mov	x0, x19
     d14:	bl	c04 <_Unwind_GetGR>
     d18:	ldr	x1, [x21, #784]
     d1c:	sub	x1, x0, x1
     d20:	ldr	x0, [x19, #848]
     d24:	add	x1, x1, x0
     d28:	mov	x0, x1
     d2c:	ldp	x19, x20, [sp, #16]
     d30:	ldp	x21, x22, [sp, #32]
     d34:	ldp	x23, x24, [sp, #48]
     d38:	ldp	x29, x30, [sp], #80
     d3c:	ret
     d40:	cmp	x1, #0x0
     d44:	ccmp	x0, #0x0, #0x4, ne  // ne = any
     d48:	b.eq	ce8 <uw_install_context_1+0x80>  // b.none
     d4c:	cmp	x0, x1
     d50:	b.eq	ce8 <uw_install_context_1+0x80>  // b.none
     d54:	ldrb	w2, [x22]
     d58:	bl	0 <memcpy>
     d5c:	b	ce8 <uw_install_context_1+0x80>

0000000000000d60 <execute_stack_op>:
     d60:	sub	sp, sp, #0x270
     d64:	stp	x29, x30, [sp]
     d68:	mov	x29, sp
     d6c:	stp	x19, x20, [sp, #16]
     d70:	mov	x20, x1
     d74:	mov	x19, x2
     d78:	stp	x21, x22, [sp, #32]
     d7c:	adrp	x21, 0 <read_uleb128>
     d80:	adrp	x22, 0 <read_uleb128>
     d84:	add	x21, x21, #0x0
     d88:	add	x22, x22, #0x0
     d8c:	str	x25, [sp, #64]
     d90:	add	x25, sp, #0x70
     d94:	stp	x23, x24, [sp, #48]
     d98:	mov	w23, #0x1                   	// #1
     d9c:	str	x3, [sp, #112]
     da0:	cmp	x0, x20
     da4:	b.cc	dd4 <execute_stack_op+0x74>  // b.lo, b.ul, b.last
     da8:	cbz	w23, dec <execute_stack_op+0x8c>
     dac:	sub	w23, w23, #0x1
     db0:	add	x0, sp, #0x70
     db4:	ldp	x29, x30, [sp]
     db8:	ldr	x0, [x0, w23, sxtw #3]
     dbc:	ldp	x19, x20, [sp, #16]
     dc0:	ldp	x21, x22, [sp, #32]
     dc4:	ldp	x23, x24, [sp, #48]
     dc8:	ldr	x25, [sp, #64]
     dcc:	add	sp, sp, #0x270
     dd0:	ret
     dd4:	mov	x24, x0
     dd8:	ldrb	w7, [x24], #1
     ddc:	cmp	w7, #0x4f
     de0:	b.hi	e38 <execute_stack_op+0xd8>  // b.pmore
     de4:	cmp	w7, #0x2
     de8:	b.hi	e14 <execute_stack_op+0xb4>  // b.pmore
     dec:	bl	0 <abort>
     df0:	sub	w2, w7, #0x90
     df4:	cmp	w2, #0x6
     df8:	b.hi	dec <execute_stack_op+0x8c>  // b.pmore
     dfc:	adrp	x1, 0 <read_uleb128>
     e00:	add	x1, x1, #0x0
     e04:	ldrh	w1, [x1, w2, uxtw #1]
     e08:	adr	x2, e14 <execute_stack_op+0xb4>
     e0c:	add	x1, x2, w1, sxth #2
     e10:	br	x1
     e14:	sub	w2, w7, #0x3
     e18:	cmp	w2, #0x4c
     e1c:	b.hi	dec <execute_stack_op+0x8c>  // b.pmore
     e20:	adrp	x1, 0 <read_uleb128>
     e24:	add	x1, x1, #0x0
     e28:	ldrh	w1, [x1, w2, uxtw #1]
     e2c:	adr	x2, e38 <execute_stack_op+0xd8>
     e30:	add	x1, x2, w1, sxth #2
     e34:	br	x1
     e38:	cmp	w7, #0x96
     e3c:	b.hi	e78 <execute_stack_op+0x118>  // b.pmore
     e40:	cmp	w7, #0x8f
     e44:	b.hi	df0 <execute_stack_op+0x90>  // b.pmore
     e48:	cmp	w7, #0x6f
     e4c:	b.ls	f28 <execute_stack_op+0x1c8>  // b.plast
     e50:	add	x1, sp, #0x60
     e54:	mov	x0, x24
     e58:	bl	28 <read_sleb128>
     e5c:	mov	x24, x0
     e60:	sub	w1, w7, #0x70
     e64:	mov	x0, x19
     e68:	bl	c04 <_Unwind_GetGR>
     e6c:	ldr	x6, [sp, #96]
     e70:	add	x6, x0, x6
     e74:	b	ea4 <execute_stack_op+0x144>
     e78:	cmp	w7, #0xf1
     e7c:	b.ne	dec <execute_stack_op+0x8c>  // b.any
     e80:	ldrb	w1, [x0, #1]
     e84:	add	x2, x0, #0x2
     e88:	add	x3, sp, #0x68
     e8c:	mov	x0, x19
     e90:	bl	90 <read_encoded_value>
     e94:	mov	x24, x0
     e98:	ldr	x6, [sp, #104]
     e9c:	b	ea4 <execute_stack_op+0x144>
     ea0:	sub	w6, w7, #0x30
     ea4:	cmp	w23, #0x3f
     ea8:	b.gt	dec <execute_stack_op+0x8c>
     eac:	str	x6, [x25, w23, sxtw #3]
     eb0:	add	w23, w23, #0x1
     eb4:	b	f8c <execute_stack_op+0x22c>
     eb8:	ldrb	w6, [x0, #1]
     ebc:	add	x24, x0, #0x2
     ec0:	b	ea4 <execute_stack_op+0x144>
     ec4:	ldrsb	x6, [x0, #1]
     ec8:	b	ebc <execute_stack_op+0x15c>
     ecc:	ldurh	w6, [x0, #1]
     ed0:	add	x24, x0, #0x3
     ed4:	b	ea4 <execute_stack_op+0x144>
     ed8:	ldursh	x6, [x0, #1]
     edc:	b	ed0 <execute_stack_op+0x170>
     ee0:	ldur	w6, [x0, #1]
     ee4:	add	x24, x0, #0x5
     ee8:	b	ea4 <execute_stack_op+0x144>
     eec:	ldursw	x6, [x0, #1]
     ef0:	b	ee4 <execute_stack_op+0x184>
     ef4:	add	x24, x0, #0x9
     ef8:	ldur	x6, [x0, #1]
     efc:	b	ea4 <execute_stack_op+0x144>
     f00:	mov	x0, x24
     f04:	add	x1, sp, #0x58
     f08:	bl	0 <read_uleb128>
     f0c:	mov	x24, x0
     f10:	ldr	x6, [sp, #88]
     f14:	b	ea4 <execute_stack_op+0x144>
     f18:	add	x1, sp, #0x68
     f1c:	mov	x0, x24
     f20:	bl	28 <read_sleb128>
     f24:	b	e94 <execute_stack_op+0x134>
     f28:	sub	w1, w7, #0x50
     f2c:	mov	x0, x19
     f30:	bl	c04 <_Unwind_GetGR>
     f34:	mov	x6, x0
     f38:	b	ea4 <execute_stack_op+0x144>
     f3c:	add	x1, sp, #0x50
     f40:	mov	x0, x24
     f44:	bl	0 <read_uleb128>
     f48:	mov	x24, x0
     f4c:	ldr	w1, [sp, #80]
     f50:	b	f2c <execute_stack_op+0x1cc>
     f54:	add	x1, sp, #0x50
     f58:	mov	x0, x24
     f5c:	bl	0 <read_uleb128>
     f60:	add	x1, sp, #0x60
     f64:	bl	28 <read_sleb128>
     f68:	ldr	w1, [sp, #80]
     f6c:	mov	x24, x0
     f70:	b	e64 <execute_stack_op+0x104>
     f74:	cbz	w23, dec <execute_stack_op+0x8c>
     f78:	sub	w0, w23, #0x1
     f7c:	ldr	x6, [x25, w0, sxtw #3]
     f80:	b	ea4 <execute_stack_op+0x144>
     f84:	cbz	w23, dec <execute_stack_op+0x8c>
     f88:	sub	w23, w23, #0x1
     f8c:	mov	x0, x24
     f90:	b	da0 <execute_stack_op+0x40>
     f94:	ldrb	w1, [x0, #1]
     f98:	sub	w2, w23, #0x1
     f9c:	str	x1, [sp, #96]
     fa0:	add	x24, x0, #0x2
     fa4:	sxtw	x0, w2
     fa8:	cmp	x1, w2, sxtw
     fac:	b.ge	dec <execute_stack_op+0x8c>  // b.tcont
     fb0:	sub	x0, x0, x1
     fb4:	ldr	x6, [x25, x0, lsl #3]
     fb8:	b	ea4 <execute_stack_op+0x144>
     fbc:	cmp	w23, #0x1
     fc0:	b.le	dec <execute_stack_op+0x8c>
     fc4:	sub	w0, w23, #0x2
     fc8:	b	f7c <execute_stack_op+0x21c>
     fcc:	cmp	w23, #0x1
     fd0:	b.le	dec <execute_stack_op+0x8c>
     fd4:	sub	w0, w23, #0x2
     fd8:	sub	w1, w23, #0x1
     fdc:	sbfiz	x0, x0, #3, #32
     fe0:	sbfiz	x1, x1, #3, #32
     fe4:	ldr	x3, [x25, x0]
     fe8:	ldr	x2, [x25, x1]
     fec:	str	x3, [x25, x1]
     ff0:	str	x2, [x25, x0]
     ff4:	b	f8c <execute_stack_op+0x22c>
     ff8:	cmp	w23, #0x2
     ffc:	b.le	dec <execute_stack_op+0x8c>
    1000:	sub	w1, w23, #0x2
    1004:	sub	w2, w23, #0x1
    1008:	sub	w0, w23, #0x3
    100c:	sbfiz	x1, x1, #3, #32
    1010:	sbfiz	x2, x2, #3, #32
    1014:	sbfiz	x0, x0, #3, #32
    1018:	ldr	x5, [x25, x1]
    101c:	ldr	x3, [x25, x2]
    1020:	ldr	x4, [x25, x0]
    1024:	str	x5, [x25, x2]
    1028:	str	x4, [x25, x1]
    102c:	str	x3, [x25, x0]
    1030:	b	f8c <execute_stack_op+0x22c>
    1034:	cbz	w23, dec <execute_stack_op+0x8c>
    1038:	sub	w23, w23, #0x1
    103c:	cmp	w7, #0x23
    1040:	ldr	x6, [x25, w23, sxtw #3]
    1044:	b.hi	107c <execute_stack_op+0x31c>  // b.pmore
    1048:	cmp	w7, #0x18
    104c:	b.hi	1060 <execute_stack_op+0x300>  // b.pmore
    1050:	cmp	w7, #0x6
    1054:	b.ne	dec <execute_stack_op+0x8c>  // b.any
    1058:	ldr	x6, [x6]
    105c:	b	ea4 <execute_stack_op+0x144>
    1060:	sub	w7, w7, #0x19
    1064:	cmp	w7, #0xa
    1068:	b.hi	dec <execute_stack_op+0x8c>  // b.pmore
    106c:	ldrh	w0, [x22, w7, uxtw #1]
    1070:	adr	x1, 107c <execute_stack_op+0x31c>
    1074:	add	x0, x1, w0, sxth #2
    1078:	br	x0
    107c:	cmp	w7, #0x94
    1080:	b.ne	dec <execute_stack_op+0x8c>  // b.any
    1084:	add	x24, x0, #0x2
    1088:	ldrb	w0, [x0, #1]
    108c:	sub	w0, w0, #0x1
    1090:	cmp	w0, #0x7
    1094:	b.hi	dec <execute_stack_op+0x8c>  // b.pmore
    1098:	ldrh	w0, [x21, w0, uxtw #1]
    109c:	adr	x1, 10a8 <execute_stack_op+0x348>
    10a0:	add	x0, x1, w0, sxth #2
    10a4:	br	x0
    10a8:	ldrb	w6, [x6]
    10ac:	b	ea4 <execute_stack_op+0x144>
    10b0:	ldrh	w6, [x6]
    10b4:	b	ea4 <execute_stack_op+0x144>
    10b8:	ldr	w6, [x6]
    10bc:	b	ea4 <execute_stack_op+0x144>
    10c0:	cmp	x6, #0x0
    10c4:	cneg	x6, x6, lt  // lt = tstop
    10c8:	b	ea4 <execute_stack_op+0x144>
    10cc:	neg	x6, x6
    10d0:	b	ea4 <execute_stack_op+0x144>
    10d4:	mvn	x6, x6
    10d8:	b	ea4 <execute_stack_op+0x144>
    10dc:	mov	x0, x24
    10e0:	add	x1, sp, #0x58
    10e4:	bl	0 <read_uleb128>
    10e8:	mov	x24, x0
    10ec:	ldr	x0, [sp, #88]
    10f0:	b	e70 <execute_stack_op+0x110>
    10f4:	cmp	w23, #0x1
    10f8:	b.le	dec <execute_stack_op+0x8c>
    10fc:	sub	w1, w23, #0x2
    1100:	sub	w23, w23, #0x1
    1104:	sub	w7, w7, #0x1a
    1108:	cmp	w7, #0x14
    110c:	ldr	x6, [x25, w1, sxtw #3]
    1110:	ldr	x0, [x25, w23, sxtw #3]
    1114:	b.hi	dec <execute_stack_op+0x8c>  // b.pmore
    1118:	adrp	x2, 0 <read_uleb128>
    111c:	add	x2, x2, #0x0
    1120:	ldrh	w2, [x2, w7, uxtw #1]
    1124:	adr	x3, 1130 <execute_stack_op+0x3d0>
    1128:	add	x2, x3, w2, sxth #2
    112c:	br	x2
    1130:	and	x6, x6, x0
    1134:	mov	w23, w1
    1138:	b	ea4 <execute_stack_op+0x144>
    113c:	sdiv	x6, x6, x0
    1140:	b	1134 <execute_stack_op+0x3d4>
    1144:	sub	x6, x6, x0
    1148:	b	1134 <execute_stack_op+0x3d4>
    114c:	udiv	x2, x6, x0
    1150:	msub	x6, x2, x0, x6
    1154:	b	1134 <execute_stack_op+0x3d4>
    1158:	mul	x6, x6, x0
    115c:	b	1134 <execute_stack_op+0x3d4>
    1160:	orr	x6, x6, x0
    1164:	b	1134 <execute_stack_op+0x3d4>
    1168:	add	x6, x6, x0
    116c:	b	1134 <execute_stack_op+0x3d4>
    1170:	lsl	x6, x6, x0
    1174:	b	1134 <execute_stack_op+0x3d4>
    1178:	lsr	x6, x6, x0
    117c:	b	1134 <execute_stack_op+0x3d4>
    1180:	asr	x6, x6, x0
    1184:	b	1134 <execute_stack_op+0x3d4>
    1188:	eor	x6, x6, x0
    118c:	b	1134 <execute_stack_op+0x3d4>
    1190:	cmp	x6, x0
    1194:	cset	x6, le
    1198:	b	1134 <execute_stack_op+0x3d4>
    119c:	cmp	x6, x0
    11a0:	cset	x6, ge  // ge = tcont
    11a4:	b	1134 <execute_stack_op+0x3d4>
    11a8:	cmp	x6, x0
    11ac:	cset	x6, eq  // eq = none
    11b0:	b	1134 <execute_stack_op+0x3d4>
    11b4:	cmp	x6, x0
    11b8:	cset	x6, lt  // lt = tstop
    11bc:	b	1134 <execute_stack_op+0x3d4>
    11c0:	cmp	x6, x0
    11c4:	cset	x6, gt
    11c8:	b	1134 <execute_stack_op+0x3d4>
    11cc:	cmp	x6, x0
    11d0:	cset	x6, ne  // ne = any
    11d4:	b	1134 <execute_stack_op+0x3d4>
    11d8:	add	x24, x0, #0x3
    11dc:	ldursh	x0, [x0, #1]
    11e0:	add	x24, x24, x0
    11e4:	b	f8c <execute_stack_op+0x22c>
    11e8:	cbz	w23, dec <execute_stack_op+0x8c>
    11ec:	sub	w23, w23, #0x1
    11f0:	add	x24, x0, #0x3
    11f4:	ldr	x1, [x25, w23, sxtw #3]
    11f8:	cbz	x1, f8c <execute_stack_op+0x22c>
    11fc:	b	11dc <execute_stack_op+0x47c>

0000000000001200 <uw_update_context_1>:
    1200:	sub	sp, sp, #0x440
    1204:	mov	x2, #0x3c0                 	// #960
    1208:	stp	x29, x30, [sp]
    120c:	mov	x29, sp
    1210:	stp	x23, x24, [sp, #48]
    1214:	add	x23, sp, #0x80
    1218:	stp	x19, x20, [sp, #16]
    121c:	mov	x19, x0
    1220:	stp	x21, x22, [sp, #32]
    1224:	mov	x21, x1
    1228:	mov	x1, x0
    122c:	mov	x0, x23
    1230:	stp	x25, x26, [sp, #64]
    1234:	stp	x27, x28, [sp, #80]
    1238:	bl	0 <memcpy>
    123c:	mov	x0, x23
    1240:	mov	w1, #0x1f                  	// #31
    1244:	bl	68 <_Unwind_GetGRPtr>
    1248:	cbnz	x0, 125c <uw_update_context_1+0x5c>
    124c:	ldr	x1, [x19, #784]
    1250:	add	x2, sp, #0x70
    1254:	mov	x0, x23
    1258:	bl	bd0 <_Unwind_SetSpColumn>
    125c:	ldr	x0, [x19, #832]
    1260:	tbz	x0, #62, 1268 <uw_update_context_1+0x68>
    1264:	strb	wzr, [x19, #887]
    1268:	ldr	w0, [x21, #1600]
    126c:	str	xzr, [x19, #248]
    1270:	cmp	w0, #0x1
    1274:	b.eq	1284 <uw_update_context_1+0x84>  // b.none
    1278:	cmp	w0, #0x2
    127c:	b.eq	12f0 <uw_update_context_1+0xf0>  // b.none
    1280:	bl	0 <abort>
    1284:	ldr	w1, [x21, #1584]
    1288:	mov	x0, x23
    128c:	bl	c04 <_Unwind_GetGR>
    1290:	ldr	x1, [x21, #1576]
    1294:	add	x20, x0, x1
    1298:	adrp	x25, 0 <read_uleb128>
    129c:	adrp	x24, 0 <read_uleb128>
    12a0:	add	x0, x25, #0x0
    12a4:	mov	x26, x21
    12a8:	add	x28, x19, #0x358
    12ac:	add	x24, x24, #0x0
    12b0:	add	x27, sp, #0x78
    12b4:	mov	x22, #0x0                   	// #0
    12b8:	mov	w25, #0x1                   	// #1
    12bc:	str	x0, [sp, #96]
    12c0:	add	x0, sp, #0x3d8
    12c4:	str	x0, [sp, #104]
    12c8:	str	x20, [x19, #784]
    12cc:	ldr	w0, [x26, #8]
    12d0:	sub	w0, w0, #0x1
    12d4:	cmp	w0, #0x4
    12d8:	b.hi	1330 <uw_update_context_1+0x130>  // b.pmore
    12dc:	ldr	x1, [sp, #96]
    12e0:	ldrb	w0, [x1, w0, uxtw]
    12e4:	adr	x1, 12f0 <uw_update_context_1+0xf0>
    12e8:	add	x0, x1, w0, sxtb #2
    12ec:	br	x0
    12f0:	ldr	x0, [x21, #1592]
    12f4:	add	x1, sp, #0x78
    12f8:	bl	0 <read_uleb128>
    12fc:	ldr	x1, [sp, #120]
    1300:	mov	x2, x23
    1304:	mov	x3, #0x0                   	// #0
    1308:	add	x1, x0, x1
    130c:	bl	d60 <execute_stack_op>
    1310:	mov	x20, x0
    1314:	b	1298 <uw_update_context_1+0x98>
    1318:	ldr	x0, [x26]
    131c:	add	x0, x20, x0
    1320:	ldr	x1, [x19, #832]
    1324:	tbz	x1, #62, 132c <uw_update_context_1+0x12c>
    1328:	strb	wzr, [x28]
    132c:	str	x0, [x19, x22, lsl #3]
    1330:	add	x22, x22, #0x1
    1334:	add	x26, x26, #0x10
    1338:	add	x28, x28, #0x1
    133c:	add	x24, x24, #0x1
    1340:	cmp	x22, #0x62
    1344:	b.ne	12cc <uw_update_context_1+0xcc>  // b.any
    1348:	ldr	x0, [x19, #832]
    134c:	ldrb	w2, [x21, #1651]
    1350:	orr	x1, x0, #0x8000000000000000
    1354:	and	x0, x0, #0x7fffffffffffffff
    1358:	cmp	w2, #0x0
    135c:	csel	x0, x0, x1, eq  // eq = none
    1360:	ldp	x29, x30, [sp]
    1364:	orr	x1, x0, #0x2000000000000000
    1368:	ldp	x23, x24, [sp, #48]
    136c:	ldp	x25, x26, [sp, #64]
    1370:	ldp	x27, x28, [sp, #80]
    1374:	str	x0, [x19, #832]
    1378:	ldr	x2, [x21, #544]
    137c:	ldp	x21, x22, [sp, #32]
    1380:	tst	x2, #0x1
    1384:	csel	x0, x1, x0, ne  // ne = any
    1388:	str	x0, [x19, #832]
    138c:	ldp	x19, x20, [sp, #16]
    1390:	add	sp, sp, #0x440
    1394:	ret
    1398:	ldr	x1, [x26]
    139c:	ldr	x0, [sp, #104]
    13a0:	ldrb	w0, [x0, w1, sxtw]
    13a4:	cbz	w0, 13c4 <uw_update_context_1+0x1c4>
    13a8:	mov	x0, x23
    13ac:	bl	c04 <_Unwind_GetGR>
    13b0:	ldrb	w1, [x24]
    13b4:	cmp	w1, #0x8
    13b8:	b.hi	1280 <uw_update_context_1+0x80>  // b.pmore
    13bc:	strb	w25, [x28]
    13c0:	b	132c <uw_update_context_1+0x12c>
    13c4:	mov	x0, x23
    13c8:	bl	68 <_Unwind_GetGRPtr>
    13cc:	b	1320 <uw_update_context_1+0x120>
    13d0:	ldr	x0, [x26]
    13d4:	mov	x1, x27
    13d8:	bl	0 <read_uleb128>
    13dc:	ldr	x1, [sp, #120]
    13e0:	mov	x3, x20
    13e4:	mov	x2, x23
    13e8:	add	x1, x0, x1
    13ec:	bl	d60 <execute_stack_op>
    13f0:	b	1320 <uw_update_context_1+0x120>
    13f4:	ldr	x0, [x26]
    13f8:	add	x0, x20, x0
    13fc:	b	13b0 <uw_update_context_1+0x1b0>
    1400:	ldr	x0, [x26]
    1404:	mov	x1, x27
    1408:	bl	0 <read_uleb128>
    140c:	ldr	x1, [sp, #120]
    1410:	mov	x3, x20
    1414:	mov	x2, x23
    1418:	add	x1, x0, x1
    141c:	bl	d60 <execute_stack_op>
    1420:	b	13b0 <uw_update_context_1+0x1b0>

0000000000001424 <uw_init_context_1>:
    1424:	sub	sp, sp, #0x6d0
    1428:	stp	x29, x30, [sp]
    142c:	mov	x29, sp
    1430:	xpaclri
    1434:	stp	x19, x20, [sp, #16]
    1438:	mov	x19, x0
    143c:	mov	x20, x2
    1440:	mov	x2, #0x3c0                 	// #960
    1444:	stp	x21, x22, [sp, #32]
    1448:	mov	x22, x30
    144c:	mov	x21, x1
    1450:	mov	w1, #0x0                   	// #0
    1454:	str	x23, [sp, #48]
    1458:	bl	0 <memset>
    145c:	mov	x0, #0x4000000000000000    	// #4611686018427387904
    1460:	str	x22, [x19, #792]
    1464:	str	x0, [x19, #832]
    1468:	add	x22, sp, #0x50
    146c:	mov	x1, x22
    1470:	mov	x0, x19
    1474:	bl	69c <uw_frame_state_for>
    1478:	cbz	w0, 1480 <uw_init_context_1+0x5c>
    147c:	bl	0 <abort>
    1480:	adrp	x0, 0 <__pthread_key_create>
    1484:	adrp	x23, 0 <read_uleb128>
    1488:	ldr	x0, [x0]
    148c:	cbnz	x0, 14a0 <uw_init_context_1+0x7c>
    1490:	ldrb	w0, [x23]
    1494:	cbnz	w0, 14b8 <uw_init_context_1+0x94>
    1498:	bl	a78 <init_dwarf_reg_size_table>
    149c:	b	14b8 <uw_init_context_1+0x94>
    14a0:	add	x0, x23, #0x0
    14a4:	adrp	x1, 0 <read_uleb128>
    14a8:	add	x0, x0, #0x64
    14ac:	add	x1, x1, #0x0
    14b0:	bl	0 <pthread_once>
    14b4:	cbnz	w0, 1490 <uw_init_context_1+0x6c>
    14b8:	add	x2, sp, #0x48
    14bc:	mov	x1, x21
    14c0:	mov	x0, x19
    14c4:	bl	bd0 <_Unwind_SetSpColumn>
    14c8:	mov	w0, #0x1                   	// #1
    14cc:	str	w0, [sp, #1680]
    14d0:	mov	x0, #0x1f                  	// #31
    14d4:	mov	x1, x22
    14d8:	str	xzr, [sp, #1656]
    14dc:	str	x0, [sp, #1664]
    14e0:	mov	x0, x19
    14e4:	bl	1200 <uw_update_context_1>
    14e8:	mov	x30, x20
    14ec:	xpaclri
    14f0:	ldp	x21, x22, [sp, #32]
    14f4:	ldr	x23, [sp, #48]
    14f8:	str	x30, [x19, #792]
    14fc:	ldp	x29, x30, [sp]
    1500:	ldp	x19, x20, [sp, #16]
    1504:	add	sp, sp, #0x6d0
    1508:	ret

000000000000150c <uw_update_context>:
    150c:	stp	x29, x30, [sp, #-32]!
    1510:	mov	x29, sp
    1514:	stp	x19, x20, [sp, #16]
    1518:	mov	x20, x1
    151c:	mov	x19, x0
    1520:	bl	1200 <uw_update_context_1>
    1524:	ldr	x1, [x20, #1640]
    1528:	add	x0, x20, x1, lsl #4
    152c:	ldr	w0, [x0, #8]
    1530:	cmp	w0, #0x6
    1534:	b.ne	1548 <uw_update_context+0x3c>  // b.any
    1538:	str	xzr, [x19, #792]
    153c:	ldp	x19, x20, [sp, #16]
    1540:	ldp	x29, x30, [sp], #32
    1544:	ret
    1548:	mov	x0, x19
    154c:	bl	c04 <_Unwind_GetGR>
    1550:	mov	x17, x0
    1554:	ldr	x0, [x20, #544]
    1558:	str	x17, [x19, #792]
    155c:	tbz	w0, #0, 1568 <uw_update_context+0x5c>
    1560:	ldr	x16, [x19, #784]
    1564:	autia1716
    1568:	str	x17, [x19, #792]
    156c:	b	153c <uw_update_context+0x30>

0000000000001570 <_Unwind_RaiseException_Phase2>:
    1570:	sub	sp, sp, #0x6c0
    1574:	stp	x29, x30, [sp]
    1578:	mov	x29, sp
    157c:	stp	x19, x20, [sp, #16]
    1580:	mov	x20, x0
    1584:	mov	x19, x1
    1588:	stp	x21, x22, [sp, #32]
    158c:	mov	x22, x2
    1590:	stp	x23, x24, [sp, #48]
    1594:	add	x24, sp, #0x40
    1598:	mov	x23, #0x1                   	// #1
    159c:	mov	x1, x24
    15a0:	mov	x0, x19
    15a4:	bl	69c <uw_frame_state_for>
    15a8:	ldr	x2, [x19, #784]
    15ac:	ldr	x1, [x19, #832]
    15b0:	sub	x1, x2, x1, lsr #63
    15b4:	ldr	x2, [x20, #24]
    15b8:	cmp	x2, x1
    15bc:	cset	w21, eq  // eq = none
    15c0:	lsl	w21, w21, #2
    15c4:	cbnz	w0, 1600 <_Unwind_RaiseException_Phase2+0x90>
    15c8:	ldr	x5, [sp, #1680]
    15cc:	cbnz	x5, 15d8 <_Unwind_RaiseException_Phase2+0x68>
    15d0:	cbz	w21, 161c <_Unwind_RaiseException_Phase2+0xac>
    15d4:	bl	0 <abort>
    15d8:	ldr	x2, [x20]
    15dc:	mov	x4, x19
    15e0:	mov	x3, x20
    15e4:	orr	w1, w21, #0x2
    15e8:	mov	w0, #0x1                   	// #1
    15ec:	blr	x5
    15f0:	cmp	w0, #0x7
    15f4:	b.eq	1630 <_Unwind_RaiseException_Phase2+0xc0>  // b.none
    15f8:	cmp	w0, #0x8
    15fc:	b.eq	15d0 <_Unwind_RaiseException_Phase2+0x60>  // b.none
    1600:	mov	w0, #0x2                   	// #2
    1604:	ldp	x29, x30, [sp]
    1608:	ldp	x19, x20, [sp, #16]
    160c:	ldp	x21, x22, [sp, #32]
    1610:	ldp	x23, x24, [sp, #48]
    1614:	add	sp, sp, #0x6c0
    1618:	ret
    161c:	mov	x1, x24
    1620:	mov	x0, x19
    1624:	add	x23, x23, #0x1
    1628:	bl	150c <uw_update_context>
    162c:	b	159c <_Unwind_RaiseException_Phase2+0x2c>
    1630:	str	x23, [x22]
    1634:	b	1604 <_Unwind_RaiseException_Phase2+0x94>

0000000000001638 <_Unwind_ForcedUnwind_Phase2>:
    1638:	sub	sp, sp, #0x6e0
    163c:	stp	x29, x30, [sp]
    1640:	mov	x29, sp
    1644:	stp	x23, x24, [sp, #48]
    1648:	ldp	x23, x24, [x0, #16]
    164c:	stp	x19, x20, [sp, #16]
    1650:	mov	x20, x2
    1654:	stp	x21, x22, [sp, #32]
    1658:	add	x22, sp, #0x60
    165c:	mov	x21, #0x1                   	// #1
    1660:	stp	x27, x28, [sp, #80]
    1664:	mov	x27, x0
    1668:	mov	x28, x1
    166c:	stp	x25, x26, [sp, #64]
    1670:	mov	w25, #0xa                   	// #10
    1674:	mov	w26, #0x1a                  	// #26
    1678:	mov	x1, x22
    167c:	mov	x0, x28
    1680:	bl	69c <uw_frame_state_for>
    1684:	cmp	w0, #0x0
    1688:	mov	w19, w0
    168c:	ccmp	w0, #0x5, #0x4, ne  // ne = any
    1690:	b.ne	1708 <_Unwind_ForcedUnwind_Phase2+0xd0>  // b.any
    1694:	ldr	x2, [x27]
    1698:	cmp	w0, #0x5
    169c:	mov	x5, x24
    16a0:	mov	x4, x28
    16a4:	mov	x3, x27
    16a8:	csel	w1, w25, w26, ne  // ne = any
    16ac:	mov	w0, #0x1                   	// #1
    16b0:	blr	x23
    16b4:	cbnz	w0, 1708 <_Unwind_ForcedUnwind_Phase2+0xd0>
    16b8:	cmp	w19, #0x5
    16bc:	b.eq	1730 <_Unwind_ForcedUnwind_Phase2+0xf8>  // b.none
    16c0:	ldr	x5, [sp, #1712]
    16c4:	cbnz	x5, 16dc <_Unwind_ForcedUnwind_Phase2+0xa4>
    16c8:	mov	x1, x22
    16cc:	mov	x0, x28
    16d0:	add	x21, x21, #0x1
    16d4:	bl	150c <uw_update_context>
    16d8:	b	1678 <_Unwind_ForcedUnwind_Phase2+0x40>
    16dc:	ldr	x2, [x27]
    16e0:	mov	x4, x28
    16e4:	mov	x3, x27
    16e8:	mov	w1, #0xa                   	// #10
    16ec:	mov	w0, #0x1                   	// #1
    16f0:	blr	x5
    16f4:	mov	w19, w0
    16f8:	cmp	w0, #0x7
    16fc:	b.eq	1730 <_Unwind_ForcedUnwind_Phase2+0xf8>  // b.none
    1700:	cmp	w0, #0x8
    1704:	b.eq	16c8 <_Unwind_ForcedUnwind_Phase2+0x90>  // b.none
    1708:	mov	w19, #0x2                   	// #2
    170c:	mov	w0, w19
    1710:	ldp	x29, x30, [sp]
    1714:	ldp	x19, x20, [sp, #16]
    1718:	ldp	x21, x22, [sp, #32]
    171c:	ldp	x23, x24, [sp, #48]
    1720:	ldp	x25, x26, [sp, #64]
    1724:	ldp	x27, x28, [sp, #80]
    1728:	add	sp, sp, #0x6e0
    172c:	ret
    1730:	str	x21, [x20]
    1734:	b	170c <_Unwind_ForcedUnwind_Phase2+0xd4>

0000000000001738 <_Unwind_GetCFA>:
    1738:	ldr	x0, [x0, #784]
    173c:	ret

0000000000001740 <_Unwind_SetGR>:
    1740:	cmp	w1, #0x61
    1744:	b.le	1754 <_Unwind_SetGR+0x14>
    1748:	stp	x29, x30, [sp, #-16]!
    174c:	mov	x29, sp
    1750:	bl	0 <abort>
    1754:	adrp	x4, 0 <read_uleb128>
    1758:	add	x4, x4, #0x0
    175c:	sxtw	x3, w1
    1760:	ldrb	w1, [x4, w1, sxtw]
    1764:	ldr	x4, [x0, #832]
    1768:	tbz	x4, #62, 1780 <_Unwind_SetGR+0x40>
    176c:	add	x4, x0, x3
    1770:	ldrb	w4, [x4, #856]
    1774:	cbz	w4, 1780 <_Unwind_SetGR+0x40>
    1778:	str	x2, [x0, x3, lsl #3]
    177c:	ret
    1780:	cmp	w1, #0x8
    1784:	ldr	x0, [x0, x3, lsl #3]
    1788:	b.ne	1748 <_Unwind_SetGR+0x8>  // b.any
    178c:	str	x2, [x0]
    1790:	ret

0000000000001794 <_Unwind_GetIP>:
    1794:	ldr	x0, [x0, #792]
    1798:	ret

000000000000179c <_Unwind_GetIPInfo>:
    179c:	ldr	x2, [x0, #832]
    17a0:	ldr	x0, [x0, #792]
    17a4:	lsr	x2, x2, #63
    17a8:	str	w2, [x1]
    17ac:	ret

00000000000017b0 <_Unwind_SetIP>:
    17b0:	str	x1, [x0, #792]
    17b4:	ret

00000000000017b8 <_Unwind_GetLanguageSpecificData>:
    17b8:	ldr	x0, [x0, #800]
    17bc:	ret

00000000000017c0 <_Unwind_GetRegionStart>:
    17c0:	ldr	x0, [x0, #824]
    17c4:	ret

00000000000017c8 <_Unwind_FindEnclosingFunction>:
    17c8:	stp	x29, x30, [sp, #-48]!
    17cc:	sub	x0, x0, #0x1
    17d0:	mov	x29, sp
    17d4:	add	x1, sp, #0x18
    17d8:	bl	0 <_Unwind_Find_FDE>
    17dc:	cbz	x0, 17e4 <_Unwind_FindEnclosingFunction+0x1c>
    17e0:	ldr	x0, [sp, #40]
    17e4:	ldp	x29, x30, [sp], #48
    17e8:	ret

00000000000017ec <_Unwind_GetDataRelBase>:
    17ec:	ldr	x0, [x0, #816]
    17f0:	ret

00000000000017f4 <_Unwind_GetTextRelBase>:
    17f4:	ldr	x0, [x0, #808]
    17f8:	ret

00000000000017fc <__frame_state_for>:
    17fc:	sub	sp, sp, #0xa60
    1800:	mov	x2, #0x3c0                 	// #960
    1804:	add	x3, sp, #0x20
    1808:	stp	x29, x30, [sp]
    180c:	mov	x29, sp
    1810:	stp	x19, x20, [sp, #16]
    1814:	mov	x20, x0
    1818:	mov	x19, x1
    181c:	mov	x0, x3
    1820:	mov	w1, #0x0                   	// #0
    1824:	bl	0 <memset>
    1828:	mov	x3, x0
    182c:	add	x20, x20, #0x1
    1830:	mov	x0, #0x4000000000000000    	// #4611686018427387904
    1834:	str	x20, [sp, #824]
    1838:	add	x20, sp, #0x3e0
    183c:	mov	x1, x20
    1840:	str	x0, [sp, #864]
    1844:	mov	x0, x3
    1848:	bl	69c <uw_frame_state_for>
    184c:	cbnz	w0, 18e4 <__frame_state_for+0xe8>
    1850:	ldr	w0, [sp, #2592]
    1854:	cmp	w0, #0x2
    1858:	b.eq	18e4 <__frame_state_for+0xe8>  // b.none
    185c:	mov	x1, x20
    1860:	add	x2, x19, #0x334
    1864:	add	x0, x19, #0x20
    1868:	add	x4, x19, #0x330
    186c:	ldrb	w3, [x1, #8]
    1870:	strb	w3, [x2]
    1874:	cmp	w3, #0x1
    1878:	b.eq	1884 <__frame_state_for+0x88>  // b.none
    187c:	cmp	w3, #0x2
    1880:	b.ne	18dc <__frame_state_for+0xe0>  // b.any
    1884:	ldr	x3, [x1]
    1888:	str	x3, [x0]
    188c:	add	x0, x0, #0x8
    1890:	add	x1, x1, #0x10
    1894:	add	x2, x2, #0x1
    1898:	cmp	x0, x4
    189c:	b.ne	186c <__frame_state_for+0x70>  // b.any
    18a0:	ldr	x0, [sp, #2568]
    18a4:	str	x0, [x19, #16]
    18a8:	ldr	x0, [sp, #2576]
    18ac:	strh	w0, [x19, #816]
    18b0:	ldr	x0, [sp, #2632]
    18b4:	strh	w0, [x19, #818]
    18b8:	ldr	x0, [sp, #880]
    18bc:	str	x0, [x19, #24]
    18c0:	ldr	x0, [sp, #2648]
    18c4:	str	x0, [x19, #8]
    18c8:	mov	x0, x19
    18cc:	ldp	x29, x30, [sp]
    18d0:	ldp	x19, x20, [sp, #16]
    18d4:	add	sp, sp, #0xa60
    18d8:	ret
    18dc:	str	xzr, [x0]
    18e0:	b	188c <__frame_state_for+0x90>
    18e4:	mov	x19, #0x0                   	// #0
    18e8:	b	18c8 <__frame_state_for+0xcc>

00000000000018ec <_Unwind_DebugHook>:
    18ec:	ret

00000000000018f0 <_Unwind_RaiseException>:
    18f0:	sub	sp, sp, #0xec0
    18f4:	stp	x29, x30, [sp]
    18f8:	mov	x29, sp
    18fc:	stp	x21, x22, [sp, #64]
    1900:	add	x22, sp, #0x840
    1904:	add	x21, sp, #0xc0
    1908:	stp	x0, x1, [sp, #16]
    190c:	add	x1, sp, #0xec0
    1910:	stp	x2, x3, [sp, #32]
    1914:	mov	x2, x30
    1918:	stp	x19, x20, [sp, #48]
    191c:	mov	x20, x0
    1920:	add	x19, sp, #0x480
    1924:	mov	x0, x21
    1928:	stp	x23, x24, [sp, #80]
    192c:	stp	x25, x26, [sp, #96]
    1930:	stp	x27, x28, [sp, #112]
    1934:	stp	d8, d9, [sp, #128]
    1938:	stp	d10, d11, [sp, #144]
    193c:	stp	d12, d13, [sp, #160]
    1940:	stp	d14, d15, [sp, #176]
    1944:	bl	1424 <uw_init_context_1>
    1948:	mov	x1, x21
    194c:	mov	x0, x19
    1950:	mov	x2, #0x3c0                 	// #960
    1954:	bl	0 <memcpy>
    1958:	mov	x1, x22
    195c:	mov	x0, x19
    1960:	bl	69c <uw_frame_state_for>
    1964:	cmp	w0, #0x5
    1968:	b.eq	1974 <_Unwind_RaiseException+0x84>  // b.none
    196c:	cbz	w0, 197c <_Unwind_RaiseException+0x8c>
    1970:	mov	w0, #0x3                   	// #3
    1974:	mov	x4, #0x0                   	// #0
    1978:	b	1a30 <_Unwind_RaiseException+0x140>
    197c:	ldr	x5, [sp, #3728]
    1980:	cbnz	x5, 1994 <_Unwind_RaiseException+0xa4>
    1984:	mov	x1, x22
    1988:	mov	x0, x19
    198c:	bl	150c <uw_update_context>
    1990:	b	1958 <_Unwind_RaiseException+0x68>
    1994:	ldr	x2, [x20]
    1998:	mov	w1, #0x1                   	// #1
    199c:	mov	x4, x19
    19a0:	mov	x3, x20
    19a4:	mov	w0, w1
    19a8:	blr	x5
    19ac:	cmp	w0, #0x6
    19b0:	b.eq	19c0 <_Unwind_RaiseException+0xd0>  // b.none
    19b4:	cmp	w0, #0x8
    19b8:	b.eq	1984 <_Unwind_RaiseException+0x94>  // b.none
    19bc:	b	1970 <_Unwind_RaiseException+0x80>
    19c0:	ldr	x1, [sp, #1936]
    19c4:	mov	x2, #0x3c0                 	// #960
    19c8:	ldr	x0, [sp, #1984]
    19cc:	sub	x0, x1, x0, lsr #63
    19d0:	stp	xzr, x0, [x20, #16]
    19d4:	mov	x1, x21
    19d8:	mov	x0, x19
    19dc:	bl	0 <memcpy>
    19e0:	mov	x2, x22
    19e4:	mov	x1, x19
    19e8:	mov	x0, x20
    19ec:	bl	1570 <_Unwind_RaiseException_Phase2>
    19f0:	cmp	w0, #0x7
    19f4:	b.ne	1974 <_Unwind_RaiseException+0x84>  // b.any
    19f8:	mov	x1, x19
    19fc:	mov	x0, x21
    1a00:	bl	c68 <uw_install_context_1>
    1a04:	mov	x4, x0
    1a08:	ldr	x0, [sp, #1024]
    1a0c:	ldr	x1, [sp, #1944]
    1a10:	tbz	x0, #61, 1a24 <_Unwind_RaiseException+0x134>
    1a14:	mov	x17, x1
    1a18:	ldr	x16, [sp, #976]
    1a1c:	pacia1716
    1a20:	mov	x1, x17
    1a24:	ldr	x0, [sp, #1936]
    1a28:	bl	18ec <_Unwind_DebugHook>
    1a2c:	str	x1, [x29, #8]
    1a30:	ldp	x29, x30, [sp]
    1a34:	ldp	x0, x1, [sp, #16]
    1a38:	ldp	x2, x3, [sp, #32]
    1a3c:	ldp	x19, x20, [sp, #48]
    1a40:	ldp	x21, x22, [sp, #64]
    1a44:	ldp	x23, x24, [sp, #80]
    1a48:	ldp	x25, x26, [sp, #96]
    1a4c:	ldp	x27, x28, [sp, #112]
    1a50:	ldp	d8, d9, [sp, #128]
    1a54:	ldp	d10, d11, [sp, #144]
    1a58:	ldp	d12, d13, [sp, #160]
    1a5c:	ldp	d14, d15, [sp, #176]
    1a60:	add	sp, sp, #0xec0
    1a64:	add	sp, sp, x4
    1a68:	ret

0000000000001a6c <_Unwind_ForcedUnwind>:
    1a6c:	sub	sp, sp, #0x850
    1a70:	stp	x29, x30, [sp]
    1a74:	mov	x29, sp
    1a78:	stp	x19, x20, [sp, #48]
    1a7c:	mov	x19, x0
    1a80:	add	x20, sp, #0xd0
    1a84:	stp	x0, x1, [sp, #16]
    1a88:	mov	x0, x20
    1a8c:	stp	x2, x3, [sp, #32]
    1a90:	stp	x21, x22, [sp, #64]
    1a94:	mov	x22, x2
    1a98:	add	x21, sp, #0x490
    1a9c:	mov	x2, x30
    1aa0:	stp	x23, x24, [sp, #80]
    1aa4:	mov	x23, x1
    1aa8:	add	x1, sp, #0x850
    1aac:	stp	x25, x26, [sp, #96]
    1ab0:	stp	x27, x28, [sp, #112]
    1ab4:	stp	d8, d9, [sp, #128]
    1ab8:	stp	d10, d11, [sp, #144]
    1abc:	stp	d12, d13, [sp, #160]
    1ac0:	stp	d14, d15, [sp, #176]
    1ac4:	bl	1424 <uw_init_context_1>
    1ac8:	mov	x1, x20
    1acc:	mov	x2, #0x3c0                 	// #960
    1ad0:	mov	x0, x21
    1ad4:	bl	0 <memcpy>
    1ad8:	stp	x23, x22, [x19, #16]
    1adc:	add	x2, sp, #0xc8
    1ae0:	mov	x1, x21
    1ae4:	mov	x0, x19
    1ae8:	bl	1638 <_Unwind_ForcedUnwind_Phase2>
    1aec:	cmp	w0, #0x7
    1af0:	b.ne	1b68 <_Unwind_ForcedUnwind+0xfc>  // b.any
    1af4:	mov	x1, x21
    1af8:	mov	x0, x20
    1afc:	bl	c68 <uw_install_context_1>
    1b00:	mov	x4, x0
    1b04:	ldr	x0, [sp, #1040]
    1b08:	ldr	x1, [sp, #1960]
    1b0c:	tbz	x0, #61, 1b20 <_Unwind_ForcedUnwind+0xb4>
    1b10:	mov	x17, x1
    1b14:	ldr	x16, [sp, #992]
    1b18:	pacia1716
    1b1c:	mov	x1, x17
    1b20:	ldr	x0, [sp, #1952]
    1b24:	bl	18ec <_Unwind_DebugHook>
    1b28:	str	x1, [x29, #8]
    1b2c:	ldp	x29, x30, [sp]
    1b30:	ldp	x0, x1, [sp, #16]
    1b34:	ldp	x2, x3, [sp, #32]
    1b38:	ldp	x19, x20, [sp, #48]
    1b3c:	ldp	x21, x22, [sp, #64]
    1b40:	ldp	x23, x24, [sp, #80]
    1b44:	ldp	x25, x26, [sp, #96]
    1b48:	ldp	x27, x28, [sp, #112]
    1b4c:	ldp	d8, d9, [sp, #128]
    1b50:	ldp	d10, d11, [sp, #144]
    1b54:	ldp	d12, d13, [sp, #160]
    1b58:	ldp	d14, d15, [sp, #176]
    1b5c:	add	sp, sp, #0x850
    1b60:	add	sp, sp, x4
    1b64:	ret
    1b68:	mov	x4, #0x0                   	// #0
    1b6c:	b	1b2c <_Unwind_ForcedUnwind+0xc0>

0000000000001b70 <_Unwind_Resume>:
    1b70:	sub	sp, sp, #0x850
    1b74:	stp	x29, x30, [sp]
    1b78:	mov	x29, sp
    1b7c:	stp	x19, x20, [sp, #48]
    1b80:	mov	x19, x0
    1b84:	add	x20, sp, #0x490
    1b88:	stp	x21, x22, [sp, #64]
    1b8c:	add	x21, sp, #0xd0
    1b90:	stp	x0, x1, [sp, #16]
    1b94:	add	x1, sp, #0x850
    1b98:	mov	x0, x21
    1b9c:	stp	x2, x3, [sp, #32]
    1ba0:	mov	x2, x30
    1ba4:	stp	x23, x24, [sp, #80]
    1ba8:	stp	x25, x26, [sp, #96]
    1bac:	stp	x27, x28, [sp, #112]
    1bb0:	stp	d8, d9, [sp, #128]
    1bb4:	stp	d10, d11, [sp, #144]
    1bb8:	stp	d12, d13, [sp, #160]
    1bbc:	stp	d14, d15, [sp, #176]
    1bc0:	bl	1424 <uw_init_context_1>
    1bc4:	mov	x1, x21
    1bc8:	mov	x2, #0x3c0                 	// #960
    1bcc:	mov	x0, x20
    1bd0:	bl	0 <memcpy>
    1bd4:	ldr	x0, [x19, #16]
    1bd8:	add	x2, sp, #0xc8
    1bdc:	mov	x1, x20
    1be0:	cbnz	x0, 1bf8 <_Unwind_Resume+0x88>
    1be4:	mov	x0, x19
    1be8:	bl	1570 <_Unwind_RaiseException_Phase2>
    1bec:	cmp	w0, #0x7
    1bf0:	b.eq	1c04 <_Unwind_Resume+0x94>  // b.none
    1bf4:	bl	0 <abort>
    1bf8:	mov	x0, x19
    1bfc:	bl	1638 <_Unwind_ForcedUnwind_Phase2>
    1c00:	b	1bec <_Unwind_Resume+0x7c>
    1c04:	mov	x1, x20
    1c08:	mov	x0, x21
    1c0c:	bl	c68 <uw_install_context_1>
    1c10:	mov	x4, x0
    1c14:	ldr	x0, [sp, #1040]
    1c18:	ldr	x1, [sp, #1960]
    1c1c:	tbz	x0, #61, 1c30 <_Unwind_Resume+0xc0>
    1c20:	mov	x17, x1
    1c24:	ldr	x16, [sp, #992]
    1c28:	pacia1716
    1c2c:	mov	x1, x17
    1c30:	ldr	x0, [sp, #1952]
    1c34:	bl	18ec <_Unwind_DebugHook>
    1c38:	str	x1, [x29, #8]
    1c3c:	ldp	x29, x30, [sp]
    1c40:	ldp	x0, x1, [sp, #16]
    1c44:	ldp	x2, x3, [sp, #32]
    1c48:	ldp	x19, x20, [sp, #48]
    1c4c:	ldp	x21, x22, [sp, #64]
    1c50:	ldp	x23, x24, [sp, #80]
    1c54:	ldp	x25, x26, [sp, #96]
    1c58:	ldp	x27, x28, [sp, #112]
    1c5c:	ldp	d8, d9, [sp, #128]
    1c60:	ldp	d10, d11, [sp, #144]
    1c64:	ldp	d12, d13, [sp, #160]
    1c68:	ldp	d14, d15, [sp, #176]
    1c6c:	add	sp, sp, #0x850
    1c70:	add	sp, sp, x4
    1c74:	ret

0000000000001c78 <_Unwind_Resume_or_Rethrow>:
    1c78:	sub	sp, sp, #0x850
    1c7c:	stp	x29, x30, [sp]
    1c80:	mov	x29, sp
    1c84:	stp	x0, x1, [sp, #16]
    1c88:	ldr	x1, [x0, #16]
    1c8c:	stp	x2, x3, [sp, #32]
    1c90:	mov	x2, x30
    1c94:	stp	x19, x20, [sp, #48]
    1c98:	mov	x19, x0
    1c9c:	stp	x21, x22, [sp, #64]
    1ca0:	stp	x23, x24, [sp, #80]
    1ca4:	stp	x25, x26, [sp, #96]
    1ca8:	stp	x27, x28, [sp, #112]
    1cac:	stp	d8, d9, [sp, #128]
    1cb0:	stp	d10, d11, [sp, #144]
    1cb4:	stp	d12, d13, [sp, #160]
    1cb8:	stp	d14, d15, [sp, #176]
    1cbc:	cbnz	x1, 1d04 <_Unwind_Resume_or_Rethrow+0x8c>
    1cc0:	bl	18f0 <_Unwind_RaiseException>
    1cc4:	mov	x4, #0x0                   	// #0
    1cc8:	ldp	x29, x30, [sp]
    1ccc:	ldp	x0, x1, [sp, #16]
    1cd0:	ldp	x2, x3, [sp, #32]
    1cd4:	ldp	x19, x20, [sp, #48]
    1cd8:	ldp	x21, x22, [sp, #64]
    1cdc:	ldp	x23, x24, [sp, #80]
    1ce0:	ldp	x25, x26, [sp, #96]
    1ce4:	ldp	x27, x28, [sp, #112]
    1ce8:	ldp	d8, d9, [sp, #128]
    1cec:	ldp	d10, d11, [sp, #144]
    1cf0:	ldp	d12, d13, [sp, #160]
    1cf4:	ldp	d14, d15, [sp, #176]
    1cf8:	add	sp, sp, #0x850
    1cfc:	add	sp, sp, x4
    1d00:	ret
    1d04:	add	x20, sp, #0xd0
    1d08:	add	x1, sp, #0x850
    1d0c:	mov	x0, x20
    1d10:	add	x21, sp, #0x490
    1d14:	bl	1424 <uw_init_context_1>
    1d18:	mov	x1, x20
    1d1c:	mov	x2, #0x3c0                 	// #960
    1d20:	mov	x0, x21
    1d24:	bl	0 <memcpy>
    1d28:	add	x2, sp, #0xc8
    1d2c:	mov	x1, x21
    1d30:	mov	x0, x19
    1d34:	bl	1638 <_Unwind_ForcedUnwind_Phase2>
    1d38:	cmp	w0, #0x7
    1d3c:	b.eq	1d44 <_Unwind_Resume_or_Rethrow+0xcc>  // b.none
    1d40:	bl	0 <abort>
    1d44:	mov	x1, x21
    1d48:	mov	x0, x20
    1d4c:	bl	c68 <uw_install_context_1>
    1d50:	mov	x4, x0
    1d54:	ldr	x0, [sp, #1040]
    1d58:	ldr	x1, [sp, #1960]
    1d5c:	tbz	x0, #61, 1d70 <_Unwind_Resume_or_Rethrow+0xf8>
    1d60:	mov	x17, x1
    1d64:	ldr	x16, [sp, #992]
    1d68:	pacia1716
    1d6c:	mov	x1, x17
    1d70:	ldr	x0, [sp, #1952]
    1d74:	bl	18ec <_Unwind_DebugHook>
    1d78:	str	x1, [x29, #8]
    1d7c:	b	1cc8 <_Unwind_Resume_or_Rethrow+0x50>

0000000000001d80 <_Unwind_DeleteException>:
    1d80:	ldr	x2, [x0, #8]
    1d84:	mov	x1, x0
    1d88:	cbz	x2, 1d98 <_Unwind_DeleteException+0x18>
    1d8c:	mov	x16, x2
    1d90:	mov	w0, #0x1                   	// #1
    1d94:	br	x16
    1d98:	ret

0000000000001d9c <_Unwind_Backtrace>:
    1d9c:	sub	sp, sp, #0xae0
    1da0:	mov	x2, x30
    1da4:	stp	x29, x30, [sp]
    1da8:	mov	x29, sp
    1dac:	stp	x23, x24, [sp, #48]
    1db0:	add	x23, sp, #0x460
    1db4:	stp	x19, x20, [sp, #16]
    1db8:	add	x20, sp, #0xa0
    1dbc:	stp	x21, x22, [sp, #32]
    1dc0:	mov	x21, x0
    1dc4:	mov	x22, x1
    1dc8:	mov	x0, x20
    1dcc:	add	x1, sp, #0xae0
    1dd0:	stp	x25, x26, [sp, #64]
    1dd4:	stp	x27, x28, [sp, #80]
    1dd8:	stp	d8, d9, [sp, #96]
    1ddc:	stp	d10, d11, [sp, #112]
    1de0:	stp	d12, d13, [sp, #128]
    1de4:	stp	d14, d15, [sp, #144]
    1de8:	bl	1424 <uw_init_context_1>
    1dec:	mov	x1, x23
    1df0:	mov	x0, x20
    1df4:	bl	69c <uw_frame_state_for>
    1df8:	cmp	w0, #0x0
    1dfc:	mov	w19, w0
    1e00:	ccmp	w0, #0x5, #0x4, ne  // ne = any
    1e04:	b.ne	1e30 <_Unwind_Backtrace+0x94>  // b.any
    1e08:	mov	x1, x22
    1e0c:	mov	x0, x20
    1e10:	blr	x21
    1e14:	cbnz	w0, 1e30 <_Unwind_Backtrace+0x94>
    1e18:	cmp	w19, #0x5
    1e1c:	b.eq	1e34 <_Unwind_Backtrace+0x98>  // b.none
    1e20:	mov	x1, x23
    1e24:	mov	x0, x20
    1e28:	bl	150c <uw_update_context>
    1e2c:	b	1dec <_Unwind_Backtrace+0x50>
    1e30:	mov	w19, #0x3                   	// #3
    1e34:	mov	w0, w19
    1e38:	ldp	x29, x30, [sp]
    1e3c:	ldp	x19, x20, [sp, #16]
    1e40:	ldp	x21, x22, [sp, #32]
    1e44:	ldp	x23, x24, [sp, #48]
    1e48:	ldp	x25, x26, [sp, #64]
    1e4c:	ldp	x27, x28, [sp, #80]
    1e50:	ldp	d8, d9, [sp, #96]
    1e54:	ldp	d10, d11, [sp, #112]
    1e58:	ldp	d12, d13, [sp, #128]
    1e5c:	ldp	d14, d15, [sp, #144]
    1e60:	add	sp, sp, #0xae0
    1e64:	ret

unwind-dw2-fde-dip.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <read_uleb128>:
       0:	mov	x2, #0x0                   	// #0
       4:	mov	w3, #0x0                   	// #0
       8:	ldrb	w5, [x0], #1
       c:	and	x4, x5, #0x7f
      10:	lsl	x4, x4, x3
      14:	add	w3, w3, #0x7
      18:	orr	x2, x2, x4
      1c:	tbnz	w5, #7, 8 <read_uleb128+0x8>
      20:	str	x2, [x1]
      24:	ret

0000000000000028 <read_sleb128>:
      28:	mov	x2, #0x0                   	// #0
      2c:	mov	w3, #0x0                   	// #0
      30:	ldrb	w4, [x0], #1
      34:	and	x5, x4, #0x7f
      38:	lsl	x5, x5, x3
      3c:	add	w3, w3, #0x7
      40:	orr	x2, x2, x5
      44:	tbnz	w4, #7, 30 <read_sleb128+0x8>
      48:	cmp	w3, #0x3f
      4c:	b.hi	60 <read_sleb128+0x38>  // b.pmore
      50:	tbz	w4, #6, 60 <read_sleb128+0x38>
      54:	mov	x4, #0xffffffffffffffff    	// #-1
      58:	lsl	x3, x4, x3
      5c:	orr	x2, x2, x3
      60:	str	x2, [x1]
      64:	ret

0000000000000068 <fde_unencoded_compare>:
      68:	ldr	x3, [x1, #8]
      6c:	ldr	x1, [x2, #8]
      70:	cmp	x3, x1
      74:	csetm	w0, cc  // cc = lo, ul, last
      78:	csinc	w0, w0, wzr, ls  // ls = plast
      7c:	ret

0000000000000080 <frame_downheap>:
      80:	stp	x29, x30, [sp, #-80]!
      84:	mov	x29, sp
      88:	stp	x19, x20, [sp, #16]
      8c:	lsl	w19, w3, #1
      90:	mov	x20, x2
      94:	add	w19, w19, #0x1
      98:	stp	x21, x22, [sp, #32]
      9c:	mov	w21, w3
      a0:	mov	w22, w4
      a4:	stp	x23, x24, [sp, #48]
      a8:	mov	x23, x0
      ac:	mov	x24, x1
      b0:	str	x25, [sp, #64]
      b4:	cmp	w19, w22
      b8:	b.lt	d4 <frame_downheap+0x54>  // b.tstop
      bc:	ldp	x19, x20, [sp, #16]
      c0:	ldp	x21, x22, [sp, #32]
      c4:	ldp	x23, x24, [sp, #48]
      c8:	ldr	x25, [sp, #64]
      cc:	ldp	x29, x30, [sp], #80
      d0:	ret
      d4:	add	w25, w19, #0x1
      d8:	cmp	w25, w22
      dc:	b.ge	fc <frame_downheap+0x7c>  // b.tcont
      e0:	add	x0, x20, w19, sxtw #3
      e4:	ldr	x1, [x20, w19, sxtw #3]
      e8:	ldr	x2, [x0, #8]
      ec:	mov	x0, x23
      f0:	blr	x24
      f4:	cmp	w0, #0x0
      f8:	csel	w19, w19, w25, ge  // ge = tcont
      fc:	sbfiz	x21, x21, #3, #32
     100:	sbfiz	x25, x19, #3, #32
     104:	mov	x0, x23
     108:	ldr	x2, [x20, x25]
     10c:	ldr	x1, [x20, x21]
     110:	blr	x24
     114:	tbz	w0, #31, bc <frame_downheap+0x3c>
     118:	ldr	x1, [x20, x25]
     11c:	ldr	x0, [x20, x21]
     120:	str	x1, [x20, x21]
     124:	str	x0, [x20, x25]
     128:	lsl	w0, w19, #1
     12c:	mov	w21, w19
     130:	add	w19, w0, #0x1
     134:	b	b4 <frame_downheap+0x34>

0000000000000138 <frame_heapsort>:
     138:	stp	x29, x30, [sp, #-64]!
     13c:	mov	x29, sp
     140:	stp	x19, x20, [sp, #16]
     144:	mov	x20, x2
     148:	ldr	x19, [x2, #8]
     14c:	stp	x21, x22, [sp, #32]
     150:	add	x22, x2, #0x10
     154:	stp	x23, x24, [sp, #48]
     158:	mov	x23, x0
     15c:	mov	x24, x1
     160:	lsr	x21, x19, #1
     164:	sub	w21, w21, #0x1
     168:	tbz	w21, #31, 190 <frame_heapsort+0x58>
     16c:	sub	w19, w19, #0x1
     170:	sxtw	x19, w19
     174:	cmp	w19, #0x0
     178:	b.gt	1ac <frame_heapsort+0x74>
     17c:	ldp	x19, x20, [sp, #16]
     180:	ldp	x21, x22, [sp, #32]
     184:	ldp	x23, x24, [sp, #48]
     188:	ldp	x29, x30, [sp], #64
     18c:	ret
     190:	mov	w4, w19
     194:	mov	w3, w21
     198:	mov	x2, x22
     19c:	mov	x1, x24
     1a0:	mov	x0, x23
     1a4:	bl	80 <frame_downheap>
     1a8:	b	164 <frame_heapsort+0x2c>
     1ac:	ldr	x1, [x22, x19, lsl #3]
     1b0:	mov	w4, w19
     1b4:	ldr	x0, [x20, #16]
     1b8:	str	x1, [x20, #16]
     1bc:	str	x0, [x22, x19, lsl #3]
     1c0:	mov	x2, x22
     1c4:	mov	x1, x24
     1c8:	mov	x0, x23
     1cc:	mov	w3, #0x0                   	// #0
     1d0:	sub	x19, x19, #0x1
     1d4:	bl	80 <frame_downheap>
     1d8:	b	174 <frame_heapsort+0x3c>

00000000000001dc <size_of_encoded_value>:
     1dc:	and	w0, w0, #0xff
     1e0:	cmp	w0, #0xff
     1e4:	b.eq	228 <size_of_encoded_value+0x4c>  // b.none
     1e8:	and	w0, w0, #0x7
     1ec:	cmp	w0, #0x4
     1f0:	b.hi	21c <size_of_encoded_value+0x40>  // b.pmore
     1f4:	adrp	x1, 0 <read_uleb128>
     1f8:	add	x1, x1, #0x0
     1fc:	ldrb	w0, [x1, w0, uxtw]
     200:	adr	x1, 20c <size_of_encoded_value+0x30>
     204:	add	x0, x1, w0, sxtb #2
     208:	br	x0
     20c:	mov	w0, #0x2                   	// #2
     210:	ret
     214:	mov	w0, #0x4                   	// #4
     218:	ret
     21c:	stp	x29, x30, [sp, #-16]!
     220:	mov	x29, sp
     224:	bl	0 <abort>
     228:	mov	w0, #0x0                   	// #0
     22c:	ret
     230:	mov	w0, #0x8                   	// #8
     234:	ret

0000000000000238 <base_from_object>:
     238:	and	w0, w0, #0xff
     23c:	cmp	w0, #0xff
     240:	b.eq	290 <base_from_object+0x58>  // b.none
     244:	and	w2, w0, #0x70
     248:	cmp	w2, #0x20
     24c:	b.eq	280 <base_from_object+0x48>  // b.none
     250:	b.hi	268 <base_from_object+0x30>  // b.pmore
     254:	tst	w0, #0x60
     258:	b.eq	290 <base_from_object+0x58>  // b.none
     25c:	stp	x29, x30, [sp, #-16]!
     260:	mov	x29, sp
     264:	bl	0 <abort>
     268:	cmp	w2, #0x30
     26c:	b.eq	288 <base_from_object+0x50>  // b.none
     270:	cmp	w2, #0x50
     274:	mov	x0, #0x0                   	// #0
     278:	b.ne	25c <base_from_object+0x24>  // b.any
     27c:	ret
     280:	ldr	x0, [x1, #8]
     284:	ret
     288:	ldr	x0, [x1, #16]
     28c:	ret
     290:	mov	x0, #0x0                   	// #0
     294:	b	27c <base_from_object+0x44>

0000000000000298 <base_from_cb_data>:
     298:	and	w0, w0, #0xff
     29c:	cmp	w0, #0xff
     2a0:	b.eq	2f0 <base_from_cb_data+0x58>  // b.none
     2a4:	and	w2, w0, #0x70
     2a8:	cmp	w2, #0x20
     2ac:	b.eq	2e0 <base_from_cb_data+0x48>  // b.none
     2b0:	b.hi	2c8 <base_from_cb_data+0x30>  // b.pmore
     2b4:	tst	w0, #0x60
     2b8:	b.eq	2f0 <base_from_cb_data+0x58>  // b.none
     2bc:	stp	x29, x30, [sp, #-16]!
     2c0:	mov	x29, sp
     2c4:	bl	0 <abort>
     2c8:	cmp	w2, #0x30
     2cc:	b.eq	2e8 <base_from_cb_data+0x50>  // b.none
     2d0:	cmp	w2, #0x50
     2d4:	mov	x0, #0x0                   	// #0
     2d8:	b.ne	2bc <base_from_cb_data+0x24>  // b.any
     2dc:	ret
     2e0:	ldr	x0, [x1, #8]
     2e4:	ret
     2e8:	ldr	x0, [x1, #16]
     2ec:	ret
     2f0:	mov	x0, #0x0                   	// #0
     2f4:	b	2dc <base_from_cb_data+0x44>

00000000000002f8 <read_encoded_value_with_base>:
     2f8:	and	w8, w0, #0xff
     2fc:	mov	x6, x2
     300:	mov	x9, x3
     304:	cmp	w8, #0x50
     308:	b.ne	320 <read_encoded_value_with_base+0x28>  // b.any
     30c:	add	x0, x2, #0x7
     310:	and	x0, x0, #0xfffffffffffffff8
     314:	ldr	x4, [x0], #8
     318:	str	x4, [x3]
     31c:	ret
     320:	stp	x29, x30, [sp, #-32]!
     324:	mov	x7, x1
     328:	and	w1, w8, #0xf
     32c:	mov	x29, sp
     330:	cmp	w1, #0xc
     334:	b.hi	3d4 <read_encoded_value_with_base+0xdc>  // b.pmore
     338:	adrp	x0, 0 <read_uleb128>
     33c:	add	x0, x0, #0x0
     340:	ldrb	w0, [x0, w1, uxtw]
     344:	adr	x1, 350 <read_encoded_value_with_base+0x58>
     348:	add	x0, x1, w0, sxtb #2
     34c:	br	x0
     350:	add	x1, sp, #0x18
     354:	mov	x0, x2
     358:	bl	0 <read_uleb128>
     35c:	ldr	x4, [sp, #24]
     360:	cbz	x4, 37c <read_encoded_value_with_base+0x84>
     364:	and	w1, w8, #0x70
     368:	cmp	w1, #0x10
     36c:	csel	x7, x6, x7, eq  // eq = none
     370:	add	x4, x4, x7
     374:	tbz	w8, #7, 37c <read_encoded_value_with_base+0x84>
     378:	ldr	x4, [x4]
     37c:	str	x4, [x9]
     380:	ldp	x29, x30, [sp], #32
     384:	ret
     388:	add	x1, sp, #0x18
     38c:	mov	x0, x2
     390:	bl	28 <read_sleb128>
     394:	b	35c <read_encoded_value_with_base+0x64>
     398:	mov	x0, x2
     39c:	ldrh	w4, [x0], #2
     3a0:	b	360 <read_encoded_value_with_base+0x68>
     3a4:	mov	x0, x2
     3a8:	ldr	w4, [x0], #4
     3ac:	b	360 <read_encoded_value_with_base+0x68>
     3b0:	mov	x0, x2
     3b4:	ldrsh	x4, [x0], #2
     3b8:	b	360 <read_encoded_value_with_base+0x68>
     3bc:	mov	x0, x2
     3c0:	ldrsw	x4, [x0], #4
     3c4:	b	360 <read_encoded_value_with_base+0x68>
     3c8:	mov	x0, x2
     3cc:	ldr	x4, [x0], #8
     3d0:	b	360 <read_encoded_value_with_base+0x68>
     3d4:	bl	0 <abort>

00000000000003d8 <fde_single_encoding_compare>:
     3d8:	stp	x29, x30, [sp, #-80]!
     3dc:	mov	x29, sp
     3e0:	stp	x21, x22, [sp, #32]
     3e4:	mov	x22, x2
     3e8:	ldrh	w21, [x0, #32]
     3ec:	stp	x19, x20, [sp, #16]
     3f0:	mov	x19, x0
     3f4:	ubfx	x21, x21, #3, #8
     3f8:	str	x23, [sp, #48]
     3fc:	mov	w0, w21
     400:	mov	x23, x1
     404:	mov	x1, x19
     408:	bl	238 <base_from_object>
     40c:	add	x3, sp, #0x40
     410:	mov	x20, x0
     414:	add	x2, x23, #0x8
     418:	mov	x1, x0
     41c:	mov	w0, w21
     420:	bl	2f8 <read_encoded_value_with_base>
     424:	ldrh	w0, [x19, #32]
     428:	add	x3, sp, #0x48
     42c:	add	x2, x22, #0x8
     430:	mov	x1, x20
     434:	ubfx	x0, x0, #3, #8
     438:	bl	2f8 <read_encoded_value_with_base>
     43c:	ldp	x2, x1, [sp, #64]
     440:	ldp	x19, x20, [sp, #16]
     444:	ldp	x21, x22, [sp, #32]
     448:	cmp	x2, x1
     44c:	csetm	w0, cc  // cc = lo, ul, last
     450:	csinc	w0, w0, wzr, ls  // ls = plast
     454:	ldr	x23, [sp, #48]
     458:	ldp	x29, x30, [sp], #80
     45c:	ret

0000000000000460 <get_cie_encoding>:
     460:	stp	x29, x30, [sp, #-64]!
     464:	mov	x29, sp
     468:	stp	x19, x20, [sp, #16]
     46c:	mov	x19, x0
     470:	add	x20, x0, #0x9
     474:	mov	x0, x20
     478:	bl	0 <strlen>
     47c:	ldrb	w2, [x19, #8]
     480:	add	x1, x0, #0x1
     484:	add	x0, x20, x1
     488:	cmp	w2, #0x3
     48c:	b.ls	4a8 <get_cie_encoding+0x48>  // b.plast
     490:	ldrb	w1, [x20, x1]
     494:	cmp	w1, #0x8
     498:	b.ne	550 <get_cie_encoding+0xf0>  // b.any
     49c:	ldrb	w1, [x0, #1]
     4a0:	cbnz	w1, 550 <get_cie_encoding+0xf0>
     4a4:	add	x0, x0, #0x2
     4a8:	ldrb	w1, [x19, #9]
     4ac:	cmp	w1, #0x7a
     4b0:	b.eq	4c4 <get_cie_encoding+0x64>  // b.none
     4b4:	mov	w0, #0x0                   	// #0
     4b8:	ldp	x19, x20, [sp, #16]
     4bc:	ldp	x29, x30, [sp], #64
     4c0:	ret
     4c4:	add	x6, sp, #0x30
     4c8:	mov	x1, x6
     4cc:	bl	0 <read_uleb128>
     4d0:	add	x1, sp, #0x38
     4d4:	bl	28 <read_sleb128>
     4d8:	ldrb	w2, [x19, #8]
     4dc:	cmp	w2, #0x1
     4e0:	b.ne	50c <get_cie_encoding+0xac>  // b.any
     4e4:	add	x0, x0, #0x1
     4e8:	add	x19, x19, #0xa
     4ec:	add	x20, sp, #0x28
     4f0:	mov	x1, x6
     4f4:	bl	0 <read_uleb128>
     4f8:	ldrb	w1, [x19]
     4fc:	cmp	w1, #0x52
     500:	b.ne	518 <get_cie_encoding+0xb8>  // b.any
     504:	ldrb	w0, [x0]
     508:	b	4b8 <get_cie_encoding+0x58>
     50c:	mov	x1, x6
     510:	bl	0 <read_uleb128>
     514:	b	4e8 <get_cie_encoding+0x88>
     518:	cmp	w1, #0x50
     51c:	b.ne	540 <get_cie_encoding+0xe0>  // b.any
     520:	mov	x2, x0
     524:	mov	x3, x20
     528:	mov	x1, #0x0                   	// #0
     52c:	ldrb	w0, [x2], #1
     530:	and	w0, w0, #0x7f
     534:	bl	2f8 <read_encoded_value_with_base>
     538:	add	x19, x19, #0x1
     53c:	b	4f8 <get_cie_encoding+0x98>
     540:	cmp	w1, #0x4c
     544:	b.ne	4b4 <get_cie_encoding+0x54>  // b.any
     548:	add	x0, x0, #0x1
     54c:	b	538 <get_cie_encoding+0xd8>
     550:	mov	w0, #0xff                  	// #255
     554:	b	4b8 <get_cie_encoding+0x58>

0000000000000558 <linear_search_fdes>:
     558:	stp	x29, x30, [sp, #-128]!
     55c:	mov	x29, sp
     560:	stp	x21, x22, [sp, #32]
     564:	mov	x21, x0
     568:	ldrh	w0, [x0, #32]
     56c:	stp	x19, x20, [sp, #16]
     570:	mov	x19, x1
     574:	mov	x1, x21
     578:	ubfx	x20, x0, #3, #8
     57c:	stp	x23, x24, [sp, #48]
     580:	mov	x0, x20
     584:	add	x23, sp, #0x70
     588:	add	x24, sp, #0x78
     58c:	stp	x25, x26, [sp, #64]
     590:	mov	x25, #0xffffffffffffffff    	// #-1
     594:	mov	x26, #0x1                   	// #1
     598:	stp	x27, x28, [sp, #80]
     59c:	str	x2, [sp, #104]
     5a0:	bl	238 <base_from_object>
     5a4:	mov	x28, x0
     5a8:	mov	x1, #0x0                   	// #0
     5ac:	ldr	w0, [x19]
     5b0:	cbnz	w0, 5bc <linear_search_fdes+0x64>
     5b4:	mov	x19, #0x0                   	// #0
     5b8:	b	618 <linear_search_fdes+0xc0>
     5bc:	ldr	w0, [x19, #4]
     5c0:	cbz	w0, 6a8 <linear_search_fdes+0x150>
     5c4:	ldrb	w2, [x21, #32]
     5c8:	tbz	w2, #2, 638 <linear_search_fdes+0xe0>
     5cc:	add	x4, x19, #0x4
     5d0:	sub	x22, x4, w0, sxtw
     5d4:	cmp	x1, x22
     5d8:	b.eq	5f4 <linear_search_fdes+0x9c>  // b.none
     5dc:	mov	x0, x22
     5e0:	bl	460 <get_cie_encoding>
     5e4:	mov	x1, x21
     5e8:	mov	w20, w0
     5ec:	bl	238 <base_from_object>
     5f0:	mov	x28, x0
     5f4:	cbnz	w20, 640 <linear_search_fdes+0xe8>
     5f8:	ldp	x0, x1, [x19, #8]
     5fc:	stp	x0, x1, [sp, #112]
     600:	cbz	x0, 694 <linear_search_fdes+0x13c>
     604:	ldp	x0, x1, [sp, #104]
     608:	sub	x1, x0, x1
     60c:	ldr	x0, [sp, #120]
     610:	cmp	x1, x0
     614:	b.cs	694 <linear_search_fdes+0x13c>  // b.hs, b.nlast
     618:	mov	x0, x19
     61c:	ldp	x19, x20, [sp, #16]
     620:	ldp	x21, x22, [sp, #32]
     624:	ldp	x23, x24, [sp, #48]
     628:	ldp	x25, x26, [sp, #64]
     62c:	ldp	x27, x28, [sp, #80]
     630:	ldp	x29, x30, [sp], #128
     634:	ret
     638:	mov	x22, x1
     63c:	b	5f4 <linear_search_fdes+0x9c>
     640:	and	w27, w20, #0xff
     644:	mov	x3, x23
     648:	add	x2, x19, #0x8
     64c:	mov	x1, x28
     650:	mov	w0, w27
     654:	bl	2f8 <read_encoded_value_with_base>
     658:	mov	x3, x24
     65c:	mov	x2, x0
     660:	mov	x1, #0x0                   	// #0
     664:	and	w0, w27, #0xf
     668:	bl	2f8 <read_encoded_value_with_base>
     66c:	mov	w0, w27
     670:	bl	1dc <size_of_encoded_value>
     674:	lsl	w1, w0, #3
     678:	cmp	w0, #0x8
     67c:	ldr	x0, [sp, #112]
     680:	lsl	x1, x26, x1
     684:	sub	x1, x1, #0x1
     688:	csel	x1, x1, x25, cc  // cc = lo, ul, last
     68c:	tst	x1, x0
     690:	b.ne	604 <linear_search_fdes+0xac>  // b.any
     694:	ldr	w1, [x19]
     698:	add	x1, x1, #0x4
     69c:	add	x19, x19, x1
     6a0:	mov	x1, x22
     6a4:	b	5ac <linear_search_fdes+0x54>
     6a8:	mov	x22, x1
     6ac:	b	694 <linear_search_fdes+0x13c>

00000000000006b0 <get_fde_encoding>:
     6b0:	add	x1, x0, #0x4
     6b4:	ldrsw	x0, [x0, #4]
     6b8:	sub	x0, x1, x0
     6bc:	b	460 <get_cie_encoding>

00000000000006c0 <_Unwind_IteratePhdrCallback>:
     6c0:	stp	x29, x30, [sp, #-128]!
     6c4:	mov	x29, sp
     6c8:	stp	x19, x20, [sp, #16]
     6cc:	mov	x19, x2
     6d0:	ldr	w2, [x2, #40]
     6d4:	stp	x21, x22, [sp, #32]
     6d8:	stp	x23, x24, [sp, #48]
     6dc:	ldr	x7, [x0]
     6e0:	ldr	x6, [x0, #16]
     6e4:	cbz	w2, 838 <_Unwind_IteratePhdrCallback+0x178>
     6e8:	cmp	x1, #0x2f
     6ec:	b.ls	838 <_Unwind_IteratePhdrCallback+0x178>  // b.plast
     6f0:	ldp	x5, x4, [x0, #32]
     6f4:	adrp	x2, 0 <read_uleb128>
     6f8:	ldr	x3, [x2]
     6fc:	cmp	x5, x3
     700:	adrp	x3, 0 <read_uleb128>
     704:	b.ne	7ec <_Unwind_IteratePhdrCallback+0x12c>  // b.any
     708:	ldr	x9, [x3]
     70c:	add	x8, x3, #0x0
     710:	cmp	x9, x4
     714:	b.ne	7ec <_Unwind_IteratePhdrCallback+0x12c>  // b.any
     718:	ldr	x8, [x8, #8]
     71c:	mov	x4, #0x0                   	// #0
     720:	mov	x5, #0x0                   	// #0
     724:	mov	x2, x8
     728:	cbnz	x2, 774 <_Unwind_IteratePhdrCallback+0xb4>
     72c:	mov	w14, #0xe550                	// #58704
     730:	ldrh	w9, [x0, #24]
     734:	mov	x10, #0x0                   	// #0
     738:	mov	x11, #0x0                   	// #0
     73c:	mov	x12, #0x0                   	// #0
     740:	mov	x8, #0x0                   	// #0
     744:	mov	x0, #0x0                   	// #0
     748:	movk	w14, #0x6474, lsl #16
     74c:	sub	x9, x9, #0x1
     750:	cmn	x9, #0x1
     754:	b.ne	850 <_Unwind_IteratePhdrCallback+0x190>  // b.any
     758:	cbnz	x12, 8b0 <_Unwind_IteratePhdrCallback+0x1f0>
     75c:	mov	w0, #0x0                   	// #0
     760:	ldp	x19, x20, [sp, #16]
     764:	ldp	x21, x22, [sp, #32]
     768:	ldp	x23, x24, [sp, #48]
     76c:	ldp	x29, x30, [sp], #128
     770:	ret
     774:	ldp	x4, x9, [x2]
     778:	ldr	x10, [x19]
     77c:	cmp	x10, x4
     780:	b.cc	7cc <_Unwind_IteratePhdrCallback+0x10c>  // b.lo, b.ul, b.last
     784:	cmp	x10, x9
     788:	b.cs	7cc <_Unwind_IteratePhdrCallback+0x10c>  // b.hs, b.nlast
     78c:	cmp	x2, x8
     790:	ldp	x7, x0, [x2, #16]
     794:	b.eq	7ac <_Unwind_IteratePhdrCallback+0xec>  // b.none
     798:	add	x3, x3, #0x0
     79c:	ldr	x1, [x2, #40]
     7a0:	str	x1, [x5, #40]
     7a4:	str	x2, [x3, #8]
     7a8:	str	x8, [x2, #40]
     7ac:	cbz	x0, 75c <_Unwind_IteratePhdrCallback+0x9c>
     7b0:	ldr	x0, [x0, #16]
     7b4:	add	x20, x7, x0
     7b8:	ldrb	w0, [x7, x0]
     7bc:	cmp	w0, #0x1
     7c0:	b.eq	8f8 <_Unwind_IteratePhdrCallback+0x238>  // b.none
     7c4:	mov	w0, #0x1                   	// #1
     7c8:	b	760 <_Unwind_IteratePhdrCallback+0xa0>
     7cc:	orr	x4, x4, x9
     7d0:	cbz	x4, 848 <_Unwind_IteratePhdrCallback+0x188>
     7d4:	ldr	x9, [x2, #40]
     7d8:	mov	x4, x2
     7dc:	cmp	x9, #0x0
     7e0:	csel	x5, x5, x2, eq  // eq = none
     7e4:	mov	x2, x9
     7e8:	b	728 <_Unwind_IteratePhdrCallback+0x68>
     7ec:	str	x5, [x2]
     7f0:	add	x2, x3, #0x0
     7f4:	add	x2, x2, #0x10
     7f8:	str	x4, [x3]
     7fc:	mov	w4, #0x8                   	// #8
     800:	mov	x5, x2
     804:	stp	xzr, xzr, [x2]
     808:	add	x2, x2, #0x30
     80c:	subs	w4, w4, #0x1
     810:	str	x2, [x5, #40]
     814:	b.ne	800 <_Unwind_IteratePhdrCallback+0x140>  // b.any
     818:	add	x3, x3, #0x0
     81c:	add	x2, x3, #0x10
     820:	str	xzr, [x3, #392]
     824:	str	x2, [x3, #8]
     828:	str	wzr, [x19, #40]
     82c:	mov	x4, #0x0                   	// #0
     830:	mov	x5, #0x0                   	// #0
     834:	b	72c <_Unwind_IteratePhdrCallback+0x6c>
     838:	cmp	x1, #0x19
     83c:	b.hi	82c <_Unwind_IteratePhdrCallback+0x16c>  // b.pmore
     840:	mov	w0, #0xffffffff            	// #-1
     844:	b	760 <_Unwind_IteratePhdrCallback+0xa0>
     848:	mov	x4, x2
     84c:	b	72c <_Unwind_IteratePhdrCallback+0x6c>
     850:	ldr	w2, [x6]
     854:	cmp	w2, #0x1
     858:	b.ne	894 <_Unwind_IteratePhdrCallback+0x1d4>  // b.any
     85c:	ldr	x2, [x6, #16]
     860:	ldr	x13, [x19]
     864:	add	x2, x7, x2
     868:	cmp	x13, x2
     86c:	b.cc	88c <_Unwind_IteratePhdrCallback+0x1cc>  // b.lo, b.ul, b.last
     870:	ldr	x3, [x6, #40]
     874:	add	x3, x2, x3
     878:	cmp	x13, x3
     87c:	b.cs	88c <_Unwind_IteratePhdrCallback+0x1cc>  // b.hs, b.nlast
     880:	mov	x10, x3
     884:	mov	x11, x2
     888:	mov	x12, #0x1                   	// #1
     88c:	add	x6, x6, #0x38
     890:	b	74c <_Unwind_IteratePhdrCallback+0x8c>
     894:	cmp	w2, w14
     898:	b.eq	8a8 <_Unwind_IteratePhdrCallback+0x1e8>  // b.none
     89c:	cmp	w2, #0x2
     8a0:	csel	x8, x8, x6, ne  // ne = any
     8a4:	b	88c <_Unwind_IteratePhdrCallback+0x1cc>
     8a8:	mov	x0, x6
     8ac:	b	88c <_Unwind_IteratePhdrCallback+0x1cc>
     8b0:	cmp	x1, #0x2f
     8b4:	b.ls	7ac <_Unwind_IteratePhdrCallback+0xec>  // b.plast
     8b8:	cmp	x4, #0x0
     8bc:	adrp	x1, 0 <read_uleb128>
     8c0:	ccmp	x5, #0x0, #0x4, ne  // ne = any
     8c4:	b.eq	8e0 <_Unwind_IteratePhdrCallback+0x220>  // b.none
     8c8:	add	x2, x1, #0x0
     8cc:	ldr	x6, [x4, #40]
     8d0:	str	x6, [x5, #40]
     8d4:	ldr	x3, [x2, #8]
     8d8:	str	x4, [x2, #8]
     8dc:	str	x3, [x4, #40]
     8e0:	add	x1, x1, #0x0
     8e4:	ldr	x1, [x1, #8]
     8e8:	stp	x11, x10, [x1]
     8ec:	stp	x7, x0, [x1, #16]
     8f0:	str	x8, [x1, #32]
     8f4:	b	7ac <_Unwind_IteratePhdrCallback+0xec>
     8f8:	ldrb	w21, [x20, #1]
     8fc:	mov	x1, x19
     900:	mov	w0, w21
     904:	bl	298 <base_from_cb_data>
     908:	add	x3, sp, #0x40
     90c:	mov	x1, x0
     910:	add	x2, x20, #0x4
     914:	mov	w0, w21
     918:	bl	2f8 <read_encoded_value_with_base>
     91c:	ldrb	w21, [x20, #2]
     920:	mov	x22, x0
     924:	cmp	w21, #0xff
     928:	b.eq	a4c <_Unwind_IteratePhdrCallback+0x38c>  // b.none
     92c:	ldrb	w0, [x20, #3]
     930:	cmp	w0, #0x3b
     934:	b.ne	a4c <_Unwind_IteratePhdrCallback+0x38c>  // b.any
     938:	mov	x1, x19
     93c:	mov	w0, w21
     940:	bl	298 <base_from_cb_data>
     944:	mov	x1, x0
     948:	add	x3, sp, #0x48
     94c:	mov	w0, w21
     950:	mov	x2, x22
     954:	bl	2f8 <read_encoded_value_with_base>
     958:	ldr	x1, [sp, #72]
     95c:	mov	x21, x0
     960:	cbz	x1, 7c4 <_Unwind_IteratePhdrCallback+0x104>
     964:	ands	x2, x0, #0x3
     968:	b.ne	a4c <_Unwind_IteratePhdrCallback+0x38c>  // b.any
     96c:	ldrsw	x0, [x0]
     970:	ldr	x3, [x19]
     974:	add	x0, x0, x20
     978:	cmp	x0, x3
     97c:	b.hi	7c4 <_Unwind_IteratePhdrCallback+0x104>  // b.pmore
     980:	sub	x1, x1, #0x1
     984:	lsl	x0, x1, #3
     988:	ldrsw	x0, [x21, x0]
     98c:	add	x0, x0, x20
     990:	cmp	x0, x3
     994:	b.hi	a40 <_Unwind_IteratePhdrCallback+0x380>  // b.pmore
     998:	lsl	x24, x1, #3
     99c:	add	x1, x21, x1, lsl #3
     9a0:	ldrsw	x22, [x1, #4]
     9a4:	add	x22, x22, x20
     9a8:	mov	x0, x22
     9ac:	bl	6b0 <get_fde_encoding>
     9b0:	and	w23, w0, #0xff
     9b4:	mov	w0, w23
     9b8:	bl	1dc <size_of_encoded_value>
     9bc:	mov	w2, w0
     9c0:	mov	x1, #0x0                   	// #0
     9c4:	add	x2, x2, #0x8
     9c8:	add	x3, sp, #0x50
     9cc:	add	x2, x22, x2
     9d0:	and	w0, w23, #0xf
     9d4:	bl	2f8 <read_encoded_value_with_base>
     9d8:	ldrsw	x0, [x21, x24]
     9dc:	ldr	x1, [x19]
     9e0:	add	x20, x0, x20
     9e4:	ldr	x0, [sp, #80]
     9e8:	add	x0, x20, x0
     9ec:	cmp	x1, x0
     9f0:	b.cs	9f8 <_Unwind_IteratePhdrCallback+0x338>  // b.hs, b.nlast
     9f4:	str	x22, [x19, #32]
     9f8:	str	x20, [x19, #24]
     9fc:	b	7c4 <_Unwind_IteratePhdrCallback+0x104>
     a00:	add	x0, x2, x1
     a04:	lsr	x0, x0, #1
     a08:	lsl	x4, x0, #3
     a0c:	ldrsw	x4, [x21, x4]
     a10:	add	x4, x4, x20
     a14:	cmp	x4, x3
     a18:	b.hi	a3c <_Unwind_IteratePhdrCallback+0x37c>  // b.pmore
     a1c:	add	x2, x0, #0x1
     a20:	lsl	x4, x2, #3
     a24:	ldrsw	x4, [x21, x4]
     a28:	add	x4, x4, x20
     a2c:	cmp	x4, x3
     a30:	b.ls	a40 <_Unwind_IteratePhdrCallback+0x380>  // b.plast
     a34:	mov	x1, x0
     a38:	b	998 <_Unwind_IteratePhdrCallback+0x2d8>
     a3c:	mov	x1, x0
     a40:	cmp	x2, x1
     a44:	b.cc	a00 <_Unwind_IteratePhdrCallback+0x340>  // b.lo, b.ul, b.last
     a48:	bl	0 <abort>
     a4c:	ldp	x2, x0, [x19]
     a50:	stp	xzr, x0, [sp, #80]
     a54:	ldr	x1, [sp, #64]
     a58:	str	x1, [sp, #104]
     a5c:	ldr	x0, [x19, #16]
     a60:	str	x0, [sp, #96]
     a64:	mov	x0, #0x4                   	// #4
     a68:	str	x0, [sp, #112]
     a6c:	add	x0, sp, #0x50
     a70:	bl	558 <linear_search_fdes>
     a74:	str	x0, [x19, #32]
     a78:	cbz	x0, 7c4 <_Unwind_IteratePhdrCallback+0x104>
     a7c:	bl	6b0 <get_fde_encoding>
     a80:	and	w20, w0, #0xff
     a84:	mov	x1, x19
     a88:	mov	w0, w20
     a8c:	bl	298 <base_from_cb_data>
     a90:	mov	x1, x0
     a94:	ldr	x2, [x19, #32]
     a98:	add	x3, sp, #0x48
     a9c:	mov	w0, w20
     aa0:	add	x2, x2, #0x8
     aa4:	bl	2f8 <read_encoded_value_with_base>
     aa8:	ldr	x0, [sp, #72]
     aac:	str	x0, [x19, #24]
     ab0:	b	7c4 <_Unwind_IteratePhdrCallback+0x104>

0000000000000ab4 <fde_mixed_encoding_compare>:
     ab4:	stp	x29, x30, [sp, #-64]!
     ab8:	mov	x29, sp
     abc:	stp	x19, x20, [sp, #16]
     ac0:	mov	x20, x2
     ac4:	stp	x21, x22, [sp, #32]
     ac8:	mov	x21, x0
     acc:	mov	x22, x1
     ad0:	mov	x0, x1
     ad4:	bl	6b0 <get_fde_encoding>
     ad8:	and	w19, w0, #0xff
     adc:	mov	x1, x21
     ae0:	mov	w0, w19
     ae4:	bl	238 <base_from_object>
     ae8:	add	x3, sp, #0x30
     aec:	add	x2, x22, #0x8
     af0:	mov	x1, x0
     af4:	mov	w0, w19
     af8:	bl	2f8 <read_encoded_value_with_base>
     afc:	mov	x0, x20
     b00:	bl	6b0 <get_fde_encoding>
     b04:	and	w19, w0, #0xff
     b08:	mov	x1, x21
     b0c:	mov	w0, w19
     b10:	bl	238 <base_from_object>
     b14:	mov	x1, x0
     b18:	add	x3, sp, #0x38
     b1c:	add	x2, x20, #0x8
     b20:	mov	w0, w19
     b24:	bl	2f8 <read_encoded_value_with_base>
     b28:	ldp	x2, x1, [sp, #48]
     b2c:	ldp	x19, x20, [sp, #16]
     b30:	ldp	x21, x22, [sp, #32]
     b34:	cmp	x2, x1
     b38:	csetm	w0, cc  // cc = lo, ul, last
     b3c:	csinc	w0, w0, wzr, ls  // ls = plast
     b40:	ldp	x29, x30, [sp], #64
     b44:	ret

0000000000000b48 <classify_object_over_fdes>:
     b48:	stp	x29, x30, [sp, #-112]!
     b4c:	mov	x2, #0x0                   	// #0
     b50:	mov	x29, sp
     b54:	stp	x19, x20, [sp, #16]
     b58:	mov	x20, x0
     b5c:	mov	x19, x1
     b60:	stp	x23, x24, [sp, #48]
     b64:	add	x23, sp, #0x68
     b68:	mov	x24, #0xffffffffffffffff    	// #-1
     b6c:	stp	x21, x22, [sp, #32]
     b70:	mov	w21, #0x0                   	// #0
     b74:	mov	x22, #0x0                   	// #0
     b78:	stp	x25, x26, [sp, #64]
     b7c:	mov	x25, #0x1                   	// #1
     b80:	stp	x27, x28, [sp, #80]
     b84:	mov	x27, #0x0                   	// #0
     b88:	ldr	w0, [x19]
     b8c:	cbz	w0, bc0 <classify_object_over_fdes+0x78>
     b90:	ldr	w0, [x19, #4]
     b94:	cbz	w0, c94 <classify_object_over_fdes+0x14c>
     b98:	add	x26, x19, #0x4
     b9c:	sub	x26, x26, w0, sxtw
     ba0:	cmp	x2, x26
     ba4:	b.eq	c0c <classify_object_over_fdes+0xc4>  // b.none
     ba8:	mov	x0, x26
     bac:	bl	460 <get_cie_encoding>
     bb0:	mov	w21, w0
     bb4:	cmp	w0, #0xff
     bb8:	b.ne	be0 <classify_object_over_fdes+0x98>  // b.any
     bbc:	mov	x22, #0xffffffffffffffff    	// #-1
     bc0:	mov	x0, x22
     bc4:	ldp	x19, x20, [sp, #16]
     bc8:	ldp	x21, x22, [sp, #32]
     bcc:	ldp	x23, x24, [sp, #48]
     bd0:	ldp	x25, x26, [sp, #64]
     bd4:	ldp	x27, x28, [sp, #80]
     bd8:	ldp	x29, x30, [sp], #112
     bdc:	ret
     be0:	and	w28, w0, #0xff
     be4:	mov	x1, x20
     be8:	mov	w0, w28
     bec:	bl	238 <base_from_object>
     bf0:	ldrh	w2, [x20, #32]
     bf4:	mov	x27, x0
     bf8:	and	w0, w2, #0x7f8
     bfc:	cmp	w0, #0x7f8
     c00:	b.ne	c74 <classify_object_over_fdes+0x12c>  // b.any
     c04:	bfi	w2, w28, #3, #8
     c08:	strh	w2, [x20, #32]
     c0c:	add	x2, x19, #0x8
     c10:	mov	x3, x23
     c14:	mov	x1, x27
     c18:	and	w28, w21, #0xff
     c1c:	mov	w0, w28
     c20:	bl	2f8 <read_encoded_value_with_base>
     c24:	mov	w0, w28
     c28:	bl	1dc <size_of_encoded_value>
     c2c:	lsl	w2, w0, #3
     c30:	cmp	w0, #0x8
     c34:	ldr	x0, [sp, #104]
     c38:	lsl	x2, x25, x2
     c3c:	sub	x2, x2, #0x1
     c40:	csel	x2, x2, x24, cc  // cc = lo, ul, last
     c44:	tst	x0, x2
     c48:	b.eq	c90 <classify_object_over_fdes+0x148>  // b.none
     c4c:	ldr	x1, [x20]
     c50:	add	x22, x22, #0x1
     c54:	cmp	x1, x0
     c58:	b.ls	c60 <classify_object_over_fdes+0x118>  // b.plast
     c5c:	str	x0, [x20]
     c60:	ldr	w0, [x19]
     c64:	mov	x2, x26
     c68:	add	x0, x0, #0x4
     c6c:	add	x19, x19, x0
     c70:	b	b88 <classify_object_over_fdes+0x40>
     c74:	ubfx	x2, x2, #3, #8
     c78:	cmp	w2, w21
     c7c:	b.eq	c0c <classify_object_over_fdes+0xc4>  // b.none
     c80:	ldrb	w0, [x20, #32]
     c84:	orr	w0, w0, #0x4
     c88:	strb	w0, [x20, #32]
     c8c:	b	c0c <classify_object_over_fdes+0xc4>
     c90:	mov	x2, x26
     c94:	mov	x26, x2
     c98:	b	c60 <classify_object_over_fdes+0x118>

0000000000000c9c <add_fdes>:
     c9c:	stp	x29, x30, [sp, #-112]!
     ca0:	mov	x29, sp
     ca4:	stp	x21, x22, [sp, #32]
     ca8:	mov	x22, x0
     cac:	ldrh	w0, [x0, #32]
     cb0:	stp	x19, x20, [sp, #16]
     cb4:	mov	x19, x2
     cb8:	ubfx	x21, x0, #3, #8
     cbc:	stp	x23, x24, [sp, #48]
     cc0:	mov	x0, x21
     cc4:	mov	x23, x1
     cc8:	add	x24, sp, #0x68
     ccc:	mov	x1, x22
     cd0:	stp	x25, x26, [sp, #64]
     cd4:	mov	x25, #0xffffffffffffffff    	// #-1
     cd8:	stp	x27, x28, [sp, #80]
     cdc:	bl	238 <base_from_object>
     ce0:	mov	x26, #0x1                   	// #1
     ce4:	mov	x27, x0
     ce8:	mov	x0, #0x0                   	// #0
     cec:	ldr	w1, [x19]
     cf0:	cbnz	w1, d10 <add_fdes+0x74>
     cf4:	ldp	x19, x20, [sp, #16]
     cf8:	ldp	x21, x22, [sp, #32]
     cfc:	ldp	x23, x24, [sp, #48]
     d00:	ldp	x25, x26, [sp, #64]
     d04:	ldp	x27, x28, [sp, #80]
     d08:	ldp	x29, x30, [sp], #112
     d0c:	ret
     d10:	ldr	w1, [x19, #4]
     d14:	cbz	w1, dd0 <add_fdes+0x134>
     d18:	ldrb	w2, [x22, #32]
     d1c:	tbz	w2, #2, d68 <add_fdes+0xcc>
     d20:	add	x20, x19, #0x4
     d24:	sub	x20, x20, w1, sxtw
     d28:	cmp	x0, x20
     d2c:	b.eq	d48 <add_fdes+0xac>  // b.none
     d30:	mov	x0, x20
     d34:	bl	460 <get_cie_encoding>
     d38:	mov	x1, x22
     d3c:	mov	w21, w0
     d40:	bl	238 <base_from_object>
     d44:	mov	x27, x0
     d48:	cbnz	w21, d70 <add_fdes+0xd4>
     d4c:	ldr	x0, [x19, #8]
     d50:	cbnz	x0, db0 <add_fdes+0x114>
     d54:	ldr	w0, [x19]
     d58:	add	x0, x0, #0x4
     d5c:	add	x19, x19, x0
     d60:	mov	x0, x20
     d64:	b	cec <add_fdes+0x50>
     d68:	mov	x20, x0
     d6c:	b	d48 <add_fdes+0xac>
     d70:	add	x2, x19, #0x8
     d74:	mov	x3, x24
     d78:	mov	x1, x27
     d7c:	and	w28, w21, #0xff
     d80:	mov	w0, w28
     d84:	bl	2f8 <read_encoded_value_with_base>
     d88:	mov	w0, w28
     d8c:	bl	1dc <size_of_encoded_value>
     d90:	lsl	w2, w0, #3
     d94:	cmp	w0, #0x8
     d98:	ldr	x0, [sp, #104]
     d9c:	lsl	x2, x26, x2
     da0:	sub	x2, x2, #0x1
     da4:	csel	x2, x2, x25, cc  // cc = lo, ul, last
     da8:	tst	x2, x0
     dac:	b.eq	d54 <add_fdes+0xb8>  // b.none
     db0:	ldr	x0, [x23]
     db4:	cbz	x0, d54 <add_fdes+0xb8>
     db8:	ldr	x1, [x0, #8]
     dbc:	add	x2, x1, #0x1
     dc0:	add	x1, x1, #0x2
     dc4:	str	x2, [x0, #8]
     dc8:	str	x19, [x0, x1, lsl #3]
     dcc:	b	d54 <add_fdes+0xb8>
     dd0:	mov	x20, x0
     dd4:	b	d54 <add_fdes+0xb8>

0000000000000dd8 <search_object>:
     dd8:	stp	x29, x30, [sp, #-144]!
     ddc:	mov	x29, sp
     de0:	stp	x21, x22, [sp, #32]
     de4:	mov	x22, x1
     de8:	ldrb	w1, [x0, #32]
     dec:	stp	x19, x20, [sp, #16]
     df0:	mov	x19, x0
     df4:	stp	x23, x24, [sp, #48]
     df8:	stp	x25, x26, [sp, #64]
     dfc:	stp	x27, x28, [sp, #80]
     e00:	tbz	w1, #0, e2c <search_object+0x54>
     e04:	ldrb	w0, [x19, #32]
     e08:	ldr	x21, [x19, #24]
     e0c:	tbnz	w0, #0, 1150 <search_object+0x378>
     e10:	tbnz	w0, #1, 12f4 <search_object+0x51c>
     e14:	mov	x2, x22
     e18:	mov	x1, x21
     e1c:	mov	x0, x19
     e20:	bl	558 <linear_search_fdes>
     e24:	mov	x20, x0
     e28:	b	e90 <search_object+0xb8>
     e2c:	ldr	w2, [x0, #32]
     e30:	lsr	w21, w2, #11
     e34:	tst	x2, #0xfffff800
     e38:	b.ne	ed8 <search_object+0x100>  // b.any
     e3c:	ldr	x20, [x0, #24]
     e40:	tbnz	w1, #1, eb8 <search_object+0xe0>
     e44:	mov	x1, x20
     e48:	bl	b48 <classify_object_over_fdes>
     e4c:	mov	x21, x0
     e50:	cmn	x0, #0x1
     e54:	b.ne	ec0 <search_object+0xe8>  // b.any
     e58:	b	e6c <search_object+0x94>
     e5c:	mov	x0, x19
     e60:	bl	b48 <classify_object_over_fdes>
     e64:	cmn	x0, #0x1
     e68:	b.ne	eb0 <search_object+0xd8>  // b.any
     e6c:	mov	x0, #0x7f8                 	// #2040
     e70:	str	x0, [x19, #32]
     e74:	adrp	x0, 0 <read_uleb128>
     e78:	add	x0, x0, #0x0
     e7c:	str	x0, [x19, #24]
     e80:	ldr	x0, [x19]
     e84:	cmp	x0, x22
     e88:	b.ls	e04 <search_object+0x2c>  // b.plast
     e8c:	mov	x20, #0x0                   	// #0
     e90:	mov	x0, x20
     e94:	ldp	x19, x20, [sp, #16]
     e98:	ldp	x21, x22, [sp, #32]
     e9c:	ldp	x23, x24, [sp, #48]
     ea0:	ldp	x25, x26, [sp, #64]
     ea4:	ldp	x27, x28, [sp, #80]
     ea8:	ldp	x29, x30, [sp], #144
     eac:	ret
     eb0:	add	x21, x21, x0
     eb4:	add	x20, x20, #0x8
     eb8:	ldr	x1, [x20]
     ebc:	cbnz	x1, e5c <search_object+0x84>
     ec0:	ldr	w0, [x19, #32]
     ec4:	tst	x21, #0xffffffffffe00000
     ec8:	b.ne	f38 <search_object+0x160>  // b.any
     ecc:	bfi	w0, w21, #11, #21
     ed0:	str	w0, [x19, #32]
     ed4:	cbz	x21, e80 <search_object+0xa8>
     ed8:	add	x20, x21, #0x2
     edc:	lsl	x20, x20, #3
     ee0:	mov	x0, x20
     ee4:	bl	0 <malloc>
     ee8:	str	x0, [sp, #128]
     eec:	cbz	x0, e80 <search_object+0xa8>
     ef0:	str	xzr, [x0, #8]
     ef4:	mov	x0, x20
     ef8:	bl	0 <malloc>
     efc:	str	x0, [sp, #136]
     f00:	cbz	x0, f08 <search_object+0x130>
     f04:	str	xzr, [x0, #8]
     f08:	ldrb	w0, [x19, #32]
     f0c:	ldr	x20, [x19, #24]
     f10:	tbz	w0, #1, f54 <search_object+0x17c>
     f14:	add	x23, sp, #0x80
     f18:	ldr	x2, [x20]
     f1c:	cbnz	x2, f40 <search_object+0x168>
     f20:	ldr	x24, [sp, #128]
     f24:	cbz	x24, f68 <search_object+0x190>
     f28:	ldr	x0, [x24, #8]
     f2c:	cmp	x0, x21
     f30:	b.eq	f68 <search_object+0x190>  // b.none
     f34:	bl	0 <abort>
     f38:	and	w0, w0, #0x7ff
     f3c:	b	ed0 <search_object+0xf8>
     f40:	mov	x1, x23
     f44:	mov	x0, x19
     f48:	add	x20, x20, #0x8
     f4c:	bl	c9c <add_fdes>
     f50:	b	f18 <search_object+0x140>
     f54:	mov	x2, x20
     f58:	add	x1, sp, #0x80
     f5c:	mov	x0, x19
     f60:	bl	c9c <add_fdes>
     f64:	b	f20 <search_object+0x148>
     f68:	ldrb	w0, [x19, #32]
     f6c:	tbnz	w0, #2, 10ac <search_object+0x2d4>
     f70:	ldrh	w1, [x19, #32]
     f74:	adrp	x0, 0 <read_uleb128>
     f78:	adrp	x23, 0 <read_uleb128>
     f7c:	add	x0, x0, #0x0
     f80:	tst	w1, #0x7f8
     f84:	add	x23, x23, #0x0
     f88:	csel	x23, x23, x0, eq  // eq = none
     f8c:	ldr	x25, [sp, #136]
     f90:	cbz	x25, 113c <search_object+0x364>
     f94:	ldr	x28, [x24, #8]
     f98:	adrp	x20, 0 <read_uleb128>
     f9c:	add	x20, x20, #0x0
     fa0:	mov	x26, #0x10                  	// #16
     fa4:	add	x27, x28, #0x2
     fa8:	add	x20, x20, #0x190
     fac:	mov	x3, x20
     fb0:	add	x4, x24, x26
     fb4:	lsl	x27, x27, #3
     fb8:	cmp	x26, x27
     fbc:	b.ne	10c8 <search_object+0x2f0>  // b.any
     fc0:	add	x4, x24, #0x10
     fc4:	add	x5, x25, #0x10
     fc8:	mov	x1, #0x0                   	// #0
     fcc:	mov	x2, #0x0                   	// #0
     fd0:	mov	x0, #0x0                   	// #0
     fd4:	cmp	x28, x0
     fd8:	b.ne	10fc <search_object+0x324>  // b.any
     fdc:	ldr	x0, [sp, #128]
     fe0:	str	x2, [x24, #8]
     fe4:	ldr	x2, [sp, #136]
     fe8:	str	x1, [x25, #8]
     fec:	ldr	x0, [x0, #8]
     ff0:	ldr	x1, [x2, #8]
     ff4:	add	x0, x0, x1
     ff8:	cmp	x0, x21
     ffc:	b.ne	f34 <search_object+0x15c>  // b.any
    1000:	mov	x1, x23
    1004:	mov	x0, x19
    1008:	bl	138 <frame_heapsort>
    100c:	ldr	x27, [sp, #136]
    1010:	ldr	x20, [x27, #8]
    1014:	cbz	x20, 1084 <search_object+0x2ac>
    1018:	ldr	x21, [sp, #128]
    101c:	add	x24, x20, #0x2
    1020:	add	x4, x27, #0x10
    1024:	add	x3, x21, #0x10
    1028:	ldr	x25, [x21, #8]
    102c:	add	x24, x21, x24, lsl #3
    1030:	sub	x20, x20, #0x1
    1034:	ldr	x28, [x4, x20, lsl #3]
    1038:	cbz	x25, 1060 <search_object+0x288>
    103c:	sub	x26, x25, #0x1
    1040:	stp	x3, x4, [sp, #96]
    1044:	mov	x2, x28
    1048:	mov	x0, x19
    104c:	ldr	x1, [x3, x26, lsl #3]
    1050:	blr	x23
    1054:	cmp	w0, #0x0
    1058:	ldp	x3, x4, [sp, #96]
    105c:	b.gt	112c <search_object+0x354>
    1060:	add	x0, x25, x20
    1064:	sub	x24, x24, #0x8
    1068:	add	x0, x0, #0x2
    106c:	str	x28, [x21, x0, lsl #3]
    1070:	cbnz	x20, 1030 <search_object+0x258>
    1074:	ldr	x0, [x21, #8]
    1078:	ldr	x1, [x27, #8]
    107c:	add	x0, x0, x1
    1080:	str	x0, [x21, #8]
    1084:	ldr	x0, [sp, #136]
    1088:	bl	0 <free>
    108c:	ldr	x0, [sp, #128]
    1090:	ldr	x1, [x19, #24]
    1094:	str	x1, [x0]
    1098:	str	x0, [x19, #24]
    109c:	ldrb	w0, [x19, #32]
    10a0:	orr	w0, w0, #0x1
    10a4:	strb	w0, [x19, #32]
    10a8:	b	e80 <search_object+0xa8>
    10ac:	adrp	x23, 0 <read_uleb128>
    10b0:	add	x23, x23, #0x0
    10b4:	b	f8c <search_object+0x1b4>
    10b8:	sub	x20, x20, x4
    10bc:	add	x0, x25, x20
    10c0:	ldr	x20, [x0, #16]
    10c4:	str	xzr, [x0, #16]
    10c8:	cmp	x20, x3
    10cc:	b.eq	10ec <search_object+0x314>  // b.none
    10d0:	ldr	x1, [x24, x26]
    10d4:	stp	x3, x4, [sp, #96]
    10d8:	mov	x0, x19
    10dc:	ldr	x2, [x20]
    10e0:	blr	x23
    10e4:	ldp	x3, x4, [sp, #96]
    10e8:	tbnz	w0, #31, 10b8 <search_object+0x2e0>
    10ec:	str	x20, [x25, x26]
    10f0:	add	x20, x24, x26
    10f4:	add	x26, x26, #0x8
    10f8:	b	fb8 <search_object+0x1e0>
    10fc:	ldr	x6, [x5, x0, lsl #3]
    1100:	ldr	x3, [x4, x0, lsl #3]
    1104:	cbz	x6, 111c <search_object+0x344>
    1108:	add	x6, x2, #0x2
    110c:	add	x2, x2, #0x1
    1110:	str	x3, [x24, x6, lsl #3]
    1114:	add	x0, x0, #0x1
    1118:	b	fd4 <search_object+0x1fc>
    111c:	add	x6, x1, #0x2
    1120:	add	x1, x1, #0x1
    1124:	str	x3, [x25, x6, lsl #3]
    1128:	b	1114 <search_object+0x33c>
    112c:	ldr	x0, [x3, x26, lsl #3]
    1130:	mov	x25, x26
    1134:	str	x0, [x24, x26, lsl #3]
    1138:	b	1038 <search_object+0x260>
    113c:	mov	x2, x24
    1140:	mov	x1, x23
    1144:	mov	x0, x19
    1148:	bl	138 <frame_heapsort>
    114c:	b	108c <search_object+0x2b4>
    1150:	tbz	w0, #2, 11e8 <search_object+0x410>
    1154:	ldr	x27, [x21, #8]
    1158:	add	x25, sp, #0x78
    115c:	add	x26, sp, #0x80
    1160:	mov	x28, #0x0                   	// #0
    1164:	cmp	x28, x27
    1168:	b.cs	e8c <search_object+0xb4>  // b.hs, b.nlast
    116c:	add	x23, x28, x27
    1170:	lsr	x23, x23, #1
    1174:	add	x0, x23, #0x2
    1178:	ldr	x20, [x21, x0, lsl #3]
    117c:	mov	x0, x20
    1180:	bl	6b0 <get_fde_encoding>
    1184:	and	w24, w0, #0xff
    1188:	mov	x1, x19
    118c:	mov	w0, w24
    1190:	bl	238 <base_from_object>
    1194:	mov	x3, x25
    1198:	mov	x1, x0
    119c:	add	x2, x20, #0x8
    11a0:	mov	w0, w24
    11a4:	bl	2f8 <read_encoded_value_with_base>
    11a8:	mov	x2, x0
    11ac:	mov	x3, x26
    11b0:	and	w0, w24, #0xf
    11b4:	mov	x1, #0x0                   	// #0
    11b8:	bl	2f8 <read_encoded_value_with_base>
    11bc:	ldr	x0, [sp, #120]
    11c0:	cmp	x22, x0
    11c4:	b.cc	11e0 <search_object+0x408>  // b.lo, b.ul, b.last
    11c8:	ldr	x1, [sp, #128]
    11cc:	add	x0, x0, x1
    11d0:	cmp	x22, x0
    11d4:	b.cc	e90 <search_object+0xb8>  // b.lo, b.ul, b.last
    11d8:	add	x28, x23, #0x1
    11dc:	mov	x23, x27
    11e0:	mov	x27, x23
    11e4:	b	1164 <search_object+0x38c>
    11e8:	ldrh	w0, [x19, #32]
    11ec:	tst	w0, #0x7f8
    11f0:	b.ne	1240 <search_object+0x468>  // b.any
    11f4:	ldr	x3, [x21, #8]
    11f8:	mov	x2, #0x0                   	// #0
    11fc:	cmp	x3, x2
    1200:	b.ls	e8c <search_object+0xb4>  // b.plast
    1204:	add	x0, x3, x2
    1208:	lsr	x0, x0, #1
    120c:	add	x1, x0, #0x2
    1210:	ldr	x20, [x21, x1, lsl #3]
    1214:	ldr	x1, [x20, #8]
    1218:	cmp	x22, x1
    121c:	b.cc	1238 <search_object+0x460>  // b.lo, b.ul, b.last
    1220:	ldr	x2, [x20, #16]
    1224:	add	x1, x1, x2
    1228:	cmp	x22, x1
    122c:	b.cc	e90 <search_object+0xb8>  // b.lo, b.ul, b.last
    1230:	add	x2, x0, #0x1
    1234:	b	11fc <search_object+0x424>
    1238:	mov	x3, x0
    123c:	b	11fc <search_object+0x424>
    1240:	ubfx	x24, x0, #3, #8
    1244:	mov	x1, x19
    1248:	mov	x0, x24
    124c:	bl	238 <base_from_object>
    1250:	ldr	x23, [x21, #8]
    1254:	mov	x28, x0
    1258:	add	x4, sp, #0x78
    125c:	add	x25, sp, #0x80
    1260:	and	w26, w24, #0xf
    1264:	mov	x27, #0x0                   	// #0
    1268:	cmp	x27, x23
    126c:	b.cs	e8c <search_object+0xb4>  // b.hs, b.nlast
    1270:	add	x19, x27, x23
    1274:	mov	x3, x4
    1278:	mov	x1, x28
    127c:	str	x4, [sp, #96]
    1280:	lsr	x19, x19, #1
    1284:	add	x0, x19, #0x2
    1288:	ldr	x20, [x21, x0, lsl #3]
    128c:	mov	w0, w24
    1290:	add	x2, x20, #0x8
    1294:	bl	2f8 <read_encoded_value_with_base>
    1298:	mov	x1, #0x0                   	// #0
    129c:	mov	x2, x0
    12a0:	mov	x3, x25
    12a4:	mov	w0, w26
    12a8:	bl	2f8 <read_encoded_value_with_base>
    12ac:	ldr	x1, [sp, #120]
    12b0:	ldr	x4, [sp, #96]
    12b4:	cmp	x22, x1
    12b8:	b.cc	12d4 <search_object+0x4fc>  // b.lo, b.ul, b.last
    12bc:	ldr	x0, [sp, #128]
    12c0:	add	x1, x1, x0
    12c4:	cmp	x22, x1
    12c8:	b.cc	e90 <search_object+0xb8>  // b.lo, b.ul, b.last
    12cc:	add	x27, x19, #0x1
    12d0:	mov	x19, x23
    12d4:	mov	x23, x19
    12d8:	b	1268 <search_object+0x490>
    12dc:	mov	x2, x22
    12e0:	mov	x0, x19
    12e4:	bl	558 <linear_search_fdes>
    12e8:	mov	x20, x0
    12ec:	cbnz	x0, e90 <search_object+0xb8>
    12f0:	add	x21, x21, #0x8
    12f4:	ldr	x1, [x21]
    12f8:	cbnz	x1, 12dc <search_object+0x504>
    12fc:	b	e8c <search_object+0xb4>

0000000000001300 <__register_frame_info_bases>:
    1300:	cbz	x0, 13a8 <__register_frame_info_bases+0xa8>
    1304:	stp	x29, x30, [sp, #-48]!
    1308:	mov	x29, sp
    130c:	stp	x19, x20, [sp, #16]
    1310:	mov	x19, x1
    1314:	ldr	w1, [x0]
    1318:	str	x21, [sp, #32]
    131c:	cbz	w1, 1398 <__register_frame_info_bases+0x98>
    1320:	stp	x3, x0, [x19, #16]
    1324:	mov	x0, #0x7f8                 	// #2040
    1328:	mov	x1, #0xffffffffffffffff    	// #-1
    132c:	str	x0, [x19, #32]
    1330:	adrp	x0, 0 <__pthread_key_create>
    1334:	stp	x1, x2, [x19]
    1338:	mov	x20, x0
    133c:	adrp	x21, 0 <read_uleb128>
    1340:	ldr	x1, [x0]
    1344:	cbz	x1, 1354 <__register_frame_info_bases+0x54>
    1348:	add	x0, x21, #0x0
    134c:	add	x0, x0, #0x198
    1350:	bl	0 <pthread_mutex_lock>
    1354:	add	x1, x21, #0x0
    1358:	ldr	x0, [x1, #456]
    135c:	str	x0, [x19, #40]
    1360:	ldr	w0, [x1, #464]
    1364:	str	x19, [x1, #456]
    1368:	cbnz	w0, 1378 <__register_frame_info_bases+0x78>
    136c:	add	x1, x1, #0x1d0
    1370:	mov	w0, #0x1                   	// #1
    1374:	str	w0, [x1]
    1378:	ldr	x0, [x20]
    137c:	cbz	x0, 1398 <__register_frame_info_bases+0x98>
    1380:	add	x0, x21, #0x0
    1384:	ldp	x19, x20, [sp, #16]
    1388:	add	x0, x0, #0x198
    138c:	ldr	x21, [sp, #32]
    1390:	ldp	x29, x30, [sp], #48
    1394:	b	0 <pthread_mutex_unlock>
    1398:	ldp	x19, x20, [sp, #16]
    139c:	ldr	x21, [sp, #32]
    13a0:	ldp	x29, x30, [sp], #48
    13a4:	ret
    13a8:	ret

00000000000013ac <__register_frame_info>:
    13ac:	mov	x3, #0x0                   	// #0
    13b0:	mov	x2, #0x0                   	// #0
    13b4:	b	1300 <__register_frame_info_bases>

00000000000013b8 <__register_frame>:
    13b8:	stp	x29, x30, [sp, #-32]!
    13bc:	mov	x29, sp
    13c0:	str	x19, [sp, #16]
    13c4:	mov	x19, x0
    13c8:	ldr	w0, [x0]
    13cc:	cbz	w0, 13ec <__register_frame+0x34>
    13d0:	mov	x0, #0x30                  	// #48
    13d4:	bl	0 <malloc>
    13d8:	mov	x1, x0
    13dc:	mov	x0, x19
    13e0:	ldr	x19, [sp, #16]
    13e4:	ldp	x29, x30, [sp], #32
    13e8:	b	13ac <__register_frame_info>
    13ec:	ldr	x19, [sp, #16]
    13f0:	ldp	x29, x30, [sp], #32
    13f4:	ret

00000000000013f8 <__register_frame_info_table_bases>:
    13f8:	stp	x29, x30, [sp, #-48]!
    13fc:	mov	x29, sp
    1400:	stp	x19, x20, [sp, #16]
    1404:	mov	x19, x1
    1408:	mov	x1, #0xffffffffffffffff    	// #-1
    140c:	stp	x3, x0, [x19, #16]
    1410:	mov	x0, #0x7fa                 	// #2042
    1414:	str	x0, [x19, #32]
    1418:	adrp	x0, 0 <__pthread_key_create>
    141c:	stp	x1, x2, [x19]
    1420:	mov	x20, x0
    1424:	ldr	x1, [x0]
    1428:	str	x21, [sp, #32]
    142c:	adrp	x21, 0 <read_uleb128>
    1430:	cbz	x1, 1440 <__register_frame_info_table_bases+0x48>
    1434:	add	x0, x21, #0x0
    1438:	add	x0, x0, #0x198
    143c:	bl	0 <pthread_mutex_lock>
    1440:	add	x1, x21, #0x0
    1444:	ldr	x0, [x1, #456]
    1448:	str	x0, [x19, #40]
    144c:	ldr	w0, [x1, #464]
    1450:	str	x19, [x1, #456]
    1454:	cbnz	w0, 1464 <__register_frame_info_table_bases+0x6c>
    1458:	add	x1, x1, #0x1d0
    145c:	mov	w0, #0x1                   	// #1
    1460:	str	w0, [x1]
    1464:	ldr	x0, [x20]
    1468:	cbz	x0, 1484 <__register_frame_info_table_bases+0x8c>
    146c:	add	x0, x21, #0x0
    1470:	ldp	x19, x20, [sp, #16]
    1474:	add	x0, x0, #0x198
    1478:	ldr	x21, [sp, #32]
    147c:	ldp	x29, x30, [sp], #48
    1480:	b	0 <pthread_mutex_unlock>
    1484:	ldp	x19, x20, [sp, #16]
    1488:	ldr	x21, [sp, #32]
    148c:	ldp	x29, x30, [sp], #48
    1490:	ret

0000000000001494 <__register_frame_info_table>:
    1494:	mov	x3, #0x0                   	// #0
    1498:	mov	x2, #0x0                   	// #0
    149c:	b	13f8 <__register_frame_info_table_bases>

00000000000014a0 <__register_frame_table>:
    14a0:	stp	x29, x30, [sp, #-32]!
    14a4:	mov	x29, sp
    14a8:	str	x19, [sp, #16]
    14ac:	mov	x19, x0
    14b0:	mov	x0, #0x30                  	// #48
    14b4:	bl	0 <malloc>
    14b8:	mov	x1, x0
    14bc:	mov	x0, x19
    14c0:	ldr	x19, [sp, #16]
    14c4:	ldp	x29, x30, [sp], #32
    14c8:	b	1494 <__register_frame_info_table>

00000000000014cc <__deregister_frame_info_bases>:
    14cc:	stp	x29, x30, [sp, #-48]!
    14d0:	mov	x29, sp
    14d4:	stp	x19, x20, [sp, #16]
    14d8:	stp	x21, x22, [sp, #32]
    14dc:	cbz	x0, 15b8 <__deregister_frame_info_bases+0xec>
    14e0:	mov	x21, x0
    14e4:	ldr	w0, [x0]
    14e8:	cbz	w0, 15b8 <__deregister_frame_info_bases+0xec>
    14ec:	adrp	x20, 0 <__pthread_key_create>
    14f0:	adrp	x22, 0 <read_uleb128>
    14f4:	ldr	x0, [x20]
    14f8:	cbz	x0, 1508 <__deregister_frame_info_bases+0x3c>
    14fc:	add	x0, x22, #0x0
    1500:	add	x0, x0, #0x198
    1504:	bl	0 <pthread_mutex_lock>
    1508:	add	x0, x22, #0x0
    150c:	add	x0, x0, #0x1c8
    1510:	ldr	x19, [x0]
    1514:	cbnz	x19, 1544 <__deregister_frame_info_bases+0x78>
    1518:	add	x1, x22, #0x0
    151c:	add	x1, x1, #0x1d8
    1520:	ldr	x19, [x1]
    1524:	cbnz	x19, 1570 <__deregister_frame_info_bases+0xa4>
    1528:	ldr	x20, [x20]
    152c:	cbz	x20, 1540 <__deregister_frame_info_bases+0x74>
    1530:	add	x0, x22, #0x0
    1534:	add	x0, x0, #0x198
    1538:	bl	0 <pthread_mutex_unlock>
    153c:	cbnz	x19, 15bc <__deregister_frame_info_bases+0xf0>
    1540:	bl	0 <abort>
    1544:	ldr	x2, [x19, #24]
    1548:	ldr	x1, [x19, #40]
    154c:	cmp	x21, x2
    1550:	b.ne	1564 <__deregister_frame_info_bases+0x98>  // b.any
    1554:	str	x1, [x0]
    1558:	ldr	x20, [x20]
    155c:	cbz	x20, 15bc <__deregister_frame_info_bases+0xf0>
    1560:	b	1530 <__deregister_frame_info_bases+0x64>
    1564:	add	x0, x19, #0x28
    1568:	mov	x19, x1
    156c:	b	1514 <__deregister_frame_info_bases+0x48>
    1570:	ldrb	w2, [x19, #32]
    1574:	ldr	x0, [x19, #24]
    1578:	tbz	w2, #0, 1598 <__deregister_frame_info_bases+0xcc>
    157c:	ldr	x2, [x0]
    1580:	cmp	x21, x2
    1584:	b.ne	15ac <__deregister_frame_info_bases+0xe0>  // b.any
    1588:	ldr	x2, [x19, #40]
    158c:	str	x2, [x1]
    1590:	bl	0 <free>
    1594:	b	1558 <__deregister_frame_info_bases+0x8c>
    1598:	cmp	x21, x0
    159c:	b.ne	15ac <__deregister_frame_info_bases+0xe0>  // b.any
    15a0:	ldr	x0, [x19, #40]
    15a4:	str	x0, [x1]
    15a8:	b	1558 <__deregister_frame_info_bases+0x8c>
    15ac:	add	x1, x19, #0x28
    15b0:	ldr	x19, [x19, #40]
    15b4:	b	1524 <__deregister_frame_info_bases+0x58>
    15b8:	mov	x19, #0x0                   	// #0
    15bc:	mov	x0, x19
    15c0:	ldp	x19, x20, [sp, #16]
    15c4:	ldp	x21, x22, [sp, #32]
    15c8:	ldp	x29, x30, [sp], #48
    15cc:	ret

00000000000015d0 <__deregister_frame_info>:
    15d0:	b	14cc <__deregister_frame_info_bases>

00000000000015d4 <__deregister_frame>:
    15d4:	ldr	w1, [x0]
    15d8:	cbz	w1, 15f0 <__deregister_frame+0x1c>
    15dc:	stp	x29, x30, [sp, #-16]!
    15e0:	mov	x29, sp
    15e4:	bl	14cc <__deregister_frame_info_bases>
    15e8:	ldp	x29, x30, [sp], #16
    15ec:	b	0 <free>
    15f0:	ret

00000000000015f4 <_Unwind_Find_FDE>:
    15f4:	stp	x29, x30, [sp, #-128]!
    15f8:	mov	x29, sp
    15fc:	stp	x21, x22, [sp, #32]
    1600:	mov	x22, x1
    1604:	stp	x23, x24, [sp, #48]
    1608:	adrp	x23, 0 <read_uleb128>
    160c:	add	x1, x23, #0x0
    1610:	mov	x24, x0
    1614:	add	x0, x1, #0x1d0
    1618:	stp	x19, x20, [sp, #16]
    161c:	str	x25, [sp, #64]
    1620:	ldr	w0, [x0]
    1624:	cbz	w0, 1680 <_Unwind_Find_FDE+0x8c>
    1628:	adrp	x21, 0 <__pthread_key_create>
    162c:	ldr	x0, [x21]
    1630:	cbz	x0, 163c <_Unwind_Find_FDE+0x48>
    1634:	add	x0, x1, #0x198
    1638:	bl	0 <pthread_mutex_lock>
    163c:	add	x0, x23, #0x0
    1640:	ldr	x20, [x0, #472]
    1644:	cbz	x20, 1668 <_Unwind_Find_FDE+0x74>
    1648:	ldr	x0, [x20]
    164c:	cmp	x24, x0
    1650:	b.cc	16c8 <_Unwind_Find_FDE+0xd4>  // b.lo, b.ul, b.last
    1654:	mov	x1, x24
    1658:	mov	x0, x20
    165c:	bl	dd8 <search_object>
    1660:	mov	x19, x0
    1664:	cbnz	x0, 1704 <_Unwind_Find_FDE+0x110>
    1668:	add	x20, x23, #0x0
    166c:	add	x25, x20, #0x1d8
    1670:	ldr	x19, [x20, #456]
    1674:	cbnz	x19, 16d0 <_Unwind_Find_FDE+0xdc>
    1678:	ldr	x21, [x21]
    167c:	cbnz	x21, 172c <_Unwind_Find_FDE+0x138>
    1680:	mov	w0, #0x1                   	// #1
    1684:	add	x1, sp, #0x50
    1688:	stp	x24, xzr, [sp, #80]
    168c:	stp	xzr, xzr, [sp, #96]
    1690:	str	xzr, [sp, #112]
    1694:	str	w0, [sp, #120]
    1698:	adrp	x0, 0 <read_uleb128>
    169c:	add	x0, x0, #0x0
    16a0:	bl	0 <dl_iterate_phdr>
    16a4:	tbnz	w0, #31, 17b4 <_Unwind_Find_FDE+0x1c0>
    16a8:	ldr	x19, [sp, #112]
    16ac:	cbz	x19, 178c <_Unwind_Find_FDE+0x198>
    16b0:	ldr	x0, [sp, #88]
    16b4:	str	x0, [x22]
    16b8:	ldr	x0, [sp, #96]
    16bc:	str	x0, [x22, #8]
    16c0:	ldr	x0, [sp, #104]
    16c4:	b	1788 <_Unwind_Find_FDE+0x194>
    16c8:	ldr	x20, [x20, #40]
    16cc:	b	1644 <_Unwind_Find_FDE+0x50>
    16d0:	ldr	x0, [x19, #40]
    16d4:	mov	x1, x24
    16d8:	str	x0, [x20, #456]
    16dc:	mov	x0, x19
    16e0:	bl	dd8 <search_object>
    16e4:	ldr	x2, [x20, #472]
    16e8:	mov	x1, x25
    16ec:	cbnz	x2, 1710 <_Unwind_Find_FDE+0x11c>
    16f0:	str	x2, [x19, #40]
    16f4:	str	x19, [x1]
    16f8:	cbz	x0, 1670 <_Unwind_Find_FDE+0x7c>
    16fc:	mov	x20, x19
    1700:	mov	x19, x0
    1704:	ldr	x21, [x21]
    1708:	cbnz	x21, 1730 <_Unwind_Find_FDE+0x13c>
    170c:	b	1740 <_Unwind_Find_FDE+0x14c>
    1710:	ldr	x4, [x2]
    1714:	ldr	x3, [x19]
    1718:	cmp	x4, x3
    171c:	b.cc	16f0 <_Unwind_Find_FDE+0xfc>  // b.lo, b.ul, b.last
    1720:	add	x1, x2, #0x28
    1724:	ldr	x2, [x2, #40]
    1728:	b	16ec <_Unwind_Find_FDE+0xf8>
    172c:	mov	x20, #0x0                   	// #0
    1730:	add	x0, x23, #0x0
    1734:	add	x0, x0, #0x198
    1738:	bl	0 <pthread_mutex_unlock>
    173c:	cbz	x19, 1680 <_Unwind_Find_FDE+0x8c>
    1740:	ldr	x0, [x20, #8]
    1744:	str	x0, [x22]
    1748:	ldr	x0, [x20, #16]
    174c:	str	x0, [x22, #8]
    1750:	ldrb	w0, [x20, #32]
    1754:	tbnz	w0, #2, 17a8 <_Unwind_Find_FDE+0x1b4>
    1758:	ldrh	w0, [x20, #32]
    175c:	ubfx	x0, x0, #3, #8
    1760:	and	w21, w0, #0xff
    1764:	mov	x1, x20
    1768:	mov	w0, w21
    176c:	bl	238 <base_from_object>
    1770:	add	x3, sp, #0x50
    1774:	mov	x1, x0
    1778:	add	x2, x19, #0x8
    177c:	mov	w0, w21
    1780:	bl	2f8 <read_encoded_value_with_base>
    1784:	ldr	x0, [sp, #80]
    1788:	str	x0, [x22, #16]
    178c:	mov	x0, x19
    1790:	ldp	x19, x20, [sp, #16]
    1794:	ldp	x21, x22, [sp, #32]
    1798:	ldp	x23, x24, [sp, #48]
    179c:	ldr	x25, [sp, #64]
    17a0:	ldp	x29, x30, [sp], #128
    17a4:	ret
    17a8:	mov	x0, x19
    17ac:	bl	6b0 <get_fde_encoding>
    17b0:	b	1760 <_Unwind_Find_FDE+0x16c>
    17b4:	mov	x19, #0x0                   	// #0
    17b8:	b	178c <_Unwind_Find_FDE+0x198>

unwind-sjlj.o:     file format elf64-littleaarch64


unwind-c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <read_uleb128>:
   0:	mov	x2, #0x0                   	// #0
   4:	mov	w3, #0x0                   	// #0
   8:	ldrb	w5, [x0], #1
   c:	and	x4, x5, #0x7f
  10:	lsl	x4, x4, x3
  14:	add	w3, w3, #0x7
  18:	orr	x2, x2, x4
  1c:	tbnz	w5, #7, 8 <read_uleb128+0x8>
  20:	str	x2, [x1]
  24:	ret

0000000000000028 <read_encoded_value>:
  28:	stp	x29, x30, [sp, #-64]!
  2c:	mov	x29, sp
  30:	stp	x19, x20, [sp, #16]
  34:	and	w20, w1, #0xff
  38:	cmp	w20, #0xff
  3c:	stp	x21, x22, [sp, #32]
  40:	b.eq	70 <read_encoded_value+0x48>  // b.none
  44:	and	w22, w20, #0x70
  48:	mov	x19, x2
  4c:	mov	x21, x3
  50:	cmp	w22, #0x30
  54:	b.eq	bc <read_encoded_value+0x94>  // b.none
  58:	b.hi	74 <read_encoded_value+0x4c>  // b.pmore
  5c:	cmp	w22, #0x20
  60:	b.eq	b0 <read_encoded_value+0x88>  // b.none
  64:	b.hi	70 <read_encoded_value+0x48>  // b.pmore
  68:	tst	w20, #0x60
  6c:	b.eq	cc <read_encoded_value+0xa4>  // b.none
  70:	bl	0 <abort>
  74:	cmp	w22, #0x40
  78:	b.eq	c4 <read_encoded_value+0x9c>  // b.none
  7c:	cmp	w22, #0x50
  80:	mov	x6, #0x0                   	// #0
  84:	b.ne	70 <read_encoded_value+0x48>  // b.any
  88:	cmp	w20, #0x50
  8c:	b.ne	d4 <read_encoded_value+0xac>  // b.any
  90:	add	x0, x19, #0x7
  94:	and	x0, x0, #0xfffffffffffffff8
  98:	ldr	x1, [x0], #8
  9c:	ldp	x19, x20, [sp, #16]
  a0:	str	x1, [x21]
  a4:	ldp	x21, x22, [sp, #32]
  a8:	ldp	x29, x30, [sp], #64
  ac:	ret
  b0:	bl	0 <_Unwind_GetTextRelBase>
  b4:	mov	x6, x0
  b8:	b	88 <read_encoded_value+0x60>
  bc:	bl	0 <_Unwind_GetDataRelBase>
  c0:	b	b4 <read_encoded_value+0x8c>
  c4:	bl	0 <_Unwind_GetRegionStart>
  c8:	b	b4 <read_encoded_value+0x8c>
  cc:	mov	x6, #0x0                   	// #0
  d0:	b	88 <read_encoded_value+0x60>
  d4:	and	w1, w20, #0xf
  d8:	cmp	w1, #0xc
  dc:	b.hi	70 <read_encoded_value+0x48>  // b.pmore
  e0:	adrp	x0, 0 <read_uleb128>
  e4:	add	x0, x0, #0x0
  e8:	ldrb	w0, [x0, w1, uxtw]
  ec:	adr	x1, f8 <read_encoded_value+0xd0>
  f0:	add	x0, x1, w0, sxtb #2
  f4:	br	x0
  f8:	add	x1, sp, #0x38
  fc:	mov	x0, x19
 100:	bl	0 <read_uleb128>
 104:	ldr	x1, [sp, #56]
 108:	cbz	x1, 9c <read_encoded_value+0x74>
 10c:	b	14c <read_encoded_value+0x124>
 110:	mov	x0, x19
 114:	mov	x1, #0x0                   	// #0
 118:	mov	w2, #0x0                   	// #0
 11c:	ldrb	w3, [x0], #1
 120:	and	x4, x3, #0x7f
 124:	lsl	x4, x4, x2
 128:	add	w2, w2, #0x7
 12c:	orr	x1, x1, x4
 130:	tbnz	w3, #7, 11c <read_encoded_value+0xf4>
 134:	cmp	w2, #0x3f
 138:	b.hi	108 <read_encoded_value+0xe0>  // b.pmore
 13c:	tbz	w3, #6, 108 <read_encoded_value+0xe0>
 140:	mov	x3, #0xffffffffffffffff    	// #-1
 144:	lsl	x2, x3, x2
 148:	orr	x1, x1, x2
 14c:	cmp	w22, #0x10
 150:	csel	x6, x19, x6, eq  // eq = none
 154:	add	x1, x1, x6
 158:	tbz	w20, #7, 9c <read_encoded_value+0x74>
 15c:	ldr	x1, [x1]
 160:	b	9c <read_encoded_value+0x74>
 164:	mov	x0, x19
 168:	ldrh	w1, [x0], #2
 16c:	b	108 <read_encoded_value+0xe0>
 170:	mov	x0, x19
 174:	ldr	w1, [x0], #4
 178:	b	108 <read_encoded_value+0xe0>
 17c:	mov	x0, x19
 180:	ldrsh	x1, [x0], #2
 184:	b	108 <read_encoded_value+0xe0>
 188:	mov	x0, x19
 18c:	ldrsw	x1, [x0], #4
 190:	b	108 <read_encoded_value+0xe0>
 194:	mov	x0, x19
 198:	ldr	x1, [x0], #8
 19c:	b	108 <read_encoded_value+0xe0>

00000000000001a0 <__gcc_personality_v0>:
 1a0:	stp	x29, x30, [sp, #-176]!
 1a4:	cmp	w0, #0x1
 1a8:	mov	x29, sp
 1ac:	stp	x19, x20, [sp, #16]
 1b0:	stp	x21, x22, [sp, #32]
 1b4:	stp	x23, x24, [sp, #48]
 1b8:	stp	x25, x26, [sp, #64]
 1bc:	str	wzr, [sp, #92]
 1c0:	b.ne	380 <__gcc_personality_v0+0x1e0>  // b.any
 1c4:	tbnz	w1, #1, 1e4 <__gcc_personality_v0+0x44>
 1c8:	mov	w0, #0x8                   	// #8
 1cc:	ldp	x19, x20, [sp, #16]
 1d0:	ldp	x21, x22, [sp, #32]
 1d4:	ldp	x23, x24, [sp, #48]
 1d8:	ldp	x25, x26, [sp, #64]
 1dc:	ldp	x29, x30, [sp], #176
 1e0:	ret
 1e4:	mov	x21, x3
 1e8:	mov	x20, x4
 1ec:	mov	x0, x4
 1f0:	bl	0 <_Unwind_GetLanguageSpecificData>
 1f4:	mov	x19, x0
 1f8:	cbz	x0, 1c8 <__gcc_personality_v0+0x28>
 1fc:	cbz	x20, 310 <__gcc_personality_v0+0x170>
 200:	mov	x0, x20
 204:	bl	0 <_Unwind_GetRegionStart>
 208:	mov	x2, x0
 20c:	mov	x0, x19
 210:	str	x2, [sp, #128]
 214:	ldrb	w1, [x0], #1
 218:	cmp	w1, #0xff
 21c:	b.eq	318 <__gcc_personality_v0+0x178>  // b.none
 220:	mov	x2, x0
 224:	add	x3, sp, #0x88
 228:	mov	x0, x20
 22c:	bl	28 <read_encoded_value>
 230:	ldrb	w1, [x0], #1
 234:	add	x22, sp, #0x78
 238:	strb	w1, [sp, #168]
 23c:	cmp	w1, #0xff
 240:	b.eq	320 <__gcc_personality_v0+0x180>  // b.none
 244:	mov	x1, x22
 248:	bl	0 <read_uleb128>
 24c:	ldr	x1, [sp, #120]
 250:	add	x1, x0, x1
 254:	str	x1, [sp, #152]
 258:	ldrb	w1, [x0], #1
 25c:	add	x26, sp, #0x60
 260:	strb	w1, [sp, #169]
 264:	mov	x1, x22
 268:	add	x23, sp, #0x68
 26c:	add	x24, sp, #0x70
 270:	bl	0 <read_uleb128>
 274:	mov	x19, x0
 278:	ldr	x0, [sp, #120]
 27c:	add	x1, sp, #0x5c
 280:	add	x0, x19, x0
 284:	str	x0, [sp, #160]
 288:	mov	x0, x20
 28c:	bl	0 <_Unwind_GetIPInfo>
 290:	ldr	w1, [sp, #92]
 294:	cmp	w1, #0x0
 298:	cset	x25, eq  // eq = none
 29c:	sub	x25, x0, x25
 2a0:	ldr	x0, [sp, #160]
 2a4:	cmp	x0, x19
 2a8:	b.ls	1c8 <__gcc_personality_v0+0x28>  // b.plast
 2ac:	ldrb	w1, [sp, #169]
 2b0:	mov	x2, x19
 2b4:	mov	x3, x26
 2b8:	mov	x0, #0x0                   	// #0
 2bc:	bl	28 <read_encoded_value>
 2c0:	mov	x2, x0
 2c4:	ldrb	w1, [sp, #169]
 2c8:	mov	x3, x23
 2cc:	mov	x0, #0x0                   	// #0
 2d0:	bl	28 <read_encoded_value>
 2d4:	mov	x2, x0
 2d8:	ldrb	w1, [sp, #169]
 2dc:	mov	x3, x24
 2e0:	mov	x0, #0x0                   	// #0
 2e4:	bl	28 <read_encoded_value>
 2e8:	mov	x1, x22
 2ec:	bl	0 <read_uleb128>
 2f0:	mov	x19, x0
 2f4:	ldr	x0, [sp, #96]
 2f8:	ldr	x1, [sp, #128]
 2fc:	add	x1, x1, x0
 300:	cmp	x1, x25
 304:	b.ls	328 <__gcc_personality_v0+0x188>  // b.plast
 308:	ldr	x19, [sp, #160]
 30c:	b	2a0 <__gcc_personality_v0+0x100>
 310:	mov	x2, #0x0                   	// #0
 314:	b	20c <__gcc_personality_v0+0x6c>
 318:	str	x2, [sp, #136]
 31c:	b	230 <__gcc_personality_v0+0x90>
 320:	str	xzr, [sp, #152]
 324:	b	258 <__gcc_personality_v0+0xb8>
 328:	ldr	x0, [sp, #104]
 32c:	add	x1, x1, x0
 330:	cmp	x1, x25
 334:	b.ls	2a0 <__gcc_personality_v0+0x100>  // b.plast
 338:	ldr	x0, [sp, #112]
 33c:	cbz	x0, 1c8 <__gcc_personality_v0+0x28>
 340:	ldr	x19, [sp, #136]
 344:	adds	x19, x0, x19
 348:	b.eq	1c8 <__gcc_personality_v0+0x28>  // b.none
 34c:	mov	x2, x21
 350:	mov	x0, x20
 354:	mov	w1, #0x0                   	// #0
 358:	bl	0 <_Unwind_SetGR>
 35c:	mov	x2, #0x0                   	// #0
 360:	mov	x0, x20
 364:	mov	w1, #0x1                   	// #1
 368:	bl	0 <_Unwind_SetGR>
 36c:	mov	x0, x20
 370:	mov	x1, x19
 374:	bl	0 <_Unwind_SetIP>
 378:	mov	w0, #0x7                   	// #7
 37c:	b	1cc <__gcc_personality_v0+0x2c>
 380:	mov	w0, #0x3                   	// #3
 384:	b	1cc <__gcc_personality_v0+0x2c>

emutls.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <emutls_init>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x1, 0 <emutls_init>
   8:	adrp	x0, 0 <emutls_init>
   c:	mov	x29, sp
  10:	add	x1, x1, #0x0
  14:	add	x0, x0, #0x0
  18:	bl	0 <pthread_key_create>
  1c:	cbz	w0, 24 <emutls_init+0x24>
  20:	bl	0 <abort>
  24:	ldp	x29, x30, [sp], #16
  28:	ret

000000000000002c <emutls_destroy>:
  2c:	stp	x29, x30, [sp, #-48]!
  30:	mov	x29, sp
  34:	stp	x21, x22, [sp, #32]
  38:	mov	x21, x0
  3c:	stp	x19, x20, [sp, #16]
  40:	mov	x19, x0
  44:	mov	x20, #0x0                   	// #0
  48:	ldr	x22, [x21], #8
  4c:	cmp	x20, x22
  50:	b.ne	68 <emutls_destroy+0x3c>  // b.any
  54:	mov	x0, x19
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldp	x21, x22, [sp, #32]
  60:	ldp	x29, x30, [sp], #48
  64:	b	0 <free>
  68:	ldr	x0, [x21, x20, lsl #3]
  6c:	cbz	x0, 78 <emutls_destroy+0x4c>
  70:	ldur	x0, [x0, #-8]
  74:	bl	0 <free>
  78:	add	x20, x20, #0x1
  7c:	b	4c <emutls_destroy+0x20>

0000000000000080 <emutls_alloc>:
  80:	stp	x29, x30, [sp, #-48]!
  84:	mov	x29, sp
  88:	stp	x19, x20, [sp, #16]
  8c:	mov	x20, x0
  90:	ldr	x19, [x0, #8]
  94:	str	x21, [sp, #32]
  98:	ldr	x21, [x0]
  9c:	cmp	x19, #0x8
  a0:	b.hi	e0 <emutls_alloc+0x60>  // b.pmore
  a4:	add	x0, x21, #0x8
  a8:	bl	0 <malloc>
  ac:	cbnz	x0, b4 <emutls_alloc+0x34>
  b0:	bl	0 <abort>
  b4:	add	x3, x0, #0x8
  b8:	str	x0, [x0]
  bc:	ldr	x1, [x20, #24]
  c0:	mov	x2, x21
  c4:	cbz	x1, 108 <emutls_alloc+0x88>
  c8:	mov	x0, x3
  cc:	bl	0 <memcpy>
  d0:	ldp	x19, x20, [sp, #16]
  d4:	ldr	x21, [sp, #32]
  d8:	ldp	x29, x30, [sp], #48
  dc:	ret
  e0:	add	x0, x19, x21
  e4:	add	x0, x0, #0x7
  e8:	bl	0 <malloc>
  ec:	cbz	x0, b0 <emutls_alloc+0x30>
  f0:	add	x3, x19, #0x7
  f4:	neg	x19, x19
  f8:	add	x3, x0, x3
  fc:	and	x3, x3, x19
 100:	stur	x0, [x3, #-8]
 104:	b	bc <emutls_alloc+0x3c>
 108:	mov	x0, x3
 10c:	mov	w1, #0x0                   	// #0
 110:	bl	0 <memset>
 114:	b	d0 <emutls_alloc+0x50>

0000000000000118 <__emutls_get_address>:
 118:	stp	x29, x30, [sp, #-64]!
 11c:	adrp	x1, 0 <__pthread_key_create>
 120:	mov	x29, sp
 124:	ldr	x1, [x1]
 128:	stp	x19, x20, [sp, #16]
 12c:	stp	x21, x22, [sp, #32]
 130:	mov	x21, x0
 134:	stp	x23, x24, [sp, #48]
 138:	cbnz	x1, 164 <__emutls_get_address+0x4c>
 13c:	ldr	x1, [x0, #16]
 140:	cbnz	x1, 14c <__emutls_get_address+0x34>
 144:	bl	80 <emutls_alloc>
 148:	str	x0, [x21, #16]
 14c:	ldr	x0, [x21, #16]
 150:	ldp	x19, x20, [sp, #16]
 154:	ldp	x21, x22, [sp, #32]
 158:	ldp	x23, x24, [sp, #48]
 15c:	ldp	x29, x30, [sp], #64
 160:	ret
 164:	add	x22, x0, #0x10
 168:	ldar	x20, [x22]
 16c:	adrp	x23, 0 <emutls_init>
 170:	cbnz	x20, 1b4 <__emutls_get_address+0x9c>
 174:	adrp	x1, 0 <emutls_init>
 178:	add	x1, x1, #0x0
 17c:	add	x19, x23, #0x0
 180:	add	x0, x19, #0x4
 184:	bl	0 <pthread_once>
 188:	add	x0, x19, #0x8
 18c:	bl	0 <pthread_mutex_lock>
 190:	ldr	x20, [x21, #16]
 194:	cbnz	x20, 1a8 <__emutls_get_address+0x90>
 198:	ldr	x20, [x19, #56]
 19c:	add	x20, x20, #0x1
 1a0:	str	x20, [x19, #56]
 1a4:	stlr	x20, [x22]
 1a8:	add	x0, x23, #0x0
 1ac:	add	x0, x0, #0x8
 1b0:	bl	0 <pthread_mutex_unlock>
 1b4:	ldr	w0, [x23]
 1b8:	bl	0 <pthread_getspecific>
 1bc:	mov	x19, x0
 1c0:	cbnz	x0, 20c <__emutls_get_address+0xf4>
 1c4:	add	x0, x20, #0x21
 1c8:	mov	x1, #0x8                   	// #8
 1cc:	add	x22, x20, #0x20
 1d0:	bl	0 <calloc>
 1d4:	mov	x19, x0
 1d8:	cbnz	x0, 1e0 <__emutls_get_address+0xc8>
 1dc:	bl	0 <abort>
 1e0:	str	x22, [x0]
 1e4:	ldr	w0, [x23]
 1e8:	mov	x1, x19
 1ec:	bl	0 <pthread_setspecific>
 1f0:	lsl	x20, x20, #3
 1f4:	ldr	x0, [x19, x20]
 1f8:	cbnz	x0, 150 <__emutls_get_address+0x38>
 1fc:	mov	x0, x21
 200:	bl	80 <emutls_alloc>
 204:	str	x0, [x19, x20]
 208:	b	150 <__emutls_get_address+0x38>
 20c:	ldr	x24, [x0]
 210:	cmp	x24, x20
 214:	b.cs	1f0 <__emutls_get_address+0xd8>  // b.hs, b.nlast
 218:	lsl	x22, x24, #1
 21c:	cmp	x20, x24, lsl #1
 220:	b.ls	228 <__emutls_get_address+0x110>  // b.plast
 224:	add	x22, x20, #0x20
 228:	add	x1, x22, #0x1
 22c:	mov	x0, x19
 230:	lsl	x1, x1, #3
 234:	bl	0 <realloc>
 238:	mov	x19, x0
 23c:	cbz	x0, 1dc <__emutls_get_address+0xc4>
 240:	sub	x2, x22, x24
 244:	str	x22, [x0], #8
 248:	mov	w1, #0x0                   	// #0
 24c:	lsl	x2, x2, #3
 250:	add	x0, x0, x24, lsl #3
 254:	bl	0 <memset>
 258:	b	1e4 <__emutls_get_address+0xcc>

000000000000025c <__emutls_register_common>:
 25c:	ldr	x4, [x0]
 260:	cmp	x4, x1
 264:	b.cs	270 <__emutls_register_common+0x14>  // b.hs, b.nlast
 268:	str	x1, [x0]
 26c:	str	xzr, [x0, #24]
 270:	ldr	x4, [x0, #8]
 274:	cmp	x4, x2
 278:	b.cs	280 <__emutls_register_common+0x24>  // b.hs, b.nlast
 27c:	str	x2, [x0, #8]
 280:	cbz	x3, 294 <__emutls_register_common+0x38>
 284:	ldr	x2, [x0]
 288:	cmp	x2, x1
 28c:	b.ne	294 <__emutls_register_common+0x38>  // b.any
 290:	str	x3, [x0, #24]
 294:	ret
