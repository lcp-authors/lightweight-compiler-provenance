In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libss.a_clang_-O1:

ss_err.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <initialize_ss_error_table>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x0, 0 <_et_list>
   8:	add	x0, x0, #0x0
   c:	mov	x29, sp
  10:	bl	1c <initialize_ss_error_table_r>
  14:	ldp	x29, x30, [sp], #16
  18:	ret

000000000000001c <initialize_ss_error_table_r>:
  1c:	stp	x29, x30, [sp, #-32]!
  20:	ldr	x9, [x0]
  24:	str	x19, [sp, #16]
  28:	mov	x19, x0
  2c:	mov	x29, sp
  30:	cbz	x9, 58 <initialize_ss_error_table_r+0x3c>
  34:	adrp	x8, 0 <initialize_ss_error_table>
  38:	add	x8, x8, #0x0
  3c:	mov	x19, x9
  40:	ldr	x9, [x9, #8]
  44:	ldr	x9, [x9]
  48:	cmp	x9, x8
  4c:	b.eq	84 <initialize_ss_error_table_r+0x68>  // b.none
  50:	ldr	x9, [x19]
  54:	cbnz	x9, 3c <initialize_ss_error_table_r+0x20>
  58:	mov	w0, #0x10                  	// #16
  5c:	bl	0 <malloc>
  60:	cbnz	x0, 74 <initialize_ss_error_table_r+0x58>
  64:	adrp	x0, 0 <initialize_ss_error_table>
  68:	add	x0, x0, #0x0
  6c:	ldr	x8, [x0, #8]
  70:	cbnz	x8, 84 <initialize_ss_error_table_r+0x68>
  74:	adrp	x8, 68 <initialize_ss_error_table_r+0x4c>
  78:	add	x8, x8, #0x0
  7c:	stp	xzr, x8, [x0]
  80:	str	x0, [x19]
  84:	ldr	x19, [sp, #16]
  88:	ldp	x29, x30, [sp], #32
  8c:	ret

std_rqs.o:     file format elf64-littleaarch64


invocation.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_create_invocation>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	str	x27, [sp, #16]
   8:	stp	x26, x25, [sp, #32]
   c:	stp	x24, x23, [sp, #48]
  10:	stp	x22, x21, [sp, #64]
  14:	stp	x20, x19, [sp, #80]
  18:	str	wzr, [x4]
  1c:	adrp	x27, 0 <_ss_table>
  20:	ldr	x24, [x27]
  24:	mov	x22, x0
  28:	mov	w0, #0x90                  	// #144
  2c:	mov	x29, sp
  30:	mov	x26, x4
  34:	mov	x19, x3
  38:	mov	x23, x2
  3c:	mov	x25, x1
  40:	bl	0 <malloc>
  44:	mov	x20, x0
  48:	cbnz	x24, 5c <ss_create_invocation+0x5c>
  4c:	mov	w0, #0x10                  	// #16
  50:	bl	0 <malloc>
  54:	mov	x24, x0
  58:	stp	xzr, xzr, [x0]
  5c:	bl	0 <initialize_ss_error_table>
  60:	mov	w8, #0x1                   	// #1
  64:	ldr	x9, [x24, x8, lsl #3]
  68:	mov	x21, x8
  6c:	add	x8, x8, #0x1
  70:	cbnz	x9, 64 <ss_create_invocation+0x64>
  74:	lsl	x8, x21, #3
  78:	add	x8, x8, #0x10
  7c:	and	x1, x8, #0x7fffffff8
  80:	mov	x0, x24
  84:	bl	0 <realloc>
  88:	cbz	x0, 124 <ss_create_invocation+0x124>
  8c:	add	w8, w21, #0x1
  90:	mov	x24, x0
  94:	str	xzr, [x0, w8, uxtw #3]
  98:	str	x20, [x0, w21, uxtw #3]
  9c:	mov	w0, #0x8                   	// #8
  a0:	stp	x22, x25, [x20]
  a4:	stp	xzr, xzr, [x20, #24]
  a8:	bl	0 <malloc>
  ac:	str	xzr, [x0]
  b0:	stp	x0, x23, [x20, #40]
  b4:	mov	x0, x22
  b8:	bl	0 <strlen>
  bc:	add	w0, w0, #0x4
  c0:	bl	0 <malloc>
  c4:	mov	x1, x22
  c8:	str	x0, [x20, #56]
  cc:	bl	0 <strcpy>
  d0:	ldr	x22, [x20, #56]
  d4:	mov	x0, x22
  d8:	bl	0 <strlen>
  dc:	mov	w8, #0x203a                	// #8250
  e0:	movk	w8, #0x20, lsl #16
  e4:	str	w8, [x22, x0]
  e8:	ldrb	w8, [x20, #80]
  ec:	mov	w0, #0x2                   	// #2
  f0:	mov	w1, #0x8                   	// #8
  f4:	str	xzr, [x20, #72]
  f8:	and	w8, w8, #0xfc
  fc:	strb	w8, [x20, #80]
 100:	bl	0 <calloc>
 104:	movi	v0.2d, #0x0
 108:	str	x0, [x20, #64]
 10c:	stp	x19, xzr, [x0]
 110:	stur	q0, [x20, #88]
 114:	stur	q0, [x20, #104]
 118:	stur	q0, [x20, #120]
 11c:	str	x24, [x27]
 120:	b	138 <ss_create_invocation+0x138>
 124:	mov	w8, #0xc                   	// #12
 128:	mov	x0, x20
 12c:	str	w8, [x26]
 130:	bl	0 <free>
 134:	mov	w21, wzr
 138:	mov	w0, w21
 13c:	ldp	x20, x19, [sp, #80]
 140:	ldp	x22, x21, [sp, #64]
 144:	ldp	x24, x23, [sp, #48]
 148:	ldp	x26, x25, [sp, #32]
 14c:	ldr	x27, [sp, #16]
 150:	ldp	x29, x30, [sp], #96
 154:	ret

0000000000000158 <ss_delete_invocation>:
 158:	sub	sp, sp, #0x30
 15c:	adrp	x8, 0 <_ss_table>
 160:	ldr	x8, [x8]
 164:	stp	x29, x30, [sp, #16]
 168:	stp	x20, x19, [sp, #32]
 16c:	mov	w20, w0
 170:	ldr	x19, [x8, w0, sxtw #3]
 174:	add	x29, sp, #0x10
 178:	ldr	x0, [x19, #56]
 17c:	bl	0 <free>
 180:	ldr	x0, [x19, #64]
 184:	bl	0 <free>
 188:	ldr	x0, [x19, #40]
 18c:	ldr	x1, [x0]
 190:	cbz	x1, 1a4 <ss_delete_invocation+0x4c>
 194:	sub	x2, x29, #0x4
 198:	mov	w0, w20
 19c:	bl	0 <ss_delete_info_dir>
 1a0:	b	188 <ss_delete_invocation+0x30>
 1a4:	bl	0 <free>
 1a8:	mov	x0, x19
 1ac:	bl	0 <free>
 1b0:	ldp	x20, x19, [sp, #32]
 1b4:	ldp	x29, x30, [sp, #16]
 1b8:	add	sp, sp, #0x30
 1bc:	ret

help.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_help>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	adrp	x8, 0 <_ss_table>
   8:	ldr	x8, [x8]
   c:	stp	x26, x25, [sp, #32]
  10:	stp	x24, x23, [sp, #48]
  14:	stp	x22, x21, [sp, #64]
  18:	stp	x20, x19, [sp, #80]
  1c:	ldr	x23, [x8, w2, sxtw #3]
  20:	mov	w19, w2
  24:	cmp	w0, #0x2
  28:	mov	x20, x1
  2c:	str	x27, [sp, #16]
  30:	mov	x29, sp
  34:	b.eq	50 <ss_help+0x50>  // b.none
  38:	cmp	w0, #0x1
  3c:	b.ne	10c <ss_help+0x10c>  // b.any
  40:	mov	x1, x20
  44:	mov	w2, w19
  48:	bl	0 <ss_list_requests>
  4c:	b	240 <ss_help+0x240>
  50:	ldr	x8, [x23, #40]
  54:	cbz	x8, 15c <ss_help+0x15c>
  58:	ldr	x8, [x8]
  5c:	cbz	x8, 15c <ss_help+0x15c>
  60:	ldr	x8, [x23, #40]
  64:	ldr	x0, [x8]
  68:	cbz	x0, 18c <ss_help+0x18c>
  6c:	mov	w26, #0x692e                	// #26926
  70:	mov	x24, xzr
  74:	mov	w25, #0x2f                  	// #47
  78:	movk	w26, #0x666e, lsl #16
  7c:	mov	w27, #0x6f                  	// #111
  80:	bl	0 <strlen>
  84:	ldr	x8, [x20, #8]
  88:	mov	x21, x0
  8c:	mov	x0, x8
  90:	bl	0 <strlen>
  94:	add	x8, x21, x0
  98:	add	x0, x8, #0x7
  9c:	bl	0 <malloc>
  a0:	cbz	x0, 20c <ss_help+0x20c>
  a4:	ldr	x8, [x23, #40]
  a8:	mov	x22, x0
  ac:	ldr	x1, [x8, x24]
  b0:	bl	0 <strcpy>
  b4:	bl	0 <strlen>
  b8:	strh	w25, [x22, x0]
  bc:	ldr	x1, [x20, #8]
  c0:	mov	x0, x22
  c4:	bl	0 <strcat>
  c8:	bl	0 <strlen>
  cc:	add	x8, x22, x0
  d0:	mov	x0, x22
  d4:	mov	w1, wzr
  d8:	str	w26, [x8]
  dc:	strh	w27, [x8, #4]
  e0:	bl	0 <open>
  e4:	mov	w21, w0
  e8:	mov	x0, x22
  ec:	bl	0 <free>
  f0:	tbz	w21, #31, 190 <ss_help+0x190>
  f4:	ldr	x8, [x23, #40]
  f8:	add	x8, x8, x24
  fc:	ldr	x0, [x8, #8]
 100:	add	x24, x24, #0x8
 104:	cbnz	x0, 80 <ss_help+0x80>
 108:	b	190 <ss_help+0x190>
 10c:	ldr	x20, [x23, #32]
 110:	mov	x0, x20
 114:	bl	0 <strlen>
 118:	lsl	x8, x0, #1
 11c:	add	x0, x8, #0x50
 120:	bl	0 <malloc>
 124:	cbz	x0, 174 <ss_help+0x174>
 128:	adrp	x1, 0 <ss_help>
 12c:	add	x1, x1, #0x0
 130:	mov	x2, x20
 134:	mov	x3, x20
 138:	mov	x21, x0
 13c:	bl	0 <sprintf>
 140:	mov	w0, w19
 144:	mov	x1, xzr
 148:	mov	x2, x21
 14c:	bl	0 <ss_perror>
 150:	mov	x0, x21
 154:	bl	0 <free>
 158:	b	240 <ss_help+0x240>
 15c:	mov	w1, #0x6d03                	// #27907
 160:	movk	w1, #0xb, lsl #16
 164:	mov	w0, w19
 168:	mov	x2, xzr
 16c:	bl	0 <ss_perror>
 170:	b	240 <ss_help+0x240>
 174:	adrp	x2, 0 <ss_help>
 178:	add	x2, x2, #0x0
 17c:	mov	w0, w19
 180:	mov	x1, xzr
 184:	bl	0 <ss_perror>
 188:	b	240 <ss_help+0x240>
 18c:	mov	w21, #0xffffffff            	// #-1
 190:	tbnz	w21, #31, 1cc <ss_help+0x1cc>
 194:	bl	0 <fork>
 198:	mov	w20, w0
 19c:	cbz	w0, 218 <ss_help+0x218>
 1a0:	cmn	w20, #0x1
 1a4:	b.ne	228 <ss_help+0x228>  // b.any
 1a8:	bl	0 <__errno_location>
 1ac:	ldrsw	x1, [x0]
 1b0:	adrp	x2, 0 <ss_help>
 1b4:	add	x2, x2, #0x0
 1b8:	mov	w0, w19
 1bc:	bl	0 <ss_perror>
 1c0:	mov	w0, w21
 1c4:	bl	0 <close>
 1c8:	b	240 <ss_help+0x240>
 1cc:	ldr	x20, [x20, #8]
 1d0:	mov	x0, x20
 1d4:	bl	0 <strlen>
 1d8:	add	x0, x0, #0x13
 1dc:	bl	0 <malloc>
 1e0:	adrp	x8, 0 <ss_help>
 1e4:	add	x8, x8, #0x0
 1e8:	ldr	q0, [x8]
 1ec:	mov	w8, #0x726f                	// #29295
 1f0:	movk	w8, #0x20, lsl #16
 1f4:	mov	x1, x20
 1f8:	mov	x21, x0
 1fc:	stur	w8, [x0, #15]
 200:	str	q0, [x0]
 204:	bl	0 <strcat>
 208:	b	140 <ss_help+0x140>
 20c:	adrp	x2, 0 <ss_help>
 210:	add	x2, x2, #0x0
 214:	b	17c <ss_help+0x17c>
 218:	mov	w0, w21
 21c:	mov	w1, wzr
 220:	bl	0 <dup2>
 224:	bl	0 <ss_page_stdin>
 228:	mov	w0, w21
 22c:	bl	0 <close>
 230:	mov	x0, xzr
 234:	bl	0 <wait>
 238:	cmp	w0, w20
 23c:	b.ne	230 <ss_help+0x230>  // b.any
 240:	ldp	x20, x19, [sp, #80]
 244:	ldp	x22, x21, [sp, #64]
 248:	ldp	x24, x23, [sp, #48]
 24c:	ldp	x26, x25, [sp, #32]
 250:	ldr	x27, [sp, #16]
 254:	ldp	x29, x30, [sp], #96
 258:	ret

000000000000025c <ss_add_info_dir>:
 25c:	stp	x29, x30, [sp, #-64]!
 260:	mov	w8, #0x6d03                	// #27907
 264:	stp	x20, x19, [sp, #48]
 268:	mov	x19, x2
 26c:	movk	w8, #0xb, lsl #16
 270:	str	x23, [sp, #16]
 274:	stp	x22, x21, [sp, #32]
 278:	mov	x29, sp
 27c:	cbz	x1, 314 <ss_add_info_dir+0xb8>
 280:	ldrb	w9, [x1]
 284:	mov	x20, x1
 288:	cbz	w9, 314 <ss_add_info_dir+0xb8>
 28c:	adrp	x8, 0 <_ss_table>
 290:	ldr	x8, [x8]
 294:	ldr	x22, [x8, w0, sxtw #3]
 298:	mov	x0, x20
 29c:	bl	0 <opendir>
 2a0:	cbz	x0, 30c <ss_add_info_dir+0xb0>
 2a4:	bl	0 <closedir>
 2a8:	ldr	x0, [x22, #40]
 2ac:	mov	x8, xzr
 2b0:	mov	x23, #0xffffffffffffffff    	// #-1
 2b4:	ldr	x9, [x0, x8]
 2b8:	add	x23, x23, #0x1
 2bc:	add	x8, x8, #0x8
 2c0:	cbnz	x9, 2b4 <ss_add_info_dir+0x58>
 2c4:	add	x8, x8, #0x8
 2c8:	and	x1, x8, #0x7fffffff8
 2cc:	bl	0 <realloc>
 2d0:	cbz	x0, 308 <ss_add_info_dir+0xac>
 2d4:	add	w8, w23, #0x1
 2d8:	mov	x21, x0
 2dc:	str	x0, [x22, #40]
 2e0:	str	xzr, [x0, w8, uxtw #3]
 2e4:	mov	x0, x20
 2e8:	bl	0 <strlen>
 2ec:	add	w0, w0, #0x1
 2f0:	bl	0 <malloc>
 2f4:	mov	x1, x20
 2f8:	str	x0, [x21, w23, uxtw #3]
 2fc:	bl	0 <strcpy>
 300:	mov	w8, wzr
 304:	b	314 <ss_add_info_dir+0xb8>
 308:	str	xzr, [x22, #40]
 30c:	bl	0 <__errno_location>
 310:	ldr	w8, [x0]
 314:	str	w8, [x19]
 318:	ldp	x20, x19, [sp, #48]
 31c:	ldp	x22, x21, [sp, #32]
 320:	ldr	x23, [sp, #16]
 324:	ldp	x29, x30, [sp], #64
 328:	ret

000000000000032c <ss_delete_info_dir>:
 32c:	stp	x29, x30, [sp, #-48]!
 330:	adrp	x8, 0 <_ss_table>
 334:	ldr	x8, [x8]
 338:	stp	x22, x21, [sp, #16]
 33c:	stp	x20, x19, [sp, #32]
 340:	mov	w21, #0x6d03                	// #27907
 344:	ldr	x8, [x8, w0, sxtw #3]
 348:	mov	x19, x2
 34c:	movk	w21, #0xb, lsl #16
 350:	mov	x29, sp
 354:	ldr	x8, [x8, #40]
 358:	ldr	x0, [x8]
 35c:	cbz	x0, 39c <ss_delete_info_dir+0x70>
 360:	mov	x20, x1
 364:	add	x22, x8, #0x8
 368:	mov	x1, x20
 36c:	bl	0 <strcmp>
 370:	cbz	w0, 380 <ss_delete_info_dir+0x54>
 374:	ldr	x0, [x22], #8
 378:	cbnz	x0, 368 <ss_delete_info_dir+0x3c>
 37c:	b	39c <ss_delete_info_dir+0x70>
 380:	ldur	x8, [x22, #-8]
 384:	cbz	x8, 398 <ss_delete_info_dir+0x6c>
 388:	ldr	x8, [x22]
 38c:	stur	x8, [x22, #-8]
 390:	add	x22, x22, #0x8
 394:	cbnz	x8, 388 <ss_delete_info_dir+0x5c>
 398:	mov	w21, wzr
 39c:	str	w21, [x19]
 3a0:	ldp	x20, x19, [sp, #32]
 3a4:	ldp	x22, x21, [sp, #16]
 3a8:	ldp	x29, x30, [sp], #48
 3ac:	ret

execute_cmd.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_execute_command>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	stp	x22, x21, [sp, #32]
   8:	stp	x20, x19, [sp, #48]
   c:	mov	x21, x1
  10:	mov	w19, w0
  14:	mov	x22, xzr
  18:	mov	w20, #0xffffffff            	// #-1
  1c:	str	x23, [sp, #16]
  20:	mov	x29, sp
  24:	ldr	x8, [x21, x22]
  28:	add	x22, x22, #0x8
  2c:	add	w20, w20, #0x1
  30:	cbnz	x8, 24 <ss_execute_command+0x24>
  34:	add	x8, x21, x22
  38:	sub	x8, x8, #0x8
  3c:	mov	x0, x22
  40:	str	x8, [x29, #24]
  44:	bl	0 <malloc>
  48:	mov	x1, x21
  4c:	mov	x2, x22
  50:	mov	x23, x0
  54:	str	x0, [x29, #24]
  58:	bl	0 <memcpy>
  5c:	add	x2, x29, #0x18
  60:	mov	w0, w19
  64:	mov	w1, w20
  68:	bl	90 <really_execute_command>
  6c:	mov	w19, w0
  70:	mov	x0, x23
  74:	bl	0 <free>
  78:	mov	w0, w19
  7c:	ldp	x20, x19, [sp, #48]
  80:	ldp	x22, x21, [sp, #32]
  84:	ldr	x23, [sp, #16]
  88:	ldp	x29, x30, [sp], #64
  8c:	ret

0000000000000090 <really_execute_command>:
  90:	stp	x29, x30, [sp, #-64]!
  94:	adrp	x8, 0 <_ss_table>
  98:	ldr	x8, [x8]
  9c:	stp	x22, x21, [sp, #32]
  a0:	stp	x20, x19, [sp, #48]
  a4:	mov	w22, w0
  a8:	ldr	x8, [x8, w0, sxtw #3]
  ac:	mov	w20, #0x6d04                	// #27908
  b0:	movk	w20, #0xb, lsl #16
  b4:	str	x23, [sp, #16]
  b8:	ldr	x8, [x8, #64]
  bc:	mov	x29, sp
  c0:	ldr	x0, [x8]
  c4:	cbz	x0, f8 <really_execute_command+0x68>
  c8:	mov	x19, x2
  cc:	mov	w21, w1
  d0:	add	x23, x8, #0x8
  d4:	ldr	x2, [x19]
  d8:	mov	w1, w21
  dc:	mov	w3, w22
  e0:	bl	1dc <check_request_table>
  e4:	cbz	w0, f4 <really_execute_command+0x64>
  e8:	ldr	x0, [x23], #8
  ec:	cbnz	x0, d4 <really_execute_command+0x44>
  f0:	b	f8 <really_execute_command+0x68>
  f4:	mov	w20, wzr
  f8:	mov	w0, w20
  fc:	ldp	x20, x19, [sp, #48]
 100:	ldp	x22, x21, [sp, #32]
 104:	ldr	x23, [sp, #16]
 108:	ldp	x29, x30, [sp], #64
 10c:	ret

0000000000000110 <ss_execute_line>:
 110:	sub	sp, sp, #0x30
 114:	str	x19, [sp, #32]
 118:	mov	w19, w0
 11c:	stp	x29, x30, [sp, #16]
 120:	add	x29, sp, #0x10
 124:	b	12c <ss_execute_line+0x1c>
 128:	add	x1, x1, #0x1
 12c:	ldrb	w8, [x1]
 130:	cmp	w8, #0x9
 134:	b.eq	128 <ss_execute_line+0x18>  // b.none
 138:	cmp	w8, #0x20
 13c:	b.eq	128 <ss_execute_line+0x18>  // b.none
 140:	cmp	w8, #0x21
 144:	b.ne	170 <ss_execute_line+0x60>  // b.any
 148:	adrp	x8, 0 <_ss_table>
 14c:	ldr	x8, [x8]
 150:	ldr	x8, [x8, w19, sxtw #3]
 154:	ldrb	w8, [x8, #80]
 158:	tbnz	w8, #0, 1a8 <ss_execute_line+0x98>
 15c:	add	x0, x1, #0x1
 160:	bl	0 <system>
 164:	tbnz	w0, #31, 1c0 <ss_execute_line+0xb0>
 168:	mov	w19, wzr
 16c:	b	1c8 <ss_execute_line+0xb8>
 170:	sub	x2, x29, #0x4
 174:	mov	w0, w19
 178:	bl	0 <ss_parse>
 17c:	ldur	w1, [x29, #-4]
 180:	str	x0, [x29, #24]
 184:	cbz	w1, 1b4 <ss_execute_line+0xa4>
 188:	add	x2, x29, #0x18
 18c:	mov	w0, w19
 190:	bl	90 <really_execute_command>
 194:	ldr	x8, [x29, #24]
 198:	mov	w19, w0
 19c:	mov	x0, x8
 1a0:	bl	0 <free>
 1a4:	b	1c8 <ss_execute_line+0xb8>
 1a8:	mov	w19, #0x6d0a                	// #27914
 1ac:	movk	w19, #0xb, lsl #16
 1b0:	b	1c8 <ss_execute_line+0xb8>
 1b4:	bl	0 <free>
 1b8:	mov	w19, wzr
 1bc:	b	1c8 <ss_execute_line+0xb8>
 1c0:	bl	0 <__errno_location>
 1c4:	ldr	w19, [x0]
 1c8:	mov	w0, w19
 1cc:	ldr	x19, [sp, #32]
 1d0:	ldp	x29, x30, [sp, #16]
 1d4:	add	sp, sp, #0x30
 1d8:	ret

00000000000001dc <check_request_table>:
 1dc:	sub	sp, sp, #0x70
 1e0:	adrp	x8, 0 <_ss_table>
 1e4:	ldr	x8, [x8]
 1e8:	stp	x29, x30, [sp, #16]
 1ec:	stp	x28, x27, [sp, #32]
 1f0:	stp	x26, x25, [sp, #48]
 1f4:	stp	x24, x23, [sp, #64]
 1f8:	stp	x22, x21, [sp, #80]
 1fc:	stp	x20, x19, [sp, #96]
 200:	ldr	x25, [x8, w3, sxtw #3]
 204:	ldr	x24, [x2]
 208:	mov	w22, #0x6d04                	// #27908
 20c:	movk	w22, #0xb, lsl #16
 210:	str	w1, [x25, #16]
 214:	str	x2, [x25, #24]
 218:	ldr	x26, [x0, #8]
 21c:	add	x29, sp, #0x10
 220:	ldr	x8, [x26]
 224:	cbz	x8, 2ac <check_request_table+0xd0>
 228:	mov	x20, x2
 22c:	mov	w21, w1
 230:	mov	x23, x0
 234:	mov	x27, xzr
 238:	mov	x28, x26
 23c:	stur	w3, [x29, #-4]
 240:	b	258 <check_request_table+0x7c>
 244:	ldr	x28, [x23, #8]
 248:	add	x27, x27, #0x1
 24c:	add	x26, x28, x27, lsl #5
 250:	ldr	x8, [x26]
 254:	cbz	x8, 2ac <check_request_table+0xd0>
 258:	ldr	x0, [x8]
 25c:	cbz	x0, 244 <check_request_table+0x68>
 260:	add	x19, x8, #0x8
 264:	mov	x1, x24
 268:	bl	0 <strcmp>
 26c:	cbz	w0, 27c <check_request_table+0xa0>
 270:	ldr	x0, [x19], #8
 274:	cbnz	x0, 264 <check_request_table+0x88>
 278:	b	244 <check_request_table+0x68>
 27c:	ldr	x8, [x26]
 280:	add	x9, x28, x27, lsl #5
 284:	ldr	x3, [x25, #48]
 288:	ldur	w2, [x29, #-4]
 28c:	ldr	x8, [x8]
 290:	mov	w0, w21
 294:	mov	x1, x20
 298:	str	x8, [x25, #32]
 29c:	ldr	x8, [x9, #8]
 2a0:	blr	x8
 2a4:	mov	w22, wzr
 2a8:	str	xzr, [x25, #32]
 2ac:	mov	w0, w22
 2b0:	ldp	x20, x19, [sp, #96]
 2b4:	ldp	x22, x21, [sp, #80]
 2b8:	ldp	x24, x23, [sp, #64]
 2bc:	ldp	x26, x25, [sp, #48]
 2c0:	ldp	x28, x27, [sp, #32]
 2c4:	ldp	x29, x30, [sp, #16]
 2c8:	add	sp, sp, #0x70
 2cc:	ret

listen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_listen>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	stp	x28, x27, [sp, #16]
   8:	stp	x26, x25, [sp, #32]
   c:	stp	x24, x23, [sp, #48]
  10:	stp	x22, x21, [sp, #64]
  14:	stp	x20, x19, [sp, #80]
  18:	mov	x29, sp
  1c:	sub	sp, sp, #0x2, lsl #12
  20:	sub	sp, sp, #0x250
  24:	adrp	x8, 0 <_ss_table>
  28:	ldr	x8, [x8]
  2c:	adrp	x25, 0 <ss_listen>
  30:	ldr	x20, [x25]
  34:	mov	w19, w0
  38:	ldr	x27, [x8, w0, sxtw #3]
  3c:	adrp	x28, 0 <ss_listen>
  40:	add	x0, sp, #0x148
  44:	str	xzr, [x28]
  48:	str	x27, [x25]
  4c:	str	wzr, [x27, #136]
  50:	bl	0 <sigemptyset>
  54:	add	x0, sp, #0x148
  58:	mov	w1, #0x2                   	// #2
  5c:	bl	0 <sigaddset>
  60:	add	x1, sp, #0x148
  64:	add	x2, sp, #0x1c8
  68:	mov	w0, wzr
  6c:	bl	0 <sigprocmask>
  70:	adrp	x21, 0 <ss_listen>
  74:	add	x21, x21, #0x0
  78:	add	x0, sp, #0x10
  7c:	mov	w2, #0x138                 	// #312
  80:	mov	x1, x21
  84:	bl	0 <memcpy>
  88:	adrp	x1, 0 <ss_listen>
  8c:	add	x1, x1, #0x0
  90:	mov	w0, #0x2                   	// #2
  94:	bl	0 <signal>
  98:	mov	x22, x0
  9c:	mov	x0, x21
  a0:	bl	0 <_setjmp>
  a4:	add	x1, sp, #0x1c8
  a8:	mov	w0, #0x2                   	// #2
  ac:	mov	x2, xzr
  b0:	bl	0 <sigprocmask>
  b4:	ldr	w8, [x27, #136]
  b8:	mov	w21, wzr
  bc:	cbnz	w8, 23c <ss_listen+0x23c>
  c0:	stp	x22, x20, [sp]
  c4:	mov	w26, #0x6d04                	// #27908
  c8:	mov	w8, #0x1fff                	// #8191
  cc:	add	x22, sp, #0x248
  d0:	adrp	x21, 0 <ss_listen>
  d4:	movk	w26, #0xb, lsl #16
  d8:	add	x21, x21, #0x0
  dc:	add	x20, x22, x8
  e0:	b	ec <ss_listen+0xec>
  e4:	ldr	w8, [x27, #136]
  e8:	cbnz	w8, 220 <ss_listen+0x220>
  ec:	ldr	x23, [x28]
  f0:	mov	w0, #0x12                  	// #18
  f4:	mov	x1, x21
  f8:	bl	0 <signal>
  fc:	cmp	x0, x21
 100:	str	x0, [x28]
 104:	b.eq	128 <ss_listen+0x128>  // b.none
 108:	ldr	x8, [x27, #104]
 10c:	cbz	x8, 134 <ss_listen+0x134>
 110:	ldr	x9, [x25]
 114:	ldr	x0, [x9, #56]
 118:	blr	x8
 11c:	mov	x23, x0
 120:	cbnz	x23, 160 <ss_listen+0x160>
 124:	b	228 <ss_listen+0x228>
 128:	str	x23, [x28]
 12c:	ldr	x8, [x27, #104]
 130:	cbnz	x8, 110 <ss_listen+0x110>
 134:	mov	w0, wzr
 138:	bl	2c0 <print_prompt>
 13c:	adrp	x8, 0 <stdin>
 140:	ldr	x2, [x8]
 144:	add	x0, sp, #0x248
 148:	mov	w1, #0x2000                	// #8192
 14c:	bl	0 <fgets>
 150:	cmp	x0, x22
 154:	csel	x23, x22, xzr, eq  // eq = none
 158:	strb	wzr, [x20]
 15c:	cbz	x23, 228 <ss_listen+0x228>
 160:	mov	w1, #0xa                   	// #10
 164:	mov	x0, x23
 168:	bl	0 <strchr>
 16c:	cbz	x0, 17c <ss_listen+0x17c>
 170:	cmp	x0, x23
 174:	strb	wzr, [x0]
 178:	b.eq	e4 <ss_listen+0xe4>  // b.none
 17c:	ldr	x1, [x28]
 180:	mov	w0, #0x12                  	// #18
 184:	bl	0 <signal>
 188:	ldr	x8, [x27, #112]
 18c:	cbz	x8, 198 <ss_listen+0x198>
 190:	mov	x0, x23
 194:	blr	x8
 198:	mov	w0, w19
 19c:	mov	x1, x23
 1a0:	bl	0 <ss_execute_line>
 1a4:	cmp	w0, w26
 1a8:	b.ne	20c <ss_listen+0x20c>  // b.any
 1ac:	mov	x24, x23
 1b0:	b	1b8 <ss_listen+0x1b8>
 1b4:	add	x24, x24, #0x1
 1b8:	ldrb	w8, [x24]
 1bc:	cmp	w8, #0x20
 1c0:	b.eq	1b4 <ss_listen+0x1b4>  // b.none
 1c4:	cmp	w8, #0x9
 1c8:	b.eq	1b4 <ss_listen+0x1b4>  // b.none
 1cc:	mov	w1, #0x20                  	// #32
 1d0:	mov	x0, x24
 1d4:	bl	0 <strchr>
 1d8:	cbz	x0, 1e0 <ss_listen+0x1e0>
 1dc:	strb	wzr, [x0]
 1e0:	mov	w1, #0x9                   	// #9
 1e4:	mov	x0, x24
 1e8:	bl	0 <strchr>
 1ec:	cbz	x0, 1f4 <ss_listen+0x1f4>
 1f0:	strb	wzr, [x0]
 1f4:	adrp	x2, 0 <ss_listen>
 1f8:	mov	w0, w19
 1fc:	mov	x1, xzr
 200:	add	x2, x2, #0x0
 204:	mov	x3, x24
 208:	bl	0 <ss_error>
 20c:	ldr	x8, [x27, #104]
 210:	cbz	x8, e4 <ss_listen+0xe4>
 214:	mov	x0, x23
 218:	bl	0 <free>
 21c:	b	e4 <ss_listen+0xe4>
 220:	mov	w21, wzr
 224:	b	238 <ss_listen+0x238>
 228:	ldr	x1, [x28]
 22c:	mov	w0, #0x12                  	// #18
 230:	bl	0 <signal>
 234:	add	w21, w26, #0x2
 238:	ldp	x22, x20, [sp]
 23c:	mov	w0, #0x2                   	// #2
 240:	mov	x1, x22
 244:	bl	0 <signal>
 248:	adrp	x0, 0 <ss_listen>
 24c:	add	x0, x0, #0x0
 250:	add	x1, sp, #0x10
 254:	mov	w2, #0x138                 	// #312
 258:	bl	0 <memcpy>
 25c:	str	x20, [x25]
 260:	mov	w0, w21
 264:	add	sp, sp, #0x2, lsl #12
 268:	add	sp, sp, #0x250
 26c:	ldp	x20, x19, [sp, #80]
 270:	ldp	x22, x21, [sp, #64]
 274:	ldp	x24, x23, [sp, #48]
 278:	ldp	x26, x25, [sp, #32]
 27c:	ldp	x28, x27, [sp, #16]
 280:	ldp	x29, x30, [sp], #96
 284:	ret

0000000000000288 <listen_int_handler>:
 288:	stp	x29, x30, [sp, #-16]!
 28c:	adrp	x8, 0 <stdout>
 290:	ldr	x1, [x8]
 294:	mov	w0, #0xa                   	// #10
 298:	mov	x29, sp
 29c:	bl	0 <putc>
 2a0:	adrp	x1, 0 <ss_listen>
 2a4:	add	x1, x1, #0x0
 2a8:	mov	w0, #0x2                   	// #2
 2ac:	bl	0 <signal>
 2b0:	adrp	x0, 0 <ss_listen>
 2b4:	add	x0, x0, #0x0
 2b8:	mov	w1, #0x1                   	// #1
 2bc:	bl	0 <longjmp>

00000000000002c0 <print_prompt>:
 2c0:	stp	x29, x30, [sp, #-32]!
 2c4:	adrp	x8, 0 <ss_listen>
 2c8:	ldr	x9, [x8]
 2cc:	str	x19, [sp, #16]
 2d0:	mov	x29, sp
 2d4:	ldr	x8, [x9, #120]
 2d8:	cbz	x8, 2e4 <print_prompt+0x24>
 2dc:	blr	x8
 2e0:	b	2fc <print_prompt+0x3c>
 2e4:	adrp	x19, 0 <stdout>
 2e8:	ldr	x0, [x9, #56]
 2ec:	ldr	x1, [x19]
 2f0:	bl	0 <fputs>
 2f4:	ldr	x0, [x19]
 2f8:	bl	0 <fflush>
 2fc:	ldr	x19, [sp, #16]
 300:	ldp	x29, x30, [sp], #32
 304:	ret

0000000000000308 <ss_abort_subsystem>:
 308:	adrp	x8, 0 <_ss_table>
 30c:	ldr	x8, [x8]
 310:	mov	w9, #0x1                   	// #1
 314:	ldr	x8, [x8, w0, sxtw #3]
 318:	stp	w9, w1, [x8, #136]
 31c:	ret

0000000000000320 <ss_quit>:
 320:	stp	x29, x30, [sp, #-16]!
 324:	mov	w0, w2
 328:	mov	w1, wzr
 32c:	mov	x29, sp
 330:	bl	308 <ss_abort_subsystem>
 334:	ldp	x29, x30, [sp], #16
 338:	ret

000000000000033c <ss_rl_completion>:
 33c:	stp	x29, x30, [sp, #-16]!
 340:	mov	x29, sp
 344:	cbz	w1, 354 <ss_rl_completion+0x18>
 348:	mov	x0, xzr
 34c:	ldp	x29, x30, [sp], #16
 350:	ret
 354:	adrp	x8, 0 <ss_listen>
 358:	ldr	x8, [x8]
 35c:	ldr	x8, [x8, #128]
 360:	cbz	x8, 348 <ss_rl_completion+0xc>
 364:	adrp	x1, 0 <ss_listen>
 368:	add	x1, x1, #0x0
 36c:	blr	x8
 370:	ldp	x29, x30, [sp], #16
 374:	ret

0000000000000378 <cmd_generator>:
 378:	stp	x29, x30, [sp, #-80]!
 37c:	stp	x22, x21, [sp, #48]
 380:	stp	x20, x19, [sp, #64]
 384:	mov	x19, x0
 388:	adrp	x20, 0 <ss_listen>
 38c:	adrp	x22, 0 <ss_listen>
 390:	str	x25, [sp, #16]
 394:	stp	x24, x23, [sp, #32]
 398:	mov	x29, sp
 39c:	cbz	w1, 450 <cmd_generator+0xd8>
 3a0:	ldrsw	x20, [x20]
 3a4:	adrp	x23, 0 <ss_listen>
 3a8:	adrp	x24, 0 <ss_listen>
 3ac:	ldr	x8, [x23]
 3b0:	cbz	x8, 3bc <cmd_generator+0x44>
 3b4:	ldr	x8, [x8]
 3b8:	cbnz	x8, 3e4 <cmd_generator+0x6c>
 3bc:	ldr	x8, [x22]
 3c0:	ldrsw	x10, [x24]
 3c4:	ldr	x9, [x8]
 3c8:	add	w11, w10, #0x1
 3cc:	lsl	x10, x10, #5
 3d0:	ldr	x9, [x9, #8]
 3d4:	str	w11, [x24]
 3d8:	ldr	x9, [x9, x10]
 3dc:	str	x9, [x23]
 3e0:	cbz	x9, 40c <cmd_generator+0x94>
 3e4:	ldr	x25, [x23]
 3e8:	mov	x1, x19
 3ec:	mov	x2, x20
 3f0:	ldr	x21, [x25]
 3f4:	mov	x0, x21
 3f8:	bl	0 <strncmp>
 3fc:	cbz	w0, 424 <cmd_generator+0xac>
 400:	add	x8, x25, #0x8
 404:	str	x8, [x23]
 408:	b	3ac <cmd_generator+0x34>
 40c:	add	x9, x8, #0x8
 410:	str	x9, [x22]
 414:	ldr	x8, [x8, #8]
 418:	cbz	x8, 48c <cmd_generator+0x114>
 41c:	str	wzr, [x24]
 420:	b	3ac <cmd_generator+0x34>
 424:	mov	x0, x21
 428:	bl	0 <strlen>
 42c:	add	x0, x0, #0x1
 430:	bl	0 <malloc>
 434:	cbz	x0, 440 <cmd_generator+0xc8>
 438:	ldr	x1, [x25]
 43c:	bl	0 <strcpy>
 440:	ldr	x8, [x23]
 444:	add	x8, x8, #0x8
 448:	str	x8, [x23]
 44c:	b	490 <cmd_generator+0x118>
 450:	mov	x0, x19
 454:	bl	0 <strlen>
 458:	adrp	x8, 0 <ss_listen>
 45c:	ldr	x8, [x8]
 460:	str	w0, [x20]
 464:	ldr	x8, [x8, #64]
 468:	str	x8, [x22]
 46c:	cbz	x8, 48c <cmd_generator+0x114>
 470:	ldr	x8, [x8]
 474:	cbz	x8, 48c <cmd_generator+0x114>
 478:	adrp	x8, 0 <ss_listen>
 47c:	adrp	x9, 0 <ss_listen>
 480:	str	wzr, [x8]
 484:	str	xzr, [x9]
 488:	b	3a0 <cmd_generator+0x28>
 48c:	mov	x0, xzr
 490:	ldp	x20, x19, [sp, #64]
 494:	ldp	x22, x21, [sp, #48]
 498:	ldp	x24, x23, [sp, #32]
 49c:	ldr	x25, [sp, #16]
 4a0:	ldp	x29, x30, [sp], #80
 4a4:	ret

parse.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_parse>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	stp	x22, x21, [sp, #48]
   8:	mov	w21, w0
   c:	mov	w0, #0x8                   	// #8
  10:	stp	x26, x25, [sp, #16]
  14:	stp	x24, x23, [sp, #32]
  18:	stp	x20, x19, [sp, #64]
  1c:	mov	x29, sp
  20:	mov	x19, x2
  24:	mov	x22, x1
  28:	bl	0 <malloc>
  2c:	mov	x20, x0
  30:	cbz	x0, 170 <ss_parse+0x170>
  34:	adrp	x24, 0 <ss_parse>
  38:	mov	w23, wzr
  3c:	mov	w8, wzr
  40:	add	x24, x24, #0x0
  44:	mov	w25, #0x22                  	// #34
  48:	mov	x26, x22
  4c:	str	xzr, [x20]
  50:	cbnz	w8, e0 <ss_parse+0xe0>
  54:	mov	x26, x22
  58:	ldrb	w8, [x26]
  5c:	cmp	w8, #0x22
  60:	b.hi	7c <ss_parse+0x7c>  // b.pmore
  64:	adr	x9, 74 <ss_parse+0x74>
  68:	ldrb	w10, [x24, x8]
  6c:	add	x9, x9, x10, lsl #2
  70:	br	x9
  74:	add	x26, x26, #0x1
  78:	b	58 <ss_parse+0x58>
  7c:	add	w8, w23, #0x2
  80:	lsl	x1, x8, #3
  84:	mov	x0, x20
  88:	bl	0 <realloc>
  8c:	cbz	x0, 1ac <ss_parse+0x1ac>
  90:	mov	w8, #0x1                   	// #1
  94:	mov	x20, x0
  98:	mov	x22, x26
  9c:	b	c0 <ss_parse+0xc0>
  a0:	add	w8, w23, #0x2
  a4:	lsl	x1, x8, #3
  a8:	mov	x0, x20
  ac:	bl	0 <realloc>
  b0:	cbz	x0, 1ac <ss_parse+0x1ac>
  b4:	add	x22, x26, #0x1
  b8:	mov	w8, #0x2                   	// #2
  bc:	mov	x20, x0
  c0:	sxtw	x9, w23
  c4:	str	x26, [x20, w23, sxtw #3]
  c8:	add	x23, x9, #0x1
  cc:	str	xzr, [x20, x23, lsl #3]
  d0:	b	e0 <ss_parse+0xe0>
  d4:	mov	w8, wzr
  d8:	strb	wzr, [x26], #1
  dc:	add	x22, x22, #0x1
  e0:	cmp	w8, #0x1
  e4:	b.ne	12c <ss_parse+0x12c>  // b.any
  e8:	ldrb	w8, [x22]
  ec:	cmp	w8, #0x9
  f0:	b.eq	d4 <ss_parse+0xd4>  // b.none
  f4:	cmp	w8, #0x20
  f8:	b.eq	d4 <ss_parse+0xd4>  // b.none
  fc:	cbz	w8, 190 <ss_parse+0x190>
 100:	cmp	w8, #0x22
 104:	add	x22, x22, #0x1
 108:	b.ne	114 <ss_parse+0x114>  // b.any
 10c:	mov	w8, #0x2                   	// #2
 110:	b	e0 <ss_parse+0xe0>
 114:	strb	w8, [x26], #1
 118:	mov	w8, #0x1                   	// #1
 11c:	b	e0 <ss_parse+0xe0>
 120:	strb	w8, [x26], #1
 124:	mov	w8, #0x2                   	// #2
 128:	mov	x22, x9
 12c:	cmp	w8, #0x2
 130:	b.ne	50 <ss_parse+0x50>  // b.any
 134:	ldrb	w8, [x22]
 138:	cbz	w8, 198 <ss_parse+0x198>
 13c:	cmp	w8, #0x22
 140:	add	x9, x22, #0x1
 144:	b.ne	120 <ss_parse+0x120>  // b.any
 148:	ldrb	w8, [x9]
 14c:	cmp	w8, #0x22
 150:	b.ne	164 <ss_parse+0x164>  // b.any
 154:	strb	w25, [x26], #1
 158:	add	x22, x22, #0x2
 15c:	mov	w8, #0x2                   	// #2
 160:	b	12c <ss_parse+0x12c>
 164:	mov	w8, #0x1                   	// #1
 168:	mov	x22, x9
 16c:	b	12c <ss_parse+0x12c>
 170:	bl	0 <__errno_location>
 174:	ldrsw	x1, [x0]
 178:	adrp	x2, 0 <ss_parse>
 17c:	add	x2, x2, #0x0
 180:	mov	w0, w21
 184:	bl	0 <ss_error>
 188:	mov	w23, wzr
 18c:	b	1bc <ss_parse+0x1bc>
 190:	strb	wzr, [x26]
 194:	b	1bc <ss_parse+0x1bc>
 198:	adrp	x2, 0 <ss_parse>
 19c:	add	x2, x2, #0x0
 1a0:	mov	w0, w21
 1a4:	mov	x1, xzr
 1a8:	bl	0 <ss_error>
 1ac:	mov	x0, x20
 1b0:	bl	0 <free>
 1b4:	mov	w23, wzr
 1b8:	mov	x20, xzr
 1bc:	str	w23, [x19]
 1c0:	mov	x0, x20
 1c4:	ldp	x20, x19, [sp, #64]
 1c8:	ldp	x22, x21, [sp, #48]
 1cc:	ldp	x24, x23, [sp, #32]
 1d0:	ldp	x26, x25, [sp, #16]
 1d4:	ldp	x29, x30, [sp], #80
 1d8:	ret

error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_name>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	adrp	x8, 0 <_ss_table>
   8:	ldr	x8, [x8]
   c:	stp	x22, x21, [sp, #16]
  10:	stp	x20, x19, [sp, #32]
  14:	mov	x29, sp
  18:	ldr	x22, [x8, w0, sxtw #3]
  1c:	ldr	x19, [x22]
  20:	ldr	x21, [x22, #32]
  24:	mov	x0, x19
  28:	bl	0 <strlen>
  2c:	mov	x20, x0
  30:	cbz	x21, 98 <ss_name+0x98>
  34:	mov	x0, x21
  38:	bl	0 <strlen>
  3c:	add	x8, x20, x0
  40:	add	x0, x8, #0x4
  44:	bl	0 <malloc>
  48:	ldrb	w9, [x19]
  4c:	mov	x8, x0
  50:	cbz	w9, 68 <ss_name+0x68>
  54:	add	x10, x19, #0x1
  58:	mov	x8, x0
  5c:	strb	w9, [x8], #1
  60:	ldrb	w9, [x10], #1
  64:	cbnz	w9, 5c <ss_name+0x5c>
  68:	mov	w9, #0x2820                	// #10272
  6c:	strh	w9, [x8], #2
  70:	ldr	x10, [x22, #32]
  74:	ldrb	w9, [x10]
  78:	cbz	w9, 8c <ss_name+0x8c>
  7c:	add	x10, x10, #0x1
  80:	strb	w9, [x8], #1
  84:	ldrb	w9, [x10], #1
  88:	cbnz	w9, 80 <ss_name+0x80>
  8c:	mov	w9, #0x29                  	// #41
  90:	strh	w9, [x8]
  94:	b	ac <ss_name+0xac>
  98:	add	w0, w20, #0x1
  9c:	bl	0 <malloc>
  a0:	cbz	x0, ac <ss_name+0xac>
  a4:	ldr	x1, [x22]
  a8:	bl	0 <strcpy>
  ac:	ldp	x20, x19, [sp, #32]
  b0:	ldp	x22, x21, [sp, #16]
  b4:	ldp	x29, x30, [sp], #48
  b8:	ret

00000000000000bc <ss_error>:
  bc:	sub	sp, sp, #0x120
  c0:	stp	x29, x30, [sp, #240]
  c4:	add	x29, sp, #0xf0
  c8:	mov	x8, #0xffffffffffffffd8    	// #-40
  cc:	mov	x9, sp
  d0:	sub	x10, x29, #0x68
  d4:	movk	x8, #0xff80, lsl #32
  d8:	add	x11, x29, #0x30
  dc:	add	x9, x9, #0x80
  e0:	add	x10, x10, #0x28
  e4:	stp	x28, x21, [sp, #256]
  e8:	stp	x20, x19, [sp, #272]
  ec:	mov	x19, x2
  f0:	mov	x20, x1
  f4:	stp	x3, x4, [x29, #-104]
  f8:	stp	x5, x6, [x29, #-88]
  fc:	stur	x7, [x29, #-72]
 100:	stp	q1, q2, [sp, #16]
 104:	stp	q3, q4, [sp, #48]
 108:	str	q0, [sp]
 10c:	stp	q5, q6, [sp, #80]
 110:	str	q7, [sp, #112]
 114:	stp	x9, x8, [x29, #-16]
 118:	stp	x11, x10, [x29, #-32]
 11c:	bl	0 <ss_name>
 120:	ldp	q0, q1, [x29, #-32]
 124:	sub	x3, x29, #0x40
 128:	mov	x1, x20
 12c:	mov	x2, x19
 130:	mov	x21, x0
 134:	stp	q0, q1, [x29, #-64]
 138:	bl	0 <com_err_va>
 13c:	mov	x0, x21
 140:	bl	0 <free>
 144:	ldp	x20, x19, [sp, #272]
 148:	ldp	x28, x21, [sp, #256]
 14c:	ldp	x29, x30, [sp, #240]
 150:	add	sp, sp, #0x120
 154:	ret

0000000000000158 <ss_perror>:
 158:	stp	x29, x30, [sp, #-16]!
 15c:	mov	x3, x2
 160:	adrp	x2, 0 <ss_name>
 164:	add	x2, x2, #0x0
 168:	mov	x29, sp
 16c:	bl	bc <ss_error>
 170:	ldp	x29, x30, [sp], #16
 174:	ret

prompt.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_set_prompt>:
   0:	adrp	x8, 0 <_ss_table>
   4:	ldr	x8, [x8]
   8:	ldr	x8, [x8, w0, sxtw #3]
   c:	str	x1, [x8, #56]
  10:	ret

0000000000000014 <ss_get_prompt>:
  14:	adrp	x8, 0 <_ss_table>
  18:	ldr	x8, [x8]
  1c:	ldr	x8, [x8, w0, sxtw #3]
  20:	ldr	x0, [x8, #56]
  24:	ret

request_tbl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_add_request_table>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	adrp	x9, 0 <_ss_table>
   8:	ldr	x9, [x9]
   c:	stp	x22, x21, [sp, #32]
  10:	stp	x20, x19, [sp, #48]
  14:	str	x23, [sp, #16]
  18:	ldr	x22, [x9, w0, sxtw #3]
  1c:	mov	x19, x3
  20:	mov	w21, w2
  24:	mov	x20, x1
  28:	ldr	x0, [x22, #64]
  2c:	mov	x8, xzr
  30:	mov	x23, #0xffffffffffffffff    	// #-1
  34:	mov	x29, sp
  38:	ldr	x9, [x0, x8]
  3c:	add	x23, x23, #0x1
  40:	add	x8, x8, #0x8
  44:	cbnz	x9, 38 <ss_add_request_table+0x38>
  48:	add	x8, x8, #0x8
  4c:	and	x1, x8, #0x7fffffff8
  50:	bl	0 <realloc>
  54:	cbz	x0, a0 <ss_add_request_table+0xa0>
  58:	cmp	w23, w21
  5c:	csel	w9, w23, w21, lt  // lt = tstop
  60:	and	x8, x23, #0xffffffff
  64:	sxtw	x9, w9
  68:	str	x0, [x22, #64]
  6c:	add	x10, x0, x8, lsl #3
  70:	ldr	x11, [x10]
  74:	cmp	x8, x9
  78:	sub	x8, x8, #0x1
  7c:	str	x11, [x10, #8]
  80:	ldr	x0, [x22, #64]
  84:	b.gt	6c <ss_add_request_table+0x6c>
  88:	str	x20, [x0, x9, lsl #3]
  8c:	ldr	x9, [x22, #64]
  90:	mov	w8, wzr
  94:	add	w10, w23, #0x1
  98:	str	xzr, [x9, w10, uxtw #3]
  9c:	b	a8 <ss_add_request_table+0xa8>
  a0:	bl	0 <__errno_location>
  a4:	ldr	w8, [x0]
  a8:	str	w8, [x19]
  ac:	ldp	x20, x19, [sp, #48]
  b0:	ldp	x22, x21, [sp, #32]
  b4:	ldr	x23, [sp, #16]
  b8:	ldp	x29, x30, [sp], #64
  bc:	ret

00000000000000c0 <ss_delete_request_table>:
  c0:	mov	w8, #0x6d08                	// #27912
  c4:	movk	w8, #0xb, lsl #16
  c8:	str	w8, [x2]
  cc:	adrp	x8, 0 <_ss_table>
  d0:	ldr	x8, [x8]
  d4:	ldr	x8, [x8, w0, sxtw #3]
  d8:	ldr	x8, [x8, #64]
  dc:	ldr	x10, [x8]
  e0:	cbz	x10, 108 <ss_delete_request_table+0x48>
  e4:	add	x9, x8, #0x8
  e8:	b	f4 <ss_delete_request_table+0x34>
  ec:	ldr	x10, [x9], #8
  f0:	cbz	x10, 108 <ss_delete_request_table+0x48>
  f4:	cmp	x10, x1
  f8:	b.eq	ec <ss_delete_request_table+0x2c>  // b.none
  fc:	str	x10, [x8], #8
 100:	str	wzr, [x2]
 104:	b	ec <ss_delete_request_table+0x2c>
 108:	str	xzr, [x8]
 10c:	ret

list_rqs.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_list_requests>:
   0:	sub	sp, sp, #0x170
   4:	add	x0, sp, #0x8
   8:	stp	x29, x30, [sp, #272]
   c:	stp	x28, x27, [sp, #288]
  10:	stp	x26, x25, [sp, #304]
  14:	stp	x24, x23, [sp, #320]
  18:	stp	x22, x21, [sp, #336]
  1c:	stp	x20, x19, [sp, #352]
  20:	add	x29, sp, #0x110
  24:	mov	w21, w2
  28:	bl	0 <sigemptyset>
  2c:	add	x0, sp, #0x8
  30:	mov	w1, #0x2                   	// #2
  34:	bl	0 <sigaddset>
  38:	add	x1, sp, #0x8
  3c:	add	x2, sp, #0x88
  40:	mov	w0, wzr
  44:	bl	0 <sigprocmask>
  48:	mov	w0, #0x2                   	// #2
  4c:	mov	w1, #0x1                   	// #1
  50:	bl	0 <signal>
  54:	mov	x19, x0
  58:	bl	0 <ss_pager_create>
  5c:	tbnz	w0, #31, 1e8 <ss_list_requests+0x1e8>
  60:	adrp	x1, 0 <ss_list_requests>
  64:	add	x1, x1, #0x0
  68:	bl	0 <fdopen>
  6c:	mov	x20, x0
  70:	add	x1, sp, #0x88
  74:	mov	w0, #0x2                   	// #2
  78:	mov	x2, xzr
  7c:	bl	0 <sigprocmask>
  80:	adrp	x22, 0 <_ss_table>
  84:	ldr	x8, [x22]
  88:	sbfiz	x21, x21, #3, #32
  8c:	adrp	x1, 0 <ss_list_requests>
  90:	add	x1, x1, #0x0
  94:	ldr	x8, [x8, x21]
  98:	mov	x0, x20
  9c:	ldr	x2, [x8]
  a0:	bl	0 <fprintf>
  a4:	ldr	x8, [x22]
  a8:	ldr	x8, [x8, x21]
  ac:	ldr	x24, [x8, #64]
  b0:	ldr	x8, [x24]
  b4:	cbz	x8, 1ac <ss_list_requests+0x1ac>
  b8:	adrp	x21, 0 <ss_list_requests>
  bc:	mov	w25, #0x19                  	// #25
  c0:	add	x21, x21, #0x0
  c4:	b	d0 <ss_list_requests+0xd0>
  c8:	ldr	x8, [x24, #8]!
  cc:	cbz	x8, 1ac <ss_list_requests+0x1ac>
  d0:	ldr	x26, [x8, #8]
  d4:	ldr	x8, [x26]
  d8:	cbnz	x8, 100 <ss_list_requests+0x100>
  dc:	b	c8 <ss_list_requests+0xc8>
  e0:	ldr	x0, [x26, #16]
  e4:	mov	x1, x20
  e8:	bl	0 <fputs>
  ec:	mov	w0, #0xa                   	// #10
  f0:	mov	x1, x20
  f4:	bl	0 <fputc>
  f8:	ldr	x8, [x26, #32]!
  fc:	cbz	x8, c8 <ss_list_requests+0xc8>
 100:	ldrb	w9, [x26, #24]
 104:	tbnz	w9, #0, f8 <ss_list_requests+0xf8>
 108:	ldr	x22, [x8]
 10c:	cbz	x22, 164 <ss_list_requests+0x164>
 110:	add	x28, x8, #0x8
 114:	mov	w27, #0xfffffffe            	// #-2
 118:	b	124 <ss_list_requests+0x124>
 11c:	ldr	x22, [x28], #8
 120:	cbz	x22, 168 <ss_list_requests+0x168>
 124:	mov	x0, x22
 128:	bl	0 <strlen>
 12c:	mov	x23, x0
 130:	mov	x0, x22
 134:	mov	x1, x20
 138:	bl	0 <fputs>
 13c:	ldr	x8, [x28]
 140:	add	w9, w27, w23
 144:	add	w27, w9, #0x2
 148:	cbz	x8, 11c <ss_list_requests+0x11c>
 14c:	mov	w1, #0x2                   	// #2
 150:	mov	w2, #0x1                   	// #1
 154:	mov	x0, x21
 158:	mov	x3, x20
 15c:	bl	0 <fwrite>
 160:	b	11c <ss_list_requests+0x11c>
 164:	mov	w27, #0xfffffffe            	// #-2
 168:	cmp	w27, #0x18
 16c:	b.lt	180 <ss_list_requests+0x180>  // b.tstop
 170:	mov	w0, #0xa                   	// #10
 174:	mov	x1, x20
 178:	bl	0 <fputc>
 17c:	mov	w27, wzr
 180:	cmp	w27, #0x18
 184:	b.gt	e0 <ss_list_requests+0xe0>
 188:	mov	w22, wzr
 18c:	sub	w23, w25, w27
 190:	mov	w0, #0x20                  	// #32
 194:	mov	x1, x20
 198:	bl	0 <fputc>
 19c:	add	w22, w22, #0x1
 1a0:	cmp	w22, w23
 1a4:	b.lt	190 <ss_list_requests+0x190>  // b.tstop
 1a8:	b	e0 <ss_list_requests+0xe0>
 1ac:	mov	x0, x20
 1b0:	bl	0 <fclose>
 1b4:	add	x0, sp, #0x4
 1b8:	bl	0 <wait>
 1bc:	mov	w0, #0x2                   	// #2
 1c0:	mov	x1, x19
 1c4:	bl	0 <signal>
 1c8:	ldp	x20, x19, [sp, #352]
 1cc:	ldp	x22, x21, [sp, #336]
 1d0:	ldp	x24, x23, [sp, #320]
 1d4:	ldp	x26, x25, [sp, #304]
 1d8:	ldp	x28, x27, [sp, #288]
 1dc:	ldp	x29, x30, [sp, #272]
 1e0:	add	sp, sp, #0x170
 1e4:	ret
 1e8:	adrp	x0, 0 <ss_list_requests>
 1ec:	add	x0, x0, #0x0
 1f0:	bl	0 <perror>
 1f4:	b	1bc <ss_list_requests+0x1bc>

pager.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_safe_getenv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	mov	x29, sp
   c:	mov	x19, x0
  10:	bl	0 <getuid>
  14:	mov	w20, w0
  18:	bl	0 <geteuid>
  1c:	cmp	w20, w0
  20:	b.ne	60 <ss_safe_getenv+0x60>  // b.any
  24:	bl	0 <getgid>
  28:	mov	w20, w0
  2c:	bl	0 <getegid>
  30:	cmp	w20, w0
  34:	b.ne	60 <ss_safe_getenv+0x60>  // b.any
  38:	mov	w0, #0x3                   	// #3
  3c:	mov	w1, wzr
  40:	mov	w2, wzr
  44:	mov	w3, wzr
  48:	mov	w4, wzr
  4c:	bl	0 <prctl>
  50:	cbz	w0, 60 <ss_safe_getenv+0x60>
  54:	mov	x0, x19
  58:	bl	0 <secure_getenv>
  5c:	b	64 <ss_safe_getenv+0x64>
  60:	mov	x0, xzr
  64:	ldp	x20, x19, [sp, #16]
  68:	ldp	x29, x30, [sp], #32
  6c:	ret

0000000000000070 <ss_pager_create>:
  70:	sub	sp, sp, #0x20
  74:	add	x0, sp, #0x8
  78:	stp	x29, x30, [sp, #16]
  7c:	add	x29, sp, #0x10
  80:	bl	0 <pipe>
  84:	cbz	w0, 90 <ss_pager_create+0x20>
  88:	mov	w0, #0xffffffff            	// #-1
  8c:	b	ac <ss_pager_create+0x3c>
  90:	bl	0 <fork>
  94:	cmn	w0, #0x1
  98:	b.eq	ac <ss_pager_create+0x3c>  // b.none
  9c:	cbz	w0, b8 <ss_pager_create+0x48>
  a0:	ldr	w0, [sp, #8]
  a4:	bl	0 <close>
  a8:	ldr	w0, [sp, #12]
  ac:	ldp	x29, x30, [sp, #16]
  b0:	add	sp, sp, #0x20
  b4:	ret
  b8:	ldr	w0, [sp, #8]
  bc:	mov	w1, wzr
  c0:	bl	0 <dup2>
  c4:	cmn	w0, #0x1
  c8:	b.ne	d4 <ss_pager_create+0x64>  // b.any
  cc:	mov	w0, #0x1                   	// #1
  d0:	bl	0 <exit>
  d4:	bl	d8 <ss_page_stdin>

00000000000000d8 <ss_page_stdin>:
  d8:	sub	sp, sp, #0xf0
  dc:	str	x19, [sp, #224]
  e0:	mov	w19, #0x3                   	// #3
  e4:	stp	x29, x30, [sp, #208]
  e8:	add	x29, sp, #0xd0
  ec:	mov	w0, w19
  f0:	bl	0 <close>
  f4:	add	w19, w19, #0x1
  f8:	cmp	w19, #0x20
  fc:	b.ne	ec <ss_page_stdin+0x14>  // b.any
 100:	mov	w0, #0x2                   	// #2
 104:	mov	x1, xzr
 108:	bl	0 <signal>
 10c:	add	x2, sp, #0x50
 110:	mov	w0, wzr
 114:	mov	x1, xzr
 118:	bl	0 <sigprocmask>
 11c:	add	x0, sp, #0x50
 120:	mov	w1, #0x2                   	// #2
 124:	bl	0 <sigdelset>
 128:	add	x1, sp, #0x50
 12c:	mov	w0, #0x2                   	// #2
 130:	mov	x2, xzr
 134:	bl	0 <sigprocmask>
 138:	adrp	x19, 0 <_ss_pager_name>
 13c:	ldr	x8, [x19]
 140:	cbnz	x8, 164 <ss_page_stdin+0x8c>
 144:	adrp	x0, 0 <ss_safe_getenv>
 148:	add	x0, x0, #0x0
 14c:	bl	0 <ss_safe_getenv>
 150:	adrp	x8, 0 <ss_safe_getenv>
 154:	add	x8, x8, #0x0
 158:	cmp	x0, #0x0
 15c:	csel	x8, x8, x0, eq  // eq = none
 160:	str	x8, [x19]
 164:	ldr	x0, [x19]
 168:	mov	x2, xzr
 16c:	mov	x1, x0
 170:	bl	0 <execlp>
 174:	mov	x1, sp
 178:	mov	w2, #0x50                  	// #80
 17c:	mov	w0, wzr
 180:	bl	0 <read>
 184:	cmp	w0, #0x1
 188:	b.lt	1b0 <ss_page_stdin+0xd8>  // b.tstop
 18c:	sxtw	x1, w0
 190:	mov	x0, sp
 194:	bl	1bc <write_all>
 198:	mov	x1, sp
 19c:	mov	w2, #0x50                  	// #80
 1a0:	mov	w0, wzr
 1a4:	bl	0 <read>
 1a8:	cmp	w0, #0x0
 1ac:	b.gt	18c <ss_page_stdin+0xb4>
 1b0:	bl	0 <__errno_location>
 1b4:	ldr	w0, [x0]
 1b8:	bl	0 <exit>

00000000000001bc <write_all>:
 1bc:	stp	x29, x30, [sp, #-48]!
 1c0:	cmp	x1, #0x0
 1c4:	str	x21, [sp, #16]
 1c8:	cset	w21, eq  // eq = none
 1cc:	stp	x20, x19, [sp, #32]
 1d0:	mov	x29, sp
 1d4:	cbz	x1, 228 <write_all+0x6c>
 1d8:	mov	x19, x1
 1dc:	mov	x20, x0
 1e0:	b	1e8 <write_all+0x2c>
 1e4:	tbnz	w21, #0, 228 <write_all+0x6c>
 1e8:	mov	w0, #0x1                   	// #1
 1ec:	mov	x1, x20
 1f0:	mov	x2, x19
 1f4:	bl	0 <write>
 1f8:	tbz	x0, #63, 218 <write_all+0x5c>
 1fc:	bl	0 <__errno_location>
 200:	ldr	w8, [x0]
 204:	cmp	w8, #0xb
 208:	b.eq	1e4 <write_all+0x28>  // b.none
 20c:	cmp	w8, #0x4
 210:	b.eq	1e4 <write_all+0x28>  // b.none
 214:	b	228 <write_all+0x6c>
 218:	subs	x19, x19, x0
 21c:	add	x20, x20, x0
 220:	cset	w21, eq  // eq = none
 224:	cbnz	x19, 1e8 <write_all+0x2c>
 228:	ldp	x20, x19, [sp, #32]
 22c:	ldr	x21, [sp, #16]
 230:	ldp	x29, x30, [sp], #48
 234:	ret

requests.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_self_identify>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x8, 0 <_ss_table>
   8:	ldr	x8, [x8]
   c:	adrp	x0, 0 <ss_self_identify>
  10:	add	x0, x0, #0x0
  14:	mov	x29, sp
  18:	ldr	x8, [x8, w2, sxtw #3]
  1c:	ldp	x1, x2, [x8]
  20:	bl	0 <printf>
  24:	ldp	x29, x30, [sp], #16
  28:	ret

000000000000002c <ss_subsystem_name>:
  2c:	stp	x29, x30, [sp, #-16]!
  30:	adrp	x8, 0 <_ss_table>
  34:	ldr	x8, [x8]
  38:	mov	x29, sp
  3c:	ldr	x8, [x8, w2, sxtw #3]
  40:	ldr	x0, [x8]
  44:	bl	0 <puts>
  48:	ldp	x29, x30, [sp], #16
  4c:	ret

0000000000000050 <ss_subsystem_version>:
  50:	stp	x29, x30, [sp, #-16]!
  54:	adrp	x8, 0 <_ss_table>
  58:	ldr	x8, [x8]
  5c:	mov	x29, sp
  60:	ldr	x8, [x8, w2, sxtw #3]
  64:	ldr	x0, [x8, #8]
  68:	bl	0 <puts>
  6c:	ldp	x29, x30, [sp], #16
  70:	ret

0000000000000074 <ss_unimplemented>:
  74:	stp	x29, x30, [sp, #-16]!
  78:	mov	w0, w2
  7c:	adrp	x2, 0 <ss_self_identify>
  80:	mov	w1, #0x6d0b                	// #27915
  84:	add	x2, x2, #0x0
  88:	movk	w1, #0xb, lsl #16
  8c:	mov	x29, sp
  90:	bl	0 <ss_perror>
  94:	ldp	x29, x30, [sp], #16
  98:	ret

data.o:     file format elf64-littleaarch64


get_readline.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_get_readline>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	adrp	x8, 0 <_ss_table>
   8:	ldr	x8, [x8]
   c:	stp	x22, x21, [sp, #16]
  10:	stp	x20, x19, [sp, #32]
  14:	mov	x29, sp
  18:	ldr	x22, [x8, w0, sxtw #3]
  1c:	ldr	x8, [x22, #88]
  20:	cbz	x8, 34 <ss_get_readline+0x34>
  24:	ldp	x20, x19, [sp, #32]
  28:	ldp	x22, x21, [sp, #16]
  2c:	ldp	x29, x30, [sp], #48
  30:	ret
  34:	adrp	x0, 0 <ss_get_readline>
  38:	add	x0, x0, #0x0
  3c:	bl	0 <ss_safe_getenv>
  40:	adrp	x8, 0 <ss_get_readline>
  44:	add	x8, x8, #0x0
  48:	cmp	x0, #0x0
  4c:	csel	x19, x8, x0, eq  // eq = none
  50:	ldrb	w8, [x19]
  54:	cbz	w8, 24 <ss_get_readline+0x24>
  58:	adrp	x1, 0 <ss_get_readline>
  5c:	add	x1, x1, #0x0
  60:	mov	x0, x19
  64:	bl	0 <strcmp>
  68:	cbz	w0, 24 <ss_get_readline+0x24>
  6c:	mov	x0, x19
  70:	bl	0 <strlen>
  74:	add	x0, x0, #0x1
  78:	bl	0 <malloc>
  7c:	cbz	x0, 24 <ss_get_readline+0x24>
  80:	mov	x1, x19
  84:	mov	x20, x0
  88:	bl	0 <strcpy>
  8c:	mov	x19, x0
  90:	b	9c <ss_get_readline+0x9c>
  94:	mov	x19, x21
  98:	cbz	x21, d0 <ss_get_readline+0xd0>
  9c:	mov	w1, #0x3a                  	// #58
  a0:	mov	x0, x19
  a4:	bl	0 <strchr>
  a8:	mov	x21, x0
  ac:	cbz	x0, b4 <ss_get_readline+0xb4>
  b0:	strb	wzr, [x21], #1
  b4:	ldrb	w8, [x19]
  b8:	cbz	w8, 94 <ss_get_readline+0x94>
  bc:	mov	w1, #0x2                   	// #2
  c0:	mov	x0, x19
  c4:	bl	0 <dlopen>
  c8:	cbz	x0, 94 <ss_get_readline+0x94>
  cc:	mov	x19, x0
  d0:	mov	x0, x20
  d4:	bl	0 <free>
  d8:	cbz	x19, 24 <ss_get_readline+0x24>
  dc:	adrp	x1, 0 <ss_get_readline>
  e0:	add	x1, x1, #0x0
  e4:	mov	x0, x19
  e8:	str	x19, [x22, #88]
  ec:	bl	0 <dlsym>
  f0:	adrp	x1, 0 <ss_get_readline>
  f4:	str	x0, [x22, #104]
  f8:	add	x1, x1, #0x0
  fc:	mov	x0, x19
 100:	bl	0 <dlsym>
 104:	adrp	x1, 0 <ss_get_readline>
 108:	str	x0, [x22, #112]
 10c:	add	x1, x1, #0x0
 110:	mov	x0, x19
 114:	bl	0 <dlsym>
 118:	adrp	x1, 0 <ss_get_readline>
 11c:	str	x0, [x22, #120]
 120:	add	x1, x1, #0x0
 124:	mov	x0, x19
 128:	bl	0 <dlsym>
 12c:	adrp	x1, 0 <ss_get_readline>
 130:	str	x0, [x22, #128]
 134:	add	x1, x1, #0x0
 138:	mov	x0, x19
 13c:	bl	0 <dlsym>
 140:	cbz	x0, 14c <ss_get_readline+0x14c>
 144:	ldr	x8, [x22]
 148:	str	x8, [x0]
 14c:	adrp	x1, 0 <ss_get_readline>
 150:	add	x1, x1, #0x0
 154:	mov	x0, x19
 158:	bl	0 <dlsym>
 15c:	cbz	x0, 16c <ss_get_readline+0x16c>
 160:	adrp	x8, 0 <ss_rl_completion>
 164:	add	x8, x8, #0x0
 168:	str	x8, [x0]
 16c:	adrp	x8, 0 <ss_get_readline>
 170:	add	x8, x8, #0x0
 174:	str	x8, [x22, #96]
 178:	b	24 <ss_get_readline+0x24>

000000000000017c <ss_release_readline>:
 17c:	stp	x29, x30, [sp, #-32]!
 180:	str	x19, [sp, #16]
 184:	mov	x19, x0
 188:	ldr	x0, [x0, #88]
 18c:	mov	x29, sp
 190:	cbz	x0, 1a8 <ss_release_readline+0x2c>
 194:	movi	v0.2d, #0x0
 198:	stur	q0, [x19, #120]
 19c:	stur	q0, [x19, #104]
 1a0:	bl	0 <dlclose>
 1a4:	str	xzr, [x19, #88]
 1a8:	ldr	x19, [sp, #16]
 1ac:	ldp	x29, x30, [sp], #32
 1b0:	ret
